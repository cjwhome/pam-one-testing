
c:/particleProjects/pam-one-testing/target/1.2.1/electron/pam-one-testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014c68  08080018  08080018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  08094c80  08094c80  00024c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .backup       00000004  40024000  08094c88  00034000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000001d8  20000400  08094c8c  00040400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000126c  200005d8  200005d8  000505d8  2**3
                  ALLOC
  6 .module_info_suffix 00000028  08094e64  08094e64  00044e64  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  08094e8c  08094e8c  00044e8c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001c6915  00000000  00000000  00044e90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00024705  00000000  00000000  0020b7a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002f849  00000000  00000000  0022feaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000035b8  00000000  00000000  0025f6f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005a58  00000000  00000000  00262cab  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00040804  00000000  00000000  00268703  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00055e99  00000000  00000000  002a8f07  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000bb645  00000000  00000000  002feda0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0001082c  00000000  00000000  003ba3e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080018 <user_part_module>:
 8080018:	48 18 09 08                                         H...

0808001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 808001c:	4809      	ldr	r0, [pc, #36]	; (8080044 <module_user_pre_init+0x28>)
 808001e:	490a      	ldr	r1, [pc, #40]	; (8080048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080022:	4288      	cmp	r0, r1
 8080024:	d005      	beq.n	8080032 <module_user_pre_init+0x16>
 8080026:	4a09      	ldr	r2, [pc, #36]	; (808004c <module_user_pre_init+0x30>)
 8080028:	4282      	cmp	r2, r0
 808002a:	d002      	beq.n	8080032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 808002c:	1a12      	subs	r2, r2, r0
 808002e:	f00e fc7a 	bl	808e926 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080032:	4807      	ldr	r0, [pc, #28]	; (8080050 <module_user_pre_init+0x34>)
 8080034:	4a07      	ldr	r2, [pc, #28]	; (8080054 <module_user_pre_init+0x38>)
 8080036:	2100      	movs	r1, #0
 8080038:	1a12      	subs	r2, r2, r0
 808003a:	f00e fc7f 	bl	808e93c <memset>
    return &link_heap_start;
}
 808003e:	4806      	ldr	r0, [pc, #24]	; (8080058 <module_user_pre_init+0x3c>)
 8080040:	bd08      	pop	{r3, pc}
 8080042:	bf00      	nop
 8080044:	20000400 	.word	0x20000400
 8080048:	08094c8c 	.word	0x08094c8c
 808004c:	200005d8 	.word	0x200005d8
 8080050:	200005d8 	.word	0x200005d8
 8080054:	20001844 	.word	0x20001844
 8080058:	20001844 	.word	0x20001844

0808005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 808005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 808005e:	f00b ff91 	bl	808bf84 <module_user_init_hook>
 8080062:	4b07      	ldr	r3, [pc, #28]	; (8080080 <module_user_init+0x24>)
 8080064:	4c07      	ldr	r4, [pc, #28]	; (8080084 <module_user_init+0x28>)
 8080066:	461e      	mov	r6, r3
 8080068:	1ae4      	subs	r4, r4, r3
 808006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808006c:	2500      	movs	r5, #0
 808006e:	42a5      	cmp	r5, r4
 8080070:	d004      	beq.n	808007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8080076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080078:	3501      	adds	r5, #1
 808007a:	e7f8      	b.n	808006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 808007c:	bd70      	pop	{r4, r5, r6, pc}
 808007e:	bf00      	nop
 8080080:	08094bec 	.word	0x08094bec
 8080084:	08094c74 	.word	0x08094c74

08080088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080088:	f002 ba90 	b.w	80825ac <setup>

0808008c <module_user_loop>:
}

void module_user_loop() {
 808008c:	b508      	push	{r3, lr}
    loop();
 808008e:	f006 fd33 	bl	8086af8 <loop>
    _post_loop();
}
 8080092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 8080096:	f00b bf37 	b.w	808bf08 <_post_loop>

0808009a <_Znwj>:
 808009a:	f00a bcab 	b.w	808a9f4 <malloc>

0808009e <_ZdlPv>:
 808009e:	f00a bcb1 	b.w	808aa04 <free>

080800a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a2:	7800      	ldrb	r0, [r0, #0]
 80800a4:	fab0 f080 	clz	r0, r0
 80800a8:	0940      	lsrs	r0, r0, #5
 80800aa:	4770      	bx	lr

080800ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800ac:	2301      	movs	r3, #1
 80800ae:	7003      	strb	r3, [r0, #0]
 80800b0:	4770      	bx	lr

080800b2 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80800b2:	b148      	cbz	r0, 80800c8 <null_ptr_check+0x16>
 80800b4:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80800b6:	b13b      	cbz	r3, 80800c8 <null_ptr_check+0x16>
 80800b8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80800ba:	b12b      	cbz	r3, 80800c8 <null_ptr_check+0x16>
 80800bc:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80800be:	fab0 f080 	clz	r0, r0
 80800c2:	0940      	lsrs	r0, r0, #5
 80800c4:	4240      	negs	r0, r0
 80800c6:	4770      	bx	lr
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
 80800c8:	f04f 30ff 	mov.w	r0, #4294967295
		/* Device structure is fine */
		rslt = BME680_OK;
	}

	return rslt;
}
 80800cc:	4770      	bx	lr

080800ce <set_mem_page>:

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
 80800ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80800d0:	4602      	mov	r2, r0
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
 80800d2:	4608      	mov	r0, r1

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
 80800d4:	460c      	mov	r4, r1
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
 80800d6:	f7ff ffec 	bl	80800b2 <null_ptr_check>
	if (rslt == BME680_OK) {
 80800da:	4605      	mov	r5, r0
 80800dc:	bb50      	cbnz	r0, 8080134 <set_mem_page+0x66>
		if (reg_addr > 0x7f)
			mem_page = BME680_MEM_PAGE1;
		else
			mem_page = BME680_MEM_PAGE0;
 80800de:	f012 0f80 	tst.w	r2, #128	; 0x80

		if (mem_page != dev->mem_page) {
 80800e2:	78ca      	ldrb	r2, [r1, #3]
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (reg_addr > 0x7f)
			mem_page = BME680_MEM_PAGE1;
		else
			mem_page = BME680_MEM_PAGE0;
 80800e4:	bf14      	ite	ne
 80800e6:	2300      	movne	r3, #0
 80800e8:	2310      	moveq	r3, #16

		if (mem_page != dev->mem_page) {
 80800ea:	429a      	cmp	r2, r3
 80800ec:	d022      	beq.n	8080134 <set_mem_page+0x66>
			dev->mem_page = mem_page;
 80800ee:	70cb      	strb	r3, [r1, #3]

			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 80800f0:	6c8e      	ldr	r6, [r1, #72]	; 0x48
 80800f2:	2301      	movs	r3, #1
 80800f4:	f10d 0207 	add.w	r2, sp, #7
 80800f8:	21f3      	movs	r1, #243	; 0xf3
 80800fa:	7860      	ldrb	r0, [r4, #1]
 80800fc:	47b0      	blx	r6
 80800fe:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
			if (dev->com_rslt != 0)
 8080102:	b110      	cbz	r0, 808010a <set_mem_page+0x3c>
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
					&reg, 1);
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
 8080104:	f06f 0501 	mvn.w	r5, #1
 8080108:	e014      	b.n	8080134 <set_mem_page+0x66>
			if (dev->com_rslt != 0)
				rslt = BME680_E_COM_FAIL;

			if (rslt == BME680_OK) {
				reg = reg & (~BME680_MEM_PAGE_MSK);
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 808010a:	78e3      	ldrb	r3, [r4, #3]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 808010c:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
			if (dev->com_rslt != 0)
				rslt = BME680_E_COM_FAIL;

			if (rslt == BME680_OK) {
				reg = reg & (~BME680_MEM_PAGE_MSK);
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 808010e:	f003 0210 	and.w	r2, r3, #16
 8080112:	f89d 3007 	ldrb.w	r3, [sp, #7]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 8080116:	2173      	movs	r1, #115	; 0x73
			if (dev->com_rslt != 0)
				rslt = BME680_E_COM_FAIL;

			if (rslt == BME680_OK) {
				reg = reg & (~BME680_MEM_PAGE_MSK);
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 8080118:	f023 0310 	bic.w	r3, r3, #16
 808011c:	4313      	orrs	r3, r2
 808011e:	f88d 3007 	strb.w	r3, [sp, #7]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 8080122:	f10d 0207 	add.w	r2, sp, #7
 8080126:	2301      	movs	r3, #1
 8080128:	7860      	ldrb	r0, [r4, #1]
 808012a:	47b0      	blx	r6
 808012c:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
					&reg, 1);
				if (dev->com_rslt != 0)
 8080130:	2800      	cmp	r0, #0
 8080132:	d1e7      	bne.n	8080104 <set_mem_page+0x36>
			}
		}
	}

	return rslt;
}
 8080134:	4628      	mov	r0, r5
 8080136:	b002      	add	sp, #8
 8080138:	bd70      	pop	{r4, r5, r6, pc}

0808013a <get_mem_page>:

/*!
 * @brief This internal API is used to get the memory page based on register address.
 */
static int8_t get_mem_page(struct bme680_dev *dev)
{
 808013a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 808013c:	4604      	mov	r4, r0
	int8_t rslt;
	uint8_t reg;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 808013e:	f7ff ffb8 	bl	80800b2 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080142:	4605      	mov	r5, r0
 8080144:	b988      	cbnz	r0, 808016a <get_mem_page+0x30>
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 8080146:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8080148:	2301      	movs	r3, #1
 808014a:	f10d 0207 	add.w	r2, sp, #7
 808014e:	21f3      	movs	r1, #243	; 0xf3
 8080150:	7860      	ldrb	r0, [r4, #1]
 8080152:	47b0      	blx	r6
 8080154:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
		if (dev->com_rslt != 0)
 8080158:	b928      	cbnz	r0, 8080166 <get_mem_page+0x2c>
			rslt = BME680_E_COM_FAIL;
		else
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
 808015a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 808015e:	f003 0310 	and.w	r3, r3, #16
 8080162:	70e3      	strb	r3, [r4, #3]
 8080164:	e001      	b.n	808016a <get_mem_page+0x30>
	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
		if (dev->com_rslt != 0)
			rslt = BME680_E_COM_FAIL;
 8080166:	f06f 0501 	mvn.w	r5, #1
		else
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
	}

	return rslt;
}
 808016a:	4628      	mov	r0, r5
 808016c:	b002      	add	sp, #8
 808016e:	bd70      	pop	{r4, r5, r6, pc}

08080170 <boundary_check.isra.1.constprop.2>:
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
	int8_t rslt = BME680_OK;

	if (value != NULL) {
 8080170:	b140      	cbz	r0, 8080184 <boundary_check.isra.1.constprop.2+0x14>
			/* Auto correct the invalid value to minimum value */
			*value = min;
			dev->info_msg |= BME680_I_MIN_CORRECTION;
		}
		/* Check if value is above maximum value */
		if (*value > max) {
 8080172:	7803      	ldrb	r3, [r0, #0]
 8080174:	428b      	cmp	r3, r1
 8080176:	d908      	bls.n	808018a <boundary_check.isra.1.constprop.2+0x1a>
			/* Auto correct the invalid value to maximum value */
			*value = max;
 8080178:	7001      	strb	r1, [r0, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 808017a:	7813      	ldrb	r3, [r2, #0]
 808017c:	f043 0302 	orr.w	r3, r3, #2
 8080180:	7013      	strb	r3, [r2, #0]
 8080182:	e002      	b.n	808018a <boundary_check.isra.1.constprop.2+0x1a>
		}
	} else {
		rslt = BME680_E_NULL_PTR;
 8080184:	f04f 30ff 	mov.w	r0, #4294967295
 8080188:	4770      	bx	lr
 * @brief This internal API is used to validate the boundary
 * conditions.
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
	int8_t rslt = BME680_OK;
 808018a:	2000      	movs	r0, #0
	} else {
		rslt = BME680_E_NULL_PTR;
	}

	return rslt;
}
 808018c:	4770      	bx	lr

0808018e <bme680_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
 808018e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8080192:	4606      	mov	r6, r0
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080194:	4618      	mov	r0, r3

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
 8080196:	4688      	mov	r8, r1
 8080198:	4691      	mov	r9, r2
 808019a:	461d      	mov	r5, r3
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 808019c:	f7ff ff89 	bl	80800b2 <null_ptr_check>
	if (rslt == BME680_OK) {
 80801a0:	4604      	mov	r4, r0
 80801a2:	b9a8      	cbnz	r0, 80801d0 <bme680_get_regs+0x42>
		if (dev->intf == BME680_SPI_INTF) {
 80801a4:	78ab      	ldrb	r3, [r5, #2]
 80801a6:	b93b      	cbnz	r3, 80801b8 <bme680_get_regs+0x2a>
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
 80801a8:	4629      	mov	r1, r5
 80801aa:	4630      	mov	r0, r6
 80801ac:	f7ff ff8f 	bl	80800ce <set_mem_page>
			if (rslt == BME680_OK)
 80801b0:	4604      	mov	r4, r0
 80801b2:	b908      	cbnz	r0, 80801b8 <bme680_get_regs+0x2a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
 80801b4:	f046 0680 	orr.w	r6, r6, #128	; 0x80
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80801b8:	6caf      	ldr	r7, [r5, #72]	; 0x48
 80801ba:	464b      	mov	r3, r9
 80801bc:	4642      	mov	r2, r8
 80801be:	4631      	mov	r1, r6
 80801c0:	7868      	ldrb	r0, [r5, #1]
 80801c2:	47b8      	blx	r7
		if (dev->com_rslt != 0)
 80801c4:	2800      	cmp	r0, #0
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
			if (rslt == BME680_OK)
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80801c6:	f885 0054 	strb.w	r0, [r5, #84]	; 0x54
		if (dev->com_rslt != 0)
			rslt = BME680_E_COM_FAIL;
 80801ca:	bf18      	it	ne
 80801cc:	f06f 0401 	mvnne.w	r4, #1
	}

	return rslt;
}
 80801d0:	4620      	mov	r0, r4
 80801d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080801d6 <bme680_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme680_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme680_dev *dev)
{
 80801d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80801da:	461e      	mov	r6, r3
 80801dc:	b08b      	sub	sp, #44	; 0x2c
 80801de:	4683      	mov	fp, r0
 80801e0:	468a      	mov	sl, r1
 80801e2:	4614      	mov	r4, r2
	int8_t rslt;
	/* Length of the temporary buffer is 2*(length of register)*/
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 80801e4:	2100      	movs	r1, #0
 80801e6:	2228      	movs	r2, #40	; 0x28
 80801e8:	4668      	mov	r0, sp
 80801ea:	f00e fba7 	bl	808e93c <memset>
	uint16_t index;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80801ee:	4630      	mov	r0, r6
 80801f0:	f7ff ff5f 	bl	80800b2 <null_ptr_check>
	if (rslt == BME680_OK) {
 80801f4:	4605      	mov	r5, r0
 80801f6:	bba8      	cbnz	r0, 8080264 <bme680_set_regs+0x8e>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
 80801f8:	1e63      	subs	r3, r4, #1
 80801fa:	2b12      	cmp	r3, #18
 80801fc:	d830      	bhi.n	8080260 <bme680_set_regs+0x8a>
 80801fe:	f10d 0801 	add.w	r8, sp, #1
 8080202:	465f      	mov	r7, fp
 8080204:	46c1      	mov	r9, r8
 8080206:	f10a 3aff 	add.w	sl, sl, #4294967295
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
 808020a:	b2a4      	uxth	r4, r4
 808020c:	ebcb 0307 	rsb	r3, fp, r7
 8080210:	b29b      	uxth	r3, r3
 8080212:	429c      	cmp	r4, r3
 8080214:	d913      	bls.n	808023e <bme680_set_regs+0x68>
				if (dev->intf == BME680_SPI_INTF) {
 8080216:	78b3      	ldrb	r3, [r6, #2]
 8080218:	b943      	cbnz	r3, 808022c <bme680_set_regs+0x56>
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
 808021a:	4631      	mov	r1, r6
 808021c:	7838      	ldrb	r0, [r7, #0]
 808021e:	f7ff ff56 	bl	80800ce <set_mem_page>
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 8080222:	783b      	ldrb	r3, [r7, #0]
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
				if (dev->intf == BME680_SPI_INTF) {
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
 8080224:	4605      	mov	r5, r0
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 8080226:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 808022a:	e000      	b.n	808022e <bme680_set_regs+0x58>
				} else {
					tmp_buff[(2 * index)] = reg_addr[index];
 808022c:	783b      	ldrb	r3, [r7, #0]
 808022e:	f808 3c01 	strb.w	r3, [r8, #-1]
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
 8080232:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8080236:	3701      	adds	r7, #1
 8080238:	f808 3b02 	strb.w	r3, [r8], #2
 808023c:	e7e6      	b.n	808020c <bme680_set_regs+0x36>
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
 808023e:	b98d      	cbnz	r5, 8080264 <bme680_set_regs+0x8e>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 8080240:	0063      	lsls	r3, r4, #1
 8080242:	3b01      	subs	r3, #1
 8080244:	6cf4      	ldr	r4, [r6, #76]	; 0x4c
 8080246:	b29b      	uxth	r3, r3
 8080248:	464a      	mov	r2, r9
 808024a:	f89d 1000 	ldrb.w	r1, [sp]
 808024e:	7870      	ldrb	r0, [r6, #1]
 8080250:	47a0      	blx	r4
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
 8080252:	2800      	cmp	r0, #0
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 8080254:	f886 0054 	strb.w	r0, [r6, #84]	; 0x54
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
 8080258:	bf18      	it	ne
 808025a:	f06f 0501 	mvnne.w	r5, #1
 808025e:	e001      	b.n	8080264 <bme680_set_regs+0x8e>
			}
		} else {
			rslt = BME680_E_INVALID_LENGTH;
 8080260:	f06f 0503 	mvn.w	r5, #3
		}
	}

	return rslt;
}
 8080264:	4628      	mov	r0, r5
 8080266:	b00b      	add	sp, #44	; 0x2c
 8080268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808026c <bme680_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme680_soft_reset(struct bme680_dev *dev)
{
 808026c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int8_t rslt;
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
 808026e:	23e0      	movs	r3, #224	; 0xe0
 8080270:	f88d 3006 	strb.w	r3, [sp, #6]
	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 8080274:	23b6      	movs	r3, #182	; 0xb6

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme680_soft_reset(struct bme680_dev *dev)
{
 8080276:	4605      	mov	r5, r0
	int8_t rslt;
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 8080278:	f88d 3007 	strb.w	r3, [sp, #7]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 808027c:	f7ff ff19 	bl	80800b2 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080280:	4604      	mov	r4, r0
 8080282:	b9d8      	cbnz	r0, 80802bc <bme680_soft_reset+0x50>
		if (dev->intf == BME680_SPI_INTF)
 8080284:	78ab      	ldrb	r3, [r5, #2]
 8080286:	b16b      	cbz	r3, 80802a4 <bme680_soft_reset+0x38>
			rslt = get_mem_page(dev);

		/* Reset the device */
		if (rslt == BME680_OK) {
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8080288:	462b      	mov	r3, r5
 808028a:	2201      	movs	r2, #1
 808028c:	f10d 0107 	add.w	r1, sp, #7
 8080290:	f10d 0006 	add.w	r0, sp, #6
 8080294:	f7ff ff9f 	bl	80801d6 <bme680_set_regs>
 8080298:	4604      	mov	r4, r0
			/* Wait for 5ms */
			dev->delay_ms(BME680_RESET_PERIOD);
 808029a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 808029c:	200a      	movs	r0, #10
 808029e:	4798      	blx	r3

			if (rslt == BME680_OK) {
 80802a0:	b134      	cbz	r4, 80802b0 <bme680_soft_reset+0x44>
 80802a2:	e00b      	b.n	80802bc <bme680_soft_reset+0x50>

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (dev->intf == BME680_SPI_INTF)
			rslt = get_mem_page(dev);
 80802a4:	4628      	mov	r0, r5
 80802a6:	f7ff ff48 	bl	808013a <get_mem_page>

		/* Reset the device */
		if (rslt == BME680_OK) {
 80802aa:	4604      	mov	r4, r0
 80802ac:	b930      	cbnz	r0, 80802bc <bme680_soft_reset+0x50>
 80802ae:	e7eb      	b.n	8080288 <bme680_soft_reset+0x1c>
			/* Wait for 5ms */
			dev->delay_ms(BME680_RESET_PERIOD);

			if (rslt == BME680_OK) {
				/* After reset get the memory page */
				if (dev->intf == BME680_SPI_INTF)
 80802b0:	78ab      	ldrb	r3, [r5, #2]
 80802b2:	b91b      	cbnz	r3, 80802bc <bme680_soft_reset+0x50>
					rslt = get_mem_page(dev);
 80802b4:	4628      	mov	r0, r5
 80802b6:	f7ff ff40 	bl	808013a <get_mem_page>
 80802ba:	4604      	mov	r4, r0
			}
		}
	}

	return rslt;
}
 80802bc:	4620      	mov	r0, r4
 80802be:	b003      	add	sp, #12
 80802c0:	bd30      	pop	{r4, r5, pc}

080802c2 <bme680_init>:
/*!
 *@brief This API is the entry point.
 *It reads the chip-id and calibration data from the sensor.
 */
int8_t bme680_init(struct bme680_dev *dev)
{
 80802c2:	b530      	push	{r4, r5, lr}
 80802c4:	b08d      	sub	sp, #52	; 0x34
 80802c6:	4604      	mov	r4, r0
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80802c8:	f7ff fef3 	bl	80800b2 <null_ptr_check>
	if (rslt == BME680_OK) {
 80802cc:	4605      	mov	r5, r0
 80802ce:	2800      	cmp	r0, #0
 80802d0:	f040 80d5 	bne.w	808047e <bme680_init+0x1bc>
		/* Soft reset to restore it to default values*/
		rslt = bme680_soft_reset(dev);
 80802d4:	4620      	mov	r0, r4
 80802d6:	f7ff ffc9 	bl	808026c <bme680_soft_reset>
		if (rslt == BME680_OK) {
 80802da:	4605      	mov	r5, r0
 80802dc:	2800      	cmp	r0, #0
 80802de:	f040 80ce 	bne.w	808047e <bme680_init+0x1bc>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 80802e2:	4623      	mov	r3, r4
 80802e4:	2201      	movs	r2, #1
 80802e6:	4621      	mov	r1, r4
 80802e8:	20d0      	movs	r0, #208	; 0xd0
 80802ea:	f7ff ff50 	bl	808018e <bme680_get_regs>
			if (rslt == BME680_OK) {
 80802ee:	4605      	mov	r5, r0
 80802f0:	2800      	cmp	r0, #0
 80802f2:	f040 80c4 	bne.w	808047e <bme680_init+0x1bc>
				if (dev->chip_id == BME680_CHIP_ID) {
 80802f6:	7823      	ldrb	r3, [r4, #0]
 80802f8:	2b61      	cmp	r3, #97	; 0x61
 80802fa:	f040 80be 	bne.w	808047a <bme680_init+0x1b8>
 * @brief This internal API is used to read the calibrated data from the sensor.
 */
static int8_t get_calib_data(struct bme680_dev *dev)
{
	int8_t rslt;
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
 80802fe:	4601      	mov	r1, r0
 8080300:	2229      	movs	r2, #41	; 0x29
 8080302:	a801      	add	r0, sp, #4
 8080304:	f00e fb1a 	bl	808e93c <memset>
	uint8_t temp_var = 0; /* Temporary variable */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080308:	4620      	mov	r0, r4
 */
static int8_t get_calib_data(struct bme680_dev *dev)
{
	int8_t rslt;
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
	uint8_t temp_var = 0; /* Temporary variable */
 808030a:	f88d 5003 	strb.w	r5, [sp, #3]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 808030e:	f7ff fed0 	bl	80800b2 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080312:	4605      	mov	r5, r0
 8080314:	2800      	cmp	r0, #0
 8080316:	f040 80b2 	bne.w	808047e <bme680_init+0x1bc>
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
 808031a:	4623      	mov	r3, r4
 808031c:	2219      	movs	r2, #25
 808031e:	a901      	add	r1, sp, #4
 8080320:	2089      	movs	r0, #137	; 0x89
 8080322:	f7ff ff34 	bl	808018e <bme680_get_regs>
		/* Append the second half in the same array */
		if (rslt == BME680_OK)
 8080326:	4605      	mov	r5, r0
 8080328:	b938      	cbnz	r0, 808033a <bme680_init+0x78>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
 808032a:	4623      	mov	r3, r4
 808032c:	2210      	movs	r2, #16
 808032e:	f10d 011d 	add.w	r1, sp, #29
 8080332:	20e1      	movs	r0, #225	; 0xe1
 8080334:	f7ff ff2b 	bl	808018e <bme680_get_regs>
 8080338:	4605      	mov	r5, r0
			, BME680_COEFF_ADDR2_LEN, dev);

		/* Temperature related coefficients */
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
 808033a:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 808033e:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8080342:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8080346:	82e3      	strh	r3, [r4, #22]
			coeff_array[BME680_T1_LSB_REG]));
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
 8080348:	f89d 2006 	ldrb.w	r2, [sp, #6]
 808034c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8080350:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8080354:	8323      	strh	r3, [r4, #24]
			coeff_array[BME680_T2_LSB_REG]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 8080356:	f89d 3007 	ldrb.w	r3, [sp, #7]

		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 808035a:	f89d 200a 	ldrb.w	r2, [sp, #10]
		/* Temperature related coefficients */
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
			coeff_array[BME680_T1_LSB_REG]));
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
			coeff_array[BME680_T2_LSB_REG]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 808035e:	76a3      	strb	r3, [r4, #26]

		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 8080360:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8080364:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8080368:	83a3      	strh	r3, [r4, #28]
			coeff_array[BME680_P1_LSB_REG]));
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
 808036a:	f89d 200c 	ldrb.w	r2, [sp, #12]
 808036e:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8080372:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8080376:	83e3      	strh	r3, [r4, #30]
			coeff_array[BME680_P2_LSB_REG]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 8080378:	f89d 300d 	ldrb.w	r3, [sp, #13]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 808037c:	f89d 2010 	ldrb.w	r2, [sp, #16]
		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
			coeff_array[BME680_P1_LSB_REG]));
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
			coeff_array[BME680_P2_LSB_REG]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 8080380:	f884 3020 	strb.w	r3, [r4, #32]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 8080384:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8080388:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 808038c:	8463      	strh	r3, [r4, #34]	; 0x22
			coeff_array[BME680_P4_LSB_REG]));
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
 808038e:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8080392:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8080396:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 808039a:	84a3      	strh	r3, [r4, #36]	; 0x24
			coeff_array[BME680_P5_LSB_REG]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 808039c:	f89d 3014 	ldrb.w	r3, [sp, #20]
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 80803a0:	f89d 2018 	ldrb.w	r2, [sp, #24]
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
			coeff_array[BME680_P4_LSB_REG]));
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
			coeff_array[BME680_P5_LSB_REG]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 80803a4:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
 80803a8:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80803ac:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 80803b0:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80803b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80803b8:	8523      	strh	r3, [r4, #40]	; 0x28
			coeff_array[BME680_P8_LSB_REG]));
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
 80803ba:	f89d 201a 	ldrb.w	r2, [sp, #26]
 80803be:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80803c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80803c6:	8563      	strh	r3, [r4, #42]	; 0x2a
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 80803c8:	f89d 301b 	ldrb.w	r3, [sp, #27]

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80803cc:	f89d 101f 	ldrb.w	r1, [sp, #31]
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
			coeff_array[BME680_P8_LSB_REG]));
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 80803d0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
 80803d4:	f89d 301e 	ldrb.w	r3, [sp, #30]
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80803d8:	f003 020f 	and.w	r2, r3, #15
 80803dc:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 80803e0:	8122      	strh	r2, [r4, #8]
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80803e2:	f89d 201d 	ldrb.w	r2, [sp, #29]
 80803e6:	091b      	lsrs	r3, r3, #4
 80803e8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80803ec:	8163      	strh	r3, [r4, #10]
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 80803ee:	f89d 3020 	ldrb.w	r3, [sp, #32]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];

		/* Gas heater related coefficients */
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 80803f2:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 80803f6:	7323      	strb	r3, [r4, #12]
		dev->calib.par_h4 = (int8_t) coeff_array[BME680_H4_REG];
 80803f8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80803fc:	7363      	strb	r3, [r4, #13]
		dev->calib.par_h5 = (int8_t) coeff_array[BME680_H5_REG];
 80803fe:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 8080402:	73a3      	strb	r3, [r4, #14]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
 8080404:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8080408:	73e3      	strb	r3, [r4, #15]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
 808040a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 808040e:	7423      	strb	r3, [r4, #16]

		/* Gas heater related coefficients */
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
 8080410:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 8080414:	7463      	strb	r3, [r4, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 8080416:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 808041a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 808041e:	8263      	strh	r3, [r4, #18]
			coeff_array[BME680_GH2_LSB_REG]));
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
 8080420:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 8080424:	7523      	strb	r3, [r4, #20]

		/* Other coefficients */
		if (rslt == BME680_OK) {
 8080426:	bb15      	cbnz	r5, 808046e <bme680_init+0x1ac>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
 8080428:	4623      	mov	r3, r4
 808042a:	2201      	movs	r2, #1
 808042c:	f10d 0103 	add.w	r1, sp, #3
 8080430:	2002      	movs	r0, #2
 8080432:	f7ff feac 	bl	808018e <bme680_get_regs>

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 8080436:	f89d 3003 	ldrb.w	r3, [sp, #3]
			if (rslt == BME680_OK) {
 808043a:	4605      	mov	r5, r0

		/* Other coefficients */
		if (rslt == BME680_OK) {
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 808043c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8080440:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if (rslt == BME680_OK) {
 8080444:	b998      	cbnz	r0, 808046e <bme680_init+0x1ac>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
 8080446:	4623      	mov	r3, r4
 8080448:	2201      	movs	r2, #1
 808044a:	f10d 0103 	add.w	r1, sp, #3
 808044e:	f7ff fe9e 	bl	808018e <bme680_get_regs>

				dev->calib.res_heat_val = (int8_t) temp_var;
 8080452:	f89d 3003 	ldrb.w	r3, [sp, #3]
				if (rslt == BME680_OK)
 8080456:	4605      	mov	r5, r0

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
			if (rslt == BME680_OK) {
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);

				dev->calib.res_heat_val = (int8_t) temp_var;
 8080458:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
				if (rslt == BME680_OK)
 808045c:	b938      	cbnz	r0, 808046e <bme680_init+0x1ac>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
 808045e:	4623      	mov	r3, r4
 8080460:	2201      	movs	r2, #1
 8080462:	f10d 0103 	add.w	r1, sp, #3
 8080466:	2004      	movs	r0, #4
 8080468:	f7ff fe91 	bl	808018e <bme680_get_regs>
 808046c:	4605      	mov	r5, r0
			}
		}
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
 808046e:	f99d 3003 	ldrsb.w	r3, [sp, #3]
 8080472:	111b      	asrs	r3, r3, #4
 8080474:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
 8080478:	e001      	b.n	808047e <bme680_init+0x1bc>
			if (rslt == BME680_OK) {
				if (dev->chip_id == BME680_CHIP_ID) {
					/* Get the Calibration data */
					rslt = get_calib_data(dev);
				} else {
					rslt = BME680_E_DEV_NOT_FOUND;
 808047a:	f06f 0502 	mvn.w	r5, #2
			}
		}
	}

	return rslt;
}
 808047e:	4628      	mov	r0, r5
 8080480:	b00d      	add	sp, #52	; 0x34
 8080482:	bd30      	pop	{r4, r5, pc}

08080484 <bme680_set_sensor_mode>:

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
 8080484:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 8080486:	2374      	movs	r3, #116	; 0x74

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
 8080488:	4604      	mov	r4, r0
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 808048a:	f88d 3007 	strb.w	r3, [sp, #7]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 808048e:	f7ff fe10 	bl	80800b2 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080492:	bba0      	cbnz	r0, 80804fe <bme680_set_sensor_mode+0x7a>
 8080494:	4605      	mov	r5, r0
		/* Call recursively until in sleep */
		do {
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
 8080496:	4623      	mov	r3, r4
 8080498:	2201      	movs	r2, #1
 808049a:	f10d 0106 	add.w	r1, sp, #6
 808049e:	2074      	movs	r0, #116	; 0x74
 80804a0:	f7ff fe75 	bl	808018e <bme680_get_regs>
			if (rslt == BME680_OK) {
 80804a4:	b9a0      	cbnz	r0, 80804d0 <bme680_set_sensor_mode+0x4c>
				/* Put to sleep before changing mode */
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
 80804a6:	f89d 3006 	ldrb.w	r3, [sp, #6]

				if (pow_mode != BME680_SLEEP_MODE) {
 80804aa:	f013 0503 	ands.w	r5, r3, #3
 80804ae:	d011      	beq.n	80804d4 <bme680_set_sensor_mode+0x50>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 80804b0:	f023 0303 	bic.w	r3, r3, #3
 80804b4:	f88d 3006 	strb.w	r3, [sp, #6]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80804b8:	2201      	movs	r2, #1
 80804ba:	4623      	mov	r3, r4
 80804bc:	f10d 0106 	add.w	r1, sp, #6
 80804c0:	f10d 0007 	add.w	r0, sp, #7
 80804c4:	f7ff fe87 	bl	80801d6 <bme680_set_regs>
					dev->delay_ms(BME680_POLL_PERIOD_MS);
 80804c8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80804ca:	200a      	movs	r0, #10
 80804cc:	4798      	blx	r3
 80804ce:	e7e2      	b.n	8080496 <bme680_set_sensor_mode+0x12>
				}
			}
		} while (pow_mode != BME680_SLEEP_MODE);
 80804d0:	2d00      	cmp	r5, #0
 80804d2:	d1e0      	bne.n	8080496 <bme680_set_sensor_mode+0x12>

		/* Already in sleep */
		if (dev->power_mode != BME680_SLEEP_MODE) {
 80804d4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80804d8:	b18b      	cbz	r3, 80804fe <bme680_set_sensor_mode+0x7a>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
 80804da:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80804de:	f003 0303 	and.w	r3, r3, #3
 80804e2:	f022 0203 	bic.w	r2, r2, #3
 80804e6:	4313      	orrs	r3, r2
 80804e8:	f88d 3006 	strb.w	r3, [sp, #6]
			if (rslt == BME680_OK)
 80804ec:	b938      	cbnz	r0, 80804fe <bme680_set_sensor_mode+0x7a>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80804ee:	4623      	mov	r3, r4
 80804f0:	2201      	movs	r2, #1
 80804f2:	f10d 0106 	add.w	r1, sp, #6
 80804f6:	f10d 0007 	add.w	r0, sp, #7
 80804fa:	f7ff fe6c 	bl	80801d6 <bme680_set_regs>
		}
	}

	return rslt;
}
 80804fe:	b003      	add	sp, #12
 8080500:	bd30      	pop	{r4, r5, pc}

08080502 <bme680_set_sensor_settings>:
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 8080502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
 8080506:	2300      	movs	r3, #0
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 8080508:	b088      	sub	sp, #32
 808050a:	4606      	mov	r6, r0
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 808050c:	4608      	mov	r0, r1
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 808050e:	460c      	mov	r4, r1
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
 8080510:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t count = 0;
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 8080514:	9304      	str	r3, [sp, #16]
 8080516:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 808051a:	9306      	str	r3, [sp, #24]
 808051c:	f8ad 301c 	strh.w	r3, [sp, #28]
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080520:	f7ff fdc7 	bl	80800b2 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080524:	2800      	cmp	r0, #0
 8080526:	f040 8164 	bne.w	80807f2 <bme680_set_sensor_settings+0x2f0>
		if (desired_settings & BME680_GAS_MEAS_SEL)
 808052a:	0732      	lsls	r2, r6, #28
	uint8_t reg_addr;
	uint8_t data = 0;
	uint8_t count = 0;
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
 808052c:	f891 7044 	ldrb.w	r7, [r1, #68]	; 0x44

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (desired_settings & BME680_GAS_MEAS_SEL)
 8080530:	d56a      	bpl.n	8080608 <bme680_set_sensor_settings+0x106>
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
 8080532:	2f01      	cmp	r7, #1

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
 8080534:	f8ad 0008 	strh.w	r0, [sp, #8]
		uint8_t reg_data[2] = {0};
 8080538:	f8ad 000c 	strh.w	r0, [sp, #12]

		if (dev->power_mode == BME680_FORCED_MODE) {
 808053c:	d163      	bne.n	8080606 <bme680_set_sensor_settings+0x104>
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 808053e:	235a      	movs	r3, #90	; 0x5a
 8080540:	f88d 3008 	strb.w	r3, [sp, #8]
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
 8080544:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
	int32_t var3;
	int32_t var4;
	int32_t var5;
	int32_t heatr_res_x100;

	if (temp < 200) /* Cap temperature */
 8080548:	2bc7      	cmp	r3, #199	; 0xc7
 808054a:	d905      	bls.n	8080558 <bme680_set_sensor_settings+0x56>
 808054c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8080550:	bf28      	it	cs
 8080552:	f44f 73c8 	movcs.w	r3, #400	; 0x190
 8080556:	e000      	b.n	808055a <bme680_set_sensor_settings+0x58>
		temp = 200;
 8080558:	23c8      	movs	r3, #200	; 0xc8
		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
 808055a:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 808055e:	2114      	movs	r1, #20
 8080560:	f502 3216 	add.w	r2, r2, #153600	; 0x25800
 8080564:	f202 1299 	addw	r2, r2, #409	; 0x199
 8080568:	4353      	muls	r3, r2
 808056a:	fb93 f3f1 	sdiv	r3, r3, r1
 808056e:	210a      	movs	r1, #10
 8080570:	f503 1348 	add.w	r3, r3, #3276800	; 0x320000
 8080574:	fb93 f3f1 	sdiv	r3, r3, r1
 8080578:	f994 2011 	ldrsb.w	r2, [r4, #17]
 808057c:	f994 0014 	ldrsb.w	r0, [r4, #20]
 8080580:	f502 7244 	add.w	r2, r2, #784	; 0x310
 8080584:	435a      	muls	r2, r3
 8080586:	f994 3004 	ldrsb.w	r3, [r4, #4]
 808058a:	4358      	muls	r0, r3
 808058c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080590:	fb90 f3f3 	sdiv	r3, r0, r3
 8080594:	021b      	lsls	r3, r3, #8
 8080596:	eb03 0162 	add.w	r1, r3, r2, asr #1
 808059a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 808059e:	3304      	adds	r3, #4
 80805a0:	fb91 f2f3 	sdiv	r2, r1, r3
 80805a4:	f994 1035 	ldrsb.w	r1, [r4, #53]	; 0x35
 80805a8:	2383      	movs	r3, #131	; 0x83
 80805aa:	434b      	muls	r3, r1
 80805ac:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80805b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80805b4:	2222      	movs	r2, #34	; 0x22
 80805b6:	3bfa      	subs	r3, #250	; 0xfa
 80805b8:	4353      	muls	r3, r2
 80805ba:	2264      	movs	r2, #100	; 0x64
 80805bc:	3332      	adds	r3, #50	; 0x32
 80805be:	fb93 f3f2 	sdiv	r3, r3, r2
 80805c2:	f88d 300c 	strb.w	r3, [sp, #12]
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 80805c6:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
 80805ca:	f88d 2009 	strb.w	r2, [sp, #9]
static uint8_t calc_heater_dur(uint16_t dur)
{
	uint8_t factor = 0;
	uint8_t durval;

	if (dur >= 0xfc0) {
 80805ce:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
 80805d2:	d20b      	bcs.n	80805ec <bme680_set_sensor_settings+0xea>
 80805d4:	2200      	movs	r2, #0
		durval = 0xff; /* Max duration*/
	} else {
		while (dur > 0x3F) {
 80805d6:	2b3f      	cmp	r3, #63	; 0x3f
 80805d8:	b2d1      	uxtb	r1, r2
 80805da:	f102 0201 	add.w	r2, r2, #1
 80805de:	d901      	bls.n	80805e4 <bme680_set_sensor_settings+0xe2>
			dur = dur / 4;
 80805e0:	089b      	lsrs	r3, r3, #2
 80805e2:	e7f8      	b.n	80805d6 <bme680_set_sensor_settings+0xd4>
			factor += 1;
		}
		durval = (uint8_t) (dur + (factor * 64));
 80805e4:	eb03 1381 	add.w	r3, r3, r1, lsl #6
 80805e8:	b2db      	uxtb	r3, r3
 80805ea:	e000      	b.n	80805ee <bme680_set_sensor_settings+0xec>
{
	uint8_t factor = 0;
	uint8_t durval;

	if (dur >= 0xfc0) {
		durval = 0xff; /* Max duration*/
 80805ec:	23ff      	movs	r3, #255	; 0xff

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 80805ee:	f88d 300d 	strb.w	r3, [sp, #13]
			dev->gas_sett.nb_conv = 0;
 80805f2:	2300      	movs	r3, #0
 80805f4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		} else {
			rslt = BME680_W_DEFINE_PWR_MODE;
		}
		if (rslt == BME680_OK)
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 80805f8:	2202      	movs	r2, #2
 80805fa:	4623      	mov	r3, r4
 80805fc:	a903      	add	r1, sp, #12
 80805fe:	a802      	add	r0, sp, #8
 8080600:	f7ff fde9 	bl	80801d6 <bme680_set_regs>
 8080604:	e000      	b.n	8080608 <bme680_set_sensor_settings+0x106>
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
 8080606:	2001      	movs	r0, #1
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (desired_settings & BME680_GAS_MEAS_SEL)
			rslt = set_gas_config(dev);

		dev->power_mode = BME680_SLEEP_MODE;
 8080608:	2300      	movs	r3, #0
 808060a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		if (rslt == BME680_OK)
 808060e:	b910      	cbnz	r0, 8080616 <bme680_set_sensor_settings+0x114>
			rslt = bme680_set_sensor_mode(dev);
 8080610:	4620      	mov	r0, r4
 8080612:	f7ff ff37 	bl	8080484 <bme680_set_sensor_mode>

		/* Selecting the filter */
		if (desired_settings & BME680_FILTER_SEL) {
 8080616:	f006 0510 	and.w	r5, r6, #16
 808061a:	b2ad      	uxth	r5, r5
 808061c:	b305      	cbz	r5, 8080660 <bme680_set_sensor_settings+0x15e>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
 808061e:	f104 0246 	add.w	r2, r4, #70	; 0x46
 8080622:	2107      	movs	r1, #7
 8080624:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 8080628:	f7ff fda2 	bl	8080170 <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_ODR_FILT_ADDR;

			if (rslt == BME680_OK)
 808062c:	b930      	cbnz	r0, 808063c <bme680_set_sensor_settings+0x13a>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 808062e:	4623      	mov	r3, r4
 8080630:	2201      	movs	r2, #1
 8080632:	f10d 0107 	add.w	r1, sp, #7
 8080636:	2075      	movs	r0, #117	; 0x75
 8080638:	f7ff fda9 	bl	808018e <bme680_get_regs>

			if (desired_settings & BME680_FILTER_SEL)
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 808063c:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b

			reg_array[count] = reg_addr; /* Append configuration */
			data_array[count] = data;
			count++;
 8080640:	2501      	movs	r5, #1

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);

			if (desired_settings & BME680_FILTER_SEL)
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 8080642:	009b      	lsls	r3, r3, #2
 8080644:	f003 021c 	and.w	r2, r3, #28
 8080648:	f89d 3007 	ldrb.w	r3, [sp, #7]
 808064c:	f023 031c 	bic.w	r3, r3, #28
 8080650:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
 8080652:	2275      	movs	r2, #117	; 0x75

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);

			if (desired_settings & BME680_FILTER_SEL)
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 8080654:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 8080658:	f88d 2010 	strb.w	r2, [sp, #16]
			data_array[count] = data;
 808065c:	f88d 3018 	strb.w	r3, [sp, #24]
			count++;
		}

		/* Selecting heater control for the sensor */
		if (desired_settings & BME680_HCNTRL_SEL) {
 8080660:	06b3      	lsls	r3, r6, #26
 8080662:	d522      	bpl.n	80806aa <bme680_set_sensor_settings+0x1a8>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
 8080664:	f104 0246 	add.w	r2, r4, #70	; 0x46
 8080668:	2108      	movs	r1, #8
 808066a:	f104 003d 	add.w	r0, r4, #61	; 0x3d
 808066e:	f7ff fd7f 	bl	8080170 <boundary_check.isra.1.constprop.2>
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;

			if (rslt == BME680_OK)
 8080672:	b930      	cbnz	r0, 8080682 <bme680_set_sensor_settings+0x180>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8080674:	4623      	mov	r3, r4
 8080676:	2201      	movs	r2, #1
 8080678:	f10d 0107 	add.w	r1, sp, #7
 808067c:	2070      	movs	r0, #112	; 0x70
 808067e:	f7ff fd86 	bl	808018e <bme680_get_regs>
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 8080682:	f89d 3007 	ldrb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 8080686:	2170      	movs	r1, #112	; 0x70
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 8080688:	f023 0208 	bic.w	r2, r3, #8
 808068c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8080690:	f003 0308 	and.w	r3, r3, #8
 8080694:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
 8080696:	aa08      	add	r2, sp, #32
 8080698:	442a      	add	r2, r5
			data_array[count] = data;
			count++;
 808069a:	3501      	adds	r5, #1
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 808069c:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 80806a0:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 80806a4:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
 80806a8:	b2ed      	uxtb	r5, r5
		}

		/* Selecting heater T,P oversampling for the sensor */
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
 80806aa:	07b1      	lsls	r1, r6, #30
 80806ac:	d033      	beq.n	8080716 <bme680_set_sensor_settings+0x214>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
 80806ae:	f104 0246 	add.w	r2, r4, #70	; 0x46
 80806b2:	2105      	movs	r1, #5
 80806b4:	f104 0039 	add.w	r0, r4, #57	; 0x39
 80806b8:	f7ff fd5a 	bl	8080170 <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_T_P_MODE_ADDR;

			if (rslt == BME680_OK)
 80806bc:	b930      	cbnz	r0, 80806cc <bme680_set_sensor_settings+0x1ca>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80806be:	4623      	mov	r3, r4
 80806c0:	2201      	movs	r2, #1
 80806c2:	f10d 0107 	add.w	r1, sp, #7
 80806c6:	2074      	movs	r0, #116	; 0x74
 80806c8:	f7ff fd61 	bl	808018e <bme680_get_regs>

			if (desired_settings & BME680_OST_SEL)
 80806cc:	07f2      	lsls	r2, r6, #31
 80806ce:	d509      	bpl.n	80806e4 <bme680_set_sensor_settings+0x1e2>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
 80806d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80806d4:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80806d8:	f003 031f 	and.w	r3, r3, #31
 80806dc:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80806e0:	f88d 3007 	strb.w	r3, [sp, #7]

			if (desired_settings & BME680_OSP_SEL)
 80806e4:	07b3      	lsls	r3, r6, #30
 80806e6:	d50b      	bpl.n	8080700 <bme680_set_sensor_settings+0x1fe>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
 80806e8:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 80806ec:	009b      	lsls	r3, r3, #2
 80806ee:	f003 021c 	and.w	r2, r3, #28
 80806f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80806f6:	f023 031c 	bic.w	r3, r3, #28
 80806fa:	4313      	orrs	r3, r2
 80806fc:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr;
 8080700:	ab08      	add	r3, sp, #32
 8080702:	442b      	add	r3, r5
 8080704:	2274      	movs	r2, #116	; 0x74
 8080706:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 808070a:	f89d 2007 	ldrb.w	r2, [sp, #7]
			count++;
 808070e:	3501      	adds	r5, #1

			if (desired_settings & BME680_OSP_SEL)
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);

			reg_array[count] = reg_addr;
			data_array[count] = data;
 8080710:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
 8080714:	b2ed      	uxtb	r5, r5
		}

		/* Selecting humidity oversampling for the sensor */
		if (desired_settings & BME680_OSH_SEL) {
 8080716:	0771      	lsls	r1, r6, #29
 8080718:	d522      	bpl.n	8080760 <bme680_set_sensor_settings+0x25e>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
 808071a:	f104 0246 	add.w	r2, r4, #70	; 0x46
 808071e:	2105      	movs	r1, #5
 8080720:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8080724:	f7ff fd24 	bl	8080170 <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_OS_H_ADDR;

			if (rslt == BME680_OK)
 8080728:	b930      	cbnz	r0, 8080738 <bme680_set_sensor_settings+0x236>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 808072a:	4623      	mov	r3, r4
 808072c:	2201      	movs	r2, #1
 808072e:	f10d 0107 	add.w	r1, sp, #7
 8080732:	2072      	movs	r0, #114	; 0x72
 8080734:	f7ff fd2b 	bl	808018e <bme680_get_regs>
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8080738:	f89d 3007 	ldrb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 808073c:	2172      	movs	r1, #114	; 0x72
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
			reg_addr = BME680_CONF_OS_H_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 808073e:	f023 0207 	bic.w	r2, r3, #7
 8080742:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8080746:	f003 0307 	and.w	r3, r3, #7
 808074a:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
 808074c:	aa08      	add	r2, sp, #32
 808074e:	442a      	add	r2, r5
			data_array[count] = data;
			count++;
 8080750:	3501      	adds	r5, #1
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
			reg_addr = BME680_CONF_OS_H_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8080752:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 8080756:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 808075a:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
 808075e:	b2ed      	uxtb	r5, r5
		}

		/* Selecting the runGas and NB conversion settings for the sensor */
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
 8080760:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8080764:	d03c      	beq.n	80807e0 <bme680_set_sensor_settings+0x2de>
 8080766:	f104 0846 	add.w	r8, r4, #70	; 0x46
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
 808076a:	4642      	mov	r2, r8
 808076c:	2101      	movs	r1, #1
 808076e:	f104 003e 	add.w	r0, r4, #62	; 0x3e
 8080772:	f7ff fcfd 	bl	8080170 <boundary_check.isra.1.constprop.2>
				BME680_RUN_GAS_ENABLE, dev);
			if (rslt == BME680_OK) {
 8080776:	b968      	cbnz	r0, 8080794 <bme680_set_sensor_settings+0x292>
				/* Validate boundary conditions */
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
 8080778:	4642      	mov	r2, r8
 808077a:	210a      	movs	r1, #10
 808077c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8080780:	f7ff fcf6 	bl	8080170 <boundary_check.isra.1.constprop.2>
					BME680_NBCONV_MAX, dev);
			}

			reg_addr = BME680_CONF_ODR_RUN_GAS_NBC_ADDR;

			if (rslt == BME680_OK)
 8080784:	b930      	cbnz	r0, 8080794 <bme680_set_sensor_settings+0x292>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8080786:	4623      	mov	r3, r4
 8080788:	2201      	movs	r2, #1
 808078a:	f10d 0107 	add.w	r1, sp, #7
 808078e:	2071      	movs	r0, #113	; 0x71
 8080790:	f7ff fcfd 	bl	808018e <bme680_get_regs>

			if (desired_settings & BME680_RUN_GAS_SEL)
 8080794:	0672      	lsls	r2, r6, #25
 8080796:	d50b      	bpl.n	80807b0 <bme680_set_sensor_settings+0x2ae>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
 8080798:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 808079c:	011b      	lsls	r3, r3, #4
 808079e:	f003 0210 	and.w	r2, r3, #16
 80807a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80807a6:	f023 0310 	bic.w	r3, r3, #16
 80807aa:	4313      	orrs	r3, r2
 80807ac:	f88d 3007 	strb.w	r3, [sp, #7]

			if (desired_settings & BME680_NBCONV_SEL)
 80807b0:	0633      	lsls	r3, r6, #24
 80807b2:	d50a      	bpl.n	80807ca <bme680_set_sensor_settings+0x2c8>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
 80807b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80807b8:	f023 020f 	bic.w	r2, r3, #15
 80807bc:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80807c0:	f003 030f 	and.w	r3, r3, #15
 80807c4:	4313      	orrs	r3, r2
 80807c6:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 80807ca:	ab08      	add	r3, sp, #32
 80807cc:	442b      	add	r3, r5
 80807ce:	2271      	movs	r2, #113	; 0x71
 80807d0:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 80807d4:	f89d 2007 	ldrb.w	r2, [sp, #7]
			count++;
 80807d8:	3501      	adds	r5, #1

			if (desired_settings & BME680_NBCONV_SEL)
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);

			reg_array[count] = reg_addr; /* Append configuration */
			data_array[count] = data;
 80807da:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
 80807de:	b2ed      	uxtb	r5, r5
		}

		if (rslt == BME680_OK)
 80807e0:	b928      	cbnz	r0, 80807ee <bme680_set_sensor_settings+0x2ec>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
 80807e2:	4623      	mov	r3, r4
 80807e4:	462a      	mov	r2, r5
 80807e6:	a906      	add	r1, sp, #24
 80807e8:	a804      	add	r0, sp, #16
 80807ea:	f7ff fcf4 	bl	80801d6 <bme680_set_regs>

		/* Restore previous intended power mode */
		dev->power_mode = intended_power_mode;
 80807ee:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
	}

	return rslt;
}
 80807f2:	b008      	add	sp, #32
 80807f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080807f8 <bme680_get_profile_dur>:

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
 80807f8:	b513      	push	{r0, r1, r4, lr}
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80807fa:	4b18      	ldr	r3, [pc, #96]	; (808085c <bme680_get_profile_dur+0x64>)

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
 80807fc:	4604      	mov	r4, r0
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80807fe:	6818      	ldr	r0, [r3, #0]
 8080800:	889b      	ldrh	r3, [r3, #4]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 8080802:	aa02      	add	r2, sp, #8
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 8080804:	f8ad 3004 	strh.w	r3, [sp, #4]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 8080808:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 808080c:	9000      	str	r0, [sp, #0]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 808080e:	4413      	add	r3, r2
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 8080810:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8080814:	a802      	add	r0, sp, #8
 8080816:	4402      	add	r2, r0
 8080818:	f812 2c08 	ldrb.w	r2, [r2, #-8]
{
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 808081c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 8080820:	4413      	add	r3, r2
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 8080822:	f891 2038 	ldrb.w	r2, [r1, #56]	; 0x38
 8080826:	4402      	add	r2, r0

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
 8080828:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 808082c:	4413      	add	r3, r2
 808082e:	f240 72ab 	movw	r2, #1963	; 0x7ab
 8080832:	4353      	muls	r3, r2
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 8080834:	f503 5395 	add.w	r3, r3, #4768	; 0x12a0
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 8080838:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 808083c:	3319      	adds	r3, #25
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 808083e:	fbb3 f3f2 	udiv	r3, r3, r2

	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */

	*duration = (uint16_t) tph_dur;
 8080842:	3301      	adds	r3, #1
 8080844:	b29b      	uxth	r3, r3
 8080846:	8023      	strh	r3, [r4, #0]

	/* Get the gas duration only when the run gas is enabled */
	if (dev->gas_sett.run_gas) {
 8080848:	f891 203e 	ldrb.w	r2, [r1, #62]	; 0x3e
 808084c:	b11a      	cbz	r2, 8080856 <bme680_get_profile_dur+0x5e>
		/* The remaining time should be used for heating */
		*duration += dev->gas_sett.heatr_dur;
 808084e:	f8b1 2042 	ldrh.w	r2, [r1, #66]	; 0x42
 8080852:	4413      	add	r3, r2
 8080854:	8023      	strh	r3, [r4, #0]
	}
}
 8080856:	b002      	add	sp, #8
 8080858:	bd10      	pop	{r4, pc}
 808085a:	bf00      	nop
 808085c:	0809185c 	.word	0x0809185c

08080860 <bme680_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 8080860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080864:	4680      	mov	r8, r0
 8080866:	b089      	sub	sp, #36	; 0x24
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080868:	4608      	mov	r0, r1
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 808086a:	460c      	mov	r4, r1
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 808086c:	f7ff fc21 	bl	80800b2 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080870:	4605      	mov	r5, r0
 8080872:	2800      	cmp	r0, #0
 8080874:	f040 8167 	bne.w	8080b46 <bme680_get_sensor_data+0x2e6>
 * @brief This internal API is used to calculate the field data of sensor.
 */
static int8_t read_field_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
	int8_t rslt;
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 8080878:	af04      	add	r7, sp, #16
 808087a:	4601      	mov	r1, r0
 808087c:	220f      	movs	r2, #15
 808087e:	4638      	mov	r0, r7
 8080880:	f00e f85c 	bl	808e93c <memset>
	uint16_t adc_hum;
	uint16_t adc_gas_res;
	uint8_t tries = 10;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080884:	4620      	mov	r0, r4
 8080886:	f7ff fc14 	bl	80800b2 <null_ptr_check>
 808088a:	4605      	mov	r5, r0
 808088c:	260a      	movs	r6, #10
	do {
		if (rslt == BME680_OK) {
 808088e:	2d00      	cmp	r5, #0
 8080890:	f040 8153 	bne.w	8080b3a <bme680_get_sensor_data+0x2da>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 8080894:	4623      	mov	r3, r4
 8080896:	220f      	movs	r2, #15
 8080898:	4639      	mov	r1, r7
 808089a:	201d      	movs	r0, #29
 808089c:	f7ff fc77 	bl	808018e <bme680_get_regs>
 80808a0:	4605      	mov	r5, r0
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
 80808a2:	f89d 0010 	ldrb.w	r0, [sp, #16]
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80808a6:	f89d e01e 	ldrb.w	lr, [sp, #30]
		if (rslt == BME680_OK) {
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 80808aa:	f000 030f 	and.w	r3, r0, #15
 80808ae:	f888 3001 	strb.w	r3, [r8, #1]
			data->meas_index = buff[1];
 80808b2:	f89d 3011 	ldrb.w	r3, [sp, #17]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80808b6:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
			data->meas_index = buff[1];
 80808ba:	f888 3002 	strb.w	r3, [r8, #2]

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 80808be:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80808c2:	f89d 9013 	ldrb.w	r9, [sp, #19]
 80808c6:	9300      	str	r3, [sp, #0]
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 80808c8:	f89d 3018 	ldrb.w	r3, [sp, #24]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
			data->meas_index = buff[1];

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
 80808cc:	f89d c014 	ldrb.w	ip, [sp, #20]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 80808d0:	9301      	str	r3, [sp, #4]
 80808d2:	f89d 3019 	ldrb.w	r3, [sp, #25]
			data->meas_index = buff[1];

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80808d6:	f89d b015 	ldrb.w	fp, [sp, #21]
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 80808da:	9302      	str	r3, [sp, #8]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80808dc:	f89d 301d 	ldrb.w	r3, [sp, #29]
			data->meas_index = buff[1];

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80808e0:	f89d 1016 	ldrb.w	r1, [sp, #22]
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80808e4:	9303      	str	r3, [sp, #12]
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 80808e6:	fa4f f38e 	sxtb.w	r3, lr
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80808ea:	f003 0a20 	and.w	sl, r3, #32
 80808ee:	ea40 000a 	orr.w	r0, r0, sl
 80808f2:	f003 0310 	and.w	r3, r3, #16
 80808f6:	4318      	orrs	r0, r3
 80808f8:	b240      	sxtb	r0, r0

			if (data->status & BME680_NEW_DATA_MSK) {
 80808fa:	2800      	cmp	r0, #0

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
 80808fc:	f89d 2017 	ldrb.w	r2, [sp, #23]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 8080900:	f888 0000 	strb.w	r0, [r8]

			if (data->status & BME680_NEW_DATA_MSK) {
 8080904:	f280 8116 	bge.w	8080b34 <bme680_get_sensor_data+0x2d4>
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 8080908:	0912      	lsrs	r2, r2, #4
 808090a:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
 808090e:	ea41 3b0b 	orr.w	fp, r1, fp, lsl #12
 8080912:	8ae1      	ldrh	r1, [r4, #22]
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 8080914:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 8080918:	0049      	lsls	r1, r1, #1
 808091a:	ebc1 01db 	rsb	r1, r1, fp, lsr #3
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 808091e:	460a      	mov	r2, r1
 8080920:	17cb      	asrs	r3, r1, #31
 8080922:	105b      	asrs	r3, r3, #1
 8080924:	ea4f 0232 	mov.w	r2, r2, rrx
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080928:	fb02 f603 	mul.w	r6, r2, r3
 808092c:	fba2 2302 	umull	r2, r3, r2, r2
 8080930:	ea4f 3a12 	mov.w	sl, r2, lsr #12
 8080934:	f994 201a 	ldrsb.w	r2, [r4, #26]
 8080938:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 808093c:	ea4a 5a03 	orr.w	sl, sl, r3, lsl #20
 8080940:	ea4f 3b23 	mov.w	fp, r3, asr #12
 8080944:	0113      	lsls	r3, r2, #4
 8080946:	17df      	asrs	r7, r3, #31
 8080948:	fb0a f607 	mul.w	r6, sl, r7
	dev->calib.t_fine = (int32_t) (var2 + var3);
 808094c:	fb80 0101 	smull	r0, r1, r0, r1
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080950:	fb03 660b 	mla	r6, r3, fp, r6
 8080954:	fbaa 2303 	umull	r2, r3, sl, r3
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8080958:	0ac0      	lsrs	r0, r0, #11
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 808095a:	4433      	add	r3, r6
	dev->calib.t_fine = (int32_t) (var2 + var3);
 808095c:	0b92      	lsrs	r2, r2, #14
 808095e:	ea40 5041 	orr.w	r0, r0, r1, lsl #21
 8080962:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 8080966:	1883      	adds	r3, r0, r2
 8080968:	6323      	str	r3, [r4, #48]	; 0x30

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
 808096a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 808096e:	3380      	adds	r3, #128	; 0x80
 8080970:	121b      	asrs	r3, r3, #8
 8080972:	f8a8 3004 	strh.w	r3, [r8, #4]
	int32_t var2 = 0;
	int32_t var3 = 0;
	int32_t var4 = 0;
	int32_t pressure_comp = 0;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8080976:	6b23      	ldr	r3, [r4, #48]	; 0x30
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8080978:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
	int32_t var2 = 0;
	int32_t var3 = 0;
	int32_t var4 = 0;
	int32_t pressure_comp = 0;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 808097c:	105b      	asrs	r3, r3, #1
 808097e:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8080982:	109a      	asrs	r2, r3, #2
 8080984:	4352      	muls	r2, r2
 8080986:	12d1      	asrs	r1, r2, #11
 8080988:	4348      	muls	r0, r1
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 808098a:	f9b4 1024 	ldrsh.w	r1, [r4, #36]	; 0x24
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 808098e:	1352      	asrs	r2, r2, #13

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 8080990:	4359      	muls	r1, r3
 8080992:	0049      	lsls	r1, r1, #1
 8080994:	eb01 01a0 	add.w	r1, r1, r0, asr #2
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 8080998:	f9b4 001e 	ldrsh.w	r0, [r4, #30]
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
	pressure_comp = 1048576 - pres_adc;
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
	var4 = (1 << 31);
	if (pressure_comp >= var4)
		pressure_comp = ((pressure_comp / (uint32_t)var1) << 1);
 808099c:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 80809a0:	4343      	muls	r3, r0
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 80809a2:	f994 0020 	ldrsb.w	r0, [r4, #32]
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
	pressure_comp = 1048576 - pres_adc;
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
	var4 = (1 << 31);
	if (pressure_comp >= var4)
		pressure_comp = ((pressure_comp / (uint32_t)var1) << 1);
 80809a6:	ea4c 1909 	orr.w	r9, ip, r9, lsl #4
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 80809aa:	0140      	lsls	r0, r0, #5
 80809ac:	4342      	muls	r2, r0
 80809ae:	10d2      	asrs	r2, r2, #3
 80809b0:	eb02 0363 	add.w	r3, r2, r3, asr #1
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
	var1 = var1 >> 18;
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 80809b4:	149b      	asrs	r3, r3, #18
 80809b6:	8ba2      	ldrh	r2, [r4, #28]
 80809b8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80809bc:	4353      	muls	r3, r2
	pressure_comp = 1048576 - pres_adc;
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
	var4 = (1 << 31);
	if (pressure_comp >= var4)
		pressure_comp = ((pressure_comp / (uint32_t)var1) << 1);
 80809be:	9a00      	ldr	r2, [sp, #0]
 80809c0:	13db      	asrs	r3, r3, #15
 80809c2:	ea49 3902 	orr.w	r9, r9, r2, lsl #12
 80809c6:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
 80809ca:	f5c9 1980 	rsb	r9, r9, #1048576	; 0x100000
 80809ce:	0412      	lsls	r2, r2, #16
 80809d0:	eb02 01a1 	add.w	r1, r2, r1, asr #2
 80809d4:	f640 4235 	movw	r2, #3125	; 0xc35
 80809d8:	eba9 3121 	sub.w	r1, r9, r1, asr #12
 80809dc:	4351      	muls	r1, r2
 80809de:	fbb1 f3f3 	udiv	r3, r1, r3
 80809e2:	005b      	lsls	r3, r3, #1
	else
		pressure_comp = ((pressure_comp << 1) / (uint32_t)var1);
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
		(pressure_comp >> 3)) >> 13)) >> 12;
 80809e4:	10d9      	asrs	r1, r3, #3
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 80809e6:	4349      	muls	r1, r1
 80809e8:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
 80809ec:	f9b4 0028 	ldrsh.w	r0, [r4, #40]	; 0x28
 80809f0:	1349      	asrs	r1, r1, #13
 80809f2:	434a      	muls	r2, r1
 80809f4:	1099      	asrs	r1, r3, #2
 80809f6:	4341      	muls	r1, r0
		pressure_comp = ((pressure_comp << 1) / (uint32_t)var1);
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
		(pressure_comp >> 3)) >> 13)) >> 12;
	var2 = ((int32_t)(pressure_comp >> 2) *
		(int32_t)dev->calib.par_p8) >> 13;
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 80809f8:	121e      	asrs	r6, r3, #8
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 80809fa:	1349      	asrs	r1, r1, #13
 80809fc:	eb01 3122 	add.w	r1, r1, r2, asr #12
 8080a00:	fb06 f206 	mul.w	r2, r6, r6
 8080a04:	4356      	muls	r6, r2
 8080a06:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8080a0a:	4372      	muls	r2, r6
 8080a0c:	eb01 4262 	add.w	r2, r1, r2, asr #17
 8080a10:	f994 1027 	ldrsb.w	r1, [r4, #39]	; 0x27
 8080a14:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
 8080a18:	eb03 1322 	add.w	r3, r3, r2, asr #4
 8080a1c:	f8c8 3008 	str.w	r3, [r8, #8]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 8080a20:	6b23      	ldr	r3, [r4, #48]	; 0x30
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
	var2 = ((int32_t) dev->calib.par_h2
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
 8080a22:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 8080a26:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8080a2a:	3380      	adds	r3, #128	; 0x80
 8080a2c:	121b      	asrs	r3, r3, #8
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
	var2 = ((int32_t) dev->calib.par_h2
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
 8080a2e:	4359      	muls	r1, r3
 8080a30:	2264      	movs	r2, #100	; 0x64
 8080a32:	fb91 f1f2 	sdiv	r1, r1, r2
 8080a36:	f994 000d 	ldrsb.w	r0, [r4, #13]
 8080a3a:	4359      	muls	r1, r3
 8080a3c:	4358      	muls	r0, r3
 8080a3e:	1189      	asrs	r1, r1, #6
 8080a40:	fb90 f0f2 	sdiv	r0, r0, r2
 8080a44:	fb91 f1f2 	sdiv	r1, r1, r2
 8080a48:	8967      	ldrh	r7, [r4, #10]
 8080a4a:	4401      	add	r1, r0
 8080a4c:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8080a50:	4379      	muls	r1, r7
 8080a52:	9801      	ldr	r0, [sp, #4]
 8080a54:	128f      	asrs	r7, r1, #10
 8080a56:	9902      	ldr	r1, [sp, #8]
 8080a58:	8926      	ldrh	r6, [r4, #8]
 8080a5a:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 8080a5e:	f994 100c 	ldrsb.w	r1, [r4, #12]
 8080a62:	eba0 1606 	sub.w	r6, r0, r6, lsl #4
 8080a66:	4359      	muls	r1, r3
 8080a68:	fb91 f1f2 	sdiv	r1, r1, r2
 8080a6c:	eba6 0061 	sub.w	r0, r6, r1, asr #1
 8080a70:	fb00 f107 	mul.w	r1, r0, r7
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080a74:	f994 0010 	ldrsb.w	r0, [r4, #16]
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
 8080a78:	f00e 060f 	and.w	r6, lr, #15
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080a7c:	4343      	muls	r3, r0
 8080a7e:	fb93 f2f2 	sdiv	r2, r3, r2
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080a82:	f240 503c 	movw	r0, #1340	; 0x53c
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080a86:	7be3      	ldrb	r3, [r4, #15]
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080a88:	ea4f 1e9e 	mov.w	lr, lr, lsr #6
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080a8c:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8080a90:	138b      	asrs	r3, r1, #14
	var6 = (var4 * var5) >> 1;
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8080a92:	435b      	muls	r3, r3
 8080a94:	1112      	asrs	r2, r2, #4
 8080a96:	129b      	asrs	r3, r3, #10
 8080a98:	4353      	muls	r3, r2
 8080a9a:	eb01 0363 	add.w	r3, r1, r3, asr #1
 8080a9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8080aa2:	129b      	asrs	r3, r3, #10
 8080aa4:	4353      	muls	r3, r2
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
 8080aa6:	4a2a      	ldr	r2, [pc, #168]	; (8080b50 <bme680_get_sensor_data+0x2f0>)
	var3 = var1 * var2;
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
	var6 = (var4 * var5) >> 1;
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8080aa8:	131b      	asrs	r3, r3, #12
 8080aaa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
 8080aae:	4293      	cmp	r3, r2
 8080ab0:	bfd4      	ite	le
 8080ab2:	f8c8 300c 	strle.w	r3, [r8, #12]
 8080ab6:	f8c8 200c 	strgt.w	r2, [r8, #12]
 8080aba:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080abe:	2205      	movs	r2, #5
 8080ac0:	2100      	movs	r1, #0
 8080ac2:	fbc3 0102 	smlal	r0, r1, r3, r2
		((int64_t) lookupTable1[gas_range])) >> 16;
 8080ac6:	4b23      	ldr	r3, [pc, #140]	; (8080b54 <bme680_get_sensor_data+0x2f4>)
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080ac8:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 8080acc:	fba0 2307 	umull	r2, r3, r0, r7
 8080ad0:	fb07 3301 	mla	r3, r7, r1, r3
 8080ad4:	0c10      	lsrs	r0, r2, #16
 8080ad6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8080ada:	1419      	asrs	r1, r3, #16
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080adc:	9b03      	ldr	r3, [sp, #12]
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 8080ade:	4f1e      	ldr	r7, [pc, #120]	; (8080b58 <bme680_get_sensor_data+0x2f8>)
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080ae0:	ea4e 0e83 	orr.w	lr, lr, r3, lsl #2
 8080ae4:	ea4f 32ce 	mov.w	r2, lr, lsl #15

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 8080ae8:	f857 e026 	ldr.w	lr, [r7, r6, lsl #2]
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080aec:	f112 427f 	adds.w	r2, r2, #4278190080	; 0xff000000

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 8080af0:	fbae 6700 	umull	r6, r7, lr, r0
 8080af4:	fb0e 7701 	mla	r7, lr, r1, r7
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080af8:	f04f 0300 	mov.w	r3, #0
 8080afc:	f143 33ff 	adc.w	r3, r3, #4294967295
 8080b00:	1812      	adds	r2, r2, r0
 8080b02:	414b      	adcs	r3, r1

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 8080b04:	0a70      	lsrs	r0, r6, #9
 8080b06:	ea40 50c7 	orr.w	r0, r0, r7, lsl #23
 8080b0a:	1279      	asrs	r1, r7, #9
 8080b0c:	105f      	asrs	r7, r3, #1
 8080b0e:	ea4f 0632 	mov.w	r6, r2, rrx
 8080b12:	1980      	adds	r0, r0, r6
 8080b14:	4179      	adcs	r1, r7
 8080b16:	f00d fb8d 	bl	808e234 <__aeabi_ldivmod>
 8080b1a:	f8c8 0010 	str.w	r0, [r8, #16]
	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		/* Reading the sensor data in forced mode only */
		rslt = read_field_data(data, dev);
		if (rslt == BME680_OK) {
 8080b1e:	b995      	cbnz	r5, 8080b46 <bme680_get_sensor_data+0x2e6>
			if (data->status & BME680_NEW_DATA_MSK)
 8080b20:	f998 3000 	ldrsb.w	r3, [r8]
 8080b24:	2b00      	cmp	r3, #0
				dev->new_fields = 1;
 8080b26:	bfba      	itte	lt
 8080b28:	2301      	movlt	r3, #1
 8080b2a:	f884 3045 	strblt.w	r3, [r4, #69]	; 0x45
			else
				dev->new_fields = 0;
 8080b2e:	f884 5045 	strbge.w	r5, [r4, #69]	; 0x45
 8080b32:	e008      	b.n	8080b46 <bme680_get_sensor_data+0x2e6>
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
				break;
			}
			/* Delay to poll the data */
			dev->delay_ms(BME680_POLL_PERIOD_MS);
 8080b34:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8080b36:	200a      	movs	r0, #10
 8080b38:	4798      	blx	r3
 8080b3a:	3e01      	subs	r6, #1
		}
		tries--;
	} while (tries);
 8080b3c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8080b40:	f47f aea5 	bne.w	808088e <bme680_get_sensor_data+0x2e>

	if (!tries)
		rslt = BME680_W_NO_NEW_DATA;
 8080b44:	2502      	movs	r5, #2
				dev->new_fields = 0;
		}
	}

	return rslt;
}
 8080b46:	4628      	mov	r0, r5
 8080b48:	b009      	add	sp, #36	; 0x24
 8080b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8080b4e:	bf00      	nop
 8080b50:	000186a0 	.word	0x000186a0
 8080b54:	20000400 	.word	0x20000400
 8080b58:	20000440 	.word	0x20000440

08080b5c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 8080b5c:	4770      	bx	lr

08080b5e <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
 8080b5e:	7c03      	ldrb	r3, [r0, #16]
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
 8080b60:	4602      	mov	r2, r0
 8080b62:	f003 0308 	and.w	r3, r3, #8
 8080b66:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8080b6a:	b12b      	cbz	r3, 8080b78 <_ZN4File9availableEv+0x1a>
 8080b6c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8080b6e:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
 8080b70:	1a18      	subs	r0, r3, r0
 8080b72:	bf48      	it	mi
 8080b74:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
 8080b78:	4770      	bx	lr

08080b7a <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 8080b7a:	4770      	bx	lr

08080b7c <_ZN4FileD1Ev>:
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
#if ARDUINO_FILE_USES_STREAM
class File : public FatFile, public Stream {
 8080b7c:	4770      	bx	lr

08080b7e <_ZN6SdFileD0Ev>:
 8080b7e:	b510      	push	{r4, lr}
 8080b80:	4604      	mov	r4, r0
 8080b82:	212c      	movs	r1, #44	; 0x2c
 8080b84:	f00c fa0f 	bl	808cfa6 <_ZdlPvj>
 8080b88:	4620      	mov	r0, r4
 8080b8a:	bd10      	pop	{r4, pc}

08080b8c <_ZN4FileD0Ev>:
 8080b8c:	b510      	push	{r4, lr}
 8080b8e:	4604      	mov	r4, r0
 8080b90:	2134      	movs	r1, #52	; 0x34
 8080b92:	f00c fa08 	bl	808cfa6 <_ZdlPvj>
 8080b96:	4620      	mov	r0, r4
 8080b98:	bd10      	pop	{r4, pc}

08080b9a <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
 8080b9a:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 8080b9c:	2201      	movs	r2, #1
 8080b9e:	f10d 0107 	add.w	r1, sp, #7
 8080ba2:	3010      	adds	r0, #16
 8080ba4:	f007 fc8d 	bl	80884c2 <_ZN7FatFile4readEPvj>
 8080ba8:	2801      	cmp	r0, #1
 8080baa:	bf0c      	ite	eq
 8080bac:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
 8080bb0:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
 8080bb4:	b003      	add	sp, #12
 8080bb6:	f85d fb04 	ldr.w	pc, [sp], #4

08080bba <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
 8080bba:	3010      	adds	r0, #16
 8080bbc:	f007 be06 	b.w	80887cc <_ZN7FatFile4syncEv>

08080bc0 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
 8080bc0:	3010      	adds	r0, #16
 8080bc2:	f007 bd32 	b.w	808862a <_ZN7FatFile4peekEv>

08080bc6 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
 8080bc6:	3010      	adds	r0, #16
 8080bc8:	f007 be8c 	b.w	80888e4 <_ZN7FatFile5writeEPKvj>

08080bcc <_ZN9PrintFile5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
 8080bcc:	3008      	adds	r0, #8
 8080bce:	f007 be89 	b.w	80888e4 <_ZN7FatFile5writeEPKvj>

08080bd2 <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
 8080bd2:	b507      	push	{r0, r1, r2, lr}
 8080bd4:	ab02      	add	r3, sp, #8
 8080bd6:	f803 1d01 	strb.w	r1, [r3, #-1]!
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
 8080bda:	2201      	movs	r2, #1
 8080bdc:	4619      	mov	r1, r3
 8080bde:	3010      	adds	r0, #16
 8080be0:	f007 fe80 	bl	80888e4 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
 8080be4:	b003      	add	sp, #12
 8080be6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08080bec <_Z16locationCallbackfff>:
    Log.info("System version: %s", (const char*)System.version());
    

}

void locationCallback(float lat, float lon, float accuracy) {
 8080bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080bf0:	b087      	sub	sp, #28
 8080bf2:	4692      	mov	sl, r2
 8080bf4:	460c      	mov	r4, r1
 8080bf6:	4605      	mov	r5, r0
  // Handle the returned location data for the device. This method is passed three arguments:
  // - Latitude
  // - Longitude
  // - Accuracy of estimated location (in meters)
  Serial.println("google geolocation:");
 8080bf8:	f00b fd76 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8080bfc:	492e      	ldr	r1, [pc, #184]	; (8080cb8 <_Z16locationCallbackfff+0xcc>)
 8080bfe:	f00a fd04 	bl	808b60a <_ZN5Print7printlnEPKc>
  Serial.printlnf("Latitude:%f, longitude:%f, acc:%f", lat, lon, accuracy);
 8080c02:	f00b fd71 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8080c06:	4683      	mov	fp, r0
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
 8080c08:	4628      	mov	r0, r5
 8080c0a:	f00c fc7d 	bl	808d508 <__aeabi_f2d>
 8080c0e:	4680      	mov	r8, r0
 8080c10:	4620      	mov	r0, r4
 8080c12:	4689      	mov	r9, r1
 8080c14:	f00c fc78 	bl	808d508 <__aeabi_f2d>
 8080c18:	4606      	mov	r6, r0
 8080c1a:	4650      	mov	r0, sl
 8080c1c:	460f      	mov	r7, r1
 8080c1e:	f00c fc73 	bl	808d508 <__aeabi_f2d>
 8080c22:	4604      	mov	r4, r0
 8080c24:	460d      	mov	r5, r1
 8080c26:	4a25      	ldr	r2, [pc, #148]	; (8080cbc <_Z16locationCallbackfff+0xd0>)
 8080c28:	2101      	movs	r1, #1
 8080c2a:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8080c2e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8080c32:	e9cd 8900 	strd	r8, r9, [sp]
 8080c36:	4658      	mov	r0, fp
 8080c38:	f00a fe1c 	bl	808b874 <_ZN5Print11printf_implEbPKcz>
  snprintf(geolocation_latitude, sizeof(geolocation_latitude), "%.6f", lat);
 8080c3c:	4a20      	ldr	r2, [pc, #128]	; (8080cc0 <_Z16locationCallbackfff+0xd4>)
 8080c3e:	210c      	movs	r1, #12
 8080c40:	e9cd 8900 	strd	r8, r9, [sp]
 8080c44:	481f      	ldr	r0, [pc, #124]	; (8080cc4 <_Z16locationCallbackfff+0xd8>)
 8080c46:	f009 ff0d 	bl	808aa64 <snprintf>
  snprintf(geolocation_longitude, sizeof(geolocation_longitude), "%.6f", lon);
 8080c4a:	4a1d      	ldr	r2, [pc, #116]	; (8080cc0 <_Z16locationCallbackfff+0xd4>)
 8080c4c:	210d      	movs	r1, #13
 8080c4e:	e9cd 6700 	strd	r6, r7, [sp]
 8080c52:	481d      	ldr	r0, [pc, #116]	; (8080cc8 <_Z16locationCallbackfff+0xdc>)
 8080c54:	f009 ff06 	bl	808aa64 <snprintf>
  snprintf(geolocation_accuracy, sizeof(geolocation_accuracy), "%3.2f", accuracy);
 8080c58:	4a1c      	ldr	r2, [pc, #112]	; (8080ccc <_Z16locationCallbackfff+0xe0>)
 8080c5a:	2106      	movs	r1, #6
 8080c5c:	e9cd 4500 	strd	r4, r5, [sp]
 8080c60:	481b      	ldr	r0, [pc, #108]	; (8080cd0 <_Z16locationCallbackfff+0xe4>)
 8080c62:	f009 feff 	bl	808aa64 <snprintf>
  if(gps.get_latitude() == 0){
 8080c66:	481b      	ldr	r0, [pc, #108]	; (8080cd4 <_Z16locationCallbackfff+0xe8>)
 8080c68:	f006 fba6 	bl	80873b8 <_ZN3GPS12get_latitudeEv>
 8080c6c:	2200      	movs	r2, #0
 8080c6e:	2300      	movs	r3, #0
 8080c70:	f00c ff06 	bl	808da80 <__aeabi_dcmpeq>
 8080c74:	b1e8      	cbz	r0, 8080cb2 <_Z16locationCallbackfff+0xc6>
      status_word.status_int |= 0x0008;
 8080c76:	4d18      	ldr	r5, [pc, #96]	; (8080cd8 <_Z16locationCallbackfff+0xec>)
      status_word.status_int &= 0xFFF3;
      if(accuracy < 2){
 8080c78:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8080c7c:	882c      	ldrh	r4, [r5, #0]
 8080c7e:	4650      	mov	r0, sl
 8080c80:	f024 040c 	bic.w	r4, r4, #12
 8080c84:	b2a4      	uxth	r4, r4
 8080c86:	f00d fa87 	bl	808e198 <__aeabi_fcmplt>
 8080c8a:	b110      	cbz	r0, 8080c92 <_Z16locationCallbackfff+0xa6>
          status_word.status_int |= 0x000C;
 8080c8c:	f044 040c 	orr.w	r4, r4, #12
 8080c90:	e00e      	b.n	8080cb0 <_Z16locationCallbackfff+0xc4>
      }else if(accuracy < 5){
 8080c92:	4912      	ldr	r1, [pc, #72]	; (8080cdc <_Z16locationCallbackfff+0xf0>)
 8080c94:	4650      	mov	r0, sl
 8080c96:	f00d fa7f 	bl	808e198 <__aeabi_fcmplt>
 8080c9a:	b110      	cbz	r0, 8080ca2 <_Z16locationCallbackfff+0xb6>
          status_word.status_int |= 0x0008;
 8080c9c:	f044 0408 	orr.w	r4, r4, #8
 8080ca0:	e006      	b.n	8080cb0 <_Z16locationCallbackfff+0xc4>
      }else if(accuracy < 20){
 8080ca2:	490f      	ldr	r1, [pc, #60]	; (8080ce0 <_Z16locationCallbackfff+0xf4>)
 8080ca4:	4650      	mov	r0, sl
 8080ca6:	f00d fa77 	bl	808e198 <__aeabi_fcmplt>
 8080caa:	b108      	cbz	r0, 8080cb0 <_Z16locationCallbackfff+0xc4>
          status_word.status_int |= 0x0004;
 8080cac:	f044 0404 	orr.w	r4, r4, #4
 8080cb0:	802c      	strh	r4, [r5, #0]
      }
  }
}
 8080cb2:	b007      	add	sp, #28
 8080cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8080cb8:	080918de 	.word	0x080918de
 8080cbc:	080918f2 	.word	0x080918f2
 8080cc0:	08091914 	.word	0x08091914
 8080cc4:	200004b8 	.word	0x200004b8
 8080cc8:	200004c4 	.word	0x200004c4
 8080ccc:	08091919 	.word	0x08091919
 8080cd0:	20000480 	.word	0x20000480
 8080cd4:	20000d78 	.word	0x20000d78
 8080cd8:	20000f84 	.word	0x20000f84
 8080cdc:	40a00000 	.word	0x40a00000
 8080ce0:	41a00000 	.word	0x41a00000

08080ce4 <_ZN9SdFatBase11writeBlocksEmPKhj>:
  }
  bool readBlocks(uint32_t block, uint8_t* dst, size_t n) {
    return m_sdCard.readBlocks(block, dst, n);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t n) {
    return m_sdCard.writeBlocks(block, src, n);
 8080ce4:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080ce8:	f007 bab3 	b.w	8088252 <_ZN9SdSpiCard11writeBlocksEmPKhj>

08080cec <_ZN9SdFatBase10readBlocksEmPhj>:
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_sdCard.writeBlock(block, src);
  }
  bool readBlocks(uint32_t block, uint8_t* dst, size_t n) {
    return m_sdCard.readBlocks(block, dst, n);
 8080cec:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080cf0:	f007 b9e7 	b.w	80880c2 <_ZN9SdSpiCard10readBlocksEmPhj>

08080cf4 <_ZN9SdFatBase10writeBlockEmPKh>:

  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_sdCard.readBlock(block, dst);
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_sdCard.writeBlock(block, src);
 8080cf4:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080cf8:	f007 ba26 	b.w	8088148 <_ZN9SdSpiCard10writeBlockEmPKh>

08080cfc <_ZN9SdFatBase9readBlockEmPh>:
#endif  // defined(ARDUINO) || defined(DOXYGEN)

 private:

  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_sdCard.readBlock(block, dst);
 8080cfc:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080d00:	f007 b997 	b.w	8088032 <_ZN9SdSpiCard9readBlockEmPh>

08080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>:
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
 8080d04:	b510      	push	{r4, lr}
 8080d06:	460c      	mov	r4, r1
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 8080d08:	2204      	movs	r2, #4
 8080d0a:	f009 fc55 	bl	808a5b8 <HAL_EEPROM_Put>
        return t;
    }
 8080d0e:	4620      	mov	r0, r4
 8080d10:	bd10      	pop	{r4, pc}

08080d12 <_Z20remoteReadStoredVars6String>:
        return -1;
    }

}

int remoteReadStoredVars(String mem_address){
 8080d12:	b513      	push	{r0, r1, r4, lr}
    uint16_t tempValue = 0;
 8080d14:	2300      	movs	r3, #0
 8080d16:	f8ad 3006 	strh.w	r3, [sp, #6]
    int numerical_mem_address = mem_address.toInt();
 8080d1a:	f00a fc15 	bl	808b548 <_ZNK6String5toIntEv>
    if(numerical_mem_address >= 0 && numerical_mem_address <= MAX_MEM_ADDRESS){
 8080d1e:	2890      	cmp	r0, #144	; 0x90

}

int remoteReadStoredVars(String mem_address){
    uint16_t tempValue = 0;
    int numerical_mem_address = mem_address.toInt();
 8080d20:	4604      	mov	r4, r0
    if(numerical_mem_address >= 0 && numerical_mem_address <= MAX_MEM_ADDRESS){
 8080d22:	d80a      	bhi.n	8080d3a <_Z20remoteReadStoredVars6String+0x28>
        EEPROM.get(numerical_mem_address, tempValue);
 8080d24:	f00c f8ce 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 8080d28:	4620      	mov	r0, r4
 8080d2a:	2202      	movs	r2, #2
 8080d2c:	f10d 0106 	add.w	r1, sp, #6
 8080d30:	f009 fc3a 	bl	808a5a8 <HAL_EEPROM_Get>
        return tempValue;
 8080d34:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8080d38:	e001      	b.n	8080d3e <_Z20remoteReadStoredVars6String+0x2c>
    }else{
        return -1;
 8080d3a:	f04f 30ff 	mov.w	r0, #4294967295
    }
}
 8080d3e:	b002      	add	sp, #8
 8080d40:	bd10      	pop	{r4, pc}

08080d42 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>:
    EEPtr begin()                        { return 0x00; }
    EEPtr end()                          { return length(); } //Standards requires this to be the item after the last valid entry. The returned pointer is invalid.
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
 8080d42:	b510      	push	{r4, lr}
 8080d44:	460c      	mov	r4, r1
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 8080d46:	2204      	movs	r2, #4
 8080d48:	f009 fc2e 	bl	808a5a8 <HAL_EEPROM_Get>
        return t;
    }
 8080d4c:	4620      	mov	r0, r4
 8080d4e:	bd10      	pop	{r4, pc}

08080d50 <_ZN9PrintFile5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
 8080d50:	b507      	push	{r0, r1, r2, lr}
 8080d52:	ab02      	add	r3, sp, #8
 8080d54:	f803 1d01 	strb.w	r1, [r3, #-1]!
 8080d58:	2201      	movs	r2, #1
 8080d5a:	4619      	mov	r1, r3
 8080d5c:	3008      	adds	r0, #8
 8080d5e:	f007 fdc1 	bl	80888e4 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
 8080d62:	b003      	add	sp, #12
 8080d64:	f85d fb04 	ldr.w	pc, [sp], #4

08080d68 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 8080d68:	2300      	movs	r3, #0
 8080d6a:	461a      	mov	r2, r3
 8080d6c:	4619      	mov	r1, r3
 8080d6e:	6840      	ldr	r0, [r0, #4]
 8080d70:	f009 bdd0 	b.w	808a914 <network_off>

08080d74 <_ZN11USARTSerialD0Ev>:
 8080d74:	b510      	push	{r4, lr}
 8080d76:	4604      	mov	r4, r0
 8080d78:	2114      	movs	r1, #20
 8080d7a:	f00c f914 	bl	808cfa6 <_ZdlPvj>
 8080d7e:	4620      	mov	r0, r4
 8080d80:	bd10      	pop	{r4, pc}

08080d82 <_ZN5spark10JSONWriter4nameEPKc>:
// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
}

inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
 8080d82:	b538      	push	{r3, r4, r5, lr}
 8080d84:	4605      	mov	r5, r0
    return this->name(name, strlen(name));
 8080d86:	4608      	mov	r0, r1
// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
}

inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
 8080d88:	460c      	mov	r4, r1
    return this->name(name, strlen(name));
 8080d8a:	f00e fb57 	bl	808f43c <strlen>
 8080d8e:	4621      	mov	r1, r4
 8080d90:	4602      	mov	r2, r0
 8080d92:	4628      	mov	r0, r5
}
 8080d94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
}

inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
    return this->name(name, strlen(name));
 8080d98:	f00b bfd0 	b.w	808cd3c <_ZN5spark10JSONWriter4nameEPKcj>

08080d9c <_ZN5spark10JSONWriter5valueERK6String>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
}

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
 8080d9c:	688a      	ldr	r2, [r1, #8]
 8080d9e:	6809      	ldr	r1, [r1, #0]
 8080da0:	f00b bfdb 	b.w	808cd5a <_ZN5spark10JSONWriter5valueEPKcj>

08080da4 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 8080da4:	b40e      	push	{r1, r2, r3}
 8080da6:	b500      	push	{lr}
 8080da8:	b08c      	sub	sp, #48	; 0x30
 8080daa:	aa0d      	add	r2, sp, #52	; 0x34
 8080dac:	f852 1b04 	ldr.w	r1, [r2], #4
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 8080db0:	2320      	movs	r3, #32
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080db2:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
 8080db6:	9203      	str	r2, [sp, #12]
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 8080db8:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080dba:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 8080dbc:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080dbe:	aa04      	add	r2, sp, #16
 8080dc0:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 8080dc2:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080dc4:	f009 fd10 	bl	808a7e8 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
 8080dc8:	b00c      	add	sp, #48	; 0x30
 8080dca:	f85d eb04 	ldr.w	lr, [sp], #4
 8080dce:	b003      	add	sp, #12
 8080dd0:	4770      	bx	lr
	...

08080dd4 <_Z22__fetch_global_Serial4v>:
// instantiate Serial4
static Ring_Buffer serial4_rx_buffer;
static Ring_Buffer serial4_tx_buffer;

USARTSerial& __fetch_global_Serial4()
{
 8080dd4:	b510      	push	{r4, lr}
	static USARTSerial serial4(HAL_USART_SERIAL4, &serial4_rx_buffer, &serial4_tx_buffer);
 8080dd6:	4c0c      	ldr	r4, [pc, #48]	; (8080e08 <_Z22__fetch_global_Serial4v+0x34>)
 8080dd8:	6823      	ldr	r3, [r4, #0]
 8080dda:	07db      	lsls	r3, r3, #31
 8080ddc:	d411      	bmi.n	8080e02 <_Z22__fetch_global_Serial4v+0x2e>
 8080dde:	4620      	mov	r0, r4
 8080de0:	f7ff f95f 	bl	80800a2 <__cxa_guard_acquire>
 8080de4:	b168      	cbz	r0, 8080e02 <_Z22__fetch_global_Serial4v+0x2e>
 8080de6:	4a09      	ldr	r2, [pc, #36]	; (8080e0c <_Z22__fetch_global_Serial4v+0x38>)
 8080de8:	2103      	movs	r1, #3
 8080dea:	4b09      	ldr	r3, [pc, #36]	; (8080e10 <_Z22__fetch_global_Serial4v+0x3c>)
 8080dec:	4809      	ldr	r0, [pc, #36]	; (8080e14 <_Z22__fetch_global_Serial4v+0x40>)
 8080dee:	f00b fdb3 	bl	808c958 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8080df2:	4620      	mov	r0, r4
 8080df4:	f7ff f95a 	bl	80800ac <__cxa_guard_release>
 8080df8:	4a07      	ldr	r2, [pc, #28]	; (8080e18 <_Z22__fetch_global_Serial4v+0x44>)
 8080dfa:	4908      	ldr	r1, [pc, #32]	; (8080e1c <_Z22__fetch_global_Serial4v+0x48>)
 8080dfc:	4805      	ldr	r0, [pc, #20]	; (8080e14 <_Z22__fetch_global_Serial4v+0x40>)
 8080dfe:	f00c f8cd 	bl	808cf9c <__aeabi_atexit>
	return serial4;
}
 8080e02:	4804      	ldr	r0, [pc, #16]	; (8080e14 <_Z22__fetch_global_Serial4v+0x40>)
 8080e04:	bd10      	pop	{r4, pc}
 8080e06:	bf00      	nop
 8080e08:	20000e3c 	.word	0x20000e3c
 8080e0c:	20000db4 	.word	0x20000db4
 8080e10:	20000e44 	.word	0x20000e44
 8080e14:	20000cb0 	.word	0x20000cb0
 8080e18:	200005d8 	.word	0x200005d8
 8080e1c:	08080b5d 	.word	0x08080b5d

08080e20 <_Z15serialEventRun4v>:

void serialEventRun4()
{
 8080e20:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial4, serialEvent4);
 8080e22:	f7ff ffd7 	bl	8080dd4 <_Z22__fetch_global_Serial4v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 8080e26:	4b07      	ldr	r3, [pc, #28]	; (8080e44 <_Z15serialEventRun4v+0x24>)
 8080e28:	4604      	mov	r4, r0
 8080e2a:	b153      	cbz	r3, 8080e42 <_Z15serialEventRun4v+0x22>
 8080e2c:	f00b fdb1 	bl	808c992 <_ZN11USARTSerial9isEnabledEv>
 8080e30:	b138      	cbz	r0, 8080e42 <_Z15serialEventRun4v+0x22>
 8080e32:	6823      	ldr	r3, [r4, #0]
 8080e34:	4620      	mov	r0, r4
 8080e36:	691b      	ldr	r3, [r3, #16]
 8080e38:	4798      	blx	r3
 8080e3a:	2800      	cmp	r0, #0
 8080e3c:	dd01      	ble.n	8080e42 <_Z15serialEventRun4v+0x22>
        handler();
 8080e3e:	f3af 8000 	nop.w
 8080e42:	bd10      	pop	{r4, pc}
 8080e44:	00000000 	.word	0x00000000

08080e48 <_Z22__fetch_global_Serial5v>:
// instantiate Serial5
static Ring_Buffer serial5_rx_buffer;
static Ring_Buffer serial5_tx_buffer;

USARTSerial& __fetch_global_Serial5()
{
 8080e48:	b510      	push	{r4, lr}
	static USARTSerial serial5(HAL_USART_SERIAL5, &serial5_rx_buffer, &serial5_tx_buffer);
 8080e4a:	4c0c      	ldr	r4, [pc, #48]	; (8080e7c <_Z22__fetch_global_Serial5v+0x34>)
 8080e4c:	6823      	ldr	r3, [r4, #0]
 8080e4e:	07db      	lsls	r3, r3, #31
 8080e50:	d411      	bmi.n	8080e76 <_Z22__fetch_global_Serial5v+0x2e>
 8080e52:	4620      	mov	r0, r4
 8080e54:	f7ff f925 	bl	80800a2 <__cxa_guard_acquire>
 8080e58:	b168      	cbz	r0, 8080e76 <_Z22__fetch_global_Serial5v+0x2e>
 8080e5a:	4a09      	ldr	r2, [pc, #36]	; (8080e80 <_Z22__fetch_global_Serial5v+0x38>)
 8080e5c:	2104      	movs	r1, #4
 8080e5e:	4b09      	ldr	r3, [pc, #36]	; (8080e84 <_Z22__fetch_global_Serial5v+0x3c>)
 8080e60:	4809      	ldr	r0, [pc, #36]	; (8080e88 <_Z22__fetch_global_Serial5v+0x40>)
 8080e62:	f00b fd79 	bl	808c958 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8080e66:	4620      	mov	r0, r4
 8080e68:	f7ff f920 	bl	80800ac <__cxa_guard_release>
 8080e6c:	4a07      	ldr	r2, [pc, #28]	; (8080e8c <_Z22__fetch_global_Serial5v+0x44>)
 8080e6e:	4908      	ldr	r1, [pc, #32]	; (8080e90 <_Z22__fetch_global_Serial5v+0x48>)
 8080e70:	4805      	ldr	r0, [pc, #20]	; (8080e88 <_Z22__fetch_global_Serial5v+0x40>)
 8080e72:	f00c f893 	bl	808cf9c <__aeabi_atexit>
	return serial5;
}
 8080e76:	4804      	ldr	r0, [pc, #16]	; (8080e88 <_Z22__fetch_global_Serial5v+0x40>)
 8080e78:	bd10      	pop	{r4, pc}
 8080e7a:	bf00      	nop
 8080e7c:	200005f4 	.word	0x200005f4
 8080e80:	20000bf8 	.word	0x20000bf8
 8080e84:	20000cec 	.word	0x20000cec
 8080e88:	20000600 	.word	0x20000600
 8080e8c:	200005d8 	.word	0x200005d8
 8080e90:	08080b5d 	.word	0x08080b5d

08080e94 <_Z15serialEventRun5v>:


void serialEventRun5()
{
 8080e94:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial5, serialEvent5);
 8080e96:	f7ff ffd7 	bl	8080e48 <_Z22__fetch_global_Serial5v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 8080e9a:	4b07      	ldr	r3, [pc, #28]	; (8080eb8 <_Z15serialEventRun5v+0x24>)
 8080e9c:	4604      	mov	r4, r0
 8080e9e:	b153      	cbz	r3, 8080eb6 <_Z15serialEventRun5v+0x22>
 8080ea0:	f00b fd77 	bl	808c992 <_ZN11USARTSerial9isEnabledEv>
 8080ea4:	b138      	cbz	r0, 8080eb6 <_Z15serialEventRun5v+0x22>
 8080ea6:	6823      	ldr	r3, [r4, #0]
 8080ea8:	4620      	mov	r0, r4
 8080eaa:	691b      	ldr	r3, [r3, #16]
 8080eac:	4798      	blx	r3
 8080eae:	2800      	cmp	r0, #0
 8080eb0:	dd01      	ble.n	8080eb6 <_Z15serialEventRun5v+0x22>
        handler();
 8080eb2:	f3af 8000 	nop.w
 8080eb6:	bd10      	pop	{r4, pc}
 8080eb8:	00000000 	.word	0x00000000

08080ebc <_ZN9SdFatBase5beginEP9SdSpiBasehh>:
   * \param[in] spi SPI object for the card.
   * \param[in] csPin SD card chip select pin.
   * \param[in] divisor SPI divisor.
   * \return true for success else false.
   */
  bool begin(SdSpiCard::m_spi_t* spi, uint8_t csPin = SS, uint8_t divisor = 2) {
 8080ebc:	b538      	push	{r3, r4, r5, lr}
 8080ebe:	4604      	mov	r4, r0
    return m_sdCard.begin(spi, csPin, divisor) &&
 8080ec0:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080ec4:	f007 f821 	bl	8087f0a <_ZN9SdSpiCard5beginEP9SdSpiBasehh>
 8080ec8:	b1e8      	cbz	r0, 8080f06 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x4a>
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
 8080eca:	f504 6588 	add.w	r5, r4, #1088	; 0x440
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(uint8_t part = 0) {
    vwd()->close();
 8080ece:	4628      	mov	r0, r5
 8080ed0:	f007 fcb2 	bl	8088838 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
 8080ed4:	2101      	movs	r1, #1
 8080ed6:	4620      	mov	r0, r4
 8080ed8:	f007 feec 	bl	8088cb4 <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
 8080edc:	4601      	mov	r1, r0
 8080ede:	b168      	cbz	r0, 8080efc <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x40>
 8080ee0:	4621      	mov	r1, r4
 8080ee2:	4628      	mov	r0, r5
 8080ee4:	f007 fad5 	bl	8088492 <_ZN7FatFile8openRootEP9FatVolume>
 8080ee8:	b168      	cbz	r0, 8080f06 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x4a>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
 8080eea:	f894 3440 	ldrb.w	r3, [r4, #1088]	; 0x440
 8080eee:	f013 0370 	ands.w	r3, r3, #112	; 0x70
      return false;
    }
    m_cwd = dir;
 8080ef2:	bf16      	itet	ne
 8080ef4:	4b05      	ldrne	r3, [pc, #20]	; (8080f0c <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x50>)
 8080ef6:	4618      	moveq	r0, r3
 8080ef8:	601d      	strne	r5, [r3, #0]
 8080efa:	bd38      	pop	{r3, r4, r5, pc}
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(uint8_t part = 0) {
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
 8080efc:	4620      	mov	r0, r4
 8080efe:	f007 fed9 	bl	8088cb4 <_ZN9FatVolume4initEh>
 8080f02:	2800      	cmp	r0, #0
 8080f04:	d1ec      	bne.n	8080ee0 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x24>
 8080f06:	2000      	movs	r0, #0
           FatFileSystem::begin();
  }
 8080f08:	bd38      	pop	{r3, r4, r5, pc}
 8080f0a:	bf00      	nop
 8080f0c:	20000fd8 	.word	0x20000fd8

08080f10 <_Z13writeRegisterhh>:
void locationCallback(float lat, float lon, float accuracy);

//void testsensible();

//test for setting up PMIC manually
void writeRegister(uint8_t reg, uint8_t value) {
 8080f10:	b538      	push	{r3, r4, r5, lr}
 8080f12:	460c      	mov	r4, r1
 8080f14:	4605      	mov	r5, r0
    // This would be easier if pmic.writeRegister wasn't private
    Wire3.beginTransmission(PMIC_ADDRESS);
 8080f16:	f00c f821 	bl	808cf5c <_Z20__fetch_global_Wire3v>
 8080f1a:	216b      	movs	r1, #107	; 0x6b
 8080f1c:	f00b fdd4 	bl	808cac8 <_ZN7TwoWire17beginTransmissionEi>
    Wire3.write(reg);
 8080f20:	f00c f81c 	bl	808cf5c <_Z20__fetch_global_Wire3v>
 8080f24:	6803      	ldr	r3, [r0, #0]
 8080f26:	4629      	mov	r1, r5
 8080f28:	689b      	ldr	r3, [r3, #8]
 8080f2a:	4798      	blx	r3
    Wire3.write(value);
 8080f2c:	f00c f816 	bl	808cf5c <_Z20__fetch_global_Wire3v>
 8080f30:	6803      	ldr	r3, [r0, #0]
 8080f32:	4621      	mov	r1, r4
 8080f34:	689b      	ldr	r3, [r3, #8]
 8080f36:	4798      	blx	r3
    Wire3.endTransmission(true);
 8080f38:	f00c f810 	bl	808cf5c <_Z20__fetch_global_Wire3v>

}
 8080f3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void writeRegister(uint8_t reg, uint8_t value) {
    // This would be easier if pmic.writeRegister wasn't private
    Wire3.beginTransmission(PMIC_ADDRESS);
    Wire3.write(reg);
    Wire3.write(value);
    Wire3.endTransmission(true);
 8080f40:	2101      	movs	r1, #1
 8080f42:	f00b bdc4 	b.w	808cace <_ZN7TwoWire15endTransmissionEh>
	...

08080f48 <_Z20writeDefaultSettingsv>:
    {
        PM_10_slope = 1;
    }
}

void writeDefaultSettings(void){
 8080f48:	b573      	push	{r0, r1, r4, r5, r6, lr}
    EEPROM.put(DEVICE_ID_MEM_ADDRESS, 1555);
 8080f4a:	f00b ffbb 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8080f4e:	f240 6313 	movw	r3, #1555	; 0x613
 8080f52:	ac02      	add	r4, sp, #8
 8080f54:	f844 3d04 	str.w	r3, [r4, #-4]!
 8080f58:	4621      	mov	r1, r4
 8080f5a:	2000      	movs	r0, #0


    EEPROM.put(CO2_SLOPE_MEM_ADDRESS, 100);
 8080f5c:	2664      	movs	r6, #100	; 0x64
        PM_10_slope = 1;
    }
}

void writeDefaultSettings(void){
    EEPROM.put(DEVICE_ID_MEM_ADDRESS, 1555);
 8080f5e:	f7ff fed1 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>


    EEPROM.put(CO2_SLOPE_MEM_ADDRESS, 100);
 8080f62:	f00b ffaf 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8080f66:	4621      	mov	r1, r4
 8080f68:	2008      	movs	r0, #8
 8080f6a:	9601      	str	r6, [sp, #4]
 8080f6c:	f7ff feca 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(CO_SLOPE_MEM_ADDRESS, 100);
 8080f70:	f00b ffa8 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8080f74:	4621      	mov	r1, r4
 8080f76:	2010      	movs	r0, #16
 8080f78:	9601      	str	r6, [sp, #4]
 8080f7a:	f7ff fec3 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(PM_1_SLOPE_MEM_ADDRESS, 100);
 8080f7e:	f00b ffa1 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8080f82:	4621      	mov	r1, r4
 8080f84:	2018      	movs	r0, #24
 8080f86:	9601      	str	r6, [sp, #4]
 8080f88:	f7ff febc 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(PM_25_SLOPE_MEM_ADDRESS, 100);
 8080f8c:	f00b ff9a 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8080f90:	4621      	mov	r1, r4
 8080f92:	2020      	movs	r0, #32
 8080f94:	9601      	str	r6, [sp, #4]
 8080f96:	f7ff feb5 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(PM_10_SLOPE_MEM_ADDRESS, 100);
 8080f9a:	f00b ff93 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8080f9e:	4621      	mov	r1, r4
 8080fa0:	2028      	movs	r0, #40	; 0x28
 8080fa2:	9601      	str	r6, [sp, #4]
 8080fa4:	f7ff feae 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, 100);
 8080fa8:	f00b ff8c 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8080fac:	4621      	mov	r1, r4
 8080fae:	2030      	movs	r0, #48	; 0x30
 8080fb0:	9601      	str	r6, [sp, #4]
 8080fb2:	f7ff fea7 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, 100);
 8080fb6:	f00b ff85 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8080fba:	4621      	mov	r1, r4
 8080fbc:	2038      	movs	r0, #56	; 0x38
 8080fbe:	9601      	str	r6, [sp, #4]
 8080fc0:	f7ff fea0 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(RH_SLOPE_MEM_ADDRESS, 100);
 8080fc4:	f00b ff7e 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8080fc8:	4621      	mov	r1, r4
 8080fca:	2040      	movs	r0, #64	; 0x40

    EEPROM.put(CO2_ZERO_MEM_ADDRESS, 0);
 8080fcc:	2500      	movs	r5, #0
    EEPROM.put(PM_1_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(PM_25_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(PM_10_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(RH_SLOPE_MEM_ADDRESS, 100);
 8080fce:	9601      	str	r6, [sp, #4]
 8080fd0:	f7ff fe98 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>

    EEPROM.put(CO2_ZERO_MEM_ADDRESS, 0);
 8080fd4:	f00b ff76 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8080fd8:	4621      	mov	r1, r4
 8080fda:	2004      	movs	r0, #4
 8080fdc:	9501      	str	r5, [sp, #4]
 8080fde:	f7ff fe91 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(CO_ZERO_MEM_ADDRESS, 0);
 8080fe2:	f00b ff6f 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8080fe6:	4621      	mov	r1, r4
 8080fe8:	200c      	movs	r0, #12
 8080fea:	9501      	str	r5, [sp, #4]
 8080fec:	f7ff fe8a 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(PM_1_ZERO_MEM_ADDRESS, 0);
 8080ff0:	f00b ff68 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8080ff4:	4621      	mov	r1, r4
 8080ff6:	2014      	movs	r0, #20
 8080ff8:	9501      	str	r5, [sp, #4]
 8080ffa:	f7ff fe83 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(PM_25_ZERO_MEM_ADDRESS, 0);
 8080ffe:	f00b ff61 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8081002:	4621      	mov	r1, r4
 8081004:	201c      	movs	r0, #28
 8081006:	9501      	str	r5, [sp, #4]
 8081008:	f7ff fe7c 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(PM_10_ZERO_MEM_ADDRESS, 0);
 808100c:	f00b ff5a 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8081010:	4621      	mov	r1, r4
 8081012:	2024      	movs	r0, #36	; 0x24
 8081014:	9501      	str	r5, [sp, #4]
 8081016:	f7ff fe75 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(TEMP_ZERO_MEM_ADDRESS, 0);
 808101a:	f00b ff53 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 808101e:	4621      	mov	r1, r4
 8081020:	202c      	movs	r0, #44	; 0x2c
 8081022:	9501      	str	r5, [sp, #4]
 8081024:	f7ff fe6e 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(PRESSURE_ZERO_MEM_ADDRESS, 0);
 8081028:	f00b ff4c 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 808102c:	4621      	mov	r1, r4
 808102e:	2034      	movs	r0, #52	; 0x34
 8081030:	9501      	str	r5, [sp, #4]
 8081032:	f7ff fe67 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(RH_ZERO_MEM_ADDRESS, 0);
 8081036:	f00b ff45 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 808103a:	4621      	mov	r1, r4
 808103c:	203c      	movs	r0, #60	; 0x3c
 808103e:	9501      	str	r5, [sp, #4]
 8081040:	f7ff fe60 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>

    EEPROM.put(SERIAL_CELLULAR_EN_MEM_ADDRESS, 0);
 8081044:	f00b ff3e 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8081048:	4621      	mov	r1, r4
 808104a:	2044      	movs	r0, #68	; 0x44
 808104c:	9501      	str	r5, [sp, #4]
 808104e:	f7ff fe59 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, 0);
 8081052:	f00b ff37 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8081056:	4621      	mov	r1, r4
 8081058:	2048      	movs	r0, #72	; 0x48
 808105a:	9501      	str	r5, [sp, #4]
 808105c:	f7ff fe52 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(OZONE_EN_MEM_ADDRESS, 0);
 8081060:	f00b ff30 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8081064:	4621      	mov	r1, r4
 8081066:	2058      	movs	r0, #88	; 0x58
 8081068:	9501      	str	r5, [sp, #4]
 808106a:	f7ff fe4b 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(VOC_EN_MEM_ADDRESS, voc_enabled);
 808106e:	f00b ff29 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8081072:	4941      	ldr	r1, [pc, #260]	; (8081178 <_Z20writeDefaultSettingsv+0x230>)
 8081074:	205c      	movs	r0, #92	; 0x5c
 8081076:	f7ff fe45 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(GAS_LOWER_LIMIT_MEM_ADDRESS, 1000);
 808107a:	f00b ff23 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 808107e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8081082:	4621      	mov	r1, r4
 8081084:	204c      	movs	r0, #76	; 0x4c
 8081086:	9301      	str	r3, [sp, #4]
 8081088:	f7ff fe3c 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(GAS_UPPER_LIMIT_MEM_ADDRESS, 10000);
 808108c:	f00b ff1a 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8081090:	f242 7310 	movw	r3, #10000	; 0x2710
 8081094:	4621      	mov	r1, r4
 8081096:	2050      	movs	r0, #80	; 0x50
 8081098:	9301      	str	r3, [sp, #4]
 808109a:	f7ff fe33 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(TIME_ZONE_MEM_ADDRESS, -7);
 808109e:	f00b ff11 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 80810a2:	4621      	mov	r1, r4
 80810a4:	f06f 0306 	mvn.w	r3, #6
 80810a8:	2054      	movs	r0, #84	; 0x54
 80810aa:	9301      	str	r3, [sp, #4]
 80810ac:	f7ff fe2a 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    Time.zone(tempValue);
 80810b0:	4b32      	ldr	r3, [pc, #200]	; (808117c <_Z20writeDefaultSettingsv+0x234>)
 80810b2:	6818      	ldr	r0, [r3, #0]
 80810b4:	f00c fe7e 	bl	808ddb4 <__aeabi_i2f>
 80810b8:	f00a fd0a 	bl	808bad0 <_ZN9TimeClass4zoneEf>
    EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, 0);
 80810bc:	f00b ff02 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 80810c0:	4621      	mov	r1, r4
 80810c2:	2060      	movs	r0, #96	; 0x60
 80810c4:	9501      	str	r5, [sp, #4]
 80810c6:	f7ff fe1d 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, 0);
 80810ca:	f00b fefb 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 80810ce:	4621      	mov	r1, r4
 80810d0:	4630      	mov	r0, r6
 80810d2:	9501      	str	r5, [sp, #4]
    EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, 1);
 80810d4:	2601      	movs	r6, #1
    EEPROM.put(GAS_LOWER_LIMIT_MEM_ADDRESS, 1000);
    EEPROM.put(GAS_UPPER_LIMIT_MEM_ADDRESS, 10000);
    EEPROM.put(TIME_ZONE_MEM_ADDRESS, -7);
    Time.zone(tempValue);
    EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, 0);
    EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, 0);
 80810d6:	f7ff fe15 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, 1);
 80810da:	f00b fef3 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 80810de:	4621      	mov	r1, r4
 80810e0:	2068      	movs	r0, #104	; 0x68
 80810e2:	9601      	str	r6, [sp, #4]
 80810e4:	f7ff fe0e 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(OZONE_A_OR_D_MEM_ADDRESS, 0);
 80810e8:	f00b feec 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 80810ec:	4621      	mov	r1, r4
 80810ee:	206c      	movs	r0, #108	; 0x6c
 80810f0:	9501      	str	r5, [sp, #4]
 80810f2:	f7ff fe07 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(OZONE_OFFSET_MEM_ADDRESS,0);
 80810f6:	f00b fee5 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 80810fa:	4621      	mov	r1, r4
 80810fc:	2070      	movs	r0, #112	; 0x70
 80810fe:	9501      	str	r5, [sp, #4]
 8081100:	f7ff fe00 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(MEASUREMENTS_TO_AVG_MEM_ADDRESS, 1);
 8081104:	f00b fede 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8081108:	4621      	mov	r1, r4
 808110a:	2074      	movs	r0, #116	; 0x74
 808110c:	9601      	str	r6, [sp, #4]
 808110e:	f7ff fdf9 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, 1);
 8081112:	f00b fed7 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8081116:	4621      	mov	r1, r4
 8081118:	2078      	movs	r0, #120	; 0x78
 808111a:	9601      	str	r6, [sp, #4]
 808111c:	f7ff fdf2 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(ABC_ENABLE_MEM_ADDRESS, 0);
 8081120:	f00b fed0 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8081124:	4621      	mov	r1, r4
 8081126:	207c      	movs	r0, #124	; 0x7c
 8081128:	9501      	str	r5, [sp, #4]
 808112a:	f7ff fdeb 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(HIH8120_ENABLE_MEM_ADDRESS, 1);
 808112e:	f00b fec9 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8081132:	4621      	mov	r1, r4
 8081134:	2080      	movs	r0, #128	; 0x80
 8081136:	9601      	str	r6, [sp, #4]
 8081138:	f7ff fde4 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(CO_SOCKET_MEM_ADDRESS, 0);
 808113c:	f00b fec2 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8081140:	4621      	mov	r1, r4
 8081142:	2084      	movs	r0, #132	; 0x84
 8081144:	9501      	str	r5, [sp, #4]
 8081146:	f7ff fddd 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(GOOGLE_LOCATION_MEM_ADDRESS, 0);
 808114a:	f00b febb 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 808114e:	4621      	mov	r1, r4
 8081150:	2088      	movs	r0, #136	; 0x88
 8081152:	9501      	str	r5, [sp, #4]
 8081154:	f7ff fdd6 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(SENSIBLEIOT_ENABLE_MEM_ADDRESS, 0);
 8081158:	f00b feb4 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 808115c:	4621      	mov	r1, r4
 808115e:	208c      	movs	r0, #140	; 0x8c
 8081160:	9501      	str	r5, [sp, #4]
 8081162:	f7ff fdcf 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, 0);
 8081166:	f00b fead 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 808116a:	4621      	mov	r1, r4
 808116c:	2090      	movs	r0, #144	; 0x90
 808116e:	9501      	str	r5, [sp, #4]
 8081170:	f7ff fdc8 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
}
 8081174:	b002      	add	sp, #8
 8081176:	bd70      	pop	{r4, r5, r6, pc}
 8081178:	20000f98 	.word	0x20000f98
 808117c:	20000fc8 	.word	0x20000fc8

08081180 <_Z14readStoredVarsv>:
    }else{
        return -1;
    }
}
//read all eeprom stored variables
void readStoredVars(void){
 8081180:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    //just changing the rh calibration for temporary!! -- remove me!!
    //these values were determined by John Birks from 2019 cdphe study at la casa in denver February 2019



    EEPROM.get(DEVICE_ID_MEM_ADDRESS, DEVICE_id);
 8081184:	4cb6      	ldr	r4, [pc, #728]	; (8081460 <_Z14readStoredVarsv+0x2e0>)
 8081186:	f00b fe9d 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 808118a:	4621      	mov	r1, r4
 808118c:	2000      	movs	r0, #0
 808118e:	f7ff fdd8 	bl	8080d42 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    if(DEVICE_id == -1){
 8081192:	6823      	ldr	r3, [r4, #0]
 8081194:	3301      	adds	r3, #1
 8081196:	d104      	bne.n	80811a2 <_Z14readStoredVarsv+0x22>
        DEVICE_id = 1555;
 8081198:	f240 6313 	movw	r3, #1555	; 0x613
 808119c:	6023      	str	r3, [r4, #0]
        writeDefaultSettings();
 808119e:	f7ff fed3 	bl	8080f48 <_Z20writeDefaultSettingsv>
    }

    EEPROM.get(CO2_SLOPE_MEM_ADDRESS, tempValue);
 80811a2:	f00b fe8f 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 80811a6:	a901      	add	r1, sp, #4
 80811a8:	2008      	movs	r0, #8
 80811aa:	f7ff fdca 	bl	8080d42 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    CO2_slope = tempValue;
    CO2_slope /= 100;
 80811ae:	9801      	ldr	r0, [sp, #4]
 80811b0:	f00c fe00 	bl	808ddb4 <__aeabi_i2f>
 80811b4:	49ab      	ldr	r1, [pc, #684]	; (8081464 <_Z14readStoredVarsv+0x2e4>)
 80811b6:	f00c ff05 	bl	808dfc4 <__aeabi_fdiv>
 80811ba:	f8df 9330 	ldr.w	r9, [pc, #816]	; 80814ec <_Z14readStoredVarsv+0x36c>
    EEPROM.get(CO_SLOPE_MEM_ADDRESS, tempValue);
    CO_slope = tempValue;
    CO_slope /= 100;
 80811be:	f8df 8330 	ldr.w	r8, [pc, #816]	; 80814f0 <_Z14readStoredVarsv+0x370>
        writeDefaultSettings();
    }

    EEPROM.get(CO2_SLOPE_MEM_ADDRESS, tempValue);
    CO2_slope = tempValue;
    CO2_slope /= 100;
 80811c2:	f8c9 0000 	str.w	r0, [r9]
    EEPROM.get(CO_SLOPE_MEM_ADDRESS, tempValue);
 80811c6:	f00b fe7d 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 80811ca:	a901      	add	r1, sp, #4
 80811cc:	2010      	movs	r0, #16
 80811ce:	f7ff fdb8 	bl	8080d42 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    CO_slope = tempValue;
    CO_slope /= 100;
 80811d2:	9801      	ldr	r0, [sp, #4]
 80811d4:	f00c fdee 	bl	808ddb4 <__aeabi_i2f>
 80811d8:	49a2      	ldr	r1, [pc, #648]	; (8081464 <_Z14readStoredVarsv+0x2e4>)
 80811da:	f00c fef3 	bl	808dfc4 <__aeabi_fdiv>
 80811de:	f8c8 0000 	str.w	r0, [r8]
    EEPROM.get(PM_1_SLOPE_MEM_ADDRESS, tempValue);
 80811e2:	f00b fe6f 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 80811e6:	a901      	add	r1, sp, #4
 80811e8:	2018      	movs	r0, #24
 80811ea:	f7ff fdaa 	bl	8080d42 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    PM_1_slope = tempValue;
    PM_1_slope /= 100;
 80811ee:	9801      	ldr	r0, [sp, #4]
 80811f0:	f00c fde0 	bl	808ddb4 <__aeabi_i2f>
 80811f4:	499b      	ldr	r1, [pc, #620]	; (8081464 <_Z14readStoredVarsv+0x2e4>)
 80811f6:	f00c fee5 	bl	808dfc4 <__aeabi_fdiv>
 80811fa:	4f9b      	ldr	r7, [pc, #620]	; (8081468 <_Z14readStoredVarsv+0x2e8>)
    EEPROM.get(PM_25_SLOPE_MEM_ADDRESS, tempValue);
    PM_25_slope = tempValue;
    PM_25_slope /= 100;
 80811fc:	4d9b      	ldr	r5, [pc, #620]	; (808146c <_Z14readStoredVarsv+0x2ec>)
    EEPROM.get(CO_SLOPE_MEM_ADDRESS, tempValue);
    CO_slope = tempValue;
    CO_slope /= 100;
    EEPROM.get(PM_1_SLOPE_MEM_ADDRESS, tempValue);
    PM_1_slope = tempValue;
    PM_1_slope /= 100;
 80811fe:	6038      	str	r0, [r7, #0]
    EEPROM.get(PM_25_SLOPE_MEM_ADDRESS, tempValue);
 8081200:	f00b fe60 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8081204:	a901      	add	r1, sp, #4
 8081206:	2020      	movs	r0, #32
 8081208:	f7ff fd9b 	bl	8080d42 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    PM_25_slope = tempValue;
    PM_25_slope /= 100;
 808120c:	9801      	ldr	r0, [sp, #4]
 808120e:	f00c fdd1 	bl	808ddb4 <__aeabi_i2f>
 8081212:	4994      	ldr	r1, [pc, #592]	; (8081464 <_Z14readStoredVarsv+0x2e4>)
 8081214:	f00c fed6 	bl	808dfc4 <__aeabi_fdiv>
 8081218:	6028      	str	r0, [r5, #0]
    EEPROM.get(PM_10_SLOPE_MEM_ADDRESS, tempValue);
 808121a:	f00b fe53 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 808121e:	a901      	add	r1, sp, #4
 8081220:	2028      	movs	r0, #40	; 0x28
 8081222:	f7ff fd8e 	bl	8080d42 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    PM_10_slope = tempValue;
    PM_10_slope /= 100;
 8081226:	9801      	ldr	r0, [sp, #4]
 8081228:	f00c fdc4 	bl	808ddb4 <__aeabi_i2f>
 808122c:	498d      	ldr	r1, [pc, #564]	; (8081464 <_Z14readStoredVarsv+0x2e4>)
 808122e:	f00c fec9 	bl	808dfc4 <__aeabi_fdiv>
 8081232:	4c8f      	ldr	r4, [pc, #572]	; (8081470 <_Z14readStoredVarsv+0x2f0>)
    EEPROM.get(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
    EEPROM.get(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
    EEPROM.get(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);
    EEPROM.get(CO_SOCKET_MEM_ADDRESS, CO_socket);
    EEPROM.get(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
    EEPROM.get(SENSIBLEIOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 8081234:	4e8f      	ldr	r6, [pc, #572]	; (8081474 <_Z14readStoredVarsv+0x2f4>)
    EEPROM.get(PM_25_SLOPE_MEM_ADDRESS, tempValue);
    PM_25_slope = tempValue;
    PM_25_slope /= 100;
    EEPROM.get(PM_10_SLOPE_MEM_ADDRESS, tempValue);
    PM_10_slope = tempValue;
    PM_10_slope /= 100;
 8081236:	6020      	str	r0, [r4, #0]
    EEPROM.get(TEMP_SLOPE_MEM_ADDRESS, tempValue);  //temperature
 8081238:	f00b fe44 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 808123c:	a901      	add	r1, sp, #4
 808123e:	2030      	movs	r0, #48	; 0x30
 8081240:	f7ff fd7f 	bl	8080d42 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    temp_slope = tempValue;
    temp_slope /= 100;
 8081244:	9801      	ldr	r0, [sp, #4]
 8081246:	f00c fdb5 	bl	808ddb4 <__aeabi_i2f>
 808124a:	4986      	ldr	r1, [pc, #536]	; (8081464 <_Z14readStoredVarsv+0x2e4>)
 808124c:	f00c feba 	bl	808dfc4 <__aeabi_fdiv>
 8081250:	4b89      	ldr	r3, [pc, #548]	; (8081478 <_Z14readStoredVarsv+0x2f8>)
 8081252:	6018      	str	r0, [r3, #0]
    EEPROM.get(PRESSURE_SLOPE_MEM_ADDRESS, tempValue);
 8081254:	f00b fe36 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8081258:	a901      	add	r1, sp, #4
 808125a:	2038      	movs	r0, #56	; 0x38
 808125c:	f7ff fd71 	bl	8080d42 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    pressure_slope = tempValue;
    pressure_slope /= 100;
 8081260:	9801      	ldr	r0, [sp, #4]
 8081262:	f00c fda7 	bl	808ddb4 <__aeabi_i2f>
 8081266:	497f      	ldr	r1, [pc, #508]	; (8081464 <_Z14readStoredVarsv+0x2e4>)
 8081268:	f00c feac 	bl	808dfc4 <__aeabi_fdiv>
 808126c:	4b83      	ldr	r3, [pc, #524]	; (808147c <_Z14readStoredVarsv+0x2fc>)
 808126e:	6018      	str	r0, [r3, #0]
    EEPROM.get(RH_SLOPE_MEM_ADDRESS, tempValue);
 8081270:	f00b fe28 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8081274:	a901      	add	r1, sp, #4
 8081276:	2040      	movs	r0, #64	; 0x40
 8081278:	f7ff fd63 	bl	8080d42 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    rh_slope = tempValue;
    rh_slope /= 100;
 808127c:	9801      	ldr	r0, [sp, #4]
 808127e:	f00c fd99 	bl	808ddb4 <__aeabi_i2f>
 8081282:	4978      	ldr	r1, [pc, #480]	; (8081464 <_Z14readStoredVarsv+0x2e4>)
 8081284:	f00c fe9e 	bl	808dfc4 <__aeabi_fdiv>
 8081288:	4b7d      	ldr	r3, [pc, #500]	; (8081480 <_Z14readStoredVarsv+0x300>)
 808128a:	6018      	str	r0, [r3, #0]

    EEPROM.get(CO2_ZERO_MEM_ADDRESS, CO2_zero);
 808128c:	f00b fe1a 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8081290:	497c      	ldr	r1, [pc, #496]	; (8081484 <_Z14readStoredVarsv+0x304>)
 8081292:	2004      	movs	r0, #4
 8081294:	f7ff fd55 	bl	8080d42 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(CO_ZERO_MEM_ADDRESS, CO_zero);
 8081298:	f00b fe14 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 808129c:	497a      	ldr	r1, [pc, #488]	; (8081488 <_Z14readStoredVarsv+0x308>)
 808129e:	200c      	movs	r0, #12
 80812a0:	f7ff fd4f 	bl	8080d42 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(PM_1_ZERO_MEM_ADDRESS, PM_1_zero);
 80812a4:	f00b fe0e 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 80812a8:	4978      	ldr	r1, [pc, #480]	; (808148c <_Z14readStoredVarsv+0x30c>)
 80812aa:	2014      	movs	r0, #20
 80812ac:	f7ff fd49 	bl	8080d42 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(PM_25_ZERO_MEM_ADDRESS, PM_25_zero);
 80812b0:	f00b fe08 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 80812b4:	4976      	ldr	r1, [pc, #472]	; (8081490 <_Z14readStoredVarsv+0x310>)
 80812b6:	201c      	movs	r0, #28
 80812b8:	f7ff fd43 	bl	8080d42 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(PM_10_ZERO_MEM_ADDRESS, PM_10_zero);
 80812bc:	f00b fe02 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 80812c0:	4974      	ldr	r1, [pc, #464]	; (8081494 <_Z14readStoredVarsv+0x314>)
 80812c2:	2024      	movs	r0, #36	; 0x24
 80812c4:	f7ff fd3d 	bl	8080d42 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(TEMP_ZERO_MEM_ADDRESS, temp_zero);
 80812c8:	f00b fdfc 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 80812cc:	4972      	ldr	r1, [pc, #456]	; (8081498 <_Z14readStoredVarsv+0x318>)
 80812ce:	202c      	movs	r0, #44	; 0x2c
 80812d0:	f7ff fd37 	bl	8080d42 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(PRESSURE_ZERO_MEM_ADDRESS, pressure_zero);
 80812d4:	f00b fdf6 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 80812d8:	4970      	ldr	r1, [pc, #448]	; (808149c <_Z14readStoredVarsv+0x31c>)
 80812da:	2034      	movs	r0, #52	; 0x34
 80812dc:	f7ff fd31 	bl	8080d42 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(RH_ZERO_MEM_ADDRESS, rh_zero);
 80812e0:	f00b fdf0 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 80812e4:	496e      	ldr	r1, [pc, #440]	; (80814a0 <_Z14readStoredVarsv+0x320>)
 80812e6:	203c      	movs	r0, #60	; 0x3c
 80812e8:	f7ff fd2b 	bl	8080d42 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>

    EEPROM.get(SERIAL_CELLULAR_EN_MEM_ADDRESS, serial_cellular_enabled);
 80812ec:	f00b fdea 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 80812f0:	496c      	ldr	r1, [pc, #432]	; (80814a4 <_Z14readStoredVarsv+0x324>)
 80812f2:	2044      	movs	r0, #68	; 0x44
 80812f4:	f7ff fd25 	bl	8080d42 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
 80812f8:	f00b fde4 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 80812fc:	496a      	ldr	r1, [pc, #424]	; (80814a8 <_Z14readStoredVarsv+0x328>)
 80812fe:	2048      	movs	r0, #72	; 0x48
 8081300:	f7ff fd1f 	bl	8080d42 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(OZONE_EN_MEM_ADDRESS, ozone_enabled);
 8081304:	f00b fdde 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8081308:	4968      	ldr	r1, [pc, #416]	; (80814ac <_Z14readStoredVarsv+0x32c>)
 808130a:	2058      	movs	r0, #88	; 0x58
 808130c:	f7ff fd19 	bl	8080d42 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(VOC_EN_MEM_ADDRESS, voc_enabled);
 8081310:	f00b fdd8 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8081314:	4966      	ldr	r1, [pc, #408]	; (80814b0 <_Z14readStoredVarsv+0x330>)
 8081316:	205c      	movs	r0, #92	; 0x5c
 8081318:	f7ff fd13 	bl	8080d42 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(GAS_LOWER_LIMIT_MEM_ADDRESS, gas_lower_limit);
 808131c:	f00b fdd2 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8081320:	4964      	ldr	r1, [pc, #400]	; (80814b4 <_Z14readStoredVarsv+0x334>)
 8081322:	204c      	movs	r0, #76	; 0x4c
 8081324:	f7ff fd0d 	bl	8080d42 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(GAS_UPPER_LIMIT_MEM_ADDRESS, gas_upper_limit);
 8081328:	f00b fdcc 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 808132c:	4962      	ldr	r1, [pc, #392]	; (80814b8 <_Z14readStoredVarsv+0x338>)
 808132e:	2050      	movs	r0, #80	; 0x50
 8081330:	f7ff fd07 	bl	8080d42 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(TIME_ZONE_MEM_ADDRESS, tempValue);
 8081334:	f00b fdc6 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8081338:	a901      	add	r1, sp, #4
 808133a:	2054      	movs	r0, #84	; 0x54
 808133c:	f7ff fd01 	bl	8080d42 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    Time.zone(tempValue);
 8081340:	9801      	ldr	r0, [sp, #4]
 8081342:	f00c fd37 	bl	808ddb4 <__aeabi_i2f>
 8081346:	f00a fbc3 	bl	808bad0 <_ZN9TimeClass4zoneEf>
    EEPROM.get(TEMPERATURE_UNITS_MEM_ADDRESS, temperature_units);
 808134a:	f00b fdbb 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 808134e:	495b      	ldr	r1, [pc, #364]	; (80814bc <_Z14readStoredVarsv+0x33c>)
 8081350:	2060      	movs	r0, #96	; 0x60
 8081352:	f7ff fcf6 	bl	8080d42 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(OUTPUT_PARTICLES_MEM_ADDRESS, output_only_particles);
 8081356:	f00b fdb5 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 808135a:	4959      	ldr	r1, [pc, #356]	; (80814c0 <_Z14readStoredVarsv+0x340>)
 808135c:	2064      	movs	r0, #100	; 0x64
 808135e:	f7ff fcf0 	bl	8080d42 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, new_temperature_sensor_enabled);
 8081362:	f00b fdaf 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8081366:	4957      	ldr	r1, [pc, #348]	; (80814c4 <_Z14readStoredVarsv+0x344>)
 8081368:	2068      	movs	r0, #104	; 0x68
 808136a:	f7ff fcea 	bl	8080d42 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(OZONE_A_OR_D_MEM_ADDRESS, ozone_analog_enabled);
 808136e:	f00b fda9 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8081372:	4955      	ldr	r1, [pc, #340]	; (80814c8 <_Z14readStoredVarsv+0x348>)
 8081374:	206c      	movs	r0, #108	; 0x6c
 8081376:	f7ff fce4 	bl	8080d42 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(OZONE_OFFSET_MEM_ADDRESS, ozone_offset);
 808137a:	f00b fda3 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 808137e:	4953      	ldr	r1, [pc, #332]	; (80814cc <_Z14readStoredVarsv+0x34c>)
 8081380:	2070      	movs	r0, #112	; 0x70
 8081382:	f7ff fcde 	bl	8080d42 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(MEASUREMENTS_TO_AVG_MEM_ADDRESS, measurements_to_average);
 8081386:	f00b fd9d 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 808138a:	4951      	ldr	r1, [pc, #324]	; (80814d0 <_Z14readStoredVarsv+0x350>)
 808138c:	2074      	movs	r0, #116	; 0x74
 808138e:	f7ff fcd8 	bl	8080d42 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
 8081392:	f00b fd97 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8081396:	494f      	ldr	r1, [pc, #316]	; (80814d4 <_Z14readStoredVarsv+0x354>)
 8081398:	2078      	movs	r0, #120	; 0x78
 808139a:	f7ff fcd2 	bl	8080d42 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 808139e:	f00b fd91 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 80813a2:	494d      	ldr	r1, [pc, #308]	; (80814d8 <_Z14readStoredVarsv+0x358>)
 80813a4:	207c      	movs	r0, #124	; 0x7c
 80813a6:	f7ff fccc 	bl	8080d42 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);
 80813aa:	f00b fd8b 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 80813ae:	494b      	ldr	r1, [pc, #300]	; (80814dc <_Z14readStoredVarsv+0x35c>)
 80813b0:	2080      	movs	r0, #128	; 0x80
 80813b2:	f7ff fcc6 	bl	8080d42 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(CO_SOCKET_MEM_ADDRESS, CO_socket);
 80813b6:	f00b fd85 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 80813ba:	4949      	ldr	r1, [pc, #292]	; (80814e0 <_Z14readStoredVarsv+0x360>)
 80813bc:	2084      	movs	r0, #132	; 0x84
 80813be:	f7ff fcc0 	bl	8080d42 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
 80813c2:	f00b fd7f 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 80813c6:	4947      	ldr	r1, [pc, #284]	; (80814e4 <_Z14readStoredVarsv+0x364>)
 80813c8:	2088      	movs	r0, #136	; 0x88
 80813ca:	f7ff fcba 	bl	8080d42 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(SENSIBLEIOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 80813ce:	f00b fd79 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 80813d2:	4631      	mov	r1, r6
 80813d4:	208c      	movs	r0, #140	; 0x8c
 80813d6:	f7ff fcb4 	bl	8080d42 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    sensible_iot_en = 1;  //for tim dye
 80813da:	2301      	movs	r3, #1
 80813dc:	6033      	str	r3, [r6, #0]
    EEPROM.get(CAR_TOPPER_POWER_MEM_ADDRESS, car_topper_power_en);
 80813de:	f00b fd71 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 80813e2:	4941      	ldr	r1, [pc, #260]	; (80814e8 <_Z14readStoredVarsv+0x368>)
 80813e4:	2090      	movs	r0, #144	; 0x90
 80813e6:	f7ff fcac 	bl	8080d42 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    

    if(sensible_iot_en){
 80813ea:	6833      	ldr	r3, [r6, #0]
 80813ec:	b113      	cbz	r3, 80813f4 <_Z14readStoredVarsv+0x274>
        Time.zone(0);       //use UTC if using sensible iot upload
 80813ee:	2000      	movs	r0, #0
 80813f0:	f00a fb6e 	bl	808bad0 <_ZN9TimeClass4zoneEf>

    //measurements_to_average = 5;
    if(measurements_to_average < 1 || measurements_to_average > 5000)
        measurements_to_average = 1;

    measurements_to_average = 5;        //forcing this for tim dye
 80813f4:	4b36      	ldr	r3, [pc, #216]	; (80814d0 <_Z14readStoredVarsv+0x350>)
 80813f6:	2205      	movs	r2, #5
 80813f8:	601a      	str	r2, [r3, #0]

    //check all values to make sure are within limits
    if(!CO2_slope)
 80813fa:	2100      	movs	r1, #0
 80813fc:	f8d9 0000 	ldr.w	r0, [r9]
 8081400:	f00c fec0 	bl	808e184 <__aeabi_fcmpeq>
 8081404:	b118      	cbz	r0, 808140e <_Z14readStoredVarsv+0x28e>
    {
        CO2_slope = 1;
 8081406:	4b39      	ldr	r3, [pc, #228]	; (80814ec <_Z14readStoredVarsv+0x36c>)
 8081408:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 808140c:	601a      	str	r2, [r3, #0]
    }
    if(!CO_slope)
 808140e:	2100      	movs	r1, #0
 8081410:	f8d8 0000 	ldr.w	r0, [r8]
 8081414:	f00c feb6 	bl	808e184 <__aeabi_fcmpeq>
 8081418:	b118      	cbz	r0, 8081422 <_Z14readStoredVarsv+0x2a2>
    {
        CO_slope = 1;
 808141a:	4b35      	ldr	r3, [pc, #212]	; (80814f0 <_Z14readStoredVarsv+0x370>)
 808141c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8081420:	601a      	str	r2, [r3, #0]
    }
    if(!PM_1_slope)
 8081422:	2100      	movs	r1, #0
 8081424:	6838      	ldr	r0, [r7, #0]
 8081426:	f00c fead 	bl	808e184 <__aeabi_fcmpeq>
 808142a:	b118      	cbz	r0, 8081434 <_Z14readStoredVarsv+0x2b4>
    {
        PM_1_slope = 1;
 808142c:	4b0e      	ldr	r3, [pc, #56]	; (8081468 <_Z14readStoredVarsv+0x2e8>)
 808142e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8081432:	601a      	str	r2, [r3, #0]
    }
    if(!PM_25_slope)
 8081434:	2100      	movs	r1, #0
 8081436:	6828      	ldr	r0, [r5, #0]
 8081438:	f00c fea4 	bl	808e184 <__aeabi_fcmpeq>
 808143c:	b118      	cbz	r0, 8081446 <_Z14readStoredVarsv+0x2c6>
    {
        PM_25_slope = 1;
 808143e:	4b0b      	ldr	r3, [pc, #44]	; (808146c <_Z14readStoredVarsv+0x2ec>)
 8081440:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8081444:	601a      	str	r2, [r3, #0]
    }
    if(!PM_10_slope)
 8081446:	2100      	movs	r1, #0
 8081448:	6820      	ldr	r0, [r4, #0]
 808144a:	f00c fe9b 	bl	808e184 <__aeabi_fcmpeq>
 808144e:	b118      	cbz	r0, 8081458 <_Z14readStoredVarsv+0x2d8>
    {
        PM_10_slope = 1;
 8081450:	4b07      	ldr	r3, [pc, #28]	; (8081470 <_Z14readStoredVarsv+0x2f0>)
 8081452:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8081456:	601a      	str	r2, [r3, #0]
    }
}
 8081458:	b003      	add	sp, #12
 808145a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808145e:	bf00      	nop
 8081460:	20000488 	.word	0x20000488
 8081464:	42c80000 	.word	0x42c80000
 8081468:	20000638 	.word	0x20000638
 808146c:	20000be8 	.word	0x20000be8
 8081470:	20000f28 	.word	0x20000f28
 8081474:	20000cdc 	.word	0x20000cdc
 8081478:	20000bf0 	.word	0x20000bf0
 808147c:	200005f8 	.word	0x200005f8
 8081480:	20000af8 	.word	0x20000af8
 8081484:	2000063c 	.word	0x2000063c
 8081488:	20000bf4 	.word	0x20000bf4
 808148c:	20000edc 	.word	0x20000edc
 8081490:	20000b88 	.word	0x20000b88
 8081494:	20000f10 	.word	0x20000f10
 8081498:	20000ee8 	.word	0x20000ee8
 808149c:	20000e40 	.word	0x20000e40
 80814a0:	20000b7c 	.word	0x20000b7c
 80814a4:	2000062c 	.word	0x2000062c
 80814a8:	20000f08 	.word	0x20000f08
 80814ac:	20000ec8 	.word	0x20000ec8
 80814b0:	20000f98 	.word	0x20000f98
 80814b4:	2000049c 	.word	0x2000049c
 80814b8:	20000490 	.word	0x20000490
 80814bc:	20000ac0 	.word	0x20000ac0
 80814c0:	20000bec 	.word	0x20000bec
 80814c4:	20000b84 	.word	0x20000b84
 80814c8:	20000f74 	.word	0x20000f74
 80814cc:	20000abc 	.word	0x20000abc
 80814d0:	20000efc 	.word	0x20000efc
 80814d4:	20000f88 	.word	0x20000f88
 80814d8:	20000ccc 	.word	0x20000ccc
 80814dc:	200005fc 	.word	0x200005fc
 80814e0:	20000b00 	.word	0x20000b00
 80814e4:	20000f80 	.word	0x20000f80
 80814e8:	20000624 	.word	0x20000624
 80814ec:	20000ecc 	.word	0x20000ecc
 80814f0:	200005f0 	.word	0x200005f0

080814f4 <_Z7echoGpsv>:
      air_quality_score = hum_score + gas_score;


}

void echoGps(){
 80814f4:	b510      	push	{r4, lr}
    char gps_byte = 0;
    while(!Serial.available()){
 80814f6:	f00b f8f7 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80814fa:	6803      	ldr	r3, [r0, #0]
 80814fc:	691b      	ldr	r3, [r3, #16]
 80814fe:	4798      	blx	r3
 8081500:	b990      	cbnz	r0, 8081528 <_Z7echoGpsv+0x34>
        if(Serial5.available() > 0){
 8081502:	f7ff fca1 	bl	8080e48 <_Z22__fetch_global_Serial5v>
 8081506:	6803      	ldr	r3, [r0, #0]
 8081508:	691b      	ldr	r3, [r3, #16]
 808150a:	4798      	blx	r3
 808150c:	2800      	cmp	r0, #0
 808150e:	ddf2      	ble.n	80814f6 <_Z7echoGpsv+0x2>
            gps_byte = Serial5.read();
 8081510:	f7ff fc9a 	bl	8080e48 <_Z22__fetch_global_Serial5v>
 8081514:	6803      	ldr	r3, [r0, #0]
 8081516:	695b      	ldr	r3, [r3, #20]
 8081518:	4798      	blx	r3
 808151a:	4604      	mov	r4, r0
            Serial.print(gps_byte);
 808151c:	f00b f8e4 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8081520:	b2e1      	uxtb	r1, r4
 8081522:	f00a f863 	bl	808b5ec <_ZN5Print5printEc>
 8081526:	e7e6      	b.n	80814f6 <_Z7echoGpsv+0x2>
 8081528:	bd10      	pop	{r4, pc}
	...

0808152c <_Z11printPacketPhh>:
    printPacket(packet, len);
}

// Print the packet specified to the PC serial in a hexadecimal form.
void printPacket(byte *packet, byte len)
{
 808152c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 808152e:	4606      	mov	r6, r0
 8081530:	460d      	mov	r5, r1
 8081532:	2400      	movs	r4, #0
    for (byte i = 0; i < len; i++)
    {
        sprintf(temp, "%.2X", packet[i]);
        Serial.print(temp);

        if (i != len - 1)
 8081534:	1e4f      	subs	r7, r1, #1
// Print the packet specified to the PC serial in a hexadecimal form.
void printPacket(byte *packet, byte len)
{
    char temp[3];

    for (byte i = 0; i < len; i++)
 8081536:	42ac      	cmp	r4, r5
 8081538:	d012      	beq.n	8081560 <_Z11printPacketPhh+0x34>
    {
        sprintf(temp, "%.2X", packet[i]);
 808153a:	5d32      	ldrb	r2, [r6, r4]
 808153c:	490b      	ldr	r1, [pc, #44]	; (808156c <_Z11printPacketPhh+0x40>)
 808153e:	a801      	add	r0, sp, #4
 8081540:	f009 fa70 	bl	808aa24 <sprintf>
        Serial.print(temp);
 8081544:	f00b f8d0 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8081548:	a901      	add	r1, sp, #4
 808154a:	f00a f84b 	bl	808b5e4 <_ZN5Print5printEPKc>

        if (i != len - 1)
 808154e:	42a7      	cmp	r7, r4
 8081550:	d004      	beq.n	808155c <_Z11printPacketPhh+0x30>
        {
            Serial.print(' ');
 8081552:	f00b f8c9 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8081556:	2120      	movs	r1, #32
 8081558:	f00a f848 	bl	808b5ec <_ZN5Print5printEc>
 808155c:	3401      	adds	r4, #1
// Print the packet specified to the PC serial in a hexadecimal form.
void printPacket(byte *packet, byte len)
{
    char temp[3];

    for (byte i = 0; i < len; i++)
 808155e:	e7ea      	b.n	8081536 <_Z11printPacketPhh+0xa>
        {
            Serial.print(' ');
        }
    }

    Serial.println();
 8081560:	f00b f8c2 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8081564:	f00a f845 	bl	808b5f2 <_ZN5Print7printlnEv>
}
 8081568:	b003      	add	sp, #12
 808156a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808156c:	080919cc 	.word	0x080919cc

08081570 <_Z10sendPacketPhh>:
    sendPacket(packet, sizeof(packet));
}

// Send the packet specified to the receiver.
void sendPacket(byte *packet, byte len)
{
 8081570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081572:	4604      	mov	r4, r0
 8081574:	460f      	mov	r7, r1
 8081576:	1e4e      	subs	r6, r1, #1
 8081578:	1e45      	subs	r5, r0, #1
 808157a:	4406      	add	r6, r0
    for (byte i = 0; i < len; i++)
 808157c:	42b5      	cmp	r5, r6
 808157e:	d007      	beq.n	8081590 <_Z10sendPacketPhh+0x20>
    {
        Serial5.write(packet[i]);
 8081580:	f7ff fc62 	bl	8080e48 <_Z22__fetch_global_Serial5v>
 8081584:	6803      	ldr	r3, [r0, #0]
 8081586:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 808158a:	689b      	ldr	r3, [r3, #8]
 808158c:	4798      	blx	r3
}

// Send the packet specified to the receiver.
void sendPacket(byte *packet, byte len)
{
    for (byte i = 0; i < len; i++)
 808158e:	e7f5      	b.n	808157c <_Z10sendPacketPhh+0xc>
    {
        Serial5.write(packet[i]);
    }

    printPacket(packet, len);
 8081590:	4639      	mov	r1, r7
 8081592:	4620      	mov	r0, r4
}
 8081594:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    for (byte i = 0; i < len; i++)
    {
        Serial5.write(packet[i]);
    }

    printPacket(packet, len);
 8081598:	f7ff bfc8 	b.w	808152c <_Z11printPacketPhh>

0808159c <_Z19enableContinuousGPSv>:

    sendPacket(packet, sizeof(packet));
}

void enableContinuousGPS()
{
 808159c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        0x00, // length
        0x00, // payload
        0x00, // payload
        0x1A, // CK_A
        0x83, // CK_B
    };
 808159e:	4a07      	ldr	r2, [pc, #28]	; (80815bc <_Z19enableContinuousGPSv+0x20>)
 80815a0:	ab01      	add	r3, sp, #4
 80815a2:	f852 0f0e 	ldr.w	r0, [r2, #14]!
 80815a6:	6851      	ldr	r1, [r2, #4]
 80815a8:	8912      	ldrh	r2, [r2, #8]
 80815aa:	c303      	stmia	r3!, {r0, r1}

    sendPacket(packet, sizeof(packet));
 80815ac:	210a      	movs	r1, #10
 80815ae:	a801      	add	r0, sp, #4
        0x00, // length
        0x00, // payload
        0x00, // payload
        0x1A, // CK_A
        0x83, // CK_B
    };
 80815b0:	801a      	strh	r2, [r3, #0]

    sendPacket(packet, sizeof(packet));
 80815b2:	f7ff ffdd 	bl	8081570 <_Z10sendPacketPhh>
}
 80815b6:	b005      	add	sp, #20
 80815b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80815bc:	080918bc 	.word	0x080918bc

080815c0 <_Z17enableLowPowerGPSv>:

void enableLowPowerGPS()
{
 80815c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        0x00, // length
        0x01, // payload
        0x00, // payload
        0x1A, // CK_A
        0x83, // CK_B
    };
 80815c2:	4a07      	ldr	r2, [pc, #28]	; (80815e0 <_Z17enableLowPowerGPSv+0x20>)
 80815c4:	ab01      	add	r3, sp, #4
 80815c6:	f852 0f18 	ldr.w	r0, [r2, #24]!
 80815ca:	6851      	ldr	r1, [r2, #4]
 80815cc:	8912      	ldrh	r2, [r2, #8]
 80815ce:	c303      	stmia	r3!, {r0, r1}

    sendPacket(packet, sizeof(packet));
 80815d0:	210a      	movs	r1, #10
 80815d2:	a801      	add	r0, sp, #4
        0x00, // length
        0x01, // payload
        0x00, // payload
        0x1A, // CK_A
        0x83, // CK_B
    };
 80815d4:	801a      	strh	r2, [r3, #0]

    sendPacket(packet, sizeof(packet));
 80815d6:	f7ff ffcb 	bl	8081570 <_Z10sendPacketPhh>
}
 80815da:	b005      	add	sp, #20
 80815dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80815e0:	080918bc 	.word	0x080918bc
 80815e4:	00000000 	.word	0x00000000

080815e8 <_Z15readTemperaturev>:
    }

    Serial.println();
}

float readTemperature(void){
 80815e8:	b538      	push	{r3, r4, r5, lr}
    float temperature = 0;
    if(hih8120_enabled){
 80815ea:	4b31      	ldr	r3, [pc, #196]	; (80816b0 <_Z15readTemperaturev+0xc8>)
 80815ec:	4d31      	ldr	r5, [pc, #196]	; (80816b4 <_Z15readTemperaturev+0xcc>)
 80815ee:	681b      	ldr	r3, [r3, #0]
 80815f0:	b1b3      	cbz	r3, 8081620 <_Z15readTemperaturev+0x38>
        //  convert humidity / temperature
        static float rawToHumidity(uint16_t raw) {
            return float(raw) / 16382;
        }
        static float rawToTemperature(uint16_t raw) {
            return (float(raw) / 16382) * 165 - 40;
 80815f2:	4b31      	ldr	r3, [pc, #196]	; (80816b8 <_Z15readTemperaturev+0xd0>)
 80815f4:	8958      	ldrh	r0, [r3, #10]
 80815f6:	f00c fbd9 	bl	808ddac <__aeabi_ui2f>
 80815fa:	4930      	ldr	r1, [pc, #192]	; (80816bc <_Z15readTemperaturev+0xd4>)
 80815fc:	f00c fce2 	bl	808dfc4 <__aeabi_fdiv>
 8081600:	492f      	ldr	r1, [pc, #188]	; (80816c0 <_Z15readTemperaturev+0xd8>)
 8081602:	f00c fc2b 	bl	808de5c <__aeabi_fmul>
 8081606:	492f      	ldr	r1, [pc, #188]	; (80816c4 <_Z15readTemperaturev+0xdc>)
 8081608:	f00c fb1e 	bl	808dc48 <__aeabi_fsub>
        temperature = hih.temperature();
        if(debugging_enabled){
 808160c:	682b      	ldr	r3, [r5, #0]
 808160e:	4604      	mov	r4, r0
 8081610:	2b00      	cmp	r3, #0
 8081612:	d035      	beq.n	8081680 <_Z15readTemperaturev+0x98>
            Serial.println("Temperature reading from HIH8120");
 8081614:	f00b f868 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8081618:	492b      	ldr	r1, [pc, #172]	; (80816c8 <_Z15readTemperaturev+0xe0>)
 808161a:	f009 fff6 	bl	808b60a <_ZN5Print7printlnEPKc>
 808161e:	e02f      	b.n	8081680 <_Z15readTemperaturev+0x98>
        }
    }else if(new_temperature_sensor_enabled){
 8081620:	4b2a      	ldr	r3, [pc, #168]	; (80816cc <_Z15readTemperaturev+0xe4>)
 8081622:	681b      	ldr	r3, [r3, #0]
 8081624:	b31b      	cbz	r3, 808166e <_Z15readTemperaturev+0x86>
        if(debugging_enabled){
 8081626:	682b      	ldr	r3, [r5, #0]
 8081628:	b123      	cbz	r3, 8081634 <_Z15readTemperaturev+0x4c>
            Serial.println("Temperature reading from TMP36");
 808162a:	f00b f85d 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808162e:	4928      	ldr	r1, [pc, #160]	; (80816d0 <_Z15readTemperaturev+0xe8>)
 8081630:	f009 ffeb 	bl	808b60a <_ZN5Print7printlnEPKc>
        }
        temperature = analogRead(A1);
 8081634:	200b      	movs	r0, #11
 8081636:	f00b fc00 	bl	808ce3a <analogRead>


        temperature *= VOLTS_PER_UNIT;
 808163a:	f00c fbbb 	bl	808ddb4 <__aeabi_i2f>
 808163e:	f00b ff63 	bl	808d508 <__aeabi_f2d>
 8081642:	a317      	add	r3, pc, #92	; (adr r3, 80816a0 <_Z15readTemperaturev+0xb8>)
 8081644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081648:	f00b ffb2 	bl	808d5b0 <__aeabi_dmul>
 808164c:	f00c faa8 	bl	808dba0 <__aeabi_d2f>

        temperature -= TMP36_OFFSET;
        temperature /= TMP36_VPDC;
 8081650:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8081654:	f00c faf8 	bl	808dc48 <__aeabi_fsub>
 8081658:	f00b ff56 	bl	808d508 <__aeabi_f2d>
 808165c:	a312      	add	r3, pc, #72	; (adr r3, 80816a8 <_Z15readTemperaturev+0xc0>)
 808165e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081662:	f00c f8cf 	bl	808d804 <__aeabi_ddiv>
 8081666:	f00c fa9b 	bl	808dba0 <__aeabi_d2f>
 808166a:	4604      	mov	r4, r0
 808166c:	e008      	b.n	8081680 <_Z15readTemperaturev+0x98>
    }else{
        if(debugging_enabled){
 808166e:	682b      	ldr	r3, [r5, #0]
 8081670:	b123      	cbz	r3, 808167c <_Z15readTemperaturev+0x94>
            Serial.println("Temperature reading from BME for Alphasense");
 8081672:	f00b f839 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8081676:	4917      	ldr	r1, [pc, #92]	; (80816d4 <_Z15readTemperaturev+0xec>)
 8081678:	f009 ffc7 	bl	808b60a <_ZN5Print7printlnEPKc>

          }
        temperature = bme.temperature;
 808167c:	4b16      	ldr	r3, [pc, #88]	; (80816d8 <_Z15readTemperaturev+0xf0>)
 808167e:	681c      	ldr	r4, [r3, #0]
    }
    //temperature *= 100;

    temperature *= temp_slope;
 8081680:	4b16      	ldr	r3, [pc, #88]	; (80816dc <_Z15readTemperaturev+0xf4>)
 8081682:	4620      	mov	r0, r4
 8081684:	6819      	ldr	r1, [r3, #0]
 8081686:	f00c fbe9 	bl	808de5c <__aeabi_fmul>
 808168a:	4604      	mov	r4, r0
    temperature += temp_zero;       //user input zero offset
 808168c:	4b14      	ldr	r3, [pc, #80]	; (80816e0 <_Z15readTemperaturev+0xf8>)

    return temperature;
 808168e:	6818      	ldr	r0, [r3, #0]
 8081690:	f00c fb90 	bl	808ddb4 <__aeabi_i2f>
 8081694:	4621      	mov	r1, r4
 8081696:	f00c fad9 	bl	808dc4c <__addsf3>
    //temperature = temperature +
}
 808169a:	bd38      	pop	{r3, r4, r5, pc}
 808169c:	f3af 8000 	nop.w
 80816a0:	eb1c432d 	.word	0xeb1c432d
 80816a4:	3f4a36e2 	.word	0x3f4a36e2
 80816a8:	47ae147b 	.word	0x47ae147b
 80816ac:	3f847ae1 	.word	0x3f847ae1
 80816b0:	200005fc 	.word	0x200005fc
 80816b4:	20000f08 	.word	0x20000f08
 80816b8:	20000ce0 	.word	0x20000ce0
 80816bc:	467ff800 	.word	0x467ff800
 80816c0:	43250000 	.word	0x43250000
 80816c4:	42200000 	.word	0x42200000
 80816c8:	080919d1 	.word	0x080919d1
 80816cc:	20000b84 	.word	0x20000b84
 80816d0:	080919f2 	.word	0x080919f2
 80816d4:	08091a11 	.word	0x08091a11
 80816d8:	20000b04 	.word	0x20000b04
 80816dc:	20000bf0 	.word	0x20000bf0
 80816e0:	20000ee8 	.word	0x20000ee8

080816e4 <_Z12readHumidityv>:

float readHumidity(void){
 80816e4:	b538      	push	{r3, r4, r5, lr}
    float humidity;
    if(hih8120_enabled){
 80816e6:	4b19      	ldr	r3, [pc, #100]	; (808174c <_Z12readHumidityv+0x68>)
 80816e8:	4d19      	ldr	r5, [pc, #100]	; (8081750 <_Z12readHumidityv+0x6c>)
 80816ea:	681b      	ldr	r3, [r3, #0]
 80816ec:	b183      	cbz	r3, 8081710 <_Z12readHumidityv+0x2c>
        humidity = hih.humidity();
        humidity *= 100;
 80816ee:	4b19      	ldr	r3, [pc, #100]	; (8081754 <_Z12readHumidityv+0x70>)
 80816f0:	8918      	ldrh	r0, [r3, #8]
 80816f2:	f00c fb5b 	bl	808ddac <__aeabi_ui2f>
 80816f6:	4918      	ldr	r1, [pc, #96]	; (8081758 <_Z12readHumidityv+0x74>)
 80816f8:	f00c fc64 	bl	808dfc4 <__aeabi_fdiv>
 80816fc:	4917      	ldr	r1, [pc, #92]	; (808175c <_Z12readHumidityv+0x78>)
 80816fe:	f00c fbad 	bl	808de5c <__aeabi_fmul>
        if(debugging_enabled){
 8081702:	682b      	ldr	r3, [r5, #0]

float readHumidity(void){
    float humidity;
    if(hih8120_enabled){
        humidity = hih.humidity();
        humidity *= 100;
 8081704:	4604      	mov	r4, r0
        if(debugging_enabled){
 8081706:	b163      	cbz	r3, 8081722 <_Z12readHumidityv+0x3e>
            Serial.println("Humidity reading from HIH8120");
 8081708:	f00a ffee 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808170c:	4914      	ldr	r1, [pc, #80]	; (8081760 <_Z12readHumidityv+0x7c>)
 808170e:	e006      	b.n	808171e <_Z12readHumidityv+0x3a>
        }
    }else{
        humidity = bme.humidity;
 8081710:	4b14      	ldr	r3, [pc, #80]	; (8081764 <_Z12readHumidityv+0x80>)
 8081712:	689c      	ldr	r4, [r3, #8]
        if(debugging_enabled){
 8081714:	682b      	ldr	r3, [r5, #0]
 8081716:	b123      	cbz	r3, 8081722 <_Z12readHumidityv+0x3e>
            Serial.println("Humidity reading from BME");
 8081718:	f00a ffe6 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808171c:	4912      	ldr	r1, [pc, #72]	; (8081768 <_Z12readHumidityv+0x84>)
 808171e:	f009 ff74 	bl	808b60a <_ZN5Print7printlnEPKc>
        }
    }


    humidity *= rh_slope;
 8081722:	4b12      	ldr	r3, [pc, #72]	; (808176c <_Z12readHumidityv+0x88>)
 8081724:	4620      	mov	r0, r4
 8081726:	6819      	ldr	r1, [r3, #0]
 8081728:	f00c fb98 	bl	808de5c <__aeabi_fmul>
 808172c:	4604      	mov	r4, r0
    humidity += rh_zero;       //user input zero offset
 808172e:	4b10      	ldr	r3, [pc, #64]	; (8081770 <_Z12readHumidityv+0x8c>)
 8081730:	6818      	ldr	r0, [r3, #0]
 8081732:	f00c fb3f 	bl	808ddb4 <__aeabi_i2f>
 8081736:	4621      	mov	r1, r4
 8081738:	f00c fa88 	bl	808dc4c <__addsf3>
    if(humidity > 100)
 808173c:	4907      	ldr	r1, [pc, #28]	; (808175c <_Z12readHumidityv+0x78>)
        }
    }


    humidity *= rh_slope;
    humidity += rh_zero;       //user input zero offset
 808173e:	4604      	mov	r4, r0
    if(humidity > 100)
 8081740:	f00c fd48 	bl	808e1d4 <__aeabi_fcmpgt>
 8081744:	b100      	cbz	r0, 8081748 <_Z12readHumidityv+0x64>
        humidity = 100;
 8081746:	4c05      	ldr	r4, [pc, #20]	; (808175c <_Z12readHumidityv+0x78>)
    return humidity;
    //temperature = temperature +
}
 8081748:	4620      	mov	r0, r4
 808174a:	bd38      	pop	{r3, r4, r5, pc}
 808174c:	200005fc 	.word	0x200005fc
 8081750:	20000f08 	.word	0x20000f08
 8081754:	20000ce0 	.word	0x20000ce0
 8081758:	467ff800 	.word	0x467ff800
 808175c:	42c80000 	.word	0x42c80000
 8081760:	08091a3d 	.word	0x08091a3d
 8081764:	20000b04 	.word	0x20000b04
 8081768:	08091a5b 	.word	0x08091a5b
 808176c:	20000af8 	.word	0x20000af8
 8081770:	20000b7c 	.word	0x20000b7c
 8081774:	00000000 	.word	0x00000000

08081778 <_Z12calculateAQIv>:
        }
    }

}

void calculateAQI(void){
 8081778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    //Calculate humidity contribution to IAQ index
        gas_reference = bme.gas_resistance/100;
 808177c:	4b74      	ldr	r3, [pc, #464]	; (8081950 <_Z12calculateAQIv+0x1d8>)
        }
    }

}

void calculateAQI(void){
 808177e:	b085      	sub	sp, #20
    //Calculate humidity contribution to IAQ index
        gas_reference = bme.gas_resistance/100;
 8081780:	68d8      	ldr	r0, [r3, #12]
 8081782:	4974      	ldr	r1, [pc, #464]	; (8081954 <_Z12calculateAQIv+0x1dc>)
 8081784:	f00c fc1e 	bl	808dfc4 <__aeabi_fdiv>
 8081788:	4c73      	ldr	r4, [pc, #460]	; (8081958 <_Z12calculateAQIv+0x1e0>)
 808178a:	6020      	str	r0, [r4, #0]
      float current_humidity = readHumidity();
 808178c:	f7ff ffaa 	bl	80816e4 <_Z12readHumidityv>
      if(debugging_enabled){
 8081790:	4b72      	ldr	r3, [pc, #456]	; (808195c <_Z12calculateAQIv+0x1e4>)
}

void calculateAQI(void){
    //Calculate humidity contribution to IAQ index
        gas_reference = bme.gas_resistance/100;
      float current_humidity = readHumidity();
 8081792:	4605      	mov	r5, r0
      if(debugging_enabled){
 8081794:	681a      	ldr	r2, [r3, #0]
 8081796:	46a0      	mov	r8, r4
 8081798:	469a      	mov	sl, r3
 808179a:	b192      	cbz	r2, 80817c2 <_Z12calculateAQIv+0x4a>
          Serial.printf("gas resistance: %1.0f, humidity: %1.2f\n\r", gas_reference, current_humidity);
 808179c:	f00a ffa4 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80817a0:	4604      	mov	r4, r0
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 80817a2:	4628      	mov	r0, r5
 80817a4:	f00b feb0 	bl	808d508 <__aeabi_f2d>
 80817a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80817ac:	f8d8 0000 	ldr.w	r0, [r8]
 80817b0:	f00b feaa 	bl	808d508 <__aeabi_f2d>
 80817b4:	4a6a      	ldr	r2, [pc, #424]	; (8081960 <_Z12calculateAQIv+0x1e8>)
 80817b6:	e9cd 0100 	strd	r0, r1, [sp]
 80817ba:	2100      	movs	r1, #0
 80817bc:	4620      	mov	r0, r4
 80817be:	f00a f859 	bl	808b874 <_ZN5Print11printf_implEbPKcz>

      }
      if (current_humidity >= 38 && current_humidity <= 42)
 80817c2:	4968      	ldr	r1, [pc, #416]	; (8081964 <_Z12calculateAQIv+0x1ec>)
 80817c4:	4628      	mov	r0, r5
 80817c6:	f00c fcfb 	bl	808e1c0 <__aeabi_fcmpge>
 80817ca:	4c67      	ldr	r4, [pc, #412]	; (8081968 <_Z12calculateAQIv+0x1f0>)
 80817cc:	b138      	cbz	r0, 80817de <_Z12calculateAQIv+0x66>
 80817ce:	4967      	ldr	r1, [pc, #412]	; (808196c <_Z12calculateAQIv+0x1f4>)
 80817d0:	4628      	mov	r0, r5
 80817d2:	f00c fceb 	bl	808e1ac <__aeabi_fcmple>
 80817d6:	b110      	cbz	r0, 80817de <_Z12calculateAQIv+0x66>
        hum_score = 0.25*100; // Humidity +/-5% around optimum
 80817d8:	4b65      	ldr	r3, [pc, #404]	; (8081970 <_Z12calculateAQIv+0x1f8>)
 80817da:	6023      	str	r3, [r4, #0]
 80817dc:	e03d      	b.n	808185a <_Z12calculateAQIv+0xe2>
      else
      { //sub-optimal
        if (current_humidity < 38)
 80817de:	4961      	ldr	r1, [pc, #388]	; (8081964 <_Z12calculateAQIv+0x1ec>)
 80817e0:	4628      	mov	r0, r5
 80817e2:	f00c fcd9 	bl	808e198 <__aeabi_fcmplt>
 80817e6:	4b63      	ldr	r3, [pc, #396]	; (8081974 <_Z12calculateAQIv+0x1fc>)
 80817e8:	b1a0      	cbz	r0, 8081814 <_Z12calculateAQIv+0x9c>
          hum_score = 0.25/hum_reference*current_humidity*100;
 80817ea:	6818      	ldr	r0, [r3, #0]
 80817ec:	f00b fe8c 	bl	808d508 <__aeabi_f2d>
 80817f0:	4602      	mov	r2, r0
 80817f2:	460b      	mov	r3, r1
 80817f4:	2000      	movs	r0, #0
 80817f6:	4960      	ldr	r1, [pc, #384]	; (8081978 <_Z12calculateAQIv+0x200>)
 80817f8:	f00c f804 	bl	808d804 <__aeabi_ddiv>
 80817fc:	4606      	mov	r6, r0
 80817fe:	4628      	mov	r0, r5
 8081800:	460f      	mov	r7, r1
 8081802:	f00b fe81 	bl	808d508 <__aeabi_f2d>
 8081806:	4602      	mov	r2, r0
 8081808:	460b      	mov	r3, r1
 808180a:	4630      	mov	r0, r6
 808180c:	4639      	mov	r1, r7
 808180e:	f00b fecf 	bl	808d5b0 <__aeabi_dmul>
 8081812:	e01b      	b.n	808184c <_Z12calculateAQIv+0xd4>
        else
        {
          hum_score = ((-0.25/(100-hum_reference)*current_humidity)+0.416666)*100;
 8081814:	6819      	ldr	r1, [r3, #0]
 8081816:	484f      	ldr	r0, [pc, #316]	; (8081954 <_Z12calculateAQIv+0x1dc>)
 8081818:	f00c fa16 	bl	808dc48 <__aeabi_fsub>
 808181c:	f00b fe74 	bl	808d508 <__aeabi_f2d>
 8081820:	4602      	mov	r2, r0
 8081822:	460b      	mov	r3, r1
 8081824:	2000      	movs	r0, #0
 8081826:	4955      	ldr	r1, [pc, #340]	; (808197c <_Z12calculateAQIv+0x204>)
 8081828:	f00b ffec 	bl	808d804 <__aeabi_ddiv>
 808182c:	4606      	mov	r6, r0
 808182e:	4628      	mov	r0, r5
 8081830:	460f      	mov	r7, r1
 8081832:	f00b fe69 	bl	808d508 <__aeabi_f2d>
 8081836:	4602      	mov	r2, r0
 8081838:	460b      	mov	r3, r1
 808183a:	4630      	mov	r0, r6
 808183c:	4639      	mov	r1, r7
 808183e:	f00b feb7 	bl	808d5b0 <__aeabi_dmul>
 8081842:	a341      	add	r3, pc, #260	; (adr r3, 8081948 <_Z12calculateAQIv+0x1d0>)
 8081844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081848:	f00b fd00 	bl	808d24c <__adddf3>
 808184c:	2200      	movs	r2, #0
 808184e:	4b4c      	ldr	r3, [pc, #304]	; (8081980 <_Z12calculateAQIv+0x208>)
 8081850:	f00b feae 	bl	808d5b0 <__aeabi_dmul>
 8081854:	f00c f9a4 	bl	808dba0 <__aeabi_d2f>
 8081858:	6020      	str	r0, [r4, #0]
        }
      }

      //Calculate gas contribution to IAQ index

      if (gas_reference > gas_upper_limit) gas_reference = gas_upper_limit;
 808185a:	4b4a      	ldr	r3, [pc, #296]	; (8081984 <_Z12calculateAQIv+0x20c>)
 808185c:	681d      	ldr	r5, [r3, #0]
 808185e:	4628      	mov	r0, r5
 8081860:	f00c faa8 	bl	808ddb4 <__aeabi_i2f>
 8081864:	f8d8 1000 	ldr.w	r1, [r8]
 8081868:	4606      	mov	r6, r0
 808186a:	f00c fc95 	bl	808e198 <__aeabi_fcmplt>
 808186e:	b108      	cbz	r0, 8081874 <_Z12calculateAQIv+0xfc>
 8081870:	4b39      	ldr	r3, [pc, #228]	; (8081958 <_Z12calculateAQIv+0x1e0>)
 8081872:	601e      	str	r6, [r3, #0]
      if (gas_reference < gas_lower_limit) gas_reference = gas_lower_limit;
 8081874:	4b44      	ldr	r3, [pc, #272]	; (8081988 <_Z12calculateAQIv+0x210>)
 8081876:	f8d3 b000 	ldr.w	fp, [r3]
 808187a:	4658      	mov	r0, fp
 808187c:	f00c fa9a 	bl	808ddb4 <__aeabi_i2f>
 8081880:	f8d8 1000 	ldr.w	r1, [r8]
 8081884:	4606      	mov	r6, r0
 8081886:	f00c fca5 	bl	808e1d4 <__aeabi_fcmpgt>
 808188a:	b108      	cbz	r0, 8081890 <_Z12calculateAQIv+0x118>
 808188c:	4b32      	ldr	r3, [pc, #200]	; (8081958 <_Z12calculateAQIv+0x1e0>)
 808188e:	601e      	str	r6, [r3, #0]
      gas_score = (0.75/(gas_upper_limit-gas_lower_limit)*gas_reference -(gas_lower_limit*(0.75/(gas_upper_limit-gas_lower_limit))))*100;
 8081890:	ebcb 0005 	rsb	r0, fp, r5
 8081894:	f00b fe26 	bl	808d4e4 <__aeabi_i2d>
 8081898:	4602      	mov	r2, r0
 808189a:	460b      	mov	r3, r1
 808189c:	2000      	movs	r0, #0
 808189e:	493b      	ldr	r1, [pc, #236]	; (808198c <_Z12calculateAQIv+0x214>)
 80818a0:	f00b ffb0 	bl	808d804 <__aeabi_ddiv>
 80818a4:	4606      	mov	r6, r0
 80818a6:	460f      	mov	r7, r1
 80818a8:	f8d8 0000 	ldr.w	r0, [r8]
 80818ac:	f00b fe2c 	bl	808d508 <__aeabi_f2d>
 80818b0:	4632      	mov	r2, r6
 80818b2:	463b      	mov	r3, r7
 80818b4:	f00b fe7c 	bl	808d5b0 <__aeabi_dmul>
 80818b8:	4680      	mov	r8, r0
 80818ba:	4658      	mov	r0, fp
 80818bc:	4689      	mov	r9, r1
 80818be:	f00b fe11 	bl	808d4e4 <__aeabi_i2d>
 80818c2:	4632      	mov	r2, r6
 80818c4:	463b      	mov	r3, r7
 80818c6:	f00b fe73 	bl	808d5b0 <__aeabi_dmul>
 80818ca:	4602      	mov	r2, r0
 80818cc:	460b      	mov	r3, r1
 80818ce:	4640      	mov	r0, r8
 80818d0:	4649      	mov	r1, r9
 80818d2:	f00b fcb9 	bl	808d248 <__aeabi_dsub>
 80818d6:	4b2a      	ldr	r3, [pc, #168]	; (8081980 <_Z12calculateAQIv+0x208>)
 80818d8:	2200      	movs	r2, #0
 80818da:	f00b fe69 	bl	808d5b0 <__aeabi_dmul>
 80818de:	f00c f95f 	bl	808dba0 <__aeabi_d2f>
 80818e2:	4d2b      	ldr	r5, [pc, #172]	; (8081990 <_Z12calculateAQIv+0x218>)
      if(debugging_enabled){
 80818e4:	f8da 3000 	ldr.w	r3, [sl]

      //Calculate gas contribution to IAQ index

      if (gas_reference > gas_upper_limit) gas_reference = gas_upper_limit;
      if (gas_reference < gas_lower_limit) gas_reference = gas_lower_limit;
      gas_score = (0.75/(gas_upper_limit-gas_lower_limit)*gas_reference -(gas_lower_limit*(0.75/(gas_upper_limit-gas_lower_limit))))*100;
 80818e8:	6028      	str	r0, [r5, #0]
      if(debugging_enabled){
 80818ea:	b313      	cbz	r3, 8081932 <_Z12calculateAQIv+0x1ba>
        Serial.print("Gas score: ");
 80818ec:	f00a fefc 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80818f0:	4928      	ldr	r1, [pc, #160]	; (8081994 <_Z12calculateAQIv+0x21c>)
 80818f2:	f009 fe77 	bl	808b5e4 <_ZN5Print5printEPKc>
        Serial.println(gas_score);
 80818f6:	f00a fef7 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80818fa:	4607      	mov	r7, r0
 80818fc:	6828      	ldr	r0, [r5, #0]
 80818fe:	f00b fe03 	bl	808d508 <__aeabi_f2d>
 8081902:	2602      	movs	r6, #2
 8081904:	4602      	mov	r2, r0
 8081906:	460b      	mov	r3, r1
 8081908:	4638      	mov	r0, r7
 808190a:	9600      	str	r6, [sp, #0]
 808190c:	f009 ffa4 	bl	808b858 <_ZN5Print7printlnEdi>
        Serial.print("Humidity score: ");
 8081910:	f00a feea 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8081914:	4920      	ldr	r1, [pc, #128]	; (8081998 <_Z12calculateAQIv+0x220>)
 8081916:	f009 fe65 	bl	808b5e4 <_ZN5Print5printEPKc>
        Serial.println(hum_score);
 808191a:	f00a fee5 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808191e:	4607      	mov	r7, r0
 8081920:	6820      	ldr	r0, [r4, #0]
 8081922:	f00b fdf1 	bl	808d508 <__aeabi_f2d>
 8081926:	9600      	str	r6, [sp, #0]
 8081928:	4602      	mov	r2, r0
 808192a:	460b      	mov	r3, r1
 808192c:	4638      	mov	r0, r7
 808192e:	f009 ff93 	bl	808b858 <_ZN5Print7printlnEdi>
    }

      //Combine results for the final IAQ index value (0-100% where 100% is good quality air)
      air_quality_score = hum_score + gas_score;
 8081932:	6829      	ldr	r1, [r5, #0]
 8081934:	6820      	ldr	r0, [r4, #0]
 8081936:	f00c f989 	bl	808dc4c <__addsf3>
 808193a:	4b18      	ldr	r3, [pc, #96]	; (808199c <_Z12calculateAQIv+0x224>)
 808193c:	6018      	str	r0, [r3, #0]


}
 808193e:	b005      	add	sp, #20
 8081940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8081944:	f3af 8000 	nop.w
 8081948:	ded6ba8c 	.word	0xded6ba8c
 808194c:	3fdaaaa7 	.word	0x3fdaaaa7
 8081950:	20000b04 	.word	0x20000b04
 8081954:	42c80000 	.word	0x42c80000
 8081958:	20000494 	.word	0x20000494
 808195c:	20000f08 	.word	0x20000f08
 8081960:	08091a75 	.word	0x08091a75
 8081964:	42180000 	.word	0x42180000
 8081968:	20000af4 	.word	0x20000af4
 808196c:	42280000 	.word	0x42280000
 8081970:	41c80000 	.word	0x41c80000
 8081974:	20000498 	.word	0x20000498
 8081978:	3fd00000 	.word	0x3fd00000
 808197c:	bfd00000 	.word	0xbfd00000
 8081980:	40590000 	.word	0x40590000
 8081984:	20000490 	.word	0x20000490
 8081988:	2000049c 	.word	0x2000049c
 808198c:	3fe80000 	.word	0x3fe80000
 8081990:	20000f94 	.word	0x20000f94
 8081994:	08091a9e 	.word	0x08091a9e
 8081998:	08091aaa 	.word	0x08091aaa
 808199c:	20000f18 	.word	0x20000f18

080819a0 <_Z9readSoundv>:
        humidity = 100;
    return humidity;
    //temperature = temperature +
}
//read sound from
double readSound(void){
 80819a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int val;
    double sum = 0;
    float average = 0;
    for(int i=0; i< 10;i++){
        val = analogRead(sound_input);
 80819a2:	4d13      	ldr	r5, [pc, #76]	; (80819f0 <_Z9readSoundv+0x50>)
        humidity = 100;
    return humidity;
    //temperature = temperature +
}
//read sound from
double readSound(void){
 80819a4:	240a      	movs	r4, #10
    int val;
    double sum = 0;
 80819a6:	2600      	movs	r6, #0
 80819a8:	2700      	movs	r7, #0
    float average = 0;
    for(int i=0; i< 10;i++){
        val = analogRead(sound_input);
 80819aa:	8828      	ldrh	r0, [r5, #0]
 80819ac:	f00b fa45 	bl	808ce3a <analogRead>
        sum += val;
 80819b0:	f00b fd98 	bl	808d4e4 <__aeabi_i2d>
 80819b4:	4602      	mov	r2, r0
 80819b6:	460b      	mov	r3, r1
 80819b8:	4630      	mov	r0, r6
 80819ba:	4639      	mov	r1, r7
 80819bc:	f00b fc46 	bl	808d24c <__adddf3>
//read sound from
double readSound(void){
    int val;
    double sum = 0;
    float average = 0;
    for(int i=0; i< 10;i++){
 80819c0:	3c01      	subs	r4, #1
        val = analogRead(sound_input);
        sum += val;
 80819c2:	4606      	mov	r6, r0
 80819c4:	460f      	mov	r7, r1
//read sound from
double readSound(void){
    int val;
    double sum = 0;
    float average = 0;
    for(int i=0; i< 10;i++){
 80819c6:	d1f0      	bne.n	80819aa <_Z9readSoundv+0xa>
        val = analogRead(sound_input);
        sum += val;
        //Serial.print("Sound level: ");
        //Serial.println(val);
    }
    sum = sum/10;
 80819c8:	2200      	movs	r2, #0
 80819ca:	4b0a      	ldr	r3, [pc, #40]	; (80819f4 <_Z9readSoundv+0x54>)
 80819cc:	f00b ff1a 	bl	808d804 <__aeabi_ddiv>
    sum /= 4095;
 80819d0:	a305      	add	r3, pc, #20	; (adr r3, 80819e8 <_Z9readSoundv+0x48>)
 80819d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80819d6:	f00b ff15 	bl	808d804 <__aeabi_ddiv>
    sum *= 100;
    return sum;
 80819da:	2200      	movs	r2, #0
 80819dc:	4b06      	ldr	r3, [pc, #24]	; (80819f8 <_Z9readSoundv+0x58>)
 80819de:	f00b fde7 	bl	808d5b0 <__aeabi_dmul>
}
 80819e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80819e4:	f3af 8000 	nop.w
 80819e8:	00000000 	.word	0x00000000
 80819ec:	40affe00 	.word	0x40affe00
 80819f0:	2000048c 	.word	0x2000048c
 80819f4:	40240000 	.word	0x40240000
 80819f8:	40590000 	.word	0x40590000

080819fc <_Z7readCO2v>:
    CO_float += float_offset;

    return CO_float;
}

float readCO2(void){
 80819fc:	b538      	push	{r3, r4, r5, lr}
    //read CO2 values and apply calibration factors
    if(debugging_enabled){
 80819fe:	4b14      	ldr	r3, [pc, #80]	; (8081a50 <_Z7readCO2v+0x54>)
 8081a00:	681b      	ldr	r3, [r3, #0]
 8081a02:	b11b      	cbz	r3, 8081a0c <_Z7readCO2v+0x10>
        t6713.readStatus(1);
 8081a04:	2101      	movs	r1, #1
 8081a06:	4813      	ldr	r0, [pc, #76]	; (8081a54 <_Z7readCO2v+0x58>)
 8081a08:	f005 fd9c 	bl	8087544 <_ZN13Telaire_T671310readStatusEi>
    }
    CO2_float = t6713.readPPM();
 8081a0c:	4811      	ldr	r0, [pc, #68]	; (8081a54 <_Z7readCO2v+0x58>)
 8081a0e:	f005 fd6d 	bl	80874ec <_ZN13Telaire_T67137readPPMEv>
 8081a12:	f00c f9cf 	bl	808ddb4 <__aeabi_i2f>
 8081a16:	4c10      	ldr	r4, [pc, #64]	; (8081a58 <_Z7readCO2v+0x5c>)

    if(CO2_float == 0){
 8081a18:	2100      	movs	r1, #0
float readCO2(void){
    //read CO2 values and apply calibration factors
    if(debugging_enabled){
        t6713.readStatus(1);
    }
    CO2_float = t6713.readPPM();
 8081a1a:	6020      	str	r0, [r4, #0]
 8081a1c:	4605      	mov	r5, r0

    if(CO2_float == 0){
 8081a1e:	f00c fbb1 	bl	808e184 <__aeabi_fcmpeq>
 8081a22:	4b0e      	ldr	r3, [pc, #56]	; (8081a5c <_Z7readCO2v+0x60>)
 8081a24:	b110      	cbz	r0, 8081a2c <_Z7readCO2v+0x30>
        CO2_float = CO2_float_previous;
 8081a26:	681b      	ldr	r3, [r3, #0]
 8081a28:	6023      	str	r3, [r4, #0]
 8081a2a:	e000      	b.n	8081a2e <_Z7readCO2v+0x32>
    }else{
        CO2_float_previous = CO2_float;
 8081a2c:	601d      	str	r5, [r3, #0]
    }

    CO2_float *= CO2_slope;
 8081a2e:	4b0c      	ldr	r3, [pc, #48]	; (8081a60 <_Z7readCO2v+0x64>)
    CO2_float += CO2_zero;
 8081a30:	6820      	ldr	r0, [r4, #0]
 8081a32:	6819      	ldr	r1, [r3, #0]
 8081a34:	f00c fa12 	bl	808de5c <__aeabi_fmul>
 8081a38:	4b0a      	ldr	r3, [pc, #40]	; (8081a64 <_Z7readCO2v+0x68>)
 8081a3a:	4605      	mov	r5, r0
 8081a3c:	6818      	ldr	r0, [r3, #0]
 8081a3e:	f00c f9b9 	bl	808ddb4 <__aeabi_i2f>
 8081a42:	4601      	mov	r1, r0
 8081a44:	4628      	mov	r0, r5
 8081a46:	f00c f901 	bl	808dc4c <__addsf3>
 8081a4a:	6020      	str	r0, [r4, #0]
    
    return CO2_float;
}
 8081a4c:	bd38      	pop	{r3, r4, r5, pc}
 8081a4e:	bf00      	nop
 8081a50:	20000f08 	.word	0x20000f08
 8081a54:	20000f8c 	.word	0x20000f8c
 8081a58:	20000630 	.word	0x20000630
 8081a5c:	20000ee0 	.word	0x20000ee0
 8081a60:	20000ecc 	.word	0x20000ecc
 8081a64:	2000063c 	.word	0x2000063c

08081a68 <_Z10readAlpha2v>:

      }
      return alpha1_ppmraw;
}

float readAlpha2(void){
 8081a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081a6c:	b08b      	sub	sp, #44	; 0x2c
    float volt_half_Vref;
    float sensorCurrent; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent;
    float correctedCurrent;
    float alpha2_ppmraw;
    String alpha2_ppmRounded;
 8081a6e:	4994      	ldr	r1, [pc, #592]	; (8081cc0 <_Z10readAlpha2v+0x258>)
 8081a70:	a802      	add	r0, sp, #8
 8081a72:	f009 fba2 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
    if(debugging_enabled){
 8081a76:	4b93      	ldr	r3, [pc, #588]	; (8081cc4 <_Z10readAlpha2v+0x25c>)
 8081a78:	681a      	ldr	r2, [r3, #0]
 8081a7a:	469b      	mov	fp, r3
 8081a7c:	b122      	cbz	r2, 8081a88 <_Z10readAlpha2v+0x20>
        Serial.println("Start of alpha 2 read");
 8081a7e:	f00a fe33 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8081a82:	4991      	ldr	r1, [pc, #580]	; (8081cc8 <_Z10readAlpha2v+0x260>)
 8081a84:	f009 fdc1 	bl	808b60a <_ZN5Print7printlnEPKc>
    }
    digitalWrite(lmp91000_2_en, LOW);   //enable
 8081a88:	4c90      	ldr	r4, [pc, #576]	; (8081ccc <_Z10readAlpha2v+0x264>)
 8081a8a:	2100      	movs	r1, #0
 8081a8c:	8820      	ldrh	r0, [r4, #0]
 8081a8e:	f00b f9a8 	bl	808cde2 <digitalWrite>

    if(Wire.requestFrom(0x4A,1) == 0){
 8081a92:	f00b fa43 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8081a96:	2201      	movs	r2, #1
 8081a98:	214a      	movs	r1, #74	; 0x4a
 8081a9a:	f00b f807 	bl	808caac <_ZN7TwoWire11requestFromEii>
 8081a9e:	4627      	mov	r7, r4
 8081aa0:	b928      	cbnz	r0, 8081aae <_Z10readAlpha2v+0x46>
        Serial.println("Couldn't communicate with LMP91000 2");
 8081aa2:	f00a fe21 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8081aa6:	498a      	ldr	r1, [pc, #552]	; (8081cd0 <_Z10readAlpha2v+0x268>)
 8081aa8:	f009 fdaf 	bl	808b60a <_ZN5Print7printlnEPKc>
 8081aac:	e02e      	b.n	8081b0c <_Z10readAlpha2v+0xa4>
        //digitalWrite(red_status_led, HIGH);
        //delay(200);
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }else{
        half_Vref = ads2.readADC_SingleEnded(3); //half of Vref
 8081aae:	2103      	movs	r1, #3
 8081ab0:	4888      	ldr	r0, [pc, #544]	; (8081cd4 <_Z10readAlpha2v+0x26c>)
 8081ab2:	f005 fbb6 	bl	8087222 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
        volt_half_Vref = half_Vref * ads_bitmv;
 8081ab6:	f00c f97d 	bl	808ddb4 <__aeabi_i2f>
 8081aba:	4b87      	ldr	r3, [pc, #540]	; (8081cd8 <_Z10readAlpha2v+0x270>)
 8081abc:	6819      	ldr	r1, [r3, #0]
 8081abe:	f00c f9cd 	bl	808de5c <__aeabi_fmul>
        if(abs((volt_half_Vref)/1000 - 1.25) > 0.5){
 8081ac2:	4986      	ldr	r1, [pc, #536]	; (8081cdc <_Z10readAlpha2v+0x274>)
        //delay(200);
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }else{
        half_Vref = ads2.readADC_SingleEnded(3); //half of Vref
        volt_half_Vref = half_Vref * ads_bitmv;
 8081ac4:	4682      	mov	sl, r0
        if(abs((volt_half_Vref)/1000 - 1.25) > 0.5){
 8081ac6:	f00c fa7d 	bl	808dfc4 <__aeabi_fdiv>
 8081aca:	f00b fd1d 	bl	808d508 <__aeabi_f2d>
 8081ace:	2200      	movs	r2, #0
 8081ad0:	4b83      	ldr	r3, [pc, #524]	; (8081ce0 <_Z10readAlpha2v+0x278>)
 8081ad2:	4680      	mov	r8, r0
 8081ad4:	4689      	mov	r9, r1
 8081ad6:	f00b fbb7 	bl	808d248 <__aeabi_dsub>
 8081ada:	f00c f819 	bl	808db10 <__aeabi_d2iz>
 8081ade:	2800      	cmp	r0, #0
 8081ae0:	bfb8      	it	lt
 8081ae2:	4240      	neglt	r0, r0
 8081ae4:	f00b fcfe 	bl	808d4e4 <__aeabi_i2d>
 8081ae8:	2200      	movs	r2, #0
 8081aea:	4b7e      	ldr	r3, [pc, #504]	; (8081ce4 <_Z10readAlpha2v+0x27c>)
 8081aec:	f00b fff0 	bl	808dad0 <__aeabi_dcmpgt>
 8081af0:	b160      	cbz	r0, 8081b0c <_Z10readAlpha2v+0xa4>
          //operation_log += "AD1_VREF2,";
          //digitalWrite(red_status_led, HIGH);
          //delay(200);
          //digitalWrite(red_status_led, LOW);
          //delay(200);
          Serial.print("half vref2 ads1");
 8081af2:	f00a fdf9 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8081af6:	497c      	ldr	r1, [pc, #496]	; (8081ce8 <_Z10readAlpha2v+0x280>)
 8081af8:	f009 fd74 	bl	808b5e4 <_ZN5Print5printEPKc>
          Serial.println(volt_half_Vref/1000);
 8081afc:	f00a fdf4 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8081b00:	2302      	movs	r3, #2
 8081b02:	9300      	str	r3, [sp, #0]
 8081b04:	4642      	mov	r2, r8
 8081b06:	464b      	mov	r3, r9
 8081b08:	f009 fea6 	bl	808b858 <_ZN5Print7printlnEdi>

        }
    }

    if(lmp91000.read(LMP91000_STATUS_REG) == 0){
 8081b0c:	2100      	movs	r1, #0
 8081b0e:	4877      	ldr	r0, [pc, #476]	; (8081cec <_Z10readAlpha2v+0x284>)
 8081b10:	f005 fa31 	bl	8086f76 <_ZN8LMP910004readEh>
 8081b14:	b938      	cbnz	r0, 8081b26 <_Z10readAlpha2v+0xbe>
        if(debugging_enabled)
 8081b16:	f8db 3000 	ldr.w	r3, [fp]
 8081b1a:	b123      	cbz	r3, 8081b26 <_Z10readAlpha2v+0xbe>
            Serial.println("Status == 0 from LMP91000 2 status reg");
 8081b1c:	f00a fde4 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8081b20:	4973      	ldr	r1, [pc, #460]	; (8081cf0 <_Z10readAlpha2v+0x288>)
 8081b22:	f009 fd72 	bl	808b60a <_ZN5Print7printlnEPKc>
        //delay(200);
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }

    if(Wire.requestFrom(0x4A,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref)/1000 - 1.25) > 0.5)){
 8081b26:	f00b f9f9 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8081b2a:	2201      	movs	r2, #1
 8081b2c:	214a      	movs	r1, #74	; 0x4a
 8081b2e:	f00a ffbd 	bl	808caac <_ZN7TwoWire11requestFromEii>
 8081b32:	2800      	cmp	r0, #0
 8081b34:	f000 80ac 	beq.w	8081c90 <_Z10readAlpha2v+0x228>
 8081b38:	2100      	movs	r1, #0
 8081b3a:	486c      	ldr	r0, [pc, #432]	; (8081cec <_Z10readAlpha2v+0x284>)
 8081b3c:	f005 fa1b 	bl	8086f76 <_ZN8LMP910004readEh>
 8081b40:	2800      	cmp	r0, #0
 8081b42:	f000 80a5 	beq.w	8081c90 <_Z10readAlpha2v+0x228>
 8081b46:	4965      	ldr	r1, [pc, #404]	; (8081cdc <_Z10readAlpha2v+0x274>)
 8081b48:	4650      	mov	r0, sl
 8081b4a:	f00c fa3b 	bl	808dfc4 <__aeabi_fdiv>
 8081b4e:	f00b fcdb 	bl	808d508 <__aeabi_f2d>
 8081b52:	2200      	movs	r2, #0
 8081b54:	4b62      	ldr	r3, [pc, #392]	; (8081ce0 <_Z10readAlpha2v+0x278>)
 8081b56:	f00b fb77 	bl	808d248 <__aeabi_dsub>
 8081b5a:	f00b ffd9 	bl	808db10 <__aeabi_d2iz>
 8081b5e:	2800      	cmp	r0, #0
 8081b60:	bfb8      	it	lt
 8081b62:	4240      	neglt	r0, r0
 8081b64:	f00b fcbe 	bl	808d4e4 <__aeabi_i2d>
 8081b68:	2200      	movs	r2, #0
 8081b6a:	4b5e      	ldr	r3, [pc, #376]	; (8081ce4 <_Z10readAlpha2v+0x27c>)
 8081b6c:	f00b ffb0 	bl	808dad0 <__aeabi_dcmpgt>
 8081b70:	2800      	cmp	r0, #0
 8081b72:	f040 808d 	bne.w	8081c90 <_Z10readAlpha2v+0x228>
 8081b76:	4604      	mov	r4, r0
 8081b78:	4680      	mov	r8, r0
 8081b7a:	4681      	mov	r9, r0
 8081b7c:	250a      	movs	r5, #10
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
          A0_gas += ads2.readADC_SingleEnded(0); //gas
 8081b7e:	2100      	movs	r1, #0
 8081b80:	4854      	ldr	r0, [pc, #336]	; (8081cd4 <_Z10readAlpha2v+0x26c>)
 8081b82:	f005 fb4e 	bl	8087222 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          A1_aux += ads2.readADC_SingleEnded(1); //aux out
 8081b86:	2101      	movs	r1, #1
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
          A0_gas += ads2.readADC_SingleEnded(0); //gas
 8081b88:	4481      	add	r9, r0
          A1_aux += ads2.readADC_SingleEnded(1); //aux out
 8081b8a:	4852      	ldr	r0, [pc, #328]	; (8081cd4 <_Z10readAlpha2v+0x26c>)
 8081b8c:	f005 fb49 	bl	8087222 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          A2_temperature += ads2.readADC_SingleEnded(2); //temperature
 8081b90:	2102      	movs	r1, #2
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
          A0_gas += ads2.readADC_SingleEnded(0); //gas
          A1_aux += ads2.readADC_SingleEnded(1); //aux out
 8081b92:	4480      	add	r8, r0
          A2_temperature += ads2.readADC_SingleEnded(2); //temperature
 8081b94:	484f      	ldr	r0, [pc, #316]	; (8081cd4 <_Z10readAlpha2v+0x26c>)
 8081b96:	f005 fb44 	bl	8087222 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          half_Vref += ads2.readADC_SingleEnded(3); //half of Vref
 8081b9a:	2103      	movs	r1, #3
 8081b9c:	484d      	ldr	r0, [pc, #308]	; (8081cd4 <_Z10readAlpha2v+0x26c>)
 8081b9e:	f005 fb40 	bl	8087222 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
    }else{
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
 8081ba2:	3d01      	subs	r5, #1
          A0_gas += ads2.readADC_SingleEnded(0); //gas
          A1_aux += ads2.readADC_SingleEnded(1); //aux out
          A2_temperature += ads2.readADC_SingleEnded(2); //temperature
          half_Vref += ads2.readADC_SingleEnded(3); //half of Vref
 8081ba4:	4404      	add	r4, r0
    }else{
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
 8081ba6:	d1ea      	bne.n	8081b7e <_Z10readAlpha2v+0x116>
        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;

        volt0_gas = A0_gas * ads_bitmv;
 8081ba8:	4b4b      	ldr	r3, [pc, #300]	; (8081cd8 <_Z10readAlpha2v+0x270>)
        volt1_aux = A1_aux * ads_bitmv;
        volt2_temperature = A2_temperature * ads_bitmv;
        volt_half_Vref = half_Vref * ads_bitmv;
 8081baa:	250a      	movs	r5, #10
        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;

        volt0_gas = A0_gas * ads_bitmv;
 8081bac:	f8d3 a000 	ldr.w	sl, [r3]
        volt1_aux = A1_aux * ads_bitmv;
        volt2_temperature = A2_temperature * ads_bitmv;
        volt_half_Vref = half_Vref * ads_bitmv;
 8081bb0:	fb94 f0f5 	sdiv	r0, r4, r5
 8081bb4:	f00c f8fe 	bl	808ddb4 <__aeabi_i2f>
 8081bb8:	4651      	mov	r1, sl
 8081bba:	f00c f94f 	bl	808de5c <__aeabi_fmul>
 8081bbe:	4604      	mov	r4, r0

        sensorCurrent = (volt_half_Vref - volt0_gas) / (-1*120); // Working Electrode current in microamps (millivolts / Kohms)
 8081bc0:	fb99 f0f5 	sdiv	r0, r9, r5
 8081bc4:	f00c f8f6 	bl	808ddb4 <__aeabi_i2f>
 8081bc8:	4651      	mov	r1, sl
 8081bca:	f00c f947 	bl	808de5c <__aeabi_fmul>
 8081bce:	4601      	mov	r1, r0
 8081bd0:	4620      	mov	r0, r4
 8081bd2:	f00c f839 	bl	808dc48 <__aeabi_fsub>
 8081bd6:	4947      	ldr	r1, [pc, #284]	; (8081cf4 <_Z10readAlpha2v+0x28c>)
 8081bd8:	f00c f9f4 	bl	808dfc4 <__aeabi_fdiv>
 8081bdc:	4681      	mov	r9, r0
        auxCurrent = (volt_half_Vref - volt1_aux) / (-1*150);
 8081bde:	fb98 f0f5 	sdiv	r0, r8, r5
 8081be2:	f00c f8e7 	bl	808ddb4 <__aeabi_i2f>
 8081be6:	4651      	mov	r1, sl
 8081be8:	f00c f938 	bl	808de5c <__aeabi_fmul>
 8081bec:	4601      	mov	r1, r0
 8081bee:	4620      	mov	r0, r4
 8081bf0:	f00c f82a 	bl	808dc48 <__aeabi_fsub>
 8081bf4:	4940      	ldr	r1, [pc, #256]	; (8081cf8 <_Z10readAlpha2v+0x290>)
 8081bf6:	f00c f9e5 	bl	808dfc4 <__aeabi_fdiv>
 8081bfa:	4604      	mov	r4, r0
        //{1, -1, -0.76}, //CO-A4 (<=10C, 20C, >=30C)
        if(readTemperature() <= 15){
 8081bfc:	f7ff fcf4 	bl	80815e8 <_Z15readTemperaturev>
 8081c00:	493e      	ldr	r1, [pc, #248]	; (8081cfc <_Z10readAlpha2v+0x294>)
 8081c02:	f00c fad3 	bl	808e1ac <__aeabi_fcmple>
 8081c06:	b120      	cbz	r0, 8081c12 <_Z10readAlpha2v+0x1aa>
          correctedCurrent = ((sensorCurrent) - (auxCurrent));
 8081c08:	4621      	mov	r1, r4
 8081c0a:	4648      	mov	r0, r9
 8081c0c:	f00c f81c 	bl	808dc48 <__aeabi_fsub>
 8081c10:	e025      	b.n	8081c5e <_Z10readAlpha2v+0x1f6>
        }
        else if(readTemperature() <= 25){
 8081c12:	f7ff fce9 	bl	80815e8 <_Z15readTemperaturev>
 8081c16:	493a      	ldr	r1, [pc, #232]	; (8081d00 <_Z10readAlpha2v+0x298>)
 8081c18:	f00c fac8 	bl	808e1ac <__aeabi_fcmple>
 8081c1c:	b120      	cbz	r0, 8081c28 <_Z10readAlpha2v+0x1c0>
          correctedCurrent = ((sensorCurrent) - (-1)*(auxCurrent));
 8081c1e:	4621      	mov	r1, r4
 8081c20:	4648      	mov	r0, r9
 8081c22:	f00c f813 	bl	808dc4c <__addsf3>
 8081c26:	e01a      	b.n	8081c5e <_Z10readAlpha2v+0x1f6>
        }
        else if(readTemperature() > 25){
 8081c28:	f7ff fcde 	bl	80815e8 <_Z15readTemperaturev>
 8081c2c:	4934      	ldr	r1, [pc, #208]	; (8081d00 <_Z10readAlpha2v+0x298>)
 8081c2e:	f00c fad1 	bl	808e1d4 <__aeabi_fcmpgt>
 8081c32:	b1a8      	cbz	r0, 8081c60 <_Z10readAlpha2v+0x1f8>
          correctedCurrent = ((sensorCurrent) - (-0.76)*(auxCurrent));
 8081c34:	4620      	mov	r0, r4
 8081c36:	f00b fc67 	bl	808d508 <__aeabi_f2d>
 8081c3a:	a31d      	add	r3, pc, #116	; (adr r3, 8081cb0 <_Z10readAlpha2v+0x248>)
 8081c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081c40:	f00b fcb6 	bl	808d5b0 <__aeabi_dmul>
 8081c44:	4604      	mov	r4, r0
 8081c46:	4648      	mov	r0, r9
 8081c48:	460d      	mov	r5, r1
 8081c4a:	f00b fc5d 	bl	808d508 <__aeabi_f2d>
 8081c4e:	4602      	mov	r2, r0
 8081c50:	460b      	mov	r3, r1
 8081c52:	4620      	mov	r0, r4
 8081c54:	4629      	mov	r1, r5
 8081c56:	f00b faf9 	bl	808d24c <__adddf3>
 8081c5a:	f00b ffa1 	bl	808dba0 <__aeabi_d2f>
 8081c5e:	4606      	mov	r6, r0
        }
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 8081c60:	4630      	mov	r0, r6
 8081c62:	f00b fc51 	bl	808d508 <__aeabi_f2d>
 8081c66:	a314      	add	r3, pc, #80	; (adr r3, 8081cb8 <_Z10readAlpha2v+0x250>)
 8081c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081c6c:	f00b fdca 	bl	808d804 <__aeabi_ddiv>
 8081c70:	f00b ff96 	bl	808dba0 <__aeabi_d2f>
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
 8081c74:	2202      	movs	r2, #2
 8081c76:	4601      	mov	r1, r0
          correctedCurrent = ((sensorCurrent) - (-1)*(auxCurrent));
        }
        else if(readTemperature() > 25){
          correctedCurrent = ((sensorCurrent) - (-0.76)*(auxCurrent));
        }
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 8081c78:	4605      	mov	r5, r0
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
 8081c7a:	a806      	add	r0, sp, #24
 8081c7c:	f009 fb37 	bl	808b2ee <_ZN6StringC1Efi>
 8081c80:	a906      	add	r1, sp, #24
 8081c82:	a802      	add	r0, sp, #8
 8081c84:	f009 fae3 	bl	808b24e <_ZN6StringaSEOS_>
 8081c88:	a806      	add	r0, sp, #24
 8081c8a:	f009 fa4f 	bl	808b12c <_ZN6StringD1Ev>
 8081c8e:	e003      	b.n	8081c98 <_Z10readAlpha2v+0x230>
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }

    if(Wire.requestFrom(0x4A,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref)/1000 - 1.25) > 0.5)){
        alpha2_ppmRounded = "-99";
 8081c90:	491c      	ldr	r1, [pc, #112]	; (8081d04 <_Z10readAlpha2v+0x29c>)
 8081c92:	a802      	add	r0, sp, #8
 8081c94:	f009 fae3 	bl	808b25e <_ZN6StringaSEPKc>
        }
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
      }

      digitalWrite(lmp91000_2_en, HIGH);  //disable
 8081c98:	2101      	movs	r1, #1
 8081c9a:	8838      	ldrh	r0, [r7, #0]
 8081c9c:	f00b f8a1 	bl	808cde2 <digitalWrite>
    float volt_half_Vref;
    float sensorCurrent; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent;
    float correctedCurrent;
    float alpha2_ppmraw;
    String alpha2_ppmRounded;
 8081ca0:	a802      	add	r0, sp, #8
 8081ca2:	f009 fa43 	bl	808b12c <_ZN6StringD1Ev>

      Serial.print("Volt1 Aux:");
      Serial.print(volt1_aux);
      Serial.println("Volts");*/
      return alpha2_ppmraw;
}
 8081ca6:	4628      	mov	r0, r5
 8081ca8:	b00b      	add	sp, #44	; 0x2c
 8081caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8081cae:	bf00      	nop
 8081cb0:	851eb852 	.word	0x851eb852
 8081cb4:	3fe851eb 	.word	0x3fe851eb
 8081cb8:	d4fdf3b6 	.word	0xd4fdf3b6
 8081cbc:	3fd6e978 	.word	0x3fd6e978
 8081cc0:	08094308 	.word	0x08094308
 8081cc4:	20000f08 	.word	0x20000f08
 8081cc8:	08091abb 	.word	0x08091abb
 8081ccc:	200004dc 	.word	0x200004dc
 8081cd0:	08091ad1 	.word	0x08091ad1
 8081cd4:	20000ed6 	.word	0x20000ed6
 8081cd8:	200004b0 	.word	0x200004b0
 8081cdc:	447a0000 	.word	0x447a0000
 8081ce0:	3ff40000 	.word	0x3ff40000
 8081ce4:	3fe00000 	.word	0x3fe00000
 8081ce8:	08091af6 	.word	0x08091af6
 8081cec:	20000634 	.word	0x20000634
 8081cf0:	08091b06 	.word	0x08091b06
 8081cf4:	c2f00000 	.word	0xc2f00000
 8081cf8:	c3160000 	.word	0xc3160000
 8081cfc:	41700000 	.word	0x41700000
 8081d00:	41c80000 	.word	0x41c80000
 8081d04:	08091b2d 	.word	0x08091b2d

08081d08 <_Z12writeLogFile6String>:
    }else{
        O3_float = getEspOzoneData();
    }
}

void writeLogFile(String data){
 8081d08:	b530      	push	{r4, r5, lr}
   * \param[in] csPin SD card chip select pin.
   * \param[in] divisor SPI divisor.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, uint8_t divisor = 2) {
    return SdFatBase::begin(&m_spi, csPin, divisor);
 8081d0a:	491e      	ldr	r1, [pc, #120]	; (8081d84 <_Z12writeLogFile6String+0x7c>)
 8081d0c:	b085      	sub	sp, #20
 8081d0e:	4605      	mov	r5, r0
 8081d10:	2302      	movs	r3, #2
 8081d12:	220c      	movs	r2, #12
 8081d14:	f5a1 608e 	sub.w	r0, r1, #1136	; 0x470
 8081d18:	f7ff f8d0 	bl	8080ebc <_ZN9SdFatBase5beginEP9SdSpiBasehh>
  if (sd.begin(CS)){
 8081d1c:	b350      	cbz	r0, 8081d74 <_Z12writeLogFile6String+0x6c>
      Serial.println("Writing data to log file.");
 8081d1e:	f00a fce3 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8081d22:	4919      	ldr	r1, [pc, #100]	; (8081d88 <_Z12writeLogFile6String+0x80>)
 8081d24:	f009 fc71 	bl	808b60a <_ZN5Print7printlnEPKc>
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, uint8_t oflag = O_READ) {
    return open(m_cwd, path, oflag);
 8081d28:	4a18      	ldr	r2, [pc, #96]	; (8081d8c <_Z12writeLogFile6String+0x84>)
 8081d2a:	4919      	ldr	r1, [pc, #100]	; (8081d90 <_Z12writeLogFile6String+0x88>)
      log_file.open(logFileName, O_CREAT | O_APPEND | O_WRITE);
      if(log_file_started == 0){
 8081d2c:	4c19      	ldr	r4, [pc, #100]	; (8081d94 <_Z12writeLogFile6String+0x8c>)
 8081d2e:	2346      	movs	r3, #70	; 0x46
 8081d30:	6812      	ldr	r2, [r2, #0]
 8081d32:	6809      	ldr	r1, [r1, #0]
 8081d34:	4818      	ldr	r0, [pc, #96]	; (8081d98 <_Z12writeLogFile6String+0x90>)
 8081d36:	f006 fd86 	bl	8088846 <_ZN7FatFile4openEPS_PKch>
 8081d3a:	6823      	ldr	r3, [r4, #0]
 8081d3c:	b993      	cbnz	r3, 8081d64 <_Z12writeLogFile6String+0x5c>
          log_file.println("File Start timestamp: ");
 8081d3e:	4917      	ldr	r1, [pc, #92]	; (8081d9c <_Z12writeLogFile6String+0x94>)
 8081d40:	4817      	ldr	r0, [pc, #92]	; (8081da0 <_Z12writeLogFile6String+0x98>)
 8081d42:	f009 fc62 	bl	808b60a <_ZN5Print7printlnEPKc>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
 8081d46:	f009 ffbc 	bl	808bcc2 <_ZN9TimeClass3nowEv>
 8081d4a:	4601      	mov	r1, r0
 8081d4c:	4668      	mov	r0, sp
 8081d4e:	f009 fee5 	bl	808bb1c <_ZN9TimeClass7timeStrEl>
          log_file.println(Time.timeStr());
 8081d52:	9900      	ldr	r1, [sp, #0]
 8081d54:	4812      	ldr	r0, [pc, #72]	; (8081da0 <_Z12writeLogFile6String+0x98>)
 8081d56:	f009 fc58 	bl	808b60a <_ZN5Print7printlnEPKc>
 8081d5a:	4668      	mov	r0, sp
 8081d5c:	f009 f9e6 	bl	808b12c <_ZN6StringD1Ev>
          log_file_started = 1;
 8081d60:	2301      	movs	r3, #1
 8081d62:	6023      	str	r3, [r4, #0]
      }
      log_file.println(data);
 8081d64:	6829      	ldr	r1, [r5, #0]
 8081d66:	480e      	ldr	r0, [pc, #56]	; (8081da0 <_Z12writeLogFile6String+0x98>)
 8081d68:	f009 fc4f 	bl	808b60a <_ZN5Print7printlnEPKc>

      log_file.close();
 8081d6c:	480a      	ldr	r0, [pc, #40]	; (8081d98 <_Z12writeLogFile6String+0x90>)
 8081d6e:	f006 fd63 	bl	8088838 <_ZN7FatFile5closeEv>
 8081d72:	e004      	b.n	8081d7e <_Z12writeLogFile6String+0x76>
  }else{
    Serial.println("Unable to write to log file");
 8081d74:	f00a fcb8 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8081d78:	490a      	ldr	r1, [pc, #40]	; (8081da4 <_Z12writeLogFile6String+0x9c>)
 8081d7a:	f009 fc46 	bl	808b60a <_ZN5Print7printlnEPKc>
  }
}
 8081d7e:	b005      	add	sp, #20
 8081d80:	bd30      	pop	{r4, r5, pc}
 8081d82:	bf00      	nop
 8081d84:	20000ab4 	.word	0x20000ab4
 8081d88:	08091b31 	.word	0x08091b31
 8081d8c:	20000bb8 	.word	0x20000bb8
 8081d90:	20000fd8 	.word	0x20000fd8
 8081d94:	20000cd8 	.word	0x20000cd8
 8081d98:	20000fa4 	.word	0x20000fa4
 8081d9c:	08091b4b 	.word	0x08091b4b
 8081da0:	20000f9c 	.word	0x20000f9c
 8081da4:	08091b62 	.word	0x08091b62

08081da8 <_Z13readGpsStreamv>:
/*void disableGPS(void){
    Serial.println("Turning off gps");
    String disableString = "";
    Serial5.write()
}*/
void readGpsStream(void){
 8081da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081daa:	b08d      	sub	sp, #52	; 0x34
    String gps_sentence = "init";
 8081dac:	4993      	ldr	r1, [pc, #588]	; (8081ffc <_Z13readGpsStreamv+0x254>)
 8081dae:	4668      	mov	r0, sp
 8081db0:	f009 fa03 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
    int stringFound = 0;
    int error = 0;
    int comma_counter = 0;
    while(!stringFound && !error){
        gps_sentence = Serial5.readStringUntil('\r');
 8081db4:	f7ff f848 	bl	8080e48 <_Z22__fetch_global_Serial5v>
 8081db8:	220d      	movs	r2, #13
 8081dba:	4601      	mov	r1, r0
 8081dbc:	a808      	add	r0, sp, #32
 8081dbe:	f009 fe15 	bl	808b9ec <_ZN6Stream15readStringUntilEc>
 8081dc2:	a908      	add	r1, sp, #32
 8081dc4:	4668      	mov	r0, sp
 8081dc6:	f009 fa42 	bl	808b24e <_ZN6StringaSEOS_>
 8081dca:	a808      	add	r0, sp, #32
 8081dcc:	f009 f9ae 	bl	808b12c <_ZN6StringD1Ev>
        String prefix_string = gps_sentence.substring(4,7);
 8081dd0:	2307      	movs	r3, #7
 8081dd2:	2204      	movs	r2, #4
 8081dd4:	4669      	mov	r1, sp
 8081dd6:	a804      	add	r0, sp, #16
 8081dd8:	f009 fb8e 	bl	808b4f8 <_ZNK6String9substringEjj>
        if(prefix_string.equals("GGA")){
 8081ddc:	4988      	ldr	r1, [pc, #544]	; (8082000 <_Z13readGpsStreamv+0x258>)
 8081dde:	a804      	add	r0, sp, #16
 8081de0:	f009 fb40 	bl	808b464 <_ZNK6String6equalsEPKc>
 8081de4:	4605      	mov	r5, r0
 8081de6:	b9a8      	cbnz	r0, 8081e14 <_Z13readGpsStreamv+0x6c>
            //Serial.print("prefix string: ");
            //Serial.println(prefix_string);
            //Serial.print("String:");
            //Serial.println(gps_sentence);
            stringFound = 1;
        }else if(gps_sentence.equals("init")){
 8081de8:	4984      	ldr	r1, [pc, #528]	; (8081ffc <_Z13readGpsStreamv+0x254>)
 8081dea:	4668      	mov	r0, sp
 8081dec:	f009 fb3a 	bl	808b464 <_ZNK6String6equalsEPKc>
 8081df0:	b198      	cbz	r0, 8081e1a <_Z13readGpsStreamv+0x72>
            error = 1;
            Serial.println("Error reading GPS");
 8081df2:	f00a fc79 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8081df6:	4983      	ldr	r1, [pc, #524]	; (8082004 <_Z13readGpsStreamv+0x25c>)
 8081df8:	f009 fc07 	bl	808b60a <_ZN5Print7printlnEPKc>
            writeLogFile("Error reading GPS");
 8081dfc:	4981      	ldr	r1, [pc, #516]	; (8082004 <_Z13readGpsStreamv+0x25c>)
 8081dfe:	a808      	add	r0, sp, #32
 8081e00:	f009 f9db 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
 8081e04:	a808      	add	r0, sp, #32
 8081e06:	f7ff ff7f 	bl	8081d08 <_Z12writeLogFile6String>
 8081e0a:	a808      	add	r0, sp, #32
 8081e0c:	f009 f98e 	bl	808b12c <_ZN6StringD1Ev>
            //Serial.println(prefix_string);
            //Serial.print("String:");
            //Serial.println(gps_sentence);
            stringFound = 1;
        }else if(gps_sentence.equals("init")){
            error = 1;
 8081e10:	2401      	movs	r4, #1
 8081e12:	e004      	b.n	8081e1e <_Z13readGpsStreamv+0x76>
 8081e14:	2400      	movs	r4, #0
            //
            //Serial.print("prefix string: ");
            //Serial.println(prefix_string);
            //Serial.print("String:");
            //Serial.println(gps_sentence);
            stringFound = 1;
 8081e16:	2501      	movs	r5, #1
 8081e18:	e001      	b.n	8081e1e <_Z13readGpsStreamv+0x76>
 8081e1a:	4604      	mov	r4, r0
 8081e1c:	4605      	mov	r5, r0
    int stringFound = 0;
    int error = 0;
    int comma_counter = 0;
    while(!stringFound && !error){
        gps_sentence = Serial5.readStringUntil('\r');
        String prefix_string = gps_sentence.substring(4,7);
 8081e1e:	a804      	add	r0, sp, #16
 8081e20:	f009 f984 	bl	808b12c <_ZN6StringD1Ev>
void readGpsStream(void){
    String gps_sentence = "init";
    int stringFound = 0;
    int error = 0;
    int comma_counter = 0;
    while(!stringFound && !error){
 8081e24:	b915      	cbnz	r5, 8081e2c <_Z13readGpsStreamv+0x84>
 8081e26:	2c00      	cmp	r4, #0
 8081e28:	d0c4      	beq.n	8081db4 <_Z13readGpsStreamv+0xc>
 8081e2a:	e0e2      	b.n	8081ff2 <_Z13readGpsStreamv+0x24a>
                    }
                }else if(comma_counter == HORZONTAL_DILLUTION_INDEX){
                    if(gps_sentence.charAt(a+1)!=','){
                        String hdString = gps_sentence.substring(a+1,a+3);
                        gps.set_horizontalDillution(hdString);
                        status_word.status_int &= 0xFFF3;
 8081e2c:	4e76      	ldr	r6, [pc, #472]	; (8082008 <_Z13readGpsStreamv+0x260>)
 8081e2e:	2401      	movs	r4, #1
 8081e30:	4637      	mov	r7, r6
 8081e32:	2500      	movs	r5, #0
        //quality is after 6th comma
        //gps_sentence = String("$GNGGA,011545.00,3945.81586,N,10514.09384,W,1,08,1.28,1799.4,M,-21.5,M,,*40");
        //
        comma_counter = 0;

        for(int a = 0; a<gps_sentence.length(); a++){
 8081e34:	9b02      	ldr	r3, [sp, #8]
 8081e36:	1e61      	subs	r1, r4, #1
 8081e38:	4299      	cmp	r1, r3
 8081e3a:	f080 80da 	bcs.w	8081ff2 <_Z13readGpsStreamv+0x24a>
            if(gps_sentence.charAt(a) == ','){
 8081e3e:	4668      	mov	r0, sp
 8081e40:	f009 fb4a 	bl	808b4d8 <_ZNK6String6charAtEj>
 8081e44:	282c      	cmp	r0, #44	; 0x2c
 8081e46:	f040 80d2 	bne.w	8081fee <_Z13readGpsStreamv+0x246>
                if(comma_counter == TIME_FIELD_INDEX){
 8081e4a:	b9e5      	cbnz	r5, 8081e86 <_Z13readGpsStreamv+0xde>
                    if(gps_sentence.charAt(a+1)!=','){
 8081e4c:	4621      	mov	r1, r4
 8081e4e:	4668      	mov	r0, sp
 8081e50:	f009 fb42 	bl	808b4d8 <_ZNK6String6charAtEj>
 8081e54:	282c      	cmp	r0, #44	; 0x2c
 8081e56:	f000 80c9 	beq.w	8081fec <_Z13readGpsStreamv+0x244>
                        String utc_string = gps_sentence.substring(a+1,a+11);
 8081e5a:	f104 030a 	add.w	r3, r4, #10
 8081e5e:	4622      	mov	r2, r4
 8081e60:	4669      	mov	r1, sp
 8081e62:	a808      	add	r0, sp, #32
 8081e64:	f009 fb48 	bl	808b4f8 <_ZNK6String9substringEjj>
                        //Serial.print("GPS utc string: ");
                        if(debugging_enabled){
 8081e68:	4b68      	ldr	r3, [pc, #416]	; (808200c <_Z13readGpsStreamv+0x264>)
 8081e6a:	681b      	ldr	r3, [r3, #0]
 8081e6c:	b14b      	cbz	r3, 8081e82 <_Z13readGpsStreamv+0xda>
                            Serial.print("GPS utc string: ");
 8081e6e:	f00a fc3b 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8081e72:	4967      	ldr	r1, [pc, #412]	; (8082010 <_Z13readGpsStreamv+0x268>)
 8081e74:	f009 fbb6 	bl	808b5e4 <_ZN5Print5printEPKc>
                            Serial.println(utc_string);
 8081e78:	f00a fc36 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8081e7c:	9908      	ldr	r1, [sp, #32]
 8081e7e:	f009 fbc4 	bl	808b60a <_ZN5Print7printlnEPKc>

        for(int a = 0; a<gps_sentence.length(); a++){
            if(gps_sentence.charAt(a) == ','){
                if(comma_counter == TIME_FIELD_INDEX){
                    if(gps_sentence.charAt(a+1)!=','){
                        String utc_string = gps_sentence.substring(a+1,a+11);
 8081e82:	a808      	add	r0, sp, #32
 8081e84:	e0b0      	b.n	8081fe8 <_Z13readGpsStreamv+0x240>
                            Serial.println(utc_string);

                        }
                        //Serial.println(utc_string);
                    }
                }else if(comma_counter == LATITUDE_FIELD_INDEX){
 8081e86:	2d01      	cmp	r5, #1
 8081e88:	d12f      	bne.n	8081eea <_Z13readGpsStreamv+0x142>
                    if(gps_sentence.charAt(a+1)!=','){
 8081e8a:	4621      	mov	r1, r4
 8081e8c:	4668      	mov	r0, sp
 8081e8e:	f009 fb23 	bl	808b4d8 <_ZNK6String6charAtEj>
 8081e92:	282c      	cmp	r0, #44	; 0x2c
 8081e94:	f000 80aa 	beq.w	8081fec <_Z13readGpsStreamv+0x244>
                        String latitudeString = gps_sentence.substring(a+1,a+10);
 8081e98:	f104 0309 	add.w	r3, r4, #9
 8081e9c:	4622      	mov	r2, r4
 8081e9e:	4669      	mov	r1, sp
 8081ea0:	a804      	add	r0, sp, #16
 8081ea2:	f009 fb29 	bl	808b4f8 <_ZNK6String9substringEjj>
                        if(debugging_enabled){
 8081ea6:	4b59      	ldr	r3, [pc, #356]	; (808200c <_Z13readGpsStreamv+0x264>)
 8081ea8:	681b      	ldr	r3, [r3, #0]
 8081eaa:	b14b      	cbz	r3, 8081ec0 <_Z13readGpsStreamv+0x118>
                          Serial.print("Latitude string: ");
 8081eac:	f00a fc1c 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8081eb0:	4958      	ldr	r1, [pc, #352]	; (8082014 <_Z13readGpsStreamv+0x26c>)
 8081eb2:	f009 fb97 	bl	808b5e4 <_ZN5Print5printEPKc>
                          Serial.print(latitudeString);
 8081eb6:	f00a fc17 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8081eba:	9904      	ldr	r1, [sp, #16]
 8081ebc:	f009 fb92 	bl	808b5e4 <_ZN5Print5printEPKc>
                        }
                        //Serial.print("Latitude string: ");
                        //Serial.print(latitudeString);
                        //Serial.print(" ");
                        //Serial.println(gps_sentence.charAt(a+12));
                        gps.set_lat_decimal(latitudeString, gps_sentence.charAt(a+12));
 8081ec0:	a904      	add	r1, sp, #16
 8081ec2:	a808      	add	r0, sp, #32
 8081ec4:	f009 f9b8 	bl	808b238 <_ZN6StringC1ERKS_>
 8081ec8:	f104 010b 	add.w	r1, r4, #11
 8081ecc:	4668      	mov	r0, sp
 8081ece:	f009 fb03 	bl	808b4d8 <_ZNK6String6charAtEj>
 8081ed2:	a908      	add	r1, sp, #32
 8081ed4:	4602      	mov	r2, r0
 8081ed6:	4850      	ldr	r0, [pc, #320]	; (8082018 <_Z13readGpsStreamv+0x270>)
 8081ed8:	f005 f9ce 	bl	8087278 <_ZN3GPS15set_lat_decimalE6Stringc>
 8081edc:	a808      	add	r0, sp, #32
 8081ede:	f009 f925 	bl	808b12c <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF7;
 8081ee2:	8833      	ldrh	r3, [r6, #0]
 8081ee4:	f023 0308 	bic.w	r3, r3, #8
 8081ee8:	e069      	b.n	8081fbe <_Z13readGpsStreamv+0x216>
                        //Serial.print("Latitude decimal: ");
                        //Serial.println(gps.get_latitude(), 5);
                    }
                }else if(comma_counter == LONGITUDE_FIELD_INDEX){
 8081eea:	2d03      	cmp	r5, #3
 8081eec:	d128      	bne.n	8081f40 <_Z13readGpsStreamv+0x198>
                    if(gps_sentence.charAt(a+1)!=','){
 8081eee:	4621      	mov	r1, r4
 8081ef0:	4668      	mov	r0, sp
 8081ef2:	f009 faf1 	bl	808b4d8 <_ZNK6String6charAtEj>
 8081ef6:	282c      	cmp	r0, #44	; 0x2c
 8081ef8:	d078      	beq.n	8081fec <_Z13readGpsStreamv+0x244>
                        String longitudeString = gps_sentence.substring(a+1,a+11);
 8081efa:	f104 030a 	add.w	r3, r4, #10
 8081efe:	4622      	mov	r2, r4
 8081f00:	4669      	mov	r1, sp
 8081f02:	a804      	add	r0, sp, #16
 8081f04:	f009 faf8 	bl	808b4f8 <_ZNK6String9substringEjj>
                        if(debugging_enabled){
 8081f08:	4b40      	ldr	r3, [pc, #256]	; (808200c <_Z13readGpsStreamv+0x264>)
 8081f0a:	681b      	ldr	r3, [r3, #0]
 8081f0c:	b14b      	cbz	r3, 8081f22 <_Z13readGpsStreamv+0x17a>
                          Serial.print("longitude string: ");
 8081f0e:	f00a fbeb 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8081f12:	4942      	ldr	r1, [pc, #264]	; (808201c <_Z13readGpsStreamv+0x274>)
 8081f14:	f009 fb66 	bl	808b5e4 <_ZN5Print5printEPKc>
                          Serial.print(longitudeString);
 8081f18:	f00a fbe6 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8081f1c:	9904      	ldr	r1, [sp, #16]
 8081f1e:	f009 fb61 	bl	808b5e4 <_ZN5Print5printEPKc>
                        }
                        //Serial.print(" ");
                        //Serial.println(gps_sentence.charAt(a+13));
                        gps.set_long_decimal(longitudeString, gps_sentence.charAt(a+13));
 8081f22:	a904      	add	r1, sp, #16
 8081f24:	a808      	add	r0, sp, #32
 8081f26:	f009 f987 	bl	808b238 <_ZN6StringC1ERKS_>
 8081f2a:	f104 010c 	add.w	r1, r4, #12
 8081f2e:	4668      	mov	r0, sp
 8081f30:	f009 fad2 	bl	808b4d8 <_ZNK6String6charAtEj>
 8081f34:	a908      	add	r1, sp, #32
 8081f36:	4602      	mov	r2, r0
 8081f38:	4837      	ldr	r0, [pc, #220]	; (8082018 <_Z13readGpsStreamv+0x270>)
 8081f3a:	f005 f9e3 	bl	8087304 <_ZN3GPS16set_long_decimalE6Stringc>
 8081f3e:	e015      	b.n	8081f6c <_Z13readGpsStreamv+0x1c4>
                        //Serial.print("Longitude decimal: ");
                        //Serial.println(gps.get_longitude(), 5);
                    }
                }else if(comma_counter == NUMBER_OF_SATELLITES_INDEX){
 8081f40:	2d06      	cmp	r5, #6
 8081f42:	d117      	bne.n	8081f74 <_Z13readGpsStreamv+0x1cc>
                    if(gps_sentence.charAt(a+1)!=','){
 8081f44:	4621      	mov	r1, r4
 8081f46:	4668      	mov	r0, sp
 8081f48:	f009 fac6 	bl	808b4d8 <_ZNK6String6charAtEj>
 8081f4c:	282c      	cmp	r0, #44	; 0x2c
 8081f4e:	d04d      	beq.n	8081fec <_Z13readGpsStreamv+0x244>
                        String numberOfSatellitesString = gps_sentence.substring(a+1,a+3);
 8081f50:	1ca3      	adds	r3, r4, #2
 8081f52:	4622      	mov	r2, r4
 8081f54:	4669      	mov	r1, sp
 8081f56:	a804      	add	r0, sp, #16
 8081f58:	f009 face 	bl	808b4f8 <_ZNK6String9substringEjj>
                        gps.set_satellites(numberOfSatellitesString);
 8081f5c:	a904      	add	r1, sp, #16
 8081f5e:	a808      	add	r0, sp, #32
 8081f60:	f009 f96a 	bl	808b238 <_ZN6StringC1ERKS_>
 8081f64:	a908      	add	r1, sp, #32
 8081f66:	482c      	ldr	r0, [pc, #176]	; (8082018 <_Z13readGpsStreamv+0x270>)
 8081f68:	f005 fa12 	bl	8087390 <_ZN3GPS14set_satellitesE6String>
 8081f6c:	a808      	add	r0, sp, #32
 8081f6e:	f009 f8dd 	bl	808b12c <_ZN6StringD1Ev>
 8081f72:	e038      	b.n	8081fe6 <_Z13readGpsStreamv+0x23e>
                    }
                }else if(comma_counter == HORZONTAL_DILLUTION_INDEX){
 8081f74:	2d07      	cmp	r5, #7
 8081f76:	d139      	bne.n	8081fec <_Z13readGpsStreamv+0x244>
                    if(gps_sentence.charAt(a+1)!=','){
 8081f78:	4621      	mov	r1, r4
 8081f7a:	4668      	mov	r0, sp
 8081f7c:	f009 faac 	bl	808b4d8 <_ZNK6String6charAtEj>
 8081f80:	282c      	cmp	r0, #44	; 0x2c
 8081f82:	d033      	beq.n	8081fec <_Z13readGpsStreamv+0x244>
                        String hdString = gps_sentence.substring(a+1,a+3);
 8081f84:	1ca3      	adds	r3, r4, #2
 8081f86:	4622      	mov	r2, r4
 8081f88:	4669      	mov	r1, sp
 8081f8a:	a804      	add	r0, sp, #16
 8081f8c:	f009 fab4 	bl	808b4f8 <_ZNK6String9substringEjj>
                        gps.set_horizontalDillution(hdString);
 8081f90:	a904      	add	r1, sp, #16
 8081f92:	a808      	add	r0, sp, #32
 8081f94:	f009 f950 	bl	808b238 <_ZN6StringC1ERKS_>
 8081f98:	a908      	add	r1, sp, #32
 8081f9a:	481f      	ldr	r0, [pc, #124]	; (8082018 <_Z13readGpsStreamv+0x270>)
 8081f9c:	f005 fa00 	bl	80873a0 <_ZN3GPS23set_horizontalDillutionE6String>
 8081fa0:	a808      	add	r0, sp, #32
 8081fa2:	f009 f8c3 	bl	808b12c <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF3;
 8081fa6:	8833      	ldrh	r3, [r6, #0]
                        if(gps.get_horizontalDillution() < 2){
 8081fa8:	481b      	ldr	r0, [pc, #108]	; (8082018 <_Z13readGpsStreamv+0x270>)
                    }
                }else if(comma_counter == HORZONTAL_DILLUTION_INDEX){
                    if(gps_sentence.charAt(a+1)!=','){
                        String hdString = gps_sentence.substring(a+1,a+3);
                        gps.set_horizontalDillution(hdString);
                        status_word.status_int &= 0xFFF3;
 8081faa:	f023 030c 	bic.w	r3, r3, #12
 8081fae:	8033      	strh	r3, [r6, #0]
                        if(gps.get_horizontalDillution() < 2){
 8081fb0:	f005 fa0c 	bl	80873cc <_ZN3GPS23get_horizontalDillutionEv>
 8081fb4:	2801      	cmp	r0, #1
 8081fb6:	dc04      	bgt.n	8081fc2 <_Z13readGpsStreamv+0x21a>
                            status_word.status_int |= 0x000C;
 8081fb8:	8833      	ldrh	r3, [r6, #0]
 8081fba:	f043 030c 	orr.w	r3, r3, #12
 8081fbe:	8033      	strh	r3, [r6, #0]
 8081fc0:	e011      	b.n	8081fe6 <_Z13readGpsStreamv+0x23e>
                        }else if(gps.get_horizontalDillution() < 5){
 8081fc2:	4815      	ldr	r0, [pc, #84]	; (8082018 <_Z13readGpsStreamv+0x270>)
 8081fc4:	f005 fa02 	bl	80873cc <_ZN3GPS23get_horizontalDillutionEv>
 8081fc8:	2804      	cmp	r0, #4
 8081fca:	dc03      	bgt.n	8081fd4 <_Z13readGpsStreamv+0x22c>
                            status_word.status_int |= 0x0008;
 8081fcc:	883b      	ldrh	r3, [r7, #0]
 8081fce:	f043 0308 	orr.w	r3, r3, #8
 8081fd2:	e007      	b.n	8081fe4 <_Z13readGpsStreamv+0x23c>
                        }else if(gps.get_horizontalDillution() < 20){
 8081fd4:	4810      	ldr	r0, [pc, #64]	; (8082018 <_Z13readGpsStreamv+0x270>)
 8081fd6:	f005 f9f9 	bl	80873cc <_ZN3GPS23get_horizontalDillutionEv>
 8081fda:	2813      	cmp	r0, #19
 8081fdc:	dc03      	bgt.n	8081fe6 <_Z13readGpsStreamv+0x23e>
                            status_word.status_int |= 0x0004;
 8081fde:	883b      	ldrh	r3, [r7, #0]
 8081fe0:	f043 0304 	orr.w	r3, r3, #4
 8081fe4:	803b      	strh	r3, [r7, #0]
                        String numberOfSatellitesString = gps_sentence.substring(a+1,a+3);
                        gps.set_satellites(numberOfSatellitesString);
                    }
                }else if(comma_counter == HORZONTAL_DILLUTION_INDEX){
                    if(gps_sentence.charAt(a+1)!=','){
                        String hdString = gps_sentence.substring(a+1,a+3);
 8081fe6:	a804      	add	r0, sp, #16
 8081fe8:	f009 f8a0 	bl	808b12c <_ZN6StringD1Ev>
                        }


                    }
                }
                comma_counter++;
 8081fec:	3501      	adds	r5, #1
 8081fee:	3401      	adds	r4, #1
        //quality is after 6th comma
        //gps_sentence = String("$GNGGA,011545.00,3945.81586,N,10514.09384,W,1,08,1.28,1799.4,M,-21.5,M,,*40");
        //
        comma_counter = 0;

        for(int a = 0; a<gps_sentence.length(); a++){
 8081ff0:	e720      	b.n	8081e34 <_Z13readGpsStreamv+0x8c>
    Serial.println("Turning off gps");
    String disableString = "";
    Serial5.write()
}*/
void readGpsStream(void){
    String gps_sentence = "init";
 8081ff2:	4668      	mov	r0, sp
 8081ff4:	f009 f89a 	bl	808b12c <_ZN6StringD1Ev>
                comma_counter++;
            }
        }
    }

}
 8081ff8:	b00d      	add	sp, #52	; 0x34
 8081ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8081ffc:	08091b7e 	.word	0x08091b7e
 8082000:	08091b83 	.word	0x08091b83
 8082004:	08091b87 	.word	0x08091b87
 8082008:	20000f84 	.word	0x20000f84
 808200c:	20000f08 	.word	0x20000f08
 8082010:	08091b99 	.word	0x08091b99
 8082014:	08091baa 	.word	0x08091baa
 8082018:	20000d78 	.word	0x20000d78
 808201c:	08091bbc 	.word	0x08091bbc

08082020 <_Z12sendWifiInfov>:
          }
        esp_wifi_connection_status = 0;
    }
}
//send wifi information to the ESP
void sendWifiInfo(void){
 8082020:	b510      	push	{r4, lr}
 8082022:	b090      	sub	sp, #64	; 0x40

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 8082024:	491d      	ldr	r1, [pc, #116]	; (808209c <_Z12sendWifiInfov+0x7c>)
 8082026:	a808      	add	r0, sp, #32
 8082028:	f009 f8c7 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
    String wifiCredentials = "@!" + String(ssid) + "," + String(password) + "&";
 808202c:	491c      	ldr	r1, [pc, #112]	; (80820a0 <_Z12sendWifiInfov+0x80>)
 808202e:	a804      	add	r0, sp, #16
 8082030:	f009 f902 	bl	808b238 <_ZN6StringC1ERKS_>
 8082034:	a904      	add	r1, sp, #16
 8082036:	a808      	add	r0, sp, #32
 8082038:	f009 f9e2 	bl	808b400 <_ZplRK15StringSumHelperRK6String>
 808203c:	4919      	ldr	r1, [pc, #100]	; (80820a4 <_Z12sendWifiInfov+0x84>)
 808203e:	f009 f9eb 	bl	808b418 <_ZplRK15StringSumHelperPKc>
 8082042:	4604      	mov	r4, r0
 8082044:	4918      	ldr	r1, [pc, #96]	; (80820a8 <_Z12sendWifiInfov+0x88>)
 8082046:	a80c      	add	r0, sp, #48	; 0x30
 8082048:	f009 f8f6 	bl	808b238 <_ZN6StringC1ERKS_>
 808204c:	a90c      	add	r1, sp, #48	; 0x30
 808204e:	4620      	mov	r0, r4
 8082050:	f009 f9d6 	bl	808b400 <_ZplRK15StringSumHelperRK6String>
 8082054:	4915      	ldr	r1, [pc, #84]	; (80820ac <_Z12sendWifiInfov+0x8c>)
 8082056:	f009 f9df 	bl	808b418 <_ZplRK15StringSumHelperPKc>
 808205a:	4601      	mov	r1, r0
 808205c:	4668      	mov	r0, sp
 808205e:	f009 f8eb 	bl	808b238 <_ZN6StringC1ERKS_>
 8082062:	a80c      	add	r0, sp, #48	; 0x30
 8082064:	f009 f862 	bl	808b12c <_ZN6StringD1Ev>
 8082068:	a804      	add	r0, sp, #16
 808206a:	f009 f85f 	bl	808b12c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808206e:	a808      	add	r0, sp, #32
 8082070:	f009 f85c 	bl	808b12c <_ZN6StringD1Ev>
    Serial.println("Sending new wifi credentials to ESP");
 8082074:	f00a fb38 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082078:	490d      	ldr	r1, [pc, #52]	; (80820b0 <_Z12sendWifiInfov+0x90>)
 808207a:	f009 fac6 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial1.println(wifiCredentials);
 808207e:	f00a fc8b 	bl	808c998 <_Z22__fetch_global_Serial1v>
 8082082:	9900      	ldr	r1, [sp, #0]
 8082084:	f009 fac1 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("Success!");
 8082088:	f00a fb2e 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808208c:	4909      	ldr	r1, [pc, #36]	; (80820b4 <_Z12sendWifiInfov+0x94>)
 808208e:	f009 fabc 	bl	808b60a <_ZN5Print7printlnEPKc>
        esp_wifi_connection_status = 0;
    }
}
//send wifi information to the ESP
void sendWifiInfo(void){
    String wifiCredentials = "@!" + String(ssid) + "," + String(password) + "&";
 8082092:	4668      	mov	r0, sp
 8082094:	f009 f84a 	bl	808b12c <_ZN6StringD1Ev>
    Serial.println("Sending new wifi credentials to ESP");
    Serial1.println(wifiCredentials);
    Serial.println("Success!");
}
 8082098:	b010      	add	sp, #64	; 0x40
 808209a:	bd10      	pop	{r4, pc}
 808209c:	08091c4b 	.word	0x08091c4b
 80820a0:	20000614 	.word	0x20000614
 80820a4:	08093eda 	.word	0x08093eda
 80820a8:	200005e0 	.word	0x200005e0
 80820ac:	08091be6 	.word	0x08091be6
 80820b0:	08091c4e 	.word	0x08091c4e
 80820b4:	08091c72 	.word	0x08091c72

080820b8 <_Z10checkValuePcc>:
            char clearBuffer = Serial4.read();
            //Serial.print(clearBuffer);
        }
      }
}
char checkValue(char *thebuf, char leng)  {
 80820b8:	4602      	mov	r2, r0
 80820ba:	b530      	push	{r4, r5, lr}
    char receiveflag=0;
    int receiveSum=0;
 80820bc:	2300      	movs	r3, #0

    for(int i=0; i<(leng-2); i++) {
 80820be:	1e8d      	subs	r5, r1, #2
 80820c0:	1a14      	subs	r4, r2, r0
 80820c2:	42a5      	cmp	r5, r4
 80820c4:	dd03      	ble.n	80820ce <_Z10checkValuePcc+0x16>
      receiveSum=receiveSum+thebuf[i];
 80820c6:	f812 4b01 	ldrb.w	r4, [r2], #1
 80820ca:	4423      	add	r3, r4
}
char checkValue(char *thebuf, char leng)  {
    char receiveflag=0;
    int receiveSum=0;

    for(int i=0; i<(leng-2); i++) {
 80820cc:	e7f8      	b.n	80820c0 <_Z10checkValuePcc+0x8>
      receiveSum=receiveSum+thebuf[i];
    }
    receiveSum=receiveSum + 0x42;

    if(receiveSum == ((thebuf[leng-2]<<8)+thebuf[leng-1])) { //check the serial data
 80820ce:	4401      	add	r1, r0
      receiveSum = 0;
      receiveflag = 1;
    }
    return receiveflag;
 80820d0:	f811 0c02 	ldrb.w	r0, [r1, #-2]
 80820d4:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 80820d8:	3342      	adds	r3, #66	; 0x42
 80820da:	eb02 2000 	add.w	r0, r2, r0, lsl #8
}
 80820de:	1ac3      	subs	r3, r0, r3
 80820e0:	4258      	negs	r0, r3
 80820e2:	4158      	adcs	r0, r3
 80820e4:	bd30      	pop	{r4, r5, pc}

080820e6 <_Z13transmitPM2_5Pc>:
    int PM01Val;
    PM01Val=((thebuf[3]<<8) + thebuf[4]); //count PM1.0 value of the air detector module
    return PM01Val;
}
//transmit PM Value to PC
float transmitPM2_5(char *thebuf) {
 80820e6:	b508      	push	{r3, lr}
    float PM2_5Val;
    PM2_5Val=((thebuf[5]<<8) + thebuf[6]);//count PM2.5 value of the air detector module
    return PM2_5Val;
 80820e8:	7942      	ldrb	r2, [r0, #5]
 80820ea:	7980      	ldrb	r0, [r0, #6]
 80820ec:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 80820f0:	f00b fe60 	bl	808ddb4 <__aeabi_i2f>
}
 80820f4:	bd08      	pop	{r3, pc}
	...

080820f8 <_Z13readPlantowerv>:
    Serial.println(" C (");
    Serial.print(hih.temperature_Raw());
    Serial.println(")");*/
}
//read from plantower pms 5500
void readPlantower(void){
 80820f8:	b510      	push	{r4, lr}
    if(Serial4.find("B")){    //start to read when detect 0x42
 80820fa:	f7fe fe6b 	bl	8080dd4 <_Z22__fetch_global_Serial4v>
 80820fe:	491a      	ldr	r1, [pc, #104]	; (8082168 <_Z13readPlantowerv+0x70>)
 8082100:	f009 fc47 	bl	808b992 <_ZN6Stream4findEPc>
 8082104:	b310      	cbz	r0, 808214c <_Z13readPlantowerv+0x54>
        //if(debugging_enabled)
          //Serial.println("Found a B when reading plantower");
          Serial4.readBytes(buf,LENG);
 8082106:	4c19      	ldr	r4, [pc, #100]	; (808216c <_Z13readPlantowerv+0x74>)
 8082108:	f7fe fe64 	bl	8080dd4 <_Z22__fetch_global_Serial4v>
 808210c:	221f      	movs	r2, #31
 808210e:	4621      	mov	r1, r4
 8082110:	f009 fc42 	bl	808b998 <_ZN6Stream9readBytesEPcj>
          if(buf[0] == 0x4d){
 8082114:	7823      	ldrb	r3, [r4, #0]
 8082116:	2b4d      	cmp	r3, #77	; 0x4d
 8082118:	d124      	bne.n	8082164 <_Z13readPlantowerv+0x6c>
              if(checkValue(buf,LENG)){ //All units are ug/m^3
 808211a:	211f      	movs	r1, #31
 808211c:	4620      	mov	r0, r4
 808211e:	f7ff ffcb 	bl	80820b8 <_Z10checkValuePcc>
 8082122:	b1f8      	cbz	r0, 8082164 <_Z13readPlantowerv+0x6c>
                  //Serial.println("Value is good from pm buff");
                  PM01Value=transmitPM01(buf); //count PM1.0 value of the air detector module
 8082124:	78e2      	ldrb	r2, [r4, #3]
 8082126:	7923      	ldrb	r3, [r4, #4]
                  PM2_5Value=transmitPM2_5(buf);//count PM2.5 value of the air detector module
 8082128:	4620      	mov	r0, r4
          //Serial.println("Found a B when reading plantower");
          Serial4.readBytes(buf,LENG);
          if(buf[0] == 0x4d){
              if(checkValue(buf,LENG)){ //All units are ug/m^3
                  //Serial.println("Value is good from pm buff");
                  PM01Value=transmitPM01(buf); //count PM1.0 value of the air detector module
 808212a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 808212e:	4a10      	ldr	r2, [pc, #64]	; (8082170 <_Z13readPlantowerv+0x78>)
 8082130:	6013      	str	r3, [r2, #0]
                  PM2_5Value=transmitPM2_5(buf);//count PM2.5 value of the air detector module
 8082132:	f7ff ffd8 	bl	80820e6 <_Z13transmitPM2_5Pc>
 8082136:	f00c f857 	bl	808e1e8 <__aeabi_f2iz>
 808213a:	4b0e      	ldr	r3, [pc, #56]	; (8082174 <_Z13readPlantowerv+0x7c>)
                  PM10Value=transmitPM10(buf); //count PM10 value of the air detector module
 808213c:	79e2      	ldrb	r2, [r4, #7]
          Serial4.readBytes(buf,LENG);
          if(buf[0] == 0x4d){
              if(checkValue(buf,LENG)){ //All units are ug/m^3
                  //Serial.println("Value is good from pm buff");
                  PM01Value=transmitPM01(buf); //count PM1.0 value of the air detector module
                  PM2_5Value=transmitPM2_5(buf);//count PM2.5 value of the air detector module
 808213e:	6018      	str	r0, [r3, #0]
                  PM10Value=transmitPM10(buf); //count PM10 value of the air detector module
 8082140:	7a23      	ldrb	r3, [r4, #8]
 8082142:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8082146:	4a0c      	ldr	r2, [pc, #48]	; (8082178 <_Z13readPlantowerv+0x80>)
 8082148:	6013      	str	r3, [r2, #0]
 808214a:	bd10      	pop	{r4, pc}
              }
          }
      }
      else{
        //Serial.println("Clearing serial buffer from PM measurement");
        while(Serial4.available()){
 808214c:	f7fe fe42 	bl	8080dd4 <_Z22__fetch_global_Serial4v>
 8082150:	6803      	ldr	r3, [r0, #0]
 8082152:	691b      	ldr	r3, [r3, #16]
 8082154:	4798      	blx	r3
 8082156:	b128      	cbz	r0, 8082164 <_Z13readPlantowerv+0x6c>
            char clearBuffer = Serial4.read();
 8082158:	f7fe fe3c 	bl	8080dd4 <_Z22__fetch_global_Serial4v>
 808215c:	6803      	ldr	r3, [r0, #0]
 808215e:	695b      	ldr	r3, [r3, #20]
 8082160:	4798      	blx	r3
              }
          }
      }
      else{
        //Serial.println("Clearing serial buffer from PM measurement");
        while(Serial4.available()){
 8082162:	e7f3      	b.n	808214c <_Z13readPlantowerv+0x54>
 8082164:	bd10      	pop	{r4, pc}
 8082166:	bf00      	nop
 8082168:	0809404a 	.word	0x0809404a
 808216c:	20000bc8 	.word	0x20000bc8
 8082170:	20000cd4 	.word	0x20000cd4
 8082174:	20000e38 	.word	0x20000e38
 8082178:	20000f2c 	.word	0x20000f2c
 808217c:	00000000 	.word	0x00000000

08082180 <_Z15outputParticlesv>:



/***start of all plantower functions***/

void outputParticles(){
 8082180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8082184:	b0be      	sub	sp, #248	; 0xf8
    union {
        int16_t myWord;
        unsigned char bytes[2];
    }wordBytes;

    while(!Serial.available()){
 8082186:	f00a faaf 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808218a:	6803      	ldr	r3, [r0, #0]
 808218c:	691b      	ldr	r3, [r3, #16]
 808218e:	4798      	blx	r3
 8082190:	2800      	cmp	r0, #0
 8082192:	f040 80f5 	bne.w	8082380 <_Z15outputParticlesv+0x200>
        if (! bme.performReading()) {
 8082196:	4880      	ldr	r0, [pc, #512]	; (8082398 <_Z15outputParticlesv+0x218>)
 8082198:	f006 ffa0 	bl	80890dc <_ZN15Adafruit_BME68014performReadingEv>
 808219c:	b920      	cbnz	r0, 80821a8 <_Z15outputParticlesv+0x28>
          Serial.println("Failed to read BME680");
 808219e:	f00a faa3 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80821a2:	497e      	ldr	r1, [pc, #504]	; (808239c <_Z15outputParticlesv+0x21c>)
 80821a4:	f009 fa31 	bl	808b60a <_ZN5Print7printlnEPKc>

        }
        readPlantower();
 80821a8:	f7ff ffa6 	bl	80820f8 <_Z13readPlantowerv>
        readGpsStream();
 80821ac:	f7ff fdfc 	bl	8081da8 <_Z13readGpsStreamv>
        CO2_float = t6713.readPPM();
 80821b0:	487b      	ldr	r0, [pc, #492]	; (80823a0 <_Z15outputParticlesv+0x220>)
 80821b2:	f005 f99b 	bl	80874ec <_ZN13Telaire_T67137readPPMEv>

        CO2_float += CO2_zero;
 80821b6:	4b7b      	ldr	r3, [pc, #492]	; (80823a4 <_Z15outputParticlesv+0x224>)
          Serial.println("Failed to read BME680");

        }
        readPlantower();
        readGpsStream();
        CO2_float = t6713.readPPM();
 80821b8:	4605      	mov	r5, r0

        CO2_float += CO2_zero;
        CO2_float *= CO2_slope;
 80821ba:	6818      	ldr	r0, [r3, #0]
 80821bc:	f00b fdfa 	bl	808ddb4 <__aeabi_i2f>
 80821c0:	4604      	mov	r4, r0
 80821c2:	4628      	mov	r0, r5
 80821c4:	f00b fdf6 	bl	808ddb4 <__aeabi_i2f>
 80821c8:	4601      	mov	r1, r0
 80821ca:	4620      	mov	r0, r4
 80821cc:	f00b fd3e 	bl	808dc4c <__addsf3>
 80821d0:	4b75      	ldr	r3, [pc, #468]	; (80823a8 <_Z15outputParticlesv+0x228>)
 80821d2:	4c76      	ldr	r4, [pc, #472]	; (80823ac <_Z15outputParticlesv+0x22c>)
 80821d4:	6819      	ldr	r1, [r3, #0]
 80821d6:	f00b fe41 	bl	808de5c <__aeabi_fmul>
        //correct for altitude
        float pressure_correction = bme.pressure/100;
 80821da:	4b6f      	ldr	r3, [pc, #444]	; (8082398 <_Z15outputParticlesv+0x218>)
        readPlantower();
        readGpsStream();
        CO2_float = t6713.readPPM();

        CO2_float += CO2_zero;
        CO2_float *= CO2_slope;
 80821dc:	6020      	str	r0, [r4, #0]
        //correct for altitude
        float pressure_correction = bme.pressure/100;
 80821de:	4974      	ldr	r1, [pc, #464]	; (80823b0 <_Z15outputParticlesv+0x230>)
        readPlantower();
        readGpsStream();
        CO2_float = t6713.readPPM();

        CO2_float += CO2_zero;
        CO2_float *= CO2_slope;
 80821e0:	4605      	mov	r5, r0
        //correct for altitude
        float pressure_correction = bme.pressure/100;
 80821e2:	6858      	ldr	r0, [r3, #4]
 80821e4:	f00b feee 	bl	808dfc4 <__aeabi_fdiv>
        if(pressure_correction > LOW_PRESSURE_LIMIT && pressure_correction < HIGH_PRESSURE_LIMIT){
 80821e8:	4971      	ldr	r1, [pc, #452]	; (80823b0 <_Z15outputParticlesv+0x230>)
        CO2_float = t6713.readPPM();

        CO2_float += CO2_zero;
        CO2_float *= CO2_slope;
        //correct for altitude
        float pressure_correction = bme.pressure/100;
 80821ea:	4606      	mov	r6, r0
        if(pressure_correction > LOW_PRESSURE_LIMIT && pressure_correction < HIGH_PRESSURE_LIMIT){
 80821ec:	f00b fff2 	bl	808e1d4 <__aeabi_fcmpgt>
 80821f0:	46a0      	mov	r8, r4
 80821f2:	b160      	cbz	r0, 808220e <_Z15outputParticlesv+0x8e>
 80821f4:	496f      	ldr	r1, [pc, #444]	; (80823b4 <_Z15outputParticlesv+0x234>)
 80821f6:	4630      	mov	r0, r6
 80821f8:	f00b ffce 	bl	808e198 <__aeabi_fcmplt>
 80821fc:	b138      	cbz	r0, 808220e <_Z15outputParticlesv+0x8e>
            pressure_correction /= SEALEVELPRESSURE_HPA;
            CO2_float *= pressure_correction;
 80821fe:	496e      	ldr	r1, [pc, #440]	; (80823b8 <_Z15outputParticlesv+0x238>)
 8082200:	4630      	mov	r0, r6
 8082202:	f00b fedf 	bl	808dfc4 <__aeabi_fdiv>
 8082206:	4629      	mov	r1, r5
 8082208:	f00b fe28 	bl	808de5c <__aeabi_fmul>
 808220c:	6020      	str	r0, [r4, #0]
        }
        pm_25_correction_factor = PM_25_CONSTANT_A + (PM_25_CONSTANT_B*(readHumidity()/100))/(1 - (readHumidity()/100));
 808220e:	f7ff fa69 	bl	80816e4 <_Z12readHumidityv>
 8082212:	4604      	mov	r4, r0
 8082214:	f7ff fa66 	bl	80816e4 <_Z12readHumidityv>
 8082218:	4965      	ldr	r1, [pc, #404]	; (80823b0 <_Z15outputParticlesv+0x230>)
 808221a:	4606      	mov	r6, r0
 808221c:	4620      	mov	r0, r4
 808221e:	f00b fed1 	bl	808dfc4 <__aeabi_fdiv>
 8082222:	f00b f971 	bl	808d508 <__aeabi_f2d>
 8082226:	a358      	add	r3, pc, #352	; (adr r3, 8082388 <_Z15outputParticlesv+0x208>)
 8082228:	e9d3 2300 	ldrd	r2, r3, [r3]
 808222c:	f00b f9c0 	bl	808d5b0 <__aeabi_dmul>
 8082230:	4604      	mov	r4, r0
 8082232:	460d      	mov	r5, r1
 8082234:	4630      	mov	r0, r6
 8082236:	495e      	ldr	r1, [pc, #376]	; (80823b0 <_Z15outputParticlesv+0x230>)
 8082238:	f00b fec4 	bl	808dfc4 <__aeabi_fdiv>
 808223c:	4601      	mov	r1, r0
 808223e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8082242:	f00b fd01 	bl	808dc48 <__aeabi_fsub>
 8082246:	f00b f95f 	bl	808d508 <__aeabi_f2d>
 808224a:	4602      	mov	r2, r0
 808224c:	460b      	mov	r3, r1
 808224e:	4620      	mov	r0, r4
 8082250:	4629      	mov	r1, r5
 8082252:	f00b fad7 	bl	808d804 <__aeabi_ddiv>
 8082256:	a34e      	add	r3, pc, #312	; (adr r3, 8082390 <_Z15outputParticlesv+0x210>)
 8082258:	e9d3 2300 	ldrd	r2, r3, [r3]
 808225c:	f00a fff6 	bl	808d24c <__adddf3>
 8082260:	f00b fc9e 	bl	808dba0 <__aeabi_d2f>
 8082264:	4604      	mov	r4, r0
 8082266:	4b55      	ldr	r3, [pc, #340]	; (80823bc <_Z15outputParticlesv+0x23c>)
        corrected_PM_25 = PM2_5Value * pm_25_correction_factor;
 8082268:	4e55      	ldr	r6, [pc, #340]	; (80823c0 <_Z15outputParticlesv+0x240>)
        float pressure_correction = bme.pressure/100;
        if(pressure_correction > LOW_PRESSURE_LIMIT && pressure_correction < HIGH_PRESSURE_LIMIT){
            pressure_correction /= SEALEVELPRESSURE_HPA;
            CO2_float *= pressure_correction;
        }
        pm_25_correction_factor = PM_25_CONSTANT_A + (PM_25_CONSTANT_B*(readHumidity()/100))/(1 - (readHumidity()/100));
 808226a:	6018      	str	r0, [r3, #0]
        corrected_PM_25 = PM2_5Value * pm_25_correction_factor;
 808226c:	4b55      	ldr	r3, [pc, #340]	; (80823c4 <_Z15outputParticlesv+0x244>)
            wordBytes.myWord = DEVICE_id;
            ble_output_array[1 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
            ble_output_array[2 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];

            //byte 3 - Measurement number
            ble_output_array[3 + i*(BLE_PAYLOAD_SIZE)] = sample_counter;
 808226e:	f8df 915c 	ldr.w	r9, [pc, #348]	; 80823cc <_Z15outputParticlesv+0x24c>
        if(pressure_correction > LOW_PRESSURE_LIMIT && pressure_correction < HIGH_PRESSURE_LIMIT){
            pressure_correction /= SEALEVELPRESSURE_HPA;
            CO2_float *= pressure_correction;
        }
        pm_25_correction_factor = PM_25_CONSTANT_A + (PM_25_CONSTANT_B*(readHumidity()/100))/(1 - (readHumidity()/100));
        corrected_PM_25 = PM2_5Value * pm_25_correction_factor;
 8082272:	6818      	ldr	r0, [r3, #0]
 8082274:	f00b fd9e 	bl	808ddb4 <__aeabi_i2f>
 8082278:	4621      	mov	r1, r4
 808227a:	f00b fdef 	bl	808de5c <__aeabi_fmul>
 808227e:	f10d 0405 	add.w	r4, sp, #5
 8082282:	6030      	str	r0, [r6, #0]

        byte ble_output_array[NUMBER_OF_SPECIES*BLE_PAYLOAD_SIZE];     //19 bytes per data line and 12 species to output


        for(int i=0; i<5; i++){
 8082284:	2500      	movs	r5, #0

            //************Fill the ble output array**********************//
            //Serial.printf("making array[%d]\n", i);
            //byte 0 - version
            ble_output_array[0 + i*(BLE_PAYLOAD_SIZE)] = 1;
 8082286:	2301      	movs	r3, #1
 8082288:	f804 3c01 	strb.w	r3, [r4, #-1]

            //bytes 1,2 - Device ID
            //DEVICE_id = 555;
            wordBytes.myWord = DEVICE_id;
 808228c:	4b4e      	ldr	r3, [pc, #312]	; (80823c8 <_Z15outputParticlesv+0x248>)
 808228e:	4f4f      	ldr	r7, [pc, #316]	; (80823cc <_Z15outputParticlesv+0x24c>)
 8082290:	681b      	ldr	r3, [r3, #0]
            ble_output_array[1 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8082292:	7023      	strb	r3, [r4, #0]
            ble_output_array[2 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8082294:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8082298:	7063      	strb	r3, [r4, #1]

            //byte 3 - Measurement number
            ble_output_array[3 + i*(BLE_PAYLOAD_SIZE)] = sample_counter;
 808229a:	f8d9 3000 	ldr.w	r3, [r9]
 808229e:	70a3      	strb	r3, [r4, #2]
            3-PM10Value


            */

            if(i == 0){
 80822a0:	b92d      	cbnz	r5, 80822ae <_Z15outputParticlesv+0x12e>
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = BATTERY_PACKET_CONSTANT;
 80822a2:	2378      	movs	r3, #120	; 0x78
 80822a4:	70e3      	strb	r3, [r4, #3]
                floatBytes.myFloat = fuel.getSoC();
 80822a6:	484a      	ldr	r0, [pc, #296]	; (80823d0 <_Z15outputParticlesv+0x250>)
 80822a8:	f009 fdcc 	bl	808be44 <_ZN9FuelGauge6getSoCEv>
 80822ac:	e018      	b.n	80822e0 <_Z15outputParticlesv+0x160>
            }else if(i == 1){
 80822ae:	2d01      	cmp	r5, #1
 80822b0:	d103      	bne.n	80822ba <_Z15outputParticlesv+0x13a>
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM1_PACKET_CONSTANT;
 80822b2:	2372      	movs	r3, #114	; 0x72
 80822b4:	70e3      	strb	r3, [r4, #3]
                floatBytes.myFloat = PM01Value;
 80822b6:	4b47      	ldr	r3, [pc, #284]	; (80823d4 <_Z15outputParticlesv+0x254>)
 80822b8:	e00a      	b.n	80822d0 <_Z15outputParticlesv+0x150>
            }else if(i == 2){
 80822ba:	2d02      	cmp	r5, #2
 80822bc:	d103      	bne.n	80822c6 <_Z15outputParticlesv+0x146>
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM2PT5_PACKET_CONSTANT;
 80822be:	2352      	movs	r3, #82	; 0x52
 80822c0:	70e3      	strb	r3, [r4, #3]
                floatBytes.myFloat = corrected_PM_25;
 80822c2:	6830      	ldr	r0, [r6, #0]
 80822c4:	e00c      	b.n	80822e0 <_Z15outputParticlesv+0x160>
            }else if(i == 3){
 80822c6:	2d03      	cmp	r5, #3
 80822c8:	d106      	bne.n	80822d8 <_Z15outputParticlesv+0x158>
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM10_PACKET_CONSTANT;
 80822ca:	2371      	movs	r3, #113	; 0x71
 80822cc:	70e3      	strb	r3, [r4, #3]
                floatBytes.myFloat = PM10Value;
 80822ce:	4b42      	ldr	r3, [pc, #264]	; (80823d8 <_Z15outputParticlesv+0x258>)
 80822d0:	6818      	ldr	r0, [r3, #0]
 80822d2:	f00b fd6f 	bl	808ddb4 <__aeabi_i2f>
 80822d6:	e003      	b.n	80822e0 <_Z15outputParticlesv+0x160>
            }else if(i == 4){
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = CARBON_DIOXIDE_PACKET_CONSTANT;
 80822d8:	2343      	movs	r3, #67	; 0x43
                floatBytes.myFloat = CO2_float;
 80822da:	f8d8 0000 	ldr.w	r0, [r8]
                floatBytes.myFloat = corrected_PM_25;
            }else if(i == 3){
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM10_PACKET_CONSTANT;
                floatBytes.myFloat = PM10Value;
            }else if(i == 4){
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = CARBON_DIOXIDE_PACKET_CONSTANT;
 80822de:	70e3      	strb	r3, [r4, #3]
                floatBytes.myFloat = CO2_float;
            }

            //bytes 5,6,7,8 - Measurement Value
            ble_output_array[5 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[0];
            ble_output_array[6 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
 80822e0:	f3c0 2307 	ubfx	r3, r0, #8, #8
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = CARBON_DIOXIDE_PACKET_CONSTANT;
                floatBytes.myFloat = CO2_float;
            }

            //bytes 5,6,7,8 - Measurement Value
            ble_output_array[5 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[0];
 80822e4:	7120      	strb	r0, [r4, #4]
            ble_output_array[6 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
 80822e6:	7163      	strb	r3, [r4, #5]
            ble_output_array[7 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[2];
 80822e8:	f3c0 4307 	ubfx	r3, r0, #16, #8
            ble_output_array[8 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[3];
 80822ec:	f3c0 6007 	ubfx	r0, r0, #24, #8
            }

            //bytes 5,6,7,8 - Measurement Value
            ble_output_array[5 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[0];
            ble_output_array[6 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
            ble_output_array[7 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[2];
 80822f0:	71a3      	strb	r3, [r4, #6]
            ble_output_array[8 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[3];
 80822f2:	71e0      	strb	r0, [r4, #7]


            //bytes 9-12 - latitude
            wordBytes.myWord = gps.get_latitudeWhole();
 80822f4:	4839      	ldr	r0, [pc, #228]	; (80823dc <_Z15outputParticlesv+0x25c>)
 80822f6:	f005 f86e 	bl	80873d6 <_ZN3GPS17get_latitudeWholeEv>
            ble_output_array[9 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 80822fa:	7220      	strb	r0, [r4, #8]
            ble_output_array[10 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 80822fc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8082300:	7260      	strb	r0, [r4, #9]

            wordBytes.myWord = gps.get_latitudeFrac();
 8082302:	4836      	ldr	r0, [pc, #216]	; (80823dc <_Z15outputParticlesv+0x25c>)
 8082304:	f005 f86a 	bl	80873dc <_ZN3GPS16get_latitudeFracEv>
            ble_output_array[11 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8082308:	72a0      	strb	r0, [r4, #10]
            ble_output_array[12 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 808230a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 808230e:	72e0      	strb	r0, [r4, #11]

            //bytes 14-17 - longitude
            wordBytes.myWord = gps.get_longitudeWhole();
 8082310:	4832      	ldr	r0, [pc, #200]	; (80823dc <_Z15outputParticlesv+0x25c>)
 8082312:	f005 f866 	bl	80873e2 <_ZN3GPS18get_longitudeWholeEv>
            ble_output_array[13 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8082316:	7320      	strb	r0, [r4, #12]
            ble_output_array[14 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8082318:	f3c0 2007 	ubfx	r0, r0, #8, #8
 808231c:	7360      	strb	r0, [r4, #13]

            wordBytes.myWord = gps.get_longitudeFrac();
 808231e:	482f      	ldr	r0, [pc, #188]	; (80823dc <_Z15outputParticlesv+0x25c>)
 8082320:	f005 f862 	bl	80873e8 <_ZN3GPS17get_longitudeFracEv>
            ble_output_array[15 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8082324:	73a0      	strb	r0, [r4, #14]
            ble_output_array[16 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8082326:	f3c0 2007 	ubfx	r0, r0, #8, #8
 808232a:	73e0      	strb	r0, [r4, #15]


            //byte 18 - east west and north south indicator
            //  LSB 0 = East, LSB 1 = West
            //  MSB 0 = South, MSB 1 = North
            int northSouth = gps.get_nsIndicator();
 808232c:	482b      	ldr	r0, [pc, #172]	; (80823dc <_Z15outputParticlesv+0x25c>)
 808232e:	f005 f85e 	bl	80873ee <_ZN3GPS15get_nsIndicatorEv>
 8082332:	4682      	mov	sl, r0
            int eastWest = gps.get_ewIndicator();
 8082334:	4829      	ldr	r0, [pc, #164]	; (80823dc <_Z15outputParticlesv+0x25c>)
 8082336:	f005 f85d 	bl	80873f4 <_ZN3GPS15get_ewIndicatorEv>

            ble_output_array[17 + i*(BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
 808233a:	ea4a 0000 	orr.w	r0, sl, r0
 808233e:	7420      	strb	r0, [r4, #16]
            ble_output_array[18 + i*(BLE_PAYLOAD_SIZE)] = gps.get_horizontalDillution();
 8082340:	4826      	ldr	r0, [pc, #152]	; (80823dc <_Z15outputParticlesv+0x25c>)
 8082342:	f005 f843 	bl	80873cc <_ZN3GPS23get_horizontalDillutionEv>
        corrected_PM_25 = PM2_5Value * pm_25_correction_factor;

        byte ble_output_array[NUMBER_OF_SPECIES*BLE_PAYLOAD_SIZE];     //19 bytes per data line and 12 species to output


        for(int i=0; i<5; i++){
 8082346:	3501      	adds	r5, #1
            int eastWest = gps.get_ewIndicator();

            ble_output_array[17 + i*(BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
            ble_output_array[18 + i*(BLE_PAYLOAD_SIZE)] = gps.get_horizontalDillution();

            ble_output_array[19 + i*(BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species
 8082348:	2323      	movs	r3, #35	; 0x23
        corrected_PM_25 = PM2_5Value * pm_25_correction_factor;

        byte ble_output_array[NUMBER_OF_SPECIES*BLE_PAYLOAD_SIZE];     //19 bytes per data line and 12 species to output


        for(int i=0; i<5; i++){
 808234a:	2d05      	cmp	r5, #5
            //  MSB 0 = South, MSB 1 = North
            int northSouth = gps.get_nsIndicator();
            int eastWest = gps.get_ewIndicator();

            ble_output_array[17 + i*(BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
            ble_output_array[18 + i*(BLE_PAYLOAD_SIZE)] = gps.get_horizontalDillution();
 808234c:	7460      	strb	r0, [r4, #17]

            ble_output_array[19 + i*(BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species
 808234e:	74a3      	strb	r3, [r4, #18]
 8082350:	f104 0416 	add.w	r4, r4, #22
        corrected_PM_25 = PM2_5Value * pm_25_correction_factor;

        byte ble_output_array[NUMBER_OF_SPECIES*BLE_PAYLOAD_SIZE];     //19 bytes per data line and 12 species to output


        for(int i=0; i<5; i++){
 8082354:	d197      	bne.n	8082286 <_Z15outputParticlesv+0x106>
            ble_output_array[19 + i*(BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species

        }

        //send start delimeter to ESP
        Serial1.print("$");
 8082356:	f00a fb1f 	bl	808c998 <_Z22__fetch_global_Serial1v>
 808235a:	4921      	ldr	r1, [pc, #132]	; (80823e0 <_Z15outputParticlesv+0x260>)
 808235c:	f009 f942 	bl	808b5e4 <_ZN5Print5printEPKc>
        //send the packaged data with # delimeters in between packets
        Serial1.write(ble_output_array, 5*BLE_PAYLOAD_SIZE);
 8082360:	f00a fb1a 	bl	808c998 <_Z22__fetch_global_Serial1v>
 8082364:	6803      	ldr	r3, [r0, #0]
 8082366:	226e      	movs	r2, #110	; 0x6e
 8082368:	68db      	ldr	r3, [r3, #12]
 808236a:	a901      	add	r1, sp, #4
 808236c:	4798      	blx	r3

        //send ending delimeter
        Serial1.print("&");
 808236e:	f00a fb13 	bl	808c998 <_Z22__fetch_global_Serial1v>
 8082372:	491c      	ldr	r1, [pc, #112]	; (80823e4 <_Z15outputParticlesv+0x264>)
 8082374:	f009 f936 	bl	808b5e4 <_ZN5Print5printEPKc>
        sample_counter += 1;
 8082378:	683b      	ldr	r3, [r7, #0]
 808237a:	3301      	adds	r3, #1
 808237c:	603b      	str	r3, [r7, #0]
    union {
        int16_t myWord;
        unsigned char bytes[2];
    }wordBytes;

    while(!Serial.available()){
 808237e:	e702      	b.n	8082186 <_Z15outputParticlesv+0x6>

        //send ending delimeter
        Serial1.print("&");
        sample_counter += 1;
    }
}
 8082380:	b03e      	add	sp, #248	; 0xf8
 8082382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8082386:	bf00      	nop
 8082388:	b4395810 	.word	0xb4395810
 808238c:	3fbe76c8 	.word	0x3fbe76c8
 8082390:	70a3d70a 	.word	0x70a3d70a
 8082394:	3ff30a3d 	.word	0x3ff30a3d
 8082398:	20000b04 	.word	0x20000b04
 808239c:	08091c7b 	.word	0x08091c7b
 80823a0:	20000f8c 	.word	0x20000f8c
 80823a4:	2000063c 	.word	0x2000063c
 80823a8:	20000ecc 	.word	0x20000ecc
 80823ac:	20000630 	.word	0x20000630
 80823b0:	42c80000 	.word	0x42c80000
 80823b4:	44bb8000 	.word	0x44bb8000
 80823b8:	447d5000 	.word	0x447d5000
 80823bc:	20000d70 	.word	0x20000d70
 80823c0:	20000db0 	.word	0x20000db0
 80823c4:	20000e38 	.word	0x20000e38
 80823c8:	20000488 	.word	0x20000488
 80823cc:	20000b80 	.word	0x20000b80
 80823d0:	20000cc4 	.word	0x20000cc4
 80823d4:	20000cd4 	.word	0x20000cd4
 80823d8:	20000f2c 	.word	0x20000f2c
 80823dc:	20000d78 	.word	0x20000d78
 80823e0:	08091c91 	.word	0x08091c91
 80823e4:	08091be6 	.word	0x08091be6

080823e8 <_Z9goToSleepv>:
    int PM10Val;
    PM10Val=((thebuf[7]<<8) + thebuf[8]); //count PM10 value of the air detector module
    return PM10Val;
}

void goToSleep(void){
 80823e8:	b500      	push	{lr}
    //Serial.println("Going to sleep:)");
    digitalWrite(power_led_en, LOW);
 80823ea:	4b1e      	ldr	r3, [pc, #120]	; (8082464 <_Z9goToSleepv+0x7c>)
    int PM10Val;
    PM10Val=((thebuf[7]<<8) + thebuf[8]); //count PM10 value of the air detector module
    return PM10Val;
}

void goToSleep(void){
 80823ec:	b089      	sub	sp, #36	; 0x24
    //Serial.println("Going to sleep:)");
    digitalWrite(power_led_en, LOW);
 80823ee:	8818      	ldrh	r0, [r3, #0]
 80823f0:	2100      	movs	r1, #0
 80823f2:	f00a fcf6 	bl	808cde2 <digitalWrite>
    digitalWrite(plantower_en, LOW);
 80823f6:	4b1c      	ldr	r3, [pc, #112]	; (8082468 <_Z9goToSleepv+0x80>)
 80823f8:	2100      	movs	r1, #0
 80823fa:	8818      	ldrh	r0, [r3, #0]
 80823fc:	f00a fcf1 	bl	808cde2 <digitalWrite>
    digitalWrite(esp_wroom_en, LOW);
 8082400:	4b1a      	ldr	r3, [pc, #104]	; (808246c <_Z9goToSleepv+0x84>)
 8082402:	2100      	movs	r1, #0
 8082404:	8818      	ldrh	r0, [r3, #0]
 8082406:	f00a fcec 	bl	808cde2 <digitalWrite>
    digitalWrite(blower_en, LOW);
 808240a:	4b19      	ldr	r3, [pc, #100]	; (8082470 <_Z9goToSleepv+0x88>)
 808240c:	2100      	movs	r1, #0
 808240e:	8818      	ldrh	r0, [r3, #0]
 8082410:	f00a fce7 	bl	808cde2 <digitalWrite>
    digitalWrite(co2_en, LOW);
 8082414:	4b17      	ldr	r3, [pc, #92]	; (8082474 <_Z9goToSleepv+0x8c>)
 8082416:	2100      	movs	r1, #0
 8082418:	8818      	ldrh	r0, [r3, #0]
 808241a:	f00a fce2 	bl	808cde2 <digitalWrite>
    digitalWrite(fiveVolt_en, LOW);
 808241e:	4b16      	ldr	r3, [pc, #88]	; (8082478 <_Z9goToSleepv+0x90>)
 8082420:	2100      	movs	r1, #0
 8082422:	8818      	ldrh	r0, [r3, #0]
 8082424:	f00a fcdd 	bl	808cde2 <digitalWrite>
    enableLowPowerGPS();
 8082428:	f7ff f8ca 	bl	80815c0 <_Z17enableLowPowerGPSv>
    System.sleep(D4, FALLING, sleepInterval * 2);     //every 2 minutes wake up and check if battery voltage is too low
 808242c:	4b13      	ldr	r3, [pc, #76]	; (808247c <_Z9goToSleepv+0x94>)
 808242e:	4a14      	ldr	r2, [pc, #80]	; (8082480 <_Z9goToSleepv+0x98>)
 8082430:	681b      	ldr	r3, [r3, #0]
 8082432:	6812      	ldr	r2, [r2, #0]
 8082434:	2104      	movs	r1, #4
 8082436:	f8ad 1016 	strh.w	r1, [sp, #22]
        return sleep(sleepMode, seconds, flag);
    }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) {
        return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag);
 808243a:	9202      	str	r2, [sp, #8]
 808243c:	005b      	lsls	r3, r3, #1
 808243e:	2201      	movs	r2, #1
 8082440:	2102      	movs	r1, #2
 8082442:	f88d 1015 	strb.w	r1, [sp, #21]
 8082446:	9301      	str	r3, [sp, #4]
 8082448:	9200      	str	r2, [sp, #0]
 808244a:	f10d 0315 	add.w	r3, sp, #21
 808244e:	f10d 0116 	add.w	r1, sp, #22
 8082452:	a806      	add	r0, sp, #24
 8082454:	f008 fd48 	bl	808aee8 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
    System.reset();
 8082458:	f008 fd2b 	bl	808aeb2 <_ZN11SystemClass5resetEv>
}
 808245c:	b009      	add	sp, #36	; 0x24
 808245e:	f85d fb04 	ldr.w	pc, [sp], #4
 8082462:	bf00      	nop
 8082464:	200004a4 	.word	0x200004a4
 8082468:	200004d8 	.word	0x200004d8
 808246c:	200004ac 	.word	0x200004ac
 8082470:	200004d4 	.word	0x200004d4
 8082474:	200004b4 	.word	0x200004b4
 8082478:	200004e0 	.word	0x200004e0
 808247c:	200004a0 	.word	0x200004a0
 8082480:	20000cd0 	.word	0x20000cd0

08082484 <_Z16goToSleepBatteryv>:

void goToSleepBattery(void){
 8082484:	b510      	push	{r4, lr}
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 8082486:	4c2c      	ldr	r4, [pc, #176]	; (8082538 <_Z16goToSleepBatteryv+0xb4>)
 8082488:	2101      	movs	r1, #1
 808248a:	8820      	ldrh	r0, [r4, #0]
 808248c:	f00a fca9 	bl	808cde2 <digitalWrite>
    delay(250);                   // waits for a second
 8082490:	20fa      	movs	r0, #250	; 0xfa
 8082492:	f009 fc63 	bl	808bd5c <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 8082496:	2100      	movs	r1, #0
 8082498:	8820      	ldrh	r0, [r4, #0]
 808249a:	f00a fca2 	bl	808cde2 <digitalWrite>
    delay(250);                   // waits for a second
 808249e:	20fa      	movs	r0, #250	; 0xfa
 80824a0:	f009 fc5c 	bl	808bd5c <delay>
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 80824a4:	2101      	movs	r1, #1
 80824a6:	8820      	ldrh	r0, [r4, #0]
 80824a8:	f00a fc9b 	bl	808cde2 <digitalWrite>
    delay(250);                   // waits for a second
 80824ac:	20fa      	movs	r0, #250	; 0xfa
 80824ae:	f009 fc55 	bl	808bd5c <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 80824b2:	2100      	movs	r1, #0
 80824b4:	8820      	ldrh	r0, [r4, #0]
 80824b6:	f00a fc94 	bl	808cde2 <digitalWrite>
    delay(250);                   // waits for a second
 80824ba:	20fa      	movs	r0, #250	; 0xfa
 80824bc:	f009 fc4e 	bl	808bd5c <delay>
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 80824c0:	2101      	movs	r1, #1
 80824c2:	8820      	ldrh	r0, [r4, #0]
 80824c4:	f00a fc8d 	bl	808cde2 <digitalWrite>
    delay(250);                   // waits for a second
 80824c8:	20fa      	movs	r0, #250	; 0xfa
 80824ca:	f009 fc47 	bl	808bd5c <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 80824ce:	2100      	movs	r1, #0
 80824d0:	8820      	ldrh	r0, [r4, #0]
 80824d2:	f00a fc86 	bl	808cde2 <digitalWrite>
    delay(250);                   // waits for a second
 80824d6:	20fa      	movs	r0, #250	; 0xfa
 80824d8:	f009 fc40 	bl	808bd5c <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 80824dc:	2101      	movs	r1, #1
 80824de:	8820      	ldrh	r0, [r4, #0]
 80824e0:	f00a fc7f 	bl	808cde2 <digitalWrite>
    delay(250);                   // waits for a second
 80824e4:	20fa      	movs	r0, #250	; 0xfa
 80824e6:	f009 fc39 	bl	808bd5c <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 80824ea:	2100      	movs	r1, #0
 80824ec:	8820      	ldrh	r0, [r4, #0]
 80824ee:	f00a fc78 	bl	808cde2 <digitalWrite>
    delay(250);                   // waits for a second
 80824f2:	20fa      	movs	r0, #250	; 0xfa
 80824f4:	f009 fc32 	bl	808bd5c <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 80824f8:	2101      	movs	r1, #1
 80824fa:	8820      	ldrh	r0, [r4, #0]
 80824fc:	f00a fc71 	bl	808cde2 <digitalWrite>
    delay(250);                   // waits for a second
 8082500:	20fa      	movs	r0, #250	; 0xfa
 8082502:	f009 fc2b 	bl	808bd5c <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 8082506:	2100      	movs	r1, #0
 8082508:	8820      	ldrh	r0, [r4, #0]
 808250a:	f00a fc6a 	bl	808cde2 <digitalWrite>
    delay(250);                   // waits for a second
 808250e:	20fa      	movs	r0, #250	; 0xfa
 8082510:	f009 fc24 	bl	808bd5c <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 8082514:	2101      	movs	r1, #1
 8082516:	8820      	ldrh	r0, [r4, #0]
 8082518:	f00a fc63 	bl	808cde2 <digitalWrite>
    delay(250);                   // waits for a second
 808251c:	20fa      	movs	r0, #250	; 0xfa
 808251e:	f009 fc1d 	bl	808bd5c <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 8082522:	8820      	ldrh	r0, [r4, #0]
 8082524:	2100      	movs	r1, #0
 8082526:	f00a fc5c 	bl	808cde2 <digitalWrite>
    digitalWrite(blower_en, HIGH);
    digitalWrite(co2_en, HIGH);
    digitalWrite(fiveVolt_en, HIGH);*/
    //System.sleep(SLEEP_MODE_DEEP, 600);

}
 808252a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
    delay(250);                   // waits for a second
    digitalWrite(power_led_en, LOW);    // Sets the LED off

    //Serial.println("Turning off batfet");
    writeRegister(7, 0b01101011);   //turn off batfet
 808252e:	216b      	movs	r1, #107	; 0x6b
 8082530:	2007      	movs	r0, #7
 8082532:	f7fe bced 	b.w	8080f10 <_Z13writeRegisterhh>
 8082536:	bf00      	nop
 8082538:	200004a4 	.word	0x200004a4

0808253c <_Z8resetESPv>:
    digitalWrite(fiveVolt_en, HIGH);*/
    //System.sleep(SLEEP_MODE_DEEP, 600);

}

void resetESP(void){
 808253c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  digitalWrite(esp_wroom_en, LOW);
 808253e:	4f17      	ldr	r7, [pc, #92]	; (808259c <_Z8resetESPv+0x60>)
  digitalWrite(plantower_en, LOW);
 8082540:	4e17      	ldr	r6, [pc, #92]	; (80825a0 <_Z8resetESPv+0x64>)
    //System.sleep(SLEEP_MODE_DEEP, 600);

}

void resetESP(void){
  digitalWrite(esp_wroom_en, LOW);
 8082542:	8838      	ldrh	r0, [r7, #0]
  digitalWrite(plantower_en, LOW);
  digitalWrite(blower_en, LOW);
 8082544:	4d17      	ldr	r5, [pc, #92]	; (80825a4 <_Z8resetESPv+0x68>)
    //System.sleep(SLEEP_MODE_DEEP, 600);

}

void resetESP(void){
  digitalWrite(esp_wroom_en, LOW);
 8082546:	2100      	movs	r1, #0
 8082548:	f00a fc4b 	bl	808cde2 <digitalWrite>
  digitalWrite(plantower_en, LOW);
  digitalWrite(blower_en, LOW);
  digitalWrite(co2_en, LOW);
 808254c:	4c16      	ldr	r4, [pc, #88]	; (80825a8 <_Z8resetESPv+0x6c>)

}

void resetESP(void){
  digitalWrite(esp_wroom_en, LOW);
  digitalWrite(plantower_en, LOW);
 808254e:	8830      	ldrh	r0, [r6, #0]
 8082550:	2100      	movs	r1, #0
 8082552:	f00a fc46 	bl	808cde2 <digitalWrite>
  digitalWrite(blower_en, LOW);
 8082556:	8828      	ldrh	r0, [r5, #0]
 8082558:	2100      	movs	r1, #0
 808255a:	f00a fc42 	bl	808cde2 <digitalWrite>
  digitalWrite(co2_en, LOW);
 808255e:	2100      	movs	r1, #0
 8082560:	8820      	ldrh	r0, [r4, #0]
 8082562:	f00a fc3e 	bl	808cde2 <digitalWrite>
  delay(1000);
 8082566:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808256a:	f009 fbf7 	bl	808bd5c <delay>
  digitalWrite(esp_wroom_en, HIGH);
 808256e:	8838      	ldrh	r0, [r7, #0]
 8082570:	2101      	movs	r1, #1
 8082572:	f00a fc36 	bl	808cde2 <digitalWrite>
  digitalWrite(plantower_en, HIGH);
 8082576:	8830      	ldrh	r0, [r6, #0]
 8082578:	2101      	movs	r1, #1
 808257a:	f00a fc32 	bl	808cde2 <digitalWrite>
  digitalWrite(blower_en, HIGH);
 808257e:	8828      	ldrh	r0, [r5, #0]
 8082580:	2101      	movs	r1, #1
 8082582:	f00a fc2e 	bl	808cde2 <digitalWrite>
  digitalWrite(co2_en, HIGH);
 8082586:	8820      	ldrh	r0, [r4, #0]
 8082588:	2101      	movs	r1, #1
 808258a:	f00a fc2a 	bl	808cde2 <digitalWrite>
  delay(1000);
}
 808258e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  delay(1000);
  digitalWrite(esp_wroom_en, HIGH);
  digitalWrite(plantower_en, HIGH);
  digitalWrite(blower_en, HIGH);
  digitalWrite(co2_en, HIGH);
  delay(1000);
 8082592:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8082596:	f009 bbe1 	b.w	808bd5c <delay>
 808259a:	bf00      	nop
 808259c:	200004ac 	.word	0x200004ac
 80825a0:	200004d8 	.word	0x200004d8
 80825a4:	200004d4 	.word	0x200004d4
 80825a8:	200004b4 	.word	0x200004b4

080825ac <setup>:
    file1.close();

}

void setup()
{
 80825ac:	b570      	push	{r4, r5, r6, lr}
    status_word.status_int  = 0;
    status_word.status_int |= (APP_VERSION << 12) & 0xFF00;
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
 80825ae:	4bb2      	ldr	r3, [pc, #712]	; (8082878 <setup+0x2cc>)
    file1.close();

}

void setup()
{
 80825b0:	b0aa      	sub	sp, #168	; 0xa8
    status_word.status_int  = 0;
    status_word.status_int |= (APP_VERSION << 12) & 0xFF00;
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
 80825b2:	f44f 42fc 	mov.w	r2, #32256	; 0x7e00
    //status_word.status_int |= 0x6500;

    String init_log; //intialization error log
 80825b6:	49b1      	ldr	r1, [pc, #708]	; (808287c <setup+0x2d0>)
 80825b8:	a803      	add	r0, sp, #12


    setADCSampleTime(ADC_SampleTime_480Cycles);
    //setup i/o
    pinMode(lmp91000_1_en, OUTPUT);
 80825ba:	4db1      	ldr	r5, [pc, #708]	; (8082880 <setup+0x2d4>)

void setup()
{
    status_word.status_int  = 0;
    status_word.status_int |= (APP_VERSION << 12) & 0xFF00;
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
 80825bc:	801a      	strh	r2, [r3, #0]


    setADCSampleTime(ADC_SampleTime_480Cycles);
    //setup i/o
    pinMode(lmp91000_1_en, OUTPUT);
    pinMode(lmp91000_2_en, OUTPUT);
 80825be:	4eb1      	ldr	r6, [pc, #708]	; (8082884 <setup+0x2d8>)
    status_word.status_int  = 0;
    status_word.status_int |= (APP_VERSION << 12) & 0xFF00;
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
    //status_word.status_int |= 0x6500;

    String init_log; //intialization error log
 80825c0:	f008 fdfb 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>


    setADCSampleTime(ADC_SampleTime_480Cycles);
 80825c4:	2007      	movs	r0, #7
 80825c6:	f009 fbc7 	bl	808bd58 <setADCSampleTime>
    //setup i/o
    pinMode(lmp91000_1_en, OUTPUT);
 80825ca:	2101      	movs	r1, #1
 80825cc:	8828      	ldrh	r0, [r5, #0]
 80825ce:	f00a fbf7 	bl	808cdc0 <pinMode>
    pinMode(lmp91000_2_en, OUTPUT);
 80825d2:	2101      	movs	r1, #1
 80825d4:	8830      	ldrh	r0, [r6, #0]
 80825d6:	f00a fbf3 	bl	808cdc0 <pinMode>
    pinMode(fiveVolt_en, OUTPUT);
 80825da:	4bab      	ldr	r3, [pc, #684]	; (8082888 <setup+0x2dc>)
 80825dc:	2101      	movs	r1, #1
 80825de:	8818      	ldrh	r0, [r3, #0]
 80825e0:	f00a fbee 	bl	808cdc0 <pinMode>
    pinMode(plantower_en, OUTPUT);
 80825e4:	4ba9      	ldr	r3, [pc, #676]	; (808288c <setup+0x2e0>)
 80825e6:	2101      	movs	r1, #1
 80825e8:	8818      	ldrh	r0, [r3, #0]
 80825ea:	f00a fbe9 	bl	808cdc0 <pinMode>
    pinMode(power_led_en, OUTPUT);
 80825ee:	4ba8      	ldr	r3, [pc, #672]	; (8082890 <setup+0x2e4>)
 80825f0:	2101      	movs	r1, #1
 80825f2:	8818      	ldrh	r0, [r3, #0]
 80825f4:	f00a fbe4 	bl	808cdc0 <pinMode>
    pinMode(esp_wroom_en, OUTPUT);
 80825f8:	4ba6      	ldr	r3, [pc, #664]	; (8082894 <setup+0x2e8>)
 80825fa:	2101      	movs	r1, #1
 80825fc:	8818      	ldrh	r0, [r3, #0]
 80825fe:	f00a fbdf 	bl	808cdc0 <pinMode>
    pinMode(blower_en, OUTPUT);
 8082602:	4ba5      	ldr	r3, [pc, #660]	; (8082898 <setup+0x2ec>)
 8082604:	2101      	movs	r1, #1
 8082606:	8818      	ldrh	r0, [r3, #0]
 8082608:	f00a fbda 	bl	808cdc0 <pinMode>
    pinMode(D4, INPUT);
 808260c:	2100      	movs	r1, #0
 808260e:	2004      	movs	r0, #4
 8082610:	f00a fbd6 	bl	808cdc0 <pinMode>
    pinMode(co2_en, OUTPUT);
 8082614:	4ba1      	ldr	r3, [pc, #644]	; (808289c <setup+0x2f0>)
 8082616:	2101      	movs	r1, #1
 8082618:	8818      	ldrh	r0, [r3, #0]
 808261a:	f00a fbd1 	bl	808cdc0 <pinMode>

    //read all stored variables (calibration parameters)
    readStoredVars();
 808261e:	f7fe fdaf 	bl	8081180 <_Z14readStoredVarsv>

    pmic.begin();
 8082622:	489f      	ldr	r0, [pc, #636]	; (80828a0 <setup+0x2f4>)
 8082624:	f008 fa46 	bl	808aab4 <_ZN4PMIC5beginEv>
    pmic.setChargeVoltage(4208);      //  Set Li-Po charge termination voltage to 4.21V,
 8082628:	f241 0170 	movw	r1, #4208	; 0x1070
 808262c:	489c      	ldr	r0, [pc, #624]	; (80828a0 <setup+0x2f4>)
 808262e:	f008 fb71 	bl	808ad14 <_ZN4PMIC16setChargeVoltageEt>
    //pmic.setChargeCurrent(0,1,1,0,0,0);
    //pmic.setInputCurrentLimit(1200);
    pmic.enableCharging();
 8082632:	489b      	ldr	r0, [pc, #620]	; (80828a0 <setup+0x2f4>)
 8082634:	f008 fb39 	bl	808acaa <_ZN4PMIC14enableChargingEv>
    writeRegister(0, 0b00110100);
    writeRegister(1, 0b00011011);
    //writeRegister(2, 0b01100000);
    //check power
    powerCheck.loop();
 8082638:	4c9a      	ldr	r4, [pc, #616]	; (80828a4 <setup+0x2f8>)
    pmic.begin();
    pmic.setChargeVoltage(4208);      //  Set Li-Po charge termination voltage to 4.21V,
    //pmic.setChargeCurrent(0,1,1,0,0,0);
    //pmic.setInputCurrentLimit(1200);
    pmic.enableCharging();
    writeRegister(0, 0b00110100);
 808263a:	2134      	movs	r1, #52	; 0x34
 808263c:	2000      	movs	r0, #0
 808263e:	f7fe fc67 	bl	8080f10 <_Z13writeRegisterhh>
    writeRegister(1, 0b00011011);
 8082642:	211b      	movs	r1, #27
 8082644:	2001      	movs	r0, #1
 8082646:	f7fe fc63 	bl	8080f10 <_Z13writeRegisterhh>
    //writeRegister(2, 0b01100000);
    //check power
    powerCheck.loop();
 808264a:	4620      	mov	r0, r4
 808264c:	f004 fd42 	bl	80870d4 <_ZN10PowerCheck4loopEv>

    
    if(car_topper_power_en && powerCheck.getHasPower() == 0){
 8082650:	4b95      	ldr	r3, [pc, #596]	; (80828a8 <setup+0x2fc>)
 8082652:	681b      	ldr	r3, [r3, #0]
 8082654:	b123      	cbz	r3, 8082660 <setup+0xb4>
 8082656:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 808265a:	2b00      	cmp	r3, #0
 808265c:	f000 82c8 	beq.w	8082bf0 <setup+0x644>
        goToSleepBattery();
    }else if((battery_threshold_enable == 1) && (fuel.getSoC() < BATTERY_THRESHOLD) && (powerCheck.getHasPower() == 0)){
 8082660:	4b92      	ldr	r3, [pc, #584]	; (80828ac <setup+0x300>)
 8082662:	681b      	ldr	r3, [r3, #0]
 8082664:	2b01      	cmp	r3, #1
 8082666:	d10b      	bne.n	8082680 <setup+0xd4>
 8082668:	4891      	ldr	r0, [pc, #580]	; (80828b0 <setup+0x304>)
 808266a:	f009 fbeb 	bl	808be44 <_ZN9FuelGauge6getSoCEv>
 808266e:	4991      	ldr	r1, [pc, #580]	; (80828b4 <setup+0x308>)
 8082670:	f00b fd92 	bl	808e198 <__aeabi_fcmplt>
 8082674:	b120      	cbz	r0, 8082680 <setup+0xd4>
 8082676:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 808267a:	2b00      	cmp	r3, #0
 808267c:	f000 82b8 	beq.w	8082bf0 <setup+0x644>
            //Serial.println("Going to sleep because battery is below 20% charge");
        goToSleepBattery();
    }
    //if user presses power button during operation, reset and it will go to low power mode
    attachInterrupt(D4, System.reset, RISING);
 8082680:	2300      	movs	r3, #0
 8082682:	9300      	str	r3, [sp, #0]
 8082684:	2201      	movs	r2, #1
 8082686:	f04f 33ff 	mov.w	r3, #4294967295
 808268a:	498b      	ldr	r1, [pc, #556]	; (80828b8 <setup+0x30c>)
 808268c:	2004      	movs	r0, #4
 808268e:	f00a f88f 	bl	808c7b0 <_Z15attachInterrupttPFvvE13InterruptModeah>
    if(digitalRead(D4)){
 8082692:	2004      	movs	r0, #4
 8082694:	f00a fbbe 	bl	808ce14 <digitalRead>
 8082698:	b108      	cbz	r0, 808269e <setup+0xf2>
      goToSleep();
 808269a:	f7ff fea5 	bl	80823e8 <_Z9goToSleepv>
    }

    digitalWrite(lmp91000_1_en, HIGH);
 808269e:	2101      	movs	r1, #1
 80826a0:	8828      	ldrh	r0, [r5, #0]
 80826a2:	f00a fb9e 	bl	808cde2 <digitalWrite>
    digitalWrite(lmp91000_2_en, HIGH);
 80826a6:	2101      	movs	r1, #1
 80826a8:	8830      	ldrh	r0, [r6, #0]
 80826aa:	f00a fb9a 	bl	808cde2 <digitalWrite>
    digitalWrite(power_led_en, HIGH);
 80826ae:	4b78      	ldr	r3, [pc, #480]	; (8082890 <setup+0x2e4>)
 80826b0:	2101      	movs	r1, #1
 80826b2:	8818      	ldrh	r0, [r3, #0]
 80826b4:	f00a fb95 	bl	808cde2 <digitalWrite>
    digitalWrite(plantower_en, HIGH);
 80826b8:	4b74      	ldr	r3, [pc, #464]	; (808288c <setup+0x2e0>)
 80826ba:	2101      	movs	r1, #1
 80826bc:	8818      	ldrh	r0, [r3, #0]
 80826be:	f00a fb90 	bl	808cde2 <digitalWrite>
    digitalWrite(esp_wroom_en, HIGH);
 80826c2:	4b74      	ldr	r3, [pc, #464]	; (8082894 <setup+0x2e8>)
 80826c4:	2101      	movs	r1, #1
 80826c6:	8818      	ldrh	r0, [r3, #0]
 80826c8:	f00a fb8b 	bl	808cde2 <digitalWrite>
    digitalWrite(blower_en, HIGH);
 80826cc:	4b72      	ldr	r3, [pc, #456]	; (8082898 <setup+0x2ec>)
 80826ce:	2101      	movs	r1, #1
 80826d0:	8818      	ldrh	r0, [r3, #0]
 80826d2:	f00a fb86 	bl	808cde2 <digitalWrite>
    digitalWrite(co2_en, HIGH);
 80826d6:	4b71      	ldr	r3, [pc, #452]	; (808289c <setup+0x2f0>)
 80826d8:	2101      	movs	r1, #1
 80826da:	8818      	ldrh	r0, [r3, #0]
 80826dc:	f00a fb81 	bl	808cde2 <digitalWrite>
    digitalWrite(fiveVolt_en, HIGH);
 80826e0:	4b69      	ldr	r3, [pc, #420]	; (8082888 <setup+0x2dc>)
 80826e2:	2101      	movs	r1, #1
 80826e4:	8818      	ldrh	r0, [r3, #0]
 80826e6:	f00a fb7c 	bl	808cde2 <digitalWrite>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 80826ea:	4a74      	ldr	r2, [pc, #464]	; (80828bc <setup+0x310>)
 80826ec:	4974      	ldr	r1, [pc, #464]	; (80828c0 <setup+0x314>)
 80826ee:	4875      	ldr	r0, [pc, #468]	; (80828c4 <setup+0x318>)
 80826f0:	f009 fcc9 	bl	808c086 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>

    // register the cloud function
    Particle.function("geteepromdata", remoteReadStoredVars);
    //debugging_enabled = 1;  //for testing...
    //initialize serial1 for communication with BLE nano from redbear labs
    Serial1.begin(9600);
 80826f4:	f00a f950 	bl	808c998 <_Z22__fetch_global_Serial1v>
 80826f8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80826fc:	f00a f946 	bl	808c98c <_ZN11USARTSerial5beginEm>
    //init serial4 to communicate with Plantower PMS5003
    Serial4.begin(9600);
 8082700:	f7fe fb68 	bl	8080dd4 <_Z22__fetch_global_Serial4v>
 8082704:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8082708:	f00a f940 	bl	808c98c <_ZN11USARTSerial5beginEm>
    Serial5.begin(9600);        //gps is connected to this serial port
 808270c:	f7fe fb9c 	bl	8080e48 <_Z22__fetch_global_Serial5v>
 8082710:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8082714:	f00a f93a 	bl	808c98c <_ZN11USARTSerial5beginEm>
    //set the Timeout to 1500ms, longer than the data transmission periodic time of the sensor
    Serial4.setTimeout(5000);
 8082718:	f7fe fb5c 	bl	8080dd4 <_Z22__fetch_global_Serial4v>
 808271c:	f241 3188 	movw	r1, #5000	; 0x1388
 8082720:	f009 f8f7 	bl	808b912 <_ZN6Stream10setTimeoutEm>
    // REG07 Misc Operation Control Register Format
    writeRegister(7, 0b01001011);   //0x4B*/


    //delay for 5 seconds to give time to programmer person for connecting to serial port for debugging
    delay(10000);
 8082724:	f242 7010 	movw	r0, #10000	; 0x2710
 8082728:	f009 fb18 	bl	808bd5c <delay>
    //initialize main serial port for debug output
    Serial.begin(9600);
 808272c:	f009 ffdc 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082730:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8082734:	f009 ffbe 	bl	808c6b4 <_ZN9USBSerial5beginEl>



    #if sd_en
     fileName = String(DEVICE_id) + "_" + String(Time.year()) + String(Time.month()) + String(Time.day()) + "_" + String(Time.hour()) + String(Time.minute()) + String(Time.second()) + ".txt";
 8082738:	4b63      	ldr	r3, [pc, #396]	; (80828c8 <setup+0x31c>)
 808273a:	220a      	movs	r2, #10
 808273c:	6819      	ldr	r1, [r3, #0]
 808273e:	a807      	add	r0, sp, #28
 8082740:	f008 fdaf 	bl	808b2a2 <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8082744:	a907      	add	r1, sp, #28
 8082746:	a80b      	add	r0, sp, #44	; 0x2c
 8082748:	f008 fd76 	bl	808b238 <_ZN6StringC1ERKS_>
 808274c:	495f      	ldr	r1, [pc, #380]	; (80828cc <setup+0x320>)
 808274e:	a80b      	add	r0, sp, #44	; 0x2c
 8082750:	f008 fe62 	bl	808b418 <_ZplRK15StringSumHelperPKc>
 8082754:	4604      	mov	r4, r0
 8082756:	f009 faeb 	bl	808bd30 <_ZN9TimeClass4yearEv>
 808275a:	220a      	movs	r2, #10
 808275c:	4601      	mov	r1, r0
 808275e:	a80f      	add	r0, sp, #60	; 0x3c
 8082760:	f008 fd9f 	bl	808b2a2 <_ZN6StringC1Eih>
 8082764:	a90f      	add	r1, sp, #60	; 0x3c
 8082766:	4620      	mov	r0, r4
 8082768:	f008 fe4a 	bl	808b400 <_ZplRK15StringSumHelperRK6String>
 808276c:	4604      	mov	r4, r0
 808276e:	f009 fad7 	bl	808bd20 <_ZN9TimeClass5monthEv>
 8082772:	220a      	movs	r2, #10
 8082774:	4601      	mov	r1, r0
 8082776:	a813      	add	r0, sp, #76	; 0x4c
 8082778:	f008 fd93 	bl	808b2a2 <_ZN6StringC1Eih>
 808277c:	a913      	add	r1, sp, #76	; 0x4c
 808277e:	4620      	mov	r0, r4
 8082780:	f008 fe3e 	bl	808b400 <_ZplRK15StringSumHelperRK6String>
 8082784:	4604      	mov	r4, r0
 8082786:	f009 fac1 	bl	808bd0c <_ZN9TimeClass3dayEv>
 808278a:	220a      	movs	r2, #10
 808278c:	4601      	mov	r1, r0
 808278e:	a817      	add	r0, sp, #92	; 0x5c
 8082790:	f008 fd87 	bl	808b2a2 <_ZN6StringC1Eih>
 8082794:	a917      	add	r1, sp, #92	; 0x5c
 8082796:	4620      	mov	r0, r4
 8082798:	f008 fe32 	bl	808b400 <_ZplRK15StringSumHelperRK6String>
 808279c:	494b      	ldr	r1, [pc, #300]	; (80828cc <setup+0x320>)
 808279e:	f008 fe3b 	bl	808b418 <_ZplRK15StringSumHelperPKc>
 80827a2:	4604      	mov	r4, r0
 80827a4:	f009 fa94 	bl	808bcd0 <_ZN9TimeClass4hourEv>
 80827a8:	220a      	movs	r2, #10
 80827aa:	4601      	mov	r1, r0
 80827ac:	a81b      	add	r0, sp, #108	; 0x6c
 80827ae:	f008 fd78 	bl	808b2a2 <_ZN6StringC1Eih>
 80827b2:	a91b      	add	r1, sp, #108	; 0x6c
 80827b4:	4620      	mov	r0, r4
 80827b6:	f008 fe23 	bl	808b400 <_ZplRK15StringSumHelperRK6String>
 80827ba:	4604      	mov	r4, r0
 80827bc:	f009 fa92 	bl	808bce4 <_ZN9TimeClass6minuteEv>
 80827c0:	220a      	movs	r2, #10
 80827c2:	4601      	mov	r1, r0
 80827c4:	a81f      	add	r0, sp, #124	; 0x7c
 80827c6:	f008 fd6c 	bl	808b2a2 <_ZN6StringC1Eih>
 80827ca:	a91f      	add	r1, sp, #124	; 0x7c
 80827cc:	4620      	mov	r0, r4
 80827ce:	f008 fe17 	bl	808b400 <_ZplRK15StringSumHelperRK6String>
 80827d2:	4604      	mov	r4, r0
 80827d4:	f009 fa90 	bl	808bcf8 <_ZN9TimeClass6secondEv>
 80827d8:	220a      	movs	r2, #10
 80827da:	4601      	mov	r1, r0
 80827dc:	a823      	add	r0, sp, #140	; 0x8c
 80827de:	f008 fd60 	bl	808b2a2 <_ZN6StringC1Eih>
 80827e2:	a923      	add	r1, sp, #140	; 0x8c
 80827e4:	4620      	mov	r0, r4
 80827e6:	f008 fe0b 	bl	808b400 <_ZplRK15StringSumHelperRK6String>
 80827ea:	4939      	ldr	r1, [pc, #228]	; (80828d0 <setup+0x324>)
 80827ec:	f008 fe14 	bl	808b418 <_ZplRK15StringSumHelperPKc>
 80827f0:	4c38      	ldr	r4, [pc, #224]	; (80828d4 <setup+0x328>)
 80827f2:	4601      	mov	r1, r0
 80827f4:	4620      	mov	r0, r4
 80827f6:	f008 fd10 	bl	808b21a <_ZN6StringaSERKS_>
 80827fa:	a823      	add	r0, sp, #140	; 0x8c
 80827fc:	f008 fc96 	bl	808b12c <_ZN6StringD1Ev>
 8082800:	a81f      	add	r0, sp, #124	; 0x7c
 8082802:	f008 fc93 	bl	808b12c <_ZN6StringD1Ev>
 8082806:	a81b      	add	r0, sp, #108	; 0x6c
 8082808:	f008 fc90 	bl	808b12c <_ZN6StringD1Ev>
 808280c:	a817      	add	r0, sp, #92	; 0x5c
 808280e:	f008 fc8d 	bl	808b12c <_ZN6StringD1Ev>
 8082812:	a813      	add	r0, sp, #76	; 0x4c
 8082814:	f008 fc8a 	bl	808b12c <_ZN6StringD1Ev>
 8082818:	a80f      	add	r0, sp, #60	; 0x3c
 808281a:	f008 fc87 	bl	808b12c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808281e:	a80b      	add	r0, sp, #44	; 0x2c
 8082820:	f008 fc84 	bl	808b12c <_ZN6StringD1Ev>
 8082824:	a807      	add	r0, sp, #28
 8082826:	f008 fc81 	bl	808b12c <_ZN6StringD1Ev>
     Serial.println("Checking for sd card");
 808282a:	f009 ff5d 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808282e:	492a      	ldr	r1, [pc, #168]	; (80828d8 <setup+0x32c>)
 8082830:	f008 feeb 	bl	808b60a <_ZN5Print7printlnEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 8082834:	4929      	ldr	r1, [pc, #164]	; (80828dc <setup+0x330>)
 8082836:	a823      	add	r0, sp, #140	; 0x8c
 8082838:	f008 fcbf 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
     logFileName = "log_" + fileName;
 808283c:	4621      	mov	r1, r4
 808283e:	a823      	add	r0, sp, #140	; 0x8c
 8082840:	f008 fdde 	bl	808b400 <_ZplRK15StringSumHelperRK6String>
 8082844:	4601      	mov	r1, r0
 8082846:	4826      	ldr	r0, [pc, #152]	; (80828e0 <setup+0x334>)
 8082848:	f008 fce7 	bl	808b21a <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808284c:	a823      	add	r0, sp, #140	; 0x8c
 808284e:	f008 fc6d 	bl	808b12c <_ZN6StringD1Ev>
 8082852:	4924      	ldr	r1, [pc, #144]	; (80828e4 <setup+0x338>)
 8082854:	2302      	movs	r3, #2
 8082856:	220c      	movs	r2, #12
 8082858:	f5a1 608e 	sub.w	r0, r1, #1136	; 0x470
 808285c:	f7fe fb2e 	bl	8080ebc <_ZN9SdFatBase5beginEP9SdSpiBasehh>

    if (sd.begin(CS)) { //if uSD is functioning and MCP error has not been logged yet.
 8082860:	2800      	cmp	r0, #0
 8082862:	d043      	beq.n	80828ec <setup+0x340>
      //look for a wifi file
      check_wifi_file();
      //look for a calibration file
      check_cal_file();*/

      Serial.print("Created new file to log to uSD card: ");
 8082864:	f009 ff40 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082868:	491f      	ldr	r1, [pc, #124]	; (80828e8 <setup+0x33c>)
 808286a:	f008 febb 	bl	808b5e4 <_ZN5Print5printEPKc>
      Serial.println(fileName);
 808286e:	f009 ff3b 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082872:	6821      	ldr	r1, [r4, #0]
 8082874:	e03d      	b.n	80828f2 <setup+0x346>
 8082876:	bf00      	nop
 8082878:	20000f84 	.word	0x20000f84
 808287c:	08094308 	.word	0x08094308
 8082880:	200004a8 	.word	0x200004a8
 8082884:	200004dc 	.word	0x200004dc
 8082888:	200004e0 	.word	0x200004e0
 808288c:	200004d8 	.word	0x200004d8
 8082890:	200004a4 	.word	0x200004a4
 8082894:	200004ac 	.word	0x200004ac
 8082898:	200004d4 	.word	0x200004d4
 808289c:	200004b4 	.word	0x200004b4
 80828a0:	20000ee4 	.word	0x20000ee4
 80828a4:	20000b94 	.word	0x20000b94
 80828a8:	20000624 	.word	0x20000624
 80828ac:	20000f88 	.word	0x20000f88
 80828b0:	20000cc4 	.word	0x20000cc4
 80828b4:	41a00000 	.word	0x41a00000
 80828b8:	0808aeb3 	.word	0x0808aeb3
 80828bc:	08091c93 	.word	0x08091c93
 80828c0:	08080d13 	.word	0x08080d13
 80828c4:	0808c03f 	.word	0x0808c03f
 80828c8:	20000488 	.word	0x20000488
 80828cc:	08091cb9 	.word	0x08091cb9
 80828d0:	08091984 	.word	0x08091984
 80828d4:	20000eec 	.word	0x20000eec
 80828d8:	08091ca1 	.word	0x08091ca1
 80828dc:	08091cb6 	.word	0x08091cb6
 80828e0:	20000bb8 	.word	0x20000bb8
 80828e4:	20000ab4 	.word	0x20000ab4
 80828e8:	08091cbb 	.word	0x08091cbb
    }else { //uSD is not functioning
        Serial.println("No uSD card detected.");
 80828ec:	f009 fefc 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80828f0:	496f      	ldr	r1, [pc, #444]	; (8082ab0 <setup+0x504>)
    #endif


    //setup the AFE
    Serial.println("Starting LMP91000 CO initialization");
    if(debugging_enabled)
 80828f2:	4c70      	ldr	r4, [pc, #448]	; (8082ab4 <setup+0x508>)
      check_cal_file();*/

      Serial.print("Created new file to log to uSD card: ");
      Serial.println(fileName);
    }else { //uSD is not functioning
        Serial.println("No uSD card detected.");
 80828f4:	f008 fe89 	bl	808b60a <_ZN5Print7printlnEPKc>
    }
    #endif


    //setup the AFE
    Serial.println("Starting LMP91000 CO initialization");
 80828f8:	f009 fef6 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80828fc:	496e      	ldr	r1, [pc, #440]	; (8082ab8 <setup+0x50c>)
 80828fe:	f008 fe84 	bl	808b60a <_ZN5Print7printlnEPKc>
    if(debugging_enabled)
 8082902:	6823      	ldr	r3, [r4, #0]
 8082904:	b14b      	cbz	r3, 808291a <setup+0x36e>
        writeLogFile("Starting LMP91000 CO initialization");
 8082906:	496c      	ldr	r1, [pc, #432]	; (8082ab8 <setup+0x50c>)
 8082908:	a823      	add	r0, sp, #140	; 0x8c
 808290a:	f008 fc56 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
 808290e:	a823      	add	r0, sp, #140	; 0x8c
 8082910:	f7ff f9fa 	bl	8081d08 <_Z12writeLogFile6String>
 8082914:	a823      	add	r0, sp, #140	; 0x8c
 8082916:	f008 fc09 	bl	808b12c <_ZN6StringD1Ev>
    Wire.begin();   //this must be done for the LMP91000
 808291a:	f00a faff 	bl	808cf1c <_Z19__fetch_global_Wirev>
 808291e:	f00a f8b3 	bl	808ca88 <_ZN7TwoWire5beginEv>
    digitalWrite(lmp91000_1_en, LOW); //enable the chip
 8082922:	2100      	movs	r1, #0
 8082924:	8828      	ldrh	r0, [r5, #0]
 8082926:	f00a fa5c 	bl	808cde2 <digitalWrite>

    if(lmp91000.configure(LMP91000_TIA_GAIN_120K | LMP91000_RLOAD_10OHM, LMP91000_REF_SOURCE_EXT | LMP91000_INT_Z_50PCT | LMP91000_BIAS_SIGN_POS | LMP91000_BIAS_0PCT, LMP91000_FET_SHORT_DISABLED | LMP91000_OP_MODE_AMPEROMETRIC) == 0)
 808292a:	2303      	movs	r3, #3
 808292c:	22b0      	movs	r2, #176	; 0xb0
 808292e:	2118      	movs	r1, #24
 8082930:	4862      	ldr	r0, [pc, #392]	; (8082abc <setup+0x510>)
 8082932:	f004 fb71 	bl	8087018 <_ZN8LMP910009configureEhhh>
 8082936:	b988      	cbnz	r0, 808295c <setup+0x3b0>
    {
          Serial.println("Couldn't communicate with LMP91000 for CO");
 8082938:	f009 fed6 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808293c:	4960      	ldr	r1, [pc, #384]	; (8082ac0 <setup+0x514>)
 808293e:	f008 fe64 	bl	808b60a <_ZN5Print7printlnEPKc>
          if(debugging_enabled){
 8082942:	6823      	ldr	r3, [r4, #0]
 8082944:	b1fb      	cbz	r3, 8082986 <setup+0x3da>
            writeLogFile("Couldn't communicate with LMP91000 for CO");
 8082946:	495e      	ldr	r1, [pc, #376]	; (8082ac0 <setup+0x514>)
 8082948:	a823      	add	r0, sp, #140	; 0x8c
 808294a:	f008 fc36 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
 808294e:	a823      	add	r0, sp, #140	; 0x8c
 8082950:	f7ff f9da 	bl	8081d08 <_Z12writeLogFile6String>
 8082954:	a823      	add	r0, sp, #140	; 0x8c
 8082956:	f008 fbe9 	bl	808b12c <_ZN6StringD1Ev>
 808295a:	e014      	b.n	8082986 <setup+0x3da>
          }
    }else{
          Serial.println("Initialized LMP91000 for CO");
 808295c:	f009 fec4 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082960:	4958      	ldr	r1, [pc, #352]	; (8082ac4 <setup+0x518>)
 8082962:	f008 fe52 	bl	808b60a <_ZN5Print7printlnEPKc>
          if(debugging_enabled){
 8082966:	6823      	ldr	r3, [r4, #0]
 8082968:	b14b      	cbz	r3, 808297e <setup+0x3d2>
            writeLogFile("Initialized LMP91000 for CO");
 808296a:	4956      	ldr	r1, [pc, #344]	; (8082ac4 <setup+0x518>)
 808296c:	a823      	add	r0, sp, #140	; 0x8c
 808296e:	f008 fc24 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
 8082972:	a823      	add	r0, sp, #140	; 0x8c
 8082974:	f7ff f9c8 	bl	8081d08 <_Z12writeLogFile6String>
 8082978:	a823      	add	r0, sp, #140	; 0x8c
 808297a:	f008 fbd7 	bl	808b12c <_ZN6StringD1Ev>
          Serial.println(lmp91000.read(LMP91000_TIACN_REG),HEX);
          Serial.print("REFCN: ");
          Serial.println(lmp91000.read(LMP91000_REFCN_REG),HEX);
          Serial.print("MODECN: ");
          Serial.println(lmp91000.read(LMP91000_MODECN_REG),HEX);*/
          digitalWrite(lmp91000_1_en, HIGH);  //disable
 808297e:	2101      	movs	r1, #1
 8082980:	8828      	ldrh	r0, [r5, #0]
 8082982:	f00a fa2e 	bl	808cde2 <digitalWrite>
    }
    ads1.begin();
 8082986:	4850      	ldr	r0, [pc, #320]	; (8082ac8 <setup+0x51c>)
 8082988:	f004 fc42 	bl	8087210 <_ZN16Adafruit_ADS10155beginEv>
    if(Wire.requestFrom(0x49,1) == 0) { //if can't get 1 byte from ADC1, add it to the init error log
 808298c:	f00a fac6 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8082990:	2201      	movs	r2, #1
 8082992:	2149      	movs	r1, #73	; 0x49
 8082994:	f00a f88a 	bl	808caac <_ZN7TwoWire11requestFromEii>
 8082998:	b988      	cbnz	r0, 80829be <setup+0x412>
      //init_log += "AD1,";
      //digitalWrite(red_status_led, HIGH);
      //delay(200);
      //digitalWrite(red_status_led, LOW);
      //delay(200);
      Serial.println("Could not communicate with Adafruit_ADS1115 for CO");
 808299a:	f009 fea5 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808299e:	494b      	ldr	r1, [pc, #300]	; (8082acc <setup+0x520>)
 80829a0:	f008 fe33 	bl	808b60a <_ZN5Print7printlnEPKc>
      if(debugging_enabled)
 80829a4:	6823      	ldr	r3, [r4, #0]
 80829a6:	b173      	cbz	r3, 80829c6 <setup+0x41a>
        writeLogFile("Could not communicate with Adafruit_ADS1115 for CO");
 80829a8:	4948      	ldr	r1, [pc, #288]	; (8082acc <setup+0x520>)
 80829aa:	a823      	add	r0, sp, #140	; 0x8c
 80829ac:	f008 fc05 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
 80829b0:	a823      	add	r0, sp, #140	; 0x8c
 80829b2:	f7ff f9a9 	bl	8081d08 <_Z12writeLogFile6String>
 80829b6:	a823      	add	r0, sp, #140	; 0x8c
 80829b8:	f008 fbb8 	bl	808b12c <_ZN6StringD1Ev>
 80829bc:	e003      	b.n	80829c6 <setup+0x41a>
    }
    else{
      ads1.setGain(GAIN_TWOTHIRDS);
 80829be:	2100      	movs	r1, #0
 80829c0:	4841      	ldr	r0, [pc, #260]	; (8082ac8 <setup+0x51c>)
 80829c2:	f004 fc2c 	bl	808721e <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
    }

    //AFE 2 setup
    //#if AFE2_en
    Serial.println("Starting LMP91000 2 initialization");
 80829c6:	f009 fe8f 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80829ca:	4941      	ldr	r1, [pc, #260]	; (8082ad0 <setup+0x524>)
 80829cc:	f008 fe1d 	bl	808b60a <_ZN5Print7printlnEPKc>
    if(debugging_enabled)
 80829d0:	6823      	ldr	r3, [r4, #0]
 80829d2:	b14b      	cbz	r3, 80829e8 <setup+0x43c>
        writeLogFile("Starting LMP91000 2 initialization");
 80829d4:	493e      	ldr	r1, [pc, #248]	; (8082ad0 <setup+0x524>)
 80829d6:	a823      	add	r0, sp, #140	; 0x8c
 80829d8:	f008 fbef 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
 80829dc:	a823      	add	r0, sp, #140	; 0x8c
 80829de:	f7ff f993 	bl	8081d08 <_Z12writeLogFile6String>
 80829e2:	a823      	add	r0, sp, #140	; 0x8c
 80829e4:	f008 fba2 	bl	808b12c <_ZN6StringD1Ev>
    Wire.begin();   //this must be done for the LMP91000
    digitalWrite(lmp91000_2_en, LOW); //enable the chip
 80829e8:	4d3a      	ldr	r5, [pc, #232]	; (8082ad4 <setup+0x528>)
    //AFE 2 setup
    //#if AFE2_en
    Serial.println("Starting LMP91000 2 initialization");
    if(debugging_enabled)
        writeLogFile("Starting LMP91000 2 initialization");
    Wire.begin();   //this must be done for the LMP91000
 80829ea:	f00a fa97 	bl	808cf1c <_Z19__fetch_global_Wirev>
 80829ee:	f00a f84b 	bl	808ca88 <_ZN7TwoWire5beginEv>
    digitalWrite(lmp91000_2_en, LOW); //enable the chip
 80829f2:	2100      	movs	r1, #0
 80829f4:	8828      	ldrh	r0, [r5, #0]
 80829f6:	f00a f9f4 	bl	808cde2 <digitalWrite>

    if(lmp91000.configure(LMP91000_TIA_GAIN_120K | LMP91000_RLOAD_10OHM, LMP91000_REF_SOURCE_EXT | LMP91000_INT_Z_50PCT | LMP91000_BIAS_SIGN_POS | LMP91000_BIAS_0PCT, LMP91000_FET_SHORT_DISABLED | LMP91000_OP_MODE_AMPEROMETRIC) == 0)
 80829fa:	2303      	movs	r3, #3
 80829fc:	22b0      	movs	r2, #176	; 0xb0
 80829fe:	2118      	movs	r1, #24
 8082a00:	482e      	ldr	r0, [pc, #184]	; (8082abc <setup+0x510>)
 8082a02:	f004 fb09 	bl	8087018 <_ZN8LMP910009configureEhhh>
 8082a06:	b978      	cbnz	r0, 8082a28 <setup+0x47c>
    {
          Serial.println("Couldn't communicate with LMP91000 for 2");
 8082a08:	f009 fe6e 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082a0c:	4932      	ldr	r1, [pc, #200]	; (8082ad8 <setup+0x52c>)
 8082a0e:	f008 fdfc 	bl	808b60a <_ZN5Print7printlnEPKc>
          writeLogFile("Couldn't communicate with LMP91000 for 2");
 8082a12:	4931      	ldr	r1, [pc, #196]	; (8082ad8 <setup+0x52c>)
 8082a14:	a823      	add	r0, sp, #140	; 0x8c
 8082a16:	f008 fbd0 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
 8082a1a:	a823      	add	r0, sp, #140	; 0x8c
 8082a1c:	f7ff f974 	bl	8081d08 <_Z12writeLogFile6String>
 8082a20:	a823      	add	r0, sp, #140	; 0x8c
 8082a22:	f008 fb83 	bl	808b12c <_ZN6StringD1Ev>
 8082a26:	e014      	b.n	8082a52 <setup+0x4a6>
    }else{
          Serial.println("Initialized LMP91000 for 2");
 8082a28:	f009 fe5e 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082a2c:	492b      	ldr	r1, [pc, #172]	; (8082adc <setup+0x530>)
 8082a2e:	f008 fdec 	bl	808b60a <_ZN5Print7printlnEPKc>
          if(debugging_enabled)
 8082a32:	6823      	ldr	r3, [r4, #0]
 8082a34:	b14b      	cbz	r3, 8082a4a <setup+0x49e>
            writeLogFile("Initialized LMP91000 for 2");
 8082a36:	4929      	ldr	r1, [pc, #164]	; (8082adc <setup+0x530>)
 8082a38:	a823      	add	r0, sp, #140	; 0x8c
 8082a3a:	f008 fbbe 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
 8082a3e:	a823      	add	r0, sp, #140	; 0x8c
 8082a40:	f7ff f962 	bl	8081d08 <_Z12writeLogFile6String>
 8082a44:	a823      	add	r0, sp, #140	; 0x8c
 8082a46:	f008 fb71 	bl	808b12c <_ZN6StringD1Ev>
          Serial.println(lmp91000.read(LMP91000_TIACN_REG),HEX);
          Serial.print("REFCN: ");
          Serial.println(lmp91000.read(LMP91000_REFCN_REG),HEX);
          Serial.print("MODECN: ");
          Serial.println(lmp91000.read(LMP91000_MODECN_REG),HEX);*/
          digitalWrite(lmp91000_2_en, HIGH);  //disable
 8082a4a:	2101      	movs	r1, #1
 8082a4c:	8828      	ldrh	r0, [r5, #0]
 8082a4e:	f00a f9c8 	bl	808cde2 <digitalWrite>
    }
    ads2.begin();
 8082a52:	4823      	ldr	r0, [pc, #140]	; (8082ae0 <setup+0x534>)
 8082a54:	f004 fbdc 	bl	8087210 <_ZN16Adafruit_ADS10155beginEv>
    if(Wire.requestFrom(0x4A,1) == 0) { //if can't get 1 byte from ADC1, add it to the init error log
 8082a58:	f00a fa60 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8082a5c:	2201      	movs	r2, #1
 8082a5e:	214a      	movs	r1, #74	; 0x4a
 8082a60:	f00a f824 	bl	808caac <_ZN7TwoWire11requestFromEii>
 8082a64:	b988      	cbnz	r0, 8082a8a <setup+0x4de>
      //init_log += "AD1,";
      //digitalWrite(red_status_led, HIGH);
      //delay(200);
      //digitalWrite(red_status_led, LOW);
      //delay(200);
      Serial.println("Could not communicate with Adafruit_ADS1115 for CO");
 8082a66:	f009 fe3f 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082a6a:	4918      	ldr	r1, [pc, #96]	; (8082acc <setup+0x520>)
 8082a6c:	f008 fdcd 	bl	808b60a <_ZN5Print7printlnEPKc>
      if(debugging_enabled)
 8082a70:	6823      	ldr	r3, [r4, #0]
 8082a72:	b173      	cbz	r3, 8082a92 <setup+0x4e6>
        writeLogFile("Could not communicate with Adafruit_ADS1115 for CO");
 8082a74:	4915      	ldr	r1, [pc, #84]	; (8082acc <setup+0x520>)
 8082a76:	a823      	add	r0, sp, #140	; 0x8c
 8082a78:	f008 fb9f 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
 8082a7c:	a823      	add	r0, sp, #140	; 0x8c
 8082a7e:	f7ff f943 	bl	8081d08 <_Z12writeLogFile6String>
 8082a82:	a823      	add	r0, sp, #140	; 0x8c
 8082a84:	f008 fb52 	bl	808b12c <_ZN6StringD1Ev>
 8082a88:	e003      	b.n	8082a92 <setup+0x4e6>
    }
    else{
      ads2.setGain(GAIN_TWOTHIRDS);
 8082a8a:	2100      	movs	r1, #0
 8082a8c:	4814      	ldr	r0, [pc, #80]	; (8082ae0 <setup+0x534>)
 8082a8e:	f004 fbc6 	bl	808721e <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
    }
    //#endif

    if (!bme.begin()) {
 8082a92:	2177      	movs	r1, #119	; 0x77
 8082a94:	4813      	ldr	r0, [pc, #76]	; (8082ae4 <setup+0x538>)
 8082a96:	f006 faa5 	bl	8088fe4 <_ZN15Adafruit_BME6805beginEh>
 8082a9a:	bb38      	cbnz	r0, 8082aec <setup+0x540>
      Serial.println("Could not find a valid BME680 sensor, check wiring!");
 8082a9c:	f009 fe24 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082aa0:	4911      	ldr	r1, [pc, #68]	; (8082ae8 <setup+0x53c>)
 8082aa2:	f008 fdb2 	bl	808b60a <_ZN5Print7printlnEPKc>
      if(debugging_enabled)
 8082aa6:	6823      	ldr	r3, [r4, #0]
 8082aa8:	b38b      	cbz	r3, 8082b0e <setup+0x562>
          writeLogFile("Could not find a valid BME680 sensor, check wiring!");
 8082aaa:	490f      	ldr	r1, [pc, #60]	; (8082ae8 <setup+0x53c>)
 8082aac:	e026      	b.n	8082afc <setup+0x550>
 8082aae:	bf00      	nop
 8082ab0:	08091ce1 	.word	0x08091ce1
 8082ab4:	20000f08 	.word	0x20000f08
 8082ab8:	08091cf7 	.word	0x08091cf7
 8082abc:	20000634 	.word	0x20000634
 8082ac0:	08091d1b 	.word	0x08091d1b
 8082ac4:	08091d45 	.word	0x08091d45
 8082ac8:	20000ed0 	.word	0x20000ed0
 8082acc:	08091d61 	.word	0x08091d61
 8082ad0:	08091d94 	.word	0x08091d94
 8082ad4:	200004dc 	.word	0x200004dc
 8082ad8:	08091db7 	.word	0x08091db7
 8082adc:	08091de0 	.word	0x08091de0
 8082ae0:	20000ed6 	.word	0x20000ed6
 8082ae4:	20000b04 	.word	0x20000b04
 8082ae8:	08091dfb 	.word	0x08091dfb
      //while (1);
    }else{
      Serial.println("Initialized BME Sensor");
 8082aec:	f009 fdfc 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082af0:	4941      	ldr	r1, [pc, #260]	; (8082bf8 <setup+0x64c>)
 8082af2:	f008 fd8a 	bl	808b60a <_ZN5Print7printlnEPKc>
      if(debugging_enabled)
 8082af6:	6823      	ldr	r3, [r4, #0]
 8082af8:	b14b      	cbz	r3, 8082b0e <setup+0x562>
        writeLogFile("Initialized BME Sensor");
 8082afa:	493f      	ldr	r1, [pc, #252]	; (8082bf8 <setup+0x64c>)
 8082afc:	a823      	add	r0, sp, #140	; 0x8c
 8082afe:	f008 fb5c 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
 8082b02:	a823      	add	r0, sp, #140	; 0x8c
 8082b04:	f7ff f900 	bl	8081d08 <_Z12writeLogFile6String>
 8082b08:	a823      	add	r0, sp, #140	; 0x8c
 8082b0a:	f008 fb0f 	bl	808b12c <_ZN6StringD1Ev>
    }

    if(!t6713.begin()){
 8082b0e:	483b      	ldr	r0, [pc, #236]	; (8082bfc <setup+0x650>)
 8082b10:	f004 fc7a 	bl	8087408 <_ZN13Telaire_T67135beginEv>
 8082b14:	b980      	cbnz	r0, 8082b38 <setup+0x58c>
      Serial.println("Could not find a valid T6713 sensor, check wiring!");
 8082b16:	f009 fde7 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082b1a:	4939      	ldr	r1, [pc, #228]	; (8082c00 <setup+0x654>)
 8082b1c:	f008 fd75 	bl	808b60a <_ZN5Print7printlnEPKc>
      if(debugging_enabled)
 8082b20:	6823      	ldr	r3, [r4, #0]
 8082b22:	b14b      	cbz	r3, 8082b38 <setup+0x58c>
          writeLogFile("Could not find a valid T6713");
 8082b24:	4937      	ldr	r1, [pc, #220]	; (8082c04 <setup+0x658>)
 8082b26:	a823      	add	r0, sp, #140	; 0x8c
 8082b28:	f008 fb47 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
 8082b2c:	a823      	add	r0, sp, #140	; 0x8c
 8082b2e:	f7ff f8eb 	bl	8081d08 <_Z12writeLogFile6String>
 8082b32:	a823      	add	r0, sp, #140	; 0x8c
 8082b34:	f008 fafa 	bl	808b12c <_ZN6StringD1Ev>
    }
  //Serial.println("before bme setup");
    // Set up oversampling and filter initialization
    bme.setTemperatureOversampling(BME680_OS_8X);
 8082b38:	2104      	movs	r1, #4
 8082b3a:	4833      	ldr	r0, [pc, #204]	; (8082c08 <setup+0x65c>)
 8082b3c:	f006 fb50 	bl	80891e0 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh>
    bme.setHumidityOversampling(BME680_OS_2X);
 8082b40:	2102      	movs	r1, #2
 8082b42:	4831      	ldr	r0, [pc, #196]	; (8082c08 <setup+0x65c>)
 8082b44:	f006 fb59 	bl	80891fa <_ZN15Adafruit_BME68023setHumidityOversamplingEh>
    bme.setPressureOversampling(BME680_OS_4X);
 8082b48:	2103      	movs	r1, #3
 8082b4a:	482f      	ldr	r0, [pc, #188]	; (8082c08 <setup+0x65c>)
 8082b4c:	f006 fb62 	bl	8089214 <_ZN15Adafruit_BME68023setPressureOversamplingEh>
    bme.setIIRFilterSize(BME680_FILTER_SIZE_3);
 8082b50:	2102      	movs	r1, #2
 8082b52:	482d      	ldr	r0, [pc, #180]	; (8082c08 <setup+0x65c>)
 8082b54:	f006 fb6b 	bl	808922e <_ZN15Adafruit_BME68016setIIRFilterSizeEh>
    bme.setGasHeater(320, 150); // 320*C for 150 ms
 8082b58:	2296      	movs	r2, #150	; 0x96
 8082b5a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8082b5e:	482a      	ldr	r0, [pc, #168]	; (8082c08 <setup+0x65c>)
 8082b60:	f006 fb30 	bl	80891c4 <_ZN15Adafruit_BME68012setGasHeaterEtt>
        file.println(Time.timeStr());
        file.println(String(HEADER_STRING));
        file.close();
        file_started = 1;
    }*/
    resetESP();
 8082b64:	f7ff fcea 	bl	808253c <_Z8resetESPv>

    Serial.println("ESP reset!");
 8082b68:	f009 fdbe 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082b6c:	4927      	ldr	r1, [pc, #156]	; (8082c0c <setup+0x660>)
 8082b6e:	f008 fd4c 	bl	808b60a <_ZN5Print7printlnEPKc>

    Serial.print("FW Version: ");
 8082b72:	f009 fdb9 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082b76:	4926      	ldr	r1, [pc, #152]	; (8082c10 <setup+0x664>)
 8082b78:	f008 fd34 	bl	808b5e4 <_ZN5Print5printEPKc>
    Serial.println(APP_VERSION);
 8082b7c:	f009 fdb4 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082b80:	220a      	movs	r2, #10
 8082b82:	2107      	movs	r1, #7
 8082b84:	f008 fdaf 	bl	808b6e6 <_ZN5Print7printlnEii>
    Serial.print("Build: ");
 8082b88:	f009 fdae 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082b8c:	4921      	ldr	r1, [pc, #132]	; (8082c14 <setup+0x668>)
 8082b8e:	f008 fd29 	bl	808b5e4 <_ZN5Print5printEPKc>
    Serial.println(BUILD_VERSION);
 8082b92:	f009 fda9 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082b96:	220a      	movs	r2, #10
 8082b98:	210e      	movs	r1, #14
 8082b9a:	f008 fda4 	bl	808b6e6 <_ZN5Print7printlnEii>



    enableContinuousGPS();
 8082b9e:	f7fe fcfd 	bl	808159c <_Z19enableContinuousGPSv>

    if(google_location_en){
 8082ba2:	4b1d      	ldr	r3, [pc, #116]	; (8082c18 <setup+0x66c>)
 8082ba4:	681b      	ldr	r3, [r3, #0]
 8082ba6:	b15b      	cbz	r3, 8082bc0 <setup+0x614>
        Serial.println("Setting up google maps geolocation.");
 8082ba8:	f009 fd9e 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082bac:	491b      	ldr	r1, [pc, #108]	; (8082c1c <setup+0x670>)
 8082bae:	f008 fd2c 	bl	808b60a <_ZN5Print7printlnEPKc>
        locator.withSubscribe(locationCallback).withLocatePeriodic(5); //setup google maps geolocation
 8082bb2:	491b      	ldr	r1, [pc, #108]	; (8082c20 <setup+0x674>)
 8082bb4:	481b      	ldr	r0, [pc, #108]	; (8082c24 <setup+0x678>)
 8082bb6:	f006 fedf 	bl	8089978 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE>
 8082bba:	2105      	movs	r1, #5
 8082bbc:	f006 fdaa 	bl	8089714 <_ZN23GoogleMapsDeviceLocator18withLocatePeriodicEm>
#define SYSTEM_VERSION_121RC1
#define SYSTEM_VERSION_121RC2
#define SYSTEM_VERSION_121RC3
#define SYSTEM_VERSION_121

typedef struct __attribute__((packed)) SystemVersionInfo
 8082bc0:	231c      	movs	r3, #28
    static bool enableFeature(const WiFiTesterFeature feature);

    String version()
    {
        SystemVersionInfo info;
        system_version_info(&info, nullptr);
 8082bc2:	2100      	movs	r1, #0
 8082bc4:	a823      	add	r0, sp, #140	; 0x8c
 8082bc6:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
 8082bca:	f007 fe35 	bl	808a838 <system_version_info>
        return String(info.versionString);
 8082bce:	a925      	add	r1, sp, #148	; 0x94
 8082bd0:	a81f      	add	r0, sp, #124	; 0x7c
 8082bd2:	f008 faf2 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
    }

    
    Log.info("System version: %s", (const char*)System.version());
 8082bd6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8082bd8:	4913      	ldr	r1, [pc, #76]	; (8082c28 <setup+0x67c>)
 8082bda:	4814      	ldr	r0, [pc, #80]	; (8082c2c <setup+0x680>)
 8082bdc:	f7fe f8e2 	bl	8080da4 <_ZNK5spark6Logger4infoEPKcz>
 8082be0:	a81f      	add	r0, sp, #124	; 0x7c
 8082be2:	f008 faa3 	bl	808b12c <_ZN6StringD1Ev>
    status_word.status_int  = 0;
    status_word.status_int |= (APP_VERSION << 12) & 0xFF00;
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
    //status_word.status_int |= 0x6500;

    String init_log; //intialization error log
 8082be6:	a803      	add	r0, sp, #12
 8082be8:	f008 faa0 	bl	808b12c <_ZN6StringD1Ev>

    
    Log.info("System version: %s", (const char*)System.version());
    

}
 8082bec:	b02a      	add	sp, #168	; 0xa8
 8082bee:	bd70      	pop	{r4, r5, r6, pc}
    //check power
    powerCheck.loop();

    
    if(car_topper_power_en && powerCheck.getHasPower() == 0){
        goToSleepBattery();
 8082bf0:	f7ff fc48 	bl	8082484 <_Z16goToSleepBatteryv>
 8082bf4:	e544      	b.n	8082680 <setup+0xd4>
 8082bf6:	bf00      	nop
 8082bf8:	08091e2f 	.word	0x08091e2f
 8082bfc:	20000f8c 	.word	0x20000f8c
 8082c00:	08091e46 	.word	0x08091e46
 8082c04:	08091e79 	.word	0x08091e79
 8082c08:	20000b04 	.word	0x20000b04
 8082c0c:	08091e96 	.word	0x08091e96
 8082c10:	08091ea1 	.word	0x08091ea1
 8082c14:	08091eae 	.word	0x08091eae
 8082c18:	20000f80 	.word	0x20000f80
 8082c1c:	08091eb6 	.word	0x08091eb6
 8082c20:	08080bed 	.word	0x08080bed
 8082c24:	20000f30 	.word	0x20000f30
 8082c28:	08091eda 	.word	0x08091eda
 8082c2c:	200010f4 	.word	0x200010f4

08082c30 <_Z24serialGetWifiCredentialsv>:
    pmic.setChargeCurrent(bit7, bit6, bit5, bit4, bit3, bit2);
    chargeCurrent = pmic.getChargeCurrent();
    Serial.printf("new charge current of %d mA\n\r", total_current);
}

void serialGetWifiCredentials(void){
 8082c30:	b530      	push	{r4, r5, lr}
 8082c32:	4d5b      	ldr	r5, [pc, #364]	; (8082da0 <_Z24serialGetWifiCredentialsv+0x170>)
 8082c34:	b095      	sub	sp, #84	; 0x54
    Serial.print("Current stored ssid: ");
 8082c36:	f009 fd57 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082c3a:	495a      	ldr	r1, [pc, #360]	; (8082da4 <_Z24serialGetWifiCredentialsv+0x174>)
 8082c3c:	f008 fcd2 	bl	808b5e4 <_ZN5Print5printEPKc>
 8082c40:	4c59      	ldr	r4, [pc, #356]	; (8082da8 <_Z24serialGetWifiCredentialsv+0x178>)
    Serial.println(ssid);
 8082c42:	f009 fd51 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082c46:	6829      	ldr	r1, [r5, #0]
 8082c48:	f008 fcdf 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.print("Current stored password: ");
 8082c4c:	f009 fd4c 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082c50:	4956      	ldr	r1, [pc, #344]	; (8082dac <_Z24serialGetWifiCredentialsv+0x17c>)
 8082c52:	f008 fcc7 	bl	808b5e4 <_ZN5Print5printEPKc>
    Serial.println(password);
 8082c56:	f009 fd47 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082c5a:	6821      	ldr	r1, [r4, #0]
 8082c5c:	f008 fcd5 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("Please enter password in order to make changes.\n\r");
 8082c60:	f009 fd42 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082c64:	4952      	ldr	r1, [pc, #328]	; (8082db0 <_Z24serialGetWifiCredentialsv+0x180>)
 8082c66:	f008 fcd0 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082c6a:	f009 fd3d 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082c6e:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082c72:	f008 fe4e 	bl	808b912 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082c76:	f009 fd37 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082c7a:	220d      	movs	r2, #13
 8082c7c:	4601      	mov	r1, r0
 8082c7e:	4668      	mov	r0, sp
 8082c80:	f008 feb4 	bl	808b9ec <_ZN6Stream15readStringUntilEc>
    if(tempString.equals("bould")){
 8082c84:	494b      	ldr	r1, [pc, #300]	; (8082db4 <_Z24serialGetWifiCredentialsv+0x184>)
 8082c86:	4668      	mov	r0, sp
 8082c88:	f008 fbec 	bl	808b464 <_ZNK6String6equalsEPKc>
 8082c8c:	2800      	cmp	r0, #0
 8082c8e:	f000 8081 	beq.w	8082d94 <_Z24serialGetWifiCredentialsv+0x164>
        Serial.println("Password correct!");
 8082c92:	f009 fd29 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082c96:	4948      	ldr	r1, [pc, #288]	; (8082db8 <_Z24serialGetWifiCredentialsv+0x188>)
 8082c98:	f008 fcb7 	bl	808b60a <_ZN5Print7printlnEPKc>
        Serial.println("Enter new ssid:");
 8082c9c:	f009 fd24 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082ca0:	4946      	ldr	r1, [pc, #280]	; (8082dbc <_Z24serialGetWifiCredentialsv+0x18c>)
 8082ca2:	f008 fcb2 	bl	808b60a <_ZN5Print7printlnEPKc>
        Serial.setTimeout(50000);
 8082ca6:	f009 fd1f 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082caa:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082cae:	f008 fe30 	bl	808b912 <_ZN6Stream10setTimeoutEm>
        String tempSsid = Serial.readStringUntil('\r');
 8082cb2:	f009 fd19 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082cb6:	220d      	movs	r2, #13
 8082cb8:	4601      	mov	r1, r0
 8082cba:	a804      	add	r0, sp, #16
 8082cbc:	f008 fe96 	bl	808b9ec <_ZN6Stream15readStringUntilEc>
        Serial.print("Your new ssid will be: ");
 8082cc0:	f009 fd12 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082cc4:	493e      	ldr	r1, [pc, #248]	; (8082dc0 <_Z24serialGetWifiCredentialsv+0x190>)
 8082cc6:	f008 fc8d 	bl	808b5e4 <_ZN5Print5printEPKc>
        Serial.println(tempSsid);
 8082cca:	f009 fd0d 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082cce:	9904      	ldr	r1, [sp, #16]
 8082cd0:	f008 fc9b 	bl	808b60a <_ZN5Print7printlnEPKc>
        Serial.println("Is this okay?(y or n)");
 8082cd4:	f009 fd08 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082cd8:	493a      	ldr	r1, [pc, #232]	; (8082dc4 <_Z24serialGetWifiCredentialsv+0x194>)
 8082cda:	f008 fc96 	bl	808b60a <_ZN5Print7printlnEPKc>
        String ok = Serial.readStringUntil('\r');
 8082cde:	f009 fd03 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082ce2:	220d      	movs	r2, #13
 8082ce4:	4601      	mov	r1, r0
 8082ce6:	a808      	add	r0, sp, #32
 8082ce8:	f008 fe80 	bl	808b9ec <_ZN6Stream15readStringUntilEc>
        if(ok.equals("y")){
 8082cec:	4936      	ldr	r1, [pc, #216]	; (8082dc8 <_Z24serialGetWifiCredentialsv+0x198>)
 8082cee:	a808      	add	r0, sp, #32
 8082cf0:	f008 fbb8 	bl	808b464 <_ZNK6String6equalsEPKc>
 8082cf4:	2800      	cmp	r0, #0
 8082cf6:	d042      	beq.n	8082d7e <_Z24serialGetWifiCredentialsv+0x14e>
            Serial.println("Saving new ssid");
 8082cf8:	f009 fcf6 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082cfc:	4933      	ldr	r1, [pc, #204]	; (8082dcc <_Z24serialGetWifiCredentialsv+0x19c>)
 8082cfe:	f008 fc84 	bl	808b60a <_ZN5Print7printlnEPKc>
            ssid = tempSsid;
 8082d02:	a904      	add	r1, sp, #16
 8082d04:	4628      	mov	r0, r5
 8082d06:	f008 fa88 	bl	808b21a <_ZN6StringaSERKS_>
            Serial.println("Enter new password");
 8082d0a:	f009 fced 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082d0e:	4930      	ldr	r1, [pc, #192]	; (8082dd0 <_Z24serialGetWifiCredentialsv+0x1a0>)
 8082d10:	f008 fc7b 	bl	808b60a <_ZN5Print7printlnEPKc>
            String tempPassword = Serial.readStringUntil('\r');
 8082d14:	f009 fce8 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082d18:	220d      	movs	r2, #13
 8082d1a:	4601      	mov	r1, r0
 8082d1c:	a80c      	add	r0, sp, #48	; 0x30
 8082d1e:	f008 fe65 	bl	808b9ec <_ZN6Stream15readStringUntilEc>
            Serial.print("Your new password will be: ");
 8082d22:	f009 fce1 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082d26:	492b      	ldr	r1, [pc, #172]	; (8082dd4 <_Z24serialGetWifiCredentialsv+0x1a4>)
 8082d28:	f008 fc5c 	bl	808b5e4 <_ZN5Print5printEPKc>
            Serial.println(tempPassword);
 8082d2c:	f009 fcdc 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082d30:	990c      	ldr	r1, [sp, #48]	; 0x30
 8082d32:	f008 fc6a 	bl	808b60a <_ZN5Print7printlnEPKc>
            String ok = Serial.readStringUntil('\r');
 8082d36:	f009 fcd7 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082d3a:	220d      	movs	r2, #13
 8082d3c:	4601      	mov	r1, r0
 8082d3e:	a810      	add	r0, sp, #64	; 0x40
 8082d40:	f008 fe54 	bl	808b9ec <_ZN6Stream15readStringUntilEc>
            if(ok.equals("y")){
 8082d44:	4920      	ldr	r1, [pc, #128]	; (8082dc8 <_Z24serialGetWifiCredentialsv+0x198>)
 8082d46:	a810      	add	r0, sp, #64	; 0x40
 8082d48:	f008 fb8c 	bl	808b464 <_ZNK6String6equalsEPKc>
 8082d4c:	b158      	cbz	r0, 8082d66 <_Z24serialGetWifiCredentialsv+0x136>
                Serial.println("Saving new password");
 8082d4e:	f009 fccb 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082d52:	4921      	ldr	r1, [pc, #132]	; (8082dd8 <_Z24serialGetWifiCredentialsv+0x1a8>)
 8082d54:	f008 fc59 	bl	808b60a <_ZN5Print7printlnEPKc>
                password = tempPassword;
 8082d58:	a90c      	add	r1, sp, #48	; 0x30
 8082d5a:	4620      	mov	r0, r4
 8082d5c:	f008 fa5d 	bl	808b21a <_ZN6StringaSERKS_>
                sendWifiInfo();
 8082d60:	f7ff f95e 	bl	8082020 <_Z12sendWifiInfov>
 8082d64:	e004      	b.n	8082d70 <_Z24serialGetWifiCredentialsv+0x140>
            }else{
                Serial.println("okay, no problem\n\r");
 8082d66:	f009 fcbf 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082d6a:	491c      	ldr	r1, [pc, #112]	; (8082ddc <_Z24serialGetWifiCredentialsv+0x1ac>)
 8082d6c:	f008 fc4d 	bl	808b60a <_ZN5Print7printlnEPKc>
            ssid = tempSsid;
            Serial.println("Enter new password");
            String tempPassword = Serial.readStringUntil('\r');
            Serial.print("Your new password will be: ");
            Serial.println(tempPassword);
            String ok = Serial.readStringUntil('\r');
 8082d70:	a810      	add	r0, sp, #64	; 0x40
 8082d72:	f008 f9db 	bl	808b12c <_ZN6StringD1Ev>
        String ok = Serial.readStringUntil('\r');
        if(ok.equals("y")){
            Serial.println("Saving new ssid");
            ssid = tempSsid;
            Serial.println("Enter new password");
            String tempPassword = Serial.readStringUntil('\r');
 8082d76:	a80c      	add	r0, sp, #48	; 0x30
 8082d78:	f008 f9d8 	bl	808b12c <_ZN6StringD1Ev>
 8082d7c:	e004      	b.n	8082d88 <_Z24serialGetWifiCredentialsv+0x158>
                sendWifiInfo();
            }else{
                Serial.println("okay, no problem\n\r");
            }
        }else{
            Serial.println("okay, no problem\n\r");
 8082d7e:	f009 fcb3 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082d82:	4916      	ldr	r1, [pc, #88]	; (8082ddc <_Z24serialGetWifiCredentialsv+0x1ac>)
 8082d84:	f008 fc41 	bl	808b60a <_ZN5Print7printlnEPKc>
            return;
 8082d88:	a808      	add	r0, sp, #32
 8082d8a:	f008 f9cf 	bl	808b12c <_ZN6StringD1Ev>
 8082d8e:	a804      	add	r0, sp, #16
 8082d90:	f008 f9cc 	bl	808b12c <_ZN6StringD1Ev>
    Serial.println(ssid);
    Serial.print("Current stored password: ");
    Serial.println(password);
    Serial.println("Please enter password in order to make changes.\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082d94:	4668      	mov	r0, sp
 8082d96:	f008 f9c9 	bl	808b12c <_ZN6StringD1Ev>
        }else{
            Serial.println("okay, no problem\n\r");
            return;
        }
    }
}
 8082d9a:	b015      	add	sp, #84	; 0x54
 8082d9c:	bd30      	pop	{r4, r5, pc}
 8082d9e:	bf00      	nop
 8082da0:	20000614 	.word	0x20000614
 8082da4:	08091f32 	.word	0x08091f32
 8082da8:	200005e0 	.word	0x200005e0
 8082dac:	08091f48 	.word	0x08091f48
 8082db0:	08091f62 	.word	0x08091f62
 8082db4:	08091f94 	.word	0x08091f94
 8082db8:	08091f9a 	.word	0x08091f9a
 8082dbc:	08091fac 	.word	0x08091fac
 8082dc0:	08091fbc 	.word	0x08091fbc
 8082dc4:	08091fd4 	.word	0x08091fd4
 8082dc8:	08094976 	.word	0x08094976
 8082dcc:	08091fea 	.word	0x08091fea
 8082dd0:	08091ffa 	.word	0x08091ffa
 8082dd4:	0809200d 	.word	0x0809200d
 8082dd8:	08092029 	.word	0x08092029
 8082ddc:	0809203d 	.word	0x0809203d

08082de0 <_Z26serialSetSensibleIotEnablev>:
void serialSetSensibleIotEnable(void){
 8082de0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    Serial.println("Please enter password in order to enable data push to Sensible Iot");
 8082de2:	f009 fc81 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082de6:	4919      	ldr	r1, [pc, #100]	; (8082e4c <_Z26serialSetSensibleIotEnablev+0x6c>)
 8082de8:	f008 fc0f 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082dec:	f009 fc7c 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082df0:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082df4:	f008 fd8d 	bl	808b912 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082df8:	f009 fc76 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082dfc:	220d      	movs	r2, #13
 8082dfe:	4601      	mov	r1, r0
 8082e00:	4668      	mov	r0, sp
 8082e02:	f008 fdf3 	bl	808b9ec <_ZN6Stream15readStringUntilEc>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8082e06:	4912      	ldr	r1, [pc, #72]	; (8082e50 <_Z26serialSetSensibleIotEnablev+0x70>)
 8082e08:	4668      	mov	r0, sp
 8082e0a:	f008 fb2b 	bl	808b464 <_ZNK6String6equalsEPKc>
    if(tempString == "imsensible"){
 8082e0e:	b198      	cbz	r0, 8082e38 <_Z26serialSetSensibleIotEnablev+0x58>
        Serial.println("Password correct!");
 8082e10:	f009 fc6a 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082e14:	490f      	ldr	r1, [pc, #60]	; (8082e54 <_Z26serialSetSensibleIotEnablev+0x74>)
 8082e16:	f008 fbf8 	bl	808b60a <_ZN5Print7printlnEPKc>
        Serial.println("Enabling sensible iot data push.");
        sensible_iot_en = 1;
 8082e1a:	4c0f      	ldr	r4, [pc, #60]	; (8082e58 <_Z26serialSetSensibleIotEnablev+0x78>)
    Serial.println("Please enter password in order to enable data push to Sensible Iot");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    if(tempString == "imsensible"){
        Serial.println("Password correct!");
        Serial.println("Enabling sensible iot data push.");
 8082e1c:	f009 fc64 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082e20:	490e      	ldr	r1, [pc, #56]	; (8082e5c <_Z26serialSetSensibleIotEnablev+0x7c>)
 8082e22:	f008 fbf2 	bl	808b60a <_ZN5Print7printlnEPKc>
        sensible_iot_en = 1;
 8082e26:	2301      	movs	r3, #1
 8082e28:	6023      	str	r3, [r4, #0]
        EEPROM.put(SENSIBLEIOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 8082e2a:	f00a f84b 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8082e2e:	4621      	mov	r1, r4
 8082e30:	208c      	movs	r0, #140	; 0x8c
 8082e32:	f7fd ff67 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 8082e36:	e004      	b.n	8082e42 <_Z26serialSetSensibleIotEnablev+0x62>
    }else{
        Serial.println("\n\rIncorrect password!");
 8082e38:	f009 fc56 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082e3c:	4908      	ldr	r1, [pc, #32]	; (8082e60 <_Z26serialSetSensibleIotEnablev+0x80>)
 8082e3e:	f008 fbe4 	bl	808b60a <_ZN5Print7printlnEPKc>
    }
}
void serialSetSensibleIotEnable(void){
    Serial.println("Please enter password in order to enable data push to Sensible Iot");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082e42:	4668      	mov	r0, sp
 8082e44:	f008 f972 	bl	808b12c <_ZN6StringD1Ev>
        sensible_iot_en = 1;
        EEPROM.put(SENSIBLEIOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
 8082e48:	b004      	add	sp, #16
 8082e4a:	bd10      	pop	{r4, pc}
 8082e4c:	08092050 	.word	0x08092050
 8082e50:	08092093 	.word	0x08092093
 8082e54:	08091f9a 	.word	0x08091f9a
 8082e58:	20000cdc 	.word	0x20000cdc
 8082e5c:	0809209e 	.word	0x0809209e
 8082e60:	080920bf 	.word	0x080920bf

08082e64 <_Z17serialGetDeviceIdv>:

void serialGetDeviceId(void){
 8082e64:	b530      	push	{r4, r5, lr}
 8082e66:	b089      	sub	sp, #36	; 0x24

    Serial.println();
 8082e68:	f009 fc3e 	bl	808c6e8 <_Z16_fetch_usbserialv>
    Serial.print("Current Device ID:");
    Serial.println(DEVICE_id);
 8082e6c:	4c35      	ldr	r4, [pc, #212]	; (8082f44 <_Z17serialGetDeviceIdv+0xe0>)
    }
}

void serialGetDeviceId(void){

    Serial.println();
 8082e6e:	f008 fbc0 	bl	808b5f2 <_ZN5Print7printlnEv>
    Serial.print("Current Device ID:");
 8082e72:	f009 fc39 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082e76:	4934      	ldr	r1, [pc, #208]	; (8082f48 <_Z17serialGetDeviceIdv+0xe4>)
 8082e78:	f008 fbb4 	bl	808b5e4 <_ZN5Print5printEPKc>
    Serial.println(DEVICE_id);
 8082e7c:	f009 fc34 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082e80:	220a      	movs	r2, #10
 8082e82:	6821      	ldr	r1, [r4, #0]
 8082e84:	f008 fc2f 	bl	808b6e6 <_ZN5Print7printlnEii>
    Serial.println("Please enter password in order to change the ID");
 8082e88:	f009 fc2e 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082e8c:	492f      	ldr	r1, [pc, #188]	; (8082f4c <_Z17serialGetDeviceIdv+0xe8>)
 8082e8e:	f008 fbbc 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082e92:	f009 fc29 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082e96:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082e9a:	f008 fd3a 	bl	808b912 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082e9e:	f009 fc23 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082ea2:	220d      	movs	r2, #13
 8082ea4:	4601      	mov	r1, r0
 8082ea6:	4668      	mov	r0, sp
 8082ea8:	f008 fda0 	bl	808b9ec <_ZN6Stream15readStringUntilEc>
 8082eac:	4928      	ldr	r1, [pc, #160]	; (8082f50 <_Z17serialGetDeviceIdv+0xec>)
 8082eae:	4668      	mov	r0, sp
 8082eb0:	f008 fad8 	bl	808b464 <_ZNK6String6equalsEPKc>


    if(tempString == "bould"){
 8082eb4:	2800      	cmp	r0, #0
 8082eb6:	d03a      	beq.n	8082f2e <_Z17serialGetDeviceIdv+0xca>
        Serial.println("Password correct!");
 8082eb8:	f009 fc16 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082ebc:	4925      	ldr	r1, [pc, #148]	; (8082f54 <_Z17serialGetDeviceIdv+0xf0>)
 8082ebe:	f008 fba4 	bl	808b60a <_ZN5Print7printlnEPKc>
        Serial.println("Enter new Device ID:");
 8082ec2:	f009 fc11 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082ec6:	4924      	ldr	r1, [pc, #144]	; (8082f58 <_Z17serialGetDeviceIdv+0xf4>)
 8082ec8:	f008 fb9f 	bl	808b60a <_ZN5Print7printlnEPKc>
        String tempString = Serial.readStringUntil('\r');
 8082ecc:	f009 fc0c 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082ed0:	220d      	movs	r2, #13
 8082ed2:	4601      	mov	r1, r0
 8082ed4:	a804      	add	r0, sp, #16
 8082ed6:	f008 fd89 	bl	808b9ec <_ZN6Stream15readStringUntilEc>
        int tempValue = tempString.toInt();
 8082eda:	a804      	add	r0, sp, #16
 8082edc:	f008 fb34 	bl	808b548 <_ZNK6String5toIntEv>
 8082ee0:	4605      	mov	r5, r0
        Serial.println("");
 8082ee2:	f009 fc01 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082ee6:	491d      	ldr	r1, [pc, #116]	; (8082f5c <_Z17serialGetDeviceIdv+0xf8>)
 8082ee8:	f008 fb8f 	bl	808b60a <_ZN5Print7printlnEPKc>
        if(tempValue > MIN_DEVICE_ID_NUMBER && tempValue < MAX_DEVICE_ID_NUMBER){
 8082eec:	f242 730c 	movw	r3, #9996	; 0x270c
 8082ef0:	1eaa      	subs	r2, r5, #2
 8082ef2:	429a      	cmp	r2, r3
 8082ef4:	d812      	bhi.n	8082f1c <_Z17serialGetDeviceIdv+0xb8>
            Serial.print("\n\rNew Device ID:");
 8082ef6:	f009 fbf7 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082efa:	4919      	ldr	r1, [pc, #100]	; (8082f60 <_Z17serialGetDeviceIdv+0xfc>)
 8082efc:	f008 fb72 	bl	808b5e4 <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 8082f00:	f009 fbf2 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082f04:	4629      	mov	r1, r5
 8082f06:	220a      	movs	r2, #10
 8082f08:	f008 fbed 	bl	808b6e6 <_ZN5Print7printlnEii>
            DEVICE_id = tempValue;
 8082f0c:	6025      	str	r5, [r4, #0]
            EEPROM.put(DEVICE_ID_MEM_ADDRESS, DEVICE_id);
 8082f0e:	f009 ffd9 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8082f12:	4621      	mov	r1, r4
 8082f14:	2000      	movs	r0, #0
 8082f16:	f7fd fef5 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 8082f1a:	e004      	b.n	8082f26 <_Z17serialGetDeviceIdv+0xc2>
        }else{
            Serial.println("\n\rInvalid value!");
 8082f1c:	f009 fbe4 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082f20:	4910      	ldr	r1, [pc, #64]	; (8082f64 <_Z17serialGetDeviceIdv+0x100>)
 8082f22:	f008 fb72 	bl	808b60a <_ZN5Print7printlnEPKc>


    if(tempString == "bould"){
        Serial.println("Password correct!");
        Serial.println("Enter new Device ID:");
        String tempString = Serial.readStringUntil('\r');
 8082f26:	a804      	add	r0, sp, #16
 8082f28:	f008 f900 	bl	808b12c <_ZN6StringD1Ev>
 8082f2c:	e004      	b.n	8082f38 <_Z17serialGetDeviceIdv+0xd4>
            EEPROM.put(DEVICE_ID_MEM_ADDRESS, DEVICE_id);
        }else{
            Serial.println("\n\rInvalid value!");
        }
    }else{
        Serial.println("\n\rIncorrect password!");
 8082f2e:	f009 fbdb 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082f32:	490d      	ldr	r1, [pc, #52]	; (8082f68 <_Z17serialGetDeviceIdv+0x104>)
 8082f34:	f008 fb69 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println();
    Serial.print("Current Device ID:");
    Serial.println(DEVICE_id);
    Serial.println("Please enter password in order to change the ID");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082f38:	4668      	mov	r0, sp
 8082f3a:	f008 f8f7 	bl	808b12c <_ZN6StringD1Ev>
            Serial.println("\n\rInvalid value!");
        }
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
 8082f3e:	b009      	add	sp, #36	; 0x24
 8082f40:	bd30      	pop	{r4, r5, pc}
 8082f42:	bf00      	nop
 8082f44:	20000488 	.word	0x20000488
 8082f48:	080920d5 	.word	0x080920d5
 8082f4c:	080920e8 	.word	0x080920e8
 8082f50:	08091f94 	.word	0x08091f94
 8082f54:	08091f9a 	.word	0x08091f9a
 8082f58:	08092118 	.word	0x08092118
 8082f5c:	08094308 	.word	0x08094308
 8082f60:	0809212d 	.word	0x0809212d
 8082f64:	0809213e 	.word	0x0809213e
 8082f68:	080920bf 	.word	0x080920bf

08082f6c <_Z19serialResetSettingsv>:

void serialResetSettings(void){
 8082f6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    Serial.println();
 8082f6e:	f009 fbbb 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082f72:	f008 fb3e 	bl	808b5f2 <_ZN5Print7printlnEv>
    Serial.println("Please enter password in order to apply default settings");
 8082f76:	f009 fbb7 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082f7a:	4914      	ldr	r1, [pc, #80]	; (8082fcc <_Z19serialResetSettingsv+0x60>)
 8082f7c:	f008 fb45 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082f80:	f009 fbb2 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082f84:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082f88:	f008 fcc3 	bl	808b912 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082f8c:	f009 fbac 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082f90:	220d      	movs	r2, #13
 8082f92:	4601      	mov	r1, r0
 8082f94:	4668      	mov	r0, sp
 8082f96:	f008 fd29 	bl	808b9ec <_ZN6Stream15readStringUntilEc>
 8082f9a:	490d      	ldr	r1, [pc, #52]	; (8082fd0 <_Z19serialResetSettingsv+0x64>)
 8082f9c:	4668      	mov	r0, sp
 8082f9e:	f008 fa61 	bl	808b464 <_ZNK6String6equalsEPKc>


    if(tempString == "bould"){
 8082fa2:	b138      	cbz	r0, 8082fb4 <_Z19serialResetSettingsv+0x48>
        Serial.println("Password correct, resetting all settings to default!  Please reset your ID to the one shown on your enclosure.");
 8082fa4:	f009 fba0 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082fa8:	490a      	ldr	r1, [pc, #40]	; (8082fd4 <_Z19serialResetSettingsv+0x68>)
 8082faa:	f008 fb2e 	bl	808b60a <_ZN5Print7printlnEPKc>
        writeDefaultSettings();
 8082fae:	f7fd ffcb 	bl	8080f48 <_Z20writeDefaultSettingsv>
 8082fb2:	e004      	b.n	8082fbe <_Z19serialResetSettingsv+0x52>
    }else{
        Serial.println("\n\rIncorrect password!");
 8082fb4:	f009 fb98 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082fb8:	4907      	ldr	r1, [pc, #28]	; (8082fd8 <_Z19serialResetSettingsv+0x6c>)
 8082fba:	f008 fb26 	bl	808b60a <_ZN5Print7printlnEPKc>
void serialResetSettings(void){

    Serial.println();
    Serial.println("Please enter password in order to apply default settings");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082fbe:	4668      	mov	r0, sp
 8082fc0:	f008 f8b4 	bl	808b12c <_ZN6StringD1Ev>
        Serial.println("Password correct, resetting all settings to default!  Please reset your ID to the one shown on your enclosure.");
        writeDefaultSettings();
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
 8082fc4:	b005      	add	sp, #20
 8082fc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8082fca:	bf00      	nop
 8082fcc:	0809214f 	.word	0x0809214f
 8082fd0:	08091f94 	.word	0x08091f94
 8082fd4:	08092188 	.word	0x08092188
 8082fd8:	080920bf 	.word	0x080920bf

08082fdc <_Z17serialGetTimeDatev>:

void serialGetTimeDate(void){
 8082fdc:	b510      	push	{r4, lr}
 8082fde:	b088      	sub	sp, #32
    Serial.println("Enter new Device time and date (10 digit epoch timestamp):");
 8082fe0:	f009 fb82 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082fe4:	491f      	ldr	r1, [pc, #124]	; (8083064 <_Z17serialGetTimeDatev+0x88>)
 8082fe6:	f008 fb10 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082fea:	f009 fb7d 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082fee:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082ff2:	f008 fc8e 	bl	808b912 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082ff6:	f009 fb77 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8082ffa:	220d      	movs	r2, #13
 8082ffc:	4601      	mov	r1, r0
 8082ffe:	4668      	mov	r0, sp
 8083000:	f008 fcf4 	bl	808b9ec <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8083004:	4668      	mov	r0, sp
 8083006:	f008 fa9f 	bl	808b548 <_ZNK6String5toIntEv>
 808300a:	4604      	mov	r4, r0
    Serial.println("");
 808300c:	f009 fb6c 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083010:	4915      	ldr	r1, [pc, #84]	; (8083068 <_Z17serialGetTimeDatev+0x8c>)
 8083012:	f008 fafa 	bl	808b60a <_ZN5Print7printlnEPKc>
    if(tempValue > 966012661 && tempValue < 4121686261){       //min is the year 2000, max is the year 2100
 8083016:	4b15      	ldr	r3, [pc, #84]	; (808306c <_Z17serialGetTimeDatev+0x90>)
 8083018:	429c      	cmp	r4, r3
 808301a:	dd18      	ble.n	808304e <_Z17serialGetTimeDatev+0x72>
        Time.setTime(tempValue);
 808301c:	4620      	mov	r0, r4
 808301e:	f008 fd73 	bl	808bb08 <_ZN9TimeClass7setTimeEl>
        Serial.print("\n\rNew Device Time:");
 8083022:	f009 fb61 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083026:	4912      	ldr	r1, [pc, #72]	; (8083070 <_Z17serialGetTimeDatev+0x94>)
 8083028:	f008 fadc 	bl	808b5e4 <_ZN5Print5printEPKc>
        Serial.println(Time.timeStr());
 808302c:	f009 fb5c 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083030:	4604      	mov	r4, r0
 8083032:	f008 fe46 	bl	808bcc2 <_ZN9TimeClass3nowEv>
 8083036:	4601      	mov	r1, r0
 8083038:	a804      	add	r0, sp, #16
 808303a:	f008 fd6f 	bl	808bb1c <_ZN9TimeClass7timeStrEl>
 808303e:	9904      	ldr	r1, [sp, #16]
 8083040:	4620      	mov	r0, r4
 8083042:	f008 fae2 	bl	808b60a <_ZN5Print7printlnEPKc>
 8083046:	a804      	add	r0, sp, #16
 8083048:	f008 f870 	bl	808b12c <_ZN6StringD1Ev>
 808304c:	e004      	b.n	8083058 <_Z17serialGetTimeDatev+0x7c>
    }else{
        Serial.println("\n\rInvalid value!");
 808304e:	f009 fb4b 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083052:	4908      	ldr	r1, [pc, #32]	; (8083074 <_Z17serialGetTimeDatev+0x98>)
 8083054:	f008 fad9 	bl	808b60a <_ZN5Print7printlnEPKc>
}

void serialGetTimeDate(void){
    Serial.println("Enter new Device time and date (10 digit epoch timestamp):");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083058:	4668      	mov	r0, sp
 808305a:	f008 f867 	bl	808b12c <_ZN6StringD1Ev>
        Serial.print("\n\rNew Device Time:");
        Serial.println(Time.timeStr());
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 808305e:	b008      	add	sp, #32
 8083060:	bd10      	pop	{r4, pc}
 8083062:	bf00      	nop
 8083064:	080921f7 	.word	0x080921f7
 8083068:	08094308 	.word	0x08094308
 808306c:	39942ef5 	.word	0x39942ef5
 8083070:	08092232 	.word	0x08092232
 8083074:	0809213e 	.word	0x0809213e

08083078 <_Z13serialGetZonev>:

void serialGetZone(void){
 8083078:	b510      	push	{r4, lr}
 808307a:	b086      	sub	sp, #24
    Serial.println("Enter new Device time zone (-12.0 to 14.0)");
 808307c:	f009 fb34 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083080:	491f      	ldr	r1, [pc, #124]	; (8083100 <_Z13serialGetZonev+0x88>)
 8083082:	f008 fac2 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8083086:	f009 fb2f 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808308a:	f24c 3150 	movw	r1, #50000	; 0xc350
 808308e:	f008 fc40 	bl	808b912 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083092:	f009 fb29 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083096:	220d      	movs	r2, #13
 8083098:	4601      	mov	r1, r0
 808309a:	a802      	add	r0, sp, #8
 808309c:	f008 fca6 	bl	808b9ec <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 80830a0:	a802      	add	r0, sp, #8
 80830a2:	f008 fa51 	bl	808b548 <_ZNK6String5toIntEv>
 80830a6:	9001      	str	r0, [sp, #4]
    Serial.println("");
 80830a8:	f009 fb1e 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80830ac:	4915      	ldr	r1, [pc, #84]	; (8083104 <_Z13serialGetZonev+0x8c>)
 80830ae:	f008 faac 	bl	808b60a <_ZN5Print7printlnEPKc>
    if(tempValue >= -12 && tempValue <= 14){       //min is the year 2000, max is the year 2100
 80830b2:	9801      	ldr	r0, [sp, #4]
 80830b4:	f100 030c 	add.w	r3, r0, #12
 80830b8:	2b1a      	cmp	r3, #26
 80830ba:	d817      	bhi.n	80830ec <_Z13serialGetZonev+0x74>
        Time.zone(tempValue);
 80830bc:	f00a fe7a 	bl	808ddb4 <__aeabi_i2f>
 80830c0:	f008 fd06 	bl	808bad0 <_ZN9TimeClass4zoneEf>
        Serial.print("\n\rNew Device time zone:");
        Serial.println(tempValue);
 80830c4:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();
    Serial.println("");
    if(tempValue >= -12 && tempValue <= 14){       //min is the year 2000, max is the year 2100
        Time.zone(tempValue);
        Serial.print("\n\rNew Device time zone:");
 80830c6:	f009 fb0f 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80830ca:	490f      	ldr	r1, [pc, #60]	; (8083108 <_Z13serialGetZonev+0x90>)
 80830cc:	f008 fa8a 	bl	808b5e4 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 80830d0:	f009 fb0a 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80830d4:	f854 1d14 	ldr.w	r1, [r4, #-20]!
 80830d8:	220a      	movs	r2, #10
 80830da:	f008 fb04 	bl	808b6e6 <_ZN5Print7printlnEii>
        EEPROM.put(TIME_ZONE_MEM_ADDRESS, tempValue);
 80830de:	f009 fef1 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 80830e2:	4621      	mov	r1, r4
 80830e4:	2054      	movs	r0, #84	; 0x54
 80830e6:	f7fd fe0d 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 80830ea:	e004      	b.n	80830f6 <_Z13serialGetZonev+0x7e>
    }else{
        Serial.println("\n\rInvalid value!");
 80830ec:	f009 fafc 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80830f0:	4906      	ldr	r1, [pc, #24]	; (808310c <_Z13serialGetZonev+0x94>)
 80830f2:	f008 fa8a 	bl	808b60a <_ZN5Print7printlnEPKc>
}

void serialGetZone(void){
    Serial.println("Enter new Device time zone (-12.0 to 14.0)");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 80830f6:	a802      	add	r0, sp, #8
 80830f8:	f008 f818 	bl	808b12c <_ZN6StringD1Ev>
        Serial.println(tempValue);
        EEPROM.put(TIME_ZONE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 80830fc:	b006      	add	sp, #24
 80830fe:	bd10      	pop	{r4, pc}
 8083100:	08092245 	.word	0x08092245
 8083104:	08094308 	.word	0x08094308
 8083108:	08092270 	.word	0x08092270
 808310c:	0809213e 	.word	0x0809213e

08083110 <_Z20serialGetAverageTimev>:

void serialGetAverageTime(void){
 8083110:	b530      	push	{r4, r5, lr}
 8083112:	b087      	sub	sp, #28
    Serial.println();
 8083114:	f009 fae8 	bl	808c6e8 <_Z16_fetch_usbserialv>
    Serial.print("Current Frequency: ");
    Serial.print(measurements_to_average);
 8083118:	4d29      	ldr	r5, [pc, #164]	; (80831c0 <_Z20serialGetAverageTimev+0xb0>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetAverageTime(void){
    Serial.println();
 808311a:	f008 fa6a 	bl	808b5f2 <_ZN5Print7printlnEv>
    Serial.print("Current Frequency: ");
 808311e:	f009 fae3 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083122:	4928      	ldr	r1, [pc, #160]	; (80831c4 <_Z20serialGetAverageTimev+0xb4>)
 8083124:	f008 fa5e 	bl	808b5e4 <_ZN5Print5printEPKc>
    Serial.print(measurements_to_average);
 8083128:	f009 fade 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808312c:	220a      	movs	r2, #10
 808312e:	6829      	ldr	r1, [r5, #0]
 8083130:	f008 fad7 	bl	808b6e2 <_ZN5Print5printEii>
    Serial.println("(~2 second) measurements");
 8083134:	f009 fad8 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083138:	4923      	ldr	r1, [pc, #140]	; (80831c8 <_Z20serialGetAverageTimev+0xb8>)
 808313a:	f008 fa66 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.print("Enter new amount\n\r");
 808313e:	f009 fad3 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083142:	4922      	ldr	r1, [pc, #136]	; (80831cc <_Z20serialGetAverageTimev+0xbc>)
 8083144:	f008 fa4e 	bl	808b5e4 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083148:	f009 face 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808314c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083150:	f008 fbdf 	bl	808b912 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083154:	f009 fac8 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083158:	220d      	movs	r2, #13
 808315a:	4601      	mov	r1, r0
 808315c:	a802      	add	r0, sp, #8
 808315e:	f008 fc45 	bl	808b9ec <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8083162:	a802      	add	r0, sp, #8
 8083164:	f008 f9f0 	bl	808b548 <_ZNK6String5toIntEv>

    if(tempValue >= 1 && tempValue < 10000){
 8083168:	f242 730e 	movw	r3, #9998	; 0x270e
    Serial.print(measurements_to_average);
    Serial.println("(~2 second) measurements");
    Serial.print("Enter new amount\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();
 808316c:	9001      	str	r0, [sp, #4]

    if(tempValue >= 1 && tempValue < 10000){
 808316e:	3801      	subs	r0, #1
 8083170:	4298      	cmp	r0, r3
 8083172:	d81a      	bhi.n	80831aa <_Z20serialGetAverageTimev+0x9a>
        Serial.print("\n\rNew Frequency: ");
 8083174:	f009 fab8 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083178:	4915      	ldr	r1, [pc, #84]	; (80831d0 <_Z20serialGetAverageTimev+0xc0>)
 808317a:	f008 fa33 	bl	808b5e4 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 808317e:	f009 fab3 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083182:	220a      	movs	r2, #10
 8083184:	9901      	ldr	r1, [sp, #4]
 8083186:	f008 faae 	bl	808b6e6 <_ZN5Print7printlnEii>
        Serial.println("(~2 second) measurements");
        measurements_to_average = tempValue;
 808318a:	ac06      	add	r4, sp, #24
    int tempValue = tempString.toInt();

    if(tempValue >= 1 && tempValue < 10000){
        Serial.print("\n\rNew Frequency: ");
        Serial.println(tempValue);
        Serial.println("(~2 second) measurements");
 808318c:	f009 faac 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083190:	490d      	ldr	r1, [pc, #52]	; (80831c8 <_Z20serialGetAverageTimev+0xb8>)
 8083192:	f008 fa3a 	bl	808b60a <_ZN5Print7printlnEPKc>
        measurements_to_average = tempValue;
 8083196:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 808319a:	602b      	str	r3, [r5, #0]
        EEPROM.put(MEASUREMENTS_TO_AVG_MEM_ADDRESS, tempValue);
 808319c:	f009 fe92 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 80831a0:	4621      	mov	r1, r4
 80831a2:	2074      	movs	r0, #116	; 0x74
 80831a4:	f7fd fdae 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 80831a8:	e004      	b.n	80831b4 <_Z20serialGetAverageTimev+0xa4>
    }else{
        Serial.println("\n\rInvalid value!");
 80831aa:	f009 fa9d 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80831ae:	4909      	ldr	r1, [pc, #36]	; (80831d4 <_Z20serialGetAverageTimev+0xc4>)
 80831b0:	f008 fa2b 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.print("Current Frequency: ");
    Serial.print(measurements_to_average);
    Serial.println("(~2 second) measurements");
    Serial.print("Enter new amount\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 80831b4:	a802      	add	r0, sp, #8
 80831b6:	f007 ffb9 	bl	808b12c <_ZN6StringD1Ev>
        measurements_to_average = tempValue;
        EEPROM.put(MEASUREMENTS_TO_AVG_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 80831ba:	b007      	add	sp, #28
 80831bc:	bd30      	pop	{r4, r5, pc}
 80831be:	bf00      	nop
 80831c0:	20000efc 	.word	0x20000efc
 80831c4:	08092288 	.word	0x08092288
 80831c8:	0809229c 	.word	0x0809229c
 80831cc:	080922b5 	.word	0x080922b5
 80831d0:	080922c8 	.word	0x080922c8
 80831d4:	0809213e 	.word	0x0809213e

080831d8 <_Z17serialGetCo2Slopev>:

void serialGetCo2Slope(void){
 80831d8:	b530      	push	{r4, r5, lr}
 80831da:	b08b      	sub	sp, #44	; 0x2c

    Serial.println();
 80831dc:	f009 fa84 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80831e0:	f008 fa07 	bl	808b5f2 <_ZN5Print7printlnEv>
    Serial.print("Current CO2 slope:");
 80831e4:	f009 fa80 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80831e8:	4932      	ldr	r1, [pc, #200]	; (80832b4 <_Z17serialGetCo2Slopev+0xdc>)
 80831ea:	f008 f9fb 	bl	808b5e4 <_ZN5Print5printEPKc>
    Serial.print(String(CO2_slope, 2));
 80831ee:	f009 fa7b 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80831f2:	4605      	mov	r5, r0
 80831f4:	4c30      	ldr	r4, [pc, #192]	; (80832b8 <_Z17serialGetCo2Slopev+0xe0>)
 80831f6:	2202      	movs	r2, #2
 80831f8:	6821      	ldr	r1, [r4, #0]
 80831fa:	a806      	add	r0, sp, #24
 80831fc:	f008 f877 	bl	808b2ee <_ZN6StringC1Efi>
 8083200:	9906      	ldr	r1, [sp, #24]
 8083202:	4628      	mov	r0, r5
 8083204:	f008 f9ee 	bl	808b5e4 <_ZN5Print5printEPKc>
 8083208:	a806      	add	r0, sp, #24
 808320a:	f007 ff8f 	bl	808b12c <_ZN6StringD1Ev>
    Serial.println(" ppm");
 808320e:	f009 fa6b 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083212:	492a      	ldr	r1, [pc, #168]	; (80832bc <_Z17serialGetCo2Slopev+0xe4>)
 8083214:	f008 f9f9 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO2 slope\n\r");
 8083218:	f009 fa66 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808321c:	4928      	ldr	r1, [pc, #160]	; (80832c0 <_Z17serialGetCo2Slopev+0xe8>)
 808321e:	f008 f9e1 	bl	808b5e4 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083222:	f009 fa61 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083226:	f24c 3150 	movw	r1, #50000	; 0xc350
 808322a:	f008 fb72 	bl	808b912 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 808322e:	f009 fa5b 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083232:	220d      	movs	r2, #13
 8083234:	4601      	mov	r1, r0
 8083236:	a802      	add	r0, sp, #8
 8083238:	f008 fbd8 	bl	808b9ec <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 808323c:	a802      	add	r0, sp, #8
 808323e:	f008 f988 	bl	808b552 <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 10.0){
 8083242:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(CO2_slope, 2));
    Serial.println(" ppm");
    Serial.print("Enter new CO2 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 8083246:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 10.0){
 8083248:	f00a ffba 	bl	808e1c0 <__aeabi_fcmpge>
 808324c:	b338      	cbz	r0, 808329e <_Z17serialGetCo2Slopev+0xc6>
 808324e:	491d      	ldr	r1, [pc, #116]	; (80832c4 <_Z17serialGetCo2Slopev+0xec>)
 8083250:	4628      	mov	r0, r5
 8083252:	f00a ffa1 	bl	808e198 <__aeabi_fcmplt>
 8083256:	b310      	cbz	r0, 808329e <_Z17serialGetCo2Slopev+0xc6>
        CO2_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 8083258:	491b      	ldr	r1, [pc, #108]	; (80832c8 <_Z17serialGetCo2Slopev+0xf0>)
 808325a:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 10.0){
        CO2_slope = tempfloat;
 808325c:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 808325e:	f00a fdfd 	bl	808de5c <__aeabi_fmul>
 8083262:	f00a ffc1 	bl	808e1e8 <__aeabi_f2iz>
 8083266:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew CO2 slope: ");
 8083268:	f009 fa3e 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808326c:	4917      	ldr	r1, [pc, #92]	; (80832cc <_Z17serialGetCo2Slopev+0xf4>)
 808326e:	f008 f9b9 	bl	808b5e4 <_ZN5Print5printEPKc>
        Serial.println(String(CO2_slope,2));
 8083272:	f009 fa39 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083276:	4605      	mov	r5, r0
 8083278:	2202      	movs	r2, #2
 808327a:	6821      	ldr	r1, [r4, #0]
 808327c:	a806      	add	r0, sp, #24
 808327e:	f008 f836 	bl	808b2ee <_ZN6StringC1Efi>
 8083282:	9906      	ldr	r1, [sp, #24]
 8083284:	4628      	mov	r0, r5
 8083286:	f008 f9c0 	bl	808b60a <_ZN5Print7printlnEPKc>
 808328a:	a806      	add	r0, sp, #24
 808328c:	f007 ff4e 	bl	808b12c <_ZN6StringD1Ev>

        EEPROM.put(CO2_SLOPE_MEM_ADDRESS, tempValue);
 8083290:	f009 fe18 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8083294:	a901      	add	r1, sp, #4
 8083296:	2008      	movs	r0, #8
 8083298:	f7fd fd34 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 808329c:	e004      	b.n	80832a8 <_Z17serialGetCo2Slopev+0xd0>
    }else{
        Serial.println("\n\rInvalid value!");
 808329e:	f009 fa23 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80832a2:	490b      	ldr	r1, [pc, #44]	; (80832d0 <_Z17serialGetCo2Slopev+0xf8>)
 80832a4:	f008 f9b1 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.print("Current CO2 slope:");
    Serial.print(String(CO2_slope, 2));
    Serial.println(" ppm");
    Serial.print("Enter new CO2 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 80832a8:	a802      	add	r0, sp, #8
 80832aa:	f007 ff3f 	bl	808b12c <_ZN6StringD1Ev>

        EEPROM.put(CO2_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 80832ae:	b00b      	add	sp, #44	; 0x2c
 80832b0:	bd30      	pop	{r4, r5, pc}
 80832b2:	bf00      	nop
 80832b4:	080922da 	.word	0x080922da
 80832b8:	20000ecc 	.word	0x20000ecc
 80832bc:	080922ed 	.word	0x080922ed
 80832c0:	080922f2 	.word	0x080922f2
 80832c4:	41200000 	.word	0x41200000
 80832c8:	42c80000 	.word	0x42c80000
 80832cc:	08092308 	.word	0x08092308
 80832d0:	0809213e 	.word	0x0809213e

080832d4 <_Z16serialGetCo2Zerov>:

void serialGetCo2Zero(void){
 80832d4:	b530      	push	{r4, r5, lr}
 80832d6:	b087      	sub	sp, #28
    Serial.println();
 80832d8:	f009 fa06 	bl	808c6e8 <_Z16_fetch_usbserialv>
    Serial.print("Current CO2 zero:");
    Serial.print(CO2_zero);
 80832dc:	4d26      	ldr	r5, [pc, #152]	; (8083378 <_Z16serialGetCo2Zerov+0xa4>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetCo2Zero(void){
    Serial.println();
 80832de:	f008 f988 	bl	808b5f2 <_ZN5Print7printlnEv>
    Serial.print("Current CO2 zero:");
 80832e2:	f009 fa01 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80832e6:	4925      	ldr	r1, [pc, #148]	; (808337c <_Z16serialGetCo2Zerov+0xa8>)
 80832e8:	f008 f97c 	bl	808b5e4 <_ZN5Print5printEPKc>
    Serial.print(CO2_zero);
 80832ec:	f009 f9fc 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80832f0:	220a      	movs	r2, #10
 80832f2:	6829      	ldr	r1, [r5, #0]
 80832f4:	f008 f9f5 	bl	808b6e2 <_ZN5Print5printEii>
    Serial.println(" ppm");
 80832f8:	f009 f9f6 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80832fc:	4920      	ldr	r1, [pc, #128]	; (8083380 <_Z16serialGetCo2Zerov+0xac>)
 80832fe:	f008 f984 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO2 Zero\n\r");
 8083302:	f009 f9f1 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083306:	491f      	ldr	r1, [pc, #124]	; (8083384 <_Z16serialGetCo2Zerov+0xb0>)
 8083308:	f008 f96c 	bl	808b5e4 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 808330c:	f009 f9ec 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083310:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083314:	f008 fafd 	bl	808b912 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083318:	f009 f9e6 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808331c:	220d      	movs	r2, #13
 808331e:	4601      	mov	r1, r0
 8083320:	a802      	add	r0, sp, #8
 8083322:	f008 fb63 	bl	808b9ec <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8083326:	a802      	add	r0, sp, #8
 8083328:	f008 f90e 	bl	808b548 <_ZNK6String5toIntEv>
 808332c:	9001      	str	r0, [sp, #4]

    if(tempValue >= -1000 && tempValue < 1000){
 808332e:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8083332:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8083336:	d215      	bcs.n	8083364 <_Z16serialGetCo2Zerov+0x90>
        Serial.print("\n\rNew CO2 zero: ");
 8083338:	f009 f9d6 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808333c:	4912      	ldr	r1, [pc, #72]	; (8083388 <_Z16serialGetCo2Zerov+0xb4>)
 808333e:	f008 f951 	bl	808b5e4 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        CO2_zero = tempValue;
 8083342:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -1000 && tempValue < 1000){
        Serial.print("\n\rNew CO2 zero: ");
        Serial.println(tempValue);
 8083344:	f009 f9d0 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083348:	9901      	ldr	r1, [sp, #4]
 808334a:	220a      	movs	r2, #10
 808334c:	f008 f9cb 	bl	808b6e6 <_ZN5Print7printlnEii>
        CO2_zero = tempValue;
 8083350:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8083354:	602b      	str	r3, [r5, #0]
        EEPROM.put(CO2_ZERO_MEM_ADDRESS, tempValue);
 8083356:	f009 fdb5 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 808335a:	4621      	mov	r1, r4
 808335c:	2004      	movs	r0, #4
 808335e:	f7fd fcd1 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 8083362:	e004      	b.n	808336e <_Z16serialGetCo2Zerov+0x9a>
    }else{
        Serial.println("\n\rInvalid value!");
 8083364:	f009 f9c0 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083368:	4908      	ldr	r1, [pc, #32]	; (808338c <_Z16serialGetCo2Zerov+0xb8>)
 808336a:	f008 f94e 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.print("Current CO2 zero:");
    Serial.print(CO2_zero);
    Serial.println(" ppm");
    Serial.print("Enter new CO2 Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 808336e:	a802      	add	r0, sp, #8
 8083370:	f007 fedc 	bl	808b12c <_ZN6StringD1Ev>
        CO2_zero = tempValue;
        EEPROM.put(CO2_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083374:	b007      	add	sp, #28
 8083376:	bd30      	pop	{r4, r5, pc}
 8083378:	2000063c 	.word	0x2000063c
 808337c:	0809231a 	.word	0x0809231a
 8083380:	080922ed 	.word	0x080922ed
 8083384:	0809232c 	.word	0x0809232c
 8083388:	08092341 	.word	0x08092341
 808338c:	0809213e 	.word	0x0809213e

08083390 <_Z16serialGetCoSlopev>:

void serialGetCoSlope(void){
 8083390:	b530      	push	{r4, r5, lr}
 8083392:	b08b      	sub	sp, #44	; 0x2c

    Serial.println();
 8083394:	f009 f9a8 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083398:	f008 f92b 	bl	808b5f2 <_ZN5Print7printlnEv>
    Serial.print("Current CO slope:");
 808339c:	f009 f9a4 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80833a0:	4937      	ldr	r1, [pc, #220]	; (8083480 <_Z16serialGetCoSlopev+0xf0>)
 80833a2:	f008 f91f 	bl	808b5e4 <_ZN5Print5printEPKc>
    Serial.print(String(CO_slope, 2));
 80833a6:	f009 f99f 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80833aa:	4605      	mov	r5, r0
 80833ac:	4c35      	ldr	r4, [pc, #212]	; (8083484 <_Z16serialGetCoSlopev+0xf4>)
 80833ae:	2202      	movs	r2, #2
 80833b0:	6821      	ldr	r1, [r4, #0]
 80833b2:	a806      	add	r0, sp, #24
 80833b4:	f007 ff9b 	bl	808b2ee <_ZN6StringC1Efi>
 80833b8:	9906      	ldr	r1, [sp, #24]
 80833ba:	4628      	mov	r0, r5
 80833bc:	f008 f912 	bl	808b5e4 <_ZN5Print5printEPKc>
 80833c0:	a806      	add	r0, sp, #24
 80833c2:	f007 feb3 	bl	808b12c <_ZN6StringD1Ev>
    Serial.println(" ppm");
 80833c6:	f009 f98f 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80833ca:	492f      	ldr	r1, [pc, #188]	; (8083488 <_Z16serialGetCoSlopev+0xf8>)
 80833cc:	f008 f91d 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO slope\n\r");
 80833d0:	f009 f98a 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80833d4:	492d      	ldr	r1, [pc, #180]	; (808348c <_Z16serialGetCoSlopev+0xfc>)
 80833d6:	f008 f905 	bl	808b5e4 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 80833da:	f009 f985 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80833de:	f24c 3150 	movw	r1, #50000	; 0xc350
 80833e2:	f008 fa96 	bl	808b912 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80833e6:	f009 f97f 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80833ea:	220d      	movs	r2, #13
 80833ec:	4601      	mov	r1, r0
 80833ee:	a802      	add	r0, sp, #8
 80833f0:	f008 fafc 	bl	808b9ec <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 80833f4:	a802      	add	r0, sp, #8
 80833f6:	f008 f8ac 	bl	808b552 <_ZNK6String7toFloatEv>
 80833fa:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.1 && tempfloat < 2.0){
 80833fc:	f00a f884 	bl	808d508 <__aeabi_f2d>
 8083400:	a31d      	add	r3, pc, #116	; (adr r3, 8083478 <_Z16serialGetCoSlopev+0xe8>)
 8083402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8083406:	f00a fb59 	bl	808dabc <__aeabi_dcmpge>
 808340a:	b340      	cbz	r0, 808345e <_Z16serialGetCoSlopev+0xce>
 808340c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8083410:	4628      	mov	r0, r5
 8083412:	f00a fec1 	bl	808e198 <__aeabi_fcmplt>
 8083416:	b310      	cbz	r0, 808345e <_Z16serialGetCoSlopev+0xce>
        CO_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 8083418:	491d      	ldr	r1, [pc, #116]	; (8083490 <_Z16serialGetCoSlopev+0x100>)
 808341a:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.1 && tempfloat < 2.0){
        CO_slope = tempfloat;
 808341c:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 808341e:	f00a fd1d 	bl	808de5c <__aeabi_fmul>
 8083422:	f00a fee1 	bl	808e1e8 <__aeabi_f2iz>
 8083426:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew CO slope: ");
 8083428:	f009 f95e 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808342c:	4919      	ldr	r1, [pc, #100]	; (8083494 <_Z16serialGetCoSlopev+0x104>)
 808342e:	f008 f8d9 	bl	808b5e4 <_ZN5Print5printEPKc>
        Serial.println(String(CO_slope,2));
 8083432:	f009 f959 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083436:	4605      	mov	r5, r0
 8083438:	2202      	movs	r2, #2
 808343a:	6821      	ldr	r1, [r4, #0]
 808343c:	a806      	add	r0, sp, #24
 808343e:	f007 ff56 	bl	808b2ee <_ZN6StringC1Efi>
 8083442:	9906      	ldr	r1, [sp, #24]
 8083444:	4628      	mov	r0, r5
 8083446:	f008 f8e0 	bl	808b60a <_ZN5Print7printlnEPKc>
 808344a:	a806      	add	r0, sp, #24
 808344c:	f007 fe6e 	bl	808b12c <_ZN6StringD1Ev>

        EEPROM.put(CO_SLOPE_MEM_ADDRESS, tempValue);
 8083450:	f009 fd38 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8083454:	a901      	add	r1, sp, #4
 8083456:	2010      	movs	r0, #16
 8083458:	f7fd fc54 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 808345c:	e004      	b.n	8083468 <_Z16serialGetCoSlopev+0xd8>
    }else{
        Serial.println("\n\rInvalid value!");
 808345e:	f009 f943 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083462:	490d      	ldr	r1, [pc, #52]	; (8083498 <_Z16serialGetCoSlopev+0x108>)
 8083464:	f008 f8d1 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.print("Current CO slope:");
    Serial.print(String(CO_slope, 2));
    Serial.println(" ppm");
    Serial.print("Enter new CO slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083468:	a802      	add	r0, sp, #8
 808346a:	f007 fe5f 	bl	808b12c <_ZN6StringD1Ev>

        EEPROM.put(CO_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 808346e:	b00b      	add	sp, #44	; 0x2c
 8083470:	bd30      	pop	{r4, r5, pc}
 8083472:	bf00      	nop
 8083474:	f3af 8000 	nop.w
 8083478:	9999999a 	.word	0x9999999a
 808347c:	3fb99999 	.word	0x3fb99999
 8083480:	08092352 	.word	0x08092352
 8083484:	200005f0 	.word	0x200005f0
 8083488:	080922ed 	.word	0x080922ed
 808348c:	08092364 	.word	0x08092364
 8083490:	42c80000 	.word	0x42c80000
 8083494:	08092379 	.word	0x08092379
 8083498:	0809213e 	.word	0x0809213e

0808349c <_Z15serialGetCoZerov>:

void serialGetCoZero(void){
 808349c:	b530      	push	{r4, r5, lr}
 808349e:	b087      	sub	sp, #28
    Serial.println();
 80834a0:	f009 f922 	bl	808c6e8 <_Z16_fetch_usbserialv>
    Serial.print("Current CO zero:");
    Serial.print(CO_zero);
 80834a4:	4d27      	ldr	r5, [pc, #156]	; (8083544 <_Z15serialGetCoZerov+0xa8>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetCoZero(void){
    Serial.println();
 80834a6:	f008 f8a4 	bl	808b5f2 <_ZN5Print7printlnEv>
    Serial.print("Current CO zero:");
 80834aa:	f009 f91d 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80834ae:	4926      	ldr	r1, [pc, #152]	; (8083548 <_Z15serialGetCoZerov+0xac>)
 80834b0:	f008 f898 	bl	808b5e4 <_ZN5Print5printEPKc>
    Serial.print(CO_zero);
 80834b4:	f009 f918 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80834b8:	220a      	movs	r2, #10
 80834ba:	6829      	ldr	r1, [r5, #0]
 80834bc:	f008 f911 	bl	808b6e2 <_ZN5Print5printEii>
    Serial.println(" ppb");
 80834c0:	f009 f912 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80834c4:	4921      	ldr	r1, [pc, #132]	; (808354c <_Z15serialGetCoZerov+0xb0>)
 80834c6:	f008 f8a0 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO Zero\n\r");
 80834ca:	f009 f90d 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80834ce:	4920      	ldr	r1, [pc, #128]	; (8083550 <_Z15serialGetCoZerov+0xb4>)
 80834d0:	f008 f888 	bl	808b5e4 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 80834d4:	f009 f908 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80834d8:	f24c 3150 	movw	r1, #50000	; 0xc350
 80834dc:	f008 fa19 	bl	808b912 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80834e0:	f009 f902 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80834e4:	220d      	movs	r2, #13
 80834e6:	4601      	mov	r1, r0
 80834e8:	a802      	add	r0, sp, #8
 80834ea:	f008 fa7f 	bl	808b9ec <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 80834ee:	a802      	add	r0, sp, #8
 80834f0:	f008 f82a 	bl	808b548 <_ZNK6String5toIntEv>

    if(tempValue >= -5000 && tempValue < 5000){
 80834f4:	f242 730f 	movw	r3, #9999	; 0x270f
    Serial.print(CO_zero);
    Serial.println(" ppb");
    Serial.print("Enter new CO Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();
 80834f8:	9001      	str	r0, [sp, #4]

    if(tempValue >= -5000 && tempValue < 5000){
 80834fa:	f500 509c 	add.w	r0, r0, #4992	; 0x1380
 80834fe:	3008      	adds	r0, #8
 8083500:	4298      	cmp	r0, r3
 8083502:	d815      	bhi.n	8083530 <_Z15serialGetCoZerov+0x94>
        Serial.print("\n\rNew CO zero: ");
 8083504:	f009 f8f0 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083508:	4912      	ldr	r1, [pc, #72]	; (8083554 <_Z15serialGetCoZerov+0xb8>)
 808350a:	f008 f86b 	bl	808b5e4 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        CO_zero = tempValue;
 808350e:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -5000 && tempValue < 5000){
        Serial.print("\n\rNew CO zero: ");
        Serial.println(tempValue);
 8083510:	f009 f8ea 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083514:	9901      	ldr	r1, [sp, #4]
 8083516:	220a      	movs	r2, #10
 8083518:	f008 f8e5 	bl	808b6e6 <_ZN5Print7printlnEii>
        CO_zero = tempValue;
 808351c:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8083520:	602b      	str	r3, [r5, #0]
        EEPROM.put(CO_ZERO_MEM_ADDRESS, tempValue);
 8083522:	f009 fccf 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8083526:	4621      	mov	r1, r4
 8083528:	200c      	movs	r0, #12
 808352a:	f7fd fbeb 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 808352e:	e004      	b.n	808353a <_Z15serialGetCoZerov+0x9e>
    }else{
        Serial.println("\n\rInvalid value!");
 8083530:	f009 f8da 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083534:	4908      	ldr	r1, [pc, #32]	; (8083558 <_Z15serialGetCoZerov+0xbc>)
 8083536:	f008 f868 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.print("Current CO zero:");
    Serial.print(CO_zero);
    Serial.println(" ppb");
    Serial.print("Enter new CO Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 808353a:	a802      	add	r0, sp, #8
 808353c:	f007 fdf6 	bl	808b12c <_ZN6StringD1Ev>
        CO_zero = tempValue;
        EEPROM.put(CO_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083540:	b007      	add	sp, #28
 8083542:	bd30      	pop	{r4, r5, pc}
 8083544:	20000bf4 	.word	0x20000bf4
 8083548:	0809238a 	.word	0x0809238a
 808354c:	0809239b 	.word	0x0809239b
 8083550:	080923a0 	.word	0x080923a0
 8083554:	080923b4 	.word	0x080923b4
 8083558:	0809213e 	.word	0x0809213e

0808355c <_Z17serialGetPm1Slopev>:

void serialGetPm1Slope(void){
 808355c:	b530      	push	{r4, r5, lr}
 808355e:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8083560:	f009 f8c2 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083564:	f008 f845 	bl	808b5f2 <_ZN5Print7printlnEv>
    Serial.print("Current PM1 slope:");
 8083568:	f009 f8be 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808356c:	4932      	ldr	r1, [pc, #200]	; (8083638 <_Z17serialGetPm1Slopev+0xdc>)
 808356e:	f008 f839 	bl	808b5e4 <_ZN5Print5printEPKc>
    Serial.print(String(PM_1_slope, 2));
 8083572:	f009 f8b9 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083576:	4605      	mov	r5, r0
 8083578:	4c30      	ldr	r4, [pc, #192]	; (808363c <_Z17serialGetPm1Slopev+0xe0>)
 808357a:	2202      	movs	r2, #2
 808357c:	6821      	ldr	r1, [r4, #0]
 808357e:	a806      	add	r0, sp, #24
 8083580:	f007 feb5 	bl	808b2ee <_ZN6StringC1Efi>
 8083584:	9906      	ldr	r1, [sp, #24]
 8083586:	4628      	mov	r0, r5
 8083588:	f008 f82c 	bl	808b5e4 <_ZN5Print5printEPKc>
 808358c:	a806      	add	r0, sp, #24
 808358e:	f007 fdcd 	bl	808b12c <_ZN6StringD1Ev>
    Serial.println(" ");
 8083592:	f009 f8a9 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083596:	492a      	ldr	r1, [pc, #168]	; (8083640 <_Z17serialGetPm1Slopev+0xe4>)
 8083598:	f008 f837 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM1 slope\n\r");
 808359c:	f009 f8a4 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80835a0:	4928      	ldr	r1, [pc, #160]	; (8083644 <_Z17serialGetPm1Slopev+0xe8>)
 80835a2:	f008 f81f 	bl	808b5e4 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 80835a6:	f009 f89f 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80835aa:	f24c 3150 	movw	r1, #50000	; 0xc350
 80835ae:	f008 f9b0 	bl	808b912 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80835b2:	f009 f899 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80835b6:	220d      	movs	r2, #13
 80835b8:	4601      	mov	r1, r0
 80835ba:	a802      	add	r0, sp, #8
 80835bc:	f008 fa16 	bl	808b9ec <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 80835c0:	a802      	add	r0, sp, #8
 80835c2:	f007 ffc6 	bl	808b552 <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 80835c6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(PM_1_slope, 2));
    Serial.println(" ");
    Serial.print("Enter new PM1 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 80835ca:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 80835cc:	f00a fdf8 	bl	808e1c0 <__aeabi_fcmpge>
 80835d0:	b340      	cbz	r0, 8083624 <_Z17serialGetPm1Slopev+0xc8>
 80835d2:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80835d6:	4628      	mov	r0, r5
 80835d8:	f00a fdde 	bl	808e198 <__aeabi_fcmplt>
 80835dc:	b310      	cbz	r0, 8083624 <_Z17serialGetPm1Slopev+0xc8>
        PM_1_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 80835de:	491a      	ldr	r1, [pc, #104]	; (8083648 <_Z17serialGetPm1Slopev+0xec>)
 80835e0:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
        PM_1_slope = tempfloat;
 80835e2:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 80835e4:	f00a fc3a 	bl	808de5c <__aeabi_fmul>
 80835e8:	f00a fdfe 	bl	808e1e8 <__aeabi_f2iz>
 80835ec:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew PM1 slope: ");
 80835ee:	f009 f87b 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80835f2:	4916      	ldr	r1, [pc, #88]	; (808364c <_Z17serialGetPm1Slopev+0xf0>)
 80835f4:	f007 fff6 	bl	808b5e4 <_ZN5Print5printEPKc>
        Serial.println(String(PM_1_slope, 2));
 80835f8:	f009 f876 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80835fc:	4605      	mov	r5, r0
 80835fe:	2202      	movs	r2, #2
 8083600:	6821      	ldr	r1, [r4, #0]
 8083602:	a806      	add	r0, sp, #24
 8083604:	f007 fe73 	bl	808b2ee <_ZN6StringC1Efi>
 8083608:	9906      	ldr	r1, [sp, #24]
 808360a:	4628      	mov	r0, r5
 808360c:	f007 fffd 	bl	808b60a <_ZN5Print7printlnEPKc>
 8083610:	a806      	add	r0, sp, #24
 8083612:	f007 fd8b 	bl	808b12c <_ZN6StringD1Ev>

        EEPROM.put(PM_1_SLOPE_MEM_ADDRESS, tempValue);
 8083616:	f009 fc55 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 808361a:	a901      	add	r1, sp, #4
 808361c:	2018      	movs	r0, #24
 808361e:	f7fd fb71 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 8083622:	e004      	b.n	808362e <_Z17serialGetPm1Slopev+0xd2>
    }else{
        Serial.println("\n\rInvalid value!");
 8083624:	f009 f860 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083628:	4909      	ldr	r1, [pc, #36]	; (8083650 <_Z17serialGetPm1Slopev+0xf4>)
 808362a:	f007 ffee 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.print("Current PM1 slope:");
    Serial.print(String(PM_1_slope, 2));
    Serial.println(" ");
    Serial.print("Enter new PM1 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 808362e:	a802      	add	r0, sp, #8
 8083630:	f007 fd7c 	bl	808b12c <_ZN6StringD1Ev>

        EEPROM.put(PM_1_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083634:	b00b      	add	sp, #44	; 0x2c
 8083636:	bd30      	pop	{r4, r5, pc}
 8083638:	080923c4 	.word	0x080923c4
 808363c:	20000638 	.word	0x20000638
 8083640:	0809197e 	.word	0x0809197e
 8083644:	080923d7 	.word	0x080923d7
 8083648:	42c80000 	.word	0x42c80000
 808364c:	080923ed 	.word	0x080923ed
 8083650:	0809213e 	.word	0x0809213e

08083654 <_Z16serialGetPm1Zerov>:

void serialGetPm1Zero(void){
 8083654:	b530      	push	{r4, r5, lr}
 8083656:	b087      	sub	sp, #28
    Serial.println();
 8083658:	f009 f846 	bl	808c6e8 <_Z16_fetch_usbserialv>
    Serial.print("Current PM1 zero:");
    Serial.print(PM_1_zero);
 808365c:	4d26      	ldr	r5, [pc, #152]	; (80836f8 <_Z16serialGetPm1Zerov+0xa4>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetPm1Zero(void){
    Serial.println();
 808365e:	f007 ffc8 	bl	808b5f2 <_ZN5Print7printlnEv>
    Serial.print("Current PM1 zero:");
 8083662:	f009 f841 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083666:	4925      	ldr	r1, [pc, #148]	; (80836fc <_Z16serialGetPm1Zerov+0xa8>)
 8083668:	f007 ffbc 	bl	808b5e4 <_ZN5Print5printEPKc>
    Serial.print(PM_1_zero);
 808366c:	f009 f83c 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083670:	220a      	movs	r2, #10
 8083672:	6829      	ldr	r1, [r5, #0]
 8083674:	f008 f835 	bl	808b6e2 <_ZN5Print5printEii>
    Serial.println(" ug/m3");
 8083678:	f009 f836 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808367c:	4920      	ldr	r1, [pc, #128]	; (8083700 <_Z16serialGetPm1Zerov+0xac>)
 808367e:	f007 ffc4 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM1 Zero\n\r");
 8083682:	f009 f831 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083686:	491f      	ldr	r1, [pc, #124]	; (8083704 <_Z16serialGetPm1Zerov+0xb0>)
 8083688:	f007 ffac 	bl	808b5e4 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 808368c:	f009 f82c 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083690:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083694:	f008 f93d 	bl	808b912 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083698:	f009 f826 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808369c:	220d      	movs	r2, #13
 808369e:	4601      	mov	r1, r0
 80836a0:	a802      	add	r0, sp, #8
 80836a2:	f008 f9a3 	bl	808b9ec <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 80836a6:	a802      	add	r0, sp, #8
 80836a8:	f007 ff4e 	bl	808b548 <_ZNK6String5toIntEv>
 80836ac:	9001      	str	r0, [sp, #4]

    if(tempValue >= -1000 && tempValue < 1000){
 80836ae:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 80836b2:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 80836b6:	d215      	bcs.n	80836e4 <_Z16serialGetPm1Zerov+0x90>
        Serial.print("\n\rNew PM1 zero: ");
 80836b8:	f009 f816 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80836bc:	4912      	ldr	r1, [pc, #72]	; (8083708 <_Z16serialGetPm1Zerov+0xb4>)
 80836be:	f007 ff91 	bl	808b5e4 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        PM_1_zero = tempValue;
 80836c2:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -1000 && tempValue < 1000){
        Serial.print("\n\rNew PM1 zero: ");
        Serial.println(tempValue);
 80836c4:	f009 f810 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80836c8:	9901      	ldr	r1, [sp, #4]
 80836ca:	220a      	movs	r2, #10
 80836cc:	f008 f80b 	bl	808b6e6 <_ZN5Print7printlnEii>
        PM_1_zero = tempValue;
 80836d0:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 80836d4:	602b      	str	r3, [r5, #0]
        EEPROM.put(PM_1_ZERO_MEM_ADDRESS, tempValue);
 80836d6:	f009 fbf5 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 80836da:	4621      	mov	r1, r4
 80836dc:	2014      	movs	r0, #20
 80836de:	f7fd fb11 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 80836e2:	e004      	b.n	80836ee <_Z16serialGetPm1Zerov+0x9a>
    }else{
        Serial.println("\n\rInvalid value!");
 80836e4:	f009 f800 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80836e8:	4908      	ldr	r1, [pc, #32]	; (808370c <_Z16serialGetPm1Zerov+0xb8>)
 80836ea:	f007 ff8e 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.print("Current PM1 zero:");
    Serial.print(PM_1_zero);
    Serial.println(" ug/m3");
    Serial.print("Enter new PM1 Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 80836ee:	a802      	add	r0, sp, #8
 80836f0:	f007 fd1c 	bl	808b12c <_ZN6StringD1Ev>
        PM_1_zero = tempValue;
        EEPROM.put(PM_1_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 80836f4:	b007      	add	sp, #28
 80836f6:	bd30      	pop	{r4, r5, pc}
 80836f8:	20000edc 	.word	0x20000edc
 80836fc:	080923ff 	.word	0x080923ff
 8083700:	08092411 	.word	0x08092411
 8083704:	08092418 	.word	0x08092418
 8083708:	0809242d 	.word	0x0809242d
 808370c:	0809213e 	.word	0x0809213e

08083710 <_Z18serialGetPm25Slopev>:

void serialGetPm25Slope(void){
 8083710:	b530      	push	{r4, r5, lr}
 8083712:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8083714:	f008 ffe8 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083718:	f007 ff6b 	bl	808b5f2 <_ZN5Print7printlnEv>
    Serial.print("Current PM2.5 slope:");
 808371c:	f008 ffe4 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083720:	4932      	ldr	r1, [pc, #200]	; (80837ec <_Z18serialGetPm25Slopev+0xdc>)
 8083722:	f007 ff5f 	bl	808b5e4 <_ZN5Print5printEPKc>
    Serial.print(String(PM_25_slope, 2));
 8083726:	f008 ffdf 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808372a:	4605      	mov	r5, r0
 808372c:	4c30      	ldr	r4, [pc, #192]	; (80837f0 <_Z18serialGetPm25Slopev+0xe0>)
 808372e:	2202      	movs	r2, #2
 8083730:	6821      	ldr	r1, [r4, #0]
 8083732:	a806      	add	r0, sp, #24
 8083734:	f007 fddb 	bl	808b2ee <_ZN6StringC1Efi>
 8083738:	9906      	ldr	r1, [sp, #24]
 808373a:	4628      	mov	r0, r5
 808373c:	f007 ff52 	bl	808b5e4 <_ZN5Print5printEPKc>
 8083740:	a806      	add	r0, sp, #24
 8083742:	f007 fcf3 	bl	808b12c <_ZN6StringD1Ev>
    Serial.println(" ");
 8083746:	f008 ffcf 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808374a:	492a      	ldr	r1, [pc, #168]	; (80837f4 <_Z18serialGetPm25Slopev+0xe4>)
 808374c:	f007 ff5d 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM2.5 slope\n\r");
 8083750:	f008 ffca 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083754:	4928      	ldr	r1, [pc, #160]	; (80837f8 <_Z18serialGetPm25Slopev+0xe8>)
 8083756:	f007 ff45 	bl	808b5e4 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 808375a:	f008 ffc5 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808375e:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083762:	f008 f8d6 	bl	808b912 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083766:	f008 ffbf 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808376a:	220d      	movs	r2, #13
 808376c:	4601      	mov	r1, r0
 808376e:	a802      	add	r0, sp, #8
 8083770:	f008 f93c 	bl	808b9ec <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083774:	a802      	add	r0, sp, #8
 8083776:	f007 feec 	bl	808b552 <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 808377a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(PM_25_slope, 2));
    Serial.println(" ");
    Serial.print("Enter new PM2.5 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 808377e:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8083780:	f00a fd1e 	bl	808e1c0 <__aeabi_fcmpge>
 8083784:	b340      	cbz	r0, 80837d8 <_Z18serialGetPm25Slopev+0xc8>
 8083786:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 808378a:	4628      	mov	r0, r5
 808378c:	f00a fd04 	bl	808e198 <__aeabi_fcmplt>
 8083790:	b310      	cbz	r0, 80837d8 <_Z18serialGetPm25Slopev+0xc8>
        PM_25_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 8083792:	491a      	ldr	r1, [pc, #104]	; (80837fc <_Z18serialGetPm25Slopev+0xec>)
 8083794:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
        PM_25_slope = tempfloat;
 8083796:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 8083798:	f00a fb60 	bl	808de5c <__aeabi_fmul>
 808379c:	f00a fd24 	bl	808e1e8 <__aeabi_f2iz>
 80837a0:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew PM2.5 slope: ");
 80837a2:	f008 ffa1 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80837a6:	4916      	ldr	r1, [pc, #88]	; (8083800 <_Z18serialGetPm25Slopev+0xf0>)
 80837a8:	f007 ff1c 	bl	808b5e4 <_ZN5Print5printEPKc>
        Serial.println(String(PM_25_slope,2));
 80837ac:	f008 ff9c 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80837b0:	4605      	mov	r5, r0
 80837b2:	2202      	movs	r2, #2
 80837b4:	6821      	ldr	r1, [r4, #0]
 80837b6:	a806      	add	r0, sp, #24
 80837b8:	f007 fd99 	bl	808b2ee <_ZN6StringC1Efi>
 80837bc:	9906      	ldr	r1, [sp, #24]
 80837be:	4628      	mov	r0, r5
 80837c0:	f007 ff23 	bl	808b60a <_ZN5Print7printlnEPKc>
 80837c4:	a806      	add	r0, sp, #24
 80837c6:	f007 fcb1 	bl	808b12c <_ZN6StringD1Ev>

        EEPROM.put(PM_25_SLOPE_MEM_ADDRESS, tempValue);
 80837ca:	f009 fb7b 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 80837ce:	a901      	add	r1, sp, #4
 80837d0:	2020      	movs	r0, #32
 80837d2:	f7fd fa97 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 80837d6:	e004      	b.n	80837e2 <_Z18serialGetPm25Slopev+0xd2>
    }else{
        Serial.println("\n\rInvalid value!");
 80837d8:	f008 ff86 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80837dc:	4909      	ldr	r1, [pc, #36]	; (8083804 <_Z18serialGetPm25Slopev+0xf4>)
 80837de:	f007 ff14 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.print("Current PM2.5 slope:");
    Serial.print(String(PM_25_slope, 2));
    Serial.println(" ");
    Serial.print("Enter new PM2.5 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 80837e2:	a802      	add	r0, sp, #8
 80837e4:	f007 fca2 	bl	808b12c <_ZN6StringD1Ev>

        EEPROM.put(PM_25_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 80837e8:	b00b      	add	sp, #44	; 0x2c
 80837ea:	bd30      	pop	{r4, r5, pc}
 80837ec:	0809243e 	.word	0x0809243e
 80837f0:	20000be8 	.word	0x20000be8
 80837f4:	0809197e 	.word	0x0809197e
 80837f8:	08092453 	.word	0x08092453
 80837fc:	42c80000 	.word	0x42c80000
 8083800:	0809246b 	.word	0x0809246b
 8083804:	0809213e 	.word	0x0809213e

08083808 <_Z17serialGetPm25Zerov>:

void serialGetPm25Zero(void){
 8083808:	b530      	push	{r4, r5, lr}
 808380a:	b087      	sub	sp, #28
    Serial.println();
 808380c:	f008 ff6c 	bl	808c6e8 <_Z16_fetch_usbserialv>
    Serial.print("Current PM2.5 zero:");
    Serial.print(PM_25_zero);
 8083810:	4d26      	ldr	r5, [pc, #152]	; (80838ac <_Z17serialGetPm25Zerov+0xa4>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetPm25Zero(void){
    Serial.println();
 8083812:	f007 feee 	bl	808b5f2 <_ZN5Print7printlnEv>
    Serial.print("Current PM2.5 zero:");
 8083816:	f008 ff67 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808381a:	4925      	ldr	r1, [pc, #148]	; (80838b0 <_Z17serialGetPm25Zerov+0xa8>)
 808381c:	f007 fee2 	bl	808b5e4 <_ZN5Print5printEPKc>
    Serial.print(PM_25_zero);
 8083820:	f008 ff62 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083824:	220a      	movs	r2, #10
 8083826:	6829      	ldr	r1, [r5, #0]
 8083828:	f007 ff5b 	bl	808b6e2 <_ZN5Print5printEii>
    Serial.println(" ug/m3");
 808382c:	f008 ff5c 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083830:	4920      	ldr	r1, [pc, #128]	; (80838b4 <_Z17serialGetPm25Zerov+0xac>)
 8083832:	f007 feea 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM2.5 Zero\n\r");
 8083836:	f008 ff57 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808383a:	491f      	ldr	r1, [pc, #124]	; (80838b8 <_Z17serialGetPm25Zerov+0xb0>)
 808383c:	f007 fed2 	bl	808b5e4 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083840:	f008 ff52 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083844:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083848:	f008 f863 	bl	808b912 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 808384c:	f008 ff4c 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083850:	220d      	movs	r2, #13
 8083852:	4601      	mov	r1, r0
 8083854:	a802      	add	r0, sp, #8
 8083856:	f008 f8c9 	bl	808b9ec <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 808385a:	a802      	add	r0, sp, #8
 808385c:	f007 fe74 	bl	808b548 <_ZNK6String5toIntEv>
 8083860:	9001      	str	r0, [sp, #4]

    if(tempValue >= -1000 && tempValue < 1000){
 8083862:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8083866:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 808386a:	d215      	bcs.n	8083898 <_Z17serialGetPm25Zerov+0x90>
        Serial.print("\n\rNew PM2.5 zero: ");
 808386c:	f008 ff3c 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083870:	4912      	ldr	r1, [pc, #72]	; (80838bc <_Z17serialGetPm25Zerov+0xb4>)
 8083872:	f007 feb7 	bl	808b5e4 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        PM_25_zero = tempValue;
 8083876:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -1000 && tempValue < 1000){
        Serial.print("\n\rNew PM2.5 zero: ");
        Serial.println(tempValue);
 8083878:	f008 ff36 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808387c:	9901      	ldr	r1, [sp, #4]
 808387e:	220a      	movs	r2, #10
 8083880:	f007 ff31 	bl	808b6e6 <_ZN5Print7printlnEii>
        PM_25_zero = tempValue;
 8083884:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8083888:	602b      	str	r3, [r5, #0]
        EEPROM.put(PM_25_ZERO_MEM_ADDRESS, tempValue);
 808388a:	f009 fb1b 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 808388e:	4621      	mov	r1, r4
 8083890:	201c      	movs	r0, #28
 8083892:	f7fd fa37 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 8083896:	e004      	b.n	80838a2 <_Z17serialGetPm25Zerov+0x9a>
    }else{
        Serial.println("\n\rInvalid value!");
 8083898:	f008 ff26 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808389c:	4908      	ldr	r1, [pc, #32]	; (80838c0 <_Z17serialGetPm25Zerov+0xb8>)
 808389e:	f007 feb4 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.print("Current PM2.5 zero:");
    Serial.print(PM_25_zero);
    Serial.println(" ug/m3");
    Serial.print("Enter new PM2.5 Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 80838a2:	a802      	add	r0, sp, #8
 80838a4:	f007 fc42 	bl	808b12c <_ZN6StringD1Ev>
        PM_25_zero = tempValue;
        EEPROM.put(PM_25_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 80838a8:	b007      	add	sp, #28
 80838aa:	bd30      	pop	{r4, r5, pc}
 80838ac:	20000b88 	.word	0x20000b88
 80838b0:	0809247f 	.word	0x0809247f
 80838b4:	08092411 	.word	0x08092411
 80838b8:	08092493 	.word	0x08092493
 80838bc:	080924aa 	.word	0x080924aa
 80838c0:	0809213e 	.word	0x0809213e

080838c4 <_Z18serialGetPm10Slopev>:

void serialGetPm10Slope(void){
 80838c4:	b530      	push	{r4, r5, lr}
 80838c6:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 80838c8:	f008 ff0e 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80838cc:	f007 fe91 	bl	808b5f2 <_ZN5Print7printlnEv>
    Serial.print("Current PM10 slope:");
 80838d0:	f008 ff0a 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80838d4:	4932      	ldr	r1, [pc, #200]	; (80839a0 <_Z18serialGetPm10Slopev+0xdc>)
 80838d6:	f007 fe85 	bl	808b5e4 <_ZN5Print5printEPKc>
    Serial.print(String(PM_10_slope, 2));
 80838da:	f008 ff05 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80838de:	4605      	mov	r5, r0
 80838e0:	4c30      	ldr	r4, [pc, #192]	; (80839a4 <_Z18serialGetPm10Slopev+0xe0>)
 80838e2:	2202      	movs	r2, #2
 80838e4:	6821      	ldr	r1, [r4, #0]
 80838e6:	a806      	add	r0, sp, #24
 80838e8:	f007 fd01 	bl	808b2ee <_ZN6StringC1Efi>
 80838ec:	9906      	ldr	r1, [sp, #24]
 80838ee:	4628      	mov	r0, r5
 80838f0:	f007 fe78 	bl	808b5e4 <_ZN5Print5printEPKc>
 80838f4:	a806      	add	r0, sp, #24
 80838f6:	f007 fc19 	bl	808b12c <_ZN6StringD1Ev>
    Serial.println(" ");
 80838fa:	f008 fef5 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80838fe:	492a      	ldr	r1, [pc, #168]	; (80839a8 <_Z18serialGetPm10Slopev+0xe4>)
 8083900:	f007 fe83 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM10 slope\n\r");
 8083904:	f008 fef0 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083908:	4928      	ldr	r1, [pc, #160]	; (80839ac <_Z18serialGetPm10Slopev+0xe8>)
 808390a:	f007 fe6b 	bl	808b5e4 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 808390e:	f008 feeb 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083912:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083916:	f007 fffc 	bl	808b912 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 808391a:	f008 fee5 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808391e:	220d      	movs	r2, #13
 8083920:	4601      	mov	r1, r0
 8083922:	a802      	add	r0, sp, #8
 8083924:	f008 f862 	bl	808b9ec <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083928:	a802      	add	r0, sp, #8
 808392a:	f007 fe12 	bl	808b552 <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 808392e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(PM_10_slope, 2));
    Serial.println(" ");
    Serial.print("Enter new PM10 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 8083932:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8083934:	f00a fc44 	bl	808e1c0 <__aeabi_fcmpge>
 8083938:	b340      	cbz	r0, 808398c <_Z18serialGetPm10Slopev+0xc8>
 808393a:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 808393e:	4628      	mov	r0, r5
 8083940:	f00a fc2a 	bl	808e198 <__aeabi_fcmplt>
 8083944:	b310      	cbz	r0, 808398c <_Z18serialGetPm10Slopev+0xc8>
        PM_10_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 8083946:	491a      	ldr	r1, [pc, #104]	; (80839b0 <_Z18serialGetPm10Slopev+0xec>)
 8083948:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
        PM_10_slope = tempfloat;
 808394a:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 808394c:	f00a fa86 	bl	808de5c <__aeabi_fmul>
 8083950:	f00a fc4a 	bl	808e1e8 <__aeabi_f2iz>
 8083954:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew PM10 slope: ");
 8083956:	f008 fec7 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808395a:	4916      	ldr	r1, [pc, #88]	; (80839b4 <_Z18serialGetPm10Slopev+0xf0>)
 808395c:	f007 fe42 	bl	808b5e4 <_ZN5Print5printEPKc>
        Serial.println(String(PM_10_slope,2));
 8083960:	f008 fec2 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083964:	4605      	mov	r5, r0
 8083966:	2202      	movs	r2, #2
 8083968:	6821      	ldr	r1, [r4, #0]
 808396a:	a806      	add	r0, sp, #24
 808396c:	f007 fcbf 	bl	808b2ee <_ZN6StringC1Efi>
 8083970:	9906      	ldr	r1, [sp, #24]
 8083972:	4628      	mov	r0, r5
 8083974:	f007 fe49 	bl	808b60a <_ZN5Print7printlnEPKc>
 8083978:	a806      	add	r0, sp, #24
 808397a:	f007 fbd7 	bl	808b12c <_ZN6StringD1Ev>

        EEPROM.put(PM_10_SLOPE_MEM_ADDRESS, tempValue);
 808397e:	f009 faa1 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8083982:	a901      	add	r1, sp, #4
 8083984:	2028      	movs	r0, #40	; 0x28
 8083986:	f7fd f9bd 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 808398a:	e004      	b.n	8083996 <_Z18serialGetPm10Slopev+0xd2>
    }else{
        Serial.println("\n\rInvalid value!");
 808398c:	f008 feac 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083990:	4909      	ldr	r1, [pc, #36]	; (80839b8 <_Z18serialGetPm10Slopev+0xf4>)
 8083992:	f007 fe3a 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.print("Current PM10 slope:");
    Serial.print(String(PM_10_slope, 2));
    Serial.println(" ");
    Serial.print("Enter new PM10 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083996:	a802      	add	r0, sp, #8
 8083998:	f007 fbc8 	bl	808b12c <_ZN6StringD1Ev>

        EEPROM.put(PM_10_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 808399c:	b00b      	add	sp, #44	; 0x2c
 808399e:	bd30      	pop	{r4, r5, pc}
 80839a0:	080924bd 	.word	0x080924bd
 80839a4:	20000f28 	.word	0x20000f28
 80839a8:	0809197e 	.word	0x0809197e
 80839ac:	080924d1 	.word	0x080924d1
 80839b0:	42c80000 	.word	0x42c80000
 80839b4:	080924e8 	.word	0x080924e8
 80839b8:	0809213e 	.word	0x0809213e

080839bc <_Z17serialGetPm10Zerov>:

void serialGetPm10Zero(void){
 80839bc:	b530      	push	{r4, r5, lr}
 80839be:	b087      	sub	sp, #28
    Serial.println();
 80839c0:	f008 fe92 	bl	808c6e8 <_Z16_fetch_usbserialv>
    Serial.print("Current PM10 zero:");
    Serial.print(PM_10_zero);
 80839c4:	4d26      	ldr	r5, [pc, #152]	; (8083a60 <_Z17serialGetPm10Zerov+0xa4>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetPm10Zero(void){
    Serial.println();
 80839c6:	f007 fe14 	bl	808b5f2 <_ZN5Print7printlnEv>
    Serial.print("Current PM10 zero:");
 80839ca:	f008 fe8d 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80839ce:	4925      	ldr	r1, [pc, #148]	; (8083a64 <_Z17serialGetPm10Zerov+0xa8>)
 80839d0:	f007 fe08 	bl	808b5e4 <_ZN5Print5printEPKc>
    Serial.print(PM_10_zero);
 80839d4:	f008 fe88 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80839d8:	220a      	movs	r2, #10
 80839da:	6829      	ldr	r1, [r5, #0]
 80839dc:	f007 fe81 	bl	808b6e2 <_ZN5Print5printEii>
    Serial.println(" um/m3");
 80839e0:	f008 fe82 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80839e4:	4920      	ldr	r1, [pc, #128]	; (8083a68 <_Z17serialGetPm10Zerov+0xac>)
 80839e6:	f007 fe10 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM10 Zero\n\r");
 80839ea:	f008 fe7d 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80839ee:	491f      	ldr	r1, [pc, #124]	; (8083a6c <_Z17serialGetPm10Zerov+0xb0>)
 80839f0:	f007 fdf8 	bl	808b5e4 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 80839f4:	f008 fe78 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80839f8:	f24c 3150 	movw	r1, #50000	; 0xc350
 80839fc:	f007 ff89 	bl	808b912 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083a00:	f008 fe72 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083a04:	220d      	movs	r2, #13
 8083a06:	4601      	mov	r1, r0
 8083a08:	a802      	add	r0, sp, #8
 8083a0a:	f007 ffef 	bl	808b9ec <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8083a0e:	a802      	add	r0, sp, #8
 8083a10:	f007 fd9a 	bl	808b548 <_ZNK6String5toIntEv>
 8083a14:	9001      	str	r0, [sp, #4]

    if(tempValue >= -1000 && tempValue < 1000){
 8083a16:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8083a1a:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8083a1e:	d215      	bcs.n	8083a4c <_Z17serialGetPm10Zerov+0x90>
        Serial.print("\n\rNew PM10 zero: ");
 8083a20:	f008 fe62 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083a24:	4912      	ldr	r1, [pc, #72]	; (8083a70 <_Z17serialGetPm10Zerov+0xb4>)
 8083a26:	f007 fddd 	bl	808b5e4 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        PM_10_zero = tempValue;
 8083a2a:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -1000 && tempValue < 1000){
        Serial.print("\n\rNew PM10 zero: ");
        Serial.println(tempValue);
 8083a2c:	f008 fe5c 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083a30:	9901      	ldr	r1, [sp, #4]
 8083a32:	220a      	movs	r2, #10
 8083a34:	f007 fe57 	bl	808b6e6 <_ZN5Print7printlnEii>
        PM_10_zero = tempValue;
 8083a38:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8083a3c:	602b      	str	r3, [r5, #0]
        EEPROM.put(PM_10_ZERO_MEM_ADDRESS, tempValue);
 8083a3e:	f009 fa41 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8083a42:	4621      	mov	r1, r4
 8083a44:	2024      	movs	r0, #36	; 0x24
 8083a46:	f7fd f95d 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 8083a4a:	e004      	b.n	8083a56 <_Z17serialGetPm10Zerov+0x9a>
    }else{
        Serial.println("\n\rInvalid value!");
 8083a4c:	f008 fe4c 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083a50:	4908      	ldr	r1, [pc, #32]	; (8083a74 <_Z17serialGetPm10Zerov+0xb8>)
 8083a52:	f007 fdda 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.print("Current PM10 zero:");
    Serial.print(PM_10_zero);
    Serial.println(" um/m3");
    Serial.print("Enter new PM10 Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083a56:	a802      	add	r0, sp, #8
 8083a58:	f007 fb68 	bl	808b12c <_ZN6StringD1Ev>
        PM_10_zero = tempValue;
        EEPROM.put(PM_10_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083a5c:	b007      	add	sp, #28
 8083a5e:	bd30      	pop	{r4, r5, pc}
 8083a60:	20000f10 	.word	0x20000f10
 8083a64:	080924fb 	.word	0x080924fb
 8083a68:	0809250e 	.word	0x0809250e
 8083a6c:	08092515 	.word	0x08092515
 8083a70:	0809252b 	.word	0x0809252b
 8083a74:	0809213e 	.word	0x0809213e

08083a78 <_Z25serialGetTemperatureSlopev>:

void serialGetTemperatureSlope(void){
 8083a78:	b530      	push	{r4, r5, lr}
 8083a7a:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8083a7c:	f008 fe34 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083a80:	f007 fdb7 	bl	808b5f2 <_ZN5Print7printlnEv>
    Serial.print("Current Temperature slope:");
 8083a84:	f008 fe30 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083a88:	4932      	ldr	r1, [pc, #200]	; (8083b54 <_Z25serialGetTemperatureSlopev+0xdc>)
 8083a8a:	f007 fdab 	bl	808b5e4 <_ZN5Print5printEPKc>
    Serial.print(String(temp_slope, 2));
 8083a8e:	f008 fe2b 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083a92:	4605      	mov	r5, r0
 8083a94:	4c30      	ldr	r4, [pc, #192]	; (8083b58 <_Z25serialGetTemperatureSlopev+0xe0>)
 8083a96:	2202      	movs	r2, #2
 8083a98:	6821      	ldr	r1, [r4, #0]
 8083a9a:	a806      	add	r0, sp, #24
 8083a9c:	f007 fc27 	bl	808b2ee <_ZN6StringC1Efi>
 8083aa0:	9906      	ldr	r1, [sp, #24]
 8083aa2:	4628      	mov	r0, r5
 8083aa4:	f007 fd9e 	bl	808b5e4 <_ZN5Print5printEPKc>
 8083aa8:	a806      	add	r0, sp, #24
 8083aaa:	f007 fb3f 	bl	808b12c <_ZN6StringD1Ev>
    Serial.println(" Degrees C");
 8083aae:	f008 fe1b 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083ab2:	492a      	ldr	r1, [pc, #168]	; (8083b5c <_Z25serialGetTemperatureSlopev+0xe4>)
 8083ab4:	f007 fda9 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Temperature slope\n\r");
 8083ab8:	f008 fe16 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083abc:	4928      	ldr	r1, [pc, #160]	; (8083b60 <_Z25serialGetTemperatureSlopev+0xe8>)
 8083abe:	f007 fd91 	bl	808b5e4 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083ac2:	f008 fe11 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083ac6:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083aca:	f007 ff22 	bl	808b912 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083ace:	f008 fe0b 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083ad2:	220d      	movs	r2, #13
 8083ad4:	4601      	mov	r1, r0
 8083ad6:	a802      	add	r0, sp, #8
 8083ad8:	f007 ff88 	bl	808b9ec <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083adc:	a802      	add	r0, sp, #8
 8083ade:	f007 fd38 	bl	808b552 <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8083ae2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(temp_slope, 2));
    Serial.println(" Degrees C");
    Serial.print("Enter new Temperature slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 8083ae6:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8083ae8:	f00a fb6a 	bl	808e1c0 <__aeabi_fcmpge>
 8083aec:	b340      	cbz	r0, 8083b40 <_Z25serialGetTemperatureSlopev+0xc8>
 8083aee:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8083af2:	4628      	mov	r0, r5
 8083af4:	f00a fb50 	bl	808e198 <__aeabi_fcmplt>
 8083af8:	b310      	cbz	r0, 8083b40 <_Z25serialGetTemperatureSlopev+0xc8>
        temp_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 8083afa:	491a      	ldr	r1, [pc, #104]	; (8083b64 <_Z25serialGetTemperatureSlopev+0xec>)
 8083afc:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
        temp_slope = tempfloat;
 8083afe:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 8083b00:	f00a f9ac 	bl	808de5c <__aeabi_fmul>
 8083b04:	f00a fb70 	bl	808e1e8 <__aeabi_f2iz>
 8083b08:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew Temperature slope: ");
 8083b0a:	f008 fded 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083b0e:	4916      	ldr	r1, [pc, #88]	; (8083b68 <_Z25serialGetTemperatureSlopev+0xf0>)
 8083b10:	f007 fd68 	bl	808b5e4 <_ZN5Print5printEPKc>
        Serial.println(String(temp_slope,2));
 8083b14:	f008 fde8 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083b18:	4605      	mov	r5, r0
 8083b1a:	2202      	movs	r2, #2
 8083b1c:	6821      	ldr	r1, [r4, #0]
 8083b1e:	a806      	add	r0, sp, #24
 8083b20:	f007 fbe5 	bl	808b2ee <_ZN6StringC1Efi>
 8083b24:	9906      	ldr	r1, [sp, #24]
 8083b26:	4628      	mov	r0, r5
 8083b28:	f007 fd6f 	bl	808b60a <_ZN5Print7printlnEPKc>
 8083b2c:	a806      	add	r0, sp, #24
 8083b2e:	f007 fafd 	bl	808b12c <_ZN6StringD1Ev>

        EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, tempValue);
 8083b32:	f009 f9c7 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8083b36:	a901      	add	r1, sp, #4
 8083b38:	2030      	movs	r0, #48	; 0x30
 8083b3a:	f7fd f8e3 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 8083b3e:	e004      	b.n	8083b4a <_Z25serialGetTemperatureSlopev+0xd2>
    }else{
        Serial.println("\n\rInvalid value!");
 8083b40:	f008 fdd2 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083b44:	4909      	ldr	r1, [pc, #36]	; (8083b6c <_Z25serialGetTemperatureSlopev+0xf4>)
 8083b46:	f007 fd60 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.print("Current Temperature slope:");
    Serial.print(String(temp_slope, 2));
    Serial.println(" Degrees C");
    Serial.print("Enter new Temperature slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083b4a:	a802      	add	r0, sp, #8
 8083b4c:	f007 faee 	bl	808b12c <_ZN6StringD1Ev>

        EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083b50:	b00b      	add	sp, #44	; 0x2c
 8083b52:	bd30      	pop	{r4, r5, pc}
 8083b54:	0809253d 	.word	0x0809253d
 8083b58:	20000bf0 	.word	0x20000bf0
 8083b5c:	08092558 	.word	0x08092558
 8083b60:	08092563 	.word	0x08092563
 8083b64:	42c80000 	.word	0x42c80000
 8083b68:	08092581 	.word	0x08092581
 8083b6c:	0809213e 	.word	0x0809213e

08083b70 <_Z24serialGetTemperatureZerov>:

void serialGetTemperatureZero(void){
 8083b70:	b530      	push	{r4, r5, lr}
 8083b72:	b087      	sub	sp, #28
    Serial.println();
 8083b74:	f008 fdb8 	bl	808c6e8 <_Z16_fetch_usbserialv>
    Serial.print("Current Temperature zero:");
    Serial.print(temp_zero);
 8083b78:	4d25      	ldr	r5, [pc, #148]	; (8083c10 <_Z24serialGetTemperatureZerov+0xa0>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetTemperatureZero(void){
    Serial.println();
 8083b7a:	f007 fd3a 	bl	808b5f2 <_ZN5Print7printlnEv>
    Serial.print("Current Temperature zero:");
 8083b7e:	f008 fdb3 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083b82:	4924      	ldr	r1, [pc, #144]	; (8083c14 <_Z24serialGetTemperatureZerov+0xa4>)
 8083b84:	f007 fd2e 	bl	808b5e4 <_ZN5Print5printEPKc>
    Serial.print(temp_zero);
 8083b88:	f008 fdae 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083b8c:	220a      	movs	r2, #10
 8083b8e:	6829      	ldr	r1, [r5, #0]
 8083b90:	f007 fda7 	bl	808b6e2 <_ZN5Print5printEii>
    Serial.println(" Degrees C");
 8083b94:	f008 fda8 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083b98:	491f      	ldr	r1, [pc, #124]	; (8083c18 <_Z24serialGetTemperatureZerov+0xa8>)
 8083b9a:	f007 fd36 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Temperature Zero\n\r");
 8083b9e:	f008 fda3 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083ba2:	491e      	ldr	r1, [pc, #120]	; (8083c1c <_Z24serialGetTemperatureZerov+0xac>)
 8083ba4:	f007 fd1e 	bl	808b5e4 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083ba8:	f008 fd9e 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083bac:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083bb0:	f007 feaf 	bl	808b912 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083bb4:	f008 fd98 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083bb8:	220d      	movs	r2, #13
 8083bba:	4601      	mov	r1, r0
 8083bbc:	a802      	add	r0, sp, #8
 8083bbe:	f007 ff15 	bl	808b9ec <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8083bc2:	a802      	add	r0, sp, #8
 8083bc4:	f007 fcc0 	bl	808b548 <_ZNK6String5toIntEv>
 8083bc8:	9001      	str	r0, [sp, #4]

    if(tempValue >= -30 && tempValue < 30){
 8083bca:	301e      	adds	r0, #30
 8083bcc:	283b      	cmp	r0, #59	; 0x3b
 8083bce:	d815      	bhi.n	8083bfc <_Z24serialGetTemperatureZerov+0x8c>
        Serial.print("\n\rNew Temperature zero: ");
 8083bd0:	f008 fd8a 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083bd4:	4912      	ldr	r1, [pc, #72]	; (8083c20 <_Z24serialGetTemperatureZerov+0xb0>)
 8083bd6:	f007 fd05 	bl	808b5e4 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        temp_zero = tempValue;
 8083bda:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -30 && tempValue < 30){
        Serial.print("\n\rNew Temperature zero: ");
        Serial.println(tempValue);
 8083bdc:	f008 fd84 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083be0:	9901      	ldr	r1, [sp, #4]
 8083be2:	220a      	movs	r2, #10
 8083be4:	f007 fd7f 	bl	808b6e6 <_ZN5Print7printlnEii>
        temp_zero = tempValue;
 8083be8:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8083bec:	602b      	str	r3, [r5, #0]
        EEPROM.put(TEMP_ZERO_MEM_ADDRESS, tempValue);
 8083bee:	f009 f969 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8083bf2:	4621      	mov	r1, r4
 8083bf4:	202c      	movs	r0, #44	; 0x2c
 8083bf6:	f7fd f885 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 8083bfa:	e004      	b.n	8083c06 <_Z24serialGetTemperatureZerov+0x96>
    }else{
        Serial.println("\n\rInvalid value!");
 8083bfc:	f008 fd74 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083c00:	4908      	ldr	r1, [pc, #32]	; (8083c24 <_Z24serialGetTemperatureZerov+0xb4>)
 8083c02:	f007 fd02 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.print("Current Temperature zero:");
    Serial.print(temp_zero);
    Serial.println(" Degrees C");
    Serial.print("Enter new Temperature Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083c06:	a802      	add	r0, sp, #8
 8083c08:	f007 fa90 	bl	808b12c <_ZN6StringD1Ev>
        temp_zero = tempValue;
        EEPROM.put(TEMP_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083c0c:	b007      	add	sp, #28
 8083c0e:	bd30      	pop	{r4, r5, pc}
 8083c10:	20000ee8 	.word	0x20000ee8
 8083c14:	0809259b 	.word	0x0809259b
 8083c18:	08092558 	.word	0x08092558
 8083c1c:	080925b5 	.word	0x080925b5
 8083c20:	080925d2 	.word	0x080925d2
 8083c24:	0809213e 	.word	0x0809213e

08083c28 <_Z22serialGetPressureSlopev>:

void serialGetPressureSlope(void){
 8083c28:	b530      	push	{r4, r5, lr}
 8083c2a:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8083c2c:	f008 fd5c 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083c30:	f007 fcdf 	bl	808b5f2 <_ZN5Print7printlnEv>
    Serial.print("Current Pressure slope:");
 8083c34:	f008 fd58 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083c38:	4932      	ldr	r1, [pc, #200]	; (8083d04 <_Z22serialGetPressureSlopev+0xdc>)
 8083c3a:	f007 fcd3 	bl	808b5e4 <_ZN5Print5printEPKc>
    Serial.print(String(pressure_slope, 2));
 8083c3e:	f008 fd53 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083c42:	4605      	mov	r5, r0
 8083c44:	4c30      	ldr	r4, [pc, #192]	; (8083d08 <_Z22serialGetPressureSlopev+0xe0>)
 8083c46:	2202      	movs	r2, #2
 8083c48:	6821      	ldr	r1, [r4, #0]
 8083c4a:	a806      	add	r0, sp, #24
 8083c4c:	f007 fb4f 	bl	808b2ee <_ZN6StringC1Efi>
 8083c50:	9906      	ldr	r1, [sp, #24]
 8083c52:	4628      	mov	r0, r5
 8083c54:	f007 fcc6 	bl	808b5e4 <_ZN5Print5printEPKc>
 8083c58:	a806      	add	r0, sp, #24
 8083c5a:	f007 fa67 	bl	808b12c <_ZN6StringD1Ev>
    Serial.println(" torr");
 8083c5e:	f008 fd43 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083c62:	492a      	ldr	r1, [pc, #168]	; (8083d0c <_Z22serialGetPressureSlopev+0xe4>)
 8083c64:	f007 fcd1 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Pressure slope\n\r");
 8083c68:	f008 fd3e 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083c6c:	4928      	ldr	r1, [pc, #160]	; (8083d10 <_Z22serialGetPressureSlopev+0xe8>)
 8083c6e:	f007 fcb9 	bl	808b5e4 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083c72:	f008 fd39 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083c76:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083c7a:	f007 fe4a 	bl	808b912 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083c7e:	f008 fd33 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083c82:	220d      	movs	r2, #13
 8083c84:	4601      	mov	r1, r0
 8083c86:	a802      	add	r0, sp, #8
 8083c88:	f007 feb0 	bl	808b9ec <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083c8c:	a802      	add	r0, sp, #8
 8083c8e:	f007 fc60 	bl	808b552 <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8083c92:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(pressure_slope, 2));
    Serial.println(" torr");
    Serial.print("Enter new Pressure slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 8083c96:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8083c98:	f00a fa92 	bl	808e1c0 <__aeabi_fcmpge>
 8083c9c:	b340      	cbz	r0, 8083cf0 <_Z22serialGetPressureSlopev+0xc8>
 8083c9e:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8083ca2:	4628      	mov	r0, r5
 8083ca4:	f00a fa78 	bl	808e198 <__aeabi_fcmplt>
 8083ca8:	b310      	cbz	r0, 8083cf0 <_Z22serialGetPressureSlopev+0xc8>
        pressure_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 8083caa:	491a      	ldr	r1, [pc, #104]	; (8083d14 <_Z22serialGetPressureSlopev+0xec>)
 8083cac:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
        pressure_slope = tempfloat;
 8083cae:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 8083cb0:	f00a f8d4 	bl	808de5c <__aeabi_fmul>
 8083cb4:	f00a fa98 	bl	808e1e8 <__aeabi_f2iz>
 8083cb8:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew Pressure slope: ");
 8083cba:	f008 fd15 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083cbe:	4916      	ldr	r1, [pc, #88]	; (8083d18 <_Z22serialGetPressureSlopev+0xf0>)
 8083cc0:	f007 fc90 	bl	808b5e4 <_ZN5Print5printEPKc>
        Serial.println(String(pressure_slope,2));
 8083cc4:	f008 fd10 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083cc8:	4605      	mov	r5, r0
 8083cca:	2202      	movs	r2, #2
 8083ccc:	6821      	ldr	r1, [r4, #0]
 8083cce:	a806      	add	r0, sp, #24
 8083cd0:	f007 fb0d 	bl	808b2ee <_ZN6StringC1Efi>
 8083cd4:	9906      	ldr	r1, [sp, #24]
 8083cd6:	4628      	mov	r0, r5
 8083cd8:	f007 fc97 	bl	808b60a <_ZN5Print7printlnEPKc>
 8083cdc:	a806      	add	r0, sp, #24
 8083cde:	f007 fa25 	bl	808b12c <_ZN6StringD1Ev>

        EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, tempValue);
 8083ce2:	f009 f8ef 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8083ce6:	a901      	add	r1, sp, #4
 8083ce8:	2038      	movs	r0, #56	; 0x38
 8083cea:	f7fd f80b 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 8083cee:	e004      	b.n	8083cfa <_Z22serialGetPressureSlopev+0xd2>
    }else{
        Serial.println("\n\rInvalid value!");
 8083cf0:	f008 fcfa 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083cf4:	4909      	ldr	r1, [pc, #36]	; (8083d1c <_Z22serialGetPressureSlopev+0xf4>)
 8083cf6:	f007 fc88 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.print("Current Pressure slope:");
    Serial.print(String(pressure_slope, 2));
    Serial.println(" torr");
    Serial.print("Enter new Pressure slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083cfa:	a802      	add	r0, sp, #8
 8083cfc:	f007 fa16 	bl	808b12c <_ZN6StringD1Ev>

        EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083d00:	b00b      	add	sp, #44	; 0x2c
 8083d02:	bd30      	pop	{r4, r5, pc}
 8083d04:	080925eb 	.word	0x080925eb
 8083d08:	200005f8 	.word	0x200005f8
 8083d0c:	08092603 	.word	0x08092603
 8083d10:	08092609 	.word	0x08092609
 8083d14:	42c80000 	.word	0x42c80000
 8083d18:	08092624 	.word	0x08092624
 8083d1c:	0809213e 	.word	0x0809213e

08083d20 <_Z21serialGetPressureZerov>:

void serialGetPressureZero(void){
 8083d20:	b530      	push	{r4, r5, lr}
 8083d22:	b087      	sub	sp, #28
    Serial.println();
 8083d24:	f008 fce0 	bl	808c6e8 <_Z16_fetch_usbserialv>
    Serial.print("Current Pressure zero:");
    Serial.print(pressure_zero);
 8083d28:	4d26      	ldr	r5, [pc, #152]	; (8083dc4 <_Z21serialGetPressureZerov+0xa4>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetPressureZero(void){
    Serial.println();
 8083d2a:	f007 fc62 	bl	808b5f2 <_ZN5Print7printlnEv>
    Serial.print("Current Pressure zero:");
 8083d2e:	f008 fcdb 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083d32:	4925      	ldr	r1, [pc, #148]	; (8083dc8 <_Z21serialGetPressureZerov+0xa8>)
 8083d34:	f007 fc56 	bl	808b5e4 <_ZN5Print5printEPKc>
    Serial.print(pressure_zero);
 8083d38:	f008 fcd6 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083d3c:	220a      	movs	r2, #10
 8083d3e:	6829      	ldr	r1, [r5, #0]
 8083d40:	f007 fccf 	bl	808b6e2 <_ZN5Print5printEii>
    Serial.println(" ppm");
 8083d44:	f008 fcd0 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083d48:	4920      	ldr	r1, [pc, #128]	; (8083dcc <_Z21serialGetPressureZerov+0xac>)
 8083d4a:	f007 fc5e 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Pressure Zero\n\r");
 8083d4e:	f008 fccb 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083d52:	491f      	ldr	r1, [pc, #124]	; (8083dd0 <_Z21serialGetPressureZerov+0xb0>)
 8083d54:	f007 fc46 	bl	808b5e4 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083d58:	f008 fcc6 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083d5c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083d60:	f007 fdd7 	bl	808b912 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083d64:	f008 fcc0 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083d68:	220d      	movs	r2, #13
 8083d6a:	4601      	mov	r1, r0
 8083d6c:	a802      	add	r0, sp, #8
 8083d6e:	f007 fe3d 	bl	808b9ec <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8083d72:	a802      	add	r0, sp, #8
 8083d74:	f007 fbe8 	bl	808b548 <_ZNK6String5toIntEv>
 8083d78:	9001      	str	r0, [sp, #4]

    if(tempValue >= -1000 && tempValue < 1000){
 8083d7a:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8083d7e:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8083d82:	d215      	bcs.n	8083db0 <_Z21serialGetPressureZerov+0x90>
        Serial.print("\n\rNew Pressure zero: ");
 8083d84:	f008 fcb0 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083d88:	4912      	ldr	r1, [pc, #72]	; (8083dd4 <_Z21serialGetPressureZerov+0xb4>)
 8083d8a:	f007 fc2b 	bl	808b5e4 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        pressure_zero = tempValue;
 8083d8e:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -1000 && tempValue < 1000){
        Serial.print("\n\rNew Pressure zero: ");
        Serial.println(tempValue);
 8083d90:	f008 fcaa 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083d94:	9901      	ldr	r1, [sp, #4]
 8083d96:	220a      	movs	r2, #10
 8083d98:	f007 fca5 	bl	808b6e6 <_ZN5Print7printlnEii>
        pressure_zero = tempValue;
 8083d9c:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8083da0:	602b      	str	r3, [r5, #0]
        EEPROM.put(PRESSURE_ZERO_MEM_ADDRESS, tempValue);
 8083da2:	f009 f88f 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8083da6:	4621      	mov	r1, r4
 8083da8:	2034      	movs	r0, #52	; 0x34
 8083daa:	f7fc ffab 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 8083dae:	e004      	b.n	8083dba <_Z21serialGetPressureZerov+0x9a>
    }else{
        Serial.println("\n\rInvalid value!");
 8083db0:	f008 fc9a 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083db4:	4908      	ldr	r1, [pc, #32]	; (8083dd8 <_Z21serialGetPressureZerov+0xb8>)
 8083db6:	f007 fc28 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.print("Current Pressure zero:");
    Serial.print(pressure_zero);
    Serial.println(" ppm");
    Serial.print("Enter new Pressure Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083dba:	a802      	add	r0, sp, #8
 8083dbc:	f007 f9b6 	bl	808b12c <_ZN6StringD1Ev>
        pressure_zero = tempValue;
        EEPROM.put(PRESSURE_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083dc0:	b007      	add	sp, #28
 8083dc2:	bd30      	pop	{r4, r5, pc}
 8083dc4:	20000e40 	.word	0x20000e40
 8083dc8:	0809263b 	.word	0x0809263b
 8083dcc:	080922ed 	.word	0x080922ed
 8083dd0:	08092652 	.word	0x08092652
 8083dd4:	0809266c 	.word	0x0809266c
 8083dd8:	0809213e 	.word	0x0809213e

08083ddc <_Z22serialGetHumiditySlopev>:

void serialGetHumiditySlope(void){
 8083ddc:	b530      	push	{r4, r5, lr}
 8083dde:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8083de0:	f008 fc82 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083de4:	f007 fc05 	bl	808b5f2 <_ZN5Print7printlnEv>
    Serial.print("Current RH slope:");
 8083de8:	f008 fc7e 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083dec:	4932      	ldr	r1, [pc, #200]	; (8083eb8 <_Z22serialGetHumiditySlopev+0xdc>)
 8083dee:	f007 fbf9 	bl	808b5e4 <_ZN5Print5printEPKc>
    Serial.print(String(rh_slope, 2));
 8083df2:	f008 fc79 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083df6:	4605      	mov	r5, r0
 8083df8:	4c30      	ldr	r4, [pc, #192]	; (8083ebc <_Z22serialGetHumiditySlopev+0xe0>)
 8083dfa:	2202      	movs	r2, #2
 8083dfc:	6821      	ldr	r1, [r4, #0]
 8083dfe:	a806      	add	r0, sp, #24
 8083e00:	f007 fa75 	bl	808b2ee <_ZN6StringC1Efi>
 8083e04:	9906      	ldr	r1, [sp, #24]
 8083e06:	4628      	mov	r0, r5
 8083e08:	f007 fbec 	bl	808b5e4 <_ZN5Print5printEPKc>
 8083e0c:	a806      	add	r0, sp, #24
 8083e0e:	f007 f98d 	bl	808b12c <_ZN6StringD1Ev>
    Serial.println(" %");
 8083e12:	f008 fc69 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083e16:	492a      	ldr	r1, [pc, #168]	; (8083ec0 <_Z22serialGetHumiditySlopev+0xe4>)
 8083e18:	f007 fbf7 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.print("Enter new RH slope\n\r");
 8083e1c:	f008 fc64 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083e20:	4928      	ldr	r1, [pc, #160]	; (8083ec4 <_Z22serialGetHumiditySlopev+0xe8>)
 8083e22:	f007 fbdf 	bl	808b5e4 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083e26:	f008 fc5f 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083e2a:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083e2e:	f007 fd70 	bl	808b912 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083e32:	f008 fc59 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083e36:	220d      	movs	r2, #13
 8083e38:	4601      	mov	r1, r0
 8083e3a:	a802      	add	r0, sp, #8
 8083e3c:	f007 fdd6 	bl	808b9ec <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083e40:	a802      	add	r0, sp, #8
 8083e42:	f007 fb86 	bl	808b552 <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 10){
 8083e46:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(rh_slope, 2));
    Serial.println(" %");
    Serial.print("Enter new RH slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 8083e4a:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 10){
 8083e4c:	f00a f9b8 	bl	808e1c0 <__aeabi_fcmpge>
 8083e50:	b338      	cbz	r0, 8083ea2 <_Z22serialGetHumiditySlopev+0xc6>
 8083e52:	491d      	ldr	r1, [pc, #116]	; (8083ec8 <_Z22serialGetHumiditySlopev+0xec>)
 8083e54:	4628      	mov	r0, r5
 8083e56:	f00a f99f 	bl	808e198 <__aeabi_fcmplt>
 8083e5a:	b310      	cbz	r0, 8083ea2 <_Z22serialGetHumiditySlopev+0xc6>
        rh_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 8083e5c:	491b      	ldr	r1, [pc, #108]	; (8083ecc <_Z22serialGetHumiditySlopev+0xf0>)
 8083e5e:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 10){
        rh_slope = tempfloat;
 8083e60:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 8083e62:	f009 fffb 	bl	808de5c <__aeabi_fmul>
 8083e66:	f00a f9bf 	bl	808e1e8 <__aeabi_f2iz>
 8083e6a:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew RH slope: ");
 8083e6c:	f008 fc3c 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083e70:	4917      	ldr	r1, [pc, #92]	; (8083ed0 <_Z22serialGetHumiditySlopev+0xf4>)
 8083e72:	f007 fbb7 	bl	808b5e4 <_ZN5Print5printEPKc>
        Serial.println(String(rh_slope,2));
 8083e76:	f008 fc37 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083e7a:	4605      	mov	r5, r0
 8083e7c:	2202      	movs	r2, #2
 8083e7e:	6821      	ldr	r1, [r4, #0]
 8083e80:	a806      	add	r0, sp, #24
 8083e82:	f007 fa34 	bl	808b2ee <_ZN6StringC1Efi>
 8083e86:	9906      	ldr	r1, [sp, #24]
 8083e88:	4628      	mov	r0, r5
 8083e8a:	f007 fbbe 	bl	808b60a <_ZN5Print7printlnEPKc>
 8083e8e:	a806      	add	r0, sp, #24
 8083e90:	f007 f94c 	bl	808b12c <_ZN6StringD1Ev>

        EEPROM.put(RH_SLOPE_MEM_ADDRESS, tempValue);
 8083e94:	f009 f816 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8083e98:	a901      	add	r1, sp, #4
 8083e9a:	2040      	movs	r0, #64	; 0x40
 8083e9c:	f7fc ff32 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 8083ea0:	e004      	b.n	8083eac <_Z22serialGetHumiditySlopev+0xd0>
    }else{
        Serial.println("\n\rInvalid value!");
 8083ea2:	f008 fc21 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083ea6:	490b      	ldr	r1, [pc, #44]	; (8083ed4 <_Z22serialGetHumiditySlopev+0xf8>)
 8083ea8:	f007 fbaf 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.print("Current RH slope:");
    Serial.print(String(rh_slope, 2));
    Serial.println(" %");
    Serial.print("Enter new RH slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083eac:	a802      	add	r0, sp, #8
 8083eae:	f007 f93d 	bl	808b12c <_ZN6StringD1Ev>

        EEPROM.put(RH_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083eb2:	b00b      	add	sp, #44	; 0x2c
 8083eb4:	bd30      	pop	{r4, r5, pc}
 8083eb6:	bf00      	nop
 8083eb8:	08092682 	.word	0x08092682
 8083ebc:	20000af8 	.word	0x20000af8
 8083ec0:	08092694 	.word	0x08092694
 8083ec4:	08092697 	.word	0x08092697
 8083ec8:	41200000 	.word	0x41200000
 8083ecc:	42c80000 	.word	0x42c80000
 8083ed0:	080926ac 	.word	0x080926ac
 8083ed4:	0809213e 	.word	0x0809213e

08083ed8 <_Z21serialGetHumidityZerov>:

void serialGetHumidityZero(void){
 8083ed8:	b530      	push	{r4, r5, lr}
 8083eda:	b087      	sub	sp, #28
    Serial.println();
 8083edc:	f008 fc04 	bl	808c6e8 <_Z16_fetch_usbserialv>
    Serial.print("Current RH zero:");
    Serial.print(rh_zero);
 8083ee0:	4d25      	ldr	r5, [pc, #148]	; (8083f78 <_Z21serialGetHumidityZerov+0xa0>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetHumidityZero(void){
    Serial.println();
 8083ee2:	f007 fb86 	bl	808b5f2 <_ZN5Print7printlnEv>
    Serial.print("Current RH zero:");
 8083ee6:	f008 fbff 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083eea:	4924      	ldr	r1, [pc, #144]	; (8083f7c <_Z21serialGetHumidityZerov+0xa4>)
 8083eec:	f007 fb7a 	bl	808b5e4 <_ZN5Print5printEPKc>
    Serial.print(rh_zero);
 8083ef0:	f008 fbfa 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083ef4:	220a      	movs	r2, #10
 8083ef6:	6829      	ldr	r1, [r5, #0]
 8083ef8:	f007 fbf3 	bl	808b6e2 <_ZN5Print5printEii>
    Serial.println(" %");
 8083efc:	f008 fbf4 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083f00:	491f      	ldr	r1, [pc, #124]	; (8083f80 <_Z21serialGetHumidityZerov+0xa8>)
 8083f02:	f007 fb82 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.print("Enter new RH Zero\n\r");
 8083f06:	f008 fbef 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083f0a:	491e      	ldr	r1, [pc, #120]	; (8083f84 <_Z21serialGetHumidityZerov+0xac>)
 8083f0c:	f007 fb6a 	bl	808b5e4 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083f10:	f008 fbea 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083f14:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083f18:	f007 fcfb 	bl	808b912 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083f1c:	f008 fbe4 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083f20:	220d      	movs	r2, #13
 8083f22:	4601      	mov	r1, r0
 8083f24:	a802      	add	r0, sp, #8
 8083f26:	f007 fd61 	bl	808b9ec <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8083f2a:	a802      	add	r0, sp, #8
 8083f2c:	f007 fb0c 	bl	808b548 <_ZNK6String5toIntEv>
 8083f30:	9001      	str	r0, [sp, #4]

    if(tempValue >= -50 && tempValue < 50){
 8083f32:	3032      	adds	r0, #50	; 0x32
 8083f34:	2863      	cmp	r0, #99	; 0x63
 8083f36:	d815      	bhi.n	8083f64 <_Z21serialGetHumidityZerov+0x8c>
        Serial.print("\n\rNew RH zero: ");
 8083f38:	f008 fbd6 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083f3c:	4912      	ldr	r1, [pc, #72]	; (8083f88 <_Z21serialGetHumidityZerov+0xb0>)
 8083f3e:	f007 fb51 	bl	808b5e4 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        rh_zero = tempValue;
 8083f42:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -50 && tempValue < 50){
        Serial.print("\n\rNew RH zero: ");
        Serial.println(tempValue);
 8083f44:	f008 fbd0 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083f48:	9901      	ldr	r1, [sp, #4]
 8083f4a:	220a      	movs	r2, #10
 8083f4c:	f007 fbcb 	bl	808b6e6 <_ZN5Print7printlnEii>
        rh_zero = tempValue;
 8083f50:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8083f54:	602b      	str	r3, [r5, #0]
        EEPROM.put(RH_ZERO_MEM_ADDRESS, tempValue);
 8083f56:	f008 ffb5 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8083f5a:	4621      	mov	r1, r4
 8083f5c:	203c      	movs	r0, #60	; 0x3c
 8083f5e:	f7fc fed1 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 8083f62:	e004      	b.n	8083f6e <_Z21serialGetHumidityZerov+0x96>
    }else{
        Serial.println("\n\rInvalid value!");
 8083f64:	f008 fbc0 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083f68:	4908      	ldr	r1, [pc, #32]	; (8083f8c <_Z21serialGetHumidityZerov+0xb4>)
 8083f6a:	f007 fb4e 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.print("Current RH zero:");
    Serial.print(rh_zero);
    Serial.println(" %");
    Serial.print("Enter new RH Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083f6e:	a802      	add	r0, sp, #8
 8083f70:	f007 f8dc 	bl	808b12c <_ZN6StringD1Ev>
        rh_zero = tempValue;
        EEPROM.put(RH_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083f74:	b007      	add	sp, #28
 8083f76:	bd30      	pop	{r4, r5, pc}
 8083f78:	20000b7c 	.word	0x20000b7c
 8083f7c:	080926bd 	.word	0x080926bd
 8083f80:	08092694 	.word	0x08092694
 8083f84:	080926ce 	.word	0x080926ce
 8083f88:	080926e2 	.word	0x080926e2
 8083f8c:	0809213e 	.word	0x0809213e

08083f90 <_Z19serialGetLowerLimitv>:
    }else{
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetLowerLimit(void){
 8083f90:	b530      	push	{r4, r5, lr}
 8083f92:	b089      	sub	sp, #36	; 0x24
    Serial.println();
 8083f94:	f008 fba8 	bl	808c6e8 <_Z16_fetch_usbserialv>
    Serial.print("Current lower limit:");
    Serial.println(gas_lower_limit);
 8083f98:	4c35      	ldr	r4, [pc, #212]	; (8084070 <_Z19serialGetLowerLimitv+0xe0>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetLowerLimit(void){
    Serial.println();
 8083f9a:	f007 fb2a 	bl	808b5f2 <_ZN5Print7printlnEv>
    Serial.print("Current lower limit:");
 8083f9e:	f008 fba3 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083fa2:	4934      	ldr	r1, [pc, #208]	; (8084074 <_Z19serialGetLowerLimitv+0xe4>)
 8083fa4:	f007 fb1e 	bl	808b5e4 <_ZN5Print5printEPKc>
    Serial.println(gas_lower_limit);
 8083fa8:	f008 fb9e 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083fac:	220a      	movs	r2, #10
 8083fae:	6821      	ldr	r1, [r4, #0]
 8083fb0:	f007 fb99 	bl	808b6e6 <_ZN5Print7printlnEii>
    Serial.println("Please enter password in order to change the lower limit");
 8083fb4:	f008 fb98 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083fb8:	492f      	ldr	r1, [pc, #188]	; (8084078 <_Z19serialGetLowerLimitv+0xe8>)
 8083fba:	f007 fb26 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8083fbe:	f008 fb93 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083fc2:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083fc6:	f007 fca4 	bl	808b912 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083fca:	f008 fb8d 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083fce:	220d      	movs	r2, #13
 8083fd0:	4601      	mov	r1, r0
 8083fd2:	4668      	mov	r0, sp
 8083fd4:	f007 fd0a 	bl	808b9ec <_ZN6Stream15readStringUntilEc>
 8083fd8:	4928      	ldr	r1, [pc, #160]	; (808407c <_Z19serialGetLowerLimitv+0xec>)
 8083fda:	4668      	mov	r0, sp
 8083fdc:	f007 fa42 	bl	808b464 <_ZNK6String6equalsEPKc>


    if(tempString == "bould"){
 8083fe0:	2800      	cmp	r0, #0
 8083fe2:	d03a      	beq.n	808405a <_Z19serialGetLowerLimitv+0xca>
        Serial.println("Password correct!");
 8083fe4:	f008 fb80 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083fe8:	4925      	ldr	r1, [pc, #148]	; (8084080 <_Z19serialGetLowerLimitv+0xf0>)
 8083fea:	f007 fb0e 	bl	808b60a <_ZN5Print7printlnEPKc>
        Serial.println("Enter new lower limit:\n\r");
 8083fee:	f008 fb7b 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083ff2:	4924      	ldr	r1, [pc, #144]	; (8084084 <_Z19serialGetLowerLimitv+0xf4>)
 8083ff4:	f007 fb09 	bl	808b60a <_ZN5Print7printlnEPKc>
        String tempString = Serial.readStringUntil('\r');
 8083ff8:	f008 fb76 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8083ffc:	220d      	movs	r2, #13
 8083ffe:	4601      	mov	r1, r0
 8084000:	a804      	add	r0, sp, #16
 8084002:	f007 fcf3 	bl	808b9ec <_ZN6Stream15readStringUntilEc>
        int tempValue = tempString.toInt();
 8084006:	a804      	add	r0, sp, #16
 8084008:	f007 fa9e 	bl	808b548 <_ZNK6String5toIntEv>
 808400c:	4605      	mov	r5, r0
        Serial.println("");
 808400e:	f008 fb6b 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8084012:	491d      	ldr	r1, [pc, #116]	; (8084088 <_Z19serialGetLowerLimitv+0xf8>)
 8084014:	f007 faf9 	bl	808b60a <_ZN5Print7printlnEPKc>
        if(tempValue > 0 && tempValue < 20000){
 8084018:	f644 631e 	movw	r3, #19998	; 0x4e1e
 808401c:	1e6a      	subs	r2, r5, #1
 808401e:	429a      	cmp	r2, r3
 8084020:	d812      	bhi.n	8084048 <_Z19serialGetLowerLimitv+0xb8>
            Serial.print("\n\rNew lower limit:");
 8084022:	f008 fb61 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8084026:	4919      	ldr	r1, [pc, #100]	; (808408c <_Z19serialGetLowerLimitv+0xfc>)
 8084028:	f007 fadc 	bl	808b5e4 <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 808402c:	f008 fb5c 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8084030:	4629      	mov	r1, r5
 8084032:	220a      	movs	r2, #10
 8084034:	f007 fb57 	bl	808b6e6 <_ZN5Print7printlnEii>
            gas_lower_limit = tempValue;
 8084038:	6025      	str	r5, [r4, #0]
            EEPROM.put(GAS_LOWER_LIMIT_MEM_ADDRESS, gas_lower_limit);
 808403a:	f008 ff43 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 808403e:	4621      	mov	r1, r4
 8084040:	204c      	movs	r0, #76	; 0x4c
 8084042:	f7fc fe5f 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 8084046:	e004      	b.n	8084052 <_Z19serialGetLowerLimitv+0xc2>
        }else{
            Serial.println("\n\rInvalid value!");
 8084048:	f008 fb4e 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808404c:	4910      	ldr	r1, [pc, #64]	; (8084090 <_Z19serialGetLowerLimitv+0x100>)
 808404e:	f007 fadc 	bl	808b60a <_ZN5Print7printlnEPKc>


    if(tempString == "bould"){
        Serial.println("Password correct!");
        Serial.println("Enter new lower limit:\n\r");
        String tempString = Serial.readStringUntil('\r');
 8084052:	a804      	add	r0, sp, #16
 8084054:	f007 f86a 	bl	808b12c <_ZN6StringD1Ev>
 8084058:	e004      	b.n	8084064 <_Z19serialGetLowerLimitv+0xd4>
            EEPROM.put(GAS_LOWER_LIMIT_MEM_ADDRESS, gas_lower_limit);
        }else{
            Serial.println("\n\rInvalid value!");
        }
    }else{
        Serial.println("\n\rIncorrect password!");
 808405a:	f008 fb45 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808405e:	490d      	ldr	r1, [pc, #52]	; (8084094 <_Z19serialGetLowerLimitv+0x104>)
 8084060:	f007 fad3 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println();
    Serial.print("Current lower limit:");
    Serial.println(gas_lower_limit);
    Serial.println("Please enter password in order to change the lower limit");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8084064:	4668      	mov	r0, sp
 8084066:	f007 f861 	bl	808b12c <_ZN6StringD1Ev>
            Serial.println("\n\rInvalid value!");
        }
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
 808406a:	b009      	add	sp, #36	; 0x24
 808406c:	bd30      	pop	{r4, r5, pc}
 808406e:	bf00      	nop
 8084070:	2000049c 	.word	0x2000049c
 8084074:	0809273a 	.word	0x0809273a
 8084078:	0809274f 	.word	0x0809274f
 808407c:	08091f94 	.word	0x08091f94
 8084080:	08091f9a 	.word	0x08091f9a
 8084084:	08092788 	.word	0x08092788
 8084088:	08094308 	.word	0x08094308
 808408c:	080927a1 	.word	0x080927a1
 8084090:	0809213e 	.word	0x0809213e
 8084094:	080920bf 	.word	0x080920bf

08084098 <_Z19serialGetUpperLimitv>:
void serialGetUpperLimit(void){
 8084098:	b530      	push	{r4, r5, lr}
 808409a:	b089      	sub	sp, #36	; 0x24
    Serial.println();
 808409c:	f008 fb24 	bl	808c6e8 <_Z16_fetch_usbserialv>
    Serial.print("Current upper limit:");
    Serial.println(gas_upper_limit);
 80840a0:	4c35      	ldr	r4, [pc, #212]	; (8084178 <_Z19serialGetUpperLimitv+0xe0>)
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
void serialGetUpperLimit(void){
    Serial.println();
 80840a2:	f007 faa6 	bl	808b5f2 <_ZN5Print7printlnEv>
    Serial.print("Current upper limit:");
 80840a6:	f008 fb1f 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80840aa:	4934      	ldr	r1, [pc, #208]	; (808417c <_Z19serialGetUpperLimitv+0xe4>)
 80840ac:	f007 fa9a 	bl	808b5e4 <_ZN5Print5printEPKc>
    Serial.println(gas_upper_limit);
 80840b0:	f008 fb1a 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80840b4:	220a      	movs	r2, #10
 80840b6:	6821      	ldr	r1, [r4, #0]
 80840b8:	f007 fb15 	bl	808b6e6 <_ZN5Print7printlnEii>
    Serial.println("Please enter password in order to change the upper limit");
 80840bc:	f008 fb14 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80840c0:	492f      	ldr	r1, [pc, #188]	; (8084180 <_Z19serialGetUpperLimitv+0xe8>)
 80840c2:	f007 faa2 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 80840c6:	f008 fb0f 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80840ca:	f24c 3150 	movw	r1, #50000	; 0xc350
 80840ce:	f007 fc20 	bl	808b912 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80840d2:	f008 fb09 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80840d6:	220d      	movs	r2, #13
 80840d8:	4601      	mov	r1, r0
 80840da:	4668      	mov	r0, sp
 80840dc:	f007 fc86 	bl	808b9ec <_ZN6Stream15readStringUntilEc>
 80840e0:	4928      	ldr	r1, [pc, #160]	; (8084184 <_Z19serialGetUpperLimitv+0xec>)
 80840e2:	4668      	mov	r0, sp
 80840e4:	f007 f9be 	bl	808b464 <_ZNK6String6equalsEPKc>


    if(tempString == "bould"){
 80840e8:	2800      	cmp	r0, #0
 80840ea:	d03a      	beq.n	8084162 <_Z19serialGetUpperLimitv+0xca>
        Serial.println("Password correct!");
 80840ec:	f008 fafc 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80840f0:	4925      	ldr	r1, [pc, #148]	; (8084188 <_Z19serialGetUpperLimitv+0xf0>)
 80840f2:	f007 fa8a 	bl	808b60a <_ZN5Print7printlnEPKc>
        Serial.println("Enter new upper limit:\n\r");
 80840f6:	f008 faf7 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80840fa:	4924      	ldr	r1, [pc, #144]	; (808418c <_Z19serialGetUpperLimitv+0xf4>)
 80840fc:	f007 fa85 	bl	808b60a <_ZN5Print7printlnEPKc>
        String tempString = Serial.readStringUntil('\r');
 8084100:	f008 faf2 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8084104:	220d      	movs	r2, #13
 8084106:	4601      	mov	r1, r0
 8084108:	a804      	add	r0, sp, #16
 808410a:	f007 fc6f 	bl	808b9ec <_ZN6Stream15readStringUntilEc>
        int tempValue = tempString.toInt();
 808410e:	a804      	add	r0, sp, #16
 8084110:	f007 fa1a 	bl	808b548 <_ZNK6String5toIntEv>
 8084114:	4605      	mov	r5, r0
        Serial.println("");
 8084116:	f008 fae7 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808411a:	491d      	ldr	r1, [pc, #116]	; (8084190 <_Z19serialGetUpperLimitv+0xf8>)
 808411c:	f007 fa75 	bl	808b60a <_ZN5Print7printlnEPKc>
        if(tempValue > 0 && tempValue < 50000){
 8084120:	f24c 334e 	movw	r3, #49998	; 0xc34e
 8084124:	1e6a      	subs	r2, r5, #1
 8084126:	429a      	cmp	r2, r3
 8084128:	d812      	bhi.n	8084150 <_Z19serialGetUpperLimitv+0xb8>
            Serial.print("\n\rNew upper limit:");
 808412a:	f008 fadd 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808412e:	4919      	ldr	r1, [pc, #100]	; (8084194 <_Z19serialGetUpperLimitv+0xfc>)
 8084130:	f007 fa58 	bl	808b5e4 <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 8084134:	f008 fad8 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8084138:	4629      	mov	r1, r5
 808413a:	220a      	movs	r2, #10
 808413c:	f007 fad3 	bl	808b6e6 <_ZN5Print7printlnEii>
            gas_upper_limit = tempValue;
 8084140:	6025      	str	r5, [r4, #0]
            EEPROM.put(GAS_UPPER_LIMIT_MEM_ADDRESS, gas_upper_limit);
 8084142:	f008 febf 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8084146:	4621      	mov	r1, r4
 8084148:	2050      	movs	r0, #80	; 0x50
 808414a:	f7fc fddb 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 808414e:	e004      	b.n	808415a <_Z19serialGetUpperLimitv+0xc2>
        }else{
            Serial.println("\n\rInvalid value!");
 8084150:	f008 faca 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8084154:	4910      	ldr	r1, [pc, #64]	; (8084198 <_Z19serialGetUpperLimitv+0x100>)
 8084156:	f007 fa58 	bl	808b60a <_ZN5Print7printlnEPKc>


    if(tempString == "bould"){
        Serial.println("Password correct!");
        Serial.println("Enter new upper limit:\n\r");
        String tempString = Serial.readStringUntil('\r');
 808415a:	a804      	add	r0, sp, #16
 808415c:	f006 ffe6 	bl	808b12c <_ZN6StringD1Ev>
 8084160:	e004      	b.n	808416c <_Z19serialGetUpperLimitv+0xd4>
            EEPROM.put(GAS_UPPER_LIMIT_MEM_ADDRESS, gas_upper_limit);
        }else{
            Serial.println("\n\rInvalid value!");
        }
    }else{
        Serial.println("\n\rIncorrect password!");
 8084162:	f008 fac1 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8084166:	490d      	ldr	r1, [pc, #52]	; (808419c <_Z19serialGetUpperLimitv+0x104>)
 8084168:	f007 fa4f 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println();
    Serial.print("Current upper limit:");
    Serial.println(gas_upper_limit);
    Serial.println("Please enter password in order to change the upper limit");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 808416c:	4668      	mov	r0, sp
 808416e:	f006 ffdd 	bl	808b12c <_ZN6StringD1Ev>
            Serial.println("\n\rInvalid value!");
        }
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
 8084172:	b009      	add	sp, #36	; 0x24
 8084174:	bd30      	pop	{r4, r5, pc}
 8084176:	bf00      	nop
 8084178:	20000490 	.word	0x20000490
 808417c:	080927b4 	.word	0x080927b4
 8084180:	080927c9 	.word	0x080927c9
 8084184:	08091f94 	.word	0x08091f94
 8084188:	08091f9a 	.word	0x08091f9a
 808418c:	08092802 	.word	0x08092802
 8084190:	08094308 	.word	0x08094308
 8084194:	0809281b 	.word	0x0809281b
 8084198:	0809213e 	.word	0x0809213e
 808419c:	080920bf 	.word	0x080920bf

080841a0 <_Z23outputSerialMenuOptionsv>:
    while(!Serial.available()){
        CO_float = readCO();
        Serial.printf("CO: %1.3f ppm\n\r", CO_float);
    }
}
void outputSerialMenuOptions(void){
 80841a0:	b508      	push	{r3, lr}
    Serial.println("Command:  Description");
 80841a2:	f008 faa1 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80841a6:	49a2      	ldr	r1, [pc, #648]	; (8084430 <_Z23outputSerialMenuOptionsv+0x290>)
 80841a8:	f007 fa2f 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("a:  Adjust CO2 slope");
 80841ac:	f008 fa9c 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80841b0:	49a0      	ldr	r1, [pc, #640]	; (8084434 <_Z23outputSerialMenuOptionsv+0x294>)
 80841b2:	f007 fa2a 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("b:  Adjust CO2 zero");
 80841b6:	f008 fa97 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80841ba:	499f      	ldr	r1, [pc, #636]	; (8084438 <_Z23outputSerialMenuOptionsv+0x298>)
 80841bc:	f007 fa25 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("c:  Adjust CO slope");
 80841c0:	f008 fa92 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80841c4:	499d      	ldr	r1, [pc, #628]	; (808443c <_Z23outputSerialMenuOptionsv+0x29c>)
 80841c6:	f007 fa20 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("d:  Adjust CO zero");
 80841ca:	f008 fa8d 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80841ce:	499c      	ldr	r1, [pc, #624]	; (8084440 <_Z23outputSerialMenuOptionsv+0x2a0>)
 80841d0:	f007 fa1b 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("e:  Adjust PM1 slope");
 80841d4:	f008 fa88 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80841d8:	499a      	ldr	r1, [pc, #616]	; (8084444 <_Z23outputSerialMenuOptionsv+0x2a4>)
 80841da:	f007 fa16 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("f:  Adjust PM1 zero");
 80841de:	f008 fa83 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80841e2:	4999      	ldr	r1, [pc, #612]	; (8084448 <_Z23outputSerialMenuOptionsv+0x2a8>)
 80841e4:	f007 fa11 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("g:  Adjust PM2.5 slope");
 80841e8:	f008 fa7e 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80841ec:	4997      	ldr	r1, [pc, #604]	; (808444c <_Z23outputSerialMenuOptionsv+0x2ac>)
 80841ee:	f007 fa0c 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("h:  Adjust PM2.5 zero");
 80841f2:	f008 fa79 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80841f6:	4996      	ldr	r1, [pc, #600]	; (8084450 <_Z23outputSerialMenuOptionsv+0x2b0>)
 80841f8:	f007 fa07 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("i:  Adjust PM10 slope");
 80841fc:	f008 fa74 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8084200:	4994      	ldr	r1, [pc, #592]	; (8084454 <_Z23outputSerialMenuOptionsv+0x2b4>)
 8084202:	f007 fa02 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("j:  Adjust PM10 zero");
 8084206:	f008 fa6f 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808420a:	4993      	ldr	r1, [pc, #588]	; (8084458 <_Z23outputSerialMenuOptionsv+0x2b8>)
 808420c:	f007 f9fd 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("k:  Adjust Temperature slope");
 8084210:	f008 fa6a 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8084214:	4991      	ldr	r1, [pc, #580]	; (808445c <_Z23outputSerialMenuOptionsv+0x2bc>)
 8084216:	f007 f9f8 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("l:  Adjust Temperature zero");
 808421a:	f008 fa65 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808421e:	4990      	ldr	r1, [pc, #576]	; (8084460 <_Z23outputSerialMenuOptionsv+0x2c0>)
 8084220:	f007 f9f3 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("m:  Adjust Pressure slope");
 8084224:	f008 fa60 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8084228:	498e      	ldr	r1, [pc, #568]	; (8084464 <_Z23outputSerialMenuOptionsv+0x2c4>)
 808422a:	f007 f9ee 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("n:  Adjust Pressure zero");
 808422e:	f008 fa5b 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8084232:	498d      	ldr	r1, [pc, #564]	; (8084468 <_Z23outputSerialMenuOptionsv+0x2c8>)
 8084234:	f007 f9e9 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("o:  Adjust Humidity slope");
 8084238:	f008 fa56 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808423c:	498b      	ldr	r1, [pc, #556]	; (808446c <_Z23outputSerialMenuOptionsv+0x2cc>)
 808423e:	f007 f9e4 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("p:  Adjust Humidity zero");
 8084242:	f008 fa51 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8084246:	498a      	ldr	r1, [pc, #552]	; (8084470 <_Z23outputSerialMenuOptionsv+0x2d0>)
 8084248:	f007 f9df 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("q:  Enable serial debugging");
 808424c:	f008 fa4c 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8084250:	4988      	ldr	r1, [pc, #544]	; (8084474 <_Z23outputSerialMenuOptionsv+0x2d4>)
 8084252:	f007 f9da 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("r:  Disable serial debugging");
 8084256:	f008 fa47 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808425a:	4987      	ldr	r1, [pc, #540]	; (8084478 <_Z23outputSerialMenuOptionsv+0x2d8>)
 808425c:	f007 f9d5 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("s:  Output header string");
 8084260:	f008 fa42 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8084264:	4985      	ldr	r1, [pc, #532]	; (808447c <_Z23outputSerialMenuOptionsv+0x2dc>)
 8084266:	f007 f9d0 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("t:  Enter new time and date");
 808426a:	f008 fa3d 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808426e:	4984      	ldr	r1, [pc, #528]	; (8084480 <_Z23outputSerialMenuOptionsv+0x2e0>)
 8084270:	f007 f9cb 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("u:  Enter new time zone");
 8084274:	f008 fa38 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8084278:	4982      	ldr	r1, [pc, #520]	; (8084484 <_Z23outputSerialMenuOptionsv+0x2e4>)
 808427a:	f007 f9c6 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("v:  Adjust the Device ID");
 808427e:	f008 fa33 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8084282:	4981      	ldr	r1, [pc, #516]	; (8084488 <_Z23outputSerialMenuOptionsv+0x2e8>)
 8084284:	f007 f9c1 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("w:  Get wifi credentials");
 8084288:	f008 fa2e 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808428c:	497f      	ldr	r1, [pc, #508]	; (808448c <_Z23outputSerialMenuOptionsv+0x2ec>)
 808428e:	f007 f9bc 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("y:  Enable cellular");
 8084292:	f008 fa29 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8084296:	497e      	ldr	r1, [pc, #504]	; (8084490 <_Z23outputSerialMenuOptionsv+0x2f0>)
 8084298:	f007 f9b7 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("z:  Disable cellular");
 808429c:	f008 fa24 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80842a0:	497c      	ldr	r1, [pc, #496]	; (8084494 <_Z23outputSerialMenuOptionsv+0x2f4>)
 80842a2:	f007 f9b2 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("1:  Adjust gas lower limit");
 80842a6:	f008 fa1f 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80842aa:	497b      	ldr	r1, [pc, #492]	; (8084498 <_Z23outputSerialMenuOptionsv+0x2f8>)
 80842ac:	f007 f9ad 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("2:  Adjust gas upper limit");
 80842b0:	f008 fa1a 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80842b4:	4979      	ldr	r1, [pc, #484]	; (808449c <_Z23outputSerialMenuOptionsv+0x2fc>)
 80842b6:	f007 f9a8 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("3:  Get build version");
 80842ba:	f008 fa15 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80842be:	4978      	ldr	r1, [pc, #480]	; (80844a0 <_Z23outputSerialMenuOptionsv+0x300>)
 80842c0:	f007 f9a3 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("4:  Enable Ozone");
 80842c4:	f008 fa10 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80842c8:	4976      	ldr	r1, [pc, #472]	; (80844a4 <_Z23outputSerialMenuOptionsv+0x304>)
 80842ca:	f007 f99e 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("5:  Disable Ozone");
 80842ce:	f008 fa0b 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80842d2:	4975      	ldr	r1, [pc, #468]	; (80844a8 <_Z23outputSerialMenuOptionsv+0x308>)
 80842d4:	f007 f999 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("6:  Enable VOC's");
 80842d8:	f008 fa06 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80842dc:	4973      	ldr	r1, [pc, #460]	; (80844ac <_Z23outputSerialMenuOptionsv+0x30c>)
 80842de:	f007 f994 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("7:  Disable VOC's");
 80842e2:	f008 fa01 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80842e6:	4972      	ldr	r1, [pc, #456]	; (80844b0 <_Z23outputSerialMenuOptionsv+0x310>)
 80842e8:	f007 f98f 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("8:  Output the PMIC system configuration");
 80842ec:	f008 f9fc 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80842f0:	4970      	ldr	r1, [pc, #448]	; (80844b4 <_Z23outputSerialMenuOptionsv+0x314>)
 80842f2:	f007 f98a 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("9:  Increase the charge current by 64 mA");
 80842f6:	f008 f9f7 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80842fa:	496f      	ldr	r1, [pc, #444]	; (80844b8 <_Z23outputSerialMenuOptionsv+0x318>)
 80842fc:	f007 f985 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("0:  Increase the current input limit by 100 mA");
 8084300:	f008 f9f2 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8084304:	496d      	ldr	r1, [pc, #436]	; (80844bc <_Z23outputSerialMenuOptionsv+0x31c>)
 8084306:	f007 f980 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("A:  Ouptput CO constantly and rapidly");
 808430a:	f008 f9ed 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808430e:	496c      	ldr	r1, [pc, #432]	; (80844c0 <_Z23outputSerialMenuOptionsv+0x320>)
 8084310:	f007 f97b 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("B:  Output PM constantly and rapidly");
 8084314:	f008 f9e8 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8084318:	496a      	ldr	r1, [pc, #424]	; (80844c4 <_Z23outputSerialMenuOptionsv+0x324>)
 808431a:	f007 f976 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("C:  Change temperature units to Celcius");
 808431e:	f008 f9e3 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8084322:	4969      	ldr	r1, [pc, #420]	; (80844c8 <_Z23outputSerialMenuOptionsv+0x328>)
 8084324:	f007 f971 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("D:  Disable TMP36 temperature sensor and use BME680 temperature");
 8084328:	f008 f9de 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808432c:	4967      	ldr	r1, [pc, #412]	; (80844cc <_Z23outputSerialMenuOptionsv+0x32c>)
 808432e:	f007 f96c 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("E:  Enable TMP36 temperature sensor and disable BME680 temperature");
 8084332:	f008 f9d9 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8084336:	4966      	ldr	r1, [pc, #408]	; (80844d0 <_Z23outputSerialMenuOptionsv+0x330>)
 8084338:	f007 f967 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("F:  Change temperature units to Farenheit");
 808433c:	f008 f9d4 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8084340:	4964      	ldr	r1, [pc, #400]	; (80844d4 <_Z23outputSerialMenuOptionsv+0x334>)
 8084342:	f007 f962 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("G:  Read ozone from analog input (not digitally - board dependent)");
 8084346:	f008 f9cf 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808434a:	4963      	ldr	r1, [pc, #396]	; (80844d8 <_Z23outputSerialMenuOptionsv+0x338>)
 808434c:	f007 f95d 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("H:  Read ozone digitally (not through analog input - board dependent)");
 8084350:	f008 f9ca 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8084354:	4961      	ldr	r1, [pc, #388]	; (80844dc <_Z23outputSerialMenuOptionsv+0x33c>)
 8084356:	f007 f958 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("I:  Adjust frequency for uploading through cellular");
 808435a:	f008 f9c5 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808435e:	4960      	ldr	r1, [pc, #384]	; (80844e0 <_Z23outputSerialMenuOptionsv+0x340>)
 8084360:	f007 f953 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("J:  Reset ESP, CO2, Plantower");
 8084364:	f008 f9c0 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8084368:	495e      	ldr	r1, [pc, #376]	; (80844e4 <_Z23outputSerialMenuOptionsv+0x344>)
 808436a:	f007 f94e 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("K:  Continuous serial output of GPS");
 808436e:	f008 f9bb 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8084372:	495d      	ldr	r1, [pc, #372]	; (80844e8 <_Z23outputSerialMenuOptionsv+0x348>)
 8084374:	f007 f949 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("L:  Write default settings");
 8084378:	f008 f9b6 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808437c:	495b      	ldr	r1, [pc, #364]	; (80844ec <_Z23outputSerialMenuOptionsv+0x34c>)
 808437e:	f007 f944 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("M:  Enable 20% battery threshold limiting");
 8084382:	f008 f9b1 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8084386:	495a      	ldr	r1, [pc, #360]	; (80844f0 <_Z23outputSerialMenuOptionsv+0x350>)
 8084388:	f007 f93f 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("N:  Disable 20% battery threshold limiting WARNING!!");
 808438c:	f008 f9ac 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8084390:	4958      	ldr	r1, [pc, #352]	; (80844f4 <_Z23outputSerialMenuOptionsv+0x354>)
 8084392:	f007 f93a 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("O:  Enable low power for GPS module");
 8084396:	f008 f9a7 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808439a:	4957      	ldr	r1, [pc, #348]	; (80844f8 <_Z23outputSerialMenuOptionsv+0x358>)
 808439c:	f007 f935 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("P:  Turn off BATFET");
 80843a0:	f008 f9a2 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80843a4:	4955      	ldr	r1, [pc, #340]	; (80844fc <_Z23outputSerialMenuOptionsv+0x35c>)
 80843a6:	f007 f930 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("Q:  Allow BATFET to turn on");
 80843aa:	f008 f99d 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80843ae:	4954      	ldr	r1, [pc, #336]	; (8084500 <_Z23outputSerialMenuOptionsv+0x360>)
 80843b0:	f007 f92b 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("R:  Disable ABC logic for CO2 sensor");
 80843b4:	f008 f998 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80843b8:	4952      	ldr	r1, [pc, #328]	; (8084504 <_Z23outputSerialMenuOptionsv+0x364>)
 80843ba:	f007 f926 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("S:  Enable ABC logic for CO2 sensor");
 80843be:	f008 f993 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80843c2:	4951      	ldr	r1, [pc, #324]	; (8084508 <_Z23outputSerialMenuOptionsv+0x368>)
 80843c4:	f007 f921 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("T:  Enable/disable HIH8120 RH sensor");
 80843c8:	f008 f98e 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80843cc:	494f      	ldr	r1, [pc, #316]	; (808450c <_Z23outputSerialMenuOptionsv+0x36c>)
 80843ce:	f007 f91c 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("U:  Switch socket where CO is read from");
 80843d2:	f008 f989 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80843d6:	494e      	ldr	r1, [pc, #312]	; (8084510 <_Z23outputSerialMenuOptionsv+0x370>)
 80843d8:	f007 f917 	bl	808b60a <_ZN5Print7printlnEPKc>
    
    Serial.println("W:  Enable/Disable google location services");
 80843dc:	f008 f984 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80843e0:	494c      	ldr	r1, [pc, #304]	; (8084514 <_Z23outputSerialMenuOptionsv+0x374>)
 80843e2:	f007 f912 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("V:  Calibrate CO2 sensor - must supply ambient level (go outside!)");
 80843e6:	f008 f97f 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80843ea:	494b      	ldr	r1, [pc, #300]	; (8084518 <_Z23outputSerialMenuOptionsv+0x378>)
 80843ec:	f007 f90d 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("Z:  Output cellular information (CCID, IMEI, etc)");
 80843f0:	f008 f97a 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80843f4:	4949      	ldr	r1, [pc, #292]	; (808451c <_Z23outputSerialMenuOptionsv+0x37c>)
 80843f6:	f007 f908 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("!:  Continuous serial output of VOC's");
 80843fa:	f008 f975 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80843fe:	4948      	ldr	r1, [pc, #288]	; (8084520 <_Z23outputSerialMenuOptionsv+0x380>)
 8084400:	f007 f903 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("@   Enable/Disable Sensible-iot data push.  If enabled, time zone will be ignored - UTC will be used.");
 8084404:	f008 f970 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8084408:	4946      	ldr	r1, [pc, #280]	; (8084524 <_Z23outputSerialMenuOptionsv+0x384>)
 808440a:	f007 f8fe 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("#   Enable/Disable cartopper power mode.  If enabled, absense of external power will stop cellular.");
 808440e:	f008 f96b 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8084412:	4945      	ldr	r1, [pc, #276]	; (8084528 <_Z23outputSerialMenuOptionsv+0x388>)
 8084414:	f007 f8f9 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("?:  Output this menu");
 8084418:	f008 f966 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808441c:	4943      	ldr	r1, [pc, #268]	; (808452c <_Z23outputSerialMenuOptionsv+0x38c>)
 808441e:	f007 f8f4 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial.println("x:  Exits this menu");
 8084422:	f008 f961 	bl	808c6e8 <_Z16_fetch_usbserialv>
  }
 8084426:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.println("Z:  Output cellular information (CCID, IMEI, etc)");
    Serial.println("!:  Continuous serial output of VOC's");
    Serial.println("@   Enable/Disable Sensible-iot data push.  If enabled, time zone will be ignored - UTC will be used.");
    Serial.println("#   Enable/Disable cartopper power mode.  If enabled, absense of external power will stop cellular.");
    Serial.println("?:  Output this menu");
    Serial.println("x:  Exits this menu");
 808442a:	4941      	ldr	r1, [pc, #260]	; (8084530 <_Z23outputSerialMenuOptionsv+0x390>)
 808442c:	f007 b8ed 	b.w	808b60a <_ZN5Print7printlnEPKc>
 8084430:	0809282e 	.word	0x0809282e
 8084434:	08092844 	.word	0x08092844
 8084438:	08092859 	.word	0x08092859
 808443c:	0809286d 	.word	0x0809286d
 8084440:	08092881 	.word	0x08092881
 8084444:	08092894 	.word	0x08092894
 8084448:	080928a9 	.word	0x080928a9
 808444c:	080928bd 	.word	0x080928bd
 8084450:	080928d4 	.word	0x080928d4
 8084454:	080928ea 	.word	0x080928ea
 8084458:	08092900 	.word	0x08092900
 808445c:	08092915 	.word	0x08092915
 8084460:	08092932 	.word	0x08092932
 8084464:	0809294e 	.word	0x0809294e
 8084468:	08092968 	.word	0x08092968
 808446c:	08092981 	.word	0x08092981
 8084470:	0809299b 	.word	0x0809299b
 8084474:	080929b4 	.word	0x080929b4
 8084478:	080929d0 	.word	0x080929d0
 808447c:	080929ed 	.word	0x080929ed
 8084480:	08092a06 	.word	0x08092a06
 8084484:	08092a22 	.word	0x08092a22
 8084488:	08092a3a 	.word	0x08092a3a
 808448c:	08092a53 	.word	0x08092a53
 8084490:	08092a6c 	.word	0x08092a6c
 8084494:	08092a80 	.word	0x08092a80
 8084498:	08092a95 	.word	0x08092a95
 808449c:	08092ab0 	.word	0x08092ab0
 80844a0:	08092acb 	.word	0x08092acb
 80844a4:	08092ae1 	.word	0x08092ae1
 80844a8:	08092af2 	.word	0x08092af2
 80844ac:	08092b04 	.word	0x08092b04
 80844b0:	08092b15 	.word	0x08092b15
 80844b4:	08092b27 	.word	0x08092b27
 80844b8:	08092b50 	.word	0x08092b50
 80844bc:	08092b79 	.word	0x08092b79
 80844c0:	08092ba8 	.word	0x08092ba8
 80844c4:	08092bce 	.word	0x08092bce
 80844c8:	08092bf3 	.word	0x08092bf3
 80844cc:	08092c1b 	.word	0x08092c1b
 80844d0:	08092c5b 	.word	0x08092c5b
 80844d4:	08092c9e 	.word	0x08092c9e
 80844d8:	08092cc8 	.word	0x08092cc8
 80844dc:	08092d0b 	.word	0x08092d0b
 80844e0:	08092d51 	.word	0x08092d51
 80844e4:	08092d85 	.word	0x08092d85
 80844e8:	08092da3 	.word	0x08092da3
 80844ec:	08092dc7 	.word	0x08092dc7
 80844f0:	08092de2 	.word	0x08092de2
 80844f4:	08092e0c 	.word	0x08092e0c
 80844f8:	08092e41 	.word	0x08092e41
 80844fc:	08092e65 	.word	0x08092e65
 8084500:	08092e79 	.word	0x08092e79
 8084504:	08092e95 	.word	0x08092e95
 8084508:	08092eba 	.word	0x08092eba
 808450c:	08092ede 	.word	0x08092ede
 8084510:	08092f03 	.word	0x08092f03
 8084514:	08092f2b 	.word	0x08092f2b
 8084518:	08092f57 	.word	0x08092f57
 808451c:	08092f9a 	.word	0x08092f9a
 8084520:	08092fcc 	.word	0x08092fcc
 8084524:	08092ff2 	.word	0x08092ff2
 8084528:	08093058 	.word	0x08093058
 808452c:	080930bc 	.word	0x080930bc
 8084530:	080930d1 	.word	0x080930d1

08084534 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8084534:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 8084536:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8084538:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 808453a:	b17c      	cbz	r4, 808455c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 808453c:	6863      	ldr	r3, [r4, #4]
 808453e:	3b01      	subs	r3, #1
 8084540:	6063      	str	r3, [r4, #4]
 8084542:	b95b      	cbnz	r3, 808455c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 8084544:	6823      	ldr	r3, [r4, #0]
 8084546:	4620      	mov	r0, r4
 8084548:	689b      	ldr	r3, [r3, #8]
 808454a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 808454c:	68a3      	ldr	r3, [r4, #8]
 808454e:	3b01      	subs	r3, #1
 8084550:	60a3      	str	r3, [r4, #8]
 8084552:	b91b      	cbnz	r3, 808455c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8084554:	6823      	ldr	r3, [r4, #0]
 8084556:	4620      	mov	r0, r4
 8084558:	68db      	ldr	r3, [r3, #12]
 808455a:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 808455c:	4628      	mov	r0, r5
 808455e:	bd38      	pop	{r3, r4, r5, pc}

08084560 <_Z13outputToCloud6StringS_>:
    snprintf(data, sizeof(data), "{\"lat\":%f, \"lng\":%f}", lat, lng);

    Particle.publish("testJson", data, PRIVATE);
}*/
//todo: average everything except ozone
void outputToCloud(String data, String sensible_data){
 8084560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084564:	b09d      	sub	sp, #116	; 0x74
 8084566:	4680      	mov	r8, r0
 8084568:	460e      	mov	r6, r1
    String webhook_data = " ";
 808456a:	a804      	add	r0, sp, #16
 808456c:	49af      	ldr	r1, [pc, #700]	; (808482c <_Z13outputToCloud6StringS_+0x2cc>)
 808456e:	f006 fe24 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
    CO_sum += CO_float;
 8084572:	4faf      	ldr	r7, [pc, #700]	; (8084830 <_Z13outputToCloud6StringS_+0x2d0>)
 8084574:	4baf      	ldr	r3, [pc, #700]	; (8084834 <_Z13outputToCloud6StringS_+0x2d4>)
 8084576:	6838      	ldr	r0, [r7, #0]
 8084578:	6819      	ldr	r1, [r3, #0]
 808457a:	f009 fb67 	bl	808dc4c <__addsf3>
    CO2_sum += CO2_float;
 808457e:	4dae      	ldr	r5, [pc, #696]	; (8084838 <_Z13outputToCloud6StringS_+0x2d8>)
 8084580:	4bae      	ldr	r3, [pc, #696]	; (808483c <_Z13outputToCloud6StringS_+0x2dc>)
    Particle.publish("testJson", data, PRIVATE);
}*/
//todo: average everything except ozone
void outputToCloud(String data, String sensible_data){
    String webhook_data = " ";
    CO_sum += CO_float;
 8084582:	6038      	str	r0, [r7, #0]
    CO2_sum += CO2_float;
 8084584:	6819      	ldr	r1, [r3, #0]
    Particle.publish("testJson", data, PRIVATE);
}*/
//todo: average everything except ozone
void outputToCloud(String data, String sensible_data){
    String webhook_data = " ";
    CO_sum += CO_float;
 8084586:	4604      	mov	r4, r0
    CO2_sum += CO2_float;
 8084588:	6828      	ldr	r0, [r5, #0]
 808458a:	f009 fb5f 	bl	808dc4c <__addsf3>
    O3_sum = O3_float;      //do not average ozone because it is averaged on the ozone monitor
 808458e:	4bac      	ldr	r3, [pc, #688]	; (8084840 <_Z13outputToCloud6StringS_+0x2e0>)
 8084590:	f8df 9320 	ldr.w	r9, [pc, #800]	; 80848b4 <_Z13outputToCloud6StringS_+0x354>
 8084594:	681b      	ldr	r3, [r3, #0]
    measurement_count++;
 8084596:	f8df a32c 	ldr.w	sl, [pc, #812]	; 80848c4 <_Z13outputToCloud6StringS_+0x364>
//todo: average everything except ozone
void outputToCloud(String data, String sensible_data){
    String webhook_data = " ";
    CO_sum += CO_float;
    CO2_sum += CO2_float;
    O3_sum = O3_float;      //do not average ozone because it is averaged on the ozone monitor
 808459a:	f8c9 3000 	str.w	r3, [r9]
    measurement_count++;

    if(measurement_count == measurements_to_average){
 808459e:	4ba9      	ldr	r3, [pc, #676]	; (8084844 <_Z13outputToCloud6StringS_+0x2e4>)
}*/
//todo: average everything except ozone
void outputToCloud(String data, String sensible_data){
    String webhook_data = " ";
    CO_sum += CO_float;
    CO2_sum += CO2_float;
 80845a0:	4683      	mov	fp, r0
 80845a2:	6028      	str	r0, [r5, #0]
    O3_sum = O3_float;      //do not average ozone because it is averaged on the ozone monitor
    measurement_count++;
 80845a4:	f8da 0000 	ldr.w	r0, [sl]

    if(measurement_count == measurements_to_average){
 80845a8:	681b      	ldr	r3, [r3, #0]
void outputToCloud(String data, String sensible_data){
    String webhook_data = " ";
    CO_sum += CO_float;
    CO2_sum += CO2_float;
    O3_sum = O3_float;      //do not average ozone because it is averaged on the ozone monitor
    measurement_count++;
 80845aa:	3001      	adds	r0, #1

    if(measurement_count == measurements_to_average){
 80845ac:	4298      	cmp	r0, r3
void outputToCloud(String data, String sensible_data){
    String webhook_data = " ";
    CO_sum += CO_float;
    CO2_sum += CO2_float;
    O3_sum = O3_float;      //do not average ozone because it is averaged on the ozone monitor
    measurement_count++;
 80845ae:	f8ca 0000 	str.w	r0, [sl]

    if(measurement_count == measurements_to_average){
 80845b2:	f040 8103 	bne.w	80847bc <_Z13outputToCloud6StringS_+0x25c>
        CO_sum /= measurements_to_average;
 80845b6:	f009 fbfd 	bl	808ddb4 <__aeabi_i2f>
 80845ba:	4601      	mov	r1, r0
 80845bc:	9003      	str	r0, [sp, #12]
 80845be:	4620      	mov	r0, r4
 80845c0:	f009 fd00 	bl	808dfc4 <__aeabi_fdiv>
        CO2_sum /= measurements_to_average;
 80845c4:	9b03      	ldr	r3, [sp, #12]
    CO2_sum += CO2_float;
    O3_sum = O3_float;      //do not average ozone because it is averaged on the ozone monitor
    measurement_count++;

    if(measurement_count == measurements_to_average){
        CO_sum /= measurements_to_average;
 80845c6:	6038      	str	r0, [r7, #0]
        CO2_sum /= measurements_to_average;
 80845c8:	4619      	mov	r1, r3
 80845ca:	4658      	mov	r0, fp
 80845cc:	f009 fcfa 	bl	808dfc4 <__aeabi_fdiv>
        //O3_sum /= measurements_to_average;

        measurement_count = 0;
 80845d0:	2300      	movs	r3, #0
 80845d2:	f8ca 3000 	str.w	r3, [sl]
        String webhook_data = String(DEVICE_id) + ",VOC: " + String(bme.gas_resistance / 1000.0, 1) + ", CO: " + CO_sum + ", CO2: " + CO2_sum + ", PM1: " + PM01Value + ",PM2.5: " + corrected_PM_25 + ", PM10: " + PM10Value + ",Temp: " + String(readTemperature(), 1) + ",Press: ";
 80845d6:	4b9c      	ldr	r3, [pc, #624]	; (8084848 <_Z13outputToCloud6StringS_+0x2e8>)
 80845d8:	220a      	movs	r2, #10
 80845da:	6819      	ldr	r1, [r3, #0]
    O3_sum = O3_float;      //do not average ozone because it is averaged on the ozone monitor
    measurement_count++;

    if(measurement_count == measurements_to_average){
        CO_sum /= measurements_to_average;
        CO2_sum /= measurements_to_average;
 80845dc:	6028      	str	r0, [r5, #0]
        //O3_sum /= measurements_to_average;

        measurement_count = 0;
        String webhook_data = String(DEVICE_id) + ",VOC: " + String(bme.gas_resistance / 1000.0, 1) + ", CO: " + CO_sum + ", CO2: " + CO2_sum + ", PM1: " + PM01Value + ",PM2.5: " + corrected_PM_25 + ", PM10: " + PM10Value + ",Temp: " + String(readTemperature(), 1) + ",Press: ";
 80845de:	a80c      	add	r0, sp, #48	; 0x30
 80845e0:	f006 fe5f 	bl	808b2a2 <_ZN6StringC1Eih>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80845e4:	a90c      	add	r1, sp, #48	; 0x30
 80845e6:	a810      	add	r0, sp, #64	; 0x40
 80845e8:	f006 fe26 	bl	808b238 <_ZN6StringC1ERKS_>
 80845ec:	4997      	ldr	r1, [pc, #604]	; (808484c <_Z13outputToCloud6StringS_+0x2ec>)
 80845ee:	a810      	add	r0, sp, #64	; 0x40
 80845f0:	f006 ff12 	bl	808b418 <_ZplRK15StringSumHelperPKc>
 80845f4:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 80848c8 <_Z13outputToCloud6StringS_+0x368>
 80845f8:	4683      	mov	fp, r0
 80845fa:	f8da 000c 	ldr.w	r0, [sl, #12]
 80845fe:	f008 ff83 	bl	808d508 <__aeabi_f2d>
 8084602:	2200      	movs	r2, #0
 8084604:	4b92      	ldr	r3, [pc, #584]	; (8084850 <_Z13outputToCloud6StringS_+0x2f0>)
 8084606:	f009 f8fd 	bl	808d804 <__aeabi_ddiv>
 808460a:	2401      	movs	r4, #1
 808460c:	4602      	mov	r2, r0
 808460e:	460b      	mov	r3, r1
 8084610:	9400      	str	r4, [sp, #0]
 8084612:	a814      	add	r0, sp, #80	; 0x50
 8084614:	f006 fe82 	bl	808b31c <_ZN6StringC1Edi>
 8084618:	a914      	add	r1, sp, #80	; 0x50
 808461a:	4658      	mov	r0, fp
 808461c:	f006 fef0 	bl	808b400 <_ZplRK15StringSumHelperRK6String>
 8084620:	498c      	ldr	r1, [pc, #560]	; (8084854 <_Z13outputToCloud6StringS_+0x2f4>)
 8084622:	f006 fef9 	bl	808b418 <_ZplRK15StringSumHelperPKc>
 8084626:	6839      	ldr	r1, [r7, #0]
 8084628:	f006 ff12 	bl	808b450 <_ZplRK15StringSumHelperf>
 808462c:	498a      	ldr	r1, [pc, #552]	; (8084858 <_Z13outputToCloud6StringS_+0x2f8>)
 808462e:	f006 fef3 	bl	808b418 <_ZplRK15StringSumHelperPKc>
 8084632:	6829      	ldr	r1, [r5, #0]
 8084634:	f006 ff0c 	bl	808b450 <_ZplRK15StringSumHelperf>
 8084638:	4988      	ldr	r1, [pc, #544]	; (808485c <_Z13outputToCloud6StringS_+0x2fc>)
 808463a:	f006 feed 	bl	808b418 <_ZplRK15StringSumHelperPKc>
 808463e:	4b88      	ldr	r3, [pc, #544]	; (8084860 <_Z13outputToCloud6StringS_+0x300>)
 8084640:	6819      	ldr	r1, [r3, #0]
 8084642:	f006 fefb 	bl	808b43c <_ZplRK15StringSumHelperi>
 8084646:	4987      	ldr	r1, [pc, #540]	; (8084864 <_Z13outputToCloud6StringS_+0x304>)
 8084648:	f006 fee6 	bl	808b418 <_ZplRK15StringSumHelperPKc>
 808464c:	4b86      	ldr	r3, [pc, #536]	; (8084868 <_Z13outputToCloud6StringS_+0x308>)
 808464e:	6819      	ldr	r1, [r3, #0]
 8084650:	f006 fefe 	bl	808b450 <_ZplRK15StringSumHelperf>
 8084654:	4985      	ldr	r1, [pc, #532]	; (808486c <_Z13outputToCloud6StringS_+0x30c>)
 8084656:	f006 fedf 	bl	808b418 <_ZplRK15StringSumHelperPKc>
 808465a:	4b85      	ldr	r3, [pc, #532]	; (8084870 <_Z13outputToCloud6StringS_+0x310>)
 808465c:	6819      	ldr	r1, [r3, #0]
 808465e:	f006 feed 	bl	808b43c <_ZplRK15StringSumHelperi>
 8084662:	4984      	ldr	r1, [pc, #528]	; (8084874 <_Z13outputToCloud6StringS_+0x314>)
 8084664:	f006 fed8 	bl	808b418 <_ZplRK15StringSumHelperPKc>
 8084668:	4605      	mov	r5, r0
 808466a:	f7fc ffbd 	bl	80815e8 <_Z15readTemperaturev>
 808466e:	4622      	mov	r2, r4
 8084670:	4601      	mov	r1, r0
 8084672:	a818      	add	r0, sp, #96	; 0x60
 8084674:	f006 fe3b 	bl	808b2ee <_ZN6StringC1Efi>
 8084678:	a918      	add	r1, sp, #96	; 0x60
 808467a:	4628      	mov	r0, r5
 808467c:	f006 fec0 	bl	808b400 <_ZplRK15StringSumHelperRK6String>
 8084680:	497d      	ldr	r1, [pc, #500]	; (8084878 <_Z13outputToCloud6StringS_+0x318>)
 8084682:	f006 fec9 	bl	808b418 <_ZplRK15StringSumHelperPKc>
 8084686:	4601      	mov	r1, r0
 8084688:	a808      	add	r0, sp, #32
 808468a:	f006 fdd5 	bl	808b238 <_ZN6StringC1ERKS_>
 808468e:	a818      	add	r0, sp, #96	; 0x60
 8084690:	f006 fd4c 	bl	808b12c <_ZN6StringD1Ev>
 8084694:	a814      	add	r0, sp, #80	; 0x50
 8084696:	f006 fd49 	bl	808b12c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808469a:	a810      	add	r0, sp, #64	; 0x40
 808469c:	f006 fd46 	bl	808b12c <_ZN6StringD1Ev>
 80846a0:	a80c      	add	r0, sp, #48	; 0x30
 80846a2:	f006 fd43 	bl	808b12c <_ZN6StringD1Ev>
        webhook_data += String(bme.pressure / 100.0, 1) + ",HUM: " + String(bme.humidity, 1) + ",Snd: " + String(sound_average) + ",O3: " + O3_sum + "\n\r";
 80846a6:	f8da 0004 	ldr.w	r0, [sl, #4]
 80846aa:	f008 ff2d 	bl	808d508 <__aeabi_f2d>
 80846ae:	2200      	movs	r2, #0
 80846b0:	4b72      	ldr	r3, [pc, #456]	; (808487c <_Z13outputToCloud6StringS_+0x31c>)
 80846b2:	f009 f8a7 	bl	808d804 <__aeabi_ddiv>
 80846b6:	9400      	str	r4, [sp, #0]
 80846b8:	460b      	mov	r3, r1
 80846ba:	4602      	mov	r2, r0
 80846bc:	a80c      	add	r0, sp, #48	; 0x30
 80846be:	f006 fe2d 	bl	808b31c <_ZN6StringC1Edi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80846c2:	a90c      	add	r1, sp, #48	; 0x30
 80846c4:	a810      	add	r0, sp, #64	; 0x40
 80846c6:	f006 fdb7 	bl	808b238 <_ZN6StringC1ERKS_>
 80846ca:	496d      	ldr	r1, [pc, #436]	; (8084880 <_Z13outputToCloud6StringS_+0x320>)
 80846cc:	a810      	add	r0, sp, #64	; 0x40
 80846ce:	f006 fea3 	bl	808b418 <_ZplRK15StringSumHelperPKc>
 80846d2:	4605      	mov	r5, r0
 80846d4:	4622      	mov	r2, r4
 80846d6:	f8da 1008 	ldr.w	r1, [sl, #8]
 80846da:	a814      	add	r0, sp, #80	; 0x50
 80846dc:	f006 fe07 	bl	808b2ee <_ZN6StringC1Efi>
 80846e0:	a914      	add	r1, sp, #80	; 0x50
 80846e2:	4628      	mov	r0, r5
 80846e4:	f006 fe8c 	bl	808b400 <_ZplRK15StringSumHelperRK6String>
 80846e8:	4966      	ldr	r1, [pc, #408]	; (8084884 <_Z13outputToCloud6StringS_+0x324>)
 80846ea:	f006 fe95 	bl	808b418 <_ZplRK15StringSumHelperPKc>
 80846ee:	4604      	mov	r4, r0
 80846f0:	2306      	movs	r3, #6
 80846f2:	9300      	str	r3, [sp, #0]
 80846f4:	4b64      	ldr	r3, [pc, #400]	; (8084888 <_Z13outputToCloud6StringS_+0x328>)
 80846f6:	a818      	add	r0, sp, #96	; 0x60
 80846f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80846fc:	f006 fe0e 	bl	808b31c <_ZN6StringC1Edi>
 8084700:	a918      	add	r1, sp, #96	; 0x60
 8084702:	4620      	mov	r0, r4
 8084704:	f006 fe7c 	bl	808b400 <_ZplRK15StringSumHelperRK6String>
 8084708:	4960      	ldr	r1, [pc, #384]	; (808488c <_Z13outputToCloud6StringS_+0x32c>)
 808470a:	f006 fe85 	bl	808b418 <_ZplRK15StringSumHelperPKc>
 808470e:	f8d9 1000 	ldr.w	r1, [r9]
 8084712:	f006 fe9d 	bl	808b450 <_ZplRK15StringSumHelperf>
 8084716:	495e      	ldr	r1, [pc, #376]	; (8084890 <_Z13outputToCloud6StringS_+0x330>)
 8084718:	f006 fe7e 	bl	808b418 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808471c:	4601      	mov	r1, r0
 808471e:	a808      	add	r0, sp, #32
 8084720:	f006 fe29 	bl	808b376 <_ZN6String6concatERKS_>
 8084724:	a818      	add	r0, sp, #96	; 0x60
 8084726:	f006 fd01 	bl	808b12c <_ZN6StringD1Ev>
 808472a:	a814      	add	r0, sp, #80	; 0x50
 808472c:	f006 fcfe 	bl	808b12c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084730:	a810      	add	r0, sp, #64	; 0x40
 8084732:	f006 fcfb 	bl	808b12c <_ZN6StringD1Ev>
 8084736:	a80c      	add	r0, sp, #48	; 0x30
 8084738:	f006 fcf8 	bl	808b12c <_ZN6StringD1Ev>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808473c:	f006 f92a 	bl	808a994 <spark_cloud_flag_connected>
 8084740:	4c54      	ldr	r4, [pc, #336]	; (8084894 <_Z13outputToCloud6StringS_+0x334>)
 8084742:	4b55      	ldr	r3, [pc, #340]	; (8084898 <_Z13outputToCloud6StringS_+0x338>)

        if(Particle.connected() && serial_cellular_enabled){
 8084744:	2800      	cmp	r0, #0
 8084746:	d05a      	beq.n	80847fe <_Z13outputToCloud6StringS_+0x29e>
 8084748:	681a      	ldr	r2, [r3, #0]
 808474a:	2a00      	cmp	r2, #0
 808474c:	d057      	beq.n	80847fe <_Z13outputToCloud6StringS_+0x29e>
            status_word.status_int |= 0x0002;
 808474e:	4a53      	ldr	r2, [pc, #332]	; (808489c <_Z13outputToCloud6StringS_+0x33c>)
 8084750:	4d53      	ldr	r5, [pc, #332]	; (80848a0 <_Z13outputToCloud6StringS_+0x340>)
 8084752:	8813      	ldrh	r3, [r2, #0]
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8084754:	4953      	ldr	r1, [pc, #332]	; (80848a4 <_Z13outputToCloud6StringS_+0x344>)
 8084756:	f043 0302 	orr.w	r3, r3, #2
 808475a:	8013      	strh	r3, [r2, #0]
 808475c:	782b      	ldrb	r3, [r5, #0]
 808475e:	f8d8 2000 	ldr.w	r2, [r8]
 8084762:	f88d 3000 	strb.w	r3, [sp]
 8084766:	a818      	add	r0, sp, #96	; 0x60
 8084768:	233c      	movs	r3, #60	; 0x3c
 808476a:	f007 fd97 	bl	808c29c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808476e:	a819      	add	r0, sp, #100	; 0x64
 8084770:	f7ff fee0 	bl	8084534 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8084774:	f005 fef8 	bl	808a568 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8084778:	4f4b      	ldr	r7, [pc, #300]	; (80848a8 <_Z13outputToCloud6StringS_+0x348>)
 808477a:	6038      	str	r0, [r7, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 808477c:	f006 f8fa 	bl	808a974 <spark_process>
            Particle.publish("pamup", data, PRIVATE);
            Particle.process(); //attempt at ensuring the publish is complete before sleeping
            if(debugging_enabled){
 8084780:	6823      	ldr	r3, [r4, #0]
 8084782:	b173      	cbz	r3, 80847a2 <_Z13outputToCloud6StringS_+0x242>
              Serial.println("Published pamup data!");
 8084784:	f007 ffb0 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8084788:	4948      	ldr	r1, [pc, #288]	; (80848ac <_Z13outputToCloud6StringS_+0x34c>)
 808478a:	f006 ff3e 	bl	808b60a <_ZN5Print7printlnEPKc>
              writeLogFile("Published pamup data!");
 808478e:	4947      	ldr	r1, [pc, #284]	; (80848ac <_Z13outputToCloud6StringS_+0x34c>)
 8084790:	a818      	add	r0, sp, #96	; 0x60
 8084792:	f006 fd12 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
 8084796:	a818      	add	r0, sp, #96	; 0x60
 8084798:	f7fd fab6 	bl	8081d08 <_Z12writeLogFile6String>
 808479c:	a818      	add	r0, sp, #96	; 0x60
 808479e:	f006 fcc5 	bl	808b12c <_ZN6StringD1Ev>
            }
            if(sensible_iot_en){
 80847a2:	4b43      	ldr	r3, [pc, #268]	; (80848b0 <_Z13outputToCloud6StringS_+0x350>)
 80847a4:	681b      	ldr	r3, [r3, #0]
 80847a6:	b97b      	cbnz	r3, 80847c8 <_Z13outputToCloud6StringS_+0x268>
                    Serial.println("Couldn't connect to particle.");
                    writeLogFile("Couldn't connect to particle.");
                  }
            }
        }
        CO_sum = 0;
 80847a8:	4a21      	ldr	r2, [pc, #132]	; (8084830 <_Z13outputToCloud6StringS_+0x2d0>)
 80847aa:	2300      	movs	r3, #0
 80847ac:	6013      	str	r3, [r2, #0]
        CO2_sum = 0;
 80847ae:	4a22      	ldr	r2, [pc, #136]	; (8084838 <_Z13outputToCloud6StringS_+0x2d8>)
        CO_sum /= measurements_to_average;
        CO2_sum /= measurements_to_average;
        //O3_sum /= measurements_to_average;

        measurement_count = 0;
        String webhook_data = String(DEVICE_id) + ",VOC: " + String(bme.gas_resistance / 1000.0, 1) + ", CO: " + CO_sum + ", CO2: " + CO2_sum + ", PM1: " + PM01Value + ",PM2.5: " + corrected_PM_25 + ", PM10: " + PM10Value + ",Temp: " + String(readTemperature(), 1) + ",Press: ";
 80847b0:	a808      	add	r0, sp, #32
                    writeLogFile("Couldn't connect to particle.");
                  }
            }
        }
        CO_sum = 0;
        CO2_sum = 0;
 80847b2:	6013      	str	r3, [r2, #0]
        O3_sum = 0;
 80847b4:	4a3f      	ldr	r2, [pc, #252]	; (80848b4 <_Z13outputToCloud6StringS_+0x354>)
 80847b6:	6013      	str	r3, [r2, #0]
        CO_sum /= measurements_to_average;
        CO2_sum /= measurements_to_average;
        //O3_sum /= measurements_to_average;

        measurement_count = 0;
        String webhook_data = String(DEVICE_id) + ",VOC: " + String(bme.gas_resistance / 1000.0, 1) + ", CO: " + CO_sum + ", CO2: " + CO2_sum + ", PM1: " + PM01Value + ",PM2.5: " + corrected_PM_25 + ", PM10: " + PM10Value + ",Temp: " + String(readTemperature(), 1) + ",Press: ";
 80847b8:	f006 fcb8 	bl	808b12c <_ZN6StringD1Ev>

    Particle.publish("testJson", data, PRIVATE);
}*/
//todo: average everything except ozone
void outputToCloud(String data, String sensible_data){
    String webhook_data = " ";
 80847bc:	a804      	add	r0, sp, #16
 80847be:	f006 fcb5 	bl	808b12c <_ZN6StringD1Ev>
        }
        CO_sum = 0;
        CO2_sum = 0;
        O3_sum = 0;
    }
}
 80847c2:	b01d      	add	sp, #116	; 0x74
 80847c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80847c8:	782b      	ldrb	r3, [r5, #0]
 80847ca:	6832      	ldr	r2, [r6, #0]
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80847cc:	493a      	ldr	r1, [pc, #232]	; (80848b8 <_Z13outputToCloud6StringS_+0x358>)
 80847ce:	f88d 3000 	strb.w	r3, [sp]
 80847d2:	a818      	add	r0, sp, #96	; 0x60
 80847d4:	233c      	movs	r3, #60	; 0x3c
 80847d6:	f007 fd61 	bl	808c29c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80847da:	a819      	add	r0, sp, #100	; 0x64
 80847dc:	f7ff feaa 	bl	8084534 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80847e0:	f005 fec2 	bl	808a568 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80847e4:	6038      	str	r0, [r7, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80847e6:	f006 f8c5 	bl	808a974 <spark_process>
            }
            if(sensible_iot_en){
                Particle.publish("sensiblePamUp", sensible_data, PRIVATE);
                //testsensible();
                Particle.process();
                if(debugging_enabled){
 80847ea:	6823      	ldr	r3, [r4, #0]
 80847ec:	2b00      	cmp	r3, #0
 80847ee:	d0db      	beq.n	80847a8 <_Z13outputToCloud6StringS_+0x248>
                    Serial.println("Published sensible data!");
 80847f0:	f007 ff7a 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80847f4:	4931      	ldr	r1, [pc, #196]	; (80848bc <_Z13outputToCloud6StringS_+0x35c>)
 80847f6:	f006 ff08 	bl	808b60a <_ZN5Print7printlnEPKc>
                    writeLogFile("Published sensible data!");
 80847fa:	4930      	ldr	r1, [pc, #192]	; (80848bc <_Z13outputToCloud6StringS_+0x35c>)
 80847fc:	e00b      	b.n	8084816 <_Z13outputToCloud6StringS_+0x2b6>
                }
            }
        }else{
            if(serial_cellular_enabled == 0){
 80847fe:	681b      	ldr	r3, [r3, #0]
 8084800:	2b00      	cmp	r3, #0
 8084802:	d163      	bne.n	80848cc <_Z13outputToCloud6StringS_+0x36c>
                if(debugging_enabled){
 8084804:	6823      	ldr	r3, [r4, #0]
 8084806:	2b00      	cmp	r3, #0
 8084808:	d0ce      	beq.n	80847a8 <_Z13outputToCloud6StringS_+0x248>
                    Serial.println("Cellular is disabled.");
 808480a:	f007 ff6d 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808480e:	492c      	ldr	r1, [pc, #176]	; (80848c0 <_Z13outputToCloud6StringS_+0x360>)
 8084810:	f006 fefb 	bl	808b60a <_ZN5Print7printlnEPKc>
                    writeLogFile("Cellular is disabled.");
 8084814:	492a      	ldr	r1, [pc, #168]	; (80848c0 <_Z13outputToCloud6StringS_+0x360>)
                  }
            }else{
                status_word.status_int &= 0xFFFD;   //clear the connected bit
                if(debugging_enabled){
                    Serial.println("Couldn't connect to particle.");
                    writeLogFile("Couldn't connect to particle.");
 8084816:	a818      	add	r0, sp, #96	; 0x60
 8084818:	f006 fccf 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
 808481c:	a818      	add	r0, sp, #96	; 0x60
 808481e:	f7fd fa73 	bl	8081d08 <_Z12writeLogFile6String>
 8084822:	a818      	add	r0, sp, #96	; 0x60
 8084824:	f006 fc82 	bl	808b12c <_ZN6StringD1Ev>
 8084828:	e7be      	b.n	80847a8 <_Z13outputToCloud6StringS_+0x248>
 808482a:	bf00      	nop
 808482c:	0809197e 	.word	0x0809197e
 8084830:	20000f7c 	.word	0x20000f7c
 8084834:	20000f14 	.word	0x20000f14
 8084838:	20000b90 	.word	0x20000b90
 808483c:	20000630 	.word	0x20000630
 8084840:	20000f90 	.word	0x20000f90
 8084844:	20000efc 	.word	0x20000efc
 8084848:	20000488 	.word	0x20000488
 808484c:	080930e5 	.word	0x080930e5
 8084850:	408f4000 	.word	0x408f4000
 8084854:	080930ec 	.word	0x080930ec
 8084858:	080930f3 	.word	0x080930f3
 808485c:	080930fb 	.word	0x080930fb
 8084860:	20000cd4 	.word	0x20000cd4
 8084864:	08093103 	.word	0x08093103
 8084868:	20000db0 	.word	0x20000db0
 808486c:	0809310c 	.word	0x0809310c
 8084870:	20000f2c 	.word	0x20000f2c
 8084874:	08093115 	.word	0x08093115
 8084878:	0809311d 	.word	0x0809311d
 808487c:	40590000 	.word	0x40590000
 8084880:	08093126 	.word	0x08093126
 8084884:	0809312d 	.word	0x0809312d
 8084888:	20000f20 	.word	0x20000f20
 808488c:	08093134 	.word	0x08093134
 8084890:	08093552 	.word	0x08093552
 8084894:	20000f08 	.word	0x20000f08
 8084898:	2000062c 	.word	0x2000062c
 808489c:	20000f84 	.word	0x20000f84
 80848a0:	20000afc 	.word	0x20000afc
 80848a4:	080931ab 	.word	0x080931ab
 80848a8:	20001638 	.word	0x20001638
 80848ac:	0809313a 	.word	0x0809313a
 80848b0:	20000cdc 	.word	0x20000cdc
 80848b4:	200005dc 	.word	0x200005dc
 80848b8:	08093150 	.word	0x08093150
 80848bc:	0809315e 	.word	0x0809315e
 80848c0:	08093177 	.word	0x08093177
 80848c4:	20000628 	.word	0x20000628
 80848c8:	20000b04 	.word	0x20000b04
                    Serial.println("Cellular is disabled.");
                    writeLogFile("Cellular is disabled.");

                  }
            }else{
                status_word.status_int &= 0xFFFD;   //clear the connected bit
 80848cc:	4a07      	ldr	r2, [pc, #28]	; (80848ec <_Z13outputToCloud6StringS_+0x38c>)
 80848ce:	8813      	ldrh	r3, [r2, #0]
 80848d0:	f023 0302 	bic.w	r3, r3, #2
 80848d4:	8013      	strh	r3, [r2, #0]
                if(debugging_enabled){
 80848d6:	6823      	ldr	r3, [r4, #0]
 80848d8:	2b00      	cmp	r3, #0
 80848da:	f43f af65 	beq.w	80847a8 <_Z13outputToCloud6StringS_+0x248>
                    Serial.println("Couldn't connect to particle.");
 80848de:	f007 ff03 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80848e2:	4903      	ldr	r1, [pc, #12]	; (80848f0 <_Z13outputToCloud6StringS_+0x390>)
 80848e4:	f006 fe91 	bl	808b60a <_ZN5Print7printlnEPKc>
                    writeLogFile("Couldn't connect to particle.");
 80848e8:	4901      	ldr	r1, [pc, #4]	; (80848f0 <_Z13outputToCloud6StringS_+0x390>)
 80848ea:	e794      	b.n	8084816 <_Z13outputToCloud6StringS_+0x2b6>
 80848ec:	20000f84 	.word	0x20000f84
 80848f0:	0809318d 	.word	0x0809318d

080848f4 <_Z15outputDataToESPv>:
  }else{
    Serial.println("Unable to write to log file");
  }
}

void outputDataToESP(void){
 80848f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80848f8:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
        unsigned char bytes[2];
    }wordBytes;


    //get a current time string
    time_t time = Time.now();
 80848fc:	f007 f9e1 	bl	808bcc2 <_ZN9TimeClass3nowEv>
    Time.setFormat(TIME_FORMAT_ISO8601_FULL);
 8084900:	4ba9      	ldr	r3, [pc, #676]	; (8084ba8 <_Z15outputDataToESPv+0x2b4>)
        unsigned char bytes[2];
    }wordBytes;


    //get a current time string
    time_t time = Time.now();
 8084902:	4607      	mov	r7, r0
            return format(now(), format_spec);
        }

        void setFormat(const char* format)
        {
            this->format_spec = format;
 8084904:	681a      	ldr	r2, [r3, #0]
 8084906:	4ba9      	ldr	r3, [pc, #676]	; (8084bac <_Z15outputDataToESPv+0x2b8>)
    }*/

    //************Fill the cloud output array and file output array for row in csv file on usd card*****************************/
    //This is different than the ble packet in that we are putting all of the data that we have in one packet
    //"$1:D555g47.7M-22.050533C550.866638r1R1q2T45.8P844.9h17.2s1842.700000&"
    String cloud_output_string = "";    //create a clean string
 8084908:	49a9      	ldr	r1, [pc, #676]	; (8084bb0 <_Z15outputDataToESPv+0x2bc>)
 808490a:	a802      	add	r0, sp, #8
 808490c:	601a      	str	r2, [r3, #0]
 808490e:	f006 fc54 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
    String csv_output_string = "";
 8084912:	49a7      	ldr	r1, [pc, #668]	; (8084bb0 <_Z15outputDataToESPv+0x2bc>)
 8084914:	a806      	add	r0, sp, #24
 8084916:	f006 fc50 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
    String sensible_string = "";
 808491a:	49a5      	ldr	r1, [pc, #660]	; (8084bb0 <_Z15outputDataToESPv+0x2bc>)
 808491c:	a80a      	add	r0, sp, #40	; 0x28
 808491e:	f006 fc4c 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
    String latitude_string = "";
 8084922:	49a3      	ldr	r1, [pc, #652]	; (8084bb0 <_Z15outputDataToESPv+0x2bc>)
 8084924:	a80e      	add	r0, sp, #56	; 0x38
 8084926:	f006 fc48 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
    String longitude_string = "";
 808492a:	49a1      	ldr	r1, [pc, #644]	; (8084bb0 <_Z15outputDataToESPv+0x2bc>)
 808492c:	a812      	add	r0, sp, #72	; 0x48
 808492e:	f006 fc44 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
 8084932:	215e      	movs	r1, #94	; 0x5e
 8084934:	a802      	add	r0, sp, #8
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084936:	ac64      	add	r4, sp, #400	; 0x190

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
 8084938:	f006 fd30 	bl	808b39c <_ZN6String6concatEc>

    char sensible_buf[256];
    cloud_output_string += '^';         //start delimeter
    cloud_output_string += String(1) + ";";           //header
 808493c:	220a      	movs	r2, #10
 808493e:	2101      	movs	r1, #1
 8084940:	a827      	add	r0, sp, #156	; 0x9c
 8084942:	f006 fcae 	bl	808b2a2 <_ZN6StringC1Eih>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084946:	a927      	add	r1, sp, #156	; 0x9c
 8084948:	4620      	mov	r0, r4
 808494a:	f006 fc75 	bl	808b238 <_ZN6StringC1ERKS_>
 808494e:	4999      	ldr	r1, [pc, #612]	; (8084bb4 <_Z15outputDataToESPv+0x2c0>)
 8084950:	4620      	mov	r0, r4
 8084952:	f006 fd61 	bl	808b418 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084956:	4601      	mov	r1, r0
 8084958:	a802      	add	r0, sp, #8
 808495a:	f006 fd0c 	bl	808b376 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808495e:	4620      	mov	r0, r4
 8084960:	f006 fbe4 	bl	808b12c <_ZN6StringD1Ev>
 8084964:	a827      	add	r0, sp, #156	; 0x9c
 8084966:	f006 fbe1 	bl	808b12c <_ZN6StringD1Ev>
    cloud_output_string += String(DEVICE_ID_PACKET_CONSTANT) + String(DEVICE_id);   //device id
 808496a:	4e93      	ldr	r6, [pc, #588]	; (8084bb8 <_Z15outputDataToESPv+0x2c4>)
 808496c:	215a      	movs	r1, #90	; 0x5a
 808496e:	a822      	add	r0, sp, #136	; 0x88
 8084970:	f006 fc86 	bl	808b280 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084974:	a922      	add	r1, sp, #136	; 0x88
 8084976:	4620      	mov	r0, r4
 8084978:	f006 fc5e 	bl	808b238 <_ZN6StringC1ERKS_>
 808497c:	220a      	movs	r2, #10
 808497e:	6831      	ldr	r1, [r6, #0]
 8084980:	a827      	add	r0, sp, #156	; 0x9c
 8084982:	f006 fc8e 	bl	808b2a2 <_ZN6StringC1Eih>
 8084986:	a927      	add	r1, sp, #156	; 0x9c
 8084988:	4620      	mov	r0, r4
 808498a:	f006 fd39 	bl	808b400 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808498e:	4601      	mov	r1, r0
 8084990:	a802      	add	r0, sp, #8
 8084992:	f006 fcf0 	bl	808b376 <_ZN6String6concatERKS_>
 8084996:	a827      	add	r0, sp, #156	; 0x9c
 8084998:	f006 fbc8 	bl	808b12c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808499c:	4620      	mov	r0, r4
 808499e:	f006 fbc5 	bl	808b12c <_ZN6StringD1Ev>
 80849a2:	a822      	add	r0, sp, #136	; 0x88
 80849a4:	f006 fbc2 	bl	808b12c <_ZN6StringD1Ev>
    csv_output_string += String(DEVICE_id) + ",";
 80849a8:	220a      	movs	r2, #10
 80849aa:	6831      	ldr	r1, [r6, #0]
 80849ac:	a827      	add	r0, sp, #156	; 0x9c
 80849ae:	f006 fc78 	bl	808b2a2 <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80849b2:	a927      	add	r1, sp, #156	; 0x9c
 80849b4:	4620      	mov	r0, r4
 80849b6:	f006 fc3f 	bl	808b238 <_ZN6StringC1ERKS_>
 80849ba:	4980      	ldr	r1, [pc, #512]	; (8084bbc <_Z15outputDataToESPv+0x2c8>)
 80849bc:	4620      	mov	r0, r4
 80849be:	f006 fd2b 	bl	808b418 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80849c2:	4601      	mov	r1, r0
 80849c4:	a806      	add	r0, sp, #24
 80849c6:	f006 fcd6 	bl	808b376 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80849ca:	4620      	mov	r0, r4
 80849cc:	f006 fbae 	bl	808b12c <_ZN6StringD1Ev>
 80849d0:	a827      	add	r0, sp, #156	; 0x9c
 80849d2:	f006 fbab 	bl	808b12c <_ZN6StringD1Ev>

// spark::JSONBufferWriter
inline spark::JSONBufferWriter::JSONBufferWriter(char *buf, size_t size) :
        buf_(buf),
        bufSize_(size),
        n_(0) {
 80849d6:	4b7a      	ldr	r3, [pc, #488]	; (8084bc0 <_Z15outputDataToESPv+0x2cc>)
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
 80849d8:	2500      	movs	r5, #0

// spark::JSONBufferWriter
inline spark::JSONBufferWriter::JSONBufferWriter(char *buf, size_t size) :
        buf_(buf),
        bufSize_(size),
        n_(0) {
 80849da:	9322      	str	r3, [sp, #136]	; 0x88




    JSONBufferWriter writer(sensible_buf, sizeof(sensible_buf) - 1);
    writer.beginObject();
 80849dc:	a822      	add	r0, sp, #136	; 0x88
 80849de:	23ff      	movs	r3, #255	; 0xff
 80849e0:	9325      	str	r3, [sp, #148]	; 0x94
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
 80849e2:	f88d 508c 	strb.w	r5, [sp, #140]	; 0x8c

// spark::JSONBufferWriter
inline spark::JSONBufferWriter::JSONBufferWriter(char *buf, size_t size) :
        buf_(buf),
        bufSize_(size),
        n_(0) {
 80849e6:	9424      	str	r4, [sp, #144]	; 0x90
 80849e8:	9526      	str	r5, [sp, #152]	; 0x98
 80849ea:	f008 f947 	bl	808cc7c <_ZN5spark10JSONWriter11beginObjectEv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80849ee:	4975      	ldr	r1, [pc, #468]	; (8084bc4 <_Z15outputDataToESPv+0x2d0>)
 80849f0:	a827      	add	r0, sp, #156	; 0x9c
 80849f2:	f006 fbe2 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
    String device_string = "PAM-" + String(DEVICE_id);
 80849f6:	220a      	movs	r2, #10
 80849f8:	6831      	ldr	r1, [r6, #0]
 80849fa:	a81e      	add	r0, sp, #120	; 0x78
 80849fc:	f006 fc51 	bl	808b2a2 <_ZN6StringC1Eih>
 8084a00:	a91e      	add	r1, sp, #120	; 0x78
 8084a02:	a827      	add	r0, sp, #156	; 0x9c
 8084a04:	f006 fcfc 	bl	808b400 <_ZplRK15StringSumHelperRK6String>
 8084a08:	4601      	mov	r1, r0
 8084a0a:	a816      	add	r0, sp, #88	; 0x58
 8084a0c:	f006 fc14 	bl	808b238 <_ZN6StringC1ERKS_>
 8084a10:	a81e      	add	r0, sp, #120	; 0x78
 8084a12:	f006 fb8b 	bl	808b12c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084a16:	a827      	add	r0, sp, #156	; 0x9c
 8084a18:	f006 fb88 	bl	808b12c <_ZN6StringD1Ev>
    //String device_time = String(Time.format(time, "%Y/%m/%dT%H:%M:%SZ"));
    //String co2_string = String(CO2_float, 0);
    //String co_string = String(CO_float, 3);
    writer.name("instrumentKey").value(device_string);
 8084a1c:	496a      	ldr	r1, [pc, #424]	; (8084bc8 <_Z15outputDataToESPv+0x2d4>)
 8084a1e:	a822      	add	r0, sp, #136	; 0x88
 8084a20:	f7fc f9af 	bl	8080d82 <_ZN5spark10JSONWriter4nameEPKc>
 8084a24:	a916      	add	r1, sp, #88	; 0x58
 8084a26:	f7fc f9b9 	bl	8080d9c <_ZN5spark10JSONWriter5valueERK6String>
    writer.name("datetime").value(String(Time.format(time, "%Y-%m-%dT%H:%M:%SZ")));
 8084a2a:	4968      	ldr	r1, [pc, #416]	; (8084bcc <_Z15outputDataToESPv+0x2d8>)
 8084a2c:	a822      	add	r0, sp, #136	; 0x88
 8084a2e:	f7fc f9a8 	bl	8080d82 <_ZN5spark10JSONWriter4nameEPKc>
 8084a32:	4604      	mov	r4, r0
 8084a34:	4b66      	ldr	r3, [pc, #408]	; (8084bd0 <_Z15outputDataToESPv+0x2dc>)
 8084a36:	463a      	mov	r2, r7
 8084a38:	4966      	ldr	r1, [pc, #408]	; (8084bd4 <_Z15outputDataToESPv+0x2e0>)
 8084a3a:	a827      	add	r0, sp, #156	; 0x9c
 8084a3c:	f007 f8ee 	bl	808bc1c <_ZN9TimeClass6formatElPKc>
 8084a40:	a927      	add	r1, sp, #156	; 0x9c
 8084a42:	4620      	mov	r0, r4
 8084a44:	f7fc f9aa 	bl	8080d9c <_ZN5spark10JSONWriter5valueERK6String>
 8084a48:	a827      	add	r0, sp, #156	; 0x9c
 8084a4a:	f006 fb6f 	bl	808b12c <_ZN6StringD1Ev>
    writer.name("CO2").value(String(CO2_float, 0));
 8084a4e:	4962      	ldr	r1, [pc, #392]	; (8084bd8 <_Z15outputDataToESPv+0x2e4>)
 8084a50:	a822      	add	r0, sp, #136	; 0x88
 8084a52:	f7fc f996 	bl	8080d82 <_ZN5spark10JSONWriter4nameEPKc>
 8084a56:	4604      	mov	r4, r0
 8084a58:	4b60      	ldr	r3, [pc, #384]	; (8084bdc <_Z15outputDataToESPv+0x2e8>)
 8084a5a:	462a      	mov	r2, r5
 8084a5c:	6819      	ldr	r1, [r3, #0]
 8084a5e:	a827      	add	r0, sp, #156	; 0x9c
 8084a60:	f006 fc45 	bl	808b2ee <_ZN6StringC1Efi>
 8084a64:	a927      	add	r1, sp, #156	; 0x9c
 8084a66:	4620      	mov	r0, r4
 8084a68:	f7fc f998 	bl	8080d9c <_ZN5spark10JSONWriter5valueERK6String>
 8084a6c:	a827      	add	r0, sp, #156	; 0x9c
 8084a6e:	f006 fb5d 	bl	808b12c <_ZN6StringD1Ev>
    writer.name("CO").value(String(CO_float, 3));
 8084a72:	495b      	ldr	r1, [pc, #364]	; (8084be0 <_Z15outputDataToESPv+0x2ec>)
 8084a74:	a822      	add	r0, sp, #136	; 0x88
 8084a76:	f7fc f984 	bl	8080d82 <_ZN5spark10JSONWriter4nameEPKc>
 8084a7a:	4604      	mov	r4, r0
 8084a7c:	4b59      	ldr	r3, [pc, #356]	; (8084be4 <_Z15outputDataToESPv+0x2f0>)
 8084a7e:	2203      	movs	r2, #3
 8084a80:	6819      	ldr	r1, [r3, #0]
 8084a82:	a827      	add	r0, sp, #156	; 0x9c
 8084a84:	f006 fc33 	bl	808b2ee <_ZN6StringC1Efi>
 8084a88:	a927      	add	r1, sp, #156	; 0x9c
 8084a8a:	4620      	mov	r0, r4
 8084a8c:	f7fc f986 	bl	8080d9c <_ZN5spark10JSONWriter5valueERK6String>
 8084a90:	a827      	add	r0, sp, #156	; 0x9c
 8084a92:	f006 fb4b 	bl	808b12c <_ZN6StringD1Ev>
    writer.name("PM1_0").value(String(PM01Value));
 8084a96:	4954      	ldr	r1, [pc, #336]	; (8084be8 <_Z15outputDataToESPv+0x2f4>)
 8084a98:	a822      	add	r0, sp, #136	; 0x88
 8084a9a:	f7fc f972 	bl	8080d82 <_ZN5spark10JSONWriter4nameEPKc>
 8084a9e:	4604      	mov	r4, r0
 8084aa0:	4b52      	ldr	r3, [pc, #328]	; (8084bec <_Z15outputDataToESPv+0x2f8>)
 8084aa2:	220a      	movs	r2, #10
 8084aa4:	6819      	ldr	r1, [r3, #0]
 8084aa6:	a827      	add	r0, sp, #156	; 0x9c
 8084aa8:	f006 fbfb 	bl	808b2a2 <_ZN6StringC1Eih>
 8084aac:	a927      	add	r1, sp, #156	; 0x9c
 8084aae:	4620      	mov	r0, r4
 8084ab0:	f7fc f974 	bl	8080d9c <_ZN5spark10JSONWriter5valueERK6String>
 8084ab4:	a827      	add	r0, sp, #156	; 0x9c
 8084ab6:	f006 fb39 	bl	808b12c <_ZN6StringD1Ev>
    writer.name("PM2_5").value(String(corrected_PM_25, 0)); 
 8084aba:	494d      	ldr	r1, [pc, #308]	; (8084bf0 <_Z15outputDataToESPv+0x2fc>)
 8084abc:	a822      	add	r0, sp, #136	; 0x88
 8084abe:	f7fc f960 	bl	8080d82 <_ZN5spark10JSONWriter4nameEPKc>
 8084ac2:	4604      	mov	r4, r0
 8084ac4:	4b4b      	ldr	r3, [pc, #300]	; (8084bf4 <_Z15outputDataToESPv+0x300>)
 8084ac6:	462a      	mov	r2, r5
 8084ac8:	6819      	ldr	r1, [r3, #0]
 8084aca:	a827      	add	r0, sp, #156	; 0x9c
 8084acc:	f006 fc0f 	bl	808b2ee <_ZN6StringC1Efi>
 8084ad0:	a927      	add	r1, sp, #156	; 0x9c
 8084ad2:	4620      	mov	r0, r4
 8084ad4:	f7fc f962 	bl	8080d9c <_ZN5spark10JSONWriter5valueERK6String>
 8084ad8:	a827      	add	r0, sp, #156	; 0x9c
 8084ada:	f006 fb27 	bl	808b12c <_ZN6StringD1Ev>
    writer.name("Temp").value(String(readTemperature(), 1));
 8084ade:	4946      	ldr	r1, [pc, #280]	; (8084bf8 <_Z15outputDataToESPv+0x304>)
 8084ae0:	a822      	add	r0, sp, #136	; 0x88
 8084ae2:	f7fc f94e 	bl	8080d82 <_ZN5spark10JSONWriter4nameEPKc>
 8084ae6:	4604      	mov	r4, r0
 8084ae8:	f7fc fd7e 	bl	80815e8 <_Z15readTemperaturev>
 8084aec:	2201      	movs	r2, #1
 8084aee:	4601      	mov	r1, r0
 8084af0:	a827      	add	r0, sp, #156	; 0x9c
 8084af2:	f006 fbfc 	bl	808b2ee <_ZN6StringC1Efi>
 8084af6:	a927      	add	r1, sp, #156	; 0x9c
 8084af8:	4620      	mov	r0, r4
 8084afa:	f7fc f94f 	bl	8080d9c <_ZN5spark10JSONWriter5valueERK6String>
 8084afe:	a827      	add	r0, sp, #156	; 0x9c
 8084b00:	f006 fb14 	bl	808b12c <_ZN6StringD1Ev>
    writer.name("Press").value(String(bme.pressure / 100.0, 1));
 8084b04:	493d      	ldr	r1, [pc, #244]	; (8084bfc <_Z15outputDataToESPv+0x308>)
 8084b06:	a822      	add	r0, sp, #136	; 0x88
 8084b08:	f7fc f93b 	bl	8080d82 <_ZN5spark10JSONWriter4nameEPKc>
 8084b0c:	4b3c      	ldr	r3, [pc, #240]	; (8084c00 <_Z15outputDataToESPv+0x30c>)
 8084b0e:	4605      	mov	r5, r0
 8084b10:	6858      	ldr	r0, [r3, #4]
 8084b12:	f008 fcf9 	bl	808d508 <__aeabi_f2d>
 8084b16:	2200      	movs	r2, #0
 8084b18:	4b3a      	ldr	r3, [pc, #232]	; (8084c04 <_Z15outputDataToESPv+0x310>)
 8084b1a:	f008 fe73 	bl	808d804 <__aeabi_ddiv>
 8084b1e:	2401      	movs	r4, #1
 8084b20:	460b      	mov	r3, r1
 8084b22:	4602      	mov	r2, r0
 8084b24:	9400      	str	r4, [sp, #0]
 8084b26:	a827      	add	r0, sp, #156	; 0x9c
 8084b28:	f006 fbf8 	bl	808b31c <_ZN6StringC1Edi>
 8084b2c:	a927      	add	r1, sp, #156	; 0x9c
 8084b2e:	4628      	mov	r0, r5
 8084b30:	f7fc f934 	bl	8080d9c <_ZN5spark10JSONWriter5valueERK6String>
 8084b34:	a827      	add	r0, sp, #156	; 0x9c
 8084b36:	f006 faf9 	bl	808b12c <_ZN6StringD1Ev>
    writer.name("Hmdty").value(String(readHumidity(), 1));
 8084b3a:	4933      	ldr	r1, [pc, #204]	; (8084c08 <_Z15outputDataToESPv+0x314>)
 8084b3c:	a822      	add	r0, sp, #136	; 0x88
 8084b3e:	f7fc f920 	bl	8080d82 <_ZN5spark10JSONWriter4nameEPKc>
 8084b42:	4605      	mov	r5, r0
 8084b44:	f7fc fdce 	bl	80816e4 <_Z12readHumidityv>
 8084b48:	4622      	mov	r2, r4
 8084b4a:	4601      	mov	r1, r0
 8084b4c:	a827      	add	r0, sp, #156	; 0x9c
 8084b4e:	f006 fbce 	bl	808b2ee <_ZN6StringC1Efi>
 8084b52:	a927      	add	r1, sp, #156	; 0x9c
 8084b54:	4628      	mov	r0, r5
 8084b56:	f7fc f921 	bl	8080d9c <_ZN5spark10JSONWriter5valueERK6String>
 8084b5a:	a827      	add	r0, sp, #156	; 0x9c
 8084b5c:	f006 fae6 	bl	808b12c <_ZN6StringD1Ev>
    //add gps coordinates to json:
    if(gps.get_latitude() != 0){
 8084b60:	482a      	ldr	r0, [pc, #168]	; (8084c0c <_Z15outputDataToESPv+0x318>)
 8084b62:	f002 fc29 	bl	80873b8 <_ZN3GPS12get_latitudeEv>
 8084b66:	2200      	movs	r2, #0
 8084b68:	2300      	movs	r3, #0
 8084b6a:	f008 ff89 	bl	808da80 <__aeabi_dcmpeq>
 8084b6e:	2800      	cmp	r0, #0
 8084b70:	d150      	bne.n	8084c14 <_Z15outputDataToESPv+0x320>
        if(gps.get_nsIndicator() == 0){
 8084b72:	4826      	ldr	r0, [pc, #152]	; (8084c0c <_Z15outputDataToESPv+0x318>)
 8084b74:	f002 fc3b 	bl	80873ee <_ZN3GPS15get_nsIndicatorEv>
 8084b78:	b918      	cbnz	r0, 8084b82 <_Z15outputDataToESPv+0x28e>
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8084b7a:	4925      	ldr	r1, [pc, #148]	; (8084c10 <_Z15outputDataToESPv+0x31c>)
 8084b7c:	a80e      	add	r0, sp, #56	; 0x38
 8084b7e:	f006 fbfe 	bl	808b37e <_ZN6String6concatEPKc>
            latitude_string += "-";
        }
    
        latitude_string += String(gps.get_latitude());
 8084b82:	4822      	ldr	r0, [pc, #136]	; (8084c0c <_Z15outputDataToESPv+0x318>)
 8084b84:	f002 fc18 	bl	80873b8 <_ZN3GPS12get_latitudeEv>
 8084b88:	2306      	movs	r3, #6
 8084b8a:	4602      	mov	r2, r0
 8084b8c:	9300      	str	r3, [sp, #0]
 8084b8e:	a827      	add	r0, sp, #156	; 0x9c
 8084b90:	460b      	mov	r3, r1
 8084b92:	f006 fbc3 	bl	808b31c <_ZN6StringC1Edi>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084b96:	a927      	add	r1, sp, #156	; 0x9c
 8084b98:	a80e      	add	r0, sp, #56	; 0x38
 8084b9a:	f006 fbec 	bl	808b376 <_ZN6String6concatERKS_>
 8084b9e:	a827      	add	r0, sp, #156	; 0x9c
 8084ba0:	f006 fac4 	bl	808b12c <_ZN6StringD1Ev>
 8084ba4:	e03a      	b.n	8084c1c <_Z15outputDataToESPv+0x328>
 8084ba6:	bf00      	nop
 8084ba8:	200004e4 	.word	0x200004e4
 8084bac:	20001120 	.word	0x20001120
 8084bb0:	08094308 	.word	0x08094308
 8084bb4:	080931b1 	.word	0x080931b1
 8084bb8:	20000488 	.word	0x20000488
 8084bbc:	08093eda 	.word	0x08093eda
 8084bc0:	08094590 	.word	0x08094590
 8084bc4:	080931b3 	.word	0x080931b3
 8084bc8:	080931b8 	.word	0x080931b8
 8084bcc:	080931c6 	.word	0x080931c6
 8084bd0:	080931cf 	.word	0x080931cf
 8084bd4:	2000111c 	.word	0x2000111c
 8084bd8:	08093e3b 	.word	0x08093e3b
 8084bdc:	20000630 	.word	0x20000630
 8084be0:	08091d5e 	.word	0x08091d5e
 8084be4:	20000f14 	.word	0x20000f14
 8084be8:	080931e2 	.word	0x080931e2
 8084bec:	20000cd4 	.word	0x20000cd4
 8084bf0:	080931e8 	.word	0x080931e8
 8084bf4:	20000db0 	.word	0x20000db0
 8084bf8:	080931ee 	.word	0x080931ee
 8084bfc:	080931f3 	.word	0x080931f3
 8084c00:	20000b04 	.word	0x20000b04
 8084c04:	40590000 	.word	0x40590000
 8084c08:	080931f9 	.word	0x080931f9
 8084c0c:	20000d78 	.word	0x20000d78
 8084c10:	080931b6 	.word	0x080931b6
    }else{
        latitude_string = "";
 8084c14:	49b5      	ldr	r1, [pc, #724]	; (8084eec <_Z15outputDataToESPv+0x5f8>)
 8084c16:	a80e      	add	r0, sp, #56	; 0x38
 8084c18:	f006 fb21 	bl	808b25e <_ZN6StringaSEPKc>
    }
    writer.name("Lat").value(latitude_string);
 8084c1c:	49b4      	ldr	r1, [pc, #720]	; (8084ef0 <_Z15outputDataToESPv+0x5fc>)
 8084c1e:	a822      	add	r0, sp, #136	; 0x88
 8084c20:	f7fc f8af 	bl	8080d82 <_ZN5spark10JSONWriter4nameEPKc>
 8084c24:	a90e      	add	r1, sp, #56	; 0x38
 8084c26:	f7fc f8b9 	bl	8080d9c <_ZN5spark10JSONWriter5valueERK6String>

    if(gps.get_longitude() != 0){
 8084c2a:	48b2      	ldr	r0, [pc, #712]	; (8084ef4 <_Z15outputDataToESPv+0x600>)
 8084c2c:	f002 fbc9 	bl	80873c2 <_ZN3GPS13get_longitudeEv>
 8084c30:	2200      	movs	r2, #0
 8084c32:	2300      	movs	r3, #0
 8084c34:	f008 ff24 	bl	808da80 <__aeabi_dcmpeq>
 8084c38:	b9c8      	cbnz	r0, 8084c6e <_Z15outputDataToESPv+0x37a>
        if(gps.get_ewIndicator() == 0x01){
 8084c3a:	48ae      	ldr	r0, [pc, #696]	; (8084ef4 <_Z15outputDataToESPv+0x600>)
 8084c3c:	f002 fbda 	bl	80873f4 <_ZN3GPS15get_ewIndicatorEv>
 8084c40:	2801      	cmp	r0, #1
 8084c42:	d103      	bne.n	8084c4c <_Z15outputDataToESPv+0x358>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8084c44:	49ac      	ldr	r1, [pc, #688]	; (8084ef8 <_Z15outputDataToESPv+0x604>)
 8084c46:	a812      	add	r0, sp, #72	; 0x48
 8084c48:	f006 fb99 	bl	808b37e <_ZN6String6concatEPKc>
            longitude_string += "-";
            
        }
        longitude_string += String(gps.get_longitude());
 8084c4c:	48a9      	ldr	r0, [pc, #676]	; (8084ef4 <_Z15outputDataToESPv+0x600>)
 8084c4e:	f002 fbb8 	bl	80873c2 <_ZN3GPS13get_longitudeEv>
 8084c52:	2306      	movs	r3, #6
 8084c54:	4602      	mov	r2, r0
 8084c56:	9300      	str	r3, [sp, #0]
 8084c58:	a827      	add	r0, sp, #156	; 0x9c
 8084c5a:	460b      	mov	r3, r1
 8084c5c:	f006 fb5e 	bl	808b31c <_ZN6StringC1Edi>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084c60:	a927      	add	r1, sp, #156	; 0x9c
 8084c62:	a812      	add	r0, sp, #72	; 0x48
 8084c64:	f006 fb87 	bl	808b376 <_ZN6String6concatERKS_>
 8084c68:	a827      	add	r0, sp, #156	; 0x9c
 8084c6a:	f006 fa5f 	bl	808b12c <_ZN6StringD1Ev>
    }  
      
    writer.name("Long").value(longitude_string);
 8084c6e:	49a3      	ldr	r1, [pc, #652]	; (8084efc <_Z15outputDataToESPv+0x608>)
 8084c70:	a822      	add	r0, sp, #136	; 0x88
 8084c72:	f7fc f886 	bl	8080d82 <_ZN5spark10JSONWriter4nameEPKc>
 8084c76:	a912      	add	r1, sp, #72	; 0x48
 8084c78:	f7fc f890 	bl	8080d9c <_ZN5spark10JSONWriter5valueERK6String>
    
    
    writer.endObject();
 8084c7c:	a822      	add	r0, sp, #136	; 0x88
 8084c7e:	f007 ffe7 	bl	808cc50 <_ZN5spark10JSONWriter9endObjectEv>
    writer.buffer()[std::min(writer.bufferSize(), writer.dataSize())] = 0;
 8084c82:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8084c84:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8084c86:	2400      	movs	r4, #0
 8084c88:	4293      	cmp	r3, r2
 8084c8a:	bf28      	it	cs
 8084c8c:	4613      	movcs	r3, r2
 8084c8e:	9a24      	ldr	r2, [sp, #144]	; 0x90

    cloud_output_string += String(CARBON_MONOXIDE_PACKET_CONSTANT) + String(CO_float, 3);
 8084c90:	4d9b      	ldr	r5, [pc, #620]	; (8084f00 <_Z15outputDataToESPv+0x60c>)
      
    writer.name("Long").value(longitude_string);
    
    
    writer.endObject();
    writer.buffer()[std::min(writer.bufferSize(), writer.dataSize())] = 0;
 8084c92:	54d4      	strb	r4, [r2, r3]

    cloud_output_string += String(CARBON_MONOXIDE_PACKET_CONSTANT) + String(CO_float, 3);
 8084c94:	214d      	movs	r1, #77	; 0x4d
 8084c96:	a81a      	add	r0, sp, #104	; 0x68
 8084c98:	f006 faf2 	bl	808b280 <_ZN6StringC1Ec>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084c9c:	a91a      	add	r1, sp, #104	; 0x68
 8084c9e:	a827      	add	r0, sp, #156	; 0x9c
 8084ca0:	f006 faca 	bl	808b238 <_ZN6StringC1ERKS_>
 8084ca4:	2203      	movs	r2, #3
 8084ca6:	6829      	ldr	r1, [r5, #0]
 8084ca8:	a81e      	add	r0, sp, #120	; 0x78
 8084caa:	f006 fb20 	bl	808b2ee <_ZN6StringC1Efi>
 8084cae:	a91e      	add	r1, sp, #120	; 0x78
 8084cb0:	a827      	add	r0, sp, #156	; 0x9c
 8084cb2:	f006 fba5 	bl	808b400 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084cb6:	4601      	mov	r1, r0
 8084cb8:	a802      	add	r0, sp, #8
 8084cba:	f006 fb5c 	bl	808b376 <_ZN6String6concatERKS_>
 8084cbe:	a81e      	add	r0, sp, #120	; 0x78
 8084cc0:	f006 fa34 	bl	808b12c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084cc4:	a827      	add	r0, sp, #156	; 0x9c
 8084cc6:	f006 fa31 	bl	808b12c <_ZN6StringD1Ev>
 8084cca:	a81a      	add	r0, sp, #104	; 0x68
 8084ccc:	f006 fa2e 	bl	808b12c <_ZN6StringD1Ev>
    csv_output_string += String(CO_float, 3) + ",";
 8084cd0:	2203      	movs	r2, #3
 8084cd2:	6829      	ldr	r1, [r5, #0]
 8084cd4:	a81e      	add	r0, sp, #120	; 0x78
 8084cd6:	f006 fb0a 	bl	808b2ee <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084cda:	a91e      	add	r1, sp, #120	; 0x78
 8084cdc:	a827      	add	r0, sp, #156	; 0x9c
 8084cde:	f006 faab 	bl	808b238 <_ZN6StringC1ERKS_>
 8084ce2:	4988      	ldr	r1, [pc, #544]	; (8084f04 <_Z15outputDataToESPv+0x610>)
 8084ce4:	a827      	add	r0, sp, #156	; 0x9c
 8084ce6:	f006 fb97 	bl	808b418 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084cea:	4601      	mov	r1, r0
 8084cec:	a806      	add	r0, sp, #24
 8084cee:	f006 fb42 	bl	808b376 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084cf2:	a827      	add	r0, sp, #156	; 0x9c
 8084cf4:	f006 fa1a 	bl	808b12c <_ZN6StringD1Ev>
 8084cf8:	a81e      	add	r0, sp, #120	; 0x78
 8084cfa:	f006 fa17 	bl	808b12c <_ZN6StringD1Ev>
    #if AFE2_en
    cloud_output_string += String(CARBON_MONOXIDE_PACKET_CONSTANT) + String(CO_float_2, 3);
    csv_output_string += String(CO_float_2, 3) + ",";
    #endif
    cloud_output_string += String(CARBON_DIOXIDE_PACKET_CONSTANT) + String(CO2_float, 0);
 8084cfe:	4d82      	ldr	r5, [pc, #520]	; (8084f08 <_Z15outputDataToESPv+0x614>)
 8084d00:	2143      	movs	r1, #67	; 0x43
 8084d02:	a81a      	add	r0, sp, #104	; 0x68
 8084d04:	f006 fabc 	bl	808b280 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084d08:	a91a      	add	r1, sp, #104	; 0x68
 8084d0a:	a827      	add	r0, sp, #156	; 0x9c
 8084d0c:	f006 fa94 	bl	808b238 <_ZN6StringC1ERKS_>
 8084d10:	4622      	mov	r2, r4
 8084d12:	6829      	ldr	r1, [r5, #0]
 8084d14:	a81e      	add	r0, sp, #120	; 0x78
 8084d16:	f006 faea 	bl	808b2ee <_ZN6StringC1Efi>
 8084d1a:	a91e      	add	r1, sp, #120	; 0x78
 8084d1c:	a827      	add	r0, sp, #156	; 0x9c
 8084d1e:	f006 fb6f 	bl	808b400 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084d22:	4601      	mov	r1, r0
 8084d24:	a802      	add	r0, sp, #8
 8084d26:	f006 fb26 	bl	808b376 <_ZN6String6concatERKS_>
 8084d2a:	a81e      	add	r0, sp, #120	; 0x78
 8084d2c:	f006 f9fe 	bl	808b12c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084d30:	a827      	add	r0, sp, #156	; 0x9c
 8084d32:	f006 f9fb 	bl	808b12c <_ZN6StringD1Ev>
 8084d36:	a81a      	add	r0, sp, #104	; 0x68
 8084d38:	f006 f9f8 	bl	808b12c <_ZN6StringD1Ev>
    csv_output_string += String(CO2_float, 0) + ",";
 8084d3c:	4622      	mov	r2, r4
 8084d3e:	6829      	ldr	r1, [r5, #0]
 8084d40:	a81e      	add	r0, sp, #120	; 0x78
 8084d42:	f006 fad4 	bl	808b2ee <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084d46:	a91e      	add	r1, sp, #120	; 0x78
 8084d48:	a827      	add	r0, sp, #156	; 0x9c
 8084d4a:	f006 fa75 	bl	808b238 <_ZN6StringC1ERKS_>
 8084d4e:	496d      	ldr	r1, [pc, #436]	; (8084f04 <_Z15outputDataToESPv+0x610>)
 8084d50:	a827      	add	r0, sp, #156	; 0x9c
 8084d52:	f006 fb61 	bl	808b418 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084d56:	4601      	mov	r1, r0
 8084d58:	a806      	add	r0, sp, #24
 8084d5a:	f006 fb0c 	bl	808b376 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084d5e:	a827      	add	r0, sp, #156	; 0x9c
 8084d60:	f006 f9e4 	bl	808b12c <_ZN6StringD1Ev>
 8084d64:	a81e      	add	r0, sp, #120	; 0x78
 8084d66:	f006 f9e1 	bl	808b12c <_ZN6StringD1Ev>

    if(voc_enabled){
 8084d6a:	4b68      	ldr	r3, [pc, #416]	; (8084f0c <_Z15outputDataToESPv+0x618>)
 8084d6c:	681b      	ldr	r3, [r3, #0]
 8084d6e:	2b00      	cmp	r3, #0
 8084d70:	d035      	beq.n	8084dde <_Z15outputDataToESPv+0x4ea>
        cloud_output_string += String(VOC_PACKET_CONSTANT) + String(air_quality_score, 1);
 8084d72:	2167      	movs	r1, #103	; 0x67
 8084d74:	4c66      	ldr	r4, [pc, #408]	; (8084f10 <_Z15outputDataToESPv+0x61c>)
 8084d76:	a81a      	add	r0, sp, #104	; 0x68
 8084d78:	f006 fa82 	bl	808b280 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084d7c:	a91a      	add	r1, sp, #104	; 0x68
 8084d7e:	a827      	add	r0, sp, #156	; 0x9c
 8084d80:	f006 fa5a 	bl	808b238 <_ZN6StringC1ERKS_>
 8084d84:	2201      	movs	r2, #1
 8084d86:	6821      	ldr	r1, [r4, #0]
 8084d88:	a81e      	add	r0, sp, #120	; 0x78
 8084d8a:	f006 fab0 	bl	808b2ee <_ZN6StringC1Efi>
 8084d8e:	a91e      	add	r1, sp, #120	; 0x78
 8084d90:	a827      	add	r0, sp, #156	; 0x9c
 8084d92:	f006 fb35 	bl	808b400 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084d96:	4601      	mov	r1, r0
 8084d98:	a802      	add	r0, sp, #8
 8084d9a:	f006 faec 	bl	808b376 <_ZN6String6concatERKS_>
 8084d9e:	a81e      	add	r0, sp, #120	; 0x78
 8084da0:	f006 f9c4 	bl	808b12c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084da4:	a827      	add	r0, sp, #156	; 0x9c
 8084da6:	f006 f9c1 	bl	808b12c <_ZN6StringD1Ev>
 8084daa:	a81a      	add	r0, sp, #104	; 0x68
 8084dac:	f006 f9be 	bl	808b12c <_ZN6StringD1Ev>
        csv_output_string += String(air_quality_score, 1) + ",";
 8084db0:	2201      	movs	r2, #1
 8084db2:	6821      	ldr	r1, [r4, #0]
 8084db4:	a81e      	add	r0, sp, #120	; 0x78
 8084db6:	f006 fa9a 	bl	808b2ee <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084dba:	a91e      	add	r1, sp, #120	; 0x78
 8084dbc:	a827      	add	r0, sp, #156	; 0x9c
 8084dbe:	f006 fa3b 	bl	808b238 <_ZN6StringC1ERKS_>
 8084dc2:	4950      	ldr	r1, [pc, #320]	; (8084f04 <_Z15outputDataToESPv+0x610>)
 8084dc4:	a827      	add	r0, sp, #156	; 0x9c
 8084dc6:	f006 fb27 	bl	808b418 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084dca:	4601      	mov	r1, r0
 8084dcc:	a806      	add	r0, sp, #24
 8084dce:	f006 fad2 	bl	808b376 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084dd2:	a827      	add	r0, sp, #156	; 0x9c
 8084dd4:	f006 f9aa 	bl	808b12c <_ZN6StringD1Ev>
 8084dd8:	a81e      	add	r0, sp, #120	; 0x78
 8084dda:	f006 f9a7 	bl	808b12c <_ZN6StringD1Ev>
    }
    cloud_output_string += String(PM1_PACKET_CONSTANT) + String(PM01Value);
 8084dde:	4c4d      	ldr	r4, [pc, #308]	; (8084f14 <_Z15outputDataToESPv+0x620>)
 8084de0:	2172      	movs	r1, #114	; 0x72
 8084de2:	a81a      	add	r0, sp, #104	; 0x68
 8084de4:	f006 fa4c 	bl	808b280 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084de8:	a91a      	add	r1, sp, #104	; 0x68
 8084dea:	a827      	add	r0, sp, #156	; 0x9c
 8084dec:	f006 fa24 	bl	808b238 <_ZN6StringC1ERKS_>
 8084df0:	220a      	movs	r2, #10
 8084df2:	6821      	ldr	r1, [r4, #0]
 8084df4:	a81e      	add	r0, sp, #120	; 0x78
 8084df6:	f006 fa54 	bl	808b2a2 <_ZN6StringC1Eih>
 8084dfa:	a91e      	add	r1, sp, #120	; 0x78
 8084dfc:	a827      	add	r0, sp, #156	; 0x9c
 8084dfe:	f006 faff 	bl	808b400 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084e02:	4601      	mov	r1, r0
 8084e04:	a802      	add	r0, sp, #8
 8084e06:	f006 fab6 	bl	808b376 <_ZN6String6concatERKS_>
 8084e0a:	a81e      	add	r0, sp, #120	; 0x78
 8084e0c:	f006 f98e 	bl	808b12c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084e10:	a827      	add	r0, sp, #156	; 0x9c
 8084e12:	f006 f98b 	bl	808b12c <_ZN6StringD1Ev>
 8084e16:	a81a      	add	r0, sp, #104	; 0x68
 8084e18:	f006 f988 	bl	808b12c <_ZN6StringD1Ev>
    csv_output_string += String(PM01Value) + ",";
 8084e1c:	220a      	movs	r2, #10
 8084e1e:	6821      	ldr	r1, [r4, #0]
 8084e20:	a81e      	add	r0, sp, #120	; 0x78
 8084e22:	f006 fa3e 	bl	808b2a2 <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084e26:	a91e      	add	r1, sp, #120	; 0x78
 8084e28:	a827      	add	r0, sp, #156	; 0x9c
 8084e2a:	f006 fa05 	bl	808b238 <_ZN6StringC1ERKS_>
 8084e2e:	4935      	ldr	r1, [pc, #212]	; (8084f04 <_Z15outputDataToESPv+0x610>)
 8084e30:	a827      	add	r0, sp, #156	; 0x9c
 8084e32:	f006 faf1 	bl	808b418 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084e36:	4601      	mov	r1, r0
 8084e38:	a806      	add	r0, sp, #24
 8084e3a:	f006 fa9c 	bl	808b376 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084e3e:	a827      	add	r0, sp, #156	; 0x9c
 8084e40:	f006 f974 	bl	808b12c <_ZN6StringD1Ev>
 8084e44:	a81e      	add	r0, sp, #120	; 0x78
 8084e46:	f006 f971 	bl	808b12c <_ZN6StringD1Ev>
    cloud_output_string += String(PM2PT5_PACKET_CONSTANT) + String(corrected_PM_25, 0);
 8084e4a:	4c33      	ldr	r4, [pc, #204]	; (8084f18 <_Z15outputDataToESPv+0x624>)
 8084e4c:	2152      	movs	r1, #82	; 0x52
 8084e4e:	a81a      	add	r0, sp, #104	; 0x68
 8084e50:	f006 fa16 	bl	808b280 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084e54:	a91a      	add	r1, sp, #104	; 0x68
 8084e56:	a827      	add	r0, sp, #156	; 0x9c
 8084e58:	f006 f9ee 	bl	808b238 <_ZN6StringC1ERKS_>
 8084e5c:	2200      	movs	r2, #0
 8084e5e:	6821      	ldr	r1, [r4, #0]
 8084e60:	a81e      	add	r0, sp, #120	; 0x78
 8084e62:	f006 fa44 	bl	808b2ee <_ZN6StringC1Efi>
 8084e66:	a91e      	add	r1, sp, #120	; 0x78
 8084e68:	a827      	add	r0, sp, #156	; 0x9c
 8084e6a:	f006 fac9 	bl	808b400 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084e6e:	4601      	mov	r1, r0
 8084e70:	a802      	add	r0, sp, #8
 8084e72:	f006 fa80 	bl	808b376 <_ZN6String6concatERKS_>
 8084e76:	a81e      	add	r0, sp, #120	; 0x78
 8084e78:	f006 f958 	bl	808b12c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084e7c:	a827      	add	r0, sp, #156	; 0x9c
 8084e7e:	f006 f955 	bl	808b12c <_ZN6StringD1Ev>
 8084e82:	a81a      	add	r0, sp, #104	; 0x68
 8084e84:	f006 f952 	bl	808b12c <_ZN6StringD1Ev>
    csv_output_string += String(corrected_PM_25, 0) + ",";
 8084e88:	2200      	movs	r2, #0
 8084e8a:	6821      	ldr	r1, [r4, #0]
 8084e8c:	a81e      	add	r0, sp, #120	; 0x78
 8084e8e:	f006 fa2e 	bl	808b2ee <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084e92:	a91e      	add	r1, sp, #120	; 0x78
 8084e94:	a827      	add	r0, sp, #156	; 0x9c
 8084e96:	f006 f9cf 	bl	808b238 <_ZN6StringC1ERKS_>
 8084e9a:	491a      	ldr	r1, [pc, #104]	; (8084f04 <_Z15outputDataToESPv+0x610>)
 8084e9c:	a827      	add	r0, sp, #156	; 0x9c
 8084e9e:	f006 fabb 	bl	808b418 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084ea2:	4601      	mov	r1, r0
 8084ea4:	a806      	add	r0, sp, #24
 8084ea6:	f006 fa66 	bl	808b376 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084eaa:	a827      	add	r0, sp, #156	; 0x9c
 8084eac:	f006 f93e 	bl	808b12c <_ZN6StringD1Ev>
 8084eb0:	a81e      	add	r0, sp, #120	; 0x78
 8084eb2:	f006 f93b 	bl	808b12c <_ZN6StringD1Ev>
    cloud_output_string += String(PM10_PACKET_CONSTANT) + String(PM10Value);
 8084eb6:	4c19      	ldr	r4, [pc, #100]	; (8084f1c <_Z15outputDataToESPv+0x628>)
 8084eb8:	2171      	movs	r1, #113	; 0x71
 8084eba:	a81a      	add	r0, sp, #104	; 0x68
 8084ebc:	f006 f9e0 	bl	808b280 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084ec0:	a91a      	add	r1, sp, #104	; 0x68
 8084ec2:	a827      	add	r0, sp, #156	; 0x9c
 8084ec4:	f006 f9b8 	bl	808b238 <_ZN6StringC1ERKS_>
 8084ec8:	220a      	movs	r2, #10
 8084eca:	6821      	ldr	r1, [r4, #0]
 8084ecc:	a81e      	add	r0, sp, #120	; 0x78
 8084ece:	f006 f9e8 	bl	808b2a2 <_ZN6StringC1Eih>
 8084ed2:	a91e      	add	r1, sp, #120	; 0x78
 8084ed4:	a827      	add	r0, sp, #156	; 0x9c
 8084ed6:	f006 fa93 	bl	808b400 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084eda:	4601      	mov	r1, r0
 8084edc:	a802      	add	r0, sp, #8
 8084ede:	f006 fa4a 	bl	808b376 <_ZN6String6concatERKS_>
 8084ee2:	a81e      	add	r0, sp, #120	; 0x78
 8084ee4:	f006 f922 	bl	808b12c <_ZN6StringD1Ev>
 8084ee8:	e01a      	b.n	8084f20 <_Z15outputDataToESPv+0x62c>
 8084eea:	bf00      	nop
 8084eec:	08094308 	.word	0x08094308
 8084ef0:	080931ff 	.word	0x080931ff
 8084ef4:	20000d78 	.word	0x20000d78
 8084ef8:	080931b6 	.word	0x080931b6
 8084efc:	08093203 	.word	0x08093203
 8084f00:	20000f14 	.word	0x20000f14
 8084f04:	08093eda 	.word	0x08093eda
 8084f08:	20000630 	.word	0x20000630
 8084f0c:	20000f98 	.word	0x20000f98
 8084f10:	20000f18 	.word	0x20000f18
 8084f14:	20000cd4 	.word	0x20000cd4
 8084f18:	20000db0 	.word	0x20000db0
 8084f1c:	20000f2c 	.word	0x20000f2c

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084f20:	a827      	add	r0, sp, #156	; 0x9c
 8084f22:	f006 f903 	bl	808b12c <_ZN6StringD1Ev>
 8084f26:	a81a      	add	r0, sp, #104	; 0x68
 8084f28:	f006 f900 	bl	808b12c <_ZN6StringD1Ev>
    csv_output_string += String(PM10Value) + ",";
 8084f2c:	220a      	movs	r2, #10
 8084f2e:	6821      	ldr	r1, [r4, #0]
 8084f30:	a81e      	add	r0, sp, #120	; 0x78
 8084f32:	f006 f9b6 	bl	808b2a2 <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084f36:	a91e      	add	r1, sp, #120	; 0x78
 8084f38:	a827      	add	r0, sp, #156	; 0x9c
 8084f3a:	f006 f97d 	bl	808b238 <_ZN6StringC1ERKS_>
 8084f3e:	49b8      	ldr	r1, [pc, #736]	; (8085220 <_Z15outputDataToESPv+0x92c>)
 8084f40:	a827      	add	r0, sp, #156	; 0x9c
 8084f42:	f006 fa69 	bl	808b418 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084f46:	4601      	mov	r1, r0
 8084f48:	a806      	add	r0, sp, #24
 8084f4a:	f006 fa14 	bl	808b376 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084f4e:	a827      	add	r0, sp, #156	; 0x9c
 8084f50:	f006 f8ec 	bl	808b12c <_ZN6StringD1Ev>
 8084f54:	a81e      	add	r0, sp, #120	; 0x78
 8084f56:	f006 f8e9 	bl	808b12c <_ZN6StringD1Ev>
    cloud_output_string += String(TEMPERATURE_PACKET_CONSTANT) + String(readTemperature(), 1);
 8084f5a:	2174      	movs	r1, #116	; 0x74
 8084f5c:	a81a      	add	r0, sp, #104	; 0x68
 8084f5e:	f006 f98f 	bl	808b280 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084f62:	a91a      	add	r1, sp, #104	; 0x68
 8084f64:	a827      	add	r0, sp, #156	; 0x9c
 8084f66:	f006 f967 	bl	808b238 <_ZN6StringC1ERKS_>
 8084f6a:	f7fc fb3d 	bl	80815e8 <_Z15readTemperaturev>
 8084f6e:	2201      	movs	r2, #1
 8084f70:	4601      	mov	r1, r0
 8084f72:	a81e      	add	r0, sp, #120	; 0x78
 8084f74:	f006 f9bb 	bl	808b2ee <_ZN6StringC1Efi>
 8084f78:	a91e      	add	r1, sp, #120	; 0x78
 8084f7a:	a827      	add	r0, sp, #156	; 0x9c
 8084f7c:	f006 fa40 	bl	808b400 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084f80:	4601      	mov	r1, r0
 8084f82:	a802      	add	r0, sp, #8
 8084f84:	f006 f9f7 	bl	808b376 <_ZN6String6concatERKS_>
 8084f88:	a81e      	add	r0, sp, #120	; 0x78
 8084f8a:	f006 f8cf 	bl	808b12c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084f8e:	a827      	add	r0, sp, #156	; 0x9c
 8084f90:	f006 f8cc 	bl	808b12c <_ZN6StringD1Ev>
 8084f94:	a81a      	add	r0, sp, #104	; 0x68
 8084f96:	f006 f8c9 	bl	808b12c <_ZN6StringD1Ev>
    csv_output_string += String(readTemperature(), 1) + ",";
 8084f9a:	f7fc fb25 	bl	80815e8 <_Z15readTemperaturev>
 8084f9e:	2201      	movs	r2, #1
 8084fa0:	4601      	mov	r1, r0
 8084fa2:	a81e      	add	r0, sp, #120	; 0x78
 8084fa4:	f006 f9a3 	bl	808b2ee <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084fa8:	a91e      	add	r1, sp, #120	; 0x78
 8084faa:	a827      	add	r0, sp, #156	; 0x9c
 8084fac:	f006 f944 	bl	808b238 <_ZN6StringC1ERKS_>
 8084fb0:	499b      	ldr	r1, [pc, #620]	; (8085220 <_Z15outputDataToESPv+0x92c>)
 8084fb2:	a827      	add	r0, sp, #156	; 0x9c
 8084fb4:	f006 fa30 	bl	808b418 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084fb8:	4601      	mov	r1, r0
 8084fba:	a806      	add	r0, sp, #24
 8084fbc:	f006 f9db 	bl	808b376 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084fc0:	a827      	add	r0, sp, #156	; 0x9c
 8084fc2:	f006 f8b3 	bl	808b12c <_ZN6StringD1Ev>
 8084fc6:	a81e      	add	r0, sp, #120	; 0x78
 8084fc8:	f006 f8b0 	bl	808b12c <_ZN6StringD1Ev>
    cloud_output_string += String(PRESSURE_PACKET_CONSTANT) + String(bme.pressure / 100.0, 1);
 8084fcc:	4d95      	ldr	r5, [pc, #596]	; (8085224 <_Z15outputDataToESPv+0x930>)
 8084fce:	2150      	movs	r1, #80	; 0x50
 8084fd0:	a81a      	add	r0, sp, #104	; 0x68
 8084fd2:	f006 f955 	bl	808b280 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084fd6:	a91a      	add	r1, sp, #104	; 0x68
 8084fd8:	a827      	add	r0, sp, #156	; 0x9c
 8084fda:	f006 f92d 	bl	808b238 <_ZN6StringC1ERKS_>
 8084fde:	6868      	ldr	r0, [r5, #4]
 8084fe0:	f008 fa92 	bl	808d508 <__aeabi_f2d>
 8084fe4:	2200      	movs	r2, #0
 8084fe6:	4b90      	ldr	r3, [pc, #576]	; (8085228 <_Z15outputDataToESPv+0x934>)
 8084fe8:	f008 fc0c 	bl	808d804 <__aeabi_ddiv>
 8084fec:	2401      	movs	r4, #1
 8084fee:	4602      	mov	r2, r0
 8084ff0:	460b      	mov	r3, r1
 8084ff2:	9400      	str	r4, [sp, #0]
 8084ff4:	a81e      	add	r0, sp, #120	; 0x78
 8084ff6:	f006 f991 	bl	808b31c <_ZN6StringC1Edi>
 8084ffa:	a91e      	add	r1, sp, #120	; 0x78
 8084ffc:	a827      	add	r0, sp, #156	; 0x9c
 8084ffe:	f006 f9ff 	bl	808b400 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8085002:	4601      	mov	r1, r0
 8085004:	a802      	add	r0, sp, #8
 8085006:	f006 f9b6 	bl	808b376 <_ZN6String6concatERKS_>
 808500a:	a81e      	add	r0, sp, #120	; 0x78
 808500c:	f006 f88e 	bl	808b12c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8085010:	a827      	add	r0, sp, #156	; 0x9c
 8085012:	f006 f88b 	bl	808b12c <_ZN6StringD1Ev>
 8085016:	a81a      	add	r0, sp, #104	; 0x68
 8085018:	f006 f888 	bl	808b12c <_ZN6StringD1Ev>
    csv_output_string += String(bme.pressure / 100.0, 1) + ",";
 808501c:	6868      	ldr	r0, [r5, #4]
 808501e:	f008 fa73 	bl	808d508 <__aeabi_f2d>
 8085022:	2200      	movs	r2, #0
 8085024:	4b80      	ldr	r3, [pc, #512]	; (8085228 <_Z15outputDataToESPv+0x934>)
 8085026:	f008 fbed 	bl	808d804 <__aeabi_ddiv>
 808502a:	9400      	str	r4, [sp, #0]
 808502c:	460b      	mov	r3, r1
 808502e:	4602      	mov	r2, r0
 8085030:	a81e      	add	r0, sp, #120	; 0x78
 8085032:	f006 f973 	bl	808b31c <_ZN6StringC1Edi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8085036:	a91e      	add	r1, sp, #120	; 0x78
 8085038:	a827      	add	r0, sp, #156	; 0x9c
 808503a:	f006 f8fd 	bl	808b238 <_ZN6StringC1ERKS_>
 808503e:	4978      	ldr	r1, [pc, #480]	; (8085220 <_Z15outputDataToESPv+0x92c>)
 8085040:	a827      	add	r0, sp, #156	; 0x9c
 8085042:	f006 f9e9 	bl	808b418 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8085046:	4601      	mov	r1, r0
 8085048:	a806      	add	r0, sp, #24
 808504a:	f006 f994 	bl	808b376 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808504e:	a827      	add	r0, sp, #156	; 0x9c
 8085050:	f006 f86c 	bl	808b12c <_ZN6StringD1Ev>
 8085054:	a81e      	add	r0, sp, #120	; 0x78
 8085056:	f006 f869 	bl	808b12c <_ZN6StringD1Ev>
    cloud_output_string += String(HUMIDITY_PACKET_CONSTANT) + String(readHumidity(), 1);
 808505a:	2168      	movs	r1, #104	; 0x68
 808505c:	eb0d 0001 	add.w	r0, sp, r1
 8085060:	f006 f90e 	bl	808b280 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8085064:	a91a      	add	r1, sp, #104	; 0x68
 8085066:	a827      	add	r0, sp, #156	; 0x9c
 8085068:	f006 f8e6 	bl	808b238 <_ZN6StringC1ERKS_>
 808506c:	f7fc fb3a 	bl	80816e4 <_Z12readHumidityv>
 8085070:	4622      	mov	r2, r4
 8085072:	4601      	mov	r1, r0
 8085074:	a81e      	add	r0, sp, #120	; 0x78
 8085076:	f006 f93a 	bl	808b2ee <_ZN6StringC1Efi>
 808507a:	a91e      	add	r1, sp, #120	; 0x78
 808507c:	a827      	add	r0, sp, #156	; 0x9c
 808507e:	f006 f9bf 	bl	808b400 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8085082:	4601      	mov	r1, r0
 8085084:	a802      	add	r0, sp, #8
 8085086:	f006 f976 	bl	808b376 <_ZN6String6concatERKS_>
 808508a:	a81e      	add	r0, sp, #120	; 0x78
 808508c:	f006 f84e 	bl	808b12c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8085090:	a827      	add	r0, sp, #156	; 0x9c
 8085092:	f006 f84b 	bl	808b12c <_ZN6StringD1Ev>
 8085096:	a81a      	add	r0, sp, #104	; 0x68
 8085098:	f006 f848 	bl	808b12c <_ZN6StringD1Ev>
    csv_output_string += String(readHumidity(), 1) + ",";
 808509c:	f7fc fb22 	bl	80816e4 <_Z12readHumidityv>
 80850a0:	4622      	mov	r2, r4
 80850a2:	4601      	mov	r1, r0
 80850a4:	a81e      	add	r0, sp, #120	; 0x78
 80850a6:	f006 f922 	bl	808b2ee <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80850aa:	a91e      	add	r1, sp, #120	; 0x78
 80850ac:	a827      	add	r0, sp, #156	; 0x9c
 80850ae:	f006 f8c3 	bl	808b238 <_ZN6StringC1ERKS_>
 80850b2:	495b      	ldr	r1, [pc, #364]	; (8085220 <_Z15outputDataToESPv+0x92c>)
 80850b4:	a827      	add	r0, sp, #156	; 0x9c
 80850b6:	f006 f9af 	bl	808b418 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80850ba:	4601      	mov	r1, r0
 80850bc:	a806      	add	r0, sp, #24
 80850be:	f006 f95a 	bl	808b376 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80850c2:	a827      	add	r0, sp, #156	; 0x9c
 80850c4:	f006 f832 	bl	808b12c <_ZN6StringD1Ev>
 80850c8:	a81e      	add	r0, sp, #120	; 0x78
 80850ca:	f006 f82f 	bl	808b12c <_ZN6StringD1Ev>
    if(ozone_enabled){
 80850ce:	4b57      	ldr	r3, [pc, #348]	; (808522c <_Z15outputDataToESPv+0x938>)
 80850d0:	681b      	ldr	r3, [r3, #0]
 80850d2:	2b00      	cmp	r3, #0
 80850d4:	d035      	beq.n	8085142 <_Z15outputDataToESPv+0x84e>
        cloud_output_string += String(OZONE_PACKET_CONSTANT) + String(O3_float, 1);
 80850d6:	214f      	movs	r1, #79	; 0x4f
 80850d8:	4d55      	ldr	r5, [pc, #340]	; (8085230 <_Z15outputDataToESPv+0x93c>)
 80850da:	a81a      	add	r0, sp, #104	; 0x68
 80850dc:	f006 f8d0 	bl	808b280 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80850e0:	a91a      	add	r1, sp, #104	; 0x68
 80850e2:	a827      	add	r0, sp, #156	; 0x9c
 80850e4:	f006 f8a8 	bl	808b238 <_ZN6StringC1ERKS_>
 80850e8:	4622      	mov	r2, r4
 80850ea:	6829      	ldr	r1, [r5, #0]
 80850ec:	a81e      	add	r0, sp, #120	; 0x78
 80850ee:	f006 f8fe 	bl	808b2ee <_ZN6StringC1Efi>
 80850f2:	a91e      	add	r1, sp, #120	; 0x78
 80850f4:	a827      	add	r0, sp, #156	; 0x9c
 80850f6:	f006 f983 	bl	808b400 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80850fa:	4601      	mov	r1, r0
 80850fc:	a802      	add	r0, sp, #8
 80850fe:	f006 f93a 	bl	808b376 <_ZN6String6concatERKS_>
 8085102:	a81e      	add	r0, sp, #120	; 0x78
 8085104:	f006 f812 	bl	808b12c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8085108:	a827      	add	r0, sp, #156	; 0x9c
 808510a:	f006 f80f 	bl	808b12c <_ZN6StringD1Ev>
 808510e:	a81a      	add	r0, sp, #104	; 0x68
 8085110:	f006 f80c 	bl	808b12c <_ZN6StringD1Ev>
        csv_output_string += String(O3_float, 1) + ",";
 8085114:	4622      	mov	r2, r4
 8085116:	6829      	ldr	r1, [r5, #0]
 8085118:	a81e      	add	r0, sp, #120	; 0x78
 808511a:	f006 f8e8 	bl	808b2ee <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 808511e:	a91e      	add	r1, sp, #120	; 0x78
 8085120:	a827      	add	r0, sp, #156	; 0x9c
 8085122:	f006 f889 	bl	808b238 <_ZN6StringC1ERKS_>
 8085126:	493e      	ldr	r1, [pc, #248]	; (8085220 <_Z15outputDataToESPv+0x92c>)
 8085128:	a827      	add	r0, sp, #156	; 0x9c
 808512a:	f006 f975 	bl	808b418 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808512e:	4601      	mov	r1, r0
 8085130:	a806      	add	r0, sp, #24
 8085132:	f006 f920 	bl	808b376 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8085136:	a827      	add	r0, sp, #156	; 0x9c
 8085138:	f005 fff8 	bl	808b12c <_ZN6StringD1Ev>
 808513c:	a81e      	add	r0, sp, #120	; 0x78
 808513e:	f005 fff5 	bl	808b12c <_ZN6StringD1Ev>
    }
    cloud_output_string += String(BATTERY_PACKET_CONSTANT) + String(fuel.getSoC(), 1);
 8085142:	2178      	movs	r1, #120	; 0x78
 8085144:	a81a      	add	r0, sp, #104	; 0x68
 8085146:	f006 f89b 	bl	808b280 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 808514a:	a91a      	add	r1, sp, #104	; 0x68
 808514c:	a827      	add	r0, sp, #156	; 0x9c
 808514e:	f006 f873 	bl	808b238 <_ZN6StringC1ERKS_>
 8085152:	4838      	ldr	r0, [pc, #224]	; (8085234 <_Z15outputDataToESPv+0x940>)
 8085154:	f006 fe76 	bl	808be44 <_ZN9FuelGauge6getSoCEv>
 8085158:	2201      	movs	r2, #1
 808515a:	4601      	mov	r1, r0
 808515c:	a81e      	add	r0, sp, #120	; 0x78
 808515e:	f006 f8c6 	bl	808b2ee <_ZN6StringC1Efi>
 8085162:	a91e      	add	r1, sp, #120	; 0x78
 8085164:	a827      	add	r0, sp, #156	; 0x9c
 8085166:	f006 f94b 	bl	808b400 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808516a:	4601      	mov	r1, r0
 808516c:	a802      	add	r0, sp, #8
 808516e:	f006 f902 	bl	808b376 <_ZN6String6concatERKS_>
 8085172:	a81e      	add	r0, sp, #120	; 0x78
 8085174:	f005 ffda 	bl	808b12c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8085178:	a827      	add	r0, sp, #156	; 0x9c
 808517a:	f005 ffd7 	bl	808b12c <_ZN6StringD1Ev>
 808517e:	a81a      	add	r0, sp, #104	; 0x68
 8085180:	f005 ffd4 	bl	808b12c <_ZN6StringD1Ev>
    csv_output_string += String(fuel.getSoC(), 1) + ",";
 8085184:	482b      	ldr	r0, [pc, #172]	; (8085234 <_Z15outputDataToESPv+0x940>)
 8085186:	f006 fe5d 	bl	808be44 <_ZN9FuelGauge6getSoCEv>
 808518a:	2201      	movs	r2, #1
 808518c:	4601      	mov	r1, r0
 808518e:	a81e      	add	r0, sp, #120	; 0x78
 8085190:	f006 f8ad 	bl	808b2ee <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8085194:	a91e      	add	r1, sp, #120	; 0x78
 8085196:	a827      	add	r0, sp, #156	; 0x9c
 8085198:	f006 f84e 	bl	808b238 <_ZN6StringC1ERKS_>
 808519c:	4920      	ldr	r1, [pc, #128]	; (8085220 <_Z15outputDataToESPv+0x92c>)
 808519e:	a827      	add	r0, sp, #156	; 0x9c
 80851a0:	f006 f93a 	bl	808b418 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80851a4:	4601      	mov	r1, r0
 80851a6:	a806      	add	r0, sp, #24
 80851a8:	f006 f8e5 	bl	808b376 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80851ac:	a827      	add	r0, sp, #156	; 0x9c
 80851ae:	f005 ffbd 	bl	808b12c <_ZN6StringD1Ev>
 80851b2:	a81e      	add	r0, sp, #120	; 0x78
 80851b4:	f005 ffba 	bl	808b12c <_ZN6StringD1Ev>
    cloud_output_string += String(SOUND_PACKET_CONSTANT) + String(sound_average, 0);
 80851b8:	2173      	movs	r1, #115	; 0x73
 80851ba:	a81a      	add	r0, sp, #104	; 0x68
 80851bc:	f006 f860 	bl	808b280 <_ZN6StringC1Ec>
 80851c0:	4c1d      	ldr	r4, [pc, #116]	; (8085238 <_Z15outputDataToESPv+0x944>)
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80851c2:	a91a      	add	r1, sp, #104	; 0x68
 80851c4:	2500      	movs	r5, #0
 80851c6:	a827      	add	r0, sp, #156	; 0x9c
 80851c8:	f006 f836 	bl	808b238 <_ZN6StringC1ERKS_>
 80851cc:	9500      	str	r5, [sp, #0]
 80851ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 80851d2:	a81e      	add	r0, sp, #120	; 0x78
 80851d4:	f006 f8a2 	bl	808b31c <_ZN6StringC1Edi>
 80851d8:	a91e      	add	r1, sp, #120	; 0x78
 80851da:	a827      	add	r0, sp, #156	; 0x9c
 80851dc:	f006 f910 	bl	808b400 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80851e0:	4601      	mov	r1, r0
 80851e2:	a802      	add	r0, sp, #8
 80851e4:	f006 f8c7 	bl	808b376 <_ZN6String6concatERKS_>
 80851e8:	a81e      	add	r0, sp, #120	; 0x78
 80851ea:	f005 ff9f 	bl	808b12c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80851ee:	a827      	add	r0, sp, #156	; 0x9c
 80851f0:	f005 ff9c 	bl	808b12c <_ZN6StringD1Ev>
 80851f4:	a81a      	add	r0, sp, #104	; 0x68
 80851f6:	f005 ff99 	bl	808b12c <_ZN6StringD1Ev>

    csv_output_string += String(sound_average, 0) + ",";
 80851fa:	9500      	str	r5, [sp, #0]
 80851fc:	e9d4 2300 	ldrd	r2, r3, [r4]
 8085200:	a81e      	add	r0, sp, #120	; 0x78
 8085202:	f006 f88b 	bl	808b31c <_ZN6StringC1Edi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8085206:	a91e      	add	r1, sp, #120	; 0x78
 8085208:	a827      	add	r0, sp, #156	; 0x9c
 808520a:	f006 f815 	bl	808b238 <_ZN6StringC1ERKS_>
 808520e:	4904      	ldr	r1, [pc, #16]	; (8085220 <_Z15outputDataToESPv+0x92c>)
 8085210:	a827      	add	r0, sp, #156	; 0x9c
 8085212:	f006 f901 	bl	808b418 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8085216:	4601      	mov	r1, r0
 8085218:	a806      	add	r0, sp, #24
 808521a:	f006 f8ac 	bl	808b376 <_ZN6String6concatERKS_>
 808521e:	e00d      	b.n	808523c <_Z15outputDataToESPv+0x948>
 8085220:	08093eda 	.word	0x08093eda
 8085224:	20000b04 	.word	0x20000b04
 8085228:	40590000 	.word	0x40590000
 808522c:	20000ec8 	.word	0x20000ec8
 8085230:	20000f90 	.word	0x20000f90
 8085234:	20000cc4 	.word	0x20000cc4
 8085238:	20000f20 	.word	0x20000f20

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808523c:	a827      	add	r0, sp, #156	; 0x9c
 808523e:	f005 ff75 	bl	808b12c <_ZN6StringD1Ev>
 8085242:	a81e      	add	r0, sp, #120	; 0x78
 8085244:	f005 ff72 	bl	808b12c <_ZN6StringD1Ev>
    cloud_output_string += String(LATITUDE_PACKET_CONSTANT);
 8085248:	2161      	movs	r1, #97	; 0x61
 808524a:	a827      	add	r0, sp, #156	; 0x9c
 808524c:	f006 f818 	bl	808b280 <_ZN6StringC1Ec>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8085250:	a927      	add	r1, sp, #156	; 0x9c
 8085252:	a802      	add	r0, sp, #8
 8085254:	f006 f88f 	bl	808b376 <_ZN6String6concatERKS_>
 8085258:	a827      	add	r0, sp, #156	; 0x9c
 808525a:	f005 ff67 	bl	808b12c <_ZN6StringD1Ev>

    if(gps.get_latitude() != 0){
 808525e:	4885      	ldr	r0, [pc, #532]	; (8085474 <_Z15outputDataToESPv+0xb80>)
 8085260:	f002 f8aa 	bl	80873b8 <_ZN3GPS12get_latitudeEv>
 8085264:	2200      	movs	r2, #0
 8085266:	2300      	movs	r3, #0
 8085268:	f008 fc0a 	bl	808da80 <__aeabi_dcmpeq>
 808526c:	2800      	cmp	r0, #0
 808526e:	d131      	bne.n	80852d4 <_Z15outputDataToESPv+0x9e0>
        if(gps.get_nsIndicator() == 0){
 8085270:	4880      	ldr	r0, [pc, #512]	; (8085474 <_Z15outputDataToESPv+0xb80>)
 8085272:	f002 f8bc 	bl	80873ee <_ZN3GPS15get_nsIndicatorEv>
 8085276:	b938      	cbnz	r0, 8085288 <_Z15outputDataToESPv+0x994>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8085278:	497f      	ldr	r1, [pc, #508]	; (8085478 <_Z15outputDataToESPv+0xb84>)
 808527a:	a806      	add	r0, sp, #24
 808527c:	f006 f87f 	bl	808b37e <_ZN6String6concatEPKc>
 8085280:	497d      	ldr	r1, [pc, #500]	; (8085478 <_Z15outputDataToESPv+0xb84>)
 8085282:	a802      	add	r0, sp, #8
 8085284:	f006 f87b 	bl	808b37e <_ZN6String6concatEPKc>
            csv_output_string += "-";
            cloud_output_string += "-";
        }
        csv_output_string += String(gps.get_latitude()) + ",";
 8085288:	487a      	ldr	r0, [pc, #488]	; (8085474 <_Z15outputDataToESPv+0xb80>)
 808528a:	f002 f895 	bl	80873b8 <_ZN3GPS12get_latitudeEv>
 808528e:	2406      	movs	r4, #6
 8085290:	4602      	mov	r2, r0
 8085292:	460b      	mov	r3, r1
 8085294:	9400      	str	r4, [sp, #0]
 8085296:	a81e      	add	r0, sp, #120	; 0x78
 8085298:	f006 f840 	bl	808b31c <_ZN6StringC1Edi>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 808529c:	a91e      	add	r1, sp, #120	; 0x78
 808529e:	a827      	add	r0, sp, #156	; 0x9c
 80852a0:	f005 ffca 	bl	808b238 <_ZN6StringC1ERKS_>
 80852a4:	4975      	ldr	r1, [pc, #468]	; (808547c <_Z15outputDataToESPv+0xb88>)
 80852a6:	a827      	add	r0, sp, #156	; 0x9c
 80852a8:	f006 f8b6 	bl	808b418 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80852ac:	4601      	mov	r1, r0
 80852ae:	a806      	add	r0, sp, #24
 80852b0:	f006 f861 	bl	808b376 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80852b4:	a827      	add	r0, sp, #156	; 0x9c
 80852b6:	f005 ff39 	bl	808b12c <_ZN6StringD1Ev>
 80852ba:	a81e      	add	r0, sp, #120	; 0x78
 80852bc:	f005 ff36 	bl	808b12c <_ZN6StringD1Ev>
        cloud_output_string += String(gps.get_latitude());
 80852c0:	486c      	ldr	r0, [pc, #432]	; (8085474 <_Z15outputDataToESPv+0xb80>)
 80852c2:	f002 f879 	bl	80873b8 <_ZN3GPS12get_latitudeEv>
 80852c6:	9400      	str	r4, [sp, #0]
 80852c8:	4602      	mov	r2, r0
 80852ca:	460b      	mov	r3, r1
 80852cc:	a827      	add	r0, sp, #156	; 0x9c
 80852ce:	f006 f825 	bl	808b31c <_ZN6StringC1Edi>
 80852d2:	e019      	b.n	8085308 <_Z15outputDataToESPv+0xa14>
    }else{
        csv_output_string += String(geolocation_latitude)+ ",";
 80852d4:	496a      	ldr	r1, [pc, #424]	; (8085480 <_Z15outputDataToESPv+0xb8c>)
 80852d6:	a81e      	add	r0, sp, #120	; 0x78
 80852d8:	f005 ff6f 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80852dc:	a91e      	add	r1, sp, #120	; 0x78
 80852de:	a827      	add	r0, sp, #156	; 0x9c
 80852e0:	f005 ffaa 	bl	808b238 <_ZN6StringC1ERKS_>
 80852e4:	4965      	ldr	r1, [pc, #404]	; (808547c <_Z15outputDataToESPv+0xb88>)
 80852e6:	a827      	add	r0, sp, #156	; 0x9c
 80852e8:	f006 f896 	bl	808b418 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80852ec:	4601      	mov	r1, r0
 80852ee:	a806      	add	r0, sp, #24
 80852f0:	f006 f841 	bl	808b376 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80852f4:	a827      	add	r0, sp, #156	; 0x9c
 80852f6:	f005 ff19 	bl	808b12c <_ZN6StringD1Ev>
 80852fa:	a81e      	add	r0, sp, #120	; 0x78
 80852fc:	f005 ff16 	bl	808b12c <_ZN6StringD1Ev>
        cloud_output_string += String(geolocation_latitude);
 8085300:	495f      	ldr	r1, [pc, #380]	; (8085480 <_Z15outputDataToESPv+0xb8c>)
 8085302:	a827      	add	r0, sp, #156	; 0x9c
 8085304:	f005 ff59 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8085308:	a927      	add	r1, sp, #156	; 0x9c
 808530a:	a802      	add	r0, sp, #8
 808530c:	f006 f833 	bl	808b376 <_ZN6String6concatERKS_>
 8085310:	a827      	add	r0, sp, #156	; 0x9c
 8085312:	f005 ff0b 	bl	808b12c <_ZN6StringD1Ev>
    }

    cloud_output_string += String(LONGITUDE_PACKET_CONSTANT);
 8085316:	216f      	movs	r1, #111	; 0x6f
 8085318:	a827      	add	r0, sp, #156	; 0x9c
 808531a:	f005 ffb1 	bl	808b280 <_ZN6StringC1Ec>
 808531e:	a927      	add	r1, sp, #156	; 0x9c
 8085320:	a802      	add	r0, sp, #8
 8085322:	f006 f828 	bl	808b376 <_ZN6String6concatERKS_>
 8085326:	a827      	add	r0, sp, #156	; 0x9c
 8085328:	f005 ff00 	bl	808b12c <_ZN6StringD1Ev>

    if(gps.get_longitude() != 0){
 808532c:	4851      	ldr	r0, [pc, #324]	; (8085474 <_Z15outputDataToESPv+0xb80>)
 808532e:	f002 f848 	bl	80873c2 <_ZN3GPS13get_longitudeEv>
 8085332:	2200      	movs	r2, #0
 8085334:	2300      	movs	r3, #0
 8085336:	f008 fba3 	bl	808da80 <__aeabi_dcmpeq>
 808533a:	2800      	cmp	r0, #0
 808533c:	d132      	bne.n	80853a4 <_Z15outputDataToESPv+0xab0>
        if(gps.get_ewIndicator() == 0x01){
 808533e:	484d      	ldr	r0, [pc, #308]	; (8085474 <_Z15outputDataToESPv+0xb80>)
 8085340:	f002 f858 	bl	80873f4 <_ZN3GPS15get_ewIndicatorEv>
 8085344:	2801      	cmp	r0, #1
 8085346:	d107      	bne.n	8085358 <_Z15outputDataToESPv+0xa64>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8085348:	494b      	ldr	r1, [pc, #300]	; (8085478 <_Z15outputDataToESPv+0xb84>)
 808534a:	a806      	add	r0, sp, #24
 808534c:	f006 f817 	bl	808b37e <_ZN6String6concatEPKc>
 8085350:	4949      	ldr	r1, [pc, #292]	; (8085478 <_Z15outputDataToESPv+0xb84>)
 8085352:	a802      	add	r0, sp, #8
 8085354:	f006 f813 	bl	808b37e <_ZN6String6concatEPKc>
            csv_output_string += "-";
            cloud_output_string += "-";
        }
        csv_output_string += String(gps.get_longitude()) + ",";
 8085358:	4846      	ldr	r0, [pc, #280]	; (8085474 <_Z15outputDataToESPv+0xb80>)
 808535a:	f002 f832 	bl	80873c2 <_ZN3GPS13get_longitudeEv>
 808535e:	2406      	movs	r4, #6
 8085360:	4602      	mov	r2, r0
 8085362:	460b      	mov	r3, r1
 8085364:	9400      	str	r4, [sp, #0]
 8085366:	a81e      	add	r0, sp, #120	; 0x78
 8085368:	f005 ffd8 	bl	808b31c <_ZN6StringC1Edi>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 808536c:	a91e      	add	r1, sp, #120	; 0x78
 808536e:	a827      	add	r0, sp, #156	; 0x9c
 8085370:	f005 ff62 	bl	808b238 <_ZN6StringC1ERKS_>
 8085374:	4941      	ldr	r1, [pc, #260]	; (808547c <_Z15outputDataToESPv+0xb88>)
 8085376:	a827      	add	r0, sp, #156	; 0x9c
 8085378:	f006 f84e 	bl	808b418 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808537c:	4601      	mov	r1, r0
 808537e:	a806      	add	r0, sp, #24
 8085380:	f005 fff9 	bl	808b376 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8085384:	a827      	add	r0, sp, #156	; 0x9c
 8085386:	f005 fed1 	bl	808b12c <_ZN6StringD1Ev>
 808538a:	a81e      	add	r0, sp, #120	; 0x78
 808538c:	f005 fece 	bl	808b12c <_ZN6StringD1Ev>
        cloud_output_string += String(gps.get_longitude());
 8085390:	4838      	ldr	r0, [pc, #224]	; (8085474 <_Z15outputDataToESPv+0xb80>)
 8085392:	f002 f816 	bl	80873c2 <_ZN3GPS13get_longitudeEv>
 8085396:	9400      	str	r4, [sp, #0]
 8085398:	4602      	mov	r2, r0
 808539a:	460b      	mov	r3, r1
 808539c:	a827      	add	r0, sp, #156	; 0x9c
 808539e:	f005 ffbd 	bl	808b31c <_ZN6StringC1Edi>
 80853a2:	e019      	b.n	80853d8 <_Z15outputDataToESPv+0xae4>
    }else{
        csv_output_string += String(geolocation_longitude) + ",";
 80853a4:	4937      	ldr	r1, [pc, #220]	; (8085484 <_Z15outputDataToESPv+0xb90>)
 80853a6:	a81e      	add	r0, sp, #120	; 0x78
 80853a8:	f005 ff07 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80853ac:	a91e      	add	r1, sp, #120	; 0x78
 80853ae:	a827      	add	r0, sp, #156	; 0x9c
 80853b0:	f005 ff42 	bl	808b238 <_ZN6StringC1ERKS_>
 80853b4:	4931      	ldr	r1, [pc, #196]	; (808547c <_Z15outputDataToESPv+0xb88>)
 80853b6:	a827      	add	r0, sp, #156	; 0x9c
 80853b8:	f006 f82e 	bl	808b418 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80853bc:	4601      	mov	r1, r0
 80853be:	a806      	add	r0, sp, #24
 80853c0:	f005 ffd9 	bl	808b376 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80853c4:	a827      	add	r0, sp, #156	; 0x9c
 80853c6:	f005 feb1 	bl	808b12c <_ZN6StringD1Ev>
 80853ca:	a81e      	add	r0, sp, #120	; 0x78
 80853cc:	f005 feae 	bl	808b12c <_ZN6StringD1Ev>
        cloud_output_string += String(geolocation_longitude);
 80853d0:	492c      	ldr	r1, [pc, #176]	; (8085484 <_Z15outputDataToESPv+0xb90>)
 80853d2:	a827      	add	r0, sp, #156	; 0x9c
 80853d4:	f005 fef1 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80853d8:	a927      	add	r1, sp, #156	; 0x9c
 80853da:	a802      	add	r0, sp, #8
 80853dc:	f005 ffcb 	bl	808b376 <_ZN6String6concatERKS_>
 80853e0:	a827      	add	r0, sp, #156	; 0x9c
 80853e2:	f005 fea3 	bl	808b12c <_ZN6StringD1Ev>
    }

    cloud_output_string += String(ACCURACY_PACKET_CONSTANT);
 80853e6:	2163      	movs	r1, #99	; 0x63
 80853e8:	a827      	add	r0, sp, #156	; 0x9c
 80853ea:	f005 ff49 	bl	808b280 <_ZN6StringC1Ec>
 80853ee:	a927      	add	r1, sp, #156	; 0x9c
 80853f0:	a802      	add	r0, sp, #8
 80853f2:	f005 ffc0 	bl	808b376 <_ZN6String6concatERKS_>
 80853f6:	a827      	add	r0, sp, #156	; 0x9c
 80853f8:	f005 fe98 	bl	808b12c <_ZN6StringD1Ev>
    if (gps.get_longitude() != 0) {
 80853fc:	481d      	ldr	r0, [pc, #116]	; (8085474 <_Z15outputDataToESPv+0xb80>)
 80853fe:	f001 ffe0 	bl	80873c2 <_ZN3GPS13get_longitudeEv>
 8085402:	2200      	movs	r2, #0
 8085404:	2300      	movs	r3, #0
 8085406:	f008 fb3b 	bl	808da80 <__aeabi_dcmpeq>
 808540a:	2800      	cmp	r0, #0
 808540c:	d13e      	bne.n	808548c <_Z15outputDataToESPv+0xb98>
        csv_output_string += String(gps.get_horizontalDillution() / 10.0) + ",";
 808540e:	4819      	ldr	r0, [pc, #100]	; (8085474 <_Z15outputDataToESPv+0xb80>)
 8085410:	f001 ffdc 	bl	80873cc <_ZN3GPS23get_horizontalDillutionEv>
 8085414:	f008 f866 	bl	808d4e4 <__aeabi_i2d>
 8085418:	2200      	movs	r2, #0
 808541a:	4b1b      	ldr	r3, [pc, #108]	; (8085488 <_Z15outputDataToESPv+0xb94>)
 808541c:	f008 f9f2 	bl	808d804 <__aeabi_ddiv>
 8085420:	2406      	movs	r4, #6
 8085422:	4602      	mov	r2, r0
 8085424:	460b      	mov	r3, r1
 8085426:	9400      	str	r4, [sp, #0]
 8085428:	a81e      	add	r0, sp, #120	; 0x78
 808542a:	f005 ff77 	bl	808b31c <_ZN6StringC1Edi>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 808542e:	a91e      	add	r1, sp, #120	; 0x78
 8085430:	a827      	add	r0, sp, #156	; 0x9c
 8085432:	f005 ff01 	bl	808b238 <_ZN6StringC1ERKS_>
 8085436:	4911      	ldr	r1, [pc, #68]	; (808547c <_Z15outputDataToESPv+0xb88>)
 8085438:	a827      	add	r0, sp, #156	; 0x9c
 808543a:	f005 ffed 	bl	808b418 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808543e:	4601      	mov	r1, r0
 8085440:	a806      	add	r0, sp, #24
 8085442:	f005 ff98 	bl	808b376 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8085446:	a827      	add	r0, sp, #156	; 0x9c
 8085448:	f005 fe70 	bl	808b12c <_ZN6StringD1Ev>
 808544c:	a81e      	add	r0, sp, #120	; 0x78
 808544e:	f005 fe6d 	bl	808b12c <_ZN6StringD1Ev>
        cloud_output_string += String(gps.get_horizontalDillution() / 10.0);
 8085452:	4808      	ldr	r0, [pc, #32]	; (8085474 <_Z15outputDataToESPv+0xb80>)
 8085454:	f001 ffba 	bl	80873cc <_ZN3GPS23get_horizontalDillutionEv>
 8085458:	f008 f844 	bl	808d4e4 <__aeabi_i2d>
 808545c:	2200      	movs	r2, #0
 808545e:	4b0a      	ldr	r3, [pc, #40]	; (8085488 <_Z15outputDataToESPv+0xb94>)
 8085460:	f008 f9d0 	bl	808d804 <__aeabi_ddiv>
 8085464:	9400      	str	r4, [sp, #0]
 8085466:	4602      	mov	r2, r0
 8085468:	460b      	mov	r3, r1
 808546a:	a827      	add	r0, sp, #156	; 0x9c
 808546c:	f005 ff56 	bl	808b31c <_ZN6StringC1Edi>
 8085470:	e026      	b.n	80854c0 <_Z15outputDataToESPv+0xbcc>
 8085472:	bf00      	nop
 8085474:	20000d78 	.word	0x20000d78
 8085478:	080931b6 	.word	0x080931b6
 808547c:	08093eda 	.word	0x08093eda
 8085480:	200004b8 	.word	0x200004b8
 8085484:	200004c4 	.word	0x200004c4
 8085488:	40240000 	.word	0x40240000
    } else {
        csv_output_string += String(geolocation_accuracy) + ",";
 808548c:	499f      	ldr	r1, [pc, #636]	; (808570c <_Z15outputDataToESPv+0xe18>)
 808548e:	a81e      	add	r0, sp, #120	; 0x78
 8085490:	f005 fe93 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8085494:	a91e      	add	r1, sp, #120	; 0x78
 8085496:	a827      	add	r0, sp, #156	; 0x9c
 8085498:	f005 fece 	bl	808b238 <_ZN6StringC1ERKS_>
 808549c:	499c      	ldr	r1, [pc, #624]	; (8085710 <_Z15outputDataToESPv+0xe1c>)
 808549e:	a827      	add	r0, sp, #156	; 0x9c
 80854a0:	f005 ffba 	bl	808b418 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80854a4:	4601      	mov	r1, r0
 80854a6:	a806      	add	r0, sp, #24
 80854a8:	f005 ff65 	bl	808b376 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80854ac:	a827      	add	r0, sp, #156	; 0x9c
 80854ae:	f005 fe3d 	bl	808b12c <_ZN6StringD1Ev>
 80854b2:	a81e      	add	r0, sp, #120	; 0x78
 80854b4:	f005 fe3a 	bl	808b12c <_ZN6StringD1Ev>
        cloud_output_string += String(geolocation_accuracy);
 80854b8:	4994      	ldr	r1, [pc, #592]	; (808570c <_Z15outputDataToESPv+0xe18>)
 80854ba:	a827      	add	r0, sp, #156	; 0x9c
 80854bc:	f005 fe7d 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80854c0:	a927      	add	r1, sp, #156	; 0x9c
 80854c2:	a802      	add	r0, sp, #8
    }

    csv_output_string += String(status_word.status_int) + ",";
 80854c4:	4e93      	ldr	r6, [pc, #588]	; (8085714 <_Z15outputDataToESPv+0xe20>)
 80854c6:	f005 ff56 	bl	808b376 <_ZN6String6concatERKS_>
    if (gps.get_longitude() != 0) {
        csv_output_string += String(gps.get_horizontalDillution() / 10.0) + ",";
        cloud_output_string += String(gps.get_horizontalDillution() / 10.0);
    } else {
        csv_output_string += String(geolocation_accuracy) + ",";
        cloud_output_string += String(geolocation_accuracy);
 80854ca:	a827      	add	r0, sp, #156	; 0x9c
 80854cc:	f005 fe2e 	bl	808b12c <_ZN6StringD1Ev>
    }

    csv_output_string += String(status_word.status_int) + ",";
 80854d0:	220a      	movs	r2, #10
 80854d2:	8831      	ldrh	r1, [r6, #0]
 80854d4:	a81e      	add	r0, sp, #120	; 0x78
 80854d6:	f005 fee4 	bl	808b2a2 <_ZN6StringC1Eih>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80854da:	a91e      	add	r1, sp, #120	; 0x78
 80854dc:	a827      	add	r0, sp, #156	; 0x9c
 80854de:	f005 feab 	bl	808b238 <_ZN6StringC1ERKS_>
 80854e2:	498b      	ldr	r1, [pc, #556]	; (8085710 <_Z15outputDataToESPv+0xe1c>)
 80854e4:	a827      	add	r0, sp, #156	; 0x9c
 80854e6:	f005 ff97 	bl	808b418 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80854ea:	4601      	mov	r1, r0
 80854ec:	a806      	add	r0, sp, #24
 80854ee:	f005 ff42 	bl	808b376 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80854f2:	a827      	add	r0, sp, #156	; 0x9c
 80854f4:	f005 fe1a 	bl	808b12c <_ZN6StringD1Ev>
 80854f8:	a81e      	add	r0, sp, #120	; 0x78
 80854fa:	f005 fe17 	bl	808b12c <_ZN6StringD1Ev>
    csv_output_string += String(Time.format(time, "%d/%m/%y,%H:%M:%S"));
 80854fe:	4b86      	ldr	r3, [pc, #536]	; (8085718 <_Z15outputDataToESPv+0xe24>)
 8085500:	463a      	mov	r2, r7
 8085502:	4986      	ldr	r1, [pc, #536]	; (808571c <_Z15outputDataToESPv+0xe28>)
 8085504:	a827      	add	r0, sp, #156	; 0x9c
 8085506:	f006 fb89 	bl	808bc1c <_ZN9TimeClass6formatElPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808550a:	a927      	add	r1, sp, #156	; 0x9c
 808550c:	a806      	add	r0, sp, #24
 808550e:	f005 ff32 	bl	808b376 <_ZN6String6concatERKS_>
 8085512:	a827      	add	r0, sp, #156	; 0x9c
 8085514:	f005 fe0a 	bl	808b12c <_ZN6StringD1Ev>
    cloud_output_string += String(PARTICLE_TIME_PACKET_CONSTANT) + String(Time.now());
 8085518:	2159      	movs	r1, #89	; 0x59
 808551a:	a81a      	add	r0, sp, #104	; 0x68
 808551c:	f005 feb0 	bl	808b280 <_ZN6StringC1Ec>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8085520:	a91a      	add	r1, sp, #104	; 0x68
 8085522:	a827      	add	r0, sp, #156	; 0x9c
 8085524:	f005 fe88 	bl	808b238 <_ZN6StringC1ERKS_>
 8085528:	f006 fbcb 	bl	808bcc2 <_ZN9TimeClass3nowEv>
 808552c:	220a      	movs	r2, #10
 808552e:	4601      	mov	r1, r0
 8085530:	a81e      	add	r0, sp, #120	; 0x78
 8085532:	f005 fec9 	bl	808b2c8 <_ZN6StringC1Elh>
 8085536:	a91e      	add	r1, sp, #120	; 0x78
 8085538:	a827      	add	r0, sp, #156	; 0x9c
 808553a:	f005 ff61 	bl	808b400 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808553e:	4601      	mov	r1, r0
 8085540:	a802      	add	r0, sp, #8
 8085542:	f005 ff18 	bl	808b376 <_ZN6String6concatERKS_>
 8085546:	a81e      	add	r0, sp, #120	; 0x78
 8085548:	f005 fdf0 	bl	808b12c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808554c:	a827      	add	r0, sp, #156	; 0x9c
 808554e:	f005 fded 	bl	808b12c <_ZN6StringD1Ev>
    cloud_output_string += '&';
    if(debugging_enabled){
 8085552:	4c73      	ldr	r4, [pc, #460]	; (8085720 <_Z15outputDataToESPv+0xe2c>)
        cloud_output_string += String(geolocation_accuracy);
    }

    csv_output_string += String(status_word.status_int) + ",";
    csv_output_string += String(Time.format(time, "%d/%m/%y,%H:%M:%S"));
    cloud_output_string += String(PARTICLE_TIME_PACKET_CONSTANT) + String(Time.now());
 8085554:	a81a      	add	r0, sp, #104	; 0x68
 8085556:	f005 fde9 	bl	808b12c <_ZN6StringD1Ev>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
 808555a:	2126      	movs	r1, #38	; 0x26
 808555c:	a802      	add	r0, sp, #8
 808555e:	f005 ff1d 	bl	808b39c <_ZN6String6concatEc>
    cloud_output_string += '&';
    if(debugging_enabled){
 8085562:	6823      	ldr	r3, [r4, #0]
 8085564:	b14b      	cbz	r3, 808557a <_Z15outputDataToESPv+0xc86>
        Serial.println("Line to write to cloud:");
 8085566:	f007 f8bf 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808556a:	496e      	ldr	r1, [pc, #440]	; (8085724 <_Z15outputDataToESPv+0xe30>)
 808556c:	f006 f84d 	bl	808b60a <_ZN5Print7printlnEPKc>
        Serial.println(cloud_output_string);
 8085570:	f007 f8ba 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8085574:	9902      	ldr	r1, [sp, #8]
 8085576:	f006 f848 	bl	808b60a <_ZN5Print7printlnEPKc>
    }
    
    outputToCloud(cloud_output_string, sensible_buf);
 808557a:	a902      	add	r1, sp, #8
 808557c:	a81e      	add	r0, sp, #120	; 0x78
 808557e:	f005 fe5b 	bl	808b238 <_ZN6StringC1ERKS_>
 8085582:	a964      	add	r1, sp, #400	; 0x190
 8085584:	a827      	add	r0, sp, #156	; 0x9c
 8085586:	f005 fe18 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
 808558a:	a927      	add	r1, sp, #156	; 0x9c
 808558c:	a81e      	add	r0, sp, #120	; 0x78
 808558e:	f7fe ffe7 	bl	8084560 <_Z13outputToCloud6StringS_>
 8085592:	a827      	add	r0, sp, #156	; 0x9c
 8085594:	f005 fdca 	bl	808b12c <_ZN6StringD1Ev>
 8085598:	a81e      	add	r0, sp, #120	; 0x78
 808559a:	f005 fdc7 	bl	808b12c <_ZN6StringD1Ev>
    
    if(esp_wifi_connection_status){
 808559e:	4b62      	ldr	r3, [pc, #392]	; (8085728 <_Z15outputDataToESPv+0xe34>)
 80855a0:	681b      	ldr	r3, [r3, #0]
 80855a2:	b1ab      	cbz	r3, 80855d0 <_Z15outputDataToESPv+0xcdc>
        if(debugging_enabled){
 80855a4:	6823      	ldr	r3, [r4, #0]
 80855a6:	b173      	cbz	r3, 80855c6 <_Z15outputDataToESPv+0xcd2>
            Serial.println("Sending data to esp to upload via wifi...");
 80855a8:	f007 f89e 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80855ac:	495f      	ldr	r1, [pc, #380]	; (808572c <_Z15outputDataToESPv+0xe38>)
 80855ae:	f006 f82c 	bl	808b60a <_ZN5Print7printlnEPKc>
            writeLogFile("Sending data to esp to upload via wifi");
 80855b2:	495f      	ldr	r1, [pc, #380]	; (8085730 <_Z15outputDataToESPv+0xe3c>)
 80855b4:	a827      	add	r0, sp, #156	; 0x9c
 80855b6:	f005 fe00 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
 80855ba:	a827      	add	r0, sp, #156	; 0x9c
 80855bc:	f7fc fba4 	bl	8081d08 <_Z12writeLogFile6String>
 80855c0:	a827      	add	r0, sp, #156	; 0x9c
 80855c2:	f005 fdb3 	bl	808b12c <_ZN6StringD1Ev>
          }
        Serial1.println(cloud_output_string);
 80855c6:	f007 f9e7 	bl	808c998 <_Z22__fetch_global_Serial1v>
 80855ca:	9902      	ldr	r1, [sp, #8]
 80855cc:	f006 f81d 	bl	808b60a <_ZN5Print7printlnEPKc>
    }
    Serial.println(csv_output_string);
 80855d0:	f007 f88a 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80855d4:	9906      	ldr	r1, [sp, #24]
 80855d6:	f006 f818 	bl	808b60a <_ZN5Print7printlnEPKc>
 80855da:	4956      	ldr	r1, [pc, #344]	; (8085734 <_Z15outputDataToESPv+0xe40>)
 80855dc:	2302      	movs	r3, #2
 80855de:	220c      	movs	r2, #12
 80855e0:	f5a1 608e 	sub.w	r0, r1, #1136	; 0x470
 80855e4:	f7fb fc6a 	bl	8080ebc <_ZN9SdFatBase5beginEP9SdSpiBasehh>

    //write data to file
    if (sd.begin(CS)){
 80855e8:	2800      	cmp	r0, #0
 80855ea:	d036      	beq.n	808565a <_Z15outputDataToESPv+0xd66>
        if(debugging_enabled)
 80855ec:	6823      	ldr	r3, [r4, #0]
 80855ee:	b123      	cbz	r3, 80855fa <_Z15outputDataToESPv+0xd06>
            Serial.println("Writing row to file.");
 80855f0:	f007 f87a 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80855f4:	4950      	ldr	r1, [pc, #320]	; (8085738 <_Z15outputDataToESPv+0xe44>)
 80855f6:	f006 f808 	bl	808b60a <_ZN5Print7printlnEPKc>
 80855fa:	4a50      	ldr	r2, [pc, #320]	; (808573c <_Z15outputDataToESPv+0xe48>)
 80855fc:	4950      	ldr	r1, [pc, #320]	; (8085740 <_Z15outputDataToESPv+0xe4c>)
        file.open(fileName, O_CREAT | O_APPEND | O_WRITE);
        if(file_started == 0){
 80855fe:	4c51      	ldr	r4, [pc, #324]	; (8085744 <_Z15outputDataToESPv+0xe50>)
 8085600:	2346      	movs	r3, #70	; 0x46
 8085602:	6812      	ldr	r2, [r2, #0]
 8085604:	6809      	ldr	r1, [r1, #0]
 8085606:	4850      	ldr	r0, [pc, #320]	; (8085748 <_Z15outputDataToESPv+0xe54>)
 8085608:	f003 f91d 	bl	8088846 <_ZN7FatFile4openEPS_PKch>
 808560c:	6823      	ldr	r3, [r4, #0]
 808560e:	b9eb      	cbnz	r3, 808564c <_Z15outputDataToESPv+0xd58>
            file.println("File Start timestamp: ");
 8085610:	494e      	ldr	r1, [pc, #312]	; (808574c <_Z15outputDataToESPv+0xe58>)
 8085612:	484f      	ldr	r0, [pc, #316]	; (8085750 <_Z15outputDataToESPv+0xe5c>)
 8085614:	f005 fff9 	bl	808b60a <_ZN5Print7printlnEPKc>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
 8085618:	f006 fb53 	bl	808bcc2 <_ZN9TimeClass3nowEv>
 808561c:	4601      	mov	r1, r0
 808561e:	a827      	add	r0, sp, #156	; 0x9c
 8085620:	f006 fa7c 	bl	808bb1c <_ZN9TimeClass7timeStrEl>
            file.println(Time.timeStr());
 8085624:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8085626:	484a      	ldr	r0, [pc, #296]	; (8085750 <_Z15outputDataToESPv+0xe5c>)
 8085628:	f005 ffef 	bl	808b60a <_ZN5Print7printlnEPKc>
 808562c:	a827      	add	r0, sp, #156	; 0x9c
 808562e:	f005 fd7d 	bl	808b12c <_ZN6StringD1Ev>
            file.println(String(HEADER_STRING));
 8085632:	4948      	ldr	r1, [pc, #288]	; (8085754 <_Z15outputDataToESPv+0xe60>)
 8085634:	a827      	add	r0, sp, #156	; 0x9c
 8085636:	f005 fdc0 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
 808563a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 808563c:	4844      	ldr	r0, [pc, #272]	; (8085750 <_Z15outputDataToESPv+0xe5c>)
 808563e:	f005 ffe4 	bl	808b60a <_ZN5Print7printlnEPKc>
 8085642:	a827      	add	r0, sp, #156	; 0x9c
 8085644:	f005 fd72 	bl	808b12c <_ZN6StringD1Ev>
            file_started = 1;
 8085648:	2301      	movs	r3, #1
 808564a:	6023      	str	r3, [r4, #0]
        }
        file.println(csv_output_string);
 808564c:	9906      	ldr	r1, [sp, #24]
 808564e:	4840      	ldr	r0, [pc, #256]	; (8085750 <_Z15outputDataToESPv+0xe5c>)
 8085650:	f005 ffdb 	bl	808b60a <_ZN5Print7printlnEPKc>

        file.close();
 8085654:	483c      	ldr	r0, [pc, #240]	; (8085748 <_Z15outputDataToESPv+0xe54>)
 8085656:	f003 f8ef 	bl	8088838 <_ZN7FatFile5closeEv>
        //byte 0 - version
        ble_output_array[0 + i*(BLE_PAYLOAD_SIZE)] = 1;

        //bytes 1,2 - Device ID
        //DEVICE_id = 555;
        wordBytes.myWord = DEVICE_id;
 808565a:	4f3f      	ldr	r7, [pc, #252]	; (8085758 <_Z15outputDataToESPv+0xe64>)
 808565c:	f10d 049d 	add.w	r4, sp, #157	; 0x9d
  }else{
    Serial.println("Unable to write to log file");
  }
}

void outputDataToESP(void){
 8085660:	2500      	movs	r5, #0
    for(int i=0; i<NUMBER_OF_SPECIES; i++){

        //************Fill the ble output array**********************//
        //Serial.printf("making array[%d]\n", i);
        //byte 0 - version
        ble_output_array[0 + i*(BLE_PAYLOAD_SIZE)] = 1;
 8085662:	2301      	movs	r3, #1
 8085664:	f804 3c01 	strb.w	r3, [r4, #-1]

        //bytes 1,2 - Device ID
        //DEVICE_id = 555;
        wordBytes.myWord = DEVICE_id;
 8085668:	683b      	ldr	r3, [r7, #0]
        ble_output_array[1 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 808566a:	7023      	strb	r3, [r4, #0]
        ble_output_array[2 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 808566c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8085670:	7063      	strb	r3, [r4, #1]

        //byte 3 - Measurement number
        ble_output_array[3 + i*(BLE_PAYLOAD_SIZE)] = sample_counter;
 8085672:	4b3a      	ldr	r3, [pc, #232]	; (808575c <_Z15outputDataToESPv+0xe68>)
 8085674:	681b      	ldr	r3, [r3, #0]
 8085676:	70a3      	strb	r3, [r4, #2]
        11-sound_average



        */
        if(i == 0){
 8085678:	b91d      	cbnz	r5, 8085682 <_Z15outputDataToESPv+0xd8e>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = CARBON_MONOXIDE_PACKET_CONSTANT;
 808567a:	234d      	movs	r3, #77	; 0x4d
 808567c:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = CO_float;
 808567e:	4b38      	ldr	r3, [pc, #224]	; (8085760 <_Z15outputDataToESPv+0xe6c>)
 8085680:	e083      	b.n	808578a <_Z15outputDataToESPv+0xe96>
        }else if(i == 1){
 8085682:	2d01      	cmp	r5, #1
 8085684:	d103      	bne.n	808568e <_Z15outputDataToESPv+0xd9a>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = CARBON_DIOXIDE_PACKET_CONSTANT;
 8085686:	2343      	movs	r3, #67	; 0x43
 8085688:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = CO2_float;
 808568a:	4b36      	ldr	r3, [pc, #216]	; (8085764 <_Z15outputDataToESPv+0xe70>)
 808568c:	e07d      	b.n	808578a <_Z15outputDataToESPv+0xe96>
        }else if(i == 2){
 808568e:	2d02      	cmp	r5, #2
 8085690:	d105      	bne.n	808569e <_Z15outputDataToESPv+0xdaa>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = BATTERY_PACKET_CONSTANT;
 8085692:	2378      	movs	r3, #120	; 0x78
 8085694:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = fuel.getSoC();
 8085696:	4834      	ldr	r0, [pc, #208]	; (8085768 <_Z15outputDataToESPv+0xe74>)
 8085698:	f006 fbd4 	bl	808be44 <_ZN9FuelGauge6getSoCEv>
 808569c:	e076      	b.n	808578c <_Z15outputDataToESPv+0xe98>
        }else if(i == 3){
 808569e:	2d03      	cmp	r5, #3
 80856a0:	d103      	bne.n	80856aa <_Z15outputDataToESPv+0xdb6>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM1_PACKET_CONSTANT;
 80856a2:	2372      	movs	r3, #114	; 0x72
 80856a4:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = PM01Value;
 80856a6:	4b31      	ldr	r3, [pc, #196]	; (808576c <_Z15outputDataToESPv+0xe78>)
 80856a8:	e00a      	b.n	80856c0 <_Z15outputDataToESPv+0xdcc>
        }else if(i == 4){
 80856aa:	2d04      	cmp	r5, #4
 80856ac:	d103      	bne.n	80856b6 <_Z15outputDataToESPv+0xdc2>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM2PT5_PACKET_CONSTANT;
 80856ae:	2352      	movs	r3, #82	; 0x52
 80856b0:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = corrected_PM_25;
 80856b2:	4b2f      	ldr	r3, [pc, #188]	; (8085770 <_Z15outputDataToESPv+0xe7c>)
 80856b4:	e069      	b.n	808578a <_Z15outputDataToESPv+0xe96>
        }else if(i == 5){
 80856b6:	2d05      	cmp	r5, #5
 80856b8:	d106      	bne.n	80856c8 <_Z15outputDataToESPv+0xdd4>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM10_PACKET_CONSTANT;
 80856ba:	2371      	movs	r3, #113	; 0x71
 80856bc:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = PM10Value;
 80856be:	4b2d      	ldr	r3, [pc, #180]	; (8085774 <_Z15outputDataToESPv+0xe80>)
 80856c0:	6818      	ldr	r0, [r3, #0]
 80856c2:	f008 fb77 	bl	808ddb4 <__aeabi_i2f>
 80856c6:	e061      	b.n	808578c <_Z15outputDataToESPv+0xe98>
        }else if(i == 6){
 80856c8:	2d06      	cmp	r5, #6
 80856ca:	d104      	bne.n	80856d6 <_Z15outputDataToESPv+0xde2>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = TEMPERATURE_PACKET_CONSTANT;
 80856cc:	2374      	movs	r3, #116	; 0x74
 80856ce:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = readTemperature();
 80856d0:	f7fb ff8a 	bl	80815e8 <_Z15readTemperaturev>
 80856d4:	e05a      	b.n	808578c <_Z15outputDataToESPv+0xe98>
        }else if(i == 7){
 80856d6:	2d07      	cmp	r5, #7
 80856d8:	d107      	bne.n	80856ea <_Z15outputDataToESPv+0xdf6>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PRESSURE_PACKET_CONSTANT;
 80856da:	2350      	movs	r3, #80	; 0x50
 80856dc:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = bme.pressure / 100.0;
 80856de:	4b26      	ldr	r3, [pc, #152]	; (8085778 <_Z15outputDataToESPv+0xe84>)
 80856e0:	4926      	ldr	r1, [pc, #152]	; (808577c <_Z15outputDataToESPv+0xe88>)
 80856e2:	6858      	ldr	r0, [r3, #4]
 80856e4:	f008 fc6e 	bl	808dfc4 <__aeabi_fdiv>
 80856e8:	e050      	b.n	808578c <_Z15outputDataToESPv+0xe98>
        }else if(i == 8){
 80856ea:	2d08      	cmp	r5, #8
 80856ec:	d104      	bne.n	80856f8 <_Z15outputDataToESPv+0xe04>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = HUMIDITY_PACKET_CONSTANT;
 80856ee:	2368      	movs	r3, #104	; 0x68
 80856f0:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = readHumidity();
 80856f2:	f7fb fff7 	bl	80816e4 <_Z12readHumidityv>
 80856f6:	e049      	b.n	808578c <_Z15outputDataToESPv+0xe98>
        }else if(i == 9){
 80856f8:	2d09      	cmp	r5, #9
 80856fa:	d143      	bne.n	8085784 <_Z15outputDataToESPv+0xe90>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = SOUND_PACKET_CONSTANT;
 80856fc:	2373      	movs	r3, #115	; 0x73
 80856fe:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = sound_average;
 8085700:	4b1f      	ldr	r3, [pc, #124]	; (8085780 <_Z15outputDataToESPv+0xe8c>)
 8085702:	e9d3 0100 	ldrd	r0, r1, [r3]
 8085706:	f008 fa4b 	bl	808dba0 <__aeabi_d2f>
 808570a:	e03f      	b.n	808578c <_Z15outputDataToESPv+0xe98>
 808570c:	20000480 	.word	0x20000480
 8085710:	08093eda 	.word	0x08093eda
 8085714:	20000f84 	.word	0x20000f84
 8085718:	08093208 	.word	0x08093208
 808571c:	2000111c 	.word	0x2000111c
 8085720:	20000f08 	.word	0x20000f08
 8085724:	0809321a 	.word	0x0809321a
 8085728:	20000640 	.word	0x20000640
 808572c:	08093232 	.word	0x08093232
 8085730:	0809325c 	.word	0x0809325c
 8085734:	20000ab4 	.word	0x20000ab4
 8085738:	08093283 	.word	0x08093283
 808573c:	20000eec 	.word	0x20000eec
 8085740:	20000fd8 	.word	0x20000fd8
 8085744:	20000ac4 	.word	0x20000ac4
 8085748:	20000ad0 	.word	0x20000ad0
 808574c:	08091b4b 	.word	0x08091b4b
 8085750:	20000ac8 	.word	0x20000ac8
 8085754:	08093298 	.word	0x08093298
 8085758:	20000488 	.word	0x20000488
 808575c:	20000b80 	.word	0x20000b80
 8085760:	20000f14 	.word	0x20000f14
 8085764:	20000630 	.word	0x20000630
 8085768:	20000cc4 	.word	0x20000cc4
 808576c:	20000cd4 	.word	0x20000cd4
 8085770:	20000db0 	.word	0x20000db0
 8085774:	20000f2c 	.word	0x20000f2c
 8085778:	20000b04 	.word	0x20000b04
 808577c:	42c80000 	.word	0x42c80000
 8085780:	20000f20 	.word	0x20000f20
        }else if(i == 10){
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = VOC_PACKET_CONSTANT;
 8085784:	2367      	movs	r3, #103	; 0x67
 8085786:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = air_quality_score;
 8085788:	4b34      	ldr	r3, [pc, #208]	; (808585c <_Z15outputDataToESPv+0xf68>)
 808578a:	6818      	ldr	r0, [r3, #0]
            floatBytes.myFloat = O3_float;
        }*/

        //bytes 5,6,7,8 - Measurement Value
        ble_output_array[5 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[0];
        ble_output_array[6 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
 808578c:	f3c0 2307 	ubfx	r3, r0, #8, #8
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = OZONE_PACKET_CONSTANT;
            floatBytes.myFloat = O3_float;
        }*/

        //bytes 5,6,7,8 - Measurement Value
        ble_output_array[5 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[0];
 8085790:	7120      	strb	r0, [r4, #4]
        ble_output_array[6 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
 8085792:	7163      	strb	r3, [r4, #5]
        ble_output_array[7 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[2];
 8085794:	f3c0 4307 	ubfx	r3, r0, #16, #8
        ble_output_array[8 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[3];
 8085798:	f3c0 6007 	ubfx	r0, r0, #24, #8
        }*/

        //bytes 5,6,7,8 - Measurement Value
        ble_output_array[5 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[0];
        ble_output_array[6 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
        ble_output_array[7 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[2];
 808579c:	71a3      	strb	r3, [r4, #6]
        ble_output_array[8 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[3];
 808579e:	71e0      	strb	r0, [r4, #7]


        //bytes 9-12 - latitude
        wordBytes.myWord = gps.get_latitudeWhole();
 80857a0:	482f      	ldr	r0, [pc, #188]	; (8085860 <_Z15outputDataToESPv+0xf6c>)
 80857a2:	f001 fe18 	bl	80873d6 <_ZN3GPS17get_latitudeWholeEv>
        ble_output_array[9 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 80857a6:	7220      	strb	r0, [r4, #8]
        ble_output_array[10 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 80857a8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80857ac:	7260      	strb	r0, [r4, #9]

        wordBytes.myWord = gps.get_latitudeFrac();
 80857ae:	482c      	ldr	r0, [pc, #176]	; (8085860 <_Z15outputDataToESPv+0xf6c>)
 80857b0:	f001 fe14 	bl	80873dc <_ZN3GPS16get_latitudeFracEv>
        ble_output_array[11 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 80857b4:	72a0      	strb	r0, [r4, #10]
        ble_output_array[12 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 80857b6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80857ba:	72e0      	strb	r0, [r4, #11]

        //bytes 14-17 - longitude
        wordBytes.myWord = gps.get_longitudeWhole();
 80857bc:	4828      	ldr	r0, [pc, #160]	; (8085860 <_Z15outputDataToESPv+0xf6c>)
 80857be:	f001 fe10 	bl	80873e2 <_ZN3GPS18get_longitudeWholeEv>
        ble_output_array[13 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 80857c2:	7320      	strb	r0, [r4, #12]
        ble_output_array[14 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 80857c4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80857c8:	7360      	strb	r0, [r4, #13]

        wordBytes.myWord = gps.get_longitudeFrac();
 80857ca:	4825      	ldr	r0, [pc, #148]	; (8085860 <_Z15outputDataToESPv+0xf6c>)
 80857cc:	f001 fe0c 	bl	80873e8 <_ZN3GPS17get_longitudeFracEv>
        ble_output_array[15 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 80857d0:	73a0      	strb	r0, [r4, #14]
        ble_output_array[16 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 80857d2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80857d6:	73e0      	strb	r0, [r4, #15]


        //byte 18 - east west and north south indicator
        //  LSB 0 = East, LSB 1 = West
        //  MSB 0 = South, MSB 1 = North
        int northSouth = gps.get_nsIndicator();
 80857d8:	4821      	ldr	r0, [pc, #132]	; (8085860 <_Z15outputDataToESPv+0xf6c>)
 80857da:	f001 fe08 	bl	80873ee <_ZN3GPS15get_nsIndicatorEv>
 80857de:	4680      	mov	r8, r0
        int eastWest = gps.get_ewIndicator();
 80857e0:	481f      	ldr	r0, [pc, #124]	; (8085860 <_Z15outputDataToESPv+0xf6c>)
 80857e2:	f001 fe07 	bl	80873f4 <_ZN3GPS15get_ewIndicatorEv>

        ble_output_array[17 + i*(BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
 80857e6:	ea48 0000 	orr.w	r0, r8, r0
 80857ea:	7420      	strb	r0, [r4, #16]
        ble_output_array[18 + i*(BLE_PAYLOAD_SIZE)] = gps.get_horizontalDillution();
 80857ec:	481c      	ldr	r0, [pc, #112]	; (8085860 <_Z15outputDataToESPv+0xf6c>)
 80857ee:	f001 fded 	bl	80873cc <_ZN3GPS23get_horizontalDillutionEv>
        ble_output_array[19 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[1];
 80857f2:	7873      	ldrb	r3, [r6, #1]
    //we are using binary for the ble packets so we can compress the data into 19 bytes for the small payload

    byte ble_output_array[NUMBER_OF_SPECIES*BLE_PAYLOAD_SIZE];     //19 bytes per data line and 12 species to output


    for(int i=0; i<NUMBER_OF_SPECIES; i++){
 80857f4:	3501      	adds	r5, #1
        int northSouth = gps.get_nsIndicator();
        int eastWest = gps.get_ewIndicator();

        ble_output_array[17 + i*(BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
        ble_output_array[18 + i*(BLE_PAYLOAD_SIZE)] = gps.get_horizontalDillution();
        ble_output_array[19 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[1];
 80857f6:	74a3      	strb	r3, [r4, #18]
        ble_output_array[20 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[0];
 80857f8:	7833      	ldrb	r3, [r6, #0]
    //we are using binary for the ble packets so we can compress the data into 19 bytes for the small payload

    byte ble_output_array[NUMBER_OF_SPECIES*BLE_PAYLOAD_SIZE];     //19 bytes per data line and 12 species to output


    for(int i=0; i<NUMBER_OF_SPECIES; i++){
 80857fa:	2d0b      	cmp	r5, #11
        int eastWest = gps.get_ewIndicator();

        ble_output_array[17 + i*(BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
        ble_output_array[18 + i*(BLE_PAYLOAD_SIZE)] = gps.get_horizontalDillution();
        ble_output_array[19 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[1];
        ble_output_array[20 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[0];
 80857fc:	74e3      	strb	r3, [r4, #19]

        ble_output_array[21 + i*(BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species
 80857fe:	f04f 0323 	mov.w	r3, #35	; 0x23
        //  MSB 0 = South, MSB 1 = North
        int northSouth = gps.get_nsIndicator();
        int eastWest = gps.get_ewIndicator();

        ble_output_array[17 + i*(BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
        ble_output_array[18 + i*(BLE_PAYLOAD_SIZE)] = gps.get_horizontalDillution();
 8085802:	7460      	strb	r0, [r4, #17]
        ble_output_array[19 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[1];
        ble_output_array[20 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[0];

        ble_output_array[21 + i*(BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species
 8085804:	7523      	strb	r3, [r4, #20]
 8085806:	f104 0416 	add.w	r4, r4, #22
    //we are using binary for the ble packets so we can compress the data into 19 bytes for the small payload

    byte ble_output_array[NUMBER_OF_SPECIES*BLE_PAYLOAD_SIZE];     //19 bytes per data line and 12 species to output


    for(int i=0; i<NUMBER_OF_SPECIES; i++){
 808580a:	f47f af2a 	bne.w	8085662 <_Z15outputDataToESPv+0xd6e>
        ble_output_array[21 + i*(BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species

    }

    //send start delimeter to ESP
    Serial1.print("$");
 808580e:	f007 f8c3 	bl	808c998 <_Z22__fetch_global_Serial1v>
 8085812:	4914      	ldr	r1, [pc, #80]	; (8085864 <_Z15outputDataToESPv+0xf70>)
 8085814:	f005 fee6 	bl	808b5e4 <_ZN5Print5printEPKc>
    //send the packaged data with # delimeters in between packets
    Serial1.write(ble_output_array, NUMBER_OF_SPECIES*BLE_PAYLOAD_SIZE);
 8085818:	f007 f8be 	bl	808c998 <_Z22__fetch_global_Serial1v>
 808581c:	6803      	ldr	r3, [r0, #0]
 808581e:	22f2      	movs	r2, #242	; 0xf2
 8085820:	68db      	ldr	r3, [r3, #12]
 8085822:	a927      	add	r1, sp, #156	; 0x9c
 8085824:	4798      	blx	r3

    //send ending delimeter
    Serial1.print("&");
 8085826:	f007 f8b7 	bl	808c998 <_Z22__fetch_global_Serial1v>
 808582a:	490f      	ldr	r1, [pc, #60]	; (8085868 <_Z15outputDataToESPv+0xf74>)
 808582c:	f005 feda 	bl	808b5e4 <_ZN5Print5printEPKc>



    JSONBufferWriter writer(sensible_buf, sizeof(sensible_buf) - 1);
    writer.beginObject();
    String device_string = "PAM-" + String(DEVICE_id);
 8085830:	a816      	add	r0, sp, #88	; 0x58
 8085832:	f005 fc7b 	bl	808b12c <_ZN6StringD1Ev>
    //"$1:D555g47.7M-22.050533C550.866638r1R1q2T45.8P844.9h17.2s1842.700000&"
    String cloud_output_string = "";    //create a clean string
    String csv_output_string = "";
    String sensible_string = "";
    String latitude_string = "";
    String longitude_string = "";
 8085836:	a812      	add	r0, sp, #72	; 0x48
 8085838:	f005 fc78 	bl	808b12c <_ZN6StringD1Ev>
    //This is different than the ble packet in that we are putting all of the data that we have in one packet
    //"$1:D555g47.7M-22.050533C550.866638r1R1q2T45.8P844.9h17.2s1842.700000&"
    String cloud_output_string = "";    //create a clean string
    String csv_output_string = "";
    String sensible_string = "";
    String latitude_string = "";
 808583c:	a80e      	add	r0, sp, #56	; 0x38
 808583e:	f005 fc75 	bl	808b12c <_ZN6StringD1Ev>
    //************Fill the cloud output array and file output array for row in csv file on usd card*****************************/
    //This is different than the ble packet in that we are putting all of the data that we have in one packet
    //"$1:D555g47.7M-22.050533C550.866638r1R1q2T45.8P844.9h17.2s1842.700000&"
    String cloud_output_string = "";    //create a clean string
    String csv_output_string = "";
    String sensible_string = "";
 8085842:	a80a      	add	r0, sp, #40	; 0x28
 8085844:	f005 fc72 	bl	808b12c <_ZN6StringD1Ev>

    //************Fill the cloud output array and file output array for row in csv file on usd card*****************************/
    //This is different than the ble packet in that we are putting all of the data that we have in one packet
    //"$1:D555g47.7M-22.050533C550.866638r1R1q2T45.8P844.9h17.2s1842.700000&"
    String cloud_output_string = "";    //create a clean string
    String csv_output_string = "";
 8085848:	a806      	add	r0, sp, #24
 808584a:	f005 fc6f 	bl	808b12c <_ZN6StringD1Ev>
    }*/

    //************Fill the cloud output array and file output array for row in csv file on usd card*****************************/
    //This is different than the ble packet in that we are putting all of the data that we have in one packet
    //"$1:D555g47.7M-22.050533C550.866638r1R1q2T45.8P844.9h17.2s1842.700000&"
    String cloud_output_string = "";    //create a clean string
 808584e:	a802      	add	r0, sp, #8
 8085850:	f005 fc6c 	bl	808b12c <_ZN6StringD1Ev>
        if(ble_output_array[i]=='#')
            Serial.printf("\n\r");
    }
    Serial.println("End of array");*/

}
 8085854:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8085858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808585c:	20000f18 	.word	0x20000f18
 8085860:	20000d78 	.word	0x20000d78
 8085864:	08091c91 	.word	0x08091c91
 8085868:	08091be6 	.word	0x08091be6

0808586c <_ZN5Print6printfIIfEEEjPKcDpT_>:
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
 808586c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808586e:	4604      	mov	r4, r0
    {
        return this->printf_impl(false, format, args...);
 8085870:	4610      	mov	r0, r2
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
 8085872:	460d      	mov	r5, r1
    {
        return this->printf_impl(false, format, args...);
 8085874:	f007 fe48 	bl	808d508 <__aeabi_f2d>
 8085878:	462a      	mov	r2, r5
 808587a:	e9cd 0100 	strd	r0, r1, [sp]
 808587e:	2100      	movs	r1, #0
 8085880:	4620      	mov	r0, r4
 8085882:	f005 fff7 	bl	808b874 <_ZN5Print11printf_implEbPKcz>
    }
 8085886:	b003      	add	sp, #12
 8085888:	bd30      	pop	{r4, r5, pc}

0808588a <_ZN5Print6printfIIiEEEjPKcDpT_>:
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 808588a:	4613      	mov	r3, r2
 808588c:	460a      	mov	r2, r1
 808588e:	2100      	movs	r1, #0
 8085890:	f005 bff0 	b.w	808b874 <_ZN5Print11printf_implEbPKcz>
 8085894:	0000      	movs	r0, r0
	...

08085898 <_Z15getEspOzoneDatav>:
    Serial.println("Sending new wifi credentials to ESP");
    Serial1.println(wifiCredentials);
    Serial.println("Success!");
}

float getEspOzoneData(void){
 8085898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808589c:	b0ab      	sub	sp, #172	; 0xac
    float ozone_value = 0.0;
    String getOzoneData = "Z&";
 808589e:	4986      	ldr	r1, [pc, #536]	; (8085ab8 <_Z15getEspOzoneDatav+0x220>)
 80858a0:	a802      	add	r0, sp, #8
 80858a2:	f005 fc8a 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
    String recievedData = " ";
    bool timeOut = false;
    double counterIndex = 0;
    //if esp doesn't answer, keep going
    Serial1.setTimeout(3000);
    if(debugging_enabled){
 80858a6:	4d85      	ldr	r5, [pc, #532]	; (8085abc <_Z15getEspOzoneDatav+0x224>)
}

float getEspOzoneData(void){
    float ozone_value = 0.0;
    String getOzoneData = "Z&";
    String recievedData = " ";
 80858a8:	4985      	ldr	r1, [pc, #532]	; (8085ac0 <_Z15getEspOzoneDatav+0x228>)
 80858aa:	a806      	add	r0, sp, #24
 80858ac:	f005 fc85 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
    bool timeOut = false;
    double counterIndex = 0;
    //if esp doesn't answer, keep going
    Serial1.setTimeout(3000);
 80858b0:	f007 f872 	bl	808c998 <_Z22__fetch_global_Serial1v>
 80858b4:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80858b8:	f006 f82b 	bl	808b912 <_ZN6Stream10setTimeoutEm>
    if(debugging_enabled){
 80858bc:	682b      	ldr	r3, [r5, #0]
 80858be:	b173      	cbz	r3, 80858de <_Z15getEspOzoneDatav+0x46>
        Serial.println("Getting ozone data from esp");
 80858c0:	f006 ff12 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80858c4:	497f      	ldr	r1, [pc, #508]	; (8085ac4 <_Z15getEspOzoneDatav+0x22c>)
 80858c6:	f005 fea0 	bl	808b60a <_ZN5Print7printlnEPKc>
        writeLogFile("Getting ozone data from esp");
 80858ca:	497e      	ldr	r1, [pc, #504]	; (8085ac4 <_Z15getEspOzoneDatav+0x22c>)
 80858cc:	a80e      	add	r0, sp, #56	; 0x38
 80858ce:	f005 fc74 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
 80858d2:	a80e      	add	r0, sp, #56	; 0x38
 80858d4:	f7fc fa18 	bl	8081d08 <_Z12writeLogFile6String>
 80858d8:	a80e      	add	r0, sp, #56	; 0x38
 80858da:	f005 fc27 	bl	808b12c <_ZN6StringD1Ev>
      }
    Serial1.print(getOzoneData);
 80858de:	f007 f85b 	bl	808c998 <_Z22__fetch_global_Serial1v>
 80858e2:	9902      	ldr	r1, [sp, #8]
 80858e4:	f005 fe7e 	bl	808b5e4 <_ZN5Print5printEPKc>
float getEspOzoneData(void){
    float ozone_value = 0.0;
    String getOzoneData = "Z&";
    String recievedData = " ";
    bool timeOut = false;
    double counterIndex = 0;
 80858e8:	2600      	movs	r6, #0
 80858ea:	2700      	movs	r7, #0

float getEspOzoneData(void){
    float ozone_value = 0.0;
    String getOzoneData = "Z&";
    String recievedData = " ";
    bool timeOut = false;
 80858ec:	2400      	movs	r4, #0
    if(debugging_enabled){
        Serial.println("Getting ozone data from esp");
        writeLogFile("Getting ozone data from esp");
      }
    Serial1.print(getOzoneData);
    while(!Serial1.available() && timeOut == false){
 80858ee:	f007 f853 	bl	808c998 <_Z22__fetch_global_Serial1v>
 80858f2:	6803      	ldr	r3, [r0, #0]
 80858f4:	691b      	ldr	r3, [r3, #16]
 80858f6:	4798      	blx	r3
 80858f8:	b9e0      	cbnz	r0, 8085934 <_Z15getEspOzoneDatav+0x9c>
 80858fa:	b9dc      	cbnz	r4, 8085934 <_Z15getEspOzoneDatav+0x9c>
      //delay(1);
      counterIndex++;
 80858fc:	2200      	movs	r2, #0
 80858fe:	4b72      	ldr	r3, [pc, #456]	; (8085ac8 <_Z15getEspOzoneDatav+0x230>)
 8085900:	4630      	mov	r0, r6
 8085902:	4639      	mov	r1, r7
 8085904:	f007 fca2 	bl	808d24c <__adddf3>
      if(counterIndex > MAX_COUNTER_INDEX){
 8085908:	a369      	add	r3, pc, #420	; (adr r3, 8085ab0 <_Z15getEspOzoneDatav+0x218>)
 808590a:	e9d3 2300 	ldrd	r2, r3, [r3]
        writeLogFile("Getting ozone data from esp");
      }
    Serial1.print(getOzoneData);
    while(!Serial1.available() && timeOut == false){
      //delay(1);
      counterIndex++;
 808590e:	4606      	mov	r6, r0
 8085910:	460f      	mov	r7, r1
      if(counterIndex > MAX_COUNTER_INDEX){
 8085912:	f008 f8dd 	bl	808dad0 <__aeabi_dcmpgt>
 8085916:	2800      	cmp	r0, #0
 8085918:	d0e9      	beq.n	80858ee <_Z15getEspOzoneDatav+0x56>
        if(debugging_enabled){
 808591a:	682b      	ldr	r3, [r5, #0]
 808591c:	b90b      	cbnz	r3, 8085922 <_Z15getEspOzoneDatav+0x8a>
          Serial.printf("Unable to get ozone data from ESP, counter index: %1.1f\n\r", counterIndex);
        }
        timeOut = true;
 808591e:	2401      	movs	r4, #1
 8085920:	e7e5      	b.n	80858ee <_Z15getEspOzoneDatav+0x56>
    while(!Serial1.available() && timeOut == false){
      //delay(1);
      counterIndex++;
      if(counterIndex > MAX_COUNTER_INDEX){
        if(debugging_enabled){
          Serial.printf("Unable to get ozone data from ESP, counter index: %1.1f\n\r", counterIndex);
 8085922:	f006 fee1 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8085926:	e9cd 6700 	strd	r6, r7, [sp]
 808592a:	4a68      	ldr	r2, [pc, #416]	; (8085acc <_Z15getEspOzoneDatav+0x234>)
 808592c:	4621      	mov	r1, r4
 808592e:	f005 ffa1 	bl	808b874 <_ZN5Print11printf_implEbPKcz>
 8085932:	e7f4      	b.n	808591e <_Z15getEspOzoneDatav+0x86>
        timeOut = true;
      }
    }


    delay(10);
 8085934:	200a      	movs	r0, #10
 8085936:	f006 fa11 	bl	808bd5c <delay>

    recievedData = Serial1.readString();
 808593a:	f007 f82d 	bl	808c998 <_Z22__fetch_global_Serial1v>
 808593e:	ac0e      	add	r4, sp, #56	; 0x38
 8085940:	4601      	mov	r1, r0
 8085942:	4620      	mov	r0, r4
 8085944:	f006 f83e 	bl	808b9c4 <_ZN6Stream10readStringEv>
 8085948:	4621      	mov	r1, r4
 808594a:	a806      	add	r0, sp, #24
 808594c:	f005 fc7f 	bl	808b24e <_ZN6StringaSEOS_>
 8085950:	4620      	mov	r0, r4
 8085952:	f005 fbeb 	bl	808b12c <_ZN6StringD1Ev>
    //recievedData = "0.1,1.2,3.3,4.5,1.234,10/12/18,9:22:18";
    if(debugging_enabled)
 8085956:	682b      	ldr	r3, [r5, #0]
 8085958:	b19b      	cbz	r3, 8085982 <_Z15getEspOzoneDatav+0xea>
    {
        Serial.print("RECIEVED DATA FROM ESP: ");
 808595a:	f006 fec5 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808595e:	495c      	ldr	r1, [pc, #368]	; (8085ad0 <_Z15getEspOzoneDatav+0x238>)
 8085960:	f005 fe40 	bl	808b5e4 <_ZN5Print5printEPKc>
        Serial.println(recievedData);
 8085964:	f006 fec0 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8085968:	9906      	ldr	r1, [sp, #24]
 808596a:	f005 fe4e 	bl	808b60a <_ZN5Print7printlnEPKc>
        writeLogFile("Recieved data from ESP");
 808596e:	4959      	ldr	r1, [pc, #356]	; (8085ad4 <_Z15getEspOzoneDatav+0x23c>)
 8085970:	4620      	mov	r0, r4
 8085972:	f005 fc22 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
 8085976:	4620      	mov	r0, r4
 8085978:	f7fc f9c6 	bl	8081d08 <_Z12writeLogFile6String>
 808597c:	4620      	mov	r0, r4
 808597e:	f005 fbd5 	bl	808b12c <_ZN6StringD1Ev>

float getEspOzoneData(void){
    float ozone_value = 0.0;
    String getOzoneData = "Z&";
    String recievedData = " ";
    bool timeOut = false;
 8085982:	2600      	movs	r6, #0
    //parse data if not null
    int comma_count = 0;
    int from_index = 0;
    int index_of_comma = 0;
    bool still_searching_for_commas = true;
    String stringArray[NUMBER_OF_FEILDS];
 8085984:	19a0      	adds	r0, r4, r6
 8085986:	4954      	ldr	r1, [pc, #336]	; (8085ad8 <_Z15getEspOzoneDatav+0x240>)
 8085988:	3610      	adds	r6, #16
 808598a:	f005 fc16 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
 808598e:	2e70      	cmp	r6, #112	; 0x70
 8085990:	d1f8      	bne.n	8085984 <_Z15getEspOzoneDatav+0xec>
 8085992:	2700      	movs	r7, #0
 8085994:	463e      	mov	r6, r7

    while(still_searching_for_commas && comma_count < NUMBER_OF_FEILDS){
        //Serial.printf("From index: %d\n\r", from_index);

        index_of_comma = recievedData.indexOf(',', from_index);
 8085996:	463a      	mov	r2, r7
 8085998:	212c      	movs	r1, #44	; 0x2c
 808599a:	a806      	add	r0, sp, #24
 808599c:	f005 fd9e 	bl	808b4dc <_ZNK6String7indexOfEcj>
        if(debugging_enabled){
 80859a0:	682b      	ldr	r3, [r5, #0]
    String stringArray[NUMBER_OF_FEILDS];

    while(still_searching_for_commas && comma_count < NUMBER_OF_FEILDS){
        //Serial.printf("From index: %d\n\r", from_index);

        index_of_comma = recievedData.indexOf(',', from_index);
 80859a2:	4680      	mov	r8, r0
        if(debugging_enabled){
 80859a4:	b153      	cbz	r3, 80859bc <_Z15getEspOzoneDatav+0x124>
          Serial.print("comma index: ");
 80859a6:	f006 fe9f 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80859aa:	494c      	ldr	r1, [pc, #304]	; (8085adc <_Z15getEspOzoneDatav+0x244>)
 80859ac:	f005 fe1a 	bl	808b5e4 <_ZN5Print5printEPKc>
          Serial.println(index_of_comma);
 80859b0:	f006 fe9a 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80859b4:	220a      	movs	r2, #10
 80859b6:	4641      	mov	r1, r8
 80859b8:	f005 fe95 	bl	808b6e6 <_ZN5Print7printlnEii>
          //writeLogFile("got a comma");

        }

        //if the index of the comma is not zero, then there is data.
        if(index_of_comma > 0){
 80859bc:	f1b8 0f00 	cmp.w	r8, #0
 80859c0:	dd2d      	ble.n	8085a1e <_Z15getEspOzoneDatav+0x186>
            stringArray[comma_count] = recievedData.substring(from_index, index_of_comma);
 80859c2:	4643      	mov	r3, r8
 80859c4:	463a      	mov	r2, r7
 80859c6:	a906      	add	r1, sp, #24
 80859c8:	a80a      	add	r0, sp, #40	; 0x28
 80859ca:	ea4f 1906 	mov.w	r9, r6, lsl #4
 80859ce:	f005 fd93 	bl	808b4f8 <_ZNK6String9substringEjj>
 80859d2:	a90a      	add	r1, sp, #40	; 0x28
 80859d4:	eb04 0009 	add.w	r0, r4, r9
 80859d8:	f005 fc39 	bl	808b24e <_ZN6StringaSEOS_>
 80859dc:	a80a      	add	r0, sp, #40	; 0x28
 80859de:	f005 fba5 	bl	808b12c <_ZN6StringD1Ev>
            if(debugging_enabled){
 80859e2:	682b      	ldr	r3, [r5, #0]
 80859e4:	b15b      	cbz	r3, 80859fe <_Z15getEspOzoneDatav+0x166>
                Serial.printf("String[%d]:", comma_count);
 80859e6:	f006 fe7f 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80859ea:	493d      	ldr	r1, [pc, #244]	; (8085ae0 <_Z15getEspOzoneDatav+0x248>)
 80859ec:	4632      	mov	r2, r6
 80859ee:	f7ff ff4c 	bl	808588a <_ZN5Print6printfIIiEEEjPKcDpT_>
                Serial.println(stringArray[comma_count]);
 80859f2:	f006 fe79 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80859f6:	f854 1009 	ldr.w	r1, [r4, r9]
 80859fa:	f005 fe06 	bl	808b60a <_ZN5Print7printlnEPKc>
                //writeLogFile(stringArray[comma_count]);
            }
            comma_count++;
 80859fe:	3601      	adds	r6, #1
    int from_index = 0;
    int index_of_comma = 0;
    bool still_searching_for_commas = true;
    String stringArray[NUMBER_OF_FEILDS];

    while(still_searching_for_commas && comma_count < NUMBER_OF_FEILDS){
 8085a00:	2e07      	cmp	r6, #7
                Serial.println(stringArray[comma_count]);
                //writeLogFile(stringArray[comma_count]);
            }
            comma_count++;
            from_index = index_of_comma;
            from_index += 1;
 8085a02:	f108 0701 	add.w	r7, r8, #1
    int from_index = 0;
    int index_of_comma = 0;
    bool still_searching_for_commas = true;
    String stringArray[NUMBER_OF_FEILDS];

    while(still_searching_for_commas && comma_count < NUMBER_OF_FEILDS){
 8085a06:	d1c6      	bne.n	8085996 <_Z15getEspOzoneDatav+0xfe>
            }
            still_searching_for_commas = false;
        }
    }
    if(comma_count == NUMBER_OF_FIELDS_LOGGING){
        ozone_value = stringArray[1].toFloat();
 8085a08:	a812      	add	r0, sp, #72	; 0x48
 8085a0a:	f005 fda2 	bl	808b552 <_ZNK6String7toFloatEv>
        if(debugging_enabled){
 8085a0e:	682b      	ldr	r3, [r5, #0]
            }
            still_searching_for_commas = false;
        }
    }
    if(comma_count == NUMBER_OF_FIELDS_LOGGING){
        ozone_value = stringArray[1].toFloat();
 8085a10:	4606      	mov	r6, r0
        if(debugging_enabled){
 8085a12:	2b00      	cmp	r3, #0
 8085a14:	d035      	beq.n	8085a82 <_Z15getEspOzoneDatav+0x1ea>
            Serial.println("using string array index 1 due to logging");
 8085a16:	f006 fe67 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8085a1a:	4932      	ldr	r1, [pc, #200]	; (8085ae4 <_Z15getEspOzoneDatav+0x24c>)
 8085a1c:	e02f      	b.n	8085a7e <_Z15getEspOzoneDatav+0x1e6>
            }
            comma_count++;
            from_index = index_of_comma;
            from_index += 1;
        }else{
            int index_of_cr = recievedData.indexOf('\r', from_index);
 8085a1e:	463a      	mov	r2, r7
 8085a20:	210d      	movs	r1, #13
 8085a22:	a806      	add	r0, sp, #24
 8085a24:	f005 fd5a 	bl	808b4dc <_ZNK6String7indexOfEcj>
            if(index_of_cr > 0){
 8085a28:	1e03      	subs	r3, r0, #0
 8085a2a:	dd1d      	ble.n	8085a68 <_Z15getEspOzoneDatav+0x1d0>
                stringArray[comma_count] = recievedData.substring(from_index, index_of_cr);
 8085a2c:	ea4f 1806 	mov.w	r8, r6, lsl #4
 8085a30:	463a      	mov	r2, r7
 8085a32:	a906      	add	r1, sp, #24
 8085a34:	a80a      	add	r0, sp, #40	; 0x28
 8085a36:	eb04 0908 	add.w	r9, r4, r8
 8085a3a:	f005 fd5d 	bl	808b4f8 <_ZNK6String9substringEjj>
 8085a3e:	a90a      	add	r1, sp, #40	; 0x28
 8085a40:	4648      	mov	r0, r9
 8085a42:	f005 fc04 	bl	808b24e <_ZN6StringaSEOS_>
 8085a46:	a80a      	add	r0, sp, #40	; 0x28
 8085a48:	f005 fb70 	bl	808b12c <_ZN6StringD1Ev>
                if(debugging_enabled){
 8085a4c:	682b      	ldr	r3, [r5, #0]
 8085a4e:	b15b      	cbz	r3, 8085a68 <_Z15getEspOzoneDatav+0x1d0>
                    Serial.printf("String[%d]:", comma_count);
 8085a50:	f006 fe4a 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8085a54:	4922      	ldr	r1, [pc, #136]	; (8085ae0 <_Z15getEspOzoneDatav+0x248>)
 8085a56:	4632      	mov	r2, r6
 8085a58:	f7ff ff17 	bl	808588a <_ZN5Print6printfIIiEEEjPKcDpT_>
                    Serial.println(stringArray[comma_count]);
 8085a5c:	f006 fe44 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8085a60:	f854 1008 	ldr.w	r1, [r4, r8]
 8085a64:	f005 fdd1 	bl	808b60a <_ZN5Print7printlnEPKc>
        ozone_value = stringArray[1].toFloat();
        if(debugging_enabled){
            Serial.println("using string array index 1 due to logging");
            //writeLogFile("using string array index 1 due to logging");
          }
    }else if(comma_count == (NUMBER_OF_FIELDS_LOGGING - 1)){
 8085a68:	2e06      	cmp	r6, #6
 8085a6a:	d113      	bne.n	8085a94 <_Z15getEspOzoneDatav+0x1fc>
        ozone_value = stringArray[0].toFloat();
 8085a6c:	4620      	mov	r0, r4
 8085a6e:	f005 fd70 	bl	808b552 <_ZNK6String7toFloatEv>
        if(debugging_enabled){
 8085a72:	682b      	ldr	r3, [r5, #0]
        if(debugging_enabled){
            Serial.println("using string array index 1 due to logging");
            //writeLogFile("using string array index 1 due to logging");
          }
    }else if(comma_count == (NUMBER_OF_FIELDS_LOGGING - 1)){
        ozone_value = stringArray[0].toFloat();
 8085a74:	4606      	mov	r6, r0
        if(debugging_enabled){
 8085a76:	b123      	cbz	r3, 8085a82 <_Z15getEspOzoneDatav+0x1ea>
            Serial.println("using string array index 0, not logging");
 8085a78:	f006 fe36 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8085a7c:	491a      	ldr	r1, [pc, #104]	; (8085ae8 <_Z15getEspOzoneDatav+0x250>)
 8085a7e:	f005 fdc4 	bl	808b60a <_ZN5Print7printlnEPKc>
    Serial1.println(wifiCredentials);
    Serial.println("Success!");
}

float getEspOzoneData(void){
    float ozone_value = 0.0;
 8085a82:	2506      	movs	r5, #6
    //parse data if not null
    int comma_count = 0;
    int from_index = 0;
    int index_of_comma = 0;
    bool still_searching_for_commas = true;
    String stringArray[NUMBER_OF_FEILDS];
 8085a84:	eb04 1005 	add.w	r0, r4, r5, lsl #4
 8085a88:	f005 fb50 	bl	808b12c <_ZN6StringD1Ev>
 8085a8c:	f115 35ff 	adds.w	r5, r5, #4294967295
 8085a90:	d2f8      	bcs.n	8085a84 <_Z15getEspOzoneDatav+0x1ec>
 8085a92:	e001      	b.n	8085a98 <_Z15getEspOzoneDatav+0x200>
    Serial1.println(wifiCredentials);
    Serial.println("Success!");
}

float getEspOzoneData(void){
    float ozone_value = 0.0;
 8085a94:	2600      	movs	r6, #0
 8085a96:	e7f4      	b.n	8085a82 <_Z15getEspOzoneDatav+0x1ea>
    String getOzoneData = "Z&";
    String recievedData = " ";
 8085a98:	a806      	add	r0, sp, #24
 8085a9a:	f005 fb47 	bl	808b12c <_ZN6StringD1Ev>
    Serial.println("Success!");
}

float getEspOzoneData(void){
    float ozone_value = 0.0;
    String getOzoneData = "Z&";
 8085a9e:	a802      	add	r0, sp, #8
 8085aa0:	f005 fb44 	bl	808b12c <_ZN6StringD1Ev>
            //writeLogFile("using string array index 0, not logging");
          }
    }
    return ozone_value;
    //parseOzoneString(recievedData);
}
 8085aa4:	4630      	mov	r0, r6
 8085aa6:	b02b      	add	sp, #172	; 0xac
 8085aa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8085aac:	f3af 8000 	nop.w
 8085ab0:	00000000 	.word	0x00000000
 8085ab4:	40cd4c00 	.word	0x40cd4c00
 8085ab8:	0809331a 	.word	0x0809331a
 8085abc:	20000f08 	.word	0x20000f08
 8085ac0:	0809197e 	.word	0x0809197e
 8085ac4:	0809331d 	.word	0x0809331d
 8085ac8:	3ff00000 	.word	0x3ff00000
 8085acc:	08093339 	.word	0x08093339
 8085ad0:	08093373 	.word	0x08093373
 8085ad4:	0809338c 	.word	0x0809338c
 8085ad8:	08094308 	.word	0x08094308
 8085adc:	080933a3 	.word	0x080933a3
 8085ae0:	080933b1 	.word	0x080933b1
 8085ae4:	080933bd 	.word	0x080933bd
 8085ae8:	080933e7 	.word	0x080933e7
 8085aec:	00000000 	.word	0x00000000

08085af0 <_Z9readOzonev>:
      Serial.print(volt1_aux);
      Serial.println("Volts");*/
      return alpha2_ppmraw;
}

void readOzone(void){
 8085af0:	b538      	push	{r3, r4, r5, lr}
    int tempValue = 0;
    if(ozone_analog_enabled){
 8085af2:	4b21      	ldr	r3, [pc, #132]	; (8085b78 <_Z9readOzonev+0x88>)
 8085af4:	4c21      	ldr	r4, [pc, #132]	; (8085b7c <_Z9readOzonev+0x8c>)
 8085af6:	681b      	ldr	r3, [r3, #0]
 8085af8:	b383      	cbz	r3, 8085b5c <_Z9readOzonev+0x6c>
        tempValue = analogRead(A0);  // read the analogPin for ozone voltage
 8085afa:	200a      	movs	r0, #10
 8085afc:	f007 f99d 	bl	808ce3a <analogRead>
        if(debugging_enabled){
 8085b00:	4b1f      	ldr	r3, [pc, #124]	; (8085b80 <_Z9readOzonev+0x90>)
}

void readOzone(void){
    int tempValue = 0;
    if(ozone_analog_enabled){
        tempValue = analogRead(A0);  // read the analogPin for ozone voltage
 8085b02:	4605      	mov	r5, r0
        if(debugging_enabled){
 8085b04:	681b      	ldr	r3, [r3, #0]
 8085b06:	b153      	cbz	r3, 8085b1e <_Z9readOzonev+0x2e>
            Serial.print("Ozone Raw analog in:");
 8085b08:	f006 fdee 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8085b0c:	491d      	ldr	r1, [pc, #116]	; (8085b84 <_Z9readOzonev+0x94>)
 8085b0e:	f005 fd69 	bl	808b5e4 <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 8085b12:	f006 fde9 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8085b16:	220a      	movs	r2, #10
 8085b18:	4629      	mov	r1, r5
 8085b1a:	f005 fde4 	bl	808b6e6 <_ZN5Print7printlnEii>

        }
        O3_float = tempValue;
        O3_float *= VOLTS_PER_UNIT;           //convert digital reading to voltage
        O3_float /= VOLTS_PER_PPB;            //convert voltage to ppb of ozone
        O3_float += ozone_offset;
 8085b1e:	4628      	mov	r0, r5
 8085b20:	f008 f948 	bl	808ddb4 <__aeabi_i2f>
 8085b24:	f007 fcf0 	bl	808d508 <__aeabi_f2d>
 8085b28:	a30f      	add	r3, pc, #60	; (adr r3, 8085b68 <_Z9readOzonev+0x78>)
 8085b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8085b2e:	f007 fd3f 	bl	808d5b0 <__aeabi_dmul>
 8085b32:	f008 f835 	bl	808dba0 <__aeabi_d2f>
 8085b36:	f007 fce7 	bl	808d508 <__aeabi_f2d>
 8085b3a:	a30d      	add	r3, pc, #52	; (adr r3, 8085b70 <_Z9readOzonev+0x80>)
 8085b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8085b40:	f007 fe60 	bl	808d804 <__aeabi_ddiv>
 8085b44:	f008 f82c 	bl	808dba0 <__aeabi_d2f>
 8085b48:	4b0f      	ldr	r3, [pc, #60]	; (8085b88 <_Z9readOzonev+0x98>)
 8085b4a:	4605      	mov	r5, r0
 8085b4c:	6818      	ldr	r0, [r3, #0]
 8085b4e:	f008 f931 	bl	808ddb4 <__aeabi_i2f>
 8085b52:	4601      	mov	r1, r0
 8085b54:	4628      	mov	r0, r5
 8085b56:	f008 f879 	bl	808dc4c <__addsf3>
 8085b5a:	e001      	b.n	8085b60 <_Z9readOzonev+0x70>
    }else{
        O3_float = getEspOzoneData();
 8085b5c:	f7ff fe9c 	bl	8085898 <_Z15getEspOzoneDatav>
 8085b60:	6020      	str	r0, [r4, #0]
 8085b62:	bd38      	pop	{r3, r4, r5, pc}
 8085b64:	f3af 8000 	nop.w
 8085b68:	eb1c432d 	.word	0xeb1c432d
 8085b6c:	3f4a36e2 	.word	0x3f4a36e2
 8085b70:	9999999a 	.word	0x9999999a
 8085b74:	3f899999 	.word	0x3f899999
 8085b78:	20000f74 	.word	0x20000f74
 8085b7c:	20000f90 	.word	0x20000f90
 8085b80:	20000f08 	.word	0x20000f08
 8085b84:	0809340f 	.word	0x0809340f
 8085b88:	20000abc 	.word	0x20000abc

08085b8c <_Z26serialIncreaseInputCurrentv>:
    Serial.println("failed writing string");
  }

}

void serialIncreaseInputCurrent(void){
 8085b8c:	b538      	push	{r3, r4, r5, lr}
    int inputCurrent = pmic.getInputCurrentLimit();
 8085b8e:	481d      	ldr	r0, [pc, #116]	; (8085c04 <_Z26serialIncreaseInputCurrentv+0x78>)
 8085b90:	f004 fff2 	bl	808ab78 <_ZN4PMIC20getInputCurrentLimitEv>
 8085b94:	4605      	mov	r5, r0
    Serial.printf("Old input current limit: %d\n\r", inputCurrent);
 8085b96:	f006 fda7 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8085b9a:	462a      	mov	r2, r5
 8085b9c:	491a      	ldr	r1, [pc, #104]	; (8085c08 <_Z26serialIncreaseInputCurrentv+0x7c>)
 8085b9e:	f7ff fe74 	bl	808588a <_ZN5Print6printfIIiEEEjPKcDpT_>

    if(inputCurrent == 100){
        inputCurrent = 150;
    }else if(inputCurrent == 100){
 8085ba2:	2d64      	cmp	r5, #100	; 0x64
 8085ba4:	d016      	beq.n	8085bd4 <_Z26serialIncreaseInputCurrentv+0x48>
        inputCurrent = 150;
    }else if(inputCurrent == 150){
 8085ba6:	2d96      	cmp	r5, #150	; 0x96
 8085ba8:	d016      	beq.n	8085bd8 <_Z26serialIncreaseInputCurrentv+0x4c>
        inputCurrent = 500;
    }else if(inputCurrent == 500){
 8085baa:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 8085bae:	d016      	beq.n	8085bde <_Z26serialIncreaseInputCurrentv+0x52>
        inputCurrent = 900;
    }else if(inputCurrent == 900){
 8085bb0:	f5b5 7f61 	cmp.w	r5, #900	; 0x384
 8085bb4:	d016      	beq.n	8085be4 <_Z26serialIncreaseInputCurrentv+0x58>
        inputCurrent = 1200;
    }else if(inputCurrent == 1200){
 8085bb6:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 8085bba:	f240 54dc 	movw	r4, #1500	; 0x5dc
 8085bbe:	d016      	beq.n	8085bee <_Z26serialIncreaseInputCurrentv+0x62>
        inputCurrent = 1500;
    }else if(inputCurrent == 1500){
 8085bc0:	42a5      	cmp	r5, r4
 8085bc2:	d012      	beq.n	8085bea <_Z26serialIncreaseInputCurrentv+0x5e>
        inputCurrent = 2000;
    }else if(inputCurrent == 2000){
        inputCurrent = 3000;
 8085bc4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8085bc8:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 8085bcc:	bf14      	ite	ne
 8085bce:	462c      	movne	r4, r5
 8085bd0:	4614      	moveq	r4, r2
 8085bd2:	e00c      	b.n	8085bee <_Z26serialIncreaseInputCurrentv+0x62>
    Serial.printf("Old input current limit: %d\n\r", inputCurrent);

    if(inputCurrent == 100){
        inputCurrent = 150;
    }else if(inputCurrent == 100){
        inputCurrent = 150;
 8085bd4:	2496      	movs	r4, #150	; 0x96
 8085bd6:	e00a      	b.n	8085bee <_Z26serialIncreaseInputCurrentv+0x62>
    }else if(inputCurrent == 150){
        inputCurrent = 500;
 8085bd8:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
 8085bdc:	e007      	b.n	8085bee <_Z26serialIncreaseInputCurrentv+0x62>
    }else if(inputCurrent == 500){
        inputCurrent = 900;
 8085bde:	f44f 7461 	mov.w	r4, #900	; 0x384
 8085be2:	e004      	b.n	8085bee <_Z26serialIncreaseInputCurrentv+0x62>
    }else if(inputCurrent == 900){
        inputCurrent = 1200;
 8085be4:	f44f 6496 	mov.w	r4, #1200	; 0x4b0
 8085be8:	e001      	b.n	8085bee <_Z26serialIncreaseInputCurrentv+0x62>
    }else if(inputCurrent == 1200){
        inputCurrent = 1500;
    }else if(inputCurrent == 1500){
        inputCurrent = 2000;
 8085bea:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
    }else if(inputCurrent == 2000){
        inputCurrent = 3000;
    }
    //delay(2000);
    pmic.setInputCurrentLimit(inputCurrent);
 8085bee:	b2a1      	uxth	r1, r4
 8085bf0:	4804      	ldr	r0, [pc, #16]	; (8085c04 <_Z26serialIncreaseInputCurrentv+0x78>)
 8085bf2:	f004 fff9 	bl	808abe8 <_ZN4PMIC20setInputCurrentLimitEt>
    Serial.printf("New input current limit: %d\n\r", inputCurrent);
 8085bf6:	f006 fd77 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8085bfa:	4622      	mov	r2, r4
 8085bfc:	4903      	ldr	r1, [pc, #12]	; (8085c0c <_Z26serialIncreaseInputCurrentv+0x80>)
 8085bfe:	f7ff fe44 	bl	808588a <_ZN5Print6printfIIiEEEjPKcDpT_>
 8085c02:	bd38      	pop	{r3, r4, r5, pc}
 8085c04:	20000ee4 	.word	0x20000ee4
 8085c08:	08093424 	.word	0x08093424
 8085c0c:	08093442 	.word	0x08093442

08085c10 <_Z27serialIncreaseChargeCurrentv>:
}

void serialIncreaseChargeCurrent(void){
 8085c10:	b5f0      	push	{r4, r5, r6, r7, lr}
    bool bit5 = 0;
    bool bit4 = 0;
    bool bit3 = 0;
    bool bit2 = 0;

    byte chargeCurrent = pmic.getChargeCurrent();
 8085c12:	4833      	ldr	r0, [pc, #204]	; (8085ce0 <_Z27serialIncreaseChargeCurrentv+0xd0>)
    //delay(2000);
    pmic.setInputCurrentLimit(inputCurrent);
    Serial.printf("New input current limit: %d\n\r", inputCurrent);
}

void serialIncreaseChargeCurrent(void){
 8085c14:	b085      	sub	sp, #20
    bool bit5 = 0;
    bool bit4 = 0;
    bool bit3 = 0;
    bool bit2 = 0;

    byte chargeCurrent = pmic.getChargeCurrent();
 8085c16:	f004 ffbb 	bl	808ab90 <_ZN4PMIC16getChargeCurrentEv>
 8085c1a:	4605      	mov	r5, r0
    //bit 7
    if(chargeCurrent & 0x80){
        total_current += 2048;
 8085c1c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8085c20:	bf0c      	ite	eq
 8085c22:	2400      	moveq	r4, #0
 8085c24:	f44f 6400 	movne.w	r4, #2048	; 0x800
    }
    //bit 6
    if(chargeCurrent & 0x40){
 8085c28:	0647      	lsls	r7, r0, #25
        total_current += 1024;
 8085c2a:	bf48      	it	mi
 8085c2c:	f504 6480 	addmi.w	r4, r4, #1024	; 0x400
    }
    //bit 5
    if(chargeCurrent & 0x20){
 8085c30:	0686      	lsls	r6, r0, #26
        total_current += 512;
 8085c32:	bf48      	it	mi
 8085c34:	f504 7400 	addmi.w	r4, r4, #512	; 0x200
    }
    //bit 4
    if(chargeCurrent & 0x10){
 8085c38:	06e8      	lsls	r0, r5, #27
        total_current += 256;
 8085c3a:	bf48      	it	mi
 8085c3c:	f504 7480 	addmi.w	r4, r4, #256	; 0x100
    }
    //bit 3
    if(chargeCurrent & 0x08){
 8085c40:	0729      	lsls	r1, r5, #28
        total_current += 128;
 8085c42:	bf48      	it	mi
 8085c44:	3480      	addmi	r4, #128	; 0x80
    }
    //bit 2
    if(chargeCurrent & 0x04){
 8085c46:	076a      	lsls	r2, r5, #29
        total_current += 64;
 8085c48:	bf48      	it	mi
 8085c4a:	3440      	addmi	r4, #64	; 0x40
    }
    Serial.printf("Increasing Charge current from %d mA to ", total_current);
 8085c4c:	f006 fd4c 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8085c50:	4622      	mov	r2, r4
 8085c52:	4924      	ldr	r1, [pc, #144]	; (8085ce4 <_Z27serialIncreaseChargeCurrentv+0xd4>)
 8085c54:	f7ff fe19 	bl	808588a <_ZN5Print6printfIIiEEEjPKcDpT_>
    chargeCurrent += 4;
 8085c58:	1d28      	adds	r0, r5, #4
 8085c5a:	b2c0      	uxtb	r0, r0
    total_current = 0;

    if(chargeCurrent & 0x80){
 8085c5c:	0603      	lsls	r3, r0, #24
    Serial.printf("New input current limit: %d\n\r", inputCurrent);
}

void serialIncreaseChargeCurrent(void){
    int total_current = 0;
    bool bit7 = 0;
 8085c5e:	bf58      	it	pl
 8085c60:	2100      	movpl	r1, #0
    if(chargeCurrent & 0x80){
        total_current += 2048;
        bit7 = 1;
    }
    //bit 6
    if(chargeCurrent & 0x40){
 8085c62:	f000 0340 	and.w	r3, r0, #64	; 0x40
    chargeCurrent += 4;
    total_current = 0;

    if(chargeCurrent & 0x80){
        total_current += 2048;
        bit7 = 1;
 8085c66:	bf46      	itte	mi
 8085c68:	2101      	movmi	r1, #1
    Serial.printf("Increasing Charge current from %d mA to ", total_current);
    chargeCurrent += 4;
    total_current = 0;

    if(chargeCurrent & 0x80){
        total_current += 2048;
 8085c6a:	f44f 6400 	movmi.w	r4, #2048	; 0x800
    if(chargeCurrent & 0x04){
        total_current += 64;
    }
    Serial.printf("Increasing Charge current from %d mA to ", total_current);
    chargeCurrent += 4;
    total_current = 0;
 8085c6e:	460c      	movpl	r4, r1
    if(chargeCurrent & 0x80){
        total_current += 2048;
        bit7 = 1;
    }
    //bit 6
    if(chargeCurrent & 0x40){
 8085c70:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8085c74:	b113      	cbz	r3, 8085c7c <_Z27serialIncreaseChargeCurrentv+0x6c>
        total_current += 1024;
 8085c76:	f504 6480 	add.w	r4, r4, #1024	; 0x400
        bit6 = 1;
 8085c7a:	2201      	movs	r2, #1
    }
    //bit 5
    if(chargeCurrent & 0x20){
 8085c7c:	f000 0520 	and.w	r5, r0, #32
 8085c80:	f005 03ff 	and.w	r3, r5, #255	; 0xff
 8085c84:	b115      	cbz	r5, 8085c8c <_Z27serialIncreaseChargeCurrentv+0x7c>
        total_current += 512;
 8085c86:	f504 7400 	add.w	r4, r4, #512	; 0x200
        bit5 = 1;
 8085c8a:	2301      	movs	r3, #1
    }
    //bit 4
    if(chargeCurrent & 0x10){
 8085c8c:	f000 0610 	and.w	r6, r0, #16
 8085c90:	f006 05ff 	and.w	r5, r6, #255	; 0xff
 8085c94:	b116      	cbz	r6, 8085c9c <_Z27serialIncreaseChargeCurrentv+0x8c>
        total_current += 256;
 8085c96:	f504 7480 	add.w	r4, r4, #256	; 0x100
        bit4 = 1;
 8085c9a:	2501      	movs	r5, #1
    }
    //bit 3
    if(chargeCurrent & 0x08){
 8085c9c:	f000 0708 	and.w	r7, r0, #8
 8085ca0:	f007 06ff 	and.w	r6, r7, #255	; 0xff
 8085ca4:	b10f      	cbz	r7, 8085caa <_Z27serialIncreaseChargeCurrentv+0x9a>
        total_current += 128;
 8085ca6:	3480      	adds	r4, #128	; 0x80
        bit3 = 1;
 8085ca8:	2601      	movs	r6, #1
    }
    //bit 2
    if(chargeCurrent & 0x04){
 8085caa:	f000 0004 	and.w	r0, r0, #4
 8085cae:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 8085cb2:	b110      	cbz	r0, 8085cba <_Z27serialIncreaseChargeCurrentv+0xaa>
        total_current += 64;
 8085cb4:	3440      	adds	r4, #64	; 0x40
        bit2 = 1;
 8085cb6:	2001      	movs	r0, #1
 8085cb8:	e000      	b.n	8085cbc <_Z27serialIncreaseChargeCurrentv+0xac>
    bool bit7 = 0;
    bool bit6 = 0;
    bool bit5 = 0;
    bool bit4 = 0;
    bool bit3 = 0;
    bool bit2 = 0;
 8085cba:	4638      	mov	r0, r7
    if(chargeCurrent & 0x04){
        total_current += 64;
        bit2 = 1;
    }

    pmic.setChargeCurrent(bit7, bit6, bit5, bit4, bit3, bit2);
 8085cbc:	9002      	str	r0, [sp, #8]
 8085cbe:	e88d 0060 	stmia.w	sp, {r5, r6}
 8085cc2:	4807      	ldr	r0, [pc, #28]	; (8085ce0 <_Z27serialIncreaseChargeCurrentv+0xd0>)
 8085cc4:	f004 fff3 	bl	808acae <_ZN4PMIC16setChargeCurrentEbbbbbb>
    chargeCurrent = pmic.getChargeCurrent();
 8085cc8:	4805      	ldr	r0, [pc, #20]	; (8085ce0 <_Z27serialIncreaseChargeCurrentv+0xd0>)
 8085cca:	f004 ff61 	bl	808ab90 <_ZN4PMIC16getChargeCurrentEv>
    Serial.printf("new charge current of %d mA\n\r", total_current);
 8085cce:	f006 fd0b 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8085cd2:	4622      	mov	r2, r4
 8085cd4:	4904      	ldr	r1, [pc, #16]	; (8085ce8 <_Z27serialIncreaseChargeCurrentv+0xd8>)
 8085cd6:	f7ff fdd8 	bl	808588a <_ZN5Print6printfIIiEEEjPKcDpT_>
}
 8085cda:	b005      	add	sp, #20
 8085cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8085cde:	bf00      	nop
 8085ce0:	20000ee4 	.word	0x20000ee4
 8085ce4:	08093460 	.word	0x08093460
 8085ce8:	08093489 	.word	0x08093489
 8085cec:	00000000 	.word	0x00000000

08085cf0 <_Z10readAlpha1v>:
    CO2_float *= CO2_slope;
    CO2_float += CO2_zero;
    
    return CO2_float;
}
float readAlpha1(void){
 8085cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    float sensorCurrent; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent;
    float correctedCurrent;
    float alpha1_ppmraw;
    String alpha1_ppmRounded;
    if(debugging_enabled){
 8085cf4:	4da2      	ldr	r5, [pc, #648]	; (8085f80 <_Z10readAlpha1v+0x290>)
    CO2_float *= CO2_slope;
    CO2_float += CO2_zero;
    
    return CO2_float;
}
float readAlpha1(void){
 8085cf6:	b08b      	sub	sp, #44	; 0x2c
    float volt_half_Vref;
    float sensorCurrent; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent;
    float correctedCurrent;
    float alpha1_ppmraw;
    String alpha1_ppmRounded;
 8085cf8:	49a2      	ldr	r1, [pc, #648]	; (8085f84 <_Z10readAlpha1v+0x294>)
 8085cfa:	a802      	add	r0, sp, #8
 8085cfc:	f005 fa5d 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
    if(debugging_enabled){
 8085d00:	682b      	ldr	r3, [r5, #0]
 8085d02:	b123      	cbz	r3, 8085d0e <_Z10readAlpha1v+0x1e>
        Serial.println("Start of alpha read");
 8085d04:	f006 fcf0 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8085d08:	499f      	ldr	r1, [pc, #636]	; (8085f88 <_Z10readAlpha1v+0x298>)
 8085d0a:	f005 fc7e 	bl	808b60a <_ZN5Print7printlnEPKc>
    }
    digitalWrite(lmp91000_1_en, LOW);   //enable
 8085d0e:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8085fe0 <_Z10readAlpha1v+0x2f0>
 8085d12:	2100      	movs	r1, #0
 8085d14:	f8b9 0000 	ldrh.w	r0, [r9]
 8085d18:	f007 f863 	bl	808cde2 <digitalWrite>

    if(Wire.requestFrom(0x49,1) == 0){
 8085d1c:	f007 f8fe 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8085d20:	2201      	movs	r2, #1
 8085d22:	2149      	movs	r1, #73	; 0x49
 8085d24:	f006 fec2 	bl	808caac <_ZN7TwoWire11requestFromEii>
 8085d28:	f8cd 9004 	str.w	r9, [sp, #4]
 8085d2c:	b948      	cbnz	r0, 8085d42 <_Z10readAlpha1v+0x52>
      if(debugging_enabled){
 8085d2e:	682b      	ldr	r3, [r5, #0]
 8085d30:	2b00      	cmp	r3, #0
 8085d32:	d039      	beq.n	8085da8 <_Z10readAlpha1v+0xb8>
        Serial.println("Couldn't communicate with LMP91000");
 8085d34:	f006 fcd8 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8085d38:	4994      	ldr	r1, [pc, #592]	; (8085f8c <_Z10readAlpha1v+0x29c>)
 8085d3a:	f005 fc66 	bl	808b60a <_ZN5Print7printlnEPKc>
        writeLogFile("Couldn't communicate with LMP91000");
 8085d3e:	4993      	ldr	r1, [pc, #588]	; (8085f8c <_Z10readAlpha1v+0x29c>)
 8085d40:	e029      	b.n	8085d96 <_Z10readAlpha1v+0xa6>
        //digitalWrite(red_status_led, HIGH);
        //delay(200);
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }else{
        half_Vref = ads1.readADC_SingleEnded(3); //half of Vref
 8085d42:	2103      	movs	r1, #3
 8085d44:	4892      	ldr	r0, [pc, #584]	; (8085f90 <_Z10readAlpha1v+0x2a0>)
 8085d46:	f001 fa6c 	bl	8087222 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
 8085d4a:	4604      	mov	r4, r0
        volt_half_Vref = half_Vref * ads_bitmv;
        if(abs((volt_half_Vref)/1000 - 1.25) > 0.5){
 8085d4c:	f008 f832 	bl	808ddb4 <__aeabi_i2f>
        //delay(200);
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }else{
        half_Vref = ads1.readADC_SingleEnded(3); //half of Vref
        volt_half_Vref = half_Vref * ads_bitmv;
 8085d50:	4b90      	ldr	r3, [pc, #576]	; (8085f94 <_Z10readAlpha1v+0x2a4>)
        if(abs((volt_half_Vref)/1000 - 1.25) > 0.5){
 8085d52:	6819      	ldr	r1, [r3, #0]
 8085d54:	f008 f882 	bl	808de5c <__aeabi_fmul>
 8085d58:	498f      	ldr	r1, [pc, #572]	; (8085f98 <_Z10readAlpha1v+0x2a8>)
 8085d5a:	f008 f933 	bl	808dfc4 <__aeabi_fdiv>
 8085d5e:	4681      	mov	r9, r0
 8085d60:	f007 fbd2 	bl	808d508 <__aeabi_f2d>
 8085d64:	2200      	movs	r2, #0
 8085d66:	4b8d      	ldr	r3, [pc, #564]	; (8085f9c <_Z10readAlpha1v+0x2ac>)
 8085d68:	f007 fa6e 	bl	808d248 <__aeabi_dsub>
 8085d6c:	f007 fed0 	bl	808db10 <__aeabi_d2iz>
 8085d70:	2800      	cmp	r0, #0
 8085d72:	bfb8      	it	lt
 8085d74:	4240      	neglt	r0, r0
 8085d76:	f007 fbb5 	bl	808d4e4 <__aeabi_i2d>
 8085d7a:	2200      	movs	r2, #0
 8085d7c:	4b88      	ldr	r3, [pc, #544]	; (8085fa0 <_Z10readAlpha1v+0x2b0>)
 8085d7e:	f007 fea7 	bl	808dad0 <__aeabi_dcmpgt>
 8085d82:	b188      	cbz	r0, 8085da8 <_Z10readAlpha1v+0xb8>
          if(debugging_enabled){
 8085d84:	682b      	ldr	r3, [r5, #0]
 8085d86:	b17b      	cbz	r3, 8085da8 <_Z10readAlpha1v+0xb8>
            Serial.printf("Halfvolt: %1.2f\n\r", volt_half_Vref/1000);
 8085d88:	f006 fcae 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8085d8c:	4985      	ldr	r1, [pc, #532]	; (8085fa4 <_Z10readAlpha1v+0x2b4>)
 8085d8e:	464a      	mov	r2, r9
 8085d90:	f7ff fd6c 	bl	808586c <_ZN5Print6printfIIfEEEjPKcDpT_>
            writeLogFile("Halfvolt higher than 0.5");
 8085d94:	4984      	ldr	r1, [pc, #528]	; (8085fa8 <_Z10readAlpha1v+0x2b8>)
 8085d96:	a806      	add	r0, sp, #24
 8085d98:	f005 fa0f 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
 8085d9c:	a806      	add	r0, sp, #24
 8085d9e:	f7fb ffb3 	bl	8081d08 <_Z12writeLogFile6String>
 8085da2:	a806      	add	r0, sp, #24
 8085da4:	f005 f9c2 	bl	808b12c <_ZN6StringD1Ev>
          }
        }
    }

    if(lmp91000.read(LMP91000_STATUS_REG) == 0){
 8085da8:	2100      	movs	r1, #0
 8085daa:	4880      	ldr	r0, [pc, #512]	; (8085fac <_Z10readAlpha1v+0x2bc>)
 8085dac:	f001 f8e3 	bl	8086f76 <_ZN8LMP910004readEh>
 8085db0:	b980      	cbnz	r0, 8085dd4 <_Z10readAlpha1v+0xe4>
        if(debugging_enabled){
 8085db2:	682b      	ldr	r3, [r5, #0]
 8085db4:	b173      	cbz	r3, 8085dd4 <_Z10readAlpha1v+0xe4>
            Serial.println("Status = 0 from LMP91000 status reg");
 8085db6:	f006 fc97 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8085dba:	497d      	ldr	r1, [pc, #500]	; (8085fb0 <_Z10readAlpha1v+0x2c0>)
 8085dbc:	f005 fc25 	bl	808b60a <_ZN5Print7printlnEPKc>
            writeLogFile("LMP1000 status = 0");
 8085dc0:	497c      	ldr	r1, [pc, #496]	; (8085fb4 <_Z10readAlpha1v+0x2c4>)
 8085dc2:	a806      	add	r0, sp, #24
 8085dc4:	f005 f9f9 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
 8085dc8:	a806      	add	r0, sp, #24
 8085dca:	f7fb ff9d 	bl	8081d08 <_Z12writeLogFile6String>
 8085dce:	a806      	add	r0, sp, #24
 8085dd0:	f005 f9ac 	bl	808b12c <_ZN6StringD1Ev>
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }

    //if(Wire.requestFrom(0x49,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref)/1000 - 1.25) > 0.5)){
    if(Wire.requestFrom(0x49,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0){
 8085dd4:	f007 f8a2 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8085dd8:	2201      	movs	r2, #1
 8085dda:	2149      	movs	r1, #73	; 0x49
 8085ddc:	f006 fe66 	bl	808caac <_ZN7TwoWire11requestFromEii>
 8085de0:	2800      	cmp	r0, #0
 8085de2:	f000 80b9 	beq.w	8085f58 <_Z10readAlpha1v+0x268>
 8085de6:	2100      	movs	r1, #0
 8085de8:	4870      	ldr	r0, [pc, #448]	; (8085fac <_Z10readAlpha1v+0x2bc>)
 8085dea:	f001 f8c4 	bl	8086f76 <_ZN8LMP910004readEh>
 8085dee:	2800      	cmp	r0, #0
 8085df0:	f000 80b2 	beq.w	8085f58 <_Z10readAlpha1v+0x268>
 8085df4:	2400      	movs	r4, #0
 8085df6:	46a2      	mov	sl, r4
 8085df8:	4627      	mov	r7, r4
 8085dfa:	4626      	mov	r6, r4
 8085dfc:	f04f 080a 	mov.w	r8, #10
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
          A0_gas += ads1.readADC_SingleEnded(0); //gas
 8085e00:	2100      	movs	r1, #0
 8085e02:	4863      	ldr	r0, [pc, #396]	; (8085f90 <_Z10readAlpha1v+0x2a0>)
 8085e04:	f001 fa0d 	bl	8087222 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
 8085e08:	2101      	movs	r1, #1
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
          A0_gas += ads1.readADC_SingleEnded(0); //gas
 8085e0a:	4406      	add	r6, r0
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
 8085e0c:	4860      	ldr	r0, [pc, #384]	; (8085f90 <_Z10readAlpha1v+0x2a0>)
 8085e0e:	f001 fa08 	bl	8087222 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
 8085e12:	2102      	movs	r1, #2
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
          A0_gas += ads1.readADC_SingleEnded(0); //gas
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
 8085e14:	4407      	add	r7, r0
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
 8085e16:	485e      	ldr	r0, [pc, #376]	; (8085f90 <_Z10readAlpha1v+0x2a0>)
 8085e18:	f001 fa03 	bl	8087222 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
 8085e1c:	2103      	movs	r1, #3
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
          A0_gas += ads1.readADC_SingleEnded(0); //gas
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
 8085e1e:	4482      	add	sl, r0
          half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
 8085e20:	485b      	ldr	r0, [pc, #364]	; (8085f90 <_Z10readAlpha1v+0x2a0>)
 8085e22:	f001 f9fe 	bl	8087222 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
    }else{
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
 8085e26:	f1b8 0801 	subs.w	r8, r8, #1
          A0_gas += ads1.readADC_SingleEnded(0); //gas
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
          half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
 8085e2a:	4404      	add	r4, r0
    }else{
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
 8085e2c:	d1e8      	bne.n	8085e00 <_Z10readAlpha1v+0x110>
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
          half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
        }

        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
 8085e2e:	230a      	movs	r3, #10
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;
 8085e30:	fb94 f4f3 	sdiv	r4, r4, r3
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
          half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
        }

        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
 8085e34:	fb96 f6f3 	sdiv	r6, r6, r3
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
 8085e38:	fb97 f7f3 	sdiv	r7, r7, r3
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
 8085e3c:	fb9a faf3 	sdiv	sl, sl, r3
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;

        volt0_gas = A0_gas * ads_bitmv;
 8085e40:	4b54      	ldr	r3, [pc, #336]	; (8085f94 <_Z10readAlpha1v+0x2a4>)
        volt1_aux = A1_aux * ads_bitmv;
        volt2_temperature = A2_temperature * ads_bitmv;
        volt_half_Vref = half_Vref * ads_bitmv;
 8085e42:	4620      	mov	r0, r4
        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;

        volt0_gas = A0_gas * ads_bitmv;
 8085e44:	f8d3 8000 	ldr.w	r8, [r3]
        volt1_aux = A1_aux * ads_bitmv;
        volt2_temperature = A2_temperature * ads_bitmv;
        volt_half_Vref = half_Vref * ads_bitmv;
 8085e48:	f007 ffb4 	bl	808ddb4 <__aeabi_i2f>
 8085e4c:	4641      	mov	r1, r8
 8085e4e:	f008 f805 	bl	808de5c <__aeabi_fmul>
 8085e52:	4681      	mov	r9, r0

        sensorCurrent = (volt_half_Vref - volt0_gas) / (-1*120); // Working Electrode current in microamps (millivolts / Kohms)
 8085e54:	4630      	mov	r0, r6
 8085e56:	f007 ffad 	bl	808ddb4 <__aeabi_i2f>
 8085e5a:	4641      	mov	r1, r8
 8085e5c:	f007 fffe 	bl	808de5c <__aeabi_fmul>
 8085e60:	4601      	mov	r1, r0
 8085e62:	4648      	mov	r0, r9
 8085e64:	f007 fef0 	bl	808dc48 <__aeabi_fsub>
 8085e68:	4953      	ldr	r1, [pc, #332]	; (8085fb8 <_Z10readAlpha1v+0x2c8>)
 8085e6a:	f008 f8ab 	bl	808dfc4 <__aeabi_fdiv>
 8085e6e:	4683      	mov	fp, r0
        auxCurrent = (volt_half_Vref - volt1_aux) / (-1*150);
 8085e70:	4638      	mov	r0, r7
 8085e72:	f007 ff9f 	bl	808ddb4 <__aeabi_i2f>
 8085e76:	4641      	mov	r1, r8
 8085e78:	f007 fff0 	bl	808de5c <__aeabi_fmul>
 8085e7c:	4601      	mov	r1, r0
 8085e7e:	4648      	mov	r0, r9
 8085e80:	f007 fee2 	bl	808dc48 <__aeabi_fsub>
 8085e84:	494d      	ldr	r1, [pc, #308]	; (8085fbc <_Z10readAlpha1v+0x2cc>)
 8085e86:	f008 f89d 	bl	808dfc4 <__aeabi_fdiv>
 8085e8a:	4680      	mov	r8, r0
        //{1, -1, -0.76}, //CO-A4 (<=10C, 20C, >=30C)
        if(readTemperature() <= 15){
 8085e8c:	f7fb fbac 	bl	80815e8 <_Z15readTemperaturev>
 8085e90:	494b      	ldr	r1, [pc, #300]	; (8085fc0 <_Z10readAlpha1v+0x2d0>)
 8085e92:	f008 f98b 	bl	808e1ac <__aeabi_fcmple>
 8085e96:	b120      	cbz	r0, 8085ea2 <_Z10readAlpha1v+0x1b2>
          correctedCurrent = ((sensorCurrent) - (auxCurrent));
 8085e98:	4641      	mov	r1, r8
 8085e9a:	4658      	mov	r0, fp
 8085e9c:	f007 fed4 	bl	808dc48 <__aeabi_fsub>
 8085ea0:	e01f      	b.n	8085ee2 <_Z10readAlpha1v+0x1f2>
        }
        else if(readTemperature() <= 25){
 8085ea2:	f7fb fba1 	bl	80815e8 <_Z15readTemperaturev>
 8085ea6:	4947      	ldr	r1, [pc, #284]	; (8085fc4 <_Z10readAlpha1v+0x2d4>)
 8085ea8:	f008 f980 	bl	808e1ac <__aeabi_fcmple>
 8085eac:	b120      	cbz	r0, 8085eb8 <_Z10readAlpha1v+0x1c8>
          correctedCurrent = ((sensorCurrent) - (-1)*(auxCurrent));
 8085eae:	4641      	mov	r1, r8
 8085eb0:	4658      	mov	r0, fp
 8085eb2:	f007 fecb 	bl	808dc4c <__addsf3>
 8085eb6:	e014      	b.n	8085ee2 <_Z10readAlpha1v+0x1f2>
        }
        else{
          correctedCurrent = ((sensorCurrent) - (-0.76)*(auxCurrent));
 8085eb8:	4640      	mov	r0, r8
 8085eba:	f007 fb25 	bl	808d508 <__aeabi_f2d>
 8085ebe:	a32c      	add	r3, pc, #176	; (adr r3, 8085f70 <_Z10readAlpha1v+0x280>)
 8085ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8085ec4:	f007 fb74 	bl	808d5b0 <__aeabi_dmul>
 8085ec8:	4680      	mov	r8, r0
 8085eca:	4658      	mov	r0, fp
 8085ecc:	4689      	mov	r9, r1
 8085ece:	f007 fb1b 	bl	808d508 <__aeabi_f2d>
 8085ed2:	4602      	mov	r2, r0
 8085ed4:	460b      	mov	r3, r1
 8085ed6:	4640      	mov	r0, r8
 8085ed8:	4649      	mov	r1, r9
 8085eda:	f007 f9b7 	bl	808d24c <__adddf3>
 8085ede:	f007 fe5f 	bl	808dba0 <__aeabi_d2f>
        }
        alpha1_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 8085ee2:	f007 fb11 	bl	808d508 <__aeabi_f2d>
 8085ee6:	a324      	add	r3, pc, #144	; (adr r3, 8085f78 <_Z10readAlpha1v+0x288>)
 8085ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8085eec:	f007 fc8a 	bl	808d804 <__aeabi_ddiv>
 8085ef0:	f007 fe56 	bl	808dba0 <__aeabi_d2f>
        alpha1_ppmRounded = String(alpha1_ppmraw, 2);
 8085ef4:	2202      	movs	r2, #2
 8085ef6:	4601      	mov	r1, r0
          correctedCurrent = ((sensorCurrent) - (-1)*(auxCurrent));
        }
        else{
          correctedCurrent = ((sensorCurrent) - (-0.76)*(auxCurrent));
        }
        alpha1_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 8085ef8:	4680      	mov	r8, r0
        alpha1_ppmRounded = String(alpha1_ppmraw, 2);
 8085efa:	a806      	add	r0, sp, #24
 8085efc:	f005 f9f7 	bl	808b2ee <_ZN6StringC1Efi>
 8085f00:	a906      	add	r1, sp, #24
 8085f02:	a802      	add	r0, sp, #8
 8085f04:	f005 f9a3 	bl	808b24e <_ZN6StringaSEOS_>
 8085f08:	a806      	add	r0, sp, #24
 8085f0a:	f005 f90f 	bl	808b12c <_ZN6StringD1Ev>
      }

      digitalWrite(lmp91000_1_en, HIGH);  //disable
 8085f0e:	9b01      	ldr	r3, [sp, #4]
 8085f10:	2101      	movs	r1, #1
 8085f12:	8818      	ldrh	r0, [r3, #0]
 8085f14:	f006 ff65 	bl	808cde2 <digitalWrite>

      if(debugging_enabled){
 8085f18:	682b      	ldr	r3, [r5, #0]
 8085f1a:	b313      	cbz	r3, 8085f62 <_Z10readAlpha1v+0x272>
          Serial.print("CO measurements:  \n\r");
 8085f1c:	f006 fbe4 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8085f20:	4929      	ldr	r1, [pc, #164]	; (8085fc8 <_Z10readAlpha1v+0x2d8>)
 8085f22:	f005 fb5f 	bl	808b5e4 <_ZN5Print5printEPKc>
          Serial.printf("A0_gas: %d\n\r", A0_gas);
 8085f26:	f006 fbdf 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8085f2a:	4632      	mov	r2, r6
 8085f2c:	4927      	ldr	r1, [pc, #156]	; (8085fcc <_Z10readAlpha1v+0x2dc>)
 8085f2e:	f7ff fcac 	bl	808588a <_ZN5Print6printfIIiEEEjPKcDpT_>
          Serial.printf("A1_aux: %d\n\r", A1_aux);
 8085f32:	f006 fbd9 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8085f36:	463a      	mov	r2, r7
 8085f38:	4925      	ldr	r1, [pc, #148]	; (8085fd0 <_Z10readAlpha1v+0x2e0>)
 8085f3a:	f7ff fca6 	bl	808588a <_ZN5Print6printfIIiEEEjPKcDpT_>
          Serial.printf("A2_temp: %d\n\r", A2_temperature);
 8085f3e:	f006 fbd3 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8085f42:	4652      	mov	r2, sl
 8085f44:	4923      	ldr	r1, [pc, #140]	; (8085fd4 <_Z10readAlpha1v+0x2e4>)
 8085f46:	f7ff fca0 	bl	808588a <_ZN5Print6printfIIiEEEjPKcDpT_>
          Serial.printf("half_vref: %d\n\r", half_Vref);
 8085f4a:	f006 fbcd 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8085f4e:	4622      	mov	r2, r4
 8085f50:	4921      	ldr	r1, [pc, #132]	; (8085fd8 <_Z10readAlpha1v+0x2e8>)
 8085f52:	f7ff fc9a 	bl	808588a <_ZN5Print6printfIIiEEEjPKcDpT_>
 8085f56:	e004      	b.n	8085f62 <_Z10readAlpha1v+0x272>
        //delay(200);
    }

    //if(Wire.requestFrom(0x49,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref)/1000 - 1.25) > 0.5)){
    if(Wire.requestFrom(0x49,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0){
        alpha1_ppmRounded = "-99";
 8085f58:	4920      	ldr	r1, [pc, #128]	; (8085fdc <_Z10readAlpha1v+0x2ec>)
 8085f5a:	a802      	add	r0, sp, #8
 8085f5c:	f005 f97f 	bl	808b25e <_ZN6StringaSEPKc>
 8085f60:	e7d5      	b.n	8085f0e <_Z10readAlpha1v+0x21e>
    float volt_half_Vref;
    float sensorCurrent; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent;
    float correctedCurrent;
    float alpha1_ppmraw;
    String alpha1_ppmRounded;
 8085f62:	a802      	add	r0, sp, #8
 8085f64:	f005 f8e2 	bl	808b12c <_ZN6StringD1Ev>
          Serial.printf("A2_temp: %d\n\r", A2_temperature);
          Serial.printf("half_vref: %d\n\r", half_Vref);

      }
      return alpha1_ppmraw;
}
 8085f68:	4640      	mov	r0, r8
 8085f6a:	b00b      	add	sp, #44	; 0x2c
 8085f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8085f70:	851eb852 	.word	0x851eb852
 8085f74:	3fe851eb 	.word	0x3fe851eb
 8085f78:	d4fdf3b6 	.word	0xd4fdf3b6
 8085f7c:	3fd6e978 	.word	0x3fd6e978
 8085f80:	20000f08 	.word	0x20000f08
 8085f84:	08094308 	.word	0x08094308
 8085f88:	080934a7 	.word	0x080934a7
 8085f8c:	080934bb 	.word	0x080934bb
 8085f90:	20000ed0 	.word	0x20000ed0
 8085f94:	200004b0 	.word	0x200004b0
 8085f98:	447a0000 	.word	0x447a0000
 8085f9c:	3ff40000 	.word	0x3ff40000
 8085fa0:	3fe00000 	.word	0x3fe00000
 8085fa4:	080934de 	.word	0x080934de
 8085fa8:	080934f0 	.word	0x080934f0
 8085fac:	20000634 	.word	0x20000634
 8085fb0:	08093509 	.word	0x08093509
 8085fb4:	0809352d 	.word	0x0809352d
 8085fb8:	c2f00000 	.word	0xc2f00000
 8085fbc:	c3160000 	.word	0xc3160000
 8085fc0:	41700000 	.word	0x41700000
 8085fc4:	41c80000 	.word	0x41c80000
 8085fc8:	08093540 	.word	0x08093540
 8085fcc:	08093555 	.word	0x08093555
 8085fd0:	08093562 	.word	0x08093562
 8085fd4:	0809356f 	.word	0x0809356f
 8085fd8:	0809357d 	.word	0x0809357d
 8085fdc:	08091b2d 	.word	0x08091b2d
 8085fe0:	200004a8 	.word	0x200004a8

08085fe4 <_Z6readCOv>:
    sum /= 4095;
    sum *= 100;
    return sum;
}
//read Carbon monoxide alphasense sensor
float readCO(void){
 8085fe4:	b570      	push	{r4, r5, r6, lr}
    float float_offset;

    if(CO_socket == 0){
 8085fe6:	4b0f      	ldr	r3, [pc, #60]	; (8086024 <_Z6readCOv+0x40>)
 8085fe8:	4c0f      	ldr	r4, [pc, #60]	; (8086028 <_Z6readCOv+0x44>)
 8085fea:	681b      	ldr	r3, [r3, #0]
 8085fec:	b913      	cbnz	r3, 8085ff4 <_Z6readCOv+0x10>
        CO_float = readAlpha1();
 8085fee:	f7ff fe7f 	bl	8085cf0 <_Z10readAlpha1v>
 8085ff2:	e001      	b.n	8085ff8 <_Z6readCOv+0x14>
    }else{
        CO_float = readAlpha2();
 8085ff4:	f7fb fd38 	bl	8081a68 <_Z10readAlpha2v>
    }

    float_offset = CO_zero;
 8085ff8:	4b0c      	ldr	r3, [pc, #48]	; (808602c <_Z6readCOv+0x48>)
    float float_offset;

    if(CO_socket == 0){
        CO_float = readAlpha1();
    }else{
        CO_float = readAlpha2();
 8085ffa:	6020      	str	r0, [r4, #0]
    }

    float_offset = CO_zero;
 8085ffc:	6818      	ldr	r0, [r3, #0]
 8085ffe:	f007 fed9 	bl	808ddb4 <__aeabi_i2f>
    float_offset /= 1000;

    CO_float *= CO_slope;
 8086002:	4b0b      	ldr	r3, [pc, #44]	; (8086030 <_Z6readCOv+0x4c>)
        CO_float = readAlpha1();
    }else{
        CO_float = readAlpha2();
    }

    float_offset = CO_zero;
 8086004:	4606      	mov	r6, r0
    float_offset /= 1000;

    CO_float *= CO_slope;
    CO_float += float_offset;
 8086006:	6819      	ldr	r1, [r3, #0]
 8086008:	6820      	ldr	r0, [r4, #0]
 808600a:	f007 ff27 	bl	808de5c <__aeabi_fmul>
 808600e:	4909      	ldr	r1, [pc, #36]	; (8086034 <_Z6readCOv+0x50>)
 8086010:	4605      	mov	r5, r0
 8086012:	4630      	mov	r0, r6
 8086014:	f007 ffd6 	bl	808dfc4 <__aeabi_fdiv>
 8086018:	4601      	mov	r1, r0
 808601a:	4628      	mov	r0, r5
 808601c:	f007 fe16 	bl	808dc4c <__addsf3>
 8086020:	6020      	str	r0, [r4, #0]

    return CO_float;
}
 8086022:	bd70      	pop	{r4, r5, r6, pc}
 8086024:	20000b00 	.word	0x20000b00
 8086028:	20000f14 	.word	0x20000f14
 808602c:	20000bf4 	.word	0x20000bf4
 8086030:	200005f0 	.word	0x200005f0
 8086034:	447a0000 	.word	0x447a0000

08086038 <_Z20readAlpha1Constantlyv>:
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}

void readAlpha1Constantly(void){
 8086038:	b510      	push	{r4, lr}
    while(!Serial.available()){
        CO_float = readCO();
 808603a:	4c09      	ldr	r4, [pc, #36]	; (8086060 <_Z20readAlpha1Constantlyv+0x28>)
        Serial.println("\n\rIncorrect password!");
    }
}

void readAlpha1Constantly(void){
    while(!Serial.available()){
 808603c:	f006 fb54 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086040:	6803      	ldr	r3, [r0, #0]
 8086042:	691b      	ldr	r3, [r3, #16]
 8086044:	4798      	blx	r3
 8086046:	b948      	cbnz	r0, 808605c <_Z20readAlpha1Constantlyv+0x24>
        CO_float = readCO();
 8086048:	f7ff ffcc 	bl	8085fe4 <_Z6readCOv>
 808604c:	6020      	str	r0, [r4, #0]
        Serial.printf("CO: %1.3f ppm\n\r", CO_float);
 808604e:	f006 fb4b 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086052:	6822      	ldr	r2, [r4, #0]
 8086054:	4903      	ldr	r1, [pc, #12]	; (8086064 <_Z20readAlpha1Constantlyv+0x2c>)
 8086056:	f7ff fc09 	bl	808586c <_ZN5Print6printfIIfEEEjPKcDpT_>
        Serial.println("\n\rIncorrect password!");
    }
}

void readAlpha1Constantly(void){
    while(!Serial.available()){
 808605a:	e7ef      	b.n	808603c <_Z20readAlpha1Constantlyv+0x4>
 808605c:	bd10      	pop	{r4, pc}
 808605e:	bf00      	nop
 8086060:	20000f14 	.word	0x20000f14
 8086064:	0809358d 	.word	0x0809358d

08086068 <_Z10serialMenuv>:
  delay(1000);
}

/************************Serial menu stuff******************/

void serialMenu(){
 8086068:	b5f0      	push	{r4, r5, r6, r7, lr}
  incomingByte = '0';
 808606a:	4cac      	ldr	r4, [pc, #688]	; (808631c <_Z10serialMenuv+0x2b4>)
 808606c:	2330      	movs	r3, #48	; 0x30

    }else if(incomingByte == '!'){

        Serial.println("Outputting VOCs continuously!  Press any button to exit...");
        while(!Serial.available()){
            if (! bme.performReading()) {
 808606e:	4eac      	ldr	r6, [pc, #688]	; (8086320 <_Z10serialMenuv+0x2b8>)
  delay(1000);
}

/************************Serial menu stuff******************/

void serialMenu(){
 8086070:	b08d      	sub	sp, #52	; 0x34
  incomingByte = '0';
 8086072:	7023      	strb	r3, [r4, #0]
  while(incomingByte!= 'x')
 8086074:	7823      	ldrb	r3, [r4, #0]
 8086076:	2b78      	cmp	r3, #120	; 0x78
 8086078:	f000 8401 	beq.w	808687e <_Z10serialMenuv+0x816>
  {
    Serial.print("Menu>");
 808607c:	f006 fb34 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086080:	49a8      	ldr	r1, [pc, #672]	; (8086324 <_Z10serialMenuv+0x2bc>)
 8086082:	f005 faaf 	bl	808b5e4 <_ZN5Print5printEPKc>
    Serial.flush();
 8086086:	f006 fb2f 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808608a:	6803      	ldr	r3, [r0, #0]
 808608c:	69db      	ldr	r3, [r3, #28]
 808608e:	4798      	blx	r3
    while(!Serial.available());
 8086090:	f006 fb2a 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086094:	6803      	ldr	r3, [r0, #0]
 8086096:	691b      	ldr	r3, [r3, #16]
 8086098:	4798      	blx	r3
 808609a:	2800      	cmp	r0, #0
 808609c:	d0f8      	beq.n	8086090 <_Z10serialMenuv+0x28>
    incomingByte = Serial.read();
 808609e:	f006 fb23 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80860a2:	6803      	ldr	r3, [r0, #0]
 80860a4:	695b      	ldr	r3, [r3, #20]
 80860a6:	4798      	blx	r3
 80860a8:	b2c0      	uxtb	r0, r0
    if(incomingByte == 'a'){
 80860aa:	2861      	cmp	r0, #97	; 0x61
  while(incomingByte!= 'x')
  {
    Serial.print("Menu>");
    Serial.flush();
    while(!Serial.available());
    incomingByte = Serial.read();
 80860ac:	7020      	strb	r0, [r4, #0]
    if(incomingByte == 'a'){
 80860ae:	d102      	bne.n	80860b6 <_Z10serialMenuv+0x4e>
        serialGetCo2Slope();
 80860b0:	f7fd f892 	bl	80831d8 <_Z17serialGetCo2Slopev>
 80860b4:	e7de      	b.n	8086074 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'b'){
 80860b6:	2862      	cmp	r0, #98	; 0x62
 80860b8:	d102      	bne.n	80860c0 <_Z10serialMenuv+0x58>
        serialGetCo2Zero();
 80860ba:	f7fd f90b 	bl	80832d4 <_Z16serialGetCo2Zerov>
 80860be:	e7d9      	b.n	8086074 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'c'){
 80860c0:	2863      	cmp	r0, #99	; 0x63
 80860c2:	d102      	bne.n	80860ca <_Z10serialMenuv+0x62>
        serialGetCoSlope();
 80860c4:	f7fd f964 	bl	8083390 <_Z16serialGetCoSlopev>
 80860c8:	e7d4      	b.n	8086074 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'd'){
 80860ca:	2864      	cmp	r0, #100	; 0x64
 80860cc:	d102      	bne.n	80860d4 <_Z10serialMenuv+0x6c>
        serialGetCoZero();
 80860ce:	f7fd f9e5 	bl	808349c <_Z15serialGetCoZerov>
 80860d2:	e7cf      	b.n	8086074 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'e'){
 80860d4:	2865      	cmp	r0, #101	; 0x65
 80860d6:	d102      	bne.n	80860de <_Z10serialMenuv+0x76>
        serialGetPm1Slope();
 80860d8:	f7fd fa40 	bl	808355c <_Z17serialGetPm1Slopev>
 80860dc:	e7ca      	b.n	8086074 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'f'){
 80860de:	2866      	cmp	r0, #102	; 0x66
 80860e0:	d102      	bne.n	80860e8 <_Z10serialMenuv+0x80>
         serialGetPm1Zero();
 80860e2:	f7fd fab7 	bl	8083654 <_Z16serialGetPm1Zerov>
 80860e6:	e7c5      	b.n	8086074 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'g'){
 80860e8:	2867      	cmp	r0, #103	; 0x67
 80860ea:	d102      	bne.n	80860f2 <_Z10serialMenuv+0x8a>
        serialGetPm25Slope();
 80860ec:	f7fd fb10 	bl	8083710 <_Z18serialGetPm25Slopev>
 80860f0:	e7c0      	b.n	8086074 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'h'){
 80860f2:	2868      	cmp	r0, #104	; 0x68
 80860f4:	d102      	bne.n	80860fc <_Z10serialMenuv+0x94>
        serialGetPm25Zero();
 80860f6:	f7fd fb87 	bl	8083808 <_Z17serialGetPm25Zerov>
 80860fa:	e7bb      	b.n	8086074 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'i'){
 80860fc:	2869      	cmp	r0, #105	; 0x69
 80860fe:	d102      	bne.n	8086106 <_Z10serialMenuv+0x9e>
        serialGetPm10Slope();
 8086100:	f7fd fbe0 	bl	80838c4 <_Z18serialGetPm10Slopev>
 8086104:	e7b6      	b.n	8086074 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'j'){
 8086106:	286a      	cmp	r0, #106	; 0x6a
 8086108:	d102      	bne.n	8086110 <_Z10serialMenuv+0xa8>
        serialGetPm10Zero();
 808610a:	f7fd fc57 	bl	80839bc <_Z17serialGetPm10Zerov>
 808610e:	e7b1      	b.n	8086074 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'k'){
 8086110:	286b      	cmp	r0, #107	; 0x6b
 8086112:	d102      	bne.n	808611a <_Z10serialMenuv+0xb2>
        serialGetTemperatureSlope();
 8086114:	f7fd fcb0 	bl	8083a78 <_Z25serialGetTemperatureSlopev>
 8086118:	e7ac      	b.n	8086074 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'l'){
 808611a:	286c      	cmp	r0, #108	; 0x6c
 808611c:	d102      	bne.n	8086124 <_Z10serialMenuv+0xbc>
        serialGetTemperatureZero();
 808611e:	f7fd fd27 	bl	8083b70 <_Z24serialGetTemperatureZerov>
 8086122:	e7a7      	b.n	8086074 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'm'){
 8086124:	286d      	cmp	r0, #109	; 0x6d
 8086126:	d102      	bne.n	808612e <_Z10serialMenuv+0xc6>
        serialGetPressureSlope();
 8086128:	f7fd fd7e 	bl	8083c28 <_Z22serialGetPressureSlopev>
 808612c:	e7a2      	b.n	8086074 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'n'){
 808612e:	286e      	cmp	r0, #110	; 0x6e
 8086130:	d102      	bne.n	8086138 <_Z10serialMenuv+0xd0>
        serialGetPressureZero();
 8086132:	f7fd fdf5 	bl	8083d20 <_Z21serialGetPressureZerov>
 8086136:	e79d      	b.n	8086074 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'o'){
 8086138:	286f      	cmp	r0, #111	; 0x6f
 808613a:	d102      	bne.n	8086142 <_Z10serialMenuv+0xda>
        serialGetHumiditySlope();
 808613c:	f7fd fe4e 	bl	8083ddc <_Z22serialGetHumiditySlopev>
 8086140:	e798      	b.n	8086074 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'p'){
 8086142:	2870      	cmp	r0, #112	; 0x70
 8086144:	d102      	bne.n	808614c <_Z10serialMenuv+0xe4>
        serialGetHumidityZero();
 8086146:	f7fd fec7 	bl	8083ed8 <_Z21serialGetHumidityZerov>
 808614a:	e793      	b.n	8086074 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'q'){
 808614c:	2871      	cmp	r0, #113	; 0x71
 808614e:	d107      	bne.n	8086160 <_Z10serialMenuv+0xf8>
        Serial.println("Serial debugging enabled.");
 8086150:	f006 faca 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086154:	4974      	ldr	r1, [pc, #464]	; (8086328 <_Z10serialMenuv+0x2c0>)
 8086156:	f005 fa58 	bl	808b60a <_ZN5Print7printlnEPKc>
        debugging_enabled = 1;
 808615a:	4d74      	ldr	r5, [pc, #464]	; (808632c <_Z10serialMenuv+0x2c4>)
 808615c:	2301      	movs	r3, #1
 808615e:	e008      	b.n	8086172 <_Z10serialMenuv+0x10a>
        EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
    }else if(incomingByte == 'r'){
 8086160:	2872      	cmp	r0, #114	; 0x72
 8086162:	d10e      	bne.n	8086182 <_Z10serialMenuv+0x11a>
        Serial.println("Serial debugging disabled.");
 8086164:	f006 fac0 	bl	808c6e8 <_Z16_fetch_usbserialv>
        debugging_enabled = 0;
 8086168:	4d70      	ldr	r5, [pc, #448]	; (808632c <_Z10serialMenuv+0x2c4>)
    }else if(incomingByte == 'q'){
        Serial.println("Serial debugging enabled.");
        debugging_enabled = 1;
        EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
    }else if(incomingByte == 'r'){
        Serial.println("Serial debugging disabled.");
 808616a:	4971      	ldr	r1, [pc, #452]	; (8086330 <_Z10serialMenuv+0x2c8>)
 808616c:	f005 fa4d 	bl	808b60a <_ZN5Print7printlnEPKc>
        debugging_enabled = 0;
 8086170:	2300      	movs	r3, #0
 8086172:	602b      	str	r3, [r5, #0]
        EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
 8086174:	f006 fea6 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8086178:	4629      	mov	r1, r5
 808617a:	2048      	movs	r0, #72	; 0x48
 808617c:	f7fa fdc2 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 8086180:	e778      	b.n	8086074 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 's'){
 8086182:	2873      	cmp	r0, #115	; 0x73
 8086184:	d10b      	bne.n	808619e <_Z10serialMenuv+0x136>
        Serial.println(String(HEADER_STRING));
 8086186:	f006 faaf 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808618a:	4605      	mov	r5, r0
 808618c:	4969      	ldr	r1, [pc, #420]	; (8086334 <_Z10serialMenuv+0x2cc>)
 808618e:	a808      	add	r0, sp, #32
 8086190:	f005 f813 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
 8086194:	9908      	ldr	r1, [sp, #32]
 8086196:	4628      	mov	r0, r5
 8086198:	f005 fa37 	bl	808b60a <_ZN5Print7printlnEPKc>
 808619c:	e364      	b.n	8086868 <_Z10serialMenuv+0x800>
    }else if(incomingByte == 't'){
 808619e:	2874      	cmp	r0, #116	; 0x74
 80861a0:	d102      	bne.n	80861a8 <_Z10serialMenuv+0x140>
        serialGetTimeDate();
 80861a2:	f7fc ff1b 	bl	8082fdc <_Z17serialGetTimeDatev>
 80861a6:	e765      	b.n	8086074 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'u'){
 80861a8:	2875      	cmp	r0, #117	; 0x75
 80861aa:	d102      	bne.n	80861b2 <_Z10serialMenuv+0x14a>
        serialGetZone();
 80861ac:	f7fc ff64 	bl	8083078 <_Z13serialGetZonev>
 80861b0:	e760      	b.n	8086074 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'v'){
 80861b2:	2876      	cmp	r0, #118	; 0x76
 80861b4:	d102      	bne.n	80861bc <_Z10serialMenuv+0x154>
        serialGetDeviceId();
 80861b6:	f7fc fe55 	bl	8082e64 <_Z17serialGetDeviceIdv>
 80861ba:	e75b      	b.n	8086074 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'w'){
 80861bc:	2877      	cmp	r0, #119	; 0x77
 80861be:	d102      	bne.n	80861c6 <_Z10serialMenuv+0x15e>
        serialGetWifiCredentials();
 80861c0:	f7fc fd36 	bl	8082c30 <_Z24serialGetWifiCredentialsv>
 80861c4:	e756      	b.n	8086074 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'y'){
 80861c6:	2879      	cmp	r0, #121	; 0x79
 80861c8:	d10d      	bne.n	80861e6 <_Z10serialMenuv+0x17e>
        if(serial_cellular_enabled == 0){
 80861ca:	4d5b      	ldr	r5, [pc, #364]	; (8086338 <_Z10serialMenuv+0x2d0>)
 80861cc:	682b      	ldr	r3, [r5, #0]
 80861ce:	b91b      	cbnz	r3, 80861d8 <_Z10serialMenuv+0x170>
            Serial.println("Enabling Cellular.");
 80861d0:	f006 fa8a 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80861d4:	4959      	ldr	r1, [pc, #356]	; (808633c <_Z10serialMenuv+0x2d4>)
 80861d6:	e002      	b.n	80861de <_Z10serialMenuv+0x176>
        }else{
            Serial.println("Cellular already enabled.");
 80861d8:	f006 fa86 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80861dc:	4958      	ldr	r1, [pc, #352]	; (8086340 <_Z10serialMenuv+0x2d8>)
 80861de:	f005 fa14 	bl	808b60a <_ZN5Print7printlnEPKc>
        }
        serial_cellular_enabled = 1;
 80861e2:	2301      	movs	r3, #1
 80861e4:	e014      	b.n	8086210 <_Z10serialMenuv+0x1a8>
        EEPROM.put(SERIAL_CELLULAR_EN_MEM_ADDRESS, serial_cellular_enabled);
    }else if(incomingByte == 'z'){
 80861e6:	287a      	cmp	r0, #122	; 0x7a
 80861e8:	d118      	bne.n	808621c <_Z10serialMenuv+0x1b4>
        if(serial_cellular_enabled == 1){
 80861ea:	4d53      	ldr	r5, [pc, #332]	; (8086338 <_Z10serialMenuv+0x2d0>)
 80861ec:	682b      	ldr	r3, [r5, #0]
 80861ee:	2b01      	cmp	r3, #1
 80861f0:	d108      	bne.n	8086204 <_Z10serialMenuv+0x19c>
            Serial.println("Disabling Cellular");
 80861f2:	f006 fa79 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80861f6:	4953      	ldr	r1, [pc, #332]	; (8086344 <_Z10serialMenuv+0x2dc>)
 80861f8:	f005 fa07 	bl	808b60a <_ZN5Print7printlnEPKc>
            Cellular.off();
 80861fc:	4852      	ldr	r0, [pc, #328]	; (8086348 <_Z10serialMenuv+0x2e0>)
 80861fe:	f7fa fdb3 	bl	8080d68 <_ZN5spark13CellularClass3offEv>
 8086202:	e004      	b.n	808620e <_Z10serialMenuv+0x1a6>
        }else{
            Serial.println("Cellular already disabled.");
 8086204:	f006 fa70 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086208:	4950      	ldr	r1, [pc, #320]	; (808634c <_Z10serialMenuv+0x2e4>)
 808620a:	f005 f9fe 	bl	808b60a <_ZN5Print7printlnEPKc>
        }
        serial_cellular_enabled = 0;
 808620e:	2300      	movs	r3, #0
 8086210:	602b      	str	r3, [r5, #0]
        EEPROM.put(SERIAL_CELLULAR_EN_MEM_ADDRESS, serial_cellular_enabled);
 8086212:	f006 fe57 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8086216:	4948      	ldr	r1, [pc, #288]	; (8086338 <_Z10serialMenuv+0x2d0>)
 8086218:	2044      	movs	r0, #68	; 0x44
 808621a:	e7af      	b.n	808617c <_Z10serialMenuv+0x114>
    }else if(incomingByte == 'F'){
 808621c:	2846      	cmp	r0, #70	; 0x46
 808621e:	d10f      	bne.n	8086240 <_Z10serialMenuv+0x1d8>
        if(temperature_units == CELCIUS){
 8086220:	4b4b      	ldr	r3, [pc, #300]	; (8086350 <_Z10serialMenuv+0x2e8>)
 8086222:	681a      	ldr	r2, [r3, #0]
 8086224:	2a01      	cmp	r2, #1
 8086226:	d101      	bne.n	808622c <_Z10serialMenuv+0x1c4>
            temperature_units = FARENHEIT;
 8086228:	2200      	movs	r2, #0
 808622a:	e00f      	b.n	808624c <_Z10serialMenuv+0x1e4>

        }else{
            Serial.println("Temperature units already set to Fareneit.");
 808622c:	f006 fa5c 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086230:	4948      	ldr	r1, [pc, #288]	; (8086354 <_Z10serialMenuv+0x2ec>)
 8086232:	f005 f9ea 	bl	808b60a <_ZN5Print7printlnEPKc>
        }

        EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, temperature_units);
 8086236:	f006 fe45 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 808623a:	4945      	ldr	r1, [pc, #276]	; (8086350 <_Z10serialMenuv+0x2e8>)
 808623c:	2060      	movs	r0, #96	; 0x60
 808623e:	e79d      	b.n	808617c <_Z10serialMenuv+0x114>

    }else if(incomingByte == 'C'){
 8086240:	2843      	cmp	r0, #67	; 0x43
 8086242:	d109      	bne.n	8086258 <_Z10serialMenuv+0x1f0>
        if(temperature_units == FARENHEIT){
 8086244:	4b42      	ldr	r3, [pc, #264]	; (8086350 <_Z10serialMenuv+0x2e8>)
 8086246:	681a      	ldr	r2, [r3, #0]
 8086248:	b912      	cbnz	r2, 8086250 <_Z10serialMenuv+0x1e8>
            temperature_units = CELCIUS;
 808624a:	2201      	movs	r2, #1
 808624c:	601a      	str	r2, [r3, #0]
 808624e:	e7f2      	b.n	8086236 <_Z10serialMenuv+0x1ce>

        }else{
            Serial.println("Temperature units already set to Celcius.");
 8086250:	f006 fa4a 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086254:	4940      	ldr	r1, [pc, #256]	; (8086358 <_Z10serialMenuv+0x2f0>)
 8086256:	e7ec      	b.n	8086232 <_Z10serialMenuv+0x1ca>
        }

        EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, temperature_units);
    }else if(incomingByte == 'D'){
 8086258:	2844      	cmp	r0, #68	; 0x44
 808625a:	d113      	bne.n	8086284 <_Z10serialMenuv+0x21c>
        if(new_temperature_sensor_enabled == 1){
 808625c:	4b3f      	ldr	r3, [pc, #252]	; (808635c <_Z10serialMenuv+0x2f4>)
 808625e:	681a      	ldr	r2, [r3, #0]
 8086260:	2a01      	cmp	r2, #1
 8086262:	d105      	bne.n	8086270 <_Z10serialMenuv+0x208>
            new_temperature_sensor_enabled = 0;
 8086264:	2200      	movs	r2, #0
 8086266:	601a      	str	r2, [r3, #0]
            Serial.println("Disabling new temperature sensor");
 8086268:	f006 fa3e 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808626c:	493c      	ldr	r1, [pc, #240]	; (8086360 <_Z10serialMenuv+0x2f8>)
 808626e:	e002      	b.n	8086276 <_Z10serialMenuv+0x20e>
        }else{

            Serial.println("Temperature sensor already disabled");
 8086270:	f006 fa3a 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086274:	493b      	ldr	r1, [pc, #236]	; (8086364 <_Z10serialMenuv+0x2fc>)
 8086276:	f005 f9c8 	bl	808b60a <_ZN5Print7printlnEPKc>
        }
        EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, new_temperature_sensor_enabled);
 808627a:	f006 fe23 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 808627e:	4937      	ldr	r1, [pc, #220]	; (808635c <_Z10serialMenuv+0x2f4>)
 8086280:	2068      	movs	r0, #104	; 0x68
 8086282:	e77b      	b.n	808617c <_Z10serialMenuv+0x114>

    }else if(incomingByte == 'E'){
 8086284:	2845      	cmp	r0, #69	; 0x45
 8086286:	d10d      	bne.n	80862a4 <_Z10serialMenuv+0x23c>
        if(new_temperature_sensor_enabled == 1){
 8086288:	4b34      	ldr	r3, [pc, #208]	; (808635c <_Z10serialMenuv+0x2f4>)
 808628a:	681a      	ldr	r2, [r3, #0]
 808628c:	2a01      	cmp	r2, #1
 808628e:	d103      	bne.n	8086298 <_Z10serialMenuv+0x230>
            Serial.println("Temperature sensor already enabled");
 8086290:	f006 fa2a 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086294:	4934      	ldr	r1, [pc, #208]	; (8086368 <_Z10serialMenuv+0x300>)
 8086296:	e7ee      	b.n	8086276 <_Z10serialMenuv+0x20e>
        }else{
            new_temperature_sensor_enabled = 1;
 8086298:	2201      	movs	r2, #1
 808629a:	601a      	str	r2, [r3, #0]
            Serial.println("Temperatue sensor now enabled");
 808629c:	f006 fa24 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80862a0:	4932      	ldr	r1, [pc, #200]	; (808636c <_Z10serialMenuv+0x304>)
 80862a2:	e7e8      	b.n	8086276 <_Z10serialMenuv+0x20e>
        }
        EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, new_temperature_sensor_enabled );

    }else if(incomingByte == 'G'){      //enable analog reading of ozone and disable esp reading of ozone
 80862a4:	2847      	cmp	r0, #71	; 0x47
 80862a6:	d113      	bne.n	80862d0 <_Z10serialMenuv+0x268>
        if(ozone_analog_enabled == 1){
 80862a8:	4b31      	ldr	r3, [pc, #196]	; (8086370 <_Z10serialMenuv+0x308>)
 80862aa:	681a      	ldr	r2, [r3, #0]
 80862ac:	2a01      	cmp	r2, #1
 80862ae:	d103      	bne.n	80862b8 <_Z10serialMenuv+0x250>
            Serial.println("Analog reading of ozone already enabled");
 80862b0:	f006 fa1a 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80862b4:	492f      	ldr	r1, [pc, #188]	; (8086374 <_Z10serialMenuv+0x30c>)
 80862b6:	e004      	b.n	80862c2 <_Z10serialMenuv+0x25a>
        }else{
            ozone_analog_enabled = 1;
 80862b8:	2201      	movs	r2, #1
 80862ba:	601a      	str	r2, [r3, #0]
            Serial.println("Analog reading of ozone now enabled");
 80862bc:	f006 fa14 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80862c0:	492d      	ldr	r1, [pc, #180]	; (8086378 <_Z10serialMenuv+0x310>)
 80862c2:	f005 f9a2 	bl	808b60a <_ZN5Print7printlnEPKc>
        }
        EEPROM.put(OZONE_A_OR_D_MEM_ADDRESS, ozone_analog_enabled);
 80862c6:	f006 fdfd 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 80862ca:	4929      	ldr	r1, [pc, #164]	; (8086370 <_Z10serialMenuv+0x308>)
 80862cc:	206c      	movs	r0, #108	; 0x6c
 80862ce:	e755      	b.n	808617c <_Z10serialMenuv+0x114>

    }else if(incomingByte == 'H'){      //disable analog reading of ozone and read from esp
 80862d0:	2848      	cmp	r0, #72	; 0x48
 80862d2:	d10c      	bne.n	80862ee <_Z10serialMenuv+0x286>
        if(ozone_analog_enabled == 0){
 80862d4:	4b26      	ldr	r3, [pc, #152]	; (8086370 <_Z10serialMenuv+0x308>)
 80862d6:	681a      	ldr	r2, [r3, #0]
 80862d8:	b91a      	cbnz	r2, 80862e2 <_Z10serialMenuv+0x27a>
            Serial.println("Digital reading of ozone already enabled");
 80862da:	f006 fa05 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80862de:	4927      	ldr	r1, [pc, #156]	; (808637c <_Z10serialMenuv+0x314>)
 80862e0:	e7ef      	b.n	80862c2 <_Z10serialMenuv+0x25a>
        }else{
            ozone_analog_enabled = 0;
 80862e2:	2200      	movs	r2, #0
 80862e4:	601a      	str	r2, [r3, #0]
            Serial.println("Digital reading of ozone now enabled");
 80862e6:	f006 f9ff 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80862ea:	4925      	ldr	r1, [pc, #148]	; (8086380 <_Z10serialMenuv+0x318>)
 80862ec:	e7e9      	b.n	80862c2 <_Z10serialMenuv+0x25a>
        }
        EEPROM.put(OZONE_A_OR_D_MEM_ADDRESS, ozone_analog_enabled);

    }else if(incomingByte == 'I'){      //disable analog reading of ozone and read from esp
 80862ee:	2849      	cmp	r0, #73	; 0x49
 80862f0:	d102      	bne.n	80862f8 <_Z10serialMenuv+0x290>
        serialGetAverageTime();
 80862f2:	f7fc ff0d 	bl	8083110 <_Z20serialGetAverageTimev>
 80862f6:	e6bd      	b.n	8086074 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'J'){
 80862f8:	284a      	cmp	r0, #74	; 0x4a
 80862fa:	d105      	bne.n	8086308 <_Z10serialMenuv+0x2a0>
        resetESP();
 80862fc:	f7fc f91e 	bl	808253c <_Z8resetESPv>
        Serial.println("ESP reset!");
 8086300:	f006 f9f2 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086304:	491f      	ldr	r1, [pc, #124]	; (8086384 <_Z10serialMenuv+0x31c>)
 8086306:	e04f      	b.n	80863a8 <_Z10serialMenuv+0x340>
    }else if(incomingByte == 'K'){
 8086308:	284b      	cmp	r0, #75	; 0x4b
 808630a:	d13f      	bne.n	808638c <_Z10serialMenuv+0x324>
      Serial.println("Outputting GPS continuously");
 808630c:	f006 f9ec 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086310:	491d      	ldr	r1, [pc, #116]	; (8086388 <_Z10serialMenuv+0x320>)
 8086312:	f005 f97a 	bl	808b60a <_ZN5Print7printlnEPKc>
      echoGps();
 8086316:	f7fb f8ed 	bl	80814f4 <_Z7echoGpsv>
 808631a:	e6ab      	b.n	8086074 <_Z10serialMenuv+0xc>
 808631c:	20000b8c 	.word	0x20000b8c
 8086320:	20000b04 	.word	0x20000b04
 8086324:	0809359d 	.word	0x0809359d
 8086328:	080935a3 	.word	0x080935a3
 808632c:	20000f08 	.word	0x20000f08
 8086330:	080935bd 	.word	0x080935bd
 8086334:	08093298 	.word	0x08093298
 8086338:	2000062c 	.word	0x2000062c
 808633c:	080935d8 	.word	0x080935d8
 8086340:	080935eb 	.word	0x080935eb
 8086344:	08093605 	.word	0x08093605
 8086348:	20001484 	.word	0x20001484
 808634c:	08093618 	.word	0x08093618
 8086350:	20000ac0 	.word	0x20000ac0
 8086354:	08093633 	.word	0x08093633
 8086358:	0809365e 	.word	0x0809365e
 808635c:	20000b84 	.word	0x20000b84
 8086360:	08093688 	.word	0x08093688
 8086364:	080936a9 	.word	0x080936a9
 8086368:	080936cd 	.word	0x080936cd
 808636c:	080936f0 	.word	0x080936f0
 8086370:	20000f74 	.word	0x20000f74
 8086374:	0809370e 	.word	0x0809370e
 8086378:	08093736 	.word	0x08093736
 808637c:	0809375a 	.word	0x0809375a
 8086380:	08093783 	.word	0x08093783
 8086384:	08091e96 	.word	0x08091e96
 8086388:	080937a8 	.word	0x080937a8
    }else if(incomingByte == 'L'){
 808638c:	284c      	cmp	r0, #76	; 0x4c
 808638e:	d102      	bne.n	8086396 <_Z10serialMenuv+0x32e>
      serialResetSettings();
 8086390:	f7fc fdec 	bl	8082f6c <_Z19serialResetSettingsv>
 8086394:	e66e      	b.n	8086074 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'M'){
 8086396:	284d      	cmp	r0, #77	; 0x4d
 8086398:	d110      	bne.n	80863bc <_Z10serialMenuv+0x354>
      //serialTestRemoteFunction();
      if(battery_threshold_enable == 1){
 808639a:	4daf      	ldr	r5, [pc, #700]	; (8086658 <_Z10serialMenuv+0x5f0>)
 808639c:	682b      	ldr	r3, [r5, #0]
 808639e:	2b01      	cmp	r3, #1
 80863a0:	d105      	bne.n	80863ae <_Z10serialMenuv+0x346>
          Serial.println("Battery threshold already enabled");
 80863a2:	f006 f9a1 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80863a6:	49ad      	ldr	r1, [pc, #692]	; (808665c <_Z10serialMenuv+0x5f4>)
 80863a8:	f005 f92f 	bl	808b60a <_ZN5Print7printlnEPKc>
 80863ac:	e662      	b.n	8086074 <_Z10serialMenuv+0xc>
      }else{
          Serial.println("Enabling battery threshold limiting");
 80863ae:	f006 f99b 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80863b2:	49ab      	ldr	r1, [pc, #684]	; (8086660 <_Z10serialMenuv+0x5f8>)
 80863b4:	f005 f929 	bl	808b60a <_ZN5Print7printlnEPKc>
          battery_threshold_enable = 1;
 80863b8:	2301      	movs	r3, #1
 80863ba:	e00e      	b.n	80863da <_Z10serialMenuv+0x372>
          EEPROM.put(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
      }

    }else if(incomingByte == 'N'){
 80863bc:	284e      	cmp	r0, #78	; 0x4e
 80863be:	d112      	bne.n	80863e6 <_Z10serialMenuv+0x37e>
      //serialTestRemoteFunction();
      if(battery_threshold_enable == 0){
 80863c0:	4da5      	ldr	r5, [pc, #660]	; (8086658 <_Z10serialMenuv+0x5f0>)
 80863c2:	682b      	ldr	r3, [r5, #0]
 80863c4:	b91b      	cbnz	r3, 80863ce <_Z10serialMenuv+0x366>
          Serial.println("Battery threshold already disabled");
 80863c6:	f006 f98f 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80863ca:	49a6      	ldr	r1, [pc, #664]	; (8086664 <_Z10serialMenuv+0x5fc>)
 80863cc:	e7ec      	b.n	80863a8 <_Z10serialMenuv+0x340>
      }else{
          Serial.println("Disabling battery threshold limiting");
 80863ce:	f006 f98b 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80863d2:	49a5      	ldr	r1, [pc, #660]	; (8086668 <_Z10serialMenuv+0x600>)
 80863d4:	f005 f919 	bl	808b60a <_ZN5Print7printlnEPKc>
          battery_threshold_enable = 0;
 80863d8:	2300      	movs	r3, #0
 80863da:	602b      	str	r3, [r5, #0]
          EEPROM.put(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
 80863dc:	f006 fd72 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 80863e0:	4629      	mov	r1, r5
 80863e2:	2078      	movs	r0, #120	; 0x78
 80863e4:	e6ca      	b.n	808617c <_Z10serialMenuv+0x114>
      }

    }else if(incomingByte == 'O'){
 80863e6:	284f      	cmp	r0, #79	; 0x4f
 80863e8:	d107      	bne.n	80863fa <_Z10serialMenuv+0x392>
        //Serial.println("Changing frequency for gps");
        //changeFrequency();
        Serial.println("Enabling low power for gps");
 80863ea:	f006 f97d 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80863ee:	499f      	ldr	r1, [pc, #636]	; (808666c <_Z10serialMenuv+0x604>)
 80863f0:	f005 f90b 	bl	808b60a <_ZN5Print7printlnEPKc>
        enableLowPowerGPS();
 80863f4:	f7fb f8e4 	bl	80815c0 <_Z17enableLowPowerGPSv>
 80863f8:	e63c      	b.n	8086074 <_Z10serialMenuv+0xc>
    }else if(incomingByte  == 'P'){
 80863fa:	2850      	cmp	r0, #80	; 0x50
 80863fc:	d106      	bne.n	808640c <_Z10serialMenuv+0x3a4>
        Serial.println("Turning off batfet");
 80863fe:	f006 f973 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086402:	499b      	ldr	r1, [pc, #620]	; (8086670 <_Z10serialMenuv+0x608>)
 8086404:	f005 f901 	bl	808b60a <_ZN5Print7printlnEPKc>
        writeRegister(7, 0b01101011);   //turn off batfet
 8086408:	216b      	movs	r1, #107	; 0x6b
 808640a:	e007      	b.n	808641c <_Z10serialMenuv+0x3b4>
    }else if(incomingByte == 'Q'){
 808640c:	2851      	cmp	r0, #81	; 0x51
 808640e:	d109      	bne.n	8086424 <_Z10serialMenuv+0x3bc>

        Serial.println("Allowing batfet to turn on");
 8086410:	f006 f96a 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086414:	4997      	ldr	r1, [pc, #604]	; (8086674 <_Z10serialMenuv+0x60c>)
 8086416:	f005 f8f8 	bl	808b60a <_ZN5Print7printlnEPKc>
        writeRegister(7, 0b01001011);   //allow batfet to turn on
 808641a:	214b      	movs	r1, #75	; 0x4b
 808641c:	2007      	movs	r0, #7
 808641e:	f7fa fd77 	bl	8080f10 <_Z13writeRegisterhh>
 8086422:	e627      	b.n	8086074 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'R'){
 8086424:	2852      	cmp	r0, #82	; 0x52
 8086426:	d117      	bne.n	8086458 <_Z10serialMenuv+0x3f0>
        if(abc_logic_enabled){
 8086428:	4d93      	ldr	r5, [pc, #588]	; (8086678 <_Z10serialMenuv+0x610>)
 808642a:	682b      	ldr	r3, [r5, #0]
 808642c:	b183      	cbz	r3, 8086450 <_Z10serialMenuv+0x3e8>
            Serial.println("Disabling ABC logic for CO2 sensor");
 808642e:	f006 f95b 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086432:	4992      	ldr	r1, [pc, #584]	; (808667c <_Z10serialMenuv+0x614>)
 8086434:	f005 f8e9 	bl	808b60a <_ZN5Print7printlnEPKc>
            abc_logic_enabled = 0;
 8086438:	2300      	movs	r3, #0
 808643a:	602b      	str	r3, [r5, #0]
            EEPROM.put(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 808643c:	f006 fd42 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8086440:	4629      	mov	r1, r5
 8086442:	207c      	movs	r0, #124	; 0x7c
 8086444:	f7fa fc5e 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
            t6713.disableABCLogic();
 8086448:	488d      	ldr	r0, [pc, #564]	; (8086680 <_Z10serialMenuv+0x618>)
 808644a:	f001 f92c 	bl	80876a6 <_ZN13Telaire_T671315disableABCLogicEv>
 808644e:	e611      	b.n	8086074 <_Z10serialMenuv+0xc>
        }else{
            Serial.println("ABC logic already disabled");
 8086450:	f006 f94a 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086454:	498b      	ldr	r1, [pc, #556]	; (8086684 <_Z10serialMenuv+0x61c>)
 8086456:	e7a7      	b.n	80863a8 <_Z10serialMenuv+0x340>
        }

    }else if(incomingByte == 'S'){
 8086458:	2853      	cmp	r0, #83	; 0x53
 808645a:	d117      	bne.n	808648c <_Z10serialMenuv+0x424>
        if(!abc_logic_enabled){
 808645c:	4d86      	ldr	r5, [pc, #536]	; (8086678 <_Z10serialMenuv+0x610>)
 808645e:	682b      	ldr	r3, [r5, #0]
 8086460:	b983      	cbnz	r3, 8086484 <_Z10serialMenuv+0x41c>
            Serial.println("Enabling abc logic for CO2 sensor");
 8086462:	f006 f941 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086466:	4988      	ldr	r1, [pc, #544]	; (8086688 <_Z10serialMenuv+0x620>)
 8086468:	f005 f8cf 	bl	808b60a <_ZN5Print7printlnEPKc>
            abc_logic_enabled = 1;
 808646c:	2301      	movs	r3, #1
 808646e:	602b      	str	r3, [r5, #0]
            EEPROM.put(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 8086470:	f006 fd28 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8086474:	4629      	mov	r1, r5
 8086476:	207c      	movs	r0, #124	; 0x7c
 8086478:	f7fa fc44 	bl	8080d04 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
            t6713.enableABCLogic();
 808647c:	4880      	ldr	r0, [pc, #512]	; (8086680 <_Z10serialMenuv+0x618>)
 808647e:	f001 f937 	bl	80876f0 <_ZN13Telaire_T671314enableABCLogicEv>
 8086482:	e5f7      	b.n	8086074 <_Z10serialMenuv+0xc>
        }else{
            Serial.println("ABC logic already enabled");
 8086484:	f006 f930 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086488:	4980      	ldr	r1, [pc, #512]	; (808668c <_Z10serialMenuv+0x624>)
 808648a:	e78d      	b.n	80863a8 <_Z10serialMenuv+0x340>
        }
    }else if(incomingByte == 'T'){
 808648c:	2854      	cmp	r0, #84	; 0x54
 808648e:	d115      	bne.n	80864bc <_Z10serialMenuv+0x454>
        if(!hih8120_enabled){
 8086490:	4d7f      	ldr	r5, [pc, #508]	; (8086690 <_Z10serialMenuv+0x628>)
 8086492:	682b      	ldr	r3, [r5, #0]
 8086494:	b933      	cbnz	r3, 80864a4 <_Z10serialMenuv+0x43c>
            Serial.println("Enabling HIH8120 RH sensor");
 8086496:	f006 f927 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808649a:	497e      	ldr	r1, [pc, #504]	; (8086694 <_Z10serialMenuv+0x62c>)
 808649c:	f005 f8b5 	bl	808b60a <_ZN5Print7printlnEPKc>
            hih8120_enabled = 1;
 80864a0:	2301      	movs	r3, #1
 80864a2:	e005      	b.n	80864b0 <_Z10serialMenuv+0x448>
            EEPROM.put(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);

        }else{
            Serial.println("Disabling HIH8120 RH sensor");
 80864a4:	f006 f920 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80864a8:	497b      	ldr	r1, [pc, #492]	; (8086698 <_Z10serialMenuv+0x630>)
 80864aa:	f005 f8ae 	bl	808b60a <_ZN5Print7printlnEPKc>
            hih8120_enabled = 0;
 80864ae:	2300      	movs	r3, #0
 80864b0:	602b      	str	r3, [r5, #0]
            EEPROM.put(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);
 80864b2:	f006 fd07 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 80864b6:	4629      	mov	r1, r5
 80864b8:	2080      	movs	r0, #128	; 0x80
 80864ba:	e65f      	b.n	808617c <_Z10serialMenuv+0x114>
        }

    }else if(incomingByte == 'U'){
 80864bc:	2855      	cmp	r0, #85	; 0x55
 80864be:	d115      	bne.n	80864ec <_Z10serialMenuv+0x484>
        if(!CO_socket){
 80864c0:	4d76      	ldr	r5, [pc, #472]	; (808669c <_Z10serialMenuv+0x634>)
 80864c2:	682b      	ldr	r3, [r5, #0]
 80864c4:	b933      	cbnz	r3, 80864d4 <_Z10serialMenuv+0x46c>
            Serial.println("Now reading CO from U20-Alpha2");
 80864c6:	f006 f90f 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80864ca:	4975      	ldr	r1, [pc, #468]	; (80866a0 <_Z10serialMenuv+0x638>)
 80864cc:	f005 f89d 	bl	808b60a <_ZN5Print7printlnEPKc>
            CO_socket = 1;
 80864d0:	2301      	movs	r3, #1
 80864d2:	e005      	b.n	80864e0 <_Z10serialMenuv+0x478>
            EEPROM.put(CO_SOCKET_MEM_ADDRESS, CO_socket);

        }else{
            Serial.println("Now reading CO from U19-Alpha1");
 80864d4:	f006 f908 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80864d8:	4972      	ldr	r1, [pc, #456]	; (80866a4 <_Z10serialMenuv+0x63c>)
 80864da:	f005 f896 	bl	808b60a <_ZN5Print7printlnEPKc>
            CO_socket = 0;
 80864de:	2300      	movs	r3, #0
 80864e0:	602b      	str	r3, [r5, #0]
            EEPROM.put(CO_SOCKET_MEM_ADDRESS, CO_socket);
 80864e2:	f006 fcef 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 80864e6:	4629      	mov	r1, r5
 80864e8:	2084      	movs	r0, #132	; 0x84
 80864ea:	e647      	b.n	808617c <_Z10serialMenuv+0x114>
        }
    }else if(incomingByte == 'V'){
 80864ec:	2856      	cmp	r0, #86	; 0x56
 80864ee:	d108      	bne.n	8086502 <_Z10serialMenuv+0x49a>
        Serial.println("Reseting the CO2 sensor");
 80864f0:	f006 f8fa 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80864f4:	496c      	ldr	r1, [pc, #432]	; (80866a8 <_Z10serialMenuv+0x640>)
 80864f6:	f005 f888 	bl	808b60a <_ZN5Print7printlnEPKc>
        t6713.resetSensor();
 80864fa:	4861      	ldr	r0, [pc, #388]	; (8086680 <_Z10serialMenuv+0x618>)
 80864fc:	f001 f8ae 	bl	808765c <_ZN13Telaire_T671311resetSensorEv>
 8086500:	e5b8      	b.n	8086074 <_Z10serialMenuv+0xc>

    }else if(incomingByte == '1'){
 8086502:	2831      	cmp	r0, #49	; 0x31
 8086504:	d102      	bne.n	808650c <_Z10serialMenuv+0x4a4>
        serialGetLowerLimit();
 8086506:	f7fd fd43 	bl	8083f90 <_Z19serialGetLowerLimitv>
 808650a:	e5b3      	b.n	8086074 <_Z10serialMenuv+0xc>
    }else if(incomingByte == '2'){
 808650c:	2832      	cmp	r0, #50	; 0x32
 808650e:	d102      	bne.n	8086516 <_Z10serialMenuv+0x4ae>
        serialGetUpperLimit();
 8086510:	f7fd fdc2 	bl	8084098 <_Z19serialGetUpperLimitv>
 8086514:	e5ae      	b.n	8086074 <_Z10serialMenuv+0xc>
    }else if(incomingByte == '3'){
 8086516:	2833      	cmp	r0, #51	; 0x33
 8086518:	d116      	bne.n	8086548 <_Z10serialMenuv+0x4e0>
        Serial.print("APP Version: ");
 808651a:	f006 f8e5 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808651e:	4963      	ldr	r1, [pc, #396]	; (80866ac <_Z10serialMenuv+0x644>)
 8086520:	f005 f860 	bl	808b5e4 <_ZN5Print5printEPKc>
        Serial.println(APP_VERSION);
 8086524:	f006 f8e0 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086528:	220a      	movs	r2, #10
 808652a:	2107      	movs	r1, #7
 808652c:	f005 f8db 	bl	808b6e6 <_ZN5Print7printlnEii>
        Serial.print("Build: ");
 8086530:	f006 f8da 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086534:	495e      	ldr	r1, [pc, #376]	; (80866b0 <_Z10serialMenuv+0x648>)
 8086536:	f005 f855 	bl	808b5e4 <_ZN5Print5printEPKc>
        Serial.println(BUILD_VERSION);
 808653a:	f006 f8d5 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808653e:	220a      	movs	r2, #10
 8086540:	210e      	movs	r1, #14
 8086542:	f005 f8d0 	bl	808b6e6 <_ZN5Print7printlnEii>
 8086546:	e595      	b.n	8086074 <_Z10serialMenuv+0xc>
    }else if(incomingByte == '4'){
 8086548:	2834      	cmp	r0, #52	; 0x34
 808654a:	d10d      	bne.n	8086568 <_Z10serialMenuv+0x500>
        if(ozone_enabled == 0){
 808654c:	4d59      	ldr	r5, [pc, #356]	; (80866b4 <_Z10serialMenuv+0x64c>)
 808654e:	682b      	ldr	r3, [r5, #0]
 8086550:	b91b      	cbnz	r3, 808655a <_Z10serialMenuv+0x4f2>
            Serial.println("Enabling Ozone");
 8086552:	f006 f8c9 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086556:	4958      	ldr	r1, [pc, #352]	; (80866b8 <_Z10serialMenuv+0x650>)
 8086558:	e002      	b.n	8086560 <_Z10serialMenuv+0x4f8>
        }else{
            Serial.println("Ozone already enabled");
 808655a:	f006 f8c5 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808655e:	4957      	ldr	r1, [pc, #348]	; (80866bc <_Z10serialMenuv+0x654>)
 8086560:	f005 f853 	bl	808b60a <_ZN5Print7printlnEPKc>
        }
        ozone_enabled = 1;
 8086564:	2301      	movs	r3, #1
 8086566:	e00f      	b.n	8086588 <_Z10serialMenuv+0x520>
        EEPROM.put(OZONE_EN_MEM_ADDRESS, ozone_enabled);
    }else if(incomingByte == '5'){
 8086568:	2835      	cmp	r0, #53	; 0x35
 808656a:	d113      	bne.n	8086594 <_Z10serialMenuv+0x52c>
        if(ozone_enabled == 1){
 808656c:	4d51      	ldr	r5, [pc, #324]	; (80866b4 <_Z10serialMenuv+0x64c>)
 808656e:	682b      	ldr	r3, [r5, #0]
 8086570:	2b01      	cmp	r3, #1
 8086572:	d103      	bne.n	808657c <_Z10serialMenuv+0x514>
            Serial.println("Disabling Ozone");
 8086574:	f006 f8b8 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086578:	4951      	ldr	r1, [pc, #324]	; (80866c0 <_Z10serialMenuv+0x658>)
 808657a:	e002      	b.n	8086582 <_Z10serialMenuv+0x51a>
        }else{
            Serial.println("Ozone already disabled");
 808657c:	f006 f8b4 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086580:	4950      	ldr	r1, [pc, #320]	; (80866c4 <_Z10serialMenuv+0x65c>)
 8086582:	f005 f842 	bl	808b60a <_ZN5Print7printlnEPKc>
        }
        ozone_enabled = 0;
 8086586:	2300      	movs	r3, #0
 8086588:	602b      	str	r3, [r5, #0]
        EEPROM.put(OZONE_EN_MEM_ADDRESS, ozone_enabled);
 808658a:	f006 fc9b 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 808658e:	4949      	ldr	r1, [pc, #292]	; (80866b4 <_Z10serialMenuv+0x64c>)
 8086590:	2058      	movs	r0, #88	; 0x58
 8086592:	e5f3      	b.n	808617c <_Z10serialMenuv+0x114>
    }else if(incomingByte == '6'){
 8086594:	2836      	cmp	r0, #54	; 0x36
 8086596:	d10d      	bne.n	80865b4 <_Z10serialMenuv+0x54c>
        if(voc_enabled == 0){
 8086598:	4d4b      	ldr	r5, [pc, #300]	; (80866c8 <_Z10serialMenuv+0x660>)
 808659a:	682b      	ldr	r3, [r5, #0]
 808659c:	b91b      	cbnz	r3, 80865a6 <_Z10serialMenuv+0x53e>
            Serial.println("Enabling VOC's");
 808659e:	f006 f8a3 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80865a2:	494a      	ldr	r1, [pc, #296]	; (80866cc <_Z10serialMenuv+0x664>)
 80865a4:	e002      	b.n	80865ac <_Z10serialMenuv+0x544>
        }else{
            Serial.println("VOC's already enabled");
 80865a6:	f006 f89f 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80865aa:	4949      	ldr	r1, [pc, #292]	; (80866d0 <_Z10serialMenuv+0x668>)
 80865ac:	f005 f82d 	bl	808b60a <_ZN5Print7printlnEPKc>
        }
        voc_enabled = 1;
 80865b0:	2301      	movs	r3, #1
 80865b2:	e00f      	b.n	80865d4 <_Z10serialMenuv+0x56c>
        EEPROM.put(VOC_EN_MEM_ADDRESS, voc_enabled);
    }else if(incomingByte == '7'){
 80865b4:	2837      	cmp	r0, #55	; 0x37
 80865b6:	d113      	bne.n	80865e0 <_Z10serialMenuv+0x578>
        if(voc_enabled == 1){
 80865b8:	4d43      	ldr	r5, [pc, #268]	; (80866c8 <_Z10serialMenuv+0x660>)
 80865ba:	682b      	ldr	r3, [r5, #0]
 80865bc:	2b01      	cmp	r3, #1
 80865be:	d103      	bne.n	80865c8 <_Z10serialMenuv+0x560>
            Serial.println("Disabling VOC's");
 80865c0:	f006 f892 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80865c4:	4943      	ldr	r1, [pc, #268]	; (80866d4 <_Z10serialMenuv+0x66c>)
 80865c6:	e002      	b.n	80865ce <_Z10serialMenuv+0x566>
        }else{
            Serial.println("VOC's already disabled");
 80865c8:	f006 f88e 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80865cc:	4942      	ldr	r1, [pc, #264]	; (80866d8 <_Z10serialMenuv+0x670>)
 80865ce:	f005 f81c 	bl	808b60a <_ZN5Print7printlnEPKc>
        }
        voc_enabled = 0;
 80865d2:	2300      	movs	r3, #0
 80865d4:	602b      	str	r3, [r5, #0]
        EEPROM.put(VOC_EN_MEM_ADDRESS, voc_enabled);
 80865d6:	f006 fc75 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 80865da:	493b      	ldr	r1, [pc, #236]	; (80866c8 <_Z10serialMenuv+0x660>)
 80865dc:	205c      	movs	r0, #92	; 0x5c
 80865de:	e5cd      	b.n	808617c <_Z10serialMenuv+0x114>
    }else if(incomingByte == '8'){
 80865e0:	2838      	cmp	r0, #56	; 0x38
 80865e2:	d11e      	bne.n	8086622 <_Z10serialMenuv+0x5ba>
        Serial.print("Fault: ");
 80865e4:	f006 f880 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80865e8:	493c      	ldr	r1, [pc, #240]	; (80866dc <_Z10serialMenuv+0x674>)
 80865ea:	f004 fffb 	bl	808b5e4 <_ZN5Print5printEPKc>
        byte fault = pmic.getFault();
 80865ee:	483c      	ldr	r0, [pc, #240]	; (80866e0 <_Z10serialMenuv+0x678>)
 80865f0:	f004 fad4 	bl	808ab9c <_ZN4PMIC8getFaultEv>
 80865f4:	4605      	mov	r5, r0
        Serial.println(fault);
 80865f6:	f006 f877 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80865fa:	220a      	movs	r2, #10
 80865fc:	4629      	mov	r1, r5
 80865fe:	f005 f844 	bl	808b68a <_ZN5Print7printlnEhi>
        Serial.print("System status: ");
 8086602:	f006 f871 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086606:	4937      	ldr	r1, [pc, #220]	; (80866e4 <_Z10serialMenuv+0x67c>)
 8086608:	f004 ffec 	bl	808b5e4 <_ZN5Print5printEPKc>
        byte systemStatus = pmic.getSystemStatus();
 808660c:	4834      	ldr	r0, [pc, #208]	; (80866e0 <_Z10serialMenuv+0x678>)
 808660e:	f004 fac2 	bl	808ab96 <_ZN4PMIC15getSystemStatusEv>
 8086612:	4605      	mov	r5, r0
        Serial.println(systemStatus);
 8086614:	f006 f868 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086618:	220a      	movs	r2, #10
 808661a:	4629      	mov	r1, r5
 808661c:	f005 f835 	bl	808b68a <_ZN5Print7printlnEhi>
 8086620:	e528      	b.n	8086074 <_Z10serialMenuv+0xc>

    }else if(incomingByte == '9'){
 8086622:	2839      	cmp	r0, #57	; 0x39
 8086624:	d102      	bne.n	808662c <_Z10serialMenuv+0x5c4>
        serialIncreaseChargeCurrent();
 8086626:	f7ff faf3 	bl	8085c10 <_Z27serialIncreaseChargeCurrentv>
 808662a:	e523      	b.n	8086074 <_Z10serialMenuv+0xc>
    }else if(incomingByte == '0'){
 808662c:	2830      	cmp	r0, #48	; 0x30
 808662e:	d102      	bne.n	8086636 <_Z10serialMenuv+0x5ce>
        serialIncreaseInputCurrent();
 8086630:	f7ff faac 	bl	8085b8c <_Z26serialIncreaseInputCurrentv>
 8086634:	e51e      	b.n	8086074 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'A'){
 8086636:	2841      	cmp	r0, #65	; 0x41
 8086638:	d102      	bne.n	8086640 <_Z10serialMenuv+0x5d8>
        readAlpha1Constantly();
 808663a:	f7ff fcfd 	bl	8086038 <_Z20readAlpha1Constantlyv>
 808663e:	e519      	b.n	8086074 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'B'){
 8086640:	2842      	cmp	r0, #66	; 0x42
 8086642:	d161      	bne.n	8086708 <_Z10serialMenuv+0x6a0>
        if(output_only_particles == 1){
 8086644:	4b28      	ldr	r3, [pc, #160]	; (80866e8 <_Z10serialMenuv+0x680>)
 8086646:	681a      	ldr	r2, [r3, #0]
 8086648:	2a01      	cmp	r2, #1
 808664a:	d151      	bne.n	80866f0 <_Z10serialMenuv+0x688>
            output_only_particles = 0;
 808664c:	2200      	movs	r2, #0
 808664e:	601a      	str	r2, [r3, #0]
            Serial.println("Outputting normally");
 8086650:	f006 f84a 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086654:	4925      	ldr	r1, [pc, #148]	; (80866ec <_Z10serialMenuv+0x684>)
 8086656:	e050      	b.n	80866fa <_Z10serialMenuv+0x692>
 8086658:	20000f88 	.word	0x20000f88
 808665c:	080937c4 	.word	0x080937c4
 8086660:	080937e6 	.word	0x080937e6
 8086664:	0809380a 	.word	0x0809380a
 8086668:	0809382d 	.word	0x0809382d
 808666c:	08093852 	.word	0x08093852
 8086670:	0809386d 	.word	0x0809386d
 8086674:	08093880 	.word	0x08093880
 8086678:	20000ccc 	.word	0x20000ccc
 808667c:	0809389b 	.word	0x0809389b
 8086680:	20000f8c 	.word	0x20000f8c
 8086684:	080938be 	.word	0x080938be
 8086688:	080938d9 	.word	0x080938d9
 808668c:	080938fb 	.word	0x080938fb
 8086690:	200005fc 	.word	0x200005fc
 8086694:	08093915 	.word	0x08093915
 8086698:	08093930 	.word	0x08093930
 808669c:	20000b00 	.word	0x20000b00
 80866a0:	0809394c 	.word	0x0809394c
 80866a4:	0809396b 	.word	0x0809396b
 80866a8:	0809398a 	.word	0x0809398a
 80866ac:	080939a2 	.word	0x080939a2
 80866b0:	08091eae 	.word	0x08091eae
 80866b4:	20000ec8 	.word	0x20000ec8
 80866b8:	080939b0 	.word	0x080939b0
 80866bc:	080939bf 	.word	0x080939bf
 80866c0:	080939d5 	.word	0x080939d5
 80866c4:	080939e5 	.word	0x080939e5
 80866c8:	20000f98 	.word	0x20000f98
 80866cc:	080939fc 	.word	0x080939fc
 80866d0:	08093a0b 	.word	0x08093a0b
 80866d4:	08093a21 	.word	0x08093a21
 80866d8:	08093a31 	.word	0x08093a31
 80866dc:	08093a48 	.word	0x08093a48
 80866e0:	20000ee4 	.word	0x20000ee4
 80866e4:	08093a50 	.word	0x08093a50
 80866e8:	20000bec 	.word	0x20000bec
 80866ec:	08093a60 	.word	0x08093a60
        }else{
            output_only_particles = 1;
 80866f0:	2201      	movs	r2, #1
 80866f2:	601a      	str	r2, [r3, #0]
            Serial.println("Outputting only PM");
 80866f4:	f005 fff8 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80866f8:	4964      	ldr	r1, [pc, #400]	; (808688c <_Z10serialMenuv+0x824>)
 80866fa:	f004 ff86 	bl	808b60a <_ZN5Print7printlnEPKc>
        }
        EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, output_only_particles);
 80866fe:	f006 fbe1 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8086702:	4963      	ldr	r1, [pc, #396]	; (8086890 <_Z10serialMenuv+0x828>)
 8086704:	2064      	movs	r0, #100	; 0x64
 8086706:	e539      	b.n	808617c <_Z10serialMenuv+0x114>

    }else if(incomingByte == '!'){
 8086708:	2821      	cmp	r0, #33	; 0x21
 808670a:	d135      	bne.n	8086778 <_Z10serialMenuv+0x710>

        Serial.println("Outputting VOCs continuously!  Press any button to exit...");
 808670c:	f005 ffec 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086710:	4960      	ldr	r1, [pc, #384]	; (8086894 <_Z10serialMenuv+0x82c>)
 8086712:	f004 ff7a 	bl	808b60a <_ZN5Print7printlnEPKc>
        while(!Serial.available()){
 8086716:	f005 ffe7 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808671a:	6803      	ldr	r3, [r0, #0]
 808671c:	691b      	ldr	r3, [r3, #16]
 808671e:	4798      	blx	r3
 8086720:	4605      	mov	r5, r0
 8086722:	2800      	cmp	r0, #0
 8086724:	f47f aca6 	bne.w	8086074 <_Z10serialMenuv+0xc>
            if (! bme.performReading()) {
 8086728:	485b      	ldr	r0, [pc, #364]	; (8086898 <_Z10serialMenuv+0x830>)
 808672a:	f002 fcd7 	bl	80890dc <_ZN15Adafruit_BME68014performReadingEv>
 808672e:	b918      	cbnz	r0, 8086738 <_Z10serialMenuv+0x6d0>
              Serial.println("Failed to read BME680");
 8086730:	f005 ffda 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086734:	4959      	ldr	r1, [pc, #356]	; (808689c <_Z10serialMenuv+0x834>)
 8086736:	e0a5      	b.n	8086884 <_Z10serialMenuv+0x81c>
              return;
            }else{
                Serial.printf("TVocs=%1.0f, Temp=%1.1f, press=%1.1f, rh=%1.1f\n\r", bme.gas_resistance/100, bme.temperature, bme.pressure, bme.humidity);
 8086738:	f005 ffd6 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808673c:	4607      	mov	r7, r0
 808673e:	68b0      	ldr	r0, [r6, #8]
 8086740:	f006 fee2 	bl	808d508 <__aeabi_f2d>
 8086744:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8086748:	6870      	ldr	r0, [r6, #4]
 808674a:	f006 fedd 	bl	808d508 <__aeabi_f2d>
 808674e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8086752:	6830      	ldr	r0, [r6, #0]
 8086754:	f006 fed8 	bl	808d508 <__aeabi_f2d>
 8086758:	e9cd 0102 	strd	r0, r1, [sp, #8]
 808675c:	4950      	ldr	r1, [pc, #320]	; (80868a0 <_Z10serialMenuv+0x838>)
 808675e:	68f0      	ldr	r0, [r6, #12]
 8086760:	f007 fc30 	bl	808dfc4 <__aeabi_fdiv>
 8086764:	f006 fed0 	bl	808d508 <__aeabi_f2d>
 8086768:	4a4e      	ldr	r2, [pc, #312]	; (80868a4 <_Z10serialMenuv+0x83c>)
 808676a:	e9cd 0100 	strd	r0, r1, [sp]
 808676e:	4629      	mov	r1, r5
 8086770:	4638      	mov	r0, r7
 8086772:	f005 f87f 	bl	808b874 <_ZN5Print11printf_implEbPKcz>
 8086776:	e7ce      	b.n	8086716 <_Z10serialMenuv+0x6ae>
            }
        }
    }else if(incomingByte == '@'){
 8086778:	2840      	cmp	r0, #64	; 0x40
 808677a:	d112      	bne.n	80867a2 <_Z10serialMenuv+0x73a>
        if(sensible_iot_en == 1){
 808677c:	4d4a      	ldr	r5, [pc, #296]	; (80868a8 <_Z10serialMenuv+0x840>)
 808677e:	682b      	ldr	r3, [r5, #0]
 8086780:	2b01      	cmp	r3, #1
 8086782:	d10b      	bne.n	808679c <_Z10serialMenuv+0x734>
            Serial.println("Disabling sensible iot data push.");
 8086784:	f005 ffb0 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086788:	4948      	ldr	r1, [pc, #288]	; (80868ac <_Z10serialMenuv+0x844>)
 808678a:	f004 ff3e 	bl	808b60a <_ZN5Print7printlnEPKc>
            sensible_iot_en = 0;
 808678e:	2300      	movs	r3, #0
 8086790:	602b      	str	r3, [r5, #0]
            EEPROM.put(SENSIBLEIOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 8086792:	f006 fb97 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 8086796:	4629      	mov	r1, r5
 8086798:	208c      	movs	r0, #140	; 0x8c
 808679a:	e4ef      	b.n	808617c <_Z10serialMenuv+0x114>
        }else{
            serialSetSensibleIotEnable();
 808679c:	f7fc fb20 	bl	8082de0 <_Z26serialSetSensibleIotEnablev>
 80867a0:	e468      	b.n	8086074 <_Z10serialMenuv+0xc>
            
        }
    }else if(incomingByte == '#'){
 80867a2:	2823      	cmp	r0, #35	; 0x23
 80867a4:	d115      	bne.n	80867d2 <_Z10serialMenuv+0x76a>
        if(car_topper_power_en == 1){
 80867a6:	4d42      	ldr	r5, [pc, #264]	; (80868b0 <_Z10serialMenuv+0x848>)
 80867a8:	682b      	ldr	r3, [r5, #0]
 80867aa:	2b01      	cmp	r3, #1
 80867ac:	d105      	bne.n	80867ba <_Z10serialMenuv+0x752>
            car_topper_power_en = 0;
 80867ae:	2300      	movs	r3, #0
 80867b0:	602b      	str	r3, [r5, #0]
            Serial.println("Disabling car topper power.  ");
 80867b2:	f005 ff99 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80867b6:	493f      	ldr	r1, [pc, #252]	; (80868b4 <_Z10serialMenuv+0x84c>)
 80867b8:	e004      	b.n	80867c4 <_Z10serialMenuv+0x75c>
            EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, car_topper_power_en);
        }else{
            car_topper_power_en = 1;
 80867ba:	2301      	movs	r3, #1
 80867bc:	602b      	str	r3, [r5, #0]
            Serial.println("Enabling car topper power.  If no external power, system will turn off.");
 80867be:	f005 ff93 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80867c2:	493d      	ldr	r1, [pc, #244]	; (80868b8 <_Z10serialMenuv+0x850>)
 80867c4:	f004 ff21 	bl	808b60a <_ZN5Print7printlnEPKc>
            EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, car_topper_power_en);
 80867c8:	f006 fb7c 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 80867cc:	4629      	mov	r1, r5
 80867ce:	2090      	movs	r0, #144	; 0x90
 80867d0:	e4d4      	b.n	808617c <_Z10serialMenuv+0x114>
        }
    
    }else if(incomingByte == 'W'){
 80867d2:	2857      	cmp	r0, #87	; 0x57
 80867d4:	d116      	bne.n	8086804 <_Z10serialMenuv+0x79c>
        if(google_location_en == 1){
 80867d6:	4d39      	ldr	r5, [pc, #228]	; (80868bc <_Z10serialMenuv+0x854>)
 80867d8:	682b      	ldr	r3, [r5, #0]
 80867da:	2b01      	cmp	r3, #1
 80867dc:	d106      	bne.n	80867ec <_Z10serialMenuv+0x784>
            Serial.println("Disabling google location services.");
 80867de:	f005 ff83 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80867e2:	4937      	ldr	r1, [pc, #220]	; (80868c0 <_Z10serialMenuv+0x858>)
 80867e4:	f004 ff11 	bl	808b60a <_ZN5Print7printlnEPKc>
            google_location_en = 0;
 80867e8:	2300      	movs	r3, #0
 80867ea:	e005      	b.n	80867f8 <_Z10serialMenuv+0x790>
            EEPROM.put(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
        }else{
            Serial.println("Enabling google location services.");
 80867ec:	f005 ff7c 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80867f0:	4934      	ldr	r1, [pc, #208]	; (80868c4 <_Z10serialMenuv+0x85c>)
 80867f2:	f004 ff0a 	bl	808b60a <_ZN5Print7printlnEPKc>
            google_location_en = 1;
 80867f6:	2301      	movs	r3, #1
 80867f8:	602b      	str	r3, [r5, #0]
            EEPROM.put(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
 80867fa:	f006 fb63 	bl	808cec4 <_Z21__fetch_global_EEPROMv>
 80867fe:	4629      	mov	r1, r5
 8086800:	2088      	movs	r0, #136	; 0x88
 8086802:	e4bb      	b.n	808617c <_Z10serialMenuv+0x114>
        }
        
    }else if(incomingByte == 'X'){
 8086804:	2858      	cmp	r0, #88	; 0x58
 8086806:	d107      	bne.n	8086818 <_Z10serialMenuv+0x7b0>
        //calibrate CO2 sensor
        //if(debugging_enabled){
            t6713.calibrate(1);
 8086808:	2101      	movs	r1, #1
 808680a:	482f      	ldr	r0, [pc, #188]	; (80868c8 <_Z10serialMenuv+0x860>)
 808680c:	f000 ff96 	bl	808773c <_ZN13Telaire_T67139calibrateEi>
        //}else{
         //   t6713.calibrate(0);
        //}
        
        co2_calibration_timer = 180;        //6 minutes if measurement cycle is 2 seconds
 8086810:	4b2e      	ldr	r3, [pc, #184]	; (80868cc <_Z10serialMenuv+0x864>)
 8086812:	22b4      	movs	r2, #180	; 0xb4
 8086814:	601a      	str	r2, [r3, #0]
 8086816:	e42d      	b.n	8086074 <_Z10serialMenuv+0xc>
        
    
    }else if(incomingByte == 'Z'){
 8086818:	285a      	cmp	r0, #90	; 0x5a
 808681a:	d129      	bne.n	8086870 <_Z10serialMenuv+0x808>
        Serial.println("Getting cellular information, this may take a while...");
 808681c:	f005 ff64 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086820:	492b      	ldr	r1, [pc, #172]	; (80868d0 <_Z10serialMenuv+0x868>)
 8086822:	f004 fef2 	bl	808b60a <_ZN5Print7printlnEPKc>

        Log.info("IMEI=%s", CellularHelper.getIMEI().c_str());
 8086826:	492b      	ldr	r1, [pc, #172]	; (80868d4 <_Z10serialMenuv+0x86c>)
 8086828:	a808      	add	r0, sp, #32
 808682a:	f003 fc75 	bl	808a118 <_ZNK19CellularHelperClass7getIMEIEv>
 808682e:	9a08      	ldr	r2, [sp, #32]
 8086830:	4929      	ldr	r1, [pc, #164]	; (80868d8 <_Z10serialMenuv+0x870>)
 8086832:	482a      	ldr	r0, [pc, #168]	; (80868dc <_Z10serialMenuv+0x874>)
 8086834:	f7fa fab6 	bl	8080da4 <_ZNK5spark6Logger4infoEPKcz>
 8086838:	a808      	add	r0, sp, #32
 808683a:	f004 fc77 	bl	808b12c <_ZN6StringD1Ev>

        Log.info("IMSI=%s", CellularHelper.getIMSI().c_str());
 808683e:	4925      	ldr	r1, [pc, #148]	; (80868d4 <_Z10serialMenuv+0x86c>)
 8086840:	a808      	add	r0, sp, #32
 8086842:	f003 fc85 	bl	808a150 <_ZNK19CellularHelperClass7getIMSIEv>
 8086846:	9a08      	ldr	r2, [sp, #32]
 8086848:	4925      	ldr	r1, [pc, #148]	; (80868e0 <_Z10serialMenuv+0x878>)
 808684a:	4824      	ldr	r0, [pc, #144]	; (80868dc <_Z10serialMenuv+0x874>)
 808684c:	f7fa faaa 	bl	8080da4 <_ZNK5spark6Logger4infoEPKcz>
 8086850:	a808      	add	r0, sp, #32
 8086852:	f004 fc6b 	bl	808b12c <_ZN6StringD1Ev>

        Log.info("ICCID=%s", CellularHelper.getICCID().c_str());
 8086856:	491f      	ldr	r1, [pc, #124]	; (80868d4 <_Z10serialMenuv+0x86c>)
 8086858:	a808      	add	r0, sp, #32
 808685a:	f003 fc95 	bl	808a188 <_ZNK19CellularHelperClass8getICCIDEv>
 808685e:	9a08      	ldr	r2, [sp, #32]
 8086860:	4920      	ldr	r1, [pc, #128]	; (80868e4 <_Z10serialMenuv+0x87c>)
 8086862:	481e      	ldr	r0, [pc, #120]	; (80868dc <_Z10serialMenuv+0x874>)
 8086864:	f7fa fa9e 	bl	8080da4 <_ZNK5spark6Logger4infoEPKcz>
 8086868:	a808      	add	r0, sp, #32
 808686a:	f004 fc5f 	bl	808b12c <_ZN6StringD1Ev>
 808686e:	e401      	b.n	8086074 <_Z10serialMenuv+0xc>
        //if(serial_cellular_enabled){

        //}else{
        //    Serial.println("Cellular not enabled.  Please enable cellular first!");
        //}
    }else if(incomingByte == '?'){
 8086870:	283f      	cmp	r0, #63	; 0x3f
 8086872:	f47f abff 	bne.w	8086074 <_Z10serialMenuv+0xc>
        outputSerialMenuOptions();
 8086876:	f7fd fc93 	bl	80841a0 <_Z23outputSerialMenuOptionsv>
 808687a:	f7ff bbfb 	b.w	8086074 <_Z10serialMenuv+0xc>
    }
  }
  Serial.println("Exiting serial menu...");
 808687e:	f005 ff33 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086882:	4919      	ldr	r1, [pc, #100]	; (80868e8 <_Z10serialMenuv+0x880>)
 8086884:	f004 fec1 	bl	808b60a <_ZN5Print7printlnEPKc>

}
 8086888:	b00d      	add	sp, #52	; 0x34
 808688a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808688c:	08093a74 	.word	0x08093a74
 8086890:	20000bec 	.word	0x20000bec
 8086894:	08093a87 	.word	0x08093a87
 8086898:	20000b04 	.word	0x20000b04
 808689c:	08091c7b 	.word	0x08091c7b
 80868a0:	42c80000 	.word	0x42c80000
 80868a4:	08093ac2 	.word	0x08093ac2
 80868a8:	20000cdc 	.word	0x20000cdc
 80868ac:	08093af3 	.word	0x08093af3
 80868b0:	20000624 	.word	0x20000624
 80868b4:	08093b15 	.word	0x08093b15
 80868b8:	08093b33 	.word	0x08093b33
 80868bc:	20000f80 	.word	0x20000f80
 80868c0:	08093b7b 	.word	0x08093b7b
 80868c4:	08093b9f 	.word	0x08093b9f
 80868c8:	20000f8c 	.word	0x20000f8c
 80868cc:	20000f78 	.word	0x20000f78
 80868d0:	08093bc2 	.word	0x08093bc2
 80868d4:	200010ec 	.word	0x200010ec
 80868d8:	08093bf9 	.word	0x08093bf9
 80868dc:	200010f4 	.word	0x200010f4
 80868e0:	08093c01 	.word	0x08093c01
 80868e4:	08093c09 	.word	0x08093c09
 80868e8:	08093c12 	.word	0x08093c12

080868ec <_GLOBAL__sub_I__Z22__fetch_global_Serial4v>:
    Serial.println("!:  Continuous serial output of VOC's");
    Serial.println("@   Enable/Disable Sensible-iot data push.  If enabled, time zone will be ignored - UTC will be used.");
    Serial.println("#   Enable/Disable cartopper power mode.  If enabled, absense of external power will stop cellular.");
    Serial.println("?:  Output this menu");
    Serial.println("x:  Exits this menu");
  }
 80868ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80868ee:	4b5a      	ldr	r3, [pc, #360]	; (8086a58 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x16c>)
 80868f0:	2400      	movs	r4, #0
 80868f2:	601c      	str	r4, [r3, #0]
#include "SdFat.h"
#include "HIH61XX.h"
#include "google-maps-device-locator.h"
#include "CellularHelper.h"

GoogleMapsDeviceLocator locator;
 80868f4:	4f59      	ldr	r7, [pc, #356]	; (8086a5c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x170>)
 80868f6:	4b5a      	ldr	r3, [pc, #360]	; (8086a60 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x174>)
 80868f8:	4d5a      	ldr	r5, [pc, #360]	; (8086a64 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x178>)
 80868fa:	2601      	movs	r6, #1
 80868fc:	701e      	strb	r6, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80868fe:	f003 fd83 	bl	808a408 <HAL_Pin_Map>
 8086902:	4638      	mov	r0, r7
 8086904:	f002 fee0 	bl	80896c8 <_ZN23GoogleMapsDeviceLocatorC1Ev>
 8086908:	462a      	mov	r2, r5
 808690a:	4957      	ldr	r1, [pc, #348]	; (8086a68 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x17c>)
 808690c:	4638      	mov	r0, r7
 808690e:	f006 fb45 	bl	808cf9c <__aeabi_atexit>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8086912:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8086916:	4b55      	ldr	r3, [pc, #340]	; (8086a6c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x180>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8086918:	2003      	movs	r0, #3
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 808691a:	701c      	strb	r4, [r3, #0]
 808691c:	805c      	strh	r4, [r3, #2]
 808691e:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8086920:	f003 ff72 	bl	808a808 <set_system_mode>



//manually control connection to cellular network
SYSTEM_MODE(MANUAL);
SYSTEM_THREAD(ENABLED);
 8086924:	4621      	mov	r1, r4
 8086926:	4630      	mov	r0, r6
 8086928:	f003 ff7e 	bl	808a828 <system_thread_set_state>

//global objects
Adafruit_BME680 bme; // I2C
 808692c:	f04f 31ff 	mov.w	r1, #4294967295
 8086930:	484f      	ldr	r0, [pc, #316]	; (8086a70 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x184>)
 8086932:	f002 fb41 	bl	8088fb8 <_ZN15Adafruit_BME680C1Ea>
Telaire_T6713 t6713;  //CO2 sensor
 8086936:	484f      	ldr	r0, [pc, #316]	; (8086a74 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x188>)
 8086938:	f000 fd65 	bl	8087406 <_ZN13Telaire_T6713C1Ev>
LMP91000 lmp91000;
 808693c:	484e      	ldr	r0, [pc, #312]	; (8086a78 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x18c>)
 808693e:	f000 fb19 	bl	8086f74 <_ZN8LMP91000C1Ev>
Adafruit_ADS1115 ads1(0x49); //Set I2C address of ADC1
Adafruit_ADS1115 ads2(0x4A); //Set I2C address of ADC2
FuelGauge fuel;
 8086942:	4e4e      	ldr	r6, [pc, #312]	; (8086a7c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x190>)

//global objects
Adafruit_BME680 bme; // I2C
Telaire_T6713 t6713;  //CO2 sensor
LMP91000 lmp91000;
Adafruit_ADS1115 ads1(0x49); //Set I2C address of ADC1
 8086944:	2149      	movs	r1, #73	; 0x49
 8086946:	484e      	ldr	r0, [pc, #312]	; (8086a80 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x194>)
 8086948:	f000 fc5b 	bl	8087202 <_ZN16Adafruit_ADS1115C1Eh>
Adafruit_ADS1115 ads2(0x4A); //Set I2C address of ADC2
 808694c:	214a      	movs	r1, #74	; 0x4a
 808694e:	484d      	ldr	r0, [pc, #308]	; (8086a84 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x198>)
 8086950:	f000 fc57 	bl	8087202 <_ZN16Adafruit_ADS1115C1Eh>
FuelGauge fuel;
 8086954:	4621      	mov	r1, r4
 8086956:	4630      	mov	r0, r6
 8086958:	f005 fa34 	bl	808bdc4 <_ZN9FuelGaugeC1Eb>
 808695c:	4630      	mov	r0, r6
GPS gps;
PMIC pmic;
 808695e:	4e4a      	ldr	r6, [pc, #296]	; (8086a88 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x19c>)
Adafruit_BME680 bme; // I2C
Telaire_T6713 t6713;  //CO2 sensor
LMP91000 lmp91000;
Adafruit_ADS1115 ads1(0x49); //Set I2C address of ADC1
Adafruit_ADS1115 ads2(0x4A); //Set I2C address of ADC2
FuelGauge fuel;
 8086960:	462a      	mov	r2, r5
 8086962:	494a      	ldr	r1, [pc, #296]	; (8086a8c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1a0>)
 8086964:	f006 fb1a 	bl	808cf9c <__aeabi_atexit>
GPS gps;
PMIC pmic;
 8086968:	4621      	mov	r1, r4
 808696a:	4630      	mov	r0, r6
 808696c:	f004 f8b9 	bl	808aae2 <_ZN4PMICC1Eb>
 8086970:	4630      	mov	r0, r6
PowerCheck powerCheck;
 8086972:	4e47      	ldr	r6, [pc, #284]	; (8086a90 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1a4>)
LMP91000 lmp91000;
Adafruit_ADS1115 ads1(0x49); //Set I2C address of ADC1
Adafruit_ADS1115 ads2(0x4A); //Set I2C address of ADC2
FuelGauge fuel;
GPS gps;
PMIC pmic;
 8086974:	462a      	mov	r2, r5
 8086976:	4947      	ldr	r1, [pc, #284]	; (8086a94 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1a8>)
 8086978:	f006 fb10 	bl	808cf9c <__aeabi_atexit>
PowerCheck powerCheck;
 808697c:	4630      	mov	r0, r6
 808697e:	f000 fb89 	bl	8087094 <_ZN10PowerCheckC1Ev>
 8086982:	462a      	mov	r2, r5
 8086984:	4944      	ldr	r1, [pc, #272]	; (8086a98 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1ac>)
 8086986:	4630      	mov	r0, r6
 8086988:	f006 fb08 	bl	808cf9c <__aeabi_atexit>
//SerialLogHandler logHandler;
HIH61XX hih(0x27);
 808698c:	2127      	movs	r1, #39	; 0x27
 808698e:	4843      	ldr	r0, [pc, #268]	; (8086a9c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1b0>)
 8086990:	f002 fc6a 	bl	8089268 <_ZN7HIH61XXC1Eh>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
 8086994:	4b42      	ldr	r3, [pc, #264]	; (8086aa0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1b4>)
#else  // SD_SPI_CONFIGURATION < 3
  typedef SdSpiBase m_spi_t;
#endif  // SD_SPI_CONFIGURATION < 3
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_selected(false),
                m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
 8086996:	2219      	movs	r2, #25
 8086998:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
 * \brief Main file system class for %SdFat library.
 */
class SdFat : public SdFatBase {
 public:
#if IMPLEMENT_SPI_INTERFACE_SELECTION
  SdFat() {
 808699c:	4a41      	ldr	r2, [pc, #260]	; (8086aa4 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1b8>)
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 808699e:	4842      	ldr	r0, [pc, #264]	; (8086aa8 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1bc>)
 80869a0:	601a      	str	r2, [r3, #0]
unsigned long lastCheck = 0;
char lastStatus[256];

//sdcard
SdFat sd;
SdFile file;
 80869a2:	4e42      	ldr	r6, [pc, #264]	; (8086aac <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1c0>)
/**
 * \class SdSpi
 * \brief SPI class for access to SD and SDHC flash memory cards.
 */
#if SD_SPI_CONFIGURATION >= 3
class SdSpi : public SdSpiBase {
 80869a4:	4a42      	ldr	r2, [pc, #264]	; (8086ab0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1c4>)
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 public:
  SdFile() {}
 80869a6:	4f43      	ldr	r7, [pc, #268]	; (8086ab4 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1c8>)
 80869a8:	71dc      	strb	r4, [r3, #7]
 80869aa:	f883 4440 	strb.w	r4, [r3, #1088]	; 0x440
 80869ae:	f883 4441 	strb.w	r4, [r3, #1089]	; 0x441
 80869b2:	f883 4468 	strb.w	r4, [r3, #1128]	; 0x468
 80869b6:	f883 446d 	strb.w	r4, [r3, #1133]	; 0x46d
 80869ba:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   */
  void send(const uint8_t* buf, size_t n);
  /** \return true - uses SPI transactions */
#if IMPLEMENT_SPI_INTERFACE_SELECTION
  void setSpiIf(uint8_t spiIf) {
    m_spiIf = spiIf;
 80869be:	f883 4474 	strb.w	r4, [r3, #1140]	; 0x474
 80869c2:	462a      	mov	r2, r5
 80869c4:	4631      	mov	r1, r6
 80869c6:	7204      	strb	r4, [r0, #8]
 80869c8:	7244      	strb	r4, [r0, #9]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80869ca:	6044      	str	r4, [r0, #4]
 80869cc:	6007      	str	r7, [r0, #0]
 80869ce:	f006 fae5 	bl	808cf9c <__aeabi_atexit>
 80869d2:	4839      	ldr	r0, [pc, #228]	; (8086ab8 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1cc>)
SdFile log_file;
 80869d4:	462a      	mov	r2, r5
 80869d6:	4631      	mov	r1, r6
 80869d8:	7204      	strb	r4, [r0, #8]
 80869da:	7244      	strb	r4, [r0, #9]
 80869dc:	6044      	str	r4, [r0, #4]
 80869de:	6007      	str	r7, [r0, #0]
 80869e0:	f006 fadc 	bl	808cf9c <__aeabi_atexit>
 80869e4:	4835      	ldr	r0, [pc, #212]	; (8086abc <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1d0>)
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80869e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
File file1;
String fileName;
 80869ea:	4e35      	ldr	r6, [pc, #212]	; (8086ac0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1d4>)
 80869ec:	4f35      	ldr	r7, [pc, #212]	; (8086ac4 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1d8>)
 80869ee:	6083      	str	r3, [r0, #8]
class File : public FatFile, public Stream {
#else  // ARDUINO_FILE_USES_STREAM
class File : public FatFile, public Print {
#endif  // ARDUINO_FILE_USES_STREAM
 public:
  File() {}
 80869f0:	4b35      	ldr	r3, [pc, #212]	; (8086ac8 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1dc>)

//sdcard
SdFat sd;
SdFile file;
SdFile log_file;
File file1;
 80869f2:	462a      	mov	r2, r5
 80869f4:	7404      	strb	r4, [r0, #16]
 80869f6:	7444      	strb	r4, [r0, #17]
 80869f8:	6044      	str	r4, [r0, #4]
 80869fa:	4934      	ldr	r1, [pc, #208]	; (8086acc <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1e0>)
 80869fc:	6003      	str	r3, [r0, #0]
String fileName;
 80869fe:	4c34      	ldr	r4, [pc, #208]	; (8086ad0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1e4>)

//sdcard
SdFat sd;
SdFile file;
SdFile log_file;
File file1;
 8086a00:	f006 facc 	bl	808cf9c <__aeabi_atexit>
String fileName;
 8086a04:	4631      	mov	r1, r6
 8086a06:	4638      	mov	r0, r7
 8086a08:	f004 fbd7 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
 8086a0c:	4638      	mov	r0, r7
String logFileName;
 8086a0e:	4f31      	ldr	r7, [pc, #196]	; (8086ad4 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1e8>)
//sdcard
SdFat sd;
SdFile file;
SdFile log_file;
File file1;
String fileName;
 8086a10:	462a      	mov	r2, r5
 8086a12:	4621      	mov	r1, r4
 8086a14:	f006 fac2 	bl	808cf9c <__aeabi_atexit>
String logFileName;
 8086a18:	4631      	mov	r1, r6
 8086a1a:	4638      	mov	r0, r7
 8086a1c:	f004 fbcd 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
 8086a20:	4638      	mov	r0, r7
int file_started = 0;
int log_file_started = 0;

//wifi
String ssid; //wifi network name
 8086a22:	4f2d      	ldr	r7, [pc, #180]	; (8086ad8 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1ec>)
SdFat sd;
SdFile file;
SdFile log_file;
File file1;
String fileName;
String logFileName;
 8086a24:	462a      	mov	r2, r5
 8086a26:	4621      	mov	r1, r4
 8086a28:	f006 fab8 	bl	808cf9c <__aeabi_atexit>
int file_started = 0;
int log_file_started = 0;

//wifi
String ssid; //wifi network name
 8086a2c:	4631      	mov	r1, r6
 8086a2e:	4638      	mov	r0, r7
 8086a30:	f004 fbc3 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
 8086a34:	4638      	mov	r0, r7
String password; //wifi network password
 8086a36:	4f29      	ldr	r7, [pc, #164]	; (8086adc <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1f0>)
String logFileName;
int file_started = 0;
int log_file_started = 0;

//wifi
String ssid; //wifi network name
 8086a38:	462a      	mov	r2, r5
 8086a3a:	4621      	mov	r1, r4
 8086a3c:	f006 faae 	bl	808cf9c <__aeabi_atexit>
String password; //wifi network password
 8086a40:	4631      	mov	r1, r6
 8086a42:	4638      	mov	r0, r7
 8086a44:	f004 fbb9 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
 8086a48:	462a      	mov	r2, r5
 8086a4a:	4621      	mov	r1, r4
 8086a4c:	4638      	mov	r0, r7
    Serial.println("!:  Continuous serial output of VOC's");
    Serial.println("@   Enable/Disable Sensible-iot data push.  If enabled, time zone will be ignored - UTC will be used.");
    Serial.println("#   Enable/Disable cartopper power mode.  If enabled, absense of external power will stop cellular.");
    Serial.println("?:  Output this menu");
    Serial.println("x:  Exits this menu");
  }
 8086a4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
int file_started = 0;
int log_file_started = 0;

//wifi
String ssid; //wifi network name
String password; //wifi network password
 8086a52:	f006 baa3 	b.w	808cf9c <__aeabi_atexit>
 8086a56:	bf00      	nop
 8086a58:	20000cd0 	.word	0x20000cd0
 8086a5c:	20000f30 	.word	0x20000f30
 8086a60:	20000afc 	.word	0x20000afc
 8086a64:	200005d8 	.word	0x200005d8
 8086a68:	08089461 	.word	0x08089461
 8086a6c:	20000f00 	.word	0x20000f00
 8086a70:	20000b04 	.word	0x20000b04
 8086a74:	20000f8c 	.word	0x20000f8c
 8086a78:	20000634 	.word	0x20000634
 8086a7c:	20000cc4 	.word	0x20000cc4
 8086a80:	20000ed0 	.word	0x20000ed0
 8086a84:	20000ed6 	.word	0x20000ed6
 8086a88:	20000ee4 	.word	0x20000ee4
 8086a8c:	0808bde3 	.word	0x0808bde3
 8086a90:	20000b94 	.word	0x20000b94
 8086a94:	0808ab01 	.word	0x0808ab01
 8086a98:	08087069 	.word	0x08087069
 8086a9c:	20000ce0 	.word	0x20000ce0
 8086aa0:	20000644 	.word	0x20000644
 8086aa4:	080918ac 	.word	0x080918ac
 8086aa8:	20000ac8 	.word	0x20000ac8
 8086aac:	08080b7b 	.word	0x08080b7b
 8086ab0:	08093e54 	.word	0x08093e54
 8086ab4:	08091894 	.word	0x08091894
 8086ab8:	20000f9c 	.word	0x20000f9c
 8086abc:	20000c7c 	.word	0x20000c7c
 8086ac0:	08094308 	.word	0x08094308
 8086ac4:	20000eec 	.word	0x20000eec
 8086ac8:	0809186c 	.word	0x0809186c
 8086acc:	08080b7d 	.word	0x08080b7d
 8086ad0:	0808b12d 	.word	0x0808b12d
 8086ad4:	20000bb8 	.word	0x20000bb8
 8086ad8:	20000614 	.word	0x20000614
 8086adc:	200005e0 	.word	0x200005e0

08086ae0 <_Z11readHIH8120v>:
        Serial1.print("&");
        sample_counter += 1;
    }
}

void readHIH8120(void){
 8086ae0:	b510      	push	{r4, lr}
    hih.start();
 8086ae2:	4c04      	ldr	r4, [pc, #16]	; (8086af4 <_Z11readHIH8120v+0x14>)
 8086ae4:	4620      	mov	r0, r4
 8086ae6:	f002 fbb1 	bl	808924c <_ZN7HIH61XX5startEv>

    //  request an update of the humidity and temperature
    hih.update();
 8086aea:	4620      	mov	r0, r4
    Serial.print("Temperature: ");
    Serial.print(hih.temperature(), 5);
    Serial.println(" C (");
    Serial.print(hih.temperature_Raw());
    Serial.println(")");*/
}
 8086aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void readHIH8120(void){
    hih.start();

    //  request an update of the humidity and temperature
    hih.update();
 8086af0:	f002 bbc4 	b.w	808927c <_ZN7HIH61XX6updateEv>
 8086af4:	20000ce0 	.word	0x20000ce0

08086af8 <loop>:
          status_word.status_int |= 0x0004;
      }
  }
}

void loop() {
 8086af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    if(car_topper_power_en && powerCheck.getHasPower() == 0){
 8086afc:	4ba2      	ldr	r3, [pc, #648]	; (8086d88 <loop+0x290>)
          status_word.status_int |= 0x0004;
      }
  }
}

void loop() {
 8086afe:	b08a      	sub	sp, #40	; 0x28

    if(car_topper_power_en && powerCheck.getHasPower() == 0){
 8086b00:	681b      	ldr	r3, [r3, #0]
 8086b02:	b12b      	cbz	r3, 8086b10 <loop+0x18>
 8086b04:	4ba1      	ldr	r3, [pc, #644]	; (8086d8c <loop+0x294>)
 8086b06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8086b0a:	2b00      	cmp	r3, #0
 8086b0c:	f000 81b6 	beq.w	8086e7c <loop+0x384>
        
        goToSleepBattery();
    }
    //Serial.println("locator loop");
    locator.loop();
 8086b10:	489f      	ldr	r0, [pc, #636]	; (8086d90 <loop+0x298>)
 8086b12:	f002 fee3 	bl	80898dc <_ZN23GoogleMapsDeviceLocator4loopEv>
    

    if(output_only_particles == 1){
 8086b16:	4b9f      	ldr	r3, [pc, #636]	; (8086d94 <loop+0x29c>)
 8086b18:	681b      	ldr	r3, [r3, #0]
 8086b1a:	2b01      	cmp	r3, #1
 8086b1c:	d101      	bne.n	8086b22 <loop+0x2a>
        outputParticles();
 8086b1e:	f7fb fb2f 	bl	8082180 <_Z15outputParticlesv>
    }
    //read temp, press, humidity, and TVOCs
    if(debugging_enabled){
 8086b22:	4c9d      	ldr	r4, [pc, #628]	; (8086d98 <loop+0x2a0>)
 8086b24:	6823      	ldr	r3, [r4, #0]
 8086b26:	b173      	cbz	r3, 8086b46 <loop+0x4e>
      Serial.println("Before reading bme");
 8086b28:	f005 fdde 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086b2c:	499b      	ldr	r1, [pc, #620]	; (8086d9c <loop+0x2a4>)
 8086b2e:	f004 fd6c 	bl	808b60a <_ZN5Print7printlnEPKc>
      writeLogFile("before reading bme");
 8086b32:	499b      	ldr	r1, [pc, #620]	; (8086da0 <loop+0x2a8>)
 8086b34:	a806      	add	r0, sp, #24
 8086b36:	f004 fb40 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
 8086b3a:	a806      	add	r0, sp, #24
 8086b3c:	f7fb f8e4 	bl	8081d08 <_Z12writeLogFile6String>
 8086b40:	a806      	add	r0, sp, #24
 8086b42:	f004 faf3 	bl	808b12c <_ZN6StringD1Ev>
    }
    if (! bme.performReading()) {
 8086b46:	4d97      	ldr	r5, [pc, #604]	; (8086da4 <loop+0x2ac>)
 8086b48:	4628      	mov	r0, r5
 8086b4a:	f002 fac7 	bl	80890dc <_ZN15Adafruit_BME68014performReadingEv>
 8086b4e:	b978      	cbnz	r0, 8086b70 <loop+0x78>
      Serial.println("Failed to read BME680");
 8086b50:	f005 fdca 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086b54:	4994      	ldr	r1, [pc, #592]	; (8086da8 <loop+0x2b0>)
 8086b56:	f004 fd58 	bl	808b60a <_ZN5Print7printlnEPKc>
      writeLogFile("Failed to read BME680");
 8086b5a:	4993      	ldr	r1, [pc, #588]	; (8086da8 <loop+0x2b0>)
 8086b5c:	a806      	add	r0, sp, #24
 8086b5e:	f004 fb2c 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
 8086b62:	a806      	add	r0, sp, #24
 8086b64:	f7fb f8d0 	bl	8081d08 <_Z12writeLogFile6String>
 8086b68:	a806      	add	r0, sp, #24
 8086b6a:	f004 fadf 	bl	808b12c <_ZN6StringD1Ev>
      return;
 8086b6e:	e1df      	b.n	8086f30 <loop+0x438>
    }else{
      if(debugging_enabled){
 8086b70:	6823      	ldr	r3, [r4, #0]
 8086b72:	b1cb      	cbz	r3, 8086ba8 <loop+0xb0>
        Serial.printf("Temp=%1.1f, press=%1.1f, rh=%1.1f\n\r", bme.temperature, bme.pressure/100, bme.humidity);
 8086b74:	f005 fdb8 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086b78:	4606      	mov	r6, r0
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 8086b7a:	68a8      	ldr	r0, [r5, #8]
 8086b7c:	f006 fcc4 	bl	808d508 <__aeabi_f2d>
 8086b80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8086b84:	4989      	ldr	r1, [pc, #548]	; (8086dac <loop+0x2b4>)
 8086b86:	6868      	ldr	r0, [r5, #4]
 8086b88:	f007 fa1c 	bl	808dfc4 <__aeabi_fdiv>
 8086b8c:	f006 fcbc 	bl	808d508 <__aeabi_f2d>
 8086b90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8086b94:	6828      	ldr	r0, [r5, #0]
 8086b96:	f006 fcb7 	bl	808d508 <__aeabi_f2d>
 8086b9a:	4a85      	ldr	r2, [pc, #532]	; (8086db0 <loop+0x2b8>)
 8086b9c:	e9cd 0100 	strd	r0, r1, [sp]
 8086ba0:	2100      	movs	r1, #0
 8086ba2:	4630      	mov	r0, r6
 8086ba4:	f004 fe66 	bl	808b874 <_ZN5Print11printf_implEbPKcz>
      }
    }
    if(hih8120_enabled){
 8086ba8:	4b82      	ldr	r3, [pc, #520]	; (8086db4 <loop+0x2bc>)
 8086baa:	681b      	ldr	r3, [r3, #0]
 8086bac:	b10b      	cbz	r3, 8086bb2 <loop+0xba>
        readHIH8120();
 8086bae:	f7ff ff97 	bl	8086ae0 <_Z11readHIH8120v>
    }
    readGpsStream();
 8086bb2:	f7fb f8f9 	bl	8081da8 <_Z13readGpsStreamv>


    //read CO values and apply calibration factors
    CO_float = readCO();
 8086bb6:	f7ff fa15 	bl	8085fe4 <_Z6readCOv>
 8086bba:	4b7f      	ldr	r3, [pc, #508]	; (8086db8 <loop+0x2c0>)


    //CO_float_2 += CO_zero_2;
    //CO_float_2 *= CO_slope_2;

    CO2_float = readCO2();
 8086bbc:	4e7f      	ldr	r6, [pc, #508]	; (8086dbc <loop+0x2c4>)
    }
    readGpsStream();


    //read CO values and apply calibration factors
    CO_float = readCO();
 8086bbe:	6018      	str	r0, [r3, #0]


    //CO_float_2 += CO_zero_2;
    //CO_float_2 *= CO_slope_2;

    CO2_float = readCO2();
 8086bc0:	f7fa ff1c 	bl	80819fc <_Z7readCO2v>


    //correct for altitude
    float pressure_correction = bme.pressure/100;
 8086bc4:	4979      	ldr	r1, [pc, #484]	; (8086dac <loop+0x2b4>)


    //CO_float_2 += CO_zero_2;
    //CO_float_2 *= CO_slope_2;

    CO2_float = readCO2();
 8086bc6:	6030      	str	r0, [r6, #0]


    //correct for altitude
    float pressure_correction = bme.pressure/100;
 8086bc8:	6868      	ldr	r0, [r5, #4]
 8086bca:	f007 f9fb 	bl	808dfc4 <__aeabi_fdiv>
    if(pressure_correction > LOW_PRESSURE_LIMIT && pressure_correction < HIGH_PRESSURE_LIMIT){
 8086bce:	4977      	ldr	r1, [pc, #476]	; (8086dac <loop+0x2b4>)

    CO2_float = readCO2();


    //correct for altitude
    float pressure_correction = bme.pressure/100;
 8086bd0:	4607      	mov	r7, r0
    if(pressure_correction > LOW_PRESSURE_LIMIT && pressure_correction < HIGH_PRESSURE_LIMIT){
 8086bd2:	f007 faff 	bl	808e1d4 <__aeabi_fcmpgt>
 8086bd6:	4635      	mov	r5, r6
 8086bd8:	b1b8      	cbz	r0, 8086c0a <loop+0x112>
 8086bda:	4979      	ldr	r1, [pc, #484]	; (8086dc0 <loop+0x2c8>)
 8086bdc:	4638      	mov	r0, r7
 8086bde:	f007 fadb 	bl	808e198 <__aeabi_fcmplt>
 8086be2:	b190      	cbz	r0, 8086c0a <loop+0x112>
        pressure_correction /= SEALEVELPRESSURE_HPA;
 8086be4:	4977      	ldr	r1, [pc, #476]	; (8086dc4 <loop+0x2cc>)
 8086be6:	4638      	mov	r0, r7
 8086be8:	f007 f9ec 	bl	808dfc4 <__aeabi_fdiv>
        if(debugging_enabled){
 8086bec:	6823      	ldr	r3, [r4, #0]


    //correct for altitude
    float pressure_correction = bme.pressure/100;
    if(pressure_correction > LOW_PRESSURE_LIMIT && pressure_correction < HIGH_PRESSURE_LIMIT){
        pressure_correction /= SEALEVELPRESSURE_HPA;
 8086bee:	4606      	mov	r6, r0
        if(debugging_enabled){
 8086bf0:	b12b      	cbz	r3, 8086bfe <loop+0x106>
            Serial.printf("pressure correction factor for CO2:%1.2f\n\r", pressure_correction);
 8086bf2:	f005 fd79 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086bf6:	4632      	mov	r2, r6
 8086bf8:	4973      	ldr	r1, [pc, #460]	; (8086dc8 <loop+0x2d0>)
 8086bfa:	f7fe fe37 	bl	808586c <_ZN5Print6printfIIfEEEjPKcDpT_>

        }
        CO2_float *= pressure_correction;
 8086bfe:	6828      	ldr	r0, [r5, #0]
 8086c00:	4631      	mov	r1, r6
 8086c02:	f007 f92b 	bl	808de5c <__aeabi_fmul>
 8086c06:	6028      	str	r0, [r5, #0]
 8086c08:	e00a      	b.n	8086c20 <loop+0x128>
    }else{
        Serial.println("Error: Pressure out of range, not using pressure correction for CO2.");
 8086c0a:	f005 fd6d 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086c0e:	496f      	ldr	r1, [pc, #444]	; (8086dcc <loop+0x2d4>)
 8086c10:	f004 fcfb 	bl	808b60a <_ZN5Print7printlnEPKc>
        Serial.printf("Pressure=%1.2f\n\r", pressure_correction);
 8086c14:	f005 fd68 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086c18:	463a      	mov	r2, r7
 8086c1a:	496d      	ldr	r1, [pc, #436]	; (8086dd0 <loop+0x2d8>)
 8086c1c:	f7fe fe26 	bl	808586c <_ZN5Print6printfIIfEEEjPKcDpT_>

    }


    if(ozone_enabled){
 8086c20:	4b6c      	ldr	r3, [pc, #432]	; (8086dd4 <loop+0x2dc>)
 8086c22:	681b      	ldr	r3, [r3, #0]
 8086c24:	b10b      	cbz	r3, 8086c2a <loop+0x132>
        readOzone();
 8086c26:	f7fe ff63 	bl	8085af0 <_Z9readOzonev>
    }


    //sound_average = 0;
    calculateAQI();
 8086c2a:	f7fa fda5 	bl	8081778 <_Z12calculateAQIv>
    sound_average = readSound();
 8086c2e:	f7fa feb7 	bl	80819a0 <_Z9readSoundv>
 8086c32:	4b69      	ldr	r3, [pc, #420]	; (8086dd8 <loop+0x2e0>)
    //read PM values and apply calibration factors
    readPlantower();

    pm_25_correction_factor = PM_25_CONSTANT_A + (PM_25_CONSTANT_B*(readHumidity()/100))/(1 - (readHumidity()/100));
 8086c34:	4d69      	ldr	r5, [pc, #420]	; (8086ddc <loop+0x2e4>)
    }


    //sound_average = 0;
    calculateAQI();
    sound_average = readSound();
 8086c36:	e9c3 0100 	strd	r0, r1, [r3]
    //read PM values and apply calibration factors
    readPlantower();
 8086c3a:	f7fb fa5d 	bl	80820f8 <_Z13readPlantowerv>

    pm_25_correction_factor = PM_25_CONSTANT_A + (PM_25_CONSTANT_B*(readHumidity()/100))/(1 - (readHumidity()/100));
 8086c3e:	f7fa fd51 	bl	80816e4 <_Z12readHumidityv>
 8086c42:	4606      	mov	r6, r0
 8086c44:	f7fa fd4e 	bl	80816e4 <_Z12readHumidityv>
 8086c48:	4958      	ldr	r1, [pc, #352]	; (8086dac <loop+0x2b4>)
 8086c4a:	4680      	mov	r8, r0
 8086c4c:	4630      	mov	r0, r6
 8086c4e:	f007 f9b9 	bl	808dfc4 <__aeabi_fdiv>
 8086c52:	f006 fc59 	bl	808d508 <__aeabi_f2d>
 8086c56:	a348      	add	r3, pc, #288	; (adr r3, 8086d78 <loop+0x280>)
 8086c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8086c5c:	f006 fca8 	bl	808d5b0 <__aeabi_dmul>
 8086c60:	4606      	mov	r6, r0
 8086c62:	460f      	mov	r7, r1
 8086c64:	4640      	mov	r0, r8
 8086c66:	4951      	ldr	r1, [pc, #324]	; (8086dac <loop+0x2b4>)
 8086c68:	f007 f9ac 	bl	808dfc4 <__aeabi_fdiv>
 8086c6c:	4601      	mov	r1, r0
 8086c6e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8086c72:	f006 ffe9 	bl	808dc48 <__aeabi_fsub>
 8086c76:	f006 fc47 	bl	808d508 <__aeabi_f2d>
 8086c7a:	4602      	mov	r2, r0
 8086c7c:	460b      	mov	r3, r1
 8086c7e:	4630      	mov	r0, r6
 8086c80:	4639      	mov	r1, r7
 8086c82:	f006 fdbf 	bl	808d804 <__aeabi_ddiv>
 8086c86:	a33e      	add	r3, pc, #248	; (adr r3, 8086d80 <loop+0x288>)
 8086c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8086c8c:	f006 fade 	bl	808d24c <__adddf3>
 8086c90:	f006 ff86 	bl	808dba0 <__aeabi_d2f>
    if(debugging_enabled){
 8086c94:	6823      	ldr	r3, [r4, #0]
    calculateAQI();
    sound_average = readSound();
    //read PM values and apply calibration factors
    readPlantower();

    pm_25_correction_factor = PM_25_CONSTANT_A + (PM_25_CONSTANT_B*(readHumidity()/100))/(1 - (readHumidity()/100));
 8086c96:	6028      	str	r0, [r5, #0]
    if(debugging_enabled){
 8086c98:	b1b3      	cbz	r3, 8086cc8 <loop+0x1d0>
        Serial.printf("pm2.5 correction factor: %1.2f, %1.2f\n\r", pm_25_correction_factor, readHumidity()/100);
 8086c9a:	f005 fd25 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086c9e:	682f      	ldr	r7, [r5, #0]
 8086ca0:	4606      	mov	r6, r0
 8086ca2:	f7fa fd1f 	bl	80816e4 <_Z12readHumidityv>
 8086ca6:	4941      	ldr	r1, [pc, #260]	; (8086dac <loop+0x2b4>)
 8086ca8:	f007 f98c 	bl	808dfc4 <__aeabi_fdiv>
 8086cac:	f006 fc2c 	bl	808d508 <__aeabi_f2d>
 8086cb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8086cb4:	4638      	mov	r0, r7
 8086cb6:	f006 fc27 	bl	808d508 <__aeabi_f2d>
 8086cba:	4a49      	ldr	r2, [pc, #292]	; (8086de0 <loop+0x2e8>)
 8086cbc:	e9cd 0100 	strd	r0, r1, [sp]
 8086cc0:	2100      	movs	r1, #0
 8086cc2:	4630      	mov	r0, r6
 8086cc4:	f004 fdd6 	bl	808b874 <_ZN5Print11printf_implEbPKcz>
    }
    corrected_PM_25 = PM2_5Value / pm_25_correction_factor;
 8086cc8:	4b46      	ldr	r3, [pc, #280]	; (8086de4 <loop+0x2ec>)
    corrected_PM_25 = corrected_PM_25 + PM_25_zero;
    corrected_PM_25 = corrected_PM_25 * PM_25_slope;
 8086cca:	6818      	ldr	r0, [r3, #0]
 8086ccc:	f007 f872 	bl	808ddb4 <__aeabi_i2f>
 8086cd0:	6829      	ldr	r1, [r5, #0]
 8086cd2:	f007 f977 	bl	808dfc4 <__aeabi_fdiv>
    pm_25_correction_factor = PM_25_CONSTANT_A + (PM_25_CONSTANT_B*(readHumidity()/100))/(1 - (readHumidity()/100));
    if(debugging_enabled){
        Serial.printf("pm2.5 correction factor: %1.2f, %1.2f\n\r", pm_25_correction_factor, readHumidity()/100);
    }
    corrected_PM_25 = PM2_5Value / pm_25_correction_factor;
    corrected_PM_25 = corrected_PM_25 + PM_25_zero;
 8086cd6:	4b44      	ldr	r3, [pc, #272]	; (8086de8 <loop+0x2f0>)
    corrected_PM_25 = corrected_PM_25 * PM_25_slope;
 8086cd8:	4605      	mov	r5, r0
 8086cda:	6818      	ldr	r0, [r3, #0]
 8086cdc:	f007 f86a 	bl	808ddb4 <__aeabi_i2f>
 8086ce0:	4601      	mov	r1, r0
 8086ce2:	4628      	mov	r0, r5
 8086ce4:	f006 ffb2 	bl	808dc4c <__addsf3>
 8086ce8:	4b40      	ldr	r3, [pc, #256]	; (8086dec <loop+0x2f4>)
 8086cea:	6819      	ldr	r1, [r3, #0]
 8086cec:	f007 f8b6 	bl	808de5c <__aeabi_fmul>
 8086cf0:	4b3f      	ldr	r3, [pc, #252]	; (8086df0 <loop+0x2f8>)
 8086cf2:	6018      	str	r0, [r3, #0]

    //getEspWifiStatus();
    outputDataToESP();
 8086cf4:	f7fd fdfe 	bl	80848f4 <_Z15outputDataToESPv>

    sample_counter = ++sample_counter;
 8086cf8:	4a3e      	ldr	r2, [pc, #248]	; (8086df4 <loop+0x2fc>)
 8086cfa:	6813      	ldr	r3, [r2, #0]
 8086cfc:	3301      	adds	r3, #1
    if(sample_counter == 99)    {
 8086cfe:	2b63      	cmp	r3, #99	; 0x63
          sample_counter = 0;
 8086d00:	bf08      	it	eq
 8086d02:	2300      	moveq	r3, #0
 8086d04:	6013      	str	r3, [r2, #0]
    }

    if (Serial.available() > 0) {
 8086d06:	f005 fcef 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086d0a:	6803      	ldr	r3, [r0, #0]
 8086d0c:	691b      	ldr	r3, [r3, #16]
 8086d0e:	4798      	blx	r3
 8086d10:	2800      	cmp	r0, #0
 8086d12:	dd1c      	ble.n	8086d4e <loop+0x256>
        // read the incoming byte:
        incomingByte = Serial.read();
 8086d14:	f005 fce8 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086d18:	6803      	ldr	r3, [r0, #0]
 8086d1a:	4d37      	ldr	r5, [pc, #220]	; (8086df8 <loop+0x300>)
 8086d1c:	695b      	ldr	r3, [r3, #20]
 8086d1e:	4798      	blx	r3
        if(debugging_enabled){
 8086d20:	6823      	ldr	r3, [r4, #0]
          sample_counter = 0;
    }

    if (Serial.available() > 0) {
        // read the incoming byte:
        incomingByte = Serial.read();
 8086d22:	7028      	strb	r0, [r5, #0]
        if(debugging_enabled){
 8086d24:	b14b      	cbz	r3, 8086d3a <loop+0x242>
            Serial.print("incomming byte:");
 8086d26:	f005 fcdf 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086d2a:	4934      	ldr	r1, [pc, #208]	; (8086dfc <loop+0x304>)
 8086d2c:	f004 fc5a 	bl	808b5e4 <_ZN5Print5printEPKc>
            Serial.println(incomingByte);
 8086d30:	f005 fcda 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086d34:	7829      	ldrb	r1, [r5, #0]
 8086d36:	f004 fc72 	bl	808b61e <_ZN5Print7printlnEc>

        }
        Serial.println(incomingByte);
 8086d3a:	f005 fcd5 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086d3e:	7829      	ldrb	r1, [r5, #0]
 8086d40:	f004 fc6d 	bl	808b61e <_ZN5Print7printlnEc>
        if(incomingByte == 'm'){
 8086d44:	782b      	ldrb	r3, [r5, #0]
 8086d46:	2b6d      	cmp	r3, #109	; 0x6d
 8086d48:	d101      	bne.n	8086d4e <loop+0x256>
          serialMenu();
 8086d4a:	f7ff f98d 	bl	8086068 <_Z10serialMenuv>
        }
    }

    if(serial_cellular_enabled){
 8086d4e:	4b2c      	ldr	r3, [pc, #176]	; (8086e00 <loop+0x308>)
 8086d50:	681b      	ldr	r3, [r3, #0]
 8086d52:	2b00      	cmp	r3, #0
 8086d54:	d05a      	beq.n	8086e0c <loop+0x314>
        status_word.status_int |= 0x01;
 8086d56:	4a2b      	ldr	r2, [pc, #172]	; (8086e04 <loop+0x30c>)
 8086d58:	8813      	ldrh	r3, [r2, #0]
 8086d5a:	f043 0301 	orr.w	r3, r3, #1
 8086d5e:	8013      	strh	r3, [r2, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8086d60:	f003 fe18 	bl	808a994 <spark_cloud_flag_connected>
        //Serial.println("Cellular is enabled.");
      if (Particle.connected() == false && tried_cellular_connect == false) {
 8086d64:	2800      	cmp	r0, #0
 8086d66:	f040 808c 	bne.w	8086e82 <loop+0x38a>
 8086d6a:	4b27      	ldr	r3, [pc, #156]	; (8086e08 <loop+0x310>)
 8086d6c:	781a      	ldrb	r2, [r3, #0]
 8086d6e:	2a00      	cmp	r2, #0
 8086d70:	f040 8087 	bne.w	8086e82 <loop+0x38a>
 8086d74:	e094      	b.n	8086ea0 <loop+0x3a8>
 8086d76:	bf00      	nop
 8086d78:	b4395810 	.word	0xb4395810
 8086d7c:	3fbe76c8 	.word	0x3fbe76c8
 8086d80:	70a3d70a 	.word	0x70a3d70a
 8086d84:	3ff30a3d 	.word	0x3ff30a3d
 8086d88:	20000624 	.word	0x20000624
 8086d8c:	20000b94 	.word	0x20000b94
 8086d90:	20000f30 	.word	0x20000f30
 8086d94:	20000bec 	.word	0x20000bec
 8086d98:	20000f08 	.word	0x20000f08
 8086d9c:	08093c29 	.word	0x08093c29
 8086da0:	08093c3c 	.word	0x08093c3c
 8086da4:	20000b04 	.word	0x20000b04
 8086da8:	08091c7b 	.word	0x08091c7b
 8086dac:	42c80000 	.word	0x42c80000
 8086db0:	08093acf 	.word	0x08093acf
 8086db4:	200005fc 	.word	0x200005fc
 8086db8:	20000f14 	.word	0x20000f14
 8086dbc:	20000630 	.word	0x20000630
 8086dc0:	44bb8000 	.word	0x44bb8000
 8086dc4:	447d5000 	.word	0x447d5000
 8086dc8:	08093c4f 	.word	0x08093c4f
 8086dcc:	08093c7a 	.word	0x08093c7a
 8086dd0:	08093cbf 	.word	0x08093cbf
 8086dd4:	20000ec8 	.word	0x20000ec8
 8086dd8:	20000f20 	.word	0x20000f20
 8086ddc:	20000d70 	.word	0x20000d70
 8086de0:	08093cd0 	.word	0x08093cd0
 8086de4:	20000e38 	.word	0x20000e38
 8086de8:	20000b88 	.word	0x20000b88
 8086dec:	20000be8 	.word	0x20000be8
 8086df0:	20000db0 	.word	0x20000db0
 8086df4:	20000b80 	.word	0x20000b80
 8086df8:	20000b8c 	.word	0x20000b8c
 8086dfc:	08093cf8 	.word	0x08093cf8
 8086e00:	2000062c 	.word	0x2000062c
 8086e04:	20000f84 	.word	0x20000f84
 8086e08:	20000f0c 	.word	0x20000f0c
 8086e0c:	f003 fdc2 	bl	808a994 <spark_cloud_flag_connected>
        }
        tried_cellular_connect = false;
      }
    }else{
        //Serial.println("Cellular is disabled.");
      if (Particle.connected() == true) {
 8086e10:	b198      	cbz	r0, 8086e3a <loop+0x342>
          if(debugging_enabled){
 8086e12:	6823      	ldr	r3, [r4, #0]
 8086e14:	b173      	cbz	r3, 8086e34 <loop+0x33c>
            Serial.println("Disconnecting from cellular network");
 8086e16:	f005 fc67 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086e1a:	4947      	ldr	r1, [pc, #284]	; (8086f38 <loop+0x440>)
 8086e1c:	f004 fbf5 	bl	808b60a <_ZN5Print7printlnEPKc>
            writeLogFile("Disconnecting from cellular network");
 8086e20:	4945      	ldr	r1, [pc, #276]	; (8086f38 <loop+0x440>)
 8086e22:	a806      	add	r0, sp, #24
 8086e24:	f004 f9c9 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
 8086e28:	a806      	add	r0, sp, #24
 8086e2a:	f7fa ff6d 	bl	8081d08 <_Z12writeLogFile6String>
 8086e2e:	a806      	add	r0, sp, #24
 8086e30:	f004 f97c 	bl	808b12c <_ZN6StringD1Ev>
          }
          Cellular.off();
 8086e34:	4841      	ldr	r0, [pc, #260]	; (8086f3c <loop+0x444>)
 8086e36:	f7f9 ff97 	bl	8080d68 <_ZN5spark13CellularClass3offEv>
      }
    }

    //check power
    powerCheck.loop();
 8086e3a:	4d41      	ldr	r5, [pc, #260]	; (8086f40 <loop+0x448>)
 8086e3c:	4628      	mov	r0, r5
 8086e3e:	f000 f949 	bl	80870d4 <_ZN10PowerCheck4loopEv>

	//Serial.printf("hasPower=%d hasBattery=%d isCharging=%d\n\r", powerCheck.getHasPower(), powerCheck.getHasBattery(), powerCheck.getIsCharging());
    if((battery_threshold_enable == 1) && (fuel.getSoC() < BATTERY_THRESHOLD) && (powerCheck.getHasPower() == 0)){
 8086e42:	4b40      	ldr	r3, [pc, #256]	; (8086f44 <loop+0x44c>)
 8086e44:	681b      	ldr	r3, [r3, #0]
 8086e46:	2b01      	cmp	r3, #1
 8086e48:	d10a      	bne.n	8086e60 <loop+0x368>
 8086e4a:	483f      	ldr	r0, [pc, #252]	; (8086f48 <loop+0x450>)
 8086e4c:	f004 fffa 	bl	808be44 <_ZN9FuelGauge6getSoCEv>
 8086e50:	493e      	ldr	r1, [pc, #248]	; (8086f4c <loop+0x454>)
 8086e52:	f007 f9a1 	bl	808e198 <__aeabi_fcmplt>
 8086e56:	b118      	cbz	r0, 8086e60 <loop+0x368>
 8086e58:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8086e5c:	2b00      	cmp	r3, #0
 8086e5e:	d05f      	beq.n	8086f20 <loop+0x428>
        Serial.println("Going to sleep because battery is below 20% charge");
        goToSleepBattery();
    }

    if(co2_calibration_timer){
 8086e60:	4a3b      	ldr	r2, [pc, #236]	; (8086f50 <loop+0x458>)
 8086e62:	6813      	ldr	r3, [r2, #0]
 8086e64:	2b00      	cmp	r3, #0
 8086e66:	d063      	beq.n	8086f30 <loop+0x438>
        co2_calibration_timer--;
 8086e68:	3b01      	subs	r3, #1
 8086e6a:	6013      	str	r3, [r2, #0]
        if(debugging_enabled){
 8086e6c:	6823      	ldr	r3, [r4, #0]
 8086e6e:	2b00      	cmp	r3, #0
 8086e70:	d05e      	beq.n	8086f30 <loop+0x438>
            t6713.readStatus(1);
 8086e72:	2101      	movs	r1, #1
 8086e74:	4837      	ldr	r0, [pc, #220]	; (8086f54 <loop+0x45c>)
 8086e76:	f000 fb65 	bl	8087544 <_ZN13Telaire_T671310readStatusEi>
 8086e7a:	e059      	b.n	8086f30 <loop+0x438>

void loop() {

    if(car_topper_power_en && powerCheck.getHasPower() == 0){
        
        goToSleepBattery();
 8086e7c:	f7fb fb02 	bl	8082484 <_Z16goToSleepBatteryv>
 8086e80:	e646      	b.n	8086b10 <loop+0x18>
 8086e82:	f003 fd87 	bl	808a994 <spark_cloud_flag_connected>
          Particle.connect();
          if(debugging_enabled){
            Serial.println("After particle connect");
            writeLogFile("After particle connect");
          }
      }else if(Particle.connected() == true){  //this means that it is already connected
 8086e86:	2800      	cmp	r0, #0
 8086e88:	d0d7      	beq.n	8086e3a <loop+0x342>
        if(debugging_enabled){
 8086e8a:	6823      	ldr	r3, [r4, #0]
 8086e8c:	b123      	cbz	r3, 8086e98 <loop+0x3a0>
          Serial.println("setting tried_cellular_connect to false");
 8086e8e:	f005 fc2b 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086e92:	4931      	ldr	r1, [pc, #196]	; (8086f58 <loop+0x460>)
 8086e94:	f004 fbb9 	bl	808b60a <_ZN5Print7printlnEPKc>
        }
        tried_cellular_connect = false;
 8086e98:	4b30      	ldr	r3, [pc, #192]	; (8086f5c <loop+0x464>)
 8086e9a:	2200      	movs	r2, #0
 8086e9c:	701a      	strb	r2, [r3, #0]
 8086e9e:	e7cc      	b.n	8086e3a <loop+0x342>

    if(serial_cellular_enabled){
        status_word.status_int |= 0x01;
        //Serial.println("Cellular is enabled.");
      if (Particle.connected() == false && tried_cellular_connect == false) {
        tried_cellular_connect = true;
 8086ea0:	2201      	movs	r2, #1
 8086ea2:	701a      	strb	r2, [r3, #0]
          if(debugging_enabled){
 8086ea4:	6823      	ldr	r3, [r4, #0]
 8086ea6:	b173      	cbz	r3, 8086ec6 <loop+0x3ce>
            Serial.println("Connecting to cellular network");
 8086ea8:	f005 fc1e 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086eac:	492c      	ldr	r1, [pc, #176]	; (8086f60 <loop+0x468>)
 8086eae:	f004 fbac 	bl	808b60a <_ZN5Print7printlnEPKc>
            writeLogFile("Connecting to cellular network");
 8086eb2:	492b      	ldr	r1, [pc, #172]	; (8086f60 <loop+0x468>)
 8086eb4:	a806      	add	r0, sp, #24
 8086eb6:	f004 f980 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
 8086eba:	a806      	add	r0, sp, #24
 8086ebc:	f7fa ff24 	bl	8081d08 <_Z12writeLogFile6String>
 8086ec0:	a806      	add	r0, sp, #24
 8086ec2:	f004 f933 	bl	808b12c <_ZN6StringD1Ev>

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 8086ec6:	481d      	ldr	r0, [pc, #116]	; (8086f3c <loop+0x444>)
 8086ec8:	2300      	movs	r3, #0
 8086eca:	461a      	mov	r2, r3
 8086ecc:	4619      	mov	r1, r3
 8086ece:	6840      	ldr	r0, [r0, #4]
 8086ed0:	f003 fd18 	bl	808a904 <network_on>
          }
          Cellular.on();
          if(debugging_enabled){
 8086ed4:	6823      	ldr	r3, [r4, #0]
 8086ed6:	b173      	cbz	r3, 8086ef6 <loop+0x3fe>
            Serial.println("after cellularOn");
 8086ed8:	f005 fc06 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086edc:	4921      	ldr	r1, [pc, #132]	; (8086f64 <loop+0x46c>)
 8086ede:	f004 fb94 	bl	808b60a <_ZN5Print7printlnEPKc>
            writeLogFile("After cellularOn");
 8086ee2:	4921      	ldr	r1, [pc, #132]	; (8086f68 <loop+0x470>)
 8086ee4:	a806      	add	r0, sp, #24
 8086ee6:	f004 f968 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
 8086eea:	a806      	add	r0, sp, #24
 8086eec:	f7fa ff0c 	bl	8081d08 <_Z12writeLogFile6String>
 8086ef0:	a806      	add	r0, sp, #24
 8086ef2:	f004 f91b 	bl	808b12c <_ZN6StringD1Ev>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 8086ef6:	f003 fd45 	bl	808a984 <spark_cloud_flag_connect>
          }
          Particle.connect();
          if(debugging_enabled){
 8086efa:	6823      	ldr	r3, [r4, #0]
 8086efc:	2b00      	cmp	r3, #0
 8086efe:	d09c      	beq.n	8086e3a <loop+0x342>
            Serial.println("After particle connect");
 8086f00:	f005 fbf2 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086f04:	4919      	ldr	r1, [pc, #100]	; (8086f6c <loop+0x474>)
 8086f06:	f004 fb80 	bl	808b60a <_ZN5Print7printlnEPKc>
            writeLogFile("After particle connect");
 8086f0a:	4918      	ldr	r1, [pc, #96]	; (8086f6c <loop+0x474>)
 8086f0c:	a806      	add	r0, sp, #24
 8086f0e:	f004 f954 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
 8086f12:	a806      	add	r0, sp, #24
 8086f14:	f7fa fef8 	bl	8081d08 <_Z12writeLogFile6String>
 8086f18:	a806      	add	r0, sp, #24
 8086f1a:	f004 f907 	bl	808b12c <_ZN6StringD1Ev>
 8086f1e:	e78c      	b.n	8086e3a <loop+0x342>
    //check power
    powerCheck.loop();

	//Serial.printf("hasPower=%d hasBattery=%d isCharging=%d\n\r", powerCheck.getHasPower(), powerCheck.getHasBattery(), powerCheck.getIsCharging());
    if((battery_threshold_enable == 1) && (fuel.getSoC() < BATTERY_THRESHOLD) && (powerCheck.getHasPower() == 0)){
        Serial.println("Going to sleep because battery is below 20% charge");
 8086f20:	f005 fbe2 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8086f24:	4912      	ldr	r1, [pc, #72]	; (8086f70 <loop+0x478>)
 8086f26:	f004 fb70 	bl	808b60a <_ZN5Print7printlnEPKc>
        goToSleepBattery();
 8086f2a:	f7fb faab 	bl	8082484 <_Z16goToSleepBatteryv>
 8086f2e:	e797      	b.n	8086e60 <loop+0x368>
        if(debugging_enabled){
            t6713.readStatus(1);
        }
    }

}
 8086f30:	b00a      	add	sp, #40	; 0x28
 8086f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8086f36:	bf00      	nop
 8086f38:	08093d88 	.word	0x08093d88
 8086f3c:	20001484 	.word	0x20001484
 8086f40:	20000b94 	.word	0x20000b94
 8086f44:	20000f88 	.word	0x20000f88
 8086f48:	20000cc4 	.word	0x20000cc4
 8086f4c:	41a00000 	.word	0x41a00000
 8086f50:	20000f78 	.word	0x20000f78
 8086f54:	20000f8c 	.word	0x20000f8c
 8086f58:	08093d60 	.word	0x08093d60
 8086f5c:	20000f0c 	.word	0x20000f0c
 8086f60:	08093d08 	.word	0x08093d08
 8086f64:	08093d27 	.word	0x08093d27
 8086f68:	08093d38 	.word	0x08093d38
 8086f6c:	08093d49 	.word	0x08093d49
 8086f70:	08093dac 	.word	0x08093dac

08086f74 <_ZN8LMP91000C1Ev>:
#include "LMP91000.h"

LMP91000::LMP91000() {

}
 8086f74:	4770      	bx	lr

08086f76 <_ZN8LMP910004readEh>:

      // read back the value of the register
      return read(reg);
}

uint8_t LMP91000::read(uint8_t reg){
 8086f76:	b510      	push	{r4, lr}
 8086f78:	460c      	mov	r4, r1
      //Serial.println("In read func");
      uint8_t chr = 0;
      Wire.beginTransmission(LMP91000_I2C_ADDRESS);           // START+SLA+W
 8086f7a:	f005 ffcf 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8086f7e:	2148      	movs	r1, #72	; 0x48
 8086f80:	f005 fda2 	bl	808cac8 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(reg);                                        // REG
 8086f84:	f005 ffca 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8086f88:	6803      	ldr	r3, [r0, #0]
 8086f8a:	4621      	mov	r1, r4
 8086f8c:	689b      	ldr	r3, [r3, #8]
 8086f8e:	4798      	blx	r3
      //delay(200);
      Wire.endTransmission(false);                            // REP START
 8086f90:	f005 ffc4 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8086f94:	2100      	movs	r1, #0
 8086f96:	f005 fd9a 	bl	808cace <_ZN7TwoWire15endTransmissionEh>
      //Serial.println("after end transmission");
      Wire.requestFrom(LMP91000_I2C_ADDRESS, 1, true);        // SLA+R
 8086f9a:	f005 ffbf 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8086f9e:	2301      	movs	r3, #1
 8086fa0:	461a      	mov	r2, r3
 8086fa2:	2148      	movs	r1, #72	; 0x48
 8086fa4:	f005 fd87 	bl	808cab6 <_ZN7TwoWire11requestFromEiii>
      if(Wire.available()){
 8086fa8:	f005 ffb8 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8086fac:	6803      	ldr	r3, [r0, #0]
 8086fae:	691b      	ldr	r3, [r3, #16]
 8086fb0:	4798      	blx	r3
 8086fb2:	b128      	cbz	r0, 8086fc0 <_ZN8LMP910004readEh+0x4a>
            chr = Wire.read();                                // DATA
 8086fb4:	f005 ffb2 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8086fb8:	6803      	ldr	r3, [r0, #0]
 8086fba:	695b      	ldr	r3, [r3, #20]
 8086fbc:	4798      	blx	r3
 8086fbe:	b2c0      	uxtb	r0, r0
      }

      return chr;
}
 8086fc0:	bd10      	pop	{r4, pc}

08086fc2 <_ZN8LMP910005writeEhh>:

LMP91000::LMP91000() {

}

uint8_t LMP91000::write(uint8_t reg, uint8_t data) {
 8086fc2:	b570      	push	{r4, r5, r6, lr}
 8086fc4:	4616      	mov	r6, r2
 8086fc6:	460c      	mov	r4, r1
 8086fc8:	4605      	mov	r5, r0

      Wire.beginTransmission(LMP91000_I2C_ADDRESS);           // START+SLA+W
 8086fca:	f005 ffa7 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8086fce:	2148      	movs	r1, #72	; 0x48
 8086fd0:	f005 fd7a 	bl	808cac8 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(reg);                                        // REG
 8086fd4:	f005 ffa2 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8086fd8:	6803      	ldr	r3, [r0, #0]
 8086fda:	4621      	mov	r1, r4
 8086fdc:	689b      	ldr	r3, [r3, #8]
 8086fde:	4798      	blx	r3
      Wire.write(data);                                       // DATA
 8086fe0:	f005 ff9c 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8086fe4:	6803      	ldr	r3, [r0, #0]
 8086fe6:	4631      	mov	r1, r6
 8086fe8:	689b      	ldr	r3, [r3, #8]
 8086fea:	4798      	blx	r3
      Wire.endTransmission(true); // generate stop condition  // STOP
 8086fec:	f005 ff96 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8086ff0:	2101      	movs	r1, #1
 8086ff2:	f005 fd6c 	bl	808cace <_ZN7TwoWire15endTransmissionEh>

      // read back the value of the register
      return read(reg);
 8086ff6:	4621      	mov	r1, r4
 8086ff8:	4628      	mov	r0, r5
}
 8086ffa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      Wire.write(reg);                                        // REG
      Wire.write(data);                                       // DATA
      Wire.endTransmission(true); // generate stop condition  // STOP

      // read back the value of the register
      return read(reg);
 8086ffe:	f7ff bfba 	b.w	8086f76 <_ZN8LMP910004readEh>

08087002 <_ZN8LMP910006statusEv>:

      return chr;
}

uint8_t LMP91000::status(void) {
      return read(LMP91000_STATUS_REG);
 8087002:	2100      	movs	r1, #0
 8087004:	f7ff bfb7 	b.w	8086f76 <_ZN8LMP910004readEh>

08087008 <_ZN8LMP910004lockEv>:
}

uint8_t LMP91000::lock(){ // this is the default state
      return write(LMP91000_LOCK_REG, LMP91000_WRITE_LOCK);
 8087008:	2201      	movs	r2, #1
 808700a:	4611      	mov	r1, r2
 808700c:	f7ff bfd9 	b.w	8086fc2 <_ZN8LMP910005writeEhh>

08087010 <_ZN8LMP910006unlockEv>:
}

uint8_t LMP91000::unlock(){
      return write(LMP91000_LOCK_REG, LMP91000_WRITE_UNLOCK);
 8087010:	2200      	movs	r2, #0
 8087012:	2101      	movs	r1, #1
 8087014:	f7ff bfd5 	b.w	8086fc2 <_ZN8LMP910005writeEhh>

08087018 <_ZN8LMP910009configureEhhh>:
}

uint8_t LMP91000::configure(uint8_t _tiacn, uint8_t _refcn, uint8_t _modecn){
 8087018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808701c:	4604      	mov	r4, r0
 808701e:	4688      	mov	r8, r1
 8087020:	4617      	mov	r7, r2
 8087022:	461e      	mov	r6, r3

      if(status() == LMP91000_READY){
 8087024:	f7ff ffed 	bl	8087002 <_ZN8LMP910006statusEv>
 8087028:	2801      	cmp	r0, #1
 808702a:	4605      	mov	r5, r0
 808702c:	d115      	bne.n	808705a <_ZN8LMP910009configureEhhh+0x42>
            unlock();
 808702e:	4620      	mov	r0, r4
 8087030:	f7ff ffee 	bl	8087010 <_ZN8LMP910006unlockEv>
            write(LMP91000_TIACN_REG, _tiacn);
 8087034:	4642      	mov	r2, r8
 8087036:	2110      	movs	r1, #16
 8087038:	4620      	mov	r0, r4
 808703a:	f7ff ffc2 	bl	8086fc2 <_ZN8LMP910005writeEhh>
            write(LMP91000_REFCN_REG, _refcn);
 808703e:	463a      	mov	r2, r7
 8087040:	2111      	movs	r1, #17
 8087042:	4620      	mov	r0, r4
 8087044:	f7ff ffbd 	bl	8086fc2 <_ZN8LMP910005writeEhh>
            write(LMP91000_MODECN_REG, _modecn);
 8087048:	4632      	mov	r2, r6
 808704a:	2112      	movs	r1, #18
 808704c:	4620      	mov	r0, r4
 808704e:	f7ff ffb8 	bl	8086fc2 <_ZN8LMP910005writeEhh>
            lock();
 8087052:	4620      	mov	r0, r4
 8087054:	f7ff ffd8 	bl	8087008 <_ZN8LMP910004lockEv>
            return 1;
 8087058:	e000      	b.n	808705c <_ZN8LMP910009configureEhhh+0x44>
      }
      return 0;
 808705a:	2500      	movs	r5, #0
}
 808705c:	4628      	mov	r0, r5
 808705e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08087062 <_GLOBAL__sub_I__ZN8LMP91000C2Ev>:
 8087062:	f003 b9d1 	b.w	808a408 <HAL_Pin_Map>
	...

08087068 <_ZN10PowerCheckD1Ev>:
#include "PowerCheck.h"

PowerCheck::PowerCheck() {
}

PowerCheck::~PowerCheck() {
 8087068:	b510      	push	{r4, lr}
 808706a:	4604      	mov	r4, r0
 808706c:	4b03      	ldr	r3, [pc, #12]	; (808707c <_ZN10PowerCheckD1Ev+0x14>)
 808706e:	f840 3b14 	str.w	r3, [r0], #20
 8087072:	f003 fd45 	bl	808ab00 <_ZN4PMICD1Ev>
}
 8087076:	4620      	mov	r0, r4
 8087078:	bd10      	pop	{r4, pc}
 808707a:	bf00      	nop
 808707c:	08093de8 	.word	0x08093de8

08087080 <_ZN10PowerCheckD0Ev>:
#include "PowerCheck.h"

PowerCheck::PowerCheck() {
}

PowerCheck::~PowerCheck() {
 8087080:	b510      	push	{r4, lr}
 8087082:	4604      	mov	r4, r0
}
 8087084:	f7ff fff0 	bl	8087068 <_ZN10PowerCheckD1Ev>
 8087088:	4620      	mov	r0, r4
 808708a:	2124      	movs	r1, #36	; 0x24
 808708c:	f005 ff8b 	bl	808cfa6 <_ZdlPvj>
 8087090:	4620      	mov	r0, r4
 8087092:	bd10      	pop	{r4, pc}

08087094 <_ZN10PowerCheckC1Ev>:
#include "PowerCheck.h"

PowerCheck::PowerCheck() {
 8087094:	b538      	push	{r3, r4, r5, lr}
 8087096:	4604      	mov	r4, r0
 8087098:	4b0d      	ldr	r3, [pc, #52]	; (80870d0 <_ZN10PowerCheckC1Ev+0x3c>)
 808709a:	2500      	movs	r5, #0
 808709c:	6003      	str	r3, [r0, #0]
 808709e:	2332      	movs	r3, #50	; 0x32
 80870a0:	6043      	str	r3, [r0, #4]
 80870a2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80870a6:	6083      	str	r3, [r0, #8]
 80870a8:	60c5      	str	r5, [r0, #12]
 80870aa:	6105      	str	r5, [r0, #16]
 80870ac:	4629      	mov	r1, r5
 80870ae:	3014      	adds	r0, #20
 80870b0:	f003 fd17 	bl	808aae2 <_ZN4PMICC1Eb>
 80870b4:	2301      	movs	r3, #1
 80870b6:	61a5      	str	r5, [r4, #24]
 80870b8:	61e5      	str	r5, [r4, #28]
 80870ba:	f884 5020 	strb.w	r5, [r4, #32]
 80870be:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
 80870c2:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 80870c6:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
}
 80870ca:	4620      	mov	r0, r4
 80870cc:	bd38      	pop	{r3, r4, r5, pc}
 80870ce:	bf00      	nop
 80870d0:	08093de8 	.word	0x08093de8

080870d4 <_ZN10PowerCheck4loopEv>:

PowerCheck::~PowerCheck() {
}

void PowerCheck::loop() {
 80870d4:	b510      	push	{r4, lr}
 80870d6:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80870d8:	f003 fa46 	bl	808a568 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastFastCheck >= FAST_CHECK_INTERVAL_MS) {
 80870dc:	68e3      	ldr	r3, [r4, #12]
 80870de:	1ac0      	subs	r0, r0, r3
 80870e0:	6863      	ldr	r3, [r4, #4]
 80870e2:	4298      	cmp	r0, r3
 80870e4:	d31f      	bcc.n	8087126 <_ZN10PowerCheck4loopEv+0x52>
 80870e6:	f003 fa3f 	bl	808a568 <HAL_Timer_Get_Milli_Seconds>
		// For reasons explained in greater detail we need to check the system status register frequently.
		// But not too frequently, because it does use some system resources to communicate over I2C.
		// An interval of 50 milliseconds, or 20 times per second, seems about right.
		// Setting the interval to 100 milliseconds causes it to miss the condition looked for below sometimes.

		lastFastCheck = millis();
 80870ea:	60e0      	str	r0, [r4, #12]

		byte systemStatus = pmic.getSystemStatus();
 80870ec:	f104 0014 	add.w	r0, r4, #20
 80870f0:	f003 fd51 	bl	808ab96 <_ZN4PMIC15getSystemStatusEv>
		if ((systemStatus & 0x04) != 0) {
 80870f4:	f000 0304 	and.w	r3, r0, #4
 80870f8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80870fc:	b173      	cbz	r3, 808711c <_ZN10PowerCheck4loopEv+0x48>
			// Bit 5 CHRG_STAT[1] R
			// Bit 4 CHRG_STAT[0] R
			// 00 – Not Charging, 01 – Pre-charge (<VBATLOWV), 10 – Fast Charging, 11 – Charge Termination Done
			byte chrgStat = (systemStatus >> 4) & 0x3;

			if (chrgStat != lastChrgStat) {
 80870fe:	f894 3020 	ldrb.w	r3, [r4, #32]
			// (It works similarly for a USB charger, except it's 0x24 and 0x34).

			// Bit 5 CHRG_STAT[1] R
			// Bit 4 CHRG_STAT[0] R
			// 00 – Not Charging, 01 – Pre-charge (<VBATLOWV), 10 – Fast Charging, 11 – Charge Termination Done
			byte chrgStat = (systemStatus >> 4) & 0x3;
 8087102:	f3c0 1001 	ubfx	r0, r0, #4, #2

			if (chrgStat != lastChrgStat) {
 8087106:	4283      	cmp	r3, r0
				// Here's where we check to see if the charging status changes. When there's no battery present
				// it changes a lot between fast charging and charge termination done, but since we're polling
				// here instead of using interrupts, we have to poll frequently enough to see states.
				// (The BQ24195 power manager controller is connected to BATT_INT_PC13, but accessing that
				// interrupt from user code is a pain, so I just poll here.)
				changeCount++;
 8087108:	bf1f      	itttt	ne
 808710a:	69e3      	ldrne	r3, [r4, #28]
				lastChrgStat = chrgStat;
 808710c:	f884 0020 	strbne.w	r0, [r4, #32]
				// Here's where we check to see if the charging status changes. When there's no battery present
				// it changes a lot between fast charging and charge termination done, but since we're polling
				// here instead of using interrupts, we have to poll frequently enough to see states.
				// (The BQ24195 power manager controller is connected to BATT_INT_PC13, but accessing that
				// interrupt from user code is a pain, so I just poll here.)
				changeCount++;
 8087110:	3301      	addne	r3, #1
 8087112:	61e3      	strne	r3, [r4, #28]
				lastChrgStat = chrgStat;
			}

			// We have power (USB or VIN)
			hasPower = true;
 8087114:	2301      	movs	r3, #1
 8087116:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 808711a:	e001      	b.n	8087120 <_ZN10PowerCheck4loopEv+0x4c>
			// 0x34 (Charge Termination Done, Power Good)
			// It does not seem to be possible to tell the difference between VIN and a USB charger
		}
		else {
			// Power good is false, so that means we must be running off battery
			hasPower = false;
 808711c:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
		}

		checkCount++;
 8087120:	69a3      	ldr	r3, [r4, #24]
 8087122:	3301      	adds	r3, #1
 8087124:	61a3      	str	r3, [r4, #24]
 8087126:	f003 fa1f 	bl	808a568 <HAL_Timer_Get_Milli_Seconds>
	}
	if (millis() - lastSlowCheck > SLOW_CHECK_INTERVAL_MS) {
 808712a:	6923      	ldr	r3, [r4, #16]
 808712c:	1ac0      	subs	r0, r0, r3
 808712e:	68a3      	ldr	r3, [r4, #8]
 8087130:	4298      	cmp	r0, r3
 8087132:	d91c      	bls.n	808716e <_ZN10PowerCheck4loopEv+0x9a>
 8087134:	f003 fa18 	bl	808a568 <HAL_Timer_Get_Milli_Seconds>
		lastSlowCheck = millis();

		// Normally we get a checkCount of 36 or so, and a changeCount of 18 when there's no battery
		hasBattery = ! ((checkCount > 10) && (changeCount > (checkCount / 4)));
 8087138:	69a3      	ldr	r3, [r4, #24]
		}

		checkCount++;
	}
	if (millis() - lastSlowCheck > SLOW_CHECK_INTERVAL_MS) {
		lastSlowCheck = millis();
 808713a:	6120      	str	r0, [r4, #16]

		// Normally we get a checkCount of 36 or so, and a changeCount of 18 when there's no battery
		hasBattery = ! ((checkCount > 10) && (changeCount > (checkCount / 4)));
 808713c:	2b0a      	cmp	r3, #10
 808713e:	dd06      	ble.n	808714e <_ZN10PowerCheck4loopEv+0x7a>
 8087140:	69e2      	ldr	r2, [r4, #28]
 8087142:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 8087146:	bfd4      	ite	le
 8087148:	2301      	movle	r3, #1
 808714a:	2300      	movgt	r3, #0
 808714c:	e000      	b.n	8087150 <_ZN10PowerCheck4loopEv+0x7c>
 808714e:	2301      	movs	r3, #1
 8087150:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22

		// The battery is charging if in pre-charge or fast charge mode
		isCharging = hasBattery && (lastChrgStat == 1 || lastChrgStat == 2);
 8087154:	b133      	cbz	r3, 8087164 <_ZN10PowerCheck4loopEv+0x90>
 8087156:	f894 3020 	ldrb.w	r3, [r4, #32]
 808715a:	3b01      	subs	r3, #1
 808715c:	2b01      	cmp	r3, #1
 808715e:	bf8c      	ite	hi
 8087160:	2300      	movhi	r3, #0
 8087162:	2301      	movls	r3, #1
 8087164:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23

		checkCount = 0;
 8087168:	2300      	movs	r3, #0
 808716a:	61a3      	str	r3, [r4, #24]
		changeCount = 0;
 808716c:	61e3      	str	r3, [r4, #28]
 808716e:	bd10      	pop	{r4, pc}

08087170 <_GLOBAL__sub_I__ZN10PowerCheckC2Ev>:
 8087170:	f003 b94a 	b.w	808a408 <HAL_Pin_Map>

08087174 <_ZL8i2cwriteh>:
/**************************************************************************/
/*!
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static void i2cwrite(uint8_t x) {
 8087174:	b510      	push	{r4, lr}
 8087176:	4604      	mov	r4, r0
  #else
  Wire.send(x);
  #endif
  */
  
  Wire.write((uint8_t)x);
 8087178:	f005 fed0 	bl	808cf1c <_Z19__fetch_global_Wirev>
 808717c:	6803      	ldr	r3, [r0, #0]
 808717e:	4621      	mov	r1, r4
}
 8087180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  #else
  Wire.send(x);
  #endif
  */
  
  Wire.write((uint8_t)x);
 8087184:	689b      	ldr	r3, [r3, #8]
 8087186:	4718      	bx	r3

08087188 <_ZL7i2creadv>:
/**************************************************************************/
/*!
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static uint8_t i2cread(void) {
 8087188:	b508      	push	{r3, lr}
  #else
  return Wire.receive();
  #endif
  */
  
  return Wire.read();
 808718a:	f005 fec7 	bl	808cf1c <_Z19__fetch_global_Wirev>
 808718e:	6803      	ldr	r3, [r0, #0]
 8087190:	695b      	ldr	r3, [r3, #20]
 8087192:	4798      	blx	r3
}
 8087194:	b2c0      	uxtb	r0, r0
 8087196:	bd08      	pop	{r3, pc}

08087198 <_ZL13writeRegisterhht>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static void writeRegister(uint8_t i2cAddress, uint8_t reg, uint16_t value) {
 8087198:	b570      	push	{r4, r5, r6, lr}
 808719a:	4606      	mov	r6, r0
 808719c:	460d      	mov	r5, r1
 808719e:	4614      	mov	r4, r2
  Wire.beginTransmission(i2cAddress);
 80871a0:	f005 febc 	bl	808cf1c <_Z19__fetch_global_Wirev>
 80871a4:	4631      	mov	r1, r6
 80871a6:	f005 fc8b 	bl	808cac0 <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite((uint8_t)reg);
 80871aa:	4628      	mov	r0, r5
 80871ac:	f7ff ffe2 	bl	8087174 <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value>>8));
 80871b0:	0a20      	lsrs	r0, r4, #8
 80871b2:	f7ff ffdf 	bl	8087174 <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value & 0xFF));
 80871b6:	b2e0      	uxtb	r0, r4
 80871b8:	f7ff ffdc 	bl	8087174 <_ZL8i2cwriteh>
  Wire.endTransmission();
 80871bc:	f005 feae 	bl	808cf1c <_Z19__fetch_global_Wirev>
}
 80871c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
static void writeRegister(uint8_t i2cAddress, uint8_t reg, uint16_t value) {
  Wire.beginTransmission(i2cAddress);
  i2cwrite((uint8_t)reg);
  i2cwrite((uint8_t)(value>>8));
  i2cwrite((uint8_t)(value & 0xFF));
  Wire.endTransmission();
 80871c4:	f005 bc87 	b.w	808cad6 <_ZN7TwoWire15endTransmissionEv>

080871c8 <_ZL12readRegisterhh.isra.0>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
 80871c8:	b510      	push	{r4, lr}
 80871ca:	4604      	mov	r4, r0
  Wire.beginTransmission(i2cAddress);
 80871cc:	f005 fea6 	bl	808cf1c <_Z19__fetch_global_Wirev>
 80871d0:	4621      	mov	r1, r4
 80871d2:	f005 fc75 	bl	808cac0 <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite(ADS1015_REG_POINTER_CONVERT);
 80871d6:	2000      	movs	r0, #0
 80871d8:	f7ff ffcc 	bl	8087174 <_ZL8i2cwriteh>
  Wire.endTransmission();
 80871dc:	f005 fe9e 	bl	808cf1c <_Z19__fetch_global_Wirev>
 80871e0:	f005 fc79 	bl	808cad6 <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(i2cAddress, (uint8_t)2);
 80871e4:	f005 fe9a 	bl	808cf1c <_Z19__fetch_global_Wirev>
 80871e8:	4621      	mov	r1, r4
 80871ea:	2202      	movs	r2, #2
 80871ec:	f005 fc5b 	bl	808caa6 <_ZN7TwoWire11requestFromEhh>
  return ((i2cread() << 8) | i2cread());  
 80871f0:	f7ff ffca 	bl	8087188 <_ZL7i2creadv>
 80871f4:	4604      	mov	r4, r0
 80871f6:	f7ff ffc7 	bl	8087188 <_ZL7i2creadv>
 80871fa:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
}
 80871fe:	b280      	uxth	r0, r0
 8087200:	bd10      	pop	{r4, pc}

08087202 <_ZN16Adafruit_ADS1115C1Eh>:
Adafruit_ADS1015::Adafruit_ADS1015(uint8_t i2cAddress) 
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1015_CONVERSIONDELAY;
   m_bitShift = 4;
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
 8087202:	2200      	movs	r2, #0
    @brief  Instantiates a new ADS1115 class w/appropriate properties
*/
/**************************************************************************/
Adafruit_ADS1115::Adafruit_ADS1115(uint8_t i2cAddress)
{
   m_i2cAddress = i2cAddress;
 8087204:	7001      	strb	r1, [r0, #0]
   m_conversionDelay = ADS1115_CONVERSIONDELAY;
 8087206:	2108      	movs	r1, #8
Adafruit_ADS1015::Adafruit_ADS1015(uint8_t i2cAddress) 
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1015_CONVERSIONDELAY;
   m_bitShift = 4;
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
 8087208:	8082      	strh	r2, [r0, #4]
*/
/**************************************************************************/
Adafruit_ADS1115::Adafruit_ADS1115(uint8_t i2cAddress)
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1115_CONVERSIONDELAY;
 808720a:	7041      	strb	r1, [r0, #1]
   m_bitShift = 0;
 808720c:	7082      	strb	r2, [r0, #2]
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
}
 808720e:	4770      	bx	lr

08087210 <_ZN16Adafruit_ADS10155beginEv>:
/**************************************************************************/
/*!
    @brief  Sets up the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
void Adafruit_ADS1015::begin() {
 8087210:	b508      	push	{r3, lr}
  Wire.begin();
 8087212:	f005 fe83 	bl	808cf1c <_Z19__fetch_global_Wirev>
}
 8087216:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/*!
    @brief  Sets up the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
void Adafruit_ADS1015::begin() {
  Wire.begin();
 808721a:	f005 bc35 	b.w	808ca88 <_ZN7TwoWire5beginEv>

0808721e <_ZN16Adafruit_ADS10157setGainE9adsGain_t>:
    @brief  Sets the gain and input voltage range
*/
/**************************************************************************/
void Adafruit_ADS1015::setGain(adsGain_t gain)
{
  m_gain = gain;
 808721e:	8081      	strh	r1, [r0, #4]
 8087220:	4770      	bx	lr

08087222 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>:
/*!
    @brief  Gets a single-ended ADC reading from the specified channel
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
  if (channel > 3)
 8087222:	2903      	cmp	r1, #3
/**************************************************************************/
/*!
    @brief  Gets a single-ended ADC reading from the specified channel
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
 8087224:	b510      	push	{r4, lr}
 8087226:	4604      	mov	r4, r0
  if (channel > 3)
 8087228:	d822      	bhi.n	8087270 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x4e>

  // Set PGA/voltage range
  config |= m_gain;

  // Set single-ended input channel
  switch (channel)
 808722a:	2902      	cmp	r1, #2
                    ADS1015_REG_CONFIG_CMODE_TRAD   | // Traditional comparator (default val)
                    ADS1015_REG_CONFIG_DR_1600SPS   | // 1600 samples per second (default)
                    ADS1015_REG_CONFIG_MODE_SINGLE;   // Single-shot mode (default)

  // Set PGA/voltage range
  config |= m_gain;
 808722c:	8882      	ldrh	r2, [r0, #4]

  // Set single-ended input channel
  switch (channel)
 808722e:	d008      	beq.n	8087242 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x20>
 8087230:	2903      	cmp	r1, #3
 8087232:	d009      	beq.n	8087248 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x26>
 8087234:	2901      	cmp	r1, #1
  {
    case (0):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_0;
 8087236:	bf14      	ite	ne
 8087238:	f442 4283 	orrne.w	r2, r2, #16768	; 0x4180
      break;
    case (1):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
 808723c:	f442 42a3 	orreq.w	r2, r2, #20864	; 0x5180
 8087240:	e004      	b.n	808724c <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x2a>
      break;
    case (2):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
 8087242:	f442 42c3 	orr.w	r2, r2, #24960	; 0x6180
 8087246:	e001      	b.n	808724c <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x2a>
      break;
    case (3):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
 8087248:	f442 42e3 	orr.w	r2, r2, #29056	; 0x7180
 808724c:	f042 0203 	orr.w	r2, r2, #3

  // Set 'start single-conversion' bit
  config |= ADS1015_REG_CONFIG_OS_SINGLE;

  // Write config register to the ADC
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
 8087250:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8087254:	2101      	movs	r1, #1
 8087256:	7820      	ldrb	r0, [r4, #0]
 8087258:	f7ff ff9e 	bl	8087198 <_ZL13writeRegisterhht>

  // Wait for the conversion to complete
  delay(m_conversionDelay);
 808725c:	7860      	ldrb	r0, [r4, #1]
 808725e:	f004 fd7d 	bl	808bd5c <delay>

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
 8087262:	7820      	ldrb	r0, [r4, #0]
 8087264:	f7ff ffb0 	bl	80871c8 <_ZL12readRegisterhh.isra.0>
 8087268:	78a3      	ldrb	r3, [r4, #2]
 808726a:	4118      	asrs	r0, r3
 808726c:	b280      	uxth	r0, r0
 808726e:	bd10      	pop	{r4, pc}
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
  if (channel > 3)
  {
    return 0;
 8087270:	2000      	movs	r0, #0
  delay(m_conversionDelay);

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
}
 8087272:	bd10      	pop	{r4, pc}

08087274 <_GLOBAL__sub_I__ZN16Adafruit_ADS1015C2Eh>:
 8087274:	f003 b8c8 	b.w	808a408 <HAL_Pin_Map>

08087278 <_ZN3GPS15set_lat_decimalE6Stringc>:
#include "gps.h"



//set decimal value of latitude from NMEA string
void GPS::set_lat_decimal(String latString, char nsString){
 8087278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808727c:	460e      	mov	r6, r1
 808727e:	b088      	sub	sp, #32
 8087280:	4604      	mov	r4, r0
 8087282:	4615      	mov	r5, r2
    String whole_str = latString.substring(0,2);
 8087284:	4668      	mov	r0, sp
 8087286:	2302      	movs	r3, #2
 8087288:	2200      	movs	r2, #0
 808728a:	f004 f935 	bl	808b4f8 <_ZNK6String9substringEjj>
    String frac_str = latString.substring(2,10);
 808728e:	230a      	movs	r3, #10
 8087290:	2202      	movs	r2, #2
 8087292:	4631      	mov	r1, r6
 8087294:	a804      	add	r0, sp, #16
 8087296:	f004 f92f 	bl	808b4f8 <_ZNK6String9substringEjj>
    latWhole = whole_str.toInt();
 808729a:	4668      	mov	r0, sp
 808729c:	f004 f954 	bl	808b548 <_ZNK6String5toIntEv>
 80872a0:	83a0      	strh	r0, [r4, #28]
    latFrac = frac_str.toInt();
 80872a2:	a804      	add	r0, sp, #16
 80872a4:	f004 f950 	bl	808b548 <_ZNK6String5toIntEv>
 80872a8:	83e0      	strh	r0, [r4, #30]

    int whole_part = whole_str.toInt();
 80872aa:	4668      	mov	r0, sp
 80872ac:	f004 f94c 	bl	808b548 <_ZNK6String5toIntEv>
 80872b0:	4606      	mov	r6, r0
    //Serial.print("Whole part:");
    //Serial.println(whole_part);

    double frac_part = frac_str.toFloat();
 80872b2:	a804      	add	r0, sp, #16
 80872b4:	f004 f94d 	bl	808b552 <_ZNK6String7toFloatEv>
 80872b8:	4680      	mov	r8, r0
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    latitude = whole_part;
    latitude += (frac_part)/60;
 80872ba:	4630      	mov	r0, r6
 80872bc:	f006 f912 	bl	808d4e4 <__aeabi_i2d>
 80872c0:	4606      	mov	r6, r0
 80872c2:	4640      	mov	r0, r8
 80872c4:	460f      	mov	r7, r1
 80872c6:	f006 f91f 	bl	808d508 <__aeabi_f2d>
 80872ca:	2200      	movs	r2, #0
 80872cc:	4b0c      	ldr	r3, [pc, #48]	; (8087300 <_ZN3GPS15set_lat_decimalE6Stringc+0x88>)
 80872ce:	f006 fa99 	bl	808d804 <__aeabi_ddiv>
 80872d2:	460b      	mov	r3, r1
 80872d4:	4602      	mov	r2, r0
 80872d6:	4639      	mov	r1, r7
 80872d8:	4630      	mov	r0, r6
 80872da:	f005 ffb7 	bl	808d24c <__adddf3>
    if(nsString == 'S'){
 80872de:	2d53      	cmp	r5, #83	; 0x53
        ns_indicator = 0;
 80872e0:	bf0c      	ite	eq
 80872e2:	2300      	moveq	r3, #0
    }else{
        ns_indicator = 0x80;
 80872e4:	2380      	movne	r3, #128	; 0x80
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    latitude = whole_part;
    latitude += (frac_part)/60;
 80872e6:	e9c4 0102 	strd	r0, r1, [r4, #8]
    if(nsString == 'S'){
        ns_indicator = 0;
    }else{
        ns_indicator = 0x80;
 80872ea:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24


//set decimal value of latitude from NMEA string
void GPS::set_lat_decimal(String latString, char nsString){
    String whole_str = latString.substring(0,2);
    String frac_str = latString.substring(2,10);
 80872ee:	a804      	add	r0, sp, #16
 80872f0:	f003 ff1c 	bl	808b12c <_ZN6StringD1Ev>



//set decimal value of latitude from NMEA string
void GPS::set_lat_decimal(String latString, char nsString){
    String whole_str = latString.substring(0,2);
 80872f4:	4668      	mov	r0, sp
 80872f6:	f003 ff19 	bl	808b12c <_ZN6StringD1Ev>
    if(nsString == 'S'){
        ns_indicator = 0;
    }else{
        ns_indicator = 0x80;
    }
}
 80872fa:	b008      	add	sp, #32
 80872fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8087300:	404e0000 	.word	0x404e0000

08087304 <_ZN3GPS16set_long_decimalE6Stringc>:

void GPS::set_long_decimal(String longString, char ewString){
 8087304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8087308:	460e      	mov	r6, r1
 808730a:	b088      	sub	sp, #32
 808730c:	4604      	mov	r4, r0
 808730e:	4615      	mov	r5, r2
    String whole_str = longString.substring(0,3);
 8087310:	4668      	mov	r0, sp
 8087312:	2303      	movs	r3, #3
 8087314:	2200      	movs	r2, #0
 8087316:	f004 f8ef 	bl	808b4f8 <_ZNK6String9substringEjj>
    String frac_str = longString.substring(3,10);
 808731a:	230a      	movs	r3, #10
 808731c:	2203      	movs	r2, #3
 808731e:	4631      	mov	r1, r6
 8087320:	a804      	add	r0, sp, #16
 8087322:	f004 f8e9 	bl	808b4f8 <_ZNK6String9substringEjj>

    longWhole = whole_str.toInt();
 8087326:	4668      	mov	r0, sp
 8087328:	f004 f90e 	bl	808b548 <_ZNK6String5toIntEv>
 808732c:	8420      	strh	r0, [r4, #32]
    longFrac = frac_str.toInt();
 808732e:	a804      	add	r0, sp, #16
 8087330:	f004 f90a 	bl	808b548 <_ZNK6String5toIntEv>
 8087334:	8460      	strh	r0, [r4, #34]	; 0x22
    int whole_part = whole_str.toInt();
 8087336:	4668      	mov	r0, sp
 8087338:	f004 f906 	bl	808b548 <_ZNK6String5toIntEv>
 808733c:	4606      	mov	r6, r0
    //Serial.print("Whole string: ");
    //Serial.println(whole_str);
    //Serial.print("Whole part:");
    //Serial.println(whole_part);

    double frac_part = frac_str.toFloat();
 808733e:	a804      	add	r0, sp, #16
 8087340:	f004 f907 	bl	808b552 <_ZNK6String7toFloatEv>
 8087344:	4680      	mov	r8, r0
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    longitude = whole_part;
    longitude += (frac_part)/60;
 8087346:	4630      	mov	r0, r6
 8087348:	f006 f8cc 	bl	808d4e4 <__aeabi_i2d>
 808734c:	4606      	mov	r6, r0
 808734e:	4640      	mov	r0, r8
 8087350:	460f      	mov	r7, r1
 8087352:	f006 f8d9 	bl	808d508 <__aeabi_f2d>
 8087356:	2200      	movs	r2, #0
 8087358:	4b0c      	ldr	r3, [pc, #48]	; (808738c <_ZN3GPS16set_long_decimalE6Stringc+0x88>)
 808735a:	f006 fa53 	bl	808d804 <__aeabi_ddiv>
 808735e:	460b      	mov	r3, r1
 8087360:	4602      	mov	r2, r0
 8087362:	4639      	mov	r1, r7
 8087364:	4630      	mov	r0, r6
 8087366:	f005 ff71 	bl	808d24c <__adddf3>
    if(ewString == 'E'){
 808736a:	2d45      	cmp	r5, #69	; 0x45
      ew_indicator = 0;
 808736c:	bf0c      	ite	eq
 808736e:	2300      	moveq	r3, #0
    }else{
      ew_indicator = 0x01;
 8087370:	2301      	movne	r3, #1
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    longitude = whole_part;
    longitude += (frac_part)/60;
 8087372:	e9c4 0104 	strd	r0, r1, [r4, #16]
    if(ewString == 'E'){
      ew_indicator = 0;
    }else{
      ew_indicator = 0x01;
 8087376:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    }
}

void GPS::set_long_decimal(String longString, char ewString){
    String whole_str = longString.substring(0,3);
    String frac_str = longString.substring(3,10);
 808737a:	a804      	add	r0, sp, #16
 808737c:	f003 fed6 	bl	808b12c <_ZN6StringD1Ev>
        ns_indicator = 0x80;
    }
}

void GPS::set_long_decimal(String longString, char ewString){
    String whole_str = longString.substring(0,3);
 8087380:	4668      	mov	r0, sp
 8087382:	f003 fed3 	bl	808b12c <_ZN6StringD1Ev>
    if(ewString == 'E'){
      ew_indicator = 0;
    }else{
      ew_indicator = 0x01;
    }
}
 8087386:	b008      	add	sp, #32
 8087388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808738c:	404e0000 	.word	0x404e0000

08087390 <_ZN3GPS14set_satellitesE6String>:

void GPS::set_satellites(String satString){
 8087390:	b510      	push	{r4, lr}
 8087392:	4604      	mov	r4, r0
    satellites_used = satString.toInt();
 8087394:	4608      	mov	r0, r1
 8087396:	f004 f8d7 	bl	808b548 <_ZNK6String5toIntEv>
 808739a:	62e0      	str	r0, [r4, #44]	; 0x2c
 808739c:	bd10      	pop	{r4, pc}
	...

080873a0 <_ZN3GPS23set_horizontalDillutionE6String>:
}

void GPS::set_horizontalDillution(String hdString){
 80873a0:	b510      	push	{r4, lr}
 80873a2:	4604      	mov	r4, r0
    float temp_float = hdString.toFloat();
 80873a4:	4608      	mov	r0, r1
 80873a6:	f004 f8d4 	bl	808b552 <_ZNK6String7toFloatEv>
    temp_float *= 10;

    horizontal_dillution = temp_float;
 80873aa:	4902      	ldr	r1, [pc, #8]	; (80873b4 <_ZN3GPS23set_horizontalDillutionE6String+0x14>)
 80873ac:	f006 fd56 	bl	808de5c <__aeabi_fmul>
 80873b0:	6320      	str	r0, [r4, #48]	; 0x30
 80873b2:	bd10      	pop	{r4, pc}
 80873b4:	41200000 	.word	0x41200000

080873b8 <_ZN3GPS12get_latitudeEv>:
}

double GPS::get_latitude(void){
    return latitude;
}
 80873b8:	f100 0108 	add.w	r1, r0, #8
 80873bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80873c0:	4770      	bx	lr

080873c2 <_ZN3GPS13get_longitudeEv>:

double GPS::get_longitude(void){
    return longitude;
}
 80873c2:	f100 0110 	add.w	r1, r0, #16
 80873c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80873ca:	4770      	bx	lr

080873cc <_ZN3GPS23get_horizontalDillutionEv>:

int GPS::get_satellites(void){
    return satellites_used;
}

int GPS::get_horizontalDillution(void){
 80873cc:	b508      	push	{r3, lr}
    return horizontal_dillution;
 80873ce:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80873d0:	f006 ff0a 	bl	808e1e8 <__aeabi_f2iz>
}
 80873d4:	bd08      	pop	{r3, pc}

080873d6 <_ZN3GPS17get_latitudeWholeEv>:

int16_t GPS::get_latitudeWhole(void){
    return latWhole;
}
 80873d6:	f9b0 001c 	ldrsh.w	r0, [r0, #28]
 80873da:	4770      	bx	lr

080873dc <_ZN3GPS16get_latitudeFracEv>:
int16_t GPS::get_latitudeFrac(void){
    return latFrac;
}
 80873dc:	f9b0 001e 	ldrsh.w	r0, [r0, #30]
 80873e0:	4770      	bx	lr

080873e2 <_ZN3GPS18get_longitudeWholeEv>:
int16_t GPS::get_longitudeWhole(void){
    return longWhole;
}
 80873e2:	f9b0 0020 	ldrsh.w	r0, [r0, #32]
 80873e6:	4770      	bx	lr

080873e8 <_ZN3GPS17get_longitudeFracEv>:
int16_t GPS::get_longitudeFrac(void){
    return longFrac;
}
 80873e8:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 80873ec:	4770      	bx	lr

080873ee <_ZN3GPS15get_nsIndicatorEv>:

int8_t GPS::get_nsIndicator(void){
    return ns_indicator;
}
 80873ee:	f990 0024 	ldrsb.w	r0, [r0, #36]	; 0x24
 80873f2:	4770      	bx	lr

080873f4 <_ZN3GPS15get_ewIndicatorEv>:

int8_t GPS::get_ewIndicator(void){
    return ew_indicator;
}
 80873f4:	f990 0025 	ldrsb.w	r0, [r0, #37]	; 0x25
 80873f8:	4770      	bx	lr

080873fa <_GLOBAL__sub_I__ZN3GPS15set_lat_decimalE6Stringc>:
 80873fa:	f003 b805 	b.w	808a408 <HAL_Pin_Map>

080873fe <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80873fe:	6803      	ldr	r3, [r0, #0]
 8087400:	b2c9      	uxtb	r1, r1
 8087402:	689b      	ldr	r3, [r3, #8]
 8087404:	4718      	bx	r3

08087406 <_ZN13Telaire_T6713C1Ev>:
#define ADDR_6713  0x15 // default I2C slave address

Telaire_T6713::Telaire_T6713()
{
  //perform initialization
}
 8087406:	4770      	bx	lr

08087408 <_ZN13Telaire_T67135beginEv>:

bool Telaire_T6713::begin()
{
 8087408:	b510      	push	{r4, lr}
  LSB = 0;
  #ifdef T6713_DEBUG
  Serial.println("Begin Telaire_T6713");
  #endif
  // start I2C
  Wire.beginTransmission(ADDR_6713);
 808740a:	f005 fd87 	bl	808cf1c <_Z19__fetch_global_Wirev>
 808740e:	2115      	movs	r1, #21
 8087410:	f005 fb5a 	bl	808cac8 <_ZN7TwoWire17beginTransmissionEi>

  // Function code = 0x04
  Wire.write(0x04);
 8087414:	f005 fd82 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8087418:	2104      	movs	r1, #4
 808741a:	f7ff fff0 	bl	80873fe <_ZN7TwoWire5writeEi>
  // Starting address (MSB) = 0x13
  Wire.write(0x13);
 808741e:	f005 fd7d 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8087422:	2113      	movs	r1, #19
 8087424:	f7ff ffeb 	bl	80873fe <_ZN7TwoWire5writeEi>
  // Starting address (LSB) = 0x8B
  Wire.write(0x8B);
 8087428:	f005 fd78 	bl	808cf1c <_Z19__fetch_global_Wirev>
 808742c:	218b      	movs	r1, #139	; 0x8b
 808742e:	f7ff ffe6 	bl	80873fe <_ZN7TwoWire5writeEi>
  // Input registers to read (MSB) = 0x00
  Wire.write(0x00);
 8087432:	f005 fd73 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8087436:	2100      	movs	r1, #0
 8087438:	f7ff ffe1 	bl	80873fe <_ZN7TwoWire5writeEi>
  // Input registers to read (LSB) = 0x01
  Wire.write(0x01);
 808743c:	f005 fd6e 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8087440:	2101      	movs	r1, #1
 8087442:	f7ff ffdc 	bl	80873fe <_ZN7TwoWire5writeEi>

  // end transmission
  Wire.endTransmission();
 8087446:	f005 fd69 	bl	808cf1c <_Z19__fetch_global_Wirev>
 808744a:	f005 fb44 	bl	808cad6 <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(ADDR_6713, 4);    // request 6 bytes from slave device
 808744e:	f005 fd65 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8087452:	2204      	movs	r2, #4
 8087454:	2115      	movs	r1, #21
 8087456:	f005 fb29 	bl	808caac <_ZN7TwoWire11requestFromEii>
  while(Wire.available() == 0);
 808745a:	f005 fd5f 	bl	808cf1c <_Z19__fetch_global_Wirev>
 808745e:	6803      	ldr	r3, [r0, #0]
 8087460:	691b      	ldr	r3, [r3, #16]
 8087462:	4798      	blx	r3
 8087464:	2800      	cmp	r0, #0
 8087466:	d0f8      	beq.n	808745a <_ZN13Telaire_T67135beginEv+0x52>
  func_code = Wire.read();
 8087468:	f005 fd58 	bl	808cf1c <_Z19__fetch_global_Wirev>
 808746c:	6803      	ldr	r3, [r0, #0]
 808746e:	695b      	ldr	r3, [r3, #20]
 8087470:	4798      	blx	r3
  byte_count = Wire.read();
 8087472:	f005 fd53 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8087476:	6803      	ldr	r3, [r0, #0]
 8087478:	695b      	ldr	r3, [r3, #20]
 808747a:	4798      	blx	r3
  MSB = Wire.read();
 808747c:	f005 fd4e 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8087480:	6803      	ldr	r3, [r0, #0]
 8087482:	695b      	ldr	r3, [r3, #20]
 8087484:	4798      	blx	r3
 8087486:	4604      	mov	r4, r0
  LSB = Wire.read();
 8087488:	f005 fd48 	bl	808cf1c <_Z19__fetch_global_Wirev>
 808748c:	6803      	ldr	r3, [r0, #0]
 808748e:	b2e4      	uxtb	r4, r4
 8087490:	695b      	ldr	r3, [r3, #20]
 8087492:	4798      	blx	r3
 8087494:	b2c0      	uxtb	r0, r0
 8087496:	eb00 2004 	add.w	r0, r0, r4, lsl #8
  {
    return false;
  }

  return true;
}
 808749a:	3000      	adds	r0, #0
 808749c:	bf18      	it	ne
 808749e:	2001      	movne	r0, #1
 80874a0:	bd10      	pop	{r4, pc}

080874a2 <_ZN13Telaire_T67138queryPPMEv>:
// send request to read current gas measurement in ppm
// return status: 0 success
void Telaire_T6713::queryPPM()
{
 80874a2:	b508      	push	{r3, lr}
  byte_count = 0;
  MSB = 0;
  LSB = 0;

  // start I2C
  Wire.beginTransmission(ADDR_6713);
 80874a4:	f005 fd3a 	bl	808cf1c <_Z19__fetch_global_Wirev>
 80874a8:	2115      	movs	r1, #21
 80874aa:	f005 fb0d 	bl	808cac8 <_ZN7TwoWire17beginTransmissionEi>

  // Function code = 0x04
  Wire.write(0x04);
 80874ae:	f005 fd35 	bl	808cf1c <_Z19__fetch_global_Wirev>
 80874b2:	2104      	movs	r1, #4
 80874b4:	f7ff ffa3 	bl	80873fe <_ZN7TwoWire5writeEi>
  // Starting address (MSB) = 0x13
  Wire.write(0x13);
 80874b8:	f005 fd30 	bl	808cf1c <_Z19__fetch_global_Wirev>
 80874bc:	2113      	movs	r1, #19
 80874be:	f7ff ff9e 	bl	80873fe <_ZN7TwoWire5writeEi>
  // Starting address (LSB) = 0x8B
  Wire.write(0x8B);
 80874c2:	f005 fd2b 	bl	808cf1c <_Z19__fetch_global_Wirev>
 80874c6:	218b      	movs	r1, #139	; 0x8b
 80874c8:	f7ff ff99 	bl	80873fe <_ZN7TwoWire5writeEi>
  // Input registers to read (MSB) = 0x00
  Wire.write(0x00);
 80874cc:	f005 fd26 	bl	808cf1c <_Z19__fetch_global_Wirev>
 80874d0:	2100      	movs	r1, #0
 80874d2:	f7ff ff94 	bl	80873fe <_ZN7TwoWire5writeEi>
  // Input registers to read (LSB) = 0x01
  Wire.write(0x01);
 80874d6:	f005 fd21 	bl	808cf1c <_Z19__fetch_global_Wirev>
 80874da:	2101      	movs	r1, #1
 80874dc:	f7ff ff8f 	bl	80873fe <_ZN7TwoWire5writeEi>

  // end transmission
  Wire.endTransmission();
 80874e0:	f005 fd1c 	bl	808cf1c <_Z19__fetch_global_Wirev>
  Serial.println(LSB);
  int ppm = MSB*256 + LSB;
  Serial.println(ppm);*/


}
 80874e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Wire.write(0x00);
  // Input registers to read (LSB) = 0x01
  Wire.write(0x01);

  // end transmission
  Wire.endTransmission();
 80874e8:	f005 baf5 	b.w	808cad6 <_ZN7TwoWire15endTransmissionEv>

080874ec <_ZN13Telaire_T67137readPPMEv>:

}

// read report of current gas measurement in ppm
int Telaire_T6713::readPPM()
{
 80874ec:	b510      	push	{r4, lr}
  LSB = 0;
  #ifdef T6713_DEBUG
  Serial.println("reading gas ppm");
  #endif

  queryPPM();
 80874ee:	f7ff ffd8 	bl	80874a2 <_ZN13Telaire_T67138queryPPMEv>
  Wire.requestFrom(ADDR_6713, 4);    // request 6 bytes from slave device
 80874f2:	f005 fd13 	bl	808cf1c <_Z19__fetch_global_Wirev>
 80874f6:	2204      	movs	r2, #4
 80874f8:	2115      	movs	r1, #21
 80874fa:	f005 fad7 	bl	808caac <_ZN7TwoWire11requestFromEii>

   while(Wire.available() == 0);
 80874fe:	f005 fd0d 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8087502:	6803      	ldr	r3, [r0, #0]
 8087504:	691b      	ldr	r3, [r3, #16]
 8087506:	4798      	blx	r3
 8087508:	2800      	cmp	r0, #0
 808750a:	d0f8      	beq.n	80874fe <_ZN13Telaire_T67137readPPMEv+0x12>
   func_code = Wire.read();
 808750c:	f005 fd06 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8087510:	6803      	ldr	r3, [r0, #0]
 8087512:	695b      	ldr	r3, [r3, #20]
 8087514:	4798      	blx	r3
   byte_count = Wire.read();
 8087516:	f005 fd01 	bl	808cf1c <_Z19__fetch_global_Wirev>
 808751a:	6803      	ldr	r3, [r0, #0]
 808751c:	695b      	ldr	r3, [r3, #20]
 808751e:	4798      	blx	r3
   MSB = Wire.read();
 8087520:	f005 fcfc 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8087524:	6803      	ldr	r3, [r0, #0]
 8087526:	695b      	ldr	r3, [r3, #20]
 8087528:	4798      	blx	r3
 808752a:	4604      	mov	r4, r0
   LSB = Wire.read();
 808752c:	f005 fcf6 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8087530:	6803      	ldr	r3, [r0, #0]
   Serial.print("LSB: ");
   Serial.println(LSB);
   #endif

   // ppm = MSB*256 + LSB
   return ((MSB<<8)|LSB);
 8087532:	0224      	lsls	r4, r4, #8

   while(Wire.available() == 0);
   func_code = Wire.read();
   byte_count = Wire.read();
   MSB = Wire.read();
   LSB = Wire.read();
 8087534:	695b      	ldr	r3, [r3, #20]
 8087536:	4798      	blx	r3
   Serial.print("LSB: ");
   Serial.println(LSB);
   #endif

   // ppm = MSB*256 + LSB
   return ((MSB<<8)|LSB);
 8087538:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 808753c:	b2c0      	uxtb	r0, r0
}
 808753e:	4320      	orrs	r0, r4
 8087540:	bd10      	pop	{r4, pc}
	...

08087544 <_ZN13Telaire_T671310readStatusEi>:

void Telaire_T6713::readStatus(int debugging)
{
 8087544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8087548:	460c      	mov	r4, r1
  byte func_code, byte_count, MSB, LSB;
  func_code = 0;
  byte_count = 0;
  MSB = 0;
  LSB = 0;
  Wire.beginTransmission(ADDR_6713);
 808754a:	f005 fce7 	bl	808cf1c <_Z19__fetch_global_Wirev>
 808754e:	2115      	movs	r1, #21
 8087550:	f005 faba 	bl	808cac8 <_ZN7TwoWire17beginTransmissionEi>
  //Wire.write(0x00);
  // Input registers to read (LSB) = 0x01
  //Wire.write(0x01);

  // Function code = 0x04
  Wire.write(0x04);
 8087554:	f005 fce2 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8087558:	2104      	movs	r1, #4
 808755a:	f7ff ff50 	bl	80873fe <_ZN7TwoWire5writeEi>
  // Starting address (MSB) = 0x13
  Wire.write(0x13);
 808755e:	f005 fcdd 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8087562:	2113      	movs	r1, #19
 8087564:	f7ff ff4b 	bl	80873fe <_ZN7TwoWire5writeEi>
  // Starting address (LSB) = 0x8B
  Wire.write(0x8A);
 8087568:	f005 fcd8 	bl	808cf1c <_Z19__fetch_global_Wirev>
 808756c:	218a      	movs	r1, #138	; 0x8a
 808756e:	f7ff ff46 	bl	80873fe <_ZN7TwoWire5writeEi>
  // Input registers to read (MSB) = 0x00
  Wire.write(0x00);
 8087572:	f005 fcd3 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8087576:	2100      	movs	r1, #0
 8087578:	f7ff ff41 	bl	80873fe <_ZN7TwoWire5writeEi>
  // Input registers to read (LSB) = 0x01
  Wire.write(0x01);
 808757c:	f005 fcce 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8087580:	2101      	movs	r1, #1
 8087582:	f7ff ff3c 	bl	80873fe <_ZN7TwoWire5writeEi>

  // end transmission
   Wire.endTransmission();
 8087586:	f005 fcc9 	bl	808cf1c <_Z19__fetch_global_Wirev>
 808758a:	f005 faa4 	bl	808cad6 <_ZN7TwoWire15endTransmissionEv>
   if(debugging){
 808758e:	b124      	cbz	r4, 808759a <_ZN13Telaire_T671310readStatusEi+0x56>
       Serial.println("reading CO2 sensor status");
 8087590:	f005 f8aa 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8087594:	492c      	ldr	r1, [pc, #176]	; (8087648 <_ZN13Telaire_T671310readStatusEi+0x104>)
 8087596:	f004 f838 	bl	808b60a <_ZN5Print7printlnEPKc>
   }
   Wire.requestFrom(ADDR_6713, 4);    // request 6 bytes from slave device
 808759a:	f005 fcbf 	bl	808cf1c <_Z19__fetch_global_Wirev>
 808759e:	2204      	movs	r2, #4
 80875a0:	2115      	movs	r1, #21
 80875a2:	f005 fa83 	bl	808caac <_ZN7TwoWire11requestFromEii>

   while(Wire.available() == 0);
 80875a6:	f005 fcb9 	bl	808cf1c <_Z19__fetch_global_Wirev>
 80875aa:	6803      	ldr	r3, [r0, #0]
 80875ac:	691b      	ldr	r3, [r3, #16]
 80875ae:	4798      	blx	r3
 80875b0:	2800      	cmp	r0, #0
 80875b2:	d0f8      	beq.n	80875a6 <_ZN13Telaire_T671310readStatusEi+0x62>
   func_code = Wire.read();
 80875b4:	f005 fcb2 	bl	808cf1c <_Z19__fetch_global_Wirev>
 80875b8:	6803      	ldr	r3, [r0, #0]
 80875ba:	695b      	ldr	r3, [r3, #20]
 80875bc:	4798      	blx	r3
 80875be:	4680      	mov	r8, r0
   byte_count = Wire.read();
 80875c0:	f005 fcac 	bl	808cf1c <_Z19__fetch_global_Wirev>
 80875c4:	6803      	ldr	r3, [r0, #0]
 80875c6:	695b      	ldr	r3, [r3, #20]
 80875c8:	4798      	blx	r3
 80875ca:	4607      	mov	r7, r0
   MSB = Wire.read();
 80875cc:	f005 fca6 	bl	808cf1c <_Z19__fetch_global_Wirev>
 80875d0:	6803      	ldr	r3, [r0, #0]
 80875d2:	695b      	ldr	r3, [r3, #20]
 80875d4:	4798      	blx	r3
 80875d6:	4606      	mov	r6, r0
   LSB = Wire.read();
 80875d8:	f005 fca0 	bl	808cf1c <_Z19__fetch_global_Wirev>
 80875dc:	6803      	ldr	r3, [r0, #0]
 80875de:	695b      	ldr	r3, [r3, #20]
 80875e0:	4798      	blx	r3
 80875e2:	4605      	mov	r5, r0
   if(debugging){
 80875e4:	b374      	cbz	r4, 8087644 <_ZN13Telaire_T671310readStatusEi+0x100>
       Serial.print("Func code: ");
 80875e6:	f005 f87f 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80875ea:	4918      	ldr	r1, [pc, #96]	; (808764c <_ZN13Telaire_T671310readStatusEi+0x108>)
 80875ec:	f003 fffa 	bl	808b5e4 <_ZN5Print5printEPKc>
       Serial.println(func_code, HEX);
 80875f0:	f005 f87a 	bl	808c6e8 <_Z16_fetch_usbserialv>
 80875f4:	2210      	movs	r2, #16
 80875f6:	fa5f f188 	uxtb.w	r1, r8
 80875fa:	f004 f846 	bl	808b68a <_ZN5Print7printlnEhi>
       Serial.print("byte count: ");
 80875fe:	f005 f873 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8087602:	4913      	ldr	r1, [pc, #76]	; (8087650 <_ZN13Telaire_T671310readStatusEi+0x10c>)
 8087604:	f003 ffee 	bl	808b5e4 <_ZN5Print5printEPKc>
       Serial.println(byte_count, HEX);
 8087608:	f005 f86e 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808760c:	2210      	movs	r2, #16
 808760e:	b2f9      	uxtb	r1, r7
 8087610:	f004 f83b 	bl	808b68a <_ZN5Print7printlnEhi>
       Serial.print("MSB: ");
 8087614:	f005 f868 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8087618:	490e      	ldr	r1, [pc, #56]	; (8087654 <_ZN13Telaire_T671310readStatusEi+0x110>)
 808761a:	f003 ffe3 	bl	808b5e4 <_ZN5Print5printEPKc>
       Serial.println(MSB, BIN);
 808761e:	f005 f863 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8087622:	2202      	movs	r2, #2
 8087624:	b2f1      	uxtb	r1, r6
 8087626:	f004 f830 	bl	808b68a <_ZN5Print7printlnEhi>
       Serial.print("LSB: ");
 808762a:	f005 f85d 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808762e:	490a      	ldr	r1, [pc, #40]	; (8087658 <_ZN13Telaire_T671310readStatusEi+0x114>)
 8087630:	f003 ffd8 	bl	808b5e4 <_ZN5Print5printEPKc>
       Serial.println(LSB, BIN);
 8087634:	f005 f858 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8087638:	b2e9      	uxtb	r1, r5
 808763a:	2202      	movs	r2, #2
   }

}
 808763c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
       Serial.print("byte count: ");
       Serial.println(byte_count, HEX);
       Serial.print("MSB: ");
       Serial.println(MSB, BIN);
       Serial.print("LSB: ");
       Serial.println(LSB, BIN);
 8087640:	f004 b823 	b.w	808b68a <_ZN5Print7printlnEhi>
 8087644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8087648:	08093df0 	.word	0x08093df0
 808764c:	08093e0a 	.word	0x08093e0a
 8087650:	08093e16 	.word	0x08093e16
 8087654:	08093e23 	.word	0x08093e23
 8087658:	08093e29 	.word	0x08093e29

0808765c <_ZN13Telaire_T671311resetSensorEv>:
   }

}

void Telaire_T6713::resetSensor()
{
 808765c:	b508      	push	{r3, lr}
  Wire.beginTransmission(ADDR_6713);
 808765e:	f005 fc5d 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8087662:	2115      	movs	r1, #21
 8087664:	f005 fa30 	bl	808cac8 <_ZN7TwoWire17beginTransmissionEi>

  // Function code = 0x04
  Wire.write(0x05);
 8087668:	f005 fc58 	bl	808cf1c <_Z19__fetch_global_Wirev>
 808766c:	2105      	movs	r1, #5
 808766e:	f7ff fec6 	bl	80873fe <_ZN7TwoWire5writeEi>
  // Starting address (MSB) = 0x13
  Wire.write(0x03);
 8087672:	f005 fc53 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8087676:	2103      	movs	r1, #3
 8087678:	f7ff fec1 	bl	80873fe <_ZN7TwoWire5writeEi>
  // Starting address (LSB) = 0x8B
  Wire.write(0xE8);
 808767c:	f005 fc4e 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8087680:	21e8      	movs	r1, #232	; 0xe8
 8087682:	f7ff febc 	bl	80873fe <_ZN7TwoWire5writeEi>
  // Input registers to read (MSB) = 0x00
  Wire.write(0xFF);
 8087686:	f005 fc49 	bl	808cf1c <_Z19__fetch_global_Wirev>
 808768a:	21ff      	movs	r1, #255	; 0xff
 808768c:	f7ff feb7 	bl	80873fe <_ZN7TwoWire5writeEi>
  // Input registers to read (LSB) = 0x01
  Wire.write(0x00);
 8087690:	f005 fc44 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8087694:	2100      	movs	r1, #0
 8087696:	f7ff feb2 	bl	80873fe <_ZN7TwoWire5writeEi>

  // end transmission
   Wire.endTransmission();
 808769a:	f005 fc3f 	bl	808cf1c <_Z19__fetch_global_Wirev>
}
 808769e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Wire.write(0xFF);
  // Input registers to read (LSB) = 0x01
  Wire.write(0x00);

  // end transmission
   Wire.endTransmission();
 80876a2:	f005 ba18 	b.w	808cad6 <_ZN7TwoWire15endTransmissionEv>

080876a6 <_ZN13Telaire_T671315disableABCLogicEv>:
}

void Telaire_T6713::disableABCLogic()
{
 80876a6:	b508      	push	{r3, lr}
    Wire.beginTransmission(ADDR_6713);
 80876a8:	f005 fc38 	bl	808cf1c <_Z19__fetch_global_Wirev>
 80876ac:	2115      	movs	r1, #21
 80876ae:	f005 fa0b 	bl	808cac8 <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 80876b2:	f005 fc33 	bl	808cf1c <_Z19__fetch_global_Wirev>
 80876b6:	2105      	movs	r1, #5
 80876b8:	f7ff fea1 	bl	80873fe <_ZN7TwoWire5writeEi>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 80876bc:	f005 fc2e 	bl	808cf1c <_Z19__fetch_global_Wirev>
 80876c0:	2103      	movs	r1, #3
 80876c2:	f7ff fe9c 	bl	80873fe <_ZN7TwoWire5writeEi>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEE);
 80876c6:	f005 fc29 	bl	808cf1c <_Z19__fetch_global_Wirev>
 80876ca:	21ee      	movs	r1, #238	; 0xee
 80876cc:	f7ff fe97 	bl	80873fe <_ZN7TwoWire5writeEi>
    // Input registers to read (MSB) = 0x00
    Wire.write(0x00);
 80876d0:	f005 fc24 	bl	808cf1c <_Z19__fetch_global_Wirev>
 80876d4:	2100      	movs	r1, #0
 80876d6:	f7ff fe92 	bl	80873fe <_ZN7TwoWire5writeEi>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 80876da:	f005 fc1f 	bl	808cf1c <_Z19__fetch_global_Wirev>
 80876de:	2100      	movs	r1, #0
 80876e0:	f7ff fe8d 	bl	80873fe <_ZN7TwoWire5writeEi>

    // end transmission
    Wire.endTransmission();
 80876e4:	f005 fc1a 	bl	808cf1c <_Z19__fetch_global_Wirev>
}
 80876e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.write(0x00);
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);

    // end transmission
    Wire.endTransmission();
 80876ec:	f005 b9f3 	b.w	808cad6 <_ZN7TwoWire15endTransmissionEv>

080876f0 <_ZN13Telaire_T671314enableABCLogicEv>:
}

void Telaire_T6713::enableABCLogic()
{
 80876f0:	b508      	push	{r3, lr}
    Wire.beginTransmission(ADDR_6713);
 80876f2:	f005 fc13 	bl	808cf1c <_Z19__fetch_global_Wirev>
 80876f6:	2115      	movs	r1, #21
 80876f8:	f005 f9e6 	bl	808cac8 <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 80876fc:	f005 fc0e 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8087700:	2105      	movs	r1, #5
 8087702:	f7ff fe7c 	bl	80873fe <_ZN7TwoWire5writeEi>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 8087706:	f005 fc09 	bl	808cf1c <_Z19__fetch_global_Wirev>
 808770a:	2103      	movs	r1, #3
 808770c:	f7ff fe77 	bl	80873fe <_ZN7TwoWire5writeEi>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEE);
 8087710:	f005 fc04 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8087714:	21ee      	movs	r1, #238	; 0xee
 8087716:	f7ff fe72 	bl	80873fe <_ZN7TwoWire5writeEi>
    // Input registers to read (MSB) = 0x00
    Wire.write(0xFF);
 808771a:	f005 fbff 	bl	808cf1c <_Z19__fetch_global_Wirev>
 808771e:	21ff      	movs	r1, #255	; 0xff
 8087720:	f7ff fe6d 	bl	80873fe <_ZN7TwoWire5writeEi>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 8087724:	f005 fbfa 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8087728:	2100      	movs	r1, #0
 808772a:	f7ff fe68 	bl	80873fe <_ZN7TwoWire5writeEi>

    // end transmission
    Wire.endTransmission();
 808772e:	f005 fbf5 	bl	808cf1c <_Z19__fetch_global_Wirev>
}
 8087732:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.write(0xFF);
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);

    // end transmission
    Wire.endTransmission();
 8087736:	f005 b9ce 	b.w	808cad6 <_ZN7TwoWire15endTransmissionEv>
	...

0808773c <_ZN13Telaire_T67139calibrateEi>:
}


//start a 1 point calibration - this lasts 6 minutes so check the status bit
void Telaire_T6713::calibrate(int debugging)
{
 808773c:	b508      	push	{r3, lr}
    if(debugging){
 808773e:	b121      	cbz	r1, 808774a <_ZN13Telaire_T67139calibrateEi+0xe>
      Serial.println("Calibrating CO2");
 8087740:	f004 ffd2 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8087744:	4913      	ldr	r1, [pc, #76]	; (8087794 <_ZN13Telaire_T67139calibrateEi+0x58>)
 8087746:	f003 ff60 	bl	808b60a <_ZN5Print7printlnEPKc>
    }
    //[0x05, 0x03, 0xec, 0xff, 0x00]
    Wire.beginTransmission(ADDR_6713);
 808774a:	f005 fbe7 	bl	808cf1c <_Z19__fetch_global_Wirev>
 808774e:	2115      	movs	r1, #21
 8087750:	f005 f9ba 	bl	808cac8 <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 8087754:	f005 fbe2 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8087758:	2105      	movs	r1, #5
 808775a:	f7ff fe50 	bl	80873fe <_ZN7TwoWire5writeEi>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 808775e:	f005 fbdd 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8087762:	2103      	movs	r1, #3
 8087764:	f7ff fe4b 	bl	80873fe <_ZN7TwoWire5writeEi>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEC);
 8087768:	f005 fbd8 	bl	808cf1c <_Z19__fetch_global_Wirev>
 808776c:	21ec      	movs	r1, #236	; 0xec
 808776e:	f7ff fe46 	bl	80873fe <_ZN7TwoWire5writeEi>
    // Input registers to read (MSB) = 0x00
    Wire.write(0xFF);
 8087772:	f005 fbd3 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8087776:	21ff      	movs	r1, #255	; 0xff
 8087778:	f7ff fe41 	bl	80873fe <_ZN7TwoWire5writeEi>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 808777c:	f005 fbce 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8087780:	2100      	movs	r1, #0
 8087782:	f7ff fe3c 	bl	80873fe <_ZN7TwoWire5writeEi>

    // end transmission
    Wire.endTransmission();
 8087786:	f005 fbc9 	bl	808cf1c <_Z19__fetch_global_Wirev>
}
 808778a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.write(0xFF);
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);

    // end transmission
    Wire.endTransmission();
 808778e:	f005 b9a2 	b.w	808cad6 <_ZN7TwoWire15endTransmissionEv>
 8087792:	bf00      	nop
 8087794:	08093e2f 	.word	0x08093e2f

08087798 <_GLOBAL__sub_I__ZN13Telaire_T6713C2Ev>:
 8087798:	f002 be36 	b.w	808a408 <HAL_Pin_Map>

0808779c <_GLOBAL__sub_I__ZN7istream3getEv>:
 808779c:	f002 be34 	b.w	808a408 <HAL_Pin_Map>

080877a0 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
 80877a0:	b510      	push	{r4, lr}
 80877a2:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync();
 80877a4:	3028      	adds	r0, #40	; 0x28
 80877a6:	f001 f97f 	bl	8088aa8 <_ZN8FatCache4syncEv>
 80877aa:	b128      	cbz	r0, 80877b8 <_ZN9FatVolume9cacheSyncEv+0x18>
 80877ac:	f504 700d 	add.w	r0, r4, #564	; 0x234
  }
 80877b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync();
 80877b4:	f001 b978 	b.w	8088aa8 <_ZN8FatCache4syncEv>
  }
 80877b8:	bd10      	pop	{r4, pc}

080877ba <_ZN7FatFile11lfnChecksumEPh>:
 * <http://www.gnu.org/licenses/>.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
 80877ba:	1e41      	subs	r1, r0, #1
 80877bc:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
 80877c0:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 80877c2:	0843      	lsrs	r3, r0, #1
 80877c4:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
 80877c8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80877cc:	4418      	add	r0, r3
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 80877ce:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 80877d0:	f000 00ff 	and.w	r0, r0, #255	; 0xff
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 80877d4:	d1f5      	bne.n	80877c2 <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
 80877d6:	4770      	bx	lr

080877d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
 80877d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
 80877dc:	7803      	ldrb	r3, [r0, #0]
 80877de:	1c44      	adds	r4, r0, #1
 80877e0:	2b20      	cmp	r3, #32
 80877e2:	d101      	bne.n	80877e8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x10>
 80877e4:	4620      	mov	r0, r4
 80877e6:	e7f9      	b.n	80877dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
    path++;
  }
  fname->lfn = path;
 80877e8:	4605      	mov	r5, r0
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 80877ea:	4f70      	ldr	r7, [pc, #448]	; (80879ac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
 80877ec:	6088      	str	r0, [r1, #8]
 80877ee:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
 80877f0:	462e      	mov	r6, r5
 80877f2:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
 80877f6:	b30b      	cbz	r3, 808783c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x64>
 80877f8:	2b2f      	cmp	r3, #47	; 0x2f
 80877fa:	d101      	bne.n	8087800 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x28>
 80877fc:	1903      	adds	r3, r0, r4
 80877fe:	e017      	b.n	8087830 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x58>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 8087800:	2b5c      	cmp	r3, #92	; 0x5c
 8087802:	d102      	bne.n	808780a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x32>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
 8087804:	2000      	movs	r0, #0
 8087806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 808780a:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
 808780e:	b2e4      	uxtb	r4, r4
 8087810:	2c1d      	cmp	r4, #29
 8087812:	d803      	bhi.n	808781c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x44>
 8087814:	fa27 f404 	lsr.w	r4, r7, r4
 8087818:	07e4      	lsls	r4, r4, #31
 808781a:	d4f3      	bmi.n	8087804 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
 808781c:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
 8087820:	2c3c      	cmp	r4, #60	; 0x3c
 8087822:	d0ef      	beq.n	8087804 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
 8087824:	3b20      	subs	r3, #32
 8087826:	2b5e      	cmp	r3, #94	; 0x5e
 8087828:	d9e1      	bls.n	80877ee <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x16>
 808782a:	e7eb      	b.n	8087804 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
 808782c:	2d2f      	cmp	r5, #47	; 0x2f
 808782e:	d105      	bne.n	808783c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x64>
 8087830:	461e      	mov	r6, r3
 8087832:	f813 5b01 	ldrb.w	r5, [r3], #1
 8087836:	2d20      	cmp	r5, #32
 8087838:	d1f8      	bne.n	808782c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x54>
 808783a:	e7f9      	b.n	8087830 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x58>
  *ptr = &path[end];
 808783c:	6016      	str	r6, [r2, #0]
 808783e:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
 8087840:	4298      	cmp	r0, r3
 8087842:	ebc0 0803 	rsb	r8, r0, r3
 8087846:	d009      	beq.n	808785c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x84>
    c = path[len - 1];
 8087848:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
 808784c:	2a2e      	cmp	r2, #46	; 0x2e
 808784e:	d0f7      	beq.n	8087840 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x68>
 8087850:	2a20      	cmp	r2, #32
 8087852:	d0f5      	beq.n	8087840 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x68>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
 8087854:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8087858:	dcd4      	bgt.n	8087804 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
 808785a:	e001      	b.n	8087860 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
 808785c:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
 8087860:	f8c1 8004 	str.w	r8, [r1, #4]
 8087864:	f101 030c 	add.w	r3, r1, #12
 8087868:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
 808786c:	2420      	movs	r4, #32
 808786e:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
 8087872:	4293      	cmp	r3, r2
 8087874:	d1fb      	bne.n	808786e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x96>
 8087876:	4603      	mov	r3, r0
 8087878:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 808787a:	f813 4b01 	ldrb.w	r4, [r3], #1
 808787e:	2c2e      	cmp	r4, #46	; 0x2e
 8087880:	d0fa      	beq.n	8087878 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa0>
 8087882:	2c20      	cmp	r4, #32
 8087884:	d0f8      	beq.n	8087878 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa0>
  // Not 8.3 if leading dot or space.
  is83 = !si;
 8087886:	fab2 f482 	clz	r4, r2

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 808788a:	f108 36ff 	add.w	r6, r8, #4294967295
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
  // Not 8.3 if leading dot or space.
  is83 = !si;
 808788e:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 8087890:	1c73      	adds	r3, r6, #1
 8087892:	d107      	bne.n	80878a4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xcc>
 8087894:	2700      	movs	r7, #0
 8087896:	f04f 0e07 	mov.w	lr, #7
 808789a:	463d      	mov	r5, r7
 808789c:	46ba      	mov	sl, r7
 808789e:	f04f 0908 	mov.w	r9, #8
 80878a2:	e009      	b.n	80878b8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
 80878a4:	5d83      	ldrb	r3, [r0, r6]
 80878a6:	2b2e      	cmp	r3, #46	; 0x2e
 80878a8:	d0f4      	beq.n	8087894 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbc>
 80878aa:	3e01      	subs	r6, #1
 80878ac:	e7f0      	b.n	8087890 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xb8>
  for (; si < len; si++) {
    c = path[si];
 80878ae:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
 80878b0:	2b20      	cmp	r3, #32
 80878b2:	d104      	bne.n	80878be <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe6>
      is83 = false;
 80878b4:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
 80878b6:	3201      	adds	r2, #1
 80878b8:	4542      	cmp	r2, r8
 80878ba:	dbf8      	blt.n	80878ae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
 80878bc:	e04b      	b.n	8087956 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
 80878be:	2b2e      	cmp	r3, #46	; 0x2e
 80878c0:	d102      	bne.n	80878c8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
 80878c2:	42b2      	cmp	r2, r6
 80878c4:	d1f6      	bne.n	80878b4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xdc>
 80878c6:	e003      	b.n	80878d0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
 80878c8:	2b22      	cmp	r3, #34	; 0x22
 80878ca:	d017      	beq.n	80878fc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
 80878cc:	2b7c      	cmp	r3, #124	; 0x7c
 80878ce:	d015      	beq.n	80878fc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
 80878d0:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
 80878d4:	f1bc 0f05 	cmp.w	ip, #5
 80878d8:	d801      	bhi.n	80878de <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x106>
 80878da:	2b2d      	cmp	r3, #45	; 0x2d
 80878dc:	d10e      	bne.n	80878fc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
 80878de:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
 80878e2:	f1bc 0f05 	cmp.w	ip, #5
 80878e6:	d909      	bls.n	80878fc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
 80878e8:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
 80878ec:	f1bc 0f02 	cmp.w	ip, #2
 80878f0:	d904      	bls.n	80878fc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
 80878f2:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
 80878f6:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
 80878fa:	d902      	bls.n	8087902 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12a>
 80878fc:	42b2      	cmp	r2, r6
 80878fe:	d10e      	bne.n	808791e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x146>
 8087900:	e049      	b.n	8087996 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1be>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
 8087902:	42b2      	cmp	r2, r6
 8087904:	d047      	beq.n	8087996 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1be>
 8087906:	4575      	cmp	r5, lr
 8087908:	d821      	bhi.n	808794e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x176>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
 808790a:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 808790e:	f1bc 0f19 	cmp.w	ip, #25
 8087912:	d808      	bhi.n	8087926 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14e>
        c += 'A' - 'a';
 8087914:	3b20      	subs	r3, #32
 8087916:	b2db      	uxtb	r3, r3
        lc |= bit;
 8087918:	ea49 0707 	orr.w	r7, r9, r7
 808791c:	e00a      	b.n	8087934 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15c>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
 808791e:	4575      	cmp	r5, lr
 8087920:	d815      	bhi.n	808794e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x176>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
 8087922:	2400      	movs	r4, #0
      c = '_';
 8087924:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
 8087926:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 808792a:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
 808792e:	bf98      	it	ls
 8087930:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
 8087934:	f105 0c01 	add.w	ip, r5, #1
 8087938:	fa5f fc8c 	uxtb.w	ip, ip
 808793c:	440d      	add	r5, r1
      if (i < 7) {
 808793e:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
 8087942:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
 8087944:	d801      	bhi.n	808794a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x172>
        fname->seqPos = i;
 8087946:	f881 c00c 	strb.w	ip, [r1, #12]
 808794a:	4665      	mov	r5, ip
 808794c:	e7b3      	b.n	80878b6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
 808794e:	f1be 0f0a 	cmp.w	lr, #10
 8087952:	d117      	bne.n	8087984 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
 8087954:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
 8087956:	7b4b      	ldrb	r3, [r1, #13]
 8087958:	2b20      	cmp	r3, #32
 808795a:	f43f af53 	beq.w	8087804 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
    return false;
  }

  if (is83) {
 808795e:	b13c      	cbz	r4, 8087970 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x198>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
 8087960:	ea1a 0f07 	tst.w	sl, r7
 8087964:	bf18      	it	ne
 8087966:	2702      	movne	r7, #2
 8087968:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
 808796a:	2001      	movs	r0, #1
 808796c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
 8087970:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
 8087972:	2001      	movs	r0, #1
 8087974:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
 8087976:	4419      	add	r1, r3
 8087978:	237e      	movs	r3, #126	; 0x7e
 808797a:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
 808797c:	2331      	movs	r3, #49	; 0x31
 808797e:	738b      	strb	r3, [r1, #14]
 8087980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
 8087984:	42b2      	cmp	r2, r6
 8087986:	dce5      	bgt.n	8087954 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17c>
 8087988:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
 808798a:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
 808798e:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 8087990:	f04f 0910 	mov.w	r9, #16
 8087994:	e78e      	b.n	80878b4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xdc>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
 8087996:	f1be 0f0a 	cmp.w	lr, #10
 808799a:	d0db      	beq.n	8087954 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17c>
 808799c:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
 808799e:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
 80879a2:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 80879a4:	f04f 0910 	mov.w	r9, #16
 80879a8:	e785      	b.n	80878b6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
 80879aa:	bf00      	nop
 80879ac:	31000101 	.word	0x31000101

080879b0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
 80879b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80879b4:	4606      	mov	r6, r0
 80879b6:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
 80879b8:	f891 900c 	ldrb.w	r9, [r1, #12]
 80879bc:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 80879be:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 80879c0:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
 80879c4:	6869      	ldr	r1, [r5, #4]
 80879c6:	68aa      	ldr	r2, [r5, #8]
 80879c8:	1863      	adds	r3, r4, r1
 80879ca:	b29b      	uxth	r3, r3
 80879cc:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
 80879ce:	4291      	cmp	r1, r2
 80879d0:	d006      	beq.n	80879e0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
 80879d2:	f812 0b01 	ldrb.w	r0, [r2], #1
 80879d6:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 80879da:	4043      	eors	r3, r0
 80879dc:	b29b      	uxth	r3, r3
 80879de:	e7f6      	b.n	80879ce <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
 80879e0:	f1b9 0f03 	cmp.w	r9, #3
 80879e4:	bf28      	it	cs
 80879e6:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80879ea:	f109 0204 	add.w	r2, r9, #4
 80879ee:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
 80879f0:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 80879f4:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80879f6:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 80879f8:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80879fa:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 80879fc:	bf94      	ite	ls
 80879fe:	3130      	addls	r1, #48	; 0x30
 8087a00:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8087a02:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8087a04:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
 8087a06:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8087a0a:	d3f1      	bcc.n	80879f0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 8087a0c:	eb05 0309 	add.w	r3, r5, r9
 8087a10:	735f      	strb	r7, [r3, #13]
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
 8087a12:	2100      	movs	r1, #0
 8087a14:	4630      	mov	r0, r6
 8087a16:	f000 fe38 	bl	808868a <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
 8087a1a:	2101      	movs	r1, #1
 8087a1c:	4630      	mov	r0, r6
 8087a1e:	f000 fe17 	bl	8088650 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
 8087a22:	4601      	mov	r1, r0
 8087a24:	b928      	cbnz	r0, 8087a32 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
 8087a26:	7870      	ldrb	r0, [r6, #1]
 8087a28:	fab0 f080 	clz	r0, r0
 8087a2c:	0940      	lsrs	r0, r0, #5
 8087a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
 8087a32:	7803      	ldrb	r3, [r0, #0]
 8087a34:	b14b      	cbz	r3, 8087a4a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 8087a36:	7ac3      	ldrb	r3, [r0, #11]
 8087a38:	071b      	lsls	r3, r3, #28
 8087a3a:	d4ee      	bmi.n	8087a1a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 8087a3c:	220b      	movs	r2, #11
 8087a3e:	4640      	mov	r0, r8
 8087a40:	f006 ff62 	bl	808e908 <memcmp>
 8087a44:	2800      	cmp	r0, #0
 8087a46:	d1e8      	bne.n	8087a1a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 8087a48:	e002      	b.n	8087a50 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
 8087a4a:	2001      	movs	r0, #1
 8087a4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8087a50:	3401      	adds	r4, #1
 8087a52:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
 8087a54:	2c64      	cmp	r4, #100	; 0x64
 8087a56:	d1b5      	bne.n	80879c4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
 8087a58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08087a5c <_ZN7FatFile4openEPS_P7fname_th>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 8087a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8087a60:	b089      	sub	sp, #36	; 0x24
 8087a62:	9303      	str	r3, [sp, #12]
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8087a64:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 8087a66:	9005      	str	r0, [sp, #20]
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8087a68:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 8087a6c:	460e      	mov	r6, r1
 8087a6e:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8087a70:	d101      	bne.n	8087a76 <_ZN7FatFile4openEPS_P7fname_th+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
 8087a72:	2000      	movs	r0, #0
 8087a74:	e199      	b.n	8087daa <_ZN7FatFile4openEPS_P7fname_th+0x34e>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8087a76:	9b05      	ldr	r3, [sp, #20]
 8087a78:	781b      	ldrb	r3, [r3, #0]
 8087a7a:	2b00      	cmp	r3, #0
 8087a7c:	d1f9      	bne.n	8087a72 <_ZN7FatFile4openEPS_P7fname_th+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 8087a7e:	7813      	ldrb	r3, [r2, #0]
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
 8087a80:	f8d2 b004 	ldr.w	fp, [r2, #4]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 8087a84:	079b      	lsls	r3, r3, #30
 8087a86:	f000 8186 	beq.w	8087d96 <_ZN7FatFile4openEPS_P7fname_th+0x33a>
 8087a8a:	f10b 030c 	add.w	r3, fp, #12
 8087a8e:	270d      	movs	r7, #13
 8087a90:	fbb3 f7f7 	udiv	r7, r3, r7
 8087a94:	3701      	adds	r7, #1
 8087a96:	b2ff      	uxtb	r7, r7
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
 8087a98:	f04f 0800 	mov.w	r8, #0
 8087a9c:	2100      	movs	r1, #0
 8087a9e:	4630      	mov	r0, r6
 8087aa0:	f000 fdf3 	bl	808868a <_ZN7FatFile7seekSetEm>
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
 8087aa4:	4645      	mov	r5, r8
  uint8_t ord = 0;
 8087aa6:	4643      	mov	r3, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
 8087aa8:	4644      	mov	r4, r8
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8087aaa:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
 8087aae:	f8cd 8008 	str.w	r8, [sp, #8]
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
  bool fnameFound = false;
 8087ab2:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8087ab6:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 8087ab8:	6972      	ldr	r2, [r6, #20]
    dir = dirFile->readDirCache(true);
 8087aba:	2101      	movs	r1, #1
 8087abc:	4630      	mov	r0, r6
 8087abe:	9307      	str	r3, [sp, #28]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 8087ac0:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
 8087ac4:	f000 fdc4 	bl	8088650 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 8087ac8:	9b07      	ldr	r3, [sp, #28]
 8087aca:	b920      	cbnz	r0, 8087ad6 <_ZN7FatFile4openEPS_P7fname_th+0x7a>
      if (dirFile->getError()) {
 8087acc:	7873      	ldrb	r3, [r6, #1]
 8087ace:	2b00      	cmp	r3, #0
 8087ad0:	f000 808e 	beq.w	8087bf0 <_ZN7FatFile4openEPS_P7fname_th+0x194>
 8087ad4:	e7cd      	b.n	8087a72 <_ZN7FatFile4openEPS_P7fname_th+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
 8087ad6:	7802      	ldrb	r2, [r0, #0]
 8087ad8:	2ae5      	cmp	r2, #229	; 0xe5
 8087ada:	d000      	beq.n	8087ade <_ZN7FatFile4openEPS_P7fname_th+0x82>
 8087adc:	b942      	cbnz	r2, 8087af0 <_ZN7FatFile4openEPS_P7fname_th+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 8087ade:	2d00      	cmp	r5, #0
 8087ae0:	bf08      	it	eq
 8087ae2:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
 8087ae4:	42bd      	cmp	r5, r7
        freeFound++;
 8087ae6:	bf3c      	itt	cc
 8087ae8:	3501      	addcc	r5, #1
 8087aea:	b2ed      	uxtbcc	r5, r5
      }
      if (dir->name[0] == DIR_NAME_FREE) {
 8087aec:	b922      	cbnz	r2, 8087af8 <_ZN7FatFile4openEPS_P7fname_th+0x9c>
 8087aee:	e07f      	b.n	8087bf0 <_ZN7FatFile4openEPS_P7fname_th+0x194>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
 8087af0:	42bd      	cmp	r5, r7
 8087af2:	bf38      	it	cc
 8087af4:	2500      	movcc	r5, #0
 8087af6:	e003      	b.n	8087b00 <_ZN7FatFile4openEPS_P7fname_th+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 8087af8:	2ae5      	cmp	r2, #229	; 0xe5
 8087afa:	d101      	bne.n	8087b00 <_ZN7FatFile4openEPS_P7fname_th+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
 8087afc:	2400      	movs	r4, #0
 8087afe:	e7db      	b.n	8087ab8 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 8087b00:	2a2e      	cmp	r2, #46	; 0x2e
 8087b02:	d0fb      	beq.n	8087afc <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 8087b04:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
 8087b06:	290f      	cmp	r1, #15
 8087b08:	d150      	bne.n	8087bac <_ZN7FatFile4openEPS_P7fname_th+0x150>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
 8087b0a:	b93c      	cbnz	r4, 8087b1c <_ZN7FatFile4openEPS_P7fname_th+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
 8087b0c:	0651      	lsls	r1, r2, #25
 8087b0e:	d5d3      	bpl.n	8087ab8 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
 8087b10:	7b43      	ldrb	r3, [r0, #13]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
 8087b12:	f002 041f 	and.w	r4, r2, #31
        chksum = ldir->chksum;
 8087b16:	9302      	str	r3, [sp, #8]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
 8087b18:	4623      	mov	r3, r4
 8087b1a:	e007      	b.n	8087b2c <_ZN7FatFile4openEPS_P7fname_th+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
 8087b1c:	3b01      	subs	r3, #1
 8087b1e:	b2db      	uxtb	r3, r3
 8087b20:	429a      	cmp	r2, r3
 8087b22:	d1eb      	bne.n	8087afc <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 8087b24:	7b42      	ldrb	r2, [r0, #13]
 8087b26:	9902      	ldr	r1, [sp, #8]
 8087b28:	4291      	cmp	r1, r2
 8087b2a:	d1e7      	bne.n	8087afc <_ZN7FatFile4openEPS_P7fname_th+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
 8087b2c:	1e5a      	subs	r2, r3, #1
 8087b2e:	f04f 0c0d 	mov.w	ip, #13
 8087b32:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
 8087b36:	45e3      	cmp	fp, ip
 8087b38:	d9e0      	bls.n	8087afc <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 8087b3a:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
 8087b3e:	f1be 0f04 	cmp.w	lr, #4
 8087b42:	fa5f f28e 	uxtb.w	r2, lr
 8087b46:	d804      	bhi.n	8087b52 <_ZN7FatFile4openEPS_P7fname_th+0xf6>
    return ldir->name1[i];
 8087b48:	eb00 024e 	add.w	r2, r0, lr, lsl #1
 8087b4c:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 8087b50:	e00c      	b.n	8087b6c <_ZN7FatFile4openEPS_P7fname_th+0x110>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 8087b52:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
 8087b54:	bf95      	itete	ls
 8087b56:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8087b5a:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 8087b5e:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8087b62:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 8087b66:	bf94      	ite	ls
 8087b68:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8087b6a:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
 8087b6c:	45e3      	cmp	fp, ip
 8087b6e:	d103      	bne.n	8087b78 <_ZN7FatFile4openEPS_P7fname_th+0x11c>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
 8087b70:	2a00      	cmp	r2, #0
 8087b72:	bf18      	it	ne
 8087b74:	2400      	movne	r4, #0
 8087b76:	e79f      	b.n	8087ab8 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8087b78:	2aff      	cmp	r2, #255	; 0xff
 8087b7a:	d8bf      	bhi.n	8087afc <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 8087b7c:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8087b7e:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 8087b82:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8087b84:	f8d9 1008 	ldr.w	r1, [r9, #8]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8087b88:	bf98      	it	ls
 8087b8a:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8087b8c:	f811 100c 	ldrb.w	r1, [r1, ip]
 8087b90:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8087b94:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
 8087b98:	bf98      	it	ls
 8087b9a:	b2d2      	uxtbls	r2, r2
 8087b9c:	f1bc 0f19 	cmp.w	ip, #25
 8087ba0:	bf9c      	itt	ls
 8087ba2:	3120      	addls	r1, #32
 8087ba4:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8087ba6:	4291      	cmp	r1, r2
 8087ba8:	d1a8      	bne.n	8087afc <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 8087baa:	e0f6      	b.n	8087d9a <_ZN7FatFile4openEPS_P7fname_th+0x33e>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
 8087bac:	070a      	lsls	r2, r1, #28
 8087bae:	d4a5      	bmi.n	8087afc <_ZN7FatFile4openEPS_P7fname_th+0xa0>
      if (lfnOrd) {
 8087bb0:	b14c      	cbz	r4, 8087bc6 <_ZN7FatFile4openEPS_P7fname_th+0x16a>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
 8087bb2:	2b01      	cmp	r3, #1
 8087bb4:	f47f af5d 	bne.w	8087a72 <_ZN7FatFile4openEPS_P7fname_th+0x16>
 8087bb8:	f7ff fdff 	bl	80877ba <_ZN7FatFile11lfnChecksumEPh>
 8087bbc:	9b02      	ldr	r3, [sp, #8]
 8087bbe:	4283      	cmp	r3, r0
 8087bc0:	f47f af57 	bne.w	8087a72 <_ZN7FatFile4openEPS_P7fname_th+0x16>
 8087bc4:	e00f      	b.n	8087be6 <_ZN7FatFile4openEPS_P7fname_th+0x18a>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8087bc6:	220b      	movs	r2, #11
 8087bc8:	9906      	ldr	r1, [sp, #24]
 8087bca:	9307      	str	r3, [sp, #28]
 8087bcc:	f006 fe9c 	bl	808e908 <memcmp>
 8087bd0:	9b07      	ldr	r3, [sp, #28]
 8087bd2:	2800      	cmp	r0, #0
 8087bd4:	f47f af70 	bne.w	8087ab8 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
 8087bd8:	f899 2000 	ldrb.w	r2, [r9]
 8087bdc:	07d1      	lsls	r1, r2, #31
 8087bde:	d502      	bpl.n	8087be6 <_ZN7FatFile4openEPS_P7fname_th+0x18a>
          goto found;
        }
        fnameFound = true;
 8087be0:	2201      	movs	r2, #1
 8087be2:	9204      	str	r2, [sp, #16]
 8087be4:	e768      	b.n	8087ab8 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
 8087be6:	9b03      	ldr	r3, [sp, #12]
 8087be8:	061a      	lsls	r2, r3, #24
 8087bea:	f140 80cc 	bpl.w	8087d86 <_ZN7FatFile4openEPS_P7fname_th+0x32a>
 8087bee:	e740      	b.n	8087a72 <_ZN7FatFile4openEPS_P7fname_th+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and O_WRITE
  if (!(oflag & O_CREAT) || !(oflag & O_WRITE)) {
 8087bf0:	9b03      	ldr	r3, [sp, #12]
 8087bf2:	f003 0342 	and.w	r3, r3, #66	; 0x42
 8087bf6:	2b42      	cmp	r3, #66	; 0x42
 8087bf8:	f47f af3b 	bne.w	8087a72 <_ZN7FatFile4openEPS_P7fname_th+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
 8087bfc:	2d00      	cmp	r5, #0
 8087bfe:	bf08      	it	eq
 8087c00:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
 8087c02:	42bd      	cmp	r5, r7
 8087c04:	d302      	bcc.n	8087c0c <_ZN7FatFile4openEPS_P7fname_th+0x1b0>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
 8087c06:	9b04      	ldr	r3, [sp, #16]
 8087c08:	b9cb      	cbnz	r3, 8087c3e <_ZN7FatFile4openEPS_P7fname_th+0x1e2>
 8087c0a:	e01f      	b.n	8087c4c <_ZN7FatFile4openEPS_P7fname_th+0x1f0>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
 8087c0c:	2100      	movs	r1, #0
 8087c0e:	4630      	mov	r0, r6
 8087c10:	f000 fd1e 	bl	8088650 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 8087c14:	b910      	cbnz	r0, 8087c1c <_ZN7FatFile4openEPS_P7fname_th+0x1c0>
      if (dirFile->getError()) {
 8087c16:	7873      	ldrb	r3, [r6, #1]
 8087c18:	b15b      	cbz	r3, 8087c32 <_ZN7FatFile4openEPS_P7fname_th+0x1d6>
 8087c1a:	e72a      	b.n	8087a72 <_ZN7FatFile4openEPS_P7fname_th+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
 8087c1c:	3501      	adds	r5, #1
 8087c1e:	b2ed      	uxtb	r5, r5
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
 8087c20:	e7ef      	b.n	8087c02 <_ZN7FatFile4openEPS_P7fname_th+0x1a6>
 8087c22:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
 8087c24:	791b      	ldrb	r3, [r3, #4]
 8087c26:	2b01      	cmp	r3, #1
 8087c28:	d8ed      	bhi.n	8087c06 <_ZN7FatFile4openEPS_P7fname_th+0x1aa>
      break;
    }
    freeFound += 16;
 8087c2a:	3510      	adds	r5, #16
 8087c2c:	b2ed      	uxtb	r5, r5
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
 8087c2e:	42af      	cmp	r7, r5
 8087c30:	d9e9      	bls.n	8087c06 <_ZN7FatFile4openEPS_P7fname_th+0x1aa>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
 8087c32:	4630      	mov	r0, r6
 8087c34:	f000 fbde 	bl	80883f4 <_ZN7FatFile13addDirClusterEv>
 8087c38:	2800      	cmp	r0, #0
 8087c3a:	d1f2      	bne.n	8087c22 <_ZN7FatFile4openEPS_P7fname_th+0x1c6>
 8087c3c:	e719      	b.n	8087a72 <_ZN7FatFile4openEPS_P7fname_th+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
 8087c3e:	4649      	mov	r1, r9
 8087c40:	4630      	mov	r0, r6
 8087c42:	f7ff feb5 	bl	80879b0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
 8087c46:	2800      	cmp	r0, #0
 8087c48:	f43f af13 	beq.w	8087a72 <_ZN7FatFile4openEPS_P7fname_th+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
 8087c4c:	ea4f 1148 	mov.w	r1, r8, lsl #5
 8087c50:	4630      	mov	r0, r6
 8087c52:	f000 fd1a 	bl	808868a <_ZN7FatFile7seekSetEm>
 8087c56:	2800      	cmp	r0, #0
 8087c58:	f43f af0b 	beq.w	8087a72 <_ZN7FatFile4openEPS_P7fname_th+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
 8087c5c:	1e7c      	subs	r4, r7, #1
 8087c5e:	b2e4      	uxtb	r4, r4
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 8087c60:	4625      	mov	r5, r4
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 8087c62:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
 8087c66:	f04f 080f 	mov.w	r8, #15
 8087c6a:	e040      	b.n	8087cee <_ZN7FatFile4openEPS_P7fname_th+0x292>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 8087c6c:	2100      	movs	r1, #0
 8087c6e:	4630      	mov	r0, r6
 8087c70:	f000 fcee 	bl	8088650 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
 8087c74:	4607      	mov	r7, r0
 8087c76:	2800      	cmp	r0, #0
 8087c78:	f43f aefb 	beq.w	8087a72 <_ZN7FatFile4openEPS_P7fname_th+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
 8087c7c:	68b2      	ldr	r2, [r6, #8]
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 8087c7e:	42a5      	cmp	r5, r4
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
 8087c80:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8087c84:	f043 0301 	orr.w	r3, r3, #1
 8087c88:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8087c8c:	bf14      	ite	ne
 8087c8e:	462a      	movne	r2, r5
 8087c90:	f045 0240 	orreq.w	r2, r5, #64	; 0x40
 8087c94:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
 8087c96:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
 8087c9a:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
 8087c9e:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 8087ca2:	9202      	str	r2, [sp, #8]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
 8087ca4:	f7ff fd89 	bl	80877ba <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8087ca8:	9a02      	ldr	r2, [sp, #8]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
 8087caa:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
 8087cac:	f887 a01a 	strb.w	sl, [r7, #26]
 8087cb0:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8087cb4:	f002 021f 	and.w	r2, r2, #31
 8087cb8:	230d      	movs	r3, #13
 8087cba:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
 8087cbc:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8087cc0:	435a      	muls	r2, r3
 8087cc2:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 8087cc4:	4593      	cmp	fp, r2
 8087cc6:	d915      	bls.n	8087cf4 <_ZN7FatFile4openEPS_P7fname_th+0x298>
 8087cc8:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
 8087ccc:	2b04      	cmp	r3, #4
 8087cce:	fa5f fc83 	uxtb.w	ip, r3
 8087cd2:	f103 0001 	add.w	r0, r3, #1
 8087cd6:	d813      	bhi.n	8087d00 <_ZN7FatFile4openEPS_P7fname_th+0x2a4>
    ldir->name1[i] = c;
 8087cd8:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8087cdc:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
 8087ce0:	280d      	cmp	r0, #13
 8087ce2:	f102 0201 	add.w	r2, r2, #1
 8087ce6:	4603      	mov	r3, r0
 8087ce8:	d1ec      	bne.n	8087cc4 <_ZN7FatFile4openEPS_P7fname_th+0x268>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 8087cea:	3d01      	subs	r5, #1
 8087cec:	b2ed      	uxtb	r5, r5
 8087cee:	2d00      	cmp	r5, #0
 8087cf0:	d1bc      	bne.n	8087c6c <_ZN7FatFile4openEPS_P7fname_th+0x210>
 8087cf2:	e00e      	b.n	8087d12 <_ZN7FatFile4openEPS_P7fname_th+0x2b6>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 8087cf4:	bf14      	ite	ne
 8087cf6:	f04f 31ff 	movne.w	r1, #4294967295
 8087cfa:	2100      	moveq	r1, #0
 8087cfc:	b289      	uxth	r1, r1
 8087cfe:	e7e5      	b.n	8087ccc <_ZN7FatFile4openEPS_P7fname_th+0x270>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 8087d00:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
 8087d04:	bf94      	ite	ls
 8087d06:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
 8087d0a:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
 8087d0e:	8099      	strh	r1, [r3, #4]
 8087d10:	e7e6      	b.n	8087ce0 <_ZN7FatFile4openEPS_P7fname_th+0x284>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
 8087d12:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
 8087d14:	4629      	mov	r1, r5
 8087d16:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
 8087d18:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
 8087d1c:	f000 fc98 	bl	8088650 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
 8087d20:	4607      	mov	r7, r0
 8087d22:	2800      	cmp	r0, #0
 8087d24:	f43f aea5 	beq.w	8087a72 <_ZN7FatFile4openEPS_P7fname_th+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
 8087d28:	2220      	movs	r2, #32
 8087d2a:	4629      	mov	r1, r5
 8087d2c:	f006 fe06 	bl	808e93c <memset>
  memcpy(dir->name, fname->sfn, 11);
 8087d30:	464b      	mov	r3, r9
 8087d32:	f853 2f0d 	ldr.w	r2, [r3, #13]!
 8087d36:	603a      	str	r2, [r7, #0]
 8087d38:	685a      	ldr	r2, [r3, #4]
 8087d3a:	607a      	str	r2, [r7, #4]
 8087d3c:	891a      	ldrh	r2, [r3, #8]
 8087d3e:	813a      	strh	r2, [r7, #8]
 8087d40:	7a9b      	ldrb	r3, [r3, #10]
 8087d42:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
 8087d44:	f899 3000 	ldrb.w	r3, [r9]
 8087d48:	f003 0318 	and.w	r3, r3, #24
 8087d4c:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
 8087d4e:	4b18      	ldr	r3, [pc, #96]	; (8087db0 <_ZN7FatFile4openEPS_P7fname_th+0x354>)
 8087d50:	681b      	ldr	r3, [r3, #0]
 8087d52:	b12b      	cbz	r3, 8087d60 <_ZN7FatFile4openEPS_P7fname_th+0x304>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
 8087d54:	f107 010e 	add.w	r1, r7, #14
 8087d58:	f107 0010 	add.w	r0, r7, #16
 8087d5c:	4798      	blx	r3
 8087d5e:	e006      	b.n	8087d6e <_ZN7FatFile4openEPS_P7fname_th+0x312>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
 8087d60:	2321      	movs	r3, #33	; 0x21
 8087d62:	743b      	strb	r3, [r7, #16]
 8087d64:	2328      	movs	r3, #40	; 0x28
 8087d66:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
 8087d68:	2308      	movs	r3, #8
 8087d6a:	73bd      	strb	r5, [r7, #14]
 8087d6c:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
 8087d6e:	8a3b      	ldrh	r3, [r7, #16]
 8087d70:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
 8087d72:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
 8087d74:	89fb      	ldrh	r3, [r7, #14]
 8087d76:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
 8087d78:	68b2      	ldr	r2, [r6, #8]
 8087d7a:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8087d7e:	f043 0301 	orr.w	r3, r3, #1
 8087d82:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
 8087d86:	9400      	str	r4, [sp, #0]
 8087d88:	9b03      	ldr	r3, [sp, #12]
 8087d8a:	4652      	mov	r2, sl
 8087d8c:	4631      	mov	r1, r6
 8087d8e:	9805      	ldr	r0, [sp, #20]
 8087d90:	f000 fcc4 	bl	808871c <_ZN7FatFile15openCachedEntryEPS_thh>
 8087d94:	e009      	b.n	8087daa <_ZN7FatFile4openEPS_P7fname_th+0x34e>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 8087d96:	2701      	movs	r7, #1
 8087d98:	e67e      	b.n	8087a98 <_ZN7FatFile4openEPS_P7fname_th+0x3c>
 8087d9a:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
 8087d9e:	f1be 0f0d 	cmp.w	lr, #13
 8087da2:	f43f ae89 	beq.w	8087ab8 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8087da6:	46d4      	mov	ip, sl
 8087da8:	e6c9      	b.n	8087b3e <_ZN7FatFile4openEPS_P7fname_th+0xe2>
  }
  return true;

fail:
  return false;
}
 8087daa:	b009      	add	sp, #36	; 0x24
 8087dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8087db0:	20000fd4 	.word	0x20000fd4

08087db4 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
 8087db4:	f002 bb28 	b.w	808a408 <HAL_Pin_Map>

08087db8 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
 8087db8:	f002 bb26 	b.w	808a408 <HAL_Pin_Map>

08087dbc <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
 8087dbc:	f002 bb24 	b.w	808a408 <HAL_Pin_Map>

08087dc0 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
 8087dc0:	f002 bb22 	b.w	808a408 <HAL_Pin_Map>

08087dc4 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spi->receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spi->send(data);
 8087dc4:	6803      	ldr	r3, [r0, #0]
 8087dc6:	695b      	ldr	r3, [r3, #20]
 8087dc8:	4718      	bx	r3

08087dca <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>:
  }
  void spiEndTransaction() {
    m_spi->endTransaction();
  }
  uint8_t spiReceive() {
    return m_spi->receive();
 8087dca:	6803      	ldr	r3, [r0, #0]
 8087dcc:	68db      	ldr	r3, [r3, #12]
 8087dce:	4718      	bx	r3

08087dd0 <_ZN9SdSpiCard14chipSelectHighEv>:
    error(SD_CARD_ERROR_BAD_CSD);
    return 0;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectHigh() {
 8087dd0:	b510      	push	{r4, lr}
  if (!m_selected) {
 8087dd2:	7903      	ldrb	r3, [r0, #4]
    error(SD_CARD_ERROR_BAD_CSD);
    return 0;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectHigh() {
 8087dd4:	4604      	mov	r4, r0
  if (!m_selected) {
 8087dd6:	b16b      	cbz	r3, 8087df4 <_ZN9SdSpiCard14chipSelectHighEv+0x24>
    SD_CS_DBG("chipSelectHigh error");
    return;
  }
  digitalWrite(m_chipSelectPin, HIGH);
 8087dd8:	2101      	movs	r1, #1
 8087dda:	7940      	ldrb	r0, [r0, #5]
 8087ddc:	f005 f801 	bl	808cde2 <digitalWrite>
  // insure MISO goes high impedance
  spiSend(0XFF);
 8087de0:	21ff      	movs	r1, #255	; 0xff
 8087de2:	6820      	ldr	r0, [r4, #0]
 8087de4:	f7ff ffee 	bl	8087dc4 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
 8087de8:	6820      	ldr	r0, [r4, #0]
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
  }
  void spiEndTransaction() {
    m_spi->endTransaction();
 8087dea:	6803      	ldr	r3, [r0, #0]
 8087dec:	689b      	ldr	r3, [r3, #8]
 8087dee:	4798      	blx	r3
  spiEndTransaction();
  m_selected = false;
 8087df0:	2300      	movs	r3, #0
 8087df2:	7123      	strb	r3, [r4, #4]
 8087df4:	bd10      	pop	{r4, pc}

08087df6 <_ZN9SdSpiCard13chipSelectLowEv>:
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectLow() {
 8087df6:	b538      	push	{r3, r4, r5, lr}
  if (m_selected) {
 8087df8:	7905      	ldrb	r5, [r0, #4]
  spiSend(0XFF);
  spiEndTransaction();
  m_selected = false;
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectLow() {
 8087dfa:	4604      	mov	r4, r0
  if (m_selected) {
 8087dfc:	b955      	cbnz	r5, 8087e14 <_ZN9SdSpiCard13chipSelectLowEv+0x1e>
 8087dfe:	6800      	ldr	r0, [r0, #0]
  bool writeData(uint8_t token, const uint8_t* src);
  void spiBegin(uint8_t chipSelectPin) {
    m_spi->begin(chipSelectPin);
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
 8087e00:	79e1      	ldrb	r1, [r4, #7]
 8087e02:	6803      	ldr	r3, [r0, #0]
 8087e04:	685b      	ldr	r3, [r3, #4]
 8087e06:	4798      	blx	r3
    SD_CS_DBG("chipSelectLow error");
    return;
  }
  spiBeginTransaction(m_sckDivisor);
  digitalWrite(m_chipSelectPin, LOW);
 8087e08:	4629      	mov	r1, r5
 8087e0a:	7960      	ldrb	r0, [r4, #5]
 8087e0c:	f004 ffe9 	bl	808cde2 <digitalWrite>
  m_selected = true;
 8087e10:	2301      	movs	r3, #1
 8087e12:	7123      	strb	r3, [r4, #4]
 8087e14:	bd38      	pop	{r3, r4, r5, pc}

08087e16 <_ZN9SdSpiCard8readDataEPhj>:
    chipSelectHigh();
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
 8087e16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8087e18:	4604      	mov	r4, r0
 8087e1a:	460d      	mov	r5, r1
 8087e1c:	4616      	mov	r6, r2
 8087e1e:	f002 fba3 	bl	808a568 <HAL_Timer_Get_Milli_Seconds>
 8087e22:	4607      	mov	r7, r0
#if USE_SD_CRC
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start block token
  unsigned t0 = millis();
  while ((m_status = spiReceive()) == 0XFF) {
 8087e24:	6820      	ldr	r0, [r4, #0]
 8087e26:	f7ff ffd0 	bl	8087dca <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8087e2a:	28ff      	cmp	r0, #255	; 0xff
 8087e2c:	7220      	strb	r0, [r4, #8]
 8087e2e:	d107      	bne.n	8087e40 <_ZN9SdSpiCard8readDataEPhj+0x2a>
 8087e30:	f002 fb9a 	bl	808a568 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_READ_TIMEOUT) {
 8087e34:	1bc0      	subs	r0, r0, r7
 8087e36:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
 8087e3a:	d9f3      	bls.n	8087e24 <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8087e3c:	2311      	movs	r3, #17
 8087e3e:	e00c      	b.n	8087e5a <_ZN9SdSpiCard8readDataEPhj+0x44>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (m_status != DATA_START_BLOCK) {
 8087e40:	28fe      	cmp	r0, #254	; 0xfe
 8087e42:	d001      	beq.n	8087e48 <_ZN9SdSpiCard8readDataEPhj+0x32>
 8087e44:	230f      	movs	r3, #15
 8087e46:	e008      	b.n	8087e5a <_ZN9SdSpiCard8readDataEPhj+0x44>
 8087e48:	6820      	ldr	r0, [r4, #0]
  }
  uint8_t spiReceive() {
    return m_spi->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spi->receive(buf, n);
 8087e4a:	4632      	mov	r2, r6
 8087e4c:	6803      	ldr	r3, [r0, #0]
 8087e4e:	4629      	mov	r1, r5
 8087e50:	691b      	ldr	r3, [r3, #16]
 8087e52:	4798      	blx	r3
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
 8087e54:	7220      	strb	r0, [r4, #8]
 8087e56:	b130      	cbz	r0, 8087e66 <_ZN9SdSpiCard8readDataEPhj+0x50>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8087e58:	231c      	movs	r3, #28
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  chipSelectHigh();
 8087e5a:	4620      	mov	r0, r4
 8087e5c:	71a3      	strb	r3, [r4, #6]
 8087e5e:	f7ff ffb7 	bl	8087dd0 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8087e62:	2000      	movs	r0, #0
}
 8087e64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    error(SD_CARD_ERROR_READ_CRC);
    goto fail;
  }
#else
  // discard crc
  spiReceive();
 8087e66:	6820      	ldr	r0, [r4, #0]
 8087e68:	f7ff ffaf 	bl	8087dca <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
  spiReceive();
 8087e6c:	6820      	ldr	r0, [r4, #0]
 8087e6e:	f7ff ffac 	bl	8087dca <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8087e72:	2001      	movs	r0, #1
 8087e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08087e76 <_ZN9SdSpiCard11waitNotBusyEt>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMillis) {
 8087e76:	b570      	push	{r4, r5, r6, lr}
 8087e78:	4606      	mov	r6, r0
 8087e7a:	460c      	mov	r4, r1
 8087e7c:	f002 fb74 	bl	808a568 <HAL_Timer_Get_Milli_Seconds>
 8087e80:	4605      	mov	r5, r0
  unsigned t0 = millis();
  while (spiReceive() != 0XFF) {
 8087e82:	6830      	ldr	r0, [r6, #0]
 8087e84:	f7ff ffa1 	bl	8087dca <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8087e88:	28ff      	cmp	r0, #255	; 0xff
 8087e8a:	d006      	beq.n	8087e9a <_ZN9SdSpiCard11waitNotBusyEt+0x24>
 8087e8c:	f002 fb6c 	bl	808a568 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) >= timeoutMillis) {
 8087e90:	1b40      	subs	r0, r0, r5
 8087e92:	42a0      	cmp	r0, r4
 8087e94:	d3f5      	bcc.n	8087e82 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
    }
  }
  return true;

fail:
  return false;
 8087e96:	2000      	movs	r0, #0
 8087e98:	bd70      	pop	{r4, r5, r6, pc}
  while (spiReceive() != 0XFF) {
    if (((unsigned)millis() - t0) >= timeoutMillis) {
      goto fail;
    }
  }
  return true;
 8087e9a:	2001      	movs	r0, #1

fail:
  return false;
}
 8087e9c:	bd70      	pop	{r4, r5, r6, pc}

08087e9e <_ZN9SdSpiCard11cardCommandEhm>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 8087e9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_selected) {
 8087ea0:	7903      	ldrb	r3, [r0, #4]
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 8087ea2:	4604      	mov	r4, r0
 8087ea4:	460d      	mov	r5, r1
 8087ea6:	9201      	str	r2, [sp, #4]
  // select card
  if (!m_selected) {
 8087ea8:	b90b      	cbnz	r3, 8087eae <_ZN9SdSpiCard11cardCommandEhm+0x10>
    chipSelectLow();
 8087eaa:	f7ff ffa4 	bl	8087df6 <_ZN9SdSpiCard13chipSelectLowEv>
  }
  // wait if busy
  waitNotBusy(SD_WRITE_TIMEOUT);
 8087eae:	f44f 7116 	mov.w	r1, #600	; 0x258
 8087eb2:	4620      	mov	r0, r4
 8087eb4:	f7ff ffdf 	bl	8087e76 <_ZN9SdSpiCard11waitNotBusyEt>
  for (uint8_t k = 0; k < 6; k++) {
    spiSend(d[k]);
  }
#else  // USE_SD_CRC
  // send command
  spiSend(cmd | 0x40);
 8087eb8:	f045 0140 	orr.w	r1, r5, #64	; 0x40
 8087ebc:	6820      	ldr	r0, [r4, #0]
 8087ebe:	f7ff ff81 	bl	8087dc4 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
 8087ec2:	f10d 0607 	add.w	r6, sp, #7
 8087ec6:	f10d 0703 	add.w	r7, sp, #3

  // send argument
  for (int8_t i = 3; i >= 0; i--) {
    spiSend(pa[i]);
 8087eca:	f816 1901 	ldrb.w	r1, [r6], #-1
 8087ece:	6820      	ldr	r0, [r4, #0]
 8087ed0:	f7ff ff78 	bl	8087dc4 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
#else  // USE_SD_CRC
  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t i = 3; i >= 0; i--) {
 8087ed4:	42be      	cmp	r6, r7
 8087ed6:	d1f8      	bne.n	8087eca <_ZN9SdSpiCard11cardCommandEhm+0x2c>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 8087ed8:	2d00      	cmp	r5, #0
 8087eda:	bf0c      	ite	eq
 8087edc:	2195      	moveq	r1, #149	; 0x95
 8087ede:	2187      	movne	r1, #135	; 0x87
 8087ee0:	6820      	ldr	r0, [r4, #0]
 8087ee2:	f7ff ff6f 	bl	8087dc4 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
#endif  // USE_SD_CRC

  // skip stuff byte for stop read
  if (cmd == CMD12) {
 8087ee6:	2d0c      	cmp	r5, #12
 8087ee8:	d102      	bne.n	8087ef0 <_ZN9SdSpiCard11cardCommandEhm+0x52>
    spiReceive();
 8087eea:	6820      	ldr	r0, [r4, #0]
 8087eec:	f7ff ff6d 	bl	8087dca <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
  for (int8_t i = 3; i >= 0; i--) {
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 8087ef0:	2500      	movs	r5, #0
  if (cmd == CMD12) {
    spiReceive();
  }

  // wait for response
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i != 0XFF; i++) {
 8087ef2:	6820      	ldr	r0, [r4, #0]
 8087ef4:	f7ff ff69 	bl	8087dca <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8087ef8:	0603      	lsls	r3, r0, #24
 8087efa:	7220      	strb	r0, [r4, #8]
 8087efc:	d503      	bpl.n	8087f06 <_ZN9SdSpiCard11cardCommandEhm+0x68>
 8087efe:	3501      	adds	r5, #1
 8087f00:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8087f04:	d1f5      	bne.n	8087ef2 <_ZN9SdSpiCard11cardCommandEhm+0x54>
  }
  return m_status;
}
 8087f06:	b003      	add	sp, #12
 8087f08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08087f0a <_ZN9SdSpiCard5beginEP9SdSpiBasehh>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
 8087f0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8087f0c:	461f      	mov	r7, r3
  m_errorCode = m_type = 0;
 8087f0e:	2300      	movs	r3, #0
  m_spi = spi;
  m_chipSelectPin = chipSelectPin;
 8087f10:	7142      	strb	r2, [r0, #5]
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
  m_errorCode = m_type = 0;
 8087f12:	7243      	strb	r3, [r0, #9]
 8087f14:	7183      	strb	r3, [r0, #6]
  m_spi = spi;
 8087f16:	6001      	str	r1, [r0, #0]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
 8087f18:	4604      	mov	r4, r0
 8087f1a:	f002 fb25 	bl	808a568 <HAL_Timer_Get_Milli_Seconds>
 8087f1e:	4606      	mov	r6, r0
 8087f20:	6820      	ldr	r0, [r4, #0]
    m_type = value;
  }
  bool waitNotBusy(uint16_t timeoutMillis);
  bool writeData(uint8_t token, const uint8_t* src);
  void spiBegin(uint8_t chipSelectPin) {
    m_spi->begin(chipSelectPin);
 8087f22:	7961      	ldrb	r1, [r4, #5]
 8087f24:	6803      	ldr	r3, [r0, #0]
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
 8087f26:	250a      	movs	r5, #10
    m_type = value;
  }
  bool waitNotBusy(uint16_t timeoutMillis);
  bool writeData(uint8_t token, const uint8_t* src);
  void spiBegin(uint8_t chipSelectPin) {
    m_spi->begin(chipSelectPin);
 8087f28:	681b      	ldr	r3, [r3, #0]
 8087f2a:	4798      	blx	r3

  // initialize SPI bus and chip select pin.
  spiBegin(m_chipSelectPin);

  // set SCK rate for initialization commands.
  m_sckDivisor = SPI_SCK_INIT_DIVISOR;
 8087f2c:	2180      	movs	r1, #128	; 0x80
 8087f2e:	6820      	ldr	r0, [r4, #0]
 8087f30:	71e1      	strb	r1, [r4, #7]
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
 8087f32:	6803      	ldr	r3, [r0, #0]
 8087f34:	685b      	ldr	r3, [r3, #4]
 8087f36:	4798      	blx	r3
  spiBeginTransaction(m_sckDivisor);

  // must supply min of 74 clock cycles with CS high.
  for (uint8_t i = 0; i < 10; i++) {
    spiSend(0XFF);
 8087f38:	21ff      	movs	r1, #255	; 0xff
 8087f3a:	6820      	ldr	r0, [r4, #0]
 8087f3c:	3d01      	subs	r5, #1
 8087f3e:	f7ff ff41 	bl	8087dc4 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
  // set SCK rate for initialization commands.
  m_sckDivisor = SPI_SCK_INIT_DIVISOR;
  spiBeginTransaction(m_sckDivisor);

  // must supply min of 74 clock cycles with CS high.
  for (uint8_t i = 0; i < 10; i++) {
 8087f42:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8087f46:	d1f7      	bne.n	8087f38 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x2e>
 8087f48:	6820      	ldr	r0, [r4, #0]
  }
  void spiEndTransaction() {
    m_spi->endTransaction();
 8087f4a:	6803      	ldr	r3, [r0, #0]
 8087f4c:	689b      	ldr	r3, [r3, #8]
 8087f4e:	4798      	blx	r3
    spiSend(0XFF);
  }
  spiEndTransaction();
  // command to go idle in SPI mode
  while (cardCommand(CMD0, 0) != R1_IDLE_STATE) {
 8087f50:	2200      	movs	r2, #0
 8087f52:	4611      	mov	r1, r2
 8087f54:	4620      	mov	r0, r4
 8087f56:	f7ff ffa2 	bl	8087e9e <_ZN9SdSpiCard11cardCommandEhm>
 8087f5a:	2801      	cmp	r0, #1
 8087f5c:	d007      	beq.n	8087f6e <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x64>
 8087f5e:	f002 fb03 	bl	808a568 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 8087f62:	1b80      	subs	r0, r0, r6
 8087f64:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8087f68:	d9f2      	bls.n	8087f50 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8087f6a:	2301      	movs	r3, #1
 8087f6c:	e048      	b.n	8088000 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xf6>
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  while (1) {
    if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
 8087f6e:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8087f72:	2108      	movs	r1, #8
 8087f74:	4620      	mov	r0, r4
 8087f76:	f7ff ff92 	bl	8087e9e <_ZN9SdSpiCard11cardCommandEhm>
 8087f7a:	2805      	cmp	r0, #5
 8087f7c:	d101      	bne.n	8087f82 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x78>
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void type(uint8_t value) {
    m_type = value;
 8087f7e:	2301      	movs	r3, #1
 8087f80:	e00b      	b.n	8087f9a <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x90>
 8087f82:	2504      	movs	r5, #4
      type(SD_CARD_TYPE_SD1);
      break;
    }
    for (uint8_t i = 0; i < 4; i++) {
      m_status = spiReceive();
 8087f84:	6820      	ldr	r0, [r4, #0]
 8087f86:	f7ff ff20 	bl	8087dca <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8087f8a:	3d01      	subs	r5, #1
  while (1) {
    if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
      type(SD_CARD_TYPE_SD1);
      break;
    }
    for (uint8_t i = 0; i < 4; i++) {
 8087f8c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
 8087f90:	7220      	strb	r0, [r4, #8]
  while (1) {
    if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
      type(SD_CARD_TYPE_SD1);
      break;
    }
    for (uint8_t i = 0; i < 4; i++) {
 8087f92:	d1f7      	bne.n	8087f84 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x7a>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
 8087f94:	28aa      	cmp	r0, #170	; 0xaa
 8087f96:	d108      	bne.n	8087faa <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xa0>
 8087f98:	2302      	movs	r3, #2
 8087f9a:	7263      	strb	r3, [r4, #9]
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 8087f9c:	7a63      	ldrb	r3, [r4, #9]
 8087f9e:	2b02      	cmp	r3, #2
 8087fa0:	bf0c      	ite	eq
 8087fa2:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
 8087fa6:	2500      	movne	r5, #0
 8087fa8:	e007      	b.n	8087fba <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xb0>
 8087faa:	f002 fadd 	bl	808a568 <HAL_Timer_Get_Milli_Seconds>
    }
    if (m_status == 0XAA) {
      type(SD_CARD_TYPE_SD2);
      break;
    }
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 8087fae:	1b80      	subs	r0, r0, r6
 8087fb0:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8087fb4:	d9db      	bls.n	8087f6e <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8087fb6:	2302      	movs	r3, #2
 8087fb8:	e022      	b.n	8088000 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xf6>
  bool writeStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
 8087fba:	2200      	movs	r2, #0
 8087fbc:	2137      	movs	r1, #55	; 0x37
 8087fbe:	4620      	mov	r0, r4
 8087fc0:	f7ff ff6d 	bl	8087e9e <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 8087fc4:	462a      	mov	r2, r5
 8087fc6:	2129      	movs	r1, #41	; 0x29
 8087fc8:	4620      	mov	r0, r4
 8087fca:	f7ff ff68 	bl	8087e9e <_ZN9SdSpiCard11cardCommandEhm>
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;

  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
 8087fce:	4602      	mov	r2, r0
 8087fd0:	b138      	cbz	r0, 8087fe2 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xd8>
 8087fd2:	f002 fac9 	bl	808a568 <HAL_Timer_Get_Milli_Seconds>
    // check for timeout
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 8087fd6:	1b80      	subs	r0, r0, r6
 8087fd8:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8087fdc:	d9ed      	bls.n	8087fba <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xb0>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8087fde:	230a      	movs	r3, #10
 8087fe0:	e00e      	b.n	8088000 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xf6>
      error(SD_CARD_ERROR_ACMD41);
      goto fail;
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
 8087fe2:	7a63      	ldrb	r3, [r4, #9]
 8087fe4:	2b02      	cmp	r3, #2
 8087fe6:	d005      	beq.n	8087ff4 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xea>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  chipSelectHigh();
 8087fe8:	4620      	mov	r0, r4
 8087fea:	f7ff fef1 	bl	8087dd0 <_ZN9SdSpiCard14chipSelectHighEv>
  m_sckDivisor = sckDivisor;
 8087fee:	71e7      	strb	r7, [r4, #7]
  return true;
 8087ff0:	2001      	movs	r0, #1
 8087ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      goto fail;
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
 8087ff4:	213a      	movs	r1, #58	; 0x3a
 8087ff6:	4620      	mov	r0, r4
 8087ff8:	f7ff ff51 	bl	8087e9e <_ZN9SdSpiCard11cardCommandEhm>
 8087ffc:	b130      	cbz	r0, 808800c <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x102>
 8087ffe:	2308      	movs	r3, #8
  chipSelectHigh();
  m_sckDivisor = sckDivisor;
  return true;

fail:
  chipSelectHigh();
 8088000:	4620      	mov	r0, r4
 8088002:	71a3      	strb	r3, [r4, #6]
 8088004:	f7ff fee4 	bl	8087dd0 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8088008:	2000      	movs	r0, #0
}
 808800a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
 808800c:	6820      	ldr	r0, [r4, #0]
 808800e:	f7ff fedc 	bl	8087dca <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8088012:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8088016:	28c0      	cmp	r0, #192	; 0xc0
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void type(uint8_t value) {
    m_type = value;
 8088018:	bf04      	itt	eq
 808801a:	2303      	moveq	r3, #3
 808801c:	7263      	strbeq	r3, [r4, #9]
      type(SD_CARD_TYPE_SDHC);
    }
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
 808801e:	6820      	ldr	r0, [r4, #0]
 8088020:	f7ff fed3 	bl	8087dca <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8088024:	6820      	ldr	r0, [r4, #0]
 8088026:	f7ff fed0 	bl	8087dca <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 808802a:	6820      	ldr	r0, [r4, #0]
 808802c:	f7ff fecd 	bl	8087dca <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8088030:	e7da      	b.n	8087fe8 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xde>

08088032 <_ZN9SdSpiCard9readBlockEmPh>:
    chipSelectHigh();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8088032:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8088034:	7a43      	ldrb	r3, [r0, #9]
    chipSelectHigh();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8088036:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8088038:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 808803a:	bf18      	it	ne
 808803c:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD17, blockNumber)) {
 808803e:	460a      	mov	r2, r1
 8088040:	2111      	movs	r1, #17
    chipSelectHigh();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8088042:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
 8088044:	f7ff ff2b 	bl	8087e9e <_ZN9SdSpiCard11cardCommandEhm>
 8088048:	b110      	cbz	r0, 8088050 <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 808804a:	2304      	movs	r3, #4
 808804c:	71a3      	strb	r3, [r4, #6]
 808804e:	e00b      	b.n	8088068 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
 8088050:	4629      	mov	r1, r5
 8088052:	f44f 7200 	mov.w	r2, #512	; 0x200
 8088056:	4620      	mov	r0, r4
 8088058:	f7ff fedd 	bl	8087e16 <_ZN9SdSpiCard8readDataEPhj>
 808805c:	4605      	mov	r5, r0
 808805e:	b118      	cbz	r0, 8088068 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  chipSelectHigh();
 8088060:	4620      	mov	r0, r4
 8088062:	f7ff feb5 	bl	8087dd0 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8088066:	e003      	b.n	8088070 <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  chipSelectHigh();
 8088068:	4620      	mov	r0, r4
 808806a:	f7ff feb1 	bl	8087dd0 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 808806e:	2500      	movs	r5, #0
}
 8088070:	4628      	mov	r0, r5
 8088072:	bd38      	pop	{r3, r4, r5, pc}

08088074 <_ZN9SdSpiCard9readStartEm>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8088074:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 8088076:	7a43      	ldrb	r3, [r0, #9]
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8088078:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 808807a:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 808807c:	bf18      	it	ne
 808807e:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
 8088080:	2112      	movs	r1, #18
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8088082:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
 8088084:	f7ff ff0b 	bl	8087e9e <_ZN9SdSpiCard11cardCommandEhm>
 8088088:	b130      	cbz	r0, 8088098 <_ZN9SdSpiCard9readStartEm+0x24>
 808808a:	2305      	movs	r3, #5
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 808808c:	4620      	mov	r0, r4
 808808e:	71a3      	strb	r3, [r4, #6]
 8088090:	f7ff fe9e 	bl	8087dd0 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8088094:	2000      	movs	r0, #0
 8088096:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
  return true;
 8088098:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 808809a:	bd10      	pop	{r4, pc}

0808809c <_ZN9SdSpiCard8readStopEv>:
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 808809c:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
 808809e:	2200      	movs	r2, #0
 80880a0:	210c      	movs	r1, #12
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 80880a2:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
 80880a4:	f7ff fefb 	bl	8087e9e <_ZN9SdSpiCard11cardCommandEhm>
 80880a8:	b130      	cbz	r0, 80880b8 <_ZN9SdSpiCard8readStopEv+0x1c>
 80880aa:	2303      	movs	r3, #3
  }
  chipSelectHigh();
  return true;

fail:
  chipSelectHigh();
 80880ac:	4620      	mov	r0, r4
 80880ae:	71a3      	strb	r3, [r4, #6]
 80880b0:	f7ff fe8e 	bl	8087dd0 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 80880b4:	2000      	movs	r0, #0
 80880b6:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  chipSelectHigh();
 80880b8:	4620      	mov	r0, r4
 80880ba:	f7ff fe89 	bl	8087dd0 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 80880be:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 80880c0:	bd10      	pop	{r4, pc}

080880c2 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
 80880c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80880c4:	4605      	mov	r5, r0
 80880c6:	4616      	mov	r6, r2
 80880c8:	461f      	mov	r7, r3
  if (!readStart(block)) {
 80880ca:	f7ff ffd3 	bl	8088074 <_ZN9SdSpiCard9readStartEm>
 80880ce:	b198      	cbz	r0, 80880f8 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
 80880d0:	2400      	movs	r4, #0
 80880d2:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
 80880d4:	429f      	cmp	r7, r3
 80880d6:	eb06 2144 	add.w	r1, r6, r4, lsl #9
 80880da:	d908      	bls.n	80880ee <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
 80880dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80880e0:	4628      	mov	r0, r5
 80880e2:	f7ff fe98 	bl	8087e16 <_ZN9SdSpiCard8readDataEPhj>
 80880e6:	3401      	adds	r4, #1
 80880e8:	2800      	cmp	r0, #0
 80880ea:	d1f2      	bne.n	80880d2 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
 80880ec:	e004      	b.n	80880f8 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
 80880ee:	4628      	mov	r0, r5
}
 80880f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
 80880f4:	f7ff bfd2 	b.w	808809c <_ZN9SdSpiCard8readStopEv>
}
 80880f8:	2000      	movs	r0, #0
 80880fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080880fc <_ZN9SdSpiCard9writeDataEhPKh>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
 80880fc:	b538      	push	{r3, r4, r5, lr}
 80880fe:	4604      	mov	r4, r0
 8088100:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
 8088102:	6800      	ldr	r0, [r0, #0]
 8088104:	f7ff fe5e 	bl	8087dc4 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
 8088108:	6820      	ldr	r0, [r4, #0]
  }
  void spiSend(uint8_t data) {
    m_spi->send(data);
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spi->send(buf, n);
 808810a:	f44f 7200 	mov.w	r2, #512	; 0x200
 808810e:	6803      	ldr	r3, [r0, #0]
 8088110:	4629      	mov	r1, r5
 8088112:	699b      	ldr	r3, [r3, #24]
 8088114:	4798      	blx	r3
  spiSend(src, 512);
  spiSend(crc >> 8);
 8088116:	21ff      	movs	r1, #255	; 0xff
 8088118:	6820      	ldr	r0, [r4, #0]
 808811a:	f7ff fe53 	bl	8087dc4 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
  spiSend(crc & 0XFF);
 808811e:	21ff      	movs	r1, #255	; 0xff
 8088120:	6820      	ldr	r0, [r4, #0]
 8088122:	f7ff fe4f 	bl	8087dc4 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>

  m_status = spiReceive();
 8088126:	6820      	ldr	r0, [r4, #0]
 8088128:	f7ff fe4f 	bl	8087dca <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 808812c:	7220      	strb	r0, [r4, #8]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
 808812e:	f000 001f 	and.w	r0, r0, #31
 8088132:	2805      	cmp	r0, #5
 8088134:	d006      	beq.n	8088144 <_ZN9SdSpiCard9writeDataEhPKh+0x48>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8088136:	2313      	movs	r3, #19
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 8088138:	4620      	mov	r0, r4
 808813a:	71a3      	strb	r3, [r4, #6]
 808813c:	f7ff fe48 	bl	8087dd0 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8088140:	2000      	movs	r0, #0
 8088142:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
 8088144:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 8088146:	bd38      	pop	{r3, r4, r5, pc}

08088148 <_ZN9SdSpiCard10writeBlockEmPKh>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8088148:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 808814a:	7a43      	ldrb	r3, [r0, #9]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 808814c:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 808814e:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8088150:	bf18      	it	ne
 8088152:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD24, blockNumber)) {
 8088154:	460a      	mov	r2, r1
 8088156:	2118      	movs	r1, #24

fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8088158:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
 808815a:	f7ff fea0 	bl	8087e9e <_ZN9SdSpiCard11cardCommandEhm>
 808815e:	b110      	cbz	r0, 8088166 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
 8088160:	2306      	movs	r3, #6
 8088162:	71a3      	strb	r3, [r4, #6]
 8088164:	e00a      	b.n	808817c <_ZN9SdSpiCard10writeBlockEmPKh+0x34>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
 8088166:	462a      	mov	r2, r5
 8088168:	21fe      	movs	r1, #254	; 0xfe
 808816a:	4620      	mov	r0, r4
 808816c:	f7ff ffc6 	bl	80880fc <_ZN9SdSpiCard9writeDataEhPKh>
 8088170:	4605      	mov	r5, r0
 8088172:	b118      	cbz	r0, 808817c <_ZN9SdSpiCard10writeBlockEmPKh+0x34>
    error(SD_CARD_ERROR_WRITE_PROGRAMMING);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  chipSelectHigh();
 8088174:	4620      	mov	r0, r4
 8088176:	f7ff fe2b 	bl	8087dd0 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 808817a:	e003      	b.n	8088184 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>

fail:
  chipSelectHigh();
 808817c:	4620      	mov	r0, r4
 808817e:	f7ff fe27 	bl	8087dd0 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8088182:	2500      	movs	r5, #0
}
 8088184:	4628      	mov	r0, r5
 8088186:	bd38      	pop	{r3, r4, r5, pc}

08088188 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
 8088188:	b570      	push	{r4, r5, r6, lr}
 808818a:	4604      	mov	r4, r0
 808818c:	460d      	mov	r5, r1
  bool selected = m_selected;
 808818e:	7906      	ldrb	r6, [r0, #4]
  chipSelectLow();
 8088190:	f7ff fe31 	bl	8087df6 <_ZN9SdSpiCard13chipSelectLowEv>
  // wait for previous write to finish
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8088194:	f44f 7116 	mov.w	r1, #600	; 0x258
 8088198:	4620      	mov	r0, r4
 808819a:	f7ff fe6c 	bl	8087e76 <_ZN9SdSpiCard11waitNotBusyEt>
 808819e:	b910      	cbnz	r0, 80881a6 <_ZN9SdSpiCard9writeDataEPKh+0x1e>
 80881a0:	2317      	movs	r3, #23
 80881a2:	71a3      	strb	r3, [r4, #6]
 80881a4:	e00b      	b.n	80881be <_ZN9SdSpiCard9writeDataEPKh+0x36>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
 80881a6:	462a      	mov	r2, r5
 80881a8:	21fc      	movs	r1, #252	; 0xfc
 80881aa:	4620      	mov	r0, r4
 80881ac:	f7ff ffa6 	bl	80880fc <_ZN9SdSpiCard9writeDataEhPKh>
 80881b0:	4605      	mov	r5, r0
 80881b2:	b120      	cbz	r0, 80881be <_ZN9SdSpiCard9writeDataEPKh+0x36>
    goto fail;
  }
  if (!selected) {
 80881b4:	b93e      	cbnz	r6, 80881c6 <_ZN9SdSpiCard9writeDataEPKh+0x3e>
    chipSelectHigh();
 80881b6:	4620      	mov	r0, r4
 80881b8:	f7ff fe0a 	bl	8087dd0 <_ZN9SdSpiCard14chipSelectHighEv>
 80881bc:	e003      	b.n	80881c6 <_ZN9SdSpiCard9writeDataEPKh+0x3e>
  }
  return true;

fail:
  chipSelectHigh();
 80881be:	4620      	mov	r0, r4
 80881c0:	f7ff fe06 	bl	8087dd0 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 80881c4:	2500      	movs	r5, #0
}
 80881c6:	4628      	mov	r0, r5
 80881c8:	bd70      	pop	{r4, r5, r6, pc}

080881ca <_ZN9SdSpiCard10writeStartEmm>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber, uint32_t eraseCount) {
 80881ca:	b570      	push	{r4, r5, r6, lr}
 80881cc:	4604      	mov	r4, r0
 80881ce:	4616      	mov	r6, r2
 80881d0:	460d      	mov	r5, r1
  bool writeStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
 80881d2:	2200      	movs	r2, #0
 80881d4:	2137      	movs	r1, #55	; 0x37
 80881d6:	f7ff fe62 	bl	8087e9e <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 80881da:	4632      	mov	r2, r6
 80881dc:	2117      	movs	r1, #23
 80881de:	4620      	mov	r0, r4
 80881e0:	f7ff fe5d 	bl	8087e9e <_ZN9SdSpiCard11cardCommandEhm>
  SD_TRACE("WS", blockNumber);
  // send pre-erase count
  if (cardAcmd(ACMD23, eraseCount)) {
 80881e4:	b108      	cbz	r0, 80881ea <_ZN9SdSpiCard10writeStartEmm+0x20>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80881e6:	2309      	movs	r3, #9
 80881e8:	e00a      	b.n	8088200 <_ZN9SdSpiCard10writeStartEmm+0x36>
    error(SD_CARD_ERROR_ACMD23);
    goto fail;
  }
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 80881ea:	7a63      	ldrb	r3, [r4, #9]
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
 80881ec:	2119      	movs	r1, #25
  if (cardAcmd(ACMD23, eraseCount)) {
    error(SD_CARD_ERROR_ACMD23);
    goto fail;
  }
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 80881ee:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 80881f0:	bf18      	it	ne
 80881f2:	026d      	lslne	r5, r5, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
 80881f4:	462a      	mov	r2, r5
 80881f6:	4620      	mov	r0, r4
 80881f8:	f7ff fe51 	bl	8087e9e <_ZN9SdSpiCard11cardCommandEhm>
 80881fc:	b130      	cbz	r0, 808820c <_ZN9SdSpiCard10writeStartEmm+0x42>
 80881fe:	2307      	movs	r3, #7
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 8088200:	4620      	mov	r0, r4
 8088202:	71a3      	strb	r3, [r4, #6]
 8088204:	f7ff fde4 	bl	8087dd0 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8088208:	2000      	movs	r0, #0
 808820a:	bd70      	pop	{r4, r5, r6, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
 808820c:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 808820e:	bd70      	pop	{r4, r5, r6, pc}

08088210 <_ZN9SdSpiCard9writeStopEv>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 8088210:	b538      	push	{r3, r4, r5, lr}
 8088212:	4604      	mov	r4, r0
  chipSelectLow();
 8088214:	f7ff fdef 	bl	8087df6 <_ZN9SdSpiCard13chipSelectLowEv>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8088218:	f44f 7116 	mov.w	r1, #600	; 0x258
 808821c:	4620      	mov	r0, r4
 808821e:	f7ff fe2a 	bl	8087e76 <_ZN9SdSpiCard11waitNotBusyEt>
 8088222:	b170      	cbz	r0, 8088242 <_ZN9SdSpiCard9writeStopEv+0x32>
    goto fail;
  }
  spiSend(STOP_TRAN_TOKEN);
 8088224:	21fd      	movs	r1, #253	; 0xfd
 8088226:	6820      	ldr	r0, [r4, #0]
 8088228:	f7ff fdcc 	bl	8087dc4 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 808822c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8088230:	4620      	mov	r0, r4
 8088232:	f7ff fe20 	bl	8087e76 <_ZN9SdSpiCard11waitNotBusyEt>
 8088236:	4605      	mov	r5, r0
 8088238:	b118      	cbz	r0, 8088242 <_ZN9SdSpiCard9writeStopEv+0x32>
    goto fail;
  }
  chipSelectHigh();
 808823a:	4620      	mov	r0, r4
 808823c:	f7ff fdc8 	bl	8087dd0 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8088240:	e005      	b.n	808824e <_ZN9SdSpiCard9writeStopEv+0x3e>
 8088242:	2312      	movs	r3, #18
 8088244:	71a3      	strb	r3, [r4, #6]

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
 8088246:	4620      	mov	r0, r4
 8088248:	f7ff fdc2 	bl	8087dd0 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 808824c:	2500      	movs	r5, #0
}
 808824e:	4628      	mov	r0, r5
 8088250:	bd38      	pop	{r3, r4, r5, pc}

08088252 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 8088252:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8088254:	4617      	mov	r7, r2
  if (!writeStart(block, count)) {
 8088256:	461a      	mov	r2, r3
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 8088258:	4605      	mov	r5, r0
 808825a:	461e      	mov	r6, r3
  if (!writeStart(block, count)) {
 808825c:	f7ff ffb5 	bl	80881ca <_ZN9SdSpiCard10writeStartEmm>
 8088260:	b170      	cbz	r0, 8088280 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2e>
 8088262:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 8088264:	42b4      	cmp	r4, r6
 8088266:	eb07 2144 	add.w	r1, r7, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 808826a:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block, count)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 808826c:	d004      	beq.n	8088278 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x26>
    if (!writeData(src)) {
 808826e:	f7ff ff8b 	bl	8088188 <_ZN9SdSpiCard9writeDataEPKh>
 8088272:	b128      	cbz	r0, 8088280 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2e>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block, count)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 8088274:	3401      	adds	r4, #1
 8088276:	e7f5      	b.n	8088264 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x12>
  return writeStop();

 fail:
  chipSelectHigh();
  return false;
}
 8088278:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 808827c:	f7ff bfc8 	b.w	8088210 <_ZN9SdSpiCard9writeStopEv>

 fail:
  chipSelectHigh();
 8088280:	4628      	mov	r0, r5
 8088282:	f7ff fda5 	bl	8087dd0 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
}
 8088286:	2000      	movs	r0, #0
 8088288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808828a <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP9SdSpiBasehh>:
 808828a:	f002 b8bd 	b.w	808a408 <HAL_Pin_Map>
	...

08088290 <_Z36SD_SPI_DMA_TransferComplete_Callbackv>:
#if SPI_INTERFACE_COUNT == 1
const uint8_t m_spiIf = 0;
#endif
//-----------------------------------------------------------------------------
void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
 8088290:	4b01      	ldr	r3, [pc, #4]	; (8088298 <_Z36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
 8088292:	2201      	movs	r2, #1
 8088294:	701a      	strb	r2, [r3, #0]
 8088296:	4770      	bx	lr
 8088298:	20000fcc 	.word	0x20000fcc

0808829c <_ZN5SdSpi14endTransactionEv>:
#endif  // SPI_CLOCK_DIV128
  // delay for SPI transfer done callback too soon bug.
  bugDelay = 24*divisor*(1 + m_spiIf)/60;
}
//-----------------------------------------------------------------------------
void SdSpi::endTransaction() {
 808829c:	4770      	bx	lr
	...

080882a0 <_ZN5SdSpi5beginEh>:
void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
}
//------------------------------------------------------------------------------
void SdSpi::begin(uint8_t chipSelectPin) {
  spiPtr[m_spiIf]->begin(chipSelectPin);
 80882a0:	7902      	ldrb	r2, [r0, #4]
 80882a2:	4b02      	ldr	r3, [pc, #8]	; (80882ac <_ZN5SdSpi5beginEh+0xc>)
 80882a4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80882a8:	f002 bd7b 	b.w	808ada2 <_ZN8SPIClass5beginEt>
 80882ac:	08093e40 	.word	0x08093e40

080882b0 <_ZN5SdSpi16beginTransactionEh>:
}
//------------------------------------------------------------------------------
void SdSpi::beginTransaction(uint8_t divisor) {
 80882b0:	b570      	push	{r4, r5, r6, lr}
 80882b2:	4606      	mov	r6, r0
 80882b4:	460c      	mov	r4, r1
  spiPtr[m_spiIf]->setBitOrder(MSBFIRST);
 80882b6:	7903      	ldrb	r3, [r0, #4]
 80882b8:	4d1a      	ldr	r5, [pc, #104]	; (8088324 <_ZN5SdSpi16beginTransactionEh+0x74>)
 80882ba:	2101      	movs	r1, #1
 80882bc:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 80882c0:	f002 fd75 	bl	808adae <_ZN8SPIClass11setBitOrderEh>
  spiPtr[m_spiIf]->setDataMode(SPI_MODE0);
 80882c4:	7933      	ldrb	r3, [r6, #4]
 80882c6:	2100      	movs	r1, #0
 80882c8:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 80882cc:	f002 fd72 	bl	808adb4 <_ZN8SPIClass11setDataModeEh>
#ifndef SPI_CLOCK_DIV128
  spiPtr[m_spiIf]->setClockDivider(divisor);
#else  // SPI_CLOCK_DIV128
  int v;
  if (divisor <= 2) {
 80882d0:	2c02      	cmp	r4, #2
 80882d2:	d90c      	bls.n	80882ee <_ZN5SdSpi16beginTransactionEh+0x3e>
    v = SPI_CLOCK_DIV2;
  } else  if (divisor <= 4) {
 80882d4:	2c04      	cmp	r4, #4
 80882d6:	d90c      	bls.n	80882f2 <_ZN5SdSpi16beginTransactionEh+0x42>
    v = SPI_CLOCK_DIV4;
  } else  if (divisor <= 8) {
 80882d8:	2c08      	cmp	r4, #8
 80882da:	d90c      	bls.n	80882f6 <_ZN5SdSpi16beginTransactionEh+0x46>
    v = SPI_CLOCK_DIV8;
  } else  if (divisor <= 16) {
 80882dc:	2c10      	cmp	r4, #16
 80882de:	d90c      	bls.n	80882fa <_ZN5SdSpi16beginTransactionEh+0x4a>
    v = SPI_CLOCK_DIV16;
  } else  if (divisor <= 32) {
 80882e0:	2c20      	cmp	r4, #32
 80882e2:	d90c      	bls.n	80882fe <_ZN5SdSpi16beginTransactionEh+0x4e>
    v = SPI_CLOCK_DIV32;
  } else  if (divisor <= 64) {
    v = SPI_CLOCK_DIV64;
  } else {
    v = SPI_CLOCK_DIV128;
 80882e4:	2c41      	cmp	r4, #65	; 0x41
 80882e6:	bf34      	ite	cc
 80882e8:	2128      	movcc	r1, #40	; 0x28
 80882ea:	2130      	movcs	r1, #48	; 0x30
 80882ec:	e008      	b.n	8088300 <_ZN5SdSpi16beginTransactionEh+0x50>
#ifndef SPI_CLOCK_DIV128
  spiPtr[m_spiIf]->setClockDivider(divisor);
#else  // SPI_CLOCK_DIV128
  int v;
  if (divisor <= 2) {
    v = SPI_CLOCK_DIV2;
 80882ee:	2100      	movs	r1, #0
 80882f0:	e006      	b.n	8088300 <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 4) {
    v = SPI_CLOCK_DIV4;
 80882f2:	2108      	movs	r1, #8
 80882f4:	e004      	b.n	8088300 <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 8) {
    v = SPI_CLOCK_DIV8;
 80882f6:	2110      	movs	r1, #16
 80882f8:	e002      	b.n	8088300 <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 16) {
    v = SPI_CLOCK_DIV16;
 80882fa:	2118      	movs	r1, #24
 80882fc:	e000      	b.n	8088300 <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 32) {
    v = SPI_CLOCK_DIV32;
 80882fe:	2120      	movs	r1, #32
  } else  if (divisor <= 64) {
    v = SPI_CLOCK_DIV64;
  } else {
    v = SPI_CLOCK_DIV128;
  }
  spiPtr[m_spiIf]->setClockDivider(v);
 8088300:	7933      	ldrb	r3, [r6, #4]
 8088302:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8088306:	f002 fd9f 	bl	808ae48 <_ZN8SPIClass15setClockDividerEh>
#endif  // SPI_CLOCK_DIV128
  // delay for SPI transfer done callback too soon bug.
  bugDelay = 24*divisor*(1 + m_spiIf)/60;
 808830a:	2318      	movs	r3, #24
 808830c:	fb03 f104 	mul.w	r1, r3, r4
 8088310:	7932      	ldrb	r2, [r6, #4]
 8088312:	233c      	movs	r3, #60	; 0x3c
 8088314:	fb02 1101 	mla	r1, r2, r1, r1
 8088318:	fb91 f1f3 	sdiv	r1, r1, r3
 808831c:	4b02      	ldr	r3, [pc, #8]	; (8088328 <_ZN5SdSpi16beginTransactionEh+0x78>)
 808831e:	6019      	str	r1, [r3, #0]
 8088320:	bd70      	pop	{r4, r5, r6, pc}
 8088322:	bf00      	nop
 8088324:	08093e40 	.word	0x08093e40
 8088328:	20000fd0 	.word	0x20000fd0

0808832c <_ZN5SdSpi7receiveEv>:
void SdSpi::endTransaction() {
}
//-----------------------------------------------------------------------------
/** SPI receive a byte */
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
 808832c:	7902      	ldrb	r2, [r0, #4]
 808832e:	4b03      	ldr	r3, [pc, #12]	; (808833c <_ZN5SdSpi7receiveEv+0x10>)
 8088330:	21ff      	movs	r1, #255	; 0xff
 8088332:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8088336:	f002 bd9b 	b.w	808ae70 <_ZN8SPIClass8transferEh>
 808833a:	bf00      	nop
 808833c:	08093e40 	.word	0x08093e40

08088340 <_ZN5SdSpi4sendEh>:
  return 0;
}
//-----------------------------------------------------------------------------
/** SPI send a byte */
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
 8088340:	7902      	ldrb	r2, [r0, #4]
 8088342:	4b02      	ldr	r3, [pc, #8]	; (808834c <_ZN5SdSpi4sendEh+0xc>)
 8088344:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8088348:	f002 bd92 	b.w	808ae70 <_ZN8SPIClass8transferEh>
 808834c:	08093e40 	.word	0x08093e40

08088350 <_ZN5SdSpi7receiveEPhj>:
/** SPI receive a byte */
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
}
//-----------------------------------------------------------------------------
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
 8088350:	b573      	push	{r0, r1, r4, r5, r6, lr}
  SPI_DMA_TransferCompleted = false;
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8088352:	4b0c      	ldr	r3, [pc, #48]	; (8088384 <_ZN5SdSpi7receiveEPhj+0x34>)
 8088354:	7906      	ldrb	r6, [r0, #4]
 8088356:	480c      	ldr	r0, [pc, #48]	; (8088388 <_ZN5SdSpi7receiveEPhj+0x38>)
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
}
//-----------------------------------------------------------------------------
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 8088358:	2500      	movs	r5, #0
 808835a:	4c0c      	ldr	r4, [pc, #48]	; (808838c <_ZN5SdSpi7receiveEPhj+0x3c>)
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 808835c:	9300      	str	r3, [sp, #0]
 808835e:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8088362:	4613      	mov	r3, r2
 8088364:	460a      	mov	r2, r1
 8088366:	4629      	mov	r1, r5
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
}
//-----------------------------------------------------------------------------
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 8088368:	7025      	strb	r5, [r4, #0]
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 808836a:	f002 fd87 	bl	808ae7c <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
 808836e:	7823      	ldrb	r3, [r4, #0]
 8088370:	2b00      	cmp	r3, #0
 8088372:	d0fc      	beq.n	808836e <_ZN5SdSpi7receiveEPhj+0x1e>
  if (bugDelay) {
 8088374:	4b06      	ldr	r3, [pc, #24]	; (8088390 <_ZN5SdSpi7receiveEPhj+0x40>)
 8088376:	6818      	ldr	r0, [r3, #0]
 8088378:	b108      	cbz	r0, 808837e <_ZN5SdSpi7receiveEPhj+0x2e>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 808837a:	f002 f8ed 	bl	808a558 <HAL_Delay_Microseconds>
    delayMicroseconds(bugDelay);
  }
  return 0;
}
 808837e:	2000      	movs	r0, #0
 8088380:	b002      	add	sp, #8
 8088382:	bd70      	pop	{r4, r5, r6, pc}
 8088384:	08088291 	.word	0x08088291
 8088388:	08093e40 	.word	0x08093e40
 808838c:	20000fcc 	.word	0x20000fcc
 8088390:	20000fd0 	.word	0x20000fd0

08088394 <_ZN5SdSpi4sendEPKhj>:
/** SPI send a byte */
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
 8088394:	b573      	push	{r0, r1, r4, r5, r6, lr}
  SPI_DMA_TransferCompleted = false;

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 8088396:	4b0d      	ldr	r3, [pc, #52]	; (80883cc <_ZN5SdSpi4sendEPKhj+0x38>)
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
 8088398:	7906      	ldrb	r6, [r0, #4]
                            SD_SPI_DMA_TransferComplete_Callback);
 808839a:	480d      	ldr	r0, [pc, #52]	; (80883d0 <_ZN5SdSpi4sendEPKhj+0x3c>)
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 808839c:	2500      	movs	r5, #0
 808839e:	4c0d      	ldr	r4, [pc, #52]	; (80883d4 <_ZN5SdSpi4sendEPKhj+0x40>)

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 80883a0:	9300      	str	r3, [sp, #0]
 80883a2:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 80883a6:	4613      	mov	r3, r2
 80883a8:	462a      	mov	r2, r5
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 80883aa:	7025      	strb	r5, [r4, #0]

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 80883ac:	f002 fd66 	bl	808ae7c <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
 80883b0:	7823      	ldrb	r3, [r4, #0]
 80883b2:	2b00      	cmp	r3, #0
 80883b4:	d0fc      	beq.n	80883b0 <_ZN5SdSpi4sendEPKhj+0x1c>
  if (bugDelay) {
 80883b6:	4b08      	ldr	r3, [pc, #32]	; (80883d8 <_ZN5SdSpi4sendEPKhj+0x44>)
 80883b8:	6818      	ldr	r0, [r3, #0]
 80883ba:	b120      	cbz	r0, 80883c6 <_ZN5SdSpi4sendEPKhj+0x32>
    delayMicroseconds(bugDelay);
  }
}
 80883bc:	b002      	add	sp, #8
 80883be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80883c2:	f002 b8c9 	b.w	808a558 <HAL_Delay_Microseconds>
 80883c6:	b002      	add	sp, #8
 80883c8:	bd70      	pop	{r4, r5, r6, pc}
 80883ca:	bf00      	nop
 80883cc:	08088291 	.word	0x08088291
 80883d0:	08093e40 	.word	0x08093e40
 80883d4:	20000fcc 	.word	0x20000fcc
 80883d8:	20000fd0 	.word	0x20000fd0

080883dc <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv>:
 80883dc:	f002 b814 	b.w	808a408 <HAL_Pin_Map>

080883e0 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 80883e0:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 80883e2:	f100 0210 	add.w	r2, r0, #16
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 80883e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80883ea:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 80883ec:	6901      	ldr	r1, [r0, #16]
 80883ee:	6880      	ldr	r0, [r0, #8]
 80883f0:	f000 bc04 	b.w	8088bfc <_ZN9FatVolume15allocateClusterEmPm>

080883f4 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 80883f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 80883f8:	7803      	ldrb	r3, [r0, #0]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 80883fa:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 80883fc:	f003 0320 	and.w	r3, r3, #32
 8088400:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8088404:	b10b      	cbz	r3, 808840a <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
 8088406:	2600      	movs	r6, #0
 8088408:	e02e      	b.n	8088468 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
 808840a:	6942      	ldr	r2, [r0, #20]
 808840c:	4b18      	ldr	r3, [pc, #96]	; (8088470 <_ZN7FatFile13addDirClusterEv+0x7c>)
 808840e:	429a      	cmp	r2, r3
 8088410:	d8f9      	bhi.n	8088406 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
 8088412:	f7ff ffe5 	bl	80883e0 <_ZN7FatFile10addClusterEv>
 8088416:	4606      	mov	r6, r0
 8088418:	2800      	cmp	r0, #0
 808841a:	d0f4      	beq.n	8088406 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterStartBlock(m_curCluster);
 808841c:	6921      	ldr	r1, [r4, #16]
 808841e:	68a0      	ldr	r0, [r4, #8]
 8088420:	f000 fb8d 	bl	8088b3e <_ZNK9FatVolume17clusterStartBlockEm>
 8088424:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8088426:	68a0      	ldr	r0, [r4, #8]
 8088428:	2205      	movs	r2, #5
 808842a:	4639      	mov	r1, r7
 808842c:	3028      	adds	r0, #40	; 0x28
 808842e:	f000 fb62 	bl	8088af6 <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
 8088432:	4680      	mov	r8, r0
 8088434:	2800      	cmp	r0, #0
 8088436:	d0e6      	beq.n	8088406 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
 8088438:	4629      	mov	r1, r5
 808843a:	f44f 7200 	mov.w	r2, #512	; 0x200
 808843e:	f006 fa7d 	bl	808e93c <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 8088442:	2501      	movs	r5, #1
 8088444:	68a0      	ldr	r0, [r4, #8]
 8088446:	7902      	ldrb	r2, [r0, #4]
 8088448:	42aa      	cmp	r2, r5
 808844a:	d909      	bls.n	8088460 <_ZN7FatFile13addDirClusterEv+0x6c>
    if (!m_vol->writeBlock(block + i, pc->data)) {
 808844c:	6803      	ldr	r3, [r0, #0]
 808844e:	4642      	mov	r2, r8
 8088450:	685b      	ldr	r3, [r3, #4]
 8088452:	19e9      	adds	r1, r5, r7
 8088454:	4798      	blx	r3
 8088456:	2800      	cmp	r0, #0
 8088458:	d0d5      	beq.n	8088406 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 808845a:	3501      	adds	r5, #1
 808845c:	b2ed      	uxtb	r5, r5
 808845e:	e7f1      	b.n	8088444 <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
 8088460:	6963      	ldr	r3, [r4, #20]
 8088462:	eb03 2342 	add.w	r3, r3, r2, lsl #9
 8088466:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
 8088468:	4630      	mov	r0, r6
 808846a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808846e:	bf00      	nop
 8088470:	001ffdff 	.word	0x001ffdff

08088474 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
 8088474:	b510      	push	{r4, lr}
 8088476:	4604      	mov	r4, r0
 8088478:	6880      	ldr	r0, [r0, #8]
 808847a:	460a      	mov	r2, r1
 808847c:	3028      	adds	r0, #40	; 0x28
 808847e:	69a1      	ldr	r1, [r4, #24]
 8088480:	f000 fb39 	bl	8088af6 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
 8088484:	b120      	cbz	r0, 8088490 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
 8088486:	88a3      	ldrh	r3, [r4, #4]
 8088488:	f003 030f 	and.w	r3, r3, #15
 808848c:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
 8088490:	bd10      	pop	{r4, pc}

08088492 <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 8088492:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
 8088494:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 8088496:	4605      	mov	r5, r0
 8088498:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
 808849a:	b984      	cbnz	r4, 80884be <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
 808849c:	2224      	movs	r2, #36	; 0x24
 808849e:	4621      	mov	r1, r4
 80884a0:	f006 fa4c 	bl	808e93c <memset>

  m_vol = vol;
 80884a4:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
 80884a6:	79f3      	ldrb	r3, [r6, #7]
 80884a8:	2b10      	cmp	r3, #16
 80884aa:	d003      	beq.n	80884b4 <_ZN7FatFile8openRootEP9FatVolume+0x22>
 80884ac:	2b20      	cmp	r3, #32
 80884ae:	d106      	bne.n	80884be <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
 80884b0:	2340      	movs	r3, #64	; 0x40
 80884b2:	e000      	b.n	80884b6 <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
 80884b4:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = O_READ;
 80884b6:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
 80884b8:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = O_READ;
 80884ba:	70a8      	strb	r0, [r5, #2]
 80884bc:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
 80884be:	2000      	movs	r0, #0
 80884c0:	bd70      	pop	{r4, r5, r6, pc}

080884c2 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
 80884c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80884c6:	7803      	ldrb	r3, [r0, #0]
 80884c8:	4604      	mov	r4, r0
 80884ca:	4689      	mov	r9, r1
 80884cc:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & O_READ)) {
 80884ce:	b14b      	cbz	r3, 80884e4 <_ZN7FatFile4readEPvj+0x22>
 80884d0:	7882      	ldrb	r2, [r0, #2]
 80884d2:	07d1      	lsls	r1, r2, #31
 80884d4:	d506      	bpl.n	80884e4 <_ZN7FatFile4readEPvj+0x22>
 80884d6:	e00c      	b.n	80884f2 <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 80884d8:	465a      	mov	r2, fp
 80884da:	6921      	ldr	r1, [r4, #16]
 80884dc:	f000 fb35 	bl	8088b4a <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
 80884e0:	2800      	cmp	r0, #0
 80884e2:	da3d      	bge.n	8088560 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 80884e4:	7863      	ldrb	r3, [r4, #1]
  return -1;
 80884e6:	f04f 30ff 	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 80884ea:	f043 0302 	orr.w	r3, r3, #2
 80884ee:	7063      	strb	r3, [r4, #1]
  return -1;
 80884f0:	e098      	b.n	8088624 <_ZN7FatFile4readEPvj+0x162>
  if (!isOpen() || !(m_flags & O_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
 80884f2:	071a      	lsls	r2, r3, #28
 80884f4:	d503      	bpl.n	80884fe <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
 80884f6:	69e3      	ldr	r3, [r4, #28]
 80884f8:	6962      	ldr	r2, [r4, #20]
 80884fa:	1a9b      	subs	r3, r3, r2
 80884fc:	e007      	b.n	808850e <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
 80884fe:	069a      	lsls	r2, r3, #26
 8088500:	d508      	bpl.n	8088514 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
 8088502:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
 8088504:	891a      	ldrh	r2, [r3, #8]
 8088506:	6963      	ldr	r3, [r4, #20]
 8088508:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
 808850c:	b29b      	uxth	r3, r3
 808850e:	429d      	cmp	r5, r3
 8088510:	bf28      	it	cs
 8088512:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
 8088514:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
 8088516:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 808851a:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 808851e:	2e00      	cmp	r6, #0
 8088520:	d035      	beq.n	808858e <_ZN7FatFile4readEPvj+0xcc>
 8088522:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 8088524:	6963      	ldr	r3, [r4, #20]
    if (isRootFixed()) {
 8088526:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 808852a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 808852e:	68a0      	ldr	r0, [r4, #8]
 8088530:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
 8088534:	d002      	beq.n	808853c <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
 8088536:	6a03      	ldr	r3, [r0, #32]
 8088538:	4419      	add	r1, r3
 808853a:	e01d      	b.n	8088578 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 808853c:	f890 8005 	ldrb.w	r8, [r0, #5]
 8088540:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
 8088544:	f1ba 0f00 	cmp.w	sl, #0
 8088548:	d110      	bne.n	808856c <_ZN7FatFile4readEPvj+0xaa>
 808854a:	f1b8 0f00 	cmp.w	r8, #0
 808854e:	d10d      	bne.n	808856c <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
 8088550:	2b00      	cmp	r3, #0
 8088552:	d1c1      	bne.n	80884d8 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 8088554:	0653      	lsls	r3, r2, #25
 8088556:	bf4c      	ite	mi
 8088558:	6a03      	ldrmi	r3, [r0, #32]
 808855a:	6a23      	ldrpl	r3, [r4, #32]
 808855c:	6123      	str	r3, [r4, #16]
 808855e:	e005      	b.n	808856c <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
 8088560:	d104      	bne.n	808856c <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
 8088562:	7823      	ldrb	r3, [r4, #0]
 8088564:	f013 0f70 	tst.w	r3, #112	; 0x70
 8088568:	d111      	bne.n	808858e <_ZN7FatFile4readEPvj+0xcc>
 808856a:	e7bb      	b.n	80884e4 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 808856c:	6921      	ldr	r1, [r4, #16]
 808856e:	68a0      	ldr	r0, [r4, #8]
 8088570:	f000 fae5 	bl	8088b3e <_ZNK9FatVolume17clusterStartBlockEm>
 8088574:	eb08 0100 	add.w	r1, r8, r0
 8088578:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
 808857a:	f1ba 0f00 	cmp.w	sl, #0
 808857e:	d135      	bne.n	80885ec <_ZN7FatFile4readEPvj+0x12a>
 8088580:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8088584:	d332      	bcc.n	80885ec <_ZN7FatFile4readEPvj+0x12a>
 8088586:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8088588:	4291      	cmp	r1, r2
 808858a:	d102      	bne.n	8088592 <_ZN7FatFile4readEPvj+0xd0>
 808858c:	e02e      	b.n	80885ec <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
 808858e:	1ba8      	subs	r0, r5, r6
 8088590:	e048      	b.n	8088624 <_ZN7FatFile4readEPvj+0x162>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
 8088592:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8088596:	d31b      	bcc.n	80885d0 <_ZN7FatFile4readEPvj+0x10e>
      uint8_t nb = toRead >> 9;
      if (!isRootFixed()) {
 8088598:	7827      	ldrb	r7, [r4, #0]
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      uint8_t nb = toRead >> 9;
 808859a:	f3c6 2347 	ubfx	r3, r6, #9, #8
      if (!isRootFixed()) {
 808859e:	06bf      	lsls	r7, r7, #26
 80885a0:	d406      	bmi.n	80885b0 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
 80885a2:	7907      	ldrb	r7, [r0, #4]
 80885a4:	ebc8 0707 	rsb	r7, r8, r7
 80885a8:	b2ff      	uxtb	r7, r7
 80885aa:	42bb      	cmp	r3, r7
 80885ac:	bf28      	it	cs
 80885ae:	463b      	movcs	r3, r7
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 80885b0:	4291      	cmp	r1, r2
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
 80885b2:	ea4f 2743 	mov.w	r7, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 80885b6:	d207      	bcs.n	80885c8 <_ZN7FatFile4readEPvj+0x106>
        if (!m_vol->cacheSync()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
 80885b8:	68a0      	ldr	r0, [r4, #8]
 80885ba:	6802      	ldr	r2, [r0, #0]
 80885bc:	f8d2 a008 	ldr.w	sl, [r2, #8]
 80885c0:	464a      	mov	r2, r9
 80885c2:	47d0      	blx	sl
 80885c4:	b960      	cbnz	r0, 80885e0 <_ZN7FatFile4readEPvj+0x11e>
 80885c6:	e78d      	b.n	80884e4 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 80885c8:	441a      	add	r2, r3
 80885ca:	4291      	cmp	r1, r2
 80885cc:	d321      	bcc.n	8088612 <_ZN7FatFile4readEPvj+0x150>
 80885ce:	e7f3      	b.n	80885b8 <_ZN7FatFile4readEPvj+0xf6>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
 80885d0:	6803      	ldr	r3, [r0, #0]
 80885d2:	464a      	mov	r2, r9
 80885d4:	681b      	ldr	r3, [r3, #0]
 80885d6:	4798      	blx	r3
 80885d8:	2800      	cmp	r0, #0
 80885da:	d083      	beq.n	80884e4 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
 80885dc:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
 80885e0:	6963      	ldr	r3, [r4, #20]
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
 80885e2:	44b9      	add	r9, r7
    m_curPosition += n;
 80885e4:	443b      	add	r3, r7
 80885e6:	6163      	str	r3, [r4, #20]
    toRead -= n;
 80885e8:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 80885ea:	e798      	b.n	808851e <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 80885ec:	2200      	movs	r2, #0
 80885ee:	3028      	adds	r0, #40	; 0x28
 80885f0:	f000 fa81 	bl	8088af6 <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
 80885f4:	2800      	cmp	r0, #0
 80885f6:	f43f af75 	beq.w	80884e4 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
 80885fa:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
 80885fe:	42b7      	cmp	r7, r6
 8088600:	bf28      	it	cs
 8088602:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
 8088604:	eb00 010a 	add.w	r1, r0, sl
 8088608:	463a      	mov	r2, r7
 808860a:	4648      	mov	r0, r9
 808860c:	f006 f98b 	bl	808e926 <memcpy>
 8088610:	e7e6      	b.n	80885e0 <_ZN7FatFile4readEPvj+0x11e>
 8088612:	e88d 000a 	stmia.w	sp, {r1, r3}
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSync()) {
 8088616:	f7ff f8c3 	bl	80877a0 <_ZN9FatVolume9cacheSyncEv>
 808861a:	e89d 000a 	ldmia.w	sp, {r1, r3}
 808861e:	2800      	cmp	r0, #0
 8088620:	d1ca      	bne.n	80885b8 <_ZN7FatFile4readEPvj+0xf6>
 8088622:	e75f      	b.n	80884e4 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
 8088624:	b003      	add	sp, #12
 8088626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808862a <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
 808862a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 808862c:	2201      	movs	r2, #1
 808862e:	f10d 0107 	add.w	r1, sp, #7
 8088632:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
 8088634:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
 8088636:	6905      	ldr	r5, [r0, #16]
 8088638:	f7ff ff43 	bl	80884c2 <_ZN7FatFile4readEPvj>
 808863c:	2801      	cmp	r0, #1
 808863e:	bf09      	itett	eq
 8088640:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
 8088644:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
 8088648:	6166      	streq	r6, [r4, #20]
  m_curCluster = pos->cluster;
 808864a:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
 808864c:	b002      	add	sp, #8
 808864e:	bd70      	pop	{r4, r5, r6, pc}

08088650 <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
 8088650:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
 8088652:	6943      	ldr	r3, [r0, #20]
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
 8088654:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
 8088656:	f3c3 1543 	ubfx	r5, r3, #5, #4

  if (i == 0 || !skipReadOk) {
 808865a:	b105      	cbz	r5, 808865e <_ZN7FatFile12readDirCacheEb+0xe>
 808865c:	b969      	cbnz	r1, 808867a <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
 808865e:	2201      	movs	r2, #1
 8088660:	f10d 0107 	add.w	r1, sp, #7
 8088664:	4620      	mov	r0, r4
 8088666:	f7ff ff2c 	bl	80884c2 <_ZN7FatFile4readEPvj>
 808866a:	b240      	sxtb	r0, r0
    if  (n != 1) {
 808866c:	2801      	cmp	r0, #1
 808866e:	d001      	beq.n	8088674 <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
 8088670:	2000      	movs	r0, #0
 8088672:	e008      	b.n	8088686 <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
 8088674:	6963      	ldr	r3, [r4, #20]
 8088676:	331f      	adds	r3, #31
 8088678:	e000      	b.n	808867c <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
 808867a:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
 808867c:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
 808867e:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
 8088680:	3034      	adds	r0, #52	; 0x34
 8088682:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
 8088686:	b003      	add	sp, #12
 8088688:	bd30      	pop	{r4, r5, pc}

0808868a <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
 808868a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808868e:	460e      	mov	r6, r1
 8088690:	7801      	ldrb	r1, [r0, #0]
 8088692:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
 8088694:	6907      	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
 8088696:	2900      	cmp	r1, #0
 8088698:	d039      	beq.n	808870e <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
 808869a:	6945      	ldr	r5, [r0, #20]
 808869c:	42b5      	cmp	r5, r6
 808869e:	d03a      	beq.n	8088716 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
 80886a0:	b90e      	cbnz	r6, 80886a6 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
 80886a2:	6106      	str	r6, [r0, #16]
    goto done;
 80886a4:	e031      	b.n	808870a <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
 80886a6:	070b      	lsls	r3, r1, #28
 80886a8:	d503      	bpl.n	80886b2 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
 80886aa:	69c3      	ldr	r3, [r0, #28]
 80886ac:	429e      	cmp	r6, r3
 80886ae:	d82e      	bhi.n	808870e <_ZN7FatFile7seekSetEm+0x84>
 80886b0:	e007      	b.n	80886c2 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
 80886b2:	0688      	lsls	r0, r1, #26
 80886b4:	d505      	bpl.n	80886c2 <_ZN7FatFile7seekSetEm+0x38>
 80886b6:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
 80886b8:	891b      	ldrh	r3, [r3, #8]
 80886ba:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
 80886be:	d826      	bhi.n	808870e <_ZN7FatFile7seekSetEm+0x84>
 80886c0:	e023      	b.n	808870a <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 80886c2:	f8d4 e008 	ldr.w	lr, [r4, #8]
 80886c6:	1e6a      	subs	r2, r5, #1
 80886c8:	f89e 3006 	ldrb.w	r3, [lr, #6]
 80886cc:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 80886d0:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 80886d2:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 80886d4:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
 80886d6:	429a      	cmp	r2, r3
 80886d8:	d800      	bhi.n	80886dc <_ZN7FatFile7seekSetEm+0x52>
 80886da:	b94d      	cbnz	r5, 80886f0 <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 80886dc:	064a      	lsls	r2, r1, #25
 80886de:	bf4c      	ite	mi
 80886e0:	f8de 2020 	ldrmi.w	r2, [lr, #32]
 80886e4:	6a22      	ldrpl	r2, [r4, #32]
 80886e6:	6122      	str	r2, [r4, #16]
 80886e8:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 80886ea:	f104 0810 	add.w	r8, r4, #16
 80886ee:	e00a      	b.n	8088706 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
 80886f0:	1a9b      	subs	r3, r3, r2
 80886f2:	e7f9      	b.n	80886e8 <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 80886f4:	4642      	mov	r2, r8
 80886f6:	6921      	ldr	r1, [r4, #16]
 80886f8:	68a0      	ldr	r0, [r4, #8]
 80886fa:	f000 fa26 	bl	8088b4a <_ZN9FatVolume6fatGetEmPm>
 80886fe:	2800      	cmp	r0, #0
 8088700:	f105 35ff 	add.w	r5, r5, #4294967295
 8088704:	dd03      	ble.n	808870e <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
 8088706:	2d00      	cmp	r5, #0
 8088708:	d1f4      	bne.n	80886f4 <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
 808870a:	6166      	str	r6, [r4, #20]
 808870c:	e003      	b.n	8088716 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
 808870e:	6127      	str	r7, [r4, #16]
  return false;
 8088710:	2000      	movs	r0, #0
 8088712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
 8088716:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
 8088718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808871c <_ZN7FatFile15openCachedEntryEPS_thh>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              uint8_t oflag, uint8_t lfnOrd) {
 808871c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808871e:	460f      	mov	r7, r1
 8088720:	4604      	mov	r4, r0
 8088722:	4616      	mov	r6, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
 8088724:	2100      	movs	r1, #0
 8088726:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              uint8_t oflag, uint8_t lfnOrd) {
 8088728:	461d      	mov	r5, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
 808872a:	f006 f907 	bl	808e93c <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
 808872e:	68b8      	ldr	r0, [r7, #8]
  m_dirIndex = dirIndex;
 8088730:	80a6      	strh	r6, [r4, #4]
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              uint8_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
 8088732:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
 8088734:	6a3b      	ldr	r3, [r7, #32]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 8088736:	f006 020f 	and.w	r2, r6, #15
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
 808873a:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 808873c:	0152      	lsls	r2, r2, #5
 808873e:	f100 0334 	add.w	r3, r0, #52	; 0x34
 8088742:	4413      	add	r3, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
 8088744:	7ad9      	ldrb	r1, [r3, #11]
 8088746:	070f      	lsls	r7, r1, #28
 8088748:	d502      	bpl.n	8088750 <_ZN7FatFile15openCachedEntryEPS_thh+0x34>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
 808874a:	2000      	movs	r0, #0
 808874c:	7020      	strb	r0, [r4, #0]
  return false;
 808874e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
 8088750:	1881      	adds	r1, r0, r2
 8088752:	f891 103f 	ldrb.w	r1, [r1, #63]	; 0x3f
 8088756:	f001 0117 	and.w	r1, r1, #23
 808875a:	7021      	strb	r1, [r4, #0]
  if (DIR_IS_FILE(dir)) {
 808875c:	7adb      	ldrb	r3, [r3, #11]
 808875e:	f013 0f18 	tst.w	r3, #24
    m_attr |= FILE_ATTR_FILE;
 8088762:	bf08      	it	eq
 8088764:	f041 0108 	orreq.w	r1, r1, #8
  }
  m_lfnOrd = lfnOrd;
 8088768:	f89d 3018 	ldrb.w	r3, [sp, #24]
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
  if (DIR_IS_FILE(dir)) {
    m_attr |= FILE_ATTR_FILE;
 808876c:	bf08      	it	eq
 808876e:	7021      	strbeq	r1, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
  // Write, truncate, or at end is an error for a directory or read-only file.
  if (oflag & (O_WRITE | O_TRUNC | O_AT_END)) {
 8088770:	f015 0f32 	tst.w	r5, #50	; 0x32
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
  if (DIR_IS_FILE(dir)) {
    m_attr |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
 8088774:	70e3      	strb	r3, [r4, #3]
  // Write, truncate, or at end is an error for a directory or read-only file.
  if (oflag & (O_WRITE | O_TRUNC | O_AT_END)) {
 8088776:	d003      	beq.n	8088780 <_ZN7FatFile15openCachedEntryEPS_thh+0x64>
    if (isSubDir() || isReadOnly()) {
 8088778:	7823      	ldrb	r3, [r4, #0]
 808877a:	f013 0f11 	tst.w	r3, #17
 808877e:	d1e4      	bne.n	808874a <_ZN7FatFile15openCachedEntryEPS_thh+0x2e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // save open flags for read/write
  m_flags = oflag & F_OFLAG;
 8088780:	f005 030f 	and.w	r3, r5, #15
 8088784:	70a3      	strb	r3, [r4, #2]
 8088786:	6b03      	ldr	r3, [r0, #48]	; 0x30

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 8088788:	4402      	add	r2, r0
    }
  }
  // save open flags for read/write
  m_flags = oflag & F_OFLAG;

  m_dirBlock = m_vol->cacheBlockNumber();
 808878a:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
 808878c:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
 8088790:	f8b2 104e 	ldrh.w	r1, [r2, #78]	; 0x4e

  if (oflag & O_TRUNC) {
 8088794:	06ee      	lsls	r6, r5, #27

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
 8088796:	ea41 4103 	orr.w	r1, r1, r3, lsl #16

  if (oflag & O_TRUNC) {
 808879a:	d504      	bpl.n	80887a6 <_ZN7FatFile15openCachedEntryEPS_thh+0x8a>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 808879c:	b171      	cbz	r1, 80887bc <_ZN7FatFile15openCachedEntryEPS_thh+0xa0>
 808879e:	f000 fa68 	bl	8088c72 <_ZN9FatVolume9freeChainEm>
 80887a2:	b958      	cbnz	r0, 80887bc <_ZN7FatFile15openCachedEntryEPS_thh+0xa0>
 80887a4:	e7d1      	b.n	808874a <_ZN7FatFile15openCachedEntryEPS_thh+0x2e>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
 80887a6:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
 80887a8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80887aa:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 80887ac:	06ab      	lsls	r3, r5, #26
 80887ae:	d50a      	bpl.n	80887c6 <_ZN7FatFile15openCachedEntryEPS_thh+0xaa>
 80887b0:	69e1      	ldr	r1, [r4, #28]
 80887b2:	4620      	mov	r0, r4
 80887b4:	f7ff ff69 	bl	808868a <_ZN7FatFile7seekSetEm>
 80887b8:	b928      	cbnz	r0, 80887c6 <_ZN7FatFile15openCachedEntryEPS_thh+0xaa>
 80887ba:	e7c6      	b.n	808874a <_ZN7FatFile15openCachedEntryEPS_thh+0x2e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
 80887bc:	78a3      	ldrb	r3, [r4, #2]
 80887be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80887c2:	70a3      	strb	r3, [r4, #2]
 80887c4:	e7f2      	b.n	80887ac <_ZN7FatFile15openCachedEntryEPS_thh+0x90>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
 80887c6:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
 80887c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080887cc <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 80887cc:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
 80887ce:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 80887d0:	4604      	mov	r4, r0
  if (!isOpen()) {
 80887d2:	b90b      	cbnz	r3, 80887d8 <_ZN7FatFile4syncEv+0xc>
    return true;
 80887d4:	2001      	movs	r0, #1
 80887d6:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (m_flags & F_FILE_DIR_DIRTY) {
 80887d8:	f990 3002 	ldrsb.w	r3, [r0, #2]
 80887dc:	2b00      	cmp	r3, #0
 80887de:	da23      	bge.n	8088828 <_ZN7FatFile4syncEv+0x5c>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
 80887e0:	2101      	movs	r1, #1
 80887e2:	f7ff fe47 	bl	8088474 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 80887e6:	4605      	mov	r5, r0
 80887e8:	b928      	cbnz	r0, 80887f6 <_ZN7FatFile4syncEv+0x2a>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 80887ea:	7863      	ldrb	r3, [r4, #1]
  return false;
 80887ec:	2000      	movs	r0, #0
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 80887ee:	f043 0301 	orr.w	r3, r3, #1
 80887f2:	7063      	strb	r3, [r4, #1]
 80887f4:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 80887f6:	7803      	ldrb	r3, [r0, #0]
 80887f8:	2be5      	cmp	r3, #229	; 0xe5
 80887fa:	d0f6      	beq.n	80887ea <_ZN7FatFile4syncEv+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
 80887fc:	7823      	ldrb	r3, [r4, #0]
 80887fe:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
 8088800:	bf44      	itt	mi
 8088802:	69e3      	ldrmi	r3, [r4, #28]
 8088804:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
 8088806:	8c23      	ldrh	r3, [r4, #32]
 8088808:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
 808880a:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 808880c:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
 808880e:	4b09      	ldr	r3, [pc, #36]	; (8088834 <_ZN7FatFile4syncEv+0x68>)
 8088810:	681b      	ldr	r3, [r3, #0]
 8088812:	b12b      	cbz	r3, 8088820 <_ZN7FatFile4syncEv+0x54>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
 8088814:	f100 0116 	add.w	r1, r0, #22
 8088818:	3018      	adds	r0, #24
 808881a:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
 808881c:	8b2b      	ldrh	r3, [r5, #24]
 808881e:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
 8088820:	78a3      	ldrb	r3, [r4, #2]
 8088822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8088826:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
 8088828:	68a0      	ldr	r0, [r4, #8]
 808882a:	f7fe ffb9 	bl	80877a0 <_ZN9FatVolume9cacheSyncEv>
 808882e:	2800      	cmp	r0, #0
 8088830:	d0db      	beq.n	80887ea <_ZN7FatFile4syncEv+0x1e>
 8088832:	e7cf      	b.n	80887d4 <_ZN7FatFile4syncEv+0x8>
 8088834:	20000fd4 	.word	0x20000fd4

08088838 <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
 8088838:	b510      	push	{r4, lr}
 808883a:	4604      	mov	r4, r0
  bool rtn = sync();
 808883c:	f7ff ffc6 	bl	80887cc <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
 8088840:	2300      	movs	r3, #0
 8088842:	7023      	strb	r3, [r4, #0]
  return rtn;
}
 8088844:	bd10      	pop	{r4, pc}

08088846 <_ZN7FatFile4openEPS_PKch>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, uint8_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
 8088846:	b5f0      	push	{r4, r5, r6, r7, lr}
 8088848:	461f      	mov	r7, r3
 808884a:	b093      	sub	sp, #76	; 0x4c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 808884c:	2300      	movs	r3, #0
 808884e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8088852:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 8088856:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, uint8_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
 8088858:	4606      	mov	r6, r0
 808885a:	460c      	mov	r4, r1
 808885c:	9201      	str	r2, [sp, #4]
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 808885e:	b10b      	cbz	r3, 8088864 <_ZN7FatFile4openEPS_PKch+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
 8088860:	2000      	movs	r0, #0
 8088862:	e03d      	b.n	80888e0 <_ZN7FatFile4openEPS_PKch+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 8088864:	780b      	ldrb	r3, [r1, #0]
 8088866:	f013 0f70 	tst.w	r3, #112	; 0x70
 808886a:	d0f9      	beq.n	8088860 <_ZN7FatFile4openEPS_PKch+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
 808886c:	7813      	ldrb	r3, [r2, #0]
 808886e:	2b2f      	cmp	r3, #47	; 0x2f
 8088870:	d112      	bne.n	8088898 <_ZN7FatFile4openEPS_PKch+0x52>
    while (isDirSeparator(*path)) {
 8088872:	9b01      	ldr	r3, [sp, #4]
 8088874:	781a      	ldrb	r2, [r3, #0]
 8088876:	2a2f      	cmp	r2, #47	; 0x2f
 8088878:	d102      	bne.n	8088880 <_ZN7FatFile4openEPS_PKch+0x3a>
      path++;
 808887a:	3301      	adds	r3, #1
 808887c:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
 808887e:	e7f8      	b.n	8088872 <_ZN7FatFile4openEPS_PKch+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
 8088880:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
 8088882:	b91a      	cbnz	r2, 808888c <_ZN7FatFile4openEPS_PKch+0x46>
      return openRoot(dirFile->m_vol);
 8088884:	4630      	mov	r0, r6
 8088886:	f7ff fe04 	bl	8088492 <_ZN7FatFile8openRootEP9FatVolume>
 808888a:	e029      	b.n	80888e0 <_ZN7FatFile4openEPS_PKch+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
 808888c:	a809      	add	r0, sp, #36	; 0x24
 808888e:	f7ff fe00 	bl	8088492 <_ZN7FatFile8openRootEP9FatVolume>
 8088892:	2800      	cmp	r0, #0
 8088894:	d0e4      	beq.n	8088860 <_ZN7FatFile4openEPS_PKch+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
 8088896:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
 8088898:	aa01      	add	r2, sp, #4
 808889a:	a903      	add	r1, sp, #12
 808889c:	9801      	ldr	r0, [sp, #4]
 808889e:	f7fe ff9b 	bl	80877d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
 80888a2:	2800      	cmp	r0, #0
 80888a4:	d0dc      	beq.n	8088860 <_ZN7FatFile4openEPS_PKch+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
 80888a6:	9b01      	ldr	r3, [sp, #4]
 80888a8:	781b      	ldrb	r3, [r3, #0]
 80888aa:	b19b      	cbz	r3, 80888d4 <_ZN7FatFile4openEPS_PKch+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_READ)) {
 80888ac:	2301      	movs	r3, #1
 80888ae:	aa03      	add	r2, sp, #12
 80888b0:	4621      	mov	r1, r4
 80888b2:	4630      	mov	r0, r6
 80888b4:	f7ff f8d2 	bl	8087a5c <_ZN7FatFile4openEPS_P7fname_th>
 80888b8:	2800      	cmp	r0, #0
 80888ba:	d0d1      	beq.n	8088860 <_ZN7FatFile4openEPS_PKch+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
 80888bc:	4635      	mov	r5, r6
 80888be:	ac09      	add	r4, sp, #36	; 0x24
 80888c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80888c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80888c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80888c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80888c8:	682b      	ldr	r3, [r5, #0]
    dirFile = &tmpDir;
    close();
 80888ca:	4630      	mov	r0, r6
    }
    if (!open(dirFile, &fname, O_READ)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
 80888cc:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
 80888ce:	f7ff ffb3 	bl	8088838 <_ZN7FatFile5closeEv>
 80888d2:	e7e0      	b.n	8088896 <_ZN7FatFile4openEPS_PKch+0x50>
  }
  return open(dirFile, &fname, oflag);
 80888d4:	463b      	mov	r3, r7
 80888d6:	aa03      	add	r2, sp, #12
 80888d8:	4621      	mov	r1, r4
 80888da:	4630      	mov	r0, r6
 80888dc:	f7ff f8be 	bl	8087a5c <_ZN7FatFile4openEPS_P7fname_th>

fail:
  return false;
}
 80888e0:	b013      	add	sp, #76	; 0x4c
 80888e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080888e4 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 80888e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 80888e8:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 80888ea:	4604      	mov	r4, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 80888ec:	071d      	lsls	r5, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 80888ee:	4689      	mov	r9, r1
 80888f0:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 80888f2:	d508      	bpl.n	8088906 <_ZN7FatFile5writeEPKvj+0x22>
 80888f4:	7883      	ldrb	r3, [r0, #2]
 80888f6:	0799      	lsls	r1, r3, #30
 80888f8:	d505      	bpl.n	8088906 <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & O_APPEND)) {
 80888fa:	075b      	lsls	r3, r3, #29
 80888fc:	d50b      	bpl.n	8088916 <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
 80888fe:	69e1      	ldr	r1, [r4, #28]
 8088900:	f7ff fec3 	bl	808868a <_ZN7FatFile7seekSetEm>
 8088904:	b938      	cbnz	r0, 8088916 <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 8088906:	7863      	ldrb	r3, [r4, #1]
  return -1;
 8088908:	f04f 30ff 	mov.w	r0, #4294967295
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 808890c:	f043 0301 	orr.w	r3, r3, #1
 8088910:	7063      	strb	r3, [r4, #1]
  return -1;
 8088912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
 8088916:	6963      	ldr	r3, [r4, #20]
 8088918:	43db      	mvns	r3, r3
 808891a:	4598      	cmp	r8, r3
 808891c:	d8f3      	bhi.n	8088906 <_ZN7FatFile5writeEPKvj+0x22>
 808891e:	4647      	mov	r7, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8088920:	f04f 0a00 	mov.w	sl, #0
 8088924:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 8088926:	2f00      	cmp	r7, #0
 8088928:	f000 8082 	beq.w	8088a30 <_ZN7FatFile5writeEPKvj+0x14c>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
 808892c:	68a0      	ldr	r0, [r4, #8]
    uint16_t blockOffset = m_curPosition & 0X1FF;
 808892e:	f3c3 0608 	ubfx	r6, r3, #0, #9
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 8088932:	7945      	ldrb	r5, [r0, #5]
    if (blockOfCluster == 0 && blockOffset == 0) {
 8088934:	ea15 2553 	ands.w	r5, r5, r3, lsr #9
 8088938:	d11c      	bne.n	8088974 <_ZN7FatFile5writeEPKvj+0x90>
 808893a:	b9de      	cbnz	r6, 8088974 <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
 808893c:	6921      	ldr	r1, [r4, #16]
 808893e:	b171      	cbz	r1, 808895e <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8088940:	f104 0210 	add.w	r2, r4, #16
 8088944:	f000 f901 	bl	8088b4a <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
 8088948:	2800      	cmp	r0, #0
 808894a:	dbdc      	blt.n	8088906 <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
 808894c:	f040 808e 	bne.w	8088a6c <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
 8088950:	4620      	mov	r0, r4
 8088952:	f7ff fd45 	bl	80883e0 <_ZN7FatFile10addClusterEv>
 8088956:	2800      	cmp	r0, #0
 8088958:	f040 8088 	bne.w	8088a6c <_ZN7FatFile5writeEPKvj+0x188>
 808895c:	e7d3      	b.n	8088906 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
 808895e:	6a23      	ldr	r3, [r4, #32]
 8088960:	b93b      	cbnz	r3, 8088972 <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
 8088962:	4620      	mov	r0, r4
 8088964:	f7ff fd3c 	bl	80883e0 <_ZN7FatFile10addClusterEv>
 8088968:	2800      	cmp	r0, #0
 808896a:	d0cc      	beq.n	8088906 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
 808896c:	6923      	ldr	r3, [r4, #16]
 808896e:	6223      	str	r3, [r4, #32]
 8088970:	e000      	b.n	8088974 <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
 8088972:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 8088974:	6921      	ldr	r1, [r4, #16]
 8088976:	68a0      	ldr	r0, [r4, #8]
 8088978:	f000 f8e1 	bl	8088b3e <_ZNK9FatVolume17clusterStartBlockEm>
 808897c:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
 808897e:	b916      	cbnz	r6, 8088986 <_ZN7FatFile5writeEPKvj+0xa2>
 8088980:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 8088984:	d221      	bcs.n	80889ca <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
 8088986:	f5c6 7500 	rsb	r5, r6, #512	; 0x200
 808898a:	42bd      	cmp	r5, r7
 808898c:	bf28      	it	cs
 808898e:	463d      	movcs	r5, r7
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
 8088990:	b936      	cbnz	r6, 80889a0 <_ZN7FatFile5writeEPKvj+0xbc>
 8088992:	6963      	ldr	r3, [r4, #20]
 8088994:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
 8088996:	4293      	cmp	r3, r2
 8088998:	bf34      	ite	cc
 808899a:	2201      	movcc	r2, #1
 808899c:	2205      	movcs	r2, #5
 808899e:	e000      	b.n	80889a2 <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
 80889a0:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 80889a2:	68a0      	ldr	r0, [r4, #8]
 80889a4:	3028      	adds	r0, #40	; 0x28
 80889a6:	f000 f8a6 	bl	8088af6 <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
 80889aa:	2800      	cmp	r0, #0
 80889ac:	d0ab      	beq.n	8088906 <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 80889ae:	4430      	add	r0, r6
 80889b0:	462a      	mov	r2, r5
 80889b2:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
 80889b4:	442e      	add	r6, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 80889b6:	f005 ffb6 	bl	808e926 <memcpy>
      if (512 == (n + blockOffset)) {
 80889ba:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80889be:	d131      	bne.n	8088a24 <_ZN7FatFile5writeEPKvj+0x140>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
 80889c0:	68a0      	ldr	r0, [r4, #8]
 80889c2:	3028      	adds	r0, #40	; 0x28
 80889c4:	f000 f870 	bl	8088aa8 <_ZN8FatCache4syncEv>
 80889c8:	e018      	b.n	80889fc <_ZN7FatFile5writeEPKvj+0x118>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
 80889ca:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 80889ce:	68a2      	ldr	r2, [r4, #8]
 80889d0:	d316      	bcc.n	8088a00 <_ZN7FatFile5writeEPKvj+0x11c>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
 80889d2:	7913      	ldrb	r3, [r2, #4]
 80889d4:	6b10      	ldr	r0, [r2, #48]	; 0x30
 80889d6:	1b5d      	subs	r5, r3, r5
 80889d8:	b2ed      	uxtb	r5, r5
      uint8_t nBlock = nToWrite >> 9;
 80889da:	f3c7 2347 	ubfx	r3, r7, #9, #8
 80889de:	42ab      	cmp	r3, r5
 80889e0:	bf28      	it	cs
 80889e2:	462b      	movcs	r3, r5
      if (nBlock > maxBlocks) {
        nBlock = maxBlocks;
      }
      n = 512*nBlock;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
 80889e4:	4281      	cmp	r1, r0
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      uint8_t nBlock = nToWrite >> 9;
      if (nBlock > maxBlocks) {
        nBlock = maxBlocks;
      }
      n = 512*nBlock;
 80889e6:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
 80889ea:	d302      	bcc.n	80889f2 <_ZN7FatFile5writeEPKvj+0x10e>
 80889ec:	4418      	add	r0, r3
 80889ee:	4281      	cmp	r1, r0
 80889f0:	d336      	bcc.n	8088a60 <_ZN7FatFile5writeEPKvj+0x17c>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nBlock)) {
 80889f2:	68a0      	ldr	r0, [r4, #8]
 80889f4:	6802      	ldr	r2, [r0, #0]
 80889f6:	68d6      	ldr	r6, [r2, #12]
 80889f8:	464a      	mov	r2, r9
 80889fa:	47b0      	blx	r6
 80889fc:	b990      	cbnz	r0, 8088a24 <_ZN7FatFile5writeEPKvj+0x140>
 80889fe:	e782      	b.n	8088906 <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
 8088a00:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8088a02:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 8088a04:	bf02      	ittt	eq
 8088a06:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8088a0a:	f882 a028 	strbeq.w	sl, [r2, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 8088a0e:	6313      	streq	r3, [r2, #48]	; 0x30
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
 8088a10:	68a0      	ldr	r0, [r4, #8]
 8088a12:	464a      	mov	r2, r9
 8088a14:	6803      	ldr	r3, [r0, #0]
 8088a16:	685b      	ldr	r3, [r3, #4]
 8088a18:	4798      	blx	r3
 8088a1a:	2800      	cmp	r0, #0
 8088a1c:	f43f af73 	beq.w	8088906 <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
 8088a20:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 8088a24:	6963      	ldr	r3, [r4, #20]
    src += n;
 8088a26:	44a9      	add	r9, r5
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 8088a28:	442b      	add	r3, r5
 8088a2a:	6163      	str	r3, [r4, #20]
    src += n;
    nToWrite -= n;
 8088a2c:	1b7f      	subs	r7, r7, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 8088a2e:	e779      	b.n	8088924 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
 8088a30:	69e2      	ldr	r2, [r4, #28]
 8088a32:	4293      	cmp	r3, r2
 8088a34:	78a2      	ldrb	r2, [r4, #2]
 8088a36:	d901      	bls.n	8088a3c <_ZN7FatFile5writeEPKvj+0x158>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
 8088a38:	61e3      	str	r3, [r4, #28]
 8088a3a:	e002      	b.n	8088a42 <_ZN7FatFile5writeEPKvj+0x15e>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
 8088a3c:	4b0e      	ldr	r3, [pc, #56]	; (8088a78 <_ZN7FatFile5writeEPKvj+0x194>)
 8088a3e:	681b      	ldr	r3, [r3, #0]
 8088a40:	b113      	cbz	r3, 8088a48 <_ZN7FatFile5writeEPKvj+0x164>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
 8088a42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8088a46:	70a2      	strb	r2, [r4, #2]
  }

  if (m_flags & O_SYNC) {
 8088a48:	78a3      	ldrb	r3, [r4, #2]
 8088a4a:	071a      	lsls	r2, r3, #28
 8088a4c:	d402      	bmi.n	8088a54 <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
 8088a4e:	4640      	mov	r0, r8
 8088a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & O_SYNC) {
    if (!sync()) {
 8088a54:	4620      	mov	r0, r4
 8088a56:	f7ff feb9 	bl	80887cc <_ZN7FatFile4syncEv>
 8088a5a:	2800      	cmp	r0, #0
 8088a5c:	d1f7      	bne.n	8088a4e <_ZN7FatFile5writeEPKvj+0x16a>
 8088a5e:	e752      	b.n	8088906 <_ZN7FatFile5writeEPKvj+0x22>
 8088a60:	f04f 30ff 	mov.w	r0, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8088a64:	f882 a028 	strb.w	sl, [r2, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 8088a68:	6310      	str	r0, [r2, #48]	; 0x30
 8088a6a:	e7c2      	b.n	80889f2 <_ZN7FatFile5writeEPKvj+0x10e>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 8088a6c:	6921      	ldr	r1, [r4, #16]
 8088a6e:	68a0      	ldr	r0, [r4, #8]
 8088a70:	f000 f865 	bl	8088b3e <_ZNK9FatVolume17clusterStartBlockEm>
 8088a74:	4601      	mov	r1, r0
 8088a76:	e783      	b.n	8088980 <_ZN7FatFile5writeEPKvj+0x9c>
 8088a78:	20000fd4 	.word	0x20000fd4

08088a7c <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
 8088a7c:	f001 bcc4 	b.w	808a408 <HAL_Pin_Map>

08088a80 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8088a80:	b570      	push	{r4, r5, r6, lr}
 8088a82:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8088a84:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 8088a86:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 8088a88:	b149      	cbz	r1, 8088a9e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8088a8a:	f006 fcd7 	bl	808f43c <strlen>
 8088a8e:	682b      	ldr	r3, [r5, #0]
 8088a90:	4602      	mov	r2, r0
 8088a92:	4621      	mov	r1, r4
 8088a94:	4628      	mov	r0, r5
    }
 8088a96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 8088a9a:	68db      	ldr	r3, [r3, #12]
 8088a9c:	4718      	bx	r3
    }
 8088a9e:	bd70      	pop	{r4, r5, r6, pc}

08088aa0 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
 8088aa0:	f001 bcb2 	b.w	808a408 <HAL_Pin_Map>

08088aa4 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
 8088aa4:	f001 bcb0 	b.w	808a408 <HAL_Pin_Map>

08088aa8 <_ZN8FatCache4syncEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 8088aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
 8088aaa:	7803      	ldrb	r3, [r0, #0]

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 8088aac:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
 8088aae:	07da      	lsls	r2, r3, #31
 8088ab0:	d51e      	bpl.n	8088af0 <_ZN8FatCache4syncEv+0x48>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
 8088ab2:	6840      	ldr	r0, [r0, #4]
 8088ab4:	f104 060c 	add.w	r6, r4, #12
 8088ab8:	6803      	ldr	r3, [r0, #0]
 8088aba:	4632      	mov	r2, r6
 8088abc:	685b      	ldr	r3, [r3, #4]
 8088abe:	68a1      	ldr	r1, [r4, #8]
 8088ac0:	4798      	blx	r3
 8088ac2:	4605      	mov	r5, r0
 8088ac4:	b908      	cbnz	r0, 8088aca <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
 8088ac6:	2500      	movs	r5, #0
 8088ac8:	e013      	b.n	8088af2 <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
 8088aca:	7823      	ldrb	r3, [r4, #0]
 8088acc:	079b      	lsls	r3, r3, #30
 8088ace:	d404      	bmi.n	8088ada <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
 8088ad0:	7823      	ldrb	r3, [r4, #0]
 8088ad2:	f023 0301 	bic.w	r3, r3, #1
 8088ad6:	7023      	strb	r3, [r4, #0]
 8088ad8:	e00b      	b.n	8088af2 <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
 8088ada:	6860      	ldr	r0, [r4, #4]
      if (!m_vol->writeBlock(lbn, m_block.data)) {
 8088adc:	68a7      	ldr	r7, [r4, #8]
 8088ade:	6901      	ldr	r1, [r0, #16]
 8088ae0:	6803      	ldr	r3, [r0, #0]
 8088ae2:	4632      	mov	r2, r6
 8088ae4:	685b      	ldr	r3, [r3, #4]
 8088ae6:	4439      	add	r1, r7
 8088ae8:	4798      	blx	r3
 8088aea:	2800      	cmp	r0, #0
 8088aec:	d1f0      	bne.n	8088ad0 <_ZN8FatCache4syncEv+0x28>
 8088aee:	e7ea      	b.n	8088ac6 <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
 8088af0:	2501      	movs	r5, #1

fail:
  return false;
}
 8088af2:	4628      	mov	r0, r5
 8088af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08088af6 <_ZN8FatCache4readEmh>:
 * <http://www.gnu.org/licenses/>.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8088af6:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
 8088af8:	6883      	ldr	r3, [r0, #8]
 * <http://www.gnu.org/licenses/>.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8088afa:	4604      	mov	r4, r0
  if (m_lbn != lbn) {
 8088afc:	428b      	cmp	r3, r1
 * <http://www.gnu.org/licenses/>.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8088afe:	460e      	mov	r6, r1
 8088b00:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
 8088b02:	d014      	beq.n	8088b2e <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
 8088b04:	f7ff ffd0 	bl	8088aa8 <_ZN8FatCache4syncEv>
 8088b08:	b908      	cbnz	r0, 8088b0e <_ZN8FatCache4readEmh+0x18>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:
  return 0;
 8088b0a:	2000      	movs	r0, #0
 8088b0c:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
 8088b0e:	076b      	lsls	r3, r5, #29
 8088b10:	d503      	bpl.n	8088b1a <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
 8088b12:	2300      	movs	r3, #0
 8088b14:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
 8088b16:	60a6      	str	r6, [r4, #8]
 8088b18:	e009      	b.n	8088b2e <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
 8088b1a:	6860      	ldr	r0, [r4, #4]
 8088b1c:	f104 020c 	add.w	r2, r4, #12
 8088b20:	6803      	ldr	r3, [r0, #0]
 8088b22:	4631      	mov	r1, r6
 8088b24:	681b      	ldr	r3, [r3, #0]
 8088b26:	4798      	blx	r3
 8088b28:	2800      	cmp	r0, #0
 8088b2a:	d1f2      	bne.n	8088b12 <_ZN8FatCache4readEmh+0x1c>
 8088b2c:	e7ed      	b.n	8088b0a <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
 8088b2e:	4620      	mov	r0, r4
 8088b30:	7823      	ldrb	r3, [r4, #0]
 8088b32:	f005 0503 	and.w	r5, r5, #3
 8088b36:	431d      	orrs	r5, r3
 8088b38:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:
  return 0;
}
 8088b3c:	bd70      	pop	{r4, r5, r6, pc}

08088b3e <_ZNK9FatVolume17clusterStartBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
 8088b3e:	7983      	ldrb	r3, [r0, #6]
 8088b40:	3902      	subs	r1, #2
 8088b42:	6940      	ldr	r0, [r0, #20]
 8088b44:	4099      	lsls	r1, r3
}
 8088b46:	4408      	add	r0, r1
 8088b48:	4770      	bx	lr

08088b4a <_ZN9FatVolume6fatGetEmPm>:
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 8088b4a:	b570      	push	{r4, r5, r6, lr}
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8088b4c:	79c3      	ldrb	r3, [r0, #7]
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 8088b4e:	4605      	mov	r5, r0
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8088b50:	2b20      	cmp	r3, #32
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 8088b52:	460c      	mov	r4, r1
 8088b54:	4616      	mov	r6, r2
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8088b56:	d112      	bne.n	8088b7e <_ZN9FatVolume6fatGetEmPm+0x34>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
 8088b58:	6981      	ldr	r1, [r0, #24]
 8088b5a:	2202      	movs	r2, #2
 8088b5c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8088b60:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8088b64:	f7ff ffc7 	bl	8088af6 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8088b68:	b910      	cbnz	r0, 8088b70 <_ZN9FatVolume6fatGetEmPm+0x26>
  }
  *value = next;
  return 1;

fail:
  return -1;
 8088b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8088b6e:	bd70      	pop	{r4, r5, r6, pc}
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
 8088b70:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8088b74:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 8088b78:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
 8088b7c:	e00f      	b.n	8088b9e <_ZN9FatVolume6fatGetEmPm+0x54>
  }

  if (m_fatType == 16) {
 8088b7e:	2b10      	cmp	r3, #16
 8088b80:	d1f3      	bne.n	8088b6a <_ZN9FatVolume6fatGetEmPm+0x20>
 8088b82:	6983      	ldr	r3, [r0, #24]
 8088b84:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8088b88:	2202      	movs	r2, #2
 8088b8a:	4419      	add	r1, r3
 8088b8c:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8088b90:	f7ff ffb1 	bl	8088af6 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8088b94:	2800      	cmp	r0, #0
 8088b96:	d0e8      	beq.n	8088b6a <_ZN9FatVolume6fatGetEmPm+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
 8088b98:	b2e4      	uxtb	r4, r4
 8088b9a:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
 8088b9e:	69ea      	ldr	r2, [r5, #28]
 8088ba0:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
 8088ba2:	bf9a      	itte	ls
 8088ba4:	6033      	strls	r3, [r6, #0]
  return 1;
 8088ba6:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
 8088ba8:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
 8088baa:	bd70      	pop	{r4, r5, r6, pc}

08088bac <_ZN9FatVolume6fatPutEmm>:
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8088bac:	b538      	push	{r3, r4, r5, lr}
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8088bae:	79c3      	ldrb	r3, [r0, #7]
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8088bb0:	460c      	mov	r4, r1
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8088bb2:	2b20      	cmp	r3, #32
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8088bb4:	4615      	mov	r5, r2
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8088bb6:	d10f      	bne.n	8088bd8 <_ZN9FatVolume6fatPutEmm+0x2c>
 8088bb8:	6981      	ldr	r1, [r0, #24]
 8088bba:	2203      	movs	r2, #3
 8088bbc:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8088bc0:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8088bc4:	f7ff ff97 	bl	8088af6 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 8088bc8:	b908      	cbnz	r0, 8088bce <_ZN9FatVolume6fatPutEmm+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
 8088bca:	2000      	movs	r0, #0
 8088bcc:	bd38      	pop	{r3, r4, r5, pc}
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
 8088bce:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8088bd2:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
 8088bd6:	e00f      	b.n	8088bf8 <_ZN9FatVolume6fatPutEmm+0x4c>
    return true;
  }

  if (m_fatType == 16) {
 8088bd8:	2b10      	cmp	r3, #16
 8088bda:	d1f6      	bne.n	8088bca <_ZN9FatVolume6fatPutEmm+0x1e>
 8088bdc:	6983      	ldr	r3, [r0, #24]
 8088bde:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8088be2:	2203      	movs	r2, #3
 8088be4:	4419      	add	r1, r3
 8088be6:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8088bea:	f7ff ff84 	bl	8088af6 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 8088bee:	2800      	cmp	r0, #0
 8088bf0:	d0eb      	beq.n	8088bca <_ZN9FatVolume6fatPutEmm+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
 8088bf2:	b2e4      	uxtb	r4, r4
 8088bf4:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
 8088bf8:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
 8088bfa:	bd38      	pop	{r3, r4, r5, pc}

08088bfc <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 8088bfc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8088c00:	4605      	mov	r5, r0
 8088c02:	4690      	mov	r8, r2
  uint32_t find = current ? current : m_allocSearchStart;
 8088c04:	460f      	mov	r7, r1
 8088c06:	b909      	cbnz	r1, 8088c0c <_ZN9FatVolume15allocateClusterEmPm+0x10>
 8088c08:	68c6      	ldr	r6, [r0, #12]
 8088c0a:	e000      	b.n	8088c0e <_ZN9FatVolume15allocateClusterEmPm+0x12>
 8088c0c:	460e      	mov	r6, r1
 8088c0e:	4634      	mov	r4, r6
  uint32_t start = find;
  while (1) {
    find++;
    // If at end of FAT go to beginning of FAT.
    if (find > m_lastCluster) {
 8088c10:	69eb      	ldr	r3, [r5, #28]
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
  uint32_t find = current ? current : m_allocSearchStart;
  uint32_t start = find;
  while (1) {
    find++;
 8088c12:	3401      	adds	r4, #1
    // If at end of FAT go to beginning of FAT.
    if (find > m_lastCluster) {
      find = 2;
 8088c14:	429c      	cmp	r4, r3
 8088c16:	bf88      	it	hi
 8088c18:	2402      	movhi	r4, #2
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
 8088c1a:	aa01      	add	r2, sp, #4
 8088c1c:	4621      	mov	r1, r4
 8088c1e:	4628      	mov	r0, r5
 8088c20:	f7ff ff93 	bl	8088b4a <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 8088c24:	2800      	cmp	r0, #0
 8088c26:	db0d      	blt.n	8088c44 <_ZN9FatVolume15allocateClusterEmPm+0x48>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
 8088c28:	d001      	beq.n	8088c2e <_ZN9FatVolume15allocateClusterEmPm+0x32>
 8088c2a:	9b01      	ldr	r3, [sp, #4]
 8088c2c:	b113      	cbz	r3, 8088c34 <_ZN9FatVolume15allocateClusterEmPm+0x38>
      break;
    }
    if (find == start) {
 8088c2e:	42b4      	cmp	r4, r6
 8088c30:	d1ee      	bne.n	8088c10 <_ZN9FatVolume15allocateClusterEmPm+0x14>
 8088c32:	e007      	b.n	8088c44 <_ZN9FatVolume15allocateClusterEmPm+0x48>
  }
  uint32_t clusterStartBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
 8088c34:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8088c38:	4621      	mov	r1, r4
 8088c3a:	4628      	mov	r0, r5
 8088c3c:	f7ff ffb6 	bl	8088bac <_ZN9FatVolume6fatPutEmm>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // mark end of chain
  if (!fatPutEOC(find)) {
 8088c40:	4606      	mov	r6, r0
 8088c42:	b908      	cbnz	r0, 8088c48 <_ZN9FatVolume15allocateClusterEmPm+0x4c>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
 8088c44:	2600      	movs	r6, #0
 8088c46:	e010      	b.n	8088c6a <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // mark end of chain
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
 8088c48:	b137      	cbz	r7, 8088c58 <_ZN9FatVolume15allocateClusterEmPm+0x5c>
    // link clusters
    if (!fatPut(current, find)) {
 8088c4a:	4622      	mov	r2, r4
 8088c4c:	4639      	mov	r1, r7
 8088c4e:	4628      	mov	r0, r5
 8088c50:	f7ff ffac 	bl	8088bac <_ZN9FatVolume6fatPutEmm>
 8088c54:	b908      	cbnz	r0, 8088c5a <_ZN9FatVolume15allocateClusterEmPm+0x5e>
 8088c56:	e7f5      	b.n	8088c44 <_ZN9FatVolume15allocateClusterEmPm+0x48>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // Remember place for search start.
    m_allocSearchStart = find;
 8088c58:	60ec      	str	r4, [r5, #12]
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
 8088c5a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8088c5c:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
 8088c5e:	bfa4      	itt	ge
 8088c60:	f103 33ff 	addge.w	r3, r3, #4294967295
 8088c64:	626b      	strge	r3, [r5, #36]	; 0x24
  }
  updateFreeClusterCount(-1);
  *next = find;
 8088c66:	f8c8 4000 	str.w	r4, [r8]
  return true;

fail:
  return false;
}
 8088c6a:	4630      	mov	r0, r6
 8088c6c:	b002      	add	sp, #8
 8088c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08088c72 <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
 8088c72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8088c74:	4604      	mov	r4, r0
 8088c76:	460d      	mov	r5, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
 8088c78:	aa01      	add	r2, sp, #4
 8088c7a:	4629      	mov	r1, r5
 8088c7c:	4620      	mov	r0, r4
 8088c7e:	f7ff ff64 	bl	8088b4a <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 8088c82:	1e06      	subs	r6, r0, #0
 8088c84:	da01      	bge.n	8088c8a <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
 8088c86:	2000      	movs	r0, #0
 8088c88:	e012      	b.n	8088cb0 <_ZN9FatVolume9freeChainEm+0x3e>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
 8088c8a:	2200      	movs	r2, #0
 8088c8c:	4629      	mov	r1, r5
 8088c8e:	4620      	mov	r0, r4
 8088c90:	f7ff ff8c 	bl	8088bac <_ZN9FatVolume6fatPutEmm>
 8088c94:	2800      	cmp	r0, #0
 8088c96:	d0f6      	beq.n	8088c86 <_ZN9FatVolume9freeChainEm+0x14>
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
 8088c98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8088c9a:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
 8088c9c:	bfa4      	itt	ge
 8088c9e:	3301      	addge	r3, #1
 8088ca0:	6263      	strge	r3, [r4, #36]	; 0x24
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster < m_allocSearchStart) {
 8088ca2:	68e3      	ldr	r3, [r4, #12]
 8088ca4:	429d      	cmp	r5, r3
      m_allocSearchStart = cluster;
 8088ca6:	bf38      	it	cc
 8088ca8:	60e5      	strcc	r5, [r4, #12]
    }
    cluster = next;
 8088caa:	9d01      	ldr	r5, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
 8088cac:	2e00      	cmp	r6, #0
 8088cae:	d1e3      	bne.n	8088c78 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
 8088cb0:	b002      	add	sp, #8
 8088cb2:	bd70      	pop	{r4, r5, r6, pc}

08088cb4 <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
 8088cb4:	b570      	push	{r4, r5, r6, lr}
 8088cb6:	4604      	mov	r4, r0
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
 8088cb8:	2301      	movs	r3, #1
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
 8088cba:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
 8088cbc:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 8088cbe:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
 8088cc2:	71c2      	strb	r2, [r0, #7]
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE

  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
 8088cc4:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
 8088cc6:	62e0      	str	r0, [r4, #44]	; 0x2c
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8088cc8:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 8088ccc:	6303      	str	r3, [r0, #48]	; 0x30
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
 8088cce:	f8c4 0238 	str.w	r0, [r4, #568]	; 0x238
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8088cd2:	f880 2234 	strb.w	r2, [r0, #564]	; 0x234
    m_lbn = 0XFFFFFFFF;
 8088cd6:	f8c0 323c 	str.w	r3, [r0, #572]	; 0x23c
 8088cda:	b1a1      	cbz	r1, 8088d06 <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
 8088cdc:	2904      	cmp	r1, #4
 8088cde:	d860      	bhi.n	8088da2 <_ZN9FatVolume4initEh+0xee>
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8088ce0:	4611      	mov	r1, r2
 8088ce2:	3028      	adds	r0, #40	; 0x28
 8088ce4:	f7ff ff07 	bl	8088af6 <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8088ce8:	2800      	cmp	r0, #0
 8088cea:	d05a      	beq.n	8088da2 <_ZN9FatVolume4initEh+0xee>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
 8088cec:	eb00 1305 	add.w	r3, r0, r5, lsl #4
 8088cf0:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 8088cf4:	065b      	lsls	r3, r3, #25
 8088cf6:	d154      	bne.n	8088da2 <_ZN9FatVolume4initEh+0xee>
 8088cf8:	351b      	adds	r5, #27
 8088cfa:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 8088cfe:	f8d5 5006 	ldr.w	r5, [r5, #6]
 8088d02:	2d00      	cmp	r5, #0
 8088d04:	d04d      	beq.n	8088da2 <_ZN9FatVolume4initEh+0xee>
 8088d06:	2200      	movs	r2, #0
 8088d08:	4629      	mov	r1, r5
 8088d0a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8088d0e:	f7ff fef2 	bl	8088af6 <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
 8088d12:	2800      	cmp	r0, #0
 8088d14:	d045      	beq.n	8088da2 <_ZN9FatVolume4initEh+0xee>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
 8088d16:	f8b0 300b 	ldrh.w	r3, [r0, #11]
 8088d1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8088d1e:	d140      	bne.n	8088da2 <_ZN9FatVolume4initEh+0xee>
 8088d20:	7c03      	ldrb	r3, [r0, #16]
 8088d22:	2b02      	cmp	r3, #2
 8088d24:	d13d      	bne.n	8088da2 <_ZN9FatVolume4initEh+0xee>
      fbs->fatCount != 2 ||
 8088d26:	89c3      	ldrh	r3, [r0, #14]
 8088d28:	2b00      	cmp	r3, #0
 8088d2a:	d03a      	beq.n	8088da2 <_ZN9FatVolume4initEh+0xee>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
 8088d2c:	7b41      	ldrb	r1, [r0, #13]
  m_clusterBlockMask = m_blocksPerCluster - 1;

  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
 8088d2e:	2609      	movs	r6, #9
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
 8088d30:	1e4b      	subs	r3, r1, #1
 8088d32:	7163      	strb	r3, [r4, #5]

  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
 8088d34:	2300      	movs	r3, #0
 8088d36:	71a3      	strb	r3, [r4, #6]
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
 8088d38:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;

  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8088d3a:	2301      	movs	r3, #1
 8088d3c:	428b      	cmp	r3, r1
 8088d3e:	d007      	beq.n	8088d50 <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
 8088d40:	3e01      	subs	r6, #1
 8088d42:	d02e      	beq.n	8088da2 <_ZN9FatVolume4initEh+0xee>
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;

  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8088d44:	79a2      	ldrb	r2, [r4, #6]
 8088d46:	005b      	lsls	r3, r3, #1
 8088d48:	3201      	adds	r2, #1
 8088d4a:	b2db      	uxtb	r3, r3
 8088d4c:	71a2      	strb	r2, [r4, #6]
 8088d4e:	e7f5      	b.n	8088d3c <_ZN9FatVolume4initEh+0x88>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_blocksPerFat = fbs->sectorsPerFat16 ?
 8088d50:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
 8088d52:	b902      	cbnz	r2, 8088d56 <_ZN9FatVolume4initEh+0xa2>
 8088d54:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8088d56:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
 8088d58:	89c6      	ldrh	r6, [r0, #14]
 8088d5a:	442e      	add	r6, r5
 8088d5c:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 8088d5e:	f8b0 3011 	ldrh.w	r3, [r0, #17]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 8088d62:	eb06 0142 	add.w	r1, r6, r2, lsl #1
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 8088d66:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 8088d68:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
 8088d6a:	f8b0 2011 	ldrh.w	r2, [r0, #17]
 8088d6e:	0152      	lsls	r2, r2, #5
 8088d70:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
 8088d74:	eb01 2262 	add.w	r2, r1, r2, asr #9
 8088d78:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
 8088d7a:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
 8088d7e:	b903      	cbnz	r3, 8088d82 <_ZN9FatVolume4initEh+0xce>
 8088d80:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
 8088d82:	1aad      	subs	r5, r5, r2
 8088d84:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
 8088d86:	79a5      	ldrb	r5, [r4, #6]
 8088d88:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
 8088d8c:	1c6b      	adds	r3, r5, #1
 8088d8e:	61e3      	str	r3, [r4, #28]
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
#if MAINTAIN_FREE_CLUSTER_COUNT
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
 8088d90:	f04f 33ff 	mov.w	r3, #4294967295
 8088d94:	6263      	str	r3, [r4, #36]	; 0x24

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);

  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
 8088d96:	f640 73f4 	movw	r3, #4084	; 0xff4
 8088d9a:	429d      	cmp	r5, r3
 8088d9c:	d803      	bhi.n	8088da6 <_ZN9FatVolume4initEh+0xf2>
    m_fatType = 12;
 8088d9e:	230c      	movs	r3, #12
 8088da0:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
 8088da2:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
 8088da4:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
 8088da6:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8088daa:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
 8088dac:	bf89      	itett	hi
 8088dae:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
 8088db0:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
 8088db2:	6223      	strhi	r3, [r4, #32]
    m_fatType = 32;
 8088db4:	2320      	movhi	r3, #32
 8088db6:	71e3      	strb	r3, [r4, #7]
  }
  return true;
 8088db8:	2001      	movs	r0, #1

fail:
  return false;
}
 8088dba:	bd70      	pop	{r4, r5, r6, pc}

08088dbc <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
 8088dbc:	f001 bb24 	b.w	808a408 <HAL_Pin_Map>

08088dc0 <_GLOBAL__sub_I__ZN9SdFatBase9errorHaltEP5Print>:
 8088dc0:	f001 bb22 	b.w	808a408 <HAL_Pin_Map>

08088dc4 <_ZL10delay_msecm>:
  return reply;
}


static void delay_msec(uint32_t ms){
  delay(ms);
 8088dc4:	f002 bfca 	b.w	808bd5c <delay>

08088dc8 <_ZL9i2c_writehhPht>:
/**************************************************************************/
/*!
    @brief  Writes 8 bit values over I2C
*/
/**************************************************************************/
int8_t i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8088dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8088dca:	4607      	mov	r7, r0
 8088dcc:	4614      	mov	r4, r2
 8088dce:	461d      	mov	r5, r3
 8088dd0:	460e      	mov	r6, r1
#ifdef BME680_DEBUG
  Serial.print("\tI2C $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif
  Wire.beginTransmission((uint8_t)dev_id);
 8088dd2:	f004 f8a3 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8088dd6:	4639      	mov	r1, r7
 8088dd8:	f003 fe72 	bl	808cac0 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((uint8_t)reg_addr);
 8088ddc:	f004 f89e 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8088de0:	6803      	ldr	r3, [r0, #0]
 8088de2:	4631      	mov	r1, r6
 8088de4:	689b      	ldr	r3, [r3, #8]
 8088de6:	4798      	blx	r3
 8088de8:	4425      	add	r5, r4
  while (len--) {
 8088dea:	42ac      	cmp	r4, r5
 8088dec:	d007      	beq.n	8088dfe <_ZL9i2c_writehhPht+0x36>
    Wire.write(*reg_data);
 8088dee:	f004 f895 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8088df2:	6803      	ldr	r3, [r0, #0]
 8088df4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8088df8:	689b      	ldr	r3, [r3, #8]
 8088dfa:	4798      	blx	r3
#ifdef BME680_DEBUG
  Serial.print("\tI2C $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif
  Wire.beginTransmission((uint8_t)dev_id);
  Wire.write((uint8_t)reg_addr);
  while (len--) {
 8088dfc:	e7f5      	b.n	8088dea <_ZL9i2c_writehhPht+0x22>
#ifdef BME680_DEBUG
    Serial.print("0x"); Serial.print(*reg_data, HEX); Serial.print(", ");
#endif
    reg_data++;
  }
  Wire.endTransmission();
 8088dfe:	f004 f88d 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8088e02:	f003 fe68 	bl	808cad6 <_ZN7TwoWire15endTransmissionEv>
#ifdef BME680_DEBUG
  Serial.println("");
#endif
  return 0;
}
 8088e06:	2000      	movs	r0, #0
 8088e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08088e0c <_ZL12spi_transferh>:
#endif
  return 0;
}


static uint8_t spi_transfer(uint8_t x) {
 8088e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (_BME680_SoftwareSPI_SCK == -1)
 8088e10:	4d1b      	ldr	r5, [pc, #108]	; (8088e80 <_ZL12spi_transferh+0x74>)
#endif
  return 0;
}


static uint8_t spi_transfer(uint8_t x) {
 8088e12:	4680      	mov	r8, r0
  if (_BME680_SoftwareSPI_SCK == -1)
 8088e14:	f995 3000 	ldrsb.w	r3, [r5]
 8088e18:	3301      	adds	r3, #1
 8088e1a:	d105      	bne.n	8088e28 <_ZL12spi_transferh+0x1c>
    return SPI.transfer(x);
 8088e1c:	4601      	mov	r1, r0
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
      reply |= 1;
  }
  return reply;
}
 8088e1e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
}


static uint8_t spi_transfer(uint8_t x) {
  if (_BME680_SoftwareSPI_SCK == -1)
    return SPI.transfer(x);
 8088e22:	4818      	ldr	r0, [pc, #96]	; (8088e84 <_ZL12spi_transferh+0x78>)
 8088e24:	f002 b824 	b.w	808ae70 <_ZN8SPIClass8transferEh>
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
 8088e28:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8088e88 <_ZL12spi_transferh+0x7c>
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
 8088e2c:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8088e8c <_ZL12spi_transferh+0x80>
 8088e30:	2607      	movs	r6, #7
 8088e32:	2400      	movs	r4, #0
  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
 8088e34:	f995 0000 	ldrsb.w	r0, [r5]
 8088e38:	2100      	movs	r1, #0
 8088e3a:	b280      	uxth	r0, r0
 8088e3c:	f003 ffd1 	bl	808cde2 <digitalWrite>
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
 8088e40:	2701      	movs	r7, #1
 8088e42:	f999 0000 	ldrsb.w	r0, [r9]
 8088e46:	fa07 f106 	lsl.w	r1, r7, r6
 8088e4a:	ea01 0108 	and.w	r1, r1, r8
 8088e4e:	b280      	uxth	r0, r0
 8088e50:	f003 ffc7 	bl	808cde2 <digitalWrite>
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
 8088e54:	f995 0000 	ldrsb.w	r0, [r5]
 8088e58:	4639      	mov	r1, r7
 8088e5a:	b280      	uxth	r0, r0
 8088e5c:	f003 ffc1 	bl	808cde2 <digitalWrite>
    if (digitalRead(_BME680_SoftwareSPI_MISO))
 8088e60:	f99a 0000 	ldrsb.w	r0, [sl]

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
 8088e64:	0064      	lsls	r4, r4, #1
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
 8088e66:	b280      	uxth	r0, r0

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
 8088e68:	b2e4      	uxtb	r4, r4
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
 8088e6a:	f003 ffd3 	bl	808ce14 <digitalRead>
 8088e6e:	b100      	cbz	r0, 8088e72 <_ZL12spi_transferh+0x66>
      reply |= 1;
 8088e70:	433c      	orrs	r4, r7
    return SPI.transfer(x);

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
 8088e72:	f116 36ff 	adds.w	r6, r6, #4294967295
 8088e76:	d2dd      	bcs.n	8088e34 <_ZL12spi_transferh+0x28>
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
      reply |= 1;
  }
  return reply;
}
 8088e78:	4620      	mov	r0, r4
 8088e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8088e7e:	bf00      	nop
 8088e80:	20000fdd 	.word	0x20000fdd
 8088e84:	20001608 	.word	0x20001608
 8088e88:	20000fde 	.word	0x20000fde
 8088e8c:	20000fdc 	.word	0x20000fdc

08088e90 <_ZL9spi_writehhPht>:
/**************************************************************************/
/*!
    @brief  Writes 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_write(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8088e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8088e92:	460f      	mov	r7, r1
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif

  digitalWrite(cspin, LOW);
 8088e94:	2100      	movs	r1, #0
/**************************************************************************/
/*!
    @brief  Writes 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_write(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8088e96:	461d      	mov	r5, r3
 8088e98:	4614      	mov	r4, r2
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif

  digitalWrite(cspin, LOW);
 8088e9a:	4606      	mov	r6, r0
 8088e9c:	f003 ffa1 	bl	808cde2 <digitalWrite>

  // If hardware SPI we should use transactions!
  if (_BME680_SoftwareSPI_SCK == -1) {
 8088ea0:	4b12      	ldr	r3, [pc, #72]	; (8088eec <_ZL9spi_writehhPht+0x5c>)
 8088ea2:	f993 3000 	ldrsb.w	r3, [r3]
 8088ea6:	3301      	adds	r3, #1
 8088ea8:	d10e      	bne.n	8088ec8 <_ZL9spi_writehhPht+0x38>
    SPI.begin();
 8088eaa:	4811      	ldr	r0, [pc, #68]	; (8088ef0 <_ZL9spi_writehhPht+0x60>)
 8088eac:	f001 ff74 	bl	808ad98 <_ZN8SPIClass5beginEv>
    SPI.setClockDivider(BME680_DEFAULT_SPIFREQ);
 8088eb0:	2140      	movs	r1, #64	; 0x40
 8088eb2:	480f      	ldr	r0, [pc, #60]	; (8088ef0 <_ZL9spi_writehhPht+0x60>)
 8088eb4:	f001 ffc8 	bl	808ae48 <_ZN8SPIClass15setClockDividerEh>
    SPI.setBitOrder(MSBFIRST);
 8088eb8:	2101      	movs	r1, #1
 8088eba:	480d      	ldr	r0, [pc, #52]	; (8088ef0 <_ZL9spi_writehhPht+0x60>)
 8088ebc:	f001 ff77 	bl	808adae <_ZN8SPIClass11setBitOrderEh>
    SPI.setDataMode(SPI_MODE0);
 8088ec0:	2100      	movs	r1, #0
 8088ec2:	480b      	ldr	r0, [pc, #44]	; (8088ef0 <_ZL9spi_writehhPht+0x60>)
 8088ec4:	f001 ff76 	bl	808adb4 <_ZN8SPIClass11setDataModeEh>
    // SPI.beginTransaction(SPISettings(BME680_DEFAULT_SPIFREQ, MSBFIRST, SPI_MODE0));
  }

  spi_transfer(reg_addr);
 8088ec8:	4638      	mov	r0, r7
 8088eca:	f7ff ff9f 	bl	8088e0c <_ZL12spi_transferh>
 8088ece:	4425      	add	r5, r4
  while (len--) {
 8088ed0:	42ac      	cmp	r4, r5
 8088ed2:	d004      	beq.n	8088ede <_ZL9spi_writehhPht+0x4e>
    spi_transfer(*reg_data);
 8088ed4:	f814 0b01 	ldrb.w	r0, [r4], #1
 8088ed8:	f7ff ff98 	bl	8088e0c <_ZL12spi_transferh>
    SPI.setDataMode(SPI_MODE0);
    // SPI.beginTransaction(SPISettings(BME680_DEFAULT_SPIFREQ, MSBFIRST, SPI_MODE0));
  }

  spi_transfer(reg_addr);
  while (len--) {
 8088edc:	e7f8      	b.n	8088ed0 <_ZL9spi_writehhPht+0x40>

  if (_BME680_SoftwareSPI_SCK == -1) {
    //SPI.endTransaction();
  }

  digitalWrite(cspin, HIGH);
 8088ede:	4630      	mov	r0, r6
 8088ee0:	2101      	movs	r1, #1
 8088ee2:	f003 ff7e 	bl	808cde2 <digitalWrite>

#ifdef BME680_DEBUG
  Serial.println("");
#endif
  return 0;
}
 8088ee6:	2000      	movs	r0, #0
 8088ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8088eea:	bf00      	nop
 8088eec:	20000fdd 	.word	0x20000fdd
 8088ef0:	20001608 	.word	0x20001608

08088ef4 <_ZL8spi_readhhPht>:
/**************************************************************************/
/*!
    @brief  Reads 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_read(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8088ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8088ef6:	460f      	mov	r7, r1
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" => ");
#endif

  digitalWrite(cspin, LOW);
 8088ef8:	2100      	movs	r1, #0
/**************************************************************************/
/*!
    @brief  Reads 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_read(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8088efa:	461d      	mov	r5, r3
 8088efc:	4614      	mov	r4, r2
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" => ");
#endif

  digitalWrite(cspin, LOW);
 8088efe:	4606      	mov	r6, r0
 8088f00:	f003 ff6f 	bl	808cde2 <digitalWrite>

  // If hardware SPI we should use transactions!
  if (_BME680_SoftwareSPI_SCK == -1) {
 8088f04:	4b12      	ldr	r3, [pc, #72]	; (8088f50 <_ZL8spi_readhhPht+0x5c>)
 8088f06:	f993 3000 	ldrsb.w	r3, [r3]
 8088f0a:	3301      	adds	r3, #1
 8088f0c:	d10e      	bne.n	8088f2c <_ZL8spi_readhhPht+0x38>
    SPI.begin();
 8088f0e:	4811      	ldr	r0, [pc, #68]	; (8088f54 <_ZL8spi_readhhPht+0x60>)
 8088f10:	f001 ff42 	bl	808ad98 <_ZN8SPIClass5beginEv>
    SPI.setClockDivider(BME680_DEFAULT_SPIFREQ);
 8088f14:	2140      	movs	r1, #64	; 0x40
 8088f16:	480f      	ldr	r0, [pc, #60]	; (8088f54 <_ZL8spi_readhhPht+0x60>)
 8088f18:	f001 ff96 	bl	808ae48 <_ZN8SPIClass15setClockDividerEh>
    SPI.setBitOrder(MSBFIRST);
 8088f1c:	2101      	movs	r1, #1
 8088f1e:	480d      	ldr	r0, [pc, #52]	; (8088f54 <_ZL8spi_readhhPht+0x60>)
 8088f20:	f001 ff45 	bl	808adae <_ZN8SPIClass11setBitOrderEh>
    SPI.setDataMode(SPI_MODE0);
 8088f24:	2100      	movs	r1, #0
 8088f26:	480b      	ldr	r0, [pc, #44]	; (8088f54 <_ZL8spi_readhhPht+0x60>)
 8088f28:	f001 ff44 	bl	808adb4 <_ZN8SPIClass11setDataModeEh>
    // SPI.beginTransaction(SPISettings(BME680_DEFAULT_SPIFREQ, MSBFIRST, SPI_MODE0));
  }

  spi_transfer(reg_addr);
 8088f2c:	4638      	mov	r0, r7
 8088f2e:	f7ff ff6d 	bl	8088e0c <_ZL12spi_transferh>
 8088f32:	4425      	add	r5, r4

  while (len--) {
 8088f34:	42ac      	cmp	r4, r5
 8088f36:	d005      	beq.n	8088f44 <_ZL8spi_readhhPht+0x50>
    *reg_data = spi_transfer(0x00);
 8088f38:	2000      	movs	r0, #0
 8088f3a:	f7ff ff67 	bl	8088e0c <_ZL12spi_transferh>
 8088f3e:	f804 0b01 	strb.w	r0, [r4], #1
    // SPI.beginTransaction(SPISettings(BME680_DEFAULT_SPIFREQ, MSBFIRST, SPI_MODE0));
  }

  spi_transfer(reg_addr);

  while (len--) {
 8088f42:	e7f7      	b.n	8088f34 <_ZL8spi_readhhPht+0x40>

  if (_BME680_SoftwareSPI_SCK == -1) {
    //SPI.endTransaction();
  }

  digitalWrite(cspin, HIGH);
 8088f44:	4630      	mov	r0, r6
 8088f46:	2101      	movs	r1, #1
 8088f48:	f003 ff4b 	bl	808cde2 <digitalWrite>

#ifdef BME680_DEBUG
  Serial.println("");
#endif
  return 0;
}
 8088f4c:	2000      	movs	r0, #0
 8088f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8088f50:	20000fdd 	.word	0x20000fdd
 8088f54:	20001608 	.word	0x20001608

08088f58 <_ZL8i2c_readhhPht>:
/**************************************************************************/
/*!
    @brief  Reads 8 bit values over I2C
*/
/**************************************************************************/
int8_t i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8088f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8088f5a:	4604      	mov	r4, r0
 8088f5c:	4615      	mov	r5, r2
 8088f5e:	461e      	mov	r6, r3
 8088f60:	460f      	mov	r7, r1
#ifdef BME680_DEBUG
  Serial.print("\tI2C $"); Serial.print(reg_addr, HEX); Serial.print(" => ");
#endif

  Wire.beginTransmission((uint8_t)dev_id);
 8088f62:	f003 ffdb 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8088f66:	4621      	mov	r1, r4
 8088f68:	f003 fdaa 	bl	808cac0 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((uint8_t)reg_addr);
 8088f6c:	f003 ffd6 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8088f70:	6803      	ldr	r3, [r0, #0]
 8088f72:	4639      	mov	r1, r7
 8088f74:	689b      	ldr	r3, [r3, #8]
 8088f76:	4798      	blx	r3
  Wire.endTransmission();
 8088f78:	f003 ffd0 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8088f7c:	f003 fdab 	bl	808cad6 <_ZN7TwoWire15endTransmissionEv>
  if (len != Wire.requestFrom((uint8_t)dev_id, (byte)len)) {
 8088f80:	f003 ffcc 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8088f84:	4621      	mov	r1, r4
 8088f86:	b2f2      	uxtb	r2, r6
 8088f88:	f003 fd8d 	bl	808caa6 <_ZN7TwoWire11requestFromEhh>
 8088f8c:	b284      	uxth	r4, r0
 8088f8e:	42a6      	cmp	r6, r4
 8088f90:	d10d      	bne.n	8088fae <_ZL8i2c_readhhPht+0x56>
#ifdef BME680_DEBUG
    Serial.print("Failed to read "); Serial.print(len); Serial.print(" bytes from "); Serial.println(dev_id, HEX);
#endif
    return 1;
  }
  while (len--) {
 8088f92:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8088f96:	3c01      	subs	r4, #1
 8088f98:	b2a4      	uxth	r4, r4
 8088f9a:	42b4      	cmp	r4, r6
 8088f9c:	d009      	beq.n	8088fb2 <_ZL8i2c_readhhPht+0x5a>
    *reg_data = (uint8_t)Wire.read();
 8088f9e:	f003 ffbd 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8088fa2:	6803      	ldr	r3, [r0, #0]
 8088fa4:	695b      	ldr	r3, [r3, #20]
 8088fa6:	4798      	blx	r3
 8088fa8:	f805 0b01 	strb.w	r0, [r5], #1
 8088fac:	e7f3      	b.n	8088f96 <_ZL8i2c_readhhPht+0x3e>
  Wire.endTransmission();
  if (len != Wire.requestFrom((uint8_t)dev_id, (byte)len)) {
#ifdef BME680_DEBUG
    Serial.print("Failed to read "); Serial.print(len); Serial.print(" bytes from "); Serial.println(dev_id, HEX);
#endif
    return 1;
 8088fae:	2001      	movs	r0, #1
 8088fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  while (len--) {
 8088fb2:	2000      	movs	r0, #0
  }
#ifdef BME680_DEBUG
  Serial.println("");
#endif
  return 0;
}
 8088fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08088fb8 <_ZN15Adafruit_BME680C1Ea>:
    @brief  Instantiates sensor with Hardware SPI or I2C.
    @param  cspin SPI chip select. If not passed in, I2C will be used
*/
/**************************************************************************/
Adafruit_BME680::Adafruit_BME680(int8_t cspin)
  : _cs(cspin)
 8088fb8:	7701      	strb	r1, [r0, #28]
{
  _BME680_SoftwareSPI_MOSI = -1;
 8088fba:	4907      	ldr	r1, [pc, #28]	; (8088fd8 <_ZN15Adafruit_BME680C1Ea+0x20>)
 8088fbc:	22ff      	movs	r2, #255	; 0xff
 8088fbe:	700a      	strb	r2, [r1, #0]
  _BME680_SoftwareSPI_MISO = -1;
 8088fc0:	4906      	ldr	r1, [pc, #24]	; (8088fdc <_ZN15Adafruit_BME680C1Ea+0x24>)
 8088fc2:	700a      	strb	r2, [r1, #0]
  _BME680_SoftwareSPI_SCK = -1;
 8088fc4:	4906      	ldr	r1, [pc, #24]	; (8088fe0 <_ZN15Adafruit_BME680C1Ea+0x28>)
 8088fc6:	700a      	strb	r2, [r1, #0]
  _filterEnabled = _tempEnabled = _humEnabled = _presEnabled = _gasEnabled = false;
 8088fc8:	2200      	movs	r2, #0
 8088fca:	7502      	strb	r2, [r0, #20]
 8088fcc:	74c2      	strb	r2, [r0, #19]
 8088fce:	7482      	strb	r2, [r0, #18]
 8088fd0:	7442      	strb	r2, [r0, #17]
 8088fd2:	7402      	strb	r2, [r0, #16]
}
 8088fd4:	4770      	bx	lr
 8088fd6:	bf00      	nop
 8088fd8:	20000fde 	.word	0x20000fde
 8088fdc:	20000fdc 	.word	0x20000fdc
 8088fe0:	20000fdd 	.word	0x20000fdd

08088fe4 <_ZN15Adafruit_BME6805beginEh>:

    @param  addr Optional parameter for the I2C address of BME680. Default is 0x77
    @return True on sensor initialization success. False on failure.
*/
/**************************************************************************/
bool Adafruit_BME680::begin(uint8_t addr) {
 8088fe4:	b538      	push	{r3, r4, r5, lr}
 8088fe6:	4604      	mov	r4, r0
  _i2caddr = addr;
 8088fe8:	7561      	strb	r1, [r4, #21]

  if (_cs == -1) {
 8088fea:	f990 001c 	ldrsb.w	r0, [r0, #28]

    @param  addr Optional parameter for the I2C address of BME680. Default is 0x77
    @return True on sensor initialization success. False on failure.
*/
/**************************************************************************/
bool Adafruit_BME680::begin(uint8_t addr) {
 8088fee:	460d      	mov	r5, r1
  _i2caddr = addr;

  if (_cs == -1) {
 8088ff0:	1c42      	adds	r2, r0, #1
 8088ff2:	d10c      	bne.n	808900e <_ZN15Adafruit_BME6805beginEh+0x2a>
    // i2c
    Wire.begin();
 8088ff4:	f003 ff92 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8088ff8:	f003 fd46 	bl	808ca88 <_ZN7TwoWire5beginEv>

    gas_sensor.dev_id = addr;
    gas_sensor.intf = BME680_I2C_INTF;
 8088ffc:	2301      	movs	r3, #1
 8088ffe:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    gas_sensor.read = &i2c_read;
 8089002:	4b2d      	ldr	r3, [pc, #180]	; (80890b8 <_ZN15Adafruit_BME6805beginEh+0xd4>)

  if (_cs == -1) {
    // i2c
    Wire.begin();

    gas_sensor.dev_id = addr;
 8089004:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
    gas_sensor.intf = BME680_I2C_INTF;
    gas_sensor.read = &i2c_read;
 8089008:	66a3      	str	r3, [r4, #104]	; 0x68
    gas_sensor.write = &i2c_write;
 808900a:	4b2c      	ldr	r3, [pc, #176]	; (80890bc <_ZN15Adafruit_BME6805beginEh+0xd8>)
 808900c:	e02d      	b.n	808906a <_ZN15Adafruit_BME6805beginEh+0x86>
  } else {
    digitalWrite(_cs, HIGH);
 808900e:	2101      	movs	r1, #1
 8089010:	b280      	uxth	r0, r0
 8089012:	f003 fee6 	bl	808cde2 <digitalWrite>
    pinMode(_cs, OUTPUT);
 8089016:	f994 001c 	ldrsb.w	r0, [r4, #28]
 808901a:	2101      	movs	r1, #1
 808901c:	b280      	uxth	r0, r0
 808901e:	f003 fecf 	bl	808cdc0 <pinMode>

    if (_BME680_SoftwareSPI_SCK == -1) {
 8089022:	4b27      	ldr	r3, [pc, #156]	; (80890c0 <_ZN15Adafruit_BME6805beginEh+0xdc>)
 8089024:	f993 0000 	ldrsb.w	r0, [r3]
 8089028:	1c43      	adds	r3, r0, #1
 808902a:	d103      	bne.n	8089034 <_ZN15Adafruit_BME6805beginEh+0x50>
      // hardware SPI
      SPI.begin();
 808902c:	4825      	ldr	r0, [pc, #148]	; (80890c4 <_ZN15Adafruit_BME6805beginEh+0xe0>)
 808902e:	f001 feb3 	bl	808ad98 <_ZN8SPIClass5beginEv>
 8089032:	e011      	b.n	8089058 <_ZN15Adafruit_BME6805beginEh+0x74>
    } else {
      // software SPI
      pinMode(_BME680_SoftwareSPI_SCK, OUTPUT);
 8089034:	2101      	movs	r1, #1
 8089036:	b280      	uxth	r0, r0
 8089038:	f003 fec2 	bl	808cdc0 <pinMode>
      pinMode(_BME680_SoftwareSPI_MOSI, OUTPUT);
 808903c:	4b22      	ldr	r3, [pc, #136]	; (80890c8 <_ZN15Adafruit_BME6805beginEh+0xe4>)
 808903e:	2101      	movs	r1, #1
 8089040:	f993 0000 	ldrsb.w	r0, [r3]
 8089044:	b280      	uxth	r0, r0
 8089046:	f003 febb 	bl	808cdc0 <pinMode>
      pinMode(_BME680_SoftwareSPI_MISO, INPUT);
 808904a:	4b20      	ldr	r3, [pc, #128]	; (80890cc <_ZN15Adafruit_BME6805beginEh+0xe8>)
 808904c:	2100      	movs	r1, #0
 808904e:	f993 0000 	ldrsb.w	r0, [r3]
 8089052:	b280      	uxth	r0, r0
 8089054:	f003 feb4 	bl	808cdc0 <pinMode>
    }

    gas_sensor.dev_id = _cs;
 8089058:	7f23      	ldrb	r3, [r4, #28]
 808905a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    gas_sensor.intf = BME680_SPI_INTF;
 808905e:	2300      	movs	r3, #0
 8089060:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    gas_sensor.read = &spi_read;
 8089064:	4b1a      	ldr	r3, [pc, #104]	; (80890d0 <_ZN15Adafruit_BME6805beginEh+0xec>)
 8089066:	66a3      	str	r3, [r4, #104]	; 0x68
    gas_sensor.write = &spi_write;
 8089068:	4b1a      	ldr	r3, [pc, #104]	; (80890d4 <_ZN15Adafruit_BME6805beginEh+0xf0>)
 808906a:	66e3      	str	r3, [r4, #108]	; 0x6c
  }

  gas_sensor.delay_ms = delay_msec;
 808906c:	4b1a      	ldr	r3, [pc, #104]	; (80890d8 <_ZN15Adafruit_BME6805beginEh+0xf4>)

  int8_t rslt = BME680_OK;
  rslt = bme680_init(&gas_sensor);
 808906e:	f104 0020 	add.w	r0, r4, #32
    gas_sensor.intf = BME680_SPI_INTF;
    gas_sensor.read = &spi_read;
    gas_sensor.write = &spi_write;
  }

  gas_sensor.delay_ms = delay_msec;
 8089072:	6723      	str	r3, [r4, #112]	; 0x70

  int8_t rslt = BME680_OK;
  rslt = bme680_init(&gas_sensor);
 8089074:	f7f7 f925 	bl	80802c2 <bme680_init>
#ifdef BME680_DEBUG
  Serial.print("Result: "); Serial.println(rslt);
#endif

  if (rslt != BME680_OK)
 8089078:	b9e0      	cbnz	r0, 80890b4 <_ZN15Adafruit_BME6805beginEh+0xd0>
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_temp = oversample;
 808907a:	2304      	movs	r3, #4
 808907c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_hum = oversample;
 8089080:	2302      	movs	r3, #2
 8089082:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
*/
/**************************************************************************/
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
  if (filtersize > BME680_FILTER_SIZE_127) return false;

  gas_sensor.tph_sett.filter = filtersize;
 8089086:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
    @param  heaterTime Time to keep heater on in milliseconds
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
 808908a:	f44f 73a0 	mov.w	r3, #320	; 0x140
  gas_sensor.tph_sett.os_temp = oversample;

  if (oversample == BME680_OS_NONE)
    _tempEnabled = false;
  else
    _tempEnabled = true;
 808908e:	2001      	movs	r0, #1
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_pres = oversample;
 8089090:	2203      	movs	r2, #3
    @param  heaterTime Time to keep heater on in milliseconds
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
 8089092:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  gas_sensor.gas_sett.heatr_dur = heaterTime;
 8089096:	2396      	movs	r3, #150	; 0x96
  gas_sensor.tph_sett.os_temp = oversample;

  if (oversample == BME680_OS_NONE)
    _tempEnabled = false;
  else
    _tempEnabled = true;
 8089098:	7460      	strb	r0, [r4, #17]
  gas_sensor.tph_sett.os_hum = oversample;

  if (oversample == BME680_OS_NONE)
    _humEnabled = false;
  else
    _humEnabled = true;
 808909a:	74a0      	strb	r0, [r4, #18]
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_pres = oversample;
 808909c:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a

  if (oversample == BME680_OS_NONE)
    _presEnabled = false;
  else
    _presEnabled = true;
 80890a0:	74e0      	strb	r0, [r4, #19]
  gas_sensor.tph_sett.filter = filtersize;

  if (filtersize == BME680_FILTER_SIZE_0)
    _filterEnabled = false;
  else
    _filterEnabled = true;
 80890a2:	7420      	strb	r0, [r4, #16]
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
  gas_sensor.gas_sett.heatr_dur = heaterTime;
 80890a4:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  if ( (heaterTemp == 0) || (heaterTime == 0) ) {
    // disabled!
    gas_sensor.gas_sett.run_gas = BME680_DISABLE_GAS_MEAS;
    _gasEnabled = false;
  } else {
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 80890a8:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    _gasEnabled = true;
 80890ac:	7520      	strb	r0, [r4, #20]
  setPressureOversampling(BME680_OS_4X);
  setIIRFilterSize(BME680_FILTER_SIZE_3);
  setGasHeater(320, 150); // 320*C for 150 ms

  // don't do anything till we request a reading
  gas_sensor.power_mode = BME680_FORCED_MODE;
 80890ae:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64

  return true;
 80890b2:	bd38      	pop	{r3, r4, r5, pc}
#ifdef BME680_DEBUG
  Serial.print("Result: "); Serial.println(rslt);
#endif

  if (rslt != BME680_OK)
    return false;
 80890b4:	2000      	movs	r0, #0

  // don't do anything till we request a reading
  gas_sensor.power_mode = BME680_FORCED_MODE;

  return true;
}
 80890b6:	bd38      	pop	{r3, r4, r5, pc}
 80890b8:	08088f59 	.word	0x08088f59
 80890bc:	08088dc9 	.word	0x08088dc9
 80890c0:	20000fdd 	.word	0x20000fdd
 80890c4:	20001608 	.word	0x20001608
 80890c8:	20000fde 	.word	0x20000fde
 80890cc:	20000fdc 	.word	0x20000fdc
 80890d0:	08088ef5 	.word	0x08088ef5
 80890d4:	08088e91 	.word	0x08088e91
 80890d8:	08088dc5 	.word	0x08088dc5

080890dc <_ZN15Adafruit_BME68014performReadingEv>:
    and Adafruit_BME680#gas_resistance member variables

    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::performReading(void) {
 80890dc:	b530      	push	{r4, r5, lr}
 80890de:	4604      	mov	r4, r0
  struct bme680_field_data data;
  int8_t rslt;

  /* Select the power mode */
  /* Must be set before writing the sensor configuration */
  gas_sensor.power_mode = BME680_FORCED_MODE;
 80890e0:	2301      	movs	r3, #1
 80890e2:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64

  /* Set the required sensor settings needed */
  if (_tempEnabled)
    set_required_settings |= BME680_OST_SEL;
  if (_humEnabled)
 80890e6:	7ca3      	ldrb	r3, [r4, #18]
    and Adafruit_BME680#gas_resistance member variables

    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::performReading(void) {
 80890e8:	b087      	sub	sp, #28
  uint8_t set_required_settings = 0;
 80890ea:	7c40      	ldrb	r0, [r0, #17]
  gas_sensor.power_mode = BME680_FORCED_MODE;

  /* Set the required sensor settings needed */
  if (_tempEnabled)
    set_required_settings |= BME680_OST_SEL;
  if (_humEnabled)
 80890ec:	b10b      	cbz	r3, 80890f2 <_ZN15Adafruit_BME68014performReadingEv+0x16>
    set_required_settings |= BME680_OSH_SEL;
 80890ee:	f040 0004 	orr.w	r0, r0, #4
  if (_presEnabled)
 80890f2:	7ce3      	ldrb	r3, [r4, #19]
 80890f4:	b10b      	cbz	r3, 80890fa <_ZN15Adafruit_BME68014performReadingEv+0x1e>
    set_required_settings |= BME680_OSP_SEL;
 80890f6:	f040 0002 	orr.w	r0, r0, #2
  if (_filterEnabled)
 80890fa:	7c23      	ldrb	r3, [r4, #16]
 80890fc:	b10b      	cbz	r3, 8089102 <_ZN15Adafruit_BME68014performReadingEv+0x26>
    set_required_settings |= BME680_FILTER_SEL;
 80890fe:	f040 0010 	orr.w	r0, r0, #16
  if (_gasEnabled)
 8089102:	7d23      	ldrb	r3, [r4, #20]
 8089104:	b10b      	cbz	r3, 808910a <_ZN15Adafruit_BME68014performReadingEv+0x2e>
    set_required_settings |= BME680_GAS_SENSOR_SEL;
 8089106:	f040 00c8 	orr.w	r0, r0, #200	; 0xc8

  /* Set the desired sensor configuration */
  //Serial.println("Setting sensor settings");
  rslt = bme680_set_sensor_settings(set_required_settings, &gas_sensor);
 808910a:	f104 0520 	add.w	r5, r4, #32
 808910e:	4629      	mov	r1, r5
 8089110:	f7f7 f9f7 	bl	8080502 <bme680_set_sensor_settings>
  if (rslt != BME680_OK)
 8089114:	b108      	cbz	r0, 808911a <_ZN15Adafruit_BME68014performReadingEv+0x3e>
    return false;
 8089116:	2500      	movs	r5, #0
 8089118:	e04b      	b.n	80891b2 <_ZN15Adafruit_BME68014performReadingEv+0xd6>

  /* Set the power mode */
  //Serial.println("Setting power mode");
  rslt = bme680_set_sensor_mode(&gas_sensor);
 808911a:	4628      	mov	r0, r5
 808911c:	f7f7 f9b2 	bl	8080484 <bme680_set_sensor_mode>
  if (rslt != BME680_OK)
 8089120:	2800      	cmp	r0, #0
 8089122:	d1f8      	bne.n	8089116 <_ZN15Adafruit_BME68014performReadingEv+0x3a>
    return false;

  /* Get the total measurement duration so as to sleep or wait till the
   * measurement is complete */
  uint16_t meas_period;
  bme680_get_profile_dur(&meas_period, &gas_sensor);
 8089124:	4629      	mov	r1, r5
 8089126:	f10d 0002 	add.w	r0, sp, #2
 808912a:	f7f7 fb65 	bl	80807f8 <bme680_get_profile_dur>
  //Serial.print("Waiting (ms) "); Serial.println(meas_period);
  delay(meas_period * 2); /* Delay till the measurement is ready */
 808912e:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8089132:	0040      	lsls	r0, r0, #1
 8089134:	f002 fe12 	bl	808bd5c <delay>

  //Serial.print("t_fine = "); Serial.println(gas_sensor.calib.t_fine);

  //Serial.println("Getting sensor data");
  rslt = bme680_get_sensor_data(&data, &gas_sensor);
 8089138:	4629      	mov	r1, r5
 808913a:	a801      	add	r0, sp, #4
 808913c:	f7f7 fb90 	bl	8080860 <bme680_get_sensor_data>
  if (rslt != BME680_OK)
 8089140:	2800      	cmp	r0, #0
 8089142:	d1e8      	bne.n	8089116 <_ZN15Adafruit_BME68014performReadingEv+0x3a>
    return false;

  if (_tempEnabled) {
 8089144:	7c63      	ldrb	r3, [r4, #17]
 8089146:	b15b      	cbz	r3, 8089160 <_ZN15Adafruit_BME68014performReadingEv+0x84>
    //Serial.print("Temp: "); Serial.println(data.temperature / 100.0, 2);
    temperature = data.temperature / 100.0;
 8089148:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 808914c:	f004 f9ca 	bl	808d4e4 <__aeabi_i2d>
 8089150:	2200      	movs	r2, #0
 8089152:	4b19      	ldr	r3, [pc, #100]	; (80891b8 <_ZN15Adafruit_BME68014performReadingEv+0xdc>)
 8089154:	f004 fb56 	bl	808d804 <__aeabi_ddiv>
 8089158:	f004 fd22 	bl	808dba0 <__aeabi_d2f>
 808915c:	6020      	str	r0, [r4, #0]
 808915e:	e001      	b.n	8089164 <_ZN15Adafruit_BME68014performReadingEv+0x88>
  } else {
    temperature = NAN;
 8089160:	4b16      	ldr	r3, [pc, #88]	; (80891bc <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 8089162:	6023      	str	r3, [r4, #0]
  }

  if (_humEnabled) {
 8089164:	7ca3      	ldrb	r3, [r4, #18]
 8089166:	b153      	cbz	r3, 808917e <_ZN15Adafruit_BME68014performReadingEv+0xa2>
    //Serial.print("Hum:  "); Serial.println(data.humidity / 1000.0, 2);
    humidity = data.humidity / 1000.0;
 8089168:	9804      	ldr	r0, [sp, #16]
 808916a:	f004 f9ab 	bl	808d4c4 <__aeabi_ui2d>
 808916e:	2200      	movs	r2, #0
 8089170:	4b13      	ldr	r3, [pc, #76]	; (80891c0 <_ZN15Adafruit_BME68014performReadingEv+0xe4>)
 8089172:	f004 fb47 	bl	808d804 <__aeabi_ddiv>
 8089176:	f004 fd13 	bl	808dba0 <__aeabi_d2f>
 808917a:	60a0      	str	r0, [r4, #8]
 808917c:	e001      	b.n	8089182 <_ZN15Adafruit_BME68014performReadingEv+0xa6>
  } else {
    humidity = NAN;
 808917e:	4b0f      	ldr	r3, [pc, #60]	; (80891bc <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 8089180:	60a3      	str	r3, [r4, #8]
  }

  if (_presEnabled) {
 8089182:	7ce3      	ldrb	r3, [r4, #19]
 8089184:	b123      	cbz	r3, 8089190 <_ZN15Adafruit_BME68014performReadingEv+0xb4>
    //Serial.print("Pres: "); Serial.println(data.pressure / 100.0, 2);
    pressure = data.pressure;
 8089186:	9803      	ldr	r0, [sp, #12]
 8089188:	f004 fe10 	bl	808ddac <__aeabi_ui2f>
 808918c:	6060      	str	r0, [r4, #4]
 808918e:	e001      	b.n	8089194 <_ZN15Adafruit_BME68014performReadingEv+0xb8>
  } else {
    pressure = NAN;
 8089190:	4b0a      	ldr	r3, [pc, #40]	; (80891bc <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 8089192:	6063      	str	r3, [r4, #4]
  }

  /* Avoid using measurements from an unstable heating setup */
  if (_gasEnabled) {
 8089194:	7d25      	ldrb	r5, [r4, #20]
 8089196:	b15d      	cbz	r5, 80891b0 <_ZN15Adafruit_BME68014performReadingEv+0xd4>
    if (data.status & BME680_HEAT_STAB_MSK) {
 8089198:	f89d 3004 	ldrb.w	r3, [sp, #4]
 808919c:	06db      	lsls	r3, r3, #27
 808919e:	d504      	bpl.n	80891aa <_ZN15Adafruit_BME68014performReadingEv+0xce>
      //Serial.print("Gas resistance: "); Serial.println(data.gas_resistance);
      gas_resistance = data.gas_resistance;
 80891a0:	9805      	ldr	r0, [sp, #20]
 80891a2:	f004 fe03 	bl	808ddac <__aeabi_ui2f>
 80891a6:	60e0      	str	r0, [r4, #12]
 80891a8:	e003      	b.n	80891b2 <_ZN15Adafruit_BME68014performReadingEv+0xd6>
    } else {
      gas_resistance = 0;
 80891aa:	2300      	movs	r3, #0
 80891ac:	60e3      	str	r3, [r4, #12]
 80891ae:	e000      	b.n	80891b2 <_ZN15Adafruit_BME68014performReadingEv+0xd6>
      //Serial.println("Gas reading unstable!");
    }
  }

  return true;
 80891b0:	2501      	movs	r5, #1
}
 80891b2:	4628      	mov	r0, r5
 80891b4:	b007      	add	sp, #28
 80891b6:	bd30      	pop	{r4, r5, pc}
 80891b8:	40590000 	.word	0x40590000
 80891bc:	7fc00000 	.word	0x7fc00000
 80891c0:	408f4000 	.word	0x408f4000

080891c4 <_ZN15Adafruit_BME68012setGasHeaterEtt>:
    @param  heaterTime Time to keep heater on in milliseconds
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
 80891c4:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
  gas_sensor.gas_sett.heatr_dur = heaterTime;
 80891c8:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62

  if ( (heaterTemp == 0) || (heaterTime == 0) ) {
 80891cc:	b101      	cbz	r1, 80891d0 <_ZN15Adafruit_BME68012setGasHeaterEtt+0xc>
 80891ce:	b90a      	cbnz	r2, 80891d4 <_ZN15Adafruit_BME68012setGasHeaterEtt+0x10>
    // disabled!
    gas_sensor.gas_sett.run_gas = BME680_DISABLE_GAS_MEAS;
 80891d0:	2300      	movs	r3, #0
 80891d2:	e000      	b.n	80891d6 <_ZN15Adafruit_BME68012setGasHeaterEtt+0x12>
    _gasEnabled = false;
  } else {
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 80891d4:	2301      	movs	r3, #1
 80891d6:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
    _gasEnabled = true;
 80891da:	7503      	strb	r3, [r0, #20]
  }
  return true;
}
 80891dc:	2001      	movs	r0, #1
 80891de:	4770      	bx	lr

080891e0 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh>:
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
 80891e0:	2905      	cmp	r1, #5
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
 80891e2:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
 80891e4:	d807      	bhi.n	80891f6 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh+0x16>

  gas_sensor.tph_sett.os_temp = oversample;
 80891e6:	f880 1059 	strb.w	r1, [r0, #89]	; 0x59
 80891ea:	2001      	movs	r0, #1

  if (oversample == BME680_OS_NONE)
 80891ec:	b909      	cbnz	r1, 80891f2 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh+0x12>
    _tempEnabled = false;
 80891ee:	7459      	strb	r1, [r3, #17]
 80891f0:	4770      	bx	lr
  else
    _tempEnabled = true;
 80891f2:	7458      	strb	r0, [r3, #17]
 80891f4:	4770      	bx	lr
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
 80891f6:	2000      	movs	r0, #0
    _tempEnabled = false;
  else
    _tempEnabled = true;

  return true;
}
 80891f8:	4770      	bx	lr

080891fa <_ZN15Adafruit_BME68023setHumidityOversamplingEh>:
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
 80891fa:	2905      	cmp	r1, #5
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
 80891fc:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
 80891fe:	d807      	bhi.n	8089210 <_ZN15Adafruit_BME68023setHumidityOversamplingEh+0x16>

  gas_sensor.tph_sett.os_hum = oversample;
 8089200:	f880 1058 	strb.w	r1, [r0, #88]	; 0x58
 8089204:	2001      	movs	r0, #1

  if (oversample == BME680_OS_NONE)
 8089206:	b909      	cbnz	r1, 808920c <_ZN15Adafruit_BME68023setHumidityOversamplingEh+0x12>
    _humEnabled = false;
 8089208:	7499      	strb	r1, [r3, #18]
 808920a:	4770      	bx	lr
  else
    _humEnabled = true;
 808920c:	7498      	strb	r0, [r3, #18]
 808920e:	4770      	bx	lr
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
 8089210:	2000      	movs	r0, #0
    _humEnabled = false;
  else
    _humEnabled = true;

  return true;
}
 8089212:	4770      	bx	lr

08089214 <_ZN15Adafruit_BME68023setPressureOversamplingEh>:
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
 8089214:	2905      	cmp	r1, #5
    @param  oversample Oversampling setting, can be BME680_OS_NONE (turn off Pressure reading),
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
 8089216:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
 8089218:	d807      	bhi.n	808922a <_ZN15Adafruit_BME68023setPressureOversamplingEh+0x16>

  gas_sensor.tph_sett.os_pres = oversample;
 808921a:	f880 105a 	strb.w	r1, [r0, #90]	; 0x5a
 808921e:	2001      	movs	r0, #1

  if (oversample == BME680_OS_NONE)
 8089220:	b909      	cbnz	r1, 8089226 <_ZN15Adafruit_BME68023setPressureOversamplingEh+0x12>
    _presEnabled = false;
 8089222:	74d9      	strb	r1, [r3, #19]
 8089224:	4770      	bx	lr
  else
    _presEnabled = true;
 8089226:	74d8      	strb	r0, [r3, #19]
 8089228:	4770      	bx	lr
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
 808922a:	2000      	movs	r0, #0
    _presEnabled = false;
  else
    _presEnabled = true;

  return true;
}
 808922c:	4770      	bx	lr

0808922e <_ZN15Adafruit_BME68016setIIRFilterSizeEh>:
    @return True on success, False on failure

*/
/**************************************************************************/
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
  if (filtersize > BME680_FILTER_SIZE_127) return false;
 808922e:	2907      	cmp	r1, #7
    @param filtersize Size of the filter (in samples). Can be BME680_FILTER_SIZE_0 (no filtering), BME680_FILTER_SIZE_1, BME680_FILTER_SIZE_3, BME680_FILTER_SIZE_7, BME680_FILTER_SIZE_15, BME680_FILTER_SIZE_31, BME680_FILTER_SIZE_63, BME680_FILTER_SIZE_127
    @return True on success, False on failure

*/
/**************************************************************************/
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
 8089230:	4603      	mov	r3, r0
  if (filtersize > BME680_FILTER_SIZE_127) return false;
 8089232:	d807      	bhi.n	8089244 <_ZN15Adafruit_BME68016setIIRFilterSizeEh+0x16>

  gas_sensor.tph_sett.filter = filtersize;
 8089234:	f880 105b 	strb.w	r1, [r0, #91]	; 0x5b
 8089238:	2001      	movs	r0, #1

  if (filtersize == BME680_FILTER_SIZE_0)
 808923a:	b909      	cbnz	r1, 8089240 <_ZN15Adafruit_BME68016setIIRFilterSizeEh+0x12>
    _filterEnabled = false;
 808923c:	7419      	strb	r1, [r3, #16]
 808923e:	4770      	bx	lr
  else
    _filterEnabled = true;
 8089240:	7418      	strb	r0, [r3, #16]
 8089242:	4770      	bx	lr
    @return True on success, False on failure

*/
/**************************************************************************/
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
  if (filtersize > BME680_FILTER_SIZE_127) return false;
 8089244:	2000      	movs	r0, #0
    _filterEnabled = false;
  else
    _filterEnabled = true;

  return true;
}
 8089246:	4770      	bx	lr

08089248 <_GLOBAL__sub_I__BME680_SoftwareSPI_MOSI>:
 8089248:	f001 b8de 	b.w	808a408 <HAL_Pin_Map>

0808924c <_ZN7HIH61XX5startEv>:

        //  use a stream to control the sensor
        uint8_t commandRequest(Stream & stream);
    protected:
        uint8_t setError(uint8_t error) {
            f = (f & ~ErrorMask) | error;
 808924c:	7983      	ldrb	r3, [r0, #6]
 808924e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8089252:	f023 030f 	bic.w	r3, r3, #15
 8089256:	7183      	strb	r3, [r0, #6]
    /*if (p < 255) {
        digitalWrite(p, HIGH);
    }*/
    f |= RunningFlag;
    return setError(0);
}
 8089258:	2000      	movs	r0, #0
 808925a:	4770      	bx	lr

0808925c <_ZN7HIH61XX4stopEv>:
 808925c:	7983      	ldrb	r3, [r0, #6]
 808925e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8089262:	7183      	strb	r3, [r0, #6]
    /*if (p < 255) {
        digitalWrite(p, LOW);
    }*/
    f &= ~RunningFlag;
    return setError(0);
}
 8089264:	2000      	movs	r0, #0
 8089266:	4770      	bx	lr

08089268 <_ZN7HIH61XXC1Eh>:
#include "HIH61XX.h"

HIH61XX::HIH61XX(uint8_t address): a(address), f(0), h(0), t(0) {
 8089268:	4a03      	ldr	r2, [pc, #12]	; (8089278 <_ZN7HIH61XXC1Eh+0x10>)
 808926a:	7101      	strb	r1, [r0, #4]
 808926c:	6002      	str	r2, [r0, #0]
 808926e:	2200      	movs	r2, #0
 8089270:	7182      	strb	r2, [r0, #6]
 8089272:	8102      	strh	r2, [r0, #8]
 8089274:	8142      	strh	r2, [r0, #10]
    /*if (p < 255) {
        digitalWrite(p, LOW);
        pinMode(p, OUTPUT);
    }*/
}
 8089276:	4770      	bx	lr
 8089278:	08093e78 	.word	0x08093e78

0808927c <_ZN7HIH61XX6updateEv>:
    }*/
    f &= ~RunningFlag;
    return setError(0);
}

uint8_t HIH61XX::update() {
 808927c:	b570      	push	{r4, r5, r6, lr}
        uint8_t error() const {
            return f & ErrorMask;
        }

        bool isRunning() const {
            return f & RunningFlag;
 808927e:	f990 3006 	ldrsb.w	r3, [r0, #6]
 8089282:	4604      	mov	r4, r0
    if (!isRunning()) {
 8089284:	2b00      	cmp	r3, #0
 8089286:	db06      	blt.n	8089296 <_ZN7HIH61XX6updateEv+0x1a>

        //  use a stream to control the sensor
        uint8_t commandRequest(Stream & stream);
    protected:
        uint8_t setError(uint8_t error) {
            f = (f & ~ErrorMask) | error;
 8089288:	f023 030f 	bic.w	r3, r3, #15
 808928c:	f043 0303 	orr.w	r3, r3, #3
 8089290:	7183      	strb	r3, [r0, #6]
        return setError(NotRunningError);
 8089292:	2003      	movs	r0, #3
 8089294:	bd70      	pop	{r4, r5, r6, pc}
    }

    uint8_t x, y, s;

    Wire.beginTransmission(a);
 8089296:	f003 fe41 	bl	808cf1c <_Z19__fetch_global_Wirev>
 808929a:	7921      	ldrb	r1, [r4, #4]
 808929c:	f003 fc10 	bl	808cac0 <_ZN7TwoWire17beginTransmissionEh>
    int azer = Wire.endTransmission();
 80892a0:	f003 fe3c 	bl	808cf1c <_Z19__fetch_global_Wirev>
 80892a4:	f003 fc17 	bl	808cad6 <_ZN7TwoWire15endTransmissionEv>
    if (azer == 0) {
 80892a8:	4605      	mov	r5, r0
 80892aa:	2800      	cmp	r0, #0
 80892ac:	d15d      	bne.n	808936a <_ZN7HIH61XX6updateEv+0xee>
        while (true) {
            delay(10);
 80892ae:	200a      	movs	r0, #10
 80892b0:	f002 fd54 	bl	808bd5c <delay>

            Wire.requestFrom(a, (uint8_t) 4);
 80892b4:	f003 fe32 	bl	808cf1c <_Z19__fetch_global_Wirev>
 80892b8:	2204      	movs	r2, #4
 80892ba:	7921      	ldrb	r1, [r4, #4]
 80892bc:	f003 fbf3 	bl	808caa6 <_ZN7TwoWire11requestFromEhh>
            if (Wire.available()) {
 80892c0:	f003 fe2c 	bl	808cf1c <_Z19__fetch_global_Wirev>
 80892c4:	6803      	ldr	r3, [r0, #0]
 80892c6:	691b      	ldr	r3, [r3, #16]
 80892c8:	4798      	blx	r3
 80892ca:	2800      	cmp	r0, #0
 80892cc:	d045      	beq.n	808935a <_ZN7HIH61XX6updateEv+0xde>
                x = Wire.read();
 80892ce:	f003 fe25 	bl	808cf1c <_Z19__fetch_global_Wirev>
 80892d2:	6803      	ldr	r3, [r0, #0]
 80892d4:	695b      	ldr	r3, [r3, #20]
 80892d6:	4798      	blx	r3
 80892d8:	4606      	mov	r6, r0
                y = Wire.read();
 80892da:	f003 fe1f 	bl	808cf1c <_Z19__fetch_global_Wirev>
 80892de:	6803      	ldr	r3, [r0, #0]
                s = x >> 6;

                switch (s) {
 80892e0:	f3c6 1581 	ubfx	r5, r6, #6, #2
            delay(10);

            Wire.requestFrom(a, (uint8_t) 4);
            if (Wire.available()) {
                x = Wire.read();
                y = Wire.read();
 80892e4:	695b      	ldr	r3, [r3, #20]
 80892e6:	4798      	blx	r3
                s = x >> 6;

                switch (s) {
 80892e8:	2d01      	cmp	r5, #1
 80892ea:	d025      	beq.n	8089338 <_ZN7HIH61XX6updateEv+0xbc>
 80892ec:	2d02      	cmp	r5, #2
 80892ee:	d028      	beq.n	8089342 <_ZN7HIH61XX6updateEv+0xc6>
 80892f0:	2d00      	cmp	r5, #0
 80892f2:	d1dc      	bne.n	80892ae <_ZN7HIH61XX6updateEv+0x32>
                    case 0:
                        h = (((uint16_t)(x & 0x3f)) << 8) | y;
 80892f4:	0236      	lsls	r6, r6, #8
 80892f6:	f406 567c 	and.w	r6, r6, #16128	; 0x3f00
 80892fa:	b2c0      	uxtb	r0, r0
 80892fc:	4330      	orrs	r0, r6
 80892fe:	8120      	strh	r0, [r4, #8]
                        x = Wire.read();
 8089300:	f003 fe0c 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8089304:	6803      	ldr	r3, [r0, #0]
 8089306:	695b      	ldr	r3, [r3, #20]
 8089308:	4798      	blx	r3
 808930a:	4606      	mov	r6, r0
                        y = Wire.read();
 808930c:	f003 fe06 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8089310:	6803      	ldr	r3, [r0, #0]
                        t = ((((uint16_t) x) << 8) | y) >> 2;
 8089312:	0236      	lsls	r6, r6, #8

                switch (s) {
                    case 0:
                        h = (((uint16_t)(x & 0x3f)) << 8) | y;
                        x = Wire.read();
                        y = Wire.read();
 8089314:	695b      	ldr	r3, [r3, #20]
 8089316:	4798      	blx	r3
                        t = ((((uint16_t) x) << 8) | y) >> 2;
 8089318:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 808931c:	b2c0      	uxtb	r0, r0
 808931e:	4330      	orrs	r0, r6
 8089320:	1080      	asrs	r0, r0, #2
 8089322:	8160      	strh	r0, [r4, #10]
                        Wire.endTransmission();
 8089324:	f003 fdfa 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8089328:	f003 fbd5 	bl	808cad6 <_ZN7TwoWire15endTransmissionEv>
 808932c:	79a3      	ldrb	r3, [r4, #6]
                        return setError(0);
 808932e:	4628      	mov	r0, r5
 8089330:	f023 030f 	bic.w	r3, r3, #15
 8089334:	71a3      	strb	r3, [r4, #6]
 8089336:	bd70      	pop	{r4, r5, r6, pc}

                    case 1:
                        Wire.endTransmission();
 8089338:	f003 fdf0 	bl	808cf1c <_Z19__fetch_global_Wirev>
 808933c:	f003 fbcb 	bl	808cad6 <_ZN7TwoWire15endTransmissionEv>
 8089340:	e7b5      	b.n	80892ae <_ZN7HIH61XX6updateEv+0x32>
                        break;

                    case 2:
                        Wire.endTransmission();
 8089342:	f003 fdeb 	bl	808cf1c <_Z19__fetch_global_Wirev>
 8089346:	f003 fbc6 	bl	808cad6 <_ZN7TwoWire15endTransmissionEv>
 808934a:	79a3      	ldrb	r3, [r4, #6]
                        return setError(CommandModeError);
 808934c:	2004      	movs	r0, #4
 808934e:	f023 030f 	bic.w	r3, r3, #15
 8089352:	f043 0304 	orr.w	r3, r3, #4
 8089356:	71a3      	strb	r3, [r4, #6]
 8089358:	bd70      	pop	{r4, r5, r6, pc}
 808935a:	79a3      	ldrb	r3, [r4, #6]
                }
            } else {
                return setError(CommunicationError);
 808935c:	2002      	movs	r0, #2
 808935e:	f023 030f 	bic.w	r3, r3, #15
 8089362:	f043 0302 	orr.w	r3, r3, #2
 8089366:	71a3      	strb	r3, [r4, #6]
 8089368:	bd70      	pop	{r4, r5, r6, pc}
            }
        }
    } else {
        Serial.print("...");
 808936a:	f003 f9bd 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808936e:	4908      	ldr	r1, [pc, #32]	; (8089390 <_ZN7HIH61XX6updateEv+0x114>)
 8089370:	f002 f938 	bl	808b5e4 <_ZN5Print5printEPKc>
        Serial.println(azer);
 8089374:	f003 f9b8 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8089378:	220a      	movs	r2, #10
 808937a:	4629      	mov	r1, r5
 808937c:	f002 f9b3 	bl	808b6e6 <_ZN5Print7printlnEii>
 8089380:	79a3      	ldrb	r3, [r4, #6]
        return setError(ConnectionError);
 8089382:	2001      	movs	r0, #1
 8089384:	f023 030f 	bic.w	r3, r3, #15
 8089388:	f043 0301 	orr.w	r3, r3, #1
 808938c:	71a3      	strb	r3, [r4, #6]
    }
}
 808938e:	bd70      	pop	{r4, r5, r6, pc}
 8089390:	08093bf5 	.word	0x08093bf5

08089394 <_ZN7HIH61XX14commandProcessER6Streamh>:
    }
    return commandReply(stream, 255);
}

uint8_t HIH61XX::commandProcess(Stream & stream, uint8_t command) {
    switch (command) {
 8089394:	2a61      	cmp	r2, #97	; 0x61
        return commandProcess(stream, stream.read());
    }
    return commandReply(stream, 255);
}

uint8_t HIH61XX::commandProcess(Stream & stream, uint8_t command) {
 8089396:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8089398:	460d      	mov	r5, r1
    switch (command) {
 808939a:	d02b      	beq.n	80893f4 <_ZN7HIH61XX14commandProcessER6Streamh+0x60>
 808939c:	d806      	bhi.n	80893ac <_ZN7HIH61XX14commandProcessER6Streamh+0x18>
 808939e:	2a30      	cmp	r2, #48	; 0x30
 80893a0:	d031      	beq.n	8089406 <_ZN7HIH61XX14commandProcessER6Streamh+0x72>
 80893a2:	2a31      	cmp	r2, #49	; 0x31
 80893a4:	d139      	bne.n	808941a <_ZN7HIH61XX14commandProcessER6Streamh+0x86>
        case 'u':
            return commandReply(stream, update());

            //  start
        case '1':
            return commandReply(stream, start());
 80893a6:	6803      	ldr	r3, [r0, #0]
 80893a8:	681b      	ldr	r3, [r3, #0]
 80893aa:	e02e      	b.n	808940a <_ZN7HIH61XX14commandProcessER6Streamh+0x76>
    }
    return commandReply(stream, 255);
}

uint8_t HIH61XX::commandProcess(Stream & stream, uint8_t command) {
    switch (command) {
 80893ac:	2a74      	cmp	r2, #116	; 0x74
 80893ae:	d00a      	beq.n	80893c6 <_ZN7HIH61XX14commandProcessER6Streamh+0x32>
 80893b0:	2a75      	cmp	r2, #117	; 0x75
 80893b2:	d025      	beq.n	8089400 <_ZN7HIH61XX14commandProcessER6Streamh+0x6c>
 80893b4:	2a68      	cmp	r2, #104	; 0x68
 80893b6:	d130      	bne.n	808941a <_ZN7HIH61XX14commandProcessER6Streamh+0x86>
            stream.println(result);
            return result;
        }
        template < typename T > uint8_t commandReply(Stream & stream, uint8_t result,
            const T & data) {
            stream.println(data);
 80893b8:	8900      	ldrh	r0, [r0, #8]
 80893ba:	f004 fcf7 	bl	808ddac <__aeabi_ui2f>
 80893be:	491b      	ldr	r1, [pc, #108]	; (808942c <_ZN7HIH61XX14commandProcessER6Streamh+0x98>)
 80893c0:	f004 fe00 	bl	808dfc4 <__aeabi_fdiv>
 80893c4:	e00b      	b.n	80893de <_ZN7HIH61XX14commandProcessER6Streamh+0x4a>
 80893c6:	8940      	ldrh	r0, [r0, #10]
 80893c8:	f004 fcf0 	bl	808ddac <__aeabi_ui2f>
 80893cc:	4917      	ldr	r1, [pc, #92]	; (808942c <_ZN7HIH61XX14commandProcessER6Streamh+0x98>)
 80893ce:	f004 fdf9 	bl	808dfc4 <__aeabi_fdiv>
 80893d2:	4917      	ldr	r1, [pc, #92]	; (8089430 <_ZN7HIH61XX14commandProcessER6Streamh+0x9c>)
 80893d4:	f004 fd42 	bl	808de5c <__aeabi_fmul>
 80893d8:	4916      	ldr	r1, [pc, #88]	; (8089434 <_ZN7HIH61XX14commandProcessER6Streamh+0xa0>)
 80893da:	f004 fc35 	bl	808dc48 <__aeabi_fsub>
 80893de:	f004 f893 	bl	808d508 <__aeabi_f2d>
 80893e2:	2302      	movs	r3, #2
 80893e4:	9300      	str	r3, [sp, #0]
 80893e6:	4602      	mov	r2, r0
 80893e8:	460b      	mov	r3, r1
 80893ea:	4628      	mov	r0, r5
 80893ec:	f002 fa34 	bl	808b858 <_ZN5Print7printlnEdi>
        case 'h':
            return commandReply(stream, 0, humidity());

            //  get temperature
        case 't':
            return commandReply(stream, 0, temperature());
 80893f0:	2400      	movs	r4, #0
 80893f2:	e018      	b.n	8089426 <_ZN7HIH61XX14commandProcessER6Streamh+0x92>
 80893f4:	7901      	ldrb	r1, [r0, #4]
 80893f6:	220a      	movs	r2, #10
 80893f8:	4628      	mov	r0, r5
 80893fa:	f002 f946 	bl	808b68a <_ZN5Print7printlnEhi>
 80893fe:	e7f7      	b.n	80893f0 <_ZN7HIH61XX14commandProcessER6Streamh+0x5c>

            //  get power pin
        
            //  update
        case 'u':
            return commandReply(stream, update());
 8089400:	f7ff ff3c 	bl	808927c <_ZN7HIH61XX6updateEv>
 8089404:	e002      	b.n	808940c <_ZN7HIH61XX14commandProcessER6Streamh+0x78>
        case '1':
            return commandReply(stream, start());

            //  stop
        case '0':
            return commandReply(stream, stop());
 8089406:	6803      	ldr	r3, [r0, #0]
 8089408:	685b      	ldr	r3, [r3, #4]
 808940a:	4798      	blx	r3
 808940c:	4604      	mov	r4, r0
            return error;
        }

        virtual uint8_t commandProcess(Stream & stream, uint8_t command);
        uint8_t commandReply(Stream & stream, uint8_t result) {
            stream.println(result);
 808940e:	4601      	mov	r1, r0
 8089410:	220a      	movs	r2, #10
 8089412:	4628      	mov	r0, r5
 8089414:	f002 f939 	bl	808b68a <_ZN5Print7printlnEhi>
 8089418:	e005      	b.n	8089426 <_ZN7HIH61XX14commandProcessER6Streamh+0x92>
 808941a:	220a      	movs	r2, #10
 808941c:	21fe      	movs	r1, #254	; 0xfe
 808941e:	4628      	mov	r0, r5
 8089420:	f002 f933 	bl	808b68a <_ZN5Print7printlnEhi>
    }

    return commandReply(stream, 254);
 8089424:	24fe      	movs	r4, #254	; 0xfe
}
 8089426:	4620      	mov	r0, r4
 8089428:	b003      	add	sp, #12
 808942a:	bd30      	pop	{r4, r5, pc}
 808942c:	467ff800 	.word	0x467ff800
 8089430:	43250000 	.word	0x43250000
 8089434:	42200000 	.word	0x42200000

08089438 <_GLOBAL__sub_I__ZN7HIH61XXC2Eh>:
 8089438:	f000 bfe6 	b.w	808a408 <HAL_Pin_Map>

0808943c <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvS1_S1_EEPS5_St12_PlaceholderILi1EESA_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS1_SJ_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 808943c:	b430      	push	{r4, r5}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 808943e:	6803      	ldr	r3, [r0, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
 8089440:	6812      	ldr	r2, [r2, #0]
 8089442:	6858      	ldr	r0, [r3, #4]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8089444:	689c      	ldr	r4, [r3, #8]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
 8089446:	f010 0f01 	tst.w	r0, #1
 808944a:	ea4f 0060 	mov.w	r0, r0, asr #1
 808944e:	bf18      	it	ne
 8089450:	5825      	ldrne	r5, [r4, r0]
 8089452:	681b      	ldr	r3, [r3, #0]
 8089454:	4420      	add	r0, r4
 8089456:	bf18      	it	ne
 8089458:	58eb      	ldrne	r3, [r5, r3]
 808945a:	6809      	ldr	r1, [r1, #0]
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
 808945c:	bc30      	pop	{r4, r5}
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
 808945e:	4718      	bx	r3

08089460 <_ZN23GoogleMapsDeviceLocatorD1Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {

}

GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
 8089460:	b510      	push	{r4, lr}
 8089462:	4604      	mov	r4, r0
 8089464:	4b05      	ldr	r3, [pc, #20]	; (808947c <_ZN23GoogleMapsDeviceLocatorD1Ev+0x1c>)
 8089466:	f840 3b2c 	str.w	r3, [r0], #44
 808946a:	f001 fe5f 	bl	808b12c <_ZN6StringD1Ev>
 808946e:	f104 000c 	add.w	r0, r4, #12
 8089472:	f001 fe5b 	bl	808b12c <_ZN6StringD1Ev>

}
 8089476:	4620      	mov	r0, r4
 8089478:	bd10      	pop	{r4, pc}
 808947a:	bf00      	nop
 808947c:	08093ea4 	.word	0x08093ea4

08089480 <_ZN23GoogleMapsDeviceLocatorD0Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {

}

GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
 8089480:	b510      	push	{r4, lr}
 8089482:	4604      	mov	r4, r0

}
 8089484:	f7ff ffec 	bl	8089460 <_ZN23GoogleMapsDeviceLocatorD1Ev>
 8089488:	4620      	mov	r0, r4
 808948a:	2144      	movs	r1, #68	; 0x44
 808948c:	f003 fd8b 	bl	808cfa6 <_ZdlPvj>
 8089490:	4620      	mov	r0, r4
 8089492:	bd10      	pop	{r4, pc}

08089494 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData>:
#endif /* Wiring_WiFi */


#if Wiring_Cellular

static void cellularAddTower(const CellularHelperEnvironmentCellData *cellData) {
 8089494:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8089496:	4604      	mov	r4, r0
	// The - 4 factor here to leave room for the closing JSON array ], object }}, and the trailing null
	size_t spaceLeft = &requestBuf[sizeof(requestBuf) - 4] - requestCur;
 8089498:	4e16      	ldr	r6, [pc, #88]	; (80894f4 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x60>)

	size_t sizeNeeded = snprintf(requestCur, spaceLeft,
 808949a:	6863      	ldr	r3, [r4, #4]

#if Wiring_Cellular

static void cellularAddTower(const CellularHelperEnvironmentCellData *cellData) {
	// The - 4 factor here to leave room for the closing JSON array ], object }}, and the trailing null
	size_t spaceLeft = &requestBuf[sizeof(requestBuf) - 4] - requestCur;
 808949c:	6830      	ldr	r0, [r6, #0]
 808949e:	4d16      	ldr	r5, [pc, #88]	; (80894f8 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x64>)

	size_t sizeNeeded = snprintf(requestCur, spaceLeft,
 80894a0:	f810 1c01 	ldrb.w	r1, [r0, #-1]
 80894a4:	9303      	str	r3, [sp, #12]
 80894a6:	6823      	ldr	r3, [r4, #0]
 80894a8:	4a14      	ldr	r2, [pc, #80]	; (80894fc <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x68>)
 80894aa:	9302      	str	r3, [sp, #8]
 80894ac:	68a3      	ldr	r3, [r4, #8]

#if Wiring_Cellular

static void cellularAddTower(const CellularHelperEnvironmentCellData *cellData) {
	// The - 4 factor here to leave room for the closing JSON array ], object }}, and the trailing null
	size_t spaceLeft = &requestBuf[sizeof(requestBuf) - 4] - requestCur;
 80894ae:	1a2d      	subs	r5, r5, r0

	size_t sizeNeeded = snprintf(requestCur, spaceLeft,
 80894b0:	9301      	str	r3, [sp, #4]
 80894b2:	68e3      	ldr	r3, [r4, #12]
 80894b4:	9300      	str	r3, [sp, #0]
 80894b6:	4b12      	ldr	r3, [pc, #72]	; (8089500 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x6c>)
 80894b8:	295b      	cmp	r1, #91	; 0x5b
 80894ba:	bf18      	it	ne
 80894bc:	4613      	movne	r3, r2
 80894be:	4a11      	ldr	r2, [pc, #68]	; (8089504 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x70>)
 80894c0:	4629      	mov	r1, r5
 80894c2:	f001 facf 	bl	808aa64 <snprintf>
			"%s{\"i\":%d,\"l\":%u,\"c\":%d,\"n\":%d}",
			(requestCur[-1] == '[' ? "" : ","),
			cellData->ci, cellData->lac, cellData->mcc, cellData->mnc);

	if (sizeNeeded <= spaceLeft && cellData->lac != 0 && cellData->lac != 65535 && cellData->mcc != 65535 && cellData->mnc != 65535) {
 80894c6:	4285      	cmp	r5, r0
 80894c8:	d312      	bcc.n	80894f0 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x5c>
 80894ca:	68a2      	ldr	r2, [r4, #8]
 80894cc:	b182      	cbz	r2, 80894f0 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x5c>
 80894ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80894d2:	429a      	cmp	r2, r3
 80894d4:	d00c      	beq.n	80894f0 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x5c>
 80894d6:	6822      	ldr	r2, [r4, #0]
 80894d8:	429a      	cmp	r2, r3
 80894da:	d009      	beq.n	80894f0 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x5c>
 80894dc:	6862      	ldr	r2, [r4, #4]
 80894de:	429a      	cmp	r2, r3
 80894e0:	d006      	beq.n	80894f0 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x5c>
		// There is enough space to store the whole entry, so save it
		requestCur += sizeNeeded;
 80894e2:	6833      	ldr	r3, [r6, #0]
		numAdded++;
 80894e4:	4a08      	ldr	r2, [pc, #32]	; (8089508 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x74>)
			(requestCur[-1] == '[' ? "" : ","),
			cellData->ci, cellData->lac, cellData->mcc, cellData->mnc);

	if (sizeNeeded <= spaceLeft && cellData->lac != 0 && cellData->lac != 65535 && cellData->mcc != 65535 && cellData->mnc != 65535) {
		// There is enough space to store the whole entry, so save it
		requestCur += sizeNeeded;
 80894e6:	4418      	add	r0, r3
		numAdded++;
 80894e8:	6813      	ldr	r3, [r2, #0]
			(requestCur[-1] == '[' ? "" : ","),
			cellData->ci, cellData->lac, cellData->mcc, cellData->mnc);

	if (sizeNeeded <= spaceLeft && cellData->lac != 0 && cellData->lac != 65535 && cellData->mcc != 65535 && cellData->mnc != 65535) {
		// There is enough space to store the whole entry, so save it
		requestCur += sizeNeeded;
 80894ea:	6030      	str	r0, [r6, #0]
		numAdded++;
 80894ec:	3301      	adds	r3, #1
 80894ee:	6013      	str	r3, [r2, #0]
	}

}
 80894f0:	b004      	add	sp, #16
 80894f2:	bd70      	pop	{r4, r5, r6, pc}
 80894f4:	200010e8 	.word	0x200010e8
 80894f8:	200010e1 	.word	0x200010e1
 80894fc:	08093eda 	.word	0x08093eda
 8089500:	08094308 	.word	0x08094308
 8089504:	08093eac 	.word	0x08093eac
 8089508:	20000fe0 	.word	0x20000fe0

0808950c <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_>:
			Particle.publish(eventName, scanData, PRIVATE);
		}
	}
}

void GoogleMapsDeviceLocator::subscriptionHandler(const char *event, const char *data) {
 808950c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	// event: hook-response/deviceLocator/<deviceid>/0

	if (callback) {
 8089510:	6a43      	ldr	r3, [r0, #36]	; 0x24
			Particle.publish(eventName, scanData, PRIVATE);
		}
	}
}

void GoogleMapsDeviceLocator::subscriptionHandler(const char *event, const char *data) {
 8089512:	4604      	mov	r4, r0
	// event: hook-response/deviceLocator/<deviceid>/0

	if (callback) {
 8089514:	b38b      	cbz	r3, 808957a <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x6e>
		// float lat, float lon, float accuracy
		char *mutableCopy = strdup(data);
 8089516:	4610      	mov	r0, r2
 8089518:	f005 fa60 	bl	808e9dc <strdup>
		char *part, *end;
		float lat, lon, accuracy;

		part = strtok_r(mutableCopy, ",", &end);
 808951c:	aa01      	add	r2, sp, #4
 808951e:	4918      	ldr	r1, [pc, #96]	; (8089580 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x74>)
void GoogleMapsDeviceLocator::subscriptionHandler(const char *event, const char *data) {
	// event: hook-response/deviceLocator/<deviceid>/0

	if (callback) {
		// float lat, float lon, float accuracy
		char *mutableCopy = strdup(data);
 8089520:	4605      	mov	r5, r0
		char *part, *end;
		float lat, lon, accuracy;

		part = strtok_r(mutableCopy, ",", &end);
 8089522:	f006 fe2c 	bl	809017e <strtok_r>
		if (part) {
 8089526:	b328      	cbz	r0, 8089574 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x68>
			lat = atof(part);
 8089528:	f005 f8c4 	bl	808e6b4 <atof>
			part = strtok_r(NULL, ",", &end);
 808952c:	aa01      	add	r2, sp, #4
		char *part, *end;
		float lat, lon, accuracy;

		part = strtok_r(mutableCopy, ",", &end);
		if (part) {
			lat = atof(part);
 808952e:	4606      	mov	r6, r0
 8089530:	460f      	mov	r7, r1
			part = strtok_r(NULL, ",", &end);
 8089532:	2000      	movs	r0, #0
 8089534:	4912      	ldr	r1, [pc, #72]	; (8089580 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x74>)
 8089536:	f006 fe22 	bl	809017e <strtok_r>
			if (part) {
 808953a:	b1d8      	cbz	r0, 8089574 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x68>
				lon = atof(part);
 808953c:	f005 f8ba 	bl	808e6b4 <atof>
				part = strtok_r(NULL, ",", &end);
 8089540:	aa01      	add	r2, sp, #4
		part = strtok_r(mutableCopy, ",", &end);
		if (part) {
			lat = atof(part);
			part = strtok_r(NULL, ",", &end);
			if (part) {
				lon = atof(part);
 8089542:	4680      	mov	r8, r0
 8089544:	4689      	mov	r9, r1
				part = strtok_r(NULL, ",", &end);
 8089546:	2000      	movs	r0, #0
 8089548:	490d      	ldr	r1, [pc, #52]	; (8089580 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x74>)
 808954a:	f006 fe18 	bl	809017e <strtok_r>
				if (part) {
 808954e:	b188      	cbz	r0, 8089574 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x68>
					accuracy = atof(part);
 8089550:	f005 f8b0 	bl	808e6b4 <atof>

					(*callback)(lat, lon, accuracy);
 8089554:	f004 fb24 	bl	808dba0 <__aeabi_d2f>
 8089558:	4649      	mov	r1, r9
 808955a:	4682      	mov	sl, r0
 808955c:	4640      	mov	r0, r8
 808955e:	f004 fb1f 	bl	808dba0 <__aeabi_d2f>
 8089562:	4680      	mov	r8, r0
 8089564:	4639      	mov	r1, r7
 8089566:	4630      	mov	r0, r6
 8089568:	f004 fb1a 	bl	808dba0 <__aeabi_d2f>
 808956c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808956e:	4652      	mov	r2, sl
 8089570:	4641      	mov	r1, r8
 8089572:	4798      	blx	r3
				}
			}
		}

		free(mutableCopy);
 8089574:	4628      	mov	r0, r5
 8089576:	f001 fa45 	bl	808aa04 <free>
	}
}
 808957a:	b002      	add	sp, #8
 808957c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8089580:	08093eda 	.word	0x08093eda

08089584 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5>:

	return requestBuf;
}


const char *GoogleMapsDeviceLocator::cellularScan() {
 8089584:	b570      	push	{r4, r5, r6, lr}
};

/**
 * Used to hold the results for one cell (service or neighbor) from the AT+CGED command
 */
class CellularHelperEnvironmentCellData { // 44 bytes
 8089586:	f64f 74ff 	movw	r4, #65535	; 0xffff
 808958a:	b0ca      	sub	sp, #296	; 0x128
};

template <size_t MAX_NEIGHBOR_CELLS>
class CellularHelperEnvironmentResponseStatic : public CellularHelperEnvironmentResponse {
public:
	explicit CellularHelperEnvironmentResponseStatic() : CellularHelperEnvironmentResponse(staticNeighbors, MAX_NEIGHBOR_CELLS) {
 808958c:	2204      	movs	r2, #4
 808958e:	a91e      	add	r1, sp, #120	; 0x78
 8089590:	a805      	add	r0, sp, #20
 8089592:	f000 fb6d 	bl	8089c70 <_ZN33CellularHelperEnvironmentResponseC1EP33CellularHelperEnvironmentCellDataj>
 8089596:	4b31      	ldr	r3, [pc, #196]	; (808965c <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0xd8>)
 8089598:	a955      	add	r1, sp, #340	; 0x154
 808959a:	9305      	str	r3, [sp, #20]
};

/**
 * Used to hold the results for one cell (service or neighbor) from the AT+CGED command
 */
class CellularHelperEnvironmentCellData { // 44 bytes
 808959c:	22ff      	movs	r2, #255	; 0xff
 808959e:	ab29      	add	r3, sp, #164	; 0xa4
 80895a0:	2000      	movs	r0, #0
 80895a2:	f843 4c2c 	str.w	r4, [r3, #-44]
 80895a6:	f843 2c28 	str.w	r2, [r3, #-40]
 80895aa:	f803 0c10 	strb.w	r0, [r3, #-16]
 80895ae:	f843 2c04 	str.w	r2, [r3, #-4]
 80895b2:	332c      	adds	r3, #44	; 0x2c
};

template <size_t MAX_NEIGHBOR_CELLS>
class CellularHelperEnvironmentResponseStatic : public CellularHelperEnvironmentResponse {
public:
	explicit CellularHelperEnvironmentResponseStatic() : CellularHelperEnvironmentResponse(staticNeighbors, MAX_NEIGHBOR_CELLS) {
 80895b4:	428b      	cmp	r3, r1
 80895b6:	d1f4      	bne.n	80895a2 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0x1e>
	}

	// First try to get info on neighboring cells. This doesn't work for me using the U260
	CellularHelperEnvironmentResponseStatic<4> envResp;

	CellularHelper.getEnvironment(5, envResp);
 80895b8:	aa05      	add	r2, sp, #20
 80895ba:	2105      	movs	r1, #5
 80895bc:	4828      	ldr	r0, [pc, #160]	; (8089660 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0xdc>)
 80895be:	f000 fe53 	bl	808a268 <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse>

	if (envResp.resp != RESP_OK) {
 80895c2:	9b06      	ldr	r3, [sp, #24]
 80895c4:	3302      	adds	r3, #2
 80895c6:	d004      	beq.n	80895d2 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0x4e>
		// We couldn't get neighboring cells, so try just the receiving cell
		CellularHelper.getEnvironment(3, envResp);
 80895c8:	aa05      	add	r2, sp, #20
 80895ca:	2103      	movs	r1, #3
 80895cc:	4824      	ldr	r0, [pc, #144]	; (8089660 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0xdc>)
 80895ce:	f000 fe4b 	bl	808a268 <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse>
	}
	// envResp.serialDebug();


	// We know these things fit, so just using sprintf instead of snprintf here
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",",
 80895d2:	4c24      	ldr	r4, [pc, #144]	; (8089664 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0xe0>)
			CellularHelper.getOperatorName().c_str());
 80895d4:	2209      	movs	r2, #9
	}
	// envResp.serialDebug();


	// We know these things fit, so just using sprintf instead of snprintf here
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",",
 80895d6:	6825      	ldr	r5, [r4, #0]
			CellularHelper.getOperatorName().c_str());
 80895d8:	4921      	ldr	r1, [pc, #132]	; (8089660 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0xdc>)
 80895da:	a801      	add	r0, sp, #4
 80895dc:	f000 fe12 	bl	808a204 <_ZNK19CellularHelperClass15getOperatorNameEi>
 80895e0:	9a01      	ldr	r2, [sp, #4]
 80895e2:	4921      	ldr	r1, [pc, #132]	; (8089668 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0xe4>)
 80895e4:	4628      	mov	r0, r5
 80895e6:	f001 fa1d 	bl	808aa24 <sprintf>
 80895ea:	6823      	ldr	r3, [r4, #0]

	requestCur += sprintf(requestCur, "\"a\":[");

	cellularAddTower(&envResp.service);

	for(size_t ii = 0; ii < envResp.getNumNeighbors(); ii++) {
 80895ec:	2500      	movs	r5, #0
	// envResp.serialDebug();


	// We know these things fit, so just using sprintf instead of snprintf here
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",",
			CellularHelper.getOperatorName().c_str());
 80895ee:	4418      	add	r0, r3
 80895f0:	6020      	str	r0, [r4, #0]
 80895f2:	a801      	add	r0, sp, #4
 80895f4:	f001 fd9a 	bl	808b12c <_ZN6StringD1Ev>

	requestCur += sprintf(requestCur, "\"a\":[");
 80895f8:	6823      	ldr	r3, [r4, #0]
 80895fa:	491c      	ldr	r1, [pc, #112]	; (808966c <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0xe8>)
 80895fc:	4618      	mov	r0, r3
 80895fe:	f005 f9e5 	bl	808e9cc <strcpy>
 8089602:	4603      	mov	r3, r0

	cellularAddTower(&envResp.service);
 8089604:	a810      	add	r0, sp, #64	; 0x40

	// We know these things fit, so just using sprintf instead of snprintf here
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",",
			CellularHelper.getOperatorName().c_str());

	requestCur += sprintf(requestCur, "\"a\":[");
 8089606:	3305      	adds	r3, #5
 8089608:	6023      	str	r3, [r4, #0]

	cellularAddTower(&envResp.service);
 808960a:	f7ff ff43 	bl	8089494 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData>

	for(size_t ii = 0; ii < envResp.getNumNeighbors(); ii++) {
		cellularAddTower(&envResp.neighbors[ii]);
 808960e:	262c      	movs	r6, #44	; 0x2c

	requestCur += sprintf(requestCur, "\"a\":[");

	cellularAddTower(&envResp.service);

	for(size_t ii = 0; ii < envResp.getNumNeighbors(); ii++) {
 8089610:	a805      	add	r0, sp, #20
 8089612:	f000 fce7 	bl	8089fe4 <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv>
 8089616:	42a8      	cmp	r0, r5
 8089618:	d906      	bls.n	8089628 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0xa4>
		cellularAddTower(&envResp.neighbors[ii]);
 808961a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 808961c:	fb06 0005 	mla	r0, r6, r5, r0
 8089620:	f7ff ff38 	bl	8089494 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData>

	requestCur += sprintf(requestCur, "\"a\":[");

	cellularAddTower(&envResp.service);

	for(size_t ii = 0; ii < envResp.getNumNeighbors(); ii++) {
 8089624:	3501      	adds	r5, #1
 8089626:	e7f3      	b.n	8089610 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0x8c>
		cellularAddTower(&envResp.neighbors[ii]);
	}

	*requestCur++ = ']';
 8089628:	6823      	ldr	r3, [r4, #0]
 808962a:	225d      	movs	r2, #93	; 0x5d
 808962c:	701a      	strb	r2, [r3, #0]
	*requestCur++ = '}';
 808962e:	227d      	movs	r2, #125	; 0x7d
 8089630:	705a      	strb	r2, [r3, #1]
	*requestCur++ = '}';
 8089632:	709a      	strb	r2, [r3, #2]
	*requestCur++ = 0;
 8089634:	1d1a      	adds	r2, r3, #4
 8089636:	6022      	str	r2, [r4, #0]
 8089638:	2200      	movs	r2, #0
 808963a:	70da      	strb	r2, [r3, #3]

	if (numAdded == 0) {
 808963c:	4b0c      	ldr	r3, [pc, #48]	; (8089670 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0xec>)
 808963e:	681b      	ldr	r3, [r3, #0]
 8089640:	b90b      	cbnz	r3, 8089646 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0xc2>
		requestBuf[0] = 0;
 8089642:	4a0c      	ldr	r2, [pc, #48]	; (8089674 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0xf0>)
 8089644:	7013      	strb	r3, [r2, #0]
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 8089646:	4b0c      	ldr	r3, [pc, #48]	; (8089678 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0xf4>)
 8089648:	a80c      	add	r0, sp, #48	; 0x30
 808964a:	9305      	str	r3, [sp, #20]
 808964c:	f001 fd6e 	bl	808b12c <_ZN6StringD1Ev>
 8089650:	a808      	add	r0, sp, #32
 8089652:	f001 fd6b 	bl	808b12c <_ZN6StringD1Ev>
	}

	return requestBuf;
}
 8089656:	4807      	ldr	r0, [pc, #28]	; (8089674 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0xf0>)
 8089658:	b04a      	add	sp, #296	; 0x128
 808965a:	bd70      	pop	{r4, r5, r6, pc}
 808965c:	08093e98 	.word	0x08093e98
 8089660:	200010ec 	.word	0x200010ec
 8089664:	200010e8 	.word	0x200010e8
 8089668:	08093ecc 	.word	0x08093ecc
 808966c:	08093edc 	.word	0x08093edc
 8089670:	20000fe0 	.word	0x20000fe0
 8089674:	20000fe5 	.word	0x20000fe5
 8089678:	08094330 	.word	0x08094330

0808967c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 808967c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 808967e:	b538      	push	{r3, r4, r5, lr}
 8089680:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8089682:	d005      	beq.n	8089690 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x14>
 8089684:	2a03      	cmp	r2, #3
 8089686:	d00f      	beq.n	80896a8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x2c>
 8089688:	2a01      	cmp	r2, #1
 808968a:	d111      	bne.n	80896b0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x34>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 808968c:	680b      	ldr	r3, [r1, #0]
 808968e:	e009      	b.n	80896a4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x28>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8089690:	200c      	movs	r0, #12
 8089692:	680d      	ldr	r5, [r1, #0]
 8089694:	f7f6 fd01 	bl	808009a <_Znwj>
 8089698:	4603      	mov	r3, r0
 808969a:	b118      	cbz	r0, 80896a4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x28>
 808969c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80896a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80896a4:	6023      	str	r3, [r4, #0]
 80896a6:	e003      	b.n	80896b0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x34>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80896a8:	210c      	movs	r1, #12
 80896aa:	6800      	ldr	r0, [r0, #0]
 80896ac:	f003 fc7b 	bl	808cfa6 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80896b0:	2000      	movs	r0, #0
 80896b2:	bd38      	pop	{r3, r4, r5, pc}

080896b4 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80896b4:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80896b6:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80896b8:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80896ba:	b113      	cbz	r3, 80896c2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80896bc:	2203      	movs	r2, #3
 80896be:	4601      	mov	r1, r0
 80896c0:	4798      	blx	r3
    }
 80896c2:	4620      	mov	r0, r4
 80896c4:	bd10      	pop	{r4, pc}
	...

080896c8 <_ZN23GoogleMapsDeviceLocatorC1Ev>:

static char requestBuf[256];
static char *requestCur;
static int numAdded = 0;

GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
 80896c8:	b538      	push	{r3, r4, r5, lr}
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
 80896ca:	4b0f      	ldr	r3, [pc, #60]	; (8089708 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x40>)

static char requestBuf[256];
static char *requestCur;
static int numAdded = 0;

GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
 80896cc:	4604      	mov	r4, r0
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
 80896ce:	6003      	str	r3, [r0, #0]
 80896d0:	f242 7310 	movw	r3, #10000	; 0x2710
 80896d4:	2500      	movs	r5, #0
 80896d6:	6045      	str	r5, [r0, #4]
 80896d8:	6083      	str	r3, [r0, #8]
 80896da:	490c      	ldr	r1, [pc, #48]	; (808970c <_ZN23GoogleMapsDeviceLocatorC1Ev+0x44>)
 80896dc:	300c      	adds	r0, #12
 80896de:	f001 fd6c 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
 80896e2:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80896e6:	62a3      	str	r3, [r4, #40]	; 0x28
 80896e8:	61e5      	str	r5, [r4, #28]
 80896ea:	6225      	str	r5, [r4, #32]
 80896ec:	6265      	str	r5, [r4, #36]	; 0x24
 80896ee:	4908      	ldr	r1, [pc, #32]	; (8089710 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x48>)
 80896f0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80896f4:	f001 fd61 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
 80896f8:	f44f 739b 	mov.w	r3, #310	; 0x136
 80896fc:	63e3      	str	r3, [r4, #60]	; 0x3c
 80896fe:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 8089702:	6423      	str	r3, [r4, #64]	; 0x40

}
 8089704:	4620      	mov	r0, r4
 8089706:	bd38      	pop	{r3, r4, r5, pc}
 8089708:	08093ea4 	.word	0x08093ea4
 808970c:	08093ee2 	.word	0x08093ee2
 8089710:	08093ef0 	.word	0x08093ef0

08089714 <_ZN23GoogleMapsDeviceLocator18withLocatePeriodicEm>:
}

GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withLocatePeriodic(unsigned long secondsPeriodic) {
	locatorMode = LOCATOR_MODE_PERIODIC;
	if (secondsPeriodic < 5) {
		secondsPeriodic = 5;
 8089714:	2904      	cmp	r1, #4
 8089716:	bf98      	it	ls
 8089718:	2105      	movls	r1, #5
	locatorMode = LOCATOR_MODE_ONCE;
	return *this;
}

GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withLocatePeriodic(unsigned long secondsPeriodic) {
	locatorMode = LOCATOR_MODE_PERIODIC;
 808971a:	2302      	movs	r3, #2
 808971c:	6043      	str	r3, [r0, #4]
	if (secondsPeriodic < 5) {
		secondsPeriodic = 5;
	}
	periodMs = secondsPeriodic * 1000;
 808971e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8089722:	4359      	muls	r1, r3
 8089724:	6081      	str	r1, [r0, #8]
	return *this;
}
 8089726:	4770      	bx	lr

08089728 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv>:
		numAdded++;
	}

}

const char *GoogleMapsDeviceLocator::cellularScanLTE() {
 8089728:	b5f0      	push	{r4, r5, r6, r7, lr}
 808972a:	4d35      	ldr	r5, [pc, #212]	; (8089800 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xd8>)
 808972c:	b097      	sub	sp, #92	; 0x5c
 808972e:	ac16      	add	r4, sp, #88	; 0x58

/**
 * All response objects inherit from this, so the parse() method can be called
 * in the subclass, and also the resp and enableDebug members are always available.
 */
class CellularHelperCommonResponse {
 8089730:	2600      	movs	r6, #0
 8089732:	f06f 0302 	mvn.w	r3, #2
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 8089736:	f844 5d40 	str.w	r5, [r4, #-64]!
 808973a:	4607      	mov	r7, r0
 808973c:	4931      	ldr	r1, [pc, #196]	; (8089804 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xdc>)
 808973e:	a809      	add	r0, sp, #36	; 0x24

/**
 * All response objects inherit from this, so the parse() method can be called
 * in the subclass, and also the resp and enableDebug members are always available.
 */
class CellularHelperCommonResponse {
 8089740:	9307      	str	r3, [sp, #28]
 8089742:	f88d 6020 	strb.w	r6, [sp, #32]
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 8089746:	f001 fd38 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
 808974a:	492e      	ldr	r1, [pc, #184]	; (8089804 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xdc>)
 808974c:	a80d      	add	r0, sp, #52	; 0x34
 808974e:	f001 fd34 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>

	void postProcess();
	String toString() const;
};

class CellularHelperCREGResponse :  public CellularHelperPlusStringResponse {
 8089752:	4b2d      	ldr	r3, [pc, #180]	; (8089808 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xe0>)

	CellularHelperCREGResponse resp;
	CellularHelper.getCREG(resp);
 8089754:	4621      	mov	r1, r4
 8089756:	9306      	str	r3, [sp, #24]
 8089758:	f64f 73ff 	movw	r3, #65535	; 0xffff
 808975c:	482b      	ldr	r0, [pc, #172]	; (808980c <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xe4>)
 808975e:	9313      	str	r3, [sp, #76]	; 0x4c
 8089760:	f04f 33ff 	mov.w	r3, #4294967295
 8089764:	9314      	str	r3, [sp, #80]	; 0x50
 8089766:	f88d 6044 	strb.w	r6, [sp, #68]	; 0x44
 808976a:	9612      	str	r6, [sp, #72]	; 0x48
 808976c:	9615      	str	r6, [sp, #84]	; 0x54
 808976e:	f000 fd95 	bl	808a29c <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse>

	Serial.println(resp.toString().c_str());
 8089772:	f002 ffb9 	bl	808c6e8 <_Z16_fetch_usbserialv>
 8089776:	4606      	mov	r6, r0
 8089778:	4621      	mov	r1, r4
 808977a:	a802      	add	r0, sp, #8
 808977c:	f000 fc76 	bl	808a06c <_ZNK26CellularHelperCREGResponse8toStringEv>

	// We know these things fit, so just using sprintf instead of snprintf here
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",", oper.c_str());
 8089780:	4c23      	ldr	r4, [pc, #140]	; (8089810 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xe8>)
const char *GoogleMapsDeviceLocator::cellularScanLTE() {

	CellularHelperCREGResponse resp;
	CellularHelper.getCREG(resp);

	Serial.println(resp.toString().c_str());
 8089782:	9902      	ldr	r1, [sp, #8]
 8089784:	4630      	mov	r0, r6
 8089786:	f001 ff40 	bl	808b60a <_ZN5Print7printlnEPKc>
 808978a:	a802      	add	r0, sp, #8
 808978c:	f001 fcce 	bl	808b12c <_ZN6StringD1Ev>

	// We know these things fit, so just using sprintf instead of snprintf here
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",", oper.c_str());
 8089790:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8089792:	4920      	ldr	r1, [pc, #128]	; (8089814 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xec>)
 8089794:	6820      	ldr	r0, [r4, #0]
 8089796:	f001 f945 	bl	808aa24 <sprintf>
 808979a:	6823      	ldr	r3, [r4, #0]

	requestCur += sprintf(requestCur, "\"a\":[");
 808979c:	491e      	ldr	r1, [pc, #120]	; (8089818 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xf0>)
	CellularHelper.getCREG(resp);

	Serial.println(resp.toString().c_str());

	// We know these things fit, so just using sprintf instead of snprintf here
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",", oper.c_str());
 808979e:	4403      	add	r3, r0

	requestCur += sprintf(requestCur, "\"a\":[");
 80897a0:	4618      	mov	r0, r3
 80897a2:	f005 f913 	bl	808e9cc <strcpy>

	if (resp.valid) {
 80897a6:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
	Serial.println(resp.toString().c_str());

	// We know these things fit, so just using sprintf instead of snprintf here
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",", oper.c_str());

	requestCur += sprintf(requestCur, "\"a\":[");
 80897aa:	3005      	adds	r0, #5
 80897ac:	6020      	str	r0, [r4, #0]
 80897ae:	4e1b      	ldr	r6, [pc, #108]	; (808981c <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xf4>)

	if (resp.valid) {
 80897b0:	b173      	cbz	r3, 80897d0 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xa8>
		requestCur += sprintf(requestCur,
					"{\"i\":%d,\"l\":%u,\"c\":%d,\"n\":%d}",
					resp.ci, resp.lac, mcc, mnc);
 80897b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80897b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80897b6:	9301      	str	r3, [sp, #4]
 80897b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80897ba:	4919      	ldr	r1, [pc, #100]	; (8089820 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xf8>)
 80897bc:	9300      	str	r3, [sp, #0]
 80897be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80897c0:	f001 f930 	bl	808aa24 <sprintf>
 80897c4:	6823      	ldr	r3, [r4, #0]
 80897c6:	4418      	add	r0, r3

		numAdded++;
 80897c8:	6833      	ldr	r3, [r6, #0]
	requestCur += sprintf(requestCur, "\"a\":[");

	if (resp.valid) {
		requestCur += sprintf(requestCur,
					"{\"i\":%d,\"l\":%u,\"c\":%d,\"n\":%d}",
					resp.ci, resp.lac, mcc, mnc);
 80897ca:	6020      	str	r0, [r4, #0]

		numAdded++;
 80897cc:	3301      	adds	r3, #1
 80897ce:	6033      	str	r3, [r6, #0]
	}

	*requestCur++ = ']';
 80897d0:	6823      	ldr	r3, [r4, #0]
 80897d2:	225d      	movs	r2, #93	; 0x5d
 80897d4:	701a      	strb	r2, [r3, #0]
	*requestCur++ = '}';
 80897d6:	227d      	movs	r2, #125	; 0x7d
 80897d8:	705a      	strb	r2, [r3, #1]
	*requestCur++ = '}';
 80897da:	709a      	strb	r2, [r3, #2]
	*requestCur++ = 0;
 80897dc:	1d1a      	adds	r2, r3, #4
 80897de:	6022      	str	r2, [r4, #0]
 80897e0:	2200      	movs	r2, #0
 80897e2:	70da      	strb	r2, [r3, #3]



	if (numAdded == 0) {
 80897e4:	6833      	ldr	r3, [r6, #0]
 80897e6:	b90b      	cbnz	r3, 80897ec <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xc4>
		requestBuf[0] = 0;
 80897e8:	4a0e      	ldr	r2, [pc, #56]	; (8089824 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xfc>)
 80897ea:	7013      	strb	r3, [r2, #0]
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 80897ec:	a80d      	add	r0, sp, #52	; 0x34
 80897ee:	9506      	str	r5, [sp, #24]
 80897f0:	f001 fc9c 	bl	808b12c <_ZN6StringD1Ev>
 80897f4:	a809      	add	r0, sp, #36	; 0x24
 80897f6:	f001 fc99 	bl	808b12c <_ZN6StringD1Ev>
	}

	return requestBuf;
}
 80897fa:	480a      	ldr	r0, [pc, #40]	; (8089824 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xfc>)
 80897fc:	b017      	add	sp, #92	; 0x5c
 80897fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8089800:	08094330 	.word	0x08094330
 8089804:	08094308 	.word	0x08094308
 8089808:	08093e8c 	.word	0x08093e8c
 808980c:	200010ec 	.word	0x200010ec
 8089810:	200010e8 	.word	0x200010e8
 8089814:	08093ecc 	.word	0x08093ecc
 8089818:	08093edc 	.word	0x08093edc
 808981c:	20000fe0 	.word	0x20000fe0
 8089820:	08093eae 	.word	0x08093eae
 8089824:	20000fe5 	.word	0x20000fe5

08089828 <_ZN23GoogleMapsDeviceLocator12cellularScanEv>:


const char *GoogleMapsDeviceLocator::cellularScan() {

	requestCur = requestBuf;
 8089828:	4a0a      	ldr	r2, [pc, #40]	; (8089854 <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x2c>)
 808982a:	4b0b      	ldr	r3, [pc, #44]	; (8089858 <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x30>)

	return requestBuf;
}


const char *GoogleMapsDeviceLocator::cellularScan() {
 808982c:	b510      	push	{r4, lr}

	requestCur = requestBuf;
 808982e:	601a      	str	r2, [r3, #0]
	numAdded = 0;
 8089830:	4b0a      	ldr	r3, [pc, #40]	; (808985c <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x34>)

	return requestBuf;
}


const char *GoogleMapsDeviceLocator::cellularScan() {
 8089832:	4604      	mov	r4, r0

	requestCur = requestBuf;
	numAdded = 0;
 8089834:	2200      	movs	r2, #0

	if (CellularHelper.isLTE()) {
 8089836:	480a      	ldr	r0, [pc, #40]	; (8089860 <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x38>)


const char *GoogleMapsDeviceLocator::cellularScan() {

	requestCur = requestBuf;
	numAdded = 0;
 8089838:	601a      	str	r2, [r3, #0]

	if (CellularHelper.isLTE()) {
 808983a:	f000 fcc7 	bl	808a1cc <_ZNK19CellularHelperClass5isLTEEv>
 808983e:	b120      	cbz	r0, 808984a <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x22>
		return cellularScanLTE();
 8089840:	4620      	mov	r0, r4
	if (numAdded == 0) {
		requestBuf[0] = 0;
	}

	return requestBuf;
}
 8089842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

	requestCur = requestBuf;
	numAdded = 0;

	if (CellularHelper.isLTE()) {
		return cellularScanLTE();
 8089846:	f7ff bf6f 	b.w	8089728 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv>
	if (numAdded == 0) {
		requestBuf[0] = 0;
	}

	return requestBuf;
}
 808984a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808984e:	f7ff be99 	b.w	8089584 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5>
 8089852:	bf00      	nop
 8089854:	20000fe5 	.word	0x20000fe5
 8089858:	200010e8 	.word	0x200010e8
 808985c:	20000fe0 	.word	0x20000fe0
 8089860:	200010ec 	.word	0x200010ec

08089864 <_ZN23GoogleMapsDeviceLocator15publishLocationEv>:
	return cellularScan();
#endif
}


void GoogleMapsDeviceLocator::publishLocation() {
 8089864:	b530      	push	{r4, r5, lr}
 8089866:	4605      	mov	r5, r0
 8089868:	b085      	sub	sp, #20

	Serial.println("publishLocation");
 808986a:	f002 ff3d 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808986e:	4918      	ldr	r1, [pc, #96]	; (80898d0 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x6c>)
 8089870:	f001 fecb 	bl	808b60a <_ZN5Print7printlnEPKc>
const char *GoogleMapsDeviceLocator::scan() {
#if Wiring_WiFi
	return wifiScan();
#endif
#if Wiring_Cellular
	return cellularScan();
 8089874:	4628      	mov	r0, r5
 8089876:	f7ff ffd7 	bl	8089828 <_ZN23GoogleMapsDeviceLocator12cellularScanEv>
 808987a:	4604      	mov	r4, r0

	Serial.println("publishLocation");

	const char *scanData = scan();

	Serial.printlnf("scanData=%s", scanData);
 808987c:	f002 ff34 	bl	808c6e8 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
 8089880:	4623      	mov	r3, r4
 8089882:	4a14      	ldr	r2, [pc, #80]	; (80898d4 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x70>)
 8089884:	2101      	movs	r1, #1
 8089886:	f001 fff5 	bl	808b874 <_ZN5Print11printf_implEbPKcz>

	if (scanData[0]) {
 808988a:	7823      	ldrb	r3, [r4, #0]
 808988c:	b1f3      	cbz	r3, 80898cc <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808988e:	f001 f881 	bl	808a994 <spark_cloud_flag_connected>

		if (Particle.connected()) {
 8089892:	b1d8      	cbz	r0, 80898cc <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>
 8089894:	4b10      	ldr	r3, [pc, #64]	; (80898d8 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x74>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8089896:	4622      	mov	r2, r4
 8089898:	781b      	ldrb	r3, [r3, #0]
 808989a:	68e9      	ldr	r1, [r5, #12]
 808989c:	f88d 3000 	strb.w	r3, [sp]
 80898a0:	a802      	add	r0, sp, #8
 80898a2:	233c      	movs	r3, #60	; 0x3c
 80898a4:	f002 fcfa 	bl	808c29c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80898a8:	9c03      	ldr	r4, [sp, #12]
 80898aa:	b17c      	cbz	r4, 80898cc <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80898ac:	6863      	ldr	r3, [r4, #4]
 80898ae:	3b01      	subs	r3, #1
 80898b0:	6063      	str	r3, [r4, #4]
 80898b2:	b95b      	cbnz	r3, 80898cc <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>
        {
          _M_dispose();
 80898b4:	6823      	ldr	r3, [r4, #0]
 80898b6:	4620      	mov	r0, r4
 80898b8:	689b      	ldr	r3, [r3, #8]
 80898ba:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80898bc:	68a3      	ldr	r3, [r4, #8]
 80898be:	3b01      	subs	r3, #1
 80898c0:	60a3      	str	r3, [r4, #8]
 80898c2:	b91b      	cbnz	r3, 80898cc <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>
            _M_destroy();
 80898c4:	6823      	ldr	r3, [r4, #0]
 80898c6:	4620      	mov	r0, r4
 80898c8:	68db      	ldr	r3, [r3, #12]
 80898ca:	4798      	blx	r3
			Particle.publish(eventName, scanData, PRIVATE);
		}
	}
}
 80898cc:	b005      	add	sp, #20
 80898ce:	bd30      	pop	{r4, r5, pc}
 80898d0:	08093ef5 	.word	0x08093ef5
 80898d4:	08093f05 	.word	0x08093f05
 80898d8:	20000fe4 	.word	0x20000fe4

080898dc <_ZN23GoogleMapsDeviceLocator4loopEv>:
	return *this;
}



void GoogleMapsDeviceLocator::loop() {
 80898dc:	b510      	push	{r4, lr}
	switch(state) {
 80898de:	6a03      	ldr	r3, [r0, #32]
	return *this;
}



void GoogleMapsDeviceLocator::loop() {
 80898e0:	4604      	mov	r4, r0
	switch(state) {
 80898e2:	2b02      	cmp	r3, #2
 80898e4:	d00b      	beq.n	80898fe <_ZN23GoogleMapsDeviceLocator4loopEv+0x22>
 80898e6:	2b03      	cmp	r3, #3
 80898e8:	d023      	beq.n	8089932 <_ZN23GoogleMapsDeviceLocator4loopEv+0x56>
 80898ea:	2b00      	cmp	r3, #0
 80898ec:	d134      	bne.n	8089958 <_ZN23GoogleMapsDeviceLocator4loopEv+0x7c>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80898ee:	f001 f851 	bl	808a994 <spark_cloud_flag_connected>
	case CONNECT_WAIT_STATE:
		if (Particle.connected()) {
 80898f2:	b388      	cbz	r0, 8089958 <_ZN23GoogleMapsDeviceLocator4loopEv+0x7c>
			state = CONNECTED_WAIT_STATE;
 80898f4:	2302      	movs	r3, #2
 80898f6:	6223      	str	r3, [r4, #32]
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80898f8:	f000 fe36 	bl	808a568 <HAL_Timer_Get_Milli_Seconds>
 80898fc:	e017      	b.n	808992e <_ZN23GoogleMapsDeviceLocator4loopEv+0x52>
 80898fe:	f000 fe33 	bl	808a568 <HAL_Timer_Get_Milli_Seconds>
			stateTime = millis();
		}
		break;

	case CONNECTED_WAIT_STATE:
		if (millis() - stateTime >= waitAfterConnect) {
 8089902:	69e3      	ldr	r3, [r4, #28]
 8089904:	1ac0      	subs	r0, r0, r3
 8089906:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8089908:	4298      	cmp	r0, r3
 808990a:	d325      	bcc.n	8089958 <_ZN23GoogleMapsDeviceLocator4loopEv+0x7c>
			// Wait several seconds after connecting before doing the location
			if (locatorMode == LOCATOR_MODE_ONCE) {
 808990c:	6863      	ldr	r3, [r4, #4]
 808990e:	2b01      	cmp	r3, #1
 8089910:	d103      	bne.n	808991a <_ZN23GoogleMapsDeviceLocator4loopEv+0x3e>
				publishLocation();
 8089912:	4620      	mov	r0, r4
 8089914:	f7ff ffa6 	bl	8089864 <_ZN23GoogleMapsDeviceLocator15publishLocationEv>
 8089918:	e000      	b.n	808991c <_ZN23GoogleMapsDeviceLocator4loopEv+0x40>

				state = IDLE_STATE;
			}
			else
			if (locatorMode == LOCATOR_MODE_MANUAL) {
 808991a:	b913      	cbnz	r3, 8089922 <_ZN23GoogleMapsDeviceLocator4loopEv+0x46>
				state = IDLE_STATE;
 808991c:	2304      	movs	r3, #4
 808991e:	6223      	str	r3, [r4, #32]
 8089920:	bd10      	pop	{r4, pc}
			}
			else {
				state = CONNECTED_STATE;
 8089922:	2303      	movs	r3, #3
 8089924:	6223      	str	r3, [r4, #32]
 8089926:	f000 fe1f 	bl	808a568 <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis() - periodMs;
 808992a:	68a3      	ldr	r3, [r4, #8]
 808992c:	1ac0      	subs	r0, r0, r3
 808992e:	61e0      	str	r0, [r4, #28]
 8089930:	bd10      	pop	{r4, pc}
 8089932:	f001 f82f 	bl	808a994 <spark_cloud_flag_connected>
			}
		}
		break;

	case CONNECTED_STATE:
		if (Particle.connected()) {
 8089936:	b170      	cbz	r0, 8089956 <_ZN23GoogleMapsDeviceLocator4loopEv+0x7a>
 8089938:	f000 fe16 	bl	808a568 <HAL_Timer_Get_Milli_Seconds>
			if (millis() - stateTime >= periodMs) {
 808993c:	69e3      	ldr	r3, [r4, #28]
 808993e:	1ac0      	subs	r0, r0, r3
 8089940:	68a3      	ldr	r3, [r4, #8]
 8089942:	4298      	cmp	r0, r3
 8089944:	d308      	bcc.n	8089958 <_ZN23GoogleMapsDeviceLocator4loopEv+0x7c>
 8089946:	f000 fe0f 	bl	808a568 <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis();
 808994a:	61e0      	str	r0, [r4, #28]
				publishLocation();
 808994c:	4620      	mov	r0, r4
	case IDLE_STATE:
		// Just hang out here forever (entered only on LOCATOR_MODE_ONCE)
		break;
	}

}
 808994e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

	case CONNECTED_STATE:
		if (Particle.connected()) {
			if (millis() - stateTime >= periodMs) {
				stateTime = millis();
				publishLocation();
 8089952:	f7ff bf87 	b.w	8089864 <_ZN23GoogleMapsDeviceLocator15publishLocationEv>
			}
		}
		else {
			// We have disconnected, rec
			state = CONNECT_WAIT_STATE;
 8089956:	6220      	str	r0, [r4, #32]
 8089958:	bd10      	pop	{r4, pc}

0808995a <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 808995a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808995c:	2300      	movs	r3, #0
 808995e:	6083      	str	r3, [r0, #8]
 8089960:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8089962:	4604      	mov	r4, r0
 8089964:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8089966:	b12b      	cbz	r3, 8089974 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8089968:	2202      	movs	r2, #2
 808996a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 808996c:	68eb      	ldr	r3, [r5, #12]
 808996e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8089970:	68ab      	ldr	r3, [r5, #8]
 8089972:	60a3      	str	r3, [r4, #8]
	}
    }
 8089974:	4620      	mov	r0, r4
 8089976:	bd38      	pop	{r3, r4, r5, pc}

08089978 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE>:
GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withEventName(const char *name) {
	this->eventName = name;
	return *this;
}

GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withSubscribe(GoogleMapsDeviceLocatorSubscriptionCallback callback) {
 8089978:	b530      	push	{r4, r5, lr}
 808997a:	b08b      	sub	sp, #44	; 0x2c
 808997c:	68c5      	ldr	r5, [r0, #12]
	this->callback = callback;
 808997e:	6241      	str	r1, [r0, #36]	; 0x24
GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withEventName(const char *name) {
	this->eventName = name;
	return *this;
}

GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withSubscribe(GoogleMapsDeviceLocatorSubscriptionCallback callback) {
 8089980:	4604      	mov	r4, r0
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
 8089982:	a806      	add	r0, sp, #24
 8089984:	f001 f80e 	bl	808a9a4 <spark_deviceID>
	this->callback = callback;

	snprintf(requestBuf, sizeof(requestBuf), "hook-response/%s/%s", eventName.c_str(), System.deviceID().c_str());
 8089988:	9b06      	ldr	r3, [sp, #24]
 808998a:	4a1c      	ldr	r2, [pc, #112]	; (80899fc <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x84>)
 808998c:	9300      	str	r3, [sp, #0]
 808998e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8089992:	462b      	mov	r3, r5
 8089994:	481a      	ldr	r0, [pc, #104]	; (8089a00 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x88>)
 8089996:	f001 f865 	bl	808aa64 <snprintf>
 808999a:	a806      	add	r0, sp, #24
 808999c:	f001 fbc6 	bl	808b12c <_ZN6StringD1Ev>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80899a0:	2500      	movs	r5, #0
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80899a2:	200c      	movs	r0, #12
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80899a4:	9504      	str	r5, [sp, #16]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80899a6:	f7f6 fb78 	bl	808009a <_Znwj>
 80899aa:	b118      	cbz	r0, 80899b4 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x3c>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
 80899ac:	4b15      	ldr	r3, [pc, #84]	; (8089a04 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x8c>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80899ae:	6084      	str	r4, [r0, #8]
 80899b0:	e880 0028 	stmia.w	r0, {r3, r5}
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80899b4:	4b14      	ldr	r3, [pc, #80]	; (8089a08 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x90>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80899b6:	9002      	str	r0, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80899b8:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 80899ba:	4b14      	ldr	r3, [pc, #80]	; (8089a0c <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x94>)
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, MY_DEVICES, deviceID, NULL), false);
    }

    bool subscribe(const char *eventName, wiring_event_handler_t handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return subscribe_wiring(eventName, handler, scope);
 80899bc:	a902      	add	r1, sp, #8
 80899be:	a806      	add	r0, sp, #24
 80899c0:	9304      	str	r3, [sp, #16]
 80899c2:	f7ff ffca 	bl	808995a <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
    {
#ifdef SPARK_NO_CLOUD
        return false;
#else
        bool success = false;
        if (handler) // if the call-wrapper has wrapped a callable object
 80899c6:	9b08      	ldr	r3, [sp, #32]
 80899c8:	b17b      	cbz	r3, 80899ea <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x72>
        {
            auto wrapper = new wiring_event_handler_t(handler);
 80899ca:	2010      	movs	r0, #16
 80899cc:	f7f6 fb65 	bl	808009a <_Znwj>
 80899d0:	4605      	mov	r5, r0
 80899d2:	b150      	cbz	r0, 80899ea <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x72>
 80899d4:	a906      	add	r1, sp, #24
 80899d6:	f7ff ffc0 	bl	808995a <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
            if (wrapper) {
                success = spark_subscribe(eventName, (EventHandler)call_wiring_event_handler, wrapper, scope, deviceID, NULL);
 80899da:	2300      	movs	r3, #0
 80899dc:	9301      	str	r3, [sp, #4]
 80899de:	9300      	str	r3, [sp, #0]
 80899e0:	462a      	mov	r2, r5
 80899e2:	490b      	ldr	r1, [pc, #44]	; (8089a10 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x98>)
 80899e4:	4806      	ldr	r0, [pc, #24]	; (8089a00 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x88>)
 80899e6:	f000 ffed 	bl	808a9c4 <spark_subscribe>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80899ea:	a806      	add	r0, sp, #24
 80899ec:	f7ff fe62 	bl	80896b4 <_ZNSt14_Function_baseD1Ev>
 80899f0:	a802      	add	r0, sp, #8
 80899f2:	f7ff fe5f 	bl	80896b4 <_ZNSt14_Function_baseD1Ev>

	Particle.subscribe(requestBuf, &GoogleMapsDeviceLocator::subscriptionHandler, this, MY_DEVICES);

	return *this;
}
 80899f6:	4620      	mov	r0, r4
 80899f8:	b00b      	add	sp, #44	; 0x2c
 80899fa:	bd30      	pop	{r4, r5, pc}
 80899fc:	08093f11 	.word	0x08093f11
 8089a00:	20000fe5 	.word	0x20000fe5
 8089a04:	0808950d 	.word	0x0808950d
 8089a08:	0808943d 	.word	0x0808943d
 8089a0c:	0808967d 	.word	0x0808967d
 8089a10:	0808c06b 	.word	0x0808c06b

08089a14 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev>:
 8089a14:	4b02      	ldr	r3, [pc, #8]	; (8089a20 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev+0xc>)
 8089a16:	2201      	movs	r2, #1
 8089a18:	701a      	strb	r2, [r3, #0]
 8089a1a:	f000 bcf5 	b.w	808a408 <HAL_Pin_Map>
 8089a1e:	bf00      	nop
 8089a20:	20000fe4 	.word	0x20000fe4

08089a24 <_ZN19CellularHelperClass16responseCallbackEiPKciPv>:
	}
	return bars;
}

// static
int CellularHelperClass::responseCallback(int type, const char* buf, int len, void *param) {
 8089a24:	b430      	push	{r4, r5}
 8089a26:	461c      	mov	r4, r3
	CellularHelperCommonResponse *presp = (CellularHelperCommonResponse *)param;

	return presp->parse(type, buf, len);
 8089a28:	681b      	ldr	r3, [r3, #0]
 8089a2a:	681d      	ldr	r5, [r3, #0]
 8089a2c:	4613      	mov	r3, r2
 8089a2e:	46ac      	mov	ip, r5
 8089a30:	460a      	mov	r2, r1
 8089a32:	4601      	mov	r1, r0
 8089a34:	4620      	mov	r0, r4
}
 8089a36:	bc30      	pop	{r4, r5}

// static
int CellularHelperClass::responseCallback(int type, const char* buf, int len, void *param) {
	CellularHelperCommonResponse *presp = (CellularHelperCommonResponse *)param;

	return presp->parse(type, buf, len);
 8089a38:	4760      	bx	ip
	...

08089a3c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>:
static LogClass Log;
#endif

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
 8089a3c:	b570      	push	{r4, r5, r6, lr}
 8089a3e:	460c      	mov	r4, r1
 8089a40:	b08c      	sub	sp, #48	; 0x30
	String typeStr;
 8089a42:	494c      	ldr	r1, [pc, #304]	; (8089b74 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x138>)
 8089a44:	a804      	add	r0, sp, #16
static LogClass Log;
#endif

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
 8089a46:	4615      	mov	r5, r2
 8089a48:	461e      	mov	r6, r3
	String typeStr;
 8089a4a:	f001 fbb6 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
	switch(type) {
 8089a4e:	f5b4 1f10 	cmp.w	r4, #2359296	; 0x240000
 8089a52:	d035      	beq.n	8089ac0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x84>
 8089a54:	dc13      	bgt.n	8089a7e <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x42>
 8089a56:	f5b4 1f90 	cmp.w	r4, #1179648	; 0x120000
 8089a5a:	d028      	beq.n	8089aae <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x72>
 8089a5c:	dc05      	bgt.n	8089a6a <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x2e>
 8089a5e:	b324      	cbz	r4, 8089aaa <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x6e>
 8089a60:	f5b4 1f88 	cmp.w	r4, #1114112	; 0x110000
 8089a64:	d136      	bne.n	8089ad4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
	case TYPE_UNKNOWN:
		typeStr = "TYPE_UNKNOWN";
		break;

	case TYPE_OK:
		typeStr = "TYPE_OK";
 8089a66:	4944      	ldr	r1, [pc, #272]	; (8089b78 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x13c>)
 8089a68:	e022      	b.n	8089ab0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
	String typeStr;
	switch(type) {
 8089a6a:	f5b4 1f08 	cmp.w	r4, #2228224	; 0x220000
 8089a6e:	d023      	beq.n	8089ab8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x7c>
 8089a70:	f5b4 1f0c 	cmp.w	r4, #2293760	; 0x230000
 8089a74:	d022      	beq.n	8089abc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x80>
 8089a76:	f5b4 1f04 	cmp.w	r4, #2162688	; 0x210000
 8089a7a:	d12b      	bne.n	8089ad4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
 8089a7c:	e017      	b.n	8089aae <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x72>
 8089a7e:	f5b4 1f40 	cmp.w	r4, #3145728	; 0x300000
 8089a82:	d021      	beq.n	8089ac8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
 8089a84:	dc07      	bgt.n	8089a96 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x5a>
 8089a86:	f5b4 1f14 	cmp.w	r4, #2424832	; 0x250000
 8089a8a:	d01b      	beq.n	8089ac4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x88>
 8089a8c:	f5b4 1f18 	cmp.w	r4, #2490368	; 0x260000
 8089a90:	d120      	bne.n	8089ad4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
	case TYPE_BUSY:
		typeStr = "TYPE_BUSY";
		break;

	case TYPE_NOANSWER:
		typeStr = "TYPE_NOANSWER";
 8089a92:	493a      	ldr	r1, [pc, #232]	; (8089b7c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x140>)
 8089a94:	e00c      	b.n	8089ab0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
	String typeStr;
	switch(type) {
 8089a96:	f5b4 0fa0 	cmp.w	r4, #5242880	; 0x500000
 8089a9a:	d017      	beq.n	8089acc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x90>
 8089a9c:	f5b4 0fc0 	cmp.w	r4, #6291456	; 0x600000
 8089aa0:	d016      	beq.n	8089ad0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x94>
 8089aa2:	f5b4 0f80 	cmp.w	r4, #4194304	; 0x400000
 8089aa6:	d115      	bne.n	8089ad4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
 8089aa8:	e010      	b.n	8089acc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x90>
	case TYPE_UNKNOWN:
		typeStr = "TYPE_UNKNOWN";
 8089aaa:	4935      	ldr	r1, [pc, #212]	; (8089b80 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x144>)
 8089aac:	e000      	b.n	8089ab0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
	case TYPE_ERROR:
		typeStr = "TYPE_ERROR";
		break;

	case TYPE_RING:
		typeStr = "TYPE_ERROR";
 8089aae:	4935      	ldr	r1, [pc, #212]	; (8089b84 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x148>)
	case TYPE_UNKNOWN:
		typeStr = "TYPE_UNKNOWN";
		break;

	case TYPE_OK:
		typeStr = "TYPE_OK";
 8089ab0:	a804      	add	r0, sp, #16
 8089ab2:	f001 fbd4 	bl	808b25e <_ZN6StringaSEPKc>
		break;
 8089ab6:	e019      	b.n	8089aec <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xb0>
	case TYPE_RING:
		typeStr = "TYPE_ERROR";
		break;

	case TYPE_CONNECT:
		typeStr = "TYPE_CONNECT";
 8089ab8:	4933      	ldr	r1, [pc, #204]	; (8089b88 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x14c>)
 8089aba:	e7f9      	b.n	8089ab0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	case TYPE_NOCARRIER:
		typeStr = "TYPE_NOCARRIER";
 8089abc:	4933      	ldr	r1, [pc, #204]	; (8089b8c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x150>)
 8089abe:	e7f7      	b.n	8089ab0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	case TYPE_NODIALTONE:
		typeStr = "TYPE_NODIALTONE";
 8089ac0:	4933      	ldr	r1, [pc, #204]	; (8089b90 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x154>)
 8089ac2:	e7f5      	b.n	8089ab0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	case TYPE_BUSY:
		typeStr = "TYPE_BUSY";
 8089ac4:	4933      	ldr	r1, [pc, #204]	; (8089b94 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x158>)
 8089ac6:	e7f3      	b.n	8089ab0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
	case TYPE_NOANSWER:
		typeStr = "TYPE_NOANSWER";
		break;

	case TYPE_PROMPT:
		typeStr = "TYPE_PROMPT";
 8089ac8:	4933      	ldr	r1, [pc, #204]	; (8089b98 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x15c>)
 8089aca:	e7f1      	b.n	8089ab0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
	case TYPE_PLUS:
		typeStr = "TYPE_PLUS";
		break;

	case TYPE_TEXT:
		typeStr = "TYPE_PLUS";
 8089acc:	4933      	ldr	r1, [pc, #204]	; (8089b9c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x160>)
 8089ace:	e7ef      	b.n	8089ab0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	case TYPE_ABORTED:
		typeStr = "TYPE_ABORTED";
 8089ad0:	4933      	ldr	r1, [pc, #204]	; (8089ba0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x164>)
 8089ad2:	e7ed      	b.n	8089ab0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	default:
		typeStr = String::format("type=0x%x", type);
 8089ad4:	4622      	mov	r2, r4
 8089ad6:	4933      	ldr	r1, [pc, #204]	; (8089ba4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x168>)
 8089ad8:	a808      	add	r0, sp, #32
 8089ada:	f001 fd45 	bl	808b568 <_ZN6String6formatEPKcz>
 8089ade:	a908      	add	r1, sp, #32
 8089ae0:	a804      	add	r0, sp, #16
 8089ae2:	f001 fbb4 	bl	808b24e <_ZN6StringaSEOS_>
 8089ae6:	a808      	add	r0, sp, #32
 8089ae8:	f001 fb20 	bl	808b12c <_ZN6StringD1Ev>
		break;
	}

	Log.info("cellular response type=%s len=%d", typeStr.c_str(), len);
 8089aec:	4633      	mov	r3, r6
 8089aee:	9a04      	ldr	r2, [sp, #16]
 8089af0:	492d      	ldr	r1, [pc, #180]	; (8089ba8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x16c>)
 8089af2:	482e      	ldr	r0, [pc, #184]	; (8089bac <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
 8089af4:	f7f7 f956 	bl	8080da4 <_ZNK5spark6Logger4infoEPKcz>
	String out;
 8089af8:	491e      	ldr	r1, [pc, #120]	; (8089b74 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x138>)
 8089afa:	a808      	add	r0, sp, #32
 8089afc:	f001 fb5d 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
 8089b00:	462c      	mov	r4, r5
	for(int ii = 0; ii < len; ii++) {
 8089b02:	1b63      	subs	r3, r4, r5
 8089b04:	429e      	cmp	r6, r3
 8089b06:	dd27      	ble.n	8089b58 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x11c>
		if (buf[ii] == '\n') {
 8089b08:	f814 3b01 	ldrb.w	r3, [r4], #1
 8089b0c:	2b0a      	cmp	r3, #10
 8089b0e:	d10c      	bne.n	8089b2a <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xee>
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8089b10:	4927      	ldr	r1, [pc, #156]	; (8089bb0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x174>)
 8089b12:	a808      	add	r0, sp, #32
 8089b14:	f001 fc33 	bl	808b37e <_ZN6String6concatEPKc>
			out += "\\n";
			Log.info(out);
 8089b18:	9908      	ldr	r1, [sp, #32]
 8089b1a:	4824      	ldr	r0, [pc, #144]	; (8089bac <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
 8089b1c:	f7f7 f942 	bl	8080da4 <_ZNK5spark6Logger4infoEPKcz>
			out = "";
 8089b20:	4914      	ldr	r1, [pc, #80]	; (8089b74 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x138>)
 8089b22:	a808      	add	r0, sp, #32
 8089b24:	f001 fb9b 	bl	808b25e <_ZN6StringaSEPKc>
 8089b28:	e7eb      	b.n	8089b02 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xc6>
		}
		else
		if (buf[ii] == '\r') {
 8089b2a:	2b0d      	cmp	r3, #13
 8089b2c:	d101      	bne.n	8089b32 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xf6>
 8089b2e:	4921      	ldr	r1, [pc, #132]	; (8089bb4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x178>)
 8089b30:	e009      	b.n	8089b46 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x10a>
			out += "\\r";
		}
		else
		if (buf[ii] < ' ' || buf[ii] >= 127) {
 8089b32:	f1a3 0220 	sub.w	r2, r3, #32
 8089b36:	2a5e      	cmp	r2, #94	; 0x5e
 8089b38:	d909      	bls.n	8089b4e <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x112>
			char hex[10];
			snprintf(hex, sizeof(hex), "0x%02x", buf[ii]);
 8089b3a:	210a      	movs	r1, #10
 8089b3c:	4a1e      	ldr	r2, [pc, #120]	; (8089bb8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x17c>)
 8089b3e:	a801      	add	r0, sp, #4
 8089b40:	f000 ff90 	bl	808aa64 <snprintf>
			out.concat(hex);
 8089b44:	a901      	add	r1, sp, #4
 8089b46:	a808      	add	r0, sp, #32
 8089b48:	f001 fc19 	bl	808b37e <_ZN6String6concatEPKc>
 8089b4c:	e7d9      	b.n	8089b02 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xc6>
		}
		else {
			out.concat(buf[ii]);
 8089b4e:	4619      	mov	r1, r3
 8089b50:	a808      	add	r0, sp, #32
 8089b52:	f001 fc23 	bl	808b39c <_ZN6String6concatEc>
		break;
	}

	Log.info("cellular response type=%s len=%d", typeStr.c_str(), len);
	String out;
	for(int ii = 0; ii < len; ii++) {
 8089b56:	e7d4      	b.n	8089b02 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xc6>
		}
		else {
			out.concat(buf[ii]);
		}
	}
	if (out.length() > 0) {
 8089b58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8089b5a:	b11b      	cbz	r3, 8089b64 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x128>
		Log.info(out);
 8089b5c:	9908      	ldr	r1, [sp, #32]
 8089b5e:	4813      	ldr	r0, [pc, #76]	; (8089bac <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
 8089b60:	f7f7 f920 	bl	8080da4 <_ZNK5spark6Logger4infoEPKcz>
		typeStr = String::format("type=0x%x", type);
		break;
	}

	Log.info("cellular response type=%s len=%d", typeStr.c_str(), len);
	String out;
 8089b64:	a808      	add	r0, sp, #32
 8089b66:	f001 fae1 	bl	808b12c <_ZN6StringD1Ev>
#endif

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
	String typeStr;
 8089b6a:	a804      	add	r0, sp, #16
 8089b6c:	f001 fade 	bl	808b12c <_ZN6StringD1Ev>
		}
	}
	if (out.length() > 0) {
		Log.info(out);
	}
}
 8089b70:	b00c      	add	sp, #48	; 0x30
 8089b72:	bd70      	pop	{r4, r5, r6, pc}
 8089b74:	08094308 	.word	0x08094308
 8089b78:	08093f41 	.word	0x08093f41
 8089b7c:	08093f8a 	.word	0x08093f8a
 8089b80:	08093f34 	.word	0x08093f34
 8089b84:	08093f49 	.word	0x08093f49
 8089b88:	08093f54 	.word	0x08093f54
 8089b8c:	08093f61 	.word	0x08093f61
 8089b90:	08093f70 	.word	0x08093f70
 8089b94:	08093f80 	.word	0x08093f80
 8089b98:	08093f98 	.word	0x08093f98
 8089b9c:	08093fa4 	.word	0x08093fa4
 8089ba0:	08093fae 	.word	0x08093fae
 8089ba4:	08093fbb 	.word	0x08093fbb
 8089ba8:	08093fc5 	.word	0x08093fc5
 8089bac:	200010f4 	.word	0x200010f4
 8089bb0:	08093fe6 	.word	0x08093fe6
 8089bb4:	08093fe9 	.word	0x08093fe9
 8089bb8:	08093fec 	.word	0x08093fec

08089bbc <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb>:
		}
	}
	return WAIT;
}

String CellularHelperPlusStringResponse::getDoubleQuotedPart(bool onlyFirst) const {
 8089bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8089bc0:	460f      	mov	r7, r1
 8089bc2:	4606      	mov	r6, r0
	String result;
 8089bc4:	4914      	ldr	r1, [pc, #80]	; (8089c18 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x5c>)
		}
	}
	return WAIT;
}

String CellularHelperPlusStringResponse::getDoubleQuotedPart(bool onlyFirst) const {
 8089bc6:	4690      	mov	r8, r2
	String result;
	bool inQuoted = false;

	result.reserve(string.length());

	for(size_t ii = 0; ii < string.length(); ii++) {
 8089bc8:	2500      	movs	r5, #0
	}
	return WAIT;
}

String CellularHelperPlusStringResponse::getDoubleQuotedPart(bool onlyFirst) const {
	String result;
 8089bca:	f001 faf6 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
	bool inQuoted = false;

	result.reserve(string.length());
 8089bce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8089bd0:	4630      	mov	r0, r6
 8089bd2:	f001 fac9 	bl	808b168 <_ZN6String7reserveEj>
	return WAIT;
}

String CellularHelperPlusStringResponse::getDoubleQuotedPart(bool onlyFirst) const {
	String result;
	bool inQuoted = false;
 8089bd6:	462c      	mov	r4, r5

	result.reserve(string.length());

	for(size_t ii = 0; ii < string.length(); ii++) {
		char ch = string.charAt(ii);
 8089bd8:	f107 091c 	add.w	r9, r7, #28
	String result;
	bool inQuoted = false;

	result.reserve(string.length());

	for(size_t ii = 0; ii < string.length(); ii++) {
 8089bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8089bde:	429d      	cmp	r5, r3
 8089be0:	d216      	bcs.n	8089c10 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x54>
		char ch = string.charAt(ii);
 8089be2:	4629      	mov	r1, r5
 8089be4:	4648      	mov	r0, r9
 8089be6:	f001 fc77 	bl	808b4d8 <_ZNK6String6charAtEj>
		if (ch == '"') {
 8089bea:	2822      	cmp	r0, #34	; 0x22
	bool inQuoted = false;

	result.reserve(string.length());

	for(size_t ii = 0; ii < string.length(); ii++) {
		char ch = string.charAt(ii);
 8089bec:	4601      	mov	r1, r0
		if (ch == '"') {
 8089bee:	d107      	bne.n	8089c00 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x44>
			inQuoted = !inQuoted;
 8089bf0:	f084 0301 	eor.w	r3, r4, #1
 8089bf4:	b2db      	uxtb	r3, r3
			if (!inQuoted && onlyFirst) {
 8089bf6:	b144      	cbz	r4, 8089c0a <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x4e>
 8089bf8:	f1b8 0f00 	cmp.w	r8, #0
 8089bfc:	d005      	beq.n	8089c0a <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x4e>
 8089bfe:	e007      	b.n	8089c10 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x54>
				break;
			}
		}
		else {
			if (inQuoted) {
 8089c00:	b114      	cbz	r4, 8089c08 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x4c>
				result.concat(ch);
 8089c02:	4630      	mov	r0, r6
 8089c04:	f001 fbca 	bl	808b39c <_ZN6String6concatEc>
 8089c08:	4623      	mov	r3, r4
	String result;
	bool inQuoted = false;

	result.reserve(string.length());

	for(size_t ii = 0; ii < string.length(); ii++) {
 8089c0a:	3501      	adds	r5, #1
 8089c0c:	461c      	mov	r4, r3
 8089c0e:	e7e5      	b.n	8089bdc <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x20>
			}
		}
	}

	return result;
}
 8089c10:	4630      	mov	r0, r6
 8089c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8089c16:	bf00      	nop
 8089c18:	08094308 	.word	0x08094308

08089c1c <_ZN32CellularHelperPlusStringResponseC1Ev>:
 8089c1c:	b538      	push	{r3, r4, r5, lr}
 8089c1e:	4604      	mov	r4, r0

/**
 * All response objects inherit from this, so the parse() method can be called
 * in the subclass, and also the resp and enableDebug members are always available.
 */
class CellularHelperCommonResponse {
 8089c20:	f06f 0302 	mvn.w	r3, #2
 8089c24:	6043      	str	r3, [r0, #4]
 8089c26:	2300      	movs	r3, #0
 8089c28:	7203      	strb	r3, [r0, #8]
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 8089c2a:	4d07      	ldr	r5, [pc, #28]	; (8089c48 <_ZN32CellularHelperPlusStringResponseC1Ev+0x2c>)
 8089c2c:	4b07      	ldr	r3, [pc, #28]	; (8089c4c <_ZN32CellularHelperPlusStringResponseC1Ev+0x30>)
 8089c2e:	4629      	mov	r1, r5
 8089c30:	f840 3b0c 	str.w	r3, [r0], #12
 8089c34:	f001 fac1 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
 8089c38:	4629      	mov	r1, r5
 8089c3a:	f104 001c 	add.w	r0, r4, #28
 8089c3e:	f001 fabc 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
 8089c42:	4620      	mov	r0, r4
 8089c44:	bd38      	pop	{r3, r4, r5, pc}
 8089c46:	bf00      	nop
 8089c48:	08094308 	.word	0x08094308
 8089c4c:	08094330 	.word	0x08094330

08089c50 <_ZN32CellularHelperPlusStringResponseD1Ev>:
 8089c50:	b510      	push	{r4, lr}
 8089c52:	4604      	mov	r4, r0
 8089c54:	4b05      	ldr	r3, [pc, #20]	; (8089c6c <_ZN32CellularHelperPlusStringResponseD1Ev+0x1c>)
 8089c56:	f840 3b1c 	str.w	r3, [r0], #28
 8089c5a:	f001 fa67 	bl	808b12c <_ZN6StringD1Ev>
 8089c5e:	f104 000c 	add.w	r0, r4, #12
 8089c62:	f001 fa63 	bl	808b12c <_ZN6StringD1Ev>
 8089c66:	4620      	mov	r0, r4
 8089c68:	bd10      	pop	{r4, pc}
 8089c6a:	bf00      	nop
 8089c6c:	08094330 	.word	0x08094330

08089c70 <_ZN33CellularHelperEnvironmentResponseC1EP33CellularHelperEnvironmentCellDataj>:
		resp = RESP_ERROR;
	}
}


CellularHelperEnvironmentResponse::CellularHelperEnvironmentResponse(CellularHelperEnvironmentCellData *neighbors, size_t numNeighbors) :
 8089c70:	b570      	push	{r4, r5, r6, lr}
 8089c72:	4604      	mov	r4, r0
 8089c74:	4615      	mov	r5, r2
 8089c76:	460e      	mov	r6, r1
	neighbors(neighbors), numNeighbors(numNeighbors) {
 8089c78:	f7ff ffd0 	bl	8089c1c <_ZN32CellularHelperPlusStringResponseC1Ev>
 8089c7c:	4b08      	ldr	r3, [pc, #32]	; (8089ca0 <_ZN33CellularHelperEnvironmentResponseC1EP33CellularHelperEnvironmentCellDataj+0x30>)
};

/**
 * Used to hold the results for one cell (service or neighbor) from the AT+CGED command
 */
class CellularHelperEnvironmentCellData { // 44 bytes
 8089c7e:	2200      	movs	r2, #0
 8089c80:	6023      	str	r3, [r4, #0]
 8089c82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8089c86:	62e3      	str	r3, [r4, #44]	; 0x2c
 8089c88:	23ff      	movs	r3, #255	; 0xff
 8089c8a:	6323      	str	r3, [r4, #48]	; 0x30
 8089c8c:	6563      	str	r3, [r4, #84]	; 0x54
 8089c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8089c92:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 8089c96:	65a6      	str	r6, [r4, #88]	; 0x58
 8089c98:	65e5      	str	r5, [r4, #92]	; 0x5c
 8089c9a:	6623      	str	r3, [r4, #96]	; 0x60


}
 8089c9c:	4620      	mov	r0, r4
 8089c9e:	bd70      	pop	{r4, r5, r6, pc}
 8089ca0:	08094324 	.word	0x08094324

08089ca4 <_ZNK33CellularHelperEnvironmentCellData7isValidEb>:
	free(mutableCopy);
}

bool CellularHelperEnvironmentCellData::isValid(bool ignoreCI) const {

	if (mcc > 999) {
 8089ca4:	6803      	ldr	r3, [r0, #0]
 8089ca6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8089caa:	da0c      	bge.n	8089cc6 <_ZNK33CellularHelperEnvironmentCellData7isValidEb+0x22>
		return false;
	}

	if (!ignoreCI) {
 8089cac:	b969      	cbnz	r1, 8089cca <_ZNK33CellularHelperEnvironmentCellData7isValidEb+0x26>
		if (isUMTS) {
 8089cae:	7f03      	ldrb	r3, [r0, #28]
 8089cb0:	68c0      	ldr	r0, [r0, #12]
 8089cb2:	b10b      	cbz	r3, 8089cb8 <_ZNK33CellularHelperEnvironmentCellData7isValidEb+0x14>
			if (ci >= 0xfffffff) {
 8089cb4:	4b06      	ldr	r3, [pc, #24]	; (8089cd0 <_ZNK33CellularHelperEnvironmentCellData7isValidEb+0x2c>)
 8089cb6:	e001      	b.n	8089cbc <_ZNK33CellularHelperEnvironmentCellData7isValidEb+0x18>
				return false;
			}
		}
		else {
			if (ci >= 0xffff) {
 8089cb8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8089cbc:	4298      	cmp	r0, r3
 8089cbe:	bfcc      	ite	gt
 8089cc0:	2000      	movgt	r0, #0
 8089cc2:	2001      	movle	r0, #1
 8089cc4:	4770      	bx	lr
}

bool CellularHelperEnvironmentCellData::isValid(bool ignoreCI) const {

	if (mcc > 999) {
		return false;
 8089cc6:	2000      	movs	r0, #0
 8089cc8:	4770      	bx	lr
			if (ci >= 0xffff) {
				return false;
			}
		}
	}
	return true;
 8089cca:	2001      	movs	r0, #1
}
 8089ccc:	4770      	bx	lr
 8089cce:	bf00      	nop
 8089cd0:	0ffffffe 	.word	0x0ffffffe

08089cd4 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_>:


void CellularHelperEnvironmentCellData::addKeyValue(const char *key, const char *value) {
 8089cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8089cd6:	4605      	mov	r5, r0
 8089cd8:	b085      	sub	sp, #20
	char ucCopy[16];
	if (strlen(key) > (sizeof(ucCopy) - 1)) {
 8089cda:	4608      	mov	r0, r1
	}
	return true;
}


void CellularHelperEnvironmentCellData::addKeyValue(const char *key, const char *value) {
 8089cdc:	460f      	mov	r7, r1
 8089cde:	4614      	mov	r4, r2
	char ucCopy[16];
	if (strlen(key) > (sizeof(ucCopy) - 1)) {
 8089ce0:	f005 fbac 	bl	808f43c <strlen>
 8089ce4:	280f      	cmp	r0, #15
 8089ce6:	d801      	bhi.n	8089cec <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x18>
 8089ce8:	2600      	movs	r6, #0
 8089cea:	e003      	b.n	8089cf4 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x20>
		Log.info("key too long key=%s value=%s", key, value);
 8089cec:	4623      	mov	r3, r4
 8089cee:	463a      	mov	r2, r7
 8089cf0:	4959      	ldr	r1, [pc, #356]	; (8089e58 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x184>)
 8089cf2:	e0ab      	b.n	8089e4c <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x178>
		return;
	}
	size_t ii = 0;
	for(; key[ii]; ii++) {
 8089cf4:	5db8      	ldrb	r0, [r7, r6]
 8089cf6:	b128      	cbz	r0, 8089d04 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x30>
		ucCopy[ii] = toupper(key[ii]);
 8089cf8:	f006 fb6c 	bl	80903d4 <toupper>
 8089cfc:	f80d 0006 	strb.w	r0, [sp, r6]
	if (strlen(key) > (sizeof(ucCopy) - 1)) {
		Log.info("key too long key=%s value=%s", key, value);
		return;
	}
	size_t ii = 0;
	for(; key[ii]; ii++) {
 8089d00:	3601      	adds	r6, #1
 8089d02:	e7f7      	b.n	8089cf4 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x20>
		ucCopy[ii] = toupper(key[ii]);
	}
	ucCopy[ii] = 0;
 8089d04:	ab04      	add	r3, sp, #16
 8089d06:	441e      	add	r6, r3
 8089d08:	f806 0c10 	strb.w	r0, [r6, #-16]

	if (strcmp(ucCopy, "RAT") == 0) {
 8089d0c:	4953      	ldr	r1, [pc, #332]	; (8089e5c <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x188>)
 8089d0e:	4668      	mov	r0, sp
 8089d10:	f004 fe52 	bl	808e9b8 <strcmp>
 8089d14:	b940      	cbnz	r0, 8089d28 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x54>
		isUMTS = (strstr(value, "UMTS") != NULL);
 8089d16:	4952      	ldr	r1, [pc, #328]	; (8089e60 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x18c>)
 8089d18:	4620      	mov	r0, r4
 8089d1a:	f005 fbbf 	bl	808f49c <strstr>
 8089d1e:	3000      	adds	r0, #0
 8089d20:	bf18      	it	ne
 8089d22:	2001      	movne	r0, #1
 8089d24:	7728      	strb	r0, [r5, #28]
 8089d26:	e094      	b.n	8089e52 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
	}
	else
	if (strcmp(ucCopy, "MCC") == 0) {
 8089d28:	494e      	ldr	r1, [pc, #312]	; (8089e64 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x190>)
 8089d2a:	4668      	mov	r0, sp
 8089d2c:	f004 fe44 	bl	808e9b8 <strcmp>
 8089d30:	b920      	cbnz	r0, 8089d3c <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x68>
		mcc = atoi(value);
 8089d32:	4620      	mov	r0, r4
 8089d34:	f004 fcc1 	bl	808e6ba <atoi>
 8089d38:	6028      	str	r0, [r5, #0]
 8089d3a:	e08a      	b.n	8089e52 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
	}
	else
	if (strcmp(ucCopy, "MNC") == 0) {
 8089d3c:	494a      	ldr	r1, [pc, #296]	; (8089e68 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x194>)
 8089d3e:	4668      	mov	r0, sp
 8089d40:	f004 fe3a 	bl	808e9b8 <strcmp>
 8089d44:	b920      	cbnz	r0, 8089d50 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x7c>
		mnc = atoi(value);
 8089d46:	4620      	mov	r0, r4
 8089d48:	f004 fcb7 	bl	808e6ba <atoi>
 8089d4c:	6068      	str	r0, [r5, #4]
 8089d4e:	e080      	b.n	8089e52 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
	}
	else
	if (strcmp(ucCopy, "LAC") == 0) {
 8089d50:	4946      	ldr	r1, [pc, #280]	; (8089e6c <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x198>)
 8089d52:	4668      	mov	r0, sp
 8089d54:	f004 fe30 	bl	808e9b8 <strcmp>
 8089d58:	4601      	mov	r1, r0
 8089d5a:	b928      	cbnz	r0, 8089d68 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x94>
		lac = (int) strtol(value, NULL, 16); // hex
 8089d5c:	2210      	movs	r2, #16
 8089d5e:	4620      	mov	r0, r4
 8089d60:	f006 fa96 	bl	8090290 <strtol>
 8089d64:	60a8      	str	r0, [r5, #8]
 8089d66:	e074      	b.n	8089e52 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
	}
	else
	if (strcmp(ucCopy, "CI") == 0) {
 8089d68:	4941      	ldr	r1, [pc, #260]	; (8089e70 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x19c>)
 8089d6a:	4668      	mov	r0, sp
 8089d6c:	f004 fe24 	bl	808e9b8 <strcmp>
 8089d70:	4601      	mov	r1, r0
 8089d72:	b928      	cbnz	r0, 8089d80 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0xac>
		ci = (int) strtol(value, NULL, 16); // hex
 8089d74:	2210      	movs	r2, #16
 8089d76:	4620      	mov	r0, r4
 8089d78:	f006 fa8a 	bl	8090290 <strtol>
 8089d7c:	60e8      	str	r0, [r5, #12]
 8089d7e:	e068      	b.n	8089e52 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
	}
	else
	if (strcmp(ucCopy, "BSIC") == 0) {
 8089d80:	493c      	ldr	r1, [pc, #240]	; (8089e74 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1a0>)
 8089d82:	4668      	mov	r0, sp
 8089d84:	f004 fe18 	bl	808e9b8 <strcmp>
 8089d88:	4601      	mov	r1, r0
 8089d8a:	b928      	cbnz	r0, 8089d98 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0xc4>
		bsic = (int) strtol(value, NULL, 16); // hex
 8089d8c:	2210      	movs	r2, #16
 8089d8e:	4620      	mov	r0, r4
 8089d90:	f006 fa7e 	bl	8090290 <strtol>
 8089d94:	6128      	str	r0, [r5, #16]
 8089d96:	e05c      	b.n	8089e52 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
	}
	else
	if (strcmp(ucCopy, "ARFCN") == 0) { // Usually "Arfcn"
 8089d98:	4937      	ldr	r1, [pc, #220]	; (8089e78 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1a4>)
 8089d9a:	4668      	mov	r0, sp
 8089d9c:	f004 fe0c 	bl	808e9b8 <strcmp>
 8089da0:	b920      	cbnz	r0, 8089dac <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0xd8>
		// Documentation says this is hex, but this does not appear to be the case!
		// arfcn = (int) strtol(value, NULL, 16); // hex
		arfcn = atoi(value);
 8089da2:	4620      	mov	r0, r4
 8089da4:	f004 fc89 	bl	808e6ba <atoi>
 8089da8:	6168      	str	r0, [r5, #20]
 8089daa:	e052      	b.n	8089e52 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
	}
	else
	if (strcmp(ucCopy, "ARFCN_DED") == 0 || strcmp(ucCopy, "RXLEVSUB") == 0 || strcmp(ucCopy, "T_ADV") == 0) {
 8089dac:	4933      	ldr	r1, [pc, #204]	; (8089e7c <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1a8>)
 8089dae:	4668      	mov	r0, sp
 8089db0:	f004 fe02 	bl	808e9b8 <strcmp>
 8089db4:	2800      	cmp	r0, #0
 8089db6:	d04c      	beq.n	8089e52 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
 8089db8:	4931      	ldr	r1, [pc, #196]	; (8089e80 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1ac>)
 8089dba:	4668      	mov	r0, sp
 8089dbc:	f004 fdfc 	bl	808e9b8 <strcmp>
 8089dc0:	2800      	cmp	r0, #0
 8089dc2:	d046      	beq.n	8089e52 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
 8089dc4:	492f      	ldr	r1, [pc, #188]	; (8089e84 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1b0>)
 8089dc6:	4668      	mov	r0, sp
 8089dc8:	f004 fdf6 	bl	808e9b8 <strcmp>
 8089dcc:	2800      	cmp	r0, #0
 8089dce:	d040      	beq.n	8089e52 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
		// Ignored 2G fields: Arfcn_ded, RxLevSub, t_adv
	}
	else
	if (strcmp(ucCopy, "RXLEV") == 0) { // Sometimes RxLev
 8089dd0:	492d      	ldr	r1, [pc, #180]	; (8089e88 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1b4>)
 8089dd2:	4668      	mov	r0, sp
 8089dd4:	f004 fdf0 	bl	808e9b8 <strcmp>
 8089dd8:	4601      	mov	r1, r0
 8089dda:	b928      	cbnz	r0, 8089de8 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x114>
		rxlev = (int) strtol(value, NULL, 16); // hex
 8089ddc:	2210      	movs	r2, #16
 8089dde:	4620      	mov	r0, r4
 8089de0:	f006 fa56 	bl	8090290 <strtol>
 8089de4:	61a8      	str	r0, [r5, #24]
 8089de6:	e034      	b.n	8089e52 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
	}
	else
	if (strcmp(ucCopy, "DLF") == 0) {
 8089de8:	4928      	ldr	r1, [pc, #160]	; (8089e8c <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1b8>)
 8089dea:	4668      	mov	r0, sp
 8089dec:	f004 fde4 	bl	808e9b8 <strcmp>
 8089df0:	b920      	cbnz	r0, 8089dfc <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x128>
		dlf = atoi(value);
 8089df2:	4620      	mov	r0, r4
 8089df4:	f004 fc61 	bl	808e6ba <atoi>
 8089df8:	6228      	str	r0, [r5, #32]
 8089dfa:	e02a      	b.n	8089e52 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
	}
	else
	if (strcmp(ucCopy, "ULF") == 0) {
 8089dfc:	4924      	ldr	r1, [pc, #144]	; (8089e90 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1bc>)
 8089dfe:	4668      	mov	r0, sp
 8089e00:	f004 fdda 	bl	808e9b8 <strcmp>
 8089e04:	b930      	cbnz	r0, 8089e14 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x140>
		ulf = atoi(value);
 8089e06:	4620      	mov	r0, r4
 8089e08:	f004 fc57 	bl	808e6ba <atoi>

		// For AT+COPS=5, we don't get a RAT, but if ULF is present it's 3G
		isUMTS = true;
 8089e0c:	2301      	movs	r3, #1
	if (strcmp(ucCopy, "DLF") == 0) {
		dlf = atoi(value);
	}
	else
	if (strcmp(ucCopy, "ULF") == 0) {
		ulf = atoi(value);
 8089e0e:	6268      	str	r0, [r5, #36]	; 0x24

		// For AT+COPS=5, we don't get a RAT, but if ULF is present it's 3G
		isUMTS = true;
 8089e10:	772b      	strb	r3, [r5, #28]
 8089e12:	e01e      	b.n	8089e52 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
	}
	else
	if (strcmp(ucCopy, "RSCP LEV") == 0) {
 8089e14:	491f      	ldr	r1, [pc, #124]	; (8089e94 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1c0>)
 8089e16:	4668      	mov	r0, sp
 8089e18:	f004 fdce 	bl	808e9b8 <strcmp>
 8089e1c:	b920      	cbnz	r0, 8089e28 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x154>
		rscpLev = atoi(value);
 8089e1e:	4620      	mov	r0, r4
 8089e20:	f004 fc4b 	bl	808e6ba <atoi>
 8089e24:	62a8      	str	r0, [r5, #40]	; 0x28
 8089e26:	e014      	b.n	8089e52 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
	}
	else
	if (strcmp(ucCopy, "RAC") == 0 || strcmp(ucCopy, "SC") == 0 || strcmp(ucCopy, "ECN0 LEV") == 0) {
 8089e28:	491b      	ldr	r1, [pc, #108]	; (8089e98 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1c4>)
 8089e2a:	4668      	mov	r0, sp
 8089e2c:	f004 fdc4 	bl	808e9b8 <strcmp>
 8089e30:	b178      	cbz	r0, 8089e52 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
 8089e32:	491a      	ldr	r1, [pc, #104]	; (8089e9c <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1c8>)
 8089e34:	4668      	mov	r0, sp
 8089e36:	f004 fdbf 	bl	808e9b8 <strcmp>
 8089e3a:	b150      	cbz	r0, 8089e52 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
 8089e3c:	4918      	ldr	r1, [pc, #96]	; (8089ea0 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1cc>)
 8089e3e:	4668      	mov	r0, sp
 8089e40:	f004 fdba 	bl	808e9b8 <strcmp>
 8089e44:	b128      	cbz	r0, 8089e52 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
		// We get these with AT+COPS=5, but we don't need the values
	}
	else {
		Log.info("unknown key=%s value=%s", key, value);
 8089e46:	4623      	mov	r3, r4
 8089e48:	463a      	mov	r2, r7
 8089e4a:	4916      	ldr	r1, [pc, #88]	; (8089ea4 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1d0>)
 8089e4c:	4816      	ldr	r0, [pc, #88]	; (8089ea8 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1d4>)
 8089e4e:	f7f6 ffa9 	bl	8080da4 <_ZNK5spark6Logger4infoEPKcz>
	}

}
 8089e52:	b005      	add	sp, #20
 8089e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8089e56:	bf00      	nop
 8089e58:	08093ff9 	.word	0x08093ff9
 8089e5c:	08094016 	.word	0x08094016
 8089e60:	0809401a 	.word	0x0809401a
 8089e64:	0809401f 	.word	0x0809401f
 8089e68:	08094023 	.word	0x08094023
 8089e6c:	08094027 	.word	0x08094027
 8089e70:	0809402b 	.word	0x0809402b
 8089e74:	0809402e 	.word	0x0809402e
 8089e78:	08094033 	.word	0x08094033
 8089e7c:	08094039 	.word	0x08094039
 8089e80:	08094043 	.word	0x08094043
 8089e84:	0809404c 	.word	0x0809404c
 8089e88:	08094052 	.word	0x08094052
 8089e8c:	08094058 	.word	0x08094058
 8089e90:	0809405c 	.word	0x0809405c
 8089e94:	08094060 	.word	0x08094060
 8089e98:	08094069 	.word	0x08094069
 8089e9c:	0809406d 	.word	0x0809406d
 8089ea0:	08094070 	.word	0x08094070
 8089ea4:	08094079 	.word	0x08094079
 8089ea8:	200010f4 	.word	0x200010f4

08089eac <_ZN33CellularHelperEnvironmentCellData5parseEPKc>:
		}
	}
	return WAIT;
}

void CellularHelperEnvironmentCellData::parse(const char *str) {
 8089eac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8089eae:	4606      	mov	r6, r0
	char *mutableCopy = strdup(str);
 8089eb0:	4608      	mov	r0, r1
 8089eb2:	f004 fd93 	bl	808e9dc <strdup>

	char *endStr;

	char *pair = strtok_r(mutableCopy, ",", &endStr);
 8089eb6:	aa01      	add	r2, sp, #4
 8089eb8:	4910      	ldr	r1, [pc, #64]	; (8089efc <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x50>)
	}
	return WAIT;
}

void CellularHelperEnvironmentCellData::parse(const char *str) {
	char *mutableCopy = strdup(str);
 8089eba:	4605      	mov	r5, r0

	char *endStr;

	char *pair = strtok_r(mutableCopy, ",", &endStr);
 8089ebc:	f006 f95f 	bl	809017e <strtok_r>
			pair++;
		}

		char *colon = strchr(pair, ':');
		if (colon != NULL) {
			*colon = 0;
 8089ec0:	2700      	movs	r7, #0
	char *mutableCopy = strdup(str);

	char *endStr;

	char *pair = strtok_r(mutableCopy, ",", &endStr);
	while(pair) {
 8089ec2:	b1b0      	cbz	r0, 8089ef2 <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x46>
 8089ec4:	4604      	mov	r4, r0
		// Remove leading spaces caused by ", " combination
		while(*pair == ' ') {
 8089ec6:	7823      	ldrb	r3, [r4, #0]
 8089ec8:	3001      	adds	r0, #1
 8089eca:	2b20      	cmp	r3, #32
 8089ecc:	d0fa      	beq.n	8089ec4 <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x18>
			pair++;
		}

		char *colon = strchr(pair, ':');
 8089ece:	213a      	movs	r1, #58	; 0x3a
 8089ed0:	4620      	mov	r0, r4
 8089ed2:	f004 fd63 	bl	808e99c <strchr>
		if (colon != NULL) {
 8089ed6:	b130      	cbz	r0, 8089ee6 <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x3a>
			*colon = 0;
 8089ed8:	4602      	mov	r2, r0
			const char *key = pair;
			const char *value = ++colon;

			addKeyValue(key, value);
 8089eda:	4621      	mov	r1, r4
			pair++;
		}

		char *colon = strchr(pair, ':');
		if (colon != NULL) {
			*colon = 0;
 8089edc:	f802 7b01 	strb.w	r7, [r2], #1
			const char *key = pair;
			const char *value = ++colon;

			addKeyValue(key, value);
 8089ee0:	4630      	mov	r0, r6
 8089ee2:	f7ff fef7 	bl	8089cd4 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_>
		}

		pair = strtok_r(NULL, ",", &endStr);
 8089ee6:	aa01      	add	r2, sp, #4
 8089ee8:	4904      	ldr	r1, [pc, #16]	; (8089efc <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x50>)
 8089eea:	2000      	movs	r0, #0
 8089eec:	f006 f947 	bl	809017e <strtok_r>
	char *mutableCopy = strdup(str);

	char *endStr;

	char *pair = strtok_r(mutableCopy, ",", &endStr);
	while(pair) {
 8089ef0:	e7e7      	b.n	8089ec2 <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x16>

		pair = strtok_r(NULL, ",", &endStr);
	}


	free(mutableCopy);
 8089ef2:	4628      	mov	r0, r5
 8089ef4:	f000 fd86 	bl	808aa04 <free>
}
 8089ef8:	b003      	add	sp, #12
 8089efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8089efc:	08093eda 	.word	0x08093eda

08089f00 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci>:
	neighbors(neighbors), numNeighbors(numNeighbors) {


}

int CellularHelperEnvironmentResponse::parse(int type, const char *buf, int len) {
 8089f00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (enableDebug) {
 8089f04:	7a06      	ldrb	r6, [r0, #8]
	neighbors(neighbors), numNeighbors(numNeighbors) {


}

int CellularHelperEnvironmentResponse::parse(int type, const char *buf, int len) {
 8089f06:	b08b      	sub	sp, #44	; 0x2c
 8089f08:	4605      	mov	r5, r0
 8089f0a:	460f      	mov	r7, r1
 8089f0c:	4691      	mov	r9, r2
 8089f0e:	461c      	mov	r4, r3
	if (enableDebug) {
 8089f10:	b10e      	cbz	r6, 8089f16 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x16>
		logCellularDebug(type, buf, len);
 8089f12:	f7ff fd93 	bl	8089a3c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	}

	if (type == TYPE_UNKNOWN || type == TYPE_PLUS) {
 8089f16:	f437 0880 	bics.w	r8, r7, #4194304	; 0x400000
 8089f1a:	d155      	bne.n	8089fc8 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xc8>
		// We get this for AT+CGED=5
		// Copy to temporary string to make processing easier
		char *copy = (char *) malloc(len + 1);
 8089f1c:	1c60      	adds	r0, r4, #1
 8089f1e:	f000 fd69 	bl	808a9f4 <malloc>
		if (copy) {
 8089f22:	4606      	mov	r6, r0
 8089f24:	2800      	cmp	r0, #0
 8089f26:	d04f      	beq.n	8089fc8 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xc8>
			strncpy(copy, buf, len);
 8089f28:	4622      	mov	r2, r4
 8089f2a:	4649      	mov	r1, r9
 8089f2c:	f005 faa3 	bl	808f476 <strncpy>
			copy[len] = 0;
 8089f30:	f806 8004 	strb.w	r8, [r6, r4]

			// This is used for skipping over the +CGED: part of the response
			char searchFor[32];
			size_t searchForLen = snprintf(searchFor, sizeof(searchFor), "+%s: ", command.c_str());
 8089f34:	4a27      	ldr	r2, [pc, #156]	; (8089fd4 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xd4>)
 8089f36:	2120      	movs	r1, #32
 8089f38:	68eb      	ldr	r3, [r5, #12]
 8089f3a:	a802      	add	r0, sp, #8
 8089f3c:	f000 fd92 	bl	808aa64 <snprintf>
 8089f40:	4680      	mov	r8, r0

			char *endStr;

			char *line = strtok_r(copy, "\r\n", &endStr);
 8089f42:	4630      	mov	r0, r6
 8089f44:	4924      	ldr	r1, [pc, #144]	; (8089fd8 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xd8>)
 8089f46:	aa01      	add	r2, sp, #4
 8089f48:	f006 f919 	bl	809017e <strtok_r>
 8089f4c:	4604      	mov	r4, r0
			while(line) {
 8089f4e:	2800      	cmp	r0, #0
 8089f50:	d037      	beq.n	8089fc2 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xc2>
				if (line[0]) {
 8089f52:	7803      	ldrb	r3, [r0, #0]
 8089f54:	b38b      	cbz	r3, 8089fba <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xba>
					// Not an empty line

					if (type == TYPE_PLUS && strncmp(line, searchFor, searchForLen) == 0) {
 8089f56:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
 8089f5a:	d105      	bne.n	8089f68 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x68>
 8089f5c:	4642      	mov	r2, r8
 8089f5e:	a902      	add	r1, sp, #8
 8089f60:	f005 fa74 	bl	808f44c <strncmp>
 8089f64:	b900      	cbnz	r0, 8089f68 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x68>
						line += searchForLen;
 8089f66:	4444      	add	r4, r8
					}

					if (strncmp(line, "MCC:", 4) == 0) {
 8089f68:	2204      	movs	r2, #4
 8089f6a:	491c      	ldr	r1, [pc, #112]	; (8089fdc <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xdc>)
 8089f6c:	4620      	mov	r0, r4
 8089f6e:	f005 fa6d 	bl	808f44c <strncmp>
 8089f72:	b9b8      	cbnz	r0, 8089fa4 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xa4>
						// Line begins with MCC:
						// This happens for 2G and 3G
						if (curDataIndex < 0) {
 8089f74:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8089f76:	2b00      	cmp	r3, #0
 8089f78:	da08      	bge.n	8089f8c <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x8c>
							service.parse(line);
 8089f7a:	4621      	mov	r1, r4
 8089f7c:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 8089f80:	f7ff ff94 	bl	8089eac <_ZN33CellularHelperEnvironmentCellData5parseEPKc>
							curDataIndex++;
 8089f84:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8089f86:	3301      	adds	r3, #1
 8089f88:	662b      	str	r3, [r5, #96]	; 0x60
 8089f8a:	e016      	b.n	8089fba <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xba>
						}
						else
						if (neighbors && (size_t)curDataIndex < numNeighbors) {
 8089f8c:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8089f8e:	b1a2      	cbz	r2, 8089fba <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xba>
 8089f90:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8089f92:	428b      	cmp	r3, r1
 8089f94:	d211      	bcs.n	8089fba <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xba>
							neighbors[curDataIndex++].parse(line);
 8089f96:	1c59      	adds	r1, r3, #1
 8089f98:	202c      	movs	r0, #44	; 0x2c
 8089f9a:	6629      	str	r1, [r5, #96]	; 0x60
 8089f9c:	fb00 2003 	mla	r0, r0, r3, r2
 8089fa0:	4621      	mov	r1, r4
 8089fa2:	e008      	b.n	8089fb6 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xb6>
						}
					}
					else
					if (strncmp(line, "RAT:", 4) == 0) {
 8089fa4:	2204      	movs	r2, #4
 8089fa6:	490e      	ldr	r1, [pc, #56]	; (8089fe0 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xe0>)
 8089fa8:	4620      	mov	r0, r4
 8089faa:	f005 fa4f 	bl	808f44c <strncmp>
 8089fae:	b920      	cbnz	r0, 8089fba <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xba>
						// Line begins with RAT:
						// This happens for 3G in the + response so you know whether
						// the response is for a 2G or 3G tower
						service.parse(line);
 8089fb0:	4621      	mov	r1, r4
 8089fb2:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 8089fb6:	f7ff ff79 	bl	8089eac <_ZN33CellularHelperEnvironmentCellData5parseEPKc>
					}
				}
				line = strtok_r(NULL, "\r\n", &endStr);
 8089fba:	aa01      	add	r2, sp, #4
 8089fbc:	4906      	ldr	r1, [pc, #24]	; (8089fd8 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xd8>)
 8089fbe:	2000      	movs	r0, #0
 8089fc0:	e7c2      	b.n	8089f48 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x48>
			}

			free(copy);
 8089fc2:	4630      	mov	r0, r6
 8089fc4:	f000 fd1e 	bl	808aa04 <free>
		}
	}
	return WAIT;
}
 8089fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8089fcc:	b00b      	add	sp, #44	; 0x2c
 8089fce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8089fd2:	bf00      	nop
 8089fd4:	08094316 	.word	0x08094316
 8089fd8:	08094306 	.word	0x08094306
 8089fdc:	08094091 	.word	0x08094091
 8089fe0:	08094096 	.word	0x08094096

08089fe4 <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv>:
			}
		}
	}
}

size_t CellularHelperEnvironmentResponse::getNumNeighbors() const {
 8089fe4:	b570      	push	{r4, r5, r6, lr}
	if (curDataIndex < 0) {
 8089fe6:	6e04      	ldr	r4, [r0, #96]	; 0x60
 8089fe8:	2c00      	cmp	r4, #0
 8089fea:	db0f      	blt.n	808a00c <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv+0x28>
		return 0;
	}
	else {
		if (neighbors) {
 8089fec:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8089fee:	b15d      	cbz	r5, 808a008 <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv+0x24>
 8089ff0:	2200      	movs	r2, #0
			for(size_t ii = 0; ii < (size_t)curDataIndex; ii++) {
				if (!neighbors[ii].isValid()) {
 8089ff2:	262c      	movs	r6, #44	; 0x2c
	if (curDataIndex < 0) {
		return 0;
	}
	else {
		if (neighbors) {
			for(size_t ii = 0; ii < (size_t)curDataIndex; ii++) {
 8089ff4:	42a2      	cmp	r2, r4
 8089ff6:	d007      	beq.n	808a008 <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv+0x24>
				if (!neighbors[ii].isValid()) {
 8089ff8:	2100      	movs	r1, #0
 8089ffa:	fb06 5002 	mla	r0, r6, r2, r5
 8089ffe:	f7ff fe51 	bl	8089ca4 <_ZNK33CellularHelperEnvironmentCellData7isValidEb>
 808a002:	b128      	cbz	r0, 808a010 <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv+0x2c>
	if (curDataIndex < 0) {
		return 0;
	}
	else {
		if (neighbors) {
			for(size_t ii = 0; ii < (size_t)curDataIndex; ii++) {
 808a004:	3201      	adds	r2, #1
 808a006:	e7f5      	b.n	8089ff4 <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv+0x10>
				if (!neighbors[ii].isValid()) {
					return ii;
				}
			}
		}
		return curDataIndex;
 808a008:	4620      	mov	r0, r4
 808a00a:	bd70      	pop	{r4, r5, r6, pc}
	}
}

size_t CellularHelperEnvironmentResponse::getNumNeighbors() const {
	if (curDataIndex < 0) {
		return 0;
 808a00c:	2000      	movs	r0, #0
 808a00e:	bd70      	pop	{r4, r5, r6, pc}
 808a010:	4610      	mov	r0, r2
				}
			}
		}
		return curDataIndex;
	}
}
 808a012:	bd70      	pop	{r4, r5, r6, pc}

0808a014 <_ZN26CellularHelperCREGResponse11postProcessEv>:
	else {
		return "valid=false";
	}
}

void CellularHelperCREGResponse::postProcess() {
 808a014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// "\r\n+CREG: 2,1,\"FFFE\",\"C45C010\",8\r\n"
	int n;

	if (sscanf(string.c_str(), "%d,%d,\"%x\",\"%x\",%d", &n, &stat, &lac, &ci, &rat) == 5) {
 808a018:	f100 0634 	add.w	r6, r0, #52	; 0x34
	else {
		return "valid=false";
	}
}

void CellularHelperCREGResponse::postProcess() {
 808a01c:	b086      	sub	sp, #24
	// "\r\n+CREG: 2,1,\"FFFE\",\"C45C010\",8\r\n"
	int n;

	if (sscanf(string.c_str(), "%d,%d,\"%x\",\"%x\",%d", &n, &stat, &lac, &ci, &rat) == 5) {
 808a01e:	f100 0738 	add.w	r7, r0, #56	; 0x38
 808a022:	f100 083c 	add.w	r8, r0, #60	; 0x3c
 808a026:	e88d 01c0 	stmia.w	sp, {r6, r7, r8}
 808a02a:	f100 0530 	add.w	r5, r0, #48	; 0x30
	else {
		return "valid=false";
	}
}

void CellularHelperCREGResponse::postProcess() {
 808a02e:	4604      	mov	r4, r0
	// "\r\n+CREG: 2,1,\"FFFE\",\"C45C010\",8\r\n"
	int n;

	if (sscanf(string.c_str(), "%d,%d,\"%x\",\"%x\",%d", &n, &stat, &lac, &ci, &rat) == 5) {
 808a030:	462b      	mov	r3, r5
 808a032:	aa05      	add	r2, sp, #20
 808a034:	490b      	ldr	r1, [pc, #44]	; (808a064 <_ZN26CellularHelperCREGResponse11postProcessEv+0x50>)
 808a036:	69c0      	ldr	r0, [r0, #28]
 808a038:	f000 fd04 	bl	808aa44 <sscanf>
 808a03c:	2805      	cmp	r0, #5
 808a03e:	d103      	bne.n	808a048 <_ZN26CellularHelperCREGResponse11postProcessEv+0x34>
		// SARA-R4 does include the n (5 parameters)
		valid = true;
 808a040:	2301      	movs	r3, #1
 808a042:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 808a046:	e009      	b.n	808a05c <_ZN26CellularHelperCREGResponse11postProcessEv+0x48>
	}
	else
	if (sscanf(string.c_str(), "%d,\"%x\",\"%x\",%d", &stat, &lac, &ci, &rat) == 4) {
 808a048:	e88d 0180 	stmia.w	sp, {r7, r8}
 808a04c:	4633      	mov	r3, r6
 808a04e:	462a      	mov	r2, r5
 808a050:	4905      	ldr	r1, [pc, #20]	; (808a068 <_ZN26CellularHelperCREGResponse11postProcessEv+0x54>)
 808a052:	69e0      	ldr	r0, [r4, #28]
 808a054:	f000 fcf6 	bl	808aa44 <sscanf>
 808a058:	2804      	cmp	r0, #4
 808a05a:	d0f1      	beq.n	808a040 <_ZN26CellularHelperCREGResponse11postProcessEv+0x2c>
		// SARA-U and SARA-G don't include the n (4 parameters)
		valid = true;
	}

}
 808a05c:	b006      	add	sp, #24
 808a05e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808a062:	bf00      	nop
 808a064:	0809419e 	.word	0x0809419e
 808a068:	080941a1 	.word	0x080941a1

0808a06c <_ZNK26CellularHelperCREGResponse8toStringEv>:

String CellularHelperCREGResponse::toString() const {
 808a06c:	b513      	push	{r0, r1, r4, lr}
	if (valid) {
 808a06e:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
		valid = true;
	}

}

String CellularHelperCREGResponse::toString() const {
 808a072:	4604      	mov	r4, r0
	if (valid) {
 808a074:	b14b      	cbz	r3, 808a08a <_ZNK26CellularHelperCREGResponse8toStringEv+0x1e>
		return String::format("stat=%d lac=0x%x ci=0x%x rat=%d", stat, lac, ci, rat);
 808a076:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 808a078:	9301      	str	r3, [sp, #4]
 808a07a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 808a07c:	9300      	str	r3, [sp, #0]
 808a07e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 808a080:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 808a082:	4905      	ldr	r1, [pc, #20]	; (808a098 <_ZNK26CellularHelperCREGResponse8toStringEv+0x2c>)
 808a084:	f001 fa70 	bl	808b568 <_ZN6String6formatEPKcz>
 808a088:	e002      	b.n	808a090 <_ZNK26CellularHelperCREGResponse8toStringEv+0x24>
	}
	else {
		return "valid=false";
 808a08a:	4904      	ldr	r1, [pc, #16]	; (808a09c <_ZNK26CellularHelperCREGResponse8toStringEv+0x30>)
 808a08c:	f001 f895 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
	}
}
 808a090:	4620      	mov	r0, r4
 808a092:	b002      	add	sp, #8
 808a094:	bd10      	pop	{r4, pc}
 808a096:	bf00      	nop
 808a098:	080941b1 	.word	0x080941b1
 808a09c:	08094192 	.word	0x08094192

0808a0a0 <_ZN28CellularHelperStringResponseC1Ev>:
 * Things that return a simple string, like the manufacturer string, use this
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperStringResponse : public CellularHelperCommonResponse {
 808a0a0:	b510      	push	{r4, lr}
 808a0a2:	4604      	mov	r4, r0

/**
 * All response objects inherit from this, so the parse() method can be called
 * in the subclass, and also the resp and enableDebug members are always available.
 */
class CellularHelperCommonResponse {
 808a0a4:	f06f 0302 	mvn.w	r3, #2
 808a0a8:	6043      	str	r3, [r0, #4]
 808a0aa:	2300      	movs	r3, #0
 808a0ac:	7203      	strb	r3, [r0, #8]
 * Things that return a simple string, like the manufacturer string, use this
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperStringResponse : public CellularHelperCommonResponse {
 808a0ae:	4b04      	ldr	r3, [pc, #16]	; (808a0c0 <_ZN28CellularHelperStringResponseC1Ev+0x20>)
 808a0b0:	4904      	ldr	r1, [pc, #16]	; (808a0c4 <_ZN28CellularHelperStringResponseC1Ev+0x24>)
 808a0b2:	f840 3b0c 	str.w	r3, [r0], #12
 808a0b6:	f001 f880 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
 808a0ba:	4620      	mov	r0, r4
 808a0bc:	bd10      	pop	{r4, pc}
 808a0be:	bf00      	nop
 808a0c0:	08093f30 	.word	0x08093f30
 808a0c4:	08094308 	.word	0x08094308

0808a0c8 <_ZN28CellularHelperStringResponseD1Ev>:
 808a0c8:	b510      	push	{r4, lr}
 808a0ca:	4604      	mov	r4, r0
 808a0cc:	4b03      	ldr	r3, [pc, #12]	; (808a0dc <_ZN28CellularHelperStringResponseD1Ev+0x14>)
 808a0ce:	f840 3b0c 	str.w	r3, [r0], #12
 808a0d2:	f001 f82b 	bl	808b12c <_ZN6StringD1Ev>
 808a0d6:	4620      	mov	r0, r4
 808a0d8:	bd10      	pop	{r4, pc}
 808a0da:	bf00      	nop
 808a0dc:	08093f30 	.word	0x08093f30

0808a0e0 <_ZNK19CellularHelperClass8getModelEv>:
	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGMI\r\n");

	return resp.string;
}

String CellularHelperClass::getModel() const {
 808a0e0:	b510      	push	{r4, lr}
 808a0e2:	4604      	mov	r4, r0
 808a0e4:	b088      	sub	sp, #32
	CellularHelperStringResponse resp;
 808a0e6:	a801      	add	r0, sp, #4
 808a0e8:	f7ff ffda 	bl	808a0a0 <_ZN28CellularHelperStringResponseC1Ev>

    template<typename T, typename... Targs>
    inline int command(int (*cb)(int type, const char* buf, int len, T* param),
            T* param, system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
 808a0ec:	4b08      	ldr	r3, [pc, #32]	; (808a110 <_ZNK19CellularHelperClass8getModelEv+0x30>)
 808a0ee:	f242 7210 	movw	r2, #10000	; 0x2710
 808a0f2:	a901      	add	r1, sp, #4
 808a0f4:	4807      	ldr	r0, [pc, #28]	; (808a114 <_ZNK19CellularHelperClass8getModelEv+0x34>)
 808a0f6:	f000 fb37 	bl	808a768 <cellular_command>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGMM\r\n");

	return resp.string;
 808a0fa:	a904      	add	r1, sp, #16
 808a0fc:	4620      	mov	r0, r4
 808a0fe:	f001 f89b 	bl	808b238 <_ZN6StringC1ERKS_>

	return resp.string;
}

String CellularHelperClass::getModel() const {
	CellularHelperStringResponse resp;
 808a102:	a801      	add	r0, sp, #4
 808a104:	f7ff ffe0 	bl	808a0c8 <_ZN28CellularHelperStringResponseD1Ev>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGMM\r\n");

	return resp.string;
}
 808a108:	4620      	mov	r0, r4
 808a10a:	b008      	add	sp, #32
 808a10c:	bd10      	pop	{r4, pc}
 808a10e:	bf00      	nop
 808a110:	080941d1 	.word	0x080941d1
 808a114:	08089a25 	.word	0x08089a25

0808a118 <_ZNK19CellularHelperClass7getIMEIEv>:
	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGMR\r\n");

	return resp.string;
}

String CellularHelperClass::getIMEI() const {
 808a118:	b510      	push	{r4, lr}
 808a11a:	4604      	mov	r4, r0
 808a11c:	b088      	sub	sp, #32
	CellularHelperStringResponse resp;
 808a11e:	a801      	add	r0, sp, #4
 808a120:	f7ff ffbe 	bl	808a0a0 <_ZN28CellularHelperStringResponseC1Ev>
 808a124:	4b08      	ldr	r3, [pc, #32]	; (808a148 <_ZNK19CellularHelperClass7getIMEIEv+0x30>)
 808a126:	f242 7210 	movw	r2, #10000	; 0x2710
 808a12a:	a901      	add	r1, sp, #4
 808a12c:	4807      	ldr	r0, [pc, #28]	; (808a14c <_ZNK19CellularHelperClass7getIMEIEv+0x34>)
 808a12e:	f000 fb1b 	bl	808a768 <cellular_command>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGSN\r\n");

	return resp.string;
 808a132:	a904      	add	r1, sp, #16
 808a134:	4620      	mov	r0, r4
 808a136:	f001 f87f 	bl	808b238 <_ZN6StringC1ERKS_>

	return resp.string;
}

String CellularHelperClass::getIMEI() const {
	CellularHelperStringResponse resp;
 808a13a:	a801      	add	r0, sp, #4
 808a13c:	f7ff ffc4 	bl	808a0c8 <_ZN28CellularHelperStringResponseD1Ev>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGSN\r\n");

	return resp.string;
}
 808a140:	4620      	mov	r0, r4
 808a142:	b008      	add	sp, #32
 808a144:	bd10      	pop	{r4, pc}
 808a146:	bf00      	nop
 808a148:	080941ec 	.word	0x080941ec
 808a14c:	08089a25 	.word	0x08089a25

0808a150 <_ZNK19CellularHelperClass7getIMSIEv>:

String CellularHelperClass::getIMSI() const {
 808a150:	b510      	push	{r4, lr}
 808a152:	4604      	mov	r4, r0
 808a154:	b088      	sub	sp, #32
	CellularHelperStringResponse resp;
 808a156:	a801      	add	r0, sp, #4
 808a158:	f7ff ffa2 	bl	808a0a0 <_ZN28CellularHelperStringResponseC1Ev>
 808a15c:	4b08      	ldr	r3, [pc, #32]	; (808a180 <_ZNK19CellularHelperClass7getIMSIEv+0x30>)
 808a15e:	f242 7210 	movw	r2, #10000	; 0x2710
 808a162:	a901      	add	r1, sp, #4
 808a164:	4807      	ldr	r0, [pc, #28]	; (808a184 <_ZNK19CellularHelperClass7getIMSIEv+0x34>)
 808a166:	f000 faff 	bl	808a768 <cellular_command>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGMI\r\n");

	return resp.string;
 808a16a:	a904      	add	r1, sp, #16
 808a16c:	4620      	mov	r0, r4
 808a16e:	f001 f863 	bl	808b238 <_ZN6StringC1ERKS_>

	return resp.string;
}

String CellularHelperClass::getIMSI() const {
	CellularHelperStringResponse resp;
 808a172:	a801      	add	r0, sp, #4
 808a174:	f7ff ffa8 	bl	808a0c8 <_ZN28CellularHelperStringResponseD1Ev>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGMI\r\n");

	return resp.string;
}
 808a178:	4620      	mov	r0, r4
 808a17a:	b008      	add	sp, #32
 808a17c:	bd10      	pop	{r4, pc}
 808a17e:	bf00      	nop
 808a180:	080941f6 	.word	0x080941f6
 808a184:	08089a25 	.word	0x08089a25

0808a188 <_ZNK19CellularHelperClass8getICCIDEv>:

String CellularHelperClass::getICCID() const {
 808a188:	b510      	push	{r4, lr}
 808a18a:	4604      	mov	r4, r0
 808a18c:	b08c      	sub	sp, #48	; 0x30
	CellularHelperPlusStringResponse resp;
 808a18e:	a801      	add	r0, sp, #4
 808a190:	f7ff fd44 	bl	8089c1c <_ZN32CellularHelperPlusStringResponseC1Ev>
	resp.command = "CCID";
 808a194:	490a      	ldr	r1, [pc, #40]	; (808a1c0 <_ZNK19CellularHelperClass8getICCIDEv+0x38>)
 808a196:	a804      	add	r0, sp, #16
 808a198:	f001 f861 	bl	808b25e <_ZN6StringaSEPKc>
 808a19c:	4b09      	ldr	r3, [pc, #36]	; (808a1c4 <_ZNK19CellularHelperClass8getICCIDEv+0x3c>)
 808a19e:	f242 7210 	movw	r2, #10000	; 0x2710
 808a1a2:	a901      	add	r1, sp, #4
 808a1a4:	4808      	ldr	r0, [pc, #32]	; (808a1c8 <_ZNK19CellularHelperClass8getICCIDEv+0x40>)
 808a1a6:	f000 fadf 	bl	808a768 <cellular_command>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CCID\r\n");

	return resp.string;
 808a1aa:	a908      	add	r1, sp, #32
 808a1ac:	4620      	mov	r0, r4
 808a1ae:	f001 f843 	bl	808b238 <_ZN6StringC1ERKS_>

	return resp.string;
}

String CellularHelperClass::getICCID() const {
	CellularHelperPlusStringResponse resp;
 808a1b2:	a801      	add	r0, sp, #4
 808a1b4:	f7ff fd4c 	bl	8089c50 <_ZN32CellularHelperPlusStringResponseD1Ev>
	resp.command = "CCID";

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CCID\r\n");

	return resp.string;
}
 808a1b8:	4620      	mov	r0, r4
 808a1ba:	b00c      	add	sp, #48	; 0x30
 808a1bc:	bd10      	pop	{r4, pc}
 808a1be:	bf00      	nop
 808a1c0:	08094200 	.word	0x08094200
 808a1c4:	08094205 	.word	0x08094205
 808a1c8:	08089a25 	.word	0x08089a25

0808a1cc <_ZNK19CellularHelperClass5isLTEEv>:

bool CellularHelperClass::isLTE() const {
 808a1cc:	b510      	push	{r4, lr}
 808a1ce:	b088      	sub	sp, #32
	return getModel().startsWith("SARA-R4");
 808a1d0:	4601      	mov	r1, r0
 808a1d2:	4668      	mov	r0, sp
 808a1d4:	f7ff ff84 	bl	808a0e0 <_ZNK19CellularHelperClass8getModelEv>
 808a1d8:	4909      	ldr	r1, [pc, #36]	; (808a200 <_ZNK19CellularHelperClass5isLTEEv+0x34>)
 808a1da:	a804      	add	r0, sp, #16
 808a1dc:	f000 ffed 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
 808a1e0:	a904      	add	r1, sp, #16
 808a1e2:	4668      	mov	r0, sp
 808a1e4:	f001 f966 	bl	808b4b4 <_ZNK6String10startsWithERKS_>
 808a1e8:	4604      	mov	r4, r0
 808a1ea:	a804      	add	r0, sp, #16
 808a1ec:	f000 ff9e 	bl	808b12c <_ZN6StringD1Ev>
 808a1f0:	4668      	mov	r0, sp
 808a1f2:	f000 ff9b 	bl	808b12c <_ZN6StringD1Ev>
}
 808a1f6:	1c20      	adds	r0, r4, #0
 808a1f8:	bf18      	it	ne
 808a1fa:	2001      	movne	r0, #1
 808a1fc:	b008      	add	sp, #32
 808a1fe:	bd10      	pop	{r4, pc}
 808a200:	0809420f 	.word	0x0809420f

0808a204 <_ZNK19CellularHelperClass15getOperatorNameEi>:


String CellularHelperClass::getOperatorName(int operatorNameType) const {
 808a204:	b530      	push	{r4, r5, lr}
 808a206:	4615      	mov	r5, r2
 808a208:	b093      	sub	sp, #76	; 0x4c
	String result;
 808a20a:	4913      	ldr	r1, [pc, #76]	; (808a258 <_ZNK19CellularHelperClass15getOperatorNameEi+0x54>)
bool CellularHelperClass::isLTE() const {
	return getModel().startsWith("SARA-R4");
}


String CellularHelperClass::getOperatorName(int operatorNameType) const {
 808a20c:	4604      	mov	r4, r0
	String result;
 808a20e:	f000 ffd4 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
	// The default is OPERATOR_NAME_LONG_EONS (9).
	// If the EONS name is not available, then the other things tried in order are:
	// NITZ, CPHS, ROM
	// So basically, something will be returned

	CellularHelperPlusStringResponse resp;
 808a212:	a807      	add	r0, sp, #28
 808a214:	f7ff fd02 	bl	8089c1c <_ZN32CellularHelperPlusStringResponseC1Ev>
	resp.command = "UDOPN";
 808a218:	4910      	ldr	r1, [pc, #64]	; (808a25c <_ZNK19CellularHelperClass15getOperatorNameEi+0x58>)
 808a21a:	a80a      	add	r0, sp, #40	; 0x28
 808a21c:	f001 f81f 	bl	808b25e <_ZN6StringaSEPKc>
 808a220:	9500      	str	r5, [sp, #0]
 808a222:	4b0f      	ldr	r3, [pc, #60]	; (808a260 <_ZNK19CellularHelperClass15getOperatorNameEi+0x5c>)
 808a224:	f242 7210 	movw	r2, #10000	; 0x2710
 808a228:	a907      	add	r1, sp, #28
 808a22a:	480e      	ldr	r0, [pc, #56]	; (808a264 <_ZNK19CellularHelperClass15getOperatorNameEi+0x60>)
 808a22c:	f000 fa9c 	bl	808a768 <cellular_command>

	int respCode = Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+UDOPN=%d\r\n", operatorNameType);

	if (respCode == RESP_OK) {
 808a230:	3002      	adds	r0, #2
 808a232:	d10b      	bne.n	808a24c <_ZNK19CellularHelperClass15getOperatorNameEi+0x48>
		result = resp.getDoubleQuotedPart();
 808a234:	2201      	movs	r2, #1
 808a236:	a907      	add	r1, sp, #28
 808a238:	a803      	add	r0, sp, #12
 808a23a:	f7ff fcbf 	bl	8089bbc <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb>
 808a23e:	a903      	add	r1, sp, #12
 808a240:	4620      	mov	r0, r4
 808a242:	f001 f804 	bl	808b24e <_ZN6StringaSEOS_>
 808a246:	a803      	add	r0, sp, #12
 808a248:	f000 ff70 	bl	808b12c <_ZN6StringD1Ev>
	// The default is OPERATOR_NAME_LONG_EONS (9).
	// If the EONS name is not available, then the other things tried in order are:
	// NITZ, CPHS, ROM
	// So basically, something will be returned

	CellularHelperPlusStringResponse resp;
 808a24c:	a807      	add	r0, sp, #28
 808a24e:	f7ff fcff 	bl	8089c50 <_ZN32CellularHelperPlusStringResponseD1Ev>
	if (respCode == RESP_OK) {
		result = resp.getDoubleQuotedPart();
	}

	return result;
}
 808a252:	4620      	mov	r0, r4
 808a254:	b013      	add	sp, #76	; 0x4c
 808a256:	bd30      	pop	{r4, r5, pc}
 808a258:	08094308 	.word	0x08094308
 808a25c:	08094217 	.word	0x08094217
 808a260:	0809421d 	.word	0x0809421d
 808a264:	08089a25 	.word	0x08089a25

0808a268 <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse>:

	return (respCode == RESP_OK);
}


void CellularHelperClass::getEnvironment(int mode, CellularHelperEnvironmentResponse &resp) const {
 808a268:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808a26a:	4614      	mov	r4, r2
 808a26c:	460d      	mov	r5, r1
	resp.command = "CGED";
 808a26e:	f102 000c 	add.w	r0, r2, #12
 808a272:	4907      	ldr	r1, [pc, #28]	; (808a290 <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse+0x28>)
 808a274:	f000 fff3 	bl	808b25e <_ZN6StringaSEPKc>
 808a278:	9500      	str	r5, [sp, #0]
 808a27a:	4b06      	ldr	r3, [pc, #24]	; (808a294 <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse+0x2c>)
 808a27c:	f242 7210 	movw	r2, #10000	; 0x2710
 808a280:	4621      	mov	r1, r4
 808a282:	4805      	ldr	r0, [pc, #20]	; (808a298 <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse+0x30>)
 808a284:	f000 fa70 	bl	808a768 <cellular_command>
	// resp.enableDebug = true;

	resp.resp = Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGED=%d\r\n", mode);
 808a288:	6060      	str	r0, [r4, #4]
	if (resp.resp == RESP_OK) {
		resp.postProcess();
	}
}
 808a28a:	b003      	add	sp, #12
 808a28c:	bd30      	pop	{r4, r5, pc}
 808a28e:	bf00      	nop
 808a290:	08094277 	.word	0x08094277
 808a294:	0809427c 	.word	0x0809427c
 808a298:	08089a25 	.word	0x08089a25

0808a29c <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse>:
	}

	return resp;
}

void CellularHelperClass::getCREG(CellularHelperCREGResponse &resp) const {
 808a29c:	b510      	push	{r4, lr}
 808a29e:	460c      	mov	r4, r1
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
 808a2a0:	2100      	movs	r1, #0
 808a2a2:	4b12      	ldr	r3, [pc, #72]	; (808a2ec <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x50>)
 808a2a4:	f242 7210 	movw	r2, #10000	; 0x2710
 808a2a8:	4608      	mov	r0, r1
 808a2aa:	f000 fa5d 	bl	808a768 <cellular_command>
	int tempResp;

	tempResp = Cellular.command(DEFAULT_TIMEOUT, "AT+CREG=2\r\n");
	if (tempResp == RESP_OK) {
 808a2ae:	3002      	adds	r0, #2
 808a2b0:	d11a      	bne.n	808a2e8 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x4c>
		resp.command = "CREG";
 808a2b2:	490f      	ldr	r1, [pc, #60]	; (808a2f0 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x54>)
 808a2b4:	f104 000c 	add.w	r0, r4, #12
 808a2b8:	f000 ffd1 	bl	808b25e <_ZN6StringaSEPKc>

    template<typename T, typename... Targs>
    inline int command(int (*cb)(int type, const char* buf, int len, T* param),
            T* param, system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
 808a2bc:	4b0d      	ldr	r3, [pc, #52]	; (808a2f4 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x58>)
 808a2be:	f242 7210 	movw	r2, #10000	; 0x2710
 808a2c2:	4621      	mov	r1, r4
 808a2c4:	480c      	ldr	r0, [pc, #48]	; (808a2f8 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x5c>)
 808a2c6:	f000 fa4f 	bl	808a768 <cellular_command>
		resp.resp = Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CREG?\r\n");
 808a2ca:	6060      	str	r0, [r4, #4]
		if (resp.resp == RESP_OK) {
 808a2cc:	3002      	adds	r0, #2
 808a2ce:	d10b      	bne.n	808a2e8 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x4c>
			resp.postProcess();
 808a2d0:	4620      	mov	r0, r4
 808a2d2:	f7ff fe9f 	bl	808a014 <_ZN26CellularHelperCREGResponse11postProcessEv>

			// Set back to default
			tempResp = Cellular.command(DEFAULT_TIMEOUT, "AT+CREG=0\r\n");
		}
	}
}
 808a2d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
 808a2da:	2100      	movs	r1, #0
 808a2dc:	4b07      	ldr	r3, [pc, #28]	; (808a2fc <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x60>)
 808a2de:	f242 7210 	movw	r2, #10000	; 0x2710
 808a2e2:	4608      	mov	r0, r1
 808a2e4:	f000 ba40 	b.w	808a768 <cellular_command>
 808a2e8:	bd10      	pop	{r4, pc}
 808a2ea:	bf00      	nop
 808a2ec:	080942b7 	.word	0x080942b7
 808a2f0:	080942c3 	.word	0x080942c3
 808a2f4:	080942c8 	.word	0x080942c8
 808a2f8:	08089a25 	.word	0x08089a25
 808a2fc:	080942d3 	.word	0x080942d3

0808a300 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>:



// There isn't an overload of String that takes a buffer and length, but that's what comes back from
// the Cellular.command callback, so that's why this method exists.
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 808a300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808a304:	460d      	mov	r5, r1
 808a306:	4616      	mov	r6, r2
	str.reserve(str.length() + (size_t)len + 1);
 808a308:	1c59      	adds	r1, r3, #1



// There isn't an overload of String that takes a buffer and length, but that's what comes back from
// the Cellular.command callback, so that's why this method exists.
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 808a30a:	461f      	mov	r7, r3
	str.reserve(str.length() + (size_t)len + 1);
 808a30c:	68ab      	ldr	r3, [r5, #8]
 808a30e:	4628      	mov	r0, r5
 808a310:	4419      	add	r1, r3



// There isn't an overload of String that takes a buffer and length, but that's what comes back from
// the Cellular.command callback, so that's why this method exists.
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 808a312:	f89d 8018 	ldrb.w	r8, [sp, #24]
	str.reserve(str.length() + (size_t)len + 1);
 808a316:	4634      	mov	r4, r6
 808a318:	f000 ff26 	bl	808b168 <_ZN6String7reserveEj>
	for(int ii = 0; ii < len; ii++) {
 808a31c:	1ba3      	subs	r3, r4, r6
 808a31e:	429f      	cmp	r7, r3
 808a320:	dd0d      	ble.n	808a33e <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3e>
		if (!noEOL || (buf[ii] != '\r' && buf[ii] != '\n')) {
 808a322:	f1b8 0f00 	cmp.w	r8, #0
 808a326:	d004      	beq.n	808a332 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x32>
 808a328:	7823      	ldrb	r3, [r4, #0]
 808a32a:	2b0d      	cmp	r3, #13
 808a32c:	d005      	beq.n	808a33a <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3a>
 808a32e:	2b0a      	cmp	r3, #10
 808a330:	d003      	beq.n	808a33a <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3a>
			str.concat(buf[ii]);
 808a332:	7821      	ldrb	r1, [r4, #0]
 808a334:	4628      	mov	r0, r5
 808a336:	f001 f831 	bl	808b39c <_ZN6String6concatEc>
 808a33a:	3401      	adds	r4, #1

// There isn't an overload of String that takes a buffer and length, but that's what comes back from
// the Cellular.command callback, so that's why this method exists.
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
	str.reserve(str.length() + (size_t)len + 1);
	for(int ii = 0; ii < len; ii++) {
 808a33c:	e7ee      	b.n	808a31c <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x1c>
 808a33e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0808a344 <_ZN28CellularHelperStringResponse5parseEiPKci>:
}




int CellularHelperStringResponse::parse(int type, const char *buf, int len) {
 808a344:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (enableDebug) {
 808a346:	f890 e008 	ldrb.w	lr, [r0, #8]
}




int CellularHelperStringResponse::parse(int type, const char *buf, int len) {
 808a34a:	4604      	mov	r4, r0
 808a34c:	460f      	mov	r7, r1
 808a34e:	4615      	mov	r5, r2
 808a350:	461e      	mov	r6, r3
	if (enableDebug) {
 808a352:	f1be 0f00 	cmp.w	lr, #0
 808a356:	d001      	beq.n	808a35c <_ZN28CellularHelperStringResponse5parseEiPKci+0x18>
		logCellularDebug(type, buf, len);
 808a358:	f7ff fb70 	bl	8089a3c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	}
	if (type == TYPE_UNKNOWN) {
 808a35c:	b947      	cbnz	r7, 808a370 <_ZN28CellularHelperStringResponse5parseEiPKci+0x2c>
		CellularHelper.appendBufferToString(string, buf, len, true);
 808a35e:	2301      	movs	r3, #1
 808a360:	9300      	str	r3, [sp, #0]
 808a362:	462a      	mov	r2, r5
 808a364:	4633      	mov	r3, r6
 808a366:	f104 010c 	add.w	r1, r4, #12
 808a36a:	4803      	ldr	r0, [pc, #12]	; (808a378 <_ZN28CellularHelperStringResponse5parseEiPKci+0x34>)
 808a36c:	f7ff ffc8 	bl	808a300 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>
	}
	return WAIT;
}
 808a370:	f04f 30ff 	mov.w	r0, #4294967295
 808a374:	b003      	add	sp, #12
 808a376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808a378:	200010ec 	.word	0x200010ec

0808a37c <_ZN32CellularHelperPlusStringResponse5parseEiPKci>:


int CellularHelperPlusStringResponse::parse(int type, const char *buf, int len) {
 808a37c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (enableDebug) {
 808a37e:	f890 e008 	ldrb.w	lr, [r0, #8]
	}
	return WAIT;
}


int CellularHelperPlusStringResponse::parse(int type, const char *buf, int len) {
 808a382:	b08b      	sub	sp, #44	; 0x2c
 808a384:	4606      	mov	r6, r0
 808a386:	460d      	mov	r5, r1
 808a388:	4617      	mov	r7, r2
 808a38a:	461c      	mov	r4, r3
	if (enableDebug) {
 808a38c:	f1be 0f00 	cmp.w	lr, #0
 808a390:	d001      	beq.n	808a396 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x1a>
		logCellularDebug(type, buf, len);
 808a392:	f7ff fb53 	bl	8089a3c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	}
	if (type == TYPE_PLUS) {
 808a396:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
 808a39a:	d12a      	bne.n	808a3f2 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x76>
		// Copy to temporary string to make processing easier
		char *copy = (char *) malloc(len + 1);
 808a39c:	1c60      	adds	r0, r4, #1
 808a39e:	f000 fb29 	bl	808a9f4 <malloc>
		if (copy) {
 808a3a2:	4605      	mov	r5, r0
 808a3a4:	b328      	cbz	r0, 808a3f2 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x76>
			strncpy(copy, buf, len);
 808a3a6:	4622      	mov	r2, r4
 808a3a8:	4639      	mov	r1, r7
 808a3aa:	f005 f864 	bl	808f476 <strncpy>
			copy[len] = 0;
 808a3ae:	2300      	movs	r3, #0
 808a3b0:	552b      	strb	r3, [r5, r4]

			// We return the parts of the + response corresponding to the command we requested
			char searchFor[32];
			snprintf(searchFor, sizeof(searchFor), "\n+%s: ", command.c_str());
 808a3b2:	68f3      	ldr	r3, [r6, #12]
 808a3b4:	4a11      	ldr	r2, [pc, #68]	; (808a3fc <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x80>)
 808a3b6:	2120      	movs	r1, #32
 808a3b8:	a802      	add	r0, sp, #8
 808a3ba:	f000 fb53 	bl	808aa64 <snprintf>

			//Log.info("searching for: +%s:", command.c_str());

			char *start = strstr(copy, searchFor);
 808a3be:	a902      	add	r1, sp, #8
 808a3c0:	4628      	mov	r0, r5
 808a3c2:	f005 f86b 	bl	808f49c <strstr>
			if (start) {
 808a3c6:	4604      	mov	r4, r0
 808a3c8:	b180      	cbz	r0, 808a3ec <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x70>
				start += strlen(searchFor);
 808a3ca:	a802      	add	r0, sp, #8
 808a3cc:	f005 f836 	bl	808f43c <strlen>
 808a3d0:	4404      	add	r4, r0

				char *end = strchr(start, '\r');
 808a3d2:	210d      	movs	r1, #13
 808a3d4:	4620      	mov	r0, r4
 808a3d6:	f004 fae1 	bl	808e99c <strchr>
				CellularHelper.appendBufferToString(string, start, end - start);
 808a3da:	2301      	movs	r3, #1
 808a3dc:	9300      	str	r3, [sp, #0]
 808a3de:	4622      	mov	r2, r4
 808a3e0:	1b03      	subs	r3, r0, r4
 808a3e2:	f106 011c 	add.w	r1, r6, #28
 808a3e6:	4806      	ldr	r0, [pc, #24]	; (808a400 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x84>)
 808a3e8:	f7ff ff8a 	bl	808a300 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>
			}
			else {
				//Log.info("not found");
			}

			free(copy);
 808a3ec:	4628      	mov	r0, r5
 808a3ee:	f000 fb09 	bl	808aa04 <free>
		}
	}
	return WAIT;
}
 808a3f2:	f04f 30ff 	mov.w	r0, #4294967295
 808a3f6:	b00b      	add	sp, #44	; 0x2c
 808a3f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808a3fa:	bf00      	nop
 808a3fc:	08094315 	.word	0x08094315
 808a400:	200010ec 	.word	0x200010ec

0808a404 <_GLOBAL__sub_I_CellularHelper>:
 808a404:	f000 b800 	b.w	808a408 <HAL_Pin_Map>

0808a408 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 808a408:	b508      	push	{r3, lr}
 808a40a:	4b02      	ldr	r3, [pc, #8]	; (808a414 <HAL_Pin_Map+0xc>)
 808a40c:	681b      	ldr	r3, [r3, #0]
 808a40e:	681b      	ldr	r3, [r3, #0]
 808a410:	9301      	str	r3, [sp, #4]
 808a412:	bd08      	pop	{r3, pc}
 808a414:	080401b0 	.word	0x080401b0

0808a418 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 808a418:	b508      	push	{r3, lr}
 808a41a:	4b02      	ldr	r3, [pc, #8]	; (808a424 <HAL_Validate_Pin_Function+0xc>)
 808a41c:	681b      	ldr	r3, [r3, #0]
 808a41e:	685b      	ldr	r3, [r3, #4]
 808a420:	9301      	str	r3, [sp, #4]
 808a422:	bd08      	pop	{r3, pc}
 808a424:	080401b0 	.word	0x080401b0

0808a428 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 808a428:	b508      	push	{r3, lr}
 808a42a:	4b02      	ldr	r3, [pc, #8]	; (808a434 <HAL_Pin_Mode+0xc>)
 808a42c:	681b      	ldr	r3, [r3, #0]
 808a42e:	689b      	ldr	r3, [r3, #8]
 808a430:	9301      	str	r3, [sp, #4]
 808a432:	bd08      	pop	{r3, pc}
 808a434:	080401b0 	.word	0x080401b0

0808a438 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 808a438:	b508      	push	{r3, lr}
 808a43a:	4b02      	ldr	r3, [pc, #8]	; (808a444 <HAL_Get_Pin_Mode+0xc>)
 808a43c:	681b      	ldr	r3, [r3, #0]
 808a43e:	68db      	ldr	r3, [r3, #12]
 808a440:	9301      	str	r3, [sp, #4]
 808a442:	bd08      	pop	{r3, pc}
 808a444:	080401b0 	.word	0x080401b0

0808a448 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 808a448:	b508      	push	{r3, lr}
 808a44a:	4b02      	ldr	r3, [pc, #8]	; (808a454 <HAL_GPIO_Write+0xc>)
 808a44c:	681b      	ldr	r3, [r3, #0]
 808a44e:	691b      	ldr	r3, [r3, #16]
 808a450:	9301      	str	r3, [sp, #4]
 808a452:	bd08      	pop	{r3, pc}
 808a454:	080401b0 	.word	0x080401b0

0808a458 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 808a458:	b508      	push	{r3, lr}
 808a45a:	4b02      	ldr	r3, [pc, #8]	; (808a464 <HAL_GPIO_Read+0xc>)
 808a45c:	681b      	ldr	r3, [r3, #0]
 808a45e:	695b      	ldr	r3, [r3, #20]
 808a460:	9301      	str	r3, [sp, #4]
 808a462:	bd08      	pop	{r3, pc}
 808a464:	080401b0 	.word	0x080401b0

0808a468 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 808a468:	b508      	push	{r3, lr}
 808a46a:	4b02      	ldr	r3, [pc, #8]	; (808a474 <HAL_Interrupts_Attach+0xc>)
 808a46c:	681b      	ldr	r3, [r3, #0]
 808a46e:	699b      	ldr	r3, [r3, #24]
 808a470:	9301      	str	r3, [sp, #4]
 808a472:	bd08      	pop	{r3, pc}
 808a474:	080401b0 	.word	0x080401b0

0808a478 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
 808a478:	b508      	push	{r3, lr}
 808a47a:	4b02      	ldr	r3, [pc, #8]	; (808a484 <HAL_Interrupts_Detach+0xc>)
 808a47c:	681b      	ldr	r3, [r3, #0]
 808a47e:	69db      	ldr	r3, [r3, #28]
 808a480:	9301      	str	r3, [sp, #4]
 808a482:	bd08      	pop	{r3, pc}
 808a484:	080401b0 	.word	0x080401b0

0808a488 <HAL_ADC_Set_Sample_Time>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
 808a488:	b508      	push	{r3, lr}
 808a48a:	4b02      	ldr	r3, [pc, #8]	; (808a494 <HAL_ADC_Set_Sample_Time+0xc>)
 808a48c:	681b      	ldr	r3, [r3, #0]
 808a48e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808a490:	9301      	str	r3, [sp, #4]
 808a492:	bd08      	pop	{r3, pc}
 808a494:	080401b0 	.word	0x080401b0

0808a498 <HAL_ADC_Read>:
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 808a498:	b508      	push	{r3, lr}
 808a49a:	4b02      	ldr	r3, [pc, #8]	; (808a4a4 <HAL_ADC_Read+0xc>)
 808a49c:	681b      	ldr	r3, [r3, #0]
 808a49e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808a4a0:	9301      	str	r3, [sp, #4]
 808a4a2:	bd08      	pop	{r3, pc}
 808a4a4:	080401b0 	.word	0x080401b0

0808a4a8 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 808a4a8:	b508      	push	{r3, lr}
 808a4aa:	4b02      	ldr	r3, [pc, #8]	; (808a4b4 <HAL_SPI_Begin+0xc>)
 808a4ac:	681b      	ldr	r3, [r3, #0]
 808a4ae:	681b      	ldr	r3, [r3, #0]
 808a4b0:	9301      	str	r3, [sp, #4]
 808a4b2:	bd08      	pop	{r3, pc}
 808a4b4:	080401b4 	.word	0x080401b4

0808a4b8 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 808a4b8:	b508      	push	{r3, lr}
 808a4ba:	4b02      	ldr	r3, [pc, #8]	; (808a4c4 <HAL_SPI_Set_Bit_Order+0xc>)
 808a4bc:	681b      	ldr	r3, [r3, #0]
 808a4be:	689b      	ldr	r3, [r3, #8]
 808a4c0:	9301      	str	r3, [sp, #4]
 808a4c2:	bd08      	pop	{r3, pc}
 808a4c4:	080401b4 	.word	0x080401b4

0808a4c8 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 808a4c8:	b508      	push	{r3, lr}
 808a4ca:	4b02      	ldr	r3, [pc, #8]	; (808a4d4 <HAL_SPI_Set_Data_Mode+0xc>)
 808a4cc:	681b      	ldr	r3, [r3, #0]
 808a4ce:	68db      	ldr	r3, [r3, #12]
 808a4d0:	9301      	str	r3, [sp, #4]
 808a4d2:	bd08      	pop	{r3, pc}
 808a4d4:	080401b4 	.word	0x080401b4

0808a4d8 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 808a4d8:	b508      	push	{r3, lr}
 808a4da:	4b02      	ldr	r3, [pc, #8]	; (808a4e4 <HAL_SPI_Set_Clock_Divider+0xc>)
 808a4dc:	681b      	ldr	r3, [r3, #0]
 808a4de:	691b      	ldr	r3, [r3, #16]
 808a4e0:	9301      	str	r3, [sp, #4]
 808a4e2:	bd08      	pop	{r3, pc}
 808a4e4:	080401b4 	.word	0x080401b4

0808a4e8 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 808a4e8:	b508      	push	{r3, lr}
 808a4ea:	4b02      	ldr	r3, [pc, #8]	; (808a4f4 <HAL_SPI_Send_Receive_Data+0xc>)
 808a4ec:	681b      	ldr	r3, [r3, #0]
 808a4ee:	695b      	ldr	r3, [r3, #20]
 808a4f0:	9301      	str	r3, [sp, #4]
 808a4f2:	bd08      	pop	{r3, pc}
 808a4f4:	080401b4 	.word	0x080401b4

0808a4f8 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 808a4f8:	b508      	push	{r3, lr}
 808a4fa:	4b02      	ldr	r3, [pc, #8]	; (808a504 <HAL_SPI_Init+0xc>)
 808a4fc:	681b      	ldr	r3, [r3, #0]
 808a4fe:	69db      	ldr	r3, [r3, #28]
 808a500:	9301      	str	r3, [sp, #4]
 808a502:	bd08      	pop	{r3, pc}
 808a504:	080401b4 	.word	0x080401b4

0808a508 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 808a508:	b508      	push	{r3, lr}
 808a50a:	4b02      	ldr	r3, [pc, #8]	; (808a514 <HAL_SPI_Is_Enabled+0xc>)
 808a50c:	681b      	ldr	r3, [r3, #0]
 808a50e:	6a1b      	ldr	r3, [r3, #32]
 808a510:	9301      	str	r3, [sp, #4]
 808a512:	bd08      	pop	{r3, pc}
 808a514:	080401b4 	.word	0x080401b4

0808a518 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 808a518:	b508      	push	{r3, lr}
 808a51a:	4b02      	ldr	r3, [pc, #8]	; (808a524 <HAL_SPI_Info+0xc>)
 808a51c:	681b      	ldr	r3, [r3, #0]
 808a51e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808a520:	9301      	str	r3, [sp, #4]
 808a522:	bd08      	pop	{r3, pc}
 808a524:	080401b4 	.word	0x080401b4

0808a528 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
 808a528:	b508      	push	{r3, lr}
 808a52a:	4b02      	ldr	r3, [pc, #8]	; (808a534 <HAL_SPI_DMA_Transfer+0xc>)
 808a52c:	681b      	ldr	r3, [r3, #0]
 808a52e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808a530:	9301      	str	r3, [sp, #4]
 808a532:	bd08      	pop	{r3, pc}
 808a534:	080401b4 	.word	0x080401b4

0808a538 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
 808a538:	b508      	push	{r3, lr}
 808a53a:	4b02      	ldr	r3, [pc, #8]	; (808a544 <HAL_SPI_DMA_Transfer_Status+0xc>)
 808a53c:	681b      	ldr	r3, [r3, #0]
 808a53e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808a540:	9301      	str	r3, [sp, #4]
 808a542:	bd08      	pop	{r3, pc}
 808a544:	080401b4 	.word	0x080401b4

0808a548 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 808a548:	b508      	push	{r3, lr}
 808a54a:	4b02      	ldr	r3, [pc, #8]	; (808a554 <HAL_RNG_GetRandomNumber+0xc>)
 808a54c:	681b      	ldr	r3, [r3, #0]
 808a54e:	685b      	ldr	r3, [r3, #4]
 808a550:	9301      	str	r3, [sp, #4]
 808a552:	bd08      	pop	{r3, pc}
 808a554:	0804019c 	.word	0x0804019c

0808a558 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 808a558:	b508      	push	{r3, lr}
 808a55a:	4b02      	ldr	r3, [pc, #8]	; (808a564 <HAL_Delay_Microseconds+0xc>)
 808a55c:	681b      	ldr	r3, [r3, #0]
 808a55e:	68db      	ldr	r3, [r3, #12]
 808a560:	9301      	str	r3, [sp, #4]
 808a562:	bd08      	pop	{r3, pc}
 808a564:	0804019c 	.word	0x0804019c

0808a568 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 808a568:	b508      	push	{r3, lr}
 808a56a:	4b02      	ldr	r3, [pc, #8]	; (808a574 <HAL_Timer_Get_Milli_Seconds+0xc>)
 808a56c:	681b      	ldr	r3, [r3, #0]
 808a56e:	695b      	ldr	r3, [r3, #20]
 808a570:	9301      	str	r3, [sp, #4]
 808a572:	bd08      	pop	{r3, pc}
 808a574:	0804019c 	.word	0x0804019c

0808a578 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 808a578:	b508      	push	{r3, lr}
 808a57a:	4b02      	ldr	r3, [pc, #8]	; (808a584 <HAL_RTC_Get_UnixTime+0xc>)
 808a57c:	681b      	ldr	r3, [r3, #0]
 808a57e:	69db      	ldr	r3, [r3, #28]
 808a580:	9301      	str	r3, [sp, #4]
 808a582:	bd08      	pop	{r3, pc}
 808a584:	0804019c 	.word	0x0804019c

0808a588 <HAL_RTC_Set_UnixTime>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
 808a588:	b508      	push	{r3, lr}
 808a58a:	4b02      	ldr	r3, [pc, #8]	; (808a594 <HAL_RTC_Set_UnixTime+0xc>)
 808a58c:	681b      	ldr	r3, [r3, #0]
 808a58e:	6a1b      	ldr	r3, [r3, #32]
 808a590:	9301      	str	r3, [sp, #4]
 808a592:	bd08      	pop	{r3, pc}
 808a594:	0804019c 	.word	0x0804019c

0808a598 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 808a598:	b508      	push	{r3, lr}
 808a59a:	4b02      	ldr	r3, [pc, #8]	; (808a5a4 <HAL_EEPROM_Init+0xc>)
 808a59c:	681b      	ldr	r3, [r3, #0]
 808a59e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808a5a0:	9301      	str	r3, [sp, #4]
 808a5a2:	bd08      	pop	{r3, pc}
 808a5a4:	0804019c 	.word	0x0804019c

0808a5a8 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
 808a5a8:	b508      	push	{r3, lr}
 808a5aa:	4b02      	ldr	r3, [pc, #8]	; (808a5b4 <HAL_EEPROM_Get+0xc>)
 808a5ac:	681b      	ldr	r3, [r3, #0]
 808a5ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808a5b0:	9301      	str	r3, [sp, #4]
 808a5b2:	bd08      	pop	{r3, pc}
 808a5b4:	0804019c 	.word	0x0804019c

0808a5b8 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 808a5b8:	b508      	push	{r3, lr}
 808a5ba:	4b02      	ldr	r3, [pc, #8]	; (808a5c4 <HAL_EEPROM_Put+0xc>)
 808a5bc:	681b      	ldr	r3, [r3, #0]
 808a5be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808a5c0:	9301      	str	r3, [sp, #4]
 808a5c2:	bd08      	pop	{r3, pc}
 808a5c4:	0804019c 	.word	0x0804019c

0808a5c8 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 808a5c8:	b508      	push	{r3, lr}
 808a5ca:	4b02      	ldr	r3, [pc, #8]	; (808a5d4 <HAL_RTC_Time_Is_Valid+0xc>)
 808a5cc:	681b      	ldr	r3, [r3, #0]
 808a5ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 808a5d0:	9301      	str	r3, [sp, #4]
 808a5d2:	bd08      	pop	{r3, pc}
 808a5d4:	0804019c 	.word	0x0804019c

0808a5d8 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
 808a5d8:	b508      	push	{r3, lr}
 808a5da:	4b02      	ldr	r3, [pc, #8]	; (808a5e4 <HAL_Core_System_Reset_Ex+0xc>)
 808a5dc:	681b      	ldr	r3, [r3, #0]
 808a5de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 808a5e0:	9301      	str	r3, [sp, #4]
 808a5e2:	bd08      	pop	{r3, pc}
 808a5e4:	080401b8 	.word	0x080401b8

0808a5e8 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 808a5e8:	b508      	push	{r3, lr}
 808a5ea:	4b02      	ldr	r3, [pc, #8]	; (808a5f4 <os_mutex_create+0xc>)
 808a5ec:	681b      	ldr	r3, [r3, #0]
 808a5ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808a5f0:	9301      	str	r3, [sp, #4]
 808a5f2:	bd08      	pop	{r3, pc}
 808a5f4:	080401d0 	.word	0x080401d0

0808a5f8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 808a5f8:	b508      	push	{r3, lr}
 808a5fa:	4b02      	ldr	r3, [pc, #8]	; (808a604 <HAL_USART_Init+0xc>)
 808a5fc:	681b      	ldr	r3, [r3, #0]
 808a5fe:	699b      	ldr	r3, [r3, #24]
 808a600:	9301      	str	r3, [sp, #4]
 808a602:	bd08      	pop	{r3, pc}
 808a604:	080401c4 	.word	0x080401c4

0808a608 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 808a608:	b508      	push	{r3, lr}
 808a60a:	4b02      	ldr	r3, [pc, #8]	; (808a614 <HAL_USART_Write_Data+0xc>)
 808a60c:	681b      	ldr	r3, [r3, #0]
 808a60e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808a610:	9301      	str	r3, [sp, #4]
 808a612:	bd08      	pop	{r3, pc}
 808a614:	080401c4 	.word	0x080401c4

0808a618 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 808a618:	b508      	push	{r3, lr}
 808a61a:	4b02      	ldr	r3, [pc, #8]	; (808a624 <HAL_USART_Available_Data+0xc>)
 808a61c:	681b      	ldr	r3, [r3, #0]
 808a61e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808a620:	9301      	str	r3, [sp, #4]
 808a622:	bd08      	pop	{r3, pc}
 808a624:	080401c4 	.word	0x080401c4

0808a628 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 808a628:	b508      	push	{r3, lr}
 808a62a:	4b02      	ldr	r3, [pc, #8]	; (808a634 <HAL_USART_Read_Data+0xc>)
 808a62c:	681b      	ldr	r3, [r3, #0]
 808a62e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808a630:	9301      	str	r3, [sp, #4]
 808a632:	bd08      	pop	{r3, pc}
 808a634:	080401c4 	.word	0x080401c4

0808a638 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 808a638:	b508      	push	{r3, lr}
 808a63a:	4b02      	ldr	r3, [pc, #8]	; (808a644 <HAL_USART_Peek_Data+0xc>)
 808a63c:	681b      	ldr	r3, [r3, #0]
 808a63e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808a640:	9301      	str	r3, [sp, #4]
 808a642:	bd08      	pop	{r3, pc}
 808a644:	080401c4 	.word	0x080401c4

0808a648 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 808a648:	b508      	push	{r3, lr}
 808a64a:	4b02      	ldr	r3, [pc, #8]	; (808a654 <HAL_USART_Flush_Data+0xc>)
 808a64c:	681b      	ldr	r3, [r3, #0]
 808a64e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808a650:	9301      	str	r3, [sp, #4]
 808a652:	bd08      	pop	{r3, pc}
 808a654:	080401c4 	.word	0x080401c4

0808a658 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 808a658:	b508      	push	{r3, lr}
 808a65a:	4b02      	ldr	r3, [pc, #8]	; (808a664 <HAL_USART_Is_Enabled+0xc>)
 808a65c:	681b      	ldr	r3, [r3, #0]
 808a65e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808a660:	9301      	str	r3, [sp, #4]
 808a662:	bd08      	pop	{r3, pc}
 808a664:	080401c4 	.word	0x080401c4

0808a668 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 808a668:	b508      	push	{r3, lr}
 808a66a:	4b02      	ldr	r3, [pc, #8]	; (808a674 <HAL_USART_Available_Data_For_Write+0xc>)
 808a66c:	681b      	ldr	r3, [r3, #0]
 808a66e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808a670:	9301      	str	r3, [sp, #4]
 808a672:	bd08      	pop	{r3, pc}
 808a674:	080401c4 	.word	0x080401c4

0808a678 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 808a678:	b508      	push	{r3, lr}
 808a67a:	4b02      	ldr	r3, [pc, #8]	; (808a684 <HAL_USART_BeginConfig+0xc>)
 808a67c:	681b      	ldr	r3, [r3, #0]
 808a67e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808a680:	9301      	str	r3, [sp, #4]
 808a682:	bd08      	pop	{r3, pc}
 808a684:	080401c4 	.word	0x080401c4

0808a688 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 808a688:	b508      	push	{r3, lr}
 808a68a:	4b02      	ldr	r3, [pc, #8]	; (808a694 <HAL_I2C_Begin+0xc>)
 808a68c:	681b      	ldr	r3, [r3, #0]
 808a68e:	68db      	ldr	r3, [r3, #12]
 808a690:	9301      	str	r3, [sp, #4]
 808a692:	bd08      	pop	{r3, pc}
 808a694:	080401ac 	.word	0x080401ac

0808a698 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 808a698:	b508      	push	{r3, lr}
 808a69a:	4b02      	ldr	r3, [pc, #8]	; (808a6a4 <HAL_I2C_Request_Data+0xc>)
 808a69c:	681b      	ldr	r3, [r3, #0]
 808a69e:	695b      	ldr	r3, [r3, #20]
 808a6a0:	9301      	str	r3, [sp, #4]
 808a6a2:	bd08      	pop	{r3, pc}
 808a6a4:	080401ac 	.word	0x080401ac

0808a6a8 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 808a6a8:	b508      	push	{r3, lr}
 808a6aa:	4b02      	ldr	r3, [pc, #8]	; (808a6b4 <HAL_I2C_Begin_Transmission+0xc>)
 808a6ac:	681b      	ldr	r3, [r3, #0]
 808a6ae:	699b      	ldr	r3, [r3, #24]
 808a6b0:	9301      	str	r3, [sp, #4]
 808a6b2:	bd08      	pop	{r3, pc}
 808a6b4:	080401ac 	.word	0x080401ac

0808a6b8 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 808a6b8:	b508      	push	{r3, lr}
 808a6ba:	4b02      	ldr	r3, [pc, #8]	; (808a6c4 <HAL_I2C_End_Transmission+0xc>)
 808a6bc:	681b      	ldr	r3, [r3, #0]
 808a6be:	69db      	ldr	r3, [r3, #28]
 808a6c0:	9301      	str	r3, [sp, #4]
 808a6c2:	bd08      	pop	{r3, pc}
 808a6c4:	080401ac 	.word	0x080401ac

0808a6c8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 808a6c8:	b508      	push	{r3, lr}
 808a6ca:	4b02      	ldr	r3, [pc, #8]	; (808a6d4 <HAL_I2C_Write_Data+0xc>)
 808a6cc:	681b      	ldr	r3, [r3, #0]
 808a6ce:	6a1b      	ldr	r3, [r3, #32]
 808a6d0:	9301      	str	r3, [sp, #4]
 808a6d2:	bd08      	pop	{r3, pc}
 808a6d4:	080401ac 	.word	0x080401ac

0808a6d8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 808a6d8:	b508      	push	{r3, lr}
 808a6da:	4b02      	ldr	r3, [pc, #8]	; (808a6e4 <HAL_I2C_Available_Data+0xc>)
 808a6dc:	681b      	ldr	r3, [r3, #0]
 808a6de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808a6e0:	9301      	str	r3, [sp, #4]
 808a6e2:	bd08      	pop	{r3, pc}
 808a6e4:	080401ac 	.word	0x080401ac

0808a6e8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 808a6e8:	b508      	push	{r3, lr}
 808a6ea:	4b02      	ldr	r3, [pc, #8]	; (808a6f4 <HAL_I2C_Read_Data+0xc>)
 808a6ec:	681b      	ldr	r3, [r3, #0]
 808a6ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808a6f0:	9301      	str	r3, [sp, #4]
 808a6f2:	bd08      	pop	{r3, pc}
 808a6f4:	080401ac 	.word	0x080401ac

0808a6f8 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 808a6f8:	b508      	push	{r3, lr}
 808a6fa:	4b02      	ldr	r3, [pc, #8]	; (808a704 <HAL_I2C_Peek_Data+0xc>)
 808a6fc:	681b      	ldr	r3, [r3, #0]
 808a6fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808a700:	9301      	str	r3, [sp, #4]
 808a702:	bd08      	pop	{r3, pc}
 808a704:	080401ac 	.word	0x080401ac

0808a708 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 808a708:	b508      	push	{r3, lr}
 808a70a:	4b02      	ldr	r3, [pc, #8]	; (808a714 <HAL_I2C_Flush_Data+0xc>)
 808a70c:	681b      	ldr	r3, [r3, #0]
 808a70e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808a710:	9301      	str	r3, [sp, #4]
 808a712:	bd08      	pop	{r3, pc}
 808a714:	080401ac 	.word	0x080401ac

0808a718 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 808a718:	b508      	push	{r3, lr}
 808a71a:	4b02      	ldr	r3, [pc, #8]	; (808a724 <HAL_I2C_Is_Enabled+0xc>)
 808a71c:	681b      	ldr	r3, [r3, #0]
 808a71e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808a720:	9301      	str	r3, [sp, #4]
 808a722:	bd08      	pop	{r3, pc}
 808a724:	080401ac 	.word	0x080401ac

0808a728 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 808a728:	b508      	push	{r3, lr}
 808a72a:	4b02      	ldr	r3, [pc, #8]	; (808a734 <HAL_I2C_Init+0xc>)
 808a72c:	681b      	ldr	r3, [r3, #0]
 808a72e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808a730:	9301      	str	r3, [sp, #4]
 808a732:	bd08      	pop	{r3, pc}
 808a734:	080401ac 	.word	0x080401ac

0808a738 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
 808a738:	b508      	push	{r3, lr}
 808a73a:	4b02      	ldr	r3, [pc, #8]	; (808a744 <HAL_I2C_Acquire+0xc>)
 808a73c:	681b      	ldr	r3, [r3, #0]
 808a73e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808a740:	9301      	str	r3, [sp, #4]
 808a742:	bd08      	pop	{r3, pc}
 808a744:	080401ac 	.word	0x080401ac

0808a748 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
 808a748:	b508      	push	{r3, lr}
 808a74a:	4b02      	ldr	r3, [pc, #8]	; (808a754 <HAL_I2C_Release+0xc>)
 808a74c:	681b      	ldr	r3, [r3, #0]
 808a74e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808a750:	9301      	str	r3, [sp, #4]
 808a752:	bd08      	pop	{r3, pc}
 808a754:	080401ac 	.word	0x080401ac

0808a758 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 808a758:	b508      	push	{r3, lr}
 808a75a:	4b02      	ldr	r3, [pc, #8]	; (808a764 <inet_gethostbyname+0xc>)
 808a75c:	681b      	ldr	r3, [r3, #0]
 808a75e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808a760:	9301      	str	r3, [sp, #4]
 808a762:	bd08      	pop	{r3, pc}
 808a764:	08060020 	.word	0x08060020

0808a768 <cellular_command>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 808a768:	b508      	push	{r3, lr}
 808a76a:	4b02      	ldr	r3, [pc, #8]	; (808a774 <cellular_command+0xc>)
 808a76c:	681b      	ldr	r3, [r3, #0]
 808a76e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808a770:	9301      	str	r3, [sp, #4]
 808a772:	bd08      	pop	{r3, pc}
 808a774:	08060020 	.word	0x08060020

0808a778 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 808a778:	b508      	push	{r3, lr}
 808a77a:	4b02      	ldr	r3, [pc, #8]	; (808a784 <HAL_USB_USART_Init+0xc>)
 808a77c:	681b      	ldr	r3, [r3, #0]
 808a77e:	681b      	ldr	r3, [r3, #0]
 808a780:	9301      	str	r3, [sp, #4]
 808a782:	bd08      	pop	{r3, pc}
 808a784:	0806001c 	.word	0x0806001c

0808a788 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 808a788:	b508      	push	{r3, lr}
 808a78a:	4b02      	ldr	r3, [pc, #8]	; (808a794 <HAL_USB_USART_Begin+0xc>)
 808a78c:	681b      	ldr	r3, [r3, #0]
 808a78e:	685b      	ldr	r3, [r3, #4]
 808a790:	9301      	str	r3, [sp, #4]
 808a792:	bd08      	pop	{r3, pc}
 808a794:	0806001c 	.word	0x0806001c

0808a798 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 808a798:	b508      	push	{r3, lr}
 808a79a:	4b02      	ldr	r3, [pc, #8]	; (808a7a4 <HAL_USB_USART_Available_Data+0xc>)
 808a79c:	681b      	ldr	r3, [r3, #0]
 808a79e:	691b      	ldr	r3, [r3, #16]
 808a7a0:	9301      	str	r3, [sp, #4]
 808a7a2:	bd08      	pop	{r3, pc}
 808a7a4:	0806001c 	.word	0x0806001c

0808a7a8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 808a7a8:	b508      	push	{r3, lr}
 808a7aa:	4b02      	ldr	r3, [pc, #8]	; (808a7b4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 808a7ac:	681b      	ldr	r3, [r3, #0]
 808a7ae:	695b      	ldr	r3, [r3, #20]
 808a7b0:	9301      	str	r3, [sp, #4]
 808a7b2:	bd08      	pop	{r3, pc}
 808a7b4:	0806001c 	.word	0x0806001c

0808a7b8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 808a7b8:	b508      	push	{r3, lr}
 808a7ba:	4b02      	ldr	r3, [pc, #8]	; (808a7c4 <HAL_USB_USART_Receive_Data+0xc>)
 808a7bc:	681b      	ldr	r3, [r3, #0]
 808a7be:	699b      	ldr	r3, [r3, #24]
 808a7c0:	9301      	str	r3, [sp, #4]
 808a7c2:	bd08      	pop	{r3, pc}
 808a7c4:	0806001c 	.word	0x0806001c

0808a7c8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 808a7c8:	b508      	push	{r3, lr}
 808a7ca:	4b02      	ldr	r3, [pc, #8]	; (808a7d4 <HAL_USB_USART_Send_Data+0xc>)
 808a7cc:	681b      	ldr	r3, [r3, #0]
 808a7ce:	69db      	ldr	r3, [r3, #28]
 808a7d0:	9301      	str	r3, [sp, #4]
 808a7d2:	bd08      	pop	{r3, pc}
 808a7d4:	0806001c 	.word	0x0806001c

0808a7d8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 808a7d8:	b508      	push	{r3, lr}
 808a7da:	4b02      	ldr	r3, [pc, #8]	; (808a7e4 <HAL_USB_USART_Flush_Data+0xc>)
 808a7dc:	681b      	ldr	r3, [r3, #0]
 808a7de:	6a1b      	ldr	r3, [r3, #32]
 808a7e0:	9301      	str	r3, [sp, #4]
 808a7e2:	bd08      	pop	{r3, pc}
 808a7e4:	0806001c 	.word	0x0806001c

0808a7e8 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 808a7e8:	b508      	push	{r3, lr}
 808a7ea:	4b02      	ldr	r3, [pc, #8]	; (808a7f4 <log_message_v+0xc>)
 808a7ec:	681b      	ldr	r3, [r3, #0]
 808a7ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808a7f0:	9301      	str	r3, [sp, #4]
 808a7f2:	bd08      	pop	{r3, pc}
 808a7f4:	080201a0 	.word	0x080201a0

0808a7f8 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 808a7f8:	b508      	push	{r3, lr}
 808a7fa:	4b02      	ldr	r3, [pc, #8]	; (808a804 <system_mode+0xc>)
 808a7fc:	681b      	ldr	r3, [r3, #0]
 808a7fe:	681b      	ldr	r3, [r3, #0]
 808a800:	9301      	str	r3, [sp, #4]
 808a802:	bd08      	pop	{r3, pc}
 808a804:	080401a4 	.word	0x080401a4

0808a808 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 808a808:	b508      	push	{r3, lr}
 808a80a:	4b02      	ldr	r3, [pc, #8]	; (808a814 <set_system_mode+0xc>)
 808a80c:	681b      	ldr	r3, [r3, #0]
 808a80e:	685b      	ldr	r3, [r3, #4]
 808a810:	9301      	str	r3, [sp, #4]
 808a812:	bd08      	pop	{r3, pc}
 808a814:	080401a4 	.word	0x080401a4

0808a818 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 808a818:	b508      	push	{r3, lr}
 808a81a:	4b02      	ldr	r3, [pc, #8]	; (808a824 <system_delay_ms+0xc>)
 808a81c:	681b      	ldr	r3, [r3, #0]
 808a81e:	695b      	ldr	r3, [r3, #20]
 808a820:	9301      	str	r3, [sp, #4]
 808a822:	bd08      	pop	{r3, pc}
 808a824:	080401a4 	.word	0x080401a4

0808a828 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 808a828:	b508      	push	{r3, lr}
 808a82a:	4b02      	ldr	r3, [pc, #8]	; (808a834 <system_thread_set_state+0xc>)
 808a82c:	681b      	ldr	r3, [r3, #0]
 808a82e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808a830:	9301      	str	r3, [sp, #4]
 808a832:	bd08      	pop	{r3, pc}
 808a834:	080401a4 	.word	0x080401a4

0808a838 <system_version_info>:
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
 808a838:	b508      	push	{r3, lr}
 808a83a:	4b02      	ldr	r3, [pc, #8]	; (808a844 <system_version_info+0xc>)
 808a83c:	681b      	ldr	r3, [r3, #0]
 808a83e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808a840:	9301      	str	r3, [sp, #4]
 808a842:	bd08      	pop	{r3, pc}
 808a844:	080401a4 	.word	0x080401a4

0808a848 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 808a848:	b508      	push	{r3, lr}
 808a84a:	4b02      	ldr	r3, [pc, #8]	; (808a854 <application_thread_current+0xc>)
 808a84c:	681b      	ldr	r3, [r3, #0]
 808a84e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808a850:	9301      	str	r3, [sp, #4]
 808a852:	bd08      	pop	{r3, pc}
 808a854:	080401a4 	.word	0x080401a4

0808a858 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 808a858:	b508      	push	{r3, lr}
 808a85a:	4b02      	ldr	r3, [pc, #8]	; (808a864 <application_thread_invoke+0xc>)
 808a85c:	681b      	ldr	r3, [r3, #0]
 808a85e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808a860:	9301      	str	r3, [sp, #4]
 808a862:	bd08      	pop	{r3, pc}
 808a864:	080401a4 	.word	0x080401a4

0808a868 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 808a868:	b508      	push	{r3, lr}
 808a86a:	4b02      	ldr	r3, [pc, #8]	; (808a874 <system_thread_get_state+0xc>)
 808a86c:	681b      	ldr	r3, [r3, #0]
 808a86e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 808a870:	9301      	str	r3, [sp, #4]
 808a872:	bd08      	pop	{r3, pc}
 808a874:	080401a4 	.word	0x080401a4

0808a878 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
 808a878:	b508      	push	{r3, lr}
 808a87a:	4b02      	ldr	r3, [pc, #8]	; (808a884 <system_notify_time_changed+0xc>)
 808a87c:	681b      	ldr	r3, [r3, #0]
 808a87e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 808a880:	9301      	str	r3, [sp, #4]
 808a882:	bd08      	pop	{r3, pc}
 808a884:	080401a4 	.word	0x080401a4

0808a888 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 808a888:	b508      	push	{r3, lr}
 808a88a:	4b03      	ldr	r3, [pc, #12]	; (808a898 <system_ctrl_set_app_request_handler+0x10>)
 808a88c:	681b      	ldr	r3, [r3, #0]
 808a88e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808a892:	9301      	str	r3, [sp, #4]
 808a894:	bd08      	pop	{r3, pc}
 808a896:	0000      	.short	0x0000
 808a898:	080401a4 	.word	0x080401a4

0808a89c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 808a89c:	b508      	push	{r3, lr}
 808a89e:	4b03      	ldr	r3, [pc, #12]	; (808a8ac <system_ctrl_set_result+0x10>)
 808a8a0:	681b      	ldr	r3, [r3, #0]
 808a8a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 808a8a6:	9301      	str	r3, [sp, #4]
 808a8a8:	bd08      	pop	{r3, pc}
 808a8aa:	0000      	.short	0x0000
 808a8ac:	080401a4 	.word	0x080401a4

0808a8b0 <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
 808a8b0:	b508      	push	{r3, lr}
 808a8b2:	4b03      	ldr	r3, [pc, #12]	; (808a8c0 <system_sleep_pins+0x10>)
 808a8b4:	681b      	ldr	r3, [r3, #0]
 808a8b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 808a8ba:	9301      	str	r3, [sp, #4]
 808a8bc:	bd08      	pop	{r3, pc}
 808a8be:	0000      	.short	0x0000
 808a8c0:	080401a4 	.word	0x080401a4

0808a8c4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 808a8c4:	b508      	push	{r3, lr}
 808a8c6:	4b02      	ldr	r3, [pc, #8]	; (808a8d0 <network_connect+0xc>)
 808a8c8:	681b      	ldr	r3, [r3, #0]
 808a8ca:	685b      	ldr	r3, [r3, #4]
 808a8cc:	9301      	str	r3, [sp, #4]
 808a8ce:	bd08      	pop	{r3, pc}
 808a8d0:	080401c8 	.word	0x080401c8

0808a8d4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 808a8d4:	b508      	push	{r3, lr}
 808a8d6:	4b02      	ldr	r3, [pc, #8]	; (808a8e0 <network_connecting+0xc>)
 808a8d8:	681b      	ldr	r3, [r3, #0]
 808a8da:	689b      	ldr	r3, [r3, #8]
 808a8dc:	9301      	str	r3, [sp, #4]
 808a8de:	bd08      	pop	{r3, pc}
 808a8e0:	080401c8 	.word	0x080401c8

0808a8e4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 808a8e4:	b508      	push	{r3, lr}
 808a8e6:	4b02      	ldr	r3, [pc, #8]	; (808a8f0 <network_disconnect+0xc>)
 808a8e8:	681b      	ldr	r3, [r3, #0]
 808a8ea:	68db      	ldr	r3, [r3, #12]
 808a8ec:	9301      	str	r3, [sp, #4]
 808a8ee:	bd08      	pop	{r3, pc}
 808a8f0:	080401c8 	.word	0x080401c8

0808a8f4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 808a8f4:	b508      	push	{r3, lr}
 808a8f6:	4b02      	ldr	r3, [pc, #8]	; (808a900 <network_ready+0xc>)
 808a8f8:	681b      	ldr	r3, [r3, #0]
 808a8fa:	691b      	ldr	r3, [r3, #16]
 808a8fc:	9301      	str	r3, [sp, #4]
 808a8fe:	bd08      	pop	{r3, pc}
 808a900:	080401c8 	.word	0x080401c8

0808a904 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 808a904:	b508      	push	{r3, lr}
 808a906:	4b02      	ldr	r3, [pc, #8]	; (808a910 <network_on+0xc>)
 808a908:	681b      	ldr	r3, [r3, #0]
 808a90a:	695b      	ldr	r3, [r3, #20]
 808a90c:	9301      	str	r3, [sp, #4]
 808a90e:	bd08      	pop	{r3, pc}
 808a910:	080401c8 	.word	0x080401c8

0808a914 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 808a914:	b508      	push	{r3, lr}
 808a916:	4b02      	ldr	r3, [pc, #8]	; (808a920 <network_off+0xc>)
 808a918:	681b      	ldr	r3, [r3, #0]
 808a91a:	699b      	ldr	r3, [r3, #24]
 808a91c:	9301      	str	r3, [sp, #4]
 808a91e:	bd08      	pop	{r3, pc}
 808a920:	080401c8 	.word	0x080401c8

0808a924 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 808a924:	b508      	push	{r3, lr}
 808a926:	4b02      	ldr	r3, [pc, #8]	; (808a930 <network_listen+0xc>)
 808a928:	681b      	ldr	r3, [r3, #0]
 808a92a:	69db      	ldr	r3, [r3, #28]
 808a92c:	9301      	str	r3, [sp, #4]
 808a92e:	bd08      	pop	{r3, pc}
 808a930:	080401c8 	.word	0x080401c8

0808a934 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 808a934:	b508      	push	{r3, lr}
 808a936:	4b02      	ldr	r3, [pc, #8]	; (808a940 <network_listening+0xc>)
 808a938:	681b      	ldr	r3, [r3, #0]
 808a93a:	6a1b      	ldr	r3, [r3, #32]
 808a93c:	9301      	str	r3, [sp, #4]
 808a93e:	bd08      	pop	{r3, pc}
 808a940:	080401c8 	.word	0x080401c8

0808a944 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 808a944:	b508      	push	{r3, lr}
 808a946:	4b02      	ldr	r3, [pc, #8]	; (808a950 <network_set_listen_timeout+0xc>)
 808a948:	681b      	ldr	r3, [r3, #0]
 808a94a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808a94c:	9301      	str	r3, [sp, #4]
 808a94e:	bd08      	pop	{r3, pc}
 808a950:	080401c8 	.word	0x080401c8

0808a954 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 808a954:	b508      	push	{r3, lr}
 808a956:	4b02      	ldr	r3, [pc, #8]	; (808a960 <network_get_listen_timeout+0xc>)
 808a958:	681b      	ldr	r3, [r3, #0]
 808a95a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808a95c:	9301      	str	r3, [sp, #4]
 808a95e:	bd08      	pop	{r3, pc}
 808a960:	080401c8 	.word	0x080401c8

0808a964 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 808a964:	b508      	push	{r3, lr}
 808a966:	4b02      	ldr	r3, [pc, #8]	; (808a970 <spark_function+0xc>)
 808a968:	681b      	ldr	r3, [r3, #0]
 808a96a:	685b      	ldr	r3, [r3, #4]
 808a96c:	9301      	str	r3, [sp, #4]
 808a96e:	bd08      	pop	{r3, pc}
 808a970:	080401cc 	.word	0x080401cc

0808a974 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 808a974:	b508      	push	{r3, lr}
 808a976:	4b02      	ldr	r3, [pc, #8]	; (808a980 <spark_process+0xc>)
 808a978:	681b      	ldr	r3, [r3, #0]
 808a97a:	689b      	ldr	r3, [r3, #8]
 808a97c:	9301      	str	r3, [sp, #4]
 808a97e:	bd08      	pop	{r3, pc}
 808a980:	080401cc 	.word	0x080401cc

0808a984 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 808a984:	b508      	push	{r3, lr}
 808a986:	4b02      	ldr	r3, [pc, #8]	; (808a990 <spark_cloud_flag_connect+0xc>)
 808a988:	681b      	ldr	r3, [r3, #0]
 808a98a:	68db      	ldr	r3, [r3, #12]
 808a98c:	9301      	str	r3, [sp, #4]
 808a98e:	bd08      	pop	{r3, pc}
 808a990:	080401cc 	.word	0x080401cc

0808a994 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 808a994:	b508      	push	{r3, lr}
 808a996:	4b02      	ldr	r3, [pc, #8]	; (808a9a0 <spark_cloud_flag_connected+0xc>)
 808a998:	681b      	ldr	r3, [r3, #0]
 808a99a:	695b      	ldr	r3, [r3, #20]
 808a99c:	9301      	str	r3, [sp, #4]
 808a99e:	bd08      	pop	{r3, pc}
 808a9a0:	080401cc 	.word	0x080401cc

0808a9a4 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 808a9a4:	b508      	push	{r3, lr}
 808a9a6:	4b02      	ldr	r3, [pc, #8]	; (808a9b0 <spark_deviceID+0xc>)
 808a9a8:	681b      	ldr	r3, [r3, #0]
 808a9aa:	69db      	ldr	r3, [r3, #28]
 808a9ac:	9301      	str	r3, [sp, #4]
 808a9ae:	bd08      	pop	{r3, pc}
 808a9b0:	080401cc 	.word	0x080401cc

0808a9b4 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 808a9b4:	b508      	push	{r3, lr}
 808a9b6:	4b02      	ldr	r3, [pc, #8]	; (808a9c0 <spark_send_event+0xc>)
 808a9b8:	681b      	ldr	r3, [r3, #0]
 808a9ba:	6a1b      	ldr	r3, [r3, #32]
 808a9bc:	9301      	str	r3, [sp, #4]
 808a9be:	bd08      	pop	{r3, pc}
 808a9c0:	080401cc 	.word	0x080401cc

0808a9c4 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 808a9c4:	b508      	push	{r3, lr}
 808a9c6:	4b02      	ldr	r3, [pc, #8]	; (808a9d0 <spark_subscribe+0xc>)
 808a9c8:	681b      	ldr	r3, [r3, #0]
 808a9ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808a9cc:	9301      	str	r3, [sp, #4]
 808a9ce:	bd08      	pop	{r3, pc}
 808a9d0:	080401cc 	.word	0x080401cc

0808a9d4 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 808a9d4:	b508      	push	{r3, lr}
 808a9d6:	4b02      	ldr	r3, [pc, #8]	; (808a9e0 <spark_sync_time_pending+0xc>)
 808a9d8:	681b      	ldr	r3, [r3, #0]
 808a9da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808a9dc:	9301      	str	r3, [sp, #4]
 808a9de:	bd08      	pop	{r3, pc}
 808a9e0:	080401cc 	.word	0x080401cc

0808a9e4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 808a9e4:	b508      	push	{r3, lr}
 808a9e6:	4b02      	ldr	r3, [pc, #8]	; (808a9f0 <spark_set_random_seed_from_cloud_handler+0xc>)
 808a9e8:	681b      	ldr	r3, [r3, #0]
 808a9ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808a9ec:	9301      	str	r3, [sp, #4]
 808a9ee:	bd08      	pop	{r3, pc}
 808a9f0:	080401cc 	.word	0x080401cc

0808a9f4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 808a9f4:	b508      	push	{r3, lr}
 808a9f6:	4b02      	ldr	r3, [pc, #8]	; (808aa00 <malloc+0xc>)
 808a9f8:	681b      	ldr	r3, [r3, #0]
 808a9fa:	681b      	ldr	r3, [r3, #0]
 808a9fc:	9301      	str	r3, [sp, #4]
 808a9fe:	bd08      	pop	{r3, pc}
 808aa00:	080401a0 	.word	0x080401a0

0808aa04 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 808aa04:	b508      	push	{r3, lr}
 808aa06:	4b02      	ldr	r3, [pc, #8]	; (808aa10 <free+0xc>)
 808aa08:	681b      	ldr	r3, [r3, #0]
 808aa0a:	685b      	ldr	r3, [r3, #4]
 808aa0c:	9301      	str	r3, [sp, #4]
 808aa0e:	bd08      	pop	{r3, pc}
 808aa10:	080401a0 	.word	0x080401a0

0808aa14 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 808aa14:	b508      	push	{r3, lr}
 808aa16:	4b02      	ldr	r3, [pc, #8]	; (808aa20 <realloc+0xc>)
 808aa18:	681b      	ldr	r3, [r3, #0]
 808aa1a:	689b      	ldr	r3, [r3, #8]
 808aa1c:	9301      	str	r3, [sp, #4]
 808aa1e:	bd08      	pop	{r3, pc}
 808aa20:	080401a0 	.word	0x080401a0

0808aa24 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 808aa24:	b508      	push	{r3, lr}
 808aa26:	4b02      	ldr	r3, [pc, #8]	; (808aa30 <sprintf+0xc>)
 808aa28:	681b      	ldr	r3, [r3, #0]
 808aa2a:	68db      	ldr	r3, [r3, #12]
 808aa2c:	9301      	str	r3, [sp, #4]
 808aa2e:	bd08      	pop	{r3, pc}
 808aa30:	080401a0 	.word	0x080401a0

0808aa34 <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 808aa34:	b508      	push	{r3, lr}
 808aa36:	4b02      	ldr	r3, [pc, #8]	; (808aa40 <siprintf+0xc>)
 808aa38:	681b      	ldr	r3, [r3, #0]
 808aa3a:	691b      	ldr	r3, [r3, #16]
 808aa3c:	9301      	str	r3, [sp, #4]
 808aa3e:	bd08      	pop	{r3, pc}
 808aa40:	080401a0 	.word	0x080401a0

0808aa44 <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
 808aa44:	b508      	push	{r3, lr}
 808aa46:	4b02      	ldr	r3, [pc, #8]	; (808aa50 <sscanf+0xc>)
 808aa48:	681b      	ldr	r3, [r3, #0]
 808aa4a:	695b      	ldr	r3, [r3, #20]
 808aa4c:	9301      	str	r3, [sp, #4]
 808aa4e:	bd08      	pop	{r3, pc}
 808aa50:	080401a0 	.word	0x080401a0

0808aa54 <siscanf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 808aa54:	b508      	push	{r3, lr}
 808aa56:	4b02      	ldr	r3, [pc, #8]	; (808aa60 <siscanf+0xc>)
 808aa58:	681b      	ldr	r3, [r3, #0]
 808aa5a:	699b      	ldr	r3, [r3, #24]
 808aa5c:	9301      	str	r3, [sp, #4]
 808aa5e:	bd08      	pop	{r3, pc}
 808aa60:	080401a0 	.word	0x080401a0

0808aa64 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 808aa64:	b508      	push	{r3, lr}
 808aa66:	4b02      	ldr	r3, [pc, #8]	; (808aa70 <snprintf+0xc>)
 808aa68:	681b      	ldr	r3, [r3, #0]
 808aa6a:	69db      	ldr	r3, [r3, #28]
 808aa6c:	9301      	str	r3, [sp, #4]
 808aa6e:	bd08      	pop	{r3, pc}
 808aa70:	080401a0 	.word	0x080401a0

0808aa74 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
 808aa74:	b508      	push	{r3, lr}
 808aa76:	4b02      	ldr	r3, [pc, #8]	; (808aa80 <sniprintf+0xc>)
 808aa78:	681b      	ldr	r3, [r3, #0]
 808aa7a:	6a1b      	ldr	r3, [r3, #32]
 808aa7c:	9301      	str	r3, [sp, #4]
 808aa7e:	bd08      	pop	{r3, pc}
 808aa80:	080401a0 	.word	0x080401a0

0808aa84 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 808aa84:	b508      	push	{r3, lr}
 808aa86:	4b02      	ldr	r3, [pc, #8]	; (808aa90 <vsnprintf+0xc>)
 808aa88:	681b      	ldr	r3, [r3, #0]
 808aa8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808aa8c:	9301      	str	r3, [sp, #4]
 808aa8e:	bd08      	pop	{r3, pc}
 808aa90:	080401a0 	.word	0x080401a0

0808aa94 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 808aa94:	b508      	push	{r3, lr}
 808aa96:	4b02      	ldr	r3, [pc, #8]	; (808aaa0 <abort+0xc>)
 808aa98:	681b      	ldr	r3, [r3, #0]
 808aa9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808aa9c:	9301      	str	r3, [sp, #4]
 808aa9e:	bd08      	pop	{r3, pc}
 808aaa0:	080401a0 	.word	0x080401a0

0808aaa4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 808aaa4:	b508      	push	{r3, lr}
 808aaa6:	4b02      	ldr	r3, [pc, #8]	; (808aab0 <_malloc_r+0xc>)
 808aaa8:	681b      	ldr	r3, [r3, #0]
 808aaaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808aaac:	9301      	str	r3, [sp, #4]
 808aaae:	bd08      	pop	{r3, pc}
 808aab0:	080401a0 	.word	0x080401a0

0808aab4 <_ZN4PMIC5beginEv>:
 * Description    : Initializes the I2C for the PMIC module
 * Input          : NONE
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
 808aab4:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808aab6:	f002 fa51 	bl	808cf5c <_Z20__fetch_global_Wire3v>
 * Input          : NONE
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
 808aaba:	f002 f80f 	bl	808cadc <_ZN7TwoWire9isEnabledEv>
 808aabe:	b918      	cbnz	r0, 808aac8 <_ZN4PMIC5beginEv+0x14>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808aac0:	f002 fa4c 	bl	808cf5c <_Z20__fetch_global_Wire3v>
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
 808aac4:	f001 ffe0 	bl	808ca88 <_ZN7TwoWire5beginEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808aac8:	f002 fa48 	bl	808cf5c <_Z20__fetch_global_Wire3v>
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
    }
    return pmicWireInstance()->isEnabled();
}
 808aacc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
    }
    return pmicWireInstance()->isEnabled();
 808aad0:	f002 b804 	b.w	808cadc <_ZN7TwoWire9isEnabledEv>

0808aad4 <_ZN4PMIC4lockEv>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
 808aad4:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808aad6:	f002 fa41 	bl	808cf5c <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}
 808aada:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
 808aade:	f002 b801 	b.w	808cae4 <_ZN7TwoWire4lockEv>

0808aae2 <_ZN4PMICC1Eb>:

} // anonymous

#include <mutex>

PMIC::PMIC(bool _lock) :
 808aae2:	b510      	push	{r4, lr}
 808aae4:	4604      	mov	r4, r0
    lock_(_lock)
 808aae6:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
 808aae8:	b109      	cbz	r1, 808aaee <_ZN4PMICC1Eb+0xc>
        lock();
 808aaea:	f7ff fff3 	bl	808aad4 <_ZN4PMIC4lockEv>
    }
}
 808aaee:	4620      	mov	r0, r4
 808aaf0:	bd10      	pop	{r4, pc}

0808aaf2 <_ZN4PMIC6unlockEv>:

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
 808aaf2:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808aaf4:	f002 fa32 	bl	808cf5c <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
}
 808aaf8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
 808aafc:	f001 bffb 	b.w	808caf6 <_ZN7TwoWire6unlockEv>

0808ab00 <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 808ab00:	b510      	push	{r4, lr}
{
    if (lock_) {
 808ab02:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 808ab04:	4604      	mov	r4, r0
{
    if (lock_) {
 808ab06:	b10b      	cbz	r3, 808ab0c <_ZN4PMICD1Ev+0xc>
        unlock();
 808ab08:	f7ff fff3 	bl	808aaf2 <_ZN4PMIC6unlockEv>
    }
}
 808ab0c:	4620      	mov	r0, r4
 808ab0e:	bd10      	pop	{r4, pc}

0808ab10 <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 808ab10:	b510      	push	{r4, lr}
 808ab12:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 808ab14:	6800      	ldr	r0, [r0, #0]
 808ab16:	f7ff ffec 	bl	808aaf2 <_ZN4PMIC6unlockEv>
 808ab1a:	4620      	mov	r0, r4
 808ab1c:	bd10      	pop	{r4, pc}

0808ab1e <_ZN4PMIC12readRegisterEh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
 808ab1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808ab20:	ac02      	add	r4, sp, #8
 808ab22:	460d      	mov	r5, r1
 808ab24:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 808ab28:	f7ff ffd4 	bl	808aad4 <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808ab2c:	f002 fa16 	bl	808cf5c <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 808ab30:	216b      	movs	r1, #107	; 0x6b
 808ab32:	f001 ffc9 	bl	808cac8 <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808ab36:	f002 fa11 	bl	808cf5c <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
 808ab3a:	6803      	ldr	r3, [r0, #0]
 808ab3c:	4629      	mov	r1, r5
 808ab3e:	689b      	ldr	r3, [r3, #8]
 808ab40:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808ab42:	f002 fa0b 	bl	808cf5c <_Z20__fetch_global_Wire3v>
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);
 808ab46:	2101      	movs	r1, #1
 808ab48:	f001 ffc1 	bl	808cace <_ZN7TwoWire15endTransmissionEh>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808ab4c:	f002 fa06 	bl	808cf5c <_Z20__fetch_global_Wire3v>
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
 808ab50:	2301      	movs	r3, #1
 808ab52:	461a      	mov	r2, r3
 808ab54:	216b      	movs	r1, #107	; 0x6b
 808ab56:	f001 ffae 	bl	808cab6 <_ZN7TwoWire11requestFromEiii>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808ab5a:	f002 f9ff 	bl	808cf5c <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
 808ab5e:	6803      	ldr	r3, [r0, #0]
 808ab60:	695b      	ldr	r3, [r3, #20]
 808ab62:	4798      	blx	r3
 808ab64:	4605      	mov	r5, r0
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
 808ab66:	4620      	mov	r0, r4
 808ab68:	f7ff ffd2 	bl	808ab10 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
    return DATA;
}
 808ab6c:	b2e8      	uxtb	r0, r5
 808ab6e:	b003      	add	sp, #12
 808ab70:	bd30      	pop	{r4, r5, pc}

0808ab72 <_ZN4PMIC23readInputSourceRegisterEv>:
 * Input          : NONE
 * Return         :
 *******************************************************************************/
byte PMIC::readInputSourceRegister(void) {

    return readRegister(INPUT_SOURCE_REGISTER);
 808ab72:	2100      	movs	r1, #0
 808ab74:	f7ff bfd3 	b.w	808ab1e <_ZN4PMIC12readRegisterEh>

0808ab78 <_ZN4PMIC20getInputCurrentLimitEv>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
uint16_t PMIC::getInputCurrentLimit(void) {
 808ab78:	b508      	push	{r3, lr}
        1200,
        1500,
        2000,
        3000
    };
    byte raw = readInputSourceRegister();
 808ab7a:	f7ff fffa 	bl	808ab72 <_ZN4PMIC23readInputSourceRegisterEv>
    raw &= 0x07;
    return mapping[raw];
}
 808ab7e:	4b03      	ldr	r3, [pc, #12]	; (808ab8c <_ZN4PMIC20getInputCurrentLimitEv+0x14>)
        2000,
        3000
    };
    byte raw = readInputSourceRegister();
    raw &= 0x07;
    return mapping[raw];
 808ab80:	f000 0007 	and.w	r0, r0, #7
}
 808ab84:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 808ab88:	bd08      	pop	{r3, pc}
 808ab8a:	bf00      	nop
 808ab8c:	08094334 	.word	0x08094334

0808ab90 <_ZN4PMIC16getChargeCurrentEv>:
 * Return         :
 *******************************************************************************/
//TO DO: Return more meaningful value
byte PMIC::getChargeCurrent(void) {

    return readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 808ab90:	2102      	movs	r1, #2
 808ab92:	f7ff bfc4 	b.w	808ab1e <_ZN4PMIC12readRegisterEh>

0808ab96 <_ZN4PMIC15getSystemStatusEv>:
 * Return         :
 *******************************************************************************/
byte PMIC::getSystemStatus() {

    byte DATA = 0;
    DATA = readRegister(SYSTEM_STATUS_REGISTER);
 808ab96:	2108      	movs	r1, #8
 808ab98:	f7ff bfc1 	b.w	808ab1e <_ZN4PMIC12readRegisterEh>

0808ab9c <_ZN4PMIC8getFaultEv>:
 * Return         :
 *******************************************************************************/
byte PMIC::getFault() {

    byte DATA = 0;
    DATA = readRegister(FAULT_REGISTER);
 808ab9c:	2109      	movs	r1, #9
 808ab9e:	f7ff bfbe 	b.w	808ab1e <_ZN4PMIC12readRegisterEh>

0808aba2 <_ZN4PMIC13writeRegisterEhh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
 808aba2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808aba4:	ac02      	add	r4, sp, #8
 808aba6:	4615      	mov	r5, r2
 808aba8:	460e      	mov	r6, r1
 808abaa:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 808abae:	f7ff ff91 	bl	808aad4 <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808abb2:	f002 f9d3 	bl	808cf5c <_Z20__fetch_global_Wire3v>
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 808abb6:	216b      	movs	r1, #107	; 0x6b
 808abb8:	f001 ff86 	bl	808cac8 <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808abbc:	f002 f9ce 	bl	808cf5c <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
 808abc0:	6803      	ldr	r3, [r0, #0]
 808abc2:	4631      	mov	r1, r6
 808abc4:	689b      	ldr	r3, [r3, #8]
 808abc6:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808abc8:	f002 f9c8 	bl	808cf5c <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
 808abcc:	6803      	ldr	r3, [r0, #0]
 808abce:	4629      	mov	r1, r5
 808abd0:	689b      	ldr	r3, [r3, #8]
 808abd2:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808abd4:	f002 f9c2 	bl	808cf5c <_Z20__fetch_global_Wire3v>
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
 808abd8:	2101      	movs	r1, #1
 808abda:	f001 ff78 	bl	808cace <_ZN7TwoWire15endTransmissionEh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
 808abde:	4620      	mov	r0, r4
 808abe0:	f7ff ff96 	bl	808ab10 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}
 808abe4:	b002      	add	sp, #8
 808abe6:	bd70      	pop	{r4, r5, r6, pc}

0808abe8 <_ZN4PMIC20setInputCurrentLimitEt>:
 * Function Name  : setInputCurrentLimit
 * Description    : Sets the input current limit for the PMIC
 * Input          : 100,150,500,900,1200,1500,2000,3000 (mAmp)
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
 808abe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808abea:	4604      	mov	r4, r0
 808abec:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808abee:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808abf0:	f7ff ff70 	bl	808aad4 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
 808abf4:	2100      	movs	r1, #0
 808abf6:	4620      	mov	r0, r4
 808abf8:	f7ff ff91 	bl	808ab1e <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b11111000;

    switch (current) {
 808abfc:	f5b5 7f61 	cmp.w	r5, #900	; 0x384
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b11111000;
 808ac00:	f000 02f8 	and.w	r2, r0, #248	; 0xf8

    switch (current) {
 808ac04:	d023      	beq.n	808ac4e <_ZN4PMIC20setInputCurrentLimitEt+0x66>
 808ac06:	d807      	bhi.n	808ac18 <_ZN4PMIC20setInputCurrentLimitEt+0x30>
 808ac08:	2d96      	cmp	r5, #150	; 0x96
 808ac0a:	d01a      	beq.n	808ac42 <_ZN4PMIC20setInputCurrentLimitEt+0x5a>
 808ac0c:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 808ac10:	d01a      	beq.n	808ac48 <_ZN4PMIC20setInputCurrentLimitEt+0x60>
 808ac12:	2d64      	cmp	r5, #100	; 0x64
 808ac14:	d129      	bne.n	808ac6a <_ZN4PMIC20setInputCurrentLimitEt+0x82>
 808ac16:	e022      	b.n	808ac5e <_ZN4PMIC20setInputCurrentLimitEt+0x76>
 808ac18:	f240 53dc 	movw	r3, #1500	; 0x5dc
 808ac1c:	429d      	cmp	r5, r3
 808ac1e:	d019      	beq.n	808ac54 <_ZN4PMIC20setInputCurrentLimitEt+0x6c>
 808ac20:	d805      	bhi.n	808ac2e <_ZN4PMIC20setInputCurrentLimitEt+0x46>
 808ac22:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 808ac26:	d120      	bne.n	808ac6a <_ZN4PMIC20setInputCurrentLimitEt+0x82>
        case 900:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
        break;

        case 1200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
 808ac28:	f042 0204 	orr.w	r2, r2, #4
 808ac2c:	e017      	b.n	808ac5e <_ZN4PMIC20setInputCurrentLimitEt+0x76>
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b11111000;

    switch (current) {
 808ac2e:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 808ac32:	d012      	beq.n	808ac5a <_ZN4PMIC20setInputCurrentLimitEt+0x72>
 808ac34:	f640 33b8 	movw	r3, #3000	; 0xbb8
 808ac38:	429d      	cmp	r5, r3
 808ac3a:	d116      	bne.n	808ac6a <_ZN4PMIC20setInputCurrentLimitEt+0x82>
        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
        break;

        case 3000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
 808ac3c:	f042 0207 	orr.w	r2, r2, #7
 808ac40:	e00d      	b.n	808ac5e <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        case 100:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000000));
        break;

        case 150:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000001));
 808ac42:	f042 0201 	orr.w	r2, r2, #1
 808ac46:	e00a      	b.n	808ac5e <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 500:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000010));
 808ac48:	f042 0202 	orr.w	r2, r2, #2
 808ac4c:	e007      	b.n	808ac5e <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 900:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
 808ac4e:	f042 0203 	orr.w	r2, r2, #3
 808ac52:	e004      	b.n	808ac5e <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        case 1200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
        break;

        case 1500:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
 808ac54:	f042 0205 	orr.w	r2, r2, #5
 808ac58:	e001      	b.n	808ac5e <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
 808ac5a:	f042 0206 	orr.w	r2, r2, #6
 808ac5e:	4620      	mov	r0, r4
 808ac60:	2100      	movs	r1, #0
 808ac62:	f7ff ff9e 	bl	808aba2 <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 808ac66:	2401      	movs	r4, #1
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
        break;

        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
        break;
 808ac68:	e000      	b.n	808ac6c <_ZN4PMIC20setInputCurrentLimitEt+0x84>
        case 3000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
        break;

        default:
        return 0; // return error since the value passed didn't match
 808ac6a:	2400      	movs	r4, #0
 * Description    : Sets the input current limit for the PMIC
 * Input          : 100,150,500,900,1200,1500,2000,3000 (mAmp)
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
    std::lock_guard<PMIC> l(*this);
 808ac6c:	a801      	add	r0, sp, #4
 808ac6e:	f7ff ff4f 	bl	808ab10 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 808ac72:	4620      	mov	r0, r4
 808ac74:	b003      	add	sp, #12
 808ac76:	bd30      	pop	{r4, r5, pc}

0808ac78 <_ZN4PMIC10disableOTGEv>:
 * Function Name  : disableOTG
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableOTG(void) {
 808ac78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808ac7a:	4605      	mov	r5, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808ac7c:	ac02      	add	r4, sp, #8
 808ac7e:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 808ac82:	f7ff ff27 	bl	808aad4 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
 808ac86:	2101      	movs	r1, #1
 808ac88:	4628      	mov	r0, r5
 808ac8a:	f7ff ff48 	bl	808ab1e <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
 808ac8e:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
    DATA = DATA | 0b00010000;
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
 808ac92:	f042 0210 	orr.w	r2, r2, #16
 808ac96:	2101      	movs	r1, #1
 808ac98:	4628      	mov	r0, r5
 808ac9a:	f7ff ff82 	bl	808aba2 <_ZN4PMIC13writeRegisterEhh>
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableOTG(void) {
    std::lock_guard<PMIC> l(*this);
 808ac9e:	4620      	mov	r0, r4
 808aca0:	f7ff ff36 	bl	808ab10 <_ZNSt10lock_guardI4PMICED1Ev>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
    DATA = DATA & 0b11001111;
    DATA = DATA | 0b00010000;
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
    return 1;
}
 808aca4:	2001      	movs	r0, #1
 808aca6:	b003      	add	sp, #12
 808aca8:	bd30      	pop	{r4, r5, pc}

0808acaa <_ZN4PMIC14enableChargingEv>:
 808acaa:	f7ff bfe5 	b.w	808ac78 <_ZN4PMIC10disableOTGEv>

0808acae <_ZN4PMIC16setChargeCurrentEbbbbbb>:
                    For example,
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
 808acae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 808acb0:	460c      	mov	r4, r1
 808acb2:	4617      	mov	r7, r2
 808acb4:	4605      	mov	r5, r0
 808acb6:	461e      	mov	r6, r3
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808acb8:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808acba:	f7ff ff0b 	bl	808aad4 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte current = 0;
    if (bit7) current = current | 0b10000000;
 808acbe:	2c00      	cmp	r4, #0
 808acc0:	bf0c      	ite	eq
 808acc2:	2400      	moveq	r4, #0
 808acc4:	2480      	movne	r4, #128	; 0x80
    if (bit6) current = current | 0b01000000;
 808acc6:	b117      	cbz	r7, 808acce <_ZN4PMIC16setChargeCurrentEbbbbbb+0x20>
 808acc8:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 808accc:	b2e4      	uxtb	r4, r4
    if (bit5) current = current | 0b00100000;
 808acce:	b10e      	cbz	r6, 808acd4 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x26>
 808acd0:	f044 0420 	orr.w	r4, r4, #32
    if (bit4) current = current | 0b00010000;
 808acd4:	f89d 3020 	ldrb.w	r3, [sp, #32]
 808acd8:	b10b      	cbz	r3, 808acde <_ZN4PMIC16setChargeCurrentEbbbbbb+0x30>
 808acda:	f044 0410 	orr.w	r4, r4, #16
    if (bit3) current = current | 0b00001000;
 808acde:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 808ace2:	b10b      	cbz	r3, 808ace8 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x3a>
 808ace4:	f044 0408 	orr.w	r4, r4, #8
    if (bit2) current = current | 0b00000100;
 808ace8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 808acec:	b10b      	cbz	r3, 808acf2 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x44>
 808acee:	f044 0404 	orr.w	r4, r4, #4

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 808acf2:	2102      	movs	r1, #2
 808acf4:	4628      	mov	r0, r5
 808acf6:	f7ff ff12 	bl	808ab1e <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
 808acfa:	f000 0201 	and.w	r2, r0, #1
 808acfe:	4322      	orrs	r2, r4
 808ad00:	2102      	movs	r1, #2
 808ad02:	4628      	mov	r0, r5
 808ad04:	f7ff ff4d 	bl	808aba2 <_ZN4PMIC13writeRegisterEhh>
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
    std::lock_guard<PMIC> l(*this);
 808ad08:	a801      	add	r0, sp, #4
 808ad0a:	f7ff ff01 	bl	808ab10 <_ZNSt10lock_guardI4PMICED1Ev>

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
    return 1;
}
 808ad0e:	2001      	movs	r0, #1
 808ad10:	b003      	add	sp, #12
 808ad12:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808ad14 <_ZN4PMIC16setChargeVoltageEt>:
                    4208 is the default
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
 808ad14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808ad16:	4604      	mov	r4, r0
 808ad18:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808ad1a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808ad1c:	f7ff feda 	bl	808aad4 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
 808ad20:	2104      	movs	r1, #4
 808ad22:	4620      	mov	r0, r4
 808ad24:	f7ff fefb 	bl	808ab1e <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b000000011;

    switch (voltage) {
 808ad28:	f241 0310 	movw	r3, #4112	; 0x1010
 808ad2c:	429d      	cmp	r5, r3
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
    byte mask = DATA & 0b000000011;
 808ad2e:	f000 0203 	and.w	r2, r0, #3

    switch (voltage) {
 808ad32:	d006      	beq.n	808ad42 <_ZN4PMIC16setChargeVoltageEt+0x2e>
 808ad34:	f241 0370 	movw	r3, #4208	; 0x1070
 808ad38:	429d      	cmp	r5, r3
 808ad3a:	d10a      	bne.n	808ad52 <_ZN4PMIC16setChargeVoltageEt+0x3e>
        case 4112:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
 808ad3c:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
 808ad40:	e001      	b.n	808ad46 <_ZN4PMIC16setChargeVoltageEt+0x32>
    byte mask = DATA & 0b000000011;

    switch (voltage) {

        case 4112:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
 808ad42:	f042 0298 	orr.w	r2, r2, #152	; 0x98
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
 808ad46:	4620      	mov	r0, r4
 808ad48:	2104      	movs	r1, #4
 808ad4a:	f7ff ff2a 	bl	808aba2 <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 808ad4e:	2401      	movs	r4, #1
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
        break;
 808ad50:	e000      	b.n	808ad54 <_ZN4PMIC16setChargeVoltageEt+0x40>

        default:
        return 0; // return error since the value passed didn't match
 808ad52:	2400      	movs	r4, #0
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
 808ad54:	a801      	add	r0, sp, #4
 808ad56:	f7ff fedb 	bl	808ab10 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 808ad5a:	4620      	mov	r0, r4
 808ad5c:	b003      	add	sp, #12
 808ad5e:	bd30      	pop	{r4, r5, pc}

0808ad60 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 808ad60:	4770      	bx	lr

0808ad62 <_ZN8SPIClassD0Ev>:
 808ad62:	b510      	push	{r4, lr}
 808ad64:	4604      	mov	r4, r0
 808ad66:	2110      	movs	r1, #16
 808ad68:	f002 f91d 	bl	808cfa6 <_ZdlPvj>
 808ad6c:	4620      	mov	r0, r4
 808ad6e:	bd10      	pop	{r4, pc}

0808ad70 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 808ad70:	b570      	push	{r4, r5, r6, lr}
 808ad72:	4604      	mov	r4, r0
 808ad74:	460e      	mov	r6, r1
 808ad76:	4b07      	ldr	r3, [pc, #28]	; (808ad94 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 808ad78:	2500      	movs	r5, #0
 808ad7a:	6003      	str	r3, [r0, #0]
 808ad7c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 808ad80:	f7ff fc32 	bl	808a5e8 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 808ad84:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 808ad86:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 808ad88:	f7ff fbb6 	bl	808a4f8 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 808ad8c:	60a5      	str	r5, [r4, #8]
}
 808ad8e:	4620      	mov	r0, r4
 808ad90:	bd70      	pop	{r4, r5, r6, pc}
 808ad92:	bf00      	nop
 808ad94:	0809434c 	.word	0x0809434c

0808ad98 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 808ad98:	f64f 71ff 	movw	r1, #65535	; 0xffff
 808ad9c:	7900      	ldrb	r0, [r0, #4]
 808ad9e:	f7ff bb83 	b.w	808a4a8 <HAL_SPI_Begin>

0808ada2 <_ZN8SPIClass5beginEt>:
}

void SPIClass::begin(uint16_t ss_pin)
{
  if (ss_pin >= TOTAL_PINS)
 808ada2:	292e      	cmp	r1, #46	; 0x2e
 808ada4:	d802      	bhi.n	808adac <_ZN8SPIClass5beginEt+0xa>
  {
    return;
  }

  HAL_SPI_Begin(_spi, ss_pin);
 808ada6:	7900      	ldrb	r0, [r0, #4]
 808ada8:	f7ff bb7e 	b.w	808a4a8 <HAL_SPI_Begin>
 808adac:	4770      	bx	lr

0808adae <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 808adae:	7900      	ldrb	r0, [r0, #4]
 808adb0:	f7ff bb82 	b.w	808a4b8 <HAL_SPI_Set_Bit_Order>

0808adb4 <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
 808adb4:	7900      	ldrb	r0, [r0, #4]
 808adb6:	f7ff bb87 	b.w	808a4c8 <HAL_SPI_Set_Data_Mode>
	...

0808adbc <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 808adbc:	4a05      	ldr	r2, [pc, #20]	; (808add4 <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
 808adbe:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 808adc0:	5c99      	ldrb	r1, [r3, r2]
 808adc2:	4281      	cmp	r1, r0
 808adc4:	d002      	beq.n	808adcc <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
 808adc6:	3301      	adds	r3, #1
 808adc8:	2b08      	cmp	r3, #8
 808adca:	d1f9      	bne.n	808adc0 <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
 808adcc:	1c58      	adds	r0, r3, #1
}
 808adce:	b2c0      	uxtb	r0, r0
 808add0:	4770      	bx	lr
 808add2:	bf00      	nop
 808add4:	08094354 	.word	0x08094354

0808add8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 808add8:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 808adda:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 808addc:	6018      	str	r0, [r3, #0]
 808adde:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 808ade0:	6818      	ldr	r0, [r3, #0]
 808ade2:	b2e5      	uxtb	r5, r4
 808ade4:	4288      	cmp	r0, r1
 808ade6:	d906      	bls.n	808adf6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 808ade8:	3401      	adds	r4, #1
 808adea:	2c08      	cmp	r4, #8
 808adec:	d002      	beq.n	808adf4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 808adee:	0840      	lsrs	r0, r0, #1
 808adf0:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 808adf2:	e7f5      	b.n	808ade0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 808adf4:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 808adf6:	4b02      	ldr	r3, [pc, #8]	; (808ae00 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 808adf8:	5d5b      	ldrb	r3, [r3, r5]
 808adfa:	7013      	strb	r3, [r2, #0]
 808adfc:	bd30      	pop	{r4, r5, pc}
 808adfe:	bf00      	nop
 808ae00:	08094354 	.word	0x08094354

0808ae04 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 808ae04:	b570      	push	{r4, r5, r6, lr}
 808ae06:	4604      	mov	r4, r0
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
 808ae08:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 808ae0c:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
 808ae0e:	7906      	ldrb	r6, [r0, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 808ae10:	2214      	movs	r2, #20
 808ae12:	2100      	movs	r1, #0
 808ae14:	a803      	add	r0, sp, #12
 808ae16:	f003 fd91 	bl	808e93c <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 808ae1a:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 808ae1c:	a903      	add	r1, sp, #12
 808ae1e:	4630      	mov	r0, r6
 808ae20:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 808ae22:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
 808ae26:	f7ff fb77 	bl	808a518 <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
 808ae2a:	ab02      	add	r3, sp, #8
 808ae2c:	f10d 0207 	add.w	r2, sp, #7
 808ae30:	4629      	mov	r1, r5
 808ae32:	9804      	ldr	r0, [sp, #16]
 808ae34:	f7ff ffd0 	bl	808add8 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
 808ae38:	7920      	ldrb	r0, [r4, #4]
 808ae3a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 808ae3e:	f7ff fb4b 	bl	808a4d8 <HAL_SPI_Set_Clock_Divider>
    return clock;
}
 808ae42:	9802      	ldr	r0, [sp, #8]
 808ae44:	b008      	add	sp, #32
 808ae46:	bd70      	pop	{r4, r5, r6, pc}

0808ae48 <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 808ae48:	b538      	push	{r3, r4, r5, lr}
 808ae4a:	4604      	mov	r4, r0
    if (dividerReference)
 808ae4c:	68a5      	ldr	r5, [r4, #8]
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 808ae4e:	4608      	mov	r0, r1
    if (dividerReference)
 808ae50:	b14d      	cbz	r5, 808ae66 <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
 808ae52:	f7ff ffb3 	bl	808adbc <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 808ae56:	2201      	movs	r2, #1
 808ae58:	fa25 f100 	lsr.w	r1, r5, r0
 808ae5c:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
 808ae5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 808ae62:	f7ff bfcf 	b.w	808ae04 <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 808ae66:	7920      	ldrb	r0, [r4, #4]
    }
}
 808ae68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 808ae6c:	f7ff bb34 	b.w	808a4d8 <HAL_SPI_Set_Clock_Divider>

0808ae70 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 808ae70:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 808ae72:	7900      	ldrb	r0, [r0, #4]
 808ae74:	f7ff fb38 	bl	808a4e8 <HAL_SPI_Send_Receive_Data>
}
 808ae78:	b2c0      	uxtb	r0, r0
 808ae7a:	bd08      	pop	{r3, pc}

0808ae7c <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 808ae7c:	b530      	push	{r4, r5, lr}
 808ae7e:	b087      	sub	sp, #28
 808ae80:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808ae82:	4604      	mov	r4, r0
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
 808ae84:	7900      	ldrb	r0, [r0, #4]
 808ae86:	9500      	str	r5, [sp, #0]
 808ae88:	f7ff fb4e 	bl	808a528 <HAL_SPI_DMA_Transfer>
  if (user_callback == NULL) {
 808ae8c:	b93d      	cbnz	r5, 808ae9e <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    HAL_SPI_TransferStatus st;
    do {
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
 808ae8e:	a902      	add	r1, sp, #8
 808ae90:	7920      	ldrb	r0, [r4, #4]
 808ae92:	f7ff fb51 	bl	808a538 <HAL_SPI_DMA_Transfer_Status>
void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
  if (user_callback == NULL) {
    HAL_SPI_TransferStatus st;
    do {
 808ae96:	f89d 3014 	ldrb.w	r3, [sp, #20]
 808ae9a:	07db      	lsls	r3, r3, #31
 808ae9c:	d4f7      	bmi.n	808ae8e <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
    } while(st.transfer_ongoing);
  }
}
 808ae9e:	b007      	add	sp, #28
 808aea0:	bd30      	pop	{r4, r5, pc}

0808aea2 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 808aea2:	7900      	ldrb	r0, [r0, #4]
 808aea4:	f7ff bb30 	b.w	808a508 <HAL_SPI_Is_Enabled>

0808aea8 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
 808aea8:	4601      	mov	r1, r0
 808aeaa:	2200      	movs	r2, #0
 808aeac:	208c      	movs	r0, #140	; 0x8c
 808aeae:	f7ff bb93 	b.w	808a5d8 <HAL_Core_System_Reset_Ex>

0808aeb2 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
 808aeb2:	2000      	movs	r0, #0
 808aeb4:	f7ff bff8 	b.w	808aea8 <_ZN11SystemClass5resetEm>

0808aeb8 <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 808aeb8:	b510      	push	{r4, lr}
 808aeba:	2400      	movs	r4, #0
 808aebc:	7004      	strb	r4, [r0, #0]
 808aebe:	8044      	strh	r4, [r0, #2]
 808aec0:	f64f 74ff 	movw	r4, #65535	; 0xffff
    if (ret > 0) {
 808aec4:	2900      	cmp	r1, #0
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 808aec6:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
 808aec8:	dd07      	ble.n	808aeda <_ZN11SleepResultC1EiPKtj+0x22>
        // pin
        --ret;
        if ((size_t)ret < pinsSize) {
 808aeca:	3901      	subs	r1, #1
 808aecc:	4299      	cmp	r1, r3
 808aece:	d209      	bcs.n	808aee4 <_ZN11SleepResultC1EiPKtj+0x2c>
            pin_ = pins[ret];
 808aed0:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 808aed4:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
 808aed6:	2301      	movs	r3, #1
 808aed8:	e001      	b.n	808aede <_ZN11SleepResultC1EiPKtj+0x26>
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
 808aeda:	d102      	bne.n	808aee2 <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
 808aedc:	2302      	movs	r3, #2
 808aede:	7003      	strb	r3, [r0, #0]
 808aee0:	bd10      	pop	{r4, pc}
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
 808aee2:	8041      	strh	r1, [r0, #2]
    }
}
 808aee4:	bd10      	pop	{r4, pc}
	...

0808aee8 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 808aee8:	b570      	push	{r4, r5, r6, lr}
 808aeea:	460d      	mov	r5, r1
 808aeec:	4616      	mov	r6, r2
 808aeee:	b086      	sub	sp, #24
 808aef0:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 808aef2:	2300      	movs	r3, #0
 808aef4:	9302      	str	r3, [sp, #8]
 808aef6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 808aef8:	4604      	mov	r4, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 808aefa:	9301      	str	r3, [sp, #4]
 808aefc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 808aefe:	4631      	mov	r1, r6
 808af00:	9300      	str	r3, [sp, #0]
 808af02:	4628      	mov	r0, r5
 808af04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808af06:	f7ff fcd3 	bl	808a8b0 <system_sleep_pins>
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
 808af0a:	4633      	mov	r3, r6
 808af0c:	462a      	mov	r2, r5
 808af0e:	4601      	mov	r1, r0
 808af10:	a804      	add	r0, sp, #16
 808af12:	f7ff ffd1 	bl	808aeb8 <_ZN11SleepResultC1EiPKtj>
 808af16:	4b06      	ldr	r3, [pc, #24]	; (808af30 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
 808af18:	9804      	ldr	r0, [sp, #16]
 808af1a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 808af1e:	6018      	str	r0, [r3, #0]
    return System.sleepResult_;
}
 808af20:	4620      	mov	r0, r4
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
 808af22:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
 808af24:	681a      	ldr	r2, [r3, #0]
 808af26:	889b      	ldrh	r3, [r3, #4]
 808af28:	6022      	str	r2, [r4, #0]
 808af2a:	80a3      	strh	r3, [r4, #4]
}
 808af2c:	b006      	add	sp, #24
 808af2e:	bd70      	pop	{r4, r5, r6, pc}
 808af30:	200010ee 	.word	0x200010ee

0808af34 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 808af34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 808af38:	4b03      	ldr	r3, [pc, #12]	; (808af48 <_GLOBAL__sub_I_System+0x14>)
 808af3a:	2000      	movs	r0, #0
 808af3c:	7018      	strb	r0, [r3, #0]
 808af3e:	8058      	strh	r0, [r3, #2]
 808af40:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 808af42:	f7ff bc61 	b.w	808a808 <set_system_mode>
 808af46:	bf00      	nop
 808af48:	200010ee 	.word	0x200010ee

0808af4c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 808af4c:	b510      	push	{r4, lr}
 808af4e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 808af50:	f004 fa74 	bl	808f43c <strlen>
 808af54:	3801      	subs	r0, #1
 808af56:	1823      	adds	r3, r4, r0
 808af58:	4620      	mov	r0, r4
	while(i<j){
 808af5a:	4298      	cmp	r0, r3
 808af5c:	d206      	bcs.n	808af6c <_Z11str_reversePc+0x20>
		c = *i;
 808af5e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 808af60:	7819      	ldrb	r1, [r3, #0]
 808af62:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 808af66:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 808af6a:	e7f6      	b.n	808af5a <_Z11str_reversePc+0xe>
 808af6c:	bd10      	pop	{r4, pc}

0808af6e <ltoa>:
{
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
 808af6e:	1e93      	subs	r3, r2, #2
            base = 10;                    /* can only use 0-9, A-Z        */
 808af70:	2b23      	cmp	r3, #35	; 0x23



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
 808af72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808af76:	4615      	mov	r5, r2
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
 808af78:	bf34      	ite	cc
 808af7a:	4615      	movcc	r5, r2
 808af7c:	250a      	movcs	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
 808af7e:	b08c      	sub	sp, #48	; 0x30
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
 808af80:	2300      	movs	r3, #0

      if (10 == base && N < 0L)
 808af82:	2d0a      	cmp	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
 808af84:	460c      	mov	r4, r1
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
 808af86:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c

      if (10 == base && N < 0L)
 808af8a:	d107      	bne.n	808af9c <ltoa+0x2e>
 808af8c:	4298      	cmp	r0, r3
 808af8e:	da05      	bge.n	808af9c <ltoa+0x2e>
      {
            *head++ = '-';
 808af90:	232d      	movs	r3, #45	; 0x2d
 808af92:	f101 0801 	add.w	r8, r1, #1
 808af96:	700b      	strb	r3, [r1, #0]
            uarg    = -N;
 808af98:	4240      	negs	r0, r0
 808af9a:	e001      	b.n	808afa0 <ltoa+0x32>
      }
      else  uarg = N;

      if (uarg)
 808af9c:	b1a8      	cbz	r0, 808afca <ltoa+0x5c>
 808af9e:	46a0      	mov	r8, r4
 808afa0:	f10d 062b 	add.w	r6, sp, #43	; 0x2b
 808afa4:	2701      	movs	r7, #1
      {
            for (i = 1; uarg; ++i)
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
 808afa6:	462a      	mov	r2, r5
 808afa8:	4601      	mov	r1, r0
 808afaa:	a801      	add	r0, sp, #4
 808afac:	f003 fc94 	bl	808e8d8 <ldiv>
 808afb0:	9a02      	ldr	r2, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
 808afb2:	9801      	ldr	r0, [sp, #4]
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
 808afb4:	2a09      	cmp	r2, #9
 808afb6:	bfcc      	ite	gt
 808afb8:	2337      	movgt	r3, #55	; 0x37
 808afba:	2330      	movle	r3, #48	; 0x30
 808afbc:	4413      	add	r3, r2
 808afbe:	f806 3901 	strb.w	r3, [r6], #-1
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
 808afc2:	3701      	adds	r7, #1
 808afc4:	2800      	cmp	r0, #0
 808afc6:	d1ee      	bne.n	808afa6 <ltoa+0x38>
 808afc8:	e006      	b.n	808afd8 <ltoa+0x6a>
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';
 808afca:	46a0      	mov	r8, r4
 808afcc:	2330      	movs	r3, #48	; 0x30
 808afce:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 808afd2:	f10d 062a 	add.w	r6, sp, #42	; 0x2a


//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
      int i = 2;
 808afd6:	2702      	movs	r7, #2
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
 808afd8:	463a      	mov	r2, r7
 808afda:	1c71      	adds	r1, r6, #1
 808afdc:	4640      	mov	r0, r8
 808afde:	f003 fca2 	bl	808e926 <memcpy>
      return str;
}
 808afe2:	4620      	mov	r0, r4
 808afe4:	b00c      	add	sp, #48	; 0x30
 808afe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808afea <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 808afea:	b570      	push	{r4, r5, r6, lr}
 808afec:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 808afee:	1e91      	subs	r1, r2, #2
 808aff0:	2922      	cmp	r1, #34	; 0x22
 808aff2:	d820      	bhi.n	808b036 <ultoa+0x4c>
 808aff4:	4625      	mov	r5, r4
 808aff6:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 808aff8:	b910      	cbnz	r0, 808b000 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 808affa:	4423      	add	r3, r4
            *ptr++ = '0';
 808affc:	2230      	movs	r2, #48	; 0x30
 808affe:	e00e      	b.n	808b01e <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 808b000:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 808b004:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 808b008:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 808b00a:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 808b00c:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 808b010:	bf94      	ite	ls
 808b012:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 808b014:	3157      	addhi	r1, #87	; 0x57
 808b016:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 808b01a:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 808b01c:	e7eb      	b.n	808aff6 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 808b01e:	4299      	cmp	r1, r3
 808b020:	d202      	bcs.n	808b028 <ultoa+0x3e>
            *ptr++ = '0';
 808b022:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 808b026:	e7fa      	b.n	808b01e <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 808b028:	2300      	movs	r3, #0
	str_reverse(buffer);
 808b02a:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 808b02c:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 808b02e:	f7ff ff8d 	bl	808af4c <_Z11str_reversePc>
	return buffer;
 808b032:	4620      	mov	r0, r4
 808b034:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 808b036:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 808b038:	bd70      	pop	{r4, r5, r6, pc}

0808b03a <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 808b03a:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 808b03c:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 808b03e:	460c      	mov	r4, r1
 808b040:	4615      	mov	r5, r2
	if(a<0){
 808b042:	da0b      	bge.n	808b05c <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 808b044:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 808b048:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 808b04c:	bf14      	ite	ne
 808b04e:	4258      	negne	r0, r3
 808b050:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 808b052:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 808b054:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
 808b056:	462a      	mov	r2, r5
 808b058:	4419      	add	r1, r3
 808b05a:	e000      	b.n	808b05e <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
 808b05c:	2301      	movs	r3, #1
 808b05e:	f7ff ffc4 	bl	808afea <ultoa>
	}
	return buffer;
}
 808b062:	4620      	mov	r0, r4
 808b064:	bd38      	pop	{r3, r4, r5, pc}
	...

0808b068 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 808b068:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808b06c:	4680      	mov	r8, r0
 808b06e:	460d      	mov	r5, r1
 808b070:	4617      	mov	r7, r2
 808b072:	461e      	mov	r6, r3
    bool negative = val<0;
    if (negative) {
 808b074:	2200      	movs	r2, #0
 808b076:	2300      	movs	r3, #0
 808b078:	4640      	mov	r0, r8
 808b07a:	4629      	mov	r1, r5
 808b07c:	f002 fd0a 	bl	808da94 <__aeabi_dcmplt>
 808b080:	b120      	cbz	r0, 808b08c <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 808b082:	232d      	movs	r3, #45	; 0x2d
 808b084:	7033      	strb	r3, [r6, #0]
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
    bool negative = val<0;
    if (negative) {
        val = -val;
 808b086:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 808b08a:	3601      	adds	r6, #1
 808b08c:	2300      	movs	r3, #0
    }
    long scale = 1;
 808b08e:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 808b090:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 808b092:	b2d9      	uxtb	r1, r3
 808b094:	428f      	cmp	r7, r1
 808b096:	d902      	bls.n	808b09e <_Z4dtoadhPc+0x36>
        scale *= 10;
 808b098:	4354      	muls	r4, r2
 808b09a:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 808b09c:	e7f9      	b.n	808b092 <_Z4dtoadhPc+0x2a>
        scale *= 10;
    val *= scale;   // capture all the significant digits
 808b09e:	4620      	mov	r0, r4
 808b0a0:	f002 fa20 	bl	808d4e4 <__aeabi_i2d>
 808b0a4:	4642      	mov	r2, r8
 808b0a6:	462b      	mov	r3, r5
 808b0a8:	f002 fa82 	bl	808d5b0 <__aeabi_dmul>
 808b0ac:	4682      	mov	sl, r0
 808b0ae:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
 808b0b0:	f003 f928 	bl	808e304 <__aeabi_d2ulz>
 808b0b4:	4680      	mov	r8, r0
 808b0b6:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
 808b0b8:	f002 fa44 	bl	808d544 <__aeabi_ul2d>
 808b0bc:	4602      	mov	r2, r0
 808b0be:	460b      	mov	r3, r1
 808b0c0:	4650      	mov	r0, sl
 808b0c2:	4659      	mov	r1, fp
 808b0c4:	f002 f8c0 	bl	808d248 <__aeabi_dsub>
 808b0c8:	2200      	movs	r2, #0
 808b0ca:	4b17      	ldr	r3, [pc, #92]	; (808b128 <_Z4dtoadhPc+0xc0>)
 808b0cc:	f002 fcf6 	bl	808dabc <__aeabi_dcmpge>
 808b0d0:	b118      	cbz	r0, 808b0da <_Z4dtoadhPc+0x72>
        fixed++;
 808b0d2:	f118 0801 	adds.w	r8, r8, #1
 808b0d6:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
 808b0da:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 808b0dc:	4622      	mov	r2, r4
 808b0de:	462b      	mov	r3, r5
 808b0e0:	4640      	mov	r0, r8
 808b0e2:	4649      	mov	r1, r9
 808b0e4:	f003 f8f6 	bl	808e2d4 <__aeabi_uldivmod>
 808b0e8:	2301      	movs	r3, #1
 808b0ea:	220a      	movs	r2, #10
 808b0ec:	4631      	mov	r1, r6
 808b0ee:	f7ff ff7c 	bl	808afea <ultoa>
    if (prec) {
 808b0f2:	b1af      	cbz	r7, 808b120 <_Z4dtoadhPc+0xb8>
        sout += strlen(sout);
 808b0f4:	4630      	mov	r0, r6
 808b0f6:	f004 f9a1 	bl	808f43c <strlen>
        *sout++ = '.';
 808b0fa:	232e      	movs	r3, #46	; 0x2e
 808b0fc:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
 808b0fe:	3001      	adds	r0, #1
 808b100:	4406      	add	r6, r0
 808b102:	4622      	mov	r2, r4
 808b104:	462b      	mov	r3, r5
 808b106:	4640      	mov	r0, r8
 808b108:	4649      	mov	r1, r9
 808b10a:	f003 f8e3 	bl	808e2d4 <__aeabi_uldivmod>
 808b10e:	463b      	mov	r3, r7
 808b110:	4610      	mov	r0, r2
 808b112:	4631      	mov	r1, r6
 808b114:	220a      	movs	r2, #10
    }
}
 808b116:	b001      	add	sp, #4
 808b118:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
 808b11c:	f7ff bf65 	b.w	808afea <ultoa>
    }
}
 808b120:	b001      	add	sp, #4
 808b122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808b126:	bf00      	nop
 808b128:	3fe00000 	.word	0x3fe00000

0808b12c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 808b12c:	b510      	push	{r4, lr}
 808b12e:	4604      	mov	r4, r0
{
	free(buffer);
 808b130:	6800      	ldr	r0, [r0, #0]
 808b132:	f7ff fc67 	bl	808aa04 <free>
}
 808b136:	4620      	mov	r0, r4
 808b138:	bd10      	pop	{r4, pc}

0808b13a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 808b13a:	b510      	push	{r4, lr}
 808b13c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 808b13e:	6800      	ldr	r0, [r0, #0]
 808b140:	b108      	cbz	r0, 808b146 <_ZN6String10invalidateEv+0xc>
 808b142:	f7ff fc5f 	bl	808aa04 <free>
	buffer = NULL;
 808b146:	2300      	movs	r3, #0
 808b148:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 808b14a:	60a3      	str	r3, [r4, #8]
 808b14c:	6063      	str	r3, [r4, #4]
 808b14e:	bd10      	pop	{r4, pc}

0808b150 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 808b150:	b538      	push	{r3, r4, r5, lr}
 808b152:	4604      	mov	r4, r0
 808b154:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 808b156:	6800      	ldr	r0, [r0, #0]
 808b158:	3101      	adds	r1, #1
 808b15a:	f7ff fc5b 	bl	808aa14 <realloc>
	if (newbuffer) {
 808b15e:	b110      	cbz	r0, 808b166 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 808b160:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 808b164:	2001      	movs	r0, #1
	}
	return 0;
}
 808b166:	bd38      	pop	{r3, r4, r5, pc}

0808b168 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 808b168:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 808b16a:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 808b16c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 808b16e:	b113      	cbz	r3, 808b176 <_ZN6String7reserveEj+0xe>
 808b170:	6843      	ldr	r3, [r0, #4]
 808b172:	428b      	cmp	r3, r1
 808b174:	d207      	bcs.n	808b186 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 808b176:	4620      	mov	r0, r4
 808b178:	f7ff ffea 	bl	808b150 <_ZN6String12changeBufferEj>
 808b17c:	b120      	cbz	r0, 808b188 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 808b17e:	68a3      	ldr	r3, [r4, #8]
 808b180:	b90b      	cbnz	r3, 808b186 <_ZN6String7reserveEj+0x1e>
 808b182:	6822      	ldr	r2, [r4, #0]
 808b184:	7013      	strb	r3, [r2, #0]
 808b186:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 808b188:	bd10      	pop	{r4, pc}

0808b18a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 808b18a:	b570      	push	{r4, r5, r6, lr}
 808b18c:	460e      	mov	r6, r1
	if (!reserve(length)) {
 808b18e:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 808b190:	4604      	mov	r4, r0
 808b192:	4615      	mov	r5, r2
	if (!reserve(length)) {
 808b194:	f7ff ffe8 	bl	808b168 <_ZN6String7reserveEj>
 808b198:	b918      	cbnz	r0, 808b1a2 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 808b19a:	4620      	mov	r0, r4
 808b19c:	f7ff ffcd 	bl	808b13a <_ZN6String10invalidateEv>
		return *this;
 808b1a0:	e009      	b.n	808b1b6 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 808b1a2:	462a      	mov	r2, r5
 808b1a4:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 808b1a6:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 808b1a8:	6820      	ldr	r0, [r4, #0]
 808b1aa:	f003 fbbc 	bl	808e926 <memcpy>
	buffer[len] = 0;
 808b1ae:	6822      	ldr	r2, [r4, #0]
 808b1b0:	68a3      	ldr	r3, [r4, #8]
 808b1b2:	2100      	movs	r1, #0
 808b1b4:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 808b1b6:	4620      	mov	r0, r4
 808b1b8:	bd70      	pop	{r4, r5, r6, pc}

0808b1ba <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 808b1ba:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808b1bc:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 808b1be:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808b1c0:	6003      	str	r3, [r0, #0]
	capacity = 0;
 808b1c2:	6043      	str	r3, [r0, #4]
	len = 0;
 808b1c4:	6083      	str	r3, [r0, #8]
	flags = 0;
 808b1c6:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 808b1c8:	460d      	mov	r5, r1
 808b1ca:	b139      	cbz	r1, 808b1dc <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 808b1cc:	4608      	mov	r0, r1
 808b1ce:	f004 f935 	bl	808f43c <strlen>
 808b1d2:	4629      	mov	r1, r5
 808b1d4:	4602      	mov	r2, r0
 808b1d6:	4620      	mov	r0, r4
 808b1d8:	f7ff ffd7 	bl	808b18a <_ZN6String4copyEPKcj>
}
 808b1dc:	4620      	mov	r0, r4
 808b1de:	bd38      	pop	{r3, r4, r5, pc}

0808b1e0 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 808b1e0:	b538      	push	{r3, r4, r5, lr}
 808b1e2:	4605      	mov	r5, r0
	if (buffer) {
 808b1e4:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 808b1e6:	460c      	mov	r4, r1
	if (buffer) {
 808b1e8:	b160      	cbz	r0, 808b204 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
 808b1ea:	686a      	ldr	r2, [r5, #4]
 808b1ec:	688b      	ldr	r3, [r1, #8]
 808b1ee:	429a      	cmp	r2, r3
 808b1f0:	d306      	bcc.n	808b200 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
 808b1f2:	6809      	ldr	r1, [r1, #0]
 808b1f4:	f003 fbea 	bl	808e9cc <strcpy>
			len = rhs.len;
 808b1f8:	68a3      	ldr	r3, [r4, #8]
 808b1fa:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 808b1fc:	2300      	movs	r3, #0
 808b1fe:	e00a      	b.n	808b216 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
 808b200:	f7ff fc00 	bl	808aa04 <free>
		}
	}
	buffer = rhs.buffer;
 808b204:	6823      	ldr	r3, [r4, #0]
 808b206:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 808b208:	6863      	ldr	r3, [r4, #4]
 808b20a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 808b20c:	68a3      	ldr	r3, [r4, #8]
 808b20e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 808b210:	2300      	movs	r3, #0
 808b212:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
 808b214:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
 808b216:	60a3      	str	r3, [r4, #8]
 808b218:	bd38      	pop	{r3, r4, r5, pc}

0808b21a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 808b21a:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 808b21c:	b510      	push	{r4, lr}
 808b21e:	460b      	mov	r3, r1
 808b220:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 808b222:	d007      	beq.n	808b234 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 808b224:	6809      	ldr	r1, [r1, #0]
 808b226:	b119      	cbz	r1, 808b230 <_ZN6StringaSERKS_+0x16>
 808b228:	689a      	ldr	r2, [r3, #8]
 808b22a:	f7ff ffae 	bl	808b18a <_ZN6String4copyEPKcj>
 808b22e:	e001      	b.n	808b234 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 808b230:	f7ff ff83 	bl	808b13a <_ZN6String10invalidateEv>

	return *this;
}
 808b234:	4620      	mov	r0, r4
 808b236:	bd10      	pop	{r4, pc}

0808b238 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 808b238:	b510      	push	{r4, lr}
 808b23a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808b23c:	2300      	movs	r3, #0
 808b23e:	6003      	str	r3, [r0, #0]
	capacity = 0;
 808b240:	6043      	str	r3, [r0, #4]
	len = 0;
 808b242:	6083      	str	r3, [r0, #8]
	flags = 0;
 808b244:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 808b246:	f7ff ffe8 	bl	808b21a <_ZN6StringaSERKS_>
}
 808b24a:	4620      	mov	r0, r4
 808b24c:	bd10      	pop	{r4, pc}

0808b24e <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 808b24e:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
 808b250:	b510      	push	{r4, lr}
 808b252:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 808b254:	d001      	beq.n	808b25a <_ZN6StringaSEOS_+0xc>
 808b256:	f7ff ffc3 	bl	808b1e0 <_ZN6String4moveERS_>
	return *this;
}
 808b25a:	4620      	mov	r0, r4
 808b25c:	bd10      	pop	{r4, pc}

0808b25e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 808b25e:	b538      	push	{r3, r4, r5, lr}
 808b260:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 808b262:	460c      	mov	r4, r1
 808b264:	b141      	cbz	r1, 808b278 <_ZN6StringaSEPKc+0x1a>
 808b266:	4608      	mov	r0, r1
 808b268:	f004 f8e8 	bl	808f43c <strlen>
 808b26c:	4621      	mov	r1, r4
 808b26e:	4602      	mov	r2, r0
 808b270:	4628      	mov	r0, r5
 808b272:	f7ff ff8a 	bl	808b18a <_ZN6String4copyEPKcj>
 808b276:	e001      	b.n	808b27c <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 808b278:	f7ff ff5f 	bl	808b13a <_ZN6String10invalidateEv>

	return *this;
}
 808b27c:	4628      	mov	r0, r5
 808b27e:	bd38      	pop	{r3, r4, r5, pc}

0808b280 <_ZN6StringC1Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
 808b280:	b513      	push	{r0, r1, r4, lr}
 808b282:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808b284:	2300      	movs	r3, #0

String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
 808b286:	f88d 1004 	strb.w	r1, [sp, #4]
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808b28a:	6003      	str	r3, [r0, #0]
	capacity = 0;
 808b28c:	6043      	str	r3, [r0, #4]
	len = 0;
 808b28e:	6083      	str	r3, [r0, #8]
	flags = 0;
 808b290:	7303      	strb	r3, [r0, #12]
{
	init();
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
 808b292:	a901      	add	r1, sp, #4
String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 808b294:	f88d 3005 	strb.w	r3, [sp, #5]
	*this = buf;
 808b298:	f7ff ffe1 	bl	808b25e <_ZN6StringaSEPKc>
}
 808b29c:	4620      	mov	r0, r4
 808b29e:	b002      	add	sp, #8
 808b2a0:	bd10      	pop	{r4, pc}

0808b2a2 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 808b2a2:	b510      	push	{r4, lr}
 808b2a4:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808b2a6:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 808b2a8:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808b2aa:	6023      	str	r3, [r4, #0]
	capacity = 0;
 808b2ac:	6063      	str	r3, [r4, #4]
	len = 0;
 808b2ae:	60a3      	str	r3, [r4, #8]
	flags = 0;
 808b2b0:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 808b2b2:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
 808b2b4:	a901      	add	r1, sp, #4
 808b2b6:	f7ff fec0 	bl	808b03a <itoa>
	*this = buf;
 808b2ba:	a901      	add	r1, sp, #4
 808b2bc:	4620      	mov	r0, r4
 808b2be:	f7ff ffce 	bl	808b25e <_ZN6StringaSEPKc>
}
 808b2c2:	4620      	mov	r0, r4
 808b2c4:	b00a      	add	sp, #40	; 0x28
 808b2c6:	bd10      	pop	{r4, pc}

0808b2c8 <_ZN6StringC1Elh>:
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
 808b2c8:	b510      	push	{r4, lr}
 808b2ca:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808b2cc:	2300      	movs	r3, #0
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
 808b2ce:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808b2d0:	6023      	str	r3, [r4, #0]
	capacity = 0;
 808b2d2:	6063      	str	r3, [r4, #4]
	len = 0;
 808b2d4:	60a3      	str	r3, [r4, #8]
	flags = 0;
 808b2d6:	7323      	strb	r3, [r4, #12]
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
 808b2d8:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	ltoa(value, buf, base);
 808b2da:	a901      	add	r1, sp, #4
 808b2dc:	f7ff fe47 	bl	808af6e <ltoa>
	*this = buf;
 808b2e0:	a901      	add	r1, sp, #4
 808b2e2:	4620      	mov	r0, r4
 808b2e4:	f7ff ffbb 	bl	808b25e <_ZN6StringaSEPKc>
}
 808b2e8:	4620      	mov	r0, r4
 808b2ea:	b00a      	add	sp, #40	; 0x28
 808b2ec:	bd10      	pop	{r4, pc}

0808b2ee <_ZN6StringC1Efi>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
 808b2ee:	b530      	push	{r4, r5, lr}
 808b2f0:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808b2f2:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
 808b2f4:	b08b      	sub	sp, #44	; 0x2c
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808b2f6:	6003      	str	r3, [r0, #0]
	capacity = 0;
 808b2f8:	6043      	str	r3, [r0, #4]
	len = 0;
 808b2fa:	6083      	str	r3, [r0, #8]
	flags = 0;
 808b2fc:	7303      	strb	r3, [r0, #12]

String::String(float value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
 808b2fe:	b2d5      	uxtb	r5, r2
 808b300:	4608      	mov	r0, r1
 808b302:	f002 f901 	bl	808d508 <__aeabi_f2d>
 808b306:	ab01      	add	r3, sp, #4
 808b308:	462a      	mov	r2, r5
 808b30a:	f7ff fead 	bl	808b068 <_Z4dtoadhPc>
        *this = buf;
 808b30e:	a901      	add	r1, sp, #4
 808b310:	4620      	mov	r0, r4
 808b312:	f7ff ffa4 	bl	808b25e <_ZN6StringaSEPKc>
}
 808b316:	4620      	mov	r0, r4
 808b318:	b00b      	add	sp, #44	; 0x2c
 808b31a:	bd30      	pop	{r4, r5, pc}

0808b31c <_ZN6StringC1Edi>:

String::String(double value, int decimalPlaces)
 808b31c:	b510      	push	{r4, lr}
 808b31e:	4604      	mov	r4, r0
 808b320:	b08a      	sub	sp, #40	; 0x28
 808b322:	4619      	mov	r1, r3
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808b324:	2300      	movs	r3, #0
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
 808b326:	4610      	mov	r0, r2
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808b328:	6023      	str	r3, [r4, #0]
	capacity = 0;
 808b32a:	6063      	str	r3, [r4, #4]
	len = 0;
 808b32c:	60a3      	str	r3, [r4, #8]
	flags = 0;
 808b32e:	7323      	strb	r3, [r4, #12]

String::String(double value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
 808b330:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 808b334:	ab01      	add	r3, sp, #4
 808b336:	f7ff fe97 	bl	808b068 <_Z4dtoadhPc>
        *this = buf;
 808b33a:	a901      	add	r1, sp, #4
 808b33c:	4620      	mov	r0, r4
 808b33e:	f7ff ff8e 	bl	808b25e <_ZN6StringaSEPKc>
}
 808b342:	4620      	mov	r0, r4
 808b344:	b00a      	add	sp, #40	; 0x28
 808b346:	bd10      	pop	{r4, pc}

0808b348 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 808b348:	b570      	push	{r4, r5, r6, lr}
 808b34a:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 808b34c:	460e      	mov	r6, r1
 808b34e:	b909      	cbnz	r1, 808b354 <_ZN6String6concatEPKcj+0xc>
 808b350:	2000      	movs	r0, #0
 808b352:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 808b354:	b16a      	cbz	r2, 808b372 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 808b356:	6883      	ldr	r3, [r0, #8]
 808b358:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 808b35a:	4629      	mov	r1, r5
 808b35c:	f7ff ff04 	bl	808b168 <_ZN6String7reserveEj>
 808b360:	2800      	cmp	r0, #0
 808b362:	d0f5      	beq.n	808b350 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 808b364:	6820      	ldr	r0, [r4, #0]
 808b366:	68a3      	ldr	r3, [r4, #8]
 808b368:	4631      	mov	r1, r6
 808b36a:	4418      	add	r0, r3
 808b36c:	f003 fb2e 	bl	808e9cc <strcpy>
	len = newlen;
 808b370:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 808b372:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 808b374:	bd70      	pop	{r4, r5, r6, pc}

0808b376 <_ZN6String6concatERKS_>:
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
 808b376:	688a      	ldr	r2, [r1, #8]
 808b378:	6809      	ldr	r1, [r1, #0]
 808b37a:	f7ff bfe5 	b.w	808b348 <_ZN6String6concatEPKcj>

0808b37e <_ZN6String6concatEPKc>:
	len = newlen;
	return 1;
}

unsigned char String::concat(const char *cstr)
{
 808b37e:	b538      	push	{r3, r4, r5, lr}
 808b380:	4605      	mov	r5, r0
	if (!cstr) return 0;
 808b382:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
 808b384:	4608      	mov	r0, r1
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
 808b386:	b141      	cbz	r1, 808b39a <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
 808b388:	f004 f858 	bl	808f43c <strlen>
 808b38c:	4621      	mov	r1, r4
 808b38e:	4602      	mov	r2, r0
 808b390:	4628      	mov	r0, r5
}
 808b392:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
 808b396:	f7ff bfd7 	b.w	808b348 <_ZN6String6concatEPKcj>
}
 808b39a:	bd38      	pop	{r3, r4, r5, pc}

0808b39c <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
 808b39c:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 808b39e:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
 808b3a0:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
 808b3a4:	2201      	movs	r2, #1
 808b3a6:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 808b3a8:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 808b3ac:	f7ff ffcc 	bl	808b348 <_ZN6String6concatEPKcj>
}
 808b3b0:	b003      	add	sp, #12
 808b3b2:	f85d fb04 	ldr.w	pc, [sp], #4

0808b3b6 <_ZN6String6concatEi>:
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
{
 808b3b6:	b513      	push	{r0, r1, r4, lr}
	char buf[7];
	itoa(num, buf, 10);
 808b3b8:	220a      	movs	r2, #10
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
{
 808b3ba:	4604      	mov	r4, r0
 808b3bc:	4608      	mov	r0, r1
	char buf[7];
	itoa(num, buf, 10);
 808b3be:	4669      	mov	r1, sp
 808b3c0:	f7ff fe3b 	bl	808b03a <itoa>
	return concat(buf, strlen(buf));
 808b3c4:	4668      	mov	r0, sp
 808b3c6:	f004 f839 	bl	808f43c <strlen>
 808b3ca:	4669      	mov	r1, sp
 808b3cc:	4602      	mov	r2, r0
 808b3ce:	4620      	mov	r0, r4
 808b3d0:	f7ff ffba 	bl	808b348 <_ZN6String6concatEPKcj>
}
 808b3d4:	b002      	add	sp, #8
 808b3d6:	bd10      	pop	{r4, pc}

0808b3d8 <_ZN6String6concatEf>:
	ultoa(num, buf, DEC);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(float num)
{
 808b3d8:	b510      	push	{r4, lr}
 808b3da:	4604      	mov	r4, r0
 808b3dc:	b086      	sub	sp, #24
	char buf[20];
	dtoa(num, 6, buf);
 808b3de:	4608      	mov	r0, r1
 808b3e0:	f002 f892 	bl	808d508 <__aeabi_f2d>
 808b3e4:	ab01      	add	r3, sp, #4
 808b3e6:	2206      	movs	r2, #6
 808b3e8:	f7ff fe3e 	bl	808b068 <_Z4dtoadhPc>
	return concat(buf, strlen(buf));
 808b3ec:	a801      	add	r0, sp, #4
 808b3ee:	f004 f825 	bl	808f43c <strlen>
 808b3f2:	a901      	add	r1, sp, #4
 808b3f4:	4602      	mov	r2, r0
 808b3f6:	4620      	mov	r0, r4
 808b3f8:	f7ff ffa6 	bl	808b348 <_ZN6String6concatEPKcj>
}
 808b3fc:	b006      	add	sp, #24
 808b3fe:	bd10      	pop	{r4, pc}

0808b400 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 808b400:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 808b402:	688a      	ldr	r2, [r1, #8]
 808b404:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 808b406:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 808b408:	f7ff ff9e 	bl	808b348 <_ZN6String6concatEPKcj>
 808b40c:	b910      	cbnz	r0, 808b414 <_ZplRK15StringSumHelperRK6String+0x14>
 808b40e:	4620      	mov	r0, r4
 808b410:	f7ff fe93 	bl	808b13a <_ZN6String10invalidateEv>
	return a;
}
 808b414:	4620      	mov	r0, r4
 808b416:	bd10      	pop	{r4, pc}

0808b418 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 808b418:	b538      	push	{r3, r4, r5, lr}
 808b41a:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 808b41c:	460d      	mov	r5, r1
 808b41e:	b141      	cbz	r1, 808b432 <_ZplRK15StringSumHelperPKc+0x1a>
 808b420:	4608      	mov	r0, r1
 808b422:	f004 f80b 	bl	808f43c <strlen>
 808b426:	4629      	mov	r1, r5
 808b428:	4602      	mov	r2, r0
 808b42a:	4620      	mov	r0, r4
 808b42c:	f7ff ff8c 	bl	808b348 <_ZN6String6concatEPKcj>
 808b430:	b910      	cbnz	r0, 808b438 <_ZplRK15StringSumHelperPKc+0x20>
 808b432:	4620      	mov	r0, r4
 808b434:	f7ff fe81 	bl	808b13a <_ZN6String10invalidateEv>
	return a;
}
 808b438:	4620      	mov	r0, r4
 808b43a:	bd38      	pop	{r3, r4, r5, pc}

0808b43c <_ZplRK15StringSumHelperi>:
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, int num)
{
 808b43c:	b510      	push	{r4, lr}
 808b43e:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
 808b440:	f7ff ffb9 	bl	808b3b6 <_ZN6String6concatEi>
 808b444:	b910      	cbnz	r0, 808b44c <_ZplRK15StringSumHelperi+0x10>
 808b446:	4620      	mov	r0, r4
 808b448:	f7ff fe77 	bl	808b13a <_ZN6String10invalidateEv>
	return a;
}
 808b44c:	4620      	mov	r0, r4
 808b44e:	bd10      	pop	{r4, pc}

0808b450 <_ZplRK15StringSumHelperf>:
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, float num)
{
 808b450:	b510      	push	{r4, lr}
 808b452:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
 808b454:	f7ff ffc0 	bl	808b3d8 <_ZN6String6concatEf>
 808b458:	b910      	cbnz	r0, 808b460 <_ZplRK15StringSumHelperf+0x10>
 808b45a:	4620      	mov	r0, r4
 808b45c:	f7ff fe6d 	bl	808b13a <_ZN6String10invalidateEv>
	return a;
}
 808b460:	4620      	mov	r0, r4
 808b462:	bd10      	pop	{r4, pc}

0808b464 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 808b464:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 808b466:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 808b468:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 808b46a:	b912      	cbnz	r2, 808b472 <_ZNK6String6equalsEPKc+0xe>
 808b46c:	b919      	cbnz	r1, 808b476 <_ZNK6String6equalsEPKc+0x12>
 808b46e:	2001      	movs	r0, #1
 808b470:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 808b472:	b911      	cbnz	r1, 808b47a <_ZNK6String6equalsEPKc+0x16>
 808b474:	6803      	ldr	r3, [r0, #0]
 808b476:	7818      	ldrb	r0, [r3, #0]
 808b478:	e002      	b.n	808b480 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 808b47a:	6800      	ldr	r0, [r0, #0]
 808b47c:	f003 fa9c 	bl	808e9b8 <strcmp>
 808b480:	fab0 f080 	clz	r0, r0
 808b484:	0940      	lsrs	r0, r0, #5
}
 808b486:	bd08      	pop	{r3, pc}

0808b488 <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
 808b488:	b510      	push	{r4, lr}
 808b48a:	4614      	mov	r4, r2
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 808b48c:	6883      	ldr	r3, [r0, #8]
 808b48e:	688a      	ldr	r2, [r1, #8]
 808b490:	1a9b      	subs	r3, r3, r2
 808b492:	42a3      	cmp	r3, r4
 808b494:	d30a      	bcc.n	808b4ac <_ZNK6String10startsWithERKS_j+0x24>
 808b496:	6800      	ldr	r0, [r0, #0]
 808b498:	b158      	cbz	r0, 808b4b2 <_ZNK6String10startsWithERKS_j+0x2a>
 808b49a:	6809      	ldr	r1, [r1, #0]
 808b49c:	b141      	cbz	r1, 808b4b0 <_ZNK6String10startsWithERKS_j+0x28>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
 808b49e:	4420      	add	r0, r4
 808b4a0:	f003 ffd4 	bl	808f44c <strncmp>
 808b4a4:	fab0 f080 	clz	r0, r0
 808b4a8:	0940      	lsrs	r0, r0, #5
 808b4aa:	bd10      	pop	{r4, pc}
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 808b4ac:	2000      	movs	r0, #0
 808b4ae:	bd10      	pop	{r4, pc}
 808b4b0:	4608      	mov	r0, r1
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}
 808b4b2:	bd10      	pop	{r4, pc}

0808b4b4 <_ZNK6String10startsWithERKS_>:
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
 808b4b4:	6882      	ldr	r2, [r0, #8]
 808b4b6:	688b      	ldr	r3, [r1, #8]
 808b4b8:	429a      	cmp	r2, r3
 808b4ba:	d302      	bcc.n	808b4c2 <_ZNK6String10startsWithERKS_+0xe>
	return startsWith(s2, 0);
 808b4bc:	2200      	movs	r2, #0
 808b4be:	f7ff bfe3 	b.w	808b488 <_ZNK6String10startsWithERKS_j>
}
 808b4c2:	2000      	movs	r0, #0
 808b4c4:	4770      	bx	lr

0808b4c6 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 808b4c6:	6883      	ldr	r3, [r0, #8]
 808b4c8:	428b      	cmp	r3, r1
 808b4ca:	d903      	bls.n	808b4d4 <_ZNK6StringixEj+0xe>
 808b4cc:	6800      	ldr	r0, [r0, #0]
 808b4ce:	b110      	cbz	r0, 808b4d6 <_ZNK6StringixEj+0x10>
	return buffer[index];
 808b4d0:	5c40      	ldrb	r0, [r0, r1]
 808b4d2:	4770      	bx	lr
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 808b4d4:	2000      	movs	r0, #0
	return buffer[index];
}
 808b4d6:	4770      	bx	lr

0808b4d8 <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
 808b4d8:	f7ff bff5 	b.w	808b4c6 <_ZNK6StringixEj>

0808b4dc <_ZNK6String7indexOfEcj>:
{
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
 808b4dc:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
 808b4de:	6883      	ldr	r3, [r0, #8]
 808b4e0:	4293      	cmp	r3, r2
 808b4e2:	d906      	bls.n	808b4f2 <_ZNK6String7indexOfEcj+0x16>
	const char* temp = strchr(buffer + fromIndex, ch);
 808b4e4:	6804      	ldr	r4, [r0, #0]
 808b4e6:	18a0      	adds	r0, r4, r2
 808b4e8:	f003 fa58 	bl	808e99c <strchr>
	if (temp == NULL) return -1;
 808b4ec:	b108      	cbz	r0, 808b4f2 <_ZNK6String7indexOfEcj+0x16>
	return temp - buffer;
 808b4ee:	1b00      	subs	r0, r0, r4
 808b4f0:	bd10      	pop	{r4, pc}
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
	if (fromIndex >= len) return -1;
 808b4f2:	f04f 30ff 	mov.w	r0, #4294967295
	const char* temp = strchr(buffer + fromIndex, ch);
	if (temp == NULL) return -1;
	return temp - buffer;
}
 808b4f6:	bd10      	pop	{r4, pc}

0808b4f8 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 808b4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808b4fc:	461c      	mov	r4, r3
	if (left > right) {
 808b4fe:	429a      	cmp	r2, r3
 808b500:	bf88      	it	hi
 808b502:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 808b504:	460e      	mov	r6, r1
 808b506:	4615      	mov	r5, r2
	if (left > right) {
 808b508:	bf88      	it	hi
 808b50a:	4625      	movhi	r5, r4
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 808b50c:	490d      	ldr	r1, [pc, #52]	; (808b544 <_ZNK6String9substringEjj+0x4c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
 808b50e:	bf88      	it	hi
 808b510:	461c      	movhi	r4, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 808b512:	4607      	mov	r7, r0
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 808b514:	f7ff fe51 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
 808b518:	68b1      	ldr	r1, [r6, #8]
 808b51a:	428d      	cmp	r5, r1
 808b51c:	d80f      	bhi.n	808b53e <_ZNK6String9substringEjj+0x46>
 808b51e:	428c      	cmp	r4, r1
 808b520:	bf28      	it	cs
 808b522:	460c      	movcs	r4, r1
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
 808b524:	6833      	ldr	r3, [r6, #0]
	buffer[right] = '\0';
 808b526:	2200      	movs	r2, #0
		left = temp;
	}
	String out;
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
 808b528:	f813 8004 	ldrb.w	r8, [r3, r4]
	buffer[right] = '\0';
 808b52c:	551a      	strb	r2, [r3, r4]
	out = buffer + left;  // pointer arithmetic
 808b52e:	6831      	ldr	r1, [r6, #0]
 808b530:	4638      	mov	r0, r7
 808b532:	4429      	add	r1, r5
 808b534:	f7ff fe93 	bl	808b25e <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
 808b538:	6833      	ldr	r3, [r6, #0]
 808b53a:	f803 8004 	strb.w	r8, [r3, r4]
	return out;
}
 808b53e:	4638      	mov	r0, r7
 808b540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808b544:	08094308 	.word	0x08094308

0808b548 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 808b548:	6800      	ldr	r0, [r0, #0]
 808b54a:	b108      	cbz	r0, 808b550 <_ZNK6String5toIntEv+0x8>
 808b54c:	f003 b8b9 	b.w	808e6c2 <atol>
	return 0;
}
 808b550:	4770      	bx	lr

0808b552 <_ZNK6String7toFloatEv>:


float String::toFloat(void) const
{
 808b552:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
 808b554:	6800      	ldr	r0, [r0, #0]
 808b556:	b120      	cbz	r0, 808b562 <_ZNK6String7toFloatEv+0x10>
 808b558:	f003 f8ac 	bl	808e6b4 <atof>
 808b55c:	f002 fb20 	bl	808dba0 <__aeabi_d2f>
 808b560:	bd08      	pop	{r3, pc}
	return 0;
 808b562:	2000      	movs	r0, #0
}
 808b564:	bd08      	pop	{r3, pc}
	...

0808b568 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
 808b568:	b40e      	push	{r1, r2, r3}
 808b56a:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 808b56c:	ac09      	add	r4, sp, #36	; 0x24
 808b56e:	f854 7b04 	ldr.w	r7, [r4], #4
 808b572:	4605      	mov	r5, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 808b574:	4623      	mov	r3, r4
 808b576:	463a      	mov	r2, r7
 808b578:	2105      	movs	r1, #5
 808b57a:	a802      	add	r0, sp, #8
}

String String::format(const char* fmt, ...)
{
    va_list marker;
    va_start(marker, fmt);
 808b57c:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 808b57e:	f7ff fa81 	bl	808aa84 <vsnprintf>
 808b582:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 808b584:	490b      	ldr	r1, [pc, #44]	; (808b5b4 <_ZN6String6formatEPKcz+0x4c>)
 808b586:	4628      	mov	r0, r5
 808b588:	f7ff fe17 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
 808b58c:	4631      	mov	r1, r6
 808b58e:	4628      	mov	r0, r5
 808b590:	f7ff fdea 	bl	808b168 <_ZN6String7reserveEj>
    if (result.buffer) {
 808b594:	6828      	ldr	r0, [r5, #0]
 808b596:	b130      	cbz	r0, 808b5a6 <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 808b598:	4623      	mov	r3, r4
 808b59a:	463a      	mov	r2, r7
 808b59c:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
 808b59e:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 808b5a0:	f7ff fa70 	bl	808aa84 <vsnprintf>
        va_end(marker);
        result.len = n;
 808b5a4:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
 808b5a6:	4628      	mov	r0, r5
 808b5a8:	b004      	add	sp, #16
 808b5aa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 808b5ae:	b003      	add	sp, #12
 808b5b0:	4770      	bx	lr
 808b5b2:	bf00      	nop
 808b5b4:	08094308 	.word	0x08094308

0808b5b8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 808b5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808b5ba:	4606      	mov	r6, r0
 808b5bc:	460d      	mov	r5, r1
 808b5be:	188f      	adds	r7, r1, r2
  size_t n = 0;
 808b5c0:	2400      	movs	r4, #0
  while (size--) {
 808b5c2:	42bd      	cmp	r5, r7
 808b5c4:	d00c      	beq.n	808b5e0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 808b5c6:	6833      	ldr	r3, [r6, #0]
 808b5c8:	f815 1b01 	ldrb.w	r1, [r5], #1
 808b5cc:	689b      	ldr	r3, [r3, #8]
 808b5ce:	4630      	mov	r0, r6
 808b5d0:	4798      	blx	r3
     if (chunk>=0)
 808b5d2:	2800      	cmp	r0, #0
 808b5d4:	db01      	blt.n	808b5da <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 808b5d6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 808b5d8:	e7f3      	b.n	808b5c2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 808b5da:	2c00      	cmp	r4, #0
 808b5dc:	bf08      	it	eq
 808b5de:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 808b5e0:	4620      	mov	r0, r4
 808b5e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808b5e4 <_ZN5Print5printEPKc>:
 808b5e4:	b508      	push	{r3, lr}
 808b5e6:	f7fd fa4b 	bl	8088a80 <_ZN5Print5writeEPKc>
 808b5ea:	bd08      	pop	{r3, pc}

0808b5ec <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 808b5ec:	6803      	ldr	r3, [r0, #0]
 808b5ee:	689b      	ldr	r3, [r3, #8]
 808b5f0:	4718      	bx	r3

0808b5f2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 808b5f2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 808b5f4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 808b5f6:	4605      	mov	r5, r0
  size_t n = print('\r');
 808b5f8:	f7ff fff8 	bl	808b5ec <_ZN5Print5printEc>
  n += print('\n');
 808b5fc:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 808b5fe:	4604      	mov	r4, r0
  n += print('\n');
 808b600:	4628      	mov	r0, r5
 808b602:	f7ff fff3 	bl	808b5ec <_ZN5Print5printEc>
  return n;
}
 808b606:	4420      	add	r0, r4
 808b608:	bd38      	pop	{r3, r4, r5, pc}

0808b60a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 808b60a:	b538      	push	{r3, r4, r5, lr}
 808b60c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808b60e:	f7fd fa37 	bl	8088a80 <_ZN5Print5writeEPKc>
 808b612:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 808b614:	4628      	mov	r0, r5
 808b616:	f7ff ffec 	bl	808b5f2 <_ZN5Print7printlnEv>
  return n;
}
 808b61a:	4420      	add	r0, r4
 808b61c:	bd38      	pop	{r3, r4, r5, pc}

0808b61e <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
 808b61e:	b538      	push	{r3, r4, r5, lr}
 808b620:	4605      	mov	r5, r0
  size_t n = print(c);
 808b622:	f7ff ffe3 	bl	808b5ec <_ZN5Print5printEc>
 808b626:	4604      	mov	r4, r0
  n += println();
 808b628:	4628      	mov	r0, r5
 808b62a:	f7ff ffe2 	bl	808b5f2 <_ZN5Print7printlnEv>
  return n;
}
 808b62e:	4420      	add	r0, r4
 808b630:	bd38      	pop	{r3, r4, r5, pc}

0808b632 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 808b632:	2a01      	cmp	r2, #1
 808b634:	bf98      	it	ls
 808b636:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 808b638:	b530      	push	{r4, r5, lr}
 808b63a:	460b      	mov	r3, r1
 808b63c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 808b63e:	2100      	movs	r1, #0
 808b640:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 808b644:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 808b648:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 808b64c:	fb05 3312 	mls	r3, r5, r2, r3
 808b650:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 808b652:	2b09      	cmp	r3, #9
 808b654:	bf94      	ite	ls
 808b656:	3330      	addls	r3, #48	; 0x30
 808b658:	3337      	addhi	r3, #55	; 0x37
 808b65a:	b2db      	uxtb	r3, r3
 808b65c:	4621      	mov	r1, r4
 808b65e:	f804 3901 	strb.w	r3, [r4], #-1
 808b662:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 808b664:	2d00      	cmp	r5, #0
 808b666:	d1ef      	bne.n	808b648 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 808b668:	f7fd fa0a 	bl	8088a80 <_ZN5Print5writeEPKc>
}
 808b66c:	b00b      	add	sp, #44	; 0x2c
 808b66e:	bd30      	pop	{r4, r5, pc}

0808b670 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 808b670:	b410      	push	{r4}
  if (base == 0) return write(n);
 808b672:	b922      	cbnz	r2, 808b67e <_ZN5Print5printEmi+0xe>
 808b674:	6803      	ldr	r3, [r0, #0]
 808b676:	b2c9      	uxtb	r1, r1
 808b678:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 808b67a:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 808b67c:	4718      	bx	r3
  else return printNumber(n, base);
 808b67e:	b2d2      	uxtb	r2, r2
}
 808b680:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 808b682:	f7ff bfd6 	b.w	808b632 <_ZN5Print11printNumberEmh>

0808b686 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 808b686:	f7ff bff3 	b.w	808b670 <_ZN5Print5printEmi>

0808b68a <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
 808b68a:	b538      	push	{r3, r4, r5, lr}
 808b68c:	4605      	mov	r5, r0
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 808b68e:	f7ff ffef 	bl	808b670 <_ZN5Print5printEmi>
 808b692:	4604      	mov	r4, r0
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
 808b694:	4628      	mov	r0, r5
 808b696:	f7ff ffac 	bl	808b5f2 <_ZN5Print7printlnEv>
  return n;
}
 808b69a:	4420      	add	r0, r4
 808b69c:	bd38      	pop	{r3, r4, r5, pc}

0808b69e <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 808b69e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808b6a2:	4607      	mov	r7, r0
 808b6a4:	460e      	mov	r6, r1
  if (base == 0) {
 808b6a6:	4615      	mov	r5, r2
 808b6a8:	b92a      	cbnz	r2, 808b6b6 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 808b6aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 808b6ae:	6803      	ldr	r3, [r0, #0]
 808b6b0:	b2c9      	uxtb	r1, r1
 808b6b2:	689b      	ldr	r3, [r3, #8]
 808b6b4:	4718      	bx	r3
  } else if (base == 10) {
 808b6b6:	2a0a      	cmp	r2, #10
 808b6b8:	d102      	bne.n	808b6c0 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 808b6ba:	2900      	cmp	r1, #0
 808b6bc:	da01      	bge.n	808b6c2 <_ZN5Print5printEli+0x24>
 808b6be:	e004      	b.n	808b6ca <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 808b6c0:	b2d2      	uxtb	r2, r2
  }
}
 808b6c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 808b6c6:	f7ff bfb4 	b.w	808b632 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 808b6ca:	212d      	movs	r1, #45	; 0x2d
 808b6cc:	f7ff ff8e 	bl	808b5ec <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 808b6d0:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 808b6d2:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 808b6d4:	4271      	negs	r1, r6
 808b6d6:	4638      	mov	r0, r7
 808b6d8:	f7ff ffab 	bl	808b632 <_ZN5Print11printNumberEmh>
 808b6dc:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 808b6de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808b6e2 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 808b6e2:	f7ff bfdc 	b.w	808b69e <_ZN5Print5printEli>

0808b6e6 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 808b6e6:	b538      	push	{r3, r4, r5, lr}
 808b6e8:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 808b6ea:	f7ff ffd8 	bl	808b69e <_ZN5Print5printEli>
 808b6ee:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 808b6f0:	4628      	mov	r0, r5
 808b6f2:	f7ff ff7e 	bl	808b5f2 <_ZN5Print7printlnEv>
  return n;
}
 808b6f6:	4420      	add	r0, r4
 808b6f8:	bd38      	pop	{r3, r4, r5, pc}
	...

0808b6fc <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 808b6fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 808b700:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 808b702:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 808b704:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 808b706:	4617      	mov	r7, r2
 808b708:	461e      	mov	r6, r3
 808b70a:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 808b70e:	f002 f9e9 	bl	808dae4 <__aeabi_dcmpun>
 808b712:	b108      	cbz	r0, 808b718 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808b714:	4947      	ldr	r1, [pc, #284]	; (808b834 <_ZN5Print10printFloatEdh+0x138>)
 808b716:	e012      	b.n	808b73e <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 808b718:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 808b71c:	f04f 32ff 	mov.w	r2, #4294967295
 808b720:	4b45      	ldr	r3, [pc, #276]	; (808b838 <_ZN5Print10printFloatEdh+0x13c>)
 808b722:	4638      	mov	r0, r7
 808b724:	4621      	mov	r1, r4
 808b726:	f002 f9dd 	bl	808dae4 <__aeabi_dcmpun>
 808b72a:	b968      	cbnz	r0, 808b748 <_ZN5Print10printFloatEdh+0x4c>
 808b72c:	f04f 32ff 	mov.w	r2, #4294967295
 808b730:	4b41      	ldr	r3, [pc, #260]	; (808b838 <_ZN5Print10printFloatEdh+0x13c>)
 808b732:	4638      	mov	r0, r7
 808b734:	4621      	mov	r1, r4
 808b736:	f002 f9b7 	bl	808daa8 <__aeabi_dcmple>
 808b73a:	b928      	cbnz	r0, 808b748 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808b73c:	493f      	ldr	r1, [pc, #252]	; (808b83c <_ZN5Print10printFloatEdh+0x140>)
 808b73e:	4640      	mov	r0, r8
 808b740:	f7fd f99e 	bl	8088a80 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 808b744:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 808b748:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 808b74c:	4b3c      	ldr	r3, [pc, #240]	; (808b840 <_ZN5Print10printFloatEdh+0x144>)
 808b74e:	4638      	mov	r0, r7
 808b750:	4631      	mov	r1, r6
 808b752:	f002 f9bd 	bl	808dad0 <__aeabi_dcmpgt>
 808b756:	b108      	cbz	r0, 808b75c <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808b758:	493a      	ldr	r1, [pc, #232]	; (808b844 <_ZN5Print10printFloatEdh+0x148>)
 808b75a:	e7f0      	b.n	808b73e <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 808b75c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 808b760:	4b39      	ldr	r3, [pc, #228]	; (808b848 <_ZN5Print10printFloatEdh+0x14c>)
 808b762:	4638      	mov	r0, r7
 808b764:	4631      	mov	r1, r6
 808b766:	f002 f995 	bl	808da94 <__aeabi_dcmplt>
 808b76a:	2800      	cmp	r0, #0
 808b76c:	d1f4      	bne.n	808b758 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 808b76e:	2200      	movs	r2, #0
 808b770:	2300      	movs	r3, #0
 808b772:	4638      	mov	r0, r7
 808b774:	4631      	mov	r1, r6
 808b776:	f002 f98d 	bl	808da94 <__aeabi_dcmplt>
 808b77a:	b138      	cbz	r0, 808b78c <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 808b77c:	212d      	movs	r1, #45	; 0x2d
 808b77e:	4640      	mov	r0, r8
 808b780:	f7ff ff34 	bl	808b5ec <_ZN5Print5printEc>
     number = -number;
 808b784:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 808b788:	4604      	mov	r4, r0
 808b78a:	e000      	b.n	808b78e <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 808b78c:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 808b78e:	492f      	ldr	r1, [pc, #188]	; (808b84c <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 808b790:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 808b794:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 808b796:	fa5f f389 	uxtb.w	r3, r9
 808b79a:	429d      	cmp	r5, r3
 808b79c:	d906      	bls.n	808b7ac <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 808b79e:	2200      	movs	r2, #0
 808b7a0:	4b2b      	ldr	r3, [pc, #172]	; (808b850 <_ZN5Print10printFloatEdh+0x154>)
 808b7a2:	f002 f82f 	bl	808d804 <__aeabi_ddiv>
 808b7a6:	f109 0901 	add.w	r9, r9, #1
 808b7aa:	e7f4      	b.n	808b796 <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 808b7ac:	463a      	mov	r2, r7
 808b7ae:	4633      	mov	r3, r6
 808b7b0:	f001 fd4c 	bl	808d24c <__adddf3>
 808b7b4:	460f      	mov	r7, r1
 808b7b6:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 808b7b8:	f002 f9d2 	bl	808db60 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 808b7bc:	220a      	movs	r2, #10
 808b7be:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 808b7c0:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 808b7c2:	4640      	mov	r0, r8
 808b7c4:	f7ff ff35 	bl	808b632 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 808b7c8:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 808b7ca:	b37d      	cbz	r5, 808b82c <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 808b7cc:	4648      	mov	r0, r9
 808b7ce:	f001 fe79 	bl	808d4c4 <__aeabi_ui2d>
 808b7d2:	4602      	mov	r2, r0
 808b7d4:	460b      	mov	r3, r1
 808b7d6:	4630      	mov	r0, r6
 808b7d8:	4639      	mov	r1, r7
 808b7da:	f001 fd35 	bl	808d248 <__aeabi_dsub>
 808b7de:	4606      	mov	r6, r0
 808b7e0:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808b7e2:	4640      	mov	r0, r8
 808b7e4:	491b      	ldr	r1, [pc, #108]	; (808b854 <_ZN5Print10printFloatEdh+0x158>)
 808b7e6:	f7fd f94b 	bl	8088a80 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 808b7ea:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 808b7ec:	4b18      	ldr	r3, [pc, #96]	; (808b850 <_ZN5Print10printFloatEdh+0x154>)
 808b7ee:	2200      	movs	r2, #0
 808b7f0:	4630      	mov	r0, r6
 808b7f2:	4639      	mov	r1, r7
 808b7f4:	f001 fedc 	bl	808d5b0 <__aeabi_dmul>
 808b7f8:	460f      	mov	r7, r1
 808b7fa:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 808b7fc:	f002 f988 	bl	808db10 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 808b800:	220a      	movs	r2, #10
 808b802:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 808b804:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 808b806:	4640      	mov	r0, r8
 808b808:	f7ff ff49 	bl	808b69e <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 808b80c:	4404      	add	r4, r0
    remainder -= toPrint;
 808b80e:	4648      	mov	r0, r9
 808b810:	f001 fe68 	bl	808d4e4 <__aeabi_i2d>
 808b814:	4602      	mov	r2, r0
 808b816:	460b      	mov	r3, r1
 808b818:	4630      	mov	r0, r6
 808b81a:	4639      	mov	r1, r7
 808b81c:	f001 fd14 	bl	808d248 <__aeabi_dsub>
 808b820:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 808b822:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 808b826:	4606      	mov	r6, r0
 808b828:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 808b82a:	d1df      	bne.n	808b7ec <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 808b82c:	4620      	mov	r0, r4
 808b82e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808b832:	bf00      	nop
 808b834:	0809435c 	.word	0x0809435c
 808b838:	7fefffff 	.word	0x7fefffff
 808b83c:	08094364 	.word	0x08094364
 808b840:	41efffff 	.word	0x41efffff
 808b844:	08094360 	.word	0x08094360
 808b848:	c1efffff 	.word	0xc1efffff
 808b84c:	3fe00000 	.word	0x3fe00000
 808b850:	40240000 	.word	0x40240000
 808b854:	08093bf7 	.word	0x08093bf7

0808b858 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 808b858:	b537      	push	{r0, r1, r2, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 808b85a:	f89d 1018 	ldrb.w	r1, [sp, #24]
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 808b85e:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 808b860:	9100      	str	r1, [sp, #0]
 808b862:	f7ff ff4b 	bl	808b6fc <_ZN5Print10printFloatEdh>
 808b866:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
 808b868:	4628      	mov	r0, r5
 808b86a:	f7ff fec2 	bl	808b5f2 <_ZN5Print7printlnEv>
  return n;
}
 808b86e:	4420      	add	r0, r4
 808b870:	b003      	add	sp, #12
 808b872:	bd30      	pop	{r4, r5, pc}

0808b874 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 808b874:	b40c      	push	{r2, r3}
 808b876:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808b87a:	b087      	sub	sp, #28
 808b87c:	af00      	add	r7, sp, #0
 808b87e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 808b882:	f854 9b04 	ldr.w	r9, [r4], #4
 808b886:	4605      	mov	r5, r0
 808b888:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 808b88a:	4623      	mov	r3, r4
 808b88c:	464a      	mov	r2, r9
 808b88e:	2114      	movs	r1, #20
 808b890:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 808b892:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 808b894:	f7ff f8f6 	bl	808aa84 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 808b898:	2813      	cmp	r0, #19
 808b89a:	d805      	bhi.n	808b8a8 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808b89c:	1d39      	adds	r1, r7, #4
 808b89e:	4628      	mov	r0, r5
 808b8a0:	f7fd f8ee 	bl	8088a80 <_ZN5Print5writeEPKc>
 808b8a4:	4604      	mov	r4, r0
 808b8a6:	e013      	b.n	808b8d0 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 808b8a8:	f100 0308 	add.w	r3, r0, #8
 808b8ac:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 808b8b0:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 808b8b2:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 808b8b6:	1c41      	adds	r1, r0, #1
 808b8b8:	4623      	mov	r3, r4
 808b8ba:	464a      	mov	r2, r9
 808b8bc:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 808b8be:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 808b8c0:	f7ff f8e0 	bl	808aa84 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808b8c4:	4669      	mov	r1, sp
 808b8c6:	4628      	mov	r0, r5
 808b8c8:	f7fd f8da 	bl	8088a80 <_ZN5Print5writeEPKc>
 808b8cc:	4604      	mov	r4, r0
 808b8ce:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 808b8d0:	b11e      	cbz	r6, 808b8da <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 808b8d2:	4628      	mov	r0, r5
 808b8d4:	f7ff fe8d 	bl	808b5f2 <_ZN5Print7printlnEv>
 808b8d8:	4404      	add	r4, r0
    return n;
}
 808b8da:	4620      	mov	r0, r4
 808b8dc:	371c      	adds	r7, #28
 808b8de:	46bd      	mov	sp, r7
 808b8e0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808b8e4:	b002      	add	sp, #8
 808b8e6:	4770      	bx	lr

0808b8e8 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
 808b8e8:	b510      	push	{r4, lr}
 808b8ea:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 808b8ec:	f7fe fe3c 	bl	808a568 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
 808b8f0:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 808b8f2:	6823      	ldr	r3, [r4, #0]
 808b8f4:	4620      	mov	r0, r4
 808b8f6:	695b      	ldr	r3, [r3, #20]
 808b8f8:	4798      	blx	r3
    if (c >= 0) return c;
 808b8fa:	2800      	cmp	r0, #0
 808b8fc:	da08      	bge.n	808b910 <_ZN6Stream9timedReadEv+0x28>
 808b8fe:	f7fe fe33 	bl	808a568 <HAL_Timer_Get_Milli_Seconds>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
 808b902:	68e3      	ldr	r3, [r4, #12]
 808b904:	1ac0      	subs	r0, r0, r3
 808b906:	68a3      	ldr	r3, [r4, #8]
 808b908:	4298      	cmp	r0, r3
 808b90a:	d3f2      	bcc.n	808b8f2 <_ZN6Stream9timedReadEv+0xa>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
 808b90c:	f04f 30ff 	mov.w	r0, #4294967295
}
 808b910:	bd10      	pop	{r4, pc}

0808b912 <_ZN6Stream10setTimeoutEm>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(system_tick_t timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
 808b912:	6081      	str	r1, [r0, #8]
 808b914:	4770      	bx	lr

0808b916 <_ZN6Stream9findUntilEPcjS0_j>:

// reads data from the stream until the target string of the given length is found
// search terminated if the terminator string is found
// returns true if target string is found, false if terminated or timed out
bool Stream::findUntil(char *target, size_t targetLen, char *terminator, size_t termLen)
{
 808b916:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808b91a:	469a      	mov	sl, r3
  size_t index = 0;  // maximum target string length is 64k bytes!
  size_t termIndex = 0;
  int c;

  if( *target == 0)
 808b91c:	780b      	ldrb	r3, [r1, #0]

// reads data from the stream until the target string of the given length is found
// search terminated if the terminator string is found
// returns true if target string is found, false if terminated or timed out
bool Stream::findUntil(char *target, size_t targetLen, char *terminator, size_t termLen)
{
 808b91e:	4680      	mov	r8, r0
 808b920:	460f      	mov	r7, r1
 808b922:	4691      	mov	r9, r2
 808b924:	9e08      	ldr	r6, [sp, #32]
  size_t index = 0;  // maximum target string length is 64k bytes!
  size_t termIndex = 0;
  int c;

  if( *target == 0)
 808b926:	b19b      	cbz	r3, 808b950 <_ZN6Stream9findUntilEPcjS0_j+0x3a>
 808b928:	2400      	movs	r4, #0
 808b92a:	4625      	mov	r5, r4
 808b92c:	e001      	b.n	808b932 <_ZN6Stream9findUntilEPcjS0_j+0x1c>
      if(++index >= targetLen){ // return true if all chars in the target match
        return true;
      }
    }

    if(termLen > 0 && c == terminator[termIndex]){
 808b92e:	b996      	cbnz	r6, 808b956 <_ZN6Stream9findUntilEPcjS0_j+0x40>
      if(++termIndex >= termLen)
        return false;       // return false if terminate string found before target string
    }
    else
      termIndex = 0;
 808b930:	2400      	movs	r4, #0
  size_t termIndex = 0;
  int c;

  if( *target == 0)
    return true;   // return true if target is a null string
  while( (c = timedRead()) > 0){
 808b932:	4640      	mov	r0, r8
 808b934:	f7ff ffd8 	bl	808b8e8 <_ZN6Stream9timedReadEv>
 808b938:	2800      	cmp	r0, #0
 808b93a:	dd13      	ble.n	808b964 <_ZN6Stream9findUntilEPcjS0_j+0x4e>

    if(c != target[index])
 808b93c:	5d7b      	ldrb	r3, [r7, r5]
      index = 0; // reset index if any char does not match
 808b93e:	4298      	cmp	r0, r3
 808b940:	bf18      	it	ne
 808b942:	2500      	movne	r5, #0

    if( c == target[index]){
 808b944:	5d7b      	ldrb	r3, [r7, r5]
 808b946:	4298      	cmp	r0, r3
 808b948:	d1f1      	bne.n	808b92e <_ZN6Stream9findUntilEPcjS0_j+0x18>
      //////Serial.print("found "); Serial.write(c); Serial.print("index now"); Serial.println(index+1);
      if(++index >= targetLen){ // return true if all chars in the target match
 808b94a:	3501      	adds	r5, #1
 808b94c:	45a9      	cmp	r9, r5
 808b94e:	d8ee      	bhi.n	808b92e <_ZN6Stream9findUntilEPcjS0_j+0x18>
  size_t index = 0;  // maximum target string length is 64k bytes!
  size_t termIndex = 0;
  int c;

  if( *target == 0)
    return true;   // return true if target is a null string
 808b950:	2001      	movs	r0, #1
 808b952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(++index >= targetLen){ // return true if all chars in the target match
        return true;
      }
    }

    if(termLen > 0 && c == terminator[termIndex]){
 808b956:	f81a 3004 	ldrb.w	r3, [sl, r4]
 808b95a:	4298      	cmp	r0, r3
 808b95c:	d1e8      	bne.n	808b930 <_ZN6Stream9findUntilEPcjS0_j+0x1a>
      if(++termIndex >= termLen)
 808b95e:	3401      	adds	r4, #1
 808b960:	42a6      	cmp	r6, r4
 808b962:	d8e6      	bhi.n	808b932 <_ZN6Stream9findUntilEPcjS0_j+0x1c>
        return false;       // return false if terminate string found before target string
    }
    else
      termIndex = 0;
  }
  return false;
 808b964:	2000      	movs	r0, #0
}
 808b966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0808b96a <_ZN6Stream9findUntilEPcS0_>:
  return findUntil(target, length, NULL, 0);
}

// as find but search ends if the terminator string is found
bool  Stream::findUntil(char *target, char *terminator)
{
 808b96a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 808b96c:	4606      	mov	r6, r0
  return findUntil(target, strlen(target), terminator, strlen(terminator));
 808b96e:	4608      	mov	r0, r1
  return findUntil(target, length, NULL, 0);
}

// as find but search ends if the terminator string is found
bool  Stream::findUntil(char *target, char *terminator)
{
 808b970:	4615      	mov	r5, r2
 808b972:	460c      	mov	r4, r1
  return findUntil(target, strlen(target), terminator, strlen(terminator));
 808b974:	f003 fd62 	bl	808f43c <strlen>
 808b978:	4607      	mov	r7, r0
 808b97a:	4628      	mov	r0, r5
 808b97c:	f003 fd5e 	bl	808f43c <strlen>
 808b980:	462b      	mov	r3, r5
 808b982:	9000      	str	r0, [sp, #0]
 808b984:	463a      	mov	r2, r7
 808b986:	4621      	mov	r1, r4
 808b988:	4630      	mov	r0, r6
 808b98a:	f7ff ffc4 	bl	808b916 <_ZN6Stream9findUntilEPcjS0_j>
}
 808b98e:	b003      	add	sp, #12
 808b990:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808b992 <_ZN6Stream4findEPc>:
}

 // find returns true if the target string is found
bool  Stream::find(char *target)
{
  return findUntil(target, NULL);
 808b992:	2200      	movs	r2, #0
 808b994:	f7ff bfe9 	b.w	808b96a <_ZN6Stream9findUntilEPcS0_>

0808b998 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
 808b998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808b99c:	4680      	mov	r8, r0
 808b99e:	460d      	mov	r5, r1
 808b9a0:	460c      	mov	r4, r1
 808b9a2:	188f      	adds	r7, r1, r2
  size_t count = 0;
  while (count < length) {
 808b9a4:	42bc      	cmp	r4, r7
 808b9a6:	eba4 0605 	sub.w	r6, r4, r5
 808b9aa:	d007      	beq.n	808b9bc <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
 808b9ac:	4640      	mov	r0, r8
 808b9ae:	f7ff ff9b 	bl	808b8e8 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
 808b9b2:	2800      	cmp	r0, #0
 808b9b4:	db02      	blt.n	808b9bc <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
 808b9b6:	f804 0b01 	strb.w	r0, [r4], #1
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
  size_t count = 0;
  while (count < length) {
 808b9ba:	e7f3      	b.n	808b9a4 <_ZN6Stream9readBytesEPcj+0xc>
    if (c < 0) break;
    *buffer++ = (char)c;
    count++;
  }
  return count;
}
 808b9bc:	4630      	mov	r0, r6
 808b9be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0808b9c4 <_ZN6Stream10readStringEv>:
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
 808b9c4:	b538      	push	{r3, r4, r5, lr}
 808b9c6:	460d      	mov	r5, r1
  String ret;
 808b9c8:	4907      	ldr	r1, [pc, #28]	; (808b9e8 <_ZN6Stream10readStringEv+0x24>)
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
 808b9ca:	4604      	mov	r4, r0
  String ret;
 808b9cc:	f7ff fbf5 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
 808b9d0:	4628      	mov	r0, r5
 808b9d2:	f7ff ff89 	bl	808b8e8 <_ZN6Stream9timedReadEv>
  while (c >= 0)
 808b9d6:	2800      	cmp	r0, #0
 808b9d8:	db04      	blt.n	808b9e4 <_ZN6Stream10readStringEv+0x20>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
 808b9da:	b2c1      	uxtb	r1, r0
 808b9dc:	4620      	mov	r0, r4
 808b9de:	f7ff fcdd 	bl	808b39c <_ZN6String6concatEc>
 808b9e2:	e7f5      	b.n	808b9d0 <_ZN6Stream10readStringEv+0xc>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
 808b9e4:	4620      	mov	r0, r4
 808b9e6:	bd38      	pop	{r3, r4, r5, pc}
 808b9e8:	08094308 	.word	0x08094308

0808b9ec <_ZN6Stream15readStringUntilEc>:

String Stream::readStringUntil(char terminator)
{
 808b9ec:	b570      	push	{r4, r5, r6, lr}
 808b9ee:	460d      	mov	r5, r1
  String ret;
 808b9f0:	4909      	ldr	r1, [pc, #36]	; (808ba18 <_ZN6Stream15readStringUntilEc+0x2c>)
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
 808b9f2:	4604      	mov	r4, r0
 808b9f4:	4616      	mov	r6, r2
  String ret;
 808b9f6:	f7ff fbe0 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
 808b9fa:	4628      	mov	r0, r5
 808b9fc:	f7ff ff74 	bl	808b8e8 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
 808ba00:	2800      	cmp	r0, #0
 808ba02:	db06      	blt.n	808ba12 <_ZN6Stream15readStringUntilEc+0x26>
 808ba04:	42b0      	cmp	r0, r6
 808ba06:	d004      	beq.n	808ba12 <_ZN6Stream15readStringUntilEc+0x26>
 808ba08:	b2c1      	uxtb	r1, r0
 808ba0a:	4620      	mov	r0, r4
 808ba0c:	f7ff fcc6 	bl	808b39c <_ZN6String6concatEc>
 808ba10:	e7f3      	b.n	808b9fa <_ZN6Stream15readStringUntilEc+0xe>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
 808ba12:	4620      	mov	r0, r4
 808ba14:	bd70      	pop	{r4, r5, r6, pc}
 808ba16:	bf00      	nop
 808ba18:	08094308 	.word	0x08094308

0808ba1c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 808ba1c:	680b      	ldr	r3, [r1, #0]
 808ba1e:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 808ba20:	b113      	cbz	r3, 808ba28 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 808ba22:	685a      	ldr	r2, [r3, #4]
 808ba24:	3201      	adds	r2, #1
 808ba26:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 808ba28:	4770      	bx	lr
	...

0808ba2c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 808ba2c:	4a01      	ldr	r2, [pc, #4]	; (808ba34 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 808ba2e:	4b02      	ldr	r3, [pc, #8]	; (808ba38 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 808ba30:	601a      	str	r2, [r3, #0]
 808ba32:	4770      	bx	lr
 808ba34:	08094418 	.word	0x08094418
 808ba38:	200010f4 	.word	0x200010f4

0808ba3c <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 808ba3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 808ba3e:	4b14      	ldr	r3, [pc, #80]	; (808ba90 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 808ba40:	4f14      	ldr	r7, [pc, #80]	; (808ba94 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 808ba42:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 808ba44:	4b14      	ldr	r3, [pc, #80]	; (808ba98 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 808ba46:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 808ba48:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 808ba4a:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 808ba4c:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 808ba4e:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 808ba50:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 808ba52:	d01b      	beq.n	808ba8c <_ZL22Refresh_UnixTime_Cachel+0x50>
 808ba54:	a80a      	add	r0, sp, #40	; 0x28
 808ba56:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 808ba5a:	f002 fe45 	bl	808e6e8 <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 808ba5e:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 808ba60:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 808ba62:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 808ba64:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 808ba68:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 808ba6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 808ba6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 808ba6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 808ba70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 808ba72:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 808ba76:	4c09      	ldr	r4, [pc, #36]	; (808ba9c <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 808ba78:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 808ba7c:	ad01      	add	r5, sp, #4
 808ba7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 808ba80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 808ba82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 808ba84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 808ba86:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 808ba88:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 808ba8c:	b00b      	add	sp, #44	; 0x2c
 808ba8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808ba90:	2000112c 	.word	0x2000112c
 808ba94:	20001128 	.word	0x20001128
 808ba98:	20001124 	.word	0x20001124
 808ba9c:	200010f8 	.word	0x200010f8

0808baa0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 808baa0:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 808baa2:	2000      	movs	r0, #0
 808baa4:	f7fe ff96 	bl	808a9d4 <spark_sync_time_pending>
 808baa8:	b128      	cbz	r0, 808bab6 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808baaa:	f7fe ff73 	bl	808a994 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 808baae:	f080 0001 	eor.w	r0, r0, #1
 808bab2:	b2c0      	uxtb	r0, r0
 808bab4:	bd08      	pop	{r3, pc}
 808bab6:	2001      	movs	r0, #1
    }
 808bab8:	bd08      	pop	{r3, pc}
	...

0808babc <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 808babc:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 808babe:	f7ff ffbd 	bl	808ba3c <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 808bac2:	4b02      	ldr	r3, [pc, #8]	; (808bacc <_ZN9TimeClass5monthEl+0x10>)
 808bac4:	6918      	ldr	r0, [r3, #16]
}
 808bac6:	3001      	adds	r0, #1
 808bac8:	bd08      	pop	{r3, pc}
 808baca:	bf00      	nop
 808bacc:	200010f8 	.word	0x200010f8

0808bad0 <_ZN9TimeClass4zoneEf>:
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 808bad0:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 808bad2:	4909      	ldr	r1, [pc, #36]	; (808baf8 <_ZN9TimeClass4zoneEf+0x28>)
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 808bad4:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 808bad6:	f002 fb5f 	bl	808e198 <__aeabi_fcmplt>
 808bada:	b960      	cbnz	r0, 808baf6 <_ZN9TimeClass4zoneEf+0x26>
 808badc:	4907      	ldr	r1, [pc, #28]	; (808bafc <_ZN9TimeClass4zoneEf+0x2c>)
 808bade:	4620      	mov	r0, r4
 808bae0:	f002 fb78 	bl	808e1d4 <__aeabi_fcmpgt>
 808bae4:	b938      	cbnz	r0, 808baf6 <_ZN9TimeClass4zoneEf+0x26>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 808bae6:	4906      	ldr	r1, [pc, #24]	; (808bb00 <_ZN9TimeClass4zoneEf+0x30>)
 808bae8:	4620      	mov	r0, r4
 808baea:	f002 f9b7 	bl	808de5c <__aeabi_fmul>
 808baee:	f002 fb7b 	bl	808e1e8 <__aeabi_f2iz>
 808baf2:	4b04      	ldr	r3, [pc, #16]	; (808bb04 <_ZN9TimeClass4zoneEf+0x34>)
 808baf4:	6018      	str	r0, [r3, #0]
 808baf6:	bd10      	pop	{r4, pc}
 808baf8:	c1400000 	.word	0xc1400000
 808bafc:	41600000 	.word	0x41600000
 808bb00:	45610000 	.word	0x45610000
 808bb04:	2000112c 	.word	0x2000112c

0808bb08 <_ZN9TimeClass7setTimeEl>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
 808bb08:	b508      	push	{r3, lr}
    HAL_RTC_Set_UnixTime(t);
 808bb0a:	f7fe fd3d 	bl	808a588 <HAL_RTC_Set_UnixTime>
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}
 808bb0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
    HAL_RTC_Set_UnixTime(t);
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
 808bb12:	2200      	movs	r2, #0
 808bb14:	4611      	mov	r1, r2
 808bb16:	4610      	mov	r0, r2
 808bb18:	f7fe beae 	b.w	808a878 <system_notify_time_changed>

0808bb1c <_ZN9TimeClass7timeStrEl>:
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 808bb1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 808bb1e:	4b0e      	ldr	r3, [pc, #56]	; (808bb58 <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 808bb20:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 808bb22:	681b      	ldr	r3, [r3, #0]
 808bb24:	a802      	add	r0, sp, #8
 808bb26:	4419      	add	r1, r3
 808bb28:	4b0c      	ldr	r3, [pc, #48]	; (808bb5c <_ZN9TimeClass7timeStrEl+0x40>)
 808bb2a:	681b      	ldr	r3, [r3, #0]
 808bb2c:	4419      	add	r1, r3
 808bb2e:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 808bb32:	f002 fdd9 	bl	808e6e8 <localtime>
        char* ascstr = asctime(calendar_time);
 808bb36:	f002 fd81 	bl	808e63c <asctime>
 808bb3a:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 808bb3c:	f003 fc7e 	bl	808f43c <strlen>
        ascstr[len-1] = 0; // remove final newline
 808bb40:	2300      	movs	r3, #0
 808bb42:	4428      	add	r0, r5
 808bb44:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 808bb48:	4629      	mov	r1, r5
 808bb4a:	4620      	mov	r0, r4
 808bb4c:	f7ff fb35 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
}
 808bb50:	4620      	mov	r0, r4
 808bb52:	b003      	add	sp, #12
 808bb54:	bd30      	pop	{r4, r5, pc}
 808bb56:	bf00      	nop
 808bb58:	2000112c 	.word	0x2000112c
 808bb5c:	20001124 	.word	0x20001124

0808bb60 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 808bb60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808bb64:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    strcpy(format_str, format);
 808bb66:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 808bb68:	4607      	mov	r7, r0
 808bb6a:	4689      	mov	r9, r1
    char format_str[64];
    strcpy(format_str, format);
 808bb6c:	4620      	mov	r0, r4
 808bb6e:	4611      	mov	r1, r2
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 808bb70:	461d      	mov	r5, r3
    char format_str[64];
    strcpy(format_str, format);
 808bb72:	f002 ff2b 	bl	808e9cc <strcpy>
    size_t len = strlen(format_str);
 808bb76:	4620      	mov	r0, r4
 808bb78:	f003 fc60 	bl	808f43c <strlen>
 808bb7c:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 808bb7e:	b925      	cbnz	r5, 808bb8a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2a>
        strcpy(time_zone_str, "Z");
 808bb80:	4924      	ldr	r1, [pc, #144]	; (808bc14 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb4>)
 808bb82:	a803      	add	r0, sp, #12
 808bb84:	f002 ff22 	bl	808e9cc <strcpy>
 808bb88:	e013      	b.n	808bbb2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x52>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 808bb8a:	213c      	movs	r1, #60	; 0x3c
 808bb8c:	fb95 f2f1 	sdiv	r2, r5, r1
 808bb90:	2a00      	cmp	r2, #0
 808bb92:	bfb8      	it	lt
 808bb94:	4252      	neglt	r2, r2
 808bb96:	fb92 f3f1 	sdiv	r3, r2, r1
 808bb9a:	fb01 2213 	mls	r2, r1, r3, r2
 808bb9e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808bba2:	9200      	str	r2, [sp, #0]
 808bba4:	fb95 f3f3 	sdiv	r3, r5, r3
 808bba8:	4a1b      	ldr	r2, [pc, #108]	; (808bc18 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb8>)
 808bbaa:	2110      	movs	r1, #16
 808bbac:	a803      	add	r0, sp, #12
 808bbae:	f7fe ff59 	bl	808aa64 <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 808bbb2:	4625      	mov	r5, r4
 808bbb4:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 808bbb6:	f108 3aff 	add.w	sl, r8, #4294967295
 808bbba:	45b2      	cmp	sl, r6
 808bbbc:	d91b      	bls.n	808bbf6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x96>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 808bbbe:	782b      	ldrb	r3, [r5, #0]
 808bbc0:	2b25      	cmp	r3, #37	; 0x25
 808bbc2:	d116      	bne.n	808bbf2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
 808bbc4:	786b      	ldrb	r3, [r5, #1]
 808bbc6:	2b7a      	cmp	r3, #122	; 0x7a
 808bbc8:	d113      	bne.n	808bbf2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
        {
            size_t tzlen = strlen(time_zone_str);
 808bbca:	a803      	add	r0, sp, #12
 808bbcc:	f003 fc36 	bl	808f43c <strlen>
 808bbd0:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 808bbd2:	4430      	add	r0, r6
 808bbd4:	ebc6 020a 	rsb	r2, r6, sl
 808bbd8:	1ca9      	adds	r1, r5, #2
 808bbda:	4420      	add	r0, r4
 808bbdc:	f002 fea3 	bl	808e926 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 808bbe0:	4642      	mov	r2, r8
 808bbe2:	a903      	add	r1, sp, #12
 808bbe4:	4628      	mov	r0, r5
 808bbe6:	f002 fe9e 	bl	808e926 <memcpy>
            len = strlen(format_str);
 808bbea:	4620      	mov	r0, r4
 808bbec:	f003 fc26 	bl	808f43c <strlen>
 808bbf0:	4680      	mov	r8, r0
 808bbf2:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 808bbf4:	e7de      	b.n	808bbb4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x54>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
 808bbf6:	464b      	mov	r3, r9
 808bbf8:	4622      	mov	r2, r4
 808bbfa:	2132      	movs	r1, #50	; 0x32
 808bbfc:	a807      	add	r0, sp, #28
 808bbfe:	f002 ff69 	bl	808ead4 <strftime>
    return String(buf);
 808bc02:	a907      	add	r1, sp, #28
 808bc04:	4638      	mov	r0, r7
 808bc06:	f7ff fad8 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
}
 808bc0a:	4638      	mov	r0, r7
 808bc0c:	b024      	add	sp, #144	; 0x90
 808bc0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808bc12:	bf00      	nop
 808bc14:	080931e0 	.word	0x080931e0
 808bc18:	08094441 	.word	0x08094441

0808bc1c <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
 808bc1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 808bc1e:	4605      	mov	r5, r0
 808bc20:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
 808bc22:	461c      	mov	r4, r3
 808bc24:	b913      	cbnz	r3, 808bc2c <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
 808bc26:	4b12      	ldr	r3, [pc, #72]	; (808bc70 <_ZN9TimeClass6formatElPKc+0x54>)
 808bc28:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
 808bc2a:	b12c      	cbz	r4, 808bc38 <_ZN9TimeClass6formatElPKc+0x1c>
 808bc2c:	4b11      	ldr	r3, [pc, #68]	; (808bc74 <_ZN9TimeClass6formatElPKc+0x58>)
 808bc2e:	4620      	mov	r0, r4
 808bc30:	6819      	ldr	r1, [r3, #0]
 808bc32:	f002 fec1 	bl	808e9b8 <strcmp>
 808bc36:	b920      	cbnz	r0, 808bc42 <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
 808bc38:	9901      	ldr	r1, [sp, #4]
 808bc3a:	4628      	mov	r0, r5
 808bc3c:	f7ff ff6e 	bl	808bb1c <_ZN9TimeClass7timeStrEl>
 808bc40:	e013      	b.n	808bc6a <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
 808bc42:	4f0d      	ldr	r7, [pc, #52]	; (808bc78 <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
 808bc44:	9a01      	ldr	r2, [sp, #4]
 808bc46:	683b      	ldr	r3, [r7, #0]
 808bc48:	4e0c      	ldr	r6, [pc, #48]	; (808bc7c <_ZN9TimeClass6formatElPKc+0x60>)
 808bc4a:	441a      	add	r2, r3
 808bc4c:	6833      	ldr	r3, [r6, #0]
 808bc4e:	a802      	add	r0, sp, #8
 808bc50:	4413      	add	r3, r2
 808bc52:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
 808bc56:	f002 fd47 	bl	808e6e8 <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
 808bc5a:	683a      	ldr	r2, [r7, #0]
 808bc5c:	6833      	ldr	r3, [r6, #0]
 808bc5e:	4601      	mov	r1, r0
 808bc60:	4413      	add	r3, r2
 808bc62:	4628      	mov	r0, r5
 808bc64:	4622      	mov	r2, r4
 808bc66:	f7ff ff7b 	bl	808bb60 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
 808bc6a:	4628      	mov	r0, r5
 808bc6c:	b003      	add	sp, #12
 808bc6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808bc70:	20001120 	.word	0x20001120
 808bc74:	200004e8 	.word	0x200004e8
 808bc78:	2000112c 	.word	0x2000112c
 808bc7c:	20001124 	.word	0x20001124

0808bc80 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 808bc80:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 808bc82:	2000      	movs	r0, #0
 808bc84:	f7fe fca0 	bl	808a5c8 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 808bc88:	4604      	mov	r4, r0
 808bc8a:	b968      	cbnz	r0, 808bca8 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 808bc8c:	f7fe fdb4 	bl	808a7f8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 808bc90:	2801      	cmp	r0, #1
 808bc92:	d10b      	bne.n	808bcac <_ZN9TimeClass7isValidEv+0x2c>
 808bc94:	4620      	mov	r0, r4
 808bc96:	f7fe fde7 	bl	808a868 <system_thread_get_state>
 808bc9a:	b938      	cbnz	r0, 808bcac <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 808bc9c:	f7ff ff00 	bl	808baa0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 808bca0:	b930      	cbnz	r0, 808bcb0 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 808bca2:	f7fe fe67 	bl	808a974 <spark_process>
 808bca6:	e7f9      	b.n	808bc9c <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 808bca8:	2001      	movs	r0, #1
 808bcaa:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 808bcac:	2000      	movs	r0, #0
 808bcae:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 808bcb0:	f7ff fef6 	bl	808baa0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 808bcb4:	2000      	movs	r0, #0
 808bcb6:	f7fe fc87 	bl	808a5c8 <HAL_RTC_Time_Is_Valid>
 808bcba:	3000      	adds	r0, #0
 808bcbc:	bf18      	it	ne
 808bcbe:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 808bcc0:	bd10      	pop	{r4, pc}

0808bcc2 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 808bcc2:	b508      	push	{r3, lr}
    (void)isValid();
 808bcc4:	f7ff ffdc 	bl	808bc80 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 808bcc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 808bccc:	f7fe bc54 	b.w	808a578 <HAL_RTC_Get_UnixTime>

0808bcd0 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
 808bcd0:	b508      	push	{r3, lr}
	return hour(now());
 808bcd2:	f7ff fff6 	bl	808bcc2 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
 808bcd6:	f7ff feb1 	bl	808ba3c <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
 808bcda:	4b01      	ldr	r3, [pc, #4]	; (808bce0 <_ZN9TimeClass4hourEv+0x10>)
 808bcdc:	6898      	ldr	r0, [r3, #8]
 808bcde:	bd08      	pop	{r3, pc}
 808bce0:	200010f8 	.word	0x200010f8

0808bce4 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
 808bce4:	b508      	push	{r3, lr}
	return minute(now());
 808bce6:	f7ff ffec 	bl	808bcc2 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
 808bcea:	f7ff fea7 	bl	808ba3c <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
 808bcee:	4b01      	ldr	r3, [pc, #4]	; (808bcf4 <_ZN9TimeClass6minuteEv+0x10>)
 808bcf0:	6858      	ldr	r0, [r3, #4]
 808bcf2:	bd08      	pop	{r3, pc}
 808bcf4:	200010f8 	.word	0x200010f8

0808bcf8 <_ZN9TimeClass6secondEv>:
	return calendar_time_cache.tm_min;
}

/* current seconds */
int TimeClass::second()
{
 808bcf8:	b508      	push	{r3, lr}
	return second(now());
 808bcfa:	f7ff ffe2 	bl	808bcc2 <_ZN9TimeClass3nowEv>
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
	Refresh_UnixTime_Cache(t);
 808bcfe:	f7ff fe9d 	bl	808ba3c <_ZL22Refresh_UnixTime_Cachel>

/* current seconds */
int TimeClass::second()
{
	return second(now());
}
 808bd02:	4b01      	ldr	r3, [pc, #4]	; (808bd08 <_ZN9TimeClass6secondEv+0x10>)
 808bd04:	6818      	ldr	r0, [r3, #0]
 808bd06:	bd08      	pop	{r3, pc}
 808bd08:	200010f8 	.word	0x200010f8

0808bd0c <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
 808bd0c:	b508      	push	{r3, lr}
	return day(now());
 808bd0e:	f7ff ffd8 	bl	808bcc2 <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
 808bd12:	f7ff fe93 	bl	808ba3c <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
 808bd16:	4b01      	ldr	r3, [pc, #4]	; (808bd1c <_ZN9TimeClass3dayEv+0x10>)
 808bd18:	68d8      	ldr	r0, [r3, #12]
 808bd1a:	bd08      	pop	{r3, pc}
 808bd1c:	200010f8 	.word	0x200010f8

0808bd20 <_ZN9TimeClass5monthEv>:
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
}

/* current month */
int TimeClass::month()
{
 808bd20:	b508      	push	{r3, lr}
	return month(now());
 808bd22:	f7ff ffce 	bl	808bcc2 <_ZN9TimeClass3nowEv>
}
 808bd26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current month */
int TimeClass::month()
{
	return month(now());
 808bd2a:	f7ff bec7 	b.w	808babc <_ZN9TimeClass5monthEl>
	...

0808bd30 <_ZN9TimeClass4yearEv>:
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
}

/* current four digit year */
int TimeClass::year()
{
 808bd30:	b508      	push	{r3, lr}
	return year(now());
 808bd32:	f7ff ffc6 	bl	808bcc2 <_ZN9TimeClass3nowEv>
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
	Refresh_UnixTime_Cache(t);
 808bd36:	f7ff fe81 	bl	808ba3c <_ZL22Refresh_UnixTime_Cachel>

/* current four digit year */
int TimeClass::year()
{
	return year(now());
}
 808bd3a:	4b01      	ldr	r3, [pc, #4]	; (808bd40 <_ZN9TimeClass4yearEv+0x10>)
 808bd3c:	6958      	ldr	r0, [r3, #20]
 808bd3e:	bd08      	pop	{r3, pc}
 808bd40:	200010f8 	.word	0x200010f8

0808bd44 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 808bd44:	4b02      	ldr	r3, [pc, #8]	; (808bd50 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 808bd46:	681a      	ldr	r2, [r3, #0]
 808bd48:	4b02      	ldr	r3, [pc, #8]	; (808bd54 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 808bd4a:	601a      	str	r2, [r3, #0]
 808bd4c:	4770      	bx	lr
 808bd4e:	bf00      	nop
 808bd50:	200004e8 	.word	0x200004e8
 808bd54:	20001120 	.word	0x20001120

0808bd58 <setADCSampleTime>:
 *
 * @retval None
 */
void setADCSampleTime(uint8_t ADC_SampleTime)
{
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
 808bd58:	f7fe bb96 	b.w	808a488 <HAL_ADC_Set_Sample_Time>

0808bd5c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 808bd5c:	2100      	movs	r1, #0
 808bd5e:	f7fe bd5b 	b.w	808a818 <system_delay_ms>

0808bd62 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 808bd62:	b510      	push	{r4, lr}
 808bd64:	4604      	mov	r4, r0
 808bd66:	f7fd fca5 	bl	80896b4 <_ZNSt14_Function_baseD1Ev>
 808bd6a:	4620      	mov	r0, r4
 808bd6c:	bd10      	pop	{r4, pc}

0808bd6e <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 808bd6e:	b513      	push	{r0, r1, r4, lr}
 808bd70:	460b      	mov	r3, r1
 808bd72:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808bd74:	c803      	ldmia	r0, {r0, r1}
 808bd76:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 808bd7a:	e893 0003 	ldmia.w	r3, {r0, r1}
 808bd7e:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 808bd82:	e89d 0003 	ldmia.w	sp, {r0, r1}
 808bd86:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 808bd8a:	b002      	add	sp, #8
 808bd8c:	bd10      	pop	{r4, pc}
	...

0808bd90 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808bd90:	4803      	ldr	r0, [pc, #12]	; (808bda0 <_GLOBAL__sub_I_RGB+0x10>)
 808bd92:	2300      	movs	r3, #0
 808bd94:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 808bd96:	4a03      	ldr	r2, [pc, #12]	; (808bda4 <_GLOBAL__sub_I_RGB+0x14>)
 808bd98:	4903      	ldr	r1, [pc, #12]	; (808bda8 <_GLOBAL__sub_I_RGB+0x18>)
 808bd9a:	f001 b8ff 	b.w	808cf9c <__aeabi_atexit>
 808bd9e:	bf00      	nop
 808bda0:	20001130 	.word	0x20001130
 808bda4:	200005d8 	.word	0x200005d8
 808bda8:	0808bd63 	.word	0x0808bd63

0808bdac <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
 808bdac:	6800      	ldr	r0, [r0, #0]
 808bdae:	f000 be99 	b.w	808cae4 <_ZN7TwoWire4lockEv>

0808bdb2 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 808bdb2:	b510      	push	{r4, lr}
 808bdb4:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
 808bdb6:	6001      	str	r1, [r0, #0]
 808bdb8:	7102      	strb	r2, [r0, #4]

    if (lock_) {
 808bdba:	b10a      	cbz	r2, 808bdc0 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 808bdbc:	f7ff fff6 	bl	808bdac <_ZN9FuelGauge4lockEv>
    }
}
 808bdc0:	4620      	mov	r0, r4
 808bdc2:	bd10      	pop	{r4, pc}

0808bdc4 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
 808bdc4:	b538      	push	{r3, r4, r5, lr}
 808bdc6:	4604      	mov	r4, r0
 808bdc8:	460d      	mov	r5, r1
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808bdca:	f001 f8c7 	bl	808cf5c <_Z20__fetch_global_Wire3v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
 808bdce:	462a      	mov	r2, r5
 808bdd0:	4601      	mov	r1, r0
 808bdd2:	4620      	mov	r0, r4
 808bdd4:	f7ff ffed 	bl	808bdb2 <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
 808bdd8:	4620      	mov	r0, r4
 808bdda:	bd38      	pop	{r3, r4, r5, pc}

0808bddc <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
 808bddc:	6800      	ldr	r0, [r0, #0]
 808bdde:	f000 be8a 	b.w	808caf6 <_ZN7TwoWire6unlockEv>

0808bde2 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 808bde2:	b510      	push	{r4, lr}
{
    if (lock_) {
 808bde4:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 808bde6:	4604      	mov	r4, r0
{
    if (lock_) {
 808bde8:	b10b      	cbz	r3, 808bdee <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 808bdea:	f7ff fff7 	bl	808bddc <_ZN9FuelGauge6unlockEv>
    }
}
 808bdee:	4620      	mov	r0, r4
 808bdf0:	bd10      	pop	{r4, pc}

0808bdf2 <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 808bdf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808bdf4:	4604      	mov	r4, r0
 808bdf6:	460f      	mov	r7, r1
 808bdf8:	4616      	mov	r6, r2
 808bdfa:	461d      	mov	r5, r3
 808bdfc:	f7ff ffd6 	bl	808bdac <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
 808be00:	6820      	ldr	r0, [r4, #0]
 808be02:	2136      	movs	r1, #54	; 0x36
 808be04:	f000 fe60 	bl	808cac8 <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
 808be08:	6820      	ldr	r0, [r4, #0]
 808be0a:	4639      	mov	r1, r7
 808be0c:	6803      	ldr	r3, [r0, #0]
 808be0e:	689b      	ldr	r3, [r3, #8]
 808be10:	4798      	blx	r3
    i2c_.endTransmission(true);
 808be12:	2101      	movs	r1, #1
 808be14:	6820      	ldr	r0, [r4, #0]
 808be16:	f000 fe5a 	bl	808cace <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
 808be1a:	2202      	movs	r2, #2
 808be1c:	2136      	movs	r1, #54	; 0x36
 808be1e:	2301      	movs	r3, #1
 808be20:	6820      	ldr	r0, [r4, #0]
 808be22:	f000 fe48 	bl	808cab6 <_ZN7TwoWire11requestFromEiii>
    MSB = i2c_.read();
 808be26:	6820      	ldr	r0, [r4, #0]
 808be28:	6803      	ldr	r3, [r0, #0]
 808be2a:	695b      	ldr	r3, [r3, #20]
 808be2c:	4798      	blx	r3
 808be2e:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
 808be30:	6820      	ldr	r0, [r4, #0]
 808be32:	6803      	ldr	r3, [r0, #0]
 808be34:	695b      	ldr	r3, [r3, #20]
 808be36:	4798      	blx	r3
 808be38:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
 808be3a:	4620      	mov	r0, r4
}
 808be3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 808be40:	f7ff bfcc 	b.w	808bddc <_ZN9FuelGauge6unlockEv>

0808be44 <_ZN9FuelGauge6getSoCEv>:
	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
 808be44:	b513      	push	{r0, r1, r4, lr}

	byte MSB = 0;
 808be46:	2200      	movs	r2, #0
	byte LSB = 0;
 808be48:	ab02      	add	r3, sp, #8
 808be4a:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
 808be4e:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
 808be52:	2104      	movs	r1, #4
 808be54:	f10d 0206 	add.w	r2, sp, #6
 808be58:	f7ff ffcb 	bl	808bdf2 <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
 808be5c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 808be60:	f001 fb40 	bl	808d4e4 <__aeabi_i2d>
 808be64:	2200      	movs	r2, #0
 808be66:	4b08      	ldr	r3, [pc, #32]	; (808be88 <_ZN9FuelGauge6getSoCEv+0x44>)
 808be68:	f001 fba2 	bl	808d5b0 <__aeabi_dmul>
 808be6c:	f001 fe98 	bl	808dba0 <__aeabi_d2f>
 808be70:	4604      	mov	r4, r0
 808be72:	f89d 0006 	ldrb.w	r0, [sp, #6]
 808be76:	f001 ff9d 	bl	808ddb4 <__aeabi_i2f>
 808be7a:	4601      	mov	r1, r0
 808be7c:	4620      	mov	r0, r4
 808be7e:	f001 fee5 	bl	808dc4c <__addsf3>
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
 808be82:	b002      	add	sp, #8
 808be84:	bd10      	pop	{r4, pc}
 808be86:	bf00      	nop
 808be88:	3f700000 	.word	0x3f700000

0808be8c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 808be8c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 808be8e:	4b18      	ldr	r3, [pc, #96]	; (808bef0 <serialEventRun+0x64>)
 808be90:	b133      	cbz	r3, 808bea0 <serialEventRun+0x14>
 808be92:	f000 fc29 	bl	808c6e8 <_Z16_fetch_usbserialv>
 808be96:	6803      	ldr	r3, [r0, #0]
 808be98:	691b      	ldr	r3, [r3, #16]
 808be9a:	4798      	blx	r3
 808be9c:	2800      	cmp	r0, #0
 808be9e:	dc1e      	bgt.n	808bede <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 808bea0:	4b14      	ldr	r3, [pc, #80]	; (808bef4 <serialEventRun+0x68>)
 808bea2:	b133      	cbz	r3, 808beb2 <serialEventRun+0x26>
 808bea4:	f000 fd78 	bl	808c998 <_Z22__fetch_global_Serial1v>
 808bea8:	6803      	ldr	r3, [r0, #0]
 808beaa:	691b      	ldr	r3, [r3, #16]
 808beac:	4798      	blx	r3
 808beae:	2800      	cmp	r0, #0
 808beb0:	dc18      	bgt.n	808bee4 <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 808beb2:	4b11      	ldr	r3, [pc, #68]	; (808bef8 <serialEventRun+0x6c>)
 808beb4:	b10b      	cbz	r3, 808beba <serialEventRun+0x2e>
 808beb6:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 808beba:	4b10      	ldr	r3, [pc, #64]	; (808befc <serialEventRun+0x70>)
 808bebc:	b10b      	cbz	r3, 808bec2 <serialEventRun+0x36>
 808bebe:	f7f4 ffaf 	bl	8080e20 <_Z15serialEventRun4v>
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 808bec2:	4b0f      	ldr	r3, [pc, #60]	; (808bf00 <serialEventRun+0x74>)
 808bec4:	b10b      	cbz	r3, 808beca <serialEventRun+0x3e>
 808bec6:	f7f4 ffe5 	bl	8080e94 <_Z15serialEventRun5v>
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 808beca:	4b0e      	ldr	r3, [pc, #56]	; (808bf04 <serialEventRun+0x78>)
 808becc:	b17b      	cbz	r3, 808beee <serialEventRun+0x62>
 808bece:	f000 fc47 	bl	808c760 <_Z17_fetch_usbserial1v>
 808bed2:	6803      	ldr	r3, [r0, #0]
 808bed4:	691b      	ldr	r3, [r3, #16]
 808bed6:	4798      	blx	r3
 808bed8:	2800      	cmp	r0, #0
 808beda:	dc06      	bgt.n	808beea <serialEventRun+0x5e>
 808bedc:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 808bede:	f3af 8000 	nop.w
 808bee2:	e7dd      	b.n	808bea0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 808bee4:	f3af 8000 	nop.w
 808bee8:	e7e3      	b.n	808beb2 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 808beea:	f3af 8000 	nop.w
 808beee:	bd08      	pop	{r3, pc}
	...
 808befc:	08080e21 	.word	0x08080e21
 808bf00:	08080e95 	.word	0x08080e95
 808bf04:	00000000 	.word	0x00000000

0808bf08 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 808bf08:	b508      	push	{r3, lr}
	serialEventRun();
 808bf0a:	f7ff ffbf 	bl	808be8c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 808bf0e:	f7fe fb2b 	bl	808a568 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 808bf12:	4b01      	ldr	r3, [pc, #4]	; (808bf18 <_post_loop+0x10>)
 808bf14:	6018      	str	r0, [r3, #0]
 808bf16:	bd08      	pop	{r3, pc}
 808bf18:	20001638 	.word	0x20001638

0808bf1c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 808bf1c:	4802      	ldr	r0, [pc, #8]	; (808bf28 <_Z33system_initialize_user_backup_ramv+0xc>)
 808bf1e:	4a03      	ldr	r2, [pc, #12]	; (808bf2c <_Z33system_initialize_user_backup_ramv+0x10>)
 808bf20:	4903      	ldr	r1, [pc, #12]	; (808bf30 <_Z33system_initialize_user_backup_ramv+0x14>)
 808bf22:	1a12      	subs	r2, r2, r0
 808bf24:	f002 bcff 	b.w	808e926 <memcpy>
 808bf28:	40024000 	.word	0x40024000
 808bf2c:	40024004 	.word	0x40024004
 808bf30:	08094c88 	.word	0x08094c88

0808bf34 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 808bf34:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 808bf36:	2300      	movs	r3, #0
 808bf38:	9300      	str	r3, [sp, #0]
 808bf3a:	461a      	mov	r2, r3
 808bf3c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 808bf40:	f7fe fcac 	bl	808a89c <system_ctrl_set_result>
}
 808bf44:	b003      	add	sp, #12
 808bf46:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0808bf4c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 808bf4c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 808bf4e:	8843      	ldrh	r3, [r0, #2]
 808bf50:	2b0a      	cmp	r3, #10
 808bf52:	d008      	beq.n	808bf66 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 808bf54:	2b50      	cmp	r3, #80	; 0x50
 808bf56:	d109      	bne.n	808bf6c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 808bf58:	4b09      	ldr	r3, [pc, #36]	; (808bf80 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 808bf5a:	681b      	ldr	r3, [r3, #0]
 808bf5c:	b13b      	cbz	r3, 808bf6e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 808bf5e:	b003      	add	sp, #12
 808bf60:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 808bf64:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 808bf66:	f7ff ffe5 	bl	808bf34 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 808bf6a:	e006      	b.n	808bf7a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 808bf6c:	2300      	movs	r3, #0
 808bf6e:	9300      	str	r3, [sp, #0]
 808bf70:	461a      	mov	r2, r3
 808bf72:	f06f 0177 	mvn.w	r1, #119	; 0x77
 808bf76:	f7fe fc91 	bl	808a89c <system_ctrl_set_result>
        break;
    }
}
 808bf7a:	b003      	add	sp, #12
 808bf7c:	f85d fb04 	ldr.w	pc, [sp], #4
 808bf80:	20001140 	.word	0x20001140

0808bf84 <module_user_init_hook>:

void module_user_init_hook()
{
 808bf84:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 808bf86:	4c10      	ldr	r4, [pc, #64]	; (808bfc8 <module_user_init_hook+0x44>)
 808bf88:	4d10      	ldr	r5, [pc, #64]	; (808bfcc <module_user_init_hook+0x48>)
 808bf8a:	6823      	ldr	r3, [r4, #0]
 808bf8c:	42ab      	cmp	r3, r5
 808bf8e:	4b10      	ldr	r3, [pc, #64]	; (808bfd0 <module_user_init_hook+0x4c>)
 808bf90:	bf0c      	ite	eq
 808bf92:	2201      	moveq	r2, #1
 808bf94:	2200      	movne	r2, #0
 808bf96:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 808bf98:	d002      	beq.n	808bfa0 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 808bf9a:	f7ff ffbf 	bl	808bf1c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 808bf9e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 808bfa0:	f7fe fad2 	bl	808a548 <HAL_RNG_GetRandomNumber>
 808bfa4:	4604      	mov	r4, r0
    srand(seed);
 808bfa6:	f002 fcd1 	bl	808e94c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 808bfaa:	4b0a      	ldr	r3, [pc, #40]	; (808bfd4 <module_user_init_hook+0x50>)
 808bfac:	b113      	cbz	r3, 808bfb4 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 808bfae:	4620      	mov	r0, r4
 808bfb0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 808bfb4:	2100      	movs	r1, #0
 808bfb6:	4807      	ldr	r0, [pc, #28]	; (808bfd4 <module_user_init_hook+0x50>)
 808bfb8:	f7fe fd14 	bl	808a9e4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 808bfbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 808bfc0:	2100      	movs	r1, #0
 808bfc2:	4805      	ldr	r0, [pc, #20]	; (808bfd8 <module_user_init_hook+0x54>)
 808bfc4:	f7fe bc60 	b.w	808a888 <system_ctrl_set_app_request_handler>
 808bfc8:	40024000 	.word	0x40024000
 808bfcc:	9a271c1e 	.word	0x9a271c1e
 808bfd0:	20001144 	.word	0x20001144
 808bfd4:	00000000 	.word	0x00000000
 808bfd8:	0808bf4d 	.word	0x0808bf4d

0808bfdc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 808bfdc:	4770      	bx	lr

0808bfde <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 808bfde:	2000      	movs	r0, #0
 808bfe0:	4770      	bx	lr

0808bfe2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 808bfe2:	b510      	push	{r4, lr}
 808bfe4:	4604      	mov	r4, r0
 808bfe6:	2110      	movs	r1, #16
 808bfe8:	f000 ffdd 	bl	808cfa6 <_ZdlPvj>
 808bfec:	4620      	mov	r0, r4
 808bfee:	bd10      	pop	{r4, pc}

0808bff0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 808bff0:	b508      	push	{r3, lr}
      { delete this; }
 808bff2:	b108      	cbz	r0, 808bff8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 808bff4:	f7ff fff5 	bl	808bfe2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 808bff8:	bd08      	pop	{r3, pc}

0808bffa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 808bffa:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 808bffc:	68c4      	ldr	r4, [r0, #12]
 808bffe:	b1ec      	cbz	r4, 808c03c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x42>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 808c000:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 808c002:	2b02      	cmp	r3, #2
 808c004:	d102      	bne.n	808c00c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 808c006:	68e0      	ldr	r0, [r4, #12]
 808c008:	f7fe fcfc 	bl	808aa04 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 808c00c:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 808c00e:	b135      	cbz	r5, 808c01e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x24>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808c010:	4628      	mov	r0, r5
 808c012:	f7fd fb4f 	bl	80896b4 <_ZNSt14_Function_baseD1Ev>
 808c016:	2110      	movs	r1, #16
 808c018:	4628      	mov	r0, r5
 808c01a:	f000 ffc4 	bl	808cfa6 <_ZdlPvj>
 808c01e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 808c020:	b135      	cbz	r5, 808c030 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x36>
 808c022:	4628      	mov	r0, r5
 808c024:	f7fd fb46 	bl	80896b4 <_ZNSt14_Function_baseD1Ev>
 808c028:	2110      	movs	r1, #16
 808c02a:	4628      	mov	r0, r5
 808c02c:	f000 ffbb 	bl	808cfa6 <_ZdlPvj>
 808c030:	4620      	mov	r0, r4
 808c032:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808c036:	2114      	movs	r1, #20
 808c038:	f000 bfb5 	b.w	808cfa6 <_ZdlPvj>
 808c03c:	bd38      	pop	{r3, r4, r5, pc}

0808c03e <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 808c03e:	b510      	push	{r4, lr}
 808c040:	b088      	sub	sp, #32
 808c042:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 808c044:	4668      	mov	r0, sp
 808c046:	f7ff f8b8 	bl	808b1ba <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 808c04a:	4669      	mov	r1, sp
 808c04c:	a804      	add	r0, sp, #16
 808c04e:	f7ff f8f3 	bl	808b238 <_ZN6StringC1ERKS_>
 808c052:	a804      	add	r0, sp, #16
 808c054:	47a0      	blx	r4
 808c056:	4604      	mov	r4, r0
 808c058:	a804      	add	r0, sp, #16
 808c05a:	f7ff f867 	bl	808b12c <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 808c05e:	4668      	mov	r0, sp
 808c060:	f7ff f864 	bl	808b12c <_ZN6StringD1Ev>
    return (*fn)(p);
}
 808c064:	4620      	mov	r0, r4
 808c066:	b008      	add	sp, #32
 808c068:	bd10      	pop	{r4, pc}

0808c06a <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_>:
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
}

void CloudClass::call_wiring_event_handler(const void* handler_data, const char *event_name, const char *data)
{
 808c06a:	b507      	push	{r0, r1, r2, lr}
 808c06c:	e88d 0006 	stmia.w	sp, {r1, r2}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808c070:	6882      	ldr	r2, [r0, #8]
 808c072:	b90a      	cbnz	r2, 808c078 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_+0xe>
	__throw_bad_function_call();
 808c074:	f000 ff99 	bl	808cfaa <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808c078:	68c3      	ldr	r3, [r0, #12]
 808c07a:	aa01      	add	r2, sp, #4
 808c07c:	4669      	mov	r1, sp
 808c07e:	4798      	blx	r3
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}
 808c080:	b003      	add	sp, #12
 808c082:	f85d fb04 	ldr.w	pc, [sp], #4

0808c086 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 808c086:	b5f0      	push	{r4, r5, r6, r7, lr}
 808c088:	4607      	mov	r7, r0
 808c08a:	460e      	mov	r6, r1
 808c08c:	4615      	mov	r5, r2
 808c08e:	b085      	sub	sp, #20
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
 808c090:	2410      	movs	r4, #16
 808c092:	4622      	mov	r2, r4
 808c094:	2100      	movs	r1, #0
 808c096:	4668      	mov	r0, sp
 808c098:	f002 fc50 	bl	808e93c <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 808c09c:	2200      	movs	r2, #0
 808c09e:	4669      	mov	r1, sp
 808c0a0:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
 808c0a2:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
 808c0a6:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 808c0a8:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 808c0aa:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 808c0ac:	f7fe fc5a 	bl	808a964 <spark_function>
}
 808c0b0:	b005      	add	sp, #20
 808c0b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808c0b4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 808c0b4:	b513      	push	{r0, r1, r4, lr}
 808c0b6:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 808c0b8:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 808c0bc:	2300      	movs	r3, #0
 808c0be:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 808c0c0:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 808c0c2:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 808c0c4:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808c0c6:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 808c0c8:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 808c0ca:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808c0cc:	f7f8 fa32 	bl	8084534 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808c0d0:	4620      	mov	r0, r4
 808c0d2:	b002      	add	sp, #8
 808c0d4:	bd10      	pop	{r4, pc}

0808c0d6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 808c0d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 808c0d8:	460c      	mov	r4, r1
 808c0da:	4606      	mov	r6, r0
 808c0dc:	460f      	mov	r7, r1
 808c0de:	f854 3b04 	ldr.w	r3, [r4], #4
 808c0e2:	ad02      	add	r5, sp, #8
 808c0e4:	f845 3d08 	str.w	r3, [r5, #-8]!
 808c0e8:	4621      	mov	r1, r4
 808c0ea:	a801      	add	r0, sp, #4
 808c0ec:	f7ff fc96 	bl	808ba1c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 808c0f0:	4629      	mov	r1, r5
 808c0f2:	4630      	mov	r0, r6
 808c0f4:	f7ff ffde 	bl	808c0b4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808c0f8:	a801      	add	r0, sp, #4
 808c0fa:	f7f8 fa1b 	bl	8084534 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808c0fe:	4620      	mov	r0, r4
 808c100:	f7f8 fa18 	bl	8084534 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 808c104:	4638      	mov	r0, r7
 808c106:	2108      	movs	r1, #8
 808c108:	f000 ff4d 	bl	808cfa6 <_ZdlPvj>
        return p;
    }
 808c10c:	4630      	mov	r0, r6
 808c10e:	b003      	add	sp, #12
 808c110:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808c112 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808c112:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 808c114:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808c116:	b90a      	cbnz	r2, 808c11c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 808c118:	f000 ff47 	bl	808cfaa <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808c11c:	68c3      	ldr	r3, [r0, #12]
    }
 808c11e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808c122:	4718      	bx	r3

0808c124 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 808c124:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 808c126:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 808c128:	f100 0110 	add.w	r1, r0, #16
 808c12c:	f7ff fff1 	bl	808c112 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 808c130:	bd08      	pop	{r3, pc}

0808c132 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808c132:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 808c134:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808c136:	b90a      	cbnz	r2, 808c13c <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 808c138:	f000 ff37 	bl	808cfaa <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808c13c:	68c3      	ldr	r3, [r0, #12]
    }
 808c13e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808c142:	4718      	bx	r3

0808c144 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 808c144:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 808c146:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 808c148:	f100 0110 	add.w	r1, r0, #16
 808c14c:	f7ff fff1 	bl	808c132 <_ZNKSt8functionIFvRKbEEclES1_>
 808c150:	bd08      	pop	{r3, pc}

0808c152 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 808c152:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808c154:	2300      	movs	r3, #0
 808c156:	6083      	str	r3, [r0, #8]
 808c158:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 808c15a:	4604      	mov	r4, r0
 808c15c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 808c15e:	b12b      	cbz	r3, 808c16c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808c160:	2202      	movs	r2, #2
 808c162:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 808c164:	68eb      	ldr	r3, [r5, #12]
 808c166:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 808c168:	68ab      	ldr	r3, [r5, #8]
 808c16a:	60a3      	str	r3, [r4, #8]
	}
    }
 808c16c:	4620      	mov	r0, r4
 808c16e:	bd38      	pop	{r3, r4, r5, pc}

0808c170 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 808c170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
 808c174:	f64f 739c 	movw	r3, #65436	; 0xff9c
 808c178:	6804      	ldr	r4, [r0, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 808c17a:	f04f 0002 	mov.w	r0, #2
 808c17e:	b086      	sub	sp, #24
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808c180:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 808c184:	808b      	strh	r3, [r1, #4]
 808c186:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808c188:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 808c18a:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
 808c18e:	600b      	str	r3, [r1, #0]
 808c190:	e8d4 1f4f 	ldrexb	r1, [r4]
 808c194:	4299      	cmp	r1, r3
 808c196:	d103      	bne.n	808c1a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
 808c198:	e8c4 0f45 	strexb	r5, r0, [r4]
 808c19c:	2d00      	cmp	r5, #0
 808c19e:	d1f7      	bne.n	808c190 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 808c1a0:	d002      	beq.n	808c1a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
 808c1a2:	f88d 1000 	strb.w	r1, [sp]
 808c1a6:	e06c      	b.n	808c282 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x112>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 808c1a8:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808c1ac:	bf1c      	itt	ne
 808c1ae:	60e7      	strne	r7, [r4, #12]
 808c1b0:	8222      	strhne	r2, [r4, #16]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 808c1b2:	f3bf 8f5f 	dmb	sy
      __b = _GLIBCXX_MOVE(__tmp);
 808c1b6:	bf18      	it	ne
 808c1b8:	461f      	movne	r7, r3
 808c1ba:	2301      	movs	r3, #1
 808c1bc:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 808c1be:	f3bf 8f5f 	dmb	sy
 808c1c2:	f104 0308 	add.w	r3, r4, #8
 808c1c6:	2000      	movs	r0, #0
 808c1c8:	e853 6f00 	ldrex	r6, [r3]
 808c1cc:	e843 0200 	strex	r2, r0, [r3]
 808c1d0:	2a00      	cmp	r2, #0
 808c1d2:	d1f9      	bne.n	808c1c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 808c1d4:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 808c1d8:	2e00      	cmp	r6, #0
 808c1da:	d052      	beq.n	808c282 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x112>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 808c1dc:	f7fe fb34 	bl	808a848 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 808c1e0:	b120      	cbz	r0, 808c1ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7c>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 808c1e2:	4629      	mov	r1, r5
 808c1e4:	4630      	mov	r0, r6
 808c1e6:	f7ff ff94 	bl	808c112 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 808c1ea:	e043      	b.n	808c274 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 808c1ec:	4631      	mov	r1, r6
 808c1ee:	4668      	mov	r0, sp
 808c1f0:	f7ff ffaf 	bl	808c152 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 808c1f4:	68e0      	ldr	r0, [r4, #12]
 808c1f6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 808c1fa:	b108      	cbz	r0, 808c200 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x90>
 808c1fc:	f002 fbee 	bl	808e9dc <strdup>
 808c200:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 808c202:	2010      	movs	r0, #16
 808c204:	f8ad 5014 	strh.w	r5, [sp, #20]
 808c208:	f7f3 ff47 	bl	808009a <_Znwj>
 808c20c:	4605      	mov	r5, r0
 808c20e:	b330      	cbz	r0, 808c25e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xee>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808c210:	f04f 0800 	mov.w	r8, #0
 808c214:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808c218:	2018      	movs	r0, #24
 808c21a:	f7f3 ff3e 	bl	808009a <_Znwj>
 808c21e:	4604      	mov	r4, r0
 808c220:	b1c0      	cbz	r0, 808c254 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe4>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808c222:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 808c226:	4601      	mov	r1, r0
 808c228:	4668      	mov	r0, sp
 808c22a:	f7ff fda0 	bl	808bd6e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808c22e:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 808c230:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808c232:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808c234:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 808c236:	9202      	str	r2, [sp, #8]
 808c238:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 808c23a:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808c23c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 808c240:	9203      	str	r2, [sp, #12]
 808c242:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 808c244:	f64f 739c 	movw	r3, #65436	; 0xff9c
 808c248:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808c24c:	9b04      	ldr	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 808c24e:	f8cd 8010 	str.w	r8, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808c252:	6123      	str	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 808c254:	4b0e      	ldr	r3, [pc, #56]	; (808c290 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808c256:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 808c258:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 808c25a:	4b0e      	ldr	r3, [pc, #56]	; (808c294 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
 808c25c:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 808c25e:	9804      	ldr	r0, [sp, #16]
 808c260:	f7fe fbd0 	bl	808aa04 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808c264:	4668      	mov	r0, sp
 808c266:	f7fd fa25 	bl	80896b4 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 808c26a:	2200      	movs	r2, #0
 808c26c:	4629      	mov	r1, r5
 808c26e:	480a      	ldr	r0, [pc, #40]	; (808c298 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x128>)
 808c270:	f7fe faf2 	bl	808a858 <application_thread_invoke>
 808c274:	4630      	mov	r0, r6
 808c276:	f7fd fa1d 	bl	80896b4 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 808c27a:	2110      	movs	r1, #16
 808c27c:	4630      	mov	r0, r6
 808c27e:	f000 fe92 	bl	808cfa6 <_ZdlPvj>
 808c282:	4638      	mov	r0, r7
 808c284:	f7fe fbbe 	bl	808aa04 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
 808c288:	b006      	add	sp, #24
 808c28a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808c28e:	bf00      	nop
 808c290:	0808c125 	.word	0x0808c125
 808c294:	0808c385 	.word	0x0808c385
 808c298:	0808c9e5 	.word	0x0808c9e5

0808c29c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 808c29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808c2a0:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 808c2a2:	ad07      	add	r5, sp, #28
 808c2a4:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 808c2a8:	4606      	mov	r6, r0
 808c2aa:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 808c2ac:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 808c2ae:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 808c2b0:	460f      	mov	r7, r1
 808c2b2:	4690      	mov	r8, r2
 808c2b4:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 808c2b8:	f8c5 b004 	str.w	fp, [r5, #4]
 808c2bc:	f8c5 b008 	str.w	fp, [r5, #8]
 808c2c0:	9307      	str	r3, [sp, #28]
 808c2c2:	f7f3 feea 	bl	808009a <_Znwj>
 808c2c6:	4604      	mov	r4, r0
 808c2c8:	b138      	cbz	r0, 808c2da <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 808c2ca:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 808c2ce:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 808c2d2:	f8c0 b004 	str.w	fp, [r0, #4]
 808c2d6:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 808c2da:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808c2dc:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 808c2de:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 808c2e0:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808c2e2:	f7f3 feda 	bl	808009a <_Znwj>
 808c2e6:	b128      	cbz	r0, 808c2f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 808c2e8:	2301      	movs	r3, #1
 808c2ea:	6043      	str	r3, [r0, #4]
 808c2ec:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 808c2ee:	4b23      	ldr	r3, [pc, #140]	; (808c37c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
 808c2f0:	60c4      	str	r4, [r0, #12]
 808c2f2:	6003      	str	r3, [r0, #0]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 808c2f4:	4b22      	ldr	r3, [pc, #136]	; (808c380 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808c2f6:	9004      	str	r0, [sp, #16]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 808c2f8:	2008      	movs	r0, #8
 808c2fa:	9308      	str	r3, [sp, #32]
 808c2fc:	f7f3 fecd 	bl	808009a <_Znwj>
 808c300:	4604      	mov	r4, r0
 808c302:	b128      	cbz	r0, 808c310 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 808c304:	9b03      	ldr	r3, [sp, #12]
 808c306:	a904      	add	r1, sp, #16
 808c308:	f840 3b04 	str.w	r3, [r0], #4
 808c30c:	f7ff fb86 	bl	808ba1c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 808c310:	9500      	str	r5, [sp, #0]
 808c312:	fa5f f38a 	uxtb.w	r3, sl
 808c316:	464a      	mov	r2, r9
 808c318:	4641      	mov	r1, r8
 808c31a:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 808c31c:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 808c31e:	f7fe fb49 	bl	808a9b4 <spark_send_event>
 808c322:	b9b8      	cbnz	r0, 808c354 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 808c324:	9b03      	ldr	r3, [sp, #12]
 808c326:	785b      	ldrb	r3, [r3, #1]
 808c328:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 808c32c:	b993      	cbnz	r3, 808c354 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 808c32e:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 808c332:	a905      	add	r1, sp, #20
 808c334:	a803      	add	r0, sp, #12
 808c336:	9205      	str	r2, [sp, #20]
 808c338:	f8ad 3018 	strh.w	r3, [sp, #24]
 808c33c:	f7ff ff18 	bl	808c170 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 808c340:	9805      	ldr	r0, [sp, #20]
 808c342:	f7fe fb5f 	bl	808aa04 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 808c346:	a805      	add	r0, sp, #20
 808c348:	9909      	ldr	r1, [sp, #36]	; 0x24
 808c34a:	f7ff fec4 	bl	808c0d6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808c34e:	a806      	add	r0, sp, #24
 808c350:	f7f8 f8f0 	bl	8084534 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 808c354:	9b03      	ldr	r3, [sp, #12]
 808c356:	a904      	add	r1, sp, #16
 808c358:	a806      	add	r0, sp, #24
 808c35a:	9305      	str	r3, [sp, #20]
 808c35c:	f7ff fb5e 	bl	808ba1c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 808c360:	a905      	add	r1, sp, #20
 808c362:	4630      	mov	r0, r6
 808c364:	f7ff fea6 	bl	808c0b4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808c368:	a806      	add	r0, sp, #24
 808c36a:	f7f8 f8e3 	bl	8084534 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808c36e:	a804      	add	r0, sp, #16
 808c370:	f7f8 f8e0 	bl	8084534 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 808c374:	4630      	mov	r0, r6
 808c376:	b00b      	add	sp, #44	; 0x2c
 808c378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808c37c:	08094470 	.word	0x08094470
 808c380:	0808c4f1 	.word	0x0808c4f1

0808c384 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 808c384:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 808c386:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808c388:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 808c38a:	d006      	beq.n	808c39a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 808c38c:	2a03      	cmp	r2, #3
 808c38e:	d017      	beq.n	808c3c0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 808c390:	2a01      	cmp	r2, #1
 808c392:	d121      	bne.n	808c3d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 808c394:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 808c396:	6003      	str	r3, [r0, #0]
	      break;
 808c398:	e01e      	b.n	808c3d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 808c39a:	2018      	movs	r0, #24
 808c39c:	680e      	ldr	r6, [r1, #0]
 808c39e:	f7f3 fe7c 	bl	808009a <_Znwj>
 808c3a2:	4605      	mov	r5, r0
 808c3a4:	b150      	cbz	r0, 808c3bc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 808c3a6:	4631      	mov	r1, r6
 808c3a8:	f7ff fed3 	bl	808c152 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 808c3ac:	6930      	ldr	r0, [r6, #16]
 808c3ae:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 808c3b2:	b108      	cbz	r0, 808c3b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 808c3b4:	f002 fb12 	bl	808e9dc <strdup>
 808c3b8:	6128      	str	r0, [r5, #16]
 808c3ba:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 808c3bc:	6025      	str	r5, [r4, #0]
 808c3be:	e00b      	b.n	808c3d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 808c3c0:	6804      	ldr	r4, [r0, #0]
 808c3c2:	b14c      	cbz	r4, 808c3d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 808c3c4:	6920      	ldr	r0, [r4, #16]
 808c3c6:	f7fe fb1d 	bl	808aa04 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808c3ca:	4620      	mov	r0, r4
 808c3cc:	f7fd f972 	bl	80896b4 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 808c3d0:	2118      	movs	r1, #24
 808c3d2:	4620      	mov	r0, r4
 808c3d4:	f000 fde7 	bl	808cfa6 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 808c3d8:	2000      	movs	r0, #0
 808c3da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808c3dc <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 808c3dc:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808c3de:	2300      	movs	r3, #0
 808c3e0:	6083      	str	r3, [r0, #8]
 808c3e2:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 808c3e4:	4604      	mov	r4, r0
 808c3e6:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 808c3e8:	b12b      	cbz	r3, 808c3f6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808c3ea:	2202      	movs	r2, #2
 808c3ec:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 808c3ee:	68eb      	ldr	r3, [r5, #12]
 808c3f0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 808c3f2:	68ab      	ldr	r3, [r5, #8]
 808c3f4:	60a3      	str	r3, [r4, #8]
	}
    }
 808c3f6:	4620      	mov	r0, r4
 808c3f8:	bd38      	pop	{r3, r4, r5, pc}

0808c3fa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 808c3fa:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 808c3fc:	b570      	push	{r4, r5, r6, lr}
 808c3fe:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 808c400:	d006      	beq.n	808c410 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 808c402:	2a03      	cmp	r2, #3
 808c404:	d011      	beq.n	808c42a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 808c406:	2a01      	cmp	r2, #1
 808c408:	d118      	bne.n	808c43c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 808c40a:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 808c40c:	6003      	str	r3, [r0, #0]
	      break;
 808c40e:	e015      	b.n	808c43c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 808c410:	2014      	movs	r0, #20
 808c412:	680e      	ldr	r6, [r1, #0]
 808c414:	f7f3 fe41 	bl	808009a <_Znwj>
 808c418:	4605      	mov	r5, r0
 808c41a:	b120      	cbz	r0, 808c426 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 808c41c:	4631      	mov	r1, r6
 808c41e:	f7ff ffdd 	bl	808c3dc <_ZNSt8functionIFvRKbEEC1ERKS3_>
 808c422:	7c33      	ldrb	r3, [r6, #16]
 808c424:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 808c426:	6025      	str	r5, [r4, #0]
 808c428:	e008      	b.n	808c43c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 808c42a:	6804      	ldr	r4, [r0, #0]
 808c42c:	b134      	cbz	r4, 808c43c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808c42e:	4620      	mov	r0, r4
 808c430:	f7fd f940 	bl	80896b4 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 808c434:	2114      	movs	r1, #20
 808c436:	4620      	mov	r0, r4
 808c438:	f000 fdb5 	bl	808cfa6 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 808c43c:	2000      	movs	r0, #0
 808c43e:	bd70      	pop	{r4, r5, r6, pc}

0808c440 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 808c440:	b5f0      	push	{r4, r5, r6, r7, lr}
 808c442:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 808c444:	f3bf 8f5f 	dmb	sy
 808c448:	b087      	sub	sp, #28
 808c44a:	2300      	movs	r3, #0
 808c44c:	e850 6f00 	ldrex	r6, [r0]
 808c450:	e840 3200 	strex	r2, r3, [r0]
 808c454:	2a00      	cmp	r2, #0
 808c456:	d1f9      	bne.n	808c44c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 808c458:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 808c45c:	2e00      	cmp	r6, #0
 808c45e:	d03f      	beq.n	808c4e0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 808c460:	4618      	mov	r0, r3
 808c462:	f7fe f9f1 	bl	808a848 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 808c466:	4607      	mov	r7, r0
 808c468:	b120      	cbz	r0, 808c474 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 808c46a:	4621      	mov	r1, r4
 808c46c:	4630      	mov	r0, r6
 808c46e:	f7ff fe60 	bl	808c132 <_ZNKSt8functionIFvRKbEEclES1_>
 808c472:	e02e      	b.n	808c4d2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 808c474:	4631      	mov	r1, r6
 808c476:	a801      	add	r0, sp, #4
 808c478:	f7ff ffb0 	bl	808c3dc <_ZNSt8functionIFvRKbEEC1ERKS3_>
 808c47c:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 808c47e:	2010      	movs	r0, #16
 808c480:	f88d 3014 	strb.w	r3, [sp, #20]
 808c484:	f7f3 fe09 	bl	808009a <_Znwj>
 808c488:	4605      	mov	r5, r0
 808c48a:	b1d0      	cbz	r0, 808c4c2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808c48c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808c48e:	2014      	movs	r0, #20
 808c490:	f7f3 fe03 	bl	808009a <_Znwj>
 808c494:	4604      	mov	r4, r0
 808c496:	b178      	cbz	r0, 808c4b8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808c498:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 808c49a:	4601      	mov	r1, r0
 808c49c:	a801      	add	r0, sp, #4
 808c49e:	f7ff fc66 	bl	808bd6e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808c4a2:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 808c4a4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808c4a6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808c4a8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 808c4aa:	9203      	str	r2, [sp, #12]
 808c4ac:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 808c4ae:	60e3      	str	r3, [r4, #12]
 808c4b0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808c4b4:	9204      	str	r2, [sp, #16]
 808c4b6:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 808c4b8:	4b0a      	ldr	r3, [pc, #40]	; (808c4e4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808c4ba:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 808c4bc:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 808c4be:	4b0a      	ldr	r3, [pc, #40]	; (808c4e8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 808c4c0:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808c4c2:	a801      	add	r0, sp, #4
 808c4c4:	f7fd f8f6 	bl	80896b4 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 808c4c8:	2200      	movs	r2, #0
 808c4ca:	4629      	mov	r1, r5
 808c4cc:	4807      	ldr	r0, [pc, #28]	; (808c4ec <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 808c4ce:	f7fe f9c3 	bl	808a858 <application_thread_invoke>
 808c4d2:	4630      	mov	r0, r6
 808c4d4:	f7fd f8ee 	bl	80896b4 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 808c4d8:	2110      	movs	r1, #16
 808c4da:	4630      	mov	r0, r6
 808c4dc:	f000 fd63 	bl	808cfa6 <_ZdlPvj>
        }
    }
 808c4e0:	b007      	add	sp, #28
 808c4e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808c4e4:	0808c145 	.word	0x0808c145
 808c4e8:	0808c3fb 	.word	0x0808c3fb
 808c4ec:	0808c9e5 	.word	0x0808c9e5

0808c4f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 808c4f0:	b530      	push	{r4, r5, lr}
 808c4f2:	4604      	mov	r4, r0
 808c4f4:	b085      	sub	sp, #20
 808c4f6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 808c4f8:	4668      	mov	r0, sp
 808c4fa:	4611      	mov	r1, r2
 808c4fc:	f7ff fdeb 	bl	808c0d6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 808c500:	b17c      	cbz	r4, 808c522 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 808c502:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 808c504:	4628      	mov	r0, r5
 808c506:	b10d      	cbz	r5, 808c50c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 808c508:	f002 fa68 	bl	808e9dc <strdup>
 808c50c:	9002      	str	r0, [sp, #8]
 808c50e:	a902      	add	r1, sp, #8
 808c510:	4668      	mov	r0, sp
 808c512:	f8ad 400c 	strh.w	r4, [sp, #12]
 808c516:	f7ff fe2b 	bl	808c170 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 808c51a:	9802      	ldr	r0, [sp, #8]
 808c51c:	f7fe fa72 	bl	808aa04 <free>
 808c520:	e01d      	b.n	808c55e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 808c522:	f04f 0201 	mov.w	r2, #1
 808c526:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 808c528:	f88d 4008 	strb.w	r4, [sp, #8]
 808c52c:	e8d0 3f4f 	ldrexb	r3, [r0]
 808c530:	42a3      	cmp	r3, r4
 808c532:	d103      	bne.n	808c53c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 808c534:	e8c0 2f41 	strexb	r1, r2, [r0]
 808c538:	2900      	cmp	r1, #0
 808c53a:	d1f7      	bne.n	808c52c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 808c53c:	d002      	beq.n	808c544 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 808c53e:	f88d 3008 	strb.w	r3, [sp, #8]
 808c542:	e00c      	b.n	808c55e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 808c544:	f110 010c 	adds.w	r1, r0, #12
 808c548:	f04f 0301 	mov.w	r3, #1
 808c54c:	bf18      	it	ne
 808c54e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 808c550:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 808c554:	3004      	adds	r0, #4
 808c556:	f800 3c03 	strb.w	r3, [r0, #-3]
 808c55a:	f7ff ff71 	bl	808c440 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 808c55e:	a801      	add	r0, sp, #4
 808c560:	f7f7 ffe8 	bl	8084534 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 808c564:	b005      	add	sp, #20
 808c566:	bd30      	pop	{r4, r5, pc}

0808c568 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 808c568:	4770      	bx	lr

0808c56a <_ZN9IPAddressD0Ev>:
 808c56a:	b510      	push	{r4, lr}
 808c56c:	4604      	mov	r4, r0
 808c56e:	2108      	movs	r1, #8
 808c570:	f000 fd19 	bl	808cfa6 <_ZdlPvj>
 808c574:	4620      	mov	r0, r4
 808c576:	bd10      	pop	{r4, pc}

0808c578 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 808c578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808c57a:	460f      	mov	r7, r1
 808c57c:	f100 0608 	add.w	r6, r0, #8
 808c580:	1d05      	adds	r5, r0, #4
 808c582:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 808c584:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 808c588:	220a      	movs	r2, #10
 808c58a:	4638      	mov	r0, r7
 808c58c:	f7ff f87b 	bl	808b686 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 808c590:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 808c592:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 808c594:	d007      	beq.n	808c5a6 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 808c596:	2c00      	cmp	r4, #0
 808c598:	d0f4      	beq.n	808c584 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 808c59a:	212e      	movs	r1, #46	; 0x2e
 808c59c:	4638      	mov	r0, r7
 808c59e:	f7ff f825 	bl	808b5ec <_ZN5Print5printEc>
 808c5a2:	4404      	add	r4, r0
 808c5a4:	e7ee      	b.n	808c584 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 808c5a6:	4620      	mov	r0, r4
 808c5a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0808c5ac <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 808c5ac:	4a02      	ldr	r2, [pc, #8]	; (808c5b8 <_ZN9IPAddressC1Ev+0xc>)
 808c5ae:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 808c5b0:	2200      	movs	r2, #0
 808c5b2:	6042      	str	r2, [r0, #4]
{
    clear();
}
 808c5b4:	4770      	bx	lr
 808c5b6:	bf00      	nop
 808c5b8:	0809448c 	.word	0x0809448c

0808c5bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 808c5bc:	4a02      	ldr	r2, [pc, #8]	; (808c5c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 808c5be:	6002      	str	r2, [r0, #0]
{
    memcpy(&this->address, &address, sizeof(address));
 808c5c0:	680a      	ldr	r2, [r1, #0]
 808c5c2:	6042      	str	r2, [r0, #4]
}
 808c5c4:	4770      	bx	lr
 808c5c6:	bf00      	nop
 808c5c8:	0809448c 	.word	0x0809448c

0808c5cc <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 808c5cc:	4a01      	ldr	r2, [pc, #4]	; (808c5d4 <_ZN9IPAddressC1Em+0x8>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 808c5ce:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 808c5d0:	6002      	str	r2, [r0, #0]
{
    *this = address;
}
 808c5d2:	4770      	bx	lr
 808c5d4:	0809448c 	.word	0x0809448c

0808c5d8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 808c5d8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 808c5da:	f89d 4008 	ldrb.w	r4, [sp, #8]
 808c5de:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 808c5e2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 808c5e6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 808c5ea:	6041      	str	r1, [r0, #4]
 808c5ec:	bd10      	pop	{r4, pc}
	...

0808c5f0 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 808c5f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808c5f2:	4d04      	ldr	r5, [pc, #16]	; (808c604 <_ZN9IPAddressC1Ehhhh+0x14>)
 808c5f4:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 808c5f6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 808c5fa:	9500      	str	r5, [sp, #0]
 808c5fc:	f7ff ffec 	bl	808c5d8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 808c600:	b003      	add	sp, #12
 808c602:	bd30      	pop	{r4, r5, pc}
 808c604:	0809448c 	.word	0x0809448c

0808c608 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 808c608:	7441      	strb	r1, [r0, #17]
 808c60a:	4770      	bx	lr

0808c60c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 808c60c:	4770      	bx	lr

0808c60e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 808c60e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 808c610:	2100      	movs	r1, #0
 808c612:	7c00      	ldrb	r0, [r0, #16]
 808c614:	f7fe f8d0 	bl	808a7b8 <HAL_USB_USART_Receive_Data>
}
 808c618:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 808c61c:	bf28      	it	cs
 808c61e:	f04f 30ff 	movcs.w	r0, #4294967295
 808c622:	bd08      	pop	{r3, pc}

0808c624 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 808c624:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 808c626:	2101      	movs	r1, #1
 808c628:	7c00      	ldrb	r0, [r0, #16]
 808c62a:	f7fe f8c5 	bl	808a7b8 <HAL_USB_USART_Receive_Data>
}
 808c62e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 808c632:	bf28      	it	cs
 808c634:	f04f 30ff 	movcs.w	r0, #4294967295
 808c638:	bd08      	pop	{r3, pc}

0808c63a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 808c63a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 808c63c:	7c00      	ldrb	r0, [r0, #16]
 808c63e:	f7fe f8b3 	bl	808a7a8 <HAL_USB_USART_Available_Data_For_Write>
}
 808c642:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808c646:	bd08      	pop	{r3, pc}

0808c648 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 808c648:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 808c64a:	7c00      	ldrb	r0, [r0, #16]
 808c64c:	f7fe f8a4 	bl	808a798 <HAL_USB_USART_Available_Data>
}
 808c650:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808c654:	bd08      	pop	{r3, pc}

0808c656 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 808c656:	7c00      	ldrb	r0, [r0, #16]
 808c658:	f7fe b8be 	b.w	808a7d8 <HAL_USB_USART_Flush_Data>

0808c65c <_ZN9USBSerialD0Ev>:
 808c65c:	b510      	push	{r4, lr}
 808c65e:	4604      	mov	r4, r0
 808c660:	2114      	movs	r1, #20
 808c662:	f000 fca0 	bl	808cfa6 <_ZdlPvj>
 808c666:	4620      	mov	r0, r4
 808c668:	bd10      	pop	{r4, pc}

0808c66a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 808c66a:	b538      	push	{r3, r4, r5, lr}
 808c66c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808c66e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 808c670:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808c672:	f7fe f899 	bl	808a7a8 <HAL_USB_USART_Available_Data_For_Write>
 808c676:	2800      	cmp	r0, #0
 808c678:	dc01      	bgt.n	808c67e <_ZN9USBSerial5writeEh+0x14>
 808c67a:	7c60      	ldrb	r0, [r4, #17]
 808c67c:	b128      	cbz	r0, 808c68a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 808c67e:	4629      	mov	r1, r5
 808c680:	7c20      	ldrb	r0, [r4, #16]
 808c682:	f7fe f8a1 	bl	808a7c8 <HAL_USB_USART_Send_Data>
 808c686:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 808c68a:	bd38      	pop	{r3, r4, r5, pc}

0808c68c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 808c68c:	b510      	push	{r4, lr}
 808c68e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 808c690:	2300      	movs	r3, #0
 808c692:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 808c694:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808c698:	60a3      	str	r3, [r4, #8]
 808c69a:	4b05      	ldr	r3, [pc, #20]	; (808c6b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 808c69c:	4608      	mov	r0, r1
 808c69e:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 808c6a0:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 808c6a2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 808c6a4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 808c6a6:	4611      	mov	r1, r2
 808c6a8:	f7fe f866 	bl	808a778 <HAL_USB_USART_Init>
}
 808c6ac:	4620      	mov	r0, r4
 808c6ae:	bd10      	pop	{r4, pc}
 808c6b0:	080944a0 	.word	0x080944a0

0808c6b4 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 808c6b4:	2200      	movs	r2, #0
 808c6b6:	7c00      	ldrb	r0, [r0, #16]
 808c6b8:	f7fe b866 	b.w	808a788 <HAL_USB_USART_Begin>

0808c6bc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 808c6bc:	b510      	push	{r4, lr}
 808c6be:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 808c6c0:	2214      	movs	r2, #20
 808c6c2:	2100      	movs	r1, #0
 808c6c4:	f002 f93a 	bl	808e93c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 808c6c8:	4b05      	ldr	r3, [pc, #20]	; (808c6e0 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 808c6ca:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 808c6cc:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 808c6ce:	4b05      	ldr	r3, [pc, #20]	; (808c6e4 <_Z19acquireSerialBufferv+0x28>)
 808c6d0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808c6d2:	f240 1301 	movw	r3, #257	; 0x101
 808c6d6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 808c6d8:	2381      	movs	r3, #129	; 0x81
 808c6da:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 808c6dc:	bd10      	pop	{r4, pc}
 808c6de:	bf00      	nop
 808c6e0:	200011cd 	.word	0x200011cd
 808c6e4:	2000114c 	.word	0x2000114c

0808c6e8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 808c6e8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 808c6ea:	4d0e      	ldr	r5, [pc, #56]	; (808c724 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 808c6ec:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 808c6ee:	a801      	add	r0, sp, #4
 808c6f0:	f7ff ffe4 	bl	808c6bc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 808c6f4:	6829      	ldr	r1, [r5, #0]
 808c6f6:	f011 0401 	ands.w	r4, r1, #1
 808c6fa:	d110      	bne.n	808c71e <_Z16_fetch_usbserialv+0x36>
 808c6fc:	4628      	mov	r0, r5
 808c6fe:	f7f3 fcd0 	bl	80800a2 <__cxa_guard_acquire>
 808c702:	b160      	cbz	r0, 808c71e <_Z16_fetch_usbserialv+0x36>
 808c704:	aa01      	add	r2, sp, #4
 808c706:	4621      	mov	r1, r4
 808c708:	4807      	ldr	r0, [pc, #28]	; (808c728 <_Z16_fetch_usbserialv+0x40>)
 808c70a:	f7ff ffbf 	bl	808c68c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 808c70e:	4628      	mov	r0, r5
 808c710:	f7f3 fccc 	bl	80800ac <__cxa_guard_release>
 808c714:	4a05      	ldr	r2, [pc, #20]	; (808c72c <_Z16_fetch_usbserialv+0x44>)
 808c716:	4906      	ldr	r1, [pc, #24]	; (808c730 <_Z16_fetch_usbserialv+0x48>)
 808c718:	4803      	ldr	r0, [pc, #12]	; (808c728 <_Z16_fetch_usbserialv+0x40>)
 808c71a:	f000 fc3f 	bl	808cf9c <__aeabi_atexit>
	return _usbserial;
}
 808c71e:	4802      	ldr	r0, [pc, #8]	; (808c728 <_Z16_fetch_usbserialv+0x40>)
 808c720:	b007      	add	sp, #28
 808c722:	bd30      	pop	{r4, r5, pc}
 808c724:	20001148 	.word	0x20001148
 808c728:	200012d0 	.word	0x200012d0
 808c72c:	200005d8 	.word	0x200005d8
 808c730:	0808c60d 	.word	0x0808c60d

0808c734 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 808c734:	b510      	push	{r4, lr}
 808c736:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 808c738:	2214      	movs	r2, #20
 808c73a:	2100      	movs	r1, #0
 808c73c:	f002 f8fe 	bl	808e93c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 808c740:	4b05      	ldr	r3, [pc, #20]	; (808c758 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 808c742:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 808c744:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 808c746:	4b05      	ldr	r3, [pc, #20]	; (808c75c <_Z23acquireUSBSerial1Bufferv+0x28>)
 808c748:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808c74a:	f240 1301 	movw	r3, #257	; 0x101
 808c74e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 808c750:	2381      	movs	r3, #129	; 0x81
 808c752:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 808c754:	bd10      	pop	{r4, pc}
 808c756:	bf00      	nop
 808c758:	20001380 	.word	0x20001380
 808c75c:	200012e8 	.word	0x200012e8

0808c760 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 808c760:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808c762:	4c0e      	ldr	r4, [pc, #56]	; (808c79c <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 808c764:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 808c766:	a801      	add	r0, sp, #4
 808c768:	f7ff ffe4 	bl	808c734 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808c76c:	6823      	ldr	r3, [r4, #0]
 808c76e:	07db      	lsls	r3, r3, #31
 808c770:	d410      	bmi.n	808c794 <_Z17_fetch_usbserial1v+0x34>
 808c772:	4620      	mov	r0, r4
 808c774:	f7f3 fc95 	bl	80800a2 <__cxa_guard_acquire>
 808c778:	b160      	cbz	r0, 808c794 <_Z17_fetch_usbserial1v+0x34>
 808c77a:	aa01      	add	r2, sp, #4
 808c77c:	2101      	movs	r1, #1
 808c77e:	4808      	ldr	r0, [pc, #32]	; (808c7a0 <_Z17_fetch_usbserial1v+0x40>)
 808c780:	f7ff ff84 	bl	808c68c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 808c784:	4620      	mov	r0, r4
 808c786:	f7f3 fc91 	bl	80800ac <__cxa_guard_release>
 808c78a:	4a06      	ldr	r2, [pc, #24]	; (808c7a4 <_Z17_fetch_usbserial1v+0x44>)
 808c78c:	4906      	ldr	r1, [pc, #24]	; (808c7a8 <_Z17_fetch_usbserial1v+0x48>)
 808c78e:	4804      	ldr	r0, [pc, #16]	; (808c7a0 <_Z17_fetch_usbserial1v+0x40>)
 808c790:	f000 fc04 	bl	808cf9c <__aeabi_atexit>
  return _usbserial1;
}
 808c794:	4802      	ldr	r0, [pc, #8]	; (808c7a0 <_Z17_fetch_usbserial1v+0x40>)
 808c796:	b006      	add	sp, #24
 808c798:	bd10      	pop	{r4, pc}
 808c79a:	bf00      	nop
 808c79c:	200012e4 	.word	0x200012e4
 808c7a0:	2000136c 	.word	0x2000136c
 808c7a4:	200005d8 	.word	0x200005d8
 808c7a8:	0808c60d 	.word	0x0808c60d

0808c7ac <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 808c7ac:	4700      	bx	r0
	...

0808c7b0 <_Z15attachInterrupttPFvvE13InterruptModeah>:
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
 808c7b0:	2807      	cmp	r0, #7
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 808c7b2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 808c7b6:	4605      	mov	r5, r0
 808c7b8:	460f      	mov	r7, r1
 808c7ba:	4690      	mov	r8, r2
 808c7bc:	461e      	mov	r6, r3
 808c7be:	f04f 0400 	mov.w	r4, #0
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
 808c7c2:	d019      	beq.n	808c7f8 <_Z15attachInterrupttPFvvE13InterruptModeah+0x48>
#endif
    HAL_Interrupts_Detach(pin);
 808c7c4:	f7fd fe58 	bl	808a478 <HAL_Interrupts_Detach>
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
 808c7c8:	42a6      	cmp	r6, r4
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 808c7ca:	f04f 0304 	mov.w	r3, #4
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 808c7ce:	9403      	str	r4, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 808c7d0:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 808c7d4:	bfa2      	ittt	ge
 808c7d6:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
    return &extra;
 808c7da:	ac03      	addge	r4, sp, #12
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 808c7dc:	f88d 300e 	strbge.w	r3, [sp, #14]
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 808c7e0:	4628      	mov	r0, r5
 808c7e2:	9400      	str	r4, [sp, #0]
 808c7e4:	4643      	mov	r3, r8
 808c7e6:	463a      	mov	r2, r7
 808c7e8:	4905      	ldr	r1, [pc, #20]	; (808c800 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 808c7ea:	bfa8      	it	ge
 808c7ec:	f88d 600d 	strbge.w	r6, [sp, #13]
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 808c7f0:	f7fd fe3a 	bl	808a468 <HAL_Interrupts_Attach>
    return true;
 808c7f4:	2001      	movs	r0, #1
 808c7f6:	e000      	b.n	808c7fa <_Z15attachInterrupttPFvvE13InterruptModeah+0x4a>
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
 808c7f8:	4620      	mov	r0, r4
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
    return true;
}
 808c7fa:	b004      	add	sp, #16
 808c7fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808c800:	0808c7ad 	.word	0x0808c7ad

0808c804 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 808c804:	2200      	movs	r2, #0
 808c806:	4611      	mov	r1, r2
 808c808:	6840      	ldr	r0, [r0, #4]
 808c80a:	f7fe b873 	b.w	808a8f4 <network_ready>

0808c80e <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 808c80e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
        HAL_IPAddress ip = {0};
 808c812:	2600      	movs	r6, #0
 808c814:	ac04      	add	r4, sp, #16
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 808c816:	4605      	mov	r5, r0
    {
        HAL_IPAddress ip = {0};
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808c818:	4610      	mov	r0, r2
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 808c81a:	4688      	mov	r8, r1
 808c81c:	4617      	mov	r7, r2
    {
        HAL_IPAddress ip = {0};
 808c81e:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808c822:	f002 fe0b 	bl	808f43c <strlen>
 808c826:	9600      	str	r6, [sp, #0]
 808c828:	b281      	uxth	r1, r0
 808c82a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 808c82e:	4622      	mov	r2, r4
 808c830:	4638      	mov	r0, r7
 808c832:	f7fd ff91 	bl	808a758 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 808c836:	b120      	cbz	r0, 808c842 <_ZN5spark13CellularClass7resolveEPKc+0x34>
 808c838:	4631      	mov	r1, r6
 808c83a:	4628      	mov	r0, r5
 808c83c:	f7ff fec6 	bl	808c5cc <_ZN9IPAddressC1Em>
 808c840:	e003      	b.n	808c84a <_ZN5spark13CellularClass7resolveEPKc+0x3c>
 808c842:	4621      	mov	r1, r4
 808c844:	4628      	mov	r0, r5
 808c846:	f7ff feb9 	bl	808c5bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 808c84a:	4628      	mov	r0, r5
 808c84c:	b004      	add	sp, #16
 808c84e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808c852 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 808c852:	2200      	movs	r2, #0
 808c854:	4611      	mov	r1, r2
 808c856:	6840      	ldr	r0, [r0, #4]
 808c858:	f7fe b86c 	b.w	808a934 <network_listening>

0808c85c <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 808c85c:	2200      	movs	r2, #0
 808c85e:	4611      	mov	r1, r2
 808c860:	6840      	ldr	r0, [r0, #4]
 808c862:	f7fe b877 	b.w	808a954 <network_get_listen_timeout>

0808c866 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 808c866:	2200      	movs	r2, #0
 808c868:	6840      	ldr	r0, [r0, #4]
 808c86a:	f7fe b86b 	b.w	808a944 <network_set_listen_timeout>

0808c86e <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 808c86e:	2200      	movs	r2, #0
 808c870:	f081 0101 	eor.w	r1, r1, #1
 808c874:	6840      	ldr	r0, [r0, #4]
 808c876:	f7fe b855 	b.w	808a924 <network_listen>

0808c87a <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 808c87a:	2300      	movs	r3, #0
 808c87c:	461a      	mov	r2, r3
 808c87e:	4619      	mov	r1, r3
 808c880:	6840      	ldr	r0, [r0, #4]
 808c882:	f7fe b83f 	b.w	808a904 <network_on>

0808c886 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 808c886:	2200      	movs	r2, #0
 808c888:	4611      	mov	r1, r2
 808c88a:	6840      	ldr	r0, [r0, #4]
 808c88c:	f7fe b822 	b.w	808a8d4 <network_connecting>

0808c890 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 808c890:	2200      	movs	r2, #0
 808c892:	2102      	movs	r1, #2
 808c894:	6840      	ldr	r0, [r0, #4]
 808c896:	f7fe b825 	b.w	808a8e4 <network_disconnect>

0808c89a <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 808c89a:	2300      	movs	r3, #0
 808c89c:	461a      	mov	r2, r3
 808c89e:	6840      	ldr	r0, [r0, #4]
 808c8a0:	f7fe b810 	b.w	808a8c4 <network_connect>

0808c8a4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 808c8a4:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 808c8a6:	4c0c      	ldr	r4, [pc, #48]	; (808c8d8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
 808c8a8:	2528      	movs	r5, #40	; 0x28
 808c8aa:	462a      	mov	r2, r5
 808c8ac:	2100      	movs	r1, #0
 808c8ae:	4620      	mov	r0, r4
 808c8b0:	f002 f844 	bl	808e93c <memset>
        cid = -1;
 808c8b4:	f04f 33ff 	mov.w	r3, #4294967295
 808c8b8:	6063      	str	r3, [r4, #4]
        size = sizeof(*this);
 808c8ba:	8025      	strh	r5, [r4, #0]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 808c8bc:	4c07      	ldr	r4, [pc, #28]	; (808c8dc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
 808c8be:	2304      	movs	r3, #4
{
    CellularDevice device;

public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 808c8c0:	4620      	mov	r0, r4
 808c8c2:	6063      	str	r3, [r4, #4]
 808c8c4:	4b06      	ldr	r3, [pc, #24]	; (808c8e0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x3c>)
    char imei[16];
    int dev;

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
 808c8c6:	252c      	movs	r5, #44	; 0x2c
 808c8c8:	f840 3b08 	str.w	r3, [r0], #8
 808c8cc:	462a      	mov	r2, r5
 808c8ce:	2100      	movs	r1, #0
 808c8d0:	f002 f834 	bl	808e93c <memset>
        size = sizeof(*this);
 808c8d4:	8125      	strh	r5, [r4, #8]
 808c8d6:	bd38      	pop	{r3, r4, r5, pc}
 808c8d8:	200014b8 	.word	0x200014b8
 808c8dc:	20001484 	.word	0x20001484
 808c8e0:	080944d0 	.word	0x080944d0

0808c8e4 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 808c8e4:	7441      	strb	r1, [r0, #17]
 808c8e6:	4770      	bx	lr

0808c8e8 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 808c8e8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 808c8ea:	7c00      	ldrb	r0, [r0, #16]
 808c8ec:	f7fd febc 	bl	808a668 <HAL_USART_Available_Data_For_Write>
}
 808c8f0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808c8f4:	bd08      	pop	{r3, pc}

0808c8f6 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 808c8f6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 808c8f8:	7c00      	ldrb	r0, [r0, #16]
 808c8fa:	f7fd fe8d 	bl	808a618 <HAL_USART_Available_Data>
}
 808c8fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808c902:	bd08      	pop	{r3, pc}

0808c904 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 808c904:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 808c906:	7c00      	ldrb	r0, [r0, #16]
 808c908:	f7fd fe96 	bl	808a638 <HAL_USART_Peek_Data>
}
 808c90c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 808c910:	bf28      	it	cs
 808c912:	f04f 30ff 	movcs.w	r0, #4294967295
 808c916:	bd08      	pop	{r3, pc}

0808c918 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 808c918:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 808c91a:	7c00      	ldrb	r0, [r0, #16]
 808c91c:	f7fd fe84 	bl	808a628 <HAL_USART_Read_Data>
}
 808c920:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 808c924:	bf28      	it	cs
 808c926:	f04f 30ff 	movcs.w	r0, #4294967295
 808c92a:	bd08      	pop	{r3, pc}

0808c92c <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 808c92c:	7c00      	ldrb	r0, [r0, #16]
 808c92e:	f7fd be8b 	b.w	808a648 <HAL_USART_Flush_Data>

0808c932 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 808c932:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 808c934:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 808c936:	4604      	mov	r4, r0
 808c938:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 808c93a:	b925      	cbnz	r5, 808c946 <_ZN11USARTSerial5writeEh+0x14>
 808c93c:	7c00      	ldrb	r0, [r0, #16]
 808c93e:	f7fd fe93 	bl	808a668 <HAL_USART_Available_Data_For_Write>
 808c942:	2800      	cmp	r0, #0
 808c944:	dd05      	ble.n	808c952 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 808c946:	4631      	mov	r1, r6
 808c948:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 808c94a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 808c94e:	f7fd be5b 	b.w	808a608 <HAL_USART_Write_Data>
  }
  return 0;
}
 808c952:	4628      	mov	r0, r5
 808c954:	bd70      	pop	{r4, r5, r6, pc}
	...

0808c958 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 808c958:	b510      	push	{r4, lr}
 808c95a:	4604      	mov	r4, r0
 808c95c:	4608      	mov	r0, r1
 808c95e:	4611      	mov	r1, r2
 808c960:	2200      	movs	r2, #0
 808c962:	6062      	str	r2, [r4, #4]
 808c964:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 808c968:	60a2      	str	r2, [r4, #8]
 808c96a:	4a05      	ldr	r2, [pc, #20]	; (808c980 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 808c96c:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 808c96e:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 808c970:	2201      	movs	r2, #1
 808c972:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 808c974:	461a      	mov	r2, r3
 808c976:	f7fd fe3f 	bl	808a5f8 <HAL_USART_Init>
}
 808c97a:	4620      	mov	r0, r4
 808c97c:	bd10      	pop	{r4, pc}
 808c97e:	bf00      	nop
 808c980:	08094504 	.word	0x08094504

0808c984 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 808c984:	2300      	movs	r3, #0
 808c986:	7c00      	ldrb	r0, [r0, #16]
 808c988:	f7fd be76 	b.w	808a678 <HAL_USART_BeginConfig>

0808c98c <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 808c98c:	2200      	movs	r2, #0
 808c98e:	f7ff bff9 	b.w	808c984 <_ZN11USARTSerial5beginEmm>

0808c992 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 808c992:	7c00      	ldrb	r0, [r0, #16]
 808c994:	f7fd be60 	b.w	808a658 <HAL_USART_Is_Enabled>

0808c998 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 808c998:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 808c99a:	4d0c      	ldr	r5, [pc, #48]	; (808c9cc <_Z22__fetch_global_Serial1v+0x34>)
 808c99c:	6829      	ldr	r1, [r5, #0]
 808c99e:	f011 0401 	ands.w	r4, r1, #1
 808c9a2:	d111      	bne.n	808c9c8 <_Z22__fetch_global_Serial1v+0x30>
 808c9a4:	4628      	mov	r0, r5
 808c9a6:	f7f3 fb7c 	bl	80800a2 <__cxa_guard_acquire>
 808c9aa:	b168      	cbz	r0, 808c9c8 <_Z22__fetch_global_Serial1v+0x30>
 808c9ac:	4a08      	ldr	r2, [pc, #32]	; (808c9d0 <_Z22__fetch_global_Serial1v+0x38>)
 808c9ae:	4621      	mov	r1, r4
 808c9b0:	4b08      	ldr	r3, [pc, #32]	; (808c9d4 <_Z22__fetch_global_Serial1v+0x3c>)
 808c9b2:	4809      	ldr	r0, [pc, #36]	; (808c9d8 <_Z22__fetch_global_Serial1v+0x40>)
 808c9b4:	f7ff ffd0 	bl	808c958 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 808c9b8:	4628      	mov	r0, r5
 808c9ba:	f7f3 fb77 	bl	80800ac <__cxa_guard_release>
 808c9be:	4a07      	ldr	r2, [pc, #28]	; (808c9dc <_Z22__fetch_global_Serial1v+0x44>)
 808c9c0:	4907      	ldr	r1, [pc, #28]	; (808c9e0 <_Z22__fetch_global_Serial1v+0x48>)
 808c9c2:	4805      	ldr	r0, [pc, #20]	; (808c9d8 <_Z22__fetch_global_Serial1v+0x40>)
 808c9c4:	f000 faea 	bl	808cf9c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 808c9c8:	4803      	ldr	r0, [pc, #12]	; (808c9d8 <_Z22__fetch_global_Serial1v+0x40>)
 808c9ca:	bd38      	pop	{r3, r4, r5, pc}
 808c9cc:	20001578 	.word	0x20001578
 808c9d0:	2000157c 	.word	0x2000157c
 808c9d4:	200014f4 	.word	0x200014f4
 808c9d8:	200014e0 	.word	0x200014e0
 808c9dc:	200005d8 	.word	0x200005d8
 808c9e0:	08080b5d 	.word	0x08080b5d

0808c9e4 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 808c9e4:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808c9e6:	6883      	ldr	r3, [r0, #8]
 808c9e8:	4604      	mov	r4, r0
 808c9ea:	b90b      	cbnz	r3, 808c9f0 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 808c9ec:	f000 fadd 	bl	808cfaa <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808c9f0:	68c3      	ldr	r3, [r0, #12]
 808c9f2:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 808c9f4:	68a3      	ldr	r3, [r4, #8]
 808c9f6:	b11b      	cbz	r3, 808ca00 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 808c9f8:	2203      	movs	r2, #3
 808c9fa:	4621      	mov	r1, r4
 808c9fc:	4620      	mov	r0, r4
 808c9fe:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 808ca00:	4620      	mov	r0, r4
}
 808ca02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 808ca06:	2110      	movs	r1, #16
 808ca08:	f000 bacd 	b.w	808cfa6 <_ZdlPvj>

0808ca0c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 808ca0c:	4770      	bx	lr

0808ca0e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 808ca0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808ca10:	4606      	mov	r6, r0
 808ca12:	4615      	mov	r5, r2
 808ca14:	460c      	mov	r4, r1
 808ca16:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 808ca18:	42bc      	cmp	r4, r7
 808ca1a:	d006      	beq.n	808ca2a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 808ca1c:	6833      	ldr	r3, [r6, #0]
 808ca1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 808ca22:	689b      	ldr	r3, [r3, #8]
 808ca24:	4630      	mov	r0, r6
 808ca26:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 808ca28:	e7f6      	b.n	808ca18 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 808ca2a:	4628      	mov	r0, r5
 808ca2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808ca2e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 808ca2e:	2200      	movs	r2, #0
 808ca30:	7c00      	ldrb	r0, [r0, #16]
 808ca32:	f7fd be49 	b.w	808a6c8 <HAL_I2C_Write_Data>

0808ca36 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 808ca36:	2100      	movs	r1, #0
 808ca38:	7c00      	ldrb	r0, [r0, #16]
 808ca3a:	f7fd be4d 	b.w	808a6d8 <HAL_I2C_Available_Data>

0808ca3e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 808ca3e:	2100      	movs	r1, #0
 808ca40:	7c00      	ldrb	r0, [r0, #16]
 808ca42:	f7fd be51 	b.w	808a6e8 <HAL_I2C_Read_Data>

0808ca46 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 808ca46:	2100      	movs	r1, #0
 808ca48:	7c00      	ldrb	r0, [r0, #16]
 808ca4a:	f7fd be55 	b.w	808a6f8 <HAL_I2C_Peek_Data>

0808ca4e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 808ca4e:	2100      	movs	r1, #0
 808ca50:	7c00      	ldrb	r0, [r0, #16]
 808ca52:	f7fd be59 	b.w	808a708 <HAL_I2C_Flush_Data>

0808ca56 <_ZN7TwoWireD0Ev>:
 808ca56:	b510      	push	{r4, lr}
 808ca58:	4604      	mov	r4, r0
 808ca5a:	2114      	movs	r1, #20
 808ca5c:	f000 faa3 	bl	808cfa6 <_ZdlPvj>
 808ca60:	4620      	mov	r0, r4
 808ca62:	bd10      	pop	{r4, pc}

0808ca64 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 808ca64:	b510      	push	{r4, lr}
 808ca66:	4604      	mov	r4, r0
 808ca68:	4608      	mov	r0, r1
 808ca6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808ca6e:	60a3      	str	r3, [r4, #8]
 808ca70:	4b04      	ldr	r3, [pc, #16]	; (808ca84 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 808ca72:	2100      	movs	r1, #0
{
  _i2c = i2c;
 808ca74:	7420      	strb	r0, [r4, #16]
 808ca76:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 808ca78:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 808ca7a:	f7fd fe55 	bl	808a728 <HAL_I2C_Init>

}
 808ca7e:	4620      	mov	r0, r4
 808ca80:	bd10      	pop	{r4, pc}
 808ca82:	bf00      	nop
 808ca84:	08094534 	.word	0x08094534

0808ca88 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 808ca88:	2300      	movs	r3, #0
 808ca8a:	461a      	mov	r2, r3
 808ca8c:	4619      	mov	r1, r3
 808ca8e:	7c00      	ldrb	r0, [r0, #16]
 808ca90:	f7fd bdfa 	b.w	808a688 <HAL_I2C_Begin>

0808ca94 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 808ca94:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 808ca96:	2400      	movs	r4, #0
 808ca98:	7c00      	ldrb	r0, [r0, #16]
 808ca9a:	9400      	str	r4, [sp, #0]
 808ca9c:	f7fd fdfc 	bl	808a698 <HAL_I2C_Request_Data>
  return result;
}
 808caa0:	b2c0      	uxtb	r0, r0
 808caa2:	b002      	add	sp, #8
 808caa4:	bd10      	pop	{r4, pc}

0808caa6 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 808caa6:	2301      	movs	r3, #1
 808caa8:	f7ff bff4 	b.w	808ca94 <_ZN7TwoWire11requestFromEhhh>

0808caac <_ZN7TwoWire11requestFromEii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 808caac:	2301      	movs	r3, #1
 808caae:	b2d2      	uxtb	r2, r2
 808cab0:	b2c9      	uxtb	r1, r1
 808cab2:	f7ff bfef 	b.w	808ca94 <_ZN7TwoWire11requestFromEhhh>

0808cab6 <_ZN7TwoWire11requestFromEiii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
 808cab6:	b2db      	uxtb	r3, r3
 808cab8:	b2d2      	uxtb	r2, r2
 808caba:	b2c9      	uxtb	r1, r1
 808cabc:	f7ff bfea 	b.w	808ca94 <_ZN7TwoWire11requestFromEhhh>

0808cac0 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 808cac0:	2200      	movs	r2, #0
 808cac2:	7c00      	ldrb	r0, [r0, #16]
 808cac4:	f7fd bdf0 	b.w	808a6a8 <HAL_I2C_Begin_Transmission>

0808cac8 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 808cac8:	b2c9      	uxtb	r1, r1
 808caca:	f7ff bff9 	b.w	808cac0 <_ZN7TwoWire17beginTransmissionEh>

0808cace <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 808cace:	2200      	movs	r2, #0
 808cad0:	7c00      	ldrb	r0, [r0, #16]
 808cad2:	f7fd bdf1 	b.w	808a6b8 <HAL_I2C_End_Transmission>

0808cad6 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 808cad6:	2101      	movs	r1, #1
 808cad8:	f7ff bff9 	b.w	808cace <_ZN7TwoWire15endTransmissionEh>

0808cadc <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 808cadc:	2100      	movs	r1, #0
 808cade:	7c00      	ldrb	r0, [r0, #16]
 808cae0:	f7fd be1a 	b.w	808a718 <HAL_I2C_Is_Enabled>

0808cae4 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 808cae4:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
 808cae6:	2100      	movs	r1, #0
 808cae8:	7c00      	ldrb	r0, [r0, #16]
 808caea:	f7fd fe25 	bl	808a738 <HAL_I2C_Acquire>
}
 808caee:	fab0 f080 	clz	r0, r0
 808caf2:	0940      	lsrs	r0, r0, #5
 808caf4:	bd08      	pop	{r3, pc}

0808caf6 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 808caf6:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
 808caf8:	2100      	movs	r1, #0
 808cafa:	7c00      	ldrb	r0, [r0, #16]
 808cafc:	f7fd fe24 	bl	808a748 <HAL_I2C_Release>
}
 808cb00:	fab0 f080 	clz	r0, r0
 808cb04:	0940      	lsrs	r0, r0, #5
 808cb06:	bd08      	pop	{r3, pc}

0808cb08 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 808cb08:	2300      	movs	r3, #0
 808cb0a:	461a      	mov	r2, r3
 808cb0c:	6840      	ldr	r0, [r0, #4]
 808cb0e:	f7fd bed9 	b.w	808a8c4 <network_connect>

0808cb12 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 808cb12:	2200      	movs	r2, #0
 808cb14:	2102      	movs	r1, #2
 808cb16:	6840      	ldr	r0, [r0, #4]
 808cb18:	f7fd bee4 	b.w	808a8e4 <network_disconnect>

0808cb1c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 808cb1c:	2200      	movs	r2, #0
 808cb1e:	4611      	mov	r1, r2
 808cb20:	6840      	ldr	r0, [r0, #4]
 808cb22:	f7fd bed7 	b.w	808a8d4 <network_connecting>

0808cb26 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 808cb26:	2200      	movs	r2, #0
 808cb28:	4611      	mov	r1, r2
 808cb2a:	6840      	ldr	r0, [r0, #4]
 808cb2c:	f7fd bee2 	b.w	808a8f4 <network_ready>

0808cb30 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 808cb30:	2300      	movs	r3, #0
 808cb32:	461a      	mov	r2, r3
 808cb34:	4619      	mov	r1, r3
 808cb36:	6840      	ldr	r0, [r0, #4]
 808cb38:	f7fd bee4 	b.w	808a904 <network_on>

0808cb3c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 808cb3c:	2300      	movs	r3, #0
 808cb3e:	461a      	mov	r2, r3
 808cb40:	4619      	mov	r1, r3
 808cb42:	6840      	ldr	r0, [r0, #4]
 808cb44:	f7fd bee6 	b.w	808a914 <network_off>

0808cb48 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 808cb48:	2200      	movs	r2, #0
 808cb4a:	f081 0101 	eor.w	r1, r1, #1
 808cb4e:	6840      	ldr	r0, [r0, #4]
 808cb50:	f7fd bee8 	b.w	808a924 <network_listen>

0808cb54 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 808cb54:	2200      	movs	r2, #0
 808cb56:	6840      	ldr	r0, [r0, #4]
 808cb58:	f7fd bef4 	b.w	808a944 <network_set_listen_timeout>

0808cb5c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 808cb5c:	2200      	movs	r2, #0
 808cb5e:	4611      	mov	r1, r2
 808cb60:	6840      	ldr	r0, [r0, #4]
 808cb62:	f7fd bef7 	b.w	808a954 <network_get_listen_timeout>

0808cb66 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 808cb66:	2200      	movs	r2, #0
 808cb68:	4611      	mov	r1, r2
 808cb6a:	6840      	ldr	r0, [r0, #4]
 808cb6c:	f7fd bee2 	b.w	808a934 <network_listening>

0808cb70 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 808cb70:	b5f0      	push	{r4, r5, r6, r7, lr}
 808cb72:	4617      	mov	r7, r2
 808cb74:	b087      	sub	sp, #28
 808cb76:	4605      	mov	r5, r0
    IPAddress addr;
 808cb78:	a804      	add	r0, sp, #16
 808cb7a:	f7ff fd17 	bl	808c5ac <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 808cb7e:	2600      	movs	r6, #0
 808cb80:	ac06      	add	r4, sp, #24
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808cb82:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 808cb84:	f844 6d0c 	str.w	r6, [r4, #-12]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808cb88:	f002 fc58 	bl	808f43c <strlen>
 808cb8c:	4b0a      	ldr	r3, [pc, #40]	; (808cbb8 <_ZN5spark12NetworkClass7resolveEPKc+0x48>)
 808cb8e:	9600      	str	r6, [sp, #0]
 808cb90:	b281      	uxth	r1, r0
 808cb92:	685b      	ldr	r3, [r3, #4]
 808cb94:	4622      	mov	r2, r4
 808cb96:	4638      	mov	r0, r7
 808cb98:	f7fd fdde 	bl	808a758 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 808cb9c:	b120      	cbz	r0, 808cba8 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 808cb9e:	4631      	mov	r1, r6
 808cba0:	4628      	mov	r0, r5
 808cba2:	f7ff fd13 	bl	808c5cc <_ZN9IPAddressC1Em>
 808cba6:	e003      	b.n	808cbb0 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 808cba8:	4621      	mov	r1, r4
 808cbaa:	4628      	mov	r0, r5
 808cbac:	f7ff fd06 	bl	808c5bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 808cbb0:	4628      	mov	r0, r5
 808cbb2:	b007      	add	sp, #28
 808cbb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808cbb6:	bf00      	nop
 808cbb8:	20001484 	.word	0x20001484

0808cbbc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 808cbbc:	4b02      	ldr	r3, [pc, #8]	; (808cbc8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 808cbbe:	4a03      	ldr	r2, [pc, #12]	; (808cbcc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 808cbc0:	601a      	str	r2, [r3, #0]
 808cbc2:	2200      	movs	r2, #0
 808cbc4:	605a      	str	r2, [r3, #4]
 808cbc6:	4770      	bx	lr
 808cbc8:	20001600 	.word	0x20001600
 808cbcc:	0809455c 	.word	0x0809455c

0808cbd0 <_ZN5spark16JSONBufferWriterD1Ev>:

private:
    Print &strm_;
};

class JSONBufferWriter: public JSONWriter {
 808cbd0:	4770      	bx	lr

0808cbd2 <_ZN5spark16JSONBufferWriterD0Ev>:
 808cbd2:	b510      	push	{r4, lr}
 808cbd4:	4604      	mov	r4, r0
 808cbd6:	2114      	movs	r1, #20
 808cbd8:	f000 f9e5 	bl	808cfa6 <_ZdlPvj>
 808cbdc:	4620      	mov	r0, r4
 808cbde:	bd10      	pop	{r4, pc}

0808cbe0 <_ZN5spark16JSONBufferWriter5writeEPKcj>:
    }
    write('"');
}

// spark::JSONBufferWriter
void spark::JSONBufferWriter::write(const char *data, size_t size) {
 808cbe0:	b538      	push	{r3, r4, r5, lr}
 808cbe2:	4615      	mov	r5, r2
    if (n_ < bufSize_) {
 808cbe4:	6903      	ldr	r3, [r0, #16]
 808cbe6:	68c2      	ldr	r2, [r0, #12]
    }
    write('"');
}

// spark::JSONBufferWriter
void spark::JSONBufferWriter::write(const char *data, size_t size) {
 808cbe8:	4604      	mov	r4, r0
    if (n_ < bufSize_) {
 808cbea:	4293      	cmp	r3, r2
 808cbec:	d207      	bcs.n	808cbfe <_ZN5spark16JSONBufferWriter5writeEPKcj+0x1e>
        memcpy(buf_ + n_, data, std::min(size, bufSize_ - n_));
 808cbee:	1ad2      	subs	r2, r2, r3
 808cbf0:	6880      	ldr	r0, [r0, #8]
 808cbf2:	42aa      	cmp	r2, r5
 808cbf4:	bf28      	it	cs
 808cbf6:	462a      	movcs	r2, r5
 808cbf8:	4418      	add	r0, r3
 808cbfa:	f001 fe94 	bl	808e926 <memcpy>
    }
    n_ += size;
 808cbfe:	6923      	ldr	r3, [r4, #16]
 808cc00:	441d      	add	r5, r3
 808cc02:	6125      	str	r5, [r4, #16]
 808cc04:	bd38      	pop	{r3, r4, r5, pc}

0808cc06 <_ZN5spark16JSONBufferWriter6printfEPKcz>:
}

void spark::JSONBufferWriter::printf(const char *fmt, ...) {
 808cc06:	b40e      	push	{r1, r2, r3}
 808cc08:	b517      	push	{r0, r1, r2, r4, lr}
 808cc0a:	4604      	mov	r4, r0
 808cc0c:	ab05      	add	r3, sp, #20
 808cc0e:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, fmt);
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
 808cc12:	6901      	ldr	r1, [r0, #16]
    n_ += size;
}

void spark::JSONBufferWriter::printf(const char *fmt, ...) {
    va_list args;
    va_start(args, fmt);
 808cc14:	9301      	str	r3, [sp, #4]
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
 808cc16:	68e3      	ldr	r3, [r4, #12]
 808cc18:	6880      	ldr	r0, [r0, #8]
 808cc1a:	4299      	cmp	r1, r3
 808cc1c:	4408      	add	r0, r1
 808cc1e:	bf34      	ite	cc
 808cc20:	1a59      	subcc	r1, r3, r1
 808cc22:	2100      	movcs	r1, #0
 808cc24:	9b01      	ldr	r3, [sp, #4]
 808cc26:	f7fd ff2d 	bl	808aa84 <vsnprintf>
    va_end(args);
    n_ += n;
 808cc2a:	6923      	ldr	r3, [r4, #16]
 808cc2c:	4418      	add	r0, r3
 808cc2e:	6120      	str	r0, [r4, #16]
}
 808cc30:	b003      	add	sp, #12
 808cc32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808cc36:	b003      	add	sp, #12
 808cc38:	4770      	bx	lr

0808cc3a <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 808cc3a:	b513      	push	{r0, r1, r4, lr}
    write(&c, 1);
 808cc3c:	6802      	ldr	r2, [r0, #0]

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 808cc3e:	ab02      	add	r3, sp, #8
 808cc40:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
 808cc44:	6894      	ldr	r4, [r2, #8]
 808cc46:	4619      	mov	r1, r3
 808cc48:	2201      	movs	r2, #1
 808cc4a:	47a0      	blx	r4
}
 808cc4c:	b002      	add	sp, #8
 808cc4e:	bd10      	pop	{r4, pc}

0808cc50 <_ZN5spark10JSONWriter9endObjectEv>:
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
 808cc50:	b510      	push	{r4, lr}
 808cc52:	4604      	mov	r4, r0
    write('}');
 808cc54:	217d      	movs	r1, #125	; 0x7d
 808cc56:	f7ff fff0 	bl	808cc3a <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 808cc5a:	2301      	movs	r3, #1
 808cc5c:	7123      	strb	r3, [r4, #4]
    return *this;
}
 808cc5e:	4620      	mov	r0, r4
 808cc60:	bd10      	pop	{r4, pc}

0808cc62 <_ZN5spark10JSONWriter14writeSeparatorEv>:
    } else if (n > 0) {
        write(buf, n);
    }
}

void spark::JSONWriter::writeSeparator() {
 808cc62:	b508      	push	{r3, lr}
    switch (state_) {
 808cc64:	7903      	ldrb	r3, [r0, #4]
 808cc66:	2b01      	cmp	r3, #1
 808cc68:	d002      	beq.n	808cc70 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 808cc6a:	2b02      	cmp	r3, #2
 808cc6c:	d002      	beq.n	808cc74 <_ZN5spark10JSONWriter14writeSeparatorEv+0x12>
 808cc6e:	bd08      	pop	{r3, pc}
    case NEXT:
        write(',');
 808cc70:	212c      	movs	r1, #44	; 0x2c
 808cc72:	e000      	b.n	808cc76 <_ZN5spark10JSONWriter14writeSeparatorEv+0x14>
        break;
    case VALUE:
        write(':');
 808cc74:	213a      	movs	r1, #58	; 0x3a
 808cc76:	f7ff ffe0 	bl	808cc3a <_ZN5spark10JSONWriter5writeEc>
 808cc7a:	bd08      	pop	{r3, pc}

0808cc7c <_ZN5spark10JSONWriter11beginObjectEv>:
    write(']');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::beginObject() {
 808cc7c:	b510      	push	{r4, lr}
 808cc7e:	4604      	mov	r4, r0
    writeSeparator();
 808cc80:	f7ff ffef 	bl	808cc62 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 808cc84:	4620      	mov	r0, r4
 808cc86:	217b      	movs	r1, #123	; 0x7b
 808cc88:	f7ff ffd7 	bl	808cc3a <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 808cc8c:	2300      	movs	r3, #0
 808cc8e:	7123      	strb	r3, [r4, #4]
    return *this;
}
 808cc90:	4620      	mov	r0, r4
 808cc92:	bd10      	pop	{r4, pc}

0808cc94 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 808cc94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808cc96:	460d      	mov	r5, r1
 808cc98:	4617      	mov	r7, r2
    write('"');
 808cc9a:	2122      	movs	r1, #34	; 0x22
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 808cc9c:	4604      	mov	r4, r0
    write('"');
 808cc9e:	f7ff ffcc 	bl	808cc3a <_ZN5spark10JSONWriter5writeEc>
 808cca2:	462a      	mov	r2, r5
    const char* const end = str + size;
 808cca4:	4629      	mov	r1, r5
 808cca6:	442f      	add	r7, r5
    const char *s = str;
    while (s != end) {
 808cca8:	42ba      	cmp	r2, r7
 808ccaa:	d038      	beq.n	808cd1e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8a>
        const char c = *s;
 808ccac:	4616      	mov	r6, r2
 808ccae:	f816 5b01 	ldrb.w	r5, [r6], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
 808ccb2:	2d22      	cmp	r5, #34	; 0x22
 808ccb4:	d003      	beq.n	808ccbe <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
 808ccb6:	2d5c      	cmp	r5, #92	; 0x5c
 808ccb8:	d001      	beq.n	808ccbe <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
 808ccba:	2d1f      	cmp	r5, #31
 808ccbc:	d82d      	bhi.n	808cd1a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x86>
            write(str, s - str); // Write preceeding characters
 808ccbe:	6823      	ldr	r3, [r4, #0]
 808ccc0:	1a52      	subs	r2, r2, r1
 808ccc2:	689b      	ldr	r3, [r3, #8]
 808ccc4:	4620      	mov	r0, r4
 808ccc6:	4798      	blx	r3
            write('\\');
 808ccc8:	215c      	movs	r1, #92	; 0x5c
 808ccca:	4620      	mov	r0, r4
 808cccc:	f7ff ffb5 	bl	808cc3a <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 808ccd0:	2d0c      	cmp	r5, #12
 808ccd2:	d019      	beq.n	808cd08 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
 808ccd4:	d807      	bhi.n	808cce6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x52>
 808ccd6:	2d09      	cmp	r5, #9
 808ccd8:	d00f      	beq.n	808ccfa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
 808ccda:	2d0a      	cmp	r5, #10
 808ccdc:	d012      	beq.n	808cd04 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x70>
 808ccde:	2d08      	cmp	r5, #8
 808cce0:	d114      	bne.n	808cd0c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
 808cce2:	2162      	movs	r1, #98	; 0x62
 808cce4:	e00a      	b.n	808ccfc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
    while (s != end) {
        const char c = *s;
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
 808cce6:	2d22      	cmp	r5, #34	; 0x22
 808cce8:	d005      	beq.n	808ccf6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
 808ccea:	2d5c      	cmp	r5, #92	; 0x5c
 808ccec:	d003      	beq.n	808ccf6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
 808ccee:	2d0d      	cmp	r5, #13
 808ccf0:	d10c      	bne.n	808cd0c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
                break;
            case 0x0c: // Form feed
                write('f');
                break;
            case 0x0d: // Carriage return
                write('r');
 808ccf2:	2172      	movs	r1, #114	; 0x72
 808ccf4:	e002      	b.n	808ccfc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
            case '"':
            case '\\':
                write(c);
 808ccf6:	4629      	mov	r1, r5
 808ccf8:	e000      	b.n	808ccfc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x08: // Backspace
                write('b');
                break;
            case 0x09: // Tab
                write('t');
 808ccfa:	2174      	movs	r1, #116	; 0x74
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
 808ccfc:	4620      	mov	r0, r4
 808ccfe:	f7ff ff9c 	bl	808cc3a <_ZN5spark10JSONWriter5writeEc>
                break;
 808cd02:	e009      	b.n	808cd18 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
            case 0x09: // Tab
                write('t');
                break;
            case 0x0a: // Line feed
                write('n');
 808cd04:	216e      	movs	r1, #110	; 0x6e
 808cd06:	e7f9      	b.n	808ccfc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x0c: // Form feed
                write('f');
 808cd08:	2166      	movs	r1, #102	; 0x66
 808cd0a:	e7f7      	b.n	808ccfc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 808cd0c:	6823      	ldr	r3, [r4, #0]
 808cd0e:	462a      	mov	r2, r5
 808cd10:	68db      	ldr	r3, [r3, #12]
 808cd12:	4909      	ldr	r1, [pc, #36]	; (808cd38 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa4>)
 808cd14:	4620      	mov	r0, r4
 808cd16:	4798      	blx	r3
                break;
            }
            str = s + 1;
 808cd18:	4631      	mov	r1, r6

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
    write('"');
    const char* const end = str + size;
    const char *s = str;
    while (s != end) {
 808cd1a:	4632      	mov	r2, r6
 808cd1c:	e7c4      	b.n	808cca8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x14>
            }
            str = s + 1;
        }
        ++s;
    }
    if (s != str) {
 808cd1e:	4291      	cmp	r1, r2
 808cd20:	d004      	beq.n	808cd2c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x98>
        write(str, s - str); // Write remaining characters
 808cd22:	6823      	ldr	r3, [r4, #0]
 808cd24:	1a52      	subs	r2, r2, r1
 808cd26:	689d      	ldr	r5, [r3, #8]
 808cd28:	4620      	mov	r0, r4
 808cd2a:	47a8      	blx	r5
    }
    write('"');
 808cd2c:	2122      	movs	r1, #34	; 0x22
 808cd2e:	4620      	mov	r0, r4
 808cd30:	f7ff ff83 	bl	808cc3a <_ZN5spark10JSONWriter5writeEc>
 808cd34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808cd36:	bf00      	nop
 808cd38:	080945b1 	.word	0x080945b1

0808cd3c <_ZN5spark10JSONWriter4nameEPKcj>:
    write('}');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 808cd3c:	b570      	push	{r4, r5, r6, lr}
 808cd3e:	4604      	mov	r4, r0
 808cd40:	460d      	mov	r5, r1
 808cd42:	4616      	mov	r6, r2
    writeSeparator();
 808cd44:	f7ff ff8d 	bl	808cc62 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 808cd48:	4620      	mov	r0, r4
 808cd4a:	4632      	mov	r2, r6
 808cd4c:	4629      	mov	r1, r5
 808cd4e:	f7ff ffa1 	bl	808cc94 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 808cd52:	2302      	movs	r3, #2
 808cd54:	7123      	strb	r3, [r4, #4]
    return *this;
}
 808cd56:	4620      	mov	r0, r4
 808cd58:	bd70      	pop	{r4, r5, r6, pc}

0808cd5a <_ZN5spark10JSONWriter5valueEPKcj>:
    printf("%g", val);
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 808cd5a:	b570      	push	{r4, r5, r6, lr}
 808cd5c:	4604      	mov	r4, r0
 808cd5e:	460d      	mov	r5, r1
 808cd60:	4616      	mov	r6, r2
    writeSeparator();
 808cd62:	f7ff ff7e 	bl	808cc62 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 808cd66:	4620      	mov	r0, r4
 808cd68:	4632      	mov	r2, r6
 808cd6a:	4629      	mov	r1, r5
 808cd6c:	f7ff ff92 	bl	808cc94 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 808cd70:	2301      	movs	r3, #1
 808cd72:	7123      	strb	r3, [r4, #4]
    return *this;
}
 808cd74:	4620      	mov	r0, r4
 808cd76:	bd70      	pop	{r4, r5, r6, pc}

0808cd78 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 808cd78:	b510      	push	{r4, lr}
 808cd7a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 808cd7c:	480f      	ldr	r0, [pc, #60]	; (808cdbc <pinAvailable+0x44>)
 808cd7e:	f7fe f890 	bl	808aea2 <_ZN8SPIClass9isEnabledEv>
 808cd82:	b128      	cbz	r0, 808cd90 <pinAvailable+0x18>
 808cd84:	f1a4 030d 	sub.w	r3, r4, #13
 808cd88:	2b02      	cmp	r3, #2
 808cd8a:	d801      	bhi.n	808cd90 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 808cd8c:	2000      	movs	r0, #0
 808cd8e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 808cd90:	f000 f8c4 	bl	808cf1c <_Z19__fetch_global_Wirev>
 808cd94:	f7ff fea2 	bl	808cadc <_ZN7TwoWire9isEnabledEv>
 808cd98:	b108      	cbz	r0, 808cd9e <pinAvailable+0x26>
 808cd9a:	2c01      	cmp	r4, #1
 808cd9c:	d9f6      	bls.n	808cd8c <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 808cd9e:	f7ff fdfb 	bl	808c998 <_Z22__fetch_global_Serial1v>
 808cda2:	f7ff fdf6 	bl	808c992 <_ZN11USARTSerial9isEnabledEv>
 808cda6:	b118      	cbz	r0, 808cdb0 <pinAvailable+0x38>
 808cda8:	f1a4 0312 	sub.w	r3, r4, #18
 808cdac:	2b01      	cmp	r3, #1
 808cdae:	d9ed      	bls.n	808cd8c <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 808cdb0:	2c2e      	cmp	r4, #46	; 0x2e
 808cdb2:	bf8c      	ite	hi
 808cdb4:	2000      	movhi	r0, #0
 808cdb6:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 808cdb8:	bd10      	pop	{r4, pc}
 808cdba:	bf00      	nop
 808cdbc:	20001608 	.word	0x20001608

0808cdc0 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 808cdc0:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 808cdc2:	b538      	push	{r3, r4, r5, lr}
 808cdc4:	4604      	mov	r4, r0
 808cdc6:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 808cdc8:	d80a      	bhi.n	808cde0 <pinMode+0x20>
 808cdca:	29ff      	cmp	r1, #255	; 0xff
 808cdcc:	d008      	beq.n	808cde0 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 808cdce:	f7ff ffd3 	bl	808cd78 <pinAvailable>
 808cdd2:	b128      	cbz	r0, 808cde0 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 808cdd4:	4629      	mov	r1, r5
 808cdd6:	4620      	mov	r0, r4
}
 808cdd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 808cddc:	f7fd bb24 	b.w	808a428 <HAL_Pin_Mode>
 808cde0:	bd38      	pop	{r3, r4, r5, pc}

0808cde2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 808cde2:	b538      	push	{r3, r4, r5, lr}
 808cde4:	4604      	mov	r4, r0
 808cde6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 808cde8:	f7fd fb26 	bl	808a438 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 808cdec:	28ff      	cmp	r0, #255	; 0xff
 808cdee:	d010      	beq.n	808ce12 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 808cdf0:	2806      	cmp	r0, #6
 808cdf2:	d804      	bhi.n	808cdfe <digitalWrite+0x1c>
 808cdf4:	234d      	movs	r3, #77	; 0x4d
 808cdf6:	fa23 f000 	lsr.w	r0, r3, r0
 808cdfa:	07c3      	lsls	r3, r0, #31
 808cdfc:	d409      	bmi.n	808ce12 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 808cdfe:	4620      	mov	r0, r4
 808ce00:	f7ff ffba 	bl	808cd78 <pinAvailable>
 808ce04:	b128      	cbz	r0, 808ce12 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 808ce06:	4629      	mov	r1, r5
 808ce08:	4620      	mov	r0, r4
}
 808ce0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 808ce0e:	f7fd bb1b 	b.w	808a448 <HAL_GPIO_Write>
 808ce12:	bd38      	pop	{r3, r4, r5, pc}

0808ce14 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 808ce14:	b510      	push	{r4, lr}
 808ce16:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 808ce18:	f7fd fb0e 	bl	808a438 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 808ce1c:	3804      	subs	r0, #4
 808ce1e:	b2c0      	uxtb	r0, r0
 808ce20:	2801      	cmp	r0, #1
 808ce22:	d908      	bls.n	808ce36 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 808ce24:	4620      	mov	r0, r4
 808ce26:	f7ff ffa7 	bl	808cd78 <pinAvailable>
 808ce2a:	b120      	cbz	r0, 808ce36 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 808ce2c:	4620      	mov	r0, r4
}
 808ce2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 808ce32:	f7fd bb11 	b.w	808a458 <HAL_GPIO_Read>
}
 808ce36:	2000      	movs	r0, #0
 808ce38:	bd10      	pop	{r4, pc}

0808ce3a <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 808ce3a:	b510      	push	{r4, lr}
 808ce3c:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 808ce3e:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 808ce40:	bf9c      	itt	ls
 808ce42:	340a      	addls	r4, #10
 808ce44:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 808ce46:	4620      	mov	r0, r4
 808ce48:	f7ff ff96 	bl	808cd78 <pinAvailable>
 808ce4c:	b150      	cbz	r0, 808ce64 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 808ce4e:	2103      	movs	r1, #3
 808ce50:	4620      	mov	r0, r4
 808ce52:	f7fd fae1 	bl	808a418 <HAL_Validate_Pin_Function>
 808ce56:	2803      	cmp	r0, #3
 808ce58:	d104      	bne.n	808ce64 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 808ce5a:	4620      	mov	r0, r4
}
 808ce5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 808ce60:	f7fd bb1a 	b.w	808a498 <HAL_ADC_Read>
}
 808ce64:	2000      	movs	r0, #0
 808ce66:	bd10      	pop	{r4, pc}

0808ce68 <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 808ce68:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 808ce6a:	4e11      	ldr	r6, [pc, #68]	; (808ceb0 <_GLOBAL__sub_I_SPI+0x48>)
 808ce6c:	4d11      	ldr	r5, [pc, #68]	; (808ceb4 <_GLOBAL__sub_I_SPI+0x4c>)
 808ce6e:	4c12      	ldr	r4, [pc, #72]	; (808ceb8 <_GLOBAL__sub_I_SPI+0x50>)
 808ce70:	2100      	movs	r1, #0
 808ce72:	4630      	mov	r0, r6
 808ce74:	f7fd ff7c 	bl	808ad70 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 808ce78:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 808ce7a:	4e10      	ldr	r6, [pc, #64]	; (808cebc <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 808ce7c:	462a      	mov	r2, r5
 808ce7e:	4621      	mov	r1, r4
 808ce80:	f000 f88c 	bl	808cf9c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 808ce84:	2101      	movs	r1, #1
 808ce86:	4630      	mov	r0, r6
 808ce88:	f7fd ff72 	bl	808ad70 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 808ce8c:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 808ce8e:	4e0c      	ldr	r6, [pc, #48]	; (808cec0 <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 808ce90:	462a      	mov	r2, r5
 808ce92:	4621      	mov	r1, r4
 808ce94:	f000 f882 	bl	808cf9c <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 808ce98:	2102      	movs	r1, #2
 808ce9a:	4630      	mov	r0, r6
 808ce9c:	f7fd ff68 	bl	808ad70 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 808cea0:	462a      	mov	r2, r5
 808cea2:	4621      	mov	r1, r4
 808cea4:	4630      	mov	r0, r6
 808cea6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 808ceaa:	f000 b877 	b.w	808cf9c <__aeabi_atexit>
 808ceae:	bf00      	nop
 808ceb0:	20001608 	.word	0x20001608
 808ceb4:	200005d8 	.word	0x200005d8
 808ceb8:	0808ad61 	.word	0x0808ad61
 808cebc:	20001618 	.word	0x20001618
 808cec0:	20001628 	.word	0x20001628

0808cec4 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 808cec4:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 808cec6:	4c07      	ldr	r4, [pc, #28]	; (808cee4 <_Z21__fetch_global_EEPROMv+0x20>)
 808cec8:	6823      	ldr	r3, [r4, #0]
 808ceca:	07db      	lsls	r3, r3, #31
 808cecc:	d408      	bmi.n	808cee0 <_Z21__fetch_global_EEPROMv+0x1c>
 808cece:	4620      	mov	r0, r4
 808ced0:	f7f3 f8e7 	bl	80800a2 <__cxa_guard_acquire>
 808ced4:	b120      	cbz	r0, 808cee0 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 808ced6:	f7fd fb5f 	bl	808a598 <HAL_EEPROM_Init>
 808ceda:	4620      	mov	r0, r4
 808cedc:	f7f3 f8e6 	bl	80800ac <__cxa_guard_release>
	return eeprom;
}
 808cee0:	4801      	ldr	r0, [pc, #4]	; (808cee8 <_Z21__fetch_global_EEPROMv+0x24>)
 808cee2:	bd10      	pop	{r4, pc}
 808cee4:	2000163c 	.word	0x2000163c
 808cee8:	20001640 	.word	0x20001640

0808ceec <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 808ceec:	b513      	push	{r0, r1, r4, lr}
 808ceee:	4c08      	ldr	r4, [pc, #32]	; (808cf10 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 808cef0:	2300      	movs	r3, #0
 808cef2:	461a      	mov	r2, r3
 808cef4:	4619      	mov	r1, r3
 808cef6:	9300      	str	r3, [sp, #0]
 808cef8:	4620      	mov	r0, r4
 808cefa:	f7ff fb79 	bl	808c5f0 <_ZN9IPAddressC1Ehhhh>
 808cefe:	4620      	mov	r0, r4
 808cf00:	4a04      	ldr	r2, [pc, #16]	; (808cf14 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 808cf02:	4905      	ldr	r1, [pc, #20]	; (808cf18 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 808cf04:	b002      	add	sp, #8
 808cf06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808cf0a:	f000 b847 	b.w	808cf9c <__aeabi_atexit>
 808cf0e:	bf00      	nop
 808cf10:	20001644 	.word	0x20001644
 808cf14:	200005d8 	.word	0x200005d8
 808cf18:	0808c569 	.word	0x0808c569

0808cf1c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 808cf1c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 808cf1e:	4d0b      	ldr	r5, [pc, #44]	; (808cf4c <_Z19__fetch_global_Wirev+0x30>)
 808cf20:	6829      	ldr	r1, [r5, #0]
 808cf22:	f011 0401 	ands.w	r4, r1, #1
 808cf26:	d10f      	bne.n	808cf48 <_Z19__fetch_global_Wirev+0x2c>
 808cf28:	4628      	mov	r0, r5
 808cf2a:	f7f3 f8ba 	bl	80800a2 <__cxa_guard_acquire>
 808cf2e:	b158      	cbz	r0, 808cf48 <_Z19__fetch_global_Wirev+0x2c>
 808cf30:	4621      	mov	r1, r4
 808cf32:	4807      	ldr	r0, [pc, #28]	; (808cf50 <_Z19__fetch_global_Wirev+0x34>)
 808cf34:	f7ff fd96 	bl	808ca64 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 808cf38:	4628      	mov	r0, r5
 808cf3a:	f7f3 f8b7 	bl	80800ac <__cxa_guard_release>
 808cf3e:	4a05      	ldr	r2, [pc, #20]	; (808cf54 <_Z19__fetch_global_Wirev+0x38>)
 808cf40:	4905      	ldr	r1, [pc, #20]	; (808cf58 <_Z19__fetch_global_Wirev+0x3c>)
 808cf42:	4803      	ldr	r0, [pc, #12]	; (808cf50 <_Z19__fetch_global_Wirev+0x34>)
 808cf44:	f000 f82a 	bl	808cf9c <__aeabi_atexit>
	return wire;
}
 808cf48:	4801      	ldr	r0, [pc, #4]	; (808cf50 <_Z19__fetch_global_Wirev+0x34>)
 808cf4a:	bd38      	pop	{r3, r4, r5, pc}
 808cf4c:	2000164c 	.word	0x2000164c
 808cf50:	20001664 	.word	0x20001664
 808cf54:	200005d8 	.word	0x200005d8
 808cf58:	0808ca0d 	.word	0x0808ca0d

0808cf5c <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 808cf5c:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3);
 808cf5e:	4c0b      	ldr	r4, [pc, #44]	; (808cf8c <_Z20__fetch_global_Wire3v+0x30>)
 808cf60:	6823      	ldr	r3, [r4, #0]
 808cf62:	07db      	lsls	r3, r3, #31
 808cf64:	d40f      	bmi.n	808cf86 <_Z20__fetch_global_Wire3v+0x2a>
 808cf66:	4620      	mov	r0, r4
 808cf68:	f7f3 f89b 	bl	80800a2 <__cxa_guard_acquire>
 808cf6c:	b158      	cbz	r0, 808cf86 <_Z20__fetch_global_Wire3v+0x2a>
 808cf6e:	2102      	movs	r1, #2
 808cf70:	4807      	ldr	r0, [pc, #28]	; (808cf90 <_Z20__fetch_global_Wire3v+0x34>)
 808cf72:	f7ff fd77 	bl	808ca64 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 808cf76:	4620      	mov	r0, r4
 808cf78:	f7f3 f898 	bl	80800ac <__cxa_guard_release>
 808cf7c:	4a05      	ldr	r2, [pc, #20]	; (808cf94 <_Z20__fetch_global_Wire3v+0x38>)
 808cf7e:	4906      	ldr	r1, [pc, #24]	; (808cf98 <_Z20__fetch_global_Wire3v+0x3c>)
 808cf80:	4803      	ldr	r0, [pc, #12]	; (808cf90 <_Z20__fetch_global_Wire3v+0x34>)
 808cf82:	f000 f80b 	bl	808cf9c <__aeabi_atexit>
	return wire;
}
 808cf86:	4802      	ldr	r0, [pc, #8]	; (808cf90 <_Z20__fetch_global_Wire3v+0x34>)
 808cf88:	bd10      	pop	{r4, pc}
 808cf8a:	bf00      	nop
 808cf8c:	20001678 	.word	0x20001678
 808cf90:	20001650 	.word	0x20001650
 808cf94:	200005d8 	.word	0x200005d8
 808cf98:	0808ca0d 	.word	0x0808ca0d

0808cf9c <__aeabi_atexit>:
 808cf9c:	460b      	mov	r3, r1
 808cf9e:	4601      	mov	r1, r0
 808cfa0:	4618      	mov	r0, r3
 808cfa2:	f001 bb93 	b.w	808e6cc <__cxa_atexit>

0808cfa6 <_ZdlPvj>:
 808cfa6:	f7f3 b87a 	b.w	808009e <_ZdlPv>

0808cfaa <_ZSt25__throw_bad_function_callv>:
 808cfaa:	b508      	push	{r3, lr}
 808cfac:	f7fd fd72 	bl	808aa94 <abort>

0808cfb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 808cfb0:	4b18      	ldr	r3, [pc, #96]	; (808d014 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 808cfb2:	681a      	ldr	r2, [r3, #0]
 808cfb4:	07d1      	lsls	r1, r2, #31
 808cfb6:	bf5c      	itt	pl
 808cfb8:	2201      	movpl	r2, #1
 808cfba:	601a      	strpl	r2, [r3, #0]
 808cfbc:	4b16      	ldr	r3, [pc, #88]	; (808d018 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 808cfbe:	681a      	ldr	r2, [r3, #0]
 808cfc0:	07d2      	lsls	r2, r2, #31
 808cfc2:	bf5c      	itt	pl
 808cfc4:	2201      	movpl	r2, #1
 808cfc6:	601a      	strpl	r2, [r3, #0]
 808cfc8:	4b14      	ldr	r3, [pc, #80]	; (808d01c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 808cfca:	681a      	ldr	r2, [r3, #0]
 808cfcc:	07d0      	lsls	r0, r2, #31
 808cfce:	bf5c      	itt	pl
 808cfd0:	2201      	movpl	r2, #1
 808cfd2:	601a      	strpl	r2, [r3, #0]
 808cfd4:	4b12      	ldr	r3, [pc, #72]	; (808d020 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 808cfd6:	681a      	ldr	r2, [r3, #0]
 808cfd8:	07d1      	lsls	r1, r2, #31
 808cfda:	bf5c      	itt	pl
 808cfdc:	2201      	movpl	r2, #1
 808cfde:	601a      	strpl	r2, [r3, #0]
 808cfe0:	4b10      	ldr	r3, [pc, #64]	; (808d024 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 808cfe2:	681a      	ldr	r2, [r3, #0]
 808cfe4:	07d2      	lsls	r2, r2, #31
 808cfe6:	bf5c      	itt	pl
 808cfe8:	2201      	movpl	r2, #1
 808cfea:	601a      	strpl	r2, [r3, #0]
 808cfec:	4b0e      	ldr	r3, [pc, #56]	; (808d028 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 808cfee:	681a      	ldr	r2, [r3, #0]
 808cff0:	07d0      	lsls	r0, r2, #31
 808cff2:	bf5c      	itt	pl
 808cff4:	2201      	movpl	r2, #1
 808cff6:	601a      	strpl	r2, [r3, #0]
 808cff8:	4b0c      	ldr	r3, [pc, #48]	; (808d02c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 808cffa:	681a      	ldr	r2, [r3, #0]
 808cffc:	07d1      	lsls	r1, r2, #31
 808cffe:	bf5c      	itt	pl
 808d000:	2201      	movpl	r2, #1
 808d002:	601a      	strpl	r2, [r3, #0]
 808d004:	4b0a      	ldr	r3, [pc, #40]	; (808d030 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 808d006:	681a      	ldr	r2, [r3, #0]
 808d008:	07d2      	lsls	r2, r2, #31
 808d00a:	bf5c      	itt	pl
 808d00c:	2201      	movpl	r2, #1
 808d00e:	601a      	strpl	r2, [r3, #0]
 808d010:	4770      	bx	lr
 808d012:	bf00      	nop
 808d014:	20001698 	.word	0x20001698
 808d018:	20001694 	.word	0x20001694
 808d01c:	20001690 	.word	0x20001690
 808d020:	2000168c 	.word	0x2000168c
 808d024:	20001688 	.word	0x20001688
 808d028:	20001684 	.word	0x20001684
 808d02c:	20001680 	.word	0x20001680
 808d030:	2000167c 	.word	0x2000167c

0808d034 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 808d034:	4b24      	ldr	r3, [pc, #144]	; (808d0c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 808d036:	681a      	ldr	r2, [r3, #0]
 808d038:	07d0      	lsls	r0, r2, #31
 808d03a:	bf5c      	itt	pl
 808d03c:	2201      	movpl	r2, #1
 808d03e:	601a      	strpl	r2, [r3, #0]
 808d040:	4b22      	ldr	r3, [pc, #136]	; (808d0cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 808d042:	681a      	ldr	r2, [r3, #0]
 808d044:	07d1      	lsls	r1, r2, #31
 808d046:	bf5c      	itt	pl
 808d048:	2201      	movpl	r2, #1
 808d04a:	601a      	strpl	r2, [r3, #0]
 808d04c:	4b20      	ldr	r3, [pc, #128]	; (808d0d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 808d04e:	681a      	ldr	r2, [r3, #0]
 808d050:	07d2      	lsls	r2, r2, #31
 808d052:	bf5c      	itt	pl
 808d054:	2201      	movpl	r2, #1
 808d056:	601a      	strpl	r2, [r3, #0]
 808d058:	4b1e      	ldr	r3, [pc, #120]	; (808d0d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 808d05a:	681a      	ldr	r2, [r3, #0]
 808d05c:	07d0      	lsls	r0, r2, #31
 808d05e:	bf5c      	itt	pl
 808d060:	2201      	movpl	r2, #1
 808d062:	601a      	strpl	r2, [r3, #0]
 808d064:	4b1c      	ldr	r3, [pc, #112]	; (808d0d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 808d066:	681a      	ldr	r2, [r3, #0]
 808d068:	07d1      	lsls	r1, r2, #31
 808d06a:	bf5c      	itt	pl
 808d06c:	2201      	movpl	r2, #1
 808d06e:	601a      	strpl	r2, [r3, #0]
 808d070:	4b1a      	ldr	r3, [pc, #104]	; (808d0dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 808d072:	681a      	ldr	r2, [r3, #0]
 808d074:	07d2      	lsls	r2, r2, #31
 808d076:	bf5c      	itt	pl
 808d078:	2201      	movpl	r2, #1
 808d07a:	601a      	strpl	r2, [r3, #0]
 808d07c:	4b18      	ldr	r3, [pc, #96]	; (808d0e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 808d07e:	681a      	ldr	r2, [r3, #0]
 808d080:	07d0      	lsls	r0, r2, #31
 808d082:	bf5c      	itt	pl
 808d084:	2201      	movpl	r2, #1
 808d086:	601a      	strpl	r2, [r3, #0]
 808d088:	4b16      	ldr	r3, [pc, #88]	; (808d0e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 808d08a:	681a      	ldr	r2, [r3, #0]
 808d08c:	07d1      	lsls	r1, r2, #31
 808d08e:	bf5c      	itt	pl
 808d090:	2201      	movpl	r2, #1
 808d092:	601a      	strpl	r2, [r3, #0]
 808d094:	4b14      	ldr	r3, [pc, #80]	; (808d0e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 808d096:	681a      	ldr	r2, [r3, #0]
 808d098:	07d2      	lsls	r2, r2, #31
 808d09a:	bf5c      	itt	pl
 808d09c:	2201      	movpl	r2, #1
 808d09e:	601a      	strpl	r2, [r3, #0]
 808d0a0:	4b12      	ldr	r3, [pc, #72]	; (808d0ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 808d0a2:	681a      	ldr	r2, [r3, #0]
 808d0a4:	07d0      	lsls	r0, r2, #31
 808d0a6:	bf5c      	itt	pl
 808d0a8:	2201      	movpl	r2, #1
 808d0aa:	601a      	strpl	r2, [r3, #0]
 808d0ac:	4b10      	ldr	r3, [pc, #64]	; (808d0f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 808d0ae:	681a      	ldr	r2, [r3, #0]
 808d0b0:	07d1      	lsls	r1, r2, #31
 808d0b2:	bf5c      	itt	pl
 808d0b4:	2201      	movpl	r2, #1
 808d0b6:	601a      	strpl	r2, [r3, #0]
 808d0b8:	4b0e      	ldr	r3, [pc, #56]	; (808d0f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 808d0ba:	681a      	ldr	r2, [r3, #0]
 808d0bc:	07d2      	lsls	r2, r2, #31
 808d0be:	bf5c      	itt	pl
 808d0c0:	2201      	movpl	r2, #1
 808d0c2:	601a      	strpl	r2, [r3, #0]
 808d0c4:	4770      	bx	lr
 808d0c6:	bf00      	nop
 808d0c8:	200016c8 	.word	0x200016c8
 808d0cc:	200016c4 	.word	0x200016c4
 808d0d0:	200016c0 	.word	0x200016c0
 808d0d4:	200016bc 	.word	0x200016bc
 808d0d8:	200016b8 	.word	0x200016b8
 808d0dc:	200016b4 	.word	0x200016b4
 808d0e0:	200016b0 	.word	0x200016b0
 808d0e4:	200016ac 	.word	0x200016ac
 808d0e8:	200016a8 	.word	0x200016a8
 808d0ec:	200016a4 	.word	0x200016a4
 808d0f0:	200016a0 	.word	0x200016a0
 808d0f4:	2000169c 	.word	0x2000169c

0808d0f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 808d0f8:	4b24      	ldr	r3, [pc, #144]	; (808d18c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 808d0fa:	681a      	ldr	r2, [r3, #0]
 808d0fc:	07d0      	lsls	r0, r2, #31
 808d0fe:	bf5c      	itt	pl
 808d100:	2201      	movpl	r2, #1
 808d102:	601a      	strpl	r2, [r3, #0]
 808d104:	4b22      	ldr	r3, [pc, #136]	; (808d190 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 808d106:	681a      	ldr	r2, [r3, #0]
 808d108:	07d1      	lsls	r1, r2, #31
 808d10a:	bf5c      	itt	pl
 808d10c:	2201      	movpl	r2, #1
 808d10e:	601a      	strpl	r2, [r3, #0]
 808d110:	4b20      	ldr	r3, [pc, #128]	; (808d194 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 808d112:	681a      	ldr	r2, [r3, #0]
 808d114:	07d2      	lsls	r2, r2, #31
 808d116:	bf5c      	itt	pl
 808d118:	2201      	movpl	r2, #1
 808d11a:	601a      	strpl	r2, [r3, #0]
 808d11c:	4b1e      	ldr	r3, [pc, #120]	; (808d198 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 808d11e:	681a      	ldr	r2, [r3, #0]
 808d120:	07d0      	lsls	r0, r2, #31
 808d122:	bf5c      	itt	pl
 808d124:	2201      	movpl	r2, #1
 808d126:	601a      	strpl	r2, [r3, #0]
 808d128:	4b1c      	ldr	r3, [pc, #112]	; (808d19c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 808d12a:	681a      	ldr	r2, [r3, #0]
 808d12c:	07d1      	lsls	r1, r2, #31
 808d12e:	bf5c      	itt	pl
 808d130:	2201      	movpl	r2, #1
 808d132:	601a      	strpl	r2, [r3, #0]
 808d134:	4b1a      	ldr	r3, [pc, #104]	; (808d1a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 808d136:	681a      	ldr	r2, [r3, #0]
 808d138:	07d2      	lsls	r2, r2, #31
 808d13a:	bf5c      	itt	pl
 808d13c:	2201      	movpl	r2, #1
 808d13e:	601a      	strpl	r2, [r3, #0]
 808d140:	4b18      	ldr	r3, [pc, #96]	; (808d1a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 808d142:	681a      	ldr	r2, [r3, #0]
 808d144:	07d0      	lsls	r0, r2, #31
 808d146:	bf5c      	itt	pl
 808d148:	2201      	movpl	r2, #1
 808d14a:	601a      	strpl	r2, [r3, #0]
 808d14c:	4b16      	ldr	r3, [pc, #88]	; (808d1a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 808d14e:	681a      	ldr	r2, [r3, #0]
 808d150:	07d1      	lsls	r1, r2, #31
 808d152:	bf5c      	itt	pl
 808d154:	2201      	movpl	r2, #1
 808d156:	601a      	strpl	r2, [r3, #0]
 808d158:	4b14      	ldr	r3, [pc, #80]	; (808d1ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 808d15a:	681a      	ldr	r2, [r3, #0]
 808d15c:	07d2      	lsls	r2, r2, #31
 808d15e:	bf5c      	itt	pl
 808d160:	2201      	movpl	r2, #1
 808d162:	601a      	strpl	r2, [r3, #0]
 808d164:	4b12      	ldr	r3, [pc, #72]	; (808d1b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 808d166:	681a      	ldr	r2, [r3, #0]
 808d168:	07d0      	lsls	r0, r2, #31
 808d16a:	bf5c      	itt	pl
 808d16c:	2201      	movpl	r2, #1
 808d16e:	601a      	strpl	r2, [r3, #0]
 808d170:	4b10      	ldr	r3, [pc, #64]	; (808d1b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 808d172:	681a      	ldr	r2, [r3, #0]
 808d174:	07d1      	lsls	r1, r2, #31
 808d176:	bf5c      	itt	pl
 808d178:	2201      	movpl	r2, #1
 808d17a:	601a      	strpl	r2, [r3, #0]
 808d17c:	4b0e      	ldr	r3, [pc, #56]	; (808d1b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 808d17e:	681a      	ldr	r2, [r3, #0]
 808d180:	07d2      	lsls	r2, r2, #31
 808d182:	bf5c      	itt	pl
 808d184:	2201      	movpl	r2, #1
 808d186:	601a      	strpl	r2, [r3, #0]
 808d188:	4770      	bx	lr
 808d18a:	bf00      	nop
 808d18c:	200016f8 	.word	0x200016f8
 808d190:	200016f4 	.word	0x200016f4
 808d194:	200016f0 	.word	0x200016f0
 808d198:	200016ec 	.word	0x200016ec
 808d19c:	200016e8 	.word	0x200016e8
 808d1a0:	200016e4 	.word	0x200016e4
 808d1a4:	200016e0 	.word	0x200016e0
 808d1a8:	200016dc 	.word	0x200016dc
 808d1ac:	200016d8 	.word	0x200016d8
 808d1b0:	200016d4 	.word	0x200016d4
 808d1b4:	200016d0 	.word	0x200016d0
 808d1b8:	200016cc 	.word	0x200016cc

0808d1bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 808d1bc:	4b18      	ldr	r3, [pc, #96]	; (808d220 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 808d1be:	681a      	ldr	r2, [r3, #0]
 808d1c0:	07d1      	lsls	r1, r2, #31
 808d1c2:	bf5c      	itt	pl
 808d1c4:	2201      	movpl	r2, #1
 808d1c6:	601a      	strpl	r2, [r3, #0]
 808d1c8:	4b16      	ldr	r3, [pc, #88]	; (808d224 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 808d1ca:	681a      	ldr	r2, [r3, #0]
 808d1cc:	07d2      	lsls	r2, r2, #31
 808d1ce:	bf5c      	itt	pl
 808d1d0:	2201      	movpl	r2, #1
 808d1d2:	601a      	strpl	r2, [r3, #0]
 808d1d4:	4b14      	ldr	r3, [pc, #80]	; (808d228 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 808d1d6:	681a      	ldr	r2, [r3, #0]
 808d1d8:	07d0      	lsls	r0, r2, #31
 808d1da:	bf5c      	itt	pl
 808d1dc:	2201      	movpl	r2, #1
 808d1de:	601a      	strpl	r2, [r3, #0]
 808d1e0:	4b12      	ldr	r3, [pc, #72]	; (808d22c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 808d1e2:	681a      	ldr	r2, [r3, #0]
 808d1e4:	07d1      	lsls	r1, r2, #31
 808d1e6:	bf5c      	itt	pl
 808d1e8:	2201      	movpl	r2, #1
 808d1ea:	601a      	strpl	r2, [r3, #0]
 808d1ec:	4b10      	ldr	r3, [pc, #64]	; (808d230 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 808d1ee:	681a      	ldr	r2, [r3, #0]
 808d1f0:	07d2      	lsls	r2, r2, #31
 808d1f2:	bf5c      	itt	pl
 808d1f4:	2201      	movpl	r2, #1
 808d1f6:	601a      	strpl	r2, [r3, #0]
 808d1f8:	4b0e      	ldr	r3, [pc, #56]	; (808d234 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 808d1fa:	681a      	ldr	r2, [r3, #0]
 808d1fc:	07d0      	lsls	r0, r2, #31
 808d1fe:	bf5c      	itt	pl
 808d200:	2201      	movpl	r2, #1
 808d202:	601a      	strpl	r2, [r3, #0]
 808d204:	4b0c      	ldr	r3, [pc, #48]	; (808d238 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 808d206:	681a      	ldr	r2, [r3, #0]
 808d208:	07d1      	lsls	r1, r2, #31
 808d20a:	bf5c      	itt	pl
 808d20c:	2201      	movpl	r2, #1
 808d20e:	601a      	strpl	r2, [r3, #0]
 808d210:	4b0a      	ldr	r3, [pc, #40]	; (808d23c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 808d212:	681a      	ldr	r2, [r3, #0]
 808d214:	07d2      	lsls	r2, r2, #31
 808d216:	bf5c      	itt	pl
 808d218:	2201      	movpl	r2, #1
 808d21a:	601a      	strpl	r2, [r3, #0]
 808d21c:	4770      	bx	lr
 808d21e:	bf00      	nop
 808d220:	20001718 	.word	0x20001718
 808d224:	20001714 	.word	0x20001714
 808d228:	20001710 	.word	0x20001710
 808d22c:	2000170c 	.word	0x2000170c
 808d230:	20001708 	.word	0x20001708
 808d234:	20001704 	.word	0x20001704
 808d238:	20001700 	.word	0x20001700
 808d23c:	200016fc 	.word	0x200016fc

0808d240 <__aeabi_drsub>:
 808d240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 808d244:	e002      	b.n	808d24c <__adddf3>
 808d246:	bf00      	nop

0808d248 <__aeabi_dsub>:
 808d248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0808d24c <__adddf3>:
 808d24c:	b530      	push	{r4, r5, lr}
 808d24e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 808d252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 808d256:	ea94 0f05 	teq	r4, r5
 808d25a:	bf08      	it	eq
 808d25c:	ea90 0f02 	teqeq	r0, r2
 808d260:	bf1f      	itttt	ne
 808d262:	ea54 0c00 	orrsne.w	ip, r4, r0
 808d266:	ea55 0c02 	orrsne.w	ip, r5, r2
 808d26a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 808d26e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 808d272:	f000 80e2 	beq.w	808d43a <__adddf3+0x1ee>
 808d276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 808d27a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 808d27e:	bfb8      	it	lt
 808d280:	426d      	neglt	r5, r5
 808d282:	dd0c      	ble.n	808d29e <__adddf3+0x52>
 808d284:	442c      	add	r4, r5
 808d286:	ea80 0202 	eor.w	r2, r0, r2
 808d28a:	ea81 0303 	eor.w	r3, r1, r3
 808d28e:	ea82 0000 	eor.w	r0, r2, r0
 808d292:	ea83 0101 	eor.w	r1, r3, r1
 808d296:	ea80 0202 	eor.w	r2, r0, r2
 808d29a:	ea81 0303 	eor.w	r3, r1, r3
 808d29e:	2d36      	cmp	r5, #54	; 0x36
 808d2a0:	bf88      	it	hi
 808d2a2:	bd30      	pophi	{r4, r5, pc}
 808d2a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808d2a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 808d2ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 808d2b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 808d2b4:	d002      	beq.n	808d2bc <__adddf3+0x70>
 808d2b6:	4240      	negs	r0, r0
 808d2b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808d2bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 808d2c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 808d2c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 808d2c8:	d002      	beq.n	808d2d0 <__adddf3+0x84>
 808d2ca:	4252      	negs	r2, r2
 808d2cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808d2d0:	ea94 0f05 	teq	r4, r5
 808d2d4:	f000 80a7 	beq.w	808d426 <__adddf3+0x1da>
 808d2d8:	f1a4 0401 	sub.w	r4, r4, #1
 808d2dc:	f1d5 0e20 	rsbs	lr, r5, #32
 808d2e0:	db0d      	blt.n	808d2fe <__adddf3+0xb2>
 808d2e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 808d2e6:	fa22 f205 	lsr.w	r2, r2, r5
 808d2ea:	1880      	adds	r0, r0, r2
 808d2ec:	f141 0100 	adc.w	r1, r1, #0
 808d2f0:	fa03 f20e 	lsl.w	r2, r3, lr
 808d2f4:	1880      	adds	r0, r0, r2
 808d2f6:	fa43 f305 	asr.w	r3, r3, r5
 808d2fa:	4159      	adcs	r1, r3
 808d2fc:	e00e      	b.n	808d31c <__adddf3+0xd0>
 808d2fe:	f1a5 0520 	sub.w	r5, r5, #32
 808d302:	f10e 0e20 	add.w	lr, lr, #32
 808d306:	2a01      	cmp	r2, #1
 808d308:	fa03 fc0e 	lsl.w	ip, r3, lr
 808d30c:	bf28      	it	cs
 808d30e:	f04c 0c02 	orrcs.w	ip, ip, #2
 808d312:	fa43 f305 	asr.w	r3, r3, r5
 808d316:	18c0      	adds	r0, r0, r3
 808d318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 808d31c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808d320:	d507      	bpl.n	808d332 <__adddf3+0xe6>
 808d322:	f04f 0e00 	mov.w	lr, #0
 808d326:	f1dc 0c00 	rsbs	ip, ip, #0
 808d32a:	eb7e 0000 	sbcs.w	r0, lr, r0
 808d32e:	eb6e 0101 	sbc.w	r1, lr, r1
 808d332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 808d336:	d31b      	bcc.n	808d370 <__adddf3+0x124>
 808d338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 808d33c:	d30c      	bcc.n	808d358 <__adddf3+0x10c>
 808d33e:	0849      	lsrs	r1, r1, #1
 808d340:	ea5f 0030 	movs.w	r0, r0, rrx
 808d344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 808d348:	f104 0401 	add.w	r4, r4, #1
 808d34c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 808d350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 808d354:	f080 809a 	bcs.w	808d48c <__adddf3+0x240>
 808d358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 808d35c:	bf08      	it	eq
 808d35e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808d362:	f150 0000 	adcs.w	r0, r0, #0
 808d366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808d36a:	ea41 0105 	orr.w	r1, r1, r5
 808d36e:	bd30      	pop	{r4, r5, pc}
 808d370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 808d374:	4140      	adcs	r0, r0
 808d376:	eb41 0101 	adc.w	r1, r1, r1
 808d37a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808d37e:	f1a4 0401 	sub.w	r4, r4, #1
 808d382:	d1e9      	bne.n	808d358 <__adddf3+0x10c>
 808d384:	f091 0f00 	teq	r1, #0
 808d388:	bf04      	itt	eq
 808d38a:	4601      	moveq	r1, r0
 808d38c:	2000      	moveq	r0, #0
 808d38e:	fab1 f381 	clz	r3, r1
 808d392:	bf08      	it	eq
 808d394:	3320      	addeq	r3, #32
 808d396:	f1a3 030b 	sub.w	r3, r3, #11
 808d39a:	f1b3 0220 	subs.w	r2, r3, #32
 808d39e:	da0c      	bge.n	808d3ba <__adddf3+0x16e>
 808d3a0:	320c      	adds	r2, #12
 808d3a2:	dd08      	ble.n	808d3b6 <__adddf3+0x16a>
 808d3a4:	f102 0c14 	add.w	ip, r2, #20
 808d3a8:	f1c2 020c 	rsb	r2, r2, #12
 808d3ac:	fa01 f00c 	lsl.w	r0, r1, ip
 808d3b0:	fa21 f102 	lsr.w	r1, r1, r2
 808d3b4:	e00c      	b.n	808d3d0 <__adddf3+0x184>
 808d3b6:	f102 0214 	add.w	r2, r2, #20
 808d3ba:	bfd8      	it	le
 808d3bc:	f1c2 0c20 	rsble	ip, r2, #32
 808d3c0:	fa01 f102 	lsl.w	r1, r1, r2
 808d3c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 808d3c8:	bfdc      	itt	le
 808d3ca:	ea41 010c 	orrle.w	r1, r1, ip
 808d3ce:	4090      	lslle	r0, r2
 808d3d0:	1ae4      	subs	r4, r4, r3
 808d3d2:	bfa2      	ittt	ge
 808d3d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 808d3d8:	4329      	orrge	r1, r5
 808d3da:	bd30      	popge	{r4, r5, pc}
 808d3dc:	ea6f 0404 	mvn.w	r4, r4
 808d3e0:	3c1f      	subs	r4, #31
 808d3e2:	da1c      	bge.n	808d41e <__adddf3+0x1d2>
 808d3e4:	340c      	adds	r4, #12
 808d3e6:	dc0e      	bgt.n	808d406 <__adddf3+0x1ba>
 808d3e8:	f104 0414 	add.w	r4, r4, #20
 808d3ec:	f1c4 0220 	rsb	r2, r4, #32
 808d3f0:	fa20 f004 	lsr.w	r0, r0, r4
 808d3f4:	fa01 f302 	lsl.w	r3, r1, r2
 808d3f8:	ea40 0003 	orr.w	r0, r0, r3
 808d3fc:	fa21 f304 	lsr.w	r3, r1, r4
 808d400:	ea45 0103 	orr.w	r1, r5, r3
 808d404:	bd30      	pop	{r4, r5, pc}
 808d406:	f1c4 040c 	rsb	r4, r4, #12
 808d40a:	f1c4 0220 	rsb	r2, r4, #32
 808d40e:	fa20 f002 	lsr.w	r0, r0, r2
 808d412:	fa01 f304 	lsl.w	r3, r1, r4
 808d416:	ea40 0003 	orr.w	r0, r0, r3
 808d41a:	4629      	mov	r1, r5
 808d41c:	bd30      	pop	{r4, r5, pc}
 808d41e:	fa21 f004 	lsr.w	r0, r1, r4
 808d422:	4629      	mov	r1, r5
 808d424:	bd30      	pop	{r4, r5, pc}
 808d426:	f094 0f00 	teq	r4, #0
 808d42a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 808d42e:	bf06      	itte	eq
 808d430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 808d434:	3401      	addeq	r4, #1
 808d436:	3d01      	subne	r5, #1
 808d438:	e74e      	b.n	808d2d8 <__adddf3+0x8c>
 808d43a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 808d43e:	bf18      	it	ne
 808d440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 808d444:	d029      	beq.n	808d49a <__adddf3+0x24e>
 808d446:	ea94 0f05 	teq	r4, r5
 808d44a:	bf08      	it	eq
 808d44c:	ea90 0f02 	teqeq	r0, r2
 808d450:	d005      	beq.n	808d45e <__adddf3+0x212>
 808d452:	ea54 0c00 	orrs.w	ip, r4, r0
 808d456:	bf04      	itt	eq
 808d458:	4619      	moveq	r1, r3
 808d45a:	4610      	moveq	r0, r2
 808d45c:	bd30      	pop	{r4, r5, pc}
 808d45e:	ea91 0f03 	teq	r1, r3
 808d462:	bf1e      	ittt	ne
 808d464:	2100      	movne	r1, #0
 808d466:	2000      	movne	r0, #0
 808d468:	bd30      	popne	{r4, r5, pc}
 808d46a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 808d46e:	d105      	bne.n	808d47c <__adddf3+0x230>
 808d470:	0040      	lsls	r0, r0, #1
 808d472:	4149      	adcs	r1, r1
 808d474:	bf28      	it	cs
 808d476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 808d47a:	bd30      	pop	{r4, r5, pc}
 808d47c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 808d480:	bf3c      	itt	cc
 808d482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 808d486:	bd30      	popcc	{r4, r5, pc}
 808d488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808d48c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 808d490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 808d494:	f04f 0000 	mov.w	r0, #0
 808d498:	bd30      	pop	{r4, r5, pc}
 808d49a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 808d49e:	bf1a      	itte	ne
 808d4a0:	4619      	movne	r1, r3
 808d4a2:	4610      	movne	r0, r2
 808d4a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 808d4a8:	bf1c      	itt	ne
 808d4aa:	460b      	movne	r3, r1
 808d4ac:	4602      	movne	r2, r0
 808d4ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808d4b2:	bf06      	itte	eq
 808d4b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 808d4b8:	ea91 0f03 	teqeq	r1, r3
 808d4bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 808d4c0:	bd30      	pop	{r4, r5, pc}
 808d4c2:	bf00      	nop

0808d4c4 <__aeabi_ui2d>:
 808d4c4:	f090 0f00 	teq	r0, #0
 808d4c8:	bf04      	itt	eq
 808d4ca:	2100      	moveq	r1, #0
 808d4cc:	4770      	bxeq	lr
 808d4ce:	b530      	push	{r4, r5, lr}
 808d4d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808d4d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808d4d8:	f04f 0500 	mov.w	r5, #0
 808d4dc:	f04f 0100 	mov.w	r1, #0
 808d4e0:	e750      	b.n	808d384 <__adddf3+0x138>
 808d4e2:	bf00      	nop

0808d4e4 <__aeabi_i2d>:
 808d4e4:	f090 0f00 	teq	r0, #0
 808d4e8:	bf04      	itt	eq
 808d4ea:	2100      	moveq	r1, #0
 808d4ec:	4770      	bxeq	lr
 808d4ee:	b530      	push	{r4, r5, lr}
 808d4f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808d4f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808d4f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 808d4fc:	bf48      	it	mi
 808d4fe:	4240      	negmi	r0, r0
 808d500:	f04f 0100 	mov.w	r1, #0
 808d504:	e73e      	b.n	808d384 <__adddf3+0x138>
 808d506:	bf00      	nop

0808d508 <__aeabi_f2d>:
 808d508:	0042      	lsls	r2, r0, #1
 808d50a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 808d50e:	ea4f 0131 	mov.w	r1, r1, rrx
 808d512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 808d516:	bf1f      	itttt	ne
 808d518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 808d51c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 808d520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 808d524:	4770      	bxne	lr
 808d526:	f092 0f00 	teq	r2, #0
 808d52a:	bf14      	ite	ne
 808d52c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 808d530:	4770      	bxeq	lr
 808d532:	b530      	push	{r4, r5, lr}
 808d534:	f44f 7460 	mov.w	r4, #896	; 0x380
 808d538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808d53c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 808d540:	e720      	b.n	808d384 <__adddf3+0x138>
 808d542:	bf00      	nop

0808d544 <__aeabi_ul2d>:
 808d544:	ea50 0201 	orrs.w	r2, r0, r1
 808d548:	bf08      	it	eq
 808d54a:	4770      	bxeq	lr
 808d54c:	b530      	push	{r4, r5, lr}
 808d54e:	f04f 0500 	mov.w	r5, #0
 808d552:	e00a      	b.n	808d56a <__aeabi_l2d+0x16>

0808d554 <__aeabi_l2d>:
 808d554:	ea50 0201 	orrs.w	r2, r0, r1
 808d558:	bf08      	it	eq
 808d55a:	4770      	bxeq	lr
 808d55c:	b530      	push	{r4, r5, lr}
 808d55e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 808d562:	d502      	bpl.n	808d56a <__aeabi_l2d+0x16>
 808d564:	4240      	negs	r0, r0
 808d566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808d56a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808d56e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808d572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 808d576:	f43f aedc 	beq.w	808d332 <__adddf3+0xe6>
 808d57a:	f04f 0203 	mov.w	r2, #3
 808d57e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808d582:	bf18      	it	ne
 808d584:	3203      	addne	r2, #3
 808d586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808d58a:	bf18      	it	ne
 808d58c:	3203      	addne	r2, #3
 808d58e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 808d592:	f1c2 0320 	rsb	r3, r2, #32
 808d596:	fa00 fc03 	lsl.w	ip, r0, r3
 808d59a:	fa20 f002 	lsr.w	r0, r0, r2
 808d59e:	fa01 fe03 	lsl.w	lr, r1, r3
 808d5a2:	ea40 000e 	orr.w	r0, r0, lr
 808d5a6:	fa21 f102 	lsr.w	r1, r1, r2
 808d5aa:	4414      	add	r4, r2
 808d5ac:	e6c1      	b.n	808d332 <__adddf3+0xe6>
 808d5ae:	bf00      	nop

0808d5b0 <__aeabi_dmul>:
 808d5b0:	b570      	push	{r4, r5, r6, lr}
 808d5b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808d5b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808d5ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808d5be:	bf1d      	ittte	ne
 808d5c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 808d5c4:	ea94 0f0c 	teqne	r4, ip
 808d5c8:	ea95 0f0c 	teqne	r5, ip
 808d5cc:	f000 f8de 	bleq	808d78c <__aeabi_dmul+0x1dc>
 808d5d0:	442c      	add	r4, r5
 808d5d2:	ea81 0603 	eor.w	r6, r1, r3
 808d5d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 808d5da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 808d5de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 808d5e2:	bf18      	it	ne
 808d5e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 808d5e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808d5ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 808d5f0:	d038      	beq.n	808d664 <__aeabi_dmul+0xb4>
 808d5f2:	fba0 ce02 	umull	ip, lr, r0, r2
 808d5f6:	f04f 0500 	mov.w	r5, #0
 808d5fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 808d5fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 808d602:	fbe0 e503 	umlal	lr, r5, r0, r3
 808d606:	f04f 0600 	mov.w	r6, #0
 808d60a:	fbe1 5603 	umlal	r5, r6, r1, r3
 808d60e:	f09c 0f00 	teq	ip, #0
 808d612:	bf18      	it	ne
 808d614:	f04e 0e01 	orrne.w	lr, lr, #1
 808d618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 808d61c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 808d620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 808d624:	d204      	bcs.n	808d630 <__aeabi_dmul+0x80>
 808d626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 808d62a:	416d      	adcs	r5, r5
 808d62c:	eb46 0606 	adc.w	r6, r6, r6
 808d630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 808d634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 808d638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 808d63c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 808d640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 808d644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808d648:	bf88      	it	hi
 808d64a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 808d64e:	d81e      	bhi.n	808d68e <__aeabi_dmul+0xde>
 808d650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 808d654:	bf08      	it	eq
 808d656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 808d65a:	f150 0000 	adcs.w	r0, r0, #0
 808d65e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808d662:	bd70      	pop	{r4, r5, r6, pc}
 808d664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 808d668:	ea46 0101 	orr.w	r1, r6, r1
 808d66c:	ea40 0002 	orr.w	r0, r0, r2
 808d670:	ea81 0103 	eor.w	r1, r1, r3
 808d674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 808d678:	bfc2      	ittt	gt
 808d67a:	ebd4 050c 	rsbsgt	r5, r4, ip
 808d67e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808d682:	bd70      	popgt	{r4, r5, r6, pc}
 808d684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808d688:	f04f 0e00 	mov.w	lr, #0
 808d68c:	3c01      	subs	r4, #1
 808d68e:	f300 80ab 	bgt.w	808d7e8 <__aeabi_dmul+0x238>
 808d692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 808d696:	bfde      	ittt	le
 808d698:	2000      	movle	r0, #0
 808d69a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 808d69e:	bd70      	pople	{r4, r5, r6, pc}
 808d6a0:	f1c4 0400 	rsb	r4, r4, #0
 808d6a4:	3c20      	subs	r4, #32
 808d6a6:	da35      	bge.n	808d714 <__aeabi_dmul+0x164>
 808d6a8:	340c      	adds	r4, #12
 808d6aa:	dc1b      	bgt.n	808d6e4 <__aeabi_dmul+0x134>
 808d6ac:	f104 0414 	add.w	r4, r4, #20
 808d6b0:	f1c4 0520 	rsb	r5, r4, #32
 808d6b4:	fa00 f305 	lsl.w	r3, r0, r5
 808d6b8:	fa20 f004 	lsr.w	r0, r0, r4
 808d6bc:	fa01 f205 	lsl.w	r2, r1, r5
 808d6c0:	ea40 0002 	orr.w	r0, r0, r2
 808d6c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 808d6c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 808d6cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 808d6d0:	fa21 f604 	lsr.w	r6, r1, r4
 808d6d4:	eb42 0106 	adc.w	r1, r2, r6
 808d6d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808d6dc:	bf08      	it	eq
 808d6de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808d6e2:	bd70      	pop	{r4, r5, r6, pc}
 808d6e4:	f1c4 040c 	rsb	r4, r4, #12
 808d6e8:	f1c4 0520 	rsb	r5, r4, #32
 808d6ec:	fa00 f304 	lsl.w	r3, r0, r4
 808d6f0:	fa20 f005 	lsr.w	r0, r0, r5
 808d6f4:	fa01 f204 	lsl.w	r2, r1, r4
 808d6f8:	ea40 0002 	orr.w	r0, r0, r2
 808d6fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808d700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 808d704:	f141 0100 	adc.w	r1, r1, #0
 808d708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808d70c:	bf08      	it	eq
 808d70e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808d712:	bd70      	pop	{r4, r5, r6, pc}
 808d714:	f1c4 0520 	rsb	r5, r4, #32
 808d718:	fa00 f205 	lsl.w	r2, r0, r5
 808d71c:	ea4e 0e02 	orr.w	lr, lr, r2
 808d720:	fa20 f304 	lsr.w	r3, r0, r4
 808d724:	fa01 f205 	lsl.w	r2, r1, r5
 808d728:	ea43 0302 	orr.w	r3, r3, r2
 808d72c:	fa21 f004 	lsr.w	r0, r1, r4
 808d730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808d734:	fa21 f204 	lsr.w	r2, r1, r4
 808d738:	ea20 0002 	bic.w	r0, r0, r2
 808d73c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 808d740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808d744:	bf08      	it	eq
 808d746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808d74a:	bd70      	pop	{r4, r5, r6, pc}
 808d74c:	f094 0f00 	teq	r4, #0
 808d750:	d10f      	bne.n	808d772 <__aeabi_dmul+0x1c2>
 808d752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 808d756:	0040      	lsls	r0, r0, #1
 808d758:	eb41 0101 	adc.w	r1, r1, r1
 808d75c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808d760:	bf08      	it	eq
 808d762:	3c01      	subeq	r4, #1
 808d764:	d0f7      	beq.n	808d756 <__aeabi_dmul+0x1a6>
 808d766:	ea41 0106 	orr.w	r1, r1, r6
 808d76a:	f095 0f00 	teq	r5, #0
 808d76e:	bf18      	it	ne
 808d770:	4770      	bxne	lr
 808d772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 808d776:	0052      	lsls	r2, r2, #1
 808d778:	eb43 0303 	adc.w	r3, r3, r3
 808d77c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 808d780:	bf08      	it	eq
 808d782:	3d01      	subeq	r5, #1
 808d784:	d0f7      	beq.n	808d776 <__aeabi_dmul+0x1c6>
 808d786:	ea43 0306 	orr.w	r3, r3, r6
 808d78a:	4770      	bx	lr
 808d78c:	ea94 0f0c 	teq	r4, ip
 808d790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808d794:	bf18      	it	ne
 808d796:	ea95 0f0c 	teqne	r5, ip
 808d79a:	d00c      	beq.n	808d7b6 <__aeabi_dmul+0x206>
 808d79c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808d7a0:	bf18      	it	ne
 808d7a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808d7a6:	d1d1      	bne.n	808d74c <__aeabi_dmul+0x19c>
 808d7a8:	ea81 0103 	eor.w	r1, r1, r3
 808d7ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808d7b0:	f04f 0000 	mov.w	r0, #0
 808d7b4:	bd70      	pop	{r4, r5, r6, pc}
 808d7b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808d7ba:	bf06      	itte	eq
 808d7bc:	4610      	moveq	r0, r2
 808d7be:	4619      	moveq	r1, r3
 808d7c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808d7c4:	d019      	beq.n	808d7fa <__aeabi_dmul+0x24a>
 808d7c6:	ea94 0f0c 	teq	r4, ip
 808d7ca:	d102      	bne.n	808d7d2 <__aeabi_dmul+0x222>
 808d7cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 808d7d0:	d113      	bne.n	808d7fa <__aeabi_dmul+0x24a>
 808d7d2:	ea95 0f0c 	teq	r5, ip
 808d7d6:	d105      	bne.n	808d7e4 <__aeabi_dmul+0x234>
 808d7d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 808d7dc:	bf1c      	itt	ne
 808d7de:	4610      	movne	r0, r2
 808d7e0:	4619      	movne	r1, r3
 808d7e2:	d10a      	bne.n	808d7fa <__aeabi_dmul+0x24a>
 808d7e4:	ea81 0103 	eor.w	r1, r1, r3
 808d7e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808d7ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808d7f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 808d7f4:	f04f 0000 	mov.w	r0, #0
 808d7f8:	bd70      	pop	{r4, r5, r6, pc}
 808d7fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808d7fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 808d802:	bd70      	pop	{r4, r5, r6, pc}

0808d804 <__aeabi_ddiv>:
 808d804:	b570      	push	{r4, r5, r6, lr}
 808d806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808d80a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808d80e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808d812:	bf1d      	ittte	ne
 808d814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 808d818:	ea94 0f0c 	teqne	r4, ip
 808d81c:	ea95 0f0c 	teqne	r5, ip
 808d820:	f000 f8a7 	bleq	808d972 <__aeabi_ddiv+0x16e>
 808d824:	eba4 0405 	sub.w	r4, r4, r5
 808d828:	ea81 0e03 	eor.w	lr, r1, r3
 808d82c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808d830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 808d834:	f000 8088 	beq.w	808d948 <__aeabi_ddiv+0x144>
 808d838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 808d83c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 808d840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 808d844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 808d848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 808d84c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 808d850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 808d854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 808d858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 808d85c:	429d      	cmp	r5, r3
 808d85e:	bf08      	it	eq
 808d860:	4296      	cmpeq	r6, r2
 808d862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 808d866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 808d86a:	d202      	bcs.n	808d872 <__aeabi_ddiv+0x6e>
 808d86c:	085b      	lsrs	r3, r3, #1
 808d86e:	ea4f 0232 	mov.w	r2, r2, rrx
 808d872:	1ab6      	subs	r6, r6, r2
 808d874:	eb65 0503 	sbc.w	r5, r5, r3
 808d878:	085b      	lsrs	r3, r3, #1
 808d87a:	ea4f 0232 	mov.w	r2, r2, rrx
 808d87e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 808d882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 808d886:	ebb6 0e02 	subs.w	lr, r6, r2
 808d88a:	eb75 0e03 	sbcs.w	lr, r5, r3
 808d88e:	bf22      	ittt	cs
 808d890:	1ab6      	subcs	r6, r6, r2
 808d892:	4675      	movcs	r5, lr
 808d894:	ea40 000c 	orrcs.w	r0, r0, ip
 808d898:	085b      	lsrs	r3, r3, #1
 808d89a:	ea4f 0232 	mov.w	r2, r2, rrx
 808d89e:	ebb6 0e02 	subs.w	lr, r6, r2
 808d8a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 808d8a6:	bf22      	ittt	cs
 808d8a8:	1ab6      	subcs	r6, r6, r2
 808d8aa:	4675      	movcs	r5, lr
 808d8ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808d8b0:	085b      	lsrs	r3, r3, #1
 808d8b2:	ea4f 0232 	mov.w	r2, r2, rrx
 808d8b6:	ebb6 0e02 	subs.w	lr, r6, r2
 808d8ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 808d8be:	bf22      	ittt	cs
 808d8c0:	1ab6      	subcs	r6, r6, r2
 808d8c2:	4675      	movcs	r5, lr
 808d8c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808d8c8:	085b      	lsrs	r3, r3, #1
 808d8ca:	ea4f 0232 	mov.w	r2, r2, rrx
 808d8ce:	ebb6 0e02 	subs.w	lr, r6, r2
 808d8d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 808d8d6:	bf22      	ittt	cs
 808d8d8:	1ab6      	subcs	r6, r6, r2
 808d8da:	4675      	movcs	r5, lr
 808d8dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808d8e0:	ea55 0e06 	orrs.w	lr, r5, r6
 808d8e4:	d018      	beq.n	808d918 <__aeabi_ddiv+0x114>
 808d8e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 808d8ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 808d8ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 808d8f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 808d8f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 808d8fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 808d8fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 808d902:	d1c0      	bne.n	808d886 <__aeabi_ddiv+0x82>
 808d904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808d908:	d10b      	bne.n	808d922 <__aeabi_ddiv+0x11e>
 808d90a:	ea41 0100 	orr.w	r1, r1, r0
 808d90e:	f04f 0000 	mov.w	r0, #0
 808d912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 808d916:	e7b6      	b.n	808d886 <__aeabi_ddiv+0x82>
 808d918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808d91c:	bf04      	itt	eq
 808d91e:	4301      	orreq	r1, r0
 808d920:	2000      	moveq	r0, #0
 808d922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808d926:	bf88      	it	hi
 808d928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 808d92c:	f63f aeaf 	bhi.w	808d68e <__aeabi_dmul+0xde>
 808d930:	ebb5 0c03 	subs.w	ip, r5, r3
 808d934:	bf04      	itt	eq
 808d936:	ebb6 0c02 	subseq.w	ip, r6, r2
 808d93a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808d93e:	f150 0000 	adcs.w	r0, r0, #0
 808d942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808d946:	bd70      	pop	{r4, r5, r6, pc}
 808d948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 808d94c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 808d950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 808d954:	bfc2      	ittt	gt
 808d956:	ebd4 050c 	rsbsgt	r5, r4, ip
 808d95a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808d95e:	bd70      	popgt	{r4, r5, r6, pc}
 808d960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808d964:	f04f 0e00 	mov.w	lr, #0
 808d968:	3c01      	subs	r4, #1
 808d96a:	e690      	b.n	808d68e <__aeabi_dmul+0xde>
 808d96c:	ea45 0e06 	orr.w	lr, r5, r6
 808d970:	e68d      	b.n	808d68e <__aeabi_dmul+0xde>
 808d972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808d976:	ea94 0f0c 	teq	r4, ip
 808d97a:	bf08      	it	eq
 808d97c:	ea95 0f0c 	teqeq	r5, ip
 808d980:	f43f af3b 	beq.w	808d7fa <__aeabi_dmul+0x24a>
 808d984:	ea94 0f0c 	teq	r4, ip
 808d988:	d10a      	bne.n	808d9a0 <__aeabi_ddiv+0x19c>
 808d98a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808d98e:	f47f af34 	bne.w	808d7fa <__aeabi_dmul+0x24a>
 808d992:	ea95 0f0c 	teq	r5, ip
 808d996:	f47f af25 	bne.w	808d7e4 <__aeabi_dmul+0x234>
 808d99a:	4610      	mov	r0, r2
 808d99c:	4619      	mov	r1, r3
 808d99e:	e72c      	b.n	808d7fa <__aeabi_dmul+0x24a>
 808d9a0:	ea95 0f0c 	teq	r5, ip
 808d9a4:	d106      	bne.n	808d9b4 <__aeabi_ddiv+0x1b0>
 808d9a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808d9aa:	f43f aefd 	beq.w	808d7a8 <__aeabi_dmul+0x1f8>
 808d9ae:	4610      	mov	r0, r2
 808d9b0:	4619      	mov	r1, r3
 808d9b2:	e722      	b.n	808d7fa <__aeabi_dmul+0x24a>
 808d9b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808d9b8:	bf18      	it	ne
 808d9ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808d9be:	f47f aec5 	bne.w	808d74c <__aeabi_dmul+0x19c>
 808d9c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 808d9c6:	f47f af0d 	bne.w	808d7e4 <__aeabi_dmul+0x234>
 808d9ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 808d9ce:	f47f aeeb 	bne.w	808d7a8 <__aeabi_dmul+0x1f8>
 808d9d2:	e712      	b.n	808d7fa <__aeabi_dmul+0x24a>

0808d9d4 <__gedf2>:
 808d9d4:	f04f 3cff 	mov.w	ip, #4294967295
 808d9d8:	e006      	b.n	808d9e8 <__cmpdf2+0x4>
 808d9da:	bf00      	nop

0808d9dc <__ledf2>:
 808d9dc:	f04f 0c01 	mov.w	ip, #1
 808d9e0:	e002      	b.n	808d9e8 <__cmpdf2+0x4>
 808d9e2:	bf00      	nop

0808d9e4 <__cmpdf2>:
 808d9e4:	f04f 0c01 	mov.w	ip, #1
 808d9e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 808d9ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808d9f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808d9f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808d9f8:	bf18      	it	ne
 808d9fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 808d9fe:	d01b      	beq.n	808da38 <__cmpdf2+0x54>
 808da00:	b001      	add	sp, #4
 808da02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 808da06:	bf0c      	ite	eq
 808da08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 808da0c:	ea91 0f03 	teqne	r1, r3
 808da10:	bf02      	ittt	eq
 808da12:	ea90 0f02 	teqeq	r0, r2
 808da16:	2000      	moveq	r0, #0
 808da18:	4770      	bxeq	lr
 808da1a:	f110 0f00 	cmn.w	r0, #0
 808da1e:	ea91 0f03 	teq	r1, r3
 808da22:	bf58      	it	pl
 808da24:	4299      	cmppl	r1, r3
 808da26:	bf08      	it	eq
 808da28:	4290      	cmpeq	r0, r2
 808da2a:	bf2c      	ite	cs
 808da2c:	17d8      	asrcs	r0, r3, #31
 808da2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 808da32:	f040 0001 	orr.w	r0, r0, #1
 808da36:	4770      	bx	lr
 808da38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808da3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808da40:	d102      	bne.n	808da48 <__cmpdf2+0x64>
 808da42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808da46:	d107      	bne.n	808da58 <__cmpdf2+0x74>
 808da48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808da4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808da50:	d1d6      	bne.n	808da00 <__cmpdf2+0x1c>
 808da52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808da56:	d0d3      	beq.n	808da00 <__cmpdf2+0x1c>
 808da58:	f85d 0b04 	ldr.w	r0, [sp], #4
 808da5c:	4770      	bx	lr
 808da5e:	bf00      	nop

0808da60 <__aeabi_cdrcmple>:
 808da60:	4684      	mov	ip, r0
 808da62:	4610      	mov	r0, r2
 808da64:	4662      	mov	r2, ip
 808da66:	468c      	mov	ip, r1
 808da68:	4619      	mov	r1, r3
 808da6a:	4663      	mov	r3, ip
 808da6c:	e000      	b.n	808da70 <__aeabi_cdcmpeq>
 808da6e:	bf00      	nop

0808da70 <__aeabi_cdcmpeq>:
 808da70:	b501      	push	{r0, lr}
 808da72:	f7ff ffb7 	bl	808d9e4 <__cmpdf2>
 808da76:	2800      	cmp	r0, #0
 808da78:	bf48      	it	mi
 808da7a:	f110 0f00 	cmnmi.w	r0, #0
 808da7e:	bd01      	pop	{r0, pc}

0808da80 <__aeabi_dcmpeq>:
 808da80:	f84d ed08 	str.w	lr, [sp, #-8]!
 808da84:	f7ff fff4 	bl	808da70 <__aeabi_cdcmpeq>
 808da88:	bf0c      	ite	eq
 808da8a:	2001      	moveq	r0, #1
 808da8c:	2000      	movne	r0, #0
 808da8e:	f85d fb08 	ldr.w	pc, [sp], #8
 808da92:	bf00      	nop

0808da94 <__aeabi_dcmplt>:
 808da94:	f84d ed08 	str.w	lr, [sp, #-8]!
 808da98:	f7ff ffea 	bl	808da70 <__aeabi_cdcmpeq>
 808da9c:	bf34      	ite	cc
 808da9e:	2001      	movcc	r0, #1
 808daa0:	2000      	movcs	r0, #0
 808daa2:	f85d fb08 	ldr.w	pc, [sp], #8
 808daa6:	bf00      	nop

0808daa8 <__aeabi_dcmple>:
 808daa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 808daac:	f7ff ffe0 	bl	808da70 <__aeabi_cdcmpeq>
 808dab0:	bf94      	ite	ls
 808dab2:	2001      	movls	r0, #1
 808dab4:	2000      	movhi	r0, #0
 808dab6:	f85d fb08 	ldr.w	pc, [sp], #8
 808daba:	bf00      	nop

0808dabc <__aeabi_dcmpge>:
 808dabc:	f84d ed08 	str.w	lr, [sp, #-8]!
 808dac0:	f7ff ffce 	bl	808da60 <__aeabi_cdrcmple>
 808dac4:	bf94      	ite	ls
 808dac6:	2001      	movls	r0, #1
 808dac8:	2000      	movhi	r0, #0
 808daca:	f85d fb08 	ldr.w	pc, [sp], #8
 808dace:	bf00      	nop

0808dad0 <__aeabi_dcmpgt>:
 808dad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 808dad4:	f7ff ffc4 	bl	808da60 <__aeabi_cdrcmple>
 808dad8:	bf34      	ite	cc
 808dada:	2001      	movcc	r0, #1
 808dadc:	2000      	movcs	r0, #0
 808dade:	f85d fb08 	ldr.w	pc, [sp], #8
 808dae2:	bf00      	nop

0808dae4 <__aeabi_dcmpun>:
 808dae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808dae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808daec:	d102      	bne.n	808daf4 <__aeabi_dcmpun+0x10>
 808daee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808daf2:	d10a      	bne.n	808db0a <__aeabi_dcmpun+0x26>
 808daf4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808daf8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808dafc:	d102      	bne.n	808db04 <__aeabi_dcmpun+0x20>
 808dafe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808db02:	d102      	bne.n	808db0a <__aeabi_dcmpun+0x26>
 808db04:	f04f 0000 	mov.w	r0, #0
 808db08:	4770      	bx	lr
 808db0a:	f04f 0001 	mov.w	r0, #1
 808db0e:	4770      	bx	lr

0808db10 <__aeabi_d2iz>:
 808db10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808db14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 808db18:	d215      	bcs.n	808db46 <__aeabi_d2iz+0x36>
 808db1a:	d511      	bpl.n	808db40 <__aeabi_d2iz+0x30>
 808db1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 808db20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 808db24:	d912      	bls.n	808db4c <__aeabi_d2iz+0x3c>
 808db26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808db2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808db2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808db32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808db36:	fa23 f002 	lsr.w	r0, r3, r2
 808db3a:	bf18      	it	ne
 808db3c:	4240      	negne	r0, r0
 808db3e:	4770      	bx	lr
 808db40:	f04f 0000 	mov.w	r0, #0
 808db44:	4770      	bx	lr
 808db46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808db4a:	d105      	bne.n	808db58 <__aeabi_d2iz+0x48>
 808db4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 808db50:	bf08      	it	eq
 808db52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808db56:	4770      	bx	lr
 808db58:	f04f 0000 	mov.w	r0, #0
 808db5c:	4770      	bx	lr
 808db5e:	bf00      	nop

0808db60 <__aeabi_d2uiz>:
 808db60:	004a      	lsls	r2, r1, #1
 808db62:	d211      	bcs.n	808db88 <__aeabi_d2uiz+0x28>
 808db64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 808db68:	d211      	bcs.n	808db8e <__aeabi_d2uiz+0x2e>
 808db6a:	d50d      	bpl.n	808db88 <__aeabi_d2uiz+0x28>
 808db6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 808db70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 808db74:	d40e      	bmi.n	808db94 <__aeabi_d2uiz+0x34>
 808db76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808db7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808db7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808db82:	fa23 f002 	lsr.w	r0, r3, r2
 808db86:	4770      	bx	lr
 808db88:	f04f 0000 	mov.w	r0, #0
 808db8c:	4770      	bx	lr
 808db8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808db92:	d102      	bne.n	808db9a <__aeabi_d2uiz+0x3a>
 808db94:	f04f 30ff 	mov.w	r0, #4294967295
 808db98:	4770      	bx	lr
 808db9a:	f04f 0000 	mov.w	r0, #0
 808db9e:	4770      	bx	lr

0808dba0 <__aeabi_d2f>:
 808dba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808dba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 808dba8:	bf24      	itt	cs
 808dbaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 808dbae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 808dbb2:	d90d      	bls.n	808dbd0 <__aeabi_d2f+0x30>
 808dbb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808dbb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 808dbbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 808dbc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 808dbc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 808dbc8:	bf08      	it	eq
 808dbca:	f020 0001 	biceq.w	r0, r0, #1
 808dbce:	4770      	bx	lr
 808dbd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 808dbd4:	d121      	bne.n	808dc1a <__aeabi_d2f+0x7a>
 808dbd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 808dbda:	bfbc      	itt	lt
 808dbdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 808dbe0:	4770      	bxlt	lr
 808dbe2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808dbe6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 808dbea:	f1c2 0218 	rsb	r2, r2, #24
 808dbee:	f1c2 0c20 	rsb	ip, r2, #32
 808dbf2:	fa10 f30c 	lsls.w	r3, r0, ip
 808dbf6:	fa20 f002 	lsr.w	r0, r0, r2
 808dbfa:	bf18      	it	ne
 808dbfc:	f040 0001 	orrne.w	r0, r0, #1
 808dc00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808dc04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 808dc08:	fa03 fc0c 	lsl.w	ip, r3, ip
 808dc0c:	ea40 000c 	orr.w	r0, r0, ip
 808dc10:	fa23 f302 	lsr.w	r3, r3, r2
 808dc14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 808dc18:	e7cc      	b.n	808dbb4 <__aeabi_d2f+0x14>
 808dc1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 808dc1e:	d107      	bne.n	808dc30 <__aeabi_d2f+0x90>
 808dc20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 808dc24:	bf1e      	ittt	ne
 808dc26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 808dc2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 808dc2e:	4770      	bxne	lr
 808dc30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 808dc34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808dc38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808dc3c:	4770      	bx	lr
 808dc3e:	bf00      	nop

0808dc40 <__aeabi_frsub>:
 808dc40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 808dc44:	e002      	b.n	808dc4c <__addsf3>
 808dc46:	bf00      	nop

0808dc48 <__aeabi_fsub>:
 808dc48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0808dc4c <__addsf3>:
 808dc4c:	0042      	lsls	r2, r0, #1
 808dc4e:	bf1f      	itttt	ne
 808dc50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 808dc54:	ea92 0f03 	teqne	r2, r3
 808dc58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 808dc5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808dc60:	d06a      	beq.n	808dd38 <__addsf3+0xec>
 808dc62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 808dc66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 808dc6a:	bfc1      	itttt	gt
 808dc6c:	18d2      	addgt	r2, r2, r3
 808dc6e:	4041      	eorgt	r1, r0
 808dc70:	4048      	eorgt	r0, r1
 808dc72:	4041      	eorgt	r1, r0
 808dc74:	bfb8      	it	lt
 808dc76:	425b      	neglt	r3, r3
 808dc78:	2b19      	cmp	r3, #25
 808dc7a:	bf88      	it	hi
 808dc7c:	4770      	bxhi	lr
 808dc7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808dc82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808dc86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 808dc8a:	bf18      	it	ne
 808dc8c:	4240      	negne	r0, r0
 808dc8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808dc92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 808dc96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 808dc9a:	bf18      	it	ne
 808dc9c:	4249      	negne	r1, r1
 808dc9e:	ea92 0f03 	teq	r2, r3
 808dca2:	d03f      	beq.n	808dd24 <__addsf3+0xd8>
 808dca4:	f1a2 0201 	sub.w	r2, r2, #1
 808dca8:	fa41 fc03 	asr.w	ip, r1, r3
 808dcac:	eb10 000c 	adds.w	r0, r0, ip
 808dcb0:	f1c3 0320 	rsb	r3, r3, #32
 808dcb4:	fa01 f103 	lsl.w	r1, r1, r3
 808dcb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808dcbc:	d502      	bpl.n	808dcc4 <__addsf3+0x78>
 808dcbe:	4249      	negs	r1, r1
 808dcc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 808dcc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 808dcc8:	d313      	bcc.n	808dcf2 <__addsf3+0xa6>
 808dcca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 808dcce:	d306      	bcc.n	808dcde <__addsf3+0x92>
 808dcd0:	0840      	lsrs	r0, r0, #1
 808dcd2:	ea4f 0131 	mov.w	r1, r1, rrx
 808dcd6:	f102 0201 	add.w	r2, r2, #1
 808dcda:	2afe      	cmp	r2, #254	; 0xfe
 808dcdc:	d251      	bcs.n	808dd82 <__addsf3+0x136>
 808dcde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 808dce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808dce6:	bf08      	it	eq
 808dce8:	f020 0001 	biceq.w	r0, r0, #1
 808dcec:	ea40 0003 	orr.w	r0, r0, r3
 808dcf0:	4770      	bx	lr
 808dcf2:	0049      	lsls	r1, r1, #1
 808dcf4:	eb40 0000 	adc.w	r0, r0, r0
 808dcf8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 808dcfc:	f1a2 0201 	sub.w	r2, r2, #1
 808dd00:	d1ed      	bne.n	808dcde <__addsf3+0x92>
 808dd02:	fab0 fc80 	clz	ip, r0
 808dd06:	f1ac 0c08 	sub.w	ip, ip, #8
 808dd0a:	ebb2 020c 	subs.w	r2, r2, ip
 808dd0e:	fa00 f00c 	lsl.w	r0, r0, ip
 808dd12:	bfaa      	itet	ge
 808dd14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 808dd18:	4252      	neglt	r2, r2
 808dd1a:	4318      	orrge	r0, r3
 808dd1c:	bfbc      	itt	lt
 808dd1e:	40d0      	lsrlt	r0, r2
 808dd20:	4318      	orrlt	r0, r3
 808dd22:	4770      	bx	lr
 808dd24:	f092 0f00 	teq	r2, #0
 808dd28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 808dd2c:	bf06      	itte	eq
 808dd2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 808dd32:	3201      	addeq	r2, #1
 808dd34:	3b01      	subne	r3, #1
 808dd36:	e7b5      	b.n	808dca4 <__addsf3+0x58>
 808dd38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808dd3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808dd40:	bf18      	it	ne
 808dd42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808dd46:	d021      	beq.n	808dd8c <__addsf3+0x140>
 808dd48:	ea92 0f03 	teq	r2, r3
 808dd4c:	d004      	beq.n	808dd58 <__addsf3+0x10c>
 808dd4e:	f092 0f00 	teq	r2, #0
 808dd52:	bf08      	it	eq
 808dd54:	4608      	moveq	r0, r1
 808dd56:	4770      	bx	lr
 808dd58:	ea90 0f01 	teq	r0, r1
 808dd5c:	bf1c      	itt	ne
 808dd5e:	2000      	movne	r0, #0
 808dd60:	4770      	bxne	lr
 808dd62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 808dd66:	d104      	bne.n	808dd72 <__addsf3+0x126>
 808dd68:	0040      	lsls	r0, r0, #1
 808dd6a:	bf28      	it	cs
 808dd6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 808dd70:	4770      	bx	lr
 808dd72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 808dd76:	bf3c      	itt	cc
 808dd78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 808dd7c:	4770      	bxcc	lr
 808dd7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808dd82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 808dd86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808dd8a:	4770      	bx	lr
 808dd8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 808dd90:	bf16      	itet	ne
 808dd92:	4608      	movne	r0, r1
 808dd94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 808dd98:	4601      	movne	r1, r0
 808dd9a:	0242      	lsls	r2, r0, #9
 808dd9c:	bf06      	itte	eq
 808dd9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 808dda2:	ea90 0f01 	teqeq	r0, r1
 808dda6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 808ddaa:	4770      	bx	lr

0808ddac <__aeabi_ui2f>:
 808ddac:	f04f 0300 	mov.w	r3, #0
 808ddb0:	e004      	b.n	808ddbc <__aeabi_i2f+0x8>
 808ddb2:	bf00      	nop

0808ddb4 <__aeabi_i2f>:
 808ddb4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 808ddb8:	bf48      	it	mi
 808ddba:	4240      	negmi	r0, r0
 808ddbc:	ea5f 0c00 	movs.w	ip, r0
 808ddc0:	bf08      	it	eq
 808ddc2:	4770      	bxeq	lr
 808ddc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 808ddc8:	4601      	mov	r1, r0
 808ddca:	f04f 0000 	mov.w	r0, #0
 808ddce:	e01c      	b.n	808de0a <__aeabi_l2f+0x2a>

0808ddd0 <__aeabi_ul2f>:
 808ddd0:	ea50 0201 	orrs.w	r2, r0, r1
 808ddd4:	bf08      	it	eq
 808ddd6:	4770      	bxeq	lr
 808ddd8:	f04f 0300 	mov.w	r3, #0
 808dddc:	e00a      	b.n	808ddf4 <__aeabi_l2f+0x14>
 808ddde:	bf00      	nop

0808dde0 <__aeabi_l2f>:
 808dde0:	ea50 0201 	orrs.w	r2, r0, r1
 808dde4:	bf08      	it	eq
 808dde6:	4770      	bxeq	lr
 808dde8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 808ddec:	d502      	bpl.n	808ddf4 <__aeabi_l2f+0x14>
 808ddee:	4240      	negs	r0, r0
 808ddf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808ddf4:	ea5f 0c01 	movs.w	ip, r1
 808ddf8:	bf02      	ittt	eq
 808ddfa:	4684      	moveq	ip, r0
 808ddfc:	4601      	moveq	r1, r0
 808ddfe:	2000      	moveq	r0, #0
 808de00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 808de04:	bf08      	it	eq
 808de06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 808de0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 808de0e:	fabc f28c 	clz	r2, ip
 808de12:	3a08      	subs	r2, #8
 808de14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 808de18:	db10      	blt.n	808de3c <__aeabi_l2f+0x5c>
 808de1a:	fa01 fc02 	lsl.w	ip, r1, r2
 808de1e:	4463      	add	r3, ip
 808de20:	fa00 fc02 	lsl.w	ip, r0, r2
 808de24:	f1c2 0220 	rsb	r2, r2, #32
 808de28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 808de2c:	fa20 f202 	lsr.w	r2, r0, r2
 808de30:	eb43 0002 	adc.w	r0, r3, r2
 808de34:	bf08      	it	eq
 808de36:	f020 0001 	biceq.w	r0, r0, #1
 808de3a:	4770      	bx	lr
 808de3c:	f102 0220 	add.w	r2, r2, #32
 808de40:	fa01 fc02 	lsl.w	ip, r1, r2
 808de44:	f1c2 0220 	rsb	r2, r2, #32
 808de48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 808de4c:	fa21 f202 	lsr.w	r2, r1, r2
 808de50:	eb43 0002 	adc.w	r0, r3, r2
 808de54:	bf08      	it	eq
 808de56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808de5a:	4770      	bx	lr

0808de5c <__aeabi_fmul>:
 808de5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808de60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808de64:	bf1e      	ittt	ne
 808de66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808de6a:	ea92 0f0c 	teqne	r2, ip
 808de6e:	ea93 0f0c 	teqne	r3, ip
 808de72:	d06f      	beq.n	808df54 <__aeabi_fmul+0xf8>
 808de74:	441a      	add	r2, r3
 808de76:	ea80 0c01 	eor.w	ip, r0, r1
 808de7a:	0240      	lsls	r0, r0, #9
 808de7c:	bf18      	it	ne
 808de7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 808de82:	d01e      	beq.n	808dec2 <__aeabi_fmul+0x66>
 808de84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 808de88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 808de8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 808de90:	fba0 3101 	umull	r3, r1, r0, r1
 808de94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808de98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 808de9c:	bf3e      	ittt	cc
 808de9e:	0049      	lslcc	r1, r1, #1
 808dea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 808dea4:	005b      	lslcc	r3, r3, #1
 808dea6:	ea40 0001 	orr.w	r0, r0, r1
 808deaa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 808deae:	2afd      	cmp	r2, #253	; 0xfd
 808deb0:	d81d      	bhi.n	808deee <__aeabi_fmul+0x92>
 808deb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 808deb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808deba:	bf08      	it	eq
 808debc:	f020 0001 	biceq.w	r0, r0, #1
 808dec0:	4770      	bx	lr
 808dec2:	f090 0f00 	teq	r0, #0
 808dec6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808deca:	bf08      	it	eq
 808decc:	0249      	lsleq	r1, r1, #9
 808dece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808ded2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 808ded6:	3a7f      	subs	r2, #127	; 0x7f
 808ded8:	bfc2      	ittt	gt
 808deda:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808dede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808dee2:	4770      	bxgt	lr
 808dee4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808dee8:	f04f 0300 	mov.w	r3, #0
 808deec:	3a01      	subs	r2, #1
 808deee:	dc5d      	bgt.n	808dfac <__aeabi_fmul+0x150>
 808def0:	f112 0f19 	cmn.w	r2, #25
 808def4:	bfdc      	itt	le
 808def6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 808defa:	4770      	bxle	lr
 808defc:	f1c2 0200 	rsb	r2, r2, #0
 808df00:	0041      	lsls	r1, r0, #1
 808df02:	fa21 f102 	lsr.w	r1, r1, r2
 808df06:	f1c2 0220 	rsb	r2, r2, #32
 808df0a:	fa00 fc02 	lsl.w	ip, r0, r2
 808df0e:	ea5f 0031 	movs.w	r0, r1, rrx
 808df12:	f140 0000 	adc.w	r0, r0, #0
 808df16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 808df1a:	bf08      	it	eq
 808df1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808df20:	4770      	bx	lr
 808df22:	f092 0f00 	teq	r2, #0
 808df26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808df2a:	bf02      	ittt	eq
 808df2c:	0040      	lsleq	r0, r0, #1
 808df2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808df32:	3a01      	subeq	r2, #1
 808df34:	d0f9      	beq.n	808df2a <__aeabi_fmul+0xce>
 808df36:	ea40 000c 	orr.w	r0, r0, ip
 808df3a:	f093 0f00 	teq	r3, #0
 808df3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808df42:	bf02      	ittt	eq
 808df44:	0049      	lsleq	r1, r1, #1
 808df46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808df4a:	3b01      	subeq	r3, #1
 808df4c:	d0f9      	beq.n	808df42 <__aeabi_fmul+0xe6>
 808df4e:	ea41 010c 	orr.w	r1, r1, ip
 808df52:	e78f      	b.n	808de74 <__aeabi_fmul+0x18>
 808df54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 808df58:	ea92 0f0c 	teq	r2, ip
 808df5c:	bf18      	it	ne
 808df5e:	ea93 0f0c 	teqne	r3, ip
 808df62:	d00a      	beq.n	808df7a <__aeabi_fmul+0x11e>
 808df64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808df68:	bf18      	it	ne
 808df6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808df6e:	d1d8      	bne.n	808df22 <__aeabi_fmul+0xc6>
 808df70:	ea80 0001 	eor.w	r0, r0, r1
 808df74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808df78:	4770      	bx	lr
 808df7a:	f090 0f00 	teq	r0, #0
 808df7e:	bf17      	itett	ne
 808df80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 808df84:	4608      	moveq	r0, r1
 808df86:	f091 0f00 	teqne	r1, #0
 808df8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 808df8e:	d014      	beq.n	808dfba <__aeabi_fmul+0x15e>
 808df90:	ea92 0f0c 	teq	r2, ip
 808df94:	d101      	bne.n	808df9a <__aeabi_fmul+0x13e>
 808df96:	0242      	lsls	r2, r0, #9
 808df98:	d10f      	bne.n	808dfba <__aeabi_fmul+0x15e>
 808df9a:	ea93 0f0c 	teq	r3, ip
 808df9e:	d103      	bne.n	808dfa8 <__aeabi_fmul+0x14c>
 808dfa0:	024b      	lsls	r3, r1, #9
 808dfa2:	bf18      	it	ne
 808dfa4:	4608      	movne	r0, r1
 808dfa6:	d108      	bne.n	808dfba <__aeabi_fmul+0x15e>
 808dfa8:	ea80 0001 	eor.w	r0, r0, r1
 808dfac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808dfb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808dfb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808dfb8:	4770      	bx	lr
 808dfba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808dfbe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 808dfc2:	4770      	bx	lr

0808dfc4 <__aeabi_fdiv>:
 808dfc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808dfc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808dfcc:	bf1e      	ittt	ne
 808dfce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808dfd2:	ea92 0f0c 	teqne	r2, ip
 808dfd6:	ea93 0f0c 	teqne	r3, ip
 808dfda:	d069      	beq.n	808e0b0 <__aeabi_fdiv+0xec>
 808dfdc:	eba2 0203 	sub.w	r2, r2, r3
 808dfe0:	ea80 0c01 	eor.w	ip, r0, r1
 808dfe4:	0249      	lsls	r1, r1, #9
 808dfe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 808dfea:	d037      	beq.n	808e05c <__aeabi_fdiv+0x98>
 808dfec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 808dff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 808dff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 808dff8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808dffc:	428b      	cmp	r3, r1
 808dffe:	bf38      	it	cc
 808e000:	005b      	lslcc	r3, r3, #1
 808e002:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 808e006:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 808e00a:	428b      	cmp	r3, r1
 808e00c:	bf24      	itt	cs
 808e00e:	1a5b      	subcs	r3, r3, r1
 808e010:	ea40 000c 	orrcs.w	r0, r0, ip
 808e014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 808e018:	bf24      	itt	cs
 808e01a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 808e01e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808e022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 808e026:	bf24      	itt	cs
 808e028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 808e02c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808e030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 808e034:	bf24      	itt	cs
 808e036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 808e03a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808e03e:	011b      	lsls	r3, r3, #4
 808e040:	bf18      	it	ne
 808e042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 808e046:	d1e0      	bne.n	808e00a <__aeabi_fdiv+0x46>
 808e048:	2afd      	cmp	r2, #253	; 0xfd
 808e04a:	f63f af50 	bhi.w	808deee <__aeabi_fmul+0x92>
 808e04e:	428b      	cmp	r3, r1
 808e050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808e054:	bf08      	it	eq
 808e056:	f020 0001 	biceq.w	r0, r0, #1
 808e05a:	4770      	bx	lr
 808e05c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808e060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808e064:	327f      	adds	r2, #127	; 0x7f
 808e066:	bfc2      	ittt	gt
 808e068:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808e06c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808e070:	4770      	bxgt	lr
 808e072:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808e076:	f04f 0300 	mov.w	r3, #0
 808e07a:	3a01      	subs	r2, #1
 808e07c:	e737      	b.n	808deee <__aeabi_fmul+0x92>
 808e07e:	f092 0f00 	teq	r2, #0
 808e082:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808e086:	bf02      	ittt	eq
 808e088:	0040      	lsleq	r0, r0, #1
 808e08a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808e08e:	3a01      	subeq	r2, #1
 808e090:	d0f9      	beq.n	808e086 <__aeabi_fdiv+0xc2>
 808e092:	ea40 000c 	orr.w	r0, r0, ip
 808e096:	f093 0f00 	teq	r3, #0
 808e09a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808e09e:	bf02      	ittt	eq
 808e0a0:	0049      	lsleq	r1, r1, #1
 808e0a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808e0a6:	3b01      	subeq	r3, #1
 808e0a8:	d0f9      	beq.n	808e09e <__aeabi_fdiv+0xda>
 808e0aa:	ea41 010c 	orr.w	r1, r1, ip
 808e0ae:	e795      	b.n	808dfdc <__aeabi_fdiv+0x18>
 808e0b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 808e0b4:	ea92 0f0c 	teq	r2, ip
 808e0b8:	d108      	bne.n	808e0cc <__aeabi_fdiv+0x108>
 808e0ba:	0242      	lsls	r2, r0, #9
 808e0bc:	f47f af7d 	bne.w	808dfba <__aeabi_fmul+0x15e>
 808e0c0:	ea93 0f0c 	teq	r3, ip
 808e0c4:	f47f af70 	bne.w	808dfa8 <__aeabi_fmul+0x14c>
 808e0c8:	4608      	mov	r0, r1
 808e0ca:	e776      	b.n	808dfba <__aeabi_fmul+0x15e>
 808e0cc:	ea93 0f0c 	teq	r3, ip
 808e0d0:	d104      	bne.n	808e0dc <__aeabi_fdiv+0x118>
 808e0d2:	024b      	lsls	r3, r1, #9
 808e0d4:	f43f af4c 	beq.w	808df70 <__aeabi_fmul+0x114>
 808e0d8:	4608      	mov	r0, r1
 808e0da:	e76e      	b.n	808dfba <__aeabi_fmul+0x15e>
 808e0dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808e0e0:	bf18      	it	ne
 808e0e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808e0e6:	d1ca      	bne.n	808e07e <__aeabi_fdiv+0xba>
 808e0e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 808e0ec:	f47f af5c 	bne.w	808dfa8 <__aeabi_fmul+0x14c>
 808e0f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 808e0f4:	f47f af3c 	bne.w	808df70 <__aeabi_fmul+0x114>
 808e0f8:	e75f      	b.n	808dfba <__aeabi_fmul+0x15e>
 808e0fa:	bf00      	nop

0808e0fc <__gesf2>:
 808e0fc:	f04f 3cff 	mov.w	ip, #4294967295
 808e100:	e006      	b.n	808e110 <__cmpsf2+0x4>
 808e102:	bf00      	nop

0808e104 <__lesf2>:
 808e104:	f04f 0c01 	mov.w	ip, #1
 808e108:	e002      	b.n	808e110 <__cmpsf2+0x4>
 808e10a:	bf00      	nop

0808e10c <__cmpsf2>:
 808e10c:	f04f 0c01 	mov.w	ip, #1
 808e110:	f84d cd04 	str.w	ip, [sp, #-4]!
 808e114:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808e118:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808e11c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808e120:	bf18      	it	ne
 808e122:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808e126:	d011      	beq.n	808e14c <__cmpsf2+0x40>
 808e128:	b001      	add	sp, #4
 808e12a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 808e12e:	bf18      	it	ne
 808e130:	ea90 0f01 	teqne	r0, r1
 808e134:	bf58      	it	pl
 808e136:	ebb2 0003 	subspl.w	r0, r2, r3
 808e13a:	bf88      	it	hi
 808e13c:	17c8      	asrhi	r0, r1, #31
 808e13e:	bf38      	it	cc
 808e140:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 808e144:	bf18      	it	ne
 808e146:	f040 0001 	orrne.w	r0, r0, #1
 808e14a:	4770      	bx	lr
 808e14c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808e150:	d102      	bne.n	808e158 <__cmpsf2+0x4c>
 808e152:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 808e156:	d105      	bne.n	808e164 <__cmpsf2+0x58>
 808e158:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 808e15c:	d1e4      	bne.n	808e128 <__cmpsf2+0x1c>
 808e15e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 808e162:	d0e1      	beq.n	808e128 <__cmpsf2+0x1c>
 808e164:	f85d 0b04 	ldr.w	r0, [sp], #4
 808e168:	4770      	bx	lr
 808e16a:	bf00      	nop

0808e16c <__aeabi_cfrcmple>:
 808e16c:	4684      	mov	ip, r0
 808e16e:	4608      	mov	r0, r1
 808e170:	4661      	mov	r1, ip
 808e172:	e7ff      	b.n	808e174 <__aeabi_cfcmpeq>

0808e174 <__aeabi_cfcmpeq>:
 808e174:	b50f      	push	{r0, r1, r2, r3, lr}
 808e176:	f7ff ffc9 	bl	808e10c <__cmpsf2>
 808e17a:	2800      	cmp	r0, #0
 808e17c:	bf48      	it	mi
 808e17e:	f110 0f00 	cmnmi.w	r0, #0
 808e182:	bd0f      	pop	{r0, r1, r2, r3, pc}

0808e184 <__aeabi_fcmpeq>:
 808e184:	f84d ed08 	str.w	lr, [sp, #-8]!
 808e188:	f7ff fff4 	bl	808e174 <__aeabi_cfcmpeq>
 808e18c:	bf0c      	ite	eq
 808e18e:	2001      	moveq	r0, #1
 808e190:	2000      	movne	r0, #0
 808e192:	f85d fb08 	ldr.w	pc, [sp], #8
 808e196:	bf00      	nop

0808e198 <__aeabi_fcmplt>:
 808e198:	f84d ed08 	str.w	lr, [sp, #-8]!
 808e19c:	f7ff ffea 	bl	808e174 <__aeabi_cfcmpeq>
 808e1a0:	bf34      	ite	cc
 808e1a2:	2001      	movcc	r0, #1
 808e1a4:	2000      	movcs	r0, #0
 808e1a6:	f85d fb08 	ldr.w	pc, [sp], #8
 808e1aa:	bf00      	nop

0808e1ac <__aeabi_fcmple>:
 808e1ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 808e1b0:	f7ff ffe0 	bl	808e174 <__aeabi_cfcmpeq>
 808e1b4:	bf94      	ite	ls
 808e1b6:	2001      	movls	r0, #1
 808e1b8:	2000      	movhi	r0, #0
 808e1ba:	f85d fb08 	ldr.w	pc, [sp], #8
 808e1be:	bf00      	nop

0808e1c0 <__aeabi_fcmpge>:
 808e1c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 808e1c4:	f7ff ffd2 	bl	808e16c <__aeabi_cfrcmple>
 808e1c8:	bf94      	ite	ls
 808e1ca:	2001      	movls	r0, #1
 808e1cc:	2000      	movhi	r0, #0
 808e1ce:	f85d fb08 	ldr.w	pc, [sp], #8
 808e1d2:	bf00      	nop

0808e1d4 <__aeabi_fcmpgt>:
 808e1d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 808e1d8:	f7ff ffc8 	bl	808e16c <__aeabi_cfrcmple>
 808e1dc:	bf34      	ite	cc
 808e1de:	2001      	movcc	r0, #1
 808e1e0:	2000      	movcs	r0, #0
 808e1e2:	f85d fb08 	ldr.w	pc, [sp], #8
 808e1e6:	bf00      	nop

0808e1e8 <__aeabi_f2iz>:
 808e1e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808e1ec:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 808e1f0:	d30f      	bcc.n	808e212 <__aeabi_f2iz+0x2a>
 808e1f2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 808e1f6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 808e1fa:	d90d      	bls.n	808e218 <__aeabi_f2iz+0x30>
 808e1fc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 808e200:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808e204:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808e208:	fa23 f002 	lsr.w	r0, r3, r2
 808e20c:	bf18      	it	ne
 808e20e:	4240      	negne	r0, r0
 808e210:	4770      	bx	lr
 808e212:	f04f 0000 	mov.w	r0, #0
 808e216:	4770      	bx	lr
 808e218:	f112 0f61 	cmn.w	r2, #97	; 0x61
 808e21c:	d101      	bne.n	808e222 <__aeabi_f2iz+0x3a>
 808e21e:	0242      	lsls	r2, r0, #9
 808e220:	d105      	bne.n	808e22e <__aeabi_f2iz+0x46>
 808e222:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 808e226:	bf08      	it	eq
 808e228:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808e22c:	4770      	bx	lr
 808e22e:	f04f 0000 	mov.w	r0, #0
 808e232:	4770      	bx	lr

0808e234 <__aeabi_ldivmod>:
 808e234:	b97b      	cbnz	r3, 808e256 <__aeabi_ldivmod+0x22>
 808e236:	b972      	cbnz	r2, 808e256 <__aeabi_ldivmod+0x22>
 808e238:	2900      	cmp	r1, #0
 808e23a:	bfbe      	ittt	lt
 808e23c:	2000      	movlt	r0, #0
 808e23e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 808e242:	e006      	blt.n	808e252 <__aeabi_ldivmod+0x1e>
 808e244:	bf08      	it	eq
 808e246:	2800      	cmpeq	r0, #0
 808e248:	bf1c      	itt	ne
 808e24a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 808e24e:	f04f 30ff 	movne.w	r0, #4294967295
 808e252:	f000 b9f1 	b.w	808e638 <__aeabi_idiv0>
 808e256:	f1ad 0c08 	sub.w	ip, sp, #8
 808e25a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 808e25e:	2900      	cmp	r1, #0
 808e260:	db09      	blt.n	808e276 <__aeabi_ldivmod+0x42>
 808e262:	2b00      	cmp	r3, #0
 808e264:	db1a      	blt.n	808e29c <__aeabi_ldivmod+0x68>
 808e266:	f000 f871 	bl	808e34c <__udivmoddi4>
 808e26a:	f8dd e004 	ldr.w	lr, [sp, #4]
 808e26e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808e272:	b004      	add	sp, #16
 808e274:	4770      	bx	lr
 808e276:	4240      	negs	r0, r0
 808e278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808e27c:	2b00      	cmp	r3, #0
 808e27e:	db1b      	blt.n	808e2b8 <__aeabi_ldivmod+0x84>
 808e280:	f000 f864 	bl	808e34c <__udivmoddi4>
 808e284:	f8dd e004 	ldr.w	lr, [sp, #4]
 808e288:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808e28c:	b004      	add	sp, #16
 808e28e:	4240      	negs	r0, r0
 808e290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808e294:	4252      	negs	r2, r2
 808e296:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808e29a:	4770      	bx	lr
 808e29c:	4252      	negs	r2, r2
 808e29e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808e2a2:	f000 f853 	bl	808e34c <__udivmoddi4>
 808e2a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 808e2aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808e2ae:	b004      	add	sp, #16
 808e2b0:	4240      	negs	r0, r0
 808e2b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808e2b6:	4770      	bx	lr
 808e2b8:	4252      	negs	r2, r2
 808e2ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808e2be:	f000 f845 	bl	808e34c <__udivmoddi4>
 808e2c2:	f8dd e004 	ldr.w	lr, [sp, #4]
 808e2c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808e2ca:	b004      	add	sp, #16
 808e2cc:	4252      	negs	r2, r2
 808e2ce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808e2d2:	4770      	bx	lr

0808e2d4 <__aeabi_uldivmod>:
 808e2d4:	b953      	cbnz	r3, 808e2ec <__aeabi_uldivmod+0x18>
 808e2d6:	b94a      	cbnz	r2, 808e2ec <__aeabi_uldivmod+0x18>
 808e2d8:	2900      	cmp	r1, #0
 808e2da:	bf08      	it	eq
 808e2dc:	2800      	cmpeq	r0, #0
 808e2de:	bf1c      	itt	ne
 808e2e0:	f04f 31ff 	movne.w	r1, #4294967295
 808e2e4:	f04f 30ff 	movne.w	r0, #4294967295
 808e2e8:	f000 b9a6 	b.w	808e638 <__aeabi_idiv0>
 808e2ec:	f1ad 0c08 	sub.w	ip, sp, #8
 808e2f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 808e2f4:	f000 f82a 	bl	808e34c <__udivmoddi4>
 808e2f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 808e2fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808e300:	b004      	add	sp, #16
 808e302:	4770      	bx	lr

0808e304 <__aeabi_d2ulz>:
 808e304:	b5d0      	push	{r4, r6, r7, lr}
 808e306:	2200      	movs	r2, #0
 808e308:	4b0e      	ldr	r3, [pc, #56]	; (808e344 <__aeabi_d2ulz+0x40>)
 808e30a:	4606      	mov	r6, r0
 808e30c:	460f      	mov	r7, r1
 808e30e:	f7ff f94f 	bl	808d5b0 <__aeabi_dmul>
 808e312:	f7ff fc25 	bl	808db60 <__aeabi_d2uiz>
 808e316:	4604      	mov	r4, r0
 808e318:	f7ff f8d4 	bl	808d4c4 <__aeabi_ui2d>
 808e31c:	2200      	movs	r2, #0
 808e31e:	4b0a      	ldr	r3, [pc, #40]	; (808e348 <__aeabi_d2ulz+0x44>)
 808e320:	f7ff f946 	bl	808d5b0 <__aeabi_dmul>
 808e324:	4602      	mov	r2, r0
 808e326:	460b      	mov	r3, r1
 808e328:	4630      	mov	r0, r6
 808e32a:	4639      	mov	r1, r7
 808e32c:	f7fe ff8c 	bl	808d248 <__aeabi_dsub>
 808e330:	f7ff fc16 	bl	808db60 <__aeabi_d2uiz>
 808e334:	4623      	mov	r3, r4
 808e336:	2200      	movs	r2, #0
 808e338:	ea42 0200 	orr.w	r2, r2, r0
 808e33c:	4610      	mov	r0, r2
 808e33e:	4619      	mov	r1, r3
 808e340:	bdd0      	pop	{r4, r6, r7, pc}
 808e342:	bf00      	nop
 808e344:	3df00000 	.word	0x3df00000
 808e348:	41f00000 	.word	0x41f00000

0808e34c <__udivmoddi4>:
 808e34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808e350:	468c      	mov	ip, r1
 808e352:	460c      	mov	r4, r1
 808e354:	4605      	mov	r5, r0
 808e356:	9e09      	ldr	r6, [sp, #36]	; 0x24
 808e358:	2b00      	cmp	r3, #0
 808e35a:	d14f      	bne.n	808e3fc <__udivmoddi4+0xb0>
 808e35c:	428a      	cmp	r2, r1
 808e35e:	4617      	mov	r7, r2
 808e360:	d96b      	bls.n	808e43a <__udivmoddi4+0xee>
 808e362:	fab2 fe82 	clz	lr, r2
 808e366:	f1be 0f00 	cmp.w	lr, #0
 808e36a:	d00b      	beq.n	808e384 <__udivmoddi4+0x38>
 808e36c:	f1ce 0520 	rsb	r5, lr, #32
 808e370:	fa20 f505 	lsr.w	r5, r0, r5
 808e374:	fa01 f30e 	lsl.w	r3, r1, lr
 808e378:	ea45 0c03 	orr.w	ip, r5, r3
 808e37c:	fa02 f70e 	lsl.w	r7, r2, lr
 808e380:	fa00 f50e 	lsl.w	r5, r0, lr
 808e384:	0c39      	lsrs	r1, r7, #16
 808e386:	fbbc f0f1 	udiv	r0, ip, r1
 808e38a:	b2ba      	uxth	r2, r7
 808e38c:	fb01 c310 	mls	r3, r1, r0, ip
 808e390:	fb00 f802 	mul.w	r8, r0, r2
 808e394:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 808e398:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 808e39c:	45a0      	cmp	r8, r4
 808e39e:	d909      	bls.n	808e3b4 <__udivmoddi4+0x68>
 808e3a0:	19e4      	adds	r4, r4, r7
 808e3a2:	f100 33ff 	add.w	r3, r0, #4294967295
 808e3a6:	f080 8128 	bcs.w	808e5fa <__udivmoddi4+0x2ae>
 808e3aa:	45a0      	cmp	r8, r4
 808e3ac:	f240 8125 	bls.w	808e5fa <__udivmoddi4+0x2ae>
 808e3b0:	3802      	subs	r0, #2
 808e3b2:	443c      	add	r4, r7
 808e3b4:	ebc8 0404 	rsb	r4, r8, r4
 808e3b8:	fbb4 f3f1 	udiv	r3, r4, r1
 808e3bc:	fb01 4c13 	mls	ip, r1, r3, r4
 808e3c0:	fb03 f202 	mul.w	r2, r3, r2
 808e3c4:	b2ac      	uxth	r4, r5
 808e3c6:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 808e3ca:	428a      	cmp	r2, r1
 808e3cc:	d909      	bls.n	808e3e2 <__udivmoddi4+0x96>
 808e3ce:	19c9      	adds	r1, r1, r7
 808e3d0:	f103 34ff 	add.w	r4, r3, #4294967295
 808e3d4:	f080 810f 	bcs.w	808e5f6 <__udivmoddi4+0x2aa>
 808e3d8:	428a      	cmp	r2, r1
 808e3da:	f240 810c 	bls.w	808e5f6 <__udivmoddi4+0x2aa>
 808e3de:	3b02      	subs	r3, #2
 808e3e0:	4439      	add	r1, r7
 808e3e2:	1a8a      	subs	r2, r1, r2
 808e3e4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 808e3e8:	2100      	movs	r1, #0
 808e3ea:	2e00      	cmp	r6, #0
 808e3ec:	d063      	beq.n	808e4b6 <__udivmoddi4+0x16a>
 808e3ee:	fa22 f20e 	lsr.w	r2, r2, lr
 808e3f2:	2300      	movs	r3, #0
 808e3f4:	e886 000c 	stmia.w	r6, {r2, r3}
 808e3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808e3fc:	428b      	cmp	r3, r1
 808e3fe:	d907      	bls.n	808e410 <__udivmoddi4+0xc4>
 808e400:	2e00      	cmp	r6, #0
 808e402:	d056      	beq.n	808e4b2 <__udivmoddi4+0x166>
 808e404:	2100      	movs	r1, #0
 808e406:	e886 0011 	stmia.w	r6, {r0, r4}
 808e40a:	4608      	mov	r0, r1
 808e40c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808e410:	fab3 f183 	clz	r1, r3
 808e414:	2900      	cmp	r1, #0
 808e416:	f040 8093 	bne.w	808e540 <__udivmoddi4+0x1f4>
 808e41a:	42a3      	cmp	r3, r4
 808e41c:	d302      	bcc.n	808e424 <__udivmoddi4+0xd8>
 808e41e:	4282      	cmp	r2, r0
 808e420:	f200 80fe 	bhi.w	808e620 <__udivmoddi4+0x2d4>
 808e424:	1a85      	subs	r5, r0, r2
 808e426:	eb64 0303 	sbc.w	r3, r4, r3
 808e42a:	469c      	mov	ip, r3
 808e42c:	2001      	movs	r0, #1
 808e42e:	2e00      	cmp	r6, #0
 808e430:	d041      	beq.n	808e4b6 <__udivmoddi4+0x16a>
 808e432:	e886 1020 	stmia.w	r6, {r5, ip}
 808e436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808e43a:	b912      	cbnz	r2, 808e442 <__udivmoddi4+0xf6>
 808e43c:	2701      	movs	r7, #1
 808e43e:	fbb7 f7f2 	udiv	r7, r7, r2
 808e442:	fab7 fe87 	clz	lr, r7
 808e446:	f1be 0f00 	cmp.w	lr, #0
 808e44a:	d136      	bne.n	808e4ba <__udivmoddi4+0x16e>
 808e44c:	1be4      	subs	r4, r4, r7
 808e44e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 808e452:	fa1f f987 	uxth.w	r9, r7
 808e456:	2101      	movs	r1, #1
 808e458:	fbb4 f3f8 	udiv	r3, r4, r8
 808e45c:	fb08 4413 	mls	r4, r8, r3, r4
 808e460:	fb09 f203 	mul.w	r2, r9, r3
 808e464:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 808e468:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 808e46c:	42a2      	cmp	r2, r4
 808e46e:	d907      	bls.n	808e480 <__udivmoddi4+0x134>
 808e470:	19e4      	adds	r4, r4, r7
 808e472:	f103 30ff 	add.w	r0, r3, #4294967295
 808e476:	d202      	bcs.n	808e47e <__udivmoddi4+0x132>
 808e478:	42a2      	cmp	r2, r4
 808e47a:	f200 80d3 	bhi.w	808e624 <__udivmoddi4+0x2d8>
 808e47e:	4603      	mov	r3, r0
 808e480:	1aa4      	subs	r4, r4, r2
 808e482:	fbb4 f0f8 	udiv	r0, r4, r8
 808e486:	fb08 4810 	mls	r8, r8, r0, r4
 808e48a:	fb09 f900 	mul.w	r9, r9, r0
 808e48e:	b2ac      	uxth	r4, r5
 808e490:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 808e494:	4591      	cmp	r9, r2
 808e496:	d907      	bls.n	808e4a8 <__udivmoddi4+0x15c>
 808e498:	19d2      	adds	r2, r2, r7
 808e49a:	f100 34ff 	add.w	r4, r0, #4294967295
 808e49e:	d202      	bcs.n	808e4a6 <__udivmoddi4+0x15a>
 808e4a0:	4591      	cmp	r9, r2
 808e4a2:	f200 80ba 	bhi.w	808e61a <__udivmoddi4+0x2ce>
 808e4a6:	4620      	mov	r0, r4
 808e4a8:	ebc9 0202 	rsb	r2, r9, r2
 808e4ac:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 808e4b0:	e79b      	b.n	808e3ea <__udivmoddi4+0x9e>
 808e4b2:	4631      	mov	r1, r6
 808e4b4:	4630      	mov	r0, r6
 808e4b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808e4ba:	fa07 f70e 	lsl.w	r7, r7, lr
 808e4be:	f1ce 0c20 	rsb	ip, lr, #32
 808e4c2:	fa24 f30c 	lsr.w	r3, r4, ip
 808e4c6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 808e4ca:	fbb3 faf8 	udiv	sl, r3, r8
 808e4ce:	fa1f f987 	uxth.w	r9, r7
 808e4d2:	fb08 351a 	mls	r5, r8, sl, r3
 808e4d6:	fa20 fc0c 	lsr.w	ip, r0, ip
 808e4da:	fa04 f40e 	lsl.w	r4, r4, lr
 808e4de:	fb0a fb09 	mul.w	fp, sl, r9
 808e4e2:	ea4c 0c04 	orr.w	ip, ip, r4
 808e4e6:	ea4f 421c 	mov.w	r2, ip, lsr #16
 808e4ea:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 808e4ee:	459b      	cmp	fp, r3
 808e4f0:	fa00 f50e 	lsl.w	r5, r0, lr
 808e4f4:	d90a      	bls.n	808e50c <__udivmoddi4+0x1c0>
 808e4f6:	19db      	adds	r3, r3, r7
 808e4f8:	f10a 32ff 	add.w	r2, sl, #4294967295
 808e4fc:	f080 808b 	bcs.w	808e616 <__udivmoddi4+0x2ca>
 808e500:	459b      	cmp	fp, r3
 808e502:	f240 8088 	bls.w	808e616 <__udivmoddi4+0x2ca>
 808e506:	f1aa 0a02 	sub.w	sl, sl, #2
 808e50a:	443b      	add	r3, r7
 808e50c:	ebcb 0303 	rsb	r3, fp, r3
 808e510:	fbb3 f0f8 	udiv	r0, r3, r8
 808e514:	fb08 3310 	mls	r3, r8, r0, r3
 808e518:	fb00 f409 	mul.w	r4, r0, r9
 808e51c:	fa1f fc8c 	uxth.w	ip, ip
 808e520:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 808e524:	429c      	cmp	r4, r3
 808e526:	d907      	bls.n	808e538 <__udivmoddi4+0x1ec>
 808e528:	19db      	adds	r3, r3, r7
 808e52a:	f100 32ff 	add.w	r2, r0, #4294967295
 808e52e:	d26e      	bcs.n	808e60e <__udivmoddi4+0x2c2>
 808e530:	429c      	cmp	r4, r3
 808e532:	d96c      	bls.n	808e60e <__udivmoddi4+0x2c2>
 808e534:	3802      	subs	r0, #2
 808e536:	443b      	add	r3, r7
 808e538:	1b1c      	subs	r4, r3, r4
 808e53a:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 808e53e:	e78b      	b.n	808e458 <__udivmoddi4+0x10c>
 808e540:	f1c1 0e20 	rsb	lr, r1, #32
 808e544:	408b      	lsls	r3, r1
 808e546:	fa22 fc0e 	lsr.w	ip, r2, lr
 808e54a:	ea4c 0c03 	orr.w	ip, ip, r3
 808e54e:	fa24 f70e 	lsr.w	r7, r4, lr
 808e552:	ea4f 491c 	mov.w	r9, ip, lsr #16
 808e556:	fbb7 faf9 	udiv	sl, r7, r9
 808e55a:	fa1f f38c 	uxth.w	r3, ip
 808e55e:	fb09 771a 	mls	r7, r9, sl, r7
 808e562:	fa20 f80e 	lsr.w	r8, r0, lr
 808e566:	408c      	lsls	r4, r1
 808e568:	fb0a f503 	mul.w	r5, sl, r3
 808e56c:	ea48 0404 	orr.w	r4, r8, r4
 808e570:	ea4f 4814 	mov.w	r8, r4, lsr #16
 808e574:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 808e578:	42bd      	cmp	r5, r7
 808e57a:	fa02 f201 	lsl.w	r2, r2, r1
 808e57e:	fa00 fb01 	lsl.w	fp, r0, r1
 808e582:	d909      	bls.n	808e598 <__udivmoddi4+0x24c>
 808e584:	eb17 070c 	adds.w	r7, r7, ip
 808e588:	f10a 30ff 	add.w	r0, sl, #4294967295
 808e58c:	d241      	bcs.n	808e612 <__udivmoddi4+0x2c6>
 808e58e:	42bd      	cmp	r5, r7
 808e590:	d93f      	bls.n	808e612 <__udivmoddi4+0x2c6>
 808e592:	f1aa 0a02 	sub.w	sl, sl, #2
 808e596:	4467      	add	r7, ip
 808e598:	1b7f      	subs	r7, r7, r5
 808e59a:	fbb7 f5f9 	udiv	r5, r7, r9
 808e59e:	fb09 7715 	mls	r7, r9, r5, r7
 808e5a2:	fb05 f303 	mul.w	r3, r5, r3
 808e5a6:	b2a4      	uxth	r4, r4
 808e5a8:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 808e5ac:	42bb      	cmp	r3, r7
 808e5ae:	d908      	bls.n	808e5c2 <__udivmoddi4+0x276>
 808e5b0:	eb17 070c 	adds.w	r7, r7, ip
 808e5b4:	f105 30ff 	add.w	r0, r5, #4294967295
 808e5b8:	d227      	bcs.n	808e60a <__udivmoddi4+0x2be>
 808e5ba:	42bb      	cmp	r3, r7
 808e5bc:	d925      	bls.n	808e60a <__udivmoddi4+0x2be>
 808e5be:	3d02      	subs	r5, #2
 808e5c0:	4467      	add	r7, ip
 808e5c2:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 808e5c6:	fba0 8902 	umull	r8, r9, r0, r2
 808e5ca:	1aff      	subs	r7, r7, r3
 808e5cc:	454f      	cmp	r7, r9
 808e5ce:	4645      	mov	r5, r8
 808e5d0:	464c      	mov	r4, r9
 808e5d2:	d314      	bcc.n	808e5fe <__udivmoddi4+0x2b2>
 808e5d4:	d029      	beq.n	808e62a <__udivmoddi4+0x2de>
 808e5d6:	b366      	cbz	r6, 808e632 <__udivmoddi4+0x2e6>
 808e5d8:	ebbb 0305 	subs.w	r3, fp, r5
 808e5dc:	eb67 0704 	sbc.w	r7, r7, r4
 808e5e0:	fa07 fe0e 	lsl.w	lr, r7, lr
 808e5e4:	40cb      	lsrs	r3, r1
 808e5e6:	40cf      	lsrs	r7, r1
 808e5e8:	ea4e 0303 	orr.w	r3, lr, r3
 808e5ec:	e886 0088 	stmia.w	r6, {r3, r7}
 808e5f0:	2100      	movs	r1, #0
 808e5f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808e5f6:	4623      	mov	r3, r4
 808e5f8:	e6f3      	b.n	808e3e2 <__udivmoddi4+0x96>
 808e5fa:	4618      	mov	r0, r3
 808e5fc:	e6da      	b.n	808e3b4 <__udivmoddi4+0x68>
 808e5fe:	ebb8 0502 	subs.w	r5, r8, r2
 808e602:	eb69 040c 	sbc.w	r4, r9, ip
 808e606:	3801      	subs	r0, #1
 808e608:	e7e5      	b.n	808e5d6 <__udivmoddi4+0x28a>
 808e60a:	4605      	mov	r5, r0
 808e60c:	e7d9      	b.n	808e5c2 <__udivmoddi4+0x276>
 808e60e:	4610      	mov	r0, r2
 808e610:	e792      	b.n	808e538 <__udivmoddi4+0x1ec>
 808e612:	4682      	mov	sl, r0
 808e614:	e7c0      	b.n	808e598 <__udivmoddi4+0x24c>
 808e616:	4692      	mov	sl, r2
 808e618:	e778      	b.n	808e50c <__udivmoddi4+0x1c0>
 808e61a:	3802      	subs	r0, #2
 808e61c:	443a      	add	r2, r7
 808e61e:	e743      	b.n	808e4a8 <__udivmoddi4+0x15c>
 808e620:	4608      	mov	r0, r1
 808e622:	e704      	b.n	808e42e <__udivmoddi4+0xe2>
 808e624:	3b02      	subs	r3, #2
 808e626:	443c      	add	r4, r7
 808e628:	e72a      	b.n	808e480 <__udivmoddi4+0x134>
 808e62a:	45c3      	cmp	fp, r8
 808e62c:	d3e7      	bcc.n	808e5fe <__udivmoddi4+0x2b2>
 808e62e:	463c      	mov	r4, r7
 808e630:	e7d1      	b.n	808e5d6 <__udivmoddi4+0x28a>
 808e632:	4631      	mov	r1, r6
 808e634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808e638 <__aeabi_idiv0>:
 808e638:	4770      	bx	lr
 808e63a:	bf00      	nop

0808e63c <asctime>:
 808e63c:	4b09      	ldr	r3, [pc, #36]	; (808e664 <asctime+0x28>)
 808e63e:	b570      	push	{r4, r5, r6, lr}
 808e640:	681c      	ldr	r4, [r3, #0]
 808e642:	4606      	mov	r6, r0
 808e644:	6c25      	ldr	r5, [r4, #64]	; 0x40
 808e646:	b93d      	cbnz	r5, 808e658 <asctime+0x1c>
 808e648:	201a      	movs	r0, #26
 808e64a:	f7fc f9d3 	bl	808a9f4 <malloc>
 808e64e:	221a      	movs	r2, #26
 808e650:	6420      	str	r0, [r4, #64]	; 0x40
 808e652:	4629      	mov	r1, r5
 808e654:	f000 f972 	bl	808e93c <memset>
 808e658:	6c21      	ldr	r1, [r4, #64]	; 0x40
 808e65a:	4630      	mov	r0, r6
 808e65c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 808e660:	f000 b802 	b.w	808e668 <asctime_r>
 808e664:	20000550 	.word	0x20000550

0808e668 <asctime_r>:
 808e668:	b510      	push	{r4, lr}
 808e66a:	460c      	mov	r4, r1
 808e66c:	6941      	ldr	r1, [r0, #20]
 808e66e:	b086      	sub	sp, #24
 808e670:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 808e674:	6903      	ldr	r3, [r0, #16]
 808e676:	6982      	ldr	r2, [r0, #24]
 808e678:	9104      	str	r1, [sp, #16]
 808e67a:	6801      	ldr	r1, [r0, #0]
 808e67c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 808e680:	9103      	str	r1, [sp, #12]
 808e682:	6841      	ldr	r1, [r0, #4]
 808e684:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 808e688:	9102      	str	r1, [sp, #8]
 808e68a:	6881      	ldr	r1, [r0, #8]
 808e68c:	9101      	str	r1, [sp, #4]
 808e68e:	68c1      	ldr	r1, [r0, #12]
 808e690:	4620      	mov	r0, r4
 808e692:	9100      	str	r1, [sp, #0]
 808e694:	4904      	ldr	r1, [pc, #16]	; (808e6a8 <asctime_r+0x40>)
 808e696:	440b      	add	r3, r1
 808e698:	4904      	ldr	r1, [pc, #16]	; (808e6ac <asctime_r+0x44>)
 808e69a:	440a      	add	r2, r1
 808e69c:	4904      	ldr	r1, [pc, #16]	; (808e6b0 <asctime_r+0x48>)
 808e69e:	f7fc f9c9 	bl	808aa34 <siprintf>
 808e6a2:	4620      	mov	r0, r4
 808e6a4:	b006      	add	sp, #24
 808e6a6:	bd10      	pop	{r4, pc}
 808e6a8:	080945cc 	.word	0x080945cc
 808e6ac:	080945b7 	.word	0x080945b7
 808e6b0:	080945f0 	.word	0x080945f0

0808e6b4 <atof>:
 808e6b4:	2100      	movs	r1, #0
 808e6b6:	f001 bd2f 	b.w	8090118 <strtod>

0808e6ba <atoi>:
 808e6ba:	220a      	movs	r2, #10
 808e6bc:	2100      	movs	r1, #0
 808e6be:	f001 bde7 	b.w	8090290 <strtol>

0808e6c2 <atol>:
 808e6c2:	220a      	movs	r2, #10
 808e6c4:	2100      	movs	r1, #0
 808e6c6:	f001 bde3 	b.w	8090290 <strtol>
	...

0808e6cc <__cxa_atexit>:
 808e6cc:	b510      	push	{r4, lr}
 808e6ce:	4c05      	ldr	r4, [pc, #20]	; (808e6e4 <__cxa_atexit+0x18>)
 808e6d0:	4613      	mov	r3, r2
 808e6d2:	b12c      	cbz	r4, 808e6e0 <__cxa_atexit+0x14>
 808e6d4:	460a      	mov	r2, r1
 808e6d6:	4601      	mov	r1, r0
 808e6d8:	2002      	movs	r0, #2
 808e6da:	f3af 8000 	nop.w
 808e6de:	bd10      	pop	{r4, pc}
 808e6e0:	4620      	mov	r0, r4
 808e6e2:	bd10      	pop	{r4, pc}
 808e6e4:	00000000 	.word	0x00000000

0808e6e8 <localtime>:
 808e6e8:	b538      	push	{r3, r4, r5, lr}
 808e6ea:	4b07      	ldr	r3, [pc, #28]	; (808e708 <localtime+0x20>)
 808e6ec:	4605      	mov	r5, r0
 808e6ee:	681c      	ldr	r4, [r3, #0]
 808e6f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 808e6f2:	b91b      	cbnz	r3, 808e6fc <localtime+0x14>
 808e6f4:	2024      	movs	r0, #36	; 0x24
 808e6f6:	f7fc f97d 	bl	808a9f4 <malloc>
 808e6fa:	63e0      	str	r0, [r4, #60]	; 0x3c
 808e6fc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 808e6fe:	4628      	mov	r0, r5
 808e700:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808e704:	f000 b802 	b.w	808e70c <localtime_r>
 808e708:	20000550 	.word	0x20000550

0808e70c <localtime_r>:
 808e70c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808e710:	460c      	mov	r4, r1
 808e712:	4680      	mov	r8, r0
 808e714:	f002 fc00 	bl	8090f18 <__gettzinfo>
 808e718:	4621      	mov	r1, r4
 808e71a:	4607      	mov	r7, r0
 808e71c:	4640      	mov	r0, r8
 808e71e:	f002 fbff 	bl	8090f20 <gmtime_r>
 808e722:	6946      	ldr	r6, [r0, #20]
 808e724:	4604      	mov	r4, r0
 808e726:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 808e72a:	07b3      	lsls	r3, r6, #30
 808e72c:	d105      	bne.n	808e73a <localtime_r+0x2e>
 808e72e:	2264      	movs	r2, #100	; 0x64
 808e730:	fb96 f3f2 	sdiv	r3, r6, r2
 808e734:	fb02 6313 	mls	r3, r2, r3, r6
 808e738:	b94b      	cbnz	r3, 808e74e <localtime_r+0x42>
 808e73a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 808e73e:	fb96 f3f5 	sdiv	r3, r6, r5
 808e742:	fb05 6513 	mls	r5, r5, r3, r6
 808e746:	fab5 f385 	clz	r3, r5
 808e74a:	095b      	lsrs	r3, r3, #5
 808e74c:	e000      	b.n	808e750 <localtime_r+0x44>
 808e74e:	2301      	movs	r3, #1
 808e750:	4a5f      	ldr	r2, [pc, #380]	; (808e8d0 <localtime_r+0x1c4>)
 808e752:	2530      	movs	r5, #48	; 0x30
 808e754:	fb05 2503 	mla	r5, r5, r3, r2
 808e758:	f001 fef0 	bl	809053c <__tz_lock>
 808e75c:	f001 fef0 	bl	8090540 <_tzset_unlocked>
 808e760:	4b5c      	ldr	r3, [pc, #368]	; (808e8d4 <localtime_r+0x1c8>)
 808e762:	681b      	ldr	r3, [r3, #0]
 808e764:	b1f3      	cbz	r3, 808e7a4 <localtime_r+0x98>
 808e766:	687b      	ldr	r3, [r7, #4]
 808e768:	429e      	cmp	r6, r3
 808e76a:	d105      	bne.n	808e778 <localtime_r+0x6c>
 808e76c:	6839      	ldr	r1, [r7, #0]
 808e76e:	f8d8 3000 	ldr.w	r3, [r8]
 808e772:	69fa      	ldr	r2, [r7, #28]
 808e774:	b941      	cbnz	r1, 808e788 <localtime_r+0x7c>
 808e776:	e00a      	b.n	808e78e <localtime_r+0x82>
 808e778:	4630      	mov	r0, r6
 808e77a:	f001 fe37 	bl	80903ec <__tzcalc_limits>
 808e77e:	2800      	cmp	r0, #0
 808e780:	d1f4      	bne.n	808e76c <localtime_r+0x60>
 808e782:	f04f 33ff 	mov.w	r3, #4294967295
 808e786:	e00d      	b.n	808e7a4 <localtime_r+0x98>
 808e788:	4293      	cmp	r3, r2
 808e78a:	db08      	blt.n	808e79e <localtime_r+0x92>
 808e78c:	e001      	b.n	808e792 <localtime_r+0x86>
 808e78e:	4293      	cmp	r3, r2
 808e790:	da07      	bge.n	808e7a2 <localtime_r+0x96>
 808e792:	6bba      	ldr	r2, [r7, #56]	; 0x38
 808e794:	4293      	cmp	r3, r2
 808e796:	bfac      	ite	ge
 808e798:	2300      	movge	r3, #0
 808e79a:	2301      	movlt	r3, #1
 808e79c:	e002      	b.n	808e7a4 <localtime_r+0x98>
 808e79e:	2300      	movs	r3, #0
 808e7a0:	e000      	b.n	808e7a4 <localtime_r+0x98>
 808e7a2:	2301      	movs	r3, #1
 808e7a4:	6223      	str	r3, [r4, #32]
 808e7a6:	6a23      	ldr	r3, [r4, #32]
 808e7a8:	203c      	movs	r0, #60	; 0x3c
 808e7aa:	2b01      	cmp	r3, #1
 808e7ac:	bf0c      	ite	eq
 808e7ae:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 808e7b0:	6a39      	ldrne	r1, [r7, #32]
 808e7b2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808e7b6:	fb91 f6f3 	sdiv	r6, r1, r3
 808e7ba:	fb03 1316 	mls	r3, r3, r6, r1
 808e7be:	fb93 f2f0 	sdiv	r2, r3, r0
 808e7c2:	fb00 3012 	mls	r0, r0, r2, r3
 808e7c6:	6861      	ldr	r1, [r4, #4]
 808e7c8:	6823      	ldr	r3, [r4, #0]
 808e7ca:	1a89      	subs	r1, r1, r2
 808e7cc:	68a2      	ldr	r2, [r4, #8]
 808e7ce:	1a1b      	subs	r3, r3, r0
 808e7d0:	1b92      	subs	r2, r2, r6
 808e7d2:	2b3b      	cmp	r3, #59	; 0x3b
 808e7d4:	6023      	str	r3, [r4, #0]
 808e7d6:	6061      	str	r1, [r4, #4]
 808e7d8:	60a2      	str	r2, [r4, #8]
 808e7da:	dd03      	ble.n	808e7e4 <localtime_r+0xd8>
 808e7dc:	3101      	adds	r1, #1
 808e7de:	6061      	str	r1, [r4, #4]
 808e7e0:	3b3c      	subs	r3, #60	; 0x3c
 808e7e2:	e004      	b.n	808e7ee <localtime_r+0xe2>
 808e7e4:	2b00      	cmp	r3, #0
 808e7e6:	da03      	bge.n	808e7f0 <localtime_r+0xe4>
 808e7e8:	3901      	subs	r1, #1
 808e7ea:	6061      	str	r1, [r4, #4]
 808e7ec:	333c      	adds	r3, #60	; 0x3c
 808e7ee:	6023      	str	r3, [r4, #0]
 808e7f0:	6863      	ldr	r3, [r4, #4]
 808e7f2:	2b3b      	cmp	r3, #59	; 0x3b
 808e7f4:	dd03      	ble.n	808e7fe <localtime_r+0xf2>
 808e7f6:	3201      	adds	r2, #1
 808e7f8:	60a2      	str	r2, [r4, #8]
 808e7fa:	3b3c      	subs	r3, #60	; 0x3c
 808e7fc:	e004      	b.n	808e808 <localtime_r+0xfc>
 808e7fe:	2b00      	cmp	r3, #0
 808e800:	da03      	bge.n	808e80a <localtime_r+0xfe>
 808e802:	3a01      	subs	r2, #1
 808e804:	60a2      	str	r2, [r4, #8]
 808e806:	333c      	adds	r3, #60	; 0x3c
 808e808:	6063      	str	r3, [r4, #4]
 808e80a:	68a3      	ldr	r3, [r4, #8]
 808e80c:	2b17      	cmp	r3, #23
 808e80e:	dd22      	ble.n	808e856 <localtime_r+0x14a>
 808e810:	69e2      	ldr	r2, [r4, #28]
 808e812:	3b18      	subs	r3, #24
 808e814:	3201      	adds	r2, #1
 808e816:	61e2      	str	r2, [r4, #28]
 808e818:	69a2      	ldr	r2, [r4, #24]
 808e81a:	60a3      	str	r3, [r4, #8]
 808e81c:	3201      	adds	r2, #1
 808e81e:	2a06      	cmp	r2, #6
 808e820:	bfc8      	it	gt
 808e822:	2200      	movgt	r2, #0
 808e824:	61a2      	str	r2, [r4, #24]
 808e826:	68e2      	ldr	r2, [r4, #12]
 808e828:	6923      	ldr	r3, [r4, #16]
 808e82a:	3201      	adds	r2, #1
 808e82c:	60e2      	str	r2, [r4, #12]
 808e82e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 808e832:	428a      	cmp	r2, r1
 808e834:	dd46      	ble.n	808e8c4 <localtime_r+0x1b8>
 808e836:	3301      	adds	r3, #1
 808e838:	2b0c      	cmp	r3, #12
 808e83a:	bf08      	it	eq
 808e83c:	6963      	ldreq	r3, [r4, #20]
 808e83e:	eba2 0201 	sub.w	r2, r2, r1
 808e842:	60e2      	str	r2, [r4, #12]
 808e844:	bf05      	ittet	eq
 808e846:	3301      	addeq	r3, #1
 808e848:	2200      	moveq	r2, #0
 808e84a:	6123      	strne	r3, [r4, #16]
 808e84c:	6122      	streq	r2, [r4, #16]
 808e84e:	bf04      	itt	eq
 808e850:	6163      	streq	r3, [r4, #20]
 808e852:	61e2      	streq	r2, [r4, #28]
 808e854:	e036      	b.n	808e8c4 <localtime_r+0x1b8>
 808e856:	2b00      	cmp	r3, #0
 808e858:	da34      	bge.n	808e8c4 <localtime_r+0x1b8>
 808e85a:	69e2      	ldr	r2, [r4, #28]
 808e85c:	3318      	adds	r3, #24
 808e85e:	3a01      	subs	r2, #1
 808e860:	61e2      	str	r2, [r4, #28]
 808e862:	69a2      	ldr	r2, [r4, #24]
 808e864:	60a3      	str	r3, [r4, #8]
 808e866:	3a01      	subs	r2, #1
 808e868:	bf48      	it	mi
 808e86a:	2206      	movmi	r2, #6
 808e86c:	61a2      	str	r2, [r4, #24]
 808e86e:	68e2      	ldr	r2, [r4, #12]
 808e870:	3a01      	subs	r2, #1
 808e872:	60e2      	str	r2, [r4, #12]
 808e874:	bb32      	cbnz	r2, 808e8c4 <localtime_r+0x1b8>
 808e876:	6923      	ldr	r3, [r4, #16]
 808e878:	3b01      	subs	r3, #1
 808e87a:	d401      	bmi.n	808e880 <localtime_r+0x174>
 808e87c:	6123      	str	r3, [r4, #16]
 808e87e:	e01d      	b.n	808e8bc <localtime_r+0x1b0>
 808e880:	230b      	movs	r3, #11
 808e882:	6123      	str	r3, [r4, #16]
 808e884:	6963      	ldr	r3, [r4, #20]
 808e886:	1e5a      	subs	r2, r3, #1
 808e888:	f012 0f03 	tst.w	r2, #3
 808e88c:	6162      	str	r2, [r4, #20]
 808e88e:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 808e892:	d105      	bne.n	808e8a0 <localtime_r+0x194>
 808e894:	2164      	movs	r1, #100	; 0x64
 808e896:	fb93 f2f1 	sdiv	r2, r3, r1
 808e89a:	fb01 3212 	mls	r2, r1, r2, r3
 808e89e:	b94a      	cbnz	r2, 808e8b4 <localtime_r+0x1a8>
 808e8a0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 808e8a4:	fb93 f2f1 	sdiv	r2, r3, r1
 808e8a8:	fb01 3312 	mls	r3, r1, r2, r3
 808e8ac:	fab3 f383 	clz	r3, r3
 808e8b0:	095b      	lsrs	r3, r3, #5
 808e8b2:	e000      	b.n	808e8b6 <localtime_r+0x1aa>
 808e8b4:	2301      	movs	r3, #1
 808e8b6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 808e8ba:	61e3      	str	r3, [r4, #28]
 808e8bc:	6923      	ldr	r3, [r4, #16]
 808e8be:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 808e8c2:	60e3      	str	r3, [r4, #12]
 808e8c4:	f001 fe3b 	bl	809053e <__tz_unlock>
 808e8c8:	4620      	mov	r0, r4
 808e8ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808e8ce:	bf00      	nop
 808e8d0:	0809477c 	.word	0x0809477c
 808e8d4:	20001838 	.word	0x20001838

0808e8d8 <ldiv>:
 808e8d8:	b510      	push	{r4, lr}
 808e8da:	fb91 f4f2 	sdiv	r4, r1, r2
 808e8de:	2900      	cmp	r1, #0
 808e8e0:	fb02 1314 	mls	r3, r2, r4, r1
 808e8e4:	db04      	blt.n	808e8f0 <ldiv+0x18>
 808e8e6:	2b00      	cmp	r3, #0
 808e8e8:	da07      	bge.n	808e8fa <ldiv+0x22>
 808e8ea:	3401      	adds	r4, #1
 808e8ec:	1a9b      	subs	r3, r3, r2
 808e8ee:	e004      	b.n	808e8fa <ldiv+0x22>
 808e8f0:	2b00      	cmp	r3, #0
 808e8f2:	bfc4      	itt	gt
 808e8f4:	f104 34ff 	addgt.w	r4, r4, #4294967295
 808e8f8:	189b      	addgt	r3, r3, r2
 808e8fa:	6004      	str	r4, [r0, #0]
 808e8fc:	6043      	str	r3, [r0, #4]
 808e8fe:	bd10      	pop	{r4, pc}

0808e900 <_localeconv_r>:
 808e900:	4800      	ldr	r0, [pc, #0]	; (808e904 <_localeconv_r+0x4>)
 808e902:	4770      	bx	lr
 808e904:	20000554 	.word	0x20000554

0808e908 <memcmp>:
 808e908:	b510      	push	{r4, lr}
 808e90a:	3901      	subs	r1, #1
 808e90c:	4402      	add	r2, r0
 808e90e:	4290      	cmp	r0, r2
 808e910:	d007      	beq.n	808e922 <memcmp+0x1a>
 808e912:	f810 3b01 	ldrb.w	r3, [r0], #1
 808e916:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808e91a:	42a3      	cmp	r3, r4
 808e91c:	d0f7      	beq.n	808e90e <memcmp+0x6>
 808e91e:	1b18      	subs	r0, r3, r4
 808e920:	bd10      	pop	{r4, pc}
 808e922:	2000      	movs	r0, #0
 808e924:	bd10      	pop	{r4, pc}

0808e926 <memcpy>:
 808e926:	b510      	push	{r4, lr}
 808e928:	1e43      	subs	r3, r0, #1
 808e92a:	440a      	add	r2, r1
 808e92c:	4291      	cmp	r1, r2
 808e92e:	d004      	beq.n	808e93a <memcpy+0x14>
 808e930:	f811 4b01 	ldrb.w	r4, [r1], #1
 808e934:	f803 4f01 	strb.w	r4, [r3, #1]!
 808e938:	e7f8      	b.n	808e92c <memcpy+0x6>
 808e93a:	bd10      	pop	{r4, pc}

0808e93c <memset>:
 808e93c:	4603      	mov	r3, r0
 808e93e:	4402      	add	r2, r0
 808e940:	4293      	cmp	r3, r2
 808e942:	d002      	beq.n	808e94a <memset+0xe>
 808e944:	f803 1b01 	strb.w	r1, [r3], #1
 808e948:	e7fa      	b.n	808e940 <memset+0x4>
 808e94a:	4770      	bx	lr

0808e94c <srand>:
 808e94c:	b538      	push	{r3, r4, r5, lr}
 808e94e:	4b12      	ldr	r3, [pc, #72]	; (808e998 <srand+0x4c>)
 808e950:	4605      	mov	r5, r0
 808e952:	681c      	ldr	r4, [r3, #0]
 808e954:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 808e956:	b9d3      	cbnz	r3, 808e98e <srand+0x42>
 808e958:	2018      	movs	r0, #24
 808e95a:	f7fc f84b 	bl	808a9f4 <malloc>
 808e95e:	f243 330e 	movw	r3, #13070	; 0x330e
 808e962:	63a0      	str	r0, [r4, #56]	; 0x38
 808e964:	8003      	strh	r3, [r0, #0]
 808e966:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 808e96a:	8043      	strh	r3, [r0, #2]
 808e96c:	f241 2334 	movw	r3, #4660	; 0x1234
 808e970:	8083      	strh	r3, [r0, #4]
 808e972:	f24e 636d 	movw	r3, #58989	; 0xe66d
 808e976:	80c3      	strh	r3, [r0, #6]
 808e978:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 808e97c:	8103      	strh	r3, [r0, #8]
 808e97e:	2305      	movs	r3, #5
 808e980:	8143      	strh	r3, [r0, #10]
 808e982:	230b      	movs	r3, #11
 808e984:	8183      	strh	r3, [r0, #12]
 808e986:	2201      	movs	r2, #1
 808e988:	2300      	movs	r3, #0
 808e98a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 808e98e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 808e990:	2200      	movs	r2, #0
 808e992:	611d      	str	r5, [r3, #16]
 808e994:	615a      	str	r2, [r3, #20]
 808e996:	bd38      	pop	{r3, r4, r5, pc}
 808e998:	20000550 	.word	0x20000550

0808e99c <strchr>:
 808e99c:	b2c9      	uxtb	r1, r1
 808e99e:	4603      	mov	r3, r0
 808e9a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 808e9a4:	b11a      	cbz	r2, 808e9ae <strchr+0x12>
 808e9a6:	4291      	cmp	r1, r2
 808e9a8:	d1f9      	bne.n	808e99e <strchr+0x2>
 808e9aa:	4618      	mov	r0, r3
 808e9ac:	4770      	bx	lr
 808e9ae:	2900      	cmp	r1, #0
 808e9b0:	bf0c      	ite	eq
 808e9b2:	4618      	moveq	r0, r3
 808e9b4:	2000      	movne	r0, #0
 808e9b6:	4770      	bx	lr

0808e9b8 <strcmp>:
 808e9b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 808e9bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 808e9c0:	2a01      	cmp	r2, #1
 808e9c2:	bf28      	it	cs
 808e9c4:	429a      	cmpcs	r2, r3
 808e9c6:	d0f7      	beq.n	808e9b8 <strcmp>
 808e9c8:	1ad0      	subs	r0, r2, r3
 808e9ca:	4770      	bx	lr

0808e9cc <strcpy>:
 808e9cc:	4603      	mov	r3, r0
 808e9ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 808e9d2:	f803 2b01 	strb.w	r2, [r3], #1
 808e9d6:	2a00      	cmp	r2, #0
 808e9d8:	d1f9      	bne.n	808e9ce <strcpy+0x2>
 808e9da:	4770      	bx	lr

0808e9dc <strdup>:
 808e9dc:	4b02      	ldr	r3, [pc, #8]	; (808e9e8 <strdup+0xc>)
 808e9de:	4601      	mov	r1, r0
 808e9e0:	6818      	ldr	r0, [r3, #0]
 808e9e2:	f000 b803 	b.w	808e9ec <_strdup_r>
 808e9e6:	bf00      	nop
 808e9e8:	20000550 	.word	0x20000550

0808e9ec <_strdup_r>:
 808e9ec:	b570      	push	{r4, r5, r6, lr}
 808e9ee:	4606      	mov	r6, r0
 808e9f0:	4608      	mov	r0, r1
 808e9f2:	460c      	mov	r4, r1
 808e9f4:	f000 fd22 	bl	808f43c <strlen>
 808e9f8:	1c45      	adds	r5, r0, #1
 808e9fa:	4629      	mov	r1, r5
 808e9fc:	4630      	mov	r0, r6
 808e9fe:	f7fc f851 	bl	808aaa4 <_malloc_r>
 808ea02:	4606      	mov	r6, r0
 808ea04:	b118      	cbz	r0, 808ea0e <_strdup_r+0x22>
 808ea06:	462a      	mov	r2, r5
 808ea08:	4621      	mov	r1, r4
 808ea0a:	f7ff ff8c 	bl	808e926 <memcpy>
 808ea0e:	4630      	mov	r0, r6
 808ea10:	bd70      	pop	{r4, r5, r6, pc}

0808ea12 <iso_year_adjust>:
 808ea12:	6941      	ldr	r1, [r0, #20]
 808ea14:	b510      	push	{r4, lr}
 808ea16:	078b      	lsls	r3, r1, #30
 808ea18:	d10c      	bne.n	808ea34 <iso_year_adjust+0x22>
 808ea1a:	f240 736c 	movw	r3, #1900	; 0x76c
 808ea1e:	2900      	cmp	r1, #0
 808ea20:	bfa8      	it	ge
 808ea22:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 808ea26:	440b      	add	r3, r1
 808ea28:	2464      	movs	r4, #100	; 0x64
 808ea2a:	fb93 f2f4 	sdiv	r2, r3, r4
 808ea2e:	fb04 3312 	mls	r3, r4, r2, r3
 808ea32:	b983      	cbnz	r3, 808ea56 <iso_year_adjust+0x44>
 808ea34:	f240 736c 	movw	r3, #1900	; 0x76c
 808ea38:	2900      	cmp	r1, #0
 808ea3a:	bfa8      	it	ge
 808ea3c:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 808ea40:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808ea44:	440b      	add	r3, r1
 808ea46:	fb93 f1f2 	sdiv	r1, r3, r2
 808ea4a:	fb02 3311 	mls	r3, r2, r1, r3
 808ea4e:	fab3 f283 	clz	r2, r3
 808ea52:	0952      	lsrs	r2, r2, #5
 808ea54:	e000      	b.n	808ea58 <iso_year_adjust+0x46>
 808ea56:	2201      	movs	r2, #1
 808ea58:	6983      	ldr	r3, [r0, #24]
 808ea5a:	69c1      	ldr	r1, [r0, #28]
 808ea5c:	005b      	lsls	r3, r3, #1
 808ea5e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 808ea62:	4413      	add	r3, r2
 808ea64:	2b21      	cmp	r3, #33	; 0x21
 808ea66:	dc0e      	bgt.n	808ea86 <iso_year_adjust+0x74>
 808ea68:	2b20      	cmp	r3, #32
 808ea6a:	da2f      	bge.n	808eacc <iso_year_adjust+0xba>
 808ea6c:	2b0d      	cmp	r3, #13
 808ea6e:	dc02      	bgt.n	808ea76 <iso_year_adjust+0x64>
 808ea70:	2b0a      	cmp	r3, #10
 808ea72:	db05      	blt.n	808ea80 <iso_year_adjust+0x6e>
 808ea74:	e02a      	b.n	808eacc <iso_year_adjust+0xba>
 808ea76:	2b10      	cmp	r3, #16
 808ea78:	db26      	blt.n	808eac8 <iso_year_adjust+0xb6>
 808ea7a:	2b11      	cmp	r3, #17
 808ea7c:	dd26      	ble.n	808eacc <iso_year_adjust+0xba>
 808ea7e:	3b1c      	subs	r3, #28
 808ea80:	2b01      	cmp	r3, #1
 808ea82:	d923      	bls.n	808eacc <iso_year_adjust+0xba>
 808ea84:	e020      	b.n	808eac8 <iso_year_adjust+0xb6>
 808ea86:	f241 62c6 	movw	r2, #5830	; 0x16c6
 808ea8a:	4293      	cmp	r3, r2
 808ea8c:	dc0e      	bgt.n	808eaac <iso_year_adjust+0x9a>
 808ea8e:	f241 62c2 	movw	r2, #5826	; 0x16c2
 808ea92:	4293      	cmp	r3, r2
 808ea94:	da16      	bge.n	808eac4 <iso_year_adjust+0xb2>
 808ea96:	f241 62a2 	movw	r2, #5794	; 0x16a2
 808ea9a:	4293      	cmp	r3, r2
 808ea9c:	d012      	beq.n	808eac4 <iso_year_adjust+0xb2>
 808ea9e:	db13      	blt.n	808eac8 <iso_year_adjust+0xb6>
 808eaa0:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
 808eaa4:	3b12      	subs	r3, #18
 808eaa6:	2b02      	cmp	r3, #2
 808eaa8:	d90c      	bls.n	808eac4 <iso_year_adjust+0xb2>
 808eaaa:	e00d      	b.n	808eac8 <iso_year_adjust+0xb6>
 808eaac:	f241 62d5 	movw	r2, #5845	; 0x16d5
 808eab0:	4293      	cmp	r3, r2
 808eab2:	d007      	beq.n	808eac4 <iso_year_adjust+0xb2>
 808eab4:	f241 62d7 	movw	r2, #5847	; 0x16d7
 808eab8:	4293      	cmp	r3, r2
 808eaba:	d003      	beq.n	808eac4 <iso_year_adjust+0xb2>
 808eabc:	f241 62d3 	movw	r2, #5843	; 0x16d3
 808eac0:	4293      	cmp	r3, r2
 808eac2:	d101      	bne.n	808eac8 <iso_year_adjust+0xb6>
 808eac4:	2001      	movs	r0, #1
 808eac6:	bd10      	pop	{r4, pc}
 808eac8:	2000      	movs	r0, #0
 808eaca:	bd10      	pop	{r4, pc}
 808eacc:	f04f 30ff 	mov.w	r0, #4294967295
 808ead0:	bd10      	pop	{r4, pc}
	...

0808ead4 <strftime>:
 808ead4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808ead8:	460e      	mov	r6, r1
 808eada:	b093      	sub	sp, #76	; 0x4c
 808eadc:	461d      	mov	r5, r3
 808eade:	4607      	mov	r7, r0
 808eae0:	4691      	mov	r9, r2
 808eae2:	f001 fc67 	bl	80903b4 <__get_current_time_locale>
 808eae6:	2300      	movs	r3, #0
 808eae8:	9306      	str	r3, [sp, #24]
 808eaea:	461c      	mov	r4, r3
 808eaec:	1e73      	subs	r3, r6, #1
 808eaee:	9003      	str	r0, [sp, #12]
 808eaf0:	9302      	str	r3, [sp, #8]
 808eaf2:	f899 3000 	ldrb.w	r3, [r9]
 808eaf6:	2b00      	cmp	r3, #0
 808eaf8:	f000 8492 	beq.w	808f420 <strftime+0x94c>
 808eafc:	2b25      	cmp	r3, #37	; 0x25
 808eafe:	d008      	beq.n	808eb12 <strftime+0x3e>
 808eb00:	9a02      	ldr	r2, [sp, #8]
 808eb02:	4294      	cmp	r4, r2
 808eb04:	f080 8490 	bcs.w	808f428 <strftime+0x954>
 808eb08:	553b      	strb	r3, [r7, r4]
 808eb0a:	f109 0901 	add.w	r9, r9, #1
 808eb0e:	3401      	adds	r4, #1
 808eb10:	e7ef      	b.n	808eaf2 <strftime+0x1e>
 808eb12:	f899 a001 	ldrb.w	sl, [r9, #1]
 808eb16:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 808eb1a:	d007      	beq.n	808eb2c <strftime+0x58>
 808eb1c:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808eb20:	d004      	beq.n	808eb2c <strftime+0x58>
 808eb22:	f109 0901 	add.w	r9, r9, #1
 808eb26:	f04f 0a00 	mov.w	sl, #0
 808eb2a:	e001      	b.n	808eb30 <strftime+0x5c>
 808eb2c:	f109 0902 	add.w	r9, r9, #2
 808eb30:	f899 3000 	ldrb.w	r3, [r9]
 808eb34:	3b31      	subs	r3, #49	; 0x31
 808eb36:	2b08      	cmp	r3, #8
 808eb38:	d808      	bhi.n	808eb4c <strftime+0x78>
 808eb3a:	4648      	mov	r0, r9
 808eb3c:	220a      	movs	r2, #10
 808eb3e:	a90a      	add	r1, sp, #40	; 0x28
 808eb40:	f001 fc2e 	bl	80903a0 <strtoul>
 808eb44:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 808eb48:	4680      	mov	r8, r0
 808eb4a:	e001      	b.n	808eb50 <strftime+0x7c>
 808eb4c:	f04f 0800 	mov.w	r8, #0
 808eb50:	f899 3000 	ldrb.w	r3, [r9]
 808eb54:	2b45      	cmp	r3, #69	; 0x45
 808eb56:	d001      	beq.n	808eb5c <strftime+0x88>
 808eb58:	2b4f      	cmp	r3, #79	; 0x4f
 808eb5a:	d101      	bne.n	808eb60 <strftime+0x8c>
 808eb5c:	f109 0901 	add.w	r9, r9, #1
 808eb60:	f899 0000 	ldrb.w	r0, [r9]
 808eb64:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 808eb68:	2b55      	cmp	r3, #85	; 0x55
 808eb6a:	f200 845d 	bhi.w	808f428 <strftime+0x954>
 808eb6e:	e8df f013 	tbh	[pc, r3, lsl #1]
 808eb72:	044a      	.short	0x044a
 808eb74:	045b045b 	.word	0x045b045b
 808eb78:	045b045b 	.word	0x045b045b
 808eb7c:	045b045b 	.word	0x045b045b
 808eb80:	045b045b 	.word	0x045b045b
 808eb84:	045b045b 	.word	0x045b045b
 808eb88:	045b045b 	.word	0x045b045b
 808eb8c:	045b045b 	.word	0x045b045b
 808eb90:	045b045b 	.word	0x045b045b
 808eb94:	045b045b 	.word	0x045b045b
 808eb98:	045b045b 	.word	0x045b045b
 808eb9c:	045b045b 	.word	0x045b045b
 808eba0:	045b045b 	.word	0x045b045b
 808eba4:	045b045b 	.word	0x045b045b
 808eba8:	006f045b 	.word	0x006f045b
 808ebac:	00d400a1 	.word	0x00d400a1
 808ebb0:	045b011a 	.word	0x045b011a
 808ebb4:	01a0013f 	.word	0x01a0013f
 808ebb8:	022d0226 	.word	0x022d0226
 808ebbc:	045b045b 	.word	0x045b045b
 808ebc0:	0260045b 	.word	0x0260045b
 808ebc4:	045b045b 	.word	0x045b045b
 808ebc8:	045b0268 	.word	0x045b0268
 808ebcc:	031c0296 	.word	0x031c0296
 808ebd0:	033a0324 	.word	0x033a0324
 808ebd4:	03850342 	.word	0x03850342
 808ebd8:	039f00c6 	.word	0x039f00c6
 808ebdc:	045b041f 	.word	0x045b041f
 808ebe0:	045b045b 	.word	0x045b045b
 808ebe4:	045b045b 	.word	0x045b045b
 808ebe8:	0056045b 	.word	0x0056045b
 808ebec:	00ba0089 	.word	0x00ba0089
 808ebf0:	010c010c 	.word	0x010c010c
 808ebf4:	0171045b 	.word	0x0171045b
 808ebf8:	045b0089 	.word	0x045b0089
 808ebfc:	0226023d 	.word	0x0226023d
 808ec00:	025d022d 	.word	0x025d022d
 808ec04:	045b0262 	.word	0x045b0262
 808ec08:	045b0268 	.word	0x045b0268
 808ec0c:	029b00be 	.word	0x029b00be
 808ec10:	032d031e 	.word	0x032d031e
 808ec14:	037e045b 	.word	0x037e045b
 808ec18:	039100c2 	.word	0x039100c2
 808ec1c:	03e7      	.short	0x03e7
 808ec1e:	69ab      	ldr	r3, [r5, #24]
 808ec20:	9a03      	ldr	r2, [sp, #12]
 808ec22:	3318      	adds	r3, #24
 808ec24:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808ec28:	4640      	mov	r0, r8
 808ec2a:	f000 fc07 	bl	808f43c <strlen>
 808ec2e:	f108 38ff 	add.w	r8, r8, #4294967295
 808ec32:	193b      	adds	r3, r7, r4
 808ec34:	4420      	add	r0, r4
 808ec36:	4284      	cmp	r4, r0
 808ec38:	f000 83eb 	beq.w	808f412 <strftime+0x93e>
 808ec3c:	9a02      	ldr	r2, [sp, #8]
 808ec3e:	4294      	cmp	r4, r2
 808ec40:	f080 83f2 	bcs.w	808f428 <strftime+0x954>
 808ec44:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808ec48:	3401      	adds	r4, #1
 808ec4a:	f803 2b01 	strb.w	r2, [r3], #1
 808ec4e:	e7f2      	b.n	808ec36 <strftime+0x162>
 808ec50:	69ab      	ldr	r3, [r5, #24]
 808ec52:	9a03      	ldr	r2, [sp, #12]
 808ec54:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 808ec58:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
 808ec5c:	4640      	mov	r0, r8
 808ec5e:	f000 fbed 	bl	808f43c <strlen>
 808ec62:	f108 38ff 	add.w	r8, r8, #4294967295
 808ec66:	193b      	adds	r3, r7, r4
 808ec68:	4420      	add	r0, r4
 808ec6a:	4284      	cmp	r4, r0
 808ec6c:	f000 83d1 	beq.w	808f412 <strftime+0x93e>
 808ec70:	9a02      	ldr	r2, [sp, #8]
 808ec72:	4294      	cmp	r4, r2
 808ec74:	f080 83d8 	bcs.w	808f428 <strftime+0x954>
 808ec78:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808ec7c:	3401      	adds	r4, #1
 808ec7e:	f803 2b01 	strb.w	r2, [r3], #1
 808ec82:	e7f2      	b.n	808ec6a <strftime+0x196>
 808ec84:	692b      	ldr	r3, [r5, #16]
 808ec86:	9a03      	ldr	r2, [sp, #12]
 808ec88:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808ec8c:	4640      	mov	r0, r8
 808ec8e:	f000 fbd5 	bl	808f43c <strlen>
 808ec92:	f108 38ff 	add.w	r8, r8, #4294967295
 808ec96:	193b      	adds	r3, r7, r4
 808ec98:	4420      	add	r0, r4
 808ec9a:	4284      	cmp	r4, r0
 808ec9c:	f000 83b9 	beq.w	808f412 <strftime+0x93e>
 808eca0:	9a02      	ldr	r2, [sp, #8]
 808eca2:	4294      	cmp	r4, r2
 808eca4:	f080 83c0 	bcs.w	808f428 <strftime+0x954>
 808eca8:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808ecac:	3401      	adds	r4, #1
 808ecae:	f803 2b01 	strb.w	r2, [r3], #1
 808ecb2:	e7f2      	b.n	808ec9a <strftime+0x1c6>
 808ecb4:	692b      	ldr	r3, [r5, #16]
 808ecb6:	9a03      	ldr	r2, [sp, #12]
 808ecb8:	330c      	adds	r3, #12
 808ecba:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808ecbe:	4640      	mov	r0, r8
 808ecc0:	f000 fbbc 	bl	808f43c <strlen>
 808ecc4:	f108 38ff 	add.w	r8, r8, #4294967295
 808ecc8:	193b      	adds	r3, r7, r4
 808ecca:	4420      	add	r0, r4
 808eccc:	4284      	cmp	r4, r0
 808ecce:	f000 83a0 	beq.w	808f412 <strftime+0x93e>
 808ecd2:	9a02      	ldr	r2, [sp, #8]
 808ecd4:	4294      	cmp	r4, r2
 808ecd6:	f080 83a7 	bcs.w	808f428 <strftime+0x954>
 808ecda:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808ecde:	3401      	adds	r4, #1
 808ece0:	f803 2b01 	strb.w	r2, [r3], #1
 808ece4:	e7f2      	b.n	808eccc <strftime+0x1f8>
 808ece6:	9b03      	ldr	r3, [sp, #12]
 808ece8:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
 808ecec:	e00a      	b.n	808ed04 <strftime+0x230>
 808ecee:	9b03      	ldr	r3, [sp, #12]
 808ecf0:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
 808ecf4:	e006      	b.n	808ed04 <strftime+0x230>
 808ecf6:	9b03      	ldr	r3, [sp, #12]
 808ecf8:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
 808ecfc:	e002      	b.n	808ed04 <strftime+0x230>
 808ecfe:	9b03      	ldr	r3, [sp, #12]
 808ed00:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
 808ed04:	4640      	mov	r0, r8
 808ed06:	f000 fb99 	bl	808f43c <strlen>
 808ed0a:	f898 3000 	ldrb.w	r3, [r8]
 808ed0e:	2b00      	cmp	r3, #0
 808ed10:	f000 837f 	beq.w	808f412 <strftime+0x93e>
 808ed14:	462b      	mov	r3, r5
 808ed16:	4642      	mov	r2, r8
 808ed18:	e093      	b.n	808ee42 <strftime+0x36e>
 808ed1a:	49b6      	ldr	r1, [pc, #728]	; (808eff4 <strftime+0x520>)
 808ed1c:	f8d5 b014 	ldr.w	fp, [r5, #20]
 808ed20:	458b      	cmp	fp, r1
 808ed22:	bfac      	ite	ge
 808ed24:	2100      	movge	r1, #0
 808ed26:	2101      	movlt	r1, #1
 808ed28:	f1bb 0f00 	cmp.w	fp, #0
 808ed2c:	db04      	blt.n	808ed38 <strftime+0x264>
 808ed2e:	2064      	movs	r0, #100	; 0x64
 808ed30:	fb9b f0f0 	sdiv	r0, fp, r0
 808ed34:	3013      	adds	r0, #19
 808ed36:	e008      	b.n	808ed4a <strftime+0x276>
 808ed38:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
 808ed3c:	9107      	str	r1, [sp, #28]
 808ed3e:	f001 fd85 	bl	809084c <abs>
 808ed42:	2364      	movs	r3, #100	; 0x64
 808ed44:	fb90 f0f3 	sdiv	r0, r0, r3
 808ed48:	9907      	ldr	r1, [sp, #28]
 808ed4a:	f1ba 0f00 	cmp.w	sl, #0
 808ed4e:	d008      	beq.n	808ed62 <strftime+0x28e>
 808ed50:	2863      	cmp	r0, #99	; 0x63
 808ed52:	dd09      	ble.n	808ed68 <strftime+0x294>
 808ed54:	4ba8      	ldr	r3, [pc, #672]	; (808eff8 <strftime+0x524>)
 808ed56:	4aa9      	ldr	r2, [pc, #676]	; (808effc <strftime+0x528>)
 808ed58:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808ed5c:	bf18      	it	ne
 808ed5e:	4613      	movne	r3, r2
 808ed60:	e003      	b.n	808ed6a <strftime+0x296>
 808ed62:	4ba6      	ldr	r3, [pc, #664]	; (808effc <strftime+0x528>)
 808ed64:	4aa6      	ldr	r2, [pc, #664]	; (808f000 <strftime+0x52c>)
 808ed66:	e001      	b.n	808ed6c <strftime+0x298>
 808ed68:	4ba4      	ldr	r3, [pc, #656]	; (808effc <strftime+0x528>)
 808ed6a:	4aa6      	ldr	r2, [pc, #664]	; (808f004 <strftime+0x530>)
 808ed6c:	f1b8 0f01 	cmp.w	r8, #1
 808ed70:	bf98      	it	ls
 808ed72:	f04f 0802 	movls.w	r8, #2
 808ed76:	ebc1 0108 	rsb	r1, r1, r8
 808ed7a:	9001      	str	r0, [sp, #4]
 808ed7c:	9100      	str	r1, [sp, #0]
 808ed7e:	489d      	ldr	r0, [pc, #628]	; (808eff4 <strftime+0x520>)
 808ed80:	49a1      	ldr	r1, [pc, #644]	; (808f008 <strftime+0x534>)
 808ed82:	4583      	cmp	fp, r0
 808ed84:	bfb8      	it	lt
 808ed86:	460b      	movlt	r3, r1
 808ed88:	e21d      	b.n	808f1c6 <strftime+0x6f2>
 808ed8a:	4aa0      	ldr	r2, [pc, #640]	; (808f00c <strftime+0x538>)
 808ed8c:	49a0      	ldr	r1, [pc, #640]	; (808f010 <strftime+0x53c>)
 808ed8e:	68eb      	ldr	r3, [r5, #12]
 808ed90:	2864      	cmp	r0, #100	; 0x64
 808ed92:	bf08      	it	eq
 808ed94:	460a      	moveq	r2, r1
 808ed96:	1b31      	subs	r1, r6, r4
 808ed98:	1938      	adds	r0, r7, r4
 808ed9a:	f7fb fe6b 	bl	808aa74 <sniprintf>
 808ed9e:	2800      	cmp	r0, #0
 808eda0:	f280 8302 	bge.w	808f3a8 <strftime+0x8d4>
 808eda4:	e340      	b.n	808f428 <strftime+0x954>
 808eda6:	6968      	ldr	r0, [r5, #20]
 808eda8:	692b      	ldr	r3, [r5, #16]
 808edaa:	2800      	cmp	r0, #0
 808edac:	f103 0b01 	add.w	fp, r3, #1
 808edb0:	eb07 0804 	add.w	r8, r7, r4
 808edb4:	ebc4 0a06 	rsb	sl, r4, r6
 808edb8:	68eb      	ldr	r3, [r5, #12]
 808edba:	db05      	blt.n	808edc8 <strftime+0x2f4>
 808edbc:	2264      	movs	r2, #100	; 0x64
 808edbe:	fb90 f1f2 	sdiv	r1, r0, r2
 808edc2:	fb02 0011 	mls	r0, r2, r1, r0
 808edc6:	e00a      	b.n	808edde <strftime+0x30a>
 808edc8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808edcc:	9307      	str	r3, [sp, #28]
 808edce:	f001 fd3d 	bl	809084c <abs>
 808edd2:	2264      	movs	r2, #100	; 0x64
 808edd4:	fb90 f1f2 	sdiv	r1, r0, r2
 808edd8:	fb01 0012 	mls	r0, r1, r2, r0
 808eddc:	9b07      	ldr	r3, [sp, #28]
 808edde:	9001      	str	r0, [sp, #4]
 808ede0:	9300      	str	r3, [sp, #0]
 808ede2:	4651      	mov	r1, sl
 808ede4:	465b      	mov	r3, fp
 808ede6:	4640      	mov	r0, r8
 808ede8:	4a8a      	ldr	r2, [pc, #552]	; (808f014 <strftime+0x540>)
 808edea:	f7fb fe43 	bl	808aa74 <sniprintf>
 808edee:	e7d6      	b.n	808ed9e <strftime+0x2ca>
 808edf0:	2325      	movs	r3, #37	; 0x25
 808edf2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 808edf6:	f1ba 0f00 	cmp.w	sl, #0
 808edfa:	d007      	beq.n	808ee0c <strftime+0x338>
 808edfc:	f1b8 0f05 	cmp.w	r8, #5
 808ee00:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
 808ee04:	bf98      	it	ls
 808ee06:	f04f 0806 	movls.w	r8, #6
 808ee0a:	e004      	b.n	808ee16 <strftime+0x342>
 808ee0c:	232b      	movs	r3, #43	; 0x2b
 808ee0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 808ee12:	f04f 080a 	mov.w	r8, #10
 808ee16:	f1b8 0306 	subs.w	r3, r8, #6
 808ee1a:	d102      	bne.n	808ee22 <strftime+0x34e>
 808ee1c:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 808ee20:	e00a      	b.n	808ee38 <strftime+0x364>
 808ee22:	4a7d      	ldr	r2, [pc, #500]	; (808f018 <strftime+0x544>)
 808ee24:	211e      	movs	r1, #30
 808ee26:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 808ee2a:	f7fb fe23 	bl	808aa74 <sniprintf>
 808ee2e:	2800      	cmp	r0, #0
 808ee30:	ddf4      	ble.n	808ee1c <strftime+0x348>
 808ee32:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 808ee36:	4418      	add	r0, r3
 808ee38:	4978      	ldr	r1, [pc, #480]	; (808f01c <strftime+0x548>)
 808ee3a:	f7ff fdc7 	bl	808e9cc <strcpy>
 808ee3e:	462b      	mov	r3, r5
 808ee40:	aa0a      	add	r2, sp, #40	; 0x28
 808ee42:	1b31      	subs	r1, r6, r4
 808ee44:	1938      	adds	r0, r7, r4
 808ee46:	f7ff fe45 	bl	808ead4 <strftime>
 808ee4a:	2800      	cmp	r0, #0
 808ee4c:	f340 82ec 	ble.w	808f428 <strftime+0x954>
 808ee50:	4404      	add	r4, r0
 808ee52:	e2de      	b.n	808f412 <strftime+0x93e>
 808ee54:	4628      	mov	r0, r5
 808ee56:	f7ff fddc 	bl	808ea12 <iso_year_adjust>
 808ee5a:	4680      	mov	r8, r0
 808ee5c:	6968      	ldr	r0, [r5, #20]
 808ee5e:	2800      	cmp	r0, #0
 808ee60:	db05      	blt.n	808ee6e <strftime+0x39a>
 808ee62:	2264      	movs	r2, #100	; 0x64
 808ee64:	fb90 f1f2 	sdiv	r1, r0, r2
 808ee68:	fb02 0011 	mls	r0, r2, r1, r0
 808ee6c:	e008      	b.n	808ee80 <strftime+0x3ac>
 808ee6e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808ee72:	f001 fceb 	bl	809084c <abs>
 808ee76:	2264      	movs	r2, #100	; 0x64
 808ee78:	fb90 f3f2 	sdiv	r3, r0, r2
 808ee7c:	fb03 0012 	mls	r0, r3, r2, r0
 808ee80:	f1b8 0f00 	cmp.w	r8, #0
 808ee84:	da06      	bge.n	808ee94 <strftime+0x3c0>
 808ee86:	696a      	ldr	r2, [r5, #20]
 808ee88:	4b65      	ldr	r3, [pc, #404]	; (808f020 <strftime+0x54c>)
 808ee8a:	429a      	cmp	r2, r3
 808ee8c:	bfb8      	it	lt
 808ee8e:	f04f 0801 	movlt.w	r8, #1
 808ee92:	e006      	b.n	808eea2 <strftime+0x3ce>
 808ee94:	d005      	beq.n	808eea2 <strftime+0x3ce>
 808ee96:	696a      	ldr	r2, [r5, #20]
 808ee98:	4b56      	ldr	r3, [pc, #344]	; (808eff4 <strftime+0x520>)
 808ee9a:	429a      	cmp	r2, r3
 808ee9c:	bfb8      	it	lt
 808ee9e:	f04f 38ff 	movlt.w	r8, #4294967295
 808eea2:	2364      	movs	r3, #100	; 0x64
 808eea4:	4440      	add	r0, r8
 808eea6:	fb90 f2f3 	sdiv	r2, r0, r3
 808eeaa:	fb03 0012 	mls	r0, r3, r2, r0
 808eeae:	4418      	add	r0, r3
 808eeb0:	e1f8      	b.n	808f2a4 <strftime+0x7d0>
 808eeb2:	4b50      	ldr	r3, [pc, #320]	; (808eff4 <strftime+0x520>)
 808eeb4:	6969      	ldr	r1, [r5, #20]
 808eeb6:	4628      	mov	r0, r5
 808eeb8:	4299      	cmp	r1, r3
 808eeba:	bfac      	ite	ge
 808eebc:	2300      	movge	r3, #0
 808eebe:	2301      	movlt	r3, #1
 808eec0:	9108      	str	r1, [sp, #32]
 808eec2:	9307      	str	r3, [sp, #28]
 808eec4:	f7ff fda5 	bl	808ea12 <iso_year_adjust>
 808eec8:	9908      	ldr	r1, [sp, #32]
 808eeca:	4683      	mov	fp, r0
 808eecc:	2900      	cmp	r1, #0
 808eece:	db04      	blt.n	808eeda <strftime+0x406>
 808eed0:	2364      	movs	r3, #100	; 0x64
 808eed2:	fb91 f3f3 	sdiv	r3, r1, r3
 808eed6:	3313      	adds	r3, #19
 808eed8:	e008      	b.n	808eeec <strftime+0x418>
 808eeda:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 808eede:	9108      	str	r1, [sp, #32]
 808eee0:	f001 fcb4 	bl	809084c <abs>
 808eee4:	2364      	movs	r3, #100	; 0x64
 808eee6:	fb90 f3f3 	sdiv	r3, r0, r3
 808eeea:	9908      	ldr	r1, [sp, #32]
 808eeec:	6968      	ldr	r0, [r5, #20]
 808eeee:	2800      	cmp	r0, #0
 808eef0:	db06      	blt.n	808ef00 <strftime+0x42c>
 808eef2:	f04f 0e64 	mov.w	lr, #100	; 0x64
 808eef6:	fb90 fcfe 	sdiv	ip, r0, lr
 808eefa:	fb0e 001c 	mls	r0, lr, ip, r0
 808eefe:	e00d      	b.n	808ef1c <strftime+0x448>
 808ef00:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808ef04:	9109      	str	r1, [sp, #36]	; 0x24
 808ef06:	9308      	str	r3, [sp, #32]
 808ef08:	f001 fca0 	bl	809084c <abs>
 808ef0c:	f04f 0e64 	mov.w	lr, #100	; 0x64
 808ef10:	fb90 fcfe 	sdiv	ip, r0, lr
 808ef14:	fb0c 001e 	mls	r0, ip, lr, r0
 808ef18:	9909      	ldr	r1, [sp, #36]	; 0x24
 808ef1a:	9b08      	ldr	r3, [sp, #32]
 808ef1c:	f1bb 0f00 	cmp.w	fp, #0
 808ef20:	da08      	bge.n	808ef34 <strftime+0x460>
 808ef22:	6969      	ldr	r1, [r5, #20]
 808ef24:	4a3e      	ldr	r2, [pc, #248]	; (808f020 <strftime+0x54c>)
 808ef26:	4291      	cmp	r1, r2
 808ef28:	da0a      	bge.n	808ef40 <strftime+0x46c>
 808ef2a:	f04f 0b01 	mov.w	fp, #1
 808ef2e:	f8cd b01c 	str.w	fp, [sp, #28]
 808ef32:	e005      	b.n	808ef40 <strftime+0x46c>
 808ef34:	d004      	beq.n	808ef40 <strftime+0x46c>
 808ef36:	4a2f      	ldr	r2, [pc, #188]	; (808eff4 <strftime+0x520>)
 808ef38:	4291      	cmp	r1, r2
 808ef3a:	bfb8      	it	lt
 808ef3c:	f04f 3bff 	movlt.w	fp, #4294967295
 808ef40:	eb0b 0200 	add.w	r2, fp, r0
 808ef44:	1c50      	adds	r0, r2, #1
 808ef46:	d102      	bne.n	808ef4e <strftime+0x47a>
 808ef48:	3b01      	subs	r3, #1
 808ef4a:	2263      	movs	r2, #99	; 0x63
 808ef4c:	e003      	b.n	808ef56 <strftime+0x482>
 808ef4e:	2a64      	cmp	r2, #100	; 0x64
 808ef50:	bf04      	itt	eq
 808ef52:	3301      	addeq	r3, #1
 808ef54:	2200      	moveq	r2, #0
 808ef56:	2064      	movs	r0, #100	; 0x64
 808ef58:	fb00 2303 	mla	r3, r0, r3, r2
 808ef5c:	9a07      	ldr	r2, [sp, #28]
 808ef5e:	b142      	cbz	r2, 808ef72 <strftime+0x49e>
 808ef60:	222d      	movs	r2, #45	; 0x2d
 808ef62:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
 808ef66:	f1b8 0f00 	cmp.w	r8, #0
 808ef6a:	d013      	beq.n	808ef94 <strftime+0x4c0>
 808ef6c:	f108 38ff 	add.w	r8, r8, #4294967295
 808ef70:	e010      	b.n	808ef94 <strftime+0x4c0>
 808ef72:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808ef76:	d110      	bne.n	808ef9a <strftime+0x4c6>
 808ef78:	f242 720f 	movw	r2, #9999	; 0x270f
 808ef7c:	4293      	cmp	r3, r2
 808ef7e:	d90c      	bls.n	808ef9a <strftime+0x4c6>
 808ef80:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 808ef84:	f1b8 0f00 	cmp.w	r8, #0
 808ef88:	d1f0      	bne.n	808ef6c <strftime+0x498>
 808ef8a:	aa12      	add	r2, sp, #72	; 0x48
 808ef8c:	2125      	movs	r1, #37	; 0x25
 808ef8e:	f802 1d1f 	strb.w	r1, [r2, #-31]!
 808ef92:	e00a      	b.n	808efaa <strftime+0x4d6>
 808ef94:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 808ef98:	e000      	b.n	808ef9c <strftime+0x4c8>
 808ef9a:	aa0a      	add	r2, sp, #40	; 0x28
 808ef9c:	2125      	movs	r1, #37	; 0x25
 808ef9e:	7011      	strb	r1, [r2, #0]
 808efa0:	f1ba 0f00 	cmp.w	sl, #0
 808efa4:	d101      	bne.n	808efaa <strftime+0x4d6>
 808efa6:	1c50      	adds	r0, r2, #1
 808efa8:	e002      	b.n	808efb0 <strftime+0x4dc>
 808efaa:	2130      	movs	r1, #48	; 0x30
 808efac:	1c90      	adds	r0, r2, #2
 808efae:	7051      	strb	r1, [r2, #1]
 808efb0:	491c      	ldr	r1, [pc, #112]	; (808f024 <strftime+0x550>)
 808efb2:	9307      	str	r3, [sp, #28]
 808efb4:	f7ff fd0a 	bl	808e9cc <strcpy>
 808efb8:	9b07      	ldr	r3, [sp, #28]
 808efba:	9300      	str	r3, [sp, #0]
 808efbc:	e1ac      	b.n	808f318 <strftime+0x844>
 808efbe:	4a14      	ldr	r2, [pc, #80]	; (808f010 <strftime+0x53c>)
 808efc0:	4912      	ldr	r1, [pc, #72]	; (808f00c <strftime+0x538>)
 808efc2:	68ab      	ldr	r3, [r5, #8]
 808efc4:	286b      	cmp	r0, #107	; 0x6b
 808efc6:	bf08      	it	eq
 808efc8:	460a      	moveq	r2, r1
 808efca:	e6e4      	b.n	808ed96 <strftime+0x2c2>
 808efcc:	68a9      	ldr	r1, [r5, #8]
 808efce:	230c      	movs	r3, #12
 808efd0:	b131      	cbz	r1, 808efe0 <strftime+0x50c>
 808efd2:	4299      	cmp	r1, r3
 808efd4:	bf16      	itet	ne
 808efd6:	fb91 f2f3 	sdivne	r2, r1, r3
 808efda:	460b      	moveq	r3, r1
 808efdc:	fb03 1312 	mlsne	r3, r3, r2, r1
 808efe0:	4a0a      	ldr	r2, [pc, #40]	; (808f00c <strftime+0x538>)
 808efe2:	490b      	ldr	r1, [pc, #44]	; (808f010 <strftime+0x53c>)
 808efe4:	2849      	cmp	r0, #73	; 0x49
 808efe6:	bf08      	it	eq
 808efe8:	460a      	moveq	r2, r1
 808efea:	e6d4      	b.n	808ed96 <strftime+0x2c2>
 808efec:	69eb      	ldr	r3, [r5, #28]
 808efee:	4a0e      	ldr	r2, [pc, #56]	; (808f028 <strftime+0x554>)
 808eff0:	3301      	adds	r3, #1
 808eff2:	e6d0      	b.n	808ed96 <strftime+0x2c2>
 808eff4:	fffff894 	.word	0xfffff894
 808eff8:	080947eb 	.word	0x080947eb
 808effc:	08094308 	.word	0x08094308
 808f000:	080947dc 	.word	0x080947dc
 808f004:	080947e3 	.word	0x080947e3
 808f008:	080931b6 	.word	0x080931b6
 808f00c:	080947ed 	.word	0x080947ed
 808f010:	080947fb 	.word	0x080947fb
 808f014:	080947f1 	.word	0x080947f1
 808f018:	08094800 	.word	0x08094800
 808f01c:	08094804 	.word	0x08094804
 808f020:	fffff895 	.word	0xfffff895
 808f024:	0809480c 	.word	0x0809480c
 808f028:	08094810 	.word	0x08094810
 808f02c:	692b      	ldr	r3, [r5, #16]
 808f02e:	3301      	adds	r3, #1
 808f030:	e13c      	b.n	808f2ac <strftime+0x7d8>
 808f032:	686b      	ldr	r3, [r5, #4]
 808f034:	e13a      	b.n	808f2ac <strftime+0x7d8>
 808f036:	9b02      	ldr	r3, [sp, #8]
 808f038:	429c      	cmp	r4, r3
 808f03a:	f080 81f5 	bcs.w	808f428 <strftime+0x954>
 808f03e:	230a      	movs	r3, #10
 808f040:	e1e5      	b.n	808f40e <strftime+0x93a>
 808f042:	68ab      	ldr	r3, [r5, #8]
 808f044:	9a03      	ldr	r2, [sp, #12]
 808f046:	2b0b      	cmp	r3, #11
 808f048:	bfcc      	ite	gt
 808f04a:	23a4      	movgt	r3, #164	; 0xa4
 808f04c:	23a0      	movle	r3, #160	; 0xa0
 808f04e:	4413      	add	r3, r2
 808f050:	f8d3 8004 	ldr.w	r8, [r3, #4]
 808f054:	4640      	mov	r0, r8
 808f056:	f000 f9f1 	bl	808f43c <strlen>
 808f05a:	4642      	mov	r2, r8
 808f05c:	4bb1      	ldr	r3, [pc, #708]	; (808f324 <strftime+0x850>)
 808f05e:	1939      	adds	r1, r7, r4
 808f060:	f8d3 e000 	ldr.w	lr, [r3]
 808f064:	4420      	add	r0, r4
 808f066:	4284      	cmp	r4, r0
 808f068:	f000 81d3 	beq.w	808f412 <strftime+0x93e>
 808f06c:	9b02      	ldr	r3, [sp, #8]
 808f06e:	429c      	cmp	r4, r3
 808f070:	f080 81da 	bcs.w	808f428 <strftime+0x954>
 808f074:	f899 3000 	ldrb.w	r3, [r9]
 808f078:	3401      	adds	r4, #1
 808f07a:	2b50      	cmp	r3, #80	; 0x50
 808f07c:	7813      	ldrb	r3, [r2, #0]
 808f07e:	d10a      	bne.n	808f096 <strftime+0x5c2>
 808f080:	eb0e 0c03 	add.w	ip, lr, r3
 808f084:	f89c c001 	ldrb.w	ip, [ip, #1]
 808f088:	f00c 0c03 	and.w	ip, ip, #3
 808f08c:	f1bc 0f01 	cmp.w	ip, #1
 808f090:	bf08      	it	eq
 808f092:	3320      	addeq	r3, #32
 808f094:	b2db      	uxtb	r3, r3
 808f096:	f801 3b01 	strb.w	r3, [r1], #1
 808f09a:	3201      	adds	r2, #1
 808f09c:	e7e3      	b.n	808f066 <strftime+0x592>
 808f09e:	686b      	ldr	r3, [r5, #4]
 808f0a0:	4aa1      	ldr	r2, [pc, #644]	; (808f328 <strftime+0x854>)
 808f0a2:	9300      	str	r3, [sp, #0]
 808f0a4:	68ab      	ldr	r3, [r5, #8]
 808f0a6:	e139      	b.n	808f31c <strftime+0x848>
 808f0a8:	6a2b      	ldr	r3, [r5, #32]
 808f0aa:	2b00      	cmp	r3, #0
 808f0ac:	db17      	blt.n	808f0de <strftime+0x60a>
 808f0ae:	f001 fa45 	bl	809053c <__tz_lock>
 808f0b2:	9b06      	ldr	r3, [sp, #24]
 808f0b4:	b91b      	cbnz	r3, 808f0be <strftime+0x5ea>
 808f0b6:	f001 fa43 	bl	8090540 <_tzset_unlocked>
 808f0ba:	2301      	movs	r3, #1
 808f0bc:	9306      	str	r3, [sp, #24]
 808f0be:	f001 ff2b 	bl	8090f18 <__gettzinfo>
 808f0c2:	6a2b      	ldr	r3, [r5, #32]
 808f0c4:	221c      	movs	r2, #28
 808f0c6:	2b00      	cmp	r3, #0
 808f0c8:	bfd4      	ite	le
 808f0ca:	2300      	movle	r3, #0
 808f0cc:	2301      	movgt	r3, #1
 808f0ce:	fb02 0003 	mla	r0, r2, r3, r0
 808f0d2:	6a03      	ldr	r3, [r0, #32]
 808f0d4:	f1c3 0800 	rsb	r8, r3, #0
 808f0d8:	f001 fa31 	bl	809053e <__tz_unlock>
 808f0dc:	e001      	b.n	808f0e2 <strftime+0x60e>
 808f0de:	f04f 0800 	mov.w	r8, #0
 808f0e2:	f8d5 e014 	ldr.w	lr, [r5, #20]
 808f0e6:	ebc4 0c06 	rsb	ip, r4, r6
 808f0ea:	4670      	mov	r0, lr
 808f0ec:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
 808f0f0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 808f0f4:	f141 33ff 	adc.w	r3, r1, #4294967295
 808f0f8:	2a00      	cmp	r2, #0
 808f0fa:	f173 0b00 	sbcs.w	fp, r3, #0
 808f0fe:	eb07 0a04 	add.w	sl, r7, r4
 808f102:	da03      	bge.n	808f10c <strftime+0x638>
 808f104:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
 808f108:	f141 33ff 	adc.w	r3, r1, #4294967295
 808f10c:	0891      	lsrs	r1, r2, #2
 808f10e:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
 808f112:	109b      	asrs	r3, r3, #2
 808f114:	9104      	str	r1, [sp, #16]
 808f116:	9305      	str	r3, [sp, #20]
 808f118:	f10e 31ff 	add.w	r1, lr, #4294967295
 808f11c:	2364      	movs	r3, #100	; 0x64
 808f11e:	fb91 f1f3 	sdiv	r1, r1, r3
 808f122:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 808f126:	1a52      	subs	r2, r2, r1
 808f128:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
 808f12c:	f20e 102b 	addw	r0, lr, #299	; 0x12b
 808f130:	f44f 71c8 	mov.w	r1, #400	; 0x190
 808f134:	fb90 f1f1 	sdiv	r1, r0, r1
 808f138:	1852      	adds	r2, r2, r1
 808f13a:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 808f13e:	f240 116d 	movw	r1, #365	; 0x16d
 808f142:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
 808f146:	fb01 fe0e 	mul.w	lr, r1, lr
 808f14a:	69e9      	ldr	r1, [r5, #28]
 808f14c:	eb12 020e 	adds.w	r2, r2, lr
 808f150:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
 808f154:	1852      	adds	r2, r2, r1
 808f156:	f04f 0e18 	mov.w	lr, #24
 808f15a:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 808f15e:	fba2 010e 	umull	r0, r1, r2, lr
 808f162:	fb0e 1103 	mla	r1, lr, r3, r1
 808f166:	68ab      	ldr	r3, [r5, #8]
 808f168:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
 808f16c:	18c0      	adds	r0, r0, r3
 808f16e:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 808f172:	fba0 230e 	umull	r2, r3, r0, lr
 808f176:	fb0e 3301 	mla	r3, lr, r1, r3
 808f17a:	6869      	ldr	r1, [r5, #4]
 808f17c:	1852      	adds	r2, r2, r1
 808f17e:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 808f182:	fba2 010e 	umull	r0, r1, r2, lr
 808f186:	fb0e 1103 	mla	r1, lr, r3, r1
 808f18a:	682b      	ldr	r3, [r5, #0]
 808f18c:	4a67      	ldr	r2, [pc, #412]	; (808f32c <strftime+0x858>)
 808f18e:	18c0      	adds	r0, r0, r3
 808f190:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 808f194:	ebb0 0008 	subs.w	r0, r0, r8
 808f198:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
 808f19c:	e9cd 0100 	strd	r0, r1, [sp]
 808f1a0:	4661      	mov	r1, ip
 808f1a2:	4650      	mov	r0, sl
 808f1a4:	f7fb fc66 	bl	808aa74 <sniprintf>
 808f1a8:	e5f9      	b.n	808ed9e <strftime+0x2ca>
 808f1aa:	682b      	ldr	r3, [r5, #0]
 808f1ac:	e07e      	b.n	808f2ac <strftime+0x7d8>
 808f1ae:	9b02      	ldr	r3, [sp, #8]
 808f1b0:	429c      	cmp	r4, r3
 808f1b2:	f080 8139 	bcs.w	808f428 <strftime+0x954>
 808f1b6:	2309      	movs	r3, #9
 808f1b8:	e129      	b.n	808f40e <strftime+0x93a>
 808f1ba:	682b      	ldr	r3, [r5, #0]
 808f1bc:	4a5c      	ldr	r2, [pc, #368]	; (808f330 <strftime+0x85c>)
 808f1be:	9301      	str	r3, [sp, #4]
 808f1c0:	686b      	ldr	r3, [r5, #4]
 808f1c2:	9300      	str	r3, [sp, #0]
 808f1c4:	68ab      	ldr	r3, [r5, #8]
 808f1c6:	1b31      	subs	r1, r6, r4
 808f1c8:	1938      	adds	r0, r7, r4
 808f1ca:	e60e      	b.n	808edea <strftime+0x316>
 808f1cc:	9b02      	ldr	r3, [sp, #8]
 808f1ce:	429c      	cmp	r4, r3
 808f1d0:	f080 812a 	bcs.w	808f428 <strftime+0x954>
 808f1d4:	69ab      	ldr	r3, [r5, #24]
 808f1d6:	1c62      	adds	r2, r4, #1
 808f1d8:	b90b      	cbnz	r3, 808f1de <strftime+0x70a>
 808f1da:	2337      	movs	r3, #55	; 0x37
 808f1dc:	e000      	b.n	808f1e0 <strftime+0x70c>
 808f1de:	3330      	adds	r3, #48	; 0x30
 808f1e0:	553b      	strb	r3, [r7, r4]
 808f1e2:	4614      	mov	r4, r2
 808f1e4:	e115      	b.n	808f412 <strftime+0x93e>
 808f1e6:	69eb      	ldr	r3, [r5, #28]
 808f1e8:	69aa      	ldr	r2, [r5, #24]
 808f1ea:	3307      	adds	r3, #7
 808f1ec:	1a9b      	subs	r3, r3, r2
 808f1ee:	2207      	movs	r2, #7
 808f1f0:	fb93 f3f2 	sdiv	r3, r3, r2
 808f1f4:	e05a      	b.n	808f2ac <strftime+0x7d8>
 808f1f6:	4628      	mov	r0, r5
 808f1f8:	f7ff fc0b 	bl	808ea12 <iso_year_adjust>
 808f1fc:	69aa      	ldr	r2, [r5, #24]
 808f1fe:	b10a      	cbz	r2, 808f204 <strftime+0x730>
 808f200:	1e53      	subs	r3, r2, #1
 808f202:	e000      	b.n	808f206 <strftime+0x732>
 808f204:	2306      	movs	r3, #6
 808f206:	2800      	cmp	r0, #0
 808f208:	dc2f      	bgt.n	808f26a <strftime+0x796>
 808f20a:	69ea      	ldr	r2, [r5, #28]
 808f20c:	d101      	bne.n	808f212 <strftime+0x73e>
 808f20e:	320a      	adds	r2, #10
 808f210:	e03b      	b.n	808f28a <strftime+0x7b6>
 808f212:	f240 716b 	movw	r1, #1899	; 0x76b
 808f216:	1a9a      	subs	r2, r3, r2
 808f218:	696b      	ldr	r3, [r5, #20]
 808f21a:	2b00      	cmp	r3, #0
 808f21c:	bfb4      	ite	lt
 808f21e:	4608      	movlt	r0, r1
 808f220:	f06f 0064 	mvnge.w	r0, #100	; 0x64
 808f224:	4418      	add	r0, r3
 808f226:	0781      	lsls	r1, r0, #30
 808f228:	d107      	bne.n	808f23a <strftime+0x766>
 808f22a:	f04f 0e64 	mov.w	lr, #100	; 0x64
 808f22e:	4601      	mov	r1, r0
 808f230:	fb90 f0fe 	sdiv	r0, r0, lr
 808f234:	fb0e 1110 	mls	r1, lr, r0, r1
 808f238:	b981      	cbnz	r1, 808f25c <strftime+0x788>
 808f23a:	f240 716b 	movw	r1, #1899	; 0x76b
 808f23e:	2b00      	cmp	r3, #0
 808f240:	bfa8      	it	ge
 808f242:	f06f 0164 	mvnge.w	r1, #100	; 0x64
 808f246:	4419      	add	r1, r3
 808f248:	f44f 73c8 	mov.w	r3, #400	; 0x190
 808f24c:	fb91 f0f3 	sdiv	r0, r1, r3
 808f250:	fb03 1110 	mls	r1, r3, r0, r1
 808f254:	fab1 f181 	clz	r1, r1
 808f258:	0949      	lsrs	r1, r1, #5
 808f25a:	e000      	b.n	808f25e <strftime+0x78a>
 808f25c:	2101      	movs	r1, #1
 808f25e:	1a52      	subs	r2, r2, r1
 808f260:	2a05      	cmp	r2, #5
 808f262:	bfb4      	ite	lt
 808f264:	2335      	movlt	r3, #53	; 0x35
 808f266:	2334      	movge	r3, #52	; 0x34
 808f268:	e020      	b.n	808f2ac <strftime+0x7d8>
 808f26a:	2301      	movs	r3, #1
 808f26c:	e01e      	b.n	808f2ac <strftime+0x7d8>
 808f26e:	9b02      	ldr	r3, [sp, #8]
 808f270:	429c      	cmp	r4, r3
 808f272:	f080 80d9 	bcs.w	808f428 <strftime+0x954>
 808f276:	69ab      	ldr	r3, [r5, #24]
 808f278:	3330      	adds	r3, #48	; 0x30
 808f27a:	e0c8      	b.n	808f40e <strftime+0x93a>
 808f27c:	69aa      	ldr	r2, [r5, #24]
 808f27e:	b10a      	cbz	r2, 808f284 <strftime+0x7b0>
 808f280:	1e53      	subs	r3, r2, #1
 808f282:	e000      	b.n	808f286 <strftime+0x7b2>
 808f284:	2306      	movs	r3, #6
 808f286:	69ea      	ldr	r2, [r5, #28]
 808f288:	3207      	adds	r2, #7
 808f28a:	1ad2      	subs	r2, r2, r3
 808f28c:	2307      	movs	r3, #7
 808f28e:	fb92 f3f3 	sdiv	r3, r2, r3
 808f292:	e00b      	b.n	808f2ac <strftime+0x7d8>
 808f294:	6968      	ldr	r0, [r5, #20]
 808f296:	2800      	cmp	r0, #0
 808f298:	da03      	bge.n	808f2a2 <strftime+0x7ce>
 808f29a:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808f29e:	f001 fad5 	bl	809084c <abs>
 808f2a2:	2364      	movs	r3, #100	; 0x64
 808f2a4:	fb90 f2f3 	sdiv	r2, r0, r3
 808f2a8:	fb02 0313 	mls	r3, r2, r3, r0
 808f2ac:	4a21      	ldr	r2, [pc, #132]	; (808f334 <strftime+0x860>)
 808f2ae:	e572      	b.n	808ed96 <strftime+0x2c2>
 808f2b0:	696b      	ldr	r3, [r5, #20]
 808f2b2:	4a21      	ldr	r2, [pc, #132]	; (808f338 <strftime+0x864>)
 808f2b4:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
 808f2b8:	4293      	cmp	r3, r2
 808f2ba:	da05      	bge.n	808f2c8 <strftime+0x7f4>
 808f2bc:	232d      	movs	r3, #45	; 0x2d
 808f2be:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 808f2c2:	f1cb 0b00 	rsb	fp, fp, #0
 808f2c6:	e008      	b.n	808f2da <strftime+0x806>
 808f2c8:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808f2cc:	d10d      	bne.n	808f2ea <strftime+0x816>
 808f2ce:	f242 730f 	movw	r3, #9999	; 0x270f
 808f2d2:	459b      	cmp	fp, r3
 808f2d4:	d911      	bls.n	808f2fa <strftime+0x826>
 808f2d6:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 808f2da:	f1b8 0f00 	cmp.w	r8, #0
 808f2de:	d001      	beq.n	808f2e4 <strftime+0x810>
 808f2e0:	f108 38ff 	add.w	r8, r8, #4294967295
 808f2e4:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 808f2e8:	e000      	b.n	808f2ec <strftime+0x818>
 808f2ea:	ab0a      	add	r3, sp, #40	; 0x28
 808f2ec:	2225      	movs	r2, #37	; 0x25
 808f2ee:	701a      	strb	r2, [r3, #0]
 808f2f0:	f1ba 0f00 	cmp.w	sl, #0
 808f2f4:	d108      	bne.n	808f308 <strftime+0x834>
 808f2f6:	1c58      	adds	r0, r3, #1
 808f2f8:	e009      	b.n	808f30e <strftime+0x83a>
 808f2fa:	f1b8 0f00 	cmp.w	r8, #0
 808f2fe:	d1f4      	bne.n	808f2ea <strftime+0x816>
 808f300:	2325      	movs	r3, #37	; 0x25
 808f302:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 808f306:	ab0a      	add	r3, sp, #40	; 0x28
 808f308:	2230      	movs	r2, #48	; 0x30
 808f30a:	1c98      	adds	r0, r3, #2
 808f30c:	705a      	strb	r2, [r3, #1]
 808f30e:	490b      	ldr	r1, [pc, #44]	; (808f33c <strftime+0x868>)
 808f310:	f7ff fb5c 	bl	808e9cc <strcpy>
 808f314:	f8cd b000 	str.w	fp, [sp]
 808f318:	4643      	mov	r3, r8
 808f31a:	aa0a      	add	r2, sp, #40	; 0x28
 808f31c:	1b31      	subs	r1, r6, r4
 808f31e:	1938      	adds	r0, r7, r4
 808f320:	e03f      	b.n	808f3a2 <strftime+0x8ce>
 808f322:	bf00      	nop
 808f324:	200004ec 	.word	0x200004ec
 808f328:	0809481f 	.word	0x0809481f
 808f32c:	08094815 	.word	0x08094815
 808f330:	0809481a 	.word	0x0809481a
 808f334:	080947fb 	.word	0x080947fb
 808f338:	fffff894 	.word	0xfffff894
 808f33c:	0809480c 	.word	0x0809480c
 808f340:	6a2b      	ldr	r3, [r5, #32]
 808f342:	2b00      	cmp	r3, #0
 808f344:	db65      	blt.n	808f412 <strftime+0x93e>
 808f346:	f001 f8f9 	bl	809053c <__tz_lock>
 808f34a:	9b06      	ldr	r3, [sp, #24]
 808f34c:	b91b      	cbnz	r3, 808f356 <strftime+0x882>
 808f34e:	f001 f8f7 	bl	8090540 <_tzset_unlocked>
 808f352:	2301      	movs	r3, #1
 808f354:	9306      	str	r3, [sp, #24]
 808f356:	f001 fddf 	bl	8090f18 <__gettzinfo>
 808f35a:	6a2b      	ldr	r3, [r5, #32]
 808f35c:	221c      	movs	r2, #28
 808f35e:	2b00      	cmp	r3, #0
 808f360:	bfd4      	ite	le
 808f362:	2300      	movle	r3, #0
 808f364:	2301      	movgt	r3, #1
 808f366:	fb02 0003 	mla	r0, r2, r3, r0
 808f36a:	6a03      	ldr	r3, [r0, #32]
 808f36c:	eb07 0a04 	add.w	sl, r7, r4
 808f370:	f1c3 0800 	rsb	r8, r3, #0
 808f374:	f001 f8e3 	bl	809053e <__tz_unlock>
 808f378:	233c      	movs	r3, #60	; 0x3c
 808f37a:	fb98 f0f3 	sdiv	r0, r8, r3
 808f37e:	9307      	str	r3, [sp, #28]
 808f380:	f001 fe64 	bl	809104c <labs>
 808f384:	9b07      	ldr	r3, [sp, #28]
 808f386:	ebc4 0b06 	rsb	fp, r4, r6
 808f38a:	fb90 f2f3 	sdiv	r2, r0, r3
 808f38e:	fb02 0013 	mls	r0, r2, r3, r0
 808f392:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808f396:	9000      	str	r0, [sp, #0]
 808f398:	fb98 f3f3 	sdiv	r3, r8, r3
 808f39c:	4659      	mov	r1, fp
 808f39e:	4650      	mov	r0, sl
 808f3a0:	4a24      	ldr	r2, [pc, #144]	; (808f434 <strftime+0x960>)
 808f3a2:	f7fb fb67 	bl	808aa74 <sniprintf>
 808f3a6:	e4fa      	b.n	808ed9e <strftime+0x2ca>
 808f3a8:	4404      	add	r4, r0
 808f3aa:	42a6      	cmp	r6, r4
 808f3ac:	d831      	bhi.n	808f412 <strftime+0x93e>
 808f3ae:	e03b      	b.n	808f428 <strftime+0x954>
 808f3b0:	6a2b      	ldr	r3, [r5, #32]
 808f3b2:	2b00      	cmp	r3, #0
 808f3b4:	db2d      	blt.n	808f412 <strftime+0x93e>
 808f3b6:	f001 f8c1 	bl	809053c <__tz_lock>
 808f3ba:	9b06      	ldr	r3, [sp, #24]
 808f3bc:	b91b      	cbnz	r3, 808f3c6 <strftime+0x8f2>
 808f3be:	f001 f8bf 	bl	8090540 <_tzset_unlocked>
 808f3c2:	2301      	movs	r3, #1
 808f3c4:	9306      	str	r3, [sp, #24]
 808f3c6:	6a2b      	ldr	r3, [r5, #32]
 808f3c8:	4a1b      	ldr	r2, [pc, #108]	; (808f438 <strftime+0x964>)
 808f3ca:	2b00      	cmp	r3, #0
 808f3cc:	bfd4      	ite	le
 808f3ce:	2300      	movle	r3, #0
 808f3d0:	2301      	movgt	r3, #1
 808f3d2:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808f3d6:	4640      	mov	r0, r8
 808f3d8:	f000 f830 	bl	808f43c <strlen>
 808f3dc:	f108 38ff 	add.w	r8, r8, #4294967295
 808f3e0:	193b      	adds	r3, r7, r4
 808f3e2:	4420      	add	r0, r4
 808f3e4:	4284      	cmp	r4, r0
 808f3e6:	d00b      	beq.n	808f400 <strftime+0x92c>
 808f3e8:	9a02      	ldr	r2, [sp, #8]
 808f3ea:	4294      	cmp	r4, r2
 808f3ec:	d205      	bcs.n	808f3fa <strftime+0x926>
 808f3ee:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808f3f2:	3401      	adds	r4, #1
 808f3f4:	f803 2b01 	strb.w	r2, [r3], #1
 808f3f8:	e7f4      	b.n	808f3e4 <strftime+0x910>
 808f3fa:	f001 f8a0 	bl	809053e <__tz_unlock>
 808f3fe:	e013      	b.n	808f428 <strftime+0x954>
 808f400:	f001 f89d 	bl	809053e <__tz_unlock>
 808f404:	e005      	b.n	808f412 <strftime+0x93e>
 808f406:	9b02      	ldr	r3, [sp, #8]
 808f408:	429c      	cmp	r4, r3
 808f40a:	d20d      	bcs.n	808f428 <strftime+0x954>
 808f40c:	2325      	movs	r3, #37	; 0x25
 808f40e:	553b      	strb	r3, [r7, r4]
 808f410:	3401      	adds	r4, #1
 808f412:	f899 3000 	ldrb.w	r3, [r9]
 808f416:	b11b      	cbz	r3, 808f420 <strftime+0x94c>
 808f418:	f109 0901 	add.w	r9, r9, #1
 808f41c:	f7ff bb69 	b.w	808eaf2 <strftime+0x1e>
 808f420:	b126      	cbz	r6, 808f42c <strftime+0x958>
 808f422:	2300      	movs	r3, #0
 808f424:	553b      	strb	r3, [r7, r4]
 808f426:	e001      	b.n	808f42c <strftime+0x958>
 808f428:	2000      	movs	r0, #0
 808f42a:	e000      	b.n	808f42e <strftime+0x95a>
 808f42c:	4620      	mov	r0, r4
 808f42e:	b013      	add	sp, #76	; 0x4c
 808f430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808f434:	08094829 	.word	0x08094829
 808f438:	2000058c 	.word	0x2000058c

0808f43c <strlen>:
 808f43c:	4603      	mov	r3, r0
 808f43e:	f813 2b01 	ldrb.w	r2, [r3], #1
 808f442:	2a00      	cmp	r2, #0
 808f444:	d1fb      	bne.n	808f43e <strlen+0x2>
 808f446:	1a18      	subs	r0, r3, r0
 808f448:	3801      	subs	r0, #1
 808f44a:	4770      	bx	lr

0808f44c <strncmp>:
 808f44c:	b530      	push	{r4, r5, lr}
 808f44e:	b182      	cbz	r2, 808f472 <strncmp+0x26>
 808f450:	1e45      	subs	r5, r0, #1
 808f452:	3901      	subs	r1, #1
 808f454:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 808f458:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808f45c:	42a3      	cmp	r3, r4
 808f45e:	d106      	bne.n	808f46e <strncmp+0x22>
 808f460:	43ec      	mvns	r4, r5
 808f462:	4414      	add	r4, r2
 808f464:	42e0      	cmn	r0, r4
 808f466:	d001      	beq.n	808f46c <strncmp+0x20>
 808f468:	2b00      	cmp	r3, #0
 808f46a:	d1f3      	bne.n	808f454 <strncmp+0x8>
 808f46c:	461c      	mov	r4, r3
 808f46e:	1b18      	subs	r0, r3, r4
 808f470:	bd30      	pop	{r4, r5, pc}
 808f472:	4610      	mov	r0, r2
 808f474:	bd30      	pop	{r4, r5, pc}

0808f476 <strncpy>:
 808f476:	4603      	mov	r3, r0
 808f478:	b510      	push	{r4, lr}
 808f47a:	b142      	cbz	r2, 808f48e <strncpy+0x18>
 808f47c:	f811 4b01 	ldrb.w	r4, [r1], #1
 808f480:	3a01      	subs	r2, #1
 808f482:	f803 4b01 	strb.w	r4, [r3], #1
 808f486:	2c00      	cmp	r4, #0
 808f488:	d1f7      	bne.n	808f47a <strncpy+0x4>
 808f48a:	441a      	add	r2, r3
 808f48c:	e000      	b.n	808f490 <strncpy+0x1a>
 808f48e:	bd10      	pop	{r4, pc}
 808f490:	4293      	cmp	r3, r2
 808f492:	d002      	beq.n	808f49a <strncpy+0x24>
 808f494:	f803 4b01 	strb.w	r4, [r3], #1
 808f498:	e7fa      	b.n	808f490 <strncpy+0x1a>
 808f49a:	bd10      	pop	{r4, pc}

0808f49c <strstr>:
 808f49c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808f49e:	7803      	ldrb	r3, [r0, #0]
 808f4a0:	b963      	cbnz	r3, 808f4bc <strstr+0x20>
 808f4a2:	780b      	ldrb	r3, [r1, #0]
 808f4a4:	2b00      	cmp	r3, #0
 808f4a6:	bf18      	it	ne
 808f4a8:	2000      	movne	r0, #0
 808f4aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808f4ac:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 808f4b0:	b162      	cbz	r2, 808f4cc <strstr+0x30>
 808f4b2:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 808f4b6:	4630      	mov	r0, r6
 808f4b8:	4297      	cmp	r7, r2
 808f4ba:	d0f7      	beq.n	808f4ac <strstr+0x10>
 808f4bc:	4603      	mov	r3, r0
 808f4be:	1c46      	adds	r6, r0, #1
 808f4c0:	7800      	ldrb	r0, [r0, #0]
 808f4c2:	b110      	cbz	r0, 808f4ca <strstr+0x2e>
 808f4c4:	1e4d      	subs	r5, r1, #1
 808f4c6:	1e5c      	subs	r4, r3, #1
 808f4c8:	e7f0      	b.n	808f4ac <strstr+0x10>
 808f4ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808f4cc:	4618      	mov	r0, r3
 808f4ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808f4d0 <sulp>:
 808f4d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808f4d4:	460f      	mov	r7, r1
 808f4d6:	4690      	mov	r8, r2
 808f4d8:	f002 f882 	bl	80915e0 <__ulp>
 808f4dc:	4604      	mov	r4, r0
 808f4de:	460d      	mov	r5, r1
 808f4e0:	f1b8 0f00 	cmp.w	r8, #0
 808f4e4:	d011      	beq.n	808f50a <sulp+0x3a>
 808f4e6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 808f4ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808f4ee:	2b00      	cmp	r3, #0
 808f4f0:	dd0b      	ble.n	808f50a <sulp+0x3a>
 808f4f2:	051b      	lsls	r3, r3, #20
 808f4f4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 808f4f8:	2400      	movs	r4, #0
 808f4fa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 808f4fe:	4622      	mov	r2, r4
 808f500:	462b      	mov	r3, r5
 808f502:	f7fe f855 	bl	808d5b0 <__aeabi_dmul>
 808f506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808f50a:	4620      	mov	r0, r4
 808f50c:	4629      	mov	r1, r5
 808f50e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808f512:	0000      	movs	r0, r0
 808f514:	0000      	movs	r0, r0
	...

0808f518 <_strtod_r>:
 808f518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808f51c:	4682      	mov	sl, r0
 808f51e:	460c      	mov	r4, r1
 808f520:	b09d      	sub	sp, #116	; 0x74
 808f522:	2300      	movs	r3, #0
 808f524:	9213      	str	r2, [sp, #76]	; 0x4c
 808f526:	9318      	str	r3, [sp, #96]	; 0x60
 808f528:	f04f 0800 	mov.w	r8, #0
 808f52c:	f04f 0900 	mov.w	r9, #0
 808f530:	9117      	str	r1, [sp, #92]	; 0x5c
 808f532:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808f534:	781a      	ldrb	r2, [r3, #0]
 808f536:	2a0d      	cmp	r2, #13
 808f538:	d805      	bhi.n	808f546 <_strtod_r+0x2e>
 808f53a:	2a09      	cmp	r2, #9
 808f53c:	d213      	bcs.n	808f566 <_strtod_r+0x4e>
 808f53e:	2a00      	cmp	r2, #0
 808f540:	f000 81ad 	beq.w	808f89e <_strtod_r+0x386>
 808f544:	e012      	b.n	808f56c <_strtod_r+0x54>
 808f546:	2a2b      	cmp	r2, #43	; 0x2b
 808f548:	d004      	beq.n	808f554 <_strtod_r+0x3c>
 808f54a:	2a2d      	cmp	r2, #45	; 0x2d
 808f54c:	d004      	beq.n	808f558 <_strtod_r+0x40>
 808f54e:	2a20      	cmp	r2, #32
 808f550:	d10c      	bne.n	808f56c <_strtod_r+0x54>
 808f552:	e008      	b.n	808f566 <_strtod_r+0x4e>
 808f554:	2200      	movs	r2, #0
 808f556:	e000      	b.n	808f55a <_strtod_r+0x42>
 808f558:	2201      	movs	r2, #1
 808f55a:	920c      	str	r2, [sp, #48]	; 0x30
 808f55c:	1c5a      	adds	r2, r3, #1
 808f55e:	9217      	str	r2, [sp, #92]	; 0x5c
 808f560:	785b      	ldrb	r3, [r3, #1]
 808f562:	b92b      	cbnz	r3, 808f570 <_strtod_r+0x58>
 808f564:	e19b      	b.n	808f89e <_strtod_r+0x386>
 808f566:	3301      	adds	r3, #1
 808f568:	9317      	str	r3, [sp, #92]	; 0x5c
 808f56a:	e7e2      	b.n	808f532 <_strtod_r+0x1a>
 808f56c:	2300      	movs	r3, #0
 808f56e:	930c      	str	r3, [sp, #48]	; 0x30
 808f570:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 808f572:	782b      	ldrb	r3, [r5, #0]
 808f574:	2b30      	cmp	r3, #48	; 0x30
 808f576:	d15c      	bne.n	808f632 <_strtod_r+0x11a>
 808f578:	786b      	ldrb	r3, [r5, #1]
 808f57a:	2b58      	cmp	r3, #88	; 0x58
 808f57c:	d001      	beq.n	808f582 <_strtod_r+0x6a>
 808f57e:	2b78      	cmp	r3, #120	; 0x78
 808f580:	d14c      	bne.n	808f61c <_strtod_r+0x104>
 808f582:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808f584:	4aa8      	ldr	r2, [pc, #672]	; (808f828 <_strtod_r+0x310>)
 808f586:	9301      	str	r3, [sp, #4]
 808f588:	ab18      	add	r3, sp, #96	; 0x60
 808f58a:	9300      	str	r3, [sp, #0]
 808f58c:	a917      	add	r1, sp, #92	; 0x5c
 808f58e:	ab19      	add	r3, sp, #100	; 0x64
 808f590:	4650      	mov	r0, sl
 808f592:	f001 f9aa 	bl	80908ea <__gethex>
 808f596:	f010 0607 	ands.w	r6, r0, #7
 808f59a:	4604      	mov	r4, r0
 808f59c:	f000 8585 	beq.w	80900aa <_strtod_r+0xb92>
 808f5a0:	2e06      	cmp	r6, #6
 808f5a2:	d105      	bne.n	808f5b0 <_strtod_r+0x98>
 808f5a4:	3501      	adds	r5, #1
 808f5a6:	2300      	movs	r3, #0
 808f5a8:	9517      	str	r5, [sp, #92]	; 0x5c
 808f5aa:	930c      	str	r3, [sp, #48]	; 0x30
 808f5ac:	f000 bd7d 	b.w	80900aa <_strtod_r+0xb92>
 808f5b0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 808f5b2:	b13a      	cbz	r2, 808f5c4 <_strtod_r+0xac>
 808f5b4:	2135      	movs	r1, #53	; 0x35
 808f5b6:	a81a      	add	r0, sp, #104	; 0x68
 808f5b8:	f002 f8f9 	bl	80917ae <__copybits>
 808f5bc:	9918      	ldr	r1, [sp, #96]	; 0x60
 808f5be:	4650      	mov	r0, sl
 808f5c0:	f001 fd7d 	bl	80910be <_Bfree>
 808f5c4:	2e06      	cmp	r6, #6
 808f5c6:	d822      	bhi.n	808f60e <_strtod_r+0xf6>
 808f5c8:	e8df f006 	tbb	[pc, r6]
 808f5cc:	18080d04 	.word	0x18080d04
 808f5d0:	0d1d      	.short	0x0d1d
 808f5d2:	04          	.byte	0x04
 808f5d3:	00          	.byte	0x00
 808f5d4:	f04f 0900 	mov.w	r9, #0
 808f5d8:	46c8      	mov	r8, r9
 808f5da:	e018      	b.n	808f60e <_strtod_r+0xf6>
 808f5dc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 808f5e0:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 808f5e4:	e013      	b.n	808f60e <_strtod_r+0xf6>
 808f5e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808f5e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 808f5ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 808f5ee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 808f5f2:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 808f5f6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 808f5fa:	e008      	b.n	808f60e <_strtod_r+0xf6>
 808f5fc:	f8df 922c 	ldr.w	r9, [pc, #556]	; 808f82c <_strtod_r+0x314>
 808f600:	f04f 0800 	mov.w	r8, #0
 808f604:	e003      	b.n	808f60e <_strtod_r+0xf6>
 808f606:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 808f60a:	f04f 38ff 	mov.w	r8, #4294967295
 808f60e:	0721      	lsls	r1, r4, #28
 808f610:	f140 854b 	bpl.w	80900aa <_strtod_r+0xb92>
 808f614:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 808f618:	f000 bd47 	b.w	80900aa <_strtod_r+0xb92>
 808f61c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808f61e:	1c5a      	adds	r2, r3, #1
 808f620:	9217      	str	r2, [sp, #92]	; 0x5c
 808f622:	785b      	ldrb	r3, [r3, #1]
 808f624:	2b30      	cmp	r3, #48	; 0x30
 808f626:	d0f9      	beq.n	808f61c <_strtod_r+0x104>
 808f628:	2b00      	cmp	r3, #0
 808f62a:	f000 853e 	beq.w	80900aa <_strtod_r+0xb92>
 808f62e:	2301      	movs	r3, #1
 808f630:	e000      	b.n	808f634 <_strtod_r+0x11c>
 808f632:	2300      	movs	r3, #0
 808f634:	9305      	str	r3, [sp, #20]
 808f636:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808f638:	220a      	movs	r2, #10
 808f63a:	9306      	str	r3, [sp, #24]
 808f63c:	2300      	movs	r3, #0
 808f63e:	469b      	mov	fp, r3
 808f640:	9302      	str	r3, [sp, #8]
 808f642:	9304      	str	r3, [sp, #16]
 808f644:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 808f646:	782e      	ldrb	r6, [r5, #0]
 808f648:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 808f64c:	b2d9      	uxtb	r1, r3
 808f64e:	2909      	cmp	r1, #9
 808f650:	d811      	bhi.n	808f676 <_strtod_r+0x15e>
 808f652:	f1bb 0f08 	cmp.w	fp, #8
 808f656:	bfd5      	itete	le
 808f658:	9904      	ldrle	r1, [sp, #16]
 808f65a:	9902      	ldrgt	r1, [sp, #8]
 808f65c:	fb02 3301 	mlale	r3, r2, r1, r3
 808f660:	fb02 3301 	mlagt	r3, r2, r1, r3
 808f664:	f105 0501 	add.w	r5, r5, #1
 808f668:	bfd4      	ite	le
 808f66a:	9304      	strle	r3, [sp, #16]
 808f66c:	9302      	strgt	r3, [sp, #8]
 808f66e:	f10b 0b01 	add.w	fp, fp, #1
 808f672:	9517      	str	r5, [sp, #92]	; 0x5c
 808f674:	e7e6      	b.n	808f644 <_strtod_r+0x12c>
 808f676:	4650      	mov	r0, sl
 808f678:	f7ff f942 	bl	808e900 <_localeconv_r>
 808f67c:	6807      	ldr	r7, [r0, #0]
 808f67e:	4650      	mov	r0, sl
 808f680:	f7ff f93e 	bl	808e900 <_localeconv_r>
 808f684:	6800      	ldr	r0, [r0, #0]
 808f686:	f7ff fed9 	bl	808f43c <strlen>
 808f68a:	4639      	mov	r1, r7
 808f68c:	4602      	mov	r2, r0
 808f68e:	4628      	mov	r0, r5
 808f690:	f7ff fedc 	bl	808f44c <strncmp>
 808f694:	4607      	mov	r7, r0
 808f696:	b128      	cbz	r0, 808f6a4 <_strtod_r+0x18c>
 808f698:	2000      	movs	r0, #0
 808f69a:	4633      	mov	r3, r6
 808f69c:	465d      	mov	r5, fp
 808f69e:	4602      	mov	r2, r0
 808f6a0:	4601      	mov	r1, r0
 808f6a2:	e05a      	b.n	808f75a <_strtod_r+0x242>
 808f6a4:	4650      	mov	r0, sl
 808f6a6:	f7ff f92b 	bl	808e900 <_localeconv_r>
 808f6aa:	6800      	ldr	r0, [r0, #0]
 808f6ac:	f7ff fec6 	bl	808f43c <strlen>
 808f6b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808f6b2:	181a      	adds	r2, r3, r0
 808f6b4:	9217      	str	r2, [sp, #92]	; 0x5c
 808f6b6:	5c1b      	ldrb	r3, [r3, r0]
 808f6b8:	f1bb 0f00 	cmp.w	fp, #0
 808f6bc:	d145      	bne.n	808f74a <_strtod_r+0x232>
 808f6be:	4658      	mov	r0, fp
 808f6c0:	2b30      	cmp	r3, #48	; 0x30
 808f6c2:	d105      	bne.n	808f6d0 <_strtod_r+0x1b8>
 808f6c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808f6c6:	3001      	adds	r0, #1
 808f6c8:	1c5a      	adds	r2, r3, #1
 808f6ca:	9217      	str	r2, [sp, #92]	; 0x5c
 808f6cc:	785b      	ldrb	r3, [r3, #1]
 808f6ce:	e7f7      	b.n	808f6c0 <_strtod_r+0x1a8>
 808f6d0:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 808f6d4:	2a08      	cmp	r2, #8
 808f6d6:	d846      	bhi.n	808f766 <_strtod_r+0x24e>
 808f6d8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 808f6da:	9206      	str	r2, [sp, #24]
 808f6dc:	4602      	mov	r2, r0
 808f6de:	2000      	movs	r0, #0
 808f6e0:	4605      	mov	r5, r0
 808f6e2:	3b30      	subs	r3, #48	; 0x30
 808f6e4:	f100 0101 	add.w	r1, r0, #1
 808f6e8:	d029      	beq.n	808f73e <_strtod_r+0x226>
 808f6ea:	440a      	add	r2, r1
 808f6ec:	4629      	mov	r1, r5
 808f6ee:	eb05 0c00 	add.w	ip, r5, r0
 808f6f2:	260a      	movs	r6, #10
 808f6f4:	4561      	cmp	r1, ip
 808f6f6:	d00f      	beq.n	808f718 <_strtod_r+0x200>
 808f6f8:	3101      	adds	r1, #1
 808f6fa:	f101 3eff 	add.w	lr, r1, #4294967295
 808f6fe:	f1be 0f08 	cmp.w	lr, #8
 808f702:	dc03      	bgt.n	808f70c <_strtod_r+0x1f4>
 808f704:	9f04      	ldr	r7, [sp, #16]
 808f706:	4377      	muls	r7, r6
 808f708:	9704      	str	r7, [sp, #16]
 808f70a:	e7f3      	b.n	808f6f4 <_strtod_r+0x1dc>
 808f70c:	2910      	cmp	r1, #16
 808f70e:	bfde      	ittt	le
 808f710:	9f02      	ldrle	r7, [sp, #8]
 808f712:	4377      	mulle	r7, r6
 808f714:	9702      	strle	r7, [sp, #8]
 808f716:	e7ed      	b.n	808f6f4 <_strtod_r+0x1dc>
 808f718:	4428      	add	r0, r5
 808f71a:	2808      	cmp	r0, #8
 808f71c:	f100 0501 	add.w	r5, r0, #1
 808f720:	dc05      	bgt.n	808f72e <_strtod_r+0x216>
 808f722:	9804      	ldr	r0, [sp, #16]
 808f724:	210a      	movs	r1, #10
 808f726:	fb01 3300 	mla	r3, r1, r0, r3
 808f72a:	9304      	str	r3, [sp, #16]
 808f72c:	e006      	b.n	808f73c <_strtod_r+0x224>
 808f72e:	2d10      	cmp	r5, #16
 808f730:	bfdf      	itttt	le
 808f732:	9802      	ldrle	r0, [sp, #8]
 808f734:	210a      	movle	r1, #10
 808f736:	fb01 3300 	mlale	r3, r1, r0, r3
 808f73a:	9302      	strle	r3, [sp, #8]
 808f73c:	2100      	movs	r1, #0
 808f73e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808f740:	1c58      	adds	r0, r3, #1
 808f742:	9017      	str	r0, [sp, #92]	; 0x5c
 808f744:	785b      	ldrb	r3, [r3, #1]
 808f746:	4608      	mov	r0, r1
 808f748:	e002      	b.n	808f750 <_strtod_r+0x238>
 808f74a:	465d      	mov	r5, fp
 808f74c:	4638      	mov	r0, r7
 808f74e:	463a      	mov	r2, r7
 808f750:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 808f754:	2909      	cmp	r1, #9
 808f756:	d9c4      	bls.n	808f6e2 <_strtod_r+0x1ca>
 808f758:	2101      	movs	r1, #1
 808f75a:	2b65      	cmp	r3, #101	; 0x65
 808f75c:	d001      	beq.n	808f762 <_strtod_r+0x24a>
 808f75e:	2b45      	cmp	r3, #69	; 0x45
 808f760:	d14f      	bne.n	808f802 <_strtod_r+0x2ea>
 808f762:	b96d      	cbnz	r5, 808f780 <_strtod_r+0x268>
 808f764:	e004      	b.n	808f770 <_strtod_r+0x258>
 808f766:	2b65      	cmp	r3, #101	; 0x65
 808f768:	f040 84ad 	bne.w	80900c6 <_strtod_r+0xbae>
 808f76c:	2200      	movs	r2, #0
 808f76e:	2101      	movs	r1, #1
 808f770:	b928      	cbnz	r0, 808f77e <_strtod_r+0x266>
 808f772:	9b05      	ldr	r3, [sp, #20]
 808f774:	2b00      	cmp	r3, #0
 808f776:	f000 8092 	beq.w	808f89e <_strtod_r+0x386>
 808f77a:	4605      	mov	r5, r0
 808f77c:	e000      	b.n	808f780 <_strtod_r+0x268>
 808f77e:	2500      	movs	r5, #0
 808f780:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 808f782:	1c63      	adds	r3, r4, #1
 808f784:	9317      	str	r3, [sp, #92]	; 0x5c
 808f786:	7863      	ldrb	r3, [r4, #1]
 808f788:	2b2b      	cmp	r3, #43	; 0x2b
 808f78a:	d006      	beq.n	808f79a <_strtod_r+0x282>
 808f78c:	2b2d      	cmp	r3, #45	; 0x2d
 808f78e:	d002      	beq.n	808f796 <_strtod_r+0x27e>
 808f790:	2600      	movs	r6, #0
 808f792:	9603      	str	r6, [sp, #12]
 808f794:	e006      	b.n	808f7a4 <_strtod_r+0x28c>
 808f796:	2301      	movs	r3, #1
 808f798:	e000      	b.n	808f79c <_strtod_r+0x284>
 808f79a:	2300      	movs	r3, #0
 808f79c:	9303      	str	r3, [sp, #12]
 808f79e:	1ca3      	adds	r3, r4, #2
 808f7a0:	9317      	str	r3, [sp, #92]	; 0x5c
 808f7a2:	78a3      	ldrb	r3, [r4, #2]
 808f7a4:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 808f7a8:	2e09      	cmp	r6, #9
 808f7aa:	d829      	bhi.n	808f800 <_strtod_r+0x2e8>
 808f7ac:	2b30      	cmp	r3, #48	; 0x30
 808f7ae:	d104      	bne.n	808f7ba <_strtod_r+0x2a2>
 808f7b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808f7b2:	1c5e      	adds	r6, r3, #1
 808f7b4:	9617      	str	r6, [sp, #92]	; 0x5c
 808f7b6:	785b      	ldrb	r3, [r3, #1]
 808f7b8:	e7f8      	b.n	808f7ac <_strtod_r+0x294>
 808f7ba:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 808f7be:	2e08      	cmp	r6, #8
 808f7c0:	d81f      	bhi.n	808f802 <_strtod_r+0x2ea>
 808f7c2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 808f7c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808f7c8:	461f      	mov	r7, r3
 808f7ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808f7cc:	1c5e      	adds	r6, r3, #1
 808f7ce:	9617      	str	r6, [sp, #92]	; 0x5c
 808f7d0:	785b      	ldrb	r3, [r3, #1]
 808f7d2:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 808f7d6:	f1bc 0f09 	cmp.w	ip, #9
 808f7da:	d805      	bhi.n	808f7e8 <_strtod_r+0x2d0>
 808f7dc:	260a      	movs	r6, #10
 808f7de:	fb06 3e0e 	mla	lr, r6, lr, r3
 808f7e2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 808f7e6:	e7f0      	b.n	808f7ca <_strtod_r+0x2b2>
 808f7e8:	1bf6      	subs	r6, r6, r7
 808f7ea:	2e08      	cmp	r6, #8
 808f7ec:	f644 661f 	movw	r6, #19999	; 0x4e1f
 808f7f0:	dc02      	bgt.n	808f7f8 <_strtod_r+0x2e0>
 808f7f2:	4576      	cmp	r6, lr
 808f7f4:	bfa8      	it	ge
 808f7f6:	4676      	movge	r6, lr
 808f7f8:	9f03      	ldr	r7, [sp, #12]
 808f7fa:	b11f      	cbz	r7, 808f804 <_strtod_r+0x2ec>
 808f7fc:	4276      	negs	r6, r6
 808f7fe:	e001      	b.n	808f804 <_strtod_r+0x2ec>
 808f800:	9417      	str	r4, [sp, #92]	; 0x5c
 808f802:	2600      	movs	r6, #0
 808f804:	2d00      	cmp	r5, #0
 808f806:	d152      	bne.n	808f8ae <_strtod_r+0x396>
 808f808:	2800      	cmp	r0, #0
 808f80a:	f040 844e 	bne.w	80900aa <_strtod_r+0xb92>
 808f80e:	9a05      	ldr	r2, [sp, #20]
 808f810:	2a00      	cmp	r2, #0
 808f812:	f040 844a 	bne.w	80900aa <_strtod_r+0xb92>
 808f816:	2900      	cmp	r1, #0
 808f818:	d141      	bne.n	808f89e <_strtod_r+0x386>
 808f81a:	2b4e      	cmp	r3, #78	; 0x4e
 808f81c:	d020      	beq.n	808f860 <_strtod_r+0x348>
 808f81e:	dc07      	bgt.n	808f830 <_strtod_r+0x318>
 808f820:	2b49      	cmp	r3, #73	; 0x49
 808f822:	d00a      	beq.n	808f83a <_strtod_r+0x322>
 808f824:	e03b      	b.n	808f89e <_strtod_r+0x386>
 808f826:	bf00      	nop
 808f828:	08094838 	.word	0x08094838
 808f82c:	7ff00000 	.word	0x7ff00000
 808f830:	2b69      	cmp	r3, #105	; 0x69
 808f832:	d002      	beq.n	808f83a <_strtod_r+0x322>
 808f834:	2b6e      	cmp	r3, #110	; 0x6e
 808f836:	d013      	beq.n	808f860 <_strtod_r+0x348>
 808f838:	e031      	b.n	808f89e <_strtod_r+0x386>
 808f83a:	49aa      	ldr	r1, [pc, #680]	; (808fae4 <_strtod_r+0x5cc>)
 808f83c:	a817      	add	r0, sp, #92	; 0x5c
 808f83e:	f001 fa85 	bl	8090d4c <__match>
 808f842:	b360      	cbz	r0, 808f89e <_strtod_r+0x386>
 808f844:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808f846:	49a8      	ldr	r1, [pc, #672]	; (808fae8 <_strtod_r+0x5d0>)
 808f848:	3b01      	subs	r3, #1
 808f84a:	a817      	add	r0, sp, #92	; 0x5c
 808f84c:	9317      	str	r3, [sp, #92]	; 0x5c
 808f84e:	f001 fa7d 	bl	8090d4c <__match>
 808f852:	b910      	cbnz	r0, 808f85a <_strtod_r+0x342>
 808f854:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808f856:	3301      	adds	r3, #1
 808f858:	9317      	str	r3, [sp, #92]	; 0x5c
 808f85a:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 808fb04 <_strtod_r+0x5ec>
 808f85e:	e01a      	b.n	808f896 <_strtod_r+0x37e>
 808f860:	49a2      	ldr	r1, [pc, #648]	; (808faec <_strtod_r+0x5d4>)
 808f862:	a817      	add	r0, sp, #92	; 0x5c
 808f864:	f001 fa72 	bl	8090d4c <__match>
 808f868:	b1c8      	cbz	r0, 808f89e <_strtod_r+0x386>
 808f86a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808f86c:	781b      	ldrb	r3, [r3, #0]
 808f86e:	2b28      	cmp	r3, #40	; 0x28
 808f870:	d10f      	bne.n	808f892 <_strtod_r+0x37a>
 808f872:	aa1a      	add	r2, sp, #104	; 0x68
 808f874:	499e      	ldr	r1, [pc, #632]	; (808faf0 <_strtod_r+0x5d8>)
 808f876:	a817      	add	r0, sp, #92	; 0x5c
 808f878:	f001 fa7b 	bl	8090d72 <__hexnan>
 808f87c:	2805      	cmp	r0, #5
 808f87e:	d108      	bne.n	808f892 <_strtod_r+0x37a>
 808f880:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808f882:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 808f886:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 808f88a:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 808f88e:	f000 bc0c 	b.w	80900aa <_strtod_r+0xb92>
 808f892:	f8df 9274 	ldr.w	r9, [pc, #628]	; 808fb08 <_strtod_r+0x5f0>
 808f896:	f04f 0800 	mov.w	r8, #0
 808f89a:	f000 bc06 	b.w	80900aa <_strtod_r+0xb92>
 808f89e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 808f8a0:	9417      	str	r4, [sp, #92]	; 0x5c
 808f8a2:	2b00      	cmp	r3, #0
 808f8a4:	f000 840c 	beq.w	80900c0 <_strtod_r+0xba8>
 808f8a8:	2300      	movs	r3, #0
 808f8aa:	930c      	str	r3, [sp, #48]	; 0x30
 808f8ac:	e3ff      	b.n	80900ae <_strtod_r+0xb96>
 808f8ae:	462c      	mov	r4, r5
 808f8b0:	f1bb 0f00 	cmp.w	fp, #0
 808f8b4:	bf08      	it	eq
 808f8b6:	46ab      	moveq	fp, r5
 808f8b8:	9804      	ldr	r0, [sp, #16]
 808f8ba:	2d10      	cmp	r5, #16
 808f8bc:	bfa8      	it	ge
 808f8be:	2410      	movge	r4, #16
 808f8c0:	1ab7      	subs	r7, r6, r2
 808f8c2:	f7fd fdff 	bl	808d4c4 <__aeabi_ui2d>
 808f8c6:	2c09      	cmp	r4, #9
 808f8c8:	4680      	mov	r8, r0
 808f8ca:	4689      	mov	r9, r1
 808f8cc:	dd13      	ble.n	808f8f6 <_strtod_r+0x3de>
 808f8ce:	4b89      	ldr	r3, [pc, #548]	; (808faf4 <_strtod_r+0x5dc>)
 808f8d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 808f8d4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 808f8d8:	f7fd fe6a 	bl	808d5b0 <__aeabi_dmul>
 808f8dc:	4680      	mov	r8, r0
 808f8de:	9802      	ldr	r0, [sp, #8]
 808f8e0:	4689      	mov	r9, r1
 808f8e2:	f7fd fdef 	bl	808d4c4 <__aeabi_ui2d>
 808f8e6:	4602      	mov	r2, r0
 808f8e8:	460b      	mov	r3, r1
 808f8ea:	4640      	mov	r0, r8
 808f8ec:	4649      	mov	r1, r9
 808f8ee:	f7fd fcad 	bl	808d24c <__adddf3>
 808f8f2:	4680      	mov	r8, r0
 808f8f4:	4689      	mov	r9, r1
 808f8f6:	2d0f      	cmp	r5, #15
 808f8f8:	dc33      	bgt.n	808f962 <_strtod_r+0x44a>
 808f8fa:	2f00      	cmp	r7, #0
 808f8fc:	f000 83d5 	beq.w	80900aa <_strtod_r+0xb92>
 808f900:	dd22      	ble.n	808f948 <_strtod_r+0x430>
 808f902:	2f16      	cmp	r7, #22
 808f904:	dc07      	bgt.n	808f916 <_strtod_r+0x3fe>
 808f906:	4d7b      	ldr	r5, [pc, #492]	; (808faf4 <_strtod_r+0x5dc>)
 808f908:	4642      	mov	r2, r8
 808f90a:	eb05 01c7 	add.w	r1, r5, r7, lsl #3
 808f90e:	464b      	mov	r3, r9
 808f910:	e9d1 0100 	ldrd	r0, r1, [r1]
 808f914:	e013      	b.n	808f93e <_strtod_r+0x426>
 808f916:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 808f91a:	429f      	cmp	r7, r3
 808f91c:	dc21      	bgt.n	808f962 <_strtod_r+0x44a>
 808f91e:	4c75      	ldr	r4, [pc, #468]	; (808faf4 <_strtod_r+0x5dc>)
 808f920:	f1c5 050f 	rsb	r5, r5, #15
 808f924:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 808f928:	1b7d      	subs	r5, r7, r5
 808f92a:	4642      	mov	r2, r8
 808f92c:	e9d1 0100 	ldrd	r0, r1, [r1]
 808f930:	464b      	mov	r3, r9
 808f932:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 808f936:	f7fd fe3b 	bl	808d5b0 <__aeabi_dmul>
 808f93a:	e9d4 2300 	ldrd	r2, r3, [r4]
 808f93e:	f7fd fe37 	bl	808d5b0 <__aeabi_dmul>
 808f942:	4680      	mov	r8, r0
 808f944:	4689      	mov	r9, r1
 808f946:	e3b0      	b.n	80900aa <_strtod_r+0xb92>
 808f948:	f117 0f16 	cmn.w	r7, #22
 808f94c:	db09      	blt.n	808f962 <_strtod_r+0x44a>
 808f94e:	4d69      	ldr	r5, [pc, #420]	; (808faf4 <_strtod_r+0x5dc>)
 808f950:	4640      	mov	r0, r8
 808f952:	eba5 03c7 	sub.w	r3, r5, r7, lsl #3
 808f956:	e9d3 2300 	ldrd	r2, r3, [r3]
 808f95a:	4649      	mov	r1, r9
 808f95c:	f7fd ff52 	bl	808d804 <__aeabi_ddiv>
 808f960:	e7ef      	b.n	808f942 <_strtod_r+0x42a>
 808f962:	1b2c      	subs	r4, r5, r4
 808f964:	443c      	add	r4, r7
 808f966:	2c00      	cmp	r4, #0
 808f968:	dd5d      	ble.n	808fa26 <_strtod_r+0x50e>
 808f96a:	f014 010f 	ands.w	r1, r4, #15
 808f96e:	d00a      	beq.n	808f986 <_strtod_r+0x46e>
 808f970:	4b60      	ldr	r3, [pc, #384]	; (808faf4 <_strtod_r+0x5dc>)
 808f972:	4642      	mov	r2, r8
 808f974:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 808f978:	e9d1 0100 	ldrd	r0, r1, [r1]
 808f97c:	464b      	mov	r3, r9
 808f97e:	f7fd fe17 	bl	808d5b0 <__aeabi_dmul>
 808f982:	4680      	mov	r8, r0
 808f984:	4689      	mov	r9, r1
 808f986:	f034 040f 	bics.w	r4, r4, #15
 808f98a:	f000 80c1 	beq.w	808fb10 <_strtod_r+0x5f8>
 808f98e:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 808f992:	dd0f      	ble.n	808f9b4 <_strtod_r+0x49c>
 808f994:	f04f 0b00 	mov.w	fp, #0
 808f998:	f8cd b008 	str.w	fp, [sp, #8]
 808f99c:	f8cd b014 	str.w	fp, [sp, #20]
 808f9a0:	f8cd b010 	str.w	fp, [sp, #16]
 808f9a4:	2322      	movs	r3, #34	; 0x22
 808f9a6:	f8ca 3000 	str.w	r3, [sl]
 808f9aa:	f8df 9158 	ldr.w	r9, [pc, #344]	; 808fb04 <_strtod_r+0x5ec>
 808f9ae:	f04f 0800 	mov.w	r8, #0
 808f9b2:	e189      	b.n	808fcc8 <_strtod_r+0x7b0>
 808f9b4:	4640      	mov	r0, r8
 808f9b6:	4649      	mov	r1, r9
 808f9b8:	2300      	movs	r3, #0
 808f9ba:	4e4f      	ldr	r6, [pc, #316]	; (808faf8 <_strtod_r+0x5e0>)
 808f9bc:	1124      	asrs	r4, r4, #4
 808f9be:	9302      	str	r3, [sp, #8]
 808f9c0:	2c01      	cmp	r4, #1
 808f9c2:	dd0c      	ble.n	808f9de <_strtod_r+0x4c6>
 808f9c4:	07e2      	lsls	r2, r4, #31
 808f9c6:	d504      	bpl.n	808f9d2 <_strtod_r+0x4ba>
 808f9c8:	e9d6 2300 	ldrd	r2, r3, [r6]
 808f9cc:	f7fd fdf0 	bl	808d5b0 <__aeabi_dmul>
 808f9d0:	2301      	movs	r3, #1
 808f9d2:	9a02      	ldr	r2, [sp, #8]
 808f9d4:	1064      	asrs	r4, r4, #1
 808f9d6:	3201      	adds	r2, #1
 808f9d8:	9202      	str	r2, [sp, #8]
 808f9da:	3608      	adds	r6, #8
 808f9dc:	e7f0      	b.n	808f9c0 <_strtod_r+0x4a8>
 808f9de:	b10b      	cbz	r3, 808f9e4 <_strtod_r+0x4cc>
 808f9e0:	4680      	mov	r8, r0
 808f9e2:	4689      	mov	r9, r1
 808f9e4:	4b44      	ldr	r3, [pc, #272]	; (808faf8 <_strtod_r+0x5e0>)
 808f9e6:	9a02      	ldr	r2, [sp, #8]
 808f9e8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 808f9ec:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 808f9f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 808f9f4:	4642      	mov	r2, r8
 808f9f6:	464b      	mov	r3, r9
 808f9f8:	f7fd fdda 	bl	808d5b0 <__aeabi_dmul>
 808f9fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 808fa00:	4689      	mov	r9, r1
 808fa02:	460a      	mov	r2, r1
 808fa04:	0d1b      	lsrs	r3, r3, #20
 808fa06:	493d      	ldr	r1, [pc, #244]	; (808fafc <_strtod_r+0x5e4>)
 808fa08:	051b      	lsls	r3, r3, #20
 808fa0a:	428b      	cmp	r3, r1
 808fa0c:	4680      	mov	r8, r0
 808fa0e:	d8c1      	bhi.n	808f994 <_strtod_r+0x47c>
 808fa10:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 808fa14:	428b      	cmp	r3, r1
 808fa16:	bf86      	itte	hi
 808fa18:	f8df 90f0 	ldrhi.w	r9, [pc, #240]	; 808fb0c <_strtod_r+0x5f4>
 808fa1c:	f04f 38ff 	movhi.w	r8, #4294967295
 808fa20:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 808fa24:	e074      	b.n	808fb10 <_strtod_r+0x5f8>
 808fa26:	d073      	beq.n	808fb10 <_strtod_r+0x5f8>
 808fa28:	4264      	negs	r4, r4
 808fa2a:	f014 020f 	ands.w	r2, r4, #15
 808fa2e:	d00a      	beq.n	808fa46 <_strtod_r+0x52e>
 808fa30:	4b30      	ldr	r3, [pc, #192]	; (808faf4 <_strtod_r+0x5dc>)
 808fa32:	4640      	mov	r0, r8
 808fa34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 808fa38:	4649      	mov	r1, r9
 808fa3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808fa3e:	f7fd fee1 	bl	808d804 <__aeabi_ddiv>
 808fa42:	4680      	mov	r8, r0
 808fa44:	4689      	mov	r9, r1
 808fa46:	1124      	asrs	r4, r4, #4
 808fa48:	d062      	beq.n	808fb10 <_strtod_r+0x5f8>
 808fa4a:	2c1f      	cmp	r4, #31
 808fa4c:	dd08      	ble.n	808fa60 <_strtod_r+0x548>
 808fa4e:	f04f 0b00 	mov.w	fp, #0
 808fa52:	f8cd b008 	str.w	fp, [sp, #8]
 808fa56:	f8cd b014 	str.w	fp, [sp, #20]
 808fa5a:	f8cd b010 	str.w	fp, [sp, #16]
 808fa5e:	e12c      	b.n	808fcba <_strtod_r+0x7a2>
 808fa60:	4640      	mov	r0, r8
 808fa62:	4649      	mov	r1, r9
 808fa64:	f014 0f10 	tst.w	r4, #16
 808fa68:	bf0c      	ite	eq
 808fa6a:	2300      	moveq	r3, #0
 808fa6c:	236a      	movne	r3, #106	; 0x6a
 808fa6e:	4e24      	ldr	r6, [pc, #144]	; (808fb00 <_strtod_r+0x5e8>)
 808fa70:	9303      	str	r3, [sp, #12]
 808fa72:	2300      	movs	r3, #0
 808fa74:	2c00      	cmp	r4, #0
 808fa76:	dd09      	ble.n	808fa8c <_strtod_r+0x574>
 808fa78:	07e2      	lsls	r2, r4, #31
 808fa7a:	d504      	bpl.n	808fa86 <_strtod_r+0x56e>
 808fa7c:	e9d6 2300 	ldrd	r2, r3, [r6]
 808fa80:	f7fd fd96 	bl	808d5b0 <__aeabi_dmul>
 808fa84:	2301      	movs	r3, #1
 808fa86:	1064      	asrs	r4, r4, #1
 808fa88:	3608      	adds	r6, #8
 808fa8a:	e7f3      	b.n	808fa74 <_strtod_r+0x55c>
 808fa8c:	b10b      	cbz	r3, 808fa92 <_strtod_r+0x57a>
 808fa8e:	4680      	mov	r8, r0
 808fa90:	4689      	mov	r9, r1
 808fa92:	9b03      	ldr	r3, [sp, #12]
 808fa94:	b1eb      	cbz	r3, 808fad2 <_strtod_r+0x5ba>
 808fa96:	f3c9 530a 	ubfx	r3, r9, #20, #11
 808fa9a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808fa9e:	2b00      	cmp	r3, #0
 808faa0:	4649      	mov	r1, r9
 808faa2:	dd16      	ble.n	808fad2 <_strtod_r+0x5ba>
 808faa4:	2b1f      	cmp	r3, #31
 808faa6:	dd0e      	ble.n	808fac6 <_strtod_r+0x5ae>
 808faa8:	2b34      	cmp	r3, #52	; 0x34
 808faaa:	bfde      	ittt	le
 808faac:	3b20      	suble	r3, #32
 808faae:	f04f 32ff 	movle.w	r2, #4294967295
 808fab2:	fa02 f303 	lslle.w	r3, r2, r3
 808fab6:	f04f 0800 	mov.w	r8, #0
 808faba:	bfcc      	ite	gt
 808fabc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 808fac0:	ea03 0901 	andle.w	r9, r3, r1
 808fac4:	e005      	b.n	808fad2 <_strtod_r+0x5ba>
 808fac6:	f04f 32ff 	mov.w	r2, #4294967295
 808faca:	fa02 f303 	lsl.w	r3, r2, r3
 808face:	ea03 0808 	and.w	r8, r3, r8
 808fad2:	2200      	movs	r2, #0
 808fad4:	2300      	movs	r3, #0
 808fad6:	4640      	mov	r0, r8
 808fad8:	4649      	mov	r1, r9
 808fada:	f7fd ffd1 	bl	808da80 <__aeabi_dcmpeq>
 808fade:	2800      	cmp	r0, #0
 808fae0:	d1b5      	bne.n	808fa4e <_strtod_r+0x536>
 808fae2:	e017      	b.n	808fb14 <_strtod_r+0x5fc>
 808fae4:	08094365 	.word	0x08094365
 808fae8:	0809484c 	.word	0x0809484c
 808faec:	08094899 	.word	0x08094899
 808faf0:	08094854 	.word	0x08094854
 808faf4:	08094af0 	.word	0x08094af0
 808faf8:	08094bb8 	.word	0x08094bb8
 808fafc:	7ca00000 	.word	0x7ca00000
 808fb00:	08094868 	.word	0x08094868
 808fb04:	7ff00000 	.word	0x7ff00000
 808fb08:	fff80000 	.word	0xfff80000
 808fb0c:	7fefffff 	.word	0x7fefffff
 808fb10:	2300      	movs	r3, #0
 808fb12:	9303      	str	r3, [sp, #12]
 808fb14:	9b04      	ldr	r3, [sp, #16]
 808fb16:	465a      	mov	r2, fp
 808fb18:	9300      	str	r3, [sp, #0]
 808fb1a:	9906      	ldr	r1, [sp, #24]
 808fb1c:	462b      	mov	r3, r5
 808fb1e:	4650      	mov	r0, sl
 808fb20:	f001 fb1f 	bl	8091162 <__s2b>
 808fb24:	9005      	str	r0, [sp, #20]
 808fb26:	2800      	cmp	r0, #0
 808fb28:	f43f af34 	beq.w	808f994 <_strtod_r+0x47c>
 808fb2c:	2f00      	cmp	r7, #0
 808fb2e:	f1c7 0300 	rsb	r3, r7, #0
 808fb32:	bfa8      	it	ge
 808fb34:	2300      	movge	r3, #0
 808fb36:	930d      	str	r3, [sp, #52]	; 0x34
 808fb38:	f04f 0b00 	mov.w	fp, #0
 808fb3c:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 808fb40:	9312      	str	r3, [sp, #72]	; 0x48
 808fb42:	f8cd b008 	str.w	fp, [sp, #8]
 808fb46:	9b05      	ldr	r3, [sp, #20]
 808fb48:	4650      	mov	r0, sl
 808fb4a:	6859      	ldr	r1, [r3, #4]
 808fb4c:	f001 fa82 	bl	8091054 <_Balloc>
 808fb50:	9004      	str	r0, [sp, #16]
 808fb52:	2800      	cmp	r0, #0
 808fb54:	f43f af26 	beq.w	808f9a4 <_strtod_r+0x48c>
 808fb58:	9b05      	ldr	r3, [sp, #20]
 808fb5a:	300c      	adds	r0, #12
 808fb5c:	691a      	ldr	r2, [r3, #16]
 808fb5e:	f103 010c 	add.w	r1, r3, #12
 808fb62:	3202      	adds	r2, #2
 808fb64:	0092      	lsls	r2, r2, #2
 808fb66:	f7fe fede 	bl	808e926 <memcpy>
 808fb6a:	ab1a      	add	r3, sp, #104	; 0x68
 808fb6c:	9301      	str	r3, [sp, #4]
 808fb6e:	ab19      	add	r3, sp, #100	; 0x64
 808fb70:	9300      	str	r3, [sp, #0]
 808fb72:	4642      	mov	r2, r8
 808fb74:	464b      	mov	r3, r9
 808fb76:	4650      	mov	r0, sl
 808fb78:	e9cd 8908 	strd	r8, r9, [sp, #32]
 808fb7c:	f001 fda1 	bl	80916c2 <__d2b>
 808fb80:	9018      	str	r0, [sp, #96]	; 0x60
 808fb82:	2800      	cmp	r0, #0
 808fb84:	f43f af0e 	beq.w	808f9a4 <_strtod_r+0x48c>
 808fb88:	2101      	movs	r1, #1
 808fb8a:	4650      	mov	r0, sl
 808fb8c:	f001 fb74 	bl	8091278 <__i2b>
 808fb90:	9002      	str	r0, [sp, #8]
 808fb92:	2800      	cmp	r0, #0
 808fb94:	f43f af06 	beq.w	808f9a4 <_strtod_r+0x48c>
 808fb98:	9b19      	ldr	r3, [sp, #100]	; 0x64
 808fb9a:	9903      	ldr	r1, [sp, #12]
 808fb9c:	2b00      	cmp	r3, #0
 808fb9e:	bfac      	ite	ge
 808fba0:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
 808fba2:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 808fba4:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 808fba6:	bfac      	ite	ge
 808fba8:	18d6      	addge	r6, r2, r3
 808fbaa:	1ad2      	sublt	r2, r2, r3
 808fbac:	eba3 0301 	sub.w	r3, r3, r1
 808fbb0:	4423      	add	r3, r4
 808fbb2:	49b1      	ldr	r1, [pc, #708]	; (808fe78 <_strtod_r+0x960>)
 808fbb4:	f103 33ff 	add.w	r3, r3, #4294967295
 808fbb8:	bfac      	ite	ge
 808fbba:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 808fbbc:	9e0d      	ldrlt	r6, [sp, #52]	; 0x34
 808fbbe:	428b      	cmp	r3, r1
 808fbc0:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
 808fbc4:	f280 8085 	bge.w	808fcd2 <_strtod_r+0x7ba>
 808fbc8:	1ac9      	subs	r1, r1, r3
 808fbca:	291f      	cmp	r1, #31
 808fbcc:	bfc8      	it	gt
 808fbce:	4dab      	ldrgt	r5, [pc, #684]	; (808fe7c <_strtod_r+0x964>)
 808fbd0:	f04f 0701 	mov.w	r7, #1
 808fbd4:	bfd4      	ite	le
 808fbd6:	fa07 f301 	lslle.w	r3, r7, r1
 808fbda:	1aed      	subgt	r5, r5, r3
 808fbdc:	eba4 0401 	sub.w	r4, r4, r1
 808fbe0:	bfd9      	ittee	le
 808fbe2:	9307      	strle	r3, [sp, #28]
 808fbe4:	2500      	movle	r5, #0
 808fbe6:	fa07 f505 	lslgt.w	r5, r7, r5
 808fbea:	9707      	strgt	r7, [sp, #28]
 808fbec:	1937      	adds	r7, r6, r4
 808fbee:	9b03      	ldr	r3, [sp, #12]
 808fbf0:	42be      	cmp	r6, r7
 808fbf2:	4414      	add	r4, r2
 808fbf4:	441c      	add	r4, r3
 808fbf6:	4633      	mov	r3, r6
 808fbf8:	bfa8      	it	ge
 808fbfa:	463b      	movge	r3, r7
 808fbfc:	42a3      	cmp	r3, r4
 808fbfe:	bfa8      	it	ge
 808fc00:	4623      	movge	r3, r4
 808fc02:	2b00      	cmp	r3, #0
 808fc04:	bfc2      	ittt	gt
 808fc06:	1aff      	subgt	r7, r7, r3
 808fc08:	1ae4      	subgt	r4, r4, r3
 808fc0a:	1af6      	subgt	r6, r6, r3
 808fc0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808fc0e:	2b00      	cmp	r3, #0
 808fc10:	d163      	bne.n	808fcda <_strtod_r+0x7c2>
 808fc12:	2f00      	cmp	r7, #0
 808fc14:	dc7a      	bgt.n	808fd0c <_strtod_r+0x7f4>
 808fc16:	9b12      	ldr	r3, [sp, #72]	; 0x48
 808fc18:	2b00      	cmp	r3, #0
 808fc1a:	f040 8081 	bne.w	808fd20 <_strtod_r+0x808>
 808fc1e:	2c00      	cmp	r4, #0
 808fc20:	f300 8088 	bgt.w	808fd34 <_strtod_r+0x81c>
 808fc24:	2e00      	cmp	r6, #0
 808fc26:	f300 808f 	bgt.w	808fd48 <_strtod_r+0x830>
 808fc2a:	9a04      	ldr	r2, [sp, #16]
 808fc2c:	9918      	ldr	r1, [sp, #96]	; 0x60
 808fc2e:	4650      	mov	r0, sl
 808fc30:	f001 fc77 	bl	8091522 <__mdiff>
 808fc34:	4683      	mov	fp, r0
 808fc36:	2800      	cmp	r0, #0
 808fc38:	f43f aeb4 	beq.w	808f9a4 <_strtod_r+0x48c>
 808fc3c:	68c3      	ldr	r3, [r0, #12]
 808fc3e:	2400      	movs	r4, #0
 808fc40:	60c4      	str	r4, [r0, #12]
 808fc42:	9902      	ldr	r1, [sp, #8]
 808fc44:	9306      	str	r3, [sp, #24]
 808fc46:	f001 fc50 	bl	80914ea <__mcmp>
 808fc4a:	42a0      	cmp	r0, r4
 808fc4c:	f280 808b 	bge.w	808fd66 <_strtod_r+0x84e>
 808fc50:	9b06      	ldr	r3, [sp, #24]
 808fc52:	2b00      	cmp	r3, #0
 808fc54:	f040 8202 	bne.w	809005c <_strtod_r+0xb44>
 808fc58:	f1b8 0f00 	cmp.w	r8, #0
 808fc5c:	f040 81fe 	bne.w	809005c <_strtod_r+0xb44>
 808fc60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808fc64:	2b00      	cmp	r3, #0
 808fc66:	f040 81f9 	bne.w	809005c <_strtod_r+0xb44>
 808fc6a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808fc6e:	0d1b      	lsrs	r3, r3, #20
 808fc70:	051b      	lsls	r3, r3, #20
 808fc72:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 808fc76:	f240 81f1 	bls.w	809005c <_strtod_r+0xb44>
 808fc7a:	f8db 3014 	ldr.w	r3, [fp, #20]
 808fc7e:	2b00      	cmp	r3, #0
 808fc80:	d06c      	beq.n	808fd5c <_strtod_r+0x844>
 808fc82:	4659      	mov	r1, fp
 808fc84:	2201      	movs	r2, #1
 808fc86:	4650      	mov	r0, sl
 808fc88:	f001 fbde 	bl	8091448 <__lshift>
 808fc8c:	9902      	ldr	r1, [sp, #8]
 808fc8e:	4683      	mov	fp, r0
 808fc90:	f001 fc2b 	bl	80914ea <__mcmp>
 808fc94:	2800      	cmp	r0, #0
 808fc96:	f340 81e1 	ble.w	809005c <_strtod_r+0xb44>
 808fc9a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808fc9e:	9a03      	ldr	r2, [sp, #12]
 808fca0:	0d1b      	lsrs	r3, r3, #20
 808fca2:	051b      	lsls	r3, r3, #20
 808fca4:	2a00      	cmp	r2, #0
 808fca6:	f000 808d 	beq.w	808fdc4 <_strtod_r+0x8ac>
 808fcaa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 808fcae:	f300 8089 	bgt.w	808fdc4 <_strtod_r+0x8ac>
 808fcb2:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 808fcb6:	f300 81d3 	bgt.w	8090060 <_strtod_r+0xb48>
 808fcba:	2322      	movs	r3, #34	; 0x22
 808fcbc:	f04f 0800 	mov.w	r8, #0
 808fcc0:	f04f 0900 	mov.w	r9, #0
 808fcc4:	f8ca 3000 	str.w	r3, [sl]
 808fcc8:	9b05      	ldr	r3, [sp, #20]
 808fcca:	2b00      	cmp	r3, #0
 808fccc:	f040 81d9 	bne.w	8090082 <_strtod_r+0xb6a>
 808fcd0:	e1eb      	b.n	80900aa <_strtod_r+0xb92>
 808fcd2:	2301      	movs	r3, #1
 808fcd4:	2500      	movs	r5, #0
 808fcd6:	9307      	str	r3, [sp, #28]
 808fcd8:	e788      	b.n	808fbec <_strtod_r+0x6d4>
 808fcda:	461a      	mov	r2, r3
 808fcdc:	9902      	ldr	r1, [sp, #8]
 808fcde:	4650      	mov	r0, sl
 808fce0:	f001 fb64 	bl	80913ac <__pow5mult>
 808fce4:	9002      	str	r0, [sp, #8]
 808fce6:	2800      	cmp	r0, #0
 808fce8:	f43f ae5c 	beq.w	808f9a4 <_strtod_r+0x48c>
 808fcec:	4601      	mov	r1, r0
 808fcee:	9a18      	ldr	r2, [sp, #96]	; 0x60
 808fcf0:	4650      	mov	r0, sl
 808fcf2:	f001 faca 	bl	809128a <__multiply>
 808fcf6:	9006      	str	r0, [sp, #24]
 808fcf8:	2800      	cmp	r0, #0
 808fcfa:	f43f ae53 	beq.w	808f9a4 <_strtod_r+0x48c>
 808fcfe:	9918      	ldr	r1, [sp, #96]	; 0x60
 808fd00:	4650      	mov	r0, sl
 808fd02:	f001 f9dc 	bl	80910be <_Bfree>
 808fd06:	9b06      	ldr	r3, [sp, #24]
 808fd08:	9318      	str	r3, [sp, #96]	; 0x60
 808fd0a:	e782      	b.n	808fc12 <_strtod_r+0x6fa>
 808fd0c:	463a      	mov	r2, r7
 808fd0e:	9918      	ldr	r1, [sp, #96]	; 0x60
 808fd10:	4650      	mov	r0, sl
 808fd12:	f001 fb99 	bl	8091448 <__lshift>
 808fd16:	9018      	str	r0, [sp, #96]	; 0x60
 808fd18:	2800      	cmp	r0, #0
 808fd1a:	f47f af7c 	bne.w	808fc16 <_strtod_r+0x6fe>
 808fd1e:	e641      	b.n	808f9a4 <_strtod_r+0x48c>
 808fd20:	9a12      	ldr	r2, [sp, #72]	; 0x48
 808fd22:	9904      	ldr	r1, [sp, #16]
 808fd24:	4650      	mov	r0, sl
 808fd26:	f001 fb41 	bl	80913ac <__pow5mult>
 808fd2a:	9004      	str	r0, [sp, #16]
 808fd2c:	2800      	cmp	r0, #0
 808fd2e:	f47f af76 	bne.w	808fc1e <_strtod_r+0x706>
 808fd32:	e637      	b.n	808f9a4 <_strtod_r+0x48c>
 808fd34:	4622      	mov	r2, r4
 808fd36:	9904      	ldr	r1, [sp, #16]
 808fd38:	4650      	mov	r0, sl
 808fd3a:	f001 fb85 	bl	8091448 <__lshift>
 808fd3e:	9004      	str	r0, [sp, #16]
 808fd40:	2800      	cmp	r0, #0
 808fd42:	f47f af6f 	bne.w	808fc24 <_strtod_r+0x70c>
 808fd46:	e62d      	b.n	808f9a4 <_strtod_r+0x48c>
 808fd48:	4632      	mov	r2, r6
 808fd4a:	9902      	ldr	r1, [sp, #8]
 808fd4c:	4650      	mov	r0, sl
 808fd4e:	f001 fb7b 	bl	8091448 <__lshift>
 808fd52:	9002      	str	r0, [sp, #8]
 808fd54:	2800      	cmp	r0, #0
 808fd56:	f47f af68 	bne.w	808fc2a <_strtod_r+0x712>
 808fd5a:	e623      	b.n	808f9a4 <_strtod_r+0x48c>
 808fd5c:	f8db 3010 	ldr.w	r3, [fp, #16]
 808fd60:	2b01      	cmp	r3, #1
 808fd62:	dc8e      	bgt.n	808fc82 <_strtod_r+0x76a>
 808fd64:	e17a      	b.n	809005c <_strtod_r+0xb44>
 808fd66:	d161      	bne.n	808fe2c <_strtod_r+0x914>
 808fd68:	9a06      	ldr	r2, [sp, #24]
 808fd6a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808fd6e:	b322      	cbz	r2, 808fdba <_strtod_r+0x8a2>
 808fd70:	4943      	ldr	r1, [pc, #268]	; (808fe80 <_strtod_r+0x968>)
 808fd72:	464a      	mov	r2, r9
 808fd74:	428b      	cmp	r3, r1
 808fd76:	d12e      	bne.n	808fdd6 <_strtod_r+0x8be>
 808fd78:	9b03      	ldr	r3, [sp, #12]
 808fd7a:	4641      	mov	r1, r8
 808fd7c:	b163      	cbz	r3, 808fd98 <_strtod_r+0x880>
 808fd7e:	4b41      	ldr	r3, [pc, #260]	; (808fe84 <_strtod_r+0x96c>)
 808fd80:	4013      	ands	r3, r2
 808fd82:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 808fd86:	d807      	bhi.n	808fd98 <_strtod_r+0x880>
 808fd88:	0d1b      	lsrs	r3, r3, #20
 808fd8a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808fd8e:	f04f 30ff 	mov.w	r0, #4294967295
 808fd92:	fa00 f303 	lsl.w	r3, r0, r3
 808fd96:	e001      	b.n	808fd9c <_strtod_r+0x884>
 808fd98:	f04f 33ff 	mov.w	r3, #4294967295
 808fd9c:	428b      	cmp	r3, r1
 808fd9e:	d11a      	bne.n	808fdd6 <_strtod_r+0x8be>
 808fda0:	4939      	ldr	r1, [pc, #228]	; (808fe88 <_strtod_r+0x970>)
 808fda2:	428a      	cmp	r2, r1
 808fda4:	d102      	bne.n	808fdac <_strtod_r+0x894>
 808fda6:	3301      	adds	r3, #1
 808fda8:	f43f adfc 	beq.w	808f9a4 <_strtod_r+0x48c>
 808fdac:	4b35      	ldr	r3, [pc, #212]	; (808fe84 <_strtod_r+0x96c>)
 808fdae:	f04f 0800 	mov.w	r8, #0
 808fdb2:	4013      	ands	r3, r2
 808fdb4:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 808fdb8:	e150      	b.n	809005c <_strtod_r+0xb44>
 808fdba:	b963      	cbnz	r3, 808fdd6 <_strtod_r+0x8be>
 808fdbc:	f1b8 0f00 	cmp.w	r8, #0
 808fdc0:	d109      	bne.n	808fdd6 <_strtod_r+0x8be>
 808fdc2:	e76a      	b.n	808fc9a <_strtod_r+0x782>
 808fdc4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 808fdc8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 808fdcc:	f04f 38ff 	mov.w	r8, #4294967295
 808fdd0:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 808fdd4:	e142      	b.n	809005c <_strtod_r+0xb44>
 808fdd6:	b115      	cbz	r5, 808fdde <_strtod_r+0x8c6>
 808fdd8:	ea15 0f09 	tst.w	r5, r9
 808fddc:	e002      	b.n	808fde4 <_strtod_r+0x8cc>
 808fdde:	9b07      	ldr	r3, [sp, #28]
 808fde0:	ea13 0f08 	tst.w	r3, r8
 808fde4:	f000 813a 	beq.w	809005c <_strtod_r+0xb44>
 808fde8:	9b06      	ldr	r3, [sp, #24]
 808fdea:	9a03      	ldr	r2, [sp, #12]
 808fdec:	4640      	mov	r0, r8
 808fdee:	4649      	mov	r1, r9
 808fdf0:	b153      	cbz	r3, 808fe08 <_strtod_r+0x8f0>
 808fdf2:	f7ff fb6d 	bl	808f4d0 <sulp>
 808fdf6:	4602      	mov	r2, r0
 808fdf8:	460b      	mov	r3, r1
 808fdfa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808fdfe:	f7fd fa25 	bl	808d24c <__adddf3>
 808fe02:	4680      	mov	r8, r0
 808fe04:	4689      	mov	r9, r1
 808fe06:	e129      	b.n	809005c <_strtod_r+0xb44>
 808fe08:	f7ff fb62 	bl	808f4d0 <sulp>
 808fe0c:	4602      	mov	r2, r0
 808fe0e:	460b      	mov	r3, r1
 808fe10:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808fe14:	f7fd fa18 	bl	808d248 <__aeabi_dsub>
 808fe18:	2200      	movs	r2, #0
 808fe1a:	2300      	movs	r3, #0
 808fe1c:	4680      	mov	r8, r0
 808fe1e:	4689      	mov	r9, r1
 808fe20:	f7fd fe2e 	bl	808da80 <__aeabi_dcmpeq>
 808fe24:	2800      	cmp	r0, #0
 808fe26:	f47f af48 	bne.w	808fcba <_strtod_r+0x7a2>
 808fe2a:	e117      	b.n	809005c <_strtod_r+0xb44>
 808fe2c:	9902      	ldr	r1, [sp, #8]
 808fe2e:	4658      	mov	r0, fp
 808fe30:	f001 fc95 	bl	809175e <__ratio>
 808fe34:	2200      	movs	r2, #0
 808fe36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 808fe3a:	4606      	mov	r6, r0
 808fe3c:	460f      	mov	r7, r1
 808fe3e:	f7fd fe33 	bl	808daa8 <__aeabi_dcmple>
 808fe42:	2800      	cmp	r0, #0
 808fe44:	d03f      	beq.n	808fec6 <_strtod_r+0x9ae>
 808fe46:	9b06      	ldr	r3, [sp, #24]
 808fe48:	b113      	cbz	r3, 808fe50 <_strtod_r+0x938>
 808fe4a:	2600      	movs	r6, #0
 808fe4c:	4f0f      	ldr	r7, [pc, #60]	; (808fe8c <_strtod_r+0x974>)
 808fe4e:	e010      	b.n	808fe72 <_strtod_r+0x95a>
 808fe50:	f1b8 0f00 	cmp.w	r8, #0
 808fe54:	d103      	bne.n	808fe5e <_strtod_r+0x946>
 808fe56:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808fe5a:	b93b      	cbnz	r3, 808fe6c <_strtod_r+0x954>
 808fe5c:	e01a      	b.n	808fe94 <_strtod_r+0x97c>
 808fe5e:	f1b8 0f01 	cmp.w	r8, #1
 808fe62:	d103      	bne.n	808fe6c <_strtod_r+0x954>
 808fe64:	f1b9 0f00 	cmp.w	r9, #0
 808fe68:	f43f af27 	beq.w	808fcba <_strtod_r+0x7a2>
 808fe6c:	4f08      	ldr	r7, [pc, #32]	; (808fe90 <_strtod_r+0x978>)
 808fe6e:	2600      	movs	r6, #0
 808fe70:	2400      	movs	r4, #0
 808fe72:	4d06      	ldr	r5, [pc, #24]	; (808fe8c <_strtod_r+0x974>)
 808fe74:	e03c      	b.n	808fef0 <_strtod_r+0x9d8>
 808fe76:	bf00      	nop
 808fe78:	fffffc02 	.word	0xfffffc02
 808fe7c:	fffffbe2 	.word	0xfffffbe2
 808fe80:	000fffff 	.word	0x000fffff
 808fe84:	7ff00000 	.word	0x7ff00000
 808fe88:	7fefffff 	.word	0x7fefffff
 808fe8c:	3ff00000 	.word	0x3ff00000
 808fe90:	bff00000 	.word	0xbff00000
 808fe94:	2200      	movs	r2, #0
 808fe96:	4b9a      	ldr	r3, [pc, #616]	; (8090100 <_strtod_r+0xbe8>)
 808fe98:	4630      	mov	r0, r6
 808fe9a:	4639      	mov	r1, r7
 808fe9c:	f7fd fdfa 	bl	808da94 <__aeabi_dcmplt>
 808fea0:	b940      	cbnz	r0, 808feb4 <_strtod_r+0x99c>
 808fea2:	2200      	movs	r2, #0
 808fea4:	4b97      	ldr	r3, [pc, #604]	; (8090104 <_strtod_r+0xbec>)
 808fea6:	4630      	mov	r0, r6
 808fea8:	4639      	mov	r1, r7
 808feaa:	f7fd fb81 	bl	808d5b0 <__aeabi_dmul>
 808feae:	4604      	mov	r4, r0
 808feb0:	460d      	mov	r5, r1
 808feb2:	e001      	b.n	808feb8 <_strtod_r+0x9a0>
 808feb4:	9c06      	ldr	r4, [sp, #24]
 808feb6:	4d93      	ldr	r5, [pc, #588]	; (8090104 <_strtod_r+0xbec>)
 808feb8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 808febc:	9414      	str	r4, [sp, #80]	; 0x50
 808febe:	9315      	str	r3, [sp, #84]	; 0x54
 808fec0:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 808fec4:	e014      	b.n	808fef0 <_strtod_r+0x9d8>
 808fec6:	4b8f      	ldr	r3, [pc, #572]	; (8090104 <_strtod_r+0xbec>)
 808fec8:	2200      	movs	r2, #0
 808feca:	4630      	mov	r0, r6
 808fecc:	4639      	mov	r1, r7
 808fece:	f7fd fb6f 	bl	808d5b0 <__aeabi_dmul>
 808fed2:	9b06      	ldr	r3, [sp, #24]
 808fed4:	4604      	mov	r4, r0
 808fed6:	460d      	mov	r5, r1
 808fed8:	b923      	cbnz	r3, 808fee4 <_strtod_r+0x9cc>
 808feda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 808fede:	900e      	str	r0, [sp, #56]	; 0x38
 808fee0:	930f      	str	r3, [sp, #60]	; 0x3c
 808fee2:	e003      	b.n	808feec <_strtod_r+0x9d4>
 808fee4:	4602      	mov	r2, r0
 808fee6:	460b      	mov	r3, r1
 808fee8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 808feec:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 808fef0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808fef4:	0d1b      	lsrs	r3, r3, #20
 808fef6:	051b      	lsls	r3, r3, #20
 808fef8:	9307      	str	r3, [sp, #28]
 808fefa:	9a07      	ldr	r2, [sp, #28]
 808fefc:	4b82      	ldr	r3, [pc, #520]	; (8090108 <_strtod_r+0xbf0>)
 808fefe:	429a      	cmp	r2, r3
 808ff00:	d12b      	bne.n	808ff5a <_strtod_r+0xa42>
 808ff02:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 808ff06:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 808ff0a:	4640      	mov	r0, r8
 808ff0c:	4649      	mov	r1, r9
 808ff0e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 808ff12:	f001 fb65 	bl	80915e0 <__ulp>
 808ff16:	4602      	mov	r2, r0
 808ff18:	460b      	mov	r3, r1
 808ff1a:	4630      	mov	r0, r6
 808ff1c:	4639      	mov	r1, r7
 808ff1e:	f7fd fb47 	bl	808d5b0 <__aeabi_dmul>
 808ff22:	4642      	mov	r2, r8
 808ff24:	464b      	mov	r3, r9
 808ff26:	f7fd f991 	bl	808d24c <__adddf3>
 808ff2a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 808ff2e:	0d1b      	lsrs	r3, r3, #20
 808ff30:	4a76      	ldr	r2, [pc, #472]	; (809010c <_strtod_r+0xbf4>)
 808ff32:	051b      	lsls	r3, r3, #20
 808ff34:	4293      	cmp	r3, r2
 808ff36:	4680      	mov	r8, r0
 808ff38:	d90c      	bls.n	808ff54 <_strtod_r+0xa3c>
 808ff3a:	4b75      	ldr	r3, [pc, #468]	; (8090110 <_strtod_r+0xbf8>)
 808ff3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 808ff3e:	429a      	cmp	r2, r3
 808ff40:	d103      	bne.n	808ff4a <_strtod_r+0xa32>
 808ff42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808ff44:	3301      	adds	r3, #1
 808ff46:	f43f ad2d 	beq.w	808f9a4 <_strtod_r+0x48c>
 808ff4a:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8090110 <_strtod_r+0xbf8>
 808ff4e:	f04f 38ff 	mov.w	r8, #4294967295
 808ff52:	e072      	b.n	809003a <_strtod_r+0xb22>
 808ff54:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 808ff58:	e039      	b.n	808ffce <_strtod_r+0xab6>
 808ff5a:	9b03      	ldr	r3, [sp, #12]
 808ff5c:	b33b      	cbz	r3, 808ffae <_strtod_r+0xa96>
 808ff5e:	9b07      	ldr	r3, [sp, #28]
 808ff60:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 808ff64:	d823      	bhi.n	808ffae <_strtod_r+0xa96>
 808ff66:	a35e      	add	r3, pc, #376	; (adr r3, 80900e0 <_strtod_r+0xbc8>)
 808ff68:	e9d3 2300 	ldrd	r2, r3, [r3]
 808ff6c:	4620      	mov	r0, r4
 808ff6e:	4629      	mov	r1, r5
 808ff70:	f7fd fd9a 	bl	808daa8 <__aeabi_dcmple>
 808ff74:	b1b8      	cbz	r0, 808ffa6 <_strtod_r+0xa8e>
 808ff76:	4629      	mov	r1, r5
 808ff78:	4620      	mov	r0, r4
 808ff7a:	f7fd fdf1 	bl	808db60 <__aeabi_d2uiz>
 808ff7e:	2800      	cmp	r0, #0
 808ff80:	bf08      	it	eq
 808ff82:	2001      	moveq	r0, #1
 808ff84:	f7fd fa9e 	bl	808d4c4 <__aeabi_ui2d>
 808ff88:	9b06      	ldr	r3, [sp, #24]
 808ff8a:	4604      	mov	r4, r0
 808ff8c:	460d      	mov	r5, r1
 808ff8e:	b923      	cbnz	r3, 808ff9a <_strtod_r+0xa82>
 808ff90:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 808ff94:	9010      	str	r0, [sp, #64]	; 0x40
 808ff96:	9311      	str	r3, [sp, #68]	; 0x44
 808ff98:	e003      	b.n	808ffa2 <_strtod_r+0xa8a>
 808ff9a:	4602      	mov	r2, r0
 808ff9c:	460b      	mov	r3, r1
 808ff9e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 808ffa2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 808ffa6:	9a07      	ldr	r2, [sp, #28]
 808ffa8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 808ffac:	1a9f      	subs	r7, r3, r2
 808ffae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808ffb2:	f001 fb15 	bl	80915e0 <__ulp>
 808ffb6:	4602      	mov	r2, r0
 808ffb8:	460b      	mov	r3, r1
 808ffba:	4630      	mov	r0, r6
 808ffbc:	4639      	mov	r1, r7
 808ffbe:	f7fd faf7 	bl	808d5b0 <__aeabi_dmul>
 808ffc2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 808ffc6:	f7fd f941 	bl	808d24c <__adddf3>
 808ffca:	4680      	mov	r8, r0
 808ffcc:	4689      	mov	r9, r1
 808ffce:	9b03      	ldr	r3, [sp, #12]
 808ffd0:	bb9b      	cbnz	r3, 809003a <_strtod_r+0xb22>
 808ffd2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808ffd6:	0d1b      	lsrs	r3, r3, #20
 808ffd8:	9a07      	ldr	r2, [sp, #28]
 808ffda:	051b      	lsls	r3, r3, #20
 808ffdc:	429a      	cmp	r2, r3
 808ffde:	464e      	mov	r6, r9
 808ffe0:	d12b      	bne.n	809003a <_strtod_r+0xb22>
 808ffe2:	4629      	mov	r1, r5
 808ffe4:	4620      	mov	r0, r4
 808ffe6:	f7fd fd93 	bl	808db10 <__aeabi_d2iz>
 808ffea:	f7fd fa7b 	bl	808d4e4 <__aeabi_i2d>
 808ffee:	460b      	mov	r3, r1
 808fff0:	4602      	mov	r2, r0
 808fff2:	4629      	mov	r1, r5
 808fff4:	4620      	mov	r0, r4
 808fff6:	f7fd f927 	bl	808d248 <__aeabi_dsub>
 808fffa:	9b06      	ldr	r3, [sp, #24]
 808fffc:	4604      	mov	r4, r0
 808fffe:	460d      	mov	r5, r1
 8090000:	b92b      	cbnz	r3, 809000e <_strtod_r+0xaf6>
 8090002:	f1b8 0f00 	cmp.w	r8, #0
 8090006:	d102      	bne.n	809000e <_strtod_r+0xaf6>
 8090008:	f3c9 0613 	ubfx	r6, r9, #0, #20
 809000c:	b17e      	cbz	r6, 809002e <_strtod_r+0xb16>
 809000e:	a336      	add	r3, pc, #216	; (adr r3, 80900e8 <_strtod_r+0xbd0>)
 8090010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8090014:	4620      	mov	r0, r4
 8090016:	4629      	mov	r1, r5
 8090018:	f7fd fd3c 	bl	808da94 <__aeabi_dcmplt>
 809001c:	bb88      	cbnz	r0, 8090082 <_strtod_r+0xb6a>
 809001e:	a334      	add	r3, pc, #208	; (adr r3, 80900f0 <_strtod_r+0xbd8>)
 8090020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8090024:	4620      	mov	r0, r4
 8090026:	4629      	mov	r1, r5
 8090028:	f7fd fd52 	bl	808dad0 <__aeabi_dcmpgt>
 809002c:	e004      	b.n	8090038 <_strtod_r+0xb20>
 809002e:	a332      	add	r3, pc, #200	; (adr r3, 80900f8 <_strtod_r+0xbe0>)
 8090030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8090034:	f7fd fd2e 	bl	808da94 <__aeabi_dcmplt>
 8090038:	bb18      	cbnz	r0, 8090082 <_strtod_r+0xb6a>
 809003a:	9918      	ldr	r1, [sp, #96]	; 0x60
 809003c:	4650      	mov	r0, sl
 809003e:	f001 f83e 	bl	80910be <_Bfree>
 8090042:	9904      	ldr	r1, [sp, #16]
 8090044:	4650      	mov	r0, sl
 8090046:	f001 f83a 	bl	80910be <_Bfree>
 809004a:	9902      	ldr	r1, [sp, #8]
 809004c:	4650      	mov	r0, sl
 809004e:	f001 f836 	bl	80910be <_Bfree>
 8090052:	4659      	mov	r1, fp
 8090054:	4650      	mov	r0, sl
 8090056:	f001 f832 	bl	80910be <_Bfree>
 809005a:	e574      	b.n	808fb46 <_strtod_r+0x62e>
 809005c:	9b03      	ldr	r3, [sp, #12]
 809005e:	b183      	cbz	r3, 8090082 <_strtod_r+0xb6a>
 8090060:	4b2c      	ldr	r3, [pc, #176]	; (8090114 <_strtod_r+0xbfc>)
 8090062:	4640      	mov	r0, r8
 8090064:	930b      	str	r3, [sp, #44]	; 0x2c
 8090066:	2300      	movs	r3, #0
 8090068:	930a      	str	r3, [sp, #40]	; 0x28
 809006a:	4649      	mov	r1, r9
 809006c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8090070:	f7fd fa9e 	bl	808d5b0 <__aeabi_dmul>
 8090074:	4680      	mov	r8, r0
 8090076:	4689      	mov	r9, r1
 8090078:	b919      	cbnz	r1, 8090082 <_strtod_r+0xb6a>
 809007a:	b910      	cbnz	r0, 8090082 <_strtod_r+0xb6a>
 809007c:	2322      	movs	r3, #34	; 0x22
 809007e:	f8ca 3000 	str.w	r3, [sl]
 8090082:	9918      	ldr	r1, [sp, #96]	; 0x60
 8090084:	4650      	mov	r0, sl
 8090086:	f001 f81a 	bl	80910be <_Bfree>
 809008a:	9904      	ldr	r1, [sp, #16]
 809008c:	4650      	mov	r0, sl
 809008e:	f001 f816 	bl	80910be <_Bfree>
 8090092:	9902      	ldr	r1, [sp, #8]
 8090094:	4650      	mov	r0, sl
 8090096:	f001 f812 	bl	80910be <_Bfree>
 809009a:	9905      	ldr	r1, [sp, #20]
 809009c:	4650      	mov	r0, sl
 809009e:	f001 f80e 	bl	80910be <_Bfree>
 80900a2:	4659      	mov	r1, fp
 80900a4:	4650      	mov	r0, sl
 80900a6:	f001 f80a 	bl	80910be <_Bfree>
 80900aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80900ac:	b113      	cbz	r3, 80900b4 <_strtod_r+0xb9c>
 80900ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80900b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80900b2:	6013      	str	r3, [r2, #0]
 80900b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80900b6:	b11b      	cbz	r3, 80900c0 <_strtod_r+0xba8>
 80900b8:	4642      	mov	r2, r8
 80900ba:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80900be:	e007      	b.n	80900d0 <_strtod_r+0xbb8>
 80900c0:	4642      	mov	r2, r8
 80900c2:	464b      	mov	r3, r9
 80900c4:	e004      	b.n	80900d0 <_strtod_r+0xbb8>
 80900c6:	2500      	movs	r5, #0
 80900c8:	462a      	mov	r2, r5
 80900ca:	2101      	movs	r1, #1
 80900cc:	f7ff bb47 	b.w	808f75e <_strtod_r+0x246>
 80900d0:	4610      	mov	r0, r2
 80900d2:	4619      	mov	r1, r3
 80900d4:	b01d      	add	sp, #116	; 0x74
 80900d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80900da:	bf00      	nop
 80900dc:	f3af 8000 	nop.w
 80900e0:	ffc00000 	.word	0xffc00000
 80900e4:	41dfffff 	.word	0x41dfffff
 80900e8:	94a03595 	.word	0x94a03595
 80900ec:	3fdfffff 	.word	0x3fdfffff
 80900f0:	35afe535 	.word	0x35afe535
 80900f4:	3fe00000 	.word	0x3fe00000
 80900f8:	94a03595 	.word	0x94a03595
 80900fc:	3fcfffff 	.word	0x3fcfffff
 8090100:	3ff00000 	.word	0x3ff00000
 8090104:	3fe00000 	.word	0x3fe00000
 8090108:	7fe00000 	.word	0x7fe00000
 809010c:	7c9fffff 	.word	0x7c9fffff
 8090110:	7fefffff 	.word	0x7fefffff
 8090114:	39500000 	.word	0x39500000

08090118 <strtod>:
 8090118:	4b02      	ldr	r3, [pc, #8]	; (8090124 <strtod+0xc>)
 809011a:	460a      	mov	r2, r1
 809011c:	4601      	mov	r1, r0
 809011e:	6818      	ldr	r0, [r3, #0]
 8090120:	f7ff b9fa 	b.w	808f518 <_strtod_r>
 8090124:	20000550 	.word	0x20000550

08090128 <__strtok_r>:
 8090128:	b5f0      	push	{r4, r5, r6, r7, lr}
 809012a:	b948      	cbnz	r0, 8090140 <__strtok_r+0x18>
 809012c:	6810      	ldr	r0, [r2, #0]
 809012e:	b938      	cbnz	r0, 8090140 <__strtok_r+0x18>
 8090130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8090132:	f817 6b01 	ldrb.w	r6, [r7], #1
 8090136:	b15e      	cbz	r6, 8090150 <__strtok_r+0x28>
 8090138:	42b5      	cmp	r5, r6
 809013a:	d1fa      	bne.n	8090132 <__strtok_r+0xa>
 809013c:	b12b      	cbz	r3, 809014a <__strtok_r+0x22>
 809013e:	4620      	mov	r0, r4
 8090140:	4604      	mov	r4, r0
 8090142:	460f      	mov	r7, r1
 8090144:	f814 5b01 	ldrb.w	r5, [r4], #1
 8090148:	e7f3      	b.n	8090132 <__strtok_r+0xa>
 809014a:	6014      	str	r4, [r2, #0]
 809014c:	7003      	strb	r3, [r0, #0]
 809014e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8090150:	b94d      	cbnz	r5, 8090166 <__strtok_r+0x3e>
 8090152:	6015      	str	r5, [r2, #0]
 8090154:	4628      	mov	r0, r5
 8090156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8090158:	f817 6b01 	ldrb.w	r6, [r7], #1
 809015c:	42b5      	cmp	r5, r6
 809015e:	d007      	beq.n	8090170 <__strtok_r+0x48>
 8090160:	2e00      	cmp	r6, #0
 8090162:	d1f9      	bne.n	8090158 <__strtok_r+0x30>
 8090164:	461c      	mov	r4, r3
 8090166:	4623      	mov	r3, r4
 8090168:	460f      	mov	r7, r1
 809016a:	f813 5b01 	ldrb.w	r5, [r3], #1
 809016e:	e7f3      	b.n	8090158 <__strtok_r+0x30>
 8090170:	b115      	cbz	r5, 8090178 <__strtok_r+0x50>
 8090172:	2100      	movs	r1, #0
 8090174:	7021      	strb	r1, [r4, #0]
 8090176:	e000      	b.n	809017a <__strtok_r+0x52>
 8090178:	462b      	mov	r3, r5
 809017a:	6013      	str	r3, [r2, #0]
 809017c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0809017e <strtok_r>:
 809017e:	2301      	movs	r3, #1
 8090180:	f7ff bfd2 	b.w	8090128 <__strtok_r>

08090184 <_strtol_r>:
 8090184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8090188:	460f      	mov	r7, r1
 809018a:	4680      	mov	r8, r0
 809018c:	483f      	ldr	r0, [pc, #252]	; (809028c <_strtol_r+0x108>)
 809018e:	f8d0 9000 	ldr.w	r9, [r0]
 8090192:	463d      	mov	r5, r7
 8090194:	f815 4b01 	ldrb.w	r4, [r5], #1
 8090198:	eb09 0004 	add.w	r0, r9, r4
 809019c:	7840      	ldrb	r0, [r0, #1]
 809019e:	f000 0008 	and.w	r0, r0, #8
 80901a2:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80901a6:	b108      	cbz	r0, 80901ac <_strtol_r+0x28>
 80901a8:	462f      	mov	r7, r5
 80901aa:	e7f2      	b.n	8090192 <_strtol_r+0xe>
 80901ac:	2c2d      	cmp	r4, #45	; 0x2d
 80901ae:	d103      	bne.n	80901b8 <_strtol_r+0x34>
 80901b0:	1cbd      	adds	r5, r7, #2
 80901b2:	787c      	ldrb	r4, [r7, #1]
 80901b4:	2601      	movs	r6, #1
 80901b6:	e003      	b.n	80901c0 <_strtol_r+0x3c>
 80901b8:	2c2b      	cmp	r4, #43	; 0x2b
 80901ba:	bf04      	itt	eq
 80901bc:	787c      	ldrbeq	r4, [r7, #1]
 80901be:	1cbd      	addeq	r5, r7, #2
 80901c0:	b113      	cbz	r3, 80901c8 <_strtol_r+0x44>
 80901c2:	2b10      	cmp	r3, #16
 80901c4:	d10a      	bne.n	80901dc <_strtol_r+0x58>
 80901c6:	e05b      	b.n	8090280 <_strtol_r+0xfc>
 80901c8:	2c30      	cmp	r4, #48	; 0x30
 80901ca:	d157      	bne.n	809027c <_strtol_r+0xf8>
 80901cc:	7828      	ldrb	r0, [r5, #0]
 80901ce:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80901d2:	2858      	cmp	r0, #88	; 0x58
 80901d4:	d14d      	bne.n	8090272 <_strtol_r+0xee>
 80901d6:	786c      	ldrb	r4, [r5, #1]
 80901d8:	2310      	movs	r3, #16
 80901da:	3502      	adds	r5, #2
 80901dc:	2e00      	cmp	r6, #0
 80901de:	bf14      	ite	ne
 80901e0:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80901e4:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80901e8:	fbbc faf3 	udiv	sl, ip, r3
 80901ec:	2700      	movs	r7, #0
 80901ee:	4638      	mov	r0, r7
 80901f0:	fb03 cc1a 	mls	ip, r3, sl, ip
 80901f4:	eb09 0e04 	add.w	lr, r9, r4
 80901f8:	f89e e001 	ldrb.w	lr, [lr, #1]
 80901fc:	f01e 0f04 	tst.w	lr, #4
 8090200:	d001      	beq.n	8090206 <_strtol_r+0x82>
 8090202:	3c30      	subs	r4, #48	; 0x30
 8090204:	e00b      	b.n	809021e <_strtol_r+0x9a>
 8090206:	f01e 0e03 	ands.w	lr, lr, #3
 809020a:	d01b      	beq.n	8090244 <_strtol_r+0xc0>
 809020c:	f1be 0f01 	cmp.w	lr, #1
 8090210:	bf0c      	ite	eq
 8090212:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 8090216:	f04f 0e57 	movne.w	lr, #87	; 0x57
 809021a:	ebce 0404 	rsb	r4, lr, r4
 809021e:	42a3      	cmp	r3, r4
 8090220:	dd10      	ble.n	8090244 <_strtol_r+0xc0>
 8090222:	f1b7 3fff 	cmp.w	r7, #4294967295
 8090226:	d00a      	beq.n	809023e <_strtol_r+0xba>
 8090228:	4550      	cmp	r0, sl
 809022a:	d806      	bhi.n	809023a <_strtol_r+0xb6>
 809022c:	d101      	bne.n	8090232 <_strtol_r+0xae>
 809022e:	4564      	cmp	r4, ip
 8090230:	dc03      	bgt.n	809023a <_strtol_r+0xb6>
 8090232:	fb03 4000 	mla	r0, r3, r0, r4
 8090236:	2701      	movs	r7, #1
 8090238:	e001      	b.n	809023e <_strtol_r+0xba>
 809023a:	f04f 37ff 	mov.w	r7, #4294967295
 809023e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8090242:	e7d7      	b.n	80901f4 <_strtol_r+0x70>
 8090244:	1c7b      	adds	r3, r7, #1
 8090246:	d10c      	bne.n	8090262 <_strtol_r+0xde>
 8090248:	2e00      	cmp	r6, #0
 809024a:	f04f 0322 	mov.w	r3, #34	; 0x22
 809024e:	bf14      	ite	ne
 8090250:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8090254:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8090258:	f8c8 3000 	str.w	r3, [r8]
 809025c:	b92a      	cbnz	r2, 809026a <_strtol_r+0xe6>
 809025e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8090262:	b106      	cbz	r6, 8090266 <_strtol_r+0xe2>
 8090264:	4240      	negs	r0, r0
 8090266:	b172      	cbz	r2, 8090286 <_strtol_r+0x102>
 8090268:	b107      	cbz	r7, 809026c <_strtol_r+0xe8>
 809026a:	1e69      	subs	r1, r5, #1
 809026c:	6011      	str	r1, [r2, #0]
 809026e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8090272:	2430      	movs	r4, #48	; 0x30
 8090274:	2b00      	cmp	r3, #0
 8090276:	d1b1      	bne.n	80901dc <_strtol_r+0x58>
 8090278:	2308      	movs	r3, #8
 809027a:	e7af      	b.n	80901dc <_strtol_r+0x58>
 809027c:	230a      	movs	r3, #10
 809027e:	e7ad      	b.n	80901dc <_strtol_r+0x58>
 8090280:	2c30      	cmp	r4, #48	; 0x30
 8090282:	d0a3      	beq.n	80901cc <_strtol_r+0x48>
 8090284:	e7aa      	b.n	80901dc <_strtol_r+0x58>
 8090286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 809028a:	bf00      	nop
 809028c:	200004ec 	.word	0x200004ec

08090290 <strtol>:
 8090290:	4613      	mov	r3, r2
 8090292:	460a      	mov	r2, r1
 8090294:	4601      	mov	r1, r0
 8090296:	4802      	ldr	r0, [pc, #8]	; (80902a0 <strtol+0x10>)
 8090298:	6800      	ldr	r0, [r0, #0]
 809029a:	f7ff bf73 	b.w	8090184 <_strtol_r>
 809029e:	bf00      	nop
 80902a0:	20000550 	.word	0x20000550

080902a4 <_strtoul_r>:
 80902a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80902a8:	460e      	mov	r6, r1
 80902aa:	4680      	mov	r8, r0
 80902ac:	483b      	ldr	r0, [pc, #236]	; (809039c <_strtoul_r+0xf8>)
 80902ae:	f8d0 9000 	ldr.w	r9, [r0]
 80902b2:	4635      	mov	r5, r6
 80902b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80902b8:	eb09 0004 	add.w	r0, r9, r4
 80902bc:	7840      	ldrb	r0, [r0, #1]
 80902be:	f000 0008 	and.w	r0, r0, #8
 80902c2:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 80902c6:	b108      	cbz	r0, 80902cc <_strtoul_r+0x28>
 80902c8:	462e      	mov	r6, r5
 80902ca:	e7f2      	b.n	80902b2 <_strtoul_r+0xe>
 80902cc:	2c2d      	cmp	r4, #45	; 0x2d
 80902ce:	d103      	bne.n	80902d8 <_strtoul_r+0x34>
 80902d0:	1cb5      	adds	r5, r6, #2
 80902d2:	7874      	ldrb	r4, [r6, #1]
 80902d4:	2701      	movs	r7, #1
 80902d6:	e003      	b.n	80902e0 <_strtoul_r+0x3c>
 80902d8:	2c2b      	cmp	r4, #43	; 0x2b
 80902da:	bf04      	itt	eq
 80902dc:	7874      	ldrbeq	r4, [r6, #1]
 80902de:	1cb5      	addeq	r5, r6, #2
 80902e0:	b113      	cbz	r3, 80902e8 <_strtoul_r+0x44>
 80902e2:	2b10      	cmp	r3, #16
 80902e4:	d10a      	bne.n	80902fc <_strtoul_r+0x58>
 80902e6:	e053      	b.n	8090390 <_strtoul_r+0xec>
 80902e8:	2c30      	cmp	r4, #48	; 0x30
 80902ea:	d14f      	bne.n	809038c <_strtoul_r+0xe8>
 80902ec:	7828      	ldrb	r0, [r5, #0]
 80902ee:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80902f2:	2858      	cmp	r0, #88	; 0x58
 80902f4:	d145      	bne.n	8090382 <_strtoul_r+0xde>
 80902f6:	786c      	ldrb	r4, [r5, #1]
 80902f8:	2310      	movs	r3, #16
 80902fa:	3502      	adds	r5, #2
 80902fc:	f04f 3cff 	mov.w	ip, #4294967295
 8090300:	fbbc fcf3 	udiv	ip, ip, r3
 8090304:	fb03 fa0c 	mul.w	sl, r3, ip
 8090308:	2600      	movs	r6, #0
 809030a:	ea6f 0a0a 	mvn.w	sl, sl
 809030e:	4630      	mov	r0, r6
 8090310:	eb09 0e04 	add.w	lr, r9, r4
 8090314:	f89e e001 	ldrb.w	lr, [lr, #1]
 8090318:	f01e 0f04 	tst.w	lr, #4
 809031c:	d001      	beq.n	8090322 <_strtoul_r+0x7e>
 809031e:	3c30      	subs	r4, #48	; 0x30
 8090320:	e00b      	b.n	809033a <_strtoul_r+0x96>
 8090322:	f01e 0e03 	ands.w	lr, lr, #3
 8090326:	d01a      	beq.n	809035e <_strtoul_r+0xba>
 8090328:	f1be 0f01 	cmp.w	lr, #1
 809032c:	bf0c      	ite	eq
 809032e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 8090332:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8090336:	ebce 0404 	rsb	r4, lr, r4
 809033a:	42a3      	cmp	r3, r4
 809033c:	dd0f      	ble.n	809035e <_strtoul_r+0xba>
 809033e:	2e00      	cmp	r6, #0
 8090340:	db08      	blt.n	8090354 <_strtoul_r+0xb0>
 8090342:	4560      	cmp	r0, ip
 8090344:	d806      	bhi.n	8090354 <_strtoul_r+0xb0>
 8090346:	d101      	bne.n	809034c <_strtoul_r+0xa8>
 8090348:	4554      	cmp	r4, sl
 809034a:	dc03      	bgt.n	8090354 <_strtoul_r+0xb0>
 809034c:	fb03 4000 	mla	r0, r3, r0, r4
 8090350:	2601      	movs	r6, #1
 8090352:	e001      	b.n	8090358 <_strtoul_r+0xb4>
 8090354:	f04f 36ff 	mov.w	r6, #4294967295
 8090358:	f815 4b01 	ldrb.w	r4, [r5], #1
 809035c:	e7d8      	b.n	8090310 <_strtoul_r+0x6c>
 809035e:	2e00      	cmp	r6, #0
 8090360:	da07      	bge.n	8090372 <_strtoul_r+0xce>
 8090362:	2322      	movs	r3, #34	; 0x22
 8090364:	f8c8 3000 	str.w	r3, [r8]
 8090368:	f04f 30ff 	mov.w	r0, #4294967295
 809036c:	b92a      	cbnz	r2, 809037a <_strtoul_r+0xd6>
 809036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8090372:	b107      	cbz	r7, 8090376 <_strtoul_r+0xd2>
 8090374:	4240      	negs	r0, r0
 8090376:	b172      	cbz	r2, 8090396 <_strtoul_r+0xf2>
 8090378:	b106      	cbz	r6, 809037c <_strtoul_r+0xd8>
 809037a:	1e69      	subs	r1, r5, #1
 809037c:	6011      	str	r1, [r2, #0]
 809037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8090382:	2430      	movs	r4, #48	; 0x30
 8090384:	2b00      	cmp	r3, #0
 8090386:	d1b9      	bne.n	80902fc <_strtoul_r+0x58>
 8090388:	2308      	movs	r3, #8
 809038a:	e7b7      	b.n	80902fc <_strtoul_r+0x58>
 809038c:	230a      	movs	r3, #10
 809038e:	e7b5      	b.n	80902fc <_strtoul_r+0x58>
 8090390:	2c30      	cmp	r4, #48	; 0x30
 8090392:	d0ab      	beq.n	80902ec <_strtoul_r+0x48>
 8090394:	e7b2      	b.n	80902fc <_strtoul_r+0x58>
 8090396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 809039a:	bf00      	nop
 809039c:	200004ec 	.word	0x200004ec

080903a0 <strtoul>:
 80903a0:	4613      	mov	r3, r2
 80903a2:	460a      	mov	r2, r1
 80903a4:	4601      	mov	r1, r0
 80903a6:	4802      	ldr	r0, [pc, #8]	; (80903b0 <strtoul+0x10>)
 80903a8:	6800      	ldr	r0, [r0, #0]
 80903aa:	f7ff bf7b 	b.w	80902a4 <_strtoul_r>
 80903ae:	bf00      	nop
 80903b0:	20000550 	.word	0x20000550

080903b4 <__get_current_time_locale>:
 80903b4:	4b04      	ldr	r3, [pc, #16]	; (80903c8 <__get_current_time_locale+0x14>)
 80903b6:	4a05      	ldr	r2, [pc, #20]	; (80903cc <__get_current_time_locale+0x18>)
 80903b8:	6818      	ldr	r0, [r3, #0]
 80903ba:	4b05      	ldr	r3, [pc, #20]	; (80903d0 <__get_current_time_locale+0x1c>)
 80903bc:	2800      	cmp	r0, #0
 80903be:	bf14      	ite	ne
 80903c0:	4610      	movne	r0, r2
 80903c2:	4618      	moveq	r0, r3
 80903c4:	4770      	bx	lr
 80903c6:	bf00      	nop
 80903c8:	2000171c 	.word	0x2000171c
 80903cc:	20001720 	.word	0x20001720
 80903d0:	080949b4 	.word	0x080949b4

080903d4 <toupper>:
 80903d4:	4b04      	ldr	r3, [pc, #16]	; (80903e8 <toupper+0x14>)
 80903d6:	681b      	ldr	r3, [r3, #0]
 80903d8:	4403      	add	r3, r0
 80903da:	785b      	ldrb	r3, [r3, #1]
 80903dc:	f003 0303 	and.w	r3, r3, #3
 80903e0:	2b02      	cmp	r3, #2
 80903e2:	bf08      	it	eq
 80903e4:	3820      	subeq	r0, #32
 80903e6:	4770      	bx	lr
 80903e8:	200004ec 	.word	0x200004ec

080903ec <__tzcalc_limits>:
 80903ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80903f0:	4604      	mov	r4, r0
 80903f2:	f000 fd91 	bl	8090f18 <__gettzinfo>
 80903f6:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80903fa:	429c      	cmp	r4, r3
 80903fc:	f340 8096 	ble.w	809052c <__tzcalc_limits+0x140>
 8090400:	f240 156d 	movw	r5, #365	; 0x16d
 8090404:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8090408:	18e3      	adds	r3, r4, r3
 809040a:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 809040e:	109b      	asrs	r3, r3, #2
 8090410:	fb05 3502 	mla	r5, r5, r2, r3
 8090414:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 8090418:	f06f 0363 	mvn.w	r3, #99	; 0x63
 809041c:	fb92 f3f3 	sdiv	r3, r2, r3
 8090420:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8090424:	442b      	add	r3, r5
 8090426:	18a5      	adds	r5, r4, r2
 8090428:	f44f 72c8 	mov.w	r2, #400	; 0x190
 809042c:	fb94 f7f2 	sdiv	r7, r4, r2
 8090430:	fb95 f5f2 	sdiv	r5, r5, r2
 8090434:	fb02 4717 	mls	r7, r2, r7, r4
 8090438:	441d      	add	r5, r3
 809043a:	2364      	movs	r3, #100	; 0x64
 809043c:	fb94 f6f3 	sdiv	r6, r4, r3
 8090440:	fab7 fe87 	clz	lr, r7
 8090444:	4601      	mov	r1, r0
 8090446:	fb03 4616 	mls	r6, r3, r6, r4
 809044a:	f100 0338 	add.w	r3, r0, #56	; 0x38
 809044e:	9301      	str	r3, [sp, #4]
 8090450:	f004 0303 	and.w	r3, r4, #3
 8090454:	6044      	str	r4, [r0, #4]
 8090456:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 809045a:	9300      	str	r3, [sp, #0]
 809045c:	f04f 0c07 	mov.w	ip, #7
 8090460:	7a0b      	ldrb	r3, [r1, #8]
 8090462:	2b4a      	cmp	r3, #74	; 0x4a
 8090464:	d10e      	bne.n	8090484 <__tzcalc_limits+0x98>
 8090466:	694b      	ldr	r3, [r1, #20]
 8090468:	9a00      	ldr	r2, [sp, #0]
 809046a:	18ec      	adds	r4, r5, r3
 809046c:	b902      	cbnz	r2, 8090470 <__tzcalc_limits+0x84>
 809046e:	b906      	cbnz	r6, 8090472 <__tzcalc_limits+0x86>
 8090470:	b927      	cbnz	r7, 809047c <__tzcalc_limits+0x90>
 8090472:	2b3b      	cmp	r3, #59	; 0x3b
 8090474:	bfd4      	ite	le
 8090476:	2300      	movle	r3, #0
 8090478:	2301      	movgt	r3, #1
 809047a:	e000      	b.n	809047e <__tzcalc_limits+0x92>
 809047c:	2300      	movs	r3, #0
 809047e:	4423      	add	r3, r4
 8090480:	3b01      	subs	r3, #1
 8090482:	e03f      	b.n	8090504 <__tzcalc_limits+0x118>
 8090484:	2b44      	cmp	r3, #68	; 0x44
 8090486:	d102      	bne.n	809048e <__tzcalc_limits+0xa2>
 8090488:	694b      	ldr	r3, [r1, #20]
 809048a:	442b      	add	r3, r5
 809048c:	e03a      	b.n	8090504 <__tzcalc_limits+0x118>
 809048e:	9b00      	ldr	r3, [sp, #0]
 8090490:	b92b      	cbnz	r3, 809049e <__tzcalc_limits+0xb2>
 8090492:	2e00      	cmp	r6, #0
 8090494:	bf0c      	ite	eq
 8090496:	46f0      	moveq	r8, lr
 8090498:	f04f 0801 	movne.w	r8, #1
 809049c:	e000      	b.n	80904a0 <__tzcalc_limits+0xb4>
 809049e:	46f0      	mov	r8, lr
 80904a0:	46a9      	mov	r9, r5
 80904a2:	4b24      	ldr	r3, [pc, #144]	; (8090534 <__tzcalc_limits+0x148>)
 80904a4:	2230      	movs	r2, #48	; 0x30
 80904a6:	fb02 3808 	mla	r8, r2, r8, r3
 80904aa:	68cc      	ldr	r4, [r1, #12]
 80904ac:	f1a8 0a04 	sub.w	sl, r8, #4
 80904b0:	2301      	movs	r3, #1
 80904b2:	42a3      	cmp	r3, r4
 80904b4:	da04      	bge.n	80904c0 <__tzcalc_limits+0xd4>
 80904b6:	f85a bf04 	ldr.w	fp, [sl, #4]!
 80904ba:	3301      	adds	r3, #1
 80904bc:	44d9      	add	r9, fp
 80904be:	e7f8      	b.n	80904b2 <__tzcalc_limits+0xc6>
 80904c0:	f109 0304 	add.w	r3, r9, #4
 80904c4:	fb93 fbfc 	sdiv	fp, r3, ip
 80904c8:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 80904cc:	ebca 0a03 	rsb	sl, sl, r3
 80904d0:	694b      	ldr	r3, [r1, #20]
 80904d2:	2c01      	cmp	r4, #1
 80904d4:	bfb8      	it	lt
 80904d6:	2401      	movlt	r4, #1
 80904d8:	ebb3 0a0a 	subs.w	sl, r3, sl
 80904dc:	690b      	ldr	r3, [r1, #16]
 80904de:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80904e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80904e6:	f104 34ff 	add.w	r4, r4, #4294967295
 80904ea:	bf48      	it	mi
 80904ec:	f10a 0a07 	addmi.w	sl, sl, #7
 80904f0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80904f4:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80904f8:	4453      	add	r3, sl
 80904fa:	42a3      	cmp	r3, r4
 80904fc:	db01      	blt.n	8090502 <__tzcalc_limits+0x116>
 80904fe:	3b07      	subs	r3, #7
 8090500:	e7fb      	b.n	80904fa <__tzcalc_limits+0x10e>
 8090502:	444b      	add	r3, r9
 8090504:	698c      	ldr	r4, [r1, #24]
 8090506:	4a0c      	ldr	r2, [pc, #48]	; (8090538 <__tzcalc_limits+0x14c>)
 8090508:	fb02 4303 	mla	r3, r2, r3, r4
 809050c:	6a0c      	ldr	r4, [r1, #32]
 809050e:	4423      	add	r3, r4
 8090510:	f841 3f1c 	str.w	r3, [r1, #28]!
 8090514:	9b01      	ldr	r3, [sp, #4]
 8090516:	4299      	cmp	r1, r3
 8090518:	d1a2      	bne.n	8090460 <__tzcalc_limits+0x74>
 809051a:	69c3      	ldr	r3, [r0, #28]
 809051c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 809051e:	4293      	cmp	r3, r2
 8090520:	bfac      	ite	ge
 8090522:	2300      	movge	r3, #0
 8090524:	2301      	movlt	r3, #1
 8090526:	6003      	str	r3, [r0, #0]
 8090528:	2001      	movs	r0, #1
 809052a:	e000      	b.n	809052e <__tzcalc_limits+0x142>
 809052c:	2000      	movs	r0, #0
 809052e:	b003      	add	sp, #12
 8090530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8090534:	0809477c 	.word	0x0809477c
 8090538:	00015180 	.word	0x00015180

0809053c <__tz_lock>:
 809053c:	4770      	bx	lr

0809053e <__tz_unlock>:
 809053e:	4770      	bx	lr

08090540 <_tzset_unlocked>:
 8090540:	4b01      	ldr	r3, [pc, #4]	; (8090548 <_tzset_unlocked+0x8>)
 8090542:	6818      	ldr	r0, [r3, #0]
 8090544:	f000 b802 	b.w	809054c <_tzset_unlocked_r>
 8090548:	20000550 	.word	0x20000550

0809054c <_tzset_unlocked_r>:
 809054c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8090550:	b08d      	sub	sp, #52	; 0x34
 8090552:	4607      	mov	r7, r0
 8090554:	f000 fce0 	bl	8090f18 <__gettzinfo>
 8090558:	49b0      	ldr	r1, [pc, #704]	; (809081c <_tzset_unlocked_r+0x2d0>)
 809055a:	4604      	mov	r4, r0
 809055c:	4638      	mov	r0, r7
 809055e:	f000 fcd3 	bl	8090f08 <_getenv_r>
 8090562:	4eaf      	ldr	r6, [pc, #700]	; (8090820 <_tzset_unlocked_r+0x2d4>)
 8090564:	4605      	mov	r5, r0
 8090566:	b960      	cbnz	r0, 8090582 <_tzset_unlocked_r+0x36>
 8090568:	4bae      	ldr	r3, [pc, #696]	; (8090824 <_tzset_unlocked_r+0x2d8>)
 809056a:	4aaf      	ldr	r2, [pc, #700]	; (8090828 <_tzset_unlocked_r+0x2dc>)
 809056c:	6018      	str	r0, [r3, #0]
 809056e:	4baf      	ldr	r3, [pc, #700]	; (809082c <_tzset_unlocked_r+0x2e0>)
 8090570:	6018      	str	r0, [r3, #0]
 8090572:	4baf      	ldr	r3, [pc, #700]	; (8090830 <_tzset_unlocked_r+0x2e4>)
 8090574:	6830      	ldr	r0, [r6, #0]
 8090576:	601a      	str	r2, [r3, #0]
 8090578:	605a      	str	r2, [r3, #4]
 809057a:	f7fa fa43 	bl	808aa04 <free>
 809057e:	6035      	str	r5, [r6, #0]
 8090580:	e148      	b.n	8090814 <_tzset_unlocked_r+0x2c8>
 8090582:	6831      	ldr	r1, [r6, #0]
 8090584:	b979      	cbnz	r1, 80905a6 <_tzset_unlocked_r+0x5a>
 8090586:	6830      	ldr	r0, [r6, #0]
 8090588:	f7fa fa3c 	bl	808aa04 <free>
 809058c:	4628      	mov	r0, r5
 809058e:	f7fe ff55 	bl	808f43c <strlen>
 8090592:	1c41      	adds	r1, r0, #1
 8090594:	4638      	mov	r0, r7
 8090596:	f7fa fa85 	bl	808aaa4 <_malloc_r>
 809059a:	6030      	str	r0, [r6, #0]
 809059c:	b148      	cbz	r0, 80905b2 <_tzset_unlocked_r+0x66>
 809059e:	4629      	mov	r1, r5
 80905a0:	f7fe fa14 	bl	808e9cc <strcpy>
 80905a4:	e005      	b.n	80905b2 <_tzset_unlocked_r+0x66>
 80905a6:	f7fe fa07 	bl	808e9b8 <strcmp>
 80905aa:	2800      	cmp	r0, #0
 80905ac:	f000 8132 	beq.w	8090814 <_tzset_unlocked_r+0x2c8>
 80905b0:	e7e9      	b.n	8090586 <_tzset_unlocked_r+0x3a>
 80905b2:	782b      	ldrb	r3, [r5, #0]
 80905b4:	ae0a      	add	r6, sp, #40	; 0x28
 80905b6:	2b3a      	cmp	r3, #58	; 0x3a
 80905b8:	bf08      	it	eq
 80905ba:	3501      	addeq	r5, #1
 80905bc:	4633      	mov	r3, r6
 80905be:	4a9d      	ldr	r2, [pc, #628]	; (8090834 <_tzset_unlocked_r+0x2e8>)
 80905c0:	499d      	ldr	r1, [pc, #628]	; (8090838 <_tzset_unlocked_r+0x2ec>)
 80905c2:	4628      	mov	r0, r5
 80905c4:	f7fa fa46 	bl	808aa54 <siscanf>
 80905c8:	2800      	cmp	r0, #0
 80905ca:	f340 8123 	ble.w	8090814 <_tzset_unlocked_r+0x2c8>
 80905ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80905d0:	18ef      	adds	r7, r5, r3
 80905d2:	5ceb      	ldrb	r3, [r5, r3]
 80905d4:	2b2d      	cmp	r3, #45	; 0x2d
 80905d6:	d103      	bne.n	80905e0 <_tzset_unlocked_r+0x94>
 80905d8:	3701      	adds	r7, #1
 80905da:	f04f 35ff 	mov.w	r5, #4294967295
 80905de:	e003      	b.n	80905e8 <_tzset_unlocked_r+0x9c>
 80905e0:	2b2b      	cmp	r3, #43	; 0x2b
 80905e2:	bf08      	it	eq
 80905e4:	3701      	addeq	r7, #1
 80905e6:	2501      	movs	r5, #1
 80905e8:	f10d 0a20 	add.w	sl, sp, #32
 80905ec:	f10d 0b1e 	add.w	fp, sp, #30
 80905f0:	f04f 0800 	mov.w	r8, #0
 80905f4:	9603      	str	r6, [sp, #12]
 80905f6:	f8cd a008 	str.w	sl, [sp, #8]
 80905fa:	9601      	str	r6, [sp, #4]
 80905fc:	f8cd b000 	str.w	fp, [sp]
 8090600:	4633      	mov	r3, r6
 8090602:	aa07      	add	r2, sp, #28
 8090604:	498d      	ldr	r1, [pc, #564]	; (809083c <_tzset_unlocked_r+0x2f0>)
 8090606:	4638      	mov	r0, r7
 8090608:	f8ad 801e 	strh.w	r8, [sp, #30]
 809060c:	f8ad 8020 	strh.w	r8, [sp, #32]
 8090610:	f7fa fa20 	bl	808aa54 <siscanf>
 8090614:	4540      	cmp	r0, r8
 8090616:	f340 80fd 	ble.w	8090814 <_tzset_unlocked_r+0x2c8>
 809061a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 809061e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8090622:	213c      	movs	r1, #60	; 0x3c
 8090624:	fb01 3302 	mla	r3, r1, r2, r3
 8090628:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 809062c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8090630:	fb01 3302 	mla	r3, r1, r2, r3
 8090634:	435d      	muls	r5, r3
 8090636:	4b7f      	ldr	r3, [pc, #508]	; (8090834 <_tzset_unlocked_r+0x2e8>)
 8090638:	6225      	str	r5, [r4, #32]
 809063a:	4d7d      	ldr	r5, [pc, #500]	; (8090830 <_tzset_unlocked_r+0x2e4>)
 809063c:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8090848 <_tzset_unlocked_r+0x2fc>
 8090640:	602b      	str	r3, [r5, #0]
 8090642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8090644:	464a      	mov	r2, r9
 8090646:	441f      	add	r7, r3
 8090648:	497b      	ldr	r1, [pc, #492]	; (8090838 <_tzset_unlocked_r+0x2ec>)
 809064a:	4633      	mov	r3, r6
 809064c:	4638      	mov	r0, r7
 809064e:	f7fa fa01 	bl	808aa54 <siscanf>
 8090652:	4540      	cmp	r0, r8
 8090654:	dc08      	bgt.n	8090668 <_tzset_unlocked_r+0x11c>
 8090656:	682b      	ldr	r3, [r5, #0]
 8090658:	6a22      	ldr	r2, [r4, #32]
 809065a:	606b      	str	r3, [r5, #4]
 809065c:	4b71      	ldr	r3, [pc, #452]	; (8090824 <_tzset_unlocked_r+0x2d8>)
 809065e:	601a      	str	r2, [r3, #0]
 8090660:	4b72      	ldr	r3, [pc, #456]	; (809082c <_tzset_unlocked_r+0x2e0>)
 8090662:	f8c3 8000 	str.w	r8, [r3]
 8090666:	e0d5      	b.n	8090814 <_tzset_unlocked_r+0x2c8>
 8090668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 809066a:	f8c5 9004 	str.w	r9, [r5, #4]
 809066e:	18fd      	adds	r5, r7, r3
 8090670:	5cfb      	ldrb	r3, [r7, r3]
 8090672:	2b2d      	cmp	r3, #45	; 0x2d
 8090674:	d103      	bne.n	809067e <_tzset_unlocked_r+0x132>
 8090676:	3501      	adds	r5, #1
 8090678:	f04f 37ff 	mov.w	r7, #4294967295
 809067c:	e003      	b.n	8090686 <_tzset_unlocked_r+0x13a>
 809067e:	2b2b      	cmp	r3, #43	; 0x2b
 8090680:	bf08      	it	eq
 8090682:	3501      	addeq	r5, #1
 8090684:	2701      	movs	r7, #1
 8090686:	2300      	movs	r3, #0
 8090688:	f8ad 301c 	strh.w	r3, [sp, #28]
 809068c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8090690:	f8ad 3020 	strh.w	r3, [sp, #32]
 8090694:	930a      	str	r3, [sp, #40]	; 0x28
 8090696:	9603      	str	r6, [sp, #12]
 8090698:	f8cd a008 	str.w	sl, [sp, #8]
 809069c:	9601      	str	r6, [sp, #4]
 809069e:	f8cd b000 	str.w	fp, [sp]
 80906a2:	4633      	mov	r3, r6
 80906a4:	aa07      	add	r2, sp, #28
 80906a6:	4965      	ldr	r1, [pc, #404]	; (809083c <_tzset_unlocked_r+0x2f0>)
 80906a8:	4628      	mov	r0, r5
 80906aa:	f7fa f9d3 	bl	808aa54 <siscanf>
 80906ae:	2800      	cmp	r0, #0
 80906b0:	dc04      	bgt.n	80906bc <_tzset_unlocked_r+0x170>
 80906b2:	6a23      	ldr	r3, [r4, #32]
 80906b4:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80906b8:	63e3      	str	r3, [r4, #60]	; 0x3c
 80906ba:	e00e      	b.n	80906da <_tzset_unlocked_r+0x18e>
 80906bc:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80906c0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80906c4:	213c      	movs	r1, #60	; 0x3c
 80906c6:	fb01 3302 	mla	r3, r1, r2, r3
 80906ca:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80906ce:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80906d2:	fb01 3302 	mla	r3, r1, r2, r3
 80906d6:	435f      	muls	r7, r3
 80906d8:	63e7      	str	r7, [r4, #60]	; 0x3c
 80906da:	4627      	mov	r7, r4
 80906dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80906de:	f04f 0900 	mov.w	r9, #0
 80906e2:	441d      	add	r5, r3
 80906e4:	782b      	ldrb	r3, [r5, #0]
 80906e6:	2b2c      	cmp	r3, #44	; 0x2c
 80906e8:	bf08      	it	eq
 80906ea:	3501      	addeq	r5, #1
 80906ec:	f895 8000 	ldrb.w	r8, [r5]
 80906f0:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80906f4:	d126      	bne.n	8090744 <_tzset_unlocked_r+0x1f8>
 80906f6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80906fa:	9302      	str	r3, [sp, #8]
 80906fc:	ab09      	add	r3, sp, #36	; 0x24
 80906fe:	9300      	str	r3, [sp, #0]
 8090700:	9603      	str	r6, [sp, #12]
 8090702:	9601      	str	r6, [sp, #4]
 8090704:	4633      	mov	r3, r6
 8090706:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 809070a:	494d      	ldr	r1, [pc, #308]	; (8090840 <_tzset_unlocked_r+0x2f4>)
 809070c:	4628      	mov	r0, r5
 809070e:	f7fa f9a1 	bl	808aa54 <siscanf>
 8090712:	2803      	cmp	r0, #3
 8090714:	d17e      	bne.n	8090814 <_tzset_unlocked_r+0x2c8>
 8090716:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 809071a:	1e4b      	subs	r3, r1, #1
 809071c:	2b0b      	cmp	r3, #11
 809071e:	d879      	bhi.n	8090814 <_tzset_unlocked_r+0x2c8>
 8090720:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8090724:	1e53      	subs	r3, r2, #1
 8090726:	2b04      	cmp	r3, #4
 8090728:	d874      	bhi.n	8090814 <_tzset_unlocked_r+0x2c8>
 809072a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 809072e:	2b06      	cmp	r3, #6
 8090730:	d870      	bhi.n	8090814 <_tzset_unlocked_r+0x2c8>
 8090732:	f887 8008 	strb.w	r8, [r7, #8]
 8090736:	60f9      	str	r1, [r7, #12]
 8090738:	613a      	str	r2, [r7, #16]
 809073a:	617b      	str	r3, [r7, #20]
 809073c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 809073e:	eb05 0803 	add.w	r8, r5, r3
 8090742:	e02a      	b.n	809079a <_tzset_unlocked_r+0x24e>
 8090744:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8090748:	bf06      	itte	eq
 809074a:	4643      	moveq	r3, r8
 809074c:	3501      	addeq	r5, #1
 809074e:	2344      	movne	r3, #68	; 0x44
 8090750:	220a      	movs	r2, #10
 8090752:	a90b      	add	r1, sp, #44	; 0x2c
 8090754:	4628      	mov	r0, r5
 8090756:	9305      	str	r3, [sp, #20]
 8090758:	f7ff fe22 	bl	80903a0 <strtoul>
 809075c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8090760:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8090764:	4545      	cmp	r5, r8
 8090766:	9b05      	ldr	r3, [sp, #20]
 8090768:	d114      	bne.n	8090794 <_tzset_unlocked_r+0x248>
 809076a:	234d      	movs	r3, #77	; 0x4d
 809076c:	f1b9 0f00 	cmp.w	r9, #0
 8090770:	d107      	bne.n	8090782 <_tzset_unlocked_r+0x236>
 8090772:	7223      	strb	r3, [r4, #8]
 8090774:	2303      	movs	r3, #3
 8090776:	60e3      	str	r3, [r4, #12]
 8090778:	2302      	movs	r3, #2
 809077a:	6123      	str	r3, [r4, #16]
 809077c:	f8c4 9014 	str.w	r9, [r4, #20]
 8090780:	e00b      	b.n	809079a <_tzset_unlocked_r+0x24e>
 8090782:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8090786:	230b      	movs	r3, #11
 8090788:	62a3      	str	r3, [r4, #40]	; 0x28
 809078a:	2301      	movs	r3, #1
 809078c:	62e3      	str	r3, [r4, #44]	; 0x2c
 809078e:	2300      	movs	r3, #0
 8090790:	6323      	str	r3, [r4, #48]	; 0x30
 8090792:	e002      	b.n	809079a <_tzset_unlocked_r+0x24e>
 8090794:	b280      	uxth	r0, r0
 8090796:	723b      	strb	r3, [r7, #8]
 8090798:	6178      	str	r0, [r7, #20]
 809079a:	2302      	movs	r3, #2
 809079c:	f8ad 301c 	strh.w	r3, [sp, #28]
 80907a0:	2300      	movs	r3, #0
 80907a2:	f8ad 301e 	strh.w	r3, [sp, #30]
 80907a6:	f8ad 3020 	strh.w	r3, [sp, #32]
 80907aa:	930a      	str	r3, [sp, #40]	; 0x28
 80907ac:	f898 3000 	ldrb.w	r3, [r8]
 80907b0:	2b2f      	cmp	r3, #47	; 0x2f
 80907b2:	d10b      	bne.n	80907cc <_tzset_unlocked_r+0x280>
 80907b4:	9603      	str	r6, [sp, #12]
 80907b6:	f8cd a008 	str.w	sl, [sp, #8]
 80907ba:	9601      	str	r6, [sp, #4]
 80907bc:	f8cd b000 	str.w	fp, [sp]
 80907c0:	4633      	mov	r3, r6
 80907c2:	aa07      	add	r2, sp, #28
 80907c4:	491f      	ldr	r1, [pc, #124]	; (8090844 <_tzset_unlocked_r+0x2f8>)
 80907c6:	4640      	mov	r0, r8
 80907c8:	f7fa f944 	bl	808aa54 <siscanf>
 80907cc:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80907d0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80907d4:	213c      	movs	r1, #60	; 0x3c
 80907d6:	fb01 3302 	mla	r3, r1, r2, r3
 80907da:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80907de:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80907e2:	fb01 3302 	mla	r3, r1, r2, r3
 80907e6:	61bb      	str	r3, [r7, #24]
 80907e8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80907ea:	f109 0901 	add.w	r9, r9, #1
 80907ee:	f1b9 0f02 	cmp.w	r9, #2
 80907f2:	4445      	add	r5, r8
 80907f4:	f107 071c 	add.w	r7, r7, #28
 80907f8:	f47f af74 	bne.w	80906e4 <_tzset_unlocked_r+0x198>
 80907fc:	6860      	ldr	r0, [r4, #4]
 80907fe:	f7ff fdf5 	bl	80903ec <__tzcalc_limits>
 8090802:	6a22      	ldr	r2, [r4, #32]
 8090804:	4b07      	ldr	r3, [pc, #28]	; (8090824 <_tzset_unlocked_r+0x2d8>)
 8090806:	601a      	str	r2, [r3, #0]
 8090808:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 809080a:	1a9b      	subs	r3, r3, r2
 809080c:	4a07      	ldr	r2, [pc, #28]	; (809082c <_tzset_unlocked_r+0x2e0>)
 809080e:	bf18      	it	ne
 8090810:	2301      	movne	r3, #1
 8090812:	6013      	str	r3, [r2, #0]
 8090814:	b00d      	add	sp, #52	; 0x34
 8090816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 809081a:	bf00      	nop
 809081c:	08094ab0 	.word	0x08094ab0
 8090820:	20001834 	.word	0x20001834
 8090824:	2000183c 	.word	0x2000183c
 8090828:	08094ab3 	.word	0x08094ab3
 809082c:	20001838 	.word	0x20001838
 8090830:	2000058c 	.word	0x2000058c
 8090834:	20001827 	.word	0x20001827
 8090838:	08094ab7 	.word	0x08094ab7
 809083c:	08094ada 	.word	0x08094ada
 8090840:	08094ac6 	.word	0x08094ac6
 8090844:	08094ad9 	.word	0x08094ad9
 8090848:	2000181c 	.word	0x2000181c

0809084c <abs>:
 809084c:	2800      	cmp	r0, #0
 809084e:	bfb8      	it	lt
 8090850:	4240      	neglt	r0, r0
 8090852:	4770      	bx	lr

08090854 <rshift>:
 8090854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8090856:	6906      	ldr	r6, [r0, #16]
 8090858:	114b      	asrs	r3, r1, #5
 809085a:	42b3      	cmp	r3, r6
 809085c:	f100 0514 	add.w	r5, r0, #20
 8090860:	da27      	bge.n	80908b2 <rshift+0x5e>
 8090862:	f011 011f 	ands.w	r1, r1, #31
 8090866:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 809086a:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 809086e:	d101      	bne.n	8090874 <rshift+0x20>
 8090870:	4629      	mov	r1, r5
 8090872:	e016      	b.n	80908a2 <rshift+0x4e>
 8090874:	1d14      	adds	r4, r2, #4
 8090876:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 809087a:	462b      	mov	r3, r5
 809087c:	f1c1 0e20 	rsb	lr, r1, #32
 8090880:	40ca      	lsrs	r2, r1
 8090882:	42b4      	cmp	r4, r6
 8090884:	d209      	bcs.n	809089a <rshift+0x46>
 8090886:	6827      	ldr	r7, [r4, #0]
 8090888:	fa07 f70e 	lsl.w	r7, r7, lr
 809088c:	433a      	orrs	r2, r7
 809088e:	f843 2b04 	str.w	r2, [r3], #4
 8090892:	f854 2b04 	ldr.w	r2, [r4], #4
 8090896:	40ca      	lsrs	r2, r1
 8090898:	e7f3      	b.n	8090882 <rshift+0x2e>
 809089a:	601a      	str	r2, [r3, #0]
 809089c:	b152      	cbz	r2, 80908b4 <rshift+0x60>
 809089e:	3304      	adds	r3, #4
 80908a0:	e008      	b.n	80908b4 <rshift+0x60>
 80908a2:	42b2      	cmp	r2, r6
 80908a4:	460b      	mov	r3, r1
 80908a6:	d205      	bcs.n	80908b4 <rshift+0x60>
 80908a8:	f852 3b04 	ldr.w	r3, [r2], #4
 80908ac:	f841 3b04 	str.w	r3, [r1], #4
 80908b0:	e7f7      	b.n	80908a2 <rshift+0x4e>
 80908b2:	462b      	mov	r3, r5
 80908b4:	1b5b      	subs	r3, r3, r5
 80908b6:	109b      	asrs	r3, r3, #2
 80908b8:	6103      	str	r3, [r0, #16]
 80908ba:	b903      	cbnz	r3, 80908be <rshift+0x6a>
 80908bc:	6143      	str	r3, [r0, #20]
 80908be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080908c0 <__hexdig_fun>:
 80908c0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80908c4:	2b09      	cmp	r3, #9
 80908c6:	d801      	bhi.n	80908cc <__hexdig_fun+0xc>
 80908c8:	3820      	subs	r0, #32
 80908ca:	e00a      	b.n	80908e2 <__hexdig_fun+0x22>
 80908cc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80908d0:	2b05      	cmp	r3, #5
 80908d2:	d801      	bhi.n	80908d8 <__hexdig_fun+0x18>
 80908d4:	3847      	subs	r0, #71	; 0x47
 80908d6:	e004      	b.n	80908e2 <__hexdig_fun+0x22>
 80908d8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80908dc:	2b05      	cmp	r3, #5
 80908de:	d802      	bhi.n	80908e6 <__hexdig_fun+0x26>
 80908e0:	3827      	subs	r0, #39	; 0x27
 80908e2:	b2c0      	uxtb	r0, r0
 80908e4:	4770      	bx	lr
 80908e6:	2000      	movs	r0, #0
 80908e8:	4770      	bx	lr

080908ea <__gethex>:
 80908ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80908ee:	b08b      	sub	sp, #44	; 0x2c
 80908f0:	468a      	mov	sl, r1
 80908f2:	4690      	mov	r8, r2
 80908f4:	9306      	str	r3, [sp, #24]
 80908f6:	9002      	str	r0, [sp, #8]
 80908f8:	f7fe f802 	bl	808e900 <_localeconv_r>
 80908fc:	6803      	ldr	r3, [r0, #0]
 80908fe:	f04f 0b00 	mov.w	fp, #0
 8090902:	4618      	mov	r0, r3
 8090904:	9303      	str	r3, [sp, #12]
 8090906:	f7fe fd99 	bl	808f43c <strlen>
 809090a:	9b03      	ldr	r3, [sp, #12]
 809090c:	9001      	str	r0, [sp, #4]
 809090e:	4403      	add	r3, r0
 8090910:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8090914:	9307      	str	r3, [sp, #28]
 8090916:	f8da 3000 	ldr.w	r3, [sl]
 809091a:	3302      	adds	r3, #2
 809091c:	461f      	mov	r7, r3
 809091e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8090922:	2830      	cmp	r0, #48	; 0x30
 8090924:	d102      	bne.n	809092c <__gethex+0x42>
 8090926:	f10b 0b01 	add.w	fp, fp, #1
 809092a:	e7f7      	b.n	809091c <__gethex+0x32>
 809092c:	f7ff ffc8 	bl	80908c0 <__hexdig_fun>
 8090930:	4604      	mov	r4, r0
 8090932:	b9e0      	cbnz	r0, 809096e <__gethex+0x84>
 8090934:	9a01      	ldr	r2, [sp, #4]
 8090936:	9903      	ldr	r1, [sp, #12]
 8090938:	4638      	mov	r0, r7
 809093a:	f7fe fd87 	bl	808f44c <strncmp>
 809093e:	2800      	cmp	r0, #0
 8090940:	d134      	bne.n	80909ac <__gethex+0xc2>
 8090942:	9b01      	ldr	r3, [sp, #4]
 8090944:	5cf8      	ldrb	r0, [r7, r3]
 8090946:	18fe      	adds	r6, r7, r3
 8090948:	f7ff ffba 	bl	80908c0 <__hexdig_fun>
 809094c:	b380      	cbz	r0, 80909b0 <__gethex+0xc6>
 809094e:	4633      	mov	r3, r6
 8090950:	7818      	ldrb	r0, [r3, #0]
 8090952:	461f      	mov	r7, r3
 8090954:	2830      	cmp	r0, #48	; 0x30
 8090956:	f103 0301 	add.w	r3, r3, #1
 809095a:	d0f9      	beq.n	8090950 <__gethex+0x66>
 809095c:	f7ff ffb0 	bl	80908c0 <__hexdig_fun>
 8090960:	fab0 f580 	clz	r5, r0
 8090964:	4634      	mov	r4, r6
 8090966:	096d      	lsrs	r5, r5, #5
 8090968:	f04f 0b01 	mov.w	fp, #1
 809096c:	e001      	b.n	8090972 <__gethex+0x88>
 809096e:	2500      	movs	r5, #0
 8090970:	462c      	mov	r4, r5
 8090972:	463a      	mov	r2, r7
 8090974:	4616      	mov	r6, r2
 8090976:	7830      	ldrb	r0, [r6, #0]
 8090978:	3201      	adds	r2, #1
 809097a:	f7ff ffa1 	bl	80908c0 <__hexdig_fun>
 809097e:	2800      	cmp	r0, #0
 8090980:	d1f8      	bne.n	8090974 <__gethex+0x8a>
 8090982:	9a01      	ldr	r2, [sp, #4]
 8090984:	9903      	ldr	r1, [sp, #12]
 8090986:	4630      	mov	r0, r6
 8090988:	f7fe fd60 	bl	808f44c <strncmp>
 809098c:	b950      	cbnz	r0, 80909a4 <__gethex+0xba>
 809098e:	b954      	cbnz	r4, 80909a6 <__gethex+0xbc>
 8090990:	9b01      	ldr	r3, [sp, #4]
 8090992:	18f4      	adds	r4, r6, r3
 8090994:	4622      	mov	r2, r4
 8090996:	4616      	mov	r6, r2
 8090998:	7830      	ldrb	r0, [r6, #0]
 809099a:	3201      	adds	r2, #1
 809099c:	f7ff ff90 	bl	80908c0 <__hexdig_fun>
 80909a0:	2800      	cmp	r0, #0
 80909a2:	d1f8      	bne.n	8090996 <__gethex+0xac>
 80909a4:	b134      	cbz	r4, 80909b4 <__gethex+0xca>
 80909a6:	1ba4      	subs	r4, r4, r6
 80909a8:	00a4      	lsls	r4, r4, #2
 80909aa:	e003      	b.n	80909b4 <__gethex+0xca>
 80909ac:	463e      	mov	r6, r7
 80909ae:	e000      	b.n	80909b2 <__gethex+0xc8>
 80909b0:	4604      	mov	r4, r0
 80909b2:	2501      	movs	r5, #1
 80909b4:	7833      	ldrb	r3, [r6, #0]
 80909b6:	2b50      	cmp	r3, #80	; 0x50
 80909b8:	d001      	beq.n	80909be <__gethex+0xd4>
 80909ba:	2b70      	cmp	r3, #112	; 0x70
 80909bc:	d12a      	bne.n	8090a14 <__gethex+0x12a>
 80909be:	7873      	ldrb	r3, [r6, #1]
 80909c0:	2b2b      	cmp	r3, #43	; 0x2b
 80909c2:	d008      	beq.n	80909d6 <__gethex+0xec>
 80909c4:	2b2d      	cmp	r3, #45	; 0x2d
 80909c6:	d003      	beq.n	80909d0 <__gethex+0xe6>
 80909c8:	1c71      	adds	r1, r6, #1
 80909ca:	f04f 0900 	mov.w	r9, #0
 80909ce:	e005      	b.n	80909dc <__gethex+0xf2>
 80909d0:	f04f 0901 	mov.w	r9, #1
 80909d4:	e001      	b.n	80909da <__gethex+0xf0>
 80909d6:	f04f 0900 	mov.w	r9, #0
 80909da:	1cb1      	adds	r1, r6, #2
 80909dc:	7808      	ldrb	r0, [r1, #0]
 80909de:	f7ff ff6f 	bl	80908c0 <__hexdig_fun>
 80909e2:	1e43      	subs	r3, r0, #1
 80909e4:	b2db      	uxtb	r3, r3
 80909e6:	2b18      	cmp	r3, #24
 80909e8:	d814      	bhi.n	8090a14 <__gethex+0x12a>
 80909ea:	f1a0 0210 	sub.w	r2, r0, #16
 80909ee:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80909f2:	f7ff ff65 	bl	80908c0 <__hexdig_fun>
 80909f6:	1e43      	subs	r3, r0, #1
 80909f8:	b2db      	uxtb	r3, r3
 80909fa:	2b18      	cmp	r3, #24
 80909fc:	d804      	bhi.n	8090a08 <__gethex+0x11e>
 80909fe:	230a      	movs	r3, #10
 8090a00:	fb03 0202 	mla	r2, r3, r2, r0
 8090a04:	3a10      	subs	r2, #16
 8090a06:	e7f2      	b.n	80909ee <__gethex+0x104>
 8090a08:	f1b9 0f00 	cmp.w	r9, #0
 8090a0c:	d000      	beq.n	8090a10 <__gethex+0x126>
 8090a0e:	4252      	negs	r2, r2
 8090a10:	4414      	add	r4, r2
 8090a12:	e000      	b.n	8090a16 <__gethex+0x12c>
 8090a14:	4631      	mov	r1, r6
 8090a16:	f8ca 1000 	str.w	r1, [sl]
 8090a1a:	b12d      	cbz	r5, 8090a28 <__gethex+0x13e>
 8090a1c:	f1bb 0f00 	cmp.w	fp, #0
 8090a20:	bf14      	ite	ne
 8090a22:	2000      	movne	r0, #0
 8090a24:	2006      	moveq	r0, #6
 8090a26:	e17c      	b.n	8090d22 <__gethex+0x438>
 8090a28:	4629      	mov	r1, r5
 8090a2a:	1bf3      	subs	r3, r6, r7
 8090a2c:	3b01      	subs	r3, #1
 8090a2e:	2b07      	cmp	r3, #7
 8090a30:	dd02      	ble.n	8090a38 <__gethex+0x14e>
 8090a32:	3101      	adds	r1, #1
 8090a34:	105b      	asrs	r3, r3, #1
 8090a36:	e7fa      	b.n	8090a2e <__gethex+0x144>
 8090a38:	9802      	ldr	r0, [sp, #8]
 8090a3a:	f000 fb0b 	bl	8091054 <_Balloc>
 8090a3e:	f04f 0900 	mov.w	r9, #0
 8090a42:	4605      	mov	r5, r0
 8090a44:	46cb      	mov	fp, r9
 8090a46:	9b01      	ldr	r3, [sp, #4]
 8090a48:	f100 0a14 	add.w	sl, r0, #20
 8090a4c:	f1c3 0301 	rsb	r3, r3, #1
 8090a50:	f8cd a010 	str.w	sl, [sp, #16]
 8090a54:	9308      	str	r3, [sp, #32]
 8090a56:	42b7      	cmp	r7, r6
 8090a58:	d22f      	bcs.n	8090aba <__gethex+0x1d0>
 8090a5a:	1e73      	subs	r3, r6, #1
 8090a5c:	9305      	str	r3, [sp, #20]
 8090a5e:	9a07      	ldr	r2, [sp, #28]
 8090a60:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8090a64:	4293      	cmp	r3, r2
 8090a66:	d00b      	beq.n	8090a80 <__gethex+0x196>
 8090a68:	f1bb 0f20 	cmp.w	fp, #32
 8090a6c:	d116      	bne.n	8090a9c <__gethex+0x1b2>
 8090a6e:	9b04      	ldr	r3, [sp, #16]
 8090a70:	f8c3 9000 	str.w	r9, [r3]
 8090a74:	3304      	adds	r3, #4
 8090a76:	f04f 0900 	mov.w	r9, #0
 8090a7a:	9304      	str	r3, [sp, #16]
 8090a7c:	46cb      	mov	fp, r9
 8090a7e:	e00d      	b.n	8090a9c <__gethex+0x1b2>
 8090a80:	9b05      	ldr	r3, [sp, #20]
 8090a82:	9a08      	ldr	r2, [sp, #32]
 8090a84:	4413      	add	r3, r2
 8090a86:	429f      	cmp	r7, r3
 8090a88:	d8ee      	bhi.n	8090a68 <__gethex+0x17e>
 8090a8a:	4618      	mov	r0, r3
 8090a8c:	9a01      	ldr	r2, [sp, #4]
 8090a8e:	9903      	ldr	r1, [sp, #12]
 8090a90:	9309      	str	r3, [sp, #36]	; 0x24
 8090a92:	f7fe fcdb 	bl	808f44c <strncmp>
 8090a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8090a98:	b168      	cbz	r0, 8090ab6 <__gethex+0x1cc>
 8090a9a:	e7e5      	b.n	8090a68 <__gethex+0x17e>
 8090a9c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8090aa0:	f7ff ff0e 	bl	80908c0 <__hexdig_fun>
 8090aa4:	f000 000f 	and.w	r0, r0, #15
 8090aa8:	fa00 f00b 	lsl.w	r0, r0, fp
 8090aac:	9b05      	ldr	r3, [sp, #20]
 8090aae:	ea49 0900 	orr.w	r9, r9, r0
 8090ab2:	f10b 0b04 	add.w	fp, fp, #4
 8090ab6:	461e      	mov	r6, r3
 8090ab8:	e7cd      	b.n	8090a56 <__gethex+0x16c>
 8090aba:	9804      	ldr	r0, [sp, #16]
 8090abc:	f840 9b04 	str.w	r9, [r0], #4
 8090ac0:	ebca 0000 	rsb	r0, sl, r0
 8090ac4:	1080      	asrs	r0, r0, #2
 8090ac6:	6128      	str	r0, [r5, #16]
 8090ac8:	0147      	lsls	r7, r0, #5
 8090aca:	4648      	mov	r0, r9
 8090acc:	f000 fb87 	bl	80911de <__hi0bits>
 8090ad0:	f8d8 6000 	ldr.w	r6, [r8]
 8090ad4:	1a38      	subs	r0, r7, r0
 8090ad6:	42b0      	cmp	r0, r6
 8090ad8:	dd26      	ble.n	8090b28 <__gethex+0x23e>
 8090ada:	1b87      	subs	r7, r0, r6
 8090adc:	4639      	mov	r1, r7
 8090ade:	4628      	mov	r0, r5
 8090ae0:	f000 fe7f 	bl	80917e2 <__any_on>
 8090ae4:	b1c8      	cbz	r0, 8090b1a <__gethex+0x230>
 8090ae6:	1e7b      	subs	r3, r7, #1
 8090ae8:	1159      	asrs	r1, r3, #5
 8090aea:	f003 021f 	and.w	r2, r3, #31
 8090aee:	f04f 0901 	mov.w	r9, #1
 8090af2:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8090af6:	fa09 f202 	lsl.w	r2, r9, r2
 8090afa:	420a      	tst	r2, r1
 8090afc:	d00e      	beq.n	8090b1c <__gethex+0x232>
 8090afe:	454b      	cmp	r3, r9
 8090b00:	dc02      	bgt.n	8090b08 <__gethex+0x21e>
 8090b02:	f04f 0902 	mov.w	r9, #2
 8090b06:	e009      	b.n	8090b1c <__gethex+0x232>
 8090b08:	1eb9      	subs	r1, r7, #2
 8090b0a:	4628      	mov	r0, r5
 8090b0c:	f000 fe69 	bl	80917e2 <__any_on>
 8090b10:	2800      	cmp	r0, #0
 8090b12:	d0f6      	beq.n	8090b02 <__gethex+0x218>
 8090b14:	f04f 0903 	mov.w	r9, #3
 8090b18:	e000      	b.n	8090b1c <__gethex+0x232>
 8090b1a:	4681      	mov	r9, r0
 8090b1c:	4639      	mov	r1, r7
 8090b1e:	4628      	mov	r0, r5
 8090b20:	f7ff fe98 	bl	8090854 <rshift>
 8090b24:	443c      	add	r4, r7
 8090b26:	e00c      	b.n	8090b42 <__gethex+0x258>
 8090b28:	da09      	bge.n	8090b3e <__gethex+0x254>
 8090b2a:	1a37      	subs	r7, r6, r0
 8090b2c:	4629      	mov	r1, r5
 8090b2e:	463a      	mov	r2, r7
 8090b30:	9802      	ldr	r0, [sp, #8]
 8090b32:	f000 fc89 	bl	8091448 <__lshift>
 8090b36:	4605      	mov	r5, r0
 8090b38:	1be4      	subs	r4, r4, r7
 8090b3a:	f100 0a14 	add.w	sl, r0, #20
 8090b3e:	f04f 0900 	mov.w	r9, #0
 8090b42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8090b46:	429c      	cmp	r4, r3
 8090b48:	dd08      	ble.n	8090b5c <__gethex+0x272>
 8090b4a:	9802      	ldr	r0, [sp, #8]
 8090b4c:	4629      	mov	r1, r5
 8090b4e:	f000 fab6 	bl	80910be <_Bfree>
 8090b52:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8090b54:	2300      	movs	r3, #0
 8090b56:	6013      	str	r3, [r2, #0]
 8090b58:	20a3      	movs	r0, #163	; 0xa3
 8090b5a:	e0e2      	b.n	8090d22 <__gethex+0x438>
 8090b5c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8090b60:	4284      	cmp	r4, r0
 8090b62:	da53      	bge.n	8090c0c <__gethex+0x322>
 8090b64:	1b04      	subs	r4, r0, r4
 8090b66:	42a6      	cmp	r6, r4
 8090b68:	dc2e      	bgt.n	8090bc8 <__gethex+0x2de>
 8090b6a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8090b6e:	2b02      	cmp	r3, #2
 8090b70:	d01a      	beq.n	8090ba8 <__gethex+0x2be>
 8090b72:	2b03      	cmp	r3, #3
 8090b74:	d01c      	beq.n	8090bb0 <__gethex+0x2c6>
 8090b76:	2b01      	cmp	r3, #1
 8090b78:	d11d      	bne.n	8090bb6 <__gethex+0x2cc>
 8090b7a:	42a6      	cmp	r6, r4
 8090b7c:	d11b      	bne.n	8090bb6 <__gethex+0x2cc>
 8090b7e:	2e01      	cmp	r6, #1
 8090b80:	dc0b      	bgt.n	8090b9a <__gethex+0x2b0>
 8090b82:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8090b86:	9a06      	ldr	r2, [sp, #24]
 8090b88:	2062      	movs	r0, #98	; 0x62
 8090b8a:	6013      	str	r3, [r2, #0]
 8090b8c:	2301      	movs	r3, #1
 8090b8e:	612b      	str	r3, [r5, #16]
 8090b90:	f8ca 3000 	str.w	r3, [sl]
 8090b94:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8090b96:	601d      	str	r5, [r3, #0]
 8090b98:	e0c3      	b.n	8090d22 <__gethex+0x438>
 8090b9a:	1e71      	subs	r1, r6, #1
 8090b9c:	4628      	mov	r0, r5
 8090b9e:	f000 fe20 	bl	80917e2 <__any_on>
 8090ba2:	2800      	cmp	r0, #0
 8090ba4:	d1ed      	bne.n	8090b82 <__gethex+0x298>
 8090ba6:	e006      	b.n	8090bb6 <__gethex+0x2cc>
 8090ba8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8090baa:	2b00      	cmp	r3, #0
 8090bac:	d0e9      	beq.n	8090b82 <__gethex+0x298>
 8090bae:	e002      	b.n	8090bb6 <__gethex+0x2cc>
 8090bb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8090bb2:	2b00      	cmp	r3, #0
 8090bb4:	d1e5      	bne.n	8090b82 <__gethex+0x298>
 8090bb6:	9802      	ldr	r0, [sp, #8]
 8090bb8:	4629      	mov	r1, r5
 8090bba:	f000 fa80 	bl	80910be <_Bfree>
 8090bbe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8090bc0:	2300      	movs	r3, #0
 8090bc2:	6013      	str	r3, [r2, #0]
 8090bc4:	2050      	movs	r0, #80	; 0x50
 8090bc6:	e0ac      	b.n	8090d22 <__gethex+0x438>
 8090bc8:	1e67      	subs	r7, r4, #1
 8090bca:	f1b9 0f00 	cmp.w	r9, #0
 8090bce:	d106      	bne.n	8090bde <__gethex+0x2f4>
 8090bd0:	b13f      	cbz	r7, 8090be2 <__gethex+0x2f8>
 8090bd2:	4639      	mov	r1, r7
 8090bd4:	4628      	mov	r0, r5
 8090bd6:	f000 fe04 	bl	80917e2 <__any_on>
 8090bda:	4681      	mov	r9, r0
 8090bdc:	e001      	b.n	8090be2 <__gethex+0x2f8>
 8090bde:	f04f 0901 	mov.w	r9, #1
 8090be2:	117a      	asrs	r2, r7, #5
 8090be4:	2301      	movs	r3, #1
 8090be6:	f007 071f 	and.w	r7, r7, #31
 8090bea:	fa03 f707 	lsl.w	r7, r3, r7
 8090bee:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 8090bf2:	4621      	mov	r1, r4
 8090bf4:	421f      	tst	r7, r3
 8090bf6:	4628      	mov	r0, r5
 8090bf8:	bf18      	it	ne
 8090bfa:	f049 0902 	orrne.w	r9, r9, #2
 8090bfe:	1b36      	subs	r6, r6, r4
 8090c00:	f7ff fe28 	bl	8090854 <rshift>
 8090c04:	2702      	movs	r7, #2
 8090c06:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8090c0a:	e000      	b.n	8090c0e <__gethex+0x324>
 8090c0c:	2701      	movs	r7, #1
 8090c0e:	f1b9 0f00 	cmp.w	r9, #0
 8090c12:	f000 8081 	beq.w	8090d18 <__gethex+0x42e>
 8090c16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8090c1a:	2b02      	cmp	r3, #2
 8090c1c:	d00e      	beq.n	8090c3c <__gethex+0x352>
 8090c1e:	2b03      	cmp	r3, #3
 8090c20:	d010      	beq.n	8090c44 <__gethex+0x35a>
 8090c22:	2b01      	cmp	r3, #1
 8090c24:	d176      	bne.n	8090d14 <__gethex+0x42a>
 8090c26:	f019 0f02 	tst.w	r9, #2
 8090c2a:	d073      	beq.n	8090d14 <__gethex+0x42a>
 8090c2c:	f8da 0000 	ldr.w	r0, [sl]
 8090c30:	ea49 0900 	orr.w	r9, r9, r0
 8090c34:	f019 0f01 	tst.w	r9, #1
 8090c38:	d107      	bne.n	8090c4a <__gethex+0x360>
 8090c3a:	e06b      	b.n	8090d14 <__gethex+0x42a>
 8090c3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8090c3e:	f1c3 0301 	rsb	r3, r3, #1
 8090c42:	9315      	str	r3, [sp, #84]	; 0x54
 8090c44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8090c46:	2b00      	cmp	r3, #0
 8090c48:	d064      	beq.n	8090d14 <__gethex+0x42a>
 8090c4a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8090c4e:	f105 0314 	add.w	r3, r5, #20
 8090c52:	ea4f 098a 	mov.w	r9, sl, lsl #2
 8090c56:	eb03 0109 	add.w	r1, r3, r9
 8090c5a:	2000      	movs	r0, #0
 8090c5c:	681a      	ldr	r2, [r3, #0]
 8090c5e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8090c62:	d002      	beq.n	8090c6a <__gethex+0x380>
 8090c64:	3201      	adds	r2, #1
 8090c66:	601a      	str	r2, [r3, #0]
 8090c68:	e020      	b.n	8090cac <__gethex+0x3c2>
 8090c6a:	f843 0b04 	str.w	r0, [r3], #4
 8090c6e:	4299      	cmp	r1, r3
 8090c70:	d8f4      	bhi.n	8090c5c <__gethex+0x372>
 8090c72:	68ab      	ldr	r3, [r5, #8]
 8090c74:	459a      	cmp	sl, r3
 8090c76:	db12      	blt.n	8090c9e <__gethex+0x3b4>
 8090c78:	6869      	ldr	r1, [r5, #4]
 8090c7a:	9802      	ldr	r0, [sp, #8]
 8090c7c:	3101      	adds	r1, #1
 8090c7e:	f000 f9e9 	bl	8091054 <_Balloc>
 8090c82:	4683      	mov	fp, r0
 8090c84:	692a      	ldr	r2, [r5, #16]
 8090c86:	f105 010c 	add.w	r1, r5, #12
 8090c8a:	3202      	adds	r2, #2
 8090c8c:	0092      	lsls	r2, r2, #2
 8090c8e:	300c      	adds	r0, #12
 8090c90:	f7fd fe49 	bl	808e926 <memcpy>
 8090c94:	4629      	mov	r1, r5
 8090c96:	9802      	ldr	r0, [sp, #8]
 8090c98:	f000 fa11 	bl	80910be <_Bfree>
 8090c9c:	465d      	mov	r5, fp
 8090c9e:	692b      	ldr	r3, [r5, #16]
 8090ca0:	1c5a      	adds	r2, r3, #1
 8090ca2:	612a      	str	r2, [r5, #16]
 8090ca4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8090ca8:	2201      	movs	r2, #1
 8090caa:	615a      	str	r2, [r3, #20]
 8090cac:	2f02      	cmp	r7, #2
 8090cae:	f105 0214 	add.w	r2, r5, #20
 8090cb2:	d111      	bne.n	8090cd8 <__gethex+0x3ee>
 8090cb4:	f8d8 3000 	ldr.w	r3, [r8]
 8090cb8:	3b01      	subs	r3, #1
 8090cba:	429e      	cmp	r6, r3
 8090cbc:	d127      	bne.n	8090d0e <__gethex+0x424>
 8090cbe:	1171      	asrs	r1, r6, #5
 8090cc0:	2301      	movs	r3, #1
 8090cc2:	f006 061f 	and.w	r6, r6, #31
 8090cc6:	fa03 f606 	lsl.w	r6, r3, r6
 8090cca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8090cce:	421e      	tst	r6, r3
 8090cd0:	bf0c      	ite	eq
 8090cd2:	2702      	moveq	r7, #2
 8090cd4:	2701      	movne	r7, #1
 8090cd6:	e01a      	b.n	8090d0e <__gethex+0x424>
 8090cd8:	692b      	ldr	r3, [r5, #16]
 8090cda:	459a      	cmp	sl, r3
 8090cdc:	da0a      	bge.n	8090cf4 <__gethex+0x40a>
 8090cde:	2101      	movs	r1, #1
 8090ce0:	4628      	mov	r0, r5
 8090ce2:	f7ff fdb7 	bl	8090854 <rshift>
 8090ce6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8090cea:	3401      	adds	r4, #1
 8090cec:	429c      	cmp	r4, r3
 8090cee:	f73f af2c 	bgt.w	8090b4a <__gethex+0x260>
 8090cf2:	e00b      	b.n	8090d0c <__gethex+0x422>
 8090cf4:	f016 061f 	ands.w	r6, r6, #31
 8090cf8:	d008      	beq.n	8090d0c <__gethex+0x422>
 8090cfa:	4491      	add	r9, r2
 8090cfc:	f859 0c04 	ldr.w	r0, [r9, #-4]
 8090d00:	f000 fa6d 	bl	80911de <__hi0bits>
 8090d04:	f1c6 0620 	rsb	r6, r6, #32
 8090d08:	42b0      	cmp	r0, r6
 8090d0a:	dbe8      	blt.n	8090cde <__gethex+0x3f4>
 8090d0c:	2701      	movs	r7, #1
 8090d0e:	f047 0720 	orr.w	r7, r7, #32
 8090d12:	e001      	b.n	8090d18 <__gethex+0x42e>
 8090d14:	f047 0710 	orr.w	r7, r7, #16
 8090d18:	4638      	mov	r0, r7
 8090d1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8090d1c:	601d      	str	r5, [r3, #0]
 8090d1e:	9b06      	ldr	r3, [sp, #24]
 8090d20:	601c      	str	r4, [r3, #0]
 8090d22:	b00b      	add	sp, #44	; 0x2c
 8090d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08090d28 <L_shift>:
 8090d28:	f1c2 0208 	rsb	r2, r2, #8
 8090d2c:	0092      	lsls	r2, r2, #2
 8090d2e:	b570      	push	{r4, r5, r6, lr}
 8090d30:	f1c2 0620 	rsb	r6, r2, #32
 8090d34:	6843      	ldr	r3, [r0, #4]
 8090d36:	6805      	ldr	r5, [r0, #0]
 8090d38:	fa03 f406 	lsl.w	r4, r3, r6
 8090d3c:	432c      	orrs	r4, r5
 8090d3e:	40d3      	lsrs	r3, r2
 8090d40:	6004      	str	r4, [r0, #0]
 8090d42:	f840 3f04 	str.w	r3, [r0, #4]!
 8090d46:	4288      	cmp	r0, r1
 8090d48:	d3f4      	bcc.n	8090d34 <L_shift+0xc>
 8090d4a:	bd70      	pop	{r4, r5, r6, pc}

08090d4c <__match>:
 8090d4c:	b530      	push	{r4, r5, lr}
 8090d4e:	6803      	ldr	r3, [r0, #0]
 8090d50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8090d54:	3301      	adds	r3, #1
 8090d56:	b14c      	cbz	r4, 8090d6c <__match+0x20>
 8090d58:	781a      	ldrb	r2, [r3, #0]
 8090d5a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8090d5e:	2d19      	cmp	r5, #25
 8090d60:	bf98      	it	ls
 8090d62:	3220      	addls	r2, #32
 8090d64:	42a2      	cmp	r2, r4
 8090d66:	d0f3      	beq.n	8090d50 <__match+0x4>
 8090d68:	2000      	movs	r0, #0
 8090d6a:	bd30      	pop	{r4, r5, pc}
 8090d6c:	6003      	str	r3, [r0, #0]
 8090d6e:	2001      	movs	r0, #1
 8090d70:	bd30      	pop	{r4, r5, pc}

08090d72 <__hexnan>:
 8090d72:	680b      	ldr	r3, [r1, #0]
 8090d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8090d78:	115e      	asrs	r6, r3, #5
 8090d7a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8090d7e:	f013 031f 	ands.w	r3, r3, #31
 8090d82:	bf18      	it	ne
 8090d84:	3604      	addne	r6, #4
 8090d86:	1f35      	subs	r5, r6, #4
 8090d88:	4617      	mov	r7, r2
 8090d8a:	2200      	movs	r2, #0
 8090d8c:	4682      	mov	sl, r0
 8090d8e:	46a8      	mov	r8, r5
 8090d90:	462c      	mov	r4, r5
 8090d92:	4691      	mov	r9, r2
 8090d94:	b085      	sub	sp, #20
 8090d96:	f8d0 b000 	ldr.w	fp, [r0]
 8090d9a:	9301      	str	r3, [sp, #4]
 8090d9c:	f846 2c04 	str.w	r2, [r6, #-4]
 8090da0:	9200      	str	r2, [sp, #0]
 8090da2:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 8090da6:	2900      	cmp	r1, #0
 8090da8:	d03c      	beq.n	8090e24 <__hexnan+0xb2>
 8090daa:	4608      	mov	r0, r1
 8090dac:	9203      	str	r2, [sp, #12]
 8090dae:	9102      	str	r1, [sp, #8]
 8090db0:	f7ff fd86 	bl	80908c0 <__hexdig_fun>
 8090db4:	9a03      	ldr	r2, [sp, #12]
 8090db6:	bb00      	cbnz	r0, 8090dfa <__hexnan+0x88>
 8090db8:	9902      	ldr	r1, [sp, #8]
 8090dba:	2920      	cmp	r1, #32
 8090dbc:	d816      	bhi.n	8090dec <__hexnan+0x7a>
 8090dbe:	9b00      	ldr	r3, [sp, #0]
 8090dc0:	4599      	cmp	r9, r3
 8090dc2:	ddee      	ble.n	8090da2 <__hexnan+0x30>
 8090dc4:	4544      	cmp	r4, r8
 8090dc6:	d205      	bcs.n	8090dd4 <__hexnan+0x62>
 8090dc8:	2a07      	cmp	r2, #7
 8090dca:	dc03      	bgt.n	8090dd4 <__hexnan+0x62>
 8090dcc:	4641      	mov	r1, r8
 8090dce:	4620      	mov	r0, r4
 8090dd0:	f7ff ffaa 	bl	8090d28 <L_shift>
 8090dd4:	42bc      	cmp	r4, r7
 8090dd6:	d923      	bls.n	8090e20 <__hexnan+0xae>
 8090dd8:	2300      	movs	r3, #0
 8090dda:	f1a4 0804 	sub.w	r8, r4, #4
 8090dde:	f844 3c04 	str.w	r3, [r4, #-4]
 8090de2:	f8cd 9000 	str.w	r9, [sp]
 8090de6:	4644      	mov	r4, r8
 8090de8:	461a      	mov	r2, r3
 8090dea:	e7da      	b.n	8090da2 <__hexnan+0x30>
 8090dec:	2929      	cmp	r1, #41	; 0x29
 8090dee:	d148      	bne.n	8090e82 <__hexnan+0x110>
 8090df0:	f10b 0301 	add.w	r3, fp, #1
 8090df4:	f8ca 3000 	str.w	r3, [sl]
 8090df8:	e014      	b.n	8090e24 <__hexnan+0xb2>
 8090dfa:	3201      	adds	r2, #1
 8090dfc:	2a08      	cmp	r2, #8
 8090dfe:	f109 0901 	add.w	r9, r9, #1
 8090e02:	dd06      	ble.n	8090e12 <__hexnan+0xa0>
 8090e04:	42bc      	cmp	r4, r7
 8090e06:	d9cc      	bls.n	8090da2 <__hexnan+0x30>
 8090e08:	2300      	movs	r3, #0
 8090e0a:	f844 3c04 	str.w	r3, [r4, #-4]
 8090e0e:	2201      	movs	r2, #1
 8090e10:	3c04      	subs	r4, #4
 8090e12:	6821      	ldr	r1, [r4, #0]
 8090e14:	f000 000f 	and.w	r0, r0, #15
 8090e18:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 8090e1c:	6020      	str	r0, [r4, #0]
 8090e1e:	e7c0      	b.n	8090da2 <__hexnan+0x30>
 8090e20:	2208      	movs	r2, #8
 8090e22:	e7be      	b.n	8090da2 <__hexnan+0x30>
 8090e24:	f1b9 0f00 	cmp.w	r9, #0
 8090e28:	d02b      	beq.n	8090e82 <__hexnan+0x110>
 8090e2a:	4544      	cmp	r4, r8
 8090e2c:	d205      	bcs.n	8090e3a <__hexnan+0xc8>
 8090e2e:	2a07      	cmp	r2, #7
 8090e30:	dc03      	bgt.n	8090e3a <__hexnan+0xc8>
 8090e32:	4641      	mov	r1, r8
 8090e34:	4620      	mov	r0, r4
 8090e36:	f7ff ff77 	bl	8090d28 <L_shift>
 8090e3a:	42bc      	cmp	r4, r7
 8090e3c:	d90c      	bls.n	8090e58 <__hexnan+0xe6>
 8090e3e:	463b      	mov	r3, r7
 8090e40:	f854 2b04 	ldr.w	r2, [r4], #4
 8090e44:	42a5      	cmp	r5, r4
 8090e46:	f843 2b04 	str.w	r2, [r3], #4
 8090e4a:	d2f9      	bcs.n	8090e40 <__hexnan+0xce>
 8090e4c:	2200      	movs	r2, #0
 8090e4e:	f843 2b04 	str.w	r2, [r3], #4
 8090e52:	429d      	cmp	r5, r3
 8090e54:	d2fb      	bcs.n	8090e4e <__hexnan+0xdc>
 8090e56:	e00b      	b.n	8090e70 <__hexnan+0xfe>
 8090e58:	9b01      	ldr	r3, [sp, #4]
 8090e5a:	b14b      	cbz	r3, 8090e70 <__hexnan+0xfe>
 8090e5c:	f1c3 0220 	rsb	r2, r3, #32
 8090e60:	f04f 33ff 	mov.w	r3, #4294967295
 8090e64:	40d3      	lsrs	r3, r2
 8090e66:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8090e6a:	4013      	ands	r3, r2
 8090e6c:	f846 3c04 	str.w	r3, [r6, #-4]
 8090e70:	682b      	ldr	r3, [r5, #0]
 8090e72:	b943      	cbnz	r3, 8090e86 <__hexnan+0x114>
 8090e74:	42bd      	cmp	r5, r7
 8090e76:	d102      	bne.n	8090e7e <__hexnan+0x10c>
 8090e78:	2301      	movs	r3, #1
 8090e7a:	602b      	str	r3, [r5, #0]
 8090e7c:	e003      	b.n	8090e86 <__hexnan+0x114>
 8090e7e:	3d04      	subs	r5, #4
 8090e80:	e7f6      	b.n	8090e70 <__hexnan+0xfe>
 8090e82:	2004      	movs	r0, #4
 8090e84:	e000      	b.n	8090e88 <__hexnan+0x116>
 8090e86:	2005      	movs	r0, #5
 8090e88:	b005      	add	sp, #20
 8090e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08090e90 <_findenv_r>:
 8090e90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8090e94:	4607      	mov	r7, r0
 8090e96:	468b      	mov	fp, r1
 8090e98:	4690      	mov	r8, r2
 8090e9a:	f000 fcd2 	bl	8091842 <__env_lock>
 8090e9e:	4b19      	ldr	r3, [pc, #100]	; (8090f04 <_findenv_r+0x74>)
 8090ea0:	681d      	ldr	r5, [r3, #0]
 8090ea2:	469a      	mov	sl, r3
 8090ea4:	b13d      	cbz	r5, 8090eb6 <_findenv_r+0x26>
 8090ea6:	465c      	mov	r4, fp
 8090ea8:	4623      	mov	r3, r4
 8090eaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8090eae:	b142      	cbz	r2, 8090ec2 <_findenv_r+0x32>
 8090eb0:	2a3d      	cmp	r2, #61	; 0x3d
 8090eb2:	461c      	mov	r4, r3
 8090eb4:	d1f8      	bne.n	8090ea8 <_findenv_r+0x18>
 8090eb6:	4638      	mov	r0, r7
 8090eb8:	f000 fcc4 	bl	8091844 <__env_unlock>
 8090ebc:	2000      	movs	r0, #0
 8090ebe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8090ec2:	ebcb 0404 	rsb	r4, fp, r4
 8090ec6:	46a9      	mov	r9, r5
 8090ec8:	f859 0b04 	ldr.w	r0, [r9], #4
 8090ecc:	2800      	cmp	r0, #0
 8090ece:	d0f2      	beq.n	8090eb6 <_findenv_r+0x26>
 8090ed0:	4622      	mov	r2, r4
 8090ed2:	4659      	mov	r1, fp
 8090ed4:	f7fe faba 	bl	808f44c <strncmp>
 8090ed8:	b988      	cbnz	r0, 8090efe <_findenv_r+0x6e>
 8090eda:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8090ede:	191e      	adds	r6, r3, r4
 8090ee0:	5d1b      	ldrb	r3, [r3, r4]
 8090ee2:	2b3d      	cmp	r3, #61	; 0x3d
 8090ee4:	d10b      	bne.n	8090efe <_findenv_r+0x6e>
 8090ee6:	f8da 3000 	ldr.w	r3, [sl]
 8090eea:	4638      	mov	r0, r7
 8090eec:	1aed      	subs	r5, r5, r3
 8090eee:	10ad      	asrs	r5, r5, #2
 8090ef0:	f8c8 5000 	str.w	r5, [r8]
 8090ef4:	f000 fca6 	bl	8091844 <__env_unlock>
 8090ef8:	1c70      	adds	r0, r6, #1
 8090efa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8090efe:	464d      	mov	r5, r9
 8090f00:	e7e1      	b.n	8090ec6 <_findenv_r+0x36>
 8090f02:	bf00      	nop
 8090f04:	200005d4 	.word	0x200005d4

08090f08 <_getenv_r>:
 8090f08:	b507      	push	{r0, r1, r2, lr}
 8090f0a:	aa01      	add	r2, sp, #4
 8090f0c:	f7ff ffc0 	bl	8090e90 <_findenv_r>
 8090f10:	b003      	add	sp, #12
 8090f12:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08090f18 <__gettzinfo>:
 8090f18:	4800      	ldr	r0, [pc, #0]	; (8090f1c <__gettzinfo+0x4>)
 8090f1a:	4770      	bx	lr
 8090f1c:	20000594 	.word	0x20000594

08090f20 <gmtime_r>:
 8090f20:	6802      	ldr	r2, [r0, #0]
 8090f22:	4b46      	ldr	r3, [pc, #280]	; (809103c <gmtime_r+0x11c>)
 8090f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8090f26:	fb92 f4f3 	sdiv	r4, r2, r3
 8090f2a:	fb03 2214 	mls	r2, r3, r4, r2
 8090f2e:	2a00      	cmp	r2, #0
 8090f30:	bfbc      	itt	lt
 8090f32:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8090f36:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8090f3a:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8090f3e:	fb92 f3f0 	sdiv	r3, r2, r0
 8090f42:	fb00 2213 	mls	r2, r0, r3, r2
 8090f46:	f04f 003c 	mov.w	r0, #60	; 0x3c
 8090f4a:	608b      	str	r3, [r1, #8]
 8090f4c:	fb92 f3f0 	sdiv	r3, r2, r0
 8090f50:	fb00 2213 	mls	r2, r0, r3, r2
 8090f54:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 8090f58:	bfac      	ite	ge
 8090f5a:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 8090f5e:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 8090f62:	604b      	str	r3, [r1, #4]
 8090f64:	600a      	str	r2, [r1, #0]
 8090f66:	2307      	movs	r3, #7
 8090f68:	1ce2      	adds	r2, r4, #3
 8090f6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8090f6e:	4d34      	ldr	r5, [pc, #208]	; (8091040 <gmtime_r+0x120>)
 8090f70:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8090f74:	fb94 f5f5 	sdiv	r5, r4, r5
 8090f78:	1ad3      	subs	r3, r2, r3
 8090f7a:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8090f7e:	f240 57b4 	movw	r7, #1460	; 0x5b4
 8090f82:	618b      	str	r3, [r1, #24]
 8090f84:	4b2f      	ldr	r3, [pc, #188]	; (8091044 <gmtime_r+0x124>)
 8090f86:	4830      	ldr	r0, [pc, #192]	; (8091048 <gmtime_r+0x128>)
 8090f88:	fb03 4405 	mla	r4, r3, r5, r4
 8090f8c:	fbb4 f2f2 	udiv	r2, r4, r2
 8090f90:	fbb4 f3f7 	udiv	r3, r4, r7
 8090f94:	fbb4 f0f0 	udiv	r0, r4, r0
 8090f98:	4422      	add	r2, r4
 8090f9a:	1ad2      	subs	r2, r2, r3
 8090f9c:	f648 6694 	movw	r6, #36500	; 0x8e94
 8090fa0:	1a13      	subs	r3, r2, r0
 8090fa2:	f240 126d 	movw	r2, #365	; 0x16d
 8090fa6:	fbb3 f6f6 	udiv	r6, r3, r6
 8090faa:	fbb3 f0f2 	udiv	r0, r3, r2
 8090fae:	fbb3 f3f7 	udiv	r3, r3, r7
 8090fb2:	4434      	add	r4, r6
 8090fb4:	1ae3      	subs	r3, r4, r3
 8090fb6:	fb02 3310 	mls	r3, r2, r0, r3
 8090fba:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8090fbe:	2499      	movs	r4, #153	; 0x99
 8090fc0:	3202      	adds	r2, #2
 8090fc2:	fbb2 f2f4 	udiv	r2, r2, r4
 8090fc6:	4354      	muls	r4, r2
 8090fc8:	1ca6      	adds	r6, r4, #2
 8090fca:	2405      	movs	r4, #5
 8090fcc:	fbb6 f4f4 	udiv	r4, r6, r4
 8090fd0:	2a0a      	cmp	r2, #10
 8090fd2:	bf34      	ite	cc
 8090fd4:	2602      	movcc	r6, #2
 8090fd6:	f06f 0609 	mvncs.w	r6, #9
 8090fda:	4416      	add	r6, r2
 8090fdc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8090fe0:	fb02 0505 	mla	r5, r2, r5, r0
 8090fe4:	1c5f      	adds	r7, r3, #1
 8090fe6:	2e01      	cmp	r6, #1
 8090fe8:	bf98      	it	ls
 8090fea:	3501      	addls	r5, #1
 8090fec:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8090ff0:	eba7 0704 	sub.w	r7, r7, r4
 8090ff4:	d302      	bcc.n	8090ffc <gmtime_r+0xdc>
 8090ff6:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 8090ffa:	e014      	b.n	8091026 <gmtime_r+0x106>
 8090ffc:	0782      	lsls	r2, r0, #30
 8090ffe:	d105      	bne.n	809100c <gmtime_r+0xec>
 8091000:	2464      	movs	r4, #100	; 0x64
 8091002:	fbb0 f2f4 	udiv	r2, r0, r4
 8091006:	fb04 0212 	mls	r2, r4, r2, r0
 809100a:	b94a      	cbnz	r2, 8091020 <gmtime_r+0x100>
 809100c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8091010:	fbb0 f4f2 	udiv	r4, r0, r2
 8091014:	fb02 0014 	mls	r0, r2, r4, r0
 8091018:	fab0 f280 	clz	r2, r0
 809101c:	0952      	lsrs	r2, r2, #5
 809101e:	e000      	b.n	8091022 <gmtime_r+0x102>
 8091020:	2201      	movs	r2, #1
 8091022:	333b      	adds	r3, #59	; 0x3b
 8091024:	441a      	add	r2, r3
 8091026:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 809102a:	2300      	movs	r3, #0
 809102c:	61ca      	str	r2, [r1, #28]
 809102e:	614d      	str	r5, [r1, #20]
 8091030:	610e      	str	r6, [r1, #16]
 8091032:	60cf      	str	r7, [r1, #12]
 8091034:	620b      	str	r3, [r1, #32]
 8091036:	4608      	mov	r0, r1
 8091038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 809103a:	bf00      	nop
 809103c:	00015180 	.word	0x00015180
 8091040:	00023ab1 	.word	0x00023ab1
 8091044:	fffdc54f 	.word	0xfffdc54f
 8091048:	00023ab0 	.word	0x00023ab0

0809104c <labs>:
 809104c:	2800      	cmp	r0, #0
 809104e:	bfb8      	it	lt
 8091050:	4240      	neglt	r0, r0
 8091052:	4770      	bx	lr

08091054 <_Balloc>:
 8091054:	b570      	push	{r4, r5, r6, lr}
 8091056:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8091058:	4604      	mov	r4, r0
 809105a:	460e      	mov	r6, r1
 809105c:	b93d      	cbnz	r5, 809106e <_Balloc+0x1a>
 809105e:	2010      	movs	r0, #16
 8091060:	f7f9 fcc8 	bl	808a9f4 <malloc>
 8091064:	6260      	str	r0, [r4, #36]	; 0x24
 8091066:	6045      	str	r5, [r0, #4]
 8091068:	6085      	str	r5, [r0, #8]
 809106a:	6005      	str	r5, [r0, #0]
 809106c:	60c5      	str	r5, [r0, #12]
 809106e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8091070:	68eb      	ldr	r3, [r5, #12]
 8091072:	b143      	cbz	r3, 8091086 <_Balloc+0x32>
 8091074:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8091076:	68db      	ldr	r3, [r3, #12]
 8091078:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 809107c:	b178      	cbz	r0, 809109e <_Balloc+0x4a>
 809107e:	6802      	ldr	r2, [r0, #0]
 8091080:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8091084:	e017      	b.n	80910b6 <_Balloc+0x62>
 8091086:	2221      	movs	r2, #33	; 0x21
 8091088:	2104      	movs	r1, #4
 809108a:	4620      	mov	r0, r4
 809108c:	f000 fbcb 	bl	8091826 <_calloc_r>
 8091090:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8091092:	60e8      	str	r0, [r5, #12]
 8091094:	68db      	ldr	r3, [r3, #12]
 8091096:	2b00      	cmp	r3, #0
 8091098:	d1ec      	bne.n	8091074 <_Balloc+0x20>
 809109a:	2000      	movs	r0, #0
 809109c:	bd70      	pop	{r4, r5, r6, pc}
 809109e:	2101      	movs	r1, #1
 80910a0:	fa01 f506 	lsl.w	r5, r1, r6
 80910a4:	1d6a      	adds	r2, r5, #5
 80910a6:	0092      	lsls	r2, r2, #2
 80910a8:	4620      	mov	r0, r4
 80910aa:	f000 fbbc 	bl	8091826 <_calloc_r>
 80910ae:	2800      	cmp	r0, #0
 80910b0:	d0f3      	beq.n	809109a <_Balloc+0x46>
 80910b2:	6046      	str	r6, [r0, #4]
 80910b4:	6085      	str	r5, [r0, #8]
 80910b6:	2300      	movs	r3, #0
 80910b8:	6103      	str	r3, [r0, #16]
 80910ba:	60c3      	str	r3, [r0, #12]
 80910bc:	bd70      	pop	{r4, r5, r6, pc}

080910be <_Bfree>:
 80910be:	b570      	push	{r4, r5, r6, lr}
 80910c0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80910c2:	4606      	mov	r6, r0
 80910c4:	460d      	mov	r5, r1
 80910c6:	b93c      	cbnz	r4, 80910d8 <_Bfree+0x1a>
 80910c8:	2010      	movs	r0, #16
 80910ca:	f7f9 fc93 	bl	808a9f4 <malloc>
 80910ce:	6270      	str	r0, [r6, #36]	; 0x24
 80910d0:	6044      	str	r4, [r0, #4]
 80910d2:	6084      	str	r4, [r0, #8]
 80910d4:	6004      	str	r4, [r0, #0]
 80910d6:	60c4      	str	r4, [r0, #12]
 80910d8:	b13d      	cbz	r5, 80910ea <_Bfree+0x2c>
 80910da:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80910dc:	686a      	ldr	r2, [r5, #4]
 80910de:	68db      	ldr	r3, [r3, #12]
 80910e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80910e4:	6029      	str	r1, [r5, #0]
 80910e6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80910ea:	bd70      	pop	{r4, r5, r6, pc}

080910ec <__multadd>:
 80910ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80910f0:	4606      	mov	r6, r0
 80910f2:	460c      	mov	r4, r1
 80910f4:	690d      	ldr	r5, [r1, #16]
 80910f6:	461f      	mov	r7, r3
 80910f8:	f101 0e14 	add.w	lr, r1, #20
 80910fc:	2300      	movs	r3, #0
 80910fe:	f8de 0000 	ldr.w	r0, [lr]
 8091102:	3301      	adds	r3, #1
 8091104:	b281      	uxth	r1, r0
 8091106:	fb02 7101 	mla	r1, r2, r1, r7
 809110a:	0c00      	lsrs	r0, r0, #16
 809110c:	0c0f      	lsrs	r7, r1, #16
 809110e:	fb02 7000 	mla	r0, r2, r0, r7
 8091112:	b289      	uxth	r1, r1
 8091114:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8091118:	429d      	cmp	r5, r3
 809111a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 809111e:	f84e 1b04 	str.w	r1, [lr], #4
 8091122:	dcec      	bgt.n	80910fe <__multadd+0x12>
 8091124:	b1d7      	cbz	r7, 809115c <__multadd+0x70>
 8091126:	68a3      	ldr	r3, [r4, #8]
 8091128:	429d      	cmp	r5, r3
 809112a:	db12      	blt.n	8091152 <__multadd+0x66>
 809112c:	6861      	ldr	r1, [r4, #4]
 809112e:	4630      	mov	r0, r6
 8091130:	3101      	adds	r1, #1
 8091132:	f7ff ff8f 	bl	8091054 <_Balloc>
 8091136:	4680      	mov	r8, r0
 8091138:	6922      	ldr	r2, [r4, #16]
 809113a:	f104 010c 	add.w	r1, r4, #12
 809113e:	3202      	adds	r2, #2
 8091140:	0092      	lsls	r2, r2, #2
 8091142:	300c      	adds	r0, #12
 8091144:	f7fd fbef 	bl	808e926 <memcpy>
 8091148:	4621      	mov	r1, r4
 809114a:	4630      	mov	r0, r6
 809114c:	f7ff ffb7 	bl	80910be <_Bfree>
 8091150:	4644      	mov	r4, r8
 8091152:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8091156:	3501      	adds	r5, #1
 8091158:	615f      	str	r7, [r3, #20]
 809115a:	6125      	str	r5, [r4, #16]
 809115c:	4620      	mov	r0, r4
 809115e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08091162 <__s2b>:
 8091162:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8091166:	4606      	mov	r6, r0
 8091168:	4615      	mov	r5, r2
 809116a:	461f      	mov	r7, r3
 809116c:	2209      	movs	r2, #9
 809116e:	3308      	adds	r3, #8
 8091170:	460c      	mov	r4, r1
 8091172:	fb93 f3f2 	sdiv	r3, r3, r2
 8091176:	2100      	movs	r1, #0
 8091178:	2201      	movs	r2, #1
 809117a:	429a      	cmp	r2, r3
 809117c:	da02      	bge.n	8091184 <__s2b+0x22>
 809117e:	0052      	lsls	r2, r2, #1
 8091180:	3101      	adds	r1, #1
 8091182:	e7fa      	b.n	809117a <__s2b+0x18>
 8091184:	4630      	mov	r0, r6
 8091186:	f7ff ff65 	bl	8091054 <_Balloc>
 809118a:	9b08      	ldr	r3, [sp, #32]
 809118c:	2d09      	cmp	r5, #9
 809118e:	6143      	str	r3, [r0, #20]
 8091190:	f04f 0301 	mov.w	r3, #1
 8091194:	6103      	str	r3, [r0, #16]
 8091196:	dd11      	ble.n	80911bc <__s2b+0x5a>
 8091198:	f104 0809 	add.w	r8, r4, #9
 809119c:	46c1      	mov	r9, r8
 809119e:	442c      	add	r4, r5
 80911a0:	f819 3b01 	ldrb.w	r3, [r9], #1
 80911a4:	4601      	mov	r1, r0
 80911a6:	3b30      	subs	r3, #48	; 0x30
 80911a8:	220a      	movs	r2, #10
 80911aa:	4630      	mov	r0, r6
 80911ac:	f7ff ff9e 	bl	80910ec <__multadd>
 80911b0:	45a1      	cmp	r9, r4
 80911b2:	d1f5      	bne.n	80911a0 <__s2b+0x3e>
 80911b4:	eb08 0405 	add.w	r4, r8, r5
 80911b8:	3c08      	subs	r4, #8
 80911ba:	e001      	b.n	80911c0 <__s2b+0x5e>
 80911bc:	340a      	adds	r4, #10
 80911be:	2509      	movs	r5, #9
 80911c0:	1b2d      	subs	r5, r5, r4
 80911c2:	1963      	adds	r3, r4, r5
 80911c4:	429f      	cmp	r7, r3
 80911c6:	dd08      	ble.n	80911da <__s2b+0x78>
 80911c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80911cc:	4601      	mov	r1, r0
 80911ce:	3b30      	subs	r3, #48	; 0x30
 80911d0:	220a      	movs	r2, #10
 80911d2:	4630      	mov	r0, r6
 80911d4:	f7ff ff8a 	bl	80910ec <__multadd>
 80911d8:	e7f3      	b.n	80911c2 <__s2b+0x60>
 80911da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080911de <__hi0bits>:
 80911de:	0c03      	lsrs	r3, r0, #16
 80911e0:	041b      	lsls	r3, r3, #16
 80911e2:	b913      	cbnz	r3, 80911ea <__hi0bits+0xc>
 80911e4:	0400      	lsls	r0, r0, #16
 80911e6:	2310      	movs	r3, #16
 80911e8:	e000      	b.n	80911ec <__hi0bits+0xe>
 80911ea:	2300      	movs	r3, #0
 80911ec:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80911f0:	bf04      	itt	eq
 80911f2:	0200      	lsleq	r0, r0, #8
 80911f4:	3308      	addeq	r3, #8
 80911f6:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80911fa:	bf04      	itt	eq
 80911fc:	0100      	lsleq	r0, r0, #4
 80911fe:	3304      	addeq	r3, #4
 8091200:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8091204:	bf04      	itt	eq
 8091206:	0080      	lsleq	r0, r0, #2
 8091208:	3302      	addeq	r3, #2
 809120a:	2800      	cmp	r0, #0
 809120c:	db03      	blt.n	8091216 <__hi0bits+0x38>
 809120e:	0042      	lsls	r2, r0, #1
 8091210:	d503      	bpl.n	809121a <__hi0bits+0x3c>
 8091212:	1c58      	adds	r0, r3, #1
 8091214:	4770      	bx	lr
 8091216:	4618      	mov	r0, r3
 8091218:	4770      	bx	lr
 809121a:	2020      	movs	r0, #32
 809121c:	4770      	bx	lr

0809121e <__lo0bits>:
 809121e:	6803      	ldr	r3, [r0, #0]
 8091220:	f013 0207 	ands.w	r2, r3, #7
 8091224:	d00b      	beq.n	809123e <__lo0bits+0x20>
 8091226:	07d9      	lsls	r1, r3, #31
 8091228:	d422      	bmi.n	8091270 <__lo0bits+0x52>
 809122a:	079a      	lsls	r2, r3, #30
 809122c:	bf4b      	itete	mi
 809122e:	085b      	lsrmi	r3, r3, #1
 8091230:	089b      	lsrpl	r3, r3, #2
 8091232:	6003      	strmi	r3, [r0, #0]
 8091234:	6003      	strpl	r3, [r0, #0]
 8091236:	bf4c      	ite	mi
 8091238:	2001      	movmi	r0, #1
 809123a:	2002      	movpl	r0, #2
 809123c:	4770      	bx	lr
 809123e:	b299      	uxth	r1, r3
 8091240:	b909      	cbnz	r1, 8091246 <__lo0bits+0x28>
 8091242:	0c1b      	lsrs	r3, r3, #16
 8091244:	2210      	movs	r2, #16
 8091246:	f013 0fff 	tst.w	r3, #255	; 0xff
 809124a:	bf04      	itt	eq
 809124c:	0a1b      	lsreq	r3, r3, #8
 809124e:	3208      	addeq	r2, #8
 8091250:	0719      	lsls	r1, r3, #28
 8091252:	bf04      	itt	eq
 8091254:	091b      	lsreq	r3, r3, #4
 8091256:	3204      	addeq	r2, #4
 8091258:	0799      	lsls	r1, r3, #30
 809125a:	bf04      	itt	eq
 809125c:	089b      	lsreq	r3, r3, #2
 809125e:	3202      	addeq	r2, #2
 8091260:	07d9      	lsls	r1, r3, #31
 8091262:	d402      	bmi.n	809126a <__lo0bits+0x4c>
 8091264:	085b      	lsrs	r3, r3, #1
 8091266:	d005      	beq.n	8091274 <__lo0bits+0x56>
 8091268:	3201      	adds	r2, #1
 809126a:	6003      	str	r3, [r0, #0]
 809126c:	4610      	mov	r0, r2
 809126e:	4770      	bx	lr
 8091270:	2000      	movs	r0, #0
 8091272:	4770      	bx	lr
 8091274:	2020      	movs	r0, #32
 8091276:	4770      	bx	lr

08091278 <__i2b>:
 8091278:	b510      	push	{r4, lr}
 809127a:	460c      	mov	r4, r1
 809127c:	2101      	movs	r1, #1
 809127e:	f7ff fee9 	bl	8091054 <_Balloc>
 8091282:	2201      	movs	r2, #1
 8091284:	6144      	str	r4, [r0, #20]
 8091286:	6102      	str	r2, [r0, #16]
 8091288:	bd10      	pop	{r4, pc}

0809128a <__multiply>:
 809128a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 809128e:	4614      	mov	r4, r2
 8091290:	690a      	ldr	r2, [r1, #16]
 8091292:	6923      	ldr	r3, [r4, #16]
 8091294:	4688      	mov	r8, r1
 8091296:	429a      	cmp	r2, r3
 8091298:	bfbe      	ittt	lt
 809129a:	460b      	movlt	r3, r1
 809129c:	46a0      	movlt	r8, r4
 809129e:	461c      	movlt	r4, r3
 80912a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80912a4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80912a8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80912ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80912b0:	eb07 0609 	add.w	r6, r7, r9
 80912b4:	429e      	cmp	r6, r3
 80912b6:	bfc8      	it	gt
 80912b8:	3101      	addgt	r1, #1
 80912ba:	f7ff fecb 	bl	8091054 <_Balloc>
 80912be:	f100 0514 	add.w	r5, r0, #20
 80912c2:	462b      	mov	r3, r5
 80912c4:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 80912c8:	2200      	movs	r2, #0
 80912ca:	4563      	cmp	r3, ip
 80912cc:	d202      	bcs.n	80912d4 <__multiply+0x4a>
 80912ce:	f843 2b04 	str.w	r2, [r3], #4
 80912d2:	e7fa      	b.n	80912ca <__multiply+0x40>
 80912d4:	f104 0214 	add.w	r2, r4, #20
 80912d8:	f108 0114 	add.w	r1, r8, #20
 80912dc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80912e0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80912e4:	9300      	str	r3, [sp, #0]
 80912e6:	9b00      	ldr	r3, [sp, #0]
 80912e8:	9201      	str	r2, [sp, #4]
 80912ea:	4293      	cmp	r3, r2
 80912ec:	d957      	bls.n	809139e <__multiply+0x114>
 80912ee:	f8b2 b000 	ldrh.w	fp, [r2]
 80912f2:	f1bb 0f00 	cmp.w	fp, #0
 80912f6:	d023      	beq.n	8091340 <__multiply+0xb6>
 80912f8:	4689      	mov	r9, r1
 80912fa:	46ae      	mov	lr, r5
 80912fc:	f04f 0800 	mov.w	r8, #0
 8091300:	f859 4b04 	ldr.w	r4, [r9], #4
 8091304:	f8be a000 	ldrh.w	sl, [lr]
 8091308:	b2a3      	uxth	r3, r4
 809130a:	fb0b a303 	mla	r3, fp, r3, sl
 809130e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8091312:	f8de 4000 	ldr.w	r4, [lr]
 8091316:	4443      	add	r3, r8
 8091318:	ea4f 4814 	mov.w	r8, r4, lsr #16
 809131c:	fb0b 840a 	mla	r4, fp, sl, r8
 8091320:	46f2      	mov	sl, lr
 8091322:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8091326:	b29b      	uxth	r3, r3
 8091328:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 809132c:	454f      	cmp	r7, r9
 809132e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8091332:	f84a 3b04 	str.w	r3, [sl], #4
 8091336:	d901      	bls.n	809133c <__multiply+0xb2>
 8091338:	46d6      	mov	lr, sl
 809133a:	e7e1      	b.n	8091300 <__multiply+0x76>
 809133c:	f8ce 8004 	str.w	r8, [lr, #4]
 8091340:	9b01      	ldr	r3, [sp, #4]
 8091342:	3204      	adds	r2, #4
 8091344:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8091348:	f1ba 0f00 	cmp.w	sl, #0
 809134c:	d021      	beq.n	8091392 <__multiply+0x108>
 809134e:	462c      	mov	r4, r5
 8091350:	4689      	mov	r9, r1
 8091352:	682b      	ldr	r3, [r5, #0]
 8091354:	f04f 0800 	mov.w	r8, #0
 8091358:	f8b9 e000 	ldrh.w	lr, [r9]
 809135c:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 8091360:	b29b      	uxth	r3, r3
 8091362:	fb0a be0e 	mla	lr, sl, lr, fp
 8091366:	46a3      	mov	fp, r4
 8091368:	44f0      	add	r8, lr
 809136a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 809136e:	f84b 3b04 	str.w	r3, [fp], #4
 8091372:	f859 3b04 	ldr.w	r3, [r9], #4
 8091376:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 809137a:	0c1b      	lsrs	r3, r3, #16
 809137c:	fb0a e303 	mla	r3, sl, r3, lr
 8091380:	454f      	cmp	r7, r9
 8091382:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 8091386:	ea4f 4813 	mov.w	r8, r3, lsr #16
 809138a:	d901      	bls.n	8091390 <__multiply+0x106>
 809138c:	465c      	mov	r4, fp
 809138e:	e7e3      	b.n	8091358 <__multiply+0xce>
 8091390:	6063      	str	r3, [r4, #4]
 8091392:	3504      	adds	r5, #4
 8091394:	e7a7      	b.n	80912e6 <__multiply+0x5c>
 8091396:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 809139a:	b913      	cbnz	r3, 80913a2 <__multiply+0x118>
 809139c:	3e01      	subs	r6, #1
 809139e:	2e00      	cmp	r6, #0
 80913a0:	dcf9      	bgt.n	8091396 <__multiply+0x10c>
 80913a2:	6106      	str	r6, [r0, #16]
 80913a4:	b003      	add	sp, #12
 80913a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080913ac <__pow5mult>:
 80913ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80913b0:	4615      	mov	r5, r2
 80913b2:	f012 0203 	ands.w	r2, r2, #3
 80913b6:	4606      	mov	r6, r0
 80913b8:	460f      	mov	r7, r1
 80913ba:	d007      	beq.n	80913cc <__pow5mult+0x20>
 80913bc:	4c21      	ldr	r4, [pc, #132]	; (8091444 <__pow5mult+0x98>)
 80913be:	3a01      	subs	r2, #1
 80913c0:	2300      	movs	r3, #0
 80913c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80913c6:	f7ff fe91 	bl	80910ec <__multadd>
 80913ca:	4607      	mov	r7, r0
 80913cc:	10ad      	asrs	r5, r5, #2
 80913ce:	d036      	beq.n	809143e <__pow5mult+0x92>
 80913d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80913d2:	b93c      	cbnz	r4, 80913e4 <__pow5mult+0x38>
 80913d4:	2010      	movs	r0, #16
 80913d6:	f7f9 fb0d 	bl	808a9f4 <malloc>
 80913da:	6270      	str	r0, [r6, #36]	; 0x24
 80913dc:	6044      	str	r4, [r0, #4]
 80913de:	6084      	str	r4, [r0, #8]
 80913e0:	6004      	str	r4, [r0, #0]
 80913e2:	60c4      	str	r4, [r0, #12]
 80913e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80913e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80913ec:	b94c      	cbnz	r4, 8091402 <__pow5mult+0x56>
 80913ee:	f240 2171 	movw	r1, #625	; 0x271
 80913f2:	4630      	mov	r0, r6
 80913f4:	f7ff ff40 	bl	8091278 <__i2b>
 80913f8:	4604      	mov	r4, r0
 80913fa:	2300      	movs	r3, #0
 80913fc:	f8c8 0008 	str.w	r0, [r8, #8]
 8091400:	6003      	str	r3, [r0, #0]
 8091402:	f04f 0800 	mov.w	r8, #0
 8091406:	07eb      	lsls	r3, r5, #31
 8091408:	d50a      	bpl.n	8091420 <__pow5mult+0x74>
 809140a:	4639      	mov	r1, r7
 809140c:	4622      	mov	r2, r4
 809140e:	4630      	mov	r0, r6
 8091410:	f7ff ff3b 	bl	809128a <__multiply>
 8091414:	4681      	mov	r9, r0
 8091416:	4639      	mov	r1, r7
 8091418:	4630      	mov	r0, r6
 809141a:	f7ff fe50 	bl	80910be <_Bfree>
 809141e:	464f      	mov	r7, r9
 8091420:	106d      	asrs	r5, r5, #1
 8091422:	d00c      	beq.n	809143e <__pow5mult+0x92>
 8091424:	6820      	ldr	r0, [r4, #0]
 8091426:	b108      	cbz	r0, 809142c <__pow5mult+0x80>
 8091428:	4604      	mov	r4, r0
 809142a:	e7ec      	b.n	8091406 <__pow5mult+0x5a>
 809142c:	4622      	mov	r2, r4
 809142e:	4621      	mov	r1, r4
 8091430:	4630      	mov	r0, r6
 8091432:	f7ff ff2a 	bl	809128a <__multiply>
 8091436:	6020      	str	r0, [r4, #0]
 8091438:	f8c0 8000 	str.w	r8, [r0]
 809143c:	e7f4      	b.n	8091428 <__pow5mult+0x7c>
 809143e:	4638      	mov	r0, r7
 8091440:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8091444:	08094be0 	.word	0x08094be0

08091448 <__lshift>:
 8091448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 809144c:	460c      	mov	r4, r1
 809144e:	4607      	mov	r7, r0
 8091450:	4691      	mov	r9, r2
 8091452:	6926      	ldr	r6, [r4, #16]
 8091454:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8091458:	4456      	add	r6, sl
 809145a:	6849      	ldr	r1, [r1, #4]
 809145c:	68a3      	ldr	r3, [r4, #8]
 809145e:	1c75      	adds	r5, r6, #1
 8091460:	42ab      	cmp	r3, r5
 8091462:	da02      	bge.n	809146a <__lshift+0x22>
 8091464:	3101      	adds	r1, #1
 8091466:	005b      	lsls	r3, r3, #1
 8091468:	e7fa      	b.n	8091460 <__lshift+0x18>
 809146a:	4638      	mov	r0, r7
 809146c:	f7ff fdf2 	bl	8091054 <_Balloc>
 8091470:	2300      	movs	r3, #0
 8091472:	4680      	mov	r8, r0
 8091474:	461a      	mov	r2, r3
 8091476:	f100 0114 	add.w	r1, r0, #20
 809147a:	4553      	cmp	r3, sl
 809147c:	da03      	bge.n	8091486 <__lshift+0x3e>
 809147e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8091482:	3301      	adds	r3, #1
 8091484:	e7f9      	b.n	809147a <__lshift+0x32>
 8091486:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 809148a:	6920      	ldr	r0, [r4, #16]
 809148c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8091490:	f019 091f 	ands.w	r9, r9, #31
 8091494:	f104 0114 	add.w	r1, r4, #20
 8091498:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 809149c:	d014      	beq.n	80914c8 <__lshift+0x80>
 809149e:	f1c9 0c20 	rsb	ip, r9, #32
 80914a2:	2200      	movs	r2, #0
 80914a4:	6808      	ldr	r0, [r1, #0]
 80914a6:	469a      	mov	sl, r3
 80914a8:	fa00 f009 	lsl.w	r0, r0, r9
 80914ac:	4302      	orrs	r2, r0
 80914ae:	f843 2b04 	str.w	r2, [r3], #4
 80914b2:	f851 2b04 	ldr.w	r2, [r1], #4
 80914b6:	458e      	cmp	lr, r1
 80914b8:	fa22 f20c 	lsr.w	r2, r2, ip
 80914bc:	d8f2      	bhi.n	80914a4 <__lshift+0x5c>
 80914be:	f8ca 2004 	str.w	r2, [sl, #4]
 80914c2:	b142      	cbz	r2, 80914d6 <__lshift+0x8e>
 80914c4:	1cb5      	adds	r5, r6, #2
 80914c6:	e006      	b.n	80914d6 <__lshift+0x8e>
 80914c8:	3b04      	subs	r3, #4
 80914ca:	f851 2b04 	ldr.w	r2, [r1], #4
 80914ce:	458e      	cmp	lr, r1
 80914d0:	f843 2f04 	str.w	r2, [r3, #4]!
 80914d4:	d8f9      	bhi.n	80914ca <__lshift+0x82>
 80914d6:	3d01      	subs	r5, #1
 80914d8:	4638      	mov	r0, r7
 80914da:	f8c8 5010 	str.w	r5, [r8, #16]
 80914de:	4621      	mov	r1, r4
 80914e0:	f7ff fded 	bl	80910be <_Bfree>
 80914e4:	4640      	mov	r0, r8
 80914e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080914ea <__mcmp>:
 80914ea:	6903      	ldr	r3, [r0, #16]
 80914ec:	690a      	ldr	r2, [r1, #16]
 80914ee:	b510      	push	{r4, lr}
 80914f0:	1a9b      	subs	r3, r3, r2
 80914f2:	d111      	bne.n	8091518 <__mcmp+0x2e>
 80914f4:	0092      	lsls	r2, r2, #2
 80914f6:	3014      	adds	r0, #20
 80914f8:	3114      	adds	r1, #20
 80914fa:	1883      	adds	r3, r0, r2
 80914fc:	440a      	add	r2, r1
 80914fe:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8091502:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8091506:	428c      	cmp	r4, r1
 8091508:	d002      	beq.n	8091510 <__mcmp+0x26>
 809150a:	d307      	bcc.n	809151c <__mcmp+0x32>
 809150c:	2001      	movs	r0, #1
 809150e:	bd10      	pop	{r4, pc}
 8091510:	4298      	cmp	r0, r3
 8091512:	d3f4      	bcc.n	80914fe <__mcmp+0x14>
 8091514:	2000      	movs	r0, #0
 8091516:	bd10      	pop	{r4, pc}
 8091518:	4618      	mov	r0, r3
 809151a:	bd10      	pop	{r4, pc}
 809151c:	f04f 30ff 	mov.w	r0, #4294967295
 8091520:	bd10      	pop	{r4, pc}

08091522 <__mdiff>:
 8091522:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8091526:	460c      	mov	r4, r1
 8091528:	4607      	mov	r7, r0
 809152a:	4611      	mov	r1, r2
 809152c:	4620      	mov	r0, r4
 809152e:	4615      	mov	r5, r2
 8091530:	f7ff ffdb 	bl	80914ea <__mcmp>
 8091534:	1e06      	subs	r6, r0, #0
 8091536:	d108      	bne.n	809154a <__mdiff+0x28>
 8091538:	4631      	mov	r1, r6
 809153a:	4638      	mov	r0, r7
 809153c:	f7ff fd8a 	bl	8091054 <_Balloc>
 8091540:	2301      	movs	r3, #1
 8091542:	6103      	str	r3, [r0, #16]
 8091544:	6146      	str	r6, [r0, #20]
 8091546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 809154a:	bfbc      	itt	lt
 809154c:	4623      	movlt	r3, r4
 809154e:	462c      	movlt	r4, r5
 8091550:	4638      	mov	r0, r7
 8091552:	6861      	ldr	r1, [r4, #4]
 8091554:	bfba      	itte	lt
 8091556:	461d      	movlt	r5, r3
 8091558:	2601      	movlt	r6, #1
 809155a:	2600      	movge	r6, #0
 809155c:	f7ff fd7a 	bl	8091054 <_Balloc>
 8091560:	692b      	ldr	r3, [r5, #16]
 8091562:	60c6      	str	r6, [r0, #12]
 8091564:	6926      	ldr	r6, [r4, #16]
 8091566:	f105 0914 	add.w	r9, r5, #20
 809156a:	f104 0114 	add.w	r1, r4, #20
 809156e:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 8091572:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8091576:	f100 0514 	add.w	r5, r0, #20
 809157a:	f04f 0c00 	mov.w	ip, #0
 809157e:	f851 2b04 	ldr.w	r2, [r1], #4
 8091582:	f859 4b04 	ldr.w	r4, [r9], #4
 8091586:	b293      	uxth	r3, r2
 8091588:	449c      	add	ip, r3
 809158a:	b2a3      	uxth	r3, r4
 809158c:	0c24      	lsrs	r4, r4, #16
 809158e:	ebc3 030c 	rsb	r3, r3, ip
 8091592:	ebc4 4212 	rsb	r2, r4, r2, lsr #16
 8091596:	eb02 4223 	add.w	r2, r2, r3, asr #16
 809159a:	b29b      	uxth	r3, r3
 809159c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80915a0:	45c8      	cmp	r8, r9
 80915a2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80915a6:	468e      	mov	lr, r1
 80915a8:	f845 2b04 	str.w	r2, [r5], #4
 80915ac:	d8e7      	bhi.n	809157e <__mdiff+0x5c>
 80915ae:	45be      	cmp	lr, r7
 80915b0:	d20e      	bcs.n	80915d0 <__mdiff+0xae>
 80915b2:	f85e 1b04 	ldr.w	r1, [lr], #4
 80915b6:	b28a      	uxth	r2, r1
 80915b8:	4462      	add	r2, ip
 80915ba:	1413      	asrs	r3, r2, #16
 80915bc:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 80915c0:	b292      	uxth	r2, r2
 80915c2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80915c6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80915ca:	f845 2b04 	str.w	r2, [r5], #4
 80915ce:	e7ee      	b.n	80915ae <__mdiff+0x8c>
 80915d0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80915d4:	b90b      	cbnz	r3, 80915da <__mdiff+0xb8>
 80915d6:	3e01      	subs	r6, #1
 80915d8:	e7fa      	b.n	80915d0 <__mdiff+0xae>
 80915da:	6106      	str	r6, [r0, #16]
 80915dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080915e0 <__ulp>:
 80915e0:	4b10      	ldr	r3, [pc, #64]	; (8091624 <__ulp+0x44>)
 80915e2:	400b      	ands	r3, r1
 80915e4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80915e8:	2b00      	cmp	r3, #0
 80915ea:	dd02      	ble.n	80915f2 <__ulp+0x12>
 80915ec:	2000      	movs	r0, #0
 80915ee:	4619      	mov	r1, r3
 80915f0:	4770      	bx	lr
 80915f2:	425b      	negs	r3, r3
 80915f4:	151b      	asrs	r3, r3, #20
 80915f6:	2b13      	cmp	r3, #19
 80915f8:	f04f 0000 	mov.w	r0, #0
 80915fc:	f04f 0100 	mov.w	r1, #0
 8091600:	dc04      	bgt.n	809160c <__ulp+0x2c>
 8091602:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8091606:	fa42 f103 	asr.w	r1, r2, r3
 809160a:	4770      	bx	lr
 809160c:	3b14      	subs	r3, #20
 809160e:	2b1e      	cmp	r3, #30
 8091610:	f04f 0201 	mov.w	r2, #1
 8091614:	bfce      	itee	gt
 8091616:	4613      	movgt	r3, r2
 8091618:	f1c3 031f 	rsble	r3, r3, #31
 809161c:	fa02 f303 	lslle.w	r3, r2, r3
 8091620:	4618      	mov	r0, r3
 8091622:	4770      	bx	lr
 8091624:	7ff00000 	.word	0x7ff00000

08091628 <__b2d>:
 8091628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 809162a:	6905      	ldr	r5, [r0, #16]
 809162c:	f100 0614 	add.w	r6, r0, #20
 8091630:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 8091634:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8091638:	1f2f      	subs	r7, r5, #4
 809163a:	4620      	mov	r0, r4
 809163c:	f7ff fdcf 	bl	80911de <__hi0bits>
 8091640:	f1c0 0320 	rsb	r3, r0, #32
 8091644:	280a      	cmp	r0, #10
 8091646:	600b      	str	r3, [r1, #0]
 8091648:	dc14      	bgt.n	8091674 <__b2d+0x4c>
 809164a:	f1c0 0e0b 	rsb	lr, r0, #11
 809164e:	fa24 f10e 	lsr.w	r1, r4, lr
 8091652:	42be      	cmp	r6, r7
 8091654:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 8091658:	bf34      	ite	cc
 809165a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 809165e:	2100      	movcs	r1, #0
 8091660:	3015      	adds	r0, #21
 8091662:	fa04 f000 	lsl.w	r0, r4, r0
 8091666:	fa21 f10e 	lsr.w	r1, r1, lr
 809166a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 809166e:	ea40 0201 	orr.w	r2, r0, r1
 8091672:	e023      	b.n	80916bc <__b2d+0x94>
 8091674:	42be      	cmp	r6, r7
 8091676:	bf3a      	itte	cc
 8091678:	f1a5 0708 	subcc.w	r7, r5, #8
 809167c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8091680:	2100      	movcs	r1, #0
 8091682:	380b      	subs	r0, #11
 8091684:	d015      	beq.n	80916b2 <__b2d+0x8a>
 8091686:	4084      	lsls	r4, r0
 8091688:	f1c0 0520 	rsb	r5, r0, #32
 809168c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8091690:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8091694:	42b7      	cmp	r7, r6
 8091696:	fa21 fe05 	lsr.w	lr, r1, r5
 809169a:	ea44 030e 	orr.w	r3, r4, lr
 809169e:	bf8c      	ite	hi
 80916a0:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
 80916a4:	2400      	movls	r4, #0
 80916a6:	fa01 f000 	lsl.w	r0, r1, r0
 80916aa:	40ec      	lsrs	r4, r5
 80916ac:	ea40 0204 	orr.w	r2, r0, r4
 80916b0:	e004      	b.n	80916bc <__b2d+0x94>
 80916b2:	460a      	mov	r2, r1
 80916b4:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80916b8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80916bc:	4610      	mov	r0, r2
 80916be:	4619      	mov	r1, r3
 80916c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080916c2 <__d2b>:
 80916c2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80916c6:	461c      	mov	r4, r3
 80916c8:	2101      	movs	r1, #1
 80916ca:	4690      	mov	r8, r2
 80916cc:	9e08      	ldr	r6, [sp, #32]
 80916ce:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80916d0:	f7ff fcc0 	bl	8091054 <_Balloc>
 80916d4:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80916d8:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80916dc:	4607      	mov	r7, r0
 80916de:	b10c      	cbz	r4, 80916e4 <__d2b+0x22>
 80916e0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80916e4:	9201      	str	r2, [sp, #4]
 80916e6:	f1b8 0f00 	cmp.w	r8, #0
 80916ea:	d019      	beq.n	8091720 <__d2b+0x5e>
 80916ec:	a802      	add	r0, sp, #8
 80916ee:	f840 8d08 	str.w	r8, [r0, #-8]!
 80916f2:	f7ff fd94 	bl	809121e <__lo0bits>
 80916f6:	9b00      	ldr	r3, [sp, #0]
 80916f8:	b148      	cbz	r0, 809170e <__d2b+0x4c>
 80916fa:	9a01      	ldr	r2, [sp, #4]
 80916fc:	f1c0 0120 	rsb	r1, r0, #32
 8091700:	fa02 f101 	lsl.w	r1, r2, r1
 8091704:	430b      	orrs	r3, r1
 8091706:	40c2      	lsrs	r2, r0
 8091708:	617b      	str	r3, [r7, #20]
 809170a:	9201      	str	r2, [sp, #4]
 809170c:	e000      	b.n	8091710 <__d2b+0x4e>
 809170e:	617b      	str	r3, [r7, #20]
 8091710:	9b01      	ldr	r3, [sp, #4]
 8091712:	2b00      	cmp	r3, #0
 8091714:	bf14      	ite	ne
 8091716:	2102      	movne	r1, #2
 8091718:	2101      	moveq	r1, #1
 809171a:	61bb      	str	r3, [r7, #24]
 809171c:	6139      	str	r1, [r7, #16]
 809171e:	e007      	b.n	8091730 <__d2b+0x6e>
 8091720:	a801      	add	r0, sp, #4
 8091722:	f7ff fd7c 	bl	809121e <__lo0bits>
 8091726:	9b01      	ldr	r3, [sp, #4]
 8091728:	2101      	movs	r1, #1
 809172a:	617b      	str	r3, [r7, #20]
 809172c:	6139      	str	r1, [r7, #16]
 809172e:	3020      	adds	r0, #32
 8091730:	b134      	cbz	r4, 8091740 <__d2b+0x7e>
 8091732:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8091736:	4404      	add	r4, r0
 8091738:	6034      	str	r4, [r6, #0]
 809173a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 809173e:	e009      	b.n	8091754 <__d2b+0x92>
 8091740:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8091744:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8091748:	6030      	str	r0, [r6, #0]
 809174a:	6918      	ldr	r0, [r3, #16]
 809174c:	f7ff fd47 	bl	80911de <__hi0bits>
 8091750:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8091754:	6028      	str	r0, [r5, #0]
 8091756:	4638      	mov	r0, r7
 8091758:	b002      	add	sp, #8
 809175a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0809175e <__ratio>:
 809175e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8091762:	4688      	mov	r8, r1
 8091764:	4669      	mov	r1, sp
 8091766:	4681      	mov	r9, r0
 8091768:	f7ff ff5e 	bl	8091628 <__b2d>
 809176c:	460d      	mov	r5, r1
 809176e:	4604      	mov	r4, r0
 8091770:	a901      	add	r1, sp, #4
 8091772:	4640      	mov	r0, r8
 8091774:	f7ff ff58 	bl	8091628 <__b2d>
 8091778:	460f      	mov	r7, r1
 809177a:	4606      	mov	r6, r0
 809177c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8091780:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8091784:	4620      	mov	r0, r4
 8091786:	1a9a      	subs	r2, r3, r2
 8091788:	e89d 000a 	ldmia.w	sp, {r1, r3}
 809178c:	1ac9      	subs	r1, r1, r3
 809178e:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 8091792:	2b00      	cmp	r3, #0
 8091794:	bfcc      	ite	gt
 8091796:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 809179a:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
 809179e:	4632      	mov	r2, r6
 80917a0:	463b      	mov	r3, r7
 80917a2:	4629      	mov	r1, r5
 80917a4:	f7fc f82e 	bl	808d804 <__aeabi_ddiv>
 80917a8:	b003      	add	sp, #12
 80917aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080917ae <__copybits>:
 80917ae:	3901      	subs	r1, #1
 80917b0:	b510      	push	{r4, lr}
 80917b2:	1149      	asrs	r1, r1, #5
 80917b4:	6914      	ldr	r4, [r2, #16]
 80917b6:	3101      	adds	r1, #1
 80917b8:	f102 0314 	add.w	r3, r2, #20
 80917bc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80917c0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80917c4:	42a3      	cmp	r3, r4
 80917c6:	4602      	mov	r2, r0
 80917c8:	d204      	bcs.n	80917d4 <__copybits+0x26>
 80917ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80917ce:	f840 2b04 	str.w	r2, [r0], #4
 80917d2:	e7f7      	b.n	80917c4 <__copybits+0x16>
 80917d4:	2300      	movs	r3, #0
 80917d6:	428a      	cmp	r2, r1
 80917d8:	d202      	bcs.n	80917e0 <__copybits+0x32>
 80917da:	f842 3b04 	str.w	r3, [r2], #4
 80917de:	e7fa      	b.n	80917d6 <__copybits+0x28>
 80917e0:	bd10      	pop	{r4, pc}

080917e2 <__any_on>:
 80917e2:	f100 0214 	add.w	r2, r0, #20
 80917e6:	6900      	ldr	r0, [r0, #16]
 80917e8:	114b      	asrs	r3, r1, #5
 80917ea:	4298      	cmp	r0, r3
 80917ec:	b510      	push	{r4, lr}
 80917ee:	db0c      	blt.n	809180a <__any_on+0x28>
 80917f0:	dd0c      	ble.n	809180c <__any_on+0x2a>
 80917f2:	f011 011f 	ands.w	r1, r1, #31
 80917f6:	d009      	beq.n	809180c <__any_on+0x2a>
 80917f8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80917fc:	fa24 f001 	lsr.w	r0, r4, r1
 8091800:	fa00 f101 	lsl.w	r1, r0, r1
 8091804:	428c      	cmp	r4, r1
 8091806:	d10c      	bne.n	8091822 <__any_on+0x40>
 8091808:	e000      	b.n	809180c <__any_on+0x2a>
 809180a:	4603      	mov	r3, r0
 809180c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8091810:	4293      	cmp	r3, r2
 8091812:	d904      	bls.n	809181e <__any_on+0x3c>
 8091814:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8091818:	2900      	cmp	r1, #0
 809181a:	d0f9      	beq.n	8091810 <__any_on+0x2e>
 809181c:	e001      	b.n	8091822 <__any_on+0x40>
 809181e:	2000      	movs	r0, #0
 8091820:	bd10      	pop	{r4, pc}
 8091822:	2001      	movs	r0, #1
 8091824:	bd10      	pop	{r4, pc}

08091826 <_calloc_r>:
 8091826:	b538      	push	{r3, r4, r5, lr}
 8091828:	fb02 f401 	mul.w	r4, r2, r1
 809182c:	4621      	mov	r1, r4
 809182e:	f7f9 f939 	bl	808aaa4 <_malloc_r>
 8091832:	4605      	mov	r5, r0
 8091834:	b118      	cbz	r0, 809183e <_calloc_r+0x18>
 8091836:	4622      	mov	r2, r4
 8091838:	2100      	movs	r1, #0
 809183a:	f7fd f87f 	bl	808e93c <memset>
 809183e:	4628      	mov	r0, r5
 8091840:	bd38      	pop	{r3, r4, r5, pc}

08091842 <__env_lock>:
 8091842:	4770      	bx	lr

08091844 <__env_unlock>:
 8091844:	4770      	bx	lr

08091846 <link_code_end>:
	...

08091848 <dynalib_user>:
 8091848:	001d 0808 005d 0808 0089 0808 008d 0808     ....]...........
 8091858:	0000 0000 0100 0402 1008 0000               ............

08091864 <_ZTV4File>:
	...
 809186c:	0b7d 0808 0b8d 0808 0bd3 0808 0bc7 0808     }...............
 809187c:	0b5f 0808 0b9b 0808 0bc1 0808 0bbb 0808     _...............

0809188c <_ZTV6SdFile>:
	...
 8091894:	0b7b 0808 0b7f 0808 0d51 0808 0bcd 0808     {.......Q.......

080918a4 <_ZTV5SdFat>:
	...
 80918ac:	0cfd 0808 0cf5 0808 0ced 0808 0ce5 0808     ................
 80918bc:	62b5 0806 0006 0064 0001 0001 127a 62b5     .b....d.....z..b
 80918cc:	1106 0002 0000 831a 62b5 1106 0002 0001     .........b......
 80918dc:	831a 6f67 676f 656c 6720 6f65 6f6c 6163     ..google geoloca
 80918ec:	6974 6e6f 003a 614c 6974 7574 6564 253a     tion:.Latitude:%
 80918fc:	2c66 6c20 6e6f 6967 7574 6564 253a 2c66     f, longitude:%f,
 809190c:	6120 6363 253a 0066 2e25 6636 2500 2e33      acc:%f.%.6f.%3.
 809191c:	6632 4600 6c75 206c 6461 7264 7365 2073     2f.Full address 
 809192c:	6e61 2064 6176 756c 2065 7573 7362 7274     and value substr
 809193c:	6e69 3a67 0020 6461 7264 7365 2073 7573     ing: .address su
 809194c:	7362 7274 6e69 3a67 2520 0a73 000d 6156     bstring: %s...Va
 809195c:	756c 2065 7573 7362 7274 6e69 3a67 2520     lue substring: %
 809196c:	0a73 000d 7265 6f72 3a72 0020 6f65 3a66     s...error: .eof:
 809197c:	2020 0020 6977 6966 742e 7478 4300 6e6f        .wifi.txt.Con
 809198c:	6574 746e 2073 666f 7720 6669 2069 6966     tents of wifi fi
 809199c:	656c 6c20 6e69 2065 7962 6c20 6e69 3a65     le line by line:
 80919ac:	2c00 000a 6f46 6e75 2064 5353 4449 003a     .,..Found SSID:.
 80919bc:	6f46 6e75 2064 6170 7373 6f77 6472 003a     Found password:.
 80919cc:	2e25 5832 5400 6d65 6570 6172 7574 6572     %.2X.Temperature
 80919dc:	7220 6165 6964 676e 6620 6f72 206d 4948      reading from HI
 80919ec:	3848 3231 0030 6554 706d 7265 7461 7275     H8120.Temperatur
 80919fc:	2065 6572 6461 6e69 2067 7266 6d6f 5420     e reading from T
 8091a0c:	504d 3633 5400 6d65 6570 6172 7574 6572     MP36.Temperature
 8091a1c:	7220 6165 6964 676e 6620 6f72 206d 4d42      reading from BM
 8091a2c:	2045 6f66 2072 6c41 6870 7361 6e65 6573     E for Alphasense
 8091a3c:	4800 6d75 6469 7469 2079 6572 6461 6e69     .Humidity readin
 8091a4c:	2067 7266 6d6f 4820 4849 3138 3032 4800     g from HIH8120.H
 8091a5c:	6d75 6469 7469 2079 6572 6461 6e69 2067     umidity reading 
 8091a6c:	7266 6d6f 4220 454d 6700 7361 7220 7365     from BME.gas res
 8091a7c:	7369 6174 636e 3a65 2520 2e31 6630 202c     istance: %1.0f, 
 8091a8c:	7568 696d 6964 7974 203a 3125 322e 0a66     humidity: %1.2f.
 8091a9c:	000d 6147 2073 6373 726f 3a65 0020 7548     ..Gas score: .Hu
 8091aac:	696d 6964 7974 7320 6f63 6572 203a 5300     midity score: .S
 8091abc:	6174 7472 6f20 2066 6c61 6870 2061 2032     tart of alpha 2 
 8091acc:	6572 6461 4300 756f 646c 276e 2074 6f63     read.Couldn't co
 8091adc:	6d6d 6e75 6369 7461 2065 6977 6874 4c20     mmunicate with L
 8091aec:	504d 3139 3030 2030 0032 6168 666c 7620     MP91000 2.half v
 8091afc:	6572 3266 6120 7364 0031 7453 7461 7375     ref2 ads1.Status
 8091b0c:	3d20 203d 2030 7266 6d6f 4c20 504d 3139      == 0 from LMP91
 8091b1c:	3030 2030 2032 7473 7461 7375 7220 6765     000 2 status reg
 8091b2c:	2d00 3939 5700 6972 6974 676e 6420 7461     .-99.Writing dat
 8091b3c:	2061 6f74 6c20 676f 6620 6c69 2e65 4600     a to log file..F
 8091b4c:	6c69 2065 7453 7261 2074 6974 656d 7473     ile Start timest
 8091b5c:	6d61 3a70 0020 6e55 6261 656c 7420 206f     amp: .Unable to 
 8091b6c:	7277 7469 2065 6f74 6c20 676f 6620 6c69     write to log fil
 8091b7c:	0065 6e69 7469 4700 4147 4500 7272 726f     e.init.GGA.Error
 8091b8c:	7220 6165 6964 676e 4720 5350 4700 5350      reading GPS.GPS
 8091b9c:	7520 6374 7320 7274 6e69 3a67 0020 614c      utc string: .La
 8091bac:	6974 7574 6564 7320 7274 6e69 3a67 0020     titude string: .
 8091bbc:	6f6c 676e 7469 6475 2065 7473 6972 676e     longitude string
 8091bcc:	203a 4500 7272 726f 7220 6165 6964 676e     : .Error reading
 8091bdc:	4720 5350 5220 434d 2100 0026 5345 2050      GPS RMC.!&.ESP 
 8091bec:	6957 6966 6320 6e6f 656e 7463 6f69 206e     Wifi connection 
 8091bfc:	7473 7461 7375 6920 3a73 0020 6f43 6e6e     status is: .Conn
 8091c0c:	6365 6574 2164 4500 5053 7720 6669 2069     ected!.ESP wifi 
 8091c1c:	6f63 6e6e 6365 6574 0064 6f4e 4320 6e6f     connected.No Con
 8091c2c:	656e 7463 6f69 006e 5345 2050 6977 6966     nection.ESP wifi
 8091c3c:	6e20 746f 6320 6e6f 656e 7463 6465 4000      not connected.@
 8091c4c:	0021 6553 646e 6e69 2067 656e 2077 6977     !.Sending new wi
 8091c5c:	6966 6320 6572 6564 746e 6169 736c 7420     fi credentials t
 8091c6c:	206f 5345 0050 7553 6363 7365 2173 4600     o ESP.Success!.F
 8091c7c:	6961 656c 2064 6f74 7220 6165 2064 4d42     ailed to read BM
 8091c8c:	3645 3038 2400 6700 7465 6565 7270 6d6f     E680.$.geteeprom
 8091c9c:	6164 6174 4300 6568 6b63 6e69 2067 6f66     data.Checking fo
 8091cac:	2072 6473 6320 7261 0064 6f6c 5f67 4300     r sd card.log_.C
 8091cbc:	6572 7461 6465 6e20 7765 6620 6c69 2065     reated new file 
 8091ccc:	6f74 6c20 676f 7420 206f 5375 2044 6163     to log to uSD ca
 8091cdc:	6472 203a 4e00 206f 5375 2044 6163 6472     rd: .No uSD card
 8091cec:	6420 7465 6365 6574 2e64 5300 6174 7472      detected..Start
 8091cfc:	6e69 2067 4d4c 3950 3031 3030 4320 204f     ing LMP91000 CO 
 8091d0c:	6e69 7469 6169 696c 617a 6974 6e6f 4300     initialization.C
 8091d1c:	756f 646c 276e 2074 6f63 6d6d 6e75 6369     ouldn't communic
 8091d2c:	7461 2065 6977 6874 4c20 504d 3139 3030     ate with LMP9100
 8091d3c:	2030 6f66 2072 4f43 4900 696e 6974 6c61     0 for CO.Initial
 8091d4c:	7a69 6465 4c20 504d 3139 3030 2030 6f66     ized LMP91000 fo
 8091d5c:	2072 4f43 4300 756f 646c 6e20 746f 6320     r CO.Could not c
 8091d6c:	6d6f 756d 696e 6163 6574 7720 7469 2068     ommunicate with 
 8091d7c:	6441 6661 7572 7469 415f 5344 3131 3531     Adafruit_ADS1115
 8091d8c:	6620 726f 4320 004f 7453 7261 6974 676e      for CO.Starting
 8091d9c:	4c20 504d 3139 3030 2030 2032 6e69 7469      LMP91000 2 init
 8091dac:	6169 696c 617a 6974 6e6f 4300 756f 646c     ialization.Could
 8091dbc:	276e 2074 6f63 6d6d 6e75 6369 7461 2065     n't communicate 
 8091dcc:	6977 6874 4c20 504d 3139 3030 2030 6f66     with LMP91000 fo
 8091ddc:	2072 0032 6e49 7469 6169 696c 657a 2064     r 2.Initialized 
 8091dec:	4d4c 3950 3031 3030 6620 726f 3220 4300     LMP91000 for 2.C
 8091dfc:	756f 646c 6e20 746f 6620 6e69 2064 2061     ould not find a 
 8091e0c:	6176 696c 2064 4d42 3645 3038 7320 6e65     valid BME680 sen
 8091e1c:	6f73 2c72 6320 6568 6b63 7720 7269 6e69     sor, check wirin
 8091e2c:	2167 4900 696e 6974 6c61 7a69 6465 4220     g!.Initialized B
 8091e3c:	454d 5320 6e65 6f73 0072 6f43 6c75 2064     ME Sensor.Could 
 8091e4c:	6f6e 2074 6966 646e 6120 7620 6c61 6469     not find a valid
 8091e5c:	5420 3736 3331 7320 6e65 6f73 2c72 6320      T6713 sensor, c
 8091e6c:	6568 6b63 7720 7269 6e69 2167 4300 756f     heck wiring!.Cou
 8091e7c:	646c 6e20 746f 6620 6e69 2064 2061 6176     ld not find a va
 8091e8c:	696c 2064 3654 3137 0033 5345 2050 6572     lid T6713.ESP re
 8091e9c:	6573 2174 4600 2057 6556 7372 6f69 3a6e     set!.FW Version:
 8091eac:	0020 7542 6c69 3a64 0020 6553 7474 6e69      .Build: .Settin
 8091ebc:	2067 7075 6720 6f6f 6c67 2065 616d 7370     g up google maps
 8091ecc:	6720 6f65 6f6c 6163 6974 6e6f 002e 7953      geolocation..Sy
 8091edc:	7473 6d65 7620 7265 6973 6e6f 203a 7325     stem version: %s
 8091eec:	4500 746e 7265 7320 7274 6e69 2067 6128     .Enter string (a
 8091efc:	6464 6572 7373 762c 6c61 6575 0029 7573     ddress,value).su
 8091f0c:	6563 7373 6920 206e 7277 7469 6e69 0067     cess in writing.
 8091f1c:	6166 6c69 6465 7720 6972 6974 676e 7320     failed writing s
 8091f2c:	7274 6e69 0067 7543 7272 6e65 2074 7473     tring.Current st
 8091f3c:	726f 6465 7320 6973 3a64 0020 7543 7272     ored ssid: .Curr
 8091f4c:	6e65 2074 7473 726f 6465 7020 7361 7773     ent stored passw
 8091f5c:	726f 3a64 0020 6c50 6165 6573 6520 746e     ord: .Please ent
 8091f6c:	7265 7020 7361 7773 726f 2064 6e69 6f20     er password in o
 8091f7c:	6472 7265 7420 206f 616d 656b 6320 6168     rder to make cha
 8091f8c:	676e 7365 0a2e 000d 6f62 6c75 0064 6150     nges....bould.Pa
 8091f9c:	7373 6f77 6472 6320 726f 6572 7463 0021     ssword correct!.
 8091fac:	6e45 6574 2072 656e 2077 7373 6469 003a     Enter new ssid:.
 8091fbc:	6f59 7275 6e20 7765 7320 6973 2064 6977     Your new ssid wi
 8091fcc:	6c6c 6220 3a65 0020 7349 7420 6968 2073     ll be: .Is this 
 8091fdc:	6b6f 7961 283f 2079 726f 6e20 0029 6153     okay?(y or n).Sa
 8091fec:	6976 676e 6e20 7765 7320 6973 0064 6e45     ving new ssid.En
 8091ffc:	6574 2072 656e 2077 6170 7373 6f77 6472     ter new password
 809200c:	5900 756f 2072 656e 2077 6170 7373 6f77     .Your new passwo
 809201c:	6472 7720 6c69 206c 6562 203a 5300 7661     rd will be: .Sav
 809202c:	6e69 2067 656e 2077 6170 7373 6f77 6472     ing new password
 809203c:	6f00 616b 2c79 6e20 206f 7270 626f 656c     .okay, no proble
 809204c:	0a6d 000d 6c50 6165 6573 6520 746e 7265     m...Please enter
 809205c:	7020 7361 7773 726f 2064 6e69 6f20 6472      password in ord
 809206c:	7265 7420 206f 6e65 6261 656c 6420 7461     er to enable dat
 809207c:	2061 7570 6873 7420 206f 6553 736e 6269     a push to Sensib
 809208c:	656c 4920 746f 6900 736d 6e65 6973 6c62     le Iot.imsensibl
 809209c:	0065 6e45 6261 696c 676e 7320 6e65 6973     e.Enabling sensi
 80920ac:	6c62 2065 6f69 2074 6164 6174 7020 7375     ble iot data pus
 80920bc:	2e68 0a00 490d 636e 726f 6572 7463 7020     h....Incorrect p
 80920cc:	7361 7773 726f 2164 4300 7275 6572 746e     assword!.Current
 80920dc:	4420 7665 6369 2065 4449 003a 6c50 6165      Device ID:.Plea
 80920ec:	6573 6520 746e 7265 7020 7361 7773 726f     se enter passwor
 80920fc:	2064 6e69 6f20 6472 7265 7420 206f 6863     d in order to ch
 809210c:	6e61 6567 7420 6568 4920 0044 6e45 6574     ange the ID.Ente
 809211c:	2072 656e 2077 6544 6976 6563 4920 3a44     r new Device ID:
 809212c:	0a00 4e0d 7765 4420 7665 6369 2065 4449     ...New Device ID
 809213c:	003a 0d0a 6e49 6176 696c 2064 6176 756c     :...Invalid valu
 809214c:	2165 5000 656c 7361 2065 6e65 6574 2072     e!.Please enter 
 809215c:	6170 7373 6f77 6472 6920 206e 726f 6564     password in orde
 809216c:	2072 6f74 6120 7070 796c 6420 6665 7561     r to apply defau
 809217c:	746c 7320 7465 6974 676e 0073 6150 7373     lt settings.Pass
 809218c:	6f77 6472 6320 726f 6572 7463 202c 6572     word correct, re
 809219c:	6573 7474 6e69 2067 6c61 206c 6573 7474     setting all sett
 80921ac:	6e69 7367 7420 206f 6564 6166 6c75 2174     ings to default!
 80921bc:	2020 6c50 6165 6573 7220 7365 7465 7920       Please reset y
 80921cc:	756f 2072 4449 7420 206f 6874 2065 6e6f     our ID to the on
 80921dc:	2065 6873 776f 206e 6e6f 7920 756f 2072     e shown on your 
 80921ec:	6e65 6c63 736f 7275 2e65 4500 746e 7265     enclosure..Enter
 80921fc:	6e20 7765 4420 7665 6369 2065 6974 656d      new Device time
 809220c:	6120 646e 6420 7461 2065 3128 2030 6964      and date (10 di
 809221c:	6967 2074 7065 636f 2068 6974 656d 7473     git epoch timest
 809222c:	6d61 2970 003a 0d0a 654e 2077 6544 6976     amp):...New Devi
 809223c:	6563 5420 6d69 3a65 4500 746e 7265 6e20     ce Time:.Enter n
 809224c:	7765 4420 7665 6369 2065 6974 656d 7a20     ew Device time z
 809225c:	6e6f 2065 2d28 3231 302e 7420 206f 3431     one (-12.0 to 14
 809226c:	302e 0029 0d0a 654e 2077 6544 6976 6563     .0)...New Device
 809227c:	7420 6d69 2065 6f7a 656e 003a 7543 7272      time zone:.Curr
 809228c:	6e65 2074 7246 7165 6575 636e 3a79 0020     ent Frequency: .
 809229c:	7e28 2032 6573 6f63 646e 2029 656d 7361     (~2 second) meas
 80922ac:	7275 6d65 6e65 7374 4500 746e 7265 6e20     urements.Enter n
 80922bc:	7765 6120 6f6d 6e75 0a74 000d 0d0a 654e     ew amount.....Ne
 80922cc:	2077 7246 7165 6575 636e 3a79 0020 7543     w Frequency: .Cu
 80922dc:	7272 6e65 2074 4f43 2032 6c73 706f 3a65     rrent CO2 slope:
 80922ec:	2000 7070 006d 6e45 6574 2072 656e 2077     . ppm.Enter new 
 80922fc:	4f43 2032 6c73 706f 0a65 000d 0d0a 654e     CO2 slope.....Ne
 809230c:	2077 4f43 2032 6c73 706f 3a65 0020 7543     w CO2 slope: .Cu
 809231c:	7272 6e65 2074 4f43 2032 657a 6f72 003a     rrent CO2 zero:.
 809232c:	6e45 6574 2072 656e 2077 4f43 2032 655a     Enter new CO2 Ze
 809233c:	6f72 0d0a 0a00 4e0d 7765 4320 324f 7a20     ro.....New CO2 z
 809234c:	7265 3a6f 0020 7543 7272 6e65 2074 4f43     ero: .Current CO
 809235c:	7320 6f6c 6570 003a 6e45 6574 2072 656e      slope:.Enter ne
 809236c:	2077 4f43 7320 6f6c 6570 0d0a 0a00 4e0d     w CO slope.....N
 809237c:	7765 4320 204f 6c73 706f 3a65 0020 7543     ew CO slope: .Cu
 809238c:	7272 6e65 2074 4f43 7a20 7265 3a6f 2000     rrent CO zero:. 
 809239c:	7070 0062 6e45 6574 2072 656e 2077 4f43     ppb.Enter new CO
 80923ac:	5a20 7265 0a6f 000d 0d0a 654e 2077 4f43      Zero.....New CO
 80923bc:	7a20 7265 3a6f 0020 7543 7272 6e65 2074      zero: .Current 
 80923cc:	4d50 2031 6c73 706f 3a65 4500 746e 7265     PM1 slope:.Enter
 80923dc:	6e20 7765 5020 314d 7320 6f6c 6570 0d0a      new PM1 slope..
 80923ec:	0a00 4e0d 7765 5020 314d 7320 6f6c 6570     ...New PM1 slope
 80923fc:	203a 4300 7275 6572 746e 5020 314d 7a20     : .Current PM1 z
 809240c:	7265 3a6f 2000 6775 6d2f 0033 6e45 6574     ero:. ug/m3.Ente
 809241c:	2072 656e 2077 4d50 2031 655a 6f72 0d0a     r new PM1 Zero..
 809242c:	0a00 4e0d 7765 5020 314d 7a20 7265 3a6f     ...New PM1 zero:
 809243c:	0020 7543 7272 6e65 2074 4d50 2e32 2035      .Current PM2.5 
 809244c:	6c73 706f 3a65 4500 746e 7265 6e20 7765     slope:.Enter new
 809245c:	5020 324d 352e 7320 6f6c 6570 0d0a 0a00      PM2.5 slope....
 809246c:	4e0d 7765 5020 324d 352e 7320 6f6c 6570     .New PM2.5 slope
 809247c:	203a 4300 7275 6572 746e 5020 324d 352e     : .Current PM2.5
 809248c:	7a20 7265 3a6f 4500 746e 7265 6e20 7765      zero:.Enter new
 809249c:	5020 324d 352e 5a20 7265 0a6f 000d 0d0a      PM2.5 Zero.....
 80924ac:	654e 2077 4d50 2e32 2035 657a 6f72 203a     New PM2.5 zero: 
 80924bc:	4300 7275 6572 746e 5020 314d 2030 6c73     .Current PM10 sl
 80924cc:	706f 3a65 4500 746e 7265 6e20 7765 5020     ope:.Enter new P
 80924dc:	314d 2030 6c73 706f 0a65 000d 0d0a 654e     M10 slope.....Ne
 80924ec:	2077 4d50 3031 7320 6f6c 6570 203a 4300     w PM10 slope: .C
 80924fc:	7275 6572 746e 5020 314d 2030 657a 6f72     urrent PM10 zero
 809250c:	003a 7520 2f6d 336d 4500 746e 7265 6e20     :. um/m3.Enter n
 809251c:	7765 5020 314d 2030 655a 6f72 0d0a 0a00     ew PM10 Zero....
 809252c:	4e0d 7765 5020 314d 2030 657a 6f72 203a     .New PM10 zero: 
 809253c:	4300 7275 6572 746e 5420 6d65 6570 6172     .Current Tempera
 809254c:	7574 6572 7320 6f6c 6570 003a 4420 6765     ture slope:. Deg
 809255c:	6572 7365 4320 4500 746e 7265 6e20 7765     rees C.Enter new
 809256c:	5420 6d65 6570 6172 7574 6572 7320 6f6c      Temperature slo
 809257c:	6570 0d0a 0a00 4e0d 7765 5420 6d65 6570     pe.....New Tempe
 809258c:	6172 7574 6572 7320 6f6c 6570 203a 4300     rature slope: .C
 809259c:	7275 6572 746e 5420 6d65 6570 6172 7574     urrent Temperatu
 80925ac:	6572 7a20 7265 3a6f 4500 746e 7265 6e20     re zero:.Enter n
 80925bc:	7765 5420 6d65 6570 6172 7574 6572 5a20     ew Temperature Z
 80925cc:	7265 0a6f 000d 0d0a 654e 2077 6554 706d     ero.....New Temp
 80925dc:	7265 7461 7275 2065 657a 6f72 203a 4300     erature zero: .C
 80925ec:	7275 6572 746e 5020 6572 7373 7275 2065     urrent Pressure 
 80925fc:	6c73 706f 3a65 2000 6f74 7272 4500 746e     slope:. torr.Ent
 809260c:	7265 6e20 7765 5020 6572 7373 7275 2065     er new Pressure 
 809261c:	6c73 706f 0a65 000d 0d0a 654e 2077 7250     slope.....New Pr
 809262c:	7365 7573 6572 7320 6f6c 6570 203a 4300     essure slope: .C
 809263c:	7275 6572 746e 5020 6572 7373 7275 2065     urrent Pressure 
 809264c:	657a 6f72 003a 6e45 6574 2072 656e 2077     zero:.Enter new 
 809265c:	7250 7365 7573 6572 5a20 7265 0a6f 000d     Pressure Zero...
 809266c:	0d0a 654e 2077 7250 7365 7573 6572 7a20     ..New Pressure z
 809267c:	7265 3a6f 0020 7543 7272 6e65 2074 4852     ero: .Current RH
 809268c:	7320 6f6c 6570 003a 2520 4500 746e 7265      slope:. %.Enter
 809269c:	6e20 7765 5220 2048 6c73 706f 0a65 000d      new RH slope...
 80926ac:	0d0a 654e 2077 4852 7320 6f6c 6570 203a     ..New RH slope: 
 80926bc:	4300 7275 6572 746e 5220 2048 657a 6f72     .Current RH zero
 80926cc:	003a 6e45 6574 2072 656e 2077 4852 5a20     :.Enter new RH Z
 80926dc:	7265 0a6f 000d 0d0a 654e 2077 4852 7a20     ero.....New RH z
 80926ec:	7265 3a6f 0020 7543 7272 6e65 2074 334f     ero: .Current O3
 80926fc:	6120 616e 6f6c 2067 666f 7366 7465 003a      analog offset:.
 809270c:	6e45 6574 2072 656e 2077 7a6f 6e6f 2065     Enter new ozone 
 809271c:	666f 7366 7465 0d0a 0a00 4e0d 7765 6f20     offset.....New o
 809272c:	6f7a 656e 6f20 6666 6573 3a74 0020 7543     zone offset: .Cu
 809273c:	7272 6e65 2074 6f6c 6577 2072 696c 696d     rrent lower limi
 809274c:	3a74 5000 656c 7361 2065 6e65 6574 2072     t:.Please enter 
 809275c:	6170 7373 6f77 6472 6920 206e 726f 6564     password in orde
 809276c:	2072 6f74 6320 6168 676e 2065 6874 2065     r to change the 
 809277c:	6f6c 6577 2072 696c 696d 0074 6e45 6574     lower limit.Ente
 809278c:	2072 656e 2077 6f6c 6577 2072 696c 696d     r new lower limi
 809279c:	3a74 0d0a 0a00 4e0d 7765 6c20 776f 7265     t:.....New lower
 80927ac:	6c20 6d69 7469 003a 7543 7272 6e65 2074      limit:.Current 
 80927bc:	7075 6570 2072 696c 696d 3a74 5000 656c     upper limit:.Ple
 80927cc:	7361 2065 6e65 6574 2072 6170 7373 6f77     ase enter passwo
 80927dc:	6472 6920 206e 726f 6564 2072 6f74 6320     rd in order to c
 80927ec:	6168 676e 2065 6874 2065 7075 6570 2072     hange the upper 
 80927fc:	696c 696d 0074 6e45 6574 2072 656e 2077     limit.Enter new 
 809280c:	7075 6570 2072 696c 696d 3a74 0d0a 0a00     upper limit:....
 809281c:	4e0d 7765 7520 7070 7265 6c20 6d69 7469     .New upper limit
 809282c:	003a 6f43 6d6d 6e61 3a64 2020 6544 6373     :.Command:  Desc
 809283c:	6972 7470 6f69 006e 3a61 2020 6441 756a     ription.a:  Adju
 809284c:	7473 4320 324f 7320 6f6c 6570 6200 203a     st CO2 slope.b: 
 809285c:	4120 6a64 7375 2074 4f43 2032 657a 6f72      Adjust CO2 zero
 809286c:	6300 203a 4120 6a64 7375 2074 4f43 7320     .c:  Adjust CO s
 809287c:	6f6c 6570 6400 203a 4120 6a64 7375 2074     lope.d:  Adjust 
 809288c:	4f43 7a20 7265 006f 3a65 2020 6441 756a     CO zero.e:  Adju
 809289c:	7473 5020 314d 7320 6f6c 6570 6600 203a     st PM1 slope.f: 
 80928ac:	4120 6a64 7375 2074 4d50 2031 657a 6f72      Adjust PM1 zero
 80928bc:	6700 203a 4120 6a64 7375 2074 4d50 2e32     .g:  Adjust PM2.
 80928cc:	2035 6c73 706f 0065 3a68 2020 6441 756a     5 slope.h:  Adju
 80928dc:	7473 5020 324d 352e 7a20 7265 006f 3a69     st PM2.5 zero.i:
 80928ec:	2020 6441 756a 7473 5020 314d 2030 6c73       Adjust PM10 sl
 80928fc:	706f 0065 3a6a 2020 6441 756a 7473 5020     ope.j:  Adjust P
 809290c:	314d 2030 657a 6f72 6b00 203a 4120 6a64     M10 zero.k:  Adj
 809291c:	7375 2074 6554 706d 7265 7461 7275 2065     ust Temperature 
 809292c:	6c73 706f 0065 3a6c 2020 6441 756a 7473     slope.l:  Adjust
 809293c:	5420 6d65 6570 6172 7574 6572 7a20 7265      Temperature zer
 809294c:	006f 3a6d 2020 6441 756a 7473 5020 6572     o.m:  Adjust Pre
 809295c:	7373 7275 2065 6c73 706f 0065 3a6e 2020     ssure slope.n:  
 809296c:	6441 756a 7473 5020 6572 7373 7275 2065     Adjust Pressure 
 809297c:	657a 6f72 6f00 203a 4120 6a64 7375 2074     zero.o:  Adjust 
 809298c:	7548 696d 6964 7974 7320 6f6c 6570 7000     Humidity slope.p
 809299c:	203a 4120 6a64 7375 2074 7548 696d 6964     :  Adjust Humidi
 80929ac:	7974 7a20 7265 006f 3a71 2020 6e45 6261     ty zero.q:  Enab
 80929bc:	656c 7320 7265 6169 206c 6564 7562 6767     le serial debugg
 80929cc:	6e69 0067 3a72 2020 6944 6173 6c62 2065     ing.r:  Disable 
 80929dc:	6573 6972 6c61 6420 6265 6775 6967 676e     serial debugging
 80929ec:	7300 203a 4f20 7475 7570 2074 6568 6461     .s:  Output head
 80929fc:	7265 7320 7274 6e69 0067 3a74 2020 6e45     er string.t:  En
 8092a0c:	6574 2072 656e 2077 6974 656d 6120 646e     ter new time and
 8092a1c:	6420 7461 0065 3a75 2020 6e45 6574 2072      date.u:  Enter 
 8092a2c:	656e 2077 6974 656d 7a20 6e6f 0065 3a76     new time zone.v:
 8092a3c:	2020 6441 756a 7473 7420 6568 4420 7665       Adjust the Dev
 8092a4c:	6369 2065 4449 7700 203a 4720 7465 7720     ice ID.w:  Get w
 8092a5c:	6669 2069 7263 6465 6e65 6974 6c61 0073     ifi credentials.
 8092a6c:	3a79 2020 6e45 6261 656c 6320 6c65 756c     y:  Enable cellu
 8092a7c:	616c 0072 3a7a 2020 6944 6173 6c62 2065     lar.z:  Disable 
 8092a8c:	6563 6c6c 6c75 7261 3100 203a 4120 6a64     cellular.1:  Adj
 8092a9c:	7375 2074 6167 2073 6f6c 6577 2072 696c     ust gas lower li
 8092aac:	696d 0074 3a32 2020 6441 756a 7473 6720     mit.2:  Adjust g
 8092abc:	7361 7520 7070 7265 6c20 6d69 7469 3300     as upper limit.3
 8092acc:	203a 4720 7465 6220 6975 646c 7620 7265     :  Get build ver
 8092adc:	6973 6e6f 3400 203a 4520 616e 6c62 2065     sion.4:  Enable 
 8092aec:	7a4f 6e6f 0065 3a35 2020 6944 6173 6c62     Ozone.5:  Disabl
 8092afc:	2065 7a4f 6e6f 0065 3a36 2020 6e45 6261     e Ozone.6:  Enab
 8092b0c:	656c 5620 434f 7327 3700 203a 4420 7369     le VOC's.7:  Dis
 8092b1c:	6261 656c 5620 434f 7327 3800 203a 4f20     able VOC's.8:  O
 8092b2c:	7475 7570 2074 6874 2065 4d50 4349 7320     utput the PMIC s
 8092b3c:	7379 6574 206d 6f63 666e 6769 7275 7461     ystem configurat
 8092b4c:	6f69 006e 3a39 2020 6e49 7263 6165 6573     ion.9:  Increase
 8092b5c:	7420 6568 6320 6168 6772 2065 7563 7272      the charge curr
 8092b6c:	6e65 2074 7962 3620 2034 416d 3000 203a     ent by 64 mA.0: 
 8092b7c:	4920 636e 6572 7361 2065 6874 2065 7563      Increase the cu
 8092b8c:	7272 6e65 2074 6e69 7570 2074 696c 696d     rrent input limi
 8092b9c:	2074 7962 3120 3030 6d20 0041 3a41 2020     t by 100 mA.A:  
 8092bac:	754f 7470 7570 2074 4f43 6320 6e6f 7473     Ouptput CO const
 8092bbc:	6e61 6c74 2079 6e61 2064 6172 6970 6c64     antly and rapidl
 8092bcc:	0079 3a42 2020 754f 7074 7475 5020 204d     y.B:  Output PM 
 8092bdc:	6f63 736e 6174 746e 796c 6120 646e 7220     constantly and r
 8092bec:	7061 6469 796c 4300 203a 4320 6168 676e     apidly.C:  Chang
 8092bfc:	2065 6574 706d 7265 7461 7275 2065 6e75     e temperature un
 8092c0c:	7469 2073 6f74 4320 6c65 6963 7375 4400     its to Celcius.D
 8092c1c:	203a 4420 7369 6261 656c 5420 504d 3633     :  Disable TMP36
 8092c2c:	7420 6d65 6570 6172 7574 6572 7320 6e65      temperature sen
 8092c3c:	6f73 2072 6e61 2064 7375 2065 4d42 3645     sor and use BME6
 8092c4c:	3038 7420 6d65 6570 6172 7574 6572 4500     80 temperature.E
 8092c5c:	203a 4520 616e 6c62 2065 4d54 3350 2036     :  Enable TMP36 
 8092c6c:	6574 706d 7265 7461 7275 2065 6573 736e     temperature sens
 8092c7c:	726f 6120 646e 6420 7369 6261 656c 4220     or and disable B
 8092c8c:	454d 3836 2030 6574 706d 7265 7461 7275     ME680 temperatur
 8092c9c:	0065 3a46 2020 6843 6e61 6567 7420 6d65     e.F:  Change tem
 8092cac:	6570 6172 7574 6572 7520 696e 7374 7420     perature units t
 8092cbc:	206f 6146 6572 686e 6965 0074 3a47 2020     o Farenheit.G:  
 8092ccc:	6552 6461 6f20 6f7a 656e 6620 6f72 206d     Read ozone from 
 8092cdc:	6e61 6c61 676f 6920 706e 7475 2820 6f6e     analog input (no
 8092cec:	2074 6964 6967 6174 6c6c 2079 202d 6f62     t digitally - bo
 8092cfc:	7261 2064 6564 6570 646e 6e65 2974 4800     ard dependent).H
 8092d0c:	203a 5220 6165 2064 7a6f 6e6f 2065 6964     :  Read ozone di
 8092d1c:	6967 6174 6c6c 2079 6e28 746f 7420 7268     gitally (not thr
 8092d2c:	756f 6867 6120 616e 6f6c 2067 6e69 7570     ough analog inpu
 8092d3c:	2074 202d 6f62 7261 2064 6564 6570 646e     t - board depend
 8092d4c:	6e65 2974 4900 203a 4120 6a64 7375 2074     ent).I:  Adjust 
 8092d5c:	7266 7165 6575 636e 2079 6f66 2072 7075     frequency for up
 8092d6c:	6f6c 6461 6e69 2067 6874 6f72 6775 2068     loading through 
 8092d7c:	6563 6c6c 6c75 7261 4a00 203a 5220 7365     cellular.J:  Res
 8092d8c:	7465 4520 5053 202c 4f43 2c32 5020 616c     et ESP, CO2, Pla
 8092d9c:	746e 776f 7265 4b00 203a 4320 6e6f 6974     ntower.K:  Conti
 8092dac:	756e 756f 2073 6573 6972 6c61 6f20 7475     nuous serial out
 8092dbc:	7570 2074 666f 4720 5350 4c00 203a 5720     put of GPS.L:  W
 8092dcc:	6972 6574 6420 6665 7561 746c 7320 7465     rite default set
 8092ddc:	6974 676e 0073 3a4d 2020 6e45 6261 656c     tings.M:  Enable
 8092dec:	3220 2530 6220 7461 6574 7972 7420 7268      20% battery thr
 8092dfc:	7365 6f68 646c 6c20 6d69 7469 6e69 0067     eshold limiting.
 8092e0c:	3a4e 2020 6944 6173 6c62 2065 3032 2025     N:  Disable 20% 
 8092e1c:	6162 7474 7265 2079 6874 6572 6873 6c6f     battery threshol
 8092e2c:	2064 696c 696d 6974 676e 5720 5241 494e     d limiting WARNI
 8092e3c:	474e 2121 4f00 203a 4520 616e 6c62 2065     NG!!.O:  Enable 
 8092e4c:	6f6c 2077 6f70 6577 2072 6f66 2072 5047     low power for GP
 8092e5c:	2053 6f6d 7564 656c 5000 203a 5420 7275     S module.P:  Tur
 8092e6c:	206e 666f 2066 4142 4654 5445 5100 203a     n off BATFET.Q: 
 8092e7c:	4120 6c6c 776f 4220 5441 4546 2054 6f74      Allow BATFET to
 8092e8c:	7420 7275 206e 6e6f 5200 203a 4420 7369      turn on.R:  Dis
 8092e9c:	6261 656c 4120 4342 6c20 676f 6369 6620     able ABC logic f
 8092eac:	726f 4320 324f 7320 6e65 6f73 0072 3a53     or CO2 sensor.S:
 8092ebc:	2020 6e45 6261 656c 4120 4342 6c20 676f       Enable ABC log
 8092ecc:	6369 6620 726f 4320 324f 7320 6e65 6f73     ic for CO2 senso
 8092edc:	0072 3a54 2020 6e45 6261 656c 642f 7369     r.T:  Enable/dis
 8092eec:	6261 656c 4820 4849 3138 3032 5220 2048     able HIH8120 RH 
 8092efc:	6573 736e 726f 5500 203a 5320 6977 6374     sensor.U:  Switc
 8092f0c:	2068 6f73 6b63 7465 7720 6568 6572 4320     h socket where C
 8092f1c:	204f 7369 7220 6165 2064 7266 6d6f 5700     O is read from.W
 8092f2c:	203a 4520 616e 6c62 2f65 6944 6173 6c62     :  Enable/Disabl
 8092f3c:	2065 6f67 676f 656c 6c20 636f 7461 6f69     e google locatio
 8092f4c:	206e 6573 7672 6369 7365 5600 203a 4320     n services.V:  C
 8092f5c:	6c61 6269 6172 6574 4320 324f 7320 6e65     alibrate CO2 sen
 8092f6c:	6f73 2072 202d 756d 7473 7320 7075 6c70     sor - must suppl
 8092f7c:	2079 6d61 6962 6e65 2074 656c 6576 206c     y ambient level 
 8092f8c:	6728 206f 756f 7374 6469 2165 0029 3a5a     (go outside!).Z:
 8092f9c:	2020 754f 7074 7475 6320 6c65 756c 616c       Output cellula
 8092fac:	2072 6e69 6f66 6d72 7461 6f69 206e 4328     r information (C
 8092fbc:	4943 2c44 4920 454d 2c49 6520 6374 0029     CID, IMEI, etc).
 8092fcc:	3a21 2020 6f43 746e 6e69 6f75 7375 7320     !:  Continuous s
 8092fdc:	7265 6169 206c 756f 7074 7475 6f20 2066     erial output of 
 8092fec:	4f56 2743 0073 2040 2020 6e45 6261 656c     VOC's.@   Enable
 8092ffc:	442f 7369 6261 656c 5320 6e65 6973 6c62     /Disable Sensibl
 809300c:	2d65 6f69 2074 6164 6174 7020 7375 2e68     e-iot data push.
 809301c:	2020 6649 6520 616e 6c62 6465 202c 6974       If enabled, ti
 809302c:	656d 7a20 6e6f 2065 6977 6c6c 6220 2065     me zone will be 
 809303c:	6769 6f6e 6572 2064 202d 5455 2043 6977     ignored - UTC wi
 809304c:	6c6c 6220 2065 7375 6465 002e 2023 2020     ll be used..#   
 809305c:	6e45 6261 656c 442f 7369 6261 656c 6320     Enable/Disable c
 809306c:	7261 6f74 7070 7265 7020 776f 7265 6d20     artopper power m
 809307c:	646f 2e65 2020 6649 6520 616e 6c62 6465     ode.  If enabled
 809308c:	202c 6261 6573 736e 2065 666f 6520 7478     , absense of ext
 809309c:	7265 616e 206c 6f70 6577 2072 6977 6c6c     ernal power will
 80930ac:	7320 6f74 2070 6563 6c6c 6c75 7261 002e      stop cellular..
 80930bc:	3a3f 2020 754f 7074 7475 7420 6968 2073     ?:  Output this 
 80930cc:	656d 756e 7800 203a 4520 6978 7374 7420     menu.x:  Exits t
 80930dc:	6968 2073 656d 756e 2c00 4f56 3a43 0020     his menu.,VOC: .
 80930ec:	202c 4f43 203a 2c00 4320 324f 203a 2c00     , CO: ., CO2: .,
 80930fc:	5020 314d 203a 2c00 4d50 2e32 3a35 0020      PM1: .,PM2.5: .
 809310c:	202c 4d50 3031 203a 2c00 6554 706d 203a     , PM10: .,Temp: 
 809311c:	2c00 7250 7365 3a73 0020 482c 4d55 203a     .,Press: .,HUM: 
 809312c:	2c00 6e53 3a64 0020 4f2c 3a33 0020 7550     .,Snd: .,O3: .Pu
 809313c:	6c62 7369 6568 2064 6170 756d 2070 6164     blished pamup da
 809314c:	6174 0021 6573 736e 6269 656c 6150 556d     ta!.sensiblePamU
 809315c:	0070 7550 6c62 7369 6568 2064 6573 736e     p.Published sens
 809316c:	6269 656c 6420 7461 2161 4300 6c65 756c     ible data!.Cellu
 809317c:	616c 2072 7369 6420 7369 6261 656c 2e64     lar is disabled.
 809318c:	4300 756f 646c 276e 2074 6f63 6e6e 6365     .Couldn't connec
 809319c:	2074 6f74 7020 7261 6974 6c63 2e65 7000     t to particle..p
 80931ac:	6d61 7075 3b00 5000 4d41 002d 6e69 7473     amup.;.PAM-.inst
 80931bc:	7572 656d 746e 654b 0079 6164 6574 6974     rumentKey.dateti
 80931cc:	656d 2500 2d59 6d25 252d 5464 4825 253a     me.%Y-%m-%dT%H:%
 80931dc:	3a4d 5325 005a 4d50 5f31 0030 4d50 5f32     M:%SZ.PM1_0.PM2_
 80931ec:	0035 6554 706d 5000 6572 7373 4800 646d     5.Temp.Press.Hmd
 80931fc:	7974 4c00 7461 4c00 6e6f 0067 6425 252f     ty.Lat.Long.%d/%
 809320c:	2f6d 7925 252c 3a48 4d25 253a 0053 694c     m/%y,%H:%M:%S.Li
 809321c:	656e 7420 206f 7277 7469 2065 6f74 6320     ne to write to c
 809322c:	6f6c 6475 003a 6553 646e 6e69 2067 6164     loud:.Sending da
 809323c:	6174 7420 206f 7365 2070 6f74 7520 6c70     ta to esp to upl
 809324c:	616f 2064 6976 2061 6977 6966 2e2e 002e     oad via wifi....
 809325c:	6553 646e 6e69 2067 6164 6174 7420 206f     Sending data to 
 809326c:	7365 2070 6f74 7520 6c70 616f 2064 6976     esp to upload vi
 809327c:	2061 6977 6966 5700 6972 6974 676e 7220     a wifi.Writing r
 809328c:	776f 7420 206f 6966 656c 002e 4544 2c56     ow to file..DEV,
 809329c:	4f43 7028 6d70 2c29 4f43 2832 7070 296d     CO(ppm),CO2(ppm)
 80932ac:	562c 434f 2873 4149 2951 502c 314d 502c     ,VOCs(IAQ),PM1,P
 80932bc:	324d 355f 502c 314d 2c30 2854 2943 502c     M2_5,PM10,T(C),P
 80932cc:	6572 7373 6d28 6142 2972 522c 2848 2925     ress(mBar),RH(%)
 80932dc:	4f2c 2833 7070 2962 422c 7461 2874 2925     ,O3(ppb),Batt(%)
 80932ec:	532c 646e 6428 2962 4c2c 7461 7469 6475     ,Snd(db),Latitud
 80932fc:	2c65 6f4c 676e 7469 6475 2c65 2f4e 2c41     e,Longitude,N/A,
 809330c:	2f4e 2c41 6144 6574 542f 6d69 0065 265a     N/A,Date/Time.Z&
 809331c:	4700 7465 6974 676e 6f20 6f7a 656e 6420     .Getting ozone d
 809332c:	7461 2061 7266 6d6f 6520 7073 5500 616e     ata from esp.Una
 809333c:	6c62 2065 6f74 6720 7465 6f20 6f7a 656e     ble to get ozone
 809334c:	6420 7461 2061 7266 6d6f 4520 5053 202c      data from ESP, 
 809335c:	6f63 6e75 6574 2072 6e69 6564 3a78 2520     counter index: %
 809336c:	2e31 6631 0d0a 5200 4345 4549 4556 2044     1.1f...RECIEVED 
 809337c:	4144 4154 4620 4f52 204d 5345 3a50 0020     DATA FROM ESP: .
 809338c:	6552 6963 7665 6465 6420 7461 2061 7266     Recieved data fr
 809339c:	6d6f 4520 5053 6300 6d6f 616d 6920 646e     om ESP.comma ind
 80933ac:	7865 203a 5300 7274 6e69 5b67 6425 3a5d     ex: .String[%d]:
 80933bc:	7500 6973 676e 7320 7274 6e69 2067 7261     .using string ar
 80933cc:	6172 2079 6e69 6564 2078 2031 7564 2065     ray index 1 due 
 80933dc:	6f74 6c20 676f 6967 676e 7500 6973 676e     to logging.using
 80933ec:	7320 7274 6e69 2067 7261 6172 2079 6e69      string array in
 80933fc:	6564 2078 2c30 6e20 746f 6c20 676f 6967     dex 0, not loggi
 809340c:	676e 4f00 6f7a 656e 5220 7761 6120 616e     ng.Ozone Raw ana
 809341c:	6f6c 2067 6e69 003a 6c4f 2064 6e69 7570     log in:.Old inpu
 809342c:	2074 7563 7272 6e65 2074 696c 696d 3a74     t current limit:
 809343c:	2520 0a64 000d 654e 2077 6e69 7570 2074      %d...New input 
 809344c:	7563 7272 6e65 2074 696c 696d 3a74 2520     current limit: %
 809345c:	0a64 000d 6e49 7263 6165 6973 676e 4320     d...Increasing C
 809346c:	6168 6772 2065 7563 7272 6e65 2074 7266     harge current fr
 809347c:	6d6f 2520 2064 416d 7420 206f 6e00 7765     om %d mA to .new
 809348c:	6320 6168 6772 2065 7563 7272 6e65 2074      charge current 
 809349c:	666f 2520 2064 416d 0d0a 5300 6174 7472     of %d mA...Start
 80934ac:	6f20 2066 6c61 6870 2061 6572 6461 4300      of alpha read.C
 80934bc:	756f 646c 276e 2074 6f63 6d6d 6e75 6369     ouldn't communic
 80934cc:	7461 2065 6977 6874 4c20 504d 3139 3030     ate with LMP9100
 80934dc:	0030 6148 666c 6f76 746c 203a 3125 322e     0.Halfvolt: %1.2
 80934ec:	0a66 000d 6148 666c 6f76 746c 6820 6769     f...Halfvolt hig
 80934fc:	6568 2072 6874 6e61 3020 352e 5300 6174     her than 0.5.Sta
 809350c:	7574 2073 203d 2030 7266 6d6f 4c20 504d     tus = 0 from LMP
 809351c:	3139 3030 2030 7473 7461 7375 7220 6765     91000 status reg
 809352c:	4c00 504d 3031 3030 7320 6174 7574 2073     .LMP1000 status 
 809353c:	203d 0030 4f43 6d20 6165 7573 6572 656d     = 0.CO measureme
 809354c:	746e 3a73 2020 0d0a 4100 5f30 6167 3a73     nts:  ...A0_gas:
 809355c:	2520 0a64 000d 3141 615f 7875 203a 6425      %d...A1_aux: %d
 809356c:	0d0a 4100 5f32 6574 706d 203a 6425 0d0a     ...A2_temp: %d..
 809357c:	6800 6c61 5f66 7276 6665 203a 6425 0d0a     .half_vref: %d..
 809358c:	4300 3a4f 2520 2e31 6633 7020 6d70 0d0a     .CO: %1.3f ppm..
 809359c:	4d00 6e65 3e75 5300 7265 6169 206c 6564     .Menu>.Serial de
 80935ac:	7562 6767 6e69 2067 6e65 6261 656c 2e64     bugging enabled.
 80935bc:	5300 7265 6169 206c 6564 7562 6767 6e69     .Serial debuggin
 80935cc:	2067 6964 6173 6c62 6465 002e 6e45 6261     g disabled..Enab
 80935dc:	696c 676e 4320 6c65 756c 616c 2e72 4300     ling Cellular..C
 80935ec:	6c65 756c 616c 2072 6c61 6572 6461 2079     ellular already 
 80935fc:	6e65 6261 656c 2e64 4400 7369 6261 696c     enabled..Disabli
 809360c:	676e 4320 6c65 756c 616c 0072 6543 6c6c     ng Cellular.Cell
 809361c:	6c75 7261 6120 726c 6165 7964 6420 7369     ular already dis
 809362c:	6261 656c 2e64 5400 6d65 6570 6172 7574     abled..Temperatu
 809363c:	6572 7520 696e 7374 6120 726c 6165 7964     re units already
 809364c:	7320 7465 7420 206f 6146 6572 656e 7469      set to Fareneit
 809365c:	002e 6554 706d 7265 7461 7275 2065 6e75     ..Temperature un
 809366c:	7469 2073 6c61 6572 6461 2079 6573 2074     its already set 
 809367c:	6f74 4320 6c65 6963 7375 002e 6944 6173     to Celcius..Disa
 809368c:	6c62 6e69 2067 656e 2077 6574 706d 7265     bling new temper
 809369c:	7461 7275 2065 6573 736e 726f 5400 6d65     ature sensor.Tem
 80936ac:	6570 6172 7574 6572 7320 6e65 6f73 2072     perature sensor 
 80936bc:	6c61 6572 6461 2079 6964 6173 6c62 6465     already disabled
 80936cc:	5400 6d65 6570 6172 7574 6572 7320 6e65     .Temperature sen
 80936dc:	6f73 2072 6c61 6572 6461 2079 6e65 6261     sor already enab
 80936ec:	656c 0064 6554 706d 7265 7461 6575 7320     led.Temperatue s
 80936fc:	6e65 6f73 2072 6f6e 2077 6e65 6261 656c     ensor now enable
 809370c:	0064 6e41 6c61 676f 7220 6165 6964 676e     d.Analog reading
 809371c:	6f20 2066 7a6f 6e6f 2065 6c61 6572 6461      of ozone alread
 809372c:	2079 6e65 6261 656c 0064 6e41 6c61 676f     y enabled.Analog
 809373c:	7220 6165 6964 676e 6f20 2066 7a6f 6e6f      reading of ozon
 809374c:	2065 6f6e 2077 6e65 6261 656c 0064 6944     e now enabled.Di
 809375c:	6967 6174 206c 6572 6461 6e69 2067 666f     gital reading of
 809376c:	6f20 6f7a 656e 6120 726c 6165 7964 6520      ozone already e
 809377c:	616e 6c62 6465 4400 6769 7469 6c61 7220     nabled.Digital r
 809378c:	6165 6964 676e 6f20 2066 7a6f 6e6f 2065     eading of ozone 
 809379c:	6f6e 2077 6e65 6261 656c 0064 754f 7074     now enabled.Outp
 80937ac:	7475 6974 676e 4720 5350 6320 6e6f 6974     utting GPS conti
 80937bc:	756e 756f 6c73 0079 6142 7474 7265 2079     nuously.Battery 
 80937cc:	6874 6572 6873 6c6f 2064 6c61 6572 6461     threshold alread
 80937dc:	2079 6e65 6261 656c 0064 6e45 6261 696c     y enabled.Enabli
 80937ec:	676e 6220 7461 6574 7972 7420 7268 7365     ng battery thres
 80937fc:	6f68 646c 6c20 6d69 7469 6e69 0067 6142     hold limiting.Ba
 809380c:	7474 7265 2079 6874 6572 6873 6c6f 2064     ttery threshold 
 809381c:	6c61 6572 6461 2079 6964 6173 6c62 6465     already disabled
 809382c:	4400 7369 6261 696c 676e 6220 7461 6574     .Disabling batte
 809383c:	7972 7420 7268 7365 6f68 646c 6c20 6d69     ry threshold lim
 809384c:	7469 6e69 0067 6e45 6261 696c 676e 6c20     iting.Enabling l
 809385c:	776f 7020 776f 7265 6620 726f 6720 7370     ow power for gps
 809386c:	5400 7275 696e 676e 6f20 6666 6220 7461     .Turning off bat
 809387c:	6566 0074 6c41 6f6c 6977 676e 6220 7461     fet.Allowing bat
 809388c:	6566 2074 6f74 7420 7275 206e 6e6f 4400     fet to turn on.D
 809389c:	7369 6261 696c 676e 4120 4342 6c20 676f     isabling ABC log
 80938ac:	6369 6620 726f 4320 324f 7320 6e65 6f73     ic for CO2 senso
 80938bc:	0072 4241 2043 6f6c 6967 2063 6c61 6572     r.ABC logic alre
 80938cc:	6461 2079 6964 6173 6c62 6465 4500 616e     ady disabled.Ena
 80938dc:	6c62 6e69 2067 6261 2063 6f6c 6967 2063     bling abc logic 
 80938ec:	6f66 2072 4f43 2032 6573 736e 726f 4100     for CO2 sensor.A
 80938fc:	4342 6c20 676f 6369 6120 726c 6165 7964     BC logic already
 809390c:	6520 616e 6c62 6465 4500 616e 6c62 6e69      enabled.Enablin
 809391c:	2067 4948 3848 3231 2030 4852 7320 6e65     g HIH8120 RH sen
 809392c:	6f73 0072 6944 6173 6c62 6e69 2067 4948     sor.Disabling HI
 809393c:	3848 3231 2030 4852 7320 6e65 6f73 0072     H8120 RH sensor.
 809394c:	6f4e 2077 6572 6461 6e69 2067 4f43 6620     Now reading CO f
 809395c:	6f72 206d 3255 2d30 6c41 6870 3261 4e00     rom U20-Alpha2.N
 809396c:	776f 7220 6165 6964 676e 4320 204f 7266     ow reading CO fr
 809397c:	6d6f 5520 3931 412d 706c 6168 0031 6552     om U19-Alpha1.Re
 809398c:	6573 6974 676e 7420 6568 4320 324f 7320     seting the CO2 s
 809399c:	6e65 6f73 0072 5041 2050 6556 7372 6f69     ensor.APP Versio
 80939ac:	3a6e 0020 6e45 6261 696c 676e 4f20 6f7a     n: .Enabling Ozo
 80939bc:	656e 4f00 6f7a 656e 6120 726c 6165 7964     ne.Ozone already
 80939cc:	6520 616e 6c62 6465 4400 7369 6261 696c      enabled.Disabli
 80939dc:	676e 4f20 6f7a 656e 4f00 6f7a 656e 6120     ng Ozone.Ozone a
 80939ec:	726c 6165 7964 6420 7369 6261 656c 0064     lready disabled.
 80939fc:	6e45 6261 696c 676e 5620 434f 7327 5600     Enabling VOC's.V
 8093a0c:	434f 7327 6120 726c 6165 7964 6520 616e     OC's already ena
 8093a1c:	6c62 6465 4400 7369 6261 696c 676e 5620     bled.Disabling V
 8093a2c:	434f 7327 5600 434f 7327 6120 726c 6165     OC's.VOC's alrea
 8093a3c:	7964 6420 7369 6261 656c 0064 6146 6c75     dy disabled.Faul
 8093a4c:	3a74 0020 7953 7473 6d65 7320 6174 7574     t: .System statu
 8093a5c:	3a73 0020 754f 7074 7475 6974 676e 6e20     s: .Outputting n
 8093a6c:	726f 616d 6c6c 0079 754f 7074 7475 6974     ormally.Outputti
 8093a7c:	676e 6f20 6c6e 2079 4d50 4f00 7475 7570     ng only PM.Outpu
 8093a8c:	7474 6e69 2067 4f56 7343 6320 6e6f 6974     tting VOCs conti
 8093a9c:	756e 756f 6c73 2179 2020 7250 7365 2073     nuously!  Press 
 8093aac:	6e61 2079 7562 7474 6e6f 7420 206f 7865     any button to ex
 8093abc:	7469 2e2e 002e 5654 636f 3d73 3125 302e     it....TVocs=%1.0
 8093acc:	2c66 5420 6d65 3d70 3125 312e 2c66 7020     f, Temp=%1.1f, p
 8093adc:	6572 7373 253d 2e31 6631 202c 6872 253d     ress=%1.1f, rh=%
 8093aec:	2e31 6631 0d0a 4400 7369 6261 696c 676e     1.1f...Disabling
 8093afc:	7320 6e65 6973 6c62 2065 6f69 2074 6164      sensible iot da
 8093b0c:	6174 7020 7375 2e68 4400 7369 6261 696c     ta push..Disabli
 8093b1c:	676e 6320 7261 7420 706f 6570 2072 6f70     ng car topper po
 8093b2c:	6577 2e72 2020 4500 616e 6c62 6e69 2067     wer.  .Enabling 
 8093b3c:	6163 2072 6f74 7070 7265 7020 776f 7265     car topper power
 8093b4c:	202e 4920 2066 6f6e 6520 7478 7265 616e     .  If no externa
 8093b5c:	206c 6f70 6577 2c72 7320 7379 6574 206d     l power, system 
 8093b6c:	6977 6c6c 7420 7275 206e 666f 2e66 4400     will turn off..D
 8093b7c:	7369 6261 696c 676e 6720 6f6f 6c67 2065     isabling google 
 8093b8c:	6f6c 6163 6974 6e6f 7320 7265 6976 6563     location service
 8093b9c:	2e73 4500 616e 6c62 6e69 2067 6f67 676f     s..Enabling goog
 8093bac:	656c 6c20 636f 7461 6f69 206e 6573 7672     le location serv
 8093bbc:	6369 7365 002e 6547 7474 6e69 2067 6563     ices..Getting ce
 8093bcc:	6c6c 6c75 7261 6920 666e 726f 616d 6974     llular informati
 8093bdc:	6e6f 202c 6874 7369 6d20 7961 7420 6b61     on, this may tak
 8093bec:	2065 2061 6877 6c69 2e65 2e2e 4900 454d     e a while....IME
 8093bfc:	3d49 7325 4900 534d 3d49 7325 4900 4343     I=%s.IMSI=%s.ICC
 8093c0c:	4449 253d 0073 7845 7469 6e69 2067 6573     ID=%s.Exiting se
 8093c1c:	6972 6c61 6d20 6e65 2e75 2e2e 4200 6665     rial menu....Bef
 8093c2c:	726f 2065 6572 6461 6e69 2067 6d62 0065     ore reading bme.
 8093c3c:	6562 6f66 6572 7220 6165 6964 676e 6220     before reading b
 8093c4c:	656d 7000 6572 7373 7275 2065 6f63 7272     me.pressure corr
 8093c5c:	6365 6974 6e6f 6620 6361 6f74 2072 6f66     ection factor fo
 8093c6c:	2072 4f43 3a32 3125 322e 0a66 000d 7245     r CO2:%1.2f...Er
 8093c7c:	6f72 3a72 5020 6572 7373 7275 2065 756f     ror: Pressure ou
 8093c8c:	2074 666f 7220 6e61 6567 202c 6f6e 2074     t of range, not 
 8093c9c:	7375 6e69 2067 7270 7365 7573 6572 6320     using pressure c
 8093cac:	726f 6572 7463 6f69 206e 6f66 2072 4f43     orrection for CO
 8093cbc:	2e32 5000 6572 7373 7275 3d65 3125 322e     2..Pressure=%1.2
 8093ccc:	0a66 000d 6d70 2e32 2035 6f63 7272 6365     f...pm2.5 correc
 8093cdc:	6974 6e6f 6620 6361 6f74 3a72 2520 2e31     tion factor: %1.
 8093cec:	6632 202c 3125 322e 0a66 000d 6e69 6f63     2f, %1.2f...inco
 8093cfc:	6d6d 6e69 2067 7962 6574 003a 6f43 6e6e     mming byte:.Conn
 8093d0c:	6365 6974 676e 7420 206f 6563 6c6c 6c75     ecting to cellul
 8093d1c:	7261 6e20 7465 6f77 6b72 6100 7466 7265     ar network.after
 8093d2c:	6320 6c65 756c 616c 4f72 006e 6641 6574      cellularOn.Afte
 8093d3c:	2072 6563 6c6c 6c75 7261 6e4f 4100 7466     r cellularOn.Aft
 8093d4c:	7265 7020 7261 6974 6c63 2065 6f63 6e6e     er particle conn
 8093d5c:	6365 0074 6573 7474 6e69 2067 7274 6569     ect.setting trie
 8093d6c:	5f64 6563 6c6c 6c75 7261 635f 6e6f 656e     d_cellular_conne
 8093d7c:	7463 7420 206f 6166 736c 0065 6944 6373     ct to false.Disc
 8093d8c:	6e6f 656e 7463 6e69 2067 7266 6d6f 6320     onnecting from c
 8093d9c:	6c65 756c 616c 2072 656e 7774 726f 006b     ellular network.
 8093dac:	6f47 6e69 2067 6f74 7320 656c 7065 6220     Going to sleep b
 8093dbc:	6365 7561 6573 6220 7461 6574 7972 6920     ecause battery i
 8093dcc:	2073 6562 6f6c 2077 3032 2025 6863 7261     s below 20% char
 8093ddc:	6567 0000                                   ge..

08093de0 <_ZTV10PowerCheck>:
	...
 8093de8:	7069 0808 7081 0808 6572 6461 6e69 2067     ip...p..reading 
 8093df8:	4f43 2032 6573 736e 726f 7320 6174 7574     CO2 sensor statu
 8093e08:	0073 7546 636e 6320 646f 3a65 0020 7962     s.Func code: .by
 8093e18:	6574 6320 756f 746e 203a 4d00 4253 203a     te count: .MSB: 
 8093e28:	4c00 4253 203a 4300 6c61 6269 6172 6974     .LSB: .Calibrati
 8093e38:	676e 4320 324f 0000                         ng CO2..

08093e40 <_ZL6spiPtr>:
 8093e40:	1608 2000 1618 2000 1628 2000               ... ... (.. 

08093e4c <_ZTV5SdSpi>:
	...
 8093e54:	82a1 0808 82b1 0808 829d 0808 832d 0808     ............-...
 8093e64:	8351 0808 8341 0808 8395 0808               Q...A.......

08093e70 <_ZTV7HIH61XX>:
	...
 8093e78:	924d 0808 925d 0808 9395 0808               M...].......

08093e84 <_ZTV26CellularHelperCREGResponse>:
	...
 8093e8c:	a37d 0808                                   }...

08093e90 <_ZTV39CellularHelperEnvironmentResponseStaticILj4EE>:
	...
 8093e98:	9f01 0808                                   ....

08093e9c <_ZTV23GoogleMapsDeviceLocator>:
	...
 8093ea4:	9461 0808 9481 0808 7325 227b 2269 253a     a.......%s{"i":%
 8093eb4:	2c64 6c22 3a22 7525 222c 2263 253a 2c64     d,"l":%u,"c":%d,
 8093ec4:	6e22 3a22 6425 007d 227b 2263 7b3a 6f22     "n":%d}.{"c":{"o
 8093ed4:	3a22 2522 2273 002c 6122 3a22 005b 6564     ":"%s",."a":[.de
 8093ee4:	6976 6563 6f4c 6163 6f74 0072 5441 5426     viceLocator.AT&T
 8093ef4:	7000 6275 696c 6873 6f4c 6163 6974 6e6f     .publishLocation
 8093f04:	7300 6163 446e 7461 3d61 7325 6800 6f6f     .scanData=%s.hoo
 8093f14:	2d6b 6572 7073 6e6f 6573 252f 2f73 7325     k-response/%s/%s
 8093f24:	0000 0000                                   ....

08093f28 <_ZTV28CellularHelperStringResponse>:
	...
 8093f30:	a345 0808 5954 4550 555f 4b4e 4f4e 4e57     E...TYPE_UNKNOWN
 8093f40:	5400 5059 5f45 4b4f 5400 5059 5f45 5245     .TYPE_OK.TYPE_ER
 8093f50:	4f52 0052 5954 4550 435f 4e4f 454e 5443     ROR.TYPE_CONNECT
 8093f60:	5400 5059 5f45 4f4e 4143 5252 4549 0052     .TYPE_NOCARRIER.
 8093f70:	5954 4550 4e5f 444f 4149 544c 4e4f 0045     TYPE_NODIALTONE.
 8093f80:	5954 4550 425f 5355 0059 5954 4550 4e5f     TYPE_BUSY.TYPE_N
 8093f90:	414f 534e 4557 0052 5954 4550 505f 4f52     OANSWER.TYPE_PRO
 8093fa0:	504d 0054 5954 4550 505f 554c 0053 5954     MPT.TYPE_PLUS.TY
 8093fb0:	4550 415f 4f42 5452 4445 7400 7079 3d65     PE_ABORTED.type=
 8093fc0:	7830 7825 6300 6c65 756c 616c 2072 6572     0x%x.cellular re
 8093fd0:	7073 6e6f 6573 7420 7079 3d65 7325 6c20     sponse type=%s l
 8093fe0:	6e65 253d 0064 6e5c 5c00 0072 7830 3025     en=%d.\n.\r.0x%0
 8093ff0:	7832 2500 2c64 6425 6b00 7965 7420 6f6f     2x.%d,%d.key too
 8094000:	6c20 6e6f 2067 656b 3d79 7325 7620 6c61      long key=%s val
 8094010:	6575 253d 0073 4152 0054 4d55 5354 4d00     ue=%s.RAT.UMTS.M
 8094020:	4343 4d00 434e 4c00 4341 4300 0049 5342     CC.MNC.LAC.CI.BS
 8094030:	4349 4100 4652 4e43 4100 4652 4e43 445f     IC.ARFCN.ARFCN_D
 8094040:	4445 5200 4c58 5645 5553 0042 5f54 4441     ED.RXLEVSUB.T_AD
 8094050:	0056 5852 454c 0056 4c44 0046 4c55 0046     V.RXLEV.DLF.ULF.
 8094060:	5352 5043 4c20 5645 5200 4341 5300 0043     RSCP LEV.RAC.SC.
 8094070:	4345 304e 4c20 5645 7500 6b6e 6f6e 6e77     ECN0 LEV.unknown
 8094080:	6b20 7965 253d 2073 6176 756c 3d65 7325      key=%s value=%s
 8094090:	4d00 4343 003a 4152 3a54 4700 4d53 0020     .MCC:.RAT:.GSM .
 80940a0:	4344 2053 3831 3030 4500 4753 204d 3039     DCS 1800.ESGM 90
 80940b0:	0030 4d55 5354 0020 4733 7520 6b6e 6f6e     0.UMTS .3G unkno
 80940c0:	6e77 4400 5343 3120 3038 2030 726f 3120     wn.DCS 1800 or 1
 80940d0:	3039 0030 4745 4d53 3920 3030 3200 2047     900.EGSM 900.2G 
 80940e0:	6e75 6e6b 776f 006e 636d 3d63 6425 202c     unknown.mcc=%d, 
 80940f0:	6e6d 3d63 6425 202c 616c 3d63 7825 6320     mnc=%d, lac=%x c
 8094100:	3d69 7825 6220 6e61 3d64 7325 7220 7373     i=%x band=%s rss
 8094110:	3d69 6425 7200 7461 553d 544d 2053 7325     i=%d.rat=UMTS %s
 8094120:	6420 666c 253d 2064 6c75 3d66 6425 7200      dlf=%d ulf=%d.r
 8094130:	7461 473d 4d53 2520 2073 7362 6369 253d     at=GSM %s bsic=%
 8094140:	2078 7261 6366 3d6e 6425 7220 6c78 7665     x arfcn=%d rxlev
 8094150:	253d 0064 6573 7672 6369 2065 7325 6e00     =%d.service %s.n
 8094160:	6965 6867 6f62 2072 6425 2520 0073 616c     eighbor %d %s.la
 8094170:	3d74 6625 6c20 6e6f 253d 2066 6c61 3d74     t=%f lon=%f alt=
 8094180:	6425 7520 636e 7265 6174 6e69 7974 253d     %d uncertainty=%
 8094190:	0064 6176 696c 3d64 6166 736c 0065 6425     d.valid=false.%d
 80941a0:	252c 2c64 2522 2278 222c 7825 2c22 6425     ,%d,"%x","%x",%d
 80941b0:	7300 6174 3d74 6425 6c20 6361 303d 2578     .stat=%d lac=0x%
 80941c0:	2078 6963 303d 2578 2078 6172 3d74 6425     x ci=0x%x rat=%d
 80941d0:	4100 2b54 4743 4d4d 0a0d 4100 4954 0d30     .AT+CGMM...ATI0.
 80941e0:	000a 5441 432b 4d47 0d52 000a 5441 432b     ..AT+CGMR...AT+C
 80941f0:	5347 0d4e 000a 5441 432b 4d47 0d49 000a     GSN...AT+CGMI...
 8094200:	4343 4449 4100 2b54 4343 4449 0a0d 5300     CCID.AT+CCID...S
 8094210:	5241 2d41 3452 5500 4f44 4e50 4100 2b54     ARA-R4.UDOPN.AT+
 8094220:	4455 504f 3d4e 6425 0a0d 4300 5153 4100     UDOPN=%d...CSQ.A
 8094230:	2b54 5343 0d51 000a 5441 432b 504f 3d53     T+CSQ...AT+COPS=
 8094240:	0d30 000a 706f 7265 7461 726f 6120 726c     0...operator alr
 8094250:	6165 7964 2520 0073 5441 432b 504f 3d53     eady %s.AT+COPS=
 8094260:	0d32 000a 5441 432b 504f 3d53 2c34 2c32     2...AT+COPS=4,2,
 8094270:	2522 2273 0a0d 4300 4547 0044 5441 432b     "%s"...CGED.AT+C
 8094280:	4547 3d44 6425 0a0d 5500 4c55 434f 4100     GED=%d...UULOC.A
 8094290:	2b54 4c55 434f 4543 4c4c 303d 0a0d 4100     T+ULOCCELL=0...A
 80942a0:	2b54 4c55 434f 323d 322c 302c 252c 2c64     T+ULOC=2,2,0,%d,
 80942b0:	3035 3030 0a0d 4100 2b54 5243 4745 323d     5000...AT+CREG=2
 80942c0:	0a0d 4300 4552 0047 5441 432b 4552 3f47     ...CREG.AT+CREG?
 80942d0:	0a0d 4100 2b54 5243 4745 303d 0a0d 4100     ...AT+CREG=0...A
 80942e0:	2b54 5055 4e49 3d47 2522 2273 0a0d 5500     T+UPING="%s"...U
 80942f0:	4e44 5253 004e 5441 552b 4e44 5253 3d4e     DNSRN.AT+UDNSRN=
 8094300:	2c30 2522 2273 0a0d 2500 2e75 7525 252e     0,"%s"...%u.%u.%
 8094310:	2e75 7525 0a00 252b 3a73 0020               u.%u..+%s: .

0809431c <_ZTV33CellularHelperEnvironmentResponse>:
	...
 8094324:	9f01 0808                                   ....

08094328 <_ZTV32CellularHelperPlusStringResponse>:
	...
 8094330:	a37d 0808                                   }...

08094334 <_ZZN4PMIC20getInputCurrentLimitEvE7mapping>:
 8094334:	0064 0096 01f4 0384 04b0 05dc 07d0 0bb8     d...............

08094344 <_ZTV8SPIClass>:
	...
 809434c:	ad61 0808 ad63 0808                         a...c...

08094354 <_ZL14clock_divisors>:
 8094354:	0800 1810 2820 3830 616e 006e 766f 0066     .... (08nan.ovf.
 8094364:	6e69 0066 6e6c 6600 006e 6f63 6564 6400     inf.ln.fn.code.d
 8094374:	7465 6961 006c 3025 3031 2075 5d00 0020     etail.%010u .] .
 8094384:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
 8094394:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
 80943a4:	6200 7561 0064 6553 6972 6c61 5500 4253     .baud.Serial.USB
 80943b4:	6553 6972 6c61 0031 7974 6570 7000 7261     Serial1.type.par
 80943c4:	6d61 6300 646d 6800 646e 7300 7274 006d     am.cmd.hnd.strm.
 80943d4:	6966 746c 6c00 6c76 6100 6464 6148 646e     filt.lvl.addHand
 80943e4:	656c 0072 6572 6f6d 6576 6148 646e 656c     ler.removeHandle
 80943f4:	0072 6e65 6d75 6148 646e 656c 7372 4a00     r.enumHandlers.J
 8094404:	4f53 534e 7274 6165 4c6d 676f 6148 646e     SONStreamLogHand
 8094414:	656c 0072 7061 0070 6f6e 656e 7400 6172     ler.app.none.tra
 8094424:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
 8094434:	726f 7000 6e61 6369 6100 6c6c 2500 302b     or.panic.all.%+0
 8094444:	6433 253a 3230 0075 5925 252d 2d6d 6425     3d:%02u.%Y-%m-%d
 8094454:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
 8094464:	6d69 0065                                   ime.

08094468 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8094470:	bfdd 0808 bfe3 0808 bffb 0808 bff1 0808     ................
 8094480:	bfdf 0808                                   ....

08094484 <_ZTV9IPAddress>:
	...
 809448c:	c579 0808 c569 0808 c56b 0808               y...i...k...

08094498 <_ZTV9USBSerial>:
	...
 80944a0:	c60d 0808 c65d 0808 c66b 0808 b5b9 0808     ....]...k.......
 80944b0:	c649 0808 c60f 0808 c625 0808 c657 0808     I.......%...W...
 80944c0:	c63b 0808 c609 0808                         ;.......

080944c8 <_ZTVN5spark13CellularClassE>:
	...
 80944d0:	c89b 0808 c891 0808 c887 0808 c805 0808     ................
 80944e0:	c87b 0808 0d69 0808 c86f 0808 c867 0808     {...i...o...g...
 80944f0:	c85d 0808 c853 0808 c80f 0808               ]...S.......

080944fc <_ZTV11USARTSerial>:
	...
 8094504:	0b5d 0808 0d75 0808 c933 0808 b5b9 0808     ]...u...3.......
 8094514:	c8f7 0808 c919 0808 c905 0808 c92d 0808     ............-...
 8094524:	c8e5 0808 c8e9 0808                         ........

0809452c <_ZTV7TwoWire>:
	...
 8094534:	ca0d 0808 ca57 0808 ca2f 0808 ca0f 0808     ....W.../.......
 8094544:	ca37 0808 ca3f 0808 ca47 0808 ca4f 0808     7...?...G...O...

08094554 <_ZTVN5spark12NetworkClassE>:
	...
 809455c:	cb09 0808 cb13 0808 cb1d 0808 cb27 0808     ............'...
 809456c:	cb31 0808 cb3d 0808 cb49 0808 cb55 0808     1...=...I...U...
 809457c:	cb5d 0808 cb67 0808 cb71 0808               ]...g...q...

08094588 <_ZTVN5spark16JSONBufferWriterE>:
	...
 8094590:	cbd1 0808 cbd3 0808 cbe1 0808 cc07 0808     ................
 80945a0:	2e30 0030 7274 6575 2500 0067 756e 6c6c     0.0.true.%g.null
 80945b0:	7500 3025 7834 5300                              .u%04x.

080945b7 <day_name.4723>:
 80945b7:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 80945c7:	6972 6153 4a74                                   riSat

080945cc <mon_name.4724>:
 80945cc:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 80945dc:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 80945ec:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 80945fc:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 809460c:	6425 000a                                   %d..

08094610 <_ctype_>:
 8094610:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 8094620:	2020 2020 2020 2020 2020 2020 2020 2020                     
 8094630:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 8094640:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 8094650:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 8094660:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 8094670:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 8094680:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 8094690:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

08094714 <__sf_fake_stdin>:
	...

08094734 <__sf_fake_stdout>:
	...

08094754 <__sf_fake_stderr>:
	...
 8094774:	4f50 4953 0058 0000                         POSIX...

0809477c <__month_lengths>:
 809477c:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 809478c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 809479c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80947ac:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80947bc:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80947cc:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80947dc:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
 80947ec:	2500 6432 2500 322e 2f64 2e25 6432 252f     .%2d.%.2d/%.2d/%
 80947fc:	322e 0064 6c25 0075 2d59 6d25 252d 0064     .2d.%lu.Y-%m-%d.
 809480c:	2a2e 0075 2e25 6433 2500 6c6c 0064 2e25     .*u.%.3d.%lld.%.
 809481c:	6432 253a 322e 3a64 2e25 6432 2500 302b     2d:%.2d:%.2d.%+0
 809482c:	6c33 2564 322e 646c 0000 0000               3ld%.2ld....

08094838 <fpi.5342>:
 8094838:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 8094848:	0000 0000 6e69 7469 0079 0000               ....inity...

08094854 <fpinan.5378>:
 8094854:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
 8094864:	0000 0000                                   ....

08094868 <tinytens>:
 8094868:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 8094878:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 8094888:	6f43 64ac 0628 1168 434c 545f 4d49 0045     Co.d(.h.LC_TIME.
 8094898:	614a 006e 6546 0062 614d 0072 7041 0072     Jan.Feb.Mar.Apr.
 80948a8:	614d 0079 754a 006e 754a 006c 7541 0067     May.Jun.Jul.Aug.
 80948b8:	6553 0070 634f 0074 6f4e 0076 6544 0063     Sep.Oct.Nov.Dec.
 80948c8:	614a 756e 7261 0079 6546 7262 6175 7972     January.February
 80948d8:	4d00 7261 6863 4100 7270 6c69 4a00 6e75     .March.April.Jun
 80948e8:	0065 754a 796c 4100 6775 7375 0074 6553     e.July.August.Se
 80948f8:	7470 6d65 6562 0072 634f 6f74 6562 0072     ptember.October.
 8094908:	6f4e 6576 626d 7265 4400 6365 6d65 6562     November.Decembe
 8094918:	0072 7553 006e 6f4d 006e 7554 0065 6557     r.Sun.Mon.Tue.We
 8094928:	0064 6854 0075 7246 0069 6153 0074 7553     d.Thu.Fri.Sat.Su
 8094938:	646e 7961 4d00 6e6f 6164 0079 7554 7365     nday.Monday.Tues
 8094948:	6164 0079 6557 6e64 7365 6164 0079 6854     day.Wednesday.Th
 8094958:	7275 6473 7961 4600 6972 6164 0079 6153     ursday.Friday.Sa
 8094968:	7574 6472 7961 2500 2f6d 6425 252f 0079     turday.%m/%d/%y.
 8094978:	6125 2520 2062 6525 2520 3a48 4d25 253a     %a %b %e %H:%M:%
 8094988:	2053 5925 4100 004d 6125 2520 2062 6525     S %Y.AM.%a %b %e
 8094998:	2520 3a48 4d25 253a 2053 5a25 2520 0059      %H:%M:%S %Z %Y.
 80949a8:	4925 253a 3a4d 5325 2520 0070               %I:%M:%S %p.

080949b4 <_C_time_locale>:
 80949b4:	4898 0809 489c 0809 48a0 0809 48a4 0809     .H...H...H...H..
 80949c4:	48a8 0809 48ac 0809 48b0 0809 48b4 0809     .H...H...H...H..
 80949d4:	48b8 0809 48bc 0809 48c0 0809 48c4 0809     .H...H...H...H..
 80949e4:	48c8 0809 48d0 0809 48d9 0809 48df 0809     .H...H...H...H..
 80949f4:	48a8 0809 48e5 0809 48ea 0809 48ef 0809     .H...H...H...H..
 8094a04:	48f6 0809 4900 0809 4908 0809 4911 0809     .H...I...I...I..
 8094a14:	491a 0809 491e 0809 4922 0809 4926 0809     .I...I.."I..&I..
 8094a24:	492a 0809 492e 0809 4932 0809 4936 0809     *I...I..2I..6I..
 8094a34:	493d 0809 4944 0809 494c 0809 4956 0809     =I..DI..LI..VI..
 8094a44:	495f 0809 4966 0809 3211 0809 496f 0809     _I..fI...2..oI..
 8094a54:	4978 0809 498d 0809 3a84 0809 4990 0809     xI...I...:...I..
 8094a64:	48c8 0809 48d0 0809 48d9 0809 48df 0809     .H...H...H...H..
 8094a74:	48a8 0809 48e5 0809 48ea 0809 48ef 0809     .H...H...H...H..
 8094a84:	48f6 0809 4900 0809 4908 0809 4911 0809     .H...I...I...I..
 8094a94:	43c8 0809 49a8 0809 4308 0809 4308 0809     .C...I...C...C..
 8094aa4:	4308 0809 4308 0809 4308 0809 5a54 4700     .C...C...C..TZ.G
 8094ab4:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
 8094ac4:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
 8094ad4:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
 8094ae4:	3a6e 6825 2575 006e 0000 0000               n:%hu%n.....

08094af0 <__mprec_tens>:
 8094af0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 8094b00:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 8094b10:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 8094b20:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 8094b30:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 8094b40:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 8094b50:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 8094b60:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 8094b70:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 8094b80:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 8094b90:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 8094ba0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 8094bb0:	9db4 79d9 7843 44ea                         ...yCx.D

08094bb8 <__mprec_bigtens>:
 8094bb8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 8094bc8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 8094bd8:	bf3c 7f73 4fdd 7515                         <.s..O.u

08094be0 <p05.5385>:
 8094be0:	0005 0000 0019 0000 007d 0000               ........}...

08094bec <link_const_variable_data_end>:
 8094bec:	080868ed 	.word	0x080868ed
 8094bf0:	08087063 	.word	0x08087063
 8094bf4:	08087171 	.word	0x08087171
 8094bf8:	08087275 	.word	0x08087275
 8094bfc:	080873fb 	.word	0x080873fb
 8094c00:	08087799 	.word	0x08087799
 8094c04:	0808779d 	.word	0x0808779d
 8094c08:	08087db5 	.word	0x08087db5
 8094c0c:	08087db9 	.word	0x08087db9
 8094c10:	08087dbd 	.word	0x08087dbd
 8094c14:	08087dc1 	.word	0x08087dc1
 8094c18:	0808828b 	.word	0x0808828b
 8094c1c:	080883dd 	.word	0x080883dd
 8094c20:	08088a7d 	.word	0x08088a7d
 8094c24:	08088aa1 	.word	0x08088aa1
 8094c28:	08088aa5 	.word	0x08088aa5
 8094c2c:	08088dbd 	.word	0x08088dbd
 8094c30:	08088dc1 	.word	0x08088dc1
 8094c34:	08089249 	.word	0x08089249
 8094c38:	08089439 	.word	0x08089439
 8094c3c:	08089a15 	.word	0x08089a15
 8094c40:	0808a405 	.word	0x0808a405
 8094c44:	0808af35 	.word	0x0808af35
 8094c48:	0808ba2d 	.word	0x0808ba2d
 8094c4c:	0808bd45 	.word	0x0808bd45
 8094c50:	0808bd91 	.word	0x0808bd91
 8094c54:	0808c8a5 	.word	0x0808c8a5
 8094c58:	0808cbbd 	.word	0x0808cbbd
 8094c5c:	0808ce69 	.word	0x0808ce69
 8094c60:	0808ceed 	.word	0x0808ceed
 8094c64:	0808cfb1 	.word	0x0808cfb1
 8094c68:	0808d035 	.word	0x0808d035
 8094c6c:	0808d0f9 	.word	0x0808d0f9
 8094c70:	0808d1bd 	.word	0x0808d1bd

08094c74 <link_constructors_end>:
	...
