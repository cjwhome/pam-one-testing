
c:/particleProjects/pam-one-testing/target/2.0.0-rc.1/electron/pam-one-testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00014ad0  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  08094af0  08094af0  00024af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  08094af8  00034000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000324  20000000  08094afc  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000010c4  20000328  20000328  00050328  2**3
                  ALLOC
  7 .module_info_suffix 00000028  08094e20  08094e20  00044e20  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  08094e48  08094e48  00044e48  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   003198dc  00000000  00000000  00044e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000307c9  00000000  00000000  0035e728  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0003f1d9  00000000  00000000  0038eef1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000035d0  00000000  00000000  003ce0ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00009270  00000000  00000000  003d169a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00045703  00000000  00000000  003da90a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0007348e  00000000  00000000  0042000d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000c9cf3  00000000  00000000  0049349b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000a740  00000000  00000000  0055d190  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080020:	4809      	ldr	r0, [pc, #36]	; (8080048 <module_user_pre_init+0x28>)
 8080022:	490a      	ldr	r1, [pc, #40]	; (808004c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 8080024:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080026:	4288      	cmp	r0, r1
 8080028:	d005      	beq.n	8080036 <module_user_pre_init+0x16>
 808002a:	4a09      	ldr	r2, [pc, #36]	; (8080050 <module_user_pre_init+0x30>)
 808002c:	4282      	cmp	r2, r0
 808002e:	d002      	beq.n	8080036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080030:	1a12      	subs	r2, r2, r0
 8080032:	f00e fd07 	bl	808ea44 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080036:	4807      	ldr	r0, [pc, #28]	; (8080054 <module_user_pre_init+0x34>)
 8080038:	4a07      	ldr	r2, [pc, #28]	; (8080058 <module_user_pre_init+0x38>)
 808003a:	2100      	movs	r1, #0
 808003c:	1a12      	subs	r2, r2, r0
 808003e:	f00e fd0f 	bl	808ea60 <memset>
    return &link_heap_start;
}
 8080042:	4806      	ldr	r0, [pc, #24]	; (808005c <module_user_pre_init+0x3c>)
 8080044:	bd08      	pop	{r3, pc}
 8080046:	bf00      	nop
 8080048:	20000000 	.word	0x20000000
 808004c:	08094afc 	.word	0x08094afc
 8080050:	20000324 	.word	0x20000324
 8080054:	20000328 	.word	0x20000328
 8080058:	200013e9 	.word	0x200013e9
 808005c:	200013e9 	.word	0x200013e9

08080060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080062:	f00c f915 	bl	808c290 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080066:	2500      	movs	r5, #0
 8080068:	4e05      	ldr	r6, [pc, #20]	; (8080080 <module_user_init+0x20>)
 808006a:	4c06      	ldr	r4, [pc, #24]	; (8080084 <module_user_init+0x24>)
 808006c:	1ba4      	subs	r4, r4, r6
 808006e:	08a4      	lsrs	r4, r4, #2
 8080070:	42a5      	cmp	r5, r4
 8080072:	d100      	bne.n	8080076 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080074:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 8080076:	f856 3b04 	ldr.w	r3, [r6], #4
 808007a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808007c:	3501      	adds	r5, #1
 808007e:	e7f7      	b.n	8080070 <module_user_init+0x10>
 8080080:	08094a7c 	.word	0x08094a7c
 8080084:	08094af0 	.word	0x08094af0

08080088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080088:	f005 b996 	b.w	80853b8 <setup>

0808008c <module_user_loop>:
}

void module_user_loop() {
 808008c:	b508      	push	{r3, lr}
    loop();
 808008e:	f006 fd7b 	bl	8086b88 <loop>
    _post_loop();
}
 8080092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 8080096:	f00c b8bd 	b.w	808c214 <_post_loop>

0808009a <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 808009a:	f00a bd93 	b.w	808abc4 <malloc>

0808009e <_Znaj>:
 808009e:	f00a bd91 	b.w	808abc4 <malloc>

080800a2 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80800a2:	f00a bd97 	b.w	808abd4 <free>

080800a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a6:	7800      	ldrb	r0, [r0, #0]
 80800a8:	fab0 f080 	clz	r0, r0
 80800ac:	0940      	lsrs	r0, r0, #5
 80800ae:	4770      	bx	lr

080800b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800b0:	2301      	movs	r3, #1
 80800b2:	7003      	strb	r3, [r0, #0]
 80800b4:	4770      	bx	lr

080800b6 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80800b6:	b148      	cbz	r0, 80800cc <null_ptr_check+0x16>
 80800b8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80800ba:	b13b      	cbz	r3, 80800cc <null_ptr_check+0x16>
 80800bc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80800be:	b12b      	cbz	r3, 80800cc <null_ptr_check+0x16>
 80800c0:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80800c2:	fab0 f080 	clz	r0, r0
 80800c6:	0940      	lsrs	r0, r0, #5
 80800c8:	4240      	negs	r0, r0
 80800ca:	4770      	bx	lr
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
 80800cc:	f04f 30ff 	mov.w	r0, #4294967295
		/* Device structure is fine */
		rslt = BME680_OK;
	}

	return rslt;
}
 80800d0:	4770      	bx	lr

080800d2 <set_mem_page>:
{
 80800d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80800d4:	4602      	mov	r2, r0
	rslt = null_ptr_check(dev);
 80800d6:	4608      	mov	r0, r1
{
 80800d8:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
 80800da:	f7ff ffec 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80800de:	4605      	mov	r5, r0
 80800e0:	bb40      	cbnz	r0, 8080134 <set_mem_page+0x62>
			mem_page = BME680_MEM_PAGE0;
 80800e2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80800e6:	bf14      	ite	ne
 80800e8:	2300      	movne	r3, #0
 80800ea:	2310      	moveq	r3, #16
		if (mem_page != dev->mem_page) {
 80800ec:	78ca      	ldrb	r2, [r1, #3]
 80800ee:	429a      	cmp	r2, r3
 80800f0:	d020      	beq.n	8080134 <set_mem_page+0x62>
			dev->mem_page = mem_page;
 80800f2:	70cb      	strb	r3, [r1, #3]
			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 80800f4:	6c8e      	ldr	r6, [r1, #72]	; 0x48
 80800f6:	2301      	movs	r3, #1
 80800f8:	21f3      	movs	r1, #243	; 0xf3
 80800fa:	7860      	ldrb	r0, [r4, #1]
 80800fc:	f10d 0207 	add.w	r2, sp, #7
 8080100:	47b0      	blx	r6
 8080102:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
			if (dev->com_rslt != 0)
 8080106:	b998      	cbnz	r0, 8080130 <set_mem_page+0x5e>
				reg = reg & (~BME680_MEM_PAGE_MSK);
 8080108:	f89d 2007 	ldrb.w	r2, [sp, #7]
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 808010c:	78e3      	ldrb	r3, [r4, #3]
				reg = reg & (~BME680_MEM_PAGE_MSK);
 808010e:	f022 0210 	bic.w	r2, r2, #16
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 8080112:	f003 0310 	and.w	r3, r3, #16
 8080116:	4313      	orrs	r3, r2
 8080118:	f88d 3007 	strb.w	r3, [sp, #7]
				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 808011c:	2173      	movs	r1, #115	; 0x73
 808011e:	2301      	movs	r3, #1
 8080120:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 8080122:	7860      	ldrb	r0, [r4, #1]
 8080124:	f10d 0207 	add.w	r2, sp, #7
 8080128:	47b0      	blx	r6
 808012a:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
				if (dev->com_rslt != 0)
 808012e:	b108      	cbz	r0, 8080134 <set_mem_page+0x62>
					rslt = BME680_E_COM_FAIL;
 8080130:	f06f 0501 	mvn.w	r5, #1
}
 8080134:	4628      	mov	r0, r5
 8080136:	b002      	add	sp, #8
 8080138:	bd70      	pop	{r4, r5, r6, pc}

0808013a <get_mem_page.part.0>:
static int8_t get_mem_page(struct bme680_dev *dev)
 808013a:	b537      	push	{r0, r1, r2, r4, r5, lr}
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 808013c:	2301      	movs	r3, #1
static int8_t get_mem_page(struct bme680_dev *dev)
 808013e:	4604      	mov	r4, r0
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 8080140:	6c85      	ldr	r5, [r0, #72]	; 0x48
 8080142:	21f3      	movs	r1, #243	; 0xf3
 8080144:	7840      	ldrb	r0, [r0, #1]
 8080146:	f10d 0207 	add.w	r2, sp, #7
 808014a:	47a8      	blx	r5
 808014c:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
		if (dev->com_rslt != 0)
 8080150:	b930      	cbnz	r0, 8080160 <get_mem_page.part.0+0x26>
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
 8080152:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8080156:	f003 0310 	and.w	r3, r3, #16
 808015a:	70e3      	strb	r3, [r4, #3]
}
 808015c:	b003      	add	sp, #12
 808015e:	bd30      	pop	{r4, r5, pc}
			rslt = BME680_E_COM_FAIL;
 8080160:	f06f 0001 	mvn.w	r0, #1
 8080164:	e7fa      	b.n	808015c <get_mem_page.part.0+0x22>

08080166 <boundary_check.isra.0.constprop.0>:
		if (*value > max) {
 8080166:	7803      	ldrb	r3, [r0, #0]
 8080168:	428b      	cmp	r3, r1
			*value = max;
 808016a:	bf84      	itt	hi
 808016c:	7001      	strbhi	r1, [r0, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 808016e:	7813      	ldrbhi	r3, [r2, #0]
}
 8080170:	f04f 0000 	mov.w	r0, #0
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 8080174:	bf84      	itt	hi
 8080176:	f043 0302 	orrhi.w	r3, r3, #2
 808017a:	7013      	strbhi	r3, [r2, #0]
}
 808017c:	4770      	bx	lr

0808017e <bme680_get_regs>:
{
 808017e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8080182:	4606      	mov	r6, r0
	rslt = null_ptr_check(dev);
 8080184:	4618      	mov	r0, r3
{
 8080186:	4688      	mov	r8, r1
 8080188:	4691      	mov	r9, r2
 808018a:	461d      	mov	r5, r3
	rslt = null_ptr_check(dev);
 808018c:	f7ff ff93 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080190:	4604      	mov	r4, r0
 8080192:	b9a8      	cbnz	r0, 80801c0 <bme680_get_regs+0x42>
		if (dev->intf == BME680_SPI_INTF) {
 8080194:	78ab      	ldrb	r3, [r5, #2]
 8080196:	b93b      	cbnz	r3, 80801a8 <bme680_get_regs+0x2a>
			rslt = set_mem_page(reg_addr, dev);
 8080198:	4629      	mov	r1, r5
 808019a:	4630      	mov	r0, r6
 808019c:	f7ff ff99 	bl	80800d2 <set_mem_page>
			if (rslt == BME680_OK)
 80801a0:	4604      	mov	r4, r0
 80801a2:	b908      	cbnz	r0, 80801a8 <bme680_get_regs+0x2a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
 80801a4:	f046 0680 	orr.w	r6, r6, #128	; 0x80
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80801a8:	464b      	mov	r3, r9
 80801aa:	4642      	mov	r2, r8
 80801ac:	4631      	mov	r1, r6
 80801ae:	6caf      	ldr	r7, [r5, #72]	; 0x48
 80801b0:	7868      	ldrb	r0, [r5, #1]
 80801b2:	47b8      	blx	r7
		if (dev->com_rslt != 0)
 80801b4:	2800      	cmp	r0, #0
			rslt = BME680_E_COM_FAIL;
 80801b6:	bf18      	it	ne
 80801b8:	f06f 0401 	mvnne.w	r4, #1
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80801bc:	f885 0054 	strb.w	r0, [r5, #84]	; 0x54
}
 80801c0:	4620      	mov	r0, r4
 80801c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080801c6 <bme680_set_regs>:
{
 80801c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80801ca:	461c      	mov	r4, r3
 80801cc:	460f      	mov	r7, r1
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 80801ce:	2100      	movs	r1, #0
{
 80801d0:	b08a      	sub	sp, #40	; 0x28
 80801d2:	4606      	mov	r6, r0
 80801d4:	4690      	mov	r8, r2
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 80801d6:	a801      	add	r0, sp, #4
 80801d8:	2224      	movs	r2, #36	; 0x24
 80801da:	9100      	str	r1, [sp, #0]
 80801dc:	f00e fc40 	bl	808ea60 <memset>
	rslt = null_ptr_check(dev);
 80801e0:	4620      	mov	r0, r4
 80801e2:	f7ff ff68 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80801e6:	b9e8      	cbnz	r0, 8080224 <bme680_set_regs+0x5e>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
 80801e8:	f108 33ff 	add.w	r3, r8, #4294967295
 80801ec:	2b12      	cmp	r3, #18
 80801ee:	d833      	bhi.n	8080258 <bme680_set_regs+0x92>
 80801f0:	46ea      	mov	sl, sp
 80801f2:	4681      	mov	r9, r0
			for (index = 0; index < len; index++) {
 80801f4:	fa1f f888 	uxth.w	r8, r8
 80801f8:	fa1f f389 	uxth.w	r3, r9
 80801fc:	4543      	cmp	r3, r8
 80801fe:	d314      	bcc.n	808022a <bme680_set_regs+0x64>
			if (rslt == BME680_OK) {
 8080200:	b980      	cbnz	r0, 8080224 <bme680_set_regs+0x5e>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 8080202:	ea4f 0248 	mov.w	r2, r8, lsl #1
 8080206:	3a01      	subs	r2, #1
 8080208:	b293      	uxth	r3, r2
 808020a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 808020c:	f89d 1000 	ldrb.w	r1, [sp]
 8080210:	7860      	ldrb	r0, [r4, #1]
 8080212:	f10d 0201 	add.w	r2, sp, #1
 8080216:	47a8      	blx	r5
					rslt = BME680_E_COM_FAIL;
 8080218:	2800      	cmp	r0, #0
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 808021a:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
					rslt = BME680_E_COM_FAIL;
 808021e:	bf18      	it	ne
 8080220:	f06f 0001 	mvnne.w	r0, #1
}
 8080224:	b00a      	add	sp, #40	; 0x28
 8080226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (dev->intf == BME680_SPI_INTF) {
 808022a:	78a3      	ldrb	r3, [r4, #2]
 808022c:	f816 5009 	ldrb.w	r5, [r6, r9]
 8080230:	b93b      	cbnz	r3, 8080242 <bme680_set_regs+0x7c>
					rslt = set_mem_page(reg_addr[index], dev);
 8080232:	4628      	mov	r0, r5
 8080234:	4621      	mov	r1, r4
 8080236:	f7ff ff4c 	bl	80800d2 <set_mem_page>
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 808023a:	f816 5009 	ldrb.w	r5, [r6, r9]
 808023e:	f005 057f 	and.w	r5, r5, #127	; 0x7f
				tmp_buff[(2 * index) + 1] = reg_data[index];
 8080242:	f817 3009 	ldrb.w	r3, [r7, r9]
					tmp_buff[(2 * index)] = reg_addr[index];
 8080246:	f88a 5000 	strb.w	r5, [sl]
				tmp_buff[(2 * index) + 1] = reg_data[index];
 808024a:	f88a 3001 	strb.w	r3, [sl, #1]
			for (index = 0; index < len; index++) {
 808024e:	f109 0901 	add.w	r9, r9, #1
 8080252:	f10a 0a02 	add.w	sl, sl, #2
 8080256:	e7cf      	b.n	80801f8 <bme680_set_regs+0x32>
			rslt = BME680_E_INVALID_LENGTH;
 8080258:	f06f 0003 	mvn.w	r0, #3
 808025c:	e7e2      	b.n	8080224 <bme680_set_regs+0x5e>

0808025e <bme680_soft_reset>:
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
 808025e:	23e0      	movs	r3, #224	; 0xe0
{
 8080260:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
 8080262:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 8080266:	23b6      	movs	r3, #182	; 0xb6
{
 8080268:	4605      	mov	r5, r0
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 808026a:	f88d 3007 	strb.w	r3, [sp, #7]
	rslt = null_ptr_check(dev);
 808026e:	f7ff ff22 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080272:	4604      	mov	r4, r0
 8080274:	b970      	cbnz	r0, 8080294 <bme680_soft_reset+0x36>
		if (dev->intf == BME680_SPI_INTF)
 8080276:	78ab      	ldrb	r3, [r5, #2]
 8080278:	b17b      	cbz	r3, 808029a <bme680_soft_reset+0x3c>
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 808027a:	462b      	mov	r3, r5
 808027c:	2201      	movs	r2, #1
 808027e:	f10d 0107 	add.w	r1, sp, #7
 8080282:	f10d 0006 	add.w	r0, sp, #6
 8080286:	f7ff ff9e 	bl	80801c6 <bme680_set_regs>
 808028a:	4604      	mov	r4, r0
			dev->delay_ms(BME680_RESET_PERIOD);
 808028c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 808028e:	200a      	movs	r0, #10
 8080290:	4798      	blx	r3
			if (rslt == BME680_OK) {
 8080292:	b14c      	cbz	r4, 80802a8 <bme680_soft_reset+0x4a>
}
 8080294:	4620      	mov	r0, r4
 8080296:	b003      	add	sp, #12
 8080298:	bd30      	pop	{r4, r5, pc}
	if (rslt == BME680_OK) {
 808029a:	4628      	mov	r0, r5
 808029c:	f7ff ff4d 	bl	808013a <get_mem_page.part.0>
		if (rslt == BME680_OK) {
 80802a0:	4604      	mov	r4, r0
 80802a2:	2800      	cmp	r0, #0
 80802a4:	d1f6      	bne.n	8080294 <bme680_soft_reset+0x36>
 80802a6:	e7e8      	b.n	808027a <bme680_soft_reset+0x1c>
				if (dev->intf == BME680_SPI_INTF)
 80802a8:	78ab      	ldrb	r3, [r5, #2]
 80802aa:	2b00      	cmp	r3, #0
 80802ac:	d1f2      	bne.n	8080294 <bme680_soft_reset+0x36>
	rslt = null_ptr_check(dev);
 80802ae:	4628      	mov	r0, r5
 80802b0:	f7ff ff01 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80802b4:	4604      	mov	r4, r0
 80802b6:	2800      	cmp	r0, #0
 80802b8:	d1ec      	bne.n	8080294 <bme680_soft_reset+0x36>
 80802ba:	4628      	mov	r0, r5
 80802bc:	f7ff ff3d 	bl	808013a <get_mem_page.part.0>
 80802c0:	4604      	mov	r4, r0
 80802c2:	e7e7      	b.n	8080294 <bme680_soft_reset+0x36>

080802c4 <bme680_init>:
{
 80802c4:	b530      	push	{r4, r5, lr}
 80802c6:	b08d      	sub	sp, #52	; 0x34
 80802c8:	4605      	mov	r5, r0
	rslt = null_ptr_check(dev);
 80802ca:	f7ff fef4 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80802ce:	4604      	mov	r4, r0
 80802d0:	2800      	cmp	r0, #0
 80802d2:	f040 80c9 	bne.w	8080468 <bme680_init+0x1a4>
		rslt = bme680_soft_reset(dev);
 80802d6:	4628      	mov	r0, r5
 80802d8:	f7ff ffc1 	bl	808025e <bme680_soft_reset>
		if (rslt == BME680_OK) {
 80802dc:	4604      	mov	r4, r0
 80802de:	2800      	cmp	r0, #0
 80802e0:	f040 80c2 	bne.w	8080468 <bme680_init+0x1a4>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 80802e4:	462b      	mov	r3, r5
 80802e6:	2201      	movs	r2, #1
 80802e8:	4629      	mov	r1, r5
 80802ea:	20d0      	movs	r0, #208	; 0xd0
 80802ec:	f7ff ff47 	bl	808017e <bme680_get_regs>
			if (rslt == BME680_OK) {
 80802f0:	4604      	mov	r4, r0
 80802f2:	2800      	cmp	r0, #0
 80802f4:	f040 80b8 	bne.w	8080468 <bme680_init+0x1a4>
				if (dev->chip_id == BME680_CHIP_ID) {
 80802f8:	782b      	ldrb	r3, [r5, #0]
 80802fa:	2b61      	cmp	r3, #97	; 0x61
 80802fc:	f040 80b7 	bne.w	808046e <bme680_init+0x1aa>
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
 8080300:	4601      	mov	r1, r0
 8080302:	2225      	movs	r2, #37	; 0x25
 8080304:	9001      	str	r0, [sp, #4]
 8080306:	a802      	add	r0, sp, #8
 8080308:	f00e fbaa 	bl	808ea60 <memset>
	rslt = null_ptr_check(dev);
 808030c:	4628      	mov	r0, r5
	uint8_t temp_var = 0; /* Temporary variable */
 808030e:	f88d 4003 	strb.w	r4, [sp, #3]
	rslt = null_ptr_check(dev);
 8080312:	f7ff fed0 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080316:	4604      	mov	r4, r0
 8080318:	2800      	cmp	r0, #0
 808031a:	f040 80a5 	bne.w	8080468 <bme680_init+0x1a4>
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
 808031e:	462b      	mov	r3, r5
 8080320:	2219      	movs	r2, #25
 8080322:	2089      	movs	r0, #137	; 0x89
 8080324:	a901      	add	r1, sp, #4
 8080326:	f7ff ff2a 	bl	808017e <bme680_get_regs>
		if (rslt == BME680_OK)
 808032a:	4604      	mov	r4, r0
 808032c:	b938      	cbnz	r0, 808033e <bme680_init+0x7a>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
 808032e:	462b      	mov	r3, r5
 8080330:	2210      	movs	r2, #16
 8080332:	20e1      	movs	r0, #225	; 0xe1
 8080334:	f10d 011d 	add.w	r1, sp, #29
 8080338:	f7ff ff21 	bl	808017e <bme680_get_regs>
 808033c:	4604      	mov	r4, r0
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
 808033e:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8080342:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8080346:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 808034a:	82eb      	strh	r3, [r5, #22]
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
 808034c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8080350:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8080354:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8080358:	832b      	strh	r3, [r5, #24]
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 808035a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 808035e:	f89d 200a 	ldrb.w	r2, [sp, #10]
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 8080362:	76ab      	strb	r3, [r5, #26]
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 8080364:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8080368:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 808036c:	83ab      	strh	r3, [r5, #28]
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
 808036e:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8080372:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8080376:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 808037a:	83eb      	strh	r3, [r5, #30]
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 808037c:	f89d 300d 	ldrb.w	r3, [sp, #13]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 8080380:	f89d 2010 	ldrb.w	r2, [sp, #16]
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 8080384:	f885 3020 	strb.w	r3, [r5, #32]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 8080388:	f89d 300f 	ldrb.w	r3, [sp, #15]
 808038c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8080390:	846b      	strh	r3, [r5, #34]	; 0x22
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
 8080392:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8080396:	f89d 3011 	ldrb.w	r3, [sp, #17]
 808039a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 808039e:	84ab      	strh	r3, [r5, #36]	; 0x24
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 80803a0:	f89d 3014 	ldrb.w	r3, [sp, #20]
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 80803a4:	f89d 2018 	ldrb.w	r2, [sp, #24]
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 80803a8:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
 80803ac:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80803b0:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 80803b4:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80803b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80803bc:	852b      	strh	r3, [r5, #40]	; 0x28
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
 80803be:	f89d 201a 	ldrb.w	r2, [sp, #26]
 80803c2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80803c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80803ca:	856b      	strh	r3, [r5, #42]	; 0x2a
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 80803cc:	f89d 301b 	ldrb.w	r3, [sp, #27]
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80803d0:	f89d 101f 	ldrb.w	r1, [sp, #31]
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 80803d4:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
 80803d8:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80803dc:	f003 020f 	and.w	r2, r3, #15
 80803e0:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80803e4:	812a      	strh	r2, [r5, #8]
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80803e6:	f89d 201d 	ldrb.w	r2, [sp, #29]
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
 80803ea:	091b      	lsrs	r3, r3, #4
 80803ec:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80803f0:	816b      	strh	r3, [r5, #10]
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 80803f2:	9b08      	ldr	r3, [sp, #32]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 80803f4:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 80803f8:	60eb      	str	r3, [r5, #12]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
 80803fa:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80803fe:	742b      	strb	r3, [r5, #16]
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
 8080400:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 8080404:	746b      	strb	r3, [r5, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 8080406:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 808040a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 808040e:	826b      	strh	r3, [r5, #18]
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
 8080410:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 8080414:	752b      	strb	r3, [r5, #20]
		if (rslt == BME680_OK) {
 8080416:	bb14      	cbnz	r4, 808045e <bme680_init+0x19a>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
 8080418:	462b      	mov	r3, r5
 808041a:	2201      	movs	r2, #1
 808041c:	2002      	movs	r0, #2
 808041e:	f10d 0103 	add.w	r1, sp, #3
 8080422:	f7ff feac 	bl	808017e <bme680_get_regs>
			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 8080426:	f89d 3003 	ldrb.w	r3, [sp, #3]
			if (rslt == BME680_OK) {
 808042a:	4604      	mov	r4, r0
			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 808042c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8080430:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
			if (rslt == BME680_OK) {
 8080434:	b998      	cbnz	r0, 808045e <bme680_init+0x19a>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
 8080436:	462b      	mov	r3, r5
 8080438:	2201      	movs	r2, #1
 808043a:	f10d 0103 	add.w	r1, sp, #3
 808043e:	f7ff fe9e 	bl	808017e <bme680_get_regs>
				dev->calib.res_heat_val = (int8_t) temp_var;
 8080442:	f89d 3003 	ldrb.w	r3, [sp, #3]
				if (rslt == BME680_OK)
 8080446:	4604      	mov	r4, r0
				dev->calib.res_heat_val = (int8_t) temp_var;
 8080448:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
				if (rslt == BME680_OK)
 808044c:	b938      	cbnz	r0, 808045e <bme680_init+0x19a>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
 808044e:	462b      	mov	r3, r5
 8080450:	2201      	movs	r2, #1
 8080452:	2004      	movs	r0, #4
 8080454:	f10d 0103 	add.w	r1, sp, #3
 8080458:	f7ff fe91 	bl	808017e <bme680_get_regs>
 808045c:	4604      	mov	r4, r0
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
 808045e:	f99d 3003 	ldrsb.w	r3, [sp, #3]
 8080462:	111b      	asrs	r3, r3, #4
 8080464:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
}
 8080468:	4620      	mov	r0, r4
 808046a:	b00d      	add	sp, #52	; 0x34
 808046c:	bd30      	pop	{r4, r5, pc}
					rslt = BME680_E_DEV_NOT_FOUND;
 808046e:	f06f 0402 	mvn.w	r4, #2
 8080472:	e7f9      	b.n	8080468 <bme680_init+0x1a4>

08080474 <bme680_set_sensor_mode>:
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 8080474:	2374      	movs	r3, #116	; 0x74
{
 8080476:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080478:	4604      	mov	r4, r0
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 808047a:	f88d 3007 	strb.w	r3, [sp, #7]
	rslt = null_ptr_check(dev);
 808047e:	f7ff fe1a 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080482:	bba0      	cbnz	r0, 80804ee <bme680_set_sensor_mode+0x7a>
	uint8_t pow_mode = 0;
 8080484:	4605      	mov	r5, r0
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
 8080486:	4623      	mov	r3, r4
 8080488:	2201      	movs	r2, #1
 808048a:	2074      	movs	r0, #116	; 0x74
 808048c:	f10d 0106 	add.w	r1, sp, #6
 8080490:	f7ff fe75 	bl	808017e <bme680_get_regs>
			if (rslt == BME680_OK) {
 8080494:	b9a0      	cbnz	r0, 80804c0 <bme680_set_sensor_mode+0x4c>
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
 8080496:	f89d 3006 	ldrb.w	r3, [sp, #6]
				if (pow_mode != BME680_SLEEP_MODE) {
 808049a:	f013 0503 	ands.w	r5, r3, #3
 808049e:	d011      	beq.n	80804c4 <bme680_set_sensor_mode+0x50>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 80804a0:	f023 0303 	bic.w	r3, r3, #3
 80804a4:	f88d 3006 	strb.w	r3, [sp, #6]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80804a8:	2201      	movs	r2, #1
 80804aa:	4623      	mov	r3, r4
 80804ac:	f10d 0106 	add.w	r1, sp, #6
 80804b0:	f10d 0007 	add.w	r0, sp, #7
 80804b4:	f7ff fe87 	bl	80801c6 <bme680_set_regs>
					dev->delay_ms(BME680_POLL_PERIOD_MS);
 80804b8:	200a      	movs	r0, #10
 80804ba:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80804bc:	4798      	blx	r3
		} while (pow_mode != BME680_SLEEP_MODE);
 80804be:	e7e2      	b.n	8080486 <bme680_set_sensor_mode+0x12>
 80804c0:	2d00      	cmp	r5, #0
 80804c2:	d1e0      	bne.n	8080486 <bme680_set_sensor_mode+0x12>
		if (dev->power_mode != BME680_SLEEP_MODE) {
 80804c4:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80804c8:	b18a      	cbz	r2, 80804ee <bme680_set_sensor_mode+0x7a>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
 80804ca:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80804ce:	f002 0203 	and.w	r2, r2, #3
 80804d2:	f023 0303 	bic.w	r3, r3, #3
 80804d6:	4313      	orrs	r3, r2
 80804d8:	f88d 3006 	strb.w	r3, [sp, #6]
			if (rslt == BME680_OK)
 80804dc:	b938      	cbnz	r0, 80804ee <bme680_set_sensor_mode+0x7a>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80804de:	4623      	mov	r3, r4
 80804e0:	2201      	movs	r2, #1
 80804e2:	f10d 0106 	add.w	r1, sp, #6
 80804e6:	f10d 0007 	add.w	r0, sp, #7
 80804ea:	f7ff fe6c 	bl	80801c6 <bme680_set_regs>
}
 80804ee:	b003      	add	sp, #12
 80804f0:	bd30      	pop	{r4, r5, pc}

080804f2 <bme680_set_sensor_settings>:
	uint8_t data = 0;
 80804f2:	2300      	movs	r3, #0
{
 80804f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80804f6:	4606      	mov	r6, r0
 80804f8:	b089      	sub	sp, #36	; 0x24
	rslt = null_ptr_check(dev);
 80804fa:	4608      	mov	r0, r1
{
 80804fc:	460c      	mov	r4, r1
	uint8_t data = 0;
 80804fe:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 8080502:	9304      	str	r3, [sp, #16]
 8080504:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 8080508:	9306      	str	r3, [sp, #24]
 808050a:	f8ad 301c 	strh.w	r3, [sp, #28]
	rslt = null_ptr_check(dev);
 808050e:	f7ff fdd2 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080512:	2800      	cmp	r0, #0
 8080514:	f040 80fe 	bne.w	8080714 <bme680_set_sensor_settings+0x222>
		if (desired_settings & BME680_GAS_MEAS_SEL)
 8080518:	f016 0308 	ands.w	r3, r6, #8
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
 808051c:	f891 7044 	ldrb.w	r7, [r1, #68]	; 0x44
		if (desired_settings & BME680_GAS_MEAS_SEL)
 8080520:	d105      	bne.n	808052e <bme680_set_sensor_settings+0x3c>
		dev->power_mode = BME680_SLEEP_MODE;
 8080522:	f881 3044 	strb.w	r3, [r1, #68]	; 0x44
			rslt = bme680_set_sensor_mode(dev);
 8080526:	4620      	mov	r0, r4
 8080528:	f7ff ffa4 	bl	8080474 <bme680_set_sensor_mode>
 808052c:	e007      	b.n	808053e <bme680_set_sensor_settings+0x4c>
		if (dev->power_mode == BME680_FORCED_MODE) {
 808052e:	2f01      	cmp	r7, #1
		uint8_t reg_data[2] = {0};
 8080530:	f8ad 000c 	strh.w	r0, [sp, #12]
		if (dev->power_mode == BME680_FORCED_MODE) {
 8080534:	f000 80f0 	beq.w	8080718 <bme680_set_sensor_settings+0x226>
		dev->power_mode = BME680_SLEEP_MODE;
 8080538:	f881 0044 	strb.w	r0, [r1, #68]	; 0x44
			rslt = BME680_W_DEFINE_PWR_MODE;
 808053c:	2001      	movs	r0, #1
		if (desired_settings & BME680_FILTER_SEL) {
 808053e:	f016 0510 	ands.w	r5, r6, #16
 8080542:	d020      	beq.n	8080586 <bme680_set_sensor_settings+0x94>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
 8080544:	2107      	movs	r1, #7
 8080546:	f104 0246 	add.w	r2, r4, #70	; 0x46
 808054a:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 808054e:	f7ff fe0a 	bl	8080166 <boundary_check.isra.0.constprop.0>
			if (rslt == BME680_OK)
 8080552:	b930      	cbnz	r0, 8080562 <bme680_set_sensor_settings+0x70>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8080554:	4623      	mov	r3, r4
 8080556:	2201      	movs	r2, #1
 8080558:	2075      	movs	r0, #117	; 0x75
 808055a:	f10d 0107 	add.w	r1, sp, #7
 808055e:	f7ff fe0e 	bl	808017e <bme680_get_regs>
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 8080562:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 8080566:	f89d 2007 	ldrb.w	r2, [sp, #7]
 808056a:	009b      	lsls	r3, r3, #2
 808056c:	f022 021c 	bic.w	r2, r2, #28
 8080570:	f003 031c 	and.w	r3, r3, #28
 8080574:	4313      	orrs	r3, r2
			reg_array[count] = reg_addr; /* Append configuration */
 8080576:	2275      	movs	r2, #117	; 0x75
			count++;
 8080578:	2501      	movs	r5, #1
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 808057a:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
 808057e:	f88d 2010 	strb.w	r2, [sp, #16]
			data_array[count] = data;
 8080582:	f88d 3018 	strb.w	r3, [sp, #24]
		if (desired_settings & BME680_HCNTRL_SEL) {
 8080586:	06b3      	lsls	r3, r6, #26
 8080588:	d522      	bpl.n	80805d0 <bme680_set_sensor_settings+0xde>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
 808058a:	2108      	movs	r1, #8
 808058c:	f104 0246 	add.w	r2, r4, #70	; 0x46
 8080590:	f104 003d 	add.w	r0, r4, #61	; 0x3d
 8080594:	f7ff fde7 	bl	8080166 <boundary_check.isra.0.constprop.0>
			if (rslt == BME680_OK)
 8080598:	b930      	cbnz	r0, 80805a8 <bme680_set_sensor_settings+0xb6>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 808059a:	4623      	mov	r3, r4
 808059c:	2201      	movs	r2, #1
 808059e:	2070      	movs	r0, #112	; 0x70
 80805a0:	f10d 0107 	add.w	r1, sp, #7
 80805a4:	f7ff fdeb 	bl	808017e <bme680_get_regs>
			reg_array[count] = reg_addr; /* Append configuration */
 80805a8:	2170      	movs	r1, #112	; 0x70
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 80805aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80805ae:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80805b2:	f023 0308 	bic.w	r3, r3, #8
 80805b6:	f002 0208 	and.w	r2, r2, #8
 80805ba:	4313      	orrs	r3, r2
			reg_array[count] = reg_addr; /* Append configuration */
 80805bc:	aa08      	add	r2, sp, #32
 80805be:	442a      	add	r2, r5
			count++;
 80805c0:	3501      	adds	r5, #1
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 80805c2:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
 80805c6:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 80805ca:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
 80805ce:	b2ed      	uxtb	r5, r5
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
 80805d0:	07b1      	lsls	r1, r6, #30
 80805d2:	d033      	beq.n	808063c <bme680_set_sensor_settings+0x14a>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
 80805d4:	2105      	movs	r1, #5
 80805d6:	f104 0246 	add.w	r2, r4, #70	; 0x46
 80805da:	f104 0039 	add.w	r0, r4, #57	; 0x39
 80805de:	f7ff fdc2 	bl	8080166 <boundary_check.isra.0.constprop.0>
			if (rslt == BME680_OK)
 80805e2:	b930      	cbnz	r0, 80805f2 <bme680_set_sensor_settings+0x100>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80805e4:	4623      	mov	r3, r4
 80805e6:	2201      	movs	r2, #1
 80805e8:	2074      	movs	r0, #116	; 0x74
 80805ea:	f10d 0107 	add.w	r1, sp, #7
 80805ee:	f7ff fdc6 	bl	808017e <bme680_get_regs>
			if (desired_settings & BME680_OST_SEL)
 80805f2:	07f2      	lsls	r2, r6, #31
 80805f4:	d509      	bpl.n	808060a <bme680_set_sensor_settings+0x118>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
 80805f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80805fa:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80805fe:	f003 031f 	and.w	r3, r3, #31
 8080602:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8080606:	f88d 3007 	strb.w	r3, [sp, #7]
			if (desired_settings & BME680_OSP_SEL)
 808060a:	07b3      	lsls	r3, r6, #30
 808060c:	d50b      	bpl.n	8080626 <bme680_set_sensor_settings+0x134>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
 808060e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8080612:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8080616:	009b      	lsls	r3, r3, #2
 8080618:	f003 031c 	and.w	r3, r3, #28
 808061c:	f022 021c 	bic.w	r2, r2, #28
 8080620:	4313      	orrs	r3, r2
 8080622:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr;
 8080626:	2274      	movs	r2, #116	; 0x74
 8080628:	ab08      	add	r3, sp, #32
 808062a:	442b      	add	r3, r5
 808062c:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 8080630:	f89d 2007 	ldrb.w	r2, [sp, #7]
			count++;
 8080634:	3501      	adds	r5, #1
			data_array[count] = data;
 8080636:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
 808063a:	b2ed      	uxtb	r5, r5
		if (desired_settings & BME680_OSH_SEL) {
 808063c:	0771      	lsls	r1, r6, #29
 808063e:	d522      	bpl.n	8080686 <bme680_set_sensor_settings+0x194>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
 8080640:	2105      	movs	r1, #5
 8080642:	f104 0246 	add.w	r2, r4, #70	; 0x46
 8080646:	f104 0038 	add.w	r0, r4, #56	; 0x38
 808064a:	f7ff fd8c 	bl	8080166 <boundary_check.isra.0.constprop.0>
			if (rslt == BME680_OK)
 808064e:	b930      	cbnz	r0, 808065e <bme680_set_sensor_settings+0x16c>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8080650:	4623      	mov	r3, r4
 8080652:	2201      	movs	r2, #1
 8080654:	2072      	movs	r0, #114	; 0x72
 8080656:	f10d 0107 	add.w	r1, sp, #7
 808065a:	f7ff fd90 	bl	808017e <bme680_get_regs>
			reg_array[count] = reg_addr; /* Append configuration */
 808065e:	2172      	movs	r1, #114	; 0x72
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8080660:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8080664:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8080668:	f023 0307 	bic.w	r3, r3, #7
 808066c:	f002 0207 	and.w	r2, r2, #7
 8080670:	4313      	orrs	r3, r2
			reg_array[count] = reg_addr; /* Append configuration */
 8080672:	aa08      	add	r2, sp, #32
 8080674:	442a      	add	r2, r5
			count++;
 8080676:	3501      	adds	r5, #1
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8080678:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
 808067c:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 8080680:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
 8080684:	b2ed      	uxtb	r5, r5
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
 8080686:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 808068a:	d03a      	beq.n	8080702 <bme680_set_sensor_settings+0x210>
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
 808068c:	2101      	movs	r1, #1
 808068e:	f104 0246 	add.w	r2, r4, #70	; 0x46
 8080692:	f104 003e 	add.w	r0, r4, #62	; 0x3e
 8080696:	f7ff fd66 	bl	8080166 <boundary_check.isra.0.constprop.0>
			if (rslt == BME680_OK) {
 808069a:	b960      	cbnz	r0, 80806b6 <bme680_set_sensor_settings+0x1c4>
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
 808069c:	210a      	movs	r1, #10
 808069e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80806a2:	f7ff fd60 	bl	8080166 <boundary_check.isra.0.constprop.0>
			if (rslt == BME680_OK)
 80806a6:	b930      	cbnz	r0, 80806b6 <bme680_set_sensor_settings+0x1c4>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80806a8:	4623      	mov	r3, r4
 80806aa:	2201      	movs	r2, #1
 80806ac:	2071      	movs	r0, #113	; 0x71
 80806ae:	f10d 0107 	add.w	r1, sp, #7
 80806b2:	f7ff fd64 	bl	808017e <bme680_get_regs>
			if (desired_settings & BME680_RUN_GAS_SEL)
 80806b6:	0672      	lsls	r2, r6, #25
 80806b8:	d50b      	bpl.n	80806d2 <bme680_set_sensor_settings+0x1e0>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
 80806ba:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80806be:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80806c2:	011b      	lsls	r3, r3, #4
 80806c4:	f003 0310 	and.w	r3, r3, #16
 80806c8:	f022 0210 	bic.w	r2, r2, #16
 80806cc:	4313      	orrs	r3, r2
 80806ce:	f88d 3007 	strb.w	r3, [sp, #7]
			if (desired_settings & BME680_NBCONV_SEL)
 80806d2:	0633      	lsls	r3, r6, #24
 80806d4:	d50a      	bpl.n	80806ec <bme680_set_sensor_settings+0x1fa>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
 80806d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80806da:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 80806de:	f023 030f 	bic.w	r3, r3, #15
 80806e2:	f002 020f 	and.w	r2, r2, #15
 80806e6:	4313      	orrs	r3, r2
 80806e8:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
 80806ec:	2271      	movs	r2, #113	; 0x71
 80806ee:	ab08      	add	r3, sp, #32
 80806f0:	442b      	add	r3, r5
 80806f2:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 80806f6:	f89d 2007 	ldrb.w	r2, [sp, #7]
			count++;
 80806fa:	3501      	adds	r5, #1
			data_array[count] = data;
 80806fc:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
 8080700:	b2ed      	uxtb	r5, r5
		if (rslt == BME680_OK)
 8080702:	b928      	cbnz	r0, 8080710 <bme680_set_sensor_settings+0x21e>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
 8080704:	4623      	mov	r3, r4
 8080706:	462a      	mov	r2, r5
 8080708:	a906      	add	r1, sp, #24
 808070a:	a804      	add	r0, sp, #16
 808070c:	f7ff fd5b 	bl	80801c6 <bme680_set_regs>
		dev->power_mode = intended_power_mode;
 8080710:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
}
 8080714:	b009      	add	sp, #36	; 0x24
 8080716:	bdf0      	pop	{r4, r5, r6, r7, pc}
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8080718:	f8b1 2040 	ldrh.w	r2, [r1, #64]	; 0x40
 808071c:	f9b1 3012 	ldrsh.w	r3, [r1, #18]
 8080720:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
 8080724:	bf28      	it	cs
 8080726:	f44f 72c8 	movcs.w	r2, #400	; 0x190
 808072a:	2ac8      	cmp	r2, #200	; 0xc8
 808072c:	bf38      	it	cc
 808072e:	22c8      	movcc	r2, #200	; 0xc8
 8080730:	f503 3316 	add.w	r3, r3, #153600	; 0x25800
 8080734:	f203 1399 	addw	r3, r3, #409	; 0x199
 8080738:	435a      	muls	r2, r3
 808073a:	2314      	movs	r3, #20
 808073c:	fbb2 f2f3 	udiv	r2, r2, r3
 8080740:	230a      	movs	r3, #10
 8080742:	f502 1248 	add.w	r2, r2, #3276800	; 0x320000
 8080746:	fbb2 f2f3 	udiv	r2, r2, r3
 808074a:	f991 3011 	ldrsb.w	r3, [r1, #17]
	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 808074e:	f991 1004 	ldrsb.w	r1, [r1, #4]
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8080752:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8080756:	435a      	muls	r2, r3
	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 8080758:	f994 3014 	ldrsb.w	r3, [r4, #20]
 808075c:	434b      	muls	r3, r1
 808075e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8080762:	fb93 f3f1 	sdiv	r3, r3, r1
 8080766:	021b      	lsls	r3, r3, #8
	var3 = var1 + (var2 / 2);
 8080768:	eb03 0362 	add.w	r3, r3, r2, asr #1
	var4 = (var3 / (dev->calib.res_heat_range + 4));
 808076c:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
	var5 = (131 * dev->calib.res_heat_val) + 65536;
 8080770:	f994 1035 	ldrsb.w	r1, [r4, #53]	; 0x35
	var4 = (var3 / (dev->calib.res_heat_range + 4));
 8080774:	3204      	adds	r2, #4
 8080776:	fbb3 f3f2 	udiv	r3, r3, r2
	var5 = (131 * dev->calib.res_heat_val) + 65536;
 808077a:	2283      	movs	r2, #131	; 0x83
 808077c:	434a      	muls	r2, r1
 808077e:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
	heatr_res_x100 = (int32_t) (((var4 / var5) - 250) * 34);
 8080782:	fbb3 f3f2 	udiv	r3, r3, r2
 8080786:	2222      	movs	r2, #34	; 0x22
 8080788:	3bfa      	subs	r3, #250	; 0xfa
 808078a:	4353      	muls	r3, r2
	heatr_res = (uint8_t) ((heatr_res_x100 + 50) / 100);
 808078c:	2264      	movs	r2, #100	; 0x64
 808078e:	3332      	adds	r3, #50	; 0x32
 8080790:	fb93 f3f2 	sdiv	r3, r3, r2
 8080794:	f88d 300c 	strb.w	r3, [sp, #12]
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 8080798:	f246 435a 	movw	r3, #25690	; 0x645a
 808079c:	f8ad 3008 	strh.w	r3, [sp, #8]
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 80807a0:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
	if (dur >= 0xfc0) {
 80807a4:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
 80807a8:	d21a      	bcs.n	80807e0 <bme680_set_sensor_settings+0x2ee>
		while (dur > 0x3F) {
 80807aa:	2b3f      	cmp	r3, #63	; 0x3f
 80807ac:	b2c2      	uxtb	r2, r0
 80807ae:	f100 0001 	add.w	r0, r0, #1
 80807b2:	d813      	bhi.n	80807dc <bme680_set_sensor_settings+0x2ea>
		durval = (uint8_t) (dur + (factor * 64));
 80807b4:	eb03 1382 	add.w	r3, r3, r2, lsl #6
 80807b8:	b2db      	uxtb	r3, r3
			dev->gas_sett.nb_conv = 0;
 80807ba:	2500      	movs	r5, #0
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 80807bc:	f88d 300d 	strb.w	r3, [sp, #13]
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 80807c0:	2202      	movs	r2, #2
 80807c2:	4623      	mov	r3, r4
			dev->gas_sett.nb_conv = 0;
 80807c4:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 80807c8:	a903      	add	r1, sp, #12
 80807ca:	a802      	add	r0, sp, #8
 80807cc:	f7ff fcfb 	bl	80801c6 <bme680_set_regs>
		dev->power_mode = BME680_SLEEP_MODE;
 80807d0:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
		if (rslt == BME680_OK)
 80807d4:	2800      	cmp	r0, #0
 80807d6:	f47f aeb2 	bne.w	808053e <bme680_set_sensor_settings+0x4c>
 80807da:	e6a4      	b.n	8080526 <bme680_set_sensor_settings+0x34>
			dur = dur / 4;
 80807dc:	089b      	lsrs	r3, r3, #2
			factor += 1;
 80807de:	e7e4      	b.n	80807aa <bme680_set_sensor_settings+0x2b8>
		durval = 0xff; /* Max duration*/
 80807e0:	23ff      	movs	r3, #255	; 0xff
 80807e2:	e7ea      	b.n	80807ba <bme680_set_sensor_settings+0x2c8>

080807e4 <bme680_get_profile_dur>:
{
 80807e4:	b513      	push	{r0, r1, r4, lr}
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80807e6:	4b18      	ldr	r3, [pc, #96]	; (8080848 <bme680_get_profile_dur+0x64>)
{
 80807e8:	4602      	mov	r2, r0
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80807ea:	6818      	ldr	r0, [r3, #0]
 80807ec:	889b      	ldrh	r3, [r3, #4]
 80807ee:	9000      	str	r0, [sp, #0]
 80807f0:	f8ad 3004 	strh.w	r3, [sp, #4]
	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80807f4:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
 80807f8:	a802      	add	r0, sp, #8
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 80807fa:	f891 403a 	ldrb.w	r4, [r1, #58]	; 0x3a
	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80807fe:	4403      	add	r3, r0
 8080800:	f813 0c08 	ldrb.w	r0, [r3, #-8]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 8080804:	ab02      	add	r3, sp, #8
 8080806:	441c      	add	r4, r3
 8080808:	f814 3c08 	ldrb.w	r3, [r4, #-8]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 808080c:	ac02      	add	r4, sp, #8
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 808080e:	4418      	add	r0, r3
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 8080810:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 8080814:	4423      	add	r3, r4
 8080816:	f813 3c08 	ldrb.w	r3, [r3, #-8]
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 808081a:	f240 74ab 	movw	r4, #1963	; 0x7ab
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 808081e:	4403      	add	r3, r0
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 8080820:	f241 20b9 	movw	r0, #4793	; 0x12b9
 8080824:	fb04 0303 	mla	r3, r4, r3, r0
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 8080828:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808082c:	fbb3 f3f0 	udiv	r3, r3, r0
	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */
 8080830:	3301      	adds	r3, #1
	*duration = (uint16_t) tph_dur;
 8080832:	b29b      	uxth	r3, r3
 8080834:	8013      	strh	r3, [r2, #0]
	if (dev->gas_sett.run_gas) {
 8080836:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 808083a:	b118      	cbz	r0, 8080844 <bme680_get_profile_dur+0x60>
		*duration += dev->gas_sett.heatr_dur;
 808083c:	f8b1 1042 	ldrh.w	r1, [r1, #66]	; 0x42
 8080840:	440b      	add	r3, r1
 8080842:	8013      	strh	r3, [r2, #0]
}
 8080844:	b002      	add	sp, #8
 8080846:	bd10      	pop	{r4, pc}
 8080848:	08091b8c 	.word	0x08091b8c

0808084c <bme680_get_sensor_data>:
{
 808084c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080850:	4680      	mov	r8, r0
 8080852:	b089      	sub	sp, #36	; 0x24
	rslt = null_ptr_check(dev);
 8080854:	4608      	mov	r0, r1
{
 8080856:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
 8080858:	f7ff fc2d 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 808085c:	4605      	mov	r5, r0
 808085e:	2800      	cmp	r0, #0
 8080860:	f040 8158 	bne.w	8080b14 <bme680_get_sensor_data+0x2c8>
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 8080864:	9006      	str	r0, [sp, #24]
 8080866:	e9cd 0004 	strd	r0, r0, [sp, #16]
 808086a:	f8cd 001b 	str.w	r0, [sp, #27]
	rslt = null_ptr_check(dev);
 808086e:	4608      	mov	r0, r1
 8080870:	f7ff fc21 	bl	80800b6 <null_ptr_check>
 8080874:	270a      	movs	r7, #10
 8080876:	4605      	mov	r5, r0
		if (rslt == BME680_OK) {
 8080878:	2d00      	cmp	r5, #0
 808087a:	f040 8152 	bne.w	8080b22 <bme680_get_sensor_data+0x2d6>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 808087e:	4623      	mov	r3, r4
 8080880:	220f      	movs	r2, #15
 8080882:	a904      	add	r1, sp, #16
 8080884:	201d      	movs	r0, #29
 8080886:	f7ff fc7a 	bl	808017e <bme680_get_regs>
			data->status = buff[0] & BME680_NEW_DATA_MSK;
 808088a:	f89d b010 	ldrb.w	fp, [sp, #16]
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 808088e:	f99d a01e 	ldrsb.w	sl, [sp, #30]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8080892:	f89d 2018 	ldrb.w	r2, [sp, #24]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 8080896:	f00b 030f 	and.w	r3, fp, #15
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 808089a:	f00a 0120 	and.w	r1, sl, #32
			data->status = buff[0] & BME680_NEW_DATA_MSK;
 808089e:	f02b 0b7f 	bic.w	fp, fp, #127	; 0x7f
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 80808a2:	9201      	str	r2, [sp, #4]
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 80808a4:	ea4b 0101 	orr.w	r1, fp, r1
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 80808a8:	f89d 2019 	ldrb.w	r2, [sp, #25]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80808ac:	f00a 0a10 	and.w	sl, sl, #16
 80808b0:	ea41 010a 	orr.w	r1, r1, sl
 80808b4:	b249      	sxtb	r1, r1
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 80808b6:	f888 3001 	strb.w	r3, [r8, #1]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 80808ba:	9202      	str	r2, [sp, #8]
			data->meas_index = buff[1];
 80808bc:	f89d 3011 	ldrb.w	r3, [sp, #17]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80808c0:	f89d 201d 	ldrb.w	r2, [sp, #29]
			if (data->status & BME680_NEW_DATA_MSK) {
 80808c4:	2900      	cmp	r1, #0
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 80808c6:	4605      	mov	r5, r0
			data->meas_index = buff[1];
 80808c8:	f888 3002 	strb.w	r3, [r8, #2]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80808cc:	9203      	str	r2, [sp, #12]
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 80808ce:	f89d 9012 	ldrb.w	r9, [sp, #18]
 80808d2:	f89d e013 	ldrb.w	lr, [sp, #19]
				| ((uint32_t) buff[4] / 16));
 80808d6:	f89d 3014 	ldrb.w	r3, [sp, #20]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80808da:	f89d c015 	ldrb.w	ip, [sp, #21]
 80808de:	f89d 6016 	ldrb.w	r6, [sp, #22]
				| ((uint32_t) buff[7] / 16));
 80808e2:	f89d 0017 	ldrb.w	r0, [sp, #23]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80808e6:	f89d 201e 	ldrb.w	r2, [sp, #30]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80808ea:	f888 1000 	strb.w	r1, [r8]
			if (data->status & BME680_NEW_DATA_MSK) {
 80808ee:	f280 8115 	bge.w	8080b1c <bme680_get_sensor_data+0x2d0>
				| ((uint32_t) buff[7] / 16));
 80808f2:	0900      	lsrs	r0, r0, #4
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80808f4:	ea40 1606 	orr.w	r6, r0, r6, lsl #4
 80808f8:	ea46 3c0c 	orr.w	ip, r6, ip, lsl #12
	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 80808fc:	8ae6      	ldrh	r6, [r4, #22]
				| ((uint32_t) buff[4] / 16));
 80808fe:	091b      	lsrs	r3, r3, #4
	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 8080900:	0076      	lsls	r6, r6, #1
 8080902:	ebc6 0cdc 	rsb	ip, r6, ip, lsr #3
 8080906:	4660      	mov	r0, ip
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 8080908:	ea4f 065c 	mov.w	r6, ip, lsr #1
	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 808090c:	17c1      	asrs	r1, r0, #31
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 808090e:	ea46 76c1 	orr.w	r6, r6, r1, lsl #31
 8080912:	1049      	asrs	r1, r1, #1
 8080914:	4371      	muls	r1, r6
 8080916:	fba6 ab06 	umull	sl, fp, r6, r6
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 808091a:	f994 001a 	ldrsb.w	r0, [r4, #26]
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 808091e:	eb0b 0b41 	add.w	fp, fp, r1, lsl #1
 8080922:	ea4f 361a 	mov.w	r6, sl, lsr #12
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080926:	0101      	lsls	r1, r0, #4
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 8080928:	ea46 560b 	orr.w	r6, r6, fp, lsl #20
 808092c:	ea4f 372b 	mov.w	r7, fp, asr #12
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080930:	ea4f 7be1 	mov.w	fp, r1, asr #31
 8080934:	fb06 f00b 	mul.w	r0, r6, fp
 8080938:	fba6 ab01 	umull	sl, fp, r6, r1
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 808093c:	f9b4 6018 	ldrsh.w	r6, [r4, #24]
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080940:	fb01 0707 	mla	r7, r1, r7, r0
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 8080944:	fb86 010c 	smull	r0, r1, r6, ip
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080948:	44bb      	add	fp, r7
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 808094a:	0ac6      	lsrs	r6, r0, #11
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 808094c:	ea4f 309a 	mov.w	r0, sl, lsr #14
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 8080950:	ea46 5641 	orr.w	r6, r6, r1, lsl #21
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080954:	ea40 408b 	orr.w	r0, r0, fp, lsl #18
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8080958:	1831      	adds	r1, r6, r0
 808095a:	6321      	str	r1, [r4, #48]	; 0x30
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
 808095c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8080960:	3180      	adds	r1, #128	; 0x80
 8080962:	1209      	asrs	r1, r1, #8
 8080964:	f8a8 1004 	strh.w	r1, [r8, #4]
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8080968:	6b21      	ldr	r1, [r4, #48]	; 0x30
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 808096a:	ea43 1e0e 	orr.w	lr, r3, lr, lsl #4
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 808096e:	1049      	asrs	r1, r1, #1
 8080970:	f5a1 417a 	sub.w	r1, r1, #64000	; 0xfa00
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 8080974:	f640 4335 	movw	r3, #3125	; 0xc35
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8080978:	1088      	asrs	r0, r1, #2
 808097a:	4340      	muls	r0, r0
		(int32_t)dev->calib.par_p6) >> 2;
 808097c:	f994 7026 	ldrsb.w	r7, [r4, #38]	; 0x26
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8080980:	12c6      	asrs	r6, r0, #11
 8080982:	4377      	muls	r7, r6
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
 8080984:	f9b4 6024 	ldrsh.w	r6, [r4, #36]	; 0x24
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8080988:	1340      	asrs	r0, r0, #13
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
 808098a:	434e      	muls	r6, r1
 808098c:	0076      	lsls	r6, r6, #1
 808098e:	eb06 06a7 	add.w	r6, r6, r7, asr #2
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 8080992:	f9b4 701e 	ldrsh.w	r7, [r4, #30]
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 8080996:	ea4e 3909 	orr.w	r9, lr, r9, lsl #12
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 808099a:	434f      	muls	r7, r1
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 808099c:	f994 1020 	ldrsb.w	r1, [r4, #32]
	pressure_comp = 1048576 - pres_adc;
 80809a0:	f5c9 1980 	rsb	r9, r9, #1048576	; 0x100000
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 80809a4:	0149      	lsls	r1, r1, #5
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 80809a6:	4341      	muls	r1, r0
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 80809a8:	10c9      	asrs	r1, r1, #3
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 80809aa:	eb01 0167 	add.w	r1, r1, r7, asr #1
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 80809ae:	8ba0      	ldrh	r0, [r4, #28]
	var1 = var1 >> 18;
 80809b0:	1489      	asrs	r1, r1, #18
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 80809b2:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 80809b6:	4348      	muls	r0, r1
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 80809b8:	f9b4 1022 	ldrsh.w	r1, [r4, #34]	; 0x22
		((int64_t) lookupTable1[gas_range])) >> 16;
 80809bc:	f002 0c0f 	and.w	ip, r2, #15
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 80809c0:	0409      	lsls	r1, r1, #16
 80809c2:	eb01 06a6 	add.w	r6, r1, r6, asr #2
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 80809c6:	eba9 3626 	sub.w	r6, r9, r6, asr #12
 80809ca:	4373      	muls	r3, r6
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 80809cc:	13c1      	asrs	r1, r0, #15
		pressure_comp = ((pressure_comp / (uint32_t)var1) << 1);
 80809ce:	fbb3 f1f1 	udiv	r1, r3, r1
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 80809d2:	f341 009c 	sbfx	r0, r1, #2, #29
 80809d6:	4340      	muls	r0, r0
 80809d8:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
		(pressure_comp >> 3)) >> 13)) >> 12;
 80809dc:	1340      	asrs	r0, r0, #13
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 80809de:	4358      	muls	r0, r3
		(int32_t)dev->calib.par_p8) >> 13;
 80809e0:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
	var2 = ((int32_t)(pressure_comp >> 2) *
 80809e4:	f341 075d 	sbfx	r7, r1, #1, #30
 80809e8:	437b      	muls	r3, r7
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 80809ea:	f341 16d7 	sbfx	r6, r1, #7, #24
	var2 = ((int32_t)(pressure_comp >> 2) *
 80809ee:	135b      	asrs	r3, r3, #13
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 80809f0:	eb03 3320 	add.w	r3, r3, r0, asr #12
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 80809f4:	fb06 f006 	mul.w	r0, r6, r6
 80809f8:	4346      	muls	r6, r0
		(int32_t)dev->calib.par_p10) >> 17;
 80809fa:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80809fe:	0992      	lsrs	r2, r2, #6
		(int32_t)(pressure_comp >> 8) *
 8080a00:	4346      	muls	r6, r0
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8080a02:	f994 0027 	ldrsb.w	r0, [r4, #39]	; 0x27
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8080a06:	eb03 4366 	add.w	r3, r3, r6, asr #17
 8080a0a:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8080a0e:	2064      	movs	r0, #100	; 0x64
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8080a10:	111b      	asrs	r3, r3, #4
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8080a12:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				data->pressure = calc_pressure(adc_pres, dev);
 8080a16:	f8c8 3008 	str.w	r3, [r8, #8]
	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 8080a1a:	6b23      	ldr	r3, [r4, #48]	; 0x30
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8080a1c:	f994 100e 	ldrsb.w	r1, [r4, #14]
	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 8080a20:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8080a24:	3380      	adds	r3, #128	; 0x80
 8080a26:	121b      	asrs	r3, r3, #8
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8080a28:	4359      	muls	r1, r3
 8080a2a:	fb91 f1f0 	sdiv	r1, r1, r0
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8080a2e:	f994 600d 	ldrsb.w	r6, [r4, #13]
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8080a32:	4359      	muls	r1, r3
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8080a34:	435e      	muls	r6, r3
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8080a36:	1189      	asrs	r1, r1, #6
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8080a38:	fb96 f6f0 	sdiv	r6, r6, r0
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 8080a3c:	fb91 f1f0 	sdiv	r1, r1, r0
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8080a40:	4431      	add	r1, r6
	var2 = ((int32_t) dev->calib.par_h2
 8080a42:	8966      	ldrh	r6, [r4, #10]
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 8080a44:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8080a48:	4371      	muls	r1, r6
	var2 = ((int32_t) dev->calib.par_h2
 8080a4a:	128e      	asrs	r6, r1, #10
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8080a4c:	e9dd 7101 	ldrd	r7, r1, [sp, #4]
 8080a50:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8080a54:	8927      	ldrh	r7, [r4, #8]
 8080a56:	eba1 1107 	sub.w	r1, r1, r7, lsl #4
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
 8080a5a:	f994 700c 	ldrsb.w	r7, [r4, #12]
 8080a5e:	435f      	muls	r7, r3
 8080a60:	fb97 f7f0 	sdiv	r7, r7, r0
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8080a64:	eba1 0167 	sub.w	r1, r1, r7, asr #1
	var3 = var1 * var2;
 8080a68:	4371      	muls	r1, r6
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080a6a:	f994 6010 	ldrsb.w	r6, [r4, #16]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080a6e:	2700      	movs	r7, #0
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080a70:	4373      	muls	r3, r6
 8080a72:	fb93 f3f0 	sdiv	r3, r3, r0
	var4 = (int32_t) dev->calib.par_h6 << 7;
 8080a76:	7be0      	ldrb	r0, [r4, #15]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080a78:	f240 563c 	movw	r6, #1340	; 0x53c
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080a7c:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8080a80:	1388      	asrs	r0, r1, #14
 8080a82:	4340      	muls	r0, r0
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080a84:	111b      	asrs	r3, r3, #4
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8080a86:	1280      	asrs	r0, r0, #10
	var6 = (var4 * var5) >> 1;
 8080a88:	4343      	muls	r3, r0
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8080a8a:	eb01 0363 	add.w	r3, r1, r3, asr #1
 8080a8e:	1299      	asrs	r1, r3, #10
 8080a90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080a94:	434b      	muls	r3, r1
				data->humidity = calc_humidity(adc_hum, dev);
 8080a96:	492b      	ldr	r1, [pc, #172]	; (8080b44 <bme680_get_sensor_data+0x2f8>)
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8080a98:	131b      	asrs	r3, r3, #12
 8080a9a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
				data->humidity = calc_humidity(adc_hum, dev);
 8080a9e:	428b      	cmp	r3, r1
 8080aa0:	bfd4      	ite	le
 8080aa2:	f8c8 300c 	strle.w	r3, [r8, #12]
 8080aa6:	f8c8 100c 	strgt.w	r1, [r8, #12]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080aaa:	2105      	movs	r1, #5
 8080aac:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
 8080ab0:	fbc3 6701 	smlal	r6, r7, r3, r1
		((int64_t) lookupTable1[gas_range])) >> 16;
 8080ab4:	4b24      	ldr	r3, [pc, #144]	; (8080b48 <bme680_get_sensor_data+0x2fc>)
 8080ab6:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080aba:	fba6 0103 	umull	r0, r1, r6, r3
 8080abe:	fb03 1107 	mla	r1, r3, r7, r1
 8080ac2:	0c06      	lsrs	r6, r0, #16
 8080ac4:	ea4f 4e21 	mov.w	lr, r1, asr #16
 8080ac8:	ea46 4601 	orr.w	r6, r6, r1, lsl #16
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080acc:	2100      	movs	r1, #0
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 8080ace:	9b03      	ldr	r3, [sp, #12]
 8080ad0:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080ad4:	03d3      	lsls	r3, r2, #15
 8080ad6:	f113 437f 	adds.w	r3, r3, #4278190080	; 0xff000000
 8080ada:	f141 31ff 	adc.w	r1, r1, #4294967295
 8080ade:	199a      	adds	r2, r3, r6
 8080ae0:	eb41 030e 	adc.w	r3, r1, lr
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 8080ae4:	4919      	ldr	r1, [pc, #100]	; (8080b4c <bme680_get_sensor_data+0x300>)
 8080ae6:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8080aea:	fba1 6706 	umull	r6, r7, r1, r6
 8080aee:	fb01 770e 	mla	r7, r1, lr, r7
 8080af2:	0a70      	lsrs	r0, r6, #9
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 8080af4:	0856      	lsrs	r6, r2, #1
 8080af6:	ea46 76c3 	orr.w	r6, r6, r3, lsl #31
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 8080afa:	ea40 50c7 	orr.w	r0, r0, r7, lsl #23
 8080afe:	ea4f 2c67 	mov.w	ip, r7, asr #9
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 8080b02:	1059      	asrs	r1, r3, #1
 8080b04:	1980      	adds	r0, r0, r6
 8080b06:	eb4c 0101 	adc.w	r1, ip, r1
 8080b0a:	f00d fc39 	bl	808e380 <__aeabi_ldivmod>
 8080b0e:	f8c8 0010 	str.w	r0, [r8, #16]
		if (rslt == BME680_OK) {
 8080b12:	b16d      	cbz	r5, 8080b30 <bme680_get_sensor_data+0x2e4>
}
 8080b14:	4628      	mov	r0, r5
 8080b16:	b009      	add	sp, #36	; 0x24
 8080b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dev->delay_ms(BME680_POLL_PERIOD_MS);
 8080b1c:	200a      	movs	r0, #10
 8080b1e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8080b20:	4798      	blx	r3
	} while (tries);
 8080b22:	3f01      	subs	r7, #1
 8080b24:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8080b28:	f47f aea6 	bne.w	8080878 <bme680_get_sensor_data+0x2c>
		rslt = BME680_W_NO_NEW_DATA;
 8080b2c:	2502      	movs	r5, #2
	return rslt;
 8080b2e:	e7f1      	b.n	8080b14 <bme680_get_sensor_data+0x2c8>
			if (data->status & BME680_NEW_DATA_MSK)
 8080b30:	f998 3000 	ldrsb.w	r3, [r8]
 8080b34:	2b00      	cmp	r3, #0
				dev->new_fields = 1;
 8080b36:	bfb6      	itet	lt
 8080b38:	2301      	movlt	r3, #1
				dev->new_fields = 0;
 8080b3a:	f884 5045 	strbge.w	r5, [r4, #69]	; 0x45
				dev->new_fields = 1;
 8080b3e:	f884 3045 	strblt.w	r3, [r4, #69]	; 0x45
				dev->new_fields = 0;
 8080b42:	e7e7      	b.n	8080b14 <bme680_get_sensor_data+0x2c8>
 8080b44:	000186a0 	.word	0x000186a0
 8080b48:	20000000 	.word	0x20000000
 8080b4c:	20000040 	.word	0x20000040

08080b50 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 8080b50:	4770      	bx	lr

08080b52 <_ZN4File9availableEv>:
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
 8080b52:	4602      	mov	r2, r0
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
 8080b54:	7c03      	ldrb	r3, [r0, #16]
 8080b56:	f013 0008 	ands.w	r0, r3, #8
 8080b5a:	bf1e      	ittt	ne
 8080b5c:	6a50      	ldrne	r0, [r2, #36]	; 0x24
 8080b5e:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
 8080b60:	1a18      	subne	r0, r3, r0
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
 8080b62:	2800      	cmp	r0, #0
  }
 8080b64:	bfb8      	it	lt
 8080b66:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
 8080b6a:	4770      	bx	lr

08080b6c <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 8080b6c:	4770      	bx	lr

08080b6e <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
 8080b6e:	4770      	bx	lr

08080b70 <_ZN6SdFileD0Ev>:
 8080b70:	b510      	push	{r4, lr}
 8080b72:	4604      	mov	r4, r0
 8080b74:	212c      	movs	r1, #44	; 0x2c
 8080b76:	f00c fbf8 	bl	808d36a <_ZdlPvj>
 8080b7a:	4620      	mov	r0, r4
 8080b7c:	bd10      	pop	{r4, pc}

08080b7e <_ZN4FileD0Ev>:
 8080b7e:	b510      	push	{r4, lr}
 8080b80:	4604      	mov	r4, r0
 8080b82:	2134      	movs	r1, #52	; 0x34
 8080b84:	f00c fbf1 	bl	808d36a <_ZdlPvj>
 8080b88:	4620      	mov	r0, r4
 8080b8a:	bd10      	pop	{r4, pc}

08080b8c <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
 8080b8c:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 8080b8e:	2201      	movs	r2, #1
 8080b90:	f10d 0107 	add.w	r1, sp, #7
 8080b94:	3010      	adds	r0, #16
 8080b96:	f007 fd45 	bl	8088624 <_ZN7FatFile4readEPvj>
 8080b9a:	2801      	cmp	r0, #1
 8080b9c:	bf14      	ite	ne
 8080b9e:	f04f 30ff 	movne.w	r0, #4294967295
 8080ba2:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    return FatFile::read();
  }
 8080ba6:	b003      	add	sp, #12
 8080ba8:	f85d fb04 	ldr.w	pc, [sp], #4

08080bac <_ZN4File5flushEv>:
    FatFile::sync();
 8080bac:	3010      	adds	r0, #16
 8080bae:	f007 beb9 	b.w	8088924 <_ZN7FatFile4syncEv>

08080bb2 <_ZN4File4peekEv>:
    return FatFile::peek();
 8080bb2:	3010      	adds	r0, #16
 8080bb4:	f007 bde5 	b.w	8088782 <_ZN7FatFile4peekEv>

08080bb8 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
 8080bb8:	3010      	adds	r0, #16
 8080bba:	f007 bf3d 	b.w	8088a38 <_ZN7FatFile5writeEPKvj>

08080bbe <_ZN9PrintFile5writeEPKhj>:
    return FatFile::write(buf, size);
 8080bbe:	3008      	adds	r0, #8
 8080bc0:	f007 bf3a 	b.w	8088a38 <_ZN7FatFile5writeEPKvj>

08080bc4 <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
 8080bc4:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
 8080bc6:	2201      	movs	r2, #1
 8080bc8:	f88d 1007 	strb.w	r1, [sp, #7]
 8080bcc:	3010      	adds	r0, #16
 8080bce:	f10d 0107 	add.w	r1, sp, #7
 8080bd2:	f007 ff31 	bl	8088a38 <_ZN7FatFile5writeEPKvj>
  }
 8080bd6:	b003      	add	sp, #12
 8080bd8:	f85d fb04 	ldr.w	pc, [sp], #4

08080bdc <_Z16locationCallbackfff>:
    Log.info("System version: %s", (const char*)System.version());
    

}

void locationCallback(float lat, float lon, float accuracy) {
 8080bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080be0:	b087      	sub	sp, #28
 8080be2:	4692      	mov	sl, r2
 8080be4:	460c      	mov	r4, r1
 8080be6:	4605      	mov	r5, r0
  // Handle the returned location data for the device. This method is passed three arguments:
  // - Latitude
  // - Longitude
  // - Accuracy of estimated location (in meters)
  Serial.println("google geolocation:");
 8080be8:	f00b ff10 	bl	808ca0c <_Z16_fetch_usbserialv>
 8080bec:	492f      	ldr	r1, [pc, #188]	; (8080cac <_Z16locationCallbackfff+0xd0>)
 8080bee:	f00a fe52 	bl	808b896 <_ZN5Print7printlnEPKc>
  Serial.printlnf("Latitude:%f, longitude:%f, acc:%f", lat, lon, accuracy);
 8080bf2:	f00b ff0b 	bl	808ca0c <_Z16_fetch_usbserialv>
 8080bf6:	4683      	mov	fp, r0
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
 8080bf8:	4628      	mov	r0, r5
 8080bfa:	f00c fd27 	bl	808d64c <__aeabi_f2d>
 8080bfe:	4680      	mov	r8, r0
 8080c00:	4620      	mov	r0, r4
 8080c02:	4689      	mov	r9, r1
 8080c04:	f00c fd22 	bl	808d64c <__aeabi_f2d>
 8080c08:	4606      	mov	r6, r0
 8080c0a:	4650      	mov	r0, sl
 8080c0c:	460f      	mov	r7, r1
 8080c0e:	f00c fd1d 	bl	808d64c <__aeabi_f2d>
 8080c12:	4604      	mov	r4, r0
 8080c14:	460d      	mov	r5, r1
 8080c16:	4a26      	ldr	r2, [pc, #152]	; (8080cb0 <_Z16locationCallbackfff+0xd4>)
 8080c18:	2101      	movs	r1, #1
 8080c1a:	4658      	mov	r0, fp
 8080c1c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8080c20:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8080c24:	e9cd 8900 	strd	r8, r9, [sp]
 8080c28:	f00a ff42 	bl	808bab0 <_ZN5Print11printf_implEbPKcz>
  snprintf(geolocation_latitude, sizeof(geolocation_latitude), "%.6f", lat);
 8080c2c:	210c      	movs	r1, #12
 8080c2e:	4a21      	ldr	r2, [pc, #132]	; (8080cb4 <_Z16locationCallbackfff+0xd8>)
 8080c30:	e9cd 8900 	strd	r8, r9, [sp]
 8080c34:	4820      	ldr	r0, [pc, #128]	; (8080cb8 <_Z16locationCallbackfff+0xdc>)
 8080c36:	f009 fffd 	bl	808ac34 <snprintf>
  snprintf(geolocation_longitude, sizeof(geolocation_longitude), "%.6f", lon);
 8080c3a:	210d      	movs	r1, #13
 8080c3c:	4a1d      	ldr	r2, [pc, #116]	; (8080cb4 <_Z16locationCallbackfff+0xd8>)
 8080c3e:	e9cd 6700 	strd	r6, r7, [sp]
 8080c42:	481e      	ldr	r0, [pc, #120]	; (8080cbc <_Z16locationCallbackfff+0xe0>)
 8080c44:	f009 fff6 	bl	808ac34 <snprintf>
  snprintf(geolocation_accuracy, sizeof(geolocation_accuracy), "%3.2f", accuracy);
 8080c48:	4a1d      	ldr	r2, [pc, #116]	; (8080cc0 <_Z16locationCallbackfff+0xe4>)
 8080c4a:	2106      	movs	r1, #6
 8080c4c:	e9cd 4500 	strd	r4, r5, [sp]
 8080c50:	481c      	ldr	r0, [pc, #112]	; (8080cc4 <_Z16locationCallbackfff+0xe8>)
 8080c52:	f009 ffef 	bl	808ac34 <snprintf>
  if(gps.get_latitude() == 0){
 8080c56:	481c      	ldr	r0, [pc, #112]	; (8080cc8 <_Z16locationCallbackfff+0xec>)
 8080c58:	f006 fbf0 	bl	808743c <_ZN3GPS12get_latitudeEv>
 8080c5c:	2200      	movs	r2, #0
 8080c5e:	2300      	movs	r3, #0
 8080c60:	f00c ffb4 	bl	808dbcc <__aeabi_dcmpeq>
 8080c64:	b168      	cbz	r0, 8080c82 <_Z16locationCallbackfff+0xa6>
      status_word.status_int |= 0x0008;
 8080c66:	4d19      	ldr	r5, [pc, #100]	; (8080ccc <_Z16locationCallbackfff+0xf0>)
      status_word.status_int &= 0xFFF3;
      if(accuracy < 2){
 8080c68:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8080c6c:	882c      	ldrh	r4, [r5, #0]
 8080c6e:	4650      	mov	r0, sl
 8080c70:	f024 040c 	bic.w	r4, r4, #12
 8080c74:	b2a4      	uxth	r4, r4
 8080c76:	f00d fb35 	bl	808e2e4 <__aeabi_fcmplt>
 8080c7a:	b128      	cbz	r0, 8080c88 <_Z16locationCallbackfff+0xac>
          status_word.status_int |= 0x000C;
 8080c7c:	f044 040c 	orr.w	r4, r4, #12
      }else if(accuracy < 5){
          status_word.status_int |= 0x0008;
      }else if(accuracy < 20){
          status_word.status_int |= 0x0004;
 8080c80:	802c      	strh	r4, [r5, #0]
      }
  }
}
 8080c82:	b007      	add	sp, #28
 8080c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      }else if(accuracy < 5){
 8080c88:	4650      	mov	r0, sl
 8080c8a:	4911      	ldr	r1, [pc, #68]	; (8080cd0 <_Z16locationCallbackfff+0xf4>)
 8080c8c:	f00d fb2a 	bl	808e2e4 <__aeabi_fcmplt>
 8080c90:	b110      	cbz	r0, 8080c98 <_Z16locationCallbackfff+0xbc>
          status_word.status_int |= 0x0008;
 8080c92:	f044 0408 	orr.w	r4, r4, #8
 8080c96:	e7f3      	b.n	8080c80 <_Z16locationCallbackfff+0xa4>
      }else if(accuracy < 20){
 8080c98:	4650      	mov	r0, sl
 8080c9a:	490e      	ldr	r1, [pc, #56]	; (8080cd4 <_Z16locationCallbackfff+0xf8>)
 8080c9c:	f00d fb22 	bl	808e2e4 <__aeabi_fcmplt>
 8080ca0:	2800      	cmp	r0, #0
 8080ca2:	d0ed      	beq.n	8080c80 <_Z16locationCallbackfff+0xa4>
          status_word.status_int |= 0x0004;
 8080ca4:	f044 0404 	orr.w	r4, r4, #4
 8080ca8:	e7ea      	b.n	8080c80 <_Z16locationCallbackfff+0xa4>
 8080caa:	bf00      	nop
 8080cac:	08091b92 	.word	0x08091b92
 8080cb0:	08091ba6 	.word	0x08091ba6
 8080cb4:	08091bc8 	.word	0x08091bc8
 8080cb8:	200000aa 	.word	0x200000aa
 8080cbc:	200000b6 	.word	0x200000b6
 8080cc0:	08091bcd 	.word	0x08091bcd
 8080cc4:	200000a4 	.word	0x200000a4
 8080cc8:	20000720 	.word	0x20000720
 8080ccc:	20000cf8 	.word	0x20000cf8
 8080cd0:	40a00000 	.word	0x40a00000
 8080cd4:	41a00000 	.word	0x41a00000

08080cd8 <_ZN9SdFatBase11writeBlocksEmPKhj>:
  }
  bool readBlocks(uint32_t block, uint8_t* dst, size_t n) {
    return m_sdCard.readBlocks(block, dst, n);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t n) {
    return m_sdCard.writeBlocks(block, src, n);
 8080cd8:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080cdc:	f007 bb09 	b.w	80882f2 <_ZN9SdSpiCard11writeBlocksEmPKhj>

08080ce0 <_ZN9SdFatBase10readBlocksEmPhj>:
    return m_sdCard.readBlocks(block, dst, n);
 8080ce0:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080ce4:	f007 ba3d 	b.w	8088162 <_ZN9SdSpiCard10readBlocksEmPhj>

08080ce8 <_ZN9SdFatBase10writeBlockEmPKh>:
    return m_sdCard.writeBlock(block, src);
 8080ce8:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080cec:	f007 ba7b 	b.w	80881e6 <_ZN9SdSpiCard10writeBlockEmPKh>

08080cf0 <_ZN9SdFatBase9readBlockEmPh>:
    return m_sdCard.readBlock(block, dst);
 8080cf0:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080cf4:	f007 b9ed 	b.w	80880d2 <_ZN9SdSpiCard9readBlockEmPh>

08080cf8 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 8080cf8:	b510      	push	{r4, lr}
 8080cfa:	4604      	mov	r4, r0
        if (wakeupSource_) {
 8080cfc:	6800      	ldr	r0, [r0, #0]
 8080cfe:	b108      	cbz	r0, 8080d04 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 8080d00:	f009 ff68 	bl	808abd4 <free>
class SystemClass {
 8080d04:	4620      	mov	r0, r4
 8080d06:	bd10      	pop	{r4, pc}

08080d08 <_ZN9TimeClass7timeStrEv.isra.0>:
  static void endDST();
  /* Returns true if DST is in effect (beginDST() was called previously) */
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
 8080d08:	b510      	push	{r4, lr}
 8080d0a:	4604      	mov	r4, r0
        {
                return timeStr(now());
 8080d0c:	f00b f935 	bl	808bf7a <_ZN9TimeClass3nowEv>
 8080d10:	4602      	mov	r2, r0
 8080d12:	460b      	mov	r3, r1
 8080d14:	4620      	mov	r0, r4
 8080d16:	f00b f82d 	bl	808bd74 <_ZN9TimeClass7timeStrEx>
        }
 8080d1a:	4620      	mov	r0, r4
 8080d1c:	bd10      	pop	{r4, pc}

08080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>:
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
 8080d1e:	b510      	push	{r4, lr}
 8080d20:	460c      	mov	r4, r1
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 8080d22:	2204      	movs	r2, #4
 8080d24:	f009 fcb6 	bl	808a694 <HAL_EEPROM_Put>
        return t;
    }
 8080d28:	4620      	mov	r0, r4
 8080d2a:	bd10      	pop	{r4, pc}

08080d2c <_Z20remoteReadStoredVars6String>:
    uint16_t tempValue = 0;
 8080d2c:	2300      	movs	r3, #0
int remoteReadStoredVars(String mem_address){
 8080d2e:	b513      	push	{r0, r1, r4, lr}
    uint16_t tempValue = 0;
 8080d30:	f8ad 3006 	strh.w	r3, [sp, #6]
    int numerical_mem_address = mem_address.toInt();
 8080d34:	f00a fd4e 	bl	808b7d4 <_ZNK6String5toIntEv>
    if(numerical_mem_address >= 0 && numerical_mem_address <= MAX_MEM_ADDRESS){
 8080d38:	2890      	cmp	r0, #144	; 0x90
    int numerical_mem_address = mem_address.toInt();
 8080d3a:	4604      	mov	r4, r0
    if(numerical_mem_address >= 0 && numerical_mem_address <= MAX_MEM_ADDRESS){
 8080d3c:	d80b      	bhi.n	8080d56 <_Z20remoteReadStoredVars6String+0x2a>
        EEPROM.get(numerical_mem_address, tempValue);
 8080d3e:	f00c fa6d 	bl	808d21c <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 8080d42:	4620      	mov	r0, r4
 8080d44:	2202      	movs	r2, #2
 8080d46:	f10d 0106 	add.w	r1, sp, #6
 8080d4a:	f009 fc9b 	bl	808a684 <HAL_EEPROM_Get>
        return tempValue;
 8080d4e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
 8080d52:	b002      	add	sp, #8
 8080d54:	bd10      	pop	{r4, pc}
        return -1;
 8080d56:	f04f 30ff 	mov.w	r0, #4294967295
 8080d5a:	e7fa      	b.n	8080d52 <_Z20remoteReadStoredVars6String+0x26>

08080d5c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>:
    template <typename T> T &get( int idx, T &t )
 8080d5c:	b510      	push	{r4, lr}
 8080d5e:	460c      	mov	r4, r1
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 8080d60:	2204      	movs	r2, #4
 8080d62:	f009 fc8f 	bl	808a684 <HAL_EEPROM_Get>
    }
 8080d66:	4620      	mov	r0, r4
 8080d68:	bd10      	pop	{r4, pc}

08080d6a <_ZN9PrintFile5writeEh>:
  size_t write(uint8_t b) {
 8080d6a:	b507      	push	{r0, r1, r2, lr}
 8080d6c:	2201      	movs	r2, #1
 8080d6e:	f88d 1007 	strb.w	r1, [sp, #7]
 8080d72:	3008      	adds	r0, #8
 8080d74:	f10d 0107 	add.w	r1, sp, #7
 8080d78:	f007 fe5e 	bl	8088a38 <_ZN7FatFile5writeEPKvj>
  }
 8080d7c:	b003      	add	sp, #12
 8080d7e:	f85d fb04 	ldr.w	pc, [sp], #4

08080d82 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 8080d82:	2300      	movs	r3, #0
 8080d84:	6840      	ldr	r0, [r0, #4]
 8080d86:	461a      	mov	r2, r3
 8080d88:	4619      	mov	r1, r3
 8080d8a:	f009 beab 	b.w	808aae4 <network_off>

08080d8e <_ZN11USARTSerialD0Ev>:
 8080d8e:	b510      	push	{r4, lr}
 8080d90:	4604      	mov	r4, r0
 8080d92:	2114      	movs	r1, #20
 8080d94:	f00c fae9 	bl	808d36a <_ZdlPvj>
 8080d98:	4620      	mov	r0, r4
 8080d9a:	bd10      	pop	{r4, pc}

08080d9c <_ZN5spark10JSONWriter4nameEPKc>:
// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
}

inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
 8080d9c:	b538      	push	{r3, r4, r5, lr}
 8080d9e:	4605      	mov	r5, r0
    return this->name(name, strlen(name));
 8080da0:	4608      	mov	r0, r1
inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
 8080da2:	460c      	mov	r4, r1
    return this->name(name, strlen(name));
 8080da4:	f00e fc26 	bl	808f5f4 <strlen>
 8080da8:	4621      	mov	r1, r4
 8080daa:	4602      	mov	r2, r0
 8080dac:	4628      	mov	r0, r5
}
 8080dae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return this->name(name, strlen(name));
 8080db2:	f00c b97b 	b.w	808d0ac <_ZN5spark10JSONWriter4nameEPKcj>

08080db6 <_ZN5spark10JSONWriter5valueERK6String>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
}

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
 8080db6:	688a      	ldr	r2, [r1, #8]
 8080db8:	6809      	ldr	r1, [r1, #0]
 8080dba:	f00c b986 	b.w	808d0ca <_ZN5spark10JSONWriter5valueEPKcj>

08080dbe <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 8080dbe:	b40e      	push	{r1, r2, r3}
 8080dc0:	b510      	push	{r4, lr}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 8080dc2:	2300      	movs	r3, #0
    log(LOG_LEVEL_INFO, fmt, args);
 8080dc4:	6801      	ldr	r1, [r0, #0]
    attr.flags = 0;
 8080dc6:	2020      	movs	r0, #32
inline void spark::Logger::info(const char *fmt, ...) const {
 8080dc8:	b08d      	sub	sp, #52	; 0x34
 8080dca:	aa0f      	add	r2, sp, #60	; 0x3c
 8080dcc:	f852 4b04 	ldr.w	r4, [r2], #4
    attr.flags = 0;
 8080dd0:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080dd4:	e9cd 4200 	strd	r4, r2, [sp]
    va_start(args, fmt);
 8080dd8:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080dda:	201e      	movs	r0, #30
 8080ddc:	aa04      	add	r2, sp, #16
 8080dde:	f009 fde1 	bl	808a9a4 <log_message_v>
}
 8080de2:	b00d      	add	sp, #52	; 0x34
 8080de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8080de8:	b003      	add	sp, #12
 8080dea:	4770      	bx	lr

08080dec <_Z22__fetch_global_Serial4v>:
// instantiate Serial4
static hal_usart_ring_buffer_t serial4_rx_buffer;
static hal_usart_ring_buffer_t serial4_tx_buffer;

USARTSerial& __fetch_global_Serial4()
{
 8080dec:	b510      	push	{r4, lr}
	static USARTSerial serial4(HAL_USART_SERIAL4, &serial4_rx_buffer, &serial4_tx_buffer);
 8080dee:	4c0d      	ldr	r4, [pc, #52]	; (8080e24 <_Z22__fetch_global_Serial4v+0x38>)
 8080df0:	7823      	ldrb	r3, [r4, #0]
 8080df2:	f3bf 8f5b 	dmb	ish
 8080df6:	07db      	lsls	r3, r3, #31
 8080df8:	d411      	bmi.n	8080e1e <_Z22__fetch_global_Serial4v+0x32>
 8080dfa:	4620      	mov	r0, r4
 8080dfc:	f7ff f953 	bl	80800a6 <__cxa_guard_acquire>
 8080e00:	b168      	cbz	r0, 8080e1e <_Z22__fetch_global_Serial4v+0x32>
 8080e02:	2103      	movs	r1, #3
 8080e04:	4a08      	ldr	r2, [pc, #32]	; (8080e28 <_Z22__fetch_global_Serial4v+0x3c>)
 8080e06:	4b09      	ldr	r3, [pc, #36]	; (8080e2c <_Z22__fetch_global_Serial4v+0x40>)
 8080e08:	4809      	ldr	r0, [pc, #36]	; (8080e30 <_Z22__fetch_global_Serial4v+0x44>)
 8080e0a:	f00b ff29 	bl	808cc60 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 8080e0e:	4620      	mov	r0, r4
 8080e10:	f7ff f94e 	bl	80800b0 <__cxa_guard_release>
 8080e14:	4a07      	ldr	r2, [pc, #28]	; (8080e34 <_Z22__fetch_global_Serial4v+0x48>)
 8080e16:	4908      	ldr	r1, [pc, #32]	; (8080e38 <_Z22__fetch_global_Serial4v+0x4c>)
 8080e18:	4805      	ldr	r0, [pc, #20]	; (8080e30 <_Z22__fetch_global_Serial4v+0x44>)
 8080e1a:	f00c faa1 	bl	808d360 <__aeabi_atexit>
	return serial4;
}
 8080e1e:	4804      	ldr	r0, [pc, #16]	; (8080e30 <_Z22__fetch_global_Serial4v+0x44>)
 8080e20:	bd10      	pop	{r4, pc}
 8080e22:	bf00      	nop
 8080e24:	2000038c 	.word	0x2000038c
 8080e28:	20000398 	.word	0x20000398
 8080e2c:	2000041c 	.word	0x2000041c
 8080e30:	200005ac 	.word	0x200005ac
 8080e34:	20000328 	.word	0x20000328
 8080e38:	08080b51 	.word	0x08080b51

08080e3c <_Z15serialEventRun4v>:

void serialEventRun4()
{
 8080e3c:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial4, serialEvent4);
 8080e3e:	f7ff ffd5 	bl	8080dec <_Z22__fetch_global_Serial4v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 8080e42:	4b07      	ldr	r3, [pc, #28]	; (8080e60 <_Z15serialEventRun4v+0x24>)
 8080e44:	4604      	mov	r4, r0
 8080e46:	b153      	cbz	r3, 8080e5e <_Z15serialEventRun4v+0x22>
 8080e48:	f00b ff27 	bl	808cc9a <_ZN11USARTSerial9isEnabledEv>
 8080e4c:	b138      	cbz	r0, 8080e5e <_Z15serialEventRun4v+0x22>
 8080e4e:	6823      	ldr	r3, [r4, #0]
 8080e50:	4620      	mov	r0, r4
 8080e52:	691b      	ldr	r3, [r3, #16]
 8080e54:	4798      	blx	r3
 8080e56:	2800      	cmp	r0, #0
 8080e58:	dd01      	ble.n	8080e5e <_Z15serialEventRun4v+0x22>
        handler();
 8080e5a:	f3af 8000 	nop.w
}
 8080e5e:	bd10      	pop	{r4, pc}
 8080e60:	00000000 	.word	0x00000000

08080e64 <_Z22__fetch_global_Serial5v>:
// instantiate Serial5
static hal_usart_ring_buffer_t serial5_rx_buffer;
static hal_usart_ring_buffer_t serial5_tx_buffer;

USARTSerial& __fetch_global_Serial5()
{
 8080e64:	b510      	push	{r4, lr}
	static USARTSerial serial5(HAL_USART_SERIAL5, &serial5_rx_buffer, &serial5_tx_buffer);
 8080e66:	4c0d      	ldr	r4, [pc, #52]	; (8080e9c <_Z22__fetch_global_Serial5v+0x38>)
 8080e68:	7823      	ldrb	r3, [r4, #0]
 8080e6a:	f3bf 8f5b 	dmb	ish
 8080e6e:	07db      	lsls	r3, r3, #31
 8080e70:	d411      	bmi.n	8080e96 <_Z22__fetch_global_Serial5v+0x32>
 8080e72:	4620      	mov	r0, r4
 8080e74:	f7ff f917 	bl	80800a6 <__cxa_guard_acquire>
 8080e78:	b168      	cbz	r0, 8080e96 <_Z22__fetch_global_Serial5v+0x32>
 8080e7a:	2104      	movs	r1, #4
 8080e7c:	4a08      	ldr	r2, [pc, #32]	; (8080ea0 <_Z22__fetch_global_Serial5v+0x3c>)
 8080e7e:	4b09      	ldr	r3, [pc, #36]	; (8080ea4 <_Z22__fetch_global_Serial5v+0x40>)
 8080e80:	4809      	ldr	r0, [pc, #36]	; (8080ea8 <_Z22__fetch_global_Serial5v+0x44>)
 8080e82:	f00b feed 	bl	808cc60 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 8080e86:	4620      	mov	r0, r4
 8080e88:	f7ff f912 	bl	80800b0 <__cxa_guard_release>
 8080e8c:	4a07      	ldr	r2, [pc, #28]	; (8080eac <_Z22__fetch_global_Serial5v+0x48>)
 8080e8e:	4908      	ldr	r1, [pc, #32]	; (8080eb0 <_Z22__fetch_global_Serial5v+0x4c>)
 8080e90:	4805      	ldr	r0, [pc, #20]	; (8080ea8 <_Z22__fetch_global_Serial5v+0x44>)
 8080e92:	f00c fa65 	bl	808d360 <__aeabi_atexit>
	return serial5;
}
 8080e96:	4804      	ldr	r0, [pc, #16]	; (8080ea8 <_Z22__fetch_global_Serial5v+0x44>)
 8080e98:	bd10      	pop	{r4, pc}
 8080e9a:	bf00      	nop
 8080e9c:	20000390 	.word	0x20000390
 8080ea0:	200004a0 	.word	0x200004a0
 8080ea4:	20000524 	.word	0x20000524
 8080ea8:	200005c0 	.word	0x200005c0
 8080eac:	20000328 	.word	0x20000328
 8080eb0:	08080b51 	.word	0x08080b51

08080eb4 <_Z15serialEventRun5v>:


void serialEventRun5()
{
 8080eb4:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial5, serialEvent5);
 8080eb6:	f7ff ffd5 	bl	8080e64 <_Z22__fetch_global_Serial5v>
    if (handler && serial.isEnabled() && serial.available()>0)
 8080eba:	4b07      	ldr	r3, [pc, #28]	; (8080ed8 <_Z15serialEventRun5v+0x24>)
 8080ebc:	4604      	mov	r4, r0
 8080ebe:	b153      	cbz	r3, 8080ed6 <_Z15serialEventRun5v+0x22>
 8080ec0:	f00b feeb 	bl	808cc9a <_ZN11USARTSerial9isEnabledEv>
 8080ec4:	b138      	cbz	r0, 8080ed6 <_Z15serialEventRun5v+0x22>
 8080ec6:	6823      	ldr	r3, [r4, #0]
 8080ec8:	4620      	mov	r0, r4
 8080eca:	691b      	ldr	r3, [r3, #16]
 8080ecc:	4798      	blx	r3
 8080ece:	2800      	cmp	r0, #0
 8080ed0:	dd01      	ble.n	8080ed6 <_Z15serialEventRun5v+0x22>
        handler();
 8080ed2:	f3af 8000 	nop.w
}
 8080ed6:	bd10      	pop	{r4, pc}
 8080ed8:	00000000 	.word	0x00000000

08080edc <_ZN9SdFatBase5beginEP9SdSpiBasehh>:
  bool begin(SdSpiCard::m_spi_t* spi, uint8_t csPin = SS, uint8_t divisor = 2) {
 8080edc:	b538      	push	{r3, r4, r5, lr}
 8080ede:	4604      	mov	r4, r0
    return m_sdCard.begin(spi, csPin, divisor) &&
 8080ee0:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080ee4:	f007 f864 	bl	8087fb0 <_ZN9SdSpiCard5beginEP9SdSpiBasehh>
 8080ee8:	b908      	cbnz	r0, 8080eee <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x12>
 8080eea:	2000      	movs	r0, #0
  }
 8080eec:	bd38      	pop	{r3, r4, r5, pc}
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
 8080eee:	f504 6588 	add.w	r5, r4, #1088	; 0x440
    vwd()->close();
 8080ef2:	4628      	mov	r0, r5
 8080ef4:	f007 fd4c 	bl	8088990 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
 8080ef8:	2101      	movs	r1, #1
 8080efa:	4620      	mov	r0, r4
 8080efc:	f007 ff7b 	bl	8088df6 <_ZN9FatVolume4initEh>
 8080f00:	4601      	mov	r1, r0
 8080f02:	b168      	cbz	r0, 8080f20 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x44>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
 8080f04:	4621      	mov	r1, r4
 8080f06:	4628      	mov	r0, r5
 8080f08:	f007 fb73 	bl	80885f2 <_ZN7FatFile8openRootEP9FatVolume>
 8080f0c:	2800      	cmp	r0, #0
 8080f0e:	d0ec      	beq.n	8080eea <_ZN9SdFatBase5beginEP9SdSpiBasehh+0xe>
    if (!dir->isDir()) {
 8080f10:	f894 3440 	ldrb.w	r3, [r4, #1088]	; 0x440
 8080f14:	f013 0f70 	tst.w	r3, #112	; 0x70
 8080f18:	d0e7      	beq.n	8080eea <_ZN9SdFatBase5beginEP9SdSpiBasehh+0xe>
    m_cwd = dir;
 8080f1a:	4b04      	ldr	r3, [pc, #16]	; (8080f2c <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x50>)
 8080f1c:	601d      	str	r5, [r3, #0]
    return true;
 8080f1e:	e7e5      	b.n	8080eec <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x10>
    return (part ? init(part) : init(1) || init(0))
 8080f20:	4620      	mov	r0, r4
 8080f22:	f007 ff68 	bl	8088df6 <_ZN9FatVolume4initEh>
 8080f26:	2800      	cmp	r0, #0
 8080f28:	d1ec      	bne.n	8080f04 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x28>
 8080f2a:	e7de      	b.n	8080eea <_ZN9SdFatBase5beginEP9SdSpiBasehh+0xe>
 8080f2c:	20000d5c 	.word	0x20000d5c

08080f30 <_Z13writeRegisterhh>:
void writeRegister(uint8_t reg, uint8_t value) {
 8080f30:	b538      	push	{r3, r4, r5, lr}
 8080f32:	460c      	mov	r4, r1
 8080f34:	4605      	mov	r5, r0
    Wire3.beginTransmission(PMIC_ADDRESS);
 8080f36:	f00c f9eb 	bl	808d310 <_Z20__fetch_global_Wire3v>
 8080f3a:	216b      	movs	r1, #107	; 0x6b
 8080f3c:	f00b ff60 	bl	808ce00 <_ZN7TwoWire17beginTransmissionEi>
    Wire3.write(reg);
 8080f40:	f00c f9e6 	bl	808d310 <_Z20__fetch_global_Wire3v>
 8080f44:	6803      	ldr	r3, [r0, #0]
 8080f46:	4629      	mov	r1, r5
 8080f48:	689b      	ldr	r3, [r3, #8]
 8080f4a:	4798      	blx	r3
    Wire3.write(value);
 8080f4c:	f00c f9e0 	bl	808d310 <_Z20__fetch_global_Wire3v>
 8080f50:	6803      	ldr	r3, [r0, #0]
 8080f52:	4621      	mov	r1, r4
 8080f54:	689b      	ldr	r3, [r3, #8]
 8080f56:	4798      	blx	r3
    Wire3.endTransmission(true);
 8080f58:	f00c f9da 	bl	808d310 <_Z20__fetch_global_Wire3v>
}
 8080f5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire3.endTransmission(true);
 8080f60:	2101      	movs	r1, #1
 8080f62:	f00b bf68 	b.w	808ce36 <_ZN7TwoWire15endTransmissionEh>
	...

08080f68 <_Z20writeDefaultSettingsv>:
void writeDefaultSettings(void){
 8080f68:	b537      	push	{r0, r1, r2, r4, r5, lr}
    EEPROM.put(DEVICE_ID_MEM_ADDRESS, 1555);
 8080f6a:	f00c f957 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8080f6e:	f240 6313 	movw	r3, #1555	; 0x613
    EEPROM.put(CO2_SLOPE_MEM_ADDRESS, 100);
 8080f72:	2564      	movs	r5, #100	; 0x64
    EEPROM.put(CO2_ZERO_MEM_ADDRESS, 0);
 8080f74:	2400      	movs	r4, #0
    EEPROM.put(DEVICE_ID_MEM_ADDRESS, 1555);
 8080f76:	a901      	add	r1, sp, #4
 8080f78:	2000      	movs	r0, #0
 8080f7a:	9301      	str	r3, [sp, #4]
 8080f7c:	f7ff fecf 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(CO2_SLOPE_MEM_ADDRESS, 100);
 8080f80:	f00c f94c 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8080f84:	a901      	add	r1, sp, #4
 8080f86:	2008      	movs	r0, #8
 8080f88:	9501      	str	r5, [sp, #4]
 8080f8a:	f7ff fec8 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(CO_SLOPE_MEM_ADDRESS, 100);
 8080f8e:	f00c f945 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8080f92:	a901      	add	r1, sp, #4
 8080f94:	2010      	movs	r0, #16
 8080f96:	9501      	str	r5, [sp, #4]
 8080f98:	f7ff fec1 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PM_1_SLOPE_MEM_ADDRESS, 100);
 8080f9c:	f00c f93e 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8080fa0:	a901      	add	r1, sp, #4
 8080fa2:	2018      	movs	r0, #24
 8080fa4:	9501      	str	r5, [sp, #4]
 8080fa6:	f7ff feba 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PM_25_SLOPE_MEM_ADDRESS, 100);
 8080faa:	f00c f937 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8080fae:	a901      	add	r1, sp, #4
 8080fb0:	2020      	movs	r0, #32
 8080fb2:	9501      	str	r5, [sp, #4]
 8080fb4:	f7ff feb3 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PM_10_SLOPE_MEM_ADDRESS, 100);
 8080fb8:	f00c f930 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8080fbc:	a901      	add	r1, sp, #4
 8080fbe:	2028      	movs	r0, #40	; 0x28
 8080fc0:	9501      	str	r5, [sp, #4]
 8080fc2:	f7ff feac 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, 100);
 8080fc6:	f00c f929 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8080fca:	a901      	add	r1, sp, #4
 8080fcc:	2030      	movs	r0, #48	; 0x30
 8080fce:	9501      	str	r5, [sp, #4]
 8080fd0:	f7ff fea5 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, 100);
 8080fd4:	f00c f922 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8080fd8:	a901      	add	r1, sp, #4
 8080fda:	2038      	movs	r0, #56	; 0x38
 8080fdc:	9501      	str	r5, [sp, #4]
 8080fde:	f7ff fe9e 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(RH_SLOPE_MEM_ADDRESS, 100);
 8080fe2:	f00c f91b 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8080fe6:	a901      	add	r1, sp, #4
 8080fe8:	2040      	movs	r0, #64	; 0x40
 8080fea:	9501      	str	r5, [sp, #4]
 8080fec:	f7ff fe97 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(CO2_ZERO_MEM_ADDRESS, 0);
 8080ff0:	f00c f914 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8080ff4:	a901      	add	r1, sp, #4
 8080ff6:	2004      	movs	r0, #4
 8080ff8:	9401      	str	r4, [sp, #4]
 8080ffa:	f7ff fe90 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(CO_ZERO_MEM_ADDRESS, 0);
 8080ffe:	f00c f90d 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8081002:	a901      	add	r1, sp, #4
 8081004:	200c      	movs	r0, #12
 8081006:	9401      	str	r4, [sp, #4]
 8081008:	f7ff fe89 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PM_1_ZERO_MEM_ADDRESS, 0);
 808100c:	f00c f906 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8081010:	a901      	add	r1, sp, #4
 8081012:	2014      	movs	r0, #20
 8081014:	9401      	str	r4, [sp, #4]
 8081016:	f7ff fe82 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PM_25_ZERO_MEM_ADDRESS, 0);
 808101a:	f00c f8ff 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 808101e:	a901      	add	r1, sp, #4
 8081020:	201c      	movs	r0, #28
 8081022:	9401      	str	r4, [sp, #4]
 8081024:	f7ff fe7b 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PM_10_ZERO_MEM_ADDRESS, 0);
 8081028:	f00c f8f8 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 808102c:	a901      	add	r1, sp, #4
 808102e:	2024      	movs	r0, #36	; 0x24
 8081030:	9401      	str	r4, [sp, #4]
 8081032:	f7ff fe74 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(TEMP_ZERO_MEM_ADDRESS, 0);
 8081036:	f00c f8f1 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 808103a:	a901      	add	r1, sp, #4
 808103c:	202c      	movs	r0, #44	; 0x2c
 808103e:	9401      	str	r4, [sp, #4]
 8081040:	f7ff fe6d 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PRESSURE_ZERO_MEM_ADDRESS, 0);
 8081044:	f00c f8ea 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8081048:	a901      	add	r1, sp, #4
 808104a:	2034      	movs	r0, #52	; 0x34
 808104c:	9401      	str	r4, [sp, #4]
 808104e:	f7ff fe66 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(RH_ZERO_MEM_ADDRESS, 0);
 8081052:	f00c f8e3 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8081056:	a901      	add	r1, sp, #4
 8081058:	203c      	movs	r0, #60	; 0x3c
 808105a:	9401      	str	r4, [sp, #4]
 808105c:	f7ff fe5f 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(SERIAL_CELLULAR_EN_MEM_ADDRESS, 0);
 8081060:	f00c f8dc 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8081064:	a901      	add	r1, sp, #4
 8081066:	2044      	movs	r0, #68	; 0x44
 8081068:	9401      	str	r4, [sp, #4]
 808106a:	f7ff fe58 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, 0);
 808106e:	f00c f8d5 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8081072:	a901      	add	r1, sp, #4
 8081074:	2048      	movs	r0, #72	; 0x48
 8081076:	9401      	str	r4, [sp, #4]
 8081078:	f7ff fe51 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(OZONE_EN_MEM_ADDRESS, 0);
 808107c:	f00c f8ce 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8081080:	a901      	add	r1, sp, #4
 8081082:	2058      	movs	r0, #88	; 0x58
 8081084:	9401      	str	r4, [sp, #4]
 8081086:	f7ff fe4a 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(VOC_EN_MEM_ADDRESS, voc_enabled);
 808108a:	f00c f8c7 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 808108e:	4941      	ldr	r1, [pc, #260]	; (8081194 <_Z20writeDefaultSettingsv+0x22c>)
 8081090:	205c      	movs	r0, #92	; 0x5c
 8081092:	f7ff fe44 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(GAS_LOWER_LIMIT_MEM_ADDRESS, 1000);
 8081096:	f00c f8c1 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 808109a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808109e:	a901      	add	r1, sp, #4
 80810a0:	204c      	movs	r0, #76	; 0x4c
 80810a2:	9301      	str	r3, [sp, #4]
 80810a4:	f7ff fe3b 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(GAS_UPPER_LIMIT_MEM_ADDRESS, 10000);
 80810a8:	f00c f8b8 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 80810ac:	f242 7310 	movw	r3, #10000	; 0x2710
 80810b0:	a901      	add	r1, sp, #4
 80810b2:	2050      	movs	r0, #80	; 0x50
 80810b4:	9301      	str	r3, [sp, #4]
 80810b6:	f7ff fe32 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(TIME_ZONE_MEM_ADDRESS, -7);
 80810ba:	f00c f8af 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 80810be:	f06f 0306 	mvn.w	r3, #6
 80810c2:	a901      	add	r1, sp, #4
 80810c4:	2054      	movs	r0, #84	; 0x54
 80810c6:	9301      	str	r3, [sp, #4]
 80810c8:	f7ff fe29 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    Time.zone(tempValue);
 80810cc:	4b32      	ldr	r3, [pc, #200]	; (8081198 <_Z20writeDefaultSettingsv+0x230>)
 80810ce:	6818      	ldr	r0, [r3, #0]
 80810d0:	f00c ff16 	bl	808df00 <__aeabi_i2f>
 80810d4:	f00a fe1c 	bl	808bd10 <_ZN9TimeClass4zoneEf>
    EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, 0);
 80810d8:	f00c f8a0 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 80810dc:	a901      	add	r1, sp, #4
 80810de:	2060      	movs	r0, #96	; 0x60
 80810e0:	9401      	str	r4, [sp, #4]
 80810e2:	f7ff fe1c 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, 0);
 80810e6:	f00c f899 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 80810ea:	4628      	mov	r0, r5
    EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, 1);
 80810ec:	2501      	movs	r5, #1
    EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, 0);
 80810ee:	a901      	add	r1, sp, #4
 80810f0:	9401      	str	r4, [sp, #4]
 80810f2:	f7ff fe14 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, 1);
 80810f6:	f00c f891 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 80810fa:	a901      	add	r1, sp, #4
 80810fc:	2068      	movs	r0, #104	; 0x68
 80810fe:	9501      	str	r5, [sp, #4]
 8081100:	f7ff fe0d 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(OZONE_A_OR_D_MEM_ADDRESS, 0);
 8081104:	f00c f88a 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8081108:	a901      	add	r1, sp, #4
 808110a:	206c      	movs	r0, #108	; 0x6c
 808110c:	9401      	str	r4, [sp, #4]
 808110e:	f7ff fe06 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(OZONE_OFFSET_MEM_ADDRESS,0);
 8081112:	f00c f883 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8081116:	a901      	add	r1, sp, #4
 8081118:	2070      	movs	r0, #112	; 0x70
 808111a:	9401      	str	r4, [sp, #4]
 808111c:	f7ff fdff 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(MEASUREMENTS_TO_AVG_MEM_ADDRESS, 1);
 8081120:	f00c f87c 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8081124:	a901      	add	r1, sp, #4
 8081126:	2074      	movs	r0, #116	; 0x74
 8081128:	9501      	str	r5, [sp, #4]
 808112a:	f7ff fdf8 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, 1);
 808112e:	f00c f875 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8081132:	a901      	add	r1, sp, #4
 8081134:	2078      	movs	r0, #120	; 0x78
 8081136:	9501      	str	r5, [sp, #4]
 8081138:	f7ff fdf1 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(ABC_ENABLE_MEM_ADDRESS, 0);
 808113c:	f00c f86e 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8081140:	a901      	add	r1, sp, #4
 8081142:	207c      	movs	r0, #124	; 0x7c
 8081144:	9401      	str	r4, [sp, #4]
 8081146:	f7ff fdea 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(HIH8120_ENABLE_MEM_ADDRESS, 1);
 808114a:	f00c f867 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 808114e:	a901      	add	r1, sp, #4
 8081150:	2080      	movs	r0, #128	; 0x80
 8081152:	9501      	str	r5, [sp, #4]
 8081154:	f7ff fde3 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(CO_SOCKET_MEM_ADDRESS, 0);
 8081158:	f00c f860 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 808115c:	a901      	add	r1, sp, #4
 808115e:	2084      	movs	r0, #132	; 0x84
 8081160:	9401      	str	r4, [sp, #4]
 8081162:	f7ff fddc 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(GOOGLE_LOCATION_MEM_ADDRESS, 0);
 8081166:	f00c f859 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 808116a:	a901      	add	r1, sp, #4
 808116c:	2088      	movs	r0, #136	; 0x88
 808116e:	9401      	str	r4, [sp, #4]
 8081170:	f7ff fdd5 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(SENSIBLEIOT_ENABLE_MEM_ADDRESS, 0);
 8081174:	f00c f852 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8081178:	a901      	add	r1, sp, #4
 808117a:	208c      	movs	r0, #140	; 0x8c
 808117c:	9401      	str	r4, [sp, #4]
 808117e:	f7ff fdce 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, 0);
 8081182:	f00c f84b 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8081186:	a901      	add	r1, sp, #4
 8081188:	2090      	movs	r0, #144	; 0x90
 808118a:	9401      	str	r4, [sp, #4]
 808118c:	f7ff fdc7 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
}
 8081190:	b003      	add	sp, #12
 8081192:	bd30      	pop	{r4, r5, pc}
 8081194:	20000d10 	.word	0x20000d10
 8081198:	20000cfc 	.word	0x20000cfc

0808119c <_Z14readStoredVarsv>:
void readStoredVars(void){
 808119c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    EEPROM.get(DEVICE_ID_MEM_ADDRESS, DEVICE_id);
 80811a0:	4cb6      	ldr	r4, [pc, #728]	; (808147c <_Z14readStoredVarsv+0x2e0>)
 80811a2:	f00c f83b 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 80811a6:	4621      	mov	r1, r4
 80811a8:	2000      	movs	r0, #0
 80811aa:	f7ff fdd7 	bl	8080d5c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    if(DEVICE_id == -1){
 80811ae:	6823      	ldr	r3, [r4, #0]
 80811b0:	3301      	adds	r3, #1
 80811b2:	d104      	bne.n	80811be <_Z14readStoredVarsv+0x22>
        DEVICE_id = 1555;
 80811b4:	f240 6313 	movw	r3, #1555	; 0x613
 80811b8:	6023      	str	r3, [r4, #0]
        writeDefaultSettings();
 80811ba:	f7ff fed5 	bl	8080f68 <_Z20writeDefaultSettingsv>
    EEPROM.get(CO2_SLOPE_MEM_ADDRESS, tempValue);
 80811be:	f00c f82d 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 80811c2:	a901      	add	r1, sp, #4
 80811c4:	2008      	movs	r0, #8
 80811c6:	f7ff fdc9 	bl	8080d5c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    CO2_slope = tempValue;
 80811ca:	9801      	ldr	r0, [sp, #4]
 80811cc:	f00c fe98 	bl	808df00 <__aeabi_i2f>
    CO2_slope /= 100;
 80811d0:	49ab      	ldr	r1, [pc, #684]	; (8081480 <_Z14readStoredVarsv+0x2e4>)
 80811d2:	f00c ff9d 	bl	808e110 <__aeabi_fdiv>
 80811d6:	f8df 8330 	ldr.w	r8, [pc, #816]	; 8081508 <_Z14readStoredVarsv+0x36c>
    CO_slope /= 100;
 80811da:	4faa      	ldr	r7, [pc, #680]	; (8081484 <_Z14readStoredVarsv+0x2e8>)
    CO2_slope /= 100;
 80811dc:	f8c8 0000 	str.w	r0, [r8]
    EEPROM.get(CO_SLOPE_MEM_ADDRESS, tempValue);
 80811e0:	f00c f81c 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 80811e4:	a901      	add	r1, sp, #4
 80811e6:	2010      	movs	r0, #16
 80811e8:	f7ff fdb8 	bl	8080d5c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    CO_slope = tempValue;
 80811ec:	9801      	ldr	r0, [sp, #4]
 80811ee:	f00c fe87 	bl	808df00 <__aeabi_i2f>
    CO_slope /= 100;
 80811f2:	49a3      	ldr	r1, [pc, #652]	; (8081480 <_Z14readStoredVarsv+0x2e4>)
 80811f4:	f00c ff8c 	bl	808e110 <__aeabi_fdiv>
 80811f8:	6038      	str	r0, [r7, #0]
    EEPROM.get(PM_1_SLOPE_MEM_ADDRESS, tempValue);
 80811fa:	f00c f80f 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 80811fe:	a901      	add	r1, sp, #4
 8081200:	2018      	movs	r0, #24
 8081202:	f7ff fdab 	bl	8080d5c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    PM_1_slope = tempValue;
 8081206:	9801      	ldr	r0, [sp, #4]
 8081208:	f00c fe7a 	bl	808df00 <__aeabi_i2f>
    PM_1_slope /= 100;
 808120c:	499c      	ldr	r1, [pc, #624]	; (8081480 <_Z14readStoredVarsv+0x2e4>)
 808120e:	f00c ff7f 	bl	808e110 <__aeabi_fdiv>
 8081212:	4e9d      	ldr	r6, [pc, #628]	; (8081488 <_Z14readStoredVarsv+0x2ec>)
    PM_25_slope /= 100;
 8081214:	4d9d      	ldr	r5, [pc, #628]	; (808148c <_Z14readStoredVarsv+0x2f0>)
    PM_1_slope /= 100;
 8081216:	6030      	str	r0, [r6, #0]
    EEPROM.get(PM_25_SLOPE_MEM_ADDRESS, tempValue);
 8081218:	f00c f800 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 808121c:	a901      	add	r1, sp, #4
 808121e:	2020      	movs	r0, #32
 8081220:	f7ff fd9c 	bl	8080d5c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    PM_25_slope = tempValue;
 8081224:	9801      	ldr	r0, [sp, #4]
 8081226:	f00c fe6b 	bl	808df00 <__aeabi_i2f>
    PM_25_slope /= 100;
 808122a:	4995      	ldr	r1, [pc, #596]	; (8081480 <_Z14readStoredVarsv+0x2e4>)
 808122c:	f00c ff70 	bl	808e110 <__aeabi_fdiv>
 8081230:	6028      	str	r0, [r5, #0]
    EEPROM.get(PM_10_SLOPE_MEM_ADDRESS, tempValue);
 8081232:	f00b fff3 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8081236:	a901      	add	r1, sp, #4
 8081238:	2028      	movs	r0, #40	; 0x28
 808123a:	f7ff fd8f 	bl	8080d5c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    PM_10_slope = tempValue;
 808123e:	9801      	ldr	r0, [sp, #4]
 8081240:	f00c fe5e 	bl	808df00 <__aeabi_i2f>
    PM_10_slope /= 100;
 8081244:	498e      	ldr	r1, [pc, #568]	; (8081480 <_Z14readStoredVarsv+0x2e4>)
 8081246:	f00c ff63 	bl	808e110 <__aeabi_fdiv>
 808124a:	4c91      	ldr	r4, [pc, #580]	; (8081490 <_Z14readStoredVarsv+0x2f4>)
    EEPROM.get(SENSIBLEIOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 808124c:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 808150c <_Z14readStoredVarsv+0x370>
    PM_10_slope /= 100;
 8081250:	6020      	str	r0, [r4, #0]
    EEPROM.get(TEMP_SLOPE_MEM_ADDRESS, tempValue);  //temperature
 8081252:	f00b ffe3 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8081256:	a901      	add	r1, sp, #4
 8081258:	2030      	movs	r0, #48	; 0x30
 808125a:	f7ff fd7f 	bl	8080d5c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    temp_slope = tempValue;
 808125e:	9801      	ldr	r0, [sp, #4]
 8081260:	f00c fe4e 	bl	808df00 <__aeabi_i2f>
    temp_slope /= 100;
 8081264:	4986      	ldr	r1, [pc, #536]	; (8081480 <_Z14readStoredVarsv+0x2e4>)
 8081266:	f00c ff53 	bl	808e110 <__aeabi_fdiv>
 808126a:	4b8a      	ldr	r3, [pc, #552]	; (8081494 <_Z14readStoredVarsv+0x2f8>)
 808126c:	6018      	str	r0, [r3, #0]
    EEPROM.get(PRESSURE_SLOPE_MEM_ADDRESS, tempValue);
 808126e:	f00b ffd5 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8081272:	a901      	add	r1, sp, #4
 8081274:	2038      	movs	r0, #56	; 0x38
 8081276:	f7ff fd71 	bl	8080d5c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    pressure_slope = tempValue;
 808127a:	9801      	ldr	r0, [sp, #4]
 808127c:	f00c fe40 	bl	808df00 <__aeabi_i2f>
    pressure_slope /= 100;
 8081280:	497f      	ldr	r1, [pc, #508]	; (8081480 <_Z14readStoredVarsv+0x2e4>)
 8081282:	f00c ff45 	bl	808e110 <__aeabi_fdiv>
 8081286:	4b84      	ldr	r3, [pc, #528]	; (8081498 <_Z14readStoredVarsv+0x2fc>)
 8081288:	6018      	str	r0, [r3, #0]
    EEPROM.get(RH_SLOPE_MEM_ADDRESS, tempValue);
 808128a:	f00b ffc7 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 808128e:	a901      	add	r1, sp, #4
 8081290:	2040      	movs	r0, #64	; 0x40
 8081292:	f7ff fd63 	bl	8080d5c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    rh_slope = tempValue;
 8081296:	9801      	ldr	r0, [sp, #4]
 8081298:	f00c fe32 	bl	808df00 <__aeabi_i2f>
    rh_slope /= 100;
 808129c:	4978      	ldr	r1, [pc, #480]	; (8081480 <_Z14readStoredVarsv+0x2e4>)
 808129e:	f00c ff37 	bl	808e110 <__aeabi_fdiv>
 80812a2:	4b7e      	ldr	r3, [pc, #504]	; (808149c <_Z14readStoredVarsv+0x300>)
 80812a4:	6018      	str	r0, [r3, #0]
    EEPROM.get(CO2_ZERO_MEM_ADDRESS, CO2_zero);
 80812a6:	f00b ffb9 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 80812aa:	497d      	ldr	r1, [pc, #500]	; (80814a0 <_Z14readStoredVarsv+0x304>)
 80812ac:	2004      	movs	r0, #4
 80812ae:	f7ff fd55 	bl	8080d5c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(CO_ZERO_MEM_ADDRESS, CO_zero);
 80812b2:	f00b ffb3 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 80812b6:	497b      	ldr	r1, [pc, #492]	; (80814a4 <_Z14readStoredVarsv+0x308>)
 80812b8:	200c      	movs	r0, #12
 80812ba:	f7ff fd4f 	bl	8080d5c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(PM_1_ZERO_MEM_ADDRESS, PM_1_zero);
 80812be:	f00b ffad 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 80812c2:	4979      	ldr	r1, [pc, #484]	; (80814a8 <_Z14readStoredVarsv+0x30c>)
 80812c4:	2014      	movs	r0, #20
 80812c6:	f7ff fd49 	bl	8080d5c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(PM_25_ZERO_MEM_ADDRESS, PM_25_zero);
 80812ca:	f00b ffa7 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 80812ce:	4977      	ldr	r1, [pc, #476]	; (80814ac <_Z14readStoredVarsv+0x310>)
 80812d0:	201c      	movs	r0, #28
 80812d2:	f7ff fd43 	bl	8080d5c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(PM_10_ZERO_MEM_ADDRESS, PM_10_zero);
 80812d6:	f00b ffa1 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 80812da:	4975      	ldr	r1, [pc, #468]	; (80814b0 <_Z14readStoredVarsv+0x314>)
 80812dc:	2024      	movs	r0, #36	; 0x24
 80812de:	f7ff fd3d 	bl	8080d5c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(TEMP_ZERO_MEM_ADDRESS, temp_zero);
 80812e2:	f00b ff9b 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 80812e6:	4973      	ldr	r1, [pc, #460]	; (80814b4 <_Z14readStoredVarsv+0x318>)
 80812e8:	202c      	movs	r0, #44	; 0x2c
 80812ea:	f7ff fd37 	bl	8080d5c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(PRESSURE_ZERO_MEM_ADDRESS, pressure_zero);
 80812ee:	f00b ff95 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 80812f2:	4971      	ldr	r1, [pc, #452]	; (80814b8 <_Z14readStoredVarsv+0x31c>)
 80812f4:	2034      	movs	r0, #52	; 0x34
 80812f6:	f7ff fd31 	bl	8080d5c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(RH_ZERO_MEM_ADDRESS, rh_zero);
 80812fa:	f00b ff8f 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 80812fe:	496f      	ldr	r1, [pc, #444]	; (80814bc <_Z14readStoredVarsv+0x320>)
 8081300:	203c      	movs	r0, #60	; 0x3c
 8081302:	f7ff fd2b 	bl	8080d5c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(SERIAL_CELLULAR_EN_MEM_ADDRESS, serial_cellular_enabled);
 8081306:	f00b ff89 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 808130a:	496d      	ldr	r1, [pc, #436]	; (80814c0 <_Z14readStoredVarsv+0x324>)
 808130c:	2044      	movs	r0, #68	; 0x44
 808130e:	f7ff fd25 	bl	8080d5c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
 8081312:	f00b ff83 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8081316:	496b      	ldr	r1, [pc, #428]	; (80814c4 <_Z14readStoredVarsv+0x328>)
 8081318:	2048      	movs	r0, #72	; 0x48
 808131a:	f7ff fd1f 	bl	8080d5c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(OZONE_EN_MEM_ADDRESS, ozone_enabled);
 808131e:	f00b ff7d 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8081322:	4969      	ldr	r1, [pc, #420]	; (80814c8 <_Z14readStoredVarsv+0x32c>)
 8081324:	2058      	movs	r0, #88	; 0x58
 8081326:	f7ff fd19 	bl	8080d5c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(VOC_EN_MEM_ADDRESS, voc_enabled);
 808132a:	f00b ff77 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 808132e:	4967      	ldr	r1, [pc, #412]	; (80814cc <_Z14readStoredVarsv+0x330>)
 8081330:	205c      	movs	r0, #92	; 0x5c
 8081332:	f7ff fd13 	bl	8080d5c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(GAS_LOWER_LIMIT_MEM_ADDRESS, gas_lower_limit);
 8081336:	f00b ff71 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 808133a:	4965      	ldr	r1, [pc, #404]	; (80814d0 <_Z14readStoredVarsv+0x334>)
 808133c:	204c      	movs	r0, #76	; 0x4c
 808133e:	f7ff fd0d 	bl	8080d5c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(GAS_UPPER_LIMIT_MEM_ADDRESS, gas_upper_limit);
 8081342:	f00b ff6b 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8081346:	4963      	ldr	r1, [pc, #396]	; (80814d4 <_Z14readStoredVarsv+0x338>)
 8081348:	2050      	movs	r0, #80	; 0x50
 808134a:	f7ff fd07 	bl	8080d5c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(TIME_ZONE_MEM_ADDRESS, tempValue);
 808134e:	f00b ff65 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8081352:	a901      	add	r1, sp, #4
 8081354:	2054      	movs	r0, #84	; 0x54
 8081356:	f7ff fd01 	bl	8080d5c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    Time.zone(tempValue);
 808135a:	9801      	ldr	r0, [sp, #4]
 808135c:	f00c fdd0 	bl	808df00 <__aeabi_i2f>
 8081360:	f00a fcd6 	bl	808bd10 <_ZN9TimeClass4zoneEf>
    EEPROM.get(TEMPERATURE_UNITS_MEM_ADDRESS, temperature_units);
 8081364:	f00b ff5a 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8081368:	495b      	ldr	r1, [pc, #364]	; (80814d8 <_Z14readStoredVarsv+0x33c>)
 808136a:	2060      	movs	r0, #96	; 0x60
 808136c:	f7ff fcf6 	bl	8080d5c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(OUTPUT_PARTICLES_MEM_ADDRESS, output_only_particles);
 8081370:	f00b ff54 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8081374:	4959      	ldr	r1, [pc, #356]	; (80814dc <_Z14readStoredVarsv+0x340>)
 8081376:	2064      	movs	r0, #100	; 0x64
 8081378:	f7ff fcf0 	bl	8080d5c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, new_temperature_sensor_enabled);
 808137c:	f00b ff4e 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8081380:	4957      	ldr	r1, [pc, #348]	; (80814e0 <_Z14readStoredVarsv+0x344>)
 8081382:	2068      	movs	r0, #104	; 0x68
 8081384:	f7ff fcea 	bl	8080d5c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(OZONE_A_OR_D_MEM_ADDRESS, ozone_analog_enabled);
 8081388:	f00b ff48 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 808138c:	4955      	ldr	r1, [pc, #340]	; (80814e4 <_Z14readStoredVarsv+0x348>)
 808138e:	206c      	movs	r0, #108	; 0x6c
 8081390:	f7ff fce4 	bl	8080d5c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(OZONE_OFFSET_MEM_ADDRESS, ozone_offset);
 8081394:	f00b ff42 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8081398:	4953      	ldr	r1, [pc, #332]	; (80814e8 <_Z14readStoredVarsv+0x34c>)
 808139a:	2070      	movs	r0, #112	; 0x70
 808139c:	f7ff fcde 	bl	8080d5c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(MEASUREMENTS_TO_AVG_MEM_ADDRESS, measurements_to_average);
 80813a0:	f00b ff3c 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 80813a4:	4951      	ldr	r1, [pc, #324]	; (80814ec <_Z14readStoredVarsv+0x350>)
 80813a6:	2074      	movs	r0, #116	; 0x74
 80813a8:	f7ff fcd8 	bl	8080d5c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
 80813ac:	f00b ff36 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 80813b0:	494f      	ldr	r1, [pc, #316]	; (80814f0 <_Z14readStoredVarsv+0x354>)
 80813b2:	2078      	movs	r0, #120	; 0x78
 80813b4:	f7ff fcd2 	bl	8080d5c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 80813b8:	f00b ff30 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 80813bc:	494d      	ldr	r1, [pc, #308]	; (80814f4 <_Z14readStoredVarsv+0x358>)
 80813be:	207c      	movs	r0, #124	; 0x7c
 80813c0:	f7ff fccc 	bl	8080d5c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);
 80813c4:	f00b ff2a 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 80813c8:	494b      	ldr	r1, [pc, #300]	; (80814f8 <_Z14readStoredVarsv+0x35c>)
 80813ca:	2080      	movs	r0, #128	; 0x80
 80813cc:	f7ff fcc6 	bl	8080d5c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(CO_SOCKET_MEM_ADDRESS, CO_socket);
 80813d0:	f00b ff24 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 80813d4:	4949      	ldr	r1, [pc, #292]	; (80814fc <_Z14readStoredVarsv+0x360>)
 80813d6:	2084      	movs	r0, #132	; 0x84
 80813d8:	f7ff fcc0 	bl	8080d5c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
 80813dc:	f00b ff1e 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 80813e0:	4947      	ldr	r1, [pc, #284]	; (8081500 <_Z14readStoredVarsv+0x364>)
 80813e2:	2088      	movs	r0, #136	; 0x88
 80813e4:	f7ff fcba 	bl	8080d5c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(SENSIBLEIOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 80813e8:	f00b ff18 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 80813ec:	4649      	mov	r1, r9
 80813ee:	208c      	movs	r0, #140	; 0x8c
 80813f0:	f7ff fcb4 	bl	8080d5c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(CAR_TOPPER_POWER_MEM_ADDRESS, car_topper_power_en);
 80813f4:	f00b ff12 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 80813f8:	2090      	movs	r0, #144	; 0x90
 80813fa:	4942      	ldr	r1, [pc, #264]	; (8081504 <_Z14readStoredVarsv+0x368>)
 80813fc:	f7ff fcae 	bl	8080d5c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    if(sensible_iot_en){
 8081400:	f8d9 3000 	ldr.w	r3, [r9]
 8081404:	b113      	cbz	r3, 808140c <_Z14readStoredVarsv+0x270>
        Time.zone(0);       //use UTC if using sensible iot upload
 8081406:	2000      	movs	r0, #0
 8081408:	f00a fc82 	bl	808bd10 <_ZN9TimeClass4zoneEf>
    if(measurements_to_average < 1 || measurements_to_average > 5000)
 808140c:	f241 3187 	movw	r1, #4999	; 0x1387
 8081410:	4a36      	ldr	r2, [pc, #216]	; (80814ec <_Z14readStoredVarsv+0x350>)
    if(!CO2_slope)
 8081412:	f8d8 0000 	ldr.w	r0, [r8]
    if(measurements_to_average < 1 || measurements_to_average > 5000)
 8081416:	6813      	ldr	r3, [r2, #0]
 8081418:	3b01      	subs	r3, #1
 808141a:	428b      	cmp	r3, r1
        measurements_to_average = 1;
 808141c:	bf88      	it	hi
 808141e:	2301      	movhi	r3, #1
    if(!CO2_slope)
 8081420:	f04f 0100 	mov.w	r1, #0
        measurements_to_average = 1;
 8081424:	bf88      	it	hi
 8081426:	6013      	strhi	r3, [r2, #0]
    if(!CO2_slope)
 8081428:	f00c ff52 	bl	808e2d0 <__aeabi_fcmpeq>
 808142c:	b118      	cbz	r0, 8081436 <_Z14readStoredVarsv+0x29a>
        CO2_slope = 1;
 808142e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8081432:	f8c8 3000 	str.w	r3, [r8]
    if(!CO_slope)
 8081436:	2100      	movs	r1, #0
 8081438:	6838      	ldr	r0, [r7, #0]
 808143a:	f00c ff49 	bl	808e2d0 <__aeabi_fcmpeq>
 808143e:	b110      	cbz	r0, 8081446 <_Z14readStoredVarsv+0x2aa>
        CO_slope = 1;
 8081440:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8081444:	603b      	str	r3, [r7, #0]
    if(!PM_1_slope)
 8081446:	2100      	movs	r1, #0
 8081448:	6830      	ldr	r0, [r6, #0]
 808144a:	f00c ff41 	bl	808e2d0 <__aeabi_fcmpeq>
 808144e:	b110      	cbz	r0, 8081456 <_Z14readStoredVarsv+0x2ba>
        PM_1_slope = 1;
 8081450:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8081454:	6033      	str	r3, [r6, #0]
    if(!PM_25_slope)
 8081456:	2100      	movs	r1, #0
 8081458:	6828      	ldr	r0, [r5, #0]
 808145a:	f00c ff39 	bl	808e2d0 <__aeabi_fcmpeq>
 808145e:	b110      	cbz	r0, 8081466 <_Z14readStoredVarsv+0x2ca>
        PM_25_slope = 1;
 8081460:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8081464:	602b      	str	r3, [r5, #0]
    if(!PM_10_slope)
 8081466:	2100      	movs	r1, #0
 8081468:	6820      	ldr	r0, [r4, #0]
 808146a:	f00c ff31 	bl	808e2d0 <__aeabi_fcmpeq>
 808146e:	b110      	cbz	r0, 8081476 <_Z14readStoredVarsv+0x2da>
        PM_10_slope = 1;
 8081470:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8081474:	6023      	str	r3, [r4, #0]
}
 8081476:	b003      	add	sp, #12
 8081478:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808147c:	20000080 	.word	0x20000080
 8081480:	42c80000 	.word	0x42c80000
 8081484:	20000344 	.word	0x20000344
 8081488:	20000370 	.word	0x20000370
 808148c:	20000378 	.word	0x20000378
 8081490:	20000368 	.word	0x20000368
 8081494:	20000d00 	.word	0x20000d00
 8081498:	2000084c 	.word	0x2000084c
 808149c:	20000854 	.word	0x20000854
 80814a0:	2000033c 	.word	0x2000033c
 80814a4:	20000350 	.word	0x20000350
 80814a8:	20000374 	.word	0x20000374
 80814ac:	2000037c 	.word	0x2000037c
 80814b0:	2000036c 	.word	0x2000036c
 80814b4:	20000d04 	.word	0x20000d04
 80814b8:	20000850 	.word	0x20000850
 80814bc:	20000858 	.word	0x20000858
 80814c0:	20000cdc 	.word	0x20000cdc
 80814c4:	20000690 	.word	0x20000690
 80814c8:	20000808 	.word	0x20000808
 80814cc:	20000d10 	.word	0x20000d10
 80814d0:	20000098 	.word	0x20000098
 80814d4:	200000a0 	.word	0x200000a0
 80814d8:	20000d08 	.word	0x20000d08
 80814dc:	20000800 	.word	0x20000800
 80814e0:	200007fc 	.word	0x200007fc
 80814e4:	20000804 	.word	0x20000804
 80814e8:	2000080c 	.word	0x2000080c
 80814ec:	200007f8 	.word	0x200007f8
 80814f0:	200005e8 	.word	0x200005e8
 80814f4:	200005d4 	.word	0x200005d4
 80814f8:	20000764 	.word	0x20000764
 80814fc:	20000348 	.word	0x20000348
 8081500:	20000718 	.word	0x20000718
 8081504:	20000684 	.word	0x20000684
 8081508:	20000334 	.word	0x20000334
 808150c:	20000cd8 	.word	0x20000cd8

08081510 <_Z7echoGpsv>:
      air_quality_score = hum_score + gas_score;


}

void echoGps(){
 8081510:	b510      	push	{r4, lr}
    char gps_byte = 0;
    while(!Serial.available()){
 8081512:	f00b fa7b 	bl	808ca0c <_Z16_fetch_usbserialv>
 8081516:	6803      	ldr	r3, [r0, #0]
 8081518:	691b      	ldr	r3, [r3, #16]
 808151a:	4798      	blx	r3
 808151c:	b990      	cbnz	r0, 8081544 <_Z7echoGpsv+0x34>
        if(Serial5.available() > 0){
 808151e:	f7ff fca1 	bl	8080e64 <_Z22__fetch_global_Serial5v>
 8081522:	6803      	ldr	r3, [r0, #0]
 8081524:	691b      	ldr	r3, [r3, #16]
 8081526:	4798      	blx	r3
 8081528:	2800      	cmp	r0, #0
 808152a:	ddf2      	ble.n	8081512 <_Z7echoGpsv+0x2>
            gps_byte = Serial5.read();
 808152c:	f7ff fc9a 	bl	8080e64 <_Z22__fetch_global_Serial5v>
 8081530:	6803      	ldr	r3, [r0, #0]
 8081532:	695b      	ldr	r3, [r3, #20]
 8081534:	4798      	blx	r3
 8081536:	4604      	mov	r4, r0
            Serial.print(gps_byte);
 8081538:	f00b fa68 	bl	808ca0c <_Z16_fetch_usbserialv>
 808153c:	b2e1      	uxtb	r1, r4
 808153e:	f00a f99b 	bl	808b878 <_ZN5Print5printEc>
 8081542:	e7e6      	b.n	8081512 <_Z7echoGpsv+0x2>
        }

    }
}
 8081544:	bd10      	pop	{r4, pc}
	...

08081548 <_Z11printPacketPhh>:
    printPacket(packet, len);
}

// Print the packet specified to the PC serial in a hexadecimal form.
void printPacket(byte *packet, byte len)
{
 8081548:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 808154c:	4606      	mov	r6, r0
 808154e:	460d      	mov	r5, r1
 8081550:	2400      	movs	r4, #0
    char temp[3];

    for (byte i = 0; i < len; i++)
    {
        sprintf(temp, "%.2X", packet[i]);
 8081552:	4f0f      	ldr	r7, [pc, #60]	; (8081590 <_Z11printPacketPhh+0x48>)
        Serial.print(temp);

        if (i != len - 1)
 8081554:	f101 38ff 	add.w	r8, r1, #4294967295
    for (byte i = 0; i < len; i++)
 8081558:	42ac      	cmp	r4, r5
 808155a:	d012      	beq.n	8081582 <_Z11printPacketPhh+0x3a>
        sprintf(temp, "%.2X", packet[i]);
 808155c:	4639      	mov	r1, r7
 808155e:	5d32      	ldrb	r2, [r6, r4]
 8081560:	a801      	add	r0, sp, #4
 8081562:	f009 fb47 	bl	808abf4 <sprintf>
        Serial.print(temp);
 8081566:	f00b fa51 	bl	808ca0c <_Z16_fetch_usbserialv>
 808156a:	a901      	add	r1, sp, #4
 808156c:	f00a f980 	bl	808b870 <_ZN5Print5printEPKc>
        if (i != len - 1)
 8081570:	45a0      	cmp	r8, r4
 8081572:	d004      	beq.n	808157e <_Z11printPacketPhh+0x36>
        {
            Serial.print(' ');
 8081574:	f00b fa4a 	bl	808ca0c <_Z16_fetch_usbserialv>
 8081578:	2120      	movs	r1, #32
 808157a:	f00a f97d 	bl	808b878 <_ZN5Print5printEc>
    for (byte i = 0; i < len; i++)
 808157e:	3401      	adds	r4, #1
 8081580:	e7ea      	b.n	8081558 <_Z11printPacketPhh+0x10>
        }
    }

    Serial.println();
 8081582:	f00b fa43 	bl	808ca0c <_Z16_fetch_usbserialv>
 8081586:	f00a f97a 	bl	808b87e <_ZN5Print7printlnEv>
}
 808158a:	b002      	add	sp, #8
 808158c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8081590:	08091bd3 	.word	0x08091bd3

08081594 <_Z10sendPacketPhh>:
{
 8081594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081596:	4604      	mov	r4, r0
 8081598:	460d      	mov	r5, r1
 808159a:	4606      	mov	r6, r0
 808159c:	180f      	adds	r7, r1, r0
    for (byte i = 0; i < len; i++)
 808159e:	42be      	cmp	r6, r7
 80815a0:	d007      	beq.n	80815b2 <_Z10sendPacketPhh+0x1e>
        Serial5.write(packet[i]);
 80815a2:	f7ff fc5f 	bl	8080e64 <_Z22__fetch_global_Serial5v>
 80815a6:	6803      	ldr	r3, [r0, #0]
 80815a8:	f816 1b01 	ldrb.w	r1, [r6], #1
 80815ac:	689b      	ldr	r3, [r3, #8]
 80815ae:	4798      	blx	r3
    for (byte i = 0; i < len; i++)
 80815b0:	e7f5      	b.n	808159e <_Z10sendPacketPhh+0xa>
    printPacket(packet, len);
 80815b2:	4629      	mov	r1, r5
 80815b4:	4620      	mov	r0, r4
}
 80815b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    printPacket(packet, len);
 80815ba:	f7ff bfc5 	b.w	8081548 <_Z11printPacketPhh>
	...

080815c0 <_Z19enableContinuousGPSv>:
{
 80815c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    byte packet[] = {
 80815c2:	4a07      	ldr	r2, [pc, #28]	; (80815e0 <_Z19enableContinuousGPSv+0x20>)
 80815c4:	ab01      	add	r3, sp, #4
 80815c6:	f852 0f0e 	ldr.w	r0, [r2, #14]!
 80815ca:	6851      	ldr	r1, [r2, #4]
 80815cc:	8912      	ldrh	r2, [r2, #8]
 80815ce:	c303      	stmia	r3!, {r0, r1}
    sendPacket(packet, sizeof(packet));
 80815d0:	210a      	movs	r1, #10
 80815d2:	a801      	add	r0, sp, #4
    byte packet[] = {
 80815d4:	801a      	strh	r2, [r3, #0]
    sendPacket(packet, sizeof(packet));
 80815d6:	f7ff ffdd 	bl	8081594 <_Z10sendPacketPhh>
}
 80815da:	b005      	add	sp, #20
 80815dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80815e0:	08093f3c 	.word	0x08093f3c

080815e4 <_Z17enableLowPowerGPSv>:
{
 80815e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    byte packet[] = {
 80815e6:	4a07      	ldr	r2, [pc, #28]	; (8081604 <_Z17enableLowPowerGPSv+0x20>)
 80815e8:	ab01      	add	r3, sp, #4
 80815ea:	f852 0f18 	ldr.w	r0, [r2, #24]!
 80815ee:	6851      	ldr	r1, [r2, #4]
 80815f0:	8912      	ldrh	r2, [r2, #8]
 80815f2:	c303      	stmia	r3!, {r0, r1}
    sendPacket(packet, sizeof(packet));
 80815f4:	210a      	movs	r1, #10
 80815f6:	a801      	add	r0, sp, #4
    byte packet[] = {
 80815f8:	801a      	strh	r2, [r3, #0]
    sendPacket(packet, sizeof(packet));
 80815fa:	f7ff ffcb 	bl	8081594 <_Z10sendPacketPhh>
}
 80815fe:	b005      	add	sp, #20
 8081600:	f85d fb04 	ldr.w	pc, [sp], #4
 8081604:	08093f3c 	.word	0x08093f3c

08081608 <_Z15readTemperaturev>:

float readTemperature(void){
 8081608:	b538      	push	{r3, r4, r5, lr}
 808160a:	4b2f      	ldr	r3, [pc, #188]	; (80816c8 <_Z15readTemperaturev+0xc0>)
 808160c:	681d      	ldr	r5, [r3, #0]
    float temperature = 0;
    if(hih8120_enabled){
 808160e:	4b2f      	ldr	r3, [pc, #188]	; (80816cc <_Z15readTemperaturev+0xc4>)
 8081610:	681b      	ldr	r3, [r3, #0]
 8081612:	b30b      	cbz	r3, 8081658 <_Z15readTemperaturev+0x50>
        //  convert humidity / temperature
        static float rawToHumidity(uint16_t raw) {
            return float(raw) / 16382;
        }
        static float rawToTemperature(uint16_t raw) {
            return (float(raw) / 16382) * 165 - 40;
 8081614:	4b2e      	ldr	r3, [pc, #184]	; (80816d0 <_Z15readTemperaturev+0xc8>)
 8081616:	8958      	ldrh	r0, [r3, #10]
 8081618:	f00c fc6e 	bl	808def8 <__aeabi_ui2f>
 808161c:	492d      	ldr	r1, [pc, #180]	; (80816d4 <_Z15readTemperaturev+0xcc>)
 808161e:	f00c fd77 	bl	808e110 <__aeabi_fdiv>
 8081622:	492d      	ldr	r1, [pc, #180]	; (80816d8 <_Z15readTemperaturev+0xd0>)
 8081624:	f00c fcc0 	bl	808dfa8 <__aeabi_fmul>
 8081628:	492c      	ldr	r1, [pc, #176]	; (80816dc <_Z15readTemperaturev+0xd4>)
 808162a:	f00c fbb3 	bl	808dd94 <__aeabi_fsub>
 808162e:	4604      	mov	r4, r0
        temperature = hih.temperature();
        if(debugging_enabled){
 8081630:	b125      	cbz	r5, 808163c <_Z15readTemperaturev+0x34>
            Serial.println("Temperature reading from HIH8120");
 8081632:	f00b f9eb 	bl	808ca0c <_Z16_fetch_usbserialv>
 8081636:	492a      	ldr	r1, [pc, #168]	; (80816e0 <_Z15readTemperaturev+0xd8>)
 8081638:	f00a f92d 	bl	808b896 <_ZN5Print7printlnEPKc>
          }
        temperature = bme.temperature;
    }
    //temperature *= 100;

    temperature *= temp_slope;
 808163c:	4b29      	ldr	r3, [pc, #164]	; (80816e4 <_Z15readTemperaturev+0xdc>)
 808163e:	4620      	mov	r0, r4
 8081640:	6819      	ldr	r1, [r3, #0]
 8081642:	f00c fcb1 	bl	808dfa8 <__aeabi_fmul>
 8081646:	4604      	mov	r4, r0
    temperature += temp_zero;       //user input zero offset
 8081648:	4b27      	ldr	r3, [pc, #156]	; (80816e8 <_Z15readTemperaturev+0xe0>)
 808164a:	6818      	ldr	r0, [r3, #0]
 808164c:	f00c fc58 	bl	808df00 <__aeabi_i2f>
 8081650:	4621      	mov	r1, r4
 8081652:	f00c fba1 	bl	808dd98 <__addsf3>

    return temperature;
    //temperature = temperature +
}
 8081656:	bd38      	pop	{r3, r4, r5, pc}
    }else if(new_temperature_sensor_enabled){
 8081658:	4b24      	ldr	r3, [pc, #144]	; (80816ec <_Z15readTemperaturev+0xe4>)
 808165a:	681b      	ldr	r3, [r3, #0]
 808165c:	b313      	cbz	r3, 80816a4 <_Z15readTemperaturev+0x9c>
        if(debugging_enabled){
 808165e:	b125      	cbz	r5, 808166a <_Z15readTemperaturev+0x62>
            Serial.println("Temperature reading from TMP36");
 8081660:	f00b f9d4 	bl	808ca0c <_Z16_fetch_usbserialv>
 8081664:	4922      	ldr	r1, [pc, #136]	; (80816f0 <_Z15readTemperaturev+0xe8>)
 8081666:	f00a f916 	bl	808b896 <_ZN5Print7printlnEPKc>
        temperature = analogRead(A1);
 808166a:	200b      	movs	r0, #11
 808166c:	f00b fdbf 	bl	808d1ee <analogRead>
 8081670:	f00c fc46 	bl	808df00 <__aeabi_i2f>
        temperature *= VOLTS_PER_UNIT;
 8081674:	f00b ffea 	bl	808d64c <__aeabi_f2d>
 8081678:	a30f      	add	r3, pc, #60	; (adr r3, 80816b8 <_Z15readTemperaturev+0xb0>)
 808167a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808167e:	f00c f83d 	bl	808d6fc <__aeabi_dmul>
 8081682:	f00c fb33 	bl	808dcec <__aeabi_d2f>
        temperature -= TMP36_OFFSET;
 8081686:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 808168a:	f00c fb83 	bl	808dd94 <__aeabi_fsub>
        temperature /= TMP36_VPDC;
 808168e:	f00b ffdd 	bl	808d64c <__aeabi_f2d>
 8081692:	a30b      	add	r3, pc, #44	; (adr r3, 80816c0 <_Z15readTemperaturev+0xb8>)
 8081694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081698:	f00c f95a 	bl	808d950 <__aeabi_ddiv>
 808169c:	f00c fb26 	bl	808dcec <__aeabi_d2f>
 80816a0:	4604      	mov	r4, r0
 80816a2:	e7cb      	b.n	808163c <_Z15readTemperaturev+0x34>
        if(debugging_enabled){
 80816a4:	b125      	cbz	r5, 80816b0 <_Z15readTemperaturev+0xa8>
            Serial.println("Temperature reading from BME for Alphasense");
 80816a6:	f00b f9b1 	bl	808ca0c <_Z16_fetch_usbserialv>
 80816aa:	4912      	ldr	r1, [pc, #72]	; (80816f4 <_Z15readTemperaturev+0xec>)
 80816ac:	f00a f8f3 	bl	808b896 <_ZN5Print7printlnEPKc>
        temperature = bme.temperature;
 80816b0:	4b11      	ldr	r3, [pc, #68]	; (80816f8 <_Z15readTemperaturev+0xf0>)
 80816b2:	681c      	ldr	r4, [r3, #0]
 80816b4:	e7c2      	b.n	808163c <_Z15readTemperaturev+0x34>
 80816b6:	bf00      	nop
 80816b8:	eb1c432d 	.word	0xeb1c432d
 80816bc:	3f4a36e2 	.word	0x3f4a36e2
 80816c0:	47ae147b 	.word	0x47ae147b
 80816c4:	3f847ae1 	.word	0x3f847ae1
 80816c8:	20000690 	.word	0x20000690
 80816cc:	20000764 	.word	0x20000764
 80816d0:	20000758 	.word	0x20000758
 80816d4:	467ff800 	.word	0x467ff800
 80816d8:	43250000 	.word	0x43250000
 80816dc:	42200000 	.word	0x42200000
 80816e0:	08091bd8 	.word	0x08091bd8
 80816e4:	20000d00 	.word	0x20000d00
 80816e8:	20000d04 	.word	0x20000d04
 80816ec:	200007fc 	.word	0x200007fc
 80816f0:	08091bf9 	.word	0x08091bf9
 80816f4:	08091c18 	.word	0x08091c18
 80816f8:	200005ec 	.word	0x200005ec

080816fc <_Z12readHumidityv>:

float readHumidity(void){
 80816fc:	b538      	push	{r3, r4, r5, lr}
 80816fe:	4b19      	ldr	r3, [pc, #100]	; (8081764 <_Z12readHumidityv+0x68>)
 8081700:	681d      	ldr	r5, [r3, #0]
    float humidity;
    if(hih8120_enabled){
 8081702:	4b19      	ldr	r3, [pc, #100]	; (8081768 <_Z12readHumidityv+0x6c>)
 8081704:	681b      	ldr	r3, [r3, #0]
 8081706:	b32b      	cbz	r3, 8081754 <_Z12readHumidityv+0x58>
            return float(raw) / 16382;
 8081708:	4b18      	ldr	r3, [pc, #96]	; (808176c <_Z12readHumidityv+0x70>)
 808170a:	8918      	ldrh	r0, [r3, #8]
 808170c:	f00c fbf4 	bl	808def8 <__aeabi_ui2f>
 8081710:	4917      	ldr	r1, [pc, #92]	; (8081770 <_Z12readHumidityv+0x74>)
 8081712:	f00c fcfd 	bl	808e110 <__aeabi_fdiv>
        humidity = hih.humidity();
        humidity *= 100;
 8081716:	4917      	ldr	r1, [pc, #92]	; (8081774 <_Z12readHumidityv+0x78>)
 8081718:	f00c fc46 	bl	808dfa8 <__aeabi_fmul>
 808171c:	4604      	mov	r4, r0
        if(debugging_enabled){
 808171e:	b125      	cbz	r5, 808172a <_Z12readHumidityv+0x2e>
            Serial.println("Humidity reading from HIH8120");
 8081720:	f00b f974 	bl	808ca0c <_Z16_fetch_usbserialv>
 8081724:	4914      	ldr	r1, [pc, #80]	; (8081778 <_Z12readHumidityv+0x7c>)
        }
    }else{
        humidity = bme.humidity;
        if(debugging_enabled){
            Serial.println("Humidity reading from BME");
 8081726:	f00a f8b6 	bl	808b896 <_ZN5Print7printlnEPKc>
        }
    }


    humidity *= rh_slope;
 808172a:	4b14      	ldr	r3, [pc, #80]	; (808177c <_Z12readHumidityv+0x80>)
 808172c:	4620      	mov	r0, r4
 808172e:	6819      	ldr	r1, [r3, #0]
 8081730:	f00c fc3a 	bl	808dfa8 <__aeabi_fmul>
 8081734:	4604      	mov	r4, r0
    humidity += rh_zero;       //user input zero offset
 8081736:	4b12      	ldr	r3, [pc, #72]	; (8081780 <_Z12readHumidityv+0x84>)
 8081738:	6818      	ldr	r0, [r3, #0]
 808173a:	f00c fbe1 	bl	808df00 <__aeabi_i2f>
 808173e:	4621      	mov	r1, r4
 8081740:	f00c fb2a 	bl	808dd98 <__addsf3>
    if(humidity > 100)
 8081744:	490b      	ldr	r1, [pc, #44]	; (8081774 <_Z12readHumidityv+0x78>)
    humidity += rh_zero;       //user input zero offset
 8081746:	4604      	mov	r4, r0
    if(humidity > 100)
 8081748:	f00c fdea 	bl	808e320 <__aeabi_fcmpgt>
 808174c:	b100      	cbz	r0, 8081750 <_Z12readHumidityv+0x54>
        humidity = 100;
 808174e:	4c09      	ldr	r4, [pc, #36]	; (8081774 <_Z12readHumidityv+0x78>)
    return humidity;
    //temperature = temperature +
}
 8081750:	4620      	mov	r0, r4
 8081752:	bd38      	pop	{r3, r4, r5, pc}
        humidity = bme.humidity;
 8081754:	4b0b      	ldr	r3, [pc, #44]	; (8081784 <_Z12readHumidityv+0x88>)
 8081756:	689c      	ldr	r4, [r3, #8]
        if(debugging_enabled){
 8081758:	2d00      	cmp	r5, #0
 808175a:	d0e6      	beq.n	808172a <_Z12readHumidityv+0x2e>
            Serial.println("Humidity reading from BME");
 808175c:	f00b f956 	bl	808ca0c <_Z16_fetch_usbserialv>
 8081760:	4909      	ldr	r1, [pc, #36]	; (8081788 <_Z12readHumidityv+0x8c>)
 8081762:	e7e0      	b.n	8081726 <_Z12readHumidityv+0x2a>
 8081764:	20000690 	.word	0x20000690
 8081768:	20000764 	.word	0x20000764
 808176c:	20000758 	.word	0x20000758
 8081770:	467ff800 	.word	0x467ff800
 8081774:	42c80000 	.word	0x42c80000
 8081778:	08091c44 	.word	0x08091c44
 808177c:	20000854 	.word	0x20000854
 8081780:	20000858 	.word	0x20000858
 8081784:	200005ec 	.word	0x200005ec
 8081788:	08091c62 	.word	0x08091c62
 808178c:	00000000 	.word	0x00000000

08081790 <_Z12calculateAQIv>:
void calculateAQI(void){
 8081790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        gas_reference = bme.gas_resistance/100;
 8081794:	4b6a      	ldr	r3, [pc, #424]	; (8081940 <_Z12calculateAQIv+0x1b0>)
 8081796:	496b      	ldr	r1, [pc, #428]	; (8081944 <_Z12calculateAQIv+0x1b4>)
 8081798:	68d8      	ldr	r0, [r3, #12]
void calculateAQI(void){
 808179a:	b085      	sub	sp, #20
        gas_reference = bme.gas_resistance/100;
 808179c:	f00c fcb8 	bl	808e110 <__aeabi_fdiv>
 80817a0:	4c69      	ldr	r4, [pc, #420]	; (8081948 <_Z12calculateAQIv+0x1b8>)
 80817a2:	6020      	str	r0, [r4, #0]
      float current_humidity = readHumidity();
 80817a4:	f7ff ffaa 	bl	80816fc <_Z12readHumidityv>
      if(debugging_enabled){
 80817a8:	4b68      	ldr	r3, [pc, #416]	; (808194c <_Z12calculateAQIv+0x1bc>)
      float current_humidity = readHumidity();
 80817aa:	4605      	mov	r5, r0
      if(debugging_enabled){
 80817ac:	681a      	ldr	r2, [r3, #0]
 80817ae:	46a0      	mov	r8, r4
 80817b0:	469a      	mov	sl, r3
 80817b2:	b192      	cbz	r2, 80817da <_Z12calculateAQIv+0x4a>
          Serial.printf("gas resistance: %1.0f, humidity: %1.2f\n\r", gas_reference, current_humidity);
 80817b4:	f00b f92a 	bl	808ca0c <_Z16_fetch_usbserialv>
 80817b8:	4604      	mov	r4, r0
        return this->printf_impl(false, format, args...);
 80817ba:	4628      	mov	r0, r5
 80817bc:	f00b ff46 	bl	808d64c <__aeabi_f2d>
 80817c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80817c4:	f8d8 0000 	ldr.w	r0, [r8]
 80817c8:	f00b ff40 	bl	808d64c <__aeabi_f2d>
 80817cc:	4a60      	ldr	r2, [pc, #384]	; (8081950 <_Z12calculateAQIv+0x1c0>)
 80817ce:	e9cd 0100 	strd	r0, r1, [sp]
 80817d2:	2100      	movs	r1, #0
 80817d4:	4620      	mov	r0, r4
 80817d6:	f00a f96b 	bl	808bab0 <_ZN5Print11printf_implEbPKcz>
      if (current_humidity >= 38 && current_humidity <= 42)
 80817da:	4628      	mov	r0, r5
 80817dc:	495d      	ldr	r1, [pc, #372]	; (8081954 <_Z12calculateAQIv+0x1c4>)
 80817de:	f00c fd95 	bl	808e30c <__aeabi_fcmpge>
 80817e2:	4c5d      	ldr	r4, [pc, #372]	; (8081958 <_Z12calculateAQIv+0x1c8>)
 80817e4:	2800      	cmp	r0, #0
 80817e6:	d06f      	beq.n	80818c8 <_Z12calculateAQIv+0x138>
 80817e8:	4628      	mov	r0, r5
 80817ea:	495c      	ldr	r1, [pc, #368]	; (808195c <_Z12calculateAQIv+0x1cc>)
 80817ec:	f00c fd84 	bl	808e2f8 <__aeabi_fcmple>
 80817f0:	2800      	cmp	r0, #0
 80817f2:	d069      	beq.n	80818c8 <_Z12calculateAQIv+0x138>
        hum_score = 0.25*100; // Humidity +/-5% around optimum
 80817f4:	4b5a      	ldr	r3, [pc, #360]	; (8081960 <_Z12calculateAQIv+0x1d0>)
 80817f6:	6023      	str	r3, [r4, #0]
      if (gas_reference > gas_upper_limit) gas_reference = gas_upper_limit;
 80817f8:	4b5a      	ldr	r3, [pc, #360]	; (8081964 <_Z12calculateAQIv+0x1d4>)
 80817fa:	681e      	ldr	r6, [r3, #0]
 80817fc:	4630      	mov	r0, r6
 80817fe:	f00c fb7f 	bl	808df00 <__aeabi_i2f>
 8081802:	f8d8 1000 	ldr.w	r1, [r8]
 8081806:	4605      	mov	r5, r0
 8081808:	f00c fd6c 	bl	808e2e4 <__aeabi_fcmplt>
 808180c:	b108      	cbz	r0, 8081812 <_Z12calculateAQIv+0x82>
 808180e:	f8c8 5000 	str.w	r5, [r8]
      if (gas_reference < gas_lower_limit) gas_reference = gas_lower_limit;
 8081812:	4b55      	ldr	r3, [pc, #340]	; (8081968 <_Z12calculateAQIv+0x1d8>)
 8081814:	f8d3 b000 	ldr.w	fp, [r3]
 8081818:	4658      	mov	r0, fp
 808181a:	f00c fb71 	bl	808df00 <__aeabi_i2f>
 808181e:	f8d8 1000 	ldr.w	r1, [r8]
 8081822:	4605      	mov	r5, r0
 8081824:	f00c fd7c 	bl	808e320 <__aeabi_fcmpgt>
 8081828:	b108      	cbz	r0, 808182e <_Z12calculateAQIv+0x9e>
 808182a:	f8c8 5000 	str.w	r5, [r8]
      gas_score = (0.75/(gas_upper_limit-gas_lower_limit)*gas_reference -(gas_lower_limit*(0.75/(gas_upper_limit-gas_lower_limit))))*100;
 808182e:	eba6 000b 	sub.w	r0, r6, fp
 8081832:	f00b fef9 	bl	808d628 <__aeabi_i2d>
 8081836:	4602      	mov	r2, r0
 8081838:	460b      	mov	r3, r1
 808183a:	2000      	movs	r0, #0
 808183c:	494b      	ldr	r1, [pc, #300]	; (808196c <_Z12calculateAQIv+0x1dc>)
 808183e:	f00c f887 	bl	808d950 <__aeabi_ddiv>
 8081842:	4606      	mov	r6, r0
 8081844:	460f      	mov	r7, r1
 8081846:	f8d8 0000 	ldr.w	r0, [r8]
 808184a:	f00b feff 	bl	808d64c <__aeabi_f2d>
 808184e:	4632      	mov	r2, r6
 8081850:	463b      	mov	r3, r7
 8081852:	f00b ff53 	bl	808d6fc <__aeabi_dmul>
 8081856:	4680      	mov	r8, r0
 8081858:	4658      	mov	r0, fp
 808185a:	4689      	mov	r9, r1
 808185c:	f00b fee4 	bl	808d628 <__aeabi_i2d>
 8081860:	4632      	mov	r2, r6
 8081862:	463b      	mov	r3, r7
 8081864:	f00b ff4a 	bl	808d6fc <__aeabi_dmul>
 8081868:	4602      	mov	r2, r0
 808186a:	460b      	mov	r3, r1
 808186c:	4640      	mov	r0, r8
 808186e:	4649      	mov	r1, r9
 8081870:	f00b fd8c 	bl	808d38c <__aeabi_dsub>
 8081874:	4b3e      	ldr	r3, [pc, #248]	; (8081970 <_Z12calculateAQIv+0x1e0>)
 8081876:	2200      	movs	r2, #0
 8081878:	f00b ff40 	bl	808d6fc <__aeabi_dmul>
 808187c:	f00c fa36 	bl	808dcec <__aeabi_d2f>
 8081880:	4d3c      	ldr	r5, [pc, #240]	; (8081974 <_Z12calculateAQIv+0x1e4>)
      if(debugging_enabled){
 8081882:	f8da 3000 	ldr.w	r3, [sl]
      gas_score = (0.75/(gas_upper_limit-gas_lower_limit)*gas_reference -(gas_lower_limit*(0.75/(gas_upper_limit-gas_lower_limit))))*100;
 8081886:	6028      	str	r0, [r5, #0]
      if(debugging_enabled){
 8081888:	b1ab      	cbz	r3, 80818b6 <_Z12calculateAQIv+0x126>
        Serial.print("Gas score: ");
 808188a:	f00b f8bf 	bl	808ca0c <_Z16_fetch_usbserialv>
 808188e:	493a      	ldr	r1, [pc, #232]	; (8081978 <_Z12calculateAQIv+0x1e8>)
 8081890:	f009 ffee 	bl	808b870 <_ZN5Print5printEPKc>
        Serial.println(gas_score);
 8081894:	f00b f8ba 	bl	808ca0c <_Z16_fetch_usbserialv>
 8081898:	2202      	movs	r2, #2
 808189a:	6829      	ldr	r1, [r5, #0]
 808189c:	f00a f8fa 	bl	808ba94 <_ZN5Print7printlnEfi>
        Serial.print("Humidity score: ");
 80818a0:	f00b f8b4 	bl	808ca0c <_Z16_fetch_usbserialv>
 80818a4:	4935      	ldr	r1, [pc, #212]	; (808197c <_Z12calculateAQIv+0x1ec>)
 80818a6:	f009 ffe3 	bl	808b870 <_ZN5Print5printEPKc>
        Serial.println(hum_score);
 80818aa:	f00b f8af 	bl	808ca0c <_Z16_fetch_usbserialv>
 80818ae:	2202      	movs	r2, #2
 80818b0:	6821      	ldr	r1, [r4, #0]
 80818b2:	f00a f8ef 	bl	808ba94 <_ZN5Print7printlnEfi>
      air_quality_score = hum_score + gas_score;
 80818b6:	6829      	ldr	r1, [r5, #0]
 80818b8:	6820      	ldr	r0, [r4, #0]
 80818ba:	f00c fa6d 	bl	808dd98 <__addsf3>
 80818be:	4b30      	ldr	r3, [pc, #192]	; (8081980 <_Z12calculateAQIv+0x1f0>)
 80818c0:	6018      	str	r0, [r3, #0]
}
 80818c2:	b005      	add	sp, #20
 80818c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (current_humidity < 38)
 80818c8:	4b2e      	ldr	r3, [pc, #184]	; (8081984 <_Z12calculateAQIv+0x1f4>)
 80818ca:	4628      	mov	r0, r5
 80818cc:	f8d3 9000 	ldr.w	r9, [r3]
 80818d0:	f00b febc 	bl	808d64c <__aeabi_f2d>
 80818d4:	4606      	mov	r6, r0
 80818d6:	460f      	mov	r7, r1
 80818d8:	4628      	mov	r0, r5
 80818da:	491e      	ldr	r1, [pc, #120]	; (8081954 <_Z12calculateAQIv+0x1c4>)
 80818dc:	f00c fd02 	bl	808e2e4 <__aeabi_fcmplt>
 80818e0:	b1a0      	cbz	r0, 808190c <_Z12calculateAQIv+0x17c>
          hum_score = 0.25/hum_reference*current_humidity*100;
 80818e2:	4648      	mov	r0, r9
 80818e4:	f00b feb2 	bl	808d64c <__aeabi_f2d>
 80818e8:	4602      	mov	r2, r0
 80818ea:	460b      	mov	r3, r1
 80818ec:	2000      	movs	r0, #0
 80818ee:	4926      	ldr	r1, [pc, #152]	; (8081988 <_Z12calculateAQIv+0x1f8>)
 80818f0:	f00c f82e 	bl	808d950 <__aeabi_ddiv>
 80818f4:	4632      	mov	r2, r6
 80818f6:	463b      	mov	r3, r7
 80818f8:	f00b ff00 	bl	808d6fc <__aeabi_dmul>
          hum_score = ((-0.25/(100-hum_reference)*current_humidity)+0.416666)*100;
 80818fc:	2200      	movs	r2, #0
 80818fe:	4b1c      	ldr	r3, [pc, #112]	; (8081970 <_Z12calculateAQIv+0x1e0>)
 8081900:	f00b fefc 	bl	808d6fc <__aeabi_dmul>
 8081904:	f00c f9f2 	bl	808dcec <__aeabi_d2f>
 8081908:	6020      	str	r0, [r4, #0]
 808190a:	e775      	b.n	80817f8 <_Z12calculateAQIv+0x68>
 808190c:	4649      	mov	r1, r9
 808190e:	480d      	ldr	r0, [pc, #52]	; (8081944 <_Z12calculateAQIv+0x1b4>)
 8081910:	f00c fa40 	bl	808dd94 <__aeabi_fsub>
 8081914:	f00b fe9a 	bl	808d64c <__aeabi_f2d>
 8081918:	4602      	mov	r2, r0
 808191a:	460b      	mov	r3, r1
 808191c:	2000      	movs	r0, #0
 808191e:	491b      	ldr	r1, [pc, #108]	; (808198c <_Z12calculateAQIv+0x1fc>)
 8081920:	f00c f816 	bl	808d950 <__aeabi_ddiv>
 8081924:	4632      	mov	r2, r6
 8081926:	463b      	mov	r3, r7
 8081928:	f00b fee8 	bl	808d6fc <__aeabi_dmul>
 808192c:	a302      	add	r3, pc, #8	; (adr r3, 8081938 <_Z12calculateAQIv+0x1a8>)
 808192e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081932:	f00b fd2d 	bl	808d390 <__adddf3>
 8081936:	e7e1      	b.n	80818fc <_Z12calculateAQIv+0x16c>
 8081938:	ded6ba8c 	.word	0xded6ba8c
 808193c:	3fdaaaa7 	.word	0x3fdaaaa7
 8081940:	200005ec 	.word	0x200005ec
 8081944:	42c80000 	.word	0x42c80000
 8081948:	2000009c 	.word	0x2000009c
 808194c:	20000690 	.word	0x20000690
 8081950:	08091c7c 	.word	0x08091c7c
 8081954:	42180000 	.word	0x42180000
 8081958:	20000768 	.word	0x20000768
 808195c:	42280000 	.word	0x42280000
 8081960:	41c80000 	.word	0x41c80000
 8081964:	200000a0 	.word	0x200000a0
 8081968:	20000098 	.word	0x20000098
 808196c:	3fe80000 	.word	0x3fe80000
 8081970:	40590000 	.word	0x40590000
 8081974:	20000714 	.word	0x20000714
 8081978:	08091ca5 	.word	0x08091ca5
 808197c:	08091cb1 	.word	0x08091cb1
 8081980:	200005e4 	.word	0x200005e4
 8081984:	200000c4 	.word	0x200000c4
 8081988:	3fd00000 	.word	0x3fd00000
 808198c:	bfd00000 	.word	0xbfd00000

08081990 <_Z9readSoundv>:
//read sound from
double readSound(void){
 8081990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081992:	260a      	movs	r6, #10
    int val;
    double sum = 0;
 8081994:	2400      	movs	r4, #0
 8081996:	2500      	movs	r5, #0
    float average = 0;
    for(int i=0; i< 10;i++){
        val = analogRead(sound_input);
 8081998:	4f11      	ldr	r7, [pc, #68]	; (80819e0 <_Z9readSoundv+0x50>)
 808199a:	8838      	ldrh	r0, [r7, #0]
 808199c:	f00b fc27 	bl	808d1ee <analogRead>
        sum += val;
 80819a0:	f00b fe42 	bl	808d628 <__aeabi_i2d>
 80819a4:	4602      	mov	r2, r0
 80819a6:	460b      	mov	r3, r1
 80819a8:	4620      	mov	r0, r4
 80819aa:	4629      	mov	r1, r5
 80819ac:	f00b fcf0 	bl	808d390 <__adddf3>
    for(int i=0; i< 10;i++){
 80819b0:	3e01      	subs	r6, #1
        sum += val;
 80819b2:	4604      	mov	r4, r0
 80819b4:	460d      	mov	r5, r1
    for(int i=0; i< 10;i++){
 80819b6:	d1f0      	bne.n	808199a <_Z9readSoundv+0xa>
        //Serial.print("Sound level: ");
        //Serial.println(val);
    }
    sum = sum/10;
 80819b8:	2200      	movs	r2, #0
 80819ba:	4b0a      	ldr	r3, [pc, #40]	; (80819e4 <_Z9readSoundv+0x54>)
 80819bc:	f00b ffc8 	bl	808d950 <__aeabi_ddiv>
    sum /= 4095;
 80819c0:	a305      	add	r3, pc, #20	; (adr r3, 80819d8 <_Z9readSoundv+0x48>)
 80819c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80819c6:	f00b ffc3 	bl	808d950 <__aeabi_ddiv>
    sum *= 100;
 80819ca:	2200      	movs	r2, #0
 80819cc:	4b06      	ldr	r3, [pc, #24]	; (80819e8 <_Z9readSoundv+0x58>)
 80819ce:	f00b fe95 	bl	808d6fc <__aeabi_dmul>
    return sum;
}
 80819d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80819d4:	f3af 8000 	nop.w
 80819d8:	00000000 	.word	0x00000000
 80819dc:	40affe00 	.word	0x40affe00
 80819e0:	200000dc 	.word	0x200000dc
 80819e4:	40240000 	.word	0x40240000
 80819e8:	40590000 	.word	0x40590000

080819ec <_Z7readCO2v>:
    CO_float += float_offset;

    return CO_float;
}

float readCO2(void){
 80819ec:	b538      	push	{r3, r4, r5, lr}
    //read CO2 values and apply calibration factors
    if(debugging_enabled){
 80819ee:	4b14      	ldr	r3, [pc, #80]	; (8081a40 <_Z7readCO2v+0x54>)
 80819f0:	681b      	ldr	r3, [r3, #0]
 80819f2:	b11b      	cbz	r3, 80819fc <_Z7readCO2v+0x10>
        t6713.readStatus(1);
 80819f4:	2101      	movs	r1, #1
 80819f6:	4813      	ldr	r0, [pc, #76]	; (8081a44 <_Z7readCO2v+0x58>)
 80819f8:	f005 fe94 	bl	8087724 <_ZN13Telaire_T671310readStatusEi>
    }
    CO2_float = t6713.readPPM();
 80819fc:	4811      	ldr	r0, [pc, #68]	; (8081a44 <_Z7readCO2v+0x58>)
 80819fe:	f005 fdb7 	bl	8087570 <_ZN13Telaire_T67137readPPMEv>
 8081a02:	f00c fa7d 	bl	808df00 <__aeabi_i2f>
 8081a06:	4c10      	ldr	r4, [pc, #64]	; (8081a48 <_Z7readCO2v+0x5c>)

    if(CO2_float == 0){
 8081a08:	2100      	movs	r1, #0
    CO2_float = t6713.readPPM();
 8081a0a:	6020      	str	r0, [r4, #0]
 8081a0c:	4605      	mov	r5, r0
    if(CO2_float == 0){
 8081a0e:	f00c fc5f 	bl	808e2d0 <__aeabi_fcmpeq>
 8081a12:	4b0e      	ldr	r3, [pc, #56]	; (8081a4c <_Z7readCO2v+0x60>)
 8081a14:	b188      	cbz	r0, 8081a3a <_Z7readCO2v+0x4e>
        CO2_float = CO2_float_previous;
 8081a16:	681b      	ldr	r3, [r3, #0]
 8081a18:	6023      	str	r3, [r4, #0]
    }else{
        CO2_float_previous = CO2_float;
    }

    CO2_float *= CO2_slope;
 8081a1a:	4b0d      	ldr	r3, [pc, #52]	; (8081a50 <_Z7readCO2v+0x64>)
 8081a1c:	6820      	ldr	r0, [r4, #0]
 8081a1e:	6819      	ldr	r1, [r3, #0]
 8081a20:	f00c fac2 	bl	808dfa8 <__aeabi_fmul>
    CO2_float += CO2_zero;
 8081a24:	4b0b      	ldr	r3, [pc, #44]	; (8081a54 <_Z7readCO2v+0x68>)
    CO2_float *= CO2_slope;
 8081a26:	4605      	mov	r5, r0
    CO2_float += CO2_zero;
 8081a28:	6818      	ldr	r0, [r3, #0]
 8081a2a:	f00c fa69 	bl	808df00 <__aeabi_i2f>
 8081a2e:	4601      	mov	r1, r0
 8081a30:	4628      	mov	r0, r5
 8081a32:	f00c f9b1 	bl	808dd98 <__addsf3>
 8081a36:	6020      	str	r0, [r4, #0]
    
    return CO2_float;
}
 8081a38:	bd38      	pop	{r3, r4, r5, pc}
        CO2_float_previous = CO2_float;
 8081a3a:	601d      	str	r5, [r3, #0]
 8081a3c:	e7ed      	b.n	8081a1a <_Z7readCO2v+0x2e>
 8081a3e:	bf00      	nop
 8081a40:	20000690 	.word	0x20000690
 8081a44:	20000cfa 	.word	0x20000cfa
 8081a48:	2000032c 	.word	0x2000032c
 8081a4c:	20000330 	.word	0x20000330
 8081a50:	20000334 	.word	0x20000334
 8081a54:	2000033c 	.word	0x2000033c

08081a58 <_Z10readAlpha2v>:

      }
      return alpha1_ppmraw;
}

float readAlpha2(void){
 8081a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    float sensorCurrent; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent;
    float correctedCurrent;
    float alpha2_ppmraw;
    String alpha2_ppmRounded;
    if(debugging_enabled){
 8081a5c:	4c8e      	ldr	r4, [pc, #568]	; (8081c98 <_Z10readAlpha2v+0x240>)
float readAlpha2(void){
 8081a5e:	b089      	sub	sp, #36	; 0x24
    String alpha2_ppmRounded;
 8081a60:	4668      	mov	r0, sp
 8081a62:	498e      	ldr	r1, [pc, #568]	; (8081c9c <_Z10readAlpha2v+0x244>)
 8081a64:	f009 fd06 	bl	808b474 <_ZN6StringC1EPKc>
    if(debugging_enabled){
 8081a68:	6823      	ldr	r3, [r4, #0]
 8081a6a:	b123      	cbz	r3, 8081a76 <_Z10readAlpha2v+0x1e>
        Serial.println("Start of alpha 2 read");
 8081a6c:	f00a ffce 	bl	808ca0c <_Z16_fetch_usbserialv>
 8081a70:	498b      	ldr	r1, [pc, #556]	; (8081ca0 <_Z10readAlpha2v+0x248>)
 8081a72:	f009 ff10 	bl	808b896 <_ZN5Print7printlnEPKc>
    }
    digitalWrite(lmp91000_2_en, LOW);   //enable
 8081a76:	4f8b      	ldr	r7, [pc, #556]	; (8081ca4 <_Z10readAlpha2v+0x24c>)
 8081a78:	2100      	movs	r1, #0
 8081a7a:	8838      	ldrh	r0, [r7, #0]
 8081a7c:	f00b fb8b 	bl	808d196 <digitalWrite>

    if(Wire.requestFrom(0x4A,1) == 0){
 8081a80:	f00b fc1e 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8081a84:	2201      	movs	r2, #1
 8081a86:	214a      	movs	r1, #74	; 0x4a
 8081a88:	f00b f9b3 	bl	808cdf2 <_ZN7TwoWire11requestFromEhj>
 8081a8c:	bb38      	cbnz	r0, 8081ade <_Z10readAlpha2v+0x86>
        Serial.println("Couldn't communicate with LMP91000 2");
 8081a8e:	f00a ffbd 	bl	808ca0c <_Z16_fetch_usbserialv>
 8081a92:	4985      	ldr	r1, [pc, #532]	; (8081ca8 <_Z10readAlpha2v+0x250>)
 8081a94:	f009 feff 	bl	808b896 <_ZN5Print7printlnEPKc>
          Serial.println(volt_half_Vref/1000);

        }
    }

    if(lmp91000.read(LMP91000_STATUS_REG) == 0){
 8081a98:	2100      	movs	r1, #0
 8081a9a:	4884      	ldr	r0, [pc, #528]	; (8081cac <_Z10readAlpha2v+0x254>)
 8081a9c:	f005 fab5 	bl	808700a <_ZN8LMP910004readEh>
 8081aa0:	b930      	cbnz	r0, 8081ab0 <_Z10readAlpha2v+0x58>
        if(debugging_enabled)
 8081aa2:	6823      	ldr	r3, [r4, #0]
 8081aa4:	b123      	cbz	r3, 8081ab0 <_Z10readAlpha2v+0x58>
            Serial.println("Status == 0 from LMP91000 2 status reg");
 8081aa6:	f00a ffb1 	bl	808ca0c <_Z16_fetch_usbserialv>
 8081aaa:	4981      	ldr	r1, [pc, #516]	; (8081cb0 <_Z10readAlpha2v+0x258>)
 8081aac:	f009 fef3 	bl	808b896 <_ZN5Print7printlnEPKc>
        //delay(200);
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }

    if(Wire.requestFrom(0x4A,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref)/1000 - 1.25) > 0.5)){
 8081ab0:	f00b fc06 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8081ab4:	2201      	movs	r2, #1
 8081ab6:	214a      	movs	r1, #74	; 0x4a
 8081ab8:	f00b f99b 	bl	808cdf2 <_ZN7TwoWire11requestFromEhj>
 8081abc:	2800      	cmp	r0, #0
 8081abe:	d138      	bne.n	8081b32 <_Z10readAlpha2v+0xda>
        alpha2_ppmRounded = "-99";
 8081ac0:	4668      	mov	r0, sp
 8081ac2:	497c      	ldr	r1, [pc, #496]	; (8081cb4 <_Z10readAlpha2v+0x25c>)
 8081ac4:	f009 fd28 	bl	808b518 <_ZN6StringaSEPKc>
        }
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
      }

      digitalWrite(lmp91000_2_en, HIGH);  //disable
 8081ac8:	2101      	movs	r1, #1
 8081aca:	8838      	ldrh	r0, [r7, #0]
 8081acc:	f00b fb63 	bl	808d196 <digitalWrite>
    String alpha2_ppmRounded;
 8081ad0:	4668      	mov	r0, sp
 8081ad2:	f009 fc85 	bl	808b3e0 <_ZN6StringD1Ev>

      Serial.print("Volt1 Aux:");
      Serial.print(volt1_aux);
      Serial.println("Volts");*/
      return alpha2_ppmraw;
}
 8081ad6:	4628      	mov	r0, r5
 8081ad8:	b009      	add	sp, #36	; 0x24
 8081ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        half_Vref = ads2.readADC_SingleEnded(3); //half of Vref
 8081ade:	2103      	movs	r1, #3
 8081ae0:	4875      	ldr	r0, [pc, #468]	; (8081cb8 <_Z10readAlpha2v+0x260>)
 8081ae2:	f005 fbdd 	bl	80872a0 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
        volt_half_Vref = half_Vref * ads_bitmv;
 8081ae6:	f00c fa0b 	bl	808df00 <__aeabi_i2f>
 8081aea:	4b74      	ldr	r3, [pc, #464]	; (8081cbc <_Z10readAlpha2v+0x264>)
 8081aec:	6819      	ldr	r1, [r3, #0]
 8081aee:	f00c fa5b 	bl	808dfa8 <__aeabi_fmul>
        if(abs((volt_half_Vref)/1000 - 1.25) > 0.5){
 8081af2:	4973      	ldr	r1, [pc, #460]	; (8081cc0 <_Z10readAlpha2v+0x268>)
        volt_half_Vref = half_Vref * ads_bitmv;
 8081af4:	4680      	mov	r8, r0
        if(abs((volt_half_Vref)/1000 - 1.25) > 0.5){
 8081af6:	f00c fb0b 	bl	808e110 <__aeabi_fdiv>
 8081afa:	4681      	mov	r9, r0
 8081afc:	f00b fda6 	bl	808d64c <__aeabi_f2d>
 8081b00:	2200      	movs	r2, #0
 8081b02:	4b70      	ldr	r3, [pc, #448]	; (8081cc4 <_Z10readAlpha2v+0x26c>)
 8081b04:	f00b fc42 	bl	808d38c <__aeabi_dsub>
 8081b08:	f021 4b00 	bic.w	fp, r1, #2147483648	; 0x80000000
 8081b0c:	2200      	movs	r2, #0
 8081b0e:	4659      	mov	r1, fp
 8081b10:	4b6d      	ldr	r3, [pc, #436]	; (8081cc8 <_Z10readAlpha2v+0x270>)
 8081b12:	f00c f883 	bl	808dc1c <__aeabi_dcmpgt>
 8081b16:	2800      	cmp	r0, #0
 8081b18:	d0be      	beq.n	8081a98 <_Z10readAlpha2v+0x40>
          Serial.print("half vref2 ads1");
 8081b1a:	f00a ff77 	bl	808ca0c <_Z16_fetch_usbserialv>
 8081b1e:	496b      	ldr	r1, [pc, #428]	; (8081ccc <_Z10readAlpha2v+0x274>)
 8081b20:	f009 fea6 	bl	808b870 <_ZN5Print5printEPKc>
          Serial.println(volt_half_Vref/1000);
 8081b24:	f00a ff72 	bl	808ca0c <_Z16_fetch_usbserialv>
 8081b28:	2202      	movs	r2, #2
 8081b2a:	4649      	mov	r1, r9
 8081b2c:	f009 ffb2 	bl	808ba94 <_ZN5Print7printlnEfi>
 8081b30:	e7b2      	b.n	8081a98 <_Z10readAlpha2v+0x40>
    if(Wire.requestFrom(0x4A,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref)/1000 - 1.25) > 0.5)){
 8081b32:	2100      	movs	r1, #0
 8081b34:	485d      	ldr	r0, [pc, #372]	; (8081cac <_Z10readAlpha2v+0x254>)
 8081b36:	f005 fa68 	bl	808700a <_ZN8LMP910004readEh>
 8081b3a:	2800      	cmp	r0, #0
 8081b3c:	d0c0      	beq.n	8081ac0 <_Z10readAlpha2v+0x68>
 8081b3e:	4960      	ldr	r1, [pc, #384]	; (8081cc0 <_Z10readAlpha2v+0x268>)
 8081b40:	4640      	mov	r0, r8
 8081b42:	f00c fae5 	bl	808e110 <__aeabi_fdiv>
 8081b46:	f00b fd81 	bl	808d64c <__aeabi_f2d>
 8081b4a:	2200      	movs	r2, #0
 8081b4c:	4b5d      	ldr	r3, [pc, #372]	; (8081cc4 <_Z10readAlpha2v+0x26c>)
 8081b4e:	f00b fc1d 	bl	808d38c <__aeabi_dsub>
 8081b52:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
 8081b56:	2200      	movs	r2, #0
 8081b58:	4649      	mov	r1, r9
 8081b5a:	4b5b      	ldr	r3, [pc, #364]	; (8081cc8 <_Z10readAlpha2v+0x270>)
 8081b5c:	f00c f85e 	bl	808dc1c <__aeabi_dcmpgt>
 8081b60:	4604      	mov	r4, r0
 8081b62:	2800      	cmp	r0, #0
 8081b64:	d1ac      	bne.n	8081ac0 <_Z10readAlpha2v+0x68>
 8081b66:	f04f 080a 	mov.w	r8, #10
 8081b6a:	4681      	mov	r9, r0
 8081b6c:	4682      	mov	sl, r0
          A0_gas += ads2.readADC_SingleEnded(0); //gas
 8081b6e:	4d52      	ldr	r5, [pc, #328]	; (8081cb8 <_Z10readAlpha2v+0x260>)
 8081b70:	2100      	movs	r1, #0
 8081b72:	4628      	mov	r0, r5
 8081b74:	f005 fb94 	bl	80872a0 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          A1_aux += ads2.readADC_SingleEnded(1); //aux out
 8081b78:	2101      	movs	r1, #1
          A0_gas += ads2.readADC_SingleEnded(0); //gas
 8081b7a:	4482      	add	sl, r0
          A1_aux += ads2.readADC_SingleEnded(1); //aux out
 8081b7c:	4628      	mov	r0, r5
 8081b7e:	f005 fb8f 	bl	80872a0 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          A2_temperature += ads2.readADC_SingleEnded(2); //temperature
 8081b82:	2102      	movs	r1, #2
          A1_aux += ads2.readADC_SingleEnded(1); //aux out
 8081b84:	4481      	add	r9, r0
          A2_temperature += ads2.readADC_SingleEnded(2); //temperature
 8081b86:	4628      	mov	r0, r5
 8081b88:	f005 fb8a 	bl	80872a0 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          half_Vref += ads2.readADC_SingleEnded(3); //half of Vref
 8081b8c:	2103      	movs	r1, #3
 8081b8e:	4628      	mov	r0, r5
 8081b90:	f005 fb86 	bl	80872a0 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
 8081b94:	f1b8 0801 	subs.w	r8, r8, #1
          half_Vref += ads2.readADC_SingleEnded(3); //half of Vref
 8081b98:	4404      	add	r4, r0
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
 8081b9a:	d1e9      	bne.n	8081b70 <_Z10readAlpha2v+0x118>
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;
 8081b9c:	f04f 0b0a 	mov.w	fp, #10
        volt0_gas = A0_gas * ads_bitmv;
 8081ba0:	4b46      	ldr	r3, [pc, #280]	; (8081cbc <_Z10readAlpha2v+0x264>)
        volt_half_Vref = half_Vref * ads_bitmv;
 8081ba2:	fbb4 f0fb 	udiv	r0, r4, fp
        volt0_gas = A0_gas * ads_bitmv;
 8081ba6:	f8d3 8000 	ldr.w	r8, [r3]
        volt_half_Vref = half_Vref * ads_bitmv;
 8081baa:	f00c f9a9 	bl	808df00 <__aeabi_i2f>
 8081bae:	4641      	mov	r1, r8
 8081bb0:	f00c f9fa 	bl	808dfa8 <__aeabi_fmul>
 8081bb4:	4604      	mov	r4, r0
        volt0_gas = A0_gas * ads_bitmv;
 8081bb6:	fbba f0fb 	udiv	r0, sl, fp
 8081bba:	f00c f9a1 	bl	808df00 <__aeabi_i2f>
 8081bbe:	4641      	mov	r1, r8
 8081bc0:	f00c f9f2 	bl	808dfa8 <__aeabi_fmul>
 8081bc4:	4601      	mov	r1, r0
        sensorCurrent = (volt_half_Vref - volt0_gas) / (-1*120); // Working Electrode current in microamps (millivolts / Kohms)
 8081bc6:	4620      	mov	r0, r4
 8081bc8:	f00c f8e4 	bl	808dd94 <__aeabi_fsub>
 8081bcc:	4940      	ldr	r1, [pc, #256]	; (8081cd0 <_Z10readAlpha2v+0x278>)
 8081bce:	f00c fa9f 	bl	808e110 <__aeabi_fdiv>
 8081bd2:	4605      	mov	r5, r0
        volt1_aux = A1_aux * ads_bitmv;
 8081bd4:	fbb9 f0fb 	udiv	r0, r9, fp
 8081bd8:	f00c f992 	bl	808df00 <__aeabi_i2f>
 8081bdc:	4641      	mov	r1, r8
 8081bde:	f00c f9e3 	bl	808dfa8 <__aeabi_fmul>
 8081be2:	4601      	mov	r1, r0
        auxCurrent = (volt_half_Vref - volt1_aux) / (-1*150);
 8081be4:	4620      	mov	r0, r4
 8081be6:	f00c f8d5 	bl	808dd94 <__aeabi_fsub>
 8081bea:	493a      	ldr	r1, [pc, #232]	; (8081cd4 <_Z10readAlpha2v+0x27c>)
 8081bec:	f00c fa90 	bl	808e110 <__aeabi_fdiv>
 8081bf0:	4604      	mov	r4, r0
        if(readTemperature() <= 15){
 8081bf2:	f7ff fd09 	bl	8081608 <_Z15readTemperaturev>
 8081bf6:	4938      	ldr	r1, [pc, #224]	; (8081cd8 <_Z10readAlpha2v+0x280>)
 8081bf8:	f00c fb7e 	bl	808e2f8 <__aeabi_fcmple>
 8081bfc:	b1e0      	cbz	r0, 8081c38 <_Z10readAlpha2v+0x1e0>
          correctedCurrent = ((sensorCurrent) - (auxCurrent));
 8081bfe:	4621      	mov	r1, r4
 8081c00:	4628      	mov	r0, r5
 8081c02:	f00c f8c7 	bl	808dd94 <__aeabi_fsub>
          correctedCurrent = ((sensorCurrent) - (-0.76)*(auxCurrent));
 8081c06:	4606      	mov	r6, r0
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 8081c08:	4630      	mov	r0, r6
 8081c0a:	f00b fd1f 	bl	808d64c <__aeabi_f2d>
 8081c0e:	a31e      	add	r3, pc, #120	; (adr r3, 8081c88 <_Z10readAlpha2v+0x230>)
 8081c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081c14:	f00b fe9c 	bl	808d950 <__aeabi_ddiv>
 8081c18:	f00c f868 	bl	808dcec <__aeabi_d2f>
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
 8081c1c:	2202      	movs	r2, #2
 8081c1e:	4601      	mov	r1, r0
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 8081c20:	4605      	mov	r5, r0
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
 8081c22:	a804      	add	r0, sp, #16
 8081c24:	f009 fcad 	bl	808b582 <_ZN6StringC1Efi>
 8081c28:	4668      	mov	r0, sp
 8081c2a:	a904      	add	r1, sp, #16
 8081c2c:	f009 fc6c 	bl	808b508 <_ZN6StringaSEOS_>
 8081c30:	a804      	add	r0, sp, #16
 8081c32:	f009 fbd5 	bl	808b3e0 <_ZN6StringD1Ev>
 8081c36:	e747      	b.n	8081ac8 <_Z10readAlpha2v+0x70>
        else if(readTemperature() <= 25){
 8081c38:	f7ff fce6 	bl	8081608 <_Z15readTemperaturev>
 8081c3c:	4927      	ldr	r1, [pc, #156]	; (8081cdc <_Z10readAlpha2v+0x284>)
 8081c3e:	f00c fb5b 	bl	808e2f8 <__aeabi_fcmple>
 8081c42:	b120      	cbz	r0, 8081c4e <_Z10readAlpha2v+0x1f6>
          correctedCurrent = ((sensorCurrent) - (-1)*(auxCurrent));
 8081c44:	4621      	mov	r1, r4
 8081c46:	4628      	mov	r0, r5
 8081c48:	f00c f8a6 	bl	808dd98 <__addsf3>
 8081c4c:	e7db      	b.n	8081c06 <_Z10readAlpha2v+0x1ae>
        else if(readTemperature() > 25){
 8081c4e:	f7ff fcdb 	bl	8081608 <_Z15readTemperaturev>
 8081c52:	4922      	ldr	r1, [pc, #136]	; (8081cdc <_Z10readAlpha2v+0x284>)
 8081c54:	f00c fb64 	bl	808e320 <__aeabi_fcmpgt>
 8081c58:	2800      	cmp	r0, #0
 8081c5a:	d0d5      	beq.n	8081c08 <_Z10readAlpha2v+0x1b0>
          correctedCurrent = ((sensorCurrent) - (-0.76)*(auxCurrent));
 8081c5c:	4620      	mov	r0, r4
 8081c5e:	f00b fcf5 	bl	808d64c <__aeabi_f2d>
 8081c62:	a30b      	add	r3, pc, #44	; (adr r3, 8081c90 <_Z10readAlpha2v+0x238>)
 8081c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081c68:	f00b fd48 	bl	808d6fc <__aeabi_dmul>
 8081c6c:	4680      	mov	r8, r0
 8081c6e:	4628      	mov	r0, r5
 8081c70:	4689      	mov	r9, r1
 8081c72:	f00b fceb 	bl	808d64c <__aeabi_f2d>
 8081c76:	4602      	mov	r2, r0
 8081c78:	460b      	mov	r3, r1
 8081c7a:	4640      	mov	r0, r8
 8081c7c:	4649      	mov	r1, r9
 8081c7e:	f00b fb87 	bl	808d390 <__adddf3>
 8081c82:	f00c f833 	bl	808dcec <__aeabi_d2f>
 8081c86:	e7be      	b.n	8081c06 <_Z10readAlpha2v+0x1ae>
 8081c88:	d4fdf3b6 	.word	0xd4fdf3b6
 8081c8c:	3fd6e978 	.word	0x3fd6e978
 8081c90:	851eb852 	.word	0x851eb852
 8081c94:	3fe851eb 	.word	0x3fe851eb
 8081c98:	20000690 	.word	0x20000690
 8081c9c:	080942e2 	.word	0x080942e2
 8081ca0:	08091cc2 	.word	0x08091cc2
 8081ca4:	200000cc 	.word	0x200000cc
 8081ca8:	08091cd8 	.word	0x08091cd8
 8081cac:	2000076d 	.word	0x2000076d
 8081cb0:	08091d0d 	.word	0x08091d0d
 8081cb4:	08091d34 	.word	0x08091d34
 8081cb8:	200005de 	.word	0x200005de
 8081cbc:	20000084 	.word	0x20000084
 8081cc0:	447a0000 	.word	0x447a0000
 8081cc4:	3ff40000 	.word	0x3ff40000
 8081cc8:	3fe00000 	.word	0x3fe00000
 8081ccc:	08091cfd 	.word	0x08091cfd
 8081cd0:	c2f00000 	.word	0xc2f00000
 8081cd4:	c3160000 	.word	0xc3160000
 8081cd8:	41700000 	.word	0x41700000
 8081cdc:	41c80000 	.word	0x41c80000

08081ce0 <_Z12writeLogFile6String>:
    }else{
        O3_float = getEspOzoneData();
    }
}

void writeLogFile(String data){
 8081ce0:	b530      	push	{r4, r5, lr}
   * \param[in] csPin SD card chip select pin.
   * \param[in] divisor SPI divisor.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, uint8_t divisor = 2) {
    return SdFatBase::begin(&m_spi, csPin, divisor);
 8081ce2:	491c      	ldr	r1, [pc, #112]	; (8081d54 <_Z12writeLogFile6String+0x74>)
 8081ce4:	4604      	mov	r4, r0
 8081ce6:	b085      	sub	sp, #20
 8081ce8:	2302      	movs	r3, #2
 8081cea:	220c      	movs	r2, #12
 8081cec:	f5a1 608e 	sub.w	r0, r1, #1136	; 0x470
 8081cf0:	f7ff f8f4 	bl	8080edc <_ZN9SdFatBase5beginEP9SdSpiBasehh>
  if (sd.begin(CS)){
 8081cf4:	b340      	cbz	r0, 8081d48 <_Z12writeLogFile6String+0x68>
      Serial.println("Writing data to log file.");
 8081cf6:	f00a fe89 	bl	808ca0c <_Z16_fetch_usbserialv>
 8081cfa:	4917      	ldr	r1, [pc, #92]	; (8081d58 <_Z12writeLogFile6String+0x78>)
 8081cfc:	f009 fdcb 	bl	808b896 <_ZN5Print7printlnEPKc>
    return open(m_cwd, path, oflag);
 8081d00:	4a16      	ldr	r2, [pc, #88]	; (8081d5c <_Z12writeLogFile6String+0x7c>)
 8081d02:	4917      	ldr	r1, [pc, #92]	; (8081d60 <_Z12writeLogFile6String+0x80>)
      log_file.open(logFileName, O_CREAT | O_APPEND | O_WRITE);
      if(log_file_started == 0){
 8081d04:	4d17      	ldr	r5, [pc, #92]	; (8081d64 <_Z12writeLogFile6String+0x84>)
 8081d06:	2346      	movs	r3, #70	; 0x46
 8081d08:	6812      	ldr	r2, [r2, #0]
 8081d0a:	6809      	ldr	r1, [r1, #0]
 8081d0c:	4816      	ldr	r0, [pc, #88]	; (8081d68 <_Z12writeLogFile6String+0x88>)
 8081d0e:	f006 fe46 	bl	808899e <_ZN7FatFile4openEPS_PKch>
 8081d12:	682b      	ldr	r3, [r5, #0]
 8081d14:	b97b      	cbnz	r3, 8081d36 <_Z12writeLogFile6String+0x56>
          log_file.println("File Start timestamp: ");
 8081d16:	4915      	ldr	r1, [pc, #84]	; (8081d6c <_Z12writeLogFile6String+0x8c>)
 8081d18:	4815      	ldr	r0, [pc, #84]	; (8081d70 <_Z12writeLogFile6String+0x90>)
 8081d1a:	f009 fdbc 	bl	808b896 <_ZN5Print7printlnEPKc>
          log_file.println(Time.timeStr());
 8081d1e:	4668      	mov	r0, sp
 8081d20:	f7fe fff2 	bl	8080d08 <_ZN9TimeClass7timeStrEv.isra.0>
 8081d24:	9900      	ldr	r1, [sp, #0]
 8081d26:	4812      	ldr	r0, [pc, #72]	; (8081d70 <_Z12writeLogFile6String+0x90>)
 8081d28:	f009 fdb5 	bl	808b896 <_ZN5Print7printlnEPKc>
 8081d2c:	4668      	mov	r0, sp
 8081d2e:	f009 fb57 	bl	808b3e0 <_ZN6StringD1Ev>
          log_file_started = 1;
 8081d32:	2301      	movs	r3, #1
 8081d34:	602b      	str	r3, [r5, #0]
      }
      log_file.println(data);
 8081d36:	6821      	ldr	r1, [r4, #0]
 8081d38:	480d      	ldr	r0, [pc, #52]	; (8081d70 <_Z12writeLogFile6String+0x90>)
 8081d3a:	f009 fdac 	bl	808b896 <_ZN5Print7printlnEPKc>

      log_file.close();
 8081d3e:	480a      	ldr	r0, [pc, #40]	; (8081d68 <_Z12writeLogFile6String+0x88>)
 8081d40:	f006 fe26 	bl	8088990 <_ZN7FatFile5closeEv>
  }else{
    Serial.println("Unable to write to log file");
  }
}
 8081d44:	b005      	add	sp, #20
 8081d46:	bd30      	pop	{r4, r5, pc}
    Serial.println("Unable to write to log file");
 8081d48:	f00a fe60 	bl	808ca0c <_Z16_fetch_usbserialv>
 8081d4c:	4909      	ldr	r1, [pc, #36]	; (8081d74 <_Z12writeLogFile6String+0x94>)
 8081d4e:	f009 fda2 	bl	808b896 <_ZN5Print7printlnEPKc>
}
 8081d52:	e7f7      	b.n	8081d44 <_Z12writeLogFile6String+0x64>
 8081d54:	20000cd0 	.word	0x20000cd0
 8081d58:	08091d38 	.word	0x08091d38
 8081d5c:	200007b4 	.word	0x200007b4
 8081d60:	20000d5c 	.word	0x20000d5c
 8081d64:	200007f0 	.word	0x200007f0
 8081d68:	200007cc 	.word	0x200007cc
 8081d6c:	08091d52 	.word	0x08091d52
 8081d70:	200007c4 	.word	0x200007c4
 8081d74:	08091d69 	.word	0x08091d69

08081d78 <_Z13readGpsStreamv>:
void readGpsStream(void){
 8081d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8081d7c:	b08c      	sub	sp, #48	; 0x30
    String gps_sentence = "init";
 8081d7e:	4668      	mov	r0, sp
 8081d80:	4996      	ldr	r1, [pc, #600]	; (8081fdc <_Z13readGpsStreamv+0x264>)
 8081d82:	f009 fb77 	bl	808b474 <_ZN6StringC1EPKc>
        if(prefix_string.equals("GGA")){
 8081d86:	4f96      	ldr	r7, [pc, #600]	; (8081fe0 <_Z13readGpsStreamv+0x268>)
        }else if(gps_sentence.equals("init")){
 8081d88:	f8df 8250 	ldr.w	r8, [pc, #592]	; 8081fdc <_Z13readGpsStreamv+0x264>
            Serial.println("Error reading GPS");
 8081d8c:	4e95      	ldr	r6, [pc, #596]	; (8081fe4 <_Z13readGpsStreamv+0x26c>)
        gps_sentence = Serial5.readStringUntil('\r');
 8081d8e:	f7ff f869 	bl	8080e64 <_Z22__fetch_global_Serial5v>
 8081d92:	220d      	movs	r2, #13
 8081d94:	4601      	mov	r1, r0
 8081d96:	a808      	add	r0, sp, #32
 8081d98:	f009 ff44 	bl	808bc24 <_ZN6Stream15readStringUntilEc>
 8081d9c:	a908      	add	r1, sp, #32
 8081d9e:	4668      	mov	r0, sp
 8081da0:	f009 fbb2 	bl	808b508 <_ZN6StringaSEOS_>
 8081da4:	a808      	add	r0, sp, #32
 8081da6:	f009 fb1b 	bl	808b3e0 <_ZN6StringD1Ev>
        String prefix_string = gps_sentence.substring(4,7);
 8081daa:	2307      	movs	r3, #7
 8081dac:	2204      	movs	r2, #4
 8081dae:	4669      	mov	r1, sp
 8081db0:	a804      	add	r0, sp, #16
 8081db2:	f009 fced 	bl	808b790 <_ZNK6String9substringEjj>
        if(prefix_string.equals("GGA")){
 8081db6:	4639      	mov	r1, r7
 8081db8:	a804      	add	r0, sp, #16
 8081dba:	f009 fc9f 	bl	808b6fc <_ZNK6String6equalsEPKc>
 8081dbe:	4605      	mov	r5, r0
 8081dc0:	2800      	cmp	r0, #0
 8081dc2:	d153      	bne.n	8081e6c <_Z13readGpsStreamv+0xf4>
        }else if(gps_sentence.equals("init")){
 8081dc4:	4641      	mov	r1, r8
 8081dc6:	4668      	mov	r0, sp
 8081dc8:	f009 fc98 	bl	808b6fc <_ZNK6String6equalsEPKc>
 8081dcc:	4604      	mov	r4, r0
 8081dce:	2800      	cmp	r0, #0
 8081dd0:	d04f      	beq.n	8081e72 <_Z13readGpsStreamv+0xfa>
            Serial.println("Error reading GPS");
 8081dd2:	f00a fe1b 	bl	808ca0c <_Z16_fetch_usbserialv>
 8081dd6:	4631      	mov	r1, r6
 8081dd8:	f009 fd5d 	bl	808b896 <_ZN5Print7printlnEPKc>
            writeLogFile("Error reading GPS");
 8081ddc:	4631      	mov	r1, r6
 8081dde:	a808      	add	r0, sp, #32
 8081de0:	f009 fb48 	bl	808b474 <_ZN6StringC1EPKc>
 8081de4:	a808      	add	r0, sp, #32
 8081de6:	f7ff ff7b 	bl	8081ce0 <_Z12writeLogFile6String>
 8081dea:	a808      	add	r0, sp, #32
 8081dec:	f009 faf8 	bl	808b3e0 <_ZN6StringD1Ev>
            error = 1;
 8081df0:	2401      	movs	r4, #1
        String prefix_string = gps_sentence.substring(4,7);
 8081df2:	a804      	add	r0, sp, #16
 8081df4:	f009 faf4 	bl	808b3e0 <_ZN6StringD1Ev>
    while(!stringFound && !error){
 8081df8:	b385      	cbz	r5, 8081e5c <_Z13readGpsStreamv+0xe4>
 8081dfa:	2400      	movs	r4, #0
 8081dfc:	4627      	mov	r7, r4
                        gps.set_horizontalDillution(hdString);
 8081dfe:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 8081ffc <_Z13readGpsStreamv+0x284>
                        status_word.status_int &= 0xFFF3;
 8081e02:	4e79      	ldr	r6, [pc, #484]	; (8081fe8 <_Z13readGpsStreamv+0x270>)
        for(int a = 0; a<gps_sentence.length(); a++){
 8081e04:	9b02      	ldr	r3, [sp, #8]
 8081e06:	42a3      	cmp	r3, r4
 8081e08:	d92a      	bls.n	8081e60 <_Z13readGpsStreamv+0xe8>
            if(gps_sentence.charAt(a) == ','){
 8081e0a:	4621      	mov	r1, r4
 8081e0c:	4668      	mov	r0, sp
 8081e0e:	f009 fcaf 	bl	808b770 <_ZNK6String6charAtEj>
 8081e12:	282c      	cmp	r0, #44	; 0x2c
 8081e14:	f104 0501 	add.w	r5, r4, #1
 8081e18:	d11e      	bne.n	8081e58 <_Z13readGpsStreamv+0xe0>
                if(comma_counter == TIME_FIELD_INDEX){
 8081e1a:	bb67      	cbnz	r7, 8081e76 <_Z13readGpsStreamv+0xfe>
                    if(gps_sentence.charAt(a+1)!=','){
 8081e1c:	4629      	mov	r1, r5
 8081e1e:	4668      	mov	r0, sp
 8081e20:	f009 fca6 	bl	808b770 <_ZNK6String6charAtEj>
 8081e24:	282c      	cmp	r0, #44	; 0x2c
 8081e26:	d016      	beq.n	8081e56 <_Z13readGpsStreamv+0xde>
                        String utc_string = gps_sentence.substring(a+1,a+11);
 8081e28:	f104 030b 	add.w	r3, r4, #11
 8081e2c:	462a      	mov	r2, r5
 8081e2e:	4669      	mov	r1, sp
 8081e30:	a808      	add	r0, sp, #32
 8081e32:	f009 fcad 	bl	808b790 <_ZNK6String9substringEjj>
                        if(debugging_enabled){
 8081e36:	4b6d      	ldr	r3, [pc, #436]	; (8081fec <_Z13readGpsStreamv+0x274>)
 8081e38:	681b      	ldr	r3, [r3, #0]
 8081e3a:	b14b      	cbz	r3, 8081e50 <_Z13readGpsStreamv+0xd8>
                            Serial.print("GPS utc string: ");
 8081e3c:	f00a fde6 	bl	808ca0c <_Z16_fetch_usbserialv>
 8081e40:	496b      	ldr	r1, [pc, #428]	; (8081ff0 <_Z13readGpsStreamv+0x278>)
 8081e42:	f009 fd15 	bl	808b870 <_ZN5Print5printEPKc>
                            Serial.println(utc_string);
 8081e46:	f00a fde1 	bl	808ca0c <_Z16_fetch_usbserialv>
 8081e4a:	9908      	ldr	r1, [sp, #32]
 8081e4c:	f009 fd23 	bl	808b896 <_ZN5Print7printlnEPKc>
                        String utc_string = gps_sentence.substring(a+1,a+11);
 8081e50:	a808      	add	r0, sp, #32
                        String hdString = gps_sentence.substring(a+1,a+3);
 8081e52:	f009 fac5 	bl	808b3e0 <_ZN6StringD1Ev>
                comma_counter++;
 8081e56:	3701      	adds	r7, #1
        for(int a = 0; a<gps_sentence.length(); a++){
 8081e58:	462c      	mov	r4, r5
 8081e5a:	e7d3      	b.n	8081e04 <_Z13readGpsStreamv+0x8c>
    while(!stringFound && !error){
 8081e5c:	2c00      	cmp	r4, #0
 8081e5e:	d096      	beq.n	8081d8e <_Z13readGpsStreamv+0x16>
    String gps_sentence = "init";
 8081e60:	4668      	mov	r0, sp
 8081e62:	f009 fabd 	bl	808b3e0 <_ZN6StringD1Ev>
}
 8081e66:	b00c      	add	sp, #48	; 0x30
 8081e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8081e6c:	2400      	movs	r4, #0
            stringFound = 1;
 8081e6e:	2501      	movs	r5, #1
 8081e70:	e7bf      	b.n	8081df2 <_Z13readGpsStreamv+0x7a>
 8081e72:	4605      	mov	r5, r0
 8081e74:	e7bd      	b.n	8081df2 <_Z13readGpsStreamv+0x7a>
                }else if(comma_counter == LATITUDE_FIELD_INDEX){
 8081e76:	2f01      	cmp	r7, #1
 8081e78:	d12f      	bne.n	8081eda <_Z13readGpsStreamv+0x162>
                    if(gps_sentence.charAt(a+1)!=','){
 8081e7a:	4629      	mov	r1, r5
 8081e7c:	4668      	mov	r0, sp
 8081e7e:	f009 fc77 	bl	808b770 <_ZNK6String6charAtEj>
 8081e82:	282c      	cmp	r0, #44	; 0x2c
 8081e84:	d0e7      	beq.n	8081e56 <_Z13readGpsStreamv+0xde>
                        String latitudeString = gps_sentence.substring(a+1,a+10);
 8081e86:	f104 030a 	add.w	r3, r4, #10
 8081e8a:	462a      	mov	r2, r5
 8081e8c:	4669      	mov	r1, sp
 8081e8e:	a804      	add	r0, sp, #16
 8081e90:	f009 fc7e 	bl	808b790 <_ZNK6String9substringEjj>
                        if(debugging_enabled){
 8081e94:	4b55      	ldr	r3, [pc, #340]	; (8081fec <_Z13readGpsStreamv+0x274>)
 8081e96:	681b      	ldr	r3, [r3, #0]
 8081e98:	b14b      	cbz	r3, 8081eae <_Z13readGpsStreamv+0x136>
                          Serial.print("Latitude string: ");
 8081e9a:	f00a fdb7 	bl	808ca0c <_Z16_fetch_usbserialv>
 8081e9e:	4955      	ldr	r1, [pc, #340]	; (8081ff4 <_Z13readGpsStreamv+0x27c>)
 8081ea0:	f009 fce6 	bl	808b870 <_ZN5Print5printEPKc>
                          Serial.print(latitudeString);
 8081ea4:	f00a fdb2 	bl	808ca0c <_Z16_fetch_usbserialv>
 8081ea8:	9904      	ldr	r1, [sp, #16]
 8081eaa:	f009 fce1 	bl	808b870 <_ZN5Print5printEPKc>
                        gps.set_lat_decimal(latitudeString, gps_sentence.charAt(a+12));
 8081eae:	a904      	add	r1, sp, #16
 8081eb0:	a808      	add	r0, sp, #32
 8081eb2:	f009 fb1e 	bl	808b4f2 <_ZN6StringC1ERKS_>
 8081eb6:	f104 010c 	add.w	r1, r4, #12
 8081eba:	4668      	mov	r0, sp
 8081ebc:	f009 fc58 	bl	808b770 <_ZNK6String6charAtEj>
 8081ec0:	a908      	add	r1, sp, #32
 8081ec2:	4602      	mov	r2, r0
 8081ec4:	4640      	mov	r0, r8
 8081ec6:	f005 fa17 	bl	80872f8 <_ZN3GPS15set_lat_decimalE6Stringc>
 8081eca:	a808      	add	r0, sp, #32
 8081ecc:	f009 fa88 	bl	808b3e0 <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF7;
 8081ed0:	8833      	ldrh	r3, [r6, #0]
 8081ed2:	f023 0308 	bic.w	r3, r3, #8
                            status_word.status_int |= 0x0004;
 8081ed6:	8033      	strh	r3, [r6, #0]
 8081ed8:	e02c      	b.n	8081f34 <_Z13readGpsStreamv+0x1bc>
                }else if(comma_counter == LONGITUDE_FIELD_INDEX){
 8081eda:	2f03      	cmp	r7, #3
 8081edc:	d12c      	bne.n	8081f38 <_Z13readGpsStreamv+0x1c0>
                    if(gps_sentence.charAt(a+1)!=','){
 8081ede:	4629      	mov	r1, r5
 8081ee0:	4668      	mov	r0, sp
 8081ee2:	f009 fc45 	bl	808b770 <_ZNK6String6charAtEj>
 8081ee6:	282c      	cmp	r0, #44	; 0x2c
 8081ee8:	d0b5      	beq.n	8081e56 <_Z13readGpsStreamv+0xde>
                        String longitudeString = gps_sentence.substring(a+1,a+11);
 8081eea:	f104 030b 	add.w	r3, r4, #11
 8081eee:	462a      	mov	r2, r5
 8081ef0:	4669      	mov	r1, sp
 8081ef2:	a804      	add	r0, sp, #16
 8081ef4:	f009 fc4c 	bl	808b790 <_ZNK6String9substringEjj>
                        if(debugging_enabled){
 8081ef8:	4b3c      	ldr	r3, [pc, #240]	; (8081fec <_Z13readGpsStreamv+0x274>)
 8081efa:	681b      	ldr	r3, [r3, #0]
 8081efc:	b14b      	cbz	r3, 8081f12 <_Z13readGpsStreamv+0x19a>
                          Serial.print("longitude string: ");
 8081efe:	f00a fd85 	bl	808ca0c <_Z16_fetch_usbserialv>
 8081f02:	493d      	ldr	r1, [pc, #244]	; (8081ff8 <_Z13readGpsStreamv+0x280>)
 8081f04:	f009 fcb4 	bl	808b870 <_ZN5Print5printEPKc>
                          Serial.print(longitudeString);
 8081f08:	f00a fd80 	bl	808ca0c <_Z16_fetch_usbserialv>
 8081f0c:	9904      	ldr	r1, [sp, #16]
 8081f0e:	f009 fcaf 	bl	808b870 <_ZN5Print5printEPKc>
                        gps.set_long_decimal(longitudeString, gps_sentence.charAt(a+13));
 8081f12:	a904      	add	r1, sp, #16
 8081f14:	a808      	add	r0, sp, #32
 8081f16:	f009 faec 	bl	808b4f2 <_ZN6StringC1ERKS_>
 8081f1a:	f104 010d 	add.w	r1, r4, #13
 8081f1e:	4668      	mov	r0, sp
 8081f20:	f009 fc26 	bl	808b770 <_ZNK6String6charAtEj>
 8081f24:	a908      	add	r1, sp, #32
 8081f26:	4602      	mov	r2, r0
 8081f28:	4640      	mov	r0, r8
 8081f2a:	f005 fa2d 	bl	8087388 <_ZN3GPS16set_long_decimalE6Stringc>
                        gps.set_satellites(numberOfSatellitesString);
 8081f2e:	a808      	add	r0, sp, #32
 8081f30:	f009 fa56 	bl	808b3e0 <_ZN6StringD1Ev>
                        String hdString = gps_sentence.substring(a+1,a+3);
 8081f34:	a804      	add	r0, sp, #16
 8081f36:	e78c      	b.n	8081e52 <_Z13readGpsStreamv+0xda>
                }else if(comma_counter == NUMBER_OF_SATELLITES_INDEX){
 8081f38:	2f06      	cmp	r7, #6
 8081f3a:	d114      	bne.n	8081f66 <_Z13readGpsStreamv+0x1ee>
                    if(gps_sentence.charAt(a+1)!=','){
 8081f3c:	4629      	mov	r1, r5
 8081f3e:	4668      	mov	r0, sp
 8081f40:	f009 fc16 	bl	808b770 <_ZNK6String6charAtEj>
 8081f44:	282c      	cmp	r0, #44	; 0x2c
 8081f46:	d086      	beq.n	8081e56 <_Z13readGpsStreamv+0xde>
                        String numberOfSatellitesString = gps_sentence.substring(a+1,a+3);
 8081f48:	462a      	mov	r2, r5
 8081f4a:	4669      	mov	r1, sp
 8081f4c:	1ce3      	adds	r3, r4, #3
 8081f4e:	a804      	add	r0, sp, #16
 8081f50:	f009 fc1e 	bl	808b790 <_ZNK6String9substringEjj>
                        gps.set_satellites(numberOfSatellitesString);
 8081f54:	a904      	add	r1, sp, #16
 8081f56:	a808      	add	r0, sp, #32
 8081f58:	f009 facb 	bl	808b4f2 <_ZN6StringC1ERKS_>
 8081f5c:	4640      	mov	r0, r8
 8081f5e:	a908      	add	r1, sp, #32
 8081f60:	f005 fa58 	bl	8087414 <_ZN3GPS14set_satellitesE6String>
 8081f64:	e7e3      	b.n	8081f2e <_Z13readGpsStreamv+0x1b6>
                }else if(comma_counter == HORZONTAL_DILLUTION_INDEX){
 8081f66:	2f07      	cmp	r7, #7
 8081f68:	f47f af75 	bne.w	8081e56 <_Z13readGpsStreamv+0xde>
                    if(gps_sentence.charAt(a+1)!=','){
 8081f6c:	4629      	mov	r1, r5
 8081f6e:	4668      	mov	r0, sp
 8081f70:	f009 fbfe 	bl	808b770 <_ZNK6String6charAtEj>
 8081f74:	282c      	cmp	r0, #44	; 0x2c
 8081f76:	f43f af6e 	beq.w	8081e56 <_Z13readGpsStreamv+0xde>
                        String hdString = gps_sentence.substring(a+1,a+3);
 8081f7a:	462a      	mov	r2, r5
 8081f7c:	1ce3      	adds	r3, r4, #3
 8081f7e:	4669      	mov	r1, sp
 8081f80:	a804      	add	r0, sp, #16
 8081f82:	f009 fc05 	bl	808b790 <_ZNK6String9substringEjj>
                        gps.set_horizontalDillution(hdString);
 8081f86:	a904      	add	r1, sp, #16
 8081f88:	a808      	add	r0, sp, #32
 8081f8a:	f009 fab2 	bl	808b4f2 <_ZN6StringC1ERKS_>
 8081f8e:	a908      	add	r1, sp, #32
 8081f90:	4640      	mov	r0, r8
 8081f92:	f005 fa47 	bl	8087424 <_ZN3GPS23set_horizontalDillutionE6String>
 8081f96:	a808      	add	r0, sp, #32
 8081f98:	f009 fa22 	bl	808b3e0 <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF3;
 8081f9c:	8833      	ldrh	r3, [r6, #0]
                        if(gps.get_horizontalDillution() < 2){
 8081f9e:	4640      	mov	r0, r8
                        status_word.status_int &= 0xFFF3;
 8081fa0:	f023 030c 	bic.w	r3, r3, #12
 8081fa4:	8033      	strh	r3, [r6, #0]
                        if(gps.get_horizontalDillution() < 2){
 8081fa6:	f005 fa53 	bl	8087450 <_ZN3GPS23get_horizontalDillutionEv>
 8081faa:	2801      	cmp	r0, #1
 8081fac:	dc03      	bgt.n	8081fb6 <_Z13readGpsStreamv+0x23e>
                            status_word.status_int |= 0x000C;
 8081fae:	8833      	ldrh	r3, [r6, #0]
 8081fb0:	f043 030c 	orr.w	r3, r3, #12
 8081fb4:	e78f      	b.n	8081ed6 <_Z13readGpsStreamv+0x15e>
                        }else if(gps.get_horizontalDillution() < 5){
 8081fb6:	4640      	mov	r0, r8
 8081fb8:	f005 fa4a 	bl	8087450 <_ZN3GPS23get_horizontalDillutionEv>
 8081fbc:	2804      	cmp	r0, #4
 8081fbe:	dc03      	bgt.n	8081fc8 <_Z13readGpsStreamv+0x250>
                            status_word.status_int |= 0x0008;
 8081fc0:	8833      	ldrh	r3, [r6, #0]
 8081fc2:	f043 0308 	orr.w	r3, r3, #8
 8081fc6:	e786      	b.n	8081ed6 <_Z13readGpsStreamv+0x15e>
                        }else if(gps.get_horizontalDillution() < 20){
 8081fc8:	4640      	mov	r0, r8
 8081fca:	f005 fa41 	bl	8087450 <_ZN3GPS23get_horizontalDillutionEv>
 8081fce:	2813      	cmp	r0, #19
 8081fd0:	dcb0      	bgt.n	8081f34 <_Z13readGpsStreamv+0x1bc>
                            status_word.status_int |= 0x0004;
 8081fd2:	8833      	ldrh	r3, [r6, #0]
 8081fd4:	f043 0304 	orr.w	r3, r3, #4
 8081fd8:	e77d      	b.n	8081ed6 <_Z13readGpsStreamv+0x15e>
 8081fda:	bf00      	nop
 8081fdc:	08091d85 	.word	0x08091d85
 8081fe0:	08091d8a 	.word	0x08091d8a
 8081fe4:	08091d8e 	.word	0x08091d8e
 8081fe8:	20000cf8 	.word	0x20000cf8
 8081fec:	20000690 	.word	0x20000690
 8081ff0:	08091da0 	.word	0x08091da0
 8081ff4:	08091db1 	.word	0x08091db1
 8081ff8:	08091dc3 	.word	0x08091dc3
 8081ffc:	20000720 	.word	0x20000720

08082000 <_Z12sendWifiInfov>:
          }
        esp_wifi_connection_status = 0;
    }
}
//send wifi information to the ESP
void sendWifiInfo(void){
 8082000:	b510      	push	{r4, lr}
 8082002:	b090      	sub	sp, #64	; 0x40

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 8082004:	491d      	ldr	r1, [pc, #116]	; (808207c <_Z12sendWifiInfov+0x7c>)
 8082006:	a808      	add	r0, sp, #32
 8082008:	f009 fa34 	bl	808b474 <_ZN6StringC1EPKc>
    String wifiCredentials = "@!" + String(ssid) + "," + String(password) + "&";
 808200c:	491c      	ldr	r1, [pc, #112]	; (8082080 <_Z12sendWifiInfov+0x80>)
 808200e:	a804      	add	r0, sp, #16
 8082010:	f009 fa6f 	bl	808b4f2 <_ZN6StringC1ERKS_>
 8082014:	a904      	add	r1, sp, #16
 8082016:	a808      	add	r0, sp, #32
 8082018:	f009 fb3c 	bl	808b694 <_ZplRK15StringSumHelperRK6String>
 808201c:	4919      	ldr	r1, [pc, #100]	; (8082084 <_Z12sendWifiInfov+0x84>)
 808201e:	f009 fb45 	bl	808b6ac <_ZplRK15StringSumHelperPKc>
 8082022:	4604      	mov	r4, r0
 8082024:	4918      	ldr	r1, [pc, #96]	; (8082088 <_Z12sendWifiInfov+0x88>)
 8082026:	a80c      	add	r0, sp, #48	; 0x30
 8082028:	f009 fa63 	bl	808b4f2 <_ZN6StringC1ERKS_>
 808202c:	a90c      	add	r1, sp, #48	; 0x30
 808202e:	4620      	mov	r0, r4
 8082030:	f009 fb30 	bl	808b694 <_ZplRK15StringSumHelperRK6String>
 8082034:	4915      	ldr	r1, [pc, #84]	; (808208c <_Z12sendWifiInfov+0x8c>)
 8082036:	f009 fb39 	bl	808b6ac <_ZplRK15StringSumHelperPKc>
 808203a:	4601      	mov	r1, r0
 808203c:	4668      	mov	r0, sp
 808203e:	f009 fa58 	bl	808b4f2 <_ZN6StringC1ERKS_>
 8082042:	a80c      	add	r0, sp, #48	; 0x30
 8082044:	f009 f9cc 	bl	808b3e0 <_ZN6StringD1Ev>
 8082048:	a804      	add	r0, sp, #16
 808204a:	f009 f9c9 	bl	808b3e0 <_ZN6StringD1Ev>
class StringSumHelper : public String
 808204e:	a808      	add	r0, sp, #32
 8082050:	f009 f9c6 	bl	808b3e0 <_ZN6StringD1Ev>
    Serial.println("Sending new wifi credentials to ESP");
 8082054:	f00a fcda 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082058:	490d      	ldr	r1, [pc, #52]	; (8082090 <_Z12sendWifiInfov+0x90>)
 808205a:	f009 fc1c 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial1.println(wifiCredentials);
 808205e:	f00a fe1f 	bl	808cca0 <_Z22__fetch_global_Serial1v>
 8082062:	9900      	ldr	r1, [sp, #0]
 8082064:	f009 fc17 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("Success!");
 8082068:	f00a fcd0 	bl	808ca0c <_Z16_fetch_usbserialv>
 808206c:	4909      	ldr	r1, [pc, #36]	; (8082094 <_Z12sendWifiInfov+0x94>)
 808206e:	f009 fc12 	bl	808b896 <_ZN5Print7printlnEPKc>
    String wifiCredentials = "@!" + String(ssid) + "," + String(password) + "&";
 8082072:	4668      	mov	r0, sp
 8082074:	f009 f9b4 	bl	808b3e0 <_ZN6StringD1Ev>
}
 8082078:	b010      	add	sp, #64	; 0x40
 808207a:	bd10      	pop	{r4, pc}
 808207c:	08091dd6 	.word	0x08091dd6
 8082080:	20000ce8 	.word	0x20000ce8
 8082084:	08094026 	.word	0x08094026
 8082088:	20000810 	.word	0x20000810
 808208c:	08092f49 	.word	0x08092f49
 8082090:	08091dd9 	.word	0x08091dd9
 8082094:	08091dfd 	.word	0x08091dfd

08082098 <_Z10checkValuePcc>:
}
char checkValue(char *thebuf, char leng)  {
    char receiveflag=0;
    int receiveSum=0;

    for(int i=0; i<(leng-2); i++) {
 8082098:	2200      	movs	r2, #0
    int receiveSum=0;
 808209a:	4613      	mov	r3, r2
char checkValue(char *thebuf, char leng)  {
 808209c:	b530      	push	{r4, r5, lr}
    for(int i=0; i<(leng-2); i++) {
 808209e:	1e8d      	subs	r5, r1, #2
 80820a0:	4295      	cmp	r5, r2
 80820a2:	dd03      	ble.n	80820ac <_Z10checkValuePcc+0x14>
      receiveSum=receiveSum+thebuf[i];
 80820a4:	5c84      	ldrb	r4, [r0, r2]
    for(int i=0; i<(leng-2); i++) {
 80820a6:	3201      	adds	r2, #1
      receiveSum=receiveSum+thebuf[i];
 80820a8:	4423      	add	r3, r4
    for(int i=0; i<(leng-2); i++) {
 80820aa:	e7f9      	b.n	80820a0 <_Z10checkValuePcc+0x8>
    }
    receiveSum=receiveSum + 0x42;

    if(receiveSum == ((thebuf[leng-2]<<8)+thebuf[leng-1])) { //check the serial data
 80820ac:	4408      	add	r0, r1
 80820ae:	f810 2c02 	ldrb.w	r2, [r0, #-2]
 80820b2:	f810 0c01 	ldrb.w	r0, [r0, #-1]
    receiveSum=receiveSum + 0x42;
 80820b6:	3342      	adds	r3, #66	; 0x42
    if(receiveSum == ((thebuf[leng-2]<<8)+thebuf[leng-1])) { //check the serial data
 80820b8:	eb00 2002 	add.w	r0, r0, r2, lsl #8
      receiveSum = 0;
      receiveflag = 1;
    }
    return receiveflag;
}
 80820bc:	1ac3      	subs	r3, r0, r3
 80820be:	4258      	negs	r0, r3
 80820c0:	4158      	adcs	r0, r3
 80820c2:	bd30      	pop	{r4, r5, pc}

080820c4 <_Z13transmitPM2_5Pc>:
    int PM01Val;
    PM01Val=((thebuf[3]<<8) + thebuf[4]); //count PM1.0 value of the air detector module
    return PM01Val;
}
//transmit PM Value to PC
float transmitPM2_5(char *thebuf) {
 80820c4:	b508      	push	{r3, lr}
    float PM2_5Val;
    PM2_5Val=((thebuf[5]<<8) + thebuf[6]);//count PM2.5 value of the air detector module
 80820c6:	7942      	ldrb	r2, [r0, #5]
 80820c8:	7980      	ldrb	r0, [r0, #6]
 80820ca:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 80820ce:	f00b ff17 	bl	808df00 <__aeabi_i2f>
    return PM2_5Val;
}
 80820d2:	bd08      	pop	{r3, pc}

080820d4 <_Z13readPlantowerv>:
void readPlantower(void){
 80820d4:	b510      	push	{r4, lr}
    if(Serial4.find("B")){    //start to read when detect 0x42
 80820d6:	f7fe fe89 	bl	8080dec <_Z22__fetch_global_Serial4v>
 80820da:	491a      	ldr	r1, [pc, #104]	; (8082144 <_Z13readPlantowerv+0x70>)
 80820dc:	f009 fd79 	bl	808bbd2 <_ZN6Stream4findEPc>
 80820e0:	b310      	cbz	r0, 8082128 <_Z13readPlantowerv+0x54>
          Serial4.readBytes(buf,LENG);
 80820e2:	4c19      	ldr	r4, [pc, #100]	; (8082148 <_Z13readPlantowerv+0x74>)
 80820e4:	f7fe fe82 	bl	8080dec <_Z22__fetch_global_Serial4v>
 80820e8:	221f      	movs	r2, #31
 80820ea:	4621      	mov	r1, r4
 80820ec:	f009 fd74 	bl	808bbd8 <_ZN6Stream9readBytesEPcj>
          if(buf[0] == 0x4d){
 80820f0:	7823      	ldrb	r3, [r4, #0]
 80820f2:	2b4d      	cmp	r3, #77	; 0x4d
 80820f4:	d117      	bne.n	8082126 <_Z13readPlantowerv+0x52>
              if(checkValue(buf,LENG)){ //All units are ug/m^3
 80820f6:	211f      	movs	r1, #31
 80820f8:	4620      	mov	r0, r4
 80820fa:	f7ff ffcd 	bl	8082098 <_Z10checkValuePcc>
 80820fe:	b190      	cbz	r0, 8082126 <_Z13readPlantowerv+0x52>
    PM01Val=((thebuf[3]<<8) + thebuf[4]); //count PM1.0 value of the air detector module
 8082100:	78e2      	ldrb	r2, [r4, #3]
 8082102:	7923      	ldrb	r3, [r4, #4]
                  PM2_5Value=transmitPM2_5(buf);//count PM2.5 value of the air detector module
 8082104:	4620      	mov	r0, r4
    PM01Val=((thebuf[3]<<8) + thebuf[4]); //count PM1.0 value of the air detector module
 8082106:	eb03 2302 	add.w	r3, r3, r2, lsl #8
                  PM01Value=transmitPM01(buf); //count PM1.0 value of the air detector module
 808210a:	4a10      	ldr	r2, [pc, #64]	; (808214c <_Z13readPlantowerv+0x78>)
 808210c:	6013      	str	r3, [r2, #0]
                  PM2_5Value=transmitPM2_5(buf);//count PM2.5 value of the air detector module
 808210e:	f7ff ffd9 	bl	80820c4 <_Z13transmitPM2_5Pc>
 8082112:	f00c f90f 	bl	808e334 <__aeabi_f2iz>
 8082116:	4b0e      	ldr	r3, [pc, #56]	; (8082150 <_Z13readPlantowerv+0x7c>)
//transmit PM Value to PC
int transmitPM10(char *thebuf)  {
    int PM10Val;
    PM10Val=((thebuf[7]<<8) + thebuf[8]); //count PM10 value of the air detector module
 8082118:	79e2      	ldrb	r2, [r4, #7]
                  PM2_5Value=transmitPM2_5(buf);//count PM2.5 value of the air detector module
 808211a:	6018      	str	r0, [r3, #0]
    PM10Val=((thebuf[7]<<8) + thebuf[8]); //count PM10 value of the air detector module
 808211c:	7a23      	ldrb	r3, [r4, #8]
 808211e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
                  PM10Value=transmitPM10(buf); //count PM10 value of the air detector module
 8082122:	4a0c      	ldr	r2, [pc, #48]	; (8082154 <_Z13readPlantowerv+0x80>)
 8082124:	6013      	str	r3, [r2, #0]
}
 8082126:	bd10      	pop	{r4, pc}
        while(Serial4.available()){
 8082128:	f7fe fe60 	bl	8080dec <_Z22__fetch_global_Serial4v>
 808212c:	6803      	ldr	r3, [r0, #0]
 808212e:	691b      	ldr	r3, [r3, #16]
 8082130:	4798      	blx	r3
 8082132:	2800      	cmp	r0, #0
 8082134:	d0f7      	beq.n	8082126 <_Z13readPlantowerv+0x52>
            char clearBuffer = Serial4.read();
 8082136:	f7fe fe59 	bl	8080dec <_Z22__fetch_global_Serial4v>
 808213a:	6803      	ldr	r3, [r0, #0]
 808213c:	695b      	ldr	r3, [r3, #20]
 808213e:	4798      	blx	r3
        while(Serial4.available()){
 8082140:	e7f2      	b.n	8082128 <_Z13readPlantowerv+0x54>
 8082142:	bf00      	nop
 8082144:	080941ac 	.word	0x080941ac
 8082148:	20000664 	.word	0x20000664
 808214c:	2000035c 	.word	0x2000035c
 8082150:	20000364 	.word	0x20000364
 8082154:	20000360 	.word	0x20000360

08082158 <_Z15outputParticlesv>:
void outputParticles(){
 8082158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        float pressure_correction = bme.pressure/100;
 808215c:	4e94      	ldr	r6, [pc, #592]	; (80823b0 <_Z15outputParticlesv+0x258>)
        if(pressure_correction > LOW_PRESSURE_LIMIT && pressure_correction < HIGH_PRESSURE_LIMIT){
 808215e:	f8df a294 	ldr.w	sl, [pc, #660]	; 80823f4 <_Z15outputParticlesv+0x29c>
            pressure_correction /= SEALEVELPRESSURE_HPA;
 8082162:	f8df b294 	ldr.w	fp, [pc, #660]	; 80823f8 <_Z15outputParticlesv+0x2a0>
void outputParticles(){
 8082166:	b0c1      	sub	sp, #260	; 0x104
    while(!Serial.available()){
 8082168:	f00a fc50 	bl	808ca0c <_Z16_fetch_usbserialv>
 808216c:	6803      	ldr	r3, [r0, #0]
 808216e:	691b      	ldr	r3, [r3, #16]
 8082170:	4798      	blx	r3
 8082172:	4604      	mov	r4, r0
 8082174:	2800      	cmp	r0, #0
 8082176:	f040 8110 	bne.w	808239a <_Z15outputParticlesv+0x242>
        if (! bme.performReading()) {
 808217a:	488e      	ldr	r0, [pc, #568]	; (80823b4 <_Z15outputParticlesv+0x25c>)
 808217c:	f006 ff26 	bl	8088fcc <_ZN15Adafruit_BME68014performReadingEv>
 8082180:	b920      	cbnz	r0, 808218c <_Z15outputParticlesv+0x34>
          Serial.println("Failed to read BME680");
 8082182:	f00a fc43 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082186:	498c      	ldr	r1, [pc, #560]	; (80823b8 <_Z15outputParticlesv+0x260>)
 8082188:	f009 fb85 	bl	808b896 <_ZN5Print7printlnEPKc>
        readPlantower();
 808218c:	f7ff ffa2 	bl	80820d4 <_Z13readPlantowerv>
        readGpsStream();
 8082190:	f7ff fdf2 	bl	8081d78 <_Z13readGpsStreamv>
        CO2_float = t6713.readPPM();
 8082194:	4889      	ldr	r0, [pc, #548]	; (80823bc <_Z15outputParticlesv+0x264>)
 8082196:	f005 f9eb 	bl	8087570 <_ZN13Telaire_T67137readPPMEv>
        CO2_float += CO2_zero;
 808219a:	4b89      	ldr	r3, [pc, #548]	; (80823c0 <_Z15outputParticlesv+0x268>)
        CO2_float = t6713.readPPM();
 808219c:	4607      	mov	r7, r0
        CO2_float += CO2_zero;
 808219e:	6818      	ldr	r0, [r3, #0]
 80821a0:	f00b feae 	bl	808df00 <__aeabi_i2f>
 80821a4:	4605      	mov	r5, r0
        CO2_float = t6713.readPPM();
 80821a6:	4638      	mov	r0, r7
 80821a8:	f00b feaa 	bl	808df00 <__aeabi_i2f>
 80821ac:	4601      	mov	r1, r0
        CO2_float += CO2_zero;
 80821ae:	4628      	mov	r0, r5
 80821b0:	f00b fdf2 	bl	808dd98 <__addsf3>
        CO2_float *= CO2_slope;
 80821b4:	4b83      	ldr	r3, [pc, #524]	; (80823c4 <_Z15outputParticlesv+0x26c>)
 80821b6:	f8df 8238 	ldr.w	r8, [pc, #568]	; 80823f0 <_Z15outputParticlesv+0x298>
 80821ba:	6819      	ldr	r1, [r3, #0]
 80821bc:	f00b fef4 	bl	808dfa8 <__aeabi_fmul>
        float pressure_correction = bme.pressure/100;
 80821c0:	4b7c      	ldr	r3, [pc, #496]	; (80823b4 <_Z15outputParticlesv+0x25c>)
 80821c2:	4631      	mov	r1, r6
        CO2_float *= CO2_slope;
 80821c4:	f8c8 0000 	str.w	r0, [r8]
 80821c8:	4605      	mov	r5, r0
        float pressure_correction = bme.pressure/100;
 80821ca:	6858      	ldr	r0, [r3, #4]
 80821cc:	f00b ffa0 	bl	808e110 <__aeabi_fdiv>
        if(pressure_correction > LOW_PRESSURE_LIMIT && pressure_correction < HIGH_PRESSURE_LIMIT){
 80821d0:	4631      	mov	r1, r6
        float pressure_correction = bme.pressure/100;
 80821d2:	4607      	mov	r7, r0
        if(pressure_correction > LOW_PRESSURE_LIMIT && pressure_correction < HIGH_PRESSURE_LIMIT){
 80821d4:	f00c f8a4 	bl	808e320 <__aeabi_fcmpgt>
 80821d8:	b168      	cbz	r0, 80821f6 <_Z15outputParticlesv+0x9e>
 80821da:	4651      	mov	r1, sl
 80821dc:	4638      	mov	r0, r7
 80821de:	f00c f881 	bl	808e2e4 <__aeabi_fcmplt>
 80821e2:	b140      	cbz	r0, 80821f6 <_Z15outputParticlesv+0x9e>
            pressure_correction /= SEALEVELPRESSURE_HPA;
 80821e4:	4659      	mov	r1, fp
 80821e6:	4638      	mov	r0, r7
 80821e8:	f00b ff92 	bl	808e110 <__aeabi_fdiv>
            CO2_float *= pressure_correction;
 80821ec:	4629      	mov	r1, r5
 80821ee:	f00b fedb 	bl	808dfa8 <__aeabi_fmul>
 80821f2:	f8c8 0000 	str.w	r0, [r8]
        pm_25_correction_factor = PM_25_CONSTANT_A + (PM_25_CONSTANT_B*(readHumidity()/100))/(1 - (readHumidity()/100));
 80821f6:	f7ff fa81 	bl	80816fc <_Z12readHumidityv>
 80821fa:	4607      	mov	r7, r0
 80821fc:	f7ff fa7e 	bl	80816fc <_Z12readHumidityv>
 8082200:	4631      	mov	r1, r6
 8082202:	4605      	mov	r5, r0
 8082204:	4638      	mov	r0, r7
 8082206:	f00b ff83 	bl	808e110 <__aeabi_fdiv>
 808220a:	f00b fa1f 	bl	808d64c <__aeabi_f2d>
 808220e:	a364      	add	r3, pc, #400	; (adr r3, 80823a0 <_Z15outputParticlesv+0x248>)
 8082210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8082214:	f00b fa72 	bl	808d6fc <__aeabi_dmul>
 8082218:	4680      	mov	r8, r0
 808221a:	4689      	mov	r9, r1
 808221c:	4628      	mov	r0, r5
 808221e:	4631      	mov	r1, r6
 8082220:	f00b ff76 	bl	808e110 <__aeabi_fdiv>
 8082224:	4601      	mov	r1, r0
 8082226:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 808222a:	f00b fdb3 	bl	808dd94 <__aeabi_fsub>
 808222e:	f00b fa0d 	bl	808d64c <__aeabi_f2d>
 8082232:	4602      	mov	r2, r0
 8082234:	460b      	mov	r3, r1
 8082236:	4640      	mov	r0, r8
 8082238:	4649      	mov	r1, r9
 808223a:	f00b fb89 	bl	808d950 <__aeabi_ddiv>
 808223e:	a35a      	add	r3, pc, #360	; (adr r3, 80823a8 <_Z15outputParticlesv+0x250>)
 8082240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8082244:	f00b f8a4 	bl	808d390 <__adddf3>
 8082248:	f00b fd50 	bl	808dcec <__aeabi_d2f>
 808224c:	4605      	mov	r5, r0
 808224e:	4b5e      	ldr	r3, [pc, #376]	; (80823c8 <_Z15outputParticlesv+0x270>)
        corrected_PM_25 = PM2_5Value * pm_25_correction_factor;
 8082250:	4f5e      	ldr	r7, [pc, #376]	; (80823cc <_Z15outputParticlesv+0x274>)
        pm_25_correction_factor = PM_25_CONSTANT_A + (PM_25_CONSTANT_B*(readHumidity()/100))/(1 - (readHumidity()/100));
 8082252:	6018      	str	r0, [r3, #0]
        corrected_PM_25 = PM2_5Value * pm_25_correction_factor;
 8082254:	4b5e      	ldr	r3, [pc, #376]	; (80823d0 <_Z15outputParticlesv+0x278>)
            ble_output_array[3 + i*(BLE_PAYLOAD_SIZE)] = sample_counter;
 8082256:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80823fc <_Z15outputParticlesv+0x2a4>
        corrected_PM_25 = PM2_5Value * pm_25_correction_factor;
 808225a:	6818      	ldr	r0, [r3, #0]
 808225c:	f00b fe50 	bl	808df00 <__aeabi_i2f>
 8082260:	4629      	mov	r1, r5
 8082262:	f00b fea1 	bl	808dfa8 <__aeabi_fmul>
            wordBytes.myWord = gps.get_latitudeWhole();
 8082266:	4d5b      	ldr	r5, [pc, #364]	; (80823d4 <_Z15outputParticlesv+0x27c>)
        corrected_PM_25 = PM2_5Value * pm_25_correction_factor;
 8082268:	6038      	str	r0, [r7, #0]
        for(int i=0; i<5; i++){
 808226a:	f10d 090c 	add.w	r9, sp, #12
            ble_output_array[0 + i*(BLE_PAYLOAD_SIZE)] = 1;
 808226e:	2201      	movs	r2, #1
 8082270:	f889 2000 	strb.w	r2, [r9]
            wordBytes.myWord = DEVICE_id;
 8082274:	4a58      	ldr	r2, [pc, #352]	; (80823d8 <_Z15outputParticlesv+0x280>)
 8082276:	6812      	ldr	r2, [r2, #0]
            ble_output_array[1 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8082278:	f889 2001 	strb.w	r2, [r9, #1]
            ble_output_array[2 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 808227c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8082280:	f889 2002 	strb.w	r2, [r9, #2]
            ble_output_array[3 + i*(BLE_PAYLOAD_SIZE)] = sample_counter;
 8082284:	f8d8 2000 	ldr.w	r2, [r8]
 8082288:	f889 2003 	strb.w	r2, [r9, #3]
            if(i == 0){
 808228c:	2c00      	cmp	r4, #0
 808228e:	d166      	bne.n	808235e <_Z15outputParticlesv+0x206>
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = BATTERY_PACKET_CONSTANT;
 8082290:	2278      	movs	r2, #120	; 0x78
                floatBytes.myFloat = fuel.getSoC();
 8082292:	4852      	ldr	r0, [pc, #328]	; (80823dc <_Z15outputParticlesv+0x284>)
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = BATTERY_PACKET_CONSTANT;
 8082294:	f88d 2010 	strb.w	r2, [sp, #16]
                floatBytes.myFloat = fuel.getSoC();
 8082298:	f009 ff50 	bl	808c13c <_ZN9FuelGauge6getSoCEv>
            ble_output_array[6 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
 808229c:	f3c0 2207 	ubfx	r2, r0, #8, #8
            ble_output_array[5 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[0];
 80822a0:	f889 0005 	strb.w	r0, [r9, #5]
            ble_output_array[6 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
 80822a4:	f889 2006 	strb.w	r2, [r9, #6]
            ble_output_array[7 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[2];
 80822a8:	f3c0 4207 	ubfx	r2, r0, #16, #8
            ble_output_array[8 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[3];
 80822ac:	f3c0 6007 	ubfx	r0, r0, #24, #8
            ble_output_array[7 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[2];
 80822b0:	f889 2007 	strb.w	r2, [r9, #7]
            ble_output_array[8 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[3];
 80822b4:	f889 0008 	strb.w	r0, [r9, #8]
            wordBytes.myWord = gps.get_latitudeWhole();
 80822b8:	4628      	mov	r0, r5
 80822ba:	f005 f8ce 	bl	808745a <_ZN3GPS17get_latitudeWholeEv>
            ble_output_array[9 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 80822be:	f889 0009 	strb.w	r0, [r9, #9]
            ble_output_array[10 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 80822c2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80822c6:	f889 000a 	strb.w	r0, [r9, #10]
            wordBytes.myWord = gps.get_latitudeFrac();
 80822ca:	4628      	mov	r0, r5
 80822cc:	f005 f8c8 	bl	8087460 <_ZN3GPS16get_latitudeFracEv>
            ble_output_array[11 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 80822d0:	f889 000b 	strb.w	r0, [r9, #11]
            ble_output_array[12 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 80822d4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80822d8:	f889 000c 	strb.w	r0, [r9, #12]
            wordBytes.myWord = gps.get_longitudeWhole();
 80822dc:	4628      	mov	r0, r5
 80822de:	f005 f8c2 	bl	8087466 <_ZN3GPS18get_longitudeWholeEv>
            ble_output_array[13 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 80822e2:	f889 000d 	strb.w	r0, [r9, #13]
            ble_output_array[14 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 80822e6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80822ea:	f889 000e 	strb.w	r0, [r9, #14]
            wordBytes.myWord = gps.get_longitudeFrac();
 80822ee:	4628      	mov	r0, r5
 80822f0:	f005 f8bc 	bl	808746c <_ZN3GPS17get_longitudeFracEv>
            ble_output_array[15 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 80822f4:	f889 000f 	strb.w	r0, [r9, #15]
            ble_output_array[16 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 80822f8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80822fc:	f889 0010 	strb.w	r0, [r9, #16]
            int northSouth = gps.get_nsIndicator();
 8082300:	4628      	mov	r0, r5
 8082302:	f005 f8b6 	bl	8087472 <_ZN3GPS15get_nsIndicatorEv>
 8082306:	9001      	str	r0, [sp, #4]
            int eastWest = gps.get_ewIndicator();
 8082308:	4628      	mov	r0, r5
 808230a:	f005 f8b5 	bl	8087478 <_ZN3GPS15get_ewIndicatorEv>
            ble_output_array[17 + i*(BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
 808230e:	9a01      	ldr	r2, [sp, #4]
        for(int i=0; i<5; i++){
 8082310:	3401      	adds	r4, #1
            ble_output_array[17 + i*(BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
 8082312:	4302      	orrs	r2, r0
 8082314:	f889 2011 	strb.w	r2, [r9, #17]
            ble_output_array[18 + i*(BLE_PAYLOAD_SIZE)] = gps.get_horizontalDillution();
 8082318:	4628      	mov	r0, r5
 808231a:	f005 f899 	bl	8087450 <_ZN3GPS23get_horizontalDillutionEv>
            ble_output_array[19 + i*(BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species
 808231e:	2223      	movs	r2, #35	; 0x23
        for(int i=0; i<5; i++){
 8082320:	2c05      	cmp	r4, #5
            ble_output_array[18 + i*(BLE_PAYLOAD_SIZE)] = gps.get_horizontalDillution();
 8082322:	f889 0012 	strb.w	r0, [r9, #18]
            ble_output_array[19 + i*(BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species
 8082326:	f889 2013 	strb.w	r2, [r9, #19]
        for(int i=0; i<5; i++){
 808232a:	f109 0916 	add.w	r9, r9, #22
 808232e:	d19e      	bne.n	808226e <_Z15outputParticlesv+0x116>
        Serial1.print("$");
 8082330:	f00a fcb6 	bl	808cca0 <_Z22__fetch_global_Serial1v>
 8082334:	492a      	ldr	r1, [pc, #168]	; (80823e0 <_Z15outputParticlesv+0x288>)
 8082336:	f009 fa9b 	bl	808b870 <_ZN5Print5printEPKc>
        Serial1.write(ble_output_array, 5*BLE_PAYLOAD_SIZE);
 808233a:	f00a fcb1 	bl	808cca0 <_Z22__fetch_global_Serial1v>
 808233e:	6803      	ldr	r3, [r0, #0]
 8082340:	226e      	movs	r2, #110	; 0x6e
 8082342:	68db      	ldr	r3, [r3, #12]
 8082344:	a903      	add	r1, sp, #12
 8082346:	4798      	blx	r3
        Serial1.print("&");
 8082348:	f00a fcaa 	bl	808cca0 <_Z22__fetch_global_Serial1v>
 808234c:	4925      	ldr	r1, [pc, #148]	; (80823e4 <_Z15outputParticlesv+0x28c>)
 808234e:	f009 fa8f 	bl	808b870 <_ZN5Print5printEPKc>
        sample_counter += 1;
 8082352:	f8d8 3000 	ldr.w	r3, [r8]
 8082356:	3301      	adds	r3, #1
 8082358:	f8c8 3000 	str.w	r3, [r8]
    while(!Serial.available()){
 808235c:	e704      	b.n	8082168 <_Z15outputParticlesv+0x10>
            }else if(i == 1){
 808235e:	2c01      	cmp	r4, #1
 8082360:	d107      	bne.n	8082372 <_Z15outputParticlesv+0x21a>
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM1_PACKET_CONSTANT;
 8082362:	2272      	movs	r2, #114	; 0x72
 8082364:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
                floatBytes.myFloat = PM01Value;
 8082368:	4a1f      	ldr	r2, [pc, #124]	; (80823e8 <_Z15outputParticlesv+0x290>)
                floatBytes.myFloat = PM10Value;
 808236a:	6810      	ldr	r0, [r2, #0]
 808236c:	f00b fdc8 	bl	808df00 <__aeabi_i2f>
 8082370:	e794      	b.n	808229c <_Z15outputParticlesv+0x144>
            }else if(i == 2){
 8082372:	2c02      	cmp	r4, #2
 8082374:	d104      	bne.n	8082380 <_Z15outputParticlesv+0x228>
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM2PT5_PACKET_CONSTANT;
 8082376:	2252      	movs	r2, #82	; 0x52
                floatBytes.myFloat = corrected_PM_25;
 8082378:	6838      	ldr	r0, [r7, #0]
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM2PT5_PACKET_CONSTANT;
 808237a:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
                floatBytes.myFloat = corrected_PM_25;
 808237e:	e78d      	b.n	808229c <_Z15outputParticlesv+0x144>
            }else if(i == 3){
 8082380:	2c03      	cmp	r4, #3
 8082382:	d104      	bne.n	808238e <_Z15outputParticlesv+0x236>
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM10_PACKET_CONSTANT;
 8082384:	2271      	movs	r2, #113	; 0x71
 8082386:	f88d 2052 	strb.w	r2, [sp, #82]	; 0x52
                floatBytes.myFloat = PM10Value;
 808238a:	4a18      	ldr	r2, [pc, #96]	; (80823ec <_Z15outputParticlesv+0x294>)
 808238c:	e7ed      	b.n	808236a <_Z15outputParticlesv+0x212>
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = CARBON_DIOXIDE_PACKET_CONSTANT;
 808238e:	2243      	movs	r2, #67	; 0x43
                floatBytes.myFloat = CO2_float;
 8082390:	4b17      	ldr	r3, [pc, #92]	; (80823f0 <_Z15outputParticlesv+0x298>)
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = CARBON_DIOXIDE_PACKET_CONSTANT;
 8082392:	f889 2004 	strb.w	r2, [r9, #4]
                floatBytes.myFloat = CO2_float;
 8082396:	6818      	ldr	r0, [r3, #0]
 8082398:	e780      	b.n	808229c <_Z15outputParticlesv+0x144>
}
 808239a:	b041      	add	sp, #260	; 0x104
 808239c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80823a0:	b4395810 	.word	0xb4395810
 80823a4:	3fbe76c8 	.word	0x3fbe76c8
 80823a8:	70a3d70a 	.word	0x70a3d70a
 80823ac:	3ff30a3d 	.word	0x3ff30a3d
 80823b0:	42c80000 	.word	0x42c80000
 80823b4:	200005ec 	.word	0x200005ec
 80823b8:	08091e06 	.word	0x08091e06
 80823bc:	20000cfa 	.word	0x20000cfa
 80823c0:	2000033c 	.word	0x2000033c
 80823c4:	20000334 	.word	0x20000334
 80823c8:	20000820 	.word	0x20000820
 80823cc:	2000068c 	.word	0x2000068c
 80823d0:	20000364 	.word	0x20000364
 80823d4:	20000720 	.word	0x20000720
 80823d8:	20000080 	.word	0x20000080
 80823dc:	2000070c 	.word	0x2000070c
 80823e0:	08091e1c 	.word	0x08091e1c
 80823e4:	08092f49 	.word	0x08092f49
 80823e8:	2000035c 	.word	0x2000035c
 80823ec:	20000360 	.word	0x20000360
 80823f0:	2000032c 	.word	0x2000032c
 80823f4:	44bb8000 	.word	0x44bb8000
 80823f8:	447d5000 	.word	0x447d5000
 80823fc:	2000085c 	.word	0x2000085c

08082400 <_Z9goToSleepv>:
    return PM10Val;
}

void goToSleep(void){
 8082400:	b500      	push	{lr}
    //Serial.println("Going to sleep:)");
    digitalWrite(power_led_en, LOW);
 8082402:	4b1e      	ldr	r3, [pc, #120]	; (808247c <_Z9goToSleepv+0x7c>)
void goToSleep(void){
 8082404:	b089      	sub	sp, #36	; 0x24
    digitalWrite(power_led_en, LOW);
 8082406:	8818      	ldrh	r0, [r3, #0]
 8082408:	2100      	movs	r1, #0
 808240a:	f00a fec4 	bl	808d196 <digitalWrite>
    digitalWrite(plantower_en, LOW);
 808240e:	4b1c      	ldr	r3, [pc, #112]	; (8082480 <_Z9goToSleepv+0x80>)
 8082410:	2100      	movs	r1, #0
 8082412:	8818      	ldrh	r0, [r3, #0]
 8082414:	f00a febf 	bl	808d196 <digitalWrite>
    digitalWrite(esp_wroom_en, LOW);
 8082418:	4b1a      	ldr	r3, [pc, #104]	; (8082484 <_Z9goToSleepv+0x84>)
 808241a:	2100      	movs	r1, #0
 808241c:	8818      	ldrh	r0, [r3, #0]
 808241e:	f00a feba 	bl	808d196 <digitalWrite>
    digitalWrite(blower_en, LOW);
 8082422:	4b19      	ldr	r3, [pc, #100]	; (8082488 <_Z9goToSleepv+0x88>)
 8082424:	2100      	movs	r1, #0
 8082426:	8818      	ldrh	r0, [r3, #0]
 8082428:	f00a feb5 	bl	808d196 <digitalWrite>
    digitalWrite(co2_en, LOW);
 808242c:	4b17      	ldr	r3, [pc, #92]	; (808248c <_Z9goToSleepv+0x8c>)
 808242e:	2100      	movs	r1, #0
 8082430:	8818      	ldrh	r0, [r3, #0]
 8082432:	f00a feb0 	bl	808d196 <digitalWrite>
    digitalWrite(fiveVolt_en, LOW);
 8082436:	4b16      	ldr	r3, [pc, #88]	; (8082490 <_Z9goToSleepv+0x90>)
 8082438:	2100      	movs	r1, #0
 808243a:	8818      	ldrh	r0, [r3, #0]
 808243c:	f00a feab 	bl	808d196 <digitalWrite>
    enableLowPowerGPS();
 8082440:	f7ff f8d0 	bl	80815e4 <_Z17enableLowPowerGPSv>
    System.sleep(D4, FALLING, sleepInterval * 2);     //every 2 minutes wake up and check if battery voltage is too low
 8082444:	2104      	movs	r1, #4
 8082446:	4b13      	ldr	r3, [pc, #76]	; (8082494 <_Z9goToSleepv+0x94>)
 8082448:	4a13      	ldr	r2, [pc, #76]	; (8082498 <_Z9goToSleepv+0x98>)
 808244a:	681b      	ldr	r3, [r3, #0]
 808244c:	6812      	ldr	r2, [r2, #0]
 808244e:	005b      	lsls	r3, r3, #1
    inline static SleepResult sleep(Spark_Sleep_TypeDef sleepMode, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(sleepMode, flag, s.count()); }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
    inline static SleepResult sleep(std::chrono::seconds s) { return sleep(s.count()); }

    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) { return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag); }
 8082450:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8082454:	f8ad 1016 	strh.w	r1, [sp, #22]
 8082458:	2201      	movs	r2, #1
 808245a:	2102      	movs	r1, #2
 808245c:	9200      	str	r2, [sp, #0]
 808245e:	f88d 1015 	strb.w	r1, [sp, #21]
 8082462:	f10d 0315 	add.w	r3, sp, #21
 8082466:	f10d 0116 	add.w	r1, sp, #22
 808246a:	a806      	add	r0, sp, #24
 808246c:	f008 feb8 	bl	808b1e0 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
    System.reset();
 8082470:	f008 fe9c 	bl	808b1ac <_ZN11SystemClass5resetEv>
}
 8082474:	b009      	add	sp, #36	; 0x24
 8082476:	f85d fb04 	ldr.w	pc, [sp], #4
 808247a:	bf00      	nop
 808247c:	200000d4 	.word	0x200000d4
 8082480:	200000d0 	.word	0x200000d0
 8082484:	20000090 	.word	0x20000090
 8082488:	20000088 	.word	0x20000088
 808248c:	2000008c 	.word	0x2000008c
 8082490:	20000094 	.word	0x20000094
 8082494:	200000d8 	.word	0x200000d8
 8082498:	20000394 	.word	0x20000394

0808249c <_Z16goToSleepBatteryv>:

void goToSleepBattery(void){
 808249c:	b510      	push	{r4, lr}
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 808249e:	4c2c      	ldr	r4, [pc, #176]	; (8082550 <_Z16goToSleepBatteryv+0xb4>)
 80824a0:	2101      	movs	r1, #1
 80824a2:	8820      	ldrh	r0, [r4, #0]
 80824a4:	f00a fe77 	bl	808d196 <digitalWrite>
    delay(250);                   // waits for a second
 80824a8:	20fa      	movs	r0, #250	; 0xfa
 80824aa:	f009 fdbd 	bl	808c028 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 80824ae:	2100      	movs	r1, #0
 80824b0:	8820      	ldrh	r0, [r4, #0]
 80824b2:	f00a fe70 	bl	808d196 <digitalWrite>
    delay(250);                   // waits for a second
 80824b6:	20fa      	movs	r0, #250	; 0xfa
 80824b8:	f009 fdb6 	bl	808c028 <delay>
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 80824bc:	2101      	movs	r1, #1
 80824be:	8820      	ldrh	r0, [r4, #0]
 80824c0:	f00a fe69 	bl	808d196 <digitalWrite>
    delay(250);                   // waits for a second
 80824c4:	20fa      	movs	r0, #250	; 0xfa
 80824c6:	f009 fdaf 	bl	808c028 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 80824ca:	2100      	movs	r1, #0
 80824cc:	8820      	ldrh	r0, [r4, #0]
 80824ce:	f00a fe62 	bl	808d196 <digitalWrite>
    delay(250);                   // waits for a second
 80824d2:	20fa      	movs	r0, #250	; 0xfa
 80824d4:	f009 fda8 	bl	808c028 <delay>
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 80824d8:	2101      	movs	r1, #1
 80824da:	8820      	ldrh	r0, [r4, #0]
 80824dc:	f00a fe5b 	bl	808d196 <digitalWrite>
    delay(250);                   // waits for a second
 80824e0:	20fa      	movs	r0, #250	; 0xfa
 80824e2:	f009 fda1 	bl	808c028 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 80824e6:	2100      	movs	r1, #0
 80824e8:	8820      	ldrh	r0, [r4, #0]
 80824ea:	f00a fe54 	bl	808d196 <digitalWrite>
    delay(250);                   // waits for a second
 80824ee:	20fa      	movs	r0, #250	; 0xfa
 80824f0:	f009 fd9a 	bl	808c028 <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 80824f4:	2101      	movs	r1, #1
 80824f6:	8820      	ldrh	r0, [r4, #0]
 80824f8:	f00a fe4d 	bl	808d196 <digitalWrite>
    delay(250);                   // waits for a second
 80824fc:	20fa      	movs	r0, #250	; 0xfa
 80824fe:	f009 fd93 	bl	808c028 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 8082502:	2100      	movs	r1, #0
 8082504:	8820      	ldrh	r0, [r4, #0]
 8082506:	f00a fe46 	bl	808d196 <digitalWrite>
    delay(250);                   // waits for a second
 808250a:	20fa      	movs	r0, #250	; 0xfa
 808250c:	f009 fd8c 	bl	808c028 <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 8082510:	2101      	movs	r1, #1
 8082512:	8820      	ldrh	r0, [r4, #0]
 8082514:	f00a fe3f 	bl	808d196 <digitalWrite>
    delay(250);                   // waits for a second
 8082518:	20fa      	movs	r0, #250	; 0xfa
 808251a:	f009 fd85 	bl	808c028 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 808251e:	2100      	movs	r1, #0
 8082520:	8820      	ldrh	r0, [r4, #0]
 8082522:	f00a fe38 	bl	808d196 <digitalWrite>
    delay(250);                   // waits for a second
 8082526:	20fa      	movs	r0, #250	; 0xfa
 8082528:	f009 fd7e 	bl	808c028 <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 808252c:	2101      	movs	r1, #1
 808252e:	8820      	ldrh	r0, [r4, #0]
 8082530:	f00a fe31 	bl	808d196 <digitalWrite>
    delay(250);                   // waits for a second
 8082534:	20fa      	movs	r0, #250	; 0xfa
 8082536:	f009 fd77 	bl	808c028 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 808253a:	8820      	ldrh	r0, [r4, #0]
 808253c:	2100      	movs	r1, #0
 808253e:	f00a fe2a 	bl	808d196 <digitalWrite>
    digitalWrite(blower_en, HIGH);
    digitalWrite(co2_en, HIGH);
    digitalWrite(fiveVolt_en, HIGH);*/
    //System.sleep(SLEEP_MODE_DEEP, 600);

}
 8082542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    writeRegister(7, 0b01101011);   //turn off batfet
 8082546:	216b      	movs	r1, #107	; 0x6b
 8082548:	2007      	movs	r0, #7
 808254a:	f7fe bcf1 	b.w	8080f30 <_Z13writeRegisterhh>
 808254e:	bf00      	nop
 8082550:	200000d4 	.word	0x200000d4

08082554 <_Z8resetESPv>:

void resetESP(void){
 8082554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  digitalWrite(esp_wroom_en, LOW);
 8082556:	4f17      	ldr	r7, [pc, #92]	; (80825b4 <_Z8resetESPv+0x60>)
  digitalWrite(plantower_en, LOW);
 8082558:	4e17      	ldr	r6, [pc, #92]	; (80825b8 <_Z8resetESPv+0x64>)
  digitalWrite(esp_wroom_en, LOW);
 808255a:	8838      	ldrh	r0, [r7, #0]
  digitalWrite(blower_en, LOW);
 808255c:	4d17      	ldr	r5, [pc, #92]	; (80825bc <_Z8resetESPv+0x68>)
  digitalWrite(esp_wroom_en, LOW);
 808255e:	2100      	movs	r1, #0
 8082560:	f00a fe19 	bl	808d196 <digitalWrite>
  digitalWrite(co2_en, LOW);
 8082564:	4c16      	ldr	r4, [pc, #88]	; (80825c0 <_Z8resetESPv+0x6c>)
  digitalWrite(plantower_en, LOW);
 8082566:	8830      	ldrh	r0, [r6, #0]
 8082568:	2100      	movs	r1, #0
 808256a:	f00a fe14 	bl	808d196 <digitalWrite>
  digitalWrite(blower_en, LOW);
 808256e:	8828      	ldrh	r0, [r5, #0]
 8082570:	2100      	movs	r1, #0
 8082572:	f00a fe10 	bl	808d196 <digitalWrite>
  digitalWrite(co2_en, LOW);
 8082576:	2100      	movs	r1, #0
 8082578:	8820      	ldrh	r0, [r4, #0]
 808257a:	f00a fe0c 	bl	808d196 <digitalWrite>
  delay(1000);
 808257e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8082582:	f009 fd51 	bl	808c028 <delay>
  digitalWrite(esp_wroom_en, HIGH);
 8082586:	8838      	ldrh	r0, [r7, #0]
 8082588:	2101      	movs	r1, #1
 808258a:	f00a fe04 	bl	808d196 <digitalWrite>
  digitalWrite(plantower_en, HIGH);
 808258e:	8830      	ldrh	r0, [r6, #0]
 8082590:	2101      	movs	r1, #1
 8082592:	f00a fe00 	bl	808d196 <digitalWrite>
  digitalWrite(blower_en, HIGH);
 8082596:	8828      	ldrh	r0, [r5, #0]
 8082598:	2101      	movs	r1, #1
 808259a:	f00a fdfc 	bl	808d196 <digitalWrite>
  digitalWrite(co2_en, HIGH);
 808259e:	8820      	ldrh	r0, [r4, #0]
 80825a0:	2101      	movs	r1, #1
 80825a2:	f00a fdf8 	bl	808d196 <digitalWrite>
  delay(1000);
}
 80825a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  delay(1000);
 80825aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80825ae:	f009 bd3b 	b.w	808c028 <delay>
 80825b2:	bf00      	nop
 80825b4:	20000090 	.word	0x20000090
 80825b8:	200000d0 	.word	0x200000d0
 80825bc:	20000088 	.word	0x20000088
 80825c0:	2000008c 	.word	0x2000008c

080825c4 <_Z24serialGetWifiCredentialsv>:
    pmic.setChargeCurrent(bit7, bit6, bit5, bit4, bit3, bit2);
    chargeCurrent = pmic.getChargeCurrent();
    Serial.printf("new charge current of %d mA\n\r", total_current);
}

void serialGetWifiCredentials(void){
 80825c4:	b530      	push	{r4, r5, lr}
        operator const char*() const { return c_str(); }
 80825c6:	4d5a      	ldr	r5, [pc, #360]	; (8082730 <_Z24serialGetWifiCredentialsv+0x16c>)
 80825c8:	b095      	sub	sp, #84	; 0x54
    Serial.print("Current stored ssid: ");
 80825ca:	f00a fa1f 	bl	808ca0c <_Z16_fetch_usbserialv>
 80825ce:	4959      	ldr	r1, [pc, #356]	; (8082734 <_Z24serialGetWifiCredentialsv+0x170>)
 80825d0:	f009 f94e 	bl	808b870 <_ZN5Print5printEPKc>
 80825d4:	4c58      	ldr	r4, [pc, #352]	; (8082738 <_Z24serialGetWifiCredentialsv+0x174>)
    Serial.println(ssid);
 80825d6:	f00a fa19 	bl	808ca0c <_Z16_fetch_usbserialv>
 80825da:	6829      	ldr	r1, [r5, #0]
 80825dc:	f009 f95b 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.print("Current stored password: ");
 80825e0:	f00a fa14 	bl	808ca0c <_Z16_fetch_usbserialv>
 80825e4:	4955      	ldr	r1, [pc, #340]	; (808273c <_Z24serialGetWifiCredentialsv+0x178>)
 80825e6:	f009 f943 	bl	808b870 <_ZN5Print5printEPKc>
    Serial.println(password);
 80825ea:	f00a fa0f 	bl	808ca0c <_Z16_fetch_usbserialv>
 80825ee:	6821      	ldr	r1, [r4, #0]
 80825f0:	f009 f951 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("Please enter password in order to make changes.\n\r");
 80825f4:	f00a fa0a 	bl	808ca0c <_Z16_fetch_usbserialv>
 80825f8:	4951      	ldr	r1, [pc, #324]	; (8082740 <_Z24serialGetWifiCredentialsv+0x17c>)
 80825fa:	f009 f94c 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 80825fe:	f00a fa05 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082602:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082606:	f009 faa2 	bl	808bb4e <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 808260a:	f00a f9ff 	bl	808ca0c <_Z16_fetch_usbserialv>
 808260e:	220d      	movs	r2, #13
 8082610:	4601      	mov	r1, r0
 8082612:	4668      	mov	r0, sp
 8082614:	f009 fb06 	bl	808bc24 <_ZN6Stream15readStringUntilEc>
    if(tempString.equals("bould")){
 8082618:	4668      	mov	r0, sp
 808261a:	494a      	ldr	r1, [pc, #296]	; (8082744 <_Z24serialGetWifiCredentialsv+0x180>)
 808261c:	f009 f86e 	bl	808b6fc <_ZNK6String6equalsEPKc>
 8082620:	2800      	cmp	r0, #0
 8082622:	d074      	beq.n	808270e <_Z24serialGetWifiCredentialsv+0x14a>
        Serial.println("Password correct!");
 8082624:	f00a f9f2 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082628:	4947      	ldr	r1, [pc, #284]	; (8082748 <_Z24serialGetWifiCredentialsv+0x184>)
 808262a:	f009 f934 	bl	808b896 <_ZN5Print7printlnEPKc>
        Serial.println("Enter new ssid:");
 808262e:	f00a f9ed 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082632:	4946      	ldr	r1, [pc, #280]	; (808274c <_Z24serialGetWifiCredentialsv+0x188>)
 8082634:	f009 f92f 	bl	808b896 <_ZN5Print7printlnEPKc>
        Serial.setTimeout(50000);
 8082638:	f00a f9e8 	bl	808ca0c <_Z16_fetch_usbserialv>
 808263c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082640:	f009 fa85 	bl	808bb4e <_ZN6Stream10setTimeoutEm>
        String tempSsid = Serial.readStringUntil('\r');
 8082644:	f00a f9e2 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082648:	220d      	movs	r2, #13
 808264a:	4601      	mov	r1, r0
 808264c:	a804      	add	r0, sp, #16
 808264e:	f009 fae9 	bl	808bc24 <_ZN6Stream15readStringUntilEc>
        Serial.print("Your new ssid will be: ");
 8082652:	f00a f9db 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082656:	493e      	ldr	r1, [pc, #248]	; (8082750 <_Z24serialGetWifiCredentialsv+0x18c>)
 8082658:	f009 f90a 	bl	808b870 <_ZN5Print5printEPKc>
        Serial.println(tempSsid);
 808265c:	f00a f9d6 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082660:	9904      	ldr	r1, [sp, #16]
 8082662:	f009 f918 	bl	808b896 <_ZN5Print7printlnEPKc>
        Serial.println("Is this okay?(y or n)");
 8082666:	f00a f9d1 	bl	808ca0c <_Z16_fetch_usbserialv>
 808266a:	493a      	ldr	r1, [pc, #232]	; (8082754 <_Z24serialGetWifiCredentialsv+0x190>)
 808266c:	f009 f913 	bl	808b896 <_ZN5Print7printlnEPKc>
        String ok = Serial.readStringUntil('\r');
 8082670:	f00a f9cc 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082674:	220d      	movs	r2, #13
 8082676:	4601      	mov	r1, r0
 8082678:	a808      	add	r0, sp, #32
 808267a:	f009 fad3 	bl	808bc24 <_ZN6Stream15readStringUntilEc>
        if(ok.equals("y")){
 808267e:	4936      	ldr	r1, [pc, #216]	; (8082758 <_Z24serialGetWifiCredentialsv+0x194>)
 8082680:	a808      	add	r0, sp, #32
 8082682:	f009 f83b 	bl	808b6fc <_ZNK6String6equalsEPKc>
 8082686:	2800      	cmp	r0, #0
 8082688:	d04c      	beq.n	8082724 <_Z24serialGetWifiCredentialsv+0x160>
            Serial.println("Saving new ssid");
 808268a:	f00a f9bf 	bl	808ca0c <_Z16_fetch_usbserialv>
 808268e:	4933      	ldr	r1, [pc, #204]	; (808275c <_Z24serialGetWifiCredentialsv+0x198>)
 8082690:	f009 f901 	bl	808b896 <_ZN5Print7printlnEPKc>
            ssid = tempSsid;
 8082694:	a904      	add	r1, sp, #16
 8082696:	4628      	mov	r0, r5
 8082698:	f008 ff1c 	bl	808b4d4 <_ZN6StringaSERKS_>
            Serial.println("Enter new password");
 808269c:	f00a f9b6 	bl	808ca0c <_Z16_fetch_usbserialv>
 80826a0:	492f      	ldr	r1, [pc, #188]	; (8082760 <_Z24serialGetWifiCredentialsv+0x19c>)
 80826a2:	f009 f8f8 	bl	808b896 <_ZN5Print7printlnEPKc>
            String tempPassword = Serial.readStringUntil('\r');
 80826a6:	f00a f9b1 	bl	808ca0c <_Z16_fetch_usbserialv>
 80826aa:	220d      	movs	r2, #13
 80826ac:	4601      	mov	r1, r0
 80826ae:	a80c      	add	r0, sp, #48	; 0x30
 80826b0:	f009 fab8 	bl	808bc24 <_ZN6Stream15readStringUntilEc>
            Serial.print("Your new password will be: ");
 80826b4:	f00a f9aa 	bl	808ca0c <_Z16_fetch_usbserialv>
 80826b8:	492a      	ldr	r1, [pc, #168]	; (8082764 <_Z24serialGetWifiCredentialsv+0x1a0>)
 80826ba:	f009 f8d9 	bl	808b870 <_ZN5Print5printEPKc>
            Serial.println(tempPassword);
 80826be:	f00a f9a5 	bl	808ca0c <_Z16_fetch_usbserialv>
 80826c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80826c4:	f009 f8e7 	bl	808b896 <_ZN5Print7printlnEPKc>
            String ok = Serial.readStringUntil('\r');
 80826c8:	f00a f9a0 	bl	808ca0c <_Z16_fetch_usbserialv>
 80826cc:	220d      	movs	r2, #13
 80826ce:	4601      	mov	r1, r0
 80826d0:	a810      	add	r0, sp, #64	; 0x40
 80826d2:	f009 faa7 	bl	808bc24 <_ZN6Stream15readStringUntilEc>
            if(ok.equals("y")){
 80826d6:	4920      	ldr	r1, [pc, #128]	; (8082758 <_Z24serialGetWifiCredentialsv+0x194>)
 80826d8:	a810      	add	r0, sp, #64	; 0x40
 80826da:	f009 f80f 	bl	808b6fc <_ZNK6String6equalsEPKc>
 80826de:	b1d8      	cbz	r0, 8082718 <_Z24serialGetWifiCredentialsv+0x154>
                Serial.println("Saving new password");
 80826e0:	f00a f994 	bl	808ca0c <_Z16_fetch_usbserialv>
 80826e4:	4920      	ldr	r1, [pc, #128]	; (8082768 <_Z24serialGetWifiCredentialsv+0x1a4>)
 80826e6:	f009 f8d6 	bl	808b896 <_ZN5Print7printlnEPKc>
                password = tempPassword;
 80826ea:	a90c      	add	r1, sp, #48	; 0x30
 80826ec:	4620      	mov	r0, r4
 80826ee:	f008 fef1 	bl	808b4d4 <_ZN6StringaSERKS_>
                sendWifiInfo();
 80826f2:	f7ff fc85 	bl	8082000 <_Z12sendWifiInfov>
            String ok = Serial.readStringUntil('\r');
 80826f6:	a810      	add	r0, sp, #64	; 0x40
 80826f8:	f008 fe72 	bl	808b3e0 <_ZN6StringD1Ev>
            String tempPassword = Serial.readStringUntil('\r');
 80826fc:	a80c      	add	r0, sp, #48	; 0x30
 80826fe:	f008 fe6f 	bl	808b3e0 <_ZN6StringD1Ev>
        String ok = Serial.readStringUntil('\r');
 8082702:	a808      	add	r0, sp, #32
 8082704:	f008 fe6c 	bl	808b3e0 <_ZN6StringD1Ev>
        String tempSsid = Serial.readStringUntil('\r');
 8082708:	a804      	add	r0, sp, #16
 808270a:	f008 fe69 	bl	808b3e0 <_ZN6StringD1Ev>
    String tempString = Serial.readStringUntil('\r');
 808270e:	4668      	mov	r0, sp
 8082710:	f008 fe66 	bl	808b3e0 <_ZN6StringD1Ev>
        }else{
            Serial.println("okay, no problem\n\r");
            return;
        }
    }
}
 8082714:	b015      	add	sp, #84	; 0x54
 8082716:	bd30      	pop	{r4, r5, pc}
                Serial.println("okay, no problem\n\r");
 8082718:	f00a f978 	bl	808ca0c <_Z16_fetch_usbserialv>
 808271c:	4913      	ldr	r1, [pc, #76]	; (808276c <_Z24serialGetWifiCredentialsv+0x1a8>)
 808271e:	f009 f8ba 	bl	808b896 <_ZN5Print7printlnEPKc>
 8082722:	e7e8      	b.n	80826f6 <_Z24serialGetWifiCredentialsv+0x132>
            Serial.println("okay, no problem\n\r");
 8082724:	f00a f972 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082728:	4910      	ldr	r1, [pc, #64]	; (808276c <_Z24serialGetWifiCredentialsv+0x1a8>)
 808272a:	f009 f8b4 	bl	808b896 <_ZN5Print7printlnEPKc>
 808272e:	e7e8      	b.n	8082702 <_Z24serialGetWifiCredentialsv+0x13e>
 8082730:	20000ce8 	.word	0x20000ce8
 8082734:	08091e1e 	.word	0x08091e1e
 8082738:	20000810 	.word	0x20000810
 808273c:	08091e34 	.word	0x08091e34
 8082740:	08091e4e 	.word	0x08091e4e
 8082744:	08091e80 	.word	0x08091e80
 8082748:	08091e86 	.word	0x08091e86
 808274c:	08091e98 	.word	0x08091e98
 8082750:	08091ea8 	.word	0x08091ea8
 8082754:	08091ec0 	.word	0x08091ec0
 8082758:	080946ee 	.word	0x080946ee
 808275c:	08091ed6 	.word	0x08091ed6
 8082760:	08091ee6 	.word	0x08091ee6
 8082764:	08091ef9 	.word	0x08091ef9
 8082768:	08091f15 	.word	0x08091f15
 808276c:	08091f29 	.word	0x08091f29

08082770 <_Z26serialSetSensibleIotEnablev>:
void serialSetSensibleIotEnable(void){
 8082770:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    Serial.println("Please enter password in order to enable data push to Sensible Iot");
 8082772:	f00a f94b 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082776:	4919      	ldr	r1, [pc, #100]	; (80827dc <_Z26serialSetSensibleIotEnablev+0x6c>)
 8082778:	f009 f88d 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 808277c:	f00a f946 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082780:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082784:	f009 f9e3 	bl	808bb4e <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082788:	f00a f940 	bl	808ca0c <_Z16_fetch_usbserialv>
 808278c:	220d      	movs	r2, #13
 808278e:	4601      	mov	r1, r0
 8082790:	4668      	mov	r0, sp
 8082792:	f009 fa47 	bl	808bc24 <_ZN6Stream15readStringUntilEc>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8082796:	4668      	mov	r0, sp
 8082798:	4911      	ldr	r1, [pc, #68]	; (80827e0 <_Z26serialSetSensibleIotEnablev+0x70>)
 808279a:	f008 ffaf 	bl	808b6fc <_ZNK6String6equalsEPKc>
    if(tempString == "imsensible"){
 808279e:	b1b8      	cbz	r0, 80827d0 <_Z26serialSetSensibleIotEnablev+0x60>
        Serial.println("Password correct!");
 80827a0:	f00a f934 	bl	808ca0c <_Z16_fetch_usbserialv>
 80827a4:	490f      	ldr	r1, [pc, #60]	; (80827e4 <_Z26serialSetSensibleIotEnablev+0x74>)
 80827a6:	f009 f876 	bl	808b896 <_ZN5Print7printlnEPKc>
        Serial.println("Enabling sensible iot data push.");
 80827aa:	f00a f92f 	bl	808ca0c <_Z16_fetch_usbserialv>
 80827ae:	490e      	ldr	r1, [pc, #56]	; (80827e8 <_Z26serialSetSensibleIotEnablev+0x78>)
 80827b0:	f009 f871 	bl	808b896 <_ZN5Print7printlnEPKc>
        sensible_iot_en = 1;
 80827b4:	2301      	movs	r3, #1
 80827b6:	4c0d      	ldr	r4, [pc, #52]	; (80827ec <_Z26serialSetSensibleIotEnablev+0x7c>)
 80827b8:	6023      	str	r3, [r4, #0]
        EEPROM.put(SENSIBLEIOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 80827ba:	f00a fd2f 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 80827be:	4621      	mov	r1, r4
 80827c0:	208c      	movs	r0, #140	; 0x8c
 80827c2:	f7fe faac 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 80827c6:	4668      	mov	r0, sp
 80827c8:	f008 fe0a 	bl	808b3e0 <_ZN6StringD1Ev>
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
 80827cc:	b004      	add	sp, #16
 80827ce:	bd10      	pop	{r4, pc}
        Serial.println("\n\rIncorrect password!");
 80827d0:	f00a f91c 	bl	808ca0c <_Z16_fetch_usbserialv>
 80827d4:	4906      	ldr	r1, [pc, #24]	; (80827f0 <_Z26serialSetSensibleIotEnablev+0x80>)
 80827d6:	f009 f85e 	bl	808b896 <_ZN5Print7printlnEPKc>
 80827da:	e7f4      	b.n	80827c6 <_Z26serialSetSensibleIotEnablev+0x56>
 80827dc:	08091f3c 	.word	0x08091f3c
 80827e0:	08091f7f 	.word	0x08091f7f
 80827e4:	08091e86 	.word	0x08091e86
 80827e8:	08091f8a 	.word	0x08091f8a
 80827ec:	20000cd8 	.word	0x20000cd8
 80827f0:	08091fab 	.word	0x08091fab

080827f4 <_Z19serialResetSettingsv>:
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}

void serialResetSettings(void){
 80827f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    Serial.println();
 80827f6:	f00a f909 	bl	808ca0c <_Z16_fetch_usbserialv>
 80827fa:	f009 f840 	bl	808b87e <_ZN5Print7printlnEv>
    Serial.println("Please enter password in order to apply default settings");
 80827fe:	f00a f905 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082802:	4914      	ldr	r1, [pc, #80]	; (8082854 <_Z19serialResetSettingsv+0x60>)
 8082804:	f009 f847 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082808:	f00a f900 	bl	808ca0c <_Z16_fetch_usbserialv>
 808280c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082810:	f009 f99d 	bl	808bb4e <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082814:	f00a f8fa 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082818:	220d      	movs	r2, #13
 808281a:	4601      	mov	r1, r0
 808281c:	4668      	mov	r0, sp
 808281e:	f009 fa01 	bl	808bc24 <_ZN6Stream15readStringUntilEc>
 8082822:	4668      	mov	r0, sp
 8082824:	490c      	ldr	r1, [pc, #48]	; (8082858 <_Z19serialResetSettingsv+0x64>)
 8082826:	f008 ff69 	bl	808b6fc <_ZNK6String6equalsEPKc>


    if(tempString == "bould"){
 808282a:	b160      	cbz	r0, 8082846 <_Z19serialResetSettingsv+0x52>
        Serial.println("Password correct, resetting all settings to default!  Please reset your ID to the one shown on your enclosure.");
 808282c:	f00a f8ee 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082830:	490a      	ldr	r1, [pc, #40]	; (808285c <_Z19serialResetSettingsv+0x68>)
 8082832:	f009 f830 	bl	808b896 <_ZN5Print7printlnEPKc>
        writeDefaultSettings();
 8082836:	f7fe fb97 	bl	8080f68 <_Z20writeDefaultSettingsv>
    String tempString = Serial.readStringUntil('\r');
 808283a:	4668      	mov	r0, sp
 808283c:	f008 fdd0 	bl	808b3e0 <_ZN6StringD1Ev>
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
 8082840:	b005      	add	sp, #20
 8082842:	f85d fb04 	ldr.w	pc, [sp], #4
        Serial.println("\n\rIncorrect password!");
 8082846:	f00a f8e1 	bl	808ca0c <_Z16_fetch_usbserialv>
 808284a:	4905      	ldr	r1, [pc, #20]	; (8082860 <_Z19serialResetSettingsv+0x6c>)
 808284c:	f009 f823 	bl	808b896 <_ZN5Print7printlnEPKc>
 8082850:	e7f3      	b.n	808283a <_Z19serialResetSettingsv+0x46>
 8082852:	bf00      	nop
 8082854:	08091fc1 	.word	0x08091fc1
 8082858:	08091e80 	.word	0x08091e80
 808285c:	08091ffa 	.word	0x08091ffa
 8082860:	08091fab 	.word	0x08091fab

08082864 <_Z17serialGetTimeDatev>:

void serialGetTimeDate(void){
 8082864:	b510      	push	{r4, lr}
 8082866:	b088      	sub	sp, #32
    Serial.println("Enter new Device time and date (10 digit epoch timestamp):");
 8082868:	f00a f8d0 	bl	808ca0c <_Z16_fetch_usbserialv>
 808286c:	491e      	ldr	r1, [pc, #120]	; (80828e8 <_Z17serialGetTimeDatev+0x84>)
 808286e:	f009 f812 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082872:	f00a f8cb 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082876:	f24c 3150 	movw	r1, #50000	; 0xc350
 808287a:	f009 f968 	bl	808bb4e <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 808287e:	f00a f8c5 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082882:	220d      	movs	r2, #13
 8082884:	4601      	mov	r1, r0
 8082886:	4668      	mov	r0, sp
 8082888:	f009 f9cc 	bl	808bc24 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 808288c:	4668      	mov	r0, sp
 808288e:	f008 ffa1 	bl	808b7d4 <_ZNK6String5toIntEv>
 8082892:	4604      	mov	r4, r0
    Serial.println("");
 8082894:	f00a f8ba 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082898:	4914      	ldr	r1, [pc, #80]	; (80828ec <_Z17serialGetTimeDatev+0x88>)
 808289a:	f008 fffc 	bl	808b896 <_ZN5Print7printlnEPKc>
    if(tempValue > 966012661 && tempValue < 4121686261){       //min is the year 2000, max is the year 2100
 808289e:	4b14      	ldr	r3, [pc, #80]	; (80828f0 <_Z17serialGetTimeDatev+0x8c>)
 80828a0:	429c      	cmp	r4, r3
 80828a2:	dd1a      	ble.n	80828da <_Z17serialGetTimeDatev+0x76>
        Time.setTime(tempValue);
 80828a4:	17e1      	asrs	r1, r4, #31
 80828a6:	4620      	mov	r0, r4
 80828a8:	f009 fa50 	bl	808bd4c <_ZN9TimeClass7setTimeEx>
        Serial.print("\n\rNew Device Time:");
 80828ac:	f00a f8ae 	bl	808ca0c <_Z16_fetch_usbserialv>
 80828b0:	4910      	ldr	r1, [pc, #64]	; (80828f4 <_Z17serialGetTimeDatev+0x90>)
 80828b2:	f008 ffdd 	bl	808b870 <_ZN5Print5printEPKc>
        Serial.println(Time.timeStr());
 80828b6:	f00a f8a9 	bl	808ca0c <_Z16_fetch_usbserialv>
 80828ba:	4604      	mov	r4, r0
 80828bc:	a804      	add	r0, sp, #16
 80828be:	f7fe fa23 	bl	8080d08 <_ZN9TimeClass7timeStrEv.isra.0>
 80828c2:	4620      	mov	r0, r4
 80828c4:	9904      	ldr	r1, [sp, #16]
 80828c6:	f008 ffe6 	bl	808b896 <_ZN5Print7printlnEPKc>
 80828ca:	a804      	add	r0, sp, #16
 80828cc:	f008 fd88 	bl	808b3e0 <_ZN6StringD1Ev>
    String tempString = Serial.readStringUntil('\r');
 80828d0:	4668      	mov	r0, sp
 80828d2:	f008 fd85 	bl	808b3e0 <_ZN6StringD1Ev>
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 80828d6:	b008      	add	sp, #32
 80828d8:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 80828da:	f00a f897 	bl	808ca0c <_Z16_fetch_usbserialv>
 80828de:	4906      	ldr	r1, [pc, #24]	; (80828f8 <_Z17serialGetTimeDatev+0x94>)
 80828e0:	f008 ffd9 	bl	808b896 <_ZN5Print7printlnEPKc>
 80828e4:	e7f4      	b.n	80828d0 <_Z17serialGetTimeDatev+0x6c>
 80828e6:	bf00      	nop
 80828e8:	08092069 	.word	0x08092069
 80828ec:	080942e2 	.word	0x080942e2
 80828f0:	39942ef5 	.word	0x39942ef5
 80828f4:	080920a4 	.word	0x080920a4
 80828f8:	080920b7 	.word	0x080920b7

080828fc <_Z17serialGetCo2Slopev>:
    }else{
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetCo2Slope(void){
 80828fc:	b530      	push	{r4, r5, lr}
 80828fe:	b08b      	sub	sp, #44	; 0x2c

    Serial.println();
 8082900:	f00a f884 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082904:	f008 ffbb 	bl	808b87e <_ZN5Print7printlnEv>
    Serial.print("Current CO2 slope:");
 8082908:	f00a f880 	bl	808ca0c <_Z16_fetch_usbserialv>
 808290c:	4932      	ldr	r1, [pc, #200]	; (80829d8 <_Z17serialGetCo2Slopev+0xdc>)
 808290e:	f008 ffaf 	bl	808b870 <_ZN5Print5printEPKc>
    Serial.print(String(CO2_slope, 2));
 8082912:	f00a f87b 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082916:	4604      	mov	r4, r0
 8082918:	4d30      	ldr	r5, [pc, #192]	; (80829dc <_Z17serialGetCo2Slopev+0xe0>)
 808291a:	2202      	movs	r2, #2
 808291c:	6829      	ldr	r1, [r5, #0]
 808291e:	a806      	add	r0, sp, #24
 8082920:	f008 fe2f 	bl	808b582 <_ZN6StringC1Efi>
 8082924:	9906      	ldr	r1, [sp, #24]
 8082926:	4620      	mov	r0, r4
 8082928:	f008 ffa2 	bl	808b870 <_ZN5Print5printEPKc>
 808292c:	a806      	add	r0, sp, #24
 808292e:	f008 fd57 	bl	808b3e0 <_ZN6StringD1Ev>
    Serial.println(" ppm");
 8082932:	f00a f86b 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082936:	492a      	ldr	r1, [pc, #168]	; (80829e0 <_Z17serialGetCo2Slopev+0xe4>)
 8082938:	f008 ffad 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO2 slope\n\r");
 808293c:	f00a f866 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082940:	4928      	ldr	r1, [pc, #160]	; (80829e4 <_Z17serialGetCo2Slopev+0xe8>)
 8082942:	f008 ff95 	bl	808b870 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082946:	f00a f861 	bl	808ca0c <_Z16_fetch_usbserialv>
 808294a:	f24c 3150 	movw	r1, #50000	; 0xc350
 808294e:	f009 f8fe 	bl	808bb4e <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082952:	f00a f85b 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082956:	220d      	movs	r2, #13
 8082958:	4601      	mov	r1, r0
 808295a:	a802      	add	r0, sp, #8
 808295c:	f009 f962 	bl	808bc24 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8082960:	a802      	add	r0, sp, #8
 8082962:	f008 ff3c 	bl	808b7de <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 10.0){
 8082966:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    float tempfloat = tempString.toFloat();
 808296a:	4604      	mov	r4, r0
    if(tempfloat >= 0.5 && tempfloat < 10.0){
 808296c:	f00b fcce 	bl	808e30c <__aeabi_fcmpge>
 8082970:	b358      	cbz	r0, 80829ca <_Z17serialGetCo2Slopev+0xce>
 8082972:	4620      	mov	r0, r4
 8082974:	491c      	ldr	r1, [pc, #112]	; (80829e8 <_Z17serialGetCo2Slopev+0xec>)
 8082976:	f00b fcb5 	bl	808e2e4 <__aeabi_fcmplt>
 808297a:	b330      	cbz	r0, 80829ca <_Z17serialGetCo2Slopev+0xce>
        CO2_slope = tempfloat;
        tempfloat *= 100;
 808297c:	491b      	ldr	r1, [pc, #108]	; (80829ec <_Z17serialGetCo2Slopev+0xf0>)
 808297e:	4620      	mov	r0, r4
        CO2_slope = tempfloat;
 8082980:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 8082982:	f00b fb11 	bl	808dfa8 <__aeabi_fmul>
        tempValue = tempfloat;
 8082986:	f00b fcd5 	bl	808e334 <__aeabi_f2iz>
 808298a:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew CO2 slope: ");
 808298c:	f00a f83e 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082990:	4917      	ldr	r1, [pc, #92]	; (80829f0 <_Z17serialGetCo2Slopev+0xf4>)
 8082992:	f008 ff6d 	bl	808b870 <_ZN5Print5printEPKc>
        Serial.println(String(CO2_slope,2));
 8082996:	f00a f839 	bl	808ca0c <_Z16_fetch_usbserialv>
 808299a:	4604      	mov	r4, r0
 808299c:	2202      	movs	r2, #2
 808299e:	6829      	ldr	r1, [r5, #0]
 80829a0:	a806      	add	r0, sp, #24
 80829a2:	f008 fdee 	bl	808b582 <_ZN6StringC1Efi>
 80829a6:	9906      	ldr	r1, [sp, #24]
 80829a8:	4620      	mov	r0, r4
 80829aa:	f008 ff74 	bl	808b896 <_ZN5Print7printlnEPKc>
 80829ae:	a806      	add	r0, sp, #24
 80829b0:	f008 fd16 	bl	808b3e0 <_ZN6StringD1Ev>

        EEPROM.put(CO2_SLOPE_MEM_ADDRESS, tempValue);
 80829b4:	f00a fc32 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 80829b8:	2008      	movs	r0, #8
 80829ba:	a901      	add	r1, sp, #4
 80829bc:	f7fe f9af 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 80829c0:	a802      	add	r0, sp, #8
 80829c2:	f008 fd0d 	bl	808b3e0 <_ZN6StringD1Ev>
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 80829c6:	b00b      	add	sp, #44	; 0x2c
 80829c8:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 80829ca:	f00a f81f 	bl	808ca0c <_Z16_fetch_usbserialv>
 80829ce:	4909      	ldr	r1, [pc, #36]	; (80829f4 <_Z17serialGetCo2Slopev+0xf8>)
 80829d0:	f008 ff61 	bl	808b896 <_ZN5Print7printlnEPKc>
 80829d4:	e7f4      	b.n	80829c0 <_Z17serialGetCo2Slopev+0xc4>
 80829d6:	bf00      	nop
 80829d8:	080920c8 	.word	0x080920c8
 80829dc:	20000334 	.word	0x20000334
 80829e0:	080920db 	.word	0x080920db
 80829e4:	080920e0 	.word	0x080920e0
 80829e8:	41200000 	.word	0x41200000
 80829ec:	42c80000 	.word	0x42c80000
 80829f0:	080920f6 	.word	0x080920f6
 80829f4:	080920b7 	.word	0x080920b7

080829f8 <_Z16serialGetCoSlopev>:
    }else{
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetCoSlope(void){
 80829f8:	b530      	push	{r4, r5, lr}
 80829fa:	b08b      	sub	sp, #44	; 0x2c

    Serial.println();
 80829fc:	f00a f806 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082a00:	f008 ff3d 	bl	808b87e <_ZN5Print7printlnEv>
    Serial.print("Current CO slope:");
 8082a04:	f00a f802 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082a08:	4937      	ldr	r1, [pc, #220]	; (8082ae8 <_Z16serialGetCoSlopev+0xf0>)
 8082a0a:	f008 ff31 	bl	808b870 <_ZN5Print5printEPKc>
    Serial.print(String(CO_slope, 2));
 8082a0e:	f009 fffd 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082a12:	4604      	mov	r4, r0
 8082a14:	4d35      	ldr	r5, [pc, #212]	; (8082aec <_Z16serialGetCoSlopev+0xf4>)
 8082a16:	2202      	movs	r2, #2
 8082a18:	6829      	ldr	r1, [r5, #0]
 8082a1a:	a806      	add	r0, sp, #24
 8082a1c:	f008 fdb1 	bl	808b582 <_ZN6StringC1Efi>
 8082a20:	9906      	ldr	r1, [sp, #24]
 8082a22:	4620      	mov	r0, r4
 8082a24:	f008 ff24 	bl	808b870 <_ZN5Print5printEPKc>
 8082a28:	a806      	add	r0, sp, #24
 8082a2a:	f008 fcd9 	bl	808b3e0 <_ZN6StringD1Ev>
    Serial.println(" ppm");
 8082a2e:	f009 ffed 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082a32:	492f      	ldr	r1, [pc, #188]	; (8082af0 <_Z16serialGetCoSlopev+0xf8>)
 8082a34:	f008 ff2f 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO slope\n\r");
 8082a38:	f009 ffe8 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082a3c:	492d      	ldr	r1, [pc, #180]	; (8082af4 <_Z16serialGetCoSlopev+0xfc>)
 8082a3e:	f008 ff17 	bl	808b870 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082a42:	f009 ffe3 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082a46:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082a4a:	f009 f880 	bl	808bb4e <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082a4e:	f009 ffdd 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082a52:	220d      	movs	r2, #13
 8082a54:	4601      	mov	r1, r0
 8082a56:	a802      	add	r0, sp, #8
 8082a58:	f009 f8e4 	bl	808bc24 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8082a5c:	a802      	add	r0, sp, #8
 8082a5e:	f008 febe 	bl	808b7de <_ZNK6String7toFloatEv>
 8082a62:	4604      	mov	r4, r0
    int tempValue;

    if(tempfloat >= 0.1 && tempfloat < 2.0){
 8082a64:	f00a fdf2 	bl	808d64c <__aeabi_f2d>
 8082a68:	a31d      	add	r3, pc, #116	; (adr r3, 8082ae0 <_Z16serialGetCoSlopev+0xe8>)
 8082a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8082a6e:	f00b f8cb 	bl	808dc08 <__aeabi_dcmpge>
 8082a72:	b360      	cbz	r0, 8082ace <_Z16serialGetCoSlopev+0xd6>
 8082a74:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8082a78:	4620      	mov	r0, r4
 8082a7a:	f00b fc33 	bl	808e2e4 <__aeabi_fcmplt>
 8082a7e:	b330      	cbz	r0, 8082ace <_Z16serialGetCoSlopev+0xd6>
        CO_slope = tempfloat;
        tempfloat *= 100;
 8082a80:	491d      	ldr	r1, [pc, #116]	; (8082af8 <_Z16serialGetCoSlopev+0x100>)
 8082a82:	4620      	mov	r0, r4
        CO_slope = tempfloat;
 8082a84:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 8082a86:	f00b fa8f 	bl	808dfa8 <__aeabi_fmul>
        tempValue = tempfloat;
 8082a8a:	f00b fc53 	bl	808e334 <__aeabi_f2iz>
 8082a8e:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew CO slope: ");
 8082a90:	f009 ffbc 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082a94:	4919      	ldr	r1, [pc, #100]	; (8082afc <_Z16serialGetCoSlopev+0x104>)
 8082a96:	f008 feeb 	bl	808b870 <_ZN5Print5printEPKc>
        Serial.println(String(CO_slope,2));
 8082a9a:	f009 ffb7 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082a9e:	4604      	mov	r4, r0
 8082aa0:	2202      	movs	r2, #2
 8082aa2:	6829      	ldr	r1, [r5, #0]
 8082aa4:	a806      	add	r0, sp, #24
 8082aa6:	f008 fd6c 	bl	808b582 <_ZN6StringC1Efi>
 8082aaa:	9906      	ldr	r1, [sp, #24]
 8082aac:	4620      	mov	r0, r4
 8082aae:	f008 fef2 	bl	808b896 <_ZN5Print7printlnEPKc>
 8082ab2:	a806      	add	r0, sp, #24
 8082ab4:	f008 fc94 	bl	808b3e0 <_ZN6StringD1Ev>

        EEPROM.put(CO_SLOPE_MEM_ADDRESS, tempValue);
 8082ab8:	f00a fbb0 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8082abc:	2010      	movs	r0, #16
 8082abe:	a901      	add	r1, sp, #4
 8082ac0:	f7fe f92d 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8082ac4:	a802      	add	r0, sp, #8
 8082ac6:	f008 fc8b 	bl	808b3e0 <_ZN6StringD1Ev>
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8082aca:	b00b      	add	sp, #44	; 0x2c
 8082acc:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 8082ace:	f009 ff9d 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082ad2:	490b      	ldr	r1, [pc, #44]	; (8082b00 <_Z16serialGetCoSlopev+0x108>)
 8082ad4:	f008 fedf 	bl	808b896 <_ZN5Print7printlnEPKc>
 8082ad8:	e7f4      	b.n	8082ac4 <_Z16serialGetCoSlopev+0xcc>
 8082ada:	bf00      	nop
 8082adc:	f3af 8000 	nop.w
 8082ae0:	9999999a 	.word	0x9999999a
 8082ae4:	3fb99999 	.word	0x3fb99999
 8082ae8:	08092108 	.word	0x08092108
 8082aec:	20000344 	.word	0x20000344
 8082af0:	080920db 	.word	0x080920db
 8082af4:	0809211a 	.word	0x0809211a
 8082af8:	42c80000 	.word	0x42c80000
 8082afc:	0809212f 	.word	0x0809212f
 8082b00:	080920b7 	.word	0x080920b7

08082b04 <_Z17serialGetPm1Slopev>:
    }else{
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetPm1Slope(void){
 8082b04:	b530      	push	{r4, r5, lr}
 8082b06:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8082b08:	f009 ff80 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082b0c:	f008 feb7 	bl	808b87e <_ZN5Print7printlnEv>
    Serial.print("Current PM1 slope:");
 8082b10:	f009 ff7c 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082b14:	4932      	ldr	r1, [pc, #200]	; (8082be0 <_Z17serialGetPm1Slopev+0xdc>)
 8082b16:	f008 feab 	bl	808b870 <_ZN5Print5printEPKc>
    Serial.print(String(PM_1_slope, 2));
 8082b1a:	f009 ff77 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082b1e:	4604      	mov	r4, r0
 8082b20:	4d30      	ldr	r5, [pc, #192]	; (8082be4 <_Z17serialGetPm1Slopev+0xe0>)
 8082b22:	2202      	movs	r2, #2
 8082b24:	6829      	ldr	r1, [r5, #0]
 8082b26:	a806      	add	r0, sp, #24
 8082b28:	f008 fd2b 	bl	808b582 <_ZN6StringC1Efi>
 8082b2c:	9906      	ldr	r1, [sp, #24]
 8082b2e:	4620      	mov	r0, r4
 8082b30:	f008 fe9e 	bl	808b870 <_ZN5Print5printEPKc>
 8082b34:	a806      	add	r0, sp, #24
 8082b36:	f008 fc53 	bl	808b3e0 <_ZN6StringD1Ev>
    Serial.println(" ");
 8082b3a:	f009 ff67 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082b3e:	492a      	ldr	r1, [pc, #168]	; (8082be8 <_Z17serialGetPm1Slopev+0xe4>)
 8082b40:	f008 fea9 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM1 slope\n\r");
 8082b44:	f009 ff62 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082b48:	4928      	ldr	r1, [pc, #160]	; (8082bec <_Z17serialGetPm1Slopev+0xe8>)
 8082b4a:	f008 fe91 	bl	808b870 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082b4e:	f009 ff5d 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082b52:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082b56:	f008 fffa 	bl	808bb4e <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082b5a:	f009 ff57 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082b5e:	220d      	movs	r2, #13
 8082b60:	4601      	mov	r1, r0
 8082b62:	a802      	add	r0, sp, #8
 8082b64:	f009 f85e 	bl	808bc24 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8082b68:	a802      	add	r0, sp, #8
 8082b6a:	f008 fe38 	bl	808b7de <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8082b6e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    float tempfloat = tempString.toFloat();
 8082b72:	4604      	mov	r4, r0
    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8082b74:	f00b fbca 	bl	808e30c <__aeabi_fcmpge>
 8082b78:	b360      	cbz	r0, 8082bd4 <_Z17serialGetPm1Slopev+0xd0>
 8082b7a:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8082b7e:	4620      	mov	r0, r4
 8082b80:	f00b fbb0 	bl	808e2e4 <__aeabi_fcmplt>
 8082b84:	b330      	cbz	r0, 8082bd4 <_Z17serialGetPm1Slopev+0xd0>
        PM_1_slope = tempfloat;
        tempfloat *= 100;
 8082b86:	491a      	ldr	r1, [pc, #104]	; (8082bf0 <_Z17serialGetPm1Slopev+0xec>)
 8082b88:	4620      	mov	r0, r4
        PM_1_slope = tempfloat;
 8082b8a:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 8082b8c:	f00b fa0c 	bl	808dfa8 <__aeabi_fmul>
        tempValue = tempfloat;
 8082b90:	f00b fbd0 	bl	808e334 <__aeabi_f2iz>
 8082b94:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew PM1 slope: ");
 8082b96:	f009 ff39 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082b9a:	4916      	ldr	r1, [pc, #88]	; (8082bf4 <_Z17serialGetPm1Slopev+0xf0>)
 8082b9c:	f008 fe68 	bl	808b870 <_ZN5Print5printEPKc>
        Serial.println(String(PM_1_slope, 2));
 8082ba0:	f009 ff34 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082ba4:	4604      	mov	r4, r0
 8082ba6:	2202      	movs	r2, #2
 8082ba8:	6829      	ldr	r1, [r5, #0]
 8082baa:	a806      	add	r0, sp, #24
 8082bac:	f008 fce9 	bl	808b582 <_ZN6StringC1Efi>
 8082bb0:	9906      	ldr	r1, [sp, #24]
 8082bb2:	4620      	mov	r0, r4
 8082bb4:	f008 fe6f 	bl	808b896 <_ZN5Print7printlnEPKc>
 8082bb8:	a806      	add	r0, sp, #24
 8082bba:	f008 fc11 	bl	808b3e0 <_ZN6StringD1Ev>

        EEPROM.put(PM_1_SLOPE_MEM_ADDRESS, tempValue);
 8082bbe:	f00a fb2d 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8082bc2:	2018      	movs	r0, #24
 8082bc4:	a901      	add	r1, sp, #4
 8082bc6:	f7fe f8aa 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8082bca:	a802      	add	r0, sp, #8
 8082bcc:	f008 fc08 	bl	808b3e0 <_ZN6StringD1Ev>
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8082bd0:	b00b      	add	sp, #44	; 0x2c
 8082bd2:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 8082bd4:	f009 ff1a 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082bd8:	4907      	ldr	r1, [pc, #28]	; (8082bf8 <_Z17serialGetPm1Slopev+0xf4>)
 8082bda:	f008 fe5c 	bl	808b896 <_ZN5Print7printlnEPKc>
 8082bde:	e7f4      	b.n	8082bca <_Z17serialGetPm1Slopev+0xc6>
 8082be0:	08092140 	.word	0x08092140
 8082be4:	20000370 	.word	0x20000370
 8082be8:	08093c34 	.word	0x08093c34
 8082bec:	08092153 	.word	0x08092153
 8082bf0:	42c80000 	.word	0x42c80000
 8082bf4:	08092169 	.word	0x08092169
 8082bf8:	080920b7 	.word	0x080920b7

08082bfc <_Z18serialGetPm25Slopev>:
    }else{
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetPm25Slope(void){
 8082bfc:	b530      	push	{r4, r5, lr}
 8082bfe:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8082c00:	f009 ff04 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082c04:	f008 fe3b 	bl	808b87e <_ZN5Print7printlnEv>
    Serial.print("Current PM2.5 slope:");
 8082c08:	f009 ff00 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082c0c:	4932      	ldr	r1, [pc, #200]	; (8082cd8 <_Z18serialGetPm25Slopev+0xdc>)
 8082c0e:	f008 fe2f 	bl	808b870 <_ZN5Print5printEPKc>
    Serial.print(String(PM_25_slope, 2));
 8082c12:	f009 fefb 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082c16:	4604      	mov	r4, r0
 8082c18:	4d30      	ldr	r5, [pc, #192]	; (8082cdc <_Z18serialGetPm25Slopev+0xe0>)
 8082c1a:	2202      	movs	r2, #2
 8082c1c:	6829      	ldr	r1, [r5, #0]
 8082c1e:	a806      	add	r0, sp, #24
 8082c20:	f008 fcaf 	bl	808b582 <_ZN6StringC1Efi>
 8082c24:	9906      	ldr	r1, [sp, #24]
 8082c26:	4620      	mov	r0, r4
 8082c28:	f008 fe22 	bl	808b870 <_ZN5Print5printEPKc>
 8082c2c:	a806      	add	r0, sp, #24
 8082c2e:	f008 fbd7 	bl	808b3e0 <_ZN6StringD1Ev>
    Serial.println(" ");
 8082c32:	f009 feeb 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082c36:	492a      	ldr	r1, [pc, #168]	; (8082ce0 <_Z18serialGetPm25Slopev+0xe4>)
 8082c38:	f008 fe2d 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM2.5 slope\n\r");
 8082c3c:	f009 fee6 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082c40:	4928      	ldr	r1, [pc, #160]	; (8082ce4 <_Z18serialGetPm25Slopev+0xe8>)
 8082c42:	f008 fe15 	bl	808b870 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082c46:	f009 fee1 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082c4a:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082c4e:	f008 ff7e 	bl	808bb4e <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082c52:	f009 fedb 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082c56:	220d      	movs	r2, #13
 8082c58:	4601      	mov	r1, r0
 8082c5a:	a802      	add	r0, sp, #8
 8082c5c:	f008 ffe2 	bl	808bc24 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8082c60:	a802      	add	r0, sp, #8
 8082c62:	f008 fdbc 	bl	808b7de <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8082c66:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    float tempfloat = tempString.toFloat();
 8082c6a:	4604      	mov	r4, r0
    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8082c6c:	f00b fb4e 	bl	808e30c <__aeabi_fcmpge>
 8082c70:	b360      	cbz	r0, 8082ccc <_Z18serialGetPm25Slopev+0xd0>
 8082c72:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8082c76:	4620      	mov	r0, r4
 8082c78:	f00b fb34 	bl	808e2e4 <__aeabi_fcmplt>
 8082c7c:	b330      	cbz	r0, 8082ccc <_Z18serialGetPm25Slopev+0xd0>
        PM_25_slope = tempfloat;
        tempfloat *= 100;
 8082c7e:	491a      	ldr	r1, [pc, #104]	; (8082ce8 <_Z18serialGetPm25Slopev+0xec>)
 8082c80:	4620      	mov	r0, r4
        PM_25_slope = tempfloat;
 8082c82:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 8082c84:	f00b f990 	bl	808dfa8 <__aeabi_fmul>
        tempValue = tempfloat;
 8082c88:	f00b fb54 	bl	808e334 <__aeabi_f2iz>
 8082c8c:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew PM2.5 slope: ");
 8082c8e:	f009 febd 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082c92:	4916      	ldr	r1, [pc, #88]	; (8082cec <_Z18serialGetPm25Slopev+0xf0>)
 8082c94:	f008 fdec 	bl	808b870 <_ZN5Print5printEPKc>
        Serial.println(String(PM_25_slope,2));
 8082c98:	f009 feb8 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082c9c:	4604      	mov	r4, r0
 8082c9e:	2202      	movs	r2, #2
 8082ca0:	6829      	ldr	r1, [r5, #0]
 8082ca2:	a806      	add	r0, sp, #24
 8082ca4:	f008 fc6d 	bl	808b582 <_ZN6StringC1Efi>
 8082ca8:	9906      	ldr	r1, [sp, #24]
 8082caa:	4620      	mov	r0, r4
 8082cac:	f008 fdf3 	bl	808b896 <_ZN5Print7printlnEPKc>
 8082cb0:	a806      	add	r0, sp, #24
 8082cb2:	f008 fb95 	bl	808b3e0 <_ZN6StringD1Ev>

        EEPROM.put(PM_25_SLOPE_MEM_ADDRESS, tempValue);
 8082cb6:	f00a fab1 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8082cba:	2020      	movs	r0, #32
 8082cbc:	a901      	add	r1, sp, #4
 8082cbe:	f7fe f82e 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8082cc2:	a802      	add	r0, sp, #8
 8082cc4:	f008 fb8c 	bl	808b3e0 <_ZN6StringD1Ev>
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8082cc8:	b00b      	add	sp, #44	; 0x2c
 8082cca:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 8082ccc:	f009 fe9e 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082cd0:	4907      	ldr	r1, [pc, #28]	; (8082cf0 <_Z18serialGetPm25Slopev+0xf4>)
 8082cd2:	f008 fde0 	bl	808b896 <_ZN5Print7printlnEPKc>
 8082cd6:	e7f4      	b.n	8082cc2 <_Z18serialGetPm25Slopev+0xc6>
 8082cd8:	0809217b 	.word	0x0809217b
 8082cdc:	20000378 	.word	0x20000378
 8082ce0:	08093c34 	.word	0x08093c34
 8082ce4:	08092190 	.word	0x08092190
 8082ce8:	42c80000 	.word	0x42c80000
 8082cec:	080921a8 	.word	0x080921a8
 8082cf0:	080920b7 	.word	0x080920b7

08082cf4 <_Z18serialGetPm10Slopev>:
    }else{
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetPm10Slope(void){
 8082cf4:	b530      	push	{r4, r5, lr}
 8082cf6:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8082cf8:	f009 fe88 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082cfc:	f008 fdbf 	bl	808b87e <_ZN5Print7printlnEv>
    Serial.print("Current PM10 slope:");
 8082d00:	f009 fe84 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082d04:	4932      	ldr	r1, [pc, #200]	; (8082dd0 <_Z18serialGetPm10Slopev+0xdc>)
 8082d06:	f008 fdb3 	bl	808b870 <_ZN5Print5printEPKc>
    Serial.print(String(PM_10_slope, 2));
 8082d0a:	f009 fe7f 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082d0e:	4604      	mov	r4, r0
 8082d10:	4d30      	ldr	r5, [pc, #192]	; (8082dd4 <_Z18serialGetPm10Slopev+0xe0>)
 8082d12:	2202      	movs	r2, #2
 8082d14:	6829      	ldr	r1, [r5, #0]
 8082d16:	a806      	add	r0, sp, #24
 8082d18:	f008 fc33 	bl	808b582 <_ZN6StringC1Efi>
 8082d1c:	9906      	ldr	r1, [sp, #24]
 8082d1e:	4620      	mov	r0, r4
 8082d20:	f008 fda6 	bl	808b870 <_ZN5Print5printEPKc>
 8082d24:	a806      	add	r0, sp, #24
 8082d26:	f008 fb5b 	bl	808b3e0 <_ZN6StringD1Ev>
    Serial.println(" ");
 8082d2a:	f009 fe6f 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082d2e:	492a      	ldr	r1, [pc, #168]	; (8082dd8 <_Z18serialGetPm10Slopev+0xe4>)
 8082d30:	f008 fdb1 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM10 slope\n\r");
 8082d34:	f009 fe6a 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082d38:	4928      	ldr	r1, [pc, #160]	; (8082ddc <_Z18serialGetPm10Slopev+0xe8>)
 8082d3a:	f008 fd99 	bl	808b870 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082d3e:	f009 fe65 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082d42:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082d46:	f008 ff02 	bl	808bb4e <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082d4a:	f009 fe5f 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082d4e:	220d      	movs	r2, #13
 8082d50:	4601      	mov	r1, r0
 8082d52:	a802      	add	r0, sp, #8
 8082d54:	f008 ff66 	bl	808bc24 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8082d58:	a802      	add	r0, sp, #8
 8082d5a:	f008 fd40 	bl	808b7de <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8082d5e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    float tempfloat = tempString.toFloat();
 8082d62:	4604      	mov	r4, r0
    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8082d64:	f00b fad2 	bl	808e30c <__aeabi_fcmpge>
 8082d68:	b360      	cbz	r0, 8082dc4 <_Z18serialGetPm10Slopev+0xd0>
 8082d6a:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8082d6e:	4620      	mov	r0, r4
 8082d70:	f00b fab8 	bl	808e2e4 <__aeabi_fcmplt>
 8082d74:	b330      	cbz	r0, 8082dc4 <_Z18serialGetPm10Slopev+0xd0>
        PM_10_slope = tempfloat;
        tempfloat *= 100;
 8082d76:	491a      	ldr	r1, [pc, #104]	; (8082de0 <_Z18serialGetPm10Slopev+0xec>)
 8082d78:	4620      	mov	r0, r4
        PM_10_slope = tempfloat;
 8082d7a:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 8082d7c:	f00b f914 	bl	808dfa8 <__aeabi_fmul>
        tempValue = tempfloat;
 8082d80:	f00b fad8 	bl	808e334 <__aeabi_f2iz>
 8082d84:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew PM10 slope: ");
 8082d86:	f009 fe41 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082d8a:	4916      	ldr	r1, [pc, #88]	; (8082de4 <_Z18serialGetPm10Slopev+0xf0>)
 8082d8c:	f008 fd70 	bl	808b870 <_ZN5Print5printEPKc>
        Serial.println(String(PM_10_slope,2));
 8082d90:	f009 fe3c 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082d94:	4604      	mov	r4, r0
 8082d96:	2202      	movs	r2, #2
 8082d98:	6829      	ldr	r1, [r5, #0]
 8082d9a:	a806      	add	r0, sp, #24
 8082d9c:	f008 fbf1 	bl	808b582 <_ZN6StringC1Efi>
 8082da0:	9906      	ldr	r1, [sp, #24]
 8082da2:	4620      	mov	r0, r4
 8082da4:	f008 fd77 	bl	808b896 <_ZN5Print7printlnEPKc>
 8082da8:	a806      	add	r0, sp, #24
 8082daa:	f008 fb19 	bl	808b3e0 <_ZN6StringD1Ev>

        EEPROM.put(PM_10_SLOPE_MEM_ADDRESS, tempValue);
 8082dae:	f00a fa35 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8082db2:	2028      	movs	r0, #40	; 0x28
 8082db4:	a901      	add	r1, sp, #4
 8082db6:	f7fd ffb2 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8082dba:	a802      	add	r0, sp, #8
 8082dbc:	f008 fb10 	bl	808b3e0 <_ZN6StringD1Ev>
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8082dc0:	b00b      	add	sp, #44	; 0x2c
 8082dc2:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 8082dc4:	f009 fe22 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082dc8:	4907      	ldr	r1, [pc, #28]	; (8082de8 <_Z18serialGetPm10Slopev+0xf4>)
 8082dca:	f008 fd64 	bl	808b896 <_ZN5Print7printlnEPKc>
 8082dce:	e7f4      	b.n	8082dba <_Z18serialGetPm10Slopev+0xc6>
 8082dd0:	080921bc 	.word	0x080921bc
 8082dd4:	20000368 	.word	0x20000368
 8082dd8:	08093c34 	.word	0x08093c34
 8082ddc:	080921d0 	.word	0x080921d0
 8082de0:	42c80000 	.word	0x42c80000
 8082de4:	080921e7 	.word	0x080921e7
 8082de8:	080920b7 	.word	0x080920b7

08082dec <_Z25serialGetTemperatureSlopev>:
    }else{
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetTemperatureSlope(void){
 8082dec:	b530      	push	{r4, r5, lr}
 8082dee:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8082df0:	f009 fe0c 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082df4:	f008 fd43 	bl	808b87e <_ZN5Print7printlnEv>
    Serial.print("Current Temperature slope:");
 8082df8:	f009 fe08 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082dfc:	4932      	ldr	r1, [pc, #200]	; (8082ec8 <_Z25serialGetTemperatureSlopev+0xdc>)
 8082dfe:	f008 fd37 	bl	808b870 <_ZN5Print5printEPKc>
    Serial.print(String(temp_slope, 2));
 8082e02:	f009 fe03 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082e06:	4604      	mov	r4, r0
 8082e08:	4d30      	ldr	r5, [pc, #192]	; (8082ecc <_Z25serialGetTemperatureSlopev+0xe0>)
 8082e0a:	2202      	movs	r2, #2
 8082e0c:	6829      	ldr	r1, [r5, #0]
 8082e0e:	a806      	add	r0, sp, #24
 8082e10:	f008 fbb7 	bl	808b582 <_ZN6StringC1Efi>
 8082e14:	9906      	ldr	r1, [sp, #24]
 8082e16:	4620      	mov	r0, r4
 8082e18:	f008 fd2a 	bl	808b870 <_ZN5Print5printEPKc>
 8082e1c:	a806      	add	r0, sp, #24
 8082e1e:	f008 fadf 	bl	808b3e0 <_ZN6StringD1Ev>
    Serial.println(" Degrees C");
 8082e22:	f009 fdf3 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082e26:	492a      	ldr	r1, [pc, #168]	; (8082ed0 <_Z25serialGetTemperatureSlopev+0xe4>)
 8082e28:	f008 fd35 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Temperature slope\n\r");
 8082e2c:	f009 fdee 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082e30:	4928      	ldr	r1, [pc, #160]	; (8082ed4 <_Z25serialGetTemperatureSlopev+0xe8>)
 8082e32:	f008 fd1d 	bl	808b870 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082e36:	f009 fde9 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082e3a:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082e3e:	f008 fe86 	bl	808bb4e <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082e42:	f009 fde3 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082e46:	220d      	movs	r2, #13
 8082e48:	4601      	mov	r1, r0
 8082e4a:	a802      	add	r0, sp, #8
 8082e4c:	f008 feea 	bl	808bc24 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8082e50:	a802      	add	r0, sp, #8
 8082e52:	f008 fcc4 	bl	808b7de <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8082e56:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    float tempfloat = tempString.toFloat();
 8082e5a:	4604      	mov	r4, r0
    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8082e5c:	f00b fa56 	bl	808e30c <__aeabi_fcmpge>
 8082e60:	b360      	cbz	r0, 8082ebc <_Z25serialGetTemperatureSlopev+0xd0>
 8082e62:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8082e66:	4620      	mov	r0, r4
 8082e68:	f00b fa3c 	bl	808e2e4 <__aeabi_fcmplt>
 8082e6c:	b330      	cbz	r0, 8082ebc <_Z25serialGetTemperatureSlopev+0xd0>
        temp_slope = tempfloat;
        tempfloat *= 100;
 8082e6e:	491a      	ldr	r1, [pc, #104]	; (8082ed8 <_Z25serialGetTemperatureSlopev+0xec>)
 8082e70:	4620      	mov	r0, r4
        temp_slope = tempfloat;
 8082e72:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 8082e74:	f00b f898 	bl	808dfa8 <__aeabi_fmul>
        tempValue = tempfloat;
 8082e78:	f00b fa5c 	bl	808e334 <__aeabi_f2iz>
 8082e7c:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew Temperature slope: ");
 8082e7e:	f009 fdc5 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082e82:	4916      	ldr	r1, [pc, #88]	; (8082edc <_Z25serialGetTemperatureSlopev+0xf0>)
 8082e84:	f008 fcf4 	bl	808b870 <_ZN5Print5printEPKc>
        Serial.println(String(temp_slope,2));
 8082e88:	f009 fdc0 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082e8c:	4604      	mov	r4, r0
 8082e8e:	2202      	movs	r2, #2
 8082e90:	6829      	ldr	r1, [r5, #0]
 8082e92:	a806      	add	r0, sp, #24
 8082e94:	f008 fb75 	bl	808b582 <_ZN6StringC1Efi>
 8082e98:	9906      	ldr	r1, [sp, #24]
 8082e9a:	4620      	mov	r0, r4
 8082e9c:	f008 fcfb 	bl	808b896 <_ZN5Print7printlnEPKc>
 8082ea0:	a806      	add	r0, sp, #24
 8082ea2:	f008 fa9d 	bl	808b3e0 <_ZN6StringD1Ev>

        EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, tempValue);
 8082ea6:	f00a f9b9 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8082eaa:	2030      	movs	r0, #48	; 0x30
 8082eac:	a901      	add	r1, sp, #4
 8082eae:	f7fd ff36 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8082eb2:	a802      	add	r0, sp, #8
 8082eb4:	f008 fa94 	bl	808b3e0 <_ZN6StringD1Ev>
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8082eb8:	b00b      	add	sp, #44	; 0x2c
 8082eba:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 8082ebc:	f009 fda6 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082ec0:	4907      	ldr	r1, [pc, #28]	; (8082ee0 <_Z25serialGetTemperatureSlopev+0xf4>)
 8082ec2:	f008 fce8 	bl	808b896 <_ZN5Print7printlnEPKc>
 8082ec6:	e7f4      	b.n	8082eb2 <_Z25serialGetTemperatureSlopev+0xc6>
 8082ec8:	080921fa 	.word	0x080921fa
 8082ecc:	20000d00 	.word	0x20000d00
 8082ed0:	08092215 	.word	0x08092215
 8082ed4:	08092220 	.word	0x08092220
 8082ed8:	42c80000 	.word	0x42c80000
 8082edc:	0809223e 	.word	0x0809223e
 8082ee0:	080920b7 	.word	0x080920b7

08082ee4 <_Z22serialGetPressureSlopev>:
    }else{
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetPressureSlope(void){
 8082ee4:	b530      	push	{r4, r5, lr}
 8082ee6:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8082ee8:	f009 fd90 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082eec:	f008 fcc7 	bl	808b87e <_ZN5Print7printlnEv>
    Serial.print("Current Pressure slope:");
 8082ef0:	f009 fd8c 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082ef4:	4932      	ldr	r1, [pc, #200]	; (8082fc0 <_Z22serialGetPressureSlopev+0xdc>)
 8082ef6:	f008 fcbb 	bl	808b870 <_ZN5Print5printEPKc>
    Serial.print(String(pressure_slope, 2));
 8082efa:	f009 fd87 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082efe:	4604      	mov	r4, r0
 8082f00:	4d30      	ldr	r5, [pc, #192]	; (8082fc4 <_Z22serialGetPressureSlopev+0xe0>)
 8082f02:	2202      	movs	r2, #2
 8082f04:	6829      	ldr	r1, [r5, #0]
 8082f06:	a806      	add	r0, sp, #24
 8082f08:	f008 fb3b 	bl	808b582 <_ZN6StringC1Efi>
 8082f0c:	9906      	ldr	r1, [sp, #24]
 8082f0e:	4620      	mov	r0, r4
 8082f10:	f008 fcae 	bl	808b870 <_ZN5Print5printEPKc>
 8082f14:	a806      	add	r0, sp, #24
 8082f16:	f008 fa63 	bl	808b3e0 <_ZN6StringD1Ev>
    Serial.println(" torr");
 8082f1a:	f009 fd77 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082f1e:	492a      	ldr	r1, [pc, #168]	; (8082fc8 <_Z22serialGetPressureSlopev+0xe4>)
 8082f20:	f008 fcb9 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Pressure slope\n\r");
 8082f24:	f009 fd72 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082f28:	4928      	ldr	r1, [pc, #160]	; (8082fcc <_Z22serialGetPressureSlopev+0xe8>)
 8082f2a:	f008 fca1 	bl	808b870 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082f2e:	f009 fd6d 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082f32:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082f36:	f008 fe0a 	bl	808bb4e <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082f3a:	f009 fd67 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082f3e:	220d      	movs	r2, #13
 8082f40:	4601      	mov	r1, r0
 8082f42:	a802      	add	r0, sp, #8
 8082f44:	f008 fe6e 	bl	808bc24 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8082f48:	a802      	add	r0, sp, #8
 8082f4a:	f008 fc48 	bl	808b7de <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8082f4e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    float tempfloat = tempString.toFloat();
 8082f52:	4604      	mov	r4, r0
    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8082f54:	f00b f9da 	bl	808e30c <__aeabi_fcmpge>
 8082f58:	b360      	cbz	r0, 8082fb4 <_Z22serialGetPressureSlopev+0xd0>
 8082f5a:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8082f5e:	4620      	mov	r0, r4
 8082f60:	f00b f9c0 	bl	808e2e4 <__aeabi_fcmplt>
 8082f64:	b330      	cbz	r0, 8082fb4 <_Z22serialGetPressureSlopev+0xd0>
        pressure_slope = tempfloat;
        tempfloat *= 100;
 8082f66:	491a      	ldr	r1, [pc, #104]	; (8082fd0 <_Z22serialGetPressureSlopev+0xec>)
 8082f68:	4620      	mov	r0, r4
        pressure_slope = tempfloat;
 8082f6a:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 8082f6c:	f00b f81c 	bl	808dfa8 <__aeabi_fmul>
        tempValue = tempfloat;
 8082f70:	f00b f9e0 	bl	808e334 <__aeabi_f2iz>
 8082f74:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew Pressure slope: ");
 8082f76:	f009 fd49 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082f7a:	4916      	ldr	r1, [pc, #88]	; (8082fd4 <_Z22serialGetPressureSlopev+0xf0>)
 8082f7c:	f008 fc78 	bl	808b870 <_ZN5Print5printEPKc>
        Serial.println(String(pressure_slope,2));
 8082f80:	f009 fd44 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082f84:	4604      	mov	r4, r0
 8082f86:	2202      	movs	r2, #2
 8082f88:	6829      	ldr	r1, [r5, #0]
 8082f8a:	a806      	add	r0, sp, #24
 8082f8c:	f008 faf9 	bl	808b582 <_ZN6StringC1Efi>
 8082f90:	9906      	ldr	r1, [sp, #24]
 8082f92:	4620      	mov	r0, r4
 8082f94:	f008 fc7f 	bl	808b896 <_ZN5Print7printlnEPKc>
 8082f98:	a806      	add	r0, sp, #24
 8082f9a:	f008 fa21 	bl	808b3e0 <_ZN6StringD1Ev>

        EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, tempValue);
 8082f9e:	f00a f93d 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8082fa2:	2038      	movs	r0, #56	; 0x38
 8082fa4:	a901      	add	r1, sp, #4
 8082fa6:	f7fd feba 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8082faa:	a802      	add	r0, sp, #8
 8082fac:	f008 fa18 	bl	808b3e0 <_ZN6StringD1Ev>
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8082fb0:	b00b      	add	sp, #44	; 0x2c
 8082fb2:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 8082fb4:	f009 fd2a 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082fb8:	4907      	ldr	r1, [pc, #28]	; (8082fd8 <_Z22serialGetPressureSlopev+0xf4>)
 8082fba:	f008 fc6c 	bl	808b896 <_ZN5Print7printlnEPKc>
 8082fbe:	e7f4      	b.n	8082faa <_Z22serialGetPressureSlopev+0xc6>
 8082fc0:	08092258 	.word	0x08092258
 8082fc4:	2000084c 	.word	0x2000084c
 8082fc8:	08092270 	.word	0x08092270
 8082fcc:	08092276 	.word	0x08092276
 8082fd0:	42c80000 	.word	0x42c80000
 8082fd4:	08092291 	.word	0x08092291
 8082fd8:	080920b7 	.word	0x080920b7

08082fdc <_Z22serialGetHumiditySlopev>:
    }else{
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetHumiditySlope(void){
 8082fdc:	b530      	push	{r4, r5, lr}
 8082fde:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8082fe0:	f009 fd14 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082fe4:	f008 fc4b 	bl	808b87e <_ZN5Print7printlnEv>
    Serial.print("Current RH slope:");
 8082fe8:	f009 fd10 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082fec:	4932      	ldr	r1, [pc, #200]	; (80830b8 <_Z22serialGetHumiditySlopev+0xdc>)
 8082fee:	f008 fc3f 	bl	808b870 <_ZN5Print5printEPKc>
    Serial.print(String(rh_slope, 2));
 8082ff2:	f009 fd0b 	bl	808ca0c <_Z16_fetch_usbserialv>
 8082ff6:	4604      	mov	r4, r0
 8082ff8:	4d30      	ldr	r5, [pc, #192]	; (80830bc <_Z22serialGetHumiditySlopev+0xe0>)
 8082ffa:	2202      	movs	r2, #2
 8082ffc:	6829      	ldr	r1, [r5, #0]
 8082ffe:	a806      	add	r0, sp, #24
 8083000:	f008 fabf 	bl	808b582 <_ZN6StringC1Efi>
 8083004:	9906      	ldr	r1, [sp, #24]
 8083006:	4620      	mov	r0, r4
 8083008:	f008 fc32 	bl	808b870 <_ZN5Print5printEPKc>
 808300c:	a806      	add	r0, sp, #24
 808300e:	f008 f9e7 	bl	808b3e0 <_ZN6StringD1Ev>
    Serial.println(" %");
 8083012:	f009 fcfb 	bl	808ca0c <_Z16_fetch_usbserialv>
 8083016:	492a      	ldr	r1, [pc, #168]	; (80830c0 <_Z22serialGetHumiditySlopev+0xe4>)
 8083018:	f008 fc3d 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new RH slope\n\r");
 808301c:	f009 fcf6 	bl	808ca0c <_Z16_fetch_usbserialv>
 8083020:	4928      	ldr	r1, [pc, #160]	; (80830c4 <_Z22serialGetHumiditySlopev+0xe8>)
 8083022:	f008 fc25 	bl	808b870 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083026:	f009 fcf1 	bl	808ca0c <_Z16_fetch_usbserialv>
 808302a:	f24c 3150 	movw	r1, #50000	; 0xc350
 808302e:	f008 fd8e 	bl	808bb4e <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083032:	f009 fceb 	bl	808ca0c <_Z16_fetch_usbserialv>
 8083036:	220d      	movs	r2, #13
 8083038:	4601      	mov	r1, r0
 808303a:	a802      	add	r0, sp, #8
 808303c:	f008 fdf2 	bl	808bc24 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083040:	a802      	add	r0, sp, #8
 8083042:	f008 fbcc 	bl	808b7de <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 10){
 8083046:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    float tempfloat = tempString.toFloat();
 808304a:	4604      	mov	r4, r0
    if(tempfloat >= 0.5 && tempfloat < 10){
 808304c:	f00b f95e 	bl	808e30c <__aeabi_fcmpge>
 8083050:	b358      	cbz	r0, 80830aa <_Z22serialGetHumiditySlopev+0xce>
 8083052:	4620      	mov	r0, r4
 8083054:	491c      	ldr	r1, [pc, #112]	; (80830c8 <_Z22serialGetHumiditySlopev+0xec>)
 8083056:	f00b f945 	bl	808e2e4 <__aeabi_fcmplt>
 808305a:	b330      	cbz	r0, 80830aa <_Z22serialGetHumiditySlopev+0xce>
        rh_slope = tempfloat;
        tempfloat *= 100;
 808305c:	491b      	ldr	r1, [pc, #108]	; (80830cc <_Z22serialGetHumiditySlopev+0xf0>)
 808305e:	4620      	mov	r0, r4
        rh_slope = tempfloat;
 8083060:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 8083062:	f00a ffa1 	bl	808dfa8 <__aeabi_fmul>
        tempValue = tempfloat;
 8083066:	f00b f965 	bl	808e334 <__aeabi_f2iz>
 808306a:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew RH slope: ");
 808306c:	f009 fcce 	bl	808ca0c <_Z16_fetch_usbserialv>
 8083070:	4917      	ldr	r1, [pc, #92]	; (80830d0 <_Z22serialGetHumiditySlopev+0xf4>)
 8083072:	f008 fbfd 	bl	808b870 <_ZN5Print5printEPKc>
        Serial.println(String(rh_slope,2));
 8083076:	f009 fcc9 	bl	808ca0c <_Z16_fetch_usbserialv>
 808307a:	4604      	mov	r4, r0
 808307c:	2202      	movs	r2, #2
 808307e:	6829      	ldr	r1, [r5, #0]
 8083080:	a806      	add	r0, sp, #24
 8083082:	f008 fa7e 	bl	808b582 <_ZN6StringC1Efi>
 8083086:	9906      	ldr	r1, [sp, #24]
 8083088:	4620      	mov	r0, r4
 808308a:	f008 fc04 	bl	808b896 <_ZN5Print7printlnEPKc>
 808308e:	a806      	add	r0, sp, #24
 8083090:	f008 f9a6 	bl	808b3e0 <_ZN6StringD1Ev>

        EEPROM.put(RH_SLOPE_MEM_ADDRESS, tempValue);
 8083094:	f00a f8c2 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8083098:	2040      	movs	r0, #64	; 0x40
 808309a:	a901      	add	r1, sp, #4
 808309c:	f7fd fe3f 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 80830a0:	a802      	add	r0, sp, #8
 80830a2:	f008 f99d 	bl	808b3e0 <_ZN6StringD1Ev>
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 80830a6:	b00b      	add	sp, #44	; 0x2c
 80830a8:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 80830aa:	f009 fcaf 	bl	808ca0c <_Z16_fetch_usbserialv>
 80830ae:	4909      	ldr	r1, [pc, #36]	; (80830d4 <_Z22serialGetHumiditySlopev+0xf8>)
 80830b0:	f008 fbf1 	bl	808b896 <_ZN5Print7printlnEPKc>
 80830b4:	e7f4      	b.n	80830a0 <_Z22serialGetHumiditySlopev+0xc4>
 80830b6:	bf00      	nop
 80830b8:	080922a8 	.word	0x080922a8
 80830bc:	20000854 	.word	0x20000854
 80830c0:	080922ba 	.word	0x080922ba
 80830c4:	080922bd 	.word	0x080922bd
 80830c8:	41200000 	.word	0x41200000
 80830cc:	42c80000 	.word	0x42c80000
 80830d0:	080922d2 	.word	0x080922d2
 80830d4:	080920b7 	.word	0x080920b7

080830d8 <_Z23outputSerialMenuOptionsv>:
    while(!Serial.available()){
        CO_float = readCO();
        Serial.printf("CO: %1.3f ppm\n\r", CO_float);
    }
}
void outputSerialMenuOptions(void){
 80830d8:	b508      	push	{r3, lr}
    Serial.println("Command:  Description");
 80830da:	f009 fc97 	bl	808ca0c <_Z16_fetch_usbserialv>
 80830de:	49a2      	ldr	r1, [pc, #648]	; (8083368 <_Z23outputSerialMenuOptionsv+0x290>)
 80830e0:	f008 fbd9 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("a:  Adjust CO2 slope");
 80830e4:	f009 fc92 	bl	808ca0c <_Z16_fetch_usbserialv>
 80830e8:	49a0      	ldr	r1, [pc, #640]	; (808336c <_Z23outputSerialMenuOptionsv+0x294>)
 80830ea:	f008 fbd4 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("b:  Adjust CO2 zero");
 80830ee:	f009 fc8d 	bl	808ca0c <_Z16_fetch_usbserialv>
 80830f2:	499f      	ldr	r1, [pc, #636]	; (8083370 <_Z23outputSerialMenuOptionsv+0x298>)
 80830f4:	f008 fbcf 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("c:  Adjust CO slope");
 80830f8:	f009 fc88 	bl	808ca0c <_Z16_fetch_usbserialv>
 80830fc:	499d      	ldr	r1, [pc, #628]	; (8083374 <_Z23outputSerialMenuOptionsv+0x29c>)
 80830fe:	f008 fbca 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("d:  Adjust CO zero");
 8083102:	f009 fc83 	bl	808ca0c <_Z16_fetch_usbserialv>
 8083106:	499c      	ldr	r1, [pc, #624]	; (8083378 <_Z23outputSerialMenuOptionsv+0x2a0>)
 8083108:	f008 fbc5 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("e:  Adjust PM1 slope");
 808310c:	f009 fc7e 	bl	808ca0c <_Z16_fetch_usbserialv>
 8083110:	499a      	ldr	r1, [pc, #616]	; (808337c <_Z23outputSerialMenuOptionsv+0x2a4>)
 8083112:	f008 fbc0 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("f:  Adjust PM1 zero");
 8083116:	f009 fc79 	bl	808ca0c <_Z16_fetch_usbserialv>
 808311a:	4999      	ldr	r1, [pc, #612]	; (8083380 <_Z23outputSerialMenuOptionsv+0x2a8>)
 808311c:	f008 fbbb 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("g:  Adjust PM2.5 slope");
 8083120:	f009 fc74 	bl	808ca0c <_Z16_fetch_usbserialv>
 8083124:	4997      	ldr	r1, [pc, #604]	; (8083384 <_Z23outputSerialMenuOptionsv+0x2ac>)
 8083126:	f008 fbb6 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("h:  Adjust PM2.5 zero");
 808312a:	f009 fc6f 	bl	808ca0c <_Z16_fetch_usbserialv>
 808312e:	4996      	ldr	r1, [pc, #600]	; (8083388 <_Z23outputSerialMenuOptionsv+0x2b0>)
 8083130:	f008 fbb1 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("i:  Adjust PM10 slope");
 8083134:	f009 fc6a 	bl	808ca0c <_Z16_fetch_usbserialv>
 8083138:	4994      	ldr	r1, [pc, #592]	; (808338c <_Z23outputSerialMenuOptionsv+0x2b4>)
 808313a:	f008 fbac 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("j:  Adjust PM10 zero");
 808313e:	f009 fc65 	bl	808ca0c <_Z16_fetch_usbserialv>
 8083142:	4993      	ldr	r1, [pc, #588]	; (8083390 <_Z23outputSerialMenuOptionsv+0x2b8>)
 8083144:	f008 fba7 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("k:  Adjust Temperature slope");
 8083148:	f009 fc60 	bl	808ca0c <_Z16_fetch_usbserialv>
 808314c:	4991      	ldr	r1, [pc, #580]	; (8083394 <_Z23outputSerialMenuOptionsv+0x2bc>)
 808314e:	f008 fba2 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("l:  Adjust Temperature zero");
 8083152:	f009 fc5b 	bl	808ca0c <_Z16_fetch_usbserialv>
 8083156:	4990      	ldr	r1, [pc, #576]	; (8083398 <_Z23outputSerialMenuOptionsv+0x2c0>)
 8083158:	f008 fb9d 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("m:  Adjust Pressure slope");
 808315c:	f009 fc56 	bl	808ca0c <_Z16_fetch_usbserialv>
 8083160:	498e      	ldr	r1, [pc, #568]	; (808339c <_Z23outputSerialMenuOptionsv+0x2c4>)
 8083162:	f008 fb98 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("n:  Adjust Pressure zero");
 8083166:	f009 fc51 	bl	808ca0c <_Z16_fetch_usbserialv>
 808316a:	498d      	ldr	r1, [pc, #564]	; (80833a0 <_Z23outputSerialMenuOptionsv+0x2c8>)
 808316c:	f008 fb93 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("o:  Adjust Humidity slope");
 8083170:	f009 fc4c 	bl	808ca0c <_Z16_fetch_usbserialv>
 8083174:	498b      	ldr	r1, [pc, #556]	; (80833a4 <_Z23outputSerialMenuOptionsv+0x2cc>)
 8083176:	f008 fb8e 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("p:  Adjust Humidity zero");
 808317a:	f009 fc47 	bl	808ca0c <_Z16_fetch_usbserialv>
 808317e:	498a      	ldr	r1, [pc, #552]	; (80833a8 <_Z23outputSerialMenuOptionsv+0x2d0>)
 8083180:	f008 fb89 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("q:  Enable serial debugging");
 8083184:	f009 fc42 	bl	808ca0c <_Z16_fetch_usbserialv>
 8083188:	4988      	ldr	r1, [pc, #544]	; (80833ac <_Z23outputSerialMenuOptionsv+0x2d4>)
 808318a:	f008 fb84 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("r:  Disable serial debugging");
 808318e:	f009 fc3d 	bl	808ca0c <_Z16_fetch_usbserialv>
 8083192:	4987      	ldr	r1, [pc, #540]	; (80833b0 <_Z23outputSerialMenuOptionsv+0x2d8>)
 8083194:	f008 fb7f 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("s:  Output header string");
 8083198:	f009 fc38 	bl	808ca0c <_Z16_fetch_usbserialv>
 808319c:	4985      	ldr	r1, [pc, #532]	; (80833b4 <_Z23outputSerialMenuOptionsv+0x2dc>)
 808319e:	f008 fb7a 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("t:  Enter new time and date");
 80831a2:	f009 fc33 	bl	808ca0c <_Z16_fetch_usbserialv>
 80831a6:	4984      	ldr	r1, [pc, #528]	; (80833b8 <_Z23outputSerialMenuOptionsv+0x2e0>)
 80831a8:	f008 fb75 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("u:  Enter new time zone");
 80831ac:	f009 fc2e 	bl	808ca0c <_Z16_fetch_usbserialv>
 80831b0:	4982      	ldr	r1, [pc, #520]	; (80833bc <_Z23outputSerialMenuOptionsv+0x2e4>)
 80831b2:	f008 fb70 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("v:  Adjust the Device ID");
 80831b6:	f009 fc29 	bl	808ca0c <_Z16_fetch_usbserialv>
 80831ba:	4981      	ldr	r1, [pc, #516]	; (80833c0 <_Z23outputSerialMenuOptionsv+0x2e8>)
 80831bc:	f008 fb6b 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("w:  Get wifi credentials");
 80831c0:	f009 fc24 	bl	808ca0c <_Z16_fetch_usbserialv>
 80831c4:	497f      	ldr	r1, [pc, #508]	; (80833c4 <_Z23outputSerialMenuOptionsv+0x2ec>)
 80831c6:	f008 fb66 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("y:  Enable cellular");
 80831ca:	f009 fc1f 	bl	808ca0c <_Z16_fetch_usbserialv>
 80831ce:	497e      	ldr	r1, [pc, #504]	; (80833c8 <_Z23outputSerialMenuOptionsv+0x2f0>)
 80831d0:	f008 fb61 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("z:  Disable cellular");
 80831d4:	f009 fc1a 	bl	808ca0c <_Z16_fetch_usbserialv>
 80831d8:	497c      	ldr	r1, [pc, #496]	; (80833cc <_Z23outputSerialMenuOptionsv+0x2f4>)
 80831da:	f008 fb5c 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("1:  Adjust gas lower limit");
 80831de:	f009 fc15 	bl	808ca0c <_Z16_fetch_usbserialv>
 80831e2:	497b      	ldr	r1, [pc, #492]	; (80833d0 <_Z23outputSerialMenuOptionsv+0x2f8>)
 80831e4:	f008 fb57 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("2:  Adjust gas upper limit");
 80831e8:	f009 fc10 	bl	808ca0c <_Z16_fetch_usbserialv>
 80831ec:	4979      	ldr	r1, [pc, #484]	; (80833d4 <_Z23outputSerialMenuOptionsv+0x2fc>)
 80831ee:	f008 fb52 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("3:  Get build version");
 80831f2:	f009 fc0b 	bl	808ca0c <_Z16_fetch_usbserialv>
 80831f6:	4978      	ldr	r1, [pc, #480]	; (80833d8 <_Z23outputSerialMenuOptionsv+0x300>)
 80831f8:	f008 fb4d 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("4:  Enable Ozone");
 80831fc:	f009 fc06 	bl	808ca0c <_Z16_fetch_usbserialv>
 8083200:	4976      	ldr	r1, [pc, #472]	; (80833dc <_Z23outputSerialMenuOptionsv+0x304>)
 8083202:	f008 fb48 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("5:  Disable Ozone");
 8083206:	f009 fc01 	bl	808ca0c <_Z16_fetch_usbserialv>
 808320a:	4975      	ldr	r1, [pc, #468]	; (80833e0 <_Z23outputSerialMenuOptionsv+0x308>)
 808320c:	f008 fb43 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("6:  Enable VOC's");
 8083210:	f009 fbfc 	bl	808ca0c <_Z16_fetch_usbserialv>
 8083214:	4973      	ldr	r1, [pc, #460]	; (80833e4 <_Z23outputSerialMenuOptionsv+0x30c>)
 8083216:	f008 fb3e 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("7:  Disable VOC's");
 808321a:	f009 fbf7 	bl	808ca0c <_Z16_fetch_usbserialv>
 808321e:	4972      	ldr	r1, [pc, #456]	; (80833e8 <_Z23outputSerialMenuOptionsv+0x310>)
 8083220:	f008 fb39 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("8:  Output the PMIC system configuration");
 8083224:	f009 fbf2 	bl	808ca0c <_Z16_fetch_usbserialv>
 8083228:	4970      	ldr	r1, [pc, #448]	; (80833ec <_Z23outputSerialMenuOptionsv+0x314>)
 808322a:	f008 fb34 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("9:  Increase the charge current by 64 mA");
 808322e:	f009 fbed 	bl	808ca0c <_Z16_fetch_usbserialv>
 8083232:	496f      	ldr	r1, [pc, #444]	; (80833f0 <_Z23outputSerialMenuOptionsv+0x318>)
 8083234:	f008 fb2f 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("0:  Increase the current input limit by 100 mA");
 8083238:	f009 fbe8 	bl	808ca0c <_Z16_fetch_usbserialv>
 808323c:	496d      	ldr	r1, [pc, #436]	; (80833f4 <_Z23outputSerialMenuOptionsv+0x31c>)
 808323e:	f008 fb2a 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("A:  Ouptput CO constantly and rapidly");
 8083242:	f009 fbe3 	bl	808ca0c <_Z16_fetch_usbserialv>
 8083246:	496c      	ldr	r1, [pc, #432]	; (80833f8 <_Z23outputSerialMenuOptionsv+0x320>)
 8083248:	f008 fb25 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("B:  Output PM constantly and rapidly");
 808324c:	f009 fbde 	bl	808ca0c <_Z16_fetch_usbserialv>
 8083250:	496a      	ldr	r1, [pc, #424]	; (80833fc <_Z23outputSerialMenuOptionsv+0x324>)
 8083252:	f008 fb20 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("C:  Change temperature units to Celcius");
 8083256:	f009 fbd9 	bl	808ca0c <_Z16_fetch_usbserialv>
 808325a:	4969      	ldr	r1, [pc, #420]	; (8083400 <_Z23outputSerialMenuOptionsv+0x328>)
 808325c:	f008 fb1b 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("D:  Disable TMP36 temperature sensor and use BME680 temperature");
 8083260:	f009 fbd4 	bl	808ca0c <_Z16_fetch_usbserialv>
 8083264:	4967      	ldr	r1, [pc, #412]	; (8083404 <_Z23outputSerialMenuOptionsv+0x32c>)
 8083266:	f008 fb16 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("E:  Enable TMP36 temperature sensor and disable BME680 temperature");
 808326a:	f009 fbcf 	bl	808ca0c <_Z16_fetch_usbserialv>
 808326e:	4966      	ldr	r1, [pc, #408]	; (8083408 <_Z23outputSerialMenuOptionsv+0x330>)
 8083270:	f008 fb11 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("F:  Change temperature units to Farenheit");
 8083274:	f009 fbca 	bl	808ca0c <_Z16_fetch_usbserialv>
 8083278:	4964      	ldr	r1, [pc, #400]	; (808340c <_Z23outputSerialMenuOptionsv+0x334>)
 808327a:	f008 fb0c 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("G:  Read ozone from analog input (not digitally - board dependent)");
 808327e:	f009 fbc5 	bl	808ca0c <_Z16_fetch_usbserialv>
 8083282:	4963      	ldr	r1, [pc, #396]	; (8083410 <_Z23outputSerialMenuOptionsv+0x338>)
 8083284:	f008 fb07 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("H:  Read ozone digitally (not through analog input - board dependent)");
 8083288:	f009 fbc0 	bl	808ca0c <_Z16_fetch_usbserialv>
 808328c:	4961      	ldr	r1, [pc, #388]	; (8083414 <_Z23outputSerialMenuOptionsv+0x33c>)
 808328e:	f008 fb02 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("I:  Adjust frequency for uploading through cellular");
 8083292:	f009 fbbb 	bl	808ca0c <_Z16_fetch_usbserialv>
 8083296:	4960      	ldr	r1, [pc, #384]	; (8083418 <_Z23outputSerialMenuOptionsv+0x340>)
 8083298:	f008 fafd 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("J:  Reset ESP, CO2, Plantower");
 808329c:	f009 fbb6 	bl	808ca0c <_Z16_fetch_usbserialv>
 80832a0:	495e      	ldr	r1, [pc, #376]	; (808341c <_Z23outputSerialMenuOptionsv+0x344>)
 80832a2:	f008 faf8 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("K:  Continuous serial output of GPS");
 80832a6:	f009 fbb1 	bl	808ca0c <_Z16_fetch_usbserialv>
 80832aa:	495d      	ldr	r1, [pc, #372]	; (8083420 <_Z23outputSerialMenuOptionsv+0x348>)
 80832ac:	f008 faf3 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("L:  Write default settings");
 80832b0:	f009 fbac 	bl	808ca0c <_Z16_fetch_usbserialv>
 80832b4:	495b      	ldr	r1, [pc, #364]	; (8083424 <_Z23outputSerialMenuOptionsv+0x34c>)
 80832b6:	f008 faee 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("M:  Enable 20% battery threshold limiting");
 80832ba:	f009 fba7 	bl	808ca0c <_Z16_fetch_usbserialv>
 80832be:	495a      	ldr	r1, [pc, #360]	; (8083428 <_Z23outputSerialMenuOptionsv+0x350>)
 80832c0:	f008 fae9 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("N:  Disable 20% battery threshold limiting WARNING!!");
 80832c4:	f009 fba2 	bl	808ca0c <_Z16_fetch_usbserialv>
 80832c8:	4958      	ldr	r1, [pc, #352]	; (808342c <_Z23outputSerialMenuOptionsv+0x354>)
 80832ca:	f008 fae4 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("O:  Enable low power for GPS module");
 80832ce:	f009 fb9d 	bl	808ca0c <_Z16_fetch_usbserialv>
 80832d2:	4957      	ldr	r1, [pc, #348]	; (8083430 <_Z23outputSerialMenuOptionsv+0x358>)
 80832d4:	f008 fadf 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("P:  Turn off BATFET");
 80832d8:	f009 fb98 	bl	808ca0c <_Z16_fetch_usbserialv>
 80832dc:	4955      	ldr	r1, [pc, #340]	; (8083434 <_Z23outputSerialMenuOptionsv+0x35c>)
 80832de:	f008 fada 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("Q:  Allow BATFET to turn on");
 80832e2:	f009 fb93 	bl	808ca0c <_Z16_fetch_usbserialv>
 80832e6:	4954      	ldr	r1, [pc, #336]	; (8083438 <_Z23outputSerialMenuOptionsv+0x360>)
 80832e8:	f008 fad5 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("R:  Disable ABC logic for CO2 sensor");
 80832ec:	f009 fb8e 	bl	808ca0c <_Z16_fetch_usbserialv>
 80832f0:	4952      	ldr	r1, [pc, #328]	; (808343c <_Z23outputSerialMenuOptionsv+0x364>)
 80832f2:	f008 fad0 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("S:  Enable ABC logic for CO2 sensor");
 80832f6:	f009 fb89 	bl	808ca0c <_Z16_fetch_usbserialv>
 80832fa:	4951      	ldr	r1, [pc, #324]	; (8083440 <_Z23outputSerialMenuOptionsv+0x368>)
 80832fc:	f008 facb 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("T:  Enable/disable HIH8120 RH sensor");
 8083300:	f009 fb84 	bl	808ca0c <_Z16_fetch_usbserialv>
 8083304:	494f      	ldr	r1, [pc, #316]	; (8083444 <_Z23outputSerialMenuOptionsv+0x36c>)
 8083306:	f008 fac6 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("U:  Switch socket where CO is read from");
 808330a:	f009 fb7f 	bl	808ca0c <_Z16_fetch_usbserialv>
 808330e:	494e      	ldr	r1, [pc, #312]	; (8083448 <_Z23outputSerialMenuOptionsv+0x370>)
 8083310:	f008 fac1 	bl	808b896 <_ZN5Print7printlnEPKc>
    
    Serial.println("W:  Enable/Disable google location services");
 8083314:	f009 fb7a 	bl	808ca0c <_Z16_fetch_usbserialv>
 8083318:	494c      	ldr	r1, [pc, #304]	; (808344c <_Z23outputSerialMenuOptionsv+0x374>)
 808331a:	f008 fabc 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("V:  Calibrate CO2 sensor - must supply ambient level (go outside!)");
 808331e:	f009 fb75 	bl	808ca0c <_Z16_fetch_usbserialv>
 8083322:	494b      	ldr	r1, [pc, #300]	; (8083450 <_Z23outputSerialMenuOptionsv+0x378>)
 8083324:	f008 fab7 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("Z:  Output cellular information (CCID, IMEI, etc)");
 8083328:	f009 fb70 	bl	808ca0c <_Z16_fetch_usbserialv>
 808332c:	4949      	ldr	r1, [pc, #292]	; (8083454 <_Z23outputSerialMenuOptionsv+0x37c>)
 808332e:	f008 fab2 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("!:  Continuous serial output of VOC's");
 8083332:	f009 fb6b 	bl	808ca0c <_Z16_fetch_usbserialv>
 8083336:	4948      	ldr	r1, [pc, #288]	; (8083458 <_Z23outputSerialMenuOptionsv+0x380>)
 8083338:	f008 faad 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("@   Enable/Disable Sensible-iot data push.  If enabled, time zone will be ignored - UTC will be used.");
 808333c:	f009 fb66 	bl	808ca0c <_Z16_fetch_usbserialv>
 8083340:	4946      	ldr	r1, [pc, #280]	; (808345c <_Z23outputSerialMenuOptionsv+0x384>)
 8083342:	f008 faa8 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("#   Enable/Disable cartopper power mode.  If enabled, absense of external power will stop cellular.");
 8083346:	f009 fb61 	bl	808ca0c <_Z16_fetch_usbserialv>
 808334a:	4945      	ldr	r1, [pc, #276]	; (8083460 <_Z23outputSerialMenuOptionsv+0x388>)
 808334c:	f008 faa3 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("?:  Output this menu");
 8083350:	f009 fb5c 	bl	808ca0c <_Z16_fetch_usbserialv>
 8083354:	4943      	ldr	r1, [pc, #268]	; (8083464 <_Z23outputSerialMenuOptionsv+0x38c>)
 8083356:	f008 fa9e 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("x:  Exits this menu");
 808335a:	f009 fb57 	bl	808ca0c <_Z16_fetch_usbserialv>
  }
 808335e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.println("x:  Exits this menu");
 8083362:	4941      	ldr	r1, [pc, #260]	; (8083468 <_Z23outputSerialMenuOptionsv+0x390>)
 8083364:	f008 ba97 	b.w	808b896 <_ZN5Print7printlnEPKc>
 8083368:	080922e3 	.word	0x080922e3
 808336c:	080922f9 	.word	0x080922f9
 8083370:	0809230e 	.word	0x0809230e
 8083374:	08092322 	.word	0x08092322
 8083378:	08092336 	.word	0x08092336
 808337c:	08092349 	.word	0x08092349
 8083380:	0809235e 	.word	0x0809235e
 8083384:	08092372 	.word	0x08092372
 8083388:	08092389 	.word	0x08092389
 808338c:	0809239f 	.word	0x0809239f
 8083390:	080923b5 	.word	0x080923b5
 8083394:	080923ca 	.word	0x080923ca
 8083398:	080923e7 	.word	0x080923e7
 808339c:	08092403 	.word	0x08092403
 80833a0:	0809241d 	.word	0x0809241d
 80833a4:	08092436 	.word	0x08092436
 80833a8:	08092450 	.word	0x08092450
 80833ac:	08092469 	.word	0x08092469
 80833b0:	08092485 	.word	0x08092485
 80833b4:	080924a2 	.word	0x080924a2
 80833b8:	080924bb 	.word	0x080924bb
 80833bc:	080924d7 	.word	0x080924d7
 80833c0:	080924ef 	.word	0x080924ef
 80833c4:	08092508 	.word	0x08092508
 80833c8:	08092521 	.word	0x08092521
 80833cc:	08092535 	.word	0x08092535
 80833d0:	0809254a 	.word	0x0809254a
 80833d4:	08092565 	.word	0x08092565
 80833d8:	08092580 	.word	0x08092580
 80833dc:	08092596 	.word	0x08092596
 80833e0:	080925a7 	.word	0x080925a7
 80833e4:	080925b9 	.word	0x080925b9
 80833e8:	080925ca 	.word	0x080925ca
 80833ec:	080925dc 	.word	0x080925dc
 80833f0:	08092605 	.word	0x08092605
 80833f4:	0809262e 	.word	0x0809262e
 80833f8:	0809265d 	.word	0x0809265d
 80833fc:	08092683 	.word	0x08092683
 8083400:	080926a8 	.word	0x080926a8
 8083404:	080926d0 	.word	0x080926d0
 8083408:	08092710 	.word	0x08092710
 808340c:	08092753 	.word	0x08092753
 8083410:	0809277d 	.word	0x0809277d
 8083414:	080927c0 	.word	0x080927c0
 8083418:	08092806 	.word	0x08092806
 808341c:	0809283a 	.word	0x0809283a
 8083420:	08092858 	.word	0x08092858
 8083424:	0809287c 	.word	0x0809287c
 8083428:	08092897 	.word	0x08092897
 808342c:	080928c1 	.word	0x080928c1
 8083430:	080928f6 	.word	0x080928f6
 8083434:	0809291a 	.word	0x0809291a
 8083438:	0809292e 	.word	0x0809292e
 808343c:	0809294a 	.word	0x0809294a
 8083440:	0809296f 	.word	0x0809296f
 8083444:	08092993 	.word	0x08092993
 8083448:	080929b8 	.word	0x080929b8
 808344c:	080929e0 	.word	0x080929e0
 8083450:	08092a0c 	.word	0x08092a0c
 8083454:	08092a4f 	.word	0x08092a4f
 8083458:	08092a81 	.word	0x08092a81
 808345c:	08092aa7 	.word	0x08092aa7
 8083460:	08092b0d 	.word	0x08092b0d
 8083464:	08092b71 	.word	0x08092b71
 8083468:	08092b86 	.word	0x08092b86

0808346c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 808346c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 808346e:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 8083470:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 8083472:	b17c      	cbz	r4, 8083494 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 8083474:	6863      	ldr	r3, [r4, #4]
 8083476:	3b01      	subs	r3, #1
 8083478:	6063      	str	r3, [r4, #4]
 808347a:	b95b      	cbnz	r3, 8083494 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 808347c:	6823      	ldr	r3, [r4, #0]
 808347e:	4620      	mov	r0, r4
 8083480:	689b      	ldr	r3, [r3, #8]
 8083482:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8083484:	68a3      	ldr	r3, [r4, #8]
 8083486:	3b01      	subs	r3, #1
 8083488:	60a3      	str	r3, [r4, #8]
 808348a:	b91b      	cbnz	r3, 8083494 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 808348c:	6823      	ldr	r3, [r4, #0]
 808348e:	4620      	mov	r0, r4
 8083490:	68db      	ldr	r3, [r3, #12]
 8083492:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 8083494:	4628      	mov	r0, r5
 8083496:	bd38      	pop	{r3, r4, r5, pc}

08083498 <_Z13outputToCloud6StringS_>:
void outputToCloud(String data, String sensible_data){
 8083498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808349c:	b09d      	sub	sp, #116	; 0x74
 808349e:	4607      	mov	r7, r0
 80834a0:	460e      	mov	r6, r1
    String webhook_data = " ";
 80834a2:	a804      	add	r0, sp, #16
 80834a4:	49b0      	ldr	r1, [pc, #704]	; (8083768 <_Z13outputToCloud6StringS_+0x2d0>)
 80834a6:	f007 ffe5 	bl	808b474 <_ZN6StringC1EPKc>
    CO_sum += CO_float;
 80834aa:	f8df 8348 	ldr.w	r8, [pc, #840]	; 80837f4 <_Z13outputToCloud6StringS_+0x35c>
 80834ae:	4baf      	ldr	r3, [pc, #700]	; (808376c <_Z13outputToCloud6StringS_+0x2d4>)
 80834b0:	f8d8 0000 	ldr.w	r0, [r8]
 80834b4:	6819      	ldr	r1, [r3, #0]
 80834b6:	f00a fc6f 	bl	808dd98 <__addsf3>
    CO2_sum += CO2_float;
 80834ba:	4dad      	ldr	r5, [pc, #692]	; (8083770 <_Z13outputToCloud6StringS_+0x2d8>)
 80834bc:	4bad      	ldr	r3, [pc, #692]	; (8083774 <_Z13outputToCloud6StringS_+0x2dc>)
    CO_sum += CO_float;
 80834be:	f8c8 0000 	str.w	r0, [r8]
    CO2_sum += CO2_float;
 80834c2:	6819      	ldr	r1, [r3, #0]
    CO_sum += CO_float;
 80834c4:	4604      	mov	r4, r0
    CO2_sum += CO2_float;
 80834c6:	6828      	ldr	r0, [r5, #0]
 80834c8:	f00a fc66 	bl	808dd98 <__addsf3>
    O3_sum = O3_float;      //do not average ozone because it is averaged on the ozone monitor
 80834cc:	4baa      	ldr	r3, [pc, #680]	; (8083778 <_Z13outputToCloud6StringS_+0x2e0>)
    measurement_count++;
 80834ce:	f8df b330 	ldr.w	fp, [pc, #816]	; 8083800 <_Z13outputToCloud6StringS_+0x368>
    O3_sum = O3_float;      //do not average ozone because it is averaged on the ozone monitor
 80834d2:	681b      	ldr	r3, [r3, #0]
 80834d4:	f8df 9320 	ldr.w	r9, [pc, #800]	; 80837f8 <_Z13outputToCloud6StringS_+0x360>
    CO2_sum += CO2_float;
 80834d8:	4682      	mov	sl, r0
    O3_sum = O3_float;      //do not average ozone because it is averaged on the ozone monitor
 80834da:	f8c9 3000 	str.w	r3, [r9]
    measurement_count++;
 80834de:	f8db 3000 	ldr.w	r3, [fp]
    CO2_sum += CO2_float;
 80834e2:	6028      	str	r0, [r5, #0]
    measurement_count++;
 80834e4:	1c58      	adds	r0, r3, #1
    if(measurement_count == measurements_to_average){
 80834e6:	4ba5      	ldr	r3, [pc, #660]	; (808377c <_Z13outputToCloud6StringS_+0x2e4>)
    measurement_count++;
 80834e8:	f8cb 0000 	str.w	r0, [fp]
    if(measurement_count == measurements_to_average){
 80834ec:	681b      	ldr	r3, [r3, #0]
 80834ee:	4298      	cmp	r0, r3
 80834f0:	f040 8125 	bne.w	808373e <_Z13outputToCloud6StringS_+0x2a6>
        CO_sum /= measurements_to_average;
 80834f4:	f00a fd04 	bl	808df00 <__aeabi_i2f>
 80834f8:	4601      	mov	r1, r0
 80834fa:	9003      	str	r0, [sp, #12]
 80834fc:	4620      	mov	r0, r4
 80834fe:	f00a fe07 	bl	808e110 <__aeabi_fdiv>
        CO2_sum /= measurements_to_average;
 8083502:	9903      	ldr	r1, [sp, #12]
        CO_sum /= measurements_to_average;
 8083504:	f8c8 0000 	str.w	r0, [r8]
        CO2_sum /= measurements_to_average;
 8083508:	4650      	mov	r0, sl
 808350a:	f00a fe01 	bl	808e110 <__aeabi_fdiv>
        measurement_count = 0;
 808350e:	2300      	movs	r3, #0
 8083510:	f8cb 3000 	str.w	r3, [fp]
        String webhook_data = String(DEVICE_id) + ",VOC: " + String(bme.gas_resistance / 1000.0, 1) + ", CO: " + CO_sum + ", CO2: " + CO2_sum + ", PM1: " + PM01Value + ",PM2.5: " + corrected_PM_25 + ", PM10: " + PM10Value + ",Temp: " + String(readTemperature(), 1) + ",Press: ";
 8083514:	4b9a      	ldr	r3, [pc, #616]	; (8083780 <_Z13outputToCloud6StringS_+0x2e8>)
 8083516:	220a      	movs	r2, #10
 8083518:	6819      	ldr	r1, [r3, #0]
        CO2_sum /= measurements_to_average;
 808351a:	6028      	str	r0, [r5, #0]
        String webhook_data = String(DEVICE_id) + ",VOC: " + String(bme.gas_resistance / 1000.0, 1) + ", CO: " + CO_sum + ", CO2: " + CO2_sum + ", PM1: " + PM01Value + ",PM2.5: " + corrected_PM_25 + ", PM10: " + PM10Value + ",Temp: " + String(readTemperature(), 1) + ",Press: ";
 808351c:	a80c      	add	r0, sp, #48	; 0x30
 808351e:	f008 f81d 	bl	808b55c <_ZN6StringC1Eih>
	StringSumHelper(const String &s) : String(s) {}
 8083522:	a90c      	add	r1, sp, #48	; 0x30
 8083524:	a810      	add	r0, sp, #64	; 0x40
 8083526:	f007 ffe4 	bl	808b4f2 <_ZN6StringC1ERKS_>
 808352a:	4996      	ldr	r1, [pc, #600]	; (8083784 <_Z13outputToCloud6StringS_+0x2ec>)
 808352c:	a810      	add	r0, sp, #64	; 0x40
 808352e:	f008 f8bd 	bl	808b6ac <_ZplRK15StringSumHelperPKc>
 8083532:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 8083804 <_Z13outputToCloud6StringS_+0x36c>
 8083536:	4683      	mov	fp, r0
 8083538:	f8da 000c 	ldr.w	r0, [sl, #12]
 808353c:	f00a f886 	bl	808d64c <__aeabi_f2d>
 8083540:	2200      	movs	r2, #0
 8083542:	4b91      	ldr	r3, [pc, #580]	; (8083788 <_Z13outputToCloud6StringS_+0x2f0>)
 8083544:	f00a fa04 	bl	808d950 <__aeabi_ddiv>
 8083548:	2401      	movs	r4, #1
 808354a:	4602      	mov	r2, r0
 808354c:	460b      	mov	r3, r1
 808354e:	9400      	str	r4, [sp, #0]
 8083550:	a814      	add	r0, sp, #80	; 0x50
 8083552:	f008 f82d 	bl	808b5b0 <_ZN6StringC1Edi>
 8083556:	a914      	add	r1, sp, #80	; 0x50
 8083558:	4658      	mov	r0, fp
 808355a:	f008 f89b 	bl	808b694 <_ZplRK15StringSumHelperRK6String>
 808355e:	498b      	ldr	r1, [pc, #556]	; (808378c <_Z13outputToCloud6StringS_+0x2f4>)
 8083560:	f008 f8a4 	bl	808b6ac <_ZplRK15StringSumHelperPKc>
 8083564:	f8d8 1000 	ldr.w	r1, [r8]
 8083568:	f008 f8be 	bl	808b6e8 <_ZplRK15StringSumHelperf>
 808356c:	4988      	ldr	r1, [pc, #544]	; (8083790 <_Z13outputToCloud6StringS_+0x2f8>)
 808356e:	f008 f89d 	bl	808b6ac <_ZplRK15StringSumHelperPKc>
 8083572:	6829      	ldr	r1, [r5, #0]
 8083574:	f008 f8b8 	bl	808b6e8 <_ZplRK15StringSumHelperf>
 8083578:	4986      	ldr	r1, [pc, #536]	; (8083794 <_Z13outputToCloud6StringS_+0x2fc>)
 808357a:	f008 f897 	bl	808b6ac <_ZplRK15StringSumHelperPKc>
 808357e:	4b86      	ldr	r3, [pc, #536]	; (8083798 <_Z13outputToCloud6StringS_+0x300>)
 8083580:	6819      	ldr	r1, [r3, #0]
 8083582:	f008 f8a7 	bl	808b6d4 <_ZplRK15StringSumHelperi>
 8083586:	4985      	ldr	r1, [pc, #532]	; (808379c <_Z13outputToCloud6StringS_+0x304>)
 8083588:	f008 f890 	bl	808b6ac <_ZplRK15StringSumHelperPKc>
 808358c:	4b84      	ldr	r3, [pc, #528]	; (80837a0 <_Z13outputToCloud6StringS_+0x308>)
 808358e:	6819      	ldr	r1, [r3, #0]
 8083590:	f008 f8aa 	bl	808b6e8 <_ZplRK15StringSumHelperf>
 8083594:	4983      	ldr	r1, [pc, #524]	; (80837a4 <_Z13outputToCloud6StringS_+0x30c>)
 8083596:	f008 f889 	bl	808b6ac <_ZplRK15StringSumHelperPKc>
 808359a:	4b83      	ldr	r3, [pc, #524]	; (80837a8 <_Z13outputToCloud6StringS_+0x310>)
 808359c:	6819      	ldr	r1, [r3, #0]
 808359e:	f008 f899 	bl	808b6d4 <_ZplRK15StringSumHelperi>
 80835a2:	4982      	ldr	r1, [pc, #520]	; (80837ac <_Z13outputToCloud6StringS_+0x314>)
 80835a4:	f008 f882 	bl	808b6ac <_ZplRK15StringSumHelperPKc>
 80835a8:	4605      	mov	r5, r0
 80835aa:	f7fe f82d 	bl	8081608 <_Z15readTemperaturev>
 80835ae:	4622      	mov	r2, r4
 80835b0:	4601      	mov	r1, r0
 80835b2:	a818      	add	r0, sp, #96	; 0x60
 80835b4:	f007 ffe5 	bl	808b582 <_ZN6StringC1Efi>
 80835b8:	4628      	mov	r0, r5
 80835ba:	a918      	add	r1, sp, #96	; 0x60
 80835bc:	f008 f86a 	bl	808b694 <_ZplRK15StringSumHelperRK6String>
 80835c0:	497b      	ldr	r1, [pc, #492]	; (80837b0 <_Z13outputToCloud6StringS_+0x318>)
 80835c2:	f008 f873 	bl	808b6ac <_ZplRK15StringSumHelperPKc>
 80835c6:	4601      	mov	r1, r0
 80835c8:	a808      	add	r0, sp, #32
 80835ca:	f007 ff92 	bl	808b4f2 <_ZN6StringC1ERKS_>
 80835ce:	a818      	add	r0, sp, #96	; 0x60
 80835d0:	f007 ff06 	bl	808b3e0 <_ZN6StringD1Ev>
 80835d4:	a814      	add	r0, sp, #80	; 0x50
 80835d6:	f007 ff03 	bl	808b3e0 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80835da:	a810      	add	r0, sp, #64	; 0x40
 80835dc:	f007 ff00 	bl	808b3e0 <_ZN6StringD1Ev>
 80835e0:	a80c      	add	r0, sp, #48	; 0x30
 80835e2:	f007 fefd 	bl	808b3e0 <_ZN6StringD1Ev>
        webhook_data += String(bme.pressure / 100.0, 1) + ",HUM: " + String(bme.humidity, 1) + ",Snd: " + String(sound_average) + ",O3: " + O3_sum + "\n\r";
 80835e6:	f8da 0004 	ldr.w	r0, [sl, #4]
 80835ea:	f00a f82f 	bl	808d64c <__aeabi_f2d>
 80835ee:	2200      	movs	r2, #0
 80835f0:	4b70      	ldr	r3, [pc, #448]	; (80837b4 <_Z13outputToCloud6StringS_+0x31c>)
 80835f2:	f00a f9ad 	bl	808d950 <__aeabi_ddiv>
 80835f6:	9400      	str	r4, [sp, #0]
 80835f8:	460b      	mov	r3, r1
 80835fa:	4602      	mov	r2, r0
 80835fc:	a80c      	add	r0, sp, #48	; 0x30
 80835fe:	f007 ffd7 	bl	808b5b0 <_ZN6StringC1Edi>
	StringSumHelper(const String &s) : String(s) {}
 8083602:	a90c      	add	r1, sp, #48	; 0x30
 8083604:	a810      	add	r0, sp, #64	; 0x40
 8083606:	f007 ff74 	bl	808b4f2 <_ZN6StringC1ERKS_>
 808360a:	496b      	ldr	r1, [pc, #428]	; (80837b8 <_Z13outputToCloud6StringS_+0x320>)
 808360c:	a810      	add	r0, sp, #64	; 0x40
 808360e:	f008 f84d 	bl	808b6ac <_ZplRK15StringSumHelperPKc>
 8083612:	4605      	mov	r5, r0
 8083614:	4622      	mov	r2, r4
 8083616:	f8da 1008 	ldr.w	r1, [sl, #8]
 808361a:	a814      	add	r0, sp, #80	; 0x50
 808361c:	f007 ffb1 	bl	808b582 <_ZN6StringC1Efi>
 8083620:	a914      	add	r1, sp, #80	; 0x50
 8083622:	4628      	mov	r0, r5
 8083624:	f008 f836 	bl	808b694 <_ZplRK15StringSumHelperRK6String>
 8083628:	4964      	ldr	r1, [pc, #400]	; (80837bc <_Z13outputToCloud6StringS_+0x324>)
 808362a:	f008 f83f 	bl	808b6ac <_ZplRK15StringSumHelperPKc>
 808362e:	2306      	movs	r3, #6
 8083630:	4604      	mov	r4, r0
 8083632:	9300      	str	r3, [sp, #0]
 8083634:	4b62      	ldr	r3, [pc, #392]	; (80837c0 <_Z13outputToCloud6StringS_+0x328>)
 8083636:	a818      	add	r0, sp, #96	; 0x60
 8083638:	e9d3 2300 	ldrd	r2, r3, [r3]
 808363c:	f007 ffb8 	bl	808b5b0 <_ZN6StringC1Edi>
 8083640:	4620      	mov	r0, r4
 8083642:	a918      	add	r1, sp, #96	; 0x60
 8083644:	f008 f826 	bl	808b694 <_ZplRK15StringSumHelperRK6String>
 8083648:	495e      	ldr	r1, [pc, #376]	; (80837c4 <_Z13outputToCloud6StringS_+0x32c>)
 808364a:	f008 f82f 	bl	808b6ac <_ZplRK15StringSumHelperPKc>
 808364e:	f8d9 1000 	ldr.w	r1, [r9]
 8083652:	f008 f849 	bl	808b6e8 <_ZplRK15StringSumHelperf>
 8083656:	495c      	ldr	r1, [pc, #368]	; (80837c8 <_Z13outputToCloud6StringS_+0x330>)
 8083658:	f008 f828 	bl	808b6ac <_ZplRK15StringSumHelperPKc>
 808365c:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808365e:	a808      	add	r0, sp, #32
 8083660:	f007 ffd3 	bl	808b60a <_ZN6String6concatERKS_>
 8083664:	a818      	add	r0, sp, #96	; 0x60
 8083666:	f007 febb 	bl	808b3e0 <_ZN6StringD1Ev>
 808366a:	a814      	add	r0, sp, #80	; 0x50
 808366c:	f007 feb8 	bl	808b3e0 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8083670:	a810      	add	r0, sp, #64	; 0x40
 8083672:	f007 feb5 	bl	808b3e0 <_ZN6StringD1Ev>
 8083676:	a80c      	add	r0, sp, #48	; 0x30
 8083678:	f007 feb2 	bl	808b3e0 <_ZN6StringD1Ev>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808367c:	f007 fa72 	bl	808ab64 <spark_cloud_flag_connected>
 8083680:	4c52      	ldr	r4, [pc, #328]	; (80837cc <_Z13outputToCloud6StringS_+0x334>)
 8083682:	4b53      	ldr	r3, [pc, #332]	; (80837d0 <_Z13outputToCloud6StringS_+0x338>)
        if(Particle.connected() && serial_cellular_enabled){
 8083684:	2800      	cmp	r0, #0
 8083686:	d060      	beq.n	808374a <_Z13outputToCloud6StringS_+0x2b2>
 8083688:	681b      	ldr	r3, [r3, #0]
 808368a:	2b00      	cmp	r3, #0
 808368c:	d061      	beq.n	8083752 <_Z13outputToCloud6StringS_+0x2ba>
            status_word.status_int |= 0x0002;
 808368e:	4a51      	ldr	r2, [pc, #324]	; (80837d4 <_Z13outputToCloud6StringS_+0x33c>)
 8083690:	4d51      	ldr	r5, [pc, #324]	; (80837d8 <_Z13outputToCloud6StringS_+0x340>)
 8083692:	8813      	ldrh	r3, [r2, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8083694:	4951      	ldr	r1, [pc, #324]	; (80837dc <_Z13outputToCloud6StringS_+0x344>)
 8083696:	f043 0302 	orr.w	r3, r3, #2
 808369a:	8013      	strh	r3, [r2, #0]
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 808369c:	782b      	ldrb	r3, [r5, #0]
 808369e:	a818      	add	r0, sp, #96	; 0x60
 80836a0:	f88d 3000 	strb.w	r3, [sp]
 80836a4:	683a      	ldr	r2, [r7, #0]
 80836a6:	233c      	movs	r3, #60	; 0x3c
 80836a8:	f008 ff80 	bl	808c5ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80836ac:	a819      	add	r0, sp, #100	; 0x64
 80836ae:	f7ff fedd 	bl	808346c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80836b2:	f006 ffd7 	bl	808a664 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80836b6:	4f4a      	ldr	r7, [pc, #296]	; (80837e0 <_Z13outputToCloud6StringS_+0x348>)
 80836b8:	6038      	str	r0, [r7, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
 80836ba:	f007 fa43 	bl	808ab44 <spark_process>
            if(debugging_enabled){
 80836be:	6823      	ldr	r3, [r4, #0]
 80836c0:	b173      	cbz	r3, 80836e0 <_Z13outputToCloud6StringS_+0x248>
              Serial.println("Published pamup data!");
 80836c2:	f009 f9a3 	bl	808ca0c <_Z16_fetch_usbserialv>
 80836c6:	4947      	ldr	r1, [pc, #284]	; (80837e4 <_Z13outputToCloud6StringS_+0x34c>)
 80836c8:	f008 f8e5 	bl	808b896 <_ZN5Print7printlnEPKc>
              writeLogFile("Published pamup data!");
 80836cc:	4945      	ldr	r1, [pc, #276]	; (80837e4 <_Z13outputToCloud6StringS_+0x34c>)
 80836ce:	a818      	add	r0, sp, #96	; 0x60
 80836d0:	f007 fed0 	bl	808b474 <_ZN6StringC1EPKc>
 80836d4:	a818      	add	r0, sp, #96	; 0x60
 80836d6:	f7fe fb03 	bl	8081ce0 <_Z12writeLogFile6String>
 80836da:	a818      	add	r0, sp, #96	; 0x60
 80836dc:	f007 fe80 	bl	808b3e0 <_ZN6StringD1Ev>
            if(sensible_iot_en){
 80836e0:	4b41      	ldr	r3, [pc, #260]	; (80837e8 <_Z13outputToCloud6StringS_+0x350>)
 80836e2:	681b      	ldr	r3, [r3, #0]
 80836e4:	b30b      	cbz	r3, 808372a <_Z13outputToCloud6StringS_+0x292>
 80836e6:	782b      	ldrb	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80836e8:	6832      	ldr	r2, [r6, #0]
 80836ea:	4940      	ldr	r1, [pc, #256]	; (80837ec <_Z13outputToCloud6StringS_+0x354>)
 80836ec:	f88d 3000 	strb.w	r3, [sp]
 80836f0:	a818      	add	r0, sp, #96	; 0x60
 80836f2:	233c      	movs	r3, #60	; 0x3c
 80836f4:	f008 ff5a 	bl	808c5ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80836f8:	a819      	add	r0, sp, #100	; 0x64
 80836fa:	f7ff feb7 	bl	808346c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
		return HAL_Timer_Get_Milli_Seconds();
 80836fe:	f006 ffb1 	bl	808a664 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
 8083702:	6038      	str	r0, [r7, #0]
    		spark_process();
 8083704:	f007 fa1e 	bl	808ab44 <spark_process>
                if(debugging_enabled){
 8083708:	6823      	ldr	r3, [r4, #0]
 808370a:	b173      	cbz	r3, 808372a <_Z13outputToCloud6StringS_+0x292>
                    Serial.println("Published sensible data!");
 808370c:	f009 f97e 	bl	808ca0c <_Z16_fetch_usbserialv>
 8083710:	4937      	ldr	r1, [pc, #220]	; (80837f0 <_Z13outputToCloud6StringS_+0x358>)
 8083712:	f008 f8c0 	bl	808b896 <_ZN5Print7printlnEPKc>
                    writeLogFile("Published sensible data!");
 8083716:	4936      	ldr	r1, [pc, #216]	; (80837f0 <_Z13outputToCloud6StringS_+0x358>)
                    writeLogFile("Couldn't connect to particle.");
 8083718:	a818      	add	r0, sp, #96	; 0x60
 808371a:	f007 feab 	bl	808b474 <_ZN6StringC1EPKc>
 808371e:	a818      	add	r0, sp, #96	; 0x60
 8083720:	f7fe fade 	bl	8081ce0 <_Z12writeLogFile6String>
 8083724:	a818      	add	r0, sp, #96	; 0x60
 8083726:	f007 fe5b 	bl	808b3e0 <_ZN6StringD1Ev>
        CO_sum = 0;
 808372a:	2300      	movs	r3, #0
 808372c:	4a31      	ldr	r2, [pc, #196]	; (80837f4 <_Z13outputToCloud6StringS_+0x35c>)
        String webhook_data = String(DEVICE_id) + ",VOC: " + String(bme.gas_resistance / 1000.0, 1) + ", CO: " + CO_sum + ", CO2: " + CO2_sum + ", PM1: " + PM01Value + ",PM2.5: " + corrected_PM_25 + ", PM10: " + PM10Value + ",Temp: " + String(readTemperature(), 1) + ",Press: ";
 808372e:	a808      	add	r0, sp, #32
        CO_sum = 0;
 8083730:	6013      	str	r3, [r2, #0]
        CO2_sum = 0;
 8083732:	4a0f      	ldr	r2, [pc, #60]	; (8083770 <_Z13outputToCloud6StringS_+0x2d8>)
 8083734:	6013      	str	r3, [r2, #0]
        O3_sum = 0;
 8083736:	4a30      	ldr	r2, [pc, #192]	; (80837f8 <_Z13outputToCloud6StringS_+0x360>)
 8083738:	6013      	str	r3, [r2, #0]
        String webhook_data = String(DEVICE_id) + ",VOC: " + String(bme.gas_resistance / 1000.0, 1) + ", CO: " + CO_sum + ", CO2: " + CO2_sum + ", PM1: " + PM01Value + ",PM2.5: " + corrected_PM_25 + ", PM10: " + PM10Value + ",Temp: " + String(readTemperature(), 1) + ",Press: ";
 808373a:	f007 fe51 	bl	808b3e0 <_ZN6StringD1Ev>
    String webhook_data = " ";
 808373e:	a804      	add	r0, sp, #16
 8083740:	f007 fe4e 	bl	808b3e0 <_ZN6StringD1Ev>
}
 8083744:	b01d      	add	sp, #116	; 0x74
 8083746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(serial_cellular_enabled == 0){
 808374a:	681b      	ldr	r3, [r3, #0]
 808374c:	6821      	ldr	r1, [r4, #0]
 808374e:	2b00      	cmp	r3, #0
 8083750:	d15a      	bne.n	8083808 <_Z13outputToCloud6StringS_+0x370>
                if(debugging_enabled){
 8083752:	6823      	ldr	r3, [r4, #0]
 8083754:	2b00      	cmp	r3, #0
 8083756:	d0e8      	beq.n	808372a <_Z13outputToCloud6StringS_+0x292>
                    Serial.println("Cellular is disabled.");
 8083758:	f009 f958 	bl	808ca0c <_Z16_fetch_usbserialv>
 808375c:	4927      	ldr	r1, [pc, #156]	; (80837fc <_Z13outputToCloud6StringS_+0x364>)
 808375e:	f008 f89a 	bl	808b896 <_ZN5Print7printlnEPKc>
                    writeLogFile("Cellular is disabled.");
 8083762:	4926      	ldr	r1, [pc, #152]	; (80837fc <_Z13outputToCloud6StringS_+0x364>)
 8083764:	e7d8      	b.n	8083718 <_Z13outputToCloud6StringS_+0x280>
 8083766:	bf00      	nop
 8083768:	08093c34 	.word	0x08093c34
 808376c:	20000340 	.word	0x20000340
 8083770:	20000338 	.word	0x20000338
 8083774:	2000032c 	.word	0x2000032c
 8083778:	20000354 	.word	0x20000354
 808377c:	200007f8 	.word	0x200007f8
 8083780:	20000080 	.word	0x20000080
 8083784:	08092b9a 	.word	0x08092b9a
 8083788:	408f4000 	.word	0x408f4000
 808378c:	08092ba1 	.word	0x08092ba1
 8083790:	08092ba8 	.word	0x08092ba8
 8083794:	08092bb0 	.word	0x08092bb0
 8083798:	2000035c 	.word	0x2000035c
 808379c:	08092bb8 	.word	0x08092bb8
 80837a0:	2000068c 	.word	0x2000068c
 80837a4:	08092bc1 	.word	0x08092bc1
 80837a8:	20000360 	.word	0x20000360
 80837ac:	08092bca 	.word	0x08092bca
 80837b0:	08092bd2 	.word	0x08092bd2
 80837b4:	40590000 	.word	0x40590000
 80837b8:	08092bdb 	.word	0x08092bdb
 80837bc:	08092be2 	.word	0x08092be2
 80837c0:	20000ce0 	.word	0x20000ce0
 80837c4:	08092be9 	.word	0x08092be9
 80837c8:	08092e7a 	.word	0x08092e7a
 80837cc:	20000690 	.word	0x20000690
 80837d0:	20000cdc 	.word	0x20000cdc
 80837d4:	20000cf8 	.word	0x20000cf8
 80837d8:	200005a8 	.word	0x200005a8
 80837dc:	08092bef 	.word	0x08092bef
 80837e0:	20001374 	.word	0x20001374
 80837e4:	08092bf5 	.word	0x08092bf5
 80837e8:	20000cd8 	.word	0x20000cd8
 80837ec:	08092c0b 	.word	0x08092c0b
 80837f0:	08092c19 	.word	0x08092c19
 80837f4:	2000034c 	.word	0x2000034c
 80837f8:	20000358 	.word	0x20000358
 80837fc:	08092c32 	.word	0x08092c32
 8083800:	200007f4 	.word	0x200007f4
 8083804:	200005ec 	.word	0x200005ec
                status_word.status_int &= 0xFFFD;   //clear the connected bit
 8083808:	4a06      	ldr	r2, [pc, #24]	; (8083824 <_Z13outputToCloud6StringS_+0x38c>)
 808380a:	8813      	ldrh	r3, [r2, #0]
 808380c:	f023 0302 	bic.w	r3, r3, #2
 8083810:	8013      	strh	r3, [r2, #0]
                if(debugging_enabled){
 8083812:	2900      	cmp	r1, #0
 8083814:	d089      	beq.n	808372a <_Z13outputToCloud6StringS_+0x292>
                    Serial.println("Couldn't connect to particle.");
 8083816:	f009 f8f9 	bl	808ca0c <_Z16_fetch_usbserialv>
 808381a:	4903      	ldr	r1, [pc, #12]	; (8083828 <_Z13outputToCloud6StringS_+0x390>)
 808381c:	f008 f83b 	bl	808b896 <_ZN5Print7printlnEPKc>
                    writeLogFile("Couldn't connect to particle.");
 8083820:	4901      	ldr	r1, [pc, #4]	; (8083828 <_Z13outputToCloud6StringS_+0x390>)
 8083822:	e779      	b.n	8083718 <_Z13outputToCloud6StringS_+0x280>
 8083824:	20000cf8 	.word	0x20000cf8
 8083828:	08092c48 	.word	0x08092c48

0808382c <_Z15outputDataToESPv>:
void outputDataToESP(void){
 808382c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8083830:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
    time_t time = Time.now();
 8083834:	f008 fba1 	bl	808bf7a <_ZN9TimeClass3nowEv>
    Time.setFormat(TIME_FORMAT_ISO8601_FULL);
 8083838:	4bbc      	ldr	r3, [pc, #752]	; (8083b2c <_Z15outputDataToESPv+0x300>)
    time_t time = Time.now();
 808383a:	4606      	mov	r6, r0
            return format(now(), format_spec);
        }

        void setFormat(const char* format)
        {
            this->format_spec = format;
 808383c:	681a      	ldr	r2, [r3, #0]
 808383e:	4bbc      	ldr	r3, [pc, #752]	; (8083b30 <_Z15outputDataToESPv+0x304>)
 8083840:	460d      	mov	r5, r1
    String cloud_output_string = "";    //create a clean string
 8083842:	a802      	add	r0, sp, #8
 8083844:	49bb      	ldr	r1, [pc, #748]	; (8083b34 <_Z15outputDataToESPv+0x308>)
 8083846:	601a      	str	r2, [r3, #0]
 8083848:	f007 fe14 	bl	808b474 <_ZN6StringC1EPKc>
    String csv_output_string = "";
 808384c:	49b9      	ldr	r1, [pc, #740]	; (8083b34 <_Z15outputDataToESPv+0x308>)
 808384e:	a806      	add	r0, sp, #24
 8083850:	f007 fe10 	bl	808b474 <_ZN6StringC1EPKc>
    String sensible_string = "";
 8083854:	49b7      	ldr	r1, [pc, #732]	; (8083b34 <_Z15outputDataToESPv+0x308>)
 8083856:	a80a      	add	r0, sp, #40	; 0x28
 8083858:	f007 fe0c 	bl	808b474 <_ZN6StringC1EPKc>
    String latitude_string = "";
 808385c:	49b5      	ldr	r1, [pc, #724]	; (8083b34 <_Z15outputDataToESPv+0x308>)
 808385e:	a80e      	add	r0, sp, #56	; 0x38
 8083860:	f007 fe08 	bl	808b474 <_ZN6StringC1EPKc>
    String longitude_string = "";
 8083864:	49b3      	ldr	r1, [pc, #716]	; (8083b34 <_Z15outputDataToESPv+0x308>)
 8083866:	a812      	add	r0, sp, #72	; 0x48
 8083868:	f007 fe04 	bl	808b474 <_ZN6StringC1EPKc>
	String & operator += (char c)			{concat(c); return (*this);}
 808386c:	215e      	movs	r1, #94	; 0x5e
 808386e:	a802      	add	r0, sp, #8
	StringSumHelper(const String &s) : String(s) {}
 8083870:	ac64      	add	r4, sp, #400	; 0x190
	String & operator += (char c)			{concat(c); return (*this);}
 8083872:	f007 fedd 	bl	808b630 <_ZN6String6concatEc>
    cloud_output_string += String(1) + ";";           //header
 8083876:	220a      	movs	r2, #10
 8083878:	2101      	movs	r1, #1
 808387a:	a827      	add	r0, sp, #156	; 0x9c
 808387c:	f007 fe6e 	bl	808b55c <_ZN6StringC1Eih>
	StringSumHelper(const String &s) : String(s) {}
 8083880:	4620      	mov	r0, r4
 8083882:	a927      	add	r1, sp, #156	; 0x9c
 8083884:	f007 fe35 	bl	808b4f2 <_ZN6StringC1ERKS_>
 8083888:	4620      	mov	r0, r4
 808388a:	49ab      	ldr	r1, [pc, #684]	; (8083b38 <_Z15outputDataToESPv+0x30c>)
 808388c:	f007 ff0e 	bl	808b6ac <_ZplRK15StringSumHelperPKc>
 8083890:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083892:	a802      	add	r0, sp, #8
 8083894:	f007 feb9 	bl	808b60a <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8083898:	4620      	mov	r0, r4
 808389a:	f007 fda1 	bl	808b3e0 <_ZN6StringD1Ev>
 808389e:	a827      	add	r0, sp, #156	; 0x9c
 80838a0:	f007 fd9e 	bl	808b3e0 <_ZN6StringD1Ev>
    cloud_output_string += String(DEVICE_ID_PACKET_CONSTANT) + String(DEVICE_id);   //device id
 80838a4:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 8083b98 <_Z15outputDataToESPv+0x36c>
 80838a8:	215a      	movs	r1, #90	; 0x5a
 80838aa:	a822      	add	r0, sp, #136	; 0x88
 80838ac:	f007 fe45 	bl	808b53a <_ZN6StringC1Ec>
	StringSumHelper(const String &s) : String(s) {}
 80838b0:	4620      	mov	r0, r4
 80838b2:	a922      	add	r1, sp, #136	; 0x88
 80838b4:	f007 fe1d 	bl	808b4f2 <_ZN6StringC1ERKS_>
 80838b8:	220a      	movs	r2, #10
 80838ba:	f8d8 1000 	ldr.w	r1, [r8]
 80838be:	a827      	add	r0, sp, #156	; 0x9c
 80838c0:	f007 fe4c 	bl	808b55c <_ZN6StringC1Eih>
 80838c4:	4620      	mov	r0, r4
 80838c6:	a927      	add	r1, sp, #156	; 0x9c
 80838c8:	f007 fee4 	bl	808b694 <_ZplRK15StringSumHelperRK6String>
 80838cc:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80838ce:	a802      	add	r0, sp, #8
 80838d0:	f007 fe9b 	bl	808b60a <_ZN6String6concatERKS_>
 80838d4:	a827      	add	r0, sp, #156	; 0x9c
 80838d6:	f007 fd83 	bl	808b3e0 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80838da:	4620      	mov	r0, r4
 80838dc:	f007 fd80 	bl	808b3e0 <_ZN6StringD1Ev>
 80838e0:	a822      	add	r0, sp, #136	; 0x88
 80838e2:	f007 fd7d 	bl	808b3e0 <_ZN6StringD1Ev>
    csv_output_string += String(DEVICE_id) + ",";
 80838e6:	220a      	movs	r2, #10
 80838e8:	f8d8 1000 	ldr.w	r1, [r8]
 80838ec:	a827      	add	r0, sp, #156	; 0x9c
 80838ee:	f007 fe35 	bl	808b55c <_ZN6StringC1Eih>
	StringSumHelper(const String &s) : String(s) {}
 80838f2:	4620      	mov	r0, r4
 80838f4:	a927      	add	r1, sp, #156	; 0x9c
 80838f6:	f007 fdfc 	bl	808b4f2 <_ZN6StringC1ERKS_>
 80838fa:	4620      	mov	r0, r4
 80838fc:	498f      	ldr	r1, [pc, #572]	; (8083b3c <_Z15outputDataToESPv+0x310>)
 80838fe:	f007 fed5 	bl	808b6ac <_ZplRK15StringSumHelperPKc>
 8083902:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083904:	a806      	add	r0, sp, #24
 8083906:	f007 fe80 	bl	808b60a <_ZN6String6concatERKS_>
class StringSumHelper : public String
 808390a:	4620      	mov	r0, r4
 808390c:	f007 fd68 	bl	808b3e0 <_ZN6StringD1Ev>
 8083910:	a827      	add	r0, sp, #156	; 0x9c
 8083912:	f007 fd65 	bl	808b3e0 <_ZN6StringD1Ev>

// spark::JSONBufferWriter
inline spark::JSONBufferWriter::JSONBufferWriter(char *buf, size_t size) :
        buf_(buf),
        bufSize_(size),
        n_(0) {
 8083916:	4b8a      	ldr	r3, [pc, #552]	; (8083b40 <_Z15outputDataToESPv+0x314>)
        state_(BEGIN) {
 8083918:	2700      	movs	r7, #0
        n_(0) {
 808391a:	9322      	str	r3, [sp, #136]	; 0x88
 808391c:	23ff      	movs	r3, #255	; 0xff
    writer.beginObject();
 808391e:	a822      	add	r0, sp, #136	; 0x88
 8083920:	e9cd 3725 	strd	r3, r7, [sp, #148]	; 0x94
        state_(BEGIN) {
 8083924:	f88d 708c 	strb.w	r7, [sp, #140]	; 0x8c
        n_(0) {
 8083928:	9424      	str	r4, [sp, #144]	; 0x90
 808392a:	f009 fb5a 	bl	808cfe2 <_ZN5spark10JSONWriter11beginObjectEv>
	StringSumHelper(const char *p) : String(p) {}
 808392e:	4985      	ldr	r1, [pc, #532]	; (8083b44 <_Z15outputDataToESPv+0x318>)
 8083930:	a827      	add	r0, sp, #156	; 0x9c
 8083932:	f007 fd9f 	bl	808b474 <_ZN6StringC1EPKc>
    String device_string = "PAM-" + String(DEVICE_id);
 8083936:	220a      	movs	r2, #10
 8083938:	f8d8 1000 	ldr.w	r1, [r8]
 808393c:	a81e      	add	r0, sp, #120	; 0x78
 808393e:	f007 fe0d 	bl	808b55c <_ZN6StringC1Eih>
 8083942:	a91e      	add	r1, sp, #120	; 0x78
 8083944:	a827      	add	r0, sp, #156	; 0x9c
 8083946:	f007 fea5 	bl	808b694 <_ZplRK15StringSumHelperRK6String>
 808394a:	4601      	mov	r1, r0
 808394c:	a816      	add	r0, sp, #88	; 0x58
 808394e:	f007 fdd0 	bl	808b4f2 <_ZN6StringC1ERKS_>
 8083952:	a81e      	add	r0, sp, #120	; 0x78
 8083954:	f007 fd44 	bl	808b3e0 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8083958:	a827      	add	r0, sp, #156	; 0x9c
 808395a:	f007 fd41 	bl	808b3e0 <_ZN6StringD1Ev>
    writer.name("instrumentKey").value(device_string);
 808395e:	497a      	ldr	r1, [pc, #488]	; (8083b48 <_Z15outputDataToESPv+0x31c>)
 8083960:	a822      	add	r0, sp, #136	; 0x88
 8083962:	f7fd fa1b 	bl	8080d9c <_ZN5spark10JSONWriter4nameEPKc>
 8083966:	a916      	add	r1, sp, #88	; 0x58
 8083968:	f7fd fa25 	bl	8080db6 <_ZN5spark10JSONWriter5valueERK6String>
    writer.name("datetime").value(String(Time.format(time, "%Y-%m-%dT%H:%M:%SZ")));
 808396c:	4977      	ldr	r1, [pc, #476]	; (8083b4c <_Z15outputDataToESPv+0x320>)
 808396e:	a822      	add	r0, sp, #136	; 0x88
 8083970:	f7fd fa14 	bl	8080d9c <_ZN5spark10JSONWriter4nameEPKc>
 8083974:	4604      	mov	r4, r0
 8083976:	4b76      	ldr	r3, [pc, #472]	; (8083b50 <_Z15outputDataToESPv+0x324>)
 8083978:	4632      	mov	r2, r6
 808397a:	4976      	ldr	r1, [pc, #472]	; (8083b54 <_Z15outputDataToESPv+0x328>)
 808397c:	9300      	str	r3, [sp, #0]
 808397e:	a827      	add	r0, sp, #156	; 0x9c
 8083980:	462b      	mov	r3, r5
 8083982:	f008 fa9b 	bl	808bebc <_ZN9TimeClass6formatExPKc>
 8083986:	a927      	add	r1, sp, #156	; 0x9c
 8083988:	4620      	mov	r0, r4
 808398a:	f7fd fa14 	bl	8080db6 <_ZN5spark10JSONWriter5valueERK6String>
 808398e:	a827      	add	r0, sp, #156	; 0x9c
 8083990:	f007 fd26 	bl	808b3e0 <_ZN6StringD1Ev>
    writer.name("CO2").value(String(CO2_float, 0));
 8083994:	4970      	ldr	r1, [pc, #448]	; (8083b58 <_Z15outputDataToESPv+0x32c>)
 8083996:	a822      	add	r0, sp, #136	; 0x88
 8083998:	f7fd fa00 	bl	8080d9c <_ZN5spark10JSONWriter4nameEPKc>
 808399c:	4604      	mov	r4, r0
 808399e:	4b6f      	ldr	r3, [pc, #444]	; (8083b5c <_Z15outputDataToESPv+0x330>)
 80839a0:	463a      	mov	r2, r7
 80839a2:	6819      	ldr	r1, [r3, #0]
 80839a4:	a827      	add	r0, sp, #156	; 0x9c
 80839a6:	f007 fdec 	bl	808b582 <_ZN6StringC1Efi>
 80839aa:	a927      	add	r1, sp, #156	; 0x9c
 80839ac:	4620      	mov	r0, r4
 80839ae:	f7fd fa02 	bl	8080db6 <_ZN5spark10JSONWriter5valueERK6String>
 80839b2:	a827      	add	r0, sp, #156	; 0x9c
 80839b4:	f007 fd14 	bl	808b3e0 <_ZN6StringD1Ev>
    writer.name("CO").value(String(CO_float, 3));
 80839b8:	4969      	ldr	r1, [pc, #420]	; (8083b60 <_Z15outputDataToESPv+0x334>)
 80839ba:	a822      	add	r0, sp, #136	; 0x88
 80839bc:	f7fd f9ee 	bl	8080d9c <_ZN5spark10JSONWriter4nameEPKc>
 80839c0:	4604      	mov	r4, r0
 80839c2:	4b68      	ldr	r3, [pc, #416]	; (8083b64 <_Z15outputDataToESPv+0x338>)
 80839c4:	2203      	movs	r2, #3
 80839c6:	6819      	ldr	r1, [r3, #0]
 80839c8:	a827      	add	r0, sp, #156	; 0x9c
 80839ca:	f007 fdda 	bl	808b582 <_ZN6StringC1Efi>
 80839ce:	a927      	add	r1, sp, #156	; 0x9c
 80839d0:	4620      	mov	r0, r4
 80839d2:	f7fd f9f0 	bl	8080db6 <_ZN5spark10JSONWriter5valueERK6String>
 80839d6:	a827      	add	r0, sp, #156	; 0x9c
 80839d8:	f007 fd02 	bl	808b3e0 <_ZN6StringD1Ev>
    writer.name("PM1_0").value(String(PM01Value));
 80839dc:	4962      	ldr	r1, [pc, #392]	; (8083b68 <_Z15outputDataToESPv+0x33c>)
 80839de:	a822      	add	r0, sp, #136	; 0x88
 80839e0:	f7fd f9dc 	bl	8080d9c <_ZN5spark10JSONWriter4nameEPKc>
 80839e4:	4604      	mov	r4, r0
 80839e6:	4b61      	ldr	r3, [pc, #388]	; (8083b6c <_Z15outputDataToESPv+0x340>)
 80839e8:	220a      	movs	r2, #10
 80839ea:	6819      	ldr	r1, [r3, #0]
 80839ec:	a827      	add	r0, sp, #156	; 0x9c
 80839ee:	f007 fdb5 	bl	808b55c <_ZN6StringC1Eih>
 80839f2:	a927      	add	r1, sp, #156	; 0x9c
 80839f4:	4620      	mov	r0, r4
 80839f6:	f7fd f9de 	bl	8080db6 <_ZN5spark10JSONWriter5valueERK6String>
 80839fa:	a827      	add	r0, sp, #156	; 0x9c
 80839fc:	f007 fcf0 	bl	808b3e0 <_ZN6StringD1Ev>
    writer.name("PM2_5").value(String(corrected_PM_25, 0)); 
 8083a00:	495b      	ldr	r1, [pc, #364]	; (8083b70 <_Z15outputDataToESPv+0x344>)
 8083a02:	a822      	add	r0, sp, #136	; 0x88
 8083a04:	f7fd f9ca 	bl	8080d9c <_ZN5spark10JSONWriter4nameEPKc>
 8083a08:	4604      	mov	r4, r0
 8083a0a:	4b5a      	ldr	r3, [pc, #360]	; (8083b74 <_Z15outputDataToESPv+0x348>)
 8083a0c:	463a      	mov	r2, r7
 8083a0e:	6819      	ldr	r1, [r3, #0]
 8083a10:	a827      	add	r0, sp, #156	; 0x9c
 8083a12:	f007 fdb6 	bl	808b582 <_ZN6StringC1Efi>
 8083a16:	a927      	add	r1, sp, #156	; 0x9c
 8083a18:	4620      	mov	r0, r4
 8083a1a:	f7fd f9cc 	bl	8080db6 <_ZN5spark10JSONWriter5valueERK6String>
 8083a1e:	a827      	add	r0, sp, #156	; 0x9c
 8083a20:	f007 fcde 	bl	808b3e0 <_ZN6StringD1Ev>
    writer.name("Temp").value(String(readTemperature(), 1));
 8083a24:	4954      	ldr	r1, [pc, #336]	; (8083b78 <_Z15outputDataToESPv+0x34c>)
 8083a26:	a822      	add	r0, sp, #136	; 0x88
 8083a28:	f7fd f9b8 	bl	8080d9c <_ZN5spark10JSONWriter4nameEPKc>
 8083a2c:	4604      	mov	r4, r0
 8083a2e:	f7fd fdeb 	bl	8081608 <_Z15readTemperaturev>
 8083a32:	2201      	movs	r2, #1
 8083a34:	4601      	mov	r1, r0
 8083a36:	a827      	add	r0, sp, #156	; 0x9c
 8083a38:	f007 fda3 	bl	808b582 <_ZN6StringC1Efi>
 8083a3c:	a927      	add	r1, sp, #156	; 0x9c
 8083a3e:	4620      	mov	r0, r4
 8083a40:	f7fd f9b9 	bl	8080db6 <_ZN5spark10JSONWriter5valueERK6String>
 8083a44:	a827      	add	r0, sp, #156	; 0x9c
 8083a46:	f007 fccb 	bl	808b3e0 <_ZN6StringD1Ev>
    writer.name("Press").value(String(bme.pressure / 100.0, 1));
 8083a4a:	494c      	ldr	r1, [pc, #304]	; (8083b7c <_Z15outputDataToESPv+0x350>)
 8083a4c:	a822      	add	r0, sp, #136	; 0x88
 8083a4e:	f7fd f9a5 	bl	8080d9c <_ZN5spark10JSONWriter4nameEPKc>
 8083a52:	4b4b      	ldr	r3, [pc, #300]	; (8083b80 <_Z15outputDataToESPv+0x354>)
 8083a54:	4604      	mov	r4, r0
 8083a56:	6858      	ldr	r0, [r3, #4]
 8083a58:	f009 fdf8 	bl	808d64c <__aeabi_f2d>
 8083a5c:	2200      	movs	r2, #0
 8083a5e:	4b49      	ldr	r3, [pc, #292]	; (8083b84 <_Z15outputDataToESPv+0x358>)
 8083a60:	f009 ff76 	bl	808d950 <__aeabi_ddiv>
 8083a64:	2701      	movs	r7, #1
 8083a66:	460b      	mov	r3, r1
 8083a68:	4602      	mov	r2, r0
 8083a6a:	9700      	str	r7, [sp, #0]
 8083a6c:	a827      	add	r0, sp, #156	; 0x9c
 8083a6e:	f007 fd9f 	bl	808b5b0 <_ZN6StringC1Edi>
 8083a72:	a927      	add	r1, sp, #156	; 0x9c
 8083a74:	4620      	mov	r0, r4
 8083a76:	f7fd f99e 	bl	8080db6 <_ZN5spark10JSONWriter5valueERK6String>
 8083a7a:	a827      	add	r0, sp, #156	; 0x9c
 8083a7c:	f007 fcb0 	bl	808b3e0 <_ZN6StringD1Ev>
    writer.name("Hmdty").value(String(readHumidity(), 1));
 8083a80:	4941      	ldr	r1, [pc, #260]	; (8083b88 <_Z15outputDataToESPv+0x35c>)
 8083a82:	a822      	add	r0, sp, #136	; 0x88
 8083a84:	f7fd f98a 	bl	8080d9c <_ZN5spark10JSONWriter4nameEPKc>
 8083a88:	4604      	mov	r4, r0
 8083a8a:	f7fd fe37 	bl	80816fc <_Z12readHumidityv>
 8083a8e:	463a      	mov	r2, r7
 8083a90:	4601      	mov	r1, r0
 8083a92:	a827      	add	r0, sp, #156	; 0x9c
 8083a94:	f007 fd75 	bl	808b582 <_ZN6StringC1Efi>
 8083a98:	a927      	add	r1, sp, #156	; 0x9c
 8083a9a:	4620      	mov	r0, r4
 8083a9c:	f7fd f98b 	bl	8080db6 <_ZN5spark10JSONWriter5valueERK6String>
 8083aa0:	a827      	add	r0, sp, #156	; 0x9c
 8083aa2:	f007 fc9d 	bl	808b3e0 <_ZN6StringD1Ev>
    if(gps.get_latitude() != 0){
 8083aa6:	4839      	ldr	r0, [pc, #228]	; (8083b8c <_Z15outputDataToESPv+0x360>)
 8083aa8:	f003 fcc8 	bl	808743c <_ZN3GPS12get_latitudeEv>
 8083aac:	2200      	movs	r2, #0
 8083aae:	2300      	movs	r3, #0
 8083ab0:	f00a f88c 	bl	808dbcc <__aeabi_dcmpeq>
 8083ab4:	2800      	cmp	r0, #0
 8083ab6:	f040 854a 	bne.w	808454e <_Z15outputDataToESPv+0xd22>
        if(gps.get_nsIndicator() == 0){
 8083aba:	4834      	ldr	r0, [pc, #208]	; (8083b8c <_Z15outputDataToESPv+0x360>)
 8083abc:	f003 fcd9 	bl	8087472 <_ZN3GPS15get_nsIndicatorEv>
 8083ac0:	b918      	cbnz	r0, 8083aca <_Z15outputDataToESPv+0x29e>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8083ac2:	4933      	ldr	r1, [pc, #204]	; (8083b90 <_Z15outputDataToESPv+0x364>)
 8083ac4:	a80e      	add	r0, sp, #56	; 0x38
 8083ac6:	f007 fda4 	bl	808b612 <_ZN6String6concatEPKc>
        latitude_string += String(gps.get_latitude());
 8083aca:	4830      	ldr	r0, [pc, #192]	; (8083b8c <_Z15outputDataToESPv+0x360>)
 8083acc:	f003 fcb6 	bl	808743c <_ZN3GPS12get_latitudeEv>
 8083ad0:	460b      	mov	r3, r1
 8083ad2:	2106      	movs	r1, #6
 8083ad4:	4602      	mov	r2, r0
 8083ad6:	9100      	str	r1, [sp, #0]
 8083ad8:	a827      	add	r0, sp, #156	; 0x9c
 8083ada:	f007 fd69 	bl	808b5b0 <_ZN6StringC1Edi>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083ade:	a927      	add	r1, sp, #156	; 0x9c
 8083ae0:	a80e      	add	r0, sp, #56	; 0x38
 8083ae2:	f007 fd92 	bl	808b60a <_ZN6String6concatERKS_>
 8083ae6:	a827      	add	r0, sp, #156	; 0x9c
 8083ae8:	f007 fc7a 	bl	808b3e0 <_ZN6StringD1Ev>
    writer.name("Lat").value(latitude_string);
 8083aec:	4929      	ldr	r1, [pc, #164]	; (8083b94 <_Z15outputDataToESPv+0x368>)
 8083aee:	a822      	add	r0, sp, #136	; 0x88
 8083af0:	f7fd f954 	bl	8080d9c <_ZN5spark10JSONWriter4nameEPKc>
 8083af4:	a90e      	add	r1, sp, #56	; 0x38
 8083af6:	f7fd f95e 	bl	8080db6 <_ZN5spark10JSONWriter5valueERK6String>
    if(gps.get_longitude() != 0){
 8083afa:	4824      	ldr	r0, [pc, #144]	; (8083b8c <_Z15outputDataToESPv+0x360>)
 8083afc:	f003 fca3 	bl	8087446 <_ZN3GPS13get_longitudeEv>
 8083b00:	2200      	movs	r2, #0
 8083b02:	2300      	movs	r3, #0
 8083b04:	f00a f862 	bl	808dbcc <__aeabi_dcmpeq>
 8083b08:	2800      	cmp	r0, #0
 8083b0a:	d152      	bne.n	8083bb2 <_Z15outputDataToESPv+0x386>
        if(gps.get_ewIndicator() == 0x01){
 8083b0c:	481f      	ldr	r0, [pc, #124]	; (8083b8c <_Z15outputDataToESPv+0x360>)
 8083b0e:	f003 fcb3 	bl	8087478 <_ZN3GPS15get_ewIndicatorEv>
 8083b12:	2801      	cmp	r0, #1
 8083b14:	d103      	bne.n	8083b1e <_Z15outputDataToESPv+0x2f2>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8083b16:	491e      	ldr	r1, [pc, #120]	; (8083b90 <_Z15outputDataToESPv+0x364>)
 8083b18:	a812      	add	r0, sp, #72	; 0x48
 8083b1a:	f007 fd7a 	bl	808b612 <_ZN6String6concatEPKc>
        longitude_string += String(gps.get_longitude());
 8083b1e:	481b      	ldr	r0, [pc, #108]	; (8083b8c <_Z15outputDataToESPv+0x360>)
 8083b20:	f003 fc91 	bl	8087446 <_ZN3GPS13get_longitudeEv>
 8083b24:	460b      	mov	r3, r1
 8083b26:	2106      	movs	r1, #6
 8083b28:	4602      	mov	r2, r0
 8083b2a:	e037      	b.n	8083b9c <_Z15outputDataToESPv+0x370>
 8083b2c:	200000e4 	.word	0x200000e4
 8083b30:	20000e8c 	.word	0x20000e8c
 8083b34:	080942e2 	.word	0x080942e2
 8083b38:	08092c66 	.word	0x08092c66
 8083b3c:	08094026 	.word	0x08094026
 8083b40:	08094490 	.word	0x08094490
 8083b44:	08092c68 	.word	0x08092c68
 8083b48:	08092c6d 	.word	0x08092c6d
 8083b4c:	08092c7b 	.word	0x08092c7b
 8083b50:	08092c84 	.word	0x08092c84
 8083b54:	20000e88 	.word	0x20000e88
 8083b58:	08093f7c 	.word	0x08093f7c
 8083b5c:	2000032c 	.word	0x2000032c
 8083b60:	080932c2 	.word	0x080932c2
 8083b64:	20000340 	.word	0x20000340
 8083b68:	08092c97 	.word	0x08092c97
 8083b6c:	2000035c 	.word	0x2000035c
 8083b70:	08092c9d 	.word	0x08092c9d
 8083b74:	2000068c 	.word	0x2000068c
 8083b78:	08092ca3 	.word	0x08092ca3
 8083b7c:	08092ca8 	.word	0x08092ca8
 8083b80:	200005ec 	.word	0x200005ec
 8083b84:	40590000 	.word	0x40590000
 8083b88:	08092cae 	.word	0x08092cae
 8083b8c:	20000720 	.word	0x20000720
 8083b90:	08092c6b 	.word	0x08092c6b
 8083b94:	08092cb4 	.word	0x08092cb4
 8083b98:	20000080 	.word	0x20000080
 8083b9c:	9100      	str	r1, [sp, #0]
 8083b9e:	a827      	add	r0, sp, #156	; 0x9c
 8083ba0:	f007 fd06 	bl	808b5b0 <_ZN6StringC1Edi>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083ba4:	a927      	add	r1, sp, #156	; 0x9c
 8083ba6:	a812      	add	r0, sp, #72	; 0x48
 8083ba8:	f007 fd2f 	bl	808b60a <_ZN6String6concatERKS_>
 8083bac:	a827      	add	r0, sp, #156	; 0x9c
 8083bae:	f007 fc17 	bl	808b3e0 <_ZN6StringD1Ev>
    writer.name("Long").value(longitude_string);
 8083bb2:	49b7      	ldr	r1, [pc, #732]	; (8083e90 <_Z15outputDataToESPv+0x664>)
 8083bb4:	a822      	add	r0, sp, #136	; 0x88
 8083bb6:	f7fd f8f1 	bl	8080d9c <_ZN5spark10JSONWriter4nameEPKc>
 8083bba:	a912      	add	r1, sp, #72	; 0x48
 8083bbc:	f7fd f8fb 	bl	8080db6 <_ZN5spark10JSONWriter5valueERK6String>
    writer.endObject();
 8083bc0:	a822      	add	r0, sp, #136	; 0x88
 8083bc2:	f009 f9f8 	bl	808cfb6 <_ZN5spark10JSONWriter9endObjectEv>
    writer.buffer()[std::min(writer.bufferSize(), writer.dataSize())] = 0;
 8083bc6:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
 8083bca:	4293      	cmp	r3, r2
 8083bcc:	bf28      	it	cs
 8083bce:	4613      	movcs	r3, r2
 8083bd0:	2400      	movs	r4, #0
 8083bd2:	9a24      	ldr	r2, [sp, #144]	; 0x90
    cloud_output_string += String(CARBON_MONOXIDE_PACKET_CONSTANT) + String(CO_float, 3);
 8083bd4:	4faf      	ldr	r7, [pc, #700]	; (8083e94 <_Z15outputDataToESPv+0x668>)
    writer.buffer()[std::min(writer.bufferSize(), writer.dataSize())] = 0;
 8083bd6:	54d4      	strb	r4, [r2, r3]
    cloud_output_string += String(CARBON_MONOXIDE_PACKET_CONSTANT) + String(CO_float, 3);
 8083bd8:	214d      	movs	r1, #77	; 0x4d
 8083bda:	a81a      	add	r0, sp, #104	; 0x68
 8083bdc:	f007 fcad 	bl	808b53a <_ZN6StringC1Ec>
	StringSumHelper(const String &s) : String(s) {}
 8083be0:	a91a      	add	r1, sp, #104	; 0x68
 8083be2:	a827      	add	r0, sp, #156	; 0x9c
 8083be4:	f007 fc85 	bl	808b4f2 <_ZN6StringC1ERKS_>
 8083be8:	2203      	movs	r2, #3
 8083bea:	6839      	ldr	r1, [r7, #0]
 8083bec:	a81e      	add	r0, sp, #120	; 0x78
 8083bee:	f007 fcc8 	bl	808b582 <_ZN6StringC1Efi>
 8083bf2:	a91e      	add	r1, sp, #120	; 0x78
 8083bf4:	a827      	add	r0, sp, #156	; 0x9c
 8083bf6:	f007 fd4d 	bl	808b694 <_ZplRK15StringSumHelperRK6String>
 8083bfa:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083bfc:	a802      	add	r0, sp, #8
 8083bfe:	f007 fd04 	bl	808b60a <_ZN6String6concatERKS_>
 8083c02:	a81e      	add	r0, sp, #120	; 0x78
 8083c04:	f007 fbec 	bl	808b3e0 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8083c08:	a827      	add	r0, sp, #156	; 0x9c
 8083c0a:	f007 fbe9 	bl	808b3e0 <_ZN6StringD1Ev>
 8083c0e:	a81a      	add	r0, sp, #104	; 0x68
 8083c10:	f007 fbe6 	bl	808b3e0 <_ZN6StringD1Ev>
    csv_output_string += String(CO_float, 3) + ",";
 8083c14:	2203      	movs	r2, #3
 8083c16:	6839      	ldr	r1, [r7, #0]
 8083c18:	a81e      	add	r0, sp, #120	; 0x78
 8083c1a:	f007 fcb2 	bl	808b582 <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
 8083c1e:	a91e      	add	r1, sp, #120	; 0x78
 8083c20:	a827      	add	r0, sp, #156	; 0x9c
 8083c22:	f007 fc66 	bl	808b4f2 <_ZN6StringC1ERKS_>
 8083c26:	499c      	ldr	r1, [pc, #624]	; (8083e98 <_Z15outputDataToESPv+0x66c>)
 8083c28:	a827      	add	r0, sp, #156	; 0x9c
 8083c2a:	f007 fd3f 	bl	808b6ac <_ZplRK15StringSumHelperPKc>
 8083c2e:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083c30:	a806      	add	r0, sp, #24
 8083c32:	f007 fcea 	bl	808b60a <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8083c36:	a827      	add	r0, sp, #156	; 0x9c
 8083c38:	f007 fbd2 	bl	808b3e0 <_ZN6StringD1Ev>
 8083c3c:	a81e      	add	r0, sp, #120	; 0x78
 8083c3e:	f007 fbcf 	bl	808b3e0 <_ZN6StringD1Ev>
    cloud_output_string += String(CARBON_DIOXIDE_PACKET_CONSTANT) + String(CO2_float, 0);
 8083c42:	4f96      	ldr	r7, [pc, #600]	; (8083e9c <_Z15outputDataToESPv+0x670>)
 8083c44:	2143      	movs	r1, #67	; 0x43
 8083c46:	a81a      	add	r0, sp, #104	; 0x68
 8083c48:	f007 fc77 	bl	808b53a <_ZN6StringC1Ec>
	StringSumHelper(const String &s) : String(s) {}
 8083c4c:	a91a      	add	r1, sp, #104	; 0x68
 8083c4e:	a827      	add	r0, sp, #156	; 0x9c
 8083c50:	f007 fc4f 	bl	808b4f2 <_ZN6StringC1ERKS_>
 8083c54:	4622      	mov	r2, r4
 8083c56:	6839      	ldr	r1, [r7, #0]
 8083c58:	a81e      	add	r0, sp, #120	; 0x78
 8083c5a:	f007 fc92 	bl	808b582 <_ZN6StringC1Efi>
 8083c5e:	a91e      	add	r1, sp, #120	; 0x78
 8083c60:	a827      	add	r0, sp, #156	; 0x9c
 8083c62:	f007 fd17 	bl	808b694 <_ZplRK15StringSumHelperRK6String>
 8083c66:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083c68:	a802      	add	r0, sp, #8
 8083c6a:	f007 fcce 	bl	808b60a <_ZN6String6concatERKS_>
 8083c6e:	a81e      	add	r0, sp, #120	; 0x78
 8083c70:	f007 fbb6 	bl	808b3e0 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8083c74:	a827      	add	r0, sp, #156	; 0x9c
 8083c76:	f007 fbb3 	bl	808b3e0 <_ZN6StringD1Ev>
 8083c7a:	a81a      	add	r0, sp, #104	; 0x68
 8083c7c:	f007 fbb0 	bl	808b3e0 <_ZN6StringD1Ev>
    csv_output_string += String(CO2_float, 0) + ",";
 8083c80:	4622      	mov	r2, r4
 8083c82:	6839      	ldr	r1, [r7, #0]
 8083c84:	a81e      	add	r0, sp, #120	; 0x78
 8083c86:	f007 fc7c 	bl	808b582 <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
 8083c8a:	a91e      	add	r1, sp, #120	; 0x78
 8083c8c:	a827      	add	r0, sp, #156	; 0x9c
 8083c8e:	f007 fc30 	bl	808b4f2 <_ZN6StringC1ERKS_>
 8083c92:	4981      	ldr	r1, [pc, #516]	; (8083e98 <_Z15outputDataToESPv+0x66c>)
 8083c94:	a827      	add	r0, sp, #156	; 0x9c
 8083c96:	f007 fd09 	bl	808b6ac <_ZplRK15StringSumHelperPKc>
 8083c9a:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083c9c:	a806      	add	r0, sp, #24
 8083c9e:	f007 fcb4 	bl	808b60a <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8083ca2:	a827      	add	r0, sp, #156	; 0x9c
 8083ca4:	f007 fb9c 	bl	808b3e0 <_ZN6StringD1Ev>
 8083ca8:	a81e      	add	r0, sp, #120	; 0x78
 8083caa:	f007 fb99 	bl	808b3e0 <_ZN6StringD1Ev>
    if(voc_enabled){
 8083cae:	4b7c      	ldr	r3, [pc, #496]	; (8083ea0 <_Z15outputDataToESPv+0x674>)
 8083cb0:	681b      	ldr	r3, [r3, #0]
 8083cb2:	2b00      	cmp	r3, #0
 8083cb4:	d035      	beq.n	8083d22 <_Z15outputDataToESPv+0x4f6>
        cloud_output_string += String(VOC_PACKET_CONSTANT) + String(air_quality_score, 1);
 8083cb6:	2167      	movs	r1, #103	; 0x67
 8083cb8:	4c7a      	ldr	r4, [pc, #488]	; (8083ea4 <_Z15outputDataToESPv+0x678>)
 8083cba:	a81a      	add	r0, sp, #104	; 0x68
 8083cbc:	f007 fc3d 	bl	808b53a <_ZN6StringC1Ec>
	StringSumHelper(const String &s) : String(s) {}
 8083cc0:	a91a      	add	r1, sp, #104	; 0x68
 8083cc2:	a827      	add	r0, sp, #156	; 0x9c
 8083cc4:	f007 fc15 	bl	808b4f2 <_ZN6StringC1ERKS_>
 8083cc8:	2201      	movs	r2, #1
 8083cca:	6821      	ldr	r1, [r4, #0]
 8083ccc:	a81e      	add	r0, sp, #120	; 0x78
 8083cce:	f007 fc58 	bl	808b582 <_ZN6StringC1Efi>
 8083cd2:	a91e      	add	r1, sp, #120	; 0x78
 8083cd4:	a827      	add	r0, sp, #156	; 0x9c
 8083cd6:	f007 fcdd 	bl	808b694 <_ZplRK15StringSumHelperRK6String>
 8083cda:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083cdc:	a802      	add	r0, sp, #8
 8083cde:	f007 fc94 	bl	808b60a <_ZN6String6concatERKS_>
 8083ce2:	a81e      	add	r0, sp, #120	; 0x78
 8083ce4:	f007 fb7c 	bl	808b3e0 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8083ce8:	a827      	add	r0, sp, #156	; 0x9c
 8083cea:	f007 fb79 	bl	808b3e0 <_ZN6StringD1Ev>
 8083cee:	a81a      	add	r0, sp, #104	; 0x68
 8083cf0:	f007 fb76 	bl	808b3e0 <_ZN6StringD1Ev>
        csv_output_string += String(air_quality_score, 1) + ",";
 8083cf4:	2201      	movs	r2, #1
 8083cf6:	6821      	ldr	r1, [r4, #0]
 8083cf8:	a81e      	add	r0, sp, #120	; 0x78
 8083cfa:	f007 fc42 	bl	808b582 <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
 8083cfe:	a91e      	add	r1, sp, #120	; 0x78
 8083d00:	a827      	add	r0, sp, #156	; 0x9c
 8083d02:	f007 fbf6 	bl	808b4f2 <_ZN6StringC1ERKS_>
 8083d06:	4964      	ldr	r1, [pc, #400]	; (8083e98 <_Z15outputDataToESPv+0x66c>)
 8083d08:	a827      	add	r0, sp, #156	; 0x9c
 8083d0a:	f007 fccf 	bl	808b6ac <_ZplRK15StringSumHelperPKc>
 8083d0e:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083d10:	a806      	add	r0, sp, #24
 8083d12:	f007 fc7a 	bl	808b60a <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8083d16:	a827      	add	r0, sp, #156	; 0x9c
 8083d18:	f007 fb62 	bl	808b3e0 <_ZN6StringD1Ev>
 8083d1c:	a81e      	add	r0, sp, #120	; 0x78
 8083d1e:	f007 fb5f 	bl	808b3e0 <_ZN6StringD1Ev>
    cloud_output_string += String(PM1_PACKET_CONSTANT) + String(PM01Value);
 8083d22:	4c61      	ldr	r4, [pc, #388]	; (8083ea8 <_Z15outputDataToESPv+0x67c>)
 8083d24:	2172      	movs	r1, #114	; 0x72
 8083d26:	a81a      	add	r0, sp, #104	; 0x68
 8083d28:	f007 fc07 	bl	808b53a <_ZN6StringC1Ec>
	StringSumHelper(const String &s) : String(s) {}
 8083d2c:	a91a      	add	r1, sp, #104	; 0x68
 8083d2e:	a827      	add	r0, sp, #156	; 0x9c
 8083d30:	f007 fbdf 	bl	808b4f2 <_ZN6StringC1ERKS_>
 8083d34:	220a      	movs	r2, #10
 8083d36:	6821      	ldr	r1, [r4, #0]
 8083d38:	a81e      	add	r0, sp, #120	; 0x78
 8083d3a:	f007 fc0f 	bl	808b55c <_ZN6StringC1Eih>
 8083d3e:	a91e      	add	r1, sp, #120	; 0x78
 8083d40:	a827      	add	r0, sp, #156	; 0x9c
 8083d42:	f007 fca7 	bl	808b694 <_ZplRK15StringSumHelperRK6String>
 8083d46:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083d48:	a802      	add	r0, sp, #8
 8083d4a:	f007 fc5e 	bl	808b60a <_ZN6String6concatERKS_>
 8083d4e:	a81e      	add	r0, sp, #120	; 0x78
 8083d50:	f007 fb46 	bl	808b3e0 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8083d54:	a827      	add	r0, sp, #156	; 0x9c
 8083d56:	f007 fb43 	bl	808b3e0 <_ZN6StringD1Ev>
 8083d5a:	a81a      	add	r0, sp, #104	; 0x68
 8083d5c:	f007 fb40 	bl	808b3e0 <_ZN6StringD1Ev>
    csv_output_string += String(PM01Value) + ",";
 8083d60:	220a      	movs	r2, #10
 8083d62:	6821      	ldr	r1, [r4, #0]
 8083d64:	a81e      	add	r0, sp, #120	; 0x78
 8083d66:	f007 fbf9 	bl	808b55c <_ZN6StringC1Eih>
	StringSumHelper(const String &s) : String(s) {}
 8083d6a:	a91e      	add	r1, sp, #120	; 0x78
 8083d6c:	a827      	add	r0, sp, #156	; 0x9c
 8083d6e:	f007 fbc0 	bl	808b4f2 <_ZN6StringC1ERKS_>
 8083d72:	4949      	ldr	r1, [pc, #292]	; (8083e98 <_Z15outputDataToESPv+0x66c>)
 8083d74:	a827      	add	r0, sp, #156	; 0x9c
 8083d76:	f007 fc99 	bl	808b6ac <_ZplRK15StringSumHelperPKc>
 8083d7a:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083d7c:	a806      	add	r0, sp, #24
 8083d7e:	f007 fc44 	bl	808b60a <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8083d82:	a827      	add	r0, sp, #156	; 0x9c
 8083d84:	f007 fb2c 	bl	808b3e0 <_ZN6StringD1Ev>
 8083d88:	a81e      	add	r0, sp, #120	; 0x78
 8083d8a:	f007 fb29 	bl	808b3e0 <_ZN6StringD1Ev>
    cloud_output_string += String(PM2PT5_PACKET_CONSTANT) + String(corrected_PM_25, 0);
 8083d8e:	4c47      	ldr	r4, [pc, #284]	; (8083eac <_Z15outputDataToESPv+0x680>)
 8083d90:	2152      	movs	r1, #82	; 0x52
 8083d92:	a81a      	add	r0, sp, #104	; 0x68
 8083d94:	f007 fbd1 	bl	808b53a <_ZN6StringC1Ec>
	StringSumHelper(const String &s) : String(s) {}
 8083d98:	a91a      	add	r1, sp, #104	; 0x68
 8083d9a:	a827      	add	r0, sp, #156	; 0x9c
 8083d9c:	f007 fba9 	bl	808b4f2 <_ZN6StringC1ERKS_>
 8083da0:	2200      	movs	r2, #0
 8083da2:	6821      	ldr	r1, [r4, #0]
 8083da4:	a81e      	add	r0, sp, #120	; 0x78
 8083da6:	f007 fbec 	bl	808b582 <_ZN6StringC1Efi>
 8083daa:	a91e      	add	r1, sp, #120	; 0x78
 8083dac:	a827      	add	r0, sp, #156	; 0x9c
 8083dae:	f007 fc71 	bl	808b694 <_ZplRK15StringSumHelperRK6String>
 8083db2:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083db4:	a802      	add	r0, sp, #8
 8083db6:	f007 fc28 	bl	808b60a <_ZN6String6concatERKS_>
 8083dba:	a81e      	add	r0, sp, #120	; 0x78
 8083dbc:	f007 fb10 	bl	808b3e0 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8083dc0:	a827      	add	r0, sp, #156	; 0x9c
 8083dc2:	f007 fb0d 	bl	808b3e0 <_ZN6StringD1Ev>
 8083dc6:	a81a      	add	r0, sp, #104	; 0x68
 8083dc8:	f007 fb0a 	bl	808b3e0 <_ZN6StringD1Ev>
    csv_output_string += String(corrected_PM_25, 0) + ",";
 8083dcc:	2200      	movs	r2, #0
 8083dce:	6821      	ldr	r1, [r4, #0]
 8083dd0:	a81e      	add	r0, sp, #120	; 0x78
 8083dd2:	f007 fbd6 	bl	808b582 <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
 8083dd6:	a91e      	add	r1, sp, #120	; 0x78
 8083dd8:	a827      	add	r0, sp, #156	; 0x9c
 8083dda:	f007 fb8a 	bl	808b4f2 <_ZN6StringC1ERKS_>
 8083dde:	492e      	ldr	r1, [pc, #184]	; (8083e98 <_Z15outputDataToESPv+0x66c>)
 8083de0:	a827      	add	r0, sp, #156	; 0x9c
 8083de2:	f007 fc63 	bl	808b6ac <_ZplRK15StringSumHelperPKc>
 8083de6:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083de8:	a806      	add	r0, sp, #24
 8083dea:	f007 fc0e 	bl	808b60a <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8083dee:	a827      	add	r0, sp, #156	; 0x9c
 8083df0:	f007 faf6 	bl	808b3e0 <_ZN6StringD1Ev>
 8083df4:	a81e      	add	r0, sp, #120	; 0x78
 8083df6:	f007 faf3 	bl	808b3e0 <_ZN6StringD1Ev>
    cloud_output_string += String(PM10_PACKET_CONSTANT) + String(PM10Value);
 8083dfa:	4c2d      	ldr	r4, [pc, #180]	; (8083eb0 <_Z15outputDataToESPv+0x684>)
 8083dfc:	2171      	movs	r1, #113	; 0x71
 8083dfe:	a81a      	add	r0, sp, #104	; 0x68
 8083e00:	f007 fb9b 	bl	808b53a <_ZN6StringC1Ec>
	StringSumHelper(const String &s) : String(s) {}
 8083e04:	a91a      	add	r1, sp, #104	; 0x68
 8083e06:	a827      	add	r0, sp, #156	; 0x9c
 8083e08:	f007 fb73 	bl	808b4f2 <_ZN6StringC1ERKS_>
 8083e0c:	220a      	movs	r2, #10
 8083e0e:	6821      	ldr	r1, [r4, #0]
 8083e10:	a81e      	add	r0, sp, #120	; 0x78
 8083e12:	f007 fba3 	bl	808b55c <_ZN6StringC1Eih>
 8083e16:	a91e      	add	r1, sp, #120	; 0x78
 8083e18:	a827      	add	r0, sp, #156	; 0x9c
 8083e1a:	f007 fc3b 	bl	808b694 <_ZplRK15StringSumHelperRK6String>
 8083e1e:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083e20:	a802      	add	r0, sp, #8
 8083e22:	f007 fbf2 	bl	808b60a <_ZN6String6concatERKS_>
 8083e26:	a81e      	add	r0, sp, #120	; 0x78
 8083e28:	f007 fada 	bl	808b3e0 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8083e2c:	a827      	add	r0, sp, #156	; 0x9c
 8083e2e:	f007 fad7 	bl	808b3e0 <_ZN6StringD1Ev>
 8083e32:	a81a      	add	r0, sp, #104	; 0x68
 8083e34:	f007 fad4 	bl	808b3e0 <_ZN6StringD1Ev>
    csv_output_string += String(PM10Value) + ",";
 8083e38:	220a      	movs	r2, #10
 8083e3a:	6821      	ldr	r1, [r4, #0]
 8083e3c:	a81e      	add	r0, sp, #120	; 0x78
 8083e3e:	f007 fb8d 	bl	808b55c <_ZN6StringC1Eih>
	StringSumHelper(const String &s) : String(s) {}
 8083e42:	a91e      	add	r1, sp, #120	; 0x78
 8083e44:	a827      	add	r0, sp, #156	; 0x9c
 8083e46:	f007 fb54 	bl	808b4f2 <_ZN6StringC1ERKS_>
 8083e4a:	4913      	ldr	r1, [pc, #76]	; (8083e98 <_Z15outputDataToESPv+0x66c>)
 8083e4c:	a827      	add	r0, sp, #156	; 0x9c
 8083e4e:	f007 fc2d 	bl	808b6ac <_ZplRK15StringSumHelperPKc>
 8083e52:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083e54:	a806      	add	r0, sp, #24
 8083e56:	f007 fbd8 	bl	808b60a <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8083e5a:	a827      	add	r0, sp, #156	; 0x9c
 8083e5c:	f007 fac0 	bl	808b3e0 <_ZN6StringD1Ev>
 8083e60:	a81e      	add	r0, sp, #120	; 0x78
 8083e62:	f007 fabd 	bl	808b3e0 <_ZN6StringD1Ev>
    cloud_output_string += String(TEMPERATURE_PACKET_CONSTANT) + String(readTemperature(), 1);
 8083e66:	2174      	movs	r1, #116	; 0x74
 8083e68:	a81a      	add	r0, sp, #104	; 0x68
 8083e6a:	f007 fb66 	bl	808b53a <_ZN6StringC1Ec>
	StringSumHelper(const String &s) : String(s) {}
 8083e6e:	a91a      	add	r1, sp, #104	; 0x68
 8083e70:	a827      	add	r0, sp, #156	; 0x9c
 8083e72:	f007 fb3e 	bl	808b4f2 <_ZN6StringC1ERKS_>
 8083e76:	f7fd fbc7 	bl	8081608 <_Z15readTemperaturev>
 8083e7a:	2201      	movs	r2, #1
 8083e7c:	4601      	mov	r1, r0
 8083e7e:	a81e      	add	r0, sp, #120	; 0x78
 8083e80:	f007 fb7f 	bl	808b582 <_ZN6StringC1Efi>
 8083e84:	a91e      	add	r1, sp, #120	; 0x78
 8083e86:	a827      	add	r0, sp, #156	; 0x9c
 8083e88:	f007 fc04 	bl	808b694 <_ZplRK15StringSumHelperRK6String>
 8083e8c:	4601      	mov	r1, r0
 8083e8e:	e011      	b.n	8083eb4 <_Z15outputDataToESPv+0x688>
 8083e90:	08092cb8 	.word	0x08092cb8
 8083e94:	20000340 	.word	0x20000340
 8083e98:	08094026 	.word	0x08094026
 8083e9c:	2000032c 	.word	0x2000032c
 8083ea0:	20000d10 	.word	0x20000d10
 8083ea4:	200005e4 	.word	0x200005e4
 8083ea8:	2000035c 	.word	0x2000035c
 8083eac:	2000068c 	.word	0x2000068c
 8083eb0:	20000360 	.word	0x20000360
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083eb4:	a802      	add	r0, sp, #8
 8083eb6:	f007 fba8 	bl	808b60a <_ZN6String6concatERKS_>
 8083eba:	a81e      	add	r0, sp, #120	; 0x78
 8083ebc:	f007 fa90 	bl	808b3e0 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8083ec0:	a827      	add	r0, sp, #156	; 0x9c
 8083ec2:	f007 fa8d 	bl	808b3e0 <_ZN6StringD1Ev>
 8083ec6:	a81a      	add	r0, sp, #104	; 0x68
 8083ec8:	f007 fa8a 	bl	808b3e0 <_ZN6StringD1Ev>
    csv_output_string += String(readTemperature(), 1) + ",";
 8083ecc:	f7fd fb9c 	bl	8081608 <_Z15readTemperaturev>
 8083ed0:	2201      	movs	r2, #1
 8083ed2:	4601      	mov	r1, r0
 8083ed4:	a81e      	add	r0, sp, #120	; 0x78
 8083ed6:	f007 fb54 	bl	808b582 <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
 8083eda:	a91e      	add	r1, sp, #120	; 0x78
 8083edc:	a827      	add	r0, sp, #156	; 0x9c
 8083ede:	f007 fb08 	bl	808b4f2 <_ZN6StringC1ERKS_>
 8083ee2:	49b7      	ldr	r1, [pc, #732]	; (80841c0 <_Z15outputDataToESPv+0x994>)
 8083ee4:	a827      	add	r0, sp, #156	; 0x9c
 8083ee6:	f007 fbe1 	bl	808b6ac <_ZplRK15StringSumHelperPKc>
 8083eea:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083eec:	a806      	add	r0, sp, #24
 8083eee:	f007 fb8c 	bl	808b60a <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8083ef2:	a827      	add	r0, sp, #156	; 0x9c
 8083ef4:	f007 fa74 	bl	808b3e0 <_ZN6StringD1Ev>
 8083ef8:	a81e      	add	r0, sp, #120	; 0x78
 8083efa:	f007 fa71 	bl	808b3e0 <_ZN6StringD1Ev>
    cloud_output_string += String(PRESSURE_PACKET_CONSTANT) + String(bme.pressure / 100.0, 1);
 8083efe:	4fb1      	ldr	r7, [pc, #708]	; (80841c4 <_Z15outputDataToESPv+0x998>)
 8083f00:	2150      	movs	r1, #80	; 0x50
 8083f02:	a81a      	add	r0, sp, #104	; 0x68
 8083f04:	f007 fb19 	bl	808b53a <_ZN6StringC1Ec>
	StringSumHelper(const String &s) : String(s) {}
 8083f08:	a91a      	add	r1, sp, #104	; 0x68
 8083f0a:	a827      	add	r0, sp, #156	; 0x9c
 8083f0c:	f007 faf1 	bl	808b4f2 <_ZN6StringC1ERKS_>
 8083f10:	6878      	ldr	r0, [r7, #4]
 8083f12:	f009 fb9b 	bl	808d64c <__aeabi_f2d>
 8083f16:	2200      	movs	r2, #0
 8083f18:	4bab      	ldr	r3, [pc, #684]	; (80841c8 <_Z15outputDataToESPv+0x99c>)
 8083f1a:	f009 fd19 	bl	808d950 <__aeabi_ddiv>
 8083f1e:	2401      	movs	r4, #1
 8083f20:	4602      	mov	r2, r0
 8083f22:	460b      	mov	r3, r1
 8083f24:	9400      	str	r4, [sp, #0]
 8083f26:	a81e      	add	r0, sp, #120	; 0x78
 8083f28:	f007 fb42 	bl	808b5b0 <_ZN6StringC1Edi>
 8083f2c:	a91e      	add	r1, sp, #120	; 0x78
 8083f2e:	a827      	add	r0, sp, #156	; 0x9c
 8083f30:	f007 fbb0 	bl	808b694 <_ZplRK15StringSumHelperRK6String>
 8083f34:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083f36:	a802      	add	r0, sp, #8
 8083f38:	f007 fb67 	bl	808b60a <_ZN6String6concatERKS_>
 8083f3c:	a81e      	add	r0, sp, #120	; 0x78
 8083f3e:	f007 fa4f 	bl	808b3e0 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8083f42:	a827      	add	r0, sp, #156	; 0x9c
 8083f44:	f007 fa4c 	bl	808b3e0 <_ZN6StringD1Ev>
 8083f48:	a81a      	add	r0, sp, #104	; 0x68
 8083f4a:	f007 fa49 	bl	808b3e0 <_ZN6StringD1Ev>
    csv_output_string += String(bme.pressure / 100.0, 1) + ",";
 8083f4e:	6878      	ldr	r0, [r7, #4]
 8083f50:	f009 fb7c 	bl	808d64c <__aeabi_f2d>
 8083f54:	2200      	movs	r2, #0
 8083f56:	4b9c      	ldr	r3, [pc, #624]	; (80841c8 <_Z15outputDataToESPv+0x99c>)
 8083f58:	f009 fcfa 	bl	808d950 <__aeabi_ddiv>
 8083f5c:	9400      	str	r4, [sp, #0]
 8083f5e:	460b      	mov	r3, r1
 8083f60:	4602      	mov	r2, r0
 8083f62:	a81e      	add	r0, sp, #120	; 0x78
 8083f64:	f007 fb24 	bl	808b5b0 <_ZN6StringC1Edi>
	StringSumHelper(const String &s) : String(s) {}
 8083f68:	a91e      	add	r1, sp, #120	; 0x78
 8083f6a:	a827      	add	r0, sp, #156	; 0x9c
 8083f6c:	f007 fac1 	bl	808b4f2 <_ZN6StringC1ERKS_>
 8083f70:	4993      	ldr	r1, [pc, #588]	; (80841c0 <_Z15outputDataToESPv+0x994>)
 8083f72:	a827      	add	r0, sp, #156	; 0x9c
 8083f74:	f007 fb9a 	bl	808b6ac <_ZplRK15StringSumHelperPKc>
 8083f78:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083f7a:	a806      	add	r0, sp, #24
 8083f7c:	f007 fb45 	bl	808b60a <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8083f80:	a827      	add	r0, sp, #156	; 0x9c
 8083f82:	f007 fa2d 	bl	808b3e0 <_ZN6StringD1Ev>
 8083f86:	a81e      	add	r0, sp, #120	; 0x78
 8083f88:	f007 fa2a 	bl	808b3e0 <_ZN6StringD1Ev>
    cloud_output_string += String(HUMIDITY_PACKET_CONSTANT) + String(readHumidity(), 1);
 8083f8c:	2168      	movs	r1, #104	; 0x68
 8083f8e:	eb0d 0001 	add.w	r0, sp, r1
 8083f92:	f007 fad2 	bl	808b53a <_ZN6StringC1Ec>
	StringSumHelper(const String &s) : String(s) {}
 8083f96:	a91a      	add	r1, sp, #104	; 0x68
 8083f98:	a827      	add	r0, sp, #156	; 0x9c
 8083f9a:	f007 faaa 	bl	808b4f2 <_ZN6StringC1ERKS_>
 8083f9e:	f7fd fbad 	bl	80816fc <_Z12readHumidityv>
 8083fa2:	4622      	mov	r2, r4
 8083fa4:	4601      	mov	r1, r0
 8083fa6:	a81e      	add	r0, sp, #120	; 0x78
 8083fa8:	f007 faeb 	bl	808b582 <_ZN6StringC1Efi>
 8083fac:	a91e      	add	r1, sp, #120	; 0x78
 8083fae:	a827      	add	r0, sp, #156	; 0x9c
 8083fb0:	f007 fb70 	bl	808b694 <_ZplRK15StringSumHelperRK6String>
 8083fb4:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083fb6:	a802      	add	r0, sp, #8
 8083fb8:	f007 fb27 	bl	808b60a <_ZN6String6concatERKS_>
 8083fbc:	a81e      	add	r0, sp, #120	; 0x78
 8083fbe:	f007 fa0f 	bl	808b3e0 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8083fc2:	a827      	add	r0, sp, #156	; 0x9c
 8083fc4:	f007 fa0c 	bl	808b3e0 <_ZN6StringD1Ev>
 8083fc8:	a81a      	add	r0, sp, #104	; 0x68
 8083fca:	f007 fa09 	bl	808b3e0 <_ZN6StringD1Ev>
    csv_output_string += String(readHumidity(), 1) + ",";
 8083fce:	f7fd fb95 	bl	80816fc <_Z12readHumidityv>
 8083fd2:	4622      	mov	r2, r4
 8083fd4:	4601      	mov	r1, r0
 8083fd6:	a81e      	add	r0, sp, #120	; 0x78
 8083fd8:	f007 fad3 	bl	808b582 <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
 8083fdc:	a91e      	add	r1, sp, #120	; 0x78
 8083fde:	a827      	add	r0, sp, #156	; 0x9c
 8083fe0:	f007 fa87 	bl	808b4f2 <_ZN6StringC1ERKS_>
 8083fe4:	4976      	ldr	r1, [pc, #472]	; (80841c0 <_Z15outputDataToESPv+0x994>)
 8083fe6:	a827      	add	r0, sp, #156	; 0x9c
 8083fe8:	f007 fb60 	bl	808b6ac <_ZplRK15StringSumHelperPKc>
 8083fec:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083fee:	a806      	add	r0, sp, #24
 8083ff0:	f007 fb0b 	bl	808b60a <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8083ff4:	a827      	add	r0, sp, #156	; 0x9c
 8083ff6:	f007 f9f3 	bl	808b3e0 <_ZN6StringD1Ev>
 8083ffa:	a81e      	add	r0, sp, #120	; 0x78
 8083ffc:	f007 f9f0 	bl	808b3e0 <_ZN6StringD1Ev>
    if(ozone_enabled){
 8084000:	4b72      	ldr	r3, [pc, #456]	; (80841cc <_Z15outputDataToESPv+0x9a0>)
 8084002:	681b      	ldr	r3, [r3, #0]
 8084004:	2b00      	cmp	r3, #0
 8084006:	d035      	beq.n	8084074 <_Z15outputDataToESPv+0x848>
        cloud_output_string += String(OZONE_PACKET_CONSTANT) + String(O3_float, 1);
 8084008:	214f      	movs	r1, #79	; 0x4f
 808400a:	4f71      	ldr	r7, [pc, #452]	; (80841d0 <_Z15outputDataToESPv+0x9a4>)
 808400c:	a81a      	add	r0, sp, #104	; 0x68
 808400e:	f007 fa94 	bl	808b53a <_ZN6StringC1Ec>
	StringSumHelper(const String &s) : String(s) {}
 8084012:	a91a      	add	r1, sp, #104	; 0x68
 8084014:	a827      	add	r0, sp, #156	; 0x9c
 8084016:	f007 fa6c 	bl	808b4f2 <_ZN6StringC1ERKS_>
 808401a:	4622      	mov	r2, r4
 808401c:	6839      	ldr	r1, [r7, #0]
 808401e:	a81e      	add	r0, sp, #120	; 0x78
 8084020:	f007 faaf 	bl	808b582 <_ZN6StringC1Efi>
 8084024:	a91e      	add	r1, sp, #120	; 0x78
 8084026:	a827      	add	r0, sp, #156	; 0x9c
 8084028:	f007 fb34 	bl	808b694 <_ZplRK15StringSumHelperRK6String>
 808402c:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808402e:	a802      	add	r0, sp, #8
 8084030:	f007 faeb 	bl	808b60a <_ZN6String6concatERKS_>
 8084034:	a81e      	add	r0, sp, #120	; 0x78
 8084036:	f007 f9d3 	bl	808b3e0 <_ZN6StringD1Ev>
class StringSumHelper : public String
 808403a:	a827      	add	r0, sp, #156	; 0x9c
 808403c:	f007 f9d0 	bl	808b3e0 <_ZN6StringD1Ev>
 8084040:	a81a      	add	r0, sp, #104	; 0x68
 8084042:	f007 f9cd 	bl	808b3e0 <_ZN6StringD1Ev>
        csv_output_string += String(O3_float, 1) + ",";
 8084046:	4622      	mov	r2, r4
 8084048:	6839      	ldr	r1, [r7, #0]
 808404a:	a81e      	add	r0, sp, #120	; 0x78
 808404c:	f007 fa99 	bl	808b582 <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
 8084050:	a91e      	add	r1, sp, #120	; 0x78
 8084052:	a827      	add	r0, sp, #156	; 0x9c
 8084054:	f007 fa4d 	bl	808b4f2 <_ZN6StringC1ERKS_>
 8084058:	4959      	ldr	r1, [pc, #356]	; (80841c0 <_Z15outputDataToESPv+0x994>)
 808405a:	a827      	add	r0, sp, #156	; 0x9c
 808405c:	f007 fb26 	bl	808b6ac <_ZplRK15StringSumHelperPKc>
 8084060:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084062:	a806      	add	r0, sp, #24
 8084064:	f007 fad1 	bl	808b60a <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8084068:	a827      	add	r0, sp, #156	; 0x9c
 808406a:	f007 f9b9 	bl	808b3e0 <_ZN6StringD1Ev>
 808406e:	a81e      	add	r0, sp, #120	; 0x78
 8084070:	f007 f9b6 	bl	808b3e0 <_ZN6StringD1Ev>
    cloud_output_string += String(BATTERY_PACKET_CONSTANT) + String(fuel.getSoC(), 1);
 8084074:	2178      	movs	r1, #120	; 0x78
 8084076:	a81a      	add	r0, sp, #104	; 0x68
 8084078:	f007 fa5f 	bl	808b53a <_ZN6StringC1Ec>
	StringSumHelper(const String &s) : String(s) {}
 808407c:	a91a      	add	r1, sp, #104	; 0x68
 808407e:	a827      	add	r0, sp, #156	; 0x9c
 8084080:	f007 fa37 	bl	808b4f2 <_ZN6StringC1ERKS_>
 8084084:	4853      	ldr	r0, [pc, #332]	; (80841d4 <_Z15outputDataToESPv+0x9a8>)
 8084086:	f008 f859 	bl	808c13c <_ZN9FuelGauge6getSoCEv>
 808408a:	2201      	movs	r2, #1
 808408c:	4601      	mov	r1, r0
 808408e:	a81e      	add	r0, sp, #120	; 0x78
 8084090:	f007 fa77 	bl	808b582 <_ZN6StringC1Efi>
 8084094:	a91e      	add	r1, sp, #120	; 0x78
 8084096:	a827      	add	r0, sp, #156	; 0x9c
 8084098:	f007 fafc 	bl	808b694 <_ZplRK15StringSumHelperRK6String>
 808409c:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808409e:	a802      	add	r0, sp, #8
 80840a0:	f007 fab3 	bl	808b60a <_ZN6String6concatERKS_>
 80840a4:	a81e      	add	r0, sp, #120	; 0x78
 80840a6:	f007 f99b 	bl	808b3e0 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80840aa:	a827      	add	r0, sp, #156	; 0x9c
 80840ac:	f007 f998 	bl	808b3e0 <_ZN6StringD1Ev>
 80840b0:	a81a      	add	r0, sp, #104	; 0x68
 80840b2:	f007 f995 	bl	808b3e0 <_ZN6StringD1Ev>
    csv_output_string += String(fuel.getSoC(), 1) + ",";
 80840b6:	4847      	ldr	r0, [pc, #284]	; (80841d4 <_Z15outputDataToESPv+0x9a8>)
 80840b8:	f008 f840 	bl	808c13c <_ZN9FuelGauge6getSoCEv>
 80840bc:	2201      	movs	r2, #1
 80840be:	4601      	mov	r1, r0
 80840c0:	a81e      	add	r0, sp, #120	; 0x78
 80840c2:	f007 fa5e 	bl	808b582 <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
 80840c6:	a91e      	add	r1, sp, #120	; 0x78
 80840c8:	a827      	add	r0, sp, #156	; 0x9c
 80840ca:	f007 fa12 	bl	808b4f2 <_ZN6StringC1ERKS_>
 80840ce:	493c      	ldr	r1, [pc, #240]	; (80841c0 <_Z15outputDataToESPv+0x994>)
 80840d0:	a827      	add	r0, sp, #156	; 0x9c
 80840d2:	f007 faeb 	bl	808b6ac <_ZplRK15StringSumHelperPKc>
    cloud_output_string += String(SOUND_PACKET_CONSTANT) + String(sound_average, 0);
 80840d6:	2700      	movs	r7, #0
    csv_output_string += String(fuel.getSoC(), 1) + ",";
 80840d8:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80840da:	a806      	add	r0, sp, #24
 80840dc:	f007 fa95 	bl	808b60a <_ZN6String6concatERKS_>
class StringSumHelper : public String
 80840e0:	a827      	add	r0, sp, #156	; 0x9c
 80840e2:	f007 f97d 	bl	808b3e0 <_ZN6StringD1Ev>
 80840e6:	a81e      	add	r0, sp, #120	; 0x78
 80840e8:	f007 f97a 	bl	808b3e0 <_ZN6StringD1Ev>
    cloud_output_string += String(SOUND_PACKET_CONSTANT) + String(sound_average, 0);
 80840ec:	2173      	movs	r1, #115	; 0x73
 80840ee:	a81a      	add	r0, sp, #104	; 0x68
 80840f0:	f007 fa23 	bl	808b53a <_ZN6StringC1Ec>
 80840f4:	4c38      	ldr	r4, [pc, #224]	; (80841d8 <_Z15outputDataToESPv+0x9ac>)
	StringSumHelper(const String &s) : String(s) {}
 80840f6:	a91a      	add	r1, sp, #104	; 0x68
 80840f8:	a827      	add	r0, sp, #156	; 0x9c
 80840fa:	f007 f9fa 	bl	808b4f2 <_ZN6StringC1ERKS_>
 80840fe:	9700      	str	r7, [sp, #0]
 8084100:	e9d4 2300 	ldrd	r2, r3, [r4]
 8084104:	a81e      	add	r0, sp, #120	; 0x78
 8084106:	f007 fa53 	bl	808b5b0 <_ZN6StringC1Edi>
 808410a:	a91e      	add	r1, sp, #120	; 0x78
 808410c:	a827      	add	r0, sp, #156	; 0x9c
 808410e:	f007 fac1 	bl	808b694 <_ZplRK15StringSumHelperRK6String>
 8084112:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084114:	a802      	add	r0, sp, #8
 8084116:	f007 fa78 	bl	808b60a <_ZN6String6concatERKS_>
 808411a:	a81e      	add	r0, sp, #120	; 0x78
 808411c:	f007 f960 	bl	808b3e0 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8084120:	a827      	add	r0, sp, #156	; 0x9c
 8084122:	f007 f95d 	bl	808b3e0 <_ZN6StringD1Ev>
 8084126:	a81a      	add	r0, sp, #104	; 0x68
 8084128:	f007 f95a 	bl	808b3e0 <_ZN6StringD1Ev>
    csv_output_string += String(sound_average, 0) + ",";
 808412c:	9700      	str	r7, [sp, #0]
 808412e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8084132:	a81e      	add	r0, sp, #120	; 0x78
 8084134:	f007 fa3c 	bl	808b5b0 <_ZN6StringC1Edi>
	StringSumHelper(const String &s) : String(s) {}
 8084138:	a91e      	add	r1, sp, #120	; 0x78
 808413a:	a827      	add	r0, sp, #156	; 0x9c
 808413c:	f007 f9d9 	bl	808b4f2 <_ZN6StringC1ERKS_>
 8084140:	491f      	ldr	r1, [pc, #124]	; (80841c0 <_Z15outputDataToESPv+0x994>)
 8084142:	a827      	add	r0, sp, #156	; 0x9c
 8084144:	f007 fab2 	bl	808b6ac <_ZplRK15StringSumHelperPKc>
 8084148:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808414a:	a806      	add	r0, sp, #24
 808414c:	f007 fa5d 	bl	808b60a <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8084150:	a827      	add	r0, sp, #156	; 0x9c
 8084152:	f007 f945 	bl	808b3e0 <_ZN6StringD1Ev>
 8084156:	a81e      	add	r0, sp, #120	; 0x78
 8084158:	f007 f942 	bl	808b3e0 <_ZN6StringD1Ev>
    cloud_output_string += String(LATITUDE_PACKET_CONSTANT);
 808415c:	2161      	movs	r1, #97	; 0x61
 808415e:	a827      	add	r0, sp, #156	; 0x9c
 8084160:	f007 f9eb 	bl	808b53a <_ZN6StringC1Ec>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084164:	a927      	add	r1, sp, #156	; 0x9c
 8084166:	a802      	add	r0, sp, #8
 8084168:	f007 fa4f 	bl	808b60a <_ZN6String6concatERKS_>
 808416c:	a827      	add	r0, sp, #156	; 0x9c
 808416e:	f007 f937 	bl	808b3e0 <_ZN6StringD1Ev>
    if(gps.get_latitude() != 0){
 8084172:	481a      	ldr	r0, [pc, #104]	; (80841dc <_Z15outputDataToESPv+0x9b0>)
 8084174:	f003 f962 	bl	808743c <_ZN3GPS12get_latitudeEv>
 8084178:	2200      	movs	r2, #0
 808417a:	2300      	movs	r3, #0
 808417c:	f009 fd26 	bl	808dbcc <__aeabi_dcmpeq>
 8084180:	46a0      	mov	r8, r4
 8084182:	2800      	cmp	r0, #0
 8084184:	f040 81e9 	bne.w	808455a <_Z15outputDataToESPv+0xd2e>
        if(gps.get_nsIndicator() == 0){
 8084188:	4814      	ldr	r0, [pc, #80]	; (80841dc <_Z15outputDataToESPv+0x9b0>)
 808418a:	f003 f972 	bl	8087472 <_ZN3GPS15get_nsIndicatorEv>
 808418e:	b938      	cbnz	r0, 80841a0 <_Z15outputDataToESPv+0x974>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8084190:	4913      	ldr	r1, [pc, #76]	; (80841e0 <_Z15outputDataToESPv+0x9b4>)
 8084192:	a806      	add	r0, sp, #24
 8084194:	f007 fa3d 	bl	808b612 <_ZN6String6concatEPKc>
 8084198:	4911      	ldr	r1, [pc, #68]	; (80841e0 <_Z15outputDataToESPv+0x9b4>)
 808419a:	a802      	add	r0, sp, #8
 808419c:	f007 fa39 	bl	808b612 <_ZN6String6concatEPKc>
        csv_output_string += String(gps.get_latitude()) + ",";
 80841a0:	480e      	ldr	r0, [pc, #56]	; (80841dc <_Z15outputDataToESPv+0x9b0>)
 80841a2:	f003 f94b 	bl	808743c <_ZN3GPS12get_latitudeEv>
 80841a6:	2406      	movs	r4, #6
 80841a8:	4602      	mov	r2, r0
 80841aa:	460b      	mov	r3, r1
 80841ac:	9400      	str	r4, [sp, #0]
 80841ae:	a81e      	add	r0, sp, #120	; 0x78
 80841b0:	f007 f9fe 	bl	808b5b0 <_ZN6StringC1Edi>
	StringSumHelper(const String &s) : String(s) {}
 80841b4:	a91e      	add	r1, sp, #120	; 0x78
 80841b6:	a827      	add	r0, sp, #156	; 0x9c
 80841b8:	f007 f99b 	bl	808b4f2 <_ZN6StringC1ERKS_>
 80841bc:	e012      	b.n	80841e4 <_Z15outputDataToESPv+0x9b8>
 80841be:	bf00      	nop
 80841c0:	08094026 	.word	0x08094026
 80841c4:	200005ec 	.word	0x200005ec
 80841c8:	40590000 	.word	0x40590000
 80841cc:	20000808 	.word	0x20000808
 80841d0:	20000354 	.word	0x20000354
 80841d4:	2000070c 	.word	0x2000070c
 80841d8:	20000ce0 	.word	0x20000ce0
 80841dc:	20000720 	.word	0x20000720
 80841e0:	08092c6b 	.word	0x08092c6b
 80841e4:	49b4      	ldr	r1, [pc, #720]	; (80844b8 <_Z15outputDataToESPv+0xc8c>)
 80841e6:	a827      	add	r0, sp, #156	; 0x9c
 80841e8:	f007 fa60 	bl	808b6ac <_ZplRK15StringSumHelperPKc>
 80841ec:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80841ee:	a806      	add	r0, sp, #24
 80841f0:	f007 fa0b 	bl	808b60a <_ZN6String6concatERKS_>
class StringSumHelper : public String
 80841f4:	a827      	add	r0, sp, #156	; 0x9c
 80841f6:	f007 f8f3 	bl	808b3e0 <_ZN6StringD1Ev>
 80841fa:	a81e      	add	r0, sp, #120	; 0x78
 80841fc:	f007 f8f0 	bl	808b3e0 <_ZN6StringD1Ev>
        cloud_output_string += String(gps.get_latitude());
 8084200:	48ae      	ldr	r0, [pc, #696]	; (80844bc <_Z15outputDataToESPv+0xc90>)
 8084202:	f003 f91b 	bl	808743c <_ZN3GPS12get_latitudeEv>
 8084206:	9400      	str	r4, [sp, #0]
 8084208:	4602      	mov	r2, r0
 808420a:	460b      	mov	r3, r1
 808420c:	a827      	add	r0, sp, #156	; 0x9c
 808420e:	f007 f9cf 	bl	808b5b0 <_ZN6StringC1Edi>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084212:	a927      	add	r1, sp, #156	; 0x9c
 8084214:	a802      	add	r0, sp, #8
 8084216:	f007 f9f8 	bl	808b60a <_ZN6String6concatERKS_>
        cloud_output_string += String(geolocation_latitude);
 808421a:	a827      	add	r0, sp, #156	; 0x9c
 808421c:	f007 f8e0 	bl	808b3e0 <_ZN6StringD1Ev>
    cloud_output_string += String(LONGITUDE_PACKET_CONSTANT);
 8084220:	216f      	movs	r1, #111	; 0x6f
 8084222:	a827      	add	r0, sp, #156	; 0x9c
 8084224:	f007 f989 	bl	808b53a <_ZN6StringC1Ec>
 8084228:	a927      	add	r1, sp, #156	; 0x9c
 808422a:	a802      	add	r0, sp, #8
 808422c:	f007 f9ed 	bl	808b60a <_ZN6String6concatERKS_>
 8084230:	a827      	add	r0, sp, #156	; 0x9c
 8084232:	f007 f8d5 	bl	808b3e0 <_ZN6StringD1Ev>
    if(gps.get_longitude() != 0){
 8084236:	48a1      	ldr	r0, [pc, #644]	; (80844bc <_Z15outputDataToESPv+0xc90>)
 8084238:	f003 f905 	bl	8087446 <_ZN3GPS13get_longitudeEv>
 808423c:	2200      	movs	r2, #0
 808423e:	2300      	movs	r3, #0
 8084240:	f009 fcc4 	bl	808dbcc <__aeabi_dcmpeq>
 8084244:	2800      	cmp	r0, #0
 8084246:	f040 81a3 	bne.w	8084590 <_Z15outputDataToESPv+0xd64>
        if(gps.get_ewIndicator() == 0x01){
 808424a:	489c      	ldr	r0, [pc, #624]	; (80844bc <_Z15outputDataToESPv+0xc90>)
 808424c:	f003 f914 	bl	8087478 <_ZN3GPS15get_ewIndicatorEv>
 8084250:	2801      	cmp	r0, #1
 8084252:	d107      	bne.n	8084264 <_Z15outputDataToESPv+0xa38>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8084254:	499a      	ldr	r1, [pc, #616]	; (80844c0 <_Z15outputDataToESPv+0xc94>)
 8084256:	a806      	add	r0, sp, #24
 8084258:	f007 f9db 	bl	808b612 <_ZN6String6concatEPKc>
 808425c:	4998      	ldr	r1, [pc, #608]	; (80844c0 <_Z15outputDataToESPv+0xc94>)
 808425e:	a802      	add	r0, sp, #8
 8084260:	f007 f9d7 	bl	808b612 <_ZN6String6concatEPKc>
        csv_output_string += String(gps.get_longitude()) + ",";
 8084264:	4895      	ldr	r0, [pc, #596]	; (80844bc <_Z15outputDataToESPv+0xc90>)
 8084266:	f003 f8ee 	bl	8087446 <_ZN3GPS13get_longitudeEv>
 808426a:	2406      	movs	r4, #6
 808426c:	4602      	mov	r2, r0
 808426e:	460b      	mov	r3, r1
 8084270:	9400      	str	r4, [sp, #0]
 8084272:	a81e      	add	r0, sp, #120	; 0x78
 8084274:	f007 f99c 	bl	808b5b0 <_ZN6StringC1Edi>
	StringSumHelper(const String &s) : String(s) {}
 8084278:	a91e      	add	r1, sp, #120	; 0x78
 808427a:	a827      	add	r0, sp, #156	; 0x9c
 808427c:	f007 f939 	bl	808b4f2 <_ZN6StringC1ERKS_>
 8084280:	498d      	ldr	r1, [pc, #564]	; (80844b8 <_Z15outputDataToESPv+0xc8c>)
 8084282:	a827      	add	r0, sp, #156	; 0x9c
 8084284:	f007 fa12 	bl	808b6ac <_ZplRK15StringSumHelperPKc>
 8084288:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808428a:	a806      	add	r0, sp, #24
 808428c:	f007 f9bd 	bl	808b60a <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8084290:	a827      	add	r0, sp, #156	; 0x9c
 8084292:	f007 f8a5 	bl	808b3e0 <_ZN6StringD1Ev>
 8084296:	a81e      	add	r0, sp, #120	; 0x78
 8084298:	f007 f8a2 	bl	808b3e0 <_ZN6StringD1Ev>
        cloud_output_string += String(gps.get_longitude());
 808429c:	4887      	ldr	r0, [pc, #540]	; (80844bc <_Z15outputDataToESPv+0xc90>)
 808429e:	f003 f8d2 	bl	8087446 <_ZN3GPS13get_longitudeEv>
 80842a2:	9400      	str	r4, [sp, #0]
 80842a4:	4602      	mov	r2, r0
 80842a6:	460b      	mov	r3, r1
 80842a8:	a827      	add	r0, sp, #156	; 0x9c
 80842aa:	f007 f981 	bl	808b5b0 <_ZN6StringC1Edi>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80842ae:	a927      	add	r1, sp, #156	; 0x9c
 80842b0:	a802      	add	r0, sp, #8
 80842b2:	f007 f9aa 	bl	808b60a <_ZN6String6concatERKS_>
        cloud_output_string += String(geolocation_longitude);
 80842b6:	a827      	add	r0, sp, #156	; 0x9c
 80842b8:	f007 f892 	bl	808b3e0 <_ZN6StringD1Ev>
    cloud_output_string += String(ACCURACY_PACKET_CONSTANT);
 80842bc:	2163      	movs	r1, #99	; 0x63
 80842be:	a827      	add	r0, sp, #156	; 0x9c
 80842c0:	f007 f93b 	bl	808b53a <_ZN6StringC1Ec>
 80842c4:	a927      	add	r1, sp, #156	; 0x9c
 80842c6:	a802      	add	r0, sp, #8
 80842c8:	f007 f99f 	bl	808b60a <_ZN6String6concatERKS_>
 80842cc:	a827      	add	r0, sp, #156	; 0x9c
 80842ce:	f007 f887 	bl	808b3e0 <_ZN6StringD1Ev>
    if (gps.get_longitude() != 0) {
 80842d2:	487a      	ldr	r0, [pc, #488]	; (80844bc <_Z15outputDataToESPv+0xc90>)
 80842d4:	f003 f8b7 	bl	8087446 <_ZN3GPS13get_longitudeEv>
 80842d8:	2200      	movs	r2, #0
 80842da:	2300      	movs	r3, #0
 80842dc:	f009 fc76 	bl	808dbcc <__aeabi_dcmpeq>
 80842e0:	2800      	cmp	r0, #0
 80842e2:	f040 8170 	bne.w	80845c6 <_Z15outputDataToESPv+0xd9a>
        csv_output_string += String(gps.get_horizontalDillution() / 10.0) + ",";
 80842e6:	4875      	ldr	r0, [pc, #468]	; (80844bc <_Z15outputDataToESPv+0xc90>)
 80842e8:	f003 f8b2 	bl	8087450 <_ZN3GPS23get_horizontalDillutionEv>
 80842ec:	f009 f99c 	bl	808d628 <__aeabi_i2d>
 80842f0:	2200      	movs	r2, #0
 80842f2:	4b74      	ldr	r3, [pc, #464]	; (80844c4 <_Z15outputDataToESPv+0xc98>)
 80842f4:	f009 fb2c 	bl	808d950 <__aeabi_ddiv>
 80842f8:	2406      	movs	r4, #6
 80842fa:	4602      	mov	r2, r0
 80842fc:	460b      	mov	r3, r1
 80842fe:	9400      	str	r4, [sp, #0]
 8084300:	a81e      	add	r0, sp, #120	; 0x78
 8084302:	f007 f955 	bl	808b5b0 <_ZN6StringC1Edi>
	StringSumHelper(const String &s) : String(s) {}
 8084306:	a91e      	add	r1, sp, #120	; 0x78
 8084308:	a827      	add	r0, sp, #156	; 0x9c
 808430a:	f007 f8f2 	bl	808b4f2 <_ZN6StringC1ERKS_>
 808430e:	496a      	ldr	r1, [pc, #424]	; (80844b8 <_Z15outputDataToESPv+0xc8c>)
 8084310:	a827      	add	r0, sp, #156	; 0x9c
 8084312:	f007 f9cb 	bl	808b6ac <_ZplRK15StringSumHelperPKc>
 8084316:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084318:	a806      	add	r0, sp, #24
 808431a:	f007 f976 	bl	808b60a <_ZN6String6concatERKS_>
class StringSumHelper : public String
 808431e:	a827      	add	r0, sp, #156	; 0x9c
 8084320:	f007 f85e 	bl	808b3e0 <_ZN6StringD1Ev>
 8084324:	a81e      	add	r0, sp, #120	; 0x78
 8084326:	f007 f85b 	bl	808b3e0 <_ZN6StringD1Ev>
        cloud_output_string += String(gps.get_horizontalDillution() / 10.0);
 808432a:	4864      	ldr	r0, [pc, #400]	; (80844bc <_Z15outputDataToESPv+0xc90>)
 808432c:	f003 f890 	bl	8087450 <_ZN3GPS23get_horizontalDillutionEv>
 8084330:	f009 f97a 	bl	808d628 <__aeabi_i2d>
 8084334:	2200      	movs	r2, #0
 8084336:	4b63      	ldr	r3, [pc, #396]	; (80844c4 <_Z15outputDataToESPv+0xc98>)
 8084338:	f009 fb0a 	bl	808d950 <__aeabi_ddiv>
 808433c:	9400      	str	r4, [sp, #0]
 808433e:	4602      	mov	r2, r0
 8084340:	460b      	mov	r3, r1
 8084342:	a827      	add	r0, sp, #156	; 0x9c
 8084344:	f007 f934 	bl	808b5b0 <_ZN6StringC1Edi>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084348:	a927      	add	r1, sp, #156	; 0x9c
    csv_output_string += String(status_word.status_int) + ",";
 808434a:	4f5f      	ldr	r7, [pc, #380]	; (80844c8 <_Z15outputDataToESPv+0xc9c>)
 808434c:	a802      	add	r0, sp, #8
 808434e:	f007 f95c 	bl	808b60a <_ZN6String6concatERKS_>
        cloud_output_string += String(geolocation_accuracy);
 8084352:	a827      	add	r0, sp, #156	; 0x9c
 8084354:	f007 f844 	bl	808b3e0 <_ZN6StringD1Ev>
    csv_output_string += String(status_word.status_int) + ",";
 8084358:	220a      	movs	r2, #10
 808435a:	8839      	ldrh	r1, [r7, #0]
 808435c:	a81e      	add	r0, sp, #120	; 0x78
 808435e:	f007 f8fd 	bl	808b55c <_ZN6StringC1Eih>
	StringSumHelper(const String &s) : String(s) {}
 8084362:	a91e      	add	r1, sp, #120	; 0x78
 8084364:	a827      	add	r0, sp, #156	; 0x9c
 8084366:	f007 f8c4 	bl	808b4f2 <_ZN6StringC1ERKS_>
 808436a:	4953      	ldr	r1, [pc, #332]	; (80844b8 <_Z15outputDataToESPv+0xc8c>)
 808436c:	a827      	add	r0, sp, #156	; 0x9c
 808436e:	f007 f99d 	bl	808b6ac <_ZplRK15StringSumHelperPKc>
 8084372:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084374:	a806      	add	r0, sp, #24
 8084376:	f007 f948 	bl	808b60a <_ZN6String6concatERKS_>
class StringSumHelper : public String
 808437a:	a827      	add	r0, sp, #156	; 0x9c
 808437c:	f007 f830 	bl	808b3e0 <_ZN6StringD1Ev>
 8084380:	a81e      	add	r0, sp, #120	; 0x78
 8084382:	f007 f82d 	bl	808b3e0 <_ZN6StringD1Ev>
    csv_output_string += String(Time.format(time, "%d/%m/%y,%H:%M:%S"));
 8084386:	4b51      	ldr	r3, [pc, #324]	; (80844cc <_Z15outputDataToESPv+0xca0>)
 8084388:	4632      	mov	r2, r6
 808438a:	4951      	ldr	r1, [pc, #324]	; (80844d0 <_Z15outputDataToESPv+0xca4>)
 808438c:	9300      	str	r3, [sp, #0]
 808438e:	a827      	add	r0, sp, #156	; 0x9c
 8084390:	462b      	mov	r3, r5
 8084392:	f007 fd93 	bl	808bebc <_ZN9TimeClass6formatExPKc>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084396:	a927      	add	r1, sp, #156	; 0x9c
 8084398:	a806      	add	r0, sp, #24
 808439a:	f007 f936 	bl	808b60a <_ZN6String6concatERKS_>
 808439e:	a827      	add	r0, sp, #156	; 0x9c
 80843a0:	f007 f81e 	bl	808b3e0 <_ZN6StringD1Ev>
    cloud_output_string += String(PARTICLE_TIME_PACKET_CONSTANT);
 80843a4:	2159      	movs	r1, #89	; 0x59
 80843a6:	a827      	add	r0, sp, #156	; 0x9c
 80843a8:	f007 f8c7 	bl	808b53a <_ZN6StringC1Ec>
 80843ac:	a927      	add	r1, sp, #156	; 0x9c
 80843ae:	a802      	add	r0, sp, #8
 80843b0:	f007 f92b 	bl	808b60a <_ZN6String6concatERKS_>
 80843b4:	a827      	add	r0, sp, #156	; 0x9c
 80843b6:	f007 f813 	bl	808b3e0 <_ZN6StringD1Ev>
    cloud_output_string += (const char *)Time.now();
 80843ba:	f007 fdde 	bl	808bf7a <_ZN9TimeClass3nowEv>
    if(debugging_enabled){
 80843be:	4c45      	ldr	r4, [pc, #276]	; (80844d4 <_Z15outputDataToESPv+0xca8>)
    cloud_output_string += (const char *)Time.now();
 80843c0:	4601      	mov	r1, r0
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 80843c2:	a802      	add	r0, sp, #8
 80843c4:	f007 f925 	bl	808b612 <_ZN6String6concatEPKc>
	String & operator += (char c)			{concat(c); return (*this);}
 80843c8:	2126      	movs	r1, #38	; 0x26
 80843ca:	a802      	add	r0, sp, #8
 80843cc:	f007 f930 	bl	808b630 <_ZN6String6concatEc>
    if(debugging_enabled){
 80843d0:	6823      	ldr	r3, [r4, #0]
 80843d2:	b14b      	cbz	r3, 80843e8 <_Z15outputDataToESPv+0xbbc>
        Serial.println("Line to write to cloud:");
 80843d4:	f008 fb1a 	bl	808ca0c <_Z16_fetch_usbserialv>
 80843d8:	493f      	ldr	r1, [pc, #252]	; (80844d8 <_Z15outputDataToESPv+0xcac>)
 80843da:	f007 fa5c 	bl	808b896 <_ZN5Print7printlnEPKc>
        Serial.println(cloud_output_string);
 80843de:	f008 fb15 	bl	808ca0c <_Z16_fetch_usbserialv>
 80843e2:	9902      	ldr	r1, [sp, #8]
 80843e4:	f007 fa57 	bl	808b896 <_ZN5Print7printlnEPKc>
    outputToCloud(cloud_output_string, sensible_buf);
 80843e8:	a902      	add	r1, sp, #8
 80843ea:	a81e      	add	r0, sp, #120	; 0x78
 80843ec:	f007 f881 	bl	808b4f2 <_ZN6StringC1ERKS_>
 80843f0:	a964      	add	r1, sp, #400	; 0x190
 80843f2:	a827      	add	r0, sp, #156	; 0x9c
 80843f4:	f007 f83e 	bl	808b474 <_ZN6StringC1EPKc>
 80843f8:	a927      	add	r1, sp, #156	; 0x9c
 80843fa:	a81e      	add	r0, sp, #120	; 0x78
 80843fc:	f7ff f84c 	bl	8083498 <_Z13outputToCloud6StringS_>
 8084400:	a827      	add	r0, sp, #156	; 0x9c
 8084402:	f006 ffed 	bl	808b3e0 <_ZN6StringD1Ev>
 8084406:	a81e      	add	r0, sp, #120	; 0x78
 8084408:	f006 ffea 	bl	808b3e0 <_ZN6StringD1Ev>
    if(esp_wifi_connection_status){
 808440c:	4b33      	ldr	r3, [pc, #204]	; (80844dc <_Z15outputDataToESPv+0xcb0>)
 808440e:	681b      	ldr	r3, [r3, #0]
 8084410:	b1ab      	cbz	r3, 808443e <_Z15outputDataToESPv+0xc12>
        if(debugging_enabled){
 8084412:	6823      	ldr	r3, [r4, #0]
 8084414:	b173      	cbz	r3, 8084434 <_Z15outputDataToESPv+0xc08>
            Serial.println("Sending data to esp to upload via wifi...");
 8084416:	f008 faf9 	bl	808ca0c <_Z16_fetch_usbserialv>
 808441a:	4931      	ldr	r1, [pc, #196]	; (80844e0 <_Z15outputDataToESPv+0xcb4>)
 808441c:	f007 fa3b 	bl	808b896 <_ZN5Print7printlnEPKc>
            writeLogFile("Sending data to esp to upload via wifi");
 8084420:	4930      	ldr	r1, [pc, #192]	; (80844e4 <_Z15outputDataToESPv+0xcb8>)
 8084422:	a827      	add	r0, sp, #156	; 0x9c
 8084424:	f007 f826 	bl	808b474 <_ZN6StringC1EPKc>
 8084428:	a827      	add	r0, sp, #156	; 0x9c
 808442a:	f7fd fc59 	bl	8081ce0 <_Z12writeLogFile6String>
 808442e:	a827      	add	r0, sp, #156	; 0x9c
 8084430:	f006 ffd6 	bl	808b3e0 <_ZN6StringD1Ev>
        Serial1.println(cloud_output_string);
 8084434:	f008 fc34 	bl	808cca0 <_Z22__fetch_global_Serial1v>
 8084438:	9902      	ldr	r1, [sp, #8]
 808443a:	f007 fa2c 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println(csv_output_string);
 808443e:	f008 fae5 	bl	808ca0c <_Z16_fetch_usbserialv>
 8084442:	9906      	ldr	r1, [sp, #24]
 8084444:	f007 fa27 	bl	808b896 <_ZN5Print7printlnEPKc>
 8084448:	4927      	ldr	r1, [pc, #156]	; (80844e8 <_Z15outputDataToESPv+0xcbc>)
 808444a:	2302      	movs	r3, #2
 808444c:	220c      	movs	r2, #12
 808444e:	f5a1 608e 	sub.w	r0, r1, #1136	; 0x470
 8084452:	f7fc fd43 	bl	8080edc <_ZN9SdFatBase5beginEP9SdSpiBasehh>
    if (sd.begin(CS)){
 8084456:	2800      	cmp	r0, #0
 8084458:	d05f      	beq.n	808451a <_Z15outputDataToESPv+0xcee>
        if(debugging_enabled)
 808445a:	6823      	ldr	r3, [r4, #0]
 808445c:	b123      	cbz	r3, 8084468 <_Z15outputDataToESPv+0xc3c>
            Serial.println("Writing row to file.");
 808445e:	f008 fad5 	bl	808ca0c <_Z16_fetch_usbserialv>
 8084462:	4922      	ldr	r1, [pc, #136]	; (80844ec <_Z15outputDataToESPv+0xcc0>)
 8084464:	f007 fa17 	bl	808b896 <_ZN5Print7printlnEPKc>
 8084468:	4a21      	ldr	r2, [pc, #132]	; (80844f0 <_Z15outputDataToESPv+0xcc4>)
 808446a:	4922      	ldr	r1, [pc, #136]	; (80844f4 <_Z15outputDataToESPv+0xcc8>)
        if(file_started == 0){
 808446c:	4c22      	ldr	r4, [pc, #136]	; (80844f8 <_Z15outputDataToESPv+0xccc>)
 808446e:	2346      	movs	r3, #70	; 0x46
 8084470:	6812      	ldr	r2, [r2, #0]
 8084472:	6809      	ldr	r1, [r1, #0]
 8084474:	4821      	ldr	r0, [pc, #132]	; (80844fc <_Z15outputDataToESPv+0xcd0>)
 8084476:	f004 fa92 	bl	808899e <_ZN7FatFile4openEPS_PKch>
 808447a:	6823      	ldr	r3, [r4, #0]
 808447c:	2b00      	cmp	r3, #0
 808447e:	d145      	bne.n	808450c <_Z15outputDataToESPv+0xce0>
            file.println("File Start timestamp: ");
 8084480:	491f      	ldr	r1, [pc, #124]	; (8084500 <_Z15outputDataToESPv+0xcd4>)
 8084482:	4820      	ldr	r0, [pc, #128]	; (8084504 <_Z15outputDataToESPv+0xcd8>)
 8084484:	f007 fa07 	bl	808b896 <_ZN5Print7printlnEPKc>
            file.println(Time.timeStr());
 8084488:	a827      	add	r0, sp, #156	; 0x9c
 808448a:	f7fc fc3d 	bl	8080d08 <_ZN9TimeClass7timeStrEv.isra.0>
 808448e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8084490:	481c      	ldr	r0, [pc, #112]	; (8084504 <_Z15outputDataToESPv+0xcd8>)
 8084492:	f007 fa00 	bl	808b896 <_ZN5Print7printlnEPKc>
 8084496:	a827      	add	r0, sp, #156	; 0x9c
 8084498:	f006 ffa2 	bl	808b3e0 <_ZN6StringD1Ev>
            file.println(String(HEADER_STRING));
 808449c:	491a      	ldr	r1, [pc, #104]	; (8084508 <_Z15outputDataToESPv+0xcdc>)
 808449e:	a827      	add	r0, sp, #156	; 0x9c
 80844a0:	f006 ffe8 	bl	808b474 <_ZN6StringC1EPKc>
 80844a4:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80844a6:	4817      	ldr	r0, [pc, #92]	; (8084504 <_Z15outputDataToESPv+0xcd8>)
 80844a8:	f007 f9f5 	bl	808b896 <_ZN5Print7printlnEPKc>
 80844ac:	a827      	add	r0, sp, #156	; 0x9c
 80844ae:	f006 ff97 	bl	808b3e0 <_ZN6StringD1Ev>
            file_started = 1;
 80844b2:	2301      	movs	r3, #1
 80844b4:	6023      	str	r3, [r4, #0]
 80844b6:	e029      	b.n	808450c <_Z15outputDataToESPv+0xce0>
 80844b8:	08094026 	.word	0x08094026
 80844bc:	20000720 	.word	0x20000720
 80844c0:	08092c6b 	.word	0x08092c6b
 80844c4:	40240000 	.word	0x40240000
 80844c8:	20000cf8 	.word	0x20000cf8
 80844cc:	08092cbd 	.word	0x08092cbd
 80844d0:	20000e88 	.word	0x20000e88
 80844d4:	20000690 	.word	0x20000690
 80844d8:	08092ccf 	.word	0x08092ccf
 80844dc:	20000694 	.word	0x20000694
 80844e0:	08092ce7 	.word	0x08092ce7
 80844e4:	08092d11 	.word	0x08092d11
 80844e8:	20000cd0 	.word	0x20000cd0
 80844ec:	08092d38 	.word	0x08092d38
 80844f0:	200006f8 	.word	0x200006f8
 80844f4:	20000d5c 	.word	0x20000d5c
 80844f8:	20000708 	.word	0x20000708
 80844fc:	200006a0 	.word	0x200006a0
 8084500:	08091d52 	.word	0x08091d52
 8084504:	20000698 	.word	0x20000698
 8084508:	08092d4d 	.word	0x08092d4d
        file.println(csv_output_string);
 808450c:	9906      	ldr	r1, [sp, #24]
 808450e:	4898      	ldr	r0, [pc, #608]	; (8084770 <_Z15outputDataToESPv+0xf44>)
 8084510:	f007 f9c1 	bl	808b896 <_ZN5Print7printlnEPKc>
        file.close();
 8084514:	4897      	ldr	r0, [pc, #604]	; (8084774 <_Z15outputDataToESPv+0xf48>)
 8084516:	f004 fa3b 	bl	8088990 <_ZN7FatFile5closeEv>
void outputDataToESP(void){
 808451a:	2500      	movs	r5, #0
        wordBytes.myWord = DEVICE_id;
 808451c:	f8df 929c 	ldr.w	r9, [pc, #668]	; 80847bc <_Z15outputDataToESPv+0xf90>
            floatBytes.myFloat = bme.pressure / 100.0;
 8084520:	f8df a29c 	ldr.w	sl, [pc, #668]	; 80847c0 <_Z15outputDataToESPv+0xf94>
        wordBytes.myWord = gps.get_latitudeWhole();
 8084524:	4e94      	ldr	r6, [pc, #592]	; (8084778 <_Z15outputDataToESPv+0xf4c>)
 8084526:	ac27      	add	r4, sp, #156	; 0x9c
        ble_output_array[0 + i*(BLE_PAYLOAD_SIZE)] = 1;
 8084528:	2301      	movs	r3, #1
 808452a:	7023      	strb	r3, [r4, #0]
        wordBytes.myWord = DEVICE_id;
 808452c:	f8d9 3000 	ldr.w	r3, [r9]
        ble_output_array[1 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8084530:	7063      	strb	r3, [r4, #1]
        ble_output_array[2 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8084532:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8084536:	70a3      	strb	r3, [r4, #2]
        ble_output_array[3 + i*(BLE_PAYLOAD_SIZE)] = sample_counter;
 8084538:	4b90      	ldr	r3, [pc, #576]	; (808477c <_Z15outputDataToESPv+0xf50>)
 808453a:	681b      	ldr	r3, [r3, #0]
 808453c:	70e3      	strb	r3, [r4, #3]
        if(i == 0){
 808453e:	2d00      	cmp	r5, #0
 8084540:	d15c      	bne.n	80845fc <_Z15outputDataToESPv+0xdd0>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = CARBON_MONOXIDE_PACKET_CONSTANT;
 8084542:	234d      	movs	r3, #77	; 0x4d
 8084544:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
            floatBytes.myFloat = CO_float;
 8084548:	4b8d      	ldr	r3, [pc, #564]	; (8084780 <_Z15outputDataToESPv+0xf54>)
            floatBytes.myFloat = air_quality_score;
 808454a:	6818      	ldr	r0, [r3, #0]
 808454c:	e065      	b.n	808461a <_Z15outputDataToESPv+0xdee>
        latitude_string = "";
 808454e:	498d      	ldr	r1, [pc, #564]	; (8084784 <_Z15outputDataToESPv+0xf58>)
 8084550:	a80e      	add	r0, sp, #56	; 0x38
 8084552:	f006 ffe1 	bl	808b518 <_ZN6StringaSEPKc>
 8084556:	f7ff bac9 	b.w	8083aec <_Z15outputDataToESPv+0x2c0>
        csv_output_string += String(geolocation_latitude)+ ",";
 808455a:	498b      	ldr	r1, [pc, #556]	; (8084788 <_Z15outputDataToESPv+0xf5c>)
 808455c:	a81e      	add	r0, sp, #120	; 0x78
 808455e:	f006 ff89 	bl	808b474 <_ZN6StringC1EPKc>
	StringSumHelper(const String &s) : String(s) {}
 8084562:	a91e      	add	r1, sp, #120	; 0x78
 8084564:	a827      	add	r0, sp, #156	; 0x9c
 8084566:	f006 ffc4 	bl	808b4f2 <_ZN6StringC1ERKS_>
 808456a:	4988      	ldr	r1, [pc, #544]	; (808478c <_Z15outputDataToESPv+0xf60>)
 808456c:	a827      	add	r0, sp, #156	; 0x9c
 808456e:	f007 f89d 	bl	808b6ac <_ZplRK15StringSumHelperPKc>
 8084572:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084574:	a806      	add	r0, sp, #24
 8084576:	f007 f848 	bl	808b60a <_ZN6String6concatERKS_>
class StringSumHelper : public String
 808457a:	a827      	add	r0, sp, #156	; 0x9c
 808457c:	f006 ff30 	bl	808b3e0 <_ZN6StringD1Ev>
 8084580:	a81e      	add	r0, sp, #120	; 0x78
 8084582:	f006 ff2d 	bl	808b3e0 <_ZN6StringD1Ev>
        cloud_output_string += String(geolocation_latitude);
 8084586:	4980      	ldr	r1, [pc, #512]	; (8084788 <_Z15outputDataToESPv+0xf5c>)
 8084588:	a827      	add	r0, sp, #156	; 0x9c
 808458a:	f006 ff73 	bl	808b474 <_ZN6StringC1EPKc>
 808458e:	e640      	b.n	8084212 <_Z15outputDataToESPv+0x9e6>
        csv_output_string += String(geolocation_longitude) + ",";
 8084590:	497f      	ldr	r1, [pc, #508]	; (8084790 <_Z15outputDataToESPv+0xf64>)
 8084592:	a81e      	add	r0, sp, #120	; 0x78
 8084594:	f006 ff6e 	bl	808b474 <_ZN6StringC1EPKc>
	StringSumHelper(const String &s) : String(s) {}
 8084598:	a91e      	add	r1, sp, #120	; 0x78
 808459a:	a827      	add	r0, sp, #156	; 0x9c
 808459c:	f006 ffa9 	bl	808b4f2 <_ZN6StringC1ERKS_>
 80845a0:	497a      	ldr	r1, [pc, #488]	; (808478c <_Z15outputDataToESPv+0xf60>)
 80845a2:	a827      	add	r0, sp, #156	; 0x9c
 80845a4:	f007 f882 	bl	808b6ac <_ZplRK15StringSumHelperPKc>
 80845a8:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80845aa:	a806      	add	r0, sp, #24
 80845ac:	f007 f82d 	bl	808b60a <_ZN6String6concatERKS_>
class StringSumHelper : public String
 80845b0:	a827      	add	r0, sp, #156	; 0x9c
 80845b2:	f006 ff15 	bl	808b3e0 <_ZN6StringD1Ev>
 80845b6:	a81e      	add	r0, sp, #120	; 0x78
 80845b8:	f006 ff12 	bl	808b3e0 <_ZN6StringD1Ev>
        cloud_output_string += String(geolocation_longitude);
 80845bc:	4974      	ldr	r1, [pc, #464]	; (8084790 <_Z15outputDataToESPv+0xf64>)
 80845be:	a827      	add	r0, sp, #156	; 0x9c
 80845c0:	f006 ff58 	bl	808b474 <_ZN6StringC1EPKc>
 80845c4:	e673      	b.n	80842ae <_Z15outputDataToESPv+0xa82>
        csv_output_string += String(geolocation_accuracy) + ",";
 80845c6:	4973      	ldr	r1, [pc, #460]	; (8084794 <_Z15outputDataToESPv+0xf68>)
 80845c8:	a81e      	add	r0, sp, #120	; 0x78
 80845ca:	f006 ff53 	bl	808b474 <_ZN6StringC1EPKc>
	StringSumHelper(const String &s) : String(s) {}
 80845ce:	a91e      	add	r1, sp, #120	; 0x78
 80845d0:	a827      	add	r0, sp, #156	; 0x9c
 80845d2:	f006 ff8e 	bl	808b4f2 <_ZN6StringC1ERKS_>
 80845d6:	496d      	ldr	r1, [pc, #436]	; (808478c <_Z15outputDataToESPv+0xf60>)
 80845d8:	a827      	add	r0, sp, #156	; 0x9c
 80845da:	f007 f867 	bl	808b6ac <_ZplRK15StringSumHelperPKc>
 80845de:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80845e0:	a806      	add	r0, sp, #24
 80845e2:	f007 f812 	bl	808b60a <_ZN6String6concatERKS_>
class StringSumHelper : public String
 80845e6:	a827      	add	r0, sp, #156	; 0x9c
 80845e8:	f006 fefa 	bl	808b3e0 <_ZN6StringD1Ev>
 80845ec:	a81e      	add	r0, sp, #120	; 0x78
 80845ee:	f006 fef7 	bl	808b3e0 <_ZN6StringD1Ev>
        cloud_output_string += String(geolocation_accuracy);
 80845f2:	4968      	ldr	r1, [pc, #416]	; (8084794 <_Z15outputDataToESPv+0xf68>)
 80845f4:	a827      	add	r0, sp, #156	; 0x9c
 80845f6:	f006 ff3d 	bl	808b474 <_ZN6StringC1EPKc>
 80845fa:	e6a5      	b.n	8084348 <_Z15outputDataToESPv+0xb1c>
        }else if(i == 1){
 80845fc:	2d01      	cmp	r5, #1
 80845fe:	d104      	bne.n	808460a <_Z15outputDataToESPv+0xdde>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = CARBON_DIOXIDE_PACKET_CONSTANT;
 8084600:	2343      	movs	r3, #67	; 0x43
 8084602:	f88d 30b6 	strb.w	r3, [sp, #182]	; 0xb6
            floatBytes.myFloat = CO2_float;
 8084606:	4b64      	ldr	r3, [pc, #400]	; (8084798 <_Z15outputDataToESPv+0xf6c>)
 8084608:	e79f      	b.n	808454a <_Z15outputDataToESPv+0xd1e>
        }else if(i == 2){
 808460a:	2d02      	cmp	r5, #2
 808460c:	d16e      	bne.n	80846ec <_Z15outputDataToESPv+0xec0>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = BATTERY_PACKET_CONSTANT;
 808460e:	2378      	movs	r3, #120	; 0x78
            floatBytes.myFloat = fuel.getSoC();
 8084610:	4862      	ldr	r0, [pc, #392]	; (808479c <_Z15outputDataToESPv+0xf70>)
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = BATTERY_PACKET_CONSTANT;
 8084612:	f88d 30cc 	strb.w	r3, [sp, #204]	; 0xcc
            floatBytes.myFloat = fuel.getSoC();
 8084616:	f007 fd91 	bl	808c13c <_ZN9FuelGauge6getSoCEv>
        ble_output_array[6 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
 808461a:	f3c0 2307 	ubfx	r3, r0, #8, #8
        ble_output_array[5 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[0];
 808461e:	7160      	strb	r0, [r4, #5]
        ble_output_array[6 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
 8084620:	71a3      	strb	r3, [r4, #6]
        ble_output_array[7 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[2];
 8084622:	f3c0 4307 	ubfx	r3, r0, #16, #8
        ble_output_array[8 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[3];
 8084626:	f3c0 6007 	ubfx	r0, r0, #24, #8
        ble_output_array[7 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[2];
 808462a:	71e3      	strb	r3, [r4, #7]
        ble_output_array[8 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[3];
 808462c:	7220      	strb	r0, [r4, #8]
        wordBytes.myWord = gps.get_latitudeWhole();
 808462e:	4630      	mov	r0, r6
 8084630:	f002 ff13 	bl	808745a <_ZN3GPS17get_latitudeWholeEv>
        ble_output_array[9 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8084634:	7260      	strb	r0, [r4, #9]
        ble_output_array[10 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8084636:	f3c0 2007 	ubfx	r0, r0, #8, #8
 808463a:	72a0      	strb	r0, [r4, #10]
        wordBytes.myWord = gps.get_latitudeFrac();
 808463c:	4630      	mov	r0, r6
 808463e:	f002 ff0f 	bl	8087460 <_ZN3GPS16get_latitudeFracEv>
        ble_output_array[11 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8084642:	72e0      	strb	r0, [r4, #11]
        ble_output_array[12 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8084644:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8084648:	7320      	strb	r0, [r4, #12]
        wordBytes.myWord = gps.get_longitudeWhole();
 808464a:	4630      	mov	r0, r6
 808464c:	f002 ff0b 	bl	8087466 <_ZN3GPS18get_longitudeWholeEv>
        ble_output_array[13 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8084650:	7360      	strb	r0, [r4, #13]
        ble_output_array[14 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8084652:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8084656:	73a0      	strb	r0, [r4, #14]
        wordBytes.myWord = gps.get_longitudeFrac();
 8084658:	4630      	mov	r0, r6
 808465a:	f002 ff07 	bl	808746c <_ZN3GPS17get_longitudeFracEv>
        ble_output_array[15 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 808465e:	73e0      	strb	r0, [r4, #15]
        ble_output_array[16 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8084660:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8084664:	7420      	strb	r0, [r4, #16]
        int northSouth = gps.get_nsIndicator();
 8084666:	4630      	mov	r0, r6
 8084668:	f002 ff03 	bl	8087472 <_ZN3GPS15get_nsIndicatorEv>
 808466c:	4683      	mov	fp, r0
        int eastWest = gps.get_ewIndicator();
 808466e:	4630      	mov	r0, r6
 8084670:	f002 ff02 	bl	8087478 <_ZN3GPS15get_ewIndicatorEv>
        ble_output_array[17 + i*(BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
 8084674:	ea4b 0b00 	orr.w	fp, fp, r0
 8084678:	f884 b011 	strb.w	fp, [r4, #17]
        ble_output_array[18 + i*(BLE_PAYLOAD_SIZE)] = gps.get_horizontalDillution();
 808467c:	4630      	mov	r0, r6
 808467e:	f002 fee7 	bl	8087450 <_ZN3GPS23get_horizontalDillutionEv>
        ble_output_array[19 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[1];
 8084682:	787b      	ldrb	r3, [r7, #1]
    for(int i=0; i<NUMBER_OF_SPECIES; i++){
 8084684:	3501      	adds	r5, #1
        ble_output_array[19 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[1];
 8084686:	74e3      	strb	r3, [r4, #19]
        ble_output_array[20 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[0];
 8084688:	783b      	ldrb	r3, [r7, #0]
    for(int i=0; i<NUMBER_OF_SPECIES; i++){
 808468a:	2d0b      	cmp	r5, #11
        ble_output_array[20 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[0];
 808468c:	7523      	strb	r3, [r4, #20]
        ble_output_array[21 + i*(BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species
 808468e:	f04f 0323 	mov.w	r3, #35	; 0x23
        ble_output_array[18 + i*(BLE_PAYLOAD_SIZE)] = gps.get_horizontalDillution();
 8084692:	74a0      	strb	r0, [r4, #18]
        ble_output_array[21 + i*(BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species
 8084694:	7563      	strb	r3, [r4, #21]
    for(int i=0; i<NUMBER_OF_SPECIES; i++){
 8084696:	f104 0416 	add.w	r4, r4, #22
 808469a:	f47f af45 	bne.w	8084528 <_Z15outputDataToESPv+0xcfc>
    Serial1.print("$");
 808469e:	f008 faff 	bl	808cca0 <_Z22__fetch_global_Serial1v>
 80846a2:	493f      	ldr	r1, [pc, #252]	; (80847a0 <_Z15outputDataToESPv+0xf74>)
 80846a4:	f007 f8e4 	bl	808b870 <_ZN5Print5printEPKc>
    Serial1.write(ble_output_array, NUMBER_OF_SPECIES*BLE_PAYLOAD_SIZE);
 80846a8:	f008 fafa 	bl	808cca0 <_Z22__fetch_global_Serial1v>
 80846ac:	6803      	ldr	r3, [r0, #0]
 80846ae:	22f2      	movs	r2, #242	; 0xf2
 80846b0:	68db      	ldr	r3, [r3, #12]
 80846b2:	a927      	add	r1, sp, #156	; 0x9c
 80846b4:	4798      	blx	r3
    Serial1.print("&");
 80846b6:	f008 faf3 	bl	808cca0 <_Z22__fetch_global_Serial1v>
 80846ba:	493a      	ldr	r1, [pc, #232]	; (80847a4 <_Z15outputDataToESPv+0xf78>)
 80846bc:	f007 f8d8 	bl	808b870 <_ZN5Print5printEPKc>
    String device_string = "PAM-" + String(DEVICE_id);
 80846c0:	a816      	add	r0, sp, #88	; 0x58
 80846c2:	f006 fe8d 	bl	808b3e0 <_ZN6StringD1Ev>
    String longitude_string = "";
 80846c6:	a812      	add	r0, sp, #72	; 0x48
 80846c8:	f006 fe8a 	bl	808b3e0 <_ZN6StringD1Ev>
    String latitude_string = "";
 80846cc:	a80e      	add	r0, sp, #56	; 0x38
 80846ce:	f006 fe87 	bl	808b3e0 <_ZN6StringD1Ev>
    String sensible_string = "";
 80846d2:	a80a      	add	r0, sp, #40	; 0x28
 80846d4:	f006 fe84 	bl	808b3e0 <_ZN6StringD1Ev>
    String csv_output_string = "";
 80846d8:	a806      	add	r0, sp, #24
 80846da:	f006 fe81 	bl	808b3e0 <_ZN6StringD1Ev>
    String cloud_output_string = "";    //create a clean string
 80846de:	a802      	add	r0, sp, #8
 80846e0:	f006 fe7e 	bl	808b3e0 <_ZN6StringD1Ev>
}
 80846e4:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 80846e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        }else if(i == 3){
 80846ec:	2d03      	cmp	r5, #3
 80846ee:	d107      	bne.n	8084700 <_Z15outputDataToESPv+0xed4>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM1_PACKET_CONSTANT;
 80846f0:	2372      	movs	r3, #114	; 0x72
 80846f2:	f88d 30e2 	strb.w	r3, [sp, #226]	; 0xe2
            floatBytes.myFloat = PM01Value;
 80846f6:	4b2c      	ldr	r3, [pc, #176]	; (80847a8 <_Z15outputDataToESPv+0xf7c>)
            floatBytes.myFloat = PM10Value;
 80846f8:	6818      	ldr	r0, [r3, #0]
 80846fa:	f009 fc01 	bl	808df00 <__aeabi_i2f>
 80846fe:	e78c      	b.n	808461a <_Z15outputDataToESPv+0xdee>
        }else if(i == 4){
 8084700:	2d04      	cmp	r5, #4
 8084702:	d104      	bne.n	808470e <_Z15outputDataToESPv+0xee2>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM2PT5_PACKET_CONSTANT;
 8084704:	2352      	movs	r3, #82	; 0x52
 8084706:	f88d 30f8 	strb.w	r3, [sp, #248]	; 0xf8
            floatBytes.myFloat = corrected_PM_25;
 808470a:	4b28      	ldr	r3, [pc, #160]	; (80847ac <_Z15outputDataToESPv+0xf80>)
 808470c:	e71d      	b.n	808454a <_Z15outputDataToESPv+0xd1e>
        }else if(i == 5){
 808470e:	2d05      	cmp	r5, #5
 8084710:	d104      	bne.n	808471c <_Z15outputDataToESPv+0xef0>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM10_PACKET_CONSTANT;
 8084712:	2371      	movs	r3, #113	; 0x71
 8084714:	f88d 310e 	strb.w	r3, [sp, #270]	; 0x10e
            floatBytes.myFloat = PM10Value;
 8084718:	4b25      	ldr	r3, [pc, #148]	; (80847b0 <_Z15outputDataToESPv+0xf84>)
 808471a:	e7ed      	b.n	80846f8 <_Z15outputDataToESPv+0xecc>
        }else if(i == 6){
 808471c:	2d06      	cmp	r5, #6
 808471e:	d105      	bne.n	808472c <_Z15outputDataToESPv+0xf00>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = TEMPERATURE_PACKET_CONSTANT;
 8084720:	2374      	movs	r3, #116	; 0x74
 8084722:	f88d 3124 	strb.w	r3, [sp, #292]	; 0x124
            floatBytes.myFloat = readTemperature();
 8084726:	f7fc ff6f 	bl	8081608 <_Z15readTemperaturev>
 808472a:	e776      	b.n	808461a <_Z15outputDataToESPv+0xdee>
        }else if(i == 7){
 808472c:	2d07      	cmp	r5, #7
 808472e:	d108      	bne.n	8084742 <_Z15outputDataToESPv+0xf16>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PRESSURE_PACKET_CONSTANT;
 8084730:	2350      	movs	r3, #80	; 0x50
 8084732:	f88d 313a 	strb.w	r3, [sp, #314]	; 0x13a
            floatBytes.myFloat = bme.pressure / 100.0;
 8084736:	4b1f      	ldr	r3, [pc, #124]	; (80847b4 <_Z15outputDataToESPv+0xf88>)
 8084738:	4651      	mov	r1, sl
 808473a:	6858      	ldr	r0, [r3, #4]
 808473c:	f009 fce8 	bl	808e110 <__aeabi_fdiv>
 8084740:	e76b      	b.n	808461a <_Z15outputDataToESPv+0xdee>
        }else if(i == 8){
 8084742:	2d08      	cmp	r5, #8
 8084744:	d105      	bne.n	8084752 <_Z15outputDataToESPv+0xf26>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = HUMIDITY_PACKET_CONSTANT;
 8084746:	2368      	movs	r3, #104	; 0x68
 8084748:	f88d 3150 	strb.w	r3, [sp, #336]	; 0x150
            floatBytes.myFloat = readHumidity();
 808474c:	f7fc ffd6 	bl	80816fc <_Z12readHumidityv>
 8084750:	e763      	b.n	808461a <_Z15outputDataToESPv+0xdee>
        }else if(i == 9){
 8084752:	2d09      	cmp	r5, #9
 8084754:	d107      	bne.n	8084766 <_Z15outputDataToESPv+0xf3a>
            floatBytes.myFloat = sound_average;
 8084756:	e9d8 0100 	ldrd	r0, r1, [r8]
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = SOUND_PACKET_CONSTANT;
 808475a:	2373      	movs	r3, #115	; 0x73
 808475c:	f88d 3166 	strb.w	r3, [sp, #358]	; 0x166
            floatBytes.myFloat = sound_average;
 8084760:	f009 fac4 	bl	808dcec <__aeabi_d2f>
 8084764:	e759      	b.n	808461a <_Z15outputDataToESPv+0xdee>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = VOC_PACKET_CONSTANT;
 8084766:	2367      	movs	r3, #103	; 0x67
 8084768:	7123      	strb	r3, [r4, #4]
            floatBytes.myFloat = air_quality_score;
 808476a:	4b13      	ldr	r3, [pc, #76]	; (80847b8 <_Z15outputDataToESPv+0xf8c>)
 808476c:	e6ed      	b.n	808454a <_Z15outputDataToESPv+0xd1e>
 808476e:	bf00      	nop
 8084770:	20000698 	.word	0x20000698
 8084774:	200006a0 	.word	0x200006a0
 8084778:	20000720 	.word	0x20000720
 808477c:	2000085c 	.word	0x2000085c
 8084780:	20000340 	.word	0x20000340
 8084784:	080942e2 	.word	0x080942e2
 8084788:	200000aa 	.word	0x200000aa
 808478c:	08094026 	.word	0x08094026
 8084790:	200000b6 	.word	0x200000b6
 8084794:	200000a4 	.word	0x200000a4
 8084798:	2000032c 	.word	0x2000032c
 808479c:	2000070c 	.word	0x2000070c
 80847a0:	08091e1c 	.word	0x08091e1c
 80847a4:	08092f49 	.word	0x08092f49
 80847a8:	2000035c 	.word	0x2000035c
 80847ac:	2000068c 	.word	0x2000068c
 80847b0:	20000360 	.word	0x20000360
 80847b4:	200005ec 	.word	0x200005ec
 80847b8:	200005e4 	.word	0x200005e4
 80847bc:	20000080 	.word	0x20000080
 80847c0:	42c80000 	.word	0x42c80000

080847c4 <_ZN5Print6printfIJfEEEjPKcDpT_>:
    inline size_t printf(const char* format, Args... args)
 80847c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80847c6:	4604      	mov	r4, r0
        return this->printf_impl(false, format, args...);
 80847c8:	4610      	mov	r0, r2
    inline size_t printf(const char* format, Args... args)
 80847ca:	460d      	mov	r5, r1
        return this->printf_impl(false, format, args...);
 80847cc:	f008 ff3e 	bl	808d64c <__aeabi_f2d>
 80847d0:	462a      	mov	r2, r5
 80847d2:	e9cd 0100 	strd	r0, r1, [sp]
 80847d6:	2100      	movs	r1, #0
 80847d8:	4620      	mov	r0, r4
 80847da:	f007 f969 	bl	808bab0 <_ZN5Print11printf_implEbPKcz>
    }
 80847de:	b003      	add	sp, #12
 80847e0:	bd30      	pop	{r4, r5, pc}

080847e2 <_ZN5Print6printfIJlEEEjPKcDpT_>:
    inline size_t printf(const char* format, Args... args)
 80847e2:	4613      	mov	r3, r2
        return this->printf_impl(false, format, args...);
 80847e4:	460a      	mov	r2, r1
 80847e6:	2100      	movs	r1, #0
 80847e8:	f007 b962 	b.w	808bab0 <_ZN5Print11printf_implEbPKcz>
 80847ec:	0000      	movs	r0, r0
	...

080847f0 <_Z10readAlpha1v>:
float readAlpha1(void){
 80847f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(debugging_enabled){
 80847f4:	4da0      	ldr	r5, [pc, #640]	; (8084a78 <_Z10readAlpha1v+0x288>)
float readAlpha1(void){
 80847f6:	b08b      	sub	sp, #44	; 0x2c
    String alpha1_ppmRounded;
 80847f8:	49a0      	ldr	r1, [pc, #640]	; (8084a7c <_Z10readAlpha1v+0x28c>)
 80847fa:	a802      	add	r0, sp, #8
 80847fc:	f006 fe3a 	bl	808b474 <_ZN6StringC1EPKc>
    if(debugging_enabled){
 8084800:	682b      	ldr	r3, [r5, #0]
 8084802:	b123      	cbz	r3, 808480e <_Z10readAlpha1v+0x1e>
        Serial.println("Start of alpha read");
 8084804:	f008 f902 	bl	808ca0c <_Z16_fetch_usbserialv>
 8084808:	499d      	ldr	r1, [pc, #628]	; (8084a80 <_Z10readAlpha1v+0x290>)
 808480a:	f007 f844 	bl	808b896 <_ZN5Print7printlnEPKc>
    digitalWrite(lmp91000_1_en, LOW);   //enable
 808480e:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8084ad8 <_Z10readAlpha1v+0x2e8>
 8084812:	2100      	movs	r1, #0
 8084814:	f8b9 0000 	ldrh.w	r0, [r9]
 8084818:	f008 fcbd 	bl	808d196 <digitalWrite>
    if(Wire.requestFrom(0x49,1) == 0){
 808481c:	f008 fd50 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8084820:	2201      	movs	r2, #1
 8084822:	2149      	movs	r1, #73	; 0x49
 8084824:	f008 fae5 	bl	808cdf2 <_ZN7TwoWire11requestFromEhj>
 8084828:	f8cd 9004 	str.w	r9, [sp, #4]
 808482c:	2800      	cmp	r0, #0
 808482e:	d15d      	bne.n	80848ec <_Z10readAlpha1v+0xfc>
      if(debugging_enabled){
 8084830:	682b      	ldr	r3, [r5, #0]
 8084832:	b173      	cbz	r3, 8084852 <_Z10readAlpha1v+0x62>
        Serial.println("Couldn't communicate with LMP91000");
 8084834:	f008 f8ea 	bl	808ca0c <_Z16_fetch_usbserialv>
 8084838:	4992      	ldr	r1, [pc, #584]	; (8084a84 <_Z10readAlpha1v+0x294>)
 808483a:	f007 f82c 	bl	808b896 <_ZN5Print7printlnEPKc>
        writeLogFile("Couldn't communicate with LMP91000");
 808483e:	4991      	ldr	r1, [pc, #580]	; (8084a84 <_Z10readAlpha1v+0x294>)
            writeLogFile("Halfvolt higher than 0.5");
 8084840:	a806      	add	r0, sp, #24
 8084842:	f006 fe17 	bl	808b474 <_ZN6StringC1EPKc>
 8084846:	a806      	add	r0, sp, #24
 8084848:	f7fd fa4a 	bl	8081ce0 <_Z12writeLogFile6String>
 808484c:	a806      	add	r0, sp, #24
 808484e:	f006 fdc7 	bl	808b3e0 <_ZN6StringD1Ev>
    if(lmp91000.read(LMP91000_STATUS_REG) == 0){
 8084852:	2100      	movs	r1, #0
 8084854:	488c      	ldr	r0, [pc, #560]	; (8084a88 <_Z10readAlpha1v+0x298>)
 8084856:	f002 fbd8 	bl	808700a <_ZN8LMP910004readEh>
 808485a:	b980      	cbnz	r0, 808487e <_Z10readAlpha1v+0x8e>
        if(debugging_enabled){
 808485c:	682b      	ldr	r3, [r5, #0]
 808485e:	b173      	cbz	r3, 808487e <_Z10readAlpha1v+0x8e>
            Serial.println("Status = 0 from LMP91000 status reg");
 8084860:	f008 f8d4 	bl	808ca0c <_Z16_fetch_usbserialv>
 8084864:	4989      	ldr	r1, [pc, #548]	; (8084a8c <_Z10readAlpha1v+0x29c>)
 8084866:	f007 f816 	bl	808b896 <_ZN5Print7printlnEPKc>
            writeLogFile("LMP1000 status = 0");
 808486a:	4989      	ldr	r1, [pc, #548]	; (8084a90 <_Z10readAlpha1v+0x2a0>)
 808486c:	a806      	add	r0, sp, #24
 808486e:	f006 fe01 	bl	808b474 <_ZN6StringC1EPKc>
 8084872:	a806      	add	r0, sp, #24
 8084874:	f7fd fa34 	bl	8081ce0 <_Z12writeLogFile6String>
 8084878:	a806      	add	r0, sp, #24
 808487a:	f006 fdb1 	bl	808b3e0 <_ZN6StringD1Ev>
    if(Wire.requestFrom(0x49,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0){
 808487e:	f008 fd1f 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8084882:	2201      	movs	r2, #1
 8084884:	2149      	movs	r1, #73	; 0x49
 8084886:	f008 fab4 	bl	808cdf2 <_ZN7TwoWire11requestFromEhj>
 808488a:	2800      	cmp	r0, #0
 808488c:	d156      	bne.n	808493c <_Z10readAlpha1v+0x14c>
        alpha1_ppmRounded = "-99";
 808488e:	4981      	ldr	r1, [pc, #516]	; (8084a94 <_Z10readAlpha1v+0x2a4>)
 8084890:	a802      	add	r0, sp, #8
 8084892:	f006 fe41 	bl	808b518 <_ZN6StringaSEPKc>
      digitalWrite(lmp91000_1_en, HIGH);  //disable
 8084896:	9b01      	ldr	r3, [sp, #4]
 8084898:	2101      	movs	r1, #1
 808489a:	8818      	ldrh	r0, [r3, #0]
 808489c:	f008 fc7b 	bl	808d196 <digitalWrite>
      if(debugging_enabled){
 80848a0:	682b      	ldr	r3, [r5, #0]
 80848a2:	b1e3      	cbz	r3, 80848de <_Z10readAlpha1v+0xee>
          Serial.print("CO measurements:  \n\r");
 80848a4:	f008 f8b2 	bl	808ca0c <_Z16_fetch_usbserialv>
 80848a8:	497b      	ldr	r1, [pc, #492]	; (8084a98 <_Z10readAlpha1v+0x2a8>)
 80848aa:	f006 ffe1 	bl	808b870 <_ZN5Print5printEPKc>
          Serial.printf("A0_gas: %d\n\r", A0_gas);
 80848ae:	f008 f8ad 	bl	808ca0c <_Z16_fetch_usbserialv>
 80848b2:	463a      	mov	r2, r7
 80848b4:	4979      	ldr	r1, [pc, #484]	; (8084a9c <_Z10readAlpha1v+0x2ac>)
 80848b6:	f7ff ff94 	bl	80847e2 <_ZN5Print6printfIJlEEEjPKcDpT_>
          Serial.printf("A1_aux: %d\n\r", A1_aux);
 80848ba:	f008 f8a7 	bl	808ca0c <_Z16_fetch_usbserialv>
 80848be:	4632      	mov	r2, r6
 80848c0:	4977      	ldr	r1, [pc, #476]	; (8084aa0 <_Z10readAlpha1v+0x2b0>)
 80848c2:	f7ff ff8e 	bl	80847e2 <_ZN5Print6printfIJlEEEjPKcDpT_>
          Serial.printf("A2_temp: %d\n\r", A2_temperature);
 80848c6:	f008 f8a1 	bl	808ca0c <_Z16_fetch_usbserialv>
 80848ca:	4652      	mov	r2, sl
 80848cc:	4975      	ldr	r1, [pc, #468]	; (8084aa4 <_Z10readAlpha1v+0x2b4>)
 80848ce:	f7ff ff88 	bl	80847e2 <_ZN5Print6printfIJlEEEjPKcDpT_>
          Serial.printf("half_vref: %d\n\r", half_Vref);
 80848d2:	f008 f89b 	bl	808ca0c <_Z16_fetch_usbserialv>
 80848d6:	4622      	mov	r2, r4
 80848d8:	4973      	ldr	r1, [pc, #460]	; (8084aa8 <_Z10readAlpha1v+0x2b8>)
 80848da:	f7ff ff82 	bl	80847e2 <_ZN5Print6printfIJlEEEjPKcDpT_>
    String alpha1_ppmRounded;
 80848de:	a802      	add	r0, sp, #8
 80848e0:	f006 fd7e 	bl	808b3e0 <_ZN6StringD1Ev>
}
 80848e4:	4640      	mov	r0, r8
 80848e6:	b00b      	add	sp, #44	; 0x2c
 80848e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        half_Vref = ads1.readADC_SingleEnded(3); //half of Vref
 80848ec:	2103      	movs	r1, #3
 80848ee:	486f      	ldr	r0, [pc, #444]	; (8084aac <_Z10readAlpha1v+0x2bc>)
 80848f0:	f002 fcd6 	bl	80872a0 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
 80848f4:	4604      	mov	r4, r0
        volt_half_Vref = half_Vref * ads_bitmv;
 80848f6:	f009 fb03 	bl	808df00 <__aeabi_i2f>
 80848fa:	4b6d      	ldr	r3, [pc, #436]	; (8084ab0 <_Z10readAlpha1v+0x2c0>)
 80848fc:	6819      	ldr	r1, [r3, #0]
 80848fe:	f009 fb53 	bl	808dfa8 <__aeabi_fmul>
        if(abs((volt_half_Vref)/1000 - 1.25) > 0.5){
 8084902:	496c      	ldr	r1, [pc, #432]	; (8084ab4 <_Z10readAlpha1v+0x2c4>)
 8084904:	f009 fc04 	bl	808e110 <__aeabi_fdiv>
 8084908:	4681      	mov	r9, r0
 808490a:	f008 fe9f 	bl	808d64c <__aeabi_f2d>
 808490e:	2200      	movs	r2, #0
 8084910:	4b69      	ldr	r3, [pc, #420]	; (8084ab8 <_Z10readAlpha1v+0x2c8>)
 8084912:	f008 fd3b 	bl	808d38c <__aeabi_dsub>
 8084916:	2200      	movs	r2, #0
 8084918:	4b68      	ldr	r3, [pc, #416]	; (8084abc <_Z10readAlpha1v+0x2cc>)
 808491a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 808491e:	f009 f97d 	bl	808dc1c <__aeabi_dcmpgt>
 8084922:	2800      	cmp	r0, #0
 8084924:	d095      	beq.n	8084852 <_Z10readAlpha1v+0x62>
          if(debugging_enabled){
 8084926:	682b      	ldr	r3, [r5, #0]
 8084928:	2b00      	cmp	r3, #0
 808492a:	d092      	beq.n	8084852 <_Z10readAlpha1v+0x62>
            Serial.printf("Halfvolt: %1.2f\n\r", volt_half_Vref/1000);
 808492c:	f008 f86e 	bl	808ca0c <_Z16_fetch_usbserialv>
 8084930:	4963      	ldr	r1, [pc, #396]	; (8084ac0 <_Z10readAlpha1v+0x2d0>)
 8084932:	464a      	mov	r2, r9
 8084934:	f7ff ff46 	bl	80847c4 <_ZN5Print6printfIJfEEEjPKcDpT_>
            writeLogFile("Halfvolt higher than 0.5");
 8084938:	4962      	ldr	r1, [pc, #392]	; (8084ac4 <_Z10readAlpha1v+0x2d4>)
 808493a:	e781      	b.n	8084840 <_Z10readAlpha1v+0x50>
    if(Wire.requestFrom(0x49,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0){
 808493c:	2100      	movs	r1, #0
 808493e:	4852      	ldr	r0, [pc, #328]	; (8084a88 <_Z10readAlpha1v+0x298>)
 8084940:	f002 fb63 	bl	808700a <_ZN8LMP910004readEh>
 8084944:	2800      	cmp	r0, #0
 8084946:	d0a2      	beq.n	808488e <_Z10readAlpha1v+0x9e>
 8084948:	2400      	movs	r4, #0
 808494a:	f04f 090a 	mov.w	r9, #10
 808494e:	46a2      	mov	sl, r4
 8084950:	46a0      	mov	r8, r4
 8084952:	4627      	mov	r7, r4
          A0_gas += ads1.readADC_SingleEnded(0); //gas
 8084954:	4e55      	ldr	r6, [pc, #340]	; (8084aac <_Z10readAlpha1v+0x2bc>)
 8084956:	2100      	movs	r1, #0
 8084958:	4630      	mov	r0, r6
 808495a:	f002 fca1 	bl	80872a0 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
 808495e:	2101      	movs	r1, #1
          A0_gas += ads1.readADC_SingleEnded(0); //gas
 8084960:	4407      	add	r7, r0
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
 8084962:	4630      	mov	r0, r6
 8084964:	f002 fc9c 	bl	80872a0 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
 8084968:	2102      	movs	r1, #2
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
 808496a:	4480      	add	r8, r0
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
 808496c:	4630      	mov	r0, r6
 808496e:	f002 fc97 	bl	80872a0 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
 8084972:	2103      	movs	r1, #3
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
 8084974:	4482      	add	sl, r0
          half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
 8084976:	4630      	mov	r0, r6
 8084978:	f002 fc92 	bl	80872a0 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
 808497c:	f1b9 0901 	subs.w	r9, r9, #1
          half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
 8084980:	4404      	add	r4, r0
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
 8084982:	d1e8      	bne.n	8084956 <_Z10readAlpha1v+0x166>
        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
 8084984:	200a      	movs	r0, #10
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;
 8084986:	fbb4 f4f0 	udiv	r4, r4, r0
        volt0_gas = A0_gas * ads_bitmv;
 808498a:	4b49      	ldr	r3, [pc, #292]	; (8084ab0 <_Z10readAlpha1v+0x2c0>)
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
 808498c:	fbb8 f6f0 	udiv	r6, r8, r0
        volt0_gas = A0_gas * ads_bitmv;
 8084990:	f8d3 9000 	ldr.w	r9, [r3]
        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
 8084994:	fbb7 f7f0 	udiv	r7, r7, r0
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
 8084998:	fbba faf0 	udiv	sl, sl, r0
        volt_half_Vref = half_Vref * ads_bitmv;
 808499c:	4620      	mov	r0, r4
 808499e:	f009 faaf 	bl	808df00 <__aeabi_i2f>
 80849a2:	4649      	mov	r1, r9
 80849a4:	f009 fb00 	bl	808dfa8 <__aeabi_fmul>
 80849a8:	4680      	mov	r8, r0
        volt0_gas = A0_gas * ads_bitmv;
 80849aa:	4638      	mov	r0, r7
 80849ac:	f009 faa8 	bl	808df00 <__aeabi_i2f>
 80849b0:	4649      	mov	r1, r9
 80849b2:	f009 faf9 	bl	808dfa8 <__aeabi_fmul>
 80849b6:	4601      	mov	r1, r0
        sensorCurrent = (volt_half_Vref - volt0_gas) / (-1*120); // Working Electrode current in microamps (millivolts / Kohms)
 80849b8:	4640      	mov	r0, r8
 80849ba:	f009 f9eb 	bl	808dd94 <__aeabi_fsub>
 80849be:	4942      	ldr	r1, [pc, #264]	; (8084ac8 <_Z10readAlpha1v+0x2d8>)
 80849c0:	f009 fba6 	bl	808e110 <__aeabi_fdiv>
 80849c4:	4683      	mov	fp, r0
        volt1_aux = A1_aux * ads_bitmv;
 80849c6:	4630      	mov	r0, r6
 80849c8:	f009 fa9a 	bl	808df00 <__aeabi_i2f>
 80849cc:	4649      	mov	r1, r9
 80849ce:	f009 faeb 	bl	808dfa8 <__aeabi_fmul>
 80849d2:	4601      	mov	r1, r0
        auxCurrent = (volt_half_Vref - volt1_aux) / (-1*150);
 80849d4:	4640      	mov	r0, r8
 80849d6:	f009 f9dd 	bl	808dd94 <__aeabi_fsub>
 80849da:	493c      	ldr	r1, [pc, #240]	; (8084acc <_Z10readAlpha1v+0x2dc>)
 80849dc:	f009 fb98 	bl	808e110 <__aeabi_fdiv>
 80849e0:	4680      	mov	r8, r0
        if(readTemperature() <= 15){
 80849e2:	f7fc fe11 	bl	8081608 <_Z15readTemperaturev>
 80849e6:	493a      	ldr	r1, [pc, #232]	; (8084ad0 <_Z10readAlpha1v+0x2e0>)
 80849e8:	f009 fc86 	bl	808e2f8 <__aeabi_fcmple>
 80849ec:	b1d0      	cbz	r0, 8084a24 <_Z10readAlpha1v+0x234>
          correctedCurrent = ((sensorCurrent) - (auxCurrent));
 80849ee:	4641      	mov	r1, r8
 80849f0:	4658      	mov	r0, fp
 80849f2:	f009 f9cf 	bl	808dd94 <__aeabi_fsub>
        alpha1_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 80849f6:	f008 fe29 	bl	808d64c <__aeabi_f2d>
 80849fa:	a31b      	add	r3, pc, #108	; (adr r3, 8084a68 <_Z10readAlpha1v+0x278>)
 80849fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084a00:	f008 ffa6 	bl	808d950 <__aeabi_ddiv>
 8084a04:	f009 f972 	bl	808dcec <__aeabi_d2f>
        alpha1_ppmRounded = String(alpha1_ppmraw, 2);
 8084a08:	2202      	movs	r2, #2
 8084a0a:	4601      	mov	r1, r0
        alpha1_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 8084a0c:	4680      	mov	r8, r0
        alpha1_ppmRounded = String(alpha1_ppmraw, 2);
 8084a0e:	a806      	add	r0, sp, #24
 8084a10:	f006 fdb7 	bl	808b582 <_ZN6StringC1Efi>
 8084a14:	a906      	add	r1, sp, #24
 8084a16:	a802      	add	r0, sp, #8
 8084a18:	f006 fd76 	bl	808b508 <_ZN6StringaSEOS_>
 8084a1c:	a806      	add	r0, sp, #24
 8084a1e:	f006 fcdf 	bl	808b3e0 <_ZN6StringD1Ev>
 8084a22:	e738      	b.n	8084896 <_Z10readAlpha1v+0xa6>
        else if(readTemperature() <= 25){
 8084a24:	f7fc fdf0 	bl	8081608 <_Z15readTemperaturev>
 8084a28:	492a      	ldr	r1, [pc, #168]	; (8084ad4 <_Z10readAlpha1v+0x2e4>)
 8084a2a:	f009 fc65 	bl	808e2f8 <__aeabi_fcmple>
 8084a2e:	b120      	cbz	r0, 8084a3a <_Z10readAlpha1v+0x24a>
          correctedCurrent = ((sensorCurrent) - (-1)*(auxCurrent));
 8084a30:	4641      	mov	r1, r8
 8084a32:	4658      	mov	r0, fp
 8084a34:	f009 f9b0 	bl	808dd98 <__addsf3>
 8084a38:	e7dd      	b.n	80849f6 <_Z10readAlpha1v+0x206>
          correctedCurrent = ((sensorCurrent) - (-0.76)*(auxCurrent));
 8084a3a:	4640      	mov	r0, r8
 8084a3c:	f008 fe06 	bl	808d64c <__aeabi_f2d>
 8084a40:	a30b      	add	r3, pc, #44	; (adr r3, 8084a70 <_Z10readAlpha1v+0x280>)
 8084a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084a46:	f008 fe59 	bl	808d6fc <__aeabi_dmul>
 8084a4a:	4680      	mov	r8, r0
 8084a4c:	4658      	mov	r0, fp
 8084a4e:	4689      	mov	r9, r1
 8084a50:	f008 fdfc 	bl	808d64c <__aeabi_f2d>
 8084a54:	4602      	mov	r2, r0
 8084a56:	460b      	mov	r3, r1
 8084a58:	4640      	mov	r0, r8
 8084a5a:	4649      	mov	r1, r9
 8084a5c:	f008 fc98 	bl	808d390 <__adddf3>
 8084a60:	f009 f944 	bl	808dcec <__aeabi_d2f>
 8084a64:	e7c7      	b.n	80849f6 <_Z10readAlpha1v+0x206>
 8084a66:	bf00      	nop
 8084a68:	d4fdf3b6 	.word	0xd4fdf3b6
 8084a6c:	3fd6e978 	.word	0x3fd6e978
 8084a70:	851eb852 	.word	0x851eb852
 8084a74:	3fe851eb 	.word	0x3fe851eb
 8084a78:	20000690 	.word	0x20000690
 8084a7c:	080942e2 	.word	0x080942e2
 8084a80:	08092dcf 	.word	0x08092dcf
 8084a84:	08092de3 	.word	0x08092de3
 8084a88:	2000076d 	.word	0x2000076d
 8084a8c:	08092e31 	.word	0x08092e31
 8084a90:	08092e55 	.word	0x08092e55
 8084a94:	08091d34 	.word	0x08091d34
 8084a98:	08092e68 	.word	0x08092e68
 8084a9c:	08092e7d 	.word	0x08092e7d
 8084aa0:	08092e8a 	.word	0x08092e8a
 8084aa4:	08092e97 	.word	0x08092e97
 8084aa8:	08092ea5 	.word	0x08092ea5
 8084aac:	200005d8 	.word	0x200005d8
 8084ab0:	20000084 	.word	0x20000084
 8084ab4:	447a0000 	.word	0x447a0000
 8084ab8:	3ff40000 	.word	0x3ff40000
 8084abc:	3fe00000 	.word	0x3fe00000
 8084ac0:	08092e06 	.word	0x08092e06
 8084ac4:	08092e18 	.word	0x08092e18
 8084ac8:	c2f00000 	.word	0xc2f00000
 8084acc:	c3160000 	.word	0xc3160000
 8084ad0:	41700000 	.word	0x41700000
 8084ad4:	41c80000 	.word	0x41c80000
 8084ad8:	200000c8 	.word	0x200000c8

08084adc <_Z6readCOv>:
float readCO(void){
 8084adc:	b570      	push	{r4, r5, r6, lr}
    if(CO_socket == 0){
 8084ade:	4b0f      	ldr	r3, [pc, #60]	; (8084b1c <_Z6readCOv+0x40>)
 8084ae0:	4c0f      	ldr	r4, [pc, #60]	; (8084b20 <_Z6readCOv+0x44>)
 8084ae2:	681b      	ldr	r3, [r3, #0]
 8084ae4:	b9bb      	cbnz	r3, 8084b16 <_Z6readCOv+0x3a>
        CO_float = readAlpha1();
 8084ae6:	f7ff fe83 	bl	80847f0 <_Z10readAlpha1v>
    float_offset = CO_zero;
 8084aea:	4b0e      	ldr	r3, [pc, #56]	; (8084b24 <_Z6readCOv+0x48>)
        CO_float = readAlpha2();
 8084aec:	6020      	str	r0, [r4, #0]
    float_offset = CO_zero;
 8084aee:	6818      	ldr	r0, [r3, #0]
 8084af0:	f009 fa06 	bl	808df00 <__aeabi_i2f>
    CO_float *= CO_slope;
 8084af4:	4b0c      	ldr	r3, [pc, #48]	; (8084b28 <_Z6readCOv+0x4c>)
    float_offset = CO_zero;
 8084af6:	4606      	mov	r6, r0
    CO_float *= CO_slope;
 8084af8:	6819      	ldr	r1, [r3, #0]
 8084afa:	6820      	ldr	r0, [r4, #0]
 8084afc:	f009 fa54 	bl	808dfa8 <__aeabi_fmul>
    float_offset /= 1000;
 8084b00:	490a      	ldr	r1, [pc, #40]	; (8084b2c <_Z6readCOv+0x50>)
    CO_float *= CO_slope;
 8084b02:	4605      	mov	r5, r0
    float_offset /= 1000;
 8084b04:	4630      	mov	r0, r6
 8084b06:	f009 fb03 	bl	808e110 <__aeabi_fdiv>
 8084b0a:	4601      	mov	r1, r0
    CO_float += float_offset;
 8084b0c:	4628      	mov	r0, r5
 8084b0e:	f009 f943 	bl	808dd98 <__addsf3>
 8084b12:	6020      	str	r0, [r4, #0]
}
 8084b14:	bd70      	pop	{r4, r5, r6, pc}
        CO_float = readAlpha2();
 8084b16:	f7fc ff9f 	bl	8081a58 <_Z10readAlpha2v>
 8084b1a:	e7e6      	b.n	8084aea <_Z6readCOv+0xe>
 8084b1c:	20000348 	.word	0x20000348
 8084b20:	20000340 	.word	0x20000340
 8084b24:	20000350 	.word	0x20000350
 8084b28:	20000344 	.word	0x20000344
 8084b2c:	447a0000 	.word	0x447a0000

08084b30 <_Z20readAlpha1Constantlyv>:
void readAlpha1Constantly(void){
 8084b30:	b538      	push	{r3, r4, r5, lr}
        CO_float = readCO();
 8084b32:	4c09      	ldr	r4, [pc, #36]	; (8084b58 <_Z20readAlpha1Constantlyv+0x28>)
        Serial.printf("CO: %1.3f ppm\n\r", CO_float);
 8084b34:	4d09      	ldr	r5, [pc, #36]	; (8084b5c <_Z20readAlpha1Constantlyv+0x2c>)
    while(!Serial.available()){
 8084b36:	f007 ff69 	bl	808ca0c <_Z16_fetch_usbserialv>
 8084b3a:	6803      	ldr	r3, [r0, #0]
 8084b3c:	691b      	ldr	r3, [r3, #16]
 8084b3e:	4798      	blx	r3
 8084b40:	b948      	cbnz	r0, 8084b56 <_Z20readAlpha1Constantlyv+0x26>
        CO_float = readCO();
 8084b42:	f7ff ffcb 	bl	8084adc <_Z6readCOv>
 8084b46:	6020      	str	r0, [r4, #0]
        Serial.printf("CO: %1.3f ppm\n\r", CO_float);
 8084b48:	f007 ff60 	bl	808ca0c <_Z16_fetch_usbserialv>
 8084b4c:	4629      	mov	r1, r5
 8084b4e:	6822      	ldr	r2, [r4, #0]
 8084b50:	f7ff fe38 	bl	80847c4 <_ZN5Print6printfIJfEEEjPKcDpT_>
    while(!Serial.available()){
 8084b54:	e7ef      	b.n	8084b36 <_Z20readAlpha1Constantlyv+0x6>
}
 8084b56:	bd38      	pop	{r3, r4, r5, pc}
 8084b58:	20000340 	.word	0x20000340
 8084b5c:	08092eb5 	.word	0x08092eb5

08084b60 <_ZN5Print6printfIJiEEEjPKcDpT_>:
    inline size_t printf(const char* format, Args... args)
 8084b60:	4613      	mov	r3, r2
        return this->printf_impl(false, format, args...);
 8084b62:	460a      	mov	r2, r1
 8084b64:	2100      	movs	r1, #0
 8084b66:	f006 bfa3 	b.w	808bab0 <_ZN5Print11printf_implEbPKcz>
	...

08084b6c <_Z26serialIncreaseInputCurrentv>:
void serialIncreaseInputCurrent(void){
 8084b6c:	b538      	push	{r3, r4, r5, lr}
    int inputCurrent = pmic.getInputCurrentLimit();
 8084b6e:	481d      	ldr	r0, [pc, #116]	; (8084be4 <_Z26serialIncreaseInputCurrentv+0x78>)
 8084b70:	f006 f8fa 	bl	808ad68 <_ZN4PMIC20getInputCurrentLimitEv>
 8084b74:	4605      	mov	r5, r0
    Serial.printf("Old input current limit: %d\n\r", inputCurrent);
 8084b76:	f007 ff49 	bl	808ca0c <_Z16_fetch_usbserialv>
 8084b7a:	462a      	mov	r2, r5
 8084b7c:	491a      	ldr	r1, [pc, #104]	; (8084be8 <_Z26serialIncreaseInputCurrentv+0x7c>)
 8084b7e:	f7ff ffef 	bl	8084b60 <_ZN5Print6printfIJiEEEjPKcDpT_>
    if(inputCurrent == 100){
 8084b82:	2d64      	cmp	r5, #100	; 0x64
 8084b84:	d01f      	beq.n	8084bc6 <_Z26serialIncreaseInputCurrentv+0x5a>
    }else if(inputCurrent == 150){
 8084b86:	2d96      	cmp	r5, #150	; 0x96
 8084b88:	d01f      	beq.n	8084bca <_Z26serialIncreaseInputCurrentv+0x5e>
    }else if(inputCurrent == 500){
 8084b8a:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 8084b8e:	d01f      	beq.n	8084bd0 <_Z26serialIncreaseInputCurrentv+0x64>
    }else if(inputCurrent == 900){
 8084b90:	f5b5 7f61 	cmp.w	r5, #900	; 0x384
 8084b94:	d01f      	beq.n	8084bd6 <_Z26serialIncreaseInputCurrentv+0x6a>
    }else if(inputCurrent == 1200){
 8084b96:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 8084b9a:	f240 54dc 	movw	r4, #1500	; 0x5dc
 8084b9e:	d007      	beq.n	8084bb0 <_Z26serialIncreaseInputCurrentv+0x44>
    }else if(inputCurrent == 1500){
 8084ba0:	42a5      	cmp	r5, r4
 8084ba2:	d01b      	beq.n	8084bdc <_Z26serialIncreaseInputCurrentv+0x70>
        inputCurrent = 3000;
 8084ba4:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8084ba8:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 8084bac:	bf18      	it	ne
 8084bae:	462c      	movne	r4, r5
    pmic.setInputCurrentLimit(inputCurrent);
 8084bb0:	b2a1      	uxth	r1, r4
 8084bb2:	480c      	ldr	r0, [pc, #48]	; (8084be4 <_Z26serialIncreaseInputCurrentv+0x78>)
 8084bb4:	f006 f919 	bl	808adea <_ZN4PMIC20setInputCurrentLimitEt>
    Serial.printf("New input current limit: %d\n\r", inputCurrent);
 8084bb8:	f007 ff28 	bl	808ca0c <_Z16_fetch_usbserialv>
 8084bbc:	4622      	mov	r2, r4
 8084bbe:	490b      	ldr	r1, [pc, #44]	; (8084bec <_Z26serialIncreaseInputCurrentv+0x80>)
 8084bc0:	f7ff ffce 	bl	8084b60 <_ZN5Print6printfIJiEEEjPKcDpT_>
}
 8084bc4:	bd38      	pop	{r3, r4, r5, pc}
        inputCurrent = 150;
 8084bc6:	2496      	movs	r4, #150	; 0x96
 8084bc8:	e7f2      	b.n	8084bb0 <_Z26serialIncreaseInputCurrentv+0x44>
        inputCurrent = 500;
 8084bca:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
 8084bce:	e7ef      	b.n	8084bb0 <_Z26serialIncreaseInputCurrentv+0x44>
        inputCurrent = 900;
 8084bd0:	f44f 7461 	mov.w	r4, #900	; 0x384
 8084bd4:	e7ec      	b.n	8084bb0 <_Z26serialIncreaseInputCurrentv+0x44>
        inputCurrent = 1200;
 8084bd6:	f44f 6496 	mov.w	r4, #1200	; 0x4b0
 8084bda:	e7e9      	b.n	8084bb0 <_Z26serialIncreaseInputCurrentv+0x44>
        inputCurrent = 2000;
 8084bdc:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
 8084be0:	e7e6      	b.n	8084bb0 <_Z26serialIncreaseInputCurrentv+0x44>
 8084be2:	bf00      	nop
 8084be4:	20000824 	.word	0x20000824
 8084be8:	08092ec5 	.word	0x08092ec5
 8084bec:	08092ee3 	.word	0x08092ee3

08084bf0 <_Z27serialIncreaseChargeCurrentv>:
void serialIncreaseChargeCurrent(void){
 8084bf0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    byte chargeCurrent = pmic.getChargeCurrent();
 8084bf2:	482d      	ldr	r0, [pc, #180]	; (8084ca8 <_Z27serialIncreaseChargeCurrentv+0xb8>)
 8084bf4:	f006 f8c4 	bl	808ad80 <_ZN4PMIC16getChargeCurrentEv>
        total_current += 2048;
 8084bf8:	f010 0f80 	tst.w	r0, #128	; 0x80
 8084bfc:	bf14      	ite	ne
 8084bfe:	f44f 6500 	movne.w	r5, #2048	; 0x800
 8084c02:	2500      	moveq	r5, #0
    byte chargeCurrent = pmic.getChargeCurrent();
 8084c04:	4604      	mov	r4, r0
    if(chargeCurrent & 0x40){
 8084c06:	0643      	lsls	r3, r0, #25
        total_current += 1024;
 8084c08:	bf48      	it	mi
 8084c0a:	f505 6580 	addmi.w	r5, r5, #1024	; 0x400
    if(chargeCurrent & 0x20){
 8084c0e:	0686      	lsls	r6, r0, #26
        total_current += 512;
 8084c10:	bf48      	it	mi
 8084c12:	f505 7500 	addmi.w	r5, r5, #512	; 0x200
    if(chargeCurrent & 0x10){
 8084c16:	06e0      	lsls	r0, r4, #27
        total_current += 256;
 8084c18:	bf48      	it	mi
 8084c1a:	f505 7580 	addmi.w	r5, r5, #256	; 0x100
    if(chargeCurrent & 0x08){
 8084c1e:	0721      	lsls	r1, r4, #28
        total_current += 128;
 8084c20:	bf48      	it	mi
 8084c22:	3580      	addmi	r5, #128	; 0x80
    if(chargeCurrent & 0x04){
 8084c24:	0762      	lsls	r2, r4, #29
        total_current += 64;
 8084c26:	bf48      	it	mi
 8084c28:	3540      	addmi	r5, #64	; 0x40
    Serial.printf("Increasing Charge current from %d mA to ", total_current);
 8084c2a:	f007 feef 	bl	808ca0c <_Z16_fetch_usbserialv>
 8084c2e:	462a      	mov	r2, r5
 8084c30:	491e      	ldr	r1, [pc, #120]	; (8084cac <_Z27serialIncreaseChargeCurrentv+0xbc>)
 8084c32:	f7ff ff95 	bl	8084b60 <_ZN5Print6printfIJiEEEjPKcDpT_>
    chargeCurrent += 4;
 8084c36:	1d20      	adds	r0, r4, #4
    if(chargeCurrent & 0x80){
 8084c38:	0603      	lsls	r3, r0, #24
    bool bit7 = 0;
 8084c3a:	bf56      	itet	pl
 8084c3c:	2100      	movpl	r1, #0
        total_current += 2048;
 8084c3e:	f44f 6500 	movmi.w	r5, #2048	; 0x800
    total_current = 0;
 8084c42:	460d      	movpl	r5, r1
    chargeCurrent += 4;
 8084c44:	b2c4      	uxtb	r4, r0
        bit7 = 1;
 8084c46:	bf48      	it	mi
 8084c48:	2101      	movmi	r1, #1
    if(chargeCurrent & 0x40){
 8084c4a:	f014 0240 	ands.w	r2, r4, #64	; 0x40
        total_current += 1024;
 8084c4e:	bf1c      	itt	ne
 8084c50:	f505 6580 	addne.w	r5, r5, #1024	; 0x400
        bit6 = 1;
 8084c54:	2201      	movne	r2, #1
    if(chargeCurrent & 0x20){
 8084c56:	f014 0320 	ands.w	r3, r4, #32
        bit5 = 1;
 8084c5a:	bf1c      	itt	ne
 8084c5c:	2301      	movne	r3, #1
        total_current += 512;
 8084c5e:	f505 7500 	addne.w	r5, r5, #512	; 0x200
    if(chargeCurrent & 0x10){
 8084c62:	f014 0010 	ands.w	r0, r4, #16
        total_current += 256;
 8084c66:	bf1c      	itt	ne
 8084c68:	f505 7580 	addne.w	r5, r5, #256	; 0x100
        bit4 = 1;
 8084c6c:	2001      	movne	r0, #1
    if(chargeCurrent & 0x08){
 8084c6e:	f014 0608 	ands.w	r6, r4, #8
        total_current += 128;
 8084c72:	bf1c      	itt	ne
 8084c74:	3580      	addne	r5, #128	; 0x80
        bit3 = 1;
 8084c76:	2601      	movne	r6, #1
    if(chargeCurrent & 0x04){
 8084c78:	f014 0404 	ands.w	r4, r4, #4
        bit2 = 1;
 8084c7c:	bf18      	it	ne
 8084c7e:	2401      	movne	r4, #1
    pmic.setChargeCurrent(bit7, bit6, bit5, bit4, bit3, bit2);
 8084c80:	9000      	str	r0, [sp, #0]
 8084c82:	e9cd 6401 	strd	r6, r4, [sp, #4]
 8084c86:	4808      	ldr	r0, [pc, #32]	; (8084ca8 <_Z27serialIncreaseChargeCurrentv+0xb8>)
        total_current += 64;
 8084c88:	bf18      	it	ne
 8084c8a:	3540      	addne	r5, #64	; 0x40
    pmic.setChargeCurrent(bit7, bit6, bit5, bit4, bit3, bit2);
 8084c8c:	f006 f90b 	bl	808aea6 <_ZN4PMIC16setChargeCurrentEbbbbbb>
    chargeCurrent = pmic.getChargeCurrent();
 8084c90:	4805      	ldr	r0, [pc, #20]	; (8084ca8 <_Z27serialIncreaseChargeCurrentv+0xb8>)
 8084c92:	f006 f875 	bl	808ad80 <_ZN4PMIC16getChargeCurrentEv>
    Serial.printf("new charge current of %d mA\n\r", total_current);
 8084c96:	f007 feb9 	bl	808ca0c <_Z16_fetch_usbserialv>
 8084c9a:	462a      	mov	r2, r5
 8084c9c:	4904      	ldr	r1, [pc, #16]	; (8084cb0 <_Z27serialIncreaseChargeCurrentv+0xc0>)
 8084c9e:	f7ff ff5f 	bl	8084b60 <_ZN5Print6printfIJiEEEjPKcDpT_>
}
 8084ca2:	b004      	add	sp, #16
 8084ca4:	bd70      	pop	{r4, r5, r6, pc}
 8084ca6:	bf00      	nop
 8084ca8:	20000824 	.word	0x20000824
 8084cac:	08092f01 	.word	0x08092f01
 8084cb0:	08092f2a 	.word	0x08092f2a

08084cb4 <_ZN5Print5printIiLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
 8084cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8084cb8:	4607      	mov	r7, r0
 8084cba:	460c      	mov	r4, r1
{
    if (base == 0) {
 8084cbc:	4615      	mov	r5, r2
 8084cbe:	b92a      	cbnz	r2, 8084ccc <_ZN5Print5printIiLi0EEEjT_i+0x18>
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
    }
}
 8084cc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return write(n);
 8084cc4:	6803      	ldr	r3, [r0, #0]
 8084cc6:	b2c9      	uxtb	r1, r1
 8084cc8:	689b      	ldr	r3, [r3, #8]
 8084cca:	4718      	bx	r3
        if (n < 0 && base == 10) {
 8084ccc:	2900      	cmp	r1, #0
 8084cce:	da0d      	bge.n	8084cec <_ZN5Print5printIiLi0EEEjT_i+0x38>
 8084cd0:	2a0a      	cmp	r2, #10
 8084cd2:	d10b      	bne.n	8084cec <_ZN5Print5printIiLi0EEEjT_i+0x38>
            t = print('-');
 8084cd4:	212d      	movs	r1, #45	; 0x2d
 8084cd6:	f006 fdcf 	bl	808b878 <_ZN5Print5printEc>
 8084cda:	4606      	mov	r6, r0
            val = -n;
 8084cdc:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
 8084cde:	4638      	mov	r0, r7
 8084ce0:	b2ea      	uxtb	r2, r5
 8084ce2:	f006 fdec 	bl	808b8be <_ZN5Print11printNumberEmh>
}
 8084ce6:	4430      	add	r0, r6
 8084ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            val = n;
 8084cec:	4621      	mov	r1, r4
        size_t t = 0;
 8084cee:	2600      	movs	r6, #0
 8084cf0:	e7f5      	b.n	8084cde <_ZN5Print5printIiLi0EEEjT_i+0x2a>

08084cf2 <_ZN5Print7printlnIiLi0EEEjT_i>:
    size_t println(T b, int base = DEC) {
 8084cf2:	b538      	push	{r3, r4, r5, lr}
 8084cf4:	4605      	mov	r5, r0
        size_t n = print(b, base);
 8084cf6:	f7ff ffdd 	bl	8084cb4 <_ZN5Print5printIiLi0EEEjT_i>
 8084cfa:	4604      	mov	r4, r0
        n += println();
 8084cfc:	4628      	mov	r0, r5
 8084cfe:	f006 fdbe 	bl	808b87e <_ZN5Print7printlnEv>
    }
 8084d02:	4420      	add	r0, r4
 8084d04:	bd38      	pop	{r3, r4, r5, pc}
	...

08084d08 <_Z15getEspOzoneDatav>:
float getEspOzoneData(void){
 8084d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084d0c:	b0ab      	sub	sp, #172	; 0xac
    String getOzoneData = "Z&";
 8084d0e:	498a      	ldr	r1, [pc, #552]	; (8084f38 <_Z15getEspOzoneDatav+0x230>)
 8084d10:	a802      	add	r0, sp, #8
 8084d12:	f006 fbaf 	bl	808b474 <_ZN6StringC1EPKc>
    if(debugging_enabled){
 8084d16:	4c89      	ldr	r4, [pc, #548]	; (8084f3c <_Z15getEspOzoneDatav+0x234>)
    String recievedData = " ";
 8084d18:	4989      	ldr	r1, [pc, #548]	; (8084f40 <_Z15getEspOzoneDatav+0x238>)
 8084d1a:	a806      	add	r0, sp, #24
 8084d1c:	f006 fbaa 	bl	808b474 <_ZN6StringC1EPKc>
    Serial1.setTimeout(3000);
 8084d20:	f007 ffbe 	bl	808cca0 <_Z22__fetch_global_Serial1v>
 8084d24:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8084d28:	f006 ff11 	bl	808bb4e <_ZN6Stream10setTimeoutEm>
    if(debugging_enabled){
 8084d2c:	6823      	ldr	r3, [r4, #0]
 8084d2e:	b173      	cbz	r3, 8084d4e <_Z15getEspOzoneDatav+0x46>
        Serial.println("Getting ozone data from esp");
 8084d30:	f007 fe6c 	bl	808ca0c <_Z16_fetch_usbserialv>
 8084d34:	4983      	ldr	r1, [pc, #524]	; (8084f44 <_Z15getEspOzoneDatav+0x23c>)
 8084d36:	f006 fdae 	bl	808b896 <_ZN5Print7printlnEPKc>
        writeLogFile("Getting ozone data from esp");
 8084d3a:	4982      	ldr	r1, [pc, #520]	; (8084f44 <_Z15getEspOzoneDatav+0x23c>)
 8084d3c:	a80e      	add	r0, sp, #56	; 0x38
 8084d3e:	f006 fb99 	bl	808b474 <_ZN6StringC1EPKc>
 8084d42:	a80e      	add	r0, sp, #56	; 0x38
 8084d44:	f7fc ffcc 	bl	8081ce0 <_Z12writeLogFile6String>
 8084d48:	a80e      	add	r0, sp, #56	; 0x38
 8084d4a:	f006 fb49 	bl	808b3e0 <_ZN6StringD1Ev>
      if(counterIndex > MAX_COUNTER_INDEX){
 8084d4e:	f20f 19e0 	addw	r9, pc, #480	; 0x1e0
 8084d52:	e9d9 8900 	ldrd	r8, r9, [r9]
    Serial1.print(getOzoneData);
 8084d56:	f007 ffa3 	bl	808cca0 <_Z22__fetch_global_Serial1v>
 8084d5a:	9902      	ldr	r1, [sp, #8]
 8084d5c:	f006 fd88 	bl	808b870 <_ZN5Print5printEPKc>
    double counterIndex = 0;
 8084d60:	2600      	movs	r6, #0
 8084d62:	2700      	movs	r7, #0
    bool timeOut = false;
 8084d64:	2500      	movs	r5, #0
      counterIndex++;
 8084d66:	f04f 0a00 	mov.w	sl, #0
 8084d6a:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 8084f64 <_Z15getEspOzoneDatav+0x25c>
    while(!Serial1.available() && timeOut == false){
 8084d6e:	f007 ff97 	bl	808cca0 <_Z22__fetch_global_Serial1v>
 8084d72:	6803      	ldr	r3, [r0, #0]
 8084d74:	691b      	ldr	r3, [r3, #16]
 8084d76:	4798      	blx	r3
 8084d78:	b9d0      	cbnz	r0, 8084db0 <_Z15getEspOzoneDatav+0xa8>
 8084d7a:	b9cd      	cbnz	r5, 8084db0 <_Z15getEspOzoneDatav+0xa8>
      counterIndex++;
 8084d7c:	4652      	mov	r2, sl
 8084d7e:	465b      	mov	r3, fp
 8084d80:	4630      	mov	r0, r6
 8084d82:	4639      	mov	r1, r7
 8084d84:	f008 fb04 	bl	808d390 <__adddf3>
      if(counterIndex > MAX_COUNTER_INDEX){
 8084d88:	4642      	mov	r2, r8
 8084d8a:	464b      	mov	r3, r9
      counterIndex++;
 8084d8c:	4606      	mov	r6, r0
 8084d8e:	460f      	mov	r7, r1
      if(counterIndex > MAX_COUNTER_INDEX){
 8084d90:	f008 ff44 	bl	808dc1c <__aeabi_dcmpgt>
 8084d94:	2800      	cmp	r0, #0
 8084d96:	d0ea      	beq.n	8084d6e <_Z15getEspOzoneDatav+0x66>
        if(debugging_enabled){
 8084d98:	6823      	ldr	r3, [r4, #0]
 8084d9a:	b13b      	cbz	r3, 8084dac <_Z15getEspOzoneDatav+0xa4>
          Serial.printf("Unable to get ozone data from ESP, counter index: %1.1f\n\r", counterIndex);
 8084d9c:	f007 fe36 	bl	808ca0c <_Z16_fetch_usbserialv>
        return this->printf_impl(false, format, args...);
 8084da0:	4629      	mov	r1, r5
 8084da2:	e9cd 6700 	strd	r6, r7, [sp]
 8084da6:	4a68      	ldr	r2, [pc, #416]	; (8084f48 <_Z15getEspOzoneDatav+0x240>)
 8084da8:	f006 fe82 	bl	808bab0 <_ZN5Print11printf_implEbPKcz>
        timeOut = true;
 8084dac:	2501      	movs	r5, #1
 8084dae:	e7de      	b.n	8084d6e <_Z15getEspOzoneDatav+0x66>
    delay(10);
 8084db0:	200a      	movs	r0, #10
 8084db2:	f007 f939 	bl	808c028 <delay>
    recievedData = Serial1.readString();
 8084db6:	f007 ff73 	bl	808cca0 <_Z22__fetch_global_Serial1v>
 8084dba:	4601      	mov	r1, r0
 8084dbc:	a80e      	add	r0, sp, #56	; 0x38
 8084dbe:	f006 ff1d 	bl	808bbfc <_ZN6Stream10readStringEv>
 8084dc2:	a90e      	add	r1, sp, #56	; 0x38
 8084dc4:	a806      	add	r0, sp, #24
 8084dc6:	f006 fb9f 	bl	808b508 <_ZN6StringaSEOS_>
 8084dca:	a80e      	add	r0, sp, #56	; 0x38
 8084dcc:	f006 fb08 	bl	808b3e0 <_ZN6StringD1Ev>
    if(debugging_enabled)
 8084dd0:	6823      	ldr	r3, [r4, #0]
 8084dd2:	b19b      	cbz	r3, 8084dfc <_Z15getEspOzoneDatav+0xf4>
        Serial.print("RECIEVED DATA FROM ESP: ");
 8084dd4:	f007 fe1a 	bl	808ca0c <_Z16_fetch_usbserialv>
 8084dd8:	495c      	ldr	r1, [pc, #368]	; (8084f4c <_Z15getEspOzoneDatav+0x244>)
 8084dda:	f006 fd49 	bl	808b870 <_ZN5Print5printEPKc>
        Serial.println(recievedData);
 8084dde:	f007 fe15 	bl	808ca0c <_Z16_fetch_usbserialv>
 8084de2:	9906      	ldr	r1, [sp, #24]
 8084de4:	f006 fd57 	bl	808b896 <_ZN5Print7printlnEPKc>
        writeLogFile("Recieved data from ESP");
 8084de8:	4959      	ldr	r1, [pc, #356]	; (8084f50 <_Z15getEspOzoneDatav+0x248>)
 8084dea:	a80e      	add	r0, sp, #56	; 0x38
 8084dec:	f006 fb42 	bl	808b474 <_ZN6StringC1EPKc>
 8084df0:	a80e      	add	r0, sp, #56	; 0x38
 8084df2:	f7fc ff75 	bl	8081ce0 <_Z12writeLogFile6String>
 8084df6:	a80e      	add	r0, sp, #56	; 0x38
 8084df8:	f006 faf2 	bl	808b3e0 <_ZN6StringD1Ev>
    bool timeOut = false;
 8084dfc:	2500      	movs	r5, #0
    String stringArray[NUMBER_OF_FEILDS];
 8084dfe:	4e55      	ldr	r6, [pc, #340]	; (8084f54 <_Z15getEspOzoneDatav+0x24c>)
 8084e00:	ab0e      	add	r3, sp, #56	; 0x38
 8084e02:	1958      	adds	r0, r3, r5
 8084e04:	4631      	mov	r1, r6
 8084e06:	3510      	adds	r5, #16
 8084e08:	f006 fb34 	bl	808b474 <_ZN6StringC1EPKc>
 8084e0c:	2d70      	cmp	r5, #112	; 0x70
 8084e0e:	d1f7      	bne.n	8084e00 <_Z15getEspOzoneDatav+0xf8>
    int from_index = 0;
 8084e10:	2600      	movs	r6, #0
    int comma_count = 0;
 8084e12:	4635      	mov	r5, r6
          Serial.print("comma index: ");
 8084e14:	f8df 9150 	ldr.w	r9, [pc, #336]	; 8084f68 <_Z15getEspOzoneDatav+0x260>
                Serial.printf("String[%d]:", comma_count);
 8084e18:	f8df a140 	ldr.w	sl, [pc, #320]	; 8084f5c <_Z15getEspOzoneDatav+0x254>
        index_of_comma = recievedData.indexOf(',', from_index);
 8084e1c:	4632      	mov	r2, r6
 8084e1e:	212c      	movs	r1, #44	; 0x2c
 8084e20:	a806      	add	r0, sp, #24
 8084e22:	f006 fca7 	bl	808b774 <_ZNK6String7indexOfEcj>
        if(debugging_enabled){
 8084e26:	6823      	ldr	r3, [r4, #0]
        index_of_comma = recievedData.indexOf(',', from_index);
 8084e28:	4607      	mov	r7, r0
        if(debugging_enabled){
 8084e2a:	b153      	cbz	r3, 8084e42 <_Z15getEspOzoneDatav+0x13a>
          Serial.print("comma index: ");
 8084e2c:	f007 fdee 	bl	808ca0c <_Z16_fetch_usbserialv>
 8084e30:	4649      	mov	r1, r9
 8084e32:	f006 fd1d 	bl	808b870 <_ZN5Print5printEPKc>
          Serial.println(index_of_comma);
 8084e36:	f007 fde9 	bl	808ca0c <_Z16_fetch_usbserialv>
 8084e3a:	220a      	movs	r2, #10
 8084e3c:	4639      	mov	r1, r7
 8084e3e:	f7ff ff58 	bl	8084cf2 <_ZN5Print7printlnIiLi0EEEjT_i>
        if(index_of_comma > 0){
 8084e42:	2f00      	cmp	r7, #0
 8084e44:	dd41      	ble.n	8084eca <_Z15getEspOzoneDatav+0x1c2>
            stringArray[comma_count] = recievedData.substring(from_index, index_of_comma);
 8084e46:	4632      	mov	r2, r6
 8084e48:	463b      	mov	r3, r7
 8084e4a:	a906      	add	r1, sp, #24
 8084e4c:	a80a      	add	r0, sp, #40	; 0x28
 8084e4e:	f006 fc9f 	bl	808b790 <_ZNK6String9substringEjj>
 8084e52:	ea4f 1805 	mov.w	r8, r5, lsl #4
 8084e56:	ab0e      	add	r3, sp, #56	; 0x38
 8084e58:	eb03 0008 	add.w	r0, r3, r8
 8084e5c:	a90a      	add	r1, sp, #40	; 0x28
 8084e5e:	f006 fb53 	bl	808b508 <_ZN6StringaSEOS_>
 8084e62:	a80a      	add	r0, sp, #40	; 0x28
 8084e64:	f006 fabc 	bl	808b3e0 <_ZN6StringD1Ev>
            if(debugging_enabled){
 8084e68:	6823      	ldr	r3, [r4, #0]
 8084e6a:	b163      	cbz	r3, 8084e86 <_Z15getEspOzoneDatav+0x17e>
                Serial.printf("String[%d]:", comma_count);
 8084e6c:	f007 fdce 	bl	808ca0c <_Z16_fetch_usbserialv>
 8084e70:	4651      	mov	r1, sl
 8084e72:	462a      	mov	r2, r5
 8084e74:	f7ff fe74 	bl	8084b60 <_ZN5Print6printfIJiEEEjPKcDpT_>
                Serial.println(stringArray[comma_count]);
 8084e78:	f007 fdc8 	bl	808ca0c <_Z16_fetch_usbserialv>
 8084e7c:	ab0e      	add	r3, sp, #56	; 0x38
 8084e7e:	f853 1008 	ldr.w	r1, [r3, r8]
 8084e82:	f006 fd08 	bl	808b896 <_ZN5Print7printlnEPKc>
            comma_count++;
 8084e86:	3501      	adds	r5, #1
    while(still_searching_for_commas && comma_count < NUMBER_OF_FEILDS){
 8084e88:	2d07      	cmp	r5, #7
            from_index += 1;
 8084e8a:	f107 0601 	add.w	r6, r7, #1
    while(still_searching_for_commas && comma_count < NUMBER_OF_FEILDS){
 8084e8e:	d1c5      	bne.n	8084e1c <_Z15getEspOzoneDatav+0x114>
        ozone_value = stringArray[1].toFloat();
 8084e90:	a812      	add	r0, sp, #72	; 0x48
 8084e92:	f006 fca4 	bl	808b7de <_ZNK6String7toFloatEv>
        if(debugging_enabled){
 8084e96:	6823      	ldr	r3, [r4, #0]
        ozone_value = stringArray[1].toFloat();
 8084e98:	4605      	mov	r5, r0
        if(debugging_enabled){
 8084e9a:	b123      	cbz	r3, 8084ea6 <_Z15getEspOzoneDatav+0x19e>
            Serial.println("using string array index 1 due to logging");
 8084e9c:	f007 fdb6 	bl	808ca0c <_Z16_fetch_usbserialv>
 8084ea0:	492d      	ldr	r1, [pc, #180]	; (8084f58 <_Z15getEspOzoneDatav+0x250>)
            Serial.println("using string array index 0, not logging");
 8084ea2:	f006 fcf8 	bl	808b896 <_ZN5Print7printlnEPKc>
    float ozone_value = 0.0;
 8084ea6:	2406      	movs	r4, #6
    String stringArray[NUMBER_OF_FEILDS];
 8084ea8:	ab0e      	add	r3, sp, #56	; 0x38
 8084eaa:	eb03 1004 	add.w	r0, r3, r4, lsl #4
 8084eae:	f006 fa97 	bl	808b3e0 <_ZN6StringD1Ev>
 8084eb2:	3c01      	subs	r4, #1
 8084eb4:	d2f8      	bcs.n	8084ea8 <_Z15getEspOzoneDatav+0x1a0>
    String recievedData = " ";
 8084eb6:	a806      	add	r0, sp, #24
 8084eb8:	f006 fa92 	bl	808b3e0 <_ZN6StringD1Ev>
    String getOzoneData = "Z&";
 8084ebc:	a802      	add	r0, sp, #8
 8084ebe:	f006 fa8f 	bl	808b3e0 <_ZN6StringD1Ev>
}
 8084ec2:	4628      	mov	r0, r5
 8084ec4:	b02b      	add	sp, #172	; 0xac
 8084ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            int index_of_cr = recievedData.indexOf('\r', from_index);
 8084eca:	4632      	mov	r2, r6
 8084ecc:	210d      	movs	r1, #13
 8084ece:	a806      	add	r0, sp, #24
 8084ed0:	f006 fc50 	bl	808b774 <_ZNK6String7indexOfEcj>
            if(index_of_cr > 0){
 8084ed4:	1e03      	subs	r3, r0, #0
 8084ed6:	dd1c      	ble.n	8084f12 <_Z15getEspOzoneDatav+0x20a>
                stringArray[comma_count] = recievedData.substring(from_index, index_of_cr);
 8084ed8:	4632      	mov	r2, r6
 8084eda:	a906      	add	r1, sp, #24
 8084edc:	a80a      	add	r0, sp, #40	; 0x28
 8084ede:	f006 fc57 	bl	808b790 <_ZNK6String9substringEjj>
 8084ee2:	ab0e      	add	r3, sp, #56	; 0x38
 8084ee4:	eb03 1005 	add.w	r0, r3, r5, lsl #4
 8084ee8:	a90a      	add	r1, sp, #40	; 0x28
 8084eea:	f006 fb0d 	bl	808b508 <_ZN6StringaSEOS_>
 8084eee:	a80a      	add	r0, sp, #40	; 0x28
 8084ef0:	f006 fa76 	bl	808b3e0 <_ZN6StringD1Ev>
                if(debugging_enabled){
 8084ef4:	6823      	ldr	r3, [r4, #0]
                stringArray[comma_count] = recievedData.substring(from_index, index_of_cr);
 8084ef6:	012f      	lsls	r7, r5, #4
                if(debugging_enabled){
 8084ef8:	b15b      	cbz	r3, 8084f12 <_Z15getEspOzoneDatav+0x20a>
                    Serial.printf("String[%d]:", comma_count);
 8084efa:	f007 fd87 	bl	808ca0c <_Z16_fetch_usbserialv>
 8084efe:	4917      	ldr	r1, [pc, #92]	; (8084f5c <_Z15getEspOzoneDatav+0x254>)
 8084f00:	462a      	mov	r2, r5
 8084f02:	f7ff fe2d 	bl	8084b60 <_ZN5Print6printfIJiEEEjPKcDpT_>
                    Serial.println(stringArray[comma_count]);
 8084f06:	f007 fd81 	bl	808ca0c <_Z16_fetch_usbserialv>
 8084f0a:	ab0e      	add	r3, sp, #56	; 0x38
 8084f0c:	59d9      	ldr	r1, [r3, r7]
 8084f0e:	f006 fcc2 	bl	808b896 <_ZN5Print7printlnEPKc>
    }else if(comma_count == (NUMBER_OF_FIELDS_LOGGING - 1)){
 8084f12:	2d06      	cmp	r5, #6
 8084f14:	d001      	beq.n	8084f1a <_Z15getEspOzoneDatav+0x212>
    float ozone_value = 0.0;
 8084f16:	2500      	movs	r5, #0
 8084f18:	e7c5      	b.n	8084ea6 <_Z15getEspOzoneDatav+0x19e>
        ozone_value = stringArray[0].toFloat();
 8084f1a:	a80e      	add	r0, sp, #56	; 0x38
 8084f1c:	f006 fc5f 	bl	808b7de <_ZNK6String7toFloatEv>
        if(debugging_enabled){
 8084f20:	6823      	ldr	r3, [r4, #0]
        ozone_value = stringArray[0].toFloat();
 8084f22:	4605      	mov	r5, r0
        if(debugging_enabled){
 8084f24:	2b00      	cmp	r3, #0
 8084f26:	d0be      	beq.n	8084ea6 <_Z15getEspOzoneDatav+0x19e>
            Serial.println("using string array index 0, not logging");
 8084f28:	f007 fd70 	bl	808ca0c <_Z16_fetch_usbserialv>
 8084f2c:	490c      	ldr	r1, [pc, #48]	; (8084f60 <_Z15getEspOzoneDatav+0x258>)
 8084f2e:	e7b8      	b.n	8084ea2 <_Z15getEspOzoneDatav+0x19a>
 8084f30:	00000000 	.word	0x00000000
 8084f34:	40cd4c00 	.word	0x40cd4c00
 8084f38:	08092f48 	.word	0x08092f48
 8084f3c:	20000690 	.word	0x20000690
 8084f40:	08093c34 	.word	0x08093c34
 8084f44:	08092f4b 	.word	0x08092f4b
 8084f48:	08092f67 	.word	0x08092f67
 8084f4c:	08092fa1 	.word	0x08092fa1
 8084f50:	08092fba 	.word	0x08092fba
 8084f54:	080942e2 	.word	0x080942e2
 8084f58:	08092feb 	.word	0x08092feb
 8084f5c:	08092fdf 	.word	0x08092fdf
 8084f60:	08093015 	.word	0x08093015
 8084f64:	3ff00000 	.word	0x3ff00000
 8084f68:	08092fd1 	.word	0x08092fd1
 8084f6c:	00000000 	.word	0x00000000

08084f70 <_Z9readOzonev>:
void readOzone(void){
 8084f70:	b538      	push	{r3, r4, r5, lr}
    if(ozone_analog_enabled){
 8084f72:	4b21      	ldr	r3, [pc, #132]	; (8084ff8 <_Z9readOzonev+0x88>)
 8084f74:	4d21      	ldr	r5, [pc, #132]	; (8084ffc <_Z9readOzonev+0x8c>)
 8084f76:	681b      	ldr	r3, [r3, #0]
 8084f78:	b38b      	cbz	r3, 8084fde <_Z9readOzonev+0x6e>
        tempValue = analogRead(A0);  // read the analogPin for ozone voltage
 8084f7a:	200a      	movs	r0, #10
 8084f7c:	f008 f937 	bl	808d1ee <analogRead>
        if(debugging_enabled){
 8084f80:	4b1f      	ldr	r3, [pc, #124]	; (8085000 <_Z9readOzonev+0x90>)
        tempValue = analogRead(A0);  // read the analogPin for ozone voltage
 8084f82:	4604      	mov	r4, r0
        if(debugging_enabled){
 8084f84:	681b      	ldr	r3, [r3, #0]
 8084f86:	b153      	cbz	r3, 8084f9e <_Z9readOzonev+0x2e>
            Serial.print("Ozone Raw analog in:");
 8084f88:	f007 fd40 	bl	808ca0c <_Z16_fetch_usbserialv>
 8084f8c:	491d      	ldr	r1, [pc, #116]	; (8085004 <_Z9readOzonev+0x94>)
 8084f8e:	f006 fc6f 	bl	808b870 <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 8084f92:	f007 fd3b 	bl	808ca0c <_Z16_fetch_usbserialv>
 8084f96:	220a      	movs	r2, #10
 8084f98:	4621      	mov	r1, r4
 8084f9a:	f7ff feaa 	bl	8084cf2 <_ZN5Print7printlnIiLi0EEEjT_i>
        O3_float = tempValue;
 8084f9e:	4620      	mov	r0, r4
 8084fa0:	f008 ffae 	bl	808df00 <__aeabi_i2f>
        O3_float *= VOLTS_PER_UNIT;           //convert digital reading to voltage
 8084fa4:	f008 fb52 	bl	808d64c <__aeabi_f2d>
 8084fa8:	a30f      	add	r3, pc, #60	; (adr r3, 8084fe8 <_Z9readOzonev+0x78>)
 8084faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084fae:	f008 fba5 	bl	808d6fc <__aeabi_dmul>
 8084fb2:	f008 fe9b 	bl	808dcec <__aeabi_d2f>
        O3_float /= VOLTS_PER_PPB;            //convert voltage to ppb of ozone
 8084fb6:	f008 fb49 	bl	808d64c <__aeabi_f2d>
 8084fba:	a30d      	add	r3, pc, #52	; (adr r3, 8084ff0 <_Z9readOzonev+0x80>)
 8084fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084fc0:	f008 fcc6 	bl	808d950 <__aeabi_ddiv>
 8084fc4:	f008 fe92 	bl	808dcec <__aeabi_d2f>
        O3_float += ozone_offset;
 8084fc8:	4b0f      	ldr	r3, [pc, #60]	; (8085008 <_Z9readOzonev+0x98>)
        O3_float /= VOLTS_PER_PPB;            //convert voltage to ppb of ozone
 8084fca:	4604      	mov	r4, r0
        O3_float += ozone_offset;
 8084fcc:	6818      	ldr	r0, [r3, #0]
 8084fce:	f008 ff97 	bl	808df00 <__aeabi_i2f>
 8084fd2:	4601      	mov	r1, r0
 8084fd4:	4620      	mov	r0, r4
 8084fd6:	f008 fedf 	bl	808dd98 <__addsf3>
        O3_float = getEspOzoneData();
 8084fda:	6028      	str	r0, [r5, #0]
}
 8084fdc:	bd38      	pop	{r3, r4, r5, pc}
        O3_float = getEspOzoneData();
 8084fde:	f7ff fe93 	bl	8084d08 <_Z15getEspOzoneDatav>
 8084fe2:	e7fa      	b.n	8084fda <_Z9readOzonev+0x6a>
 8084fe4:	f3af 8000 	nop.w
 8084fe8:	eb1c432d 	.word	0xeb1c432d
 8084fec:	3f4a36e2 	.word	0x3f4a36e2
 8084ff0:	9999999a 	.word	0x9999999a
 8084ff4:	3f899999 	.word	0x3f899999
 8084ff8:	20000804 	.word	0x20000804
 8084ffc:	20000354 	.word	0x20000354
 8085000:	20000690 	.word	0x20000690
 8085004:	0809303d 	.word	0x0809303d
 8085008:	2000080c 	.word	0x2000080c

0808500c <_Z17serialGetDeviceIdv>:
void serialGetDeviceId(void){
 808500c:	b530      	push	{r4, r5, lr}
 808500e:	b089      	sub	sp, #36	; 0x24
    Serial.println();
 8085010:	f007 fcfc 	bl	808ca0c <_Z16_fetch_usbserialv>
    Serial.println(DEVICE_id);
 8085014:	4d35      	ldr	r5, [pc, #212]	; (80850ec <_Z17serialGetDeviceIdv+0xe0>)
    Serial.println();
 8085016:	f006 fc32 	bl	808b87e <_ZN5Print7printlnEv>
    Serial.print("Current Device ID:");
 808501a:	f007 fcf7 	bl	808ca0c <_Z16_fetch_usbserialv>
 808501e:	4934      	ldr	r1, [pc, #208]	; (80850f0 <_Z17serialGetDeviceIdv+0xe4>)
 8085020:	f006 fc26 	bl	808b870 <_ZN5Print5printEPKc>
    Serial.println(DEVICE_id);
 8085024:	f007 fcf2 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085028:	220a      	movs	r2, #10
 808502a:	6829      	ldr	r1, [r5, #0]
 808502c:	f7ff fe61 	bl	8084cf2 <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.println("Please enter password in order to change the ID");
 8085030:	f007 fcec 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085034:	492f      	ldr	r1, [pc, #188]	; (80850f4 <_Z17serialGetDeviceIdv+0xe8>)
 8085036:	f006 fc2e 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 808503a:	f007 fce7 	bl	808ca0c <_Z16_fetch_usbserialv>
 808503e:	f24c 3150 	movw	r1, #50000	; 0xc350
 8085042:	f006 fd84 	bl	808bb4e <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8085046:	f007 fce1 	bl	808ca0c <_Z16_fetch_usbserialv>
 808504a:	220d      	movs	r2, #13
 808504c:	4601      	mov	r1, r0
 808504e:	4668      	mov	r0, sp
 8085050:	f006 fde8 	bl	808bc24 <_ZN6Stream15readStringUntilEc>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8085054:	4668      	mov	r0, sp
 8085056:	4928      	ldr	r1, [pc, #160]	; (80850f8 <_Z17serialGetDeviceIdv+0xec>)
 8085058:	f006 fb50 	bl	808b6fc <_ZNK6String6equalsEPKc>
    if(tempString == "bould"){
 808505c:	2800      	cmp	r0, #0
 808505e:	d03e      	beq.n	80850de <_Z17serialGetDeviceIdv+0xd2>
        Serial.println("Password correct!");
 8085060:	f007 fcd4 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085064:	4925      	ldr	r1, [pc, #148]	; (80850fc <_Z17serialGetDeviceIdv+0xf0>)
 8085066:	f006 fc16 	bl	808b896 <_ZN5Print7printlnEPKc>
        Serial.println("Enter new Device ID:");
 808506a:	f007 fccf 	bl	808ca0c <_Z16_fetch_usbserialv>
 808506e:	4924      	ldr	r1, [pc, #144]	; (8085100 <_Z17serialGetDeviceIdv+0xf4>)
 8085070:	f006 fc11 	bl	808b896 <_ZN5Print7printlnEPKc>
        String tempString = Serial.readStringUntil('\r');
 8085074:	f007 fcca 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085078:	220d      	movs	r2, #13
 808507a:	4601      	mov	r1, r0
 808507c:	a804      	add	r0, sp, #16
 808507e:	f006 fdd1 	bl	808bc24 <_ZN6Stream15readStringUntilEc>
        int tempValue = tempString.toInt();
 8085082:	a804      	add	r0, sp, #16
 8085084:	f006 fba6 	bl	808b7d4 <_ZNK6String5toIntEv>
 8085088:	4604      	mov	r4, r0
        Serial.println("");
 808508a:	f007 fcbf 	bl	808ca0c <_Z16_fetch_usbserialv>
 808508e:	491d      	ldr	r1, [pc, #116]	; (8085104 <_Z17serialGetDeviceIdv+0xf8>)
 8085090:	f006 fc01 	bl	808b896 <_ZN5Print7printlnEPKc>
        if(tempValue > MIN_DEVICE_ID_NUMBER && tempValue < MAX_DEVICE_ID_NUMBER){
 8085094:	f242 730c 	movw	r3, #9996	; 0x270c
 8085098:	1ea2      	subs	r2, r4, #2
 808509a:	429a      	cmp	r2, r3
 808509c:	d819      	bhi.n	80850d2 <_Z17serialGetDeviceIdv+0xc6>
            Serial.print("\n\rNew Device ID:");
 808509e:	f007 fcb5 	bl	808ca0c <_Z16_fetch_usbserialv>
 80850a2:	4919      	ldr	r1, [pc, #100]	; (8085108 <_Z17serialGetDeviceIdv+0xfc>)
 80850a4:	f006 fbe4 	bl	808b870 <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 80850a8:	f007 fcb0 	bl	808ca0c <_Z16_fetch_usbserialv>
 80850ac:	4621      	mov	r1, r4
 80850ae:	220a      	movs	r2, #10
 80850b0:	f7ff fe1f 	bl	8084cf2 <_ZN5Print7printlnIiLi0EEEjT_i>
            DEVICE_id = tempValue;
 80850b4:	602c      	str	r4, [r5, #0]
            EEPROM.put(DEVICE_ID_MEM_ADDRESS, DEVICE_id);
 80850b6:	f008 f8b1 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 80850ba:	4629      	mov	r1, r5
 80850bc:	2000      	movs	r0, #0
 80850be:	f7fb fe2e 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
        String tempString = Serial.readStringUntil('\r');
 80850c2:	a804      	add	r0, sp, #16
 80850c4:	f006 f98c 	bl	808b3e0 <_ZN6StringD1Ev>
    String tempString = Serial.readStringUntil('\r');
 80850c8:	4668      	mov	r0, sp
 80850ca:	f006 f989 	bl	808b3e0 <_ZN6StringD1Ev>
}
 80850ce:	b009      	add	sp, #36	; 0x24
 80850d0:	bd30      	pop	{r4, r5, pc}
            Serial.println("\n\rInvalid value!");
 80850d2:	f007 fc9b 	bl	808ca0c <_Z16_fetch_usbserialv>
 80850d6:	490d      	ldr	r1, [pc, #52]	; (808510c <_Z17serialGetDeviceIdv+0x100>)
 80850d8:	f006 fbdd 	bl	808b896 <_ZN5Print7printlnEPKc>
 80850dc:	e7f1      	b.n	80850c2 <_Z17serialGetDeviceIdv+0xb6>
        Serial.println("\n\rIncorrect password!");
 80850de:	f007 fc95 	bl	808ca0c <_Z16_fetch_usbserialv>
 80850e2:	490b      	ldr	r1, [pc, #44]	; (8085110 <_Z17serialGetDeviceIdv+0x104>)
 80850e4:	f006 fbd7 	bl	808b896 <_ZN5Print7printlnEPKc>
 80850e8:	e7ee      	b.n	80850c8 <_Z17serialGetDeviceIdv+0xbc>
 80850ea:	bf00      	nop
 80850ec:	20000080 	.word	0x20000080
 80850f0:	08093052 	.word	0x08093052
 80850f4:	08093065 	.word	0x08093065
 80850f8:	08091e80 	.word	0x08091e80
 80850fc:	08091e86 	.word	0x08091e86
 8085100:	08093095 	.word	0x08093095
 8085104:	080942e2 	.word	0x080942e2
 8085108:	080930aa 	.word	0x080930aa
 808510c:	080920b7 	.word	0x080920b7
 8085110:	08091fab 	.word	0x08091fab

08085114 <_Z13serialGetZonev>:
void serialGetZone(void){
 8085114:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    Serial.println("Enter new Device time zone (-12.0 to 14.0)");
 8085116:	f007 fc79 	bl	808ca0c <_Z16_fetch_usbserialv>
 808511a:	491f      	ldr	r1, [pc, #124]	; (8085198 <_Z13serialGetZonev+0x84>)
 808511c:	f006 fbbb 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8085120:	f007 fc74 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085124:	f24c 3150 	movw	r1, #50000	; 0xc350
 8085128:	f006 fd11 	bl	808bb4e <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 808512c:	f007 fc6e 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085130:	220d      	movs	r2, #13
 8085132:	4601      	mov	r1, r0
 8085134:	a802      	add	r0, sp, #8
 8085136:	f006 fd75 	bl	808bc24 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 808513a:	a802      	add	r0, sp, #8
 808513c:	f006 fb4a 	bl	808b7d4 <_ZNK6String5toIntEv>
 8085140:	9001      	str	r0, [sp, #4]
    Serial.println("");
 8085142:	f007 fc63 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085146:	4915      	ldr	r1, [pc, #84]	; (808519c <_Z13serialGetZonev+0x88>)
 8085148:	f006 fba5 	bl	808b896 <_ZN5Print7printlnEPKc>
    if(tempValue >= -12 && tempValue <= 14){       //min is the year 2000, max is the year 2100
 808514c:	9801      	ldr	r0, [sp, #4]
 808514e:	f100 030c 	add.w	r3, r0, #12
 8085152:	2b1a      	cmp	r3, #26
 8085154:	d81a      	bhi.n	808518c <_Z13serialGetZonev+0x78>
        Time.zone(tempValue);
 8085156:	f008 fed3 	bl	808df00 <__aeabi_i2f>
 808515a:	f006 fdd9 	bl	808bd10 <_ZN9TimeClass4zoneEf>
        Serial.print("\n\rNew Device time zone:");
 808515e:	f007 fc55 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085162:	490f      	ldr	r1, [pc, #60]	; (80851a0 <_Z13serialGetZonev+0x8c>)
 8085164:	f006 fb84 	bl	808b870 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8085168:	f007 fc50 	bl	808ca0c <_Z16_fetch_usbserialv>
 808516c:	9901      	ldr	r1, [sp, #4]
 808516e:	220a      	movs	r2, #10
 8085170:	f7ff fdbf 	bl	8084cf2 <_ZN5Print7printlnIiLi0EEEjT_i>
        EEPROM.put(TIME_ZONE_MEM_ADDRESS, tempValue);
 8085174:	f008 f852 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8085178:	2054      	movs	r0, #84	; 0x54
 808517a:	a901      	add	r1, sp, #4
 808517c:	f7fb fdcf 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8085180:	a802      	add	r0, sp, #8
 8085182:	f006 f92d 	bl	808b3e0 <_ZN6StringD1Ev>
}
 8085186:	b007      	add	sp, #28
 8085188:	f85d fb04 	ldr.w	pc, [sp], #4
        Serial.println("\n\rInvalid value!");
 808518c:	f007 fc3e 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085190:	4904      	ldr	r1, [pc, #16]	; (80851a4 <_Z13serialGetZonev+0x90>)
 8085192:	f006 fb80 	bl	808b896 <_ZN5Print7printlnEPKc>
 8085196:	e7f3      	b.n	8085180 <_Z13serialGetZonev+0x6c>
 8085198:	080930bb 	.word	0x080930bb
 808519c:	080942e2 	.word	0x080942e2
 80851a0:	080930e6 	.word	0x080930e6
 80851a4:	080920b7 	.word	0x080920b7

080851a8 <_Z19serialGetLowerLimitv>:
void serialGetLowerLimit(void){
 80851a8:	b530      	push	{r4, r5, lr}
 80851aa:	b089      	sub	sp, #36	; 0x24
    Serial.println();
 80851ac:	f007 fc2e 	bl	808ca0c <_Z16_fetch_usbserialv>
    Serial.println(gas_lower_limit);
 80851b0:	4d35      	ldr	r5, [pc, #212]	; (8085288 <_Z19serialGetLowerLimitv+0xe0>)
    Serial.println();
 80851b2:	f006 fb64 	bl	808b87e <_ZN5Print7printlnEv>
    Serial.print("Current lower limit:");
 80851b6:	f007 fc29 	bl	808ca0c <_Z16_fetch_usbserialv>
 80851ba:	4934      	ldr	r1, [pc, #208]	; (808528c <_Z19serialGetLowerLimitv+0xe4>)
 80851bc:	f006 fb58 	bl	808b870 <_ZN5Print5printEPKc>
    Serial.println(gas_lower_limit);
 80851c0:	f007 fc24 	bl	808ca0c <_Z16_fetch_usbserialv>
 80851c4:	220a      	movs	r2, #10
 80851c6:	6829      	ldr	r1, [r5, #0]
 80851c8:	f7ff fd93 	bl	8084cf2 <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.println("Please enter password in order to change the lower limit");
 80851cc:	f007 fc1e 	bl	808ca0c <_Z16_fetch_usbserialv>
 80851d0:	492f      	ldr	r1, [pc, #188]	; (8085290 <_Z19serialGetLowerLimitv+0xe8>)
 80851d2:	f006 fb60 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 80851d6:	f007 fc19 	bl	808ca0c <_Z16_fetch_usbserialv>
 80851da:	f24c 3150 	movw	r1, #50000	; 0xc350
 80851de:	f006 fcb6 	bl	808bb4e <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80851e2:	f007 fc13 	bl	808ca0c <_Z16_fetch_usbserialv>
 80851e6:	220d      	movs	r2, #13
 80851e8:	4601      	mov	r1, r0
 80851ea:	4668      	mov	r0, sp
 80851ec:	f006 fd1a 	bl	808bc24 <_ZN6Stream15readStringUntilEc>
 80851f0:	4668      	mov	r0, sp
 80851f2:	4928      	ldr	r1, [pc, #160]	; (8085294 <_Z19serialGetLowerLimitv+0xec>)
 80851f4:	f006 fa82 	bl	808b6fc <_ZNK6String6equalsEPKc>
    if(tempString == "bould"){
 80851f8:	2800      	cmp	r0, #0
 80851fa:	d03e      	beq.n	808527a <_Z19serialGetLowerLimitv+0xd2>
        Serial.println("Password correct!");
 80851fc:	f007 fc06 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085200:	4925      	ldr	r1, [pc, #148]	; (8085298 <_Z19serialGetLowerLimitv+0xf0>)
 8085202:	f006 fb48 	bl	808b896 <_ZN5Print7printlnEPKc>
        Serial.println("Enter new lower limit:\n\r");
 8085206:	f007 fc01 	bl	808ca0c <_Z16_fetch_usbserialv>
 808520a:	4924      	ldr	r1, [pc, #144]	; (808529c <_Z19serialGetLowerLimitv+0xf4>)
 808520c:	f006 fb43 	bl	808b896 <_ZN5Print7printlnEPKc>
        String tempString = Serial.readStringUntil('\r');
 8085210:	f007 fbfc 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085214:	220d      	movs	r2, #13
 8085216:	4601      	mov	r1, r0
 8085218:	a804      	add	r0, sp, #16
 808521a:	f006 fd03 	bl	808bc24 <_ZN6Stream15readStringUntilEc>
        int tempValue = tempString.toInt();
 808521e:	a804      	add	r0, sp, #16
 8085220:	f006 fad8 	bl	808b7d4 <_ZNK6String5toIntEv>
 8085224:	4604      	mov	r4, r0
        Serial.println("");
 8085226:	f007 fbf1 	bl	808ca0c <_Z16_fetch_usbserialv>
 808522a:	491d      	ldr	r1, [pc, #116]	; (80852a0 <_Z19serialGetLowerLimitv+0xf8>)
 808522c:	f006 fb33 	bl	808b896 <_ZN5Print7printlnEPKc>
        if(tempValue > 0 && tempValue < 20000){
 8085230:	f644 631e 	movw	r3, #19998	; 0x4e1e
 8085234:	1e62      	subs	r2, r4, #1
 8085236:	429a      	cmp	r2, r3
 8085238:	d819      	bhi.n	808526e <_Z19serialGetLowerLimitv+0xc6>
            Serial.print("\n\rNew lower limit:");
 808523a:	f007 fbe7 	bl	808ca0c <_Z16_fetch_usbserialv>
 808523e:	4919      	ldr	r1, [pc, #100]	; (80852a4 <_Z19serialGetLowerLimitv+0xfc>)
 8085240:	f006 fb16 	bl	808b870 <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 8085244:	f007 fbe2 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085248:	4621      	mov	r1, r4
 808524a:	220a      	movs	r2, #10
 808524c:	f7ff fd51 	bl	8084cf2 <_ZN5Print7printlnIiLi0EEEjT_i>
            gas_lower_limit = tempValue;
 8085250:	602c      	str	r4, [r5, #0]
            EEPROM.put(GAS_LOWER_LIMIT_MEM_ADDRESS, gas_lower_limit);
 8085252:	f007 ffe3 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8085256:	4629      	mov	r1, r5
 8085258:	204c      	movs	r0, #76	; 0x4c
 808525a:	f7fb fd60 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
        String tempString = Serial.readStringUntil('\r');
 808525e:	a804      	add	r0, sp, #16
 8085260:	f006 f8be 	bl	808b3e0 <_ZN6StringD1Ev>
    String tempString = Serial.readStringUntil('\r');
 8085264:	4668      	mov	r0, sp
 8085266:	f006 f8bb 	bl	808b3e0 <_ZN6StringD1Ev>
}
 808526a:	b009      	add	sp, #36	; 0x24
 808526c:	bd30      	pop	{r4, r5, pc}
            Serial.println("\n\rInvalid value!");
 808526e:	f007 fbcd 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085272:	490d      	ldr	r1, [pc, #52]	; (80852a8 <_Z19serialGetLowerLimitv+0x100>)
 8085274:	f006 fb0f 	bl	808b896 <_ZN5Print7printlnEPKc>
 8085278:	e7f1      	b.n	808525e <_Z19serialGetLowerLimitv+0xb6>
        Serial.println("\n\rIncorrect password!");
 808527a:	f007 fbc7 	bl	808ca0c <_Z16_fetch_usbserialv>
 808527e:	490b      	ldr	r1, [pc, #44]	; (80852ac <_Z19serialGetLowerLimitv+0x104>)
 8085280:	f006 fb09 	bl	808b896 <_ZN5Print7printlnEPKc>
 8085284:	e7ee      	b.n	8085264 <_Z19serialGetLowerLimitv+0xbc>
 8085286:	bf00      	nop
 8085288:	20000098 	.word	0x20000098
 808528c:	080930fe 	.word	0x080930fe
 8085290:	08093113 	.word	0x08093113
 8085294:	08091e80 	.word	0x08091e80
 8085298:	08091e86 	.word	0x08091e86
 808529c:	0809314c 	.word	0x0809314c
 80852a0:	080942e2 	.word	0x080942e2
 80852a4:	08093165 	.word	0x08093165
 80852a8:	080920b7 	.word	0x080920b7
 80852ac:	08091fab 	.word	0x08091fab

080852b0 <_Z19serialGetUpperLimitv>:
void serialGetUpperLimit(void){
 80852b0:	b530      	push	{r4, r5, lr}
 80852b2:	b089      	sub	sp, #36	; 0x24
    Serial.println();
 80852b4:	f007 fbaa 	bl	808ca0c <_Z16_fetch_usbserialv>
    Serial.println(gas_upper_limit);
 80852b8:	4d35      	ldr	r5, [pc, #212]	; (8085390 <_Z19serialGetUpperLimitv+0xe0>)
    Serial.println();
 80852ba:	f006 fae0 	bl	808b87e <_ZN5Print7printlnEv>
    Serial.print("Current upper limit:");
 80852be:	f007 fba5 	bl	808ca0c <_Z16_fetch_usbserialv>
 80852c2:	4934      	ldr	r1, [pc, #208]	; (8085394 <_Z19serialGetUpperLimitv+0xe4>)
 80852c4:	f006 fad4 	bl	808b870 <_ZN5Print5printEPKc>
    Serial.println(gas_upper_limit);
 80852c8:	f007 fba0 	bl	808ca0c <_Z16_fetch_usbserialv>
 80852cc:	220a      	movs	r2, #10
 80852ce:	6829      	ldr	r1, [r5, #0]
 80852d0:	f7ff fd0f 	bl	8084cf2 <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.println("Please enter password in order to change the upper limit");
 80852d4:	f007 fb9a 	bl	808ca0c <_Z16_fetch_usbserialv>
 80852d8:	492f      	ldr	r1, [pc, #188]	; (8085398 <_Z19serialGetUpperLimitv+0xe8>)
 80852da:	f006 fadc 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 80852de:	f007 fb95 	bl	808ca0c <_Z16_fetch_usbserialv>
 80852e2:	f24c 3150 	movw	r1, #50000	; 0xc350
 80852e6:	f006 fc32 	bl	808bb4e <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80852ea:	f007 fb8f 	bl	808ca0c <_Z16_fetch_usbserialv>
 80852ee:	220d      	movs	r2, #13
 80852f0:	4601      	mov	r1, r0
 80852f2:	4668      	mov	r0, sp
 80852f4:	f006 fc96 	bl	808bc24 <_ZN6Stream15readStringUntilEc>
 80852f8:	4668      	mov	r0, sp
 80852fa:	4928      	ldr	r1, [pc, #160]	; (808539c <_Z19serialGetUpperLimitv+0xec>)
 80852fc:	f006 f9fe 	bl	808b6fc <_ZNK6String6equalsEPKc>
    if(tempString == "bould"){
 8085300:	2800      	cmp	r0, #0
 8085302:	d03e      	beq.n	8085382 <_Z19serialGetUpperLimitv+0xd2>
        Serial.println("Password correct!");
 8085304:	f007 fb82 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085308:	4925      	ldr	r1, [pc, #148]	; (80853a0 <_Z19serialGetUpperLimitv+0xf0>)
 808530a:	f006 fac4 	bl	808b896 <_ZN5Print7printlnEPKc>
        Serial.println("Enter new upper limit:\n\r");
 808530e:	f007 fb7d 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085312:	4924      	ldr	r1, [pc, #144]	; (80853a4 <_Z19serialGetUpperLimitv+0xf4>)
 8085314:	f006 fabf 	bl	808b896 <_ZN5Print7printlnEPKc>
        String tempString = Serial.readStringUntil('\r');
 8085318:	f007 fb78 	bl	808ca0c <_Z16_fetch_usbserialv>
 808531c:	220d      	movs	r2, #13
 808531e:	4601      	mov	r1, r0
 8085320:	a804      	add	r0, sp, #16
 8085322:	f006 fc7f 	bl	808bc24 <_ZN6Stream15readStringUntilEc>
        int tempValue = tempString.toInt();
 8085326:	a804      	add	r0, sp, #16
 8085328:	f006 fa54 	bl	808b7d4 <_ZNK6String5toIntEv>
 808532c:	4604      	mov	r4, r0
        Serial.println("");
 808532e:	f007 fb6d 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085332:	491d      	ldr	r1, [pc, #116]	; (80853a8 <_Z19serialGetUpperLimitv+0xf8>)
 8085334:	f006 faaf 	bl	808b896 <_ZN5Print7printlnEPKc>
        if(tempValue > 0 && tempValue < 50000){
 8085338:	f24c 334e 	movw	r3, #49998	; 0xc34e
 808533c:	1e62      	subs	r2, r4, #1
 808533e:	429a      	cmp	r2, r3
 8085340:	d819      	bhi.n	8085376 <_Z19serialGetUpperLimitv+0xc6>
            Serial.print("\n\rNew upper limit:");
 8085342:	f007 fb63 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085346:	4919      	ldr	r1, [pc, #100]	; (80853ac <_Z19serialGetUpperLimitv+0xfc>)
 8085348:	f006 fa92 	bl	808b870 <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 808534c:	f007 fb5e 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085350:	4621      	mov	r1, r4
 8085352:	220a      	movs	r2, #10
 8085354:	f7ff fccd 	bl	8084cf2 <_ZN5Print7printlnIiLi0EEEjT_i>
            gas_upper_limit = tempValue;
 8085358:	602c      	str	r4, [r5, #0]
            EEPROM.put(GAS_UPPER_LIMIT_MEM_ADDRESS, gas_upper_limit);
 808535a:	f007 ff5f 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 808535e:	4629      	mov	r1, r5
 8085360:	2050      	movs	r0, #80	; 0x50
 8085362:	f7fb fcdc 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
        String tempString = Serial.readStringUntil('\r');
 8085366:	a804      	add	r0, sp, #16
 8085368:	f006 f83a 	bl	808b3e0 <_ZN6StringD1Ev>
    String tempString = Serial.readStringUntil('\r');
 808536c:	4668      	mov	r0, sp
 808536e:	f006 f837 	bl	808b3e0 <_ZN6StringD1Ev>
}
 8085372:	b009      	add	sp, #36	; 0x24
 8085374:	bd30      	pop	{r4, r5, pc}
            Serial.println("\n\rInvalid value!");
 8085376:	f007 fb49 	bl	808ca0c <_Z16_fetch_usbserialv>
 808537a:	490d      	ldr	r1, [pc, #52]	; (80853b0 <_Z19serialGetUpperLimitv+0x100>)
 808537c:	f006 fa8b 	bl	808b896 <_ZN5Print7printlnEPKc>
 8085380:	e7f1      	b.n	8085366 <_Z19serialGetUpperLimitv+0xb6>
        Serial.println("\n\rIncorrect password!");
 8085382:	f007 fb43 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085386:	490b      	ldr	r1, [pc, #44]	; (80853b4 <_Z19serialGetUpperLimitv+0x104>)
 8085388:	f006 fa85 	bl	808b896 <_ZN5Print7printlnEPKc>
 808538c:	e7ee      	b.n	808536c <_Z19serialGetUpperLimitv+0xbc>
 808538e:	bf00      	nop
 8085390:	200000a0 	.word	0x200000a0
 8085394:	08093178 	.word	0x08093178
 8085398:	0809318d 	.word	0x0809318d
 808539c:	08091e80 	.word	0x08091e80
 80853a0:	08091e86 	.word	0x08091e86
 80853a4:	080931c6 	.word	0x080931c6
 80853a8:	080942e2 	.word	0x080942e2
 80853ac:	080931df 	.word	0x080931df
 80853b0:	080920b7 	.word	0x080920b7
 80853b4:	08091fab 	.word	0x08091fab

080853b8 <setup>:
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
 80853b8:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
{
 80853bc:	b570      	push	{r4, r5, r6, lr}
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
 80853be:	4bc6      	ldr	r3, [pc, #792]	; (80856d8 <setup+0x320>)
{
 80853c0:	b0aa      	sub	sp, #168	; 0xa8
    String init_log; //intialization error log
 80853c2:	49c6      	ldr	r1, [pc, #792]	; (80856dc <setup+0x324>)
    pinMode(lmp91000_1_en, OUTPUT);
 80853c4:	4dc6      	ldr	r5, [pc, #792]	; (80856e0 <setup+0x328>)
    String init_log; //intialization error log
 80853c6:	a803      	add	r0, sp, #12
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
 80853c8:	801a      	strh	r2, [r3, #0]
    pinMode(lmp91000_2_en, OUTPUT);
 80853ca:	4ec6      	ldr	r6, [pc, #792]	; (80856e4 <setup+0x32c>)
    String init_log; //intialization error log
 80853cc:	f006 f852 	bl	808b474 <_ZN6StringC1EPKc>
    setADCSampleTime(ADC_SampleTime_480Cycles);
 80853d0:	2007      	movs	r0, #7
 80853d2:	f006 fe27 	bl	808c024 <setADCSampleTime>
    pinMode(lmp91000_1_en, OUTPUT);
 80853d6:	2101      	movs	r1, #1
 80853d8:	8828      	ldrh	r0, [r5, #0]
 80853da:	f007 fecb 	bl	808d174 <pinMode>
    pinMode(lmp91000_2_en, OUTPUT);
 80853de:	2101      	movs	r1, #1
 80853e0:	8830      	ldrh	r0, [r6, #0]
 80853e2:	f007 fec7 	bl	808d174 <pinMode>
    pinMode(fiveVolt_en, OUTPUT);
 80853e6:	4bc0      	ldr	r3, [pc, #768]	; (80856e8 <setup+0x330>)
 80853e8:	2101      	movs	r1, #1
 80853ea:	8818      	ldrh	r0, [r3, #0]
 80853ec:	f007 fec2 	bl	808d174 <pinMode>
    pinMode(plantower_en, OUTPUT);
 80853f0:	4bbe      	ldr	r3, [pc, #760]	; (80856ec <setup+0x334>)
 80853f2:	2101      	movs	r1, #1
 80853f4:	8818      	ldrh	r0, [r3, #0]
 80853f6:	f007 febd 	bl	808d174 <pinMode>
    pinMode(power_led_en, OUTPUT);
 80853fa:	4bbd      	ldr	r3, [pc, #756]	; (80856f0 <setup+0x338>)
 80853fc:	2101      	movs	r1, #1
 80853fe:	8818      	ldrh	r0, [r3, #0]
 8085400:	f007 feb8 	bl	808d174 <pinMode>
    pinMode(esp_wroom_en, OUTPUT);
 8085404:	4bbb      	ldr	r3, [pc, #748]	; (80856f4 <setup+0x33c>)
 8085406:	2101      	movs	r1, #1
 8085408:	8818      	ldrh	r0, [r3, #0]
 808540a:	f007 feb3 	bl	808d174 <pinMode>
    pinMode(blower_en, OUTPUT);
 808540e:	4bba      	ldr	r3, [pc, #744]	; (80856f8 <setup+0x340>)
 8085410:	2101      	movs	r1, #1
 8085412:	8818      	ldrh	r0, [r3, #0]
 8085414:	f007 feae 	bl	808d174 <pinMode>
    pinMode(D4, INPUT);
 8085418:	2100      	movs	r1, #0
 808541a:	2004      	movs	r0, #4
 808541c:	f007 feaa 	bl	808d174 <pinMode>
    pinMode(co2_en, OUTPUT);
 8085420:	4bb6      	ldr	r3, [pc, #728]	; (80856fc <setup+0x344>)
 8085422:	2101      	movs	r1, #1
 8085424:	8818      	ldrh	r0, [r3, #0]
 8085426:	f007 fea5 	bl	808d174 <pinMode>
    readStoredVars();
 808542a:	f7fb feb7 	bl	808119c <_Z14readStoredVarsv>
    pmic.begin();
 808542e:	48b4      	ldr	r0, [pc, #720]	; (8085700 <setup+0x348>)
 8085430:	f005 fc3f 	bl	808acb2 <_ZN4PMIC5beginEv>
    pmic.setChargeVoltage(4208);      //  Set Li-Po charge termination voltage to 4.21V,
 8085434:	f241 0170 	movw	r1, #4208	; 0x1070
 8085438:	48b1      	ldr	r0, [pc, #708]	; (8085700 <setup+0x348>)
 808543a:	f005 fd6e 	bl	808af1a <_ZN4PMIC16setChargeVoltageEt>
    pmic.enableCharging();
 808543e:	48b0      	ldr	r0, [pc, #704]	; (8085700 <setup+0x348>)
 8085440:	f005 fd1a 	bl	808ae78 <_ZN4PMIC14enableChargingEv>
    powerCheck.loop();
 8085444:	4caf      	ldr	r4, [pc, #700]	; (8085704 <setup+0x34c>)
    writeRegister(0, 0b00110100);
 8085446:	2134      	movs	r1, #52	; 0x34
 8085448:	2000      	movs	r0, #0
 808544a:	f7fb fd71 	bl	8080f30 <_Z13writeRegisterhh>
    writeRegister(1, 0b00011011);
 808544e:	211b      	movs	r1, #27
 8085450:	2001      	movs	r0, #1
 8085452:	f7fb fd6d 	bl	8080f30 <_Z13writeRegisterhh>
    powerCheck.loop();
 8085456:	4620      	mov	r0, r4
 8085458:	f001 fe80 	bl	808715c <_ZN10PowerCheck4loopEv>
    if(car_topper_power_en && powerCheck.getHasPower() == 0){
 808545c:	4baa      	ldr	r3, [pc, #680]	; (8085708 <setup+0x350>)
 808545e:	681b      	ldr	r3, [r3, #0]
 8085460:	2b00      	cmp	r3, #0
 8085462:	f000 826c 	beq.w	808593e <setup+0x586>
 8085466:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 808546a:	2b00      	cmp	r3, #0
 808546c:	f040 8267 	bne.w	808593e <setup+0x586>
        goToSleepBattery();
 8085470:	f7fd f814 	bl	808249c <_Z16goToSleepBatteryv>
    attachInterrupt(D4, System.reset, RISING);
 8085474:	2300      	movs	r3, #0
 8085476:	2201      	movs	r2, #1
 8085478:	9300      	str	r3, [sp, #0]
 808547a:	2004      	movs	r0, #4
 808547c:	f04f 33ff 	mov.w	r3, #4294967295
 8085480:	49a2      	ldr	r1, [pc, #648]	; (808570c <setup+0x354>)
 8085482:	f007 fb2b 	bl	808cadc <_Z15attachInterrupttPFvvE13InterruptModeah>
    if(digitalRead(D4)){
 8085486:	2004      	movs	r0, #4
 8085488:	f007 fe9e 	bl	808d1c8 <digitalRead>
 808548c:	b108      	cbz	r0, 8085492 <setup+0xda>
      goToSleep();
 808548e:	f7fc ffb7 	bl	8082400 <_Z9goToSleepv>
    digitalWrite(lmp91000_1_en, HIGH);
 8085492:	2101      	movs	r1, #1
 8085494:	8828      	ldrh	r0, [r5, #0]
 8085496:	f007 fe7e 	bl	808d196 <digitalWrite>
    digitalWrite(lmp91000_2_en, HIGH);
 808549a:	2101      	movs	r1, #1
 808549c:	8830      	ldrh	r0, [r6, #0]
 808549e:	f007 fe7a 	bl	808d196 <digitalWrite>
    digitalWrite(power_led_en, HIGH);
 80854a2:	4b93      	ldr	r3, [pc, #588]	; (80856f0 <setup+0x338>)
 80854a4:	2101      	movs	r1, #1
 80854a6:	8818      	ldrh	r0, [r3, #0]
 80854a8:	f007 fe75 	bl	808d196 <digitalWrite>
    digitalWrite(plantower_en, HIGH);
 80854ac:	4b8f      	ldr	r3, [pc, #572]	; (80856ec <setup+0x334>)
 80854ae:	2101      	movs	r1, #1
 80854b0:	8818      	ldrh	r0, [r3, #0]
 80854b2:	f007 fe70 	bl	808d196 <digitalWrite>
    digitalWrite(esp_wroom_en, HIGH);
 80854b6:	4b8f      	ldr	r3, [pc, #572]	; (80856f4 <setup+0x33c>)
 80854b8:	2101      	movs	r1, #1
 80854ba:	8818      	ldrh	r0, [r3, #0]
 80854bc:	f007 fe6b 	bl	808d196 <digitalWrite>
    digitalWrite(blower_en, HIGH);
 80854c0:	4b8d      	ldr	r3, [pc, #564]	; (80856f8 <setup+0x340>)
 80854c2:	2101      	movs	r1, #1
 80854c4:	8818      	ldrh	r0, [r3, #0]
 80854c6:	f007 fe66 	bl	808d196 <digitalWrite>
    digitalWrite(co2_en, HIGH);
 80854ca:	4b8c      	ldr	r3, [pc, #560]	; (80856fc <setup+0x344>)
 80854cc:	2101      	movs	r1, #1
 80854ce:	8818      	ldrh	r0, [r3, #0]
 80854d0:	f007 fe61 	bl	808d196 <digitalWrite>
    digitalWrite(fiveVolt_en, HIGH);
 80854d4:	4b84      	ldr	r3, [pc, #528]	; (80856e8 <setup+0x330>)
 80854d6:	2101      	movs	r1, #1
 80854d8:	8818      	ldrh	r0, [r3, #0]
 80854da:	f007 fe5c 	bl	808d196 <digitalWrite>
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80854de:	4a8c      	ldr	r2, [pc, #560]	; (8085710 <setup+0x358>)
 80854e0:	498c      	ldr	r1, [pc, #560]	; (8085714 <setup+0x35c>)
 80854e2:	488d      	ldr	r0, [pc, #564]	; (8085718 <setup+0x360>)
 80854e4:	f006 ff6f 	bl	808c3c6 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    Serial1.begin(9600);
 80854e8:	f007 fbda 	bl	808cca0 <_Z22__fetch_global_Serial1v>
 80854ec:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80854f0:	f007 fbd0 	bl	808cc94 <_ZN11USARTSerial5beginEm>
    Serial4.begin(9600);
 80854f4:	f7fb fc7a 	bl	8080dec <_Z22__fetch_global_Serial4v>
 80854f8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80854fc:	f007 fbca 	bl	808cc94 <_ZN11USARTSerial5beginEm>
    Serial5.begin(9600);        //gps is connected to this serial port
 8085500:	f7fb fcb0 	bl	8080e64 <_Z22__fetch_global_Serial5v>
 8085504:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8085508:	f007 fbc4 	bl	808cc94 <_ZN11USARTSerial5beginEm>
    Serial4.setTimeout(5000);
 808550c:	f7fb fc6e 	bl	8080dec <_Z22__fetch_global_Serial4v>
 8085510:	f241 3188 	movw	r1, #5000	; 0x1388
 8085514:	f006 fb1b 	bl	808bb4e <_ZN6Stream10setTimeoutEm>
    delay(10000);
 8085518:	f242 7010 	movw	r0, #10000	; 0x2710
 808551c:	f006 fd84 	bl	808c028 <delay>
    Serial.begin(9600);
 8085520:	f007 fa74 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085524:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8085528:	f007 fa56 	bl	808c9d8 <_ZN9USBSerial5beginEl>
     fileName = String(DEVICE_id) + "_" + String(Time.year()) + String(Time.month()) + String(Time.day()) + "_" + String(Time.hour()) + String(Time.minute()) + String(Time.second()) + ".txt";
 808552c:	4b7b      	ldr	r3, [pc, #492]	; (808571c <setup+0x364>)
 808552e:	220a      	movs	r2, #10
 8085530:	6819      	ldr	r1, [r3, #0]
 8085532:	a807      	add	r0, sp, #28
 8085534:	f006 f812 	bl	808b55c <_ZN6StringC1Eih>
	StringSumHelper(const String &s) : String(s) {}
 8085538:	a907      	add	r1, sp, #28
 808553a:	a80b      	add	r0, sp, #44	; 0x2c
 808553c:	f005 ffd9 	bl	808b4f2 <_ZN6StringC1ERKS_>
 8085540:	4977      	ldr	r1, [pc, #476]	; (8085720 <setup+0x368>)
 8085542:	a80b      	add	r0, sp, #44	; 0x2c
 8085544:	f006 f8b2 	bl	808b6ac <_ZplRK15StringSumHelperPKc>
 8085548:	4604      	mov	r4, r0
 808554a:	f006 fd57 	bl	808bffc <_ZN9TimeClass4yearEv>
 808554e:	220a      	movs	r2, #10
 8085550:	4601      	mov	r1, r0
 8085552:	a80f      	add	r0, sp, #60	; 0x3c
 8085554:	f006 f802 	bl	808b55c <_ZN6StringC1Eih>
 8085558:	a90f      	add	r1, sp, #60	; 0x3c
 808555a:	4620      	mov	r0, r4
 808555c:	f006 f89a 	bl	808b694 <_ZplRK15StringSumHelperRK6String>
 8085560:	4604      	mov	r4, r0
 8085562:	f006 fd43 	bl	808bfec <_ZN9TimeClass5monthEv>
 8085566:	220a      	movs	r2, #10
 8085568:	4601      	mov	r1, r0
 808556a:	a813      	add	r0, sp, #76	; 0x4c
 808556c:	f005 fff6 	bl	808b55c <_ZN6StringC1Eih>
 8085570:	a913      	add	r1, sp, #76	; 0x4c
 8085572:	4620      	mov	r0, r4
 8085574:	f006 f88e 	bl	808b694 <_ZplRK15StringSumHelperRK6String>
 8085578:	4604      	mov	r4, r0
 808557a:	f006 fd2d 	bl	808bfd8 <_ZN9TimeClass3dayEv>
 808557e:	220a      	movs	r2, #10
 8085580:	4601      	mov	r1, r0
 8085582:	a817      	add	r0, sp, #92	; 0x5c
 8085584:	f005 ffea 	bl	808b55c <_ZN6StringC1Eih>
 8085588:	4620      	mov	r0, r4
 808558a:	a917      	add	r1, sp, #92	; 0x5c
 808558c:	f006 f882 	bl	808b694 <_ZplRK15StringSumHelperRK6String>
 8085590:	4963      	ldr	r1, [pc, #396]	; (8085720 <setup+0x368>)
 8085592:	f006 f88b 	bl	808b6ac <_ZplRK15StringSumHelperPKc>
 8085596:	4604      	mov	r4, r0
 8085598:	f006 fd00 	bl	808bf9c <_ZN9TimeClass4hourEv>
 808559c:	220a      	movs	r2, #10
 808559e:	4601      	mov	r1, r0
 80855a0:	a81b      	add	r0, sp, #108	; 0x6c
 80855a2:	f005 ffdb 	bl	808b55c <_ZN6StringC1Eih>
 80855a6:	a91b      	add	r1, sp, #108	; 0x6c
 80855a8:	4620      	mov	r0, r4
 80855aa:	f006 f873 	bl	808b694 <_ZplRK15StringSumHelperRK6String>
 80855ae:	4604      	mov	r4, r0
 80855b0:	f006 fcfe 	bl	808bfb0 <_ZN9TimeClass6minuteEv>
 80855b4:	220a      	movs	r2, #10
 80855b6:	4601      	mov	r1, r0
 80855b8:	a81f      	add	r0, sp, #124	; 0x7c
 80855ba:	f005 ffcf 	bl	808b55c <_ZN6StringC1Eih>
 80855be:	a91f      	add	r1, sp, #124	; 0x7c
 80855c0:	4620      	mov	r0, r4
 80855c2:	f006 f867 	bl	808b694 <_ZplRK15StringSumHelperRK6String>
 80855c6:	4604      	mov	r4, r0
 80855c8:	f006 fcfc 	bl	808bfc4 <_ZN9TimeClass6secondEv>
 80855cc:	220a      	movs	r2, #10
 80855ce:	4601      	mov	r1, r0
 80855d0:	a823      	add	r0, sp, #140	; 0x8c
 80855d2:	f005 ffc3 	bl	808b55c <_ZN6StringC1Eih>
 80855d6:	4620      	mov	r0, r4
 80855d8:	a923      	add	r1, sp, #140	; 0x8c
 80855da:	f006 f85b 	bl	808b694 <_ZplRK15StringSumHelperRK6String>
 80855de:	4951      	ldr	r1, [pc, #324]	; (8085724 <setup+0x36c>)
 80855e0:	f006 f864 	bl	808b6ac <_ZplRK15StringSumHelperPKc>
 80855e4:	4c50      	ldr	r4, [pc, #320]	; (8085728 <setup+0x370>)
 80855e6:	4601      	mov	r1, r0
 80855e8:	4620      	mov	r0, r4
 80855ea:	f005 ff73 	bl	808b4d4 <_ZN6StringaSERKS_>
 80855ee:	a823      	add	r0, sp, #140	; 0x8c
 80855f0:	f005 fef6 	bl	808b3e0 <_ZN6StringD1Ev>
 80855f4:	a81f      	add	r0, sp, #124	; 0x7c
 80855f6:	f005 fef3 	bl	808b3e0 <_ZN6StringD1Ev>
 80855fa:	a81b      	add	r0, sp, #108	; 0x6c
 80855fc:	f005 fef0 	bl	808b3e0 <_ZN6StringD1Ev>
 8085600:	a817      	add	r0, sp, #92	; 0x5c
 8085602:	f005 feed 	bl	808b3e0 <_ZN6StringD1Ev>
 8085606:	a813      	add	r0, sp, #76	; 0x4c
 8085608:	f005 feea 	bl	808b3e0 <_ZN6StringD1Ev>
 808560c:	a80f      	add	r0, sp, #60	; 0x3c
 808560e:	f005 fee7 	bl	808b3e0 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8085612:	a80b      	add	r0, sp, #44	; 0x2c
 8085614:	f005 fee4 	bl	808b3e0 <_ZN6StringD1Ev>
 8085618:	a807      	add	r0, sp, #28
 808561a:	f005 fee1 	bl	808b3e0 <_ZN6StringD1Ev>
     Serial.println("Checking for sd card");
 808561e:	f007 f9f5 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085622:	4942      	ldr	r1, [pc, #264]	; (808572c <setup+0x374>)
 8085624:	f006 f937 	bl	808b896 <_ZN5Print7printlnEPKc>
	StringSumHelper(const char *p) : String(p) {}
 8085628:	4941      	ldr	r1, [pc, #260]	; (8085730 <setup+0x378>)
 808562a:	a823      	add	r0, sp, #140	; 0x8c
 808562c:	f005 ff22 	bl	808b474 <_ZN6StringC1EPKc>
     logFileName = "log_" + fileName;
 8085630:	4621      	mov	r1, r4
 8085632:	a823      	add	r0, sp, #140	; 0x8c
 8085634:	f006 f82e 	bl	808b694 <_ZplRK15StringSumHelperRK6String>
 8085638:	4601      	mov	r1, r0
 808563a:	483e      	ldr	r0, [pc, #248]	; (8085734 <setup+0x37c>)
 808563c:	f005 ff4a 	bl	808b4d4 <_ZN6StringaSERKS_>
class StringSumHelper : public String
 8085640:	a823      	add	r0, sp, #140	; 0x8c
 8085642:	f005 fecd 	bl	808b3e0 <_ZN6StringD1Ev>
 8085646:	493c      	ldr	r1, [pc, #240]	; (8085738 <setup+0x380>)
 8085648:	2302      	movs	r3, #2
 808564a:	220c      	movs	r2, #12
 808564c:	f5a1 608e 	sub.w	r0, r1, #1136	; 0x470
 8085650:	f7fb fc44 	bl	8080edc <_ZN9SdFatBase5beginEP9SdSpiBasehh>
    if (sd.begin(CS)) { //if uSD is functioning and MCP error has not been logged yet.
 8085654:	2800      	cmp	r0, #0
 8085656:	f000 8186 	beq.w	8085966 <setup+0x5ae>
      Serial.print("Created new file to log to uSD card: ");
 808565a:	f007 f9d7 	bl	808ca0c <_Z16_fetch_usbserialv>
 808565e:	4937      	ldr	r1, [pc, #220]	; (808573c <setup+0x384>)
 8085660:	f006 f906 	bl	808b870 <_ZN5Print5printEPKc>
      Serial.println(fileName);
 8085664:	f007 f9d2 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085668:	6821      	ldr	r1, [r4, #0]
    if(debugging_enabled)
 808566a:	4c35      	ldr	r4, [pc, #212]	; (8085740 <setup+0x388>)
        Serial.println("No uSD card detected.");
 808566c:	f006 f913 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.println("Starting LMP91000 CO initialization");
 8085670:	f007 f9cc 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085674:	4933      	ldr	r1, [pc, #204]	; (8085744 <setup+0x38c>)
 8085676:	f006 f90e 	bl	808b896 <_ZN5Print7printlnEPKc>
    if(debugging_enabled)
 808567a:	6823      	ldr	r3, [r4, #0]
 808567c:	b14b      	cbz	r3, 8085692 <setup+0x2da>
        writeLogFile("Starting LMP91000 CO initialization");
 808567e:	4931      	ldr	r1, [pc, #196]	; (8085744 <setup+0x38c>)
 8085680:	a823      	add	r0, sp, #140	; 0x8c
 8085682:	f005 fef7 	bl	808b474 <_ZN6StringC1EPKc>
 8085686:	a823      	add	r0, sp, #140	; 0x8c
 8085688:	f7fc fb2a 	bl	8081ce0 <_Z12writeLogFile6String>
 808568c:	a823      	add	r0, sp, #140	; 0x8c
 808568e:	f005 fea7 	bl	808b3e0 <_ZN6StringD1Ev>
    Wire.begin();   //this must be done for the LMP91000
 8085692:	f007 fe15 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8085696:	f007 fb7d 	bl	808cd94 <_ZN7TwoWire5beginEv>
    digitalWrite(lmp91000_1_en, LOW); //enable the chip
 808569a:	2100      	movs	r1, #0
 808569c:	8828      	ldrh	r0, [r5, #0]
 808569e:	f007 fd7a 	bl	808d196 <digitalWrite>
    if(lmp91000.configure(LMP91000_TIA_GAIN_120K | LMP91000_RLOAD_10OHM, LMP91000_REF_SOURCE_EXT | LMP91000_INT_Z_50PCT | LMP91000_BIAS_SIGN_POS | LMP91000_BIAS_0PCT, LMP91000_FET_SHORT_DISABLED | LMP91000_OP_MODE_AMPEROMETRIC) == 0)
 80856a2:	2303      	movs	r3, #3
 80856a4:	22b0      	movs	r2, #176	; 0xb0
 80856a6:	2118      	movs	r1, #24
 80856a8:	4827      	ldr	r0, [pc, #156]	; (8085748 <setup+0x390>)
 80856aa:	f001 fcff 	bl	80870ac <_ZN8LMP910009configureEhhh>
 80856ae:	2800      	cmp	r0, #0
 80856b0:	f040 815d 	bne.w	808596e <setup+0x5b6>
          Serial.println("Couldn't communicate with LMP91000 for CO");
 80856b4:	f007 f9aa 	bl	808ca0c <_Z16_fetch_usbserialv>
 80856b8:	4924      	ldr	r1, [pc, #144]	; (808574c <setup+0x394>)
 80856ba:	f006 f8ec 	bl	808b896 <_ZN5Print7printlnEPKc>
          if(debugging_enabled){
 80856be:	6823      	ldr	r3, [r4, #0]
 80856c0:	2b00      	cmp	r3, #0
 80856c2:	d047      	beq.n	8085754 <setup+0x39c>
            writeLogFile("Couldn't communicate with LMP91000 for CO");
 80856c4:	4921      	ldr	r1, [pc, #132]	; (808574c <setup+0x394>)
 80856c6:	a823      	add	r0, sp, #140	; 0x8c
 80856c8:	f005 fed4 	bl	808b474 <_ZN6StringC1EPKc>
 80856cc:	a823      	add	r0, sp, #140	; 0x8c
 80856ce:	f7fc fb07 	bl	8081ce0 <_Z12writeLogFile6String>
 80856d2:	a823      	add	r0, sp, #140	; 0x8c
 80856d4:	e03c      	b.n	8085750 <setup+0x398>
 80856d6:	bf00      	nop
 80856d8:	20000cf8 	.word	0x20000cf8
 80856dc:	080942e2 	.word	0x080942e2
 80856e0:	200000c8 	.word	0x200000c8
 80856e4:	200000cc 	.word	0x200000cc
 80856e8:	20000094 	.word	0x20000094
 80856ec:	200000d0 	.word	0x200000d0
 80856f0:	200000d4 	.word	0x200000d4
 80856f4:	20000090 	.word	0x20000090
 80856f8:	20000088 	.word	0x20000088
 80856fc:	2000008c 	.word	0x2000008c
 8085700:	20000824 	.word	0x20000824
 8085704:	20000828 	.word	0x20000828
 8085708:	20000684 	.word	0x20000684
 808570c:	0808b1ad 	.word	0x0808b1ad
 8085710:	080931f2 	.word	0x080931f2
 8085714:	08080d2d 	.word	0x08080d2d
 8085718:	0808c37f 	.word	0x0808c37f
 808571c:	20000080 	.word	0x20000080
 8085720:	0809321d 	.word	0x0809321d
 8085724:	08093200 	.word	0x08093200
 8085728:	200006f8 	.word	0x200006f8
 808572c:	08093205 	.word	0x08093205
 8085730:	0809321a 	.word	0x0809321a
 8085734:	200007b4 	.word	0x200007b4
 8085738:	20000cd0 	.word	0x20000cd0
 808573c:	0809321f 	.word	0x0809321f
 8085740:	20000690 	.word	0x20000690
 8085744:	0809325b 	.word	0x0809325b
 8085748:	2000076d 	.word	0x2000076d
 808574c:	0809327f 	.word	0x0809327f
 8085750:	f005 fe46 	bl	808b3e0 <_ZN6StringD1Ev>
    ads1.begin();
 8085754:	48a6      	ldr	r0, [pc, #664]	; (80859f0 <setup+0x638>)
 8085756:	f001 fd9a 	bl	808728e <_ZN16Adafruit_ADS10155beginEv>
    if(Wire.requestFrom(0x49,1) == 0) { //if can't get 1 byte from ADC1, add it to the init error log
 808575a:	f007 fdb1 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 808575e:	2201      	movs	r2, #1
 8085760:	2149      	movs	r1, #73	; 0x49
 8085762:	f007 fb46 	bl	808cdf2 <_ZN7TwoWire11requestFromEhj>
 8085766:	2800      	cmp	r0, #0
 8085768:	f040 8117 	bne.w	808599a <setup+0x5e2>
      Serial.println("Could not communicate with Adafruit_ADS1115 for CO");
 808576c:	f007 f94e 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085770:	49a0      	ldr	r1, [pc, #640]	; (80859f4 <setup+0x63c>)
 8085772:	f006 f890 	bl	808b896 <_ZN5Print7printlnEPKc>
      if(debugging_enabled)
 8085776:	6823      	ldr	r3, [r4, #0]
 8085778:	b14b      	cbz	r3, 808578e <setup+0x3d6>
        writeLogFile("Could not communicate with Adafruit_ADS1115 for CO");
 808577a:	499e      	ldr	r1, [pc, #632]	; (80859f4 <setup+0x63c>)
 808577c:	a823      	add	r0, sp, #140	; 0x8c
 808577e:	f005 fe79 	bl	808b474 <_ZN6StringC1EPKc>
 8085782:	a823      	add	r0, sp, #140	; 0x8c
 8085784:	f7fc faac 	bl	8081ce0 <_Z12writeLogFile6String>
 8085788:	a823      	add	r0, sp, #140	; 0x8c
 808578a:	f005 fe29 	bl	808b3e0 <_ZN6StringD1Ev>
    Serial.println("Starting LMP91000 2 initialization");
 808578e:	f007 f93d 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085792:	4999      	ldr	r1, [pc, #612]	; (80859f8 <setup+0x640>)
 8085794:	f006 f87f 	bl	808b896 <_ZN5Print7printlnEPKc>
    if(debugging_enabled)
 8085798:	6823      	ldr	r3, [r4, #0]
 808579a:	b14b      	cbz	r3, 80857b0 <setup+0x3f8>
        writeLogFile("Starting LMP91000 2 initialization");
 808579c:	4996      	ldr	r1, [pc, #600]	; (80859f8 <setup+0x640>)
 808579e:	a823      	add	r0, sp, #140	; 0x8c
 80857a0:	f005 fe68 	bl	808b474 <_ZN6StringC1EPKc>
 80857a4:	a823      	add	r0, sp, #140	; 0x8c
 80857a6:	f7fc fa9b 	bl	8081ce0 <_Z12writeLogFile6String>
 80857aa:	a823      	add	r0, sp, #140	; 0x8c
 80857ac:	f005 fe18 	bl	808b3e0 <_ZN6StringD1Ev>
    digitalWrite(lmp91000_2_en, LOW); //enable the chip
 80857b0:	4d92      	ldr	r5, [pc, #584]	; (80859fc <setup+0x644>)
    Wire.begin();   //this must be done for the LMP91000
 80857b2:	f007 fd85 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 80857b6:	f007 faed 	bl	808cd94 <_ZN7TwoWire5beginEv>
    digitalWrite(lmp91000_2_en, LOW); //enable the chip
 80857ba:	2100      	movs	r1, #0
 80857bc:	8828      	ldrh	r0, [r5, #0]
 80857be:	f007 fcea 	bl	808d196 <digitalWrite>
    if(lmp91000.configure(LMP91000_TIA_GAIN_120K | LMP91000_RLOAD_10OHM, LMP91000_REF_SOURCE_EXT | LMP91000_INT_Z_50PCT | LMP91000_BIAS_SIGN_POS | LMP91000_BIAS_0PCT, LMP91000_FET_SHORT_DISABLED | LMP91000_OP_MODE_AMPEROMETRIC) == 0)
 80857c2:	2303      	movs	r3, #3
 80857c4:	22b0      	movs	r2, #176	; 0xb0
 80857c6:	2118      	movs	r1, #24
 80857c8:	488d      	ldr	r0, [pc, #564]	; (8085a00 <setup+0x648>)
 80857ca:	f001 fc6f 	bl	80870ac <_ZN8LMP910009configureEhhh>
 80857ce:	2800      	cmp	r0, #0
 80857d0:	f040 80e8 	bne.w	80859a4 <setup+0x5ec>
          Serial.println("Couldn't communicate with LMP91000 for 2");
 80857d4:	f007 f91a 	bl	808ca0c <_Z16_fetch_usbserialv>
 80857d8:	498a      	ldr	r1, [pc, #552]	; (8085a04 <setup+0x64c>)
 80857da:	f006 f85c 	bl	808b896 <_ZN5Print7printlnEPKc>
          writeLogFile("Couldn't communicate with LMP91000 for 2");
 80857de:	4989      	ldr	r1, [pc, #548]	; (8085a04 <setup+0x64c>)
 80857e0:	a823      	add	r0, sp, #140	; 0x8c
 80857e2:	f005 fe47 	bl	808b474 <_ZN6StringC1EPKc>
 80857e6:	a823      	add	r0, sp, #140	; 0x8c
 80857e8:	f7fc fa7a 	bl	8081ce0 <_Z12writeLogFile6String>
 80857ec:	a823      	add	r0, sp, #140	; 0x8c
 80857ee:	f005 fdf7 	bl	808b3e0 <_ZN6StringD1Ev>
    ads2.begin();
 80857f2:	4885      	ldr	r0, [pc, #532]	; (8085a08 <setup+0x650>)
 80857f4:	f001 fd4b 	bl	808728e <_ZN16Adafruit_ADS10155beginEv>
    if(Wire.requestFrom(0x4A,1) == 0) { //if can't get 1 byte from ADC1, add it to the init error log
 80857f8:	f007 fd62 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 80857fc:	2201      	movs	r2, #1
 80857fe:	214a      	movs	r1, #74	; 0x4a
 8085800:	f007 faf7 	bl	808cdf2 <_ZN7TwoWire11requestFromEhj>
 8085804:	2800      	cmp	r0, #0
 8085806:	f040 80e3 	bne.w	80859d0 <setup+0x618>
      Serial.println("Could not communicate with Adafruit_ADS1115 for CO");
 808580a:	f007 f8ff 	bl	808ca0c <_Z16_fetch_usbserialv>
 808580e:	4979      	ldr	r1, [pc, #484]	; (80859f4 <setup+0x63c>)
 8085810:	f006 f841 	bl	808b896 <_ZN5Print7printlnEPKc>
      if(debugging_enabled)
 8085814:	6823      	ldr	r3, [r4, #0]
 8085816:	b14b      	cbz	r3, 808582c <setup+0x474>
        writeLogFile("Could not communicate with Adafruit_ADS1115 for CO");
 8085818:	4976      	ldr	r1, [pc, #472]	; (80859f4 <setup+0x63c>)
 808581a:	a823      	add	r0, sp, #140	; 0x8c
 808581c:	f005 fe2a 	bl	808b474 <_ZN6StringC1EPKc>
 8085820:	a823      	add	r0, sp, #140	; 0x8c
 8085822:	f7fc fa5d 	bl	8081ce0 <_Z12writeLogFile6String>
 8085826:	a823      	add	r0, sp, #140	; 0x8c
 8085828:	f005 fdda 	bl	808b3e0 <_ZN6StringD1Ev>
    if (!bme.begin()) {
 808582c:	2177      	movs	r1, #119	; 0x77
 808582e:	4877      	ldr	r0, [pc, #476]	; (8085a0c <setup+0x654>)
 8085830:	f003 fcea 	bl	8089208 <_ZN15Adafruit_BME6805beginEh>
 8085834:	2800      	cmp	r0, #0
 8085836:	f040 80d0 	bne.w	80859da <setup+0x622>
      Serial.println("Could not find a valid BME680 sensor, check wiring!");
 808583a:	f007 f8e7 	bl	808ca0c <_Z16_fetch_usbserialv>
 808583e:	4974      	ldr	r1, [pc, #464]	; (8085a10 <setup+0x658>)
 8085840:	f006 f829 	bl	808b896 <_ZN5Print7printlnEPKc>
      if(debugging_enabled)
 8085844:	6823      	ldr	r3, [r4, #0]
 8085846:	b14b      	cbz	r3, 808585c <setup+0x4a4>
          writeLogFile("Could not find a valid BME680 sensor, check wiring!");
 8085848:	4971      	ldr	r1, [pc, #452]	; (8085a10 <setup+0x658>)
        writeLogFile("Initialized BME Sensor");
 808584a:	a823      	add	r0, sp, #140	; 0x8c
 808584c:	f005 fe12 	bl	808b474 <_ZN6StringC1EPKc>
 8085850:	a823      	add	r0, sp, #140	; 0x8c
 8085852:	f7fc fa45 	bl	8081ce0 <_Z12writeLogFile6String>
 8085856:	a823      	add	r0, sp, #140	; 0x8c
 8085858:	f005 fdc2 	bl	808b3e0 <_ZN6StringD1Ev>
    if(!t6713.begin()){
 808585c:	486d      	ldr	r0, [pc, #436]	; (8085a14 <setup+0x65c>)
 808585e:	f001 fe15 	bl	808748c <_ZN13Telaire_T67135beginEv>
 8085862:	b980      	cbnz	r0, 8085886 <setup+0x4ce>
      Serial.println("Could not find a valid T6713 sensor, check wiring!");
 8085864:	f007 f8d2 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085868:	496b      	ldr	r1, [pc, #428]	; (8085a18 <setup+0x660>)
 808586a:	f006 f814 	bl	808b896 <_ZN5Print7printlnEPKc>
      if(debugging_enabled)
 808586e:	6823      	ldr	r3, [r4, #0]
 8085870:	b14b      	cbz	r3, 8085886 <setup+0x4ce>
          writeLogFile("Could not find a valid T6713");
 8085872:	496a      	ldr	r1, [pc, #424]	; (8085a1c <setup+0x664>)
 8085874:	a823      	add	r0, sp, #140	; 0x8c
 8085876:	f005 fdfd 	bl	808b474 <_ZN6StringC1EPKc>
 808587a:	a823      	add	r0, sp, #140	; 0x8c
 808587c:	f7fc fa30 	bl	8081ce0 <_Z12writeLogFile6String>
 8085880:	a823      	add	r0, sp, #140	; 0x8c
 8085882:	f005 fdad 	bl	808b3e0 <_ZN6StringD1Ev>
    bme.setTemperatureOversampling(BME680_OS_8X);
 8085886:	2104      	movs	r1, #4
 8085888:	4860      	ldr	r0, [pc, #384]	; (8085a0c <setup+0x654>)
 808588a:	f003 fc1f 	bl	80890cc <_ZN15Adafruit_BME68026setTemperatureOversamplingEh>
    bme.setHumidityOversampling(BME680_OS_2X);
 808588e:	2102      	movs	r1, #2
 8085890:	485e      	ldr	r0, [pc, #376]	; (8085a0c <setup+0x654>)
 8085892:	f003 fc28 	bl	80890e6 <_ZN15Adafruit_BME68023setHumidityOversamplingEh>
    bme.setPressureOversampling(BME680_OS_4X);
 8085896:	2103      	movs	r1, #3
 8085898:	485c      	ldr	r0, [pc, #368]	; (8085a0c <setup+0x654>)
 808589a:	f003 fc31 	bl	8089100 <_ZN15Adafruit_BME68023setPressureOversamplingEh>
    bme.setIIRFilterSize(BME680_FILTER_SIZE_3);
 808589e:	2102      	movs	r1, #2
 80858a0:	485a      	ldr	r0, [pc, #360]	; (8085a0c <setup+0x654>)
 80858a2:	f003 fc3a 	bl	808911a <_ZN15Adafruit_BME68016setIIRFilterSizeEh>
    bme.setGasHeater(320, 150); // 320*C for 150 ms
 80858a6:	2296      	movs	r2, #150	; 0x96
 80858a8:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80858ac:	4857      	ldr	r0, [pc, #348]	; (8085a0c <setup+0x654>)
 80858ae:	f003 fbff 	bl	80890b0 <_ZN15Adafruit_BME68012setGasHeaterEtt>
    resetESP();
 80858b2:	f7fc fe4f 	bl	8082554 <_Z8resetESPv>
    Serial.println("ESP reset!");
 80858b6:	f007 f8a9 	bl	808ca0c <_Z16_fetch_usbserialv>
 80858ba:	4959      	ldr	r1, [pc, #356]	; (8085a20 <setup+0x668>)
 80858bc:	f005 ffeb 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.print("FW Version: ");
 80858c0:	f007 f8a4 	bl	808ca0c <_Z16_fetch_usbserialv>
 80858c4:	4957      	ldr	r1, [pc, #348]	; (8085a24 <setup+0x66c>)
 80858c6:	f005 ffd3 	bl	808b870 <_ZN5Print5printEPKc>
    Serial.println(APP_VERSION);
 80858ca:	f007 f89f 	bl	808ca0c <_Z16_fetch_usbserialv>
 80858ce:	220a      	movs	r2, #10
 80858d0:	2107      	movs	r1, #7
 80858d2:	f7ff fa0e 	bl	8084cf2 <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.print("Build: ");
 80858d6:	f007 f899 	bl	808ca0c <_Z16_fetch_usbserialv>
 80858da:	4953      	ldr	r1, [pc, #332]	; (8085a28 <setup+0x670>)
 80858dc:	f005 ffc8 	bl	808b870 <_ZN5Print5printEPKc>
    Serial.println(BUILD_VERSION);
 80858e0:	f007 f894 	bl	808ca0c <_Z16_fetch_usbserialv>
 80858e4:	220a      	movs	r2, #10
 80858e6:	210d      	movs	r1, #13
 80858e8:	f7ff fa03 	bl	8084cf2 <_ZN5Print7printlnIiLi0EEEjT_i>
    enableContinuousGPS();
 80858ec:	f7fb fe68 	bl	80815c0 <_Z19enableContinuousGPSv>
    if(google_location_en){
 80858f0:	4b4e      	ldr	r3, [pc, #312]	; (8085a2c <setup+0x674>)
 80858f2:	681b      	ldr	r3, [r3, #0]
 80858f4:	b15b      	cbz	r3, 808590e <setup+0x556>
        Serial.println("Setting up google maps geolocation.");
 80858f6:	f007 f889 	bl	808ca0c <_Z16_fetch_usbserialv>
 80858fa:	494d      	ldr	r1, [pc, #308]	; (8085a30 <setup+0x678>)
 80858fc:	f005 ffcb 	bl	808b896 <_ZN5Print7printlnEPKc>
        locator.withSubscribe(locationCallback).withLocatePeriodic(5); //setup google maps geolocation
 8085900:	494c      	ldr	r1, [pc, #304]	; (8085a34 <setup+0x67c>)
 8085902:	484d      	ldr	r0, [pc, #308]	; (8085a38 <setup+0x680>)
 8085904:	f004 f8ea 	bl	8089adc <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE>
 8085908:	2105      	movs	r1, #5
 808590a:	f003 ffb7 	bl	808987c <_ZN23GoogleMapsDeviceLocator18withLocatePeriodicEm>
#define SYSTEM_VERSION_200ALPHA2
#define SYSTEM_VERSION_200ALPHA3
#define SYSTEM_VERSION_200ALPHA4
#define SYSTEM_VERSION_200RC1

typedef struct __attribute__((packed)) SystemVersionInfo
 808590e:	231c      	movs	r3, #28
    static bool enableFeature(const WiFiTesterFeature feature);

    String version()
    {
        SystemVersionInfo info;
        system_version_info(&info, nullptr);
 8085910:	2100      	movs	r1, #0
 8085912:	a823      	add	r0, sp, #140	; 0x8c
 8085914:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
 8085918:	f005 f86c 	bl	808a9f4 <system_version_info>
        return String(info.versionString);
 808591c:	a925      	add	r1, sp, #148	; 0x94
 808591e:	a81f      	add	r0, sp, #124	; 0x7c
 8085920:	f005 fda8 	bl	808b474 <_ZN6StringC1EPKc>
    Log.info("System version: %s", (const char*)System.version());
 8085924:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8085926:	4945      	ldr	r1, [pc, #276]	; (8085a3c <setup+0x684>)
 8085928:	4845      	ldr	r0, [pc, #276]	; (8085a40 <setup+0x688>)
 808592a:	f7fb fa48 	bl	8080dbe <_ZNK5spark6Logger4infoEPKcz>
 808592e:	a81f      	add	r0, sp, #124	; 0x7c
 8085930:	f005 fd56 	bl	808b3e0 <_ZN6StringD1Ev>
    String init_log; //intialization error log
 8085934:	a803      	add	r0, sp, #12
 8085936:	f005 fd53 	bl	808b3e0 <_ZN6StringD1Ev>
}
 808593a:	b02a      	add	sp, #168	; 0xa8
 808593c:	bd70      	pop	{r4, r5, r6, pc}
    }else if((battery_threshold_enable == 1) && (fuel.getSoC() < BATTERY_THRESHOLD) && (powerCheck.getHasPower() == 0)){
 808593e:	4b41      	ldr	r3, [pc, #260]	; (8085a44 <setup+0x68c>)
 8085940:	681b      	ldr	r3, [r3, #0]
 8085942:	2b01      	cmp	r3, #1
 8085944:	f47f ad96 	bne.w	8085474 <setup+0xbc>
 8085948:	483f      	ldr	r0, [pc, #252]	; (8085a48 <setup+0x690>)
 808594a:	f006 fbf7 	bl	808c13c <_ZN9FuelGauge6getSoCEv>
 808594e:	493f      	ldr	r1, [pc, #252]	; (8085a4c <setup+0x694>)
 8085950:	f008 fcc8 	bl	808e2e4 <__aeabi_fcmplt>
 8085954:	2800      	cmp	r0, #0
 8085956:	f43f ad8d 	beq.w	8085474 <setup+0xbc>
 808595a:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 808595e:	2b00      	cmp	r3, #0
 8085960:	f47f ad88 	bne.w	8085474 <setup+0xbc>
 8085964:	e584      	b.n	8085470 <setup+0xb8>
        Serial.println("No uSD card detected.");
 8085966:	f007 f851 	bl	808ca0c <_Z16_fetch_usbserialv>
 808596a:	4939      	ldr	r1, [pc, #228]	; (8085a50 <setup+0x698>)
 808596c:	e67d      	b.n	808566a <setup+0x2b2>
          Serial.println("Initialized LMP91000 for CO");
 808596e:	f007 f84d 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085972:	4938      	ldr	r1, [pc, #224]	; (8085a54 <setup+0x69c>)
 8085974:	f005 ff8f 	bl	808b896 <_ZN5Print7printlnEPKc>
          if(debugging_enabled){
 8085978:	6823      	ldr	r3, [r4, #0]
 808597a:	b14b      	cbz	r3, 8085990 <setup+0x5d8>
            writeLogFile("Initialized LMP91000 for CO");
 808597c:	4935      	ldr	r1, [pc, #212]	; (8085a54 <setup+0x69c>)
 808597e:	a823      	add	r0, sp, #140	; 0x8c
 8085980:	f005 fd78 	bl	808b474 <_ZN6StringC1EPKc>
 8085984:	a823      	add	r0, sp, #140	; 0x8c
 8085986:	f7fc f9ab 	bl	8081ce0 <_Z12writeLogFile6String>
 808598a:	a823      	add	r0, sp, #140	; 0x8c
 808598c:	f005 fd28 	bl	808b3e0 <_ZN6StringD1Ev>
          digitalWrite(lmp91000_1_en, HIGH);  //disable
 8085990:	2101      	movs	r1, #1
 8085992:	8828      	ldrh	r0, [r5, #0]
 8085994:	f007 fbff 	bl	808d196 <digitalWrite>
 8085998:	e6dc      	b.n	8085754 <setup+0x39c>
      ads1.setGain(GAIN_TWOTHIRDS);
 808599a:	2100      	movs	r1, #0
 808599c:	4814      	ldr	r0, [pc, #80]	; (80859f0 <setup+0x638>)
 808599e:	f001 fc7d 	bl	808729c <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
 80859a2:	e6f4      	b.n	808578e <setup+0x3d6>
          Serial.println("Initialized LMP91000 for 2");
 80859a4:	f007 f832 	bl	808ca0c <_Z16_fetch_usbserialv>
 80859a8:	492b      	ldr	r1, [pc, #172]	; (8085a58 <setup+0x6a0>)
 80859aa:	f005 ff74 	bl	808b896 <_ZN5Print7printlnEPKc>
          if(debugging_enabled)
 80859ae:	6823      	ldr	r3, [r4, #0]
 80859b0:	b14b      	cbz	r3, 80859c6 <setup+0x60e>
            writeLogFile("Initialized LMP91000 for 2");
 80859b2:	4929      	ldr	r1, [pc, #164]	; (8085a58 <setup+0x6a0>)
 80859b4:	a823      	add	r0, sp, #140	; 0x8c
 80859b6:	f005 fd5d 	bl	808b474 <_ZN6StringC1EPKc>
 80859ba:	a823      	add	r0, sp, #140	; 0x8c
 80859bc:	f7fc f990 	bl	8081ce0 <_Z12writeLogFile6String>
 80859c0:	a823      	add	r0, sp, #140	; 0x8c
 80859c2:	f005 fd0d 	bl	808b3e0 <_ZN6StringD1Ev>
          digitalWrite(lmp91000_2_en, HIGH);  //disable
 80859c6:	2101      	movs	r1, #1
 80859c8:	8828      	ldrh	r0, [r5, #0]
 80859ca:	f007 fbe4 	bl	808d196 <digitalWrite>
 80859ce:	e710      	b.n	80857f2 <setup+0x43a>
      ads2.setGain(GAIN_TWOTHIRDS);
 80859d0:	2100      	movs	r1, #0
 80859d2:	480d      	ldr	r0, [pc, #52]	; (8085a08 <setup+0x650>)
 80859d4:	f001 fc62 	bl	808729c <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
 80859d8:	e728      	b.n	808582c <setup+0x474>
      Serial.println("Initialized BME Sensor");
 80859da:	f007 f817 	bl	808ca0c <_Z16_fetch_usbserialv>
 80859de:	491f      	ldr	r1, [pc, #124]	; (8085a5c <setup+0x6a4>)
 80859e0:	f005 ff59 	bl	808b896 <_ZN5Print7printlnEPKc>
      if(debugging_enabled)
 80859e4:	6823      	ldr	r3, [r4, #0]
 80859e6:	2b00      	cmp	r3, #0
 80859e8:	f43f af38 	beq.w	808585c <setup+0x4a4>
        writeLogFile("Initialized BME Sensor");
 80859ec:	491b      	ldr	r1, [pc, #108]	; (8085a5c <setup+0x6a4>)
 80859ee:	e72c      	b.n	808584a <setup+0x492>
 80859f0:	200005d8 	.word	0x200005d8
 80859f4:	080932c5 	.word	0x080932c5
 80859f8:	080932f8 	.word	0x080932f8
 80859fc:	200000cc 	.word	0x200000cc
 8085a00:	2000076d 	.word	0x2000076d
 8085a04:	0809331b 	.word	0x0809331b
 8085a08:	200005de 	.word	0x200005de
 8085a0c:	200005ec 	.word	0x200005ec
 8085a10:	0809335f 	.word	0x0809335f
 8085a14:	20000cfa 	.word	0x20000cfa
 8085a18:	080933aa 	.word	0x080933aa
 8085a1c:	080933dd 	.word	0x080933dd
 8085a20:	080933fa 	.word	0x080933fa
 8085a24:	08093405 	.word	0x08093405
 8085a28:	08093412 	.word	0x08093412
 8085a2c:	20000718 	.word	0x20000718
 8085a30:	0809341a 	.word	0x0809341a
 8085a34:	08080bdd 	.word	0x08080bdd
 8085a38:	20000770 	.word	0x20000770
 8085a3c:	0809343e 	.word	0x0809343e
 8085a40:	20000e84 	.word	0x20000e84
 8085a44:	200005e8 	.word	0x200005e8
 8085a48:	2000070c 	.word	0x2000070c
 8085a4c:	41a00000 	.word	0x41a00000
 8085a50:	08093245 	.word	0x08093245
 8085a54:	080932a9 	.word	0x080932a9
 8085a58:	08093344 	.word	0x08093344
 8085a5c:	08093393 	.word	0x08093393

08085a60 <_Z20serialGetAverageTimev>:
void serialGetAverageTime(void){
 8085a60:	b510      	push	{r4, lr}
 8085a62:	b086      	sub	sp, #24
    Serial.println();
 8085a64:	f006 ffd2 	bl	808ca0c <_Z16_fetch_usbserialv>
    Serial.print(measurements_to_average);
 8085a68:	4c28      	ldr	r4, [pc, #160]	; (8085b0c <_Z20serialGetAverageTimev+0xac>)
    Serial.println();
 8085a6a:	f005 ff08 	bl	808b87e <_ZN5Print7printlnEv>
    Serial.print("Current Frequency: ");
 8085a6e:	f006 ffcd 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085a72:	4927      	ldr	r1, [pc, #156]	; (8085b10 <_Z20serialGetAverageTimev+0xb0>)
 8085a74:	f005 fefc 	bl	808b870 <_ZN5Print5printEPKc>
    Serial.print(measurements_to_average);
 8085a78:	f006 ffc8 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085a7c:	220a      	movs	r2, #10
 8085a7e:	6821      	ldr	r1, [r4, #0]
 8085a80:	f7ff f918 	bl	8084cb4 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println("(~2 second) measurements");
 8085a84:	f006 ffc2 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085a88:	4922      	ldr	r1, [pc, #136]	; (8085b14 <_Z20serialGetAverageTimev+0xb4>)
 8085a8a:	f005 ff04 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new amount\n\r");
 8085a8e:	f006 ffbd 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085a92:	4921      	ldr	r1, [pc, #132]	; (8085b18 <_Z20serialGetAverageTimev+0xb8>)
 8085a94:	f005 feec 	bl	808b870 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8085a98:	f006 ffb8 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085a9c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8085aa0:	f006 f855 	bl	808bb4e <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8085aa4:	f006 ffb2 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085aa8:	220d      	movs	r2, #13
 8085aaa:	4601      	mov	r1, r0
 8085aac:	a802      	add	r0, sp, #8
 8085aae:	f006 f8b9 	bl	808bc24 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8085ab2:	a802      	add	r0, sp, #8
 8085ab4:	f005 fe8e 	bl	808b7d4 <_ZNK6String5toIntEv>
    if(tempValue >= 1 && tempValue < 10000){
 8085ab8:	f242 730e 	movw	r3, #9998	; 0x270e
    int tempValue = tempString.toInt();
 8085abc:	9001      	str	r0, [sp, #4]
    if(tempValue >= 1 && tempValue < 10000){
 8085abe:	3801      	subs	r0, #1
 8085ac0:	4298      	cmp	r0, r3
 8085ac2:	d81c      	bhi.n	8085afe <_Z20serialGetAverageTimev+0x9e>
        Serial.print("\n\rNew Frequency: ");
 8085ac4:	f006 ffa2 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085ac8:	4914      	ldr	r1, [pc, #80]	; (8085b1c <_Z20serialGetAverageTimev+0xbc>)
 8085aca:	f005 fed1 	bl	808b870 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8085ace:	f006 ff9d 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085ad2:	220a      	movs	r2, #10
 8085ad4:	9901      	ldr	r1, [sp, #4]
 8085ad6:	f7ff f90c 	bl	8084cf2 <_ZN5Print7printlnIiLi0EEEjT_i>
        Serial.println("(~2 second) measurements");
 8085ada:	f006 ff97 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085ade:	490d      	ldr	r1, [pc, #52]	; (8085b14 <_Z20serialGetAverageTimev+0xb4>)
 8085ae0:	f005 fed9 	bl	808b896 <_ZN5Print7printlnEPKc>
        measurements_to_average = tempValue;
 8085ae4:	9b01      	ldr	r3, [sp, #4]
 8085ae6:	6023      	str	r3, [r4, #0]
        EEPROM.put(MEASUREMENTS_TO_AVG_MEM_ADDRESS, tempValue);
 8085ae8:	f007 fb98 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8085aec:	2074      	movs	r0, #116	; 0x74
 8085aee:	a901      	add	r1, sp, #4
 8085af0:	f7fb f915 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8085af4:	a802      	add	r0, sp, #8
 8085af6:	f005 fc73 	bl	808b3e0 <_ZN6StringD1Ev>
}
 8085afa:	b006      	add	sp, #24
 8085afc:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8085afe:	f006 ff85 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085b02:	4907      	ldr	r1, [pc, #28]	; (8085b20 <_Z20serialGetAverageTimev+0xc0>)
 8085b04:	f005 fec7 	bl	808b896 <_ZN5Print7printlnEPKc>
 8085b08:	e7f4      	b.n	8085af4 <_Z20serialGetAverageTimev+0x94>
 8085b0a:	bf00      	nop
 8085b0c:	200007f8 	.word	0x200007f8
 8085b10:	08093451 	.word	0x08093451
 8085b14:	08093465 	.word	0x08093465
 8085b18:	0809347e 	.word	0x0809347e
 8085b1c:	08093491 	.word	0x08093491
 8085b20:	080920b7 	.word	0x080920b7

08085b24 <_Z16serialGetCo2Zerov>:
void serialGetCo2Zero(void){
 8085b24:	b510      	push	{r4, lr}
 8085b26:	b086      	sub	sp, #24
    Serial.println();
 8085b28:	f006 ff70 	bl	808ca0c <_Z16_fetch_usbserialv>
    Serial.print(CO2_zero);
 8085b2c:	4c25      	ldr	r4, [pc, #148]	; (8085bc4 <_Z16serialGetCo2Zerov+0xa0>)
    Serial.println();
 8085b2e:	f005 fea6 	bl	808b87e <_ZN5Print7printlnEv>
    Serial.print("Current CO2 zero:");
 8085b32:	f006 ff6b 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085b36:	4924      	ldr	r1, [pc, #144]	; (8085bc8 <_Z16serialGetCo2Zerov+0xa4>)
 8085b38:	f005 fe9a 	bl	808b870 <_ZN5Print5printEPKc>
    Serial.print(CO2_zero);
 8085b3c:	f006 ff66 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085b40:	220a      	movs	r2, #10
 8085b42:	6821      	ldr	r1, [r4, #0]
 8085b44:	f7ff f8b6 	bl	8084cb4 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println(" ppm");
 8085b48:	f006 ff60 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085b4c:	491f      	ldr	r1, [pc, #124]	; (8085bcc <_Z16serialGetCo2Zerov+0xa8>)
 8085b4e:	f005 fea2 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO2 Zero\n\r");
 8085b52:	f006 ff5b 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085b56:	491e      	ldr	r1, [pc, #120]	; (8085bd0 <_Z16serialGetCo2Zerov+0xac>)
 8085b58:	f005 fe8a 	bl	808b870 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8085b5c:	f006 ff56 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085b60:	f24c 3150 	movw	r1, #50000	; 0xc350
 8085b64:	f005 fff3 	bl	808bb4e <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8085b68:	f006 ff50 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085b6c:	220d      	movs	r2, #13
 8085b6e:	4601      	mov	r1, r0
 8085b70:	a802      	add	r0, sp, #8
 8085b72:	f006 f857 	bl	808bc24 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8085b76:	a802      	add	r0, sp, #8
 8085b78:	f005 fe2c 	bl	808b7d4 <_ZNK6String5toIntEv>
 8085b7c:	9001      	str	r0, [sp, #4]
    if(tempValue >= -1000 && tempValue < 1000){
 8085b7e:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8085b82:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8085b86:	d217      	bcs.n	8085bb8 <_Z16serialGetCo2Zerov+0x94>
        Serial.print("\n\rNew CO2 zero: ");
 8085b88:	f006 ff40 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085b8c:	4911      	ldr	r1, [pc, #68]	; (8085bd4 <_Z16serialGetCo2Zerov+0xb0>)
 8085b8e:	f005 fe6f 	bl	808b870 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8085b92:	f006 ff3b 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085b96:	9901      	ldr	r1, [sp, #4]
 8085b98:	220a      	movs	r2, #10
 8085b9a:	f7ff f8aa 	bl	8084cf2 <_ZN5Print7printlnIiLi0EEEjT_i>
        CO2_zero = tempValue;
 8085b9e:	9b01      	ldr	r3, [sp, #4]
 8085ba0:	6023      	str	r3, [r4, #0]
        EEPROM.put(CO2_ZERO_MEM_ADDRESS, tempValue);
 8085ba2:	f007 fb3b 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8085ba6:	2004      	movs	r0, #4
 8085ba8:	a901      	add	r1, sp, #4
 8085baa:	f7fb f8b8 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8085bae:	a802      	add	r0, sp, #8
 8085bb0:	f005 fc16 	bl	808b3e0 <_ZN6StringD1Ev>
}
 8085bb4:	b006      	add	sp, #24
 8085bb6:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8085bb8:	f006 ff28 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085bbc:	4906      	ldr	r1, [pc, #24]	; (8085bd8 <_Z16serialGetCo2Zerov+0xb4>)
 8085bbe:	f005 fe6a 	bl	808b896 <_ZN5Print7printlnEPKc>
 8085bc2:	e7f4      	b.n	8085bae <_Z16serialGetCo2Zerov+0x8a>
 8085bc4:	2000033c 	.word	0x2000033c
 8085bc8:	080934a3 	.word	0x080934a3
 8085bcc:	080920db 	.word	0x080920db
 8085bd0:	080934b5 	.word	0x080934b5
 8085bd4:	080934ca 	.word	0x080934ca
 8085bd8:	080920b7 	.word	0x080920b7

08085bdc <_Z15serialGetCoZerov>:
void serialGetCoZero(void){
 8085bdc:	b510      	push	{r4, lr}
 8085bde:	b086      	sub	sp, #24
    Serial.println();
 8085be0:	f006 ff14 	bl	808ca0c <_Z16_fetch_usbserialv>
    Serial.print(CO_zero);
 8085be4:	4c26      	ldr	r4, [pc, #152]	; (8085c80 <_Z15serialGetCoZerov+0xa4>)
    Serial.println();
 8085be6:	f005 fe4a 	bl	808b87e <_ZN5Print7printlnEv>
    Serial.print("Current CO zero:");
 8085bea:	f006 ff0f 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085bee:	4925      	ldr	r1, [pc, #148]	; (8085c84 <_Z15serialGetCoZerov+0xa8>)
 8085bf0:	f005 fe3e 	bl	808b870 <_ZN5Print5printEPKc>
    Serial.print(CO_zero);
 8085bf4:	f006 ff0a 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085bf8:	220a      	movs	r2, #10
 8085bfa:	6821      	ldr	r1, [r4, #0]
 8085bfc:	f7ff f85a 	bl	8084cb4 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println(" ppb");
 8085c00:	f006 ff04 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085c04:	4920      	ldr	r1, [pc, #128]	; (8085c88 <_Z15serialGetCoZerov+0xac>)
 8085c06:	f005 fe46 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO Zero\n\r");
 8085c0a:	f006 feff 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085c0e:	491f      	ldr	r1, [pc, #124]	; (8085c8c <_Z15serialGetCoZerov+0xb0>)
 8085c10:	f005 fe2e 	bl	808b870 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8085c14:	f006 fefa 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085c18:	f24c 3150 	movw	r1, #50000	; 0xc350
 8085c1c:	f005 ff97 	bl	808bb4e <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8085c20:	f006 fef4 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085c24:	220d      	movs	r2, #13
 8085c26:	4601      	mov	r1, r0
 8085c28:	a802      	add	r0, sp, #8
 8085c2a:	f005 fffb 	bl	808bc24 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8085c2e:	a802      	add	r0, sp, #8
 8085c30:	f005 fdd0 	bl	808b7d4 <_ZNK6String5toIntEv>
    if(tempValue >= -5000 && tempValue < 5000){
 8085c34:	f242 730f 	movw	r3, #9999	; 0x270f
    int tempValue = tempString.toInt();
 8085c38:	9001      	str	r0, [sp, #4]
    if(tempValue >= -5000 && tempValue < 5000){
 8085c3a:	f500 509c 	add.w	r0, r0, #4992	; 0x1380
 8085c3e:	3008      	adds	r0, #8
 8085c40:	4298      	cmp	r0, r3
 8085c42:	d817      	bhi.n	8085c74 <_Z15serialGetCoZerov+0x98>
        Serial.print("\n\rNew CO zero: ");
 8085c44:	f006 fee2 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085c48:	4911      	ldr	r1, [pc, #68]	; (8085c90 <_Z15serialGetCoZerov+0xb4>)
 8085c4a:	f005 fe11 	bl	808b870 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8085c4e:	f006 fedd 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085c52:	9901      	ldr	r1, [sp, #4]
 8085c54:	220a      	movs	r2, #10
 8085c56:	f7ff f84c 	bl	8084cf2 <_ZN5Print7printlnIiLi0EEEjT_i>
        CO_zero = tempValue;
 8085c5a:	9b01      	ldr	r3, [sp, #4]
 8085c5c:	6023      	str	r3, [r4, #0]
        EEPROM.put(CO_ZERO_MEM_ADDRESS, tempValue);
 8085c5e:	f007 fadd 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8085c62:	200c      	movs	r0, #12
 8085c64:	a901      	add	r1, sp, #4
 8085c66:	f7fb f85a 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8085c6a:	a802      	add	r0, sp, #8
 8085c6c:	f005 fbb8 	bl	808b3e0 <_ZN6StringD1Ev>
}
 8085c70:	b006      	add	sp, #24
 8085c72:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8085c74:	f006 feca 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085c78:	4906      	ldr	r1, [pc, #24]	; (8085c94 <_Z15serialGetCoZerov+0xb8>)
 8085c7a:	f005 fe0c 	bl	808b896 <_ZN5Print7printlnEPKc>
 8085c7e:	e7f4      	b.n	8085c6a <_Z15serialGetCoZerov+0x8e>
 8085c80:	20000350 	.word	0x20000350
 8085c84:	080934db 	.word	0x080934db
 8085c88:	080934ec 	.word	0x080934ec
 8085c8c:	080934f1 	.word	0x080934f1
 8085c90:	08093505 	.word	0x08093505
 8085c94:	080920b7 	.word	0x080920b7

08085c98 <_Z16serialGetPm1Zerov>:
void serialGetPm1Zero(void){
 8085c98:	b510      	push	{r4, lr}
 8085c9a:	b086      	sub	sp, #24
    Serial.println();
 8085c9c:	f006 feb6 	bl	808ca0c <_Z16_fetch_usbserialv>
    Serial.print(PM_1_zero);
 8085ca0:	4c25      	ldr	r4, [pc, #148]	; (8085d38 <_Z16serialGetPm1Zerov+0xa0>)
    Serial.println();
 8085ca2:	f005 fdec 	bl	808b87e <_ZN5Print7printlnEv>
    Serial.print("Current PM1 zero:");
 8085ca6:	f006 feb1 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085caa:	4924      	ldr	r1, [pc, #144]	; (8085d3c <_Z16serialGetPm1Zerov+0xa4>)
 8085cac:	f005 fde0 	bl	808b870 <_ZN5Print5printEPKc>
    Serial.print(PM_1_zero);
 8085cb0:	f006 feac 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085cb4:	220a      	movs	r2, #10
 8085cb6:	6821      	ldr	r1, [r4, #0]
 8085cb8:	f7fe fffc 	bl	8084cb4 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println(" ug/m3");
 8085cbc:	f006 fea6 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085cc0:	491f      	ldr	r1, [pc, #124]	; (8085d40 <_Z16serialGetPm1Zerov+0xa8>)
 8085cc2:	f005 fde8 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM1 Zero\n\r");
 8085cc6:	f006 fea1 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085cca:	491e      	ldr	r1, [pc, #120]	; (8085d44 <_Z16serialGetPm1Zerov+0xac>)
 8085ccc:	f005 fdd0 	bl	808b870 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8085cd0:	f006 fe9c 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085cd4:	f24c 3150 	movw	r1, #50000	; 0xc350
 8085cd8:	f005 ff39 	bl	808bb4e <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8085cdc:	f006 fe96 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085ce0:	220d      	movs	r2, #13
 8085ce2:	4601      	mov	r1, r0
 8085ce4:	a802      	add	r0, sp, #8
 8085ce6:	f005 ff9d 	bl	808bc24 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8085cea:	a802      	add	r0, sp, #8
 8085cec:	f005 fd72 	bl	808b7d4 <_ZNK6String5toIntEv>
 8085cf0:	9001      	str	r0, [sp, #4]
    if(tempValue >= -1000 && tempValue < 1000){
 8085cf2:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8085cf6:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8085cfa:	d217      	bcs.n	8085d2c <_Z16serialGetPm1Zerov+0x94>
        Serial.print("\n\rNew PM1 zero: ");
 8085cfc:	f006 fe86 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085d00:	4911      	ldr	r1, [pc, #68]	; (8085d48 <_Z16serialGetPm1Zerov+0xb0>)
 8085d02:	f005 fdb5 	bl	808b870 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8085d06:	f006 fe81 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085d0a:	9901      	ldr	r1, [sp, #4]
 8085d0c:	220a      	movs	r2, #10
 8085d0e:	f7fe fff0 	bl	8084cf2 <_ZN5Print7printlnIiLi0EEEjT_i>
        PM_1_zero = tempValue;
 8085d12:	9b01      	ldr	r3, [sp, #4]
 8085d14:	6023      	str	r3, [r4, #0]
        EEPROM.put(PM_1_ZERO_MEM_ADDRESS, tempValue);
 8085d16:	f007 fa81 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8085d1a:	2014      	movs	r0, #20
 8085d1c:	a901      	add	r1, sp, #4
 8085d1e:	f7fa fffe 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8085d22:	a802      	add	r0, sp, #8
 8085d24:	f005 fb5c 	bl	808b3e0 <_ZN6StringD1Ev>
}
 8085d28:	b006      	add	sp, #24
 8085d2a:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8085d2c:	f006 fe6e 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085d30:	4906      	ldr	r1, [pc, #24]	; (8085d4c <_Z16serialGetPm1Zerov+0xb4>)
 8085d32:	f005 fdb0 	bl	808b896 <_ZN5Print7printlnEPKc>
 8085d36:	e7f4      	b.n	8085d22 <_Z16serialGetPm1Zerov+0x8a>
 8085d38:	20000374 	.word	0x20000374
 8085d3c:	08093515 	.word	0x08093515
 8085d40:	08093527 	.word	0x08093527
 8085d44:	0809352e 	.word	0x0809352e
 8085d48:	08093543 	.word	0x08093543
 8085d4c:	080920b7 	.word	0x080920b7

08085d50 <_Z17serialGetPm25Zerov>:
void serialGetPm25Zero(void){
 8085d50:	b510      	push	{r4, lr}
 8085d52:	b086      	sub	sp, #24
    Serial.println();
 8085d54:	f006 fe5a 	bl	808ca0c <_Z16_fetch_usbserialv>
    Serial.print(PM_25_zero);
 8085d58:	4c25      	ldr	r4, [pc, #148]	; (8085df0 <_Z17serialGetPm25Zerov+0xa0>)
    Serial.println();
 8085d5a:	f005 fd90 	bl	808b87e <_ZN5Print7printlnEv>
    Serial.print("Current PM2.5 zero:");
 8085d5e:	f006 fe55 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085d62:	4924      	ldr	r1, [pc, #144]	; (8085df4 <_Z17serialGetPm25Zerov+0xa4>)
 8085d64:	f005 fd84 	bl	808b870 <_ZN5Print5printEPKc>
    Serial.print(PM_25_zero);
 8085d68:	f006 fe50 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085d6c:	220a      	movs	r2, #10
 8085d6e:	6821      	ldr	r1, [r4, #0]
 8085d70:	f7fe ffa0 	bl	8084cb4 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println(" ug/m3");
 8085d74:	f006 fe4a 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085d78:	491f      	ldr	r1, [pc, #124]	; (8085df8 <_Z17serialGetPm25Zerov+0xa8>)
 8085d7a:	f005 fd8c 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM2.5 Zero\n\r");
 8085d7e:	f006 fe45 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085d82:	491e      	ldr	r1, [pc, #120]	; (8085dfc <_Z17serialGetPm25Zerov+0xac>)
 8085d84:	f005 fd74 	bl	808b870 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8085d88:	f006 fe40 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085d8c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8085d90:	f005 fedd 	bl	808bb4e <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8085d94:	f006 fe3a 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085d98:	220d      	movs	r2, #13
 8085d9a:	4601      	mov	r1, r0
 8085d9c:	a802      	add	r0, sp, #8
 8085d9e:	f005 ff41 	bl	808bc24 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8085da2:	a802      	add	r0, sp, #8
 8085da4:	f005 fd16 	bl	808b7d4 <_ZNK6String5toIntEv>
 8085da8:	9001      	str	r0, [sp, #4]
    if(tempValue >= -1000 && tempValue < 1000){
 8085daa:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8085dae:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8085db2:	d217      	bcs.n	8085de4 <_Z17serialGetPm25Zerov+0x94>
        Serial.print("\n\rNew PM2.5 zero: ");
 8085db4:	f006 fe2a 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085db8:	4911      	ldr	r1, [pc, #68]	; (8085e00 <_Z17serialGetPm25Zerov+0xb0>)
 8085dba:	f005 fd59 	bl	808b870 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8085dbe:	f006 fe25 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085dc2:	9901      	ldr	r1, [sp, #4]
 8085dc4:	220a      	movs	r2, #10
 8085dc6:	f7fe ff94 	bl	8084cf2 <_ZN5Print7printlnIiLi0EEEjT_i>
        PM_25_zero = tempValue;
 8085dca:	9b01      	ldr	r3, [sp, #4]
 8085dcc:	6023      	str	r3, [r4, #0]
        EEPROM.put(PM_25_ZERO_MEM_ADDRESS, tempValue);
 8085dce:	f007 fa25 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8085dd2:	201c      	movs	r0, #28
 8085dd4:	a901      	add	r1, sp, #4
 8085dd6:	f7fa ffa2 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8085dda:	a802      	add	r0, sp, #8
 8085ddc:	f005 fb00 	bl	808b3e0 <_ZN6StringD1Ev>
}
 8085de0:	b006      	add	sp, #24
 8085de2:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8085de4:	f006 fe12 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085de8:	4906      	ldr	r1, [pc, #24]	; (8085e04 <_Z17serialGetPm25Zerov+0xb4>)
 8085dea:	f005 fd54 	bl	808b896 <_ZN5Print7printlnEPKc>
 8085dee:	e7f4      	b.n	8085dda <_Z17serialGetPm25Zerov+0x8a>
 8085df0:	2000037c 	.word	0x2000037c
 8085df4:	08093554 	.word	0x08093554
 8085df8:	08093527 	.word	0x08093527
 8085dfc:	08093568 	.word	0x08093568
 8085e00:	0809357f 	.word	0x0809357f
 8085e04:	080920b7 	.word	0x080920b7

08085e08 <_Z17serialGetPm10Zerov>:
void serialGetPm10Zero(void){
 8085e08:	b510      	push	{r4, lr}
 8085e0a:	b086      	sub	sp, #24
    Serial.println();
 8085e0c:	f006 fdfe 	bl	808ca0c <_Z16_fetch_usbserialv>
    Serial.print(PM_10_zero);
 8085e10:	4c25      	ldr	r4, [pc, #148]	; (8085ea8 <_Z17serialGetPm10Zerov+0xa0>)
    Serial.println();
 8085e12:	f005 fd34 	bl	808b87e <_ZN5Print7printlnEv>
    Serial.print("Current PM10 zero:");
 8085e16:	f006 fdf9 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085e1a:	4924      	ldr	r1, [pc, #144]	; (8085eac <_Z17serialGetPm10Zerov+0xa4>)
 8085e1c:	f005 fd28 	bl	808b870 <_ZN5Print5printEPKc>
    Serial.print(PM_10_zero);
 8085e20:	f006 fdf4 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085e24:	220a      	movs	r2, #10
 8085e26:	6821      	ldr	r1, [r4, #0]
 8085e28:	f7fe ff44 	bl	8084cb4 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println(" um/m3");
 8085e2c:	f006 fdee 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085e30:	491f      	ldr	r1, [pc, #124]	; (8085eb0 <_Z17serialGetPm10Zerov+0xa8>)
 8085e32:	f005 fd30 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM10 Zero\n\r");
 8085e36:	f006 fde9 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085e3a:	491e      	ldr	r1, [pc, #120]	; (8085eb4 <_Z17serialGetPm10Zerov+0xac>)
 8085e3c:	f005 fd18 	bl	808b870 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8085e40:	f006 fde4 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085e44:	f24c 3150 	movw	r1, #50000	; 0xc350
 8085e48:	f005 fe81 	bl	808bb4e <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8085e4c:	f006 fdde 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085e50:	220d      	movs	r2, #13
 8085e52:	4601      	mov	r1, r0
 8085e54:	a802      	add	r0, sp, #8
 8085e56:	f005 fee5 	bl	808bc24 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8085e5a:	a802      	add	r0, sp, #8
 8085e5c:	f005 fcba 	bl	808b7d4 <_ZNK6String5toIntEv>
 8085e60:	9001      	str	r0, [sp, #4]
    if(tempValue >= -1000 && tempValue < 1000){
 8085e62:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8085e66:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8085e6a:	d217      	bcs.n	8085e9c <_Z17serialGetPm10Zerov+0x94>
        Serial.print("\n\rNew PM10 zero: ");
 8085e6c:	f006 fdce 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085e70:	4911      	ldr	r1, [pc, #68]	; (8085eb8 <_Z17serialGetPm10Zerov+0xb0>)
 8085e72:	f005 fcfd 	bl	808b870 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8085e76:	f006 fdc9 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085e7a:	9901      	ldr	r1, [sp, #4]
 8085e7c:	220a      	movs	r2, #10
 8085e7e:	f7fe ff38 	bl	8084cf2 <_ZN5Print7printlnIiLi0EEEjT_i>
        PM_10_zero = tempValue;
 8085e82:	9b01      	ldr	r3, [sp, #4]
 8085e84:	6023      	str	r3, [r4, #0]
        EEPROM.put(PM_10_ZERO_MEM_ADDRESS, tempValue);
 8085e86:	f007 f9c9 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8085e8a:	2024      	movs	r0, #36	; 0x24
 8085e8c:	a901      	add	r1, sp, #4
 8085e8e:	f7fa ff46 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8085e92:	a802      	add	r0, sp, #8
 8085e94:	f005 faa4 	bl	808b3e0 <_ZN6StringD1Ev>
}
 8085e98:	b006      	add	sp, #24
 8085e9a:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8085e9c:	f006 fdb6 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085ea0:	4906      	ldr	r1, [pc, #24]	; (8085ebc <_Z17serialGetPm10Zerov+0xb4>)
 8085ea2:	f005 fcf8 	bl	808b896 <_ZN5Print7printlnEPKc>
 8085ea6:	e7f4      	b.n	8085e92 <_Z17serialGetPm10Zerov+0x8a>
 8085ea8:	2000036c 	.word	0x2000036c
 8085eac:	08093592 	.word	0x08093592
 8085eb0:	080935a5 	.word	0x080935a5
 8085eb4:	080935ac 	.word	0x080935ac
 8085eb8:	080935c2 	.word	0x080935c2
 8085ebc:	080920b7 	.word	0x080920b7

08085ec0 <_Z24serialGetTemperatureZerov>:
void serialGetTemperatureZero(void){
 8085ec0:	b510      	push	{r4, lr}
 8085ec2:	b086      	sub	sp, #24
    Serial.println();
 8085ec4:	f006 fda2 	bl	808ca0c <_Z16_fetch_usbserialv>
    Serial.print(temp_zero);
 8085ec8:	4c24      	ldr	r4, [pc, #144]	; (8085f5c <_Z24serialGetTemperatureZerov+0x9c>)
    Serial.println();
 8085eca:	f005 fcd8 	bl	808b87e <_ZN5Print7printlnEv>
    Serial.print("Current Temperature zero:");
 8085ece:	f006 fd9d 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085ed2:	4923      	ldr	r1, [pc, #140]	; (8085f60 <_Z24serialGetTemperatureZerov+0xa0>)
 8085ed4:	f005 fccc 	bl	808b870 <_ZN5Print5printEPKc>
    Serial.print(temp_zero);
 8085ed8:	f006 fd98 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085edc:	220a      	movs	r2, #10
 8085ede:	6821      	ldr	r1, [r4, #0]
 8085ee0:	f7fe fee8 	bl	8084cb4 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println(" Degrees C");
 8085ee4:	f006 fd92 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085ee8:	491e      	ldr	r1, [pc, #120]	; (8085f64 <_Z24serialGetTemperatureZerov+0xa4>)
 8085eea:	f005 fcd4 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Temperature Zero\n\r");
 8085eee:	f006 fd8d 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085ef2:	491d      	ldr	r1, [pc, #116]	; (8085f68 <_Z24serialGetTemperatureZerov+0xa8>)
 8085ef4:	f005 fcbc 	bl	808b870 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8085ef8:	f006 fd88 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085efc:	f24c 3150 	movw	r1, #50000	; 0xc350
 8085f00:	f005 fe25 	bl	808bb4e <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8085f04:	f006 fd82 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085f08:	220d      	movs	r2, #13
 8085f0a:	4601      	mov	r1, r0
 8085f0c:	a802      	add	r0, sp, #8
 8085f0e:	f005 fe89 	bl	808bc24 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8085f12:	a802      	add	r0, sp, #8
 8085f14:	f005 fc5e 	bl	808b7d4 <_ZNK6String5toIntEv>
 8085f18:	9001      	str	r0, [sp, #4]
    if(tempValue >= -30 && tempValue < 30){
 8085f1a:	301e      	adds	r0, #30
 8085f1c:	283b      	cmp	r0, #59	; 0x3b
 8085f1e:	d817      	bhi.n	8085f50 <_Z24serialGetTemperatureZerov+0x90>
        Serial.print("\n\rNew Temperature zero: ");
 8085f20:	f006 fd74 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085f24:	4911      	ldr	r1, [pc, #68]	; (8085f6c <_Z24serialGetTemperatureZerov+0xac>)
 8085f26:	f005 fca3 	bl	808b870 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8085f2a:	f006 fd6f 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085f2e:	9901      	ldr	r1, [sp, #4]
 8085f30:	220a      	movs	r2, #10
 8085f32:	f7fe fede 	bl	8084cf2 <_ZN5Print7printlnIiLi0EEEjT_i>
        temp_zero = tempValue;
 8085f36:	9b01      	ldr	r3, [sp, #4]
 8085f38:	6023      	str	r3, [r4, #0]
        EEPROM.put(TEMP_ZERO_MEM_ADDRESS, tempValue);
 8085f3a:	f007 f96f 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8085f3e:	202c      	movs	r0, #44	; 0x2c
 8085f40:	a901      	add	r1, sp, #4
 8085f42:	f7fa feec 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8085f46:	a802      	add	r0, sp, #8
 8085f48:	f005 fa4a 	bl	808b3e0 <_ZN6StringD1Ev>
}
 8085f4c:	b006      	add	sp, #24
 8085f4e:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8085f50:	f006 fd5c 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085f54:	4906      	ldr	r1, [pc, #24]	; (8085f70 <_Z24serialGetTemperatureZerov+0xb0>)
 8085f56:	f005 fc9e 	bl	808b896 <_ZN5Print7printlnEPKc>
 8085f5a:	e7f4      	b.n	8085f46 <_Z24serialGetTemperatureZerov+0x86>
 8085f5c:	20000d04 	.word	0x20000d04
 8085f60:	080935d4 	.word	0x080935d4
 8085f64:	08092215 	.word	0x08092215
 8085f68:	080935ee 	.word	0x080935ee
 8085f6c:	0809360b 	.word	0x0809360b
 8085f70:	080920b7 	.word	0x080920b7

08085f74 <_Z21serialGetPressureZerov>:
void serialGetPressureZero(void){
 8085f74:	b510      	push	{r4, lr}
 8085f76:	b086      	sub	sp, #24
    Serial.println();
 8085f78:	f006 fd48 	bl	808ca0c <_Z16_fetch_usbserialv>
    Serial.print(pressure_zero);
 8085f7c:	4c25      	ldr	r4, [pc, #148]	; (8086014 <_Z21serialGetPressureZerov+0xa0>)
    Serial.println();
 8085f7e:	f005 fc7e 	bl	808b87e <_ZN5Print7printlnEv>
    Serial.print("Current Pressure zero:");
 8085f82:	f006 fd43 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085f86:	4924      	ldr	r1, [pc, #144]	; (8086018 <_Z21serialGetPressureZerov+0xa4>)
 8085f88:	f005 fc72 	bl	808b870 <_ZN5Print5printEPKc>
    Serial.print(pressure_zero);
 8085f8c:	f006 fd3e 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085f90:	220a      	movs	r2, #10
 8085f92:	6821      	ldr	r1, [r4, #0]
 8085f94:	f7fe fe8e 	bl	8084cb4 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println(" ppm");
 8085f98:	f006 fd38 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085f9c:	491f      	ldr	r1, [pc, #124]	; (808601c <_Z21serialGetPressureZerov+0xa8>)
 8085f9e:	f005 fc7a 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Pressure Zero\n\r");
 8085fa2:	f006 fd33 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085fa6:	491e      	ldr	r1, [pc, #120]	; (8086020 <_Z21serialGetPressureZerov+0xac>)
 8085fa8:	f005 fc62 	bl	808b870 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8085fac:	f006 fd2e 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085fb0:	f24c 3150 	movw	r1, #50000	; 0xc350
 8085fb4:	f005 fdcb 	bl	808bb4e <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8085fb8:	f006 fd28 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085fbc:	220d      	movs	r2, #13
 8085fbe:	4601      	mov	r1, r0
 8085fc0:	a802      	add	r0, sp, #8
 8085fc2:	f005 fe2f 	bl	808bc24 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8085fc6:	a802      	add	r0, sp, #8
 8085fc8:	f005 fc04 	bl	808b7d4 <_ZNK6String5toIntEv>
 8085fcc:	9001      	str	r0, [sp, #4]
    if(tempValue >= -1000 && tempValue < 1000){
 8085fce:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8085fd2:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8085fd6:	d217      	bcs.n	8086008 <_Z21serialGetPressureZerov+0x94>
        Serial.print("\n\rNew Pressure zero: ");
 8085fd8:	f006 fd18 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085fdc:	4911      	ldr	r1, [pc, #68]	; (8086024 <_Z21serialGetPressureZerov+0xb0>)
 8085fde:	f005 fc47 	bl	808b870 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8085fe2:	f006 fd13 	bl	808ca0c <_Z16_fetch_usbserialv>
 8085fe6:	9901      	ldr	r1, [sp, #4]
 8085fe8:	220a      	movs	r2, #10
 8085fea:	f7fe fe82 	bl	8084cf2 <_ZN5Print7printlnIiLi0EEEjT_i>
        pressure_zero = tempValue;
 8085fee:	9b01      	ldr	r3, [sp, #4]
 8085ff0:	6023      	str	r3, [r4, #0]
        EEPROM.put(PRESSURE_ZERO_MEM_ADDRESS, tempValue);
 8085ff2:	f007 f913 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8085ff6:	2034      	movs	r0, #52	; 0x34
 8085ff8:	a901      	add	r1, sp, #4
 8085ffa:	f7fa fe90 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8085ffe:	a802      	add	r0, sp, #8
 8086000:	f005 f9ee 	bl	808b3e0 <_ZN6StringD1Ev>
}
 8086004:	b006      	add	sp, #24
 8086006:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8086008:	f006 fd00 	bl	808ca0c <_Z16_fetch_usbserialv>
 808600c:	4906      	ldr	r1, [pc, #24]	; (8086028 <_Z21serialGetPressureZerov+0xb4>)
 808600e:	f005 fc42 	bl	808b896 <_ZN5Print7printlnEPKc>
 8086012:	e7f4      	b.n	8085ffe <_Z21serialGetPressureZerov+0x8a>
 8086014:	20000850 	.word	0x20000850
 8086018:	08093624 	.word	0x08093624
 808601c:	080920db 	.word	0x080920db
 8086020:	0809363b 	.word	0x0809363b
 8086024:	08093655 	.word	0x08093655
 8086028:	080920b7 	.word	0x080920b7

0808602c <_Z21serialGetHumidityZerov>:
void serialGetHumidityZero(void){
 808602c:	b510      	push	{r4, lr}
 808602e:	b086      	sub	sp, #24
    Serial.println();
 8086030:	f006 fcec 	bl	808ca0c <_Z16_fetch_usbserialv>
    Serial.print(rh_zero);
 8086034:	4c24      	ldr	r4, [pc, #144]	; (80860c8 <_Z21serialGetHumidityZerov+0x9c>)
    Serial.println();
 8086036:	f005 fc22 	bl	808b87e <_ZN5Print7printlnEv>
    Serial.print("Current RH zero:");
 808603a:	f006 fce7 	bl	808ca0c <_Z16_fetch_usbserialv>
 808603e:	4923      	ldr	r1, [pc, #140]	; (80860cc <_Z21serialGetHumidityZerov+0xa0>)
 8086040:	f005 fc16 	bl	808b870 <_ZN5Print5printEPKc>
    Serial.print(rh_zero);
 8086044:	f006 fce2 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086048:	220a      	movs	r2, #10
 808604a:	6821      	ldr	r1, [r4, #0]
 808604c:	f7fe fe32 	bl	8084cb4 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println(" %");
 8086050:	f006 fcdc 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086054:	491e      	ldr	r1, [pc, #120]	; (80860d0 <_Z21serialGetHumidityZerov+0xa4>)
 8086056:	f005 fc1e 	bl	808b896 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new RH Zero\n\r");
 808605a:	f006 fcd7 	bl	808ca0c <_Z16_fetch_usbserialv>
 808605e:	491d      	ldr	r1, [pc, #116]	; (80860d4 <_Z21serialGetHumidityZerov+0xa8>)
 8086060:	f005 fc06 	bl	808b870 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8086064:	f006 fcd2 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086068:	f24c 3150 	movw	r1, #50000	; 0xc350
 808606c:	f005 fd6f 	bl	808bb4e <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8086070:	f006 fccc 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086074:	220d      	movs	r2, #13
 8086076:	4601      	mov	r1, r0
 8086078:	a802      	add	r0, sp, #8
 808607a:	f005 fdd3 	bl	808bc24 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 808607e:	a802      	add	r0, sp, #8
 8086080:	f005 fba8 	bl	808b7d4 <_ZNK6String5toIntEv>
 8086084:	9001      	str	r0, [sp, #4]
    if(tempValue >= -50 && tempValue < 50){
 8086086:	3032      	adds	r0, #50	; 0x32
 8086088:	2863      	cmp	r0, #99	; 0x63
 808608a:	d817      	bhi.n	80860bc <_Z21serialGetHumidityZerov+0x90>
        Serial.print("\n\rNew RH zero: ");
 808608c:	f006 fcbe 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086090:	4911      	ldr	r1, [pc, #68]	; (80860d8 <_Z21serialGetHumidityZerov+0xac>)
 8086092:	f005 fbed 	bl	808b870 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8086096:	f006 fcb9 	bl	808ca0c <_Z16_fetch_usbserialv>
 808609a:	9901      	ldr	r1, [sp, #4]
 808609c:	220a      	movs	r2, #10
 808609e:	f7fe fe28 	bl	8084cf2 <_ZN5Print7printlnIiLi0EEEjT_i>
        rh_zero = tempValue;
 80860a2:	9b01      	ldr	r3, [sp, #4]
 80860a4:	6023      	str	r3, [r4, #0]
        EEPROM.put(RH_ZERO_MEM_ADDRESS, tempValue);
 80860a6:	f007 f8b9 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 80860aa:	203c      	movs	r0, #60	; 0x3c
 80860ac:	a901      	add	r1, sp, #4
 80860ae:	f7fa fe36 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 80860b2:	a802      	add	r0, sp, #8
 80860b4:	f005 f994 	bl	808b3e0 <_ZN6StringD1Ev>
}
 80860b8:	b006      	add	sp, #24
 80860ba:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 80860bc:	f006 fca6 	bl	808ca0c <_Z16_fetch_usbserialv>
 80860c0:	4906      	ldr	r1, [pc, #24]	; (80860dc <_Z21serialGetHumidityZerov+0xb0>)
 80860c2:	f005 fbe8 	bl	808b896 <_ZN5Print7printlnEPKc>
 80860c6:	e7f4      	b.n	80860b2 <_Z21serialGetHumidityZerov+0x86>
 80860c8:	20000858 	.word	0x20000858
 80860cc:	0809366b 	.word	0x0809366b
 80860d0:	080922ba 	.word	0x080922ba
 80860d4:	0809367c 	.word	0x0809367c
 80860d8:	08093690 	.word	0x08093690
 80860dc:	080920b7 	.word	0x080920b7

080860e0 <_Z10serialMenuv>:
  incomingByte = '0';
 80860e0:	2330      	movs	r3, #48	; 0x30
void serialMenu(){
 80860e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  incomingByte = '0';
 80860e6:	4cab      	ldr	r4, [pc, #684]	; (8086394 <_Z10serialMenuv+0x2b4>)
            if (! bme.performReading()) {
 80860e8:	4dab      	ldr	r5, [pc, #684]	; (8086398 <_Z10serialMenuv+0x2b8>)
                Serial.printf("TVocs=%1.0f, Temp=%1.1f, press=%1.1f, rh=%1.1f\n\r", bme.gas_resistance/100, bme.temperature, bme.pressure, bme.humidity);
 80860ea:	4fac      	ldr	r7, [pc, #688]	; (808639c <_Z10serialMenuv+0x2bc>)
void serialMenu(){
 80860ec:	b08d      	sub	sp, #52	; 0x34
  incomingByte = '0';
 80860ee:	7023      	strb	r3, [r4, #0]
    Serial.print("Menu>");
 80860f0:	f006 fc8c 	bl	808ca0c <_Z16_fetch_usbserialv>
 80860f4:	49aa      	ldr	r1, [pc, #680]	; (80863a0 <_Z10serialMenuv+0x2c0>)
 80860f6:	f005 fbbb 	bl	808b870 <_ZN5Print5printEPKc>
    Serial.flush();
 80860fa:	f006 fc87 	bl	808ca0c <_Z16_fetch_usbserialv>
 80860fe:	6803      	ldr	r3, [r0, #0]
 8086100:	69db      	ldr	r3, [r3, #28]
 8086102:	4798      	blx	r3
    while(!Serial.available());
 8086104:	f006 fc82 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086108:	6803      	ldr	r3, [r0, #0]
 808610a:	691b      	ldr	r3, [r3, #16]
 808610c:	4798      	blx	r3
 808610e:	2800      	cmp	r0, #0
 8086110:	d0f8      	beq.n	8086104 <_Z10serialMenuv+0x24>
    incomingByte = Serial.read();
 8086112:	f006 fc7b 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086116:	6803      	ldr	r3, [r0, #0]
 8086118:	695b      	ldr	r3, [r3, #20]
 808611a:	4798      	blx	r3
 808611c:	b2c0      	uxtb	r0, r0
    if(incomingByte == 'a'){
 808611e:	2861      	cmp	r0, #97	; 0x61
    incomingByte = Serial.read();
 8086120:	7020      	strb	r0, [r4, #0]
    if(incomingByte == 'a'){
 8086122:	d108      	bne.n	8086136 <_Z10serialMenuv+0x56>
        serialGetCo2Slope();
 8086124:	f7fc fbea 	bl	80828fc <_Z17serialGetCo2Slopev>
  while(incomingByte!= 'x')
 8086128:	7823      	ldrb	r3, [r4, #0]
 808612a:	2b78      	cmp	r3, #120	; 0x78
 808612c:	d1e0      	bne.n	80860f0 <_Z10serialMenuv+0x10>
  Serial.println("Exiting serial menu...");
 808612e:	f006 fc6d 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086132:	499c      	ldr	r1, [pc, #624]	; (80863a4 <_Z10serialMenuv+0x2c4>)
 8086134:	e34d      	b.n	80867d2 <_Z10serialMenuv+0x6f2>
    }else if(incomingByte == 'b'){
 8086136:	2862      	cmp	r0, #98	; 0x62
 8086138:	d102      	bne.n	8086140 <_Z10serialMenuv+0x60>
        serialGetCo2Zero();
 808613a:	f7ff fcf3 	bl	8085b24 <_Z16serialGetCo2Zerov>
 808613e:	e7f3      	b.n	8086128 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'c'){
 8086140:	2863      	cmp	r0, #99	; 0x63
 8086142:	d102      	bne.n	808614a <_Z10serialMenuv+0x6a>
        serialGetCoSlope();
 8086144:	f7fc fc58 	bl	80829f8 <_Z16serialGetCoSlopev>
 8086148:	e7ee      	b.n	8086128 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'd'){
 808614a:	2864      	cmp	r0, #100	; 0x64
 808614c:	d102      	bne.n	8086154 <_Z10serialMenuv+0x74>
        serialGetCoZero();
 808614e:	f7ff fd45 	bl	8085bdc <_Z15serialGetCoZerov>
 8086152:	e7e9      	b.n	8086128 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'e'){
 8086154:	2865      	cmp	r0, #101	; 0x65
 8086156:	d102      	bne.n	808615e <_Z10serialMenuv+0x7e>
        serialGetPm1Slope();
 8086158:	f7fc fcd4 	bl	8082b04 <_Z17serialGetPm1Slopev>
 808615c:	e7e4      	b.n	8086128 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'f'){
 808615e:	2866      	cmp	r0, #102	; 0x66
 8086160:	d102      	bne.n	8086168 <_Z10serialMenuv+0x88>
         serialGetPm1Zero();
 8086162:	f7ff fd99 	bl	8085c98 <_Z16serialGetPm1Zerov>
 8086166:	e7df      	b.n	8086128 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'g'){
 8086168:	2867      	cmp	r0, #103	; 0x67
 808616a:	d102      	bne.n	8086172 <_Z10serialMenuv+0x92>
        serialGetPm25Slope();
 808616c:	f7fc fd46 	bl	8082bfc <_Z18serialGetPm25Slopev>
 8086170:	e7da      	b.n	8086128 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'h'){
 8086172:	2868      	cmp	r0, #104	; 0x68
 8086174:	d102      	bne.n	808617c <_Z10serialMenuv+0x9c>
        serialGetPm25Zero();
 8086176:	f7ff fdeb 	bl	8085d50 <_Z17serialGetPm25Zerov>
 808617a:	e7d5      	b.n	8086128 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'i'){
 808617c:	2869      	cmp	r0, #105	; 0x69
 808617e:	d102      	bne.n	8086186 <_Z10serialMenuv+0xa6>
        serialGetPm10Slope();
 8086180:	f7fc fdb8 	bl	8082cf4 <_Z18serialGetPm10Slopev>
 8086184:	e7d0      	b.n	8086128 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'j'){
 8086186:	286a      	cmp	r0, #106	; 0x6a
 8086188:	d102      	bne.n	8086190 <_Z10serialMenuv+0xb0>
        serialGetPm10Zero();
 808618a:	f7ff fe3d 	bl	8085e08 <_Z17serialGetPm10Zerov>
 808618e:	e7cb      	b.n	8086128 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'k'){
 8086190:	286b      	cmp	r0, #107	; 0x6b
 8086192:	d102      	bne.n	808619a <_Z10serialMenuv+0xba>
        serialGetTemperatureSlope();
 8086194:	f7fc fe2a 	bl	8082dec <_Z25serialGetTemperatureSlopev>
 8086198:	e7c6      	b.n	8086128 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'l'){
 808619a:	286c      	cmp	r0, #108	; 0x6c
 808619c:	d102      	bne.n	80861a4 <_Z10serialMenuv+0xc4>
        serialGetTemperatureZero();
 808619e:	f7ff fe8f 	bl	8085ec0 <_Z24serialGetTemperatureZerov>
 80861a2:	e7c1      	b.n	8086128 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'm'){
 80861a4:	286d      	cmp	r0, #109	; 0x6d
 80861a6:	d102      	bne.n	80861ae <_Z10serialMenuv+0xce>
        serialGetPressureSlope();
 80861a8:	f7fc fe9c 	bl	8082ee4 <_Z22serialGetPressureSlopev>
 80861ac:	e7bc      	b.n	8086128 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'n'){
 80861ae:	286e      	cmp	r0, #110	; 0x6e
 80861b0:	d102      	bne.n	80861b8 <_Z10serialMenuv+0xd8>
        serialGetPressureZero();
 80861b2:	f7ff fedf 	bl	8085f74 <_Z21serialGetPressureZerov>
 80861b6:	e7b7      	b.n	8086128 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'o'){
 80861b8:	286f      	cmp	r0, #111	; 0x6f
 80861ba:	d102      	bne.n	80861c2 <_Z10serialMenuv+0xe2>
        serialGetHumiditySlope();
 80861bc:	f7fc ff0e 	bl	8082fdc <_Z22serialGetHumiditySlopev>
 80861c0:	e7b2      	b.n	8086128 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'p'){
 80861c2:	2870      	cmp	r0, #112	; 0x70
 80861c4:	d102      	bne.n	80861cc <_Z10serialMenuv+0xec>
        serialGetHumidityZero();
 80861c6:	f7ff ff31 	bl	808602c <_Z21serialGetHumidityZerov>
 80861ca:	e7ad      	b.n	8086128 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'q'){
 80861cc:	2871      	cmp	r0, #113	; 0x71
 80861ce:	d10e      	bne.n	80861ee <_Z10serialMenuv+0x10e>
        Serial.println("Serial debugging enabled.");
 80861d0:	f006 fc1c 	bl	808ca0c <_Z16_fetch_usbserialv>
 80861d4:	4974      	ldr	r1, [pc, #464]	; (80863a8 <_Z10serialMenuv+0x2c8>)
 80861d6:	f005 fb5e 	bl	808b896 <_ZN5Print7printlnEPKc>
        debugging_enabled = 1;
 80861da:	2301      	movs	r3, #1
 80861dc:	4e73      	ldr	r6, [pc, #460]	; (80863ac <_Z10serialMenuv+0x2cc>)
        debugging_enabled = 0;
 80861de:	6033      	str	r3, [r6, #0]
        EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
 80861e0:	f007 f81c 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 80861e4:	4631      	mov	r1, r6
 80861e6:	2048      	movs	r0, #72	; 0x48
 80861e8:	f7fa fd99 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
 80861ec:	e79c      	b.n	8086128 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'r'){
 80861ee:	2872      	cmp	r0, #114	; 0x72
 80861f0:	d107      	bne.n	8086202 <_Z10serialMenuv+0x122>
        Serial.println("Serial debugging disabled.");
 80861f2:	f006 fc0b 	bl	808ca0c <_Z16_fetch_usbserialv>
 80861f6:	496e      	ldr	r1, [pc, #440]	; (80863b0 <_Z10serialMenuv+0x2d0>)
 80861f8:	f005 fb4d 	bl	808b896 <_ZN5Print7printlnEPKc>
        debugging_enabled = 0;
 80861fc:	4e6b      	ldr	r6, [pc, #428]	; (80863ac <_Z10serialMenuv+0x2cc>)
 80861fe:	2300      	movs	r3, #0
 8086200:	e7ed      	b.n	80861de <_Z10serialMenuv+0xfe>
    }else if(incomingByte == 's'){
 8086202:	2873      	cmp	r0, #115	; 0x73
 8086204:	d10e      	bne.n	8086224 <_Z10serialMenuv+0x144>
        Serial.println(String(HEADER_STRING));
 8086206:	f006 fc01 	bl	808ca0c <_Z16_fetch_usbserialv>
 808620a:	4606      	mov	r6, r0
 808620c:	4969      	ldr	r1, [pc, #420]	; (80863b4 <_Z10serialMenuv+0x2d4>)
 808620e:	a808      	add	r0, sp, #32
 8086210:	f005 f930 	bl	808b474 <_ZN6StringC1EPKc>
 8086214:	4630      	mov	r0, r6
 8086216:	9908      	ldr	r1, [sp, #32]
 8086218:	f005 fb3d 	bl	808b896 <_ZN5Print7printlnEPKc>
        Log.info("ICCID=%s", CellularHelper.getICCID().c_str());
 808621c:	a808      	add	r0, sp, #32
 808621e:	f005 f8df 	bl	808b3e0 <_ZN6StringD1Ev>
 8086222:	e781      	b.n	8086128 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 't'){
 8086224:	2874      	cmp	r0, #116	; 0x74
 8086226:	d102      	bne.n	808622e <_Z10serialMenuv+0x14e>
        serialGetTimeDate();
 8086228:	f7fc fb1c 	bl	8082864 <_Z17serialGetTimeDatev>
 808622c:	e77c      	b.n	8086128 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'u'){
 808622e:	2875      	cmp	r0, #117	; 0x75
 8086230:	d102      	bne.n	8086238 <_Z10serialMenuv+0x158>
        serialGetZone();
 8086232:	f7fe ff6f 	bl	8085114 <_Z13serialGetZonev>
 8086236:	e777      	b.n	8086128 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'v'){
 8086238:	2876      	cmp	r0, #118	; 0x76
 808623a:	d102      	bne.n	8086242 <_Z10serialMenuv+0x162>
        serialGetDeviceId();
 808623c:	f7fe fee6 	bl	808500c <_Z17serialGetDeviceIdv>
 8086240:	e772      	b.n	8086128 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'w'){
 8086242:	2877      	cmp	r0, #119	; 0x77
 8086244:	d102      	bne.n	808624c <_Z10serialMenuv+0x16c>
        serialGetWifiCredentials();
 8086246:	f7fc f9bd 	bl	80825c4 <_Z24serialGetWifiCredentialsv>
 808624a:	e76d      	b.n	8086128 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'y'){
 808624c:	2879      	cmp	r0, #121	; 0x79
 808624e:	d112      	bne.n	8086276 <_Z10serialMenuv+0x196>
        if(serial_cellular_enabled == 0){
 8086250:	4e59      	ldr	r6, [pc, #356]	; (80863b8 <_Z10serialMenuv+0x2d8>)
 8086252:	6833      	ldr	r3, [r6, #0]
 8086254:	b95b      	cbnz	r3, 808626e <_Z10serialMenuv+0x18e>
            Serial.println("Enabling Cellular.");
 8086256:	f006 fbd9 	bl	808ca0c <_Z16_fetch_usbserialv>
 808625a:	4958      	ldr	r1, [pc, #352]	; (80863bc <_Z10serialMenuv+0x2dc>)
            Serial.println("Cellular already enabled.");
 808625c:	f005 fb1b 	bl	808b896 <_ZN5Print7printlnEPKc>
        serial_cellular_enabled = 1;
 8086260:	2301      	movs	r3, #1
        serial_cellular_enabled = 0;
 8086262:	6033      	str	r3, [r6, #0]
        EEPROM.put(SERIAL_CELLULAR_EN_MEM_ADDRESS, serial_cellular_enabled);
 8086264:	f006 ffda 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8086268:	2044      	movs	r0, #68	; 0x44
 808626a:	4953      	ldr	r1, [pc, #332]	; (80863b8 <_Z10serialMenuv+0x2d8>)
 808626c:	e7bc      	b.n	80861e8 <_Z10serialMenuv+0x108>
            Serial.println("Cellular already enabled.");
 808626e:	f006 fbcd 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086272:	4953      	ldr	r1, [pc, #332]	; (80863c0 <_Z10serialMenuv+0x2e0>)
 8086274:	e7f2      	b.n	808625c <_Z10serialMenuv+0x17c>
    }else if(incomingByte == 'z'){
 8086276:	287a      	cmp	r0, #122	; 0x7a
 8086278:	d113      	bne.n	80862a2 <_Z10serialMenuv+0x1c2>
        if(serial_cellular_enabled == 1){
 808627a:	4e4f      	ldr	r6, [pc, #316]	; (80863b8 <_Z10serialMenuv+0x2d8>)
 808627c:	6833      	ldr	r3, [r6, #0]
 808627e:	2b01      	cmp	r3, #1
 8086280:	d109      	bne.n	8086296 <_Z10serialMenuv+0x1b6>
            Serial.println("Disabling Cellular");
 8086282:	f006 fbc3 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086286:	494f      	ldr	r1, [pc, #316]	; (80863c4 <_Z10serialMenuv+0x2e4>)
 8086288:	f005 fb05 	bl	808b896 <_ZN5Print7printlnEPKc>
            Cellular.off();
 808628c:	484e      	ldr	r0, [pc, #312]	; (80863c8 <_Z10serialMenuv+0x2e8>)
 808628e:	f7fa fd78 	bl	8080d82 <_ZN5spark13CellularClass3offEv>
        serial_cellular_enabled = 0;
 8086292:	2300      	movs	r3, #0
 8086294:	e7e5      	b.n	8086262 <_Z10serialMenuv+0x182>
            Serial.println("Cellular already disabled.");
 8086296:	f006 fbb9 	bl	808ca0c <_Z16_fetch_usbserialv>
 808629a:	494c      	ldr	r1, [pc, #304]	; (80863cc <_Z10serialMenuv+0x2ec>)
 808629c:	f005 fafb 	bl	808b896 <_ZN5Print7printlnEPKc>
 80862a0:	e7f7      	b.n	8086292 <_Z10serialMenuv+0x1b2>
    }else if(incomingByte == 'F'){
 80862a2:	2846      	cmp	r0, #70	; 0x46
 80862a4:	d110      	bne.n	80862c8 <_Z10serialMenuv+0x1e8>
        if(temperature_units == CELCIUS){
 80862a6:	4b4a      	ldr	r3, [pc, #296]	; (80863d0 <_Z10serialMenuv+0x2f0>)
 80862a8:	681a      	ldr	r2, [r3, #0]
 80862aa:	2a01      	cmp	r2, #1
 80862ac:	d102      	bne.n	80862b4 <_Z10serialMenuv+0x1d4>
            temperature_units = FARENHEIT;
 80862ae:	2200      	movs	r2, #0
            temperature_units = CELCIUS;
 80862b0:	601a      	str	r2, [r3, #0]
 80862b2:	e004      	b.n	80862be <_Z10serialMenuv+0x1de>
            Serial.println("Temperature units already set to Fareneit.");
 80862b4:	f006 fbaa 	bl	808ca0c <_Z16_fetch_usbserialv>
 80862b8:	4946      	ldr	r1, [pc, #280]	; (80863d4 <_Z10serialMenuv+0x2f4>)
 80862ba:	f005 faec 	bl	808b896 <_ZN5Print7printlnEPKc>
        EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, temperature_units);
 80862be:	f006 ffad 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 80862c2:	2060      	movs	r0, #96	; 0x60
 80862c4:	4942      	ldr	r1, [pc, #264]	; (80863d0 <_Z10serialMenuv+0x2f0>)
 80862c6:	e78f      	b.n	80861e8 <_Z10serialMenuv+0x108>
    }else if(incomingByte == 'C'){
 80862c8:	2843      	cmp	r0, #67	; 0x43
 80862ca:	d108      	bne.n	80862de <_Z10serialMenuv+0x1fe>
        if(temperature_units == FARENHEIT){
 80862cc:	4b40      	ldr	r3, [pc, #256]	; (80863d0 <_Z10serialMenuv+0x2f0>)
 80862ce:	681a      	ldr	r2, [r3, #0]
 80862d0:	b90a      	cbnz	r2, 80862d6 <_Z10serialMenuv+0x1f6>
            temperature_units = CELCIUS;
 80862d2:	2201      	movs	r2, #1
 80862d4:	e7ec      	b.n	80862b0 <_Z10serialMenuv+0x1d0>
            Serial.println("Temperature units already set to Celcius.");
 80862d6:	f006 fb99 	bl	808ca0c <_Z16_fetch_usbserialv>
 80862da:	493f      	ldr	r1, [pc, #252]	; (80863d8 <_Z10serialMenuv+0x2f8>)
 80862dc:	e7ed      	b.n	80862ba <_Z10serialMenuv+0x1da>
    }else if(incomingByte == 'D'){
 80862de:	2844      	cmp	r0, #68	; 0x44
 80862e0:	d113      	bne.n	808630a <_Z10serialMenuv+0x22a>
        if(new_temperature_sensor_enabled == 1){
 80862e2:	4b3e      	ldr	r3, [pc, #248]	; (80863dc <_Z10serialMenuv+0x2fc>)
 80862e4:	681a      	ldr	r2, [r3, #0]
 80862e6:	2a01      	cmp	r2, #1
 80862e8:	d10b      	bne.n	8086302 <_Z10serialMenuv+0x222>
            new_temperature_sensor_enabled = 0;
 80862ea:	2200      	movs	r2, #0
 80862ec:	601a      	str	r2, [r3, #0]
            Serial.println("Disabling new temperature sensor");
 80862ee:	f006 fb8d 	bl	808ca0c <_Z16_fetch_usbserialv>
 80862f2:	493b      	ldr	r1, [pc, #236]	; (80863e0 <_Z10serialMenuv+0x300>)
            Serial.println("Temperature sensor already disabled");
 80862f4:	f005 facf 	bl	808b896 <_ZN5Print7printlnEPKc>
        EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, new_temperature_sensor_enabled);
 80862f8:	f006 ff90 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 80862fc:	2068      	movs	r0, #104	; 0x68
 80862fe:	4937      	ldr	r1, [pc, #220]	; (80863dc <_Z10serialMenuv+0x2fc>)
 8086300:	e772      	b.n	80861e8 <_Z10serialMenuv+0x108>
            Serial.println("Temperature sensor already disabled");
 8086302:	f006 fb83 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086306:	4937      	ldr	r1, [pc, #220]	; (80863e4 <_Z10serialMenuv+0x304>)
 8086308:	e7f4      	b.n	80862f4 <_Z10serialMenuv+0x214>
    }else if(incomingByte == 'E'){
 808630a:	2845      	cmp	r0, #69	; 0x45
 808630c:	d10d      	bne.n	808632a <_Z10serialMenuv+0x24a>
        if(new_temperature_sensor_enabled == 1){
 808630e:	4b33      	ldr	r3, [pc, #204]	; (80863dc <_Z10serialMenuv+0x2fc>)
 8086310:	681a      	ldr	r2, [r3, #0]
 8086312:	2a01      	cmp	r2, #1
 8086314:	d103      	bne.n	808631e <_Z10serialMenuv+0x23e>
            Serial.println("Temperature sensor already enabled");
 8086316:	f006 fb79 	bl	808ca0c <_Z16_fetch_usbserialv>
 808631a:	4933      	ldr	r1, [pc, #204]	; (80863e8 <_Z10serialMenuv+0x308>)
 808631c:	e7ea      	b.n	80862f4 <_Z10serialMenuv+0x214>
            new_temperature_sensor_enabled = 1;
 808631e:	2201      	movs	r2, #1
 8086320:	601a      	str	r2, [r3, #0]
            Serial.println("Temperatue sensor now enabled");
 8086322:	f006 fb73 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086326:	4931      	ldr	r1, [pc, #196]	; (80863ec <_Z10serialMenuv+0x30c>)
 8086328:	e7e4      	b.n	80862f4 <_Z10serialMenuv+0x214>
    }else if(incomingByte == 'G'){      //enable analog reading of ozone and disable esp reading of ozone
 808632a:	2847      	cmp	r0, #71	; 0x47
 808632c:	d113      	bne.n	8086356 <_Z10serialMenuv+0x276>
        if(ozone_analog_enabled == 1){
 808632e:	4b30      	ldr	r3, [pc, #192]	; (80863f0 <_Z10serialMenuv+0x310>)
 8086330:	681a      	ldr	r2, [r3, #0]
 8086332:	2a01      	cmp	r2, #1
 8086334:	d109      	bne.n	808634a <_Z10serialMenuv+0x26a>
            Serial.println("Analog reading of ozone already enabled");
 8086336:	f006 fb69 	bl	808ca0c <_Z16_fetch_usbserialv>
 808633a:	492e      	ldr	r1, [pc, #184]	; (80863f4 <_Z10serialMenuv+0x314>)
            Serial.println("Analog reading of ozone now enabled");
 808633c:	f005 faab 	bl	808b896 <_ZN5Print7printlnEPKc>
        EEPROM.put(OZONE_A_OR_D_MEM_ADDRESS, ozone_analog_enabled);
 8086340:	f006 ff6c 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8086344:	206c      	movs	r0, #108	; 0x6c
 8086346:	492a      	ldr	r1, [pc, #168]	; (80863f0 <_Z10serialMenuv+0x310>)
 8086348:	e74e      	b.n	80861e8 <_Z10serialMenuv+0x108>
            ozone_analog_enabled = 1;
 808634a:	2201      	movs	r2, #1
 808634c:	601a      	str	r2, [r3, #0]
            Serial.println("Analog reading of ozone now enabled");
 808634e:	f006 fb5d 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086352:	4929      	ldr	r1, [pc, #164]	; (80863f8 <_Z10serialMenuv+0x318>)
 8086354:	e7f2      	b.n	808633c <_Z10serialMenuv+0x25c>
    }else if(incomingByte == 'H'){      //disable analog reading of ozone and read from esp
 8086356:	2848      	cmp	r0, #72	; 0x48
 8086358:	d10c      	bne.n	8086374 <_Z10serialMenuv+0x294>
        if(ozone_analog_enabled == 0){
 808635a:	4b25      	ldr	r3, [pc, #148]	; (80863f0 <_Z10serialMenuv+0x310>)
 808635c:	681a      	ldr	r2, [r3, #0]
 808635e:	b91a      	cbnz	r2, 8086368 <_Z10serialMenuv+0x288>
            Serial.println("Digital reading of ozone already enabled");
 8086360:	f006 fb54 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086364:	4925      	ldr	r1, [pc, #148]	; (80863fc <_Z10serialMenuv+0x31c>)
 8086366:	e7e9      	b.n	808633c <_Z10serialMenuv+0x25c>
            ozone_analog_enabled = 0;
 8086368:	2200      	movs	r2, #0
 808636a:	601a      	str	r2, [r3, #0]
            Serial.println("Digital reading of ozone now enabled");
 808636c:	f006 fb4e 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086370:	4923      	ldr	r1, [pc, #140]	; (8086400 <_Z10serialMenuv+0x320>)
 8086372:	e7e3      	b.n	808633c <_Z10serialMenuv+0x25c>
    }else if(incomingByte == 'I'){      //disable analog reading of ozone and read from esp
 8086374:	2849      	cmp	r0, #73	; 0x49
 8086376:	d102      	bne.n	808637e <_Z10serialMenuv+0x29e>
        serialGetAverageTime();
 8086378:	f7ff fb72 	bl	8085a60 <_Z20serialGetAverageTimev>
 808637c:	e6d4      	b.n	8086128 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'J'){
 808637e:	284a      	cmp	r0, #74	; 0x4a
 8086380:	d142      	bne.n	8086408 <_Z10serialMenuv+0x328>
        resetESP();
 8086382:	f7fc f8e7 	bl	8082554 <_Z8resetESPv>
        Serial.println("ESP reset!");
 8086386:	f006 fb41 	bl	808ca0c <_Z16_fetch_usbserialv>
 808638a:	491e      	ldr	r1, [pc, #120]	; (8086404 <_Z10serialMenuv+0x324>)
            Serial.println("ABC logic already enabled");
 808638c:	f005 fa83 	bl	808b896 <_ZN5Print7printlnEPKc>
 8086390:	e6ca      	b.n	8086128 <_Z10serialMenuv+0x48>
 8086392:	bf00      	nop
 8086394:	2000076c 	.word	0x2000076c
 8086398:	200005ec 	.word	0x200005ec
 808639c:	42c80000 	.word	0x42c80000
 80863a0:	080936a0 	.word	0x080936a0
 80863a4:	08093d15 	.word	0x08093d15
 80863a8:	080936a6 	.word	0x080936a6
 80863ac:	20000690 	.word	0x20000690
 80863b0:	080936c0 	.word	0x080936c0
 80863b4:	08092d4d 	.word	0x08092d4d
 80863b8:	20000cdc 	.word	0x20000cdc
 80863bc:	080936db 	.word	0x080936db
 80863c0:	080936ee 	.word	0x080936ee
 80863c4:	08093708 	.word	0x08093708
 80863c8:	2000121c 	.word	0x2000121c
 80863cc:	0809371b 	.word	0x0809371b
 80863d0:	20000d08 	.word	0x20000d08
 80863d4:	08093736 	.word	0x08093736
 80863d8:	08093761 	.word	0x08093761
 80863dc:	200007fc 	.word	0x200007fc
 80863e0:	0809378b 	.word	0x0809378b
 80863e4:	080937ac 	.word	0x080937ac
 80863e8:	080937d0 	.word	0x080937d0
 80863ec:	080937f3 	.word	0x080937f3
 80863f0:	20000804 	.word	0x20000804
 80863f4:	08093811 	.word	0x08093811
 80863f8:	08093839 	.word	0x08093839
 80863fc:	0809385d 	.word	0x0809385d
 8086400:	08093886 	.word	0x08093886
 8086404:	080933fa 	.word	0x080933fa
    }else if(incomingByte == 'K'){
 8086408:	284b      	cmp	r0, #75	; 0x4b
 808640a:	d107      	bne.n	808641c <_Z10serialMenuv+0x33c>
      Serial.println("Outputting GPS continuously");
 808640c:	f006 fafe 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086410:	49b2      	ldr	r1, [pc, #712]	; (80866dc <_Z10serialMenuv+0x5fc>)
 8086412:	f005 fa40 	bl	808b896 <_ZN5Print7printlnEPKc>
      echoGps();
 8086416:	f7fb f87b 	bl	8081510 <_Z7echoGpsv>
 808641a:	e685      	b.n	8086128 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'L'){
 808641c:	284c      	cmp	r0, #76	; 0x4c
 808641e:	d102      	bne.n	8086426 <_Z10serialMenuv+0x346>
      serialResetSettings();
 8086420:	f7fc f9e8 	bl	80827f4 <_Z19serialResetSettingsv>
 8086424:	e680      	b.n	8086128 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'M'){
 8086426:	284d      	cmp	r0, #77	; 0x4d
 8086428:	d113      	bne.n	8086452 <_Z10serialMenuv+0x372>
      if(battery_threshold_enable == 1){
 808642a:	4ead      	ldr	r6, [pc, #692]	; (80866e0 <_Z10serialMenuv+0x600>)
 808642c:	6833      	ldr	r3, [r6, #0]
 808642e:	2b01      	cmp	r3, #1
 8086430:	d103      	bne.n	808643a <_Z10serialMenuv+0x35a>
          Serial.println("Battery threshold already enabled");
 8086432:	f006 faeb 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086436:	49ab      	ldr	r1, [pc, #684]	; (80866e4 <_Z10serialMenuv+0x604>)
 8086438:	e7a8      	b.n	808638c <_Z10serialMenuv+0x2ac>
          Serial.println("Enabling battery threshold limiting");
 808643a:	f006 fae7 	bl	808ca0c <_Z16_fetch_usbserialv>
 808643e:	49aa      	ldr	r1, [pc, #680]	; (80866e8 <_Z10serialMenuv+0x608>)
 8086440:	f005 fa29 	bl	808b896 <_ZN5Print7printlnEPKc>
          battery_threshold_enable = 1;
 8086444:	2301      	movs	r3, #1
          battery_threshold_enable = 0;
 8086446:	6033      	str	r3, [r6, #0]
          EEPROM.put(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
 8086448:	f006 fee8 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 808644c:	4631      	mov	r1, r6
 808644e:	2078      	movs	r0, #120	; 0x78
 8086450:	e6ca      	b.n	80861e8 <_Z10serialMenuv+0x108>
    }else if(incomingByte == 'N'){
 8086452:	284e      	cmp	r0, #78	; 0x4e
 8086454:	d10d      	bne.n	8086472 <_Z10serialMenuv+0x392>
      if(battery_threshold_enable == 0){
 8086456:	4ea2      	ldr	r6, [pc, #648]	; (80866e0 <_Z10serialMenuv+0x600>)
 8086458:	6833      	ldr	r3, [r6, #0]
 808645a:	b91b      	cbnz	r3, 8086464 <_Z10serialMenuv+0x384>
          Serial.println("Battery threshold already disabled");
 808645c:	f006 fad6 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086460:	49a2      	ldr	r1, [pc, #648]	; (80866ec <_Z10serialMenuv+0x60c>)
 8086462:	e793      	b.n	808638c <_Z10serialMenuv+0x2ac>
          Serial.println("Disabling battery threshold limiting");
 8086464:	f006 fad2 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086468:	49a1      	ldr	r1, [pc, #644]	; (80866f0 <_Z10serialMenuv+0x610>)
 808646a:	f005 fa14 	bl	808b896 <_ZN5Print7printlnEPKc>
          battery_threshold_enable = 0;
 808646e:	2300      	movs	r3, #0
 8086470:	e7e9      	b.n	8086446 <_Z10serialMenuv+0x366>
    }else if(incomingByte == 'O'){
 8086472:	284f      	cmp	r0, #79	; 0x4f
 8086474:	d107      	bne.n	8086486 <_Z10serialMenuv+0x3a6>
        Serial.println("Enabling low power for gps");
 8086476:	f006 fac9 	bl	808ca0c <_Z16_fetch_usbserialv>
 808647a:	499e      	ldr	r1, [pc, #632]	; (80866f4 <_Z10serialMenuv+0x614>)
 808647c:	f005 fa0b 	bl	808b896 <_ZN5Print7printlnEPKc>
        enableLowPowerGPS();
 8086480:	f7fb f8b0 	bl	80815e4 <_Z17enableLowPowerGPSv>
 8086484:	e650      	b.n	8086128 <_Z10serialMenuv+0x48>
    }else if(incomingByte  == 'P'){
 8086486:	2850      	cmp	r0, #80	; 0x50
 8086488:	d109      	bne.n	808649e <_Z10serialMenuv+0x3be>
        Serial.println("Turning off batfet");
 808648a:	f006 fabf 	bl	808ca0c <_Z16_fetch_usbserialv>
 808648e:	499a      	ldr	r1, [pc, #616]	; (80866f8 <_Z10serialMenuv+0x618>)
 8086490:	f005 fa01 	bl	808b896 <_ZN5Print7printlnEPKc>
        writeRegister(7, 0b01101011);   //turn off batfet
 8086494:	216b      	movs	r1, #107	; 0x6b
        writeRegister(7, 0b01001011);   //allow batfet to turn on
 8086496:	2007      	movs	r0, #7
 8086498:	f7fa fd4a 	bl	8080f30 <_Z13writeRegisterhh>
 808649c:	e644      	b.n	8086128 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'Q'){
 808649e:	2851      	cmp	r0, #81	; 0x51
 80864a0:	d106      	bne.n	80864b0 <_Z10serialMenuv+0x3d0>
        Serial.println("Allowing batfet to turn on");
 80864a2:	f006 fab3 	bl	808ca0c <_Z16_fetch_usbserialv>
 80864a6:	4995      	ldr	r1, [pc, #596]	; (80866fc <_Z10serialMenuv+0x61c>)
 80864a8:	f005 f9f5 	bl	808b896 <_ZN5Print7printlnEPKc>
        writeRegister(7, 0b01001011);   //allow batfet to turn on
 80864ac:	214b      	movs	r1, #75	; 0x4b
 80864ae:	e7f2      	b.n	8086496 <_Z10serialMenuv+0x3b6>
    }else if(incomingByte == 'R'){
 80864b0:	2852      	cmp	r0, #82	; 0x52
 80864b2:	d117      	bne.n	80864e4 <_Z10serialMenuv+0x404>
        if(abc_logic_enabled){
 80864b4:	4e92      	ldr	r6, [pc, #584]	; (8086700 <_Z10serialMenuv+0x620>)
 80864b6:	6833      	ldr	r3, [r6, #0]
 80864b8:	b183      	cbz	r3, 80864dc <_Z10serialMenuv+0x3fc>
            Serial.println("Disabling ABC logic for CO2 sensor");
 80864ba:	f006 faa7 	bl	808ca0c <_Z16_fetch_usbserialv>
 80864be:	4991      	ldr	r1, [pc, #580]	; (8086704 <_Z10serialMenuv+0x624>)
 80864c0:	f005 f9e9 	bl	808b896 <_ZN5Print7printlnEPKc>
            abc_logic_enabled = 0;
 80864c4:	2300      	movs	r3, #0
 80864c6:	6033      	str	r3, [r6, #0]
            EEPROM.put(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 80864c8:	f006 fea8 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 80864cc:	4631      	mov	r1, r6
 80864ce:	207c      	movs	r0, #124	; 0x7c
 80864d0:	f7fa fc25 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
            t6713.disableABCLogic();
 80864d4:	488c      	ldr	r0, [pc, #560]	; (8086708 <_Z10serialMenuv+0x628>)
 80864d6:	f001 f89d 	bl	8087614 <_ZN13Telaire_T671315disableABCLogicEv>
 80864da:	e625      	b.n	8086128 <_Z10serialMenuv+0x48>
            Serial.println("ABC logic already disabled");
 80864dc:	f006 fa96 	bl	808ca0c <_Z16_fetch_usbserialv>
 80864e0:	498a      	ldr	r1, [pc, #552]	; (808670c <_Z10serialMenuv+0x62c>)
 80864e2:	e753      	b.n	808638c <_Z10serialMenuv+0x2ac>
    }else if(incomingByte == 'S'){
 80864e4:	2853      	cmp	r0, #83	; 0x53
 80864e6:	d117      	bne.n	8086518 <_Z10serialMenuv+0x438>
        if(!abc_logic_enabled){
 80864e8:	4e85      	ldr	r6, [pc, #532]	; (8086700 <_Z10serialMenuv+0x620>)
 80864ea:	6833      	ldr	r3, [r6, #0]
 80864ec:	b983      	cbnz	r3, 8086510 <_Z10serialMenuv+0x430>
            Serial.println("Enabling abc logic for CO2 sensor");
 80864ee:	f006 fa8d 	bl	808ca0c <_Z16_fetch_usbserialv>
 80864f2:	4987      	ldr	r1, [pc, #540]	; (8086710 <_Z10serialMenuv+0x630>)
 80864f4:	f005 f9cf 	bl	808b896 <_ZN5Print7printlnEPKc>
            abc_logic_enabled = 1;
 80864f8:	2301      	movs	r3, #1
 80864fa:	6033      	str	r3, [r6, #0]
            EEPROM.put(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 80864fc:	f006 fe8e 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8086500:	4631      	mov	r1, r6
 8086502:	207c      	movs	r0, #124	; 0x7c
 8086504:	f7fa fc0b 	bl	8080d1e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
            t6713.enableABCLogic();
 8086508:	487f      	ldr	r0, [pc, #508]	; (8086708 <_Z10serialMenuv+0x628>)
 808650a:	f001 f8a8 	bl	808765e <_ZN13Telaire_T671314enableABCLogicEv>
 808650e:	e60b      	b.n	8086128 <_Z10serialMenuv+0x48>
            Serial.println("ABC logic already enabled");
 8086510:	f006 fa7c 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086514:	497f      	ldr	r1, [pc, #508]	; (8086714 <_Z10serialMenuv+0x634>)
 8086516:	e739      	b.n	808638c <_Z10serialMenuv+0x2ac>
    }else if(incomingByte == 'T'){
 8086518:	2854      	cmp	r0, #84	; 0x54
 808651a:	d115      	bne.n	8086548 <_Z10serialMenuv+0x468>
        if(!hih8120_enabled){
 808651c:	4e7e      	ldr	r6, [pc, #504]	; (8086718 <_Z10serialMenuv+0x638>)
 808651e:	6833      	ldr	r3, [r6, #0]
 8086520:	b95b      	cbnz	r3, 808653a <_Z10serialMenuv+0x45a>
            Serial.println("Enabling HIH8120 RH sensor");
 8086522:	f006 fa73 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086526:	497d      	ldr	r1, [pc, #500]	; (808671c <_Z10serialMenuv+0x63c>)
 8086528:	f005 f9b5 	bl	808b896 <_ZN5Print7printlnEPKc>
            hih8120_enabled = 1;
 808652c:	2301      	movs	r3, #1
            hih8120_enabled = 0;
 808652e:	6033      	str	r3, [r6, #0]
            EEPROM.put(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);
 8086530:	f006 fe74 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8086534:	4631      	mov	r1, r6
 8086536:	2080      	movs	r0, #128	; 0x80
 8086538:	e656      	b.n	80861e8 <_Z10serialMenuv+0x108>
            Serial.println("Disabling HIH8120 RH sensor");
 808653a:	f006 fa67 	bl	808ca0c <_Z16_fetch_usbserialv>
 808653e:	4978      	ldr	r1, [pc, #480]	; (8086720 <_Z10serialMenuv+0x640>)
 8086540:	f005 f9a9 	bl	808b896 <_ZN5Print7printlnEPKc>
            hih8120_enabled = 0;
 8086544:	2300      	movs	r3, #0
 8086546:	e7f2      	b.n	808652e <_Z10serialMenuv+0x44e>
    }else if(incomingByte == 'U'){
 8086548:	2855      	cmp	r0, #85	; 0x55
 808654a:	d115      	bne.n	8086578 <_Z10serialMenuv+0x498>
        if(!CO_socket){
 808654c:	4e75      	ldr	r6, [pc, #468]	; (8086724 <_Z10serialMenuv+0x644>)
 808654e:	6833      	ldr	r3, [r6, #0]
 8086550:	b95b      	cbnz	r3, 808656a <_Z10serialMenuv+0x48a>
            Serial.println("Now reading CO from U20-Alpha2");
 8086552:	f006 fa5b 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086556:	4974      	ldr	r1, [pc, #464]	; (8086728 <_Z10serialMenuv+0x648>)
 8086558:	f005 f99d 	bl	808b896 <_ZN5Print7printlnEPKc>
            CO_socket = 1;
 808655c:	2301      	movs	r3, #1
            CO_socket = 0;
 808655e:	6033      	str	r3, [r6, #0]
            EEPROM.put(CO_SOCKET_MEM_ADDRESS, CO_socket);
 8086560:	f006 fe5c 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8086564:	4631      	mov	r1, r6
 8086566:	2084      	movs	r0, #132	; 0x84
 8086568:	e63e      	b.n	80861e8 <_Z10serialMenuv+0x108>
            Serial.println("Now reading CO from U19-Alpha1");
 808656a:	f006 fa4f 	bl	808ca0c <_Z16_fetch_usbserialv>
 808656e:	496f      	ldr	r1, [pc, #444]	; (808672c <_Z10serialMenuv+0x64c>)
 8086570:	f005 f991 	bl	808b896 <_ZN5Print7printlnEPKc>
            CO_socket = 0;
 8086574:	2300      	movs	r3, #0
 8086576:	e7f2      	b.n	808655e <_Z10serialMenuv+0x47e>
    }else if(incomingByte == 'V'){
 8086578:	2856      	cmp	r0, #86	; 0x56
 808657a:	d108      	bne.n	808658e <_Z10serialMenuv+0x4ae>
        Serial.println("Reseting the CO2 sensor");
 808657c:	f006 fa46 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086580:	496b      	ldr	r1, [pc, #428]	; (8086730 <_Z10serialMenuv+0x650>)
 8086582:	f005 f988 	bl	808b896 <_ZN5Print7printlnEPKc>
        t6713.resetSensor();
 8086586:	4860      	ldr	r0, [pc, #384]	; (8086708 <_Z10serialMenuv+0x628>)
 8086588:	f001 f81f 	bl	80875ca <_ZN13Telaire_T671311resetSensorEv>
 808658c:	e5cc      	b.n	8086128 <_Z10serialMenuv+0x48>
    }else if(incomingByte == '1'){
 808658e:	2831      	cmp	r0, #49	; 0x31
 8086590:	d102      	bne.n	8086598 <_Z10serialMenuv+0x4b8>
        serialGetLowerLimit();
 8086592:	f7fe fe09 	bl	80851a8 <_Z19serialGetLowerLimitv>
 8086596:	e5c7      	b.n	8086128 <_Z10serialMenuv+0x48>
    }else if(incomingByte == '2'){
 8086598:	2832      	cmp	r0, #50	; 0x32
 808659a:	d102      	bne.n	80865a2 <_Z10serialMenuv+0x4c2>
        serialGetUpperLimit();
 808659c:	f7fe fe88 	bl	80852b0 <_Z19serialGetUpperLimitv>
 80865a0:	e5c2      	b.n	8086128 <_Z10serialMenuv+0x48>
    }else if(incomingByte == '3'){
 80865a2:	2833      	cmp	r0, #51	; 0x33
 80865a4:	d116      	bne.n	80865d4 <_Z10serialMenuv+0x4f4>
        Serial.print("APP Version: ");
 80865a6:	f006 fa31 	bl	808ca0c <_Z16_fetch_usbserialv>
 80865aa:	4962      	ldr	r1, [pc, #392]	; (8086734 <_Z10serialMenuv+0x654>)
 80865ac:	f005 f960 	bl	808b870 <_ZN5Print5printEPKc>
        Serial.println(APP_VERSION);
 80865b0:	f006 fa2c 	bl	808ca0c <_Z16_fetch_usbserialv>
 80865b4:	220a      	movs	r2, #10
 80865b6:	2107      	movs	r1, #7
 80865b8:	f7fe fb9b 	bl	8084cf2 <_ZN5Print7printlnIiLi0EEEjT_i>
        Serial.print("Build: ");
 80865bc:	f006 fa26 	bl	808ca0c <_Z16_fetch_usbserialv>
 80865c0:	495d      	ldr	r1, [pc, #372]	; (8086738 <_Z10serialMenuv+0x658>)
 80865c2:	f005 f955 	bl	808b870 <_ZN5Print5printEPKc>
        Serial.println(BUILD_VERSION);
 80865c6:	f006 fa21 	bl	808ca0c <_Z16_fetch_usbserialv>
 80865ca:	220a      	movs	r2, #10
 80865cc:	210d      	movs	r1, #13
 80865ce:	f7fe fb90 	bl	8084cf2 <_ZN5Print7printlnIiLi0EEEjT_i>
 80865d2:	e5a9      	b.n	8086128 <_Z10serialMenuv+0x48>
    }else if(incomingByte == '4'){
 80865d4:	2834      	cmp	r0, #52	; 0x34
 80865d6:	d112      	bne.n	80865fe <_Z10serialMenuv+0x51e>
        if(ozone_enabled == 0){
 80865d8:	4e58      	ldr	r6, [pc, #352]	; (808673c <_Z10serialMenuv+0x65c>)
 80865da:	6833      	ldr	r3, [r6, #0]
 80865dc:	b95b      	cbnz	r3, 80865f6 <_Z10serialMenuv+0x516>
            Serial.println("Enabling Ozone");
 80865de:	f006 fa15 	bl	808ca0c <_Z16_fetch_usbserialv>
 80865e2:	4957      	ldr	r1, [pc, #348]	; (8086740 <_Z10serialMenuv+0x660>)
            Serial.println("Ozone already enabled");
 80865e4:	f005 f957 	bl	808b896 <_ZN5Print7printlnEPKc>
        ozone_enabled = 1;
 80865e8:	2301      	movs	r3, #1
        ozone_enabled = 0;
 80865ea:	6033      	str	r3, [r6, #0]
        EEPROM.put(OZONE_EN_MEM_ADDRESS, ozone_enabled);
 80865ec:	f006 fe16 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 80865f0:	2058      	movs	r0, #88	; 0x58
 80865f2:	4952      	ldr	r1, [pc, #328]	; (808673c <_Z10serialMenuv+0x65c>)
 80865f4:	e5f8      	b.n	80861e8 <_Z10serialMenuv+0x108>
            Serial.println("Ozone already enabled");
 80865f6:	f006 fa09 	bl	808ca0c <_Z16_fetch_usbserialv>
 80865fa:	4952      	ldr	r1, [pc, #328]	; (8086744 <_Z10serialMenuv+0x664>)
 80865fc:	e7f2      	b.n	80865e4 <_Z10serialMenuv+0x504>
    }else if(incomingByte == '5'){
 80865fe:	2835      	cmp	r0, #53	; 0x35
 8086600:	d10e      	bne.n	8086620 <_Z10serialMenuv+0x540>
        if(ozone_enabled == 1){
 8086602:	4e4e      	ldr	r6, [pc, #312]	; (808673c <_Z10serialMenuv+0x65c>)
 8086604:	6833      	ldr	r3, [r6, #0]
 8086606:	2b01      	cmp	r3, #1
 8086608:	d106      	bne.n	8086618 <_Z10serialMenuv+0x538>
            Serial.println("Disabling Ozone");
 808660a:	f006 f9ff 	bl	808ca0c <_Z16_fetch_usbserialv>
 808660e:	494e      	ldr	r1, [pc, #312]	; (8086748 <_Z10serialMenuv+0x668>)
            Serial.println("Ozone already disabled");
 8086610:	f005 f941 	bl	808b896 <_ZN5Print7printlnEPKc>
        ozone_enabled = 0;
 8086614:	2300      	movs	r3, #0
 8086616:	e7e8      	b.n	80865ea <_Z10serialMenuv+0x50a>
            Serial.println("Ozone already disabled");
 8086618:	f006 f9f8 	bl	808ca0c <_Z16_fetch_usbserialv>
 808661c:	494b      	ldr	r1, [pc, #300]	; (808674c <_Z10serialMenuv+0x66c>)
 808661e:	e7f7      	b.n	8086610 <_Z10serialMenuv+0x530>
    }else if(incomingByte == '6'){
 8086620:	2836      	cmp	r0, #54	; 0x36
 8086622:	d112      	bne.n	808664a <_Z10serialMenuv+0x56a>
        if(voc_enabled == 0){
 8086624:	4e4a      	ldr	r6, [pc, #296]	; (8086750 <_Z10serialMenuv+0x670>)
 8086626:	6833      	ldr	r3, [r6, #0]
 8086628:	b95b      	cbnz	r3, 8086642 <_Z10serialMenuv+0x562>
            Serial.println("Enabling VOC's");
 808662a:	f006 f9ef 	bl	808ca0c <_Z16_fetch_usbserialv>
 808662e:	4949      	ldr	r1, [pc, #292]	; (8086754 <_Z10serialMenuv+0x674>)
            Serial.println("VOC's already enabled");
 8086630:	f005 f931 	bl	808b896 <_ZN5Print7printlnEPKc>
        voc_enabled = 1;
 8086634:	2301      	movs	r3, #1
        voc_enabled = 0;
 8086636:	6033      	str	r3, [r6, #0]
        EEPROM.put(VOC_EN_MEM_ADDRESS, voc_enabled);
 8086638:	f006 fdf0 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 808663c:	205c      	movs	r0, #92	; 0x5c
 808663e:	4944      	ldr	r1, [pc, #272]	; (8086750 <_Z10serialMenuv+0x670>)
 8086640:	e5d2      	b.n	80861e8 <_Z10serialMenuv+0x108>
            Serial.println("VOC's already enabled");
 8086642:	f006 f9e3 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086646:	4944      	ldr	r1, [pc, #272]	; (8086758 <_Z10serialMenuv+0x678>)
 8086648:	e7f2      	b.n	8086630 <_Z10serialMenuv+0x550>
    }else if(incomingByte == '7'){
 808664a:	2837      	cmp	r0, #55	; 0x37
 808664c:	d10e      	bne.n	808666c <_Z10serialMenuv+0x58c>
        if(voc_enabled == 1){
 808664e:	4e40      	ldr	r6, [pc, #256]	; (8086750 <_Z10serialMenuv+0x670>)
 8086650:	6833      	ldr	r3, [r6, #0]
 8086652:	2b01      	cmp	r3, #1
 8086654:	d106      	bne.n	8086664 <_Z10serialMenuv+0x584>
            Serial.println("Disabling VOC's");
 8086656:	f006 f9d9 	bl	808ca0c <_Z16_fetch_usbserialv>
 808665a:	4940      	ldr	r1, [pc, #256]	; (808675c <_Z10serialMenuv+0x67c>)
            Serial.println("VOC's already disabled");
 808665c:	f005 f91b 	bl	808b896 <_ZN5Print7printlnEPKc>
        voc_enabled = 0;
 8086660:	2300      	movs	r3, #0
 8086662:	e7e8      	b.n	8086636 <_Z10serialMenuv+0x556>
            Serial.println("VOC's already disabled");
 8086664:	f006 f9d2 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086668:	493d      	ldr	r1, [pc, #244]	; (8086760 <_Z10serialMenuv+0x680>)
 808666a:	e7f7      	b.n	808665c <_Z10serialMenuv+0x57c>
    }else if(incomingByte == '8'){
 808666c:	2838      	cmp	r0, #56	; 0x38
 808666e:	d126      	bne.n	80866be <_Z10serialMenuv+0x5de>
        Serial.print("Fault: ");
 8086670:	f006 f9cc 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086674:	493b      	ldr	r1, [pc, #236]	; (8086764 <_Z10serialMenuv+0x684>)
 8086676:	f005 f8fb 	bl	808b870 <_ZN5Print5printEPKc>
        byte fault = pmic.getFault();
 808667a:	483b      	ldr	r0, [pc, #236]	; (8086768 <_Z10serialMenuv+0x688>)
 808667c:	f004 fb86 	bl	808ad8c <_ZN4PMIC8getFaultEv>
 8086680:	4680      	mov	r8, r0
        Serial.println(fault);
 8086682:	f006 f9c3 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086686:	4606      	mov	r6, r0
        return printNumber(val, base) + t;
 8086688:	220a      	movs	r2, #10
 808668a:	4641      	mov	r1, r8
 808668c:	f005 f917 	bl	808b8be <_ZN5Print11printNumberEmh>
        n += println();
 8086690:	4630      	mov	r0, r6
 8086692:	f005 f8f4 	bl	808b87e <_ZN5Print7printlnEv>
        Serial.print("System status: ");
 8086696:	f006 f9b9 	bl	808ca0c <_Z16_fetch_usbserialv>
 808669a:	4934      	ldr	r1, [pc, #208]	; (808676c <_Z10serialMenuv+0x68c>)
 808669c:	f005 f8e8 	bl	808b870 <_ZN5Print5printEPKc>
        byte systemStatus = pmic.getSystemStatus();
 80866a0:	4831      	ldr	r0, [pc, #196]	; (8086768 <_Z10serialMenuv+0x688>)
 80866a2:	f004 fb70 	bl	808ad86 <_ZN4PMIC15getSystemStatusEv>
 80866a6:	4680      	mov	r8, r0
        Serial.println(systemStatus);
 80866a8:	f006 f9b0 	bl	808ca0c <_Z16_fetch_usbserialv>
 80866ac:	4606      	mov	r6, r0
        return printNumber(val, base) + t;
 80866ae:	220a      	movs	r2, #10
 80866b0:	4641      	mov	r1, r8
 80866b2:	f005 f904 	bl	808b8be <_ZN5Print11printNumberEmh>
        n += println();
 80866b6:	4630      	mov	r0, r6
 80866b8:	f005 f8e1 	bl	808b87e <_ZN5Print7printlnEv>
        return n;
 80866bc:	e534      	b.n	8086128 <_Z10serialMenuv+0x48>
    }else if(incomingByte == '9'){
 80866be:	2839      	cmp	r0, #57	; 0x39
 80866c0:	d102      	bne.n	80866c8 <_Z10serialMenuv+0x5e8>
        serialIncreaseChargeCurrent();
 80866c2:	f7fe fa95 	bl	8084bf0 <_Z27serialIncreaseChargeCurrentv>
 80866c6:	e52f      	b.n	8086128 <_Z10serialMenuv+0x48>
    }else if(incomingByte == '0'){
 80866c8:	2830      	cmp	r0, #48	; 0x30
 80866ca:	d102      	bne.n	80866d2 <_Z10serialMenuv+0x5f2>
        serialIncreaseInputCurrent();
 80866cc:	f7fe fa4e 	bl	8084b6c <_Z26serialIncreaseInputCurrentv>
 80866d0:	e52a      	b.n	8086128 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'A'){
 80866d2:	2841      	cmp	r0, #65	; 0x41
 80866d4:	d14c      	bne.n	8086770 <_Z10serialMenuv+0x690>
        readAlpha1Constantly();
 80866d6:	f7fe fa2b 	bl	8084b30 <_Z20readAlpha1Constantlyv>
 80866da:	e525      	b.n	8086128 <_Z10serialMenuv+0x48>
 80866dc:	080938ab 	.word	0x080938ab
 80866e0:	200005e8 	.word	0x200005e8
 80866e4:	080938c7 	.word	0x080938c7
 80866e8:	080938e9 	.word	0x080938e9
 80866ec:	0809390d 	.word	0x0809390d
 80866f0:	08093930 	.word	0x08093930
 80866f4:	08093955 	.word	0x08093955
 80866f8:	08093970 	.word	0x08093970
 80866fc:	08093983 	.word	0x08093983
 8086700:	200005d4 	.word	0x200005d4
 8086704:	0809399e 	.word	0x0809399e
 8086708:	20000cfa 	.word	0x20000cfa
 808670c:	080939c1 	.word	0x080939c1
 8086710:	080939dc 	.word	0x080939dc
 8086714:	080939fe 	.word	0x080939fe
 8086718:	20000764 	.word	0x20000764
 808671c:	08093a18 	.word	0x08093a18
 8086720:	08093a33 	.word	0x08093a33
 8086724:	20000348 	.word	0x20000348
 8086728:	08093a4f 	.word	0x08093a4f
 808672c:	08093a6e 	.word	0x08093a6e
 8086730:	08093a8d 	.word	0x08093a8d
 8086734:	08093aa5 	.word	0x08093aa5
 8086738:	08093412 	.word	0x08093412
 808673c:	20000808 	.word	0x20000808
 8086740:	08093ab3 	.word	0x08093ab3
 8086744:	08093ac2 	.word	0x08093ac2
 8086748:	08093ad8 	.word	0x08093ad8
 808674c:	08093ae8 	.word	0x08093ae8
 8086750:	20000d10 	.word	0x20000d10
 8086754:	08093aff 	.word	0x08093aff
 8086758:	08093b0e 	.word	0x08093b0e
 808675c:	08093b24 	.word	0x08093b24
 8086760:	08093b34 	.word	0x08093b34
 8086764:	08093b4b 	.word	0x08093b4b
 8086768:	20000824 	.word	0x20000824
 808676c:	08093b53 	.word	0x08093b53
    }else if(incomingByte == 'B'){
 8086770:	2842      	cmp	r0, #66	; 0x42
 8086772:	d115      	bne.n	80867a0 <_Z10serialMenuv+0x6c0>
        if(output_only_particles == 1){
 8086774:	4b69      	ldr	r3, [pc, #420]	; (808691c <_Z10serialMenuv+0x83c>)
 8086776:	681a      	ldr	r2, [r3, #0]
 8086778:	2a01      	cmp	r2, #1
 808677a:	d10b      	bne.n	8086794 <_Z10serialMenuv+0x6b4>
            output_only_particles = 0;
 808677c:	2200      	movs	r2, #0
 808677e:	601a      	str	r2, [r3, #0]
            Serial.println("Outputting normally");
 8086780:	f006 f944 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086784:	4966      	ldr	r1, [pc, #408]	; (8086920 <_Z10serialMenuv+0x840>)
            Serial.println("Outputting only PM");
 8086786:	f005 f886 	bl	808b896 <_ZN5Print7printlnEPKc>
        EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, output_only_particles);
 808678a:	f006 fd47 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 808678e:	2064      	movs	r0, #100	; 0x64
 8086790:	4962      	ldr	r1, [pc, #392]	; (808691c <_Z10serialMenuv+0x83c>)
 8086792:	e529      	b.n	80861e8 <_Z10serialMenuv+0x108>
            output_only_particles = 1;
 8086794:	2201      	movs	r2, #1
 8086796:	601a      	str	r2, [r3, #0]
            Serial.println("Outputting only PM");
 8086798:	f006 f938 	bl	808ca0c <_Z16_fetch_usbserialv>
 808679c:	4961      	ldr	r1, [pc, #388]	; (8086924 <_Z10serialMenuv+0x844>)
 808679e:	e7f2      	b.n	8086786 <_Z10serialMenuv+0x6a6>
    }else if(incomingByte == '!'){
 80867a0:	2821      	cmp	r0, #33	; 0x21
 80867a2:	d13b      	bne.n	808681c <_Z10serialMenuv+0x73c>
        Serial.println("Outputting VOCs continuously!  Press any button to exit...");
 80867a4:	f006 f932 	bl	808ca0c <_Z16_fetch_usbserialv>
 80867a8:	495f      	ldr	r1, [pc, #380]	; (8086928 <_Z10serialMenuv+0x848>)
 80867aa:	f005 f874 	bl	808b896 <_ZN5Print7printlnEPKc>
        return this->printf_impl(false, format, args...);
 80867ae:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 8086970 <_Z10serialMenuv+0x890>
        while(!Serial.available()){
 80867b2:	f006 f92b 	bl	808ca0c <_Z16_fetch_usbserialv>
 80867b6:	6803      	ldr	r3, [r0, #0]
 80867b8:	691b      	ldr	r3, [r3, #16]
 80867ba:	4798      	blx	r3
 80867bc:	4606      	mov	r6, r0
 80867be:	2800      	cmp	r0, #0
 80867c0:	f47f acb2 	bne.w	8086128 <_Z10serialMenuv+0x48>
            if (! bme.performReading()) {
 80867c4:	4628      	mov	r0, r5
 80867c6:	f002 fc01 	bl	8088fcc <_ZN15Adafruit_BME68014performReadingEv>
 80867ca:	b938      	cbnz	r0, 80867dc <_Z10serialMenuv+0x6fc>
              Serial.println("Failed to read BME680");
 80867cc:	f006 f91e 	bl	808ca0c <_Z16_fetch_usbserialv>
 80867d0:	4956      	ldr	r1, [pc, #344]	; (808692c <_Z10serialMenuv+0x84c>)
  Serial.println("Exiting serial menu...");
 80867d2:	f005 f860 	bl	808b896 <_ZN5Print7printlnEPKc>
}
 80867d6:	b00d      	add	sp, #52	; 0x34
 80867d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                Serial.printf("TVocs=%1.0f, Temp=%1.1f, press=%1.1f, rh=%1.1f\n\r", bme.gas_resistance/100, bme.temperature, bme.pressure, bme.humidity);
 80867dc:	f006 f916 	bl	808ca0c <_Z16_fetch_usbserialv>
 80867e0:	4680      	mov	r8, r0
 80867e2:	68a8      	ldr	r0, [r5, #8]
 80867e4:	f006 ff32 	bl	808d64c <__aeabi_f2d>
 80867e8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80867ec:	6868      	ldr	r0, [r5, #4]
 80867ee:	f006 ff2d 	bl	808d64c <__aeabi_f2d>
 80867f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80867f6:	6828      	ldr	r0, [r5, #0]
 80867f8:	f006 ff28 	bl	808d64c <__aeabi_f2d>
 80867fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8086800:	4639      	mov	r1, r7
 8086802:	68e8      	ldr	r0, [r5, #12]
 8086804:	f007 fc84 	bl	808e110 <__aeabi_fdiv>
 8086808:	f006 ff20 	bl	808d64c <__aeabi_f2d>
 808680c:	464a      	mov	r2, r9
 808680e:	e9cd 0100 	strd	r0, r1, [sp]
 8086812:	4631      	mov	r1, r6
 8086814:	4640      	mov	r0, r8
 8086816:	f005 f94b 	bl	808bab0 <_ZN5Print11printf_implEbPKcz>
 808681a:	e7ca      	b.n	80867b2 <_Z10serialMenuv+0x6d2>
    }else if(incomingByte == '@'){
 808681c:	2840      	cmp	r0, #64	; 0x40
 808681e:	d112      	bne.n	8086846 <_Z10serialMenuv+0x766>
        if(sensible_iot_en == 1){
 8086820:	4e43      	ldr	r6, [pc, #268]	; (8086930 <_Z10serialMenuv+0x850>)
 8086822:	6833      	ldr	r3, [r6, #0]
 8086824:	2b01      	cmp	r3, #1
 8086826:	d10b      	bne.n	8086840 <_Z10serialMenuv+0x760>
            Serial.println("Disabling sensible iot data push.");
 8086828:	f006 f8f0 	bl	808ca0c <_Z16_fetch_usbserialv>
 808682c:	4941      	ldr	r1, [pc, #260]	; (8086934 <_Z10serialMenuv+0x854>)
 808682e:	f005 f832 	bl	808b896 <_ZN5Print7printlnEPKc>
            sensible_iot_en = 0;
 8086832:	2300      	movs	r3, #0
 8086834:	6033      	str	r3, [r6, #0]
            EEPROM.put(SENSIBLEIOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 8086836:	f006 fcf1 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 808683a:	4631      	mov	r1, r6
 808683c:	208c      	movs	r0, #140	; 0x8c
 808683e:	e4d3      	b.n	80861e8 <_Z10serialMenuv+0x108>
            serialSetSensibleIotEnable();
 8086840:	f7fb ff96 	bl	8082770 <_Z26serialSetSensibleIotEnablev>
 8086844:	e470      	b.n	8086128 <_Z10serialMenuv+0x48>
    }else if(incomingByte == '#'){
 8086846:	2823      	cmp	r0, #35	; 0x23
 8086848:	d115      	bne.n	8086876 <_Z10serialMenuv+0x796>
        if(car_topper_power_en == 1){
 808684a:	4e3b      	ldr	r6, [pc, #236]	; (8086938 <_Z10serialMenuv+0x858>)
 808684c:	6833      	ldr	r3, [r6, #0]
 808684e:	2b01      	cmp	r3, #1
 8086850:	d10b      	bne.n	808686a <_Z10serialMenuv+0x78a>
            car_topper_power_en = 0;
 8086852:	2300      	movs	r3, #0
 8086854:	6033      	str	r3, [r6, #0]
            Serial.println("Disabling car topper power.  ");
 8086856:	f006 f8d9 	bl	808ca0c <_Z16_fetch_usbserialv>
 808685a:	4938      	ldr	r1, [pc, #224]	; (808693c <_Z10serialMenuv+0x85c>)
            Serial.println("Enabling car topper power.  If no external power, system will turn off.");
 808685c:	f005 f81b 	bl	808b896 <_ZN5Print7printlnEPKc>
            EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, car_topper_power_en);
 8086860:	f006 fcdc 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8086864:	4631      	mov	r1, r6
 8086866:	2090      	movs	r0, #144	; 0x90
 8086868:	e4be      	b.n	80861e8 <_Z10serialMenuv+0x108>
            car_topper_power_en = 1;
 808686a:	2301      	movs	r3, #1
 808686c:	6033      	str	r3, [r6, #0]
            Serial.println("Enabling car topper power.  If no external power, system will turn off.");
 808686e:	f006 f8cd 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086872:	4933      	ldr	r1, [pc, #204]	; (8086940 <_Z10serialMenuv+0x860>)
 8086874:	e7f2      	b.n	808685c <_Z10serialMenuv+0x77c>
    }else if(incomingByte == 'W'){
 8086876:	2857      	cmp	r0, #87	; 0x57
 8086878:	d116      	bne.n	80868a8 <_Z10serialMenuv+0x7c8>
        if(google_location_en == 1){
 808687a:	4e32      	ldr	r6, [pc, #200]	; (8086944 <_Z10serialMenuv+0x864>)
 808687c:	6833      	ldr	r3, [r6, #0]
 808687e:	2b01      	cmp	r3, #1
 8086880:	d10b      	bne.n	808689a <_Z10serialMenuv+0x7ba>
            Serial.println("Disabling google location services.");
 8086882:	f006 f8c3 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086886:	4930      	ldr	r1, [pc, #192]	; (8086948 <_Z10serialMenuv+0x868>)
 8086888:	f005 f805 	bl	808b896 <_ZN5Print7printlnEPKc>
            google_location_en = 0;
 808688c:	2300      	movs	r3, #0
            google_location_en = 1;
 808688e:	6033      	str	r3, [r6, #0]
            EEPROM.put(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
 8086890:	f006 fcc4 	bl	808d21c <_Z21__fetch_global_EEPROMv>
 8086894:	4631      	mov	r1, r6
 8086896:	2088      	movs	r0, #136	; 0x88
 8086898:	e4a6      	b.n	80861e8 <_Z10serialMenuv+0x108>
            Serial.println("Enabling google location services.");
 808689a:	f006 f8b7 	bl	808ca0c <_Z16_fetch_usbserialv>
 808689e:	492b      	ldr	r1, [pc, #172]	; (808694c <_Z10serialMenuv+0x86c>)
 80868a0:	f004 fff9 	bl	808b896 <_ZN5Print7printlnEPKc>
            google_location_en = 1;
 80868a4:	2301      	movs	r3, #1
 80868a6:	e7f2      	b.n	808688e <_Z10serialMenuv+0x7ae>
    }else if(incomingByte == 'X'){
 80868a8:	2858      	cmp	r0, #88	; 0x58
 80868aa:	d107      	bne.n	80868bc <_Z10serialMenuv+0x7dc>
            t6713.calibrate(1);
 80868ac:	2101      	movs	r1, #1
 80868ae:	4828      	ldr	r0, [pc, #160]	; (8086950 <_Z10serialMenuv+0x870>)
 80868b0:	f000 fefa 	bl	80876a8 <_ZN13Telaire_T67139calibrateEi>
        co2_calibration_timer = 180;        //6 minutes if measurement cycle is 2 seconds
 80868b4:	22b4      	movs	r2, #180	; 0xb4
 80868b6:	4b27      	ldr	r3, [pc, #156]	; (8086954 <_Z10serialMenuv+0x874>)
 80868b8:	601a      	str	r2, [r3, #0]
 80868ba:	e435      	b.n	8086128 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'Z'){
 80868bc:	285a      	cmp	r0, #90	; 0x5a
 80868be:	d126      	bne.n	808690e <_Z10serialMenuv+0x82e>
        Serial.println("Getting cellular information, this may take a while...");
 80868c0:	f006 f8a4 	bl	808ca0c <_Z16_fetch_usbserialv>
 80868c4:	4924      	ldr	r1, [pc, #144]	; (8086958 <_Z10serialMenuv+0x878>)
 80868c6:	f004 ffe6 	bl	808b896 <_ZN5Print7printlnEPKc>
        Log.info("IMEI=%s", CellularHelper.getIMEI().c_str());
 80868ca:	a808      	add	r0, sp, #32
 80868cc:	4923      	ldr	r1, [pc, #140]	; (808695c <_Z10serialMenuv+0x87c>)
 80868ce:	f003 fd09 	bl	808a2e4 <_ZNK19CellularHelperClass7getIMEIEv>
 80868d2:	9a08      	ldr	r2, [sp, #32]
 80868d4:	4922      	ldr	r1, [pc, #136]	; (8086960 <_Z10serialMenuv+0x880>)
 80868d6:	4823      	ldr	r0, [pc, #140]	; (8086964 <_Z10serialMenuv+0x884>)
 80868d8:	f7fa fa71 	bl	8080dbe <_ZNK5spark6Logger4infoEPKcz>
 80868dc:	a808      	add	r0, sp, #32
 80868de:	f004 fd7f 	bl	808b3e0 <_ZN6StringD1Ev>
        Log.info("IMSI=%s", CellularHelper.getIMSI().c_str());
 80868e2:	a808      	add	r0, sp, #32
 80868e4:	491d      	ldr	r1, [pc, #116]	; (808695c <_Z10serialMenuv+0x87c>)
 80868e6:	f003 fd19 	bl	808a31c <_ZNK19CellularHelperClass7getIMSIEv>
 80868ea:	9a08      	ldr	r2, [sp, #32]
 80868ec:	491e      	ldr	r1, [pc, #120]	; (8086968 <_Z10serialMenuv+0x888>)
 80868ee:	481d      	ldr	r0, [pc, #116]	; (8086964 <_Z10serialMenuv+0x884>)
 80868f0:	f7fa fa65 	bl	8080dbe <_ZNK5spark6Logger4infoEPKcz>
 80868f4:	a808      	add	r0, sp, #32
 80868f6:	f004 fd73 	bl	808b3e0 <_ZN6StringD1Ev>
        Log.info("ICCID=%s", CellularHelper.getICCID().c_str());
 80868fa:	a808      	add	r0, sp, #32
 80868fc:	4917      	ldr	r1, [pc, #92]	; (808695c <_Z10serialMenuv+0x87c>)
 80868fe:	f003 fd13 	bl	808a328 <_ZNK19CellularHelperClass8getICCIDEv>
 8086902:	9a08      	ldr	r2, [sp, #32]
 8086904:	4919      	ldr	r1, [pc, #100]	; (808696c <_Z10serialMenuv+0x88c>)
 8086906:	4817      	ldr	r0, [pc, #92]	; (8086964 <_Z10serialMenuv+0x884>)
 8086908:	f7fa fa59 	bl	8080dbe <_ZNK5spark6Logger4infoEPKcz>
 808690c:	e486      	b.n	808621c <_Z10serialMenuv+0x13c>
    }else if(incomingByte == '?'){
 808690e:	283f      	cmp	r0, #63	; 0x3f
 8086910:	f47f ac0a 	bne.w	8086128 <_Z10serialMenuv+0x48>
        outputSerialMenuOptions();
 8086914:	f7fc fbe0 	bl	80830d8 <_Z23outputSerialMenuOptionsv>
 8086918:	e406      	b.n	8086128 <_Z10serialMenuv+0x48>
 808691a:	bf00      	nop
 808691c:	20000800 	.word	0x20000800
 8086920:	08093b63 	.word	0x08093b63
 8086924:	08093b77 	.word	0x08093b77
 8086928:	08093b8a 	.word	0x08093b8a
 808692c:	08091e06 	.word	0x08091e06
 8086930:	20000cd8 	.word	0x20000cd8
 8086934:	08093bf6 	.word	0x08093bf6
 8086938:	20000684 	.word	0x20000684
 808693c:	08093c18 	.word	0x08093c18
 8086940:	08093c36 	.word	0x08093c36
 8086944:	20000718 	.word	0x20000718
 8086948:	08093c7e 	.word	0x08093c7e
 808694c:	08093ca2 	.word	0x08093ca2
 8086950:	20000cfa 	.word	0x20000cfa
 8086954:	20000688 	.word	0x20000688
 8086958:	08093cc5 	.word	0x08093cc5
 808695c:	20000e70 	.word	0x20000e70
 8086960:	08093cfc 	.word	0x08093cfc
 8086964:	20000e84 	.word	0x20000e84
 8086968:	08093d04 	.word	0x08093d04
 808696c:	08093d0c 	.word	0x08093d0c
 8086970:	08093bc5 	.word	0x08093bc5

08086974 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v>:
  }
 8086974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        val_(val) {
 8086976:	2400      	movs	r4, #0
 8086978:	2701      	movs	r7, #1
 808697a:	4b59      	ldr	r3, [pc, #356]	; (8086ae0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x16c>)
GoogleMapsDeviceLocator locator;
 808697c:	4e59      	ldr	r6, [pc, #356]	; (8086ae4 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x170>)
 808697e:	601c      	str	r4, [r3, #0]
 8086980:	4b59      	ldr	r3, [pc, #356]	; (8086ae8 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x174>)
 8086982:	4d5a      	ldr	r5, [pc, #360]	; (8086aec <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x178>)
 8086984:	701f      	strb	r7, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 8086986:	f003 fe0d 	bl	808a5a4 <HAL_Pin_Map>
 808698a:	4630      	mov	r0, r6
 808698c:	f002 ff50 	bl	8089830 <_ZN23GoogleMapsDeviceLocatorC1Ev>
 8086990:	462a      	mov	r2, r5
 8086992:	4957      	ldr	r1, [pc, #348]	; (8086af0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x17c>)
 8086994:	4630      	mov	r0, r6
 8086996:	f006 fce3 	bl	808d360 <__aeabi_atexit>
              error_(SYSTEM_ERROR_NONE) {
 808699a:	4e56      	ldr	r6, [pc, #344]	; (8086af4 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x180>)
    SleepResult() {}
 808699c:	4b56      	ldr	r3, [pc, #344]	; (8086af8 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x184>)
              error_(SYSTEM_ERROR_NONE) {
 808699e:	6034      	str	r4, [r6, #0]
    SleepResult() {}
 80869a0:	60b3      	str	r3, [r6, #8]
              error_(SYSTEM_ERROR_NONE) {
 80869a2:	80b4      	strh	r4, [r6, #4]
    SleepResult() {}
 80869a4:	71b4      	strb	r4, [r6, #6]
        set_system_mode(mode);
 80869a6:	2003      	movs	r0, #3
 80869a8:	f004 f80c 	bl	808a9c4 <set_system_mode>
SYSTEM_MODE(MANUAL);
 80869ac:	462a      	mov	r2, r5
 80869ae:	4630      	mov	r0, r6
 80869b0:	4952      	ldr	r1, [pc, #328]	; (8086afc <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x188>)
 80869b2:	f006 fcd5 	bl	808d360 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);
 80869b6:	4621      	mov	r1, r4
 80869b8:	4638      	mov	r0, r7
 80869ba:	f004 f813 	bl	808a9e4 <system_thread_set_state>
Adafruit_BME680 bme; // I2C
 80869be:	f04f 31ff 	mov.w	r1, #4294967295
 80869c2:	484f      	ldr	r0, [pc, #316]	; (8086b00 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x18c>)
 80869c4:	f002 faf0 	bl	8088fa8 <_ZN15Adafruit_BME680C1Ea>
Telaire_T6713 t6713;  //CO2 sensor
 80869c8:	484e      	ldr	r0, [pc, #312]	; (8086b04 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x190>)
 80869ca:	f000 fd5e 	bl	808748a <_ZN13Telaire_T6713C1Ev>
LMP91000 lmp91000;
 80869ce:	484e      	ldr	r0, [pc, #312]	; (8086b08 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x194>)
 80869d0:	f000 fb1a 	bl	8087008 <_ZN8LMP91000C1Ev>
FuelGauge fuel;
 80869d4:	4e4d      	ldr	r6, [pc, #308]	; (8086b0c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x198>)
Adafruit_ADS1115 ads1(0x49); //Set I2C address of ADC1
 80869d6:	2149      	movs	r1, #73	; 0x49
 80869d8:	484d      	ldr	r0, [pc, #308]	; (8086b10 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x19c>)
 80869da:	f000 fc51 	bl	8087280 <_ZN16Adafruit_ADS1115C1Eh>
Adafruit_ADS1115 ads2(0x4A); //Set I2C address of ADC2
 80869de:	214a      	movs	r1, #74	; 0x4a
 80869e0:	484c      	ldr	r0, [pc, #304]	; (8086b14 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1a0>)
 80869e2:	f000 fc4d 	bl	8087280 <_ZN16Adafruit_ADS1115C1Eh>
FuelGauge fuel;
 80869e6:	4621      	mov	r1, r4
 80869e8:	4630      	mov	r0, r6
 80869ea:	f005 fb51 	bl	808c090 <_ZN9FuelGaugeC1Eb>
 80869ee:	4630      	mov	r0, r6
PMIC pmic;
 80869f0:	4e49      	ldr	r6, [pc, #292]	; (8086b18 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1a4>)
FuelGauge fuel;
 80869f2:	462a      	mov	r2, r5
 80869f4:	4949      	ldr	r1, [pc, #292]	; (8086b1c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1a8>)
 80869f6:	f006 fcb3 	bl	808d360 <__aeabi_atexit>
PMIC pmic;
 80869fa:	4621      	mov	r1, r4
 80869fc:	4630      	mov	r0, r6
 80869fe:	f004 f950 	bl	808aca2 <_ZN4PMICC1Eb>
 8086a02:	4630      	mov	r0, r6
PowerCheck powerCheck;
 8086a04:	4e46      	ldr	r6, [pc, #280]	; (8086b20 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1ac>)
PMIC pmic;
 8086a06:	462a      	mov	r2, r5
 8086a08:	4946      	ldr	r1, [pc, #280]	; (8086b24 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1b0>)
 8086a0a:	f006 fca9 	bl	808d360 <__aeabi_atexit>
PowerCheck powerCheck;
 8086a0e:	4630      	mov	r0, r6
 8086a10:	f000 fb8a 	bl	8087128 <_ZN10PowerCheckC1Ev>
 8086a14:	462a      	mov	r2, r5
 8086a16:	4630      	mov	r0, r6
 8086a18:	4943      	ldr	r1, [pc, #268]	; (8086b28 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1b4>)
 8086a1a:	f006 fca1 	bl	808d360 <__aeabi_atexit>
HIH61XX hih(0x27);
 8086a1e:	2127      	movs	r1, #39	; 0x27
 8086a20:	4842      	ldr	r0, [pc, #264]	; (8086b2c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1b8>)
 8086a22:	f002 fcd5 	bl	80893d0 <_ZN7HIH61XXC1Eh>
#else  // SD_SPI_CONFIGURATION < 3
  typedef SdSpiBase m_spi_t;
#endif  // SD_SPI_CONFIGURATION < 3
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_selected(false),
                m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
 8086a26:	2219      	movs	r2, #25
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
 8086a28:	4b41      	ldr	r3, [pc, #260]	; (8086b30 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1bc>)
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8086a2a:	4842      	ldr	r0, [pc, #264]	; (8086b34 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1c0>)
 8086a2c:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
  SdFat() {
 8086a30:	4a41      	ldr	r2, [pc, #260]	; (8086b38 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1c4>)
  SdFile() {}
 8086a32:	4f42      	ldr	r7, [pc, #264]	; (8086b3c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1c8>)
  SdFat() {
 8086a34:	601a      	str	r2, [r3, #0]
SdFile file;
 8086a36:	4e42      	ldr	r6, [pc, #264]	; (8086b40 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1cc>)
/**
 * \class SdSpi
 * \brief SPI class for access to SD and SDHC flash memory cards.
 */
#if SD_SPI_CONFIGURATION >= 3
class SdSpi : public SdSpiBase {
 8086a38:	4a42      	ldr	r2, [pc, #264]	; (8086b44 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1d0>)
 8086a3a:	71dc      	strb	r4, [r3, #7]
 8086a3c:	f8a3 4440 	strh.w	r4, [r3, #1088]	; 0x440
 8086a40:	f883 4468 	strb.w	r4, [r3, #1128]	; 0x468
 8086a44:	f883 446d 	strb.w	r4, [r3, #1133]	; 0x46d
 8086a48:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   */
  void send(const uint8_t* buf, size_t n);
  /** \return true - uses SPI transactions */
#if IMPLEMENT_SPI_INTERFACE_SELECTION
  void setSpiIf(uint8_t spiIf) {
    m_spiIf = spiIf;
 8086a4c:	f883 4474 	strb.w	r4, [r3, #1140]	; 0x474
 8086a50:	462a      	mov	r2, r5
 8086a52:	4631      	mov	r1, r6
 8086a54:	8104      	strh	r4, [r0, #8]
    Print() : write_error(0) {}
 8086a56:	6044      	str	r4, [r0, #4]
  SdFile() {}
 8086a58:	6007      	str	r7, [r0, #0]
 8086a5a:	f006 fc81 	bl	808d360 <__aeabi_atexit>
 8086a5e:	483a      	ldr	r0, [pc, #232]	; (8086b48 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1d4>)
SdFile log_file;
 8086a60:	462a      	mov	r2, r5
 8086a62:	4631      	mov	r1, r6
 8086a64:	e9c0 7400 	strd	r7, r4, [r0]
 8086a68:	8104      	strh	r4, [r0, #8]
 8086a6a:	f006 fc79 	bl	808d360 <__aeabi_atexit>
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8086a6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8086a72:	4836      	ldr	r0, [pc, #216]	; (8086b4c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1d8>)
String fileName;
 8086a74:	4e36      	ldr	r6, [pc, #216]	; (8086b50 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1dc>)
 8086a76:	6083      	str	r3, [r0, #8]
  File() {}
 8086a78:	4b36      	ldr	r3, [pc, #216]	; (8086b54 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1e0>)
 8086a7a:	4f37      	ldr	r7, [pc, #220]	; (8086b58 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1e4>)
 8086a7c:	6003      	str	r3, [r0, #0]
File file1;
 8086a7e:	462a      	mov	r2, r5
 8086a80:	4936      	ldr	r1, [pc, #216]	; (8086b5c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1e8>)
 8086a82:	8204      	strh	r4, [r0, #16]
 8086a84:	6044      	str	r4, [r0, #4]
 8086a86:	f006 fc6b 	bl	808d360 <__aeabi_atexit>
String fileName;
 8086a8a:	4c35      	ldr	r4, [pc, #212]	; (8086b60 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1ec>)
 8086a8c:	4631      	mov	r1, r6
 8086a8e:	4638      	mov	r0, r7
 8086a90:	f004 fcf0 	bl	808b474 <_ZN6StringC1EPKc>
 8086a94:	4638      	mov	r0, r7
String logFileName;
 8086a96:	4f33      	ldr	r7, [pc, #204]	; (8086b64 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1f0>)
String fileName;
 8086a98:	462a      	mov	r2, r5
 8086a9a:	4621      	mov	r1, r4
 8086a9c:	f006 fc60 	bl	808d360 <__aeabi_atexit>
String logFileName;
 8086aa0:	4631      	mov	r1, r6
 8086aa2:	4638      	mov	r0, r7
 8086aa4:	f004 fce6 	bl	808b474 <_ZN6StringC1EPKc>
 8086aa8:	4638      	mov	r0, r7
String ssid; //wifi network name
 8086aaa:	4f2f      	ldr	r7, [pc, #188]	; (8086b68 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1f4>)
String logFileName;
 8086aac:	462a      	mov	r2, r5
 8086aae:	4621      	mov	r1, r4
 8086ab0:	f006 fc56 	bl	808d360 <__aeabi_atexit>
String ssid; //wifi network name
 8086ab4:	4631      	mov	r1, r6
 8086ab6:	4638      	mov	r0, r7
 8086ab8:	f004 fcdc 	bl	808b474 <_ZN6StringC1EPKc>
 8086abc:	4638      	mov	r0, r7
String password; //wifi network password
 8086abe:	4f2b      	ldr	r7, [pc, #172]	; (8086b6c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1f8>)
String ssid; //wifi network name
 8086ac0:	462a      	mov	r2, r5
 8086ac2:	4621      	mov	r1, r4
 8086ac4:	f006 fc4c 	bl	808d360 <__aeabi_atexit>
String password; //wifi network password
 8086ac8:	4631      	mov	r1, r6
 8086aca:	4638      	mov	r0, r7
 8086acc:	f004 fcd2 	bl	808b474 <_ZN6StringC1EPKc>
 8086ad0:	462a      	mov	r2, r5
 8086ad2:	4621      	mov	r1, r4
 8086ad4:	4638      	mov	r0, r7
  }
 8086ad6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
String password; //wifi network password
 8086ada:	f006 bc41 	b.w	808d360 <__aeabi_atexit>
 8086ade:	bf00      	nop
 8086ae0:	20000394 	.word	0x20000394
 8086ae4:	20000770 	.word	0x20000770
 8086ae8:	200005a8 	.word	0x200005a8
 8086aec:	20000328 	.word	0x20000328
 8086af0:	080895a5 	.word	0x080895a5
 8086af4:	20000380 	.word	0x20000380
 8086af8:	ffff0000 	.word	0xffff0000
 8086afc:	08080cf9 	.word	0x08080cf9
 8086b00:	200005ec 	.word	0x200005ec
 8086b04:	20000cfa 	.word	0x20000cfa
 8086b08:	2000076d 	.word	0x2000076d
 8086b0c:	2000070c 	.word	0x2000070c
 8086b10:	200005d8 	.word	0x200005d8
 8086b14:	200005de 	.word	0x200005de
 8086b18:	20000824 	.word	0x20000824
 8086b1c:	0808c0af 	.word	0x0808c0af
 8086b20:	20000828 	.word	0x20000828
 8086b24:	0808ace1 	.word	0x0808ace1
 8086b28:	080870fd 	.word	0x080870fd
 8086b2c:	20000758 	.word	0x20000758
 8086b30:	20000860 	.word	0x20000860
 8086b34:	20000698 	.word	0x20000698
 8086b38:	08093f2c 	.word	0x08093f2c
 8086b3c:	08093f14 	.word	0x08093f14
 8086b40:	08080b6d 	.word	0x08080b6d
 8086b44:	08093fc8 	.word	0x08093fc8
 8086b48:	200007c4 	.word	0x200007c4
 8086b4c:	200006c4 	.word	0x200006c4
 8086b50:	080942e2 	.word	0x080942e2
 8086b54:	08093eec 	.word	0x08093eec
 8086b58:	200006f8 	.word	0x200006f8
 8086b5c:	08080b6f 	.word	0x08080b6f
 8086b60:	0808b3e1 	.word	0x0808b3e1
 8086b64:	200007b4 	.word	0x200007b4
 8086b68:	20000ce8 	.word	0x20000ce8
 8086b6c:	20000810 	.word	0x20000810

08086b70 <_Z11readHIH8120v>:
void readHIH8120(void){
 8086b70:	b510      	push	{r4, lr}
    hih.start();
 8086b72:	4c04      	ldr	r4, [pc, #16]	; (8086b84 <_Z11readHIH8120v+0x14>)
 8086b74:	4620      	mov	r0, r4
 8086b76:	f002 fc1d 	bl	80893b4 <_ZN7HIH61XX5startEv>
    hih.update();
 8086b7a:	4620      	mov	r0, r4
}
 8086b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hih.update();
 8086b80:	f002 bc30 	b.w	80893e4 <_ZN7HIH61XX6updateEv>
 8086b84:	20000758 	.word	0x20000758

08086b88 <loop>:
void loop() {
 8086b88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if(car_topper_power_en && powerCheck.getHasPower() == 0){
 8086b8c:	4b1d      	ldr	r3, [pc, #116]	; (8086c04 <loop+0x7c>)
void loop() {
 8086b8e:	b08b      	sub	sp, #44	; 0x2c
    if(car_topper_power_en && powerCheck.getHasPower() == 0){
 8086b90:	681b      	ldr	r3, [r3, #0]
 8086b92:	b12b      	cbz	r3, 8086ba0 <loop+0x18>
 8086b94:	4b1c      	ldr	r3, [pc, #112]	; (8086c08 <loop+0x80>)
 8086b96:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8086b9a:	b90b      	cbnz	r3, 8086ba0 <loop+0x18>
        goToSleepBattery();
 8086b9c:	f7fb fc7e 	bl	808249c <_Z16goToSleepBatteryv>
    locator.loop();
 8086ba0:	481a      	ldr	r0, [pc, #104]	; (8086c0c <loop+0x84>)
 8086ba2:	f002 ff4d 	bl	8089a40 <_ZN23GoogleMapsDeviceLocator4loopEv>
    if(output_only_particles == 1){
 8086ba6:	4b1a      	ldr	r3, [pc, #104]	; (8086c10 <loop+0x88>)
 8086ba8:	681b      	ldr	r3, [r3, #0]
 8086baa:	2b01      	cmp	r3, #1
 8086bac:	d101      	bne.n	8086bb2 <loop+0x2a>
        outputParticles();
 8086bae:	f7fb fad3 	bl	8082158 <_Z15outputParticlesv>
    if(debugging_enabled){
 8086bb2:	4c18      	ldr	r4, [pc, #96]	; (8086c14 <loop+0x8c>)
 8086bb4:	6823      	ldr	r3, [r4, #0]
 8086bb6:	b173      	cbz	r3, 8086bd6 <loop+0x4e>
      Serial.println("Before reading bme");
 8086bb8:	f005 ff28 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086bbc:	4916      	ldr	r1, [pc, #88]	; (8086c18 <loop+0x90>)
 8086bbe:	f004 fe6a 	bl	808b896 <_ZN5Print7printlnEPKc>
      writeLogFile("before reading bme");
 8086bc2:	4916      	ldr	r1, [pc, #88]	; (8086c1c <loop+0x94>)
 8086bc4:	a806      	add	r0, sp, #24
 8086bc6:	f004 fc55 	bl	808b474 <_ZN6StringC1EPKc>
 8086bca:	a806      	add	r0, sp, #24
 8086bcc:	f7fb f888 	bl	8081ce0 <_Z12writeLogFile6String>
 8086bd0:	a806      	add	r0, sp, #24
 8086bd2:	f004 fc05 	bl	808b3e0 <_ZN6StringD1Ev>
    if (! bme.performReading()) {
 8086bd6:	4d12      	ldr	r5, [pc, #72]	; (8086c20 <loop+0x98>)
 8086bd8:	4628      	mov	r0, r5
 8086bda:	f002 f9f7 	bl	8088fcc <_ZN15Adafruit_BME68014performReadingEv>
 8086bde:	bb18      	cbnz	r0, 8086c28 <loop+0xa0>
      Serial.println("Failed to read BME680");
 8086be0:	f005 ff14 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086be4:	490f      	ldr	r1, [pc, #60]	; (8086c24 <loop+0x9c>)
 8086be6:	f004 fe56 	bl	808b896 <_ZN5Print7printlnEPKc>
      writeLogFile("Failed to read BME680");
 8086bea:	490e      	ldr	r1, [pc, #56]	; (8086c24 <loop+0x9c>)
 8086bec:	a806      	add	r0, sp, #24
 8086bee:	f004 fc41 	bl	808b474 <_ZN6StringC1EPKc>
 8086bf2:	a806      	add	r0, sp, #24
 8086bf4:	f7fb f874 	bl	8081ce0 <_Z12writeLogFile6String>
 8086bf8:	a806      	add	r0, sp, #24
 8086bfa:	f004 fbf1 	bl	808b3e0 <_ZN6StringD1Ev>
}
 8086bfe:	b00b      	add	sp, #44	; 0x2c
 8086c00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8086c04:	20000684 	.word	0x20000684
 8086c08:	20000828 	.word	0x20000828
 8086c0c:	20000770 	.word	0x20000770
 8086c10:	20000800 	.word	0x20000800
 8086c14:	20000690 	.word	0x20000690
 8086c18:	08093d2c 	.word	0x08093d2c
 8086c1c:	08093d3f 	.word	0x08093d3f
 8086c20:	200005ec 	.word	0x200005ec
 8086c24:	08091e06 	.word	0x08091e06
      if(debugging_enabled){
 8086c28:	6823      	ldr	r3, [r4, #0]
 8086c2a:	b1cb      	cbz	r3, 8086c60 <loop+0xd8>
        Serial.printf("Temp=%1.1f, press=%1.1f, rh=%1.1f\n\r", bme.temperature, bme.pressure/100, bme.humidity);
 8086c2c:	f005 feee 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086c30:	4606      	mov	r6, r0
        return this->printf_impl(false, format, args...);
 8086c32:	68a8      	ldr	r0, [r5, #8]
 8086c34:	f006 fd0a 	bl	808d64c <__aeabi_f2d>
 8086c38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8086c3c:	4998      	ldr	r1, [pc, #608]	; (8086ea0 <loop+0x318>)
 8086c3e:	6868      	ldr	r0, [r5, #4]
 8086c40:	f007 fa66 	bl	808e110 <__aeabi_fdiv>
 8086c44:	f006 fd02 	bl	808d64c <__aeabi_f2d>
 8086c48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8086c4c:	6828      	ldr	r0, [r5, #0]
 8086c4e:	f006 fcfd 	bl	808d64c <__aeabi_f2d>
 8086c52:	4a94      	ldr	r2, [pc, #592]	; (8086ea4 <loop+0x31c>)
 8086c54:	e9cd 0100 	strd	r0, r1, [sp]
 8086c58:	2100      	movs	r1, #0
 8086c5a:	4630      	mov	r0, r6
 8086c5c:	f004 ff28 	bl	808bab0 <_ZN5Print11printf_implEbPKcz>
    if(hih8120_enabled){
 8086c60:	4b91      	ldr	r3, [pc, #580]	; (8086ea8 <loop+0x320>)
 8086c62:	681b      	ldr	r3, [r3, #0]
 8086c64:	b10b      	cbz	r3, 8086c6a <loop+0xe2>
        readHIH8120();
 8086c66:	f7ff ff83 	bl	8086b70 <_Z11readHIH8120v>
    readGpsStream();
 8086c6a:	f7fb f885 	bl	8081d78 <_Z13readGpsStreamv>
    CO_float = readCO();
 8086c6e:	f7fd ff35 	bl	8084adc <_Z6readCOv>
 8086c72:	4b8e      	ldr	r3, [pc, #568]	; (8086eac <loop+0x324>)
    CO2_float = readCO2();
 8086c74:	4e8e      	ldr	r6, [pc, #568]	; (8086eb0 <loop+0x328>)
    CO_float = readCO();
 8086c76:	6018      	str	r0, [r3, #0]
    CO2_float = readCO2();
 8086c78:	f7fa feb8 	bl	80819ec <_Z7readCO2v>
    float pressure_correction = bme.pressure/100;
 8086c7c:	4988      	ldr	r1, [pc, #544]	; (8086ea0 <loop+0x318>)
    CO2_float = readCO2();
 8086c7e:	6030      	str	r0, [r6, #0]
    float pressure_correction = bme.pressure/100;
 8086c80:	6868      	ldr	r0, [r5, #4]
 8086c82:	f007 fa45 	bl	808e110 <__aeabi_fdiv>
    if(pressure_correction > LOW_PRESSURE_LIMIT && pressure_correction < HIGH_PRESSURE_LIMIT){
 8086c86:	4986      	ldr	r1, [pc, #536]	; (8086ea0 <loop+0x318>)
    float pressure_correction = bme.pressure/100;
 8086c88:	4605      	mov	r5, r0
    if(pressure_correction > LOW_PRESSURE_LIMIT && pressure_correction < HIGH_PRESSURE_LIMIT){
 8086c8a:	f007 fb49 	bl	808e320 <__aeabi_fcmpgt>
 8086c8e:	2800      	cmp	r0, #0
 8086c90:	f000 80f2 	beq.w	8086e78 <loop+0x2f0>
 8086c94:	4628      	mov	r0, r5
 8086c96:	4987      	ldr	r1, [pc, #540]	; (8086eb4 <loop+0x32c>)
 8086c98:	f007 fb24 	bl	808e2e4 <__aeabi_fcmplt>
 8086c9c:	2800      	cmp	r0, #0
 8086c9e:	f000 80eb 	beq.w	8086e78 <loop+0x2f0>
        pressure_correction /= SEALEVELPRESSURE_HPA;
 8086ca2:	4628      	mov	r0, r5
 8086ca4:	4984      	ldr	r1, [pc, #528]	; (8086eb8 <loop+0x330>)
 8086ca6:	f007 fa33 	bl	808e110 <__aeabi_fdiv>
        if(debugging_enabled){
 8086caa:	6823      	ldr	r3, [r4, #0]
        pressure_correction /= SEALEVELPRESSURE_HPA;
 8086cac:	4605      	mov	r5, r0
        if(debugging_enabled){
 8086cae:	b12b      	cbz	r3, 8086cbc <loop+0x134>
            Serial.printf("pressure correction factor for CO2:%1.2f\n\r", pressure_correction);
 8086cb0:	f005 feac 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086cb4:	462a      	mov	r2, r5
 8086cb6:	4981      	ldr	r1, [pc, #516]	; (8086ebc <loop+0x334>)
 8086cb8:	f7fd fd84 	bl	80847c4 <_ZN5Print6printfIJfEEEjPKcDpT_>
        CO2_float *= pressure_correction;
 8086cbc:	6830      	ldr	r0, [r6, #0]
 8086cbe:	4629      	mov	r1, r5
 8086cc0:	f007 f972 	bl	808dfa8 <__aeabi_fmul>
 8086cc4:	6030      	str	r0, [r6, #0]
    if(ozone_enabled){
 8086cc6:	4b7e      	ldr	r3, [pc, #504]	; (8086ec0 <loop+0x338>)
 8086cc8:	681b      	ldr	r3, [r3, #0]
 8086cca:	b10b      	cbz	r3, 8086cd0 <loop+0x148>
        readOzone();
 8086ccc:	f7fe f950 	bl	8084f70 <_Z9readOzonev>
    calculateAQI();
 8086cd0:	f7fa fd5e 	bl	8081790 <_Z12calculateAQIv>
    sound_average = readSound();
 8086cd4:	f7fa fe5c 	bl	8081990 <_Z9readSoundv>
 8086cd8:	4b7a      	ldr	r3, [pc, #488]	; (8086ec4 <loop+0x33c>)
    pm_25_correction_factor = PM_25_CONSTANT_A + (PM_25_CONSTANT_B*(readHumidity()/100))/(1 - (readHumidity()/100));
 8086cda:	4f7b      	ldr	r7, [pc, #492]	; (8086ec8 <loop+0x340>)
    sound_average = readSound();
 8086cdc:	e9c3 0100 	strd	r0, r1, [r3]
    readPlantower();
 8086ce0:	f7fb f9f8 	bl	80820d4 <_Z13readPlantowerv>
    pm_25_correction_factor = PM_25_CONSTANT_A + (PM_25_CONSTANT_B*(readHumidity()/100))/(1 - (readHumidity()/100));
 8086ce4:	f7fa fd0a 	bl	80816fc <_Z12readHumidityv>
 8086ce8:	4606      	mov	r6, r0
 8086cea:	f7fa fd07 	bl	80816fc <_Z12readHumidityv>
 8086cee:	496c      	ldr	r1, [pc, #432]	; (8086ea0 <loop+0x318>)
 8086cf0:	4605      	mov	r5, r0
 8086cf2:	4630      	mov	r0, r6
 8086cf4:	f007 fa0c 	bl	808e110 <__aeabi_fdiv>
 8086cf8:	f006 fca8 	bl	808d64c <__aeabi_f2d>
 8086cfc:	a364      	add	r3, pc, #400	; (adr r3, 8086e90 <loop+0x308>)
 8086cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8086d02:	f006 fcfb 	bl	808d6fc <__aeabi_dmul>
 8086d06:	4680      	mov	r8, r0
 8086d08:	4689      	mov	r9, r1
 8086d0a:	4628      	mov	r0, r5
 8086d0c:	4964      	ldr	r1, [pc, #400]	; (8086ea0 <loop+0x318>)
 8086d0e:	f007 f9ff 	bl	808e110 <__aeabi_fdiv>
 8086d12:	4601      	mov	r1, r0
 8086d14:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8086d18:	f007 f83c 	bl	808dd94 <__aeabi_fsub>
 8086d1c:	f006 fc96 	bl	808d64c <__aeabi_f2d>
 8086d20:	4602      	mov	r2, r0
 8086d22:	460b      	mov	r3, r1
 8086d24:	4640      	mov	r0, r8
 8086d26:	4649      	mov	r1, r9
 8086d28:	f006 fe12 	bl	808d950 <__aeabi_ddiv>
 8086d2c:	a35a      	add	r3, pc, #360	; (adr r3, 8086e98 <loop+0x310>)
 8086d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8086d32:	f006 fb2d 	bl	808d390 <__adddf3>
 8086d36:	f006 ffd9 	bl	808dcec <__aeabi_d2f>
    if(debugging_enabled){
 8086d3a:	6823      	ldr	r3, [r4, #0]
 8086d3c:	463e      	mov	r6, r7
    pm_25_correction_factor = PM_25_CONSTANT_A + (PM_25_CONSTANT_B*(readHumidity()/100))/(1 - (readHumidity()/100));
 8086d3e:	6038      	str	r0, [r7, #0]
    if(debugging_enabled){
 8086d40:	b1b3      	cbz	r3, 8086d70 <loop+0x1e8>
        Serial.printf("pm2.5 correction factor: %1.2f, %1.2f\n\r", pm_25_correction_factor, readHumidity()/100);
 8086d42:	f005 fe63 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086d46:	683f      	ldr	r7, [r7, #0]
 8086d48:	4605      	mov	r5, r0
 8086d4a:	f7fa fcd7 	bl	80816fc <_Z12readHumidityv>
 8086d4e:	4954      	ldr	r1, [pc, #336]	; (8086ea0 <loop+0x318>)
 8086d50:	f007 f9de 	bl	808e110 <__aeabi_fdiv>
 8086d54:	f006 fc7a 	bl	808d64c <__aeabi_f2d>
 8086d58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8086d5c:	4638      	mov	r0, r7
 8086d5e:	f006 fc75 	bl	808d64c <__aeabi_f2d>
 8086d62:	4a5a      	ldr	r2, [pc, #360]	; (8086ecc <loop+0x344>)
 8086d64:	e9cd 0100 	strd	r0, r1, [sp]
 8086d68:	2100      	movs	r1, #0
 8086d6a:	4628      	mov	r0, r5
 8086d6c:	f004 fea0 	bl	808bab0 <_ZN5Print11printf_implEbPKcz>
    corrected_PM_25 = PM2_5Value / pm_25_correction_factor;
 8086d70:	4b57      	ldr	r3, [pc, #348]	; (8086ed0 <loop+0x348>)
 8086d72:	6818      	ldr	r0, [r3, #0]
 8086d74:	f007 f8c4 	bl	808df00 <__aeabi_i2f>
 8086d78:	6831      	ldr	r1, [r6, #0]
 8086d7a:	f007 f9c9 	bl	808e110 <__aeabi_fdiv>
    corrected_PM_25 = corrected_PM_25 + PM_25_zero;
 8086d7e:	4b55      	ldr	r3, [pc, #340]	; (8086ed4 <loop+0x34c>)
    corrected_PM_25 = PM2_5Value / pm_25_correction_factor;
 8086d80:	4605      	mov	r5, r0
    corrected_PM_25 = corrected_PM_25 + PM_25_zero;
 8086d82:	6818      	ldr	r0, [r3, #0]
 8086d84:	f007 f8bc 	bl	808df00 <__aeabi_i2f>
 8086d88:	4601      	mov	r1, r0
 8086d8a:	4628      	mov	r0, r5
 8086d8c:	f007 f804 	bl	808dd98 <__addsf3>
    corrected_PM_25 = corrected_PM_25 * PM_25_slope;
 8086d90:	4b51      	ldr	r3, [pc, #324]	; (8086ed8 <loop+0x350>)
 8086d92:	6819      	ldr	r1, [r3, #0]
 8086d94:	f007 f908 	bl	808dfa8 <__aeabi_fmul>
 8086d98:	4b50      	ldr	r3, [pc, #320]	; (8086edc <loop+0x354>)
 8086d9a:	6018      	str	r0, [r3, #0]
    outputDataToESP();
 8086d9c:	f7fc fd46 	bl	808382c <_Z15outputDataToESPv>
    sample_counter = ++sample_counter;
 8086da0:	4b4f      	ldr	r3, [pc, #316]	; (8086ee0 <loop+0x358>)
 8086da2:	681a      	ldr	r2, [r3, #0]
    if(sample_counter == 99)    {
 8086da4:	2a62      	cmp	r2, #98	; 0x62
    sample_counter = ++sample_counter;
 8086da6:	f102 0101 	add.w	r1, r2, #1
          sample_counter = 0;
 8086daa:	bf0a      	itet	eq
 8086dac:	2200      	moveq	r2, #0
    sample_counter = ++sample_counter;
 8086dae:	6019      	strne	r1, [r3, #0]
          sample_counter = 0;
 8086db0:	601a      	streq	r2, [r3, #0]
    if (Serial.available() > 0) {
 8086db2:	f005 fe2b 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086db6:	6803      	ldr	r3, [r0, #0]
 8086db8:	691b      	ldr	r3, [r3, #16]
 8086dba:	4798      	blx	r3
 8086dbc:	2800      	cmp	r0, #0
 8086dbe:	dd1c      	ble.n	8086dfa <loop+0x272>
        incomingByte = Serial.read();
 8086dc0:	f005 fe24 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086dc4:	6803      	ldr	r3, [r0, #0]
 8086dc6:	4d47      	ldr	r5, [pc, #284]	; (8086ee4 <loop+0x35c>)
 8086dc8:	695b      	ldr	r3, [r3, #20]
 8086dca:	4798      	blx	r3
        if(debugging_enabled){
 8086dcc:	6823      	ldr	r3, [r4, #0]
        incomingByte = Serial.read();
 8086dce:	7028      	strb	r0, [r5, #0]
        if(debugging_enabled){
 8086dd0:	b14b      	cbz	r3, 8086de6 <loop+0x25e>
            Serial.print("incomming byte:");
 8086dd2:	f005 fe1b 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086dd6:	4944      	ldr	r1, [pc, #272]	; (8086ee8 <loop+0x360>)
 8086dd8:	f004 fd4a 	bl	808b870 <_ZN5Print5printEPKc>
            Serial.println(incomingByte);
 8086ddc:	f005 fe16 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086de0:	7829      	ldrb	r1, [r5, #0]
 8086de2:	f004 fd62 	bl	808b8aa <_ZN5Print7printlnEc>
        Serial.println(incomingByte);
 8086de6:	f005 fe11 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086dea:	7829      	ldrb	r1, [r5, #0]
 8086dec:	f004 fd5d 	bl	808b8aa <_ZN5Print7printlnEc>
        if(incomingByte == 'm'){
 8086df0:	782b      	ldrb	r3, [r5, #0]
 8086df2:	2b6d      	cmp	r3, #109	; 0x6d
 8086df4:	d101      	bne.n	8086dfa <loop+0x272>
          serialMenu();
 8086df6:	f7ff f973 	bl	80860e0 <_Z10serialMenuv>
    if(serial_cellular_enabled){
 8086dfa:	4b3c      	ldr	r3, [pc, #240]	; (8086eec <loop+0x364>)
 8086dfc:	681b      	ldr	r3, [r3, #0]
 8086dfe:	2b00      	cmp	r3, #0
 8086e00:	f000 80d8 	beq.w	8086fb4 <loop+0x42c>
        status_word.status_int |= 0x01;
 8086e04:	4a3a      	ldr	r2, [pc, #232]	; (8086ef0 <loop+0x368>)
 8086e06:	8813      	ldrh	r3, [r2, #0]
 8086e08:	f043 0301 	orr.w	r3, r3, #1
 8086e0c:	8013      	strh	r3, [r2, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8086e0e:	f003 fea9 	bl	808ab64 <spark_cloud_flag_connected>
      if (Particle.connected() == false && tried_cellular_connect == false) {
 8086e12:	b918      	cbnz	r0, 8086e1c <loop+0x294>
 8086e14:	4b37      	ldr	r3, [pc, #220]	; (8086ef4 <loop+0x36c>)
 8086e16:	781a      	ldrb	r2, [r3, #0]
 8086e18:	2a00      	cmp	r2, #0
 8086e1a:	d07f      	beq.n	8086f1c <loop+0x394>
 8086e1c:	f003 fea2 	bl	808ab64 <spark_cloud_flag_connected>
      }else if(Particle.connected() == true){  //this means that it is already connected
 8086e20:	2800      	cmp	r0, #0
 8086e22:	f040 80bc 	bne.w	8086f9e <loop+0x416>
    powerCheck.loop();
 8086e26:	4d34      	ldr	r5, [pc, #208]	; (8086ef8 <loop+0x370>)
 8086e28:	4628      	mov	r0, r5
 8086e2a:	f000 f997 	bl	808715c <_ZN10PowerCheck4loopEv>
    if((battery_threshold_enable == 1) && (fuel.getSoC() < BATTERY_THRESHOLD) && (powerCheck.getHasPower() == 0)){
 8086e2e:	4b33      	ldr	r3, [pc, #204]	; (8086efc <loop+0x374>)
 8086e30:	681b      	ldr	r3, [r3, #0]
 8086e32:	2b01      	cmp	r3, #1
 8086e34:	d110      	bne.n	8086e58 <loop+0x2d0>
 8086e36:	4832      	ldr	r0, [pc, #200]	; (8086f00 <loop+0x378>)
 8086e38:	f005 f980 	bl	808c13c <_ZN9FuelGauge6getSoCEv>
 8086e3c:	4931      	ldr	r1, [pc, #196]	; (8086f04 <loop+0x37c>)
 8086e3e:	f007 fa51 	bl	808e2e4 <__aeabi_fcmplt>
 8086e42:	b148      	cbz	r0, 8086e58 <loop+0x2d0>
 8086e44:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8086e48:	b933      	cbnz	r3, 8086e58 <loop+0x2d0>
        Serial.println("Going to sleep because battery is below 20% charge");
 8086e4a:	f005 fddf 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086e4e:	492e      	ldr	r1, [pc, #184]	; (8086f08 <loop+0x380>)
 8086e50:	f004 fd21 	bl	808b896 <_ZN5Print7printlnEPKc>
        goToSleepBattery();
 8086e54:	f7fb fb22 	bl	808249c <_Z16goToSleepBatteryv>
    if(co2_calibration_timer){
 8086e58:	4a2c      	ldr	r2, [pc, #176]	; (8086f0c <loop+0x384>)
 8086e5a:	6813      	ldr	r3, [r2, #0]
 8086e5c:	2b00      	cmp	r3, #0
 8086e5e:	f43f aece 	beq.w	8086bfe <loop+0x76>
        co2_calibration_timer--;
 8086e62:	3b01      	subs	r3, #1
 8086e64:	6013      	str	r3, [r2, #0]
        if(debugging_enabled){
 8086e66:	6823      	ldr	r3, [r4, #0]
 8086e68:	2b00      	cmp	r3, #0
 8086e6a:	f43f aec8 	beq.w	8086bfe <loop+0x76>
            t6713.readStatus(1);
 8086e6e:	2101      	movs	r1, #1
 8086e70:	4827      	ldr	r0, [pc, #156]	; (8086f10 <loop+0x388>)
 8086e72:	f000 fc57 	bl	8087724 <_ZN13Telaire_T671310readStatusEi>
 8086e76:	e6c2      	b.n	8086bfe <loop+0x76>
        Serial.println("Error: Pressure out of range, not using pressure correction for CO2.");
 8086e78:	f005 fdc8 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086e7c:	4925      	ldr	r1, [pc, #148]	; (8086f14 <loop+0x38c>)
 8086e7e:	f004 fd0a 	bl	808b896 <_ZN5Print7printlnEPKc>
        Serial.printf("Pressure=%1.2f\n\r", pressure_correction);
 8086e82:	f005 fdc3 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086e86:	462a      	mov	r2, r5
 8086e88:	4923      	ldr	r1, [pc, #140]	; (8086f18 <loop+0x390>)
 8086e8a:	f7fd fc9b 	bl	80847c4 <_ZN5Print6printfIJfEEEjPKcDpT_>
 8086e8e:	e71a      	b.n	8086cc6 <loop+0x13e>
 8086e90:	b4395810 	.word	0xb4395810
 8086e94:	3fbe76c8 	.word	0x3fbe76c8
 8086e98:	70a3d70a 	.word	0x70a3d70a
 8086e9c:	3ff30a3d 	.word	0x3ff30a3d
 8086ea0:	42c80000 	.word	0x42c80000
 8086ea4:	08093bd2 	.word	0x08093bd2
 8086ea8:	20000764 	.word	0x20000764
 8086eac:	20000340 	.word	0x20000340
 8086eb0:	2000032c 	.word	0x2000032c
 8086eb4:	44bb8000 	.word	0x44bb8000
 8086eb8:	447d5000 	.word	0x447d5000
 8086ebc:	08093d52 	.word	0x08093d52
 8086ec0:	20000808 	.word	0x20000808
 8086ec4:	20000ce0 	.word	0x20000ce0
 8086ec8:	20000820 	.word	0x20000820
 8086ecc:	08093dd3 	.word	0x08093dd3
 8086ed0:	20000364 	.word	0x20000364
 8086ed4:	2000037c 	.word	0x2000037c
 8086ed8:	20000378 	.word	0x20000378
 8086edc:	2000068c 	.word	0x2000068c
 8086ee0:	2000085c 	.word	0x2000085c
 8086ee4:	2000076c 	.word	0x2000076c
 8086ee8:	08093dfb 	.word	0x08093dfb
 8086eec:	20000cdc 	.word	0x20000cdc
 8086ef0:	20000cf8 	.word	0x20000cf8
 8086ef4:	20000d0c 	.word	0x20000d0c
 8086ef8:	20000828 	.word	0x20000828
 8086efc:	200005e8 	.word	0x200005e8
 8086f00:	2000070c 	.word	0x2000070c
 8086f04:	41a00000 	.word	0x41a00000
 8086f08:	08093eaf 	.word	0x08093eaf
 8086f0c:	20000688 	.word	0x20000688
 8086f10:	20000cfa 	.word	0x20000cfa
 8086f14:	08093d7d 	.word	0x08093d7d
 8086f18:	08093dc2 	.word	0x08093dc2
        tried_cellular_connect = true;
 8086f1c:	2201      	movs	r2, #1
 8086f1e:	701a      	strb	r2, [r3, #0]
          if(debugging_enabled){
 8086f20:	6823      	ldr	r3, [r4, #0]
 8086f22:	b173      	cbz	r3, 8086f42 <loop+0x3ba>
            Serial.println("Connecting to cellular network");
 8086f24:	f005 fd72 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086f28:	492f      	ldr	r1, [pc, #188]	; (8086fe8 <loop+0x460>)
 8086f2a:	f004 fcb4 	bl	808b896 <_ZN5Print7printlnEPKc>
            writeLogFile("Connecting to cellular network");
 8086f2e:	492e      	ldr	r1, [pc, #184]	; (8086fe8 <loop+0x460>)
 8086f30:	a806      	add	r0, sp, #24
 8086f32:	f004 fa9f 	bl	808b474 <_ZN6StringC1EPKc>
 8086f36:	a806      	add	r0, sp, #24
 8086f38:	f7fa fed2 	bl	8081ce0 <_Z12writeLogFile6String>
 8086f3c:	a806      	add	r0, sp, #24
 8086f3e:	f004 fa4f 	bl	808b3e0 <_ZN6StringD1Ev>
        network_on(*this, 0, 0, NULL);
 8086f42:	2300      	movs	r3, #0
 8086f44:	4829      	ldr	r0, [pc, #164]	; (8086fec <loop+0x464>)
 8086f46:	461a      	mov	r2, r3
 8086f48:	4619      	mov	r1, r3
 8086f4a:	6840      	ldr	r0, [r0, #4]
 8086f4c:	f003 fdc2 	bl	808aad4 <network_on>
          if(debugging_enabled){
 8086f50:	6823      	ldr	r3, [r4, #0]
 8086f52:	b173      	cbz	r3, 8086f72 <loop+0x3ea>
            Serial.println("after cellularOn");
 8086f54:	f005 fd5a 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086f58:	4925      	ldr	r1, [pc, #148]	; (8086ff0 <loop+0x468>)
 8086f5a:	f004 fc9c 	bl	808b896 <_ZN5Print7printlnEPKc>
            writeLogFile("After cellularOn");
 8086f5e:	4925      	ldr	r1, [pc, #148]	; (8086ff4 <loop+0x46c>)
 8086f60:	a806      	add	r0, sp, #24
 8086f62:	f004 fa87 	bl	808b474 <_ZN6StringC1EPKc>
 8086f66:	a806      	add	r0, sp, #24
 8086f68:	f7fa feba 	bl	8081ce0 <_Z12writeLogFile6String>
 8086f6c:	a806      	add	r0, sp, #24
 8086f6e:	f004 fa37 	bl	808b3e0 <_ZN6StringD1Ev>
        spark_cloud_flag_connect();
 8086f72:	f003 fdef 	bl	808ab54 <spark_cloud_flag_connect>
          if(debugging_enabled){
 8086f76:	6823      	ldr	r3, [r4, #0]
 8086f78:	2b00      	cmp	r3, #0
 8086f7a:	f43f af54 	beq.w	8086e26 <loop+0x29e>
            Serial.println("After particle connect");
 8086f7e:	f005 fd45 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086f82:	491d      	ldr	r1, [pc, #116]	; (8086ff8 <loop+0x470>)
 8086f84:	f004 fc87 	bl	808b896 <_ZN5Print7printlnEPKc>
            writeLogFile("After particle connect");
 8086f88:	491b      	ldr	r1, [pc, #108]	; (8086ff8 <loop+0x470>)
 8086f8a:	a806      	add	r0, sp, #24
 8086f8c:	f004 fa72 	bl	808b474 <_ZN6StringC1EPKc>
 8086f90:	a806      	add	r0, sp, #24
 8086f92:	f7fa fea5 	bl	8081ce0 <_Z12writeLogFile6String>
 8086f96:	a806      	add	r0, sp, #24
 8086f98:	f004 fa22 	bl	808b3e0 <_ZN6StringD1Ev>
 8086f9c:	e743      	b.n	8086e26 <loop+0x29e>
        if(debugging_enabled){
 8086f9e:	6823      	ldr	r3, [r4, #0]
 8086fa0:	b123      	cbz	r3, 8086fac <loop+0x424>
          Serial.println("setting tried_cellular_connect to false");
 8086fa2:	f005 fd33 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086fa6:	4915      	ldr	r1, [pc, #84]	; (8086ffc <loop+0x474>)
 8086fa8:	f004 fc75 	bl	808b896 <_ZN5Print7printlnEPKc>
        tried_cellular_connect = false;
 8086fac:	2200      	movs	r2, #0
 8086fae:	4b14      	ldr	r3, [pc, #80]	; (8087000 <loop+0x478>)
 8086fb0:	701a      	strb	r2, [r3, #0]
 8086fb2:	e738      	b.n	8086e26 <loop+0x29e>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8086fb4:	f003 fdd6 	bl	808ab64 <spark_cloud_flag_connected>
      if (Particle.connected() == true) {
 8086fb8:	2800      	cmp	r0, #0
 8086fba:	f43f af34 	beq.w	8086e26 <loop+0x29e>
          if(debugging_enabled){
 8086fbe:	6823      	ldr	r3, [r4, #0]
 8086fc0:	b173      	cbz	r3, 8086fe0 <loop+0x458>
            Serial.println("Disconnecting from cellular network");
 8086fc2:	f005 fd23 	bl	808ca0c <_Z16_fetch_usbserialv>
 8086fc6:	490f      	ldr	r1, [pc, #60]	; (8087004 <loop+0x47c>)
 8086fc8:	f004 fc65 	bl	808b896 <_ZN5Print7printlnEPKc>
            writeLogFile("Disconnecting from cellular network");
 8086fcc:	490d      	ldr	r1, [pc, #52]	; (8087004 <loop+0x47c>)
 8086fce:	a806      	add	r0, sp, #24
 8086fd0:	f004 fa50 	bl	808b474 <_ZN6StringC1EPKc>
 8086fd4:	a806      	add	r0, sp, #24
 8086fd6:	f7fa fe83 	bl	8081ce0 <_Z12writeLogFile6String>
 8086fda:	a806      	add	r0, sp, #24
 8086fdc:	f004 fa00 	bl	808b3e0 <_ZN6StringD1Ev>
          Cellular.off();
 8086fe0:	4802      	ldr	r0, [pc, #8]	; (8086fec <loop+0x464>)
 8086fe2:	f7f9 fece 	bl	8080d82 <_ZN5spark13CellularClass3offEv>
 8086fe6:	e71e      	b.n	8086e26 <loop+0x29e>
 8086fe8:	08093e0b 	.word	0x08093e0b
 8086fec:	2000121c 	.word	0x2000121c
 8086ff0:	08093e2a 	.word	0x08093e2a
 8086ff4:	08093e3b 	.word	0x08093e3b
 8086ff8:	08093e4c 	.word	0x08093e4c
 8086ffc:	08093e63 	.word	0x08093e63
 8087000:	20000d0c 	.word	0x20000d0c
 8087004:	08093e8b 	.word	0x08093e8b

08087008 <_ZN8LMP91000C1Ev>:
#include "LMP91000.h"

LMP91000::LMP91000() {

}
 8087008:	4770      	bx	lr

0808700a <_ZN8LMP910004readEh>:

      // read back the value of the register
      return read(reg);
}

uint8_t LMP91000::read(uint8_t reg){
 808700a:	b510      	push	{r4, lr}
 808700c:	460c      	mov	r4, r1
      //Serial.println("In read func");
      uint8_t chr = 0;
      Wire.beginTransmission(LMP91000_I2C_ADDRESS);           // START+SLA+W
 808700e:	f006 f957 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8087012:	2148      	movs	r1, #72	; 0x48
 8087014:	f005 fef4 	bl	808ce00 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(reg);                                        // REG
 8087018:	f006 f952 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 808701c:	6803      	ldr	r3, [r0, #0]
 808701e:	4621      	mov	r1, r4
 8087020:	689b      	ldr	r3, [r3, #8]
 8087022:	4798      	blx	r3
      //delay(200);
      Wire.endTransmission(false);                            // REP START
 8087024:	f006 f94c 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8087028:	2100      	movs	r1, #0
 808702a:	f005 ff04 	bl	808ce36 <_ZN7TwoWire15endTransmissionEh>
      //Serial.println("after end transmission");
      Wire.requestFrom(LMP91000_I2C_ADDRESS, 1, true);        // SLA+R
 808702e:	f006 f947 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8087032:	2301      	movs	r3, #1
 8087034:	2148      	movs	r1, #72	; 0x48
 8087036:	461a      	mov	r2, r3
 8087038:	f005 fec9 	bl	808cdce <_ZN7TwoWire11requestFromEhjh>
      if(Wire.available()){
 808703c:	f006 f940 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8087040:	6803      	ldr	r3, [r0, #0]
 8087042:	691b      	ldr	r3, [r3, #16]
 8087044:	4798      	blx	r3
 8087046:	b128      	cbz	r0, 8087054 <_ZN8LMP910004readEh+0x4a>
            chr = Wire.read();                                // DATA
 8087048:	f006 f93a 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 808704c:	6803      	ldr	r3, [r0, #0]
 808704e:	695b      	ldr	r3, [r3, #20]
 8087050:	4798      	blx	r3
 8087052:	b2c0      	uxtb	r0, r0
      }

      return chr;
}
 8087054:	bd10      	pop	{r4, pc}

08087056 <_ZN8LMP910005writeEhh>:
uint8_t LMP91000::write(uint8_t reg, uint8_t data) {
 8087056:	b570      	push	{r4, r5, r6, lr}
 8087058:	4616      	mov	r6, r2
 808705a:	460c      	mov	r4, r1
 808705c:	4605      	mov	r5, r0
      Wire.beginTransmission(LMP91000_I2C_ADDRESS);           // START+SLA+W
 808705e:	f006 f92f 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8087062:	2148      	movs	r1, #72	; 0x48
 8087064:	f005 fecc 	bl	808ce00 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(reg);                                        // REG
 8087068:	f006 f92a 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 808706c:	6803      	ldr	r3, [r0, #0]
 808706e:	4621      	mov	r1, r4
 8087070:	689b      	ldr	r3, [r3, #8]
 8087072:	4798      	blx	r3
      Wire.write(data);                                       // DATA
 8087074:	f006 f924 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8087078:	6803      	ldr	r3, [r0, #0]
 808707a:	4631      	mov	r1, r6
 808707c:	689b      	ldr	r3, [r3, #8]
 808707e:	4798      	blx	r3
      Wire.endTransmission(true); // generate stop condition  // STOP
 8087080:	f006 f91e 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8087084:	2101      	movs	r1, #1
 8087086:	f005 fed6 	bl	808ce36 <_ZN7TwoWire15endTransmissionEh>
      return read(reg);
 808708a:	4621      	mov	r1, r4
 808708c:	4628      	mov	r0, r5
}
 808708e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return read(reg);
 8087092:	f7ff bfba 	b.w	808700a <_ZN8LMP910004readEh>

08087096 <_ZN8LMP910006statusEv>:

uint8_t LMP91000::status(void) {
      return read(LMP91000_STATUS_REG);
 8087096:	2100      	movs	r1, #0
 8087098:	f7ff bfb7 	b.w	808700a <_ZN8LMP910004readEh>

0808709c <_ZN8LMP910004lockEv>:
}

uint8_t LMP91000::lock(){ // this is the default state
      return write(LMP91000_LOCK_REG, LMP91000_WRITE_LOCK);
 808709c:	2201      	movs	r2, #1
 808709e:	4611      	mov	r1, r2
 80870a0:	f7ff bfd9 	b.w	8087056 <_ZN8LMP910005writeEhh>

080870a4 <_ZN8LMP910006unlockEv>:
}

uint8_t LMP91000::unlock(){
      return write(LMP91000_LOCK_REG, LMP91000_WRITE_UNLOCK);
 80870a4:	2200      	movs	r2, #0
 80870a6:	2101      	movs	r1, #1
 80870a8:	f7ff bfd5 	b.w	8087056 <_ZN8LMP910005writeEhh>

080870ac <_ZN8LMP910009configureEhhh>:
}

uint8_t LMP91000::configure(uint8_t _tiacn, uint8_t _refcn, uint8_t _modecn){
 80870ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80870b0:	4604      	mov	r4, r0
 80870b2:	4688      	mov	r8, r1
 80870b4:	4617      	mov	r7, r2
 80870b6:	461e      	mov	r6, r3

      if(status() == LMP91000_READY){
 80870b8:	f7ff ffed 	bl	8087096 <_ZN8LMP910006statusEv>
 80870bc:	2801      	cmp	r0, #1
 80870be:	4605      	mov	r5, r0
 80870c0:	d117      	bne.n	80870f2 <_ZN8LMP910009configureEhhh+0x46>
            unlock();
 80870c2:	4620      	mov	r0, r4
 80870c4:	f7ff ffee 	bl	80870a4 <_ZN8LMP910006unlockEv>
            write(LMP91000_TIACN_REG, _tiacn);
 80870c8:	4642      	mov	r2, r8
 80870ca:	2110      	movs	r1, #16
 80870cc:	4620      	mov	r0, r4
 80870ce:	f7ff ffc2 	bl	8087056 <_ZN8LMP910005writeEhh>
            write(LMP91000_REFCN_REG, _refcn);
 80870d2:	463a      	mov	r2, r7
 80870d4:	2111      	movs	r1, #17
 80870d6:	4620      	mov	r0, r4
 80870d8:	f7ff ffbd 	bl	8087056 <_ZN8LMP910005writeEhh>
            write(LMP91000_MODECN_REG, _modecn);
 80870dc:	4632      	mov	r2, r6
 80870de:	2112      	movs	r1, #18
 80870e0:	4620      	mov	r0, r4
 80870e2:	f7ff ffb8 	bl	8087056 <_ZN8LMP910005writeEhh>
            lock();
 80870e6:	4620      	mov	r0, r4
 80870e8:	f7ff ffd8 	bl	808709c <_ZN8LMP910004lockEv>
            return 1;
      }
      return 0;
}
 80870ec:	4628      	mov	r0, r5
 80870ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return 0;
 80870f2:	2500      	movs	r5, #0
 80870f4:	e7fa      	b.n	80870ec <_ZN8LMP910009configureEhhh+0x40>

080870f6 <_GLOBAL__sub_I__ZN8LMP91000C2Ev>:
 80870f6:	f003 ba55 	b.w	808a5a4 <HAL_Pin_Map>
	...

080870fc <_ZN10PowerCheckD1Ev>:
#include "PowerCheck.h"

PowerCheck::PowerCheck() {
}

PowerCheck::~PowerCheck() {
 80870fc:	b510      	push	{r4, lr}
 80870fe:	4604      	mov	r4, r0
 8087100:	4b03      	ldr	r3, [pc, #12]	; (8087110 <_ZN10PowerCheckD1Ev+0x14>)
 8087102:	f840 3b14 	str.w	r3, [r0], #20
 8087106:	f003 fdeb 	bl	808ace0 <_ZN4PMICD1Ev>
}
 808710a:	4620      	mov	r0, r4
 808710c:	bd10      	pop	{r4, pc}
 808710e:	bf00      	nop
 8087110:	08093f68 	.word	0x08093f68

08087114 <_ZN10PowerCheckD0Ev>:
PowerCheck::~PowerCheck() {
 8087114:	b510      	push	{r4, lr}
 8087116:	4604      	mov	r4, r0
}
 8087118:	f7ff fff0 	bl	80870fc <_ZN10PowerCheckD1Ev>
 808711c:	4620      	mov	r0, r4
 808711e:	2124      	movs	r1, #36	; 0x24
 8087120:	f006 f923 	bl	808d36a <_ZdlPvj>
 8087124:	4620      	mov	r0, r4
 8087126:	bd10      	pop	{r4, pc}

08087128 <_ZN10PowerCheckC1Ev>:
PowerCheck::PowerCheck() {
 8087128:	b538      	push	{r3, r4, r5, lr}
 808712a:	4b0b      	ldr	r3, [pc, #44]	; (8087158 <_ZN10PowerCheckC1Ev+0x30>)
 808712c:	2500      	movs	r5, #0
 808712e:	2232      	movs	r2, #50	; 0x32
 8087130:	6003      	str	r3, [r0, #0]
 8087132:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8087136:	4604      	mov	r4, r0
 8087138:	e9c0 2301 	strd	r2, r3, [r0, #4]
 808713c:	e9c0 5503 	strd	r5, r5, [r0, #12]
 8087140:	4629      	mov	r1, r5
 8087142:	3014      	adds	r0, #20
 8087144:	f003 fdad 	bl	808aca2 <_ZN4PMICC1Eb>
 8087148:	f44f 3380 	mov.w	r3, #65536	; 0x10000
}
 808714c:	4620      	mov	r0, r4
PowerCheck::PowerCheck() {
 808714e:	e9c4 5506 	strd	r5, r5, [r4, #24]
 8087152:	6223      	str	r3, [r4, #32]
}
 8087154:	bd38      	pop	{r3, r4, r5, pc}
 8087156:	bf00      	nop
 8087158:	08093f68 	.word	0x08093f68

0808715c <_ZN10PowerCheck4loopEv>:

void PowerCheck::loop() {
 808715c:	b510      	push	{r4, lr}
 808715e:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8087160:	f003 fa80 	bl	808a664 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastFastCheck >= FAST_CHECK_INTERVAL_MS) {
 8087164:	68e3      	ldr	r3, [r4, #12]
 8087166:	1ac0      	subs	r0, r0, r3
 8087168:	6863      	ldr	r3, [r4, #4]
 808716a:	4298      	cmp	r0, r3
 808716c:	d31a      	bcc.n	80871a4 <_ZN10PowerCheck4loopEv+0x48>
 808716e:	f003 fa79 	bl	808a664 <HAL_Timer_Get_Milli_Seconds>
		// For reasons explained in greater detail we need to check the system status register frequently.
		// But not too frequently, because it does use some system resources to communicate over I2C.
		// An interval of 50 milliseconds, or 20 times per second, seems about right.
		// Setting the interval to 100 milliseconds causes it to miss the condition looked for below sometimes.

		lastFastCheck = millis();
 8087172:	60e0      	str	r0, [r4, #12]

		byte systemStatus = pmic.getSystemStatus();
 8087174:	f104 0014 	add.w	r0, r4, #20
 8087178:	f003 fe05 	bl	808ad86 <_ZN4PMIC15getSystemStatusEv>
		if ((systemStatus & 0x04) != 0) {
 808717c:	f010 0304 	ands.w	r3, r0, #4
 8087180:	d00b      	beq.n	808719a <_ZN10PowerCheck4loopEv+0x3e>
			// Bit 5 CHRG_STAT[1] R
			// Bit 4 CHRG_STAT[0] R
			// 00 – Not Charging, 01 – Pre-charge (<VBATLOWV), 10 – Fast Charging, 11 – Charge Termination Done
			byte chrgStat = (systemStatus >> 4) & 0x3;

			if (chrgStat != lastChrgStat) {
 8087182:	f894 3020 	ldrb.w	r3, [r4, #32]
			byte chrgStat = (systemStatus >> 4) & 0x3;
 8087186:	f3c0 1001 	ubfx	r0, r0, #4, #2
			if (chrgStat != lastChrgStat) {
 808718a:	4283      	cmp	r3, r0
				// Here's where we check to see if the charging status changes. When there's no battery present
				// it changes a lot between fast charging and charge termination done, but since we're polling
				// here instead of using interrupts, we have to poll frequently enough to see states.
				// (The BQ24195 power manager controller is connected to BATT_INT_PC13, but accessing that
				// interrupt from user code is a pain, so I just poll here.)
				changeCount++;
 808718c:	bf1f      	itttt	ne
 808718e:	69e3      	ldrne	r3, [r4, #28]
				lastChrgStat = chrgStat;
 8087190:	f884 0020 	strbne.w	r0, [r4, #32]
				changeCount++;
 8087194:	3301      	addne	r3, #1
 8087196:	61e3      	strne	r3, [r4, #28]
			}

			// We have power (USB or VIN)
			hasPower = true;
 8087198:	2301      	movs	r3, #1
			// 0x34 (Charge Termination Done, Power Good)
			// It does not seem to be possible to tell the difference between VIN and a USB charger
		}
		else {
			// Power good is false, so that means we must be running off battery
			hasPower = false;
 808719a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
		}

		checkCount++;
 808719e:	69a3      	ldr	r3, [r4, #24]
 80871a0:	3301      	adds	r3, #1
 80871a2:	61a3      	str	r3, [r4, #24]
 80871a4:	f003 fa5e 	bl	808a664 <HAL_Timer_Get_Milli_Seconds>
	}
	if (millis() - lastSlowCheck > SLOW_CHECK_INTERVAL_MS) {
 80871a8:	6923      	ldr	r3, [r4, #16]
 80871aa:	1ac0      	subs	r0, r0, r3
 80871ac:	68a3      	ldr	r3, [r4, #8]
 80871ae:	4298      	cmp	r0, r3
 80871b0:	d914      	bls.n	80871dc <_ZN10PowerCheck4loopEv+0x80>
 80871b2:	f003 fa57 	bl	808a664 <HAL_Timer_Get_Milli_Seconds>
		lastSlowCheck = millis();

		// Normally we get a checkCount of 36 or so, and a changeCount of 18 when there's no battery
		hasBattery = ! ((checkCount > 10) && (changeCount > (checkCount / 4)));
 80871b6:	69a3      	ldr	r3, [r4, #24]
		lastSlowCheck = millis();
 80871b8:	6120      	str	r0, [r4, #16]
		hasBattery = ! ((checkCount > 10) && (changeCount > (checkCount / 4)));
 80871ba:	2b0a      	cmp	r3, #10
 80871bc:	dc0f      	bgt.n	80871de <_ZN10PowerCheck4loopEv+0x82>
 80871be:	2301      	movs	r3, #1
 80871c0:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22

		// The battery is charging if in pre-charge or fast charge mode
		isCharging = hasBattery && (lastChrgStat == 1 || lastChrgStat == 2);
 80871c4:	f894 3020 	ldrb.w	r3, [r4, #32]
 80871c8:	3b01      	subs	r3, #1
 80871ca:	2b01      	cmp	r3, #1
 80871cc:	bf8c      	ite	hi
 80871ce:	2300      	movhi	r3, #0
 80871d0:	2301      	movls	r3, #1
 80871d2:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23

		checkCount = 0;
 80871d6:	2300      	movs	r3, #0
		changeCount = 0;
 80871d8:	e9c4 3306 	strd	r3, r3, [r4, #24]
	}

}
 80871dc:	bd10      	pop	{r4, pc}
		hasBattery = ! ((checkCount > 10) && (changeCount > (checkCount / 4)));
 80871de:	69e2      	ldr	r2, [r4, #28]
 80871e0:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 80871e4:	ddeb      	ble.n	80871be <_ZN10PowerCheck4loopEv+0x62>
 80871e6:	2300      	movs	r3, #0
 80871e8:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
		isCharging = hasBattery && (lastChrgStat == 1 || lastChrgStat == 2);
 80871ec:	e7f1      	b.n	80871d2 <_ZN10PowerCheck4loopEv+0x76>

080871ee <_GLOBAL__sub_I__ZN10PowerCheckC2Ev>:
 80871ee:	f003 b9d9 	b.w	808a5a4 <HAL_Pin_Map>

080871f2 <_ZL8i2cwriteh>:
/**************************************************************************/
/*!
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static void i2cwrite(uint8_t x) {
 80871f2:	b510      	push	{r4, lr}
 80871f4:	4604      	mov	r4, r0
  #else
  Wire.send(x);
  #endif
  */
  
  Wire.write((uint8_t)x);
 80871f6:	f006 f863 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 80871fa:	6803      	ldr	r3, [r0, #0]
 80871fc:	4621      	mov	r1, r4
}
 80871fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Wire.write((uint8_t)x);
 8087202:	689b      	ldr	r3, [r3, #8]
 8087204:	4718      	bx	r3

08087206 <_ZL7i2creadv>:
static uint8_t i2cread(void) {
 8087206:	b508      	push	{r3, lr}
  return Wire.read();
 8087208:	f006 f85a 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 808720c:	6803      	ldr	r3, [r0, #0]
 808720e:	695b      	ldr	r3, [r3, #20]
 8087210:	4798      	blx	r3
}
 8087212:	b2c0      	uxtb	r0, r0
 8087214:	bd08      	pop	{r3, pc}

08087216 <_ZL13writeRegisterhht>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static void writeRegister(uint8_t i2cAddress, uint8_t reg, uint16_t value) {
 8087216:	b570      	push	{r4, r5, r6, lr}
 8087218:	4606      	mov	r6, r0
 808721a:	460d      	mov	r5, r1
 808721c:	4614      	mov	r4, r2
  Wire.beginTransmission(i2cAddress);
 808721e:	f006 f84f 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8087222:	4631      	mov	r1, r6
 8087224:	f005 fde8 	bl	808cdf8 <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite((uint8_t)reg);
 8087228:	4628      	mov	r0, r5
 808722a:	f7ff ffe2 	bl	80871f2 <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value>>8));
 808722e:	0a20      	lsrs	r0, r4, #8
 8087230:	f7ff ffdf 	bl	80871f2 <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value & 0xFF));
 8087234:	b2e0      	uxtb	r0, r4
 8087236:	f7ff ffdc 	bl	80871f2 <_ZL8i2cwriteh>
  Wire.endTransmission();
 808723a:	f006 f841 	bl	808d2c0 <_Z19__fetch_global_Wirev>
}
 808723e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Wire.endTransmission();
 8087242:	f005 bdfc 	b.w	808ce3e <_ZN7TwoWire15endTransmissionEv>

08087246 <_ZL12readRegisterhh.isra.0>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
 8087246:	b510      	push	{r4, lr}
 8087248:	4604      	mov	r4, r0
  Wire.beginTransmission(i2cAddress);
 808724a:	f006 f839 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 808724e:	4621      	mov	r1, r4
 8087250:	f005 fdd2 	bl	808cdf8 <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite(ADS1015_REG_POINTER_CONVERT);
 8087254:	2000      	movs	r0, #0
 8087256:	f7ff ffcc 	bl	80871f2 <_ZL8i2cwriteh>
  Wire.endTransmission();
 808725a:	f006 f831 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 808725e:	f005 fdee 	bl	808ce3e <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(i2cAddress, (uint8_t)2);
 8087262:	f006 f82d 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8087266:	4621      	mov	r1, r4
 8087268:	2202      	movs	r2, #2
 808726a:	f005 fdc2 	bl	808cdf2 <_ZN7TwoWire11requestFromEhj>
  return ((i2cread() << 8) | i2cread());  
 808726e:	f7ff ffca 	bl	8087206 <_ZL7i2creadv>
 8087272:	4604      	mov	r4, r0
 8087274:	f7ff ffc7 	bl	8087206 <_ZL7i2creadv>
 8087278:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
}
 808727c:	b280      	uxth	r0, r0
 808727e:	bd10      	pop	{r4, pc}

08087280 <_ZN16Adafruit_ADS1115C1Eh>:
Adafruit_ADS1015::Adafruit_ADS1015(uint8_t i2cAddress) 
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1015_CONVERSIONDELAY;
   m_bitShift = 4;
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
 8087280:	2200      	movs	r2, #0
    @brief  Instantiates a new ADS1115 class w/appropriate properties
*/
/**************************************************************************/
Adafruit_ADS1115::Adafruit_ADS1115(uint8_t i2cAddress)
{
   m_i2cAddress = i2cAddress;
 8087282:	7001      	strb	r1, [r0, #0]
   m_conversionDelay = ADS1115_CONVERSIONDELAY;
 8087284:	2108      	movs	r1, #8
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
 8087286:	8082      	strh	r2, [r0, #4]
   m_conversionDelay = ADS1115_CONVERSIONDELAY;
 8087288:	7041      	strb	r1, [r0, #1]
   m_bitShift = 0;
 808728a:	7082      	strb	r2, [r0, #2]
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
}
 808728c:	4770      	bx	lr

0808728e <_ZN16Adafruit_ADS10155beginEv>:
/**************************************************************************/
/*!
    @brief  Sets up the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
void Adafruit_ADS1015::begin() {
 808728e:	b508      	push	{r3, lr}
  Wire.begin();
 8087290:	f006 f816 	bl	808d2c0 <_Z19__fetch_global_Wirev>
}
 8087294:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Wire.begin();
 8087298:	f005 bd7c 	b.w	808cd94 <_ZN7TwoWire5beginEv>

0808729c <_ZN16Adafruit_ADS10157setGainE9adsGain_t>:
    @brief  Sets the gain and input voltage range
*/
/**************************************************************************/
void Adafruit_ADS1015::setGain(adsGain_t gain)
{
  m_gain = gain;
 808729c:	8081      	strh	r1, [r0, #4]
}
 808729e:	4770      	bx	lr

080872a0 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>:
/*!
    @brief  Gets a single-ended ADC reading from the specified channel
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
  if (channel > 3)
 80872a0:	2903      	cmp	r1, #3
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
 80872a2:	b510      	push	{r4, lr}
 80872a4:	4604      	mov	r4, r0
  if (channel > 3)
 80872a6:	d822      	bhi.n	80872ee <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x4e>

  // Set PGA/voltage range
  config |= m_gain;

  // Set single-ended input channel
  switch (channel)
 80872a8:	2902      	cmp	r1, #2
  config |= m_gain;
 80872aa:	8882      	ldrh	r2, [r0, #4]
  switch (channel)
 80872ac:	d019      	beq.n	80872e2 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x42>
 80872ae:	2903      	cmp	r1, #3
 80872b0:	d01a      	beq.n	80872e8 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x48>
 80872b2:	2901      	cmp	r1, #1
  {
    case (0):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_0;
 80872b4:	bf14      	ite	ne
 80872b6:	f442 4283 	orrne.w	r2, r2, #16768	; 0x4180
      break;
    case (1):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
 80872ba:	f442 42a3 	orreq.w	r2, r2, #20864	; 0x5180
      break;
    case (2):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
      break;
    case (3):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
 80872be:	f042 0203 	orr.w	r2, r2, #3

  // Set 'start single-conversion' bit
  config |= ADS1015_REG_CONFIG_OS_SINGLE;

  // Write config register to the ADC
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
 80872c2:	2101      	movs	r1, #1
 80872c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80872c8:	7820      	ldrb	r0, [r4, #0]
 80872ca:	f7ff ffa4 	bl	8087216 <_ZL13writeRegisterhht>

  // Wait for the conversion to complete
  delay(m_conversionDelay);
 80872ce:	7860      	ldrb	r0, [r4, #1]
 80872d0:	f004 feaa 	bl	808c028 <delay>

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
 80872d4:	7820      	ldrb	r0, [r4, #0]
 80872d6:	f7ff ffb6 	bl	8087246 <_ZL12readRegisterhh.isra.0>
 80872da:	78a3      	ldrb	r3, [r4, #2]
 80872dc:	4118      	asrs	r0, r3
 80872de:	b280      	uxth	r0, r0
}
 80872e0:	bd10      	pop	{r4, pc}
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
 80872e2:	f442 42c3 	orr.w	r2, r2, #24960	; 0x6180
 80872e6:	e7ea      	b.n	80872be <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x1e>
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
 80872e8:	f442 42e3 	orr.w	r2, r2, #29056	; 0x7180
 80872ec:	e7e7      	b.n	80872be <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x1e>
    return 0;
 80872ee:	2000      	movs	r0, #0
 80872f0:	e7f6      	b.n	80872e0 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x40>

080872f2 <_GLOBAL__sub_I__ZN16Adafruit_ADS1015C2Eh>:
 80872f2:	f003 b957 	b.w	808a5a4 <HAL_Pin_Map>
	...

080872f8 <_ZN3GPS15set_lat_decimalE6Stringc>:
#include "gps.h"



//set decimal value of latitude from NMEA string
void GPS::set_lat_decimal(String latString, char nsString){
 80872f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80872fc:	460e      	mov	r6, r1
 80872fe:	b088      	sub	sp, #32
 8087300:	4604      	mov	r4, r0
 8087302:	4615      	mov	r5, r2
    String whole_str = latString.substring(0,2);
 8087304:	4668      	mov	r0, sp
 8087306:	2302      	movs	r3, #2
 8087308:	2200      	movs	r2, #0
 808730a:	f004 fa41 	bl	808b790 <_ZNK6String9substringEjj>
    String frac_str = latString.substring(2,10);
 808730e:	230a      	movs	r3, #10
 8087310:	2202      	movs	r2, #2
 8087312:	4631      	mov	r1, r6
 8087314:	a804      	add	r0, sp, #16
 8087316:	f004 fa3b 	bl	808b790 <_ZNK6String9substringEjj>
    latWhole = whole_str.toInt();
 808731a:	4668      	mov	r0, sp
 808731c:	f004 fa5a 	bl	808b7d4 <_ZNK6String5toIntEv>
 8087320:	83a0      	strh	r0, [r4, #28]
    latFrac = frac_str.toInt();
 8087322:	a804      	add	r0, sp, #16
 8087324:	f004 fa56 	bl	808b7d4 <_ZNK6String5toIntEv>
 8087328:	83e0      	strh	r0, [r4, #30]

    int whole_part = whole_str.toInt();
 808732a:	4668      	mov	r0, sp
 808732c:	f004 fa52 	bl	808b7d4 <_ZNK6String5toIntEv>
 8087330:	4606      	mov	r6, r0
    //Serial.print("Whole part:");
    //Serial.println(whole_part);

    double frac_part = frac_str.toFloat();
 8087332:	a804      	add	r0, sp, #16
 8087334:	f004 fa53 	bl	808b7de <_ZNK6String7toFloatEv>
 8087338:	4680      	mov	r8, r0
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    latitude = whole_part;
 808733a:	4630      	mov	r0, r6
 808733c:	f006 f974 	bl	808d628 <__aeabi_i2d>
 8087340:	4606      	mov	r6, r0
    double frac_part = frac_str.toFloat();
 8087342:	4640      	mov	r0, r8
    latitude = whole_part;
 8087344:	460f      	mov	r7, r1
    double frac_part = frac_str.toFloat();
 8087346:	f006 f981 	bl	808d64c <__aeabi_f2d>
    latitude += (frac_part)/60;
 808734a:	2200      	movs	r2, #0
 808734c:	4b0d      	ldr	r3, [pc, #52]	; (8087384 <_ZN3GPS15set_lat_decimalE6Stringc+0x8c>)
 808734e:	f006 faff 	bl	808d950 <__aeabi_ddiv>
 8087352:	460b      	mov	r3, r1
 8087354:	4602      	mov	r2, r0
 8087356:	4639      	mov	r1, r7
 8087358:	4630      	mov	r0, r6
 808735a:	f006 f819 	bl	808d390 <__adddf3>
    if(nsString == 'S'){
 808735e:	2d53      	cmp	r5, #83	; 0x53
        ns_indicator = 0;
    }else{
        ns_indicator = 0x80;
 8087360:	bf0c      	ite	eq
 8087362:	2300      	moveq	r3, #0
 8087364:	f06f 037f 	mvnne.w	r3, #127	; 0x7f
    latitude += (frac_part)/60;
 8087368:	e9c4 0102 	strd	r0, r1, [r4, #8]
    if(nsString == 'S'){
 808736c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    String frac_str = latString.substring(2,10);
 8087370:	a804      	add	r0, sp, #16
 8087372:	f004 f835 	bl	808b3e0 <_ZN6StringD1Ev>
    String whole_str = latString.substring(0,2);
 8087376:	4668      	mov	r0, sp
 8087378:	f004 f832 	bl	808b3e0 <_ZN6StringD1Ev>
    }
}
 808737c:	b008      	add	sp, #32
 808737e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8087382:	bf00      	nop
 8087384:	404e0000 	.word	0x404e0000

08087388 <_ZN3GPS16set_long_decimalE6Stringc>:

void GPS::set_long_decimal(String longString, char ewString){
 8087388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808738c:	460e      	mov	r6, r1
 808738e:	b088      	sub	sp, #32
 8087390:	4604      	mov	r4, r0
 8087392:	4615      	mov	r5, r2
    String whole_str = longString.substring(0,3);
 8087394:	4668      	mov	r0, sp
 8087396:	2303      	movs	r3, #3
 8087398:	2200      	movs	r2, #0
 808739a:	f004 f9f9 	bl	808b790 <_ZNK6String9substringEjj>
    String frac_str = longString.substring(3,10);
 808739e:	230a      	movs	r3, #10
 80873a0:	2203      	movs	r2, #3
 80873a2:	4631      	mov	r1, r6
 80873a4:	a804      	add	r0, sp, #16
 80873a6:	f004 f9f3 	bl	808b790 <_ZNK6String9substringEjj>

    longWhole = whole_str.toInt();
 80873aa:	4668      	mov	r0, sp
 80873ac:	f004 fa12 	bl	808b7d4 <_ZNK6String5toIntEv>
 80873b0:	8420      	strh	r0, [r4, #32]
    longFrac = frac_str.toInt();
 80873b2:	a804      	add	r0, sp, #16
 80873b4:	f004 fa0e 	bl	808b7d4 <_ZNK6String5toIntEv>
 80873b8:	8460      	strh	r0, [r4, #34]	; 0x22
    int whole_part = whole_str.toInt();
 80873ba:	4668      	mov	r0, sp
 80873bc:	f004 fa0a 	bl	808b7d4 <_ZNK6String5toIntEv>
 80873c0:	4606      	mov	r6, r0
    //Serial.print("Whole string: ");
    //Serial.println(whole_str);
    //Serial.print("Whole part:");
    //Serial.println(whole_part);

    double frac_part = frac_str.toFloat();
 80873c2:	a804      	add	r0, sp, #16
 80873c4:	f004 fa0b 	bl	808b7de <_ZNK6String7toFloatEv>
 80873c8:	4680      	mov	r8, r0
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    longitude = whole_part;
 80873ca:	4630      	mov	r0, r6
 80873cc:	f006 f92c 	bl	808d628 <__aeabi_i2d>
 80873d0:	4606      	mov	r6, r0
    double frac_part = frac_str.toFloat();
 80873d2:	4640      	mov	r0, r8
    longitude = whole_part;
 80873d4:	460f      	mov	r7, r1
    double frac_part = frac_str.toFloat();
 80873d6:	f006 f939 	bl	808d64c <__aeabi_f2d>
    longitude += (frac_part)/60;
 80873da:	2200      	movs	r2, #0
 80873dc:	4b0c      	ldr	r3, [pc, #48]	; (8087410 <_ZN3GPS16set_long_decimalE6Stringc+0x88>)
 80873de:	f006 fab7 	bl	808d950 <__aeabi_ddiv>
 80873e2:	4602      	mov	r2, r0
 80873e4:	460b      	mov	r3, r1
 80873e6:	4630      	mov	r0, r6
 80873e8:	4639      	mov	r1, r7
 80873ea:	f005 ffd1 	bl	808d390 <__adddf3>
    if(ewString == 'E'){
 80873ee:	3d45      	subs	r5, #69	; 0x45
 80873f0:	bf18      	it	ne
 80873f2:	2501      	movne	r5, #1
    longitude += (frac_part)/60;
 80873f4:	e9c4 0104 	strd	r0, r1, [r4, #16]
    if(ewString == 'E'){
 80873f8:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
    String frac_str = longString.substring(3,10);
 80873fc:	a804      	add	r0, sp, #16
 80873fe:	f003 ffef 	bl	808b3e0 <_ZN6StringD1Ev>
    String whole_str = longString.substring(0,3);
 8087402:	4668      	mov	r0, sp
 8087404:	f003 ffec 	bl	808b3e0 <_ZN6StringD1Ev>
      ew_indicator = 0;
    }else{
      ew_indicator = 0x01;
    }
}
 8087408:	b008      	add	sp, #32
 808740a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808740e:	bf00      	nop
 8087410:	404e0000 	.word	0x404e0000

08087414 <_ZN3GPS14set_satellitesE6String>:

void GPS::set_satellites(String satString){
 8087414:	b510      	push	{r4, lr}
 8087416:	4604      	mov	r4, r0
    satellites_used = satString.toInt();
 8087418:	4608      	mov	r0, r1
 808741a:	f004 f9db 	bl	808b7d4 <_ZNK6String5toIntEv>
 808741e:	62e0      	str	r0, [r4, #44]	; 0x2c
}
 8087420:	bd10      	pop	{r4, pc}
	...

08087424 <_ZN3GPS23set_horizontalDillutionE6String>:

void GPS::set_horizontalDillution(String hdString){
 8087424:	b510      	push	{r4, lr}
 8087426:	4604      	mov	r4, r0
    float temp_float = hdString.toFloat();
 8087428:	4608      	mov	r0, r1
 808742a:	f004 f9d8 	bl	808b7de <_ZNK6String7toFloatEv>
    temp_float *= 10;
 808742e:	4902      	ldr	r1, [pc, #8]	; (8087438 <_ZN3GPS23set_horizontalDillutionE6String+0x14>)
 8087430:	f006 fdba 	bl	808dfa8 <__aeabi_fmul>

    horizontal_dillution = temp_float;
 8087434:	6320      	str	r0, [r4, #48]	; 0x30
}
 8087436:	bd10      	pop	{r4, pc}
 8087438:	41200000 	.word	0x41200000

0808743c <_ZN3GPS12get_latitudeEv>:

double GPS::get_latitude(void){
    return latitude;
}
 808743c:	f100 0108 	add.w	r1, r0, #8
 8087440:	e9d1 0100 	ldrd	r0, r1, [r1]
 8087444:	4770      	bx	lr

08087446 <_ZN3GPS13get_longitudeEv>:

double GPS::get_longitude(void){
    return longitude;
}
 8087446:	f100 0110 	add.w	r1, r0, #16
 808744a:	e9d1 0100 	ldrd	r0, r1, [r1]
 808744e:	4770      	bx	lr

08087450 <_ZN3GPS23get_horizontalDillutionEv>:

int GPS::get_satellites(void){
    return satellites_used;
}

int GPS::get_horizontalDillution(void){
 8087450:	b508      	push	{r3, lr}
    return horizontal_dillution;
 8087452:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8087454:	f006 ff6e 	bl	808e334 <__aeabi_f2iz>
}
 8087458:	bd08      	pop	{r3, pc}

0808745a <_ZN3GPS17get_latitudeWholeEv>:

int16_t GPS::get_latitudeWhole(void){
    return latWhole;
}
 808745a:	f9b0 001c 	ldrsh.w	r0, [r0, #28]
 808745e:	4770      	bx	lr

08087460 <_ZN3GPS16get_latitudeFracEv>:
int16_t GPS::get_latitudeFrac(void){
    return latFrac;
}
 8087460:	f9b0 001e 	ldrsh.w	r0, [r0, #30]
 8087464:	4770      	bx	lr

08087466 <_ZN3GPS18get_longitudeWholeEv>:
int16_t GPS::get_longitudeWhole(void){
    return longWhole;
}
 8087466:	f9b0 0020 	ldrsh.w	r0, [r0, #32]
 808746a:	4770      	bx	lr

0808746c <_ZN3GPS17get_longitudeFracEv>:
int16_t GPS::get_longitudeFrac(void){
    return longFrac;
}
 808746c:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8087470:	4770      	bx	lr

08087472 <_ZN3GPS15get_nsIndicatorEv>:

int8_t GPS::get_nsIndicator(void){
    return ns_indicator;
}
 8087472:	f990 0024 	ldrsb.w	r0, [r0, #36]	; 0x24
 8087476:	4770      	bx	lr

08087478 <_ZN3GPS15get_ewIndicatorEv>:

int8_t GPS::get_ewIndicator(void){
    return ew_indicator;
}
 8087478:	f990 0025 	ldrsb.w	r0, [r0, #37]	; 0x25
 808747c:	4770      	bx	lr

0808747e <_GLOBAL__sub_I__ZN3GPS15set_lat_decimalE6Stringc>:
 808747e:	f003 b891 	b.w	808a5a4 <HAL_Pin_Map>

08087482 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 8087482:	6803      	ldr	r3, [r0, #0]
 8087484:	b2c9      	uxtb	r1, r1
 8087486:	689b      	ldr	r3, [r3, #8]
 8087488:	4718      	bx	r3

0808748a <_ZN13Telaire_T6713C1Ev>:
#define ADDR_6713  0x15 // default I2C slave address

Telaire_T6713::Telaire_T6713()
{
  //perform initialization
}
 808748a:	4770      	bx	lr

0808748c <_ZN13Telaire_T67135beginEv>:

bool Telaire_T6713::begin()
{
 808748c:	b510      	push	{r4, lr}
  LSB = 0;
  #ifdef T6713_DEBUG
  Serial.println("Begin Telaire_T6713");
  #endif
  // start I2C
  Wire.beginTransmission(ADDR_6713);
 808748e:	f005 ff17 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8087492:	2115      	movs	r1, #21
 8087494:	f005 fcb4 	bl	808ce00 <_ZN7TwoWire17beginTransmissionEi>

  // Function code = 0x04
  Wire.write(0x04);
 8087498:	f005 ff12 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 808749c:	2104      	movs	r1, #4
 808749e:	f7ff fff0 	bl	8087482 <_ZN7TwoWire5writeEi>
  // Starting address (MSB) = 0x13
  Wire.write(0x13);
 80874a2:	f005 ff0d 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 80874a6:	2113      	movs	r1, #19
 80874a8:	f7ff ffeb 	bl	8087482 <_ZN7TwoWire5writeEi>
  // Starting address (LSB) = 0x8B
  Wire.write(0x8B);
 80874ac:	f005 ff08 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 80874b0:	218b      	movs	r1, #139	; 0x8b
 80874b2:	f7ff ffe6 	bl	8087482 <_ZN7TwoWire5writeEi>
  // Input registers to read (MSB) = 0x00
  Wire.write(0x00);
 80874b6:	f005 ff03 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 80874ba:	2100      	movs	r1, #0
 80874bc:	f7ff ffe1 	bl	8087482 <_ZN7TwoWire5writeEi>
  // Input registers to read (LSB) = 0x01
  Wire.write(0x01);
 80874c0:	f005 fefe 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 80874c4:	2101      	movs	r1, #1
 80874c6:	f7ff ffdc 	bl	8087482 <_ZN7TwoWire5writeEi>

  // end transmission
  Wire.endTransmission();
 80874ca:	f005 fef9 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 80874ce:	f005 fcb6 	bl	808ce3e <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(ADDR_6713, 4);    // request 6 bytes from slave device
 80874d2:	f005 fef5 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 80874d6:	2204      	movs	r2, #4
 80874d8:	2115      	movs	r1, #21
 80874da:	f005 fc8a 	bl	808cdf2 <_ZN7TwoWire11requestFromEhj>
  while(Wire.available() == 0);
 80874de:	f005 feef 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 80874e2:	6803      	ldr	r3, [r0, #0]
 80874e4:	691b      	ldr	r3, [r3, #16]
 80874e6:	4798      	blx	r3
 80874e8:	2800      	cmp	r0, #0
 80874ea:	d0f8      	beq.n	80874de <_ZN13Telaire_T67135beginEv+0x52>
  func_code = Wire.read();
 80874ec:	f005 fee8 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 80874f0:	6803      	ldr	r3, [r0, #0]
 80874f2:	695b      	ldr	r3, [r3, #20]
 80874f4:	4798      	blx	r3
  byte_count = Wire.read();
 80874f6:	f005 fee3 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 80874fa:	6803      	ldr	r3, [r0, #0]
 80874fc:	695b      	ldr	r3, [r3, #20]
 80874fe:	4798      	blx	r3
  MSB = Wire.read();
 8087500:	f005 fede 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8087504:	6803      	ldr	r3, [r0, #0]
 8087506:	695b      	ldr	r3, [r3, #20]
 8087508:	4798      	blx	r3
 808750a:	4604      	mov	r4, r0
  LSB = Wire.read();
 808750c:	f005 fed8 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8087510:	6803      	ldr	r3, [r0, #0]
  Serial.print("MSB: ");
  Serial.println(MSB);
  Serial.print("LSB: ");
  Serial.println(LSB);
  #endif
  int ppm = MSB*256 + LSB;
 8087512:	b2e4      	uxtb	r4, r4
  LSB = Wire.read();
 8087514:	695b      	ldr	r3, [r3, #20]
 8087516:	4798      	blx	r3
  int ppm = MSB*256 + LSB;
 8087518:	b2c0      	uxtb	r0, r0
 808751a:	eb00 2004 	add.w	r0, r0, r4, lsl #8
  {
    return false;
  }

  return true;
}
 808751e:	3800      	subs	r0, #0
 8087520:	bf18      	it	ne
 8087522:	2001      	movne	r0, #1
 8087524:	bd10      	pop	{r4, pc}

08087526 <_ZN13Telaire_T67138queryPPMEv>:
// send request to read current gas measurement in ppm
// return status: 0 success
void Telaire_T6713::queryPPM()
{
 8087526:	b508      	push	{r3, lr}
  byte_count = 0;
  MSB = 0;
  LSB = 0;

  // start I2C
  Wire.beginTransmission(ADDR_6713);
 8087528:	f005 feca 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 808752c:	2115      	movs	r1, #21
 808752e:	f005 fc67 	bl	808ce00 <_ZN7TwoWire17beginTransmissionEi>

  // Function code = 0x04
  Wire.write(0x04);
 8087532:	f005 fec5 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8087536:	2104      	movs	r1, #4
 8087538:	f7ff ffa3 	bl	8087482 <_ZN7TwoWire5writeEi>
  // Starting address (MSB) = 0x13
  Wire.write(0x13);
 808753c:	f005 fec0 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8087540:	2113      	movs	r1, #19
 8087542:	f7ff ff9e 	bl	8087482 <_ZN7TwoWire5writeEi>
  // Starting address (LSB) = 0x8B
  Wire.write(0x8B);
 8087546:	f005 febb 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 808754a:	218b      	movs	r1, #139	; 0x8b
 808754c:	f7ff ff99 	bl	8087482 <_ZN7TwoWire5writeEi>
  // Input registers to read (MSB) = 0x00
  Wire.write(0x00);
 8087550:	f005 feb6 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8087554:	2100      	movs	r1, #0
 8087556:	f7ff ff94 	bl	8087482 <_ZN7TwoWire5writeEi>
  // Input registers to read (LSB) = 0x01
  Wire.write(0x01);
 808755a:	f005 feb1 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 808755e:	2101      	movs	r1, #1
 8087560:	f7ff ff8f 	bl	8087482 <_ZN7TwoWire5writeEi>

  // end transmission
  Wire.endTransmission();
 8087564:	f005 feac 	bl	808d2c0 <_Z19__fetch_global_Wirev>
  Serial.println(LSB);
  int ppm = MSB*256 + LSB;
  Serial.println(ppm);*/


}
 8087568:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Wire.endTransmission();
 808756c:	f005 bc67 	b.w	808ce3e <_ZN7TwoWire15endTransmissionEv>

08087570 <_ZN13Telaire_T67137readPPMEv>:

// read report of current gas measurement in ppm
int Telaire_T6713::readPPM()
{
 8087570:	b510      	push	{r4, lr}
  LSB = 0;
  #ifdef T6713_DEBUG
  Serial.println("reading gas ppm");
  #endif

  queryPPM();
 8087572:	f7ff ffd8 	bl	8087526 <_ZN13Telaire_T67138queryPPMEv>
  delay(10);    //test delay
 8087576:	200a      	movs	r0, #10
 8087578:	f004 fd56 	bl	808c028 <delay>
  Wire.requestFrom(ADDR_6713, 4);    // request 6 bytes from slave device
 808757c:	f005 fea0 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8087580:	2204      	movs	r2, #4
 8087582:	2115      	movs	r1, #21
 8087584:	f005 fc35 	bl	808cdf2 <_ZN7TwoWire11requestFromEhj>

   while(Wire.available() == 0);
 8087588:	f005 fe9a 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 808758c:	6803      	ldr	r3, [r0, #0]
 808758e:	691b      	ldr	r3, [r3, #16]
 8087590:	4798      	blx	r3
 8087592:	2800      	cmp	r0, #0
 8087594:	d0f8      	beq.n	8087588 <_ZN13Telaire_T67137readPPMEv+0x18>
   func_code = Wire.read();
 8087596:	f005 fe93 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 808759a:	6803      	ldr	r3, [r0, #0]
 808759c:	695b      	ldr	r3, [r3, #20]
 808759e:	4798      	blx	r3
   byte_count = Wire.read();
 80875a0:	f005 fe8e 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 80875a4:	6803      	ldr	r3, [r0, #0]
 80875a6:	695b      	ldr	r3, [r3, #20]
 80875a8:	4798      	blx	r3
   MSB = Wire.read();
 80875aa:	f005 fe89 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 80875ae:	6803      	ldr	r3, [r0, #0]
 80875b0:	695b      	ldr	r3, [r3, #20]
 80875b2:	4798      	blx	r3
 80875b4:	4604      	mov	r4, r0
   LSB = Wire.read();
 80875b6:	f005 fe83 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 80875ba:	6803      	ldr	r3, [r0, #0]
   Serial.print("LSB: ");
   Serial.println(LSB);
   #endif

   // ppm = MSB*256 + LSB
   return ((MSB<<8)|LSB);
 80875bc:	0224      	lsls	r4, r4, #8
   LSB = Wire.read();
 80875be:	695b      	ldr	r3, [r3, #20]
 80875c0:	4798      	blx	r3
   return ((MSB<<8)|LSB);
 80875c2:	b2a4      	uxth	r4, r4
 80875c4:	b2c0      	uxtb	r0, r0
}
 80875c6:	4320      	orrs	r0, r4
 80875c8:	bd10      	pop	{r4, pc}

080875ca <_ZN13Telaire_T671311resetSensorEv>:
   }

}

void Telaire_T6713::resetSensor()
{
 80875ca:	b508      	push	{r3, lr}
  Wire.beginTransmission(ADDR_6713);
 80875cc:	f005 fe78 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 80875d0:	2115      	movs	r1, #21
 80875d2:	f005 fc15 	bl	808ce00 <_ZN7TwoWire17beginTransmissionEi>

  // Function code = 0x04
  Wire.write(0x05);
 80875d6:	f005 fe73 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 80875da:	2105      	movs	r1, #5
 80875dc:	f7ff ff51 	bl	8087482 <_ZN7TwoWire5writeEi>
  // Starting address (MSB) = 0x13
  Wire.write(0x03);
 80875e0:	f005 fe6e 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 80875e4:	2103      	movs	r1, #3
 80875e6:	f7ff ff4c 	bl	8087482 <_ZN7TwoWire5writeEi>
  // Starting address (LSB) = 0x8B
  Wire.write(0xE8);
 80875ea:	f005 fe69 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 80875ee:	21e8      	movs	r1, #232	; 0xe8
 80875f0:	f7ff ff47 	bl	8087482 <_ZN7TwoWire5writeEi>
  // Input registers to read (MSB) = 0x00
  Wire.write(0xFF);
 80875f4:	f005 fe64 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 80875f8:	21ff      	movs	r1, #255	; 0xff
 80875fa:	f7ff ff42 	bl	8087482 <_ZN7TwoWire5writeEi>
  // Input registers to read (LSB) = 0x01
  Wire.write(0x00);
 80875fe:	f005 fe5f 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8087602:	2100      	movs	r1, #0
 8087604:	f7ff ff3d 	bl	8087482 <_ZN7TwoWire5writeEi>

  // end transmission
   Wire.endTransmission();
 8087608:	f005 fe5a 	bl	808d2c0 <_Z19__fetch_global_Wirev>
}
 808760c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   Wire.endTransmission();
 8087610:	f005 bc15 	b.w	808ce3e <_ZN7TwoWire15endTransmissionEv>

08087614 <_ZN13Telaire_T671315disableABCLogicEv>:

void Telaire_T6713::disableABCLogic()
{
 8087614:	b508      	push	{r3, lr}
    Wire.beginTransmission(ADDR_6713);
 8087616:	f005 fe53 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 808761a:	2115      	movs	r1, #21
 808761c:	f005 fbf0 	bl	808ce00 <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 8087620:	f005 fe4e 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8087624:	2105      	movs	r1, #5
 8087626:	f7ff ff2c 	bl	8087482 <_ZN7TwoWire5writeEi>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 808762a:	f005 fe49 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 808762e:	2103      	movs	r1, #3
 8087630:	f7ff ff27 	bl	8087482 <_ZN7TwoWire5writeEi>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEE);
 8087634:	f005 fe44 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8087638:	21ee      	movs	r1, #238	; 0xee
 808763a:	f7ff ff22 	bl	8087482 <_ZN7TwoWire5writeEi>
    // Input registers to read (MSB) = 0x00
    Wire.write(0x00);
 808763e:	f005 fe3f 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8087642:	2100      	movs	r1, #0
 8087644:	f7ff ff1d 	bl	8087482 <_ZN7TwoWire5writeEi>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 8087648:	f005 fe3a 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 808764c:	2100      	movs	r1, #0
 808764e:	f7ff ff18 	bl	8087482 <_ZN7TwoWire5writeEi>

    // end transmission
    Wire.endTransmission();
 8087652:	f005 fe35 	bl	808d2c0 <_Z19__fetch_global_Wirev>
}
 8087656:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.endTransmission();
 808765a:	f005 bbf0 	b.w	808ce3e <_ZN7TwoWire15endTransmissionEv>

0808765e <_ZN13Telaire_T671314enableABCLogicEv>:

void Telaire_T6713::enableABCLogic()
{
 808765e:	b508      	push	{r3, lr}
    Wire.beginTransmission(ADDR_6713);
 8087660:	f005 fe2e 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8087664:	2115      	movs	r1, #21
 8087666:	f005 fbcb 	bl	808ce00 <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 808766a:	f005 fe29 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 808766e:	2105      	movs	r1, #5
 8087670:	f7ff ff07 	bl	8087482 <_ZN7TwoWire5writeEi>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 8087674:	f005 fe24 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8087678:	2103      	movs	r1, #3
 808767a:	f7ff ff02 	bl	8087482 <_ZN7TwoWire5writeEi>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEE);
 808767e:	f005 fe1f 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8087682:	21ee      	movs	r1, #238	; 0xee
 8087684:	f7ff fefd 	bl	8087482 <_ZN7TwoWire5writeEi>
    // Input registers to read (MSB) = 0x00
    Wire.write(0xFF);
 8087688:	f005 fe1a 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 808768c:	21ff      	movs	r1, #255	; 0xff
 808768e:	f7ff fef8 	bl	8087482 <_ZN7TwoWire5writeEi>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 8087692:	f005 fe15 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8087696:	2100      	movs	r1, #0
 8087698:	f7ff fef3 	bl	8087482 <_ZN7TwoWire5writeEi>

    // end transmission
    Wire.endTransmission();
 808769c:	f005 fe10 	bl	808d2c0 <_Z19__fetch_global_Wirev>
}
 80876a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.endTransmission();
 80876a4:	f005 bbcb 	b.w	808ce3e <_ZN7TwoWire15endTransmissionEv>

080876a8 <_ZN13Telaire_T67139calibrateEi>:


//start a 1 point calibration - this lasts 6 minutes so check the status bit
void Telaire_T6713::calibrate(int debugging)
{
 80876a8:	b508      	push	{r3, lr}
    if(debugging){
 80876aa:	b121      	cbz	r1, 80876b6 <_ZN13Telaire_T67139calibrateEi+0xe>
      Serial.println("Calibrating CO2");
 80876ac:	f005 f9ae 	bl	808ca0c <_Z16_fetch_usbserialv>
 80876b0:	4913      	ldr	r1, [pc, #76]	; (8087700 <_ZN13Telaire_T67139calibrateEi+0x58>)
 80876b2:	f004 f8f0 	bl	808b896 <_ZN5Print7printlnEPKc>
    }
    //[0x05, 0x03, 0xec, 0xff, 0x00]
    Wire.beginTransmission(ADDR_6713);
 80876b6:	f005 fe03 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 80876ba:	2115      	movs	r1, #21
 80876bc:	f005 fba0 	bl	808ce00 <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 80876c0:	f005 fdfe 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 80876c4:	2105      	movs	r1, #5
 80876c6:	f7ff fedc 	bl	8087482 <_ZN7TwoWire5writeEi>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 80876ca:	f005 fdf9 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 80876ce:	2103      	movs	r1, #3
 80876d0:	f7ff fed7 	bl	8087482 <_ZN7TwoWire5writeEi>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEC);
 80876d4:	f005 fdf4 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 80876d8:	21ec      	movs	r1, #236	; 0xec
 80876da:	f7ff fed2 	bl	8087482 <_ZN7TwoWire5writeEi>
    // Input registers to read (MSB) = 0x00
    Wire.write(0xFF);
 80876de:	f005 fdef 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 80876e2:	21ff      	movs	r1, #255	; 0xff
 80876e4:	f7ff fecd 	bl	8087482 <_ZN7TwoWire5writeEi>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 80876e8:	f005 fdea 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 80876ec:	2100      	movs	r1, #0
 80876ee:	f7ff fec8 	bl	8087482 <_ZN7TwoWire5writeEi>

    // end transmission
    Wire.endTransmission();
 80876f2:	f005 fde5 	bl	808d2c0 <_Z19__fetch_global_Wirev>
}
 80876f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.endTransmission();
 80876fa:	f005 bba0 	b.w	808ce3e <_ZN7TwoWire15endTransmissionEv>
 80876fe:	bf00      	nop
 8087700:	08093f70 	.word	0x08093f70

08087704 <_ZN5Print7printlnIhLi0EEEjT_i>:
    size_t println(T b, int base = DEC) {
 8087704:	b538      	push	{r3, r4, r5, lr}
 8087706:	4605      	mov	r5, r0
    if (base == 0) {
 8087708:	b942      	cbnz	r2, 808771c <_ZN5Print7printlnIhLi0EEEjT_i+0x18>
        return write(n);
 808770a:	6803      	ldr	r3, [r0, #0]
 808770c:	689b      	ldr	r3, [r3, #8]
 808770e:	4798      	blx	r3
        return printNumber(val, base) + t;
 8087710:	4604      	mov	r4, r0
        n += println();
 8087712:	4628      	mov	r0, r5
 8087714:	f004 f8b3 	bl	808b87e <_ZN5Print7printlnEv>
    }
 8087718:	4420      	add	r0, r4
 808771a:	bd38      	pop	{r3, r4, r5, pc}
        return printNumber(val, base) + t;
 808771c:	b2d2      	uxtb	r2, r2
 808771e:	f004 f8ce 	bl	808b8be <_ZN5Print11printNumberEmh>
 8087722:	e7f5      	b.n	8087710 <_ZN5Print7printlnIhLi0EEEjT_i+0xc>

08087724 <_ZN13Telaire_T671310readStatusEi>:
{
 8087724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8087728:	460c      	mov	r4, r1
  Wire.beginTransmission(ADDR_6713);
 808772a:	f005 fdc9 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 808772e:	2115      	movs	r1, #21
 8087730:	f005 fb66 	bl	808ce00 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(0x04);
 8087734:	f005 fdc4 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8087738:	2104      	movs	r1, #4
 808773a:	f7ff fea2 	bl	8087482 <_ZN7TwoWire5writeEi>
  Wire.write(0x13);
 808773e:	f005 fdbf 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8087742:	2113      	movs	r1, #19
 8087744:	f7ff fe9d 	bl	8087482 <_ZN7TwoWire5writeEi>
  Wire.write(0x8A);
 8087748:	f005 fdba 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 808774c:	218a      	movs	r1, #138	; 0x8a
 808774e:	f7ff fe98 	bl	8087482 <_ZN7TwoWire5writeEi>
  Wire.write(0x00);
 8087752:	f005 fdb5 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8087756:	2100      	movs	r1, #0
 8087758:	f7ff fe93 	bl	8087482 <_ZN7TwoWire5writeEi>
  Wire.write(0x01);
 808775c:	f005 fdb0 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8087760:	2101      	movs	r1, #1
 8087762:	f7ff fe8e 	bl	8087482 <_ZN7TwoWire5writeEi>
   Wire.endTransmission();
 8087766:	f005 fdab 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 808776a:	f005 fb68 	bl	808ce3e <_ZN7TwoWire15endTransmissionEv>
   if(debugging){
 808776e:	b124      	cbz	r4, 808777a <_ZN13Telaire_T671310readStatusEi+0x56>
       Serial.println("reading CO2 sensor status");
 8087770:	f005 f94c 	bl	808ca0c <_Z16_fetch_usbserialv>
 8087774:	492b      	ldr	r1, [pc, #172]	; (8087824 <_ZN13Telaire_T671310readStatusEi+0x100>)
 8087776:	f004 f88e 	bl	808b896 <_ZN5Print7printlnEPKc>
   Wire.requestFrom(ADDR_6713, 4);    // request 6 bytes from slave device
 808777a:	f005 fda1 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 808777e:	2204      	movs	r2, #4
 8087780:	2115      	movs	r1, #21
 8087782:	f005 fb36 	bl	808cdf2 <_ZN7TwoWire11requestFromEhj>
   while(Wire.available() == 0);
 8087786:	f005 fd9b 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 808778a:	6803      	ldr	r3, [r0, #0]
 808778c:	691b      	ldr	r3, [r3, #16]
 808778e:	4798      	blx	r3
 8087790:	2800      	cmp	r0, #0
 8087792:	d0f8      	beq.n	8087786 <_ZN13Telaire_T671310readStatusEi+0x62>
   func_code = Wire.read();
 8087794:	f005 fd94 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8087798:	6803      	ldr	r3, [r0, #0]
 808779a:	695b      	ldr	r3, [r3, #20]
 808779c:	4798      	blx	r3
 808779e:	4680      	mov	r8, r0
   byte_count = Wire.read();
 80877a0:	f005 fd8e 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 80877a4:	6803      	ldr	r3, [r0, #0]
 80877a6:	695b      	ldr	r3, [r3, #20]
 80877a8:	4798      	blx	r3
 80877aa:	4607      	mov	r7, r0
   MSB = Wire.read();
 80877ac:	f005 fd88 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 80877b0:	6803      	ldr	r3, [r0, #0]
 80877b2:	695b      	ldr	r3, [r3, #20]
 80877b4:	4798      	blx	r3
 80877b6:	4606      	mov	r6, r0
   LSB = Wire.read();
 80877b8:	f005 fd82 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 80877bc:	6803      	ldr	r3, [r0, #0]
 80877be:	695b      	ldr	r3, [r3, #20]
 80877c0:	4798      	blx	r3
 80877c2:	4605      	mov	r5, r0
   if(debugging){
 80877c4:	b364      	cbz	r4, 8087820 <_ZN13Telaire_T671310readStatusEi+0xfc>
       Serial.print("Func code: ");
 80877c6:	f005 f921 	bl	808ca0c <_Z16_fetch_usbserialv>
 80877ca:	4917      	ldr	r1, [pc, #92]	; (8087828 <_ZN13Telaire_T671310readStatusEi+0x104>)
 80877cc:	f004 f850 	bl	808b870 <_ZN5Print5printEPKc>
       Serial.println(func_code, HEX);
 80877d0:	f005 f91c 	bl	808ca0c <_Z16_fetch_usbserialv>
 80877d4:	2210      	movs	r2, #16
 80877d6:	fa5f f188 	uxtb.w	r1, r8
 80877da:	f7ff ff93 	bl	8087704 <_ZN5Print7printlnIhLi0EEEjT_i>
       Serial.print("byte count: ");
 80877de:	f005 f915 	bl	808ca0c <_Z16_fetch_usbserialv>
 80877e2:	4912      	ldr	r1, [pc, #72]	; (808782c <_ZN13Telaire_T671310readStatusEi+0x108>)
 80877e4:	f004 f844 	bl	808b870 <_ZN5Print5printEPKc>
       Serial.println(byte_count, HEX);
 80877e8:	f005 f910 	bl	808ca0c <_Z16_fetch_usbserialv>
 80877ec:	2210      	movs	r2, #16
 80877ee:	b2f9      	uxtb	r1, r7
 80877f0:	f7ff ff88 	bl	8087704 <_ZN5Print7printlnIhLi0EEEjT_i>
       Serial.print("MSB: ");
 80877f4:	f005 f90a 	bl	808ca0c <_Z16_fetch_usbserialv>
 80877f8:	490d      	ldr	r1, [pc, #52]	; (8087830 <_ZN13Telaire_T671310readStatusEi+0x10c>)
 80877fa:	f004 f839 	bl	808b870 <_ZN5Print5printEPKc>
       Serial.println(MSB, BIN);
 80877fe:	f005 f905 	bl	808ca0c <_Z16_fetch_usbserialv>
 8087802:	2202      	movs	r2, #2
 8087804:	b2f1      	uxtb	r1, r6
 8087806:	f7ff ff7d 	bl	8087704 <_ZN5Print7printlnIhLi0EEEjT_i>
       Serial.print("LSB: ");
 808780a:	f005 f8ff 	bl	808ca0c <_Z16_fetch_usbserialv>
 808780e:	4909      	ldr	r1, [pc, #36]	; (8087834 <_ZN13Telaire_T671310readStatusEi+0x110>)
 8087810:	f004 f82e 	bl	808b870 <_ZN5Print5printEPKc>
       Serial.println(LSB, BIN);
 8087814:	f005 f8fa 	bl	808ca0c <_Z16_fetch_usbserialv>
 8087818:	2202      	movs	r2, #2
 808781a:	b2e9      	uxtb	r1, r5
 808781c:	f7ff ff72 	bl	8087704 <_ZN5Print7printlnIhLi0EEEjT_i>
}
 8087820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8087824:	08093f80 	.word	0x08093f80
 8087828:	08093f9a 	.word	0x08093f9a
 808782c:	08093fa6 	.word	0x08093fa6
 8087830:	08093fb3 	.word	0x08093fb3
 8087834:	08093fb9 	.word	0x08093fb9

08087838 <_GLOBAL__sub_I__ZN13Telaire_T6713C2Ev>:
 8087838:	f002 beb4 	b.w	808a5a4 <HAL_Pin_Map>

0808783c <_GLOBAL__sub_I__ZN7istream3getEv>:
 808783c:	f002 beb2 	b.w	808a5a4 <HAL_Pin_Map>

08087840 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
 8087840:	b510      	push	{r4, lr}
 8087842:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync();
 8087844:	3028      	adds	r0, #40	; 0x28
 8087846:	f001 f9d1 	bl	8088bec <_ZN8FatCache4syncEv>
 808784a:	b128      	cbz	r0, 8087858 <_ZN9FatVolume9cacheSyncEv+0x18>
 808784c:	f504 700d 	add.w	r0, r4, #564	; 0x234
  }
 8087850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync();
 8087854:	f001 b9ca 	b.w	8088bec <_ZN8FatCache4syncEv>
  }
 8087858:	bd10      	pop	{r4, pc}

0808785a <_ZN7FatFile11lfnChecksumEPh>:
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 808785a:	1e41      	subs	r1, r0, #1
 808785c:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
 8087860:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 8087862:	0842      	lsrs	r2, r0, #1
 8087864:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
 8087868:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 808786c:	4410      	add	r0, r2
  for (uint8_t i = 0; i < 11; i++) {
 808786e:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 8087870:	f000 00ff 	and.w	r0, r0, #255	; 0xff
  for (uint8_t i = 0; i < 11; i++) {
 8087874:	d1f5      	bne.n	8087862 <_ZN7FatFile11lfnChecksumEPh+0x8>
  }
  return sum;
}
 8087876:	4770      	bx	lr

08087878 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
 8087878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808787c:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
 808787e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8087882:	2b20      	cmp	r3, #32
 8087884:	d0fa      	beq.n	808787c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
 8087886:	2400      	movs	r4, #0
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 8087888:	4d6a      	ldr	r5, [pc, #424]	; (8087a34 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1bc>)
  fname->lfn = path;
 808788a:	608e      	str	r6, [r1, #8]
    c = path[len];
 808788c:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
 808788e:	b1c3      	cbz	r3, 80878c2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
 8087890:	2b2f      	cmp	r3, #47	; 0x2f
 8087892:	d016      	beq.n	80878c2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 8087894:	2b5c      	cmp	r3, #92	; 0x5c
 8087896:	d102      	bne.n	808789e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
 8087898:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
 808789a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 808789e:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
 80878a2:	b2c0      	uxtb	r0, r0
 80878a4:	281d      	cmp	r0, #29
 80878a6:	d803      	bhi.n	80878b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
 80878a8:	fa25 f000 	lsr.w	r0, r5, r0
 80878ac:	07c0      	lsls	r0, r0, #31
 80878ae:	d4f3      	bmi.n	8087898 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
 80878b0:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
 80878b4:	283c      	cmp	r0, #60	; 0x3c
 80878b6:	d0ef      	beq.n	8087898 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
 80878b8:	3b20      	subs	r3, #32
 80878ba:	2b5e      	cmp	r3, #94	; 0x5e
 80878bc:	d8ec      	bhi.n	8087898 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
 80878be:	3401      	adds	r4, #1
    c = path[len];
 80878c0:	e7e4      	b.n	808788c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
 80878c2:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
 80878c4:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
 80878c6:	4607      	mov	r7, r0
 80878c8:	f810 5b01 	ldrb.w	r5, [r0], #1
 80878cc:	2d20      	cmp	r5, #32
 80878ce:	d0fa      	beq.n	80878c6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
 80878d0:	2d2f      	cmp	r5, #47	; 0x2f
 80878d2:	d0f8      	beq.n	80878c6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
 80878d4:	6017      	str	r7, [r2, #0]
  while (len) {
 80878d6:	b14c      	cbz	r4, 80878ec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
 80878d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
 80878dc:	2a2e      	cmp	r2, #46	; 0x2e
 80878de:	d001      	beq.n	80878e4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
 80878e0:	2a20      	cmp	r2, #32
 80878e2:	d101      	bne.n	80878e8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
 80878e4:	3c01      	subs	r4, #1
  while (len) {
 80878e6:	e7f6      	b.n	80878d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
 80878e8:	2cff      	cmp	r4, #255	; 0xff
 80878ea:	dcd5      	bgt.n	8087898 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
 80878ec:	2020      	movs	r0, #32
  fname->len = len;
 80878ee:	604c      	str	r4, [r1, #4]
  for (uint8_t k = 0; k < 11; k++) {
 80878f0:	f101 030d 	add.w	r3, r1, #13
 80878f4:	f101 0218 	add.w	r2, r1, #24
    fname->sfn[k] = ' ';
 80878f8:	f803 0b01 	strb.w	r0, [r3], #1
  for (uint8_t k = 0; k < 11; k++) {
 80878fc:	4293      	cmp	r3, r2
 80878fe:	d1fb      	bne.n	80878f8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x80>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 8087900:	f04f 0800 	mov.w	r8, #0
 8087904:	f816 3008 	ldrb.w	r3, [r6, r8]
 8087908:	2b2e      	cmp	r3, #46	; 0x2e
 808790a:	d001      	beq.n	8087910 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
 808790c:	2b20      	cmp	r3, #32
 808790e:	d102      	bne.n	8087916 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9e>
 8087910:	f108 0801 	add.w	r8, r8, #1
 8087914:	e7f6      	b.n	8087904 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8c>
  is83 = !si;
 8087916:	fab8 f088 	clz	r0, r8
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 808791a:	1e65      	subs	r5, r4, #1
  is83 = !si;
 808791c:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 808791e:	1c6b      	adds	r3, r5, #1
 8087920:	d002      	beq.n	8087928 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xb0>
 8087922:	5d73      	ldrb	r3, [r6, r5]
 8087924:	2b2e      	cmp	r3, #46	; 0x2e
 8087926:	d114      	bne.n	8087952 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 8087928:	f04f 0900 	mov.w	r9, #0
 808792c:	2707      	movs	r7, #7
 808792e:	464a      	mov	r2, r9
 8087930:	46ca      	mov	sl, r9
 8087932:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
 8087936:	45a0      	cmp	r8, r4
 8087938:	da69      	bge.n	8087a0e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x196>
    c = path[si];
 808793a:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
 808793e:	2b20      	cmp	r3, #32
 8087940:	d003      	beq.n	808794a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd2>
 8087942:	2b2e      	cmp	r3, #46	; 0x2e
 8087944:	d107      	bne.n	8087956 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
 8087946:	45a8      	cmp	r8, r5
 8087948:	d012      	beq.n	8087970 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
      is83 = false;
 808794a:	2000      	movs	r0, #0
  for (; si < len; si++) {
 808794c:	f108 0801 	add.w	r8, r8, #1
 8087950:	e7f1      	b.n	8087936 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 8087952:	3d01      	subs	r5, #1
 8087954:	e7e3      	b.n	808791e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa6>
    if (c == '"' || c == '|') {
 8087956:	2b22      	cmp	r3, #34	; 0x22
 8087958:	d008      	beq.n	808796c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
 808795a:	2b7c      	cmp	r3, #124	; 0x7c
 808795c:	d006      	beq.n	808796c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
 808795e:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
 8087962:	f1bc 0f05 	cmp.w	ip, #5
 8087966:	d80b      	bhi.n	8087980 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
 8087968:	2b2d      	cmp	r3, #45	; 0x2d
 808796a:	d013      	beq.n	8087994 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x11c>
    if (!legal83Char(c) && si != dot) {
 808796c:	45a8      	cmp	r8, r5
 808796e:	d15c      	bne.n	8087a2a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b2>
      if (in == 10) {
 8087970:	2f0a      	cmp	r7, #10
 8087972:	d04b      	beq.n	8087a0c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x194>
 8087974:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
 8087976:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
 8087978:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 808797a:	f04f 0e10 	mov.w	lr, #16
 808797e:	e7e5      	b.n	808794c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd4>
    if (0X3A <= c && c <= 0X3F) {
 8087980:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
 8087984:	f1bc 0f05 	cmp.w	ip, #5
 8087988:	d9f0      	bls.n	808796c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (0X5B <= c && c <= 0X5D) {
 808798a:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
 808798e:	f1bc 0f02 	cmp.w	ip, #2
 8087992:	d9eb      	bls.n	808796c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (!legal83Char(c) && si != dot) {
 8087994:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
 8087998:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
 808799c:	d8e6      	bhi.n	808796c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (si == dot || i > in) {
 808799e:	45a8      	cmp	r8, r5
 80879a0:	d0e6      	beq.n	8087970 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
 80879a2:	42ba      	cmp	r2, r7
 80879a4:	d830      	bhi.n	8087a08 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
      if ('a' <= c && c <= 'z') {
 80879a6:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 80879aa:	f1bc 0f19 	cmp.w	ip, #25
 80879ae:	d81a      	bhi.n	80879e6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x16e>
        c += 'A' - 'a';
 80879b0:	3b20      	subs	r3, #32
        lc |= bit;
 80879b2:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
 80879b6:	b2db      	uxtb	r3, r3
        lc |= bit;
 80879b8:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
 80879bc:	f102 0c01 	add.w	ip, r2, #1
 80879c0:	fa5f fc8c 	uxtb.w	ip, ip
 80879c4:	440a      	add	r2, r1
      if (i < 7) {
 80879c6:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
 80879ca:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
 80879cc:	d801      	bhi.n	80879d2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15a>
        fname->seqPos = i;
 80879ce:	f881 c00c 	strb.w	ip, [r1, #12]
 80879d2:	4662      	mov	r2, ip
 80879d4:	e7ba      	b.n	808794c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd4>
      if (si > dot) {
 80879d6:	45a8      	cmp	r8, r5
 80879d8:	dc18      	bgt.n	8087a0c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x194>
 80879da:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
 80879dc:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
 80879de:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 80879e0:	f04f 0e10 	mov.w	lr, #16
 80879e4:	e7b1      	b.n	808794a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd2>
      } else if ('A' <= c && c <= 'Z') {
 80879e6:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 80879ea:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
 80879ee:	bf98      	it	ls
 80879f0:	ea4e 0a0a 	orrls.w	sl, lr, sl
 80879f4:	e7e2      	b.n	80879bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x144>
    fname->flags = FNAME_FLAG_LOST_CHARS;
 80879f6:	2001      	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
 80879f8:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
 80879fa:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
 80879fc:	4419      	add	r1, r3
 80879fe:	237e      	movs	r3, #126	; 0x7e
 8087a00:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
 8087a02:	2331      	movs	r3, #49	; 0x31
 8087a04:	738b      	strb	r3, [r1, #14]
 8087a06:	e748      	b.n	808789a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
 8087a08:	2f0a      	cmp	r7, #10
 8087a0a:	d1e4      	bne.n	80879d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
        is83 = false;
 8087a0c:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
 8087a0e:	7b4b      	ldrb	r3, [r1, #13]
 8087a10:	2b20      	cmp	r3, #32
 8087a12:	f43f af41 	beq.w	8087898 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
 8087a16:	2800      	cmp	r0, #0
 8087a18:	d0ed      	beq.n	80879f6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
 8087a1a:	ea1a 0f09 	tst.w	sl, r9
 8087a1e:	bf18      	it	ne
 8087a20:	f04f 0902 	movne.w	r9, #2
 8087a24:	f881 9000 	strb.w	r9, [r1]
 8087a28:	e737      	b.n	808789a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
 8087a2a:	42ba      	cmp	r2, r7
 8087a2c:	d8ec      	bhi.n	8087a08 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
      c = '_';
 8087a2e:	235f      	movs	r3, #95	; 0x5f
      is83 = false;
 8087a30:	2000      	movs	r0, #0
 8087a32:	e7c3      	b.n	80879bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x144>
 8087a34:	31000101 	.word	0x31000101

08087a38 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
 8087a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8087a3c:	4606      	mov	r6, r0
 8087a3e:	460c      	mov	r4, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
 8087a40:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 8087a42:	277e      	movs	r7, #126	; 0x7e
  uint8_t pos = fname->seqPos;;
 8087a44:	f891 900c 	ldrb.w	r9, [r1, #12]
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 8087a48:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
 8087a4c:	6861      	ldr	r1, [r4, #4]
 8087a4e:	68a2      	ldr	r2, [r4, #8]
 8087a50:	186b      	adds	r3, r5, r1
 8087a52:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
 8087a54:	4411      	add	r1, r2
 8087a56:	4291      	cmp	r1, r2
 8087a58:	d006      	beq.n	8087a68 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
 8087a5a:	f812 0b01 	ldrb.w	r0, [r2], #1
 8087a5e:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 8087a62:	4043      	eors	r3, r0
 8087a64:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
 8087a66:	e7f6      	b.n	8087a56 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
 8087a68:	f1b9 0f03 	cmp.w	r9, #3
 8087a6c:	bf28      	it	cs
 8087a6e:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8087a72:	f109 0204 	add.w	r2, r9, #4
 8087a76:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
 8087a78:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8087a7c:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8087a7e:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8087a80:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8087a82:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8087a84:	bf94      	ite	ls
 8087a86:	3130      	addls	r1, #48	; 0x30
 8087a88:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8087a8a:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8087a8c:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
 8087a8e:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8087a92:	d1f1      	bne.n	8087a78 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
 8087a94:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
 8087a98:	2100      	movs	r1, #0
 8087a9a:	4630      	mov	r0, r6
 8087a9c:	735f      	strb	r7, [r3, #13]
 8087a9e:	f000 fea2 	bl	80887e6 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
 8087aa2:	2101      	movs	r1, #1
 8087aa4:	4630      	mov	r0, r6
 8087aa6:	f000 fe7f 	bl	80887a8 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
 8087aaa:	4601      	mov	r1, r0
 8087aac:	b928      	cbnz	r0, 8087aba <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
 8087aae:	7870      	ldrb	r0, [r6, #1]
 8087ab0:	fab0 f080 	clz	r0, r0
 8087ab4:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
 8087ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
 8087aba:	7803      	ldrb	r3, [r0, #0]
 8087abc:	b16b      	cbz	r3, 8087ada <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 8087abe:	7ac3      	ldrb	r3, [r0, #11]
 8087ac0:	071b      	lsls	r3, r3, #28
 8087ac2:	d4ee      	bmi.n	8087aa2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 8087ac4:	220b      	movs	r2, #11
 8087ac6:	4640      	mov	r0, r8
 8087ac8:	f006 ffae 	bl	808ea28 <memcmp>
 8087acc:	2800      	cmp	r0, #0
 8087ace:	d1e8      	bne.n	8087aa2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
 8087ad0:	3501      	adds	r5, #1
 8087ad2:	b2ad      	uxth	r5, r5
 8087ad4:	2d64      	cmp	r5, #100	; 0x64
 8087ad6:	d1b9      	bne.n	8087a4c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
 8087ad8:	e7ed      	b.n	8087ab6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
 8087ada:	2001      	movs	r0, #1
 8087adc:	e7eb      	b.n	8087ab6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

08087ae0 <_ZN7FatFile4openEPS_P7fname_th>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 8087ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8087ae4:	b089      	sub	sp, #36	; 0x24
 8087ae6:	9304      	str	r3, [sp, #16]
  if (!dirFile->isDir() || isOpen()) {
 8087ae8:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 8087aea:	460d      	mov	r5, r1
  if (!dirFile->isDir() || isOpen()) {
 8087aec:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 8087af0:	4690      	mov	r8, r2
 8087af2:	9005      	str	r0, [sp, #20]
  if (!dirFile->isDir() || isOpen()) {
 8087af4:	d103      	bne.n	8087afe <_ZN7FatFile4openEPS_P7fname_th+0x1e>
  return false;
 8087af6:	2000      	movs	r0, #0
}
 8087af8:	b009      	add	sp, #36	; 0x24
 8087afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
 8087afe:	9b05      	ldr	r3, [sp, #20]
 8087b00:	781b      	ldrb	r3, [r3, #0]
 8087b02:	2b00      	cmp	r3, #0
 8087b04:	d1f7      	bne.n	8087af6 <_ZN7FatFile4openEPS_P7fname_th+0x16>
  size_t len = fname->len;
 8087b06:	6853      	ldr	r3, [r2, #4]
 8087b08:	4628      	mov	r0, r5
 8087b0a:	9303      	str	r3, [sp, #12]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 8087b0c:	7813      	ldrb	r3, [r2, #0]
 8087b0e:	0799      	lsls	r1, r3, #30
 8087b10:	bf18      	it	ne
 8087b12:	9b03      	ldrne	r3, [sp, #12]
 8087b14:	f04f 0100 	mov.w	r1, #0
 8087b18:	bf1f      	itttt	ne
 8087b1a:	f103 070c 	addne.w	r7, r3, #12
 8087b1e:	230d      	movne	r3, #13
 8087b20:	fbb7 f7f3 	udivne	r7, r7, r3
 8087b24:	3701      	addne	r7, #1
 8087b26:	bf0c      	ite	eq
 8087b28:	2701      	moveq	r7, #1
 8087b2a:	b2ff      	uxtbne	r7, r7
 8087b2c:	f000 fe5b 	bl	80887e6 <_ZN7FatFile7seekSetEm>
  }
 8087b30:	2300      	movs	r3, #0
 8087b32:	469b      	mov	fp, r3
 8087b34:	461c      	mov	r4, r3
 8087b36:	461e      	mov	r6, r3
 8087b38:	469a      	mov	sl, r3
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8087b3a:	f108 020d 	add.w	r2, r8, #13
 8087b3e:	9302      	str	r3, [sp, #8]
 8087b40:	9207      	str	r2, [sp, #28]
    curIndex = dirFile->m_curPosition/32;
 8087b42:	696a      	ldr	r2, [r5, #20]
    dir = dirFile->readDirCache(true);
 8087b44:	2101      	movs	r1, #1
 8087b46:	4628      	mov	r0, r5
 8087b48:	9306      	str	r3, [sp, #24]
    curIndex = dirFile->m_curPosition/32;
 8087b4a:	f3c2 194f 	ubfx	r9, r2, #5, #16
    dir = dirFile->readDirCache(true);
 8087b4e:	f000 fe2b 	bl	80887a8 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 8087b52:	9b06      	ldr	r3, [sp, #24]
 8087b54:	2800      	cmp	r0, #0
 8087b56:	d16c      	bne.n	8087c32 <_ZN7FatFile4openEPS_P7fname_th+0x152>
      if (dirFile->getError()) {
 8087b58:	786b      	ldrb	r3, [r5, #1]
 8087b5a:	2b00      	cmp	r3, #0
 8087b5c:	d1cb      	bne.n	8087af6 <_ZN7FatFile4openEPS_P7fname_th+0x16>
  if (!(oflag & O_CREAT) || !(oflag & O_WRITE)) {
 8087b5e:	9b04      	ldr	r3, [sp, #16]
 8087b60:	f003 0342 	and.w	r3, r3, #66	; 0x42
 8087b64:	2b42      	cmp	r3, #66	; 0x42
 8087b66:	d1c6      	bne.n	8087af6 <_ZN7FatFile4openEPS_P7fname_th+0x16>
  if (freeFound == 0) {
 8087b68:	9b02      	ldr	r3, [sp, #8]
 8087b6a:	2c00      	cmp	r4, #0
 8087b6c:	bf08      	it	eq
 8087b6e:	464b      	moveq	r3, r9
 8087b70:	9302      	str	r3, [sp, #8]
  while (freeFound < freeNeed) {
 8087b72:	42bc      	cmp	r4, r7
 8087b74:	f0c0 8103 	bcc.w	8087d7e <_ZN7FatFile4openEPS_P7fname_th+0x29e>
  if (fnameFound) {
 8087b78:	f1ba 0f00 	cmp.w	sl, #0
 8087b7c:	f040 811b 	bne.w	8087db6 <_ZN7FatFile4openEPS_P7fname_th+0x2d6>
  if (!dirFile->seekSet(32UL*freeIndex)) {
 8087b80:	9b02      	ldr	r3, [sp, #8]
 8087b82:	4628      	mov	r0, r5
 8087b84:	0159      	lsls	r1, r3, #5
 8087b86:	f000 fe2e 	bl	80887e6 <_ZN7FatFile7seekSetEm>
 8087b8a:	2800      	cmp	r0, #0
 8087b8c:	d0b3      	beq.n	8087af6 <_ZN7FatFile4openEPS_P7fname_th+0x16>
  lfnOrd = freeNeed - 1;
 8087b8e:	3f01      	subs	r7, #1
 8087b90:	fa5f fa87 	uxtb.w	sl, r7
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 8087b94:	4656      	mov	r6, sl
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 8087b96:	f04f 0900 	mov.w	r9, #0
    ldir->attr = DIR_ATT_LONG_NAME;
 8087b9a:	270f      	movs	r7, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 8087b9c:	2e00      	cmp	r6, #0
 8087b9e:	f000 8121 	beq.w	8087de4 <_ZN7FatFile4openEPS_P7fname_th+0x304>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 8087ba2:	2100      	movs	r1, #0
 8087ba4:	4628      	mov	r0, r5
 8087ba6:	f000 fdff 	bl	80887a8 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
 8087baa:	4604      	mov	r4, r0
 8087bac:	2800      	cmp	r0, #0
 8087bae:	d0a2      	beq.n	8087af6 <_ZN7FatFile4openEPS_P7fname_th+0x16>
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 8087bb0:	4556      	cmp	r6, sl
 8087bb2:	bf18      	it	ne
 8087bb4:	46b3      	movne	fp, r6
    dirFile->m_vol->cacheDirty();
 8087bb6:	68aa      	ldr	r2, [r5, #8]
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 8087bb8:	bf08      	it	eq
 8087bba:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
    m_status |= CACHE_STATUS_DIRTY;
 8087bbe:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8087bc2:	f043 0301 	orr.w	r3, r3, #1
 8087bc6:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8087bca:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
 8087bce:	72c7      	strb	r7, [r0, #11]
    ldir->type = 0;
 8087bd0:	f880 900c 	strb.w	r9, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
 8087bd4:	f108 000d 	add.w	r0, r8, #13
 8087bd8:	f7ff fe3f 	bl	808785a <_ZN7FatFile11lfnChecksumEPh>
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8087bdc:	220d      	movs	r2, #13
 8087bde:	2300      	movs	r3, #0
 8087be0:	f00b 0b1f 	and.w	fp, fp, #31
 8087be4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8087be8:	fb02 f20b 	mul.w	r2, r2, fp
    ldir->chksum = lfnChecksum(fname->sfn);
 8087bec:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
 8087bee:	f884 901a 	strb.w	r9, [r4, #26]
 8087bf2:	f884 901b 	strb.w	r9, [r4, #27]
    lfnPutName(ldir, fname->lfn, len);
 8087bf6:	f8d8 c008 	ldr.w	ip, [r8, #8]
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 8087bfa:	9903      	ldr	r1, [sp, #12]
 8087bfc:	4291      	cmp	r1, r2
 8087bfe:	f240 80e2 	bls.w	8087dc6 <_ZN7FatFile4openEPS_P7fname_th+0x2e6>
 8087c02:	f81c 1002 	ldrb.w	r1, [ip, r2]
  if (i < LDIR_NAME1_DIM) {
 8087c06:	2b04      	cmp	r3, #4
 8087c08:	fa5f fe83 	uxtb.w	lr, r3
 8087c0c:	f103 0001 	add.w	r0, r3, #1
 8087c10:	f200 80df 	bhi.w	8087dd2 <_ZN7FatFile4openEPS_P7fname_th+0x2f2>
    ldir->name1[i] = c;
 8087c14:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8087c18:	f8a3 1001 	strh.w	r1, [r3, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
 8087c1c:	280d      	cmp	r0, #13
 8087c1e:	4603      	mov	r3, r0
 8087c20:	f102 0201 	add.w	r2, r2, #1
 8087c24:	d1e9      	bne.n	8087bfa <_ZN7FatFile4openEPS_P7fname_th+0x11a>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 8087c26:	3e01      	subs	r6, #1
 8087c28:	b2f6      	uxtb	r6, r6
 8087c2a:	e7b7      	b.n	8087b9c <_ZN7FatFile4openEPS_P7fname_th+0xbc>
        fnameFound = true;
 8087c2c:	f04f 0a01 	mov.w	sl, #1
 8087c30:	e787      	b.n	8087b42 <_ZN7FatFile4openEPS_P7fname_th+0x62>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
 8087c32:	7802      	ldrb	r2, [r0, #0]
 8087c34:	2ae5      	cmp	r2, #229	; 0xe5
 8087c36:	d000      	beq.n	8087c3a <_ZN7FatFile4openEPS_P7fname_th+0x15a>
 8087c38:	b97a      	cbnz	r2, 8087c5a <_ZN7FatFile4openEPS_P7fname_th+0x17a>
    curIndex = dirFile->m_curPosition/32;
 8087c3a:	9902      	ldr	r1, [sp, #8]
 8087c3c:	2c00      	cmp	r4, #0
 8087c3e:	bf08      	it	eq
 8087c40:	4649      	moveq	r1, r9
      if (freeFound < freeNeed) {
 8087c42:	42bc      	cmp	r4, r7
        freeFound++;
 8087c44:	bf38      	it	cc
 8087c46:	3401      	addcc	r4, #1
    curIndex = dirFile->m_curPosition/32;
 8087c48:	9102      	str	r1, [sp, #8]
        freeFound++;
 8087c4a:	bf38      	it	cc
 8087c4c:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
 8087c4e:	2a00      	cmp	r2, #0
 8087c50:	d085      	beq.n	8087b5e <_ZN7FatFile4openEPS_P7fname_th+0x7e>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 8087c52:	2ae5      	cmp	r2, #229	; 0xe5
 8087c54:	d104      	bne.n	8087c60 <_ZN7FatFile4openEPS_P7fname_th+0x180>
      lfnOrd = 0;
 8087c56:	2600      	movs	r6, #0
 8087c58:	e773      	b.n	8087b42 <_ZN7FatFile4openEPS_P7fname_th+0x62>
        freeFound = 0;
 8087c5a:	42bc      	cmp	r4, r7
 8087c5c:	bf38      	it	cc
 8087c5e:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 8087c60:	2a2e      	cmp	r2, #46	; 0x2e
 8087c62:	d0f8      	beq.n	8087c56 <_ZN7FatFile4openEPS_P7fname_th+0x176>
    } else if (DIR_IS_LONG_NAME(dir)) {
 8087c64:	7ac1      	ldrb	r1, [r0, #11]
 8087c66:	290f      	cmp	r1, #15
 8087c68:	d15d      	bne.n	8087d26 <_ZN7FatFile4openEPS_P7fname_th+0x246>
      if (!lfnOrd) {
 8087c6a:	bb3e      	cbnz	r6, 8087cbc <_ZN7FatFile4openEPS_P7fname_th+0x1dc>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
 8087c6c:	f012 0640 	ands.w	r6, r2, #64	; 0x40
 8087c70:	f43f af67 	beq.w	8087b42 <_ZN7FatFile4openEPS_P7fname_th+0x62>
        lfnOrd = ord = ldir->ord & 0X1F;
 8087c74:	f002 061f 	and.w	r6, r2, #31
 8087c78:	46b3      	mov	fp, r6
        chksum = ldir->chksum;
 8087c7a:	7b43      	ldrb	r3, [r0, #13]
      size_t k = 13*(ord - 1);
 8087c7c:	f04f 0e0d 	mov.w	lr, #13
 8087c80:	f10b 32ff 	add.w	r2, fp, #4294967295
 8087c84:	fb0e fe02 	mul.w	lr, lr, r2
      if (k >= len) {
 8087c88:	9a03      	ldr	r2, [sp, #12]
 8087c8a:	4572      	cmp	r2, lr
 8087c8c:	d9e3      	bls.n	8087c56 <_ZN7FatFile4openEPS_P7fname_th+0x176>
 8087c8e:	f04f 0c00 	mov.w	ip, #0
 8087c92:	eba2 020e 	sub.w	r2, r2, lr
 8087c96:	9206      	str	r2, [sp, #24]
  if (i < LDIR_NAME1_DIM) {
 8087c98:	f1bc 0f04 	cmp.w	ip, #4
 8087c9c:	eb0c 090e 	add.w	r9, ip, lr
 8087ca0:	fa5f f28c 	uxtb.w	r2, ip
 8087ca4:	d814      	bhi.n	8087cd0 <_ZN7FatFile4openEPS_P7fname_th+0x1f0>
    return ldir->name1[i];
 8087ca6:	eb00 024c 	add.w	r2, r0, ip, lsl #1
 8087caa:	f8b2 2001 	ldrh.w	r2, [r2, #1]
        if (k == len) {
 8087cae:	9906      	ldr	r1, [sp, #24]
 8087cb0:	458c      	cmp	ip, r1
 8087cb2:	d11b      	bne.n	8087cec <_ZN7FatFile4openEPS_P7fname_th+0x20c>
            lfnOrd = 0;
 8087cb4:	2a00      	cmp	r2, #0
 8087cb6:	bf18      	it	ne
 8087cb8:	2600      	movne	r6, #0
 8087cba:	e742      	b.n	8087b42 <_ZN7FatFile4openEPS_P7fname_th+0x62>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
 8087cbc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8087cc0:	fa5f fb8b 	uxtb.w	fp, fp
 8087cc4:	455a      	cmp	r2, fp
 8087cc6:	d1c6      	bne.n	8087c56 <_ZN7FatFile4openEPS_P7fname_th+0x176>
 8087cc8:	7b42      	ldrb	r2, [r0, #13]
 8087cca:	429a      	cmp	r2, r3
 8087ccc:	d0d6      	beq.n	8087c7c <_ZN7FatFile4openEPS_P7fname_th+0x19c>
 8087cce:	e7c2      	b.n	8087c56 <_ZN7FatFile4openEPS_P7fname_th+0x176>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 8087cd0:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
 8087cd2:	bf95      	itete	ls
 8087cd4:	f10c 32ff 	addls.w	r2, ip, #4294967295
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8087cd8:	f10c 0201 	addhi.w	r2, ip, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
 8087cdc:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8087ce0:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
    return ldir->name2[i - LDIR_NAME1_DIM];
 8087ce4:	bf94      	ite	ls
 8087ce6:	88d2      	ldrhls	r2, [r2, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8087ce8:	8892      	ldrhhi	r2, [r2, #4]
 8087cea:	e7e0      	b.n	8087cae <_ZN7FatFile4openEPS_P7fname_th+0x1ce>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8087cec:	2aff      	cmp	r2, #255	; 0xff
 8087cee:	d8b2      	bhi.n	8087c56 <_ZN7FatFile4openEPS_P7fname_th+0x176>
 8087cf0:	b2d2      	uxtb	r2, r2
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8087cf2:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 8087cf6:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8087cf8:	f8d8 1008 	ldr.w	r1, [r8, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8087cfc:	bf98      	it	ls
 8087cfe:	3220      	addls	r2, #32
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8087d00:	f811 1009 	ldrb.w	r1, [r1, r9]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8087d04:	bf98      	it	ls
 8087d06:	b2d2      	uxtbls	r2, r2
 8087d08:	f1a1 0941 	sub.w	r9, r1, #65	; 0x41
 8087d0c:	f1b9 0f19 	cmp.w	r9, #25
 8087d10:	bf9c      	itt	ls
 8087d12:	3120      	addls	r1, #32
 8087d14:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8087d16:	4291      	cmp	r1, r2
 8087d18:	d19d      	bne.n	8087c56 <_ZN7FatFile4openEPS_P7fname_th+0x176>
      for (uint8_t i = 0; i < 13; i++) {
 8087d1a:	f10c 0c01 	add.w	ip, ip, #1
 8087d1e:	f1bc 0f0d 	cmp.w	ip, #13
 8087d22:	d1b9      	bne.n	8087c98 <_ZN7FatFile4openEPS_P7fname_th+0x1b8>
 8087d24:	e70d      	b.n	8087b42 <_ZN7FatFile4openEPS_P7fname_th+0x62>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
 8087d26:	070a      	lsls	r2, r1, #28
 8087d28:	d495      	bmi.n	8087c56 <_ZN7FatFile4openEPS_P7fname_th+0x176>
      if (lfnOrd) {
 8087d2a:	b166      	cbz	r6, 8087d46 <_ZN7FatFile4openEPS_P7fname_th+0x266>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
 8087d2c:	f1bb 0f01 	cmp.w	fp, #1
 8087d30:	9302      	str	r3, [sp, #8]
 8087d32:	f47f aee0 	bne.w	8087af6 <_ZN7FatFile4openEPS_P7fname_th+0x16>
 8087d36:	f7ff fd90 	bl	808785a <_ZN7FatFile11lfnChecksumEPh>
 8087d3a:	9b02      	ldr	r3, [sp, #8]
 8087d3c:	4298      	cmp	r0, r3
 8087d3e:	f47f aeda 	bne.w	8087af6 <_ZN7FatFile4openEPS_P7fname_th+0x16>
 8087d42:	46b2      	mov	sl, r6
 8087d44:	e00e      	b.n	8087d64 <_ZN7FatFile4openEPS_P7fname_th+0x284>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8087d46:	220b      	movs	r2, #11
 8087d48:	9907      	ldr	r1, [sp, #28]
 8087d4a:	9306      	str	r3, [sp, #24]
 8087d4c:	f006 fe6c 	bl	808ea28 <memcmp>
 8087d50:	9b06      	ldr	r3, [sp, #24]
 8087d52:	2800      	cmp	r0, #0
 8087d54:	f47f aef5 	bne.w	8087b42 <_ZN7FatFile4openEPS_P7fname_th+0x62>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
 8087d58:	f898 a000 	ldrb.w	sl, [r8]
 8087d5c:	f01a 0a01 	ands.w	sl, sl, #1
 8087d60:	f47f af64 	bne.w	8087c2c <_ZN7FatFile4openEPS_P7fname_th+0x14c>
  if (oflag & O_EXCL) {
 8087d64:	9b04      	ldr	r3, [sp, #16]
 8087d66:	061b      	lsls	r3, r3, #24
 8087d68:	f53f aec5 	bmi.w	8087af6 <_ZN7FatFile4openEPS_P7fname_th+0x16>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
 8087d6c:	464a      	mov	r2, r9
 8087d6e:	4629      	mov	r1, r5
 8087d70:	9b04      	ldr	r3, [sp, #16]
 8087d72:	9805      	ldr	r0, [sp, #20]
 8087d74:	f8cd a000 	str.w	sl, [sp]
 8087d78:	f000 fd78 	bl	808886c <_ZN7FatFile15openCachedEntryEPS_thh>
 8087d7c:	e6bc      	b.n	8087af8 <_ZN7FatFile4openEPS_P7fname_th+0x18>
    dir = dirFile->readDirCache();
 8087d7e:	2100      	movs	r1, #0
 8087d80:	4628      	mov	r0, r5
 8087d82:	f000 fd11 	bl	80887a8 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 8087d86:	b998      	cbnz	r0, 8087db0 <_ZN7FatFile4openEPS_P7fname_th+0x2d0>
      if (dirFile->getError()) {
 8087d88:	786b      	ldrb	r3, [r5, #1]
 8087d8a:	2b00      	cmp	r3, #0
 8087d8c:	f47f aeb3 	bne.w	8087af6 <_ZN7FatFile4openEPS_P7fname_th+0x16>
    if (!dirFile->addDirCluster()) {
 8087d90:	4628      	mov	r0, r5
 8087d92:	f000 fbe1 	bl	8088558 <_ZN7FatFile13addDirClusterEv>
 8087d96:	2800      	cmp	r0, #0
 8087d98:	f43f aead 	beq.w	8087af6 <_ZN7FatFile4openEPS_P7fname_th+0x16>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
 8087d9c:	68ab      	ldr	r3, [r5, #8]
 8087d9e:	791b      	ldrb	r3, [r3, #4]
 8087da0:	2b01      	cmp	r3, #1
 8087da2:	f63f aee9 	bhi.w	8087b78 <_ZN7FatFile4openEPS_P7fname_th+0x98>
    freeFound += 16;
 8087da6:	3410      	adds	r4, #16
 8087da8:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
 8087daa:	42a7      	cmp	r7, r4
 8087dac:	d8f0      	bhi.n	8087d90 <_ZN7FatFile4openEPS_P7fname_th+0x2b0>
 8087dae:	e6e3      	b.n	8087b78 <_ZN7FatFile4openEPS_P7fname_th+0x98>
    freeFound++;
 8087db0:	3401      	adds	r4, #1
 8087db2:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
 8087db4:	e6dd      	b.n	8087b72 <_ZN7FatFile4openEPS_P7fname_th+0x92>
    if (!dirFile->lfnUniqueSfn(fname)) {
 8087db6:	4641      	mov	r1, r8
 8087db8:	4628      	mov	r0, r5
 8087dba:	f7ff fe3d 	bl	8087a38 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
 8087dbe:	2800      	cmp	r0, #0
 8087dc0:	f47f aede 	bne.w	8087b80 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 8087dc4:	e697      	b.n	8087af6 <_ZN7FatFile4openEPS_P7fname_th+0x16>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 8087dc6:	bf14      	ite	ne
 8087dc8:	f04f 31ff 	movne.w	r1, #4294967295
 8087dcc:	2100      	moveq	r1, #0
 8087dce:	b289      	uxth	r1, r1
 8087dd0:	e719      	b.n	8087c06 <_ZN7FatFile4openEPS_P7fname_th+0x126>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 8087dd2:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
 8087dd6:	bf94      	ite	ls
 8087dd8:	eb04 0343 	addls.w	r3, r4, r3, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
 8087ddc:	eb04 0340 	addhi.w	r3, r4, r0, lsl #1
 8087de0:	8099      	strh	r1, [r3, #4]
 8087de2:	e71b      	b.n	8087c1c <_ZN7FatFile4openEPS_P7fname_th+0x13c>
  dir = dirFile->readDirCache();
 8087de4:	4631      	mov	r1, r6
 8087de6:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
 8087de8:	696f      	ldr	r7, [r5, #20]
  dir = dirFile->readDirCache();
 8087dea:	f000 fcdd 	bl	80887a8 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
 8087dee:	4604      	mov	r4, r0
 8087df0:	2800      	cmp	r0, #0
 8087df2:	f43f ae80 	beq.w	8087af6 <_ZN7FatFile4openEPS_P7fname_th+0x16>
  memset(dir, 0, sizeof(dir_t));
 8087df6:	2220      	movs	r2, #32
 8087df8:	4631      	mov	r1, r6
 8087dfa:	f006 fe31 	bl	808ea60 <memset>
  memcpy(dir->name, fname->sfn, 11);
 8087dfe:	4643      	mov	r3, r8
 8087e00:	f853 2f0d 	ldr.w	r2, [r3, #13]!
 8087e04:	6022      	str	r2, [r4, #0]
 8087e06:	685a      	ldr	r2, [r3, #4]
 8087e08:	6062      	str	r2, [r4, #4]
 8087e0a:	891a      	ldrh	r2, [r3, #8]
 8087e0c:	8122      	strh	r2, [r4, #8]
 8087e0e:	7a9b      	ldrb	r3, [r3, #10]
 8087e10:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
 8087e12:	f898 3000 	ldrb.w	r3, [r8]
 8087e16:	f003 0318 	and.w	r3, r3, #24
 8087e1a:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
 8087e1c:	4b0f      	ldr	r3, [pc, #60]	; (8087e5c <_ZN7FatFile4openEPS_P7fname_th+0x37c>)
 8087e1e:	681b      	ldr	r3, [r3, #0]
 8087e20:	b19b      	cbz	r3, 8087e4a <_ZN7FatFile4openEPS_P7fname_th+0x36a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
 8087e22:	f104 010e 	add.w	r1, r4, #14
 8087e26:	f104 0010 	add.w	r0, r4, #16
 8087e2a:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
 8087e2c:	8a23      	ldrh	r3, [r4, #16]
  curIndex = dirFile->m_curPosition/32;
 8087e2e:	f3c7 194f 	ubfx	r9, r7, #5, #16
  dir->lastAccessDate = dir->creationDate;
 8087e32:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
 8087e34:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
 8087e36:	89e3      	ldrh	r3, [r4, #14]
 8087e38:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
 8087e3a:	68aa      	ldr	r2, [r5, #8]
 8087e3c:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8087e40:	f043 0301 	orr.w	r3, r3, #1
 8087e44:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
  uint32_t cacheBlockNumber() {
    return m_cache.lbn();
  }
  void cacheDirty() {
    m_cache.dirty();
  }
 8087e48:	e790      	b.n	8087d6c <_ZN7FatFile4openEPS_P7fname_th+0x28c>
    dir->creationDate = FAT_DEFAULT_DATE;
 8087e4a:	2321      	movs	r3, #33	; 0x21
 8087e4c:	7423      	strb	r3, [r4, #16]
 8087e4e:	2328      	movs	r3, #40	; 0x28
 8087e50:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
 8087e52:	2308      	movs	r3, #8
 8087e54:	73a6      	strb	r6, [r4, #14]
 8087e56:	73e3      	strb	r3, [r4, #15]
 8087e58:	e7e8      	b.n	8087e2c <_ZN7FatFile4openEPS_P7fname_th+0x34c>
 8087e5a:	bf00      	nop
 8087e5c:	20000d58 	.word	0x20000d58

08087e60 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
 8087e60:	f002 bba0 	b.w	808a5a4 <HAL_Pin_Map>

08087e64 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
 8087e64:	f002 bb9e 	b.w	808a5a4 <HAL_Pin_Map>

08087e68 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
 8087e68:	f002 bb9c 	b.w	808a5a4 <HAL_Pin_Map>

08087e6c <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
 8087e6c:	f002 bb9a 	b.w	808a5a4 <HAL_Pin_Map>

08087e70 <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
  }
  void spiEndTransaction() {
    m_spi->endTransaction();
  }
  uint8_t spiReceive() {
    return m_spi->receive();
 8087e70:	6803      	ldr	r3, [r0, #0]
 8087e72:	68db      	ldr	r3, [r3, #12]
 8087e74:	4718      	bx	r3

08087e76 <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spi->receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spi->send(data);
 8087e76:	6803      	ldr	r3, [r0, #0]
 8087e78:	695b      	ldr	r3, [r3, #20]
 8087e7a:	4718      	bx	r3

08087e7c <_ZN9SdSpiCard14chipSelectHighEv>:
    error(SD_CARD_ERROR_BAD_CSD);
    return 0;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectHigh() {
 8087e7c:	b510      	push	{r4, lr}
  if (!m_selected) {
 8087e7e:	7903      	ldrb	r3, [r0, #4]
void SdSpiCard::chipSelectHigh() {
 8087e80:	4604      	mov	r4, r0
  if (!m_selected) {
 8087e82:	b16b      	cbz	r3, 8087ea0 <_ZN9SdSpiCard14chipSelectHighEv+0x24>
    SD_CS_DBG("chipSelectHigh error");
    return;
  }
  digitalWrite(m_chipSelectPin, HIGH);
 8087e84:	2101      	movs	r1, #1
 8087e86:	7940      	ldrb	r0, [r0, #5]
 8087e88:	f005 f985 	bl	808d196 <digitalWrite>
  // insure MISO goes high impedance
  spiSend(0XFF);
 8087e8c:	21ff      	movs	r1, #255	; 0xff
 8087e8e:	6820      	ldr	r0, [r4, #0]
 8087e90:	f7ff fff1 	bl	8087e76 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiEndTransaction();
 8087e94:	6820      	ldr	r0, [r4, #0]
    m_spi->endTransaction();
 8087e96:	6803      	ldr	r3, [r0, #0]
 8087e98:	689b      	ldr	r3, [r3, #8]
 8087e9a:	4798      	blx	r3
  m_selected = false;
 8087e9c:	2300      	movs	r3, #0
 8087e9e:	7123      	strb	r3, [r4, #4]
}
 8087ea0:	bd10      	pop	{r4, pc}

08087ea2 <_ZN9SdSpiCard13chipSelectLowEv>:
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectLow() {
 8087ea2:	b538      	push	{r3, r4, r5, lr}
  if (m_selected) {
 8087ea4:	7905      	ldrb	r5, [r0, #4]
void SdSpiCard::chipSelectLow() {
 8087ea6:	4604      	mov	r4, r0
  if (m_selected) {
 8087ea8:	b955      	cbnz	r5, 8087ec0 <_ZN9SdSpiCard13chipSelectLowEv+0x1e>
    SD_CS_DBG("chipSelectLow error");
    return;
  }
  spiBeginTransaction(m_sckDivisor);
 8087eaa:	6800      	ldr	r0, [r0, #0]
    m_spi->beginTransaction(spiDivisor);
 8087eac:	79e1      	ldrb	r1, [r4, #7]
 8087eae:	6803      	ldr	r3, [r0, #0]
 8087eb0:	685b      	ldr	r3, [r3, #4]
 8087eb2:	4798      	blx	r3
  digitalWrite(m_chipSelectPin, LOW);
 8087eb4:	4629      	mov	r1, r5
 8087eb6:	7960      	ldrb	r0, [r4, #5]
 8087eb8:	f005 f96d 	bl	808d196 <digitalWrite>
  m_selected = true;
 8087ebc:	2301      	movs	r3, #1
 8087ebe:	7123      	strb	r3, [r4, #4]
}
 8087ec0:	bd38      	pop	{r3, r4, r5, pc}

08087ec2 <_ZN9SdSpiCard8readDataEPhj>:
    chipSelectHigh();
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
 8087ec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8087ec4:	4604      	mov	r4, r0
 8087ec6:	460d      	mov	r5, r1
 8087ec8:	4616      	mov	r6, r2
 8087eca:	f002 fbcb 	bl	808a664 <HAL_Timer_Get_Milli_Seconds>
 8087ece:	4607      	mov	r7, r0
#if USE_SD_CRC
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start block token
  unsigned t0 = millis();
  while ((m_status = spiReceive()) == 0XFF) {
 8087ed0:	6820      	ldr	r0, [r4, #0]
 8087ed2:	f7ff ffcd 	bl	8087e70 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8087ed6:	28ff      	cmp	r0, #255	; 0xff
 8087ed8:	7220      	strb	r0, [r4, #8]
 8087eda:	d10c      	bne.n	8087ef6 <_ZN9SdSpiCard8readDataEPhj+0x34>
 8087edc:	f002 fbc2 	bl	808a664 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_READ_TIMEOUT) {
 8087ee0:	1bc3      	subs	r3, r0, r7
 8087ee2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8087ee6:	d9f3      	bls.n	8087ed0 <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
 8087ee8:	2311      	movs	r3, #17
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  chipSelectHigh();
 8087eea:	4620      	mov	r0, r4
 8087eec:	71a3      	strb	r3, [r4, #6]
 8087eee:	f7ff ffc5 	bl	8087e7c <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8087ef2:	2000      	movs	r0, #0
}
 8087ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
 8087ef6:	28fe      	cmp	r0, #254	; 0xfe
 8087ef8:	d001      	beq.n	8087efe <_ZN9SdSpiCard8readDataEPhj+0x3c>
 8087efa:	230f      	movs	r3, #15
 8087efc:	e7f5      	b.n	8087eea <_ZN9SdSpiCard8readDataEPhj+0x28>
  if ((m_status = spiReceive(dst, count))) {
 8087efe:	6820      	ldr	r0, [r4, #0]
    return m_spi->receive(buf, n);
 8087f00:	4632      	mov	r2, r6
 8087f02:	6803      	ldr	r3, [r0, #0]
 8087f04:	4629      	mov	r1, r5
 8087f06:	691b      	ldr	r3, [r3, #16]
 8087f08:	4798      	blx	r3
 8087f0a:	7220      	strb	r0, [r4, #8]
 8087f0c:	b108      	cbz	r0, 8087f12 <_ZN9SdSpiCard8readDataEPhj+0x50>
    m_errorCode = code;
 8087f0e:	231c      	movs	r3, #28
 8087f10:	e7eb      	b.n	8087eea <_ZN9SdSpiCard8readDataEPhj+0x28>
  spiReceive();
 8087f12:	6820      	ldr	r0, [r4, #0]
 8087f14:	f7ff ffac 	bl	8087e70 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
 8087f18:	6820      	ldr	r0, [r4, #0]
 8087f1a:	f7ff ffa9 	bl	8087e70 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8087f1e:	2001      	movs	r0, #1
 8087f20:	e7e8      	b.n	8087ef4 <_ZN9SdSpiCard8readDataEPhj+0x32>

08087f22 <_ZN9SdSpiCard11waitNotBusyEt>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMillis) {
 8087f22:	b570      	push	{r4, r5, r6, lr}
 8087f24:	4606      	mov	r6, r0
 8087f26:	460c      	mov	r4, r1
 8087f28:	f002 fb9c 	bl	808a664 <HAL_Timer_Get_Milli_Seconds>
 8087f2c:	4605      	mov	r5, r0
  unsigned t0 = millis();
  while (spiReceive() != 0XFF) {
 8087f2e:	6830      	ldr	r0, [r6, #0]
 8087f30:	f7ff ff9e 	bl	8087e70 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8087f34:	28ff      	cmp	r0, #255	; 0xff
 8087f36:	d006      	beq.n	8087f46 <_ZN9SdSpiCard11waitNotBusyEt+0x24>
 8087f38:	f002 fb94 	bl	808a664 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) >= timeoutMillis) {
 8087f3c:	1b43      	subs	r3, r0, r5
 8087f3e:	42a3      	cmp	r3, r4
 8087f40:	d3f5      	bcc.n	8087f2e <_ZN9SdSpiCard11waitNotBusyEt+0xc>
    }
  }
  return true;

fail:
  return false;
 8087f42:	2000      	movs	r0, #0
}
 8087f44:	bd70      	pop	{r4, r5, r6, pc}
  return true;
 8087f46:	2001      	movs	r0, #1
 8087f48:	e7fc      	b.n	8087f44 <_ZN9SdSpiCard11waitNotBusyEt+0x22>

08087f4a <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 8087f4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_selected) {
 8087f4c:	7903      	ldrb	r3, [r0, #4]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 8087f4e:	4604      	mov	r4, r0
 8087f50:	460d      	mov	r5, r1
 8087f52:	9201      	str	r2, [sp, #4]
  if (!m_selected) {
 8087f54:	b90b      	cbnz	r3, 8087f5a <_ZN9SdSpiCard11cardCommandEhm+0x10>
    chipSelectLow();
 8087f56:	f7ff ffa4 	bl	8087ea2 <_ZN9SdSpiCard13chipSelectLowEv>
  waitNotBusy(SD_WRITE_TIMEOUT);
 8087f5a:	f44f 7116 	mov.w	r1, #600	; 0x258
 8087f5e:	4620      	mov	r0, r4
 8087f60:	f7ff ffdf 	bl	8087f22 <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
 8087f64:	6820      	ldr	r0, [r4, #0]
 8087f66:	f045 0140 	orr.w	r1, r5, #64	; 0x40
 8087f6a:	f7ff ff84 	bl	8087e76 <_ZN9SdSpiCard7spiSendEh.isra.0>
 8087f6e:	2603      	movs	r6, #3
    spiSend(pa[i]);
 8087f70:	af01      	add	r7, sp, #4
 8087f72:	5db9      	ldrb	r1, [r7, r6]
 8087f74:	6820      	ldr	r0, [r4, #0]
 8087f76:	f7ff ff7e 	bl	8087e76 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
 8087f7a:	3e01      	subs	r6, #1
 8087f7c:	d2f9      	bcs.n	8087f72 <_ZN9SdSpiCard11cardCommandEhm+0x28>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 8087f7e:	2d00      	cmp	r5, #0
 8087f80:	bf0c      	ite	eq
 8087f82:	2195      	moveq	r1, #149	; 0x95
 8087f84:	2187      	movne	r1, #135	; 0x87
 8087f86:	6820      	ldr	r0, [r4, #0]
 8087f88:	f7ff ff75 	bl	8087e76 <_ZN9SdSpiCard7spiSendEh.isra.0>
  if (cmd == CMD12) {
 8087f8c:	2d0c      	cmp	r5, #12
 8087f8e:	d102      	bne.n	8087f96 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
    spiReceive();
 8087f90:	6820      	ldr	r0, [r4, #0]
 8087f92:	f7ff ff6d 	bl	8087e70 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 8087f96:	2500      	movs	r5, #0
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i != 0XFF; i++) {
 8087f98:	6820      	ldr	r0, [r4, #0]
 8087f9a:	f7ff ff69 	bl	8087e70 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8087f9e:	0603      	lsls	r3, r0, #24
 8087fa0:	7220      	strb	r0, [r4, #8]
 8087fa2:	d503      	bpl.n	8087fac <_ZN9SdSpiCard11cardCommandEhm+0x62>
 8087fa4:	3501      	adds	r5, #1
 8087fa6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8087faa:	d1f5      	bne.n	8087f98 <_ZN9SdSpiCard11cardCommandEhm+0x4e>
}
 8087fac:	b003      	add	sp, #12
 8087fae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08087fb0 <_ZN9SdSpiCard5beginEP9SdSpiBasehh>:
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
 8087fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8087fb2:	461f      	mov	r7, r3
  m_errorCode = m_type = 0;
 8087fb4:	2300      	movs	r3, #0
  m_chipSelectPin = chipSelectPin;
 8087fb6:	7142      	strb	r2, [r0, #5]
  m_errorCode = m_type = 0;
 8087fb8:	7243      	strb	r3, [r0, #9]
 8087fba:	7183      	strb	r3, [r0, #6]
  m_spi = spi;
 8087fbc:	6001      	str	r1, [r0, #0]
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
 8087fbe:	4604      	mov	r4, r0
 8087fc0:	f002 fb50 	bl	808a664 <HAL_Timer_Get_Milli_Seconds>
 8087fc4:	4605      	mov	r5, r0
  spiBegin(m_chipSelectPin);
 8087fc6:	6820      	ldr	r0, [r4, #0]
    m_spi->begin(chipSelectPin);
 8087fc8:	7961      	ldrb	r1, [r4, #5]
 8087fca:	6803      	ldr	r3, [r0, #0]
    m_spi->beginTransaction(spiDivisor);
 8087fcc:	260a      	movs	r6, #10
    m_spi->begin(chipSelectPin);
 8087fce:	681b      	ldr	r3, [r3, #0]
 8087fd0:	4798      	blx	r3
  m_sckDivisor = SPI_SCK_INIT_DIVISOR;
 8087fd2:	2180      	movs	r1, #128	; 0x80
  spiBeginTransaction(m_sckDivisor);
 8087fd4:	6820      	ldr	r0, [r4, #0]
  m_sckDivisor = SPI_SCK_INIT_DIVISOR;
 8087fd6:	71e1      	strb	r1, [r4, #7]
    m_spi->beginTransaction(spiDivisor);
 8087fd8:	6803      	ldr	r3, [r0, #0]
 8087fda:	685b      	ldr	r3, [r3, #4]
 8087fdc:	4798      	blx	r3
    spiSend(0XFF);
 8087fde:	21ff      	movs	r1, #255	; 0xff
 8087fe0:	6820      	ldr	r0, [r4, #0]
 8087fe2:	3e01      	subs	r6, #1
 8087fe4:	f7ff ff47 	bl	8087e76 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
 8087fe8:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8087fec:	d1f7      	bne.n	8087fde <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x2e>
  spiEndTransaction();
 8087fee:	6820      	ldr	r0, [r4, #0]
    m_spi->endTransaction();
 8087ff0:	6803      	ldr	r3, [r0, #0]
 8087ff2:	689b      	ldr	r3, [r3, #8]
 8087ff4:	4798      	blx	r3
  while (cardCommand(CMD0, 0) != R1_IDLE_STATE) {
 8087ff6:	2200      	movs	r2, #0
 8087ff8:	4620      	mov	r0, r4
 8087ffa:	4611      	mov	r1, r2
 8087ffc:	f7ff ffa5 	bl	8087f4a <_ZN9SdSpiCard11cardCommandEhm>
 8088000:	2801      	cmp	r0, #1
 8088002:	d00c      	beq.n	808801e <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x6e>
 8088004:	f002 fb2e 	bl	808a664 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 8088008:	1b40      	subs	r0, r0, r5
 808800a:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 808800e:	d9f2      	bls.n	8087ff6 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x46>
    m_errorCode = code;
 8088010:	2301      	movs	r3, #1
  chipSelectHigh();
 8088012:	4620      	mov	r0, r4
 8088014:	71a3      	strb	r3, [r4, #6]
 8088016:	f7ff ff31 	bl	8087e7c <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 808801a:	2000      	movs	r0, #0
}
 808801c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
 808801e:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8088022:	2108      	movs	r1, #8
 8088024:	4620      	mov	r0, r4
 8088026:	f7ff ff90 	bl	8087f4a <_ZN9SdSpiCard11cardCommandEhm>
 808802a:	2805      	cmp	r0, #5
 808802c:	d116      	bne.n	808805c <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xac>
    m_type = value;
 808802e:	2301      	movs	r3, #1
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 8088030:	2600      	movs	r6, #0
 8088032:	7263      	strb	r3, [r4, #9]
    cardCommand(CMD55, 0);
 8088034:	2200      	movs	r2, #0
 8088036:	2137      	movs	r1, #55	; 0x37
 8088038:	4620      	mov	r0, r4
 808803a:	f7ff ff86 	bl	8087f4a <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 808803e:	4632      	mov	r2, r6
 8088040:	2129      	movs	r1, #41	; 0x29
 8088042:	4620      	mov	r0, r4
 8088044:	f7ff ff81 	bl	8087f4a <_ZN9SdSpiCard11cardCommandEhm>
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
 8088048:	4602      	mov	r2, r0
 808804a:	b1f8      	cbz	r0, 808808c <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xdc>
 808804c:	f002 fb0a 	bl	808a664 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 8088050:	1b40      	subs	r0, r0, r5
 8088052:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8088056:	d9ed      	bls.n	8088034 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x84>
    m_errorCode = code;
 8088058:	230a      	movs	r3, #10
 808805a:	e7da      	b.n	8088012 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x62>
 808805c:	2604      	movs	r6, #4
      m_status = spiReceive();
 808805e:	6820      	ldr	r0, [r4, #0]
 8088060:	f7ff ff06 	bl	8087e70 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8088064:	3e01      	subs	r6, #1
    for (uint8_t i = 0; i < 4; i++) {
 8088066:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
      m_status = spiReceive();
 808806a:	7220      	strb	r0, [r4, #8]
    for (uint8_t i = 0; i < 4; i++) {
 808806c:	d1f7      	bne.n	808805e <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xae>
    if (m_status == 0XAA) {
 808806e:	28aa      	cmp	r0, #170	; 0xaa
 8088070:	d104      	bne.n	808807c <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xcc>
    m_type = value;
 8088072:	2302      	movs	r3, #2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 8088074:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8088078:	7263      	strb	r3, [r4, #9]
    return m_type;
 808807a:	e7db      	b.n	8088034 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x84>
 808807c:	f002 faf2 	bl	808a664 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 8088080:	1b40      	subs	r0, r0, r5
 8088082:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8088086:	d9ca      	bls.n	808801e <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x6e>
    m_errorCode = code;
 8088088:	2302      	movs	r3, #2
 808808a:	e7c2      	b.n	8088012 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x62>
  if (type() == SD_CARD_TYPE_SD2) {
 808808c:	7a63      	ldrb	r3, [r4, #9]
 808808e:	2b02      	cmp	r3, #2
 8088090:	d119      	bne.n	80880c6 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x116>
    if (cardCommand(CMD58, 0)) {
 8088092:	213a      	movs	r1, #58	; 0x3a
 8088094:	4620      	mov	r0, r4
 8088096:	f7ff ff58 	bl	8087f4a <_ZN9SdSpiCard11cardCommandEhm>
 808809a:	b108      	cbz	r0, 80880a0 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xf0>
 808809c:	2308      	movs	r3, #8
 808809e:	e7b8      	b.n	8088012 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x62>
    if ((spiReceive() & 0XC0) == 0XC0) {
 80880a0:	6820      	ldr	r0, [r4, #0]
 80880a2:	f7ff fee5 	bl	8087e70 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 80880a6:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 80880aa:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
 80880ac:	bf08      	it	eq
 80880ae:	2303      	moveq	r3, #3
      spiReceive();
 80880b0:	6820      	ldr	r0, [r4, #0]
 80880b2:	bf08      	it	eq
 80880b4:	7263      	strbeq	r3, [r4, #9]
 80880b6:	f7ff fedb 	bl	8087e70 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 80880ba:	6820      	ldr	r0, [r4, #0]
 80880bc:	f7ff fed8 	bl	8087e70 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 80880c0:	6820      	ldr	r0, [r4, #0]
 80880c2:	f7ff fed5 	bl	8087e70 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  chipSelectHigh();
 80880c6:	4620      	mov	r0, r4
 80880c8:	f7ff fed8 	bl	8087e7c <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 80880cc:	2001      	movs	r0, #1
  m_sckDivisor = sckDivisor;
 80880ce:	71e7      	strb	r7, [r4, #7]
  return true;
 80880d0:	e7a4      	b.n	808801c <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x6c>

080880d2 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 80880d2:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
 80880d4:	7a43      	ldrb	r3, [r0, #9]
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 80880d6:	4615      	mov	r5, r2
  if (type() != SD_CARD_TYPE_SDHC) {
 80880d8:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 80880da:	bf18      	it	ne
 80880dc:	0249      	lslne	r1, r1, #9
  if (cardCommand(CMD17, blockNumber)) {
 80880de:	460a      	mov	r2, r1
 80880e0:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 80880e2:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
 80880e4:	f7ff ff31 	bl	8087f4a <_ZN9SdSpiCard11cardCommandEhm>
 80880e8:	b130      	cbz	r0, 80880f8 <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
 80880ea:	2304      	movs	r3, #4
 80880ec:	71a3      	strb	r3, [r4, #6]
  chipSelectHigh();
 80880ee:	4620      	mov	r0, r4
 80880f0:	f7ff fec4 	bl	8087e7c <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 80880f4:	2500      	movs	r5, #0
 80880f6:	e00b      	b.n	8088110 <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
 80880f8:	4629      	mov	r1, r5
 80880fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80880fe:	4620      	mov	r0, r4
 8088100:	f7ff fedf 	bl	8087ec2 <_ZN9SdSpiCard8readDataEPhj>
 8088104:	4605      	mov	r5, r0
 8088106:	2800      	cmp	r0, #0
 8088108:	d0f1      	beq.n	80880ee <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  chipSelectHigh();
 808810a:	4620      	mov	r0, r4
 808810c:	f7ff feb6 	bl	8087e7c <_ZN9SdSpiCard14chipSelectHighEv>
}
 8088110:	4628      	mov	r0, r5
 8088112:	bd38      	pop	{r3, r4, r5, pc}

08088114 <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8088114:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
 8088116:	7a43      	ldrb	r3, [r0, #9]
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8088118:	460a      	mov	r2, r1
  if (type() != SD_CARD_TYPE_SDHC) {
 808811a:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 808811c:	bf18      	it	ne
 808811e:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
 8088120:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8088122:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
 8088124:	f7ff ff11 	bl	8087f4a <_ZN9SdSpiCard11cardCommandEhm>
 8088128:	b130      	cbz	r0, 8088138 <_ZN9SdSpiCard9readStartEm+0x24>
 808812a:	2305      	movs	r3, #5
  chipSelectHigh();
 808812c:	4620      	mov	r0, r4
 808812e:	71a3      	strb	r3, [r4, #6]
 8088130:	f7ff fea4 	bl	8087e7c <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8088134:	2000      	movs	r0, #0
}
 8088136:	bd10      	pop	{r4, pc}
  return true;
 8088138:	2001      	movs	r0, #1
 808813a:	e7fc      	b.n	8088136 <_ZN9SdSpiCard9readStartEm+0x22>

0808813c <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
 808813c:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
 808813e:	2200      	movs	r2, #0
 8088140:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
 8088142:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
 8088144:	f7ff ff01 	bl	8087f4a <_ZN9SdSpiCard11cardCommandEhm>
 8088148:	b130      	cbz	r0, 8088158 <_ZN9SdSpiCard8readStopEv+0x1c>
 808814a:	2303      	movs	r3, #3
  chipSelectHigh();
 808814c:	4620      	mov	r0, r4
 808814e:	71a3      	strb	r3, [r4, #6]
 8088150:	f7ff fe94 	bl	8087e7c <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8088154:	2000      	movs	r0, #0
}
 8088156:	bd10      	pop	{r4, pc}
  chipSelectHigh();
 8088158:	4620      	mov	r0, r4
 808815a:	f7ff fe8f 	bl	8087e7c <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 808815e:	2001      	movs	r0, #1
 8088160:	e7f9      	b.n	8088156 <_ZN9SdSpiCard8readStopEv+0x1a>

08088162 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
 8088162:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8088164:	4604      	mov	r4, r0
 8088166:	4616      	mov	r6, r2
 8088168:	461f      	mov	r7, r3
  if (!readStart(block)) {
 808816a:	f7ff ffd3 	bl	8088114 <_ZN9SdSpiCard9readStartEm>
 808816e:	b168      	cbz	r0, 808818c <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
 8088170:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
 8088172:	b2ab      	uxth	r3, r5
 8088174:	42bb      	cmp	r3, r7
 8088176:	eb06 2145 	add.w	r1, r6, r5, lsl #9
 808817a:	d209      	bcs.n	8088190 <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
 808817c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8088180:	4620      	mov	r0, r4
 8088182:	f7ff fe9e 	bl	8087ec2 <_ZN9SdSpiCard8readDataEPhj>
 8088186:	3501      	adds	r5, #1
 8088188:	2800      	cmp	r0, #0
 808818a:	d1f2      	bne.n	8088172 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
 808818c:	2000      	movs	r0, #0
 808818e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
 8088190:	4620      	mov	r0, r4
}
 8088192:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
 8088196:	f7ff bfd1 	b.w	808813c <_ZN9SdSpiCard8readStopEv>

0808819a <_ZN9SdSpiCard9writeDataEhPKh>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
 808819a:	b538      	push	{r3, r4, r5, lr}
 808819c:	4604      	mov	r4, r0
 808819e:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
 80881a0:	6800      	ldr	r0, [r0, #0]
 80881a2:	f7ff fe68 	bl	8087e76 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(src, 512);
 80881a6:	6820      	ldr	r0, [r4, #0]
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spi->send(buf, n);
 80881a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80881ac:	6803      	ldr	r3, [r0, #0]
 80881ae:	4629      	mov	r1, r5
 80881b0:	699b      	ldr	r3, [r3, #24]
 80881b2:	4798      	blx	r3
  spiSend(crc >> 8);
 80881b4:	21ff      	movs	r1, #255	; 0xff
 80881b6:	6820      	ldr	r0, [r4, #0]
 80881b8:	f7ff fe5d 	bl	8087e76 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
 80881bc:	21ff      	movs	r1, #255	; 0xff
 80881be:	6820      	ldr	r0, [r4, #0]
 80881c0:	f7ff fe59 	bl	8087e76 <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
 80881c4:	6820      	ldr	r0, [r4, #0]
 80881c6:	f7ff fe53 	bl	8087e70 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 80881ca:	7220      	strb	r0, [r4, #8]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
 80881cc:	f000 001f 	and.w	r0, r0, #31
 80881d0:	2805      	cmp	r0, #5
 80881d2:	d006      	beq.n	80881e2 <_ZN9SdSpiCard9writeDataEhPKh+0x48>
    m_errorCode = code;
 80881d4:	2313      	movs	r3, #19
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 80881d6:	4620      	mov	r0, r4
 80881d8:	71a3      	strb	r3, [r4, #6]
 80881da:	f7ff fe4f 	bl	8087e7c <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 80881de:	2000      	movs	r0, #0
}
 80881e0:	bd38      	pop	{r3, r4, r5, pc}
  return true;
 80881e2:	2001      	movs	r0, #1
 80881e4:	e7fc      	b.n	80881e0 <_ZN9SdSpiCard9writeDataEhPKh+0x46>

080881e6 <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 80881e6:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
 80881e8:	7a43      	ldrb	r3, [r0, #9]
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 80881ea:	4615      	mov	r5, r2
  if (type() != SD_CARD_TYPE_SDHC) {
 80881ec:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 80881ee:	bf18      	it	ne
 80881f0:	0249      	lslne	r1, r1, #9
  if (cardCommand(CMD24, blockNumber)) {
 80881f2:	460a      	mov	r2, r1
 80881f4:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 80881f6:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
 80881f8:	f7ff fea7 	bl	8087f4a <_ZN9SdSpiCard11cardCommandEhm>
 80881fc:	b130      	cbz	r0, 808820c <_ZN9SdSpiCard10writeBlockEmPKh+0x26>
 80881fe:	2306      	movs	r3, #6
 8088200:	71a3      	strb	r3, [r4, #6]
  chipSelectHigh();
 8088202:	4620      	mov	r0, r4
 8088204:	f7ff fe3a 	bl	8087e7c <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8088208:	2500      	movs	r5, #0
 808820a:	e00a      	b.n	8088222 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
  if (!writeData(DATA_START_BLOCK, src)) {
 808820c:	462a      	mov	r2, r5
 808820e:	21fe      	movs	r1, #254	; 0xfe
 8088210:	4620      	mov	r0, r4
 8088212:	f7ff ffc2 	bl	808819a <_ZN9SdSpiCard9writeDataEhPKh>
 8088216:	4605      	mov	r5, r0
 8088218:	2800      	cmp	r0, #0
 808821a:	d0f2      	beq.n	8088202 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  chipSelectHigh();
 808821c:	4620      	mov	r0, r4
 808821e:	f7ff fe2d 	bl	8087e7c <_ZN9SdSpiCard14chipSelectHighEv>
}
 8088222:	4628      	mov	r0, r5
 8088224:	bd38      	pop	{r3, r4, r5, pc}

08088226 <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
 8088226:	b570      	push	{r4, r5, r6, lr}
 8088228:	4604      	mov	r4, r0
 808822a:	460e      	mov	r6, r1
  bool selected = m_selected;
 808822c:	7905      	ldrb	r5, [r0, #4]
  chipSelectLow();
 808822e:	f7ff fe38 	bl	8087ea2 <_ZN9SdSpiCard13chipSelectLowEv>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8088232:	f44f 7116 	mov.w	r1, #600	; 0x258
 8088236:	4620      	mov	r0, r4
 8088238:	f7ff fe73 	bl	8087f22 <_ZN9SdSpiCard11waitNotBusyEt>
 808823c:	b930      	cbnz	r0, 808824c <_ZN9SdSpiCard9writeDataEPKh+0x26>
 808823e:	2317      	movs	r3, #23
 8088240:	71a3      	strb	r3, [r4, #6]
  chipSelectHigh();
 8088242:	4620      	mov	r0, r4
 8088244:	f7ff fe1a 	bl	8087e7c <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8088248:	2500      	movs	r5, #0
 808824a:	e00c      	b.n	8088266 <_ZN9SdSpiCard9writeDataEPKh+0x40>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
 808824c:	4632      	mov	r2, r6
 808824e:	21fc      	movs	r1, #252	; 0xfc
 8088250:	4620      	mov	r0, r4
 8088252:	f7ff ffa2 	bl	808819a <_ZN9SdSpiCard9writeDataEhPKh>
 8088256:	4606      	mov	r6, r0
 8088258:	2800      	cmp	r0, #0
 808825a:	d0f2      	beq.n	8088242 <_ZN9SdSpiCard9writeDataEPKh+0x1c>
  if (!selected) {
 808825c:	b91d      	cbnz	r5, 8088266 <_ZN9SdSpiCard9writeDataEPKh+0x40>
    chipSelectHigh();
 808825e:	4620      	mov	r0, r4
 8088260:	f7ff fe0c 	bl	8087e7c <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8088264:	4635      	mov	r5, r6
}
 8088266:	4628      	mov	r0, r5
 8088268:	bd70      	pop	{r4, r5, r6, pc}

0808826a <_ZN9SdSpiCard10writeStartEmm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber, uint32_t eraseCount) {
 808826a:	b570      	push	{r4, r5, r6, lr}
 808826c:	4604      	mov	r4, r0
 808826e:	4616      	mov	r6, r2
 8088270:	460d      	mov	r5, r1
    cardCommand(CMD55, 0);
 8088272:	2200      	movs	r2, #0
 8088274:	2137      	movs	r1, #55	; 0x37
 8088276:	f7ff fe68 	bl	8087f4a <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 808827a:	4632      	mov	r2, r6
 808827c:	2117      	movs	r1, #23
 808827e:	4620      	mov	r0, r4
 8088280:	f7ff fe63 	bl	8087f4a <_ZN9SdSpiCard11cardCommandEhm>
  SD_TRACE("WS", blockNumber);
  // send pre-erase count
  if (cardAcmd(ACMD23, eraseCount)) {
 8088284:	b130      	cbz	r0, 8088294 <_ZN9SdSpiCard10writeStartEmm+0x2a>
    m_errorCode = code;
 8088286:	2309      	movs	r3, #9
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 8088288:	4620      	mov	r0, r4
 808828a:	71a3      	strb	r3, [r4, #6]
 808828c:	f7ff fdf6 	bl	8087e7c <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8088290:	2000      	movs	r0, #0
}
 8088292:	bd70      	pop	{r4, r5, r6, pc}
  if (type() != SD_CARD_TYPE_SDHC) {
 8088294:	7a63      	ldrb	r3, [r4, #9]
  if (cardCommand(CMD25, blockNumber)) {
 8088296:	2119      	movs	r1, #25
  if (type() != SD_CARD_TYPE_SDHC) {
 8088298:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 808829a:	bf18      	it	ne
 808829c:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD25, blockNumber)) {
 808829e:	462a      	mov	r2, r5
 80882a0:	4620      	mov	r0, r4
 80882a2:	f7ff fe52 	bl	8087f4a <_ZN9SdSpiCard11cardCommandEhm>
 80882a6:	b108      	cbz	r0, 80882ac <_ZN9SdSpiCard10writeStartEmm+0x42>
 80882a8:	2307      	movs	r3, #7
 80882aa:	e7ed      	b.n	8088288 <_ZN9SdSpiCard10writeStartEmm+0x1e>
  return true;
 80882ac:	2001      	movs	r0, #1
 80882ae:	e7f0      	b.n	8088292 <_ZN9SdSpiCard10writeStartEmm+0x28>

080882b0 <_ZN9SdSpiCard9writeStopEv>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 80882b0:	b538      	push	{r3, r4, r5, lr}
 80882b2:	4604      	mov	r4, r0
  chipSelectLow();
 80882b4:	f7ff fdf5 	bl	8087ea2 <_ZN9SdSpiCard13chipSelectLowEv>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 80882b8:	f44f 7116 	mov.w	r1, #600	; 0x258
 80882bc:	4620      	mov	r0, r4
 80882be:	f7ff fe30 	bl	8087f22 <_ZN9SdSpiCard11waitNotBusyEt>
 80882c2:	b178      	cbz	r0, 80882e4 <_ZN9SdSpiCard9writeStopEv+0x34>
    goto fail;
  }
  spiSend(STOP_TRAN_TOKEN);
 80882c4:	21fd      	movs	r1, #253	; 0xfd
 80882c6:	6820      	ldr	r0, [r4, #0]
 80882c8:	f7ff fdd5 	bl	8087e76 <_ZN9SdSpiCard7spiSendEh.isra.0>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 80882cc:	f44f 7116 	mov.w	r1, #600	; 0x258
 80882d0:	4620      	mov	r0, r4
 80882d2:	f7ff fe26 	bl	8087f22 <_ZN9SdSpiCard11waitNotBusyEt>
 80882d6:	4605      	mov	r5, r0
 80882d8:	b120      	cbz	r0, 80882e4 <_ZN9SdSpiCard9writeStopEv+0x34>
    goto fail;
  }
  chipSelectHigh();
 80882da:	4620      	mov	r0, r4
 80882dc:	f7ff fdce 	bl	8087e7c <_ZN9SdSpiCard14chipSelectHighEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  return false;
}
 80882e0:	4628      	mov	r0, r5
 80882e2:	bd38      	pop	{r3, r4, r5, pc}
 80882e4:	2312      	movs	r3, #18
  chipSelectHigh();
 80882e6:	4620      	mov	r0, r4
 80882e8:	71a3      	strb	r3, [r4, #6]
 80882ea:	f7ff fdc7 	bl	8087e7c <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 80882ee:	2500      	movs	r5, #0
 80882f0:	e7f6      	b.n	80882e0 <_ZN9SdSpiCard9writeStopEv+0x30>

080882f2 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 80882f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80882f4:	4617      	mov	r7, r2
  if (!writeStart(block, count)) {
 80882f6:	461a      	mov	r2, r3
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 80882f8:	4604      	mov	r4, r0
 80882fa:	461e      	mov	r6, r3
  if (!writeStart(block, count)) {
 80882fc:	f7ff ffb5 	bl	808826a <_ZN9SdSpiCard10writeStartEmm>
 8088300:	b170      	cbz	r0, 8088320 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2e>
  for (size_t b = 0; b < count; b++, src += 512) {
 8088302:	2500      	movs	r5, #0
 8088304:	42b5      	cmp	r5, r6
  return writeStop();
 8088306:	4620      	mov	r0, r4
 8088308:	eb07 2145 	add.w	r1, r7, r5, lsl #9
  for (size_t b = 0; b < count; b++, src += 512) {
 808830c:	d004      	beq.n	8088318 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x26>
    if (!writeData(src)) {
 808830e:	f7ff ff8a 	bl	8088226 <_ZN9SdSpiCard9writeDataEPKh>
 8088312:	b128      	cbz	r0, 8088320 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2e>
  for (size_t b = 0; b < count; b++, src += 512) {
 8088314:	3501      	adds	r5, #1
 8088316:	e7f5      	b.n	8088304 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x12>
}
 8088318:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
 808831c:	f7ff bfc8 	b.w	80882b0 <_ZN9SdSpiCard9writeStopEv>
  chipSelectHigh();
 8088320:	4620      	mov	r0, r4
 8088322:	f7ff fdab 	bl	8087e7c <_ZN9SdSpiCard14chipSelectHighEv>
}
 8088326:	2000      	movs	r0, #0
 8088328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808832a <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP9SdSpiBasehh>:
 808832a:	f002 b93b 	b.w	808a5a4 <HAL_Pin_Map>
	...

08088330 <_Z36SD_SPI_DMA_TransferComplete_Callbackv>:
#if SPI_INTERFACE_COUNT == 1
const uint8_t m_spiIf = 0;
#endif
//-----------------------------------------------------------------------------
void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
 8088330:	2201      	movs	r2, #1
 8088332:	4b01      	ldr	r3, [pc, #4]	; (8088338 <_Z36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
 8088334:	701a      	strb	r2, [r3, #0]
}
 8088336:	4770      	bx	lr
 8088338:	20000d44 	.word	0x20000d44

0808833c <_ZN5SdSpi14endTransactionEv>:
  // delay for SPI transfer done callback too soon bug.
  bugDelay = 24*divisor*(1 + m_spiIf)/60;
}
//-----------------------------------------------------------------------------
void SdSpi::endTransaction() {
}
 808833c:	4770      	bx	lr
	...

08088340 <_ZN5SdSpi5beginEh>:
  spiPtr[m_spiIf]->begin(chipSelectPin);
 8088340:	7902      	ldrb	r2, [r0, #4]
 8088342:	4b02      	ldr	r3, [pc, #8]	; (808834c <_ZN5SdSpi5beginEh+0xc>)
 8088344:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8088348:	f002 be38 	b.w	808afbc <_ZN8SPIClass5beginEt>
 808834c:	20000d48 	.word	0x20000d48

08088350 <_ZN5SdSpi16beginTransactionEh>:
void SdSpi::beginTransaction(uint8_t divisor) {
 8088350:	b570      	push	{r4, r5, r6, lr}
 8088352:	4605      	mov	r5, r0
 8088354:	460c      	mov	r4, r1
  spiPtr[m_spiIf]->setBitOrder(MSBFIRST);
 8088356:	7903      	ldrb	r3, [r0, #4]
 8088358:	4e19      	ldr	r6, [pc, #100]	; (80883c0 <_ZN5SdSpi16beginTransactionEh+0x70>)
 808835a:	2101      	movs	r1, #1
 808835c:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 8088360:	f002 fe3a 	bl	808afd8 <_ZN8SPIClass11setBitOrderEh>
  spiPtr[m_spiIf]->setDataMode(SPI_MODE0);
 8088364:	792b      	ldrb	r3, [r5, #4]
 8088366:	2100      	movs	r1, #0
 8088368:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 808836c:	f002 fe42 	bl	808aff4 <_ZN8SPIClass11setDataModeEh>
  if (divisor <= 2) {
 8088370:	2c02      	cmp	r4, #2
 8088372:	d91b      	bls.n	80883ac <_ZN5SdSpi16beginTransactionEh+0x5c>
  } else  if (divisor <= 4) {
 8088374:	2c04      	cmp	r4, #4
 8088376:	d91b      	bls.n	80883b0 <_ZN5SdSpi16beginTransactionEh+0x60>
  } else  if (divisor <= 8) {
 8088378:	2c08      	cmp	r4, #8
 808837a:	d91b      	bls.n	80883b4 <_ZN5SdSpi16beginTransactionEh+0x64>
  } else  if (divisor <= 16) {
 808837c:	2c10      	cmp	r4, #16
 808837e:	d91b      	bls.n	80883b8 <_ZN5SdSpi16beginTransactionEh+0x68>
  } else  if (divisor <= 32) {
 8088380:	2c20      	cmp	r4, #32
 8088382:	d91b      	bls.n	80883bc <_ZN5SdSpi16beginTransactionEh+0x6c>
    v = SPI_CLOCK_DIV128;
 8088384:	2c41      	cmp	r4, #65	; 0x41
 8088386:	bf34      	ite	cc
 8088388:	2128      	movcc	r1, #40	; 0x28
 808838a:	2130      	movcs	r1, #48	; 0x30
  spiPtr[m_spiIf]->setClockDivider(v);
 808838c:	792b      	ldrb	r3, [r5, #4]
 808838e:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 8088392:	f002 fe7f 	bl	808b094 <_ZN8SPIClass15setClockDividerEh>
  bugDelay = 24*divisor*(1 + m_spiIf)/60;
 8088396:	7929      	ldrb	r1, [r5, #4]
 8088398:	233c      	movs	r3, #60	; 0x3c
 808839a:	fb01 4404 	mla	r4, r1, r4, r4
 808839e:	2118      	movs	r1, #24
 80883a0:	434c      	muls	r4, r1
 80883a2:	fbb4 f4f3 	udiv	r4, r4, r3
 80883a6:	4b07      	ldr	r3, [pc, #28]	; (80883c4 <_ZN5SdSpi16beginTransactionEh+0x74>)
 80883a8:	601c      	str	r4, [r3, #0]
}
 80883aa:	bd70      	pop	{r4, r5, r6, pc}
    v = SPI_CLOCK_DIV2;
 80883ac:	2100      	movs	r1, #0
 80883ae:	e7ed      	b.n	808838c <_ZN5SdSpi16beginTransactionEh+0x3c>
    v = SPI_CLOCK_DIV4;
 80883b0:	2108      	movs	r1, #8
 80883b2:	e7eb      	b.n	808838c <_ZN5SdSpi16beginTransactionEh+0x3c>
    v = SPI_CLOCK_DIV8;
 80883b4:	2110      	movs	r1, #16
 80883b6:	e7e9      	b.n	808838c <_ZN5SdSpi16beginTransactionEh+0x3c>
    v = SPI_CLOCK_DIV16;
 80883b8:	2118      	movs	r1, #24
 80883ba:	e7e7      	b.n	808838c <_ZN5SdSpi16beginTransactionEh+0x3c>
    v = SPI_CLOCK_DIV32;
 80883bc:	2120      	movs	r1, #32
 80883be:	e7e5      	b.n	808838c <_ZN5SdSpi16beginTransactionEh+0x3c>
 80883c0:	20000d48 	.word	0x20000d48
 80883c4:	20000d54 	.word	0x20000d54

080883c8 <_ZN5SdSpi7receiveEv>:
//-----------------------------------------------------------------------------
/** SPI receive a byte */
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
 80883c8:	7902      	ldrb	r2, [r0, #4]
 80883ca:	4b03      	ldr	r3, [pc, #12]	; (80883d8 <_ZN5SdSpi7receiveEv+0x10>)
 80883cc:	21ff      	movs	r1, #255	; 0xff
 80883ce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80883d2:	f002 be83 	b.w	808b0dc <_ZN8SPIClass8transferEh>
 80883d6:	bf00      	nop
 80883d8:	20000d48 	.word	0x20000d48

080883dc <_ZN5SdSpi4sendEh>:
  return 0;
}
//-----------------------------------------------------------------------------
/** SPI send a byte */
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
 80883dc:	7902      	ldrb	r2, [r0, #4]
 80883de:	4b02      	ldr	r3, [pc, #8]	; (80883e8 <_ZN5SdSpi4sendEh+0xc>)
 80883e0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80883e4:	f002 be7a 	b.w	808b0dc <_ZN8SPIClass8transferEh>
 80883e8:	20000d48 	.word	0x20000d48

080883ec <_ZN5SdSpi7receiveEPhj>:
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
 80883ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80883ee:	460e      	mov	r6, r1
  SPI_DMA_TransferCompleted = false;
 80883f0:	2100      	movs	r1, #0
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
 80883f2:	4613      	mov	r3, r2
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 80883f4:	4a0a      	ldr	r2, [pc, #40]	; (8088420 <_ZN5SdSpi7receiveEPhj+0x34>)
 80883f6:	7905      	ldrb	r5, [r0, #4]
 80883f8:	480a      	ldr	r0, [pc, #40]	; (8088424 <_ZN5SdSpi7receiveEPhj+0x38>)
 80883fa:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
 80883fc:	4c0a      	ldr	r4, [pc, #40]	; (8088428 <_ZN5SdSpi7receiveEPhj+0x3c>)
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 80883fe:	4632      	mov	r2, r6
 8088400:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
  SPI_DMA_TransferCompleted = false;
 8088404:	7021      	strb	r1, [r4, #0]
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8088406:	f002 fe6f 	bl	808b0e8 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
 808840a:	7823      	ldrb	r3, [r4, #0]
 808840c:	2b00      	cmp	r3, #0
 808840e:	d0fc      	beq.n	808840a <_ZN5SdSpi7receiveEPhj+0x1e>
  if (bugDelay) {
 8088410:	4b06      	ldr	r3, [pc, #24]	; (808842c <_ZN5SdSpi7receiveEPhj+0x40>)
 8088412:	6818      	ldr	r0, [r3, #0]
 8088414:	b108      	cbz	r0, 808841a <_ZN5SdSpi7receiveEPhj+0x2e>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 8088416:	f002 f91d 	bl	808a654 <HAL_Delay_Microseconds>
}
 808841a:	2000      	movs	r0, #0
 808841c:	b002      	add	sp, #8
 808841e:	bd70      	pop	{r4, r5, r6, pc}
 8088420:	08088331 	.word	0x08088331
 8088424:	20000d48 	.word	0x20000d48
 8088428:	20000d44 	.word	0x20000d44
 808842c:	20000d54 	.word	0x20000d54

08088430 <_ZN5SdSpi4sendEPKhj>:
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
 8088430:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8088432:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
 8088434:	2200      	movs	r2, #0

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
 8088436:	7905      	ldrb	r5, [r0, #4]
 8088438:	480a      	ldr	r0, [pc, #40]	; (8088464 <_ZN5SdSpi4sendEPKhj+0x34>)
  SPI_DMA_TransferCompleted = false;
 808843a:	4c0b      	ldr	r4, [pc, #44]	; (8088468 <_ZN5SdSpi4sendEPKhj+0x38>)
  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
 808843c:	9000      	str	r0, [sp, #0]
 808843e:	480b      	ldr	r0, [pc, #44]	; (808846c <_ZN5SdSpi4sendEPKhj+0x3c>)
  SPI_DMA_TransferCompleted = false;
 8088440:	7022      	strb	r2, [r4, #0]
  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
 8088442:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8088446:	f002 fe4f 	bl	808b0e8 <_ZN8SPIClass8transferEPvS0_jPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
 808844a:	7823      	ldrb	r3, [r4, #0]
 808844c:	2b00      	cmp	r3, #0
 808844e:	d0fc      	beq.n	808844a <_ZN5SdSpi4sendEPKhj+0x1a>
  if (bugDelay) {
 8088450:	4b07      	ldr	r3, [pc, #28]	; (8088470 <_ZN5SdSpi4sendEPKhj+0x40>)
 8088452:	6818      	ldr	r0, [r3, #0]
 8088454:	b120      	cbz	r0, 8088460 <_ZN5SdSpi4sendEPKhj+0x30>
    delayMicroseconds(bugDelay);
  }
}
 8088456:	b003      	add	sp, #12
 8088458:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 808845c:	f002 b8fa 	b.w	808a654 <HAL_Delay_Microseconds>
 8088460:	b003      	add	sp, #12
 8088462:	bd30      	pop	{r4, r5, pc}
 8088464:	08088331 	.word	0x08088331
 8088468:	20000d44 	.word	0x20000d44
 808846c:	20000d48 	.word	0x20000d48
 8088470:	20000d54 	.word	0x20000d54

08088474 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 8088474:	b510      	push	{r4, lr}
 8088476:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 8088478:	6880      	ldr	r0, [r0, #8]
 808847a:	b108      	cbz	r0, 8088480 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 808847c:	f002 f932 	bl	808a6e4 <os_mutex_recursive_destroy>
 8088480:	4620      	mov	r0, r4
 8088482:	bd10      	pop	{r4, pc}

08088484 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv>:
 8088484:	b538      	push	{r3, r4, r5, lr}

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 8088486:	4d26      	ldr	r5, [pc, #152]	; (8088520 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x9c>)
 8088488:	f002 f88c 	bl	808a5a4 <HAL_Pin_Map>
 808848c:	7829      	ldrb	r1, [r5, #0]
 808848e:	f3bf 8f5b 	dmb	ish
 8088492:	f011 0401 	ands.w	r4, r1, #1
 8088496:	d10f      	bne.n	80884b8 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x34>
 8088498:	4628      	mov	r0, r5
 808849a:	f7f7 fe04 	bl	80800a6 <__cxa_guard_acquire>
 808849e:	b158      	cbz	r0, 80884b8 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x34>
 80884a0:	4621      	mov	r1, r4
 80884a2:	4820      	ldr	r0, [pc, #128]	; (8088524 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa0>)
 80884a4:	f002 fd6d 	bl	808af82 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80884a8:	4628      	mov	r0, r5
 80884aa:	f7f7 fe01 	bl	80800b0 <__cxa_guard_release>
 80884ae:	4a1e      	ldr	r2, [pc, #120]	; (8088528 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa4>)
 80884b0:	491e      	ldr	r1, [pc, #120]	; (808852c <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa8>)
 80884b2:	481c      	ldr	r0, [pc, #112]	; (8088524 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa0>)
 80884b4:	f004 ff54 	bl	808d360 <__aeabi_atexit>
};
 80884b8:	4b1a      	ldr	r3, [pc, #104]	; (8088524 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa0>)
 80884ba:	4c1d      	ldr	r4, [pc, #116]	; (8088530 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xac>)
 80884bc:	4d1d      	ldr	r5, [pc, #116]	; (8088534 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xb0>)
 80884be:	6023      	str	r3, [r4, #0]
 80884c0:	782b      	ldrb	r3, [r5, #0]
 80884c2:	f3bf 8f5b 	dmb	ish
 80884c6:	07da      	lsls	r2, r3, #31
 80884c8:	d40f      	bmi.n	80884ea <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x66>
 80884ca:	4628      	mov	r0, r5
 80884cc:	f7f7 fdeb 	bl	80800a6 <__cxa_guard_acquire>
 80884d0:	b158      	cbz	r0, 80884ea <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x66>
 80884d2:	2101      	movs	r1, #1
 80884d4:	4818      	ldr	r0, [pc, #96]	; (8088538 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xb4>)
 80884d6:	f002 fd54 	bl	808af82 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80884da:	4628      	mov	r0, r5
 80884dc:	f7f7 fde8 	bl	80800b0 <__cxa_guard_release>
 80884e0:	4a11      	ldr	r2, [pc, #68]	; (8088528 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa4>)
 80884e2:	4912      	ldr	r1, [pc, #72]	; (808852c <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa8>)
 80884e4:	4814      	ldr	r0, [pc, #80]	; (8088538 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xb4>)
 80884e6:	f004 ff3b 	bl	808d360 <__aeabi_atexit>
 80884ea:	4b13      	ldr	r3, [pc, #76]	; (8088538 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xb4>)
 80884ec:	4d13      	ldr	r5, [pc, #76]	; (808853c <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xb8>)
 80884ee:	6063      	str	r3, [r4, #4]
 80884f0:	782b      	ldrb	r3, [r5, #0]
 80884f2:	f3bf 8f5b 	dmb	ish
 80884f6:	07db      	lsls	r3, r3, #31
 80884f8:	d40f      	bmi.n	808851a <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x96>
 80884fa:	4628      	mov	r0, r5
 80884fc:	f7f7 fdd3 	bl	80800a6 <__cxa_guard_acquire>
 8088500:	b158      	cbz	r0, 808851a <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x96>
 8088502:	2102      	movs	r1, #2
 8088504:	480e      	ldr	r0, [pc, #56]	; (8088540 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xbc>)
 8088506:	f002 fd3c 	bl	808af82 <_ZN8SPIClassC1E19hal_spi_interface_t>
 808850a:	4628      	mov	r0, r5
 808850c:	f7f7 fdd0 	bl	80800b0 <__cxa_guard_release>
 8088510:	4a05      	ldr	r2, [pc, #20]	; (8088528 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa4>)
 8088512:	4906      	ldr	r1, [pc, #24]	; (808852c <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa8>)
 8088514:	480a      	ldr	r0, [pc, #40]	; (8088540 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xbc>)
 8088516:	f004 ff23 	bl	808d360 <__aeabi_atexit>
 808851a:	4b09      	ldr	r3, [pc, #36]	; (8088540 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xbc>)
 808851c:	60a3      	str	r3, [r4, #8]
}
 808851e:	bd38      	pop	{r3, r4, r5, pc}
 8088520:	20000d34 	.word	0x20000d34
 8088524:	20000d38 	.word	0x20000d38
 8088528:	20000328 	.word	0x20000328
 808852c:	08088475 	.word	0x08088475
 8088530:	20000d48 	.word	0x20000d48
 8088534:	20000d24 	.word	0x20000d24
 8088538:	20000d28 	.word	0x20000d28
 808853c:	20000d14 	.word	0x20000d14
 8088540:	20000d18 	.word	0x20000d18

08088544 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 8088544:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 8088546:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
 8088548:	f063 037f 	orn	r3, r3, #127	; 0x7f
 808854c:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 808854e:	f100 0210 	add.w	r2, r0, #16
 8088552:	6880      	ldr	r0, [r0, #8]
 8088554:	f000 bbf3 	b.w	8088d3e <_ZN9FatVolume15allocateClusterEmPm>

08088558 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 8088558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 808855c:	7801      	ldrb	r1, [r0, #0]
bool FatFile::addDirCluster() {
 808855e:	4604      	mov	r4, r0
  if (isRootFixed()) {
 8088560:	f011 0520 	ands.w	r5, r1, #32
 8088564:	d003      	beq.n	808856e <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
 8088566:	2600      	movs	r6, #0
}
 8088568:	4630      	mov	r0, r6
 808856a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
 808856e:	6942      	ldr	r2, [r0, #20]
 8088570:	4b17      	ldr	r3, [pc, #92]	; (80885d0 <_ZN7FatFile13addDirClusterEv+0x78>)
 8088572:	429a      	cmp	r2, r3
 8088574:	d2f7      	bcs.n	8088566 <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
 8088576:	f7ff ffe5 	bl	8088544 <_ZN7FatFile10addClusterEv>
 808857a:	4606      	mov	r6, r0
 808857c:	2800      	cmp	r0, #0
 808857e:	d0f2      	beq.n	8088566 <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterStartBlock(m_curCluster);
 8088580:	6921      	ldr	r1, [r4, #16]
 8088582:	68a0      	ldr	r0, [r4, #8]
 8088584:	f000 fb7c 	bl	8088c80 <_ZNK9FatVolume17clusterStartBlockEm>
 8088588:	4607      	mov	r7, r0
    return m_cache.read(blockNumber, options);
 808858a:	68a0      	ldr	r0, [r4, #8]
 808858c:	2205      	movs	r2, #5
 808858e:	4639      	mov	r1, r7
 8088590:	3028      	adds	r0, #40	; 0x28
 8088592:	f000 fb52 	bl	8088c3a <_ZN8FatCache4readEmh>
  if (!pc) {
 8088596:	4680      	mov	r8, r0
 8088598:	2800      	cmp	r0, #0
 808859a:	d0e4      	beq.n	8088566 <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
 808859c:	4629      	mov	r1, r5
 808859e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80885a2:	f006 fa5d 	bl	808ea60 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 80885a6:	2501      	movs	r5, #1
 80885a8:	68a0      	ldr	r0, [r4, #8]
 80885aa:	7902      	ldrb	r2, [r0, #4]
 80885ac:	42aa      	cmp	r2, r5
 80885ae:	d909      	bls.n	80885c4 <_ZN7FatFile13addDirClusterEv+0x6c>
    if (!m_vol->writeBlock(block + i, pc->data)) {
 80885b0:	6803      	ldr	r3, [r0, #0]
 80885b2:	4642      	mov	r2, r8
 80885b4:	685b      	ldr	r3, [r3, #4]
 80885b6:	19e9      	adds	r1, r5, r7
 80885b8:	4798      	blx	r3
 80885ba:	2800      	cmp	r0, #0
 80885bc:	d0d3      	beq.n	8088566 <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 80885be:	3501      	adds	r5, #1
 80885c0:	b2ed      	uxtb	r5, r5
 80885c2:	e7f1      	b.n	80885a8 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
 80885c4:	6963      	ldr	r3, [r4, #20]
 80885c6:	eb03 2342 	add.w	r3, r3, r2, lsl #9
 80885ca:	6163      	str	r3, [r4, #20]
  return true;
 80885cc:	e7cc      	b.n	8088568 <_ZN7FatFile13addDirClusterEv+0x10>
 80885ce:	bf00      	nop
 80885d0:	001ffe00 	.word	0x001ffe00

080885d4 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
 80885d4:	b510      	push	{r4, lr}
 80885d6:	4604      	mov	r4, r0
 80885d8:	6880      	ldr	r0, [r0, #8]
 80885da:	460a      	mov	r2, r1
 80885dc:	3028      	adds	r0, #40	; 0x28
 80885de:	69a1      	ldr	r1, [r4, #24]
 80885e0:	f000 fb2b 	bl	8088c3a <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
 80885e4:	b120      	cbz	r0, 80885f0 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
 80885e6:	88a3      	ldrh	r3, [r4, #4]
 80885e8:	f003 030f 	and.w	r3, r3, #15
 80885ec:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
 80885f0:	bd10      	pop	{r4, pc}

080885f2 <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 80885f2:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
 80885f4:	7804      	ldrb	r4, [r0, #0]
bool FatFile::openRoot(FatVolume* vol) {
 80885f6:	4605      	mov	r5, r0
 80885f8:	460e      	mov	r6, r1
  if (isOpen()) {
 80885fa:	b94c      	cbnz	r4, 8088610 <_ZN7FatFile8openRootEP9FatVolume+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
 80885fc:	2224      	movs	r2, #36	; 0x24
 80885fe:	4621      	mov	r1, r4
 8088600:	f006 fa2e 	bl	808ea60 <memset>

  m_vol = vol;
 8088604:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
 8088606:	79f3      	ldrb	r3, [r6, #7]
 8088608:	2b10      	cmp	r3, #16
 808860a:	d003      	beq.n	8088614 <_ZN7FatFile8openRootEP9FatVolume+0x22>
 808860c:	2b20      	cmp	r3, #32
 808860e:	d007      	beq.n	8088620 <_ZN7FatFile8openRootEP9FatVolume+0x2e>
  // read only
  m_flags = O_READ;
  return true;

fail:
  return false;
 8088610:	2000      	movs	r0, #0
 8088612:	e004      	b.n	808861e <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    m_attr = FILE_ATTR_ROOT_FIXED;
 8088614:	2320      	movs	r3, #32
  m_flags = O_READ;
 8088616:	2401      	movs	r4, #1
  return true;
 8088618:	4620      	mov	r0, r4
    m_attr = FILE_ATTR_ROOT32;
 808861a:	702b      	strb	r3, [r5, #0]
  m_flags = O_READ;
 808861c:	70ac      	strb	r4, [r5, #2]
}
 808861e:	bd70      	pop	{r4, r5, r6, pc}
    m_attr = FILE_ATTR_ROOT32;
 8088620:	2340      	movs	r3, #64	; 0x40
 8088622:	e7f8      	b.n	8088616 <_ZN7FatFile8openRootEP9FatVolume+0x24>

08088624 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
 8088624:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & O_READ)) {
 8088628:	7803      	ldrb	r3, [r0, #0]
int FatFile::read(void* buf, size_t nbyte) {
 808862a:	4604      	mov	r4, r0
 808862c:	4688      	mov	r8, r1
 808862e:	4615      	mov	r5, r2
  if (!isOpen() || !(m_flags & O_READ)) {
 8088630:	2b00      	cmp	r3, #0
 8088632:	d05d      	beq.n	80886f0 <_ZN7FatFile4readEPvj+0xcc>
 8088634:	7882      	ldrb	r2, [r0, #2]
 8088636:	07d1      	lsls	r1, r2, #31
 8088638:	d55a      	bpl.n	80886f0 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
 808863a:	071a      	lsls	r2, r3, #28
 808863c:	d52d      	bpl.n	808869a <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
 808863e:	69c3      	ldr	r3, [r0, #28]
 8088640:	6942      	ldr	r2, [r0, #20]
 8088642:	1a9b      	subs	r3, r3, r2
 8088644:	429d      	cmp	r5, r3
 8088646:	bf28      	it	cs
 8088648:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
 808864a:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
 808864c:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8088650:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
 8088654:	2e00      	cmp	r6, #0
 8088656:	f000 8090 	beq.w	808877a <_ZN7FatFile4readEPvj+0x156>
    if (isRootFixed()) {
 808865a:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
 808865c:	6963      	ldr	r3, [r4, #20]
    if (isRootFixed()) {
 808865e:	0697      	lsls	r7, r2, #26
 8088660:	68a0      	ldr	r0, [r4, #8]
    offset = m_curPosition & 0X1FF;  // offset in block
 8088662:	f3c3 0a08 	ubfx	sl, r3, #0, #9
    return m_attr & FILE_ATTR_ROOT_FIXED;
 8088666:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
 808866a:	d51f      	bpl.n	80886ac <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
 808866c:	6a00      	ldr	r0, [r0, #32]
 808866e:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
 8088670:	68a0      	ldr	r0, [r4, #8]
 8088672:	f1ba 0f00 	cmp.w	sl, #0
 8088676:	d142      	bne.n	80886fe <_ZN7FatFile4readEPvj+0xda>
 8088678:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 808867c:	d33f      	bcc.n	80886fe <_ZN7FatFile4readEPvj+0xda>
    return m_cache.lbn();
 808867e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8088680:	4291      	cmp	r1, r2
 8088682:	d03c      	beq.n	80886fe <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
 8088684:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8088688:	d252      	bcs.n	8088730 <_ZN7FatFile4readEPvj+0x10c>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
 808868a:	6803      	ldr	r3, [r0, #0]
 808868c:	4642      	mov	r2, r8
 808868e:	681b      	ldr	r3, [r3, #0]
 8088690:	4798      	blx	r3
 8088692:	b368      	cbz	r0, 80886f0 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
 8088694:	f44f 7700 	mov.w	r7, #512	; 0x200
 8088698:	e044      	b.n	8088724 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
 808869a:	069b      	lsls	r3, r3, #26
 808869c:	d5d5      	bpl.n	808864a <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
 808869e:	6883      	ldr	r3, [r0, #8]
 80886a0:	891a      	ldrh	r2, [r3, #8]
 80886a2:	6943      	ldr	r3, [r0, #20]
 80886a4:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
 80886a8:	b29b      	uxth	r3, r3
 80886aa:	e7cb      	b.n	8088644 <_ZN7FatFile4readEPvj+0x20>
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 80886ac:	f890 9005 	ldrb.w	r9, [r0, #5]
 80886b0:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
 80886b4:	f1ba 0f00 	cmp.w	sl, #0
 80886b8:	d108      	bne.n	80886cc <_ZN7FatFile4readEPvj+0xa8>
 80886ba:	f1b9 0f00 	cmp.w	r9, #0
 80886be:	d105      	bne.n	80886cc <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
 80886c0:	b95b      	cbnz	r3, 80886da <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 80886c2:	0653      	lsls	r3, r2, #25
 80886c4:	bf4c      	ite	mi
 80886c6:	6a03      	ldrmi	r3, [r0, #32]
 80886c8:	6a23      	ldrpl	r3, [r4, #32]
 80886ca:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 80886cc:	6921      	ldr	r1, [r4, #16]
 80886ce:	68a0      	ldr	r0, [r4, #8]
 80886d0:	f000 fad6 	bl	8088c80 <_ZNK9FatVolume17clusterStartBlockEm>
 80886d4:	eb09 0100 	add.w	r1, r9, r0
 80886d8:	e7ca      	b.n	8088670 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 80886da:	465a      	mov	r2, fp
 80886dc:	6921      	ldr	r1, [r4, #16]
 80886de:	f000 fad5 	bl	8088c8c <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
 80886e2:	2800      	cmp	r0, #0
 80886e4:	db04      	blt.n	80886f0 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
 80886e6:	d1f1      	bne.n	80886cc <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
 80886e8:	7823      	ldrb	r3, [r4, #0]
 80886ea:	f013 0f70 	tst.w	r3, #112	; 0x70
 80886ee:	d144      	bne.n	808877a <_ZN7FatFile4readEPvj+0x156>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 80886f0:	7863      	ldrb	r3, [r4, #1]
  return -1;
 80886f2:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
 80886f6:	f043 0302 	orr.w	r3, r3, #2
 80886fa:	7063      	strb	r3, [r4, #1]
  return -1;
 80886fc:	e03e      	b.n	808877c <_ZN7FatFile4readEPvj+0x158>
      n = 512 - offset;
 80886fe:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
 8088702:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
 8088704:	f04f 0200 	mov.w	r2, #0
 8088708:	f100 0028 	add.w	r0, r0, #40	; 0x28
 808870c:	bf28      	it	cs
 808870e:	4637      	movcs	r7, r6
 8088710:	f000 fa93 	bl	8088c3a <_ZN8FatCache4readEmh>
      if (!pc) {
 8088714:	2800      	cmp	r0, #0
 8088716:	d0eb      	beq.n	80886f0 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
 8088718:	eb00 010a 	add.w	r1, r0, sl
 808871c:	463a      	mov	r2, r7
 808871e:	4640      	mov	r0, r8
 8088720:	f006 f990 	bl	808ea44 <memcpy>
    m_curPosition += n;
 8088724:	6963      	ldr	r3, [r4, #20]
    dst += n;
 8088726:	44b8      	add	r8, r7
    m_curPosition += n;
 8088728:	443b      	add	r3, r7
 808872a:	6163      	str	r3, [r4, #20]
    toRead -= n;
 808872c:	1bf6      	subs	r6, r6, r7
  while (toRead) {
 808872e:	e791      	b.n	8088654 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
 8088730:	7827      	ldrb	r7, [r4, #0]
      uint8_t nb = toRead >> 9;
 8088732:	f3c6 2347 	ubfx	r3, r6, #9, #8
      if (!isRootFixed()) {
 8088736:	06bf      	lsls	r7, r7, #26
 8088738:	d406      	bmi.n	8088748 <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
 808873a:	7907      	ldrb	r7, [r0, #4]
 808873c:	eba7 0709 	sub.w	r7, r7, r9
 8088740:	b2ff      	uxtb	r7, r7
 8088742:	42bb      	cmp	r3, r7
 8088744:	bf28      	it	cs
 8088746:	463b      	movcs	r3, r7
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8088748:	4291      	cmp	r1, r2
      n = 512*nb;
 808874a:	ea4f 2743 	mov.w	r7, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
 808874e:	d208      	bcs.n	8088762 <_ZN7FatFile4readEPvj+0x13e>
      if (!m_vol->readBlocks(block, dst, nb)) {
 8088750:	68a0      	ldr	r0, [r4, #8]
 8088752:	6802      	ldr	r2, [r0, #0]
 8088754:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8088758:	4642      	mov	r2, r8
 808875a:	47d0      	blx	sl
 808875c:	2800      	cmp	r0, #0
 808875e:	d1e1      	bne.n	8088724 <_ZN7FatFile4readEPvj+0x100>
 8088760:	e7c6      	b.n	80886f0 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8088762:	441a      	add	r2, r3
 8088764:	428a      	cmp	r2, r1
 8088766:	d9f3      	bls.n	8088750 <_ZN7FatFile4readEPvj+0x12c>
 8088768:	e9cd 1300 	strd	r1, r3, [sp]
        if (!m_vol->cacheSync()) {
 808876c:	f7ff f868 	bl	8087840 <_ZN9FatVolume9cacheSyncEv>
 8088770:	e9dd 1300 	ldrd	r1, r3, [sp]
 8088774:	2800      	cmp	r0, #0
 8088776:	d1eb      	bne.n	8088750 <_ZN7FatFile4readEPvj+0x12c>
 8088778:	e7ba      	b.n	80886f0 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
 808877a:	1ba8      	subs	r0, r5, r6
}
 808877c:	b003      	add	sp, #12
 808877e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08088782 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
 8088782:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
 8088784:	2201      	movs	r2, #1
  pos->cluster = m_curCluster;
 8088786:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 808878a:	f10d 0107 	add.w	r1, sp, #7
int FatFile::peek() {
 808878e:	4604      	mov	r4, r0
 8088790:	f7ff ff48 	bl	8088624 <_ZN7FatFile4readEPvj>
 8088794:	2801      	cmp	r0, #1
 8088796:	bf12      	itee	ne
 8088798:	f04f 30ff 	movne.w	r0, #4294967295
 808879c:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
 80887a0:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
 80887a4:	b002      	add	sp, #8
 80887a6:	bd70      	pop	{r4, r5, r6, pc}

080887a8 <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
 80887a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
 80887aa:	6943      	ldr	r3, [r0, #20]
dir_t* FatFile::readDirCache(bool skipReadOk) {
 80887ac:	4604      	mov	r4, r0
  if (i == 0 || !skipReadOk) {
 80887ae:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
  uint8_t i = (m_curPosition >> 5) & 0XF;
 80887b2:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
 80887b6:	d000      	beq.n	80887ba <_ZN7FatFile12readDirCacheEb+0x12>
 80887b8:	b999      	cbnz	r1, 80887e2 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
 80887ba:	2201      	movs	r2, #1
 80887bc:	4620      	mov	r0, r4
 80887be:	f10d 0107 	add.w	r1, sp, #7
 80887c2:	f7ff ff2f 	bl	8088624 <_ZN7FatFile4readEPvj>
    if  (n != 1) {
 80887c6:	b240      	sxtb	r0, r0
 80887c8:	2801      	cmp	r0, #1
 80887ca:	d002      	beq.n	80887d2 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
 80887cc:	2000      	movs	r0, #0
}
 80887ce:	b003      	add	sp, #12
 80887d0:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
 80887d2:	6963      	ldr	r3, [r4, #20]
 80887d4:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
 80887d6:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
 80887d8:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
 80887da:	3034      	adds	r0, #52	; 0x34
 80887dc:	eb00 1045 	add.w	r0, r0, r5, lsl #5
 80887e0:	e7f5      	b.n	80887ce <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
 80887e2:	3320      	adds	r3, #32
 80887e4:	e7f7      	b.n	80887d6 <_ZN7FatFile12readDirCacheEb+0x2e>

080887e6 <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
 80887e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isOpen()) {
 80887ea:	7802      	ldrb	r2, [r0, #0]
bool FatFile::seekSet(uint32_t pos) {
 80887ec:	4604      	mov	r4, r0
 80887ee:	460d      	mov	r5, r1
  uint32_t tmp = m_curCluster;
 80887f0:	6907      	ldr	r7, [r0, #16]
  if (!isOpen()) {
 80887f2:	b162      	cbz	r2, 808880e <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
 80887f4:	6940      	ldr	r0, [r0, #20]
 80887f6:	4288      	cmp	r0, r1
 80887f8:	d002      	beq.n	8088800 <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
 80887fa:	b919      	cbnz	r1, 8088804 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
 80887fc:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
 80887fe:	6165      	str	r5, [r4, #20]
    return true;
 8088800:	2001      	movs	r0, #1
 8088802:	e006      	b.n	8088812 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
 8088804:	0716      	lsls	r6, r2, #28
 8088806:	d506      	bpl.n	8088816 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
 8088808:	69e3      	ldr	r3, [r4, #28]
 808880a:	428b      	cmp	r3, r1
 808880c:	d20b      	bcs.n	8088826 <_ZN7FatFile7seekSetEm+0x40>
  return false;
 808880e:	2000      	movs	r0, #0
  m_curCluster = tmp;
 8088810:	6127      	str	r7, [r4, #16]
}
 8088812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
 8088816:	0691      	lsls	r1, r2, #26
 8088818:	d505      	bpl.n	8088826 <_ZN7FatFile7seekSetEm+0x40>
    if (pos <= 32*m_vol->rootDirEntryCount()) {
 808881a:	68a3      	ldr	r3, [r4, #8]
 808881c:	891b      	ldrh	r3, [r3, #8]
 808881e:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
 8088822:	d9ec      	bls.n	80887fe <_ZN7FatFile7seekSetEm+0x18>
 8088824:	e7f3      	b.n	808880e <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 8088826:	f8d4 c008 	ldr.w	ip, [r4, #8]
 808882a:	1e43      	subs	r3, r0, #1
 808882c:	f89c 6006 	ldrb.w	r6, [ip, #6]
 8088830:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 8088834:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 8088836:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 8088838:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
 808883a:	42b3      	cmp	r3, r6
 808883c:	d800      	bhi.n	8088840 <_ZN7FatFile7seekSetEm+0x5a>
 808883e:	b998      	cbnz	r0, 8088868 <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 8088840:	0653      	lsls	r3, r2, #25
 8088842:	bf4c      	ite	mi
 8088844:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
 8088848:	6a23      	ldrpl	r3, [r4, #32]
 808884a:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 808884c:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
 8088850:	2e00      	cmp	r6, #0
 8088852:	d0d4      	beq.n	80887fe <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 8088854:	4642      	mov	r2, r8
 8088856:	6921      	ldr	r1, [r4, #16]
 8088858:	68a0      	ldr	r0, [r4, #8]
 808885a:	f000 fa17 	bl	8088c8c <_ZN9FatVolume6fatGetEmPm>
 808885e:	2800      	cmp	r0, #0
 8088860:	f106 36ff 	add.w	r6, r6, #4294967295
 8088864:	dcf4      	bgt.n	8088850 <_ZN7FatFile7seekSetEm+0x6a>
 8088866:	e7d2      	b.n	808880e <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
 8088868:	1af6      	subs	r6, r6, r3
 808886a:	e7ef      	b.n	808884c <_ZN7FatFile7seekSetEm+0x66>

0808886c <_ZN7FatFile15openCachedEntryEPS_thh>:
                              uint8_t oflag, uint8_t lfnOrd) {
 808886c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808886e:	460f      	mov	r7, r1
 8088870:	4604      	mov	r4, r0
 8088872:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
 8088874:	2100      	movs	r1, #0
 8088876:	2224      	movs	r2, #36	; 0x24
                              uint8_t oflag, uint8_t lfnOrd) {
 8088878:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
 808887a:	f006 f8f1 	bl	808ea60 <memset>
  m_vol = dirFile->m_vol;
 808887e:	68b8      	ldr	r0, [r7, #8]
  m_dirIndex = dirIndex;
 8088880:	80a5      	strh	r5, [r4, #4]
  m_vol = dirFile->m_vol;
 8088882:	60a0      	str	r0, [r4, #8]
  m_dirCluster = dirFile->m_firstCluster;
 8088884:	6a3b      	ldr	r3, [r7, #32]
 8088886:	f005 050f 	and.w	r5, r5, #15
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 808888a:	f100 0234 	add.w	r2, r0, #52	; 0x34
  m_dirCluster = dirFile->m_firstCluster;
 808888e:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 8088890:	016b      	lsls	r3, r5, #5
 8088892:	eb02 1545 	add.w	r5, r2, r5, lsl #5
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
 8088896:	7aea      	ldrb	r2, [r5, #11]
 8088898:	0717      	lsls	r7, r2, #28
 808889a:	d502      	bpl.n	80888a2 <_ZN7FatFile15openCachedEntryEPS_thh+0x36>
  m_attr = FILE_ATTR_CLOSED;
 808889c:	2000      	movs	r0, #0
 808889e:	7020      	strb	r0, [r4, #0]
}
 80888a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  m_attr = dir->attributes & FILE_ATTR_COPY;
 80888a2:	18c2      	adds	r2, r0, r3
 80888a4:	f892 103f 	ldrb.w	r1, [r2, #63]	; 0x3f
 80888a8:	f001 0117 	and.w	r1, r1, #23
 80888ac:	7021      	strb	r1, [r4, #0]
  if (DIR_IS_FILE(dir)) {
 80888ae:	7aea      	ldrb	r2, [r5, #11]
 80888b0:	f012 0f18 	tst.w	r2, #24
    m_attr |= FILE_ATTR_FILE;
 80888b4:	bf08      	it	eq
 80888b6:	f041 0108 	orreq.w	r1, r1, #8
  m_lfnOrd = lfnOrd;
 80888ba:	f89d 2018 	ldrb.w	r2, [sp, #24]
    m_attr |= FILE_ATTR_FILE;
 80888be:	bf08      	it	eq
 80888c0:	7021      	strbeq	r1, [r4, #0]
  if (oflag & (O_WRITE | O_TRUNC | O_AT_END)) {
 80888c2:	f016 0f32 	tst.w	r6, #50	; 0x32
  m_lfnOrd = lfnOrd;
 80888c6:	70e2      	strb	r2, [r4, #3]
  if (oflag & (O_WRITE | O_TRUNC | O_AT_END)) {
 80888c8:	d004      	beq.n	80888d4 <_ZN7FatFile15openCachedEntryEPS_thh+0x68>
    if (isSubDir() || isReadOnly()) {
 80888ca:	7822      	ldrb	r2, [r4, #0]
 80888cc:	06d5      	lsls	r5, r2, #27
 80888ce:	d4e5      	bmi.n	808889c <_ZN7FatFile15openCachedEntryEPS_thh+0x30>
 80888d0:	07d1      	lsls	r1, r2, #31
 80888d2:	d4e3      	bmi.n	808889c <_ZN7FatFile15openCachedEntryEPS_thh+0x30>
  m_flags = oflag & F_OFLAG;
 80888d4:	f006 020f 	and.w	r2, r6, #15
 80888d8:	70a2      	strb	r2, [r4, #2]
    return m_cache.lbn();
 80888da:	6b02      	ldr	r2, [r0, #48]	; 0x30
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 80888dc:	4403      	add	r3, r0
  m_dirBlock = m_vol->cacheBlockNumber();
 80888de:	61a2      	str	r2, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 80888e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
                 | dir->firstClusterLow;
 80888e4:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 80888e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
 80888ec:	06f2      	lsls	r2, r6, #27
 80888ee:	d50d      	bpl.n	808890c <_ZN7FatFile15openCachedEntryEPS_thh+0xa0>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 80888f0:	b939      	cbnz	r1, 8088902 <_ZN7FatFile15openCachedEntryEPS_thh+0x96>
    m_flags |= F_FILE_DIR_DIRTY;
 80888f2:	78a3      	ldrb	r3, [r4, #2]
 80888f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80888f8:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 80888fa:	06b3      	lsls	r3, r6, #26
 80888fc:	d40a      	bmi.n	8088914 <_ZN7FatFile15openCachedEntryEPS_thh+0xa8>
  return true;
 80888fe:	2001      	movs	r0, #1
 8088900:	e7ce      	b.n	80888a0 <_ZN7FatFile15openCachedEntryEPS_thh+0x34>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 8088902:	f000 fa58 	bl	8088db6 <_ZN9FatVolume9freeChainEm>
 8088906:	2800      	cmp	r0, #0
 8088908:	d1f3      	bne.n	80888f2 <_ZN7FatFile15openCachedEntryEPS_thh+0x86>
 808890a:	e7c7      	b.n	808889c <_ZN7FatFile15openCachedEntryEPS_thh+0x30>
    m_firstCluster = firstCluster;
 808890c:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
 808890e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8088910:	61e3      	str	r3, [r4, #28]
 8088912:	e7f2      	b.n	80888fa <_ZN7FatFile15openCachedEntryEPS_thh+0x8e>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 8088914:	4620      	mov	r0, r4
 8088916:	69e1      	ldr	r1, [r4, #28]
 8088918:	f7ff ff65 	bl	80887e6 <_ZN7FatFile7seekSetEm>
 808891c:	2800      	cmp	r0, #0
 808891e:	d1ee      	bne.n	80888fe <_ZN7FatFile15openCachedEntryEPS_thh+0x92>
 8088920:	e7bc      	b.n	808889c <_ZN7FatFile15openCachedEntryEPS_thh+0x30>
	...

08088924 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 8088924:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
 8088926:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
 8088928:	4604      	mov	r4, r0
  if (!isOpen()) {
 808892a:	b90b      	cbnz	r3, 8088930 <_ZN7FatFile4syncEv+0xc>
    return true;
 808892c:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
 808892e:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
 8088930:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8088934:	2b00      	cmp	r3, #0
 8088936:	da23      	bge.n	8088980 <_ZN7FatFile4syncEv+0x5c>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
 8088938:	2101      	movs	r1, #1
 808893a:	f7ff fe4b 	bl	80885d4 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 808893e:	4605      	mov	r5, r0
 8088940:	b928      	cbnz	r0, 808894e <_ZN7FatFile4syncEv+0x2a>
  m_error |= WRITE_ERROR;
 8088942:	7863      	ldrb	r3, [r4, #1]
  return false;
 8088944:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
 8088946:	f043 0301 	orr.w	r3, r3, #1
 808894a:	7063      	strb	r3, [r4, #1]
  return false;
 808894c:	e7ef      	b.n	808892e <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 808894e:	7803      	ldrb	r3, [r0, #0]
 8088950:	2be5      	cmp	r3, #229	; 0xe5
 8088952:	d0f6      	beq.n	8088942 <_ZN7FatFile4syncEv+0x1e>
    if (isFile()) {
 8088954:	7823      	ldrb	r3, [r4, #0]
 8088956:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
 8088958:	bf44      	itt	mi
 808895a:	69e3      	ldrmi	r3, [r4, #28]
 808895c:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
 808895e:	8c23      	ldrh	r3, [r4, #32]
 8088960:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
 8088962:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8088964:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
 8088966:	4b09      	ldr	r3, [pc, #36]	; (808898c <_ZN7FatFile4syncEv+0x68>)
 8088968:	681b      	ldr	r3, [r3, #0]
 808896a:	b12b      	cbz	r3, 8088978 <_ZN7FatFile4syncEv+0x54>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
 808896c:	f100 0116 	add.w	r1, r0, #22
 8088970:	3018      	adds	r0, #24
 8088972:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
 8088974:	8b2b      	ldrh	r3, [r5, #24]
 8088976:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
 8088978:	78a3      	ldrb	r3, [r4, #2]
 808897a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 808897e:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
 8088980:	68a0      	ldr	r0, [r4, #8]
 8088982:	f7fe ff5d 	bl	8087840 <_ZN9FatVolume9cacheSyncEv>
 8088986:	2800      	cmp	r0, #0
 8088988:	d0db      	beq.n	8088942 <_ZN7FatFile4syncEv+0x1e>
 808898a:	e7cf      	b.n	808892c <_ZN7FatFile4syncEv+0x8>
 808898c:	20000d58 	.word	0x20000d58

08088990 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
 8088990:	b510      	push	{r4, lr}
 8088992:	4604      	mov	r4, r0
  bool rtn = sync();
 8088994:	f7ff ffc6 	bl	8088924 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
 8088998:	2300      	movs	r3, #0
 808899a:	7023      	strb	r3, [r4, #0]
}
 808899c:	bd10      	pop	{r4, pc}

0808899e <_ZN7FatFile4openEPS_PKch>:
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
 808899e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80889a0:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 80889a2:	2300      	movs	r3, #0
 80889a4:	b093      	sub	sp, #76	; 0x4c
 80889a6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
 80889aa:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
 80889ac:	4606      	mov	r6, r0
 80889ae:	460c      	mov	r4, r1
 80889b0:	9201      	str	r2, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
 80889b2:	b113      	cbz	r3, 80889ba <_ZN7FatFile4openEPS_PKch+0x1c>
  return false;
 80889b4:	2000      	movs	r0, #0
}
 80889b6:	b013      	add	sp, #76	; 0x4c
 80889b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
 80889ba:	780b      	ldrb	r3, [r1, #0]
 80889bc:	f013 0f70 	tst.w	r3, #112	; 0x70
 80889c0:	d0f8      	beq.n	80889b4 <_ZN7FatFile4openEPS_PKch+0x16>
  if (isDirSeparator(*path)) {
 80889c2:	7813      	ldrb	r3, [r2, #0]
 80889c4:	2b2f      	cmp	r3, #47	; 0x2f
 80889c6:	d112      	bne.n	80889ee <_ZN7FatFile4openEPS_PKch+0x50>
    while (isDirSeparator(*path)) {
 80889c8:	9a01      	ldr	r2, [sp, #4]
 80889ca:	7813      	ldrb	r3, [r2, #0]
 80889cc:	2b2f      	cmp	r3, #47	; 0x2f
 80889ce:	d102      	bne.n	80889d6 <_ZN7FatFile4openEPS_PKch+0x38>
      path++;
 80889d0:	3201      	adds	r2, #1
 80889d2:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
 80889d4:	e7f8      	b.n	80889c8 <_ZN7FatFile4openEPS_PKch+0x2a>
    if (*path == 0) {
 80889d6:	68a1      	ldr	r1, [r4, #8]
 80889d8:	b91b      	cbnz	r3, 80889e2 <_ZN7FatFile4openEPS_PKch+0x44>
      return openRoot(dirFile->m_vol);
 80889da:	4630      	mov	r0, r6
 80889dc:	f7ff fe09 	bl	80885f2 <_ZN7FatFile8openRootEP9FatVolume>
 80889e0:	e7e9      	b.n	80889b6 <_ZN7FatFile4openEPS_PKch+0x18>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
 80889e2:	a809      	add	r0, sp, #36	; 0x24
 80889e4:	f7ff fe05 	bl	80885f2 <_ZN7FatFile8openRootEP9FatVolume>
 80889e8:	2800      	cmp	r0, #0
 80889ea:	d0e3      	beq.n	80889b4 <_ZN7FatFile4openEPS_PKch+0x16>
    dirFile = &tmpDir;
 80889ec:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
 80889ee:	9801      	ldr	r0, [sp, #4]
 80889f0:	aa01      	add	r2, sp, #4
 80889f2:	a903      	add	r1, sp, #12
 80889f4:	f7fe ff40 	bl	8087878 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
 80889f8:	2800      	cmp	r0, #0
 80889fa:	d0db      	beq.n	80889b4 <_ZN7FatFile4openEPS_PKch+0x16>
    if (*path == 0) {
 80889fc:	9b01      	ldr	r3, [sp, #4]
 80889fe:	781b      	ldrb	r3, [r3, #0]
 8088a00:	b19b      	cbz	r3, 8088a2a <_ZN7FatFile4openEPS_PKch+0x8c>
    if (!open(dirFile, &fname, O_READ)) {
 8088a02:	2301      	movs	r3, #1
 8088a04:	4621      	mov	r1, r4
 8088a06:	4630      	mov	r0, r6
 8088a08:	aa03      	add	r2, sp, #12
 8088a0a:	f7ff f869 	bl	8087ae0 <_ZN7FatFile4openEPS_P7fname_th>
 8088a0e:	2800      	cmp	r0, #0
 8088a10:	d0d0      	beq.n	80889b4 <_ZN7FatFile4openEPS_PKch+0x16>
    tmpDir = *this;
 8088a12:	4635      	mov	r5, r6
 8088a14:	ac09      	add	r4, sp, #36	; 0x24
 8088a16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8088a18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8088a1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8088a1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8088a1e:	682b      	ldr	r3, [r5, #0]
    close();
 8088a20:	4630      	mov	r0, r6
    tmpDir = *this;
 8088a22:	6023      	str	r3, [r4, #0]
    close();
 8088a24:	f7ff ffb4 	bl	8088990 <_ZN7FatFile5closeEv>
  while (1) {
 8088a28:	e7e0      	b.n	80889ec <_ZN7FatFile4openEPS_PKch+0x4e>
  return open(dirFile, &fname, oflag);
 8088a2a:	463b      	mov	r3, r7
 8088a2c:	4621      	mov	r1, r4
 8088a2e:	4630      	mov	r0, r6
 8088a30:	aa03      	add	r2, sp, #12
 8088a32:	f7ff f855 	bl	8087ae0 <_ZN7FatFile4openEPS_P7fname_th>
 8088a36:	e7be      	b.n	80889b6 <_ZN7FatFile4openEPS_PKch+0x18>

08088a38 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 8088a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 8088a3c:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
 8088a3e:	4604      	mov	r4, r0
  if (!isFile() || !(m_flags & O_WRITE)) {
 8088a40:	071d      	lsls	r5, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
 8088a42:	4689      	mov	r9, r1
 8088a44:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & O_WRITE)) {
 8088a46:	d55b      	bpl.n	8088b00 <_ZN7FatFile5writeEPKvj+0xc8>
 8088a48:	7883      	ldrb	r3, [r0, #2]
 8088a4a:	0799      	lsls	r1, r3, #30
 8088a4c:	d558      	bpl.n	8088b00 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & O_APPEND)) {
 8088a4e:	075a      	lsls	r2, r3, #29
 8088a50:	d451      	bmi.n	8088af6 <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
 8088a52:	6963      	ldr	r3, [r4, #20]
 8088a54:	43db      	mvns	r3, r3
 8088a56:	42bb      	cmp	r3, r7
 8088a58:	d352      	bcc.n	8088b00 <_ZN7FatFile5writeEPKvj+0xc8>
 8088a5a:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8088a5c:	f104 0a10 	add.w	sl, r4, #16
  while (nToWrite) {
 8088a60:	6963      	ldr	r3, [r4, #20]
 8088a62:	f1b8 0f00 	cmp.w	r8, #0
 8088a66:	f000 808f 	beq.w	8088b88 <_ZN7FatFile5writeEPKvj+0x150>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
 8088a6a:	68a0      	ldr	r0, [r4, #8]
    uint16_t blockOffset = m_curPosition & 0X1FF;
 8088a6c:	f3c3 0508 	ubfx	r5, r3, #0, #9
    return (position >> 9) & m_clusterBlockMask;
 8088a70:	7946      	ldrb	r6, [r0, #5]
    if (blockOfCluster == 0 && blockOffset == 0) {
 8088a72:	ea16 2653 	ands.w	r6, r6, r3, lsr #9
 8088a76:	d10e      	bne.n	8088a96 <_ZN7FatFile5writeEPKvj+0x5e>
 8088a78:	b96d      	cbnz	r5, 8088a96 <_ZN7FatFile5writeEPKvj+0x5e>
 8088a7a:	6921      	ldr	r1, [r4, #16]
      if (m_curCluster != 0) {
 8088a7c:	2900      	cmp	r1, #0
 8088a7e:	d046      	beq.n	8088b0e <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8088a80:	4652      	mov	r2, sl
 8088a82:	f000 f903 	bl	8088c8c <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
 8088a86:	2800      	cmp	r0, #0
 8088a88:	db3a      	blt.n	8088b00 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
 8088a8a:	d104      	bne.n	8088a96 <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
 8088a8c:	4620      	mov	r0, r4
 8088a8e:	f7ff fd59 	bl	8088544 <_ZN7FatFile10addClusterEv>
 8088a92:	2800      	cmp	r0, #0
 8088a94:	d034      	beq.n	8088b00 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 8088a96:	6921      	ldr	r1, [r4, #16]
 8088a98:	68a0      	ldr	r0, [r4, #8]
 8088a9a:	f000 f8f1 	bl	8088c80 <_ZNK9FatVolume17clusterStartBlockEm>
 8088a9e:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
 8088aa0:	68a0      	ldr	r0, [r4, #8]
 8088aa2:	b915      	cbnz	r5, 8088aaa <_ZN7FatFile5writeEPKvj+0x72>
 8088aa4:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
 8088aa8:	d23f      	bcs.n	8088b2a <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
 8088aaa:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
 8088aae:	4546      	cmp	r6, r8
 8088ab0:	bf28      	it	cs
 8088ab2:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
 8088ab4:	2d00      	cmp	r5, #0
 8088ab6:	d136      	bne.n	8088b26 <_ZN7FatFile5writeEPKvj+0xee>
 8088ab8:	6962      	ldr	r2, [r4, #20]
 8088aba:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
 8088abc:	429a      	cmp	r2, r3
 8088abe:	bf34      	ite	cc
 8088ac0:	2201      	movcc	r2, #1
 8088ac2:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
 8088ac4:	3028      	adds	r0, #40	; 0x28
 8088ac6:	f000 f8b8 	bl	8088c3a <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
 8088aca:	b1c8      	cbz	r0, 8088b00 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 8088acc:	4428      	add	r0, r5
 8088ace:	4632      	mov	r2, r6
 8088ad0:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
 8088ad2:	4435      	add	r5, r6
      memcpy(dst, src, n);
 8088ad4:	f005 ffb6 	bl	808ea44 <memcpy>
      if (512 == (n + blockOffset)) {
 8088ad8:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8088adc:	d104      	bne.n	8088ae8 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
 8088ade:	68a0      	ldr	r0, [r4, #8]
 8088ae0:	3028      	adds	r0, #40	; 0x28
 8088ae2:	f000 f883 	bl	8088bec <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nBlock)) {
 8088ae6:	b158      	cbz	r0, 8088b00 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 8088ae8:	6963      	ldr	r3, [r4, #20]
    src += n;
 8088aea:	44b1      	add	r9, r6
    m_curPosition += n;
 8088aec:	4433      	add	r3, r6
 8088aee:	6163      	str	r3, [r4, #20]
    nToWrite -= n;
 8088af0:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
 8088af4:	e7b4      	b.n	8088a60 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
 8088af6:	69c1      	ldr	r1, [r0, #28]
 8088af8:	f7ff fe75 	bl	80887e6 <_ZN7FatFile7seekSetEm>
 8088afc:	2800      	cmp	r0, #0
 8088afe:	d1a8      	bne.n	8088a52 <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 8088b00:	7863      	ldrb	r3, [r4, #1]
  return -1;
 8088b02:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= WRITE_ERROR;
 8088b06:	f043 0301 	orr.w	r3, r3, #1
 8088b0a:	7063      	strb	r3, [r4, #1]
  return -1;
 8088b0c:	e04d      	b.n	8088baa <_ZN7FatFile5writeEPKvj+0x172>
        if (m_firstCluster == 0) {
 8088b0e:	6a23      	ldr	r3, [r4, #32]
 8088b10:	b93b      	cbnz	r3, 8088b22 <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
 8088b12:	4620      	mov	r0, r4
 8088b14:	f7ff fd16 	bl	8088544 <_ZN7FatFile10addClusterEv>
 8088b18:	2800      	cmp	r0, #0
 8088b1a:	d0f1      	beq.n	8088b00 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
 8088b1c:	6923      	ldr	r3, [r4, #16]
 8088b1e:	6223      	str	r3, [r4, #32]
 8088b20:	e7b9      	b.n	8088a96 <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
 8088b22:	6123      	str	r3, [r4, #16]
 8088b24:	e7b7      	b.n	8088a96 <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
 8088b26:	2201      	movs	r2, #1
 8088b28:	e7cc      	b.n	8088ac4 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
 8088b2a:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
 8088b2e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8088b30:	d319      	bcc.n	8088b66 <_ZN7FatFile5writeEPKvj+0x12e>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
 8088b32:	7903      	ldrb	r3, [r0, #4]
      uint8_t nBlock = nToWrite >> 9;
 8088b34:	f3c8 2c47 	ubfx	ip, r8, #9, #8
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
 8088b38:	1b9b      	subs	r3, r3, r6
 8088b3a:	b2db      	uxtb	r3, r3
 8088b3c:	4563      	cmp	r3, ip
 8088b3e:	bf28      	it	cs
 8088b40:	4663      	movcs	r3, ip
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
 8088b42:	4291      	cmp	r1, r2
      n = 512*nBlock;
 8088b44:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
 8088b48:	d307      	bcc.n	8088b5a <_ZN7FatFile5writeEPKvj+0x122>
 8088b4a:	441a      	add	r2, r3
 8088b4c:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
 8088b4e:	bf82      	ittt	hi
 8088b50:	f04f 32ff 	movhi.w	r2, #4294967295
    m_status = 0;
 8088b54:	f880 5028 	strbhi.w	r5, [r0, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 8088b58:	6302      	strhi	r2, [r0, #48]	; 0x30
      if (!m_vol->writeBlocks(block, src, nBlock)) {
 8088b5a:	68a0      	ldr	r0, [r4, #8]
 8088b5c:	6802      	ldr	r2, [r0, #0]
 8088b5e:	68d5      	ldr	r5, [r2, #12]
 8088b60:	464a      	mov	r2, r9
 8088b62:	47a8      	blx	r5
 8088b64:	e7bf      	b.n	8088ae6 <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
 8088b66:	4291      	cmp	r1, r2
 8088b68:	bf02      	ittt	eq
 8088b6a:	f04f 33ff 	moveq.w	r3, #4294967295
    m_status = 0;
 8088b6e:	f880 5028 	strbeq.w	r5, [r0, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 8088b72:	6303      	streq	r3, [r0, #48]	; 0x30
      if (!m_vol->writeBlock(block, src)) {
 8088b74:	68a0      	ldr	r0, [r4, #8]
 8088b76:	464a      	mov	r2, r9
 8088b78:	6803      	ldr	r3, [r0, #0]
 8088b7a:	685b      	ldr	r3, [r3, #4]
 8088b7c:	4798      	blx	r3
 8088b7e:	2800      	cmp	r0, #0
 8088b80:	d0be      	beq.n	8088b00 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
 8088b82:	f44f 7600 	mov.w	r6, #512	; 0x200
 8088b86:	e7af      	b.n	8088ae8 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
 8088b88:	69e1      	ldr	r1, [r4, #28]
 8088b8a:	78a2      	ldrb	r2, [r4, #2]
 8088b8c:	4299      	cmp	r1, r3
 8088b8e:	d204      	bcs.n	8088b9a <_ZN7FatFile5writeEPKvj+0x162>
    m_fileSize = m_curPosition;
 8088b90:	61e3      	str	r3, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
 8088b92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8088b96:	70a2      	strb	r2, [r4, #2]
 8088b98:	e003      	b.n	8088ba2 <_ZN7FatFile5writeEPKvj+0x16a>
  } else if (m_dateTime) {
 8088b9a:	4b08      	ldr	r3, [pc, #32]	; (8088bbc <_ZN7FatFile5writeEPKvj+0x184>)
 8088b9c:	681b      	ldr	r3, [r3, #0]
 8088b9e:	2b00      	cmp	r3, #0
 8088ba0:	d1f7      	bne.n	8088b92 <_ZN7FatFile5writeEPKvj+0x15a>
  if (m_flags & O_SYNC) {
 8088ba2:	78a3      	ldrb	r3, [r4, #2]
 8088ba4:	071b      	lsls	r3, r3, #28
 8088ba6:	d402      	bmi.n	8088bae <_ZN7FatFile5writeEPKvj+0x176>
  return nbyte;
 8088ba8:	4638      	mov	r0, r7
}
 8088baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
 8088bae:	4620      	mov	r0, r4
 8088bb0:	f7ff feb8 	bl	8088924 <_ZN7FatFile4syncEv>
 8088bb4:	2800      	cmp	r0, #0
 8088bb6:	d1f7      	bne.n	8088ba8 <_ZN7FatFile5writeEPKvj+0x170>
 8088bb8:	e7a2      	b.n	8088b00 <_ZN7FatFile5writeEPKvj+0xc8>
 8088bba:	bf00      	nop
 8088bbc:	20000d58 	.word	0x20000d58

08088bc0 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
 8088bc0:	f001 bcf0 	b.w	808a5a4 <HAL_Pin_Map>

08088bc4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 8088bc4:	b570      	push	{r4, r5, r6, lr}
 8088bc6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8088bc8:	460c      	mov	r4, r1
    }
 8088bca:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 8088bcc:	b149      	cbz	r1, 8088be2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8088bce:	f006 fd11 	bl	808f5f4 <strlen>
 8088bd2:	682b      	ldr	r3, [r5, #0]
 8088bd4:	4602      	mov	r2, r0
 8088bd6:	4621      	mov	r1, r4
 8088bd8:	4628      	mov	r0, r5
    }
 8088bda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 8088bde:	68db      	ldr	r3, [r3, #12]
 8088be0:	4718      	bx	r3
    }
 8088be2:	bd70      	pop	{r4, r5, r6, pc}

08088be4 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
 8088be4:	f001 bcde 	b.w	808a5a4 <HAL_Pin_Map>

08088be8 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
 8088be8:	f001 bcdc 	b.w	808a5a4 <HAL_Pin_Map>

08088bec <_ZN8FatCache4syncEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 8088bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
 8088bee:	7803      	ldrb	r3, [r0, #0]
bool FatCache::sync() {
 8088bf0:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
 8088bf2:	07da      	lsls	r2, r3, #31
 8088bf4:	d51f      	bpl.n	8088c36 <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
 8088bf6:	6840      	ldr	r0, [r0, #4]
 8088bf8:	f104 060c 	add.w	r6, r4, #12
 8088bfc:	6803      	ldr	r3, [r0, #0]
 8088bfe:	4632      	mov	r2, r6
 8088c00:	685b      	ldr	r3, [r3, #4]
 8088c02:	68a1      	ldr	r1, [r4, #8]
 8088c04:	4798      	blx	r3
 8088c06:	4605      	mov	r5, r0
 8088c08:	b910      	cbnz	r0, 8088c10 <_ZN8FatCache4syncEv+0x24>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
 8088c0a:	2500      	movs	r5, #0
}
 8088c0c:	4628      	mov	r0, r5
 8088c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
 8088c10:	7823      	ldrb	r3, [r4, #0]
 8088c12:	079b      	lsls	r3, r3, #30
 8088c14:	d404      	bmi.n	8088c20 <_ZN8FatCache4syncEv+0x34>
    m_status &= ~CACHE_STATUS_DIRTY;
 8088c16:	7823      	ldrb	r3, [r4, #0]
 8088c18:	f023 0301 	bic.w	r3, r3, #1
 8088c1c:	7023      	strb	r3, [r4, #0]
 8088c1e:	e7f5      	b.n	8088c0c <_ZN8FatCache4syncEv+0x20>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
 8088c20:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8088c24:	6901      	ldr	r1, [r0, #16]
      if (!m_vol->writeBlock(lbn, m_block.data)) {
 8088c26:	6803      	ldr	r3, [r0, #0]
 8088c28:	4632      	mov	r2, r6
 8088c2a:	685b      	ldr	r3, [r3, #4]
 8088c2c:	4439      	add	r1, r7
 8088c2e:	4798      	blx	r3
 8088c30:	2800      	cmp	r0, #0
 8088c32:	d1f0      	bne.n	8088c16 <_ZN8FatCache4syncEv+0x2a>
 8088c34:	e7e9      	b.n	8088c0a <_ZN8FatCache4syncEv+0x1e>
  return true;
 8088c36:	2501      	movs	r5, #1
 8088c38:	e7e8      	b.n	8088c0c <_ZN8FatCache4syncEv+0x20>

08088c3a <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8088c3a:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
 8088c3c:	6883      	ldr	r3, [r0, #8]
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8088c3e:	4604      	mov	r4, r0
  if (m_lbn != lbn) {
 8088c40:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8088c42:	460e      	mov	r6, r1
 8088c44:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
 8088c46:	d009      	beq.n	8088c5c <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
 8088c48:	f7ff ffd0 	bl	8088bec <_ZN8FatCache4syncEv>
 8088c4c:	b908      	cbnz	r0, 8088c52 <_ZN8FatCache4readEmh+0x18>
  return 0;
 8088c4e:	2000      	movs	r0, #0
}
 8088c50:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
 8088c52:	076b      	lsls	r3, r5, #29
 8088c54:	d50a      	bpl.n	8088c6c <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
 8088c56:	2300      	movs	r3, #0
    m_lbn = lbn;
 8088c58:	60a6      	str	r6, [r4, #8]
    m_status = 0;
 8088c5a:	7023      	strb	r3, [r4, #0]
  m_status |= option & CACHE_STATUS_MASK;
 8088c5c:	4620      	mov	r0, r4
 8088c5e:	7822      	ldrb	r2, [r4, #0]
 8088c60:	f005 0503 	and.w	r5, r5, #3
 8088c64:	4315      	orrs	r5, r2
 8088c66:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
 8088c6a:	e7f1      	b.n	8088c50 <_ZN8FatCache4readEmh+0x16>
      if (!m_vol->readBlock(lbn, m_block.data)) {
 8088c6c:	6860      	ldr	r0, [r4, #4]
 8088c6e:	4631      	mov	r1, r6
 8088c70:	6803      	ldr	r3, [r0, #0]
 8088c72:	f104 020c 	add.w	r2, r4, #12
 8088c76:	681b      	ldr	r3, [r3, #0]
 8088c78:	4798      	blx	r3
 8088c7a:	2800      	cmp	r0, #0
 8088c7c:	d1eb      	bne.n	8088c56 <_ZN8FatCache4readEmh+0x1c>
 8088c7e:	e7e6      	b.n	8088c4e <_ZN8FatCache4readEmh+0x14>

08088c80 <_ZNK9FatVolume17clusterStartBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
 8088c80:	7983      	ldrb	r3, [r0, #6]
 8088c82:	3902      	subs	r1, #2
 8088c84:	6940      	ldr	r0, [r0, #20]
 8088c86:	4099      	lsls	r1, r3
}
 8088c88:	4408      	add	r0, r1
 8088c8a:	4770      	bx	lr

08088c8c <_ZN9FatVolume6fatGetEmPm>:
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 8088c8c:	b570      	push	{r4, r5, r6, lr}
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8088c8e:	79c3      	ldrb	r3, [r0, #7]
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 8088c90:	4605      	mov	r5, r0
  if (m_fatType == 32) {
 8088c92:	2b20      	cmp	r3, #32
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 8088c94:	460c      	mov	r4, r1
 8088c96:	4616      	mov	r6, r2
  if (m_fatType == 32) {
 8088c98:	d118      	bne.n	8088ccc <_ZN9FatVolume6fatGetEmPm+0x40>
    lba = m_fatStartBlock + (cluster >> 7);
 8088c9a:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
 8088c9c:	2202      	movs	r2, #2
 8088c9e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8088ca2:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8088ca6:	f7ff ffc8 	bl	8088c3a <_ZN8FatCache4readEmh>
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8088caa:	b910      	cbnz	r0, 8088cb2 <_ZN9FatVolume6fatGetEmPm+0x26>
  }
  *value = next;
  return 1;

fail:
  return -1;
 8088cac:	f04f 30ff 	mov.w	r0, #4294967295
}
 8088cb0:	bd70      	pop	{r4, r5, r6, pc}
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
 8088cb2:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8088cb6:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 8088cba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
 8088cbe:	69ea      	ldr	r2, [r5, #28]
 8088cc0:	4293      	cmp	r3, r2
  return 1;
 8088cc2:	bf96      	itet	ls
 8088cc4:	2001      	movls	r0, #1
    return 0;
 8088cc6:	2000      	movhi	r0, #0
  *value = next;
 8088cc8:	6033      	strls	r3, [r6, #0]
  return 1;
 8088cca:	e7f1      	b.n	8088cb0 <_ZN9FatVolume6fatGetEmPm+0x24>
  if (m_fatType == 16) {
 8088ccc:	2b10      	cmp	r3, #16
 8088cce:	d1ed      	bne.n	8088cac <_ZN9FatVolume6fatGetEmPm+0x20>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
 8088cd0:	6983      	ldr	r3, [r0, #24]
 8088cd2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8088cd6:	2202      	movs	r2, #2
 8088cd8:	4419      	add	r1, r3
 8088cda:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8088cde:	f7ff ffac 	bl	8088c3a <_ZN8FatCache4readEmh>
    if (!pc) {
 8088ce2:	2800      	cmp	r0, #0
 8088ce4:	d0e2      	beq.n	8088cac <_ZN9FatVolume6fatGetEmPm+0x20>
    next = pc->fat16[cluster & 0XFF];
 8088ce6:	b2e4      	uxtb	r4, r4
 8088ce8:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
 8088cec:	e7e7      	b.n	8088cbe <_ZN9FatVolume6fatGetEmPm+0x32>

08088cee <_ZN9FatVolume6fatPutEmm>:
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8088cee:	b538      	push	{r3, r4, r5, lr}
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8088cf0:	79c3      	ldrb	r3, [r0, #7]
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8088cf2:	460c      	mov	r4, r1
  if (m_fatType == 32) {
 8088cf4:	2b20      	cmp	r3, #32
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8088cf6:	4615      	mov	r5, r2
  if (m_fatType == 32) {
 8088cf8:	d110      	bne.n	8088d1c <_ZN9FatVolume6fatPutEmm+0x2e>
    lba = m_fatStartBlock + (cluster >> 7);
 8088cfa:	6981      	ldr	r1, [r0, #24]
 8088cfc:	2203      	movs	r2, #3
 8088cfe:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8088d02:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8088d06:	f7ff ff98 	bl	8088c3a <_ZN8FatCache4readEmh>
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 8088d0a:	b908      	cbnz	r0, 8088d10 <_ZN9FatVolume6fatPutEmm+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
 8088d0c:	2000      	movs	r0, #0
}
 8088d0e:	bd38      	pop	{r3, r4, r5, pc}
    pc->fat32[cluster & 0X7F] = value;
 8088d10:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8088d14:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
 8088d18:	2001      	movs	r0, #1
 8088d1a:	e7f8      	b.n	8088d0e <_ZN9FatVolume6fatPutEmm+0x20>
  if (m_fatType == 16) {
 8088d1c:	2b10      	cmp	r3, #16
 8088d1e:	d1f5      	bne.n	8088d0c <_ZN9FatVolume6fatPutEmm+0x1e>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
 8088d20:	6983      	ldr	r3, [r0, #24]
 8088d22:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8088d26:	2203      	movs	r2, #3
 8088d28:	4419      	add	r1, r3
 8088d2a:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8088d2e:	f7ff ff84 	bl	8088c3a <_ZN8FatCache4readEmh>
    if (!pc) {
 8088d32:	2800      	cmp	r0, #0
 8088d34:	d0ea      	beq.n	8088d0c <_ZN9FatVolume6fatPutEmm+0x1e>
    pc->fat16[cluster & 0XFF] = value;
 8088d36:	b2e4      	uxtb	r4, r4
 8088d38:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
 8088d3c:	e7ec      	b.n	8088d18 <_ZN9FatVolume6fatPutEmm+0x2a>

08088d3e <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 8088d3e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8088d42:	4605      	mov	r5, r0
 8088d44:	4690      	mov	r8, r2
  uint32_t find = current ? current : m_allocSearchStart;
 8088d46:	460f      	mov	r7, r1
 8088d48:	b9b9      	cbnz	r1, 8088d7a <_ZN9FatVolume15allocateClusterEmPm+0x3c>
 8088d4a:	68c6      	ldr	r6, [r0, #12]
 8088d4c:	4634      	mov	r4, r6
    if (find > m_lastCluster) {
 8088d4e:	69eb      	ldr	r3, [r5, #28]
    find++;
 8088d50:	3401      	adds	r4, #1
      find = 2;
 8088d52:	42a3      	cmp	r3, r4
 8088d54:	bf38      	it	cc
 8088d56:	2402      	movcc	r4, #2
    int8_t fg = fatGet(find, &f);
 8088d58:	4628      	mov	r0, r5
 8088d5a:	4621      	mov	r1, r4
 8088d5c:	aa01      	add	r2, sp, #4
 8088d5e:	f7ff ff95 	bl	8088c8c <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 8088d62:	2800      	cmp	r0, #0
 8088d64:	db04      	blt.n	8088d70 <_ZN9FatVolume15allocateClusterEmPm+0x32>
    if (fg && f == 0) {
 8088d66:	d001      	beq.n	8088d6c <_ZN9FatVolume15allocateClusterEmPm+0x2e>
 8088d68:	9b01      	ldr	r3, [sp, #4]
 8088d6a:	b143      	cbz	r3, 8088d7e <_ZN9FatVolume15allocateClusterEmPm+0x40>
    if (find == start) {
 8088d6c:	42b4      	cmp	r4, r6
 8088d6e:	d1ee      	bne.n	8088d4e <_ZN9FatVolume15allocateClusterEmPm+0x10>
  return false;
 8088d70:	2600      	movs	r6, #0
}
 8088d72:	4630      	mov	r0, r6
 8088d74:	b002      	add	sp, #8
 8088d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8088d7a:	460e      	mov	r6, r1
 8088d7c:	e7e6      	b.n	8088d4c <_ZN9FatVolume15allocateClusterEmPm+0xe>
  }
  uint32_t clusterStartBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
 8088d7e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8088d82:	4621      	mov	r1, r4
 8088d84:	4628      	mov	r0, r5
 8088d86:	f7ff ffb2 	bl	8088cee <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
 8088d8a:	4606      	mov	r6, r0
 8088d8c:	2800      	cmp	r0, #0
 8088d8e:	d0ef      	beq.n	8088d70 <_ZN9FatVolume15allocateClusterEmPm+0x32>
  if (current) {
 8088d90:	b17f      	cbz	r7, 8088db2 <_ZN9FatVolume15allocateClusterEmPm+0x74>
    if (!fatPut(current, find)) {
 8088d92:	4622      	mov	r2, r4
 8088d94:	4639      	mov	r1, r7
 8088d96:	4628      	mov	r0, r5
 8088d98:	f7ff ffa9 	bl	8088cee <_ZN9FatVolume6fatPutEmm>
 8088d9c:	2800      	cmp	r0, #0
 8088d9e:	d0e7      	beq.n	8088d70 <_ZN9FatVolume15allocateClusterEmPm+0x32>
    if (m_freeClusterCount >= 0) {
 8088da0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8088da2:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
 8088da4:	bfa4      	itt	ge
 8088da6:	f103 33ff 	addge.w	r3, r3, #4294967295
 8088daa:	626b      	strge	r3, [r5, #36]	; 0x24
  *next = find;
 8088dac:	f8c8 4000 	str.w	r4, [r8]
  return true;
 8088db0:	e7df      	b.n	8088d72 <_ZN9FatVolume15allocateClusterEmPm+0x34>
    m_allocSearchStart = find;
 8088db2:	60ec      	str	r4, [r5, #12]
 8088db4:	e7f4      	b.n	8088da0 <_ZN9FatVolume15allocateClusterEmPm+0x62>

08088db6 <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
 8088db6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8088db8:	4604      	mov	r4, r0
 8088dba:	460d      	mov	r5, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
 8088dbc:	4629      	mov	r1, r5
 8088dbe:	4620      	mov	r0, r4
 8088dc0:	aa01      	add	r2, sp, #4
 8088dc2:	f7ff ff63 	bl	8088c8c <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 8088dc6:	1e06      	subs	r6, r0, #0
 8088dc8:	db13      	blt.n	8088df2 <_ZN9FatVolume9freeChainEm+0x3c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
 8088dca:	2200      	movs	r2, #0
 8088dcc:	4629      	mov	r1, r5
 8088dce:	4620      	mov	r0, r4
 8088dd0:	f7ff ff8d 	bl	8088cee <_ZN9FatVolume6fatPutEmm>
 8088dd4:	b168      	cbz	r0, 8088df2 <_ZN9FatVolume9freeChainEm+0x3c>
    if (m_freeClusterCount >= 0) {
 8088dd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8088dd8:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
 8088dda:	bfa4      	itt	ge
 8088ddc:	3301      	addge	r3, #1
 8088dde:	6263      	strge	r3, [r4, #36]	; 0x24
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster < m_allocSearchStart) {
 8088de0:	68e3      	ldr	r3, [r4, #12]
 8088de2:	42ab      	cmp	r3, r5
      m_allocSearchStart = cluster;
 8088de4:	bf88      	it	hi
 8088de6:	60e5      	strhi	r5, [r4, #12]
    }
    cluster = next;
 8088de8:	9d01      	ldr	r5, [sp, #4]
  } while (fg);
 8088dea:	2e00      	cmp	r6, #0
 8088dec:	d1e6      	bne.n	8088dbc <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
 8088dee:	b002      	add	sp, #8
 8088df0:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 8088df2:	2000      	movs	r0, #0
 8088df4:	e7fb      	b.n	8088dee <_ZN9FatVolume9freeChainEm+0x38>

08088df6 <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
 8088df6:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
 8088df8:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
 8088dfa:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
 8088dfc:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
 8088dfe:	f04f 33ff 	mov.w	r3, #4294967295
bool FatVolume::init(uint8_t part) {
 8088e02:	4604      	mov	r4, r0
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE

  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
 8088e04:	460d      	mov	r5, r1
  m_fatType = 0;
 8088e06:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
 8088e08:	f100 0628 	add.w	r6, r0, #40	; 0x28
    m_vol = vol;
 8088e0c:	62c0      	str	r0, [r0, #44]	; 0x2c
    m_status = 0;
 8088e0e:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 8088e12:	6303      	str	r3, [r0, #48]	; 0x30
    m_vol = vol;
 8088e14:	f8c0 0238 	str.w	r0, [r0, #568]	; 0x238
    m_status = 0;
 8088e18:	f880 2234 	strb.w	r2, [r0, #564]	; 0x234
    m_lbn = 0XFFFFFFFF;
 8088e1c:	f8c0 323c 	str.w	r3, [r0, #572]	; 0x23c
  if (part) {
 8088e20:	b1b9      	cbz	r1, 8088e52 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
 8088e22:	2904      	cmp	r1, #4
 8088e24:	d901      	bls.n	8088e2a <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
 8088e26:	2000      	movs	r0, #0
}
 8088e28:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
 8088e2a:	4611      	mov	r1, r2
 8088e2c:	4630      	mov	r0, r6
 8088e2e:	f7ff ff04 	bl	8088c3a <_ZN8FatCache4readEmh>
    if (!pc) {
 8088e32:	2800      	cmp	r0, #0
 8088e34:	d0f7      	beq.n	8088e26 <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
 8088e36:	eb00 1305 	add.w	r3, r0, r5, lsl #4
 8088e3a:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 8088e3e:	065b      	lsls	r3, r3, #25
 8088e40:	d1f1      	bne.n	8088e26 <_ZN9FatVolume4initEh+0x30>
 8088e42:	f105 011b 	add.w	r1, r5, #27
 8088e46:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8088e4a:	f8d1 5006 	ldr.w	r5, [r1, #6]
 8088e4e:	2d00      	cmp	r5, #0
 8088e50:	d0e9      	beq.n	8088e26 <_ZN9FatVolume4initEh+0x30>
 8088e52:	2200      	movs	r2, #0
 8088e54:	4629      	mov	r1, r5
 8088e56:	4630      	mov	r0, r6
 8088e58:	f7ff feef 	bl	8088c3a <_ZN8FatCache4readEmh>
  if (!pc) {
 8088e5c:	2800      	cmp	r0, #0
 8088e5e:	d0e2      	beq.n	8088e26 <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
 8088e60:	f8b0 300b 	ldrh.w	r3, [r0, #11]
 8088e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8088e68:	d1dd      	bne.n	8088e26 <_ZN9FatVolume4initEh+0x30>
 8088e6a:	7c03      	ldrb	r3, [r0, #16]
 8088e6c:	2b02      	cmp	r3, #2
 8088e6e:	d1da      	bne.n	8088e26 <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
 8088e70:	89c3      	ldrh	r3, [r0, #14]
 8088e72:	2b00      	cmp	r3, #0
 8088e74:	d0d7      	beq.n	8088e26 <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
 8088e76:	7b41      	ldrb	r1, [r0, #13]
  m_clusterSizeShift = 0;
 8088e78:	2609      	movs	r6, #9
  m_clusterBlockMask = m_blocksPerCluster - 1;
 8088e7a:	1e4b      	subs	r3, r1, #1
 8088e7c:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
 8088e7e:	2300      	movs	r3, #0
 8088e80:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8088e82:	2301      	movs	r3, #1
  m_blocksPerCluster = fbs->sectorsPerCluster;
 8088e84:	7121      	strb	r1, [r4, #4]
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8088e86:	4299      	cmp	r1, r3
 8088e88:	d007      	beq.n	8088e9a <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
 8088e8a:	3e01      	subs	r6, #1
 8088e8c:	d0cb      	beq.n	8088e26 <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8088e8e:	79a2      	ldrb	r2, [r4, #6]
 8088e90:	005b      	lsls	r3, r3, #1
 8088e92:	3201      	adds	r2, #1
 8088e94:	b2db      	uxtb	r3, r3
 8088e96:	71a2      	strb	r2, [r4, #6]
 8088e98:	e7f5      	b.n	8088e86 <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
 8088e9a:	8ac1      	ldrh	r1, [r0, #22]
 8088e9c:	b901      	cbnz	r1, 8088ea0 <_ZN9FatVolume4initEh+0xaa>
 8088e9e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8088ea0:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
 8088ea2:	89c3      	ldrh	r3, [r0, #14]
 8088ea4:	442b      	add	r3, r5
 8088ea6:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 8088ea8:	f8b0 2011 	ldrh.w	r2, [r0, #17]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 8088eac:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8088eb0:	6223      	str	r3, [r4, #32]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 8088eb2:	8122      	strh	r2, [r4, #8]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
 8088eb4:	f8b0 1011 	ldrh.w	r1, [r0, #17]
 8088eb8:	0149      	lsls	r1, r1, #5
 8088eba:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
 8088ebe:	eb03 2351 	add.w	r3, r3, r1, lsr #9
 8088ec2:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
 8088ec4:	f8b0 2013 	ldrh.w	r2, [r0, #19]
 8088ec8:	b902      	cbnz	r2, 8088ecc <_ZN9FatVolume4initEh+0xd6>
 8088eca:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
 8088ecc:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
 8088ece:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
 8088ed0:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
 8088ed2:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
 8088ed4:	1c4b      	adds	r3, r1, #1
 8088ed6:	61e3      	str	r3, [r4, #28]
    m_freeClusterCount = value;
 8088ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8088edc:	6263      	str	r3, [r4, #36]	; 0x24
  if (clusterCount < 4085) {
 8088ede:	f640 73f4 	movw	r3, #4084	; 0xff4
 8088ee2:	4299      	cmp	r1, r3
 8088ee4:	d802      	bhi.n	8088eec <_ZN9FatVolume4initEh+0xf6>
    m_fatType = 12;
 8088ee6:	230c      	movs	r3, #12
 8088ee8:	71e3      	strb	r3, [r4, #7]
 8088eea:	e79c      	b.n	8088e26 <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
 8088eec:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8088ef0:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
 8088ef2:	bf89      	itett	hi
 8088ef4:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
    m_fatType = 16;
 8088ef6:	2310      	movls	r3, #16
    m_rootDirStart = fbs->fat32RootCluster;
 8088ef8:	6223      	strhi	r3, [r4, #32]
    m_fatType = 32;
 8088efa:	2320      	movhi	r3, #32
  return true;
 8088efc:	2001      	movs	r0, #1
    m_fatType = 32;
 8088efe:	71e3      	strb	r3, [r4, #7]
 8088f00:	e792      	b.n	8088e28 <_ZN9FatVolume4initEh+0x32>

08088f02 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
 8088f02:	f001 bb4f 	b.w	808a5a4 <HAL_Pin_Map>

08088f06 <_GLOBAL__sub_I__ZN9SdFatBase9errorHaltEP5Print>:
 8088f06:	f001 bb4d 	b.w	808a5a4 <HAL_Pin_Map>

08088f0a <_ZL10delay_msecm>:
  return reply;
}


static void delay_msec(uint32_t ms){
  delay(ms);
 8088f0a:	f003 b88d 	b.w	808c028 <delay>

08088f0e <_ZL9i2c_writehhPht>:
int8_t i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8088f0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8088f10:	4607      	mov	r7, r0
 8088f12:	4614      	mov	r4, r2
 8088f14:	461d      	mov	r5, r3
 8088f16:	460e      	mov	r6, r1
  Wire.beginTransmission((uint8_t)dev_id);
 8088f18:	f004 f9d2 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8088f1c:	4639      	mov	r1, r7
 8088f1e:	f003 ff6b 	bl	808cdf8 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((uint8_t)reg_addr);
 8088f22:	f004 f9cd 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8088f26:	6803      	ldr	r3, [r0, #0]
 8088f28:	4631      	mov	r1, r6
 8088f2a:	689b      	ldr	r3, [r3, #8]
 8088f2c:	4798      	blx	r3
 8088f2e:	4425      	add	r5, r4
  while (len--) {
 8088f30:	42ac      	cmp	r4, r5
 8088f32:	d007      	beq.n	8088f44 <_ZL9i2c_writehhPht+0x36>
    Wire.write(*reg_data);
 8088f34:	f004 f9c4 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8088f38:	6803      	ldr	r3, [r0, #0]
 8088f3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8088f3e:	689b      	ldr	r3, [r3, #8]
 8088f40:	4798      	blx	r3
  while (len--) {
 8088f42:	e7f5      	b.n	8088f30 <_ZL9i2c_writehhPht+0x22>
  Wire.endTransmission();
 8088f44:	f004 f9bc 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8088f48:	f003 ff79 	bl	808ce3e <_ZN7TwoWire15endTransmissionEv>
}
 8088f4c:	2000      	movs	r0, #0
 8088f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08088f50 <_ZL8i2c_readhhPht>:
int8_t i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8088f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8088f52:	4606      	mov	r6, r0
 8088f54:	4615      	mov	r5, r2
 8088f56:	461c      	mov	r4, r3
 8088f58:	460f      	mov	r7, r1
  Wire.beginTransmission((uint8_t)dev_id);
 8088f5a:	f004 f9b1 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8088f5e:	4631      	mov	r1, r6
 8088f60:	f003 ff4a 	bl	808cdf8 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((uint8_t)reg_addr);
 8088f64:	f004 f9ac 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8088f68:	6803      	ldr	r3, [r0, #0]
 8088f6a:	4639      	mov	r1, r7
 8088f6c:	689b      	ldr	r3, [r3, #8]
 8088f6e:	4798      	blx	r3
  Wire.endTransmission();
 8088f70:	f004 f9a6 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8088f74:	f003 ff63 	bl	808ce3e <_ZN7TwoWire15endTransmissionEv>
  if (len != Wire.requestFrom((uint8_t)dev_id, (byte)len)) {
 8088f78:	f004 f9a2 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8088f7c:	4631      	mov	r1, r6
 8088f7e:	b2e2      	uxtb	r2, r4
 8088f80:	f003 ff37 	bl	808cdf2 <_ZN7TwoWire11requestFromEhj>
 8088f84:	4284      	cmp	r4, r0
 8088f86:	d10a      	bne.n	8088f9e <_ZL8i2c_readhhPht+0x4e>
 8088f88:	442c      	add	r4, r5
  while (len--) {
 8088f8a:	42ac      	cmp	r4, r5
 8088f8c:	d009      	beq.n	8088fa2 <_ZL8i2c_readhhPht+0x52>
    *reg_data = (uint8_t)Wire.read();
 8088f8e:	f004 f997 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8088f92:	6803      	ldr	r3, [r0, #0]
 8088f94:	695b      	ldr	r3, [r3, #20]
 8088f96:	4798      	blx	r3
 8088f98:	f805 0b01 	strb.w	r0, [r5], #1
  while (len--) {
 8088f9c:	e7f5      	b.n	8088f8a <_ZL8i2c_readhhPht+0x3a>
    return 1;
 8088f9e:	2001      	movs	r0, #1
}
 8088fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8088fa2:	2000      	movs	r0, #0
 8088fa4:	e7fc      	b.n	8088fa0 <_ZL8i2c_readhhPht+0x50>
	...

08088fa8 <_ZN15Adafruit_BME680C1Ea>:
  _BME680_SoftwareSPI_MOSI = -1;
 8088fa8:	22ff      	movs	r2, #255	; 0xff
  : _cs(cspin)
 8088faa:	7701      	strb	r1, [r0, #28]
  _BME680_SoftwareSPI_MOSI = -1;
 8088fac:	4904      	ldr	r1, [pc, #16]	; (8088fc0 <_ZN15Adafruit_BME680C1Ea+0x18>)
 8088fae:	700a      	strb	r2, [r1, #0]
  _BME680_SoftwareSPI_MISO = -1;
 8088fb0:	4904      	ldr	r1, [pc, #16]	; (8088fc4 <_ZN15Adafruit_BME680C1Ea+0x1c>)
 8088fb2:	700a      	strb	r2, [r1, #0]
  _BME680_SoftwareSPI_SCK = -1;
 8088fb4:	4904      	ldr	r1, [pc, #16]	; (8088fc8 <_ZN15Adafruit_BME680C1Ea+0x20>)
 8088fb6:	700a      	strb	r2, [r1, #0]
  _filterEnabled = _tempEnabled = _humEnabled = _presEnabled = _gasEnabled = false;
 8088fb8:	2200      	movs	r2, #0
 8088fba:	6102      	str	r2, [r0, #16]
 8088fbc:	7502      	strb	r2, [r0, #20]
}
 8088fbe:	4770      	bx	lr
 8088fc0:	20000d61 	.word	0x20000d61
 8088fc4:	20000d60 	.word	0x20000d60
 8088fc8:	20000d62 	.word	0x20000d62

08088fcc <_ZN15Adafruit_BME68014performReadingEv>:
  gas_sensor.power_mode = BME680_FORCED_MODE;
 8088fcc:	2301      	movs	r3, #1
bool Adafruit_BME680::performReading(void) {
 8088fce:	b530      	push	{r4, r5, lr}
 8088fd0:	4604      	mov	r4, r0
  gas_sensor.power_mode = BME680_FORCED_MODE;
 8088fd2:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
  if (_humEnabled)
 8088fd6:	7ca3      	ldrb	r3, [r4, #18]
  uint8_t set_required_settings = 0;
 8088fd8:	7c40      	ldrb	r0, [r0, #17]
bool Adafruit_BME680::performReading(void) {
 8088fda:	b087      	sub	sp, #28
  if (_humEnabled)
 8088fdc:	b10b      	cbz	r3, 8088fe2 <_ZN15Adafruit_BME68014performReadingEv+0x16>
    set_required_settings |= BME680_OSH_SEL;
 8088fde:	f040 0004 	orr.w	r0, r0, #4
  if (_presEnabled)
 8088fe2:	7ce3      	ldrb	r3, [r4, #19]
 8088fe4:	b10b      	cbz	r3, 8088fea <_ZN15Adafruit_BME68014performReadingEv+0x1e>
    set_required_settings |= BME680_OSP_SEL;
 8088fe6:	f040 0002 	orr.w	r0, r0, #2
  if (_filterEnabled)
 8088fea:	7c23      	ldrb	r3, [r4, #16]
 8088fec:	b10b      	cbz	r3, 8088ff2 <_ZN15Adafruit_BME68014performReadingEv+0x26>
    set_required_settings |= BME680_FILTER_SEL;
 8088fee:	f040 0010 	orr.w	r0, r0, #16
  if (_gasEnabled)
 8088ff2:	7d23      	ldrb	r3, [r4, #20]
 8088ff4:	b10b      	cbz	r3, 8088ffa <_ZN15Adafruit_BME68014performReadingEv+0x2e>
    set_required_settings |= BME680_GAS_SENSOR_SEL;
 8088ff6:	f040 00c8 	orr.w	r0, r0, #200	; 0xc8
  rslt = bme680_set_sensor_settings(set_required_settings, &gas_sensor);
 8088ffa:	f104 0520 	add.w	r5, r4, #32
 8088ffe:	4629      	mov	r1, r5
 8089000:	f7f7 fa77 	bl	80804f2 <bme680_set_sensor_settings>
  if (rslt != BME680_OK)
 8089004:	b118      	cbz	r0, 808900e <_ZN15Adafruit_BME68014performReadingEv+0x42>
    return false;
 8089006:	2500      	movs	r5, #0
}
 8089008:	4628      	mov	r0, r5
 808900a:	b007      	add	sp, #28
 808900c:	bd30      	pop	{r4, r5, pc}
  rslt = bme680_set_sensor_mode(&gas_sensor);
 808900e:	4628      	mov	r0, r5
 8089010:	f7f7 fa30 	bl	8080474 <bme680_set_sensor_mode>
  if (rslt != BME680_OK)
 8089014:	2800      	cmp	r0, #0
 8089016:	d1f6      	bne.n	8089006 <_ZN15Adafruit_BME68014performReadingEv+0x3a>
  bme680_get_profile_dur(&meas_period, &gas_sensor);
 8089018:	4629      	mov	r1, r5
 808901a:	f10d 0002 	add.w	r0, sp, #2
 808901e:	f7f7 fbe1 	bl	80807e4 <bme680_get_profile_dur>
  delay(meas_period * 2); /* Delay till the measurement is ready */
 8089022:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8089026:	0040      	lsls	r0, r0, #1
 8089028:	f002 fffe 	bl	808c028 <delay>
  rslt = bme680_get_sensor_data(&data, &gas_sensor);
 808902c:	4629      	mov	r1, r5
 808902e:	a801      	add	r0, sp, #4
 8089030:	f7f7 fc0c 	bl	808084c <bme680_get_sensor_data>
  if (rslt != BME680_OK)
 8089034:	2800      	cmp	r0, #0
 8089036:	d1e6      	bne.n	8089006 <_ZN15Adafruit_BME68014performReadingEv+0x3a>
  if (_tempEnabled) {
 8089038:	7c63      	ldrb	r3, [r4, #17]
 808903a:	b33b      	cbz	r3, 808908c <_ZN15Adafruit_BME68014performReadingEv+0xc0>
    temperature = data.temperature / 100.0;
 808903c:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8089040:	f004 faf2 	bl	808d628 <__aeabi_i2d>
 8089044:	2200      	movs	r2, #0
 8089046:	4b17      	ldr	r3, [pc, #92]	; (80890a4 <_ZN15Adafruit_BME68014performReadingEv+0xd8>)
 8089048:	f004 fc82 	bl	808d950 <__aeabi_ddiv>
 808904c:	f004 fe4e 	bl	808dcec <__aeabi_d2f>
  if (_humEnabled) {
 8089050:	7ca3      	ldrb	r3, [r4, #18]
 8089052:	6020      	str	r0, [r4, #0]
 8089054:	b1e3      	cbz	r3, 8089090 <_ZN15Adafruit_BME68014performReadingEv+0xc4>
    humidity = data.humidity / 1000.0;
 8089056:	9804      	ldr	r0, [sp, #16]
 8089058:	f004 fad6 	bl	808d608 <__aeabi_ui2d>
 808905c:	2200      	movs	r2, #0
 808905e:	4b12      	ldr	r3, [pc, #72]	; (80890a8 <_ZN15Adafruit_BME68014performReadingEv+0xdc>)
 8089060:	f004 fc76 	bl	808d950 <__aeabi_ddiv>
 8089064:	f004 fe42 	bl	808dcec <__aeabi_d2f>
  if (_presEnabled) {
 8089068:	7ce3      	ldrb	r3, [r4, #19]
 808906a:	60a0      	str	r0, [r4, #8]
 808906c:	b193      	cbz	r3, 8089094 <_ZN15Adafruit_BME68014performReadingEv+0xc8>
    pressure = data.pressure;
 808906e:	9803      	ldr	r0, [sp, #12]
 8089070:	f004 ff42 	bl	808def8 <__aeabi_ui2f>
  if (_gasEnabled) {
 8089074:	7d25      	ldrb	r5, [r4, #20]
 8089076:	6060      	str	r0, [r4, #4]
 8089078:	b18d      	cbz	r5, 808909e <_ZN15Adafruit_BME68014performReadingEv+0xd2>
    if (data.status & BME680_HEAT_STAB_MSK) {
 808907a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 808907e:	06db      	lsls	r3, r3, #27
 8089080:	d50a      	bpl.n	8089098 <_ZN15Adafruit_BME68014performReadingEv+0xcc>
      gas_resistance = data.gas_resistance;
 8089082:	9805      	ldr	r0, [sp, #20]
 8089084:	f004 ff38 	bl	808def8 <__aeabi_ui2f>
 8089088:	60e0      	str	r0, [r4, #12]
 808908a:	e7bd      	b.n	8089008 <_ZN15Adafruit_BME68014performReadingEv+0x3c>
    temperature = NAN;
 808908c:	4807      	ldr	r0, [pc, #28]	; (80890ac <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 808908e:	e7df      	b.n	8089050 <_ZN15Adafruit_BME68014performReadingEv+0x84>
    humidity = NAN;
 8089090:	4806      	ldr	r0, [pc, #24]	; (80890ac <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 8089092:	e7e9      	b.n	8089068 <_ZN15Adafruit_BME68014performReadingEv+0x9c>
    pressure = NAN;
 8089094:	4805      	ldr	r0, [pc, #20]	; (80890ac <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 8089096:	e7ed      	b.n	8089074 <_ZN15Adafruit_BME68014performReadingEv+0xa8>
      gas_resistance = 0;
 8089098:	2300      	movs	r3, #0
 808909a:	60e3      	str	r3, [r4, #12]
 808909c:	e7b4      	b.n	8089008 <_ZN15Adafruit_BME68014performReadingEv+0x3c>
  return true;
 808909e:	2501      	movs	r5, #1
 80890a0:	e7b2      	b.n	8089008 <_ZN15Adafruit_BME68014performReadingEv+0x3c>
 80890a2:	bf00      	nop
 80890a4:	40590000 	.word	0x40590000
 80890a8:	408f4000 	.word	0x408f4000
 80890ac:	7fc00000 	.word	0x7fc00000

080890b0 <_ZN15Adafruit_BME68012setGasHeaterEtt>:
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
 80890b0:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
  gas_sensor.gas_sett.heatr_dur = heaterTime;
 80890b4:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
  if ( (heaterTemp == 0) || (heaterTime == 0) ) {
 80890b8:	b101      	cbz	r1, 80890bc <_ZN15Adafruit_BME68012setGasHeaterEtt+0xc>
 80890ba:	b92a      	cbnz	r2, 80890c8 <_ZN15Adafruit_BME68012setGasHeaterEtt+0x18>
    gas_sensor.gas_sett.run_gas = BME680_DISABLE_GAS_MEAS;
 80890bc:	2300      	movs	r3, #0
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 80890be:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
    _gasEnabled = true;
 80890c2:	7503      	strb	r3, [r0, #20]
}
 80890c4:	2001      	movs	r0, #1
 80890c6:	4770      	bx	lr
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 80890c8:	2301      	movs	r3, #1
 80890ca:	e7f8      	b.n	80890be <_ZN15Adafruit_BME68012setGasHeaterEtt+0xe>

080890cc <_ZN15Adafruit_BME68026setTemperatureOversamplingEh>:
  if (oversample > BME680_OS_16X) return false;
 80890cc:	2905      	cmp	r1, #5
bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
 80890ce:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
 80890d0:	d807      	bhi.n	80890e2 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh+0x16>
  gas_sensor.tph_sett.os_temp = oversample;
 80890d2:	f880 1059 	strb.w	r1, [r0, #89]	; 0x59
  if (oversample == BME680_OS_NONE)
 80890d6:	2001      	movs	r0, #1
 80890d8:	b909      	cbnz	r1, 80890de <_ZN15Adafruit_BME68026setTemperatureOversamplingEh+0x12>
    _tempEnabled = false;
 80890da:	7459      	strb	r1, [r3, #17]
 80890dc:	4770      	bx	lr
    _tempEnabled = true;
 80890de:	7458      	strb	r0, [r3, #17]
 80890e0:	4770      	bx	lr
  if (oversample > BME680_OS_16X) return false;
 80890e2:	2000      	movs	r0, #0
}
 80890e4:	4770      	bx	lr

080890e6 <_ZN15Adafruit_BME68023setHumidityOversamplingEh>:
  if (oversample > BME680_OS_16X) return false;
 80890e6:	2905      	cmp	r1, #5
bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
 80890e8:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
 80890ea:	d807      	bhi.n	80890fc <_ZN15Adafruit_BME68023setHumidityOversamplingEh+0x16>
  gas_sensor.tph_sett.os_hum = oversample;
 80890ec:	f880 1058 	strb.w	r1, [r0, #88]	; 0x58
  if (oversample == BME680_OS_NONE)
 80890f0:	2001      	movs	r0, #1
 80890f2:	b909      	cbnz	r1, 80890f8 <_ZN15Adafruit_BME68023setHumidityOversamplingEh+0x12>
    _humEnabled = false;
 80890f4:	7499      	strb	r1, [r3, #18]
 80890f6:	4770      	bx	lr
    _humEnabled = true;
 80890f8:	7498      	strb	r0, [r3, #18]
 80890fa:	4770      	bx	lr
  if (oversample > BME680_OS_16X) return false;
 80890fc:	2000      	movs	r0, #0
}
 80890fe:	4770      	bx	lr

08089100 <_ZN15Adafruit_BME68023setPressureOversamplingEh>:
  if (oversample > BME680_OS_16X) return false;
 8089100:	2905      	cmp	r1, #5
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
 8089102:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
 8089104:	d807      	bhi.n	8089116 <_ZN15Adafruit_BME68023setPressureOversamplingEh+0x16>
  gas_sensor.tph_sett.os_pres = oversample;
 8089106:	f880 105a 	strb.w	r1, [r0, #90]	; 0x5a
  if (oversample == BME680_OS_NONE)
 808910a:	2001      	movs	r0, #1
 808910c:	b909      	cbnz	r1, 8089112 <_ZN15Adafruit_BME68023setPressureOversamplingEh+0x12>
    _presEnabled = false;
 808910e:	74d9      	strb	r1, [r3, #19]
 8089110:	4770      	bx	lr
    _presEnabled = true;
 8089112:	74d8      	strb	r0, [r3, #19]
 8089114:	4770      	bx	lr
  if (oversample > BME680_OS_16X) return false;
 8089116:	2000      	movs	r0, #0
}
 8089118:	4770      	bx	lr

0808911a <_ZN15Adafruit_BME68016setIIRFilterSizeEh>:
  if (filtersize > BME680_FILTER_SIZE_127) return false;
 808911a:	2907      	cmp	r1, #7
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
 808911c:	4603      	mov	r3, r0
  if (filtersize > BME680_FILTER_SIZE_127) return false;
 808911e:	d807      	bhi.n	8089130 <_ZN15Adafruit_BME68016setIIRFilterSizeEh+0x16>
  gas_sensor.tph_sett.filter = filtersize;
 8089120:	f880 105b 	strb.w	r1, [r0, #91]	; 0x5b
  if (filtersize == BME680_FILTER_SIZE_0)
 8089124:	2001      	movs	r0, #1
 8089126:	b909      	cbnz	r1, 808912c <_ZN15Adafruit_BME68016setIIRFilterSizeEh+0x12>
    _filterEnabled = false;
 8089128:	7419      	strb	r1, [r3, #16]
 808912a:	4770      	bx	lr
    _filterEnabled = true;
 808912c:	7418      	strb	r0, [r3, #16]
 808912e:	4770      	bx	lr
  if (filtersize > BME680_FILTER_SIZE_127) return false;
 8089130:	2000      	movs	r0, #0
}
 8089132:	4770      	bx	lr

08089134 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
    static SPIClass& instance() {
 8089134:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
 8089136:	4d0c      	ldr	r5, [pc, #48]	; (8089168 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
 8089138:	7829      	ldrb	r1, [r5, #0]
 808913a:	f3bf 8f5b 	dmb	ish
 808913e:	f011 0401 	ands.w	r4, r1, #1
 8089142:	d10f      	bne.n	8089164 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>
 8089144:	4628      	mov	r0, r5
 8089146:	f7f6 ffae 	bl	80800a6 <__cxa_guard_acquire>
 808914a:	b158      	cbz	r0, 8089164 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>
 808914c:	4621      	mov	r1, r4
 808914e:	4807      	ldr	r0, [pc, #28]	; (808916c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 8089150:	f001 ff17 	bl	808af82 <_ZN8SPIClassC1E19hal_spi_interface_t>
 8089154:	4628      	mov	r0, r5
 8089156:	f7f6 ffab 	bl	80800b0 <__cxa_guard_release>
 808915a:	4a05      	ldr	r2, [pc, #20]	; (8089170 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x3c>)
 808915c:	4905      	ldr	r1, [pc, #20]	; (8089174 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x40>)
 808915e:	4803      	ldr	r0, [pc, #12]	; (808916c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 8089160:	f004 f8fe 	bl	808d360 <__aeabi_atexit>
        return instance;
    }
 8089164:	4801      	ldr	r0, [pc, #4]	; (808916c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 8089166:	bd38      	pop	{r3, r4, r5, pc}
 8089168:	20000d34 	.word	0x20000d34
 808916c:	20000d38 	.word	0x20000d38
 8089170:	20000328 	.word	0x20000328
 8089174:	08088475 	.word	0x08088475

08089178 <_ZL12spi_transferh>:
static uint8_t spi_transfer(uint8_t x) {
 8089178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (_BME680_SoftwareSPI_SCK == -1)
 808917c:	4d1b      	ldr	r5, [pc, #108]	; (80891ec <_ZL12spi_transferh+0x74>)
static uint8_t spi_transfer(uint8_t x) {
 808917e:	4680      	mov	r8, r0
  if (_BME680_SoftwareSPI_SCK == -1)
 8089180:	f995 3000 	ldrsb.w	r3, [r5]
 8089184:	3301      	adds	r3, #1
 8089186:	d106      	bne.n	8089196 <_ZL12spi_transferh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
 8089188:	f7ff ffd4 	bl	8089134 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 808918c:	4641      	mov	r1, r8
}
 808918e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8089192:	f001 bfa3 	b.w	808b0dc <_ZN8SPIClass8transferEh>
  uint8_t reply = 0;
 8089196:	2400      	movs	r4, #0
  for (int i=7; i>=0; i--) {
 8089198:	2607      	movs	r6, #7
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
 808919a:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80891f0 <_ZL12spi_transferh+0x78>
    if (digitalRead(_BME680_SoftwareSPI_MISO))
 808919e:	f8df a054 	ldr.w	sl, [pc, #84]	; 80891f4 <_ZL12spi_transferh+0x7c>
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
 80891a2:	2701      	movs	r7, #1
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
 80891a4:	f995 0000 	ldrsb.w	r0, [r5]
 80891a8:	2100      	movs	r1, #0
 80891aa:	b280      	uxth	r0, r0
 80891ac:	f003 fff3 	bl	808d196 <digitalWrite>
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
 80891b0:	f999 0000 	ldrsb.w	r0, [r9]
 80891b4:	fa07 f106 	lsl.w	r1, r7, r6
 80891b8:	ea01 0108 	and.w	r1, r1, r8
 80891bc:	b280      	uxth	r0, r0
 80891be:	f003 ffea 	bl	808d196 <digitalWrite>
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
 80891c2:	f995 0000 	ldrsb.w	r0, [r5]
 80891c6:	4639      	mov	r1, r7
 80891c8:	b280      	uxth	r0, r0
 80891ca:	f003 ffe4 	bl	808d196 <digitalWrite>
    if (digitalRead(_BME680_SoftwareSPI_MISO))
 80891ce:	f99a 0000 	ldrsb.w	r0, [sl]
    reply <<= 1;
 80891d2:	0064      	lsls	r4, r4, #1
    if (digitalRead(_BME680_SoftwareSPI_MISO))
 80891d4:	b280      	uxth	r0, r0
    reply <<= 1;
 80891d6:	b2e4      	uxtb	r4, r4
    if (digitalRead(_BME680_SoftwareSPI_MISO))
 80891d8:	f003 fff6 	bl	808d1c8 <digitalRead>
 80891dc:	b100      	cbz	r0, 80891e0 <_ZL12spi_transferh+0x68>
      reply |= 1;
 80891de:	433c      	orrs	r4, r7
  for (int i=7; i>=0; i--) {
 80891e0:	3e01      	subs	r6, #1
 80891e2:	d2de      	bcs.n	80891a2 <_ZL12spi_transferh+0x2a>
}
 80891e4:	4620      	mov	r0, r4
 80891e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80891ea:	bf00      	nop
 80891ec:	20000d62 	.word	0x20000d62
 80891f0:	20000d61 	.word	0x20000d61
 80891f4:	20000d60 	.word	0x20000d60

080891f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE5beginEv.isra.0>:
    void begin() {
 80891f8:	b508      	push	{r3, lr}
        instance().begin();
 80891fa:	f7ff ff9b 	bl	8089134 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
 80891fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().begin();
 8089202:	f001 becd 	b.w	808afa0 <_ZN8SPIClass5beginEv>
	...

08089208 <_ZN15Adafruit_BME6805beginEh>:
bool Adafruit_BME680::begin(uint8_t addr) {
 8089208:	b538      	push	{r3, r4, r5, lr}
 808920a:	4604      	mov	r4, r0
  _i2caddr = addr;
 808920c:	7541      	strb	r1, [r0, #21]
  if (_cs == -1) {
 808920e:	f990 001c 	ldrsb.w	r0, [r0, #28]
bool Adafruit_BME680::begin(uint8_t addr) {
 8089212:	460d      	mov	r5, r1
  if (_cs == -1) {
 8089214:	1c42      	adds	r2, r0, #1
 8089216:	d122      	bne.n	808925e <_ZN15Adafruit_BME6805beginEh+0x56>
    Wire.begin();
 8089218:	f004 f852 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 808921c:	f003 fdba 	bl	808cd94 <_ZN7TwoWire5beginEv>
    gas_sensor.intf = BME680_I2C_INTF;
 8089220:	2301      	movs	r3, #1
 8089222:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    gas_sensor.read = &i2c_read;
 8089226:	4b26      	ldr	r3, [pc, #152]	; (80892c0 <_ZN15Adafruit_BME6805beginEh+0xb8>)
    gas_sensor.dev_id = addr;
 8089228:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
    gas_sensor.read = &i2c_read;
 808922c:	66a3      	str	r3, [r4, #104]	; 0x68
    gas_sensor.write = &i2c_write;
 808922e:	4b25      	ldr	r3, [pc, #148]	; (80892c4 <_ZN15Adafruit_BME6805beginEh+0xbc>)
    gas_sensor.write = &spi_write;
 8089230:	66e3      	str	r3, [r4, #108]	; 0x6c
  gas_sensor.delay_ms = delay_msec;
 8089232:	4b25      	ldr	r3, [pc, #148]	; (80892c8 <_ZN15Adafruit_BME6805beginEh+0xc0>)
  rslt = bme680_init(&gas_sensor);
 8089234:	f104 0020 	add.w	r0, r4, #32
  gas_sensor.delay_ms = delay_msec;
 8089238:	6723      	str	r3, [r4, #112]	; 0x70
  rslt = bme680_init(&gas_sensor);
 808923a:	f7f7 f843 	bl	80802c4 <bme680_init>
  if (rslt != BME680_OK)
 808923e:	2800      	cmp	r0, #0
 8089240:	d13b      	bne.n	80892ba <_ZN15Adafruit_BME6805beginEh+0xb2>
  gas_sensor.tph_sett.os_hum = oversample;
 8089242:	4b22      	ldr	r3, [pc, #136]	; (80892cc <_ZN15Adafruit_BME6805beginEh+0xc4>)
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 8089244:	2001      	movs	r0, #1
  gas_sensor.tph_sett.os_hum = oversample;
 8089246:	65a3      	str	r3, [r4, #88]	; 0x58
    _filterEnabled = true;
 8089248:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
 808924c:	6123      	str	r3, [r4, #16]
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
 808924e:	4b20      	ldr	r3, [pc, #128]	; (80892d0 <_ZN15Adafruit_BME6805beginEh+0xc8>)
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 8089250:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    _gasEnabled = true;
 8089254:	7520      	strb	r0, [r4, #20]
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
 8089256:	6623      	str	r3, [r4, #96]	; 0x60
  gas_sensor.power_mode = BME680_FORCED_MODE;
 8089258:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
}
 808925c:	bd38      	pop	{r3, r4, r5, pc}
    digitalWrite(_cs, HIGH);
 808925e:	2101      	movs	r1, #1
 8089260:	b280      	uxth	r0, r0
 8089262:	f003 ff98 	bl	808d196 <digitalWrite>
    pinMode(_cs, OUTPUT);
 8089266:	f994 001c 	ldrsb.w	r0, [r4, #28]
 808926a:	2101      	movs	r1, #1
 808926c:	b280      	uxth	r0, r0
 808926e:	f003 ff81 	bl	808d174 <pinMode>
    if (_BME680_SoftwareSPI_SCK == -1) {
 8089272:	4b18      	ldr	r3, [pc, #96]	; (80892d4 <_ZN15Adafruit_BME6805beginEh+0xcc>)
 8089274:	f993 0000 	ldrsb.w	r0, [r3]
 8089278:	1c43      	adds	r3, r0, #1
 808927a:	d10b      	bne.n	8089294 <_ZN15Adafruit_BME6805beginEh+0x8c>
      SPI.begin();
 808927c:	f7ff ffbc 	bl	80891f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE5beginEv.isra.0>
    gas_sensor.dev_id = _cs;
 8089280:	7f23      	ldrb	r3, [r4, #28]
 8089282:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    gas_sensor.intf = BME680_SPI_INTF;
 8089286:	2300      	movs	r3, #0
 8089288:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    gas_sensor.read = &spi_read;
 808928c:	4b12      	ldr	r3, [pc, #72]	; (80892d8 <_ZN15Adafruit_BME6805beginEh+0xd0>)
 808928e:	66a3      	str	r3, [r4, #104]	; 0x68
    gas_sensor.write = &spi_write;
 8089290:	4b12      	ldr	r3, [pc, #72]	; (80892dc <_ZN15Adafruit_BME6805beginEh+0xd4>)
 8089292:	e7cd      	b.n	8089230 <_ZN15Adafruit_BME6805beginEh+0x28>
      pinMode(_BME680_SoftwareSPI_SCK, OUTPUT);
 8089294:	2101      	movs	r1, #1
 8089296:	b280      	uxth	r0, r0
 8089298:	f003 ff6c 	bl	808d174 <pinMode>
      pinMode(_BME680_SoftwareSPI_MOSI, OUTPUT);
 808929c:	4b10      	ldr	r3, [pc, #64]	; (80892e0 <_ZN15Adafruit_BME6805beginEh+0xd8>)
 808929e:	2101      	movs	r1, #1
 80892a0:	f993 0000 	ldrsb.w	r0, [r3]
 80892a4:	b280      	uxth	r0, r0
 80892a6:	f003 ff65 	bl	808d174 <pinMode>
      pinMode(_BME680_SoftwareSPI_MISO, INPUT);
 80892aa:	4b0e      	ldr	r3, [pc, #56]	; (80892e4 <_ZN15Adafruit_BME6805beginEh+0xdc>)
 80892ac:	2100      	movs	r1, #0
 80892ae:	f993 0000 	ldrsb.w	r0, [r3]
 80892b2:	b280      	uxth	r0, r0
 80892b4:	f003 ff5e 	bl	808d174 <pinMode>
 80892b8:	e7e2      	b.n	8089280 <_ZN15Adafruit_BME6805beginEh+0x78>
    return false;
 80892ba:	2000      	movs	r0, #0
 80892bc:	e7ce      	b.n	808925c <_ZN15Adafruit_BME6805beginEh+0x54>
 80892be:	bf00      	nop
 80892c0:	08088f51 	.word	0x08088f51
 80892c4:	08088f0f 	.word	0x08088f0f
 80892c8:	08088f0b 	.word	0x08088f0b
 80892cc:	02030402 	.word	0x02030402
 80892d0:	00960140 	.word	0x00960140
 80892d4:	20000d62 	.word	0x20000d62
 80892d8:	080892e9 	.word	0x080892e9
 80892dc:	0808934d 	.word	0x0808934d
 80892e0:	20000d61 	.word	0x20000d61
 80892e4:	20000d60 	.word	0x20000d60

080892e8 <_ZL8spi_readhhPht>:
static int8_t spi_read(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 80892e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80892ea:	460f      	mov	r7, r1
  digitalWrite(cspin, LOW);
 80892ec:	2100      	movs	r1, #0
static int8_t spi_read(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 80892ee:	461d      	mov	r5, r3
 80892f0:	4614      	mov	r4, r2
  digitalWrite(cspin, LOW);
 80892f2:	4606      	mov	r6, r0
 80892f4:	f003 ff4f 	bl	808d196 <digitalWrite>
  if (_BME680_SoftwareSPI_SCK == -1) {
 80892f8:	4b13      	ldr	r3, [pc, #76]	; (8089348 <_ZL8spi_readhhPht+0x60>)
 80892fa:	f993 3000 	ldrsb.w	r3, [r3]
 80892fe:	3301      	adds	r3, #1
 8089300:	d110      	bne.n	8089324 <_ZL8spi_readhhPht+0x3c>
    SPI.begin();
 8089302:	f7ff ff79 	bl	80891f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE5beginEv.isra.0>
        instance().setClockDivider(divider);
 8089306:	f7ff ff15 	bl	8089134 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 808930a:	2140      	movs	r1, #64	; 0x40
 808930c:	f001 fec2 	bl	808b094 <_ZN8SPIClass15setClockDividerEh>
        instance().setBitOrder(order);
 8089310:	f7ff ff10 	bl	8089134 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 8089314:	2101      	movs	r1, #1
 8089316:	f001 fe5f 	bl	808afd8 <_ZN8SPIClass11setBitOrderEh>
        instance().setDataMode(mode);
 808931a:	f7ff ff0b 	bl	8089134 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 808931e:	2100      	movs	r1, #0
 8089320:	f001 fe68 	bl	808aff4 <_ZN8SPIClass11setDataModeEh>
  spi_transfer(reg_addr);
 8089324:	4638      	mov	r0, r7
 8089326:	f7ff ff27 	bl	8089178 <_ZL12spi_transferh>
 808932a:	4425      	add	r5, r4
  while (len--) {
 808932c:	42ac      	cmp	r4, r5
 808932e:	d005      	beq.n	808933c <_ZL8spi_readhhPht+0x54>
    *reg_data = spi_transfer(0x00);
 8089330:	2000      	movs	r0, #0
 8089332:	f7ff ff21 	bl	8089178 <_ZL12spi_transferh>
 8089336:	f804 0b01 	strb.w	r0, [r4], #1
  while (len--) {
 808933a:	e7f7      	b.n	808932c <_ZL8spi_readhhPht+0x44>
  digitalWrite(cspin, HIGH);
 808933c:	4630      	mov	r0, r6
 808933e:	2101      	movs	r1, #1
 8089340:	f003 ff29 	bl	808d196 <digitalWrite>
}
 8089344:	2000      	movs	r0, #0
 8089346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8089348:	20000d62 	.word	0x20000d62

0808934c <_ZL9spi_writehhPht>:
static int8_t spi_write(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 808934c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808934e:	460f      	mov	r7, r1
  digitalWrite(cspin, LOW);
 8089350:	2100      	movs	r1, #0
static int8_t spi_write(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8089352:	461d      	mov	r5, r3
 8089354:	4614      	mov	r4, r2
  digitalWrite(cspin, LOW);
 8089356:	4606      	mov	r6, r0
 8089358:	f003 ff1d 	bl	808d196 <digitalWrite>
  if (_BME680_SoftwareSPI_SCK == -1) {
 808935c:	4b13      	ldr	r3, [pc, #76]	; (80893ac <_ZL9spi_writehhPht+0x60>)
 808935e:	f993 3000 	ldrsb.w	r3, [r3]
 8089362:	3301      	adds	r3, #1
 8089364:	d110      	bne.n	8089388 <_ZL9spi_writehhPht+0x3c>
    SPI.begin();
 8089366:	f7ff ff47 	bl	80891f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE5beginEv.isra.0>
        instance().setClockDivider(divider);
 808936a:	f7ff fee3 	bl	8089134 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 808936e:	2140      	movs	r1, #64	; 0x40
 8089370:	f001 fe90 	bl	808b094 <_ZN8SPIClass15setClockDividerEh>
        instance().setBitOrder(order);
 8089374:	f7ff fede 	bl	8089134 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 8089378:	2101      	movs	r1, #1
 808937a:	f001 fe2d 	bl	808afd8 <_ZN8SPIClass11setBitOrderEh>
        instance().setDataMode(mode);
 808937e:	f7ff fed9 	bl	8089134 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 8089382:	2100      	movs	r1, #0
 8089384:	f001 fe36 	bl	808aff4 <_ZN8SPIClass11setDataModeEh>
  spi_transfer(reg_addr);
 8089388:	4638      	mov	r0, r7
 808938a:	f7ff fef5 	bl	8089178 <_ZL12spi_transferh>
 808938e:	4425      	add	r5, r4
  while (len--) {
 8089390:	42ac      	cmp	r4, r5
 8089392:	d004      	beq.n	808939e <_ZL9spi_writehhPht+0x52>
    spi_transfer(*reg_data);
 8089394:	f814 0b01 	ldrb.w	r0, [r4], #1
 8089398:	f7ff feee 	bl	8089178 <_ZL12spi_transferh>
  while (len--) {
 808939c:	e7f8      	b.n	8089390 <_ZL9spi_writehhPht+0x44>
  digitalWrite(cspin, HIGH);
 808939e:	4630      	mov	r0, r6
 80893a0:	2101      	movs	r1, #1
 80893a2:	f003 fef8 	bl	808d196 <digitalWrite>
}
 80893a6:	2000      	movs	r0, #0
 80893a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80893aa:	bf00      	nop
 80893ac:	20000d62 	.word	0x20000d62

080893b0 <_GLOBAL__sub_I__BME680_SoftwareSPI_MOSI>:
 80893b0:	f001 b8f8 	b.w	808a5a4 <HAL_Pin_Map>

080893b4 <_ZN7HIH61XX5startEv>:

uint8_t HIH61XX::start() {
    /*if (p < 255) {
        digitalWrite(p, HIGH);
    }*/
    f |= RunningFlag;
 80893b4:	7983      	ldrb	r3, [r0, #6]
 80893b6:	f063 037f 	orn	r3, r3, #127	; 0x7f

        //  use a stream to control the sensor
        uint8_t commandRequest(Stream & stream);
    protected:
        uint8_t setError(uint8_t error) {
            f = (f & ~ErrorMask) | error;
 80893ba:	f023 030f 	bic.w	r3, r3, #15
 80893be:	7183      	strb	r3, [r0, #6]
    return setError(0);
}
 80893c0:	2000      	movs	r0, #0
 80893c2:	4770      	bx	lr

080893c4 <_ZN7HIH61XX4stopEv>:

uint8_t HIH61XX::stop() {
    /*if (p < 255) {
        digitalWrite(p, LOW);
    }*/
    f &= ~RunningFlag;
 80893c4:	7983      	ldrb	r3, [r0, #6]
 80893c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80893ca:	7183      	strb	r3, [r0, #6]
    return setError(0);
}
 80893cc:	2000      	movs	r0, #0
 80893ce:	4770      	bx	lr

080893d0 <_ZN7HIH61XXC1Eh>:
HIH61XX::HIH61XX(uint8_t address): a(address), f(0), h(0), t(0) {
 80893d0:	4a03      	ldr	r2, [pc, #12]	; (80893e0 <_ZN7HIH61XXC1Eh+0x10>)
 80893d2:	7101      	strb	r1, [r0, #4]
 80893d4:	6002      	str	r2, [r0, #0]
 80893d6:	2200      	movs	r2, #0
 80893d8:	7182      	strb	r2, [r0, #6]
 80893da:	6082      	str	r2, [r0, #8]
}
 80893dc:	4770      	bx	lr
 80893de:	bf00      	nop
 80893e0:	08093fec 	.word	0x08093fec

080893e4 <_ZN7HIH61XX6updateEv>:

uint8_t HIH61XX::update() {
 80893e4:	b570      	push	{r4, r5, r6, lr}
            return f & RunningFlag;
 80893e6:	f990 3006 	ldrsb.w	r3, [r0, #6]
 80893ea:	4604      	mov	r4, r0
    if (!isRunning()) {
 80893ec:	2b00      	cmp	r3, #0
 80893ee:	db07      	blt.n	8089400 <_ZN7HIH61XX6updateEv+0x1c>
        return setError(NotRunningError);
 80893f0:	2603      	movs	r6, #3
            f = (f & ~ErrorMask) | error;
 80893f2:	f023 030f 	bic.w	r3, r3, #15
 80893f6:	f043 0303 	orr.w	r3, r3, #3
 80893fa:	7183      	strb	r3, [r0, #6]
    } else {
        Serial.print("...");
        Serial.println(azer);
        return setError(ConnectionError);
    }
}
 80893fc:	4630      	mov	r0, r6
 80893fe:	bd70      	pop	{r4, r5, r6, pc}
    Wire.beginTransmission(a);
 8089400:	f003 ff5e 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8089404:	7921      	ldrb	r1, [r4, #4]
 8089406:	f003 fcf7 	bl	808cdf8 <_ZN7TwoWire17beginTransmissionEh>
    int azer = Wire.endTransmission();
 808940a:	f003 ff59 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 808940e:	f003 fd16 	bl	808ce3e <_ZN7TwoWire15endTransmissionEv>
    if (azer == 0) {
 8089412:	4606      	mov	r6, r0
 8089414:	2800      	cmp	r0, #0
 8089416:	d15b      	bne.n	80894d0 <_ZN7HIH61XX6updateEv+0xec>
            delay(10);
 8089418:	200a      	movs	r0, #10
 808941a:	f002 fe05 	bl	808c028 <delay>
            Wire.requestFrom(a, (uint8_t) 4);
 808941e:	f003 ff4f 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8089422:	2204      	movs	r2, #4
 8089424:	7921      	ldrb	r1, [r4, #4]
 8089426:	f003 fce4 	bl	808cdf2 <_ZN7TwoWire11requestFromEhj>
            if (Wire.available()) {
 808942a:	f003 ff49 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 808942e:	6803      	ldr	r3, [r0, #0]
 8089430:	691b      	ldr	r3, [r3, #16]
 8089432:	4798      	blx	r3
 8089434:	2800      	cmp	r0, #0
 8089436:	d043      	beq.n	80894c0 <_ZN7HIH61XX6updateEv+0xdc>
                x = Wire.read();
 8089438:	f003 ff42 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 808943c:	6803      	ldr	r3, [r0, #0]
 808943e:	695b      	ldr	r3, [r3, #20]
 8089440:	4798      	blx	r3
 8089442:	4605      	mov	r5, r0
                y = Wire.read();
 8089444:	f003 ff3c 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8089448:	6803      	ldr	r3, [r0, #0]
 808944a:	695b      	ldr	r3, [r3, #20]
 808944c:	4798      	blx	r3
                s = x >> 6;
 808944e:	f3c5 1381 	ubfx	r3, r5, #6, #2
                switch (s) {
 8089452:	2b01      	cmp	r3, #1
 8089454:	d023      	beq.n	808949e <_ZN7HIH61XX6updateEv+0xba>
 8089456:	2b02      	cmp	r3, #2
 8089458:	d026      	beq.n	80894a8 <_ZN7HIH61XX6updateEv+0xc4>
 808945a:	2b00      	cmp	r3, #0
 808945c:	d1dc      	bne.n	8089418 <_ZN7HIH61XX6updateEv+0x34>
                        h = (((uint16_t)(x & 0x3f)) << 8) | y;
 808945e:	022d      	lsls	r5, r5, #8
 8089460:	b2c0      	uxtb	r0, r0
 8089462:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
 8089466:	4305      	orrs	r5, r0
 8089468:	8125      	strh	r5, [r4, #8]
                        x = Wire.read();
 808946a:	f003 ff29 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 808946e:	6803      	ldr	r3, [r0, #0]
 8089470:	695b      	ldr	r3, [r3, #20]
 8089472:	4798      	blx	r3
 8089474:	4605      	mov	r5, r0
                        y = Wire.read();
 8089476:	f003 ff23 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 808947a:	6803      	ldr	r3, [r0, #0]
                        t = ((((uint16_t) x) << 8) | y) >> 2;
 808947c:	022d      	lsls	r5, r5, #8
                        y = Wire.read();
 808947e:	695b      	ldr	r3, [r3, #20]
 8089480:	4798      	blx	r3
                        t = ((((uint16_t) x) << 8) | y) >> 2;
 8089482:	b2ad      	uxth	r5, r5
 8089484:	b2c0      	uxtb	r0, r0
 8089486:	4305      	orrs	r5, r0
 8089488:	10ad      	asrs	r5, r5, #2
 808948a:	8165      	strh	r5, [r4, #10]
                        Wire.endTransmission();
 808948c:	f003 ff18 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 8089490:	f003 fcd5 	bl	808ce3e <_ZN7TwoWire15endTransmissionEv>
 8089494:	79a3      	ldrb	r3, [r4, #6]
 8089496:	f023 030f 	bic.w	r3, r3, #15
 808949a:	71a3      	strb	r3, [r4, #6]
                        return setError(0);
 808949c:	e7ae      	b.n	80893fc <_ZN7HIH61XX6updateEv+0x18>
                        Wire.endTransmission();
 808949e:	f003 ff0f 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 80894a2:	f003 fccc 	bl	808ce3e <_ZN7TwoWire15endTransmissionEv>
                        break;
 80894a6:	e7b7      	b.n	8089418 <_ZN7HIH61XX6updateEv+0x34>
                        Wire.endTransmission();
 80894a8:	f003 ff0a 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 80894ac:	f003 fcc7 	bl	808ce3e <_ZN7TwoWire15endTransmissionEv>
 80894b0:	79a3      	ldrb	r3, [r4, #6]
                        return setError(CommandModeError);
 80894b2:	2604      	movs	r6, #4
 80894b4:	f023 030f 	bic.w	r3, r3, #15
 80894b8:	f043 0304 	orr.w	r3, r3, #4
 80894bc:	71a3      	strb	r3, [r4, #6]
 80894be:	e79d      	b.n	80893fc <_ZN7HIH61XX6updateEv+0x18>
 80894c0:	79a3      	ldrb	r3, [r4, #6]
                return setError(CommunicationError);
 80894c2:	2602      	movs	r6, #2
 80894c4:	f023 030f 	bic.w	r3, r3, #15
 80894c8:	f043 0302 	orr.w	r3, r3, #2
 80894cc:	71a3      	strb	r3, [r4, #6]
 80894ce:	e795      	b.n	80893fc <_ZN7HIH61XX6updateEv+0x18>
        Serial.print("...");
 80894d0:	f003 fa9c 	bl	808ca0c <_Z16_fetch_usbserialv>
 80894d4:	490a      	ldr	r1, [pc, #40]	; (8089500 <_ZN7HIH61XX6updateEv+0x11c>)
 80894d6:	f002 f9cb 	bl	808b870 <_ZN5Print5printEPKc>
        Serial.println(azer);
 80894da:	f003 fa97 	bl	808ca0c <_Z16_fetch_usbserialv>
 80894de:	4605      	mov	r5, r0
        return printNumber(val, base) + t;
 80894e0:	4631      	mov	r1, r6
 80894e2:	220a      	movs	r2, #10
 80894e4:	f002 f9eb 	bl	808b8be <_ZN5Print11printNumberEmh>
        n += println();
 80894e8:	4628      	mov	r0, r5
 80894ea:	f002 f9c8 	bl	808b87e <_ZN5Print7printlnEv>
 80894ee:	79a3      	ldrb	r3, [r4, #6]
        return setError(ConnectionError);
 80894f0:	2601      	movs	r6, #1
 80894f2:	f023 030f 	bic.w	r3, r3, #15
 80894f6:	f043 0301 	orr.w	r3, r3, #1
 80894fa:	71a3      	strb	r3, [r4, #6]
 80894fc:	e77e      	b.n	80893fc <_ZN7HIH61XX6updateEv+0x18>
 80894fe:	bf00      	nop
 8089500:	08093cf8 	.word	0x08093cf8

08089504 <_ZN7HIH61XX14commandProcessER6Streamh>:
    }
    return commandReply(stream, 255);
}

uint8_t HIH61XX::commandProcess(Stream & stream, uint8_t command) {
    switch (command) {
 8089504:	2a68      	cmp	r2, #104	; 0x68
uint8_t HIH61XX::commandProcess(Stream & stream, uint8_t command) {
 8089506:	b538      	push	{r3, r4, r5, lr}
 8089508:	460d      	mov	r5, r1
    switch (command) {
 808950a:	d01a      	beq.n	8089542 <_ZN7HIH61XX14commandProcessER6Streamh+0x3e>
 808950c:	d80c      	bhi.n	8089528 <_ZN7HIH61XX14commandProcessER6Streamh+0x24>
 808950e:	2a31      	cmp	r2, #49	; 0x31
 8089510:	d038      	beq.n	8089584 <_ZN7HIH61XX14commandProcessER6Streamh+0x80>
 8089512:	2a61      	cmp	r2, #97	; 0x61
 8089514:	d030      	beq.n	8089578 <_ZN7HIH61XX14commandProcessER6Streamh+0x74>
 8089516:	2a30      	cmp	r2, #48	; 0x30
 8089518:	d038      	beq.n	808958c <_ZN7HIH61XX14commandProcessER6Streamh+0x88>
            return error;
        }

        virtual uint8_t commandProcess(Stream & stream, uint8_t command);
        uint8_t commandReply(Stream & stream, uint8_t result) {
            stream.println(result);
 808951a:	220a      	movs	r2, #10
 808951c:	21fe      	movs	r1, #254	; 0xfe
 808951e:	4628      	mov	r0, r5
 8089520:	f7fe f8f0 	bl	8087704 <_ZN5Print7printlnIhLi0EEEjT_i>
            //  stop
        case '0':
            return commandReply(stream, stop());
    }

    return commandReply(stream, 254);
 8089524:	24fe      	movs	r4, #254	; 0xfe
 8089526:	e018      	b.n	808955a <_ZN7HIH61XX14commandProcessER6Streamh+0x56>
    switch (command) {
 8089528:	2a74      	cmp	r2, #116	; 0x74
 808952a:	d018      	beq.n	808955e <_ZN7HIH61XX14commandProcessER6Streamh+0x5a>
 808952c:	2a75      	cmp	r2, #117	; 0x75
 808952e:	d1f4      	bne.n	808951a <_ZN7HIH61XX14commandProcessER6Streamh+0x16>
            return commandReply(stream, update());
 8089530:	f7ff ff58 	bl	80893e4 <_ZN7HIH61XX6updateEv>
            return commandReply(stream, stop());
 8089534:	4604      	mov	r4, r0
 8089536:	4601      	mov	r1, r0
 8089538:	220a      	movs	r2, #10
 808953a:	4628      	mov	r0, r5
 808953c:	f7fe f8e2 	bl	8087704 <_ZN5Print7printlnIhLi0EEEjT_i>
 8089540:	e00b      	b.n	808955a <_ZN7HIH61XX14commandProcessER6Streamh+0x56>
            return float(raw) / 16382;
 8089542:	8900      	ldrh	r0, [r0, #8]
 8089544:	f004 fcd8 	bl	808def8 <__aeabi_ui2f>
 8089548:	4912      	ldr	r1, [pc, #72]	; (8089594 <_ZN7HIH61XX14commandProcessER6Streamh+0x90>)
 808954a:	f004 fde1 	bl	808e110 <__aeabi_fdiv>
            return (float(raw) / 16382) * 165 - 40;
 808954e:	4601      	mov	r1, r0
            return result;
        }
        template < typename T > uint8_t commandReply(Stream & stream, uint8_t result,
            const T & data) {
            stream.println(data);
 8089550:	2202      	movs	r2, #2
 8089552:	4628      	mov	r0, r5
 8089554:	f002 fa9e 	bl	808ba94 <_ZN5Print7printlnEfi>
            return commandReply(stream, 0, temperature());
 8089558:	2400      	movs	r4, #0
}
 808955a:	4620      	mov	r0, r4
 808955c:	bd38      	pop	{r3, r4, r5, pc}
            return (float(raw) / 16382) * 165 - 40;
 808955e:	8940      	ldrh	r0, [r0, #10]
 8089560:	f004 fcca 	bl	808def8 <__aeabi_ui2f>
 8089564:	490b      	ldr	r1, [pc, #44]	; (8089594 <_ZN7HIH61XX14commandProcessER6Streamh+0x90>)
 8089566:	f004 fdd3 	bl	808e110 <__aeabi_fdiv>
 808956a:	490b      	ldr	r1, [pc, #44]	; (8089598 <_ZN7HIH61XX14commandProcessER6Streamh+0x94>)
 808956c:	f004 fd1c 	bl	808dfa8 <__aeabi_fmul>
 8089570:	490a      	ldr	r1, [pc, #40]	; (808959c <_ZN7HIH61XX14commandProcessER6Streamh+0x98>)
 8089572:	f004 fc0f 	bl	808dd94 <__aeabi_fsub>
 8089576:	e7ea      	b.n	808954e <_ZN7HIH61XX14commandProcessER6Streamh+0x4a>
            stream.println(data);
 8089578:	7901      	ldrb	r1, [r0, #4]
 808957a:	220a      	movs	r2, #10
 808957c:	4628      	mov	r0, r5
 808957e:	f7fe f8c1 	bl	8087704 <_ZN5Print7printlnIhLi0EEEjT_i>
 8089582:	e7e9      	b.n	8089558 <_ZN7HIH61XX14commandProcessER6Streamh+0x54>
            return commandReply(stream, start());
 8089584:	6803      	ldr	r3, [r0, #0]
 8089586:	681b      	ldr	r3, [r3, #0]
            return commandReply(stream, stop());
 8089588:	4798      	blx	r3
 808958a:	e7d3      	b.n	8089534 <_ZN7HIH61XX14commandProcessER6Streamh+0x30>
 808958c:	6803      	ldr	r3, [r0, #0]
 808958e:	685b      	ldr	r3, [r3, #4]
 8089590:	e7fa      	b.n	8089588 <_ZN7HIH61XX14commandProcessER6Streamh+0x84>
 8089592:	bf00      	nop
 8089594:	467ff800 	.word	0x467ff800
 8089598:	43250000 	.word	0x43250000
 808959c:	42200000 	.word	0x42200000

080895a0 <_GLOBAL__sub_I__ZN7HIH61XXC2Eh>:
 80895a0:	f001 b800 	b.w	808a5a4 <HAL_Pin_Map>

080895a4 <_ZN23GoogleMapsDeviceLocatorD1Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {

}

GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
 80895a4:	b510      	push	{r4, lr}
 80895a6:	4604      	mov	r4, r0
 80895a8:	4b05      	ldr	r3, [pc, #20]	; (80895c0 <_ZN23GoogleMapsDeviceLocatorD1Ev+0x1c>)
 80895aa:	f840 3b2c 	str.w	r3, [r0], #44
 80895ae:	f001 ff17 	bl	808b3e0 <_ZN6StringD1Ev>
 80895b2:	f104 000c 	add.w	r0, r4, #12
 80895b6:	f001 ff13 	bl	808b3e0 <_ZN6StringD1Ev>

}
 80895ba:	4620      	mov	r0, r4
 80895bc:	bd10      	pop	{r4, pc}
 80895be:	bf00      	nop
 80895c0:	08094094 	.word	0x08094094

080895c4 <_ZN23GoogleMapsDeviceLocatorD0Ev>:
GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
 80895c4:	b510      	push	{r4, lr}
 80895c6:	4604      	mov	r4, r0
}
 80895c8:	f7ff ffec 	bl	80895a4 <_ZN23GoogleMapsDeviceLocatorD1Ev>
 80895cc:	4620      	mov	r0, r4
 80895ce:	2144      	movs	r1, #68	; 0x44
 80895d0:	f003 fecb 	bl	808d36a <_ZdlPvj>
 80895d4:	4620      	mov	r0, r4
 80895d6:	bd10      	pop	{r4, pc}

080895d8 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData>:
#endif /* Wiring_WiFi */


#if Wiring_Cellular

static void cellularAddTower(const CellularHelperEnvironmentCellData *cellData) {
 80895d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80895da:	4604      	mov	r4, r0
	// The - 4 factor here to leave room for the closing JSON array ], object }}, and the trailing null
	size_t spaceLeft = &requestBuf[sizeof(requestBuf) - 4] - requestCur;
 80895dc:	4e16      	ldr	r6, [pc, #88]	; (8089638 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x60>)

	size_t sizeNeeded = snprintf(requestCur, spaceLeft,
 80895de:	6863      	ldr	r3, [r4, #4]
	size_t spaceLeft = &requestBuf[sizeof(requestBuf) - 4] - requestCur;
 80895e0:	6830      	ldr	r0, [r6, #0]
 80895e2:	4d16      	ldr	r5, [pc, #88]	; (808963c <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x64>)
	size_t sizeNeeded = snprintf(requestCur, spaceLeft,
 80895e4:	f810 1c01 	ldrb.w	r1, [r0, #-1]
 80895e8:	9303      	str	r3, [sp, #12]
 80895ea:	6823      	ldr	r3, [r4, #0]
 80895ec:	4a14      	ldr	r2, [pc, #80]	; (8089640 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x68>)
 80895ee:	9302      	str	r3, [sp, #8]
 80895f0:	68a3      	ldr	r3, [r4, #8]
	size_t spaceLeft = &requestBuf[sizeof(requestBuf) - 4] - requestCur;
 80895f2:	1a2d      	subs	r5, r5, r0
	size_t sizeNeeded = snprintf(requestCur, spaceLeft,
 80895f4:	9301      	str	r3, [sp, #4]
 80895f6:	68e3      	ldr	r3, [r4, #12]
 80895f8:	9300      	str	r3, [sp, #0]
 80895fa:	4b12      	ldr	r3, [pc, #72]	; (8089644 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x6c>)
 80895fc:	295b      	cmp	r1, #91	; 0x5b
 80895fe:	bf18      	it	ne
 8089600:	4613      	movne	r3, r2
 8089602:	4629      	mov	r1, r5
 8089604:	4a10      	ldr	r2, [pc, #64]	; (8089648 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x70>)
 8089606:	f001 fb15 	bl	808ac34 <snprintf>
			"%s{\"i\":%d,\"l\":%u,\"c\":%d,\"n\":%d}",
			(requestCur[-1] == '[' ? "" : ","),
			cellData->ci, cellData->lac, cellData->mcc, cellData->mnc);

	if (sizeNeeded <= spaceLeft && cellData->lac != 0 && cellData->lac != 65535 && cellData->mcc != 65535 && cellData->mnc != 65535) {
 808960a:	4285      	cmp	r5, r0
 808960c:	d312      	bcc.n	8089634 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x5c>
 808960e:	68a2      	ldr	r2, [r4, #8]
 8089610:	b182      	cbz	r2, 8089634 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x5c>
 8089612:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8089616:	429a      	cmp	r2, r3
 8089618:	d00c      	beq.n	8089634 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x5c>
 808961a:	6822      	ldr	r2, [r4, #0]
 808961c:	429a      	cmp	r2, r3
 808961e:	d009      	beq.n	8089634 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x5c>
 8089620:	6862      	ldr	r2, [r4, #4]
 8089622:	429a      	cmp	r2, r3
 8089624:	d006      	beq.n	8089634 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x5c>
		// There is enough space to store the whole entry, so save it
		requestCur += sizeNeeded;
 8089626:	6833      	ldr	r3, [r6, #0]
		numAdded++;
 8089628:	4a08      	ldr	r2, [pc, #32]	; (808964c <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x74>)
		requestCur += sizeNeeded;
 808962a:	4418      	add	r0, r3
		numAdded++;
 808962c:	6813      	ldr	r3, [r2, #0]
		requestCur += sizeNeeded;
 808962e:	6030      	str	r0, [r6, #0]
		numAdded++;
 8089630:	3301      	adds	r3, #1
 8089632:	6013      	str	r3, [r2, #0]
	}

}
 8089634:	b004      	add	sp, #16
 8089636:	bd70      	pop	{r4, r5, r6, pc}
 8089638:	20000e64 	.word	0x20000e64
 808963c:	20000e5f 	.word	0x20000e5f
 8089640:	08094026 	.word	0x08094026
 8089644:	080942e2 	.word	0x080942e2
 8089648:	08093ff8 	.word	0x08093ff8
 808964c:	20000e6c 	.word	0x20000e6c

08089650 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_>:
void GoogleMapsDeviceLocator::subscriptionHandler(const char *event, const char *data) {
 8089650:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8089654:	4604      	mov	r4, r0
	if (callback) {
 8089656:	6a63      	ldr	r3, [r4, #36]	; 0x24
void GoogleMapsDeviceLocator::subscriptionHandler(const char *event, const char *data) {
 8089658:	4610      	mov	r0, r2
	if (callback) {
 808965a:	b383      	cbz	r3, 80896be <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x6e>
		char *mutableCopy = strdup(data);
 808965c:	f005 fa4c 	bl	808eaf8 <strdup>
		part = strtok_r(mutableCopy, ",", &end);
 8089660:	4918      	ldr	r1, [pc, #96]	; (80896c4 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x74>)
 8089662:	aa01      	add	r2, sp, #4
		char *mutableCopy = strdup(data);
 8089664:	4605      	mov	r5, r0
		part = strtok_r(mutableCopy, ",", &end);
 8089666:	f006 fe53 	bl	8090310 <strtok_r>
		if (part) {
 808966a:	b328      	cbz	r0, 80896b8 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x68>
			lat = atof(part);
 808966c:	f005 f8cc 	bl	808e808 <atof>
			part = strtok_r(NULL, ",", &end);
 8089670:	aa01      	add	r2, sp, #4
			lat = atof(part);
 8089672:	4606      	mov	r6, r0
 8089674:	460f      	mov	r7, r1
			part = strtok_r(NULL, ",", &end);
 8089676:	2000      	movs	r0, #0
 8089678:	4912      	ldr	r1, [pc, #72]	; (80896c4 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x74>)
 808967a:	f006 fe49 	bl	8090310 <strtok_r>
			if (part) {
 808967e:	b1d8      	cbz	r0, 80896b8 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x68>
				lon = atof(part);
 8089680:	f005 f8c2 	bl	808e808 <atof>
				part = strtok_r(NULL, ",", &end);
 8089684:	aa01      	add	r2, sp, #4
				lon = atof(part);
 8089686:	4680      	mov	r8, r0
 8089688:	4689      	mov	r9, r1
				part = strtok_r(NULL, ",", &end);
 808968a:	2000      	movs	r0, #0
 808968c:	490d      	ldr	r1, [pc, #52]	; (80896c4 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x74>)
 808968e:	f006 fe3f 	bl	8090310 <strtok_r>
				if (part) {
 8089692:	b188      	cbz	r0, 80896b8 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x68>
					accuracy = atof(part);
 8089694:	f005 f8b8 	bl	808e808 <atof>
 8089698:	f004 fb28 	bl	808dcec <__aeabi_d2f>
				lon = atof(part);
 808969c:	4649      	mov	r1, r9
					accuracy = atof(part);
 808969e:	4682      	mov	sl, r0
				lon = atof(part);
 80896a0:	4640      	mov	r0, r8
 80896a2:	f004 fb23 	bl	808dcec <__aeabi_d2f>
 80896a6:	4680      	mov	r8, r0
			lat = atof(part);
 80896a8:	4639      	mov	r1, r7
 80896aa:	4630      	mov	r0, r6
 80896ac:	f004 fb1e 	bl	808dcec <__aeabi_d2f>
					(*callback)(lat, lon, accuracy);
 80896b0:	4652      	mov	r2, sl
 80896b2:	4641      	mov	r1, r8
 80896b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80896b6:	4798      	blx	r3
		free(mutableCopy);
 80896b8:	4628      	mov	r0, r5
 80896ba:	f001 fa8b 	bl	808abd4 <free>
}
 80896be:	b002      	add	sp, #8
 80896c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80896c4:	08094026 	.word	0x08094026

080896c8 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0>:

	return requestBuf;
}


const char *GoogleMapsDeviceLocator::cellularScan() {
 80896c8:	b570      	push	{r4, r5, r6, lr}
 80896ca:	b0ca      	sub	sp, #296	; 0x128
};

template <size_t MAX_NEIGHBOR_CELLS>
class CellularHelperEnvironmentResponseStatic : public CellularHelperEnvironmentResponse {
public:
	explicit CellularHelperEnvironmentResponseStatic() : CellularHelperEnvironmentResponse(staticNeighbors, MAX_NEIGHBOR_CELLS) {
 80896cc:	2204      	movs	r2, #4
 80896ce:	a91e      	add	r1, sp, #120	; 0x78
 80896d0:	a805      	add	r0, sp, #20
 80896d2:	f000 fb81 	bl	8089dd8 <_ZN33CellularHelperEnvironmentResponseC1EP33CellularHelperEnvironmentCellDataj>
 80896d6:	2504      	movs	r5, #4
class CellularHelperEnvironmentCellData { // 44 bytes
 80896d8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80896dc:	22ff      	movs	r2, #255	; 0xff
 80896de:	2100      	movs	r1, #0
	explicit CellularHelperEnvironmentResponseStatic() : CellularHelperEnvironmentResponse(staticNeighbors, MAX_NEIGHBOR_CELLS) {
 80896e0:	4b2e      	ldr	r3, [pc, #184]	; (808979c <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0xd4>)
 80896e2:	9305      	str	r3, [sp, #20]
 80896e4:	ab05      	add	r3, sp, #20
 80896e6:	3d01      	subs	r5, #1
class CellularHelperEnvironmentCellData { // 44 bytes
 80896e8:	e9c3 0219 	strd	r0, r2, [r3, #100]	; 0x64
 80896ec:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
 80896f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	explicit CellularHelperEnvironmentResponseStatic() : CellularHelperEnvironmentResponse(staticNeighbors, MAX_NEIGHBOR_CELLS) {
 80896f4:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80896f8:	d1f5      	bne.n	80896e6 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0x1e>
	}

	// First try to get info on neighboring cells. This doesn't work for me using the U260
	CellularHelperEnvironmentResponseStatic<4> envResp;

	CellularHelper.getEnvironment(5, envResp);
 80896fa:	2105      	movs	r1, #5
 80896fc:	4828      	ldr	r0, [pc, #160]	; (80897a0 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0xd8>)
 80896fe:	aa05      	add	r2, sp, #20
 8089700:	f000 fe82 	bl	808a408 <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse>

	if (envResp.resp != RESP_OK) {
 8089704:	9b06      	ldr	r3, [sp, #24]
 8089706:	3302      	adds	r3, #2
 8089708:	d004      	beq.n	8089714 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0x4c>
		// We couldn't get neighboring cells, so try just the receiving cell
		CellularHelper.getEnvironment(3, envResp);
 808970a:	2103      	movs	r1, #3
 808970c:	4824      	ldr	r0, [pc, #144]	; (80897a0 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0xd8>)
 808970e:	aa05      	add	r2, sp, #20
 8089710:	f000 fe7a 	bl	808a408 <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse>
	}
	// envResp.serialDebug();


	// We know these things fit, so just using sprintf instead of snprintf here
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",",
 8089714:	4c23      	ldr	r4, [pc, #140]	; (80897a4 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0xdc>)
			CellularHelper.getOperatorName().c_str());
 8089716:	2209      	movs	r2, #9
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",",
 8089718:	6826      	ldr	r6, [r4, #0]
			CellularHelper.getOperatorName().c_str());
 808971a:	4921      	ldr	r1, [pc, #132]	; (80897a0 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0xd8>)
 808971c:	a801      	add	r0, sp, #4
 808971e:	f000 fe41 	bl	808a3a4 <_ZNK19CellularHelperClass15getOperatorNameEi>
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",",
 8089722:	9a01      	ldr	r2, [sp, #4]
 8089724:	4920      	ldr	r1, [pc, #128]	; (80897a8 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0xe0>)
 8089726:	4630      	mov	r0, r6
 8089728:	f001 fa64 	bl	808abf4 <sprintf>
 808972c:	6823      	ldr	r3, [r4, #0]
	requestCur += sprintf(requestCur, "\"a\":[");

	cellularAddTower(&envResp.service);

	for(size_t ii = 0; ii < envResp.getNumNeighbors(); ii++) {
		cellularAddTower(&envResp.neighbors[ii]);
 808972e:	262c      	movs	r6, #44	; 0x2c
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",",
 8089730:	4403      	add	r3, r0
			CellularHelper.getOperatorName().c_str());
 8089732:	a801      	add	r0, sp, #4
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",",
 8089734:	6023      	str	r3, [r4, #0]
			CellularHelper.getOperatorName().c_str());
 8089736:	f001 fe53 	bl	808b3e0 <_ZN6StringD1Ev>
	requestCur += sprintf(requestCur, "\"a\":[");
 808973a:	6823      	ldr	r3, [r4, #0]
 808973c:	491b      	ldr	r1, [pc, #108]	; (80897ac <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0xe4>)
 808973e:	4618      	mov	r0, r3
 8089740:	f005 f9d1 	bl	808eae6 <strcpy>
 8089744:	4603      	mov	r3, r0
	cellularAddTower(&envResp.service);
 8089746:	a810      	add	r0, sp, #64	; 0x40
	requestCur += sprintf(requestCur, "\"a\":[");
 8089748:	3305      	adds	r3, #5
 808974a:	6023      	str	r3, [r4, #0]
	cellularAddTower(&envResp.service);
 808974c:	f7ff ff44 	bl	80895d8 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData>
	for(size_t ii = 0; ii < envResp.getNumNeighbors(); ii++) {
 8089750:	a805      	add	r0, sp, #20
 8089752:	f000 fd11 	bl	808a178 <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv>
 8089756:	42a8      	cmp	r0, r5
 8089758:	d906      	bls.n	8089768 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0xa0>
		cellularAddTower(&envResp.neighbors[ii]);
 808975a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 808975c:	fb06 0005 	mla	r0, r6, r5, r0
 8089760:	f7ff ff3a 	bl	80895d8 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData>
	for(size_t ii = 0; ii < envResp.getNumNeighbors(); ii++) {
 8089764:	3501      	adds	r5, #1
 8089766:	e7f3      	b.n	8089750 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0x88>
	}

	*requestCur++ = ']';
 8089768:	225d      	movs	r2, #93	; 0x5d
 808976a:	6823      	ldr	r3, [r4, #0]
 808976c:	701a      	strb	r2, [r3, #0]
	*requestCur++ = '}';
 808976e:	227d      	movs	r2, #125	; 0x7d
 8089770:	705a      	strb	r2, [r3, #1]
	*requestCur++ = '}';
 8089772:	709a      	strb	r2, [r3, #2]
	*requestCur++ = 0;
 8089774:	1d1a      	adds	r2, r3, #4
 8089776:	6022      	str	r2, [r4, #0]
 8089778:	2200      	movs	r2, #0
 808977a:	70da      	strb	r2, [r3, #3]

	if (numAdded == 0) {
 808977c:	4b0c      	ldr	r3, [pc, #48]	; (80897b0 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0xe8>)
 808977e:	681b      	ldr	r3, [r3, #0]
 8089780:	b90b      	cbnz	r3, 8089786 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0xbe>
		requestBuf[0] = 0;
 8089782:	4a0c      	ldr	r2, [pc, #48]	; (80897b4 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0xec>)
 8089784:	7013      	strb	r3, [r2, #0]
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 8089786:	4b0c      	ldr	r3, [pc, #48]	; (80897b8 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0xf0>)
 8089788:	a80c      	add	r0, sp, #48	; 0x30
 808978a:	9305      	str	r3, [sp, #20]
 808978c:	f001 fe28 	bl	808b3e0 <_ZN6StringD1Ev>
 8089790:	a808      	add	r0, sp, #32
 8089792:	f001 fe25 	bl	808b3e0 <_ZN6StringD1Ev>
	}

	return requestBuf;
}
 8089796:	4807      	ldr	r0, [pc, #28]	; (80897b4 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0xec>)
 8089798:	b04a      	add	sp, #296	; 0x128
 808979a:	bd70      	pop	{r4, r5, r6, pc}
 808979c:	08094088 	.word	0x08094088
 80897a0:	20000e70 	.word	0x20000e70
 80897a4:	20000e64 	.word	0x20000e64
 80897a8:	08094018 	.word	0x08094018
 80897ac:	08094028 	.word	0x08094028
 80897b0:	20000e6c 	.word	0x20000e6c
 80897b4:	20000d63 	.word	0x20000d63
 80897b8:	08094300 	.word	0x08094300

080897bc <_ZNSt14_Function_base13_Base_managerISt5_BindIFM23GoogleMapsDeviceLocatorFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80897bc:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80897be:	b538      	push	{r3, r4, r5, lr}
 80897c0:	4604      	mov	r4, r0
	  switch (__op)
 80897c2:	d007      	beq.n	80897d4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM23GoogleMapsDeviceLocatorFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x18>
 80897c4:	2a03      	cmp	r2, #3
 80897c6:	d011      	beq.n	80897ec <_ZNSt14_Function_base13_Base_managerISt5_BindIFM23GoogleMapsDeviceLocatorFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x30>
 80897c8:	2a01      	cmp	r2, #1
 80897ca:	d101      	bne.n	80897d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM23GoogleMapsDeviceLocatorFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80897cc:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
 80897ce:	6023      	str	r3, [r4, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80897d0:	2000      	movs	r0, #0
 80897d2:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80897d4:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
 80897d6:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80897d8:	f7f6 fc5f 	bl	808009a <_Znwj>
 80897dc:	4603      	mov	r3, r0
 80897de:	2800      	cmp	r0, #0
 80897e0:	d0f5      	beq.n	80897ce <_ZNSt14_Function_base13_Base_managerISt5_BindIFM23GoogleMapsDeviceLocatorFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
 80897e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80897e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80897ea:	e7f0      	b.n	80897ce <_ZNSt14_Function_base13_Base_managerISt5_BindIFM23GoogleMapsDeviceLocatorFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
 80897ec:	6800      	ldr	r0, [r0, #0]
 80897ee:	2800      	cmp	r0, #0
 80897f0:	d0ee      	beq.n	80897d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM23GoogleMapsDeviceLocatorFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
 80897f2:	210c      	movs	r1, #12
 80897f4:	f003 fdb9 	bl	808d36a <_ZdlPvj>
 80897f8:	e7ea      	b.n	80897d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM23GoogleMapsDeviceLocatorFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>

080897fa <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM23GoogleMapsDeviceLocatorFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS1_SH_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80897fa:	b470      	push	{r4, r5, r6}
	    return __source._M_access<_Functor*>();
 80897fc:	6803      	ldr	r3, [r0, #0]
      // Call unqualified
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return std::__invoke(_M_f,
 80897fe:	6809      	ldr	r1, [r1, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
 8089800:	685c      	ldr	r4, [r3, #4]
 8089802:	689d      	ldr	r5, [r3, #8]
 8089804:	1066      	asrs	r6, r4, #1
 8089806:	eb05 0064 	add.w	r0, r5, r4, asr #1
 808980a:	07e4      	lsls	r4, r4, #31
 808980c:	bf48      	it	mi
 808980e:	59ac      	ldrmi	r4, [r5, r6]
 8089810:	681b      	ldr	r3, [r3, #0]
 8089812:	6812      	ldr	r2, [r2, #0]
 8089814:	bf48      	it	mi
 8089816:	58e3      	ldrmi	r3, [r4, r3]
      {
	(*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
 8089818:	bc70      	pop	{r4, r5, r6}
 808981a:	4718      	bx	r3

0808981c <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 808981c:	b510      	push	{r4, lr}
      if (_M_manager)
 808981e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 8089820:	4604      	mov	r4, r0
      if (_M_manager)
 8089822:	b113      	cbz	r3, 808982a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8089824:	2203      	movs	r2, #3
 8089826:	4601      	mov	r1, r0
 8089828:	4798      	blx	r3
    }
 808982a:	4620      	mov	r0, r4
 808982c:	bd10      	pop	{r4, pc}
	...

08089830 <_ZN23GoogleMapsDeviceLocatorC1Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
 8089830:	b538      	push	{r3, r4, r5, lr}
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
 8089832:	4b0f      	ldr	r3, [pc, #60]	; (8089870 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x40>)
 8089834:	2500      	movs	r5, #0
 8089836:	6003      	str	r3, [r0, #0]
 8089838:	f242 7310 	movw	r3, #10000	; 0x2710
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
 808983c:	4604      	mov	r4, r0
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
 808983e:	e9c0 5301 	strd	r5, r3, [r0, #4]
 8089842:	490c      	ldr	r1, [pc, #48]	; (8089874 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x44>)
 8089844:	300c      	adds	r0, #12
 8089846:	f001 fe15 	bl	808b474 <_ZN6StringC1EPKc>
 808984a:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 808984e:	e9c4 5507 	strd	r5, r5, [r4, #28]
 8089852:	62a3      	str	r3, [r4, #40]	; 0x28
 8089854:	4908      	ldr	r1, [pc, #32]	; (8089878 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x48>)
 8089856:	6265      	str	r5, [r4, #36]	; 0x24
 8089858:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 808985c:	f001 fe0a 	bl	808b474 <_ZN6StringC1EPKc>
 8089860:	f44f 729b 	mov.w	r2, #310	; 0x136
 8089864:	f44f 73cd 	mov.w	r3, #410	; 0x19a
}
 8089868:	4620      	mov	r0, r4
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
 808986a:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
}
 808986e:	bd38      	pop	{r3, r4, r5, pc}
 8089870:	08094094 	.word	0x08094094
 8089874:	0809402e 	.word	0x0809402e
 8089878:	0809403c 	.word	0x0809403c

0808987c <_ZN23GoogleMapsDeviceLocator18withLocatePeriodicEm>:
	locatorMode = LOCATOR_MODE_PERIODIC;
 808987c:	2202      	movs	r2, #2
	periodMs = secondsPeriodic * 1000;
 808987e:	2905      	cmp	r1, #5
 8089880:	bf38      	it	cc
 8089882:	2105      	movcc	r1, #5
	locatorMode = LOCATOR_MODE_PERIODIC;
 8089884:	6042      	str	r2, [r0, #4]
	periodMs = secondsPeriodic * 1000;
 8089886:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 808988a:	4351      	muls	r1, r2
 808988c:	6081      	str	r1, [r0, #8]
}
 808988e:	4770      	bx	lr

08089890 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv>:
const char *GoogleMapsDeviceLocator::cellularScanLTE() {
 8089890:	b5f0      	push	{r4, r5, r6, r7, lr}
class CellularHelperCommonResponse {
 8089892:	f06f 0302 	mvn.w	r3, #2
 8089896:	2400      	movs	r4, #0
 8089898:	b097      	sub	sp, #92	; 0x5c
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 808989a:	4e32      	ldr	r6, [pc, #200]	; (8089964 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xd4>)
 808989c:	4605      	mov	r5, r0
 808989e:	4932      	ldr	r1, [pc, #200]	; (8089968 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xd8>)
 80898a0:	a809      	add	r0, sp, #36	; 0x24
class CellularHelperCommonResponse {
 80898a2:	9307      	str	r3, [sp, #28]
 80898a4:	f88d 4020 	strb.w	r4, [sp, #32]
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 80898a8:	9606      	str	r6, [sp, #24]
 80898aa:	f001 fde3 	bl	808b474 <_ZN6StringC1EPKc>
 80898ae:	492e      	ldr	r1, [pc, #184]	; (8089968 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xd8>)
 80898b0:	a80d      	add	r0, sp, #52	; 0x34
 80898b2:	f001 fddf 	bl	808b474 <_ZN6StringC1EPKc>

	void postProcess();
	String toString() const;
};

class CellularHelperCREGResponse :  public CellularHelperPlusStringResponse {
 80898b6:	4b2d      	ldr	r3, [pc, #180]	; (808996c <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xdc>)
 80898b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80898bc:	9306      	str	r3, [sp, #24]
 80898be:	f04f 33ff 	mov.w	r3, #4294967295
	CellularHelper.getCREG(resp);
 80898c2:	a906      	add	r1, sp, #24
 80898c4:	482a      	ldr	r0, [pc, #168]	; (8089970 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xe0>)
 80898c6:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
 80898ca:	f88d 4044 	strb.w	r4, [sp, #68]	; 0x44
 80898ce:	9412      	str	r4, [sp, #72]	; 0x48
 80898d0:	9415      	str	r4, [sp, #84]	; 0x54
 80898d2:	f000 fdb3 	bl	808a43c <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse>
	Serial.println(resp.toString().c_str());
 80898d6:	f003 f899 	bl	808ca0c <_Z16_fetch_usbserialv>
 80898da:	4604      	mov	r4, r0
 80898dc:	a906      	add	r1, sp, #24
 80898de:	a802      	add	r0, sp, #8
 80898e0:	f000 fc8e 	bl	808a200 <_ZNK26CellularHelperCREGResponse8toStringEv>
 80898e4:	9902      	ldr	r1, [sp, #8]
 80898e6:	4620      	mov	r0, r4
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",", oper.c_str());
 80898e8:	4c22      	ldr	r4, [pc, #136]	; (8089974 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xe4>)
	Serial.println(resp.toString().c_str());
 80898ea:	f001 ffd4 	bl	808b896 <_ZN5Print7printlnEPKc>
 80898ee:	a802      	add	r0, sp, #8
 80898f0:	f001 fd76 	bl	808b3e0 <_ZN6StringD1Ev>
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",", oper.c_str());
 80898f4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80898f6:	4920      	ldr	r1, [pc, #128]	; (8089978 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xe8>)
 80898f8:	6820      	ldr	r0, [r4, #0]
 80898fa:	f001 f97b 	bl	808abf4 <sprintf>
 80898fe:	6823      	ldr	r3, [r4, #0]
	requestCur += sprintf(requestCur, "\"a\":[");
 8089900:	491e      	ldr	r1, [pc, #120]	; (808997c <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xec>)
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",", oper.c_str());
 8089902:	4403      	add	r3, r0
	requestCur += sprintf(requestCur, "\"a\":[");
 8089904:	4618      	mov	r0, r3
 8089906:	f005 f8ee 	bl	808eae6 <strcpy>
	if (resp.valid) {
 808990a:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
	requestCur += sprintf(requestCur, "\"a\":[");
 808990e:	3005      	adds	r0, #5
 8089910:	4f1b      	ldr	r7, [pc, #108]	; (8089980 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xf0>)
 8089912:	6020      	str	r0, [r4, #0]
	if (resp.valid) {
 8089914:	b173      	cbz	r3, 8089934 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xa4>
		requestCur += sprintf(requestCur,
 8089916:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8089918:	491a      	ldr	r1, [pc, #104]	; (8089984 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xf4>)
 808991a:	9301      	str	r3, [sp, #4]
 808991c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 808991e:	9300      	str	r3, [sp, #0]
 8089920:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 8089924:	f001 f966 	bl	808abf4 <sprintf>
 8089928:	6823      	ldr	r3, [r4, #0]
 808992a:	4403      	add	r3, r0
 808992c:	6023      	str	r3, [r4, #0]
		numAdded++;
 808992e:	683b      	ldr	r3, [r7, #0]
 8089930:	3301      	adds	r3, #1
 8089932:	603b      	str	r3, [r7, #0]
	*requestCur++ = ']';
 8089934:	225d      	movs	r2, #93	; 0x5d
 8089936:	6823      	ldr	r3, [r4, #0]
 8089938:	701a      	strb	r2, [r3, #0]
	*requestCur++ = '}';
 808993a:	227d      	movs	r2, #125	; 0x7d
 808993c:	705a      	strb	r2, [r3, #1]
	*requestCur++ = '}';
 808993e:	709a      	strb	r2, [r3, #2]
	*requestCur++ = 0;
 8089940:	1d1a      	adds	r2, r3, #4
 8089942:	6022      	str	r2, [r4, #0]
 8089944:	2200      	movs	r2, #0
 8089946:	70da      	strb	r2, [r3, #3]
	if (numAdded == 0) {
 8089948:	683b      	ldr	r3, [r7, #0]
 808994a:	b90b      	cbnz	r3, 8089950 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xc0>
		requestBuf[0] = 0;
 808994c:	4a0e      	ldr	r2, [pc, #56]	; (8089988 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xf8>)
 808994e:	7013      	strb	r3, [r2, #0]
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 8089950:	a80d      	add	r0, sp, #52	; 0x34
 8089952:	9606      	str	r6, [sp, #24]
 8089954:	f001 fd44 	bl	808b3e0 <_ZN6StringD1Ev>
 8089958:	a809      	add	r0, sp, #36	; 0x24
 808995a:	f001 fd41 	bl	808b3e0 <_ZN6StringD1Ev>
}
 808995e:	480a      	ldr	r0, [pc, #40]	; (8089988 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xf8>)
 8089960:	b017      	add	sp, #92	; 0x5c
 8089962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8089964:	08094300 	.word	0x08094300
 8089968:	080942e2 	.word	0x080942e2
 808996c:	0809407c 	.word	0x0809407c
 8089970:	20000e70 	.word	0x20000e70
 8089974:	20000e64 	.word	0x20000e64
 8089978:	08094018 	.word	0x08094018
 808997c:	08094028 	.word	0x08094028
 8089980:	20000e6c 	.word	0x20000e6c
 8089984:	08093ffa 	.word	0x08093ffa
 8089988:	20000d63 	.word	0x20000d63

0808998c <_ZN23GoogleMapsDeviceLocator12cellularScanEv>:
	requestCur = requestBuf;
 808998c:	4b0a      	ldr	r3, [pc, #40]	; (80899b8 <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x2c>)
 808998e:	4a0b      	ldr	r2, [pc, #44]	; (80899bc <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x30>)
const char *GoogleMapsDeviceLocator::cellularScan() {
 8089990:	b510      	push	{r4, lr}
	requestCur = requestBuf;
 8089992:	601a      	str	r2, [r3, #0]
	numAdded = 0;
 8089994:	2200      	movs	r2, #0
 8089996:	4b0a      	ldr	r3, [pc, #40]	; (80899c0 <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x34>)
const char *GoogleMapsDeviceLocator::cellularScan() {
 8089998:	4604      	mov	r4, r0
	if (CellularHelper.isLTE()) {
 808999a:	480a      	ldr	r0, [pc, #40]	; (80899c4 <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x38>)
	numAdded = 0;
 808999c:	601a      	str	r2, [r3, #0]
	if (CellularHelper.isLTE()) {
 808999e:	f000 fce5 	bl	808a36c <_ZNK19CellularHelperClass5isLTEEv>
 80899a2:	b120      	cbz	r0, 80899ae <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x22>
		return cellularScanLTE();
 80899a4:	4620      	mov	r0, r4
}
 80899a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return cellularScanLTE();
 80899aa:	f7ff bf71 	b.w	8089890 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv>
}
 80899ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80899b2:	f7ff be89 	b.w	80896c8 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0>
 80899b6:	bf00      	nop
 80899b8:	20000e64 	.word	0x20000e64
 80899bc:	20000d63 	.word	0x20000d63
 80899c0:	20000e6c 	.word	0x20000e6c
 80899c4:	20000e70 	.word	0x20000e70

080899c8 <_ZN23GoogleMapsDeviceLocator15publishLocationEv>:
void GoogleMapsDeviceLocator::publishLocation() {
 80899c8:	b530      	push	{r4, r5, lr}
 80899ca:	4605      	mov	r5, r0
 80899cc:	b085      	sub	sp, #20
	Serial.println("publishLocation");
 80899ce:	f003 f81d 	bl	808ca0c <_Z16_fetch_usbserialv>
 80899d2:	4918      	ldr	r1, [pc, #96]	; (8089a34 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x6c>)
 80899d4:	f001 ff5f 	bl	808b896 <_ZN5Print7printlnEPKc>
	return cellularScan();
 80899d8:	4628      	mov	r0, r5
 80899da:	f7ff ffd7 	bl	808998c <_ZN23GoogleMapsDeviceLocator12cellularScanEv>
 80899de:	4604      	mov	r4, r0
	Serial.printlnf("scanData=%s", scanData);
 80899e0:	f003 f814 	bl	808ca0c <_Z16_fetch_usbserialv>
        return this->printf_impl(true, format, args...);
 80899e4:	4623      	mov	r3, r4
 80899e6:	2101      	movs	r1, #1
 80899e8:	4a13      	ldr	r2, [pc, #76]	; (8089a38 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x70>)
 80899ea:	f002 f861 	bl	808bab0 <_ZN5Print11printf_implEbPKcz>
	if (scanData[0]) {
 80899ee:	7823      	ldrb	r3, [r4, #0]
 80899f0:	b1f3      	cbz	r3, 8089a30 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>
 80899f2:	f001 f8b7 	bl	808ab64 <spark_cloud_flag_connected>
		if (Particle.connected()) {
 80899f6:	b1d8      	cbz	r0, 8089a30 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80899f8:	4b10      	ldr	r3, [pc, #64]	; (8089a3c <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x74>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80899fa:	4622      	mov	r2, r4
 80899fc:	781b      	ldrb	r3, [r3, #0]
 80899fe:	68e9      	ldr	r1, [r5, #12]
 8089a00:	f88d 3000 	strb.w	r3, [sp]
 8089a04:	a802      	add	r0, sp, #8
 8089a06:	233c      	movs	r3, #60	; 0x3c
 8089a08:	f002 fdd0 	bl	808c5ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
 8089a0c:	9c03      	ldr	r4, [sp, #12]
 8089a0e:	b17c      	cbz	r4, 8089a30 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>
      if (--_M_use_count == 0)
 8089a10:	6863      	ldr	r3, [r4, #4]
 8089a12:	3b01      	subs	r3, #1
 8089a14:	6063      	str	r3, [r4, #4]
 8089a16:	b95b      	cbnz	r3, 8089a30 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>
          _M_dispose();
 8089a18:	6823      	ldr	r3, [r4, #0]
 8089a1a:	4620      	mov	r0, r4
 8089a1c:	689b      	ldr	r3, [r3, #8]
 8089a1e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8089a20:	68a3      	ldr	r3, [r4, #8]
 8089a22:	3b01      	subs	r3, #1
 8089a24:	60a3      	str	r3, [r4, #8]
 8089a26:	b91b      	cbnz	r3, 8089a30 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>
            _M_destroy();
 8089a28:	6823      	ldr	r3, [r4, #0]
 8089a2a:	4620      	mov	r0, r4
 8089a2c:	68db      	ldr	r3, [r3, #12]
 8089a2e:	4798      	blx	r3
}
 8089a30:	b005      	add	sp, #20
 8089a32:	bd30      	pop	{r4, r5, pc}
 8089a34:	08094041 	.word	0x08094041
 8089a38:	08094051 	.word	0x08094051
 8089a3c:	20000e68 	.word	0x20000e68

08089a40 <_ZN23GoogleMapsDeviceLocator4loopEv>:
void GoogleMapsDeviceLocator::loop() {
 8089a40:	b510      	push	{r4, lr}
	switch(state) {
 8089a42:	6a03      	ldr	r3, [r0, #32]
void GoogleMapsDeviceLocator::loop() {
 8089a44:	4604      	mov	r4, r0
	switch(state) {
 8089a46:	2b02      	cmp	r3, #2
 8089a48:	d00b      	beq.n	8089a62 <_ZN23GoogleMapsDeviceLocator4loopEv+0x22>
 8089a4a:	2b03      	cmp	r3, #3
 8089a4c:	d022      	beq.n	8089a94 <_ZN23GoogleMapsDeviceLocator4loopEv+0x54>
 8089a4e:	b9bb      	cbnz	r3, 8089a80 <_ZN23GoogleMapsDeviceLocator4loopEv+0x40>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8089a50:	f001 f888 	bl	808ab64 <spark_cloud_flag_connected>
		if (Particle.connected()) {
 8089a54:	b1a0      	cbz	r0, 8089a80 <_ZN23GoogleMapsDeviceLocator4loopEv+0x40>
			state = CONNECTED_WAIT_STATE;
 8089a56:	2302      	movs	r3, #2
 8089a58:	6223      	str	r3, [r4, #32]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8089a5a:	f000 fe03 	bl	808a664 <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis() - periodMs;
 8089a5e:	61e0      	str	r0, [r4, #28]
 8089a60:	e00e      	b.n	8089a80 <_ZN23GoogleMapsDeviceLocator4loopEv+0x40>
 8089a62:	f000 fdff 	bl	808a664 <HAL_Timer_Get_Milli_Seconds>
		if (millis() - stateTime >= waitAfterConnect) {
 8089a66:	69e3      	ldr	r3, [r4, #28]
 8089a68:	1ac0      	subs	r0, r0, r3
 8089a6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8089a6c:	4298      	cmp	r0, r3
 8089a6e:	d307      	bcc.n	8089a80 <_ZN23GoogleMapsDeviceLocator4loopEv+0x40>
			if (locatorMode == LOCATOR_MODE_ONCE) {
 8089a70:	6863      	ldr	r3, [r4, #4]
 8089a72:	2b01      	cmp	r3, #1
 8089a74:	d105      	bne.n	8089a82 <_ZN23GoogleMapsDeviceLocator4loopEv+0x42>
				publishLocation();
 8089a76:	4620      	mov	r0, r4
 8089a78:	f7ff ffa6 	bl	80899c8 <_ZN23GoogleMapsDeviceLocator15publishLocationEv>
				state = IDLE_STATE;
 8089a7c:	2304      	movs	r3, #4
 8089a7e:	6223      	str	r3, [r4, #32]
}
 8089a80:	bd10      	pop	{r4, pc}
			if (locatorMode == LOCATOR_MODE_MANUAL) {
 8089a82:	2b00      	cmp	r3, #0
 8089a84:	d0fa      	beq.n	8089a7c <_ZN23GoogleMapsDeviceLocator4loopEv+0x3c>
				state = CONNECTED_STATE;
 8089a86:	2303      	movs	r3, #3
 8089a88:	6223      	str	r3, [r4, #32]
 8089a8a:	f000 fdeb 	bl	808a664 <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis() - periodMs;
 8089a8e:	68a3      	ldr	r3, [r4, #8]
 8089a90:	1ac0      	subs	r0, r0, r3
 8089a92:	e7e4      	b.n	8089a5e <_ZN23GoogleMapsDeviceLocator4loopEv+0x1e>
 8089a94:	f001 f866 	bl	808ab64 <spark_cloud_flag_connected>
		if (Particle.connected()) {
 8089a98:	b170      	cbz	r0, 8089ab8 <_ZN23GoogleMapsDeviceLocator4loopEv+0x78>
 8089a9a:	f000 fde3 	bl	808a664 <HAL_Timer_Get_Milli_Seconds>
			if (millis() - stateTime >= periodMs) {
 8089a9e:	69e3      	ldr	r3, [r4, #28]
 8089aa0:	1ac0      	subs	r0, r0, r3
 8089aa2:	68a3      	ldr	r3, [r4, #8]
 8089aa4:	4298      	cmp	r0, r3
 8089aa6:	d3eb      	bcc.n	8089a80 <_ZN23GoogleMapsDeviceLocator4loopEv+0x40>
 8089aa8:	f000 fddc 	bl	808a664 <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis();
 8089aac:	61e0      	str	r0, [r4, #28]
				publishLocation();
 8089aae:	4620      	mov	r0, r4
}
 8089ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				publishLocation();
 8089ab4:	f7ff bf88 	b.w	80899c8 <_ZN23GoogleMapsDeviceLocator15publishLocationEv>
			state = CONNECT_WAIT_STATE;
 8089ab8:	6220      	str	r0, [r4, #32]
}
 8089aba:	e7e1      	b.n	8089a80 <_ZN23GoogleMapsDeviceLocator4loopEv+0x40>

08089abc <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>:
    function(_Functor) -> function<_Signature>;
#endif

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8089abc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8089abe:	2300      	movs	r3, #0
 8089ac0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 8089ac2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 8089ac4:	4604      	mov	r4, r0
 8089ac6:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8089ac8:	b12b      	cbz	r3, 8089ad6 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8089aca:	2202      	movs	r2, #2
 8089acc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8089ace:	68eb      	ldr	r3, [r5, #12]
 8089ad0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8089ad2:	68ab      	ldr	r3, [r5, #8]
 8089ad4:	60a3      	str	r3, [r4, #8]
	}
    }
 8089ad6:	4620      	mov	r0, r4
 8089ad8:	bd38      	pop	{r3, r4, r5, pc}
	...

08089adc <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE>:
GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withSubscribe(GoogleMapsDeviceLocatorSubscriptionCallback callback) {
 8089adc:	b530      	push	{r4, r5, lr}
 8089ade:	b08b      	sub	sp, #44	; 0x2c
	snprintf(requestBuf, sizeof(requestBuf), "hook-response/%s/%s", eventName.c_str(), System.deviceID().c_str());
 8089ae0:	68c5      	ldr	r5, [r0, #12]
	this->callback = callback;
 8089ae2:	6241      	str	r1, [r0, #36]	; 0x24
GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withSubscribe(GoogleMapsDeviceLocatorSubscriptionCallback callback) {
 8089ae4:	4604      	mov	r4, r0
    static String deviceID(void) { return spark_deviceID(); }
 8089ae6:	a806      	add	r0, sp, #24
 8089ae8:	f001 f844 	bl	808ab74 <spark_deviceID>
	snprintf(requestBuf, sizeof(requestBuf), "hook-response/%s/%s", eventName.c_str(), System.deviceID().c_str());
 8089aec:	9b06      	ldr	r3, [sp, #24]
 8089aee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8089af2:	9300      	str	r3, [sp, #0]
 8089af4:	462b      	mov	r3, r5
    _Function_base() : _M_manager(nullptr) { }
 8089af6:	2500      	movs	r5, #0
 8089af8:	4a19      	ldr	r2, [pc, #100]	; (8089b60 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x84>)
 8089afa:	481a      	ldr	r0, [pc, #104]	; (8089b64 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x88>)
 8089afc:	f001 f89a 	bl	808ac34 <snprintf>
 8089b00:	a806      	add	r0, sp, #24
 8089b02:	f001 fc6d 	bl	808b3e0 <_ZN6StringD1Ev>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8089b06:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
 8089b08:	9504      	str	r5, [sp, #16]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8089b0a:	f7f6 fac6 	bl	808009a <_Znwj>
 8089b0e:	b118      	cbz	r0, 8089b18 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x3c>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
 8089b10:	4b15      	ldr	r3, [pc, #84]	; (8089b68 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x8c>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8089b12:	6084      	str	r4, [r0, #8]
 8089b14:	e9c0 3500 	strd	r3, r5, [r0]
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8089b18:	4b14      	ldr	r3, [pc, #80]	; (8089b6c <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x90>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8089b1a:	9002      	str	r0, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
 8089b1c:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 8089b1e:	4b14      	ldr	r3, [pc, #80]	; (8089b70 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x94>)
        return subscribe_wiring(eventName, handler, scope);
 8089b20:	a902      	add	r1, sp, #8
 8089b22:	a806      	add	r0, sp, #24
 8089b24:	9304      	str	r3, [sp, #16]
 8089b26:	f7ff ffc9 	bl	8089abc <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
    }

    bool subscribe_wiring(const char *eventName, wiring_event_handler_t handler, Spark_Subscription_Scope_TypeDef scope, const char *deviceID = NULL)
    {
        bool success = false;
        if (handler) // if the call-wrapper has wrapped a callable object
 8089b2a:	9b08      	ldr	r3, [sp, #32]
 8089b2c:	b17b      	cbz	r3, 8089b4e <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x72>
        {
            auto wrapper = new wiring_event_handler_t(handler);
 8089b2e:	2010      	movs	r0, #16
 8089b30:	f7f6 fab3 	bl	808009a <_Znwj>
 8089b34:	4605      	mov	r5, r0
 8089b36:	b150      	cbz	r0, 8089b4e <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x72>
 8089b38:	a906      	add	r1, sp, #24
 8089b3a:	f7ff ffbf 	bl	8089abc <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
            if (wrapper) {
                success = spark_subscribe(eventName, (EventHandler)call_wiring_event_handler, wrapper, scope, deviceID, NULL);
 8089b3e:	2300      	movs	r3, #0
 8089b40:	462a      	mov	r2, r5
 8089b42:	e9cd 3300 	strd	r3, r3, [sp]
 8089b46:	490b      	ldr	r1, [pc, #44]	; (8089b74 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x98>)
 8089b48:	4806      	ldr	r0, [pc, #24]	; (8089b64 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x88>)
 8089b4a:	f001 f823 	bl	808ab94 <spark_subscribe>
    class function<_Res(_ArgTypes...)>
 8089b4e:	a806      	add	r0, sp, #24
 8089b50:	f7ff fe64 	bl	808981c <_ZNSt14_Function_baseD1Ev>
 8089b54:	a802      	add	r0, sp, #8
 8089b56:	f7ff fe61 	bl	808981c <_ZNSt14_Function_baseD1Ev>
}
 8089b5a:	4620      	mov	r0, r4
 8089b5c:	b00b      	add	sp, #44	; 0x2c
 8089b5e:	bd30      	pop	{r4, r5, pc}
 8089b60:	0809405d 	.word	0x0809405d
 8089b64:	20000d63 	.word	0x20000d63
 8089b68:	08089651 	.word	0x08089651
 8089b6c:	080897fb 	.word	0x080897fb
 8089b70:	080897bd 	.word	0x080897bd
 8089b74:	0808c3ab 	.word	0x0808c3ab

08089b78 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev>:
        val_(val) {
 8089b78:	2201      	movs	r2, #1
 8089b7a:	4b02      	ldr	r3, [pc, #8]	; (8089b84 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev+0xc>)
 8089b7c:	701a      	strb	r2, [r3, #0]
 8089b7e:	f000 bd11 	b.w	808a5a4 <HAL_Pin_Map>
 8089b82:	bf00      	nop
 8089b84:	20000e68 	.word	0x20000e68

08089b88 <_ZN19CellularHelperClass16responseCallbackEiPKciPv>:
	}
	return bars;
}

// static
int CellularHelperClass::responseCallback(int type, const char* buf, int len, void *param) {
 8089b88:	b430      	push	{r4, r5}
 8089b8a:	4605      	mov	r5, r0
 8089b8c:	4618      	mov	r0, r3
	CellularHelperCommonResponse *presp = (CellularHelperCommonResponse *)param;

	return presp->parse(type, buf, len);
 8089b8e:	681b      	ldr	r3, [r3, #0]
 8089b90:	681c      	ldr	r4, [r3, #0]
 8089b92:	4613      	mov	r3, r2
 8089b94:	46a4      	mov	ip, r4
 8089b96:	460a      	mov	r2, r1
 8089b98:	4629      	mov	r1, r5
}
 8089b9a:	bc30      	pop	{r4, r5}
	return presp->parse(type, buf, len);
 8089b9c:	4760      	bx	ip
	...

08089ba0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>:
void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
 8089ba0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8089ba4:	460c      	mov	r4, r1
 8089ba6:	b08d      	sub	sp, #52	; 0x34
	String typeStr;
 8089ba8:	494d      	ldr	r1, [pc, #308]	; (8089ce0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x140>)
 8089baa:	a804      	add	r0, sp, #16
void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
 8089bac:	4616      	mov	r6, r2
 8089bae:	461d      	mov	r5, r3
	String typeStr;
 8089bb0:	f001 fc60 	bl	808b474 <_ZN6StringC1EPKc>
	switch(type) {
 8089bb4:	f5b4 1f10 	cmp.w	r4, #2359296	; 0x240000
 8089bb8:	d064      	beq.n	8089c84 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xe4>
 8089bba:	dc1f      	bgt.n	8089bfc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x5c>
 8089bbc:	f5b4 1f04 	cmp.w	r4, #2162688	; 0x210000
 8089bc0:	d05c      	beq.n	8089c7c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xdc>
 8089bc2:	dc13      	bgt.n	8089bec <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x4c>
 8089bc4:	f5b4 1f88 	cmp.w	r4, #1114112	; 0x110000
 8089bc8:	d056      	beq.n	8089c78 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xd8>
 8089bca:	f5b4 1f90 	cmp.w	r4, #1179648	; 0x120000
 8089bce:	d055      	beq.n	8089c7c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xdc>
 8089bd0:	b35c      	cbz	r4, 8089c2a <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8a>
		typeStr = String::format("type=0x%x", type);
 8089bd2:	4622      	mov	r2, r4
 8089bd4:	a808      	add	r0, sp, #32
 8089bd6:	4943      	ldr	r1, [pc, #268]	; (8089ce4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x144>)
 8089bd8:	f001 fe0c 	bl	808b7f4 <_ZN6String6formatEPKcz>
 8089bdc:	a908      	add	r1, sp, #32
 8089bde:	a804      	add	r0, sp, #16
 8089be0:	f001 fc92 	bl	808b508 <_ZN6StringaSEOS_>
 8089be4:	a808      	add	r0, sp, #32
 8089be6:	f001 fbfb 	bl	808b3e0 <_ZN6StringD1Ev>
		break;
 8089bea:	e022      	b.n	8089c32 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x92>
	switch(type) {
 8089bec:	f5b4 1f08 	cmp.w	r4, #2228224	; 0x220000
 8089bf0:	d046      	beq.n	8089c80 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xe0>
 8089bf2:	f5b4 1f0c 	cmp.w	r4, #2293760	; 0x230000
 8089bf6:	d1ec      	bne.n	8089bd2 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x32>
		typeStr = "TYPE_NOCARRIER";
 8089bf8:	493b      	ldr	r1, [pc, #236]	; (8089ce8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x148>)
 8089bfa:	e017      	b.n	8089c2c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
	switch(type) {
 8089bfc:	f5b4 0f80 	cmp.w	r4, #4194304	; 0x400000
 8089c00:	d046      	beq.n	8089c90 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xf0>
 8089c02:	dc0a      	bgt.n	8089c1a <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x7a>
 8089c04:	f5b4 1f18 	cmp.w	r4, #2490368	; 0x260000
 8089c08:	d03e      	beq.n	8089c88 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xe8>
 8089c0a:	f5b4 1f40 	cmp.w	r4, #3145728	; 0x300000
 8089c0e:	d03d      	beq.n	8089c8c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xec>
 8089c10:	f5b4 1f14 	cmp.w	r4, #2424832	; 0x250000
 8089c14:	d1dd      	bne.n	8089bd2 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x32>
		typeStr = "TYPE_BUSY";
 8089c16:	4935      	ldr	r1, [pc, #212]	; (8089cec <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x14c>)
 8089c18:	e008      	b.n	8089c2c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
	switch(type) {
 8089c1a:	f5b4 0fa0 	cmp.w	r4, #5242880	; 0x500000
 8089c1e:	d037      	beq.n	8089c90 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xf0>
 8089c20:	f5b4 0fc0 	cmp.w	r4, #6291456	; 0x600000
 8089c24:	d1d5      	bne.n	8089bd2 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x32>
		typeStr = "TYPE_ABORTED";
 8089c26:	4932      	ldr	r1, [pc, #200]	; (8089cf0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x150>)
 8089c28:	e000      	b.n	8089c2c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_UNKNOWN";
 8089c2a:	4932      	ldr	r1, [pc, #200]	; (8089cf4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x154>)
		typeStr = "TYPE_OK";
 8089c2c:	a804      	add	r0, sp, #16
 8089c2e:	f001 fc73 	bl	808b518 <_ZN6StringaSEPKc>
	Log.info("cellular response type=%s len=%d", typeStr.c_str(), len);
 8089c32:	462b      	mov	r3, r5
 8089c34:	9a04      	ldr	r2, [sp, #16]
 8089c36:	4930      	ldr	r1, [pc, #192]	; (8089cf8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x158>)
 8089c38:	4830      	ldr	r0, [pc, #192]	; (8089cfc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x15c>)
 8089c3a:	f7f7 f8c0 	bl	8080dbe <_ZNK5spark6Logger4infoEPKcz>
	String out;
 8089c3e:	4928      	ldr	r1, [pc, #160]	; (8089ce0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x140>)
 8089c40:	a808      	add	r0, sp, #32
 8089c42:	f001 fc17 	bl	808b474 <_ZN6StringC1EPKc>
	for(int ii = 0; ii < len; ii++) {
 8089c46:	2400      	movs	r4, #0
			snprintf(hex, sizeof(hex), "0x%02x", buf[ii]);
 8089c48:	4f2d      	ldr	r7, [pc, #180]	; (8089d00 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x160>)
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8089c4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8089d20 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x180>
 8089c4e:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8089d24 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x184>
	for(int ii = 0; ii < len; ii++) {
 8089c52:	42ac      	cmp	r4, r5
 8089c54:	da35      	bge.n	8089cc2 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x122>
		if (buf[ii] == '\n') {
 8089c56:	5d31      	ldrb	r1, [r6, r4]
 8089c58:	290a      	cmp	r1, #10
 8089c5a:	d11b      	bne.n	8089c94 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xf4>
 8089c5c:	4649      	mov	r1, r9
 8089c5e:	a808      	add	r0, sp, #32
 8089c60:	f001 fcd7 	bl	808b612 <_ZN6String6concatEPKc>
			Log.info(out);
 8089c64:	9908      	ldr	r1, [sp, #32]
 8089c66:	4825      	ldr	r0, [pc, #148]	; (8089cfc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x15c>)
 8089c68:	f7f7 f8a9 	bl	8080dbe <_ZNK5spark6Logger4infoEPKcz>
			out = "";
 8089c6c:	491c      	ldr	r1, [pc, #112]	; (8089ce0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x140>)
 8089c6e:	a808      	add	r0, sp, #32
 8089c70:	f001 fc52 	bl	808b518 <_ZN6StringaSEPKc>
	for(int ii = 0; ii < len; ii++) {
 8089c74:	3401      	adds	r4, #1
 8089c76:	e7ec      	b.n	8089c52 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xb2>
		typeStr = "TYPE_OK";
 8089c78:	4922      	ldr	r1, [pc, #136]	; (8089d04 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x164>)
 8089c7a:	e7d7      	b.n	8089c2c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_ERROR";
 8089c7c:	4922      	ldr	r1, [pc, #136]	; (8089d08 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x168>)
 8089c7e:	e7d5      	b.n	8089c2c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_CONNECT";
 8089c80:	4922      	ldr	r1, [pc, #136]	; (8089d0c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x16c>)
 8089c82:	e7d3      	b.n	8089c2c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_NODIALTONE";
 8089c84:	4922      	ldr	r1, [pc, #136]	; (8089d10 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
 8089c86:	e7d1      	b.n	8089c2c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_NOANSWER";
 8089c88:	4922      	ldr	r1, [pc, #136]	; (8089d14 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x174>)
 8089c8a:	e7cf      	b.n	8089c2c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_PROMPT";
 8089c8c:	4922      	ldr	r1, [pc, #136]	; (8089d18 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x178>)
 8089c8e:	e7cd      	b.n	8089c2c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_PLUS";
 8089c90:	4922      	ldr	r1, [pc, #136]	; (8089d1c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x17c>)
 8089c92:	e7cb      	b.n	8089c2c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		if (buf[ii] == '\r') {
 8089c94:	290d      	cmp	r1, #13
 8089c96:	d104      	bne.n	8089ca2 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x102>
 8089c98:	4641      	mov	r1, r8
			out.concat(hex);
 8089c9a:	a808      	add	r0, sp, #32
 8089c9c:	f001 fcb9 	bl	808b612 <_ZN6String6concatEPKc>
 8089ca0:	e7e8      	b.n	8089c74 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xd4>
		if (buf[ii] < ' ' || buf[ii] >= 127) {
 8089ca2:	f1a1 0320 	sub.w	r3, r1, #32
 8089ca6:	2b5e      	cmp	r3, #94	; 0x5e
 8089ca8:	d907      	bls.n	8089cba <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x11a>
			snprintf(hex, sizeof(hex), "0x%02x", buf[ii]);
 8089caa:	460b      	mov	r3, r1
 8089cac:	463a      	mov	r2, r7
 8089cae:	210a      	movs	r1, #10
 8089cb0:	a801      	add	r0, sp, #4
 8089cb2:	f000 ffbf 	bl	808ac34 <snprintf>
			out.concat(hex);
 8089cb6:	a901      	add	r1, sp, #4
 8089cb8:	e7ef      	b.n	8089c9a <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xfa>
			out.concat(buf[ii]);
 8089cba:	a808      	add	r0, sp, #32
 8089cbc:	f001 fcb8 	bl	808b630 <_ZN6String6concatEc>
 8089cc0:	e7d8      	b.n	8089c74 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xd4>
	if (out.length() > 0) {
 8089cc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8089cc4:	b11b      	cbz	r3, 8089cce <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x12e>
		Log.info(out);
 8089cc6:	9908      	ldr	r1, [sp, #32]
 8089cc8:	480c      	ldr	r0, [pc, #48]	; (8089cfc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x15c>)
 8089cca:	f7f7 f878 	bl	8080dbe <_ZNK5spark6Logger4infoEPKcz>
	String out;
 8089cce:	a808      	add	r0, sp, #32
 8089cd0:	f001 fb86 	bl	808b3e0 <_ZN6StringD1Ev>
	String typeStr;
 8089cd4:	a804      	add	r0, sp, #16
 8089cd6:	f001 fb83 	bl	808b3e0 <_ZN6StringD1Ev>
}
 8089cda:	b00d      	add	sp, #52	; 0x34
 8089cdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8089ce0:	080942e2 	.word	0x080942e2
 8089ce4:	08094123 	.word	0x08094123
 8089ce8:	080940c9 	.word	0x080940c9
 8089cec:	080940e8 	.word	0x080940e8
 8089cf0:	08094116 	.word	0x08094116
 8089cf4:	0809409c 	.word	0x0809409c
 8089cf8:	0809412d 	.word	0x0809412d
 8089cfc:	20000e84 	.word	0x20000e84
 8089d00:	08094154 	.word	0x08094154
 8089d04:	080940a9 	.word	0x080940a9
 8089d08:	080940b1 	.word	0x080940b1
 8089d0c:	080940bc 	.word	0x080940bc
 8089d10:	080940d8 	.word	0x080940d8
 8089d14:	080940f2 	.word	0x080940f2
 8089d18:	08094100 	.word	0x08094100
 8089d1c:	0809410c 	.word	0x0809410c
 8089d20:	08094151 	.word	0x08094151
 8089d24:	0809414e 	.word	0x0809414e

08089d28 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb>:
String CellularHelperPlusStringResponse::getDoubleQuotedPart(bool onlyFirst) const {
 8089d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8089d2c:	460e      	mov	r6, r1
 8089d2e:	4604      	mov	r4, r0
	for(size_t ii = 0; ii < string.length(); ii++) {
 8089d30:	2500      	movs	r5, #0
	String result;
 8089d32:	4913      	ldr	r1, [pc, #76]	; (8089d80 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x58>)
String CellularHelperPlusStringResponse::getDoubleQuotedPart(bool onlyFirst) const {
 8089d34:	4690      	mov	r8, r2
	String result;
 8089d36:	f001 fb9d 	bl	808b474 <_ZN6StringC1EPKc>
	result.reserve(string.length());
 8089d3a:	4620      	mov	r0, r4
 8089d3c:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8089d3e:	f001 fb6d 	bl	808b41c <_ZN6String7reserveEj>
	bool inQuoted = false;
 8089d42:	462f      	mov	r7, r5
		char ch = string.charAt(ii);
 8089d44:	f106 091c 	add.w	r9, r6, #28
	for(size_t ii = 0; ii < string.length(); ii++) {
 8089d48:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8089d4a:	429d      	cmp	r5, r3
 8089d4c:	d215      	bcs.n	8089d7a <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x52>
		char ch = string.charAt(ii);
 8089d4e:	4629      	mov	r1, r5
 8089d50:	4648      	mov	r0, r9
 8089d52:	f001 fd0d 	bl	808b770 <_ZNK6String6charAtEj>
		if (ch == '"') {
 8089d56:	2822      	cmp	r0, #34	; 0x22
		char ch = string.charAt(ii);
 8089d58:	4601      	mov	r1, r0
		if (ch == '"') {
 8089d5a:	d106      	bne.n	8089d6a <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x42>
			if (!inQuoted && onlyFirst) {
 8089d5c:	b15f      	cbz	r7, 8089d76 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x4e>
 8089d5e:	f1b8 0f00 	cmp.w	r8, #0
 8089d62:	d10a      	bne.n	8089d7a <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x52>
			inQuoted = !inQuoted;
 8089d64:	4647      	mov	r7, r8
	for(size_t ii = 0; ii < string.length(); ii++) {
 8089d66:	3501      	adds	r5, #1
 8089d68:	e7ee      	b.n	8089d48 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x20>
			if (inQuoted) {
 8089d6a:	2f00      	cmp	r7, #0
 8089d6c:	d0fb      	beq.n	8089d66 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x3e>
				result.concat(ch);
 8089d6e:	4620      	mov	r0, r4
 8089d70:	f001 fc5e 	bl	808b630 <_ZN6String6concatEc>
 8089d74:	e7f7      	b.n	8089d66 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x3e>
			inQuoted = !inQuoted;
 8089d76:	2701      	movs	r7, #1
 8089d78:	e7f5      	b.n	8089d66 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x3e>
}
 8089d7a:	4620      	mov	r0, r4
 8089d7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8089d80:	080942e2 	.word	0x080942e2

08089d84 <_ZN32CellularHelperPlusStringResponseC1Ev>:
 8089d84:	b538      	push	{r3, r4, r5, lr}
class CellularHelperCommonResponse {
 8089d86:	f06f 0302 	mvn.w	r3, #2
 8089d8a:	6043      	str	r3, [r0, #4]
 8089d8c:	2300      	movs	r3, #0
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 8089d8e:	4604      	mov	r4, r0
 8089d90:	4d07      	ldr	r5, [pc, #28]	; (8089db0 <_ZN32CellularHelperPlusStringResponseC1Ev+0x2c>)
class CellularHelperCommonResponse {
 8089d92:	7203      	strb	r3, [r0, #8]
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 8089d94:	4b07      	ldr	r3, [pc, #28]	; (8089db4 <_ZN32CellularHelperPlusStringResponseC1Ev+0x30>)
 8089d96:	4629      	mov	r1, r5
 8089d98:	f840 3b0c 	str.w	r3, [r0], #12
 8089d9c:	f001 fb6a 	bl	808b474 <_ZN6StringC1EPKc>
 8089da0:	4629      	mov	r1, r5
 8089da2:	f104 001c 	add.w	r0, r4, #28
 8089da6:	f001 fb65 	bl	808b474 <_ZN6StringC1EPKc>
 8089daa:	4620      	mov	r0, r4
 8089dac:	bd38      	pop	{r3, r4, r5, pc}
 8089dae:	bf00      	nop
 8089db0:	080942e2 	.word	0x080942e2
 8089db4:	08094300 	.word	0x08094300

08089db8 <_ZN32CellularHelperPlusStringResponseD1Ev>:
 8089db8:	b510      	push	{r4, lr}
 8089dba:	4604      	mov	r4, r0
 8089dbc:	4b05      	ldr	r3, [pc, #20]	; (8089dd4 <_ZN32CellularHelperPlusStringResponseD1Ev+0x1c>)
 8089dbe:	f840 3b1c 	str.w	r3, [r0], #28
 8089dc2:	f001 fb0d 	bl	808b3e0 <_ZN6StringD1Ev>
 8089dc6:	f104 000c 	add.w	r0, r4, #12
 8089dca:	f001 fb09 	bl	808b3e0 <_ZN6StringD1Ev>
 8089dce:	4620      	mov	r0, r4
 8089dd0:	bd10      	pop	{r4, pc}
 8089dd2:	bf00      	nop
 8089dd4:	08094300 	.word	0x08094300

08089dd8 <_ZN33CellularHelperEnvironmentResponseC1EP33CellularHelperEnvironmentCellDataj>:
CellularHelperEnvironmentResponse::CellularHelperEnvironmentResponse(CellularHelperEnvironmentCellData *neighbors, size_t numNeighbors) :
 8089dd8:	b570      	push	{r4, r5, r6, lr}
 8089dda:	4604      	mov	r4, r0
 8089ddc:	4615      	mov	r5, r2
 8089dde:	460e      	mov	r6, r1
	neighbors(neighbors), numNeighbors(numNeighbors) {
 8089de0:	f7ff ffd0 	bl	8089d84 <_ZN32CellularHelperPlusStringResponseC1Ev>
 8089de4:	4b08      	ldr	r3, [pc, #32]	; (8089e08 <_ZN33CellularHelperEnvironmentResponseC1EP33CellularHelperEnvironmentCellDataj+0x30>)
class CellularHelperEnvironmentCellData { // 44 bytes
 8089de6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8089dea:	6023      	str	r3, [r4, #0]
 8089dec:	23ff      	movs	r3, #255	; 0xff
 8089dee:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
 8089df2:	e9c4 3615 	strd	r3, r6, [r4, #84]	; 0x54
 8089df6:	2200      	movs	r2, #0
 8089df8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8089dfc:	4620      	mov	r0, r4
 8089dfe:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
	neighbors(neighbors), numNeighbors(numNeighbors) {
 8089e02:	65e5      	str	r5, [r4, #92]	; 0x5c
 8089e04:	6623      	str	r3, [r4, #96]	; 0x60
}
 8089e06:	bd70      	pop	{r4, r5, r6, pc}
 8089e08:	0809430c 	.word	0x0809430c

08089e0c <_ZNK33CellularHelperEnvironmentCellData7isValidEb>:
bool CellularHelperEnvironmentCellData::isValid(bool ignoreCI) const {
 8089e0c:	4603      	mov	r3, r0
	if (mcc > 999) {
 8089e0e:	681a      	ldr	r2, [r3, #0]
bool CellularHelperEnvironmentCellData::isValid(bool ignoreCI) const {
 8089e10:	4608      	mov	r0, r1
	if (mcc > 999) {
 8089e12:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8089e16:	da11      	bge.n	8089e3c <_ZNK33CellularHelperEnvironmentCellData7isValidEb+0x30>
	if (!ignoreCI) {
 8089e18:	b989      	cbnz	r1, 8089e3e <_ZNK33CellularHelperEnvironmentCellData7isValidEb+0x32>
		if (isUMTS) {
 8089e1a:	68d9      	ldr	r1, [r3, #12]
 8089e1c:	7f1b      	ldrb	r3, [r3, #28]
 8089e1e:	b133      	cbz	r3, 8089e2e <_ZNK33CellularHelperEnvironmentCellData7isValidEb+0x22>
			if (ci >= 0xfffffff) {
 8089e20:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
 8089e24:	4281      	cmp	r1, r0
 8089e26:	bfac      	ite	ge
 8089e28:	2000      	movge	r0, #0
 8089e2a:	2001      	movlt	r0, #1
 8089e2c:	4770      	bx	lr
			if (ci >= 0xffff) {
 8089e2e:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 8089e32:	4281      	cmp	r1, r0
 8089e34:	bfcc      	ite	gt
 8089e36:	2000      	movgt	r0, #0
 8089e38:	2001      	movle	r0, #1
 8089e3a:	4770      	bx	lr
		return false;
 8089e3c:	2000      	movs	r0, #0
}
 8089e3e:	4770      	bx	lr

08089e40 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_>:
void CellularHelperEnvironmentCellData::addKeyValue(const char *key, const char *value) {
 8089e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8089e42:	4605      	mov	r5, r0
 8089e44:	b085      	sub	sp, #20
	if (strlen(key) > (sizeof(ucCopy) - 1)) {
 8089e46:	4608      	mov	r0, r1
void CellularHelperEnvironmentCellData::addKeyValue(const char *key, const char *value) {
 8089e48:	460f      	mov	r7, r1
 8089e4a:	4614      	mov	r4, r2
	if (strlen(key) > (sizeof(ucCopy) - 1)) {
 8089e4c:	f005 fbd2 	bl	808f5f4 <strlen>
 8089e50:	280f      	cmp	r0, #15
 8089e52:	d906      	bls.n	8089e62 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x22>
		Log.info("key too long key=%s value=%s", key, value);
 8089e54:	4623      	mov	r3, r4
 8089e56:	463a      	mov	r2, r7
 8089e58:	495c      	ldr	r1, [pc, #368]	; (8089fcc <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x18c>)
		Log.info("unknown key=%s value=%s", key, value);
 8089e5a:	485d      	ldr	r0, [pc, #372]	; (8089fd0 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x190>)
 8089e5c:	f7f6 ffaf 	bl	8080dbe <_ZNK5spark6Logger4infoEPKcz>
 8089e60:	e019      	b.n	8089e96 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
	size_t ii = 0;
 8089e62:	2600      	movs	r6, #0
	for(; key[ii]; ii++) {
 8089e64:	5db8      	ldrb	r0, [r7, r6]
 8089e66:	b128      	cbz	r0, 8089e74 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x34>
		ucCopy[ii] = toupper(key[ii]);
 8089e68:	f006 fb60 	bl	809052c <toupper>
 8089e6c:	f80d 0006 	strb.w	r0, [sp, r6]
	for(; key[ii]; ii++) {
 8089e70:	3601      	adds	r6, #1
 8089e72:	e7f7      	b.n	8089e64 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x24>
	ucCopy[ii] = 0;
 8089e74:	ab04      	add	r3, sp, #16
 8089e76:	441e      	add	r6, r3
 8089e78:	f806 0c10 	strb.w	r0, [r6, #-16]
	if (strcmp(ucCopy, "RAT") == 0) {
 8089e7c:	4955      	ldr	r1, [pc, #340]	; (8089fd4 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x194>)
 8089e7e:	4668      	mov	r0, sp
 8089e80:	f004 fe27 	bl	808ead2 <strcmp>
 8089e84:	b948      	cbnz	r0, 8089e9a <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x5a>
		isUMTS = (strstr(value, "UMTS") != NULL);
 8089e86:	4620      	mov	r0, r4
 8089e88:	4953      	ldr	r1, [pc, #332]	; (8089fd8 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x198>)
 8089e8a:	f005 fbe0 	bl	808f64e <strstr>
 8089e8e:	3800      	subs	r0, #0
 8089e90:	bf18      	it	ne
 8089e92:	2001      	movne	r0, #1
 8089e94:	7728      	strb	r0, [r5, #28]
}
 8089e96:	b005      	add	sp, #20
 8089e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (strcmp(ucCopy, "MCC") == 0) {
 8089e9a:	4668      	mov	r0, sp
 8089e9c:	494f      	ldr	r1, [pc, #316]	; (8089fdc <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x19c>)
 8089e9e:	f004 fe18 	bl	808ead2 <strcmp>
 8089ea2:	b920      	cbnz	r0, 8089eae <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x6e>
		mcc = atoi(value);
 8089ea4:	4620      	mov	r0, r4
 8089ea6:	f004 fcb2 	bl	808e80e <atoi>
 8089eaa:	6028      	str	r0, [r5, #0]
 8089eac:	e7f3      	b.n	8089e96 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
	if (strcmp(ucCopy, "MNC") == 0) {
 8089eae:	4668      	mov	r0, sp
 8089eb0:	494b      	ldr	r1, [pc, #300]	; (8089fe0 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1a0>)
 8089eb2:	f004 fe0e 	bl	808ead2 <strcmp>
 8089eb6:	b920      	cbnz	r0, 8089ec2 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x82>
		mnc = atoi(value);
 8089eb8:	4620      	mov	r0, r4
 8089eba:	f004 fca8 	bl	808e80e <atoi>
 8089ebe:	6068      	str	r0, [r5, #4]
 8089ec0:	e7e9      	b.n	8089e96 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
	if (strcmp(ucCopy, "LAC") == 0) {
 8089ec2:	4948      	ldr	r1, [pc, #288]	; (8089fe4 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1a4>)
 8089ec4:	4668      	mov	r0, sp
 8089ec6:	f004 fe04 	bl	808ead2 <strcmp>
 8089eca:	4601      	mov	r1, r0
 8089ecc:	b928      	cbnz	r0, 8089eda <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x9a>
		lac = (int) strtol(value, NULL, 16); // hex
 8089ece:	2210      	movs	r2, #16
 8089ed0:	4620      	mov	r0, r4
 8089ed2:	f006 fa9b 	bl	809040c <strtol>
 8089ed6:	60a8      	str	r0, [r5, #8]
 8089ed8:	e7dd      	b.n	8089e96 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
	if (strcmp(ucCopy, "CI") == 0) {
 8089eda:	4943      	ldr	r1, [pc, #268]	; (8089fe8 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1a8>)
 8089edc:	4668      	mov	r0, sp
 8089ede:	f004 fdf8 	bl	808ead2 <strcmp>
 8089ee2:	4601      	mov	r1, r0
 8089ee4:	b928      	cbnz	r0, 8089ef2 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0xb2>
		ci = (int) strtol(value, NULL, 16); // hex
 8089ee6:	2210      	movs	r2, #16
 8089ee8:	4620      	mov	r0, r4
 8089eea:	f006 fa8f 	bl	809040c <strtol>
 8089eee:	60e8      	str	r0, [r5, #12]
 8089ef0:	e7d1      	b.n	8089e96 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
	if (strcmp(ucCopy, "BSIC") == 0) {
 8089ef2:	493e      	ldr	r1, [pc, #248]	; (8089fec <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1ac>)
 8089ef4:	4668      	mov	r0, sp
 8089ef6:	f004 fdec 	bl	808ead2 <strcmp>
 8089efa:	4601      	mov	r1, r0
 8089efc:	b928      	cbnz	r0, 8089f0a <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0xca>
		bsic = (int) strtol(value, NULL, 16); // hex
 8089efe:	2210      	movs	r2, #16
 8089f00:	4620      	mov	r0, r4
 8089f02:	f006 fa83 	bl	809040c <strtol>
 8089f06:	6128      	str	r0, [r5, #16]
 8089f08:	e7c5      	b.n	8089e96 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
	if (strcmp(ucCopy, "ARFCN") == 0) { // Usually "Arfcn"
 8089f0a:	4668      	mov	r0, sp
 8089f0c:	4938      	ldr	r1, [pc, #224]	; (8089ff0 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1b0>)
 8089f0e:	f004 fde0 	bl	808ead2 <strcmp>
 8089f12:	b920      	cbnz	r0, 8089f1e <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0xde>
		arfcn = atoi(value);
 8089f14:	4620      	mov	r0, r4
 8089f16:	f004 fc7a 	bl	808e80e <atoi>
 8089f1a:	6168      	str	r0, [r5, #20]
 8089f1c:	e7bb      	b.n	8089e96 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
	if (strcmp(ucCopy, "ARFCN_DED") == 0 || strcmp(ucCopy, "RXLEVSUB") == 0 || strcmp(ucCopy, "T_ADV") == 0) {
 8089f1e:	4668      	mov	r0, sp
 8089f20:	4934      	ldr	r1, [pc, #208]	; (8089ff4 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1b4>)
 8089f22:	f004 fdd6 	bl	808ead2 <strcmp>
 8089f26:	2800      	cmp	r0, #0
 8089f28:	d0b5      	beq.n	8089e96 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
 8089f2a:	4668      	mov	r0, sp
 8089f2c:	4932      	ldr	r1, [pc, #200]	; (8089ff8 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1b8>)
 8089f2e:	f004 fdd0 	bl	808ead2 <strcmp>
 8089f32:	2800      	cmp	r0, #0
 8089f34:	d0af      	beq.n	8089e96 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
 8089f36:	4668      	mov	r0, sp
 8089f38:	4930      	ldr	r1, [pc, #192]	; (8089ffc <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1bc>)
 8089f3a:	f004 fdca 	bl	808ead2 <strcmp>
 8089f3e:	2800      	cmp	r0, #0
 8089f40:	d0a9      	beq.n	8089e96 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
	if (strcmp(ucCopy, "RXLEV") == 0) { // Sometimes RxLev
 8089f42:	492f      	ldr	r1, [pc, #188]	; (808a000 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1c0>)
 8089f44:	4668      	mov	r0, sp
 8089f46:	f004 fdc4 	bl	808ead2 <strcmp>
 8089f4a:	4601      	mov	r1, r0
 8089f4c:	b928      	cbnz	r0, 8089f5a <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x11a>
		rxlev = (int) strtol(value, NULL, 16); // hex
 8089f4e:	2210      	movs	r2, #16
 8089f50:	4620      	mov	r0, r4
 8089f52:	f006 fa5b 	bl	809040c <strtol>
 8089f56:	61a8      	str	r0, [r5, #24]
 8089f58:	e79d      	b.n	8089e96 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
	if (strcmp(ucCopy, "DLF") == 0) {
 8089f5a:	4668      	mov	r0, sp
 8089f5c:	4929      	ldr	r1, [pc, #164]	; (808a004 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1c4>)
 8089f5e:	f004 fdb8 	bl	808ead2 <strcmp>
 8089f62:	b920      	cbnz	r0, 8089f6e <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x12e>
		dlf = atoi(value);
 8089f64:	4620      	mov	r0, r4
 8089f66:	f004 fc52 	bl	808e80e <atoi>
 8089f6a:	6228      	str	r0, [r5, #32]
 8089f6c:	e793      	b.n	8089e96 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
	if (strcmp(ucCopy, "ULF") == 0) {
 8089f6e:	4668      	mov	r0, sp
 8089f70:	4925      	ldr	r1, [pc, #148]	; (808a008 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1c8>)
 8089f72:	f004 fdae 	bl	808ead2 <strcmp>
 8089f76:	b930      	cbnz	r0, 8089f86 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x146>
		ulf = atoi(value);
 8089f78:	4620      	mov	r0, r4
 8089f7a:	f004 fc48 	bl	808e80e <atoi>
		isUMTS = true;
 8089f7e:	2301      	movs	r3, #1
		ulf = atoi(value);
 8089f80:	6268      	str	r0, [r5, #36]	; 0x24
		isUMTS = true;
 8089f82:	772b      	strb	r3, [r5, #28]
 8089f84:	e787      	b.n	8089e96 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
	if (strcmp(ucCopy, "RSCP LEV") == 0) {
 8089f86:	4668      	mov	r0, sp
 8089f88:	4920      	ldr	r1, [pc, #128]	; (808a00c <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1cc>)
 8089f8a:	f004 fda2 	bl	808ead2 <strcmp>
 8089f8e:	b920      	cbnz	r0, 8089f9a <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x15a>
		rscpLev = atoi(value);
 8089f90:	4620      	mov	r0, r4
 8089f92:	f004 fc3c 	bl	808e80e <atoi>
 8089f96:	62a8      	str	r0, [r5, #40]	; 0x28
 8089f98:	e77d      	b.n	8089e96 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
	if (strcmp(ucCopy, "RAC") == 0 || strcmp(ucCopy, "SC") == 0 || strcmp(ucCopy, "ECN0 LEV") == 0) {
 8089f9a:	4668      	mov	r0, sp
 8089f9c:	491c      	ldr	r1, [pc, #112]	; (808a010 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1d0>)
 8089f9e:	f004 fd98 	bl	808ead2 <strcmp>
 8089fa2:	2800      	cmp	r0, #0
 8089fa4:	f43f af77 	beq.w	8089e96 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
 8089fa8:	4668      	mov	r0, sp
 8089faa:	491a      	ldr	r1, [pc, #104]	; (808a014 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1d4>)
 8089fac:	f004 fd91 	bl	808ead2 <strcmp>
 8089fb0:	2800      	cmp	r0, #0
 8089fb2:	f43f af70 	beq.w	8089e96 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
 8089fb6:	4668      	mov	r0, sp
 8089fb8:	4917      	ldr	r1, [pc, #92]	; (808a018 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1d8>)
 8089fba:	f004 fd8a 	bl	808ead2 <strcmp>
 8089fbe:	2800      	cmp	r0, #0
 8089fc0:	f43f af69 	beq.w	8089e96 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
		Log.info("unknown key=%s value=%s", key, value);
 8089fc4:	4623      	mov	r3, r4
 8089fc6:	463a      	mov	r2, r7
 8089fc8:	4914      	ldr	r1, [pc, #80]	; (808a01c <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1dc>)
 8089fca:	e746      	b.n	8089e5a <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1a>
 8089fcc:	0809415b 	.word	0x0809415b
 8089fd0:	20000e84 	.word	0x20000e84
 8089fd4:	08094178 	.word	0x08094178
 8089fd8:	0809417c 	.word	0x0809417c
 8089fdc:	08094181 	.word	0x08094181
 8089fe0:	08094185 	.word	0x08094185
 8089fe4:	08094189 	.word	0x08094189
 8089fe8:	0809418d 	.word	0x0809418d
 8089fec:	08094190 	.word	0x08094190
 8089ff0:	08094195 	.word	0x08094195
 8089ff4:	0809419b 	.word	0x0809419b
 8089ff8:	080941a5 	.word	0x080941a5
 8089ffc:	080941ae 	.word	0x080941ae
 808a000:	080941b4 	.word	0x080941b4
 808a004:	080941ba 	.word	0x080941ba
 808a008:	080941be 	.word	0x080941be
 808a00c:	080941c2 	.word	0x080941c2
 808a010:	080941cb 	.word	0x080941cb
 808a014:	080941cf 	.word	0x080941cf
 808a018:	080941d2 	.word	0x080941d2
 808a01c:	080941db 	.word	0x080941db

0808a020 <_ZN33CellularHelperEnvironmentCellData5parseEPKc>:
void CellularHelperEnvironmentCellData::parse(const char *str) {
 808a020:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 808a024:	4605      	mov	r5, r0
	char *mutableCopy = strdup(str);
 808a026:	4608      	mov	r0, r1
 808a028:	f004 fd66 	bl	808eaf8 <strdup>
	char *pair = strtok_r(mutableCopy, ",", &endStr);
 808a02c:	4912      	ldr	r1, [pc, #72]	; (808a078 <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x58>)
 808a02e:	aa01      	add	r2, sp, #4
	char *mutableCopy = strdup(str);
 808a030:	4604      	mov	r4, r0
			*colon = 0;
 808a032:	2700      	movs	r7, #0
	char *pair = strtok_r(mutableCopy, ",", &endStr);
 808a034:	f006 f96c 	bl	8090310 <strtok_r>
		pair = strtok_r(NULL, ",", &endStr);
 808a038:	4e0f      	ldr	r6, [pc, #60]	; (808a078 <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x58>)
	while(pair) {
 808a03a:	b1b8      	cbz	r0, 808a06c <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x4c>
 808a03c:	4680      	mov	r8, r0
		while(*pair == ' ') {
 808a03e:	f898 3000 	ldrb.w	r3, [r8]
 808a042:	3001      	adds	r0, #1
 808a044:	2b20      	cmp	r3, #32
 808a046:	d0f9      	beq.n	808a03c <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x1c>
		char *colon = strchr(pair, ':');
 808a048:	213a      	movs	r1, #58	; 0x3a
 808a04a:	4640      	mov	r0, r8
 808a04c:	f004 fd34 	bl	808eab8 <strchr>
		if (colon != NULL) {
 808a050:	4602      	mov	r2, r0
 808a052:	b128      	cbz	r0, 808a060 <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x40>
			addKeyValue(key, value);
 808a054:	4641      	mov	r1, r8
 808a056:	4628      	mov	r0, r5
			*colon = 0;
 808a058:	f802 7b01 	strb.w	r7, [r2], #1
			addKeyValue(key, value);
 808a05c:	f7ff fef0 	bl	8089e40 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_>
		pair = strtok_r(NULL, ",", &endStr);
 808a060:	4631      	mov	r1, r6
 808a062:	aa01      	add	r2, sp, #4
 808a064:	2000      	movs	r0, #0
 808a066:	f006 f953 	bl	8090310 <strtok_r>
	while(pair) {
 808a06a:	e7e6      	b.n	808a03a <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x1a>
	free(mutableCopy);
 808a06c:	4620      	mov	r0, r4
 808a06e:	f000 fdb1 	bl	808abd4 <free>
}
 808a072:	b002      	add	sp, #8
 808a074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808a078:	08094026 	.word	0x08094026

0808a07c <_ZN33CellularHelperEnvironmentResponse5parseEiPKci>:
int CellularHelperEnvironmentResponse::parse(int type, const char *buf, int len) {
 808a07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (enableDebug) {
 808a080:	7a06      	ldrb	r6, [r0, #8]
int CellularHelperEnvironmentResponse::parse(int type, const char *buf, int len) {
 808a082:	4605      	mov	r5, r0
 808a084:	460f      	mov	r7, r1
 808a086:	4690      	mov	r8, r2
 808a088:	461c      	mov	r4, r3
 808a08a:	b08b      	sub	sp, #44	; 0x2c
	if (enableDebug) {
 808a08c:	b10e      	cbz	r6, 808a092 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x16>
		logCellularDebug(type, buf, len);
 808a08e:	f7ff fd87 	bl	8089ba0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	if (type == TYPE_UNKNOWN || type == TYPE_PLUS) {
 808a092:	f437 0980 	bics.w	r9, r7, #4194304	; 0x400000
 808a096:	d161      	bne.n	808a15c <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xe0>
		char *copy = (char *) malloc(len + 1);
 808a098:	1c60      	adds	r0, r4, #1
 808a09a:	f000 fd93 	bl	808abc4 <malloc>
		if (copy) {
 808a09e:	4606      	mov	r6, r0
 808a0a0:	2800      	cmp	r0, #0
 808a0a2:	d05b      	beq.n	808a15c <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xe0>
			strncpy(copy, buf, len);
 808a0a4:	4622      	mov	r2, r4
 808a0a6:	4641      	mov	r1, r8
 808a0a8:	f005 fabe 	bl	808f628 <strncpy>
			copy[len] = 0;
 808a0ac:	f806 9004 	strb.w	r9, [r6, r4]
			size_t searchForLen = snprintf(searchFor, sizeof(searchFor), "+%s: ", command.c_str());
 808a0b0:	2120      	movs	r1, #32
 808a0b2:	68eb      	ldr	r3, [r5, #12]
 808a0b4:	4a2c      	ldr	r2, [pc, #176]	; (808a168 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xec>)
 808a0b6:	a802      	add	r0, sp, #8
 808a0b8:	f000 fdbc 	bl	808ac34 <snprintf>
			char *line = strtok_r(copy, "\r\n", &endStr);
 808a0bc:	492b      	ldr	r1, [pc, #172]	; (808a16c <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xf0>)
			size_t searchForLen = snprintf(searchFor, sizeof(searchFor), "+%s: ", command.c_str());
 808a0be:	4680      	mov	r8, r0
			char *line = strtok_r(copy, "\r\n", &endStr);
 808a0c0:	aa01      	add	r2, sp, #4
 808a0c2:	4630      	mov	r0, r6
 808a0c4:	f006 f924 	bl	8090310 <strtok_r>
 808a0c8:	4604      	mov	r4, r0
					if (strncmp(line, "MCC:", 4) == 0) {
 808a0ca:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 808a170 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xf4>
					if (strncmp(line, "RAT:", 4) == 0) {
 808a0ce:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 808a174 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xf8>
				line = strtok_r(NULL, "\r\n", &endStr);
 808a0d2:	f8df 9098 	ldr.w	r9, [pc, #152]	; 808a16c <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xf0>
			while(line) {
 808a0d6:	2c00      	cmp	r4, #0
 808a0d8:	d03d      	beq.n	808a156 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xda>
				if (line[0]) {
 808a0da:	7823      	ldrb	r3, [r4, #0]
 808a0dc:	b1d3      	cbz	r3, 808a114 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x98>
					if (type == TYPE_PLUS && strncmp(line, searchFor, searchForLen) == 0) {
 808a0de:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
 808a0e2:	d106      	bne.n	808a0f2 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x76>
 808a0e4:	4642      	mov	r2, r8
 808a0e6:	4620      	mov	r0, r4
 808a0e8:	a902      	add	r1, sp, #8
 808a0ea:	f005 fa8b 	bl	808f604 <strncmp>
 808a0ee:	b900      	cbnz	r0, 808a0f2 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x76>
						line += searchForLen;
 808a0f0:	4444      	add	r4, r8
					if (strncmp(line, "MCC:", 4) == 0) {
 808a0f2:	2204      	movs	r2, #4
 808a0f4:	4651      	mov	r1, sl
 808a0f6:	4620      	mov	r0, r4
 808a0f8:	f005 fa84 	bl	808f604 <strncmp>
 808a0fc:	bb00      	cbnz	r0, 808a140 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xc4>
						if (curDataIndex < 0) {
 808a0fe:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 808a100:	2b00      	cmp	r3, #0
 808a102:	da0e      	bge.n	808a122 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xa6>
							service.parse(line);
 808a104:	4621      	mov	r1, r4
 808a106:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 808a10a:	f7ff ff89 	bl	808a020 <_ZN33CellularHelperEnvironmentCellData5parseEPKc>
							curDataIndex++;
 808a10e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 808a110:	3301      	adds	r3, #1
 808a112:	662b      	str	r3, [r5, #96]	; 0x60
				line = strtok_r(NULL, "\r\n", &endStr);
 808a114:	4649      	mov	r1, r9
 808a116:	2000      	movs	r0, #0
 808a118:	aa01      	add	r2, sp, #4
 808a11a:	f006 f8f9 	bl	8090310 <strtok_r>
 808a11e:	4604      	mov	r4, r0
			while(line) {
 808a120:	e7d9      	b.n	808a0d6 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x5a>
						if (neighbors && (size_t)curDataIndex < numNeighbors) {
 808a122:	6daa      	ldr	r2, [r5, #88]	; 0x58
 808a124:	2a00      	cmp	r2, #0
 808a126:	d0f5      	beq.n	808a114 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x98>
 808a128:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 808a12a:	428b      	cmp	r3, r1
 808a12c:	d2f2      	bcs.n	808a114 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x98>
							neighbors[curDataIndex++].parse(line);
 808a12e:	202c      	movs	r0, #44	; 0x2c
 808a130:	1c59      	adds	r1, r3, #1
 808a132:	6629      	str	r1, [r5, #96]	; 0x60
 808a134:	4621      	mov	r1, r4
 808a136:	fb00 2003 	mla	r0, r0, r3, r2
						service.parse(line);
 808a13a:	f7ff ff71 	bl	808a020 <_ZN33CellularHelperEnvironmentCellData5parseEPKc>
 808a13e:	e7e9      	b.n	808a114 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x98>
					if (strncmp(line, "RAT:", 4) == 0) {
 808a140:	2204      	movs	r2, #4
 808a142:	4659      	mov	r1, fp
 808a144:	4620      	mov	r0, r4
 808a146:	f005 fa5d 	bl	808f604 <strncmp>
 808a14a:	2800      	cmp	r0, #0
 808a14c:	d1e2      	bne.n	808a114 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x98>
						service.parse(line);
 808a14e:	4621      	mov	r1, r4
 808a150:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 808a154:	e7f1      	b.n	808a13a <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xbe>
			free(copy);
 808a156:	4630      	mov	r0, r6
 808a158:	f000 fd3c 	bl	808abd4 <free>
}
 808a15c:	f04f 30ff 	mov.w	r0, #4294967295
 808a160:	b00b      	add	sp, #44	; 0x2c
 808a162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808a166:	bf00      	nop
 808a168:	080942e4 	.word	0x080942e4
 808a16c:	080942e0 	.word	0x080942e0
 808a170:	080941f3 	.word	0x080941f3
 808a174:	080941f8 	.word	0x080941f8

0808a178 <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv>:
size_t CellularHelperEnvironmentResponse::getNumNeighbors() const {
 808a178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (curDataIndex < 0) {
 808a17a:	6e05      	ldr	r5, [r0, #96]	; 0x60
 808a17c:	2d00      	cmp	r5, #0
 808a17e:	db10      	blt.n	808a1a2 <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv+0x2a>
		if (neighbors) {
 808a180:	6d86      	ldr	r6, [r0, #88]	; 0x58
 808a182:	b15e      	cbz	r6, 808a19c <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv+0x24>
			for(size_t ii = 0; ii < (size_t)curDataIndex; ii++) {
 808a184:	2400      	movs	r4, #0
				if (!neighbors[ii].isValid()) {
 808a186:	272c      	movs	r7, #44	; 0x2c
			for(size_t ii = 0; ii < (size_t)curDataIndex; ii++) {
 808a188:	42ac      	cmp	r4, r5
 808a18a:	d007      	beq.n	808a19c <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv+0x24>
				if (!neighbors[ii].isValid()) {
 808a18c:	2100      	movs	r1, #0
 808a18e:	fb07 6004 	mla	r0, r7, r4, r6
 808a192:	f7ff fe3b 	bl	8089e0c <_ZNK33CellularHelperEnvironmentCellData7isValidEb>
 808a196:	b110      	cbz	r0, 808a19e <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv+0x26>
			for(size_t ii = 0; ii < (size_t)curDataIndex; ii++) {
 808a198:	3401      	adds	r4, #1
 808a19a:	e7f5      	b.n	808a188 <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv+0x10>
		return curDataIndex;
 808a19c:	462c      	mov	r4, r5
}
 808a19e:	4620      	mov	r0, r4
 808a1a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
 808a1a2:	2400      	movs	r4, #0
 808a1a4:	e7fb      	b.n	808a19e <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv+0x26>
	...

0808a1a8 <_ZN26CellularHelperCREGResponse11postProcessEv>:
void CellularHelperCREGResponse::postProcess() {
 808a1a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (sscanf(string.c_str(), "%d,%d,\"%x\",\"%x\",%d", &n, &stat, &lac, &ci, &rat) == 5) {
 808a1ac:	f100 0738 	add.w	r7, r0, #56	; 0x38
void CellularHelperCREGResponse::postProcess() {
 808a1b0:	b086      	sub	sp, #24
	if (sscanf(string.c_str(), "%d,%d,\"%x\",\"%x\",%d", &n, &stat, &lac, &ci, &rat) == 5) {
 808a1b2:	f100 083c 	add.w	r8, r0, #60	; 0x3c
 808a1b6:	e9cd 7801 	strd	r7, r8, [sp, #4]
 808a1ba:	f100 0634 	add.w	r6, r0, #52	; 0x34
 808a1be:	f100 0530 	add.w	r5, r0, #48	; 0x30
 808a1c2:	9600      	str	r6, [sp, #0]
void CellularHelperCREGResponse::postProcess() {
 808a1c4:	4604      	mov	r4, r0
	if (sscanf(string.c_str(), "%d,%d,\"%x\",\"%x\",%d", &n, &stat, &lac, &ci, &rat) == 5) {
 808a1c6:	462b      	mov	r3, r5
 808a1c8:	490b      	ldr	r1, [pc, #44]	; (808a1f8 <_ZN26CellularHelperCREGResponse11postProcessEv+0x50>)
 808a1ca:	69c0      	ldr	r0, [r0, #28]
 808a1cc:	aa05      	add	r2, sp, #20
 808a1ce:	f000 fd21 	bl	808ac14 <sscanf>
 808a1d2:	2805      	cmp	r0, #5
 808a1d4:	d105      	bne.n	808a1e2 <_ZN26CellularHelperCREGResponse11postProcessEv+0x3a>
		valid = true;
 808a1d6:	2301      	movs	r3, #1
 808a1d8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 808a1dc:	b006      	add	sp, #24
 808a1de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (sscanf(string.c_str(), "%d,\"%x\",\"%x\",%d", &stat, &lac, &ci, &rat) == 4) {
 808a1e2:	4633      	mov	r3, r6
 808a1e4:	462a      	mov	r2, r5
 808a1e6:	e9cd 7800 	strd	r7, r8, [sp]
 808a1ea:	4904      	ldr	r1, [pc, #16]	; (808a1fc <_ZN26CellularHelperCREGResponse11postProcessEv+0x54>)
 808a1ec:	69e0      	ldr	r0, [r4, #28]
 808a1ee:	f000 fd11 	bl	808ac14 <sscanf>
 808a1f2:	2804      	cmp	r0, #4
 808a1f4:	d1f2      	bne.n	808a1dc <_ZN26CellularHelperCREGResponse11postProcessEv+0x34>
 808a1f6:	e7ee      	b.n	808a1d6 <_ZN26CellularHelperCREGResponse11postProcessEv+0x2e>
 808a1f8:	0809422d 	.word	0x0809422d
 808a1fc:	08094230 	.word	0x08094230

0808a200 <_ZNK26CellularHelperCREGResponse8toStringEv>:
String CellularHelperCREGResponse::toString() const {
 808a200:	b513      	push	{r0, r1, r4, lr}
	if (valid) {
 808a202:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
String CellularHelperCREGResponse::toString() const {
 808a206:	4604      	mov	r4, r0
	if (valid) {
 808a208:	b15b      	cbz	r3, 808a222 <_ZNK26CellularHelperCREGResponse8toStringEv+0x22>
		return String::format("stat=%d lac=0x%x ci=0x%x rat=%d", stat, lac, ci, rat);
 808a20a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 808a20c:	9301      	str	r3, [sp, #4]
 808a20e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 808a210:	9300      	str	r3, [sp, #0]
 808a212:	e9d1 230c 	ldrd	r2, r3, [r1, #48]	; 0x30
 808a216:	4905      	ldr	r1, [pc, #20]	; (808a22c <_ZNK26CellularHelperCREGResponse8toStringEv+0x2c>)
 808a218:	f001 faec 	bl	808b7f4 <_ZN6String6formatEPKcz>
}
 808a21c:	4620      	mov	r0, r4
 808a21e:	b002      	add	sp, #8
 808a220:	bd10      	pop	{r4, pc}
		return "valid=false";
 808a222:	4903      	ldr	r1, [pc, #12]	; (808a230 <_ZNK26CellularHelperCREGResponse8toStringEv+0x30>)
 808a224:	f001 f926 	bl	808b474 <_ZN6StringC1EPKc>
 808a228:	e7f8      	b.n	808a21c <_ZNK26CellularHelperCREGResponse8toStringEv+0x1c>
 808a22a:	bf00      	nop
 808a22c:	08094240 	.word	0x08094240
 808a230:	08094221 	.word	0x08094221

0808a234 <_ZN28CellularHelperStringResponseC1Ev>:
class CellularHelperCommonResponse {
 808a234:	f06f 0302 	mvn.w	r3, #2
class CellularHelperStringResponse : public CellularHelperCommonResponse {
 808a238:	b510      	push	{r4, lr}
class CellularHelperCommonResponse {
 808a23a:	6043      	str	r3, [r0, #4]
 808a23c:	2300      	movs	r3, #0
class CellularHelperStringResponse : public CellularHelperCommonResponse {
 808a23e:	4604      	mov	r4, r0
class CellularHelperCommonResponse {
 808a240:	7203      	strb	r3, [r0, #8]
class CellularHelperStringResponse : public CellularHelperCommonResponse {
 808a242:	4b04      	ldr	r3, [pc, #16]	; (808a254 <_ZN28CellularHelperStringResponseC1Ev+0x20>)
 808a244:	4904      	ldr	r1, [pc, #16]	; (808a258 <_ZN28CellularHelperStringResponseC1Ev+0x24>)
 808a246:	f840 3b0c 	str.w	r3, [r0], #12
 808a24a:	f001 f913 	bl	808b474 <_ZN6StringC1EPKc>
 808a24e:	4620      	mov	r0, r4
 808a250:	bd10      	pop	{r4, pc}
 808a252:	bf00      	nop
 808a254:	080942f4 	.word	0x080942f4
 808a258:	080942e2 	.word	0x080942e2

0808a25c <_ZN28CellularHelperStringResponseD1Ev>:
 808a25c:	b510      	push	{r4, lr}
 808a25e:	4604      	mov	r4, r0
 808a260:	4b03      	ldr	r3, [pc, #12]	; (808a270 <_ZN28CellularHelperStringResponseD1Ev+0x14>)
 808a262:	f840 3b0c 	str.w	r3, [r0], #12
 808a266:	f001 f8bb 	bl	808b3e0 <_ZN6StringD1Ev>
 808a26a:	4620      	mov	r0, r4
 808a26c:	bd10      	pop	{r4, pc}
 808a26e:	bf00      	nop
 808a270:	080942f4 	.word	0x080942f4

0808a274 <_ZNK19CellularHelperClass15getManufacturerEv>:
String CellularHelperClass::getManufacturer() const {
 808a274:	b510      	push	{r4, lr}
 808a276:	4604      	mov	r4, r0
 808a278:	b088      	sub	sp, #32
	CellularHelperStringResponse resp;
 808a27a:	a801      	add	r0, sp, #4
 808a27c:	f7ff ffda 	bl	808a234 <_ZN28CellularHelperStringResponseC1Ev>

    template<typename T, typename... Targs>
    inline int command(int (*cb)(int type, const char* buf, int len, T* param),
            T* param, system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
 808a280:	f242 7210 	movw	r2, #10000	; 0x2710
 808a284:	4b07      	ldr	r3, [pc, #28]	; (808a2a4 <_ZNK19CellularHelperClass15getManufacturerEv+0x30>)
 808a286:	a901      	add	r1, sp, #4
 808a288:	4807      	ldr	r0, [pc, #28]	; (808a2a8 <_ZNK19CellularHelperClass15getManufacturerEv+0x34>)
 808a28a:	f000 fb4b 	bl	808a924 <cellular_command>
	return resp.string;
 808a28e:	a904      	add	r1, sp, #16
 808a290:	4620      	mov	r0, r4
 808a292:	f001 f92e 	bl	808b4f2 <_ZN6StringC1ERKS_>
	CellularHelperStringResponse resp;
 808a296:	a801      	add	r0, sp, #4
 808a298:	f7ff ffe0 	bl	808a25c <_ZN28CellularHelperStringResponseD1Ev>
}
 808a29c:	4620      	mov	r0, r4
 808a29e:	b008      	add	sp, #32
 808a2a0:	bd10      	pop	{r4, pc}
 808a2a2:	bf00      	nop
 808a2a4:	08094260 	.word	0x08094260
 808a2a8:	08089b89 	.word	0x08089b89

0808a2ac <_ZNK19CellularHelperClass8getModelEv>:
String CellularHelperClass::getModel() const {
 808a2ac:	b510      	push	{r4, lr}
 808a2ae:	4604      	mov	r4, r0
 808a2b0:	b088      	sub	sp, #32
	CellularHelperStringResponse resp;
 808a2b2:	a801      	add	r0, sp, #4
 808a2b4:	f7ff ffbe 	bl	808a234 <_ZN28CellularHelperStringResponseC1Ev>
 808a2b8:	f242 7210 	movw	r2, #10000	; 0x2710
 808a2bc:	4b07      	ldr	r3, [pc, #28]	; (808a2dc <_ZNK19CellularHelperClass8getModelEv+0x30>)
 808a2be:	a901      	add	r1, sp, #4
 808a2c0:	4807      	ldr	r0, [pc, #28]	; (808a2e0 <_ZNK19CellularHelperClass8getModelEv+0x34>)
 808a2c2:	f000 fb2f 	bl	808a924 <cellular_command>
	return resp.string;
 808a2c6:	a904      	add	r1, sp, #16
 808a2c8:	4620      	mov	r0, r4
 808a2ca:	f001 f912 	bl	808b4f2 <_ZN6StringC1ERKS_>
	CellularHelperStringResponse resp;
 808a2ce:	a801      	add	r0, sp, #4
 808a2d0:	f7ff ffc4 	bl	808a25c <_ZN28CellularHelperStringResponseD1Ev>
}
 808a2d4:	4620      	mov	r0, r4
 808a2d6:	b008      	add	sp, #32
 808a2d8:	bd10      	pop	{r4, pc}
 808a2da:	bf00      	nop
 808a2dc:	0809426a 	.word	0x0809426a
 808a2e0:	08089b89 	.word	0x08089b89

0808a2e4 <_ZNK19CellularHelperClass7getIMEIEv>:
String CellularHelperClass::getIMEI() const {
 808a2e4:	b510      	push	{r4, lr}
 808a2e6:	4604      	mov	r4, r0
 808a2e8:	b088      	sub	sp, #32
	CellularHelperStringResponse resp;
 808a2ea:	a801      	add	r0, sp, #4
 808a2ec:	f7ff ffa2 	bl	808a234 <_ZN28CellularHelperStringResponseC1Ev>
 808a2f0:	f242 7210 	movw	r2, #10000	; 0x2710
 808a2f4:	4b07      	ldr	r3, [pc, #28]	; (808a314 <_ZNK19CellularHelperClass7getIMEIEv+0x30>)
 808a2f6:	a901      	add	r1, sp, #4
 808a2f8:	4807      	ldr	r0, [pc, #28]	; (808a318 <_ZNK19CellularHelperClass7getIMEIEv+0x34>)
 808a2fa:	f000 fb13 	bl	808a924 <cellular_command>
	return resp.string;
 808a2fe:	a904      	add	r1, sp, #16
 808a300:	4620      	mov	r0, r4
 808a302:	f001 f8f6 	bl	808b4f2 <_ZN6StringC1ERKS_>
	CellularHelperStringResponse resp;
 808a306:	a801      	add	r0, sp, #4
 808a308:	f7ff ffa8 	bl	808a25c <_ZN28CellularHelperStringResponseD1Ev>
}
 808a30c:	4620      	mov	r0, r4
 808a30e:	b008      	add	sp, #32
 808a310:	bd10      	pop	{r4, pc}
 808a312:	bf00      	nop
 808a314:	08094274 	.word	0x08094274
 808a318:	08089b89 	.word	0x08089b89

0808a31c <_ZNK19CellularHelperClass7getIMSIEv>:
 808a31c:	b510      	push	{r4, lr}
 808a31e:	4604      	mov	r4, r0
 808a320:	f7ff ffa8 	bl	808a274 <_ZNK19CellularHelperClass15getManufacturerEv>
 808a324:	4620      	mov	r0, r4
 808a326:	bd10      	pop	{r4, pc}

0808a328 <_ZNK19CellularHelperClass8getICCIDEv>:
String CellularHelperClass::getICCID() const {
 808a328:	b510      	push	{r4, lr}
 808a32a:	4604      	mov	r4, r0
 808a32c:	b08c      	sub	sp, #48	; 0x30
	CellularHelperPlusStringResponse resp;
 808a32e:	a801      	add	r0, sp, #4
 808a330:	f7ff fd28 	bl	8089d84 <_ZN32CellularHelperPlusStringResponseC1Ev>
	resp.command = "CCID";
 808a334:	490a      	ldr	r1, [pc, #40]	; (808a360 <_ZNK19CellularHelperClass8getICCIDEv+0x38>)
 808a336:	a804      	add	r0, sp, #16
 808a338:	f001 f8ee 	bl	808b518 <_ZN6StringaSEPKc>
 808a33c:	f242 7210 	movw	r2, #10000	; 0x2710
 808a340:	4b08      	ldr	r3, [pc, #32]	; (808a364 <_ZNK19CellularHelperClass8getICCIDEv+0x3c>)
 808a342:	a901      	add	r1, sp, #4
 808a344:	4808      	ldr	r0, [pc, #32]	; (808a368 <_ZNK19CellularHelperClass8getICCIDEv+0x40>)
 808a346:	f000 faed 	bl	808a924 <cellular_command>
	return resp.string;
 808a34a:	a908      	add	r1, sp, #32
 808a34c:	4620      	mov	r0, r4
 808a34e:	f001 f8d0 	bl	808b4f2 <_ZN6StringC1ERKS_>
	CellularHelperPlusStringResponse resp;
 808a352:	a801      	add	r0, sp, #4
 808a354:	f7ff fd30 	bl	8089db8 <_ZN32CellularHelperPlusStringResponseD1Ev>
}
 808a358:	4620      	mov	r0, r4
 808a35a:	b00c      	add	sp, #48	; 0x30
 808a35c:	bd10      	pop	{r4, pc}
 808a35e:	bf00      	nop
 808a360:	0809427e 	.word	0x0809427e
 808a364:	08094283 	.word	0x08094283
 808a368:	08089b89 	.word	0x08089b89

0808a36c <_ZNK19CellularHelperClass5isLTEEv>:
bool CellularHelperClass::isLTE() const {
 808a36c:	b510      	push	{r4, lr}
 808a36e:	b088      	sub	sp, #32
 808a370:	4601      	mov	r1, r0
	return getModel().startsWith("SARA-R4");
 808a372:	4668      	mov	r0, sp
 808a374:	f7ff ff9a 	bl	808a2ac <_ZNK19CellularHelperClass8getModelEv>
 808a378:	4909      	ldr	r1, [pc, #36]	; (808a3a0 <_ZNK19CellularHelperClass5isLTEEv+0x34>)
 808a37a:	a804      	add	r0, sp, #16
 808a37c:	f001 f87a 	bl	808b474 <_ZN6StringC1EPKc>
 808a380:	a904      	add	r1, sp, #16
 808a382:	4668      	mov	r0, sp
 808a384:	f001 f9e2 	bl	808b74c <_ZNK6String10startsWithERKS_>
 808a388:	4604      	mov	r4, r0
 808a38a:	a804      	add	r0, sp, #16
 808a38c:	f001 f828 	bl	808b3e0 <_ZN6StringD1Ev>
 808a390:	4668      	mov	r0, sp
 808a392:	f001 f825 	bl	808b3e0 <_ZN6StringD1Ev>
}
 808a396:	1e20      	subs	r0, r4, #0
 808a398:	bf18      	it	ne
 808a39a:	2001      	movne	r0, #1
 808a39c:	b008      	add	sp, #32
 808a39e:	bd10      	pop	{r4, pc}
 808a3a0:	0809428d 	.word	0x0809428d

0808a3a4 <_ZNK19CellularHelperClass15getOperatorNameEi>:
String CellularHelperClass::getOperatorName(int operatorNameType) const {
 808a3a4:	b530      	push	{r4, r5, lr}
 808a3a6:	4615      	mov	r5, r2
 808a3a8:	b093      	sub	sp, #76	; 0x4c
	String result;
 808a3aa:	4913      	ldr	r1, [pc, #76]	; (808a3f8 <_ZNK19CellularHelperClass15getOperatorNameEi+0x54>)
String CellularHelperClass::getOperatorName(int operatorNameType) const {
 808a3ac:	4604      	mov	r4, r0
	String result;
 808a3ae:	f001 f861 	bl	808b474 <_ZN6StringC1EPKc>
	CellularHelperPlusStringResponse resp;
 808a3b2:	a807      	add	r0, sp, #28
 808a3b4:	f7ff fce6 	bl	8089d84 <_ZN32CellularHelperPlusStringResponseC1Ev>
	resp.command = "UDOPN";
 808a3b8:	4910      	ldr	r1, [pc, #64]	; (808a3fc <_ZNK19CellularHelperClass15getOperatorNameEi+0x58>)
 808a3ba:	a80a      	add	r0, sp, #40	; 0x28
 808a3bc:	f001 f8ac 	bl	808b518 <_ZN6StringaSEPKc>
 808a3c0:	f242 7210 	movw	r2, #10000	; 0x2710
 808a3c4:	4b0e      	ldr	r3, [pc, #56]	; (808a400 <_ZNK19CellularHelperClass15getOperatorNameEi+0x5c>)
 808a3c6:	480f      	ldr	r0, [pc, #60]	; (808a404 <_ZNK19CellularHelperClass15getOperatorNameEi+0x60>)
 808a3c8:	9500      	str	r5, [sp, #0]
 808a3ca:	a907      	add	r1, sp, #28
 808a3cc:	f000 faaa 	bl	808a924 <cellular_command>
	if (respCode == RESP_OK) {
 808a3d0:	3002      	adds	r0, #2
 808a3d2:	d10b      	bne.n	808a3ec <_ZNK19CellularHelperClass15getOperatorNameEi+0x48>
		result = resp.getDoubleQuotedPart();
 808a3d4:	2201      	movs	r2, #1
 808a3d6:	a907      	add	r1, sp, #28
 808a3d8:	a803      	add	r0, sp, #12
 808a3da:	f7ff fca5 	bl	8089d28 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb>
 808a3de:	4620      	mov	r0, r4
 808a3e0:	a903      	add	r1, sp, #12
 808a3e2:	f001 f891 	bl	808b508 <_ZN6StringaSEOS_>
 808a3e6:	a803      	add	r0, sp, #12
 808a3e8:	f000 fffa 	bl	808b3e0 <_ZN6StringD1Ev>
	CellularHelperPlusStringResponse resp;
 808a3ec:	a807      	add	r0, sp, #28
 808a3ee:	f7ff fce3 	bl	8089db8 <_ZN32CellularHelperPlusStringResponseD1Ev>
}
 808a3f2:	4620      	mov	r0, r4
 808a3f4:	b013      	add	sp, #76	; 0x4c
 808a3f6:	bd30      	pop	{r4, r5, pc}
 808a3f8:	080942e2 	.word	0x080942e2
 808a3fc:	08094295 	.word	0x08094295
 808a400:	0809429b 	.word	0x0809429b
 808a404:	08089b89 	.word	0x08089b89

0808a408 <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse>:
void CellularHelperClass::getEnvironment(int mode, CellularHelperEnvironmentResponse &resp) const {
 808a408:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808a40a:	4614      	mov	r4, r2
 808a40c:	460d      	mov	r5, r1
	resp.command = "CGED";
 808a40e:	f102 000c 	add.w	r0, r2, #12
 808a412:	4907      	ldr	r1, [pc, #28]	; (808a430 <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse+0x28>)
 808a414:	f001 f880 	bl	808b518 <_ZN6StringaSEPKc>
 808a418:	f242 7210 	movw	r2, #10000	; 0x2710
 808a41c:	4621      	mov	r1, r4
 808a41e:	4b05      	ldr	r3, [pc, #20]	; (808a434 <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse+0x2c>)
 808a420:	9500      	str	r5, [sp, #0]
 808a422:	4805      	ldr	r0, [pc, #20]	; (808a438 <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse+0x30>)
 808a424:	f000 fa7e 	bl	808a924 <cellular_command>
	resp.resp = Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGED=%d\r\n", mode);
 808a428:	6060      	str	r0, [r4, #4]
}
 808a42a:	b003      	add	sp, #12
 808a42c:	bd30      	pop	{r4, r5, pc}
 808a42e:	bf00      	nop
 808a430:	080942a9 	.word	0x080942a9
 808a434:	080942ae 	.word	0x080942ae
 808a438:	08089b89 	.word	0x08089b89

0808a43c <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse>:
void CellularHelperClass::getCREG(CellularHelperCREGResponse &resp) const {
 808a43c:	b510      	push	{r4, lr}
 808a43e:	460c      	mov	r4, r1
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
 808a440:	2100      	movs	r1, #0
 808a442:	f242 7210 	movw	r2, #10000	; 0x2710
 808a446:	4608      	mov	r0, r1
 808a448:	4b10      	ldr	r3, [pc, #64]	; (808a48c <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x50>)
 808a44a:	f000 fa6b 	bl	808a924 <cellular_command>
	if (tempResp == RESP_OK) {
 808a44e:	3002      	adds	r0, #2
 808a450:	d11a      	bne.n	808a488 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x4c>
		resp.command = "CREG";
 808a452:	490f      	ldr	r1, [pc, #60]	; (808a490 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x54>)
 808a454:	f104 000c 	add.w	r0, r4, #12
 808a458:	f001 f85e 	bl	808b518 <_ZN6StringaSEPKc>
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
 808a45c:	f242 7210 	movw	r2, #10000	; 0x2710
 808a460:	4621      	mov	r1, r4
 808a462:	4b0c      	ldr	r3, [pc, #48]	; (808a494 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x58>)
 808a464:	480c      	ldr	r0, [pc, #48]	; (808a498 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x5c>)
 808a466:	f000 fa5d 	bl	808a924 <cellular_command>
		resp.resp = Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CREG?\r\n");
 808a46a:	6060      	str	r0, [r4, #4]
		if (resp.resp == RESP_OK) {
 808a46c:	3002      	adds	r0, #2
 808a46e:	d10b      	bne.n	808a488 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x4c>
			resp.postProcess();
 808a470:	4620      	mov	r0, r4
 808a472:	f7ff fe99 	bl	808a1a8 <_ZN26CellularHelperCREGResponse11postProcessEv>
}
 808a476:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
 808a47a:	2100      	movs	r1, #0
 808a47c:	f242 7210 	movw	r2, #10000	; 0x2710
 808a480:	4608      	mov	r0, r1
 808a482:	4b06      	ldr	r3, [pc, #24]	; (808a49c <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x60>)
 808a484:	f000 ba4e 	b.w	808a924 <cellular_command>
 808a488:	bd10      	pop	{r4, pc}
 808a48a:	bf00      	nop
 808a48c:	080942bb 	.word	0x080942bb
 808a490:	080942c7 	.word	0x080942c7
 808a494:	080942cc 	.word	0x080942cc
 808a498:	08089b89 	.word	0x08089b89
 808a49c:	080942d7 	.word	0x080942d7

0808a4a0 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>:
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 808a4a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808a4a4:	460c      	mov	r4, r1
 808a4a6:	461e      	mov	r6, r3
	str.reserve(str.length() + (size_t)len + 1);
 808a4a8:	1c59      	adds	r1, r3, #1
 808a4aa:	68a3      	ldr	r3, [r4, #8]
 808a4ac:	4620      	mov	r0, r4
 808a4ae:	4419      	add	r1, r3
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 808a4b0:	4617      	mov	r7, r2
 808a4b2:	f89d 8018 	ldrb.w	r8, [sp, #24]
	for(int ii = 0; ii < len; ii++) {
 808a4b6:	2500      	movs	r5, #0
	str.reserve(str.length() + (size_t)len + 1);
 808a4b8:	f000 ffb0 	bl	808b41c <_ZN6String7reserveEj>
	for(int ii = 0; ii < len; ii++) {
 808a4bc:	42b5      	cmp	r5, r6
 808a4be:	da0c      	bge.n	808a4da <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3a>
		if (!noEOL || (buf[ii] != '\r' && buf[ii] != '\n')) {
 808a4c0:	5d79      	ldrb	r1, [r7, r5]
 808a4c2:	f1b8 0f00 	cmp.w	r8, #0
 808a4c6:	d003      	beq.n	808a4d0 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x30>
 808a4c8:	290d      	cmp	r1, #13
 808a4ca:	d004      	beq.n	808a4d6 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x36>
 808a4cc:	290a      	cmp	r1, #10
 808a4ce:	d002      	beq.n	808a4d6 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x36>
			str.concat(buf[ii]);
 808a4d0:	4620      	mov	r0, r4
 808a4d2:	f001 f8ad 	bl	808b630 <_ZN6String6concatEc>
	for(int ii = 0; ii < len; ii++) {
 808a4d6:	3501      	adds	r5, #1
 808a4d8:	e7f0      	b.n	808a4bc <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x1c>
}
 808a4da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0808a4e0 <_ZN28CellularHelperStringResponse5parseEiPKci>:
int CellularHelperStringResponse::parse(int type, const char *buf, int len) {
 808a4e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (enableDebug) {
 808a4e2:	f890 c008 	ldrb.w	ip, [r0, #8]
int CellularHelperStringResponse::parse(int type, const char *buf, int len) {
 808a4e6:	4604      	mov	r4, r0
 808a4e8:	460f      	mov	r7, r1
 808a4ea:	4615      	mov	r5, r2
 808a4ec:	461e      	mov	r6, r3
	if (enableDebug) {
 808a4ee:	f1bc 0f00 	cmp.w	ip, #0
 808a4f2:	d001      	beq.n	808a4f8 <_ZN28CellularHelperStringResponse5parseEiPKci+0x18>
		logCellularDebug(type, buf, len);
 808a4f4:	f7ff fb54 	bl	8089ba0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	if (type == TYPE_UNKNOWN) {
 808a4f8:	b947      	cbnz	r7, 808a50c <_ZN28CellularHelperStringResponse5parseEiPKci+0x2c>
		CellularHelper.appendBufferToString(string, buf, len, true);
 808a4fa:	2301      	movs	r3, #1
 808a4fc:	462a      	mov	r2, r5
 808a4fe:	9300      	str	r3, [sp, #0]
 808a500:	4804      	ldr	r0, [pc, #16]	; (808a514 <_ZN28CellularHelperStringResponse5parseEiPKci+0x34>)
 808a502:	4633      	mov	r3, r6
 808a504:	f104 010c 	add.w	r1, r4, #12
 808a508:	f7ff ffca 	bl	808a4a0 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>
}
 808a50c:	f04f 30ff 	mov.w	r0, #4294967295
 808a510:	b003      	add	sp, #12
 808a512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808a514:	20000e70 	.word	0x20000e70

0808a518 <_ZN32CellularHelperPlusStringResponse5parseEiPKci>:
int CellularHelperPlusStringResponse::parse(int type, const char *buf, int len) {
 808a518:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (enableDebug) {
 808a51a:	f890 c008 	ldrb.w	ip, [r0, #8]
int CellularHelperPlusStringResponse::parse(int type, const char *buf, int len) {
 808a51e:	4606      	mov	r6, r0
 808a520:	460d      	mov	r5, r1
 808a522:	4617      	mov	r7, r2
 808a524:	461c      	mov	r4, r3
 808a526:	b08b      	sub	sp, #44	; 0x2c
	if (enableDebug) {
 808a528:	f1bc 0f00 	cmp.w	ip, #0
 808a52c:	d001      	beq.n	808a532 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x1a>
		logCellularDebug(type, buf, len);
 808a52e:	f7ff fb37 	bl	8089ba0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	if (type == TYPE_PLUS) {
 808a532:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
 808a536:	d12a      	bne.n	808a58e <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x76>
		char *copy = (char *) malloc(len + 1);
 808a538:	1c60      	adds	r0, r4, #1
 808a53a:	f000 fb43 	bl	808abc4 <malloc>
		if (copy) {
 808a53e:	4605      	mov	r5, r0
 808a540:	b328      	cbz	r0, 808a58e <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x76>
			strncpy(copy, buf, len);
 808a542:	4622      	mov	r2, r4
 808a544:	4639      	mov	r1, r7
 808a546:	f005 f86f 	bl	808f628 <strncpy>
			copy[len] = 0;
 808a54a:	2300      	movs	r3, #0
			snprintf(searchFor, sizeof(searchFor), "\n+%s: ", command.c_str());
 808a54c:	2120      	movs	r1, #32
			copy[len] = 0;
 808a54e:	552b      	strb	r3, [r5, r4]
			snprintf(searchFor, sizeof(searchFor), "\n+%s: ", command.c_str());
 808a550:	4a11      	ldr	r2, [pc, #68]	; (808a598 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x80>)
 808a552:	68f3      	ldr	r3, [r6, #12]
 808a554:	a802      	add	r0, sp, #8
 808a556:	f000 fb6d 	bl	808ac34 <snprintf>
			char *start = strstr(copy, searchFor);
 808a55a:	4628      	mov	r0, r5
 808a55c:	a902      	add	r1, sp, #8
 808a55e:	f005 f876 	bl	808f64e <strstr>
			if (start) {
 808a562:	4604      	mov	r4, r0
 808a564:	b180      	cbz	r0, 808a588 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x70>
				start += strlen(searchFor);
 808a566:	a802      	add	r0, sp, #8
 808a568:	f005 f844 	bl	808f5f4 <strlen>
 808a56c:	4404      	add	r4, r0
				char *end = strchr(start, '\r');
 808a56e:	210d      	movs	r1, #13
 808a570:	4620      	mov	r0, r4
 808a572:	f004 faa1 	bl	808eab8 <strchr>
				CellularHelper.appendBufferToString(string, start, end - start);
 808a576:	2301      	movs	r3, #1
 808a578:	4622      	mov	r2, r4
 808a57a:	9300      	str	r3, [sp, #0]
 808a57c:	f106 011c 	add.w	r1, r6, #28
 808a580:	1b03      	subs	r3, r0, r4
 808a582:	4806      	ldr	r0, [pc, #24]	; (808a59c <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x84>)
 808a584:	f7ff ff8c 	bl	808a4a0 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>
			free(copy);
 808a588:	4628      	mov	r0, r5
 808a58a:	f000 fb23 	bl	808abd4 <free>
}
 808a58e:	f04f 30ff 	mov.w	r0, #4294967295
 808a592:	b00b      	add	sp, #44	; 0x2c
 808a594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808a596:	bf00      	nop
 808a598:	080942e3 	.word	0x080942e3
 808a59c:	20000e70 	.word	0x20000e70

0808a5a0 <_GLOBAL__sub_I_CellularHelper>:
 808a5a0:	f000 b800 	b.w	808a5a4 <HAL_Pin_Map>

0808a5a4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 808a5a4:	b508      	push	{r3, lr}
 808a5a6:	4b02      	ldr	r3, [pc, #8]	; (808a5b0 <HAL_Pin_Map+0xc>)
 808a5a8:	681b      	ldr	r3, [r3, #0]
 808a5aa:	681b      	ldr	r3, [r3, #0]
 808a5ac:	9301      	str	r3, [sp, #4]
 808a5ae:	bd08      	pop	{r3, pc}
 808a5b0:	080401b0 	.word	0x080401b0

0808a5b4 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 808a5b4:	b508      	push	{r3, lr}
 808a5b6:	4b02      	ldr	r3, [pc, #8]	; (808a5c0 <HAL_Validate_Pin_Function+0xc>)
 808a5b8:	681b      	ldr	r3, [r3, #0]
 808a5ba:	685b      	ldr	r3, [r3, #4]
 808a5bc:	9301      	str	r3, [sp, #4]
 808a5be:	bd08      	pop	{r3, pc}
 808a5c0:	080401b0 	.word	0x080401b0

0808a5c4 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 808a5c4:	b508      	push	{r3, lr}
 808a5c6:	4b02      	ldr	r3, [pc, #8]	; (808a5d0 <HAL_Pin_Mode+0xc>)
 808a5c8:	681b      	ldr	r3, [r3, #0]
 808a5ca:	689b      	ldr	r3, [r3, #8]
 808a5cc:	9301      	str	r3, [sp, #4]
 808a5ce:	bd08      	pop	{r3, pc}
 808a5d0:	080401b0 	.word	0x080401b0

0808a5d4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 808a5d4:	b508      	push	{r3, lr}
 808a5d6:	4b02      	ldr	r3, [pc, #8]	; (808a5e0 <HAL_Get_Pin_Mode+0xc>)
 808a5d8:	681b      	ldr	r3, [r3, #0]
 808a5da:	68db      	ldr	r3, [r3, #12]
 808a5dc:	9301      	str	r3, [sp, #4]
 808a5de:	bd08      	pop	{r3, pc}
 808a5e0:	080401b0 	.word	0x080401b0

0808a5e4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 808a5e4:	b508      	push	{r3, lr}
 808a5e6:	4b02      	ldr	r3, [pc, #8]	; (808a5f0 <HAL_GPIO_Write+0xc>)
 808a5e8:	681b      	ldr	r3, [r3, #0]
 808a5ea:	691b      	ldr	r3, [r3, #16]
 808a5ec:	9301      	str	r3, [sp, #4]
 808a5ee:	bd08      	pop	{r3, pc}
 808a5f0:	080401b0 	.word	0x080401b0

0808a5f4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 808a5f4:	b508      	push	{r3, lr}
 808a5f6:	4b02      	ldr	r3, [pc, #8]	; (808a600 <HAL_GPIO_Read+0xc>)
 808a5f8:	681b      	ldr	r3, [r3, #0]
 808a5fa:	695b      	ldr	r3, [r3, #20]
 808a5fc:	9301      	str	r3, [sp, #4]
 808a5fe:	bd08      	pop	{r3, pc}
 808a600:	080401b0 	.word	0x080401b0

0808a604 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 808a604:	b508      	push	{r3, lr}
 808a606:	4b02      	ldr	r3, [pc, #8]	; (808a610 <HAL_Interrupts_Attach+0xc>)
 808a608:	681b      	ldr	r3, [r3, #0]
 808a60a:	699b      	ldr	r3, [r3, #24]
 808a60c:	9301      	str	r3, [sp, #4]
 808a60e:	bd08      	pop	{r3, pc}
 808a610:	080401b0 	.word	0x080401b0

0808a614 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
 808a614:	b508      	push	{r3, lr}
 808a616:	4b02      	ldr	r3, [pc, #8]	; (808a620 <HAL_Interrupts_Detach+0xc>)
 808a618:	681b      	ldr	r3, [r3, #0]
 808a61a:	69db      	ldr	r3, [r3, #28]
 808a61c:	9301      	str	r3, [sp, #4]
 808a61e:	bd08      	pop	{r3, pc}
 808a620:	080401b0 	.word	0x080401b0

0808a624 <hal_adc_set_sample_time>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
 808a624:	b508      	push	{r3, lr}
 808a626:	4b02      	ldr	r3, [pc, #8]	; (808a630 <hal_adc_set_sample_time+0xc>)
 808a628:	681b      	ldr	r3, [r3, #0]
 808a62a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808a62c:	9301      	str	r3, [sp, #4]
 808a62e:	bd08      	pop	{r3, pc}
 808a630:	080401b0 	.word	0x080401b0

0808a634 <hal_adc_read>:
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 808a634:	b508      	push	{r3, lr}
 808a636:	4b02      	ldr	r3, [pc, #8]	; (808a640 <hal_adc_read+0xc>)
 808a638:	681b      	ldr	r3, [r3, #0]
 808a63a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808a63c:	9301      	str	r3, [sp, #4]
 808a63e:	bd08      	pop	{r3, pc}
 808a640:	080401b0 	.word	0x080401b0

0808a644 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 808a644:	b508      	push	{r3, lr}
 808a646:	4b02      	ldr	r3, [pc, #8]	; (808a650 <HAL_RNG_GetRandomNumber+0xc>)
 808a648:	681b      	ldr	r3, [r3, #0]
 808a64a:	685b      	ldr	r3, [r3, #4]
 808a64c:	9301      	str	r3, [sp, #4]
 808a64e:	bd08      	pop	{r3, pc}
 808a650:	0804019c 	.word	0x0804019c

0808a654 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 808a654:	b508      	push	{r3, lr}
 808a656:	4b02      	ldr	r3, [pc, #8]	; (808a660 <HAL_Delay_Microseconds+0xc>)
 808a658:	681b      	ldr	r3, [r3, #0]
 808a65a:	68db      	ldr	r3, [r3, #12]
 808a65c:	9301      	str	r3, [sp, #4]
 808a65e:	bd08      	pop	{r3, pc}
 808a660:	0804019c 	.word	0x0804019c

0808a664 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 808a664:	b508      	push	{r3, lr}
 808a666:	4b02      	ldr	r3, [pc, #8]	; (808a670 <HAL_Timer_Get_Milli_Seconds+0xc>)
 808a668:	681b      	ldr	r3, [r3, #0]
 808a66a:	695b      	ldr	r3, [r3, #20]
 808a66c:	9301      	str	r3, [sp, #4]
 808a66e:	bd08      	pop	{r3, pc}
 808a670:	0804019c 	.word	0x0804019c

0808a674 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 808a674:	b508      	push	{r3, lr}
 808a676:	4b02      	ldr	r3, [pc, #8]	; (808a680 <HAL_EEPROM_Init+0xc>)
 808a678:	681b      	ldr	r3, [r3, #0]
 808a67a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808a67c:	9301      	str	r3, [sp, #4]
 808a67e:	bd08      	pop	{r3, pc}
 808a680:	0804019c 	.word	0x0804019c

0808a684 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
 808a684:	b508      	push	{r3, lr}
 808a686:	4b02      	ldr	r3, [pc, #8]	; (808a690 <HAL_EEPROM_Get+0xc>)
 808a688:	681b      	ldr	r3, [r3, #0]
 808a68a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808a68c:	9301      	str	r3, [sp, #4]
 808a68e:	bd08      	pop	{r3, pc}
 808a690:	0804019c 	.word	0x0804019c

0808a694 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 808a694:	b508      	push	{r3, lr}
 808a696:	4b02      	ldr	r3, [pc, #8]	; (808a6a0 <HAL_EEPROM_Put+0xc>)
 808a698:	681b      	ldr	r3, [r3, #0]
 808a69a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808a69c:	9301      	str	r3, [sp, #4]
 808a69e:	bd08      	pop	{r3, pc}
 808a6a0:	0804019c 	.word	0x0804019c

0808a6a4 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 808a6a4:	b508      	push	{r3, lr}
 808a6a6:	4b02      	ldr	r3, [pc, #8]	; (808a6b0 <hal_rtc_time_is_valid+0xc>)
 808a6a8:	681b      	ldr	r3, [r3, #0]
 808a6aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 808a6ac:	9301      	str	r3, [sp, #4]
 808a6ae:	bd08      	pop	{r3, pc}
 808a6b0:	0804019c 	.word	0x0804019c

0808a6b4 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 808a6b4:	b508      	push	{r3, lr}
 808a6b6:	4b02      	ldr	r3, [pc, #8]	; (808a6c0 <hal_rtc_get_time+0xc>)
 808a6b8:	681b      	ldr	r3, [r3, #0]
 808a6ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 808a6bc:	9301      	str	r3, [sp, #4]
 808a6be:	bd08      	pop	{r3, pc}
 808a6c0:	0804019c 	.word	0x0804019c

0808a6c4 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
 808a6c4:	b508      	push	{r3, lr}
 808a6c6:	4b02      	ldr	r3, [pc, #8]	; (808a6d0 <hal_rtc_set_time+0xc>)
 808a6c8:	681b      	ldr	r3, [r3, #0]
 808a6ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 808a6cc:	9301      	str	r3, [sp, #4]
 808a6ce:	bd08      	pop	{r3, pc}
 808a6d0:	0804019c 	.word	0x0804019c

0808a6d4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 808a6d4:	b508      	push	{r3, lr}
 808a6d6:	4b02      	ldr	r3, [pc, #8]	; (808a6e0 <os_mutex_recursive_create+0xc>)
 808a6d8:	681b      	ldr	r3, [r3, #0]
 808a6da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808a6dc:	9301      	str	r3, [sp, #4]
 808a6de:	bd08      	pop	{r3, pc}
 808a6e0:	080401d0 	.word	0x080401d0

0808a6e4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 808a6e4:	b508      	push	{r3, lr}
 808a6e6:	4b02      	ldr	r3, [pc, #8]	; (808a6f0 <os_mutex_recursive_destroy+0xc>)
 808a6e8:	681b      	ldr	r3, [r3, #0]
 808a6ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808a6ec:	9301      	str	r3, [sp, #4]
 808a6ee:	bd08      	pop	{r3, pc}
 808a6f0:	080401d0 	.word	0x080401d0

0808a6f4 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 808a6f4:	b508      	push	{r3, lr}
 808a6f6:	4b02      	ldr	r3, [pc, #8]	; (808a700 <os_mutex_recursive_lock+0xc>)
 808a6f8:	681b      	ldr	r3, [r3, #0]
 808a6fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808a6fc:	9301      	str	r3, [sp, #4]
 808a6fe:	bd08      	pop	{r3, pc}
 808a700:	080401d0 	.word	0x080401d0

0808a704 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 808a704:	b508      	push	{r3, lr}
 808a706:	4b02      	ldr	r3, [pc, #8]	; (808a710 <os_mutex_recursive_unlock+0xc>)
 808a708:	681b      	ldr	r3, [r3, #0]
 808a70a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808a70c:	9301      	str	r3, [sp, #4]
 808a70e:	bd08      	pop	{r3, pc}
 808a710:	080401d0 	.word	0x080401d0

0808a714 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 808a714:	b508      	push	{r3, lr}
 808a716:	4b02      	ldr	r3, [pc, #8]	; (808a720 <hal_usart_init+0xc>)
 808a718:	681b      	ldr	r3, [r3, #0]
 808a71a:	699b      	ldr	r3, [r3, #24]
 808a71c:	9301      	str	r3, [sp, #4]
 808a71e:	bd08      	pop	{r3, pc}
 808a720:	080401c4 	.word	0x080401c4

0808a724 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 808a724:	b508      	push	{r3, lr}
 808a726:	4b02      	ldr	r3, [pc, #8]	; (808a730 <hal_usart_write+0xc>)
 808a728:	681b      	ldr	r3, [r3, #0]
 808a72a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808a72c:	9301      	str	r3, [sp, #4]
 808a72e:	bd08      	pop	{r3, pc}
 808a730:	080401c4 	.word	0x080401c4

0808a734 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 808a734:	b508      	push	{r3, lr}
 808a736:	4b02      	ldr	r3, [pc, #8]	; (808a740 <hal_usart_available+0xc>)
 808a738:	681b      	ldr	r3, [r3, #0]
 808a73a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808a73c:	9301      	str	r3, [sp, #4]
 808a73e:	bd08      	pop	{r3, pc}
 808a740:	080401c4 	.word	0x080401c4

0808a744 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 808a744:	b508      	push	{r3, lr}
 808a746:	4b02      	ldr	r3, [pc, #8]	; (808a750 <hal_usart_read+0xc>)
 808a748:	681b      	ldr	r3, [r3, #0]
 808a74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808a74c:	9301      	str	r3, [sp, #4]
 808a74e:	bd08      	pop	{r3, pc}
 808a750:	080401c4 	.word	0x080401c4

0808a754 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 808a754:	b508      	push	{r3, lr}
 808a756:	4b02      	ldr	r3, [pc, #8]	; (808a760 <hal_usart_peek+0xc>)
 808a758:	681b      	ldr	r3, [r3, #0]
 808a75a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808a75c:	9301      	str	r3, [sp, #4]
 808a75e:	bd08      	pop	{r3, pc}
 808a760:	080401c4 	.word	0x080401c4

0808a764 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 808a764:	b508      	push	{r3, lr}
 808a766:	4b02      	ldr	r3, [pc, #8]	; (808a770 <hal_usart_flush+0xc>)
 808a768:	681b      	ldr	r3, [r3, #0]
 808a76a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808a76c:	9301      	str	r3, [sp, #4]
 808a76e:	bd08      	pop	{r3, pc}
 808a770:	080401c4 	.word	0x080401c4

0808a774 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 808a774:	b508      	push	{r3, lr}
 808a776:	4b02      	ldr	r3, [pc, #8]	; (808a780 <hal_usart_is_enabled+0xc>)
 808a778:	681b      	ldr	r3, [r3, #0]
 808a77a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808a77c:	9301      	str	r3, [sp, #4]
 808a77e:	bd08      	pop	{r3, pc}
 808a780:	080401c4 	.word	0x080401c4

0808a784 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 808a784:	b508      	push	{r3, lr}
 808a786:	4b02      	ldr	r3, [pc, #8]	; (808a790 <hal_usart_available_data_for_write+0xc>)
 808a788:	681b      	ldr	r3, [r3, #0]
 808a78a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808a78c:	9301      	str	r3, [sp, #4]
 808a78e:	bd08      	pop	{r3, pc}
 808a790:	080401c4 	.word	0x080401c4

0808a794 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 808a794:	b508      	push	{r3, lr}
 808a796:	4b02      	ldr	r3, [pc, #8]	; (808a7a0 <hal_usart_begin_config+0xc>)
 808a798:	681b      	ldr	r3, [r3, #0]
 808a79a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808a79c:	9301      	str	r3, [sp, #4]
 808a79e:	bd08      	pop	{r3, pc}
 808a7a0:	080401c4 	.word	0x080401c4

0808a7a4 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 808a7a4:	b508      	push	{r3, lr}
 808a7a6:	4b02      	ldr	r3, [pc, #8]	; (808a7b0 <hal_i2c_begin+0xc>)
 808a7a8:	681b      	ldr	r3, [r3, #0]
 808a7aa:	68db      	ldr	r3, [r3, #12]
 808a7ac:	9301      	str	r3, [sp, #4]
 808a7ae:	bd08      	pop	{r3, pc}
 808a7b0:	080401ac 	.word	0x080401ac

0808a7b4 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 808a7b4:	b508      	push	{r3, lr}
 808a7b6:	4b02      	ldr	r3, [pc, #8]	; (808a7c0 <hal_i2c_begin_transmission+0xc>)
 808a7b8:	681b      	ldr	r3, [r3, #0]
 808a7ba:	699b      	ldr	r3, [r3, #24]
 808a7bc:	9301      	str	r3, [sp, #4]
 808a7be:	bd08      	pop	{r3, pc}
 808a7c0:	080401ac 	.word	0x080401ac

0808a7c4 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 808a7c4:	b508      	push	{r3, lr}
 808a7c6:	4b02      	ldr	r3, [pc, #8]	; (808a7d0 <hal_i2c_end_transmission+0xc>)
 808a7c8:	681b      	ldr	r3, [r3, #0]
 808a7ca:	69db      	ldr	r3, [r3, #28]
 808a7cc:	9301      	str	r3, [sp, #4]
 808a7ce:	bd08      	pop	{r3, pc}
 808a7d0:	080401ac 	.word	0x080401ac

0808a7d4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 808a7d4:	b508      	push	{r3, lr}
 808a7d6:	4b02      	ldr	r3, [pc, #8]	; (808a7e0 <hal_i2c_write+0xc>)
 808a7d8:	681b      	ldr	r3, [r3, #0]
 808a7da:	6a1b      	ldr	r3, [r3, #32]
 808a7dc:	9301      	str	r3, [sp, #4]
 808a7de:	bd08      	pop	{r3, pc}
 808a7e0:	080401ac 	.word	0x080401ac

0808a7e4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 808a7e4:	b508      	push	{r3, lr}
 808a7e6:	4b02      	ldr	r3, [pc, #8]	; (808a7f0 <hal_i2c_available+0xc>)
 808a7e8:	681b      	ldr	r3, [r3, #0]
 808a7ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808a7ec:	9301      	str	r3, [sp, #4]
 808a7ee:	bd08      	pop	{r3, pc}
 808a7f0:	080401ac 	.word	0x080401ac

0808a7f4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 808a7f4:	b508      	push	{r3, lr}
 808a7f6:	4b02      	ldr	r3, [pc, #8]	; (808a800 <hal_i2c_read+0xc>)
 808a7f8:	681b      	ldr	r3, [r3, #0]
 808a7fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808a7fc:	9301      	str	r3, [sp, #4]
 808a7fe:	bd08      	pop	{r3, pc}
 808a800:	080401ac 	.word	0x080401ac

0808a804 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 808a804:	b508      	push	{r3, lr}
 808a806:	4b02      	ldr	r3, [pc, #8]	; (808a810 <hal_i2c_peek+0xc>)
 808a808:	681b      	ldr	r3, [r3, #0]
 808a80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808a80c:	9301      	str	r3, [sp, #4]
 808a80e:	bd08      	pop	{r3, pc}
 808a810:	080401ac 	.word	0x080401ac

0808a814 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 808a814:	b508      	push	{r3, lr}
 808a816:	4b02      	ldr	r3, [pc, #8]	; (808a820 <hal_i2c_flush+0xc>)
 808a818:	681b      	ldr	r3, [r3, #0]
 808a81a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808a81c:	9301      	str	r3, [sp, #4]
 808a81e:	bd08      	pop	{r3, pc}
 808a820:	080401ac 	.word	0x080401ac

0808a824 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 808a824:	b508      	push	{r3, lr}
 808a826:	4b02      	ldr	r3, [pc, #8]	; (808a830 <hal_i2c_is_enabled+0xc>)
 808a828:	681b      	ldr	r3, [r3, #0]
 808a82a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808a82c:	9301      	str	r3, [sp, #4]
 808a82e:	bd08      	pop	{r3, pc}
 808a830:	080401ac 	.word	0x080401ac

0808a834 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 808a834:	b508      	push	{r3, lr}
 808a836:	4b02      	ldr	r3, [pc, #8]	; (808a840 <hal_i2c_init+0xc>)
 808a838:	681b      	ldr	r3, [r3, #0]
 808a83a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808a83c:	9301      	str	r3, [sp, #4]
 808a83e:	bd08      	pop	{r3, pc}
 808a840:	080401ac 	.word	0x080401ac

0808a844 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
 808a844:	b508      	push	{r3, lr}
 808a846:	4b02      	ldr	r3, [pc, #8]	; (808a850 <hal_i2c_lock+0xc>)
 808a848:	681b      	ldr	r3, [r3, #0]
 808a84a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808a84c:	9301      	str	r3, [sp, #4]
 808a84e:	bd08      	pop	{r3, pc}
 808a850:	080401ac 	.word	0x080401ac

0808a854 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
 808a854:	b508      	push	{r3, lr}
 808a856:	4b02      	ldr	r3, [pc, #8]	; (808a860 <hal_i2c_unlock+0xc>)
 808a858:	681b      	ldr	r3, [r3, #0]
 808a85a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808a85c:	9301      	str	r3, [sp, #4]
 808a85e:	bd08      	pop	{r3, pc}
 808a860:	080401ac 	.word	0x080401ac

0808a864 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 808a864:	b508      	push	{r3, lr}
 808a866:	4b02      	ldr	r3, [pc, #8]	; (808a870 <hal_i2c_request_ex+0xc>)
 808a868:	681b      	ldr	r3, [r3, #0]
 808a86a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 808a86c:	9301      	str	r3, [sp, #4]
 808a86e:	bd08      	pop	{r3, pc}
 808a870:	080401ac 	.word	0x080401ac

0808a874 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 808a874:	b508      	push	{r3, lr}
 808a876:	4b02      	ldr	r3, [pc, #8]	; (808a880 <hal_spi_begin+0xc>)
 808a878:	681b      	ldr	r3, [r3, #0]
 808a87a:	681b      	ldr	r3, [r3, #0]
 808a87c:	9301      	str	r3, [sp, #4]
 808a87e:	bd08      	pop	{r3, pc}
 808a880:	080401b4 	.word	0x080401b4

0808a884 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
 808a884:	b508      	push	{r3, lr}
 808a886:	4b02      	ldr	r3, [pc, #8]	; (808a890 <hal_spi_set_bit_order+0xc>)
 808a888:	681b      	ldr	r3, [r3, #0]
 808a88a:	689b      	ldr	r3, [r3, #8]
 808a88c:	9301      	str	r3, [sp, #4]
 808a88e:	bd08      	pop	{r3, pc}
 808a890:	080401b4 	.word	0x080401b4

0808a894 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
 808a894:	b508      	push	{r3, lr}
 808a896:	4b02      	ldr	r3, [pc, #8]	; (808a8a0 <hal_spi_set_data_mode+0xc>)
 808a898:	681b      	ldr	r3, [r3, #0]
 808a89a:	68db      	ldr	r3, [r3, #12]
 808a89c:	9301      	str	r3, [sp, #4]
 808a89e:	bd08      	pop	{r3, pc}
 808a8a0:	080401b4 	.word	0x080401b4

0808a8a4 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
 808a8a4:	b508      	push	{r3, lr}
 808a8a6:	4b02      	ldr	r3, [pc, #8]	; (808a8b0 <hal_spi_set_clock_divider+0xc>)
 808a8a8:	681b      	ldr	r3, [r3, #0]
 808a8aa:	691b      	ldr	r3, [r3, #16]
 808a8ac:	9301      	str	r3, [sp, #4]
 808a8ae:	bd08      	pop	{r3, pc}
 808a8b0:	080401b4 	.word	0x080401b4

0808a8b4 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 808a8b4:	b508      	push	{r3, lr}
 808a8b6:	4b02      	ldr	r3, [pc, #8]	; (808a8c0 <hal_spi_transfer+0xc>)
 808a8b8:	681b      	ldr	r3, [r3, #0]
 808a8ba:	695b      	ldr	r3, [r3, #20]
 808a8bc:	9301      	str	r3, [sp, #4]
 808a8be:	bd08      	pop	{r3, pc}
 808a8c0:	080401b4 	.word	0x080401b4

0808a8c4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 808a8c4:	b508      	push	{r3, lr}
 808a8c6:	4b02      	ldr	r3, [pc, #8]	; (808a8d0 <hal_spi_init+0xc>)
 808a8c8:	681b      	ldr	r3, [r3, #0]
 808a8ca:	69db      	ldr	r3, [r3, #28]
 808a8cc:	9301      	str	r3, [sp, #4]
 808a8ce:	bd08      	pop	{r3, pc}
 808a8d0:	080401b4 	.word	0x080401b4

0808a8d4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 808a8d4:	b508      	push	{r3, lr}
 808a8d6:	4b02      	ldr	r3, [pc, #8]	; (808a8e0 <hal_spi_is_enabled+0xc>)
 808a8d8:	681b      	ldr	r3, [r3, #0]
 808a8da:	6a1b      	ldr	r3, [r3, #32]
 808a8dc:	9301      	str	r3, [sp, #4]
 808a8de:	bd08      	pop	{r3, pc}
 808a8e0:	080401b4 	.word	0x080401b4

0808a8e4 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 808a8e4:	b508      	push	{r3, lr}
 808a8e6:	4b02      	ldr	r3, [pc, #8]	; (808a8f0 <hal_spi_info+0xc>)
 808a8e8:	681b      	ldr	r3, [r3, #0]
 808a8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808a8ec:	9301      	str	r3, [sp, #4]
 808a8ee:	bd08      	pop	{r3, pc}
 808a8f0:	080401b4 	.word	0x080401b4

0808a8f4 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
 808a8f4:	b508      	push	{r3, lr}
 808a8f6:	4b02      	ldr	r3, [pc, #8]	; (808a900 <hal_spi_transfer_dma+0xc>)
 808a8f8:	681b      	ldr	r3, [r3, #0]
 808a8fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808a8fc:	9301      	str	r3, [sp, #4]
 808a8fe:	bd08      	pop	{r3, pc}
 808a900:	080401b4 	.word	0x080401b4

0808a904 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
 808a904:	b508      	push	{r3, lr}
 808a906:	4b02      	ldr	r3, [pc, #8]	; (808a910 <hal_spi_transfer_dma_status+0xc>)
 808a908:	681b      	ldr	r3, [r3, #0]
 808a90a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808a90c:	9301      	str	r3, [sp, #4]
 808a90e:	bd08      	pop	{r3, pc}
 808a910:	080401b4 	.word	0x080401b4

0808a914 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 808a914:	b508      	push	{r3, lr}
 808a916:	4b02      	ldr	r3, [pc, #8]	; (808a920 <inet_gethostbyname+0xc>)
 808a918:	681b      	ldr	r3, [r3, #0]
 808a91a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808a91c:	9301      	str	r3, [sp, #4]
 808a91e:	bd08      	pop	{r3, pc}
 808a920:	08060020 	.word	0x08060020

0808a924 <cellular_command>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 808a924:	b508      	push	{r3, lr}
 808a926:	4b02      	ldr	r3, [pc, #8]	; (808a930 <cellular_command+0xc>)
 808a928:	681b      	ldr	r3, [r3, #0]
 808a92a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808a92c:	9301      	str	r3, [sp, #4]
 808a92e:	bd08      	pop	{r3, pc}
 808a930:	08060020 	.word	0x08060020

0808a934 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 808a934:	b508      	push	{r3, lr}
 808a936:	4b02      	ldr	r3, [pc, #8]	; (808a940 <HAL_USB_USART_Init+0xc>)
 808a938:	681b      	ldr	r3, [r3, #0]
 808a93a:	681b      	ldr	r3, [r3, #0]
 808a93c:	9301      	str	r3, [sp, #4]
 808a93e:	bd08      	pop	{r3, pc}
 808a940:	0806001c 	.word	0x0806001c

0808a944 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 808a944:	b508      	push	{r3, lr}
 808a946:	4b02      	ldr	r3, [pc, #8]	; (808a950 <HAL_USB_USART_Begin+0xc>)
 808a948:	681b      	ldr	r3, [r3, #0]
 808a94a:	685b      	ldr	r3, [r3, #4]
 808a94c:	9301      	str	r3, [sp, #4]
 808a94e:	bd08      	pop	{r3, pc}
 808a950:	0806001c 	.word	0x0806001c

0808a954 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 808a954:	b508      	push	{r3, lr}
 808a956:	4b02      	ldr	r3, [pc, #8]	; (808a960 <HAL_USB_USART_Available_Data+0xc>)
 808a958:	681b      	ldr	r3, [r3, #0]
 808a95a:	691b      	ldr	r3, [r3, #16]
 808a95c:	9301      	str	r3, [sp, #4]
 808a95e:	bd08      	pop	{r3, pc}
 808a960:	0806001c 	.word	0x0806001c

0808a964 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 808a964:	b508      	push	{r3, lr}
 808a966:	4b02      	ldr	r3, [pc, #8]	; (808a970 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 808a968:	681b      	ldr	r3, [r3, #0]
 808a96a:	695b      	ldr	r3, [r3, #20]
 808a96c:	9301      	str	r3, [sp, #4]
 808a96e:	bd08      	pop	{r3, pc}
 808a970:	0806001c 	.word	0x0806001c

0808a974 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 808a974:	b508      	push	{r3, lr}
 808a976:	4b02      	ldr	r3, [pc, #8]	; (808a980 <HAL_USB_USART_Receive_Data+0xc>)
 808a978:	681b      	ldr	r3, [r3, #0]
 808a97a:	699b      	ldr	r3, [r3, #24]
 808a97c:	9301      	str	r3, [sp, #4]
 808a97e:	bd08      	pop	{r3, pc}
 808a980:	0806001c 	.word	0x0806001c

0808a984 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 808a984:	b508      	push	{r3, lr}
 808a986:	4b02      	ldr	r3, [pc, #8]	; (808a990 <HAL_USB_USART_Send_Data+0xc>)
 808a988:	681b      	ldr	r3, [r3, #0]
 808a98a:	69db      	ldr	r3, [r3, #28]
 808a98c:	9301      	str	r3, [sp, #4]
 808a98e:	bd08      	pop	{r3, pc}
 808a990:	0806001c 	.word	0x0806001c

0808a994 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 808a994:	b508      	push	{r3, lr}
 808a996:	4b02      	ldr	r3, [pc, #8]	; (808a9a0 <HAL_USB_USART_Flush_Data+0xc>)
 808a998:	681b      	ldr	r3, [r3, #0]
 808a99a:	6a1b      	ldr	r3, [r3, #32]
 808a99c:	9301      	str	r3, [sp, #4]
 808a99e:	bd08      	pop	{r3, pc}
 808a9a0:	0806001c 	.word	0x0806001c

0808a9a4 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 808a9a4:	b508      	push	{r3, lr}
 808a9a6:	4b02      	ldr	r3, [pc, #8]	; (808a9b0 <log_message_v+0xc>)
 808a9a8:	681b      	ldr	r3, [r3, #0]
 808a9aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808a9ac:	9301      	str	r3, [sp, #4]
 808a9ae:	bd08      	pop	{r3, pc}
 808a9b0:	080201a0 	.word	0x080201a0

0808a9b4 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 808a9b4:	b508      	push	{r3, lr}
 808a9b6:	4b02      	ldr	r3, [pc, #8]	; (808a9c0 <system_mode+0xc>)
 808a9b8:	681b      	ldr	r3, [r3, #0]
 808a9ba:	681b      	ldr	r3, [r3, #0]
 808a9bc:	9301      	str	r3, [sp, #4]
 808a9be:	bd08      	pop	{r3, pc}
 808a9c0:	080401a4 	.word	0x080401a4

0808a9c4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 808a9c4:	b508      	push	{r3, lr}
 808a9c6:	4b02      	ldr	r3, [pc, #8]	; (808a9d0 <set_system_mode+0xc>)
 808a9c8:	681b      	ldr	r3, [r3, #0]
 808a9ca:	685b      	ldr	r3, [r3, #4]
 808a9cc:	9301      	str	r3, [sp, #4]
 808a9ce:	bd08      	pop	{r3, pc}
 808a9d0:	080401a4 	.word	0x080401a4

0808a9d4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 808a9d4:	b508      	push	{r3, lr}
 808a9d6:	4b02      	ldr	r3, [pc, #8]	; (808a9e0 <system_delay_ms+0xc>)
 808a9d8:	681b      	ldr	r3, [r3, #0]
 808a9da:	695b      	ldr	r3, [r3, #20]
 808a9dc:	9301      	str	r3, [sp, #4]
 808a9de:	bd08      	pop	{r3, pc}
 808a9e0:	080401a4 	.word	0x080401a4

0808a9e4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 808a9e4:	b508      	push	{r3, lr}
 808a9e6:	4b02      	ldr	r3, [pc, #8]	; (808a9f0 <system_thread_set_state+0xc>)
 808a9e8:	681b      	ldr	r3, [r3, #0]
 808a9ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808a9ec:	9301      	str	r3, [sp, #4]
 808a9ee:	bd08      	pop	{r3, pc}
 808a9f0:	080401a4 	.word	0x080401a4

0808a9f4 <system_version_info>:
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
 808a9f4:	b508      	push	{r3, lr}
 808a9f6:	4b02      	ldr	r3, [pc, #8]	; (808aa00 <system_version_info+0xc>)
 808a9f8:	681b      	ldr	r3, [r3, #0]
 808a9fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808a9fc:	9301      	str	r3, [sp, #4]
 808a9fe:	bd08      	pop	{r3, pc}
 808aa00:	080401a4 	.word	0x080401a4

0808aa04 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 808aa04:	b508      	push	{r3, lr}
 808aa06:	4b02      	ldr	r3, [pc, #8]	; (808aa10 <application_thread_current+0xc>)
 808aa08:	681b      	ldr	r3, [r3, #0]
 808aa0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808aa0c:	9301      	str	r3, [sp, #4]
 808aa0e:	bd08      	pop	{r3, pc}
 808aa10:	080401a4 	.word	0x080401a4

0808aa14 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 808aa14:	b508      	push	{r3, lr}
 808aa16:	4b02      	ldr	r3, [pc, #8]	; (808aa20 <application_thread_invoke+0xc>)
 808aa18:	681b      	ldr	r3, [r3, #0]
 808aa1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808aa1c:	9301      	str	r3, [sp, #4]
 808aa1e:	bd08      	pop	{r3, pc}
 808aa20:	080401a4 	.word	0x080401a4

0808aa24 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 808aa24:	b508      	push	{r3, lr}
 808aa26:	4b02      	ldr	r3, [pc, #8]	; (808aa30 <system_thread_get_state+0xc>)
 808aa28:	681b      	ldr	r3, [r3, #0]
 808aa2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 808aa2c:	9301      	str	r3, [sp, #4]
 808aa2e:	bd08      	pop	{r3, pc}
 808aa30:	080401a4 	.word	0x080401a4

0808aa34 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
 808aa34:	b508      	push	{r3, lr}
 808aa36:	4b02      	ldr	r3, [pc, #8]	; (808aa40 <system_notify_time_changed+0xc>)
 808aa38:	681b      	ldr	r3, [r3, #0]
 808aa3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 808aa3c:	9301      	str	r3, [sp, #4]
 808aa3e:	bd08      	pop	{r3, pc}
 808aa40:	080401a4 	.word	0x080401a4

0808aa44 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 808aa44:	b508      	push	{r3, lr}
 808aa46:	4b03      	ldr	r3, [pc, #12]	; (808aa54 <system_ctrl_set_app_request_handler+0x10>)
 808aa48:	681b      	ldr	r3, [r3, #0]
 808aa4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808aa4e:	9301      	str	r3, [sp, #4]
 808aa50:	bd08      	pop	{r3, pc}
 808aa52:	0000      	.short	0x0000
 808aa54:	080401a4 	.word	0x080401a4

0808aa58 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 808aa58:	b508      	push	{r3, lr}
 808aa5a:	4b03      	ldr	r3, [pc, #12]	; (808aa68 <system_ctrl_set_result+0x10>)
 808aa5c:	681b      	ldr	r3, [r3, #0]
 808aa5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 808aa62:	9301      	str	r3, [sp, #4]
 808aa64:	bd08      	pop	{r3, pc}
 808aa66:	0000      	.short	0x0000
 808aa68:	080401a4 	.word	0x080401a4

0808aa6c <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
 808aa6c:	b508      	push	{r3, lr}
 808aa6e:	4b03      	ldr	r3, [pc, #12]	; (808aa7c <system_sleep_pins+0x10>)
 808aa70:	681b      	ldr	r3, [r3, #0]
 808aa72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 808aa76:	9301      	str	r3, [sp, #4]
 808aa78:	bd08      	pop	{r3, pc}
 808aa7a:	0000      	.short	0x0000
 808aa7c:	080401a4 	.word	0x080401a4

0808aa80 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
 808aa80:	b508      	push	{r3, lr}
 808aa82:	4b03      	ldr	r3, [pc, #12]	; (808aa90 <system_reset+0x10>)
 808aa84:	681b      	ldr	r3, [r3, #0]
 808aa86:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 808aa8a:	9301      	str	r3, [sp, #4]
 808aa8c:	bd08      	pop	{r3, pc}
 808aa8e:	0000      	.short	0x0000
 808aa90:	080401a4 	.word	0x080401a4

0808aa94 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 808aa94:	b508      	push	{r3, lr}
 808aa96:	4b02      	ldr	r3, [pc, #8]	; (808aaa0 <network_connect+0xc>)
 808aa98:	681b      	ldr	r3, [r3, #0]
 808aa9a:	685b      	ldr	r3, [r3, #4]
 808aa9c:	9301      	str	r3, [sp, #4]
 808aa9e:	bd08      	pop	{r3, pc}
 808aaa0:	080401c8 	.word	0x080401c8

0808aaa4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 808aaa4:	b508      	push	{r3, lr}
 808aaa6:	4b02      	ldr	r3, [pc, #8]	; (808aab0 <network_connecting+0xc>)
 808aaa8:	681b      	ldr	r3, [r3, #0]
 808aaaa:	689b      	ldr	r3, [r3, #8]
 808aaac:	9301      	str	r3, [sp, #4]
 808aaae:	bd08      	pop	{r3, pc}
 808aab0:	080401c8 	.word	0x080401c8

0808aab4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 808aab4:	b508      	push	{r3, lr}
 808aab6:	4b02      	ldr	r3, [pc, #8]	; (808aac0 <network_disconnect+0xc>)
 808aab8:	681b      	ldr	r3, [r3, #0]
 808aaba:	68db      	ldr	r3, [r3, #12]
 808aabc:	9301      	str	r3, [sp, #4]
 808aabe:	bd08      	pop	{r3, pc}
 808aac0:	080401c8 	.word	0x080401c8

0808aac4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 808aac4:	b508      	push	{r3, lr}
 808aac6:	4b02      	ldr	r3, [pc, #8]	; (808aad0 <network_ready+0xc>)
 808aac8:	681b      	ldr	r3, [r3, #0]
 808aaca:	691b      	ldr	r3, [r3, #16]
 808aacc:	9301      	str	r3, [sp, #4]
 808aace:	bd08      	pop	{r3, pc}
 808aad0:	080401c8 	.word	0x080401c8

0808aad4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 808aad4:	b508      	push	{r3, lr}
 808aad6:	4b02      	ldr	r3, [pc, #8]	; (808aae0 <network_on+0xc>)
 808aad8:	681b      	ldr	r3, [r3, #0]
 808aada:	695b      	ldr	r3, [r3, #20]
 808aadc:	9301      	str	r3, [sp, #4]
 808aade:	bd08      	pop	{r3, pc}
 808aae0:	080401c8 	.word	0x080401c8

0808aae4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 808aae4:	b508      	push	{r3, lr}
 808aae6:	4b02      	ldr	r3, [pc, #8]	; (808aaf0 <network_off+0xc>)
 808aae8:	681b      	ldr	r3, [r3, #0]
 808aaea:	699b      	ldr	r3, [r3, #24]
 808aaec:	9301      	str	r3, [sp, #4]
 808aaee:	bd08      	pop	{r3, pc}
 808aaf0:	080401c8 	.word	0x080401c8

0808aaf4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 808aaf4:	b508      	push	{r3, lr}
 808aaf6:	4b02      	ldr	r3, [pc, #8]	; (808ab00 <network_listen+0xc>)
 808aaf8:	681b      	ldr	r3, [r3, #0]
 808aafa:	69db      	ldr	r3, [r3, #28]
 808aafc:	9301      	str	r3, [sp, #4]
 808aafe:	bd08      	pop	{r3, pc}
 808ab00:	080401c8 	.word	0x080401c8

0808ab04 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 808ab04:	b508      	push	{r3, lr}
 808ab06:	4b02      	ldr	r3, [pc, #8]	; (808ab10 <network_listening+0xc>)
 808ab08:	681b      	ldr	r3, [r3, #0]
 808ab0a:	6a1b      	ldr	r3, [r3, #32]
 808ab0c:	9301      	str	r3, [sp, #4]
 808ab0e:	bd08      	pop	{r3, pc}
 808ab10:	080401c8 	.word	0x080401c8

0808ab14 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 808ab14:	b508      	push	{r3, lr}
 808ab16:	4b02      	ldr	r3, [pc, #8]	; (808ab20 <network_set_listen_timeout+0xc>)
 808ab18:	681b      	ldr	r3, [r3, #0]
 808ab1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808ab1c:	9301      	str	r3, [sp, #4]
 808ab1e:	bd08      	pop	{r3, pc}
 808ab20:	080401c8 	.word	0x080401c8

0808ab24 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 808ab24:	b508      	push	{r3, lr}
 808ab26:	4b02      	ldr	r3, [pc, #8]	; (808ab30 <network_get_listen_timeout+0xc>)
 808ab28:	681b      	ldr	r3, [r3, #0]
 808ab2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808ab2c:	9301      	str	r3, [sp, #4]
 808ab2e:	bd08      	pop	{r3, pc}
 808ab30:	080401c8 	.word	0x080401c8

0808ab34 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 808ab34:	b508      	push	{r3, lr}
 808ab36:	4b02      	ldr	r3, [pc, #8]	; (808ab40 <spark_function+0xc>)
 808ab38:	681b      	ldr	r3, [r3, #0]
 808ab3a:	685b      	ldr	r3, [r3, #4]
 808ab3c:	9301      	str	r3, [sp, #4]
 808ab3e:	bd08      	pop	{r3, pc}
 808ab40:	080401cc 	.word	0x080401cc

0808ab44 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 808ab44:	b508      	push	{r3, lr}
 808ab46:	4b02      	ldr	r3, [pc, #8]	; (808ab50 <spark_process+0xc>)
 808ab48:	681b      	ldr	r3, [r3, #0]
 808ab4a:	689b      	ldr	r3, [r3, #8]
 808ab4c:	9301      	str	r3, [sp, #4]
 808ab4e:	bd08      	pop	{r3, pc}
 808ab50:	080401cc 	.word	0x080401cc

0808ab54 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 808ab54:	b508      	push	{r3, lr}
 808ab56:	4b02      	ldr	r3, [pc, #8]	; (808ab60 <spark_cloud_flag_connect+0xc>)
 808ab58:	681b      	ldr	r3, [r3, #0]
 808ab5a:	68db      	ldr	r3, [r3, #12]
 808ab5c:	9301      	str	r3, [sp, #4]
 808ab5e:	bd08      	pop	{r3, pc}
 808ab60:	080401cc 	.word	0x080401cc

0808ab64 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 808ab64:	b508      	push	{r3, lr}
 808ab66:	4b02      	ldr	r3, [pc, #8]	; (808ab70 <spark_cloud_flag_connected+0xc>)
 808ab68:	681b      	ldr	r3, [r3, #0]
 808ab6a:	695b      	ldr	r3, [r3, #20]
 808ab6c:	9301      	str	r3, [sp, #4]
 808ab6e:	bd08      	pop	{r3, pc}
 808ab70:	080401cc 	.word	0x080401cc

0808ab74 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 808ab74:	b508      	push	{r3, lr}
 808ab76:	4b02      	ldr	r3, [pc, #8]	; (808ab80 <spark_deviceID+0xc>)
 808ab78:	681b      	ldr	r3, [r3, #0]
 808ab7a:	69db      	ldr	r3, [r3, #28]
 808ab7c:	9301      	str	r3, [sp, #4]
 808ab7e:	bd08      	pop	{r3, pc}
 808ab80:	080401cc 	.word	0x080401cc

0808ab84 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 808ab84:	b508      	push	{r3, lr}
 808ab86:	4b02      	ldr	r3, [pc, #8]	; (808ab90 <spark_send_event+0xc>)
 808ab88:	681b      	ldr	r3, [r3, #0]
 808ab8a:	6a1b      	ldr	r3, [r3, #32]
 808ab8c:	9301      	str	r3, [sp, #4]
 808ab8e:	bd08      	pop	{r3, pc}
 808ab90:	080401cc 	.word	0x080401cc

0808ab94 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 808ab94:	b508      	push	{r3, lr}
 808ab96:	4b02      	ldr	r3, [pc, #8]	; (808aba0 <spark_subscribe+0xc>)
 808ab98:	681b      	ldr	r3, [r3, #0]
 808ab9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808ab9c:	9301      	str	r3, [sp, #4]
 808ab9e:	bd08      	pop	{r3, pc}
 808aba0:	080401cc 	.word	0x080401cc

0808aba4 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 808aba4:	b508      	push	{r3, lr}
 808aba6:	4b02      	ldr	r3, [pc, #8]	; (808abb0 <spark_sync_time_pending+0xc>)
 808aba8:	681b      	ldr	r3, [r3, #0]
 808abaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808abac:	9301      	str	r3, [sp, #4]
 808abae:	bd08      	pop	{r3, pc}
 808abb0:	080401cc 	.word	0x080401cc

0808abb4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 808abb4:	b508      	push	{r3, lr}
 808abb6:	4b02      	ldr	r3, [pc, #8]	; (808abc0 <spark_set_random_seed_from_cloud_handler+0xc>)
 808abb8:	681b      	ldr	r3, [r3, #0]
 808abba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808abbc:	9301      	str	r3, [sp, #4]
 808abbe:	bd08      	pop	{r3, pc}
 808abc0:	080401cc 	.word	0x080401cc

0808abc4 <malloc>:
#include "newlib_impure.h"
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 808abc4:	b508      	push	{r3, lr}
 808abc6:	4b02      	ldr	r3, [pc, #8]	; (808abd0 <malloc+0xc>)
 808abc8:	681b      	ldr	r3, [r3, #0]
 808abca:	681b      	ldr	r3, [r3, #0]
 808abcc:	9301      	str	r3, [sp, #4]
 808abce:	bd08      	pop	{r3, pc}
 808abd0:	080401a0 	.word	0x080401a0

0808abd4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 808abd4:	b508      	push	{r3, lr}
 808abd6:	4b02      	ldr	r3, [pc, #8]	; (808abe0 <free+0xc>)
 808abd8:	681b      	ldr	r3, [r3, #0]
 808abda:	685b      	ldr	r3, [r3, #4]
 808abdc:	9301      	str	r3, [sp, #4]
 808abde:	bd08      	pop	{r3, pc}
 808abe0:	080401a0 	.word	0x080401a0

0808abe4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 808abe4:	b508      	push	{r3, lr}
 808abe6:	4b02      	ldr	r3, [pc, #8]	; (808abf0 <realloc+0xc>)
 808abe8:	681b      	ldr	r3, [r3, #0]
 808abea:	689b      	ldr	r3, [r3, #8]
 808abec:	9301      	str	r3, [sp, #4]
 808abee:	bd08      	pop	{r3, pc}
 808abf0:	080401a0 	.word	0x080401a0

0808abf4 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 808abf4:	b508      	push	{r3, lr}
 808abf6:	4b02      	ldr	r3, [pc, #8]	; (808ac00 <sprintf+0xc>)
 808abf8:	681b      	ldr	r3, [r3, #0]
 808abfa:	68db      	ldr	r3, [r3, #12]
 808abfc:	9301      	str	r3, [sp, #4]
 808abfe:	bd08      	pop	{r3, pc}
 808ac00:	080401a0 	.word	0x080401a0

0808ac04 <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 808ac04:	b508      	push	{r3, lr}
 808ac06:	4b02      	ldr	r3, [pc, #8]	; (808ac10 <siprintf+0xc>)
 808ac08:	681b      	ldr	r3, [r3, #0]
 808ac0a:	691b      	ldr	r3, [r3, #16]
 808ac0c:	9301      	str	r3, [sp, #4]
 808ac0e:	bd08      	pop	{r3, pc}
 808ac10:	080401a0 	.word	0x080401a0

0808ac14 <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
 808ac14:	b508      	push	{r3, lr}
 808ac16:	4b02      	ldr	r3, [pc, #8]	; (808ac20 <sscanf+0xc>)
 808ac18:	681b      	ldr	r3, [r3, #0]
 808ac1a:	695b      	ldr	r3, [r3, #20]
 808ac1c:	9301      	str	r3, [sp, #4]
 808ac1e:	bd08      	pop	{r3, pc}
 808ac20:	080401a0 	.word	0x080401a0

0808ac24 <siscanf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 808ac24:	b508      	push	{r3, lr}
 808ac26:	4b02      	ldr	r3, [pc, #8]	; (808ac30 <siscanf+0xc>)
 808ac28:	681b      	ldr	r3, [r3, #0]
 808ac2a:	699b      	ldr	r3, [r3, #24]
 808ac2c:	9301      	str	r3, [sp, #4]
 808ac2e:	bd08      	pop	{r3, pc}
 808ac30:	080401a0 	.word	0x080401a0

0808ac34 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 808ac34:	b508      	push	{r3, lr}
 808ac36:	4b02      	ldr	r3, [pc, #8]	; (808ac40 <snprintf+0xc>)
 808ac38:	681b      	ldr	r3, [r3, #0]
 808ac3a:	69db      	ldr	r3, [r3, #28]
 808ac3c:	9301      	str	r3, [sp, #4]
 808ac3e:	bd08      	pop	{r3, pc}
 808ac40:	080401a0 	.word	0x080401a0

0808ac44 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
 808ac44:	b508      	push	{r3, lr}
 808ac46:	4b02      	ldr	r3, [pc, #8]	; (808ac50 <sniprintf+0xc>)
 808ac48:	681b      	ldr	r3, [r3, #0]
 808ac4a:	6a1b      	ldr	r3, [r3, #32]
 808ac4c:	9301      	str	r3, [sp, #4]
 808ac4e:	bd08      	pop	{r3, pc}
 808ac50:	080401a0 	.word	0x080401a0

0808ac54 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 808ac54:	b508      	push	{r3, lr}
 808ac56:	4b02      	ldr	r3, [pc, #8]	; (808ac60 <vsnprintf+0xc>)
 808ac58:	681b      	ldr	r3, [r3, #0]
 808ac5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808ac5c:	9301      	str	r3, [sp, #4]
 808ac5e:	bd08      	pop	{r3, pc}
 808ac60:	080401a0 	.word	0x080401a0

0808ac64 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 808ac64:	b508      	push	{r3, lr}
 808ac66:	4b02      	ldr	r3, [pc, #8]	; (808ac70 <abort+0xc>)
 808ac68:	681b      	ldr	r3, [r3, #0]
 808ac6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808ac6c:	9301      	str	r3, [sp, #4]
 808ac6e:	bd08      	pop	{r3, pc}
 808ac70:	080401a0 	.word	0x080401a0

0808ac74 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 808ac74:	b508      	push	{r3, lr}
 808ac76:	4b02      	ldr	r3, [pc, #8]	; (808ac80 <_malloc_r+0xc>)
 808ac78:	681b      	ldr	r3, [r3, #0]
 808ac7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808ac7c:	9301      	str	r3, [sp, #4]
 808ac7e:	bd08      	pop	{r3, pc}
 808ac80:	080401a0 	.word	0x080401a0

0808ac84 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 808ac84:	b508      	push	{r3, lr}
 808ac86:	4b02      	ldr	r3, [pc, #8]	; (808ac90 <newlib_impure_ptr_callback+0xc>)
 808ac88:	681b      	ldr	r3, [r3, #0]
 808ac8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808ac8c:	9301      	str	r3, [sp, #4]
 808ac8e:	bd08      	pop	{r3, pc}
 808ac90:	080401a0 	.word	0x080401a0

0808ac94 <_ZN4PMIC4lockEv.constprop.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
 808ac94:	b508      	push	{r3, lr}
            return &Wire3;
 808ac96:	f002 fb3b 	bl	808d310 <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->lock();
}
 808ac9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
 808ac9e:	f002 b8d5 	b.w	808ce4c <_ZN7TwoWire4lockEv>

0808aca2 <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
 808aca2:	b510      	push	{r4, lr}
 808aca4:	4604      	mov	r4, r0
    lock_(_lock)
 808aca6:	7001      	strb	r1, [r0, #0]
    if (lock_) {
 808aca8:	b109      	cbz	r1, 808acae <_ZN4PMICC1Eb+0xc>
        lock();
 808acaa:	f7ff fff3 	bl	808ac94 <_ZN4PMIC4lockEv.constprop.0>
}
 808acae:	4620      	mov	r0, r4
 808acb0:	bd10      	pop	{r4, pc}

0808acb2 <_ZN4PMIC5beginEv>:
{
 808acb2:	b508      	push	{r3, lr}
            return &Wire3;
 808acb4:	f002 fb2c 	bl	808d310 <_Z20__fetch_global_Wire3v>
    if (!pmicWireInstance()->isEnabled()) {
 808acb8:	f002 f8c4 	bl	808ce44 <_ZN7TwoWire9isEnabledEv>
 808acbc:	b918      	cbnz	r0, 808acc6 <_ZN4PMIC5beginEv+0x14>
            return &Wire3;
 808acbe:	f002 fb27 	bl	808d310 <_Z20__fetch_global_Wire3v>
        pmicWireInstance()->begin();
 808acc2:	f002 f867 	bl	808cd94 <_ZN7TwoWire5beginEv>
            return &Wire3;
 808acc6:	f002 fb23 	bl	808d310 <_Z20__fetch_global_Wire3v>
}
 808acca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->isEnabled();
 808acce:	f002 b8b9 	b.w	808ce44 <_ZN7TwoWire9isEnabledEv>

0808acd2 <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
 808acd2:	b508      	push	{r3, lr}
            return &Wire3;
 808acd4:	f002 fb1c 	bl	808d310 <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->unlock();
}
 808acd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
 808acdc:	f002 b8bf 	b.w	808ce5e <_ZN7TwoWire6unlockEv>

0808ace0 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
 808ace0:	b510      	push	{r4, lr}
    if (lock_) {
 808ace2:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
 808ace4:	4604      	mov	r4, r0
    if (lock_) {
 808ace6:	b10b      	cbz	r3, 808acec <_ZN4PMICD1Ev+0xc>
        unlock();
 808ace8:	f7ff fff3 	bl	808acd2 <_ZN4PMIC6unlockEv>
}
 808acec:	4620      	mov	r0, r4
 808acee:	bd10      	pop	{r4, pc}

0808acf0 <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 808acf0:	b510      	push	{r4, lr}
 808acf2:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 808acf4:	6800      	ldr	r0, [r0, #0]
 808acf6:	f7ff ffec 	bl	808acd2 <_ZN4PMIC6unlockEv>
 808acfa:	4620      	mov	r0, r4
 808acfc:	bd10      	pop	{r4, pc}

0808acfe <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
 808acfe:	b530      	push	{r4, r5, lr}
 808ad00:	b087      	sub	sp, #28
 808ad02:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808ad04:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808ad06:	f7ff ffc5 	bl	808ac94 <_ZN4PMIC4lockEv.constprop.0>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808ad0a:	236b      	movs	r3, #107	; 0x6b
 808ad0c:	f88d 3008 	strb.w	r3, [sp, #8]
 808ad10:	2300      	movs	r3, #0
 808ad12:	2401      	movs	r4, #1
 808ad14:	9303      	str	r3, [sp, #12]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
 808ad16:	230a      	movs	r3, #10
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808ad18:	f88d 4010 	strb.w	r4, [sp, #16]
    timeout_ = ms;
 808ad1c:	9305      	str	r3, [sp, #20]
            return &Wire3;
 808ad1e:	f002 faf7 	bl	808d310 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(config);
 808ad22:	a902      	add	r1, sp, #8
 808ad24:	f002 f86f 	bl	808ce06 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire3;
 808ad28:	f002 faf2 	bl	808d310 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->write(startAddress);
 808ad2c:	6803      	ldr	r3, [r0, #0]
 808ad2e:	4629      	mov	r1, r5
 808ad30:	689b      	ldr	r3, [r3, #8]
 808ad32:	4798      	blx	r3
            return &Wire3;
 808ad34:	f002 faec 	bl	808d310 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
 808ad38:	4621      	mov	r1, r4
 808ad3a:	f002 f87c 	bl	808ce36 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
 808ad3e:	9403      	str	r4, [sp, #12]
            return &Wire3;
 808ad40:	f002 fae6 	bl	808d310 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->requestFrom(config);
 808ad44:	a902      	add	r1, sp, #8
 808ad46:	f002 f82b 	bl	808cda0 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire3;
 808ad4a:	f002 fae1 	bl	808d310 <_Z20__fetch_global_Wire3v>
    DATA = pmicWireInstance()->read();
 808ad4e:	6803      	ldr	r3, [r0, #0]
 808ad50:	695b      	ldr	r3, [r3, #20]
 808ad52:	4798      	blx	r3
 808ad54:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
 808ad56:	a801      	add	r0, sp, #4
 808ad58:	f7ff ffca 	bl	808acf0 <_ZNSt10lock_guardI4PMICED1Ev>
}
 808ad5c:	b2e0      	uxtb	r0, r4
 808ad5e:	b007      	add	sp, #28
 808ad60:	bd30      	pop	{r4, r5, pc}

0808ad62 <_ZN4PMIC23readInputSourceRegisterEv>:
    return readRegister(INPUT_SOURCE_REGISTER);
 808ad62:	2100      	movs	r1, #0
 808ad64:	f7ff bfcb 	b.w	808acfe <_ZN4PMIC12readRegisterEh>

0808ad68 <_ZN4PMIC20getInputCurrentLimitEv>:
uint16_t PMIC::getInputCurrentLimit(void) {
 808ad68:	b508      	push	{r3, lr}
    byte raw = readInputSourceRegister();
 808ad6a:	f7ff fffa 	bl	808ad62 <_ZN4PMIC23readInputSourceRegisterEv>
}
 808ad6e:	4b03      	ldr	r3, [pc, #12]	; (808ad7c <_ZN4PMIC20getInputCurrentLimitEv+0x14>)
    return mapping[raw];
 808ad70:	f000 0007 	and.w	r0, r0, #7
}
 808ad74:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 808ad78:	bd08      	pop	{r3, pc}
 808ad7a:	bf00      	nop
 808ad7c:	08094310 	.word	0x08094310

0808ad80 <_ZN4PMIC16getChargeCurrentEv>:
    return readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 808ad80:	2102      	movs	r1, #2
 808ad82:	f7ff bfbc 	b.w	808acfe <_ZN4PMIC12readRegisterEh>

0808ad86 <_ZN4PMIC15getSystemStatusEv>:
    DATA = readRegister(SYSTEM_STATUS_REGISTER);
 808ad86:	2108      	movs	r1, #8
 808ad88:	f7ff bfb9 	b.w	808acfe <_ZN4PMIC12readRegisterEh>

0808ad8c <_ZN4PMIC8getFaultEv>:
    DATA = readRegister(FAULT_REGISTER);
 808ad8c:	2109      	movs	r1, #9
 808ad8e:	f7ff bfb6 	b.w	808acfe <_ZN4PMIC12readRegisterEh>

0808ad92 <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
 808ad92:	b570      	push	{r4, r5, r6, lr}
 808ad94:	b086      	sub	sp, #24
 808ad96:	4614      	mov	r4, r2
 808ad98:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808ad9a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808ad9c:	f7ff ff7a 	bl	808ac94 <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808ada0:	236b      	movs	r3, #107	; 0x6b
 808ada2:	f88d 3008 	strb.w	r3, [sp, #8]
 808ada6:	2300      	movs	r3, #0
 808ada8:	2601      	movs	r6, #1
 808adaa:	9303      	str	r3, [sp, #12]
    timeout_ = ms;
 808adac:	230a      	movs	r3, #10
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808adae:	f88d 6010 	strb.w	r6, [sp, #16]
    timeout_ = ms;
 808adb2:	9305      	str	r3, [sp, #20]
            return &Wire3;
 808adb4:	f002 faac 	bl	808d310 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(config);
 808adb8:	a902      	add	r1, sp, #8
 808adba:	f002 f824 	bl	808ce06 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire3;
 808adbe:	f002 faa7 	bl	808d310 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->write(address);
 808adc2:	6803      	ldr	r3, [r0, #0]
 808adc4:	4629      	mov	r1, r5
 808adc6:	689b      	ldr	r3, [r3, #8]
 808adc8:	4798      	blx	r3
            return &Wire3;
 808adca:	f002 faa1 	bl	808d310 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->write(DATA);
 808adce:	6803      	ldr	r3, [r0, #0]
 808add0:	4621      	mov	r1, r4
 808add2:	689b      	ldr	r3, [r3, #8]
 808add4:	4798      	blx	r3
            return &Wire3;
 808add6:	f002 fa9b 	bl	808d310 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
 808adda:	4631      	mov	r1, r6
 808addc:	f002 f82b 	bl	808ce36 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
 808ade0:	a801      	add	r0, sp, #4
 808ade2:	f7ff ff85 	bl	808acf0 <_ZNSt10lock_guardI4PMICED1Ev>
}
 808ade6:	b006      	add	sp, #24
 808ade8:	bd70      	pop	{r4, r5, r6, pc}

0808adea <_ZN4PMIC20setInputCurrentLimitEt>:
bool PMIC::setInputCurrentLimit(uint16_t current) {
 808adea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808adec:	4604      	mov	r4, r0
 808adee:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808adf0:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808adf2:	f7ff ff4f 	bl	808ac94 <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
 808adf6:	2100      	movs	r1, #0
 808adf8:	4620      	mov	r0, r4
 808adfa:	f7ff ff80 	bl	808acfe <_ZN4PMIC12readRegisterEh>
    switch (current) {
 808adfe:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
    byte mask = DATA & 0b11111000;
 808ae02:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
    switch (current) {
 808ae06:	d02e      	beq.n	808ae66 <_ZN4PMIC20setInputCurrentLimitEt+0x7c>
 808ae08:	d814      	bhi.n	808ae34 <_ZN4PMIC20setInputCurrentLimitEt+0x4a>
 808ae0a:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 808ae0e:	d027      	beq.n	808ae60 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
 808ae10:	d80a      	bhi.n	808ae28 <_ZN4PMIC20setInputCurrentLimitEt+0x3e>
 808ae12:	2d64      	cmp	r5, #100	; 0x64
 808ae14:	d01e      	beq.n	808ae54 <_ZN4PMIC20setInputCurrentLimitEt+0x6a>
 808ae16:	2d96      	cmp	r5, #150	; 0x96
 808ae18:	d01a      	beq.n	808ae50 <_ZN4PMIC20setInputCurrentLimitEt+0x66>
 808ae1a:	2400      	movs	r4, #0
    std::lock_guard<PMIC> l(*this);
 808ae1c:	a801      	add	r0, sp, #4
 808ae1e:	f7ff ff67 	bl	808acf0 <_ZNSt10lock_guardI4PMICED1Ev>
}
 808ae22:	4620      	mov	r0, r4
 808ae24:	b003      	add	sp, #12
 808ae26:	bd30      	pop	{r4, r5, pc}
    switch (current) {
 808ae28:	f5b5 7f61 	cmp.w	r5, #900	; 0x384
 808ae2c:	d1f5      	bne.n	808ae1a <_ZN4PMIC20setInputCurrentLimitEt+0x30>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
 808ae2e:	f042 0203 	orr.w	r2, r2, #3
 808ae32:	e00f      	b.n	808ae54 <_ZN4PMIC20setInputCurrentLimitEt+0x6a>
    switch (current) {
 808ae34:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 808ae38:	d018      	beq.n	808ae6c <_ZN4PMIC20setInputCurrentLimitEt+0x82>
 808ae3a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 808ae3e:	429d      	cmp	r5, r3
 808ae40:	d017      	beq.n	808ae72 <_ZN4PMIC20setInputCurrentLimitEt+0x88>
 808ae42:	f240 53dc 	movw	r3, #1500	; 0x5dc
 808ae46:	429d      	cmp	r5, r3
 808ae48:	d1e7      	bne.n	808ae1a <_ZN4PMIC20setInputCurrentLimitEt+0x30>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
 808ae4a:	f042 0205 	orr.w	r2, r2, #5
 808ae4e:	e001      	b.n	808ae54 <_ZN4PMIC20setInputCurrentLimitEt+0x6a>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000001));
 808ae50:	f042 0201 	orr.w	r2, r2, #1
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
 808ae54:	4620      	mov	r0, r4
 808ae56:	2100      	movs	r1, #0
 808ae58:	f7ff ff9b 	bl	808ad92 <_ZN4PMIC13writeRegisterEhh>
    return 1; // value was written successfully
 808ae5c:	2401      	movs	r4, #1
        break;
 808ae5e:	e7dd      	b.n	808ae1c <_ZN4PMIC20setInputCurrentLimitEt+0x32>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000010));
 808ae60:	f042 0202 	orr.w	r2, r2, #2
 808ae64:	e7f6      	b.n	808ae54 <_ZN4PMIC20setInputCurrentLimitEt+0x6a>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
 808ae66:	f042 0204 	orr.w	r2, r2, #4
 808ae6a:	e7f3      	b.n	808ae54 <_ZN4PMIC20setInputCurrentLimitEt+0x6a>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
 808ae6c:	f042 0206 	orr.w	r2, r2, #6
 808ae70:	e7f0      	b.n	808ae54 <_ZN4PMIC20setInputCurrentLimitEt+0x6a>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
 808ae72:	f042 0207 	orr.w	r2, r2, #7
 808ae76:	e7ed      	b.n	808ae54 <_ZN4PMIC20setInputCurrentLimitEt+0x6a>

0808ae78 <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
 808ae78:	b513      	push	{r0, r1, r4, lr}
 808ae7a:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808ae7c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808ae7e:	f7ff ff09 	bl	808ac94 <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
 808ae82:	2101      	movs	r1, #1
 808ae84:	4620      	mov	r0, r4
 808ae86:	f7ff ff3a 	bl	808acfe <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
 808ae8a:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
 808ae8e:	2101      	movs	r1, #1
 808ae90:	4620      	mov	r0, r4
 808ae92:	f042 0210 	orr.w	r2, r2, #16
 808ae96:	f7ff ff7c 	bl	808ad92 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
 808ae9a:	a801      	add	r0, sp, #4
 808ae9c:	f7ff ff28 	bl	808acf0 <_ZNSt10lock_guardI4PMICED1Ev>
}
 808aea0:	2001      	movs	r0, #1
 808aea2:	b002      	add	sp, #8
 808aea4:	bd10      	pop	{r4, pc}

0808aea6 <_ZN4PMIC16setChargeCurrentEbbbbbb>:
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
 808aea6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 808aeaa:	460c      	mov	r4, r1
 808aeac:	4617      	mov	r7, r2
 808aeae:	4605      	mov	r5, r0
 808aeb0:	461e      	mov	r6, r3
 808aeb2:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
 808aeb6:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 808aeba:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808aebe:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808aec0:	f7ff fee8 	bl	808ac94 <_ZN4PMIC4lockEv.constprop.0>
    if (bit7) current = current | 0b10000000;
 808aec4:	2c00      	cmp	r4, #0
 808aec6:	bf0c      	ite	eq
 808aec8:	2400      	moveq	r4, #0
 808aeca:	2480      	movne	r4, #128	; 0x80
    if (bit6) current = current | 0b01000000;
 808aecc:	b10f      	cbz	r7, 808aed2 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x2c>
 808aece:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    if (bit5) current = current | 0b00100000;
 808aed2:	b10e      	cbz	r6, 808aed8 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x32>
 808aed4:	f044 0420 	orr.w	r4, r4, #32
    if (bit4) current = current | 0b00010000;
 808aed8:	f1ba 0f00 	cmp.w	sl, #0
 808aedc:	d001      	beq.n	808aee2 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x3c>
 808aede:	f044 0410 	orr.w	r4, r4, #16
    if (bit3) current = current | 0b00001000;
 808aee2:	f1b9 0f00 	cmp.w	r9, #0
 808aee6:	d001      	beq.n	808aeec <_ZN4PMIC16setChargeCurrentEbbbbbb+0x46>
 808aee8:	f044 0408 	orr.w	r4, r4, #8
    if (bit2) current = current | 0b00000100;
 808aeec:	f1b8 0f00 	cmp.w	r8, #0
 808aef0:	d001      	beq.n	808aef6 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x50>
 808aef2:	f044 0404 	orr.w	r4, r4, #4
    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 808aef6:	2102      	movs	r1, #2
 808aef8:	4628      	mov	r0, r5
 808aefa:	f7ff ff00 	bl	808acfe <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b00000001;
 808aefe:	f000 0201 	and.w	r2, r0, #1
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
 808af02:	2102      	movs	r1, #2
 808af04:	4628      	mov	r0, r5
 808af06:	4322      	orrs	r2, r4
 808af08:	f7ff ff43 	bl	808ad92 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
 808af0c:	a801      	add	r0, sp, #4
 808af0e:	f7ff feef 	bl	808acf0 <_ZNSt10lock_guardI4PMICED1Ev>
}
 808af12:	2001      	movs	r0, #1
 808af14:	b002      	add	sp, #8
 808af16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0808af1a <_ZN4PMIC16setChargeVoltageEt>:
bool PMIC::setChargeVoltage(uint16_t voltage) {
 808af1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 808af1c:	460c      	mov	r4, r1
 808af1e:	4605      	mov	r5, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808af20:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808af22:	f7ff feb7 	bl	808ac94 <_ZN4PMIC4lockEv.constprop.0>
    uint32_t best = 0;
 808af26:	2200      	movs	r2, #0
    int bestDelta = 0x7fffffff;
 808af28:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    for (uint32_t mask = 0; mask <= (uint32_t)((1 << bits) - 1); mask++) {
 808af2c:	4613      	mov	r3, r2
 808af2e:	f5c4 615b 	rsb	r1, r4, #3504	; 0xdb0
        int delta = std::abs((int)sum - (int)value);
 808af32:	ea81 76e1 	eor.w	r6, r1, r1, asr #31
 808af36:	eba6 76e1 	sub.w	r6, r6, r1, asr #31
        if (delta < bestDelta && sum <= value) {
 808af3a:	4286      	cmp	r6, r0
 808af3c:	da06      	bge.n	808af4c <_ZN4PMIC16setChargeVoltageEt+0x32>
 808af3e:	f103 07db 	add.w	r7, r3, #219	; 0xdb
 808af42:	ebb4 1f07 	cmp.w	r4, r7, lsl #4
 808af46:	bf24      	itt	cs
 808af48:	4630      	movcs	r0, r6
 808af4a:	461a      	movcs	r2, r3
    for (uint32_t mask = 0; mask <= (uint32_t)((1 << bits) - 1); mask++) {
 808af4c:	3301      	adds	r3, #1
 808af4e:	2b40      	cmp	r3, #64	; 0x40
 808af50:	f101 0110 	add.w	r1, r1, #16
 808af54:	d1ed      	bne.n	808af32 <_ZN4PMIC16setChargeVoltageEt+0x18>
    uint8_t cvcr = (uint8_t)(findClosestMatchingSum(voltage, baseValue, 6, 4) << 2);
 808af56:	0092      	lsls	r2, r2, #2
    uint8_t currentCvcr = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
 808af58:	2104      	movs	r1, #4
 808af5a:	4628      	mov	r0, r5
    uint8_t cvcr = (uint8_t)(findClosestMatchingSum(voltage, baseValue, 6, 4) << 2);
 808af5c:	b2d4      	uxtb	r4, r2
    uint8_t currentCvcr = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
 808af5e:	f7ff fece 	bl	808acfe <_ZN4PMIC12readRegisterEh>
    cvcr |= (currentCvcr & 0b11);
 808af62:	f000 0203 	and.w	r2, r0, #3
    writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, cvcr);
 808af66:	2104      	movs	r1, #4
 808af68:	4628      	mov	r0, r5
 808af6a:	4322      	orrs	r2, r4
 808af6c:	f7ff ff11 	bl	808ad92 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
 808af70:	a801      	add	r0, sp, #4
 808af72:	f7ff febd 	bl	808acf0 <_ZNSt10lock_guardI4PMICED1Ev>
}
 808af76:	2001      	movs	r0, #1
 808af78:	b003      	add	sp, #12
 808af7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808af7c <_ZN8SPIClass6unlockEv>:
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 808af7c:	6880      	ldr	r0, [r0, #8]
 808af7e:	f7ff bbc1 	b.w	808a704 <os_mutex_recursive_unlock>

0808af82 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 808af82:	b570      	push	{r4, r5, r6, lr}
    RecursiveMutex() : handle_(nullptr)
 808af84:	2600      	movs	r6, #0
 808af86:	4604      	mov	r4, r0
 808af88:	460d      	mov	r5, r1
 808af8a:	f840 6f08 	str.w	r6, [r0, #8]!
        os_mutex_recursive_create(&handle_);
 808af8e:	f7ff fba1 	bl	808a6d4 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 808af92:	4628      	mov	r0, r5
    _spi = spi;
 808af94:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 808af96:	f7ff fc95 	bl	808a8c4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 808af9a:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 808af9c:	6066      	str	r6, [r4, #4]
}
 808af9e:	bd70      	pop	{r4, r5, r6, pc}

0808afa0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 808afa0:	b510      	push	{r4, lr}
 808afa2:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
 808afa4:	6880      	ldr	r0, [r0, #8]
 808afa6:	f7ff fba5 	bl	808a6f4 <os_mutex_recursive_lock>
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 808afaa:	7820      	ldrb	r0, [r4, #0]
 808afac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 808afb0:	f7ff fc60 	bl	808a874 <hal_spi_begin>
        unlock();
 808afb4:	4620      	mov	r0, r4
 808afb6:	f7ff ffe1 	bl	808af7c <_ZN8SPIClass6unlockEv>
    }
}
 808afba:	bd10      	pop	{r4, pc}

0808afbc <_ZN8SPIClass5beginEt>:

void SPIClass::begin(uint16_t ss_pin)
{
 808afbc:	b538      	push	{r3, r4, r5, lr}
 808afbe:	4604      	mov	r4, r0
 808afc0:	460d      	mov	r5, r1
 808afc2:	6880      	ldr	r0, [r0, #8]
 808afc4:	f7ff fb96 	bl	808a6f4 <os_mutex_recursive_lock>
    if (!lock())
    {
        hal_spi_begin(_spi, ss_pin);
 808afc8:	7820      	ldrb	r0, [r4, #0]
 808afca:	4629      	mov	r1, r5
 808afcc:	f7ff fc52 	bl	808a874 <hal_spi_begin>
        unlock();
 808afd0:	4620      	mov	r0, r4
 808afd2:	f7ff ffd3 	bl	808af7c <_ZN8SPIClass6unlockEv>
    }
}
 808afd6:	bd38      	pop	{r3, r4, r5, pc}

0808afd8 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
 808afd8:	b538      	push	{r3, r4, r5, lr}
 808afda:	4604      	mov	r4, r0
 808afdc:	460d      	mov	r5, r1
 808afde:	6880      	ldr	r0, [r0, #8]
 808afe0:	f7ff fb88 	bl	808a6f4 <os_mutex_recursive_lock>
    if (!lock())
    {
        hal_spi_set_bit_order(_spi, bitOrder);
 808afe4:	7820      	ldrb	r0, [r4, #0]
 808afe6:	4629      	mov	r1, r5
 808afe8:	f7ff fc4c 	bl	808a884 <hal_spi_set_bit_order>
        unlock();
 808afec:	4620      	mov	r0, r4
 808afee:	f7ff ffc5 	bl	808af7c <_ZN8SPIClass6unlockEv>
    }
}
 808aff2:	bd38      	pop	{r3, r4, r5, pc}

0808aff4 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
 808aff4:	b538      	push	{r3, r4, r5, lr}
 808aff6:	4604      	mov	r4, r0
 808aff8:	460d      	mov	r5, r1
 808affa:	6880      	ldr	r0, [r0, #8]
 808affc:	f7ff fb7a 	bl	808a6f4 <os_mutex_recursive_lock>
    if (!lock())
    {
        hal_spi_set_data_mode(_spi, mode);
 808b000:	7820      	ldrb	r0, [r4, #0]
 808b002:	4629      	mov	r1, r5
 808b004:	f7ff fc46 	bl	808a894 <hal_spi_set_data_mode>
        unlock();
 808b008:	4620      	mov	r0, r4
 808b00a:	f7ff ffb7 	bl	808af7c <_ZN8SPIClass6unlockEv>
    }
}
 808b00e:	bd38      	pop	{r3, r4, r5, pc}

0808b010 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 808b010:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 808b012:	2400      	movs	r4, #0
 808b014:	0840      	lsrs	r0, r0, #1
 808b016:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 808b018:	6818      	ldr	r0, [r3, #0]
 808b01a:	b2e5      	uxtb	r5, r4
 808b01c:	4288      	cmp	r0, r1
 808b01e:	d906      	bls.n	808b02e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 808b020:	3401      	adds	r4, #1
 808b022:	2c08      	cmp	r4, #8
 808b024:	d002      	beq.n	808b02c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 808b026:	0840      	lsrs	r0, r0, #1
 808b028:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 808b02a:	e7f5      	b.n	808b018 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 808b02c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 808b02e:	4b02      	ldr	r3, [pc, #8]	; (808b038 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 808b030:	5d5b      	ldrb	r3, [r3, r5]
 808b032:	7013      	strb	r3, [r2, #0]
}
 808b034:	bd30      	pop	{r4, r5, pc}
 808b036:	bf00      	nop
 808b038:	08094320 	.word	0x08094320

0808b03c <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 808b03c:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned clock = 0;
 808b03e:	2500      	movs	r5, #0
{
 808b040:	4604      	mov	r4, r0
 808b042:	b089      	sub	sp, #36	; 0x24
 808b044:	6880      	ldr	r0, [r0, #8]

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;
 808b046:	fb02 f601 	mul.w	r6, r2, r1
    unsigned clock = 0;
 808b04a:	9502      	str	r5, [sp, #8]
 808b04c:	f7ff fb52 	bl	808a6f4 <os_mutex_recursive_lock>
    memset(info, 0, sizeof(hal_spi_info_t));
 808b050:	4629      	mov	r1, r5
 808b052:	2214      	movs	r2, #20
 808b054:	a803      	add	r0, sp, #12

    if (!lock())
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
 808b056:	7827      	ldrb	r7, [r4, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 808b058:	f003 fd02 	bl	808ea60 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 808b05c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 808b05e:	462a      	mov	r2, r5
 808b060:	4638      	mov	r0, r7
 808b062:	a903      	add	r1, sp, #12
    info->version = HAL_SPI_INFO_VERSION_1;
 808b064:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
 808b068:	f7ff fc3c 	bl	808a8e4 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 808b06c:	ab02      	add	r3, sp, #8
 808b06e:	f10d 0207 	add.w	r2, sp, #7
 808b072:	4631      	mov	r1, r6
 808b074:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
 808b076:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 808b07a:	f7ff ffc9 	bl	808b010 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
 808b07e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 808b082:	7820      	ldrb	r0, [r4, #0]
 808b084:	f7ff fc0e 	bl	808a8a4 <hal_spi_set_clock_divider>
        unlock();
 808b088:	4620      	mov	r0, r4
 808b08a:	f7ff ff77 	bl	808af7c <_ZN8SPIClass6unlockEv>
    }

    return clock;
}
 808b08e:	9802      	ldr	r0, [sp, #8]
 808b090:	b009      	add	sp, #36	; 0x24
 808b092:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808b094 <_ZN8SPIClass15setClockDividerEh>:
{
 808b094:	b538      	push	{r3, r4, r5, lr}
 808b096:	4604      	mov	r4, r0
 808b098:	6880      	ldr	r0, [r0, #8]
 808b09a:	460d      	mov	r5, r1
 808b09c:	f7ff fb2a 	bl	808a6f4 <os_mutex_recursive_lock>
        if (_dividerReference)
 808b0a0:	6861      	ldr	r1, [r4, #4]
 808b0a2:	b199      	cbz	r1, 808b0cc <_ZN8SPIClass15setClockDividerEh+0x38>
    unsigned result = 0;
 808b0a4:	2300      	movs	r3, #0
 808b0a6:	4a0c      	ldr	r2, [pc, #48]	; (808b0d8 <_ZN8SPIClass15setClockDividerEh+0x44>)
        if (clock_divisors[result] == divider)
 808b0a8:	f812 0b01 	ldrb.w	r0, [r2], #1
 808b0ac:	4285      	cmp	r5, r0
 808b0ae:	d002      	beq.n	808b0b6 <_ZN8SPIClass15setClockDividerEh+0x22>
    for (; result < arraySize(clock_divisors); result++)
 808b0b0:	3301      	adds	r3, #1
 808b0b2:	2b08      	cmp	r3, #8
 808b0b4:	d1f8      	bne.n	808b0a8 <_ZN8SPIClass15setClockDividerEh+0x14>
    return result + 1;
 808b0b6:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
 808b0b8:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
 808b0ba:	2201      	movs	r2, #1
 808b0bc:	4620      	mov	r0, r4
 808b0be:	40d9      	lsrs	r1, r3
 808b0c0:	f7ff ffbc 	bl	808b03c <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
 808b0c4:	4620      	mov	r0, r4
 808b0c6:	f7ff ff59 	bl	808af7c <_ZN8SPIClass6unlockEv>
}
 808b0ca:	bd38      	pop	{r3, r4, r5, pc}
            hal_spi_set_clock_divider(_spi, rate);
 808b0cc:	4629      	mov	r1, r5
 808b0ce:	7820      	ldrb	r0, [r4, #0]
 808b0d0:	f7ff fbe8 	bl	808a8a4 <hal_spi_set_clock_divider>
 808b0d4:	e7f6      	b.n	808b0c4 <_ZN8SPIClass15setClockDividerEh+0x30>
 808b0d6:	bf00      	nop
 808b0d8:	08094320 	.word	0x08094320

0808b0dc <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
 808b0dc:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 808b0de:	7800      	ldrb	r0, [r0, #0]
 808b0e0:	f7ff fbe8 	bl	808a8b4 <hal_spi_transfer>
}
 808b0e4:	b2c0      	uxtb	r0, r0
 808b0e6:	bd08      	pop	{r3, pc}

0808b0e8 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 808b0e8:	b530      	push	{r4, r5, lr}
 808b0ea:	b087      	sub	sp, #28
 808b0ec:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808b0ee:	4604      	mov	r4, r0
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
 808b0f0:	9500      	str	r5, [sp, #0]
 808b0f2:	7800      	ldrb	r0, [r0, #0]
 808b0f4:	f7ff fbfe 	bl	808a8f4 <hal_spi_transfer_dma>
    if (user_callback == NULL)
 808b0f8:	b93d      	cbnz	r5, 808b10a <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
 808b0fa:	7820      	ldrb	r0, [r4, #0]
 808b0fc:	a902      	add	r1, sp, #8
 808b0fe:	f7ff fc01 	bl	808a904 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
 808b102:	f89d 3014 	ldrb.w	r3, [sp, #20]
 808b106:	07db      	lsls	r3, r3, #31
 808b108:	d4f7      	bmi.n	808b0fa <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
    }
}
 808b10a:	b007      	add	sp, #28
 808b10c:	bd30      	pop	{r4, r5, pc}

0808b10e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 808b10e:	b510      	push	{r4, lr}
 808b110:	4604      	mov	r4, r0
        if (wakeupSource_) {
 808b112:	6800      	ldr	r0, [r0, #0]
 808b114:	b118      	cbz	r0, 808b11e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 808b116:	f7ff fd5d 	bl	808abd4 <free>
            wakeupSource_ = nullptr;
 808b11a:	2300      	movs	r3, #0
 808b11c:	6023      	str	r3, [r4, #0]
        }
    }
 808b11e:	bd10      	pop	{r4, pc}

0808b120 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 808b120:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
 808b122:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 808b126:	460d      	mov	r5, r1
        error_ = result.error_;
 808b128:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
 808b12a:	460b      	mov	r3, r1
 808b12c:	f853 2f06 	ldr.w	r2, [r3, #6]!
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 808b130:	4604      	mov	r4, r0
        compatResult_ = result.compatResult_;
 808b132:	f8c0 2006 	str.w	r2, [r0, #6]
 808b136:	889b      	ldrh	r3, [r3, #4]
 808b138:	8143      	strh	r3, [r0, #10]
        freeWakeupSourceMemory();
 808b13a:	f7ff ffe8 	bl	808b10e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
 808b13e:	682b      	ldr	r3, [r5, #0]
 808b140:	b113      	cbz	r3, 808b148 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
 808b142:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
 808b144:	2300      	movs	r3, #0
 808b146:	602b      	str	r3, [r5, #0]
    }
 808b148:	4620      	mov	r0, r4
 808b14a:	bd38      	pop	{r3, r4, r5, pc}

0808b14c <_ZN17SystemSleepResult13toSleepResultEv>:
        if (error_ || wakeupSource_) {
 808b14c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SleepResult toSleepResult() {
 808b150:	b510      	push	{r4, lr}
 808b152:	680a      	ldr	r2, [r1, #0]
        if (error_ || wakeupSource_) {
 808b154:	b933      	cbnz	r3, 808b164 <_ZN17SystemSleepResult13toSleepResultEv+0x18>
 808b156:	b932      	cbnz	r2, 808b166 <_ZN17SystemSleepResult13toSleepResultEv+0x1a>
        return compatResult_;
 808b158:	f851 3f06 	ldr.w	r3, [r1, #6]!
 808b15c:	6003      	str	r3, [r0, #0]
 808b15e:	888b      	ldrh	r3, [r1, #4]
 808b160:	8083      	strh	r3, [r0, #4]
    }
 808b162:	bd10      	pop	{r4, pc}
        if (wakeupSource_) {
 808b164:	b122      	cbz	r2, 808b170 <_ZN17SystemSleepResult13toSleepResultEv+0x24>
            return static_cast<SystemSleepWakeupReason>(wakeupSource_->type);
 808b166:	8894      	ldrh	r4, [r2, #4]
            switch (wakeupReason()) {
 808b168:	2c01      	cmp	r4, #1
 808b16a:	d003      	beq.n	808b174 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
 808b16c:	2c04      	cmp	r4, #4
 808b16e:	d006      	beq.n	808b17e <_ZN17SystemSleepResult13toSleepResultEv+0x32>
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 808b170:	2204      	movs	r2, #4
 808b172:	e005      	b.n	808b180 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
 808b174:	8992      	ldrh	r2, [r2, #12]
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
 808b176:	718c      	strb	r4, [r1, #6]
 808b178:	810b      	strh	r3, [r1, #8]
 808b17a:	814a      	strh	r2, [r1, #10]
                    break;
 808b17c:	e7ec      	b.n	808b158 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
 808b17e:	2202      	movs	r2, #2
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 808b180:	810b      	strh	r3, [r1, #8]
 808b182:	f64f 73ff 	movw	r3, #65535	; 0xffff
 808b186:	718a      	strb	r2, [r1, #6]
 808b188:	814b      	strh	r3, [r1, #10]
                    break;
 808b18a:	e7e5      	b.n	808b158 <_ZN17SystemSleepResult13toSleepResultEv+0xc>

0808b18c <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
 808b18c:	b507      	push	{r0, r1, r2, lr}
 808b18e:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 808b190:	2100      	movs	r1, #0
{
 808b192:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 808b194:	9100      	str	r1, [sp, #0]
 808b196:	2001      	movs	r0, #1
 808b198:	218c      	movs	r1, #140	; 0x8c
 808b19a:	f7ff fc71 	bl	808aa80 <system_reset>
}
 808b19e:	b003      	add	sp, #12
 808b1a0:	f85d fb04 	ldr.w	pc, [sp], #4

0808b1a4 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
 808b1a4:	4601      	mov	r1, r0
    reset(0, flags);
 808b1a6:	2000      	movs	r0, #0
 808b1a8:	f7ff bff0 	b.w	808b18c <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

0808b1ac <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
 808b1ac:	2000      	movs	r0, #0
 808b1ae:	f7ff bff9 	b.w	808b1a4 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

0808b1b2 <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 808b1b2:	b510      	push	{r4, lr}
 808b1b4:	2400      	movs	r4, #0
 808b1b6:	7004      	strb	r4, [r0, #0]
 808b1b8:	8044      	strh	r4, [r0, #2]
 808b1ba:	f64f 74ff 	movw	r4, #65535	; 0xffff
    if (ret > 0) {
 808b1be:	2900      	cmp	r1, #0
SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 808b1c0:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
 808b1c2:	dd08      	ble.n	808b1d6 <_ZN11SleepResultC1EiPKtj+0x24>
        // pin
        --ret;
 808b1c4:	3901      	subs	r1, #1
        if ((size_t)ret < pinsSize) {
 808b1c6:	428b      	cmp	r3, r1
 808b1c8:	d904      	bls.n	808b1d4 <_ZN11SleepResultC1EiPKtj+0x22>
            pin_ = pins[ret];
 808b1ca:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 808b1ce:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
 808b1d0:	2301      	movs	r3, #1
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
        reason_ = WAKEUP_REASON_RTC;
 808b1d2:	7003      	strb	r3, [r0, #0]
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
    }
}
 808b1d4:	bd10      	pop	{r4, pc}
    } else if (ret == 0) {
 808b1d6:	d101      	bne.n	808b1dc <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
 808b1d8:	2302      	movs	r3, #2
 808b1da:	e7fa      	b.n	808b1d2 <_ZN11SleepResultC1EiPKtj+0x20>
        err_ = static_cast<system_error_t>(ret);
 808b1dc:	8041      	strh	r1, [r0, #2]
 808b1de:	e7f9      	b.n	808b1d4 <_ZN11SleepResultC1EiPKtj+0x22>

0808b1e0 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 808b1e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 808b1e2:	460d      	mov	r5, r1
 808b1e4:	4616      	mov	r6, r2
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 808b1e6:	2700      	movs	r7, #0
SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 808b1e8:	b08b      	sub	sp, #44	; 0x2c
 808b1ea:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 808b1ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 808b1ee:	4604      	mov	r4, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 808b1f0:	9301      	str	r3, [sp, #4]
 808b1f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 808b1f4:	4631      	mov	r1, r6
 808b1f6:	9300      	str	r3, [sp, #0]
 808b1f8:	4628      	mov	r0, r5
 808b1fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 808b1fc:	9702      	str	r7, [sp, #8]
 808b1fe:	f7ff fc35 	bl	808aa6c <system_sleep_pins>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
 808b202:	4633      	mov	r3, r6
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 808b204:	4601      	mov	r1, r0
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
 808b206:	462a      	mov	r2, r5
 808b208:	a805      	add	r0, sp, #20
 808b20a:	f7ff ffd2 	bl	808b1b2 <_ZN11SleepResultC1EiPKtj>
 808b20e:	4d0f      	ldr	r5, [pc, #60]	; (808b24c <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x6c>)
 808b210:	f89d 1014 	ldrb.w	r1, [sp, #20]
 808b214:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 808b218:	f8bd 3018 	ldrh.w	r3, [sp, #24]
              compatResult_(r) {
 808b21c:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
 808b220:	4628      	mov	r0, r5
 808b222:	a907      	add	r1, sp, #28
 808b224:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 808b228:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 808b22c:	9707      	str	r7, [sp, #28]
 808b22e:	f8ad 7020 	strh.w	r7, [sp, #32]
 808b232:	f7ff ff75 	bl	808b120 <_ZN17SystemSleepResultaSEOS_>
        freeWakeupSourceMemory();
 808b236:	a807      	add	r0, sp, #28
 808b238:	f7ff ff69 	bl	808b10e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        return toSleepResult();
 808b23c:	4620      	mov	r0, r4
 808b23e:	4629      	mov	r1, r5
 808b240:	f7ff ff84 	bl	808b14c <_ZN17SystemSleepResult13toSleepResultEv>
}
 808b244:	4620      	mov	r0, r4
 808b246:	b00b      	add	sp, #44	; 0x2c
 808b248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808b24a:	bf00      	nop
 808b24c:	20000e74 	.word	0x20000e74

0808b250 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 808b250:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 808b252:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 808b254:	b510      	push	{r4, lr}
 808b256:	4b08      	ldr	r3, [pc, #32]	; (808b278 <_GLOBAL__sub_I_System+0x28>)
 808b258:	4c08      	ldr	r4, [pc, #32]	; (808b27c <_GLOBAL__sub_I_System+0x2c>)
 808b25a:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 808b25c:	4b08      	ldr	r3, [pc, #32]	; (808b280 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 808b25e:	6020      	str	r0, [r4, #0]
 808b260:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 808b262:	71a0      	strb	r0, [r4, #6]
 808b264:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 808b266:	f7ff fbad 	bl	808a9c4 <set_system_mode>
SystemClass System;
 808b26a:	4620      	mov	r0, r4
 808b26c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 808b270:	4a04      	ldr	r2, [pc, #16]	; (808b284 <_GLOBAL__sub_I_System+0x34>)
 808b272:	4905      	ldr	r1, [pc, #20]	; (808b288 <_GLOBAL__sub_I_System+0x38>)
 808b274:	f002 b874 	b.w	808d360 <__aeabi_atexit>
 808b278:	20000e80 	.word	0x20000e80
 808b27c:	20000e74 	.word	0x20000e74
 808b280:	ffff0000 	.word	0xffff0000
 808b284:	20000328 	.word	0x20000328
 808b288:	08080cf9 	.word	0x08080cf9

0808b28c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 808b28c:	b510      	push	{r4, lr}
 808b28e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 808b290:	f004 f9b0 	bl	808f5f4 <strlen>
 808b294:	1e43      	subs	r3, r0, #1
 808b296:	4620      	mov	r0, r4
 808b298:	4423      	add	r3, r4
	while(i<j){
 808b29a:	4283      	cmp	r3, r0
 808b29c:	d906      	bls.n	808b2ac <_Z11str_reversePc+0x20>
		c = *i;
 808b29e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 808b2a0:	7819      	ldrb	r1, [r3, #0]
 808b2a2:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 808b2a6:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 808b2aa:	e7f6      	b.n	808b29a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 808b2ac:	bd10      	pop	{r4, pc}

0808b2ae <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 808b2ae:	b570      	push	{r4, r5, r6, lr}
 808b2b0:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 808b2b2:	1e91      	subs	r1, r2, #2
 808b2b4:	2922      	cmp	r1, #34	; 0x22
 808b2b6:	d822      	bhi.n	808b2fe <ultoa+0x50>
		return NULL;
	}
	char* ptr=buffer;
 808b2b8:	4625      	mov	r5, r4

	div_t result;
	while(a){
 808b2ba:	b168      	cbz	r0, 808b2d8 <ultoa+0x2a>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 808b2bc:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 808b2c0:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 808b2c4:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 808b2c6:	2809      	cmp	r0, #9
                *ptr += '0';
 808b2c8:	bf94      	ite	ls
 808b2ca:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 808b2cc:	3157      	addhi	r1, #87	; 0x57
 808b2ce:	b2c9      	uxtb	r1, r1
            }
            ++ptr;
            a = result.quot;
 808b2d0:	4630      	mov	r0, r6
 808b2d2:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 808b2d6:	e7f0      	b.n	808b2ba <ultoa+0xc>
 808b2d8:	462a      	mov	r2, r5
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 808b2da:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
 808b2dc:	4423      	add	r3, r4
 808b2de:	4293      	cmp	r3, r2
 808b2e0:	d902      	bls.n	808b2e8 <ultoa+0x3a>
            *ptr++ = '0';
 808b2e2:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
 808b2e6:	e7fa      	b.n	808b2de <ultoa+0x30>
 808b2e8:	1b5a      	subs	r2, r3, r5
 808b2ea:	42ab      	cmp	r3, r5
 808b2ec:	bf38      	it	cc
 808b2ee:	2200      	movcc	r2, #0

	*ptr = '\0';
 808b2f0:	2300      	movs	r3, #0
	str_reverse(buffer);
 808b2f2:	4620      	mov	r0, r4
	*ptr = '\0';
 808b2f4:	54ab      	strb	r3, [r5, r2]
	str_reverse(buffer);
 808b2f6:	f7ff ffc9 	bl	808b28c <_Z11str_reversePc>
	return buffer;
 808b2fa:	4620      	mov	r0, r4
}
 808b2fc:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 808b2fe:	2000      	movs	r0, #0
 808b300:	e7fc      	b.n	808b2fc <ultoa+0x4e>

0808b302 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 808b302:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 808b304:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 808b306:	460c      	mov	r4, r1
 808b308:	4615      	mov	r5, r2
	if(a<0){
 808b30a:	da0d      	bge.n	808b328 <itoa+0x26>
		*buffer = '-';
 808b30c:	222d      	movs	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 808b30e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 808b312:	bf0c      	ite	eq
 808b314:	4618      	moveq	r0, r3
 808b316:	4258      	negne	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 808b318:	2301      	movs	r3, #1
		*buffer = '-';
 808b31a:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
 808b31c:	462a      	mov	r2, r5
 808b31e:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
 808b320:	f7ff ffc5 	bl	808b2ae <ultoa>
	}
	return buffer;
}
 808b324:	4620      	mov	r0, r4
 808b326:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
 808b328:	2301      	movs	r3, #1
 808b32a:	e7f9      	b.n	808b320 <itoa+0x1e>

0808b32c <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 808b32c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808b330:	4607      	mov	r7, r0
 808b332:	460d      	mov	r5, r1
 808b334:	4616      	mov	r6, r2
 808b336:	461c      	mov	r4, r3
    bool negative = val<0;
    if (negative) {
 808b338:	2200      	movs	r2, #0
 808b33a:	2300      	movs	r3, #0
 808b33c:	4638      	mov	r0, r7
 808b33e:	4629      	mov	r1, r5
 808b340:	f002 fc4e 	bl	808dbe0 <__aeabi_dcmplt>
 808b344:	b120      	cbz	r0, 808b350 <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 808b346:	232d      	movs	r3, #45	; 0x2d
        val = -val;
 808b348:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 808b34c:	f804 3b01 	strb.w	r3, [r4], #1
 808b350:	2300      	movs	r3, #0
    }
    long scale = 1;
 808b352:	f04f 0a01 	mov.w	sl, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 808b356:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
 808b358:	b2d9      	uxtb	r1, r3
 808b35a:	428e      	cmp	r6, r1
 808b35c:	d903      	bls.n	808b366 <_Z4dtoadhPc+0x3a>
        scale *= 10;
 808b35e:	fb02 fa0a 	mul.w	sl, r2, sl
    for (uint8_t i=0; i<prec; i++)
 808b362:	3301      	adds	r3, #1
 808b364:	e7f8      	b.n	808b358 <_Z4dtoadhPc+0x2c>
    val *= scale;   // capture all the significant digits
 808b366:	4650      	mov	r0, sl
 808b368:	f002 f95e 	bl	808d628 <__aeabi_i2d>
 808b36c:	463a      	mov	r2, r7
 808b36e:	462b      	mov	r3, r5
 808b370:	f002 f9c4 	bl	808d6fc <__aeabi_dmul>
 808b374:	4680      	mov	r8, r0
 808b376:	4689      	mov	r9, r1
    uint64_t fixed = uint64_t(val);
 808b378:	f003 f89e 	bl	808e4b8 <__aeabi_d2ulz>
 808b37c:	4605      	mov	r5, r0
 808b37e:	460f      	mov	r7, r1
    if ((val-fixed)>=0.5)    // round last digit
 808b380:	f002 f986 	bl	808d690 <__aeabi_ul2d>
 808b384:	4602      	mov	r2, r0
 808b386:	460b      	mov	r3, r1
 808b388:	4640      	mov	r0, r8
 808b38a:	4649      	mov	r1, r9
 808b38c:	f001 fffe 	bl	808d38c <__aeabi_dsub>
 808b390:	2200      	movs	r2, #0
 808b392:	4b12      	ldr	r3, [pc, #72]	; (808b3dc <_Z4dtoadhPc+0xb0>)
 808b394:	f002 fc38 	bl	808dc08 <__aeabi_dcmpge>
 808b398:	b110      	cbz	r0, 808b3a0 <_Z4dtoadhPc+0x74>
        fixed++;
 808b39a:	3501      	adds	r5, #1
 808b39c:	f147 0700 	adc.w	r7, r7, #0

    unsigned long first = (unsigned long)(fixed / scale);
 808b3a0:	4652      	mov	r2, sl
 808b3a2:	4628      	mov	r0, r5
 808b3a4:	4639      	mov	r1, r7
 808b3a6:	17d3      	asrs	r3, r2, #31
 808b3a8:	f003 f83a 	bl	808e420 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 808b3ac:	2301      	movs	r3, #1
 808b3ae:	4615      	mov	r5, r2
 808b3b0:	4621      	mov	r1, r4
 808b3b2:	220a      	movs	r2, #10
 808b3b4:	f7ff ff7b 	bl	808b2ae <ultoa>
    if (prec) {
 808b3b8:	b16e      	cbz	r6, 808b3d6 <_Z4dtoadhPc+0xaa>
        sout += strlen(sout);
 808b3ba:	4620      	mov	r0, r4
 808b3bc:	f004 f91a 	bl	808f5f4 <strlen>
        *sout++ = '.';
 808b3c0:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
 808b3c2:	1821      	adds	r1, r4, r0
        *sout++ = '.';
 808b3c4:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
 808b3c6:	220a      	movs	r2, #10
 808b3c8:	4633      	mov	r3, r6
 808b3ca:	4628      	mov	r0, r5
    }
}
 808b3cc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
 808b3d0:	3101      	adds	r1, #1
 808b3d2:	f7ff bf6c 	b.w	808b2ae <ultoa>
}
 808b3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808b3da:	bf00      	nop
 808b3dc:	3fe00000 	.word	0x3fe00000

0808b3e0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 808b3e0:	b510      	push	{r4, lr}
 808b3e2:	4604      	mov	r4, r0
{
	free(buffer);
 808b3e4:	6800      	ldr	r0, [r0, #0]
 808b3e6:	f7ff fbf5 	bl	808abd4 <free>
}
 808b3ea:	4620      	mov	r0, r4
 808b3ec:	bd10      	pop	{r4, pc}

0808b3ee <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 808b3ee:	b510      	push	{r4, lr}
 808b3f0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 808b3f2:	6800      	ldr	r0, [r0, #0]
 808b3f4:	b108      	cbz	r0, 808b3fa <_ZN6String10invalidateEv+0xc>
 808b3f6:	f7ff fbed 	bl	808abd4 <free>
	buffer = NULL;
 808b3fa:	2300      	movs	r3, #0
	capacity = len = 0;
 808b3fc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 808b400:	6023      	str	r3, [r4, #0]
}
 808b402:	bd10      	pop	{r4, pc}

0808b404 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 808b404:	b538      	push	{r3, r4, r5, lr}
 808b406:	4604      	mov	r4, r0
 808b408:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 808b40a:	6800      	ldr	r0, [r0, #0]
 808b40c:	3101      	adds	r1, #1
 808b40e:	f7ff fbe9 	bl	808abe4 <realloc>
	if (newbuffer) {
 808b412:	b110      	cbz	r0, 808b41a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 808b414:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 808b418:	2001      	movs	r0, #1
	}
	return 0;
}
 808b41a:	bd38      	pop	{r3, r4, r5, pc}

0808b41c <_ZN6String7reserveEj>:
{
 808b41c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 808b41e:	6803      	ldr	r3, [r0, #0]
{
 808b420:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 808b422:	b123      	cbz	r3, 808b42e <_ZN6String7reserveEj+0x12>
 808b424:	6843      	ldr	r3, [r0, #4]
 808b426:	428b      	cmp	r3, r1
 808b428:	d301      	bcc.n	808b42e <_ZN6String7reserveEj+0x12>
 808b42a:	2001      	movs	r0, #1
}
 808b42c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 808b42e:	4620      	mov	r0, r4
 808b430:	f7ff ffe8 	bl	808b404 <_ZN6String12changeBufferEj>
 808b434:	2800      	cmp	r0, #0
 808b436:	d0f9      	beq.n	808b42c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 808b438:	68a3      	ldr	r3, [r4, #8]
 808b43a:	2b00      	cmp	r3, #0
 808b43c:	d1f5      	bne.n	808b42a <_ZN6String7reserveEj+0xe>
 808b43e:	6822      	ldr	r2, [r4, #0]
 808b440:	7013      	strb	r3, [r2, #0]
 808b442:	e7f2      	b.n	808b42a <_ZN6String7reserveEj+0xe>

0808b444 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 808b444:	b570      	push	{r4, r5, r6, lr}
 808b446:	460e      	mov	r6, r1
	if (!reserve(length)) {
 808b448:	4611      	mov	r1, r2
{
 808b44a:	4604      	mov	r4, r0
 808b44c:	4615      	mov	r5, r2
	if (!reserve(length)) {
 808b44e:	f7ff ffe5 	bl	808b41c <_ZN6String7reserveEj>
 808b452:	b920      	cbnz	r0, 808b45e <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 808b454:	4620      	mov	r0, r4
 808b456:	f7ff ffca 	bl	808b3ee <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 808b45a:	4620      	mov	r0, r4
 808b45c:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 808b45e:	462a      	mov	r2, r5
 808b460:	4631      	mov	r1, r6
 808b462:	6820      	ldr	r0, [r4, #0]
	len = length;
 808b464:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 808b466:	f003 faed 	bl	808ea44 <memcpy>
	buffer[len] = 0;
 808b46a:	2100      	movs	r1, #0
 808b46c:	6822      	ldr	r2, [r4, #0]
 808b46e:	68a3      	ldr	r3, [r4, #8]
 808b470:	54d1      	strb	r1, [r2, r3]
	return *this;
 808b472:	e7f2      	b.n	808b45a <_ZN6String4copyEPKcj+0x16>

0808b474 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 808b474:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 808b476:	2300      	movs	r3, #0
String::String(const char *cstr)
 808b478:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 808b47a:	460d      	mov	r5, r1
	capacity = 0;
 808b47c:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 808b480:	6083      	str	r3, [r0, #8]
	flags = 0;
 808b482:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 808b484:	b139      	cbz	r1, 808b496 <_ZN6StringC1EPKc+0x22>
 808b486:	4608      	mov	r0, r1
 808b488:	f004 f8b4 	bl	808f5f4 <strlen>
 808b48c:	4629      	mov	r1, r5
 808b48e:	4602      	mov	r2, r0
 808b490:	4620      	mov	r0, r4
 808b492:	f7ff ffd7 	bl	808b444 <_ZN6String4copyEPKcj>
}
 808b496:	4620      	mov	r0, r4
 808b498:	bd38      	pop	{r3, r4, r5, pc}

0808b49a <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 808b49a:	b538      	push	{r3, r4, r5, lr}
 808b49c:	4605      	mov	r5, r0
	if (buffer) {
 808b49e:	6800      	ldr	r0, [r0, #0]
{
 808b4a0:	460c      	mov	r4, r1
	if (buffer) {
 808b4a2:	b168      	cbz	r0, 808b4c0 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 808b4a4:	686a      	ldr	r2, [r5, #4]
 808b4a6:	688b      	ldr	r3, [r1, #8]
 808b4a8:	429a      	cmp	r2, r3
 808b4aa:	d307      	bcc.n	808b4bc <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 808b4ac:	6809      	ldr	r1, [r1, #0]
 808b4ae:	f003 fb1a 	bl	808eae6 <strcpy>
			len = rhs.len;
 808b4b2:	68a3      	ldr	r3, [r4, #8]
 808b4b4:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 808b4b6:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 808b4b8:	60a3      	str	r3, [r4, #8]
}
 808b4ba:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 808b4bc:	f7ff fb8a 	bl	808abd4 <free>
	buffer = rhs.buffer;
 808b4c0:	6823      	ldr	r3, [r4, #0]
 808b4c2:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 808b4c4:	6863      	ldr	r3, [r4, #4]
 808b4c6:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 808b4c8:	68a3      	ldr	r3, [r4, #8]
 808b4ca:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 808b4cc:	2300      	movs	r3, #0
	rhs.capacity = 0;
 808b4ce:	e9c4 3300 	strd	r3, r3, [r4]
 808b4d2:	e7f1      	b.n	808b4b8 <_ZN6String4moveERS_+0x1e>

0808b4d4 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 808b4d4:	4288      	cmp	r0, r1
{
 808b4d6:	b510      	push	{r4, lr}
 808b4d8:	460b      	mov	r3, r1
 808b4da:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 808b4dc:	d004      	beq.n	808b4e8 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 808b4de:	6809      	ldr	r1, [r1, #0]
 808b4e0:	b121      	cbz	r1, 808b4ec <_ZN6StringaSERKS_+0x18>
 808b4e2:	689a      	ldr	r2, [r3, #8]
 808b4e4:	f7ff ffae 	bl	808b444 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 808b4e8:	4620      	mov	r0, r4
 808b4ea:	bd10      	pop	{r4, pc}
	else invalidate();
 808b4ec:	f7ff ff7f 	bl	808b3ee <_ZN6String10invalidateEv>
 808b4f0:	e7fa      	b.n	808b4e8 <_ZN6StringaSERKS_+0x14>

0808b4f2 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 808b4f2:	2300      	movs	r3, #0
String::String(const String &value)
 808b4f4:	b510      	push	{r4, lr}
 808b4f6:	4604      	mov	r4, r0
	capacity = 0;
 808b4f8:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 808b4fc:	6083      	str	r3, [r0, #8]
	flags = 0;
 808b4fe:	7303      	strb	r3, [r0, #12]
	*this = value;
 808b500:	f7ff ffe8 	bl	808b4d4 <_ZN6StringaSERKS_>
}
 808b504:	4620      	mov	r0, r4
 808b506:	bd10      	pop	{r4, pc}

0808b508 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 808b508:	4288      	cmp	r0, r1
{
 808b50a:	b510      	push	{r4, lr}
 808b50c:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 808b50e:	d001      	beq.n	808b514 <_ZN6StringaSEOS_+0xc>
 808b510:	f7ff ffc3 	bl	808b49a <_ZN6String4moveERS_>
	return *this;
}
 808b514:	4620      	mov	r0, r4
 808b516:	bd10      	pop	{r4, pc}

0808b518 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 808b518:	b538      	push	{r3, r4, r5, lr}
 808b51a:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 808b51c:	460c      	mov	r4, r1
 808b51e:	b149      	cbz	r1, 808b534 <_ZN6StringaSEPKc+0x1c>
 808b520:	4608      	mov	r0, r1
 808b522:	f004 f867 	bl	808f5f4 <strlen>
 808b526:	4621      	mov	r1, r4
 808b528:	4602      	mov	r2, r0
 808b52a:	4628      	mov	r0, r5
 808b52c:	f7ff ff8a 	bl	808b444 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 808b530:	4628      	mov	r0, r5
 808b532:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 808b534:	f7ff ff5b 	bl	808b3ee <_ZN6String10invalidateEv>
 808b538:	e7fa      	b.n	808b530 <_ZN6StringaSEPKc+0x18>

0808b53a <_ZN6StringC1Ec>:
	buffer = NULL;
 808b53a:	2300      	movs	r3, #0
String::String(char c)
 808b53c:	b513      	push	{r0, r1, r4, lr}
 808b53e:	4604      	mov	r4, r0
	buf[0] = c;
 808b540:	f88d 1004 	strb.w	r1, [sp, #4]
	capacity = 0;
 808b544:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 808b548:	6083      	str	r3, [r0, #8]
	flags = 0;
 808b54a:	7303      	strb	r3, [r0, #12]
	*this = buf;
 808b54c:	a901      	add	r1, sp, #4
	buf[1] = 0;
 808b54e:	f88d 3005 	strb.w	r3, [sp, #5]
	*this = buf;
 808b552:	f7ff ffe1 	bl	808b518 <_ZN6StringaSEPKc>
}
 808b556:	4620      	mov	r0, r4
 808b558:	b002      	add	sp, #8
 808b55a:	bd10      	pop	{r4, pc}

0808b55c <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
 808b55c:	b510      	push	{r4, lr}
	buffer = NULL;
 808b55e:	2300      	movs	r3, #0
String::String(int value, unsigned char base)
 808b560:	4604      	mov	r4, r0
 808b562:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 808b564:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 808b568:	60a3      	str	r3, [r4, #8]
	flags = 0;
 808b56a:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
 808b56c:	4608      	mov	r0, r1
	itoa(value, buf, base);
 808b56e:	a901      	add	r1, sp, #4
 808b570:	f7ff fec7 	bl	808b302 <itoa>
	*this = buf;
 808b574:	4620      	mov	r0, r4
 808b576:	a901      	add	r1, sp, #4
 808b578:	f7ff ffce 	bl	808b518 <_ZN6StringaSEPKc>
}
 808b57c:	4620      	mov	r0, r4
 808b57e:	b00a      	add	sp, #40	; 0x28
 808b580:	bd10      	pop	{r4, pc}

0808b582 <_ZN6StringC1Efi>:
	buffer = NULL;
 808b582:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
 808b584:	b530      	push	{r4, r5, lr}
 808b586:	4604      	mov	r4, r0
 808b588:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
 808b58a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 808b58e:	6083      	str	r3, [r0, #8]
	flags = 0;
 808b590:	7303      	strb	r3, [r0, #12]
	dtoa(value, decimalPlaces, buf);
 808b592:	b2d5      	uxtb	r5, r2
 808b594:	4608      	mov	r0, r1
 808b596:	f002 f859 	bl	808d64c <__aeabi_f2d>
 808b59a:	462a      	mov	r2, r5
 808b59c:	ab01      	add	r3, sp, #4
 808b59e:	f7ff fec5 	bl	808b32c <_Z4dtoadhPc>
        *this = buf;
 808b5a2:	4620      	mov	r0, r4
 808b5a4:	a901      	add	r1, sp, #4
 808b5a6:	f7ff ffb7 	bl	808b518 <_ZN6StringaSEPKc>
}
 808b5aa:	4620      	mov	r0, r4
 808b5ac:	b00b      	add	sp, #44	; 0x2c
 808b5ae:	bd30      	pop	{r4, r5, pc}

0808b5b0 <_ZN6StringC1Edi>:
String::String(double value, int decimalPlaces)
 808b5b0:	b510      	push	{r4, lr}
 808b5b2:	4619      	mov	r1, r3
 808b5b4:	4604      	mov	r4, r0
	buffer = NULL;
 808b5b6:	2300      	movs	r3, #0
String::String(double value, int decimalPlaces)
 808b5b8:	b08a      	sub	sp, #40	; 0x28
 808b5ba:	4610      	mov	r0, r2
	capacity = 0;
 808b5bc:	e9c4 3300 	strd	r3, r3, [r4]
	dtoa(value, decimalPlaces, buf);
 808b5c0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	len = 0;
 808b5c4:	60a3      	str	r3, [r4, #8]
	flags = 0;
 808b5c6:	7323      	strb	r3, [r4, #12]
	dtoa(value, decimalPlaces, buf);
 808b5c8:	ab01      	add	r3, sp, #4
 808b5ca:	f7ff feaf 	bl	808b32c <_Z4dtoadhPc>
        *this = buf;
 808b5ce:	4620      	mov	r0, r4
 808b5d0:	a901      	add	r1, sp, #4
 808b5d2:	f7ff ffa1 	bl	808b518 <_ZN6StringaSEPKc>
}
 808b5d6:	4620      	mov	r0, r4
 808b5d8:	b00a      	add	sp, #40	; 0x28
 808b5da:	bd10      	pop	{r4, pc}

0808b5dc <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 808b5dc:	b570      	push	{r4, r5, r6, lr}
 808b5de:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 808b5e0:	460e      	mov	r6, r1
 808b5e2:	b909      	cbnz	r1, 808b5e8 <_ZN6String6concatEPKcj+0xc>
 808b5e4:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 808b5e6:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 808b5e8:	b16a      	cbz	r2, 808b606 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 808b5ea:	6884      	ldr	r4, [r0, #8]
 808b5ec:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 808b5ee:	4621      	mov	r1, r4
 808b5f0:	f7ff ff14 	bl	808b41c <_ZN6String7reserveEj>
 808b5f4:	2800      	cmp	r0, #0
 808b5f6:	d0f5      	beq.n	808b5e4 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 808b5f8:	6828      	ldr	r0, [r5, #0]
 808b5fa:	68ab      	ldr	r3, [r5, #8]
 808b5fc:	4631      	mov	r1, r6
 808b5fe:	4418      	add	r0, r3
 808b600:	f003 fa71 	bl	808eae6 <strcpy>
	len = newlen;
 808b604:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 808b606:	2001      	movs	r0, #1
 808b608:	e7ed      	b.n	808b5e6 <_ZN6String6concatEPKcj+0xa>

0808b60a <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
 808b60a:	688a      	ldr	r2, [r1, #8]
 808b60c:	6809      	ldr	r1, [r1, #0]
 808b60e:	f7ff bfe5 	b.w	808b5dc <_ZN6String6concatEPKcj>

0808b612 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
 808b612:	b538      	push	{r3, r4, r5, lr}
 808b614:	4605      	mov	r5, r0
	if (!cstr) return 0;
 808b616:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
 808b618:	4608      	mov	r0, r1
	if (!cstr) return 0;
 808b61a:	b141      	cbz	r1, 808b62e <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
 808b61c:	f003 ffea 	bl	808f5f4 <strlen>
 808b620:	4621      	mov	r1, r4
 808b622:	4602      	mov	r2, r0
 808b624:	4628      	mov	r0, r5
}
 808b626:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return concat(cstr, strlen(cstr));
 808b62a:	f7ff bfd7 	b.w	808b5dc <_ZN6String6concatEPKcj>
}
 808b62e:	bd38      	pop	{r3, r4, r5, pc}

0808b630 <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 808b630:	2300      	movs	r3, #0
{
 808b632:	b507      	push	{r0, r1, r2, lr}
	return concat(buf, 1);
 808b634:	2201      	movs	r2, #1
	buf[0] = c;
 808b636:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
 808b63a:	a901      	add	r1, sp, #4
	buf[1] = 0;
 808b63c:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 808b640:	f7ff ffcc 	bl	808b5dc <_ZN6String6concatEPKcj>
}
 808b644:	b003      	add	sp, #12
 808b646:	f85d fb04 	ldr.w	pc, [sp], #4

0808b64a <_ZN6String6concatEi>:
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
{
 808b64a:	b513      	push	{r0, r1, r4, lr}
	char buf[7];
	itoa(num, buf, 10);
 808b64c:	220a      	movs	r2, #10
{
 808b64e:	4604      	mov	r4, r0
 808b650:	4608      	mov	r0, r1
	itoa(num, buf, 10);
 808b652:	4669      	mov	r1, sp
 808b654:	f7ff fe55 	bl	808b302 <itoa>
	return concat(buf, strlen(buf));
 808b658:	4668      	mov	r0, sp
 808b65a:	f003 ffcb 	bl	808f5f4 <strlen>
 808b65e:	4669      	mov	r1, sp
 808b660:	4602      	mov	r2, r0
 808b662:	4620      	mov	r0, r4
 808b664:	f7ff ffba 	bl	808b5dc <_ZN6String6concatEPKcj>
}
 808b668:	b002      	add	sp, #8
 808b66a:	bd10      	pop	{r4, pc}

0808b66c <_ZN6String6concatEf>:
	ultoa(num, buf, DEC);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(float num)
{
 808b66c:	b510      	push	{r4, lr}
 808b66e:	4604      	mov	r4, r0
 808b670:	b086      	sub	sp, #24
	char buf[20];
	dtoa(num, 6, buf);
 808b672:	4608      	mov	r0, r1
 808b674:	f001 ffea 	bl	808d64c <__aeabi_f2d>
 808b678:	ab01      	add	r3, sp, #4
 808b67a:	2206      	movs	r2, #6
 808b67c:	f7ff fe56 	bl	808b32c <_Z4dtoadhPc>
	return concat(buf, strlen(buf));
 808b680:	a801      	add	r0, sp, #4
 808b682:	f003 ffb7 	bl	808f5f4 <strlen>
 808b686:	a901      	add	r1, sp, #4
 808b688:	4602      	mov	r2, r0
 808b68a:	4620      	mov	r0, r4
 808b68c:	f7ff ffa6 	bl	808b5dc <_ZN6String6concatEPKcj>
}
 808b690:	b006      	add	sp, #24
 808b692:	bd10      	pop	{r4, pc}

0808b694 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 808b694:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 808b696:	688a      	ldr	r2, [r1, #8]
 808b698:	6809      	ldr	r1, [r1, #0]
{
 808b69a:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 808b69c:	f7ff ff9e 	bl	808b5dc <_ZN6String6concatEPKcj>
 808b6a0:	b910      	cbnz	r0, 808b6a8 <_ZplRK15StringSumHelperRK6String+0x14>
 808b6a2:	4620      	mov	r0, r4
 808b6a4:	f7ff fea3 	bl	808b3ee <_ZN6String10invalidateEv>
	return a;
}
 808b6a8:	4620      	mov	r0, r4
 808b6aa:	bd10      	pop	{r4, pc}

0808b6ac <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 808b6ac:	b538      	push	{r3, r4, r5, lr}
 808b6ae:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 808b6b0:	460d      	mov	r5, r1
 808b6b2:	b921      	cbnz	r1, 808b6be <_ZplRK15StringSumHelperPKc+0x12>
 808b6b4:	4620      	mov	r0, r4
 808b6b6:	f7ff fe9a 	bl	808b3ee <_ZN6String10invalidateEv>
	return a;
}
 808b6ba:	4620      	mov	r0, r4
 808b6bc:	bd38      	pop	{r3, r4, r5, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 808b6be:	4608      	mov	r0, r1
 808b6c0:	f003 ff98 	bl	808f5f4 <strlen>
 808b6c4:	4629      	mov	r1, r5
 808b6c6:	4602      	mov	r2, r0
 808b6c8:	4620      	mov	r0, r4
 808b6ca:	f7ff ff87 	bl	808b5dc <_ZN6String6concatEPKcj>
 808b6ce:	2800      	cmp	r0, #0
 808b6d0:	d0f0      	beq.n	808b6b4 <_ZplRK15StringSumHelperPKc+0x8>
 808b6d2:	e7f2      	b.n	808b6ba <_ZplRK15StringSumHelperPKc+0xe>

0808b6d4 <_ZplRK15StringSumHelperi>:
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, int num)
{
 808b6d4:	b510      	push	{r4, lr}
 808b6d6:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
 808b6d8:	f7ff ffb7 	bl	808b64a <_ZN6String6concatEi>
 808b6dc:	b910      	cbnz	r0, 808b6e4 <_ZplRK15StringSumHelperi+0x10>
 808b6de:	4620      	mov	r0, r4
 808b6e0:	f7ff fe85 	bl	808b3ee <_ZN6String10invalidateEv>
	return a;
}
 808b6e4:	4620      	mov	r0, r4
 808b6e6:	bd10      	pop	{r4, pc}

0808b6e8 <_ZplRK15StringSumHelperf>:
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, float num)
{
 808b6e8:	b510      	push	{r4, lr}
 808b6ea:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
 808b6ec:	f7ff ffbe 	bl	808b66c <_ZN6String6concatEf>
 808b6f0:	b910      	cbnz	r0, 808b6f8 <_ZplRK15StringSumHelperf+0x10>
 808b6f2:	4620      	mov	r0, r4
 808b6f4:	f7ff fe7b 	bl	808b3ee <_ZN6String10invalidateEv>
	return a;
}
 808b6f8:	4620      	mov	r0, r4
 808b6fa:	bd10      	pop	{r4, pc}

0808b6fc <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 808b6fc:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 808b6fe:	6882      	ldr	r2, [r0, #8]
 808b700:	b93a      	cbnz	r2, 808b712 <_ZNK6String6equalsEPKc+0x16>
 808b702:	b121      	cbz	r1, 808b70e <_ZNK6String6equalsEPKc+0x12>
 808b704:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
 808b706:	fab0 f080 	clz	r0, r0
 808b70a:	0940      	lsrs	r0, r0, #5
 808b70c:	e000      	b.n	808b710 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
 808b70e:	2001      	movs	r0, #1
}
 808b710:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 808b712:	6800      	ldr	r0, [r0, #0]
 808b714:	b909      	cbnz	r1, 808b71a <_ZNK6String6equalsEPKc+0x1e>
 808b716:	7800      	ldrb	r0, [r0, #0]
 808b718:	e7f5      	b.n	808b706 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
 808b71a:	f003 f9da 	bl	808ead2 <strcmp>
 808b71e:	e7f2      	b.n	808b706 <_ZNK6String6equalsEPKc+0xa>

0808b720 <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
 808b720:	4613      	mov	r3, r2
 808b722:	b510      	push	{r4, lr}
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 808b724:	688a      	ldr	r2, [r1, #8]
 808b726:	6884      	ldr	r4, [r0, #8]
 808b728:	1aa4      	subs	r4, r4, r2
 808b72a:	429c      	cmp	r4, r3
 808b72c:	d30a      	bcc.n	808b744 <_ZNK6String10startsWithERKS_j+0x24>
 808b72e:	6800      	ldr	r0, [r0, #0]
 808b730:	b138      	cbz	r0, 808b742 <_ZNK6String10startsWithERKS_j+0x22>
 808b732:	6809      	ldr	r1, [r1, #0]
 808b734:	b141      	cbz	r1, 808b748 <_ZNK6String10startsWithERKS_j+0x28>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
 808b736:	4418      	add	r0, r3
 808b738:	f003 ff64 	bl	808f604 <strncmp>
 808b73c:	fab0 f080 	clz	r0, r0
 808b740:	0940      	lsrs	r0, r0, #5
}
 808b742:	bd10      	pop	{r4, pc}
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 808b744:	2000      	movs	r0, #0
 808b746:	e7fc      	b.n	808b742 <_ZNK6String10startsWithERKS_j+0x22>
 808b748:	4608      	mov	r0, r1
 808b74a:	e7fa      	b.n	808b742 <_ZNK6String10startsWithERKS_j+0x22>

0808b74c <_ZNK6String10startsWithERKS_>:
	if (len < s2.len) return 0;
 808b74c:	6882      	ldr	r2, [r0, #8]
 808b74e:	688b      	ldr	r3, [r1, #8]
 808b750:	429a      	cmp	r2, r3
 808b752:	d302      	bcc.n	808b75a <_ZNK6String10startsWithERKS_+0xe>
	return startsWith(s2, 0);
 808b754:	2200      	movs	r2, #0
 808b756:	f7ff bfe3 	b.w	808b720 <_ZNK6String10startsWithERKS_j>
}
 808b75a:	2000      	movs	r0, #0
 808b75c:	4770      	bx	lr

0808b75e <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 808b75e:	6883      	ldr	r3, [r0, #8]
 808b760:	428b      	cmp	r3, r1
 808b762:	d903      	bls.n	808b76c <_ZNK6StringixEj+0xe>
 808b764:	6800      	ldr	r0, [r0, #0]
 808b766:	b110      	cbz	r0, 808b76e <_ZNK6StringixEj+0x10>
	return buffer[index];
 808b768:	5c40      	ldrb	r0, [r0, r1]
 808b76a:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
 808b76c:	2000      	movs	r0, #0
}
 808b76e:	4770      	bx	lr

0808b770 <_ZNK6String6charAtEj>:
	return operator[](loc);
 808b770:	f7ff bff5 	b.w	808b75e <_ZNK6StringixEj>

0808b774 <_ZNK6String7indexOfEcj>:
{
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
 808b774:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
 808b776:	6883      	ldr	r3, [r0, #8]
 808b778:	4293      	cmp	r3, r2
 808b77a:	d906      	bls.n	808b78a <_ZNK6String7indexOfEcj+0x16>
	const char* temp = strchr(buffer + fromIndex, ch);
 808b77c:	6804      	ldr	r4, [r0, #0]
 808b77e:	18a0      	adds	r0, r4, r2
 808b780:	f003 f99a 	bl	808eab8 <strchr>
	if (temp == NULL) return -1;
 808b784:	b108      	cbz	r0, 808b78a <_ZNK6String7indexOfEcj+0x16>
	return temp - buffer;
 808b786:	1b00      	subs	r0, r0, r4
}
 808b788:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
 808b78a:	f04f 30ff 	mov.w	r0, #4294967295
 808b78e:	e7fb      	b.n	808b788 <_ZNK6String7indexOfEcj+0x14>

0808b790 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 808b790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808b792:	461d      	mov	r5, r3
	if (left > right) {
 808b794:	429a      	cmp	r2, r3
 808b796:	bf88      	it	hi
 808b798:	4613      	movhi	r3, r2
{
 808b79a:	460f      	mov	r7, r1
 808b79c:	4614      	mov	r4, r2
	if (left > right) {
 808b79e:	bf88      	it	hi
 808b7a0:	462c      	movhi	r4, r5
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 808b7a2:	490b      	ldr	r1, [pc, #44]	; (808b7d0 <_ZNK6String9substringEjj+0x40>)
	if (left > right) {
 808b7a4:	bf88      	it	hi
 808b7a6:	461d      	movhi	r5, r3
{
 808b7a8:	4606      	mov	r6, r0
	String out;
 808b7aa:	f7ff fe63 	bl	808b474 <_ZN6StringC1EPKc>
	if (left > len) return out;
 808b7ae:	68ba      	ldr	r2, [r7, #8]
 808b7b0:	42a2      	cmp	r2, r4
 808b7b2:	d30a      	bcc.n	808b7ca <_ZNK6String9substringEjj+0x3a>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
 808b7b4:	6839      	ldr	r1, [r7, #0]
 808b7b6:	42aa      	cmp	r2, r5
 808b7b8:	bf94      	ite	ls
 808b7ba:	ebc4 0202 	rsbls	r2, r4, r2
 808b7be:	ebc4 0205 	rsbhi	r2, r4, r5
 808b7c2:	4630      	mov	r0, r6
 808b7c4:	4421      	add	r1, r4
 808b7c6:	f7ff fe3d 	bl	808b444 <_ZN6String4copyEPKcj>
	return out;
}
 808b7ca:	4630      	mov	r0, r6
 808b7cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808b7ce:	bf00      	nop
 808b7d0:	080942e2 	.word	0x080942e2

0808b7d4 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 808b7d4:	6800      	ldr	r0, [r0, #0]
 808b7d6:	b108      	cbz	r0, 808b7dc <_ZNK6String5toIntEv+0x8>
 808b7d8:	f003 b81d 	b.w	808e816 <atol>
	return 0;
}
 808b7dc:	4770      	bx	lr

0808b7de <_ZNK6String7toFloatEv>:


float String::toFloat(void) const
{
 808b7de:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
 808b7e0:	6800      	ldr	r0, [r0, #0]
 808b7e2:	b120      	cbz	r0, 808b7ee <_ZNK6String7toFloatEv+0x10>
 808b7e4:	f003 f810 	bl	808e808 <atof>
 808b7e8:	f002 fa80 	bl	808dcec <__aeabi_d2f>
	return 0;
}
 808b7ec:	bd08      	pop	{r3, pc}
	return 0;
 808b7ee:	2000      	movs	r0, #0
 808b7f0:	e7fc      	b.n	808b7ec <_ZNK6String7toFloatEv+0xe>
	...

0808b7f4 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
 808b7f4:	b40e      	push	{r1, r2, r3}
 808b7f6:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 808b7f8:	ad09      	add	r5, sp, #36	; 0x24
 808b7fa:	f855 7b04 	ldr.w	r7, [r5], #4
 808b7fe:	4604      	mov	r4, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 808b800:	462b      	mov	r3, r5
 808b802:	463a      	mov	r2, r7
 808b804:	2105      	movs	r1, #5
 808b806:	a802      	add	r0, sp, #8
    va_start(marker, fmt);
 808b808:	9501      	str	r5, [sp, #4]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 808b80a:	f7ff fa23 	bl	808ac54 <vsnprintf>
 808b80e:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 808b810:	490b      	ldr	r1, [pc, #44]	; (808b840 <_ZN6String6formatEPKcz+0x4c>)
 808b812:	4620      	mov	r0, r4
 808b814:	f7ff fe2e 	bl	808b474 <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
 808b818:	4631      	mov	r1, r6
 808b81a:	4620      	mov	r0, r4
 808b81c:	f7ff fdfe 	bl	808b41c <_ZN6String7reserveEj>
    if (result.buffer) {
 808b820:	6820      	ldr	r0, [r4, #0]
 808b822:	b130      	cbz	r0, 808b832 <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 808b824:	462b      	mov	r3, r5
 808b826:	463a      	mov	r2, r7
 808b828:	1c71      	adds	r1, r6, #1
        va_start(marker, fmt);
 808b82a:	9501      	str	r5, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 808b82c:	f7ff fa12 	bl	808ac54 <vsnprintf>
        va_end(marker);
        result.len = n;
 808b830:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
 808b832:	4620      	mov	r0, r4
 808b834:	b004      	add	sp, #16
 808b836:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 808b83a:	b003      	add	sp, #12
 808b83c:	4770      	bx	lr
 808b83e:	bf00      	nop
 808b840:	080942e2 	.word	0x080942e2

0808b844 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 808b844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808b846:	4606      	mov	r6, r0
 808b848:	460d      	mov	r5, r1
  size_t n = 0;
 808b84a:	2400      	movs	r4, #0
 808b84c:	188f      	adds	r7, r1, r2
  while (size--) {
 808b84e:	42bd      	cmp	r5, r7
 808b850:	d00c      	beq.n	808b86c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 808b852:	6833      	ldr	r3, [r6, #0]
 808b854:	4630      	mov	r0, r6
 808b856:	689b      	ldr	r3, [r3, #8]
 808b858:	f815 1b01 	ldrb.w	r1, [r5], #1
 808b85c:	4798      	blx	r3
     if (chunk>=0)
 808b85e:	1e03      	subs	r3, r0, #0
 808b860:	db01      	blt.n	808b866 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 808b862:	441c      	add	r4, r3
  while (size--) {
 808b864:	e7f3      	b.n	808b84e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 808b866:	2c00      	cmp	r4, #0
 808b868:	bf08      	it	eq
 808b86a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 808b86c:	4620      	mov	r0, r4
 808b86e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808b870 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 808b870:	b508      	push	{r3, lr}
  return write(str);
 808b872:	f7fd f9a7 	bl	8088bc4 <_ZN5Print5writeEPKc>
}
 808b876:	bd08      	pop	{r3, pc}

0808b878 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 808b878:	6803      	ldr	r3, [r0, #0]
 808b87a:	689b      	ldr	r3, [r3, #8]
 808b87c:	4718      	bx	r3

0808b87e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 808b87e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 808b880:	210d      	movs	r1, #13
{
 808b882:	4605      	mov	r5, r0
  size_t n = print('\r');
 808b884:	f7ff fff8 	bl	808b878 <_ZN5Print5printEc>
  n += print('\n');
 808b888:	210a      	movs	r1, #10
  size_t n = print('\r');
 808b88a:	4604      	mov	r4, r0
  n += print('\n');
 808b88c:	4628      	mov	r0, r5
 808b88e:	f7ff fff3 	bl	808b878 <_ZN5Print5printEc>
  return n;
}
 808b892:	4420      	add	r0, r4
 808b894:	bd38      	pop	{r3, r4, r5, pc}

0808b896 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 808b896:	b538      	push	{r3, r4, r5, lr}
 808b898:	4605      	mov	r5, r0
  return write(str);
 808b89a:	f7fd f993 	bl	8088bc4 <_ZN5Print5writeEPKc>
 808b89e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 808b8a0:	4628      	mov	r0, r5
 808b8a2:	f7ff ffec 	bl	808b87e <_ZN5Print7printlnEv>
  return n;
}
 808b8a6:	4420      	add	r0, r4
 808b8a8:	bd38      	pop	{r3, r4, r5, pc}

0808b8aa <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
 808b8aa:	b538      	push	{r3, r4, r5, lr}
 808b8ac:	4605      	mov	r5, r0
  size_t n = print(c);
 808b8ae:	f7ff ffe3 	bl	808b878 <_ZN5Print5printEc>
 808b8b2:	4604      	mov	r4, r0
  n += println();
 808b8b4:	4628      	mov	r0, r5
 808b8b6:	f7ff ffe2 	bl	808b87e <_ZN5Print7printlnEv>
  return n;
}
 808b8ba:	4420      	add	r0, r4
 808b8bc:	bd38      	pop	{r3, r4, r5, pc}

0808b8be <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 808b8be:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 808b8c0:	2a01      	cmp	r2, #1
 808b8c2:	bf98      	it	ls
 808b8c4:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 808b8c6:	b530      	push	{r4, r5, lr}
 808b8c8:	b08b      	sub	sp, #44	; 0x2c
 808b8ca:	460c      	mov	r4, r1
  *str = '\0';
 808b8cc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 808b8d0:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 808b8d2:	4625      	mov	r5, r4
 808b8d4:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 808b8d8:	fb04 5312 	mls	r3, r4, r2, r5
 808b8dc:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 808b8de:	2b09      	cmp	r3, #9
 808b8e0:	bf94      	ite	ls
 808b8e2:	3330      	addls	r3, #48	; 0x30
 808b8e4:	3337      	addhi	r3, #55	; 0x37
 808b8e6:	b2db      	uxtb	r3, r3
  } while(n);
 808b8e8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 808b8ea:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 808b8ee:	d9f0      	bls.n	808b8d2 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 808b8f0:	f7fd f968 	bl	8088bc4 <_ZN5Print5writeEPKc>
}
 808b8f4:	b00b      	add	sp, #44	; 0x2c
 808b8f6:	bd30      	pop	{r4, r5, pc}

0808b8f8 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 808b8f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808b8fc:	4605      	mov	r5, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 808b8fe:	4619      	mov	r1, r3
 808b900:	4610      	mov	r0, r2
{
 808b902:	4692      	mov	sl, r2
 808b904:	461f      	mov	r7, r3
 808b906:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
  if (isnan(number)) return print("nan");
 808b90a:	f002 f991 	bl	808dc30 <__aeabi_dcmpun>
 808b90e:	b140      	cbz	r0, 808b922 <_ZN5Print10printFloatEdh+0x2a>
  return write(str);
 808b910:	4950      	ldr	r1, [pc, #320]	; (808ba54 <_ZN5Print10printFloatEdh+0x15c>)
 808b912:	4628      	mov	r0, r5
 808b914:	f7fd f956 	bl	8088bc4 <_ZN5Print5writeEPKc>
 808b918:	4604      	mov	r4, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 808b91a:	4620      	mov	r0, r4
 808b91c:	b003      	add	sp, #12
 808b91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 808b922:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 808b926:	f04f 32ff 	mov.w	r2, #4294967295
 808b92a:	4650      	mov	r0, sl
 808b92c:	4621      	mov	r1, r4
 808b92e:	4b4a      	ldr	r3, [pc, #296]	; (808ba58 <_ZN5Print10printFloatEdh+0x160>)
 808b930:	f002 f97e 	bl	808dc30 <__aeabi_dcmpun>
 808b934:	b948      	cbnz	r0, 808b94a <_ZN5Print10printFloatEdh+0x52>
 808b936:	f04f 32ff 	mov.w	r2, #4294967295
 808b93a:	4650      	mov	r0, sl
 808b93c:	4621      	mov	r1, r4
 808b93e:	4b46      	ldr	r3, [pc, #280]	; (808ba58 <_ZN5Print10printFloatEdh+0x160>)
 808b940:	f002 f958 	bl	808dbf4 <__aeabi_dcmple>
 808b944:	b908      	cbnz	r0, 808b94a <_ZN5Print10printFloatEdh+0x52>
  return write(str);
 808b946:	4945      	ldr	r1, [pc, #276]	; (808ba5c <_ZN5Print10printFloatEdh+0x164>)
 808b948:	e7e3      	b.n	808b912 <_ZN5Print10printFloatEdh+0x1a>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 808b94a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 808b94e:	4650      	mov	r0, sl
 808b950:	4639      	mov	r1, r7
 808b952:	4b43      	ldr	r3, [pc, #268]	; (808ba60 <_ZN5Print10printFloatEdh+0x168>)
 808b954:	f002 f962 	bl	808dc1c <__aeabi_dcmpgt>
 808b958:	b108      	cbz	r0, 808b95e <_ZN5Print10printFloatEdh+0x66>
  return write(str);
 808b95a:	4942      	ldr	r1, [pc, #264]	; (808ba64 <_ZN5Print10printFloatEdh+0x16c>)
 808b95c:	e7d9      	b.n	808b912 <_ZN5Print10printFloatEdh+0x1a>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 808b95e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 808b962:	4650      	mov	r0, sl
 808b964:	4639      	mov	r1, r7
 808b966:	4b40      	ldr	r3, [pc, #256]	; (808ba68 <_ZN5Print10printFloatEdh+0x170>)
 808b968:	f002 f93a 	bl	808dbe0 <__aeabi_dcmplt>
 808b96c:	2800      	cmp	r0, #0
 808b96e:	d1f4      	bne.n	808b95a <_ZN5Print10printFloatEdh+0x62>
  if (number < 0.0)
 808b970:	2200      	movs	r2, #0
 808b972:	2300      	movs	r3, #0
 808b974:	4650      	mov	r0, sl
 808b976:	4639      	mov	r1, r7
 808b978:	f002 f932 	bl	808dbe0 <__aeabi_dcmplt>
 808b97c:	4604      	mov	r4, r0
 808b97e:	b130      	cbz	r0, 808b98e <_ZN5Print10printFloatEdh+0x96>
     n += print('-');
 808b980:	212d      	movs	r1, #45	; 0x2d
 808b982:	4628      	mov	r0, r5
 808b984:	f7ff ff78 	bl	808b878 <_ZN5Print5printEc>
 808b988:	4604      	mov	r4, r0
     number = -number;
 808b98a:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
  size_t n = 0;
 808b98e:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 808b992:	2000      	movs	r0, #0
    rounding /= 10.0;
 808b994:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 808b998:	4934      	ldr	r1, [pc, #208]	; (808ba6c <_ZN5Print10printFloatEdh+0x174>)
    rounding /= 10.0;
 808b99a:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 808ba74 <_ZN5Print10printFloatEdh+0x17c>
  for (uint8_t i=0; i<digits; ++i)
 808b99e:	fa5f f38b 	uxtb.w	r3, fp
 808b9a2:	429e      	cmp	r6, r3
 808b9a4:	d906      	bls.n	808b9b4 <_ZN5Print10printFloatEdh+0xbc>
    rounding /= 10.0;
 808b9a6:	4642      	mov	r2, r8
 808b9a8:	464b      	mov	r3, r9
 808b9aa:	f001 ffd1 	bl	808d950 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 808b9ae:	f10b 0b01 	add.w	fp, fp, #1
 808b9b2:	e7f4      	b.n	808b99e <_ZN5Print10printFloatEdh+0xa6>
  number += rounding;
 808b9b4:	463b      	mov	r3, r7
 808b9b6:	4652      	mov	r2, sl
 808b9b8:	f001 fcea 	bl	808d390 <__adddf3>
 808b9bc:	4689      	mov	r9, r1
 808b9be:	4680      	mov	r8, r0
  unsigned long int_part = (unsigned long)number;
 808b9c0:	f002 f974 	bl	808dcac <__aeabi_d2uiz>
 808b9c4:	4607      	mov	r7, r0
  double remainder = number - (double)int_part;
 808b9c6:	f001 fe1f 	bl	808d608 <__aeabi_ui2d>
 808b9ca:	4602      	mov	r2, r0
 808b9cc:	460b      	mov	r3, r1
 808b9ce:	4640      	mov	r0, r8
 808b9d0:	4649      	mov	r1, r9
 808b9d2:	f001 fcdb 	bl	808d38c <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 808b9d6:	220a      	movs	r2, #10
 808b9d8:	4680      	mov	r8, r0
 808b9da:	4689      	mov	r9, r1
 808b9dc:	4628      	mov	r0, r5
 808b9de:	4639      	mov	r1, r7
 808b9e0:	f7ff ff6d 	bl	808b8be <_ZN5Print11printNumberEmh>
  n += print(int_part);
 808b9e4:	4404      	add	r4, r0
  if (digits > 0) {
 808b9e6:	b126      	cbz	r6, 808b9f2 <_ZN5Print10printFloatEdh+0xfa>
  return write(str);
 808b9e8:	4628      	mov	r0, r5
 808b9ea:	4921      	ldr	r1, [pc, #132]	; (808ba70 <_ZN5Print10printFloatEdh+0x178>)
 808b9ec:	f7fd f8ea 	bl	8088bc4 <_ZN5Print5writeEPKc>
    n += print(".");
 808b9f0:	4404      	add	r4, r0
    remainder *= 10.0;
 808b9f2:	f04f 0a00 	mov.w	sl, #0
 808b9f6:	f8df b07c 	ldr.w	fp, [pc, #124]	; 808ba74 <_ZN5Print10printFloatEdh+0x17c>
  while (digits-- > 0)
 808b9fa:	3e01      	subs	r6, #1
 808b9fc:	b2f6      	uxtb	r6, r6
 808b9fe:	2eff      	cmp	r6, #255	; 0xff
 808ba00:	d08b      	beq.n	808b91a <_ZN5Print10printFloatEdh+0x22>
    remainder *= 10.0;
 808ba02:	4652      	mov	r2, sl
 808ba04:	465b      	mov	r3, fp
 808ba06:	4640      	mov	r0, r8
 808ba08:	4649      	mov	r1, r9
 808ba0a:	f001 fe77 	bl	808d6fc <__aeabi_dmul>
 808ba0e:	4680      	mov	r8, r0
 808ba10:	4689      	mov	r9, r1
    int toPrint = int(remainder);
 808ba12:	f002 f923 	bl	808dc5c <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 808ba16:	1e07      	subs	r7, r0, #0
 808ba18:	da19      	bge.n	808ba4e <_ZN5Print10printFloatEdh+0x156>
            t = print('-');
 808ba1a:	212d      	movs	r1, #45	; 0x2d
 808ba1c:	4628      	mov	r0, r5
 808ba1e:	f7ff ff2b 	bl	808b878 <_ZN5Print5printEc>
 808ba22:	4603      	mov	r3, r0
            val = -n;
 808ba24:	4279      	negs	r1, r7
        return printNumber(val, base) + t;
 808ba26:	220a      	movs	r2, #10
 808ba28:	4628      	mov	r0, r5
 808ba2a:	9301      	str	r3, [sp, #4]
 808ba2c:	f7ff ff47 	bl	808b8be <_ZN5Print11printNumberEmh>
 808ba30:	9b01      	ldr	r3, [sp, #4]
 808ba32:	4403      	add	r3, r0
    remainder -= toPrint;
 808ba34:	4638      	mov	r0, r7
    n += print(toPrint);
 808ba36:	441c      	add	r4, r3
    remainder -= toPrint;
 808ba38:	f001 fdf6 	bl	808d628 <__aeabi_i2d>
 808ba3c:	4602      	mov	r2, r0
 808ba3e:	460b      	mov	r3, r1
 808ba40:	4640      	mov	r0, r8
 808ba42:	4649      	mov	r1, r9
 808ba44:	f001 fca2 	bl	808d38c <__aeabi_dsub>
 808ba48:	4680      	mov	r8, r0
 808ba4a:	4689      	mov	r9, r1
  while (digits-- > 0)
 808ba4c:	e7d5      	b.n	808b9fa <_ZN5Print10printFloatEdh+0x102>
            val = n;
 808ba4e:	4639      	mov	r1, r7
        size_t t = 0;
 808ba50:	2300      	movs	r3, #0
 808ba52:	e7e8      	b.n	808ba26 <_ZN5Print10printFloatEdh+0x12e>
 808ba54:	08094328 	.word	0x08094328
 808ba58:	7fefffff 	.word	0x7fefffff
 808ba5c:	0809432c 	.word	0x0809432c
 808ba60:	41efffff 	.word	0x41efffff
 808ba64:	08094330 	.word	0x08094330
 808ba68:	c1efffff 	.word	0xc1efffff
 808ba6c:	3fe00000 	.word	0x3fe00000
 808ba70:	08093cfa 	.word	0x08093cfa
 808ba74:	40240000 	.word	0x40240000

0808ba78 <_ZN5Print7printlnEdi>:
{
 808ba78:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return printFloat(n, digits);
 808ba7a:	f89d 1018 	ldrb.w	r1, [sp, #24]
{
 808ba7e:	4605      	mov	r5, r0
  return printFloat(n, digits);
 808ba80:	9100      	str	r1, [sp, #0]
 808ba82:	f7ff ff39 	bl	808b8f8 <_ZN5Print10printFloatEdh>
 808ba86:	4604      	mov	r4, r0
  n += println();
 808ba88:	4628      	mov	r0, r5
 808ba8a:	f7ff fef8 	bl	808b87e <_ZN5Print7printlnEv>
}
 808ba8e:	4420      	add	r0, r4
 808ba90:	b003      	add	sp, #12
 808ba92:	bd30      	pop	{r4, r5, pc}

0808ba94 <_ZN5Print7printlnEfi>:
{
 808ba94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808ba96:	4604      	mov	r4, r0
    return println((double)num, digits);
 808ba98:	4608      	mov	r0, r1
{
 808ba9a:	4615      	mov	r5, r2
    return println((double)num, digits);
 808ba9c:	f001 fdd6 	bl	808d64c <__aeabi_f2d>
 808baa0:	9500      	str	r5, [sp, #0]
 808baa2:	4602      	mov	r2, r0
 808baa4:	460b      	mov	r3, r1
 808baa6:	4620      	mov	r0, r4
 808baa8:	f7ff ffe6 	bl	808ba78 <_ZN5Print7printlnEdi>
}
 808baac:	b003      	add	sp, #12
 808baae:	bd30      	pop	{r4, r5, pc}

0808bab0 <_ZN5Print11printf_implEbPKcz>:

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 808bab0:	b40c      	push	{r2, r3}
 808bab2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808bab6:	b087      	sub	sp, #28
 808bab8:	af00      	add	r7, sp, #0
 808baba:	f107 0438 	add.w	r4, r7, #56	; 0x38
 808babe:	f854 9b04 	ldr.w	r9, [r4], #4
 808bac2:	4605      	mov	r5, r0
 808bac4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 808bac6:	4623      	mov	r3, r4
 808bac8:	464a      	mov	r2, r9
 808baca:	2114      	movs	r1, #20
 808bacc:	1d38      	adds	r0, r7, #4
    va_start(marker, format);
 808bace:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 808bad0:	f7ff f8c0 	bl	808ac54 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 808bad4:	2813      	cmp	r0, #19
 808bad6:	d810      	bhi.n	808bafa <_ZN5Print11printf_implEbPKcz+0x4a>
  return write(str);
 808bad8:	4628      	mov	r0, r5
 808bada:	1d39      	adds	r1, r7, #4
 808badc:	f7fd f872 	bl	8088bc4 <_ZN5Print5writeEPKc>
 808bae0:	4604      	mov	r4, r0
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 808bae2:	b11e      	cbz	r6, 808baec <_ZN5Print11printf_implEbPKcz+0x3c>
        n += println();
 808bae4:	4628      	mov	r0, r5
 808bae6:	f7ff feca 	bl	808b87e <_ZN5Print7printlnEv>
 808baea:	4404      	add	r4, r0
    return n;
}
 808baec:	4620      	mov	r0, r4
 808baee:	371c      	adds	r7, #28
 808baf0:	46bd      	mov	sp, r7
 808baf2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808baf6:	b002      	add	sp, #8
 808baf8:	4770      	bx	lr
        char bigger[n+1];
 808bafa:	f100 0308 	add.w	r3, r0, #8
 808bafe:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 808bb02:	46e8      	mov	r8, sp
        char bigger[n+1];
 808bb04:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, marker);
 808bb08:	1c41      	adds	r1, r0, #1
 808bb0a:	4623      	mov	r3, r4
 808bb0c:	464a      	mov	r2, r9
 808bb0e:	4668      	mov	r0, sp
        va_start(marker, format);
 808bb10:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 808bb12:	f7ff f89f 	bl	808ac54 <vsnprintf>
  return write(str);
 808bb16:	4669      	mov	r1, sp
 808bb18:	4628      	mov	r0, r5
 808bb1a:	f7fd f853 	bl	8088bc4 <_ZN5Print5writeEPKc>
 808bb1e:	4604      	mov	r4, r0
 808bb20:	46c5      	mov	sp, r8
 808bb22:	e7de      	b.n	808bae2 <_ZN5Print11printf_implEbPKcz+0x32>

0808bb24 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
 808bb24:	b510      	push	{r4, lr}
 808bb26:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 808bb28:	f7fe fd9c 	bl	808a664 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
 808bb2c:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 808bb2e:	6823      	ldr	r3, [r4, #0]
 808bb30:	4620      	mov	r0, r4
 808bb32:	695b      	ldr	r3, [r3, #20]
 808bb34:	4798      	blx	r3
    if (c >= 0) return c;
 808bb36:	2800      	cmp	r0, #0
 808bb38:	da08      	bge.n	808bb4c <_ZN6Stream9timedReadEv+0x28>
 808bb3a:	f7fe fd93 	bl	808a664 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
 808bb3e:	68e3      	ldr	r3, [r4, #12]
 808bb40:	1ac0      	subs	r0, r0, r3
 808bb42:	68a3      	ldr	r3, [r4, #8]
 808bb44:	4298      	cmp	r0, r3
 808bb46:	d3f2      	bcc.n	808bb2e <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
 808bb48:	f04f 30ff 	mov.w	r0, #4294967295
}
 808bb4c:	bd10      	pop	{r4, pc}

0808bb4e <_ZN6Stream10setTimeoutEm>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(system_tick_t timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
 808bb4e:	6081      	str	r1, [r0, #8]
}
 808bb50:	4770      	bx	lr

0808bb52 <_ZN6Stream9findUntilEPcjS0_j>:

// reads data from the stream until the target string of the given length is found
// search terminated if the terminator string is found
// returns true if target string is found, false if terminated or timed out
bool Stream::findUntil(char *target, size_t targetLen, char *terminator, size_t termLen)
{
 808bb52:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808bb56:	469b      	mov	fp, r3
  size_t index = 0;  // maximum target string length is 64k bytes!
  size_t termIndex = 0;
  int c;

  if( *target == 0)
 808bb58:	780b      	ldrb	r3, [r1, #0]
{
 808bb5a:	4681      	mov	r9, r0
 808bb5c:	460f      	mov	r7, r1
 808bb5e:	4692      	mov	sl, r2
 808bb60:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  if( *target == 0)
 808bb64:	b9f3      	cbnz	r3, 808bba4 <_ZN6Stream9findUntilEPcjS0_j+0x52>
    return true;   // return true if target is a null string
 808bb66:	2001      	movs	r0, #1
    }
    else
      termIndex = 0;
  }
  return false;
}
 808bb68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      termIndex = 0;
 808bb6c:	2400      	movs	r4, #0
  while( (c = timedRead()) > 0){
 808bb6e:	4648      	mov	r0, r9
 808bb70:	f7ff ffd8 	bl	808bb24 <_ZN6Stream9timedReadEv>
 808bb74:	1e06      	subs	r6, r0, #0
 808bb76:	dd13      	ble.n	808bba0 <_ZN6Stream9findUntilEPcjS0_j+0x4e>
    if(c != target[index])
 808bb78:	5d7b      	ldrb	r3, [r7, r5]
 808bb7a:	429e      	cmp	r6, r3
 808bb7c:	d003      	beq.n	808bb86 <_ZN6Stream9findUntilEPcjS0_j+0x34>
    if( c == target[index]){
 808bb7e:	783b      	ldrb	r3, [r7, #0]
      index = 0; // reset index if any char does not match
 808bb80:	2500      	movs	r5, #0
    if( c == target[index]){
 808bb82:	429e      	cmp	r6, r3
 808bb84:	d102      	bne.n	808bb8c <_ZN6Stream9findUntilEPcjS0_j+0x3a>
      if(++index >= targetLen){ // return true if all chars in the target match
 808bb86:	3501      	adds	r5, #1
 808bb88:	45aa      	cmp	sl, r5
 808bb8a:	d9ec      	bls.n	808bb66 <_ZN6Stream9findUntilEPcjS0_j+0x14>
    if(termLen > 0 && c == terminator[termIndex]){
 808bb8c:	f1b8 0f00 	cmp.w	r8, #0
 808bb90:	d0ec      	beq.n	808bb6c <_ZN6Stream9findUntilEPcjS0_j+0x1a>
 808bb92:	f81b 3004 	ldrb.w	r3, [fp, r4]
 808bb96:	429e      	cmp	r6, r3
 808bb98:	d1e8      	bne.n	808bb6c <_ZN6Stream9findUntilEPcjS0_j+0x1a>
      if(++termIndex >= termLen)
 808bb9a:	3401      	adds	r4, #1
 808bb9c:	45a0      	cmp	r8, r4
 808bb9e:	d8e6      	bhi.n	808bb6e <_ZN6Stream9findUntilEPcjS0_j+0x1c>
  return false;
 808bba0:	2000      	movs	r0, #0
 808bba2:	e7e1      	b.n	808bb68 <_ZN6Stream9findUntilEPcjS0_j+0x16>
  size_t termIndex = 0;
 808bba4:	2400      	movs	r4, #0
  size_t index = 0;  // maximum target string length is 64k bytes!
 808bba6:	4625      	mov	r5, r4
 808bba8:	e7e1      	b.n	808bb6e <_ZN6Stream9findUntilEPcjS0_j+0x1c>

0808bbaa <_ZN6Stream9findUntilEPcS0_>:
{
 808bbaa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 808bbac:	4606      	mov	r6, r0
  return findUntil(target, strlen(target), terminator, strlen(terminator));
 808bbae:	4608      	mov	r0, r1
{
 808bbb0:	4615      	mov	r5, r2
 808bbb2:	460c      	mov	r4, r1
  return findUntil(target, strlen(target), terminator, strlen(terminator));
 808bbb4:	f003 fd1e 	bl	808f5f4 <strlen>
 808bbb8:	4607      	mov	r7, r0
 808bbba:	4628      	mov	r0, r5
 808bbbc:	f003 fd1a 	bl	808f5f4 <strlen>
 808bbc0:	462b      	mov	r3, r5
 808bbc2:	9000      	str	r0, [sp, #0]
 808bbc4:	463a      	mov	r2, r7
 808bbc6:	4621      	mov	r1, r4
 808bbc8:	4630      	mov	r0, r6
 808bbca:	f7ff ffc2 	bl	808bb52 <_ZN6Stream9findUntilEPcjS0_j>
}
 808bbce:	b003      	add	sp, #12
 808bbd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808bbd2 <_ZN6Stream4findEPc>:
  return findUntil(target, NULL);
 808bbd2:	2200      	movs	r2, #0
 808bbd4:	f7ff bfe9 	b.w	808bbaa <_ZN6Stream9findUntilEPcS0_>

0808bbd8 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
 808bbd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808bbda:	4606      	mov	r6, r0
 808bbdc:	460d      	mov	r5, r1
 808bbde:	4617      	mov	r7, r2
  size_t count = 0;
 808bbe0:	2400      	movs	r4, #0
  while (count < length) {
 808bbe2:	42bc      	cmp	r4, r7
 808bbe4:	d007      	beq.n	808bbf6 <_ZN6Stream9readBytesEPcj+0x1e>
    int c = timedRead();
 808bbe6:	4630      	mov	r0, r6
 808bbe8:	f7ff ff9c 	bl	808bb24 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
 808bbec:	1e03      	subs	r3, r0, #0
 808bbee:	db02      	blt.n	808bbf6 <_ZN6Stream9readBytesEPcj+0x1e>
    *buffer++ = (char)c;
 808bbf0:	552b      	strb	r3, [r5, r4]
    count++;
 808bbf2:	3401      	adds	r4, #1
  while (count < length) {
 808bbf4:	e7f5      	b.n	808bbe2 <_ZN6Stream9readBytesEPcj+0xa>
  }
  return count;
}
 808bbf6:	4620      	mov	r0, r4
 808bbf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0808bbfc <_ZN6Stream10readStringEv>:
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
 808bbfc:	b538      	push	{r3, r4, r5, lr}
 808bbfe:	460d      	mov	r5, r1
  String ret;
 808bc00:	4907      	ldr	r1, [pc, #28]	; (808bc20 <_ZN6Stream10readStringEv+0x24>)
{
 808bc02:	4604      	mov	r4, r0
  String ret;
 808bc04:	f7ff fc36 	bl	808b474 <_ZN6StringC1EPKc>
  int c = timedRead();
 808bc08:	4628      	mov	r0, r5
 808bc0a:	f7ff ff8b 	bl	808bb24 <_ZN6Stream9timedReadEv>
  while (c >= 0)
 808bc0e:	2800      	cmp	r0, #0
 808bc10:	db04      	blt.n	808bc1c <_ZN6Stream10readStringEv+0x20>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
 808bc12:	b2c1      	uxtb	r1, r0
 808bc14:	4620      	mov	r0, r4
 808bc16:	f7ff fd0b 	bl	808b630 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
 808bc1a:	e7f5      	b.n	808bc08 <_ZN6Stream10readStringEv+0xc>
  }
  return ret;
}
 808bc1c:	4620      	mov	r0, r4
 808bc1e:	bd38      	pop	{r3, r4, r5, pc}
 808bc20:	080942e2 	.word	0x080942e2

0808bc24 <_ZN6Stream15readStringUntilEc>:

String Stream::readStringUntil(char terminator)
{
 808bc24:	b570      	push	{r4, r5, r6, lr}
 808bc26:	460d      	mov	r5, r1
  String ret;
 808bc28:	4909      	ldr	r1, [pc, #36]	; (808bc50 <_ZN6Stream15readStringUntilEc+0x2c>)
{
 808bc2a:	4604      	mov	r4, r0
 808bc2c:	4616      	mov	r6, r2
  String ret;
 808bc2e:	f7ff fc21 	bl	808b474 <_ZN6StringC1EPKc>
  int c = timedRead();
 808bc32:	4628      	mov	r0, r5
 808bc34:	f7ff ff76 	bl	808bb24 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
 808bc38:	2800      	cmp	r0, #0
 808bc3a:	db06      	blt.n	808bc4a <_ZN6Stream15readStringUntilEc+0x26>
 808bc3c:	4286      	cmp	r6, r0
 808bc3e:	d004      	beq.n	808bc4a <_ZN6Stream15readStringUntilEc+0x26>
 808bc40:	b2c1      	uxtb	r1, r0
 808bc42:	4620      	mov	r0, r4
 808bc44:	f7ff fcf4 	bl	808b630 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
 808bc48:	e7f3      	b.n	808bc32 <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
 808bc4a:	4620      	mov	r0, r4
 808bc4c:	bd70      	pop	{r4, r5, r6, pc}
 808bc4e:	bf00      	nop
 808bc50:	080942e2 	.word	0x080942e2

0808bc54 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 808bc54:	680b      	ldr	r3, [r1, #0]
 808bc56:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 808bc58:	b113      	cbz	r3, 808bc60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 808bc5a:	685a      	ldr	r2, [r3, #4]
 808bc5c:	3201      	adds	r2, #1
 808bc5e:	605a      	str	r2, [r3, #4]
      }
 808bc60:	4770      	bx	lr
	...

0808bc64 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 808bc64:	4b01      	ldr	r3, [pc, #4]	; (808bc6c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 808bc66:	4a02      	ldr	r2, [pc, #8]	; (808bc70 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 808bc68:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 808bc6a:	4770      	bx	lr
 808bc6c:	20000e84 	.word	0x20000e84
 808bc70:	08094334 	.word	0x08094334

0808bc74 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 808bc74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
 808bc78:	4a15      	ldr	r2, [pc, #84]	; (808bcd0 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 808bc7a:	f8df 8060 	ldr.w	r8, [pc, #96]	; 808bcdc <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
 808bc7e:	e9d2 3200 	ldrd	r3, r2, [r2]
 808bc82:	18c0      	adds	r0, r0, r3
 808bc84:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
 808bc88:	4a12      	ldr	r2, [pc, #72]	; (808bcd4 <_ZL22Refresh_UnixTime_Cachex+0x60>)
{
 808bc8a:	b08c      	sub	sp, #48	; 0x30
    unix_time += dst_current_cache;
 808bc8c:	e9d2 3200 	ldrd	r3, r2, [r2]
 808bc90:	18c6      	adds	r6, r0, r3
 808bc92:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
 808bc96:	e9d8 2300 	ldrd	r2, r3, [r8]
 808bc9a:	42bb      	cmp	r3, r7
 808bc9c:	bf08      	it	eq
 808bc9e:	42b2      	cmpeq	r2, r6
 808bca0:	d013      	beq.n	808bcca <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
 808bca2:	a903      	add	r1, sp, #12
 808bca4:	4668      	mov	r0, sp
 808bca6:	e9cd 6700 	strd	r6, r7, [sp]
 808bcaa:	f002 fdc7 	bl	808e83c <localtime_r>
	calendar_time.tm_year += 1900;
 808bcae:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 808bcb0:	4d09      	ldr	r5, [pc, #36]	; (808bcd8 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
 808bcb2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 808bcb6:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
 808bcb8:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 808bcba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 808bcbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 808bcbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 808bcc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 808bcc2:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 808bcc6:	6823      	ldr	r3, [r4, #0]
 808bcc8:	602b      	str	r3, [r5, #0]
    }
}
 808bcca:	b00c      	add	sp, #48	; 0x30
 808bccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808bcd0:	20000ec0 	.word	0x20000ec0
 808bcd4:	20000eb8 	.word	0x20000eb8
 808bcd8:	20000e90 	.word	0x20000e90
 808bcdc:	20000ec8 	.word	0x20000ec8

0808bce0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 808bce0:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 808bce2:	2000      	movs	r0, #0
 808bce4:	f7fe ff5e 	bl	808aba4 <spark_sync_time_pending>
 808bce8:	b128      	cbz	r0, 808bcf6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808bcea:	f7fe ff3b 	bl	808ab64 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 808bcee:	f080 0001 	eor.w	r0, r0, #1
 808bcf2:	b2c0      	uxtb	r0, r0
    }
 808bcf4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 808bcf6:	2001      	movs	r0, #1
 808bcf8:	e7fc      	b.n	808bcf4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

0808bcfc <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 808bcfc:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 808bcfe:	f7ff ffb9 	bl	808bc74 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 808bd02:	4b02      	ldr	r3, [pc, #8]	; (808bd0c <_ZN9TimeClass5monthEx+0x10>)
 808bd04:	6918      	ldr	r0, [r3, #16]
}
 808bd06:	3001      	adds	r0, #1
 808bd08:	bd08      	pop	{r3, pc}
 808bd0a:	bf00      	nop
 808bd0c:	20000e90 	.word	0x20000e90

0808bd10 <_ZN9TimeClass4zoneEf>:
	return now() + time_zone_cache + dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 808bd10:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 808bd12:	490a      	ldr	r1, [pc, #40]	; (808bd3c <_ZN9TimeClass4zoneEf+0x2c>)
{
 808bd14:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 808bd16:	f002 fae5 	bl	808e2e4 <__aeabi_fcmplt>
 808bd1a:	b968      	cbnz	r0, 808bd38 <_ZN9TimeClass4zoneEf+0x28>
 808bd1c:	4620      	mov	r0, r4
 808bd1e:	4908      	ldr	r1, [pc, #32]	; (808bd40 <_ZN9TimeClass4zoneEf+0x30>)
 808bd20:	f002 fafe 	bl	808e320 <__aeabi_fcmpgt>
 808bd24:	b940      	cbnz	r0, 808bd38 <_ZN9TimeClass4zoneEf+0x28>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 808bd26:	4907      	ldr	r1, [pc, #28]	; (808bd44 <_ZN9TimeClass4zoneEf+0x34>)
 808bd28:	4620      	mov	r0, r4
 808bd2a:	f002 f93d 	bl	808dfa8 <__aeabi_fmul>
 808bd2e:	f002 fb8f 	bl	808e450 <__aeabi_f2lz>
 808bd32:	4b05      	ldr	r3, [pc, #20]	; (808bd48 <_ZN9TimeClass4zoneEf+0x38>)
 808bd34:	e9c3 0100 	strd	r0, r1, [r3]
}
 808bd38:	bd10      	pop	{r4, pc}
 808bd3a:	bf00      	nop
 808bd3c:	c1400000 	.word	0xc1400000
 808bd40:	41600000 	.word	0x41600000
 808bd44:	45610000 	.word	0x45610000
 808bd48:	20000ec0 	.word	0x20000ec0

0808bd4c <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
 808bd4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 808bd4e:	4602      	mov	r2, r0
 808bd50:	460b      	mov	r3, r1
    struct timeval tv = {
 808bd52:	2100      	movs	r1, #0
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
 808bd54:	4668      	mov	r0, sp
    };
 808bd56:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
 808bd5a:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
 808bd5e:	f7fe fcb1 	bl	808a6c4 <hal_rtc_set_time>
 808bd62:	4602      	mov	r2, r0
 808bd64:	b910      	cbnz	r0, 808bd6c <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
 808bd66:	4601      	mov	r1, r0
 808bd68:	f7fe fe64 	bl	808aa34 <system_notify_time_changed>
    }
}
 808bd6c:	b005      	add	sp, #20
 808bd6e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0808bd74 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 808bd74:	b530      	push	{r4, r5, lr}
 808bd76:	4604      	mov	r4, r0
    t += time_zone_cache;
 808bd78:	4818      	ldr	r0, [pc, #96]	; (808bddc <_ZN9TimeClass7timeStrEx+0x68>)
{
 808bd7a:	b093      	sub	sp, #76	; 0x4c
    t += time_zone_cache;
 808bd7c:	e9d0 1000 	ldrd	r1, r0, [r0]
 808bd80:	1852      	adds	r2, r2, r1
 808bd82:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
 808bd86:	4816      	ldr	r0, [pc, #88]	; (808bde0 <_ZN9TimeClass7timeStrEx+0x6c>)
    struct tm calendar_time = {};
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
 808bd88:	2500      	movs	r5, #0
    t += dst_current_cache;
 808bd8a:	e9d0 1000 	ldrd	r1, r0, [r0]
 808bd8e:	1852      	adds	r2, r2, r1
 808bd90:	eb40 0303 	adc.w	r3, r0, r3
 808bd94:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
 808bd98:	2224      	movs	r2, #36	; 0x24
 808bd9a:	2100      	movs	r1, #0
 808bd9c:	eb0d 0002 	add.w	r0, sp, r2
 808bda0:	f002 fe5e 	bl	808ea60 <memset>
    localtime_r(&t, &calendar_time);
 808bda4:	a909      	add	r1, sp, #36	; 0x24
 808bda6:	4668      	mov	r0, sp
 808bda8:	f002 fd48 	bl	808e83c <localtime_r>
    char ascstr[26] = {};
 808bdac:	2216      	movs	r2, #22
 808bdae:	4629      	mov	r1, r5
 808bdb0:	a803      	add	r0, sp, #12
 808bdb2:	9502      	str	r5, [sp, #8]
 808bdb4:	f002 fe54 	bl	808ea60 <memset>
    asctime_r(&calendar_time, ascstr);
 808bdb8:	a902      	add	r1, sp, #8
 808bdba:	a809      	add	r0, sp, #36	; 0x24
 808bdbc:	f002 fcfe 	bl	808e7bc <asctime_r>
    int len = strlen(ascstr);
 808bdc0:	a802      	add	r0, sp, #8
 808bdc2:	f003 fc17 	bl	808f5f4 <strlen>
    ascstr[len-1] = 0; // remove final newline
 808bdc6:	ab12      	add	r3, sp, #72	; 0x48
 808bdc8:	4418      	add	r0, r3
 808bdca:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
 808bdce:	a902      	add	r1, sp, #8
 808bdd0:	4620      	mov	r0, r4
 808bdd2:	f7ff fb4f 	bl	808b474 <_ZN6StringC1EPKc>
}
 808bdd6:	4620      	mov	r0, r4
 808bdd8:	b013      	add	sp, #76	; 0x4c
 808bdda:	bd30      	pop	{r4, r5, pc}
 808bddc:	20000ec0 	.word	0x20000ec0
 808bde0:	20000eb8 	.word	0x20000eb8

0808bde4 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 808bde4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808bde8:	b0a5      	sub	sp, #148	; 0x94
 808bdea:	4607      	mov	r7, r0
 808bdec:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 808bdee:	a814      	add	r0, sp, #80	; 0x50
{
 808bdf0:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 808bdf2:	223f      	movs	r2, #63	; 0x3f
{
 808bdf4:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 808bdf6:	f003 fc17 	bl	808f628 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 808bdfa:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 808bdfc:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 808bdfe:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 808be02:	f003 fbf7 	bl	808f5f4 <strlen>
 808be06:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 808be08:	bb5d      	cbnz	r5, 808be62 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
 808be0a:	492a      	ldr	r1, [pc, #168]	; (808beb4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
 808be0c:	a803      	add	r0, sp, #12
 808be0e:	f002 fe6a 	bl	808eae6 <strcpy>
{
 808be12:	2500      	movs	r5, #0
 808be14:	ae14      	add	r6, sp, #80	; 0x50
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 808be16:	f104 3bff 	add.w	fp, r4, #4294967295
 808be1a:	45ab      	cmp	fp, r5
 808be1c:	d936      	bls.n	808be8c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 808be1e:	46b1      	mov	r9, r6
 808be20:	f819 3b01 	ldrb.w	r3, [r9], #1
 808be24:	f105 0a01 	add.w	sl, r5, #1
 808be28:	2b25      	cmp	r3, #37	; 0x25
 808be2a:	d117      	bne.n	808be5c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
 808be2c:	7873      	ldrb	r3, [r6, #1]
 808be2e:	2b7a      	cmp	r3, #122	; 0x7a
 808be30:	d114      	bne.n	808be5c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
 808be32:	a803      	add	r0, sp, #12
 808be34:	f003 fbde 	bl	808f5f4 <strlen>
 808be38:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 808be3a:	ab14      	add	r3, sp, #80	; 0x50
 808be3c:	1828      	adds	r0, r5, r0
 808be3e:	4418      	add	r0, r3
 808be40:	ebab 0205 	sub.w	r2, fp, r5
 808be44:	1cb1      	adds	r1, r6, #2
 808be46:	f002 fdfd 	bl	808ea44 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 808be4a:	4622      	mov	r2, r4
 808be4c:	a903      	add	r1, sp, #12
 808be4e:	4630      	mov	r0, r6
 808be50:	f002 fdf8 	bl	808ea44 <memcpy>
            len = strlen(format_str);
 808be54:	a814      	add	r0, sp, #80	; 0x50
 808be56:	f003 fbcd 	bl	808f5f4 <strlen>
 808be5a:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
 808be5c:	464e      	mov	r6, r9
 808be5e:	4655      	mov	r5, sl
 808be60:	e7d9      	b.n	808be16 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 808be62:	213c      	movs	r1, #60	; 0x3c
 808be64:	fb95 f3f1 	sdiv	r3, r5, r1
 808be68:	2b00      	cmp	r3, #0
 808be6a:	bfb8      	it	lt
 808be6c:	425b      	neglt	r3, r3
 808be6e:	fbb3 f2f1 	udiv	r2, r3, r1
 808be72:	fb01 3312 	mls	r3, r1, r2, r3
 808be76:	9300      	str	r3, [sp, #0]
 808be78:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808be7c:	2110      	movs	r1, #16
 808be7e:	fb95 f3f3 	sdiv	r3, r5, r3
 808be82:	4a0d      	ldr	r2, [pc, #52]	; (808beb8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
 808be84:	a803      	add	r0, sp, #12
 808be86:	f7fe fed5 	bl	808ac34 <snprintf>
 808be8a:	e7c2      	b.n	808be12 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
 808be8c:	2100      	movs	r1, #0
 808be8e:	222e      	movs	r2, #46	; 0x2e
 808be90:	a808      	add	r0, sp, #32
 808be92:	9107      	str	r1, [sp, #28]
 808be94:	f002 fde4 	bl	808ea60 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
 808be98:	4643      	mov	r3, r8
 808be9a:	aa14      	add	r2, sp, #80	; 0x50
 808be9c:	2132      	movs	r1, #50	; 0x32
 808be9e:	a807      	add	r0, sp, #28
 808bea0:	f003 fb9e 	bl	808f5e0 <strftime>
    return String(buf);
 808bea4:	4638      	mov	r0, r7
 808bea6:	a907      	add	r1, sp, #28
 808bea8:	f7ff fae4 	bl	808b474 <_ZN6StringC1EPKc>
}
 808beac:	4638      	mov	r0, r7
 808beae:	b025      	add	sp, #148	; 0x94
 808beb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808beb4:	08092c95 	.word	0x08092c95
 808beb8:	08094338 	.word	0x08094338

0808bebc <_ZN9TimeClass6formatExPKc>:
{
 808bebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 808bebe:	b08d      	sub	sp, #52	; 0x34
 808bec0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 808bec2:	4604      	mov	r4, r0
 808bec4:	e9cd 2300 	strd	r2, r3, [sp]
    if (format_spec == nullptr)
 808bec8:	b915      	cbnz	r5, 808bed0 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
 808beca:	4b19      	ldr	r3, [pc, #100]	; (808bf30 <_ZN9TimeClass6formatExPKc+0x74>)
 808becc:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
 808bece:	b12d      	cbz	r5, 808bedc <_ZN9TimeClass6formatExPKc+0x20>
 808bed0:	4b18      	ldr	r3, [pc, #96]	; (808bf34 <_ZN9TimeClass6formatExPKc+0x78>)
 808bed2:	4628      	mov	r0, r5
 808bed4:	6819      	ldr	r1, [r3, #0]
 808bed6:	f002 fdfc 	bl	808ead2 <strcmp>
 808beda:	b938      	cbnz	r0, 808beec <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
 808bedc:	e9dd 2300 	ldrd	r2, r3, [sp]
 808bee0:	4620      	mov	r0, r4
 808bee2:	f7ff ff47 	bl	808bd74 <_ZN9TimeClass7timeStrEx>
}
 808bee6:	4620      	mov	r0, r4
 808bee8:	b00d      	add	sp, #52	; 0x34
 808beea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
 808beec:	9900      	ldr	r1, [sp, #0]
 808beee:	4e12      	ldr	r6, [pc, #72]	; (808bf38 <_ZN9TimeClass6formatExPKc+0x7c>)
    t += dst_current_cache;
 808bef0:	4f12      	ldr	r7, [pc, #72]	; (808bf3c <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
 808bef2:	e9d6 3200 	ldrd	r3, r2, [r6]
 808bef6:	185b      	adds	r3, r3, r1
 808bef8:	9901      	ldr	r1, [sp, #4]
 808befa:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
 808befe:	e9d7 0100 	ldrd	r0, r1, [r7]
 808bf02:	181b      	adds	r3, r3, r0
 808bf04:	eb41 0202 	adc.w	r2, r1, r2
 808bf08:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
 808bf0c:	2100      	movs	r1, #0
 808bf0e:	2224      	movs	r2, #36	; 0x24
 808bf10:	a803      	add	r0, sp, #12
 808bf12:	f002 fda5 	bl	808ea60 <memset>
    localtime_r(&t, &calendar_time);
 808bf16:	a903      	add	r1, sp, #12
 808bf18:	4668      	mov	r0, sp
 808bf1a:	f002 fc8f 	bl	808e83c <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
 808bf1e:	6832      	ldr	r2, [r6, #0]
 808bf20:	683b      	ldr	r3, [r7, #0]
 808bf22:	4620      	mov	r0, r4
 808bf24:	4413      	add	r3, r2
 808bf26:	a903      	add	r1, sp, #12
 808bf28:	462a      	mov	r2, r5
 808bf2a:	f7ff ff5b 	bl	808bde4 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
 808bf2e:	e7da      	b.n	808bee6 <_ZN9TimeClass6formatExPKc+0x2a>
 808bf30:	20000e8c 	.word	0x20000e8c
 808bf34:	200000e0 	.word	0x200000e0
 808bf38:	20000ec0 	.word	0x20000ec0
 808bf3c:	20000eb8 	.word	0x20000eb8

0808bf40 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
 808bf40:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 808bf42:	2000      	movs	r0, #0
 808bf44:	f7fe fbae 	bl	808a6a4 <hal_rtc_time_is_valid>
    if (rtcstate)
 808bf48:	4604      	mov	r4, r0
 808bf4a:	b9a0      	cbnz	r0, 808bf76 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 808bf4c:	f7fe fd32 	bl	808a9b4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 808bf50:	2801      	cmp	r0, #1
 808bf52:	d110      	bne.n	808bf76 <_ZN9TimeClass7isValidEv+0x36>
 808bf54:	4620      	mov	r0, r4
 808bf56:	f7fe fd65 	bl	808aa24 <system_thread_get_state>
 808bf5a:	b960      	cbnz	r0, 808bf76 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 808bf5c:	f7ff fec0 	bl	808bce0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 808bf60:	b910      	cbnz	r0, 808bf68 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 808bf62:	f7fe fdef 	bl	808ab44 <spark_process>
        while (_while() && !_condition()) {
 808bf66:	e7f9      	b.n	808bf5c <_ZN9TimeClass7isValidEv+0x1c>
 808bf68:	f7ff feba 	bl	808bce0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 808bf6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 808bf70:	2000      	movs	r0, #0
 808bf72:	f7fe bb97 	b.w	808a6a4 <hal_rtc_time_is_valid>
}
 808bf76:	4620      	mov	r0, r4
 808bf78:	bd10      	pop	{r4, pc}

0808bf7a <_ZN9TimeClass3nowEv>:
{
 808bf7a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 808bf7c:	f7ff ffe0 	bl	808bf40 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 808bf80:	2210      	movs	r2, #16
 808bf82:	2100      	movs	r1, #0
 808bf84:	4668      	mov	r0, sp
 808bf86:	f002 fd6b 	bl	808ea60 <memset>
    hal_rtc_get_time(&tv, nullptr);
 808bf8a:	2100      	movs	r1, #0
 808bf8c:	4668      	mov	r0, sp
 808bf8e:	f7fe fb91 	bl	808a6b4 <hal_rtc_get_time>
}
 808bf92:	e9dd 0100 	ldrd	r0, r1, [sp]
 808bf96:	b005      	add	sp, #20
 808bf98:	f85d fb04 	ldr.w	pc, [sp], #4

0808bf9c <_ZN9TimeClass4hourEv>:
{
 808bf9c:	b508      	push	{r3, lr}
	return hour(now());
 808bf9e:	f7ff ffec 	bl	808bf7a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 808bfa2:	f7ff fe67 	bl	808bc74 <_ZL22Refresh_UnixTime_Cachex>
}
 808bfa6:	4b01      	ldr	r3, [pc, #4]	; (808bfac <_ZN9TimeClass4hourEv+0x10>)
 808bfa8:	6898      	ldr	r0, [r3, #8]
 808bfaa:	bd08      	pop	{r3, pc}
 808bfac:	20000e90 	.word	0x20000e90

0808bfb0 <_ZN9TimeClass6minuteEv>:
{
 808bfb0:	b508      	push	{r3, lr}
	return minute(now());
 808bfb2:	f7ff ffe2 	bl	808bf7a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 808bfb6:	f7ff fe5d 	bl	808bc74 <_ZL22Refresh_UnixTime_Cachex>
}
 808bfba:	4b01      	ldr	r3, [pc, #4]	; (808bfc0 <_ZN9TimeClass6minuteEv+0x10>)
 808bfbc:	6858      	ldr	r0, [r3, #4]
 808bfbe:	bd08      	pop	{r3, pc}
 808bfc0:	20000e90 	.word	0x20000e90

0808bfc4 <_ZN9TimeClass6secondEv>:
{
 808bfc4:	b508      	push	{r3, lr}
	return second(now());
 808bfc6:	f7ff ffd8 	bl	808bf7a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 808bfca:	f7ff fe53 	bl	808bc74 <_ZL22Refresh_UnixTime_Cachex>
}
 808bfce:	4b01      	ldr	r3, [pc, #4]	; (808bfd4 <_ZN9TimeClass6secondEv+0x10>)
 808bfd0:	6818      	ldr	r0, [r3, #0]
 808bfd2:	bd08      	pop	{r3, pc}
 808bfd4:	20000e90 	.word	0x20000e90

0808bfd8 <_ZN9TimeClass3dayEv>:
{
 808bfd8:	b508      	push	{r3, lr}
	return day(now());
 808bfda:	f7ff ffce 	bl	808bf7a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 808bfde:	f7ff fe49 	bl	808bc74 <_ZL22Refresh_UnixTime_Cachex>
}
 808bfe2:	4b01      	ldr	r3, [pc, #4]	; (808bfe8 <_ZN9TimeClass3dayEv+0x10>)
 808bfe4:	68d8      	ldr	r0, [r3, #12]
 808bfe6:	bd08      	pop	{r3, pc}
 808bfe8:	20000e90 	.word	0x20000e90

0808bfec <_ZN9TimeClass5monthEv>:
{
 808bfec:	b508      	push	{r3, lr}
	return month(now());
 808bfee:	f7ff ffc4 	bl	808bf7a <_ZN9TimeClass3nowEv>
}
 808bff2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
 808bff6:	f7ff be81 	b.w	808bcfc <_ZN9TimeClass5monthEx>
	...

0808bffc <_ZN9TimeClass4yearEv>:
{
 808bffc:	b508      	push	{r3, lr}
	return year(now());
 808bffe:	f7ff ffbc 	bl	808bf7a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 808c002:	f7ff fe37 	bl	808bc74 <_ZL22Refresh_UnixTime_Cachex>
}
 808c006:	4b01      	ldr	r3, [pc, #4]	; (808c00c <_ZN9TimeClass4yearEv+0x10>)
 808c008:	6958      	ldr	r0, [r3, #20]
 808c00a:	bd08      	pop	{r3, pc}
 808c00c:	20000e90 	.word	0x20000e90

0808c010 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 808c010:	4b02      	ldr	r3, [pc, #8]	; (808c01c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 808c012:	681a      	ldr	r2, [r3, #0]
 808c014:	4b02      	ldr	r3, [pc, #8]	; (808c020 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 808c016:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 808c018:	4770      	bx	lr
 808c01a:	bf00      	nop
 808c01c:	200000e0 	.word	0x200000e0
 808c020:	20000e8c 	.word	0x20000e8c

0808c024 <setADCSampleTime>:
 *
 * @retval None
 */
void setADCSampleTime(uint8_t ADC_SampleTime)
{
    hal_adc_set_sample_time(ADC_SampleTime);
 808c024:	f7fe bafe 	b.w	808a624 <hal_adc_set_sample_time>

0808c028 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 808c028:	2100      	movs	r1, #0
 808c02a:	f7fe bcd3 	b.w	808a9d4 <system_delay_ms>

0808c02e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 808c02e:	b510      	push	{r4, lr}
 808c030:	4604      	mov	r4, r0
 808c032:	f7fd fbf3 	bl	808981c <_ZNSt14_Function_baseD1Ev>
 808c036:	4620      	mov	r0, r4
 808c038:	bd10      	pop	{r4, pc}

0808c03a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 808c03a:	b513      	push	{r0, r1, r4, lr}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808c03c:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 808c03e:	460b      	mov	r3, r1
 808c040:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808c042:	c803      	ldmia	r0, {r0, r1}
 808c044:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 808c048:	e893 0003 	ldmia.w	r3, {r0, r1}
 808c04c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 808c050:	e894 0003 	ldmia.w	r4, {r0, r1}
 808c054:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 808c058:	b002      	add	sp, #8
 808c05a:	bd10      	pop	{r4, pc}

0808c05c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 808c05c:	2300      	movs	r3, #0
 808c05e:	4803      	ldr	r0, [pc, #12]	; (808c06c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 808c060:	4a03      	ldr	r2, [pc, #12]	; (808c070 <_GLOBAL__sub_I_RGB+0x14>)
 808c062:	4904      	ldr	r1, [pc, #16]	; (808c074 <_GLOBAL__sub_I_RGB+0x18>)
 808c064:	6083      	str	r3, [r0, #8]
 808c066:	f001 b97b 	b.w	808d360 <__aeabi_atexit>
 808c06a:	bf00      	nop
 808c06c:	20000ed0 	.word	0x20000ed0
 808c070:	20000328 	.word	0x20000328
 808c074:	0808c02f 	.word	0x0808c02f

0808c078 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
 808c078:	6800      	ldr	r0, [r0, #0]
 808c07a:	f000 bee7 	b.w	808ce4c <_ZN7TwoWire4lockEv>

0808c07e <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 808c07e:	b510      	push	{r4, lr}
 808c080:	4604      	mov	r4, r0
      lock_(_lock) {
 808c082:	6001      	str	r1, [r0, #0]
 808c084:	7102      	strb	r2, [r0, #4]
    if (lock_) {
 808c086:	b10a      	cbz	r2, 808c08c <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 808c088:	f7ff fff6 	bl	808c078 <_ZN9FuelGauge4lockEv>
}
 808c08c:	4620      	mov	r0, r4
 808c08e:	bd10      	pop	{r4, pc}

0808c090 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
 808c090:	b538      	push	{r3, r4, r5, lr}
 808c092:	4604      	mov	r4, r0
 808c094:	460d      	mov	r5, r1
            return &Wire3;
 808c096:	f001 f93b 	bl	808d310 <_Z20__fetch_global_Wire3v>
        : FuelGauge(*fuelWireInstance(), _lock)
 808c09a:	462a      	mov	r2, r5
            return &Wire3;
 808c09c:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
 808c09e:	4620      	mov	r0, r4
 808c0a0:	f7ff ffed 	bl	808c07e <_ZN9FuelGaugeC1ER7TwoWireb>
}
 808c0a4:	4620      	mov	r0, r4
 808c0a6:	bd38      	pop	{r3, r4, r5, pc}

0808c0a8 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
 808c0a8:	6800      	ldr	r0, [r0, #0]
 808c0aa:	f000 bed8 	b.w	808ce5e <_ZN7TwoWire6unlockEv>

0808c0ae <_ZN9FuelGaugeD1Ev>:
FuelGauge::~FuelGauge()
 808c0ae:	b510      	push	{r4, lr}
    if (lock_) {
 808c0b0:	7903      	ldrb	r3, [r0, #4]
FuelGauge::~FuelGauge()
 808c0b2:	4604      	mov	r4, r0
    if (lock_) {
 808c0b4:	b10b      	cbz	r3, 808c0ba <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 808c0b6:	f7ff fff7 	bl	808c0a8 <_ZN9FuelGauge6unlockEv>
}
 808c0ba:	4620      	mov	r0, r4
 808c0bc:	bd10      	pop	{r4, pc}

0808c0be <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 808c0be:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 808c0c2:	4604      	mov	r4, r0
 808c0c4:	460d      	mov	r5, r1
 808c0c6:	4617      	mov	r7, r2
 808c0c8:	461e      	mov	r6, r3
 808c0ca:	f7ff ffd5 	bl	808c078 <_ZN9FuelGauge4lockEv>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808c0ce:	2336      	movs	r3, #54	; 0x36
 808c0d0:	f88d 3000 	strb.w	r3, [sp]
 808c0d4:	2300      	movs	r3, #0
 808c0d6:	f04f 0801 	mov.w	r8, #1
 808c0da:	9301      	str	r3, [sp, #4]
    timeout_ = ms;
 808c0dc:	230a      	movs	r3, #10
    i2c_.beginTransmission(config);
 808c0de:	4669      	mov	r1, sp
 808c0e0:	6820      	ldr	r0, [r4, #0]
 808c0e2:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808c0e4:	f88d 8008 	strb.w	r8, [sp, #8]
 808c0e8:	f000 fe8d 	bl	808ce06 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
 808c0ec:	6820      	ldr	r0, [r4, #0]
 808c0ee:	4629      	mov	r1, r5
 808c0f0:	6803      	ldr	r3, [r0, #0]
 808c0f2:	689b      	ldr	r3, [r3, #8]
 808c0f4:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
 808c0f6:	4641      	mov	r1, r8
 808c0f8:	6820      	ldr	r0, [r4, #0]
 808c0fa:	f000 fe9c 	bl	808ce36 <_ZN7TwoWire15endTransmissionEh>
 808c0fe:	4605      	mov	r5, r0
 808c100:	b140      	cbz	r0, 808c114 <_ZN9FuelGauge12readRegisterEhRhS0_+0x56>
 808c102:	f06f 059f 	mvn.w	r5, #159	; 0x9f
      { _M_device.unlock(); }
 808c106:	4620      	mov	r0, r4
 808c108:	f7ff ffce 	bl	808c0a8 <_ZN9FuelGauge6unlockEv>
}
 808c10c:	4628      	mov	r0, r5
 808c10e:	b004      	add	sp, #16
 808c110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
 808c114:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
 808c116:	4669      	mov	r1, sp
 808c118:	6820      	ldr	r0, [r4, #0]
 808c11a:	9301      	str	r3, [sp, #4]
 808c11c:	f000 fe40 	bl	808cda0 <_ZN7TwoWire11requestFromERK16WireTransmission>
 808c120:	2802      	cmp	r0, #2
 808c122:	d1ee      	bne.n	808c102 <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>
    MSB = i2c_.read();
 808c124:	6820      	ldr	r0, [r4, #0]
 808c126:	6803      	ldr	r3, [r0, #0]
 808c128:	695b      	ldr	r3, [r3, #20]
 808c12a:	4798      	blx	r3
 808c12c:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
 808c12e:	6820      	ldr	r0, [r4, #0]
 808c130:	6803      	ldr	r3, [r0, #0]
 808c132:	695b      	ldr	r3, [r3, #20]
 808c134:	4798      	blx	r3
 808c136:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
 808c138:	e7e5      	b.n	808c106 <_ZN9FuelGauge12readRegisterEhRhS0_+0x48>
	...

0808c13c <_ZN9FuelGauge6getSoCEv>:
    byte MSB = 0;
 808c13c:	2300      	movs	r3, #0
float FuelGauge::getSoC() {
 808c13e:	b513      	push	{r0, r1, r4, lr}
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
 808c140:	2104      	movs	r1, #4
    byte MSB = 0;
 808c142:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
 808c146:	f88d 3007 	strb.w	r3, [sp, #7]
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
 808c14a:	f10d 0206 	add.w	r2, sp, #6
 808c14e:	f10d 0307 	add.w	r3, sp, #7
 808c152:	f7ff ffb4 	bl	808c0be <_ZN9FuelGauge12readRegisterEhRhS0_>
 808c156:	b9a0      	cbnz	r0, 808c182 <_ZN9FuelGauge6getSoCEv+0x46>
        float decimal = LSB / 256.0;
 808c158:	f89d 0007 	ldrb.w	r0, [sp, #7]
 808c15c:	f001 fa64 	bl	808d628 <__aeabi_i2d>
 808c160:	2200      	movs	r2, #0
 808c162:	4b09      	ldr	r3, [pc, #36]	; (808c188 <_ZN9FuelGauge6getSoCEv+0x4c>)
 808c164:	f001 faca 	bl	808d6fc <__aeabi_dmul>
 808c168:	f001 fdc0 	bl	808dcec <__aeabi_d2f>
 808c16c:	4604      	mov	r4, r0
        return MSB + decimal;
 808c16e:	f89d 0006 	ldrb.w	r0, [sp, #6]
 808c172:	f001 fec5 	bl	808df00 <__aeabi_i2f>
 808c176:	4601      	mov	r1, r0
 808c178:	4620      	mov	r0, r4
 808c17a:	f001 fe0d 	bl	808dd98 <__addsf3>
}
 808c17e:	b002      	add	sp, #8
 808c180:	bd10      	pop	{r4, pc}
        return -1.0f;
 808c182:	4802      	ldr	r0, [pc, #8]	; (808c18c <_ZN9FuelGauge6getSoCEv+0x50>)
 808c184:	e7fb      	b.n	808c17e <_ZN9FuelGauge6getSoCEv+0x42>
 808c186:	bf00      	nop
 808c188:	3f700000 	.word	0x3f700000
 808c18c:	bf800000 	.word	0xbf800000

0808c190 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 808c190:	4b01      	ldr	r3, [pc, #4]	; (808c198 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 808c192:	6018      	str	r0, [r3, #0]
    }, nullptr);
 808c194:	4770      	bx	lr
 808c196:	bf00      	nop
 808c198:	200000e8 	.word	0x200000e8

0808c19c <serialEventRun>:
{
 808c19c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 808c19e:	4b17      	ldr	r3, [pc, #92]	; (808c1fc <serialEventRun+0x60>)
 808c1a0:	b143      	cbz	r3, 808c1b4 <serialEventRun+0x18>
 808c1a2:	f000 fc33 	bl	808ca0c <_Z16_fetch_usbserialv>
 808c1a6:	6803      	ldr	r3, [r0, #0]
 808c1a8:	691b      	ldr	r3, [r3, #16]
 808c1aa:	4798      	blx	r3
 808c1ac:	2800      	cmp	r0, #0
 808c1ae:	dd01      	ble.n	808c1b4 <serialEventRun+0x18>
        serialEvent();
 808c1b0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 808c1b4:	4b12      	ldr	r3, [pc, #72]	; (808c200 <serialEventRun+0x64>)
 808c1b6:	b143      	cbz	r3, 808c1ca <serialEventRun+0x2e>
 808c1b8:	f000 fd72 	bl	808cca0 <_Z22__fetch_global_Serial1v>
 808c1bc:	6803      	ldr	r3, [r0, #0]
 808c1be:	691b      	ldr	r3, [r3, #16]
 808c1c0:	4798      	blx	r3
 808c1c2:	2800      	cmp	r0, #0
 808c1c4:	dd01      	ble.n	808c1ca <serialEventRun+0x2e>
        serialEvent1();
 808c1c6:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 808c1ca:	4b0e      	ldr	r3, [pc, #56]	; (808c204 <serialEventRun+0x68>)
 808c1cc:	b10b      	cbz	r3, 808c1d2 <serialEventRun+0x36>
 808c1ce:	f3af 8000 	nop.w
    if (serialEventRun4) serialEventRun4();
 808c1d2:	4b0d      	ldr	r3, [pc, #52]	; (808c208 <serialEventRun+0x6c>)
 808c1d4:	b10b      	cbz	r3, 808c1da <serialEventRun+0x3e>
 808c1d6:	f7f4 fe31 	bl	8080e3c <_Z15serialEventRun4v>
    if (serialEventRun5) serialEventRun5();
 808c1da:	4b0c      	ldr	r3, [pc, #48]	; (808c20c <serialEventRun+0x70>)
 808c1dc:	b10b      	cbz	r3, 808c1e2 <serialEventRun+0x46>
 808c1de:	f7f4 fe69 	bl	8080eb4 <_Z15serialEventRun5v>
    if (usbSerialEvent1 && USBSerial1.available()>0)
 808c1e2:	4b0b      	ldr	r3, [pc, #44]	; (808c210 <serialEventRun+0x74>)
 808c1e4:	b143      	cbz	r3, 808c1f8 <serialEventRun+0x5c>
 808c1e6:	f000 fc4f 	bl	808ca88 <_Z17_fetch_usbserial1v>
 808c1ea:	6803      	ldr	r3, [r0, #0]
 808c1ec:	691b      	ldr	r3, [r3, #16]
 808c1ee:	4798      	blx	r3
 808c1f0:	2800      	cmp	r0, #0
 808c1f2:	dd01      	ble.n	808c1f8 <serialEventRun+0x5c>
        usbSerialEvent1();
 808c1f4:	f3af 8000 	nop.w
}
 808c1f8:	bd08      	pop	{r3, pc}
 808c1fa:	bf00      	nop
	...
 808c208:	08080e3d 	.word	0x08080e3d
 808c20c:	08080eb5 	.word	0x08080eb5
 808c210:	00000000 	.word	0x00000000

0808c214 <_post_loop>:
{
 808c214:	b508      	push	{r3, lr}
	serialEventRun();
 808c216:	f7ff ffc1 	bl	808c19c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 808c21a:	f7fe fa23 	bl	808a664 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 808c21e:	4b01      	ldr	r3, [pc, #4]	; (808c224 <_post_loop+0x10>)
 808c220:	6018      	str	r0, [r3, #0]
}
 808c222:	bd08      	pop	{r3, pc}
 808c224:	20001374 	.word	0x20001374

0808c228 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 808c228:	4802      	ldr	r0, [pc, #8]	; (808c234 <_Z33system_initialize_user_backup_ramv+0xc>)
 808c22a:	4a03      	ldr	r2, [pc, #12]	; (808c238 <_Z33system_initialize_user_backup_ramv+0x10>)
 808c22c:	4903      	ldr	r1, [pc, #12]	; (808c23c <_Z33system_initialize_user_backup_ramv+0x14>)
 808c22e:	1a12      	subs	r2, r2, r0
 808c230:	f002 bc08 	b.w	808ea44 <memcpy>
 808c234:	40024000 	.word	0x40024000
 808c238:	40024004 	.word	0x40024004
 808c23c:	08094af8 	.word	0x08094af8

0808c240 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 808c240:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 808c242:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 808c244:	461a      	mov	r2, r3
 808c246:	f06f 0177 	mvn.w	r1, #119	; 0x77
 808c24a:	9300      	str	r3, [sp, #0]
 808c24c:	f7fe fc04 	bl	808aa58 <system_ctrl_set_result>
}
 808c250:	b003      	add	sp, #12
 808c252:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0808c258 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 808c258:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 808c25a:	8843      	ldrh	r3, [r0, #2]
 808c25c:	2b0a      	cmp	r3, #10
 808c25e:	d008      	beq.n	808c272 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 808c260:	2b50      	cmp	r3, #80	; 0x50
 808c262:	d10b      	bne.n	808c27c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 808c264:	4b09      	ldr	r3, [pc, #36]	; (808c28c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 808c266:	681b      	ldr	r3, [r3, #0]
 808c268:	b14b      	cbz	r3, 808c27e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 808c26a:	b003      	add	sp, #12
 808c26c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 808c270:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 808c272:	f7ff ffe5 	bl	808c240 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 808c276:	b003      	add	sp, #12
 808c278:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 808c27c:	2300      	movs	r3, #0
 808c27e:	461a      	mov	r2, r3
 808c280:	f06f 0177 	mvn.w	r1, #119	; 0x77
 808c284:	9300      	str	r3, [sp, #0]
 808c286:	f7fe fbe7 	bl	808aa58 <system_ctrl_set_result>
}
 808c28a:	e7f4      	b.n	808c276 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 808c28c:	20000ee4 	.word	0x20000ee4

0808c290 <module_user_init_hook>:
{
 808c290:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 808c292:	4c12      	ldr	r4, [pc, #72]	; (808c2dc <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 808c294:	2100      	movs	r1, #0
 808c296:	4812      	ldr	r0, [pc, #72]	; (808c2e0 <module_user_init_hook+0x50>)
 808c298:	f7fe fcf4 	bl	808ac84 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 808c29c:	4d11      	ldr	r5, [pc, #68]	; (808c2e4 <module_user_init_hook+0x54>)
 808c29e:	6823      	ldr	r3, [r4, #0]
 808c2a0:	42ab      	cmp	r3, r5
 808c2a2:	bf0c      	ite	eq
 808c2a4:	2201      	moveq	r2, #1
 808c2a6:	2200      	movne	r2, #0
 808c2a8:	4b0f      	ldr	r3, [pc, #60]	; (808c2e8 <module_user_init_hook+0x58>)
 808c2aa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 808c2ac:	d002      	beq.n	808c2b4 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 808c2ae:	f7ff ffbb 	bl	808c228 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 808c2b2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 808c2b4:	f7fe f9c6 	bl	808a644 <HAL_RNG_GetRandomNumber>
 808c2b8:	4604      	mov	r4, r0
    srand(seed);
 808c2ba:	f002 fbd9 	bl	808ea70 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 808c2be:	4b0b      	ldr	r3, [pc, #44]	; (808c2ec <module_user_init_hook+0x5c>)
 808c2c0:	b113      	cbz	r3, 808c2c8 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 808c2c2:	4620      	mov	r0, r4
 808c2c4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 808c2c8:	2100      	movs	r1, #0
 808c2ca:	4808      	ldr	r0, [pc, #32]	; (808c2ec <module_user_init_hook+0x5c>)
 808c2cc:	f7fe fc72 	bl	808abb4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 808c2d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 808c2d4:	2100      	movs	r1, #0
 808c2d6:	4806      	ldr	r0, [pc, #24]	; (808c2f0 <module_user_init_hook+0x60>)
 808c2d8:	f7fe bbb4 	b.w	808aa44 <system_ctrl_set_app_request_handler>
 808c2dc:	40024000 	.word	0x40024000
 808c2e0:	0808c191 	.word	0x0808c191
 808c2e4:	9a271c1e 	.word	0x9a271c1e
 808c2e8:	20000ee0 	.word	0x20000ee0
 808c2ec:	00000000 	.word	0x00000000
 808c2f0:	0808c259 	.word	0x0808c259

0808c2f4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 808c2f4:	4770      	bx	lr

0808c2f6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 808c2f6:	2000      	movs	r0, #0
 808c2f8:	4770      	bx	lr

0808c2fa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 808c2fa:	b510      	push	{r4, lr}
 808c2fc:	4604      	mov	r4, r0
 808c2fe:	2110      	movs	r1, #16
 808c300:	f001 f833 	bl	808d36a <_ZdlPvj>
 808c304:	4620      	mov	r0, r4
 808c306:	bd10      	pop	{r4, pc}

0808c308 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 808c308:	b508      	push	{r3, lr}
      { delete this; }
 808c30a:	f7ff fff6 	bl	808c2fa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 808c30e:	bd08      	pop	{r3, pc}

0808c310 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 808c310:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 808c312:	b530      	push	{r4, r5, lr}
        type_(type) {
 808c314:	f64f 749c 	movw	r4, #65436	; 0xff9c
 808c318:	6002      	str	r2, [r0, #0]
 808c31a:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 808c31c:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 808c31e:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 808c320:	680c      	ldr	r4, [r1, #0]
 808c322:	8085      	strh	r5, [r0, #4]
 808c324:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 808c326:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 808c328:	bd30      	pop	{r4, r5, pc}

0808c32a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 808c32a:	b510      	push	{r4, lr}
 808c32c:	4604      	mov	r4, r0
    free((void*)msg_);
 808c32e:	6800      	ldr	r0, [r0, #0]
 808c330:	f7fe fc50 	bl	808abd4 <free>
}
 808c334:	4620      	mov	r0, r4
 808c336:	bd10      	pop	{r4, pc}

0808c338 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 808c338:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 808c33a:	68c4      	ldr	r4, [r0, #12]
 808c33c:	b1f4      	cbz	r4, 808c37c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 808c33e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 808c340:	2b02      	cmp	r3, #2
 808c342:	d103      	bne.n	808c34c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 808c344:	f104 000c 	add.w	r0, r4, #12
 808c348:	f7ff ffef 	bl	808c32a <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 808c34c:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 808c34e:	b135      	cbz	r5, 808c35e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 808c350:	4628      	mov	r0, r5
 808c352:	f7fd fa63 	bl	808981c <_ZNSt14_Function_baseD1Ev>
 808c356:	2110      	movs	r1, #16
 808c358:	4628      	mov	r0, r5
 808c35a:	f001 f806 	bl	808d36a <_ZdlPvj>
 808c35e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 808c360:	b135      	cbz	r5, 808c370 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 808c362:	4628      	mov	r0, r5
 808c364:	f7fd fa5a 	bl	808981c <_ZNSt14_Function_baseD1Ev>
 808c368:	2110      	movs	r1, #16
 808c36a:	4628      	mov	r0, r5
 808c36c:	f000 fffd 	bl	808d36a <_ZdlPvj>
 808c370:	4620      	mov	r0, r4
 808c372:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808c376:	2114      	movs	r1, #20
 808c378:	f000 bff7 	b.w	808d36a <_ZdlPvj>
 808c37c:	bd38      	pop	{r3, r4, r5, pc}

0808c37e <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 808c37e:	b510      	push	{r4, lr}
 808c380:	b088      	sub	sp, #32
 808c382:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 808c384:	4668      	mov	r0, sp
 808c386:	f7ff f875 	bl	808b474 <_ZN6StringC1EPKc>
    return (*fn)(p);
 808c38a:	4669      	mov	r1, sp
 808c38c:	a804      	add	r0, sp, #16
 808c38e:	f7ff f8b0 	bl	808b4f2 <_ZN6StringC1ERKS_>
 808c392:	a804      	add	r0, sp, #16
 808c394:	47a0      	blx	r4
 808c396:	4604      	mov	r4, r0
 808c398:	a804      	add	r0, sp, #16
 808c39a:	f7ff f821 	bl	808b3e0 <_ZN6StringD1Ev>
    String p(param);
 808c39e:	4668      	mov	r0, sp
 808c3a0:	f7ff f81e 	bl	808b3e0 <_ZN6StringD1Ev>
}
 808c3a4:	4620      	mov	r0, r4
 808c3a6:	b008      	add	sp, #32
 808c3a8:	bd10      	pop	{r4, pc}

0808c3aa <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_>:
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
}

void CloudClass::call_wiring_event_handler(const void* handler_data, const char *event_name, const char *data)
{
 808c3aa:	b507      	push	{r0, r1, r2, lr}
 808c3ac:	e9cd 1200 	strd	r1, r2, [sp]
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808c3b0:	6882      	ldr	r2, [r0, #8]
 808c3b2:	b90a      	cbnz	r2, 808c3b8 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_+0xe>
	__throw_bad_function_call();
 808c3b4:	f000 ffdd 	bl	808d372 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808c3b8:	4669      	mov	r1, sp
 808c3ba:	68c3      	ldr	r3, [r0, #12]
 808c3bc:	aa01      	add	r2, sp, #4
 808c3be:	4798      	blx	r3
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}
 808c3c0:	b003      	add	sp, #12
 808c3c2:	f85d fb04 	ldr.w	pc, [sp], #4

0808c3c6 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 808c3c6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 808c3c8:	2300      	movs	r3, #0
         size = sizeof(*this);
 808c3ca:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 808c3cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 808c3d0:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 808c3d2:	4669      	mov	r1, sp
 808c3d4:	461a      	mov	r2, r3
 808c3d6:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 808c3d8:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 808c3dc:	f8ad 4000 	strh.w	r4, [sp]
 808c3e0:	f7fe fba8 	bl	808ab34 <spark_function>
}
 808c3e4:	b004      	add	sp, #16
 808c3e6:	bd10      	pop	{r4, pc}

0808c3e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 808c3e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
 808c3ea:	460e      	mov	r6, r1
 808c3ec:	4604      	mov	r4, r0
 808c3ee:	f856 3b04 	ldr.w	r3, [r6], #4
 808c3f2:	460d      	mov	r5, r1
 808c3f4:	a801      	add	r0, sp, #4
 808c3f6:	4631      	mov	r1, r6
 808c3f8:	9300      	str	r3, [sp, #0]
 808c3fa:	f7ff fc2b 	bl	808bc54 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 808c3fe:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 808c400:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 808c402:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 808c404:	2300      	movs	r3, #0
	_M_pi = __tmp;
 808c406:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 808c408:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 808c40a:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 808c40c:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 808c40e:	f7f7 f82d 	bl	808346c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808c412:	4630      	mov	r0, r6
 808c414:	f7f7 f82a 	bl	808346c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 808c418:	4628      	mov	r0, r5
 808c41a:	2108      	movs	r1, #8
 808c41c:	f000 ffa5 	bl	808d36a <_ZdlPvj>
        return p;
    }
 808c420:	4620      	mov	r0, r4
 808c422:	b002      	add	sp, #8
 808c424:	bd70      	pop	{r4, r5, r6, pc}

0808c426 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 808c426:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 808c428:	b510      	push	{r4, lr}
      if (_M_empty())
 808c42a:	b90a      	cbnz	r2, 808c430 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 808c42c:	f000 ffa1 	bl	808d372 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808c430:	68c3      	ldr	r3, [r0, #12]
    }
 808c432:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808c436:	4718      	bx	r3

0808c438 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 808c438:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 808c43a:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 808c43c:	f100 0110 	add.w	r1, r0, #16
 808c440:	f7ff fff1 	bl	808c426 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 808c444:	bd08      	pop	{r3, pc}

0808c446 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 808c446:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 808c448:	b510      	push	{r4, lr}
      if (_M_empty())
 808c44a:	b90a      	cbnz	r2, 808c450 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 808c44c:	f000 ff91 	bl	808d372 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808c450:	68c3      	ldr	r3, [r0, #12]
    }
 808c452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808c456:	4718      	bx	r3

0808c458 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 808c458:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 808c45a:	6800      	ldr	r0, [r0, #0]
 808c45c:	f100 0110 	add.w	r1, r0, #16
 808c460:	f7ff fff1 	bl	808c446 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 808c464:	bd08      	pop	{r3, pc}
	...

0808c468 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 808c468:	b538      	push	{r3, r4, r5, lr}
 808c46a:	2300      	movs	r3, #0
 808c46c:	4604      	mov	r4, r0
 808c46e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808c470:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 808c472:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808c474:	f7f3 fe11 	bl	808009a <_Znwj>
 808c478:	b128      	cbz	r0, 808c486 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 808c47a:	2301      	movs	r3, #1
 808c47c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 808c480:	4b02      	ldr	r3, [pc, #8]	; (808c48c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 808c482:	60c5      	str	r5, [r0, #12]
 808c484:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808c486:	6020      	str	r0, [r4, #0]
	}
 808c488:	4620      	mov	r0, r4
 808c48a:	bd38      	pop	{r3, r4, r5, pc}
 808c48c:	08094368 	.word	0x08094368

0808c490 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 808c490:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 808c492:	2300      	movs	r3, #0
 808c494:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 808c496:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 808c498:	4604      	mov	r4, r0
 808c49a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 808c49c:	b12b      	cbz	r3, 808c4aa <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808c49e:	2202      	movs	r2, #2
 808c4a0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 808c4a2:	68eb      	ldr	r3, [r5, #12]
 808c4a4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 808c4a6:	68ab      	ldr	r3, [r5, #8]
 808c4a8:	60a3      	str	r3, [r4, #8]
    }
 808c4aa:	4620      	mov	r0, r4
 808c4ac:	bd38      	pop	{r3, r4, r5, pc}
	...

0808c4b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 808c4b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 808c4b2:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 808c4b4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 808c4b6:	4668      	mov	r0, sp
 808c4b8:	f7ff ff2a 	bl	808c310 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 808c4bc:	f04f 0302 	mov.w	r3, #2
 808c4c0:	e8d4 2f4f 	ldrexb	r2, [r4]
 808c4c4:	2a00      	cmp	r2, #0
 808c4c6:	d103      	bne.n	808c4d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 808c4c8:	e8c4 3f41 	strexb	r1, r3, [r4]
 808c4cc:	2900      	cmp	r1, #0
 808c4ce:	d1f7      	bne.n	808c4c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 808c4d0:	d125      	bne.n	808c51e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 808c4d2:	f104 050c 	add.w	r5, r4, #12
 808c4d6:	4669      	mov	r1, sp
 808c4d8:	4628      	mov	r0, r5
 808c4da:	f7ff ff19 	bl	808c310 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 808c4de:	2301      	movs	r3, #1
 808c4e0:	f3bf 8f5b 	dmb	ish
 808c4e4:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 808c4e6:	2000      	movs	r0, #0
 808c4e8:	f3bf 8f5b 	dmb	ish
 808c4ec:	f104 0308 	add.w	r3, r4, #8
 808c4f0:	e853 6f00 	ldrex	r6, [r3]
 808c4f4:	e843 0200 	strex	r2, r0, [r3]
 808c4f8:	2a00      	cmp	r2, #0
 808c4fa:	d1f9      	bne.n	808c4f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 808c4fc:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 808c500:	b16e      	cbz	r6, 808c51e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 808c502:	f7fe fa7f 	bl	808aa04 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 808c506:	b178      	cbz	r0, 808c528 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 808c508:	4629      	mov	r1, r5
 808c50a:	4630      	mov	r0, r6
 808c50c:	f7ff ff8b 	bl	808c426 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 808c510:	4630      	mov	r0, r6
 808c512:	f7fd f983 	bl	808981c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 808c516:	2110      	movs	r1, #16
 808c518:	4630      	mov	r0, r6
 808c51a:	f000 ff26 	bl	808d36a <_ZdlPvj>
        p_->setError(std::move(error));
 808c51e:	4668      	mov	r0, sp
 808c520:	f7ff ff03 	bl	808c32a <_ZN8particle5ErrorD1Ev>
    }
 808c524:	b009      	add	sp, #36	; 0x24
 808c526:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 808c528:	4631      	mov	r1, r6
 808c52a:	a802      	add	r0, sp, #8
 808c52c:	f7ff ffb0 	bl	808c490 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 808c530:	68e0      	ldr	r0, [r4, #12]
 808c532:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 808c536:	b108      	cbz	r0, 808c53c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 808c538:	f002 fade 	bl	808eaf8 <strdup>
        type_(type) {
 808c53c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 808c53e:	2010      	movs	r0, #16
 808c540:	f8ad 501c 	strh.w	r5, [sp, #28]
 808c544:	f7f3 fda9 	bl	808009a <_Znwj>
 808c548:	4605      	mov	r5, r0
 808c54a:	b1e8      	cbz	r0, 808c588 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 808c54c:	2700      	movs	r7, #0
 808c54e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808c550:	2018      	movs	r0, #24
 808c552:	f7f3 fda2 	bl	808009a <_Znwj>
 808c556:	4604      	mov	r4, r0
 808c558:	b188      	cbz	r0, 808c57e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 808c55a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 808c55c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 808c55e:	a802      	add	r0, sp, #8
 808c560:	f7ff fd6b 	bl	808c03a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808c564:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 808c566:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808c568:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808c56a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 808c56c:	9204      	str	r2, [sp, #16]
 808c56e:	68e2      	ldr	r2, [r4, #12]
 808c570:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 808c572:	60e3      	str	r3, [r4, #12]
 808c574:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 808c578:	9205      	str	r2, [sp, #20]
 808c57a:	f7ff fec9 	bl	808c310 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 808c57e:	4b08      	ldr	r3, [pc, #32]	; (808c5a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808c580:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 808c582:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 808c584:	4b07      	ldr	r3, [pc, #28]	; (808c5a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 808c586:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 808c588:	a806      	add	r0, sp, #24
 808c58a:	f7ff fece 	bl	808c32a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 808c58e:	a802      	add	r0, sp, #8
 808c590:	f7fd f944 	bl	808981c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 808c594:	2200      	movs	r2, #0
 808c596:	4629      	mov	r1, r5
 808c598:	4803      	ldr	r0, [pc, #12]	; (808c5a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 808c59a:	f7fe fa3b 	bl	808aa14 <application_thread_invoke>
 808c59e:	e7b7      	b.n	808c510 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 808c5a0:	0808c439 	.word	0x0808c439
 808c5a4:	0808c6d1 	.word	0x0808c6d1
 808c5a8:	0808ccf1 	.word	0x0808ccf1

0808c5ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 808c5ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808c5b0:	b08a      	sub	sp, #40	; 0x28
 808c5b2:	4605      	mov	r5, r0
 808c5b4:	460c      	mov	r4, r1
 808c5b6:	4617      	mov	r7, r2
 808c5b8:	4698      	mov	r8, r3
 808c5ba:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static bool connected(void) { return spark_cloud_flag_connected(); }
 808c5be:	f7fe fad1 	bl	808ab64 <spark_cloud_flag_connected>
 808c5c2:	ae07      	add	r6, sp, #28
    if (!connected()) {
 808c5c4:	4682      	mov	sl, r0
 808c5c6:	bb38      	cbnz	r0, 808c618 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 808c5c8:	f64f 732e 	movw	r3, #65326	; 0xff2e
 808c5cc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 808c5ce:	a905      	add	r1, sp, #20
 808c5d0:	4630      	mov	r0, r6
 808c5d2:	f8ad 3018 	strh.w	r3, [sp, #24]
 808c5d6:	f7ff fe9b 	bl	808c310 <_ZN8particle5ErrorC1EOS0_>
 808c5da:	2014      	movs	r0, #20
 808c5dc:	f7f3 fd5d 	bl	808009a <_Znwj>
 808c5e0:	4604      	mov	r4, r0
 808c5e2:	b148      	cbz	r0, 808c5f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 808c5e4:	2302      	movs	r3, #2
 808c5e6:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 808c5e8:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 808c5ea:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 808c5ee:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 808c5f0:	4631      	mov	r1, r6
 808c5f2:	300c      	adds	r0, #12
 808c5f4:	f7ff fe8c 	bl	808c310 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 808c5f8:	4628      	mov	r0, r5
	: __shared_count(__p)
 808c5fa:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 808c5fc:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 808c600:	f7ff ff32 	bl	808c468 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 808c604:	4630      	mov	r0, r6
 808c606:	f7ff fe90 	bl	808c32a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 808c60a:	a805      	add	r0, sp, #20
 808c60c:	f7ff fe8d 	bl	808c32a <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 808c610:	4628      	mov	r0, r5
 808c612:	b00a      	add	sp, #40	; 0x28
 808c614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 808c618:	230c      	movs	r3, #12
 808c61a:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 808c61e:	2014      	movs	r0, #20
 808c620:	e9cd aa08 	strd	sl, sl, [sp, #32]
 808c624:	9307      	str	r3, [sp, #28]
 808c626:	f7f3 fd38 	bl	808009a <_Znwj>
 808c62a:	4601      	mov	r1, r0
 808c62c:	b128      	cbz	r0, 808c63a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 808c62e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 808c632:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 808c636:	f880 a001 	strb.w	sl, [r0, #1]
 808c63a:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 808c63c:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 808c63e:	f7ff ff13 	bl	808c468 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 808c642:	4b22      	ldr	r3, [pc, #136]	; (808c6cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 808c644:	2008      	movs	r0, #8
 808c646:	9308      	str	r3, [sp, #32]
 808c648:	f7f3 fd27 	bl	808009a <_Znwj>
 808c64c:	4682      	mov	sl, r0
 808c64e:	b128      	cbz	r0, 808c65c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 808c650:	9b03      	ldr	r3, [sp, #12]
 808c652:	a904      	add	r1, sp, #16
 808c654:	f840 3b04 	str.w	r3, [r0], #4
 808c658:	f7ff fafc 	bl	808bc54 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 808c65c:	4642      	mov	r2, r8
 808c65e:	4639      	mov	r1, r7
 808c660:	4620      	mov	r0, r4
 808c662:	9600      	str	r6, [sp, #0]
 808c664:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 808c668:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 808c66c:	f7fe fa8a 	bl	808ab84 <spark_send_event>
 808c670:	b9b8      	cbnz	r0, 808c6a2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 808c672:	9b03      	ldr	r3, [sp, #12]
 808c674:	785b      	ldrb	r3, [r3, #1]
 808c676:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 808c67a:	b993      	cbnz	r3, 808c6a2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 808c67c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 808c680:	a905      	add	r1, sp, #20
 808c682:	a803      	add	r0, sp, #12
 808c684:	9205      	str	r2, [sp, #20]
 808c686:	f8ad 3018 	strh.w	r3, [sp, #24]
 808c68a:	f7ff ff11 	bl	808c4b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 808c68e:	a805      	add	r0, sp, #20
 808c690:	f7ff fe4b 	bl	808c32a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 808c694:	a805      	add	r0, sp, #20
 808c696:	9909      	ldr	r1, [sp, #36]	; 0x24
 808c698:	f7ff fea6 	bl	808c3e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 808c69c:	a806      	add	r0, sp, #24
 808c69e:	f7f6 fee5 	bl	808346c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 808c6a2:	9b03      	ldr	r3, [sp, #12]
 808c6a4:	a904      	add	r1, sp, #16
 808c6a6:	a806      	add	r0, sp, #24
 808c6a8:	9305      	str	r3, [sp, #20]
 808c6aa:	f7ff fad3 	bl	808bc54 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 808c6ae:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 808c6b0:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 808c6b2:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 808c6b4:	2300      	movs	r3, #0
	_M_pi = __tmp;
 808c6b6:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 808c6b8:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 808c6ba:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 808c6bc:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 808c6be:	f7f6 fed5 	bl	808346c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808c6c2:	a804      	add	r0, sp, #16
 808c6c4:	f7f6 fed2 	bl	808346c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 808c6c8:	e7a2      	b.n	808c610 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 808c6ca:	bf00      	nop
 808c6cc:	0808c795 	.word	0x0808c795

0808c6d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 808c6d0:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 808c6d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808c6d4:	4605      	mov	r5, r0
	  switch (__op)
 808c6d6:	d007      	beq.n	808c6e8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 808c6d8:	2a03      	cmp	r2, #3
 808c6da:	d018      	beq.n	808c70e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 808c6dc:	2a01      	cmp	r2, #1
 808c6de:	d101      	bne.n	808c6e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 808c6e0:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 808c6e2:	6003      	str	r3, [r0, #0]
	}
 808c6e4:	2000      	movs	r0, #0
 808c6e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 808c6e8:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 808c6ea:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 808c6ec:	f7f3 fcd5 	bl	808009a <_Znwj>
 808c6f0:	4604      	mov	r4, r0
 808c6f2:	b150      	cbz	r0, 808c70a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      _Bind(const _Bind&) = default;
 808c6f4:	4631      	mov	r1, r6
 808c6f6:	f7ff fecb 	bl	808c490 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 808c6fa:	6930      	ldr	r0, [r6, #16]
 808c6fc:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 808c700:	b108      	cbz	r0, 808c706 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 808c702:	f002 f9f9 	bl	808eaf8 <strdup>
        type_(type) {
 808c706:	6120      	str	r0, [r4, #16]
 808c708:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 808c70a:	602c      	str	r4, [r5, #0]
	}
 808c70c:	e7ea      	b.n	808c6e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 808c70e:	6804      	ldr	r4, [r0, #0]
 808c710:	2c00      	cmp	r4, #0
 808c712:	d0e7      	beq.n	808c6e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 808c714:	f104 0010 	add.w	r0, r4, #16
 808c718:	f7ff fe07 	bl	808c32a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 808c71c:	4620      	mov	r0, r4
 808c71e:	f7fd f87d 	bl	808981c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 808c722:	2118      	movs	r1, #24
 808c724:	4620      	mov	r0, r4
 808c726:	f000 fe20 	bl	808d36a <_ZdlPvj>
 808c72a:	e7db      	b.n	808c6e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

0808c72c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 808c72c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 808c72e:	2300      	movs	r3, #0
 808c730:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 808c732:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 808c734:	4604      	mov	r4, r0
 808c736:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 808c738:	b12b      	cbz	r3, 808c746 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808c73a:	2202      	movs	r2, #2
 808c73c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 808c73e:	68eb      	ldr	r3, [r5, #12]
 808c740:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 808c742:	68ab      	ldr	r3, [r5, #8]
 808c744:	60a3      	str	r3, [r4, #8]
    }
 808c746:	4620      	mov	r0, r4
 808c748:	bd38      	pop	{r3, r4, r5, pc}

0808c74a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 808c74a:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 808c74c:	b570      	push	{r4, r5, r6, lr}
 808c74e:	4604      	mov	r4, r0
	  switch (__op)
 808c750:	d007      	beq.n	808c762 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 808c752:	2a03      	cmp	r2, #3
 808c754:	d012      	beq.n	808c77c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 808c756:	2a01      	cmp	r2, #1
 808c758:	d101      	bne.n	808c75e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 808c75a:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 808c75c:	6003      	str	r3, [r0, #0]
	}
 808c75e:	2000      	movs	r0, #0
 808c760:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 808c762:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 808c764:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 808c766:	f7f3 fc98 	bl	808009a <_Znwj>
 808c76a:	4605      	mov	r5, r0
 808c76c:	b120      	cbz	r0, 808c778 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 808c76e:	4631      	mov	r1, r6
 808c770:	f7ff ffdc 	bl	808c72c <_ZNSt8functionIFvRKbEEC1ERKS3_>
 808c774:	7c33      	ldrb	r3, [r6, #16]
 808c776:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 808c778:	6025      	str	r5, [r4, #0]
	}
 808c77a:	e7f0      	b.n	808c75e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 808c77c:	6804      	ldr	r4, [r0, #0]
 808c77e:	2c00      	cmp	r4, #0
 808c780:	d0ed      	beq.n	808c75e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 808c782:	4620      	mov	r0, r4
 808c784:	f7fd f84a 	bl	808981c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 808c788:	2114      	movs	r1, #20
 808c78a:	4620      	mov	r0, r4
 808c78c:	f000 fded 	bl	808d36a <_ZdlPvj>
 808c790:	e7e5      	b.n	808c75e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

0808c794 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 808c794:	b5f0      	push	{r4, r5, r6, r7, lr}
 808c796:	4604      	mov	r4, r0
 808c798:	b089      	sub	sp, #36	; 0x24
 808c79a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 808c79c:	a801      	add	r0, sp, #4
 808c79e:	4611      	mov	r1, r2
 808c7a0:	f7ff fe22 	bl	808c3e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 808c7a4:	b1a4      	cbz	r4, 808c7d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 808c7a6:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 808c7a8:	b11d      	cbz	r5, 808c7b2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 808c7aa:	4628      	mov	r0, r5
 808c7ac:	f002 f9a4 	bl	808eaf8 <strdup>
 808c7b0:	4605      	mov	r5, r0
 808c7b2:	a801      	add	r0, sp, #4
 808c7b4:	a903      	add	r1, sp, #12
        type_(type) {
 808c7b6:	9503      	str	r5, [sp, #12]
 808c7b8:	f8ad 4010 	strh.w	r4, [sp, #16]
 808c7bc:	f7ff fe78 	bl	808c4b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 808c7c0:	a803      	add	r0, sp, #12
 808c7c2:	f7ff fdb2 	bl	808c32a <_ZN8particle5ErrorD1Ev>
 808c7c6:	a802      	add	r0, sp, #8
 808c7c8:	f7f6 fe50 	bl	808346c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 808c7cc:	b009      	add	sp, #36	; 0x24
 808c7ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 808c7d0:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 808c7d2:	9d01      	ldr	r5, [sp, #4]
 808c7d4:	e8d5 2f4f 	ldrexb	r2, [r5]
 808c7d8:	2a00      	cmp	r2, #0
 808c7da:	d103      	bne.n	808c7e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 808c7dc:	e8c5 3f41 	strexb	r1, r3, [r5]
 808c7e0:	2900      	cmp	r1, #0
 808c7e2:	d1f7      	bne.n	808c7d4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 808c7e4:	d1ef      	bne.n	808c7c6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 808c7e6:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 808c7e8:	f3bf 8f5b 	dmb	ish
 808c7ec:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 808c7ee:	f3bf 8f5b 	dmb	ish
 808c7f2:	1d2b      	adds	r3, r5, #4
 808c7f4:	e853 6f00 	ldrex	r6, [r3]
 808c7f8:	e843 4200 	strex	r2, r4, [r3]
 808c7fc:	2a00      	cmp	r2, #0
 808c7fe:	d1f9      	bne.n	808c7f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 808c800:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 808c804:	2e00      	cmp	r6, #0
 808c806:	d0de      	beq.n	808c7c6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 808c808:	4620      	mov	r0, r4
 808c80a:	f7fe f8fb 	bl	808aa04 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 808c80e:	4607      	mov	r7, r0
 808c810:	b160      	cbz	r0, 808c82c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 808c812:	4630      	mov	r0, r6
 808c814:	f105 010c 	add.w	r1, r5, #12
 808c818:	f7ff fe15 	bl	808c446 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 808c81c:	4630      	mov	r0, r6
 808c81e:	f7fc fffd 	bl	808981c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 808c822:	2110      	movs	r1, #16
 808c824:	4630      	mov	r0, r6
 808c826:	f000 fda0 	bl	808d36a <_ZdlPvj>
 808c82a:	e7cc      	b.n	808c7c6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 808c82c:	4631      	mov	r1, r6
 808c82e:	a803      	add	r0, sp, #12
 808c830:	f7ff ff7c 	bl	808c72c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 808c834:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 808c836:	2010      	movs	r0, #16
 808c838:	f88d 301c 	strb.w	r3, [sp, #28]
 808c83c:	f7f3 fc2d 	bl	808009a <_Znwj>
 808c840:	4605      	mov	r5, r0
 808c842:	b1d0      	cbz	r0, 808c87a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 808c844:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808c846:	2014      	movs	r0, #20
 808c848:	f7f3 fc27 	bl	808009a <_Znwj>
 808c84c:	4604      	mov	r4, r0
 808c84e:	b178      	cbz	r0, 808c870 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 808c850:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 808c852:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 808c854:	a803      	add	r0, sp, #12
 808c856:	f7ff fbf0 	bl	808c03a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808c85a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 808c85c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808c85e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808c860:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 808c862:	9205      	str	r2, [sp, #20]
 808c864:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 808c866:	60e3      	str	r3, [r4, #12]
 808c868:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 808c86c:	9206      	str	r2, [sp, #24]
 808c86e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 808c870:	4b06      	ldr	r3, [pc, #24]	; (808c88c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808c872:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 808c874:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 808c876:	4b06      	ldr	r3, [pc, #24]	; (808c890 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 808c878:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 808c87a:	a803      	add	r0, sp, #12
 808c87c:	f7fc ffce 	bl	808981c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 808c880:	2200      	movs	r2, #0
 808c882:	4629      	mov	r1, r5
 808c884:	4803      	ldr	r0, [pc, #12]	; (808c894 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 808c886:	f7fe f8c5 	bl	808aa14 <application_thread_invoke>
 808c88a:	e7c7      	b.n	808c81c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 808c88c:	0808c459 	.word	0x0808c459
 808c890:	0808c74b 	.word	0x0808c74b
 808c894:	0808ccf1 	.word	0x0808ccf1

0808c898 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 808c898:	4770      	bx	lr

0808c89a <_ZN9IPAddressD0Ev>:
 808c89a:	b510      	push	{r4, lr}
 808c89c:	4604      	mov	r4, r0
 808c89e:	2108      	movs	r1, #8
 808c8a0:	f000 fd63 	bl	808d36a <_ZdlPvj>
 808c8a4:	4620      	mov	r0, r4
 808c8a6:	bd10      	pop	{r4, pc}

0808c8a8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 808c8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808c8aa:	460e      	mov	r6, r1
 808c8ac:	2400      	movs	r4, #0
 808c8ae:	f100 0708 	add.w	r7, r0, #8
 808c8b2:	1d05      	adds	r5, r0, #4
        return printNumber(val, base) + t;
 808c8b4:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 808c8b8:	220a      	movs	r2, #10
 808c8ba:	4630      	mov	r0, r6
 808c8bc:	f7fe ffff 	bl	808b8be <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 808c8c0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 808c8c2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 808c8c4:	d101      	bne.n	808c8ca <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 808c8c6:	4620      	mov	r0, r4
 808c8c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 808c8ca:	2c00      	cmp	r4, #0
 808c8cc:	d0f2      	beq.n	808c8b4 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 808c8ce:	212e      	movs	r1, #46	; 0x2e
 808c8d0:	4630      	mov	r0, r6
 808c8d2:	f7fe ffd1 	bl	808b878 <_ZN5Print5printEc>
 808c8d6:	4404      	add	r4, r0
 808c8d8:	e7ec      	b.n	808c8b4 <_ZNK9IPAddress7printToER5Print+0xc>
	...

0808c8dc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 808c8dc:	4a02      	ldr	r2, [pc, #8]	; (808c8e8 <_ZN9IPAddressC1Ev+0xc>)
 808c8de:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 808c8e0:	2200      	movs	r2, #0
 808c8e2:	6042      	str	r2, [r0, #4]
}
 808c8e4:	4770      	bx	lr
 808c8e6:	bf00      	nop
 808c8e8:	08094384 	.word	0x08094384

0808c8ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 808c8ec:	4a02      	ldr	r2, [pc, #8]	; (808c8f8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 808c8ee:	6002      	str	r2, [r0, #0]
    memcpy(&this->address, &address, sizeof(address));
 808c8f0:	680a      	ldr	r2, [r1, #0]
 808c8f2:	6042      	str	r2, [r0, #4]
}
 808c8f4:	4770      	bx	lr
 808c8f6:	bf00      	nop
 808c8f8:	08094384 	.word	0x08094384

0808c8fc <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 808c8fc:	4a01      	ldr	r2, [pc, #4]	; (808c904 <_ZN9IPAddressC1Em+0x8>)
    address.ipv4 = ipv4;
 808c8fe:	e9c0 2100 	strd	r2, r1, [r0]
}
 808c902:	4770      	bx	lr
 808c904:	08094384 	.word	0x08094384

0808c908 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 808c908:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 808c90a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 808c90e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 808c912:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 808c916:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 808c91a:	6044      	str	r4, [r0, #4]
}
 808c91c:	bd10      	pop	{r4, pc}
	...

0808c920 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 808c920:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808c922:	4d04      	ldr	r5, [pc, #16]	; (808c934 <_ZN9IPAddressC1Ehhhh+0x14>)
 808c924:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 808c926:	f89d 5018 	ldrb.w	r5, [sp, #24]
 808c92a:	9500      	str	r5, [sp, #0]
 808c92c:	f7ff ffec 	bl	808c908 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 808c930:	b003      	add	sp, #12
 808c932:	bd30      	pop	{r4, r5, pc}
 808c934:	08094384 	.word	0x08094384

0808c938 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 808c938:	7441      	strb	r1, [r0, #17]
}
 808c93a:	4770      	bx	lr

0808c93c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 808c93c:	4770      	bx	lr

0808c93e <_ZN9USBSerial4readEv>:
{
 808c93e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 808c940:	2100      	movs	r1, #0
 808c942:	7c00      	ldrb	r0, [r0, #16]
 808c944:	f7fe f816 	bl	808a974 <HAL_USB_USART_Receive_Data>
}
 808c948:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 808c94c:	bd08      	pop	{r3, pc}

0808c94e <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 808c94e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 808c950:	2101      	movs	r1, #1
 808c952:	7c00      	ldrb	r0, [r0, #16]
 808c954:	f7fe f80e 	bl	808a974 <HAL_USB_USART_Receive_Data>
}
 808c958:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 808c95c:	bd08      	pop	{r3, pc}

0808c95e <_ZN9USBSerial17availableForWriteEv>:
{
 808c95e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 808c960:	7c00      	ldrb	r0, [r0, #16]
 808c962:	f7fd ffff 	bl	808a964 <HAL_USB_USART_Available_Data_For_Write>
}
 808c966:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808c96a:	bd08      	pop	{r3, pc}

0808c96c <_ZN9USBSerial9availableEv>:
{
 808c96c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 808c96e:	7c00      	ldrb	r0, [r0, #16]
 808c970:	f7fd fff0 	bl	808a954 <HAL_USB_USART_Available_Data>
}
 808c974:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808c978:	bd08      	pop	{r3, pc}

0808c97a <_ZN9USBSerial5writeEh>:
{
 808c97a:	b538      	push	{r3, r4, r5, lr}
 808c97c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808c97e:	7c00      	ldrb	r0, [r0, #16]
{
 808c980:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808c982:	f7fd ffef 	bl	808a964 <HAL_USB_USART_Available_Data_For_Write>
 808c986:	2800      	cmp	r0, #0
 808c988:	dc01      	bgt.n	808c98e <_ZN9USBSerial5writeEh+0x14>
 808c98a:	7c60      	ldrb	r0, [r4, #17]
 808c98c:	b128      	cbz	r0, 808c99a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 808c98e:	4629      	mov	r1, r5
 808c990:	7c20      	ldrb	r0, [r4, #16]
 808c992:	f7fd fff7 	bl	808a984 <HAL_USB_USART_Send_Data>
 808c996:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 808c99a:	bd38      	pop	{r3, r4, r5, pc}

0808c99c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 808c99c:	7c00      	ldrb	r0, [r0, #16]
 808c99e:	f7fd bff9 	b.w	808a994 <HAL_USB_USART_Flush_Data>

0808c9a2 <_ZN9USBSerialD0Ev>:
 808c9a2:	b510      	push	{r4, lr}
 808c9a4:	4604      	mov	r4, r0
 808c9a6:	2114      	movs	r1, #20
 808c9a8:	f000 fcdf 	bl	808d36a <_ZdlPvj>
 808c9ac:	4620      	mov	r0, r4
 808c9ae:	bd10      	pop	{r4, pc}

0808c9b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 808c9b0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 808c9b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808c9b6:	4604      	mov	r4, r0
 808c9b8:	4608      	mov	r0, r1
 808c9ba:	2100      	movs	r1, #0
 808c9bc:	e9c4 1301 	strd	r1, r3, [r4, #4]
 808c9c0:	4b04      	ldr	r3, [pc, #16]	; (808c9d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 808c9c2:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 808c9c4:	6023      	str	r3, [r4, #0]
  _blocking = true;
 808c9c6:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 808c9c8:	4611      	mov	r1, r2
  _blocking = true;
 808c9ca:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 808c9cc:	f7fd ffb2 	bl	808a934 <HAL_USB_USART_Init>
}
 808c9d0:	4620      	mov	r0, r4
 808c9d2:	bd10      	pop	{r4, pc}
 808c9d4:	08094398 	.word	0x08094398

0808c9d8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 808c9d8:	2200      	movs	r2, #0
 808c9da:	7c00      	ldrb	r0, [r0, #16]
 808c9dc:	f7fd bfb2 	b.w	808a944 <HAL_USB_USART_Begin>

0808c9e0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 808c9e0:	b510      	push	{r4, lr}
 808c9e2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 808c9e4:	2214      	movs	r2, #20
 808c9e6:	2100      	movs	r1, #0
 808c9e8:	f002 f83a 	bl	808ea60 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 808c9ec:	4b05      	ldr	r3, [pc, #20]	; (808ca04 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 808c9ee:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 808c9f0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 808c9f2:	4b05      	ldr	r3, [pc, #20]	; (808ca08 <_Z19acquireSerialBufferv+0x28>)
 808c9f4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808c9f6:	f240 1301 	movw	r3, #257	; 0x101
 808c9fa:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 808c9fc:	2381      	movs	r3, #129	; 0x81
 808c9fe:	8223      	strh	r3, [r4, #16]
}
 808ca00:	bd10      	pop	{r4, pc}
 808ca02:	bf00      	nop
 808ca04:	20000f18 	.word	0x20000f18
 808ca08:	20001019 	.word	0x20001019

0808ca0c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 808ca0c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 808ca0e:	4d0f      	ldr	r5, [pc, #60]	; (808ca4c <_Z16_fetch_usbserialv+0x40>)
{
 808ca10:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 808ca12:	a801      	add	r0, sp, #4
 808ca14:	f7ff ffe4 	bl	808c9e0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 808ca18:	7829      	ldrb	r1, [r5, #0]
 808ca1a:	f3bf 8f5b 	dmb	ish
 808ca1e:	f011 0401 	ands.w	r4, r1, #1
 808ca22:	d110      	bne.n	808ca46 <_Z16_fetch_usbserialv+0x3a>
 808ca24:	4628      	mov	r0, r5
 808ca26:	f7f3 fb3e 	bl	80800a6 <__cxa_guard_acquire>
 808ca2a:	b160      	cbz	r0, 808ca46 <_Z16_fetch_usbserialv+0x3a>
 808ca2c:	4621      	mov	r1, r4
 808ca2e:	aa01      	add	r2, sp, #4
 808ca30:	4807      	ldr	r0, [pc, #28]	; (808ca50 <_Z16_fetch_usbserialv+0x44>)
 808ca32:	f7ff ffbd 	bl	808c9b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 808ca36:	4628      	mov	r0, r5
 808ca38:	f7f3 fb3a 	bl	80800b0 <__cxa_guard_release>
 808ca3c:	4a05      	ldr	r2, [pc, #20]	; (808ca54 <_Z16_fetch_usbserialv+0x48>)
 808ca3e:	4906      	ldr	r1, [pc, #24]	; (808ca58 <_Z16_fetch_usbserialv+0x4c>)
 808ca40:	4803      	ldr	r0, [pc, #12]	; (808ca50 <_Z16_fetch_usbserialv+0x44>)
 808ca42:	f000 fc8d 	bl	808d360 <__aeabi_atexit>
	return _usbserial;
}
 808ca46:	4802      	ldr	r0, [pc, #8]	; (808ca50 <_Z16_fetch_usbserialv+0x44>)
 808ca48:	b007      	add	sp, #28
 808ca4a:	bd30      	pop	{r4, r5, pc}
 808ca4c:	20000ee8 	.word	0x20000ee8
 808ca50:	20000ef0 	.word	0x20000ef0
 808ca54:	20000328 	.word	0x20000328
 808ca58:	0808c93d 	.word	0x0808c93d

0808ca5c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 808ca5c:	b510      	push	{r4, lr}
 808ca5e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 808ca60:	2214      	movs	r2, #20
 808ca62:	2100      	movs	r1, #0
 808ca64:	f001 fffc 	bl	808ea60 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 808ca68:	4b05      	ldr	r3, [pc, #20]	; (808ca80 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 808ca6a:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 808ca6c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 808ca6e:	4b05      	ldr	r3, [pc, #20]	; (808ca84 <_Z23acquireUSBSerial1Bufferv+0x28>)
 808ca70:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808ca72:	f240 1301 	movw	r3, #257	; 0x101
 808ca76:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 808ca78:	2381      	movs	r3, #129	; 0x81
 808ca7a:	8223      	strh	r3, [r4, #16]
}
 808ca7c:	bd10      	pop	{r4, pc}
 808ca7e:	bf00      	nop
 808ca80:	2000109a 	.word	0x2000109a
 808ca84:	2000119b 	.word	0x2000119b

0808ca88 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 808ca88:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808ca8a:	4c0f      	ldr	r4, [pc, #60]	; (808cac8 <_Z17_fetch_usbserial1v+0x40>)
{
 808ca8c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 808ca8e:	a801      	add	r0, sp, #4
 808ca90:	f7ff ffe4 	bl	808ca5c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808ca94:	7823      	ldrb	r3, [r4, #0]
 808ca96:	f3bf 8f5b 	dmb	ish
 808ca9a:	07db      	lsls	r3, r3, #31
 808ca9c:	d410      	bmi.n	808cac0 <_Z17_fetch_usbserial1v+0x38>
 808ca9e:	4620      	mov	r0, r4
 808caa0:	f7f3 fb01 	bl	80800a6 <__cxa_guard_acquire>
 808caa4:	b160      	cbz	r0, 808cac0 <_Z17_fetch_usbserial1v+0x38>
 808caa6:	2101      	movs	r1, #1
 808caa8:	aa01      	add	r2, sp, #4
 808caaa:	4808      	ldr	r0, [pc, #32]	; (808cacc <_Z17_fetch_usbserial1v+0x44>)
 808caac:	f7ff ff80 	bl	808c9b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 808cab0:	4620      	mov	r0, r4
 808cab2:	f7f3 fafd 	bl	80800b0 <__cxa_guard_release>
 808cab6:	4a06      	ldr	r2, [pc, #24]	; (808cad0 <_Z17_fetch_usbserial1v+0x48>)
 808cab8:	4906      	ldr	r1, [pc, #24]	; (808cad4 <_Z17_fetch_usbserial1v+0x4c>)
 808caba:	4804      	ldr	r0, [pc, #16]	; (808cacc <_Z17_fetch_usbserial1v+0x44>)
 808cabc:	f000 fc50 	bl	808d360 <__aeabi_atexit>
  return _usbserial1;
}
 808cac0:	4802      	ldr	r0, [pc, #8]	; (808cacc <_Z17_fetch_usbserial1v+0x44>)
 808cac2:	b006      	add	sp, #24
 808cac4:	bd10      	pop	{r4, pc}
 808cac6:	bf00      	nop
 808cac8:	20000eec 	.word	0x20000eec
 808cacc:	20000f04 	.word	0x20000f04
 808cad0:	20000328 	.word	0x20000328
 808cad4:	0808c93d 	.word	0x0808c93d

0808cad8 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 808cad8:	4700      	bx	r0
	...

0808cadc <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 808cadc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 808cae0:	2400      	movs	r4, #0
{
 808cae2:	461d      	mov	r5, r3
 808cae4:	460f      	mov	r7, r1
 808cae6:	4690      	mov	r8, r2
 808cae8:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
 808caea:	f7fd fd93 	bl	808a614 <HAL_Interrupts_Detach>
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 808caee:	2304      	movs	r3, #4
  if (priority >= 0) {
 808caf0:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 808caf2:	f88d 300c 	strb.w	r3, [sp, #12]
    extra.IRQChannelSubPriority = subpriority;
 808caf6:	bfa8      	it	ge
 808caf8:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
    HAL_InterruptExtraConfiguration extra = {0};
 808cafc:	f8ad 400d 	strh.w	r4, [sp, #13]
 808cb00:	f88d 400f 	strb.w	r4, [sp, #15]
    return &extra;
 808cb04:	bfa4      	itt	ge
 808cb06:	ac03      	addge	r4, sp, #12
    extra.IRQChannelSubPriority = subpriority;
 808cb08:	f88d 300e 	strbge.w	r3, [sp, #14]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 808cb0c:	463a      	mov	r2, r7
 808cb0e:	4643      	mov	r3, r8
 808cb10:	4630      	mov	r0, r6
 808cb12:	4906      	ldr	r1, [pc, #24]	; (808cb2c <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
 808cb14:	9400      	str	r4, [sp, #0]
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 808cb16:	bfa8      	it	ge
 808cb18:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 808cb1c:	f7fd fd72 	bl	808a604 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
 808cb20:	fab0 f080 	clz	r0, r0
 808cb24:	0940      	lsrs	r0, r0, #5
 808cb26:	b004      	add	sp, #16
 808cb28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808cb2c:	0808cad9 	.word	0x0808cad9

0808cb30 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 808cb30:	2200      	movs	r2, #0
 808cb32:	6840      	ldr	r0, [r0, #4]
 808cb34:	4611      	mov	r1, r2
 808cb36:	f7fd bfc5 	b.w	808aac4 <network_ready>

0808cb3a <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 808cb3a:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        HAL_IPAddress ip = {0};
 808cb3c:	2600      	movs	r6, #0
    IPAddress resolve(const char* name)
 808cb3e:	b085      	sub	sp, #20
 808cb40:	4604      	mov	r4, r0
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808cb42:	4610      	mov	r0, r2
    IPAddress resolve(const char* name)
 808cb44:	460f      	mov	r7, r1
 808cb46:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 808cb48:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808cb4a:	f002 fd53 	bl	808f5f4 <strlen>
 808cb4e:	687b      	ldr	r3, [r7, #4]
 808cb50:	b281      	uxth	r1, r0
 808cb52:	9600      	str	r6, [sp, #0]
 808cb54:	4628      	mov	r0, r5
 808cb56:	aa03      	add	r2, sp, #12
 808cb58:	f7fd fedc 	bl	808a914 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 808cb5c:	b130      	cbz	r0, 808cb6c <_ZN5spark13CellularClass7resolveEPKc+0x32>
 808cb5e:	4631      	mov	r1, r6
 808cb60:	4620      	mov	r0, r4
 808cb62:	f7ff fecb 	bl	808c8fc <_ZN9IPAddressC1Em>
    }
 808cb66:	4620      	mov	r0, r4
 808cb68:	b005      	add	sp, #20
 808cb6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 808cb6c:	4620      	mov	r0, r4
 808cb6e:	a903      	add	r1, sp, #12
 808cb70:	f7ff febc 	bl	808c8ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 808cb74:	e7f7      	b.n	808cb66 <_ZN5spark13CellularClass7resolveEPKc+0x2c>

0808cb76 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 808cb76:	2200      	movs	r2, #0
 808cb78:	6840      	ldr	r0, [r0, #4]
 808cb7a:	4611      	mov	r1, r2
 808cb7c:	f7fd bfc2 	b.w	808ab04 <network_listening>

0808cb80 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 808cb80:	2200      	movs	r2, #0
 808cb82:	6840      	ldr	r0, [r0, #4]
 808cb84:	4611      	mov	r1, r2
 808cb86:	f7fd bfcd 	b.w	808ab24 <network_get_listen_timeout>

0808cb8a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 808cb8a:	2200      	movs	r2, #0
 808cb8c:	6840      	ldr	r0, [r0, #4]
 808cb8e:	f7fd bfc1 	b.w	808ab14 <network_set_listen_timeout>

0808cb92 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 808cb92:	2200      	movs	r2, #0
 808cb94:	6840      	ldr	r0, [r0, #4]
 808cb96:	f081 0101 	eor.w	r1, r1, #1
 808cb9a:	f7fd bfab 	b.w	808aaf4 <network_listen>

0808cb9e <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
 808cb9e:	2300      	movs	r3, #0
 808cba0:	6840      	ldr	r0, [r0, #4]
 808cba2:	461a      	mov	r2, r3
 808cba4:	4619      	mov	r1, r3
 808cba6:	f7fd bf95 	b.w	808aad4 <network_on>

0808cbaa <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 808cbaa:	2200      	movs	r2, #0
 808cbac:	6840      	ldr	r0, [r0, #4]
 808cbae:	4611      	mov	r1, r2
 808cbb0:	f7fd bf78 	b.w	808aaa4 <network_connecting>

0808cbb4 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 808cbb4:	2200      	movs	r2, #0
 808cbb6:	2102      	movs	r1, #2
 808cbb8:	6840      	ldr	r0, [r0, #4]
 808cbba:	f7fd bf7b 	b.w	808aab4 <network_disconnect>

0808cbbe <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 808cbbe:	2300      	movs	r3, #0
 808cbc0:	6840      	ldr	r0, [r0, #4]
 808cbc2:	461a      	mov	r2, r3
 808cbc4:	f7fd bf66 	b.w	808aa94 <network_connect>

0808cbc8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 808cbc8:	b510      	push	{r4, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 808cbca:	2428      	movs	r4, #40	; 0x28
 808cbcc:	4b07      	ldr	r3, [pc, #28]	; (808cbec <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 808cbce:	4622      	mov	r2, r4
 808cbd0:	4618      	mov	r0, r3
 808cbd2:	2100      	movs	r1, #0
 808cbd4:	f001 ff44 	bl	808ea60 <memset>
        cid = -1;
 808cbd8:	f04f 32ff 	mov.w	r2, #4294967295
 808cbdc:	6042      	str	r2, [r0, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 808cbde:	2204      	movs	r2, #4
 808cbe0:	4b03      	ldr	r3, [pc, #12]	; (808cbf0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
 808cbe2:	8004      	strh	r4, [r0, #0]
 808cbe4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 808cbe6:	4a03      	ldr	r2, [pc, #12]	; (808cbf4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
 808cbe8:	601a      	str	r2, [r3, #0]
 808cbea:	bd10      	pop	{r4, pc}
 808cbec:	20001224 	.word	0x20001224
 808cbf0:	2000121c 	.word	0x2000121c
 808cbf4:	080943c8 	.word	0x080943c8

0808cbf8 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 808cbf8:	7441      	strb	r1, [r0, #17]
}
 808cbfa:	4770      	bx	lr

0808cbfc <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 808cbfc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 808cbfe:	7c00      	ldrb	r0, [r0, #16]
 808cc00:	f7fd fdc0 	bl	808a784 <hal_usart_available_data_for_write>
}
 808cc04:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808cc08:	bd08      	pop	{r3, pc}

0808cc0a <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 808cc0a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 808cc0c:	7c00      	ldrb	r0, [r0, #16]
 808cc0e:	f7fd fd91 	bl	808a734 <hal_usart_available>
}
 808cc12:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808cc16:	bd08      	pop	{r3, pc}

0808cc18 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 808cc18:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 808cc1a:	7c00      	ldrb	r0, [r0, #16]
 808cc1c:	f7fd fd9a 	bl	808a754 <hal_usart_peek>
}
 808cc20:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 808cc24:	bd08      	pop	{r3, pc}

0808cc26 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 808cc26:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 808cc28:	7c00      	ldrb	r0, [r0, #16]
 808cc2a:	f7fd fd8b 	bl	808a744 <hal_usart_read>
}
 808cc2e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 808cc32:	bd08      	pop	{r3, pc}

0808cc34 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 808cc34:	7c00      	ldrb	r0, [r0, #16]
 808cc36:	f7fd bd95 	b.w	808a764 <hal_usart_flush>

0808cc3a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 808cc3a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 808cc3c:	7c46      	ldrb	r6, [r0, #17]
{
 808cc3e:	4604      	mov	r4, r0
 808cc40:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 808cc42:	b12e      	cbz	r6, 808cc50 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 808cc44:	4629      	mov	r1, r5
 808cc46:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 808cc48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 808cc4c:	f7fd bd6a 	b.w	808a724 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 808cc50:	7c00      	ldrb	r0, [r0, #16]
 808cc52:	f7fd fd97 	bl	808a784 <hal_usart_available_data_for_write>
 808cc56:	2800      	cmp	r0, #0
 808cc58:	dcf4      	bgt.n	808cc44 <_ZN11USARTSerial5writeEh+0xa>
}
 808cc5a:	4630      	mov	r0, r6
 808cc5c:	bd70      	pop	{r4, r5, r6, pc}
	...

0808cc60 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 808cc60:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 808cc64:	b510      	push	{r4, lr}
 808cc66:	4604      	mov	r4, r0
 808cc68:	4608      	mov	r0, r1
 808cc6a:	4611      	mov	r1, r2
 808cc6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 808cc70:	e9c4 c201 	strd	ip, r2, [r4, #4]
 808cc74:	4a04      	ldr	r2, [pc, #16]	; (808cc88 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 808cc76:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 808cc78:	6022      	str	r2, [r4, #0]
  _blocking = true;
 808cc7a:	2201      	movs	r2, #1
 808cc7c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 808cc7e:	461a      	mov	r2, r3
 808cc80:	f7fd fd48 	bl	808a714 <hal_usart_init>
}
 808cc84:	4620      	mov	r0, r4
 808cc86:	bd10      	pop	{r4, pc}
 808cc88:	080943fc 	.word	0x080943fc

0808cc8c <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 808cc8c:	2300      	movs	r3, #0
 808cc8e:	7c00      	ldrb	r0, [r0, #16]
 808cc90:	f7fd bd80 	b.w	808a794 <hal_usart_begin_config>

0808cc94 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 808cc94:	2200      	movs	r2, #0
 808cc96:	f7ff bff9 	b.w	808cc8c <_ZN11USARTSerial5beginEmm>

0808cc9a <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 808cc9a:	7c00      	ldrb	r0, [r0, #16]
 808cc9c:	f7fd bd6a 	b.w	808a774 <hal_usart_is_enabled>

0808cca0 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 808cca0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 808cca2:	4d0d      	ldr	r5, [pc, #52]	; (808ccd8 <_Z22__fetch_global_Serial1v+0x38>)
 808cca4:	7829      	ldrb	r1, [r5, #0]
 808cca6:	f3bf 8f5b 	dmb	ish
 808ccaa:	f011 0401 	ands.w	r4, r1, #1
 808ccae:	d111      	bne.n	808ccd4 <_Z22__fetch_global_Serial1v+0x34>
 808ccb0:	4628      	mov	r0, r5
 808ccb2:	f7f3 f9f8 	bl	80800a6 <__cxa_guard_acquire>
 808ccb6:	b168      	cbz	r0, 808ccd4 <_Z22__fetch_global_Serial1v+0x34>
 808ccb8:	4621      	mov	r1, r4
 808ccba:	4a08      	ldr	r2, [pc, #32]	; (808ccdc <_Z22__fetch_global_Serial1v+0x3c>)
 808ccbc:	4b08      	ldr	r3, [pc, #32]	; (808cce0 <_Z22__fetch_global_Serial1v+0x40>)
 808ccbe:	4809      	ldr	r0, [pc, #36]	; (808cce4 <_Z22__fetch_global_Serial1v+0x44>)
 808ccc0:	f7ff ffce 	bl	808cc60 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 808ccc4:	4628      	mov	r0, r5
 808ccc6:	f7f3 f9f3 	bl	80800b0 <__cxa_guard_release>
 808ccca:	4a07      	ldr	r2, [pc, #28]	; (808cce8 <_Z22__fetch_global_Serial1v+0x48>)
 808cccc:	4907      	ldr	r1, [pc, #28]	; (808ccec <_Z22__fetch_global_Serial1v+0x4c>)
 808ccce:	4805      	ldr	r0, [pc, #20]	; (808cce4 <_Z22__fetch_global_Serial1v+0x44>)
 808ccd0:	f000 fb46 	bl	808d360 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 808ccd4:	4803      	ldr	r0, [pc, #12]	; (808cce4 <_Z22__fetch_global_Serial1v+0x44>)
 808ccd6:	bd38      	pop	{r3, r4, r5, pc}
 808ccd8:	2000124c 	.word	0x2000124c
 808ccdc:	20001250 	.word	0x20001250
 808cce0:	200012d4 	.word	0x200012d4
 808cce4:	20001358 	.word	0x20001358
 808cce8:	20000328 	.word	0x20000328
 808ccec:	08080b51 	.word	0x08080b51

0808ccf0 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 808ccf0:	b510      	push	{r4, lr}
      if (_M_empty())
 808ccf2:	6883      	ldr	r3, [r0, #8]
 808ccf4:	4604      	mov	r4, r0
 808ccf6:	b90b      	cbnz	r3, 808ccfc <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 808ccf8:	f000 fb3b 	bl	808d372 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808ccfc:	68c3      	ldr	r3, [r0, #12]
 808ccfe:	4798      	blx	r3
      if (_M_manager)
 808cd00:	68a3      	ldr	r3, [r4, #8]
 808cd02:	b11b      	cbz	r3, 808cd0c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 808cd04:	2203      	movs	r2, #3
 808cd06:	4621      	mov	r1, r4
 808cd08:	4620      	mov	r0, r4
 808cd0a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 808cd0c:	4620      	mov	r0, r4
}
 808cd0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 808cd12:	2110      	movs	r1, #16
 808cd14:	f000 bb29 	b.w	808d36a <_ZdlPvj>

0808cd18 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 808cd18:	4770      	bx	lr

0808cd1a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 808cd1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808cd1c:	4606      	mov	r6, r0
 808cd1e:	4615      	mov	r5, r2
 808cd20:	460c      	mov	r4, r1
 808cd22:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 808cd24:	42bc      	cmp	r4, r7
 808cd26:	d006      	beq.n	808cd36 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 808cd28:	6833      	ldr	r3, [r6, #0]
 808cd2a:	4630      	mov	r0, r6
 808cd2c:	689b      	ldr	r3, [r3, #8]
 808cd2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 808cd32:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 808cd34:	e7f6      	b.n	808cd24 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 808cd36:	4628      	mov	r0, r5
 808cd38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808cd3a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 808cd3a:	2200      	movs	r2, #0
 808cd3c:	7c00      	ldrb	r0, [r0, #16]
 808cd3e:	f7fd bd49 	b.w	808a7d4 <hal_i2c_write>

0808cd42 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 808cd42:	2100      	movs	r1, #0
 808cd44:	7c00      	ldrb	r0, [r0, #16]
 808cd46:	f7fd bd4d 	b.w	808a7e4 <hal_i2c_available>

0808cd4a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 808cd4a:	2100      	movs	r1, #0
 808cd4c:	7c00      	ldrb	r0, [r0, #16]
 808cd4e:	f7fd bd51 	b.w	808a7f4 <hal_i2c_read>

0808cd52 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 808cd52:	2100      	movs	r1, #0
 808cd54:	7c00      	ldrb	r0, [r0, #16]
 808cd56:	f7fd bd55 	b.w	808a804 <hal_i2c_peek>

0808cd5a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 808cd5a:	2100      	movs	r1, #0
 808cd5c:	7c00      	ldrb	r0, [r0, #16]
 808cd5e:	f7fd bd59 	b.w	808a814 <hal_i2c_flush>

0808cd62 <_ZN7TwoWireD0Ev>:
 808cd62:	b510      	push	{r4, lr}
 808cd64:	4604      	mov	r4, r0
 808cd66:	2114      	movs	r1, #20
 808cd68:	f000 faff 	bl	808d36a <_ZdlPvj>
 808cd6c:	4620      	mov	r0, r4
 808cd6e:	bd10      	pop	{r4, pc}

0808cd70 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 808cd70:	b510      	push	{r4, lr}
 808cd72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808cd76:	4604      	mov	r4, r0
 808cd78:	4608      	mov	r0, r1
 808cd7a:	2100      	movs	r1, #0
 808cd7c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 808cd80:	4b03      	ldr	r3, [pc, #12]	; (808cd90 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 808cd82:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 808cd84:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 808cd86:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 808cd88:	f7fd fd54 	bl	808a834 <hal_i2c_init>
}
 808cd8c:	4620      	mov	r0, r4
 808cd8e:	bd10      	pop	{r4, pc}
 808cd90:	0809442c 	.word	0x0809442c

0808cd94 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 808cd94:	2300      	movs	r3, #0
 808cd96:	7c00      	ldrb	r0, [r0, #16]
 808cd98:	461a      	mov	r2, r3
 808cd9a:	4619      	mov	r1, r3
 808cd9c:	f7fd bd02 	b.w	808a7a4 <hal_i2c_begin>

0808cda0 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 808cda0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 808cda2:	2200      	movs	r2, #0
 808cda4:	2314      	movs	r3, #20
 808cda6:	e9cd 2201 	strd	r2, r2, [sp, #4]
 808cdaa:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 808cdae:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 808cdb0:	7c00      	ldrb	r0, [r0, #16]
 808cdb2:	f88d 3008 	strb.w	r3, [sp, #8]
 808cdb6:	684b      	ldr	r3, [r1, #4]
 808cdb8:	9303      	str	r3, [sp, #12]
 808cdba:	68cb      	ldr	r3, [r1, #12]
 808cdbc:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 808cdbe:	7a0b      	ldrb	r3, [r1, #8]
 808cdc0:	a901      	add	r1, sp, #4
 808cdc2:	9305      	str	r3, [sp, #20]
 808cdc4:	f7fd fd4e 	bl	808a864 <hal_i2c_request_ex>
}
 808cdc8:	b007      	add	sp, #28
 808cdca:	f85d fb04 	ldr.w	pc, [sp], #4

0808cdce <_ZN7TwoWire11requestFromEhjh>:
{
 808cdce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 808cdd0:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808cdd2:	f88d 1000 	strb.w	r1, [sp]
 808cdd6:	f04f 0164 	mov.w	r1, #100	; 0x64
 808cdda:	bf18      	it	ne
 808cddc:	2301      	movne	r3, #1
 808cdde:	9103      	str	r1, [sp, #12]
 808cde0:	4669      	mov	r1, sp
    size_ = size;
 808cde2:	9201      	str	r2, [sp, #4]
 808cde4:	f88d 3008 	strb.w	r3, [sp, #8]
 808cde8:	f7ff ffda 	bl	808cda0 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 808cdec:	b005      	add	sp, #20
 808cdee:	f85d fb04 	ldr.w	pc, [sp], #4

0808cdf2 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 808cdf2:	2301      	movs	r3, #1
 808cdf4:	f7ff bfeb 	b.w	808cdce <_ZN7TwoWire11requestFromEhjh>

0808cdf8 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 808cdf8:	2200      	movs	r2, #0
 808cdfa:	7c00      	ldrb	r0, [r0, #16]
 808cdfc:	f7fd bcda 	b.w	808a7b4 <hal_i2c_begin_transmission>

0808ce00 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 808ce00:	b2c9      	uxtb	r1, r1
 808ce02:	f7ff bff9 	b.w	808cdf8 <_ZN7TwoWire17beginTransmissionEh>

0808ce06 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
 808ce06:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 808ce08:	2200      	movs	r2, #0
 808ce0a:	460b      	mov	r3, r1
 808ce0c:	e9cd 2201 	strd	r2, r2, [sp, #4]
 808ce10:	2214      	movs	r2, #20
 808ce12:	f8ad 2004 	strh.w	r2, [sp, #4]
    };
 808ce16:	685a      	ldr	r2, [r3, #4]
      .address = address_,
 808ce18:	7809      	ldrb	r1, [r1, #0]
    };
 808ce1a:	9203      	str	r2, [sp, #12]
 808ce1c:	68da      	ldr	r2, [r3, #12]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 808ce1e:	7a1b      	ldrb	r3, [r3, #8]
    };
 808ce20:	9204      	str	r2, [sp, #16]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
 808ce22:	7c00      	ldrb	r0, [r0, #16]
 808ce24:	aa01      	add	r2, sp, #4
 808ce26:	f88d 1008 	strb.w	r1, [sp, #8]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 808ce2a:	9305      	str	r3, [sp, #20]
 808ce2c:	f7fd fcc2 	bl	808a7b4 <hal_i2c_begin_transmission>
}
 808ce30:	b007      	add	sp, #28
 808ce32:	f85d fb04 	ldr.w	pc, [sp], #4

0808ce36 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 808ce36:	2200      	movs	r2, #0
 808ce38:	7c00      	ldrb	r0, [r0, #16]
 808ce3a:	f7fd bcc3 	b.w	808a7c4 <hal_i2c_end_transmission>

0808ce3e <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 808ce3e:	2101      	movs	r1, #1
 808ce40:	f7ff bff9 	b.w	808ce36 <_ZN7TwoWire15endTransmissionEh>

0808ce44 <_ZN7TwoWire9isEnabledEv>:
  hal_i2c_set_callback_on_requested(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return hal_i2c_is_enabled(_i2c, NULL);
 808ce44:	2100      	movs	r1, #0
 808ce46:	7c00      	ldrb	r0, [r0, #16]
 808ce48:	f7fd bcec 	b.w	808a824 <hal_i2c_is_enabled>

0808ce4c <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 808ce4c:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
 808ce4e:	2100      	movs	r1, #0
 808ce50:	7c00      	ldrb	r0, [r0, #16]
 808ce52:	f7fd fcf7 	bl	808a844 <hal_i2c_lock>
}
 808ce56:	fab0 f080 	clz	r0, r0
 808ce5a:	0940      	lsrs	r0, r0, #5
 808ce5c:	bd08      	pop	{r3, pc}

0808ce5e <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 808ce5e:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
 808ce60:	2100      	movs	r1, #0
 808ce62:	7c00      	ldrb	r0, [r0, #16]
 808ce64:	f7fd fcf6 	bl	808a854 <hal_i2c_unlock>
}
 808ce68:	fab0 f080 	clz	r0, r0
 808ce6c:	0940      	lsrs	r0, r0, #5
 808ce6e:	bd08      	pop	{r3, pc}

0808ce70 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 808ce70:	2300      	movs	r3, #0
 808ce72:	6840      	ldr	r0, [r0, #4]
 808ce74:	461a      	mov	r2, r3
 808ce76:	f7fd be0d 	b.w	808aa94 <network_connect>

0808ce7a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 808ce7a:	2200      	movs	r2, #0
 808ce7c:	2102      	movs	r1, #2
 808ce7e:	6840      	ldr	r0, [r0, #4]
 808ce80:	f7fd be18 	b.w	808aab4 <network_disconnect>

0808ce84 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 808ce84:	2200      	movs	r2, #0
 808ce86:	6840      	ldr	r0, [r0, #4]
 808ce88:	4611      	mov	r1, r2
 808ce8a:	f7fd be0b 	b.w	808aaa4 <network_connecting>

0808ce8e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 808ce8e:	2200      	movs	r2, #0
 808ce90:	6840      	ldr	r0, [r0, #4]
 808ce92:	4611      	mov	r1, r2
 808ce94:	f7fd be16 	b.w	808aac4 <network_ready>

0808ce98 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 808ce98:	2300      	movs	r3, #0
 808ce9a:	6840      	ldr	r0, [r0, #4]
 808ce9c:	461a      	mov	r2, r3
 808ce9e:	4619      	mov	r1, r3
 808cea0:	f7fd be18 	b.w	808aad4 <network_on>

0808cea4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 808cea4:	2300      	movs	r3, #0
 808cea6:	6840      	ldr	r0, [r0, #4]
 808cea8:	461a      	mov	r2, r3
 808ceaa:	4619      	mov	r1, r3
 808ceac:	f7fd be1a 	b.w	808aae4 <network_off>

0808ceb0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 808ceb0:	2200      	movs	r2, #0
 808ceb2:	6840      	ldr	r0, [r0, #4]
 808ceb4:	f081 0101 	eor.w	r1, r1, #1
 808ceb8:	f7fd be1c 	b.w	808aaf4 <network_listen>

0808cebc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 808cebc:	2200      	movs	r2, #0
 808cebe:	6840      	ldr	r0, [r0, #4]
 808cec0:	f7fd be28 	b.w	808ab14 <network_set_listen_timeout>

0808cec4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 808cec4:	2200      	movs	r2, #0
 808cec6:	6840      	ldr	r0, [r0, #4]
 808cec8:	4611      	mov	r1, r2
 808ceca:	f7fd be2b 	b.w	808ab24 <network_get_listen_timeout>

0808cece <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 808cece:	2200      	movs	r2, #0
 808ced0:	6840      	ldr	r0, [r0, #4]
 808ced2:	4611      	mov	r1, r2
 808ced4:	f7fd be16 	b.w	808ab04 <network_listening>

0808ced8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 808ced8:	b570      	push	{r4, r5, r6, lr}
 808ceda:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 808cedc:	2600      	movs	r6, #0
 808cede:	b086      	sub	sp, #24
 808cee0:	4604      	mov	r4, r0
    IPAddress addr;
 808cee2:	a804      	add	r0, sp, #16
 808cee4:	f7ff fcfa 	bl	808c8dc <_ZN9IPAddressC1Ev>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808cee8:	4628      	mov	r0, r5
        HAL_IPAddress ip = {0};
 808ceea:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808ceec:	f002 fb82 	bl	808f5f4 <strlen>
 808cef0:	4b0a      	ldr	r3, [pc, #40]	; (808cf1c <_ZN5spark12NetworkClass7resolveEPKc+0x44>)
 808cef2:	9600      	str	r6, [sp, #0]
 808cef4:	b281      	uxth	r1, r0
 808cef6:	685b      	ldr	r3, [r3, #4]
 808cef8:	4628      	mov	r0, r5
 808cefa:	aa03      	add	r2, sp, #12
 808cefc:	f7fd fd0a 	bl	808a914 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 808cf00:	b130      	cbz	r0, 808cf10 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 808cf02:	4631      	mov	r1, r6
 808cf04:	4620      	mov	r0, r4
 808cf06:	f7ff fcf9 	bl	808c8fc <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 808cf0a:	4620      	mov	r0, r4
 808cf0c:	b006      	add	sp, #24
 808cf0e:	bd70      	pop	{r4, r5, r6, pc}
 808cf10:	4620      	mov	r0, r4
 808cf12:	a903      	add	r1, sp, #12
 808cf14:	f7ff fcea 	bl	808c8ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 808cf18:	e7f7      	b.n	808cf0a <_ZN5spark12NetworkClass7resolveEPKc+0x32>
 808cf1a:	bf00      	nop
 808cf1c:	2000121c 	.word	0x2000121c

0808cf20 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 808cf20:	4b02      	ldr	r3, [pc, #8]	; (808cf2c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 808cf22:	4a03      	ldr	r2, [pc, #12]	; (808cf30 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 808cf24:	601a      	str	r2, [r3, #0]
 808cf26:	2200      	movs	r2, #0
 808cf28:	605a      	str	r2, [r3, #4]

} // spark
 808cf2a:	4770      	bx	lr
 808cf2c:	2000136c 	.word	0x2000136c
 808cf30:	08094454 	.word	0x08094454

0808cf34 <_ZN5spark16JSONBufferWriterD1Ev>:

private:
    Print &strm_;
};

class JSONBufferWriter: public JSONWriter {
 808cf34:	4770      	bx	lr

0808cf36 <_ZN5spark16JSONBufferWriterD0Ev>:
 808cf36:	b510      	push	{r4, lr}
 808cf38:	4604      	mov	r4, r0
 808cf3a:	2114      	movs	r1, #20
 808cf3c:	f000 fa15 	bl	808d36a <_ZdlPvj>
 808cf40:	4620      	mov	r0, r4
 808cf42:	bd10      	pop	{r4, pc}

0808cf44 <_ZN5spark16JSONBufferWriter5writeEPKcj>:
    }
    write('"');
}

// spark::JSONBufferWriter
void spark::JSONBufferWriter::write(const char *data, size_t size) {
 808cf44:	b538      	push	{r3, r4, r5, lr}
 808cf46:	4615      	mov	r5, r2
    if (n_ < bufSize_) {
 808cf48:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 808cf4c:	4293      	cmp	r3, r2
void spark::JSONBufferWriter::write(const char *data, size_t size) {
 808cf4e:	4604      	mov	r4, r0
    if (n_ < bufSize_) {
 808cf50:	d207      	bcs.n	808cf62 <_ZN5spark16JSONBufferWriter5writeEPKcj+0x1e>
        memcpy(buf_ + n_, data, std::min(size, bufSize_ - n_));
 808cf52:	1ad2      	subs	r2, r2, r3
 808cf54:	6880      	ldr	r0, [r0, #8]
 808cf56:	42aa      	cmp	r2, r5
 808cf58:	bf28      	it	cs
 808cf5a:	462a      	movcs	r2, r5
 808cf5c:	4418      	add	r0, r3
 808cf5e:	f001 fd71 	bl	808ea44 <memcpy>
    }
    n_ += size;
 808cf62:	6922      	ldr	r2, [r4, #16]
 808cf64:	442a      	add	r2, r5
 808cf66:	6122      	str	r2, [r4, #16]
}
 808cf68:	bd38      	pop	{r3, r4, r5, pc}

0808cf6a <_ZN5spark16JSONBufferWriter6printfEPKcz>:

void spark::JSONBufferWriter::printf(const char *fmt, ...) {
 808cf6a:	b40e      	push	{r1, r2, r3}
 808cf6c:	b517      	push	{r0, r1, r2, r4, lr}
 808cf6e:	4604      	mov	r4, r0
 808cf70:	ab05      	add	r3, sp, #20
 808cf72:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, fmt);
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
 808cf76:	68e1      	ldr	r1, [r4, #12]
    va_start(args, fmt);
 808cf78:	9301      	str	r3, [sp, #4]
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
 808cf7a:	6903      	ldr	r3, [r0, #16]
 808cf7c:	6880      	ldr	r0, [r0, #8]
 808cf7e:	428b      	cmp	r3, r1
 808cf80:	bf34      	ite	cc
 808cf82:	1ac9      	subcc	r1, r1, r3
 808cf84:	2100      	movcs	r1, #0
 808cf86:	4418      	add	r0, r3
 808cf88:	9b01      	ldr	r3, [sp, #4]
 808cf8a:	f7fd fe63 	bl	808ac54 <vsnprintf>
    va_end(args);
    n_ += n;
 808cf8e:	6923      	ldr	r3, [r4, #16]
 808cf90:	4403      	add	r3, r0
 808cf92:	6123      	str	r3, [r4, #16]
}
 808cf94:	b003      	add	sp, #12
 808cf96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808cf9a:	b003      	add	sp, #12
 808cf9c:	4770      	bx	lr

0808cf9e <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 808cf9e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 808cfa0:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 808cfa2:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 808cfa6:	2201      	movs	r2, #1
 808cfa8:	689b      	ldr	r3, [r3, #8]
 808cfaa:	f10d 0107 	add.w	r1, sp, #7
 808cfae:	4798      	blx	r3
}
 808cfb0:	b003      	add	sp, #12
 808cfb2:	f85d fb04 	ldr.w	pc, [sp], #4

0808cfb6 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 808cfb6:	b510      	push	{r4, lr}
    write('}');
 808cfb8:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 808cfba:	4604      	mov	r4, r0
    write('}');
 808cfbc:	f7ff ffef 	bl	808cf9e <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 808cfc0:	2301      	movs	r3, #1
}
 808cfc2:	4620      	mov	r0, r4
    state_ = NEXT;
 808cfc4:	7123      	strb	r3, [r4, #4]
}
 808cfc6:	bd10      	pop	{r4, pc}

0808cfc8 <_ZN5spark10JSONWriter14writeSeparatorEv>:
void spark::JSONWriter::writeSeparator() {
 808cfc8:	b508      	push	{r3, lr}
    switch (state_) {
 808cfca:	7903      	ldrb	r3, [r0, #4]
 808cfcc:	2b01      	cmp	r3, #1
 808cfce:	d002      	beq.n	808cfd6 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 808cfd0:	2b02      	cmp	r3, #2
 808cfd2:	d004      	beq.n	808cfde <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
}
 808cfd4:	bd08      	pop	{r3, pc}
        write(',');
 808cfd6:	212c      	movs	r1, #44	; 0x2c
        write(':');
 808cfd8:	f7ff ffe1 	bl	808cf9e <_ZN5spark10JSONWriter5writeEc>
}
 808cfdc:	e7fa      	b.n	808cfd4 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 808cfde:	213a      	movs	r1, #58	; 0x3a
 808cfe0:	e7fa      	b.n	808cfd8 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

0808cfe2 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 808cfe2:	b510      	push	{r4, lr}
 808cfe4:	4604      	mov	r4, r0
    writeSeparator();
 808cfe6:	f7ff ffef 	bl	808cfc8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 808cfea:	4620      	mov	r0, r4
 808cfec:	217b      	movs	r1, #123	; 0x7b
 808cfee:	f7ff ffd6 	bl	808cf9e <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 808cff2:	2300      	movs	r3, #0
}
 808cff4:	4620      	mov	r0, r4
    state_ = BEGIN;
 808cff6:	7123      	strb	r3, [r4, #4]
}
 808cff8:	bd10      	pop	{r4, pc}
	...

0808cffc <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 808cffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808d000:	460d      	mov	r5, r1
 808d002:	4617      	mov	r7, r2
    write('"');
 808d004:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 808d006:	4604      	mov	r4, r0
    write('"');
 808d008:	f7ff ffc9 	bl	808cf9e <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
 808d00c:	4629      	mov	r1, r5
                printf("u%04x", (unsigned)c);
 808d00e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 808d0a8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
    const char* const end = str + size;
 808d012:	442f      	add	r7, r5
    while (s != end) {
 808d014:	42bd      	cmp	r5, r7
 808d016:	462a      	mov	r2, r5
 808d018:	d038      	beq.n	808d08c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
 808d01a:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
 808d01e:	2e22      	cmp	r6, #34	; 0x22
 808d020:	d003      	beq.n	808d02a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
 808d022:	2e5c      	cmp	r6, #92	; 0x5c
 808d024:	d001      	beq.n	808d02a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
 808d026:	2e1f      	cmp	r6, #31
 808d028:	d8f4      	bhi.n	808d014 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 808d02a:	6823      	ldr	r3, [r4, #0]
 808d02c:	1a52      	subs	r2, r2, r1
 808d02e:	4620      	mov	r0, r4
 808d030:	689b      	ldr	r3, [r3, #8]
 808d032:	4798      	blx	r3
            write('\\');
 808d034:	215c      	movs	r1, #92	; 0x5c
 808d036:	4620      	mov	r0, r4
 808d038:	f7ff ffb1 	bl	808cf9e <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 808d03c:	2e0d      	cmp	r6, #13
 808d03e:	d80a      	bhi.n	808d056 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
 808d040:	2e07      	cmp	r6, #7
 808d042:	d91c      	bls.n	808d07e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
 808d044:	f1a6 0308 	sub.w	r3, r6, #8
 808d048:	2b05      	cmp	r3, #5
 808d04a:	d818      	bhi.n	808d07e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
 808d04c:	e8df f003 	tbb	[pc, r3]
 808d050:	17110f0d 	.word	0x17110f0d
 808d054:	1513      	.short	0x1513
 808d056:	2e22      	cmp	r6, #34	; 0x22
 808d058:	d001      	beq.n	808d05e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
 808d05a:	2e5c      	cmp	r6, #92	; 0x5c
 808d05c:	d10f      	bne.n	808d07e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
 808d05e:	4631      	mov	r1, r6
                write('b');
 808d060:	4620      	mov	r0, r4
 808d062:	f7ff ff9c 	bl	808cf9e <_ZN5spark10JSONWriter5writeEc>
            str = s + 1;
 808d066:	4629      	mov	r1, r5
    while (s != end) {
 808d068:	e7d4      	b.n	808d014 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 808d06a:	2162      	movs	r1, #98	; 0x62
 808d06c:	e7f8      	b.n	808d060 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
 808d06e:	2174      	movs	r1, #116	; 0x74
 808d070:	e7f6      	b.n	808d060 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
 808d072:	216e      	movs	r1, #110	; 0x6e
 808d074:	e7f4      	b.n	808d060 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
 808d076:	2166      	movs	r1, #102	; 0x66
 808d078:	e7f2      	b.n	808d060 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
 808d07a:	2172      	movs	r1, #114	; 0x72
 808d07c:	e7f0      	b.n	808d060 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
 808d07e:	6823      	ldr	r3, [r4, #0]
 808d080:	4632      	mov	r2, r6
 808d082:	4641      	mov	r1, r8
 808d084:	4620      	mov	r0, r4
 808d086:	68db      	ldr	r3, [r3, #12]
 808d088:	4798      	blx	r3
                break;
 808d08a:	e7ec      	b.n	808d066 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
    if (s != str) {
 808d08c:	428d      	cmp	r5, r1
 808d08e:	d004      	beq.n	808d09a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
 808d090:	6823      	ldr	r3, [r4, #0]
 808d092:	4620      	mov	r0, r4
 808d094:	689b      	ldr	r3, [r3, #8]
 808d096:	1a6a      	subs	r2, r5, r1
 808d098:	4798      	blx	r3
    write('"');
 808d09a:	2122      	movs	r1, #34	; 0x22
 808d09c:	4620      	mov	r0, r4
 808d09e:	f7ff ff7e 	bl	808cf9e <_ZN5spark10JSONWriter5writeEc>
}
 808d0a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808d0a6:	bf00      	nop
 808d0a8:	08094480 	.word	0x08094480

0808d0ac <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 808d0ac:	b570      	push	{r4, r5, r6, lr}
 808d0ae:	4604      	mov	r4, r0
 808d0b0:	460d      	mov	r5, r1
 808d0b2:	4616      	mov	r6, r2
    writeSeparator();
 808d0b4:	f7ff ff88 	bl	808cfc8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 808d0b8:	4620      	mov	r0, r4
 808d0ba:	4632      	mov	r2, r6
 808d0bc:	4629      	mov	r1, r5
 808d0be:	f7ff ff9d 	bl	808cffc <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 808d0c2:	2302      	movs	r3, #2
}
 808d0c4:	4620      	mov	r0, r4
    state_ = VALUE;
 808d0c6:	7123      	strb	r3, [r4, #4]
}
 808d0c8:	bd70      	pop	{r4, r5, r6, pc}

0808d0ca <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 808d0ca:	b570      	push	{r4, r5, r6, lr}
 808d0cc:	4604      	mov	r4, r0
 808d0ce:	460d      	mov	r5, r1
 808d0d0:	4616      	mov	r6, r2
    writeSeparator();
 808d0d2:	f7ff ff79 	bl	808cfc8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 808d0d6:	4620      	mov	r0, r4
 808d0d8:	4632      	mov	r2, r6
 808d0da:	4629      	mov	r1, r5
 808d0dc:	f7ff ff8e 	bl	808cffc <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 808d0e0:	2301      	movs	r3, #1
}
 808d0e2:	4620      	mov	r0, r4
    state_ = NEXT;
 808d0e4:	7123      	strb	r3, [r4, #4]
}
 808d0e6:	bd70      	pop	{r4, r5, r6, pc}

0808d0e8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 808d0e8:	282e      	cmp	r0, #46	; 0x2e
bool pinAvailable(uint16_t pin) {
 808d0ea:	b570      	push	{r4, r5, r6, lr}
 808d0ec:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 808d0ee:	d901      	bls.n	808d0f4 <pinAvailable+0xc>
    return false;
 808d0f0:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 808d0f2:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 808d0f4:	f1a0 030d 	sub.w	r3, r0, #13
 808d0f8:	2b02      	cmp	r3, #2
 808d0fa:	d90b      	bls.n	808d114 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 808d0fc:	2801      	cmp	r0, #1
 808d0fe:	d826      	bhi.n	808d14e <pinAvailable+0x66>
 808d100:	f000 f8de 	bl	808d2c0 <_Z19__fetch_global_Wirev>
 808d104:	2100      	movs	r1, #0
 808d106:	7c00      	ldrb	r0, [r0, #16]
 808d108:	f7fd fb8c 	bl	808a824 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 808d10c:	f080 0001 	eor.w	r0, r0, #1
 808d110:	b2c0      	uxtb	r0, r0
 808d112:	e7ee      	b.n	808d0f2 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 808d114:	4e13      	ldr	r6, [pc, #76]	; (808d164 <pinAvailable+0x7c>)
 808d116:	7831      	ldrb	r1, [r6, #0]
 808d118:	f3bf 8f5b 	dmb	ish
 808d11c:	f011 0501 	ands.w	r5, r1, #1
 808d120:	d10f      	bne.n	808d142 <pinAvailable+0x5a>
 808d122:	4630      	mov	r0, r6
 808d124:	f7f2 ffbf 	bl	80800a6 <__cxa_guard_acquire>
 808d128:	b158      	cbz	r0, 808d142 <pinAvailable+0x5a>
 808d12a:	4629      	mov	r1, r5
 808d12c:	480e      	ldr	r0, [pc, #56]	; (808d168 <pinAvailable+0x80>)
 808d12e:	f7fd ff28 	bl	808af82 <_ZN8SPIClassC1E19hal_spi_interface_t>
 808d132:	4630      	mov	r0, r6
 808d134:	f7f2 ffbc 	bl	80800b0 <__cxa_guard_release>
 808d138:	4a0c      	ldr	r2, [pc, #48]	; (808d16c <pinAvailable+0x84>)
 808d13a:	490d      	ldr	r1, [pc, #52]	; (808d170 <pinAvailable+0x88>)
 808d13c:	480a      	ldr	r0, [pc, #40]	; (808d168 <pinAvailable+0x80>)
 808d13e:	f000 f90f 	bl	808d360 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 808d142:	4b09      	ldr	r3, [pc, #36]	; (808d168 <pinAvailable+0x80>)
 808d144:	7818      	ldrb	r0, [r3, #0]
 808d146:	f7fd fbc5 	bl	808a8d4 <hal_spi_is_enabled>
 808d14a:	2800      	cmp	r0, #0
 808d14c:	d1d0      	bne.n	808d0f0 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 808d14e:	3c12      	subs	r4, #18
 808d150:	2c01      	cmp	r4, #1
 808d152:	d805      	bhi.n	808d160 <pinAvailable+0x78>
 808d154:	f7ff fda4 	bl	808cca0 <_Z22__fetch_global_Serial1v>
 808d158:	7c00      	ldrb	r0, [r0, #16]
 808d15a:	f7fd fb0b 	bl	808a774 <hal_usart_is_enabled>
 808d15e:	e7d5      	b.n	808d10c <pinAvailable+0x24>
  return true; // 'pin' is available
 808d160:	2001      	movs	r0, #1
 808d162:	e7c6      	b.n	808d0f2 <pinAvailable+0xa>
 808d164:	20000d34 	.word	0x20000d34
 808d168:	20000d38 	.word	0x20000d38
 808d16c:	20000328 	.word	0x20000328
 808d170:	08088475 	.word	0x08088475

0808d174 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 808d174:	282e      	cmp	r0, #46	; 0x2e
{
 808d176:	b538      	push	{r3, r4, r5, lr}
 808d178:	4604      	mov	r4, r0
 808d17a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 808d17c:	d80a      	bhi.n	808d194 <pinMode+0x20>
 808d17e:	29ff      	cmp	r1, #255	; 0xff
 808d180:	d008      	beq.n	808d194 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 808d182:	f7ff ffb1 	bl	808d0e8 <pinAvailable>
 808d186:	b128      	cbz	r0, 808d194 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 808d188:	4629      	mov	r1, r5
 808d18a:	4620      	mov	r0, r4
}
 808d18c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 808d190:	f7fd ba18 	b.w	808a5c4 <HAL_Pin_Mode>
}
 808d194:	bd38      	pop	{r3, r4, r5, pc}

0808d196 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 808d196:	b538      	push	{r3, r4, r5, lr}
 808d198:	4604      	mov	r4, r0
 808d19a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 808d19c:	f7fd fa1a 	bl	808a5d4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 808d1a0:	28ff      	cmp	r0, #255	; 0xff
 808d1a2:	d010      	beq.n	808d1c6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 808d1a4:	2806      	cmp	r0, #6
 808d1a6:	d804      	bhi.n	808d1b2 <digitalWrite+0x1c>
 808d1a8:	234d      	movs	r3, #77	; 0x4d
 808d1aa:	fa23 f000 	lsr.w	r0, r3, r0
 808d1ae:	07c3      	lsls	r3, r0, #31
 808d1b0:	d409      	bmi.n	808d1c6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 808d1b2:	4620      	mov	r0, r4
 808d1b4:	f7ff ff98 	bl	808d0e8 <pinAvailable>
 808d1b8:	b128      	cbz	r0, 808d1c6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 808d1ba:	4629      	mov	r1, r5
 808d1bc:	4620      	mov	r0, r4
}
 808d1be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 808d1c2:	f7fd ba0f 	b.w	808a5e4 <HAL_GPIO_Write>
}
 808d1c6:	bd38      	pop	{r3, r4, r5, pc}

0808d1c8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 808d1c8:	b510      	push	{r4, lr}
 808d1ca:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 808d1cc:	f7fd fa02 	bl	808a5d4 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 808d1d0:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 808d1d2:	b2db      	uxtb	r3, r3
 808d1d4:	2b01      	cmp	r3, #1
 808d1d6:	d908      	bls.n	808d1ea <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 808d1d8:	4620      	mov	r0, r4
 808d1da:	f7ff ff85 	bl	808d0e8 <pinAvailable>
 808d1de:	b120      	cbz	r0, 808d1ea <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 808d1e0:	4620      	mov	r0, r4
}
 808d1e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 808d1e6:	f7fd ba05 	b.w	808a5f4 <HAL_GPIO_Read>
}
 808d1ea:	2000      	movs	r0, #0
 808d1ec:	bd10      	pop	{r4, pc}

0808d1ee <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 808d1ee:	b510      	push	{r4, lr}
 808d1f0:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 808d1f2:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 808d1f4:	bf9c      	itt	ls
 808d1f6:	340a      	addls	r4, #10
 808d1f8:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 808d1fa:	4620      	mov	r0, r4
 808d1fc:	f7ff ff74 	bl	808d0e8 <pinAvailable>
 808d200:	b150      	cbz	r0, 808d218 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 808d202:	2103      	movs	r1, #3
 808d204:	4620      	mov	r0, r4
 808d206:	f7fd f9d5 	bl	808a5b4 <HAL_Validate_Pin_Function>
 808d20a:	2803      	cmp	r0, #3
 808d20c:	d104      	bne.n	808d218 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 808d20e:	4620      	mov	r0, r4
}
 808d210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 808d214:	f7fd ba0e 	b.w	808a634 <hal_adc_read>
}
 808d218:	2000      	movs	r0, #0
 808d21a:	bd10      	pop	{r4, pc}

0808d21c <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 808d21c:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 808d21e:	4c08      	ldr	r4, [pc, #32]	; (808d240 <_Z21__fetch_global_EEPROMv+0x24>)
 808d220:	7823      	ldrb	r3, [r4, #0]
 808d222:	f3bf 8f5b 	dmb	ish
 808d226:	07db      	lsls	r3, r3, #31
 808d228:	d408      	bmi.n	808d23c <_Z21__fetch_global_EEPROMv+0x20>
 808d22a:	4620      	mov	r0, r4
 808d22c:	f7f2 ff3b 	bl	80800a6 <__cxa_guard_acquire>
 808d230:	b120      	cbz	r0, 808d23c <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 808d232:	f7fd fa1f 	bl	808a674 <HAL_EEPROM_Init>
 808d236:	4620      	mov	r0, r4
 808d238:	f7f2 ff3a 	bl	80800b0 <__cxa_guard_release>
	return eeprom;
}
 808d23c:	4801      	ldr	r0, [pc, #4]	; (808d244 <_Z21__fetch_global_EEPROMv+0x28>)
 808d23e:	bd10      	pop	{r4, pc}
 808d240:	20001378 	.word	0x20001378
 808d244:	2000137c 	.word	0x2000137c

0808d248 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 808d248:	2300      	movs	r3, #0
 808d24a:	b513      	push	{r0, r1, r4, lr}
 808d24c:	4c07      	ldr	r4, [pc, #28]	; (808d26c <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 808d24e:	461a      	mov	r2, r3
 808d250:	4619      	mov	r1, r3
 808d252:	4620      	mov	r0, r4
 808d254:	9300      	str	r3, [sp, #0]
 808d256:	f7ff fb63 	bl	808c920 <_ZN9IPAddressC1Ehhhh>
 808d25a:	4620      	mov	r0, r4
 808d25c:	4a04      	ldr	r2, [pc, #16]	; (808d270 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 808d25e:	4905      	ldr	r1, [pc, #20]	; (808d274 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 808d260:	b002      	add	sp, #8
 808d262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808d266:	f000 b87b 	b.w	808d360 <__aeabi_atexit>
 808d26a:	bf00      	nop
 808d26c:	20001380 	.word	0x20001380
 808d270:	20000328 	.word	0x20000328
 808d274:	0808c899 	.word	0x0808c899

0808d278 <_ZN12_GLOBAL__N_117defaultWireConfigEv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 808d278:	2300      	movs	r3, #0
hal_i2c_config_t defaultWireConfig() {
 808d27a:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 808d27c:	2520      	movs	r5, #32
 808d27e:	8043      	strh	r3, [r0, #2]
 808d280:	2314      	movs	r3, #20
		.size = sizeof(hal_i2c_config_t),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808d282:	4e08      	ldr	r6, [pc, #32]	; (808d2a4 <_ZN12_GLOBAL__N_117defaultWireConfigEv+0x2c>)
hal_i2c_config_t defaultWireConfig() {
 808d284:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 808d286:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808d288:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 808d28a:	6085      	str	r5, [r0, #8]
 808d28c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808d28e:	4628      	mov	r0, r5
 808d290:	f000 f86d 	bl	808d36e <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808d294:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 808d296:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808d298:	4628      	mov	r0, r5
 808d29a:	f000 f868 	bl	808d36e <_ZnajRKSt9nothrow_t>
	};
 808d29e:	60e0      	str	r0, [r4, #12]

	return config;
}
 808d2a0:	4620      	mov	r0, r4
 808d2a2:	bd70      	pop	{r4, r5, r6, pc}
 808d2a4:	080944a0 	.word	0x080944a0

0808d2a8 <_Z17acquireWireBufferv>:

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 808d2a8:	b510      	push	{r4, lr}
 808d2aa:	4604      	mov	r4, r0
	return defaultWireConfig();
 808d2ac:	f7ff ffe4 	bl	808d278 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
}
 808d2b0:	4620      	mov	r0, r4
 808d2b2:	bd10      	pop	{r4, pc}

0808d2b4 <_Z18acquireWire3Bufferv>:
 808d2b4:	b510      	push	{r4, lr}
 808d2b6:	4604      	mov	r4, r0
 808d2b8:	f7ff ffde 	bl	808d278 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
 808d2bc:	4620      	mov	r0, r4
 808d2be:	bd10      	pop	{r4, pc}

0808d2c0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 808d2c0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 808d2c2:	4d0f      	ldr	r5, [pc, #60]	; (808d300 <_Z19__fetch_global_Wirev+0x40>)
{
 808d2c4:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 808d2c6:	7829      	ldrb	r1, [r5, #0]
 808d2c8:	f3bf 8f5b 	dmb	ish
 808d2cc:	f011 0401 	ands.w	r4, r1, #1
 808d2d0:	d113      	bne.n	808d2fa <_Z19__fetch_global_Wirev+0x3a>
 808d2d2:	4628      	mov	r0, r5
 808d2d4:	f7f2 fee7 	bl	80800a6 <__cxa_guard_acquire>
 808d2d8:	b178      	cbz	r0, 808d2fa <_Z19__fetch_global_Wirev+0x3a>
 808d2da:	a801      	add	r0, sp, #4
 808d2dc:	f7ff ffe4 	bl	808d2a8 <_Z17acquireWireBufferv>
 808d2e0:	4621      	mov	r1, r4
 808d2e2:	aa01      	add	r2, sp, #4
 808d2e4:	4807      	ldr	r0, [pc, #28]	; (808d304 <_Z19__fetch_global_Wirev+0x44>)
 808d2e6:	f7ff fd43 	bl	808cd70 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 808d2ea:	4628      	mov	r0, r5
 808d2ec:	f7f2 fee0 	bl	80800b0 <__cxa_guard_release>
 808d2f0:	4a05      	ldr	r2, [pc, #20]	; (808d308 <_Z19__fetch_global_Wirev+0x48>)
 808d2f2:	4906      	ldr	r1, [pc, #24]	; (808d30c <_Z19__fetch_global_Wirev+0x4c>)
 808d2f4:	4803      	ldr	r0, [pc, #12]	; (808d304 <_Z19__fetch_global_Wirev+0x44>)
 808d2f6:	f000 f833 	bl	808d360 <__aeabi_atexit>
	return wire;
}
 808d2fa:	4802      	ldr	r0, [pc, #8]	; (808d304 <_Z19__fetch_global_Wirev+0x44>)
 808d2fc:	b007      	add	sp, #28
 808d2fe:	bd30      	pop	{r4, r5, pc}
 808d300:	20001388 	.word	0x20001388
 808d304:	20001390 	.word	0x20001390
 808d308:	20000328 	.word	0x20000328
 808d30c:	0808cd19 	.word	0x0808cd19

0808d310 <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 808d310:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 808d312:	4c0f      	ldr	r4, [pc, #60]	; (808d350 <_Z20__fetch_global_Wire3v+0x40>)
{
 808d314:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 808d316:	7823      	ldrb	r3, [r4, #0]
 808d318:	f3bf 8f5b 	dmb	ish
 808d31c:	07db      	lsls	r3, r3, #31
 808d31e:	d413      	bmi.n	808d348 <_Z20__fetch_global_Wire3v+0x38>
 808d320:	4620      	mov	r0, r4
 808d322:	f7f2 fec0 	bl	80800a6 <__cxa_guard_acquire>
 808d326:	b178      	cbz	r0, 808d348 <_Z20__fetch_global_Wire3v+0x38>
 808d328:	a801      	add	r0, sp, #4
 808d32a:	f7ff ffc3 	bl	808d2b4 <_Z18acquireWire3Bufferv>
 808d32e:	2102      	movs	r1, #2
 808d330:	aa01      	add	r2, sp, #4
 808d332:	4808      	ldr	r0, [pc, #32]	; (808d354 <_Z20__fetch_global_Wire3v+0x44>)
 808d334:	f7ff fd1c 	bl	808cd70 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 808d338:	4620      	mov	r0, r4
 808d33a:	f7f2 feb9 	bl	80800b0 <__cxa_guard_release>
 808d33e:	4a06      	ldr	r2, [pc, #24]	; (808d358 <_Z20__fetch_global_Wire3v+0x48>)
 808d340:	4906      	ldr	r1, [pc, #24]	; (808d35c <_Z20__fetch_global_Wire3v+0x4c>)
 808d342:	4804      	ldr	r0, [pc, #16]	; (808d354 <_Z20__fetch_global_Wire3v+0x44>)
 808d344:	f000 f80c 	bl	808d360 <__aeabi_atexit>
	return wire;
}
 808d348:	4802      	ldr	r0, [pc, #8]	; (808d354 <_Z20__fetch_global_Wire3v+0x44>)
 808d34a:	b006      	add	sp, #24
 808d34c:	bd10      	pop	{r4, pc}
 808d34e:	bf00      	nop
 808d350:	2000138c 	.word	0x2000138c
 808d354:	200013a4 	.word	0x200013a4
 808d358:	20000328 	.word	0x20000328
 808d35c:	0808cd19 	.word	0x0808cd19

0808d360 <__aeabi_atexit>:
 808d360:	460b      	mov	r3, r1
 808d362:	4601      	mov	r1, r0
 808d364:	4618      	mov	r0, r3
 808d366:	f001 ba5b 	b.w	808e820 <__cxa_atexit>

0808d36a <_ZdlPvj>:
 808d36a:	f7f2 be9a 	b.w	80800a2 <_ZdlPv>

0808d36e <_ZnajRKSt9nothrow_t>:
 808d36e:	f7f2 be96 	b.w	808009e <_Znaj>

0808d372 <_ZSt25__throw_bad_function_callv>:
 808d372:	b508      	push	{r3, lr}
 808d374:	f7fd fc76 	bl	808ac64 <abort>

0808d378 <nan>:
 808d378:	2000      	movs	r0, #0
 808d37a:	4901      	ldr	r1, [pc, #4]	; (808d380 <nan+0x8>)
 808d37c:	4770      	bx	lr
 808d37e:	bf00      	nop
 808d380:	7ff80000 	.word	0x7ff80000

0808d384 <__aeabi_drsub>:
 808d384:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 808d388:	e002      	b.n	808d390 <__adddf3>
 808d38a:	bf00      	nop

0808d38c <__aeabi_dsub>:
 808d38c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0808d390 <__adddf3>:
 808d390:	b530      	push	{r4, r5, lr}
 808d392:	ea4f 0441 	mov.w	r4, r1, lsl #1
 808d396:	ea4f 0543 	mov.w	r5, r3, lsl #1
 808d39a:	ea94 0f05 	teq	r4, r5
 808d39e:	bf08      	it	eq
 808d3a0:	ea90 0f02 	teqeq	r0, r2
 808d3a4:	bf1f      	itttt	ne
 808d3a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 808d3aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 808d3ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 808d3b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 808d3b6:	f000 80e2 	beq.w	808d57e <__adddf3+0x1ee>
 808d3ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 808d3be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 808d3c2:	bfb8      	it	lt
 808d3c4:	426d      	neglt	r5, r5
 808d3c6:	dd0c      	ble.n	808d3e2 <__adddf3+0x52>
 808d3c8:	442c      	add	r4, r5
 808d3ca:	ea80 0202 	eor.w	r2, r0, r2
 808d3ce:	ea81 0303 	eor.w	r3, r1, r3
 808d3d2:	ea82 0000 	eor.w	r0, r2, r0
 808d3d6:	ea83 0101 	eor.w	r1, r3, r1
 808d3da:	ea80 0202 	eor.w	r2, r0, r2
 808d3de:	ea81 0303 	eor.w	r3, r1, r3
 808d3e2:	2d36      	cmp	r5, #54	; 0x36
 808d3e4:	bf88      	it	hi
 808d3e6:	bd30      	pophi	{r4, r5, pc}
 808d3e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808d3ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 808d3f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 808d3f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 808d3f8:	d002      	beq.n	808d400 <__adddf3+0x70>
 808d3fa:	4240      	negs	r0, r0
 808d3fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808d400:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 808d404:	ea4f 3303 	mov.w	r3, r3, lsl #12
 808d408:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 808d40c:	d002      	beq.n	808d414 <__adddf3+0x84>
 808d40e:	4252      	negs	r2, r2
 808d410:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808d414:	ea94 0f05 	teq	r4, r5
 808d418:	f000 80a7 	beq.w	808d56a <__adddf3+0x1da>
 808d41c:	f1a4 0401 	sub.w	r4, r4, #1
 808d420:	f1d5 0e20 	rsbs	lr, r5, #32
 808d424:	db0d      	blt.n	808d442 <__adddf3+0xb2>
 808d426:	fa02 fc0e 	lsl.w	ip, r2, lr
 808d42a:	fa22 f205 	lsr.w	r2, r2, r5
 808d42e:	1880      	adds	r0, r0, r2
 808d430:	f141 0100 	adc.w	r1, r1, #0
 808d434:	fa03 f20e 	lsl.w	r2, r3, lr
 808d438:	1880      	adds	r0, r0, r2
 808d43a:	fa43 f305 	asr.w	r3, r3, r5
 808d43e:	4159      	adcs	r1, r3
 808d440:	e00e      	b.n	808d460 <__adddf3+0xd0>
 808d442:	f1a5 0520 	sub.w	r5, r5, #32
 808d446:	f10e 0e20 	add.w	lr, lr, #32
 808d44a:	2a01      	cmp	r2, #1
 808d44c:	fa03 fc0e 	lsl.w	ip, r3, lr
 808d450:	bf28      	it	cs
 808d452:	f04c 0c02 	orrcs.w	ip, ip, #2
 808d456:	fa43 f305 	asr.w	r3, r3, r5
 808d45a:	18c0      	adds	r0, r0, r3
 808d45c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 808d460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808d464:	d507      	bpl.n	808d476 <__adddf3+0xe6>
 808d466:	f04f 0e00 	mov.w	lr, #0
 808d46a:	f1dc 0c00 	rsbs	ip, ip, #0
 808d46e:	eb7e 0000 	sbcs.w	r0, lr, r0
 808d472:	eb6e 0101 	sbc.w	r1, lr, r1
 808d476:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 808d47a:	d31b      	bcc.n	808d4b4 <__adddf3+0x124>
 808d47c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 808d480:	d30c      	bcc.n	808d49c <__adddf3+0x10c>
 808d482:	0849      	lsrs	r1, r1, #1
 808d484:	ea5f 0030 	movs.w	r0, r0, rrx
 808d488:	ea4f 0c3c 	mov.w	ip, ip, rrx
 808d48c:	f104 0401 	add.w	r4, r4, #1
 808d490:	ea4f 5244 	mov.w	r2, r4, lsl #21
 808d494:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 808d498:	f080 809a 	bcs.w	808d5d0 <__adddf3+0x240>
 808d49c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 808d4a0:	bf08      	it	eq
 808d4a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808d4a6:	f150 0000 	adcs.w	r0, r0, #0
 808d4aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808d4ae:	ea41 0105 	orr.w	r1, r1, r5
 808d4b2:	bd30      	pop	{r4, r5, pc}
 808d4b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 808d4b8:	4140      	adcs	r0, r0
 808d4ba:	eb41 0101 	adc.w	r1, r1, r1
 808d4be:	3c01      	subs	r4, #1
 808d4c0:	bf28      	it	cs
 808d4c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 808d4c6:	d2e9      	bcs.n	808d49c <__adddf3+0x10c>
 808d4c8:	f091 0f00 	teq	r1, #0
 808d4cc:	bf04      	itt	eq
 808d4ce:	4601      	moveq	r1, r0
 808d4d0:	2000      	moveq	r0, #0
 808d4d2:	fab1 f381 	clz	r3, r1
 808d4d6:	bf08      	it	eq
 808d4d8:	3320      	addeq	r3, #32
 808d4da:	f1a3 030b 	sub.w	r3, r3, #11
 808d4de:	f1b3 0220 	subs.w	r2, r3, #32
 808d4e2:	da0c      	bge.n	808d4fe <__adddf3+0x16e>
 808d4e4:	320c      	adds	r2, #12
 808d4e6:	dd08      	ble.n	808d4fa <__adddf3+0x16a>
 808d4e8:	f102 0c14 	add.w	ip, r2, #20
 808d4ec:	f1c2 020c 	rsb	r2, r2, #12
 808d4f0:	fa01 f00c 	lsl.w	r0, r1, ip
 808d4f4:	fa21 f102 	lsr.w	r1, r1, r2
 808d4f8:	e00c      	b.n	808d514 <__adddf3+0x184>
 808d4fa:	f102 0214 	add.w	r2, r2, #20
 808d4fe:	bfd8      	it	le
 808d500:	f1c2 0c20 	rsble	ip, r2, #32
 808d504:	fa01 f102 	lsl.w	r1, r1, r2
 808d508:	fa20 fc0c 	lsr.w	ip, r0, ip
 808d50c:	bfdc      	itt	le
 808d50e:	ea41 010c 	orrle.w	r1, r1, ip
 808d512:	4090      	lslle	r0, r2
 808d514:	1ae4      	subs	r4, r4, r3
 808d516:	bfa2      	ittt	ge
 808d518:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 808d51c:	4329      	orrge	r1, r5
 808d51e:	bd30      	popge	{r4, r5, pc}
 808d520:	ea6f 0404 	mvn.w	r4, r4
 808d524:	3c1f      	subs	r4, #31
 808d526:	da1c      	bge.n	808d562 <__adddf3+0x1d2>
 808d528:	340c      	adds	r4, #12
 808d52a:	dc0e      	bgt.n	808d54a <__adddf3+0x1ba>
 808d52c:	f104 0414 	add.w	r4, r4, #20
 808d530:	f1c4 0220 	rsb	r2, r4, #32
 808d534:	fa20 f004 	lsr.w	r0, r0, r4
 808d538:	fa01 f302 	lsl.w	r3, r1, r2
 808d53c:	ea40 0003 	orr.w	r0, r0, r3
 808d540:	fa21 f304 	lsr.w	r3, r1, r4
 808d544:	ea45 0103 	orr.w	r1, r5, r3
 808d548:	bd30      	pop	{r4, r5, pc}
 808d54a:	f1c4 040c 	rsb	r4, r4, #12
 808d54e:	f1c4 0220 	rsb	r2, r4, #32
 808d552:	fa20 f002 	lsr.w	r0, r0, r2
 808d556:	fa01 f304 	lsl.w	r3, r1, r4
 808d55a:	ea40 0003 	orr.w	r0, r0, r3
 808d55e:	4629      	mov	r1, r5
 808d560:	bd30      	pop	{r4, r5, pc}
 808d562:	fa21 f004 	lsr.w	r0, r1, r4
 808d566:	4629      	mov	r1, r5
 808d568:	bd30      	pop	{r4, r5, pc}
 808d56a:	f094 0f00 	teq	r4, #0
 808d56e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 808d572:	bf06      	itte	eq
 808d574:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 808d578:	3401      	addeq	r4, #1
 808d57a:	3d01      	subne	r5, #1
 808d57c:	e74e      	b.n	808d41c <__adddf3+0x8c>
 808d57e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 808d582:	bf18      	it	ne
 808d584:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 808d588:	d029      	beq.n	808d5de <__adddf3+0x24e>
 808d58a:	ea94 0f05 	teq	r4, r5
 808d58e:	bf08      	it	eq
 808d590:	ea90 0f02 	teqeq	r0, r2
 808d594:	d005      	beq.n	808d5a2 <__adddf3+0x212>
 808d596:	ea54 0c00 	orrs.w	ip, r4, r0
 808d59a:	bf04      	itt	eq
 808d59c:	4619      	moveq	r1, r3
 808d59e:	4610      	moveq	r0, r2
 808d5a0:	bd30      	pop	{r4, r5, pc}
 808d5a2:	ea91 0f03 	teq	r1, r3
 808d5a6:	bf1e      	ittt	ne
 808d5a8:	2100      	movne	r1, #0
 808d5aa:	2000      	movne	r0, #0
 808d5ac:	bd30      	popne	{r4, r5, pc}
 808d5ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 808d5b2:	d105      	bne.n	808d5c0 <__adddf3+0x230>
 808d5b4:	0040      	lsls	r0, r0, #1
 808d5b6:	4149      	adcs	r1, r1
 808d5b8:	bf28      	it	cs
 808d5ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 808d5be:	bd30      	pop	{r4, r5, pc}
 808d5c0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 808d5c4:	bf3c      	itt	cc
 808d5c6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 808d5ca:	bd30      	popcc	{r4, r5, pc}
 808d5cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808d5d0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 808d5d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 808d5d8:	f04f 0000 	mov.w	r0, #0
 808d5dc:	bd30      	pop	{r4, r5, pc}
 808d5de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 808d5e2:	bf1a      	itte	ne
 808d5e4:	4619      	movne	r1, r3
 808d5e6:	4610      	movne	r0, r2
 808d5e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 808d5ec:	bf1c      	itt	ne
 808d5ee:	460b      	movne	r3, r1
 808d5f0:	4602      	movne	r2, r0
 808d5f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808d5f6:	bf06      	itte	eq
 808d5f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 808d5fc:	ea91 0f03 	teqeq	r1, r3
 808d600:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 808d604:	bd30      	pop	{r4, r5, pc}
 808d606:	bf00      	nop

0808d608 <__aeabi_ui2d>:
 808d608:	f090 0f00 	teq	r0, #0
 808d60c:	bf04      	itt	eq
 808d60e:	2100      	moveq	r1, #0
 808d610:	4770      	bxeq	lr
 808d612:	b530      	push	{r4, r5, lr}
 808d614:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808d618:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808d61c:	f04f 0500 	mov.w	r5, #0
 808d620:	f04f 0100 	mov.w	r1, #0
 808d624:	e750      	b.n	808d4c8 <__adddf3+0x138>
 808d626:	bf00      	nop

0808d628 <__aeabi_i2d>:
 808d628:	f090 0f00 	teq	r0, #0
 808d62c:	bf04      	itt	eq
 808d62e:	2100      	moveq	r1, #0
 808d630:	4770      	bxeq	lr
 808d632:	b530      	push	{r4, r5, lr}
 808d634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808d638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808d63c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 808d640:	bf48      	it	mi
 808d642:	4240      	negmi	r0, r0
 808d644:	f04f 0100 	mov.w	r1, #0
 808d648:	e73e      	b.n	808d4c8 <__adddf3+0x138>
 808d64a:	bf00      	nop

0808d64c <__aeabi_f2d>:
 808d64c:	0042      	lsls	r2, r0, #1
 808d64e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 808d652:	ea4f 0131 	mov.w	r1, r1, rrx
 808d656:	ea4f 7002 	mov.w	r0, r2, lsl #28
 808d65a:	bf1f      	itttt	ne
 808d65c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 808d660:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 808d664:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 808d668:	4770      	bxne	lr
 808d66a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 808d66e:	bf08      	it	eq
 808d670:	4770      	bxeq	lr
 808d672:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 808d676:	bf04      	itt	eq
 808d678:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 808d67c:	4770      	bxeq	lr
 808d67e:	b530      	push	{r4, r5, lr}
 808d680:	f44f 7460 	mov.w	r4, #896	; 0x380
 808d684:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808d688:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 808d68c:	e71c      	b.n	808d4c8 <__adddf3+0x138>
 808d68e:	bf00      	nop

0808d690 <__aeabi_ul2d>:
 808d690:	ea50 0201 	orrs.w	r2, r0, r1
 808d694:	bf08      	it	eq
 808d696:	4770      	bxeq	lr
 808d698:	b530      	push	{r4, r5, lr}
 808d69a:	f04f 0500 	mov.w	r5, #0
 808d69e:	e00a      	b.n	808d6b6 <__aeabi_l2d+0x16>

0808d6a0 <__aeabi_l2d>:
 808d6a0:	ea50 0201 	orrs.w	r2, r0, r1
 808d6a4:	bf08      	it	eq
 808d6a6:	4770      	bxeq	lr
 808d6a8:	b530      	push	{r4, r5, lr}
 808d6aa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 808d6ae:	d502      	bpl.n	808d6b6 <__aeabi_l2d+0x16>
 808d6b0:	4240      	negs	r0, r0
 808d6b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808d6b6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808d6ba:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808d6be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 808d6c2:	f43f aed8 	beq.w	808d476 <__adddf3+0xe6>
 808d6c6:	f04f 0203 	mov.w	r2, #3
 808d6ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808d6ce:	bf18      	it	ne
 808d6d0:	3203      	addne	r2, #3
 808d6d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808d6d6:	bf18      	it	ne
 808d6d8:	3203      	addne	r2, #3
 808d6da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 808d6de:	f1c2 0320 	rsb	r3, r2, #32
 808d6e2:	fa00 fc03 	lsl.w	ip, r0, r3
 808d6e6:	fa20 f002 	lsr.w	r0, r0, r2
 808d6ea:	fa01 fe03 	lsl.w	lr, r1, r3
 808d6ee:	ea40 000e 	orr.w	r0, r0, lr
 808d6f2:	fa21 f102 	lsr.w	r1, r1, r2
 808d6f6:	4414      	add	r4, r2
 808d6f8:	e6bd      	b.n	808d476 <__adddf3+0xe6>
 808d6fa:	bf00      	nop

0808d6fc <__aeabi_dmul>:
 808d6fc:	b570      	push	{r4, r5, r6, lr}
 808d6fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808d702:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808d706:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808d70a:	bf1d      	ittte	ne
 808d70c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 808d710:	ea94 0f0c 	teqne	r4, ip
 808d714:	ea95 0f0c 	teqne	r5, ip
 808d718:	f000 f8de 	bleq	808d8d8 <__aeabi_dmul+0x1dc>
 808d71c:	442c      	add	r4, r5
 808d71e:	ea81 0603 	eor.w	r6, r1, r3
 808d722:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 808d726:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 808d72a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 808d72e:	bf18      	it	ne
 808d730:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 808d734:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808d738:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 808d73c:	d038      	beq.n	808d7b0 <__aeabi_dmul+0xb4>
 808d73e:	fba0 ce02 	umull	ip, lr, r0, r2
 808d742:	f04f 0500 	mov.w	r5, #0
 808d746:	fbe1 e502 	umlal	lr, r5, r1, r2
 808d74a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 808d74e:	fbe0 e503 	umlal	lr, r5, r0, r3
 808d752:	f04f 0600 	mov.w	r6, #0
 808d756:	fbe1 5603 	umlal	r5, r6, r1, r3
 808d75a:	f09c 0f00 	teq	ip, #0
 808d75e:	bf18      	it	ne
 808d760:	f04e 0e01 	orrne.w	lr, lr, #1
 808d764:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 808d768:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 808d76c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 808d770:	d204      	bcs.n	808d77c <__aeabi_dmul+0x80>
 808d772:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 808d776:	416d      	adcs	r5, r5
 808d778:	eb46 0606 	adc.w	r6, r6, r6
 808d77c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 808d780:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 808d784:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 808d788:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 808d78c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 808d790:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808d794:	bf88      	it	hi
 808d796:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 808d79a:	d81e      	bhi.n	808d7da <__aeabi_dmul+0xde>
 808d79c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 808d7a0:	bf08      	it	eq
 808d7a2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 808d7a6:	f150 0000 	adcs.w	r0, r0, #0
 808d7aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808d7ae:	bd70      	pop	{r4, r5, r6, pc}
 808d7b0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 808d7b4:	ea46 0101 	orr.w	r1, r6, r1
 808d7b8:	ea40 0002 	orr.w	r0, r0, r2
 808d7bc:	ea81 0103 	eor.w	r1, r1, r3
 808d7c0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 808d7c4:	bfc2      	ittt	gt
 808d7c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 808d7ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808d7ce:	bd70      	popgt	{r4, r5, r6, pc}
 808d7d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808d7d4:	f04f 0e00 	mov.w	lr, #0
 808d7d8:	3c01      	subs	r4, #1
 808d7da:	f300 80ab 	bgt.w	808d934 <__aeabi_dmul+0x238>
 808d7de:	f114 0f36 	cmn.w	r4, #54	; 0x36
 808d7e2:	bfde      	ittt	le
 808d7e4:	2000      	movle	r0, #0
 808d7e6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 808d7ea:	bd70      	pople	{r4, r5, r6, pc}
 808d7ec:	f1c4 0400 	rsb	r4, r4, #0
 808d7f0:	3c20      	subs	r4, #32
 808d7f2:	da35      	bge.n	808d860 <__aeabi_dmul+0x164>
 808d7f4:	340c      	adds	r4, #12
 808d7f6:	dc1b      	bgt.n	808d830 <__aeabi_dmul+0x134>
 808d7f8:	f104 0414 	add.w	r4, r4, #20
 808d7fc:	f1c4 0520 	rsb	r5, r4, #32
 808d800:	fa00 f305 	lsl.w	r3, r0, r5
 808d804:	fa20 f004 	lsr.w	r0, r0, r4
 808d808:	fa01 f205 	lsl.w	r2, r1, r5
 808d80c:	ea40 0002 	orr.w	r0, r0, r2
 808d810:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 808d814:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 808d818:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 808d81c:	fa21 f604 	lsr.w	r6, r1, r4
 808d820:	eb42 0106 	adc.w	r1, r2, r6
 808d824:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808d828:	bf08      	it	eq
 808d82a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808d82e:	bd70      	pop	{r4, r5, r6, pc}
 808d830:	f1c4 040c 	rsb	r4, r4, #12
 808d834:	f1c4 0520 	rsb	r5, r4, #32
 808d838:	fa00 f304 	lsl.w	r3, r0, r4
 808d83c:	fa20 f005 	lsr.w	r0, r0, r5
 808d840:	fa01 f204 	lsl.w	r2, r1, r4
 808d844:	ea40 0002 	orr.w	r0, r0, r2
 808d848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808d84c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 808d850:	f141 0100 	adc.w	r1, r1, #0
 808d854:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808d858:	bf08      	it	eq
 808d85a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808d85e:	bd70      	pop	{r4, r5, r6, pc}
 808d860:	f1c4 0520 	rsb	r5, r4, #32
 808d864:	fa00 f205 	lsl.w	r2, r0, r5
 808d868:	ea4e 0e02 	orr.w	lr, lr, r2
 808d86c:	fa20 f304 	lsr.w	r3, r0, r4
 808d870:	fa01 f205 	lsl.w	r2, r1, r5
 808d874:	ea43 0302 	orr.w	r3, r3, r2
 808d878:	fa21 f004 	lsr.w	r0, r1, r4
 808d87c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808d880:	fa21 f204 	lsr.w	r2, r1, r4
 808d884:	ea20 0002 	bic.w	r0, r0, r2
 808d888:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 808d88c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808d890:	bf08      	it	eq
 808d892:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808d896:	bd70      	pop	{r4, r5, r6, pc}
 808d898:	f094 0f00 	teq	r4, #0
 808d89c:	d10f      	bne.n	808d8be <__aeabi_dmul+0x1c2>
 808d89e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 808d8a2:	0040      	lsls	r0, r0, #1
 808d8a4:	eb41 0101 	adc.w	r1, r1, r1
 808d8a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808d8ac:	bf08      	it	eq
 808d8ae:	3c01      	subeq	r4, #1
 808d8b0:	d0f7      	beq.n	808d8a2 <__aeabi_dmul+0x1a6>
 808d8b2:	ea41 0106 	orr.w	r1, r1, r6
 808d8b6:	f095 0f00 	teq	r5, #0
 808d8ba:	bf18      	it	ne
 808d8bc:	4770      	bxne	lr
 808d8be:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 808d8c2:	0052      	lsls	r2, r2, #1
 808d8c4:	eb43 0303 	adc.w	r3, r3, r3
 808d8c8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 808d8cc:	bf08      	it	eq
 808d8ce:	3d01      	subeq	r5, #1
 808d8d0:	d0f7      	beq.n	808d8c2 <__aeabi_dmul+0x1c6>
 808d8d2:	ea43 0306 	orr.w	r3, r3, r6
 808d8d6:	4770      	bx	lr
 808d8d8:	ea94 0f0c 	teq	r4, ip
 808d8dc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808d8e0:	bf18      	it	ne
 808d8e2:	ea95 0f0c 	teqne	r5, ip
 808d8e6:	d00c      	beq.n	808d902 <__aeabi_dmul+0x206>
 808d8e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808d8ec:	bf18      	it	ne
 808d8ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808d8f2:	d1d1      	bne.n	808d898 <__aeabi_dmul+0x19c>
 808d8f4:	ea81 0103 	eor.w	r1, r1, r3
 808d8f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808d8fc:	f04f 0000 	mov.w	r0, #0
 808d900:	bd70      	pop	{r4, r5, r6, pc}
 808d902:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808d906:	bf06      	itte	eq
 808d908:	4610      	moveq	r0, r2
 808d90a:	4619      	moveq	r1, r3
 808d90c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808d910:	d019      	beq.n	808d946 <__aeabi_dmul+0x24a>
 808d912:	ea94 0f0c 	teq	r4, ip
 808d916:	d102      	bne.n	808d91e <__aeabi_dmul+0x222>
 808d918:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 808d91c:	d113      	bne.n	808d946 <__aeabi_dmul+0x24a>
 808d91e:	ea95 0f0c 	teq	r5, ip
 808d922:	d105      	bne.n	808d930 <__aeabi_dmul+0x234>
 808d924:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 808d928:	bf1c      	itt	ne
 808d92a:	4610      	movne	r0, r2
 808d92c:	4619      	movne	r1, r3
 808d92e:	d10a      	bne.n	808d946 <__aeabi_dmul+0x24a>
 808d930:	ea81 0103 	eor.w	r1, r1, r3
 808d934:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808d938:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808d93c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 808d940:	f04f 0000 	mov.w	r0, #0
 808d944:	bd70      	pop	{r4, r5, r6, pc}
 808d946:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808d94a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 808d94e:	bd70      	pop	{r4, r5, r6, pc}

0808d950 <__aeabi_ddiv>:
 808d950:	b570      	push	{r4, r5, r6, lr}
 808d952:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808d956:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808d95a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808d95e:	bf1d      	ittte	ne
 808d960:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 808d964:	ea94 0f0c 	teqne	r4, ip
 808d968:	ea95 0f0c 	teqne	r5, ip
 808d96c:	f000 f8a7 	bleq	808dabe <__aeabi_ddiv+0x16e>
 808d970:	eba4 0405 	sub.w	r4, r4, r5
 808d974:	ea81 0e03 	eor.w	lr, r1, r3
 808d978:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808d97c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 808d980:	f000 8088 	beq.w	808da94 <__aeabi_ddiv+0x144>
 808d984:	ea4f 3303 	mov.w	r3, r3, lsl #12
 808d988:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 808d98c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 808d990:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 808d994:	ea4f 2202 	mov.w	r2, r2, lsl #8
 808d998:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 808d99c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 808d9a0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 808d9a4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 808d9a8:	429d      	cmp	r5, r3
 808d9aa:	bf08      	it	eq
 808d9ac:	4296      	cmpeq	r6, r2
 808d9ae:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 808d9b2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 808d9b6:	d202      	bcs.n	808d9be <__aeabi_ddiv+0x6e>
 808d9b8:	085b      	lsrs	r3, r3, #1
 808d9ba:	ea4f 0232 	mov.w	r2, r2, rrx
 808d9be:	1ab6      	subs	r6, r6, r2
 808d9c0:	eb65 0503 	sbc.w	r5, r5, r3
 808d9c4:	085b      	lsrs	r3, r3, #1
 808d9c6:	ea4f 0232 	mov.w	r2, r2, rrx
 808d9ca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 808d9ce:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 808d9d2:	ebb6 0e02 	subs.w	lr, r6, r2
 808d9d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 808d9da:	bf22      	ittt	cs
 808d9dc:	1ab6      	subcs	r6, r6, r2
 808d9de:	4675      	movcs	r5, lr
 808d9e0:	ea40 000c 	orrcs.w	r0, r0, ip
 808d9e4:	085b      	lsrs	r3, r3, #1
 808d9e6:	ea4f 0232 	mov.w	r2, r2, rrx
 808d9ea:	ebb6 0e02 	subs.w	lr, r6, r2
 808d9ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 808d9f2:	bf22      	ittt	cs
 808d9f4:	1ab6      	subcs	r6, r6, r2
 808d9f6:	4675      	movcs	r5, lr
 808d9f8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808d9fc:	085b      	lsrs	r3, r3, #1
 808d9fe:	ea4f 0232 	mov.w	r2, r2, rrx
 808da02:	ebb6 0e02 	subs.w	lr, r6, r2
 808da06:	eb75 0e03 	sbcs.w	lr, r5, r3
 808da0a:	bf22      	ittt	cs
 808da0c:	1ab6      	subcs	r6, r6, r2
 808da0e:	4675      	movcs	r5, lr
 808da10:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808da14:	085b      	lsrs	r3, r3, #1
 808da16:	ea4f 0232 	mov.w	r2, r2, rrx
 808da1a:	ebb6 0e02 	subs.w	lr, r6, r2
 808da1e:	eb75 0e03 	sbcs.w	lr, r5, r3
 808da22:	bf22      	ittt	cs
 808da24:	1ab6      	subcs	r6, r6, r2
 808da26:	4675      	movcs	r5, lr
 808da28:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808da2c:	ea55 0e06 	orrs.w	lr, r5, r6
 808da30:	d018      	beq.n	808da64 <__aeabi_ddiv+0x114>
 808da32:	ea4f 1505 	mov.w	r5, r5, lsl #4
 808da36:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 808da3a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 808da3e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 808da42:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 808da46:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 808da4a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 808da4e:	d1c0      	bne.n	808d9d2 <__aeabi_ddiv+0x82>
 808da50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808da54:	d10b      	bne.n	808da6e <__aeabi_ddiv+0x11e>
 808da56:	ea41 0100 	orr.w	r1, r1, r0
 808da5a:	f04f 0000 	mov.w	r0, #0
 808da5e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 808da62:	e7b6      	b.n	808d9d2 <__aeabi_ddiv+0x82>
 808da64:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808da68:	bf04      	itt	eq
 808da6a:	4301      	orreq	r1, r0
 808da6c:	2000      	moveq	r0, #0
 808da6e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808da72:	bf88      	it	hi
 808da74:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 808da78:	f63f aeaf 	bhi.w	808d7da <__aeabi_dmul+0xde>
 808da7c:	ebb5 0c03 	subs.w	ip, r5, r3
 808da80:	bf04      	itt	eq
 808da82:	ebb6 0c02 	subseq.w	ip, r6, r2
 808da86:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808da8a:	f150 0000 	adcs.w	r0, r0, #0
 808da8e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808da92:	bd70      	pop	{r4, r5, r6, pc}
 808da94:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 808da98:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 808da9c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 808daa0:	bfc2      	ittt	gt
 808daa2:	ebd4 050c 	rsbsgt	r5, r4, ip
 808daa6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808daaa:	bd70      	popgt	{r4, r5, r6, pc}
 808daac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808dab0:	f04f 0e00 	mov.w	lr, #0
 808dab4:	3c01      	subs	r4, #1
 808dab6:	e690      	b.n	808d7da <__aeabi_dmul+0xde>
 808dab8:	ea45 0e06 	orr.w	lr, r5, r6
 808dabc:	e68d      	b.n	808d7da <__aeabi_dmul+0xde>
 808dabe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808dac2:	ea94 0f0c 	teq	r4, ip
 808dac6:	bf08      	it	eq
 808dac8:	ea95 0f0c 	teqeq	r5, ip
 808dacc:	f43f af3b 	beq.w	808d946 <__aeabi_dmul+0x24a>
 808dad0:	ea94 0f0c 	teq	r4, ip
 808dad4:	d10a      	bne.n	808daec <__aeabi_ddiv+0x19c>
 808dad6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808dada:	f47f af34 	bne.w	808d946 <__aeabi_dmul+0x24a>
 808dade:	ea95 0f0c 	teq	r5, ip
 808dae2:	f47f af25 	bne.w	808d930 <__aeabi_dmul+0x234>
 808dae6:	4610      	mov	r0, r2
 808dae8:	4619      	mov	r1, r3
 808daea:	e72c      	b.n	808d946 <__aeabi_dmul+0x24a>
 808daec:	ea95 0f0c 	teq	r5, ip
 808daf0:	d106      	bne.n	808db00 <__aeabi_ddiv+0x1b0>
 808daf2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808daf6:	f43f aefd 	beq.w	808d8f4 <__aeabi_dmul+0x1f8>
 808dafa:	4610      	mov	r0, r2
 808dafc:	4619      	mov	r1, r3
 808dafe:	e722      	b.n	808d946 <__aeabi_dmul+0x24a>
 808db00:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808db04:	bf18      	it	ne
 808db06:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808db0a:	f47f aec5 	bne.w	808d898 <__aeabi_dmul+0x19c>
 808db0e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 808db12:	f47f af0d 	bne.w	808d930 <__aeabi_dmul+0x234>
 808db16:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 808db1a:	f47f aeeb 	bne.w	808d8f4 <__aeabi_dmul+0x1f8>
 808db1e:	e712      	b.n	808d946 <__aeabi_dmul+0x24a>

0808db20 <__gedf2>:
 808db20:	f04f 3cff 	mov.w	ip, #4294967295
 808db24:	e006      	b.n	808db34 <__cmpdf2+0x4>
 808db26:	bf00      	nop

0808db28 <__ledf2>:
 808db28:	f04f 0c01 	mov.w	ip, #1
 808db2c:	e002      	b.n	808db34 <__cmpdf2+0x4>
 808db2e:	bf00      	nop

0808db30 <__cmpdf2>:
 808db30:	f04f 0c01 	mov.w	ip, #1
 808db34:	f84d cd04 	str.w	ip, [sp, #-4]!
 808db38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808db3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808db40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808db44:	bf18      	it	ne
 808db46:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 808db4a:	d01b      	beq.n	808db84 <__cmpdf2+0x54>
 808db4c:	b001      	add	sp, #4
 808db4e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 808db52:	bf0c      	ite	eq
 808db54:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 808db58:	ea91 0f03 	teqne	r1, r3
 808db5c:	bf02      	ittt	eq
 808db5e:	ea90 0f02 	teqeq	r0, r2
 808db62:	2000      	moveq	r0, #0
 808db64:	4770      	bxeq	lr
 808db66:	f110 0f00 	cmn.w	r0, #0
 808db6a:	ea91 0f03 	teq	r1, r3
 808db6e:	bf58      	it	pl
 808db70:	4299      	cmppl	r1, r3
 808db72:	bf08      	it	eq
 808db74:	4290      	cmpeq	r0, r2
 808db76:	bf2c      	ite	cs
 808db78:	17d8      	asrcs	r0, r3, #31
 808db7a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 808db7e:	f040 0001 	orr.w	r0, r0, #1
 808db82:	4770      	bx	lr
 808db84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808db88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808db8c:	d102      	bne.n	808db94 <__cmpdf2+0x64>
 808db8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808db92:	d107      	bne.n	808dba4 <__cmpdf2+0x74>
 808db94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808db98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808db9c:	d1d6      	bne.n	808db4c <__cmpdf2+0x1c>
 808db9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808dba2:	d0d3      	beq.n	808db4c <__cmpdf2+0x1c>
 808dba4:	f85d 0b04 	ldr.w	r0, [sp], #4
 808dba8:	4770      	bx	lr
 808dbaa:	bf00      	nop

0808dbac <__aeabi_cdrcmple>:
 808dbac:	4684      	mov	ip, r0
 808dbae:	4610      	mov	r0, r2
 808dbb0:	4662      	mov	r2, ip
 808dbb2:	468c      	mov	ip, r1
 808dbb4:	4619      	mov	r1, r3
 808dbb6:	4663      	mov	r3, ip
 808dbb8:	e000      	b.n	808dbbc <__aeabi_cdcmpeq>
 808dbba:	bf00      	nop

0808dbbc <__aeabi_cdcmpeq>:
 808dbbc:	b501      	push	{r0, lr}
 808dbbe:	f7ff ffb7 	bl	808db30 <__cmpdf2>
 808dbc2:	2800      	cmp	r0, #0
 808dbc4:	bf48      	it	mi
 808dbc6:	f110 0f00 	cmnmi.w	r0, #0
 808dbca:	bd01      	pop	{r0, pc}

0808dbcc <__aeabi_dcmpeq>:
 808dbcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 808dbd0:	f7ff fff4 	bl	808dbbc <__aeabi_cdcmpeq>
 808dbd4:	bf0c      	ite	eq
 808dbd6:	2001      	moveq	r0, #1
 808dbd8:	2000      	movne	r0, #0
 808dbda:	f85d fb08 	ldr.w	pc, [sp], #8
 808dbde:	bf00      	nop

0808dbe0 <__aeabi_dcmplt>:
 808dbe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 808dbe4:	f7ff ffea 	bl	808dbbc <__aeabi_cdcmpeq>
 808dbe8:	bf34      	ite	cc
 808dbea:	2001      	movcc	r0, #1
 808dbec:	2000      	movcs	r0, #0
 808dbee:	f85d fb08 	ldr.w	pc, [sp], #8
 808dbf2:	bf00      	nop

0808dbf4 <__aeabi_dcmple>:
 808dbf4:	f84d ed08 	str.w	lr, [sp, #-8]!
 808dbf8:	f7ff ffe0 	bl	808dbbc <__aeabi_cdcmpeq>
 808dbfc:	bf94      	ite	ls
 808dbfe:	2001      	movls	r0, #1
 808dc00:	2000      	movhi	r0, #0
 808dc02:	f85d fb08 	ldr.w	pc, [sp], #8
 808dc06:	bf00      	nop

0808dc08 <__aeabi_dcmpge>:
 808dc08:	f84d ed08 	str.w	lr, [sp, #-8]!
 808dc0c:	f7ff ffce 	bl	808dbac <__aeabi_cdrcmple>
 808dc10:	bf94      	ite	ls
 808dc12:	2001      	movls	r0, #1
 808dc14:	2000      	movhi	r0, #0
 808dc16:	f85d fb08 	ldr.w	pc, [sp], #8
 808dc1a:	bf00      	nop

0808dc1c <__aeabi_dcmpgt>:
 808dc1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 808dc20:	f7ff ffc4 	bl	808dbac <__aeabi_cdrcmple>
 808dc24:	bf34      	ite	cc
 808dc26:	2001      	movcc	r0, #1
 808dc28:	2000      	movcs	r0, #0
 808dc2a:	f85d fb08 	ldr.w	pc, [sp], #8
 808dc2e:	bf00      	nop

0808dc30 <__aeabi_dcmpun>:
 808dc30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808dc34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808dc38:	d102      	bne.n	808dc40 <__aeabi_dcmpun+0x10>
 808dc3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808dc3e:	d10a      	bne.n	808dc56 <__aeabi_dcmpun+0x26>
 808dc40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808dc44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808dc48:	d102      	bne.n	808dc50 <__aeabi_dcmpun+0x20>
 808dc4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808dc4e:	d102      	bne.n	808dc56 <__aeabi_dcmpun+0x26>
 808dc50:	f04f 0000 	mov.w	r0, #0
 808dc54:	4770      	bx	lr
 808dc56:	f04f 0001 	mov.w	r0, #1
 808dc5a:	4770      	bx	lr

0808dc5c <__aeabi_d2iz>:
 808dc5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808dc60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 808dc64:	d215      	bcs.n	808dc92 <__aeabi_d2iz+0x36>
 808dc66:	d511      	bpl.n	808dc8c <__aeabi_d2iz+0x30>
 808dc68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 808dc6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 808dc70:	d912      	bls.n	808dc98 <__aeabi_d2iz+0x3c>
 808dc72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808dc76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808dc7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808dc7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808dc82:	fa23 f002 	lsr.w	r0, r3, r2
 808dc86:	bf18      	it	ne
 808dc88:	4240      	negne	r0, r0
 808dc8a:	4770      	bx	lr
 808dc8c:	f04f 0000 	mov.w	r0, #0
 808dc90:	4770      	bx	lr
 808dc92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808dc96:	d105      	bne.n	808dca4 <__aeabi_d2iz+0x48>
 808dc98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 808dc9c:	bf08      	it	eq
 808dc9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808dca2:	4770      	bx	lr
 808dca4:	f04f 0000 	mov.w	r0, #0
 808dca8:	4770      	bx	lr
 808dcaa:	bf00      	nop

0808dcac <__aeabi_d2uiz>:
 808dcac:	004a      	lsls	r2, r1, #1
 808dcae:	d211      	bcs.n	808dcd4 <__aeabi_d2uiz+0x28>
 808dcb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 808dcb4:	d211      	bcs.n	808dcda <__aeabi_d2uiz+0x2e>
 808dcb6:	d50d      	bpl.n	808dcd4 <__aeabi_d2uiz+0x28>
 808dcb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 808dcbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 808dcc0:	d40e      	bmi.n	808dce0 <__aeabi_d2uiz+0x34>
 808dcc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808dcc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808dcca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808dcce:	fa23 f002 	lsr.w	r0, r3, r2
 808dcd2:	4770      	bx	lr
 808dcd4:	f04f 0000 	mov.w	r0, #0
 808dcd8:	4770      	bx	lr
 808dcda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808dcde:	d102      	bne.n	808dce6 <__aeabi_d2uiz+0x3a>
 808dce0:	f04f 30ff 	mov.w	r0, #4294967295
 808dce4:	4770      	bx	lr
 808dce6:	f04f 0000 	mov.w	r0, #0
 808dcea:	4770      	bx	lr

0808dcec <__aeabi_d2f>:
 808dcec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808dcf0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 808dcf4:	bf24      	itt	cs
 808dcf6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 808dcfa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 808dcfe:	d90d      	bls.n	808dd1c <__aeabi_d2f+0x30>
 808dd00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808dd04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 808dd08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 808dd0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 808dd10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 808dd14:	bf08      	it	eq
 808dd16:	f020 0001 	biceq.w	r0, r0, #1
 808dd1a:	4770      	bx	lr
 808dd1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 808dd20:	d121      	bne.n	808dd66 <__aeabi_d2f+0x7a>
 808dd22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 808dd26:	bfbc      	itt	lt
 808dd28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 808dd2c:	4770      	bxlt	lr
 808dd2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808dd32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 808dd36:	f1c2 0218 	rsb	r2, r2, #24
 808dd3a:	f1c2 0c20 	rsb	ip, r2, #32
 808dd3e:	fa10 f30c 	lsls.w	r3, r0, ip
 808dd42:	fa20 f002 	lsr.w	r0, r0, r2
 808dd46:	bf18      	it	ne
 808dd48:	f040 0001 	orrne.w	r0, r0, #1
 808dd4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808dd50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 808dd54:	fa03 fc0c 	lsl.w	ip, r3, ip
 808dd58:	ea40 000c 	orr.w	r0, r0, ip
 808dd5c:	fa23 f302 	lsr.w	r3, r3, r2
 808dd60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 808dd64:	e7cc      	b.n	808dd00 <__aeabi_d2f+0x14>
 808dd66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 808dd6a:	d107      	bne.n	808dd7c <__aeabi_d2f+0x90>
 808dd6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 808dd70:	bf1e      	ittt	ne
 808dd72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 808dd76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 808dd7a:	4770      	bxne	lr
 808dd7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 808dd80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808dd84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808dd88:	4770      	bx	lr
 808dd8a:	bf00      	nop

0808dd8c <__aeabi_frsub>:
 808dd8c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 808dd90:	e002      	b.n	808dd98 <__addsf3>
 808dd92:	bf00      	nop

0808dd94 <__aeabi_fsub>:
 808dd94:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0808dd98 <__addsf3>:
 808dd98:	0042      	lsls	r2, r0, #1
 808dd9a:	bf1f      	itttt	ne
 808dd9c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 808dda0:	ea92 0f03 	teqne	r2, r3
 808dda4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 808dda8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808ddac:	d06a      	beq.n	808de84 <__addsf3+0xec>
 808ddae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 808ddb2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 808ddb6:	bfc1      	itttt	gt
 808ddb8:	18d2      	addgt	r2, r2, r3
 808ddba:	4041      	eorgt	r1, r0
 808ddbc:	4048      	eorgt	r0, r1
 808ddbe:	4041      	eorgt	r1, r0
 808ddc0:	bfb8      	it	lt
 808ddc2:	425b      	neglt	r3, r3
 808ddc4:	2b19      	cmp	r3, #25
 808ddc6:	bf88      	it	hi
 808ddc8:	4770      	bxhi	lr
 808ddca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808ddce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808ddd2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 808ddd6:	bf18      	it	ne
 808ddd8:	4240      	negne	r0, r0
 808ddda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808ddde:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 808dde2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 808dde6:	bf18      	it	ne
 808dde8:	4249      	negne	r1, r1
 808ddea:	ea92 0f03 	teq	r2, r3
 808ddee:	d03f      	beq.n	808de70 <__addsf3+0xd8>
 808ddf0:	f1a2 0201 	sub.w	r2, r2, #1
 808ddf4:	fa41 fc03 	asr.w	ip, r1, r3
 808ddf8:	eb10 000c 	adds.w	r0, r0, ip
 808ddfc:	f1c3 0320 	rsb	r3, r3, #32
 808de00:	fa01 f103 	lsl.w	r1, r1, r3
 808de04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808de08:	d502      	bpl.n	808de10 <__addsf3+0x78>
 808de0a:	4249      	negs	r1, r1
 808de0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 808de10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 808de14:	d313      	bcc.n	808de3e <__addsf3+0xa6>
 808de16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 808de1a:	d306      	bcc.n	808de2a <__addsf3+0x92>
 808de1c:	0840      	lsrs	r0, r0, #1
 808de1e:	ea4f 0131 	mov.w	r1, r1, rrx
 808de22:	f102 0201 	add.w	r2, r2, #1
 808de26:	2afe      	cmp	r2, #254	; 0xfe
 808de28:	d251      	bcs.n	808dece <__addsf3+0x136>
 808de2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 808de2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808de32:	bf08      	it	eq
 808de34:	f020 0001 	biceq.w	r0, r0, #1
 808de38:	ea40 0003 	orr.w	r0, r0, r3
 808de3c:	4770      	bx	lr
 808de3e:	0049      	lsls	r1, r1, #1
 808de40:	eb40 0000 	adc.w	r0, r0, r0
 808de44:	3a01      	subs	r2, #1
 808de46:	bf28      	it	cs
 808de48:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 808de4c:	d2ed      	bcs.n	808de2a <__addsf3+0x92>
 808de4e:	fab0 fc80 	clz	ip, r0
 808de52:	f1ac 0c08 	sub.w	ip, ip, #8
 808de56:	ebb2 020c 	subs.w	r2, r2, ip
 808de5a:	fa00 f00c 	lsl.w	r0, r0, ip
 808de5e:	bfaa      	itet	ge
 808de60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 808de64:	4252      	neglt	r2, r2
 808de66:	4318      	orrge	r0, r3
 808de68:	bfbc      	itt	lt
 808de6a:	40d0      	lsrlt	r0, r2
 808de6c:	4318      	orrlt	r0, r3
 808de6e:	4770      	bx	lr
 808de70:	f092 0f00 	teq	r2, #0
 808de74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 808de78:	bf06      	itte	eq
 808de7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 808de7e:	3201      	addeq	r2, #1
 808de80:	3b01      	subne	r3, #1
 808de82:	e7b5      	b.n	808ddf0 <__addsf3+0x58>
 808de84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808de88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808de8c:	bf18      	it	ne
 808de8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808de92:	d021      	beq.n	808ded8 <__addsf3+0x140>
 808de94:	ea92 0f03 	teq	r2, r3
 808de98:	d004      	beq.n	808dea4 <__addsf3+0x10c>
 808de9a:	f092 0f00 	teq	r2, #0
 808de9e:	bf08      	it	eq
 808dea0:	4608      	moveq	r0, r1
 808dea2:	4770      	bx	lr
 808dea4:	ea90 0f01 	teq	r0, r1
 808dea8:	bf1c      	itt	ne
 808deaa:	2000      	movne	r0, #0
 808deac:	4770      	bxne	lr
 808deae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 808deb2:	d104      	bne.n	808debe <__addsf3+0x126>
 808deb4:	0040      	lsls	r0, r0, #1
 808deb6:	bf28      	it	cs
 808deb8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 808debc:	4770      	bx	lr
 808debe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 808dec2:	bf3c      	itt	cc
 808dec4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 808dec8:	4770      	bxcc	lr
 808deca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808dece:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 808ded2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808ded6:	4770      	bx	lr
 808ded8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 808dedc:	bf16      	itet	ne
 808dede:	4608      	movne	r0, r1
 808dee0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 808dee4:	4601      	movne	r1, r0
 808dee6:	0242      	lsls	r2, r0, #9
 808dee8:	bf06      	itte	eq
 808deea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 808deee:	ea90 0f01 	teqeq	r0, r1
 808def2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 808def6:	4770      	bx	lr

0808def8 <__aeabi_ui2f>:
 808def8:	f04f 0300 	mov.w	r3, #0
 808defc:	e004      	b.n	808df08 <__aeabi_i2f+0x8>
 808defe:	bf00      	nop

0808df00 <__aeabi_i2f>:
 808df00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 808df04:	bf48      	it	mi
 808df06:	4240      	negmi	r0, r0
 808df08:	ea5f 0c00 	movs.w	ip, r0
 808df0c:	bf08      	it	eq
 808df0e:	4770      	bxeq	lr
 808df10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 808df14:	4601      	mov	r1, r0
 808df16:	f04f 0000 	mov.w	r0, #0
 808df1a:	e01c      	b.n	808df56 <__aeabi_l2f+0x2a>

0808df1c <__aeabi_ul2f>:
 808df1c:	ea50 0201 	orrs.w	r2, r0, r1
 808df20:	bf08      	it	eq
 808df22:	4770      	bxeq	lr
 808df24:	f04f 0300 	mov.w	r3, #0
 808df28:	e00a      	b.n	808df40 <__aeabi_l2f+0x14>
 808df2a:	bf00      	nop

0808df2c <__aeabi_l2f>:
 808df2c:	ea50 0201 	orrs.w	r2, r0, r1
 808df30:	bf08      	it	eq
 808df32:	4770      	bxeq	lr
 808df34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 808df38:	d502      	bpl.n	808df40 <__aeabi_l2f+0x14>
 808df3a:	4240      	negs	r0, r0
 808df3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808df40:	ea5f 0c01 	movs.w	ip, r1
 808df44:	bf02      	ittt	eq
 808df46:	4684      	moveq	ip, r0
 808df48:	4601      	moveq	r1, r0
 808df4a:	2000      	moveq	r0, #0
 808df4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 808df50:	bf08      	it	eq
 808df52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 808df56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 808df5a:	fabc f28c 	clz	r2, ip
 808df5e:	3a08      	subs	r2, #8
 808df60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 808df64:	db10      	blt.n	808df88 <__aeabi_l2f+0x5c>
 808df66:	fa01 fc02 	lsl.w	ip, r1, r2
 808df6a:	4463      	add	r3, ip
 808df6c:	fa00 fc02 	lsl.w	ip, r0, r2
 808df70:	f1c2 0220 	rsb	r2, r2, #32
 808df74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 808df78:	fa20 f202 	lsr.w	r2, r0, r2
 808df7c:	eb43 0002 	adc.w	r0, r3, r2
 808df80:	bf08      	it	eq
 808df82:	f020 0001 	biceq.w	r0, r0, #1
 808df86:	4770      	bx	lr
 808df88:	f102 0220 	add.w	r2, r2, #32
 808df8c:	fa01 fc02 	lsl.w	ip, r1, r2
 808df90:	f1c2 0220 	rsb	r2, r2, #32
 808df94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 808df98:	fa21 f202 	lsr.w	r2, r1, r2
 808df9c:	eb43 0002 	adc.w	r0, r3, r2
 808dfa0:	bf08      	it	eq
 808dfa2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808dfa6:	4770      	bx	lr

0808dfa8 <__aeabi_fmul>:
 808dfa8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808dfac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808dfb0:	bf1e      	ittt	ne
 808dfb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808dfb6:	ea92 0f0c 	teqne	r2, ip
 808dfba:	ea93 0f0c 	teqne	r3, ip
 808dfbe:	d06f      	beq.n	808e0a0 <__aeabi_fmul+0xf8>
 808dfc0:	441a      	add	r2, r3
 808dfc2:	ea80 0c01 	eor.w	ip, r0, r1
 808dfc6:	0240      	lsls	r0, r0, #9
 808dfc8:	bf18      	it	ne
 808dfca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 808dfce:	d01e      	beq.n	808e00e <__aeabi_fmul+0x66>
 808dfd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 808dfd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 808dfd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 808dfdc:	fba0 3101 	umull	r3, r1, r0, r1
 808dfe0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808dfe4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 808dfe8:	bf3e      	ittt	cc
 808dfea:	0049      	lslcc	r1, r1, #1
 808dfec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 808dff0:	005b      	lslcc	r3, r3, #1
 808dff2:	ea40 0001 	orr.w	r0, r0, r1
 808dff6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 808dffa:	2afd      	cmp	r2, #253	; 0xfd
 808dffc:	d81d      	bhi.n	808e03a <__aeabi_fmul+0x92>
 808dffe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 808e002:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808e006:	bf08      	it	eq
 808e008:	f020 0001 	biceq.w	r0, r0, #1
 808e00c:	4770      	bx	lr
 808e00e:	f090 0f00 	teq	r0, #0
 808e012:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808e016:	bf08      	it	eq
 808e018:	0249      	lsleq	r1, r1, #9
 808e01a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808e01e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 808e022:	3a7f      	subs	r2, #127	; 0x7f
 808e024:	bfc2      	ittt	gt
 808e026:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808e02a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808e02e:	4770      	bxgt	lr
 808e030:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808e034:	f04f 0300 	mov.w	r3, #0
 808e038:	3a01      	subs	r2, #1
 808e03a:	dc5d      	bgt.n	808e0f8 <__aeabi_fmul+0x150>
 808e03c:	f112 0f19 	cmn.w	r2, #25
 808e040:	bfdc      	itt	le
 808e042:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 808e046:	4770      	bxle	lr
 808e048:	f1c2 0200 	rsb	r2, r2, #0
 808e04c:	0041      	lsls	r1, r0, #1
 808e04e:	fa21 f102 	lsr.w	r1, r1, r2
 808e052:	f1c2 0220 	rsb	r2, r2, #32
 808e056:	fa00 fc02 	lsl.w	ip, r0, r2
 808e05a:	ea5f 0031 	movs.w	r0, r1, rrx
 808e05e:	f140 0000 	adc.w	r0, r0, #0
 808e062:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 808e066:	bf08      	it	eq
 808e068:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808e06c:	4770      	bx	lr
 808e06e:	f092 0f00 	teq	r2, #0
 808e072:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808e076:	bf02      	ittt	eq
 808e078:	0040      	lsleq	r0, r0, #1
 808e07a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808e07e:	3a01      	subeq	r2, #1
 808e080:	d0f9      	beq.n	808e076 <__aeabi_fmul+0xce>
 808e082:	ea40 000c 	orr.w	r0, r0, ip
 808e086:	f093 0f00 	teq	r3, #0
 808e08a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808e08e:	bf02      	ittt	eq
 808e090:	0049      	lsleq	r1, r1, #1
 808e092:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808e096:	3b01      	subeq	r3, #1
 808e098:	d0f9      	beq.n	808e08e <__aeabi_fmul+0xe6>
 808e09a:	ea41 010c 	orr.w	r1, r1, ip
 808e09e:	e78f      	b.n	808dfc0 <__aeabi_fmul+0x18>
 808e0a0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 808e0a4:	ea92 0f0c 	teq	r2, ip
 808e0a8:	bf18      	it	ne
 808e0aa:	ea93 0f0c 	teqne	r3, ip
 808e0ae:	d00a      	beq.n	808e0c6 <__aeabi_fmul+0x11e>
 808e0b0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808e0b4:	bf18      	it	ne
 808e0b6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808e0ba:	d1d8      	bne.n	808e06e <__aeabi_fmul+0xc6>
 808e0bc:	ea80 0001 	eor.w	r0, r0, r1
 808e0c0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808e0c4:	4770      	bx	lr
 808e0c6:	f090 0f00 	teq	r0, #0
 808e0ca:	bf17      	itett	ne
 808e0cc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 808e0d0:	4608      	moveq	r0, r1
 808e0d2:	f091 0f00 	teqne	r1, #0
 808e0d6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 808e0da:	d014      	beq.n	808e106 <__aeabi_fmul+0x15e>
 808e0dc:	ea92 0f0c 	teq	r2, ip
 808e0e0:	d101      	bne.n	808e0e6 <__aeabi_fmul+0x13e>
 808e0e2:	0242      	lsls	r2, r0, #9
 808e0e4:	d10f      	bne.n	808e106 <__aeabi_fmul+0x15e>
 808e0e6:	ea93 0f0c 	teq	r3, ip
 808e0ea:	d103      	bne.n	808e0f4 <__aeabi_fmul+0x14c>
 808e0ec:	024b      	lsls	r3, r1, #9
 808e0ee:	bf18      	it	ne
 808e0f0:	4608      	movne	r0, r1
 808e0f2:	d108      	bne.n	808e106 <__aeabi_fmul+0x15e>
 808e0f4:	ea80 0001 	eor.w	r0, r0, r1
 808e0f8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808e0fc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808e100:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808e104:	4770      	bx	lr
 808e106:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808e10a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 808e10e:	4770      	bx	lr

0808e110 <__aeabi_fdiv>:
 808e110:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808e114:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808e118:	bf1e      	ittt	ne
 808e11a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808e11e:	ea92 0f0c 	teqne	r2, ip
 808e122:	ea93 0f0c 	teqne	r3, ip
 808e126:	d069      	beq.n	808e1fc <__aeabi_fdiv+0xec>
 808e128:	eba2 0203 	sub.w	r2, r2, r3
 808e12c:	ea80 0c01 	eor.w	ip, r0, r1
 808e130:	0249      	lsls	r1, r1, #9
 808e132:	ea4f 2040 	mov.w	r0, r0, lsl #9
 808e136:	d037      	beq.n	808e1a8 <__aeabi_fdiv+0x98>
 808e138:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 808e13c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 808e140:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 808e144:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808e148:	428b      	cmp	r3, r1
 808e14a:	bf38      	it	cc
 808e14c:	005b      	lslcc	r3, r3, #1
 808e14e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 808e152:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 808e156:	428b      	cmp	r3, r1
 808e158:	bf24      	itt	cs
 808e15a:	1a5b      	subcs	r3, r3, r1
 808e15c:	ea40 000c 	orrcs.w	r0, r0, ip
 808e160:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 808e164:	bf24      	itt	cs
 808e166:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 808e16a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808e16e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 808e172:	bf24      	itt	cs
 808e174:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 808e178:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808e17c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 808e180:	bf24      	itt	cs
 808e182:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 808e186:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808e18a:	011b      	lsls	r3, r3, #4
 808e18c:	bf18      	it	ne
 808e18e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 808e192:	d1e0      	bne.n	808e156 <__aeabi_fdiv+0x46>
 808e194:	2afd      	cmp	r2, #253	; 0xfd
 808e196:	f63f af50 	bhi.w	808e03a <__aeabi_fmul+0x92>
 808e19a:	428b      	cmp	r3, r1
 808e19c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808e1a0:	bf08      	it	eq
 808e1a2:	f020 0001 	biceq.w	r0, r0, #1
 808e1a6:	4770      	bx	lr
 808e1a8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808e1ac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808e1b0:	327f      	adds	r2, #127	; 0x7f
 808e1b2:	bfc2      	ittt	gt
 808e1b4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808e1b8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808e1bc:	4770      	bxgt	lr
 808e1be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808e1c2:	f04f 0300 	mov.w	r3, #0
 808e1c6:	3a01      	subs	r2, #1
 808e1c8:	e737      	b.n	808e03a <__aeabi_fmul+0x92>
 808e1ca:	f092 0f00 	teq	r2, #0
 808e1ce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808e1d2:	bf02      	ittt	eq
 808e1d4:	0040      	lsleq	r0, r0, #1
 808e1d6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808e1da:	3a01      	subeq	r2, #1
 808e1dc:	d0f9      	beq.n	808e1d2 <__aeabi_fdiv+0xc2>
 808e1de:	ea40 000c 	orr.w	r0, r0, ip
 808e1e2:	f093 0f00 	teq	r3, #0
 808e1e6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808e1ea:	bf02      	ittt	eq
 808e1ec:	0049      	lsleq	r1, r1, #1
 808e1ee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808e1f2:	3b01      	subeq	r3, #1
 808e1f4:	d0f9      	beq.n	808e1ea <__aeabi_fdiv+0xda>
 808e1f6:	ea41 010c 	orr.w	r1, r1, ip
 808e1fa:	e795      	b.n	808e128 <__aeabi_fdiv+0x18>
 808e1fc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 808e200:	ea92 0f0c 	teq	r2, ip
 808e204:	d108      	bne.n	808e218 <__aeabi_fdiv+0x108>
 808e206:	0242      	lsls	r2, r0, #9
 808e208:	f47f af7d 	bne.w	808e106 <__aeabi_fmul+0x15e>
 808e20c:	ea93 0f0c 	teq	r3, ip
 808e210:	f47f af70 	bne.w	808e0f4 <__aeabi_fmul+0x14c>
 808e214:	4608      	mov	r0, r1
 808e216:	e776      	b.n	808e106 <__aeabi_fmul+0x15e>
 808e218:	ea93 0f0c 	teq	r3, ip
 808e21c:	d104      	bne.n	808e228 <__aeabi_fdiv+0x118>
 808e21e:	024b      	lsls	r3, r1, #9
 808e220:	f43f af4c 	beq.w	808e0bc <__aeabi_fmul+0x114>
 808e224:	4608      	mov	r0, r1
 808e226:	e76e      	b.n	808e106 <__aeabi_fmul+0x15e>
 808e228:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808e22c:	bf18      	it	ne
 808e22e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808e232:	d1ca      	bne.n	808e1ca <__aeabi_fdiv+0xba>
 808e234:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 808e238:	f47f af5c 	bne.w	808e0f4 <__aeabi_fmul+0x14c>
 808e23c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 808e240:	f47f af3c 	bne.w	808e0bc <__aeabi_fmul+0x114>
 808e244:	e75f      	b.n	808e106 <__aeabi_fmul+0x15e>
 808e246:	bf00      	nop

0808e248 <__gesf2>:
 808e248:	f04f 3cff 	mov.w	ip, #4294967295
 808e24c:	e006      	b.n	808e25c <__cmpsf2+0x4>
 808e24e:	bf00      	nop

0808e250 <__lesf2>:
 808e250:	f04f 0c01 	mov.w	ip, #1
 808e254:	e002      	b.n	808e25c <__cmpsf2+0x4>
 808e256:	bf00      	nop

0808e258 <__cmpsf2>:
 808e258:	f04f 0c01 	mov.w	ip, #1
 808e25c:	f84d cd04 	str.w	ip, [sp, #-4]!
 808e260:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808e264:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808e268:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808e26c:	bf18      	it	ne
 808e26e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808e272:	d011      	beq.n	808e298 <__cmpsf2+0x40>
 808e274:	b001      	add	sp, #4
 808e276:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 808e27a:	bf18      	it	ne
 808e27c:	ea90 0f01 	teqne	r0, r1
 808e280:	bf58      	it	pl
 808e282:	ebb2 0003 	subspl.w	r0, r2, r3
 808e286:	bf88      	it	hi
 808e288:	17c8      	asrhi	r0, r1, #31
 808e28a:	bf38      	it	cc
 808e28c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 808e290:	bf18      	it	ne
 808e292:	f040 0001 	orrne.w	r0, r0, #1
 808e296:	4770      	bx	lr
 808e298:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808e29c:	d102      	bne.n	808e2a4 <__cmpsf2+0x4c>
 808e29e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 808e2a2:	d105      	bne.n	808e2b0 <__cmpsf2+0x58>
 808e2a4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 808e2a8:	d1e4      	bne.n	808e274 <__cmpsf2+0x1c>
 808e2aa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 808e2ae:	d0e1      	beq.n	808e274 <__cmpsf2+0x1c>
 808e2b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 808e2b4:	4770      	bx	lr
 808e2b6:	bf00      	nop

0808e2b8 <__aeabi_cfrcmple>:
 808e2b8:	4684      	mov	ip, r0
 808e2ba:	4608      	mov	r0, r1
 808e2bc:	4661      	mov	r1, ip
 808e2be:	e7ff      	b.n	808e2c0 <__aeabi_cfcmpeq>

0808e2c0 <__aeabi_cfcmpeq>:
 808e2c0:	b50f      	push	{r0, r1, r2, r3, lr}
 808e2c2:	f7ff ffc9 	bl	808e258 <__cmpsf2>
 808e2c6:	2800      	cmp	r0, #0
 808e2c8:	bf48      	it	mi
 808e2ca:	f110 0f00 	cmnmi.w	r0, #0
 808e2ce:	bd0f      	pop	{r0, r1, r2, r3, pc}

0808e2d0 <__aeabi_fcmpeq>:
 808e2d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 808e2d4:	f7ff fff4 	bl	808e2c0 <__aeabi_cfcmpeq>
 808e2d8:	bf0c      	ite	eq
 808e2da:	2001      	moveq	r0, #1
 808e2dc:	2000      	movne	r0, #0
 808e2de:	f85d fb08 	ldr.w	pc, [sp], #8
 808e2e2:	bf00      	nop

0808e2e4 <__aeabi_fcmplt>:
 808e2e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 808e2e8:	f7ff ffea 	bl	808e2c0 <__aeabi_cfcmpeq>
 808e2ec:	bf34      	ite	cc
 808e2ee:	2001      	movcc	r0, #1
 808e2f0:	2000      	movcs	r0, #0
 808e2f2:	f85d fb08 	ldr.w	pc, [sp], #8
 808e2f6:	bf00      	nop

0808e2f8 <__aeabi_fcmple>:
 808e2f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 808e2fc:	f7ff ffe0 	bl	808e2c0 <__aeabi_cfcmpeq>
 808e300:	bf94      	ite	ls
 808e302:	2001      	movls	r0, #1
 808e304:	2000      	movhi	r0, #0
 808e306:	f85d fb08 	ldr.w	pc, [sp], #8
 808e30a:	bf00      	nop

0808e30c <__aeabi_fcmpge>:
 808e30c:	f84d ed08 	str.w	lr, [sp, #-8]!
 808e310:	f7ff ffd2 	bl	808e2b8 <__aeabi_cfrcmple>
 808e314:	bf94      	ite	ls
 808e316:	2001      	movls	r0, #1
 808e318:	2000      	movhi	r0, #0
 808e31a:	f85d fb08 	ldr.w	pc, [sp], #8
 808e31e:	bf00      	nop

0808e320 <__aeabi_fcmpgt>:
 808e320:	f84d ed08 	str.w	lr, [sp, #-8]!
 808e324:	f7ff ffc8 	bl	808e2b8 <__aeabi_cfrcmple>
 808e328:	bf34      	ite	cc
 808e32a:	2001      	movcc	r0, #1
 808e32c:	2000      	movcs	r0, #0
 808e32e:	f85d fb08 	ldr.w	pc, [sp], #8
 808e332:	bf00      	nop

0808e334 <__aeabi_f2iz>:
 808e334:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808e338:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 808e33c:	d30f      	bcc.n	808e35e <__aeabi_f2iz+0x2a>
 808e33e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 808e342:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 808e346:	d90d      	bls.n	808e364 <__aeabi_f2iz+0x30>
 808e348:	ea4f 2300 	mov.w	r3, r0, lsl #8
 808e34c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808e350:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808e354:	fa23 f002 	lsr.w	r0, r3, r2
 808e358:	bf18      	it	ne
 808e35a:	4240      	negne	r0, r0
 808e35c:	4770      	bx	lr
 808e35e:	f04f 0000 	mov.w	r0, #0
 808e362:	4770      	bx	lr
 808e364:	f112 0f61 	cmn.w	r2, #97	; 0x61
 808e368:	d101      	bne.n	808e36e <__aeabi_f2iz+0x3a>
 808e36a:	0242      	lsls	r2, r0, #9
 808e36c:	d105      	bne.n	808e37a <__aeabi_f2iz+0x46>
 808e36e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 808e372:	bf08      	it	eq
 808e374:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808e378:	4770      	bx	lr
 808e37a:	f04f 0000 	mov.w	r0, #0
 808e37e:	4770      	bx	lr

0808e380 <__aeabi_ldivmod>:
 808e380:	b97b      	cbnz	r3, 808e3a2 <__aeabi_ldivmod+0x22>
 808e382:	b972      	cbnz	r2, 808e3a2 <__aeabi_ldivmod+0x22>
 808e384:	2900      	cmp	r1, #0
 808e386:	bfbe      	ittt	lt
 808e388:	2000      	movlt	r0, #0
 808e38a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 808e38e:	e006      	blt.n	808e39e <__aeabi_ldivmod+0x1e>
 808e390:	bf08      	it	eq
 808e392:	2800      	cmpeq	r0, #0
 808e394:	bf1c      	itt	ne
 808e396:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 808e39a:	f04f 30ff 	movne.w	r0, #4294967295
 808e39e:	f000 ba0b 	b.w	808e7b8 <__aeabi_idiv0>
 808e3a2:	f1ad 0c08 	sub.w	ip, sp, #8
 808e3a6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 808e3aa:	2900      	cmp	r1, #0
 808e3ac:	db09      	blt.n	808e3c2 <__aeabi_ldivmod+0x42>
 808e3ae:	2b00      	cmp	r3, #0
 808e3b0:	db1a      	blt.n	808e3e8 <__aeabi_ldivmod+0x68>
 808e3b2:	f000 f89f 	bl	808e4f4 <__udivmoddi4>
 808e3b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 808e3ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808e3be:	b004      	add	sp, #16
 808e3c0:	4770      	bx	lr
 808e3c2:	4240      	negs	r0, r0
 808e3c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808e3c8:	2b00      	cmp	r3, #0
 808e3ca:	db1b      	blt.n	808e404 <__aeabi_ldivmod+0x84>
 808e3cc:	f000 f892 	bl	808e4f4 <__udivmoddi4>
 808e3d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 808e3d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808e3d8:	b004      	add	sp, #16
 808e3da:	4240      	negs	r0, r0
 808e3dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808e3e0:	4252      	negs	r2, r2
 808e3e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808e3e6:	4770      	bx	lr
 808e3e8:	4252      	negs	r2, r2
 808e3ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808e3ee:	f000 f881 	bl	808e4f4 <__udivmoddi4>
 808e3f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 808e3f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808e3fa:	b004      	add	sp, #16
 808e3fc:	4240      	negs	r0, r0
 808e3fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808e402:	4770      	bx	lr
 808e404:	4252      	negs	r2, r2
 808e406:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808e40a:	f000 f873 	bl	808e4f4 <__udivmoddi4>
 808e40e:	f8dd e004 	ldr.w	lr, [sp, #4]
 808e412:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808e416:	b004      	add	sp, #16
 808e418:	4252      	negs	r2, r2
 808e41a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808e41e:	4770      	bx	lr

0808e420 <__aeabi_uldivmod>:
 808e420:	b953      	cbnz	r3, 808e438 <__aeabi_uldivmod+0x18>
 808e422:	b94a      	cbnz	r2, 808e438 <__aeabi_uldivmod+0x18>
 808e424:	2900      	cmp	r1, #0
 808e426:	bf08      	it	eq
 808e428:	2800      	cmpeq	r0, #0
 808e42a:	bf1c      	itt	ne
 808e42c:	f04f 31ff 	movne.w	r1, #4294967295
 808e430:	f04f 30ff 	movne.w	r0, #4294967295
 808e434:	f000 b9c0 	b.w	808e7b8 <__aeabi_idiv0>
 808e438:	f1ad 0c08 	sub.w	ip, sp, #8
 808e43c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 808e440:	f000 f858 	bl	808e4f4 <__udivmoddi4>
 808e444:	f8dd e004 	ldr.w	lr, [sp, #4]
 808e448:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808e44c:	b004      	add	sp, #16
 808e44e:	4770      	bx	lr

0808e450 <__aeabi_f2lz>:
 808e450:	b510      	push	{r4, lr}
 808e452:	2100      	movs	r1, #0
 808e454:	4604      	mov	r4, r0
 808e456:	f7ff ff45 	bl	808e2e4 <__aeabi_fcmplt>
 808e45a:	b920      	cbnz	r0, 808e466 <__aeabi_f2lz+0x16>
 808e45c:	4620      	mov	r0, r4
 808e45e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808e462:	f000 b809 	b.w	808e478 <__aeabi_f2ulz>
 808e466:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 808e46a:	f000 f805 	bl	808e478 <__aeabi_f2ulz>
 808e46e:	4240      	negs	r0, r0
 808e470:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808e474:	bd10      	pop	{r4, pc}
 808e476:	bf00      	nop

0808e478 <__aeabi_f2ulz>:
 808e478:	b5d0      	push	{r4, r6, r7, lr}
 808e47a:	f7ff f8e7 	bl	808d64c <__aeabi_f2d>
 808e47e:	2200      	movs	r2, #0
 808e480:	4b0b      	ldr	r3, [pc, #44]	; (808e4b0 <__aeabi_f2ulz+0x38>)
 808e482:	4606      	mov	r6, r0
 808e484:	460f      	mov	r7, r1
 808e486:	f7ff f939 	bl	808d6fc <__aeabi_dmul>
 808e48a:	f7ff fc0f 	bl	808dcac <__aeabi_d2uiz>
 808e48e:	4604      	mov	r4, r0
 808e490:	f7ff f8ba 	bl	808d608 <__aeabi_ui2d>
 808e494:	2200      	movs	r2, #0
 808e496:	4b07      	ldr	r3, [pc, #28]	; (808e4b4 <__aeabi_f2ulz+0x3c>)
 808e498:	f7ff f930 	bl	808d6fc <__aeabi_dmul>
 808e49c:	4602      	mov	r2, r0
 808e49e:	460b      	mov	r3, r1
 808e4a0:	4630      	mov	r0, r6
 808e4a2:	4639      	mov	r1, r7
 808e4a4:	f7fe ff72 	bl	808d38c <__aeabi_dsub>
 808e4a8:	f7ff fc00 	bl	808dcac <__aeabi_d2uiz>
 808e4ac:	4621      	mov	r1, r4
 808e4ae:	bdd0      	pop	{r4, r6, r7, pc}
 808e4b0:	3df00000 	.word	0x3df00000
 808e4b4:	41f00000 	.word	0x41f00000

0808e4b8 <__aeabi_d2ulz>:
 808e4b8:	b5d0      	push	{r4, r6, r7, lr}
 808e4ba:	2200      	movs	r2, #0
 808e4bc:	4b0b      	ldr	r3, [pc, #44]	; (808e4ec <__aeabi_d2ulz+0x34>)
 808e4be:	4606      	mov	r6, r0
 808e4c0:	460f      	mov	r7, r1
 808e4c2:	f7ff f91b 	bl	808d6fc <__aeabi_dmul>
 808e4c6:	f7ff fbf1 	bl	808dcac <__aeabi_d2uiz>
 808e4ca:	4604      	mov	r4, r0
 808e4cc:	f7ff f89c 	bl	808d608 <__aeabi_ui2d>
 808e4d0:	2200      	movs	r2, #0
 808e4d2:	4b07      	ldr	r3, [pc, #28]	; (808e4f0 <__aeabi_d2ulz+0x38>)
 808e4d4:	f7ff f912 	bl	808d6fc <__aeabi_dmul>
 808e4d8:	4602      	mov	r2, r0
 808e4da:	460b      	mov	r3, r1
 808e4dc:	4630      	mov	r0, r6
 808e4de:	4639      	mov	r1, r7
 808e4e0:	f7fe ff54 	bl	808d38c <__aeabi_dsub>
 808e4e4:	f7ff fbe2 	bl	808dcac <__aeabi_d2uiz>
 808e4e8:	4621      	mov	r1, r4
 808e4ea:	bdd0      	pop	{r4, r6, r7, pc}
 808e4ec:	3df00000 	.word	0x3df00000
 808e4f0:	41f00000 	.word	0x41f00000

0808e4f4 <__udivmoddi4>:
 808e4f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808e4f8:	9e08      	ldr	r6, [sp, #32]
 808e4fa:	460d      	mov	r5, r1
 808e4fc:	4604      	mov	r4, r0
 808e4fe:	468e      	mov	lr, r1
 808e500:	2b00      	cmp	r3, #0
 808e502:	f040 8083 	bne.w	808e60c <__udivmoddi4+0x118>
 808e506:	428a      	cmp	r2, r1
 808e508:	4617      	mov	r7, r2
 808e50a:	d947      	bls.n	808e59c <__udivmoddi4+0xa8>
 808e50c:	fab2 f382 	clz	r3, r2
 808e510:	b14b      	cbz	r3, 808e526 <__udivmoddi4+0x32>
 808e512:	f1c3 0120 	rsb	r1, r3, #32
 808e516:	fa05 fe03 	lsl.w	lr, r5, r3
 808e51a:	fa20 f101 	lsr.w	r1, r0, r1
 808e51e:	409f      	lsls	r7, r3
 808e520:	ea41 0e0e 	orr.w	lr, r1, lr
 808e524:	409c      	lsls	r4, r3
 808e526:	ea4f 4817 	mov.w	r8, r7, lsr #16
 808e52a:	fbbe fcf8 	udiv	ip, lr, r8
 808e52e:	fa1f f987 	uxth.w	r9, r7
 808e532:	fb08 e21c 	mls	r2, r8, ip, lr
 808e536:	fb0c f009 	mul.w	r0, ip, r9
 808e53a:	0c21      	lsrs	r1, r4, #16
 808e53c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 808e540:	4290      	cmp	r0, r2
 808e542:	d90a      	bls.n	808e55a <__udivmoddi4+0x66>
 808e544:	18ba      	adds	r2, r7, r2
 808e546:	f10c 31ff 	add.w	r1, ip, #4294967295
 808e54a:	f080 8118 	bcs.w	808e77e <__udivmoddi4+0x28a>
 808e54e:	4290      	cmp	r0, r2
 808e550:	f240 8115 	bls.w	808e77e <__udivmoddi4+0x28a>
 808e554:	f1ac 0c02 	sub.w	ip, ip, #2
 808e558:	443a      	add	r2, r7
 808e55a:	1a12      	subs	r2, r2, r0
 808e55c:	fbb2 f0f8 	udiv	r0, r2, r8
 808e560:	fb08 2210 	mls	r2, r8, r0, r2
 808e564:	fb00 f109 	mul.w	r1, r0, r9
 808e568:	b2a4      	uxth	r4, r4
 808e56a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 808e56e:	42a1      	cmp	r1, r4
 808e570:	d909      	bls.n	808e586 <__udivmoddi4+0x92>
 808e572:	193c      	adds	r4, r7, r4
 808e574:	f100 32ff 	add.w	r2, r0, #4294967295
 808e578:	f080 8103 	bcs.w	808e782 <__udivmoddi4+0x28e>
 808e57c:	42a1      	cmp	r1, r4
 808e57e:	f240 8100 	bls.w	808e782 <__udivmoddi4+0x28e>
 808e582:	3802      	subs	r0, #2
 808e584:	443c      	add	r4, r7
 808e586:	1a64      	subs	r4, r4, r1
 808e588:	2100      	movs	r1, #0
 808e58a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 808e58e:	b11e      	cbz	r6, 808e598 <__udivmoddi4+0xa4>
 808e590:	2200      	movs	r2, #0
 808e592:	40dc      	lsrs	r4, r3
 808e594:	e9c6 4200 	strd	r4, r2, [r6]
 808e598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808e59c:	b902      	cbnz	r2, 808e5a0 <__udivmoddi4+0xac>
 808e59e:	deff      	udf	#255	; 0xff
 808e5a0:	fab2 f382 	clz	r3, r2
 808e5a4:	2b00      	cmp	r3, #0
 808e5a6:	d14f      	bne.n	808e648 <__udivmoddi4+0x154>
 808e5a8:	1a8d      	subs	r5, r1, r2
 808e5aa:	2101      	movs	r1, #1
 808e5ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 808e5b0:	fa1f f882 	uxth.w	r8, r2
 808e5b4:	fbb5 fcfe 	udiv	ip, r5, lr
 808e5b8:	fb0e 551c 	mls	r5, lr, ip, r5
 808e5bc:	fb08 f00c 	mul.w	r0, r8, ip
 808e5c0:	0c22      	lsrs	r2, r4, #16
 808e5c2:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 808e5c6:	42a8      	cmp	r0, r5
 808e5c8:	d907      	bls.n	808e5da <__udivmoddi4+0xe6>
 808e5ca:	197d      	adds	r5, r7, r5
 808e5cc:	f10c 32ff 	add.w	r2, ip, #4294967295
 808e5d0:	d202      	bcs.n	808e5d8 <__udivmoddi4+0xe4>
 808e5d2:	42a8      	cmp	r0, r5
 808e5d4:	f200 80e9 	bhi.w	808e7aa <__udivmoddi4+0x2b6>
 808e5d8:	4694      	mov	ip, r2
 808e5da:	1a2d      	subs	r5, r5, r0
 808e5dc:	fbb5 f0fe 	udiv	r0, r5, lr
 808e5e0:	fb0e 5510 	mls	r5, lr, r0, r5
 808e5e4:	fb08 f800 	mul.w	r8, r8, r0
 808e5e8:	b2a4      	uxth	r4, r4
 808e5ea:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 808e5ee:	45a0      	cmp	r8, r4
 808e5f0:	d907      	bls.n	808e602 <__udivmoddi4+0x10e>
 808e5f2:	193c      	adds	r4, r7, r4
 808e5f4:	f100 32ff 	add.w	r2, r0, #4294967295
 808e5f8:	d202      	bcs.n	808e600 <__udivmoddi4+0x10c>
 808e5fa:	45a0      	cmp	r8, r4
 808e5fc:	f200 80d9 	bhi.w	808e7b2 <__udivmoddi4+0x2be>
 808e600:	4610      	mov	r0, r2
 808e602:	eba4 0408 	sub.w	r4, r4, r8
 808e606:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 808e60a:	e7c0      	b.n	808e58e <__udivmoddi4+0x9a>
 808e60c:	428b      	cmp	r3, r1
 808e60e:	d908      	bls.n	808e622 <__udivmoddi4+0x12e>
 808e610:	2e00      	cmp	r6, #0
 808e612:	f000 80b1 	beq.w	808e778 <__udivmoddi4+0x284>
 808e616:	2100      	movs	r1, #0
 808e618:	e9c6 0500 	strd	r0, r5, [r6]
 808e61c:	4608      	mov	r0, r1
 808e61e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808e622:	fab3 f183 	clz	r1, r3
 808e626:	2900      	cmp	r1, #0
 808e628:	d14b      	bne.n	808e6c2 <__udivmoddi4+0x1ce>
 808e62a:	42ab      	cmp	r3, r5
 808e62c:	d302      	bcc.n	808e634 <__udivmoddi4+0x140>
 808e62e:	4282      	cmp	r2, r0
 808e630:	f200 80b9 	bhi.w	808e7a6 <__udivmoddi4+0x2b2>
 808e634:	1a84      	subs	r4, r0, r2
 808e636:	eb65 0303 	sbc.w	r3, r5, r3
 808e63a:	2001      	movs	r0, #1
 808e63c:	469e      	mov	lr, r3
 808e63e:	2e00      	cmp	r6, #0
 808e640:	d0aa      	beq.n	808e598 <__udivmoddi4+0xa4>
 808e642:	e9c6 4e00 	strd	r4, lr, [r6]
 808e646:	e7a7      	b.n	808e598 <__udivmoddi4+0xa4>
 808e648:	409f      	lsls	r7, r3
 808e64a:	f1c3 0220 	rsb	r2, r3, #32
 808e64e:	40d1      	lsrs	r1, r2
 808e650:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 808e654:	fbb1 f0fe 	udiv	r0, r1, lr
 808e658:	fa1f f887 	uxth.w	r8, r7
 808e65c:	fb0e 1110 	mls	r1, lr, r0, r1
 808e660:	fa24 f202 	lsr.w	r2, r4, r2
 808e664:	409d      	lsls	r5, r3
 808e666:	fb00 fc08 	mul.w	ip, r0, r8
 808e66a:	432a      	orrs	r2, r5
 808e66c:	0c15      	lsrs	r5, r2, #16
 808e66e:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 808e672:	45ac      	cmp	ip, r5
 808e674:	fa04 f403 	lsl.w	r4, r4, r3
 808e678:	d909      	bls.n	808e68e <__udivmoddi4+0x19a>
 808e67a:	197d      	adds	r5, r7, r5
 808e67c:	f100 31ff 	add.w	r1, r0, #4294967295
 808e680:	f080 808f 	bcs.w	808e7a2 <__udivmoddi4+0x2ae>
 808e684:	45ac      	cmp	ip, r5
 808e686:	f240 808c 	bls.w	808e7a2 <__udivmoddi4+0x2ae>
 808e68a:	3802      	subs	r0, #2
 808e68c:	443d      	add	r5, r7
 808e68e:	eba5 050c 	sub.w	r5, r5, ip
 808e692:	fbb5 f1fe 	udiv	r1, r5, lr
 808e696:	fb0e 5c11 	mls	ip, lr, r1, r5
 808e69a:	fb01 f908 	mul.w	r9, r1, r8
 808e69e:	b295      	uxth	r5, r2
 808e6a0:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 808e6a4:	45a9      	cmp	r9, r5
 808e6a6:	d907      	bls.n	808e6b8 <__udivmoddi4+0x1c4>
 808e6a8:	197d      	adds	r5, r7, r5
 808e6aa:	f101 32ff 	add.w	r2, r1, #4294967295
 808e6ae:	d274      	bcs.n	808e79a <__udivmoddi4+0x2a6>
 808e6b0:	45a9      	cmp	r9, r5
 808e6b2:	d972      	bls.n	808e79a <__udivmoddi4+0x2a6>
 808e6b4:	3902      	subs	r1, #2
 808e6b6:	443d      	add	r5, r7
 808e6b8:	eba5 0509 	sub.w	r5, r5, r9
 808e6bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 808e6c0:	e778      	b.n	808e5b4 <__udivmoddi4+0xc0>
 808e6c2:	f1c1 0720 	rsb	r7, r1, #32
 808e6c6:	408b      	lsls	r3, r1
 808e6c8:	fa22 fc07 	lsr.w	ip, r2, r7
 808e6cc:	ea4c 0c03 	orr.w	ip, ip, r3
 808e6d0:	fa25 f407 	lsr.w	r4, r5, r7
 808e6d4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 808e6d8:	fbb4 f9fe 	udiv	r9, r4, lr
 808e6dc:	fa1f f88c 	uxth.w	r8, ip
 808e6e0:	fb0e 4419 	mls	r4, lr, r9, r4
 808e6e4:	fa20 f307 	lsr.w	r3, r0, r7
 808e6e8:	fb09 fa08 	mul.w	sl, r9, r8
 808e6ec:	408d      	lsls	r5, r1
 808e6ee:	431d      	orrs	r5, r3
 808e6f0:	0c2b      	lsrs	r3, r5, #16
 808e6f2:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 808e6f6:	45a2      	cmp	sl, r4
 808e6f8:	fa02 f201 	lsl.w	r2, r2, r1
 808e6fc:	fa00 f301 	lsl.w	r3, r0, r1
 808e700:	d909      	bls.n	808e716 <__udivmoddi4+0x222>
 808e702:	eb1c 0404 	adds.w	r4, ip, r4
 808e706:	f109 30ff 	add.w	r0, r9, #4294967295
 808e70a:	d248      	bcs.n	808e79e <__udivmoddi4+0x2aa>
 808e70c:	45a2      	cmp	sl, r4
 808e70e:	d946      	bls.n	808e79e <__udivmoddi4+0x2aa>
 808e710:	f1a9 0902 	sub.w	r9, r9, #2
 808e714:	4464      	add	r4, ip
 808e716:	eba4 040a 	sub.w	r4, r4, sl
 808e71a:	fbb4 f0fe 	udiv	r0, r4, lr
 808e71e:	fb0e 4410 	mls	r4, lr, r0, r4
 808e722:	fb00 fa08 	mul.w	sl, r0, r8
 808e726:	b2ad      	uxth	r5, r5
 808e728:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 808e72c:	45a2      	cmp	sl, r4
 808e72e:	d908      	bls.n	808e742 <__udivmoddi4+0x24e>
 808e730:	eb1c 0404 	adds.w	r4, ip, r4
 808e734:	f100 35ff 	add.w	r5, r0, #4294967295
 808e738:	d22d      	bcs.n	808e796 <__udivmoddi4+0x2a2>
 808e73a:	45a2      	cmp	sl, r4
 808e73c:	d92b      	bls.n	808e796 <__udivmoddi4+0x2a2>
 808e73e:	3802      	subs	r0, #2
 808e740:	4464      	add	r4, ip
 808e742:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 808e746:	fba0 8902 	umull	r8, r9, r0, r2
 808e74a:	eba4 040a 	sub.w	r4, r4, sl
 808e74e:	454c      	cmp	r4, r9
 808e750:	46c6      	mov	lr, r8
 808e752:	464d      	mov	r5, r9
 808e754:	d319      	bcc.n	808e78a <__udivmoddi4+0x296>
 808e756:	d016      	beq.n	808e786 <__udivmoddi4+0x292>
 808e758:	b15e      	cbz	r6, 808e772 <__udivmoddi4+0x27e>
 808e75a:	ebb3 020e 	subs.w	r2, r3, lr
 808e75e:	eb64 0405 	sbc.w	r4, r4, r5
 808e762:	fa04 f707 	lsl.w	r7, r4, r7
 808e766:	fa22 f301 	lsr.w	r3, r2, r1
 808e76a:	431f      	orrs	r7, r3
 808e76c:	40cc      	lsrs	r4, r1
 808e76e:	e9c6 7400 	strd	r7, r4, [r6]
 808e772:	2100      	movs	r1, #0
 808e774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808e778:	4631      	mov	r1, r6
 808e77a:	4630      	mov	r0, r6
 808e77c:	e70c      	b.n	808e598 <__udivmoddi4+0xa4>
 808e77e:	468c      	mov	ip, r1
 808e780:	e6eb      	b.n	808e55a <__udivmoddi4+0x66>
 808e782:	4610      	mov	r0, r2
 808e784:	e6ff      	b.n	808e586 <__udivmoddi4+0x92>
 808e786:	4543      	cmp	r3, r8
 808e788:	d2e6      	bcs.n	808e758 <__udivmoddi4+0x264>
 808e78a:	ebb8 0e02 	subs.w	lr, r8, r2
 808e78e:	eb69 050c 	sbc.w	r5, r9, ip
 808e792:	3801      	subs	r0, #1
 808e794:	e7e0      	b.n	808e758 <__udivmoddi4+0x264>
 808e796:	4628      	mov	r0, r5
 808e798:	e7d3      	b.n	808e742 <__udivmoddi4+0x24e>
 808e79a:	4611      	mov	r1, r2
 808e79c:	e78c      	b.n	808e6b8 <__udivmoddi4+0x1c4>
 808e79e:	4681      	mov	r9, r0
 808e7a0:	e7b9      	b.n	808e716 <__udivmoddi4+0x222>
 808e7a2:	4608      	mov	r0, r1
 808e7a4:	e773      	b.n	808e68e <__udivmoddi4+0x19a>
 808e7a6:	4608      	mov	r0, r1
 808e7a8:	e749      	b.n	808e63e <__udivmoddi4+0x14a>
 808e7aa:	f1ac 0c02 	sub.w	ip, ip, #2
 808e7ae:	443d      	add	r5, r7
 808e7b0:	e713      	b.n	808e5da <__udivmoddi4+0xe6>
 808e7b2:	3802      	subs	r0, #2
 808e7b4:	443c      	add	r4, r7
 808e7b6:	e724      	b.n	808e602 <__udivmoddi4+0x10e>

0808e7b8 <__aeabi_idiv0>:
 808e7b8:	4770      	bx	lr
 808e7ba:	bf00      	nop

0808e7bc <asctime_r>:
 808e7bc:	b510      	push	{r4, lr}
 808e7be:	460c      	mov	r4, r1
 808e7c0:	6941      	ldr	r1, [r0, #20]
 808e7c2:	b086      	sub	sp, #24
 808e7c4:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 808e7c8:	6903      	ldr	r3, [r0, #16]
 808e7ca:	6982      	ldr	r2, [r0, #24]
 808e7cc:	9104      	str	r1, [sp, #16]
 808e7ce:	6801      	ldr	r1, [r0, #0]
 808e7d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 808e7d4:	9103      	str	r1, [sp, #12]
 808e7d6:	6841      	ldr	r1, [r0, #4]
 808e7d8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 808e7dc:	9102      	str	r1, [sp, #8]
 808e7de:	6881      	ldr	r1, [r0, #8]
 808e7e0:	9101      	str	r1, [sp, #4]
 808e7e2:	68c1      	ldr	r1, [r0, #12]
 808e7e4:	4620      	mov	r0, r4
 808e7e6:	9100      	str	r1, [sp, #0]
 808e7e8:	4904      	ldr	r1, [pc, #16]	; (808e7fc <asctime_r+0x40>)
 808e7ea:	440b      	add	r3, r1
 808e7ec:	4904      	ldr	r1, [pc, #16]	; (808e800 <asctime_r+0x44>)
 808e7ee:	440a      	add	r2, r1
 808e7f0:	4904      	ldr	r1, [pc, #16]	; (808e804 <asctime_r+0x48>)
 808e7f2:	f7fc fa07 	bl	808ac04 <siprintf>
 808e7f6:	4620      	mov	r0, r4
 808e7f8:	b006      	add	sp, #24
 808e7fa:	bd10      	pop	{r4, pc}
 808e7fc:	080944d6 	.word	0x080944d6
 808e800:	080944c1 	.word	0x080944c1
 808e804:	080944a1 	.word	0x080944a1

0808e808 <atof>:
 808e808:	2100      	movs	r1, #0
 808e80a:	f001 bd4d 	b.w	80902a8 <strtod>

0808e80e <atoi>:
 808e80e:	220a      	movs	r2, #10
 808e810:	2100      	movs	r1, #0
 808e812:	f001 bdfb 	b.w	809040c <strtol>

0808e816 <atol>:
 808e816:	220a      	movs	r2, #10
 808e818:	2100      	movs	r1, #0
 808e81a:	f001 bdf7 	b.w	809040c <strtol>
	...

0808e820 <__cxa_atexit>:
 808e820:	b510      	push	{r4, lr}
 808e822:	4604      	mov	r4, r0
 808e824:	4804      	ldr	r0, [pc, #16]	; (808e838 <__cxa_atexit+0x18>)
 808e826:	4613      	mov	r3, r2
 808e828:	b120      	cbz	r0, 808e834 <__cxa_atexit+0x14>
 808e82a:	460a      	mov	r2, r1
 808e82c:	2002      	movs	r0, #2
 808e82e:	4621      	mov	r1, r4
 808e830:	f3af 8000 	nop.w
 808e834:	bd10      	pop	{r4, pc}
 808e836:	bf00      	nop
 808e838:	00000000 	.word	0x00000000

0808e83c <localtime_r>:
 808e83c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808e840:	460c      	mov	r4, r1
 808e842:	4607      	mov	r7, r0
 808e844:	f002 fc50 	bl	80910e8 <__gettzinfo>
 808e848:	4621      	mov	r1, r4
 808e84a:	4680      	mov	r8, r0
 808e84c:	4638      	mov	r0, r7
 808e84e:	f002 fc4f 	bl	80910f0 <gmtime_r>
 808e852:	6943      	ldr	r3, [r0, #20]
 808e854:	4604      	mov	r4, r0
 808e856:	079a      	lsls	r2, r3, #30
 808e858:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 808e85c:	d105      	bne.n	808e86a <localtime_r+0x2e>
 808e85e:	2264      	movs	r2, #100	; 0x64
 808e860:	fb96 f3f2 	sdiv	r3, r6, r2
 808e864:	fb02 6313 	mls	r3, r2, r3, r6
 808e868:	bb7b      	cbnz	r3, 808e8ca <localtime_r+0x8e>
 808e86a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 808e86e:	fb96 f5f3 	sdiv	r5, r6, r3
 808e872:	fb03 6515 	mls	r5, r3, r5, r6
 808e876:	fab5 f585 	clz	r5, r5
 808e87a:	096d      	lsrs	r5, r5, #5
 808e87c:	2230      	movs	r2, #48	; 0x30
 808e87e:	4b68      	ldr	r3, [pc, #416]	; (808ea20 <localtime_r+0x1e4>)
 808e880:	fb02 3505 	mla	r5, r2, r5, r3
 808e884:	f001 ff04 	bl	8090690 <__tz_lock>
 808e888:	f001 ff0e 	bl	80906a8 <_tzset_unlocked>
 808e88c:	4b65      	ldr	r3, [pc, #404]	; (808ea24 <localtime_r+0x1e8>)
 808e88e:	681b      	ldr	r3, [r3, #0]
 808e890:	b353      	cbz	r3, 808e8e8 <localtime_r+0xac>
 808e892:	f8d8 3004 	ldr.w	r3, [r8, #4]
 808e896:	42b3      	cmp	r3, r6
 808e898:	d119      	bne.n	808e8ce <localtime_r+0x92>
 808e89a:	e9d7 6700 	ldrd	r6, r7, [r7]
 808e89e:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 808e8a2:	f8d8 1000 	ldr.w	r1, [r8]
 808e8a6:	b9d1      	cbnz	r1, 808e8de <localtime_r+0xa2>
 808e8a8:	4296      	cmp	r6, r2
 808e8aa:	eb77 0303 	sbcs.w	r3, r7, r3
 808e8ae:	da23      	bge.n	808e8f8 <localtime_r+0xbc>
 808e8b0:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 808e8b4:	4296      	cmp	r6, r2
 808e8b6:	eb77 0303 	sbcs.w	r3, r7, r3
 808e8ba:	bfb4      	ite	lt
 808e8bc:	2301      	movlt	r3, #1
 808e8be:	2300      	movge	r3, #0
 808e8c0:	6223      	str	r3, [r4, #32]
 808e8c2:	db1b      	blt.n	808e8fc <localtime_r+0xc0>
 808e8c4:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 808e8c8:	e01a      	b.n	808e900 <localtime_r+0xc4>
 808e8ca:	2501      	movs	r5, #1
 808e8cc:	e7d6      	b.n	808e87c <localtime_r+0x40>
 808e8ce:	4630      	mov	r0, r6
 808e8d0:	f001 fe36 	bl	8090540 <__tzcalc_limits>
 808e8d4:	2800      	cmp	r0, #0
 808e8d6:	d1e0      	bne.n	808e89a <localtime_r+0x5e>
 808e8d8:	f04f 33ff 	mov.w	r3, #4294967295
 808e8dc:	e004      	b.n	808e8e8 <localtime_r+0xac>
 808e8de:	4296      	cmp	r6, r2
 808e8e0:	eb77 0303 	sbcs.w	r3, r7, r3
 808e8e4:	da02      	bge.n	808e8ec <localtime_r+0xb0>
 808e8e6:	2300      	movs	r3, #0
 808e8e8:	6223      	str	r3, [r4, #32]
 808e8ea:	e7eb      	b.n	808e8c4 <localtime_r+0x88>
 808e8ec:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 808e8f0:	4296      	cmp	r6, r2
 808e8f2:	eb77 0303 	sbcs.w	r3, r7, r3
 808e8f6:	daf6      	bge.n	808e8e6 <localtime_r+0xaa>
 808e8f8:	2301      	movs	r3, #1
 808e8fa:	6223      	str	r3, [r4, #32]
 808e8fc:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 808e900:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808e904:	fb91 f6f3 	sdiv	r6, r1, r3
 808e908:	203c      	movs	r0, #60	; 0x3c
 808e90a:	fb03 1316 	mls	r3, r3, r6, r1
 808e90e:	fb93 f2f0 	sdiv	r2, r3, r0
 808e912:	fb00 3012 	mls	r0, r0, r2, r3
 808e916:	6861      	ldr	r1, [r4, #4]
 808e918:	6823      	ldr	r3, [r4, #0]
 808e91a:	1a89      	subs	r1, r1, r2
 808e91c:	68a2      	ldr	r2, [r4, #8]
 808e91e:	1a1b      	subs	r3, r3, r0
 808e920:	1b92      	subs	r2, r2, r6
 808e922:	2b3b      	cmp	r3, #59	; 0x3b
 808e924:	6023      	str	r3, [r4, #0]
 808e926:	6061      	str	r1, [r4, #4]
 808e928:	60a2      	str	r2, [r4, #8]
 808e92a:	dd34      	ble.n	808e996 <localtime_r+0x15a>
 808e92c:	3101      	adds	r1, #1
 808e92e:	6061      	str	r1, [r4, #4]
 808e930:	3b3c      	subs	r3, #60	; 0x3c
 808e932:	6023      	str	r3, [r4, #0]
 808e934:	6863      	ldr	r3, [r4, #4]
 808e936:	2b3b      	cmp	r3, #59	; 0x3b
 808e938:	dd33      	ble.n	808e9a2 <localtime_r+0x166>
 808e93a:	3201      	adds	r2, #1
 808e93c:	60a2      	str	r2, [r4, #8]
 808e93e:	3b3c      	subs	r3, #60	; 0x3c
 808e940:	6063      	str	r3, [r4, #4]
 808e942:	68a3      	ldr	r3, [r4, #8]
 808e944:	2b17      	cmp	r3, #23
 808e946:	dd32      	ble.n	808e9ae <localtime_r+0x172>
 808e948:	69e2      	ldr	r2, [r4, #28]
 808e94a:	3b18      	subs	r3, #24
 808e94c:	3201      	adds	r2, #1
 808e94e:	61e2      	str	r2, [r4, #28]
 808e950:	69a2      	ldr	r2, [r4, #24]
 808e952:	60a3      	str	r3, [r4, #8]
 808e954:	3201      	adds	r2, #1
 808e956:	2a06      	cmp	r2, #6
 808e958:	bfc8      	it	gt
 808e95a:	2200      	movgt	r2, #0
 808e95c:	61a2      	str	r2, [r4, #24]
 808e95e:	68e2      	ldr	r2, [r4, #12]
 808e960:	6923      	ldr	r3, [r4, #16]
 808e962:	3201      	adds	r2, #1
 808e964:	60e2      	str	r2, [r4, #12]
 808e966:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 808e96a:	428a      	cmp	r2, r1
 808e96c:	dd0e      	ble.n	808e98c <localtime_r+0x150>
 808e96e:	2b0b      	cmp	r3, #11
 808e970:	eba2 0201 	sub.w	r2, r2, r1
 808e974:	60e2      	str	r2, [r4, #12]
 808e976:	f103 0201 	add.w	r2, r3, #1
 808e97a:	bf05      	ittet	eq
 808e97c:	2200      	moveq	r2, #0
 808e97e:	6963      	ldreq	r3, [r4, #20]
 808e980:	6122      	strne	r2, [r4, #16]
 808e982:	3301      	addeq	r3, #1
 808e984:	bf02      	ittt	eq
 808e986:	6122      	streq	r2, [r4, #16]
 808e988:	6163      	streq	r3, [r4, #20]
 808e98a:	61e2      	streq	r2, [r4, #28]
 808e98c:	f001 fe86 	bl	809069c <__tz_unlock>
 808e990:	4620      	mov	r0, r4
 808e992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808e996:	2b00      	cmp	r3, #0
 808e998:	dacc      	bge.n	808e934 <localtime_r+0xf8>
 808e99a:	3901      	subs	r1, #1
 808e99c:	6061      	str	r1, [r4, #4]
 808e99e:	333c      	adds	r3, #60	; 0x3c
 808e9a0:	e7c7      	b.n	808e932 <localtime_r+0xf6>
 808e9a2:	2b00      	cmp	r3, #0
 808e9a4:	dacd      	bge.n	808e942 <localtime_r+0x106>
 808e9a6:	3a01      	subs	r2, #1
 808e9a8:	60a2      	str	r2, [r4, #8]
 808e9aa:	333c      	adds	r3, #60	; 0x3c
 808e9ac:	e7c8      	b.n	808e940 <localtime_r+0x104>
 808e9ae:	2b00      	cmp	r3, #0
 808e9b0:	daec      	bge.n	808e98c <localtime_r+0x150>
 808e9b2:	69e2      	ldr	r2, [r4, #28]
 808e9b4:	3318      	adds	r3, #24
 808e9b6:	3a01      	subs	r2, #1
 808e9b8:	61e2      	str	r2, [r4, #28]
 808e9ba:	69a2      	ldr	r2, [r4, #24]
 808e9bc:	60a3      	str	r3, [r4, #8]
 808e9be:	3a01      	subs	r2, #1
 808e9c0:	bf48      	it	mi
 808e9c2:	2206      	movmi	r2, #6
 808e9c4:	61a2      	str	r2, [r4, #24]
 808e9c6:	68e2      	ldr	r2, [r4, #12]
 808e9c8:	3a01      	subs	r2, #1
 808e9ca:	60e2      	str	r2, [r4, #12]
 808e9cc:	2a00      	cmp	r2, #0
 808e9ce:	d1dd      	bne.n	808e98c <localtime_r+0x150>
 808e9d0:	6923      	ldr	r3, [r4, #16]
 808e9d2:	3b01      	subs	r3, #1
 808e9d4:	d405      	bmi.n	808e9e2 <localtime_r+0x1a6>
 808e9d6:	6123      	str	r3, [r4, #16]
 808e9d8:	6923      	ldr	r3, [r4, #16]
 808e9da:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 808e9de:	60e3      	str	r3, [r4, #12]
 808e9e0:	e7d4      	b.n	808e98c <localtime_r+0x150>
 808e9e2:	230b      	movs	r3, #11
 808e9e4:	6123      	str	r3, [r4, #16]
 808e9e6:	6963      	ldr	r3, [r4, #20]
 808e9e8:	1e5a      	subs	r2, r3, #1
 808e9ea:	6162      	str	r2, [r4, #20]
 808e9ec:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 808e9f0:	0793      	lsls	r3, r2, #30
 808e9f2:	d105      	bne.n	808ea00 <localtime_r+0x1c4>
 808e9f4:	2164      	movs	r1, #100	; 0x64
 808e9f6:	fb92 f3f1 	sdiv	r3, r2, r1
 808e9fa:	fb01 2313 	mls	r3, r1, r3, r2
 808e9fe:	b963      	cbnz	r3, 808ea1a <localtime_r+0x1de>
 808ea00:	f44f 71c8 	mov.w	r1, #400	; 0x190
 808ea04:	fb92 f3f1 	sdiv	r3, r2, r1
 808ea08:	fb01 2313 	mls	r3, r1, r3, r2
 808ea0c:	fab3 f383 	clz	r3, r3
 808ea10:	095b      	lsrs	r3, r3, #5
 808ea12:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 808ea16:	61e3      	str	r3, [r4, #28]
 808ea18:	e7de      	b.n	808e9d8 <localtime_r+0x19c>
 808ea1a:	2301      	movs	r3, #1
 808ea1c:	e7f9      	b.n	808ea12 <localtime_r+0x1d6>
 808ea1e:	bf00      	nop
 808ea20:	080944fc 	.word	0x080944fc
 808ea24:	200013d4 	.word	0x200013d4

0808ea28 <memcmp>:
 808ea28:	b530      	push	{r4, r5, lr}
 808ea2a:	2400      	movs	r4, #0
 808ea2c:	3901      	subs	r1, #1
 808ea2e:	42a2      	cmp	r2, r4
 808ea30:	d101      	bne.n	808ea36 <memcmp+0xe>
 808ea32:	2000      	movs	r0, #0
 808ea34:	e005      	b.n	808ea42 <memcmp+0x1a>
 808ea36:	5d03      	ldrb	r3, [r0, r4]
 808ea38:	3401      	adds	r4, #1
 808ea3a:	5d0d      	ldrb	r5, [r1, r4]
 808ea3c:	42ab      	cmp	r3, r5
 808ea3e:	d0f6      	beq.n	808ea2e <memcmp+0x6>
 808ea40:	1b58      	subs	r0, r3, r5
 808ea42:	bd30      	pop	{r4, r5, pc}

0808ea44 <memcpy>:
 808ea44:	440a      	add	r2, r1
 808ea46:	4291      	cmp	r1, r2
 808ea48:	f100 33ff 	add.w	r3, r0, #4294967295
 808ea4c:	d100      	bne.n	808ea50 <memcpy+0xc>
 808ea4e:	4770      	bx	lr
 808ea50:	b510      	push	{r4, lr}
 808ea52:	f811 4b01 	ldrb.w	r4, [r1], #1
 808ea56:	4291      	cmp	r1, r2
 808ea58:	f803 4f01 	strb.w	r4, [r3, #1]!
 808ea5c:	d1f9      	bne.n	808ea52 <memcpy+0xe>
 808ea5e:	bd10      	pop	{r4, pc}

0808ea60 <memset>:
 808ea60:	4603      	mov	r3, r0
 808ea62:	4402      	add	r2, r0
 808ea64:	4293      	cmp	r3, r2
 808ea66:	d100      	bne.n	808ea6a <memset+0xa>
 808ea68:	4770      	bx	lr
 808ea6a:	f803 1b01 	strb.w	r1, [r3], #1
 808ea6e:	e7f9      	b.n	808ea64 <memset+0x4>

0808ea70 <srand>:
 808ea70:	b538      	push	{r3, r4, r5, lr}
 808ea72:	4b0d      	ldr	r3, [pc, #52]	; (808eaa8 <srand+0x38>)
 808ea74:	4604      	mov	r4, r0
 808ea76:	681d      	ldr	r5, [r3, #0]
 808ea78:	6bab      	ldr	r3, [r5, #56]	; 0x38
 808ea7a:	b97b      	cbnz	r3, 808ea9c <srand+0x2c>
 808ea7c:	2018      	movs	r0, #24
 808ea7e:	f7fc f8a1 	bl	808abc4 <malloc>
 808ea82:	4a0a      	ldr	r2, [pc, #40]	; (808eaac <srand+0x3c>)
 808ea84:	4b0a      	ldr	r3, [pc, #40]	; (808eab0 <srand+0x40>)
 808ea86:	63a8      	str	r0, [r5, #56]	; 0x38
 808ea88:	e9c0 2300 	strd	r2, r3, [r0]
 808ea8c:	4b09      	ldr	r3, [pc, #36]	; (808eab4 <srand+0x44>)
 808ea8e:	2201      	movs	r2, #1
 808ea90:	6083      	str	r3, [r0, #8]
 808ea92:	230b      	movs	r3, #11
 808ea94:	8183      	strh	r3, [r0, #12]
 808ea96:	2300      	movs	r3, #0
 808ea98:	e9c0 2304 	strd	r2, r3, [r0, #16]
 808ea9c:	2200      	movs	r2, #0
 808ea9e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 808eaa0:	611c      	str	r4, [r3, #16]
 808eaa2:	615a      	str	r2, [r3, #20]
 808eaa4:	bd38      	pop	{r3, r4, r5, pc}
 808eaa6:	bf00      	nop
 808eaa8:	200000e8 	.word	0x200000e8
 808eaac:	abcd330e 	.word	0xabcd330e
 808eab0:	e66d1234 	.word	0xe66d1234
 808eab4:	0005deec 	.word	0x0005deec

0808eab8 <strchr>:
 808eab8:	4603      	mov	r3, r0
 808eaba:	b2c9      	uxtb	r1, r1
 808eabc:	4618      	mov	r0, r3
 808eabe:	f813 2b01 	ldrb.w	r2, [r3], #1
 808eac2:	b112      	cbz	r2, 808eaca <strchr+0x12>
 808eac4:	428a      	cmp	r2, r1
 808eac6:	d1f9      	bne.n	808eabc <strchr+0x4>
 808eac8:	4770      	bx	lr
 808eaca:	2900      	cmp	r1, #0
 808eacc:	bf18      	it	ne
 808eace:	2000      	movne	r0, #0
 808ead0:	4770      	bx	lr

0808ead2 <strcmp>:
 808ead2:	f810 2b01 	ldrb.w	r2, [r0], #1
 808ead6:	f811 3b01 	ldrb.w	r3, [r1], #1
 808eada:	2a01      	cmp	r2, #1
 808eadc:	bf28      	it	cs
 808eade:	429a      	cmpcs	r2, r3
 808eae0:	d0f7      	beq.n	808ead2 <strcmp>
 808eae2:	1ad0      	subs	r0, r2, r3
 808eae4:	4770      	bx	lr

0808eae6 <strcpy>:
 808eae6:	4603      	mov	r3, r0
 808eae8:	f811 2b01 	ldrb.w	r2, [r1], #1
 808eaec:	f803 2b01 	strb.w	r2, [r3], #1
 808eaf0:	2a00      	cmp	r2, #0
 808eaf2:	d1f9      	bne.n	808eae8 <strcpy+0x2>
 808eaf4:	4770      	bx	lr
	...

0808eaf8 <strdup>:
 808eaf8:	4b02      	ldr	r3, [pc, #8]	; (808eb04 <strdup+0xc>)
 808eafa:	4601      	mov	r1, r0
 808eafc:	6818      	ldr	r0, [r3, #0]
 808eafe:	f000 b803 	b.w	808eb08 <_strdup_r>
 808eb02:	bf00      	nop
 808eb04:	200000e8 	.word	0x200000e8

0808eb08 <_strdup_r>:
 808eb08:	b570      	push	{r4, r5, r6, lr}
 808eb0a:	4604      	mov	r4, r0
 808eb0c:	4608      	mov	r0, r1
 808eb0e:	460d      	mov	r5, r1
 808eb10:	f000 fd70 	bl	808f5f4 <strlen>
 808eb14:	1c46      	adds	r6, r0, #1
 808eb16:	4631      	mov	r1, r6
 808eb18:	4620      	mov	r0, r4
 808eb1a:	f7fc f8ab 	bl	808ac74 <_malloc_r>
 808eb1e:	4604      	mov	r4, r0
 808eb20:	b118      	cbz	r0, 808eb2a <_strdup_r+0x22>
 808eb22:	4632      	mov	r2, r6
 808eb24:	4629      	mov	r1, r5
 808eb26:	f7ff ff8d 	bl	808ea44 <memcpy>
 808eb2a:	4620      	mov	r0, r4
 808eb2c:	bd70      	pop	{r4, r5, r6, pc}
	...

0808eb30 <iso_year_adjust>:
 808eb30:	6941      	ldr	r1, [r0, #20]
 808eb32:	f240 736c 	movw	r3, #1900	; 0x76c
 808eb36:	2900      	cmp	r1, #0
 808eb38:	bfa8      	it	ge
 808eb3a:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 808eb3e:	18ca      	adds	r2, r1, r3
 808eb40:	078b      	lsls	r3, r1, #30
 808eb42:	d105      	bne.n	808eb50 <iso_year_adjust+0x20>
 808eb44:	2164      	movs	r1, #100	; 0x64
 808eb46:	fb92 f3f1 	sdiv	r3, r2, r1
 808eb4a:	fb01 2313 	mls	r3, r1, r3, r2
 808eb4e:	b9db      	cbnz	r3, 808eb88 <iso_year_adjust+0x58>
 808eb50:	f44f 71c8 	mov.w	r1, #400	; 0x190
 808eb54:	fb92 f3f1 	sdiv	r3, r2, r1
 808eb58:	fb01 2313 	mls	r3, r1, r3, r2
 808eb5c:	fab3 f383 	clz	r3, r3
 808eb60:	095b      	lsrs	r3, r3, #5
 808eb62:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 808eb66:	0040      	lsls	r0, r0, #1
 808eb68:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 808eb6c:	4418      	add	r0, r3
 808eb6e:	f241 63a2 	movw	r3, #5794	; 0x16a2
 808eb72:	4298      	cmp	r0, r3
 808eb74:	d03a      	beq.n	808ebec <iso_year_adjust+0xbc>
 808eb76:	dc21      	bgt.n	808ebbc <iso_year_adjust+0x8c>
 808eb78:	2801      	cmp	r0, #1
 808eb7a:	dc1a      	bgt.n	808ebb2 <iso_year_adjust+0x82>
 808eb7c:	2800      	cmp	r0, #0
 808eb7e:	bfb4      	ite	lt
 808eb80:	2000      	movlt	r0, #0
 808eb82:	f04f 30ff 	movge.w	r0, #4294967295
 808eb86:	4770      	bx	lr
 808eb88:	2301      	movs	r3, #1
 808eb8a:	e7ea      	b.n	808eb62 <iso_year_adjust+0x32>
 808eb8c:	2817      	cmp	r0, #23
 808eb8e:	d813      	bhi.n	808ebb8 <iso_year_adjust+0x88>
 808eb90:	e8df f000 	tbb	[pc, r0]
 808eb94:	0c0c0c0c 	.word	0x0c0c0c0c
 808eb98:	0c0c1212 	.word	0x0c0c1212
 808eb9c:	12121212 	.word	0x12121212
 808eba0:	12121212 	.word	0x12121212
 808eba4:	0c0c1212 	.word	0x0c0c1212
 808eba8:	0c0c1212 	.word	0x0c0c1212
 808ebac:	f04f 30ff 	mov.w	r0, #4294967295
 808ebb0:	4770      	bx	lr
 808ebb2:	380a      	subs	r0, #10
 808ebb4:	2817      	cmp	r0, #23
 808ebb6:	d9e9      	bls.n	808eb8c <iso_year_adjust+0x5c>
 808ebb8:	2000      	movs	r0, #0
 808ebba:	4770      	bx	lr
 808ebbc:	f241 63b4 	movw	r3, #5812	; 0x16b4
 808ebc0:	4298      	cmp	r0, r3
 808ebc2:	dc06      	bgt.n	808ebd2 <iso_year_adjust+0xa2>
 808ebc4:	f241 63b1 	movw	r3, #5809	; 0x16b1
 808ebc8:	4298      	cmp	r0, r3
 808ebca:	bfd4      	ite	le
 808ebcc:	2000      	movle	r0, #0
 808ebce:	2001      	movgt	r0, #1
 808ebd0:	4770      	bx	lr
 808ebd2:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 808ebd6:	3802      	subs	r0, #2
 808ebd8:	2815      	cmp	r0, #21
 808ebda:	d8ed      	bhi.n	808ebb8 <iso_year_adjust+0x88>
 808ebdc:	2301      	movs	r3, #1
 808ebde:	4083      	lsls	r3, r0
 808ebe0:	4803      	ldr	r0, [pc, #12]	; (808ebf0 <iso_year_adjust+0xc0>)
 808ebe2:	4018      	ands	r0, r3
 808ebe4:	3800      	subs	r0, #0
 808ebe6:	bf18      	it	ne
 808ebe8:	2001      	movne	r0, #1
 808ebea:	4770      	bx	lr
 808ebec:	2001      	movs	r0, #1
 808ebee:	4770      	bx	lr
 808ebf0:	002a001f 	.word	0x002a001f

0808ebf4 <__strftime>:
 808ebf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808ebf8:	461e      	mov	r6, r3
 808ebfa:	2300      	movs	r3, #0
 808ebfc:	4607      	mov	r7, r0
 808ebfe:	460d      	mov	r5, r1
 808ec00:	461c      	mov	r4, r3
 808ec02:	b091      	sub	sp, #68	; 0x44
 808ec04:	9304      	str	r3, [sp, #16]
 808ec06:	7813      	ldrb	r3, [r2, #0]
 808ec08:	2b00      	cmp	r3, #0
 808ec0a:	f000 84da 	beq.w	808f5c2 <__strftime+0x9ce>
 808ec0e:	2b25      	cmp	r3, #37	; 0x25
 808ec10:	d11f      	bne.n	808ec52 <__strftime+0x5e>
 808ec12:	f892 9001 	ldrb.w	r9, [r2, #1]
 808ec16:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 808ec1a:	d024      	beq.n	808ec66 <__strftime+0x72>
 808ec1c:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 808ec20:	d021      	beq.n	808ec66 <__strftime+0x72>
 808ec22:	f04f 0900 	mov.w	r9, #0
 808ec26:	f102 0a01 	add.w	sl, r2, #1
 808ec2a:	f89a 3000 	ldrb.w	r3, [sl]
 808ec2e:	3b31      	subs	r3, #49	; 0x31
 808ec30:	2b08      	cmp	r3, #8
 808ec32:	d81b      	bhi.n	808ec6c <__strftime+0x78>
 808ec34:	4650      	mov	r0, sl
 808ec36:	220a      	movs	r2, #10
 808ec38:	a908      	add	r1, sp, #32
 808ec3a:	f001 fc6d 	bl	8090518 <strtoul>
 808ec3e:	4680      	mov	r8, r0
 808ec40:	f8dd a020 	ldr.w	sl, [sp, #32]
 808ec44:	f89a 3000 	ldrb.w	r3, [sl]
 808ec48:	2b45      	cmp	r3, #69	; 0x45
 808ec4a:	d112      	bne.n	808ec72 <__strftime+0x7e>
 808ec4c:	f10a 0a01 	add.w	sl, sl, #1
 808ec50:	e011      	b.n	808ec76 <__strftime+0x82>
 808ec52:	1e69      	subs	r1, r5, #1
 808ec54:	42a1      	cmp	r1, r4
 808ec56:	d802      	bhi.n	808ec5e <__strftime+0x6a>
 808ec58:	2400      	movs	r4, #0
 808ec5a:	f000 bcb5 	b.w	808f5c8 <__strftime+0x9d4>
 808ec5e:	553b      	strb	r3, [r7, r4]
 808ec60:	3201      	adds	r2, #1
 808ec62:	3401      	adds	r4, #1
 808ec64:	e7cf      	b.n	808ec06 <__strftime+0x12>
 808ec66:	f102 0a02 	add.w	sl, r2, #2
 808ec6a:	e7de      	b.n	808ec2a <__strftime+0x36>
 808ec6c:	f04f 0800 	mov.w	r8, #0
 808ec70:	e7e8      	b.n	808ec44 <__strftime+0x50>
 808ec72:	2b4f      	cmp	r3, #79	; 0x4f
 808ec74:	d0ea      	beq.n	808ec4c <__strftime+0x58>
 808ec76:	f89a 0000 	ldrb.w	r0, [sl]
 808ec7a:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 808ec7e:	2b55      	cmp	r3, #85	; 0x55
 808ec80:	d8ea      	bhi.n	808ec58 <__strftime+0x64>
 808ec82:	a201      	add	r2, pc, #4	; (adr r2, 808ec88 <__strftime+0x94>)
 808ec84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 808ec88:	0808f5b7 	.word	0x0808f5b7
 808ec8c:	0808ec59 	.word	0x0808ec59
 808ec90:	0808ec59 	.word	0x0808ec59
 808ec94:	0808ec59 	.word	0x0808ec59
 808ec98:	0808ec59 	.word	0x0808ec59
 808ec9c:	0808ec59 	.word	0x0808ec59
 808eca0:	0808ec59 	.word	0x0808ec59
 808eca4:	0808ec59 	.word	0x0808ec59
 808eca8:	0808ec59 	.word	0x0808ec59
 808ecac:	0808ec59 	.word	0x0808ec59
 808ecb0:	0808ec59 	.word	0x0808ec59
 808ecb4:	0808ec59 	.word	0x0808ec59
 808ecb8:	0808ec59 	.word	0x0808ec59
 808ecbc:	0808ec59 	.word	0x0808ec59
 808ecc0:	0808ec59 	.word	0x0808ec59
 808ecc4:	0808ec59 	.word	0x0808ec59
 808ecc8:	0808ec59 	.word	0x0808ec59
 808eccc:	0808ec59 	.word	0x0808ec59
 808ecd0:	0808ec59 	.word	0x0808ec59
 808ecd4:	0808ec59 	.word	0x0808ec59
 808ecd8:	0808ec59 	.word	0x0808ec59
 808ecdc:	0808ec59 	.word	0x0808ec59
 808ece0:	0808ec59 	.word	0x0808ec59
 808ece4:	0808ec59 	.word	0x0808ec59
 808ece8:	0808ec59 	.word	0x0808ec59
 808ecec:	0808ec59 	.word	0x0808ec59
 808ecf0:	0808ec59 	.word	0x0808ec59
 808ecf4:	0808ec59 	.word	0x0808ec59
 808ecf8:	0808ee1d 	.word	0x0808ee1d
 808ecfc:	0808ee75 	.word	0x0808ee75
 808ed00:	0808eee7 	.word	0x0808eee7
 808ed04:	0808ef7f 	.word	0x0808ef7f
 808ed08:	0808ec59 	.word	0x0808ec59
 808ed0c:	0808efc9 	.word	0x0808efc9
 808ed10:	0808f0bd 	.word	0x0808f0bd
 808ed14:	0808f1c7 	.word	0x0808f1c7
 808ed18:	0808f1d5 	.word	0x0808f1d5
 808ed1c:	0808ec59 	.word	0x0808ec59
 808ed20:	0808ec59 	.word	0x0808ec59
 808ed24:	0808ec59 	.word	0x0808ec59
 808ed28:	0808f205 	.word	0x0808f205
 808ed2c:	0808ec59 	.word	0x0808ec59
 808ed30:	0808ec59 	.word	0x0808ec59
 808ed34:	0808f219 	.word	0x0808f219
 808ed38:	0808ec59 	.word	0x0808ec59
 808ed3c:	0808f269 	.word	0x0808f269
 808ed40:	0808f37f 	.word	0x0808f37f
 808ed44:	0808f38f 	.word	0x0808f38f
 808ed48:	0808f3e3 	.word	0x0808f3e3
 808ed4c:	0808f3f3 	.word	0x0808f3f3
 808ed50:	0808f465 	.word	0x0808f465
 808ed54:	0808eedf 	.word	0x0808eedf
 808ed58:	0808f499 	.word	0x0808f499
 808ed5c:	0808f565 	.word	0x0808f565
 808ed60:	0808ec59 	.word	0x0808ec59
 808ed64:	0808ec59 	.word	0x0808ec59
 808ed68:	0808ec59 	.word	0x0808ec59
 808ed6c:	0808ec59 	.word	0x0808ec59
 808ed70:	0808ec59 	.word	0x0808ec59
 808ed74:	0808ec59 	.word	0x0808ec59
 808ed78:	0808ede1 	.word	0x0808ede1
 808ed7c:	0808ee4b 	.word	0x0808ee4b
 808ed80:	0808eea1 	.word	0x0808eea1
 808ed84:	0808ef5b 	.word	0x0808ef5b
 808ed88:	0808ef5b 	.word	0x0808ef5b
 808ed8c:	0808ec59 	.word	0x0808ec59
 808ed90:	0808f01f 	.word	0x0808f01f
 808ed94:	0808ee4b 	.word	0x0808ee4b
 808ed98:	0808ec59 	.word	0x0808ec59
 808ed9c:	0808f1f7 	.word	0x0808f1f7
 808eda0:	0808f1c7 	.word	0x0808f1c7
 808eda4:	0808f1d5 	.word	0x0808f1d5
 808eda8:	0808f1ff 	.word	0x0808f1ff
 808edac:	0808f209 	.word	0x0808f209
 808edb0:	0808ec59 	.word	0x0808ec59
 808edb4:	0808f219 	.word	0x0808f219
 808edb8:	0808ec59 	.word	0x0808ec59
 808edbc:	0808eecf 	.word	0x0808eecf
 808edc0:	0808f27b 	.word	0x0808f27b
 808edc4:	0808f383 	.word	0x0808f383
 808edc8:	0808f3c9 	.word	0x0808f3c9
 808edcc:	0808ec59 	.word	0x0808ec59
 808edd0:	0808f457 	.word	0x0808f457
 808edd4:	0808eed7 	.word	0x0808eed7
 808edd8:	0808f47d 	.word	0x0808f47d
 808eddc:	0808f4f5 	.word	0x0808f4f5
 808ede0:	69b3      	ldr	r3, [r6, #24]
 808ede2:	4aa9      	ldr	r2, [pc, #676]	; (808f088 <__strftime+0x494>)
 808ede4:	3318      	adds	r3, #24
 808ede6:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808edea:	4640      	mov	r0, r8
 808edec:	f000 fc02 	bl	808f5f4 <strlen>
 808edf0:	f108 38ff 	add.w	r8, r8, #4294967295
 808edf4:	4420      	add	r0, r4
 808edf6:	1e6b      	subs	r3, r5, #1
 808edf8:	42a0      	cmp	r0, r4
 808edfa:	d107      	bne.n	808ee0c <__strftime+0x218>
 808edfc:	f89a 3000 	ldrb.w	r3, [sl]
 808ee00:	2b00      	cmp	r3, #0
 808ee02:	f000 83de 	beq.w	808f5c2 <__strftime+0x9ce>
 808ee06:	f10a 0201 	add.w	r2, sl, #1
 808ee0a:	e6fc      	b.n	808ec06 <__strftime+0x12>
 808ee0c:	42a3      	cmp	r3, r4
 808ee0e:	f67f af23 	bls.w	808ec58 <__strftime+0x64>
 808ee12:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808ee16:	553a      	strb	r2, [r7, r4]
 808ee18:	3401      	adds	r4, #1
 808ee1a:	e7ed      	b.n	808edf8 <__strftime+0x204>
 808ee1c:	69b2      	ldr	r2, [r6, #24]
 808ee1e:	4b9a      	ldr	r3, [pc, #616]	; (808f088 <__strftime+0x494>)
 808ee20:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 808ee24:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
 808ee28:	4640      	mov	r0, r8
 808ee2a:	f000 fbe3 	bl	808f5f4 <strlen>
 808ee2e:	f108 38ff 	add.w	r8, r8, #4294967295
 808ee32:	4420      	add	r0, r4
 808ee34:	1e6b      	subs	r3, r5, #1
 808ee36:	42a0      	cmp	r0, r4
 808ee38:	d0e0      	beq.n	808edfc <__strftime+0x208>
 808ee3a:	42a3      	cmp	r3, r4
 808ee3c:	f67f af0c 	bls.w	808ec58 <__strftime+0x64>
 808ee40:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808ee44:	553a      	strb	r2, [r7, r4]
 808ee46:	3401      	adds	r4, #1
 808ee48:	e7f5      	b.n	808ee36 <__strftime+0x242>
 808ee4a:	4b8f      	ldr	r3, [pc, #572]	; (808f088 <__strftime+0x494>)
 808ee4c:	6932      	ldr	r2, [r6, #16]
 808ee4e:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 808ee52:	4640      	mov	r0, r8
 808ee54:	f000 fbce 	bl	808f5f4 <strlen>
 808ee58:	f108 38ff 	add.w	r8, r8, #4294967295
 808ee5c:	4420      	add	r0, r4
 808ee5e:	1e6b      	subs	r3, r5, #1
 808ee60:	42a0      	cmp	r0, r4
 808ee62:	d0cb      	beq.n	808edfc <__strftime+0x208>
 808ee64:	42a3      	cmp	r3, r4
 808ee66:	f67f aef7 	bls.w	808ec58 <__strftime+0x64>
 808ee6a:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808ee6e:	553a      	strb	r2, [r7, r4]
 808ee70:	3401      	adds	r4, #1
 808ee72:	e7f5      	b.n	808ee60 <__strftime+0x26c>
 808ee74:	6933      	ldr	r3, [r6, #16]
 808ee76:	4a84      	ldr	r2, [pc, #528]	; (808f088 <__strftime+0x494>)
 808ee78:	330c      	adds	r3, #12
 808ee7a:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808ee7e:	4640      	mov	r0, r8
 808ee80:	f000 fbb8 	bl	808f5f4 <strlen>
 808ee84:	f108 38ff 	add.w	r8, r8, #4294967295
 808ee88:	4420      	add	r0, r4
 808ee8a:	1e6b      	subs	r3, r5, #1
 808ee8c:	42a0      	cmp	r0, r4
 808ee8e:	d0b5      	beq.n	808edfc <__strftime+0x208>
 808ee90:	42a3      	cmp	r3, r4
 808ee92:	f67f aee1 	bls.w	808ec58 <__strftime+0x64>
 808ee96:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808ee9a:	553a      	strb	r2, [r7, r4]
 808ee9c:	3401      	adds	r4, #1
 808ee9e:	e7f5      	b.n	808ee8c <__strftime+0x298>
 808eea0:	4b79      	ldr	r3, [pc, #484]	; (808f088 <__strftime+0x494>)
 808eea2:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
 808eea6:	4640      	mov	r0, r8
 808eea8:	f000 fba4 	bl	808f5f4 <strlen>
 808eeac:	f898 3000 	ldrb.w	r3, [r8]
 808eeb0:	2b00      	cmp	r3, #0
 808eeb2:	d0a3      	beq.n	808edfc <__strftime+0x208>
 808eeb4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 808eeb6:	4642      	mov	r2, r8
 808eeb8:	9300      	str	r3, [sp, #0]
 808eeba:	4633      	mov	r3, r6
 808eebc:	1b29      	subs	r1, r5, r4
 808eebe:	1938      	adds	r0, r7, r4
 808eec0:	f7ff fe98 	bl	808ebf4 <__strftime>
 808eec4:	2800      	cmp	r0, #0
 808eec6:	f77f aec7 	ble.w	808ec58 <__strftime+0x64>
 808eeca:	4404      	add	r4, r0
 808eecc:	e796      	b.n	808edfc <__strftime+0x208>
 808eece:	4b6e      	ldr	r3, [pc, #440]	; (808f088 <__strftime+0x494>)
 808eed0:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
 808eed4:	e7e7      	b.n	808eea6 <__strftime+0x2b2>
 808eed6:	4b6c      	ldr	r3, [pc, #432]	; (808f088 <__strftime+0x494>)
 808eed8:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
 808eedc:	e7e3      	b.n	808eea6 <__strftime+0x2b2>
 808eede:	4b6a      	ldr	r3, [pc, #424]	; (808f088 <__strftime+0x494>)
 808eee0:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
 808eee4:	e7df      	b.n	808eea6 <__strftime+0x2b2>
 808eee6:	4969      	ldr	r1, [pc, #420]	; (808f08c <__strftime+0x498>)
 808eee8:	f8d6 b014 	ldr.w	fp, [r6, #20]
 808eeec:	458b      	cmp	fp, r1
 808eeee:	bfac      	ite	ge
 808eef0:	2100      	movge	r1, #0
 808eef2:	2101      	movlt	r1, #1
 808eef4:	f1bb 0f00 	cmp.w	fp, #0
 808eef8:	db10      	blt.n	808ef1c <__strftime+0x328>
 808eefa:	2064      	movs	r0, #100	; 0x64
 808eefc:	fb9b f0f0 	sdiv	r0, fp, r0
 808ef00:	3013      	adds	r0, #19
 808ef02:	f1b9 0f00 	cmp.w	r9, #0
 808ef06:	d013      	beq.n	808ef30 <__strftime+0x33c>
 808ef08:	2863      	cmp	r0, #99	; 0x63
 808ef0a:	dd24      	ble.n	808ef56 <__strftime+0x362>
 808ef0c:	4a60      	ldr	r2, [pc, #384]	; (808f090 <__strftime+0x49c>)
 808ef0e:	4b61      	ldr	r3, [pc, #388]	; (808f094 <__strftime+0x4a0>)
 808ef10:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 808ef14:	bf18      	it	ne
 808ef16:	4613      	movne	r3, r2
 808ef18:	4a5f      	ldr	r2, [pc, #380]	; (808f098 <__strftime+0x4a4>)
 808ef1a:	e00b      	b.n	808ef34 <__strftime+0x340>
 808ef1c:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
 808ef20:	9105      	str	r1, [sp, #20]
 808ef22:	f001 fd47 	bl	80909b4 <abs>
 808ef26:	2364      	movs	r3, #100	; 0x64
 808ef28:	9905      	ldr	r1, [sp, #20]
 808ef2a:	fb90 f0f3 	sdiv	r0, r0, r3
 808ef2e:	e7e8      	b.n	808ef02 <__strftime+0x30e>
 808ef30:	4b57      	ldr	r3, [pc, #348]	; (808f090 <__strftime+0x49c>)
 808ef32:	4a5a      	ldr	r2, [pc, #360]	; (808f09c <__strftime+0x4a8>)
 808ef34:	f1b8 0f02 	cmp.w	r8, #2
 808ef38:	bf2c      	ite	cs
 808ef3a:	ebc1 0108 	rsbcs	r1, r1, r8
 808ef3e:	f1c1 0102 	rsbcc	r1, r1, #2
 808ef42:	9001      	str	r0, [sp, #4]
 808ef44:	9100      	str	r1, [sp, #0]
 808ef46:	4851      	ldr	r0, [pc, #324]	; (808f08c <__strftime+0x498>)
 808ef48:	4955      	ldr	r1, [pc, #340]	; (808f0a0 <__strftime+0x4ac>)
 808ef4a:	4583      	cmp	fp, r0
 808ef4c:	bfb8      	it	lt
 808ef4e:	460b      	movlt	r3, r1
 808ef50:	1b29      	subs	r1, r5, r4
 808ef52:	1938      	adds	r0, r7, r4
 808ef54:	e029      	b.n	808efaa <__strftime+0x3b6>
 808ef56:	4b4e      	ldr	r3, [pc, #312]	; (808f090 <__strftime+0x49c>)
 808ef58:	e7de      	b.n	808ef18 <__strftime+0x324>
 808ef5a:	4952      	ldr	r1, [pc, #328]	; (808f0a4 <__strftime+0x4b0>)
 808ef5c:	4a52      	ldr	r2, [pc, #328]	; (808f0a8 <__strftime+0x4b4>)
 808ef5e:	68f3      	ldr	r3, [r6, #12]
 808ef60:	2864      	cmp	r0, #100	; 0x64
 808ef62:	bf08      	it	eq
 808ef64:	460a      	moveq	r2, r1
 808ef66:	1b29      	subs	r1, r5, r4
 808ef68:	1938      	adds	r0, r7, r4
 808ef6a:	f7fb fe6b 	bl	808ac44 <sniprintf>
 808ef6e:	2800      	cmp	r0, #0
 808ef70:	f6ff ae72 	blt.w	808ec58 <__strftime+0x64>
 808ef74:	4404      	add	r4, r0
 808ef76:	42a5      	cmp	r5, r4
 808ef78:	f63f af40 	bhi.w	808edfc <__strftime+0x208>
 808ef7c:	e66c      	b.n	808ec58 <__strftime+0x64>
 808ef7e:	6970      	ldr	r0, [r6, #20]
 808ef80:	6933      	ldr	r3, [r6, #16]
 808ef82:	2800      	cmp	r0, #0
 808ef84:	f103 0b01 	add.w	fp, r3, #1
 808ef88:	eb07 0804 	add.w	r8, r7, r4
 808ef8c:	68f3      	ldr	r3, [r6, #12]
 808ef8e:	eba5 0904 	sub.w	r9, r5, r4
 808ef92:	db0d      	blt.n	808efb0 <__strftime+0x3bc>
 808ef94:	2164      	movs	r1, #100	; 0x64
 808ef96:	fb90 f2f1 	sdiv	r2, r0, r1
 808ef9a:	fb01 0212 	mls	r2, r1, r2, r0
 808ef9e:	e9cd 3200 	strd	r3, r2, [sp]
 808efa2:	4649      	mov	r1, r9
 808efa4:	465b      	mov	r3, fp
 808efa6:	4640      	mov	r0, r8
 808efa8:	4a40      	ldr	r2, [pc, #256]	; (808f0ac <__strftime+0x4b8>)
 808efaa:	f7fb fe4b 	bl	808ac44 <sniprintf>
 808efae:	e7de      	b.n	808ef6e <__strftime+0x37a>
 808efb0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808efb4:	9305      	str	r3, [sp, #20]
 808efb6:	f001 fcfd 	bl	80909b4 <abs>
 808efba:	2264      	movs	r2, #100	; 0x64
 808efbc:	fb90 f1f2 	sdiv	r1, r0, r2
 808efc0:	9b05      	ldr	r3, [sp, #20]
 808efc2:	fb01 0212 	mls	r2, r1, r2, r0
 808efc6:	e7ea      	b.n	808ef9e <__strftime+0x3aa>
 808efc8:	2325      	movs	r3, #37	; 0x25
 808efca:	f88d 3020 	strb.w	r3, [sp, #32]
 808efce:	f1b9 0f00 	cmp.w	r9, #0
 808efd2:	d013      	beq.n	808effc <__strftime+0x408>
 808efd4:	f1b8 0f06 	cmp.w	r8, #6
 808efd8:	bf38      	it	cc
 808efda:	f04f 0806 	movcc.w	r8, #6
 808efde:	f1b8 0306 	subs.w	r3, r8, #6
 808efe2:	f88d 9021 	strb.w	r9, [sp, #33]	; 0x21
 808efe6:	d10e      	bne.n	808f006 <__strftime+0x412>
 808efe8:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 808efec:	4930      	ldr	r1, [pc, #192]	; (808f0b0 <__strftime+0x4bc>)
 808efee:	f7ff fd7a 	bl	808eae6 <strcpy>
 808eff2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 808eff4:	aa08      	add	r2, sp, #32
 808eff6:	9300      	str	r3, [sp, #0]
 808eff8:	4633      	mov	r3, r6
 808effa:	e75f      	b.n	808eebc <__strftime+0x2c8>
 808effc:	f04f 092b 	mov.w	r9, #43	; 0x2b
 808f000:	f04f 080a 	mov.w	r8, #10
 808f004:	e7eb      	b.n	808efde <__strftime+0x3ea>
 808f006:	211e      	movs	r1, #30
 808f008:	4a2a      	ldr	r2, [pc, #168]	; (808f0b4 <__strftime+0x4c0>)
 808f00a:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 808f00e:	f7fb fe19 	bl	808ac44 <sniprintf>
 808f012:	2800      	cmp	r0, #0
 808f014:	dde8      	ble.n	808efe8 <__strftime+0x3f4>
 808f016:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 808f01a:	4418      	add	r0, r3
 808f01c:	e7e6      	b.n	808efec <__strftime+0x3f8>
 808f01e:	4630      	mov	r0, r6
 808f020:	f7ff fd86 	bl	808eb30 <iso_year_adjust>
 808f024:	4680      	mov	r8, r0
 808f026:	6970      	ldr	r0, [r6, #20]
 808f028:	2800      	cmp	r0, #0
 808f02a:	db11      	blt.n	808f050 <__strftime+0x45c>
 808f02c:	2264      	movs	r2, #100	; 0x64
 808f02e:	fb90 f3f2 	sdiv	r3, r0, r2
 808f032:	fb02 0313 	mls	r3, r2, r3, r0
 808f036:	4498      	add	r8, r3
 808f038:	2364      	movs	r3, #100	; 0x64
 808f03a:	fb98 f0f3 	sdiv	r0, r8, r3
 808f03e:	fb03 8810 	mls	r8, r3, r0, r8
 808f042:	4498      	add	r8, r3
 808f044:	fbb8 f2f3 	udiv	r2, r8, r3
 808f048:	fb03 8312 	mls	r3, r3, r2, r8
 808f04c:	4a15      	ldr	r2, [pc, #84]	; (808f0a4 <__strftime+0x4b0>)
 808f04e:	e78a      	b.n	808ef66 <__strftime+0x372>
 808f050:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808f054:	f001 fcae 	bl	80909b4 <abs>
 808f058:	2364      	movs	r3, #100	; 0x64
 808f05a:	fb90 f2f3 	sdiv	r2, r0, r3
 808f05e:	f1b8 0f00 	cmp.w	r8, #0
 808f062:	fb02 0313 	mls	r3, r2, r3, r0
 808f066:	da06      	bge.n	808f076 <__strftime+0x482>
 808f068:	6971      	ldr	r1, [r6, #20]
 808f06a:	4a13      	ldr	r2, [pc, #76]	; (808f0b8 <__strftime+0x4c4>)
 808f06c:	4291      	cmp	r1, r2
 808f06e:	bfb8      	it	lt
 808f070:	f04f 0801 	movlt.w	r8, #1
 808f074:	e7df      	b.n	808f036 <__strftime+0x442>
 808f076:	d0de      	beq.n	808f036 <__strftime+0x442>
 808f078:	6971      	ldr	r1, [r6, #20]
 808f07a:	4a04      	ldr	r2, [pc, #16]	; (808f08c <__strftime+0x498>)
 808f07c:	4291      	cmp	r1, r2
 808f07e:	bfb8      	it	lt
 808f080:	f04f 38ff 	movlt.w	r8, #4294967295
 808f084:	e7d7      	b.n	808f036 <__strftime+0x442>
 808f086:	bf00      	nop
 808f088:	08094730 	.word	0x08094730
 808f08c:	fffff894 	.word	0xfffff894
 808f090:	080942e2 	.word	0x080942e2
 808f094:	0809456b 	.word	0x0809456b
 808f098:	08094563 	.word	0x08094563
 808f09c:	0809455c 	.word	0x0809455c
 808f0a0:	08092c6b 	.word	0x08092c6b
 808f0a4:	0809457b 	.word	0x0809457b
 808f0a8:	0809456d 	.word	0x0809456d
 808f0ac:	08094571 	.word	0x08094571
 808f0b0:	08094584 	.word	0x08094584
 808f0b4:	08094580 	.word	0x08094580
 808f0b8:	fffff895 	.word	0xfffff895
 808f0bc:	4bb7      	ldr	r3, [pc, #732]	; (808f39c <__strftime+0x7a8>)
 808f0be:	6971      	ldr	r1, [r6, #20]
 808f0c0:	4630      	mov	r0, r6
 808f0c2:	4299      	cmp	r1, r3
 808f0c4:	bfac      	ite	ge
 808f0c6:	2300      	movge	r3, #0
 808f0c8:	2301      	movlt	r3, #1
 808f0ca:	e9cd 3105 	strd	r3, r1, [sp, #20]
 808f0ce:	f7ff fd2f 	bl	808eb30 <iso_year_adjust>
 808f0d2:	9906      	ldr	r1, [sp, #24]
 808f0d4:	4683      	mov	fp, r0
 808f0d6:	2900      	cmp	r1, #0
 808f0d8:	db2a      	blt.n	808f130 <__strftime+0x53c>
 808f0da:	2264      	movs	r2, #100	; 0x64
 808f0dc:	fb91 f2f2 	sdiv	r2, r1, r2
 808f0e0:	3213      	adds	r2, #19
 808f0e2:	6970      	ldr	r0, [r6, #20]
 808f0e4:	2800      	cmp	r0, #0
 808f0e6:	db2d      	blt.n	808f144 <__strftime+0x550>
 808f0e8:	f04f 0c64 	mov.w	ip, #100	; 0x64
 808f0ec:	fb90 fefc 	sdiv	lr, r0, ip
 808f0f0:	fb0c 001e 	mls	r0, ip, lr, r0
 808f0f4:	f1bb 0f00 	cmp.w	fp, #0
 808f0f8:	da33      	bge.n	808f162 <__strftime+0x56e>
 808f0fa:	6971      	ldr	r1, [r6, #20]
 808f0fc:	4ba8      	ldr	r3, [pc, #672]	; (808f3a0 <__strftime+0x7ac>)
 808f0fe:	4299      	cmp	r1, r3
 808f100:	db39      	blt.n	808f176 <__strftime+0x582>
 808f102:	eb0b 0300 	add.w	r3, fp, r0
 808f106:	1c59      	adds	r1, r3, #1
 808f108:	d13a      	bne.n	808f180 <__strftime+0x58c>
 808f10a:	2363      	movs	r3, #99	; 0x63
 808f10c:	3a01      	subs	r2, #1
 808f10e:	2064      	movs	r0, #100	; 0x64
 808f110:	fb00 3202 	mla	r2, r0, r2, r3
 808f114:	9b05      	ldr	r3, [sp, #20]
 808f116:	2b00      	cmp	r3, #0
 808f118:	d037      	beq.n	808f18a <__strftime+0x596>
 808f11a:	232d      	movs	r3, #45	; 0x2d
 808f11c:	f88d 3020 	strb.w	r3, [sp, #32]
 808f120:	f1b8 0f00 	cmp.w	r8, #0
 808f124:	d001      	beq.n	808f12a <__strftime+0x536>
 808f126:	f108 38ff 	add.w	r8, r8, #4294967295
 808f12a:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 808f12e:	e037      	b.n	808f1a0 <__strftime+0x5ac>
 808f130:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 808f134:	9106      	str	r1, [sp, #24]
 808f136:	f001 fc3d 	bl	80909b4 <abs>
 808f13a:	2264      	movs	r2, #100	; 0x64
 808f13c:	9906      	ldr	r1, [sp, #24]
 808f13e:	fb90 f2f2 	sdiv	r2, r0, r2
 808f142:	e7ce      	b.n	808f0e2 <__strftime+0x4ee>
 808f144:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808f148:	e9cd 1206 	strd	r1, r2, [sp, #24]
 808f14c:	f001 fc32 	bl	80909b4 <abs>
 808f150:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 808f154:	f04f 0c64 	mov.w	ip, #100	; 0x64
 808f158:	fb90 fefc 	sdiv	lr, r0, ip
 808f15c:	fb0e 001c 	mls	r0, lr, ip, r0
 808f160:	e7c8      	b.n	808f0f4 <__strftime+0x500>
 808f162:	d0ce      	beq.n	808f102 <__strftime+0x50e>
 808f164:	4b8d      	ldr	r3, [pc, #564]	; (808f39c <__strftime+0x7a8>)
 808f166:	4299      	cmp	r1, r3
 808f168:	bfb6      	itet	lt
 808f16a:	2301      	movlt	r3, #1
 808f16c:	2300      	movge	r3, #0
 808f16e:	f04f 3bff 	movlt.w	fp, #4294967295
 808f172:	9305      	str	r3, [sp, #20]
 808f174:	e7c5      	b.n	808f102 <__strftime+0x50e>
 808f176:	f04f 0b01 	mov.w	fp, #1
 808f17a:	f8cd b014 	str.w	fp, [sp, #20]
 808f17e:	e7c0      	b.n	808f102 <__strftime+0x50e>
 808f180:	2b64      	cmp	r3, #100	; 0x64
 808f182:	bf04      	itt	eq
 808f184:	2300      	moveq	r3, #0
 808f186:	3201      	addeq	r2, #1
 808f188:	e7c1      	b.n	808f10e <__strftime+0x51a>
 808f18a:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 808f18e:	d106      	bne.n	808f19e <__strftime+0x5aa>
 808f190:	f242 730f 	movw	r3, #9999	; 0x270f
 808f194:	429a      	cmp	r2, r3
 808f196:	d902      	bls.n	808f19e <__strftime+0x5aa>
 808f198:	f88d 9020 	strb.w	r9, [sp, #32]
 808f19c:	e7c0      	b.n	808f120 <__strftime+0x52c>
 808f19e:	ab08      	add	r3, sp, #32
 808f1a0:	2125      	movs	r1, #37	; 0x25
 808f1a2:	7019      	strb	r1, [r3, #0]
 808f1a4:	f1b9 0f00 	cmp.w	r9, #0
 808f1a8:	d109      	bne.n	808f1be <__strftime+0x5ca>
 808f1aa:	1c58      	adds	r0, r3, #1
 808f1ac:	497d      	ldr	r1, [pc, #500]	; (808f3a4 <__strftime+0x7b0>)
 808f1ae:	9205      	str	r2, [sp, #20]
 808f1b0:	f7ff fc99 	bl	808eae6 <strcpy>
 808f1b4:	9a05      	ldr	r2, [sp, #20]
 808f1b6:	9200      	str	r2, [sp, #0]
 808f1b8:	4643      	mov	r3, r8
 808f1ba:	aa08      	add	r2, sp, #32
 808f1bc:	e058      	b.n	808f270 <__strftime+0x67c>
 808f1be:	2130      	movs	r1, #48	; 0x30
 808f1c0:	1c98      	adds	r0, r3, #2
 808f1c2:	7059      	strb	r1, [r3, #1]
 808f1c4:	e7f2      	b.n	808f1ac <__strftime+0x5b8>
 808f1c6:	4978      	ldr	r1, [pc, #480]	; (808f3a8 <__strftime+0x7b4>)
 808f1c8:	4a78      	ldr	r2, [pc, #480]	; (808f3ac <__strftime+0x7b8>)
 808f1ca:	68b3      	ldr	r3, [r6, #8]
 808f1cc:	286b      	cmp	r0, #107	; 0x6b
 808f1ce:	bf08      	it	eq
 808f1d0:	460a      	moveq	r2, r1
 808f1d2:	e6c8      	b.n	808ef66 <__strftime+0x372>
 808f1d4:	68b3      	ldr	r3, [r6, #8]
 808f1d6:	b163      	cbz	r3, 808f1f2 <__strftime+0x5fe>
 808f1d8:	2b0c      	cmp	r3, #12
 808f1da:	d004      	beq.n	808f1e6 <__strftime+0x5f2>
 808f1dc:	210c      	movs	r1, #12
 808f1de:	fb93 f2f1 	sdiv	r2, r3, r1
 808f1e2:	fb01 3312 	mls	r3, r1, r2, r3
 808f1e6:	4971      	ldr	r1, [pc, #452]	; (808f3ac <__strftime+0x7b8>)
 808f1e8:	4a6f      	ldr	r2, [pc, #444]	; (808f3a8 <__strftime+0x7b4>)
 808f1ea:	2849      	cmp	r0, #73	; 0x49
 808f1ec:	bf08      	it	eq
 808f1ee:	460a      	moveq	r2, r1
 808f1f0:	e6b9      	b.n	808ef66 <__strftime+0x372>
 808f1f2:	230c      	movs	r3, #12
 808f1f4:	e7f7      	b.n	808f1e6 <__strftime+0x5f2>
 808f1f6:	69f3      	ldr	r3, [r6, #28]
 808f1f8:	4a6d      	ldr	r2, [pc, #436]	; (808f3b0 <__strftime+0x7bc>)
 808f1fa:	3301      	adds	r3, #1
 808f1fc:	e6b3      	b.n	808ef66 <__strftime+0x372>
 808f1fe:	6933      	ldr	r3, [r6, #16]
 808f200:	3301      	adds	r3, #1
 808f202:	e723      	b.n	808f04c <__strftime+0x458>
 808f204:	6873      	ldr	r3, [r6, #4]
 808f206:	e721      	b.n	808f04c <__strftime+0x458>
 808f208:	1e6b      	subs	r3, r5, #1
 808f20a:	42a3      	cmp	r3, r4
 808f20c:	f67f ad24 	bls.w	808ec58 <__strftime+0x64>
 808f210:	230a      	movs	r3, #10
 808f212:	553b      	strb	r3, [r7, r4]
 808f214:	3401      	adds	r4, #1
 808f216:	e5f1      	b.n	808edfc <__strftime+0x208>
 808f218:	68b3      	ldr	r3, [r6, #8]
 808f21a:	2b0b      	cmp	r3, #11
 808f21c:	bfcc      	ite	gt
 808f21e:	22a4      	movgt	r2, #164	; 0xa4
 808f220:	22a0      	movle	r2, #160	; 0xa0
 808f222:	4b64      	ldr	r3, [pc, #400]	; (808f3b4 <__strftime+0x7c0>)
 808f224:	4413      	add	r3, r2
 808f226:	f8d3 8004 	ldr.w	r8, [r3, #4]
 808f22a:	4640      	mov	r0, r8
 808f22c:	f000 f9e2 	bl	808f5f4 <strlen>
 808f230:	f108 32ff 	add.w	r2, r8, #4294967295
 808f234:	4420      	add	r0, r4
 808f236:	f105 3cff 	add.w	ip, r5, #4294967295
 808f23a:	42a0      	cmp	r0, r4
 808f23c:	f43f adde 	beq.w	808edfc <__strftime+0x208>
 808f240:	45a4      	cmp	ip, r4
 808f242:	f67f ad09 	bls.w	808ec58 <__strftime+0x64>
 808f246:	f89a 1000 	ldrb.w	r1, [sl]
 808f24a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 808f24e:	2950      	cmp	r1, #80	; 0x50
 808f250:	d107      	bne.n	808f262 <__strftime+0x66e>
 808f252:	4959      	ldr	r1, [pc, #356]	; (808f3b8 <__strftime+0x7c4>)
 808f254:	5cc9      	ldrb	r1, [r1, r3]
 808f256:	f001 0103 	and.w	r1, r1, #3
 808f25a:	2901      	cmp	r1, #1
 808f25c:	bf08      	it	eq
 808f25e:	3320      	addeq	r3, #32
 808f260:	b2db      	uxtb	r3, r3
 808f262:	553b      	strb	r3, [r7, r4]
 808f264:	3401      	adds	r4, #1
 808f266:	e7e8      	b.n	808f23a <__strftime+0x646>
 808f268:	6873      	ldr	r3, [r6, #4]
 808f26a:	4a54      	ldr	r2, [pc, #336]	; (808f3bc <__strftime+0x7c8>)
 808f26c:	9300      	str	r3, [sp, #0]
 808f26e:	68b3      	ldr	r3, [r6, #8]
 808f270:	1b29      	subs	r1, r5, r4
 808f272:	1938      	adds	r0, r7, r4
 808f274:	f7fb fce6 	bl	808ac44 <sniprintf>
 808f278:	e679      	b.n	808ef6e <__strftime+0x37a>
 808f27a:	6a33      	ldr	r3, [r6, #32]
 808f27c:	2b00      	cmp	r3, #0
 808f27e:	db7b      	blt.n	808f378 <__strftime+0x784>
 808f280:	f001 fa06 	bl	8090690 <__tz_lock>
 808f284:	9b04      	ldr	r3, [sp, #16]
 808f286:	b90b      	cbnz	r3, 808f28c <__strftime+0x698>
 808f288:	f001 fa0e 	bl	80906a8 <_tzset_unlocked>
 808f28c:	f001 ff2c 	bl	80910e8 <__gettzinfo>
 808f290:	6a33      	ldr	r3, [r6, #32]
 808f292:	2b00      	cmp	r3, #0
 808f294:	bfcc      	ite	gt
 808f296:	2350      	movgt	r3, #80	; 0x50
 808f298:	2328      	movle	r3, #40	; 0x28
 808f29a:	58c3      	ldr	r3, [r0, r3]
 808f29c:	f1c3 0900 	rsb	r9, r3, #0
 808f2a0:	f001 f9fc 	bl	809069c <__tz_unlock>
 808f2a4:	2301      	movs	r3, #1
 808f2a6:	9304      	str	r3, [sp, #16]
 808f2a8:	f8d6 c014 	ldr.w	ip, [r6, #20]
 808f2ac:	eba5 0e04 	sub.w	lr, r5, r4
 808f2b0:	4662      	mov	r2, ip
 808f2b2:	f1bc 0145 	subs.w	r1, ip, #69	; 0x45
 808f2b6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 808f2ba:	9102      	str	r1, [sp, #8]
 808f2bc:	f143 31ff 	adc.w	r1, r3, #4294967295
 808f2c0:	9103      	str	r1, [sp, #12]
 808f2c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808f2c6:	2800      	cmp	r0, #0
 808f2c8:	f171 0100 	sbcs.w	r1, r1, #0
 808f2cc:	eb07 0804 	add.w	r8, r7, r4
 808f2d0:	da05      	bge.n	808f2de <__strftime+0x6ea>
 808f2d2:	f1bc 0142 	subs.w	r1, ip, #66	; 0x42
 808f2d6:	f143 33ff 	adc.w	r3, r3, #4294967295
 808f2da:	9102      	str	r1, [sp, #8]
 808f2dc:	9303      	str	r3, [sp, #12]
 808f2de:	9b02      	ldr	r3, [sp, #8]
 808f2e0:	f10c 32ff 	add.w	r2, ip, #4294967295
 808f2e4:	0898      	lsrs	r0, r3, #2
 808f2e6:	9b03      	ldr	r3, [sp, #12]
 808f2e8:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 808f2ec:	1099      	asrs	r1, r3, #2
 808f2ee:	2364      	movs	r3, #100	; 0x64
 808f2f0:	fb92 f3f3 	sdiv	r3, r2, r3
 808f2f4:	1ac0      	subs	r0, r0, r3
 808f2f6:	eb61 71e3 	sbc.w	r1, r1, r3, asr #31
 808f2fa:	f44f 73c8 	mov.w	r3, #400	; 0x190
 808f2fe:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 808f302:	fb92 f3f3 	sdiv	r3, r2, r3
 808f306:	18c0      	adds	r0, r0, r3
 808f308:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 808f30c:	f240 136d 	movw	r3, #365	; 0x16d
 808f310:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 808f314:	fb03 fc0c 	mul.w	ip, r3, ip
 808f318:	eb10 000c 	adds.w	r0, r0, ip
 808f31c:	eb41 71ec 	adc.w	r1, r1, ip, asr #31
 808f320:	f04f 0c18 	mov.w	ip, #24
 808f324:	69f3      	ldr	r3, [r6, #28]
 808f326:	18c0      	adds	r0, r0, r3
 808f328:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 808f32c:	fba0 230c 	umull	r2, r3, r0, ip
 808f330:	fb0c 3301 	mla	r3, ip, r1, r3
 808f334:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 808f338:	68b1      	ldr	r1, [r6, #8]
 808f33a:	1852      	adds	r2, r2, r1
 808f33c:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 808f340:	fba2 010c 	umull	r0, r1, r2, ip
 808f344:	fb0c 1103 	mla	r1, ip, r3, r1
 808f348:	6873      	ldr	r3, [r6, #4]
 808f34a:	18c0      	adds	r0, r0, r3
 808f34c:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 808f350:	fba0 230c 	umull	r2, r3, r0, ip
 808f354:	fb0c 3301 	mla	r3, ip, r1, r3
 808f358:	6831      	ldr	r1, [r6, #0]
 808f35a:	4640      	mov	r0, r8
 808f35c:	1852      	adds	r2, r2, r1
 808f35e:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 808f362:	ebb2 0209 	subs.w	r2, r2, r9
 808f366:	eb63 73e9 	sbc.w	r3, r3, r9, asr #31
 808f36a:	e9cd 2300 	strd	r2, r3, [sp]
 808f36e:	4671      	mov	r1, lr
 808f370:	4a13      	ldr	r2, [pc, #76]	; (808f3c0 <__strftime+0x7cc>)
 808f372:	f7fb fc67 	bl	808ac44 <sniprintf>
 808f376:	e5fa      	b.n	808ef6e <__strftime+0x37a>
 808f378:	f04f 0900 	mov.w	r9, #0
 808f37c:	e794      	b.n	808f2a8 <__strftime+0x6b4>
 808f37e:	6833      	ldr	r3, [r6, #0]
 808f380:	e664      	b.n	808f04c <__strftime+0x458>
 808f382:	1e6b      	subs	r3, r5, #1
 808f384:	42a3      	cmp	r3, r4
 808f386:	f67f ac67 	bls.w	808ec58 <__strftime+0x64>
 808f38a:	2309      	movs	r3, #9
 808f38c:	e741      	b.n	808f212 <__strftime+0x61e>
 808f38e:	6833      	ldr	r3, [r6, #0]
 808f390:	4a0c      	ldr	r2, [pc, #48]	; (808f3c4 <__strftime+0x7d0>)
 808f392:	9301      	str	r3, [sp, #4]
 808f394:	6873      	ldr	r3, [r6, #4]
 808f396:	9300      	str	r3, [sp, #0]
 808f398:	68b3      	ldr	r3, [r6, #8]
 808f39a:	e5d9      	b.n	808ef50 <__strftime+0x35c>
 808f39c:	fffff894 	.word	0xfffff894
 808f3a0:	fffff895 	.word	0xfffff895
 808f3a4:	0809458c 	.word	0x0809458c
 808f3a8:	0809456d 	.word	0x0809456d
 808f3ac:	0809457b 	.word	0x0809457b
 808f3b0:	08094590 	.word	0x08094590
 808f3b4:	08094730 	.word	0x08094730
 808f3b8:	08094869 	.word	0x08094869
 808f3bc:	0809459f 	.word	0x0809459f
 808f3c0:	08094595 	.word	0x08094595
 808f3c4:	0809459a 	.word	0x0809459a
 808f3c8:	1e6b      	subs	r3, r5, #1
 808f3ca:	42a3      	cmp	r3, r4
 808f3cc:	f67f ac44 	bls.w	808ec58 <__strftime+0x64>
 808f3d0:	69b3      	ldr	r3, [r6, #24]
 808f3d2:	193a      	adds	r2, r7, r4
 808f3d4:	3401      	adds	r4, #1
 808f3d6:	b913      	cbnz	r3, 808f3de <__strftime+0x7ea>
 808f3d8:	2337      	movs	r3, #55	; 0x37
 808f3da:	7013      	strb	r3, [r2, #0]
 808f3dc:	e50e      	b.n	808edfc <__strftime+0x208>
 808f3de:	3330      	adds	r3, #48	; 0x30
 808f3e0:	e7fb      	b.n	808f3da <__strftime+0x7e6>
 808f3e2:	69f3      	ldr	r3, [r6, #28]
 808f3e4:	69b2      	ldr	r2, [r6, #24]
 808f3e6:	3307      	adds	r3, #7
 808f3e8:	1a9b      	subs	r3, r3, r2
 808f3ea:	2207      	movs	r2, #7
 808f3ec:	fb93 f3f2 	sdiv	r3, r3, r2
 808f3f0:	e62c      	b.n	808f04c <__strftime+0x458>
 808f3f2:	4630      	mov	r0, r6
 808f3f4:	f7ff fb9c 	bl	808eb30 <iso_year_adjust>
 808f3f8:	69b2      	ldr	r2, [r6, #24]
 808f3fa:	b132      	cbz	r2, 808f40a <__strftime+0x816>
 808f3fc:	3a01      	subs	r2, #1
 808f3fe:	2800      	cmp	r0, #0
 808f400:	dc27      	bgt.n	808f452 <__strftime+0x85e>
 808f402:	69f3      	ldr	r3, [r6, #28]
 808f404:	d103      	bne.n	808f40e <__strftime+0x81a>
 808f406:	330a      	adds	r3, #10
 808f408:	e7ee      	b.n	808f3e8 <__strftime+0x7f4>
 808f40a:	2206      	movs	r2, #6
 808f40c:	e7f7      	b.n	808f3fe <__strftime+0x80a>
 808f40e:	6970      	ldr	r0, [r6, #20]
 808f410:	1ad3      	subs	r3, r2, r3
 808f412:	2800      	cmp	r0, #0
 808f414:	f240 726b 	movw	r2, #1899	; 0x76b
 808f418:	bfa8      	it	ge
 808f41a:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 808f41e:	4410      	add	r0, r2
 808f420:	0782      	lsls	r2, r0, #30
 808f422:	d105      	bne.n	808f430 <__strftime+0x83c>
 808f424:	2264      	movs	r2, #100	; 0x64
 808f426:	fb90 f1f2 	sdiv	r1, r0, r2
 808f42a:	fb02 0111 	mls	r1, r2, r1, r0
 808f42e:	b971      	cbnz	r1, 808f44e <__strftime+0x85a>
 808f430:	f44f 71c8 	mov.w	r1, #400	; 0x190
 808f434:	fb90 f2f1 	sdiv	r2, r0, r1
 808f438:	fb01 0212 	mls	r2, r1, r2, r0
 808f43c:	fab2 f282 	clz	r2, r2
 808f440:	0952      	lsrs	r2, r2, #5
 808f442:	1a9a      	subs	r2, r3, r2
 808f444:	2a05      	cmp	r2, #5
 808f446:	bfb4      	ite	lt
 808f448:	2335      	movlt	r3, #53	; 0x35
 808f44a:	2334      	movge	r3, #52	; 0x34
 808f44c:	e5fe      	b.n	808f04c <__strftime+0x458>
 808f44e:	2201      	movs	r2, #1
 808f450:	e7f7      	b.n	808f442 <__strftime+0x84e>
 808f452:	2301      	movs	r3, #1
 808f454:	e5fa      	b.n	808f04c <__strftime+0x458>
 808f456:	1e6b      	subs	r3, r5, #1
 808f458:	42a3      	cmp	r3, r4
 808f45a:	f67f abfd 	bls.w	808ec58 <__strftime+0x64>
 808f45e:	69b3      	ldr	r3, [r6, #24]
 808f460:	3330      	adds	r3, #48	; 0x30
 808f462:	e6d6      	b.n	808f212 <__strftime+0x61e>
 808f464:	69b3      	ldr	r3, [r6, #24]
 808f466:	b13b      	cbz	r3, 808f478 <__strftime+0x884>
 808f468:	3b01      	subs	r3, #1
 808f46a:	69f2      	ldr	r2, [r6, #28]
 808f46c:	3207      	adds	r2, #7
 808f46e:	1ad2      	subs	r2, r2, r3
 808f470:	2307      	movs	r3, #7
 808f472:	fb92 f3f3 	sdiv	r3, r2, r3
 808f476:	e5e9      	b.n	808f04c <__strftime+0x458>
 808f478:	2306      	movs	r3, #6
 808f47a:	e7f6      	b.n	808f46a <__strftime+0x876>
 808f47c:	6970      	ldr	r0, [r6, #20]
 808f47e:	2800      	cmp	r0, #0
 808f480:	db05      	blt.n	808f48e <__strftime+0x89a>
 808f482:	2264      	movs	r2, #100	; 0x64
 808f484:	fb90 f3f2 	sdiv	r3, r0, r2
 808f488:	fb03 0312 	mls	r3, r3, r2, r0
 808f48c:	e5de      	b.n	808f04c <__strftime+0x458>
 808f48e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808f492:	f001 fa8f 	bl	80909b4 <abs>
 808f496:	e7f4      	b.n	808f482 <__strftime+0x88e>
 808f498:	6973      	ldr	r3, [r6, #20]
 808f49a:	4a4d      	ldr	r2, [pc, #308]	; (808f5d0 <__strftime+0x9dc>)
 808f49c:	4293      	cmp	r3, r2
 808f49e:	da0c      	bge.n	808f4ba <__strftime+0x8c6>
 808f4a0:	212d      	movs	r1, #45	; 0x2d
 808f4a2:	eba2 0b03 	sub.w	fp, r2, r3
 808f4a6:	f88d 1020 	strb.w	r1, [sp, #32]
 808f4aa:	f1b8 0f00 	cmp.w	r8, #0
 808f4ae:	d001      	beq.n	808f4b4 <__strftime+0x8c0>
 808f4b0:	f108 38ff 	add.w	r8, r8, #4294967295
 808f4b4:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 808f4b8:	e00c      	b.n	808f4d4 <__strftime+0x8e0>
 808f4ba:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 808f4be:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
 808f4c2:	d106      	bne.n	808f4d2 <__strftime+0x8de>
 808f4c4:	f242 730f 	movw	r3, #9999	; 0x270f
 808f4c8:	459b      	cmp	fp, r3
 808f4ca:	d902      	bls.n	808f4d2 <__strftime+0x8de>
 808f4cc:	f88d 9020 	strb.w	r9, [sp, #32]
 808f4d0:	e7eb      	b.n	808f4aa <__strftime+0x8b6>
 808f4d2:	ab08      	add	r3, sp, #32
 808f4d4:	2225      	movs	r2, #37	; 0x25
 808f4d6:	701a      	strb	r2, [r3, #0]
 808f4d8:	f1b9 0f00 	cmp.w	r9, #0
 808f4dc:	d106      	bne.n	808f4ec <__strftime+0x8f8>
 808f4de:	1c58      	adds	r0, r3, #1
 808f4e0:	493c      	ldr	r1, [pc, #240]	; (808f5d4 <__strftime+0x9e0>)
 808f4e2:	f7ff fb00 	bl	808eae6 <strcpy>
 808f4e6:	f8cd b000 	str.w	fp, [sp]
 808f4ea:	e665      	b.n	808f1b8 <__strftime+0x5c4>
 808f4ec:	2230      	movs	r2, #48	; 0x30
 808f4ee:	1c98      	adds	r0, r3, #2
 808f4f0:	705a      	strb	r2, [r3, #1]
 808f4f2:	e7f5      	b.n	808f4e0 <__strftime+0x8ec>
 808f4f4:	6a33      	ldr	r3, [r6, #32]
 808f4f6:	2b00      	cmp	r3, #0
 808f4f8:	f6ff ac80 	blt.w	808edfc <__strftime+0x208>
 808f4fc:	f001 f8c8 	bl	8090690 <__tz_lock>
 808f500:	9b04      	ldr	r3, [sp, #16]
 808f502:	b90b      	cbnz	r3, 808f508 <__strftime+0x914>
 808f504:	f001 f8d0 	bl	80906a8 <_tzset_unlocked>
 808f508:	f001 fdee 	bl	80910e8 <__gettzinfo>
 808f50c:	6a33      	ldr	r3, [r6, #32]
 808f50e:	eb07 0904 	add.w	r9, r7, r4
 808f512:	2b00      	cmp	r3, #0
 808f514:	bfcc      	ite	gt
 808f516:	2350      	movgt	r3, #80	; 0x50
 808f518:	2328      	movle	r3, #40	; 0x28
 808f51a:	58c3      	ldr	r3, [r0, r3]
 808f51c:	eba5 0b04 	sub.w	fp, r5, r4
 808f520:	f1c3 0800 	rsb	r8, r3, #0
 808f524:	f001 f8ba 	bl	809069c <__tz_unlock>
 808f528:	233c      	movs	r3, #60	; 0x3c
 808f52a:	fb98 f0f3 	sdiv	r0, r8, r3
 808f52e:	f001 fe8f 	bl	8091250 <labs>
 808f532:	233c      	movs	r3, #60	; 0x3c
 808f534:	fb90 f2f3 	sdiv	r2, r0, r3
 808f538:	fb02 0013 	mls	r0, r2, r3, r0
 808f53c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808f540:	9000      	str	r0, [sp, #0]
 808f542:	fb98 f3f3 	sdiv	r3, r8, r3
 808f546:	4659      	mov	r1, fp
 808f548:	4648      	mov	r0, r9
 808f54a:	4a23      	ldr	r2, [pc, #140]	; (808f5d8 <__strftime+0x9e4>)
 808f54c:	f7fb fb7a 	bl	808ac44 <sniprintf>
 808f550:	2800      	cmp	r0, #0
 808f552:	f6ff ab81 	blt.w	808ec58 <__strftime+0x64>
 808f556:	4404      	add	r4, r0
 808f558:	42a5      	cmp	r5, r4
 808f55a:	f67f ab7d 	bls.w	808ec58 <__strftime+0x64>
 808f55e:	2301      	movs	r3, #1
 808f560:	9304      	str	r3, [sp, #16]
 808f562:	e44b      	b.n	808edfc <__strftime+0x208>
 808f564:	6a33      	ldr	r3, [r6, #32]
 808f566:	2b00      	cmp	r3, #0
 808f568:	f6ff ac48 	blt.w	808edfc <__strftime+0x208>
 808f56c:	f001 f890 	bl	8090690 <__tz_lock>
 808f570:	9b04      	ldr	r3, [sp, #16]
 808f572:	b90b      	cbnz	r3, 808f578 <__strftime+0x984>
 808f574:	f001 f898 	bl	80906a8 <_tzset_unlocked>
 808f578:	6a33      	ldr	r3, [r6, #32]
 808f57a:	4a18      	ldr	r2, [pc, #96]	; (808f5dc <__strftime+0x9e8>)
 808f57c:	2b00      	cmp	r3, #0
 808f57e:	bfd4      	ite	le
 808f580:	2300      	movle	r3, #0
 808f582:	2301      	movgt	r3, #1
 808f584:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808f588:	4640      	mov	r0, r8
 808f58a:	f000 f833 	bl	808f5f4 <strlen>
 808f58e:	f108 38ff 	add.w	r8, r8, #4294967295
 808f592:	4420      	add	r0, r4
 808f594:	1e6b      	subs	r3, r5, #1
 808f596:	42a0      	cmp	r0, r4
 808f598:	d102      	bne.n	808f5a0 <__strftime+0x9ac>
 808f59a:	f001 f87f 	bl	809069c <__tz_unlock>
 808f59e:	e7de      	b.n	808f55e <__strftime+0x96a>
 808f5a0:	42a3      	cmp	r3, r4
 808f5a2:	d904      	bls.n	808f5ae <__strftime+0x9ba>
 808f5a4:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808f5a8:	553a      	strb	r2, [r7, r4]
 808f5aa:	3401      	adds	r4, #1
 808f5ac:	e7f3      	b.n	808f596 <__strftime+0x9a2>
 808f5ae:	f001 f875 	bl	809069c <__tz_unlock>
 808f5b2:	f7ff bb51 	b.w	808ec58 <__strftime+0x64>
 808f5b6:	1e6b      	subs	r3, r5, #1
 808f5b8:	42a3      	cmp	r3, r4
 808f5ba:	f67f ab4d 	bls.w	808ec58 <__strftime+0x64>
 808f5be:	2325      	movs	r3, #37	; 0x25
 808f5c0:	e627      	b.n	808f212 <__strftime+0x61e>
 808f5c2:	b10d      	cbz	r5, 808f5c8 <__strftime+0x9d4>
 808f5c4:	2300      	movs	r3, #0
 808f5c6:	553b      	strb	r3, [r7, r4]
 808f5c8:	4620      	mov	r0, r4
 808f5ca:	b011      	add	sp, #68	; 0x44
 808f5cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808f5d0:	fffff894 	.word	0xfffff894
 808f5d4:	0809458c 	.word	0x0809458c
 808f5d8:	080945a9 	.word	0x080945a9
 808f5dc:	2000014c 	.word	0x2000014c

0808f5e0 <strftime>:
 808f5e0:	b513      	push	{r0, r1, r4, lr}
 808f5e2:	4c03      	ldr	r4, [pc, #12]	; (808f5f0 <strftime+0x10>)
 808f5e4:	9400      	str	r4, [sp, #0]
 808f5e6:	f7ff fb05 	bl	808ebf4 <__strftime>
 808f5ea:	b002      	add	sp, #8
 808f5ec:	bd10      	pop	{r4, pc}
 808f5ee:	bf00      	nop
 808f5f0:	200001b4 	.word	0x200001b4

0808f5f4 <strlen>:
 808f5f4:	4603      	mov	r3, r0
 808f5f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 808f5fa:	2a00      	cmp	r2, #0
 808f5fc:	d1fb      	bne.n	808f5f6 <strlen+0x2>
 808f5fe:	1a18      	subs	r0, r3, r0
 808f600:	3801      	subs	r0, #1
 808f602:	4770      	bx	lr

0808f604 <strncmp>:
 808f604:	b510      	push	{r4, lr}
 808f606:	b16a      	cbz	r2, 808f624 <strncmp+0x20>
 808f608:	3901      	subs	r1, #1
 808f60a:	1884      	adds	r4, r0, r2
 808f60c:	f810 3b01 	ldrb.w	r3, [r0], #1
 808f610:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 808f614:	4293      	cmp	r3, r2
 808f616:	d103      	bne.n	808f620 <strncmp+0x1c>
 808f618:	42a0      	cmp	r0, r4
 808f61a:	d001      	beq.n	808f620 <strncmp+0x1c>
 808f61c:	2b00      	cmp	r3, #0
 808f61e:	d1f5      	bne.n	808f60c <strncmp+0x8>
 808f620:	1a98      	subs	r0, r3, r2
 808f622:	bd10      	pop	{r4, pc}
 808f624:	4610      	mov	r0, r2
 808f626:	e7fc      	b.n	808f622 <strncmp+0x1e>

0808f628 <strncpy>:
 808f628:	4603      	mov	r3, r0
 808f62a:	b510      	push	{r4, lr}
 808f62c:	3901      	subs	r1, #1
 808f62e:	b132      	cbz	r2, 808f63e <strncpy+0x16>
 808f630:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808f634:	3a01      	subs	r2, #1
 808f636:	f803 4b01 	strb.w	r4, [r3], #1
 808f63a:	2c00      	cmp	r4, #0
 808f63c:	d1f7      	bne.n	808f62e <strncpy+0x6>
 808f63e:	2100      	movs	r1, #0
 808f640:	441a      	add	r2, r3
 808f642:	4293      	cmp	r3, r2
 808f644:	d100      	bne.n	808f648 <strncpy+0x20>
 808f646:	bd10      	pop	{r4, pc}
 808f648:	f803 1b01 	strb.w	r1, [r3], #1
 808f64c:	e7f9      	b.n	808f642 <strncpy+0x1a>

0808f64e <strstr>:
 808f64e:	b5f0      	push	{r4, r5, r6, r7, lr}
 808f650:	780c      	ldrb	r4, [r1, #0]
 808f652:	b164      	cbz	r4, 808f66e <strstr+0x20>
 808f654:	4603      	mov	r3, r0
 808f656:	781a      	ldrb	r2, [r3, #0]
 808f658:	4618      	mov	r0, r3
 808f65a:	1c5e      	adds	r6, r3, #1
 808f65c:	b90a      	cbnz	r2, 808f662 <strstr+0x14>
 808f65e:	4610      	mov	r0, r2
 808f660:	e005      	b.n	808f66e <strstr+0x20>
 808f662:	4294      	cmp	r4, r2
 808f664:	d108      	bne.n	808f678 <strstr+0x2a>
 808f666:	460d      	mov	r5, r1
 808f668:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 808f66c:	b902      	cbnz	r2, 808f670 <strstr+0x22>
 808f66e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808f670:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 808f674:	4297      	cmp	r7, r2
 808f676:	d0f7      	beq.n	808f668 <strstr+0x1a>
 808f678:	4633      	mov	r3, r6
 808f67a:	e7ec      	b.n	808f656 <strstr+0x8>

0808f67c <sulp>:
 808f67c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808f680:	460f      	mov	r7, r1
 808f682:	4690      	mov	r8, r2
 808f684:	f002 f8fc 	bl	8091880 <__ulp>
 808f688:	4604      	mov	r4, r0
 808f68a:	460d      	mov	r5, r1
 808f68c:	f1b8 0f00 	cmp.w	r8, #0
 808f690:	d011      	beq.n	808f6b6 <sulp+0x3a>
 808f692:	f3c7 530a 	ubfx	r3, r7, #20, #11
 808f696:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808f69a:	2b00      	cmp	r3, #0
 808f69c:	dd0b      	ble.n	808f6b6 <sulp+0x3a>
 808f69e:	2400      	movs	r4, #0
 808f6a0:	051b      	lsls	r3, r3, #20
 808f6a2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 808f6a6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 808f6aa:	4622      	mov	r2, r4
 808f6ac:	462b      	mov	r3, r5
 808f6ae:	f7fe f825 	bl	808d6fc <__aeabi_dmul>
 808f6b2:	4604      	mov	r4, r0
 808f6b4:	460d      	mov	r5, r1
 808f6b6:	4620      	mov	r0, r4
 808f6b8:	4629      	mov	r1, r5
 808f6ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0808f6c0 <_strtod_l>:
 808f6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808f6c4:	469b      	mov	fp, r3
 808f6c6:	2300      	movs	r3, #0
 808f6c8:	b0a1      	sub	sp, #132	; 0x84
 808f6ca:	931c      	str	r3, [sp, #112]	; 0x70
 808f6cc:	4ba1      	ldr	r3, [pc, #644]	; (808f954 <_strtod_l+0x294>)
 808f6ce:	4682      	mov	sl, r0
 808f6d0:	681f      	ldr	r7, [r3, #0]
 808f6d2:	460e      	mov	r6, r1
 808f6d4:	4638      	mov	r0, r7
 808f6d6:	9217      	str	r2, [sp, #92]	; 0x5c
 808f6d8:	f7ff ff8c 	bl	808f5f4 <strlen>
 808f6dc:	f04f 0800 	mov.w	r8, #0
 808f6e0:	4604      	mov	r4, r0
 808f6e2:	f04f 0900 	mov.w	r9, #0
 808f6e6:	961b      	str	r6, [sp, #108]	; 0x6c
 808f6e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808f6ea:	781a      	ldrb	r2, [r3, #0]
 808f6ec:	2a2b      	cmp	r2, #43	; 0x2b
 808f6ee:	d04c      	beq.n	808f78a <_strtod_l+0xca>
 808f6f0:	d83a      	bhi.n	808f768 <_strtod_l+0xa8>
 808f6f2:	2a0d      	cmp	r2, #13
 808f6f4:	d833      	bhi.n	808f75e <_strtod_l+0x9e>
 808f6f6:	2a08      	cmp	r2, #8
 808f6f8:	d833      	bhi.n	808f762 <_strtod_l+0xa2>
 808f6fa:	2a00      	cmp	r2, #0
 808f6fc:	d03d      	beq.n	808f77a <_strtod_l+0xba>
 808f6fe:	2300      	movs	r3, #0
 808f700:	930c      	str	r3, [sp, #48]	; 0x30
 808f702:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 808f704:	782b      	ldrb	r3, [r5, #0]
 808f706:	2b30      	cmp	r3, #48	; 0x30
 808f708:	f040 80af 	bne.w	808f86a <_strtod_l+0x1aa>
 808f70c:	786b      	ldrb	r3, [r5, #1]
 808f70e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 808f712:	2b58      	cmp	r3, #88	; 0x58
 808f714:	d16c      	bne.n	808f7f0 <_strtod_l+0x130>
 808f716:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808f718:	4650      	mov	r0, sl
 808f71a:	9301      	str	r3, [sp, #4]
 808f71c:	ab1c      	add	r3, sp, #112	; 0x70
 808f71e:	9300      	str	r3, [sp, #0]
 808f720:	4a8d      	ldr	r2, [pc, #564]	; (808f958 <_strtod_l+0x298>)
 808f722:	f8cd b008 	str.w	fp, [sp, #8]
 808f726:	ab1d      	add	r3, sp, #116	; 0x74
 808f728:	a91b      	add	r1, sp, #108	; 0x6c
 808f72a:	f001 f9af 	bl	8090a8c <__gethex>
 808f72e:	f010 0607 	ands.w	r6, r0, #7
 808f732:	4604      	mov	r4, r0
 808f734:	d005      	beq.n	808f742 <_strtod_l+0x82>
 808f736:	2e06      	cmp	r6, #6
 808f738:	d129      	bne.n	808f78e <_strtod_l+0xce>
 808f73a:	2300      	movs	r3, #0
 808f73c:	3501      	adds	r5, #1
 808f73e:	951b      	str	r5, [sp, #108]	; 0x6c
 808f740:	930c      	str	r3, [sp, #48]	; 0x30
 808f742:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808f744:	2b00      	cmp	r3, #0
 808f746:	f040 8596 	bne.w	8090276 <_strtod_l+0xbb6>
 808f74a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808f74c:	b1d3      	cbz	r3, 808f784 <_strtod_l+0xc4>
 808f74e:	4642      	mov	r2, r8
 808f750:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 808f754:	4610      	mov	r0, r2
 808f756:	4619      	mov	r1, r3
 808f758:	b021      	add	sp, #132	; 0x84
 808f75a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808f75e:	2a20      	cmp	r2, #32
 808f760:	d1cd      	bne.n	808f6fe <_strtod_l+0x3e>
 808f762:	3301      	adds	r3, #1
 808f764:	931b      	str	r3, [sp, #108]	; 0x6c
 808f766:	e7bf      	b.n	808f6e8 <_strtod_l+0x28>
 808f768:	2a2d      	cmp	r2, #45	; 0x2d
 808f76a:	d1c8      	bne.n	808f6fe <_strtod_l+0x3e>
 808f76c:	2201      	movs	r2, #1
 808f76e:	920c      	str	r2, [sp, #48]	; 0x30
 808f770:	1c5a      	adds	r2, r3, #1
 808f772:	921b      	str	r2, [sp, #108]	; 0x6c
 808f774:	785b      	ldrb	r3, [r3, #1]
 808f776:	2b00      	cmp	r3, #0
 808f778:	d1c3      	bne.n	808f702 <_strtod_l+0x42>
 808f77a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808f77c:	961b      	str	r6, [sp, #108]	; 0x6c
 808f77e:	2b00      	cmp	r3, #0
 808f780:	f040 8577 	bne.w	8090272 <_strtod_l+0xbb2>
 808f784:	4642      	mov	r2, r8
 808f786:	464b      	mov	r3, r9
 808f788:	e7e4      	b.n	808f754 <_strtod_l+0x94>
 808f78a:	2200      	movs	r2, #0
 808f78c:	e7ef      	b.n	808f76e <_strtod_l+0xae>
 808f78e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 808f790:	b13a      	cbz	r2, 808f7a2 <_strtod_l+0xe2>
 808f792:	2135      	movs	r1, #53	; 0x35
 808f794:	a81e      	add	r0, sp, #120	; 0x78
 808f796:	f002 f96a 	bl	8091a6e <__copybits>
 808f79a:	4650      	mov	r0, sl
 808f79c:	991c      	ldr	r1, [sp, #112]	; 0x70
 808f79e:	f001 fda5 	bl	80912ec <_Bfree>
 808f7a2:	3e01      	subs	r6, #1
 808f7a4:	2e05      	cmp	r6, #5
 808f7a6:	d807      	bhi.n	808f7b8 <_strtod_l+0xf8>
 808f7a8:	e8df f006 	tbb	[pc, r6]
 808f7ac:	1d180b0e 	.word	0x1d180b0e
 808f7b0:	030e      	.short	0x030e
 808f7b2:	f04f 0900 	mov.w	r9, #0
 808f7b6:	46c8      	mov	r8, r9
 808f7b8:	0721      	lsls	r1, r4, #28
 808f7ba:	d5c2      	bpl.n	808f742 <_strtod_l+0x82>
 808f7bc:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 808f7c0:	e7bf      	b.n	808f742 <_strtod_l+0x82>
 808f7c2:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 808f7c6:	e7f7      	b.n	808f7b8 <_strtod_l+0xf8>
 808f7c8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 808f7ca:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 808f7ce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 808f7d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 808f7d6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 808f7da:	e7ed      	b.n	808f7b8 <_strtod_l+0xf8>
 808f7dc:	f04f 0800 	mov.w	r8, #0
 808f7e0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 808f95c <_strtod_l+0x29c>
 808f7e4:	e7e8      	b.n	808f7b8 <_strtod_l+0xf8>
 808f7e6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 808f7ea:	f04f 38ff 	mov.w	r8, #4294967295
 808f7ee:	e7e3      	b.n	808f7b8 <_strtod_l+0xf8>
 808f7f0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808f7f2:	1c5a      	adds	r2, r3, #1
 808f7f4:	921b      	str	r2, [sp, #108]	; 0x6c
 808f7f6:	785b      	ldrb	r3, [r3, #1]
 808f7f8:	2b30      	cmp	r3, #48	; 0x30
 808f7fa:	d0f9      	beq.n	808f7f0 <_strtod_l+0x130>
 808f7fc:	2b00      	cmp	r3, #0
 808f7fe:	d0a0      	beq.n	808f742 <_strtod_l+0x82>
 808f800:	2301      	movs	r3, #1
 808f802:	9307      	str	r3, [sp, #28]
 808f804:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808f806:	220a      	movs	r2, #10
 808f808:	9308      	str	r3, [sp, #32]
 808f80a:	2300      	movs	r3, #0
 808f80c:	469b      	mov	fp, r3
 808f80e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 808f812:	981b      	ldr	r0, [sp, #108]	; 0x6c
 808f814:	7805      	ldrb	r5, [r0, #0]
 808f816:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 808f81a:	b2d9      	uxtb	r1, r3
 808f81c:	2909      	cmp	r1, #9
 808f81e:	d926      	bls.n	808f86e <_strtod_l+0x1ae>
 808f820:	4622      	mov	r2, r4
 808f822:	4639      	mov	r1, r7
 808f824:	f7ff feee 	bl	808f604 <strncmp>
 808f828:	2800      	cmp	r0, #0
 808f82a:	d032      	beq.n	808f892 <_strtod_l+0x1d2>
 808f82c:	2000      	movs	r0, #0
 808f82e:	462b      	mov	r3, r5
 808f830:	465c      	mov	r4, fp
 808f832:	4602      	mov	r2, r0
 808f834:	9004      	str	r0, [sp, #16]
 808f836:	2b65      	cmp	r3, #101	; 0x65
 808f838:	d001      	beq.n	808f83e <_strtod_l+0x17e>
 808f83a:	2b45      	cmp	r3, #69	; 0x45
 808f83c:	d113      	bne.n	808f866 <_strtod_l+0x1a6>
 808f83e:	b91c      	cbnz	r4, 808f848 <_strtod_l+0x188>
 808f840:	9b07      	ldr	r3, [sp, #28]
 808f842:	4303      	orrs	r3, r0
 808f844:	d099      	beq.n	808f77a <_strtod_l+0xba>
 808f846:	2400      	movs	r4, #0
 808f848:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 808f84a:	1c73      	adds	r3, r6, #1
 808f84c:	931b      	str	r3, [sp, #108]	; 0x6c
 808f84e:	7873      	ldrb	r3, [r6, #1]
 808f850:	2b2b      	cmp	r3, #43	; 0x2b
 808f852:	d078      	beq.n	808f946 <_strtod_l+0x286>
 808f854:	2b2d      	cmp	r3, #45	; 0x2d
 808f856:	d07b      	beq.n	808f950 <_strtod_l+0x290>
 808f858:	2700      	movs	r7, #0
 808f85a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 808f85e:	2909      	cmp	r1, #9
 808f860:	f240 8082 	bls.w	808f968 <_strtod_l+0x2a8>
 808f864:	961b      	str	r6, [sp, #108]	; 0x6c
 808f866:	2500      	movs	r5, #0
 808f868:	e09e      	b.n	808f9a8 <_strtod_l+0x2e8>
 808f86a:	2300      	movs	r3, #0
 808f86c:	e7c9      	b.n	808f802 <_strtod_l+0x142>
 808f86e:	f1bb 0f08 	cmp.w	fp, #8
 808f872:	bfd5      	itete	le
 808f874:	9906      	ldrle	r1, [sp, #24]
 808f876:	9905      	ldrgt	r1, [sp, #20]
 808f878:	fb02 3301 	mlale	r3, r2, r1, r3
 808f87c:	fb02 3301 	mlagt	r3, r2, r1, r3
 808f880:	f100 0001 	add.w	r0, r0, #1
 808f884:	bfd4      	ite	le
 808f886:	9306      	strle	r3, [sp, #24]
 808f888:	9305      	strgt	r3, [sp, #20]
 808f88a:	f10b 0b01 	add.w	fp, fp, #1
 808f88e:	901b      	str	r0, [sp, #108]	; 0x6c
 808f890:	e7bf      	b.n	808f812 <_strtod_l+0x152>
 808f892:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808f894:	191a      	adds	r2, r3, r4
 808f896:	921b      	str	r2, [sp, #108]	; 0x6c
 808f898:	5d1b      	ldrb	r3, [r3, r4]
 808f89a:	f1bb 0f00 	cmp.w	fp, #0
 808f89e:	d036      	beq.n	808f90e <_strtod_l+0x24e>
 808f8a0:	465c      	mov	r4, fp
 808f8a2:	9004      	str	r0, [sp, #16]
 808f8a4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 808f8a8:	2a09      	cmp	r2, #9
 808f8aa:	d912      	bls.n	808f8d2 <_strtod_l+0x212>
 808f8ac:	2201      	movs	r2, #1
 808f8ae:	e7c2      	b.n	808f836 <_strtod_l+0x176>
 808f8b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808f8b2:	3001      	adds	r0, #1
 808f8b4:	1c5a      	adds	r2, r3, #1
 808f8b6:	921b      	str	r2, [sp, #108]	; 0x6c
 808f8b8:	785b      	ldrb	r3, [r3, #1]
 808f8ba:	2b30      	cmp	r3, #48	; 0x30
 808f8bc:	d0f8      	beq.n	808f8b0 <_strtod_l+0x1f0>
 808f8be:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 808f8c2:	2a08      	cmp	r2, #8
 808f8c4:	f200 84dc 	bhi.w	8090280 <_strtod_l+0xbc0>
 808f8c8:	9004      	str	r0, [sp, #16]
 808f8ca:	2000      	movs	r0, #0
 808f8cc:	4604      	mov	r4, r0
 808f8ce:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 808f8d0:	9208      	str	r2, [sp, #32]
 808f8d2:	3b30      	subs	r3, #48	; 0x30
 808f8d4:	f100 0201 	add.w	r2, r0, #1
 808f8d8:	d013      	beq.n	808f902 <_strtod_l+0x242>
 808f8da:	9904      	ldr	r1, [sp, #16]
 808f8dc:	1905      	adds	r5, r0, r4
 808f8de:	4411      	add	r1, r2
 808f8e0:	9104      	str	r1, [sp, #16]
 808f8e2:	4622      	mov	r2, r4
 808f8e4:	210a      	movs	r1, #10
 808f8e6:	42aa      	cmp	r2, r5
 808f8e8:	d113      	bne.n	808f912 <_strtod_l+0x252>
 808f8ea:	1822      	adds	r2, r4, r0
 808f8ec:	2a08      	cmp	r2, #8
 808f8ee:	f104 0401 	add.w	r4, r4, #1
 808f8f2:	4404      	add	r4, r0
 808f8f4:	dc1b      	bgt.n	808f92e <_strtod_l+0x26e>
 808f8f6:	220a      	movs	r2, #10
 808f8f8:	9906      	ldr	r1, [sp, #24]
 808f8fa:	fb02 3301 	mla	r3, r2, r1, r3
 808f8fe:	9306      	str	r3, [sp, #24]
 808f900:	2200      	movs	r2, #0
 808f902:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808f904:	4610      	mov	r0, r2
 808f906:	1c59      	adds	r1, r3, #1
 808f908:	911b      	str	r1, [sp, #108]	; 0x6c
 808f90a:	785b      	ldrb	r3, [r3, #1]
 808f90c:	e7ca      	b.n	808f8a4 <_strtod_l+0x1e4>
 808f90e:	4658      	mov	r0, fp
 808f910:	e7d3      	b.n	808f8ba <_strtod_l+0x1fa>
 808f912:	2a08      	cmp	r2, #8
 808f914:	dc04      	bgt.n	808f920 <_strtod_l+0x260>
 808f916:	9f06      	ldr	r7, [sp, #24]
 808f918:	434f      	muls	r7, r1
 808f91a:	9706      	str	r7, [sp, #24]
 808f91c:	3201      	adds	r2, #1
 808f91e:	e7e2      	b.n	808f8e6 <_strtod_l+0x226>
 808f920:	1c57      	adds	r7, r2, #1
 808f922:	2f10      	cmp	r7, #16
 808f924:	bfde      	ittt	le
 808f926:	9f05      	ldrle	r7, [sp, #20]
 808f928:	434f      	mulle	r7, r1
 808f92a:	9705      	strle	r7, [sp, #20]
 808f92c:	e7f6      	b.n	808f91c <_strtod_l+0x25c>
 808f92e:	2c10      	cmp	r4, #16
 808f930:	bfdf      	itttt	le
 808f932:	220a      	movle	r2, #10
 808f934:	9905      	ldrle	r1, [sp, #20]
 808f936:	fb02 3301 	mlale	r3, r2, r1, r3
 808f93a:	9305      	strle	r3, [sp, #20]
 808f93c:	e7e0      	b.n	808f900 <_strtod_l+0x240>
 808f93e:	2300      	movs	r3, #0
 808f940:	2201      	movs	r2, #1
 808f942:	9304      	str	r3, [sp, #16]
 808f944:	e77c      	b.n	808f840 <_strtod_l+0x180>
 808f946:	2700      	movs	r7, #0
 808f948:	1cb3      	adds	r3, r6, #2
 808f94a:	931b      	str	r3, [sp, #108]	; 0x6c
 808f94c:	78b3      	ldrb	r3, [r6, #2]
 808f94e:	e784      	b.n	808f85a <_strtod_l+0x19a>
 808f950:	2701      	movs	r7, #1
 808f952:	e7f9      	b.n	808f948 <_strtod_l+0x288>
 808f954:	0809496c 	.word	0x0809496c
 808f958:	080945bc 	.word	0x080945bc
 808f95c:	7ff00000 	.word	0x7ff00000
 808f960:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808f962:	1c59      	adds	r1, r3, #1
 808f964:	911b      	str	r1, [sp, #108]	; 0x6c
 808f966:	785b      	ldrb	r3, [r3, #1]
 808f968:	2b30      	cmp	r3, #48	; 0x30
 808f96a:	d0f9      	beq.n	808f960 <_strtod_l+0x2a0>
 808f96c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 808f970:	2908      	cmp	r1, #8
 808f972:	f63f af78 	bhi.w	808f866 <_strtod_l+0x1a6>
 808f976:	f04f 0e0a 	mov.w	lr, #10
 808f97a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 808f97e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808f980:	9309      	str	r3, [sp, #36]	; 0x24
 808f982:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808f984:	1c59      	adds	r1, r3, #1
 808f986:	911b      	str	r1, [sp, #108]	; 0x6c
 808f988:	785b      	ldrb	r3, [r3, #1]
 808f98a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 808f98e:	2d09      	cmp	r5, #9
 808f990:	d935      	bls.n	808f9fe <_strtod_l+0x33e>
 808f992:	9d09      	ldr	r5, [sp, #36]	; 0x24
 808f994:	1b49      	subs	r1, r1, r5
 808f996:	2908      	cmp	r1, #8
 808f998:	f644 651f 	movw	r5, #19999	; 0x4e1f
 808f99c:	dc02      	bgt.n	808f9a4 <_strtod_l+0x2e4>
 808f99e:	4565      	cmp	r5, ip
 808f9a0:	bfa8      	it	ge
 808f9a2:	4665      	movge	r5, ip
 808f9a4:	b107      	cbz	r7, 808f9a8 <_strtod_l+0x2e8>
 808f9a6:	426d      	negs	r5, r5
 808f9a8:	2c00      	cmp	r4, #0
 808f9aa:	d14c      	bne.n	808fa46 <_strtod_l+0x386>
 808f9ac:	9907      	ldr	r1, [sp, #28]
 808f9ae:	4301      	orrs	r1, r0
 808f9b0:	f47f aec7 	bne.w	808f742 <_strtod_l+0x82>
 808f9b4:	2a00      	cmp	r2, #0
 808f9b6:	f47f aee0 	bne.w	808f77a <_strtod_l+0xba>
 808f9ba:	2b69      	cmp	r3, #105	; 0x69
 808f9bc:	d026      	beq.n	808fa0c <_strtod_l+0x34c>
 808f9be:	dc23      	bgt.n	808fa08 <_strtod_l+0x348>
 808f9c0:	2b49      	cmp	r3, #73	; 0x49
 808f9c2:	d023      	beq.n	808fa0c <_strtod_l+0x34c>
 808f9c4:	2b4e      	cmp	r3, #78	; 0x4e
 808f9c6:	f47f aed8 	bne.w	808f77a <_strtod_l+0xba>
 808f9ca:	499c      	ldr	r1, [pc, #624]	; (808fc3c <_strtod_l+0x57c>)
 808f9cc:	a81b      	add	r0, sp, #108	; 0x6c
 808f9ce:	f001 fa99 	bl	8090f04 <__match>
 808f9d2:	2800      	cmp	r0, #0
 808f9d4:	f43f aed1 	beq.w	808f77a <_strtod_l+0xba>
 808f9d8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808f9da:	781b      	ldrb	r3, [r3, #0]
 808f9dc:	2b28      	cmp	r3, #40	; 0x28
 808f9de:	d12c      	bne.n	808fa3a <_strtod_l+0x37a>
 808f9e0:	4997      	ldr	r1, [pc, #604]	; (808fc40 <_strtod_l+0x580>)
 808f9e2:	aa1e      	add	r2, sp, #120	; 0x78
 808f9e4:	a81b      	add	r0, sp, #108	; 0x6c
 808f9e6:	f001 faa1 	bl	8090f2c <__hexnan>
 808f9ea:	2805      	cmp	r0, #5
 808f9ec:	d125      	bne.n	808fa3a <_strtod_l+0x37a>
 808f9ee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 808f9f0:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 808f9f4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 808f9f8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 808f9fc:	e6a1      	b.n	808f742 <_strtod_l+0x82>
 808f9fe:	fb0e 3c0c 	mla	ip, lr, ip, r3
 808fa02:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 808fa06:	e7bc      	b.n	808f982 <_strtod_l+0x2c2>
 808fa08:	2b6e      	cmp	r3, #110	; 0x6e
 808fa0a:	e7dc      	b.n	808f9c6 <_strtod_l+0x306>
 808fa0c:	498d      	ldr	r1, [pc, #564]	; (808fc44 <_strtod_l+0x584>)
 808fa0e:	a81b      	add	r0, sp, #108	; 0x6c
 808fa10:	f001 fa78 	bl	8090f04 <__match>
 808fa14:	2800      	cmp	r0, #0
 808fa16:	f43f aeb0 	beq.w	808f77a <_strtod_l+0xba>
 808fa1a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808fa1c:	498a      	ldr	r1, [pc, #552]	; (808fc48 <_strtod_l+0x588>)
 808fa1e:	3b01      	subs	r3, #1
 808fa20:	a81b      	add	r0, sp, #108	; 0x6c
 808fa22:	931b      	str	r3, [sp, #108]	; 0x6c
 808fa24:	f001 fa6e 	bl	8090f04 <__match>
 808fa28:	b910      	cbnz	r0, 808fa30 <_strtod_l+0x370>
 808fa2a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808fa2c:	3301      	adds	r3, #1
 808fa2e:	931b      	str	r3, [sp, #108]	; 0x6c
 808fa30:	f04f 0800 	mov.w	r8, #0
 808fa34:	f8df 9220 	ldr.w	r9, [pc, #544]	; 808fc58 <_strtod_l+0x598>
 808fa38:	e683      	b.n	808f742 <_strtod_l+0x82>
 808fa3a:	4884      	ldr	r0, [pc, #528]	; (808fc4c <_strtod_l+0x58c>)
 808fa3c:	f7fd fc9c 	bl	808d378 <nan>
 808fa40:	4680      	mov	r8, r0
 808fa42:	4689      	mov	r9, r1
 808fa44:	e67d      	b.n	808f742 <_strtod_l+0x82>
 808fa46:	9b04      	ldr	r3, [sp, #16]
 808fa48:	f1bb 0f00 	cmp.w	fp, #0
 808fa4c:	bf08      	it	eq
 808fa4e:	46a3      	moveq	fp, r4
 808fa50:	1aeb      	subs	r3, r5, r3
 808fa52:	2c10      	cmp	r4, #16
 808fa54:	9806      	ldr	r0, [sp, #24]
 808fa56:	4626      	mov	r6, r4
 808fa58:	9307      	str	r3, [sp, #28]
 808fa5a:	bfa8      	it	ge
 808fa5c:	2610      	movge	r6, #16
 808fa5e:	f7fd fdd3 	bl	808d608 <__aeabi_ui2d>
 808fa62:	2c09      	cmp	r4, #9
 808fa64:	4680      	mov	r8, r0
 808fa66:	4689      	mov	r9, r1
 808fa68:	dd13      	ble.n	808fa92 <_strtod_l+0x3d2>
 808fa6a:	4b79      	ldr	r3, [pc, #484]	; (808fc50 <_strtod_l+0x590>)
 808fa6c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 808fa70:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 808fa74:	f7fd fe42 	bl	808d6fc <__aeabi_dmul>
 808fa78:	4680      	mov	r8, r0
 808fa7a:	9805      	ldr	r0, [sp, #20]
 808fa7c:	4689      	mov	r9, r1
 808fa7e:	f7fd fdc3 	bl	808d608 <__aeabi_ui2d>
 808fa82:	4602      	mov	r2, r0
 808fa84:	460b      	mov	r3, r1
 808fa86:	4640      	mov	r0, r8
 808fa88:	4649      	mov	r1, r9
 808fa8a:	f7fd fc81 	bl	808d390 <__adddf3>
 808fa8e:	4680      	mov	r8, r0
 808fa90:	4689      	mov	r9, r1
 808fa92:	2c0f      	cmp	r4, #15
 808fa94:	dc36      	bgt.n	808fb04 <_strtod_l+0x444>
 808fa96:	9b07      	ldr	r3, [sp, #28]
 808fa98:	2b00      	cmp	r3, #0
 808fa9a:	f43f ae52 	beq.w	808f742 <_strtod_l+0x82>
 808fa9e:	dd22      	ble.n	808fae6 <_strtod_l+0x426>
 808faa0:	2b16      	cmp	r3, #22
 808faa2:	dc09      	bgt.n	808fab8 <_strtod_l+0x3f8>
 808faa4:	4c6a      	ldr	r4, [pc, #424]	; (808fc50 <_strtod_l+0x590>)
 808faa6:	4642      	mov	r2, r8
 808faa8:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 808faac:	464b      	mov	r3, r9
 808faae:	e9d4 0100 	ldrd	r0, r1, [r4]
 808fab2:	f7fd fe23 	bl	808d6fc <__aeabi_dmul>
 808fab6:	e7c3      	b.n	808fa40 <_strtod_l+0x380>
 808fab8:	9a07      	ldr	r2, [sp, #28]
 808faba:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 808fabe:	4293      	cmp	r3, r2
 808fac0:	db20      	blt.n	808fb04 <_strtod_l+0x444>
 808fac2:	4d63      	ldr	r5, [pc, #396]	; (808fc50 <_strtod_l+0x590>)
 808fac4:	f1c4 040f 	rsb	r4, r4, #15
 808fac8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 808facc:	4642      	mov	r2, r8
 808face:	e9d1 0100 	ldrd	r0, r1, [r1]
 808fad2:	464b      	mov	r3, r9
 808fad4:	f7fd fe12 	bl	808d6fc <__aeabi_dmul>
 808fad8:	9b07      	ldr	r3, [sp, #28]
 808fada:	1b1c      	subs	r4, r3, r4
 808fadc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 808fae0:	e9d5 2300 	ldrd	r2, r3, [r5]
 808fae4:	e7e5      	b.n	808fab2 <_strtod_l+0x3f2>
 808fae6:	9b07      	ldr	r3, [sp, #28]
 808fae8:	3316      	adds	r3, #22
 808faea:	db0b      	blt.n	808fb04 <_strtod_l+0x444>
 808faec:	9b04      	ldr	r3, [sp, #16]
 808faee:	4a58      	ldr	r2, [pc, #352]	; (808fc50 <_strtod_l+0x590>)
 808faf0:	1b5d      	subs	r5, r3, r5
 808faf2:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 808faf6:	4640      	mov	r0, r8
 808faf8:	e9d5 2300 	ldrd	r2, r3, [r5]
 808fafc:	4649      	mov	r1, r9
 808fafe:	f7fd ff27 	bl	808d950 <__aeabi_ddiv>
 808fb02:	e79d      	b.n	808fa40 <_strtod_l+0x380>
 808fb04:	9b07      	ldr	r3, [sp, #28]
 808fb06:	1ba6      	subs	r6, r4, r6
 808fb08:	441e      	add	r6, r3
 808fb0a:	2e00      	cmp	r6, #0
 808fb0c:	dd71      	ble.n	808fbf2 <_strtod_l+0x532>
 808fb0e:	f016 030f 	ands.w	r3, r6, #15
 808fb12:	d00a      	beq.n	808fb2a <_strtod_l+0x46a>
 808fb14:	494e      	ldr	r1, [pc, #312]	; (808fc50 <_strtod_l+0x590>)
 808fb16:	4642      	mov	r2, r8
 808fb18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 808fb1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 808fb20:	464b      	mov	r3, r9
 808fb22:	f7fd fdeb 	bl	808d6fc <__aeabi_dmul>
 808fb26:	4680      	mov	r8, r0
 808fb28:	4689      	mov	r9, r1
 808fb2a:	f036 060f 	bics.w	r6, r6, #15
 808fb2e:	d050      	beq.n	808fbd2 <_strtod_l+0x512>
 808fb30:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 808fb34:	dd27      	ble.n	808fb86 <_strtod_l+0x4c6>
 808fb36:	f04f 0b00 	mov.w	fp, #0
 808fb3a:	f8cd b010 	str.w	fp, [sp, #16]
 808fb3e:	f8cd b020 	str.w	fp, [sp, #32]
 808fb42:	f8cd b018 	str.w	fp, [sp, #24]
 808fb46:	2322      	movs	r3, #34	; 0x22
 808fb48:	f04f 0800 	mov.w	r8, #0
 808fb4c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 808fc58 <_strtod_l+0x598>
 808fb50:	f8ca 3000 	str.w	r3, [sl]
 808fb54:	9b08      	ldr	r3, [sp, #32]
 808fb56:	2b00      	cmp	r3, #0
 808fb58:	f43f adf3 	beq.w	808f742 <_strtod_l+0x82>
 808fb5c:	4650      	mov	r0, sl
 808fb5e:	991c      	ldr	r1, [sp, #112]	; 0x70
 808fb60:	f001 fbc4 	bl	80912ec <_Bfree>
 808fb64:	4650      	mov	r0, sl
 808fb66:	9906      	ldr	r1, [sp, #24]
 808fb68:	f001 fbc0 	bl	80912ec <_Bfree>
 808fb6c:	4650      	mov	r0, sl
 808fb6e:	9904      	ldr	r1, [sp, #16]
 808fb70:	f001 fbbc 	bl	80912ec <_Bfree>
 808fb74:	4650      	mov	r0, sl
 808fb76:	9908      	ldr	r1, [sp, #32]
 808fb78:	f001 fbb8 	bl	80912ec <_Bfree>
 808fb7c:	4659      	mov	r1, fp
 808fb7e:	4650      	mov	r0, sl
 808fb80:	f001 fbb4 	bl	80912ec <_Bfree>
 808fb84:	e5dd      	b.n	808f742 <_strtod_l+0x82>
 808fb86:	2300      	movs	r3, #0
 808fb88:	4640      	mov	r0, r8
 808fb8a:	4649      	mov	r1, r9
 808fb8c:	461f      	mov	r7, r3
 808fb8e:	1136      	asrs	r6, r6, #4
 808fb90:	2e01      	cmp	r6, #1
 808fb92:	dc21      	bgt.n	808fbd8 <_strtod_l+0x518>
 808fb94:	b10b      	cbz	r3, 808fb9a <_strtod_l+0x4da>
 808fb96:	4680      	mov	r8, r0
 808fb98:	4689      	mov	r9, r1
 808fb9a:	4b2e      	ldr	r3, [pc, #184]	; (808fc54 <_strtod_l+0x594>)
 808fb9c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 808fba0:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 808fba4:	4642      	mov	r2, r8
 808fba6:	e9d7 0100 	ldrd	r0, r1, [r7]
 808fbaa:	464b      	mov	r3, r9
 808fbac:	f7fd fda6 	bl	808d6fc <__aeabi_dmul>
 808fbb0:	4b29      	ldr	r3, [pc, #164]	; (808fc58 <_strtod_l+0x598>)
 808fbb2:	460a      	mov	r2, r1
 808fbb4:	400b      	ands	r3, r1
 808fbb6:	4929      	ldr	r1, [pc, #164]	; (808fc5c <_strtod_l+0x59c>)
 808fbb8:	4680      	mov	r8, r0
 808fbba:	428b      	cmp	r3, r1
 808fbbc:	d8bb      	bhi.n	808fb36 <_strtod_l+0x476>
 808fbbe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 808fbc2:	428b      	cmp	r3, r1
 808fbc4:	bf86      	itte	hi
 808fbc6:	f04f 38ff 	movhi.w	r8, #4294967295
 808fbca:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 808fc60 <_strtod_l+0x5a0>
 808fbce:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 808fbd2:	2300      	movs	r3, #0
 808fbd4:	9305      	str	r3, [sp, #20]
 808fbd6:	e07e      	b.n	808fcd6 <_strtod_l+0x616>
 808fbd8:	07f2      	lsls	r2, r6, #31
 808fbda:	d507      	bpl.n	808fbec <_strtod_l+0x52c>
 808fbdc:	4b1d      	ldr	r3, [pc, #116]	; (808fc54 <_strtod_l+0x594>)
 808fbde:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 808fbe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 808fbe6:	f7fd fd89 	bl	808d6fc <__aeabi_dmul>
 808fbea:	2301      	movs	r3, #1
 808fbec:	3701      	adds	r7, #1
 808fbee:	1076      	asrs	r6, r6, #1
 808fbf0:	e7ce      	b.n	808fb90 <_strtod_l+0x4d0>
 808fbf2:	d0ee      	beq.n	808fbd2 <_strtod_l+0x512>
 808fbf4:	4276      	negs	r6, r6
 808fbf6:	f016 020f 	ands.w	r2, r6, #15
 808fbfa:	d00a      	beq.n	808fc12 <_strtod_l+0x552>
 808fbfc:	4b14      	ldr	r3, [pc, #80]	; (808fc50 <_strtod_l+0x590>)
 808fbfe:	4640      	mov	r0, r8
 808fc00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 808fc04:	4649      	mov	r1, r9
 808fc06:	e9d3 2300 	ldrd	r2, r3, [r3]
 808fc0a:	f7fd fea1 	bl	808d950 <__aeabi_ddiv>
 808fc0e:	4680      	mov	r8, r0
 808fc10:	4689      	mov	r9, r1
 808fc12:	1136      	asrs	r6, r6, #4
 808fc14:	d0dd      	beq.n	808fbd2 <_strtod_l+0x512>
 808fc16:	2e1f      	cmp	r6, #31
 808fc18:	dd24      	ble.n	808fc64 <_strtod_l+0x5a4>
 808fc1a:	f04f 0b00 	mov.w	fp, #0
 808fc1e:	f8cd b010 	str.w	fp, [sp, #16]
 808fc22:	f8cd b020 	str.w	fp, [sp, #32]
 808fc26:	f8cd b018 	str.w	fp, [sp, #24]
 808fc2a:	2322      	movs	r3, #34	; 0x22
 808fc2c:	f04f 0800 	mov.w	r8, #0
 808fc30:	f04f 0900 	mov.w	r9, #0
 808fc34:	f8ca 3000 	str.w	r3, [sl]
 808fc38:	e78c      	b.n	808fb54 <_strtod_l+0x494>
 808fc3a:	bf00      	nop
 808fc3c:	08094611 	.word	0x08094611
 808fc40:	080945d0 	.word	0x080945d0
 808fc44:	0809432d 	.word	0x0809432d
 808fc48:	080945b5 	.word	0x080945b5
 808fc4c:	080942e2 	.word	0x080942e2
 808fc50:	080949a8 	.word	0x080949a8
 808fc54:	08094980 	.word	0x08094980
 808fc58:	7ff00000 	.word	0x7ff00000
 808fc5c:	7ca00000 	.word	0x7ca00000
 808fc60:	7fefffff 	.word	0x7fefffff
 808fc64:	f016 0310 	ands.w	r3, r6, #16
 808fc68:	bf18      	it	ne
 808fc6a:	236a      	movne	r3, #106	; 0x6a
 808fc6c:	4640      	mov	r0, r8
 808fc6e:	9305      	str	r3, [sp, #20]
 808fc70:	4649      	mov	r1, r9
 808fc72:	2300      	movs	r3, #0
 808fc74:	4fb2      	ldr	r7, [pc, #712]	; (808ff40 <_strtod_l+0x880>)
 808fc76:	07f2      	lsls	r2, r6, #31
 808fc78:	d504      	bpl.n	808fc84 <_strtod_l+0x5c4>
 808fc7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 808fc7e:	f7fd fd3d 	bl	808d6fc <__aeabi_dmul>
 808fc82:	2301      	movs	r3, #1
 808fc84:	1076      	asrs	r6, r6, #1
 808fc86:	f107 0708 	add.w	r7, r7, #8
 808fc8a:	d1f4      	bne.n	808fc76 <_strtod_l+0x5b6>
 808fc8c:	b10b      	cbz	r3, 808fc92 <_strtod_l+0x5d2>
 808fc8e:	4680      	mov	r8, r0
 808fc90:	4689      	mov	r9, r1
 808fc92:	9b05      	ldr	r3, [sp, #20]
 808fc94:	b1bb      	cbz	r3, 808fcc6 <_strtod_l+0x606>
 808fc96:	f3c9 530a 	ubfx	r3, r9, #20, #11
 808fc9a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808fc9e:	2b00      	cmp	r3, #0
 808fca0:	4649      	mov	r1, r9
 808fca2:	dd10      	ble.n	808fcc6 <_strtod_l+0x606>
 808fca4:	2b1f      	cmp	r3, #31
 808fca6:	f340 812b 	ble.w	808ff00 <_strtod_l+0x840>
 808fcaa:	2b34      	cmp	r3, #52	; 0x34
 808fcac:	bfd8      	it	le
 808fcae:	f04f 32ff 	movle.w	r2, #4294967295
 808fcb2:	f04f 0800 	mov.w	r8, #0
 808fcb6:	bfcf      	iteee	gt
 808fcb8:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 808fcbc:	3b20      	suble	r3, #32
 808fcbe:	fa02 f303 	lslle.w	r3, r2, r3
 808fcc2:	ea03 0901 	andle.w	r9, r3, r1
 808fcc6:	2200      	movs	r2, #0
 808fcc8:	2300      	movs	r3, #0
 808fcca:	4640      	mov	r0, r8
 808fccc:	4649      	mov	r1, r9
 808fcce:	f7fd ff7d 	bl	808dbcc <__aeabi_dcmpeq>
 808fcd2:	2800      	cmp	r0, #0
 808fcd4:	d1a1      	bne.n	808fc1a <_strtod_l+0x55a>
 808fcd6:	9b06      	ldr	r3, [sp, #24]
 808fcd8:	465a      	mov	r2, fp
 808fcda:	9300      	str	r3, [sp, #0]
 808fcdc:	4650      	mov	r0, sl
 808fcde:	4623      	mov	r3, r4
 808fce0:	9908      	ldr	r1, [sp, #32]
 808fce2:	f001 fb58 	bl	8091396 <__s2b>
 808fce6:	9008      	str	r0, [sp, #32]
 808fce8:	2800      	cmp	r0, #0
 808fcea:	f43f af24 	beq.w	808fb36 <_strtod_l+0x476>
 808fcee:	9b04      	ldr	r3, [sp, #16]
 808fcf0:	f04f 0b00 	mov.w	fp, #0
 808fcf4:	1b5d      	subs	r5, r3, r5
 808fcf6:	9b07      	ldr	r3, [sp, #28]
 808fcf8:	f8cd b010 	str.w	fp, [sp, #16]
 808fcfc:	2b00      	cmp	r3, #0
 808fcfe:	bfb4      	ite	lt
 808fd00:	462b      	movlt	r3, r5
 808fd02:	2300      	movge	r3, #0
 808fd04:	930e      	str	r3, [sp, #56]	; 0x38
 808fd06:	9b07      	ldr	r3, [sp, #28]
 808fd08:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 808fd0c:	9316      	str	r3, [sp, #88]	; 0x58
 808fd0e:	9b08      	ldr	r3, [sp, #32]
 808fd10:	4650      	mov	r0, sl
 808fd12:	6859      	ldr	r1, [r3, #4]
 808fd14:	f001 fab6 	bl	8091284 <_Balloc>
 808fd18:	9006      	str	r0, [sp, #24]
 808fd1a:	2800      	cmp	r0, #0
 808fd1c:	f43f af13 	beq.w	808fb46 <_strtod_l+0x486>
 808fd20:	9b08      	ldr	r3, [sp, #32]
 808fd22:	300c      	adds	r0, #12
 808fd24:	691a      	ldr	r2, [r3, #16]
 808fd26:	f103 010c 	add.w	r1, r3, #12
 808fd2a:	3202      	adds	r2, #2
 808fd2c:	0092      	lsls	r2, r2, #2
 808fd2e:	f7fe fe89 	bl	808ea44 <memcpy>
 808fd32:	ab1e      	add	r3, sp, #120	; 0x78
 808fd34:	9301      	str	r3, [sp, #4]
 808fd36:	ab1d      	add	r3, sp, #116	; 0x74
 808fd38:	9300      	str	r3, [sp, #0]
 808fd3a:	4642      	mov	r2, r8
 808fd3c:	464b      	mov	r3, r9
 808fd3e:	4650      	mov	r0, sl
 808fd40:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 808fd44:	f001 fe16 	bl	8091974 <__d2b>
 808fd48:	901c      	str	r0, [sp, #112]	; 0x70
 808fd4a:	2800      	cmp	r0, #0
 808fd4c:	f43f aefb 	beq.w	808fb46 <_strtod_l+0x486>
 808fd50:	2101      	movs	r1, #1
 808fd52:	4650      	mov	r0, sl
 808fd54:	f001 fbab 	bl	80914ae <__i2b>
 808fd58:	4603      	mov	r3, r0
 808fd5a:	9004      	str	r0, [sp, #16]
 808fd5c:	2800      	cmp	r0, #0
 808fd5e:	f43f aef2 	beq.w	808fb46 <_strtod_l+0x486>
 808fd62:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 808fd64:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 808fd66:	2d00      	cmp	r5, #0
 808fd68:	bfab      	itete	ge
 808fd6a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 808fd6c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 808fd6e:	18ee      	addge	r6, r5, r3
 808fd70:	1b5c      	sublt	r4, r3, r5
 808fd72:	9b05      	ldr	r3, [sp, #20]
 808fd74:	bfa8      	it	ge
 808fd76:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 808fd78:	eba5 0503 	sub.w	r5, r5, r3
 808fd7c:	4415      	add	r5, r2
 808fd7e:	4b71      	ldr	r3, [pc, #452]	; (808ff44 <_strtod_l+0x884>)
 808fd80:	f105 35ff 	add.w	r5, r5, #4294967295
 808fd84:	bfb8      	it	lt
 808fd86:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 808fd88:	429d      	cmp	r5, r3
 808fd8a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 808fd8e:	f280 80c9 	bge.w	808ff24 <_strtod_l+0x864>
 808fd92:	1b5b      	subs	r3, r3, r5
 808fd94:	2b1f      	cmp	r3, #31
 808fd96:	f04f 0701 	mov.w	r7, #1
 808fd9a:	eba2 0203 	sub.w	r2, r2, r3
 808fd9e:	f300 80b6 	bgt.w	808ff0e <_strtod_l+0x84e>
 808fda2:	2500      	movs	r5, #0
 808fda4:	fa07 f303 	lsl.w	r3, r7, r3
 808fda8:	930f      	str	r3, [sp, #60]	; 0x3c
 808fdaa:	18b7      	adds	r7, r6, r2
 808fdac:	9b05      	ldr	r3, [sp, #20]
 808fdae:	42be      	cmp	r6, r7
 808fdb0:	4414      	add	r4, r2
 808fdb2:	441c      	add	r4, r3
 808fdb4:	4633      	mov	r3, r6
 808fdb6:	bfa8      	it	ge
 808fdb8:	463b      	movge	r3, r7
 808fdba:	42a3      	cmp	r3, r4
 808fdbc:	bfa8      	it	ge
 808fdbe:	4623      	movge	r3, r4
 808fdc0:	2b00      	cmp	r3, #0
 808fdc2:	bfc2      	ittt	gt
 808fdc4:	1aff      	subgt	r7, r7, r3
 808fdc6:	1ae4      	subgt	r4, r4, r3
 808fdc8:	1af6      	subgt	r6, r6, r3
 808fdca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 808fdcc:	2b00      	cmp	r3, #0
 808fdce:	dd17      	ble.n	808fe00 <_strtod_l+0x740>
 808fdd0:	461a      	mov	r2, r3
 808fdd2:	4650      	mov	r0, sl
 808fdd4:	9904      	ldr	r1, [sp, #16]
 808fdd6:	f001 fc0f 	bl	80915f8 <__pow5mult>
 808fdda:	9004      	str	r0, [sp, #16]
 808fddc:	2800      	cmp	r0, #0
 808fdde:	f43f aeb2 	beq.w	808fb46 <_strtod_l+0x486>
 808fde2:	4601      	mov	r1, r0
 808fde4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 808fde6:	4650      	mov	r0, sl
 808fde8:	f001 fb6a 	bl	80914c0 <__multiply>
 808fdec:	9009      	str	r0, [sp, #36]	; 0x24
 808fdee:	2800      	cmp	r0, #0
 808fdf0:	f43f aea9 	beq.w	808fb46 <_strtod_l+0x486>
 808fdf4:	4650      	mov	r0, sl
 808fdf6:	991c      	ldr	r1, [sp, #112]	; 0x70
 808fdf8:	f001 fa78 	bl	80912ec <_Bfree>
 808fdfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808fdfe:	931c      	str	r3, [sp, #112]	; 0x70
 808fe00:	2f00      	cmp	r7, #0
 808fe02:	f300 8093 	bgt.w	808ff2c <_strtod_l+0x86c>
 808fe06:	9b07      	ldr	r3, [sp, #28]
 808fe08:	2b00      	cmp	r3, #0
 808fe0a:	dd08      	ble.n	808fe1e <_strtod_l+0x75e>
 808fe0c:	4650      	mov	r0, sl
 808fe0e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 808fe10:	9906      	ldr	r1, [sp, #24]
 808fe12:	f001 fbf1 	bl	80915f8 <__pow5mult>
 808fe16:	9006      	str	r0, [sp, #24]
 808fe18:	2800      	cmp	r0, #0
 808fe1a:	f43f ae94 	beq.w	808fb46 <_strtod_l+0x486>
 808fe1e:	2c00      	cmp	r4, #0
 808fe20:	dd08      	ble.n	808fe34 <_strtod_l+0x774>
 808fe22:	4622      	mov	r2, r4
 808fe24:	4650      	mov	r0, sl
 808fe26:	9906      	ldr	r1, [sp, #24]
 808fe28:	f001 fc34 	bl	8091694 <__lshift>
 808fe2c:	9006      	str	r0, [sp, #24]
 808fe2e:	2800      	cmp	r0, #0
 808fe30:	f43f ae89 	beq.w	808fb46 <_strtod_l+0x486>
 808fe34:	2e00      	cmp	r6, #0
 808fe36:	dd08      	ble.n	808fe4a <_strtod_l+0x78a>
 808fe38:	4632      	mov	r2, r6
 808fe3a:	4650      	mov	r0, sl
 808fe3c:	9904      	ldr	r1, [sp, #16]
 808fe3e:	f001 fc29 	bl	8091694 <__lshift>
 808fe42:	9004      	str	r0, [sp, #16]
 808fe44:	2800      	cmp	r0, #0
 808fe46:	f43f ae7e 	beq.w	808fb46 <_strtod_l+0x486>
 808fe4a:	4650      	mov	r0, sl
 808fe4c:	9a06      	ldr	r2, [sp, #24]
 808fe4e:	991c      	ldr	r1, [sp, #112]	; 0x70
 808fe50:	f001 fc9a 	bl	8091788 <__mdiff>
 808fe54:	4683      	mov	fp, r0
 808fe56:	2800      	cmp	r0, #0
 808fe58:	f43f ae75 	beq.w	808fb46 <_strtod_l+0x486>
 808fe5c:	2400      	movs	r4, #0
 808fe5e:	68c3      	ldr	r3, [r0, #12]
 808fe60:	9904      	ldr	r1, [sp, #16]
 808fe62:	60c4      	str	r4, [r0, #12]
 808fe64:	930d      	str	r3, [sp, #52]	; 0x34
 808fe66:	f001 fc74 	bl	8091752 <__mcmp>
 808fe6a:	42a0      	cmp	r0, r4
 808fe6c:	da70      	bge.n	808ff50 <_strtod_l+0x890>
 808fe6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808fe70:	ea53 0308 	orrs.w	r3, r3, r8
 808fe74:	f040 8096 	bne.w	808ffa4 <_strtod_l+0x8e4>
 808fe78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808fe7c:	2b00      	cmp	r3, #0
 808fe7e:	f040 8091 	bne.w	808ffa4 <_strtod_l+0x8e4>
 808fe82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808fe86:	0d1b      	lsrs	r3, r3, #20
 808fe88:	051b      	lsls	r3, r3, #20
 808fe8a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 808fe8e:	f240 8089 	bls.w	808ffa4 <_strtod_l+0x8e4>
 808fe92:	f8db 3014 	ldr.w	r3, [fp, #20]
 808fe96:	b923      	cbnz	r3, 808fea2 <_strtod_l+0x7e2>
 808fe98:	f8db 3010 	ldr.w	r3, [fp, #16]
 808fe9c:	2b01      	cmp	r3, #1
 808fe9e:	f340 8081 	ble.w	808ffa4 <_strtod_l+0x8e4>
 808fea2:	4659      	mov	r1, fp
 808fea4:	2201      	movs	r2, #1
 808fea6:	4650      	mov	r0, sl
 808fea8:	f001 fbf4 	bl	8091694 <__lshift>
 808feac:	9904      	ldr	r1, [sp, #16]
 808feae:	4683      	mov	fp, r0
 808feb0:	f001 fc4f 	bl	8091752 <__mcmp>
 808feb4:	2800      	cmp	r0, #0
 808feb6:	dd75      	ble.n	808ffa4 <_strtod_l+0x8e4>
 808feb8:	9905      	ldr	r1, [sp, #20]
 808feba:	464b      	mov	r3, r9
 808febc:	4a22      	ldr	r2, [pc, #136]	; (808ff48 <_strtod_l+0x888>)
 808febe:	2900      	cmp	r1, #0
 808fec0:	f000 8091 	beq.w	808ffe6 <_strtod_l+0x926>
 808fec4:	ea02 0109 	and.w	r1, r2, r9
 808fec8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 808fecc:	f300 808b 	bgt.w	808ffe6 <_strtod_l+0x926>
 808fed0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 808fed4:	f77f aea9 	ble.w	808fc2a <_strtod_l+0x56a>
 808fed8:	2300      	movs	r3, #0
 808feda:	4a1c      	ldr	r2, [pc, #112]	; (808ff4c <_strtod_l+0x88c>)
 808fedc:	4640      	mov	r0, r8
 808fede:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 808fee2:	4649      	mov	r1, r9
 808fee4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 808fee8:	f7fd fc08 	bl	808d6fc <__aeabi_dmul>
 808feec:	460b      	mov	r3, r1
 808feee:	4303      	orrs	r3, r0
 808fef0:	bf08      	it	eq
 808fef2:	2322      	moveq	r3, #34	; 0x22
 808fef4:	4680      	mov	r8, r0
 808fef6:	4689      	mov	r9, r1
 808fef8:	bf08      	it	eq
 808fefa:	f8ca 3000 	streq.w	r3, [sl]
 808fefe:	e62d      	b.n	808fb5c <_strtod_l+0x49c>
 808ff00:	f04f 32ff 	mov.w	r2, #4294967295
 808ff04:	fa02 f303 	lsl.w	r3, r2, r3
 808ff08:	ea03 0808 	and.w	r8, r3, r8
 808ff0c:	e6db      	b.n	808fcc6 <_strtod_l+0x606>
 808ff0e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 808ff12:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 808ff16:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 808ff1a:	35e2      	adds	r5, #226	; 0xe2
 808ff1c:	fa07 f505 	lsl.w	r5, r7, r5
 808ff20:	970f      	str	r7, [sp, #60]	; 0x3c
 808ff22:	e742      	b.n	808fdaa <_strtod_l+0x6ea>
 808ff24:	2301      	movs	r3, #1
 808ff26:	2500      	movs	r5, #0
 808ff28:	930f      	str	r3, [sp, #60]	; 0x3c
 808ff2a:	e73e      	b.n	808fdaa <_strtod_l+0x6ea>
 808ff2c:	463a      	mov	r2, r7
 808ff2e:	4650      	mov	r0, sl
 808ff30:	991c      	ldr	r1, [sp, #112]	; 0x70
 808ff32:	f001 fbaf 	bl	8091694 <__lshift>
 808ff36:	901c      	str	r0, [sp, #112]	; 0x70
 808ff38:	2800      	cmp	r0, #0
 808ff3a:	f47f af64 	bne.w	808fe06 <_strtod_l+0x746>
 808ff3e:	e602      	b.n	808fb46 <_strtod_l+0x486>
 808ff40:	080945e8 	.word	0x080945e8
 808ff44:	fffffc02 	.word	0xfffffc02
 808ff48:	7ff00000 	.word	0x7ff00000
 808ff4c:	39500000 	.word	0x39500000
 808ff50:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 808ff54:	d166      	bne.n	8090024 <_strtod_l+0x964>
 808ff56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 808ff58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808ff5c:	b35a      	cbz	r2, 808ffb6 <_strtod_l+0x8f6>
 808ff5e:	4a9c      	ldr	r2, [pc, #624]	; (80901d0 <_strtod_l+0xb10>)
 808ff60:	4293      	cmp	r3, r2
 808ff62:	d12c      	bne.n	808ffbe <_strtod_l+0x8fe>
 808ff64:	9b05      	ldr	r3, [sp, #20]
 808ff66:	4640      	mov	r0, r8
 808ff68:	b303      	cbz	r3, 808ffac <_strtod_l+0x8ec>
 808ff6a:	464b      	mov	r3, r9
 808ff6c:	4a99      	ldr	r2, [pc, #612]	; (80901d4 <_strtod_l+0xb14>)
 808ff6e:	f04f 31ff 	mov.w	r1, #4294967295
 808ff72:	401a      	ands	r2, r3
 808ff74:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 808ff78:	d81b      	bhi.n	808ffb2 <_strtod_l+0x8f2>
 808ff7a:	0d12      	lsrs	r2, r2, #20
 808ff7c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 808ff80:	fa01 f303 	lsl.w	r3, r1, r3
 808ff84:	4298      	cmp	r0, r3
 808ff86:	d11a      	bne.n	808ffbe <_strtod_l+0x8fe>
 808ff88:	4b93      	ldr	r3, [pc, #588]	; (80901d8 <_strtod_l+0xb18>)
 808ff8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 808ff8c:	429a      	cmp	r2, r3
 808ff8e:	d102      	bne.n	808ff96 <_strtod_l+0x8d6>
 808ff90:	3001      	adds	r0, #1
 808ff92:	f43f add8 	beq.w	808fb46 <_strtod_l+0x486>
 808ff96:	f04f 0800 	mov.w	r8, #0
 808ff9a:	4b8e      	ldr	r3, [pc, #568]	; (80901d4 <_strtod_l+0xb14>)
 808ff9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 808ff9e:	401a      	ands	r2, r3
 808ffa0:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 808ffa4:	9b05      	ldr	r3, [sp, #20]
 808ffa6:	2b00      	cmp	r3, #0
 808ffa8:	d196      	bne.n	808fed8 <_strtod_l+0x818>
 808ffaa:	e5d7      	b.n	808fb5c <_strtod_l+0x49c>
 808ffac:	f04f 33ff 	mov.w	r3, #4294967295
 808ffb0:	e7e8      	b.n	808ff84 <_strtod_l+0x8c4>
 808ffb2:	460b      	mov	r3, r1
 808ffb4:	e7e6      	b.n	808ff84 <_strtod_l+0x8c4>
 808ffb6:	ea53 0308 	orrs.w	r3, r3, r8
 808ffba:	f43f af7d 	beq.w	808feb8 <_strtod_l+0x7f8>
 808ffbe:	b1e5      	cbz	r5, 808fffa <_strtod_l+0x93a>
 808ffc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808ffc2:	421d      	tst	r5, r3
 808ffc4:	d0ee      	beq.n	808ffa4 <_strtod_l+0x8e4>
 808ffc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808ffc8:	4640      	mov	r0, r8
 808ffca:	4649      	mov	r1, r9
 808ffcc:	9a05      	ldr	r2, [sp, #20]
 808ffce:	b1c3      	cbz	r3, 8090002 <_strtod_l+0x942>
 808ffd0:	f7ff fb54 	bl	808f67c <sulp>
 808ffd4:	4602      	mov	r2, r0
 808ffd6:	460b      	mov	r3, r1
 808ffd8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808ffdc:	f7fd f9d8 	bl	808d390 <__adddf3>
 808ffe0:	4680      	mov	r8, r0
 808ffe2:	4689      	mov	r9, r1
 808ffe4:	e7de      	b.n	808ffa4 <_strtod_l+0x8e4>
 808ffe6:	4013      	ands	r3, r2
 808ffe8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 808ffec:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 808fff0:	f04f 38ff 	mov.w	r8, #4294967295
 808fff4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 808fff8:	e7d4      	b.n	808ffa4 <_strtod_l+0x8e4>
 808fffa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 808fffc:	ea13 0f08 	tst.w	r3, r8
 8090000:	e7e0      	b.n	808ffc4 <_strtod_l+0x904>
 8090002:	f7ff fb3b 	bl	808f67c <sulp>
 8090006:	4602      	mov	r2, r0
 8090008:	460b      	mov	r3, r1
 809000a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 809000e:	f7fd f9bd 	bl	808d38c <__aeabi_dsub>
 8090012:	2200      	movs	r2, #0
 8090014:	2300      	movs	r3, #0
 8090016:	4680      	mov	r8, r0
 8090018:	4689      	mov	r9, r1
 809001a:	f7fd fdd7 	bl	808dbcc <__aeabi_dcmpeq>
 809001e:	2800      	cmp	r0, #0
 8090020:	d0c0      	beq.n	808ffa4 <_strtod_l+0x8e4>
 8090022:	e602      	b.n	808fc2a <_strtod_l+0x56a>
 8090024:	4658      	mov	r0, fp
 8090026:	9904      	ldr	r1, [sp, #16]
 8090028:	f001 fcf3 	bl	8091a12 <__ratio>
 809002c:	2200      	movs	r2, #0
 809002e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8090032:	4606      	mov	r6, r0
 8090034:	460f      	mov	r7, r1
 8090036:	f7fd fddd 	bl	808dbf4 <__aeabi_dcmple>
 809003a:	2800      	cmp	r0, #0
 809003c:	d075      	beq.n	809012a <_strtod_l+0xa6a>
 809003e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8090040:	2b00      	cmp	r3, #0
 8090042:	d047      	beq.n	80900d4 <_strtod_l+0xa14>
 8090044:	2600      	movs	r6, #0
 8090046:	4f65      	ldr	r7, [pc, #404]	; (80901dc <_strtod_l+0xb1c>)
 8090048:	4d64      	ldr	r5, [pc, #400]	; (80901dc <_strtod_l+0xb1c>)
 809004a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 809004c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8090050:	0d1b      	lsrs	r3, r3, #20
 8090052:	051b      	lsls	r3, r3, #20
 8090054:	930f      	str	r3, [sp, #60]	; 0x3c
 8090056:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8090058:	4b61      	ldr	r3, [pc, #388]	; (80901e0 <_strtod_l+0xb20>)
 809005a:	429a      	cmp	r2, r3
 809005c:	f040 80c8 	bne.w	80901f0 <_strtod_l+0xb30>
 8090060:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8090064:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8090068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 809006a:	4640      	mov	r0, r8
 809006c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8090070:	4649      	mov	r1, r9
 8090072:	f001 fc05 	bl	8091880 <__ulp>
 8090076:	4602      	mov	r2, r0
 8090078:	460b      	mov	r3, r1
 809007a:	4630      	mov	r0, r6
 809007c:	4639      	mov	r1, r7
 809007e:	f7fd fb3d 	bl	808d6fc <__aeabi_dmul>
 8090082:	4642      	mov	r2, r8
 8090084:	464b      	mov	r3, r9
 8090086:	f7fd f983 	bl	808d390 <__adddf3>
 809008a:	460b      	mov	r3, r1
 809008c:	4951      	ldr	r1, [pc, #324]	; (80901d4 <_strtod_l+0xb14>)
 809008e:	4a55      	ldr	r2, [pc, #340]	; (80901e4 <_strtod_l+0xb24>)
 8090090:	4019      	ands	r1, r3
 8090092:	4291      	cmp	r1, r2
 8090094:	4680      	mov	r8, r0
 8090096:	d95e      	bls.n	8090156 <_strtod_l+0xa96>
 8090098:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 809009a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 809009e:	4293      	cmp	r3, r2
 80900a0:	d103      	bne.n	80900aa <_strtod_l+0x9ea>
 80900a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80900a4:	3301      	adds	r3, #1
 80900a6:	f43f ad4e 	beq.w	808fb46 <_strtod_l+0x486>
 80900aa:	f04f 38ff 	mov.w	r8, #4294967295
 80900ae:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80901d8 <_strtod_l+0xb18>
 80900b2:	4650      	mov	r0, sl
 80900b4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80900b6:	f001 f919 	bl	80912ec <_Bfree>
 80900ba:	4650      	mov	r0, sl
 80900bc:	9906      	ldr	r1, [sp, #24]
 80900be:	f001 f915 	bl	80912ec <_Bfree>
 80900c2:	4650      	mov	r0, sl
 80900c4:	9904      	ldr	r1, [sp, #16]
 80900c6:	f001 f911 	bl	80912ec <_Bfree>
 80900ca:	4659      	mov	r1, fp
 80900cc:	4650      	mov	r0, sl
 80900ce:	f001 f90d 	bl	80912ec <_Bfree>
 80900d2:	e61c      	b.n	808fd0e <_strtod_l+0x64e>
 80900d4:	f1b8 0f00 	cmp.w	r8, #0
 80900d8:	d119      	bne.n	809010e <_strtod_l+0xa4e>
 80900da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80900dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80900e0:	b9e3      	cbnz	r3, 809011c <_strtod_l+0xa5c>
 80900e2:	2200      	movs	r2, #0
 80900e4:	4630      	mov	r0, r6
 80900e6:	4639      	mov	r1, r7
 80900e8:	4b3c      	ldr	r3, [pc, #240]	; (80901dc <_strtod_l+0xb1c>)
 80900ea:	f7fd fd79 	bl	808dbe0 <__aeabi_dcmplt>
 80900ee:	b9c8      	cbnz	r0, 8090124 <_strtod_l+0xa64>
 80900f0:	2200      	movs	r2, #0
 80900f2:	4630      	mov	r0, r6
 80900f4:	4639      	mov	r1, r7
 80900f6:	4b3c      	ldr	r3, [pc, #240]	; (80901e8 <_strtod_l+0xb28>)
 80900f8:	f7fd fb00 	bl	808d6fc <__aeabi_dmul>
 80900fc:	4604      	mov	r4, r0
 80900fe:	460d      	mov	r5, r1
 8090100:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8090104:	9418      	str	r4, [sp, #96]	; 0x60
 8090106:	9319      	str	r3, [sp, #100]	; 0x64
 8090108:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 809010c:	e79d      	b.n	809004a <_strtod_l+0x98a>
 809010e:	f1b8 0f01 	cmp.w	r8, #1
 8090112:	d103      	bne.n	809011c <_strtod_l+0xa5c>
 8090114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8090116:	2b00      	cmp	r3, #0
 8090118:	f43f ad87 	beq.w	808fc2a <_strtod_l+0x56a>
 809011c:	2600      	movs	r6, #0
 809011e:	2400      	movs	r4, #0
 8090120:	4f32      	ldr	r7, [pc, #200]	; (80901ec <_strtod_l+0xb2c>)
 8090122:	e791      	b.n	8090048 <_strtod_l+0x988>
 8090124:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8090126:	4d30      	ldr	r5, [pc, #192]	; (80901e8 <_strtod_l+0xb28>)
 8090128:	e7ea      	b.n	8090100 <_strtod_l+0xa40>
 809012a:	4b2f      	ldr	r3, [pc, #188]	; (80901e8 <_strtod_l+0xb28>)
 809012c:	2200      	movs	r2, #0
 809012e:	4630      	mov	r0, r6
 8090130:	4639      	mov	r1, r7
 8090132:	f7fd fae3 	bl	808d6fc <__aeabi_dmul>
 8090136:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8090138:	4604      	mov	r4, r0
 809013a:	460d      	mov	r5, r1
 809013c:	b933      	cbnz	r3, 809014c <_strtod_l+0xa8c>
 809013e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8090142:	9010      	str	r0, [sp, #64]	; 0x40
 8090144:	9311      	str	r3, [sp, #68]	; 0x44
 8090146:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 809014a:	e77e      	b.n	809004a <_strtod_l+0x98a>
 809014c:	4602      	mov	r2, r0
 809014e:	460b      	mov	r3, r1
 8090150:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8090154:	e7f7      	b.n	8090146 <_strtod_l+0xa86>
 8090156:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 809015a:	9b05      	ldr	r3, [sp, #20]
 809015c:	2b00      	cmp	r3, #0
 809015e:	d1a8      	bne.n	80900b2 <_strtod_l+0x9f2>
 8090160:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8090164:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8090166:	0d1b      	lsrs	r3, r3, #20
 8090168:	051b      	lsls	r3, r3, #20
 809016a:	429a      	cmp	r2, r3
 809016c:	d1a1      	bne.n	80900b2 <_strtod_l+0x9f2>
 809016e:	4620      	mov	r0, r4
 8090170:	4629      	mov	r1, r5
 8090172:	f001 fce7 	bl	8091b44 <__aeabi_d2lz>
 8090176:	f7fd fa93 	bl	808d6a0 <__aeabi_l2d>
 809017a:	4602      	mov	r2, r0
 809017c:	460b      	mov	r3, r1
 809017e:	4620      	mov	r0, r4
 8090180:	4629      	mov	r1, r5
 8090182:	f7fd f903 	bl	808d38c <__aeabi_dsub>
 8090186:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8090188:	f3c9 0313 	ubfx	r3, r9, #0, #20
 809018c:	ea43 0308 	orr.w	r3, r3, r8
 8090190:	4313      	orrs	r3, r2
 8090192:	4604      	mov	r4, r0
 8090194:	460d      	mov	r5, r1
 8090196:	d066      	beq.n	8090266 <_strtod_l+0xba6>
 8090198:	a309      	add	r3, pc, #36	; (adr r3, 80901c0 <_strtod_l+0xb00>)
 809019a:	e9d3 2300 	ldrd	r2, r3, [r3]
 809019e:	f7fd fd1f 	bl	808dbe0 <__aeabi_dcmplt>
 80901a2:	2800      	cmp	r0, #0
 80901a4:	f47f acda 	bne.w	808fb5c <_strtod_l+0x49c>
 80901a8:	a307      	add	r3, pc, #28	; (adr r3, 80901c8 <_strtod_l+0xb08>)
 80901aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80901ae:	4620      	mov	r0, r4
 80901b0:	4629      	mov	r1, r5
 80901b2:	f7fd fd33 	bl	808dc1c <__aeabi_dcmpgt>
 80901b6:	2800      	cmp	r0, #0
 80901b8:	f43f af7b 	beq.w	80900b2 <_strtod_l+0x9f2>
 80901bc:	e4ce      	b.n	808fb5c <_strtod_l+0x49c>
 80901be:	bf00      	nop
 80901c0:	94a03595 	.word	0x94a03595
 80901c4:	3fdfffff 	.word	0x3fdfffff
 80901c8:	35afe535 	.word	0x35afe535
 80901cc:	3fe00000 	.word	0x3fe00000
 80901d0:	000fffff 	.word	0x000fffff
 80901d4:	7ff00000 	.word	0x7ff00000
 80901d8:	7fefffff 	.word	0x7fefffff
 80901dc:	3ff00000 	.word	0x3ff00000
 80901e0:	7fe00000 	.word	0x7fe00000
 80901e4:	7c9fffff 	.word	0x7c9fffff
 80901e8:	3fe00000 	.word	0x3fe00000
 80901ec:	bff00000 	.word	0xbff00000
 80901f0:	9b05      	ldr	r3, [sp, #20]
 80901f2:	b313      	cbz	r3, 809023a <_strtod_l+0xb7a>
 80901f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80901f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80901fa:	d81e      	bhi.n	809023a <_strtod_l+0xb7a>
 80901fc:	a326      	add	r3, pc, #152	; (adr r3, 8090298 <_strtod_l+0xbd8>)
 80901fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8090202:	4620      	mov	r0, r4
 8090204:	4629      	mov	r1, r5
 8090206:	f7fd fcf5 	bl	808dbf4 <__aeabi_dcmple>
 809020a:	b190      	cbz	r0, 8090232 <_strtod_l+0xb72>
 809020c:	4629      	mov	r1, r5
 809020e:	4620      	mov	r0, r4
 8090210:	f7fd fd4c 	bl	808dcac <__aeabi_d2uiz>
 8090214:	2801      	cmp	r0, #1
 8090216:	bf38      	it	cc
 8090218:	2001      	movcc	r0, #1
 809021a:	f7fd f9f5 	bl	808d608 <__aeabi_ui2d>
 809021e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8090220:	4604      	mov	r4, r0
 8090222:	460d      	mov	r5, r1
 8090224:	b9d3      	cbnz	r3, 809025c <_strtod_l+0xb9c>
 8090226:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 809022a:	9012      	str	r0, [sp, #72]	; 0x48
 809022c:	9313      	str	r3, [sp, #76]	; 0x4c
 809022e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8090232:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8090234:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8090238:	1a9f      	subs	r7, r3, r2
 809023a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 809023e:	f001 fb1f 	bl	8091880 <__ulp>
 8090242:	4602      	mov	r2, r0
 8090244:	460b      	mov	r3, r1
 8090246:	4630      	mov	r0, r6
 8090248:	4639      	mov	r1, r7
 809024a:	f7fd fa57 	bl	808d6fc <__aeabi_dmul>
 809024e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8090252:	f7fd f89d 	bl	808d390 <__adddf3>
 8090256:	4680      	mov	r8, r0
 8090258:	4689      	mov	r9, r1
 809025a:	e77e      	b.n	809015a <_strtod_l+0xa9a>
 809025c:	4602      	mov	r2, r0
 809025e:	460b      	mov	r3, r1
 8090260:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8090264:	e7e3      	b.n	809022e <_strtod_l+0xb6e>
 8090266:	a30e      	add	r3, pc, #56	; (adr r3, 80902a0 <_strtod_l+0xbe0>)
 8090268:	e9d3 2300 	ldrd	r2, r3, [r3]
 809026c:	f7fd fcb8 	bl	808dbe0 <__aeabi_dcmplt>
 8090270:	e7a1      	b.n	80901b6 <_strtod_l+0xaf6>
 8090272:	2300      	movs	r3, #0
 8090274:	930c      	str	r3, [sp, #48]	; 0x30
 8090276:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8090278:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 809027a:	6013      	str	r3, [r2, #0]
 809027c:	f7ff ba65 	b.w	808f74a <_strtod_l+0x8a>
 8090280:	2b65      	cmp	r3, #101	; 0x65
 8090282:	f43f ab5c 	beq.w	808f93e <_strtod_l+0x27e>
 8090286:	2b45      	cmp	r3, #69	; 0x45
 8090288:	f43f ab59 	beq.w	808f93e <_strtod_l+0x27e>
 809028c:	2201      	movs	r2, #1
 809028e:	f7ff bb8d 	b.w	808f9ac <_strtod_l+0x2ec>
 8090292:	bf00      	nop
 8090294:	f3af 8000 	nop.w
 8090298:	ffc00000 	.word	0xffc00000
 809029c:	41dfffff 	.word	0x41dfffff
 80902a0:	94a03595 	.word	0x94a03595
 80902a4:	3fcfffff 	.word	0x3fcfffff

080902a8 <strtod>:
 80902a8:	460a      	mov	r2, r1
 80902aa:	4601      	mov	r1, r0
 80902ac:	4802      	ldr	r0, [pc, #8]	; (80902b8 <strtod+0x10>)
 80902ae:	4b03      	ldr	r3, [pc, #12]	; (80902bc <strtod+0x14>)
 80902b0:	6800      	ldr	r0, [r0, #0]
 80902b2:	f7ff ba05 	b.w	808f6c0 <_strtod_l>
 80902b6:	bf00      	nop
 80902b8:	200000e8 	.word	0x200000e8
 80902bc:	200001b4 	.word	0x200001b4

080902c0 <__strtok_r>:
 80902c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80902c2:	b908      	cbnz	r0, 80902c8 <__strtok_r+0x8>
 80902c4:	6810      	ldr	r0, [r2, #0]
 80902c6:	b188      	cbz	r0, 80902ec <__strtok_r+0x2c>
 80902c8:	4604      	mov	r4, r0
 80902ca:	460f      	mov	r7, r1
 80902cc:	4620      	mov	r0, r4
 80902ce:	f814 5b01 	ldrb.w	r5, [r4], #1
 80902d2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80902d6:	b91e      	cbnz	r6, 80902e0 <__strtok_r+0x20>
 80902d8:	b965      	cbnz	r5, 80902f4 <__strtok_r+0x34>
 80902da:	4628      	mov	r0, r5
 80902dc:	6015      	str	r5, [r2, #0]
 80902de:	e005      	b.n	80902ec <__strtok_r+0x2c>
 80902e0:	42b5      	cmp	r5, r6
 80902e2:	d1f6      	bne.n	80902d2 <__strtok_r+0x12>
 80902e4:	2b00      	cmp	r3, #0
 80902e6:	d1f0      	bne.n	80902ca <__strtok_r+0xa>
 80902e8:	6014      	str	r4, [r2, #0]
 80902ea:	7003      	strb	r3, [r0, #0]
 80902ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80902ee:	461c      	mov	r4, r3
 80902f0:	e00c      	b.n	809030c <__strtok_r+0x4c>
 80902f2:	b915      	cbnz	r5, 80902fa <__strtok_r+0x3a>
 80902f4:	460e      	mov	r6, r1
 80902f6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80902fa:	f816 5b01 	ldrb.w	r5, [r6], #1
 80902fe:	42ab      	cmp	r3, r5
 8090300:	d1f7      	bne.n	80902f2 <__strtok_r+0x32>
 8090302:	2b00      	cmp	r3, #0
 8090304:	d0f3      	beq.n	80902ee <__strtok_r+0x2e>
 8090306:	2300      	movs	r3, #0
 8090308:	f804 3c01 	strb.w	r3, [r4, #-1]
 809030c:	6014      	str	r4, [r2, #0]
 809030e:	e7ed      	b.n	80902ec <__strtok_r+0x2c>

08090310 <strtok_r>:
 8090310:	2301      	movs	r3, #1
 8090312:	f7ff bfd5 	b.w	80902c0 <__strtok_r>
	...

08090318 <_strtol_l.isra.0>:
 8090318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 809031c:	468c      	mov	ip, r1
 809031e:	4686      	mov	lr, r0
 8090320:	4e39      	ldr	r6, [pc, #228]	; (8090408 <_strtol_l.isra.0+0xf0>)
 8090322:	4660      	mov	r0, ip
 8090324:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8090328:	5da5      	ldrb	r5, [r4, r6]
 809032a:	f015 0508 	ands.w	r5, r5, #8
 809032e:	d1f8      	bne.n	8090322 <_strtol_l.isra.0+0xa>
 8090330:	2c2d      	cmp	r4, #45	; 0x2d
 8090332:	d133      	bne.n	809039c <_strtol_l.isra.0+0x84>
 8090334:	f04f 0801 	mov.w	r8, #1
 8090338:	f89c 4000 	ldrb.w	r4, [ip]
 809033c:	f100 0c02 	add.w	ip, r0, #2
 8090340:	2b00      	cmp	r3, #0
 8090342:	d05c      	beq.n	80903fe <_strtol_l.isra.0+0xe6>
 8090344:	2b10      	cmp	r3, #16
 8090346:	d10c      	bne.n	8090362 <_strtol_l.isra.0+0x4a>
 8090348:	2c30      	cmp	r4, #48	; 0x30
 809034a:	d10a      	bne.n	8090362 <_strtol_l.isra.0+0x4a>
 809034c:	f89c 0000 	ldrb.w	r0, [ip]
 8090350:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8090354:	2858      	cmp	r0, #88	; 0x58
 8090356:	d14d      	bne.n	80903f4 <_strtol_l.isra.0+0xdc>
 8090358:	2310      	movs	r3, #16
 809035a:	f89c 4001 	ldrb.w	r4, [ip, #1]
 809035e:	f10c 0c02 	add.w	ip, ip, #2
 8090362:	2600      	movs	r6, #0
 8090364:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8090368:	3f01      	subs	r7, #1
 809036a:	fbb7 f9f3 	udiv	r9, r7, r3
 809036e:	4630      	mov	r0, r6
 8090370:	fb03 7a19 	mls	sl, r3, r9, r7
 8090374:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 8090378:	2d09      	cmp	r5, #9
 809037a:	d818      	bhi.n	80903ae <_strtol_l.isra.0+0x96>
 809037c:	462c      	mov	r4, r5
 809037e:	42a3      	cmp	r3, r4
 8090380:	dd24      	ble.n	80903cc <_strtol_l.isra.0+0xb4>
 8090382:	1c75      	adds	r5, r6, #1
 8090384:	d007      	beq.n	8090396 <_strtol_l.isra.0+0x7e>
 8090386:	4581      	cmp	r9, r0
 8090388:	d31d      	bcc.n	80903c6 <_strtol_l.isra.0+0xae>
 809038a:	d101      	bne.n	8090390 <_strtol_l.isra.0+0x78>
 809038c:	45a2      	cmp	sl, r4
 809038e:	db1a      	blt.n	80903c6 <_strtol_l.isra.0+0xae>
 8090390:	2601      	movs	r6, #1
 8090392:	fb00 4003 	mla	r0, r0, r3, r4
 8090396:	f81c 4b01 	ldrb.w	r4, [ip], #1
 809039a:	e7eb      	b.n	8090374 <_strtol_l.isra.0+0x5c>
 809039c:	2c2b      	cmp	r4, #43	; 0x2b
 809039e:	bf08      	it	eq
 80903a0:	f89c 4000 	ldrbeq.w	r4, [ip]
 80903a4:	46a8      	mov	r8, r5
 80903a6:	bf08      	it	eq
 80903a8:	f100 0c02 	addeq.w	ip, r0, #2
 80903ac:	e7c8      	b.n	8090340 <_strtol_l.isra.0+0x28>
 80903ae:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 80903b2:	2d19      	cmp	r5, #25
 80903b4:	d801      	bhi.n	80903ba <_strtol_l.isra.0+0xa2>
 80903b6:	3c37      	subs	r4, #55	; 0x37
 80903b8:	e7e1      	b.n	809037e <_strtol_l.isra.0+0x66>
 80903ba:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 80903be:	2d19      	cmp	r5, #25
 80903c0:	d804      	bhi.n	80903cc <_strtol_l.isra.0+0xb4>
 80903c2:	3c57      	subs	r4, #87	; 0x57
 80903c4:	e7db      	b.n	809037e <_strtol_l.isra.0+0x66>
 80903c6:	f04f 36ff 	mov.w	r6, #4294967295
 80903ca:	e7e4      	b.n	8090396 <_strtol_l.isra.0+0x7e>
 80903cc:	1c73      	adds	r3, r6, #1
 80903ce:	d106      	bne.n	80903de <_strtol_l.isra.0+0xc6>
 80903d0:	2322      	movs	r3, #34	; 0x22
 80903d2:	4638      	mov	r0, r7
 80903d4:	f8ce 3000 	str.w	r3, [lr]
 80903d8:	b942      	cbnz	r2, 80903ec <_strtol_l.isra.0+0xd4>
 80903da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80903de:	f1b8 0f00 	cmp.w	r8, #0
 80903e2:	d000      	beq.n	80903e6 <_strtol_l.isra.0+0xce>
 80903e4:	4240      	negs	r0, r0
 80903e6:	2a00      	cmp	r2, #0
 80903e8:	d0f7      	beq.n	80903da <_strtol_l.isra.0+0xc2>
 80903ea:	b10e      	cbz	r6, 80903f0 <_strtol_l.isra.0+0xd8>
 80903ec:	f10c 31ff 	add.w	r1, ip, #4294967295
 80903f0:	6011      	str	r1, [r2, #0]
 80903f2:	e7f2      	b.n	80903da <_strtol_l.isra.0+0xc2>
 80903f4:	2430      	movs	r4, #48	; 0x30
 80903f6:	2b00      	cmp	r3, #0
 80903f8:	d1b3      	bne.n	8090362 <_strtol_l.isra.0+0x4a>
 80903fa:	2308      	movs	r3, #8
 80903fc:	e7b1      	b.n	8090362 <_strtol_l.isra.0+0x4a>
 80903fe:	2c30      	cmp	r4, #48	; 0x30
 8090400:	d0a4      	beq.n	809034c <_strtol_l.isra.0+0x34>
 8090402:	230a      	movs	r3, #10
 8090404:	e7ad      	b.n	8090362 <_strtol_l.isra.0+0x4a>
 8090406:	bf00      	nop
 8090408:	08094869 	.word	0x08094869

0809040c <strtol>:
 809040c:	4613      	mov	r3, r2
 809040e:	460a      	mov	r2, r1
 8090410:	4601      	mov	r1, r0
 8090412:	4802      	ldr	r0, [pc, #8]	; (809041c <strtol+0x10>)
 8090414:	6800      	ldr	r0, [r0, #0]
 8090416:	f7ff bf7f 	b.w	8090318 <_strtol_l.isra.0>
 809041a:	bf00      	nop
 809041c:	200000e8 	.word	0x200000e8

08090420 <_strtoul_l.isra.0>:
 8090420:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8090424:	468c      	mov	ip, r1
 8090426:	4686      	mov	lr, r0
 8090428:	4e3a      	ldr	r6, [pc, #232]	; (8090514 <_strtoul_l.isra.0+0xf4>)
 809042a:	4660      	mov	r0, ip
 809042c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8090430:	5da5      	ldrb	r5, [r4, r6]
 8090432:	f015 0508 	ands.w	r5, r5, #8
 8090436:	d1f8      	bne.n	809042a <_strtoul_l.isra.0+0xa>
 8090438:	2c2d      	cmp	r4, #45	; 0x2d
 809043a:	d134      	bne.n	80904a6 <_strtoul_l.isra.0+0x86>
 809043c:	f04f 0801 	mov.w	r8, #1
 8090440:	f89c 4000 	ldrb.w	r4, [ip]
 8090444:	f100 0c02 	add.w	ip, r0, #2
 8090448:	2b00      	cmp	r3, #0
 809044a:	d05e      	beq.n	809050a <_strtoul_l.isra.0+0xea>
 809044c:	2b10      	cmp	r3, #16
 809044e:	d10c      	bne.n	809046a <_strtoul_l.isra.0+0x4a>
 8090450:	2c30      	cmp	r4, #48	; 0x30
 8090452:	d10a      	bne.n	809046a <_strtoul_l.isra.0+0x4a>
 8090454:	f89c 0000 	ldrb.w	r0, [ip]
 8090458:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 809045c:	2858      	cmp	r0, #88	; 0x58
 809045e:	d14f      	bne.n	8090500 <_strtoul_l.isra.0+0xe0>
 8090460:	2310      	movs	r3, #16
 8090462:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8090466:	f10c 0c02 	add.w	ip, ip, #2
 809046a:	f04f 37ff 	mov.w	r7, #4294967295
 809046e:	fbb7 f7f3 	udiv	r7, r7, r3
 8090472:	2500      	movs	r5, #0
 8090474:	fb03 f907 	mul.w	r9, r3, r7
 8090478:	4628      	mov	r0, r5
 809047a:	ea6f 0909 	mvn.w	r9, r9
 809047e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8090482:	2e09      	cmp	r6, #9
 8090484:	d818      	bhi.n	80904b8 <_strtoul_l.isra.0+0x98>
 8090486:	4634      	mov	r4, r6
 8090488:	42a3      	cmp	r3, r4
 809048a:	dd24      	ble.n	80904d6 <_strtoul_l.isra.0+0xb6>
 809048c:	2d00      	cmp	r5, #0
 809048e:	db1f      	blt.n	80904d0 <_strtoul_l.isra.0+0xb0>
 8090490:	4287      	cmp	r7, r0
 8090492:	d31d      	bcc.n	80904d0 <_strtoul_l.isra.0+0xb0>
 8090494:	d101      	bne.n	809049a <_strtoul_l.isra.0+0x7a>
 8090496:	45a1      	cmp	r9, r4
 8090498:	db1a      	blt.n	80904d0 <_strtoul_l.isra.0+0xb0>
 809049a:	2501      	movs	r5, #1
 809049c:	fb00 4003 	mla	r0, r0, r3, r4
 80904a0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80904a4:	e7eb      	b.n	809047e <_strtoul_l.isra.0+0x5e>
 80904a6:	2c2b      	cmp	r4, #43	; 0x2b
 80904a8:	bf08      	it	eq
 80904aa:	f89c 4000 	ldrbeq.w	r4, [ip]
 80904ae:	46a8      	mov	r8, r5
 80904b0:	bf08      	it	eq
 80904b2:	f100 0c02 	addeq.w	ip, r0, #2
 80904b6:	e7c7      	b.n	8090448 <_strtoul_l.isra.0+0x28>
 80904b8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80904bc:	2e19      	cmp	r6, #25
 80904be:	d801      	bhi.n	80904c4 <_strtoul_l.isra.0+0xa4>
 80904c0:	3c37      	subs	r4, #55	; 0x37
 80904c2:	e7e1      	b.n	8090488 <_strtoul_l.isra.0+0x68>
 80904c4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80904c8:	2e19      	cmp	r6, #25
 80904ca:	d804      	bhi.n	80904d6 <_strtoul_l.isra.0+0xb6>
 80904cc:	3c57      	subs	r4, #87	; 0x57
 80904ce:	e7db      	b.n	8090488 <_strtoul_l.isra.0+0x68>
 80904d0:	f04f 35ff 	mov.w	r5, #4294967295
 80904d4:	e7e4      	b.n	80904a0 <_strtoul_l.isra.0+0x80>
 80904d6:	2d00      	cmp	r5, #0
 80904d8:	da07      	bge.n	80904ea <_strtoul_l.isra.0+0xca>
 80904da:	2322      	movs	r3, #34	; 0x22
 80904dc:	f04f 30ff 	mov.w	r0, #4294967295
 80904e0:	f8ce 3000 	str.w	r3, [lr]
 80904e4:	b942      	cbnz	r2, 80904f8 <_strtoul_l.isra.0+0xd8>
 80904e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80904ea:	f1b8 0f00 	cmp.w	r8, #0
 80904ee:	d000      	beq.n	80904f2 <_strtoul_l.isra.0+0xd2>
 80904f0:	4240      	negs	r0, r0
 80904f2:	2a00      	cmp	r2, #0
 80904f4:	d0f7      	beq.n	80904e6 <_strtoul_l.isra.0+0xc6>
 80904f6:	b10d      	cbz	r5, 80904fc <_strtoul_l.isra.0+0xdc>
 80904f8:	f10c 31ff 	add.w	r1, ip, #4294967295
 80904fc:	6011      	str	r1, [r2, #0]
 80904fe:	e7f2      	b.n	80904e6 <_strtoul_l.isra.0+0xc6>
 8090500:	2430      	movs	r4, #48	; 0x30
 8090502:	2b00      	cmp	r3, #0
 8090504:	d1b1      	bne.n	809046a <_strtoul_l.isra.0+0x4a>
 8090506:	2308      	movs	r3, #8
 8090508:	e7af      	b.n	809046a <_strtoul_l.isra.0+0x4a>
 809050a:	2c30      	cmp	r4, #48	; 0x30
 809050c:	d0a2      	beq.n	8090454 <_strtoul_l.isra.0+0x34>
 809050e:	230a      	movs	r3, #10
 8090510:	e7ab      	b.n	809046a <_strtoul_l.isra.0+0x4a>
 8090512:	bf00      	nop
 8090514:	08094869 	.word	0x08094869

08090518 <strtoul>:
 8090518:	4613      	mov	r3, r2
 809051a:	460a      	mov	r2, r1
 809051c:	4601      	mov	r1, r0
 809051e:	4802      	ldr	r0, [pc, #8]	; (8090528 <strtoul+0x10>)
 8090520:	6800      	ldr	r0, [r0, #0]
 8090522:	f7ff bf7d 	b.w	8090420 <_strtoul_l.isra.0>
 8090526:	bf00      	nop
 8090528:	200000e8 	.word	0x200000e8

0809052c <toupper>:
 809052c:	4b03      	ldr	r3, [pc, #12]	; (809053c <toupper+0x10>)
 809052e:	5cc3      	ldrb	r3, [r0, r3]
 8090530:	f003 0303 	and.w	r3, r3, #3
 8090534:	2b02      	cmp	r3, #2
 8090536:	bf08      	it	eq
 8090538:	3820      	subeq	r0, #32
 809053a:	4770      	bx	lr
 809053c:	08094869 	.word	0x08094869

08090540 <__tzcalc_limits>:
 8090540:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8090544:	4680      	mov	r8, r0
 8090546:	f000 fdcf 	bl	80910e8 <__gettzinfo>
 809054a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 809054e:	4598      	cmp	r8, r3
 8090550:	f340 8097 	ble.w	8090682 <__tzcalc_limits+0x142>
 8090554:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8090558:	f240 126d 	movw	r2, #365	; 0x16d
 809055c:	4443      	add	r3, r8
 809055e:	109b      	asrs	r3, r3, #2
 8090560:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8090564:	fb02 3505 	mla	r5, r2, r5, r3
 8090568:	f06f 0263 	mvn.w	r2, #99	; 0x63
 809056c:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8090570:	fb93 f3f2 	sdiv	r3, r3, r2
 8090574:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8090578:	441d      	add	r5, r3
 809057a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 809057e:	4442      	add	r2, r8
 8090580:	fbb2 f2f3 	udiv	r2, r2, r3
 8090584:	fb98 f7f3 	sdiv	r7, r8, r3
 8090588:	4415      	add	r5, r2
 809058a:	2264      	movs	r2, #100	; 0x64
 809058c:	fb03 8717 	mls	r7, r3, r7, r8
 8090590:	fb98 f6f2 	sdiv	r6, r8, r2
 8090594:	fab7 fc87 	clz	ip, r7
 8090598:	4604      	mov	r4, r0
 809059a:	f04f 0e07 	mov.w	lr, #7
 809059e:	fb02 8616 	mls	r6, r2, r6, r8
 80905a2:	f008 0303 	and.w	r3, r8, #3
 80905a6:	f8c0 8004 	str.w	r8, [r0, #4]
 80905aa:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80905ae:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80905b2:	9300      	str	r3, [sp, #0]
 80905b4:	7a22      	ldrb	r2, [r4, #8]
 80905b6:	6963      	ldr	r3, [r4, #20]
 80905b8:	2a4a      	cmp	r2, #74	; 0x4a
 80905ba:	d128      	bne.n	809060e <__tzcalc_limits+0xce>
 80905bc:	9900      	ldr	r1, [sp, #0]
 80905be:	18ea      	adds	r2, r5, r3
 80905c0:	b901      	cbnz	r1, 80905c4 <__tzcalc_limits+0x84>
 80905c2:	b906      	cbnz	r6, 80905c6 <__tzcalc_limits+0x86>
 80905c4:	bb0f      	cbnz	r7, 809060a <__tzcalc_limits+0xca>
 80905c6:	2b3b      	cmp	r3, #59	; 0x3b
 80905c8:	bfd4      	ite	le
 80905ca:	2300      	movle	r3, #0
 80905cc:	2301      	movgt	r3, #1
 80905ce:	4413      	add	r3, r2
 80905d0:	1e5a      	subs	r2, r3, #1
 80905d2:	69a3      	ldr	r3, [r4, #24]
 80905d4:	492c      	ldr	r1, [pc, #176]	; (8090688 <__tzcalc_limits+0x148>)
 80905d6:	3428      	adds	r4, #40	; 0x28
 80905d8:	fb01 3202 	mla	r2, r1, r2, r3
 80905dc:	6823      	ldr	r3, [r4, #0]
 80905de:	4413      	add	r3, r2
 80905e0:	461a      	mov	r2, r3
 80905e2:	17db      	asrs	r3, r3, #31
 80905e4:	e944 2302 	strd	r2, r3, [r4, #-8]
 80905e8:	45a3      	cmp	fp, r4
 80905ea:	d1e3      	bne.n	80905b4 <__tzcalc_limits+0x74>
 80905ec:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 80905f0:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 80905f4:	4294      	cmp	r4, r2
 80905f6:	eb75 0303 	sbcs.w	r3, r5, r3
 80905fa:	bfb4      	ite	lt
 80905fc:	2301      	movlt	r3, #1
 80905fe:	2300      	movge	r3, #0
 8090600:	6003      	str	r3, [r0, #0]
 8090602:	2001      	movs	r0, #1
 8090604:	b003      	add	sp, #12
 8090606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 809060a:	2300      	movs	r3, #0
 809060c:	e7df      	b.n	80905ce <__tzcalc_limits+0x8e>
 809060e:	2a44      	cmp	r2, #68	; 0x44
 8090610:	d101      	bne.n	8090616 <__tzcalc_limits+0xd6>
 8090612:	18ea      	adds	r2, r5, r3
 8090614:	e7dd      	b.n	80905d2 <__tzcalc_limits+0x92>
 8090616:	9a00      	ldr	r2, [sp, #0]
 8090618:	bb6a      	cbnz	r2, 8090676 <__tzcalc_limits+0x136>
 809061a:	2e00      	cmp	r6, #0
 809061c:	bf0c      	ite	eq
 809061e:	46e0      	moveq	r8, ip
 8090620:	f04f 0801 	movne.w	r8, #1
 8090624:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8090628:	68e2      	ldr	r2, [r4, #12]
 809062a:	f04f 0900 	mov.w	r9, #0
 809062e:	9201      	str	r2, [sp, #4]
 8090630:	462a      	mov	r2, r5
 8090632:	4916      	ldr	r1, [pc, #88]	; (809068c <__tzcalc_limits+0x14c>)
 8090634:	fb0a 1808 	mla	r8, sl, r8, r1
 8090638:	f1a8 0804 	sub.w	r8, r8, #4
 809063c:	9901      	ldr	r1, [sp, #4]
 809063e:	f109 0901 	add.w	r9, r9, #1
 8090642:	4549      	cmp	r1, r9
 8090644:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 8090648:	dc17      	bgt.n	809067a <__tzcalc_limits+0x13a>
 809064a:	f102 0804 	add.w	r8, r2, #4
 809064e:	fb98 f9fe 	sdiv	r9, r8, lr
 8090652:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8090656:	eba8 0909 	sub.w	r9, r8, r9
 809065a:	ebb3 0909 	subs.w	r9, r3, r9
 809065e:	6923      	ldr	r3, [r4, #16]
 8090660:	bf48      	it	mi
 8090662:	f109 0907 	addmi.w	r9, r9, #7
 8090666:	3b01      	subs	r3, #1
 8090668:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 809066c:	444b      	add	r3, r9
 809066e:	4553      	cmp	r3, sl
 8090670:	da05      	bge.n	809067e <__tzcalc_limits+0x13e>
 8090672:	441a      	add	r2, r3
 8090674:	e7ad      	b.n	80905d2 <__tzcalc_limits+0x92>
 8090676:	46e0      	mov	r8, ip
 8090678:	e7d4      	b.n	8090624 <__tzcalc_limits+0xe4>
 809067a:	4452      	add	r2, sl
 809067c:	e7de      	b.n	809063c <__tzcalc_limits+0xfc>
 809067e:	3b07      	subs	r3, #7
 8090680:	e7f5      	b.n	809066e <__tzcalc_limits+0x12e>
 8090682:	2000      	movs	r0, #0
 8090684:	e7be      	b.n	8090604 <__tzcalc_limits+0xc4>
 8090686:	bf00      	nop
 8090688:	00015180 	.word	0x00015180
 809068c:	080944fc 	.word	0x080944fc

08090690 <__tz_lock>:
 8090690:	4801      	ldr	r0, [pc, #4]	; (8090698 <__tz_lock+0x8>)
 8090692:	f000 bde1 	b.w	8091258 <__retarget_lock_acquire>
 8090696:	bf00      	nop
 8090698:	200013e7 	.word	0x200013e7

0809069c <__tz_unlock>:
 809069c:	4801      	ldr	r0, [pc, #4]	; (80906a4 <__tz_unlock+0x8>)
 809069e:	f000 bddd 	b.w	809125c <__retarget_lock_release>
 80906a2:	bf00      	nop
 80906a4:	200013e7 	.word	0x200013e7

080906a8 <_tzset_unlocked>:
 80906a8:	4b01      	ldr	r3, [pc, #4]	; (80906b0 <_tzset_unlocked+0x8>)
 80906aa:	6818      	ldr	r0, [r3, #0]
 80906ac:	f000 b802 	b.w	80906b4 <_tzset_unlocked_r>
 80906b0:	200000e8 	.word	0x200000e8

080906b4 <_tzset_unlocked_r>:
 80906b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80906b8:	b08d      	sub	sp, #52	; 0x34
 80906ba:	4607      	mov	r7, r0
 80906bc:	f000 fd14 	bl	80910e8 <__gettzinfo>
 80906c0:	49b0      	ldr	r1, [pc, #704]	; (8090984 <_tzset_unlocked_r+0x2d0>)
 80906c2:	4605      	mov	r5, r0
 80906c4:	4638      	mov	r0, r7
 80906c6:	f000 fd07 	bl	80910d8 <_getenv_r>
 80906ca:	4eaf      	ldr	r6, [pc, #700]	; (8090988 <_tzset_unlocked_r+0x2d4>)
 80906cc:	4604      	mov	r4, r0
 80906ce:	b970      	cbnz	r0, 80906ee <_tzset_unlocked_r+0x3a>
 80906d0:	4bae      	ldr	r3, [pc, #696]	; (809098c <_tzset_unlocked_r+0x2d8>)
 80906d2:	4aaf      	ldr	r2, [pc, #700]	; (8090990 <_tzset_unlocked_r+0x2dc>)
 80906d4:	6018      	str	r0, [r3, #0]
 80906d6:	4baf      	ldr	r3, [pc, #700]	; (8090994 <_tzset_unlocked_r+0x2e0>)
 80906d8:	6018      	str	r0, [r3, #0]
 80906da:	4baf      	ldr	r3, [pc, #700]	; (8090998 <_tzset_unlocked_r+0x2e4>)
 80906dc:	6830      	ldr	r0, [r6, #0]
 80906de:	e9c3 2200 	strd	r2, r2, [r3]
 80906e2:	f7fa fa77 	bl	808abd4 <free>
 80906e6:	6034      	str	r4, [r6, #0]
 80906e8:	b00d      	add	sp, #52	; 0x34
 80906ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80906ee:	6831      	ldr	r1, [r6, #0]
 80906f0:	2900      	cmp	r1, #0
 80906f2:	d15f      	bne.n	80907b4 <_tzset_unlocked_r+0x100>
 80906f4:	6830      	ldr	r0, [r6, #0]
 80906f6:	f7fa fa6d 	bl	808abd4 <free>
 80906fa:	4620      	mov	r0, r4
 80906fc:	f7fe ff7a 	bl	808f5f4 <strlen>
 8090700:	1c41      	adds	r1, r0, #1
 8090702:	4638      	mov	r0, r7
 8090704:	f7fa fab6 	bl	808ac74 <_malloc_r>
 8090708:	6030      	str	r0, [r6, #0]
 809070a:	2800      	cmp	r0, #0
 809070c:	d157      	bne.n	80907be <_tzset_unlocked_r+0x10a>
 809070e:	7823      	ldrb	r3, [r4, #0]
 8090710:	ae0a      	add	r6, sp, #40	; 0x28
 8090712:	2b3a      	cmp	r3, #58	; 0x3a
 8090714:	bf08      	it	eq
 8090716:	3401      	addeq	r4, #1
 8090718:	4633      	mov	r3, r6
 809071a:	4620      	mov	r0, r4
 809071c:	4a9f      	ldr	r2, [pc, #636]	; (809099c <_tzset_unlocked_r+0x2e8>)
 809071e:	49a0      	ldr	r1, [pc, #640]	; (80909a0 <_tzset_unlocked_r+0x2ec>)
 8090720:	f7fa fa80 	bl	808ac24 <siscanf>
 8090724:	2800      	cmp	r0, #0
 8090726:	dddf      	ble.n	80906e8 <_tzset_unlocked_r+0x34>
 8090728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 809072a:	18e7      	adds	r7, r4, r3
 809072c:	5ce3      	ldrb	r3, [r4, r3]
 809072e:	2b2d      	cmp	r3, #45	; 0x2d
 8090730:	d149      	bne.n	80907c6 <_tzset_unlocked_r+0x112>
 8090732:	f04f 34ff 	mov.w	r4, #4294967295
 8090736:	3701      	adds	r7, #1
 8090738:	f04f 0800 	mov.w	r8, #0
 809073c:	f10d 0a20 	add.w	sl, sp, #32
 8090740:	f10d 0b1e 	add.w	fp, sp, #30
 8090744:	4633      	mov	r3, r6
 8090746:	4638      	mov	r0, r7
 8090748:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 809074c:	4995      	ldr	r1, [pc, #596]	; (80909a4 <_tzset_unlocked_r+0x2f0>)
 809074e:	9603      	str	r6, [sp, #12]
 8090750:	f8cd b000 	str.w	fp, [sp]
 8090754:	aa07      	add	r2, sp, #28
 8090756:	f8ad 801e 	strh.w	r8, [sp, #30]
 809075a:	f8ad 8020 	strh.w	r8, [sp, #32]
 809075e:	f7fa fa61 	bl	808ac24 <siscanf>
 8090762:	4540      	cmp	r0, r8
 8090764:	ddc0      	ble.n	80906e8 <_tzset_unlocked_r+0x34>
 8090766:	213c      	movs	r1, #60	; 0x3c
 8090768:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 809076c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8090770:	f8df 923c 	ldr.w	r9, [pc, #572]	; 80909b0 <_tzset_unlocked_r+0x2fc>
 8090774:	fb01 2203 	mla	r2, r1, r3, r2
 8090778:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 809077c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8090780:	fb01 2303 	mla	r3, r1, r3, r2
 8090784:	435c      	muls	r4, r3
 8090786:	4b85      	ldr	r3, [pc, #532]	; (809099c <_tzset_unlocked_r+0x2e8>)
 8090788:	62ac      	str	r4, [r5, #40]	; 0x28
 809078a:	4c83      	ldr	r4, [pc, #524]	; (8090998 <_tzset_unlocked_r+0x2e4>)
 809078c:	464a      	mov	r2, r9
 809078e:	6023      	str	r3, [r4, #0]
 8090790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8090792:	4983      	ldr	r1, [pc, #524]	; (80909a0 <_tzset_unlocked_r+0x2ec>)
 8090794:	441f      	add	r7, r3
 8090796:	4638      	mov	r0, r7
 8090798:	4633      	mov	r3, r6
 809079a:	f7fa fa43 	bl	808ac24 <siscanf>
 809079e:	4540      	cmp	r0, r8
 80907a0:	dc17      	bgt.n	80907d2 <_tzset_unlocked_r+0x11e>
 80907a2:	6823      	ldr	r3, [r4, #0]
 80907a4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80907a6:	6063      	str	r3, [r4, #4]
 80907a8:	4b78      	ldr	r3, [pc, #480]	; (809098c <_tzset_unlocked_r+0x2d8>)
 80907aa:	601a      	str	r2, [r3, #0]
 80907ac:	4b79      	ldr	r3, [pc, #484]	; (8090994 <_tzset_unlocked_r+0x2e0>)
 80907ae:	f8c3 8000 	str.w	r8, [r3]
 80907b2:	e799      	b.n	80906e8 <_tzset_unlocked_r+0x34>
 80907b4:	f7fe f98d 	bl	808ead2 <strcmp>
 80907b8:	2800      	cmp	r0, #0
 80907ba:	d19b      	bne.n	80906f4 <_tzset_unlocked_r+0x40>
 80907bc:	e794      	b.n	80906e8 <_tzset_unlocked_r+0x34>
 80907be:	4621      	mov	r1, r4
 80907c0:	f7fe f991 	bl	808eae6 <strcpy>
 80907c4:	e7a3      	b.n	809070e <_tzset_unlocked_r+0x5a>
 80907c6:	2b2b      	cmp	r3, #43	; 0x2b
 80907c8:	f04f 0401 	mov.w	r4, #1
 80907cc:	bf08      	it	eq
 80907ce:	3701      	addeq	r7, #1
 80907d0:	e7b2      	b.n	8090738 <_tzset_unlocked_r+0x84>
 80907d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80907d4:	f8c4 9004 	str.w	r9, [r4, #4]
 80907d8:	18fc      	adds	r4, r7, r3
 80907da:	5cfb      	ldrb	r3, [r7, r3]
 80907dc:	2b2d      	cmp	r3, #45	; 0x2d
 80907de:	f040 808c 	bne.w	80908fa <_tzset_unlocked_r+0x246>
 80907e2:	f04f 37ff 	mov.w	r7, #4294967295
 80907e6:	3401      	adds	r4, #1
 80907e8:	2300      	movs	r3, #0
 80907ea:	4620      	mov	r0, r4
 80907ec:	f8ad 301c 	strh.w	r3, [sp, #28]
 80907f0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80907f4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80907f8:	930a      	str	r3, [sp, #40]	; 0x28
 80907fa:	e9cd a602 	strd	sl, r6, [sp, #8]
 80907fe:	4633      	mov	r3, r6
 8090800:	e9cd b600 	strd	fp, r6, [sp]
 8090804:	4967      	ldr	r1, [pc, #412]	; (80909a4 <_tzset_unlocked_r+0x2f0>)
 8090806:	aa07      	add	r2, sp, #28
 8090808:	f7fa fa0c 	bl	808ac24 <siscanf>
 809080c:	2800      	cmp	r0, #0
 809080e:	dc7a      	bgt.n	8090906 <_tzset_unlocked_r+0x252>
 8090810:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8090812:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8090816:	652f      	str	r7, [r5, #80]	; 0x50
 8090818:	f04f 0900 	mov.w	r9, #0
 809081c:	462f      	mov	r7, r5
 809081e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8090820:	441c      	add	r4, r3
 8090822:	7823      	ldrb	r3, [r4, #0]
 8090824:	2b2c      	cmp	r3, #44	; 0x2c
 8090826:	bf08      	it	eq
 8090828:	3401      	addeq	r4, #1
 809082a:	f894 8000 	ldrb.w	r8, [r4]
 809082e:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8090832:	d17a      	bne.n	809092a <_tzset_unlocked_r+0x276>
 8090834:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8090838:	e9cd 6301 	strd	r6, r3, [sp, #4]
 809083c:	ab09      	add	r3, sp, #36	; 0x24
 809083e:	9300      	str	r3, [sp, #0]
 8090840:	4620      	mov	r0, r4
 8090842:	4633      	mov	r3, r6
 8090844:	4958      	ldr	r1, [pc, #352]	; (80909a8 <_tzset_unlocked_r+0x2f4>)
 8090846:	9603      	str	r6, [sp, #12]
 8090848:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 809084c:	f7fa f9ea 	bl	808ac24 <siscanf>
 8090850:	2803      	cmp	r0, #3
 8090852:	f47f af49 	bne.w	80906e8 <_tzset_unlocked_r+0x34>
 8090856:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 809085a:	1e4b      	subs	r3, r1, #1
 809085c:	2b0b      	cmp	r3, #11
 809085e:	f63f af43 	bhi.w	80906e8 <_tzset_unlocked_r+0x34>
 8090862:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8090866:	1e53      	subs	r3, r2, #1
 8090868:	2b04      	cmp	r3, #4
 809086a:	f63f af3d 	bhi.w	80906e8 <_tzset_unlocked_r+0x34>
 809086e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8090872:	2b06      	cmp	r3, #6
 8090874:	f63f af38 	bhi.w	80906e8 <_tzset_unlocked_r+0x34>
 8090878:	e9c7 1203 	strd	r1, r2, [r7, #12]
 809087c:	f887 8008 	strb.w	r8, [r7, #8]
 8090880:	617b      	str	r3, [r7, #20]
 8090882:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8090884:	eb04 0803 	add.w	r8, r4, r3
 8090888:	2302      	movs	r3, #2
 809088a:	f8ad 301c 	strh.w	r3, [sp, #28]
 809088e:	2300      	movs	r3, #0
 8090890:	f8ad 301e 	strh.w	r3, [sp, #30]
 8090894:	f8ad 3020 	strh.w	r3, [sp, #32]
 8090898:	930a      	str	r3, [sp, #40]	; 0x28
 809089a:	f898 3000 	ldrb.w	r3, [r8]
 809089e:	2b2f      	cmp	r3, #47	; 0x2f
 80908a0:	d109      	bne.n	80908b6 <_tzset_unlocked_r+0x202>
 80908a2:	4633      	mov	r3, r6
 80908a4:	4640      	mov	r0, r8
 80908a6:	e9cd a602 	strd	sl, r6, [sp, #8]
 80908aa:	e9cd b600 	strd	fp, r6, [sp]
 80908ae:	493f      	ldr	r1, [pc, #252]	; (80909ac <_tzset_unlocked_r+0x2f8>)
 80908b0:	aa07      	add	r2, sp, #28
 80908b2:	f7fa f9b7 	bl	808ac24 <siscanf>
 80908b6:	213c      	movs	r1, #60	; 0x3c
 80908b8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80908bc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80908c0:	3728      	adds	r7, #40	; 0x28
 80908c2:	fb01 2203 	mla	r2, r1, r3, r2
 80908c6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80908ca:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80908ce:	fb01 2303 	mla	r3, r1, r3, r2
 80908d2:	f847 3c10 	str.w	r3, [r7, #-16]
 80908d6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80908d8:	4444      	add	r4, r8
 80908da:	f1b9 0f00 	cmp.w	r9, #0
 80908de:	d021      	beq.n	8090924 <_tzset_unlocked_r+0x270>
 80908e0:	6868      	ldr	r0, [r5, #4]
 80908e2:	f7ff fe2d 	bl	8090540 <__tzcalc_limits>
 80908e6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80908e8:	4b28      	ldr	r3, [pc, #160]	; (809098c <_tzset_unlocked_r+0x2d8>)
 80908ea:	601a      	str	r2, [r3, #0]
 80908ec:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80908ee:	1a9b      	subs	r3, r3, r2
 80908f0:	bf18      	it	ne
 80908f2:	2301      	movne	r3, #1
 80908f4:	4a27      	ldr	r2, [pc, #156]	; (8090994 <_tzset_unlocked_r+0x2e0>)
 80908f6:	6013      	str	r3, [r2, #0]
 80908f8:	e6f6      	b.n	80906e8 <_tzset_unlocked_r+0x34>
 80908fa:	2b2b      	cmp	r3, #43	; 0x2b
 80908fc:	f04f 0701 	mov.w	r7, #1
 8090900:	bf08      	it	eq
 8090902:	3401      	addeq	r4, #1
 8090904:	e770      	b.n	80907e8 <_tzset_unlocked_r+0x134>
 8090906:	213c      	movs	r1, #60	; 0x3c
 8090908:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 809090c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8090910:	fb01 2203 	mla	r2, r1, r3, r2
 8090914:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8090918:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 809091c:	fb01 2303 	mla	r3, r1, r3, r2
 8090920:	435f      	muls	r7, r3
 8090922:	e778      	b.n	8090816 <_tzset_unlocked_r+0x162>
 8090924:	f04f 0901 	mov.w	r9, #1
 8090928:	e77b      	b.n	8090822 <_tzset_unlocked_r+0x16e>
 809092a:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 809092e:	bf0a      	itet	eq
 8090930:	4643      	moveq	r3, r8
 8090932:	2344      	movne	r3, #68	; 0x44
 8090934:	3401      	addeq	r4, #1
 8090936:	220a      	movs	r2, #10
 8090938:	4620      	mov	r0, r4
 809093a:	a90b      	add	r1, sp, #44	; 0x2c
 809093c:	9305      	str	r3, [sp, #20]
 809093e:	f7ff fdeb 	bl	8090518 <strtoul>
 8090942:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8090946:	9b05      	ldr	r3, [sp, #20]
 8090948:	45a0      	cmp	r8, r4
 809094a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 809094e:	d114      	bne.n	809097a <_tzset_unlocked_r+0x2c6>
 8090950:	234d      	movs	r3, #77	; 0x4d
 8090952:	f1b9 0f00 	cmp.w	r9, #0
 8090956:	d107      	bne.n	8090968 <_tzset_unlocked_r+0x2b4>
 8090958:	2103      	movs	r1, #3
 809095a:	722b      	strb	r3, [r5, #8]
 809095c:	2302      	movs	r3, #2
 809095e:	f8c5 9014 	str.w	r9, [r5, #20]
 8090962:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8090966:	e78f      	b.n	8090888 <_tzset_unlocked_r+0x1d4>
 8090968:	220b      	movs	r2, #11
 809096a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 809096e:	2301      	movs	r3, #1
 8090970:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8090974:	2300      	movs	r3, #0
 8090976:	63eb      	str	r3, [r5, #60]	; 0x3c
 8090978:	e786      	b.n	8090888 <_tzset_unlocked_r+0x1d4>
 809097a:	b280      	uxth	r0, r0
 809097c:	723b      	strb	r3, [r7, #8]
 809097e:	6178      	str	r0, [r7, #20]
 8090980:	e782      	b.n	8090888 <_tzset_unlocked_r+0x1d4>
 8090982:	bf00      	nop
 8090984:	0809482c 	.word	0x0809482c
 8090988:	200013d0 	.word	0x200013d0
 809098c:	200013d8 	.word	0x200013d8
 8090990:	0809482f 	.word	0x0809482f
 8090994:	200013d4 	.word	0x200013d4
 8090998:	2000014c 	.word	0x2000014c
 809099c:	200013c3 	.word	0x200013c3
 80909a0:	08094833 	.word	0x08094833
 80909a4:	08094856 	.word	0x08094856
 80909a8:	08094842 	.word	0x08094842
 80909ac:	08094855 	.word	0x08094855
 80909b0:	200013b8 	.word	0x200013b8

080909b4 <abs>:
 80909b4:	2800      	cmp	r0, #0
 80909b6:	bfb8      	it	lt
 80909b8:	4240      	neglt	r0, r0
 80909ba:	4770      	bx	lr

080909bc <rshift>:
 80909bc:	6903      	ldr	r3, [r0, #16]
 80909be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80909c2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80909c6:	f100 0414 	add.w	r4, r0, #20
 80909ca:	ea4f 1261 	mov.w	r2, r1, asr #5
 80909ce:	dd46      	ble.n	8090a5e <rshift+0xa2>
 80909d0:	f011 011f 	ands.w	r1, r1, #31
 80909d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80909d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80909dc:	d10c      	bne.n	80909f8 <rshift+0x3c>
 80909de:	4629      	mov	r1, r5
 80909e0:	f100 0710 	add.w	r7, r0, #16
 80909e4:	42b1      	cmp	r1, r6
 80909e6:	d335      	bcc.n	8090a54 <rshift+0x98>
 80909e8:	1a9b      	subs	r3, r3, r2
 80909ea:	009b      	lsls	r3, r3, #2
 80909ec:	1eea      	subs	r2, r5, #3
 80909ee:	4296      	cmp	r6, r2
 80909f0:	bf38      	it	cc
 80909f2:	2300      	movcc	r3, #0
 80909f4:	4423      	add	r3, r4
 80909f6:	e015      	b.n	8090a24 <rshift+0x68>
 80909f8:	46a1      	mov	r9, r4
 80909fa:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80909fe:	f1c1 0820 	rsb	r8, r1, #32
 8090a02:	40cf      	lsrs	r7, r1
 8090a04:	f105 0e04 	add.w	lr, r5, #4
 8090a08:	4576      	cmp	r6, lr
 8090a0a:	46f4      	mov	ip, lr
 8090a0c:	d816      	bhi.n	8090a3c <rshift+0x80>
 8090a0e:	1a9b      	subs	r3, r3, r2
 8090a10:	009a      	lsls	r2, r3, #2
 8090a12:	3a04      	subs	r2, #4
 8090a14:	3501      	adds	r5, #1
 8090a16:	42ae      	cmp	r6, r5
 8090a18:	bf38      	it	cc
 8090a1a:	2200      	movcc	r2, #0
 8090a1c:	18a3      	adds	r3, r4, r2
 8090a1e:	50a7      	str	r7, [r4, r2]
 8090a20:	b107      	cbz	r7, 8090a24 <rshift+0x68>
 8090a22:	3304      	adds	r3, #4
 8090a24:	42a3      	cmp	r3, r4
 8090a26:	eba3 0204 	sub.w	r2, r3, r4
 8090a2a:	bf08      	it	eq
 8090a2c:	2300      	moveq	r3, #0
 8090a2e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8090a32:	6102      	str	r2, [r0, #16]
 8090a34:	bf08      	it	eq
 8090a36:	6143      	streq	r3, [r0, #20]
 8090a38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8090a3c:	f8dc c000 	ldr.w	ip, [ip]
 8090a40:	fa0c fc08 	lsl.w	ip, ip, r8
 8090a44:	ea4c 0707 	orr.w	r7, ip, r7
 8090a48:	f849 7b04 	str.w	r7, [r9], #4
 8090a4c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8090a50:	40cf      	lsrs	r7, r1
 8090a52:	e7d9      	b.n	8090a08 <rshift+0x4c>
 8090a54:	f851 cb04 	ldr.w	ip, [r1], #4
 8090a58:	f847 cf04 	str.w	ip, [r7, #4]!
 8090a5c:	e7c2      	b.n	80909e4 <rshift+0x28>
 8090a5e:	4623      	mov	r3, r4
 8090a60:	e7e0      	b.n	8090a24 <rshift+0x68>

08090a62 <__hexdig_fun>:
 8090a62:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8090a66:	2b09      	cmp	r3, #9
 8090a68:	d802      	bhi.n	8090a70 <__hexdig_fun+0xe>
 8090a6a:	3820      	subs	r0, #32
 8090a6c:	b2c0      	uxtb	r0, r0
 8090a6e:	4770      	bx	lr
 8090a70:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8090a74:	2b05      	cmp	r3, #5
 8090a76:	d801      	bhi.n	8090a7c <__hexdig_fun+0x1a>
 8090a78:	3847      	subs	r0, #71	; 0x47
 8090a7a:	e7f7      	b.n	8090a6c <__hexdig_fun+0xa>
 8090a7c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8090a80:	2b05      	cmp	r3, #5
 8090a82:	d801      	bhi.n	8090a88 <__hexdig_fun+0x26>
 8090a84:	3827      	subs	r0, #39	; 0x27
 8090a86:	e7f1      	b.n	8090a6c <__hexdig_fun+0xa>
 8090a88:	2000      	movs	r0, #0
 8090a8a:	4770      	bx	lr

08090a8c <__gethex>:
 8090a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8090a90:	b08b      	sub	sp, #44	; 0x2c
 8090a92:	9306      	str	r3, [sp, #24]
 8090a94:	4bba      	ldr	r3, [pc, #744]	; (8090d80 <__gethex+0x2f4>)
 8090a96:	9002      	str	r0, [sp, #8]
 8090a98:	681b      	ldr	r3, [r3, #0]
 8090a9a:	468b      	mov	fp, r1
 8090a9c:	4618      	mov	r0, r3
 8090a9e:	4690      	mov	r8, r2
 8090aa0:	9303      	str	r3, [sp, #12]
 8090aa2:	f7fe fda7 	bl	808f5f4 <strlen>
 8090aa6:	4682      	mov	sl, r0
 8090aa8:	9b03      	ldr	r3, [sp, #12]
 8090aaa:	f8db 2000 	ldr.w	r2, [fp]
 8090aae:	4403      	add	r3, r0
 8090ab0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8090ab4:	9307      	str	r3, [sp, #28]
 8090ab6:	1c93      	adds	r3, r2, #2
 8090ab8:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8090abc:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8090ac0:	32fe      	adds	r2, #254	; 0xfe
 8090ac2:	18d1      	adds	r1, r2, r3
 8090ac4:	461f      	mov	r7, r3
 8090ac6:	f813 0b01 	ldrb.w	r0, [r3], #1
 8090aca:	9101      	str	r1, [sp, #4]
 8090acc:	2830      	cmp	r0, #48	; 0x30
 8090ace:	d0f8      	beq.n	8090ac2 <__gethex+0x36>
 8090ad0:	f7ff ffc7 	bl	8090a62 <__hexdig_fun>
 8090ad4:	4604      	mov	r4, r0
 8090ad6:	2800      	cmp	r0, #0
 8090ad8:	d13a      	bne.n	8090b50 <__gethex+0xc4>
 8090ada:	4652      	mov	r2, sl
 8090adc:	4638      	mov	r0, r7
 8090ade:	9903      	ldr	r1, [sp, #12]
 8090ae0:	f7fe fd90 	bl	808f604 <strncmp>
 8090ae4:	4605      	mov	r5, r0
 8090ae6:	2800      	cmp	r0, #0
 8090ae8:	d166      	bne.n	8090bb8 <__gethex+0x12c>
 8090aea:	f817 000a 	ldrb.w	r0, [r7, sl]
 8090aee:	eb07 060a 	add.w	r6, r7, sl
 8090af2:	f7ff ffb6 	bl	8090a62 <__hexdig_fun>
 8090af6:	2800      	cmp	r0, #0
 8090af8:	d060      	beq.n	8090bbc <__gethex+0x130>
 8090afa:	4633      	mov	r3, r6
 8090afc:	7818      	ldrb	r0, [r3, #0]
 8090afe:	461f      	mov	r7, r3
 8090b00:	2830      	cmp	r0, #48	; 0x30
 8090b02:	f103 0301 	add.w	r3, r3, #1
 8090b06:	d0f9      	beq.n	8090afc <__gethex+0x70>
 8090b08:	f7ff ffab 	bl	8090a62 <__hexdig_fun>
 8090b0c:	2301      	movs	r3, #1
 8090b0e:	fab0 f480 	clz	r4, r0
 8090b12:	4635      	mov	r5, r6
 8090b14:	0964      	lsrs	r4, r4, #5
 8090b16:	9301      	str	r3, [sp, #4]
 8090b18:	463a      	mov	r2, r7
 8090b1a:	4616      	mov	r6, r2
 8090b1c:	7830      	ldrb	r0, [r6, #0]
 8090b1e:	3201      	adds	r2, #1
 8090b20:	f7ff ff9f 	bl	8090a62 <__hexdig_fun>
 8090b24:	2800      	cmp	r0, #0
 8090b26:	d1f8      	bne.n	8090b1a <__gethex+0x8e>
 8090b28:	4652      	mov	r2, sl
 8090b2a:	4630      	mov	r0, r6
 8090b2c:	9903      	ldr	r1, [sp, #12]
 8090b2e:	f7fe fd69 	bl	808f604 <strncmp>
 8090b32:	b980      	cbnz	r0, 8090b56 <__gethex+0xca>
 8090b34:	b94d      	cbnz	r5, 8090b4a <__gethex+0xbe>
 8090b36:	eb06 050a 	add.w	r5, r6, sl
 8090b3a:	462a      	mov	r2, r5
 8090b3c:	4616      	mov	r6, r2
 8090b3e:	7830      	ldrb	r0, [r6, #0]
 8090b40:	3201      	adds	r2, #1
 8090b42:	f7ff ff8e 	bl	8090a62 <__hexdig_fun>
 8090b46:	2800      	cmp	r0, #0
 8090b48:	d1f8      	bne.n	8090b3c <__gethex+0xb0>
 8090b4a:	1bad      	subs	r5, r5, r6
 8090b4c:	00ad      	lsls	r5, r5, #2
 8090b4e:	e004      	b.n	8090b5a <__gethex+0xce>
 8090b50:	2400      	movs	r4, #0
 8090b52:	4625      	mov	r5, r4
 8090b54:	e7e0      	b.n	8090b18 <__gethex+0x8c>
 8090b56:	2d00      	cmp	r5, #0
 8090b58:	d1f7      	bne.n	8090b4a <__gethex+0xbe>
 8090b5a:	7833      	ldrb	r3, [r6, #0]
 8090b5c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8090b60:	2b50      	cmp	r3, #80	; 0x50
 8090b62:	d139      	bne.n	8090bd8 <__gethex+0x14c>
 8090b64:	7873      	ldrb	r3, [r6, #1]
 8090b66:	2b2b      	cmp	r3, #43	; 0x2b
 8090b68:	d02a      	beq.n	8090bc0 <__gethex+0x134>
 8090b6a:	2b2d      	cmp	r3, #45	; 0x2d
 8090b6c:	d02c      	beq.n	8090bc8 <__gethex+0x13c>
 8090b6e:	f04f 0900 	mov.w	r9, #0
 8090b72:	1c71      	adds	r1, r6, #1
 8090b74:	7808      	ldrb	r0, [r1, #0]
 8090b76:	f7ff ff74 	bl	8090a62 <__hexdig_fun>
 8090b7a:	1e43      	subs	r3, r0, #1
 8090b7c:	b2db      	uxtb	r3, r3
 8090b7e:	2b18      	cmp	r3, #24
 8090b80:	d82a      	bhi.n	8090bd8 <__gethex+0x14c>
 8090b82:	f1a0 0210 	sub.w	r2, r0, #16
 8090b86:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8090b8a:	f7ff ff6a 	bl	8090a62 <__hexdig_fun>
 8090b8e:	1e43      	subs	r3, r0, #1
 8090b90:	b2db      	uxtb	r3, r3
 8090b92:	2b18      	cmp	r3, #24
 8090b94:	d91b      	bls.n	8090bce <__gethex+0x142>
 8090b96:	f1b9 0f00 	cmp.w	r9, #0
 8090b9a:	d000      	beq.n	8090b9e <__gethex+0x112>
 8090b9c:	4252      	negs	r2, r2
 8090b9e:	4415      	add	r5, r2
 8090ba0:	f8cb 1000 	str.w	r1, [fp]
 8090ba4:	b1d4      	cbz	r4, 8090bdc <__gethex+0x150>
 8090ba6:	9b01      	ldr	r3, [sp, #4]
 8090ba8:	2b00      	cmp	r3, #0
 8090baa:	bf14      	ite	ne
 8090bac:	2700      	movne	r7, #0
 8090bae:	2706      	moveq	r7, #6
 8090bb0:	4638      	mov	r0, r7
 8090bb2:	b00b      	add	sp, #44	; 0x2c
 8090bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8090bb8:	463e      	mov	r6, r7
 8090bba:	4625      	mov	r5, r4
 8090bbc:	2401      	movs	r4, #1
 8090bbe:	e7cc      	b.n	8090b5a <__gethex+0xce>
 8090bc0:	f04f 0900 	mov.w	r9, #0
 8090bc4:	1cb1      	adds	r1, r6, #2
 8090bc6:	e7d5      	b.n	8090b74 <__gethex+0xe8>
 8090bc8:	f04f 0901 	mov.w	r9, #1
 8090bcc:	e7fa      	b.n	8090bc4 <__gethex+0x138>
 8090bce:	230a      	movs	r3, #10
 8090bd0:	fb03 0202 	mla	r2, r3, r2, r0
 8090bd4:	3a10      	subs	r2, #16
 8090bd6:	e7d6      	b.n	8090b86 <__gethex+0xfa>
 8090bd8:	4631      	mov	r1, r6
 8090bda:	e7e1      	b.n	8090ba0 <__gethex+0x114>
 8090bdc:	4621      	mov	r1, r4
 8090bde:	1bf3      	subs	r3, r6, r7
 8090be0:	3b01      	subs	r3, #1
 8090be2:	2b07      	cmp	r3, #7
 8090be4:	dc50      	bgt.n	8090c88 <__gethex+0x1fc>
 8090be6:	9802      	ldr	r0, [sp, #8]
 8090be8:	f000 fb4c 	bl	8091284 <_Balloc>
 8090bec:	f04f 0b00 	mov.w	fp, #0
 8090bf0:	4604      	mov	r4, r0
 8090bf2:	f100 0914 	add.w	r9, r0, #20
 8090bf6:	f1ca 0301 	rsb	r3, sl, #1
 8090bfa:	f8cd 9010 	str.w	r9, [sp, #16]
 8090bfe:	f8cd b004 	str.w	fp, [sp, #4]
 8090c02:	9308      	str	r3, [sp, #32]
 8090c04:	42b7      	cmp	r7, r6
 8090c06:	d342      	bcc.n	8090c8e <__gethex+0x202>
 8090c08:	9f04      	ldr	r7, [sp, #16]
 8090c0a:	9b01      	ldr	r3, [sp, #4]
 8090c0c:	f847 3b04 	str.w	r3, [r7], #4
 8090c10:	eba7 0709 	sub.w	r7, r7, r9
 8090c14:	10bf      	asrs	r7, r7, #2
 8090c16:	6127      	str	r7, [r4, #16]
 8090c18:	4618      	mov	r0, r3
 8090c1a:	f000 fbfa 	bl	8091412 <__hi0bits>
 8090c1e:	017f      	lsls	r7, r7, #5
 8090c20:	f8d8 6000 	ldr.w	r6, [r8]
 8090c24:	1a3f      	subs	r7, r7, r0
 8090c26:	42b7      	cmp	r7, r6
 8090c28:	dd65      	ble.n	8090cf6 <__gethex+0x26a>
 8090c2a:	1bbf      	subs	r7, r7, r6
 8090c2c:	4639      	mov	r1, r7
 8090c2e:	4620      	mov	r0, r4
 8090c30:	f000 ff40 	bl	8091ab4 <__any_on>
 8090c34:	4682      	mov	sl, r0
 8090c36:	b1a8      	cbz	r0, 8090c64 <__gethex+0x1d8>
 8090c38:	f04f 0a01 	mov.w	sl, #1
 8090c3c:	1e7b      	subs	r3, r7, #1
 8090c3e:	1159      	asrs	r1, r3, #5
 8090c40:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8090c44:	f003 021f 	and.w	r2, r3, #31
 8090c48:	fa0a f202 	lsl.w	r2, sl, r2
 8090c4c:	420a      	tst	r2, r1
 8090c4e:	d009      	beq.n	8090c64 <__gethex+0x1d8>
 8090c50:	4553      	cmp	r3, sl
 8090c52:	dd05      	ble.n	8090c60 <__gethex+0x1d4>
 8090c54:	4620      	mov	r0, r4
 8090c56:	1eb9      	subs	r1, r7, #2
 8090c58:	f000 ff2c 	bl	8091ab4 <__any_on>
 8090c5c:	2800      	cmp	r0, #0
 8090c5e:	d147      	bne.n	8090cf0 <__gethex+0x264>
 8090c60:	f04f 0a02 	mov.w	sl, #2
 8090c64:	4639      	mov	r1, r7
 8090c66:	4620      	mov	r0, r4
 8090c68:	f7ff fea8 	bl	80909bc <rshift>
 8090c6c:	443d      	add	r5, r7
 8090c6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8090c72:	42ab      	cmp	r3, r5
 8090c74:	da4d      	bge.n	8090d12 <__gethex+0x286>
 8090c76:	4621      	mov	r1, r4
 8090c78:	9802      	ldr	r0, [sp, #8]
 8090c7a:	f000 fb37 	bl	80912ec <_Bfree>
 8090c7e:	2300      	movs	r3, #0
 8090c80:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8090c82:	27a3      	movs	r7, #163	; 0xa3
 8090c84:	6013      	str	r3, [r2, #0]
 8090c86:	e793      	b.n	8090bb0 <__gethex+0x124>
 8090c88:	3101      	adds	r1, #1
 8090c8a:	105b      	asrs	r3, r3, #1
 8090c8c:	e7a9      	b.n	8090be2 <__gethex+0x156>
 8090c8e:	1e73      	subs	r3, r6, #1
 8090c90:	9a07      	ldr	r2, [sp, #28]
 8090c92:	9305      	str	r3, [sp, #20]
 8090c94:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8090c98:	4293      	cmp	r3, r2
 8090c9a:	d019      	beq.n	8090cd0 <__gethex+0x244>
 8090c9c:	f1bb 0f20 	cmp.w	fp, #32
 8090ca0:	d107      	bne.n	8090cb2 <__gethex+0x226>
 8090ca2:	9b04      	ldr	r3, [sp, #16]
 8090ca4:	9a01      	ldr	r2, [sp, #4]
 8090ca6:	f843 2b04 	str.w	r2, [r3], #4
 8090caa:	9304      	str	r3, [sp, #16]
 8090cac:	2300      	movs	r3, #0
 8090cae:	469b      	mov	fp, r3
 8090cb0:	9301      	str	r3, [sp, #4]
 8090cb2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8090cb6:	f7ff fed4 	bl	8090a62 <__hexdig_fun>
 8090cba:	9b01      	ldr	r3, [sp, #4]
 8090cbc:	f000 000f 	and.w	r0, r0, #15
 8090cc0:	fa00 f00b 	lsl.w	r0, r0, fp
 8090cc4:	4303      	orrs	r3, r0
 8090cc6:	9301      	str	r3, [sp, #4]
 8090cc8:	f10b 0b04 	add.w	fp, fp, #4
 8090ccc:	9b05      	ldr	r3, [sp, #20]
 8090cce:	e00d      	b.n	8090cec <__gethex+0x260>
 8090cd0:	9b05      	ldr	r3, [sp, #20]
 8090cd2:	9a08      	ldr	r2, [sp, #32]
 8090cd4:	4413      	add	r3, r2
 8090cd6:	42bb      	cmp	r3, r7
 8090cd8:	d3e0      	bcc.n	8090c9c <__gethex+0x210>
 8090cda:	4618      	mov	r0, r3
 8090cdc:	4652      	mov	r2, sl
 8090cde:	9903      	ldr	r1, [sp, #12]
 8090ce0:	9309      	str	r3, [sp, #36]	; 0x24
 8090ce2:	f7fe fc8f 	bl	808f604 <strncmp>
 8090ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8090ce8:	2800      	cmp	r0, #0
 8090cea:	d1d7      	bne.n	8090c9c <__gethex+0x210>
 8090cec:	461e      	mov	r6, r3
 8090cee:	e789      	b.n	8090c04 <__gethex+0x178>
 8090cf0:	f04f 0a03 	mov.w	sl, #3
 8090cf4:	e7b6      	b.n	8090c64 <__gethex+0x1d8>
 8090cf6:	da09      	bge.n	8090d0c <__gethex+0x280>
 8090cf8:	1bf7      	subs	r7, r6, r7
 8090cfa:	4621      	mov	r1, r4
 8090cfc:	463a      	mov	r2, r7
 8090cfe:	9802      	ldr	r0, [sp, #8]
 8090d00:	f000 fcc8 	bl	8091694 <__lshift>
 8090d04:	4604      	mov	r4, r0
 8090d06:	1bed      	subs	r5, r5, r7
 8090d08:	f100 0914 	add.w	r9, r0, #20
 8090d0c:	f04f 0a00 	mov.w	sl, #0
 8090d10:	e7ad      	b.n	8090c6e <__gethex+0x1e2>
 8090d12:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8090d16:	42a8      	cmp	r0, r5
 8090d18:	dd6e      	ble.n	8090df8 <__gethex+0x36c>
 8090d1a:	1b45      	subs	r5, r0, r5
 8090d1c:	42ae      	cmp	r6, r5
 8090d1e:	dc31      	bgt.n	8090d84 <__gethex+0x2f8>
 8090d20:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8090d24:	2b02      	cmp	r3, #2
 8090d26:	d022      	beq.n	8090d6e <__gethex+0x2e2>
 8090d28:	2b03      	cmp	r3, #3
 8090d2a:	d024      	beq.n	8090d76 <__gethex+0x2ea>
 8090d2c:	2b01      	cmp	r3, #1
 8090d2e:	d115      	bne.n	8090d5c <__gethex+0x2d0>
 8090d30:	42ae      	cmp	r6, r5
 8090d32:	d113      	bne.n	8090d5c <__gethex+0x2d0>
 8090d34:	2e01      	cmp	r6, #1
 8090d36:	d10b      	bne.n	8090d50 <__gethex+0x2c4>
 8090d38:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8090d3c:	9a06      	ldr	r2, [sp, #24]
 8090d3e:	2762      	movs	r7, #98	; 0x62
 8090d40:	6013      	str	r3, [r2, #0]
 8090d42:	2301      	movs	r3, #1
 8090d44:	6123      	str	r3, [r4, #16]
 8090d46:	f8c9 3000 	str.w	r3, [r9]
 8090d4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8090d4c:	601c      	str	r4, [r3, #0]
 8090d4e:	e72f      	b.n	8090bb0 <__gethex+0x124>
 8090d50:	4620      	mov	r0, r4
 8090d52:	1e71      	subs	r1, r6, #1
 8090d54:	f000 feae 	bl	8091ab4 <__any_on>
 8090d58:	2800      	cmp	r0, #0
 8090d5a:	d1ed      	bne.n	8090d38 <__gethex+0x2ac>
 8090d5c:	4621      	mov	r1, r4
 8090d5e:	9802      	ldr	r0, [sp, #8]
 8090d60:	f000 fac4 	bl	80912ec <_Bfree>
 8090d64:	2300      	movs	r3, #0
 8090d66:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8090d68:	2750      	movs	r7, #80	; 0x50
 8090d6a:	6013      	str	r3, [r2, #0]
 8090d6c:	e720      	b.n	8090bb0 <__gethex+0x124>
 8090d6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8090d70:	2b00      	cmp	r3, #0
 8090d72:	d1f3      	bne.n	8090d5c <__gethex+0x2d0>
 8090d74:	e7e0      	b.n	8090d38 <__gethex+0x2ac>
 8090d76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8090d78:	2b00      	cmp	r3, #0
 8090d7a:	d1dd      	bne.n	8090d38 <__gethex+0x2ac>
 8090d7c:	e7ee      	b.n	8090d5c <__gethex+0x2d0>
 8090d7e:	bf00      	nop
 8090d80:	0809496c 	.word	0x0809496c
 8090d84:	1e6f      	subs	r7, r5, #1
 8090d86:	f1ba 0f00 	cmp.w	sl, #0
 8090d8a:	d132      	bne.n	8090df2 <__gethex+0x366>
 8090d8c:	b127      	cbz	r7, 8090d98 <__gethex+0x30c>
 8090d8e:	4639      	mov	r1, r7
 8090d90:	4620      	mov	r0, r4
 8090d92:	f000 fe8f 	bl	8091ab4 <__any_on>
 8090d96:	4682      	mov	sl, r0
 8090d98:	2101      	movs	r1, #1
 8090d9a:	117b      	asrs	r3, r7, #5
 8090d9c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8090da0:	f007 071f 	and.w	r7, r7, #31
 8090da4:	fa01 f707 	lsl.w	r7, r1, r7
 8090da8:	421f      	tst	r7, r3
 8090daa:	f04f 0702 	mov.w	r7, #2
 8090dae:	4629      	mov	r1, r5
 8090db0:	4620      	mov	r0, r4
 8090db2:	bf18      	it	ne
 8090db4:	f04a 0a02 	orrne.w	sl, sl, #2
 8090db8:	1b76      	subs	r6, r6, r5
 8090dba:	f7ff fdff 	bl	80909bc <rshift>
 8090dbe:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8090dc2:	f1ba 0f00 	cmp.w	sl, #0
 8090dc6:	d048      	beq.n	8090e5a <__gethex+0x3ce>
 8090dc8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8090dcc:	2b02      	cmp	r3, #2
 8090dce:	d015      	beq.n	8090dfc <__gethex+0x370>
 8090dd0:	2b03      	cmp	r3, #3
 8090dd2:	d017      	beq.n	8090e04 <__gethex+0x378>
 8090dd4:	2b01      	cmp	r3, #1
 8090dd6:	d109      	bne.n	8090dec <__gethex+0x360>
 8090dd8:	f01a 0f02 	tst.w	sl, #2
 8090ddc:	d006      	beq.n	8090dec <__gethex+0x360>
 8090dde:	f8d9 0000 	ldr.w	r0, [r9]
 8090de2:	ea4a 0a00 	orr.w	sl, sl, r0
 8090de6:	f01a 0f01 	tst.w	sl, #1
 8090dea:	d10e      	bne.n	8090e0a <__gethex+0x37e>
 8090dec:	f047 0710 	orr.w	r7, r7, #16
 8090df0:	e033      	b.n	8090e5a <__gethex+0x3ce>
 8090df2:	f04f 0a01 	mov.w	sl, #1
 8090df6:	e7cf      	b.n	8090d98 <__gethex+0x30c>
 8090df8:	2701      	movs	r7, #1
 8090dfa:	e7e2      	b.n	8090dc2 <__gethex+0x336>
 8090dfc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8090dfe:	f1c3 0301 	rsb	r3, r3, #1
 8090e02:	9315      	str	r3, [sp, #84]	; 0x54
 8090e04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8090e06:	2b00      	cmp	r3, #0
 8090e08:	d0f0      	beq.n	8090dec <__gethex+0x360>
 8090e0a:	f04f 0c00 	mov.w	ip, #0
 8090e0e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8090e12:	f104 0314 	add.w	r3, r4, #20
 8090e16:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 8090e1a:	eb03 0189 	add.w	r1, r3, r9, lsl #2
 8090e1e:	4618      	mov	r0, r3
 8090e20:	f853 2b04 	ldr.w	r2, [r3], #4
 8090e24:	f1b2 3fff 	cmp.w	r2, #4294967295
 8090e28:	d01c      	beq.n	8090e64 <__gethex+0x3d8>
 8090e2a:	3201      	adds	r2, #1
 8090e2c:	6002      	str	r2, [r0, #0]
 8090e2e:	2f02      	cmp	r7, #2
 8090e30:	f104 0314 	add.w	r3, r4, #20
 8090e34:	d138      	bne.n	8090ea8 <__gethex+0x41c>
 8090e36:	f8d8 2000 	ldr.w	r2, [r8]
 8090e3a:	3a01      	subs	r2, #1
 8090e3c:	42b2      	cmp	r2, r6
 8090e3e:	d10a      	bne.n	8090e56 <__gethex+0x3ca>
 8090e40:	2201      	movs	r2, #1
 8090e42:	1171      	asrs	r1, r6, #5
 8090e44:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8090e48:	f006 061f 	and.w	r6, r6, #31
 8090e4c:	fa02 f606 	lsl.w	r6, r2, r6
 8090e50:	421e      	tst	r6, r3
 8090e52:	bf18      	it	ne
 8090e54:	4617      	movne	r7, r2
 8090e56:	f047 0720 	orr.w	r7, r7, #32
 8090e5a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8090e5c:	601c      	str	r4, [r3, #0]
 8090e5e:	9b06      	ldr	r3, [sp, #24]
 8090e60:	601d      	str	r5, [r3, #0]
 8090e62:	e6a5      	b.n	8090bb0 <__gethex+0x124>
 8090e64:	4299      	cmp	r1, r3
 8090e66:	f843 cc04 	str.w	ip, [r3, #-4]
 8090e6a:	d8d8      	bhi.n	8090e1e <__gethex+0x392>
 8090e6c:	68a3      	ldr	r3, [r4, #8]
 8090e6e:	4599      	cmp	r9, r3
 8090e70:	db12      	blt.n	8090e98 <__gethex+0x40c>
 8090e72:	6861      	ldr	r1, [r4, #4]
 8090e74:	9802      	ldr	r0, [sp, #8]
 8090e76:	3101      	adds	r1, #1
 8090e78:	f000 fa04 	bl	8091284 <_Balloc>
 8090e7c:	4682      	mov	sl, r0
 8090e7e:	6922      	ldr	r2, [r4, #16]
 8090e80:	f104 010c 	add.w	r1, r4, #12
 8090e84:	3202      	adds	r2, #2
 8090e86:	0092      	lsls	r2, r2, #2
 8090e88:	300c      	adds	r0, #12
 8090e8a:	f7fd fddb 	bl	808ea44 <memcpy>
 8090e8e:	4621      	mov	r1, r4
 8090e90:	9802      	ldr	r0, [sp, #8]
 8090e92:	f000 fa2b 	bl	80912ec <_Bfree>
 8090e96:	4654      	mov	r4, sl
 8090e98:	6923      	ldr	r3, [r4, #16]
 8090e9a:	1c5a      	adds	r2, r3, #1
 8090e9c:	6122      	str	r2, [r4, #16]
 8090e9e:	2201      	movs	r2, #1
 8090ea0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8090ea4:	615a      	str	r2, [r3, #20]
 8090ea6:	e7c2      	b.n	8090e2e <__gethex+0x3a2>
 8090ea8:	6922      	ldr	r2, [r4, #16]
 8090eaa:	454a      	cmp	r2, r9
 8090eac:	dd0b      	ble.n	8090ec6 <__gethex+0x43a>
 8090eae:	2101      	movs	r1, #1
 8090eb0:	4620      	mov	r0, r4
 8090eb2:	f7ff fd83 	bl	80909bc <rshift>
 8090eb6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8090eba:	3501      	adds	r5, #1
 8090ebc:	42ab      	cmp	r3, r5
 8090ebe:	f6ff aeda 	blt.w	8090c76 <__gethex+0x1ea>
 8090ec2:	2701      	movs	r7, #1
 8090ec4:	e7c7      	b.n	8090e56 <__gethex+0x3ca>
 8090ec6:	f016 061f 	ands.w	r6, r6, #31
 8090eca:	d0fa      	beq.n	8090ec2 <__gethex+0x436>
 8090ecc:	449b      	add	fp, r3
 8090ece:	f85b 0c04 	ldr.w	r0, [fp, #-4]
 8090ed2:	f000 fa9e 	bl	8091412 <__hi0bits>
 8090ed6:	f1c6 0620 	rsb	r6, r6, #32
 8090eda:	42b0      	cmp	r0, r6
 8090edc:	dbe7      	blt.n	8090eae <__gethex+0x422>
 8090ede:	e7f0      	b.n	8090ec2 <__gethex+0x436>

08090ee0 <L_shift>:
 8090ee0:	f1c2 0208 	rsb	r2, r2, #8
 8090ee4:	0092      	lsls	r2, r2, #2
 8090ee6:	b570      	push	{r4, r5, r6, lr}
 8090ee8:	f1c2 0620 	rsb	r6, r2, #32
 8090eec:	6843      	ldr	r3, [r0, #4]
 8090eee:	6804      	ldr	r4, [r0, #0]
 8090ef0:	fa03 f506 	lsl.w	r5, r3, r6
 8090ef4:	432c      	orrs	r4, r5
 8090ef6:	40d3      	lsrs	r3, r2
 8090ef8:	6004      	str	r4, [r0, #0]
 8090efa:	f840 3f04 	str.w	r3, [r0, #4]!
 8090efe:	4288      	cmp	r0, r1
 8090f00:	d3f4      	bcc.n	8090eec <L_shift+0xc>
 8090f02:	bd70      	pop	{r4, r5, r6, pc}

08090f04 <__match>:
 8090f04:	b530      	push	{r4, r5, lr}
 8090f06:	6803      	ldr	r3, [r0, #0]
 8090f08:	3301      	adds	r3, #1
 8090f0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8090f0e:	b914      	cbnz	r4, 8090f16 <__match+0x12>
 8090f10:	6003      	str	r3, [r0, #0]
 8090f12:	2001      	movs	r0, #1
 8090f14:	bd30      	pop	{r4, r5, pc}
 8090f16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8090f1a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8090f1e:	2d19      	cmp	r5, #25
 8090f20:	bf98      	it	ls
 8090f22:	3220      	addls	r2, #32
 8090f24:	42a2      	cmp	r2, r4
 8090f26:	d0f0      	beq.n	8090f0a <__match+0x6>
 8090f28:	2000      	movs	r0, #0
 8090f2a:	e7f3      	b.n	8090f14 <__match+0x10>

08090f2c <__hexnan>:
 8090f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8090f30:	2500      	movs	r5, #0
 8090f32:	680b      	ldr	r3, [r1, #0]
 8090f34:	4682      	mov	sl, r0
 8090f36:	115e      	asrs	r6, r3, #5
 8090f38:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8090f3c:	f013 031f 	ands.w	r3, r3, #31
 8090f40:	bf18      	it	ne
 8090f42:	3604      	addne	r6, #4
 8090f44:	1f37      	subs	r7, r6, #4
 8090f46:	4690      	mov	r8, r2
 8090f48:	46b9      	mov	r9, r7
 8090f4a:	463c      	mov	r4, r7
 8090f4c:	46ab      	mov	fp, r5
 8090f4e:	b087      	sub	sp, #28
 8090f50:	6801      	ldr	r1, [r0, #0]
 8090f52:	9301      	str	r3, [sp, #4]
 8090f54:	f846 5c04 	str.w	r5, [r6, #-4]
 8090f58:	9502      	str	r5, [sp, #8]
 8090f5a:	784a      	ldrb	r2, [r1, #1]
 8090f5c:	1c4b      	adds	r3, r1, #1
 8090f5e:	9303      	str	r3, [sp, #12]
 8090f60:	b342      	cbz	r2, 8090fb4 <__hexnan+0x88>
 8090f62:	4610      	mov	r0, r2
 8090f64:	9105      	str	r1, [sp, #20]
 8090f66:	9204      	str	r2, [sp, #16]
 8090f68:	f7ff fd7b 	bl	8090a62 <__hexdig_fun>
 8090f6c:	2800      	cmp	r0, #0
 8090f6e:	d14f      	bne.n	8091010 <__hexnan+0xe4>
 8090f70:	9a04      	ldr	r2, [sp, #16]
 8090f72:	9905      	ldr	r1, [sp, #20]
 8090f74:	2a20      	cmp	r2, #32
 8090f76:	d818      	bhi.n	8090faa <__hexnan+0x7e>
 8090f78:	9b02      	ldr	r3, [sp, #8]
 8090f7a:	459b      	cmp	fp, r3
 8090f7c:	dd13      	ble.n	8090fa6 <__hexnan+0x7a>
 8090f7e:	454c      	cmp	r4, r9
 8090f80:	d206      	bcs.n	8090f90 <__hexnan+0x64>
 8090f82:	2d07      	cmp	r5, #7
 8090f84:	dc04      	bgt.n	8090f90 <__hexnan+0x64>
 8090f86:	462a      	mov	r2, r5
 8090f88:	4649      	mov	r1, r9
 8090f8a:	4620      	mov	r0, r4
 8090f8c:	f7ff ffa8 	bl	8090ee0 <L_shift>
 8090f90:	4544      	cmp	r4, r8
 8090f92:	d950      	bls.n	8091036 <__hexnan+0x10a>
 8090f94:	2300      	movs	r3, #0
 8090f96:	f1a4 0904 	sub.w	r9, r4, #4
 8090f9a:	f844 3c04 	str.w	r3, [r4, #-4]
 8090f9e:	461d      	mov	r5, r3
 8090fa0:	464c      	mov	r4, r9
 8090fa2:	f8cd b008 	str.w	fp, [sp, #8]
 8090fa6:	9903      	ldr	r1, [sp, #12]
 8090fa8:	e7d7      	b.n	8090f5a <__hexnan+0x2e>
 8090faa:	2a29      	cmp	r2, #41	; 0x29
 8090fac:	d156      	bne.n	809105c <__hexnan+0x130>
 8090fae:	3102      	adds	r1, #2
 8090fb0:	f8ca 1000 	str.w	r1, [sl]
 8090fb4:	f1bb 0f00 	cmp.w	fp, #0
 8090fb8:	d050      	beq.n	809105c <__hexnan+0x130>
 8090fba:	454c      	cmp	r4, r9
 8090fbc:	d206      	bcs.n	8090fcc <__hexnan+0xa0>
 8090fbe:	2d07      	cmp	r5, #7
 8090fc0:	dc04      	bgt.n	8090fcc <__hexnan+0xa0>
 8090fc2:	462a      	mov	r2, r5
 8090fc4:	4649      	mov	r1, r9
 8090fc6:	4620      	mov	r0, r4
 8090fc8:	f7ff ff8a 	bl	8090ee0 <L_shift>
 8090fcc:	4544      	cmp	r4, r8
 8090fce:	d934      	bls.n	809103a <__hexnan+0x10e>
 8090fd0:	4623      	mov	r3, r4
 8090fd2:	f1a8 0204 	sub.w	r2, r8, #4
 8090fd6:	f853 1b04 	ldr.w	r1, [r3], #4
 8090fda:	429f      	cmp	r7, r3
 8090fdc:	f842 1f04 	str.w	r1, [r2, #4]!
 8090fe0:	d2f9      	bcs.n	8090fd6 <__hexnan+0xaa>
 8090fe2:	1b3b      	subs	r3, r7, r4
 8090fe4:	f023 0303 	bic.w	r3, r3, #3
 8090fe8:	3304      	adds	r3, #4
 8090fea:	3401      	adds	r4, #1
 8090fec:	3e03      	subs	r6, #3
 8090fee:	42b4      	cmp	r4, r6
 8090ff0:	bf88      	it	hi
 8090ff2:	2304      	movhi	r3, #4
 8090ff4:	2200      	movs	r2, #0
 8090ff6:	4443      	add	r3, r8
 8090ff8:	f843 2b04 	str.w	r2, [r3], #4
 8090ffc:	429f      	cmp	r7, r3
 8090ffe:	d2fb      	bcs.n	8090ff8 <__hexnan+0xcc>
 8091000:	683b      	ldr	r3, [r7, #0]
 8091002:	b91b      	cbnz	r3, 809100c <__hexnan+0xe0>
 8091004:	4547      	cmp	r7, r8
 8091006:	d127      	bne.n	8091058 <__hexnan+0x12c>
 8091008:	2301      	movs	r3, #1
 809100a:	603b      	str	r3, [r7, #0]
 809100c:	2005      	movs	r0, #5
 809100e:	e026      	b.n	809105e <__hexnan+0x132>
 8091010:	3501      	adds	r5, #1
 8091012:	2d08      	cmp	r5, #8
 8091014:	f10b 0b01 	add.w	fp, fp, #1
 8091018:	dd06      	ble.n	8091028 <__hexnan+0xfc>
 809101a:	4544      	cmp	r4, r8
 809101c:	d9c3      	bls.n	8090fa6 <__hexnan+0x7a>
 809101e:	2300      	movs	r3, #0
 8091020:	2501      	movs	r5, #1
 8091022:	f844 3c04 	str.w	r3, [r4, #-4]
 8091026:	3c04      	subs	r4, #4
 8091028:	6822      	ldr	r2, [r4, #0]
 809102a:	f000 000f 	and.w	r0, r0, #15
 809102e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8091032:	6022      	str	r2, [r4, #0]
 8091034:	e7b7      	b.n	8090fa6 <__hexnan+0x7a>
 8091036:	2508      	movs	r5, #8
 8091038:	e7b5      	b.n	8090fa6 <__hexnan+0x7a>
 809103a:	9b01      	ldr	r3, [sp, #4]
 809103c:	2b00      	cmp	r3, #0
 809103e:	d0df      	beq.n	8091000 <__hexnan+0xd4>
 8091040:	f04f 32ff 	mov.w	r2, #4294967295
 8091044:	f1c3 0320 	rsb	r3, r3, #32
 8091048:	fa22 f303 	lsr.w	r3, r2, r3
 809104c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8091050:	401a      	ands	r2, r3
 8091052:	f846 2c04 	str.w	r2, [r6, #-4]
 8091056:	e7d3      	b.n	8091000 <__hexnan+0xd4>
 8091058:	3f04      	subs	r7, #4
 809105a:	e7d1      	b.n	8091000 <__hexnan+0xd4>
 809105c:	2004      	movs	r0, #4
 809105e:	b007      	add	sp, #28
 8091060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08091064 <_findenv_r>:
 8091064:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8091068:	4607      	mov	r7, r0
 809106a:	4689      	mov	r9, r1
 809106c:	4616      	mov	r6, r2
 809106e:	f000 fd5d 	bl	8091b2c <__env_lock>
 8091072:	4b18      	ldr	r3, [pc, #96]	; (80910d4 <_findenv_r+0x70>)
 8091074:	681c      	ldr	r4, [r3, #0]
 8091076:	469a      	mov	sl, r3
 8091078:	b134      	cbz	r4, 8091088 <_findenv_r+0x24>
 809107a:	464b      	mov	r3, r9
 809107c:	4698      	mov	r8, r3
 809107e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8091082:	b139      	cbz	r1, 8091094 <_findenv_r+0x30>
 8091084:	293d      	cmp	r1, #61	; 0x3d
 8091086:	d1f9      	bne.n	809107c <_findenv_r+0x18>
 8091088:	4638      	mov	r0, r7
 809108a:	f000 fd55 	bl	8091b38 <__env_unlock>
 809108e:	2000      	movs	r0, #0
 8091090:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8091094:	eba8 0809 	sub.w	r8, r8, r9
 8091098:	46a3      	mov	fp, r4
 809109a:	f854 0b04 	ldr.w	r0, [r4], #4
 809109e:	2800      	cmp	r0, #0
 80910a0:	d0f2      	beq.n	8091088 <_findenv_r+0x24>
 80910a2:	4642      	mov	r2, r8
 80910a4:	4649      	mov	r1, r9
 80910a6:	f7fe faad 	bl	808f604 <strncmp>
 80910aa:	2800      	cmp	r0, #0
 80910ac:	d1f4      	bne.n	8091098 <_findenv_r+0x34>
 80910ae:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80910b2:	eb03 0508 	add.w	r5, r3, r8
 80910b6:	f813 3008 	ldrb.w	r3, [r3, r8]
 80910ba:	2b3d      	cmp	r3, #61	; 0x3d
 80910bc:	d1ec      	bne.n	8091098 <_findenv_r+0x34>
 80910be:	f8da 3000 	ldr.w	r3, [sl]
 80910c2:	4638      	mov	r0, r7
 80910c4:	ebab 0303 	sub.w	r3, fp, r3
 80910c8:	109b      	asrs	r3, r3, #2
 80910ca:	6033      	str	r3, [r6, #0]
 80910cc:	f000 fd34 	bl	8091b38 <__env_unlock>
 80910d0:	1c68      	adds	r0, r5, #1
 80910d2:	e7dd      	b.n	8091090 <_findenv_r+0x2c>
 80910d4:	20000320 	.word	0x20000320

080910d8 <_getenv_r>:
 80910d8:	b507      	push	{r0, r1, r2, lr}
 80910da:	aa01      	add	r2, sp, #4
 80910dc:	f7ff ffc2 	bl	8091064 <_findenv_r>
 80910e0:	b003      	add	sp, #12
 80910e2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080910e8 <__gettzinfo>:
 80910e8:	4800      	ldr	r0, [pc, #0]	; (80910ec <__gettzinfo+0x4>)
 80910ea:	4770      	bx	lr
 80910ec:	20000158 	.word	0x20000158

080910f0 <gmtime_r>:
 80910f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80910f4:	e9d0 6700 	ldrd	r6, r7, [r0]
 80910f8:	460c      	mov	r4, r1
 80910fa:	2300      	movs	r3, #0
 80910fc:	4630      	mov	r0, r6
 80910fe:	4639      	mov	r1, r7
 8091100:	4a4f      	ldr	r2, [pc, #316]	; (8091240 <gmtime_r+0x150>)
 8091102:	f7fd f93d 	bl	808e380 <__aeabi_ldivmod>
 8091106:	4639      	mov	r1, r7
 8091108:	4605      	mov	r5, r0
 809110a:	2300      	movs	r3, #0
 809110c:	4630      	mov	r0, r6
 809110e:	4a4c      	ldr	r2, [pc, #304]	; (8091240 <gmtime_r+0x150>)
 8091110:	f7fd f936 	bl	808e380 <__aeabi_ldivmod>
 8091114:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8091118:	2a00      	cmp	r2, #0
 809111a:	bfbc      	itt	lt
 809111c:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8091120:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8091124:	fbb2 f3f1 	udiv	r3, r2, r1
 8091128:	fb01 2213 	mls	r2, r1, r3, r2
 809112c:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8091130:	60a3      	str	r3, [r4, #8]
 8091132:	fbb2 f3f1 	udiv	r3, r2, r1
 8091136:	fb01 2213 	mls	r2, r1, r3, r2
 809113a:	6022      	str	r2, [r4, #0]
 809113c:	f04f 0207 	mov.w	r2, #7
 8091140:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8091144:	bfac      	ite	ge
 8091146:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 809114a:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 809114e:	6063      	str	r3, [r4, #4]
 8091150:	1cc3      	adds	r3, r0, #3
 8091152:	fb93 f2f2 	sdiv	r2, r3, r2
 8091156:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 809115a:	1a9b      	subs	r3, r3, r2
 809115c:	bf48      	it	mi
 809115e:	3307      	addmi	r3, #7
 8091160:	2800      	cmp	r0, #0
 8091162:	4938      	ldr	r1, [pc, #224]	; (8091244 <gmtime_r+0x154>)
 8091164:	61a3      	str	r3, [r4, #24]
 8091166:	bfbd      	ittte	lt
 8091168:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 809116c:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8091170:	fb93 f1f1 	sdivlt	r1, r3, r1
 8091174:	fb90 f1f1 	sdivge	r1, r0, r1
 8091178:	f648 62ac 	movw	r2, #36524	; 0x8eac
 809117c:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 8091180:	4b31      	ldr	r3, [pc, #196]	; (8091248 <gmtime_r+0x158>)
 8091182:	f240 176d 	movw	r7, #365	; 0x16d
 8091186:	fb03 0001 	mla	r0, r3, r1, r0
 809118a:	fbb0 f2f2 	udiv	r2, r0, r2
 809118e:	fbb0 f3fc 	udiv	r3, r0, ip
 8091192:	4402      	add	r2, r0
 8091194:	1ad2      	subs	r2, r2, r3
 8091196:	4b2d      	ldr	r3, [pc, #180]	; (809124c <gmtime_r+0x15c>)
 8091198:	2664      	movs	r6, #100	; 0x64
 809119a:	fbb0 f3f3 	udiv	r3, r0, r3
 809119e:	1ad3      	subs	r3, r2, r3
 80911a0:	fbb3 f5f7 	udiv	r5, r3, r7
 80911a4:	fbb3 f3fc 	udiv	r3, r3, ip
 80911a8:	fbb5 f2f6 	udiv	r2, r5, r6
 80911ac:	1ad3      	subs	r3, r2, r3
 80911ae:	4403      	add	r3, r0
 80911b0:	2099      	movs	r0, #153	; 0x99
 80911b2:	fb07 3315 	mls	r3, r7, r5, r3
 80911b6:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80911ba:	f10c 0c02 	add.w	ip, ip, #2
 80911be:	fbbc f7f0 	udiv	r7, ip, r0
 80911c2:	f04f 0805 	mov.w	r8, #5
 80911c6:	4378      	muls	r0, r7
 80911c8:	3002      	adds	r0, #2
 80911ca:	fbb0 f0f8 	udiv	r0, r0, r8
 80911ce:	f103 0e01 	add.w	lr, r3, #1
 80911d2:	ebae 0000 	sub.w	r0, lr, r0
 80911d6:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 80911da:	45f4      	cmp	ip, lr
 80911dc:	bf94      	ite	ls
 80911de:	f04f 0c02 	movls.w	ip, #2
 80911e2:	f06f 0c09 	mvnhi.w	ip, #9
 80911e6:	4467      	add	r7, ip
 80911e8:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 80911ec:	fb0c 5101 	mla	r1, ip, r1, r5
 80911f0:	2f01      	cmp	r7, #1
 80911f2:	bf98      	it	ls
 80911f4:	3101      	addls	r1, #1
 80911f6:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80911fa:	d30c      	bcc.n	8091216 <gmtime_r+0x126>
 80911fc:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8091200:	61e3      	str	r3, [r4, #28]
 8091202:	2300      	movs	r3, #0
 8091204:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 8091208:	60e0      	str	r0, [r4, #12]
 809120a:	e9c4 7104 	strd	r7, r1, [r4, #16]
 809120e:	4620      	mov	r0, r4
 8091210:	6223      	str	r3, [r4, #32]
 8091212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8091216:	f015 0f03 	tst.w	r5, #3
 809121a:	d102      	bne.n	8091222 <gmtime_r+0x132>
 809121c:	fb06 5212 	mls	r2, r6, r2, r5
 8091220:	b95a      	cbnz	r2, 809123a <gmtime_r+0x14a>
 8091222:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8091226:	fbb5 f2f6 	udiv	r2, r5, r6
 809122a:	fb06 5212 	mls	r2, r6, r2, r5
 809122e:	fab2 f282 	clz	r2, r2
 8091232:	0952      	lsrs	r2, r2, #5
 8091234:	333b      	adds	r3, #59	; 0x3b
 8091236:	4413      	add	r3, r2
 8091238:	e7e2      	b.n	8091200 <gmtime_r+0x110>
 809123a:	2201      	movs	r2, #1
 809123c:	e7fa      	b.n	8091234 <gmtime_r+0x144>
 809123e:	bf00      	nop
 8091240:	00015180 	.word	0x00015180
 8091244:	00023ab1 	.word	0x00023ab1
 8091248:	fffdc54f 	.word	0xfffdc54f
 809124c:	00023ab0 	.word	0x00023ab0

08091250 <labs>:
 8091250:	2800      	cmp	r0, #0
 8091252:	bfb8      	it	lt
 8091254:	4240      	neglt	r0, r0
 8091256:	4770      	bx	lr

08091258 <__retarget_lock_acquire>:
 8091258:	4770      	bx	lr

0809125a <__retarget_lock_acquire_recursive>:
 809125a:	4770      	bx	lr

0809125c <__retarget_lock_release>:
 809125c:	4770      	bx	lr

0809125e <__retarget_lock_release_recursive>:
 809125e:	4770      	bx	lr

08091260 <__ascii_mbtowc>:
 8091260:	b082      	sub	sp, #8
 8091262:	b901      	cbnz	r1, 8091266 <__ascii_mbtowc+0x6>
 8091264:	a901      	add	r1, sp, #4
 8091266:	b142      	cbz	r2, 809127a <__ascii_mbtowc+0x1a>
 8091268:	b14b      	cbz	r3, 809127e <__ascii_mbtowc+0x1e>
 809126a:	7813      	ldrb	r3, [r2, #0]
 809126c:	600b      	str	r3, [r1, #0]
 809126e:	7812      	ldrb	r2, [r2, #0]
 8091270:	1e10      	subs	r0, r2, #0
 8091272:	bf18      	it	ne
 8091274:	2001      	movne	r0, #1
 8091276:	b002      	add	sp, #8
 8091278:	4770      	bx	lr
 809127a:	4610      	mov	r0, r2
 809127c:	e7fb      	b.n	8091276 <__ascii_mbtowc+0x16>
 809127e:	f06f 0001 	mvn.w	r0, #1
 8091282:	e7f8      	b.n	8091276 <__ascii_mbtowc+0x16>

08091284 <_Balloc>:
 8091284:	b570      	push	{r4, r5, r6, lr}
 8091286:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8091288:	4604      	mov	r4, r0
 809128a:	460d      	mov	r5, r1
 809128c:	b93e      	cbnz	r6, 809129e <_Balloc+0x1a>
 809128e:	2010      	movs	r0, #16
 8091290:	f7f9 fc98 	bl	808abc4 <malloc>
 8091294:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8091298:	6260      	str	r0, [r4, #36]	; 0x24
 809129a:	6006      	str	r6, [r0, #0]
 809129c:	60c6      	str	r6, [r0, #12]
 809129e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80912a0:	68f3      	ldr	r3, [r6, #12]
 80912a2:	b183      	cbz	r3, 80912c6 <_Balloc+0x42>
 80912a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80912a6:	68db      	ldr	r3, [r3, #12]
 80912a8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80912ac:	b9b8      	cbnz	r0, 80912de <_Balloc+0x5a>
 80912ae:	2101      	movs	r1, #1
 80912b0:	fa01 f605 	lsl.w	r6, r1, r5
 80912b4:	1d72      	adds	r2, r6, #5
 80912b6:	4620      	mov	r0, r4
 80912b8:	0092      	lsls	r2, r2, #2
 80912ba:	f000 fc1c 	bl	8091af6 <_calloc_r>
 80912be:	b160      	cbz	r0, 80912da <_Balloc+0x56>
 80912c0:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80912c4:	e00e      	b.n	80912e4 <_Balloc+0x60>
 80912c6:	2221      	movs	r2, #33	; 0x21
 80912c8:	2104      	movs	r1, #4
 80912ca:	4620      	mov	r0, r4
 80912cc:	f000 fc13 	bl	8091af6 <_calloc_r>
 80912d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80912d2:	60f0      	str	r0, [r6, #12]
 80912d4:	68db      	ldr	r3, [r3, #12]
 80912d6:	2b00      	cmp	r3, #0
 80912d8:	d1e4      	bne.n	80912a4 <_Balloc+0x20>
 80912da:	2000      	movs	r0, #0
 80912dc:	bd70      	pop	{r4, r5, r6, pc}
 80912de:	6802      	ldr	r2, [r0, #0]
 80912e0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80912e4:	2300      	movs	r3, #0
 80912e6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80912ea:	e7f7      	b.n	80912dc <_Balloc+0x58>

080912ec <_Bfree>:
 80912ec:	b570      	push	{r4, r5, r6, lr}
 80912ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80912f0:	4605      	mov	r5, r0
 80912f2:	460c      	mov	r4, r1
 80912f4:	b93e      	cbnz	r6, 8091306 <_Bfree+0x1a>
 80912f6:	2010      	movs	r0, #16
 80912f8:	f7f9 fc64 	bl	808abc4 <malloc>
 80912fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8091300:	6268      	str	r0, [r5, #36]	; 0x24
 8091302:	6006      	str	r6, [r0, #0]
 8091304:	60c6      	str	r6, [r0, #12]
 8091306:	b13c      	cbz	r4, 8091318 <_Bfree+0x2c>
 8091308:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 809130a:	6862      	ldr	r2, [r4, #4]
 809130c:	68db      	ldr	r3, [r3, #12]
 809130e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8091312:	6021      	str	r1, [r4, #0]
 8091314:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8091318:	bd70      	pop	{r4, r5, r6, pc}

0809131a <__multadd>:
 809131a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 809131e:	4698      	mov	r8, r3
 8091320:	460c      	mov	r4, r1
 8091322:	2300      	movs	r3, #0
 8091324:	690e      	ldr	r6, [r1, #16]
 8091326:	4607      	mov	r7, r0
 8091328:	f101 0014 	add.w	r0, r1, #20
 809132c:	6805      	ldr	r5, [r0, #0]
 809132e:	3301      	adds	r3, #1
 8091330:	b2a9      	uxth	r1, r5
 8091332:	fb02 8101 	mla	r1, r2, r1, r8
 8091336:	0c2d      	lsrs	r5, r5, #16
 8091338:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 809133c:	fb02 c505 	mla	r5, r2, r5, ip
 8091340:	b289      	uxth	r1, r1
 8091342:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8091346:	429e      	cmp	r6, r3
 8091348:	ea4f 4815 	mov.w	r8, r5, lsr #16
 809134c:	f840 1b04 	str.w	r1, [r0], #4
 8091350:	dcec      	bgt.n	809132c <__multadd+0x12>
 8091352:	f1b8 0f00 	cmp.w	r8, #0
 8091356:	d01b      	beq.n	8091390 <__multadd+0x76>
 8091358:	68a3      	ldr	r3, [r4, #8]
 809135a:	42b3      	cmp	r3, r6
 809135c:	dc12      	bgt.n	8091384 <__multadd+0x6a>
 809135e:	6861      	ldr	r1, [r4, #4]
 8091360:	4638      	mov	r0, r7
 8091362:	3101      	adds	r1, #1
 8091364:	f7ff ff8e 	bl	8091284 <_Balloc>
 8091368:	4605      	mov	r5, r0
 809136a:	6922      	ldr	r2, [r4, #16]
 809136c:	f104 010c 	add.w	r1, r4, #12
 8091370:	3202      	adds	r2, #2
 8091372:	0092      	lsls	r2, r2, #2
 8091374:	300c      	adds	r0, #12
 8091376:	f7fd fb65 	bl	808ea44 <memcpy>
 809137a:	4621      	mov	r1, r4
 809137c:	4638      	mov	r0, r7
 809137e:	f7ff ffb5 	bl	80912ec <_Bfree>
 8091382:	462c      	mov	r4, r5
 8091384:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8091388:	3601      	adds	r6, #1
 809138a:	f8c3 8014 	str.w	r8, [r3, #20]
 809138e:	6126      	str	r6, [r4, #16]
 8091390:	4620      	mov	r0, r4
 8091392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08091396 <__s2b>:
 8091396:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 809139a:	4615      	mov	r5, r2
 809139c:	2209      	movs	r2, #9
 809139e:	461f      	mov	r7, r3
 80913a0:	3308      	adds	r3, #8
 80913a2:	460c      	mov	r4, r1
 80913a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80913a8:	4606      	mov	r6, r0
 80913aa:	2201      	movs	r2, #1
 80913ac:	2100      	movs	r1, #0
 80913ae:	429a      	cmp	r2, r3
 80913b0:	db20      	blt.n	80913f4 <__s2b+0x5e>
 80913b2:	4630      	mov	r0, r6
 80913b4:	f7ff ff66 	bl	8091284 <_Balloc>
 80913b8:	9b08      	ldr	r3, [sp, #32]
 80913ba:	2d09      	cmp	r5, #9
 80913bc:	6143      	str	r3, [r0, #20]
 80913be:	f04f 0301 	mov.w	r3, #1
 80913c2:	6103      	str	r3, [r0, #16]
 80913c4:	dd19      	ble.n	80913fa <__s2b+0x64>
 80913c6:	f104 0909 	add.w	r9, r4, #9
 80913ca:	46c8      	mov	r8, r9
 80913cc:	442c      	add	r4, r5
 80913ce:	f818 3b01 	ldrb.w	r3, [r8], #1
 80913d2:	4601      	mov	r1, r0
 80913d4:	220a      	movs	r2, #10
 80913d6:	4630      	mov	r0, r6
 80913d8:	3b30      	subs	r3, #48	; 0x30
 80913da:	f7ff ff9e 	bl	809131a <__multadd>
 80913de:	45a0      	cmp	r8, r4
 80913e0:	d1f5      	bne.n	80913ce <__s2b+0x38>
 80913e2:	f1a5 0408 	sub.w	r4, r5, #8
 80913e6:	444c      	add	r4, r9
 80913e8:	1b2d      	subs	r5, r5, r4
 80913ea:	1963      	adds	r3, r4, r5
 80913ec:	42bb      	cmp	r3, r7
 80913ee:	db07      	blt.n	8091400 <__s2b+0x6a>
 80913f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80913f4:	0052      	lsls	r2, r2, #1
 80913f6:	3101      	adds	r1, #1
 80913f8:	e7d9      	b.n	80913ae <__s2b+0x18>
 80913fa:	2509      	movs	r5, #9
 80913fc:	340a      	adds	r4, #10
 80913fe:	e7f3      	b.n	80913e8 <__s2b+0x52>
 8091400:	f814 3b01 	ldrb.w	r3, [r4], #1
 8091404:	4601      	mov	r1, r0
 8091406:	220a      	movs	r2, #10
 8091408:	4630      	mov	r0, r6
 809140a:	3b30      	subs	r3, #48	; 0x30
 809140c:	f7ff ff85 	bl	809131a <__multadd>
 8091410:	e7eb      	b.n	80913ea <__s2b+0x54>

08091412 <__hi0bits>:
 8091412:	0c02      	lsrs	r2, r0, #16
 8091414:	0412      	lsls	r2, r2, #16
 8091416:	4603      	mov	r3, r0
 8091418:	b9ca      	cbnz	r2, 809144e <__hi0bits+0x3c>
 809141a:	0403      	lsls	r3, r0, #16
 809141c:	2010      	movs	r0, #16
 809141e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8091422:	bf04      	itt	eq
 8091424:	021b      	lsleq	r3, r3, #8
 8091426:	3008      	addeq	r0, #8
 8091428:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 809142c:	bf04      	itt	eq
 809142e:	011b      	lsleq	r3, r3, #4
 8091430:	3004      	addeq	r0, #4
 8091432:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8091436:	bf04      	itt	eq
 8091438:	009b      	lsleq	r3, r3, #2
 809143a:	3002      	addeq	r0, #2
 809143c:	2b00      	cmp	r3, #0
 809143e:	db05      	blt.n	809144c <__hi0bits+0x3a>
 8091440:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8091444:	f100 0001 	add.w	r0, r0, #1
 8091448:	bf08      	it	eq
 809144a:	2020      	moveq	r0, #32
 809144c:	4770      	bx	lr
 809144e:	2000      	movs	r0, #0
 8091450:	e7e5      	b.n	809141e <__hi0bits+0xc>

08091452 <__lo0bits>:
 8091452:	6803      	ldr	r3, [r0, #0]
 8091454:	4602      	mov	r2, r0
 8091456:	f013 0007 	ands.w	r0, r3, #7
 809145a:	d00b      	beq.n	8091474 <__lo0bits+0x22>
 809145c:	07d9      	lsls	r1, r3, #31
 809145e:	d422      	bmi.n	80914a6 <__lo0bits+0x54>
 8091460:	0798      	lsls	r0, r3, #30
 8091462:	bf49      	itett	mi
 8091464:	085b      	lsrmi	r3, r3, #1
 8091466:	089b      	lsrpl	r3, r3, #2
 8091468:	2001      	movmi	r0, #1
 809146a:	6013      	strmi	r3, [r2, #0]
 809146c:	bf5c      	itt	pl
 809146e:	2002      	movpl	r0, #2
 8091470:	6013      	strpl	r3, [r2, #0]
 8091472:	4770      	bx	lr
 8091474:	b299      	uxth	r1, r3
 8091476:	b909      	cbnz	r1, 809147c <__lo0bits+0x2a>
 8091478:	2010      	movs	r0, #16
 809147a:	0c1b      	lsrs	r3, r3, #16
 809147c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8091480:	bf04      	itt	eq
 8091482:	0a1b      	lsreq	r3, r3, #8
 8091484:	3008      	addeq	r0, #8
 8091486:	0719      	lsls	r1, r3, #28
 8091488:	bf04      	itt	eq
 809148a:	091b      	lsreq	r3, r3, #4
 809148c:	3004      	addeq	r0, #4
 809148e:	0799      	lsls	r1, r3, #30
 8091490:	bf04      	itt	eq
 8091492:	089b      	lsreq	r3, r3, #2
 8091494:	3002      	addeq	r0, #2
 8091496:	07d9      	lsls	r1, r3, #31
 8091498:	d403      	bmi.n	80914a2 <__lo0bits+0x50>
 809149a:	085b      	lsrs	r3, r3, #1
 809149c:	f100 0001 	add.w	r0, r0, #1
 80914a0:	d003      	beq.n	80914aa <__lo0bits+0x58>
 80914a2:	6013      	str	r3, [r2, #0]
 80914a4:	4770      	bx	lr
 80914a6:	2000      	movs	r0, #0
 80914a8:	4770      	bx	lr
 80914aa:	2020      	movs	r0, #32
 80914ac:	4770      	bx	lr

080914ae <__i2b>:
 80914ae:	b510      	push	{r4, lr}
 80914b0:	460c      	mov	r4, r1
 80914b2:	2101      	movs	r1, #1
 80914b4:	f7ff fee6 	bl	8091284 <_Balloc>
 80914b8:	2201      	movs	r2, #1
 80914ba:	6144      	str	r4, [r0, #20]
 80914bc:	6102      	str	r2, [r0, #16]
 80914be:	bd10      	pop	{r4, pc}

080914c0 <__multiply>:
 80914c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80914c4:	4615      	mov	r5, r2
 80914c6:	690a      	ldr	r2, [r1, #16]
 80914c8:	692b      	ldr	r3, [r5, #16]
 80914ca:	460c      	mov	r4, r1
 80914cc:	429a      	cmp	r2, r3
 80914ce:	bfbe      	ittt	lt
 80914d0:	460b      	movlt	r3, r1
 80914d2:	462c      	movlt	r4, r5
 80914d4:	461d      	movlt	r5, r3
 80914d6:	6927      	ldr	r7, [r4, #16]
 80914d8:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80914dc:	68a3      	ldr	r3, [r4, #8]
 80914de:	6861      	ldr	r1, [r4, #4]
 80914e0:	eb07 0609 	add.w	r6, r7, r9
 80914e4:	42b3      	cmp	r3, r6
 80914e6:	bfb8      	it	lt
 80914e8:	3101      	addlt	r1, #1
 80914ea:	b085      	sub	sp, #20
 80914ec:	f7ff feca 	bl	8091284 <_Balloc>
 80914f0:	f100 0114 	add.w	r1, r0, #20
 80914f4:	460b      	mov	r3, r1
 80914f6:	2200      	movs	r2, #0
 80914f8:	eb01 0886 	add.w	r8, r1, r6, lsl #2
 80914fc:	4543      	cmp	r3, r8
 80914fe:	d31d      	bcc.n	809153c <__multiply+0x7c>
 8091500:	f104 0314 	add.w	r3, r4, #20
 8091504:	f105 0214 	add.w	r2, r5, #20
 8091508:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 809150c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8091510:	9302      	str	r3, [sp, #8]
 8091512:	1b3b      	subs	r3, r7, r4
 8091514:	3b15      	subs	r3, #21
 8091516:	f023 0303 	bic.w	r3, r3, #3
 809151a:	3304      	adds	r3, #4
 809151c:	f104 0515 	add.w	r5, r4, #21
 8091520:	42af      	cmp	r7, r5
 8091522:	bf38      	it	cc
 8091524:	2304      	movcc	r3, #4
 8091526:	9301      	str	r3, [sp, #4]
 8091528:	9b02      	ldr	r3, [sp, #8]
 809152a:	9203      	str	r2, [sp, #12]
 809152c:	4293      	cmp	r3, r2
 809152e:	d808      	bhi.n	8091542 <__multiply+0x82>
 8091530:	2e00      	cmp	r6, #0
 8091532:	dc5a      	bgt.n	80915ea <__multiply+0x12a>
 8091534:	6106      	str	r6, [r0, #16]
 8091536:	b005      	add	sp, #20
 8091538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 809153c:	f843 2b04 	str.w	r2, [r3], #4
 8091540:	e7dc      	b.n	80914fc <__multiply+0x3c>
 8091542:	f8b2 a000 	ldrh.w	sl, [r2]
 8091546:	f1ba 0f00 	cmp.w	sl, #0
 809154a:	d024      	beq.n	8091596 <__multiply+0xd6>
 809154c:	4689      	mov	r9, r1
 809154e:	f04f 0c00 	mov.w	ip, #0
 8091552:	f104 0e14 	add.w	lr, r4, #20
 8091556:	f85e 5b04 	ldr.w	r5, [lr], #4
 809155a:	f8d9 b000 	ldr.w	fp, [r9]
 809155e:	b2ab      	uxth	r3, r5
 8091560:	fa1f fb8b 	uxth.w	fp, fp
 8091564:	fb0a b303 	mla	r3, sl, r3, fp
 8091568:	ea4f 4b15 	mov.w	fp, r5, lsr #16
 809156c:	f8d9 5000 	ldr.w	r5, [r9]
 8091570:	4463      	add	r3, ip
 8091572:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8091576:	fb0a c50b 	mla	r5, sl, fp, ip
 809157a:	eb05 4513 	add.w	r5, r5, r3, lsr #16
 809157e:	b29b      	uxth	r3, r3
 8091580:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8091584:	4577      	cmp	r7, lr
 8091586:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 809158a:	f849 3b04 	str.w	r3, [r9], #4
 809158e:	d8e2      	bhi.n	8091556 <__multiply+0x96>
 8091590:	9b01      	ldr	r3, [sp, #4]
 8091592:	f841 c003 	str.w	ip, [r1, r3]
 8091596:	9b03      	ldr	r3, [sp, #12]
 8091598:	3204      	adds	r2, #4
 809159a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 809159e:	f1b9 0f00 	cmp.w	r9, #0
 80915a2:	d020      	beq.n	80915e6 <__multiply+0x126>
 80915a4:	468e      	mov	lr, r1
 80915a6:	f04f 0a00 	mov.w	sl, #0
 80915aa:	680b      	ldr	r3, [r1, #0]
 80915ac:	f104 0c14 	add.w	ip, r4, #20
 80915b0:	f8bc 5000 	ldrh.w	r5, [ip]
 80915b4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80915b8:	b29b      	uxth	r3, r3
 80915ba:	fb09 b505 	mla	r5, r9, r5, fp
 80915be:	44aa      	add	sl, r5
 80915c0:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80915c4:	f84e 3b04 	str.w	r3, [lr], #4
 80915c8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80915cc:	f8be 5000 	ldrh.w	r5, [lr]
 80915d0:	0c1b      	lsrs	r3, r3, #16
 80915d2:	fb09 5303 	mla	r3, r9, r3, r5
 80915d6:	4567      	cmp	r7, ip
 80915d8:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80915dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80915e0:	d8e6      	bhi.n	80915b0 <__multiply+0xf0>
 80915e2:	9d01      	ldr	r5, [sp, #4]
 80915e4:	514b      	str	r3, [r1, r5]
 80915e6:	3104      	adds	r1, #4
 80915e8:	e79e      	b.n	8091528 <__multiply+0x68>
 80915ea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80915ee:	2b00      	cmp	r3, #0
 80915f0:	d1a0      	bne.n	8091534 <__multiply+0x74>
 80915f2:	3e01      	subs	r6, #1
 80915f4:	e79c      	b.n	8091530 <__multiply+0x70>
	...

080915f8 <__pow5mult>:
 80915f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80915fc:	4615      	mov	r5, r2
 80915fe:	f012 0203 	ands.w	r2, r2, #3
 8091602:	4606      	mov	r6, r0
 8091604:	460f      	mov	r7, r1
 8091606:	d007      	beq.n	8091618 <__pow5mult+0x20>
 8091608:	4c21      	ldr	r4, [pc, #132]	; (8091690 <__pow5mult+0x98>)
 809160a:	3a01      	subs	r2, #1
 809160c:	2300      	movs	r3, #0
 809160e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8091612:	f7ff fe82 	bl	809131a <__multadd>
 8091616:	4607      	mov	r7, r0
 8091618:	10ad      	asrs	r5, r5, #2
 809161a:	d035      	beq.n	8091688 <__pow5mult+0x90>
 809161c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 809161e:	b93c      	cbnz	r4, 8091630 <__pow5mult+0x38>
 8091620:	2010      	movs	r0, #16
 8091622:	f7f9 facf 	bl	808abc4 <malloc>
 8091626:	e9c0 4401 	strd	r4, r4, [r0, #4]
 809162a:	6270      	str	r0, [r6, #36]	; 0x24
 809162c:	6004      	str	r4, [r0, #0]
 809162e:	60c4      	str	r4, [r0, #12]
 8091630:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8091634:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8091638:	b94c      	cbnz	r4, 809164e <__pow5mult+0x56>
 809163a:	f240 2171 	movw	r1, #625	; 0x271
 809163e:	4630      	mov	r0, r6
 8091640:	f7ff ff35 	bl	80914ae <__i2b>
 8091644:	2300      	movs	r3, #0
 8091646:	4604      	mov	r4, r0
 8091648:	f8c8 0008 	str.w	r0, [r8, #8]
 809164c:	6003      	str	r3, [r0, #0]
 809164e:	f04f 0900 	mov.w	r9, #0
 8091652:	07eb      	lsls	r3, r5, #31
 8091654:	d50a      	bpl.n	809166c <__pow5mult+0x74>
 8091656:	4639      	mov	r1, r7
 8091658:	4622      	mov	r2, r4
 809165a:	4630      	mov	r0, r6
 809165c:	f7ff ff30 	bl	80914c0 <__multiply>
 8091660:	4680      	mov	r8, r0
 8091662:	4639      	mov	r1, r7
 8091664:	4630      	mov	r0, r6
 8091666:	f7ff fe41 	bl	80912ec <_Bfree>
 809166a:	4647      	mov	r7, r8
 809166c:	106d      	asrs	r5, r5, #1
 809166e:	d00b      	beq.n	8091688 <__pow5mult+0x90>
 8091670:	6820      	ldr	r0, [r4, #0]
 8091672:	b938      	cbnz	r0, 8091684 <__pow5mult+0x8c>
 8091674:	4622      	mov	r2, r4
 8091676:	4621      	mov	r1, r4
 8091678:	4630      	mov	r0, r6
 809167a:	f7ff ff21 	bl	80914c0 <__multiply>
 809167e:	6020      	str	r0, [r4, #0]
 8091680:	f8c0 9000 	str.w	r9, [r0]
 8091684:	4604      	mov	r4, r0
 8091686:	e7e4      	b.n	8091652 <__pow5mult+0x5a>
 8091688:	4638      	mov	r0, r7
 809168a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 809168e:	bf00      	nop
 8091690:	08094a70 	.word	0x08094a70

08091694 <__lshift>:
 8091694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8091698:	460c      	mov	r4, r1
 809169a:	4607      	mov	r7, r0
 809169c:	4691      	mov	r9, r2
 809169e:	6923      	ldr	r3, [r4, #16]
 80916a0:	6849      	ldr	r1, [r1, #4]
 80916a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80916a6:	68a3      	ldr	r3, [r4, #8]
 80916a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80916ac:	f108 0601 	add.w	r6, r8, #1
 80916b0:	42b3      	cmp	r3, r6
 80916b2:	db3f      	blt.n	8091734 <__lshift+0xa0>
 80916b4:	4638      	mov	r0, r7
 80916b6:	f7ff fde5 	bl	8091284 <_Balloc>
 80916ba:	2300      	movs	r3, #0
 80916bc:	4605      	mov	r5, r0
 80916be:	f100 0114 	add.w	r1, r0, #20
 80916c2:	f100 0210 	add.w	r2, r0, #16
 80916c6:	4618      	mov	r0, r3
 80916c8:	4553      	cmp	r3, sl
 80916ca:	db36      	blt.n	809173a <__lshift+0xa6>
 80916cc:	6920      	ldr	r0, [r4, #16]
 80916ce:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80916d2:	f104 0314 	add.w	r3, r4, #20
 80916d6:	f019 091f 	ands.w	r9, r9, #31
 80916da:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80916de:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80916e2:	d02e      	beq.n	8091742 <__lshift+0xae>
 80916e4:	468a      	mov	sl, r1
 80916e6:	2200      	movs	r2, #0
 80916e8:	f1c9 0e20 	rsb	lr, r9, #32
 80916ec:	6818      	ldr	r0, [r3, #0]
 80916ee:	fa00 f009 	lsl.w	r0, r0, r9
 80916f2:	4302      	orrs	r2, r0
 80916f4:	f84a 2b04 	str.w	r2, [sl], #4
 80916f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80916fc:	459c      	cmp	ip, r3
 80916fe:	fa22 f20e 	lsr.w	r2, r2, lr
 8091702:	d8f3      	bhi.n	80916ec <__lshift+0x58>
 8091704:	ebac 0304 	sub.w	r3, ip, r4
 8091708:	3b15      	subs	r3, #21
 809170a:	f023 0303 	bic.w	r3, r3, #3
 809170e:	3304      	adds	r3, #4
 8091710:	f104 0015 	add.w	r0, r4, #21
 8091714:	4560      	cmp	r0, ip
 8091716:	bf88      	it	hi
 8091718:	2304      	movhi	r3, #4
 809171a:	50ca      	str	r2, [r1, r3]
 809171c:	b10a      	cbz	r2, 8091722 <__lshift+0x8e>
 809171e:	f108 0602 	add.w	r6, r8, #2
 8091722:	3e01      	subs	r6, #1
 8091724:	4638      	mov	r0, r7
 8091726:	4621      	mov	r1, r4
 8091728:	612e      	str	r6, [r5, #16]
 809172a:	f7ff fddf 	bl	80912ec <_Bfree>
 809172e:	4628      	mov	r0, r5
 8091730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8091734:	3101      	adds	r1, #1
 8091736:	005b      	lsls	r3, r3, #1
 8091738:	e7ba      	b.n	80916b0 <__lshift+0x1c>
 809173a:	f842 0f04 	str.w	r0, [r2, #4]!
 809173e:	3301      	adds	r3, #1
 8091740:	e7c2      	b.n	80916c8 <__lshift+0x34>
 8091742:	3904      	subs	r1, #4
 8091744:	f853 2b04 	ldr.w	r2, [r3], #4
 8091748:	459c      	cmp	ip, r3
 809174a:	f841 2f04 	str.w	r2, [r1, #4]!
 809174e:	d8f9      	bhi.n	8091744 <__lshift+0xb0>
 8091750:	e7e7      	b.n	8091722 <__lshift+0x8e>

08091752 <__mcmp>:
 8091752:	4603      	mov	r3, r0
 8091754:	690a      	ldr	r2, [r1, #16]
 8091756:	6900      	ldr	r0, [r0, #16]
 8091758:	b530      	push	{r4, r5, lr}
 809175a:	1a80      	subs	r0, r0, r2
 809175c:	d10d      	bne.n	809177a <__mcmp+0x28>
 809175e:	3314      	adds	r3, #20
 8091760:	3114      	adds	r1, #20
 8091762:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8091766:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 809176a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 809176e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8091772:	4295      	cmp	r5, r2
 8091774:	d002      	beq.n	809177c <__mcmp+0x2a>
 8091776:	d304      	bcc.n	8091782 <__mcmp+0x30>
 8091778:	2001      	movs	r0, #1
 809177a:	bd30      	pop	{r4, r5, pc}
 809177c:	42a3      	cmp	r3, r4
 809177e:	d3f4      	bcc.n	809176a <__mcmp+0x18>
 8091780:	e7fb      	b.n	809177a <__mcmp+0x28>
 8091782:	f04f 30ff 	mov.w	r0, #4294967295
 8091786:	e7f8      	b.n	809177a <__mcmp+0x28>

08091788 <__mdiff>:
 8091788:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 809178c:	460c      	mov	r4, r1
 809178e:	4606      	mov	r6, r0
 8091790:	4611      	mov	r1, r2
 8091792:	4620      	mov	r0, r4
 8091794:	4692      	mov	sl, r2
 8091796:	f7ff ffdc 	bl	8091752 <__mcmp>
 809179a:	1e05      	subs	r5, r0, #0
 809179c:	d108      	bne.n	80917b0 <__mdiff+0x28>
 809179e:	4629      	mov	r1, r5
 80917a0:	4630      	mov	r0, r6
 80917a2:	f7ff fd6f 	bl	8091284 <_Balloc>
 80917a6:	2301      	movs	r3, #1
 80917a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80917ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80917b0:	bfa4      	itt	ge
 80917b2:	4653      	movge	r3, sl
 80917b4:	46a2      	movge	sl, r4
 80917b6:	4630      	mov	r0, r6
 80917b8:	f8da 1004 	ldr.w	r1, [sl, #4]
 80917bc:	bfa6      	itte	ge
 80917be:	461c      	movge	r4, r3
 80917c0:	2500      	movge	r5, #0
 80917c2:	2501      	movlt	r5, #1
 80917c4:	f7ff fd5e 	bl	8091284 <_Balloc>
 80917c8:	f100 0814 	add.w	r8, r0, #20
 80917cc:	f8da 7010 	ldr.w	r7, [sl, #16]
 80917d0:	60c5      	str	r5, [r0, #12]
 80917d2:	f10a 0210 	add.w	r2, sl, #16
 80917d6:	f10a 0514 	add.w	r5, sl, #20
 80917da:	f04f 0c00 	mov.w	ip, #0
 80917de:	46c2      	mov	sl, r8
 80917e0:	6926      	ldr	r6, [r4, #16]
 80917e2:	f104 0914 	add.w	r9, r4, #20
 80917e6:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80917ea:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80917ee:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80917f2:	f859 3b04 	ldr.w	r3, [r9], #4
 80917f6:	fa1f f18b 	uxth.w	r1, fp
 80917fa:	4461      	add	r1, ip
 80917fc:	fa1f fc83 	uxth.w	ip, r3
 8091800:	0c1b      	lsrs	r3, r3, #16
 8091802:	eba1 010c 	sub.w	r1, r1, ip
 8091806:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 809180a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 809180e:	b289      	uxth	r1, r1
 8091810:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8091814:	454e      	cmp	r6, r9
 8091816:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 809181a:	f84a 3b04 	str.w	r3, [sl], #4
 809181e:	d8e6      	bhi.n	80917ee <__mdiff+0x66>
 8091820:	1b33      	subs	r3, r6, r4
 8091822:	3b15      	subs	r3, #21
 8091824:	f023 0303 	bic.w	r3, r3, #3
 8091828:	3415      	adds	r4, #21
 809182a:	3304      	adds	r3, #4
 809182c:	42a6      	cmp	r6, r4
 809182e:	bf38      	it	cc
 8091830:	2304      	movcc	r3, #4
 8091832:	441d      	add	r5, r3
 8091834:	4443      	add	r3, r8
 8091836:	461e      	mov	r6, r3
 8091838:	462c      	mov	r4, r5
 809183a:	4574      	cmp	r4, lr
 809183c:	d30e      	bcc.n	809185c <__mdiff+0xd4>
 809183e:	f10e 0203 	add.w	r2, lr, #3
 8091842:	1b52      	subs	r2, r2, r5
 8091844:	f022 0203 	bic.w	r2, r2, #3
 8091848:	3d03      	subs	r5, #3
 809184a:	45ae      	cmp	lr, r5
 809184c:	bf38      	it	cc
 809184e:	2200      	movcc	r2, #0
 8091850:	441a      	add	r2, r3
 8091852:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8091856:	b18b      	cbz	r3, 809187c <__mdiff+0xf4>
 8091858:	6107      	str	r7, [r0, #16]
 809185a:	e7a7      	b.n	80917ac <__mdiff+0x24>
 809185c:	f854 8b04 	ldr.w	r8, [r4], #4
 8091860:	fa1f f288 	uxth.w	r2, r8
 8091864:	4462      	add	r2, ip
 8091866:	1411      	asrs	r1, r2, #16
 8091868:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 809186c:	b292      	uxth	r2, r2
 809186e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8091872:	ea4f 4c21 	mov.w	ip, r1, asr #16
 8091876:	f846 2b04 	str.w	r2, [r6], #4
 809187a:	e7de      	b.n	809183a <__mdiff+0xb2>
 809187c:	3f01      	subs	r7, #1
 809187e:	e7e8      	b.n	8091852 <__mdiff+0xca>

08091880 <__ulp>:
 8091880:	4b11      	ldr	r3, [pc, #68]	; (80918c8 <__ulp+0x48>)
 8091882:	400b      	ands	r3, r1
 8091884:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8091888:	2b00      	cmp	r3, #0
 809188a:	dd02      	ble.n	8091892 <__ulp+0x12>
 809188c:	2000      	movs	r0, #0
 809188e:	4619      	mov	r1, r3
 8091890:	4770      	bx	lr
 8091892:	425b      	negs	r3, r3
 8091894:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8091898:	f04f 0000 	mov.w	r0, #0
 809189c:	f04f 0100 	mov.w	r1, #0
 80918a0:	ea4f 5223 	mov.w	r2, r3, asr #20
 80918a4:	da04      	bge.n	80918b0 <__ulp+0x30>
 80918a6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80918aa:	fa43 f102 	asr.w	r1, r3, r2
 80918ae:	4770      	bx	lr
 80918b0:	f1a2 0314 	sub.w	r3, r2, #20
 80918b4:	2b1e      	cmp	r3, #30
 80918b6:	bfd6      	itet	le
 80918b8:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80918bc:	2301      	movgt	r3, #1
 80918be:	fa22 f303 	lsrle.w	r3, r2, r3
 80918c2:	4618      	mov	r0, r3
 80918c4:	4770      	bx	lr
 80918c6:	bf00      	nop
 80918c8:	7ff00000 	.word	0x7ff00000

080918cc <__b2d>:
 80918cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80918d0:	6907      	ldr	r7, [r0, #16]
 80918d2:	f100 0914 	add.w	r9, r0, #20
 80918d6:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80918da:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80918de:	f1a7 0804 	sub.w	r8, r7, #4
 80918e2:	4630      	mov	r0, r6
 80918e4:	f7ff fd95 	bl	8091412 <__hi0bits>
 80918e8:	f1c0 0320 	rsb	r3, r0, #32
 80918ec:	280a      	cmp	r0, #10
 80918ee:	600b      	str	r3, [r1, #0]
 80918f0:	491f      	ldr	r1, [pc, #124]	; (8091970 <__b2d+0xa4>)
 80918f2:	dc17      	bgt.n	8091924 <__b2d+0x58>
 80918f4:	45c1      	cmp	r9, r8
 80918f6:	bf28      	it	cs
 80918f8:	2200      	movcs	r2, #0
 80918fa:	f1c0 0c0b 	rsb	ip, r0, #11
 80918fe:	fa26 f30c 	lsr.w	r3, r6, ip
 8091902:	bf38      	it	cc
 8091904:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8091908:	ea43 0501 	orr.w	r5, r3, r1
 809190c:	f100 0315 	add.w	r3, r0, #21
 8091910:	fa06 f303 	lsl.w	r3, r6, r3
 8091914:	fa22 f20c 	lsr.w	r2, r2, ip
 8091918:	ea43 0402 	orr.w	r4, r3, r2
 809191c:	4620      	mov	r0, r4
 809191e:	4629      	mov	r1, r5
 8091920:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8091924:	45c1      	cmp	r9, r8
 8091926:	bf2e      	itee	cs
 8091928:	2200      	movcs	r2, #0
 809192a:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 809192e:	f1a7 0808 	subcc.w	r8, r7, #8
 8091932:	f1b0 030b 	subs.w	r3, r0, #11
 8091936:	d016      	beq.n	8091966 <__b2d+0x9a>
 8091938:	f1c3 0720 	rsb	r7, r3, #32
 809193c:	fa22 f107 	lsr.w	r1, r2, r7
 8091940:	45c8      	cmp	r8, r9
 8091942:	fa06 f603 	lsl.w	r6, r6, r3
 8091946:	ea46 0601 	orr.w	r6, r6, r1
 809194a:	bf94      	ite	ls
 809194c:	2100      	movls	r1, #0
 809194e:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8091952:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8091956:	fa02 f003 	lsl.w	r0, r2, r3
 809195a:	40f9      	lsrs	r1, r7
 809195c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8091960:	ea40 0401 	orr.w	r4, r0, r1
 8091964:	e7da      	b.n	809191c <__b2d+0x50>
 8091966:	4614      	mov	r4, r2
 8091968:	ea46 0501 	orr.w	r5, r6, r1
 809196c:	e7d6      	b.n	809191c <__b2d+0x50>
 809196e:	bf00      	nop
 8091970:	3ff00000 	.word	0x3ff00000

08091974 <__d2b>:
 8091974:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8091978:	461c      	mov	r4, r3
 809197a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 809197e:	2101      	movs	r1, #1
 8091980:	4690      	mov	r8, r2
 8091982:	f7ff fc7f 	bl	8091284 <_Balloc>
 8091986:	f3c4 0313 	ubfx	r3, r4, #0, #20
 809198a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 809198e:	4607      	mov	r7, r0
 8091990:	bb2c      	cbnz	r4, 80919de <__d2b+0x6a>
 8091992:	9301      	str	r3, [sp, #4]
 8091994:	f1b8 0300 	subs.w	r3, r8, #0
 8091998:	d026      	beq.n	80919e8 <__d2b+0x74>
 809199a:	4668      	mov	r0, sp
 809199c:	9300      	str	r3, [sp, #0]
 809199e:	f7ff fd58 	bl	8091452 <__lo0bits>
 80919a2:	9900      	ldr	r1, [sp, #0]
 80919a4:	b1f0      	cbz	r0, 80919e4 <__d2b+0x70>
 80919a6:	9a01      	ldr	r2, [sp, #4]
 80919a8:	f1c0 0320 	rsb	r3, r0, #32
 80919ac:	fa02 f303 	lsl.w	r3, r2, r3
 80919b0:	430b      	orrs	r3, r1
 80919b2:	40c2      	lsrs	r2, r0
 80919b4:	617b      	str	r3, [r7, #20]
 80919b6:	9201      	str	r2, [sp, #4]
 80919b8:	9b01      	ldr	r3, [sp, #4]
 80919ba:	2b00      	cmp	r3, #0
 80919bc:	bf14      	ite	ne
 80919be:	2102      	movne	r1, #2
 80919c0:	2101      	moveq	r1, #1
 80919c2:	61bb      	str	r3, [r7, #24]
 80919c4:	6139      	str	r1, [r7, #16]
 80919c6:	b1c4      	cbz	r4, 80919fa <__d2b+0x86>
 80919c8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80919cc:	4404      	add	r4, r0
 80919ce:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80919d2:	6034      	str	r4, [r6, #0]
 80919d4:	6028      	str	r0, [r5, #0]
 80919d6:	4638      	mov	r0, r7
 80919d8:	b002      	add	sp, #8
 80919da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80919de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80919e2:	e7d6      	b.n	8091992 <__d2b+0x1e>
 80919e4:	6179      	str	r1, [r7, #20]
 80919e6:	e7e7      	b.n	80919b8 <__d2b+0x44>
 80919e8:	a801      	add	r0, sp, #4
 80919ea:	f7ff fd32 	bl	8091452 <__lo0bits>
 80919ee:	2101      	movs	r1, #1
 80919f0:	9b01      	ldr	r3, [sp, #4]
 80919f2:	6139      	str	r1, [r7, #16]
 80919f4:	617b      	str	r3, [r7, #20]
 80919f6:	3020      	adds	r0, #32
 80919f8:	e7e5      	b.n	80919c6 <__d2b+0x52>
 80919fa:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80919fe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8091a02:	6030      	str	r0, [r6, #0]
 8091a04:	6918      	ldr	r0, [r3, #16]
 8091a06:	f7ff fd04 	bl	8091412 <__hi0bits>
 8091a0a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8091a0e:	6029      	str	r1, [r5, #0]
 8091a10:	e7e1      	b.n	80919d6 <__d2b+0x62>

08091a12 <__ratio>:
 8091a12:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8091a16:	4688      	mov	r8, r1
 8091a18:	4669      	mov	r1, sp
 8091a1a:	4681      	mov	r9, r0
 8091a1c:	f7ff ff56 	bl	80918cc <__b2d>
 8091a20:	460f      	mov	r7, r1
 8091a22:	4604      	mov	r4, r0
 8091a24:	460d      	mov	r5, r1
 8091a26:	4640      	mov	r0, r8
 8091a28:	a901      	add	r1, sp, #4
 8091a2a:	f7ff ff4f 	bl	80918cc <__b2d>
 8091a2e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8091a32:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8091a36:	468b      	mov	fp, r1
 8091a38:	eba3 0c02 	sub.w	ip, r3, r2
 8091a3c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8091a40:	1a9b      	subs	r3, r3, r2
 8091a42:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8091a46:	2b00      	cmp	r3, #0
 8091a48:	bfd5      	itete	le
 8091a4a:	460a      	movle	r2, r1
 8091a4c:	462a      	movgt	r2, r5
 8091a4e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8091a52:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8091a56:	bfd8      	it	le
 8091a58:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8091a5c:	465b      	mov	r3, fp
 8091a5e:	4602      	mov	r2, r0
 8091a60:	4639      	mov	r1, r7
 8091a62:	4620      	mov	r0, r4
 8091a64:	f7fb ff74 	bl	808d950 <__aeabi_ddiv>
 8091a68:	b003      	add	sp, #12
 8091a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08091a6e <__copybits>:
 8091a6e:	3901      	subs	r1, #1
 8091a70:	b570      	push	{r4, r5, r6, lr}
 8091a72:	1149      	asrs	r1, r1, #5
 8091a74:	6914      	ldr	r4, [r2, #16]
 8091a76:	3101      	adds	r1, #1
 8091a78:	f102 0314 	add.w	r3, r2, #20
 8091a7c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8091a80:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8091a84:	1f05      	subs	r5, r0, #4
 8091a86:	42a3      	cmp	r3, r4
 8091a88:	d30c      	bcc.n	8091aa4 <__copybits+0x36>
 8091a8a:	1aa3      	subs	r3, r4, r2
 8091a8c:	3b11      	subs	r3, #17
 8091a8e:	f023 0303 	bic.w	r3, r3, #3
 8091a92:	3211      	adds	r2, #17
 8091a94:	42a2      	cmp	r2, r4
 8091a96:	bf88      	it	hi
 8091a98:	2300      	movhi	r3, #0
 8091a9a:	4418      	add	r0, r3
 8091a9c:	2300      	movs	r3, #0
 8091a9e:	4288      	cmp	r0, r1
 8091aa0:	d305      	bcc.n	8091aae <__copybits+0x40>
 8091aa2:	bd70      	pop	{r4, r5, r6, pc}
 8091aa4:	f853 6b04 	ldr.w	r6, [r3], #4
 8091aa8:	f845 6f04 	str.w	r6, [r5, #4]!
 8091aac:	e7eb      	b.n	8091a86 <__copybits+0x18>
 8091aae:	f840 3b04 	str.w	r3, [r0], #4
 8091ab2:	e7f4      	b.n	8091a9e <__copybits+0x30>

08091ab4 <__any_on>:
 8091ab4:	f100 0214 	add.w	r2, r0, #20
 8091ab8:	6900      	ldr	r0, [r0, #16]
 8091aba:	114b      	asrs	r3, r1, #5
 8091abc:	4298      	cmp	r0, r3
 8091abe:	b510      	push	{r4, lr}
 8091ac0:	db11      	blt.n	8091ae6 <__any_on+0x32>
 8091ac2:	dd0a      	ble.n	8091ada <__any_on+0x26>
 8091ac4:	f011 011f 	ands.w	r1, r1, #31
 8091ac8:	d007      	beq.n	8091ada <__any_on+0x26>
 8091aca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8091ace:	fa24 f001 	lsr.w	r0, r4, r1
 8091ad2:	fa00 f101 	lsl.w	r1, r0, r1
 8091ad6:	428c      	cmp	r4, r1
 8091ad8:	d10b      	bne.n	8091af2 <__any_on+0x3e>
 8091ada:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8091ade:	4293      	cmp	r3, r2
 8091ae0:	d803      	bhi.n	8091aea <__any_on+0x36>
 8091ae2:	2000      	movs	r0, #0
 8091ae4:	bd10      	pop	{r4, pc}
 8091ae6:	4603      	mov	r3, r0
 8091ae8:	e7f7      	b.n	8091ada <__any_on+0x26>
 8091aea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8091aee:	2900      	cmp	r1, #0
 8091af0:	d0f5      	beq.n	8091ade <__any_on+0x2a>
 8091af2:	2001      	movs	r0, #1
 8091af4:	e7f6      	b.n	8091ae4 <__any_on+0x30>

08091af6 <_calloc_r>:
 8091af6:	b538      	push	{r3, r4, r5, lr}
 8091af8:	fb02 f501 	mul.w	r5, r2, r1
 8091afc:	4629      	mov	r1, r5
 8091afe:	f7f9 f8b9 	bl	808ac74 <_malloc_r>
 8091b02:	4604      	mov	r4, r0
 8091b04:	b118      	cbz	r0, 8091b0e <_calloc_r+0x18>
 8091b06:	462a      	mov	r2, r5
 8091b08:	2100      	movs	r1, #0
 8091b0a:	f7fc ffa9 	bl	808ea60 <memset>
 8091b0e:	4620      	mov	r0, r4
 8091b10:	bd38      	pop	{r3, r4, r5, pc}

08091b12 <__ascii_wctomb>:
 8091b12:	4603      	mov	r3, r0
 8091b14:	4608      	mov	r0, r1
 8091b16:	b141      	cbz	r1, 8091b2a <__ascii_wctomb+0x18>
 8091b18:	2aff      	cmp	r2, #255	; 0xff
 8091b1a:	d904      	bls.n	8091b26 <__ascii_wctomb+0x14>
 8091b1c:	228a      	movs	r2, #138	; 0x8a
 8091b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8091b22:	601a      	str	r2, [r3, #0]
 8091b24:	4770      	bx	lr
 8091b26:	2001      	movs	r0, #1
 8091b28:	700a      	strb	r2, [r1, #0]
 8091b2a:	4770      	bx	lr

08091b2c <__env_lock>:
 8091b2c:	4801      	ldr	r0, [pc, #4]	; (8091b34 <__env_lock+0x8>)
 8091b2e:	f7ff bb94 	b.w	809125a <__retarget_lock_acquire_recursive>
 8091b32:	bf00      	nop
 8091b34:	200013e6 	.word	0x200013e6

08091b38 <__env_unlock>:
 8091b38:	4801      	ldr	r0, [pc, #4]	; (8091b40 <__env_unlock+0x8>)
 8091b3a:	f7ff bb90 	b.w	809125e <__retarget_lock_release_recursive>
 8091b3e:	bf00      	nop
 8091b40:	200013e6 	.word	0x200013e6

08091b44 <__aeabi_d2lz>:
 8091b44:	b538      	push	{r3, r4, r5, lr}
 8091b46:	460c      	mov	r4, r1
 8091b48:	4605      	mov	r5, r0
 8091b4a:	4621      	mov	r1, r4
 8091b4c:	4628      	mov	r0, r5
 8091b4e:	2200      	movs	r2, #0
 8091b50:	2300      	movs	r3, #0
 8091b52:	f7fc f845 	bl	808dbe0 <__aeabi_dcmplt>
 8091b56:	b928      	cbnz	r0, 8091b64 <__aeabi_d2lz+0x20>
 8091b58:	4628      	mov	r0, r5
 8091b5a:	4621      	mov	r1, r4
 8091b5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8091b60:	f7fc bcaa 	b.w	808e4b8 <__aeabi_d2ulz>
 8091b64:	4628      	mov	r0, r5
 8091b66:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8091b6a:	f7fc fca5 	bl	808e4b8 <__aeabi_d2ulz>
 8091b6e:	4240      	negs	r0, r0
 8091b70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8091b74:	bd38      	pop	{r3, r4, r5, pc}
 8091b76:	bf00      	nop

08091b78 <dynalib_user>:
 8091b78:	0021 0808 0061 0808 0089 0808 008d 0808     !...a...........
 8091b88:	0000 0000 0100 0402 1008 6f67 676f 656c     ..........google
 8091b98:	6720 6f65 6f6c 6163 6974 6e6f 003a 614c      geolocation:.La
 8091ba8:	6974 7574 6564 253a 2c66 6c20 6e6f 6967     titude:%f, longi
 8091bb8:	7574 6564 253a 2c66 6120 6363 253a 0066     tude:%f, acc:%f.
 8091bc8:	2e25 6636 2500 2e33 6632 2500 322e 0058     %.6f.%3.2f.%.2X.
 8091bd8:	6554 706d 7265 7461 7275 2065 6572 6461     Temperature read
 8091be8:	6e69 2067 7266 6d6f 4820 4849 3138 3032     ing from HIH8120
 8091bf8:	5400 6d65 6570 6172 7574 6572 7220 6165     .Temperature rea
 8091c08:	6964 676e 6620 6f72 206d 4d54 3350 0036     ding from TMP36.
 8091c18:	6554 706d 7265 7461 7275 2065 6572 6461     Temperature read
 8091c28:	6e69 2067 7266 6d6f 4220 454d 6620 726f     ing from BME for
 8091c38:	4120 706c 6168 6573 736e 0065 7548 696d      Alphasense.Humi
 8091c48:	6964 7974 7220 6165 6964 676e 6620 6f72     dity reading fro
 8091c58:	206d 4948 3848 3231 0030 7548 696d 6964     m HIH8120.Humidi
 8091c68:	7974 7220 6165 6964 676e 6620 6f72 206d     ty reading from 
 8091c78:	4d42 0045 6167 2073 6572 6973 7473 6e61     BME.gas resistan
 8091c88:	6563 203a 3125 302e 2c66 6820 6d75 6469     ce: %1.0f, humid
 8091c98:	7469 3a79 2520 2e31 6632 0d0a 4700 7361     ity: %1.2f...Gas
 8091ca8:	7320 6f63 6572 203a 4800 6d75 6469 7469      score: .Humidit
 8091cb8:	2079 6373 726f 3a65 0020 7453 7261 2074     y score: .Start 
 8091cc8:	666f 6120 706c 6168 3220 7220 6165 0064     of alpha 2 read.
 8091cd8:	6f43 6c75 6e64 7427 6320 6d6f 756d 696e     Couldn't communi
 8091ce8:	6163 6574 7720 7469 2068 4d4c 3950 3031     cate with LMP910
 8091cf8:	3030 3220 6800 6c61 2066 7276 6665 2032     00 2.half vref2 
 8091d08:	6461 3173 5300 6174 7574 2073 3d3d 3020     ads1.Status == 0
 8091d18:	6620 6f72 206d 4d4c 3950 3031 3030 3220      from LMP91000 2
 8091d28:	7320 6174 7574 2073 6572 0067 392d 0039      status reg.-99.
 8091d38:	7257 7469 6e69 2067 6164 6174 7420 206f     Writing data to 
 8091d48:	6f6c 2067 6966 656c 002e 6946 656c 5320     log file..File S
 8091d58:	6174 7472 7420 6d69 7365 6174 706d 203a     tart timestamp: 
 8091d68:	5500 616e 6c62 2065 6f74 7720 6972 6574     .Unable to write
 8091d78:	7420 206f 6f6c 2067 6966 656c 6900 696e      to log file.ini
 8091d88:	0074 4747 0041 7245 6f72 2072 6572 6461     t.GGA.Error read
 8091d98:	6e69 2067 5047 0053 5047 2053 7475 2063     ing GPS.GPS utc 
 8091da8:	7473 6972 676e 203a 4c00 7461 7469 6475     string: .Latitud
 8091db8:	2065 7473 6972 676e 203a 6c00 6e6f 6967     e string: .longi
 8091dc8:	7574 6564 7320 7274 6e69 3a67 0020 2140     tude string: .@!
 8091dd8:	5300 6e65 6964 676e 6e20 7765 7720 6669     .Sending new wif
 8091de8:	2069 7263 6465 6e65 6974 6c61 2073 6f74     i credentials to
 8091df8:	4520 5053 5300 6375 6563 7373 0021 6146      ESP.Success!.Fa
 8091e08:	6c69 6465 7420 206f 6572 6461 4220 454d     iled to read BME
 8091e18:	3836 0030 0024 7543 7272 6e65 2074 7473     680.$.Current st
 8091e28:	726f 6465 7320 6973 3a64 0020 7543 7272     ored ssid: .Curr
 8091e38:	6e65 2074 7473 726f 6465 7020 7361 7773     ent stored passw
 8091e48:	726f 3a64 0020 6c50 6165 6573 6520 746e     ord: .Please ent
 8091e58:	7265 7020 7361 7773 726f 2064 6e69 6f20     er password in o
 8091e68:	6472 7265 7420 206f 616d 656b 6320 6168     rder to make cha
 8091e78:	676e 7365 0a2e 000d 6f62 6c75 0064 6150     nges....bould.Pa
 8091e88:	7373 6f77 6472 6320 726f 6572 7463 0021     ssword correct!.
 8091e98:	6e45 6574 2072 656e 2077 7373 6469 003a     Enter new ssid:.
 8091ea8:	6f59 7275 6e20 7765 7320 6973 2064 6977     Your new ssid wi
 8091eb8:	6c6c 6220 3a65 0020 7349 7420 6968 2073     ll be: .Is this 
 8091ec8:	6b6f 7961 283f 2079 726f 6e20 0029 6153     okay?(y or n).Sa
 8091ed8:	6976 676e 6e20 7765 7320 6973 0064 6e45     ving new ssid.En
 8091ee8:	6574 2072 656e 2077 6170 7373 6f77 6472     ter new password
 8091ef8:	5900 756f 2072 656e 2077 6170 7373 6f77     .Your new passwo
 8091f08:	6472 7720 6c69 206c 6562 203a 5300 7661     rd will be: .Sav
 8091f18:	6e69 2067 656e 2077 6170 7373 6f77 6472     ing new password
 8091f28:	6f00 616b 2c79 6e20 206f 7270 626f 656c     .okay, no proble
 8091f38:	0a6d 000d 6c50 6165 6573 6520 746e 7265     m...Please enter
 8091f48:	7020 7361 7773 726f 2064 6e69 6f20 6472      password in ord
 8091f58:	7265 7420 206f 6e65 6261 656c 6420 7461     er to enable dat
 8091f68:	2061 7570 6873 7420 206f 6553 736e 6269     a push to Sensib
 8091f78:	656c 4920 746f 6900 736d 6e65 6973 6c62     le Iot.imsensibl
 8091f88:	0065 6e45 6261 696c 676e 7320 6e65 6973     e.Enabling sensi
 8091f98:	6c62 2065 6f69 2074 6164 6174 7020 7375     ble iot data pus
 8091fa8:	2e68 0a00 490d 636e 726f 6572 7463 7020     h....Incorrect p
 8091fb8:	7361 7773 726f 2164 5000 656c 7361 2065     assword!.Please 
 8091fc8:	6e65 6574 2072 6170 7373 6f77 6472 6920     enter password i
 8091fd8:	206e 726f 6564 2072 6f74 6120 7070 796c     n order to apply
 8091fe8:	6420 6665 7561 746c 7320 7465 6974 676e      default setting
 8091ff8:	0073 6150 7373 6f77 6472 6320 726f 6572     s.Password corre
 8092008:	7463 202c 6572 6573 7474 6e69 2067 6c61     ct, resetting al
 8092018:	206c 6573 7474 6e69 7367 7420 206f 6564     l settings to de
 8092028:	6166 6c75 2174 2020 6c50 6165 6573 7220     fault!  Please r
 8092038:	7365 7465 7920 756f 2072 4449 7420 206f     eset your ID to 
 8092048:	6874 2065 6e6f 2065 6873 776f 206e 6e6f     the one shown on
 8092058:	7920 756f 2072 6e65 6c63 736f 7275 2e65      your enclosure.
 8092068:	4500 746e 7265 6e20 7765 4420 7665 6369     .Enter new Devic
 8092078:	2065 6974 656d 6120 646e 6420 7461 2065     e time and date 
 8092088:	3128 2030 6964 6967 2074 7065 636f 2068     (10 digit epoch 
 8092098:	6974 656d 7473 6d61 2970 003a 0d0a 654e     timestamp):...Ne
 80920a8:	2077 6544 6976 6563 5420 6d69 3a65 0a00     w Device Time:..
 80920b8:	490d 766e 6c61 6469 7620 6c61 6575 0021     .Invalid value!.
 80920c8:	7543 7272 6e65 2074 4f43 2032 6c73 706f     Current CO2 slop
 80920d8:	3a65 2000 7070 006d 6e45 6574 2072 656e     e:. ppm.Enter ne
 80920e8:	2077 4f43 2032 6c73 706f 0a65 000d 0d0a     w CO2 slope.....
 80920f8:	654e 2077 4f43 2032 6c73 706f 3a65 0020     New CO2 slope: .
 8092108:	7543 7272 6e65 2074 4f43 7320 6f6c 6570     Current CO slope
 8092118:	003a 6e45 6574 2072 656e 2077 4f43 7320     :.Enter new CO s
 8092128:	6f6c 6570 0d0a 0a00 4e0d 7765 4320 204f     lope.....New CO 
 8092138:	6c73 706f 3a65 0020 7543 7272 6e65 2074     slope: .Current 
 8092148:	4d50 2031 6c73 706f 3a65 4500 746e 7265     PM1 slope:.Enter
 8092158:	6e20 7765 5020 314d 7320 6f6c 6570 0d0a      new PM1 slope..
 8092168:	0a00 4e0d 7765 5020 314d 7320 6f6c 6570     ...New PM1 slope
 8092178:	203a 4300 7275 6572 746e 5020 324d 352e     : .Current PM2.5
 8092188:	7320 6f6c 6570 003a 6e45 6574 2072 656e      slope:.Enter ne
 8092198:	2077 4d50 2e32 2035 6c73 706f 0a65 000d     w PM2.5 slope...
 80921a8:	0d0a 654e 2077 4d50 2e32 2035 6c73 706f     ..New PM2.5 slop
 80921b8:	3a65 0020 7543 7272 6e65 2074 4d50 3031     e: .Current PM10
 80921c8:	7320 6f6c 6570 003a 6e45 6574 2072 656e      slope:.Enter ne
 80921d8:	2077 4d50 3031 7320 6f6c 6570 0d0a 0a00     w PM10 slope....
 80921e8:	4e0d 7765 5020 314d 2030 6c73 706f 3a65     .New PM10 slope:
 80921f8:	0020 7543 7272 6e65 2074 6554 706d 7265      .Current Temper
 8092208:	7461 7275 2065 6c73 706f 3a65 2000 6544     ature slope:. De
 8092218:	7267 6565 2073 0043 6e45 6574 2072 656e     grees C.Enter ne
 8092228:	2077 6554 706d 7265 7461 7275 2065 6c73     w Temperature sl
 8092238:	706f 0a65 000d 0d0a 654e 2077 6554 706d     ope.....New Temp
 8092248:	7265 7461 7275 2065 6c73 706f 3a65 0020     erature slope: .
 8092258:	7543 7272 6e65 2074 7250 7365 7573 6572     Current Pressure
 8092268:	7320 6f6c 6570 003a 7420 726f 0072 6e45      slope:. torr.En
 8092278:	6574 2072 656e 2077 7250 7365 7573 6572     ter new Pressure
 8092288:	7320 6f6c 6570 0d0a 0a00 4e0d 7765 5020      slope.....New P
 8092298:	6572 7373 7275 2065 6c73 706f 3a65 0020     ressure slope: .
 80922a8:	7543 7272 6e65 2074 4852 7320 6f6c 6570     Current RH slope
 80922b8:	003a 2520 4500 746e 7265 6e20 7765 5220     :. %.Enter new R
 80922c8:	2048 6c73 706f 0a65 000d 0d0a 654e 2077     H slope.....New 
 80922d8:	4852 7320 6f6c 6570 203a 4300 6d6f 616d     RH slope: .Comma
 80922e8:	646e 203a 4420 7365 7263 7069 6974 6e6f     nd:  Description
 80922f8:	6100 203a 4120 6a64 7375 2074 4f43 2032     .a:  Adjust CO2 
 8092308:	6c73 706f 0065 3a62 2020 6441 756a 7473     slope.b:  Adjust
 8092318:	4320 324f 7a20 7265 006f 3a63 2020 6441      CO2 zero.c:  Ad
 8092328:	756a 7473 4320 204f 6c73 706f 0065 3a64     just CO slope.d:
 8092338:	2020 6441 756a 7473 4320 204f 657a 6f72       Adjust CO zero
 8092348:	6500 203a 4120 6a64 7375 2074 4d50 2031     .e:  Adjust PM1 
 8092358:	6c73 706f 0065 3a66 2020 6441 756a 7473     slope.f:  Adjust
 8092368:	5020 314d 7a20 7265 006f 3a67 2020 6441      PM1 zero.g:  Ad
 8092378:	756a 7473 5020 324d 352e 7320 6f6c 6570     just PM2.5 slope
 8092388:	6800 203a 4120 6a64 7375 2074 4d50 2e32     .h:  Adjust PM2.
 8092398:	2035 657a 6f72 6900 203a 4120 6a64 7375     5 zero.i:  Adjus
 80923a8:	2074 4d50 3031 7320 6f6c 6570 6a00 203a     t PM10 slope.j: 
 80923b8:	4120 6a64 7375 2074 4d50 3031 7a20 7265      Adjust PM10 zer
 80923c8:	006f 3a6b 2020 6441 756a 7473 5420 6d65     o.k:  Adjust Tem
 80923d8:	6570 6172 7574 6572 7320 6f6c 6570 6c00     perature slope.l
 80923e8:	203a 4120 6a64 7375 2074 6554 706d 7265     :  Adjust Temper
 80923f8:	7461 7275 2065 657a 6f72 6d00 203a 4120     ature zero.m:  A
 8092408:	6a64 7375 2074 7250 7365 7573 6572 7320     djust Pressure s
 8092418:	6f6c 6570 6e00 203a 4120 6a64 7375 2074     lope.n:  Adjust 
 8092428:	7250 7365 7573 6572 7a20 7265 006f 3a6f     Pressure zero.o:
 8092438:	2020 6441 756a 7473 4820 6d75 6469 7469       Adjust Humidit
 8092448:	2079 6c73 706f 0065 3a70 2020 6441 756a     y slope.p:  Adju
 8092458:	7473 4820 6d75 6469 7469 2079 657a 6f72     st Humidity zero
 8092468:	7100 203a 4520 616e 6c62 2065 6573 6972     .q:  Enable seri
 8092478:	6c61 6420 6265 6775 6967 676e 7200 203a     al debugging.r: 
 8092488:	4420 7369 6261 656c 7320 7265 6169 206c      Disable serial 
 8092498:	6564 7562 6767 6e69 0067 3a73 2020 754f     debugging.s:  Ou
 80924a8:	7074 7475 6820 6165 6564 2072 7473 6972     tput header stri
 80924b8:	676e 7400 203a 4520 746e 7265 6e20 7765     ng.t:  Enter new
 80924c8:	7420 6d69 2065 6e61 2064 6164 6574 7500      time and date.u
 80924d8:	203a 4520 746e 7265 6e20 7765 7420 6d69     :  Enter new tim
 80924e8:	2065 6f7a 656e 7600 203a 4120 6a64 7375     e zone.v:  Adjus
 80924f8:	2074 6874 2065 6544 6976 6563 4920 0044     t the Device ID.
 8092508:	3a77 2020 6547 2074 6977 6966 6320 6572     w:  Get wifi cre
 8092518:	6564 746e 6169 736c 7900 203a 4520 616e     dentials.y:  Ena
 8092528:	6c62 2065 6563 6c6c 6c75 7261 7a00 203a     ble cellular.z: 
 8092538:	4420 7369 6261 656c 6320 6c65 756c 616c      Disable cellula
 8092548:	0072 3a31 2020 6441 756a 7473 6720 7361     r.1:  Adjust gas
 8092558:	6c20 776f 7265 6c20 6d69 7469 3200 203a      lower limit.2: 
 8092568:	4120 6a64 7375 2074 6167 2073 7075 6570      Adjust gas uppe
 8092578:	2072 696c 696d 0074 3a33 2020 6547 2074     r limit.3:  Get 
 8092588:	7562 6c69 2064 6576 7372 6f69 006e 3a34     build version.4:
 8092598:	2020 6e45 6261 656c 4f20 6f7a 656e 3500       Enable Ozone.5
 80925a8:	203a 4420 7369 6261 656c 4f20 6f7a 656e     :  Disable Ozone
 80925b8:	3600 203a 4520 616e 6c62 2065 4f56 2743     .6:  Enable VOC'
 80925c8:	0073 3a37 2020 6944 6173 6c62 2065 4f56     s.7:  Disable VO
 80925d8:	2743 0073 3a38 2020 754f 7074 7475 7420     C's.8:  Output t
 80925e8:	6568 5020 494d 2043 7973 7473 6d65 6320     he PMIC system c
 80925f8:	6e6f 6966 7567 6172 6974 6e6f 3900 203a     onfiguration.9: 
 8092608:	4920 636e 6572 7361 2065 6874 2065 6863      Increase the ch
 8092618:	7261 6567 6320 7275 6572 746e 6220 2079     arge current by 
 8092628:	3436 6d20 0041 3a30 2020 6e49 7263 6165     64 mA.0:  Increa
 8092638:	6573 7420 6568 6320 7275 6572 746e 6920     se the current i
 8092648:	706e 7475 6c20 6d69 7469 6220 2079 3031     nput limit by 10
 8092658:	2030 416d 4100 203a 4f20 7075 7074 7475     0 mA.A:  Ouptput
 8092668:	4320 204f 6f63 736e 6174 746e 796c 6120      CO constantly a
 8092678:	646e 7220 7061 6469 796c 4200 203a 4f20     nd rapidly.B:  O
 8092688:	7475 7570 2074 4d50 6320 6e6f 7473 6e61     utput PM constan
 8092698:	6c74 2079 6e61 2064 6172 6970 6c64 0079     tly and rapidly.
 80926a8:	3a43 2020 6843 6e61 6567 7420 6d65 6570     C:  Change tempe
 80926b8:	6172 7574 6572 7520 696e 7374 7420 206f     rature units to 
 80926c8:	6543 636c 7569 0073 3a44 2020 6944 6173     Celcius.D:  Disa
 80926d8:	6c62 2065 4d54 3350 2036 6574 706d 7265     ble TMP36 temper
 80926e8:	7461 7275 2065 6573 736e 726f 6120 646e     ature sensor and
 80926f8:	7520 6573 4220 454d 3836 2030 6574 706d      use BME680 temp
 8092708:	7265 7461 7275 0065 3a45 2020 6e45 6261     erature.E:  Enab
 8092718:	656c 5420 504d 3633 7420 6d65 6570 6172     le TMP36 tempera
 8092728:	7574 6572 7320 6e65 6f73 2072 6e61 2064     ture sensor and 
 8092738:	6964 6173 6c62 2065 4d42 3645 3038 7420     disable BME680 t
 8092748:	6d65 6570 6172 7574 6572 4600 203a 4320     emperature.F:  C
 8092758:	6168 676e 2065 6574 706d 7265 7461 7275     hange temperatur
 8092768:	2065 6e75 7469 2073 6f74 4620 7261 6e65     e units to Faren
 8092778:	6568 7469 4700 203a 5220 6165 2064 7a6f     heit.G:  Read oz
 8092788:	6e6f 2065 7266 6d6f 6120 616e 6f6c 2067     one from analog 
 8092798:	6e69 7570 2074 6e28 746f 6420 6769 7469     input (not digit
 80927a8:	6c61 796c 2d20 6220 616f 6472 6420 7065     ally - board dep
 80927b8:	6e65 6564 746e 0029 3a48 2020 6552 6461     endent).H:  Read
 80927c8:	6f20 6f7a 656e 6420 6769 7469 6c61 796c      ozone digitally
 80927d8:	2820 6f6e 2074 6874 6f72 6775 2068 6e61      (not through an
 80927e8:	6c61 676f 6920 706e 7475 2d20 6220 616f     alog input - boa
 80927f8:	6472 6420 7065 6e65 6564 746e 0029 3a49     rd dependent).I:
 8092808:	2020 6441 756a 7473 6620 6572 7571 6e65       Adjust frequen
 8092818:	7963 6620 726f 7520 6c70 616f 6964 676e     cy for uploading
 8092828:	7420 7268 756f 6867 6320 6c65 756c 616c      through cellula
 8092838:	0072 3a4a 2020 6552 6573 2074 5345 2c50     r.J:  Reset ESP,
 8092848:	4320 324f 202c 6c50 6e61 6f74 6577 0072      CO2, Plantower.
 8092858:	3a4b 2020 6f43 746e 6e69 6f75 7375 7320     K:  Continuous s
 8092868:	7265 6169 206c 756f 7074 7475 6f20 2066     erial output of 
 8092878:	5047 0053 3a4c 2020 7257 7469 2065 6564     GPS.L:  Write de
 8092888:	6166 6c75 2074 6573 7474 6e69 7367 4d00     fault settings.M
 8092898:	203a 4520 616e 6c62 2065 3032 2025 6162     :  Enable 20% ba
 80928a8:	7474 7265 2079 6874 6572 6873 6c6f 2064     ttery threshold 
 80928b8:	696c 696d 6974 676e 4e00 203a 4420 7369     limiting.N:  Dis
 80928c8:	6261 656c 3220 2530 6220 7461 6574 7972     able 20% battery
 80928d8:	7420 7268 7365 6f68 646c 6c20 6d69 7469      threshold limit
 80928e8:	6e69 2067 4157 4e52 4e49 2147 0021 3a4f     ing WARNING!!.O:
 80928f8:	2020 6e45 6261 656c 6c20 776f 7020 776f       Enable low pow
 8092908:	7265 6620 726f 4720 5350 6d20 646f 6c75     er for GPS modul
 8092918:	0065 3a50 2020 7554 6e72 6f20 6666 4220     e.P:  Turn off B
 8092928:	5441 4546 0054 3a51 2020 6c41 6f6c 2077     ATFET.Q:  Allow 
 8092938:	4142 4654 5445 7420 206f 7574 6e72 6f20     BATFET to turn o
 8092948:	006e 3a52 2020 6944 6173 6c62 2065 4241     n.R:  Disable AB
 8092958:	2043 6f6c 6967 2063 6f66 2072 4f43 2032     C logic for CO2 
 8092968:	6573 736e 726f 5300 203a 4520 616e 6c62     sensor.S:  Enabl
 8092978:	2065 4241 2043 6f6c 6967 2063 6f66 2072     e ABC logic for 
 8092988:	4f43 2032 6573 736e 726f 5400 203a 4520     CO2 sensor.T:  E
 8092998:	616e 6c62 2f65 6964 6173 6c62 2065 4948     nable/disable HI
 80929a8:	3848 3231 2030 4852 7320 6e65 6f73 0072     H8120 RH sensor.
 80929b8:	3a55 2020 7753 7469 6863 7320 636f 656b     U:  Switch socke
 80929c8:	2074 6877 7265 2065 4f43 6920 2073 6572     t where CO is re
 80929d8:	6461 6620 6f72 006d 3a57 2020 6e45 6261     ad from.W:  Enab
 80929e8:	656c 442f 7369 6261 656c 6720 6f6f 6c67     le/Disable googl
 80929f8:	2065 6f6c 6163 6974 6e6f 7320 7265 6976     e location servi
 8092a08:	6563 0073 3a56 2020 6143 696c 7262 7461     ces.V:  Calibrat
 8092a18:	2065 4f43 2032 6573 736e 726f 2d20 6d20     e CO2 sensor - m
 8092a28:	7375 2074 7573 7070 796c 6120 626d 6569     ust supply ambie
 8092a38:	746e 6c20 7665 6c65 2820 6f67 6f20 7475     nt level (go out
 8092a48:	6973 6564 2921 5a00 203a 4f20 7475 7570     side!).Z:  Outpu
 8092a58:	2074 6563 6c6c 6c75 7261 6920 666e 726f     t cellular infor
 8092a68:	616d 6974 6e6f 2820 4343 4449 202c 4d49     mation (CCID, IM
 8092a78:	4945 202c 7465 2963 2100 203a 4320 6e6f     EI, etc).!:  Con
 8092a88:	6974 756e 756f 2073 6573 6972 6c61 6f20     tinuous serial o
 8092a98:	7475 7570 2074 666f 5620 434f 7327 4000     utput of VOC's.@
 8092aa8:	2020 4520 616e 6c62 2f65 6944 6173 6c62        Enable/Disabl
 8092ab8:	2065 6553 736e 6269 656c 692d 746f 6420     e Sensible-iot d
 8092ac8:	7461 2061 7570 6873 202e 4920 2066 6e65     ata push.  If en
 8092ad8:	6261 656c 2c64 7420 6d69 2065 6f7a 656e     abled, time zone
 8092ae8:	7720 6c69 206c 6562 6920 6e67 726f 6465      will be ignored
 8092af8:	2d20 5520 4354 7720 6c69 206c 6562 7520      - UTC will be u
 8092b08:	6573 2e64 2300 2020 4520 616e 6c62 2f65     sed..#   Enable/
 8092b18:	6944 6173 6c62 2065 6163 7472 706f 6570     Disable cartoppe
 8092b28:	2072 6f70 6577 2072 6f6d 6564 202e 4920     r power mode.  I
 8092b38:	2066 6e65 6261 656c 2c64 6120 7362 6e65     f enabled, absen
 8092b48:	6573 6f20 2066 7865 6574 6e72 6c61 7020     se of external p
 8092b58:	776f 7265 7720 6c69 206c 7473 706f 6320     ower will stop c
 8092b68:	6c65 756c 616c 2e72 3f00 203a 4f20 7475     ellular..?:  Out
 8092b78:	7570 2074 6874 7369 6d20 6e65 0075 3a78     put this menu.x:
 8092b88:	2020 7845 7469 2073 6874 7369 6d20 6e65       Exits this men
 8092b98:	0075 562c 434f 203a 2c00 4320 3a4f 0020     u.,VOC: ., CO: .
 8092ba8:	202c 4f43 3a32 0020 202c 4d50 3a31 0020     , CO2: ., PM1: .
 8092bb8:	502c 324d 352e 203a 2c00 5020 314d 3a30     ,PM2.5: ., PM10:
 8092bc8:	0020 542c 6d65 3a70 0020 502c 6572 7373      .,Temp: .,Press
 8092bd8:	203a 2c00 5548 3a4d 0020 532c 646e 203a     : .,HUM: .,Snd: 
 8092be8:	2c00 334f 203a 7000 6d61 7075 5000 6275     .,O3: .pamup.Pub
 8092bf8:	696c 6873 6465 7020 6d61 7075 6420 7461     lished pamup dat
 8092c08:	2161 7300 6e65 6973 6c62 5065 6d61 7055     a!.sensiblePamUp
 8092c18:	5000 6275 696c 6873 6465 7320 6e65 6973     .Published sensi
 8092c28:	6c62 2065 6164 6174 0021 6543 6c6c 6c75     ble data!.Cellul
 8092c38:	7261 6920 2073 6964 6173 6c62 6465 002e     ar is disabled..
 8092c48:	6f43 6c75 6e64 7427 6320 6e6f 656e 7463     Couldn't connect
 8092c58:	7420 206f 6170 7472 6369 656c 002e 003b      to particle..;.
 8092c68:	4150 2d4d 6900 736e 7274 6d75 6e65 4b74     PAM-.instrumentK
 8092c78:	7965 6400 7461 7465 6d69 0065 5925 252d     ey.datetime.%Y-%
 8092c88:	2d6d 6425 2554 3a48 4d25 253a 5a53 5000     m-%dT%H:%M:%SZ.P
 8092c98:	314d 305f 5000 324d 355f 5400 6d65 0070     M1_0.PM2_5.Temp.
 8092ca8:	7250 7365 0073 6d48 7464 0079 614c 0074     Press.Hmdty.Lat.
 8092cb8:	6f4c 676e 2500 2f64 6d25 252f 2c79 4825     Long.%d/%m/%y,%H
 8092cc8:	253a 3a4d 5325 4c00 6e69 2065 6f74 7720     :%M:%S.Line to w
 8092cd8:	6972 6574 7420 206f 6c63 756f 3a64 5300     rite to cloud:.S
 8092ce8:	6e65 6964 676e 6420 7461 2061 6f74 6520     ending data to e
 8092cf8:	7073 7420 206f 7075 6f6c 6461 7620 6169     sp to upload via
 8092d08:	7720 6669 2e69 2e2e 5300 6e65 6964 676e      wifi....Sending
 8092d18:	6420 7461 2061 6f74 6520 7073 7420 206f      data to esp to 
 8092d28:	7075 6f6c 6461 7620 6169 7720 6669 0069     upload via wifi.
 8092d38:	7257 7469 6e69 2067 6f72 2077 6f74 6620     Writing row to f
 8092d48:	6c69 2e65 4400 5645 432c 284f 7070 296d     ile..DEV,CO(ppm)
 8092d58:	432c 324f 7028 6d70 2c29 4f56 7343 4928     ,CO2(ppm),VOCs(I
 8092d68:	5141 2c29 4d50 2c31 4d50 5f32 2c35 4d50     AQ),PM1,PM2_5,PM
 8092d78:	3031 542c 4328 2c29 7250 7365 2873 426d     10,T(C),Press(mB
 8092d88:	7261 2c29 4852 2528 2c29 334f 7028 6270     ar),RH(%),O3(ppb
 8092d98:	2c29 6142 7474 2528 2c29 6e53 2864 6264     ),Batt(%),Snd(db
 8092da8:	2c29 614c 6974 7574 6564 4c2c 6e6f 6967     ),Latitude,Longi
 8092db8:	7574 6564 4e2c 412f 4e2c 412f 442c 7461     tude,N/A,N/A,Dat
 8092dc8:	2f65 6954 656d 5300 6174 7472 6f20 2066     e/Time.Start of 
 8092dd8:	6c61 6870 2061 6572 6461 4300 756f 646c     alpha read.Could
 8092de8:	276e 2074 6f63 6d6d 6e75 6369 7461 2065     n't communicate 
 8092df8:	6977 6874 4c20 504d 3139 3030 0030 6148     with LMP91000.Ha
 8092e08:	666c 6f76 746c 203a 3125 322e 0a66 000d     lfvolt: %1.2f...
 8092e18:	6148 666c 6f76 746c 6820 6769 6568 2072     Halfvolt higher 
 8092e28:	6874 6e61 3020 352e 5300 6174 7574 2073     than 0.5.Status 
 8092e38:	203d 2030 7266 6d6f 4c20 504d 3139 3030     = 0 from LMP9100
 8092e48:	2030 7473 7461 7375 7220 6765 4c00 504d     0 status reg.LMP
 8092e58:	3031 3030 7320 6174 7574 2073 203d 0030     1000 status = 0.
 8092e68:	4f43 6d20 6165 7573 6572 656d 746e 3a73     CO measurements:
 8092e78:	2020 0d0a 4100 5f30 6167 3a73 2520 0a64       ...A0_gas: %d.
 8092e88:	000d 3141 615f 7875 203a 6425 0d0a 4100     ..A1_aux: %d...A
 8092e98:	5f32 6574 706d 203a 6425 0d0a 6800 6c61     2_temp: %d...hal
 8092ea8:	5f66 7276 6665 203a 6425 0d0a 4300 3a4f     f_vref: %d...CO:
 8092eb8:	2520 2e31 6633 7020 6d70 0d0a 4f00 646c      %1.3f ppm...Old
 8092ec8:	6920 706e 7475 6320 7275 6572 746e 6c20      input current l
 8092ed8:	6d69 7469 203a 6425 0d0a 4e00 7765 6920     imit: %d...New i
 8092ee8:	706e 7475 6320 7275 6572 746e 6c20 6d69     nput current lim
 8092ef8:	7469 203a 6425 0d0a 4900 636e 6572 7361     it: %d...Increas
 8092f08:	6e69 2067 6843 7261 6567 6320 7275 6572     ing Charge curre
 8092f18:	746e 6620 6f72 206d 6425 6d20 2041 6f74     nt from %d mA to
 8092f28:	0020 656e 2077 6863 7261 6567 6320 7275      .new charge cur
 8092f38:	6572 746e 6f20 2066 6425 6d20 0a41 000d     rent of %d mA...
 8092f48:	265a 4700 7465 6974 676e 6f20 6f7a 656e     Z&.Getting ozone
 8092f58:	6420 7461 2061 7266 6d6f 6520 7073 5500      data from esp.U
 8092f68:	616e 6c62 2065 6f74 6720 7465 6f20 6f7a     nable to get ozo
 8092f78:	656e 6420 7461 2061 7266 6d6f 4520 5053     ne data from ESP
 8092f88:	202c 6f63 6e75 6574 2072 6e69 6564 3a78     , counter index:
 8092f98:	2520 2e31 6631 0d0a 5200 4345 4549 4556      %1.1f...RECIEVE
 8092fa8:	2044 4144 4154 4620 4f52 204d 5345 3a50     D DATA FROM ESP:
 8092fb8:	0020 6552 6963 7665 6465 6420 7461 2061      .Recieved data 
 8092fc8:	7266 6d6f 4520 5053 6300 6d6f 616d 6920     from ESP.comma i
 8092fd8:	646e 7865 203a 5300 7274 6e69 5b67 6425     ndex: .String[%d
 8092fe8:	3a5d 7500 6973 676e 7320 7274 6e69 2067     ]:.using string 
 8092ff8:	7261 6172 2079 6e69 6564 2078 2031 7564     array index 1 du
 8093008:	2065 6f74 6c20 676f 6967 676e 7500 6973     e to logging.usi
 8093018:	676e 7320 7274 6e69 2067 7261 6172 2079     ng string array 
 8093028:	6e69 6564 2078 2c30 6e20 746f 6c20 676f     index 0, not log
 8093038:	6967 676e 4f00 6f7a 656e 5220 7761 6120     ging.Ozone Raw a
 8093048:	616e 6f6c 2067 6e69 003a 7543 7272 6e65     nalog in:.Curren
 8093058:	2074 6544 6976 6563 4920 3a44 5000 656c     t Device ID:.Ple
 8093068:	7361 2065 6e65 6574 2072 6170 7373 6f77     ase enter passwo
 8093078:	6472 6920 206e 726f 6564 2072 6f74 6320     rd in order to c
 8093088:	6168 676e 2065 6874 2065 4449 4500 746e     hange the ID.Ent
 8093098:	7265 6e20 7765 4420 7665 6369 2065 4449     er new Device ID
 80930a8:	003a 0d0a 654e 2077 6544 6976 6563 4920     :...New Device I
 80930b8:	3a44 4500 746e 7265 6e20 7765 4420 7665     D:.Enter new Dev
 80930c8:	6369 2065 6974 656d 7a20 6e6f 2065 2d28     ice time zone (-
 80930d8:	3231 302e 7420 206f 3431 302e 0029 0d0a     12.0 to 14.0)...
 80930e8:	654e 2077 6544 6976 6563 7420 6d69 2065     New Device time 
 80930f8:	6f7a 656e 003a 7543 7272 6e65 2074 6f6c     zone:.Current lo
 8093108:	6577 2072 696c 696d 3a74 5000 656c 7361     wer limit:.Pleas
 8093118:	2065 6e65 6574 2072 6170 7373 6f77 6472     e enter password
 8093128:	6920 206e 726f 6564 2072 6f74 6320 6168      in order to cha
 8093138:	676e 2065 6874 2065 6f6c 6577 2072 696c     nge the lower li
 8093148:	696d 0074 6e45 6574 2072 656e 2077 6f6c     mit.Enter new lo
 8093158:	6577 2072 696c 696d 3a74 0d0a 0a00 4e0d     wer limit:.....N
 8093168:	7765 6c20 776f 7265 6c20 6d69 7469 003a     ew lower limit:.
 8093178:	7543 7272 6e65 2074 7075 6570 2072 696c     Current upper li
 8093188:	696d 3a74 5000 656c 7361 2065 6e65 6574     mit:.Please ente
 8093198:	2072 6170 7373 6f77 6472 6920 206e 726f     r password in or
 80931a8:	6564 2072 6f74 6320 6168 676e 2065 6874     der to change th
 80931b8:	2065 7075 6570 2072 696c 696d 0074 6e45     e upper limit.En
 80931c8:	6574 2072 656e 2077 7075 6570 2072 696c     ter new upper li
 80931d8:	696d 3a74 0d0a 0a00 4e0d 7765 7520 7070     mit:.....New upp
 80931e8:	7265 6c20 6d69 7469 003a 6567 6574 7065     er limit:.geteep
 80931f8:	6f72 646d 7461 0061 742e 7478 4300 6568     romdata..txt.Che
 8093208:	6b63 6e69 2067 6f66 2072 6473 6320 7261     cking for sd car
 8093218:	0064 6f6c 5f67 4300 6572 7461 6465 6e20     d.log_.Created n
 8093228:	7765 6620 6c69 2065 6f74 6c20 676f 7420     ew file to log t
 8093238:	206f 5375 2044 6163 6472 203a 4e00 206f     o uSD card: .No 
 8093248:	5375 2044 6163 6472 6420 7465 6365 6574     uSD card detecte
 8093258:	2e64 5300 6174 7472 6e69 2067 4d4c 3950     d..Starting LMP9
 8093268:	3031 3030 4320 204f 6e69 7469 6169 696c     1000 CO initiali
 8093278:	617a 6974 6e6f 4300 756f 646c 276e 2074     zation.Couldn't 
 8093288:	6f63 6d6d 6e75 6369 7461 2065 6977 6874     communicate with
 8093298:	4c20 504d 3139 3030 2030 6f66 2072 4f43      LMP91000 for CO
 80932a8:	4900 696e 6974 6c61 7a69 6465 4c20 504d     .Initialized LMP
 80932b8:	3139 3030 2030 6f66 2072 4f43 4300 756f     91000 for CO.Cou
 80932c8:	646c 6e20 746f 6320 6d6f 756d 696e 6163     ld not communica
 80932d8:	6574 7720 7469 2068 6441 6661 7572 7469     te with Adafruit
 80932e8:	415f 5344 3131 3531 6620 726f 4320 004f     _ADS1115 for CO.
 80932f8:	7453 7261 6974 676e 4c20 504d 3139 3030     Starting LMP9100
 8093308:	2030 2032 6e69 7469 6169 696c 617a 6974     0 2 initializati
 8093318:	6e6f 4300 756f 646c 276e 2074 6f63 6d6d     on.Couldn't comm
 8093328:	6e75 6369 7461 2065 6977 6874 4c20 504d     unicate with LMP
 8093338:	3139 3030 2030 6f66 2072 0032 6e49 7469     91000 for 2.Init
 8093348:	6169 696c 657a 2064 4d4c 3950 3031 3030     ialized LMP91000
 8093358:	6620 726f 3220 4300 756f 646c 6e20 746f      for 2.Could not
 8093368:	6620 6e69 2064 2061 6176 696c 2064 4d42      find a valid BM
 8093378:	3645 3038 7320 6e65 6f73 2c72 6320 6568     E680 sensor, che
 8093388:	6b63 7720 7269 6e69 2167 4900 696e 6974     ck wiring!.Initi
 8093398:	6c61 7a69 6465 4220 454d 5320 6e65 6f73     alized BME Senso
 80933a8:	0072 6f43 6c75 2064 6f6e 2074 6966 646e     r.Could not find
 80933b8:	6120 7620 6c61 6469 5420 3736 3331 7320      a valid T6713 s
 80933c8:	6e65 6f73 2c72 6320 6568 6b63 7720 7269     ensor, check wir
 80933d8:	6e69 2167 4300 756f 646c 6e20 746f 6620     ing!.Could not f
 80933e8:	6e69 2064 2061 6176 696c 2064 3654 3137     ind a valid T671
 80933f8:	0033 5345 2050 6572 6573 2174 4600 2057     3.ESP reset!.FW 
 8093408:	6556 7372 6f69 3a6e 0020 7542 6c69 3a64     Version: .Build:
 8093418:	0020 6553 7474 6e69 2067 7075 6720 6f6f      .Setting up goo
 8093428:	6c67 2065 616d 7370 6720 6f65 6f6c 6163     gle maps geoloca
 8093438:	6974 6e6f 002e 7953 7473 6d65 7620 7265     tion..System ver
 8093448:	6973 6e6f 203a 7325 4300 7275 6572 746e     sion: %s.Current
 8093458:	4620 6572 7571 6e65 7963 203a 2800 327e      Frequency: .(~2
 8093468:	7320 6365 6e6f 2964 6d20 6165 7573 6572      second) measure
 8093478:	656d 746e 0073 6e45 6574 2072 656e 2077     ments.Enter new 
 8093488:	6d61 756f 746e 0d0a 0a00 4e0d 7765 4620     amount.....New F
 8093498:	6572 7571 6e65 7963 203a 4300 7275 6572     requency: .Curre
 80934a8:	746e 4320 324f 7a20 7265 3a6f 4500 746e     nt CO2 zero:.Ent
 80934b8:	7265 6e20 7765 4320 324f 5a20 7265 0a6f     er new CO2 Zero.
 80934c8:	000d 0d0a 654e 2077 4f43 2032 657a 6f72     ....New CO2 zero
 80934d8:	203a 4300 7275 6572 746e 4320 204f 657a     : .Current CO ze
 80934e8:	6f72 003a 7020 6270 4500 746e 7265 6e20     ro:. ppb.Enter n
 80934f8:	7765 4320 204f 655a 6f72 0d0a 0a00 4e0d     ew CO Zero.....N
 8093508:	7765 4320 204f 657a 6f72 203a 4300 7275     ew CO zero: .Cur
 8093518:	6572 746e 5020 314d 7a20 7265 3a6f 2000     rent PM1 zero:. 
 8093528:	6775 6d2f 0033 6e45 6574 2072 656e 2077     ug/m3.Enter new 
 8093538:	4d50 2031 655a 6f72 0d0a 0a00 4e0d 7765     PM1 Zero.....New
 8093548:	5020 314d 7a20 7265 3a6f 0020 7543 7272      PM1 zero: .Curr
 8093558:	6e65 2074 4d50 2e32 2035 657a 6f72 003a     ent PM2.5 zero:.
 8093568:	6e45 6574 2072 656e 2077 4d50 2e32 2035     Enter new PM2.5 
 8093578:	655a 6f72 0d0a 0a00 4e0d 7765 5020 324d     Zero.....New PM2
 8093588:	352e 7a20 7265 3a6f 0020 7543 7272 6e65     .5 zero: .Curren
 8093598:	2074 4d50 3031 7a20 7265 3a6f 2000 6d75     t PM10 zero:. um
 80935a8:	6d2f 0033 6e45 6574 2072 656e 2077 4d50     /m3.Enter new PM
 80935b8:	3031 5a20 7265 0a6f 000d 0d0a 654e 2077     10 Zero.....New 
 80935c8:	4d50 3031 7a20 7265 3a6f 0020 7543 7272     PM10 zero: .Curr
 80935d8:	6e65 2074 6554 706d 7265 7461 7275 2065     ent Temperature 
 80935e8:	657a 6f72 003a 6e45 6574 2072 656e 2077     zero:.Enter new 
 80935f8:	6554 706d 7265 7461 7275 2065 655a 6f72     Temperature Zero
 8093608:	0d0a 0a00 4e0d 7765 5420 6d65 6570 6172     .....New Tempera
 8093618:	7574 6572 7a20 7265 3a6f 0020 7543 7272     ture zero: .Curr
 8093628:	6e65 2074 7250 7365 7573 6572 7a20 7265     ent Pressure zer
 8093638:	3a6f 4500 746e 7265 6e20 7765 5020 6572     o:.Enter new Pre
 8093648:	7373 7275 2065 655a 6f72 0d0a 0a00 4e0d     ssure Zero.....N
 8093658:	7765 5020 6572 7373 7275 2065 657a 6f72     ew Pressure zero
 8093668:	203a 4300 7275 6572 746e 5220 2048 657a     : .Current RH ze
 8093678:	6f72 003a 6e45 6574 2072 656e 2077 4852     ro:.Enter new RH
 8093688:	5a20 7265 0a6f 000d 0d0a 654e 2077 4852      Zero.....New RH
 8093698:	7a20 7265 3a6f 0020 654d 756e 003e 6553      zero: .Menu>.Se
 80936a8:	6972 6c61 6420 6265 6775 6967 676e 6520     rial debugging e
 80936b8:	616e 6c62 6465 002e 6553 6972 6c61 6420     nabled..Serial d
 80936c8:	6265 6775 6967 676e 6420 7369 6261 656c     ebugging disable
 80936d8:	2e64 4500 616e 6c62 6e69 2067 6543 6c6c     d..Enabling Cell
 80936e8:	6c75 7261 002e 6543 6c6c 6c75 7261 6120     ular..Cellular a
 80936f8:	726c 6165 7964 6520 616e 6c62 6465 002e     lready enabled..
 8093708:	6944 6173 6c62 6e69 2067 6543 6c6c 6c75     Disabling Cellul
 8093718:	7261 4300 6c65 756c 616c 2072 6c61 6572     ar.Cellular alre
 8093728:	6461 2079 6964 6173 6c62 6465 002e 6554     ady disabled..Te
 8093738:	706d 7265 7461 7275 2065 6e75 7469 2073     mperature units 
 8093748:	6c61 6572 6461 2079 6573 2074 6f74 4620     already set to F
 8093758:	7261 6e65 6965 2e74 5400 6d65 6570 6172     areneit..Tempera
 8093768:	7574 6572 7520 696e 7374 6120 726c 6165     ture units alrea
 8093778:	7964 7320 7465 7420 206f 6543 636c 7569     dy set to Celciu
 8093788:	2e73 4400 7369 6261 696c 676e 6e20 7765     s..Disabling new
 8093798:	7420 6d65 6570 6172 7574 6572 7320 6e65      temperature sen
 80937a8:	6f73 0072 6554 706d 7265 7461 7275 2065     sor.Temperature 
 80937b8:	6573 736e 726f 6120 726c 6165 7964 6420     sensor already d
 80937c8:	7369 6261 656c 0064 6554 706d 7265 7461     isabled.Temperat
 80937d8:	7275 2065 6573 736e 726f 6120 726c 6165     ure sensor alrea
 80937e8:	7964 6520 616e 6c62 6465 5400 6d65 6570     dy enabled.Tempe
 80937f8:	6172 7574 2065 6573 736e 726f 6e20 776f     ratue sensor now
 8093808:	6520 616e 6c62 6465 4100 616e 6f6c 2067      enabled.Analog 
 8093818:	6572 6461 6e69 2067 666f 6f20 6f7a 656e     reading of ozone
 8093828:	6120 726c 6165 7964 6520 616e 6c62 6465      already enabled
 8093838:	4100 616e 6f6c 2067 6572 6461 6e69 2067     .Analog reading 
 8093848:	666f 6f20 6f7a 656e 6e20 776f 6520 616e     of ozone now ena
 8093858:	6c62 6465 4400 6769 7469 6c61 7220 6165     bled.Digital rea
 8093868:	6964 676e 6f20 2066 7a6f 6e6f 2065 6c61     ding of ozone al
 8093878:	6572 6461 2079 6e65 6261 656c 0064 6944     ready enabled.Di
 8093888:	6967 6174 206c 6572 6461 6e69 2067 666f     gital reading of
 8093898:	6f20 6f7a 656e 6e20 776f 6520 616e 6c62      ozone now enabl
 80938a8:	6465 4f00 7475 7570 7474 6e69 2067 5047     ed.Outputting GP
 80938b8:	2053 6f63 746e 6e69 6f75 7375 796c 4200     S continuously.B
 80938c8:	7461 6574 7972 7420 7268 7365 6f68 646c     attery threshold
 80938d8:	6120 726c 6165 7964 6520 616e 6c62 6465      already enabled
 80938e8:	4500 616e 6c62 6e69 2067 6162 7474 7265     .Enabling batter
 80938f8:	2079 6874 6572 6873 6c6f 2064 696c 696d     y threshold limi
 8093908:	6974 676e 4200 7461 6574 7972 7420 7268     ting.Battery thr
 8093918:	7365 6f68 646c 6120 726c 6165 7964 6420     eshold already d
 8093928:	7369 6261 656c 0064 6944 6173 6c62 6e69     isabled.Disablin
 8093938:	2067 6162 7474 7265 2079 6874 6572 6873     g battery thresh
 8093948:	6c6f 2064 696c 696d 6974 676e 4500 616e     old limiting.Ena
 8093958:	6c62 6e69 2067 6f6c 2077 6f70 6577 2072     bling low power 
 8093968:	6f66 2072 7067 0073 7554 6e72 6e69 2067     for gps.Turning 
 8093978:	666f 2066 6162 6674 7465 4100 6c6c 776f     off batfet.Allow
 8093988:	6e69 2067 6162 6674 7465 7420 206f 7574     ing batfet to tu
 8093998:	6e72 6f20 006e 6944 6173 6c62 6e69 2067     rn on.Disabling 
 80939a8:	4241 2043 6f6c 6967 2063 6f66 2072 4f43     ABC logic for CO
 80939b8:	2032 6573 736e 726f 4100 4342 6c20 676f     2 sensor.ABC log
 80939c8:	6369 6120 726c 6165 7964 6420 7369 6261     ic already disab
 80939d8:	656c 0064 6e45 6261 696c 676e 6120 6362     led.Enabling abc
 80939e8:	6c20 676f 6369 6620 726f 4320 324f 7320      logic for CO2 s
 80939f8:	6e65 6f73 0072 4241 2043 6f6c 6967 2063     ensor.ABC logic 
 8093a08:	6c61 6572 6461 2079 6e65 6261 656c 0064     already enabled.
 8093a18:	6e45 6261 696c 676e 4820 4849 3138 3032     Enabling HIH8120
 8093a28:	5220 2048 6573 736e 726f 4400 7369 6261      RH sensor.Disab
 8093a38:	696c 676e 4820 4849 3138 3032 5220 2048     ling HIH8120 RH 
 8093a48:	6573 736e 726f 4e00 776f 7220 6165 6964     sensor.Now readi
 8093a58:	676e 4320 204f 7266 6d6f 5520 3032 412d     ng CO from U20-A
 8093a68:	706c 6168 0032 6f4e 2077 6572 6461 6e69     lpha2.Now readin
 8093a78:	2067 4f43 6620 6f72 206d 3155 2d39 6c41     g CO from U19-Al
 8093a88:	6870 3161 5200 7365 7465 6e69 2067 6874     pha1.Reseting th
 8093a98:	2065 4f43 2032 6573 736e 726f 4100 5050     e CO2 sensor.APP
 8093aa8:	5620 7265 6973 6e6f 203a 4500 616e 6c62      Version: .Enabl
 8093ab8:	6e69 2067 7a4f 6e6f 0065 7a4f 6e6f 2065     ing Ozone.Ozone 
 8093ac8:	6c61 6572 6461 2079 6e65 6261 656c 0064     already enabled.
 8093ad8:	6944 6173 6c62 6e69 2067 7a4f 6e6f 0065     Disabling Ozone.
 8093ae8:	7a4f 6e6f 2065 6c61 6572 6461 2079 6964     Ozone already di
 8093af8:	6173 6c62 6465 4500 616e 6c62 6e69 2067     sabled.Enabling 
 8093b08:	4f56 2743 0073 4f56 2743 2073 6c61 6572     VOC's.VOC's alre
 8093b18:	6461 2079 6e65 6261 656c 0064 6944 6173     ady enabled.Disa
 8093b28:	6c62 6e69 2067 4f56 2743 0073 4f56 2743     bling VOC's.VOC'
 8093b38:	2073 6c61 6572 6461 2079 6964 6173 6c62     s already disabl
 8093b48:	6465 4600 7561 746c 203a 5300 7379 6574     ed.Fault: .Syste
 8093b58:	206d 7473 7461 7375 203a 4f00 7475 7570     m status: .Outpu
 8093b68:	7474 6e69 2067 6f6e 6d72 6c61 796c 4f00     tting normally.O
 8093b78:	7475 7570 7474 6e69 2067 6e6f 796c 5020     utputting only P
 8093b88:	004d 754f 7074 7475 6974 676e 5620 434f     M.Outputting VOC
 8093b98:	2073 6f63 746e 6e69 6f75 7375 796c 2021     s continuously! 
 8093ba8:	5020 6572 7373 6120 796e 6220 7475 6f74      Press any butto
 8093bb8:	206e 6f74 6520 6978 2e74 2e2e 5400 6f56     n to exit....TVo
 8093bc8:	7363 253d 2e31 6630 202c 6554 706d 253d     cs=%1.0f, Temp=%
 8093bd8:	2e31 6631 202c 7270 7365 3d73 3125 312e     1.1f, press=%1.1
 8093be8:	2c66 7220 3d68 3125 312e 0a66 000d 6944     f, rh=%1.1f...Di
 8093bf8:	6173 6c62 6e69 2067 6573 736e 6269 656c     sabling sensible
 8093c08:	6920 746f 6420 7461 2061 7570 6873 002e      iot data push..
 8093c18:	6944 6173 6c62 6e69 2067 6163 2072 6f74     Disabling car to
 8093c28:	7070 7265 7020 776f 7265 202e 0020 6e45     pper power.  .En
 8093c38:	6261 696c 676e 6320 7261 7420 706f 6570     abling car toppe
 8093c48:	2072 6f70 6577 2e72 2020 6649 6e20 206f     r power.  If no 
 8093c58:	7865 6574 6e72 6c61 7020 776f 7265 202c     external power, 
 8093c68:	7973 7473 6d65 7720 6c69 206c 7574 6e72     system will turn
 8093c78:	6f20 6666 002e 6944 6173 6c62 6e69 2067      off..Disabling 
 8093c88:	6f67 676f 656c 6c20 636f 7461 6f69 206e     google location 
 8093c98:	6573 7672 6369 7365 002e 6e45 6261 696c     services..Enabli
 8093ca8:	676e 6720 6f6f 6c67 2065 6f6c 6163 6974     ng google locati
 8093cb8:	6e6f 7320 7265 6976 6563 2e73 4700 7465     on services..Get
 8093cc8:	6974 676e 6320 6c65 756c 616c 2072 6e69     ting cellular in
 8093cd8:	6f66 6d72 7461 6f69 2c6e 7420 6968 2073     formation, this 
 8093ce8:	616d 2079 6174 656b 6120 7720 6968 656c     may take a while
 8093cf8:	2e2e 002e 4d49 4945 253d 0073 4d49 4953     ....IMEI=%s.IMSI
 8093d08:	253d 0073 4349 4943 3d44 7325 4500 6978     =%s.ICCID=%s.Exi
 8093d18:	6974 676e 7320 7265 6169 206c 656d 756e     ting serial menu
 8093d28:	2e2e 002e 6542 6f66 6572 7220 6165 6964     ....Before readi
 8093d38:	676e 6220 656d 6200 6665 726f 2065 6572     ng bme.before re
 8093d48:	6461 6e69 2067 6d62 0065 7270 7365 7573     ading bme.pressu
 8093d58:	6572 6320 726f 6572 7463 6f69 206e 6166     re correction fa
 8093d68:	7463 726f 6620 726f 4320 324f 253a 2e31     ctor for CO2:%1.
 8093d78:	6632 0d0a 4500 7272 726f 203a 7250 7365     2f...Error: Pres
 8093d88:	7573 6572 6f20 7475 6f20 2066 6172 676e     sure out of rang
 8093d98:	2c65 6e20 746f 7520 6973 676e 7020 6572     e, not using pre
 8093da8:	7373 7275 2065 6f63 7272 6365 6974 6e6f     ssure correction
 8093db8:	6620 726f 4320 324f 002e 7250 7365 7573      for CO2..Pressu
 8093dc8:	6572 253d 2e31 6632 0d0a 7000 326d 352e     re=%1.2f...pm2.5
 8093dd8:	6320 726f 6572 7463 6f69 206e 6166 7463      correction fact
 8093de8:	726f 203a 3125 322e 2c66 2520 2e31 6632     or: %1.2f, %1.2f
 8093df8:	0d0a 6900 636e 6d6f 696d 676e 6220 7479     ...incomming byt
 8093e08:	3a65 4300 6e6f 656e 7463 6e69 2067 6f74     e:.Connecting to
 8093e18:	6320 6c65 756c 616c 2072 656e 7774 726f      cellular networ
 8093e28:	006b 6661 6574 2072 6563 6c6c 6c75 7261     k.after cellular
 8093e38:	6e4f 4100 7466 7265 6320 6c65 756c 616c     On.After cellula
 8093e48:	4f72 006e 6641 6574 2072 6170 7472 6369     rOn.After partic
 8093e58:	656c 6320 6e6f 656e 7463 7300 7465 6974     le connect.setti
 8093e68:	676e 7420 6972 6465 635f 6c65 756c 616c     ng tried_cellula
 8093e78:	5f72 6f63 6e6e 6365 2074 6f74 6620 6c61     r_connect to fal
 8093e88:	6573 4400 7369 6f63 6e6e 6365 6974 676e     se.Disconnecting
 8093e98:	6620 6f72 206d 6563 6c6c 6c75 7261 6e20      from cellular n
 8093ea8:	7465 6f77 6b72 4700 696f 676e 7420 206f     etwork.Going to 
 8093eb8:	6c73 6565 2070 6562 6163 7375 2065 6162     sleep because ba
 8093ec8:	7474 7265 2079 7369 6220 6c65 776f 3220     ttery is below 2
 8093ed8:	2530 6320 6168 6772 0065 0000               0% charge...

08093ee4 <_ZTV4File>:
	...
 8093eec:	0b6f 0808 0b7f 0808 0bc5 0808 0bb9 0808     o...............
 8093efc:	0b53 0808 0b8d 0808 0bb3 0808 0bad 0808     S...............

08093f0c <_ZTV6SdFile>:
	...
 8093f14:	0b6d 0808 0b71 0808 0d6b 0808 0bbf 0808     m...q...k.......

08093f24 <_ZTV5SdFat>:
	...
 8093f2c:	0cf1 0808 0ce9 0808 0ce1 0808 0cd9 0808     ................
 8093f3c:	62b5 0806 0006 0064 0001 0001 127a 62b5     .b....d.....z..b
 8093f4c:	1106 0002 0000 831a 62b5 1106 0002 0001     .........b......
 8093f5c:	831a 0000                                   ....

08093f60 <_ZTV10PowerCheck>:
	...
 8093f68:	70fd 0808 7115 0808 6143 696c 7262 7461     .p...q..Calibrat
 8093f78:	6e69 2067 4f43 0032 6572 6461 6e69 2067     ing CO2.reading 
 8093f88:	4f43 2032 6573 736e 726f 7320 6174 7574     CO2 sensor statu
 8093f98:	0073 7546 636e 6320 646f 3a65 0020 7962     s.Func code: .by
 8093fa8:	6574 6320 756f 746e 203a 4d00 4253 203a     te count: .MSB: 
 8093fb8:	4c00 4253 203a 0000                         .LSB: ..

08093fc0 <_ZTV5SdSpi>:
	...
 8093fc8:	8341 0808 8351 0808 833d 0808 83c9 0808     A...Q...=.......
 8093fd8:	83ed 0808 83dd 0808 8431 0808               ........1...

08093fe4 <_ZTV7HIH61XX>:
	...
 8093fec:	93b5 0808 93c5 0808 9505 0808 7325 227b     ............%s{"
 8093ffc:	2269 253a 2c64 6c22 3a22 7525 222c 2263     i":%d,"l":%u,"c"
 809400c:	253a 2c64 6e22 3a22 6425 007d 227b 2263     :%d,"n":%d}.{"c"
 809401c:	7b3a 6f22 3a22 2522 2273 002c 6122 3a22     :{"o":"%s",."a":
 809402c:	005b 6564 6976 6563 6f4c 6163 6f74 0072     [.deviceLocator.
 809403c:	5441 5426 7000 6275 696c 6873 6f4c 6163     AT&T.publishLoca
 809404c:	6974 6e6f 7300 6163 446e 7461 3d61 7325     tion.scanData=%s
 809405c:	6800 6f6f 2d6b 6572 7073 6e6f 6573 252f     .hook-response/%
 809406c:	2f73 7325 0000 0000                         s/%s....

08094074 <_ZTV26CellularHelperCREGResponse>:
	...
 809407c:	a519 0808                                   ....

08094080 <_ZTV39CellularHelperEnvironmentResponseStaticILj4EE>:
	...
 8094088:	a07d 0808                                   }...

0809408c <_ZTV23GoogleMapsDeviceLocator>:
	...
 8094094:	95a5 0808 95c5 0808 5954 4550 555f 4b4e     ........TYPE_UNK
 80940a4:	4f4e 4e57 5400 5059 5f45 4b4f 5400 5059     NOWN.TYPE_OK.TYP
 80940b4:	5f45 5245 4f52 0052 5954 4550 435f 4e4f     E_ERROR.TYPE_CON
 80940c4:	454e 5443 5400 5059 5f45 4f4e 4143 5252     NECT.TYPE_NOCARR
 80940d4:	4549 0052 5954 4550 4e5f 444f 4149 544c     IER.TYPE_NODIALT
 80940e4:	4e4f 0045 5954 4550 425f 5355 0059 5954     ONE.TYPE_BUSY.TY
 80940f4:	4550 4e5f 414f 534e 4557 0052 5954 4550     PE_NOANSWER.TYPE
 8094104:	505f 4f52 504d 0054 5954 4550 505f 554c     _PROMPT.TYPE_PLU
 8094114:	0053 5954 4550 415f 4f42 5452 4445 7400     S.TYPE_ABORTED.t
 8094124:	7079 3d65 7830 7825 6300 6c65 756c 616c     ype=0x%x.cellula
 8094134:	2072 6572 7073 6e6f 6573 7420 7079 3d65     r response type=
 8094144:	7325 6c20 6e65 253d 0064 6e5c 5c00 0072     %s len=%d.\n.\r.
 8094154:	7830 3025 7832 6b00 7965 7420 6f6f 6c20     0x%02x.key too l
 8094164:	6e6f 2067 656b 3d79 7325 7620 6c61 6575     ong key=%s value
 8094174:	253d 0073 4152 0054 4d55 5354 4d00 4343     =%s.RAT.UMTS.MCC
 8094184:	4d00 434e 4c00 4341 4300 0049 5342 4349     .MNC.LAC.CI.BSIC
 8094194:	4100 4652 4e43 4100 4652 4e43 445f 4445     .ARFCN.ARFCN_DED
 80941a4:	5200 4c58 5645 5553 0042 5f54 4441 0056     .RXLEVSUB.T_ADV.
 80941b4:	5852 454c 0056 4c44 0046 4c55 0046 5352     RXLEV.DLF.ULF.RS
 80941c4:	5043 4c20 5645 5200 4341 5300 0043 4345     CP LEV.RAC.SC.EC
 80941d4:	304e 4c20 5645 7500 6b6e 6f6e 6e77 6b20     N0 LEV.unknown k
 80941e4:	7965 253d 2073 6176 756c 3d65 7325 4d00     ey=%s value=%s.M
 80941f4:	4343 003a 4152 3a54 6c00 7461 253d 2066     CC:.RAT:.lat=%f 
 8094204:	6f6c 3d6e 6625 6120 746c 253d 2064 6e75     lon=%f alt=%d un
 8094214:	6563 7472 6961 746e 3d79 6425 7600 6c61     certainty=%d.val
 8094224:	6469 663d 6c61 6573 2500 2c64 6425 222c     id=false.%d,%d,"
 8094234:	7825 2c22 2522 2278 252c 0064 7473 7461     %x","%x",%d.stat
 8094244:	253d 2064 616c 3d63 7830 7825 6320 3d69     =%d lac=0x%x ci=
 8094254:	7830 7825 7220 7461 253d 0064 5441 432b     0x%x rat=%d.AT+C
 8094264:	4d47 0d49 000a 5441 432b 4d47 0d4d 000a     GMI...AT+CGMM...
 8094274:	5441 432b 5347 0d4e 000a 4343 4449 4100     AT+CGSN...CCID.A
 8094284:	2b54 4343 4449 0a0d 5300 5241 2d41 3452     T+CCID...SARA-R4
 8094294:	5500 4f44 4e50 4100 2b54 4455 504f 3d4e     .UDOPN.AT+UDOPN=
 80942a4:	6425 0a0d 4300 4547 0044 5441 432b 4547     %d...CGED.AT+CGE
 80942b4:	3d44 6425 0a0d 4100 2b54 5243 4745 323d     D=%d...AT+CREG=2
 80942c4:	0a0d 4300 4552 0047 5441 432b 4552 3f47     ...CREG.AT+CREG?
 80942d4:	0a0d 4100 2b54 5243 4745 303d 0a0d 0a00     ...AT+CREG=0....
 80942e4:	252b 3a73 0020 0000                         +%s: ...

080942ec <_ZTV28CellularHelperStringResponse>:
	...
 80942f4:	a4e1 0808                                   ....

080942f8 <_ZTV32CellularHelperPlusStringResponse>:
	...
 8094300:	a519 0808                                   ....

08094304 <_ZTV33CellularHelperEnvironmentResponse>:
	...
 809430c:	a07d 0808                                   }...

08094310 <_ZZN4PMIC20getInputCurrentLimitEvE7mapping>:
 8094310:	0064 0096 01f4 0384 04b0 05dc 07d0 0bb8     d...............

08094320 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 8094320:	0800 1810 2820 3830 616e 006e 6e69 0066     .... (08nan.inf.
 8094330:	766f 0066 7061 0070 2b25 3330 3a64 3025     ovf.app.%+03d:%0
 8094340:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
 8094350:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

08094360 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8094368:	c2f5 0808 c2fb 0808 c339 0808 c309 0808     ........9.......
 8094378:	c2f7 0808                                   ....

0809437c <_ZTV9IPAddress>:
	...
 8094384:	c8a9 0808 c899 0808 c89b 0808               ............

08094390 <_ZTV9USBSerial>:
	...
 8094398:	c93d 0808 c9a3 0808 c97b 0808 b845 0808     =.......{...E...
 80943a8:	c96d 0808 c93f 0808 c94f 0808 c99d 0808     m...?...O.......
 80943b8:	c95f 0808 c939 0808                         _...9...

080943c0 <_ZTVN5spark13CellularClassE>:
	...
 80943c8:	cbbf 0808 cbb5 0808 cbab 0808 cb31 0808     ............1...
 80943d8:	cb9f 0808 0d83 0808 cb93 0808 cb8b 0808     ................
 80943e8:	cb81 0808 cb77 0808 cb3b 0808               ....w...;...

080943f4 <_ZTV11USARTSerial>:
	...
 80943fc:	0b51 0808 0d8f 0808 cc3b 0808 b845 0808     Q.......;...E...
 809440c:	cc0b 0808 cc27 0808 cc19 0808 cc35 0808     ....'.......5...
 809441c:	cbf9 0808 cbfd 0808                         ........

08094424 <_ZTV7TwoWire>:
	...
 809442c:	cd19 0808 cd63 0808 cd3b 0808 cd1b 0808     ....c...;.......
 809443c:	cd43 0808 cd4b 0808 cd53 0808 cd5b 0808     C...K...S...[...

0809444c <_ZTVN5spark12NetworkClassE>:
	...
 8094454:	ce71 0808 ce7b 0808 ce85 0808 ce8f 0808     q...{...........
 8094464:	ce99 0808 cea5 0808 ceb1 0808 cebd 0808     ................
 8094474:	cec5 0808 cecf 0808 ced9 0808 2575 3430     ............u%04
 8094484:	0078 0000                                   x...

08094488 <_ZTVN5spark16JSONBufferWriterE>:
	...
 8094490:	cf35 0808 cf37 0808 cf45 0808 cf6b 0808     5...7...E...k...

080944a0 <_ZSt7nothrow>:
 80944a0:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
 80944b0:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

080944c1 <day_name.4782>:
 80944c1:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 80944d1:	6972 6153                                    riSat

080944d6 <mon_name.4783>:
 80944d6:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 80944e6:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 80944f6:	4476 6365 0000                              vDec..

080944fc <__month_lengths>:
 80944fc:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 809450c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 809451c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 809452c:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 809453c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 809454c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 809455c:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
 809456c:	2500 6432 2500 322e 2f64 2e25 6432 252f     .%2d.%.2d/%.2d/%
 809457c:	322e 0064 6c25 0075 2d59 6d25 252d 0064     .2d.%lu.Y-%m-%d.
 809458c:	2a2e 0075 2e25 6433 2500 6c6c 0064 2e25     .*u.%.3d.%lld.%.
 809459c:	6432 253a 322e 3a64 2e25 6432 2500 302b     2d:%.2d:%.2d.%+0
 80945ac:	6c33 2564 322e 646c 6900 696e 7974 0000     3ld%.2ld.inity..

080945bc <fpi.6203>:
 80945bc:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 80945cc:	0000 0000                                   ....

080945d0 <fpinan.6239>:
 80945d0:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

080945e8 <tinytens>:
 80945e8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 80945f8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 8094608:	6f43 64ac 0628 1168 614a 006e 6546 0062     Co.d(.h.Jan.Feb.
 8094618:	614d 0072 7041 0072 614d 0079 754a 006e     Mar.Apr.May.Jun.
 8094628:	754a 006c 7541 0067 6553 0070 634f 0074     Jul.Aug.Sep.Oct.
 8094638:	6f4e 0076 6544 0063 614a 756e 7261 0079     Nov.Dec.January.
 8094648:	6546 7262 6175 7972 4d00 7261 6863 4100     February.March.A
 8094658:	7270 6c69 4a00 6e75 0065 754a 796c 4100     pril.June.July.A
 8094668:	6775 7375 0074 6553 7470 6d65 6562 0072     ugust.September.
 8094678:	634f 6f74 6562 0072 6f4e 6576 626d 7265     October.November
 8094688:	4400 6365 6d65 6562 0072 7553 006e 6f4d     .December.Sun.Mo
 8094698:	006e 7554 0065 6557 0064 6854 0075 7246     n.Tue.Wed.Thu.Fr
 80946a8:	0069 6153 0074 7553 646e 7961 4d00 6e6f     i.Sat.Sunday.Mon
 80946b8:	6164 0079 7554 7365 6164 0079 6557 6e64     day.Tuesday.Wedn
 80946c8:	7365 6164 0079 6854 7275 6473 7961 4600     esday.Thursday.F
 80946d8:	6972 6164 0079 6153 7574 6472 7961 2500     riday.Saturday.%
 80946e8:	2f6d 6425 252f 0079 6125 2520 2062 6525     m/%d/%y.%a %b %e
 80946f8:	2520 3a48 4d25 253a 2053 5925 4100 004d      %H:%M:%S %Y.AM.
 8094708:	6125 2520 2062 6525 2520 3a48 4d25 253a     %a %b %e %H:%M:%
 8094718:	2053 5a25 2520 0059 646d 2500 3a49 4d25     S %Z %Y.md.%I:%M
 8094728:	253a 2053 7025 0000                         :%S %p..

08094730 <_C_time_locale>:
 8094730:	4610 0809 4614 0809 4618 0809 461c 0809     .F...F...F...F..
 8094740:	4620 0809 4624 0809 4628 0809 462c 0809      F..$F..(F..,F..
 8094750:	4630 0809 4634 0809 4638 0809 463c 0809     0F..4F..8F..<F..
 8094760:	4640 0809 4648 0809 4651 0809 4657 0809     @F..HF..QF..WF..
 8094770:	4620 0809 465d 0809 4662 0809 4667 0809      F..]F..bF..gF..
 8094780:	466e 0809 4678 0809 4680 0809 4689 0809     nF..xF...F...F..
 8094790:	4692 0809 4696 0809 469a 0809 469e 0809     .F...F...F...F..
 80947a0:	46a2 0809 46a6 0809 46aa 0809 46ae 0809     .F...F...F...F..
 80947b0:	46b5 0809 46bc 0809 46c4 0809 46ce 0809     .F...F...F...F..
 80947c0:	46d7 0809 46de 0809 2cc6 0809 46e7 0809     .F...F...,...F..
 80947d0:	46f0 0809 4705 0809 3b87 0809 4708 0809     .F...G...;...G..
 80947e0:	4640 0809 4648 0809 4651 0809 4657 0809     @F..HF..QF..WF..
 80947f0:	4620 0809 465d 0809 4662 0809 4667 0809      F..]F..bF..gF..
 8094800:	466e 0809 4678 0809 4680 0809 4689 0809     nF..xF...F...F..
 8094810:	4720 0809 4723 0809 42e2 0809 42e2 0809      G..#G...B...B..
 8094820:	42e2 0809 42e2 0809 42e2 0809 5a54 4700     .B...B...B..TZ.G
 8094830:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
 8094840:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
 8094850:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
 8094860:	3a6e 6825 2575 006e                         n:%hu%n.

08094868 <_ctype_>:
 8094868:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 8094878:	2020 2020 2020 2020 2020 2020 2020 2020                     
 8094888:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 8094898:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80948a8:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80948b8:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80948c8:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80948d8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80948e8:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0809496c <_C_numeric_locale>:
 809496c:	3cfa 0809 42e2 0809 01b0 2000 4f50 4953     .<...B..... POSI
 809497c:	0058 0000                                   X...

08094980 <__mprec_bigtens>:
 8094980:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 8094990:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 80949a0:	bf3c 7f73 4fdd 7515                         <.s..O.u

080949a8 <__mprec_tens>:
 80949a8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 80949b8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 80949c8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 80949d8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 80949e8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 80949f8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 8094a08:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 8094a18:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 8094a28:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 8094a38:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 8094a48:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 8094a58:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 8094a68:	9db4 79d9 7843 44ea                         ...yCx.D

08094a70 <p05.6127>:
 8094a70:	0005 0000 0019 0000 007d 0000               ........}...

08094a7c <link_const_variable_data_end>:
 8094a7c:	08086975 	.word	0x08086975
 8094a80:	080870f7 	.word	0x080870f7
 8094a84:	080871ef 	.word	0x080871ef
 8094a88:	080872f3 	.word	0x080872f3
 8094a8c:	0808747f 	.word	0x0808747f
 8094a90:	08087839 	.word	0x08087839
 8094a94:	0808783d 	.word	0x0808783d
 8094a98:	08087e61 	.word	0x08087e61
 8094a9c:	08087e65 	.word	0x08087e65
 8094aa0:	08087e69 	.word	0x08087e69
 8094aa4:	08087e6d 	.word	0x08087e6d
 8094aa8:	0808832b 	.word	0x0808832b
 8094aac:	08088485 	.word	0x08088485
 8094ab0:	08088bc1 	.word	0x08088bc1
 8094ab4:	08088be5 	.word	0x08088be5
 8094ab8:	08088be9 	.word	0x08088be9
 8094abc:	08088f03 	.word	0x08088f03
 8094ac0:	08088f07 	.word	0x08088f07
 8094ac4:	080893b1 	.word	0x080893b1
 8094ac8:	080895a1 	.word	0x080895a1
 8094acc:	08089b79 	.word	0x08089b79
 8094ad0:	0808a5a1 	.word	0x0808a5a1
 8094ad4:	0808b251 	.word	0x0808b251
 8094ad8:	0808bc65 	.word	0x0808bc65
 8094adc:	0808c011 	.word	0x0808c011
 8094ae0:	0808c05d 	.word	0x0808c05d
 8094ae4:	0808cbc9 	.word	0x0808cbc9
 8094ae8:	0808cf21 	.word	0x0808cf21
 8094aec:	0808d249 	.word	0x0808d249
