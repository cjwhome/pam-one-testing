
d:/_Work/AQSync/pam-particle-firmware/target/1.4.4/electron/pam-particle-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000120e0  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  08092100  08092100  00022100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  08092108  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001c8  20000000  0809210c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000cf4  200001c8  200001c8  000401c8  2**3
                  ALLOC
  7 .module_info_suffix 00000028  080922d4  080922d4  000322d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080922fc  080922fc  000322fc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001b7567  00000000  00000000  00032300  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0002326a  00000000  00000000  001e9867  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002be4d  00000000  00000000  0020cad1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003218  00000000  00000000  0023891e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00005268  00000000  00000000  0023bb36  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000404ee  00000000  00000000  00240d9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000545e1  00000000  00000000  0028128c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000b894d  00000000  00000000  002d586d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000fd58  00000000  00000000  0038e1bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080020:	4809      	ldr	r0, [pc, #36]	; (8080048 <module_user_pre_init+0x28>)
 8080022:	490a      	ldr	r1, [pc, #40]	; (808004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080026:	4288      	cmp	r0, r1
 8080028:	d005      	beq.n	8080036 <module_user_pre_init+0x16>
 808002a:	4a09      	ldr	r2, [pc, #36]	; (8080050 <module_user_pre_init+0x30>)
 808002c:	4282      	cmp	r2, r0
 808002e:	d002      	beq.n	8080036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080030:	1a12      	subs	r2, r2, r0
 8080032:	f00c f838 	bl	808c0a6 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080036:	4807      	ldr	r0, [pc, #28]	; (8080054 <module_user_pre_init+0x34>)
 8080038:	4a07      	ldr	r2, [pc, #28]	; (8080058 <module_user_pre_init+0x38>)
 808003a:	2100      	movs	r1, #0
 808003c:	1a12      	subs	r2, r2, r0
 808003e:	f00c f83d 	bl	808c0bc <memset>
    return &link_heap_start;
}
 8080042:	4806      	ldr	r0, [pc, #24]	; (808005c <module_user_pre_init+0x3c>)
 8080044:	bd08      	pop	{r3, pc}
 8080046:	bf00      	nop
 8080048:	20000000 	.word	0x20000000
 808004c:	0809210c 	.word	0x0809210c
 8080050:	200001c8 	.word	0x200001c8
 8080054:	200001c8 	.word	0x200001c8
 8080058:	20000ebc 	.word	0x20000ebc
 808005c:	20000ebc 	.word	0x20000ebc

08080060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080062:	f009 fc45 	bl	80898f0 <module_user_init_hook>
 8080066:	4b07      	ldr	r3, [pc, #28]	; (8080084 <module_user_init+0x24>)
 8080068:	4c07      	ldr	r4, [pc, #28]	; (8080088 <module_user_init+0x28>)
 808006a:	461e      	mov	r6, r3
 808006c:	1ae4      	subs	r4, r4, r3
 808006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080070:	2500      	movs	r5, #0
 8080072:	42a5      	cmp	r5, r4
 8080074:	d004      	beq.n	8080080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 808007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808007c:	3501      	adds	r5, #1
 808007e:	e7f8      	b.n	8080072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080080:	bd70      	pop	{r4, r5, r6, pc}
 8080082:	bf00      	nop
 8080084:	08092074 	.word	0x08092074
 8080088:	080920fc 	.word	0x080920fc

0808008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 808008c:	f001 bf70 	b.w	8081f70 <setup>

08080090 <module_user_loop>:
}

void module_user_loop() {
 8080090:	b508      	push	{r3, lr}
    loop();
 8080092:	f005 fbd5 	bl	8085840 <loop>
    _post_loop();
}
 8080096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 808009a:	f009 bbeb 	b.w	8089874 <_post_loop>

0808009e <_Znwj>:
 808009e:	f008 ba6f 	b.w	8088580 <malloc>

080800a2 <_ZdlPv>:
 80800a2:	f008 ba75 	b.w	8088590 <free>

080800a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a6:	7800      	ldrb	r0, [r0, #0]
 80800a8:	fab0 f080 	clz	r0, r0
 80800ac:	0940      	lsrs	r0, r0, #5
 80800ae:	4770      	bx	lr

080800b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800b0:	2301      	movs	r3, #1
 80800b2:	7003      	strb	r3, [r0, #0]
 80800b4:	4770      	bx	lr

080800b6 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80800b6:	b148      	cbz	r0, 80800cc <null_ptr_check+0x16>
 80800b8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80800ba:	b13b      	cbz	r3, 80800cc <null_ptr_check+0x16>
 80800bc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80800be:	b12b      	cbz	r3, 80800cc <null_ptr_check+0x16>
 80800c0:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80800c2:	fab0 f080 	clz	r0, r0
 80800c6:	0940      	lsrs	r0, r0, #5
 80800c8:	4240      	negs	r0, r0
 80800ca:	4770      	bx	lr
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
 80800cc:	f04f 30ff 	mov.w	r0, #4294967295
		/* Device structure is fine */
		rslt = BME680_OK;
	}

	return rslt;
}
 80800d0:	4770      	bx	lr

080800d2 <set_mem_page>:

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
 80800d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80800d4:	4602      	mov	r2, r0
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
 80800d6:	4608      	mov	r0, r1

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
 80800d8:	460c      	mov	r4, r1
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
 80800da:	f7ff ffec 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80800de:	4605      	mov	r5, r0
 80800e0:	bb50      	cbnz	r0, 8080138 <set_mem_page+0x66>
		if (reg_addr > 0x7f)
			mem_page = BME680_MEM_PAGE1;
		else
			mem_page = BME680_MEM_PAGE0;
 80800e2:	f012 0f80 	tst.w	r2, #128	; 0x80

		if (mem_page != dev->mem_page) {
 80800e6:	78ca      	ldrb	r2, [r1, #3]
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (reg_addr > 0x7f)
			mem_page = BME680_MEM_PAGE1;
		else
			mem_page = BME680_MEM_PAGE0;
 80800e8:	bf14      	ite	ne
 80800ea:	2300      	movne	r3, #0
 80800ec:	2310      	moveq	r3, #16

		if (mem_page != dev->mem_page) {
 80800ee:	429a      	cmp	r2, r3
 80800f0:	d022      	beq.n	8080138 <set_mem_page+0x66>
			dev->mem_page = mem_page;
 80800f2:	70cb      	strb	r3, [r1, #3]

			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 80800f4:	6c8e      	ldr	r6, [r1, #72]	; 0x48
 80800f6:	2301      	movs	r3, #1
 80800f8:	f10d 0207 	add.w	r2, sp, #7
 80800fc:	21f3      	movs	r1, #243	; 0xf3
 80800fe:	7860      	ldrb	r0, [r4, #1]
 8080100:	47b0      	blx	r6
 8080102:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
			if (dev->com_rslt != 0)
 8080106:	b110      	cbz	r0, 808010e <set_mem_page+0x3c>
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
					&reg, 1);
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
 8080108:	f06f 0501 	mvn.w	r5, #1
 808010c:	e014      	b.n	8080138 <set_mem_page+0x66>
			if (dev->com_rslt != 0)
				rslt = BME680_E_COM_FAIL;

			if (rslt == BME680_OK) {
				reg = reg & (~BME680_MEM_PAGE_MSK);
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 808010e:	78e3      	ldrb	r3, [r4, #3]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 8080110:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
			if (dev->com_rslt != 0)
				rslt = BME680_E_COM_FAIL;

			if (rslt == BME680_OK) {
				reg = reg & (~BME680_MEM_PAGE_MSK);
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 8080112:	f003 0210 	and.w	r2, r3, #16
 8080116:	f89d 3007 	ldrb.w	r3, [sp, #7]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 808011a:	2173      	movs	r1, #115	; 0x73
			if (dev->com_rslt != 0)
				rslt = BME680_E_COM_FAIL;

			if (rslt == BME680_OK) {
				reg = reg & (~BME680_MEM_PAGE_MSK);
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 808011c:	f023 0310 	bic.w	r3, r3, #16
 8080120:	4313      	orrs	r3, r2
 8080122:	f88d 3007 	strb.w	r3, [sp, #7]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 8080126:	f10d 0207 	add.w	r2, sp, #7
 808012a:	2301      	movs	r3, #1
 808012c:	7860      	ldrb	r0, [r4, #1]
 808012e:	47b0      	blx	r6
 8080130:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
					&reg, 1);
				if (dev->com_rslt != 0)
 8080134:	2800      	cmp	r0, #0
 8080136:	d1e7      	bne.n	8080108 <set_mem_page+0x36>
			}
		}
	}

	return rslt;
}
 8080138:	4628      	mov	r0, r5
 808013a:	b002      	add	sp, #8
 808013c:	bd70      	pop	{r4, r5, r6, pc}

0808013e <boundary_check.isra.1.constprop.2>:
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
	int8_t rslt = BME680_OK;

	if (value != NULL) {
 808013e:	b140      	cbz	r0, 8080152 <boundary_check.isra.1.constprop.2+0x14>
			/* Auto correct the invalid value to minimum value */
			*value = min;
			dev->info_msg |= BME680_I_MIN_CORRECTION;
		}
		/* Check if value is above maximum value */
		if (*value > max) {
 8080140:	7803      	ldrb	r3, [r0, #0]
 8080142:	428b      	cmp	r3, r1
 8080144:	d908      	bls.n	8080158 <boundary_check.isra.1.constprop.2+0x1a>
			/* Auto correct the invalid value to maximum value */
			*value = max;
 8080146:	7001      	strb	r1, [r0, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 8080148:	7813      	ldrb	r3, [r2, #0]
 808014a:	f043 0302 	orr.w	r3, r3, #2
 808014e:	7013      	strb	r3, [r2, #0]
 8080150:	e002      	b.n	8080158 <boundary_check.isra.1.constprop.2+0x1a>
		}
	} else {
		rslt = BME680_E_NULL_PTR;
 8080152:	f04f 30ff 	mov.w	r0, #4294967295
 8080156:	4770      	bx	lr
 * @brief This internal API is used to validate the boundary
 * conditions.
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
	int8_t rslt = BME680_OK;
 8080158:	2000      	movs	r0, #0
	} else {
		rslt = BME680_E_NULL_PTR;
	}

	return rslt;
}
 808015a:	4770      	bx	lr

0808015c <bme680_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
 808015c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8080160:	4606      	mov	r6, r0
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080162:	4618      	mov	r0, r3

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
 8080164:	4688      	mov	r8, r1
 8080166:	4691      	mov	r9, r2
 8080168:	461d      	mov	r5, r3
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 808016a:	f7ff ffa4 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 808016e:	4604      	mov	r4, r0
 8080170:	b9a8      	cbnz	r0, 808019e <bme680_get_regs+0x42>
		if (dev->intf == BME680_SPI_INTF) {
 8080172:	78ab      	ldrb	r3, [r5, #2]
 8080174:	b93b      	cbnz	r3, 8080186 <bme680_get_regs+0x2a>
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
 8080176:	4629      	mov	r1, r5
 8080178:	4630      	mov	r0, r6
 808017a:	f7ff ffaa 	bl	80800d2 <set_mem_page>
			if (rslt == BME680_OK)
 808017e:	4604      	mov	r4, r0
 8080180:	b908      	cbnz	r0, 8080186 <bme680_get_regs+0x2a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
 8080182:	f046 0680 	orr.w	r6, r6, #128	; 0x80
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8080186:	6caf      	ldr	r7, [r5, #72]	; 0x48
 8080188:	464b      	mov	r3, r9
 808018a:	4642      	mov	r2, r8
 808018c:	4631      	mov	r1, r6
 808018e:	7868      	ldrb	r0, [r5, #1]
 8080190:	47b8      	blx	r7
		if (dev->com_rslt != 0)
 8080192:	2800      	cmp	r0, #0
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
			if (rslt == BME680_OK)
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8080194:	f885 0054 	strb.w	r0, [r5, #84]	; 0x54
		if (dev->com_rslt != 0)
			rslt = BME680_E_COM_FAIL;
 8080198:	bf18      	it	ne
 808019a:	f06f 0401 	mvnne.w	r4, #1
	}

	return rslt;
}
 808019e:	4620      	mov	r0, r4
 80801a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080801a4 <bme680_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme680_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme680_dev *dev)
{
 80801a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80801a8:	461e      	mov	r6, r3
 80801aa:	b08b      	sub	sp, #44	; 0x2c
 80801ac:	4683      	mov	fp, r0
 80801ae:	468a      	mov	sl, r1
 80801b0:	4614      	mov	r4, r2
	int8_t rslt;
	/* Length of the temporary buffer is 2*(length of register)*/
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 80801b2:	2100      	movs	r1, #0
 80801b4:	2228      	movs	r2, #40	; 0x28
 80801b6:	4668      	mov	r0, sp
 80801b8:	f00b ff80 	bl	808c0bc <memset>
	uint16_t index;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80801bc:	4630      	mov	r0, r6
 80801be:	f7ff ff7a 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80801c2:	4605      	mov	r5, r0
 80801c4:	bba8      	cbnz	r0, 8080232 <bme680_set_regs+0x8e>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
 80801c6:	1e63      	subs	r3, r4, #1
 80801c8:	2b12      	cmp	r3, #18
 80801ca:	d830      	bhi.n	808022e <bme680_set_regs+0x8a>
 80801cc:	f10d 0801 	add.w	r8, sp, #1
 80801d0:	465f      	mov	r7, fp
 80801d2:	46c1      	mov	r9, r8
 80801d4:	f10a 3aff 	add.w	sl, sl, #4294967295
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
 80801d8:	b2a4      	uxth	r4, r4
 80801da:	ebcb 0307 	rsb	r3, fp, r7
 80801de:	b29b      	uxth	r3, r3
 80801e0:	429c      	cmp	r4, r3
 80801e2:	d913      	bls.n	808020c <bme680_set_regs+0x68>
				if (dev->intf == BME680_SPI_INTF) {
 80801e4:	78b3      	ldrb	r3, [r6, #2]
 80801e6:	b943      	cbnz	r3, 80801fa <bme680_set_regs+0x56>
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
 80801e8:	4631      	mov	r1, r6
 80801ea:	7838      	ldrb	r0, [r7, #0]
 80801ec:	f7ff ff71 	bl	80800d2 <set_mem_page>
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 80801f0:	783b      	ldrb	r3, [r7, #0]
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
				if (dev->intf == BME680_SPI_INTF) {
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
 80801f2:	4605      	mov	r5, r0
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 80801f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80801f8:	e000      	b.n	80801fc <bme680_set_regs+0x58>
				} else {
					tmp_buff[(2 * index)] = reg_addr[index];
 80801fa:	783b      	ldrb	r3, [r7, #0]
 80801fc:	f808 3c01 	strb.w	r3, [r8, #-1]
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
 8080200:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8080204:	3701      	adds	r7, #1
 8080206:	f808 3b02 	strb.w	r3, [r8], #2
 808020a:	e7e6      	b.n	80801da <bme680_set_regs+0x36>
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
 808020c:	b98d      	cbnz	r5, 8080232 <bme680_set_regs+0x8e>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 808020e:	0063      	lsls	r3, r4, #1
 8080210:	3b01      	subs	r3, #1
 8080212:	6cf4      	ldr	r4, [r6, #76]	; 0x4c
 8080214:	b29b      	uxth	r3, r3
 8080216:	464a      	mov	r2, r9
 8080218:	f89d 1000 	ldrb.w	r1, [sp]
 808021c:	7870      	ldrb	r0, [r6, #1]
 808021e:	47a0      	blx	r4
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
 8080220:	2800      	cmp	r0, #0
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 8080222:	f886 0054 	strb.w	r0, [r6, #84]	; 0x54
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
 8080226:	bf18      	it	ne
 8080228:	f06f 0501 	mvnne.w	r5, #1
 808022c:	e001      	b.n	8080232 <bme680_set_regs+0x8e>
			}
		} else {
			rslt = BME680_E_INVALID_LENGTH;
 808022e:	f06f 0503 	mvn.w	r5, #3
		}
	}

	return rslt;
}
 8080232:	4628      	mov	r0, r5
 8080234:	b00b      	add	sp, #44	; 0x2c
 8080236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808023a <bme680_set_sensor_mode>:

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
 808023a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 808023c:	2374      	movs	r3, #116	; 0x74

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
 808023e:	4604      	mov	r4, r0
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 8080240:	f88d 3007 	strb.w	r3, [sp, #7]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080244:	f7ff ff37 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080248:	bba0      	cbnz	r0, 80802b4 <bme680_set_sensor_mode+0x7a>
 808024a:	4605      	mov	r5, r0
		/* Call recursively until in sleep */
		do {
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
 808024c:	4623      	mov	r3, r4
 808024e:	2201      	movs	r2, #1
 8080250:	f10d 0106 	add.w	r1, sp, #6
 8080254:	2074      	movs	r0, #116	; 0x74
 8080256:	f7ff ff81 	bl	808015c <bme680_get_regs>
			if (rslt == BME680_OK) {
 808025a:	b9a0      	cbnz	r0, 8080286 <bme680_set_sensor_mode+0x4c>
				/* Put to sleep before changing mode */
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
 808025c:	f89d 3006 	ldrb.w	r3, [sp, #6]

				if (pow_mode != BME680_SLEEP_MODE) {
 8080260:	f013 0503 	ands.w	r5, r3, #3
 8080264:	d011      	beq.n	808028a <bme680_set_sensor_mode+0x50>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 8080266:	f023 0303 	bic.w	r3, r3, #3
 808026a:	f88d 3006 	strb.w	r3, [sp, #6]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 808026e:	2201      	movs	r2, #1
 8080270:	4623      	mov	r3, r4
 8080272:	f10d 0106 	add.w	r1, sp, #6
 8080276:	f10d 0007 	add.w	r0, sp, #7
 808027a:	f7ff ff93 	bl	80801a4 <bme680_set_regs>
					dev->delay_ms(BME680_POLL_PERIOD_MS);
 808027e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8080280:	200a      	movs	r0, #10
 8080282:	4798      	blx	r3
 8080284:	e7e2      	b.n	808024c <bme680_set_sensor_mode+0x12>
				}
			}
		} while (pow_mode != BME680_SLEEP_MODE);
 8080286:	2d00      	cmp	r5, #0
 8080288:	d1e0      	bne.n	808024c <bme680_set_sensor_mode+0x12>

		/* Already in sleep */
		if (dev->power_mode != BME680_SLEEP_MODE) {
 808028a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 808028e:	b18b      	cbz	r3, 80802b4 <bme680_set_sensor_mode+0x7a>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
 8080290:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8080294:	f003 0303 	and.w	r3, r3, #3
 8080298:	f022 0203 	bic.w	r2, r2, #3
 808029c:	4313      	orrs	r3, r2
 808029e:	f88d 3006 	strb.w	r3, [sp, #6]
			if (rslt == BME680_OK)
 80802a2:	b938      	cbnz	r0, 80802b4 <bme680_set_sensor_mode+0x7a>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80802a4:	4623      	mov	r3, r4
 80802a6:	2201      	movs	r2, #1
 80802a8:	f10d 0106 	add.w	r1, sp, #6
 80802ac:	f10d 0007 	add.w	r0, sp, #7
 80802b0:	f7ff ff78 	bl	80801a4 <bme680_set_regs>
		}
	}

	return rslt;
}
 80802b4:	b003      	add	sp, #12
 80802b6:	bd30      	pop	{r4, r5, pc}

080802b8 <bme680_set_sensor_settings>:
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 80802b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
 80802bc:	2300      	movs	r3, #0
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 80802be:	b088      	sub	sp, #32
 80802c0:	4606      	mov	r6, r0
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80802c2:	4608      	mov	r0, r1
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 80802c4:	460c      	mov	r4, r1
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
 80802c6:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t count = 0;
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 80802ca:	9304      	str	r3, [sp, #16]
 80802cc:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 80802d0:	9306      	str	r3, [sp, #24]
 80802d2:	f8ad 301c 	strh.w	r3, [sp, #28]
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80802d6:	f7ff feee 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80802da:	2800      	cmp	r0, #0
 80802dc:	f040 8164 	bne.w	80805a8 <bme680_set_sensor_settings+0x2f0>
		if (desired_settings & BME680_GAS_MEAS_SEL)
 80802e0:	0732      	lsls	r2, r6, #28
	uint8_t reg_addr;
	uint8_t data = 0;
	uint8_t count = 0;
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
 80802e2:	f891 7044 	ldrb.w	r7, [r1, #68]	; 0x44

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (desired_settings & BME680_GAS_MEAS_SEL)
 80802e6:	d56a      	bpl.n	80803be <bme680_set_sensor_settings+0x106>
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
 80802e8:	2f01      	cmp	r7, #1

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
 80802ea:	f8ad 0008 	strh.w	r0, [sp, #8]
		uint8_t reg_data[2] = {0};
 80802ee:	f8ad 000c 	strh.w	r0, [sp, #12]

		if (dev->power_mode == BME680_FORCED_MODE) {
 80802f2:	d163      	bne.n	80803bc <bme680_set_sensor_settings+0x104>
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 80802f4:	235a      	movs	r3, #90	; 0x5a
 80802f6:	f88d 3008 	strb.w	r3, [sp, #8]
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
 80802fa:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
	int32_t var3;
	int32_t var4;
	int32_t var5;
	int32_t heatr_res_x100;

	if (temp < 200) /* Cap temperature */
 80802fe:	2bc7      	cmp	r3, #199	; 0xc7
 8080300:	d905      	bls.n	808030e <bme680_set_sensor_settings+0x56>
 8080302:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8080306:	bf28      	it	cs
 8080308:	f44f 73c8 	movcs.w	r3, #400	; 0x190
 808030c:	e000      	b.n	8080310 <bme680_set_sensor_settings+0x58>
		temp = 200;
 808030e:	23c8      	movs	r3, #200	; 0xc8
		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
 8080310:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 8080314:	2114      	movs	r1, #20
 8080316:	f502 3216 	add.w	r2, r2, #153600	; 0x25800
 808031a:	f202 1299 	addw	r2, r2, #409	; 0x199
 808031e:	4353      	muls	r3, r2
 8080320:	fb93 f3f1 	sdiv	r3, r3, r1
 8080324:	210a      	movs	r1, #10
 8080326:	f503 1348 	add.w	r3, r3, #3276800	; 0x320000
 808032a:	fb93 f3f1 	sdiv	r3, r3, r1
 808032e:	f994 2011 	ldrsb.w	r2, [r4, #17]
 8080332:	f994 0014 	ldrsb.w	r0, [r4, #20]
 8080336:	f502 7244 	add.w	r2, r2, #784	; 0x310
 808033a:	435a      	muls	r2, r3
 808033c:	f994 3004 	ldrsb.w	r3, [r4, #4]
 8080340:	4358      	muls	r0, r3
 8080342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080346:	fb90 f3f3 	sdiv	r3, r0, r3
 808034a:	021b      	lsls	r3, r3, #8
 808034c:	eb03 0162 	add.w	r1, r3, r2, asr #1
 8080350:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8080354:	3304      	adds	r3, #4
 8080356:	fb91 f2f3 	sdiv	r2, r1, r3
 808035a:	f994 1035 	ldrsb.w	r1, [r4, #53]	; 0x35
 808035e:	2383      	movs	r3, #131	; 0x83
 8080360:	434b      	muls	r3, r1
 8080362:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8080366:	fb92 f3f3 	sdiv	r3, r2, r3
 808036a:	2222      	movs	r2, #34	; 0x22
 808036c:	3bfa      	subs	r3, #250	; 0xfa
 808036e:	4353      	muls	r3, r2
 8080370:	2264      	movs	r2, #100	; 0x64
 8080372:	3332      	adds	r3, #50	; 0x32
 8080374:	fb93 f3f2 	sdiv	r3, r3, r2
 8080378:	f88d 300c 	strb.w	r3, [sp, #12]
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 808037c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
 8080380:	f88d 2009 	strb.w	r2, [sp, #9]
static uint8_t calc_heater_dur(uint16_t dur)
{
	uint8_t factor = 0;
	uint8_t durval;

	if (dur >= 0xfc0) {
 8080384:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
 8080388:	d20b      	bcs.n	80803a2 <bme680_set_sensor_settings+0xea>
 808038a:	2200      	movs	r2, #0
		durval = 0xff; /* Max duration*/
	} else {
		while (dur > 0x3F) {
 808038c:	2b3f      	cmp	r3, #63	; 0x3f
 808038e:	b2d1      	uxtb	r1, r2
 8080390:	f102 0201 	add.w	r2, r2, #1
 8080394:	d901      	bls.n	808039a <bme680_set_sensor_settings+0xe2>
			dur = dur / 4;
 8080396:	089b      	lsrs	r3, r3, #2
 8080398:	e7f8      	b.n	808038c <bme680_set_sensor_settings+0xd4>
			factor += 1;
		}
		durval = (uint8_t) (dur + (factor * 64));
 808039a:	eb03 1381 	add.w	r3, r3, r1, lsl #6
 808039e:	b2db      	uxtb	r3, r3
 80803a0:	e000      	b.n	80803a4 <bme680_set_sensor_settings+0xec>
{
	uint8_t factor = 0;
	uint8_t durval;

	if (dur >= 0xfc0) {
		durval = 0xff; /* Max duration*/
 80803a2:	23ff      	movs	r3, #255	; 0xff

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 80803a4:	f88d 300d 	strb.w	r3, [sp, #13]
			dev->gas_sett.nb_conv = 0;
 80803a8:	2300      	movs	r3, #0
 80803aa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		} else {
			rslt = BME680_W_DEFINE_PWR_MODE;
		}
		if (rslt == BME680_OK)
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 80803ae:	2202      	movs	r2, #2
 80803b0:	4623      	mov	r3, r4
 80803b2:	a903      	add	r1, sp, #12
 80803b4:	a802      	add	r0, sp, #8
 80803b6:	f7ff fef5 	bl	80801a4 <bme680_set_regs>
 80803ba:	e000      	b.n	80803be <bme680_set_sensor_settings+0x106>
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
 80803bc:	2001      	movs	r0, #1
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (desired_settings & BME680_GAS_MEAS_SEL)
			rslt = set_gas_config(dev);

		dev->power_mode = BME680_SLEEP_MODE;
 80803be:	2300      	movs	r3, #0
 80803c0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		if (rslt == BME680_OK)
 80803c4:	b910      	cbnz	r0, 80803cc <bme680_set_sensor_settings+0x114>
			rslt = bme680_set_sensor_mode(dev);
 80803c6:	4620      	mov	r0, r4
 80803c8:	f7ff ff37 	bl	808023a <bme680_set_sensor_mode>

		/* Selecting the filter */
		if (desired_settings & BME680_FILTER_SEL) {
 80803cc:	f006 0510 	and.w	r5, r6, #16
 80803d0:	b2ad      	uxth	r5, r5
 80803d2:	b305      	cbz	r5, 8080416 <bme680_set_sensor_settings+0x15e>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
 80803d4:	f104 0246 	add.w	r2, r4, #70	; 0x46
 80803d8:	2107      	movs	r1, #7
 80803da:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 80803de:	f7ff feae 	bl	808013e <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_ODR_FILT_ADDR;

			if (rslt == BME680_OK)
 80803e2:	b930      	cbnz	r0, 80803f2 <bme680_set_sensor_settings+0x13a>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80803e4:	4623      	mov	r3, r4
 80803e6:	2201      	movs	r2, #1
 80803e8:	f10d 0107 	add.w	r1, sp, #7
 80803ec:	2075      	movs	r0, #117	; 0x75
 80803ee:	f7ff feb5 	bl	808015c <bme680_get_regs>

			if (desired_settings & BME680_FILTER_SEL)
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 80803f2:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b

			reg_array[count] = reg_addr; /* Append configuration */
			data_array[count] = data;
			count++;
 80803f6:	2501      	movs	r5, #1

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);

			if (desired_settings & BME680_FILTER_SEL)
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 80803f8:	009b      	lsls	r3, r3, #2
 80803fa:	f003 021c 	and.w	r2, r3, #28
 80803fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8080402:	f023 031c 	bic.w	r3, r3, #28
 8080406:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
 8080408:	2275      	movs	r2, #117	; 0x75

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);

			if (desired_settings & BME680_FILTER_SEL)
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 808040a:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 808040e:	f88d 2010 	strb.w	r2, [sp, #16]
			data_array[count] = data;
 8080412:	f88d 3018 	strb.w	r3, [sp, #24]
			count++;
		}

		/* Selecting heater control for the sensor */
		if (desired_settings & BME680_HCNTRL_SEL) {
 8080416:	06b3      	lsls	r3, r6, #26
 8080418:	d522      	bpl.n	8080460 <bme680_set_sensor_settings+0x1a8>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
 808041a:	f104 0246 	add.w	r2, r4, #70	; 0x46
 808041e:	2108      	movs	r1, #8
 8080420:	f104 003d 	add.w	r0, r4, #61	; 0x3d
 8080424:	f7ff fe8b 	bl	808013e <boundary_check.isra.1.constprop.2>
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;

			if (rslt == BME680_OK)
 8080428:	b930      	cbnz	r0, 8080438 <bme680_set_sensor_settings+0x180>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 808042a:	4623      	mov	r3, r4
 808042c:	2201      	movs	r2, #1
 808042e:	f10d 0107 	add.w	r1, sp, #7
 8080432:	2070      	movs	r0, #112	; 0x70
 8080434:	f7ff fe92 	bl	808015c <bme680_get_regs>
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 8080438:	f89d 3007 	ldrb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 808043c:	2170      	movs	r1, #112	; 0x70
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 808043e:	f023 0208 	bic.w	r2, r3, #8
 8080442:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8080446:	f003 0308 	and.w	r3, r3, #8
 808044a:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
 808044c:	aa08      	add	r2, sp, #32
 808044e:	442a      	add	r2, r5
			data_array[count] = data;
			count++;
 8080450:	3501      	adds	r5, #1
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 8080452:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 8080456:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 808045a:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
 808045e:	b2ed      	uxtb	r5, r5
		}

		/* Selecting heater T,P oversampling for the sensor */
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
 8080460:	07b1      	lsls	r1, r6, #30
 8080462:	d033      	beq.n	80804cc <bme680_set_sensor_settings+0x214>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
 8080464:	f104 0246 	add.w	r2, r4, #70	; 0x46
 8080468:	2105      	movs	r1, #5
 808046a:	f104 0039 	add.w	r0, r4, #57	; 0x39
 808046e:	f7ff fe66 	bl	808013e <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_T_P_MODE_ADDR;

			if (rslt == BME680_OK)
 8080472:	b930      	cbnz	r0, 8080482 <bme680_set_sensor_settings+0x1ca>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8080474:	4623      	mov	r3, r4
 8080476:	2201      	movs	r2, #1
 8080478:	f10d 0107 	add.w	r1, sp, #7
 808047c:	2074      	movs	r0, #116	; 0x74
 808047e:	f7ff fe6d 	bl	808015c <bme680_get_regs>

			if (desired_settings & BME680_OST_SEL)
 8080482:	07f2      	lsls	r2, r6, #31
 8080484:	d509      	bpl.n	808049a <bme680_set_sensor_settings+0x1e2>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
 8080486:	f89d 3007 	ldrb.w	r3, [sp, #7]
 808048a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 808048e:	f003 031f 	and.w	r3, r3, #31
 8080492:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8080496:	f88d 3007 	strb.w	r3, [sp, #7]

			if (desired_settings & BME680_OSP_SEL)
 808049a:	07b3      	lsls	r3, r6, #30
 808049c:	d50b      	bpl.n	80804b6 <bme680_set_sensor_settings+0x1fe>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
 808049e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 80804a2:	009b      	lsls	r3, r3, #2
 80804a4:	f003 021c 	and.w	r2, r3, #28
 80804a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80804ac:	f023 031c 	bic.w	r3, r3, #28
 80804b0:	4313      	orrs	r3, r2
 80804b2:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr;
 80804b6:	ab08      	add	r3, sp, #32
 80804b8:	442b      	add	r3, r5
 80804ba:	2274      	movs	r2, #116	; 0x74
 80804bc:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 80804c0:	f89d 2007 	ldrb.w	r2, [sp, #7]
			count++;
 80804c4:	3501      	adds	r5, #1

			if (desired_settings & BME680_OSP_SEL)
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);

			reg_array[count] = reg_addr;
			data_array[count] = data;
 80804c6:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
 80804ca:	b2ed      	uxtb	r5, r5
		}

		/* Selecting humidity oversampling for the sensor */
		if (desired_settings & BME680_OSH_SEL) {
 80804cc:	0771      	lsls	r1, r6, #29
 80804ce:	d522      	bpl.n	8080516 <bme680_set_sensor_settings+0x25e>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
 80804d0:	f104 0246 	add.w	r2, r4, #70	; 0x46
 80804d4:	2105      	movs	r1, #5
 80804d6:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80804da:	f7ff fe30 	bl	808013e <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_OS_H_ADDR;

			if (rslt == BME680_OK)
 80804de:	b930      	cbnz	r0, 80804ee <bme680_set_sensor_settings+0x236>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80804e0:	4623      	mov	r3, r4
 80804e2:	2201      	movs	r2, #1
 80804e4:	f10d 0107 	add.w	r1, sp, #7
 80804e8:	2072      	movs	r0, #114	; 0x72
 80804ea:	f7ff fe37 	bl	808015c <bme680_get_regs>
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 80804ee:	f89d 3007 	ldrb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 80804f2:	2172      	movs	r1, #114	; 0x72
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
			reg_addr = BME680_CONF_OS_H_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 80804f4:	f023 0207 	bic.w	r2, r3, #7
 80804f8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80804fc:	f003 0307 	and.w	r3, r3, #7
 8080500:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
 8080502:	aa08      	add	r2, sp, #32
 8080504:	442a      	add	r2, r5
			data_array[count] = data;
			count++;
 8080506:	3501      	adds	r5, #1
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
			reg_addr = BME680_CONF_OS_H_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8080508:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 808050c:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 8080510:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
 8080514:	b2ed      	uxtb	r5, r5
		}

		/* Selecting the runGas and NB conversion settings for the sensor */
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
 8080516:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 808051a:	d03c      	beq.n	8080596 <bme680_set_sensor_settings+0x2de>
 808051c:	f104 0846 	add.w	r8, r4, #70	; 0x46
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
 8080520:	4642      	mov	r2, r8
 8080522:	2101      	movs	r1, #1
 8080524:	f104 003e 	add.w	r0, r4, #62	; 0x3e
 8080528:	f7ff fe09 	bl	808013e <boundary_check.isra.1.constprop.2>
				BME680_RUN_GAS_ENABLE, dev);
			if (rslt == BME680_OK) {
 808052c:	b968      	cbnz	r0, 808054a <bme680_set_sensor_settings+0x292>
				/* Validate boundary conditions */
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
 808052e:	4642      	mov	r2, r8
 8080530:	210a      	movs	r1, #10
 8080532:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8080536:	f7ff fe02 	bl	808013e <boundary_check.isra.1.constprop.2>
					BME680_NBCONV_MAX, dev);
			}

			reg_addr = BME680_CONF_ODR_RUN_GAS_NBC_ADDR;

			if (rslt == BME680_OK)
 808053a:	b930      	cbnz	r0, 808054a <bme680_set_sensor_settings+0x292>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 808053c:	4623      	mov	r3, r4
 808053e:	2201      	movs	r2, #1
 8080540:	f10d 0107 	add.w	r1, sp, #7
 8080544:	2071      	movs	r0, #113	; 0x71
 8080546:	f7ff fe09 	bl	808015c <bme680_get_regs>

			if (desired_settings & BME680_RUN_GAS_SEL)
 808054a:	0672      	lsls	r2, r6, #25
 808054c:	d50b      	bpl.n	8080566 <bme680_set_sensor_settings+0x2ae>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
 808054e:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8080552:	011b      	lsls	r3, r3, #4
 8080554:	f003 0210 	and.w	r2, r3, #16
 8080558:	f89d 3007 	ldrb.w	r3, [sp, #7]
 808055c:	f023 0310 	bic.w	r3, r3, #16
 8080560:	4313      	orrs	r3, r2
 8080562:	f88d 3007 	strb.w	r3, [sp, #7]

			if (desired_settings & BME680_NBCONV_SEL)
 8080566:	0633      	lsls	r3, r6, #24
 8080568:	d50a      	bpl.n	8080580 <bme680_set_sensor_settings+0x2c8>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
 808056a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 808056e:	f023 020f 	bic.w	r2, r3, #15
 8080572:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8080576:	f003 030f 	and.w	r3, r3, #15
 808057a:	4313      	orrs	r3, r2
 808057c:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 8080580:	ab08      	add	r3, sp, #32
 8080582:	442b      	add	r3, r5
 8080584:	2271      	movs	r2, #113	; 0x71
 8080586:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 808058a:	f89d 2007 	ldrb.w	r2, [sp, #7]
			count++;
 808058e:	3501      	adds	r5, #1

			if (desired_settings & BME680_NBCONV_SEL)
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);

			reg_array[count] = reg_addr; /* Append configuration */
			data_array[count] = data;
 8080590:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
 8080594:	b2ed      	uxtb	r5, r5
		}

		if (rslt == BME680_OK)
 8080596:	b928      	cbnz	r0, 80805a4 <bme680_set_sensor_settings+0x2ec>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
 8080598:	4623      	mov	r3, r4
 808059a:	462a      	mov	r2, r5
 808059c:	a906      	add	r1, sp, #24
 808059e:	a804      	add	r0, sp, #16
 80805a0:	f7ff fe00 	bl	80801a4 <bme680_set_regs>

		/* Restore previous intended power mode */
		dev->power_mode = intended_power_mode;
 80805a4:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
	}

	return rslt;
}
 80805a8:	b008      	add	sp, #32
 80805aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080805b0 <bme680_get_profile_dur>:

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
 80805b0:	b513      	push	{r0, r1, r4, lr}
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80805b2:	4b18      	ldr	r3, [pc, #96]	; (8080614 <bme680_get_profile_dur+0x64>)

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
 80805b4:	4604      	mov	r4, r0
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80805b6:	6818      	ldr	r0, [r3, #0]
 80805b8:	889b      	ldrh	r3, [r3, #4]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80805ba:	aa02      	add	r2, sp, #8
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80805bc:	f8ad 3004 	strh.w	r3, [sp, #4]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80805c0:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80805c4:	9000      	str	r0, [sp, #0]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80805c6:	4413      	add	r3, r2
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 80805c8:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 80805cc:	a802      	add	r0, sp, #8
 80805ce:	4402      	add	r2, r0
 80805d0:	f812 2c08 	ldrb.w	r2, [r2, #-8]
{
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80805d4:	f813 3c08 	ldrb.w	r3, [r3, #-8]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 80805d8:	4413      	add	r3, r2
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 80805da:	f891 2038 	ldrb.w	r2, [r1, #56]	; 0x38
 80805de:	4402      	add	r2, r0

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
 80805e0:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 80805e4:	4413      	add	r3, r2
 80805e6:	f240 72ab 	movw	r2, #1963	; 0x7ab
 80805ea:	4353      	muls	r3, r2
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 80805ec:	f503 5395 	add.w	r3, r3, #4768	; 0x12a0
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 80805f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 80805f4:	3319      	adds	r3, #25
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 80805f6:	fbb3 f3f2 	udiv	r3, r3, r2

	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */

	*duration = (uint16_t) tph_dur;
 80805fa:	3301      	adds	r3, #1
 80805fc:	b29b      	uxth	r3, r3
 80805fe:	8023      	strh	r3, [r4, #0]

	/* Get the gas duration only when the run gas is enabled */
	if (dev->gas_sett.run_gas) {
 8080600:	f891 203e 	ldrb.w	r2, [r1, #62]	; 0x3e
 8080604:	b11a      	cbz	r2, 808060e <bme680_get_profile_dur+0x5e>
		/* The remaining time should be used for heating */
		*duration += dev->gas_sett.heatr_dur;
 8080606:	f8b1 2042 	ldrh.w	r2, [r1, #66]	; 0x42
 808060a:	4413      	add	r3, r2
 808060c:	8023      	strh	r3, [r4, #0]
	}
}
 808060e:	b002      	add	sp, #8
 8080610:	bd10      	pop	{r4, pc}
 8080612:	bf00      	nop
 8080614:	0808ef68 	.word	0x0808ef68

08080618 <bme680_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 8080618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808061c:	4680      	mov	r8, r0
 808061e:	b089      	sub	sp, #36	; 0x24
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080620:	4608      	mov	r0, r1
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 8080622:	460c      	mov	r4, r1
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080624:	f7ff fd47 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080628:	4605      	mov	r5, r0
 808062a:	2800      	cmp	r0, #0
 808062c:	f040 8167 	bne.w	80808fe <bme680_get_sensor_data+0x2e6>
 * @brief This internal API is used to calculate the field data of sensor.
 */
static int8_t read_field_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
	int8_t rslt;
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 8080630:	af04      	add	r7, sp, #16
 8080632:	4601      	mov	r1, r0
 8080634:	220f      	movs	r2, #15
 8080636:	4638      	mov	r0, r7
 8080638:	f00b fd40 	bl	808c0bc <memset>
	uint16_t adc_hum;
	uint16_t adc_gas_res;
	uint8_t tries = 10;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 808063c:	4620      	mov	r0, r4
 808063e:	f7ff fd3a 	bl	80800b6 <null_ptr_check>
 8080642:	4605      	mov	r5, r0
 8080644:	260a      	movs	r6, #10
	do {
		if (rslt == BME680_OK) {
 8080646:	2d00      	cmp	r5, #0
 8080648:	f040 8153 	bne.w	80808f2 <bme680_get_sensor_data+0x2da>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 808064c:	4623      	mov	r3, r4
 808064e:	220f      	movs	r2, #15
 8080650:	4639      	mov	r1, r7
 8080652:	201d      	movs	r0, #29
 8080654:	f7ff fd82 	bl	808015c <bme680_get_regs>
 8080658:	4605      	mov	r5, r0
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
 808065a:	f89d 0010 	ldrb.w	r0, [sp, #16]
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 808065e:	f89d e01e 	ldrb.w	lr, [sp, #30]
		if (rslt == BME680_OK) {
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 8080662:	f000 030f 	and.w	r3, r0, #15
 8080666:	f888 3001 	strb.w	r3, [r8, #1]
			data->meas_index = buff[1];
 808066a:	f89d 3011 	ldrb.w	r3, [sp, #17]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 808066e:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
			data->meas_index = buff[1];
 8080672:	f888 3002 	strb.w	r3, [r8, #2]

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 8080676:	f89d 3012 	ldrb.w	r3, [sp, #18]
 808067a:	f89d 9013 	ldrb.w	r9, [sp, #19]
 808067e:	9300      	str	r3, [sp, #0]
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8080680:	f89d 3018 	ldrb.w	r3, [sp, #24]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
			data->meas_index = buff[1];

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
 8080684:	f89d c014 	ldrb.w	ip, [sp, #20]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8080688:	9301      	str	r3, [sp, #4]
 808068a:	f89d 3019 	ldrb.w	r3, [sp, #25]
			data->meas_index = buff[1];

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 808068e:	f89d b015 	ldrb.w	fp, [sp, #21]
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8080692:	9302      	str	r3, [sp, #8]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 8080694:	f89d 301d 	ldrb.w	r3, [sp, #29]
			data->meas_index = buff[1];

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 8080698:	f89d 1016 	ldrb.w	r1, [sp, #22]
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 808069c:	9303      	str	r3, [sp, #12]
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 808069e:	fa4f f38e 	sxtb.w	r3, lr
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80806a2:	f003 0a20 	and.w	sl, r3, #32
 80806a6:	ea40 000a 	orr.w	r0, r0, sl
 80806aa:	f003 0310 	and.w	r3, r3, #16
 80806ae:	4318      	orrs	r0, r3
 80806b0:	b240      	sxtb	r0, r0

			if (data->status & BME680_NEW_DATA_MSK) {
 80806b2:	2800      	cmp	r0, #0

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
 80806b4:	f89d 2017 	ldrb.w	r2, [sp, #23]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80806b8:	f888 0000 	strb.w	r0, [r8]

			if (data->status & BME680_NEW_DATA_MSK) {
 80806bc:	f280 8116 	bge.w	80808ec <bme680_get_sensor_data+0x2d4>
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 80806c0:	0912      	lsrs	r2, r2, #4
 80806c2:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
 80806c6:	ea41 3b0b 	orr.w	fp, r1, fp, lsl #12
 80806ca:	8ae1      	ldrh	r1, [r4, #22]
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 80806cc:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 80806d0:	0049      	lsls	r1, r1, #1
 80806d2:	ebc1 01db 	rsb	r1, r1, fp, lsr #3
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 80806d6:	460a      	mov	r2, r1
 80806d8:	17cb      	asrs	r3, r1, #31
 80806da:	105b      	asrs	r3, r3, #1
 80806dc:	ea4f 0232 	mov.w	r2, r2, rrx
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 80806e0:	fb02 f603 	mul.w	r6, r2, r3
 80806e4:	fba2 2302 	umull	r2, r3, r2, r2
 80806e8:	ea4f 3a12 	mov.w	sl, r2, lsr #12
 80806ec:	f994 201a 	ldrsb.w	r2, [r4, #26]
 80806f0:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 80806f4:	ea4a 5a03 	orr.w	sl, sl, r3, lsl #20
 80806f8:	ea4f 3b23 	mov.w	fp, r3, asr #12
 80806fc:	0113      	lsls	r3, r2, #4
 80806fe:	17df      	asrs	r7, r3, #31
 8080700:	fb0a f607 	mul.w	r6, sl, r7
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8080704:	fb80 0101 	smull	r0, r1, r0, r1
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080708:	fb03 660b 	mla	r6, r3, fp, r6
 808070c:	fbaa 2303 	umull	r2, r3, sl, r3
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8080710:	0ac0      	lsrs	r0, r0, #11
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080712:	4433      	add	r3, r6
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8080714:	0b92      	lsrs	r2, r2, #14
 8080716:	ea40 5041 	orr.w	r0, r0, r1, lsl #21
 808071a:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 808071e:	1883      	adds	r3, r0, r2
 8080720:	6323      	str	r3, [r4, #48]	; 0x30

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
 8080722:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8080726:	3380      	adds	r3, #128	; 0x80
 8080728:	121b      	asrs	r3, r3, #8
 808072a:	f8a8 3004 	strh.w	r3, [r8, #4]
	int32_t var2 = 0;
	int32_t var3 = 0;
	int32_t var4 = 0;
	int32_t pressure_comp = 0;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 808072e:	6b23      	ldr	r3, [r4, #48]	; 0x30
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8080730:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
	int32_t var2 = 0;
	int32_t var3 = 0;
	int32_t var4 = 0;
	int32_t pressure_comp = 0;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8080734:	105b      	asrs	r3, r3, #1
 8080736:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 808073a:	109a      	asrs	r2, r3, #2
 808073c:	4352      	muls	r2, r2
 808073e:	12d1      	asrs	r1, r2, #11
 8080740:	4348      	muls	r0, r1
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 8080742:	f9b4 1024 	ldrsh.w	r1, [r4, #36]	; 0x24
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8080746:	1352      	asrs	r2, r2, #13

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 8080748:	4359      	muls	r1, r3
 808074a:	0049      	lsls	r1, r1, #1
 808074c:	eb01 01a0 	add.w	r1, r1, r0, asr #2
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 8080750:	f9b4 001e 	ldrsh.w	r0, [r4, #30]
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
	pressure_comp = 1048576 - pres_adc;
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
	var4 = (1 << 31);
	if (pressure_comp >= var4)
		pressure_comp = ((pressure_comp / (uint32_t)var1) << 1);
 8080754:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 8080758:	4343      	muls	r3, r0
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 808075a:	f994 0020 	ldrsb.w	r0, [r4, #32]
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
	pressure_comp = 1048576 - pres_adc;
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
	var4 = (1 << 31);
	if (pressure_comp >= var4)
		pressure_comp = ((pressure_comp / (uint32_t)var1) << 1);
 808075e:	ea4c 1909 	orr.w	r9, ip, r9, lsl #4
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8080762:	0140      	lsls	r0, r0, #5
 8080764:	4342      	muls	r2, r0
 8080766:	10d2      	asrs	r2, r2, #3
 8080768:	eb02 0363 	add.w	r3, r2, r3, asr #1
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
	var1 = var1 >> 18;
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 808076c:	149b      	asrs	r3, r3, #18
 808076e:	8ba2      	ldrh	r2, [r4, #28]
 8080770:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8080774:	4353      	muls	r3, r2
	pressure_comp = 1048576 - pres_adc;
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
	var4 = (1 << 31);
	if (pressure_comp >= var4)
		pressure_comp = ((pressure_comp / (uint32_t)var1) << 1);
 8080776:	9a00      	ldr	r2, [sp, #0]
 8080778:	13db      	asrs	r3, r3, #15
 808077a:	ea49 3902 	orr.w	r9, r9, r2, lsl #12
 808077e:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
 8080782:	f5c9 1980 	rsb	r9, r9, #1048576	; 0x100000
 8080786:	0412      	lsls	r2, r2, #16
 8080788:	eb02 01a1 	add.w	r1, r2, r1, asr #2
 808078c:	f640 4235 	movw	r2, #3125	; 0xc35
 8080790:	eba9 3121 	sub.w	r1, r9, r1, asr #12
 8080794:	4351      	muls	r1, r2
 8080796:	fbb1 f3f3 	udiv	r3, r1, r3
 808079a:	005b      	lsls	r3, r3, #1
	else
		pressure_comp = ((pressure_comp << 1) / (uint32_t)var1);
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
		(pressure_comp >> 3)) >> 13)) >> 12;
 808079c:	10d9      	asrs	r1, r3, #3
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 808079e:	4349      	muls	r1, r1
 80807a0:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
 80807a4:	f9b4 0028 	ldrsh.w	r0, [r4, #40]	; 0x28
 80807a8:	1349      	asrs	r1, r1, #13
 80807aa:	434a      	muls	r2, r1
 80807ac:	1099      	asrs	r1, r3, #2
 80807ae:	4341      	muls	r1, r0
		pressure_comp = ((pressure_comp << 1) / (uint32_t)var1);
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
		(pressure_comp >> 3)) >> 13)) >> 12;
	var2 = ((int32_t)(pressure_comp >> 2) *
		(int32_t)dev->calib.par_p8) >> 13;
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 80807b0:	121e      	asrs	r6, r3, #8
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 80807b2:	1349      	asrs	r1, r1, #13
 80807b4:	eb01 3122 	add.w	r1, r1, r2, asr #12
 80807b8:	fb06 f206 	mul.w	r2, r6, r6
 80807bc:	4356      	muls	r6, r2
 80807be:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 80807c2:	4372      	muls	r2, r6
 80807c4:	eb01 4262 	add.w	r2, r1, r2, asr #17
 80807c8:	f994 1027 	ldrsb.w	r1, [r4, #39]	; 0x27
 80807cc:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
 80807d0:	eb03 1322 	add.w	r3, r3, r2, asr #4
 80807d4:	f8c8 3008 	str.w	r3, [r8, #8]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 80807d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
	var2 = ((int32_t) dev->calib.par_h2
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
 80807da:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 80807de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80807e2:	3380      	adds	r3, #128	; 0x80
 80807e4:	121b      	asrs	r3, r3, #8
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
	var2 = ((int32_t) dev->calib.par_h2
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
 80807e6:	4359      	muls	r1, r3
 80807e8:	2264      	movs	r2, #100	; 0x64
 80807ea:	fb91 f1f2 	sdiv	r1, r1, r2
 80807ee:	f994 000d 	ldrsb.w	r0, [r4, #13]
 80807f2:	4359      	muls	r1, r3
 80807f4:	4358      	muls	r0, r3
 80807f6:	1189      	asrs	r1, r1, #6
 80807f8:	fb90 f0f2 	sdiv	r0, r0, r2
 80807fc:	fb91 f1f2 	sdiv	r1, r1, r2
 8080800:	8967      	ldrh	r7, [r4, #10]
 8080802:	4401      	add	r1, r0
 8080804:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8080808:	4379      	muls	r1, r7
 808080a:	9801      	ldr	r0, [sp, #4]
 808080c:	128f      	asrs	r7, r1, #10
 808080e:	9902      	ldr	r1, [sp, #8]
 8080810:	8926      	ldrh	r6, [r4, #8]
 8080812:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 8080816:	f994 100c 	ldrsb.w	r1, [r4, #12]
 808081a:	eba0 1606 	sub.w	r6, r0, r6, lsl #4
 808081e:	4359      	muls	r1, r3
 8080820:	fb91 f1f2 	sdiv	r1, r1, r2
 8080824:	eba6 0061 	sub.w	r0, r6, r1, asr #1
 8080828:	fb00 f107 	mul.w	r1, r0, r7
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 808082c:	f994 0010 	ldrsb.w	r0, [r4, #16]
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
 8080830:	f00e 060f 	and.w	r6, lr, #15
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080834:	4343      	muls	r3, r0
 8080836:	fb93 f2f2 	sdiv	r2, r3, r2
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 808083a:	f240 503c 	movw	r0, #1340	; 0x53c
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 808083e:	7be3      	ldrb	r3, [r4, #15]
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080840:	ea4f 1e9e 	mov.w	lr, lr, lsr #6
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080844:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8080848:	138b      	asrs	r3, r1, #14
	var6 = (var4 * var5) >> 1;
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 808084a:	435b      	muls	r3, r3
 808084c:	1112      	asrs	r2, r2, #4
 808084e:	129b      	asrs	r3, r3, #10
 8080850:	4353      	muls	r3, r2
 8080852:	eb01 0363 	add.w	r3, r1, r3, asr #1
 8080856:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 808085a:	129b      	asrs	r3, r3, #10
 808085c:	4353      	muls	r3, r2
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
 808085e:	4a2a      	ldr	r2, [pc, #168]	; (8080908 <bme680_get_sensor_data+0x2f0>)
	var3 = var1 * var2;
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
	var6 = (var4 * var5) >> 1;
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8080860:	131b      	asrs	r3, r3, #12
 8080862:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
 8080866:	4293      	cmp	r3, r2
 8080868:	bfd4      	ite	le
 808086a:	f8c8 300c 	strle.w	r3, [r8, #12]
 808086e:	f8c8 200c 	strgt.w	r2, [r8, #12]
 8080872:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080876:	2205      	movs	r2, #5
 8080878:	2100      	movs	r1, #0
 808087a:	fbc3 0102 	smlal	r0, r1, r3, r2
		((int64_t) lookupTable1[gas_range])) >> 16;
 808087e:	4b23      	ldr	r3, [pc, #140]	; (808090c <bme680_get_sensor_data+0x2f4>)
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080880:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 8080884:	fba0 2307 	umull	r2, r3, r0, r7
 8080888:	fb07 3301 	mla	r3, r7, r1, r3
 808088c:	0c10      	lsrs	r0, r2, #16
 808088e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8080892:	1419      	asrs	r1, r3, #16
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080894:	9b03      	ldr	r3, [sp, #12]
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 8080896:	4f1e      	ldr	r7, [pc, #120]	; (8080910 <bme680_get_sensor_data+0x2f8>)
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080898:	ea4e 0e83 	orr.w	lr, lr, r3, lsl #2
 808089c:	ea4f 32ce 	mov.w	r2, lr, lsl #15

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 80808a0:	f857 e026 	ldr.w	lr, [r7, r6, lsl #2]
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 80808a4:	f112 427f 	adds.w	r2, r2, #4278190080	; 0xff000000

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 80808a8:	fbae 6700 	umull	r6, r7, lr, r0
 80808ac:	fb0e 7701 	mla	r7, lr, r1, r7
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 80808b0:	f04f 0300 	mov.w	r3, #0
 80808b4:	f143 33ff 	adc.w	r3, r3, #4294967295
 80808b8:	1812      	adds	r2, r2, r0
 80808ba:	414b      	adcs	r3, r1

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 80808bc:	0a70      	lsrs	r0, r6, #9
 80808be:	ea40 50c7 	orr.w	r0, r0, r7, lsl #23
 80808c2:	1279      	asrs	r1, r7, #9
 80808c4:	105f      	asrs	r7, r3, #1
 80808c6:	ea4f 0632 	mov.w	r6, r2, rrx
 80808ca:	1980      	adds	r0, r0, r6
 80808cc:	4179      	adcs	r1, r7
 80808ce:	f00b f875 	bl	808b9bc <__aeabi_ldivmod>
 80808d2:	f8c8 0010 	str.w	r0, [r8, #16]
	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		/* Reading the sensor data in forced mode only */
		rslt = read_field_data(data, dev);
		if (rslt == BME680_OK) {
 80808d6:	b995      	cbnz	r5, 80808fe <bme680_get_sensor_data+0x2e6>
			if (data->status & BME680_NEW_DATA_MSK)
 80808d8:	f998 3000 	ldrsb.w	r3, [r8]
 80808dc:	2b00      	cmp	r3, #0
				dev->new_fields = 1;
 80808de:	bfba      	itte	lt
 80808e0:	2301      	movlt	r3, #1
 80808e2:	f884 3045 	strblt.w	r3, [r4, #69]	; 0x45
			else
				dev->new_fields = 0;
 80808e6:	f884 5045 	strbge.w	r5, [r4, #69]	; 0x45
 80808ea:	e008      	b.n	80808fe <bme680_get_sensor_data+0x2e6>
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
				break;
			}
			/* Delay to poll the data */
			dev->delay_ms(BME680_POLL_PERIOD_MS);
 80808ec:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80808ee:	200a      	movs	r0, #10
 80808f0:	4798      	blx	r3
 80808f2:	3e01      	subs	r6, #1
		}
		tries--;
	} while (tries);
 80808f4:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 80808f8:	f47f aea5 	bne.w	8080646 <bme680_get_sensor_data+0x2e>

	if (!tries)
		rslt = BME680_W_NO_NEW_DATA;
 80808fc:	2502      	movs	r5, #2
				dev->new_fields = 0;
		}
	}

	return rslt;
}
 80808fe:	4628      	mov	r0, r5
 8080900:	b009      	add	sp, #36	; 0x24
 8080902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8080906:	bf00      	nop
 8080908:	000186a0 	.word	0x000186a0
 808090c:	20000000 	.word	0x20000000
 8080910:	20000040 	.word	0x20000040

08080914 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 8080914:	4770      	bx	lr

08080916 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
 8080916:	7c03      	ldrb	r3, [r0, #16]
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
 8080918:	4602      	mov	r2, r0
 808091a:	f003 0308 	and.w	r3, r3, #8
 808091e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8080922:	b12b      	cbz	r3, 8080930 <_ZN4File9availableEv+0x1a>
 8080924:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8080926:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
 8080928:	1a18      	subs	r0, r3, r0
 808092a:	bf48      	it	mi
 808092c:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
 8080930:	4770      	bx	lr

08080932 <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 8080932:	4770      	bx	lr

08080934 <_ZN4FileD1Ev>:
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
#if ARDUINO_FILE_USES_STREAM
class File : public FatFile, public Stream {
 8080934:	4770      	bx	lr

08080936 <_ZN6SdFileD0Ev>:
 8080936:	b510      	push	{r4, lr}
 8080938:	4604      	mov	r4, r0
 808093a:	212c      	movs	r1, #44	; 0x2c
 808093c:	f009 fef7 	bl	808a72e <_ZdlPvj>
 8080940:	4620      	mov	r0, r4
 8080942:	bd10      	pop	{r4, pc}

08080944 <_ZN4FileD0Ev>:
 8080944:	b510      	push	{r4, lr}
 8080946:	4604      	mov	r4, r0
 8080948:	2134      	movs	r1, #52	; 0x34
 808094a:	f009 fef0 	bl	808a72e <_ZdlPvj>
 808094e:	4620      	mov	r0, r4
 8080950:	bd10      	pop	{r4, pc}

08080952 <_ZN9PrintFile5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
 8080952:	3008      	adds	r0, #8
 8080954:	f006 bd16 	b.w	8087384 <_ZN7FatFile5writeEPKvj>

08080958 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
 8080958:	3010      	adds	r0, #16
 808095a:	f006 bd13 	b.w	8087384 <_ZN7FatFile5writeEPKvj>

0808095e <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
 808095e:	b507      	push	{r0, r1, r2, lr}
 8080960:	ab02      	add	r3, sp, #8
 8080962:	f803 1d01 	strb.w	r1, [r3, #-1]!
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
 8080966:	2201      	movs	r2, #1
 8080968:	4619      	mov	r1, r3
 808096a:	3010      	adds	r0, #16
 808096c:	f006 fd0a 	bl	8087384 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
 8080970:	b003      	add	sp, #12
 8080972:	f85d fb04 	ldr.w	pc, [sp], #4

08080976 <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
 8080976:	3010      	adds	r0, #16
 8080978:	f006 bc78 	b.w	808726c <_ZN7FatFile4syncEv>

0808097c <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
 808097c:	3010      	adds	r0, #16
 808097e:	f006 bba4 	b.w	80870ca <_ZN7FatFile4peekEv>

08080982 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
 8080982:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 8080984:	2201      	movs	r2, #1
 8080986:	f10d 0107 	add.w	r1, sp, #7
 808098a:	3010      	adds	r0, #16
 808098c:	f006 fae9 	bl	8086f62 <_ZN7FatFile4readEPvj>
 8080990:	2801      	cmp	r0, #1
 8080992:	bf0c      	ite	eq
 8080994:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
 8080998:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
 808099c:	b003      	add	sp, #12
 808099e:	f85d fb04 	ldr.w	pc, [sp], #4

080809a2 <_ZN9SdFatBase11writeBlocksEmPKhj>:
  }
  bool readBlocks(uint32_t block, uint8_t* dst, size_t n) {
    return m_sdCard.readBlocks(block, dst, n);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t n) {
    return m_sdCard.writeBlocks(block, src, n);
 80809a2:	f200 4064 	addw	r0, r0, #1124	; 0x464
 80809a6:	f006 b9a4 	b.w	8086cf2 <_ZN9SdSpiCard11writeBlocksEmPKhj>

080809aa <_ZN9SdFatBase10readBlocksEmPhj>:
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_sdCard.writeBlock(block, src);
  }
  bool readBlocks(uint32_t block, uint8_t* dst, size_t n) {
    return m_sdCard.readBlocks(block, dst, n);
 80809aa:	f200 4064 	addw	r0, r0, #1124	; 0x464
 80809ae:	f006 b8d8 	b.w	8086b62 <_ZN9SdSpiCard10readBlocksEmPhj>

080809b2 <_ZN9SdFatBase10writeBlockEmPKh>:

  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_sdCard.readBlock(block, dst);
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_sdCard.writeBlock(block, src);
 80809b2:	f200 4064 	addw	r0, r0, #1124	; 0x464
 80809b6:	f006 b917 	b.w	8086be8 <_ZN9SdSpiCard10writeBlockEmPKh>

080809ba <_ZN9SdFatBase9readBlockEmPh>:
#endif  // defined(ARDUINO) || defined(DOXYGEN)

 private:

  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_sdCard.readBlock(block, dst);
 80809ba:	f200 4064 	addw	r0, r0, #1124	; 0x464
 80809be:	f006 b888 	b.w	8086ad2 <_ZN9SdSpiCard9readBlockEmPh>

080809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>:
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
 80809c2:	b510      	push	{r4, lr}
 80809c4:	460c      	mov	r4, r1
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 80809c6:	2204      	movs	r2, #4
 80809c8:	f007 fbd6 	bl	8088178 <HAL_EEPROM_Put>
        return t;
    }
 80809cc:	4620      	mov	r0, r4
 80809ce:	bd10      	pop	{r4, pc}

080809d0 <_Z20remoteReadStoredVars6String>:
        return -1;
    }
}

int remoteReadStoredVars(String mem_address) 
{
 80809d0:	b513      	push	{r0, r1, r4, lr}
    uint16_t tempValue = 0;
 80809d2:	2300      	movs	r3, #0
 80809d4:	f8ad 3006 	strh.w	r3, [sp, #6]
    int numerical_mem_address = mem_address.toInt();
 80809d8:	f008 fac2 	bl	8088f60 <_ZNK6String5toIntEv>
    if (numerical_mem_address >= 0 && numerical_mem_address <= MAX_MEM_ADDRESS) 
 80809dc:	2898      	cmp	r0, #152	; 0x98
}

int remoteReadStoredVars(String mem_address) 
{
    uint16_t tempValue = 0;
    int numerical_mem_address = mem_address.toInt();
 80809de:	4604      	mov	r4, r0
    if (numerical_mem_address >= 0 && numerical_mem_address <= MAX_MEM_ADDRESS) 
 80809e0:	d80a      	bhi.n	80809f8 <_Z20remoteReadStoredVars6String+0x28>
    {
        EEPROM.get(numerical_mem_address, tempValue);
 80809e2:	f009 fe33 	bl	808a64c <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 80809e6:	4620      	mov	r0, r4
 80809e8:	2202      	movs	r2, #2
 80809ea:	f10d 0106 	add.w	r1, sp, #6
 80809ee:	f007 fbbb 	bl	8088168 <HAL_EEPROM_Get>
        return tempValue;
 80809f2:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80809f6:	e001      	b.n	80809fc <_Z20remoteReadStoredVars6String+0x2c>
    }
    else 
    {
        return -1;
 80809f8:	f04f 30ff 	mov.w	r0, #4294967295
    }
}
 80809fc:	b002      	add	sp, #8
 80809fe:	bd10      	pop	{r4, pc}

08080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>:
    EEPtr begin()                        { return 0x00; }
    EEPtr end()                          { return length(); } //Standards requires this to be the item after the last valid entry. The returned pointer is invalid.
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
 8080a00:	b510      	push	{r4, lr}
 8080a02:	460c      	mov	r4, r1
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 8080a04:	2204      	movs	r2, #4
 8080a06:	f007 fbaf 	bl	8088168 <HAL_EEPROM_Get>
        return t;
    }
 8080a0a:	4620      	mov	r0, r4
 8080a0c:	bd10      	pop	{r4, pc}

08080a0e <_ZN9PrintFile5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
 8080a0e:	b507      	push	{r0, r1, r2, lr}
 8080a10:	ab02      	add	r3, sp, #8
 8080a12:	f803 1d01 	strb.w	r1, [r3, #-1]!
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
 8080a16:	2201      	movs	r2, #1
 8080a18:	4619      	mov	r1, r3
 8080a1a:	3008      	adds	r0, #8
 8080a1c:	f006 fcb2 	bl	8087384 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
 8080a20:	b003      	add	sp, #12
 8080a22:	f85d fb04 	ldr.w	pc, [sp], #4

08080a26 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 8080a26:	2300      	movs	r3, #0
 8080a28:	461a      	mov	r2, r3
 8080a2a:	4619      	mov	r1, r3
 8080a2c:	6840      	ldr	r0, [r0, #4]
 8080a2e:	f007 bd3f 	b.w	80884b0 <network_off>

08080a32 <_ZN11USARTSerialD0Ev>:
 8080a32:	b510      	push	{r4, lr}
 8080a34:	4604      	mov	r4, r0
 8080a36:	2114      	movs	r1, #20
 8080a38:	f009 fe79 	bl	808a72e <_ZdlPvj>
 8080a3c:	4620      	mov	r0, r4
 8080a3e:	bd10      	pop	{r4, pc}

08080a40 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 8080a40:	b40e      	push	{r1, r2, r3}
 8080a42:	b500      	push	{lr}
 8080a44:	b08c      	sub	sp, #48	; 0x30
 8080a46:	aa0d      	add	r2, sp, #52	; 0x34
 8080a48:	f852 1b04 	ldr.w	r1, [r2], #4
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 8080a4c:	2320      	movs	r3, #32
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080a4e:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
 8080a52:	9203      	str	r2, [sp, #12]
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 8080a54:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080a56:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 8080a58:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080a5a:	aa04      	add	r2, sp, #16
 8080a5c:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 8080a5e:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080a60:	f007 fc9a 	bl	8088398 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
 8080a64:	b00c      	add	sp, #48	; 0x30
 8080a66:	f85d eb04 	ldr.w	lr, [sp], #4
 8080a6a:	b003      	add	sp, #12
 8080a6c:	4770      	bx	lr
	...

08080a70 <_Z22__fetch_global_Serial4v>:
// instantiate Serial4
static Ring_Buffer serial4_rx_buffer;
static Ring_Buffer serial4_tx_buffer;

USARTSerial& __fetch_global_Serial4()
{
 8080a70:	b510      	push	{r4, lr}
	static USARTSerial serial4(HAL_USART_SERIAL4, &serial4_rx_buffer, &serial4_tx_buffer);
 8080a72:	4c0c      	ldr	r4, [pc, #48]	; (8080aa4 <_Z22__fetch_global_Serial4v+0x34>)
 8080a74:	6823      	ldr	r3, [r4, #0]
 8080a76:	07db      	lsls	r3, r3, #31
 8080a78:	d411      	bmi.n	8080a9e <_Z22__fetch_global_Serial4v+0x2e>
 8080a7a:	4620      	mov	r0, r4
 8080a7c:	f7ff fb13 	bl	80800a6 <__cxa_guard_acquire>
 8080a80:	b168      	cbz	r0, 8080a9e <_Z22__fetch_global_Serial4v+0x2e>
 8080a82:	4a09      	ldr	r2, [pc, #36]	; (8080aa8 <_Z22__fetch_global_Serial4v+0x38>)
 8080a84:	2103      	movs	r1, #3
 8080a86:	4b09      	ldr	r3, [pc, #36]	; (8080aac <_Z22__fetch_global_Serial4v+0x3c>)
 8080a88:	4809      	ldr	r0, [pc, #36]	; (8080ab0 <_Z22__fetch_global_Serial4v+0x40>)
 8080a8a:	f009 fbf5 	bl	808a278 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8080a8e:	4620      	mov	r0, r4
 8080a90:	f7ff fb0e 	bl	80800b0 <__cxa_guard_release>
 8080a94:	4a07      	ldr	r2, [pc, #28]	; (8080ab4 <_Z22__fetch_global_Serial4v+0x44>)
 8080a96:	4908      	ldr	r1, [pc, #32]	; (8080ab8 <_Z22__fetch_global_Serial4v+0x48>)
 8080a98:	4805      	ldr	r0, [pc, #20]	; (8080ab0 <_Z22__fetch_global_Serial4v+0x40>)
 8080a9a:	f009 fe43 	bl	808a724 <__aeabi_atexit>
	return serial4;
}
 8080a9e:	4804      	ldr	r0, [pc, #16]	; (8080ab0 <_Z22__fetch_global_Serial4v+0x40>)
 8080aa0:	bd10      	pop	{r4, pc}
 8080aa2:	bf00      	nop
 8080aa4:	20000a00 	.word	0x20000a00
 8080aa8:	20000974 	.word	0x20000974
 8080aac:	20000a08 	.word	0x20000a08
 8080ab0:	2000086c 	.word	0x2000086c
 8080ab4:	200001c8 	.word	0x200001c8
 8080ab8:	08080915 	.word	0x08080915

08080abc <_Z15serialEventRun4v>:

void serialEventRun4()
{
 8080abc:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial4, serialEvent4);
 8080abe:	f7ff ffd7 	bl	8080a70 <_Z22__fetch_global_Serial4v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 8080ac2:	4b07      	ldr	r3, [pc, #28]	; (8080ae0 <_Z15serialEventRun4v+0x24>)
 8080ac4:	4604      	mov	r4, r0
 8080ac6:	b153      	cbz	r3, 8080ade <_Z15serialEventRun4v+0x22>
 8080ac8:	f009 fbf3 	bl	808a2b2 <_ZN11USARTSerial9isEnabledEv>
 8080acc:	b138      	cbz	r0, 8080ade <_Z15serialEventRun4v+0x22>
 8080ace:	6823      	ldr	r3, [r4, #0]
 8080ad0:	4620      	mov	r0, r4
 8080ad2:	691b      	ldr	r3, [r3, #16]
 8080ad4:	4798      	blx	r3
 8080ad6:	2800      	cmp	r0, #0
 8080ad8:	dd01      	ble.n	8080ade <_Z15serialEventRun4v+0x22>
        handler();
 8080ada:	f3af 8000 	nop.w
 8080ade:	bd10      	pop	{r4, pc}
 8080ae0:	00000000 	.word	0x00000000

08080ae4 <_Z22__fetch_global_Serial5v>:
// instantiate Serial5
static Ring_Buffer serial5_rx_buffer;
static Ring_Buffer serial5_tx_buffer;

USARTSerial& __fetch_global_Serial5()
{
 8080ae4:	b510      	push	{r4, lr}
	static USARTSerial serial5(HAL_USART_SERIAL5, &serial5_rx_buffer, &serial5_tx_buffer);
 8080ae6:	4c0c      	ldr	r4, [pc, #48]	; (8080b18 <_Z22__fetch_global_Serial5v+0x34>)
 8080ae8:	6823      	ldr	r3, [r4, #0]
 8080aea:	07db      	lsls	r3, r3, #31
 8080aec:	d411      	bmi.n	8080b12 <_Z22__fetch_global_Serial5v+0x2e>
 8080aee:	4620      	mov	r0, r4
 8080af0:	f7ff fad9 	bl	80800a6 <__cxa_guard_acquire>
 8080af4:	b168      	cbz	r0, 8080b12 <_Z22__fetch_global_Serial5v+0x2e>
 8080af6:	4a09      	ldr	r2, [pc, #36]	; (8080b1c <_Z22__fetch_global_Serial5v+0x38>)
 8080af8:	2104      	movs	r1, #4
 8080afa:	4b09      	ldr	r3, [pc, #36]	; (8080b20 <_Z22__fetch_global_Serial5v+0x3c>)
 8080afc:	4809      	ldr	r0, [pc, #36]	; (8080b24 <_Z22__fetch_global_Serial5v+0x40>)
 8080afe:	f009 fbbb 	bl	808a278 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8080b02:	4620      	mov	r0, r4
 8080b04:	f7ff fad4 	bl	80800b0 <__cxa_guard_release>
 8080b08:	4a07      	ldr	r2, [pc, #28]	; (8080b28 <_Z22__fetch_global_Serial5v+0x44>)
 8080b0a:	4908      	ldr	r1, [pc, #32]	; (8080b2c <_Z22__fetch_global_Serial5v+0x48>)
 8080b0c:	4805      	ldr	r0, [pc, #20]	; (8080b24 <_Z22__fetch_global_Serial5v+0x40>)
 8080b0e:	f009 fe09 	bl	808a724 <__aeabi_atexit>
	return serial5;
}
 8080b12:	4804      	ldr	r0, [pc, #16]	; (8080b24 <_Z22__fetch_global_Serial5v+0x40>)
 8080b14:	bd10      	pop	{r4, pc}
 8080b16:	bf00      	nop
 8080b18:	200001dc 	.word	0x200001dc
 8080b1c:	200007b4 	.word	0x200007b4
 8080b20:	200008a8 	.word	0x200008a8
 8080b24:	200001ec 	.word	0x200001ec
 8080b28:	200001c8 	.word	0x200001c8
 8080b2c:	08080915 	.word	0x08080915

08080b30 <_Z15serialEventRun5v>:


void serialEventRun5()
{
 8080b30:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial5, serialEvent5);
 8080b32:	f7ff ffd7 	bl	8080ae4 <_Z22__fetch_global_Serial5v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 8080b36:	4b07      	ldr	r3, [pc, #28]	; (8080b54 <_Z15serialEventRun5v+0x24>)
 8080b38:	4604      	mov	r4, r0
 8080b3a:	b153      	cbz	r3, 8080b52 <_Z15serialEventRun5v+0x22>
 8080b3c:	f009 fbb9 	bl	808a2b2 <_ZN11USARTSerial9isEnabledEv>
 8080b40:	b138      	cbz	r0, 8080b52 <_Z15serialEventRun5v+0x22>
 8080b42:	6823      	ldr	r3, [r4, #0]
 8080b44:	4620      	mov	r0, r4
 8080b46:	691b      	ldr	r3, [r3, #16]
 8080b48:	4798      	blx	r3
 8080b4a:	2800      	cmp	r0, #0
 8080b4c:	dd01      	ble.n	8080b52 <_Z15serialEventRun5v+0x22>
        handler();
 8080b4e:	f3af 8000 	nop.w
 8080b52:	bd10      	pop	{r4, pc}
 8080b54:	00000000 	.word	0x00000000

08080b58 <_ZN9SdFatBase5beginEP9SdSpiBasehh>:
   * \param[in] spi SPI object for the card.
   * \param[in] csPin SD card chip select pin.
   * \param[in] divisor SPI divisor.
   * \return true for success else false.
   */
  bool begin(SdSpiCard::m_spi_t* spi, uint8_t csPin = SS, uint8_t divisor = 2) {
 8080b58:	b538      	push	{r3, r4, r5, lr}
 8080b5a:	4604      	mov	r4, r0
    return m_sdCard.begin(spi, csPin, divisor) &&
 8080b5c:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080b60:	f005 ff23 	bl	80869aa <_ZN9SdSpiCard5beginEP9SdSpiBasehh>
 8080b64:	b1e8      	cbz	r0, 8080ba2 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x4a>
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
 8080b66:	f504 6588 	add.w	r5, r4, #1088	; 0x440
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(uint8_t part = 0) {
    vwd()->close();
 8080b6a:	4628      	mov	r0, r5
 8080b6c:	f006 fbb4 	bl	80872d8 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
 8080b70:	2101      	movs	r1, #1
 8080b72:	4620      	mov	r0, r4
 8080b74:	f006 fdee 	bl	8087754 <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
 8080b78:	4601      	mov	r1, r0
 8080b7a:	b168      	cbz	r0, 8080b98 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x40>
 8080b7c:	4621      	mov	r1, r4
 8080b7e:	4628      	mov	r0, r5
 8080b80:	f006 f9d7 	bl	8086f32 <_ZN7FatFile8openRootEP9FatVolume>
 8080b84:	b168      	cbz	r0, 8080ba2 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x4a>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
 8080b86:	f894 3440 	ldrb.w	r3, [r4, #1088]	; 0x440
 8080b8a:	f013 0370 	ands.w	r3, r3, #112	; 0x70
      return false;
    }
    m_cwd = dir;
 8080b8e:	bf16      	itet	ne
 8080b90:	4b05      	ldrne	r3, [pc, #20]	; (8080ba8 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x50>)
 8080b92:	4618      	moveq	r0, r3
 8080b94:	601d      	strne	r5, [r3, #0]
 8080b96:	bd38      	pop	{r3, r4, r5, pc}
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(uint8_t part = 0) {
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
 8080b98:	4620      	mov	r0, r4
 8080b9a:	f006 fddb 	bl	8087754 <_ZN9FatVolume4initEh>
 8080b9e:	2800      	cmp	r0, #0
 8080ba0:	d1ec      	bne.n	8080b7c <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x24>
 8080ba2:	2000      	movs	r0, #0
           FatFileSystem::begin();
  }
 8080ba4:	bd38      	pop	{r3, r4, r5, pc}
 8080ba6:	bf00      	nop
 8080ba8:	20000b94 	.word	0x20000b94

08080bac <_Z13writeRegisterhh>:

//void testsensible();

//test for setting up PMIC manually
void writeRegister(uint8_t reg, uint8_t value) 
{
 8080bac:	b538      	push	{r3, r4, r5, lr}
 8080bae:	460c      	mov	r4, r1
 8080bb0:	4605      	mov	r5, r0
    // This would be easier if pmic.writeRegister wasn't private
    Wire3.beginTransmission(PMIC_ADDRESS);
 8080bb2:	f009 fd97 	bl	808a6e4 <_Z20__fetch_global_Wire3v>
 8080bb6:	216b      	movs	r1, #107	; 0x6b
 8080bb8:	f009 fc30 	bl	808a41c <_ZN7TwoWire17beginTransmissionEi>
    Wire3.write(reg);
 8080bbc:	f009 fd92 	bl	808a6e4 <_Z20__fetch_global_Wire3v>
 8080bc0:	6803      	ldr	r3, [r0, #0]
 8080bc2:	4629      	mov	r1, r5
 8080bc4:	689b      	ldr	r3, [r3, #8]
 8080bc6:	4798      	blx	r3
    Wire3.write(value);
 8080bc8:	f009 fd8c 	bl	808a6e4 <_Z20__fetch_global_Wire3v>
 8080bcc:	6803      	ldr	r3, [r0, #0]
 8080bce:	4621      	mov	r1, r4
 8080bd0:	689b      	ldr	r3, [r3, #8]
 8080bd2:	4798      	blx	r3
    Wire3.endTransmission(true);
 8080bd4:	f009 fd86 	bl	808a6e4 <_Z20__fetch_global_Wire3v>
}
 8080bd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
{
    // This would be easier if pmic.writeRegister wasn't private
    Wire3.beginTransmission(PMIC_ADDRESS);
    Wire3.write(reg);
    Wire3.write(value);
    Wire3.endTransmission(true);
 8080bdc:	2101      	movs	r1, #1
 8080bde:	f009 bc20 	b.w	808a422 <_ZN7TwoWire15endTransmissionEh>
	...

08080be4 <_Z20writeDefaultSettingsv>:
        PM_10_slope = 1;
    }
}

void writeDefaultSettings(void)
{
 8080be4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    EEPROM.put(DEVICE_ID_MEM_ADDRESS, 1555);
 8080be6:	f009 fd31 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080bea:	f240 6313 	movw	r3, #1555	; 0x613
 8080bee:	ac02      	add	r4, sp, #8
 8080bf0:	f844 3d04 	str.w	r3, [r4, #-4]!
 8080bf4:	4621      	mov	r1, r4
 8080bf6:	2000      	movs	r0, #0

    EEPROM.put(CO2_SLOPE_MEM_ADDRESS, 100);
 8080bf8:	2664      	movs	r6, #100	; 0x64
    }
}

void writeDefaultSettings(void)
{
    EEPROM.put(DEVICE_ID_MEM_ADDRESS, 1555);
 8080bfa:	f7ff fee2 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>

    EEPROM.put(CO2_SLOPE_MEM_ADDRESS, 100);
 8080bfe:	f009 fd25 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080c02:	4621      	mov	r1, r4
 8080c04:	2008      	movs	r0, #8
 8080c06:	9601      	str	r6, [sp, #4]
 8080c08:	f7ff fedb 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(CO_SLOPE_A_MEM_ADDRESS, 100);
 8080c0c:	f009 fd1e 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080c10:	4621      	mov	r1, r4
 8080c12:	2010      	movs	r0, #16
 8080c14:	9601      	str	r6, [sp, #4]
 8080c16:	f7ff fed4 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(CO_SLOPE_B_MEM_ADDRESS, 100);
 8080c1a:	f009 fd17 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080c1e:	4621      	mov	r1, r4
 8080c20:	2098      	movs	r0, #152	; 0x98
 8080c22:	9601      	str	r6, [sp, #4]
 8080c24:	f7ff fecd 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(PM_1_SLOPE_MEM_ADDRESS, 100);
 8080c28:	f009 fd10 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080c2c:	4621      	mov	r1, r4
 8080c2e:	2018      	movs	r0, #24
 8080c30:	9601      	str	r6, [sp, #4]
 8080c32:	f7ff fec6 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(PM_25_SLOPE_MEM_ADDRESS, 100);
 8080c36:	f009 fd09 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080c3a:	4621      	mov	r1, r4
 8080c3c:	2020      	movs	r0, #32
 8080c3e:	9601      	str	r6, [sp, #4]
 8080c40:	f7ff febf 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(PM_10_SLOPE_MEM_ADDRESS, 100);
 8080c44:	f009 fd02 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080c48:	4621      	mov	r1, r4
 8080c4a:	2028      	movs	r0, #40	; 0x28
 8080c4c:	9601      	str	r6, [sp, #4]
 8080c4e:	f7ff feb8 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, 100);
 8080c52:	f009 fcfb 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080c56:	4621      	mov	r1, r4
 8080c58:	2030      	movs	r0, #48	; 0x30
 8080c5a:	9601      	str	r6, [sp, #4]
 8080c5c:	f7ff feb1 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, 100);
 8080c60:	f009 fcf4 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080c64:	4621      	mov	r1, r4
 8080c66:	2038      	movs	r0, #56	; 0x38
 8080c68:	9601      	str	r6, [sp, #4]
 8080c6a:	f7ff feaa 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(RH_SLOPE_MEM_ADDRESS, 100);
 8080c6e:	f009 fced 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080c72:	4621      	mov	r1, r4
 8080c74:	2040      	movs	r0, #64	; 0x40

    EEPROM.put(CO2_ZERO_MEM_ADDRESS, 0);
 8080c76:	2500      	movs	r5, #0
    EEPROM.put(PM_1_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(PM_25_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(PM_10_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(RH_SLOPE_MEM_ADDRESS, 100);
 8080c78:	9601      	str	r6, [sp, #4]
 8080c7a:	f7ff fea2 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>

    EEPROM.put(CO2_ZERO_MEM_ADDRESS, 0);
 8080c7e:	f009 fce5 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080c82:	4621      	mov	r1, r4
 8080c84:	2004      	movs	r0, #4
 8080c86:	9501      	str	r5, [sp, #4]
 8080c88:	f7ff fe9b 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(CO_ZERO_A_MEM_ADDRESS, 0);
 8080c8c:	f009 fcde 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080c90:	4621      	mov	r1, r4
 8080c92:	200c      	movs	r0, #12
 8080c94:	9501      	str	r5, [sp, #4]
 8080c96:	f7ff fe94 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(CO_ZERO_B_MEM_ADDRESS, 0);
 8080c9a:	f009 fcd7 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080c9e:	4621      	mov	r1, r4
 8080ca0:	2094      	movs	r0, #148	; 0x94
 8080ca2:	9501      	str	r5, [sp, #4]
 8080ca4:	f7ff fe8d 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(PM_1_ZERO_MEM_ADDRESS, 0);
 8080ca8:	f009 fcd0 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080cac:	4621      	mov	r1, r4
 8080cae:	2014      	movs	r0, #20
 8080cb0:	9501      	str	r5, [sp, #4]
 8080cb2:	f7ff fe86 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(PM_25_ZERO_MEM_ADDRESS, 0);
 8080cb6:	f009 fcc9 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080cba:	4621      	mov	r1, r4
 8080cbc:	201c      	movs	r0, #28
 8080cbe:	9501      	str	r5, [sp, #4]
 8080cc0:	f7ff fe7f 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(PM_10_ZERO_MEM_ADDRESS, 0);
 8080cc4:	f009 fcc2 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080cc8:	4621      	mov	r1, r4
 8080cca:	2024      	movs	r0, #36	; 0x24
 8080ccc:	9501      	str	r5, [sp, #4]
 8080cce:	f7ff fe78 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(TEMP_ZERO_MEM_ADDRESS, 0);
 8080cd2:	f009 fcbb 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080cd6:	4621      	mov	r1, r4
 8080cd8:	202c      	movs	r0, #44	; 0x2c
 8080cda:	9501      	str	r5, [sp, #4]
 8080cdc:	f7ff fe71 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(PRESSURE_ZERO_MEM_ADDRESS, 0);
 8080ce0:	f009 fcb4 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080ce4:	4621      	mov	r1, r4
 8080ce6:	2034      	movs	r0, #52	; 0x34
 8080ce8:	9501      	str	r5, [sp, #4]
 8080cea:	f7ff fe6a 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(RH_ZERO_MEM_ADDRESS, 0);
 8080cee:	f009 fcad 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080cf2:	4621      	mov	r1, r4
 8080cf4:	203c      	movs	r0, #60	; 0x3c
 8080cf6:	9501      	str	r5, [sp, #4]
 8080cf8:	f7ff fe63 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>

    EEPROM.put(SERIAL_CELLULAR_EN_MEM_ADDRESS, 0);
 8080cfc:	f009 fca6 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080d00:	4621      	mov	r1, r4
 8080d02:	2044      	movs	r0, #68	; 0x44
 8080d04:	9501      	str	r5, [sp, #4]
 8080d06:	f7ff fe5c 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, 0);
 8080d0a:	f009 fc9f 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080d0e:	4621      	mov	r1, r4
 8080d10:	2048      	movs	r0, #72	; 0x48
 8080d12:	9501      	str	r5, [sp, #4]
 8080d14:	f7ff fe55 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(OZONE_EN_MEM_ADDRESS, 0);
 8080d18:	f009 fc98 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080d1c:	4621      	mov	r1, r4
 8080d1e:	2058      	movs	r0, #88	; 0x58
 8080d20:	9501      	str	r5, [sp, #4]
 8080d22:	f7ff fe4e 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(VOC_EN_MEM_ADDRESS, voc_enabled);
 8080d26:	f009 fc91 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080d2a:	4941      	ldr	r1, [pc, #260]	; (8080e30 <_Z20writeDefaultSettingsv+0x24c>)
 8080d2c:	205c      	movs	r0, #92	; 0x5c
 8080d2e:	f7ff fe48 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(GAS_LOWER_LIMIT_MEM_ADDRESS, 1000);
 8080d32:	f009 fc8b 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080d36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080d3a:	4621      	mov	r1, r4
 8080d3c:	204c      	movs	r0, #76	; 0x4c
 8080d3e:	9301      	str	r3, [sp, #4]
 8080d40:	f7ff fe3f 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(GAS_UPPER_LIMIT_MEM_ADDRESS, 10000);
 8080d44:	f009 fc82 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080d48:	f242 7310 	movw	r3, #10000	; 0x2710
 8080d4c:	4621      	mov	r1, r4
 8080d4e:	2050      	movs	r0, #80	; 0x50
 8080d50:	9301      	str	r3, [sp, #4]
 8080d52:	f7ff fe36 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(TIME_ZONE_MEM_ADDRESS, -7);
 8080d56:	f009 fc79 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080d5a:	4621      	mov	r1, r4
 8080d5c:	f06f 0306 	mvn.w	r3, #6
 8080d60:	2054      	movs	r0, #84	; 0x54
 8080d62:	9301      	str	r3, [sp, #4]
 8080d64:	f7ff fe2d 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    Time.zone(tempValue);
 8080d68:	4b32      	ldr	r3, [pc, #200]	; (8080e34 <_Z20writeDefaultSettingsv+0x250>)
 8080d6a:	6818      	ldr	r0, [r3, #0]
 8080d6c:	f00a fbe6 	bl	808b53c <__aeabi_i2f>
 8080d70:	f008 fb64 	bl	808943c <_ZN9TimeClass4zoneEf>
    EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, 0);
 8080d74:	f009 fc6a 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080d78:	4621      	mov	r1, r4
 8080d7a:	2060      	movs	r0, #96	; 0x60
 8080d7c:	9501      	str	r5, [sp, #4]
 8080d7e:	f7ff fe20 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, 0);
 8080d82:	f009 fc63 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080d86:	4621      	mov	r1, r4
 8080d88:	4630      	mov	r0, r6
 8080d8a:	9501      	str	r5, [sp, #4]
    EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, 1);
 8080d8c:	2601      	movs	r6, #1
    EEPROM.put(GAS_LOWER_LIMIT_MEM_ADDRESS, 1000);
    EEPROM.put(GAS_UPPER_LIMIT_MEM_ADDRESS, 10000);
    EEPROM.put(TIME_ZONE_MEM_ADDRESS, -7);
    Time.zone(tempValue);
    EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, 0);
    EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, 0);
 8080d8e:	f7ff fe18 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, 1);
 8080d92:	f009 fc5b 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080d96:	4621      	mov	r1, r4
 8080d98:	2068      	movs	r0, #104	; 0x68
 8080d9a:	9601      	str	r6, [sp, #4]
 8080d9c:	f7ff fe11 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(OZONE_A_OR_D_MEM_ADDRESS, 0);
 8080da0:	f009 fc54 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080da4:	4621      	mov	r1, r4
 8080da6:	206c      	movs	r0, #108	; 0x6c
 8080da8:	9501      	str	r5, [sp, #4]
 8080daa:	f7ff fe0a 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(OZONE_OFFSET_MEM_ADDRESS, 0);
 8080dae:	f009 fc4d 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080db2:	4621      	mov	r1, r4
 8080db4:	2070      	movs	r0, #112	; 0x70
 8080db6:	9501      	str	r5, [sp, #4]
 8080db8:	f7ff fe03 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(MEASUREMENTS_TO_AVG_MEM_ADDRESS, 1);
 8080dbc:	f009 fc46 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080dc0:	4621      	mov	r1, r4
 8080dc2:	2074      	movs	r0, #116	; 0x74
 8080dc4:	9601      	str	r6, [sp, #4]
 8080dc6:	f7ff fdfc 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, 1);
 8080dca:	f009 fc3f 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080dce:	4621      	mov	r1, r4
 8080dd0:	2078      	movs	r0, #120	; 0x78
 8080dd2:	9601      	str	r6, [sp, #4]
 8080dd4:	f7ff fdf5 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(ABC_ENABLE_MEM_ADDRESS, 0);
 8080dd8:	f009 fc38 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080ddc:	4621      	mov	r1, r4
 8080dde:	207c      	movs	r0, #124	; 0x7c
 8080de0:	9501      	str	r5, [sp, #4]
 8080de2:	f7ff fdee 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(HIH8120_ENABLE_MEM_ADDRESS, 1);
 8080de6:	f009 fc31 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080dea:	4621      	mov	r1, r4
 8080dec:	2080      	movs	r0, #128	; 0x80
 8080dee:	9601      	str	r6, [sp, #4]
 8080df0:	f7ff fde7 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(CO_SOCKET_MEM_ADDRESS, 0);
 8080df4:	f009 fc2a 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080df8:	4621      	mov	r1, r4
 8080dfa:	2084      	movs	r0, #132	; 0x84
 8080dfc:	9501      	str	r5, [sp, #4]
 8080dfe:	f7ff fde0 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(GOOGLE_LOCATION_MEM_ADDRESS, 0);
 8080e02:	f009 fc23 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080e06:	4621      	mov	r1, r4
 8080e08:	2088      	movs	r0, #136	; 0x88
 8080e0a:	9501      	str	r5, [sp, #4]
 8080e0c:	f7ff fdd9 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(SENSIBLE_IOT_ENABLE_MEM_ADDRESS, 0);
 8080e10:	f009 fc1c 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080e14:	4621      	mov	r1, r4
 8080e16:	208c      	movs	r0, #140	; 0x8c
 8080e18:	9501      	str	r5, [sp, #4]
 8080e1a:	f7ff fdd2 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, 0);
 8080e1e:	f009 fc15 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080e22:	4621      	mov	r1, r4
 8080e24:	2090      	movs	r0, #144	; 0x90
 8080e26:	9501      	str	r5, [sp, #4]
 8080e28:	f7ff fdcb 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
}
 8080e2c:	b002      	add	sp, #8
 8080e2e:	bd70      	pop	{r4, r5, r6, pc}
 8080e30:	20000b54 	.word	0x20000b54
 8080e34:	20000b84 	.word	0x20000b84

08080e38 <_Z14readStoredVarsv>:
    }
}

//read all eeprom stored variables
void readStoredVars(void) 
{
 8080e38:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    int tempValue;
    //just changing the rh calibration for temporary!! -- remove me!!
    //these values were determined by John Birks from 2019 cdphe study at la casa in denver February 2019

    EEPROM.get(DEVICE_ID_MEM_ADDRESS, DEVICE_id);
 8080e3c:	4cc2      	ldr	r4, [pc, #776]	; (8081148 <_Z14readStoredVarsv+0x310>)
 8080e3e:	f009 fc05 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080e42:	4621      	mov	r1, r4
 8080e44:	2000      	movs	r0, #0
 8080e46:	f7ff fddb 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    if (DEVICE_id == -1) 
 8080e4a:	6823      	ldr	r3, [r4, #0]
 8080e4c:	3301      	adds	r3, #1
 8080e4e:	d104      	bne.n	8080e5a <_Z14readStoredVarsv+0x22>
    {
        DEVICE_id = 1555;
 8080e50:	f240 6313 	movw	r3, #1555	; 0x613
 8080e54:	6023      	str	r3, [r4, #0]
        writeDefaultSettings();
 8080e56:	f7ff fec5 	bl	8080be4 <_Z20writeDefaultSettingsv>
    }

    EEPROM.get(CO2_SLOPE_MEM_ADDRESS, tempValue);
 8080e5a:	f009 fbf7 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080e5e:	a901      	add	r1, sp, #4
 8080e60:	2008      	movs	r0, #8
 8080e62:	f7ff fdcd 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    CO2_slope = tempValue;
    CO2_slope /= 100;
 8080e66:	9801      	ldr	r0, [sp, #4]
 8080e68:	f00a fb68 	bl	808b53c <__aeabi_i2f>
 8080e6c:	49b7      	ldr	r1, [pc, #732]	; (808114c <_Z14readStoredVarsv+0x314>)
 8080e6e:	f00a fc6d 	bl	808b74c <__aeabi_fdiv>
 8080e72:	f8df 9364 	ldr.w	r9, [pc, #868]	; 80811d8 <_Z14readStoredVarsv+0x3a0>
    EEPROM.get(CO_SLOPE_A_MEM_ADDRESS, tempValue);
    CO_slopeA = tempValue;
    CO_slopeA /= 100;
 8080e76:	f8df 8364 	ldr.w	r8, [pc, #868]	; 80811dc <_Z14readStoredVarsv+0x3a4>
        writeDefaultSettings();
    }

    EEPROM.get(CO2_SLOPE_MEM_ADDRESS, tempValue);
    CO2_slope = tempValue;
    CO2_slope /= 100;
 8080e7a:	f8c9 0000 	str.w	r0, [r9]
    EEPROM.get(CO_SLOPE_A_MEM_ADDRESS, tempValue);
 8080e7e:	f009 fbe5 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080e82:	a901      	add	r1, sp, #4
 8080e84:	2010      	movs	r0, #16
 8080e86:	f7ff fdbb 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    CO_slopeA = tempValue;
    CO_slopeA /= 100;
 8080e8a:	9801      	ldr	r0, [sp, #4]
 8080e8c:	f00a fb56 	bl	808b53c <__aeabi_i2f>
 8080e90:	49ae      	ldr	r1, [pc, #696]	; (808114c <_Z14readStoredVarsv+0x314>)
 8080e92:	f00a fc5b 	bl	808b74c <__aeabi_fdiv>
 8080e96:	f8c8 0000 	str.w	r0, [r8]
    EEPROM.get(CO_SLOPE_B_MEM_ADDRESS, tempValue);
 8080e9a:	f009 fbd7 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080e9e:	a901      	add	r1, sp, #4
 8080ea0:	2098      	movs	r0, #152	; 0x98
 8080ea2:	f7ff fdad 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    CO_slopeB = tempValue;
    CO_slopeB /= 100;
 8080ea6:	9801      	ldr	r0, [sp, #4]
 8080ea8:	f00a fb48 	bl	808b53c <__aeabi_i2f>
 8080eac:	49a7      	ldr	r1, [pc, #668]	; (808114c <_Z14readStoredVarsv+0x314>)
 8080eae:	f00a fc4d 	bl	808b74c <__aeabi_fdiv>
 8080eb2:	4fa7      	ldr	r7, [pc, #668]	; (8081150 <_Z14readStoredVarsv+0x318>)
    EEPROM.get(PM_1_SLOPE_MEM_ADDRESS, tempValue);
    PM_1_slope = tempValue;
    PM_1_slope /= 100;
 8080eb4:	4ea7      	ldr	r6, [pc, #668]	; (8081154 <_Z14readStoredVarsv+0x31c>)
    EEPROM.get(CO_SLOPE_A_MEM_ADDRESS, tempValue);
    CO_slopeA = tempValue;
    CO_slopeA /= 100;
    EEPROM.get(CO_SLOPE_B_MEM_ADDRESS, tempValue);
    CO_slopeB = tempValue;
    CO_slopeB /= 100;
 8080eb6:	6038      	str	r0, [r7, #0]
    EEPROM.get(PM_1_SLOPE_MEM_ADDRESS, tempValue);
 8080eb8:	f009 fbc8 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080ebc:	a901      	add	r1, sp, #4
 8080ebe:	2018      	movs	r0, #24
 8080ec0:	f7ff fd9e 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    PM_1_slope = tempValue;
    PM_1_slope /= 100;
 8080ec4:	9801      	ldr	r0, [sp, #4]
 8080ec6:	f00a fb39 	bl	808b53c <__aeabi_i2f>
 8080eca:	49a0      	ldr	r1, [pc, #640]	; (808114c <_Z14readStoredVarsv+0x314>)
 8080ecc:	f00a fc3e 	bl	808b74c <__aeabi_fdiv>
 8080ed0:	6030      	str	r0, [r6, #0]
    EEPROM.get(PM_25_SLOPE_MEM_ADDRESS, tempValue);
 8080ed2:	f009 fbbb 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080ed6:	a901      	add	r1, sp, #4
 8080ed8:	2020      	movs	r0, #32
 8080eda:	f7ff fd91 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    PM_25_slope = tempValue;
    PM_25_slope /= 100;
 8080ede:	9801      	ldr	r0, [sp, #4]
 8080ee0:	f00a fb2c 	bl	808b53c <__aeabi_i2f>
 8080ee4:	4999      	ldr	r1, [pc, #612]	; (808114c <_Z14readStoredVarsv+0x314>)
 8080ee6:	f00a fc31 	bl	808b74c <__aeabi_fdiv>
 8080eea:	4d9b      	ldr	r5, [pc, #620]	; (8081158 <_Z14readStoredVarsv+0x320>)
    EEPROM.get(PM_10_SLOPE_MEM_ADDRESS, tempValue);
    PM_10_slope = tempValue;
    PM_10_slope /= 100;
 8080eec:	4c9b      	ldr	r4, [pc, #620]	; (808115c <_Z14readStoredVarsv+0x324>)
    EEPROM.get(PM_1_SLOPE_MEM_ADDRESS, tempValue);
    PM_1_slope = tempValue;
    PM_1_slope /= 100;
    EEPROM.get(PM_25_SLOPE_MEM_ADDRESS, tempValue);
    PM_25_slope = tempValue;
    PM_25_slope /= 100;
 8080eee:	6028      	str	r0, [r5, #0]
    EEPROM.get(PM_10_SLOPE_MEM_ADDRESS, tempValue);
 8080ef0:	f009 fbac 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080ef4:	a901      	add	r1, sp, #4
 8080ef6:	2028      	movs	r0, #40	; 0x28
 8080ef8:	f7ff fd82 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    PM_10_slope = tempValue;
    PM_10_slope /= 100;
 8080efc:	9801      	ldr	r0, [sp, #4]
 8080efe:	f00a fb1d 	bl	808b53c <__aeabi_i2f>
 8080f02:	4992      	ldr	r1, [pc, #584]	; (808114c <_Z14readStoredVarsv+0x314>)
 8080f04:	f00a fc22 	bl	808b74c <__aeabi_fdiv>
 8080f08:	6020      	str	r0, [r4, #0]
    EEPROM.get(TEMP_SLOPE_MEM_ADDRESS, tempValue);  //temperature
 8080f0a:	f009 fb9f 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080f0e:	a901      	add	r1, sp, #4
 8080f10:	2030      	movs	r0, #48	; 0x30
 8080f12:	f7ff fd75 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    temp_slope = tempValue;
    temp_slope /= 100;
 8080f16:	9801      	ldr	r0, [sp, #4]
 8080f18:	f00a fb10 	bl	808b53c <__aeabi_i2f>
 8080f1c:	498b      	ldr	r1, [pc, #556]	; (808114c <_Z14readStoredVarsv+0x314>)
 8080f1e:	f00a fc15 	bl	808b74c <__aeabi_fdiv>
 8080f22:	4b8f      	ldr	r3, [pc, #572]	; (8081160 <_Z14readStoredVarsv+0x328>)
    EEPROM.get(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
    EEPROM.get(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
    EEPROM.get(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);
    EEPROM.get(CO_SOCKET_MEM_ADDRESS, CO_socket);
    EEPROM.get(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
    EEPROM.get(SENSIBLE_IOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 8080f24:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 80811e0 <_Z14readStoredVarsv+0x3a8>
    EEPROM.get(PM_10_SLOPE_MEM_ADDRESS, tempValue);
    PM_10_slope = tempValue;
    PM_10_slope /= 100;
    EEPROM.get(TEMP_SLOPE_MEM_ADDRESS, tempValue);  //temperature
    temp_slope = tempValue;
    temp_slope /= 100;
 8080f28:	6018      	str	r0, [r3, #0]
    EEPROM.get(PRESSURE_SLOPE_MEM_ADDRESS, tempValue);
 8080f2a:	f009 fb8f 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080f2e:	a901      	add	r1, sp, #4
 8080f30:	2038      	movs	r0, #56	; 0x38
 8080f32:	f7ff fd65 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    pressure_slope = tempValue;
    pressure_slope /= 100;
 8080f36:	9801      	ldr	r0, [sp, #4]
 8080f38:	f00a fb00 	bl	808b53c <__aeabi_i2f>
 8080f3c:	4983      	ldr	r1, [pc, #524]	; (808114c <_Z14readStoredVarsv+0x314>)
 8080f3e:	f00a fc05 	bl	808b74c <__aeabi_fdiv>
 8080f42:	4b88      	ldr	r3, [pc, #544]	; (8081164 <_Z14readStoredVarsv+0x32c>)
 8080f44:	6018      	str	r0, [r3, #0]
    EEPROM.get(RH_SLOPE_MEM_ADDRESS, tempValue);
 8080f46:	f009 fb81 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080f4a:	a901      	add	r1, sp, #4
 8080f4c:	2040      	movs	r0, #64	; 0x40
 8080f4e:	f7ff fd57 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    rh_slope = tempValue;
    rh_slope /= 100;
 8080f52:	9801      	ldr	r0, [sp, #4]
 8080f54:	f00a faf2 	bl	808b53c <__aeabi_i2f>
 8080f58:	497c      	ldr	r1, [pc, #496]	; (808114c <_Z14readStoredVarsv+0x314>)
 8080f5a:	f00a fbf7 	bl	808b74c <__aeabi_fdiv>
 8080f5e:	4b82      	ldr	r3, [pc, #520]	; (8081168 <_Z14readStoredVarsv+0x330>)
 8080f60:	6018      	str	r0, [r3, #0]

    EEPROM.get(CO2_ZERO_MEM_ADDRESS, CO2_zero);
 8080f62:	f009 fb73 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080f66:	4981      	ldr	r1, [pc, #516]	; (808116c <_Z14readStoredVarsv+0x334>)
 8080f68:	2004      	movs	r0, #4
 8080f6a:	f7ff fd49 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(CO_ZERO_A_MEM_ADDRESS, CO_zeroA);
 8080f6e:	f009 fb6d 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080f72:	497f      	ldr	r1, [pc, #508]	; (8081170 <_Z14readStoredVarsv+0x338>)
 8080f74:	200c      	movs	r0, #12
 8080f76:	f7ff fd43 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(CO_ZERO_B_MEM_ADDRESS, CO_zeroB);
 8080f7a:	f009 fb67 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080f7e:	497d      	ldr	r1, [pc, #500]	; (8081174 <_Z14readStoredVarsv+0x33c>)
 8080f80:	2094      	movs	r0, #148	; 0x94
 8080f82:	f7ff fd3d 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(PM_1_ZERO_MEM_ADDRESS, PM_1_zero);
 8080f86:	f009 fb61 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080f8a:	497b      	ldr	r1, [pc, #492]	; (8081178 <_Z14readStoredVarsv+0x340>)
 8080f8c:	2014      	movs	r0, #20
 8080f8e:	f7ff fd37 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(PM_25_ZERO_MEM_ADDRESS, PM_25_zero);
 8080f92:	f009 fb5b 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080f96:	4979      	ldr	r1, [pc, #484]	; (808117c <_Z14readStoredVarsv+0x344>)
 8080f98:	201c      	movs	r0, #28
 8080f9a:	f7ff fd31 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(PM_10_ZERO_MEM_ADDRESS, PM_10_zero);
 8080f9e:	f009 fb55 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080fa2:	4977      	ldr	r1, [pc, #476]	; (8081180 <_Z14readStoredVarsv+0x348>)
 8080fa4:	2024      	movs	r0, #36	; 0x24
 8080fa6:	f7ff fd2b 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(TEMP_ZERO_MEM_ADDRESS, temp_zero);
 8080faa:	f009 fb4f 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080fae:	4975      	ldr	r1, [pc, #468]	; (8081184 <_Z14readStoredVarsv+0x34c>)
 8080fb0:	202c      	movs	r0, #44	; 0x2c
 8080fb2:	f7ff fd25 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(PRESSURE_ZERO_MEM_ADDRESS, pressure_zero);
 8080fb6:	f009 fb49 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080fba:	4973      	ldr	r1, [pc, #460]	; (8081188 <_Z14readStoredVarsv+0x350>)
 8080fbc:	2034      	movs	r0, #52	; 0x34
 8080fbe:	f7ff fd1f 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(RH_ZERO_MEM_ADDRESS, rh_zero);
 8080fc2:	f009 fb43 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080fc6:	4971      	ldr	r1, [pc, #452]	; (808118c <_Z14readStoredVarsv+0x354>)
 8080fc8:	203c      	movs	r0, #60	; 0x3c
 8080fca:	f7ff fd19 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>

    EEPROM.get(SERIAL_CELLULAR_EN_MEM_ADDRESS, serial_cellular_enabled);
 8080fce:	f009 fb3d 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080fd2:	496f      	ldr	r1, [pc, #444]	; (8081190 <_Z14readStoredVarsv+0x358>)
 8080fd4:	2044      	movs	r0, #68	; 0x44
 8080fd6:	f7ff fd13 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
 8080fda:	f009 fb37 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080fde:	496d      	ldr	r1, [pc, #436]	; (8081194 <_Z14readStoredVarsv+0x35c>)
 8080fe0:	2048      	movs	r0, #72	; 0x48
 8080fe2:	f7ff fd0d 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(OZONE_EN_MEM_ADDRESS, ozone_enabled);
 8080fe6:	f009 fb31 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080fea:	496b      	ldr	r1, [pc, #428]	; (8081198 <_Z14readStoredVarsv+0x360>)
 8080fec:	2058      	movs	r0, #88	; 0x58
 8080fee:	f7ff fd07 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(VOC_EN_MEM_ADDRESS, voc_enabled);
 8080ff2:	f009 fb2b 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8080ff6:	4969      	ldr	r1, [pc, #420]	; (808119c <_Z14readStoredVarsv+0x364>)
 8080ff8:	205c      	movs	r0, #92	; 0x5c
 8080ffa:	f7ff fd01 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(GAS_LOWER_LIMIT_MEM_ADDRESS, gas_lower_limit);
 8080ffe:	f009 fb25 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8081002:	4967      	ldr	r1, [pc, #412]	; (80811a0 <_Z14readStoredVarsv+0x368>)
 8081004:	204c      	movs	r0, #76	; 0x4c
 8081006:	f7ff fcfb 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(GAS_UPPER_LIMIT_MEM_ADDRESS, gas_upper_limit);
 808100a:	f009 fb1f 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 808100e:	4965      	ldr	r1, [pc, #404]	; (80811a4 <_Z14readStoredVarsv+0x36c>)
 8081010:	2050      	movs	r0, #80	; 0x50
 8081012:	f7ff fcf5 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(TIME_ZONE_MEM_ADDRESS, tempValue);
 8081016:	f009 fb19 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 808101a:	a901      	add	r1, sp, #4
 808101c:	2054      	movs	r0, #84	; 0x54
 808101e:	f7ff fcef 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    Time.zone(tempValue);
 8081022:	9801      	ldr	r0, [sp, #4]
 8081024:	f00a fa8a 	bl	808b53c <__aeabi_i2f>
 8081028:	f008 fa08 	bl	808943c <_ZN9TimeClass4zoneEf>
    EEPROM.get(TEMPERATURE_UNITS_MEM_ADDRESS, temperature_units);
 808102c:	f009 fb0e 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8081030:	495d      	ldr	r1, [pc, #372]	; (80811a8 <_Z14readStoredVarsv+0x370>)
 8081032:	2060      	movs	r0, #96	; 0x60
 8081034:	f7ff fce4 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(OUTPUT_PARTICLES_MEM_ADDRESS, output_only_particles);
 8081038:	f009 fb08 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 808103c:	495b      	ldr	r1, [pc, #364]	; (80811ac <_Z14readStoredVarsv+0x374>)
 808103e:	2064      	movs	r0, #100	; 0x64
 8081040:	f7ff fcde 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, new_temperature_sensor_enabled);
 8081044:	f009 fb02 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8081048:	4959      	ldr	r1, [pc, #356]	; (80811b0 <_Z14readStoredVarsv+0x378>)
 808104a:	2068      	movs	r0, #104	; 0x68
 808104c:	f7ff fcd8 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(OZONE_A_OR_D_MEM_ADDRESS, ozone_analog_enabled);
 8081050:	f009 fafc 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8081054:	4957      	ldr	r1, [pc, #348]	; (80811b4 <_Z14readStoredVarsv+0x37c>)
 8081056:	206c      	movs	r0, #108	; 0x6c
 8081058:	f7ff fcd2 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(OZONE_OFFSET_MEM_ADDRESS, ozone_offset);
 808105c:	f009 faf6 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8081060:	4955      	ldr	r1, [pc, #340]	; (80811b8 <_Z14readStoredVarsv+0x380>)
 8081062:	2070      	movs	r0, #112	; 0x70
 8081064:	f7ff fccc 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(MEASUREMENTS_TO_AVG_MEM_ADDRESS, measurements_to_average);
 8081068:	f009 faf0 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 808106c:	4953      	ldr	r1, [pc, #332]	; (80811bc <_Z14readStoredVarsv+0x384>)
 808106e:	2074      	movs	r0, #116	; 0x74
 8081070:	f7ff fcc6 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
 8081074:	f009 faea 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8081078:	4951      	ldr	r1, [pc, #324]	; (80811c0 <_Z14readStoredVarsv+0x388>)
 808107a:	2078      	movs	r0, #120	; 0x78
 808107c:	f7ff fcc0 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 8081080:	f009 fae4 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8081084:	494f      	ldr	r1, [pc, #316]	; (80811c4 <_Z14readStoredVarsv+0x38c>)
 8081086:	207c      	movs	r0, #124	; 0x7c
 8081088:	f7ff fcba 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);
 808108c:	f009 fade 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8081090:	494d      	ldr	r1, [pc, #308]	; (80811c8 <_Z14readStoredVarsv+0x390>)
 8081092:	2080      	movs	r0, #128	; 0x80
 8081094:	f7ff fcb4 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(CO_SOCKET_MEM_ADDRESS, CO_socket);
 8081098:	f009 fad8 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 808109c:	494b      	ldr	r1, [pc, #300]	; (80811cc <_Z14readStoredVarsv+0x394>)
 808109e:	2084      	movs	r0, #132	; 0x84
 80810a0:	f7ff fcae 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
 80810a4:	f009 fad2 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 80810a8:	4949      	ldr	r1, [pc, #292]	; (80811d0 <_Z14readStoredVarsv+0x398>)
 80810aa:	2088      	movs	r0, #136	; 0x88
 80810ac:	f7ff fca8 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(SENSIBLE_IOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 80810b0:	f009 facc 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 80810b4:	4651      	mov	r1, sl
 80810b6:	208c      	movs	r0, #140	; 0x8c
 80810b8:	f7ff fca2 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(CAR_TOPPER_POWER_MEM_ADDRESS, car_topper_power_en);
 80810bc:	f009 fac6 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 80810c0:	4944      	ldr	r1, [pc, #272]	; (80811d4 <_Z14readStoredVarsv+0x39c>)
 80810c2:	2090      	movs	r0, #144	; 0x90
 80810c4:	f7ff fc9c 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>

    if (sensible_iot_en) 
 80810c8:	f8da 3000 	ldr.w	r3, [sl]
 80810cc:	b113      	cbz	r3, 80810d4 <_Z14readStoredVarsv+0x29c>
    {
        Time.zone(0);       //use UTC if using sensible iot upload
 80810ce:	2000      	movs	r0, #0
 80810d0:	f008 f9b4 	bl	808943c <_ZN9TimeClass4zoneEf>
    }

    //measurements_to_average = 5;
    if (measurements_to_average < 1 || measurements_to_average > 5000)
 80810d4:	f241 3187 	movw	r1, #4999	; 0x1387
 80810d8:	4a38      	ldr	r2, [pc, #224]	; (80811bc <_Z14readStoredVarsv+0x384>)
        measurements_to_average = 1;

    //check all values to make sure are within limits
    if (!CO2_slope)
 80810da:	f8d9 0000 	ldr.w	r0, [r9]
    {
        Time.zone(0);       //use UTC if using sensible iot upload
    }

    //measurements_to_average = 5;
    if (measurements_to_average < 1 || measurements_to_average > 5000)
 80810de:	6813      	ldr	r3, [r2, #0]
 80810e0:	3b01      	subs	r3, #1
 80810e2:	428b      	cmp	r3, r1
        measurements_to_average = 1;
 80810e4:	bf84      	itt	hi
 80810e6:	2301      	movhi	r3, #1
 80810e8:	6013      	strhi	r3, [r2, #0]

    //check all values to make sure are within limits
    if (!CO2_slope)
 80810ea:	2100      	movs	r1, #0
 80810ec:	f00a fc0e 	bl	808b90c <__aeabi_fcmpeq>
 80810f0:	b118      	cbz	r0, 80810fa <_Z14readStoredVarsv+0x2c2>
    {
        CO2_slope = 1;
 80810f2:	4b39      	ldr	r3, [pc, #228]	; (80811d8 <_Z14readStoredVarsv+0x3a0>)
 80810f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80810f8:	601a      	str	r2, [r3, #0]
    }
    if (!CO_slopeA)
 80810fa:	2100      	movs	r1, #0
 80810fc:	f8d8 0000 	ldr.w	r0, [r8]
 8081100:	f00a fc04 	bl	808b90c <__aeabi_fcmpeq>
 8081104:	b118      	cbz	r0, 808110e <_Z14readStoredVarsv+0x2d6>
    {
        CO_slopeA = 1;
 8081106:	4b35      	ldr	r3, [pc, #212]	; (80811dc <_Z14readStoredVarsv+0x3a4>)
 8081108:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 808110c:	601a      	str	r2, [r3, #0]
    }
    if (!CO_slopeB)
 808110e:	2100      	movs	r1, #0
 8081110:	6838      	ldr	r0, [r7, #0]
 8081112:	f00a fbfb 	bl	808b90c <__aeabi_fcmpeq>
 8081116:	b118      	cbz	r0, 8081120 <_Z14readStoredVarsv+0x2e8>
    {
        CO_slopeB = 1;
 8081118:	4b0d      	ldr	r3, [pc, #52]	; (8081150 <_Z14readStoredVarsv+0x318>)
 808111a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 808111e:	601a      	str	r2, [r3, #0]
    }
    if (!PM_1_slope)
 8081120:	2100      	movs	r1, #0
 8081122:	6830      	ldr	r0, [r6, #0]
 8081124:	f00a fbf2 	bl	808b90c <__aeabi_fcmpeq>
 8081128:	b118      	cbz	r0, 8081132 <_Z14readStoredVarsv+0x2fa>
    {
        PM_1_slope = 1;
 808112a:	4b0a      	ldr	r3, [pc, #40]	; (8081154 <_Z14readStoredVarsv+0x31c>)
 808112c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8081130:	601a      	str	r2, [r3, #0]
    }
    if (!PM_25_slope)
 8081132:	2100      	movs	r1, #0
 8081134:	6828      	ldr	r0, [r5, #0]
 8081136:	f00a fbe9 	bl	808b90c <__aeabi_fcmpeq>
 808113a:	2800      	cmp	r0, #0
 808113c:	d052      	beq.n	80811e4 <_Z14readStoredVarsv+0x3ac>
    {
        PM_25_slope = 1;
 808113e:	4b06      	ldr	r3, [pc, #24]	; (8081158 <_Z14readStoredVarsv+0x320>)
 8081140:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8081144:	601a      	str	r2, [r3, #0]
 8081146:	e04d      	b.n	80811e4 <_Z14readStoredVarsv+0x3ac>
 8081148:	20000088 	.word	0x20000088
 808114c:	42c80000 	.word	0x42c80000
 8081150:	20000930 	.word	0x20000930
 8081154:	2000021c 	.word	0x2000021c
 8081158:	200007a8 	.word	0x200007a8
 808115c:	20000af0 	.word	0x20000af0
 8081160:	200007b0 	.word	0x200007b0
 8081164:	200001e4 	.word	0x200001e4
 8081168:	200006dc 	.word	0x200006dc
 808116c:	20000224 	.word	0x20000224
 8081170:	200009f8 	.word	0x200009f8
 8081174:	200009fc 	.word	0x200009fc
 8081178:	2000088c 	.word	0x2000088c
 808117c:	20000768 	.word	0x20000768
 8081180:	20000ad4 	.word	0x20000ad4
 8081184:	20000aa8 	.word	0x20000aa8
 8081188:	20000a04 	.word	0x20000a04
 808118c:	20000760 	.word	0x20000760
 8081190:	20000214 	.word	0x20000214
 8081194:	20000acc 	.word	0x20000acc
 8081198:	20000a8c 	.word	0x20000a8c
 808119c:	20000b54 	.word	0x20000b54
 80811a0:	20000090 	.word	0x20000090
 80811a4:	2000008c 	.word	0x2000008c
 80811a8:	200006a8 	.word	0x200006a8
 80811ac:	200007ac 	.word	0x200007ac
 80811b0:	20000764 	.word	0x20000764
 80811b4:	20000b3c 	.word	0x20000b3c
 80811b8:	200006a4 	.word	0x200006a4
 80811bc:	20000abc 	.word	0x20000abc
 80811c0:	20000b48 	.word	0x20000b48
 80811c4:	20000888 	.word	0x20000888
 80811c8:	200001e8 	.word	0x200001e8
 80811cc:	200006e4 	.word	0x200006e4
 80811d0:	20000b40 	.word	0x20000b40
 80811d4:	20000210 	.word	0x20000210
 80811d8:	20000a90 	.word	0x20000a90
 80811dc:	2000092c 	.word	0x2000092c
 80811e0:	20000898 	.word	0x20000898
    }
    if (!PM_10_slope)
 80811e4:	2100      	movs	r1, #0
 80811e6:	6820      	ldr	r0, [r4, #0]
 80811e8:	f00a fb90 	bl	808b90c <__aeabi_fcmpeq>
 80811ec:	b118      	cbz	r0, 80811f6 <_Z14readStoredVarsv+0x3be>
    {
        PM_10_slope = 1;
 80811ee:	4b03      	ldr	r3, [pc, #12]	; (80811fc <_Z14readStoredVarsv+0x3c4>)
 80811f0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80811f4:	601a      	str	r2, [r3, #0]
    }
}
 80811f6:	b002      	add	sp, #8
 80811f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80811fc:	20000af0 	.word	0x20000af0

08081200 <_Z7echoGpsv>:
        goToSleepBattery();
    }
}

void echoGps() 
{
 8081200:	b510      	push	{r4, lr}
    char gps_byte = 0;
    while (!Serial.available()) 
 8081202:	f008 ff43 	bl	808a08c <_Z16_fetch_usbserialv>
 8081206:	6803      	ldr	r3, [r0, #0]
 8081208:	691b      	ldr	r3, [r3, #16]
 808120a:	4798      	blx	r3
 808120c:	b990      	cbnz	r0, 8081234 <_Z7echoGpsv+0x34>
    {
        if (Serial5.available() > 0) 
 808120e:	f7ff fc69 	bl	8080ae4 <_Z22__fetch_global_Serial5v>
 8081212:	6803      	ldr	r3, [r0, #0]
 8081214:	691b      	ldr	r3, [r3, #16]
 8081216:	4798      	blx	r3
 8081218:	2800      	cmp	r0, #0
 808121a:	ddf2      	ble.n	8081202 <_Z7echoGpsv+0x2>
        {
            gps_byte = Serial5.read();
 808121c:	f7ff fc62 	bl	8080ae4 <_Z22__fetch_global_Serial5v>
 8081220:	6803      	ldr	r3, [r0, #0]
 8081222:	695b      	ldr	r3, [r3, #20]
 8081224:	4798      	blx	r3
 8081226:	4604      	mov	r4, r0
            Serial.print(gps_byte);
 8081228:	f008 ff30 	bl	808a08c <_Z16_fetch_usbserialv>
 808122c:	b2e1      	uxtb	r1, r4
 808122e:	f007 fee9 	bl	8089004 <_ZN5Print5printEc>
 8081232:	e7e6      	b.n	8081202 <_Z7echoGpsv+0x2>
 8081234:	bd10      	pop	{r4, pc}
	...

08081238 <_Z11printPacketPhh>:
    printPacket(packet, len);
}

// Print the packet specified to the PC serial in a hexadecimal form.
void printPacket(byte* packet, byte len)
{
 8081238:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 808123a:	4606      	mov	r6, r0
 808123c:	460d      	mov	r5, r1
 808123e:	2400      	movs	r4, #0
    for (uint8_t i = 0; i < len; i++)
    {
        sprintf(temp, "%.2X", packet[i]);
        Serial.print(temp);

        if (i != len - 1)
 8081240:	1e4f      	subs	r7, r1, #1
// Print the packet specified to the PC serial in a hexadecimal form.
void printPacket(byte* packet, byte len)
{
    char temp[3];

    for (uint8_t i = 0; i < len; i++)
 8081242:	42ac      	cmp	r4, r5
 8081244:	d012      	beq.n	808126c <_Z11printPacketPhh+0x34>
    {
        sprintf(temp, "%.2X", packet[i]);
 8081246:	5d32      	ldrb	r2, [r6, r4]
 8081248:	490b      	ldr	r1, [pc, #44]	; (8081278 <_Z11printPacketPhh+0x40>)
 808124a:	a801      	add	r0, sp, #4
 808124c:	f007 f9b0 	bl	80885b0 <sprintf>
        Serial.print(temp);
 8081250:	f008 ff1c 	bl	808a08c <_Z16_fetch_usbserialv>
 8081254:	a901      	add	r1, sp, #4
 8081256:	f007 fed1 	bl	8088ffc <_ZN5Print5printEPKc>

        if (i != len - 1)
 808125a:	42a7      	cmp	r7, r4
 808125c:	d004      	beq.n	8081268 <_Z11printPacketPhh+0x30>
        {
            Serial.print(' ');
 808125e:	f008 ff15 	bl	808a08c <_Z16_fetch_usbserialv>
 8081262:	2120      	movs	r1, #32
 8081264:	f007 fece 	bl	8089004 <_ZN5Print5printEc>
 8081268:	3401      	adds	r4, #1
// Print the packet specified to the PC serial in a hexadecimal form.
void printPacket(byte* packet, byte len)
{
    char temp[3];

    for (uint8_t i = 0; i < len; i++)
 808126a:	e7ea      	b.n	8081242 <_Z11printPacketPhh+0xa>
        {
            Serial.print(' ');
        }
    }

    Serial.println();
 808126c:	f008 ff0e 	bl	808a08c <_Z16_fetch_usbserialv>
 8081270:	f007 fecb 	bl	808900a <_ZN5Print7printlnEv>
}
 8081274:	b003      	add	sp, #12
 8081276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8081278:	0808f03b 	.word	0x0808f03b

0808127c <_Z10sendPacketPhh>:
    sendPacket(packet, sizeof(packet));
}

// Send the packet specified to the receiver.
void sendPacket(byte* packet, byte len)
{
 808127c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808127e:	4604      	mov	r4, r0
 8081280:	460f      	mov	r7, r1
 8081282:	1e4e      	subs	r6, r1, #1
 8081284:	1e45      	subs	r5, r0, #1
 8081286:	4406      	add	r6, r0
    for (uint8_t i = 0; i < len; i++)
 8081288:	42b5      	cmp	r5, r6
 808128a:	d007      	beq.n	808129c <_Z10sendPacketPhh+0x20>
    {
        Serial5.write(packet[i]);
 808128c:	f7ff fc2a 	bl	8080ae4 <_Z22__fetch_global_Serial5v>
 8081290:	6803      	ldr	r3, [r0, #0]
 8081292:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8081296:	689b      	ldr	r3, [r3, #8]
 8081298:	4798      	blx	r3
}

// Send the packet specified to the receiver.
void sendPacket(byte* packet, byte len)
{
    for (uint8_t i = 0; i < len; i++)
 808129a:	e7f5      	b.n	8081288 <_Z10sendPacketPhh+0xc>
    {
        Serial5.write(packet[i]);
    }

    printPacket(packet, len);
 808129c:	4639      	mov	r1, r7
 808129e:	4620      	mov	r0, r4
}
 80812a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    for (uint8_t i = 0; i < len; i++)
    {
        Serial5.write(packet[i]);
    }

    printPacket(packet, len);
 80812a4:	f7ff bfc8 	b.w	8081238 <_Z11printPacketPhh>

080812a8 <_Z19enableContinuousGPSv>:

    sendPacket(packet, sizeof(packet));
}

void enableContinuousGPS()
{
 80812a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        0x00, // length
        0x00, // payload
        0x00, // payload
        0x1A, // CK_A
        0x83, // CK_B
    };
 80812aa:	4a07      	ldr	r2, [pc, #28]	; (80812c8 <_Z19enableContinuousGPSv+0x20>)
 80812ac:	ab01      	add	r3, sp, #4
 80812ae:	f852 0f0e 	ldr.w	r0, [r2, #14]!
 80812b2:	6851      	ldr	r1, [r2, #4]
 80812b4:	8912      	ldrh	r2, [r2, #8]
 80812b6:	c303      	stmia	r3!, {r0, r1}

    sendPacket(packet, sizeof(packet));
 80812b8:	210a      	movs	r1, #10
 80812ba:	a801      	add	r0, sp, #4
        0x00, // length
        0x00, // payload
        0x00, // payload
        0x1A, // CK_A
        0x83, // CK_B
    };
 80812bc:	801a      	strh	r2, [r3, #0]

    sendPacket(packet, sizeof(packet));
 80812be:	f7ff ffdd 	bl	808127c <_Z10sendPacketPhh>
}
 80812c2:	b005      	add	sp, #20
 80812c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80812c8:	0808efc8 	.word	0x0808efc8

080812cc <_Z17enableLowPowerGPSv>:

void enableLowPowerGPS()
{
 80812cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        0x00, // length
        0x01, // payload
        0x00, // payload
        0x1A, // CK_A
        0x83, // CK_B
    };
 80812ce:	4a07      	ldr	r2, [pc, #28]	; (80812ec <_Z17enableLowPowerGPSv+0x20>)
 80812d0:	ab01      	add	r3, sp, #4
 80812d2:	f852 0f18 	ldr.w	r0, [r2, #24]!
 80812d6:	6851      	ldr	r1, [r2, #4]
 80812d8:	8912      	ldrh	r2, [r2, #8]
 80812da:	c303      	stmia	r3!, {r0, r1}

    sendPacket(packet, sizeof(packet));
 80812dc:	210a      	movs	r1, #10
 80812de:	a801      	add	r0, sp, #4
        0x00, // length
        0x01, // payload
        0x00, // payload
        0x1A, // CK_A
        0x83, // CK_B
    };
 80812e0:	801a      	strh	r2, [r3, #0]

    sendPacket(packet, sizeof(packet));
 80812e2:	f7ff ffcb 	bl	808127c <_Z10sendPacketPhh>
}
 80812e6:	b005      	add	sp, #20
 80812e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80812ec:	0808efc8 	.word	0x0808efc8

080812f0 <_Z15readTemperaturev>:

    Serial.println();
}

float readTemperature(void)
{
 80812f0:	b538      	push	{r3, r4, r5, lr}
    float temperature = 0;
    if (hih8120_enabled)
 80812f2:	4b31      	ldr	r3, [pc, #196]	; (80813b8 <_Z15readTemperaturev+0xc8>)
 80812f4:	4d31      	ldr	r5, [pc, #196]	; (80813bc <_Z15readTemperaturev+0xcc>)
 80812f6:	681b      	ldr	r3, [r3, #0]
 80812f8:	b1b3      	cbz	r3, 8081328 <_Z15readTemperaturev+0x38>
        //  convert humidity / temperature
        static float rawToHumidity(uint16_t raw) {
            return float(raw) / 16382;
        }
        static float rawToTemperature(uint16_t raw) {
            return (float(raw) / 16382) * 165 - 40;
 80812fa:	4b31      	ldr	r3, [pc, #196]	; (80813c0 <_Z15readTemperaturev+0xd0>)
 80812fc:	8958      	ldrh	r0, [r3, #10]
 80812fe:	f00a f919 	bl	808b534 <__aeabi_ui2f>
 8081302:	4930      	ldr	r1, [pc, #192]	; (80813c4 <_Z15readTemperaturev+0xd4>)
 8081304:	f00a fa22 	bl	808b74c <__aeabi_fdiv>
 8081308:	492f      	ldr	r1, [pc, #188]	; (80813c8 <_Z15readTemperaturev+0xd8>)
 808130a:	f00a f96b 	bl	808b5e4 <__aeabi_fmul>
 808130e:	492f      	ldr	r1, [pc, #188]	; (80813cc <_Z15readTemperaturev+0xdc>)
 8081310:	f00a f85e 	bl	808b3d0 <__aeabi_fsub>
    {
        temperature = hih.temperature();
        if (debugging_enabled)
 8081314:	682b      	ldr	r3, [r5, #0]
 8081316:	4604      	mov	r4, r0
 8081318:	2b00      	cmp	r3, #0
 808131a:	d035      	beq.n	8081388 <_Z15readTemperaturev+0x98>
        {
            Serial.println("Temperature reading from HIH8120");
 808131c:	f008 feb6 	bl	808a08c <_Z16_fetch_usbserialv>
 8081320:	492b      	ldr	r1, [pc, #172]	; (80813d0 <_Z15readTemperaturev+0xe0>)
 8081322:	f007 fe7e 	bl	8089022 <_ZN5Print7printlnEPKc>
 8081326:	e02f      	b.n	8081388 <_Z15readTemperaturev+0x98>
        }
    }
    else if (new_temperature_sensor_enabled)
 8081328:	4b2a      	ldr	r3, [pc, #168]	; (80813d4 <_Z15readTemperaturev+0xe4>)
 808132a:	681b      	ldr	r3, [r3, #0]
 808132c:	b31b      	cbz	r3, 8081376 <_Z15readTemperaturev+0x86>
    {
        if (debugging_enabled)
 808132e:	682b      	ldr	r3, [r5, #0]
 8081330:	b123      	cbz	r3, 808133c <_Z15readTemperaturev+0x4c>
        {
            Serial.println("Temperature reading from TMP36");
 8081332:	f008 feab 	bl	808a08c <_Z16_fetch_usbserialv>
 8081336:	4928      	ldr	r1, [pc, #160]	; (80813d8 <_Z15readTemperaturev+0xe8>)
 8081338:	f007 fe73 	bl	8089022 <_ZN5Print7printlnEPKc>
        }
        temperature = analogRead(A1);
 808133c:	200b      	movs	r0, #11
 808133e:	f009 f93f 	bl	808a5c0 <analogRead>
        temperature *= VOLTS_PER_UNIT;
 8081342:	f00a f8fb 	bl	808b53c <__aeabi_i2f>
 8081346:	f009 fca3 	bl	808ac90 <__aeabi_f2d>
 808134a:	a317      	add	r3, pc, #92	; (adr r3, 80813a8 <_Z15readTemperaturev+0xb8>)
 808134c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081350:	f009 fcf2 	bl	808ad38 <__aeabi_dmul>
 8081354:	f009 ffe8 	bl	808b328 <__aeabi_d2f>
        temperature -= TMP36_OFFSET;
        temperature /= TMP36_VPDC;
 8081358:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 808135c:	f00a f838 	bl	808b3d0 <__aeabi_fsub>
 8081360:	f009 fc96 	bl	808ac90 <__aeabi_f2d>
 8081364:	a312      	add	r3, pc, #72	; (adr r3, 80813b0 <_Z15readTemperaturev+0xc0>)
 8081366:	e9d3 2300 	ldrd	r2, r3, [r3]
 808136a:	f009 fe0f 	bl	808af8c <__aeabi_ddiv>
 808136e:	f009 ffdb 	bl	808b328 <__aeabi_d2f>
 8081372:	4604      	mov	r4, r0
 8081374:	e008      	b.n	8081388 <_Z15readTemperaturev+0x98>
    }
    else
    {
        if (debugging_enabled)
 8081376:	682b      	ldr	r3, [r5, #0]
 8081378:	b123      	cbz	r3, 8081384 <_Z15readTemperaturev+0x94>
        {
            Serial.println("Temperature reading from BME for Alphasense");
 808137a:	f008 fe87 	bl	808a08c <_Z16_fetch_usbserialv>
 808137e:	4917      	ldr	r1, [pc, #92]	; (80813dc <_Z15readTemperaturev+0xec>)
 8081380:	f007 fe4f 	bl	8089022 <_ZN5Print7printlnEPKc>
        }
        temperature = bme.temperature;
 8081384:	4b16      	ldr	r3, [pc, #88]	; (80813e0 <_Z15readTemperaturev+0xf0>)
 8081386:	681c      	ldr	r4, [r3, #0]
    }
    temperature *= temp_slope;
 8081388:	4b16      	ldr	r3, [pc, #88]	; (80813e4 <_Z15readTemperaturev+0xf4>)
 808138a:	4620      	mov	r0, r4
 808138c:	6819      	ldr	r1, [r3, #0]
 808138e:	f00a f929 	bl	808b5e4 <__aeabi_fmul>
 8081392:	4604      	mov	r4, r0
    temperature += temp_zero;       //user input zero offset
 8081394:	4b14      	ldr	r3, [pc, #80]	; (80813e8 <_Z15readTemperaturev+0xf8>)
    return temperature;
 8081396:	6818      	ldr	r0, [r3, #0]
 8081398:	f00a f8d0 	bl	808b53c <__aeabi_i2f>
 808139c:	4621      	mov	r1, r4
 808139e:	f00a f819 	bl	808b3d4 <__addsf3>
}
 80813a2:	bd38      	pop	{r3, r4, r5, pc}
 80813a4:	f3af 8000 	nop.w
 80813a8:	eb1c432d 	.word	0xeb1c432d
 80813ac:	3f4a36e2 	.word	0x3f4a36e2
 80813b0:	47ae147b 	.word	0x47ae147b
 80813b4:	3f847ae1 	.word	0x3f847ae1
 80813b8:	200001e8 	.word	0x200001e8
 80813bc:	20000acc 	.word	0x20000acc
 80813c0:	2000089c 	.word	0x2000089c
 80813c4:	467ff800 	.word	0x467ff800
 80813c8:	43250000 	.word	0x43250000
 80813cc:	42200000 	.word	0x42200000
 80813d0:	0808f040 	.word	0x0808f040
 80813d4:	20000764 	.word	0x20000764
 80813d8:	0808f061 	.word	0x0808f061
 80813dc:	0808f080 	.word	0x0808f080
 80813e0:	200006e8 	.word	0x200006e8
 80813e4:	200007b0 	.word	0x200007b0
 80813e8:	20000aa8 	.word	0x20000aa8

080813ec <_Z12readHumidityv>:

float readHumidity(void)
{
 80813ec:	b538      	push	{r3, r4, r5, lr}
    float humidity;
    if (hih8120_enabled)
 80813ee:	4b19      	ldr	r3, [pc, #100]	; (8081454 <_Z12readHumidityv+0x68>)
 80813f0:	4d19      	ldr	r5, [pc, #100]	; (8081458 <_Z12readHumidityv+0x6c>)
 80813f2:	681b      	ldr	r3, [r3, #0]
 80813f4:	b183      	cbz	r3, 8081418 <_Z12readHumidityv+0x2c>
    {
        humidity = hih.humidity();
        humidity *= 100;
 80813f6:	4b19      	ldr	r3, [pc, #100]	; (808145c <_Z12readHumidityv+0x70>)
 80813f8:	8918      	ldrh	r0, [r3, #8]
 80813fa:	f00a f89b 	bl	808b534 <__aeabi_ui2f>
 80813fe:	4918      	ldr	r1, [pc, #96]	; (8081460 <_Z12readHumidityv+0x74>)
 8081400:	f00a f9a4 	bl	808b74c <__aeabi_fdiv>
 8081404:	4917      	ldr	r1, [pc, #92]	; (8081464 <_Z12readHumidityv+0x78>)
 8081406:	f00a f8ed 	bl	808b5e4 <__aeabi_fmul>
        if (debugging_enabled)
 808140a:	682b      	ldr	r3, [r5, #0]
{
    float humidity;
    if (hih8120_enabled)
    {
        humidity = hih.humidity();
        humidity *= 100;
 808140c:	4604      	mov	r4, r0
        if (debugging_enabled)
 808140e:	b163      	cbz	r3, 808142a <_Z12readHumidityv+0x3e>
        {
            Serial.println("Humidity reading from HIH8120");
 8081410:	f008 fe3c 	bl	808a08c <_Z16_fetch_usbserialv>
 8081414:	4914      	ldr	r1, [pc, #80]	; (8081468 <_Z12readHumidityv+0x7c>)
 8081416:	e006      	b.n	8081426 <_Z12readHumidityv+0x3a>
        }
    }
    else
    {
        humidity = bme.humidity;
 8081418:	4b14      	ldr	r3, [pc, #80]	; (808146c <_Z12readHumidityv+0x80>)
 808141a:	689c      	ldr	r4, [r3, #8]
        if (debugging_enabled)
 808141c:	682b      	ldr	r3, [r5, #0]
 808141e:	b123      	cbz	r3, 808142a <_Z12readHumidityv+0x3e>
        {
            Serial.println("Humidity reading from BME");
 8081420:	f008 fe34 	bl	808a08c <_Z16_fetch_usbserialv>
 8081424:	4912      	ldr	r1, [pc, #72]	; (8081470 <_Z12readHumidityv+0x84>)
 8081426:	f007 fdfc 	bl	8089022 <_ZN5Print7printlnEPKc>
        }
    }

    humidity *= rh_slope;
 808142a:	4b12      	ldr	r3, [pc, #72]	; (8081474 <_Z12readHumidityv+0x88>)
 808142c:	4620      	mov	r0, r4
 808142e:	6819      	ldr	r1, [r3, #0]
 8081430:	f00a f8d8 	bl	808b5e4 <__aeabi_fmul>
 8081434:	4604      	mov	r4, r0
    humidity += rh_zero;       //user input zero offset
 8081436:	4b10      	ldr	r3, [pc, #64]	; (8081478 <_Z12readHumidityv+0x8c>)
 8081438:	6818      	ldr	r0, [r3, #0]
 808143a:	f00a f87f 	bl	808b53c <__aeabi_i2f>
 808143e:	4621      	mov	r1, r4
 8081440:	f009 ffc8 	bl	808b3d4 <__addsf3>
    if (humidity > 100)
 8081444:	4907      	ldr	r1, [pc, #28]	; (8081464 <_Z12readHumidityv+0x78>)
            Serial.println("Humidity reading from BME");
        }
    }

    humidity *= rh_slope;
    humidity += rh_zero;       //user input zero offset
 8081446:	4604      	mov	r4, r0
    if (humidity > 100)
 8081448:	f00a fa88 	bl	808b95c <__aeabi_fcmpgt>
 808144c:	b100      	cbz	r0, 8081450 <_Z12readHumidityv+0x64>
        humidity = 100;
 808144e:	4c05      	ldr	r4, [pc, #20]	; (8081464 <_Z12readHumidityv+0x78>)
    return humidity;
}
 8081450:	4620      	mov	r0, r4
 8081452:	bd38      	pop	{r3, r4, r5, pc}
 8081454:	200001e8 	.word	0x200001e8
 8081458:	20000acc 	.word	0x20000acc
 808145c:	2000089c 	.word	0x2000089c
 8081460:	467ff800 	.word	0x467ff800
 8081464:	42c80000 	.word	0x42c80000
 8081468:	0808f0ac 	.word	0x0808f0ac
 808146c:	200006e8 	.word	0x200006e8
 8081470:	0808f0ca 	.word	0x0808f0ca
 8081474:	200006dc 	.word	0x200006dc
 8081478:	20000760 	.word	0x20000760
 808147c:	00000000 	.word	0x00000000

08081480 <_Z10readAlpha2v>:
    }
    return alpha1_ppmraw;
}

float readAlpha2(void)
{
 8081480:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8081484:	b08b      	sub	sp, #44	; 0x2c
    float volt_half_Vref = 0;
    float sensorCurrent = 0; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent = 0;
    float correctedCurrent = 0;
    float alpha2_ppmraw = 0;
    String alpha2_ppmRounded = "";
 8081486:	4994      	ldr	r1, [pc, #592]	; (80816d8 <_Z10readAlpha2v+0x258>)
 8081488:	a802      	add	r0, sp, #8
 808148a:	f007 fc08 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>

    if (debugging_enabled)
 808148e:	4b93      	ldr	r3, [pc, #588]	; (80816dc <_Z10readAlpha2v+0x25c>)
 8081490:	681a      	ldr	r2, [r3, #0]
 8081492:	461e      	mov	r6, r3
 8081494:	b122      	cbz	r2, 80814a0 <_Z10readAlpha2v+0x20>
    {
        Serial.println("Start of alpha 2 read");
 8081496:	f008 fdf9 	bl	808a08c <_Z16_fetch_usbserialv>
 808149a:	4991      	ldr	r1, [pc, #580]	; (80816e0 <_Z10readAlpha2v+0x260>)
 808149c:	f007 fdc1 	bl	8089022 <_ZN5Print7printlnEPKc>
    }
    digitalWrite(lmp91000_2_en, LOW);   //enable
 80814a0:	4d90      	ldr	r5, [pc, #576]	; (80816e4 <_Z10readAlpha2v+0x264>)
 80814a2:	2100      	movs	r1, #0
 80814a4:	8828      	ldrh	r0, [r5, #0]
 80814a6:	f009 f872 	bl	808a58e <digitalWrite>

    if (Wire.requestFrom(0x4A, 1) == 0)
 80814aa:	f009 f8fb 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 80814ae:	2201      	movs	r2, #1
 80814b0:	214a      	movs	r1, #74	; 0x4a
 80814b2:	f008 ffa5 	bl	808a400 <_ZN7TwoWire11requestFromEii>
 80814b6:	b930      	cbnz	r0, 80814c6 <_Z10readAlpha2v+0x46>
    {
        Serial.println("Couldn't communicate with LMP91000 2");
 80814b8:	f008 fde8 	bl	808a08c <_Z16_fetch_usbserialv>
 80814bc:	498a      	ldr	r1, [pc, #552]	; (80816e8 <_Z10readAlpha2v+0x268>)
 80814be:	f007 fdb0 	bl	8089022 <_ZN5Print7printlnEPKc>
    int32_t A2_temperature = 0; //temperature
    int32_t half_Vref = 0; //half of Vref
    float volt0_gas = 0;
    float volt1_aux = 0;
    float volt2_temperature = 0; //need to code to be able to ensure correct sigfigs..
    float volt_half_Vref = 0;
 80814c2:	2400      	movs	r4, #0
 80814c4:	e02e      	b.n	8081524 <_Z10readAlpha2v+0xa4>
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }
    else
    {
        half_Vref = ads2.readADC_SingleEnded(3); //half of Vref
 80814c6:	2103      	movs	r1, #3
 80814c8:	4888      	ldr	r0, [pc, #544]	; (80816ec <_Z10readAlpha2v+0x26c>)
 80814ca:	f004 fd24 	bl	8085f16 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
        volt_half_Vref = half_Vref * ads_bitmv;
 80814ce:	f00a f835 	bl	808b53c <__aeabi_i2f>
 80814d2:	4b87      	ldr	r3, [pc, #540]	; (80816f0 <_Z10readAlpha2v+0x270>)
 80814d4:	6819      	ldr	r1, [r3, #0]
 80814d6:	f00a f885 	bl	808b5e4 <__aeabi_fmul>
        if (abs((volt_half_Vref) / 1000 - 1.25) > 0.5)
 80814da:	4986      	ldr	r1, [pc, #536]	; (80816f4 <_Z10readAlpha2v+0x274>)
        //delay(200);
    }
    else
    {
        half_Vref = ads2.readADC_SingleEnded(3); //half of Vref
        volt_half_Vref = half_Vref * ads_bitmv;
 80814dc:	4604      	mov	r4, r0
        if (abs((volt_half_Vref) / 1000 - 1.25) > 0.5)
 80814de:	f00a f935 	bl	808b74c <__aeabi_fdiv>
 80814e2:	f009 fbd5 	bl	808ac90 <__aeabi_f2d>
 80814e6:	2200      	movs	r2, #0
 80814e8:	4b83      	ldr	r3, [pc, #524]	; (80816f8 <_Z10readAlpha2v+0x278>)
 80814ea:	4680      	mov	r8, r0
 80814ec:	4689      	mov	r9, r1
 80814ee:	f009 fa6f 	bl	808a9d0 <__aeabi_dsub>
 80814f2:	f009 fed1 	bl	808b298 <__aeabi_d2iz>
 80814f6:	2800      	cmp	r0, #0
 80814f8:	bfb8      	it	lt
 80814fa:	4240      	neglt	r0, r0
 80814fc:	f009 fbb6 	bl	808ac6c <__aeabi_i2d>
 8081500:	2200      	movs	r2, #0
 8081502:	4b7e      	ldr	r3, [pc, #504]	; (80816fc <_Z10readAlpha2v+0x27c>)
 8081504:	f009 fea8 	bl	808b258 <__aeabi_dcmpgt>
 8081508:	b160      	cbz	r0, 8081524 <_Z10readAlpha2v+0xa4>
            //operation_log += "AD1_VREF2,";
            //digitalWrite(red_status_led, HIGH);
            //delay(200);
            //digitalWrite(red_status_led, LOW);
            //delay(200);
            Serial.print("half vref2 ads1");
 808150a:	f008 fdbf 	bl	808a08c <_Z16_fetch_usbserialv>
 808150e:	497c      	ldr	r1, [pc, #496]	; (8081700 <_Z10readAlpha2v+0x280>)
 8081510:	f007 fd74 	bl	8088ffc <_ZN5Print5printEPKc>
            Serial.println(volt_half_Vref / 1000);
 8081514:	f008 fdba 	bl	808a08c <_Z16_fetch_usbserialv>
 8081518:	2302      	movs	r3, #2
 808151a:	9300      	str	r3, [sp, #0]
 808151c:	4642      	mov	r2, r8
 808151e:	464b      	mov	r3, r9
 8081520:	f007 fea6 	bl	8089270 <_ZN5Print7printlnEdi>
        }
    }

    if (lmp91000_2.read(LMP91000_STATUS_REG) == 0)
 8081524:	2100      	movs	r1, #0
 8081526:	4877      	ldr	r0, [pc, #476]	; (8081704 <_Z10readAlpha2v+0x284>)
 8081528:	f004 fb9f 	bl	8085c6a <_ZN8LMP910004readEh>
 808152c:	b930      	cbnz	r0, 808153c <_Z10readAlpha2v+0xbc>
    {
        if (debugging_enabled)
 808152e:	6833      	ldr	r3, [r6, #0]
 8081530:	b123      	cbz	r3, 808153c <_Z10readAlpha2v+0xbc>
            Serial.println("Status == 0 from LMP91000 2 status reg");
 8081532:	f008 fdab 	bl	808a08c <_Z16_fetch_usbserialv>
 8081536:	4974      	ldr	r1, [pc, #464]	; (8081708 <_Z10readAlpha2v+0x288>)
 8081538:	f007 fd73 	bl	8089022 <_ZN5Print7printlnEPKc>
        //delay(200);
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }

    if (Wire.requestFrom(0x4A, 1) == 0 || lmp91000_2.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref) / 1000 - 1.25) > 0.5))
 808153c:	f009 f8b2 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 8081540:	2201      	movs	r2, #1
 8081542:	214a      	movs	r1, #74	; 0x4a
 8081544:	f008 ff5c 	bl	808a400 <_ZN7TwoWire11requestFromEii>
 8081548:	2800      	cmp	r0, #0
 808154a:	f000 80ab 	beq.w	80816a4 <_Z10readAlpha2v+0x224>
 808154e:	2100      	movs	r1, #0
 8081550:	486c      	ldr	r0, [pc, #432]	; (8081704 <_Z10readAlpha2v+0x284>)
 8081552:	f004 fb8a 	bl	8085c6a <_ZN8LMP910004readEh>
 8081556:	2800      	cmp	r0, #0
 8081558:	f000 80a4 	beq.w	80816a4 <_Z10readAlpha2v+0x224>
 808155c:	4965      	ldr	r1, [pc, #404]	; (80816f4 <_Z10readAlpha2v+0x274>)
 808155e:	4620      	mov	r0, r4
 8081560:	f00a f8f4 	bl	808b74c <__aeabi_fdiv>
 8081564:	f009 fb94 	bl	808ac90 <__aeabi_f2d>
 8081568:	2200      	movs	r2, #0
 808156a:	4b63      	ldr	r3, [pc, #396]	; (80816f8 <_Z10readAlpha2v+0x278>)
 808156c:	f009 fa30 	bl	808a9d0 <__aeabi_dsub>
 8081570:	f009 fe92 	bl	808b298 <__aeabi_d2iz>
 8081574:	2800      	cmp	r0, #0
 8081576:	bfb8      	it	lt
 8081578:	4240      	neglt	r0, r0
 808157a:	f009 fb77 	bl	808ac6c <__aeabi_i2d>
 808157e:	2200      	movs	r2, #0
 8081580:	4b5e      	ldr	r3, [pc, #376]	; (80816fc <_Z10readAlpha2v+0x27c>)
 8081582:	f009 fe69 	bl	808b258 <__aeabi_dcmpgt>
 8081586:	2800      	cmp	r0, #0
 8081588:	f040 808c 	bne.w	80816a4 <_Z10readAlpha2v+0x224>
 808158c:	4604      	mov	r4, r0
 808158e:	4681      	mov	r9, r0
 8081590:	4680      	mov	r8, r0
 8081592:	260a      	movs	r6, #10
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for (int i = 0; i < ALPHA_ADC_READ_AMOUNT; i++)
        {
            A0_gas += ads2.readADC_SingleEnded(0); //gas
 8081594:	2100      	movs	r1, #0
 8081596:	4855      	ldr	r0, [pc, #340]	; (80816ec <_Z10readAlpha2v+0x26c>)
 8081598:	f004 fcbd 	bl	8085f16 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
            A1_aux += ads2.readADC_SingleEnded(1); //aux out
 808159c:	2101      	movs	r1, #1
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for (int i = 0; i < ALPHA_ADC_READ_AMOUNT; i++)
        {
            A0_gas += ads2.readADC_SingleEnded(0); //gas
 808159e:	4480      	add	r8, r0
            A1_aux += ads2.readADC_SingleEnded(1); //aux out
 80815a0:	4852      	ldr	r0, [pc, #328]	; (80816ec <_Z10readAlpha2v+0x26c>)
 80815a2:	f004 fcb8 	bl	8085f16 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
            A2_temperature += ads2.readADC_SingleEnded(2); //temperature
 80815a6:	2102      	movs	r1, #2
        A2_temperature = 0;
        half_Vref = 0;
        for (int i = 0; i < ALPHA_ADC_READ_AMOUNT; i++)
        {
            A0_gas += ads2.readADC_SingleEnded(0); //gas
            A1_aux += ads2.readADC_SingleEnded(1); //aux out
 80815a8:	4481      	add	r9, r0
            A2_temperature += ads2.readADC_SingleEnded(2); //temperature
 80815aa:	4850      	ldr	r0, [pc, #320]	; (80816ec <_Z10readAlpha2v+0x26c>)
 80815ac:	f004 fcb3 	bl	8085f16 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
            half_Vref += ads2.readADC_SingleEnded(3); //half of Vref
 80815b0:	2103      	movs	r1, #3
 80815b2:	484e      	ldr	r0, [pc, #312]	; (80816ec <_Z10readAlpha2v+0x26c>)
 80815b4:	f004 fcaf 	bl	8085f16 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
    {
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for (int i = 0; i < ALPHA_ADC_READ_AMOUNT; i++)
 80815b8:	3e01      	subs	r6, #1
        {
            A0_gas += ads2.readADC_SingleEnded(0); //gas
            A1_aux += ads2.readADC_SingleEnded(1); //aux out
            A2_temperature += ads2.readADC_SingleEnded(2); //temperature
            half_Vref += ads2.readADC_SingleEnded(3); //half of Vref
 80815ba:	4404      	add	r4, r0
    {
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for (int i = 0; i < ALPHA_ADC_READ_AMOUNT; i++)
 80815bc:	d1ea      	bne.n	8081594 <_Z10readAlpha2v+0x114>
        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;

        volt0_gas = A0_gas * ads_bitmv;
 80815be:	4b4c      	ldr	r3, [pc, #304]	; (80816f0 <_Z10readAlpha2v+0x270>)
        volt1_aux = A1_aux * ads_bitmv;
        volt2_temperature = A2_temperature * ads_bitmv;
        volt_half_Vref = half_Vref * ads_bitmv;
 80815c0:	270a      	movs	r7, #10
        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;

        volt0_gas = A0_gas * ads_bitmv;
 80815c2:	681e      	ldr	r6, [r3, #0]
        volt1_aux = A1_aux * ads_bitmv;
        volt2_temperature = A2_temperature * ads_bitmv;
        volt_half_Vref = half_Vref * ads_bitmv;
 80815c4:	fb94 f0f7 	sdiv	r0, r4, r7
 80815c8:	f009 ffb8 	bl	808b53c <__aeabi_i2f>
 80815cc:	4631      	mov	r1, r6
 80815ce:	f00a f809 	bl	808b5e4 <__aeabi_fmul>
 80815d2:	4604      	mov	r4, r0

        sensorCurrent = (volt_half_Vref - volt0_gas) / (-1 * 120); // Working Electrode current in microamps (millivolts / Kohms)
 80815d4:	fb98 f0f7 	sdiv	r0, r8, r7
 80815d8:	f009 ffb0 	bl	808b53c <__aeabi_i2f>
 80815dc:	4631      	mov	r1, r6
 80815de:	f00a f801 	bl	808b5e4 <__aeabi_fmul>
 80815e2:	4601      	mov	r1, r0
 80815e4:	4620      	mov	r0, r4
 80815e6:	f009 fef3 	bl	808b3d0 <__aeabi_fsub>
 80815ea:	4948      	ldr	r1, [pc, #288]	; (808170c <_Z10readAlpha2v+0x28c>)
 80815ec:	f00a f8ae 	bl	808b74c <__aeabi_fdiv>
 80815f0:	4680      	mov	r8, r0
        auxCurrent = (volt_half_Vref - volt1_aux) / (-1 * 150);
 80815f2:	fb99 f0f7 	sdiv	r0, r9, r7
 80815f6:	f009 ffa1 	bl	808b53c <__aeabi_i2f>
 80815fa:	4631      	mov	r1, r6
 80815fc:	f009 fff2 	bl	808b5e4 <__aeabi_fmul>
 8081600:	4601      	mov	r1, r0
 8081602:	4620      	mov	r0, r4
 8081604:	f009 fee4 	bl	808b3d0 <__aeabi_fsub>
 8081608:	4941      	ldr	r1, [pc, #260]	; (8081710 <_Z10readAlpha2v+0x290>)
 808160a:	f00a f89f 	bl	808b74c <__aeabi_fdiv>
 808160e:	4604      	mov	r4, r0
        //{1, -1, -0.76}, //CO-A4 (<=10C, 20C, >=30C)
        if (readTemperature() <= 15)
 8081610:	f7ff fe6e 	bl	80812f0 <_Z15readTemperaturev>
 8081614:	493f      	ldr	r1, [pc, #252]	; (8081714 <_Z10readAlpha2v+0x294>)
 8081616:	f00a f98d 	bl	808b934 <__aeabi_fcmple>
 808161a:	b120      	cbz	r0, 8081626 <_Z10readAlpha2v+0x1a6>
        {
            correctedCurrent = ((sensorCurrent)-(auxCurrent));
 808161c:	4621      	mov	r1, r4
 808161e:	4640      	mov	r0, r8
 8081620:	f009 fed6 	bl	808b3d0 <__aeabi_fsub>
 8081624:	e027      	b.n	8081676 <_Z10readAlpha2v+0x1f6>
        }
        else if (readTemperature() <= 25)
 8081626:	f7ff fe63 	bl	80812f0 <_Z15readTemperaturev>
 808162a:	493b      	ldr	r1, [pc, #236]	; (8081718 <_Z10readAlpha2v+0x298>)
 808162c:	f00a f982 	bl	808b934 <__aeabi_fcmple>
 8081630:	b120      	cbz	r0, 808163c <_Z10readAlpha2v+0x1bc>
        {
            correctedCurrent = ((sensorCurrent)-(-1) * (auxCurrent));
 8081632:	4621      	mov	r1, r4
 8081634:	4640      	mov	r0, r8
 8081636:	f009 fecd 	bl	808b3d4 <__addsf3>
 808163a:	e01c      	b.n	8081676 <_Z10readAlpha2v+0x1f6>
        }
        else if (readTemperature() > 25)
 808163c:	f7ff fe58 	bl	80812f0 <_Z15readTemperaturev>
 8081640:	4935      	ldr	r1, [pc, #212]	; (8081718 <_Z10readAlpha2v+0x298>)
 8081642:	f00a f98b 	bl	808b95c <__aeabi_fcmpgt>
 8081646:	b1a8      	cbz	r0, 8081674 <_Z10readAlpha2v+0x1f4>
        {
            correctedCurrent = ((sensorCurrent)-(-0.76) * (auxCurrent));
 8081648:	4620      	mov	r0, r4
 808164a:	f009 fb21 	bl	808ac90 <__aeabi_f2d>
 808164e:	a31e      	add	r3, pc, #120	; (adr r3, 80816c8 <_Z10readAlpha2v+0x248>)
 8081650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081654:	f009 fb70 	bl	808ad38 <__aeabi_dmul>
 8081658:	4606      	mov	r6, r0
 808165a:	4640      	mov	r0, r8
 808165c:	460f      	mov	r7, r1
 808165e:	f009 fb17 	bl	808ac90 <__aeabi_f2d>
 8081662:	4602      	mov	r2, r0
 8081664:	460b      	mov	r3, r1
 8081666:	4630      	mov	r0, r6
 8081668:	4639      	mov	r1, r7
 808166a:	f009 f9b3 	bl	808a9d4 <__adddf3>
 808166e:	f009 fe5b 	bl	808b328 <__aeabi_d2f>
 8081672:	e000      	b.n	8081676 <_Z10readAlpha2v+0x1f6>
    float volt1_aux = 0;
    float volt2_temperature = 0; //need to code to be able to ensure correct sigfigs..
    float volt_half_Vref = 0;
    float sensorCurrent = 0; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent = 0;
    float correctedCurrent = 0;
 8081674:	2000      	movs	r0, #0
        }
        else if (readTemperature() > 25)
        {
            correctedCurrent = ((sensorCurrent)-(-0.76) * (auxCurrent));
        }
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 8081676:	f009 fb0b 	bl	808ac90 <__aeabi_f2d>
 808167a:	a315      	add	r3, pc, #84	; (adr r3, 80816d0 <_Z10readAlpha2v+0x250>)
 808167c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081680:	f009 fc84 	bl	808af8c <__aeabi_ddiv>
 8081684:	f009 fe50 	bl	808b328 <__aeabi_d2f>
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
 8081688:	2202      	movs	r2, #2
 808168a:	4601      	mov	r1, r0
        }
        else if (readTemperature() > 25)
        {
            correctedCurrent = ((sensorCurrent)-(-0.76) * (auxCurrent));
        }
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 808168c:	4604      	mov	r4, r0
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
 808168e:	a806      	add	r0, sp, #24
 8081690:	f007 fb9f 	bl	8088dd2 <_ZN6StringC1Efi>
 8081694:	a906      	add	r1, sp, #24
 8081696:	a802      	add	r0, sp, #8
 8081698:	f007 fb4b 	bl	8088d32 <_ZN6StringaSEOS_>
 808169c:	a806      	add	r0, sp, #24
 808169e:	f007 fab7 	bl	8088c10 <_ZN6StringD1Ev>
 80816a2:	e004      	b.n	80816ae <_Z10readAlpha2v+0x22e>
        //delay(200);
    }

    if (Wire.requestFrom(0x4A, 1) == 0 || lmp91000_2.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref) / 1000 - 1.25) > 0.5))
    {
        alpha2_ppmRounded = "-99";
 80816a4:	491d      	ldr	r1, [pc, #116]	; (808171c <_Z10readAlpha2v+0x29c>)
 80816a6:	a802      	add	r0, sp, #8
 80816a8:	f007 fb4b 	bl	8088d42 <_ZN6StringaSEPKc>
    float volt2_temperature = 0; //need to code to be able to ensure correct sigfigs..
    float volt_half_Vref = 0;
    float sensorCurrent = 0; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent = 0;
    float correctedCurrent = 0;
    float alpha2_ppmraw = 0;
 80816ac:	2400      	movs	r4, #0
        }
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
    }

    digitalWrite(lmp91000_2_en, HIGH);  //disable
 80816ae:	2101      	movs	r1, #1
 80816b0:	8828      	ldrh	r0, [r5, #0]
 80816b2:	f008 ff6c 	bl	808a58e <digitalWrite>
    float volt_half_Vref = 0;
    float sensorCurrent = 0; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent = 0;
    float correctedCurrent = 0;
    float alpha2_ppmraw = 0;
    String alpha2_ppmRounded = "";
 80816b6:	a802      	add	r0, sp, #8
 80816b8:	f007 faaa 	bl	8088c10 <_ZN6StringD1Ev>

    Serial.print("Volt1 Aux:");
    Serial.print(volt1_aux);
    Serial.println("Volts");*/
    return alpha2_ppmraw;
}
 80816bc:	4620      	mov	r0, r4
 80816be:	b00b      	add	sp, #44	; 0x2c
 80816c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80816c4:	f3af 8000 	nop.w
 80816c8:	851eb852 	.word	0x851eb852
 80816cc:	3fe851eb 	.word	0x3fe851eb
 80816d0:	d4fdf3b6 	.word	0xd4fdf3b6
 80816d4:	3fd6e978 	.word	0x3fd6e978
 80816d8:	080917cc 	.word	0x080917cc
 80816dc:	20000acc 	.word	0x20000acc
 80816e0:	0808f0e4 	.word	0x0808f0e4
 80816e4:	200000cc 	.word	0x200000cc
 80816e8:	0808f0fa 	.word	0x0808f0fa
 80816ec:	20000a9a 	.word	0x20000a9a
 80816f0:	200000a0 	.word	0x200000a0
 80816f4:	447a0000 	.word	0x447a0000
 80816f8:	3ff40000 	.word	0x3ff40000
 80816fc:	3fe00000 	.word	0x3fe00000
 8081700:	0808f11f 	.word	0x0808f11f
 8081704:	200001e1 	.word	0x200001e1
 8081708:	0808f12f 	.word	0x0808f12f
 808170c:	c2f00000 	.word	0xc2f00000
 8081710:	c3160000 	.word	0xc3160000
 8081714:	41700000 	.word	0x41700000
 8081718:	41c80000 	.word	0x41c80000
 808171c:	0808f156 	.word	0x0808f156

08081720 <_Z12writeLogFile6String>:

void writeLogFile(String data)
{
 8081720:	b530      	push	{r4, r5, lr}
   * \param[in] csPin SD card chip select pin.
   * \param[in] divisor SPI divisor.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, uint8_t divisor = 2) {
    return SdFatBase::begin(&m_spi, csPin, divisor);
 8081722:	491e      	ldr	r1, [pc, #120]	; (808179c <_Z12writeLogFile6String+0x7c>)
 8081724:	b085      	sub	sp, #20
 8081726:	4605      	mov	r5, r0
 8081728:	2302      	movs	r3, #2
 808172a:	220c      	movs	r2, #12
 808172c:	f5a1 608e 	sub.w	r0, r1, #1136	; 0x470
 8081730:	f7ff fa12 	bl	8080b58 <_ZN9SdFatBase5beginEP9SdSpiBasehh>
    if (sd.begin(CS))
 8081734:	b350      	cbz	r0, 808178c <_Z12writeLogFile6String+0x6c>
    {
        Serial.println("Writing data to log file.");
 8081736:	f008 fca9 	bl	808a08c <_Z16_fetch_usbserialv>
 808173a:	4919      	ldr	r1, [pc, #100]	; (80817a0 <_Z12writeLogFile6String+0x80>)
 808173c:	f007 fc71 	bl	8089022 <_ZN5Print7printlnEPKc>
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, uint8_t oflag = O_READ) {
    return open(m_cwd, path, oflag);
 8081740:	4a18      	ldr	r2, [pc, #96]	; (80817a4 <_Z12writeLogFile6String+0x84>)
 8081742:	4919      	ldr	r1, [pc, #100]	; (80817a8 <_Z12writeLogFile6String+0x88>)
        log_file.open(logFileName, O_CREAT | O_APPEND | O_WRITE);
        if (log_file_started == 0)
 8081744:	4c19      	ldr	r4, [pc, #100]	; (80817ac <_Z12writeLogFile6String+0x8c>)
 8081746:	2346      	movs	r3, #70	; 0x46
 8081748:	6812      	ldr	r2, [r2, #0]
 808174a:	6809      	ldr	r1, [r1, #0]
 808174c:	4818      	ldr	r0, [pc, #96]	; (80817b0 <_Z12writeLogFile6String+0x90>)
 808174e:	f005 fdca 	bl	80872e6 <_ZN7FatFile4openEPS_PKch>
 8081752:	6823      	ldr	r3, [r4, #0]
 8081754:	b993      	cbnz	r3, 808177c <_Z12writeLogFile6String+0x5c>
        {
            log_file.println("File Start timestamp: ");
 8081756:	4917      	ldr	r1, [pc, #92]	; (80817b4 <_Z12writeLogFile6String+0x94>)
 8081758:	4817      	ldr	r0, [pc, #92]	; (80817b8 <_Z12writeLogFile6String+0x98>)
 808175a:	f007 fc62 	bl	8089022 <_ZN5Print7printlnEPKc>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
 808175e:	f007 ff66 	bl	808962e <_ZN9TimeClass3nowEv>
 8081762:	4601      	mov	r1, r0
 8081764:	4668      	mov	r0, sp
 8081766:	f007 fe8f 	bl	8089488 <_ZN9TimeClass7timeStrEl>
            log_file.println(Time.timeStr());
 808176a:	9900      	ldr	r1, [sp, #0]
 808176c:	4812      	ldr	r0, [pc, #72]	; (80817b8 <_Z12writeLogFile6String+0x98>)
 808176e:	f007 fc58 	bl	8089022 <_ZN5Print7printlnEPKc>
 8081772:	4668      	mov	r0, sp
 8081774:	f007 fa4c 	bl	8088c10 <_ZN6StringD1Ev>
            log_file_started = 1;
 8081778:	2301      	movs	r3, #1
 808177a:	6023      	str	r3, [r4, #0]
        }
        log_file.println(data);
 808177c:	6829      	ldr	r1, [r5, #0]
 808177e:	480e      	ldr	r0, [pc, #56]	; (80817b8 <_Z12writeLogFile6String+0x98>)
 8081780:	f007 fc4f 	bl	8089022 <_ZN5Print7printlnEPKc>

        log_file.close();
 8081784:	480a      	ldr	r0, [pc, #40]	; (80817b0 <_Z12writeLogFile6String+0x90>)
 8081786:	f005 fda7 	bl	80872d8 <_ZN7FatFile5closeEv>
 808178a:	e004      	b.n	8081796 <_Z12writeLogFile6String+0x76>
    }
    else
    {
        Serial.println("Unable to write to log file");
 808178c:	f008 fc7e 	bl	808a08c <_Z16_fetch_usbserialv>
 8081790:	490a      	ldr	r1, [pc, #40]	; (80817bc <_Z12writeLogFile6String+0x9c>)
 8081792:	f007 fc46 	bl	8089022 <_ZN5Print7printlnEPKc>
    }
}
 8081796:	b005      	add	sp, #20
 8081798:	bd30      	pop	{r4, r5, pc}
 808179a:	bf00      	nop
 808179c:	2000069c 	.word	0x2000069c
 80817a0:	0808f15a 	.word	0x0808f15a
 80817a4:	20000798 	.word	0x20000798
 80817a8:	20000b94 	.word	0x20000b94
 80817ac:	20000894 	.word	0x20000894
 80817b0:	20000b60 	.word	0x20000b60
 80817b4:	0808f174 	.word	0x0808f174
 80817b8:	20000b58 	.word	0x20000b58
 80817bc:	0808f18b 	.word	0x0808f18b

080817c0 <_Z17readGpsStreamDatev>:
        }
    }
}

void readGpsStreamDate(void)
{
 80817c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80817c4:	b090      	sub	sp, #64	; 0x40
    String gps_sentence = "init";
 80817c6:	49b0      	ldr	r1, [pc, #704]	; (8081a88 <_Z17readGpsStreamDatev+0x2c8>)
 80817c8:	4668      	mov	r0, sp
 80817ca:	f007 fa68 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
    int stringFound = 0;
    int error = 0;
    int comma_counter = 0;
    String prefix_string;
 80817ce:	49af      	ldr	r1, [pc, #700]	; (8081a8c <_Z17readGpsStreamDatev+0x2cc>)
 80817d0:	a804      	add	r0, sp, #16
 80817d2:	f007 fa64 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
    while (!stringFound && !error)
    {
        gps_sentence = Serial5.readStringUntil('\r');
 80817d6:	f7ff f985 	bl	8080ae4 <_Z22__fetch_global_Serial5v>
 80817da:	220d      	movs	r2, #13
 80817dc:	4601      	mov	r1, r0
 80817de:	a80c      	add	r0, sp, #48	; 0x30
 80817e0:	f007 fdba 	bl	8089358 <_ZN6Stream15readStringUntilEc>
 80817e4:	a90c      	add	r1, sp, #48	; 0x30
 80817e6:	4668      	mov	r0, sp
 80817e8:	f007 faa3 	bl	8088d32 <_ZN6StringaSEOS_>
 80817ec:	a80c      	add	r0, sp, #48	; 0x30
 80817ee:	f007 fa0f 	bl	8088c10 <_ZN6StringD1Ev>
        prefix_string = gps_sentence.substring(4, 7);
 80817f2:	2307      	movs	r3, #7
 80817f4:	2204      	movs	r2, #4
 80817f6:	4669      	mov	r1, sp
 80817f8:	a80c      	add	r0, sp, #48	; 0x30
 80817fa:	f007 fb89 	bl	8088f10 <_ZNK6String9substringEjj>
 80817fe:	a90c      	add	r1, sp, #48	; 0x30
 8081800:	a804      	add	r0, sp, #16
 8081802:	f007 fa96 	bl	8088d32 <_ZN6StringaSEOS_>
 8081806:	a80c      	add	r0, sp, #48	; 0x30
 8081808:	f007 fa02 	bl	8088c10 <_ZN6StringD1Ev>
        if (prefix_string.equals("RMC"))
 808180c:	49a0      	ldr	r1, [pc, #640]	; (8081a90 <_Z17readGpsStreamDatev+0x2d0>)
 808180e:	a804      	add	r0, sp, #16
 8081810:	f007 fb61 	bl	8088ed6 <_ZNK6String6equalsEPKc>
 8081814:	bb50      	cbnz	r0, 808186c <_Z17readGpsStreamDatev+0xac>
            //Serial.println(prefix_string);
            //Serial.print("String:");
            //Serial.println(gps_sentence);
            stringFound = 1;
        }
        else if (gps_sentence.equals("init"))
 8081816:	499c      	ldr	r1, [pc, #624]	; (8081a88 <_Z17readGpsStreamDatev+0x2c8>)
 8081818:	4668      	mov	r0, sp
 808181a:	f007 fb5c 	bl	8088ed6 <_ZNK6String6equalsEPKc>
 808181e:	2800      	cmp	r0, #0
 8081820:	d0d9      	beq.n	80817d6 <_Z17readGpsStreamDatev+0x16>
        {
            error = 1;
            Serial.println("Error reading GPS RMC");
 8081822:	f008 fc33 	bl	808a08c <_Z16_fetch_usbserialv>
 8081826:	499b      	ldr	r1, [pc, #620]	; (8081a94 <_Z17readGpsStreamDatev+0x2d4>)
 8081828:	f007 fbfb 	bl	8089022 <_ZN5Print7printlnEPKc>
            writeLogFile("Error reading GPS RMC");
 808182c:	4999      	ldr	r1, [pc, #612]	; (8081a94 <_Z17readGpsStreamDatev+0x2d4>)
 808182e:	a80c      	add	r0, sp, #48	; 0x30
 8081830:	f007 fa35 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
 8081834:	a80c      	add	r0, sp, #48	; 0x30
 8081836:	f7ff ff73 	bl	8081720 <_Z12writeLogFile6String>
 808183a:	a80c      	add	r0, sp, #48	; 0x30
 808183c:	e00b      	b.n	8081856 <_Z17readGpsStreamDatev+0x96>
        comma_counter = 0;

        String tempStr;
        for (uint16_t a = 0; a < gps_sentence.length(); a++)
        {
            if (gps_sentence.charAt(a) == ',')
 808183e:	4621      	mov	r1, r4
 8081840:	4668      	mov	r0, sp
 8081842:	f007 fb63 	bl	8088f0c <_ZNK6String6charAtEj>
 8081846:	282c      	cmp	r0, #44	; 0x2c
 8081848:	d018      	beq.n	808187c <_Z17readGpsStreamDatev+0xbc>
 808184a:	3601      	adds	r6, #1
        //quality is after 6th comma
        //gps_sentence = String("$GNGGA,011545.00,3945.81586,N,10514.09384,W,1,08,1.28,1799.4,M,-21.5,M,,*40");
        comma_counter = 0;

        String tempStr;
        for (uint16_t a = 0; a < gps_sentence.length(); a++)
 808184c:	9b02      	ldr	r3, [sp, #8]
 808184e:	b2b4      	uxth	r4, r6
 8081850:	42a3      	cmp	r3, r4
 8081852:	d8f4      	bhi.n	808183e <_Z17readGpsStreamDatev+0x7e>
        //E/W indicator is after 5th comma
        //quality is after 6th comma
        //gps_sentence = String("$GNGGA,011545.00,3945.81586,N,10514.09384,W,1,08,1.28,1799.4,M,-21.5,M,,*40");
        comma_counter = 0;

        String tempStr;
 8081854:	a808      	add	r0, sp, #32
 8081856:	f007 f9db 	bl	8088c10 <_ZN6StringD1Ev>
{
    String gps_sentence = "init";
    int stringFound = 0;
    int error = 0;
    int comma_counter = 0;
    String prefix_string;
 808185a:	a804      	add	r0, sp, #16
 808185c:	f007 f9d8 	bl	8088c10 <_ZN6StringD1Ev>
    }
}

void readGpsStreamDate(void)
{
    String gps_sentence = "init";
 8081860:	4668      	mov	r0, sp
 8081862:	f007 f9d5 	bl	8088c10 <_ZN6StringD1Ev>
                }
                comma_counter++;
            }
        }
    }
}
 8081866:	b010      	add	sp, #64	; 0x40
 8081868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        //E/W indicator is after 5th comma
        //quality is after 6th comma
        //gps_sentence = String("$GNGGA,011545.00,3945.81586,N,10514.09384,W,1,08,1.28,1799.4,M,-21.5,M,,*40");
        comma_counter = 0;

        String tempStr;
 808186c:	4987      	ldr	r1, [pc, #540]	; (8081a8c <_Z17readGpsStreamDatev+0x2cc>)
 808186e:	a808      	add	r0, sp, #32
 8081870:	2600      	movs	r6, #0
 8081872:	f007 fa14 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
        //N/S indicator is after 3rd comma
        //longitude is after 4th comma (dddmm.mmmm)
        //E/W indicator is after 5th comma
        //quality is after 6th comma
        //gps_sentence = String("$GNGGA,011545.00,3945.81586,N,10514.09384,W,1,08,1.28,1799.4,M,-21.5,M,,*40");
        comma_counter = 0;
 8081876:	4637      	mov	r7, r6
                case HORIZONTAL_DILUTION_INDEX:
                    if (gps_sentence.charAt(a + 1) != ',')
                    {
                        tempStr = gps_sentence.substring(a + 1, a + 3);
                        gps.set_horizontalDilution(tempStr);
                        status_word.status_int &= 0xFFF3;
 8081878:	4d87      	ldr	r5, [pc, #540]	; (8081a98 <_Z17readGpsStreamDatev+0x2d8>)
 808187a:	e7e7      	b.n	808184c <_Z17readGpsStreamDatev+0x8c>
        String tempStr;
        for (uint16_t a = 0; a < gps_sentence.length(); a++)
        {
            if (gps_sentence.charAt(a) == ',')
            {
                switch (comma_counter)
 808187c:	1e7b      	subs	r3, r7, #1
 808187e:	2b06      	cmp	r3, #6
 8081880:	f200 80fb 	bhi.w	8081a7a <_Z17readGpsStreamDatev+0x2ba>
 8081884:	e8df f013 	tbh	[pc, r3, lsl #1]
 8081888:	00f9002c 	.word	0x00f9002c
 808188c:	00f90065 	.word	0x00f90065
 8081890:	00070098 	.word	0x00070098
 8081894:	00b9      	.short	0x00b9
                {
                case DATE_FIELD_INDEX:
                    if (gps_sentence.charAt(a + 1) != ',')
 8081896:	f104 0801 	add.w	r8, r4, #1
 808189a:	4641      	mov	r1, r8
 808189c:	4668      	mov	r0, sp
 808189e:	f007 fb35 	bl	8088f0c <_ZNK6String6charAtEj>
 80818a2:	282c      	cmp	r0, #44	; 0x2c
 80818a4:	f000 80ee 	beq.w	8081a84 <_Z17readGpsStreamDatev+0x2c4>
                    {
                        tempStr = gps_sentence.substring(a + 1, a + 11);
 80818a8:	f104 030b 	add.w	r3, r4, #11
 80818ac:	4642      	mov	r2, r8
 80818ae:	4669      	mov	r1, sp
 80818b0:	a80c      	add	r0, sp, #48	; 0x30
 80818b2:	f007 fb2d 	bl	8088f10 <_ZNK6String9substringEjj>
 80818b6:	a90c      	add	r1, sp, #48	; 0x30
 80818b8:	a808      	add	r0, sp, #32
 80818ba:	f007 fa3a 	bl	8088d32 <_ZN6StringaSEOS_>
 80818be:	a80c      	add	r0, sp, #48	; 0x30
 80818c0:	f007 f9a6 	bl	8088c10 <_ZN6StringD1Ev>
                        //Serial.print("GPS utc string: ");
                        if (debugging_enabled)
 80818c4:	4b75      	ldr	r3, [pc, #468]	; (8081a9c <_Z17readGpsStreamDatev+0x2dc>)
 80818c6:	681b      	ldr	r3, [r3, #0]
 80818c8:	2b00      	cmp	r3, #0
 80818ca:	f000 80db 	beq.w	8081a84 <_Z17readGpsStreamDatev+0x2c4>
                        {
                            Serial.print("GPS utc string: ");
 80818ce:	f008 fbdd 	bl	808a08c <_Z16_fetch_usbserialv>
 80818d2:	4973      	ldr	r1, [pc, #460]	; (8081aa0 <_Z17readGpsStreamDatev+0x2e0>)
 80818d4:	f007 fb92 	bl	8088ffc <_ZN5Print5printEPKc>
                            Serial.println(tempStr);
 80818d8:	f008 fbd8 	bl	808a08c <_Z16_fetch_usbserialv>
 80818dc:	9908      	ldr	r1, [sp, #32]
 80818de:	e0cf      	b.n	8081a80 <_Z17readGpsStreamDatev+0x2c0>
                        //Serial.println(utc_string);
                    }
                    break;

                case LATITUDE_FIELD_INDEX:
                    if (gps_sentence.charAt(a + 1) != ',')
 80818e0:	f104 0801 	add.w	r8, r4, #1
 80818e4:	4641      	mov	r1, r8
 80818e6:	4668      	mov	r0, sp
 80818e8:	f007 fb10 	bl	8088f0c <_ZNK6String6charAtEj>
 80818ec:	282c      	cmp	r0, #44	; 0x2c
 80818ee:	f000 80c9 	beq.w	8081a84 <_Z17readGpsStreamDatev+0x2c4>
                    {
                        tempStr = gps_sentence.substring(a + 1, a + 10);
 80818f2:	f104 030a 	add.w	r3, r4, #10
 80818f6:	4642      	mov	r2, r8
 80818f8:	4669      	mov	r1, sp
 80818fa:	a80c      	add	r0, sp, #48	; 0x30
 80818fc:	f007 fb08 	bl	8088f10 <_ZNK6String9substringEjj>
 8081900:	a90c      	add	r1, sp, #48	; 0x30
 8081902:	a808      	add	r0, sp, #32
 8081904:	f007 fa15 	bl	8088d32 <_ZN6StringaSEOS_>
 8081908:	a80c      	add	r0, sp, #48	; 0x30
 808190a:	f007 f981 	bl	8088c10 <_ZN6StringD1Ev>
                        if (debugging_enabled) {
 808190e:	4b63      	ldr	r3, [pc, #396]	; (8081a9c <_Z17readGpsStreamDatev+0x2dc>)
 8081910:	681b      	ldr	r3, [r3, #0]
 8081912:	b14b      	cbz	r3, 8081928 <_Z17readGpsStreamDatev+0x168>
                            Serial.print("Latitude string: ");
 8081914:	f008 fbba 	bl	808a08c <_Z16_fetch_usbserialv>
 8081918:	4962      	ldr	r1, [pc, #392]	; (8081aa4 <_Z17readGpsStreamDatev+0x2e4>)
 808191a:	f007 fb6f 	bl	8088ffc <_ZN5Print5printEPKc>
                            Serial.print(tempStr);
 808191e:	f008 fbb5 	bl	808a08c <_Z16_fetch_usbserialv>
 8081922:	9908      	ldr	r1, [sp, #32]
 8081924:	f007 fb6a 	bl	8088ffc <_ZN5Print5printEPKc>
                        }
                        //Serial.print("Latitude string: ");
                        //Serial.print(latitudeString);
                        //Serial.print(" ");
                        //Serial.println(gps_sentence.charAt(a+12));
                        gps.set_lat_decimal(tempStr, gps_sentence.charAt(a + 12));
 8081928:	a908      	add	r1, sp, #32
 808192a:	a80c      	add	r0, sp, #48	; 0x30
 808192c:	f007 f9f6 	bl	8088d1c <_ZN6StringC1ERKS_>
 8081930:	f104 010c 	add.w	r1, r4, #12
 8081934:	4668      	mov	r0, sp
 8081936:	f007 fae9 	bl	8088f0c <_ZNK6String6charAtEj>
 808193a:	a90c      	add	r1, sp, #48	; 0x30
 808193c:	4602      	mov	r2, r0
 808193e:	485a      	ldr	r0, [pc, #360]	; (8081aa8 <_Z17readGpsStreamDatev+0x2e8>)
 8081940:	f004 fb14 	bl	8085f6c <_ZN3GPS15set_lat_decimalE6Stringc>
 8081944:	a80c      	add	r0, sp, #48	; 0x30
 8081946:	f007 f963 	bl	8088c10 <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF7;
 808194a:	882b      	ldrh	r3, [r5, #0]
 808194c:	f023 0308 	bic.w	r3, r3, #8
 8081950:	e091      	b.n	8081a76 <_Z17readGpsStreamDatev+0x2b6>
                        //Serial.println(gps.get_latitude(), 5);
                    }
                    break;

                case LONGITUDE_FIELD_INDEX:
                    if (gps_sentence.charAt(a + 1) != ',')
 8081952:	f104 0801 	add.w	r8, r4, #1
 8081956:	4641      	mov	r1, r8
 8081958:	4668      	mov	r0, sp
 808195a:	f007 fad7 	bl	8088f0c <_ZNK6String6charAtEj>
 808195e:	282c      	cmp	r0, #44	; 0x2c
 8081960:	f000 8090 	beq.w	8081a84 <_Z17readGpsStreamDatev+0x2c4>
                    {
                        tempStr = gps_sentence.substring(a + 1, a + 11);
 8081964:	f104 030b 	add.w	r3, r4, #11
 8081968:	4642      	mov	r2, r8
 808196a:	4669      	mov	r1, sp
 808196c:	a80c      	add	r0, sp, #48	; 0x30
 808196e:	f007 facf 	bl	8088f10 <_ZNK6String9substringEjj>
 8081972:	a90c      	add	r1, sp, #48	; 0x30
 8081974:	a808      	add	r0, sp, #32
 8081976:	f007 f9dc 	bl	8088d32 <_ZN6StringaSEOS_>
 808197a:	a80c      	add	r0, sp, #48	; 0x30
 808197c:	f007 f948 	bl	8088c10 <_ZN6StringD1Ev>
                        if (debugging_enabled)
 8081980:	4b46      	ldr	r3, [pc, #280]	; (8081a9c <_Z17readGpsStreamDatev+0x2dc>)
 8081982:	681b      	ldr	r3, [r3, #0]
 8081984:	b14b      	cbz	r3, 808199a <_Z17readGpsStreamDatev+0x1da>
                        {
                            Serial.print("longitude string: ");
 8081986:	f008 fb81 	bl	808a08c <_Z16_fetch_usbserialv>
 808198a:	4948      	ldr	r1, [pc, #288]	; (8081aac <_Z17readGpsStreamDatev+0x2ec>)
 808198c:	f007 fb36 	bl	8088ffc <_ZN5Print5printEPKc>
                            Serial.print(tempStr);
 8081990:	f008 fb7c 	bl	808a08c <_Z16_fetch_usbserialv>
 8081994:	9908      	ldr	r1, [sp, #32]
 8081996:	f007 fb31 	bl	8088ffc <_ZN5Print5printEPKc>
                        }
                        //Serial.print(" ");
                        //Serial.println(gps_sentence.charAt(a+13));
                        gps.set_long_decimal(tempStr, gps_sentence.charAt(a + 13));
 808199a:	a908      	add	r1, sp, #32
 808199c:	a80c      	add	r0, sp, #48	; 0x30
 808199e:	f007 f9bd 	bl	8088d1c <_ZN6StringC1ERKS_>
 80819a2:	f104 010d 	add.w	r1, r4, #13
 80819a6:	4668      	mov	r0, sp
 80819a8:	f007 fab0 	bl	8088f0c <_ZNK6String6charAtEj>
 80819ac:	a90c      	add	r1, sp, #48	; 0x30
 80819ae:	4602      	mov	r2, r0
 80819b0:	483d      	ldr	r0, [pc, #244]	; (8081aa8 <_Z17readGpsStreamDatev+0x2e8>)
 80819b2:	f004 fb21 	bl	8085ff8 <_ZN3GPS16set_long_decimalE6Stringc>
 80819b6:	e01c      	b.n	80819f2 <_Z17readGpsStreamDatev+0x232>
                    break;

                //TODO, make sure this is OK
                //case NUMBER_OF_SATELLITES_INDEX:
                case 5:
                    if (gps_sentence.charAt(a + 1) != ',')
 80819b8:	f104 0801 	add.w	r8, r4, #1
 80819bc:	4641      	mov	r1, r8
 80819be:	4668      	mov	r0, sp
 80819c0:	f007 faa4 	bl	8088f0c <_ZNK6String6charAtEj>
 80819c4:	282c      	cmp	r0, #44	; 0x2c
 80819c6:	d05d      	beq.n	8081a84 <_Z17readGpsStreamDatev+0x2c4>
                    {
                        tempStr = gps_sentence.substring(a + 1, a + 3);
 80819c8:	1ce3      	adds	r3, r4, #3
 80819ca:	4642      	mov	r2, r8
 80819cc:	4669      	mov	r1, sp
 80819ce:	a80c      	add	r0, sp, #48	; 0x30
 80819d0:	f007 fa9e 	bl	8088f10 <_ZNK6String9substringEjj>
 80819d4:	a90c      	add	r1, sp, #48	; 0x30
 80819d6:	a808      	add	r0, sp, #32
 80819d8:	f007 f9ab 	bl	8088d32 <_ZN6StringaSEOS_>
 80819dc:	a80c      	add	r0, sp, #48	; 0x30
 80819de:	f007 f917 	bl	8088c10 <_ZN6StringD1Ev>
                        gps.set_satellites(tempStr);
 80819e2:	a908      	add	r1, sp, #32
 80819e4:	a80c      	add	r0, sp, #48	; 0x30
 80819e6:	f007 f999 	bl	8088d1c <_ZN6StringC1ERKS_>
 80819ea:	a90c      	add	r1, sp, #48	; 0x30
 80819ec:	482e      	ldr	r0, [pc, #184]	; (8081aa8 <_Z17readGpsStreamDatev+0x2e8>)
 80819ee:	f004 fb49 	bl	8086084 <_ZN3GPS14set_satellitesE6String>
 80819f2:	a80c      	add	r0, sp, #48	; 0x30
 80819f4:	f007 f90c 	bl	8088c10 <_ZN6StringD1Ev>
 80819f8:	e044      	b.n	8081a84 <_Z17readGpsStreamDatev+0x2c4>
                    }
                    break;

                case HORIZONTAL_DILUTION_INDEX:
                    if (gps_sentence.charAt(a + 1) != ',')
 80819fa:	f104 0801 	add.w	r8, r4, #1
 80819fe:	4641      	mov	r1, r8
 8081a00:	4668      	mov	r0, sp
 8081a02:	f007 fa83 	bl	8088f0c <_ZNK6String6charAtEj>
 8081a06:	282c      	cmp	r0, #44	; 0x2c
 8081a08:	d03c      	beq.n	8081a84 <_Z17readGpsStreamDatev+0x2c4>
                    {
                        tempStr = gps_sentence.substring(a + 1, a + 3);
 8081a0a:	1ce3      	adds	r3, r4, #3
 8081a0c:	4642      	mov	r2, r8
 8081a0e:	4669      	mov	r1, sp
 8081a10:	a80c      	add	r0, sp, #48	; 0x30
 8081a12:	f007 fa7d 	bl	8088f10 <_ZNK6String9substringEjj>
 8081a16:	a90c      	add	r1, sp, #48	; 0x30
 8081a18:	a808      	add	r0, sp, #32
 8081a1a:	f007 f98a 	bl	8088d32 <_ZN6StringaSEOS_>
 8081a1e:	a80c      	add	r0, sp, #48	; 0x30
 8081a20:	f007 f8f6 	bl	8088c10 <_ZN6StringD1Ev>
                        gps.set_horizontalDilution(tempStr);
 8081a24:	a908      	add	r1, sp, #32
 8081a26:	a80c      	add	r0, sp, #48	; 0x30
 8081a28:	f007 f978 	bl	8088d1c <_ZN6StringC1ERKS_>
 8081a2c:	a90c      	add	r1, sp, #48	; 0x30
 8081a2e:	481e      	ldr	r0, [pc, #120]	; (8081aa8 <_Z17readGpsStreamDatev+0x2e8>)
 8081a30:	f004 fb30 	bl	8086094 <_ZN3GPS22set_horizontalDilutionE6String>
 8081a34:	a80c      	add	r0, sp, #48	; 0x30
 8081a36:	f007 f8eb 	bl	8088c10 <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF3;
 8081a3a:	882b      	ldrh	r3, [r5, #0]
                        if (gps.get_horizontalDilution() < 2)
 8081a3c:	481a      	ldr	r0, [pc, #104]	; (8081aa8 <_Z17readGpsStreamDatev+0x2e8>)
                case HORIZONTAL_DILUTION_INDEX:
                    if (gps_sentence.charAt(a + 1) != ',')
                    {
                        tempStr = gps_sentence.substring(a + 1, a + 3);
                        gps.set_horizontalDilution(tempStr);
                        status_word.status_int &= 0xFFF3;
 8081a3e:	f023 030c 	bic.w	r3, r3, #12
 8081a42:	802b      	strh	r3, [r5, #0]
                        if (gps.get_horizontalDilution() < 2)
 8081a44:	f004 fb3c 	bl	80860c0 <_ZN3GPS22get_horizontalDilutionEv>
 8081a48:	2801      	cmp	r0, #1
 8081a4a:	dc03      	bgt.n	8081a54 <_Z17readGpsStreamDatev+0x294>
                        {
                            status_word.status_int |= 0x000C;
 8081a4c:	882b      	ldrh	r3, [r5, #0]
 8081a4e:	f043 030c 	orr.w	r3, r3, #12
 8081a52:	e010      	b.n	8081a76 <_Z17readGpsStreamDatev+0x2b6>
                        }
                        else if (gps.get_horizontalDilution() < 5)
 8081a54:	4814      	ldr	r0, [pc, #80]	; (8081aa8 <_Z17readGpsStreamDatev+0x2e8>)
 8081a56:	f004 fb33 	bl	80860c0 <_ZN3GPS22get_horizontalDilutionEv>
 8081a5a:	2804      	cmp	r0, #4
 8081a5c:	dc03      	bgt.n	8081a66 <_Z17readGpsStreamDatev+0x2a6>
                        {
                            status_word.status_int |= 0x0008;
 8081a5e:	882b      	ldrh	r3, [r5, #0]
 8081a60:	f043 0308 	orr.w	r3, r3, #8
 8081a64:	e007      	b.n	8081a76 <_Z17readGpsStreamDatev+0x2b6>
                        }
                        else if (gps.get_horizontalDilution() < 20)
 8081a66:	4810      	ldr	r0, [pc, #64]	; (8081aa8 <_Z17readGpsStreamDatev+0x2e8>)
 8081a68:	f004 fb2a 	bl	80860c0 <_ZN3GPS22get_horizontalDilutionEv>
 8081a6c:	2813      	cmp	r0, #19
 8081a6e:	dc09      	bgt.n	8081a84 <_Z17readGpsStreamDatev+0x2c4>
                        {
                            status_word.status_int |= 0x0004;
 8081a70:	882b      	ldrh	r3, [r5, #0]
 8081a72:	f043 0304 	orr.w	r3, r3, #4
 8081a76:	802b      	strh	r3, [r5, #0]
 8081a78:	e004      	b.n	8081a84 <_Z17readGpsStreamDatev+0x2c4>
                        }
                    }
                    break;

                default:
                    Serial.println("Received bad index in readGpsStreamDate");
 8081a7a:	f008 fb07 	bl	808a08c <_Z16_fetch_usbserialv>
 8081a7e:	490c      	ldr	r1, [pc, #48]	; (8081ab0 <_Z17readGpsStreamDatev+0x2f0>)
 8081a80:	f007 facf 	bl	8089022 <_ZN5Print7printlnEPKc>
                    break;
                }
                comma_counter++;
 8081a84:	3701      	adds	r7, #1
 8081a86:	e6e0      	b.n	808184a <_Z17readGpsStreamDatev+0x8a>
 8081a88:	0808f1a7 	.word	0x0808f1a7
 8081a8c:	080917cc 	.word	0x080917cc
 8081a90:	0808f1be 	.word	0x0808f1be
 8081a94:	0808f1ac 	.word	0x0808f1ac
 8081a98:	20000b44 	.word	0x20000b44
 8081a9c:	20000acc 	.word	0x20000acc
 8081aa0:	0808f1c2 	.word	0x0808f1c2
 8081aa4:	0808f1d3 	.word	0x0808f1d3
 8081aa8:	20000938 	.word	0x20000938
 8081aac:	0808f1e5 	.word	0x0808f1e5
 8081ab0:	0808f1f8 	.word	0x0808f1f8

08081ab4 <_Z13readGpsStreamv>:
    String disableString = "";
    Serial5.write()
}*/

void readGpsStream(void) 
{
 8081ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8081ab8:	b08c      	sub	sp, #48	; 0x30
    String gps_sentence = "init";
 8081aba:	49b2      	ldr	r1, [pc, #712]	; (8081d84 <_Z13readGpsStreamv+0x2d0>)
 8081abc:	4668      	mov	r0, sp
 8081abe:	f007 f8ee 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
    int stringFound = 0;
    int error = 0;
    int comma_counter = 0;
    while (!stringFound && !error) 
    {
        gps_sentence = Serial5.readStringUntil('\r');
 8081ac2:	f7ff f80f 	bl	8080ae4 <_Z22__fetch_global_Serial5v>
 8081ac6:	220d      	movs	r2, #13
 8081ac8:	4601      	mov	r1, r0
 8081aca:	a808      	add	r0, sp, #32
 8081acc:	f007 fc44 	bl	8089358 <_ZN6Stream15readStringUntilEc>
 8081ad0:	a908      	add	r1, sp, #32
 8081ad2:	4668      	mov	r0, sp
 8081ad4:	f007 f92d 	bl	8088d32 <_ZN6StringaSEOS_>
 8081ad8:	a808      	add	r0, sp, #32
 8081ada:	f007 f899 	bl	8088c10 <_ZN6StringD1Ev>
        String prefix_string = gps_sentence.substring(4, 7);
 8081ade:	2307      	movs	r3, #7
 8081ae0:	2204      	movs	r2, #4
 8081ae2:	4669      	mov	r1, sp
 8081ae4:	a804      	add	r0, sp, #16
 8081ae6:	f007 fa13 	bl	8088f10 <_ZNK6String9substringEjj>
        if (prefix_string.equals("GGA")) 
 8081aea:	49a7      	ldr	r1, [pc, #668]	; (8081d88 <_Z13readGpsStreamv+0x2d4>)
 8081aec:	a804      	add	r0, sp, #16
 8081aee:	f007 f9f2 	bl	8088ed6 <_ZNK6String6equalsEPKc>
 8081af2:	4605      	mov	r5, r0
 8081af4:	b9a8      	cbnz	r0, 8081b22 <_Z13readGpsStreamv+0x6e>
            //Serial.println(prefix_string);
            //Serial.print("String:");
            //Serial.println(gps_sentence);
            stringFound = 1;
        }
        else if (gps_sentence.equals("init")) 
 8081af6:	49a3      	ldr	r1, [pc, #652]	; (8081d84 <_Z13readGpsStreamv+0x2d0>)
 8081af8:	4668      	mov	r0, sp
 8081afa:	f007 f9ec 	bl	8088ed6 <_ZNK6String6equalsEPKc>
 8081afe:	b198      	cbz	r0, 8081b28 <_Z13readGpsStreamv+0x74>
        {
            error = 1;
            Serial.println("Error reading GPS");
 8081b00:	f008 fac4 	bl	808a08c <_Z16_fetch_usbserialv>
 8081b04:	49a1      	ldr	r1, [pc, #644]	; (8081d8c <_Z13readGpsStreamv+0x2d8>)
 8081b06:	f007 fa8c 	bl	8089022 <_ZN5Print7printlnEPKc>
            writeLogFile("Error reading GPS");
 8081b0a:	49a0      	ldr	r1, [pc, #640]	; (8081d8c <_Z13readGpsStreamv+0x2d8>)
 8081b0c:	a808      	add	r0, sp, #32
 8081b0e:	f007 f8c6 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
 8081b12:	a808      	add	r0, sp, #32
 8081b14:	f7ff fe04 	bl	8081720 <_Z12writeLogFile6String>
 8081b18:	a808      	add	r0, sp, #32
 8081b1a:	f007 f879 	bl	8088c10 <_ZN6StringD1Ev>
            //Serial.println(gps_sentence);
            stringFound = 1;
        }
        else if (gps_sentence.equals("init")) 
        {
            error = 1;
 8081b1e:	2401      	movs	r4, #1
 8081b20:	e004      	b.n	8081b2c <_Z13readGpsStreamv+0x78>
 8081b22:	2400      	movs	r4, #0
        {
            //Serial.print("prefix string: ");
            //Serial.println(prefix_string);
            //Serial.print("String:");
            //Serial.println(gps_sentence);
            stringFound = 1;
 8081b24:	2501      	movs	r5, #1
 8081b26:	e001      	b.n	8081b2c <_Z13readGpsStreamv+0x78>
 8081b28:	4604      	mov	r4, r0
 8081b2a:	4605      	mov	r5, r0
    int error = 0;
    int comma_counter = 0;
    while (!stringFound && !error) 
    {
        gps_sentence = Serial5.readStringUntil('\r');
        String prefix_string = gps_sentence.substring(4, 7);
 8081b2c:	a804      	add	r0, sp, #16
 8081b2e:	f007 f86f 	bl	8088c10 <_ZN6StringD1Ev>
{
    String gps_sentence = "init";
    int stringFound = 0;
    int error = 0;
    int comma_counter = 0;
    while (!stringFound && !error) 
 8081b32:	b9b5      	cbnz	r5, 8081b62 <_Z13readGpsStreamv+0xae>
 8081b34:	2c00      	cmp	r4, #0
 8081b36:	d0c4      	beq.n	8081ac2 <_Z13readGpsStreamv+0xe>
 8081b38:	e00d      	b.n	8081b56 <_Z13readGpsStreamv+0xa2>
        comma_counter = 0;

        String tempStr;
        for (uint16_t a = 0; a < gps_sentence.length(); a++)
        {
            if (gps_sentence.charAt(a) == ',')
 8081b3a:	4621      	mov	r1, r4
 8081b3c:	4668      	mov	r0, sp
 8081b3e:	f007 f9e5 	bl	8088f0c <_ZNK6String6charAtEj>
 8081b42:	282c      	cmp	r0, #44	; 0x2c
 8081b44:	d015      	beq.n	8081b72 <_Z13readGpsStreamv+0xbe>
 8081b46:	3701      	adds	r7, #1
        //gps_sentence = String("$GNGGA,011545.00,3945.81586,N,10514.09384,W,1,08,1.28,1799.4,M,-21.5,M,,*40");
        //
        comma_counter = 0;

        String tempStr;
        for (uint16_t a = 0; a < gps_sentence.length(); a++)
 8081b48:	9b02      	ldr	r3, [sp, #8]
 8081b4a:	b2bc      	uxth	r4, r7
 8081b4c:	42a3      	cmp	r3, r4
 8081b4e:	d8f4      	bhi.n	8081b3a <_Z13readGpsStreamv+0x86>
        //quality is after 6th comma
        //gps_sentence = String("$GNGGA,011545.00,3945.81586,N,10514.09384,W,1,08,1.28,1799.4,M,-21.5,M,,*40");
        //
        comma_counter = 0;

        String tempStr;
 8081b50:	a804      	add	r0, sp, #16
 8081b52:	f007 f85d 	bl	8088c10 <_ZN6StringD1Ev>
    Serial5.write()
}*/

void readGpsStream(void) 
{
    String gps_sentence = "init";
 8081b56:	4668      	mov	r0, sp
 8081b58:	f007 f85a 	bl	8088c10 <_ZN6StringD1Ev>
                }
                comma_counter++;
            }
        }
    }
}
 8081b5c:	b00c      	add	sp, #48	; 0x30
 8081b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        //quality is after 6th comma
        //gps_sentence = String("$GNGGA,011545.00,3945.81586,N,10514.09384,W,1,08,1.28,1799.4,M,-21.5,M,,*40");
        //
        comma_counter = 0;

        String tempStr;
 8081b62:	498b      	ldr	r1, [pc, #556]	; (8081d90 <_Z13readGpsStreamv+0x2dc>)
 8081b64:	a804      	add	r0, sp, #16
 8081b66:	2700      	movs	r7, #0
 8081b68:	f007 f899 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
        //longitude is after 4th comma (dddmm.mmmm)
        //E/W indicator is after 5th comma
        //quality is after 6th comma
        //gps_sentence = String("$GNGGA,011545.00,3945.81586,N,10514.09384,W,1,08,1.28,1799.4,M,-21.5,M,,*40");
        //
        comma_counter = 0;
 8081b6c:	463e      	mov	r6, r7
                case HORIZONTAL_DILUTION_INDEX:
                    if (gps_sentence.charAt(a + 1) != ',')
                    {
                        tempStr = gps_sentence.substring(a + 1, a + 3);
                        gps.set_horizontalDilution(tempStr);
                        status_word.status_int &= 0xFFF3;
 8081b6e:	4d89      	ldr	r5, [pc, #548]	; (8081d94 <_Z13readGpsStreamv+0x2e0>)
 8081b70:	e7ea      	b.n	8081b48 <_Z13readGpsStreamv+0x94>
        String tempStr;
        for (uint16_t a = 0; a < gps_sentence.length(); a++)
        {
            if (gps_sentence.charAt(a) == ',')
            {
                switch (comma_counter)
 8081b72:	2e07      	cmp	r6, #7
 8081b74:	f200 80fe 	bhi.w	8081d74 <_Z13readGpsStreamv+0x2c0>
 8081b78:	e8df f016 	tbh	[pc, r6, lsl #1]
 8081b7c:	002f0008 	.word	0x002f0008
 8081b80:	006800fc 	.word	0x006800fc
 8081b84:	00fc00fc 	.word	0x00fc00fc
 8081b88:	00bc009b 	.word	0x00bc009b
                {
                case TIME_FIELD_INDEX:
                    if (gps_sentence.charAt(a + 1) != ',')
 8081b8c:	f104 0801 	add.w	r8, r4, #1
 8081b90:	4641      	mov	r1, r8
 8081b92:	4668      	mov	r0, sp
 8081b94:	f007 f9ba 	bl	8088f0c <_ZNK6String6charAtEj>
 8081b98:	282c      	cmp	r0, #44	; 0x2c
 8081b9a:	f000 80f1 	beq.w	8081d80 <_Z13readGpsStreamv+0x2cc>
                    {
                        tempStr = gps_sentence.substring(a + 1, a + 11);
 8081b9e:	f104 030b 	add.w	r3, r4, #11
 8081ba2:	4642      	mov	r2, r8
 8081ba4:	4669      	mov	r1, sp
 8081ba6:	a808      	add	r0, sp, #32
 8081ba8:	f007 f9b2 	bl	8088f10 <_ZNK6String9substringEjj>
 8081bac:	a908      	add	r1, sp, #32
 8081bae:	a804      	add	r0, sp, #16
 8081bb0:	f007 f8bf 	bl	8088d32 <_ZN6StringaSEOS_>
 8081bb4:	a808      	add	r0, sp, #32
 8081bb6:	f007 f82b 	bl	8088c10 <_ZN6StringD1Ev>
                        //Serial.print("GPS utc string: ");
                        if (debugging_enabled)
 8081bba:	4b77      	ldr	r3, [pc, #476]	; (8081d98 <_Z13readGpsStreamv+0x2e4>)
 8081bbc:	681b      	ldr	r3, [r3, #0]
 8081bbe:	2b00      	cmp	r3, #0
 8081bc0:	f000 80de 	beq.w	8081d80 <_Z13readGpsStreamv+0x2cc>
                        {
                            Serial.print("GPS utc string: ");
 8081bc4:	f008 fa62 	bl	808a08c <_Z16_fetch_usbserialv>
 8081bc8:	4974      	ldr	r1, [pc, #464]	; (8081d9c <_Z13readGpsStreamv+0x2e8>)
 8081bca:	f007 fa17 	bl	8088ffc <_ZN5Print5printEPKc>
                            Serial.println(tempStr);
 8081bce:	f008 fa5d 	bl	808a08c <_Z16_fetch_usbserialv>
 8081bd2:	9904      	ldr	r1, [sp, #16]
 8081bd4:	f007 fa25 	bl	8089022 <_ZN5Print7printlnEPKc>
 8081bd8:	e0d2      	b.n	8081d80 <_Z13readGpsStreamv+0x2cc>
                        //Serial.println(utc_string);
                    }
                    break;

                case LATITUDE_FIELD_INDEX:
                    if (gps_sentence.charAt(a + 1) != ',')
 8081bda:	f104 0801 	add.w	r8, r4, #1
 8081bde:	4641      	mov	r1, r8
 8081be0:	4668      	mov	r0, sp
 8081be2:	f007 f993 	bl	8088f0c <_ZNK6String6charAtEj>
 8081be6:	282c      	cmp	r0, #44	; 0x2c
 8081be8:	f000 80ca 	beq.w	8081d80 <_Z13readGpsStreamv+0x2cc>
                    {
                        tempStr = gps_sentence.substring(a + 1, a + 10);
 8081bec:	f104 030a 	add.w	r3, r4, #10
 8081bf0:	4642      	mov	r2, r8
 8081bf2:	4669      	mov	r1, sp
 8081bf4:	a808      	add	r0, sp, #32
 8081bf6:	f007 f98b 	bl	8088f10 <_ZNK6String9substringEjj>
 8081bfa:	a908      	add	r1, sp, #32
 8081bfc:	a804      	add	r0, sp, #16
 8081bfe:	f007 f898 	bl	8088d32 <_ZN6StringaSEOS_>
 8081c02:	a808      	add	r0, sp, #32
 8081c04:	f007 f804 	bl	8088c10 <_ZN6StringD1Ev>
                        if (debugging_enabled)
 8081c08:	4b63      	ldr	r3, [pc, #396]	; (8081d98 <_Z13readGpsStreamv+0x2e4>)
 8081c0a:	681b      	ldr	r3, [r3, #0]
 8081c0c:	b14b      	cbz	r3, 8081c22 <_Z13readGpsStreamv+0x16e>
                        {
                            Serial.print("Latitude string: ");
 8081c0e:	f008 fa3d 	bl	808a08c <_Z16_fetch_usbserialv>
 8081c12:	4963      	ldr	r1, [pc, #396]	; (8081da0 <_Z13readGpsStreamv+0x2ec>)
 8081c14:	f007 f9f2 	bl	8088ffc <_ZN5Print5printEPKc>
                            Serial.print(tempStr);
 8081c18:	f008 fa38 	bl	808a08c <_Z16_fetch_usbserialv>
 8081c1c:	9904      	ldr	r1, [sp, #16]
 8081c1e:	f007 f9ed 	bl	8088ffc <_ZN5Print5printEPKc>
                        }
                        //Serial.print("Latitude string: ");
                        //Serial.print(latitudeString);
                        //Serial.print(" ");
                        //Serial.println(gps_sentence.charAt(a+12));
                        gps.set_lat_decimal(tempStr, gps_sentence.charAt(a + 12));
 8081c22:	a904      	add	r1, sp, #16
 8081c24:	a808      	add	r0, sp, #32
 8081c26:	f007 f879 	bl	8088d1c <_ZN6StringC1ERKS_>
 8081c2a:	f104 010c 	add.w	r1, r4, #12
 8081c2e:	4668      	mov	r0, sp
 8081c30:	f007 f96c 	bl	8088f0c <_ZNK6String6charAtEj>
 8081c34:	a908      	add	r1, sp, #32
 8081c36:	4602      	mov	r2, r0
 8081c38:	485a      	ldr	r0, [pc, #360]	; (8081da4 <_Z13readGpsStreamv+0x2f0>)
 8081c3a:	f004 f997 	bl	8085f6c <_ZN3GPS15set_lat_decimalE6Stringc>
 8081c3e:	a808      	add	r0, sp, #32
 8081c40:	f006 ffe6 	bl	8088c10 <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF7;
 8081c44:	882b      	ldrh	r3, [r5, #0]
 8081c46:	f023 0308 	bic.w	r3, r3, #8
 8081c4a:	e07f      	b.n	8081d4c <_Z13readGpsStreamv+0x298>
                        //Serial.println(gps.get_latitude(), 5);
                    }
                    break;

                case LONGITUDE_FIELD_INDEX:
                    if (gps_sentence.charAt(a + 1) != ',')
 8081c4c:	f104 0801 	add.w	r8, r4, #1
 8081c50:	4641      	mov	r1, r8
 8081c52:	4668      	mov	r0, sp
 8081c54:	f007 f95a 	bl	8088f0c <_ZNK6String6charAtEj>
 8081c58:	282c      	cmp	r0, #44	; 0x2c
 8081c5a:	f000 8091 	beq.w	8081d80 <_Z13readGpsStreamv+0x2cc>
                    {
                        tempStr = gps_sentence.substring(a + 1, a + 11);
 8081c5e:	f104 030b 	add.w	r3, r4, #11
 8081c62:	4642      	mov	r2, r8
 8081c64:	4669      	mov	r1, sp
 8081c66:	a808      	add	r0, sp, #32
 8081c68:	f007 f952 	bl	8088f10 <_ZNK6String9substringEjj>
 8081c6c:	a908      	add	r1, sp, #32
 8081c6e:	a804      	add	r0, sp, #16
 8081c70:	f007 f85f 	bl	8088d32 <_ZN6StringaSEOS_>
 8081c74:	a808      	add	r0, sp, #32
 8081c76:	f006 ffcb 	bl	8088c10 <_ZN6StringD1Ev>
                        if (debugging_enabled) {
 8081c7a:	4b47      	ldr	r3, [pc, #284]	; (8081d98 <_Z13readGpsStreamv+0x2e4>)
 8081c7c:	681b      	ldr	r3, [r3, #0]
 8081c7e:	b14b      	cbz	r3, 8081c94 <_Z13readGpsStreamv+0x1e0>
                            Serial.print("longitude string: ");
 8081c80:	f008 fa04 	bl	808a08c <_Z16_fetch_usbserialv>
 8081c84:	4948      	ldr	r1, [pc, #288]	; (8081da8 <_Z13readGpsStreamv+0x2f4>)
 8081c86:	f007 f9b9 	bl	8088ffc <_ZN5Print5printEPKc>
                            Serial.print(tempStr);
 8081c8a:	f008 f9ff 	bl	808a08c <_Z16_fetch_usbserialv>
 8081c8e:	9904      	ldr	r1, [sp, #16]
 8081c90:	f007 f9b4 	bl	8088ffc <_ZN5Print5printEPKc>
                        }
                        //Serial.print(" ");
                        //Serial.println(gps_sentence.charAt(a+13));
                        gps.set_long_decimal(tempStr, gps_sentence.charAt(a + 13));
 8081c94:	a904      	add	r1, sp, #16
 8081c96:	a808      	add	r0, sp, #32
 8081c98:	f007 f840 	bl	8088d1c <_ZN6StringC1ERKS_>
 8081c9c:	f104 010d 	add.w	r1, r4, #13
 8081ca0:	4668      	mov	r0, sp
 8081ca2:	f007 f933 	bl	8088f0c <_ZNK6String6charAtEj>
 8081ca6:	a908      	add	r1, sp, #32
 8081ca8:	4602      	mov	r2, r0
 8081caa:	483e      	ldr	r0, [pc, #248]	; (8081da4 <_Z13readGpsStreamv+0x2f0>)
 8081cac:	f004 f9a4 	bl	8085ff8 <_ZN3GPS16set_long_decimalE6Stringc>
 8081cb0:	e01c      	b.n	8081cec <_Z13readGpsStreamv+0x238>
                        //Serial.println(gps.get_longitude(), 5);
                    }
                    break;

                case NUMBER_OF_SATELLITES_INDEX:
                    if (gps_sentence.charAt(a + 1) != ',')
 8081cb2:	f104 0801 	add.w	r8, r4, #1
 8081cb6:	4641      	mov	r1, r8
 8081cb8:	4668      	mov	r0, sp
 8081cba:	f007 f927 	bl	8088f0c <_ZNK6String6charAtEj>
 8081cbe:	282c      	cmp	r0, #44	; 0x2c
 8081cc0:	d05e      	beq.n	8081d80 <_Z13readGpsStreamv+0x2cc>
                    {
                        tempStr = gps_sentence.substring(a + 1, a + 3);
 8081cc2:	1ce3      	adds	r3, r4, #3
 8081cc4:	4642      	mov	r2, r8
 8081cc6:	4669      	mov	r1, sp
 8081cc8:	a808      	add	r0, sp, #32
 8081cca:	f007 f921 	bl	8088f10 <_ZNK6String9substringEjj>
 8081cce:	a908      	add	r1, sp, #32
 8081cd0:	a804      	add	r0, sp, #16
 8081cd2:	f007 f82e 	bl	8088d32 <_ZN6StringaSEOS_>
 8081cd6:	a808      	add	r0, sp, #32
 8081cd8:	f006 ff9a 	bl	8088c10 <_ZN6StringD1Ev>
                        gps.set_satellites(tempStr);
 8081cdc:	a904      	add	r1, sp, #16
 8081cde:	a808      	add	r0, sp, #32
 8081ce0:	f007 f81c 	bl	8088d1c <_ZN6StringC1ERKS_>
 8081ce4:	a908      	add	r1, sp, #32
 8081ce6:	482f      	ldr	r0, [pc, #188]	; (8081da4 <_Z13readGpsStreamv+0x2f0>)
 8081ce8:	f004 f9cc 	bl	8086084 <_ZN3GPS14set_satellitesE6String>
 8081cec:	a808      	add	r0, sp, #32
 8081cee:	f006 ff8f 	bl	8088c10 <_ZN6StringD1Ev>
 8081cf2:	e045      	b.n	8081d80 <_Z13readGpsStreamv+0x2cc>
                    }
                    break;

                case HORIZONTAL_DILUTION_INDEX:
                    if (gps_sentence.charAt(a + 1) != ',')
 8081cf4:	f104 0801 	add.w	r8, r4, #1
 8081cf8:	4641      	mov	r1, r8
 8081cfa:	4668      	mov	r0, sp
 8081cfc:	f007 f906 	bl	8088f0c <_ZNK6String6charAtEj>
 8081d00:	282c      	cmp	r0, #44	; 0x2c
 8081d02:	d03d      	beq.n	8081d80 <_Z13readGpsStreamv+0x2cc>
                    {
                        tempStr = gps_sentence.substring(a + 1, a + 3);
 8081d04:	1ce3      	adds	r3, r4, #3
 8081d06:	4642      	mov	r2, r8
 8081d08:	4669      	mov	r1, sp
 8081d0a:	a808      	add	r0, sp, #32
 8081d0c:	f007 f900 	bl	8088f10 <_ZNK6String9substringEjj>
 8081d10:	a908      	add	r1, sp, #32
 8081d12:	a804      	add	r0, sp, #16
 8081d14:	f007 f80d 	bl	8088d32 <_ZN6StringaSEOS_>
 8081d18:	a808      	add	r0, sp, #32
 8081d1a:	f006 ff79 	bl	8088c10 <_ZN6StringD1Ev>
                        gps.set_horizontalDilution(tempStr);
 8081d1e:	a904      	add	r1, sp, #16
 8081d20:	a808      	add	r0, sp, #32
 8081d22:	f006 fffb 	bl	8088d1c <_ZN6StringC1ERKS_>
 8081d26:	a908      	add	r1, sp, #32
 8081d28:	481e      	ldr	r0, [pc, #120]	; (8081da4 <_Z13readGpsStreamv+0x2f0>)
 8081d2a:	f004 f9b3 	bl	8086094 <_ZN3GPS22set_horizontalDilutionE6String>
 8081d2e:	a808      	add	r0, sp, #32
 8081d30:	f006 ff6e 	bl	8088c10 <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF3;
 8081d34:	882b      	ldrh	r3, [r5, #0]
                        if (gps.get_horizontalDilution() < 2)
 8081d36:	481b      	ldr	r0, [pc, #108]	; (8081da4 <_Z13readGpsStreamv+0x2f0>)
                case HORIZONTAL_DILUTION_INDEX:
                    if (gps_sentence.charAt(a + 1) != ',')
                    {
                        tempStr = gps_sentence.substring(a + 1, a + 3);
                        gps.set_horizontalDilution(tempStr);
                        status_word.status_int &= 0xFFF3;
 8081d38:	f023 030c 	bic.w	r3, r3, #12
 8081d3c:	802b      	strh	r3, [r5, #0]
                        if (gps.get_horizontalDilution() < 2)
 8081d3e:	f004 f9bf 	bl	80860c0 <_ZN3GPS22get_horizontalDilutionEv>
 8081d42:	2801      	cmp	r0, #1
 8081d44:	dc04      	bgt.n	8081d50 <_Z13readGpsStreamv+0x29c>
                        {
                            status_word.status_int |= 0x000C;
 8081d46:	882b      	ldrh	r3, [r5, #0]
 8081d48:	f043 030c 	orr.w	r3, r3, #12
 8081d4c:	802b      	strh	r3, [r5, #0]
 8081d4e:	e017      	b.n	8081d80 <_Z13readGpsStreamv+0x2cc>
                        }
                        else if (gps.get_horizontalDilution() < 5)
 8081d50:	4814      	ldr	r0, [pc, #80]	; (8081da4 <_Z13readGpsStreamv+0x2f0>)
 8081d52:	f004 f9b5 	bl	80860c0 <_ZN3GPS22get_horizontalDilutionEv>
 8081d56:	2804      	cmp	r0, #4
 8081d58:	dc03      	bgt.n	8081d62 <_Z13readGpsStreamv+0x2ae>
                        {
                            status_word.status_int |= 0x0008;
 8081d5a:	882b      	ldrh	r3, [r5, #0]
 8081d5c:	f043 0308 	orr.w	r3, r3, #8
 8081d60:	e7f4      	b.n	8081d4c <_Z13readGpsStreamv+0x298>
                        }
                        else if (gps.get_horizontalDilution() < 20)
 8081d62:	4810      	ldr	r0, [pc, #64]	; (8081da4 <_Z13readGpsStreamv+0x2f0>)
 8081d64:	f004 f9ac 	bl	80860c0 <_ZN3GPS22get_horizontalDilutionEv>
 8081d68:	2813      	cmp	r0, #19
 8081d6a:	dc09      	bgt.n	8081d80 <_Z13readGpsStreamv+0x2cc>
                        {
                            status_word.status_int |= 0x0004;
 8081d6c:	882b      	ldrh	r3, [r5, #0]
 8081d6e:	f043 0304 	orr.w	r3, r3, #4
 8081d72:	e7eb      	b.n	8081d4c <_Z13readGpsStreamv+0x298>
                        }
                    }
                    break;

                default:
                    Serial.printf("BAD index in readGpsStream\n");
 8081d74:	f008 f98a 	bl	808a08c <_Z16_fetch_usbserialv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 8081d78:	4a0c      	ldr	r2, [pc, #48]	; (8081dac <_Z13readGpsStreamv+0x2f8>)
 8081d7a:	2100      	movs	r1, #0
 8081d7c:	f007 fa86 	bl	808928c <_ZN5Print11printf_implEbPKcz>
                    break;
                }
                comma_counter++;
 8081d80:	3601      	adds	r6, #1
 8081d82:	e6e0      	b.n	8081b46 <_Z13readGpsStreamv+0x92>
 8081d84:	0808f1a7 	.word	0x0808f1a7
 8081d88:	0808f220 	.word	0x0808f220
 8081d8c:	0808f224 	.word	0x0808f224
 8081d90:	080917cc 	.word	0x080917cc
 8081d94:	20000b44 	.word	0x20000b44
 8081d98:	20000acc 	.word	0x20000acc
 8081d9c:	0808f1c2 	.word	0x0808f1c2
 8081da0:	0808f1d3 	.word	0x0808f1d3
 8081da4:	20000938 	.word	0x20000938
 8081da8:	0808f1e5 	.word	0x0808f1e5
 8081dac:	0808f236 	.word	0x0808f236

08081db0 <_Z12sendWifiInfov>:
    }
}

//send wifi information to the ESP
void sendWifiInfo(void)
{
 8081db0:	b510      	push	{r4, lr}
 8081db2:	b090      	sub	sp, #64	; 0x40

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 8081db4:	491d      	ldr	r1, [pc, #116]	; (8081e2c <_Z12sendWifiInfov+0x7c>)
 8081db6:	a808      	add	r0, sp, #32
 8081db8:	f006 ff71 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
    String wifiCredentials = "@!" + String(ssid) + "," + String(password) + "&";
 8081dbc:	491c      	ldr	r1, [pc, #112]	; (8081e30 <_Z12sendWifiInfov+0x80>)
 8081dbe:	a804      	add	r0, sp, #16
 8081dc0:	f006 ffac 	bl	8088d1c <_ZN6StringC1ERKS_>
 8081dc4:	a904      	add	r1, sp, #16
 8081dc6:	a808      	add	r0, sp, #32
 8081dc8:	f007 f867 	bl	8088e9a <_ZplRK15StringSumHelperRK6String>
 8081dcc:	4919      	ldr	r1, [pc, #100]	; (8081e34 <_Z12sendWifiInfov+0x84>)
 8081dce:	f007 f870 	bl	8088eb2 <_ZplRK15StringSumHelperPKc>
 8081dd2:	4604      	mov	r4, r0
 8081dd4:	4918      	ldr	r1, [pc, #96]	; (8081e38 <_Z12sendWifiInfov+0x88>)
 8081dd6:	a80c      	add	r0, sp, #48	; 0x30
 8081dd8:	f006 ffa0 	bl	8088d1c <_ZN6StringC1ERKS_>
 8081ddc:	a90c      	add	r1, sp, #48	; 0x30
 8081dde:	4620      	mov	r0, r4
 8081de0:	f007 f85b 	bl	8088e9a <_ZplRK15StringSumHelperRK6String>
 8081de4:	4915      	ldr	r1, [pc, #84]	; (8081e3c <_Z12sendWifiInfov+0x8c>)
 8081de6:	f007 f864 	bl	8088eb2 <_ZplRK15StringSumHelperPKc>
 8081dea:	4601      	mov	r1, r0
 8081dec:	4668      	mov	r0, sp
 8081dee:	f006 ff95 	bl	8088d1c <_ZN6StringC1ERKS_>
 8081df2:	a80c      	add	r0, sp, #48	; 0x30
 8081df4:	f006 ff0c 	bl	8088c10 <_ZN6StringD1Ev>
 8081df8:	a804      	add	r0, sp, #16
 8081dfa:	f006 ff09 	bl	8088c10 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8081dfe:	a808      	add	r0, sp, #32
 8081e00:	f006 ff06 	bl	8088c10 <_ZN6StringD1Ev>
    Serial.println("Sending new wifi credentials to ESP");
 8081e04:	f008 f942 	bl	808a08c <_Z16_fetch_usbserialv>
 8081e08:	490d      	ldr	r1, [pc, #52]	; (8081e40 <_Z12sendWifiInfov+0x90>)
 8081e0a:	f007 f90a 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial1.println(wifiCredentials);
 8081e0e:	f008 fa53 	bl	808a2b8 <_Z22__fetch_global_Serial1v>
 8081e12:	9900      	ldr	r1, [sp, #0]
 8081e14:	f007 f905 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("Success!");
 8081e18:	f008 f938 	bl	808a08c <_Z16_fetch_usbserialv>
 8081e1c:	4909      	ldr	r1, [pc, #36]	; (8081e44 <_Z12sendWifiInfov+0x94>)
 8081e1e:	f007 f900 	bl	8089022 <_ZN5Print7printlnEPKc>
}

//send wifi information to the ESP
void sendWifiInfo(void)
{
    String wifiCredentials = "@!" + String(ssid) + "," + String(password) + "&";
 8081e22:	4668      	mov	r0, sp
 8081e24:	f006 fef4 	bl	8088c10 <_ZN6StringD1Ev>
    Serial.println("Sending new wifi credentials to ESP");
    Serial1.println(wifiCredentials);
    Serial.println("Success!");
}
 8081e28:	b010      	add	sp, #64	; 0x40
 8081e2a:	bd10      	pop	{r4, pc}
 8081e2c:	0808f2b8 	.word	0x0808f2b8
 8081e30:	20000200 	.word	0x20000200
 8081e34:	0809139e 	.word	0x0809139e
 8081e38:	200001cc 	.word	0x200001cc
 8081e3c:	0808f4e1 	.word	0x0808f4e1
 8081e40:	0808f2bb 	.word	0x0808f2bb
 8081e44:	0808f2df 	.word	0x0808f2df

08081e48 <_Z16goToSleepBatteryv>:
    //System.sleep(D4, FALLING, sleepInterval * 2);     //every 2 minutes wake up and check if battery voltage is too low
    System.reset();
}

void goToSleepBattery(void)
{
 8081e48:	b510      	push	{r4, lr}
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 8081e4a:	4c2c      	ldr	r4, [pc, #176]	; (8081efc <_Z16goToSleepBatteryv+0xb4>)
 8081e4c:	2101      	movs	r1, #1
 8081e4e:	8820      	ldrh	r0, [r4, #0]
 8081e50:	f008 fb9d 	bl	808a58e <digitalWrite>
    delay(250);                   // waits for a second
 8081e54:	20fa      	movs	r0, #250	; 0xfa
 8081e56:	f007 fc37 	bl	80896c8 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 8081e5a:	2100      	movs	r1, #0
 8081e5c:	8820      	ldrh	r0, [r4, #0]
 8081e5e:	f008 fb96 	bl	808a58e <digitalWrite>
    delay(250);                   // waits for a second
 8081e62:	20fa      	movs	r0, #250	; 0xfa
 8081e64:	f007 fc30 	bl	80896c8 <delay>
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 8081e68:	2101      	movs	r1, #1
 8081e6a:	8820      	ldrh	r0, [r4, #0]
 8081e6c:	f008 fb8f 	bl	808a58e <digitalWrite>
    delay(250);                   // waits for a second
 8081e70:	20fa      	movs	r0, #250	; 0xfa
 8081e72:	f007 fc29 	bl	80896c8 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 8081e76:	2100      	movs	r1, #0
 8081e78:	8820      	ldrh	r0, [r4, #0]
 8081e7a:	f008 fb88 	bl	808a58e <digitalWrite>
    delay(250);                   // waits for a second
 8081e7e:	20fa      	movs	r0, #250	; 0xfa
 8081e80:	f007 fc22 	bl	80896c8 <delay>
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 8081e84:	2101      	movs	r1, #1
 8081e86:	8820      	ldrh	r0, [r4, #0]
 8081e88:	f008 fb81 	bl	808a58e <digitalWrite>
    delay(250);                   // waits for a second
 8081e8c:	20fa      	movs	r0, #250	; 0xfa
 8081e8e:	f007 fc1b 	bl	80896c8 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 8081e92:	2100      	movs	r1, #0
 8081e94:	8820      	ldrh	r0, [r4, #0]
 8081e96:	f008 fb7a 	bl	808a58e <digitalWrite>
    delay(250);                   // waits for a second
 8081e9a:	20fa      	movs	r0, #250	; 0xfa
 8081e9c:	f007 fc14 	bl	80896c8 <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 8081ea0:	2101      	movs	r1, #1
 8081ea2:	8820      	ldrh	r0, [r4, #0]
 8081ea4:	f008 fb73 	bl	808a58e <digitalWrite>
    delay(250);                   // waits for a second
 8081ea8:	20fa      	movs	r0, #250	; 0xfa
 8081eaa:	f007 fc0d 	bl	80896c8 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 8081eae:	2100      	movs	r1, #0
 8081eb0:	8820      	ldrh	r0, [r4, #0]
 8081eb2:	f008 fb6c 	bl	808a58e <digitalWrite>
    delay(250);                   // waits for a second
 8081eb6:	20fa      	movs	r0, #250	; 0xfa
 8081eb8:	f007 fc06 	bl	80896c8 <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 8081ebc:	2101      	movs	r1, #1
 8081ebe:	8820      	ldrh	r0, [r4, #0]
 8081ec0:	f008 fb65 	bl	808a58e <digitalWrite>
    delay(250);                   // waits for a second
 8081ec4:	20fa      	movs	r0, #250	; 0xfa
 8081ec6:	f007 fbff 	bl	80896c8 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 8081eca:	2100      	movs	r1, #0
 8081ecc:	8820      	ldrh	r0, [r4, #0]
 8081ece:	f008 fb5e 	bl	808a58e <digitalWrite>
    delay(250);                   // waits for a second
 8081ed2:	20fa      	movs	r0, #250	; 0xfa
 8081ed4:	f007 fbf8 	bl	80896c8 <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 8081ed8:	2101      	movs	r1, #1
 8081eda:	8820      	ldrh	r0, [r4, #0]
 8081edc:	f008 fb57 	bl	808a58e <digitalWrite>
    delay(250);                   // waits for a second
 8081ee0:	20fa      	movs	r0, #250	; 0xfa
 8081ee2:	f007 fbf1 	bl	80896c8 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 8081ee6:	8820      	ldrh	r0, [r4, #0]
 8081ee8:	2100      	movs	r1, #0
 8081eea:	f008 fb50 	bl	808a58e <digitalWrite>
    digitalWrite(esp_wroom_en, HIGH);
    digitalWrite(blower_en, HIGH);
    digitalWrite(co2_en, HIGH);
    digitalWrite(fiveVolt_en, HIGH);*/
    //System.sleep(SLEEP_MODE_DEEP, 600);
}
 8081eee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
    delay(250);                   // waits for a second
    digitalWrite(power_led_en, LOW);    // Sets the LED off

    //Serial.println("Turning off batfet");
    writeRegister(7, 0b01101011);   //turn off batfet
 8081ef2:	216b      	movs	r1, #107	; 0x6b
 8081ef4:	2007      	movs	r0, #7
 8081ef6:	f7fe be59 	b.w	8080bac <_Z13writeRegisterhh>
 8081efa:	bf00      	nop
 8081efc:	20000094 	.word	0x20000094

08081f00 <_Z8resetESPv>:
    digitalWrite(fiveVolt_en, HIGH);*/
    //System.sleep(SLEEP_MODE_DEEP, 600);
}

void resetESP(void)
{
 8081f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    digitalWrite(esp_wroom_en, LOW);
 8081f02:	4f17      	ldr	r7, [pc, #92]	; (8081f60 <_Z8resetESPv+0x60>)
    digitalWrite(plantower_en, LOW);
 8081f04:	4e17      	ldr	r6, [pc, #92]	; (8081f64 <_Z8resetESPv+0x64>)
    //System.sleep(SLEEP_MODE_DEEP, 600);
}

void resetESP(void)
{
    digitalWrite(esp_wroom_en, LOW);
 8081f06:	8838      	ldrh	r0, [r7, #0]
    digitalWrite(plantower_en, LOW);
    digitalWrite(blower_en, LOW);
 8081f08:	4d17      	ldr	r5, [pc, #92]	; (8081f68 <_Z8resetESPv+0x68>)
    //System.sleep(SLEEP_MODE_DEEP, 600);
}

void resetESP(void)
{
    digitalWrite(esp_wroom_en, LOW);
 8081f0a:	2100      	movs	r1, #0
 8081f0c:	f008 fb3f 	bl	808a58e <digitalWrite>
    digitalWrite(plantower_en, LOW);
    digitalWrite(blower_en, LOW);
    digitalWrite(co2_en, LOW);
 8081f10:	4c16      	ldr	r4, [pc, #88]	; (8081f6c <_Z8resetESPv+0x6c>)
}

void resetESP(void)
{
    digitalWrite(esp_wroom_en, LOW);
    digitalWrite(plantower_en, LOW);
 8081f12:	8830      	ldrh	r0, [r6, #0]
 8081f14:	2100      	movs	r1, #0
 8081f16:	f008 fb3a 	bl	808a58e <digitalWrite>
    digitalWrite(blower_en, LOW);
 8081f1a:	8828      	ldrh	r0, [r5, #0]
 8081f1c:	2100      	movs	r1, #0
 8081f1e:	f008 fb36 	bl	808a58e <digitalWrite>
    digitalWrite(co2_en, LOW);
 8081f22:	2100      	movs	r1, #0
 8081f24:	8820      	ldrh	r0, [r4, #0]
 8081f26:	f008 fb32 	bl	808a58e <digitalWrite>
    delay(1000);
 8081f2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8081f2e:	f007 fbcb 	bl	80896c8 <delay>
    digitalWrite(esp_wroom_en, HIGH);
 8081f32:	8838      	ldrh	r0, [r7, #0]
 8081f34:	2101      	movs	r1, #1
 8081f36:	f008 fb2a 	bl	808a58e <digitalWrite>
    digitalWrite(plantower_en, HIGH);
 8081f3a:	8830      	ldrh	r0, [r6, #0]
 8081f3c:	2101      	movs	r1, #1
 8081f3e:	f008 fb26 	bl	808a58e <digitalWrite>
    digitalWrite(blower_en, HIGH);
 8081f42:	8828      	ldrh	r0, [r5, #0]
 8081f44:	2101      	movs	r1, #1
 8081f46:	f008 fb22 	bl	808a58e <digitalWrite>
    digitalWrite(co2_en, HIGH);
 8081f4a:	8820      	ldrh	r0, [r4, #0]
 8081f4c:	2101      	movs	r1, #1
 8081f4e:	f008 fb1e 	bl	808a58e <digitalWrite>
    delay(1000);
}
 8081f52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    delay(1000);
    digitalWrite(esp_wroom_en, HIGH);
    digitalWrite(plantower_en, HIGH);
    digitalWrite(blower_en, HIGH);
    digitalWrite(co2_en, HIGH);
    delay(1000);
 8081f56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8081f5a:	f007 bbb5 	b.w	80896c8 <delay>
 8081f5e:	bf00      	nop
 8081f60:	2000009c 	.word	0x2000009c
 8081f64:	200000c8 	.word	0x200000c8
 8081f68:	200000c4 	.word	0x200000c4
 8081f6c:	200000a4 	.word	0x200000a4

08081f70 <setup>:
    EEPROM.put(SENSIBLE_IOT_ENABLE_MEM_ADDRESS, 0);
    EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, 0);
}

void setup()
{
 8081f70:	b570      	push	{r4, r5, r6, lr}
    status_word.status_int = 0;
    status_word.status_int |= (APP_VERSION << 12) & 0xFF00;
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
 8081f72:	4baa      	ldr	r3, [pc, #680]	; (808221c <setup+0x2ac>)
    EEPROM.put(SENSIBLE_IOT_ENABLE_MEM_ADDRESS, 0);
    EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, 0);
}

void setup()
{
 8081f74:	b0a8      	sub	sp, #160	; 0xa0
    status_word.status_int = 0;
    status_word.status_int |= (APP_VERSION << 12) & 0xFF00;
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
 8081f76:	f44f 42da 	mov.w	r2, #27904	; 0x6d00
    //status_word.status_int |= 0x6500;

    //Initialization error log
    String init_log;
 8081f7a:	49a9      	ldr	r1, [pc, #676]	; (8082220 <setup+0x2b0>)
 8081f7c:	a801      	add	r0, sp, #4

    setADCSampleTime(ADC_SampleTime_480Cycles);
    //setup i/o
    pinMode(lmp91000_1_en, OUTPUT);
 8081f7e:	4da9      	ldr	r5, [pc, #676]	; (8082224 <setup+0x2b4>)

void setup()
{
    status_word.status_int = 0;
    status_word.status_int |= (APP_VERSION << 12) & 0xFF00;
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
 8081f80:	801a      	strh	r2, [r3, #0]
    String init_log;

    setADCSampleTime(ADC_SampleTime_480Cycles);
    //setup i/o
    pinMode(lmp91000_1_en, OUTPUT);
    pinMode(lmp91000_2_en, OUTPUT);
 8081f82:	4ca9      	ldr	r4, [pc, #676]	; (8082228 <setup+0x2b8>)
    status_word.status_int |= (APP_VERSION << 12) & 0xFF00;
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
    //status_word.status_int |= 0x6500;

    //Initialization error log
    String init_log;
 8081f84:	f006 fe8b 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>

    setADCSampleTime(ADC_SampleTime_480Cycles);
 8081f88:	2007      	movs	r0, #7
 8081f8a:	f007 fb9b 	bl	80896c4 <setADCSampleTime>
    //setup i/o
    pinMode(lmp91000_1_en, OUTPUT);
 8081f8e:	2101      	movs	r1, #1
 8081f90:	8828      	ldrh	r0, [r5, #0]
 8081f92:	f008 faeb 	bl	808a56c <pinMode>
    pinMode(lmp91000_2_en, OUTPUT);
 8081f96:	2101      	movs	r1, #1
 8081f98:	8820      	ldrh	r0, [r4, #0]
 8081f9a:	f008 fae7 	bl	808a56c <pinMode>
    pinMode(fiveVolt_en, OUTPUT);
 8081f9e:	4ba3      	ldr	r3, [pc, #652]	; (808222c <setup+0x2bc>)
 8081fa0:	2101      	movs	r1, #1
 8081fa2:	8818      	ldrh	r0, [r3, #0]
 8081fa4:	f008 fae2 	bl	808a56c <pinMode>
    pinMode(plantower_en, OUTPUT);
 8081fa8:	4ba1      	ldr	r3, [pc, #644]	; (8082230 <setup+0x2c0>)
 8081faa:	2101      	movs	r1, #1
 8081fac:	8818      	ldrh	r0, [r3, #0]
 8081fae:	f008 fadd 	bl	808a56c <pinMode>
    pinMode(power_led_en, OUTPUT);
 8081fb2:	4ba0      	ldr	r3, [pc, #640]	; (8082234 <setup+0x2c4>)
 8081fb4:	2101      	movs	r1, #1
 8081fb6:	8818      	ldrh	r0, [r3, #0]
 8081fb8:	f008 fad8 	bl	808a56c <pinMode>
    pinMode(esp_wroom_en, OUTPUT);
 8081fbc:	4b9e      	ldr	r3, [pc, #632]	; (8082238 <setup+0x2c8>)
 8081fbe:	2101      	movs	r1, #1
 8081fc0:	8818      	ldrh	r0, [r3, #0]
 8081fc2:	f008 fad3 	bl	808a56c <pinMode>
    pinMode(blower_en, OUTPUT);
 8081fc6:	4b9d      	ldr	r3, [pc, #628]	; (808223c <setup+0x2cc>)
 8081fc8:	2101      	movs	r1, #1
 8081fca:	8818      	ldrh	r0, [r3, #0]
 8081fcc:	f008 face 	bl	808a56c <pinMode>
    //pinMode(D4, INPUT);
    pinMode(co2_en, OUTPUT);
 8081fd0:	4b9b      	ldr	r3, [pc, #620]	; (8082240 <setup+0x2d0>)
 8081fd2:	2101      	movs	r1, #1
 8081fd4:	8818      	ldrh	r0, [r3, #0]
 8081fd6:	f008 fac9 	bl	808a56c <pinMode>

    //read all stored variables (calibration parameters)
    readStoredVars();
 8081fda:	f7fe ff2d 	bl	8080e38 <_Z14readStoredVarsv>

    pmic.begin();
 8081fde:	4899      	ldr	r0, [pc, #612]	; (8082244 <setup+0x2d4>)
 8081fe0:	f006 fb26 	bl	8088630 <_ZN4PMIC5beginEv>
    pmic.setChargeVoltage(4208);      //  Set Li-Po charge termination voltage to 4.21V,
 8081fe4:	f241 0170 	movw	r1, #4208	; 0x1070
 8081fe8:	4896      	ldr	r0, [pc, #600]	; (8082244 <setup+0x2d4>)
 8081fea:	f006 fc51 	bl	8088890 <_ZN4PMIC16setChargeVoltageEt>
    //pmic.setChargeCurrent(0,1,1,0,0,0);
    //pmic.setInputCurrentLimit(1200);
    pmic.enableCharging();
 8081fee:	4895      	ldr	r0, [pc, #596]	; (8082244 <setup+0x2d4>)
 8081ff0:	f006 fc19 	bl	8088826 <_ZN4PMIC14enableChargingEv>
    writeRegister(0, 0b00110100);
    writeRegister(1, 0b00011011);
    //writeRegister(2, 0b01100000);
    //check power
    powerCheck.loop();
 8081ff4:	4e94      	ldr	r6, [pc, #592]	; (8082248 <setup+0x2d8>)
    pmic.begin();
    pmic.setChargeVoltage(4208);      //  Set Li-Po charge termination voltage to 4.21V,
    //pmic.setChargeCurrent(0,1,1,0,0,0);
    //pmic.setInputCurrentLimit(1200);
    pmic.enableCharging();
    writeRegister(0, 0b00110100);
 8081ff6:	2134      	movs	r1, #52	; 0x34
 8081ff8:	2000      	movs	r0, #0
 8081ffa:	f7fe fdd7 	bl	8080bac <_Z13writeRegisterhh>
    writeRegister(1, 0b00011011);
 8081ffe:	211b      	movs	r1, #27
 8082000:	2001      	movs	r0, #1
 8082002:	f7fe fdd3 	bl	8080bac <_Z13writeRegisterhh>
    //writeRegister(2, 0b01100000);
    //check power
    powerCheck.loop();
 8082006:	4630      	mov	r0, r6
 8082008:	f003 fede 	bl	8085dc8 <_ZN10PowerCheck4loopEv>

    if (powerCheck.getHasPower() == 0) 
 808200c:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
 8082010:	b913      	cbnz	r3, 8082018 <setup+0xa8>
    {
        goToSleepBattery();
 8082012:	f7ff ff19 	bl	8081e48 <_Z16goToSleepBatteryv>
 8082016:	e00e      	b.n	8082036 <setup+0xc6>
    }
    else if ((battery_threshold_enable == 1) && (fuel.getSoC() < BATTERY_THRESHOLD) && (powerCheck.getHasPower() == 0)) 
 8082018:	4b8c      	ldr	r3, [pc, #560]	; (808224c <setup+0x2dc>)
 808201a:	681b      	ldr	r3, [r3, #0]
 808201c:	2b01      	cmp	r3, #1
 808201e:	d10a      	bne.n	8082036 <setup+0xc6>
 8082020:	488b      	ldr	r0, [pc, #556]	; (8082250 <setup+0x2e0>)
 8082022:	f007 fbc5 	bl	80897b0 <_ZN9FuelGauge6getSoCEv>
 8082026:	498b      	ldr	r1, [pc, #556]	; (8082254 <setup+0x2e4>)
 8082028:	f009 fc7a 	bl	808b920 <__aeabi_fcmplt>
 808202c:	b118      	cbz	r0, 8082036 <setup+0xc6>
 808202e:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
 8082032:	2b00      	cmp	r3, #0
 8082034:	d0ed      	beq.n	8082012 <setup+0xa2>
    //attachInterrupt(D4, System.reset, RISING);
    //if(digitalRead(D4)){
    //  goToSleep();
    //}

    digitalWrite(lmp91000_1_en, HIGH);
 8082036:	2101      	movs	r1, #1
 8082038:	8828      	ldrh	r0, [r5, #0]
 808203a:	f008 faa8 	bl	808a58e <digitalWrite>
    digitalWrite(lmp91000_2_en, HIGH);
 808203e:	8820      	ldrh	r0, [r4, #0]
 8082040:	2101      	movs	r1, #1
 8082042:	f008 faa4 	bl	808a58e <digitalWrite>
    digitalWrite(power_led_en, HIGH);
 8082046:	4b7b      	ldr	r3, [pc, #492]	; (8082234 <setup+0x2c4>)
 8082048:	2101      	movs	r1, #1
 808204a:	8818      	ldrh	r0, [r3, #0]
 808204c:	f008 fa9f 	bl	808a58e <digitalWrite>
    digitalWrite(plantower_en, HIGH);
 8082050:	4b77      	ldr	r3, [pc, #476]	; (8082230 <setup+0x2c0>)
 8082052:	2101      	movs	r1, #1
 8082054:	8818      	ldrh	r0, [r3, #0]
 8082056:	f008 fa9a 	bl	808a58e <digitalWrite>
    digitalWrite(esp_wroom_en, HIGH);
 808205a:	4b77      	ldr	r3, [pc, #476]	; (8082238 <setup+0x2c8>)
 808205c:	2101      	movs	r1, #1
 808205e:	8818      	ldrh	r0, [r3, #0]
 8082060:	f008 fa95 	bl	808a58e <digitalWrite>
    digitalWrite(blower_en, HIGH);
 8082064:	4b75      	ldr	r3, [pc, #468]	; (808223c <setup+0x2cc>)
 8082066:	2101      	movs	r1, #1
 8082068:	8818      	ldrh	r0, [r3, #0]
 808206a:	f008 fa90 	bl	808a58e <digitalWrite>
    digitalWrite(co2_en, HIGH);
 808206e:	4b74      	ldr	r3, [pc, #464]	; (8082240 <setup+0x2d0>)
 8082070:	2101      	movs	r1, #1
 8082072:	8818      	ldrh	r0, [r3, #0]
 8082074:	f008 fa8b 	bl	808a58e <digitalWrite>
    digitalWrite(fiveVolt_en, HIGH);
 8082078:	4b6c      	ldr	r3, [pc, #432]	; (808222c <setup+0x2bc>)
 808207a:	2101      	movs	r1, #1
 808207c:	8818      	ldrh	r0, [r3, #0]
 808207e:	f008 fa86 	bl	808a58e <digitalWrite>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 8082082:	4a75      	ldr	r2, [pc, #468]	; (8082258 <setup+0x2e8>)
 8082084:	4975      	ldr	r1, [pc, #468]	; (808225c <setup+0x2ec>)
 8082086:	4876      	ldr	r0, [pc, #472]	; (8082260 <setup+0x2f0>)
 8082088:	f007 fcbc 	bl	8089a04 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 808208c:	2300      	movs	r3, #0
 808208e:	2202      	movs	r2, #2
 8082090:	4974      	ldr	r1, [pc, #464]	; (8082264 <setup+0x2f4>)
 8082092:	4875      	ldr	r0, [pc, #468]	; (8082268 <setup+0x2f8>)
 8082094:	f006 fa34 	bl	8088500 <spark_variable>
    // register the cloud function
    Particle.function("geteepromdata", remoteReadStoredVars);
    Particle.variable("CO_zeroA", CO_zeroA);
    //debugging_enabled = 1;  //for testing...
    //initialize serial1 for communication with BLE nano from redbear labs
    Serial1.begin(9600);
 8082098:	f008 f90e 	bl	808a2b8 <_Z22__fetch_global_Serial1v>
 808209c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80820a0:	f008 f904 	bl	808a2ac <_ZN11USARTSerial5beginEm>
    //init serial4 to communicate with Plantower PMS5003
    Serial4.begin(9600);
 80820a4:	f7fe fce4 	bl	8080a70 <_Z22__fetch_global_Serial4v>
 80820a8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80820ac:	f008 f8fe 	bl	808a2ac <_ZN11USARTSerial5beginEm>
    Serial5.begin(9600);        //gps is connected to this serial port
 80820b0:	f7fe fd18 	bl	8080ae4 <_Z22__fetch_global_Serial5v>
 80820b4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80820b8:	f008 f8f8 	bl	808a2ac <_ZN11USARTSerial5beginEm>
    //set the Timeout to 1500ms, longer than the data transmission periodic time of the sensor
    Serial4.setTimeout(5000);
 80820bc:	f7fe fcd8 	bl	8080a70 <_Z22__fetch_global_Serial4v>
 80820c0:	f241 3188 	movw	r1, #5000	; 0x1388
 80820c4:	f007 f931 	bl	808932a <_ZN6Stream10setTimeoutEm>
    writeRegister(6, 0b00000011);   //0x03
    // REG07 Misc Operation Control Register Format
    writeRegister(7, 0b01001011);   //0x4B*/

    //delay for 5 seconds to give time to programmer person for connecting to serial port for debugging
    delay(10000);
 80820c8:	f242 7010 	movw	r0, #10000	; 0x2710
 80820cc:	f007 fafc 	bl	80896c8 <delay>
    //initialize main serial port for debug output
    Serial.begin(9600);
 80820d0:	f007 ffdc 	bl	808a08c <_Z16_fetch_usbserialv>
 80820d4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80820d8:	f007 ffcc 	bl	808a074 <_ZN9USBSerial5beginEl>

#if sd_en
    fileName = String(DEVICE_id) + "_" + String(Time.year()) + String(Time.month()) + String(Time.day()) + "_" + String(Time.hour()) + String(Time.minute()) + String(Time.second()) + ".txt";
 80820dc:	4b63      	ldr	r3, [pc, #396]	; (808226c <setup+0x2fc>)
 80820de:	220a      	movs	r2, #10
 80820e0:	6819      	ldr	r1, [r3, #0]
 80820e2:	a805      	add	r0, sp, #20
 80820e4:	f006 fe4f 	bl	8088d86 <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80820e8:	a905      	add	r1, sp, #20
 80820ea:	a809      	add	r0, sp, #36	; 0x24
 80820ec:	f006 fe16 	bl	8088d1c <_ZN6StringC1ERKS_>
 80820f0:	495f      	ldr	r1, [pc, #380]	; (8082270 <setup+0x300>)
 80820f2:	a809      	add	r0, sp, #36	; 0x24
 80820f4:	f006 fedd 	bl	8088eb2 <_ZplRK15StringSumHelperPKc>
 80820f8:	4604      	mov	r4, r0
 80820fa:	f007 facf 	bl	808969c <_ZN9TimeClass4yearEv>
 80820fe:	220a      	movs	r2, #10
 8082100:	4601      	mov	r1, r0
 8082102:	a80d      	add	r0, sp, #52	; 0x34
 8082104:	f006 fe3f 	bl	8088d86 <_ZN6StringC1Eih>
 8082108:	a90d      	add	r1, sp, #52	; 0x34
 808210a:	4620      	mov	r0, r4
 808210c:	f006 fec5 	bl	8088e9a <_ZplRK15StringSumHelperRK6String>
 8082110:	4604      	mov	r4, r0
 8082112:	f007 fabb 	bl	808968c <_ZN9TimeClass5monthEv>
 8082116:	220a      	movs	r2, #10
 8082118:	4601      	mov	r1, r0
 808211a:	a811      	add	r0, sp, #68	; 0x44
 808211c:	f006 fe33 	bl	8088d86 <_ZN6StringC1Eih>
 8082120:	a911      	add	r1, sp, #68	; 0x44
 8082122:	4620      	mov	r0, r4
 8082124:	f006 feb9 	bl	8088e9a <_ZplRK15StringSumHelperRK6String>
 8082128:	4604      	mov	r4, r0
 808212a:	f007 faa5 	bl	8089678 <_ZN9TimeClass3dayEv>
 808212e:	220a      	movs	r2, #10
 8082130:	4601      	mov	r1, r0
 8082132:	a815      	add	r0, sp, #84	; 0x54
 8082134:	f006 fe27 	bl	8088d86 <_ZN6StringC1Eih>
 8082138:	a915      	add	r1, sp, #84	; 0x54
 808213a:	4620      	mov	r0, r4
 808213c:	f006 fead 	bl	8088e9a <_ZplRK15StringSumHelperRK6String>
 8082140:	494b      	ldr	r1, [pc, #300]	; (8082270 <setup+0x300>)
 8082142:	f006 feb6 	bl	8088eb2 <_ZplRK15StringSumHelperPKc>
 8082146:	4604      	mov	r4, r0
 8082148:	f007 fa78 	bl	808963c <_ZN9TimeClass4hourEv>
 808214c:	220a      	movs	r2, #10
 808214e:	4601      	mov	r1, r0
 8082150:	a819      	add	r0, sp, #100	; 0x64
 8082152:	f006 fe18 	bl	8088d86 <_ZN6StringC1Eih>
 8082156:	a919      	add	r1, sp, #100	; 0x64
 8082158:	4620      	mov	r0, r4
 808215a:	f006 fe9e 	bl	8088e9a <_ZplRK15StringSumHelperRK6String>
 808215e:	4604      	mov	r4, r0
 8082160:	f007 fa76 	bl	8089650 <_ZN9TimeClass6minuteEv>
 8082164:	220a      	movs	r2, #10
 8082166:	4601      	mov	r1, r0
 8082168:	a81d      	add	r0, sp, #116	; 0x74
 808216a:	f006 fe0c 	bl	8088d86 <_ZN6StringC1Eih>
 808216e:	a91d      	add	r1, sp, #116	; 0x74
 8082170:	4620      	mov	r0, r4
 8082172:	f006 fe92 	bl	8088e9a <_ZplRK15StringSumHelperRK6String>
 8082176:	4604      	mov	r4, r0
 8082178:	f007 fa74 	bl	8089664 <_ZN9TimeClass6secondEv>
 808217c:	220a      	movs	r2, #10
 808217e:	4601      	mov	r1, r0
 8082180:	a821      	add	r0, sp, #132	; 0x84
 8082182:	f006 fe00 	bl	8088d86 <_ZN6StringC1Eih>
 8082186:	a921      	add	r1, sp, #132	; 0x84
 8082188:	4620      	mov	r0, r4
 808218a:	f006 fe86 	bl	8088e9a <_ZplRK15StringSumHelperRK6String>
 808218e:	4939      	ldr	r1, [pc, #228]	; (8082274 <setup+0x304>)
 8082190:	f006 fe8f 	bl	8088eb2 <_ZplRK15StringSumHelperPKc>
 8082194:	4c38      	ldr	r4, [pc, #224]	; (8082278 <setup+0x308>)
 8082196:	4601      	mov	r1, r0
 8082198:	4620      	mov	r0, r4
 808219a:	f006 fdb0 	bl	8088cfe <_ZN6StringaSERKS_>
 808219e:	a821      	add	r0, sp, #132	; 0x84
 80821a0:	f006 fd36 	bl	8088c10 <_ZN6StringD1Ev>
 80821a4:	a81d      	add	r0, sp, #116	; 0x74
 80821a6:	f006 fd33 	bl	8088c10 <_ZN6StringD1Ev>
 80821aa:	a819      	add	r0, sp, #100	; 0x64
 80821ac:	f006 fd30 	bl	8088c10 <_ZN6StringD1Ev>
 80821b0:	a815      	add	r0, sp, #84	; 0x54
 80821b2:	f006 fd2d 	bl	8088c10 <_ZN6StringD1Ev>
 80821b6:	a811      	add	r0, sp, #68	; 0x44
 80821b8:	f006 fd2a 	bl	8088c10 <_ZN6StringD1Ev>
 80821bc:	a80d      	add	r0, sp, #52	; 0x34
 80821be:	f006 fd27 	bl	8088c10 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80821c2:	a809      	add	r0, sp, #36	; 0x24
 80821c4:	f006 fd24 	bl	8088c10 <_ZN6StringD1Ev>
 80821c8:	a805      	add	r0, sp, #20
 80821ca:	f006 fd21 	bl	8088c10 <_ZN6StringD1Ev>
    Serial.println("Checking for sd card");
 80821ce:	f007 ff5d 	bl	808a08c <_Z16_fetch_usbserialv>
 80821d2:	492a      	ldr	r1, [pc, #168]	; (808227c <setup+0x30c>)
 80821d4:	f006 ff25 	bl	8089022 <_ZN5Print7printlnEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80821d8:	4929      	ldr	r1, [pc, #164]	; (8082280 <setup+0x310>)
 80821da:	a821      	add	r0, sp, #132	; 0x84
 80821dc:	f006 fd5f 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
    logFileName = "log_" + fileName;
 80821e0:	4621      	mov	r1, r4
 80821e2:	a821      	add	r0, sp, #132	; 0x84
 80821e4:	f006 fe59 	bl	8088e9a <_ZplRK15StringSumHelperRK6String>
 80821e8:	4601      	mov	r1, r0
 80821ea:	4826      	ldr	r0, [pc, #152]	; (8082284 <setup+0x314>)
 80821ec:	f006 fd87 	bl	8088cfe <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80821f0:	a821      	add	r0, sp, #132	; 0x84
 80821f2:	f006 fd0d 	bl	8088c10 <_ZN6StringD1Ev>
 80821f6:	4924      	ldr	r1, [pc, #144]	; (8082288 <setup+0x318>)
 80821f8:	2302      	movs	r3, #2
 80821fa:	220c      	movs	r2, #12
 80821fc:	f5a1 608e 	sub.w	r0, r1, #1136	; 0x470
 8082200:	f7fe fcaa 	bl	8080b58 <_ZN9SdFatBase5beginEP9SdSpiBasehh>

    //if uSD is functioning and MCP error has not been logged yet.
    if (sd.begin(CS)) 
 8082204:	2800      	cmp	r0, #0
 8082206:	d043      	beq.n	8082290 <setup+0x320>
        //look for a wifi file
        check_wifi_file();
        //look for a calibration file
        check_cal_file();*/

        Serial.print("Created new file to log to uSD card: ");
 8082208:	f007 ff40 	bl	808a08c <_Z16_fetch_usbserialv>
 808220c:	491f      	ldr	r1, [pc, #124]	; (808228c <setup+0x31c>)
 808220e:	f006 fef5 	bl	8088ffc <_ZN5Print5printEPKc>
        Serial.println(fileName);
 8082212:	f007 ff3b 	bl	808a08c <_Z16_fetch_usbserialv>
 8082216:	6821      	ldr	r1, [r4, #0]
 8082218:	e03d      	b.n	8082296 <setup+0x326>
 808221a:	bf00      	nop
 808221c:	20000b44 	.word	0x20000b44
 8082220:	080917cc 	.word	0x080917cc
 8082224:	20000098 	.word	0x20000098
 8082228:	200000cc 	.word	0x200000cc
 808222c:	200000d0 	.word	0x200000d0
 8082230:	200000c8 	.word	0x200000c8
 8082234:	20000094 	.word	0x20000094
 8082238:	2000009c 	.word	0x2000009c
 808223c:	200000c4 	.word	0x200000c4
 8082240:	200000a4 	.word	0x200000a4
 8082244:	20000aa4 	.word	0x20000aa4
 8082248:	20000774 	.word	0x20000774
 808224c:	20000b48 	.word	0x20000b48
 8082250:	20000880 	.word	0x20000880
 8082254:	41a00000 	.word	0x41a00000
 8082258:	0808f2e8 	.word	0x0808f2e8
 808225c:	080809d1 	.word	0x080809d1
 8082260:	080899d9 	.word	0x080899d9
 8082264:	200009f8 	.word	0x200009f8
 8082268:	0808f2f6 	.word	0x0808f2f6
 808226c:	20000088 	.word	0x20000088
 8082270:	0808f31c 	.word	0x0808f31c
 8082274:	0808f2ff 	.word	0x0808f2ff
 8082278:	20000aac 	.word	0x20000aac
 808227c:	0808f304 	.word	0x0808f304
 8082280:	0808f319 	.word	0x0808f319
 8082284:	20000798 	.word	0x20000798
 8082288:	2000069c 	.word	0x2000069c
 808228c:	0808f31e 	.word	0x0808f31e
    }
    //uSD is not functioning
    else 
    { 
        Serial.println("No uSD card detected.");
 8082290:	f007 fefc 	bl	808a08c <_Z16_fetch_usbserialv>
 8082294:	4983      	ldr	r1, [pc, #524]	; (80824a4 <setup+0x534>)
    }
#endif

    //setup the AFE
    Serial.println("Starting LMP91000 CO initialization");
    if (debugging_enabled)
 8082296:	4c84      	ldr	r4, [pc, #528]	; (80824a8 <setup+0x538>)
        Serial.println(fileName);
    }
    //uSD is not functioning
    else 
    { 
        Serial.println("No uSD card detected.");
 8082298:	f006 fec3 	bl	8089022 <_ZN5Print7printlnEPKc>
    }
#endif

    //setup the AFE
    Serial.println("Starting LMP91000 CO initialization");
 808229c:	f007 fef6 	bl	808a08c <_Z16_fetch_usbserialv>
 80822a0:	4982      	ldr	r1, [pc, #520]	; (80824ac <setup+0x53c>)
 80822a2:	f006 febe 	bl	8089022 <_ZN5Print7printlnEPKc>
    if (debugging_enabled)
 80822a6:	6823      	ldr	r3, [r4, #0]
 80822a8:	b14b      	cbz	r3, 80822be <setup+0x34e>
        writeLogFile("Starting LMP91000 CO initialization");
 80822aa:	4980      	ldr	r1, [pc, #512]	; (80824ac <setup+0x53c>)
 80822ac:	a821      	add	r0, sp, #132	; 0x84
 80822ae:	f006 fcf6 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
 80822b2:	a821      	add	r0, sp, #132	; 0x84
 80822b4:	f7ff fa34 	bl	8081720 <_Z12writeLogFile6String>
 80822b8:	a821      	add	r0, sp, #132	; 0x84
 80822ba:	f006 fca9 	bl	8088c10 <_ZN6StringD1Ev>
    Wire.begin();   //this must be done for the LMP91000
 80822be:	f008 f9f1 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 80822c2:	f008 f88b 	bl	808a3dc <_ZN7TwoWire5beginEv>
    digitalWrite(lmp91000_1_en, LOW); //enable the chip
 80822c6:	2100      	movs	r1, #0
 80822c8:	8828      	ldrh	r0, [r5, #0]
 80822ca:	f008 f960 	bl	808a58e <digitalWrite>

    if (lmp91000_1.configure(LMP91000_TIA_GAIN_120K | LMP91000_RLOAD_10OHM, LMP91000_REF_SOURCE_EXT | LMP91000_INT_Z_50PCT | LMP91000_BIAS_SIGN_POS | LMP91000_BIAS_0PCT, LMP91000_FET_SHORT_DISABLED | LMP91000_OP_MODE_AMPEROMETRIC) == 0) 
 80822ce:	2303      	movs	r3, #3
 80822d0:	22b0      	movs	r2, #176	; 0xb0
 80822d2:	2118      	movs	r1, #24
 80822d4:	4876      	ldr	r0, [pc, #472]	; (80824b0 <setup+0x540>)
 80822d6:	f003 fd19 	bl	8085d0c <_ZN8LMP910009configureEhhh>
 80822da:	b988      	cbnz	r0, 8082300 <setup+0x390>
    {
        Serial.println("Couldn't communicate with LMP91000_1 for CO");
 80822dc:	f007 fed6 	bl	808a08c <_Z16_fetch_usbserialv>
 80822e0:	4974      	ldr	r1, [pc, #464]	; (80824b4 <setup+0x544>)
 80822e2:	f006 fe9e 	bl	8089022 <_ZN5Print7printlnEPKc>
        if (debugging_enabled) 
 80822e6:	6823      	ldr	r3, [r4, #0]
 80822e8:	b1fb      	cbz	r3, 808232a <setup+0x3ba>
        {
            writeLogFile("Couldn't communicate with LMP91000_1 for CO");
 80822ea:	4972      	ldr	r1, [pc, #456]	; (80824b4 <setup+0x544>)
 80822ec:	a821      	add	r0, sp, #132	; 0x84
 80822ee:	f006 fcd6 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
 80822f2:	a821      	add	r0, sp, #132	; 0x84
 80822f4:	f7ff fa14 	bl	8081720 <_Z12writeLogFile6String>
 80822f8:	a821      	add	r0, sp, #132	; 0x84
 80822fa:	f006 fc89 	bl	8088c10 <_ZN6StringD1Ev>
 80822fe:	e014      	b.n	808232a <setup+0x3ba>
        }
    }
    else 
    {
        Serial.println("Initialized LMP91000_1 for CO");
 8082300:	f007 fec4 	bl	808a08c <_Z16_fetch_usbserialv>
 8082304:	496c      	ldr	r1, [pc, #432]	; (80824b8 <setup+0x548>)
 8082306:	f006 fe8c 	bl	8089022 <_ZN5Print7printlnEPKc>
        if (debugging_enabled) 
 808230a:	6823      	ldr	r3, [r4, #0]
 808230c:	b14b      	cbz	r3, 8082322 <setup+0x3b2>
        {
            writeLogFile("Initialized LMP91000 for CO");
 808230e:	496b      	ldr	r1, [pc, #428]	; (80824bc <setup+0x54c>)
 8082310:	a821      	add	r0, sp, #132	; 0x84
 8082312:	f006 fcc4 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
 8082316:	a821      	add	r0, sp, #132	; 0x84
 8082318:	f7ff fa02 	bl	8081720 <_Z12writeLogFile6String>
 808231c:	a821      	add	r0, sp, #132	; 0x84
 808231e:	f006 fc77 	bl	8088c10 <_ZN6StringD1Ev>
        Serial.println(lmp91000.read(LMP91000_TIACN_REG),HEX);
        Serial.print("REFCN: ");
        Serial.println(lmp91000.read(LMP91000_REFCN_REG),HEX);
        Serial.print("MODECN: ");
        Serial.println(lmp91000.read(LMP91000_MODECN_REG),HEX);*/
        digitalWrite(lmp91000_1_en, HIGH);  //disable
 8082322:	2101      	movs	r1, #1
 8082324:	8828      	ldrh	r0, [r5, #0]
 8082326:	f008 f932 	bl	808a58e <digitalWrite>
    }
    ads1.begin();
 808232a:	4865      	ldr	r0, [pc, #404]	; (80824c0 <setup+0x550>)
 808232c:	f003 fdea 	bl	8085f04 <_ZN16Adafruit_ADS10155beginEv>
    //if can't get 1 byte from ADC1, add it to the init error log
    if (Wire.requestFrom(0x49, 1) == 0) 
 8082330:	f008 f9b8 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 8082334:	2201      	movs	r2, #1
 8082336:	2149      	movs	r1, #73	; 0x49
 8082338:	f008 f862 	bl	808a400 <_ZN7TwoWire11requestFromEii>
 808233c:	b988      	cbnz	r0, 8082362 <setup+0x3f2>
        //init_log += "AD1,";
        //digitalWrite(red_status_led, HIGH);
        //delay(200);
        //digitalWrite(red_status_led, LOW);
        //delay(200);
        Serial.println("Could not communicate with Adafruit_ADS1115 for CO");
 808233e:	f007 fea5 	bl	808a08c <_Z16_fetch_usbserialv>
 8082342:	4960      	ldr	r1, [pc, #384]	; (80824c4 <setup+0x554>)
 8082344:	f006 fe6d 	bl	8089022 <_ZN5Print7printlnEPKc>
        if (debugging_enabled)
 8082348:	6823      	ldr	r3, [r4, #0]
 808234a:	b173      	cbz	r3, 808236a <setup+0x3fa>
            writeLogFile("Could not communicate with Adafruit_ADS1115 for CO");
 808234c:	495d      	ldr	r1, [pc, #372]	; (80824c4 <setup+0x554>)
 808234e:	a821      	add	r0, sp, #132	; 0x84
 8082350:	f006 fca5 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
 8082354:	a821      	add	r0, sp, #132	; 0x84
 8082356:	f7ff f9e3 	bl	8081720 <_Z12writeLogFile6String>
 808235a:	a821      	add	r0, sp, #132	; 0x84
 808235c:	f006 fc58 	bl	8088c10 <_ZN6StringD1Ev>
 8082360:	e003      	b.n	808236a <setup+0x3fa>
    }
    else 
    {
        ads1.setGain(GAIN_TWOTHIRDS);
 8082362:	2100      	movs	r1, #0
 8082364:	4856      	ldr	r0, [pc, #344]	; (80824c0 <setup+0x550>)
 8082366:	f003 fdd4 	bl	8085f12 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
    }

    //AFE 2 setup
    //#if AFE2_en
    Serial.println("Starting LMP91000_2 initialization");
 808236a:	f007 fe8f 	bl	808a08c <_Z16_fetch_usbserialv>
 808236e:	4956      	ldr	r1, [pc, #344]	; (80824c8 <setup+0x558>)
 8082370:	f006 fe57 	bl	8089022 <_ZN5Print7printlnEPKc>
    if (debugging_enabled)
 8082374:	6823      	ldr	r3, [r4, #0]
 8082376:	b14b      	cbz	r3, 808238c <setup+0x41c>
        writeLogFile("Starting LMP91000_2 initialization");
 8082378:	4953      	ldr	r1, [pc, #332]	; (80824c8 <setup+0x558>)
 808237a:	a821      	add	r0, sp, #132	; 0x84
 808237c:	f006 fc8f 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
 8082380:	a821      	add	r0, sp, #132	; 0x84
 8082382:	f7ff f9cd 	bl	8081720 <_Z12writeLogFile6String>
 8082386:	a821      	add	r0, sp, #132	; 0x84
 8082388:	f006 fc42 	bl	8088c10 <_ZN6StringD1Ev>
    Wire.begin();   //this must be done for the LMP91000
    digitalWrite(lmp91000_2_en, LOW); //enable the chip
 808238c:	4d4f      	ldr	r5, [pc, #316]	; (80824cc <setup+0x55c>)
    //AFE 2 setup
    //#if AFE2_en
    Serial.println("Starting LMP91000_2 initialization");
    if (debugging_enabled)
        writeLogFile("Starting LMP91000_2 initialization");
    Wire.begin();   //this must be done for the LMP91000
 808238e:	f008 f989 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 8082392:	f008 f823 	bl	808a3dc <_ZN7TwoWire5beginEv>
    digitalWrite(lmp91000_2_en, LOW); //enable the chip
 8082396:	2100      	movs	r1, #0
 8082398:	8828      	ldrh	r0, [r5, #0]
 808239a:	f008 f8f8 	bl	808a58e <digitalWrite>

    if (lmp91000_2.configure(LMP91000_TIA_GAIN_120K | LMP91000_RLOAD_10OHM, LMP91000_REF_SOURCE_EXT | LMP91000_INT_Z_50PCT | LMP91000_BIAS_SIGN_POS | LMP91000_BIAS_0PCT, LMP91000_FET_SHORT_DISABLED | LMP91000_OP_MODE_AMPEROMETRIC) == 0)
 808239e:	2303      	movs	r3, #3
 80823a0:	22b0      	movs	r2, #176	; 0xb0
 80823a2:	2118      	movs	r1, #24
 80823a4:	484a      	ldr	r0, [pc, #296]	; (80824d0 <setup+0x560>)
 80823a6:	f003 fcb1 	bl	8085d0c <_ZN8LMP910009configureEhhh>
 80823aa:	b978      	cbnz	r0, 80823cc <setup+0x45c>
    {
        Serial.println("Couldn't communicate with LMP91000 for 2");
 80823ac:	f007 fe6e 	bl	808a08c <_Z16_fetch_usbserialv>
 80823b0:	4948      	ldr	r1, [pc, #288]	; (80824d4 <setup+0x564>)
 80823b2:	f006 fe36 	bl	8089022 <_ZN5Print7printlnEPKc>
        writeLogFile("Couldn't communicate with LMP91000 for 2");
 80823b6:	4947      	ldr	r1, [pc, #284]	; (80824d4 <setup+0x564>)
 80823b8:	a821      	add	r0, sp, #132	; 0x84
 80823ba:	f006 fc70 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
 80823be:	a821      	add	r0, sp, #132	; 0x84
 80823c0:	f7ff f9ae 	bl	8081720 <_Z12writeLogFile6String>
 80823c4:	a821      	add	r0, sp, #132	; 0x84
 80823c6:	f006 fc23 	bl	8088c10 <_ZN6StringD1Ev>
 80823ca:	e014      	b.n	80823f6 <setup+0x486>
    }
    else 
    {
        Serial.println("Initialized LMP91000 for CO 2");
 80823cc:	f007 fe5e 	bl	808a08c <_Z16_fetch_usbserialv>
 80823d0:	4941      	ldr	r1, [pc, #260]	; (80824d8 <setup+0x568>)
 80823d2:	f006 fe26 	bl	8089022 <_ZN5Print7printlnEPKc>
        if (debugging_enabled)
 80823d6:	6823      	ldr	r3, [r4, #0]
 80823d8:	b14b      	cbz	r3, 80823ee <setup+0x47e>
            writeLogFile("Initialized LMP91000 for CO 2");
 80823da:	493f      	ldr	r1, [pc, #252]	; (80824d8 <setup+0x568>)
 80823dc:	a821      	add	r0, sp, #132	; 0x84
 80823de:	f006 fc5e 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
 80823e2:	a821      	add	r0, sp, #132	; 0x84
 80823e4:	f7ff f99c 	bl	8081720 <_Z12writeLogFile6String>
 80823e8:	a821      	add	r0, sp, #132	; 0x84
 80823ea:	f006 fc11 	bl	8088c10 <_ZN6StringD1Ev>
        Serial.println(lmp91000.read(LMP91000_TIACN_REG),HEX);
        Serial.print("REFCN: ");
        Serial.println(lmp91000.read(LMP91000_REFCN_REG),HEX);
        Serial.print("MODECN: ");
        Serial.println(lmp91000.read(LMP91000_MODECN_REG),HEX);*/
        digitalWrite(lmp91000_2_en, HIGH);  //disable
 80823ee:	2101      	movs	r1, #1
 80823f0:	8828      	ldrh	r0, [r5, #0]
 80823f2:	f008 f8cc 	bl	808a58e <digitalWrite>
    }
    ads2.begin();
 80823f6:	4839      	ldr	r0, [pc, #228]	; (80824dc <setup+0x56c>)
 80823f8:	f003 fd84 	bl	8085f04 <_ZN16Adafruit_ADS10155beginEv>
    //if can't get 1 byte from ADC1, add it to the init error log
    if (Wire.requestFrom(0x4A, 1) == 0) 
 80823fc:	f008 f952 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 8082400:	2201      	movs	r2, #1
 8082402:	214a      	movs	r1, #74	; 0x4a
 8082404:	f007 fffc 	bl	808a400 <_ZN7TwoWire11requestFromEii>
 8082408:	b988      	cbnz	r0, 808242e <setup+0x4be>
      //init_log += "AD1,";
      //digitalWrite(red_status_led, HIGH);
      //delay(200);
      //digitalWrite(red_status_led, LOW);
      //delay(200);
        Serial.println("Could not communicate with Adafruit_ADS1115 for CO");
 808240a:	f007 fe3f 	bl	808a08c <_Z16_fetch_usbserialv>
 808240e:	492d      	ldr	r1, [pc, #180]	; (80824c4 <setup+0x554>)
 8082410:	f006 fe07 	bl	8089022 <_ZN5Print7printlnEPKc>
        if (debugging_enabled)
 8082414:	6823      	ldr	r3, [r4, #0]
 8082416:	b173      	cbz	r3, 8082436 <setup+0x4c6>
            writeLogFile("Could not communicate with Adafruit_ADS1115 for CO");
 8082418:	492a      	ldr	r1, [pc, #168]	; (80824c4 <setup+0x554>)
 808241a:	a821      	add	r0, sp, #132	; 0x84
 808241c:	f006 fc3f 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
 8082420:	a821      	add	r0, sp, #132	; 0x84
 8082422:	f7ff f97d 	bl	8081720 <_Z12writeLogFile6String>
 8082426:	a821      	add	r0, sp, #132	; 0x84
 8082428:	f006 fbf2 	bl	8088c10 <_ZN6StringD1Ev>
 808242c:	e003      	b.n	8082436 <setup+0x4c6>
    }
    else 
    {
        ads2.setGain(GAIN_TWOTHIRDS);
 808242e:	2100      	movs	r1, #0
 8082430:	482a      	ldr	r0, [pc, #168]	; (80824dc <setup+0x56c>)
 8082432:	f003 fd6e 	bl	8085f12 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
    }
    //#endif

    resetESP();
 8082436:	f7ff fd63 	bl	8081f00 <_Z8resetESPv>

    Serial.println("ESP reset!");
 808243a:	f007 fe27 	bl	808a08c <_Z16_fetch_usbserialv>
 808243e:	4928      	ldr	r1, [pc, #160]	; (80824e0 <setup+0x570>)
 8082440:	f006 fdef 	bl	8089022 <_ZN5Print7printlnEPKc>

    Serial.print("FW Version: ");
 8082444:	f007 fe22 	bl	808a08c <_Z16_fetch_usbserialv>
 8082448:	4926      	ldr	r1, [pc, #152]	; (80824e4 <setup+0x574>)
 808244a:	f006 fdd7 	bl	8088ffc <_ZN5Print5printEPKc>
    Serial.println(APP_VERSION);
 808244e:	f007 fe1d 	bl	808a08c <_Z16_fetch_usbserialv>
 8082452:	220a      	movs	r2, #10
 8082454:	2146      	movs	r1, #70	; 0x46
 8082456:	f006 fe52 	bl	80890fe <_ZN5Print7printlnEii>
    Serial.print("Build: ");
 808245a:	f007 fe17 	bl	808a08c <_Z16_fetch_usbserialv>
 808245e:	4922      	ldr	r1, [pc, #136]	; (80824e8 <setup+0x578>)
 8082460:	f006 fdcc 	bl	8088ffc <_ZN5Print5printEPKc>
    Serial.println(BUILD_VERSION);
 8082464:	f007 fe12 	bl	808a08c <_Z16_fetch_usbserialv>
 8082468:	220a      	movs	r2, #10
 808246a:	210d      	movs	r1, #13
 808246c:	f006 fe47 	bl	80890fe <_ZN5Print7printlnEii>

    enableContinuousGPS();
 8082470:	f7fe ff1a 	bl	80812a8 <_Z19enableContinuousGPSv>
#define SYSTEM_VERSION_141
#define SYSTEM_VERSION_142
#define SYSTEM_VERSION_143
#define SYSTEM_VERSION_144

typedef struct __attribute__((packed)) SystemVersionInfo
 8082474:	231c      	movs	r3, #28
    static bool enableFeature(const WiFiTesterFeature feature);

    String version()
    {
        SystemVersionInfo info;
        system_version_info(&info, nullptr);
 8082476:	2100      	movs	r1, #0
 8082478:	a821      	add	r0, sp, #132	; 0x84
 808247a:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
 808247e:	f005 ffb3 	bl	80883e8 <system_version_info>
        return String(info.versionString);
 8082482:	a923      	add	r1, sp, #140	; 0x8c
 8082484:	a81d      	add	r0, sp, #116	; 0x74
 8082486:	f006 fc0a 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>

    Log.info("System version: %s", (const char*)System.version());
 808248a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 808248c:	4917      	ldr	r1, [pc, #92]	; (80824ec <setup+0x57c>)
 808248e:	4818      	ldr	r0, [pc, #96]	; (80824f0 <setup+0x580>)
 8082490:	f7fe fad6 	bl	8080a40 <_ZNK5spark6Logger4infoEPKcz>
 8082494:	a81d      	add	r0, sp, #116	; 0x74
 8082496:	f006 fbbb 	bl	8088c10 <_ZN6StringD1Ev>
    status_word.status_int |= (APP_VERSION << 12) & 0xFF00;
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
    //status_word.status_int |= 0x6500;

    //Initialization error log
    String init_log;
 808249a:	a801      	add	r0, sp, #4
 808249c:	f006 fbb8 	bl	8088c10 <_ZN6StringD1Ev>
    Serial.println(BUILD_VERSION);

    enableContinuousGPS();

    Log.info("System version: %s", (const char*)System.version());
}
 80824a0:	b028      	add	sp, #160	; 0xa0
 80824a2:	bd70      	pop	{r4, r5, r6, pc}
 80824a4:	0808f344 	.word	0x0808f344
 80824a8:	20000acc 	.word	0x20000acc
 80824ac:	0808f35a 	.word	0x0808f35a
 80824b0:	200001e0 	.word	0x200001e0
 80824b4:	0808f37e 	.word	0x0808f37e
 80824b8:	0808f3aa 	.word	0x0808f3aa
 80824bc:	0808f3c8 	.word	0x0808f3c8
 80824c0:	20000a94 	.word	0x20000a94
 80824c4:	0808f3e4 	.word	0x0808f3e4
 80824c8:	0808f417 	.word	0x0808f417
 80824cc:	200000cc 	.word	0x200000cc
 80824d0:	200001e1 	.word	0x200001e1
 80824d4:	0808f43a 	.word	0x0808f43a
 80824d8:	0808f463 	.word	0x0808f463
 80824dc:	20000a9a 	.word	0x20000a9a
 80824e0:	0808f481 	.word	0x0808f481
 80824e4:	0808f48c 	.word	0x0808f48c
 80824e8:	0808f499 	.word	0x0808f499
 80824ec:	0808f4a1 	.word	0x0808f4a1
 80824f0:	20000ba4 	.word	0x20000ba4

080824f4 <_Z12outputCOtoPIv>:
    }
    Serial.println("Exiting serial menu...");
}

void outputCOtoPI(void)
{
 80824f4:	b500      	push	{lr}
 80824f6:	b08f      	sub	sp, #60	; 0x3c
    String CO_string = "*";
 80824f8:	4980      	ldr	r1, [pc, #512]	; (80826fc <_Z12outputCOtoPIv+0x208>)
 80824fa:	a802      	add	r0, sp, #8
 80824fc:	f006 fbcf 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
    Serial.println("Outputting CO to PI.");
 8082500:	f007 fdc4 	bl	808a08c <_Z16_fetch_usbserialv>
 8082504:	497e      	ldr	r1, [pc, #504]	; (8082700 <_Z12outputCOtoPIv+0x20c>)
 8082506:	f006 fd8c 	bl	8089022 <_ZN5Print7printlnEPKc>

    CO_string += String(measurement_number, 0) + ",";
 808250a:	2300      	movs	r3, #0
 808250c:	9300      	str	r3, [sp, #0]
 808250e:	4b7d      	ldr	r3, [pc, #500]	; (8082704 <_Z12outputCOtoPIv+0x210>)
 8082510:	a806      	add	r0, sp, #24
 8082512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8082516:	f006 fc73 	bl	8088e00 <_ZN6StringC1Edi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 808251a:	a906      	add	r1, sp, #24
 808251c:	a80a      	add	r0, sp, #40	; 0x28
 808251e:	f006 fbfd 	bl	8088d1c <_ZN6StringC1ERKS_>
 8082522:	4979      	ldr	r1, [pc, #484]	; (8082708 <_Z12outputCOtoPIv+0x214>)
 8082524:	a80a      	add	r0, sp, #40	; 0x28
 8082526:	f006 fcc4 	bl	8088eb2 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808252a:	4601      	mov	r1, r0
 808252c:	a802      	add	r0, sp, #8
 808252e:	f006 fc94 	bl	8088e5a <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8082532:	a80a      	add	r0, sp, #40	; 0x28
 8082534:	f006 fb6c 	bl	8088c10 <_ZN6StringD1Ev>
 8082538:	a806      	add	r0, sp, #24
 808253a:	f006 fb69 	bl	8088c10 <_ZN6StringD1Ev>
    CO_string += String(CO_float_A, 3) + ",";
 808253e:	4b73      	ldr	r3, [pc, #460]	; (808270c <_Z12outputCOtoPIv+0x218>)
 8082540:	2203      	movs	r2, #3
 8082542:	6819      	ldr	r1, [r3, #0]
 8082544:	a806      	add	r0, sp, #24
 8082546:	f006 fc44 	bl	8088dd2 <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 808254a:	a906      	add	r1, sp, #24
 808254c:	a80a      	add	r0, sp, #40	; 0x28
 808254e:	f006 fbe5 	bl	8088d1c <_ZN6StringC1ERKS_>
 8082552:	496d      	ldr	r1, [pc, #436]	; (8082708 <_Z12outputCOtoPIv+0x214>)
 8082554:	a80a      	add	r0, sp, #40	; 0x28
 8082556:	f006 fcac 	bl	8088eb2 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808255a:	4601      	mov	r1, r0
 808255c:	a802      	add	r0, sp, #8
 808255e:	f006 fc7c 	bl	8088e5a <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8082562:	a80a      	add	r0, sp, #40	; 0x28
 8082564:	f006 fb54 	bl	8088c10 <_ZN6StringD1Ev>
 8082568:	a806      	add	r0, sp, #24
 808256a:	f006 fb51 	bl	8088c10 <_ZN6StringD1Ev>
    CO_string += String(CO_float_B, 3) + ",";
 808256e:	4b68      	ldr	r3, [pc, #416]	; (8082710 <_Z12outputCOtoPIv+0x21c>)
 8082570:	2203      	movs	r2, #3
 8082572:	6819      	ldr	r1, [r3, #0]
 8082574:	a806      	add	r0, sp, #24
 8082576:	f006 fc2c 	bl	8088dd2 <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 808257a:	a906      	add	r1, sp, #24
 808257c:	a80a      	add	r0, sp, #40	; 0x28
 808257e:	f006 fbcd 	bl	8088d1c <_ZN6StringC1ERKS_>
 8082582:	4961      	ldr	r1, [pc, #388]	; (8082708 <_Z12outputCOtoPIv+0x214>)
 8082584:	a80a      	add	r0, sp, #40	; 0x28
 8082586:	f006 fc94 	bl	8088eb2 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808258a:	4601      	mov	r1, r0
 808258c:	a802      	add	r0, sp, #8
 808258e:	f006 fc64 	bl	8088e5a <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8082592:	a80a      	add	r0, sp, #40	; 0x28
 8082594:	f006 fb3c 	bl	8088c10 <_ZN6StringD1Ev>
 8082598:	a806      	add	r0, sp, #24
 808259a:	f006 fb39 	bl	8088c10 <_ZN6StringD1Ev>
    if (gps.get_latitude() != 0)
 808259e:	485d      	ldr	r0, [pc, #372]	; (8082714 <_Z12outputCOtoPIv+0x220>)
 80825a0:	f003 fd84 	bl	80860ac <_ZN3GPS12get_latitudeEv>
 80825a4:	2200      	movs	r2, #0
 80825a6:	2300      	movs	r3, #0
 80825a8:	f008 fe2e 	bl	808b208 <__aeabi_dcmpeq>
 80825ac:	b990      	cbnz	r0, 80825d4 <_Z12outputCOtoPIv+0xe0>
    {
        if (gps.get_nsIndicator() == 0)
 80825ae:	4859      	ldr	r0, [pc, #356]	; (8082714 <_Z12outputCOtoPIv+0x220>)
 80825b0:	f003 fd97 	bl	80860e2 <_ZN3GPS15get_nsIndicatorEv>
 80825b4:	b918      	cbnz	r0, 80825be <_Z12outputCOtoPIv+0xca>
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 80825b6:	4958      	ldr	r1, [pc, #352]	; (8082718 <_Z12outputCOtoPIv+0x224>)
 80825b8:	a802      	add	r0, sp, #8
 80825ba:	f006 fc52 	bl	8088e62 <_ZN6String6concatEPKc>
        {
            CO_string += "-";
        }
        CO_string += String(gps.get_latitude()) + ",";
 80825be:	4855      	ldr	r0, [pc, #340]	; (8082714 <_Z12outputCOtoPIv+0x220>)
 80825c0:	f003 fd74 	bl	80860ac <_ZN3GPS12get_latitudeEv>
 80825c4:	2306      	movs	r3, #6
 80825c6:	9300      	str	r3, [sp, #0]
 80825c8:	4602      	mov	r2, r0
 80825ca:	460b      	mov	r3, r1
 80825cc:	a806      	add	r0, sp, #24
 80825ce:	f006 fc17 	bl	8088e00 <_ZN6StringC1Edi>
 80825d2:	e003      	b.n	80825dc <_Z12outputCOtoPIv+0xe8>
    }
    else
    {
        CO_string += String(geolocation_latitude) + ",";
 80825d4:	4951      	ldr	r1, [pc, #324]	; (808271c <_Z12outputCOtoPIv+0x228>)
 80825d6:	a806      	add	r0, sp, #24
 80825d8:	f006 fb61 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80825dc:	a906      	add	r1, sp, #24
 80825de:	a80a      	add	r0, sp, #40	; 0x28
 80825e0:	f006 fb9c 	bl	8088d1c <_ZN6StringC1ERKS_>
 80825e4:	4948      	ldr	r1, [pc, #288]	; (8082708 <_Z12outputCOtoPIv+0x214>)
 80825e6:	a80a      	add	r0, sp, #40	; 0x28
 80825e8:	f006 fc63 	bl	8088eb2 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80825ec:	4601      	mov	r1, r0
 80825ee:	a802      	add	r0, sp, #8
 80825f0:	f006 fc33 	bl	8088e5a <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80825f4:	a80a      	add	r0, sp, #40	; 0x28
 80825f6:	f006 fb0b 	bl	8088c10 <_ZN6StringD1Ev>
 80825fa:	a806      	add	r0, sp, #24
 80825fc:	f006 fb08 	bl	8088c10 <_ZN6StringD1Ev>
    }

    if (gps.get_longitude() != 0)
 8082600:	4844      	ldr	r0, [pc, #272]	; (8082714 <_Z12outputCOtoPIv+0x220>)
 8082602:	f003 fd58 	bl	80860b6 <_ZN3GPS13get_longitudeEv>
 8082606:	2200      	movs	r2, #0
 8082608:	2300      	movs	r3, #0
 808260a:	f008 fdfd 	bl	808b208 <__aeabi_dcmpeq>
 808260e:	b998      	cbnz	r0, 8082638 <_Z12outputCOtoPIv+0x144>
    {
        if (gps.get_ewIndicator() == 0x01)
 8082610:	4840      	ldr	r0, [pc, #256]	; (8082714 <_Z12outputCOtoPIv+0x220>)
 8082612:	f003 fd69 	bl	80860e8 <_ZN3GPS15get_ewIndicatorEv>
 8082616:	2801      	cmp	r0, #1
 8082618:	d103      	bne.n	8082622 <_Z12outputCOtoPIv+0x12e>
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 808261a:	493f      	ldr	r1, [pc, #252]	; (8082718 <_Z12outputCOtoPIv+0x224>)
 808261c:	a802      	add	r0, sp, #8
 808261e:	f006 fc20 	bl	8088e62 <_ZN6String6concatEPKc>
        {
            CO_string += "-";
        }
        CO_string += String(gps.get_longitude()) + ",";
 8082622:	483c      	ldr	r0, [pc, #240]	; (8082714 <_Z12outputCOtoPIv+0x220>)
 8082624:	f003 fd47 	bl	80860b6 <_ZN3GPS13get_longitudeEv>
 8082628:	2306      	movs	r3, #6
 808262a:	9300      	str	r3, [sp, #0]
 808262c:	4602      	mov	r2, r0
 808262e:	460b      	mov	r3, r1
 8082630:	a806      	add	r0, sp, #24
 8082632:	f006 fbe5 	bl	8088e00 <_ZN6StringC1Edi>
 8082636:	e003      	b.n	8082640 <_Z12outputCOtoPIv+0x14c>
    }
    else
    {
        CO_string += String(geolocation_longitude) + ",";
 8082638:	4939      	ldr	r1, [pc, #228]	; (8082720 <_Z12outputCOtoPIv+0x22c>)
 808263a:	a806      	add	r0, sp, #24
 808263c:	f006 fb2f 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8082640:	a906      	add	r1, sp, #24
 8082642:	a80a      	add	r0, sp, #40	; 0x28
 8082644:	f006 fb6a 	bl	8088d1c <_ZN6StringC1ERKS_>
 8082648:	492f      	ldr	r1, [pc, #188]	; (8082708 <_Z12outputCOtoPIv+0x214>)
 808264a:	a80a      	add	r0, sp, #40	; 0x28
 808264c:	f006 fc31 	bl	8088eb2 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8082650:	4601      	mov	r1, r0
 8082652:	a802      	add	r0, sp, #8
 8082654:	f006 fc01 	bl	8088e5a <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8082658:	a80a      	add	r0, sp, #40	; 0x28
 808265a:	f006 fad9 	bl	8088c10 <_ZN6StringD1Ev>
 808265e:	a806      	add	r0, sp, #24
 8082660:	f006 fad6 	bl	8088c10 <_ZN6StringD1Ev>
    }

    if (gps.get_longitude() != 0)
 8082664:	482b      	ldr	r0, [pc, #172]	; (8082714 <_Z12outputCOtoPIv+0x220>)
 8082666:	f003 fd26 	bl	80860b6 <_ZN3GPS13get_longitudeEv>
 808266a:	2200      	movs	r2, #0
 808266c:	2300      	movs	r3, #0
 808266e:	f008 fdcb 	bl	808b208 <__aeabi_dcmpeq>
 8082672:	b980      	cbnz	r0, 8082696 <_Z12outputCOtoPIv+0x1a2>
    {
        CO_string += String(gps.get_horizontalDilution() / 10.0) + ",";
 8082674:	4827      	ldr	r0, [pc, #156]	; (8082714 <_Z12outputCOtoPIv+0x220>)
 8082676:	f003 fd23 	bl	80860c0 <_ZN3GPS22get_horizontalDilutionEv>
 808267a:	f008 faf7 	bl	808ac6c <__aeabi_i2d>
 808267e:	2200      	movs	r2, #0
 8082680:	4b28      	ldr	r3, [pc, #160]	; (8082724 <_Z12outputCOtoPIv+0x230>)
 8082682:	f008 fc83 	bl	808af8c <__aeabi_ddiv>
 8082686:	2306      	movs	r3, #6
 8082688:	9300      	str	r3, [sp, #0]
 808268a:	4602      	mov	r2, r0
 808268c:	460b      	mov	r3, r1
 808268e:	a806      	add	r0, sp, #24
 8082690:	f006 fbb6 	bl	8088e00 <_ZN6StringC1Edi>
 8082694:	e003      	b.n	808269e <_Z12outputCOtoPIv+0x1aa>
    }
    else
    {
        CO_string += String(geolocation_accuracy) + ",";
 8082696:	4924      	ldr	r1, [pc, #144]	; (8082728 <_Z12outputCOtoPIv+0x234>)
 8082698:	a806      	add	r0, sp, #24
 808269a:	f006 fb00 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 808269e:	a906      	add	r1, sp, #24
 80826a0:	a80a      	add	r0, sp, #40	; 0x28
 80826a2:	f006 fb3b 	bl	8088d1c <_ZN6StringC1ERKS_>
 80826a6:	4918      	ldr	r1, [pc, #96]	; (8082708 <_Z12outputCOtoPIv+0x214>)
 80826a8:	a80a      	add	r0, sp, #40	; 0x28
 80826aa:	f006 fc02 	bl	8088eb2 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80826ae:	4601      	mov	r1, r0
 80826b0:	a802      	add	r0, sp, #8
 80826b2:	f006 fbd2 	bl	8088e5a <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80826b6:	a80a      	add	r0, sp, #40	; 0x28
 80826b8:	f006 faaa 	bl	8088c10 <_ZN6StringD1Ev>
 80826bc:	a806      	add	r0, sp, #24
 80826be:	f006 faa7 	bl	8088c10 <_ZN6StringD1Ev>
    }

    CO_string += String(Time.format(systemTime, "%d/%m/%y,%H:%M:%S"));
 80826c2:	4a1a      	ldr	r2, [pc, #104]	; (808272c <_Z12outputCOtoPIv+0x238>)
 80826c4:	4b1a      	ldr	r3, [pc, #104]	; (8082730 <_Z12outputCOtoPIv+0x23c>)
 80826c6:	6812      	ldr	r2, [r2, #0]
 80826c8:	a80a      	add	r0, sp, #40	; 0x28
 80826ca:	491a      	ldr	r1, [pc, #104]	; (8082734 <_Z12outputCOtoPIv+0x240>)
 80826cc:	f006 ff5c 	bl	8089588 <_ZN9TimeClass6formatElPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80826d0:	a90a      	add	r1, sp, #40	; 0x28
 80826d2:	a802      	add	r0, sp, #8
 80826d4:	f006 fbc1 	bl	8088e5a <_ZN6String6concatERKS_>
 80826d8:	a80a      	add	r0, sp, #40	; 0x28
 80826da:	f006 fa99 	bl	8088c10 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 80826de:	4916      	ldr	r1, [pc, #88]	; (8082738 <_Z12outputCOtoPIv+0x244>)
 80826e0:	a802      	add	r0, sp, #8
 80826e2:	f006 fbbe 	bl	8088e62 <_ZN6String6concatEPKc>
    //get a current time string

    CO_string += "\n\r&";
    Serial1.print(CO_string);
 80826e6:	f007 fde7 	bl	808a2b8 <_Z22__fetch_global_Serial1v>
 80826ea:	9902      	ldr	r1, [sp, #8]
 80826ec:	f006 fc86 	bl	8088ffc <_ZN5Print5printEPKc>
    Serial.println("Exiting serial menu...");
}

void outputCOtoPI(void)
{
    String CO_string = "*";
 80826f0:	a802      	add	r0, sp, #8
 80826f2:	f006 fa8d 	bl	8088c10 <_ZN6StringD1Ev>

    CO_string += "\n\r&";
    Serial1.print(CO_string);
    //send ending delimeter
    //Serial1.print("&");
}
 80826f6:	b00f      	add	sp, #60	; 0x3c
 80826f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80826fc:	0808f4b4 	.word	0x0808f4b4
 8082700:	0808f4b6 	.word	0x0808f4b6
 8082704:	20000ad8 	.word	0x20000ad8
 8082708:	0809139e 	.word	0x0809139e
 808270c:	20000770 	.word	0x20000770
 8082710:	20000aa0 	.word	0x20000aa0
 8082714:	20000938 	.word	0x20000938
 8082718:	0808f4cb 	.word	0x0808f4cb
 808271c:	200000a8 	.word	0x200000a8
 8082720:	200000b4 	.word	0x200000b4
 8082724:	40240000 	.word	0x40240000
 8082728:	20000080 	.word	0x20000080
 808272c:	20000ac0 	.word	0x20000ac0
 8082730:	0808f4cd 	.word	0x0808f4cd
 8082734:	20000bcc 	.word	0x20000bcc
 8082738:	0808f4df 	.word	0x0808f4df

0808273c <_Z24serialGetWifiCredentialsv>:
    chargeCurrent = pmic.getChargeCurrent();
    Serial.printf("new charge current of %d mA\n\r", total_current);
}

void serialGetWifiCredentials(void)
{
 808273c:	b530      	push	{r4, r5, lr}
 808273e:	4d5b      	ldr	r5, [pc, #364]	; (80828ac <_Z24serialGetWifiCredentialsv+0x170>)
 8082740:	b095      	sub	sp, #84	; 0x54
    Serial.print("Current stored ssid: ");
 8082742:	f007 fca3 	bl	808a08c <_Z16_fetch_usbserialv>
 8082746:	495a      	ldr	r1, [pc, #360]	; (80828b0 <_Z24serialGetWifiCredentialsv+0x174>)
 8082748:	f006 fc58 	bl	8088ffc <_ZN5Print5printEPKc>
 808274c:	4c59      	ldr	r4, [pc, #356]	; (80828b4 <_Z24serialGetWifiCredentialsv+0x178>)
    Serial.println(ssid);
 808274e:	f007 fc9d 	bl	808a08c <_Z16_fetch_usbserialv>
 8082752:	6829      	ldr	r1, [r5, #0]
 8082754:	f006 fc65 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.print("Current stored password: ");
 8082758:	f007 fc98 	bl	808a08c <_Z16_fetch_usbserialv>
 808275c:	4956      	ldr	r1, [pc, #344]	; (80828b8 <_Z24serialGetWifiCredentialsv+0x17c>)
 808275e:	f006 fc4d 	bl	8088ffc <_ZN5Print5printEPKc>
    Serial.println(password);
 8082762:	f007 fc93 	bl	808a08c <_Z16_fetch_usbserialv>
 8082766:	6821      	ldr	r1, [r4, #0]
 8082768:	f006 fc5b 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("Please enter password in order to make changes.\n\r");
 808276c:	f007 fc8e 	bl	808a08c <_Z16_fetch_usbserialv>
 8082770:	4952      	ldr	r1, [pc, #328]	; (80828bc <_Z24serialGetWifiCredentialsv+0x180>)
 8082772:	f006 fc56 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082776:	f007 fc89 	bl	808a08c <_Z16_fetch_usbserialv>
 808277a:	f24c 3150 	movw	r1, #50000	; 0xc350
 808277e:	f006 fdd4 	bl	808932a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082782:	f007 fc83 	bl	808a08c <_Z16_fetch_usbserialv>
 8082786:	220d      	movs	r2, #13
 8082788:	4601      	mov	r1, r0
 808278a:	4668      	mov	r0, sp
 808278c:	f006 fde4 	bl	8089358 <_ZN6Stream15readStringUntilEc>
    if (tempString.equals("bould"))
 8082790:	494b      	ldr	r1, [pc, #300]	; (80828c0 <_Z24serialGetWifiCredentialsv+0x184>)
 8082792:	4668      	mov	r0, sp
 8082794:	f006 fb9f 	bl	8088ed6 <_ZNK6String6equalsEPKc>
 8082798:	2800      	cmp	r0, #0
 808279a:	f000 8081 	beq.w	80828a0 <_Z24serialGetWifiCredentialsv+0x164>
    {
        Serial.println("Password correct!");
 808279e:	f007 fc75 	bl	808a08c <_Z16_fetch_usbserialv>
 80827a2:	4948      	ldr	r1, [pc, #288]	; (80828c4 <_Z24serialGetWifiCredentialsv+0x188>)
 80827a4:	f006 fc3d 	bl	8089022 <_ZN5Print7printlnEPKc>
        Serial.println("Enter new ssid:");
 80827a8:	f007 fc70 	bl	808a08c <_Z16_fetch_usbserialv>
 80827ac:	4946      	ldr	r1, [pc, #280]	; (80828c8 <_Z24serialGetWifiCredentialsv+0x18c>)
 80827ae:	f006 fc38 	bl	8089022 <_ZN5Print7printlnEPKc>
        Serial.setTimeout(50000);
 80827b2:	f007 fc6b 	bl	808a08c <_Z16_fetch_usbserialv>
 80827b6:	f24c 3150 	movw	r1, #50000	; 0xc350
 80827ba:	f006 fdb6 	bl	808932a <_ZN6Stream10setTimeoutEm>
        String tempSsid = Serial.readStringUntil('\r');
 80827be:	f007 fc65 	bl	808a08c <_Z16_fetch_usbserialv>
 80827c2:	220d      	movs	r2, #13
 80827c4:	4601      	mov	r1, r0
 80827c6:	a804      	add	r0, sp, #16
 80827c8:	f006 fdc6 	bl	8089358 <_ZN6Stream15readStringUntilEc>
        Serial.print("Your new ssid will be: ");
 80827cc:	f007 fc5e 	bl	808a08c <_Z16_fetch_usbserialv>
 80827d0:	493e      	ldr	r1, [pc, #248]	; (80828cc <_Z24serialGetWifiCredentialsv+0x190>)
 80827d2:	f006 fc13 	bl	8088ffc <_ZN5Print5printEPKc>
        Serial.println(tempSsid);
 80827d6:	f007 fc59 	bl	808a08c <_Z16_fetch_usbserialv>
 80827da:	9904      	ldr	r1, [sp, #16]
 80827dc:	f006 fc21 	bl	8089022 <_ZN5Print7printlnEPKc>
        Serial.println("Is this okay?(y or n)");
 80827e0:	f007 fc54 	bl	808a08c <_Z16_fetch_usbserialv>
 80827e4:	493a      	ldr	r1, [pc, #232]	; (80828d0 <_Z24serialGetWifiCredentialsv+0x194>)
 80827e6:	f006 fc1c 	bl	8089022 <_ZN5Print7printlnEPKc>
        String ok = Serial.readStringUntil('\r');
 80827ea:	f007 fc4f 	bl	808a08c <_Z16_fetch_usbserialv>
 80827ee:	220d      	movs	r2, #13
 80827f0:	4601      	mov	r1, r0
 80827f2:	a808      	add	r0, sp, #32
 80827f4:	f006 fdb0 	bl	8089358 <_ZN6Stream15readStringUntilEc>
        if (ok.equals("y"))
 80827f8:	4936      	ldr	r1, [pc, #216]	; (80828d4 <_Z24serialGetWifiCredentialsv+0x198>)
 80827fa:	a808      	add	r0, sp, #32
 80827fc:	f006 fb6b 	bl	8088ed6 <_ZNK6String6equalsEPKc>
 8082800:	2800      	cmp	r0, #0
 8082802:	d042      	beq.n	808288a <_Z24serialGetWifiCredentialsv+0x14e>
        {
            Serial.println("Saving new ssid");
 8082804:	f007 fc42 	bl	808a08c <_Z16_fetch_usbserialv>
 8082808:	4933      	ldr	r1, [pc, #204]	; (80828d8 <_Z24serialGetWifiCredentialsv+0x19c>)
 808280a:	f006 fc0a 	bl	8089022 <_ZN5Print7printlnEPKc>
            ssid = tempSsid;
 808280e:	a904      	add	r1, sp, #16
 8082810:	4628      	mov	r0, r5
 8082812:	f006 fa74 	bl	8088cfe <_ZN6StringaSERKS_>
            Serial.println("Enter new password");
 8082816:	f007 fc39 	bl	808a08c <_Z16_fetch_usbserialv>
 808281a:	4930      	ldr	r1, [pc, #192]	; (80828dc <_Z24serialGetWifiCredentialsv+0x1a0>)
 808281c:	f006 fc01 	bl	8089022 <_ZN5Print7printlnEPKc>
            String tempPassword = Serial.readStringUntil('\r');
 8082820:	f007 fc34 	bl	808a08c <_Z16_fetch_usbserialv>
 8082824:	220d      	movs	r2, #13
 8082826:	4601      	mov	r1, r0
 8082828:	a80c      	add	r0, sp, #48	; 0x30
 808282a:	f006 fd95 	bl	8089358 <_ZN6Stream15readStringUntilEc>
            Serial.print("Your new password will be: ");
 808282e:	f007 fc2d 	bl	808a08c <_Z16_fetch_usbserialv>
 8082832:	492b      	ldr	r1, [pc, #172]	; (80828e0 <_Z24serialGetWifiCredentialsv+0x1a4>)
 8082834:	f006 fbe2 	bl	8088ffc <_ZN5Print5printEPKc>
            Serial.println(tempPassword);
 8082838:	f007 fc28 	bl	808a08c <_Z16_fetch_usbserialv>
 808283c:	990c      	ldr	r1, [sp, #48]	; 0x30
 808283e:	f006 fbf0 	bl	8089022 <_ZN5Print7printlnEPKc>
            String ok = Serial.readStringUntil('\r');
 8082842:	f007 fc23 	bl	808a08c <_Z16_fetch_usbserialv>
 8082846:	220d      	movs	r2, #13
 8082848:	4601      	mov	r1, r0
 808284a:	a810      	add	r0, sp, #64	; 0x40
 808284c:	f006 fd84 	bl	8089358 <_ZN6Stream15readStringUntilEc>
            if (ok.equals("y"))
 8082850:	4920      	ldr	r1, [pc, #128]	; (80828d4 <_Z24serialGetWifiCredentialsv+0x198>)
 8082852:	a810      	add	r0, sp, #64	; 0x40
 8082854:	f006 fb3f 	bl	8088ed6 <_ZNK6String6equalsEPKc>
 8082858:	b158      	cbz	r0, 8082872 <_Z24serialGetWifiCredentialsv+0x136>
            {
                Serial.println("Saving new password");
 808285a:	f007 fc17 	bl	808a08c <_Z16_fetch_usbserialv>
 808285e:	4921      	ldr	r1, [pc, #132]	; (80828e4 <_Z24serialGetWifiCredentialsv+0x1a8>)
 8082860:	f006 fbdf 	bl	8089022 <_ZN5Print7printlnEPKc>
                password = tempPassword;
 8082864:	a90c      	add	r1, sp, #48	; 0x30
 8082866:	4620      	mov	r0, r4
 8082868:	f006 fa49 	bl	8088cfe <_ZN6StringaSERKS_>
                sendWifiInfo();
 808286c:	f7ff faa0 	bl	8081db0 <_Z12sendWifiInfov>
 8082870:	e004      	b.n	808287c <_Z24serialGetWifiCredentialsv+0x140>
            }
            else
            {
                Serial.println("okay, no problem\n\r");
 8082872:	f007 fc0b 	bl	808a08c <_Z16_fetch_usbserialv>
 8082876:	491c      	ldr	r1, [pc, #112]	; (80828e8 <_Z24serialGetWifiCredentialsv+0x1ac>)
 8082878:	f006 fbd3 	bl	8089022 <_ZN5Print7printlnEPKc>
            ssid = tempSsid;
            Serial.println("Enter new password");
            String tempPassword = Serial.readStringUntil('\r');
            Serial.print("Your new password will be: ");
            Serial.println(tempPassword);
            String ok = Serial.readStringUntil('\r');
 808287c:	a810      	add	r0, sp, #64	; 0x40
 808287e:	f006 f9c7 	bl	8088c10 <_ZN6StringD1Ev>
        if (ok.equals("y"))
        {
            Serial.println("Saving new ssid");
            ssid = tempSsid;
            Serial.println("Enter new password");
            String tempPassword = Serial.readStringUntil('\r');
 8082882:	a80c      	add	r0, sp, #48	; 0x30
 8082884:	f006 f9c4 	bl	8088c10 <_ZN6StringD1Ev>
 8082888:	e004      	b.n	8082894 <_Z24serialGetWifiCredentialsv+0x158>
                Serial.println("okay, no problem\n\r");
            }
        }
        else
        {
            Serial.println("okay, no problem\n\r");
 808288a:	f007 fbff 	bl	808a08c <_Z16_fetch_usbserialv>
 808288e:	4916      	ldr	r1, [pc, #88]	; (80828e8 <_Z24serialGetWifiCredentialsv+0x1ac>)
 8082890:	f006 fbc7 	bl	8089022 <_ZN5Print7printlnEPKc>
            return;
 8082894:	a808      	add	r0, sp, #32
 8082896:	f006 f9bb 	bl	8088c10 <_ZN6StringD1Ev>
 808289a:	a804      	add	r0, sp, #16
 808289c:	f006 f9b8 	bl	8088c10 <_ZN6StringD1Ev>
    Serial.println(ssid);
    Serial.print("Current stored password: ");
    Serial.println(password);
    Serial.println("Please enter password in order to make changes.\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 80828a0:	4668      	mov	r0, sp
 80828a2:	f006 f9b5 	bl	8088c10 <_ZN6StringD1Ev>
        {
            Serial.println("okay, no problem\n\r");
            return;
        }
    }
}
 80828a6:	b015      	add	sp, #84	; 0x54
 80828a8:	bd30      	pop	{r4, r5, pc}
 80828aa:	bf00      	nop
 80828ac:	20000200 	.word	0x20000200
 80828b0:	0808f529 	.word	0x0808f529
 80828b4:	200001cc 	.word	0x200001cc
 80828b8:	0808f53f 	.word	0x0808f53f
 80828bc:	0808f559 	.word	0x0808f559
 80828c0:	0808f58b 	.word	0x0808f58b
 80828c4:	0808f591 	.word	0x0808f591
 80828c8:	0808f5a3 	.word	0x0808f5a3
 80828cc:	0808f5b3 	.word	0x0808f5b3
 80828d0:	0808f5cb 	.word	0x0808f5cb
 80828d4:	08091dfe 	.word	0x08091dfe
 80828d8:	0808f5e1 	.word	0x0808f5e1
 80828dc:	0808f5f1 	.word	0x0808f5f1
 80828e0:	0808f604 	.word	0x0808f604
 80828e4:	0808f620 	.word	0x0808f620
 80828e8:	0808f634 	.word	0x0808f634

080828ec <_Z26serialSetSensibleIotEnablev>:

void serialSetSensibleIotEnable(void)
{
 80828ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    Serial.println("Please enter password in order to enable data push to Sensible Iot");
 80828ee:	f007 fbcd 	bl	808a08c <_Z16_fetch_usbserialv>
 80828f2:	4919      	ldr	r1, [pc, #100]	; (8082958 <_Z26serialSetSensibleIotEnablev+0x6c>)
 80828f4:	f006 fb95 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 80828f8:	f007 fbc8 	bl	808a08c <_Z16_fetch_usbserialv>
 80828fc:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082900:	f006 fd13 	bl	808932a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082904:	f007 fbc2 	bl	808a08c <_Z16_fetch_usbserialv>
 8082908:	220d      	movs	r2, #13
 808290a:	4601      	mov	r1, r0
 808290c:	4668      	mov	r0, sp
 808290e:	f006 fd23 	bl	8089358 <_ZN6Stream15readStringUntilEc>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8082912:	4912      	ldr	r1, [pc, #72]	; (808295c <_Z26serialSetSensibleIotEnablev+0x70>)
 8082914:	4668      	mov	r0, sp
 8082916:	f006 fade 	bl	8088ed6 <_ZNK6String6equalsEPKc>
    if (tempString == "imsensible")
 808291a:	b198      	cbz	r0, 8082944 <_Z26serialSetSensibleIotEnablev+0x58>
    {
        Serial.println("Password correct!");
 808291c:	f007 fbb6 	bl	808a08c <_Z16_fetch_usbserialv>
 8082920:	490f      	ldr	r1, [pc, #60]	; (8082960 <_Z26serialSetSensibleIotEnablev+0x74>)
 8082922:	f006 fb7e 	bl	8089022 <_ZN5Print7printlnEPKc>
        Serial.println("Enabling sensible iot data push.");
        sensible_iot_en = 1;
 8082926:	4c0f      	ldr	r4, [pc, #60]	; (8082964 <_Z26serialSetSensibleIotEnablev+0x78>)
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    if (tempString == "imsensible")
    {
        Serial.println("Password correct!");
        Serial.println("Enabling sensible iot data push.");
 8082928:	f007 fbb0 	bl	808a08c <_Z16_fetch_usbserialv>
 808292c:	490e      	ldr	r1, [pc, #56]	; (8082968 <_Z26serialSetSensibleIotEnablev+0x7c>)
 808292e:	f006 fb78 	bl	8089022 <_ZN5Print7printlnEPKc>
        sensible_iot_en = 1;
 8082932:	2301      	movs	r3, #1
 8082934:	6023      	str	r3, [r4, #0]
        EEPROM.put(SENSIBLE_IOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 8082936:	f007 fe89 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 808293a:	4621      	mov	r1, r4
 808293c:	208c      	movs	r0, #140	; 0x8c
 808293e:	f7fe f840 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 8082942:	e004      	b.n	808294e <_Z26serialSetSensibleIotEnablev+0x62>
    }
    else
    {
        Serial.println("\n\rIncorrect password!");
 8082944:	f007 fba2 	bl	808a08c <_Z16_fetch_usbserialv>
 8082948:	4908      	ldr	r1, [pc, #32]	; (808296c <_Z26serialSetSensibleIotEnablev+0x80>)
 808294a:	f006 fb6a 	bl	8089022 <_ZN5Print7printlnEPKc>

void serialSetSensibleIotEnable(void)
{
    Serial.println("Please enter password in order to enable data push to Sensible Iot");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 808294e:	4668      	mov	r0, sp
 8082950:	f006 f95e 	bl	8088c10 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rIncorrect password!");
    }
}
 8082954:	b004      	add	sp, #16
 8082956:	bd10      	pop	{r4, pc}
 8082958:	0808f647 	.word	0x0808f647
 808295c:	0808f68a 	.word	0x0808f68a
 8082960:	0808f591 	.word	0x0808f591
 8082964:	20000898 	.word	0x20000898
 8082968:	0808f695 	.word	0x0808f695
 808296c:	0808f6b6 	.word	0x0808f6b6

08082970 <_Z17serialGetDeviceIdv>:

void serialGetDeviceId(void)
{
 8082970:	b530      	push	{r4, r5, lr}
 8082972:	b089      	sub	sp, #36	; 0x24
    Serial.println();
 8082974:	f007 fb8a 	bl	808a08c <_Z16_fetch_usbserialv>
    Serial.print("Current Device ID:");
    Serial.println(DEVICE_id);
 8082978:	4c35      	ldr	r4, [pc, #212]	; (8082a50 <_Z17serialGetDeviceIdv+0xe0>)
    }
}

void serialGetDeviceId(void)
{
    Serial.println();
 808297a:	f006 fb46 	bl	808900a <_ZN5Print7printlnEv>
    Serial.print("Current Device ID:");
 808297e:	f007 fb85 	bl	808a08c <_Z16_fetch_usbserialv>
 8082982:	4934      	ldr	r1, [pc, #208]	; (8082a54 <_Z17serialGetDeviceIdv+0xe4>)
 8082984:	f006 fb3a 	bl	8088ffc <_ZN5Print5printEPKc>
    Serial.println(DEVICE_id);
 8082988:	f007 fb80 	bl	808a08c <_Z16_fetch_usbserialv>
 808298c:	220a      	movs	r2, #10
 808298e:	6821      	ldr	r1, [r4, #0]
 8082990:	f006 fbb5 	bl	80890fe <_ZN5Print7printlnEii>
    Serial.println("Please enter password in order to change the ID");
 8082994:	f007 fb7a 	bl	808a08c <_Z16_fetch_usbserialv>
 8082998:	492f      	ldr	r1, [pc, #188]	; (8082a58 <_Z17serialGetDeviceIdv+0xe8>)
 808299a:	f006 fb42 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 808299e:	f007 fb75 	bl	808a08c <_Z16_fetch_usbserialv>
 80829a2:	f24c 3150 	movw	r1, #50000	; 0xc350
 80829a6:	f006 fcc0 	bl	808932a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80829aa:	f007 fb6f 	bl	808a08c <_Z16_fetch_usbserialv>
 80829ae:	220d      	movs	r2, #13
 80829b0:	4601      	mov	r1, r0
 80829b2:	4668      	mov	r0, sp
 80829b4:	f006 fcd0 	bl	8089358 <_ZN6Stream15readStringUntilEc>
 80829b8:	4928      	ldr	r1, [pc, #160]	; (8082a5c <_Z17serialGetDeviceIdv+0xec>)
 80829ba:	4668      	mov	r0, sp
 80829bc:	f006 fa8b 	bl	8088ed6 <_ZNK6String6equalsEPKc>

    if (tempString == SERIAL_PASSWORD)
 80829c0:	2800      	cmp	r0, #0
 80829c2:	d03a      	beq.n	8082a3a <_Z17serialGetDeviceIdv+0xca>
    {
        Serial.println("Password correct!");
 80829c4:	f007 fb62 	bl	808a08c <_Z16_fetch_usbserialv>
 80829c8:	4925      	ldr	r1, [pc, #148]	; (8082a60 <_Z17serialGetDeviceIdv+0xf0>)
 80829ca:	f006 fb2a 	bl	8089022 <_ZN5Print7printlnEPKc>
        Serial.println("Enter new Device ID:");
 80829ce:	f007 fb5d 	bl	808a08c <_Z16_fetch_usbserialv>
 80829d2:	4924      	ldr	r1, [pc, #144]	; (8082a64 <_Z17serialGetDeviceIdv+0xf4>)
 80829d4:	f006 fb25 	bl	8089022 <_ZN5Print7printlnEPKc>
        String tempString = Serial.readStringUntil('\r');
 80829d8:	f007 fb58 	bl	808a08c <_Z16_fetch_usbserialv>
 80829dc:	220d      	movs	r2, #13
 80829de:	4601      	mov	r1, r0
 80829e0:	a804      	add	r0, sp, #16
 80829e2:	f006 fcb9 	bl	8089358 <_ZN6Stream15readStringUntilEc>
        int tempValue = tempString.toInt();
 80829e6:	a804      	add	r0, sp, #16
 80829e8:	f006 faba 	bl	8088f60 <_ZNK6String5toIntEv>
 80829ec:	4605      	mov	r5, r0
        Serial.println("");
 80829ee:	f007 fb4d 	bl	808a08c <_Z16_fetch_usbserialv>
 80829f2:	491d      	ldr	r1, [pc, #116]	; (8082a68 <_Z17serialGetDeviceIdv+0xf8>)
 80829f4:	f006 fb15 	bl	8089022 <_ZN5Print7printlnEPKc>
        if (tempValue > MIN_DEVICE_ID_NUMBER && tempValue < MAX_DEVICE_ID_NUMBER)
 80829f8:	f242 730c 	movw	r3, #9996	; 0x270c
 80829fc:	1eaa      	subs	r2, r5, #2
 80829fe:	429a      	cmp	r2, r3
 8082a00:	d812      	bhi.n	8082a28 <_Z17serialGetDeviceIdv+0xb8>
        {
            Serial.print("\n\rNew Device ID:");
 8082a02:	f007 fb43 	bl	808a08c <_Z16_fetch_usbserialv>
 8082a06:	4919      	ldr	r1, [pc, #100]	; (8082a6c <_Z17serialGetDeviceIdv+0xfc>)
 8082a08:	f006 faf8 	bl	8088ffc <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 8082a0c:	f007 fb3e 	bl	808a08c <_Z16_fetch_usbserialv>
 8082a10:	4629      	mov	r1, r5
 8082a12:	220a      	movs	r2, #10
 8082a14:	f006 fb73 	bl	80890fe <_ZN5Print7printlnEii>
            DEVICE_id = tempValue;
 8082a18:	6025      	str	r5, [r4, #0]
            EEPROM.put(DEVICE_ID_MEM_ADDRESS, DEVICE_id);
 8082a1a:	f007 fe17 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8082a1e:	4621      	mov	r1, r4
 8082a20:	2000      	movs	r0, #0
 8082a22:	f7fd ffce 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 8082a26:	e004      	b.n	8082a32 <_Z17serialGetDeviceIdv+0xc2>
        }
        else
        {
            Serial.println("\n\rInvalid value!");
 8082a28:	f007 fb30 	bl	808a08c <_Z16_fetch_usbserialv>
 8082a2c:	4910      	ldr	r1, [pc, #64]	; (8082a70 <_Z17serialGetDeviceIdv+0x100>)
 8082a2e:	f006 faf8 	bl	8089022 <_ZN5Print7printlnEPKc>

    if (tempString == SERIAL_PASSWORD)
    {
        Serial.println("Password correct!");
        Serial.println("Enter new Device ID:");
        String tempString = Serial.readStringUntil('\r');
 8082a32:	a804      	add	r0, sp, #16
 8082a34:	f006 f8ec 	bl	8088c10 <_ZN6StringD1Ev>
 8082a38:	e004      	b.n	8082a44 <_Z17serialGetDeviceIdv+0xd4>
            Serial.println("\n\rInvalid value!");
        }
    }
    else
    {
        Serial.println("\n\rIncorrect password!");
 8082a3a:	f007 fb27 	bl	808a08c <_Z16_fetch_usbserialv>
 8082a3e:	490d      	ldr	r1, [pc, #52]	; (8082a74 <_Z17serialGetDeviceIdv+0x104>)
 8082a40:	f006 faef 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println();
    Serial.print("Current Device ID:");
    Serial.println(DEVICE_id);
    Serial.println("Please enter password in order to change the ID");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082a44:	4668      	mov	r0, sp
 8082a46:	f006 f8e3 	bl	8088c10 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rIncorrect password!");
    }
}
 8082a4a:	b009      	add	sp, #36	; 0x24
 8082a4c:	bd30      	pop	{r4, r5, pc}
 8082a4e:	bf00      	nop
 8082a50:	20000088 	.word	0x20000088
 8082a54:	0808f6cc 	.word	0x0808f6cc
 8082a58:	0808f6df 	.word	0x0808f6df
 8082a5c:	0808f58b 	.word	0x0808f58b
 8082a60:	0808f591 	.word	0x0808f591
 8082a64:	0808f70f 	.word	0x0808f70f
 8082a68:	080917cc 	.word	0x080917cc
 8082a6c:	0808f724 	.word	0x0808f724
 8082a70:	0808f735 	.word	0x0808f735
 8082a74:	0808f6b6 	.word	0x0808f6b6

08082a78 <_Z19serialResetSettingsv>:

void serialResetSettings(void)
{
 8082a78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    Serial.println();
 8082a7a:	f007 fb07 	bl	808a08c <_Z16_fetch_usbserialv>
 8082a7e:	f006 fac4 	bl	808900a <_ZN5Print7printlnEv>
    Serial.println("Please enter password in order to apply default settings");
 8082a82:	f007 fb03 	bl	808a08c <_Z16_fetch_usbserialv>
 8082a86:	4914      	ldr	r1, [pc, #80]	; (8082ad8 <_Z19serialResetSettingsv+0x60>)
 8082a88:	f006 facb 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082a8c:	f007 fafe 	bl	808a08c <_Z16_fetch_usbserialv>
 8082a90:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082a94:	f006 fc49 	bl	808932a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082a98:	f007 faf8 	bl	808a08c <_Z16_fetch_usbserialv>
 8082a9c:	220d      	movs	r2, #13
 8082a9e:	4601      	mov	r1, r0
 8082aa0:	4668      	mov	r0, sp
 8082aa2:	f006 fc59 	bl	8089358 <_ZN6Stream15readStringUntilEc>
 8082aa6:	490d      	ldr	r1, [pc, #52]	; (8082adc <_Z19serialResetSettingsv+0x64>)
 8082aa8:	4668      	mov	r0, sp
 8082aaa:	f006 fa14 	bl	8088ed6 <_ZNK6String6equalsEPKc>

    if (tempString == "bould")
 8082aae:	b138      	cbz	r0, 8082ac0 <_Z19serialResetSettingsv+0x48>
    {
        Serial.println("Password correct, resetting all settings to default!  Please reset your ID to the one shown on your enclosure.");
 8082ab0:	f007 faec 	bl	808a08c <_Z16_fetch_usbserialv>
 8082ab4:	490a      	ldr	r1, [pc, #40]	; (8082ae0 <_Z19serialResetSettingsv+0x68>)
 8082ab6:	f006 fab4 	bl	8089022 <_ZN5Print7printlnEPKc>
        writeDefaultSettings();
 8082aba:	f7fe f893 	bl	8080be4 <_Z20writeDefaultSettingsv>
 8082abe:	e004      	b.n	8082aca <_Z19serialResetSettingsv+0x52>
    }
    else
    {
        Serial.println("\n\rIncorrect password!");
 8082ac0:	f007 fae4 	bl	808a08c <_Z16_fetch_usbserialv>
 8082ac4:	4907      	ldr	r1, [pc, #28]	; (8082ae4 <_Z19serialResetSettingsv+0x6c>)
 8082ac6:	f006 faac 	bl	8089022 <_ZN5Print7printlnEPKc>
void serialResetSettings(void)
{
    Serial.println();
    Serial.println("Please enter password in order to apply default settings");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082aca:	4668      	mov	r0, sp
 8082acc:	f006 f8a0 	bl	8088c10 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rIncorrect password!");
    }
}
 8082ad0:	b005      	add	sp, #20
 8082ad2:	f85d fb04 	ldr.w	pc, [sp], #4
 8082ad6:	bf00      	nop
 8082ad8:	0808f746 	.word	0x0808f746
 8082adc:	0808f58b 	.word	0x0808f58b
 8082ae0:	0808f77f 	.word	0x0808f77f
 8082ae4:	0808f6b6 	.word	0x0808f6b6

08082ae8 <_Z17serialGetTimeDatev>:

void serialGetTimeDate(void)
{
 8082ae8:	b510      	push	{r4, lr}
 8082aea:	b088      	sub	sp, #32
    Serial.println("Enter new Device time and date (10 digit epoch timestamp):");
 8082aec:	f007 face 	bl	808a08c <_Z16_fetch_usbserialv>
 8082af0:	491f      	ldr	r1, [pc, #124]	; (8082b70 <_Z17serialGetTimeDatev+0x88>)
 8082af2:	f006 fa96 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082af6:	f007 fac9 	bl	808a08c <_Z16_fetch_usbserialv>
 8082afa:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082afe:	f006 fc14 	bl	808932a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082b02:	f007 fac3 	bl	808a08c <_Z16_fetch_usbserialv>
 8082b06:	220d      	movs	r2, #13
 8082b08:	4601      	mov	r1, r0
 8082b0a:	4668      	mov	r0, sp
 8082b0c:	f006 fc24 	bl	8089358 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8082b10:	4668      	mov	r0, sp
 8082b12:	f006 fa25 	bl	8088f60 <_ZNK6String5toIntEv>
 8082b16:	4604      	mov	r4, r0
    Serial.println("");
 8082b18:	f007 fab8 	bl	808a08c <_Z16_fetch_usbserialv>
 8082b1c:	4915      	ldr	r1, [pc, #84]	; (8082b74 <_Z17serialGetTimeDatev+0x8c>)
 8082b1e:	f006 fa80 	bl	8089022 <_ZN5Print7printlnEPKc>

    //min is the year 2000, max is the year 2100
    if (tempValue > 966012661 && tempValue < 4121686261)
 8082b22:	4b15      	ldr	r3, [pc, #84]	; (8082b78 <_Z17serialGetTimeDatev+0x90>)
 8082b24:	429c      	cmp	r4, r3
 8082b26:	dd18      	ble.n	8082b5a <_Z17serialGetTimeDatev+0x72>
    {
        Time.setTime(tempValue);
 8082b28:	4620      	mov	r0, r4
 8082b2a:	f006 fca3 	bl	8089474 <_ZN9TimeClass7setTimeEl>
        Serial.print("\n\rNew Device Time:");
 8082b2e:	f007 faad 	bl	808a08c <_Z16_fetch_usbserialv>
 8082b32:	4912      	ldr	r1, [pc, #72]	; (8082b7c <_Z17serialGetTimeDatev+0x94>)
 8082b34:	f006 fa62 	bl	8088ffc <_ZN5Print5printEPKc>
        Serial.println(Time.timeStr());
 8082b38:	f007 faa8 	bl	808a08c <_Z16_fetch_usbserialv>
 8082b3c:	4604      	mov	r4, r0
 8082b3e:	f006 fd76 	bl	808962e <_ZN9TimeClass3nowEv>
 8082b42:	4601      	mov	r1, r0
 8082b44:	a804      	add	r0, sp, #16
 8082b46:	f006 fc9f 	bl	8089488 <_ZN9TimeClass7timeStrEl>
 8082b4a:	9904      	ldr	r1, [sp, #16]
 8082b4c:	4620      	mov	r0, r4
 8082b4e:	f006 fa68 	bl	8089022 <_ZN5Print7printlnEPKc>
 8082b52:	a804      	add	r0, sp, #16
 8082b54:	f006 f85c 	bl	8088c10 <_ZN6StringD1Ev>
 8082b58:	e004      	b.n	8082b64 <_Z17serialGetTimeDatev+0x7c>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
 8082b5a:	f007 fa97 	bl	808a08c <_Z16_fetch_usbserialv>
 8082b5e:	4908      	ldr	r1, [pc, #32]	; (8082b80 <_Z17serialGetTimeDatev+0x98>)
 8082b60:	f006 fa5f 	bl	8089022 <_ZN5Print7printlnEPKc>

void serialGetTimeDate(void)
{
    Serial.println("Enter new Device time and date (10 digit epoch timestamp):");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082b64:	4668      	mov	r0, sp
 8082b66:	f006 f853 	bl	8088c10 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 8082b6a:	b008      	add	sp, #32
 8082b6c:	bd10      	pop	{r4, pc}
 8082b6e:	bf00      	nop
 8082b70:	0808f7ee 	.word	0x0808f7ee
 8082b74:	080917cc 	.word	0x080917cc
 8082b78:	39942ef5 	.word	0x39942ef5
 8082b7c:	0808f829 	.word	0x0808f829
 8082b80:	0808f735 	.word	0x0808f735

08082b84 <_Z13serialGetZonev>:

void serialGetZone(void)
{
 8082b84:	b510      	push	{r4, lr}
 8082b86:	b086      	sub	sp, #24
    Serial.println("Enter new Device time zone (-12.0 to 14.0)");
 8082b88:	f007 fa80 	bl	808a08c <_Z16_fetch_usbserialv>
 8082b8c:	491f      	ldr	r1, [pc, #124]	; (8082c0c <_Z13serialGetZonev+0x88>)
 8082b8e:	f006 fa48 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082b92:	f007 fa7b 	bl	808a08c <_Z16_fetch_usbserialv>
 8082b96:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082b9a:	f006 fbc6 	bl	808932a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082b9e:	f007 fa75 	bl	808a08c <_Z16_fetch_usbserialv>
 8082ba2:	220d      	movs	r2, #13
 8082ba4:	4601      	mov	r1, r0
 8082ba6:	a802      	add	r0, sp, #8
 8082ba8:	f006 fbd6 	bl	8089358 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8082bac:	a802      	add	r0, sp, #8
 8082bae:	f006 f9d7 	bl	8088f60 <_ZNK6String5toIntEv>
 8082bb2:	9001      	str	r0, [sp, #4]
    Serial.println("");
 8082bb4:	f007 fa6a 	bl	808a08c <_Z16_fetch_usbserialv>
 8082bb8:	4915      	ldr	r1, [pc, #84]	; (8082c10 <_Z13serialGetZonev+0x8c>)
 8082bba:	f006 fa32 	bl	8089022 <_ZN5Print7printlnEPKc>

    //min is the year 2000, max is the year 2100
    if (tempValue >= -12 && tempValue <= 14)
 8082bbe:	9801      	ldr	r0, [sp, #4]
 8082bc0:	f100 030c 	add.w	r3, r0, #12
 8082bc4:	2b1a      	cmp	r3, #26
 8082bc6:	d817      	bhi.n	8082bf8 <_Z13serialGetZonev+0x74>
    {
        Time.zone(tempValue);
 8082bc8:	f008 fcb8 	bl	808b53c <__aeabi_i2f>
 8082bcc:	f006 fc36 	bl	808943c <_ZN9TimeClass4zoneEf>
        Serial.print("\n\rNew Device time zone:");
        Serial.println(tempValue);
 8082bd0:	ac06      	add	r4, sp, #24

    //min is the year 2000, max is the year 2100
    if (tempValue >= -12 && tempValue <= 14)
    {
        Time.zone(tempValue);
        Serial.print("\n\rNew Device time zone:");
 8082bd2:	f007 fa5b 	bl	808a08c <_Z16_fetch_usbserialv>
 8082bd6:	490f      	ldr	r1, [pc, #60]	; (8082c14 <_Z13serialGetZonev+0x90>)
 8082bd8:	f006 fa10 	bl	8088ffc <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8082bdc:	f007 fa56 	bl	808a08c <_Z16_fetch_usbserialv>
 8082be0:	f854 1d14 	ldr.w	r1, [r4, #-20]!
 8082be4:	220a      	movs	r2, #10
 8082be6:	f006 fa8a 	bl	80890fe <_ZN5Print7printlnEii>
        EEPROM.put(TIME_ZONE_MEM_ADDRESS, tempValue);
 8082bea:	f007 fd2f 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8082bee:	4621      	mov	r1, r4
 8082bf0:	2054      	movs	r0, #84	; 0x54
 8082bf2:	f7fd fee6 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 8082bf6:	e004      	b.n	8082c02 <_Z13serialGetZonev+0x7e>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
 8082bf8:	f007 fa48 	bl	808a08c <_Z16_fetch_usbserialv>
 8082bfc:	4906      	ldr	r1, [pc, #24]	; (8082c18 <_Z13serialGetZonev+0x94>)
 8082bfe:	f006 fa10 	bl	8089022 <_ZN5Print7printlnEPKc>

void serialGetZone(void)
{
    Serial.println("Enter new Device time zone (-12.0 to 14.0)");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082c02:	a802      	add	r0, sp, #8
 8082c04:	f006 f804 	bl	8088c10 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 8082c08:	b006      	add	sp, #24
 8082c0a:	bd10      	pop	{r4, pc}
 8082c0c:	0808f83c 	.word	0x0808f83c
 8082c10:	080917cc 	.word	0x080917cc
 8082c14:	0808f867 	.word	0x0808f867
 8082c18:	0808f735 	.word	0x0808f735

08082c1c <_Z20serialGetAverageTimev>:

void serialGetAverageTime(void)
{
 8082c1c:	b530      	push	{r4, r5, lr}
 8082c1e:	b087      	sub	sp, #28
    Serial.println();
 8082c20:	f007 fa34 	bl	808a08c <_Z16_fetch_usbserialv>
    Serial.print("Current Frequency: ");
    Serial.print(measurements_to_average);
 8082c24:	4d29      	ldr	r5, [pc, #164]	; (8082ccc <_Z20serialGetAverageTimev+0xb0>)
    }
}

void serialGetAverageTime(void)
{
    Serial.println();
 8082c26:	f006 f9f0 	bl	808900a <_ZN5Print7printlnEv>
    Serial.print("Current Frequency: ");
 8082c2a:	f007 fa2f 	bl	808a08c <_Z16_fetch_usbserialv>
 8082c2e:	4928      	ldr	r1, [pc, #160]	; (8082cd0 <_Z20serialGetAverageTimev+0xb4>)
 8082c30:	f006 f9e4 	bl	8088ffc <_ZN5Print5printEPKc>
    Serial.print(measurements_to_average);
 8082c34:	f007 fa2a 	bl	808a08c <_Z16_fetch_usbserialv>
 8082c38:	220a      	movs	r2, #10
 8082c3a:	6829      	ldr	r1, [r5, #0]
 8082c3c:	f006 fa5d 	bl	80890fa <_ZN5Print5printEii>
    Serial.println("(~2 second) measurements");
 8082c40:	f007 fa24 	bl	808a08c <_Z16_fetch_usbserialv>
 8082c44:	4923      	ldr	r1, [pc, #140]	; (8082cd4 <_Z20serialGetAverageTimev+0xb8>)
 8082c46:	f006 f9ec 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new amount\n\r");
 8082c4a:	f007 fa1f 	bl	808a08c <_Z16_fetch_usbserialv>
 8082c4e:	4922      	ldr	r1, [pc, #136]	; (8082cd8 <_Z20serialGetAverageTimev+0xbc>)
 8082c50:	f006 f9d4 	bl	8088ffc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082c54:	f007 fa1a 	bl	808a08c <_Z16_fetch_usbserialv>
 8082c58:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082c5c:	f006 fb65 	bl	808932a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082c60:	f007 fa14 	bl	808a08c <_Z16_fetch_usbserialv>
 8082c64:	220d      	movs	r2, #13
 8082c66:	4601      	mov	r1, r0
 8082c68:	a802      	add	r0, sp, #8
 8082c6a:	f006 fb75 	bl	8089358 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8082c6e:	a802      	add	r0, sp, #8
 8082c70:	f006 f976 	bl	8088f60 <_ZNK6String5toIntEv>

    if (tempValue >= 1 && tempValue < 10000)
 8082c74:	f242 730e 	movw	r3, #9998	; 0x270e
    Serial.print(measurements_to_average);
    Serial.println("(~2 second) measurements");
    Serial.print("Enter new amount\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();
 8082c78:	9001      	str	r0, [sp, #4]

    if (tempValue >= 1 && tempValue < 10000)
 8082c7a:	3801      	subs	r0, #1
 8082c7c:	4298      	cmp	r0, r3
 8082c7e:	d81a      	bhi.n	8082cb6 <_Z20serialGetAverageTimev+0x9a>
    {
        Serial.print("\n\rNew Frequency: ");
 8082c80:	f007 fa04 	bl	808a08c <_Z16_fetch_usbserialv>
 8082c84:	4915      	ldr	r1, [pc, #84]	; (8082cdc <_Z20serialGetAverageTimev+0xc0>)
 8082c86:	f006 f9b9 	bl	8088ffc <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8082c8a:	f007 f9ff 	bl	808a08c <_Z16_fetch_usbserialv>
 8082c8e:	220a      	movs	r2, #10
 8082c90:	9901      	ldr	r1, [sp, #4]
 8082c92:	f006 fa34 	bl	80890fe <_ZN5Print7printlnEii>
        Serial.println("(~2 second) measurements");
        measurements_to_average = tempValue;
 8082c96:	ac06      	add	r4, sp, #24

    if (tempValue >= 1 && tempValue < 10000)
    {
        Serial.print("\n\rNew Frequency: ");
        Serial.println(tempValue);
        Serial.println("(~2 second) measurements");
 8082c98:	f007 f9f8 	bl	808a08c <_Z16_fetch_usbserialv>
 8082c9c:	490d      	ldr	r1, [pc, #52]	; (8082cd4 <_Z20serialGetAverageTimev+0xb8>)
 8082c9e:	f006 f9c0 	bl	8089022 <_ZN5Print7printlnEPKc>
        measurements_to_average = tempValue;
 8082ca2:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8082ca6:	602b      	str	r3, [r5, #0]
        EEPROM.put(MEASUREMENTS_TO_AVG_MEM_ADDRESS, tempValue);
 8082ca8:	f007 fcd0 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8082cac:	4621      	mov	r1, r4
 8082cae:	2074      	movs	r0, #116	; 0x74
 8082cb0:	f7fd fe87 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 8082cb4:	e004      	b.n	8082cc0 <_Z20serialGetAverageTimev+0xa4>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
 8082cb6:	f007 f9e9 	bl	808a08c <_Z16_fetch_usbserialv>
 8082cba:	4909      	ldr	r1, [pc, #36]	; (8082ce0 <_Z20serialGetAverageTimev+0xc4>)
 8082cbc:	f006 f9b1 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.print("Current Frequency: ");
    Serial.print(measurements_to_average);
    Serial.println("(~2 second) measurements");
    Serial.print("Enter new amount\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082cc0:	a802      	add	r0, sp, #8
 8082cc2:	f005 ffa5 	bl	8088c10 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 8082cc6:	b007      	add	sp, #28
 8082cc8:	bd30      	pop	{r4, r5, pc}
 8082cca:	bf00      	nop
 8082ccc:	20000abc 	.word	0x20000abc
 8082cd0:	0808f87f 	.word	0x0808f87f
 8082cd4:	0808f893 	.word	0x0808f893
 8082cd8:	0808f8ac 	.word	0x0808f8ac
 8082cdc:	0808f8bf 	.word	0x0808f8bf
 8082ce0:	0808f735 	.word	0x0808f735

08082ce4 <_Z17serialGetCo2Slopev>:

void serialGetCo2Slope(void)
{
 8082ce4:	b530      	push	{r4, r5, lr}
 8082ce6:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8082ce8:	f007 f9d0 	bl	808a08c <_Z16_fetch_usbserialv>
 8082cec:	f006 f98d 	bl	808900a <_ZN5Print7printlnEv>
    Serial.print("Current CO2 slope:");
 8082cf0:	f007 f9cc 	bl	808a08c <_Z16_fetch_usbserialv>
 8082cf4:	4932      	ldr	r1, [pc, #200]	; (8082dc0 <_Z17serialGetCo2Slopev+0xdc>)
 8082cf6:	f006 f981 	bl	8088ffc <_ZN5Print5printEPKc>
    Serial.print(String(CO2_slope, 2));
 8082cfa:	f007 f9c7 	bl	808a08c <_Z16_fetch_usbserialv>
 8082cfe:	4605      	mov	r5, r0
 8082d00:	4c30      	ldr	r4, [pc, #192]	; (8082dc4 <_Z17serialGetCo2Slopev+0xe0>)
 8082d02:	2202      	movs	r2, #2
 8082d04:	6821      	ldr	r1, [r4, #0]
 8082d06:	a806      	add	r0, sp, #24
 8082d08:	f006 f863 	bl	8088dd2 <_ZN6StringC1Efi>
 8082d0c:	9906      	ldr	r1, [sp, #24]
 8082d0e:	4628      	mov	r0, r5
 8082d10:	f006 f974 	bl	8088ffc <_ZN5Print5printEPKc>
 8082d14:	a806      	add	r0, sp, #24
 8082d16:	f005 ff7b 	bl	8088c10 <_ZN6StringD1Ev>
    Serial.println(" ppm");
 8082d1a:	f007 f9b7 	bl	808a08c <_Z16_fetch_usbserialv>
 8082d1e:	492a      	ldr	r1, [pc, #168]	; (8082dc8 <_Z17serialGetCo2Slopev+0xe4>)
 8082d20:	f006 f97f 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO2 slope\n\r");
 8082d24:	f007 f9b2 	bl	808a08c <_Z16_fetch_usbserialv>
 8082d28:	4928      	ldr	r1, [pc, #160]	; (8082dcc <_Z17serialGetCo2Slopev+0xe8>)
 8082d2a:	f006 f967 	bl	8088ffc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082d2e:	f007 f9ad 	bl	808a08c <_Z16_fetch_usbserialv>
 8082d32:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082d36:	f006 faf8 	bl	808932a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082d3a:	f007 f9a7 	bl	808a08c <_Z16_fetch_usbserialv>
 8082d3e:	220d      	movs	r2, #13
 8082d40:	4601      	mov	r1, r0
 8082d42:	a802      	add	r0, sp, #8
 8082d44:	f006 fb08 	bl	8089358 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8082d48:	a802      	add	r0, sp, #8
 8082d4a:	f006 f90e 	bl	8088f6a <_ZNK6String7toFloatEv>
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 10.0)
 8082d4e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(CO2_slope, 2));
    Serial.println(" ppm");
    Serial.print("Enter new CO2 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 8082d52:	4605      	mov	r5, r0
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 10.0)
 8082d54:	f008 fdf8 	bl	808b948 <__aeabi_fcmpge>
 8082d58:	b338      	cbz	r0, 8082daa <_Z17serialGetCo2Slopev+0xc6>
 8082d5a:	491d      	ldr	r1, [pc, #116]	; (8082dd0 <_Z17serialGetCo2Slopev+0xec>)
 8082d5c:	4628      	mov	r0, r5
 8082d5e:	f008 fddf 	bl	808b920 <__aeabi_fcmplt>
 8082d62:	b310      	cbz	r0, 8082daa <_Z17serialGetCo2Slopev+0xc6>
    {
        CO2_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 8082d64:	491b      	ldr	r1, [pc, #108]	; (8082dd4 <_Z17serialGetCo2Slopev+0xf0>)
 8082d66:	4628      	mov	r0, r5
    float tempfloat = tempString.toFloat();
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 10.0)
    {
        CO2_slope = tempfloat;
 8082d68:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 8082d6a:	f008 fc3b 	bl	808b5e4 <__aeabi_fmul>
 8082d6e:	f008 fdff 	bl	808b970 <__aeabi_f2iz>
 8082d72:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew CO2 slope: ");
 8082d74:	f007 f98a 	bl	808a08c <_Z16_fetch_usbserialv>
 8082d78:	4917      	ldr	r1, [pc, #92]	; (8082dd8 <_Z17serialGetCo2Slopev+0xf4>)
 8082d7a:	f006 f93f 	bl	8088ffc <_ZN5Print5printEPKc>
        Serial.println(String(CO2_slope, 2));
 8082d7e:	f007 f985 	bl	808a08c <_Z16_fetch_usbserialv>
 8082d82:	4605      	mov	r5, r0
 8082d84:	2202      	movs	r2, #2
 8082d86:	6821      	ldr	r1, [r4, #0]
 8082d88:	a806      	add	r0, sp, #24
 8082d8a:	f006 f822 	bl	8088dd2 <_ZN6StringC1Efi>
 8082d8e:	9906      	ldr	r1, [sp, #24]
 8082d90:	4628      	mov	r0, r5
 8082d92:	f006 f946 	bl	8089022 <_ZN5Print7printlnEPKc>
 8082d96:	a806      	add	r0, sp, #24
 8082d98:	f005 ff3a 	bl	8088c10 <_ZN6StringD1Ev>

        EEPROM.put(CO2_SLOPE_MEM_ADDRESS, tempValue);
 8082d9c:	f007 fc56 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8082da0:	a901      	add	r1, sp, #4
 8082da2:	2008      	movs	r0, #8
 8082da4:	f7fd fe0d 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 8082da8:	e004      	b.n	8082db4 <_Z17serialGetCo2Slopev+0xd0>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
 8082daa:	f007 f96f 	bl	808a08c <_Z16_fetch_usbserialv>
 8082dae:	490b      	ldr	r1, [pc, #44]	; (8082ddc <_Z17serialGetCo2Slopev+0xf8>)
 8082db0:	f006 f937 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.print("Current CO2 slope:");
    Serial.print(String(CO2_slope, 2));
    Serial.println(" ppm");
    Serial.print("Enter new CO2 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082db4:	a802      	add	r0, sp, #8
 8082db6:	f005 ff2b 	bl	8088c10 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 8082dba:	b00b      	add	sp, #44	; 0x2c
 8082dbc:	bd30      	pop	{r4, r5, pc}
 8082dbe:	bf00      	nop
 8082dc0:	0808f8d1 	.word	0x0808f8d1
 8082dc4:	20000a90 	.word	0x20000a90
 8082dc8:	0808f8e4 	.word	0x0808f8e4
 8082dcc:	0808f8e9 	.word	0x0808f8e9
 8082dd0:	41200000 	.word	0x41200000
 8082dd4:	42c80000 	.word	0x42c80000
 8082dd8:	0808f8ff 	.word	0x0808f8ff
 8082ddc:	0808f735 	.word	0x0808f735

08082de0 <_Z16serialGetCo2Zerov>:

void serialGetCo2Zero(void)
{
 8082de0:	b530      	push	{r4, r5, lr}
 8082de2:	b087      	sub	sp, #28
    Serial.println();
 8082de4:	f007 f952 	bl	808a08c <_Z16_fetch_usbserialv>
    Serial.print("Current CO2 zero:");
    Serial.print(CO2_zero);
 8082de8:	4d26      	ldr	r5, [pc, #152]	; (8082e84 <_Z16serialGetCo2Zerov+0xa4>)
    }
}

void serialGetCo2Zero(void)
{
    Serial.println();
 8082dea:	f006 f90e 	bl	808900a <_ZN5Print7printlnEv>
    Serial.print("Current CO2 zero:");
 8082dee:	f007 f94d 	bl	808a08c <_Z16_fetch_usbserialv>
 8082df2:	4925      	ldr	r1, [pc, #148]	; (8082e88 <_Z16serialGetCo2Zerov+0xa8>)
 8082df4:	f006 f902 	bl	8088ffc <_ZN5Print5printEPKc>
    Serial.print(CO2_zero);
 8082df8:	f007 f948 	bl	808a08c <_Z16_fetch_usbserialv>
 8082dfc:	220a      	movs	r2, #10
 8082dfe:	6829      	ldr	r1, [r5, #0]
 8082e00:	f006 f97b 	bl	80890fa <_ZN5Print5printEii>
    Serial.println(" ppm");
 8082e04:	f007 f942 	bl	808a08c <_Z16_fetch_usbserialv>
 8082e08:	4920      	ldr	r1, [pc, #128]	; (8082e8c <_Z16serialGetCo2Zerov+0xac>)
 8082e0a:	f006 f90a 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO2 Zero\n\r");
 8082e0e:	f007 f93d 	bl	808a08c <_Z16_fetch_usbserialv>
 8082e12:	491f      	ldr	r1, [pc, #124]	; (8082e90 <_Z16serialGetCo2Zerov+0xb0>)
 8082e14:	f006 f8f2 	bl	8088ffc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082e18:	f007 f938 	bl	808a08c <_Z16_fetch_usbserialv>
 8082e1c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082e20:	f006 fa83 	bl	808932a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082e24:	f007 f932 	bl	808a08c <_Z16_fetch_usbserialv>
 8082e28:	220d      	movs	r2, #13
 8082e2a:	4601      	mov	r1, r0
 8082e2c:	a802      	add	r0, sp, #8
 8082e2e:	f006 fa93 	bl	8089358 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8082e32:	a802      	add	r0, sp, #8
 8082e34:	f006 f894 	bl	8088f60 <_ZNK6String5toIntEv>
 8082e38:	9001      	str	r0, [sp, #4]

    if (tempValue >= -1000 && tempValue < 1000)
 8082e3a:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8082e3e:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8082e42:	d215      	bcs.n	8082e70 <_Z16serialGetCo2Zerov+0x90>
    {
        Serial.print("\n\rNew CO2 zero: ");
 8082e44:	f007 f922 	bl	808a08c <_Z16_fetch_usbserialv>
 8082e48:	4912      	ldr	r1, [pc, #72]	; (8082e94 <_Z16serialGetCo2Zerov+0xb4>)
 8082e4a:	f006 f8d7 	bl	8088ffc <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        CO2_zero = tempValue;
 8082e4e:	ac06      	add	r4, sp, #24
    int tempValue = tempString.toInt();

    if (tempValue >= -1000 && tempValue < 1000)
    {
        Serial.print("\n\rNew CO2 zero: ");
        Serial.println(tempValue);
 8082e50:	f007 f91c 	bl	808a08c <_Z16_fetch_usbserialv>
 8082e54:	9901      	ldr	r1, [sp, #4]
 8082e56:	220a      	movs	r2, #10
 8082e58:	f006 f951 	bl	80890fe <_ZN5Print7printlnEii>
        CO2_zero = tempValue;
 8082e5c:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8082e60:	602b      	str	r3, [r5, #0]
        EEPROM.put(CO2_ZERO_MEM_ADDRESS, tempValue);
 8082e62:	f007 fbf3 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8082e66:	4621      	mov	r1, r4
 8082e68:	2004      	movs	r0, #4
 8082e6a:	f7fd fdaa 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 8082e6e:	e004      	b.n	8082e7a <_Z16serialGetCo2Zerov+0x9a>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
 8082e70:	f007 f90c 	bl	808a08c <_Z16_fetch_usbserialv>
 8082e74:	4908      	ldr	r1, [pc, #32]	; (8082e98 <_Z16serialGetCo2Zerov+0xb8>)
 8082e76:	f006 f8d4 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.print("Current CO2 zero:");
    Serial.print(CO2_zero);
    Serial.println(" ppm");
    Serial.print("Enter new CO2 Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082e7a:	a802      	add	r0, sp, #8
 8082e7c:	f005 fec8 	bl	8088c10 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 8082e80:	b007      	add	sp, #28
 8082e82:	bd30      	pop	{r4, r5, pc}
 8082e84:	20000224 	.word	0x20000224
 8082e88:	0808f911 	.word	0x0808f911
 8082e8c:	0808f8e4 	.word	0x0808f8e4
 8082e90:	0808f923 	.word	0x0808f923
 8082e94:	0808f938 	.word	0x0808f938
 8082e98:	0808f735 	.word	0x0808f735
 8082e9c:	00000000 	.word	0x00000000

08082ea0 <_Z16serialGetCoSlopev>:

void serialGetCoSlope(void)
{
 8082ea0:	b530      	push	{r4, r5, lr}
 8082ea2:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8082ea4:	f007 f8f2 	bl	808a08c <_Z16_fetch_usbserialv>
 8082ea8:	f006 f8af 	bl	808900a <_ZN5Print7printlnEv>
    Serial.print("Current CO slope:");
 8082eac:	f007 f8ee 	bl	808a08c <_Z16_fetch_usbserialv>
 8082eb0:	4937      	ldr	r1, [pc, #220]	; (8082f90 <_Z16serialGetCoSlopev+0xf0>)
 8082eb2:	f006 f8a3 	bl	8088ffc <_ZN5Print5printEPKc>
    Serial.print(String(CO_slopeA, 2));
 8082eb6:	f007 f8e9 	bl	808a08c <_Z16_fetch_usbserialv>
 8082eba:	4605      	mov	r5, r0
 8082ebc:	4c35      	ldr	r4, [pc, #212]	; (8082f94 <_Z16serialGetCoSlopev+0xf4>)
 8082ebe:	2202      	movs	r2, #2
 8082ec0:	6821      	ldr	r1, [r4, #0]
 8082ec2:	a806      	add	r0, sp, #24
 8082ec4:	f005 ff85 	bl	8088dd2 <_ZN6StringC1Efi>
 8082ec8:	9906      	ldr	r1, [sp, #24]
 8082eca:	4628      	mov	r0, r5
 8082ecc:	f006 f896 	bl	8088ffc <_ZN5Print5printEPKc>
 8082ed0:	a806      	add	r0, sp, #24
 8082ed2:	f005 fe9d 	bl	8088c10 <_ZN6StringD1Ev>
    Serial.println(" ppm");
 8082ed6:	f007 f8d9 	bl	808a08c <_Z16_fetch_usbserialv>
 8082eda:	492f      	ldr	r1, [pc, #188]	; (8082f98 <_Z16serialGetCoSlopev+0xf8>)
 8082edc:	f006 f8a1 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO slope\n\r");
 8082ee0:	f007 f8d4 	bl	808a08c <_Z16_fetch_usbserialv>
 8082ee4:	492d      	ldr	r1, [pc, #180]	; (8082f9c <_Z16serialGetCoSlopev+0xfc>)
 8082ee6:	f006 f889 	bl	8088ffc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082eea:	f007 f8cf 	bl	808a08c <_Z16_fetch_usbserialv>
 8082eee:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082ef2:	f006 fa1a 	bl	808932a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082ef6:	f007 f8c9 	bl	808a08c <_Z16_fetch_usbserialv>
 8082efa:	220d      	movs	r2, #13
 8082efc:	4601      	mov	r1, r0
 8082efe:	a802      	add	r0, sp, #8
 8082f00:	f006 fa2a 	bl	8089358 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8082f04:	a802      	add	r0, sp, #8
 8082f06:	f006 f830 	bl	8088f6a <_ZNK6String7toFloatEv>
 8082f0a:	4605      	mov	r5, r0
    int tempValue;

    if (tempfloat >= 0.1 && tempfloat < 2.0)
 8082f0c:	f007 fec0 	bl	808ac90 <__aeabi_f2d>
 8082f10:	a31d      	add	r3, pc, #116	; (adr r3, 8082f88 <_Z16serialGetCoSlopev+0xe8>)
 8082f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8082f16:	f008 f995 	bl	808b244 <__aeabi_dcmpge>
 8082f1a:	b340      	cbz	r0, 8082f6e <_Z16serialGetCoSlopev+0xce>
 8082f1c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8082f20:	4628      	mov	r0, r5
 8082f22:	f008 fcfd 	bl	808b920 <__aeabi_fcmplt>
 8082f26:	b310      	cbz	r0, 8082f6e <_Z16serialGetCoSlopev+0xce>
    {
        CO_slopeA = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 8082f28:	491d      	ldr	r1, [pc, #116]	; (8082fa0 <_Z16serialGetCoSlopev+0x100>)
 8082f2a:	4628      	mov	r0, r5
    float tempfloat = tempString.toFloat();
    int tempValue;

    if (tempfloat >= 0.1 && tempfloat < 2.0)
    {
        CO_slopeA = tempfloat;
 8082f2c:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 8082f2e:	f008 fb59 	bl	808b5e4 <__aeabi_fmul>
 8082f32:	f008 fd1d 	bl	808b970 <__aeabi_f2iz>
 8082f36:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew COA slope: ");
 8082f38:	f007 f8a8 	bl	808a08c <_Z16_fetch_usbserialv>
 8082f3c:	4919      	ldr	r1, [pc, #100]	; (8082fa4 <_Z16serialGetCoSlopev+0x104>)
 8082f3e:	f006 f85d 	bl	8088ffc <_ZN5Print5printEPKc>
        Serial.println(String(CO_slopeA, 2));
 8082f42:	f007 f8a3 	bl	808a08c <_Z16_fetch_usbserialv>
 8082f46:	4605      	mov	r5, r0
 8082f48:	2202      	movs	r2, #2
 8082f4a:	6821      	ldr	r1, [r4, #0]
 8082f4c:	a806      	add	r0, sp, #24
 8082f4e:	f005 ff40 	bl	8088dd2 <_ZN6StringC1Efi>
 8082f52:	9906      	ldr	r1, [sp, #24]
 8082f54:	4628      	mov	r0, r5
 8082f56:	f006 f864 	bl	8089022 <_ZN5Print7printlnEPKc>
 8082f5a:	a806      	add	r0, sp, #24
 8082f5c:	f005 fe58 	bl	8088c10 <_ZN6StringD1Ev>

        EEPROM.put(CO_SLOPE_A_MEM_ADDRESS, tempValue);
 8082f60:	f007 fb74 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8082f64:	a901      	add	r1, sp, #4
 8082f66:	2010      	movs	r0, #16
 8082f68:	f7fd fd2b 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 8082f6c:	e004      	b.n	8082f78 <_Z16serialGetCoSlopev+0xd8>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
 8082f6e:	f007 f88d 	bl	808a08c <_Z16_fetch_usbserialv>
 8082f72:	490d      	ldr	r1, [pc, #52]	; (8082fa8 <_Z16serialGetCoSlopev+0x108>)
 8082f74:	f006 f855 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.print("Current CO slope:");
    Serial.print(String(CO_slopeA, 2));
    Serial.println(" ppm");
    Serial.print("Enter new CO slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082f78:	a802      	add	r0, sp, #8
 8082f7a:	f005 fe49 	bl	8088c10 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 8082f7e:	b00b      	add	sp, #44	; 0x2c
 8082f80:	bd30      	pop	{r4, r5, pc}
 8082f82:	bf00      	nop
 8082f84:	f3af 8000 	nop.w
 8082f88:	9999999a 	.word	0x9999999a
 8082f8c:	3fb99999 	.word	0x3fb99999
 8082f90:	0808f949 	.word	0x0808f949
 8082f94:	2000092c 	.word	0x2000092c
 8082f98:	0808f8e4 	.word	0x0808f8e4
 8082f9c:	0808f95b 	.word	0x0808f95b
 8082fa0:	42c80000 	.word	0x42c80000
 8082fa4:	0808f970 	.word	0x0808f970
 8082fa8:	0808f735 	.word	0x0808f735

08082fac <_Z15serialGetCoZerov>:

void serialGetCoZero(void)
{
 8082fac:	b530      	push	{r4, r5, lr}
 8082fae:	b087      	sub	sp, #28
    Serial.println();
 8082fb0:	f007 f86c 	bl	808a08c <_Z16_fetch_usbserialv>
    Serial.print("Current CO_A zero:");
    Serial.print(CO_zeroA);
 8082fb4:	4d27      	ldr	r5, [pc, #156]	; (8083054 <_Z15serialGetCoZerov+0xa8>)
    }
}

void serialGetCoZero(void)
{
    Serial.println();
 8082fb6:	f006 f828 	bl	808900a <_ZN5Print7printlnEv>
    Serial.print("Current CO_A zero:");
 8082fba:	f007 f867 	bl	808a08c <_Z16_fetch_usbserialv>
 8082fbe:	4926      	ldr	r1, [pc, #152]	; (8083058 <_Z15serialGetCoZerov+0xac>)
 8082fc0:	f006 f81c 	bl	8088ffc <_ZN5Print5printEPKc>
    Serial.print(CO_zeroA);
 8082fc4:	f007 f862 	bl	808a08c <_Z16_fetch_usbserialv>
 8082fc8:	220a      	movs	r2, #10
 8082fca:	6829      	ldr	r1, [r5, #0]
 8082fcc:	f006 f895 	bl	80890fa <_ZN5Print5printEii>
    Serial.println(" ppb");
 8082fd0:	f007 f85c 	bl	808a08c <_Z16_fetch_usbserialv>
 8082fd4:	4921      	ldr	r1, [pc, #132]	; (808305c <_Z15serialGetCoZerov+0xb0>)
 8082fd6:	f006 f824 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO Zero\n\r");
 8082fda:	f007 f857 	bl	808a08c <_Z16_fetch_usbserialv>
 8082fde:	4920      	ldr	r1, [pc, #128]	; (8083060 <_Z15serialGetCoZerov+0xb4>)
 8082fe0:	f006 f80c 	bl	8088ffc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082fe4:	f007 f852 	bl	808a08c <_Z16_fetch_usbserialv>
 8082fe8:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082fec:	f006 f99d 	bl	808932a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082ff0:	f007 f84c 	bl	808a08c <_Z16_fetch_usbserialv>
 8082ff4:	220d      	movs	r2, #13
 8082ff6:	4601      	mov	r1, r0
 8082ff8:	a802      	add	r0, sp, #8
 8082ffa:	f006 f9ad 	bl	8089358 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8082ffe:	a802      	add	r0, sp, #8
 8083000:	f005 ffae 	bl	8088f60 <_ZNK6String5toIntEv>

    if (tempValue >= -5000 && tempValue < 5000)
 8083004:	f242 730f 	movw	r3, #9999	; 0x270f
    Serial.print(CO_zeroA);
    Serial.println(" ppb");
    Serial.print("Enter new CO Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();
 8083008:	9001      	str	r0, [sp, #4]

    if (tempValue >= -5000 && tempValue < 5000)
 808300a:	f500 509c 	add.w	r0, r0, #4992	; 0x1380
 808300e:	3008      	adds	r0, #8
 8083010:	4298      	cmp	r0, r3
 8083012:	d815      	bhi.n	8083040 <_Z15serialGetCoZerov+0x94>
    {
        Serial.print("\n\rNew CO zero: ");
 8083014:	f007 f83a 	bl	808a08c <_Z16_fetch_usbserialv>
 8083018:	4912      	ldr	r1, [pc, #72]	; (8083064 <_Z15serialGetCoZerov+0xb8>)
 808301a:	f005 ffef 	bl	8088ffc <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        CO_zeroA = tempValue;
 808301e:	ac06      	add	r4, sp, #24
    int tempValue = tempString.toInt();

    if (tempValue >= -5000 && tempValue < 5000)
    {
        Serial.print("\n\rNew CO zero: ");
        Serial.println(tempValue);
 8083020:	f007 f834 	bl	808a08c <_Z16_fetch_usbserialv>
 8083024:	9901      	ldr	r1, [sp, #4]
 8083026:	220a      	movs	r2, #10
 8083028:	f006 f869 	bl	80890fe <_ZN5Print7printlnEii>
        CO_zeroA = tempValue;
 808302c:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8083030:	602b      	str	r3, [r5, #0]
        EEPROM.put(CO_ZERO_A_MEM_ADDRESS, tempValue);
 8083032:	f007 fb0b 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8083036:	4621      	mov	r1, r4
 8083038:	200c      	movs	r0, #12
 808303a:	f7fd fcc2 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 808303e:	e004      	b.n	808304a <_Z15serialGetCoZerov+0x9e>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
 8083040:	f007 f824 	bl	808a08c <_Z16_fetch_usbserialv>
 8083044:	4908      	ldr	r1, [pc, #32]	; (8083068 <_Z15serialGetCoZerov+0xbc>)
 8083046:	f005 ffec 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.print("Current CO_A zero:");
    Serial.print(CO_zeroA);
    Serial.println(" ppb");
    Serial.print("Enter new CO Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 808304a:	a802      	add	r0, sp, #8
 808304c:	f005 fde0 	bl	8088c10 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 8083050:	b007      	add	sp, #28
 8083052:	bd30      	pop	{r4, r5, pc}
 8083054:	200009f8 	.word	0x200009f8
 8083058:	0808f982 	.word	0x0808f982
 808305c:	0808f995 	.word	0x0808f995
 8083060:	0808f99a 	.word	0x0808f99a
 8083064:	0808f9ae 	.word	0x0808f9ae
 8083068:	0808f735 	.word	0x0808f735

0808306c <_Z17serialGetPm1Slopev>:

void serialGetPm1Slope(void)
{
 808306c:	b530      	push	{r4, r5, lr}
 808306e:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8083070:	f007 f80c 	bl	808a08c <_Z16_fetch_usbserialv>
 8083074:	f005 ffc9 	bl	808900a <_ZN5Print7printlnEv>
    Serial.print("Current PM1 slope:");
 8083078:	f007 f808 	bl	808a08c <_Z16_fetch_usbserialv>
 808307c:	4932      	ldr	r1, [pc, #200]	; (8083148 <_Z17serialGetPm1Slopev+0xdc>)
 808307e:	f005 ffbd 	bl	8088ffc <_ZN5Print5printEPKc>
    Serial.print(String(PM_1_slope, 2));
 8083082:	f007 f803 	bl	808a08c <_Z16_fetch_usbserialv>
 8083086:	4605      	mov	r5, r0
 8083088:	4c30      	ldr	r4, [pc, #192]	; (808314c <_Z17serialGetPm1Slopev+0xe0>)
 808308a:	2202      	movs	r2, #2
 808308c:	6821      	ldr	r1, [r4, #0]
 808308e:	a806      	add	r0, sp, #24
 8083090:	f005 fe9f 	bl	8088dd2 <_ZN6StringC1Efi>
 8083094:	9906      	ldr	r1, [sp, #24]
 8083096:	4628      	mov	r0, r5
 8083098:	f005 ffb0 	bl	8088ffc <_ZN5Print5printEPKc>
 808309c:	a806      	add	r0, sp, #24
 808309e:	f005 fdb7 	bl	8088c10 <_ZN6StringD1Ev>
    Serial.println(" ");
 80830a2:	f006 fff3 	bl	808a08c <_Z16_fetch_usbserialv>
 80830a6:	492a      	ldr	r1, [pc, #168]	; (8083150 <_Z17serialGetPm1Slopev+0xe4>)
 80830a8:	f005 ffbb 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM1 slope\n\r");
 80830ac:	f006 ffee 	bl	808a08c <_Z16_fetch_usbserialv>
 80830b0:	4928      	ldr	r1, [pc, #160]	; (8083154 <_Z17serialGetPm1Slopev+0xe8>)
 80830b2:	f005 ffa3 	bl	8088ffc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 80830b6:	f006 ffe9 	bl	808a08c <_Z16_fetch_usbserialv>
 80830ba:	f24c 3150 	movw	r1, #50000	; 0xc350
 80830be:	f006 f934 	bl	808932a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80830c2:	f006 ffe3 	bl	808a08c <_Z16_fetch_usbserialv>
 80830c6:	220d      	movs	r2, #13
 80830c8:	4601      	mov	r1, r0
 80830ca:	a802      	add	r0, sp, #8
 80830cc:	f006 f944 	bl	8089358 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 80830d0:	a802      	add	r0, sp, #8
 80830d2:	f005 ff4a 	bl	8088f6a <_ZNK6String7toFloatEv>
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 1.5)
 80830d6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(PM_1_slope, 2));
    Serial.println(" ");
    Serial.print("Enter new PM1 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 80830da:	4605      	mov	r5, r0
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 1.5)
 80830dc:	f008 fc34 	bl	808b948 <__aeabi_fcmpge>
 80830e0:	b340      	cbz	r0, 8083134 <_Z17serialGetPm1Slopev+0xc8>
 80830e2:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80830e6:	4628      	mov	r0, r5
 80830e8:	f008 fc1a 	bl	808b920 <__aeabi_fcmplt>
 80830ec:	b310      	cbz	r0, 8083134 <_Z17serialGetPm1Slopev+0xc8>
    {
        PM_1_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 80830ee:	491a      	ldr	r1, [pc, #104]	; (8083158 <_Z17serialGetPm1Slopev+0xec>)
 80830f0:	4628      	mov	r0, r5
    float tempfloat = tempString.toFloat();
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 1.5)
    {
        PM_1_slope = tempfloat;
 80830f2:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 80830f4:	f008 fa76 	bl	808b5e4 <__aeabi_fmul>
 80830f8:	f008 fc3a 	bl	808b970 <__aeabi_f2iz>
 80830fc:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew PM1 slope: ");
 80830fe:	f006 ffc5 	bl	808a08c <_Z16_fetch_usbserialv>
 8083102:	4916      	ldr	r1, [pc, #88]	; (808315c <_Z17serialGetPm1Slopev+0xf0>)
 8083104:	f005 ff7a 	bl	8088ffc <_ZN5Print5printEPKc>
        Serial.println(String(PM_1_slope, 2));
 8083108:	f006 ffc0 	bl	808a08c <_Z16_fetch_usbserialv>
 808310c:	4605      	mov	r5, r0
 808310e:	2202      	movs	r2, #2
 8083110:	6821      	ldr	r1, [r4, #0]
 8083112:	a806      	add	r0, sp, #24
 8083114:	f005 fe5d 	bl	8088dd2 <_ZN6StringC1Efi>
 8083118:	9906      	ldr	r1, [sp, #24]
 808311a:	4628      	mov	r0, r5
 808311c:	f005 ff81 	bl	8089022 <_ZN5Print7printlnEPKc>
 8083120:	a806      	add	r0, sp, #24
 8083122:	f005 fd75 	bl	8088c10 <_ZN6StringD1Ev>

        EEPROM.put(PM_1_SLOPE_MEM_ADDRESS, tempValue);
 8083126:	f007 fa91 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 808312a:	a901      	add	r1, sp, #4
 808312c:	2018      	movs	r0, #24
 808312e:	f7fd fc48 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 8083132:	e004      	b.n	808313e <_Z17serialGetPm1Slopev+0xd2>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
 8083134:	f006 ffaa 	bl	808a08c <_Z16_fetch_usbserialv>
 8083138:	4909      	ldr	r1, [pc, #36]	; (8083160 <_Z17serialGetPm1Slopev+0xf4>)
 808313a:	f005 ff72 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.print("Current PM1 slope:");
    Serial.print(String(PM_1_slope, 2));
    Serial.println(" ");
    Serial.print("Enter new PM1 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 808313e:	a802      	add	r0, sp, #8
 8083140:	f005 fd66 	bl	8088c10 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 8083144:	b00b      	add	sp, #44	; 0x2c
 8083146:	bd30      	pop	{r4, r5, pc}
 8083148:	0808f9be 	.word	0x0808f9be
 808314c:	2000021c 	.word	0x2000021c
 8083150:	08091166 	.word	0x08091166
 8083154:	0808f9d1 	.word	0x0808f9d1
 8083158:	42c80000 	.word	0x42c80000
 808315c:	0808f9e7 	.word	0x0808f9e7
 8083160:	0808f735 	.word	0x0808f735

08083164 <_Z16serialGetPm1Zerov>:

void serialGetPm1Zero(void)
{
 8083164:	b530      	push	{r4, r5, lr}
 8083166:	b087      	sub	sp, #28
    Serial.println();
 8083168:	f006 ff90 	bl	808a08c <_Z16_fetch_usbserialv>
    Serial.print("Current PM1 zero:");
    Serial.print(PM_1_zero);
 808316c:	4d26      	ldr	r5, [pc, #152]	; (8083208 <_Z16serialGetPm1Zerov+0xa4>)
    }
}

void serialGetPm1Zero(void)
{
    Serial.println();
 808316e:	f005 ff4c 	bl	808900a <_ZN5Print7printlnEv>
    Serial.print("Current PM1 zero:");
 8083172:	f006 ff8b 	bl	808a08c <_Z16_fetch_usbserialv>
 8083176:	4925      	ldr	r1, [pc, #148]	; (808320c <_Z16serialGetPm1Zerov+0xa8>)
 8083178:	f005 ff40 	bl	8088ffc <_ZN5Print5printEPKc>
    Serial.print(PM_1_zero);
 808317c:	f006 ff86 	bl	808a08c <_Z16_fetch_usbserialv>
 8083180:	220a      	movs	r2, #10
 8083182:	6829      	ldr	r1, [r5, #0]
 8083184:	f005 ffb9 	bl	80890fa <_ZN5Print5printEii>
    Serial.println(" ug/m3");
 8083188:	f006 ff80 	bl	808a08c <_Z16_fetch_usbserialv>
 808318c:	4920      	ldr	r1, [pc, #128]	; (8083210 <_Z16serialGetPm1Zerov+0xac>)
 808318e:	f005 ff48 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM1 Zero\n\r");
 8083192:	f006 ff7b 	bl	808a08c <_Z16_fetch_usbserialv>
 8083196:	491f      	ldr	r1, [pc, #124]	; (8083214 <_Z16serialGetPm1Zerov+0xb0>)
 8083198:	f005 ff30 	bl	8088ffc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 808319c:	f006 ff76 	bl	808a08c <_Z16_fetch_usbserialv>
 80831a0:	f24c 3150 	movw	r1, #50000	; 0xc350
 80831a4:	f006 f8c1 	bl	808932a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80831a8:	f006 ff70 	bl	808a08c <_Z16_fetch_usbserialv>
 80831ac:	220d      	movs	r2, #13
 80831ae:	4601      	mov	r1, r0
 80831b0:	a802      	add	r0, sp, #8
 80831b2:	f006 f8d1 	bl	8089358 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 80831b6:	a802      	add	r0, sp, #8
 80831b8:	f005 fed2 	bl	8088f60 <_ZNK6String5toIntEv>
 80831bc:	9001      	str	r0, [sp, #4]

    if (tempValue >= -1000 && tempValue < 1000)
 80831be:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 80831c2:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 80831c6:	d215      	bcs.n	80831f4 <_Z16serialGetPm1Zerov+0x90>
    {
        Serial.print("\n\rNew PM1 zero: ");
 80831c8:	f006 ff60 	bl	808a08c <_Z16_fetch_usbserialv>
 80831cc:	4912      	ldr	r1, [pc, #72]	; (8083218 <_Z16serialGetPm1Zerov+0xb4>)
 80831ce:	f005 ff15 	bl	8088ffc <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        PM_1_zero = tempValue;
 80831d2:	ac06      	add	r4, sp, #24
    int tempValue = tempString.toInt();

    if (tempValue >= -1000 && tempValue < 1000)
    {
        Serial.print("\n\rNew PM1 zero: ");
        Serial.println(tempValue);
 80831d4:	f006 ff5a 	bl	808a08c <_Z16_fetch_usbserialv>
 80831d8:	9901      	ldr	r1, [sp, #4]
 80831da:	220a      	movs	r2, #10
 80831dc:	f005 ff8f 	bl	80890fe <_ZN5Print7printlnEii>
        PM_1_zero = tempValue;
 80831e0:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 80831e4:	602b      	str	r3, [r5, #0]
        EEPROM.put(PM_1_ZERO_MEM_ADDRESS, tempValue);
 80831e6:	f007 fa31 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 80831ea:	4621      	mov	r1, r4
 80831ec:	2014      	movs	r0, #20
 80831ee:	f7fd fbe8 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 80831f2:	e004      	b.n	80831fe <_Z16serialGetPm1Zerov+0x9a>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
 80831f4:	f006 ff4a 	bl	808a08c <_Z16_fetch_usbserialv>
 80831f8:	4908      	ldr	r1, [pc, #32]	; (808321c <_Z16serialGetPm1Zerov+0xb8>)
 80831fa:	f005 ff12 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.print("Current PM1 zero:");
    Serial.print(PM_1_zero);
    Serial.println(" ug/m3");
    Serial.print("Enter new PM1 Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 80831fe:	a802      	add	r0, sp, #8
 8083200:	f005 fd06 	bl	8088c10 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 8083204:	b007      	add	sp, #28
 8083206:	bd30      	pop	{r4, r5, pc}
 8083208:	2000088c 	.word	0x2000088c
 808320c:	0808f9f9 	.word	0x0808f9f9
 8083210:	0808fa0b 	.word	0x0808fa0b
 8083214:	0808fa12 	.word	0x0808fa12
 8083218:	0808fa27 	.word	0x0808fa27
 808321c:	0808f735 	.word	0x0808f735

08083220 <_Z18serialGetPm25Slopev>:

void serialGetPm25Slope(void)
{
 8083220:	b530      	push	{r4, r5, lr}
 8083222:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8083224:	f006 ff32 	bl	808a08c <_Z16_fetch_usbserialv>
 8083228:	f005 feef 	bl	808900a <_ZN5Print7printlnEv>
    Serial.print("Current PM2.5 slope:");
 808322c:	f006 ff2e 	bl	808a08c <_Z16_fetch_usbserialv>
 8083230:	4932      	ldr	r1, [pc, #200]	; (80832fc <_Z18serialGetPm25Slopev+0xdc>)
 8083232:	f005 fee3 	bl	8088ffc <_ZN5Print5printEPKc>
    Serial.print(String(PM_25_slope, 2));
 8083236:	f006 ff29 	bl	808a08c <_Z16_fetch_usbserialv>
 808323a:	4605      	mov	r5, r0
 808323c:	4c30      	ldr	r4, [pc, #192]	; (8083300 <_Z18serialGetPm25Slopev+0xe0>)
 808323e:	2202      	movs	r2, #2
 8083240:	6821      	ldr	r1, [r4, #0]
 8083242:	a806      	add	r0, sp, #24
 8083244:	f005 fdc5 	bl	8088dd2 <_ZN6StringC1Efi>
 8083248:	9906      	ldr	r1, [sp, #24]
 808324a:	4628      	mov	r0, r5
 808324c:	f005 fed6 	bl	8088ffc <_ZN5Print5printEPKc>
 8083250:	a806      	add	r0, sp, #24
 8083252:	f005 fcdd 	bl	8088c10 <_ZN6StringD1Ev>
    Serial.println(" ");
 8083256:	f006 ff19 	bl	808a08c <_Z16_fetch_usbserialv>
 808325a:	492a      	ldr	r1, [pc, #168]	; (8083304 <_Z18serialGetPm25Slopev+0xe4>)
 808325c:	f005 fee1 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM2.5 slope\n\r");
 8083260:	f006 ff14 	bl	808a08c <_Z16_fetch_usbserialv>
 8083264:	4928      	ldr	r1, [pc, #160]	; (8083308 <_Z18serialGetPm25Slopev+0xe8>)
 8083266:	f005 fec9 	bl	8088ffc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 808326a:	f006 ff0f 	bl	808a08c <_Z16_fetch_usbserialv>
 808326e:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083272:	f006 f85a 	bl	808932a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083276:	f006 ff09 	bl	808a08c <_Z16_fetch_usbserialv>
 808327a:	220d      	movs	r2, #13
 808327c:	4601      	mov	r1, r0
 808327e:	a802      	add	r0, sp, #8
 8083280:	f006 f86a 	bl	8089358 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083284:	a802      	add	r0, sp, #8
 8083286:	f005 fe70 	bl	8088f6a <_ZNK6String7toFloatEv>
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 1.5)
 808328a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(PM_25_slope, 2));
    Serial.println(" ");
    Serial.print("Enter new PM2.5 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 808328e:	4605      	mov	r5, r0
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 1.5)
 8083290:	f008 fb5a 	bl	808b948 <__aeabi_fcmpge>
 8083294:	b340      	cbz	r0, 80832e8 <_Z18serialGetPm25Slopev+0xc8>
 8083296:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 808329a:	4628      	mov	r0, r5
 808329c:	f008 fb40 	bl	808b920 <__aeabi_fcmplt>
 80832a0:	b310      	cbz	r0, 80832e8 <_Z18serialGetPm25Slopev+0xc8>
    {
        PM_25_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 80832a2:	491a      	ldr	r1, [pc, #104]	; (808330c <_Z18serialGetPm25Slopev+0xec>)
 80832a4:	4628      	mov	r0, r5
    float tempfloat = tempString.toFloat();
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 1.5)
    {
        PM_25_slope = tempfloat;
 80832a6:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 80832a8:	f008 f99c 	bl	808b5e4 <__aeabi_fmul>
 80832ac:	f008 fb60 	bl	808b970 <__aeabi_f2iz>
 80832b0:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew PM2.5 slope: ");
 80832b2:	f006 feeb 	bl	808a08c <_Z16_fetch_usbserialv>
 80832b6:	4916      	ldr	r1, [pc, #88]	; (8083310 <_Z18serialGetPm25Slopev+0xf0>)
 80832b8:	f005 fea0 	bl	8088ffc <_ZN5Print5printEPKc>
        Serial.println(String(PM_25_slope, 2));
 80832bc:	f006 fee6 	bl	808a08c <_Z16_fetch_usbserialv>
 80832c0:	4605      	mov	r5, r0
 80832c2:	2202      	movs	r2, #2
 80832c4:	6821      	ldr	r1, [r4, #0]
 80832c6:	a806      	add	r0, sp, #24
 80832c8:	f005 fd83 	bl	8088dd2 <_ZN6StringC1Efi>
 80832cc:	9906      	ldr	r1, [sp, #24]
 80832ce:	4628      	mov	r0, r5
 80832d0:	f005 fea7 	bl	8089022 <_ZN5Print7printlnEPKc>
 80832d4:	a806      	add	r0, sp, #24
 80832d6:	f005 fc9b 	bl	8088c10 <_ZN6StringD1Ev>

        EEPROM.put(PM_25_SLOPE_MEM_ADDRESS, tempValue);
 80832da:	f007 f9b7 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 80832de:	a901      	add	r1, sp, #4
 80832e0:	2020      	movs	r0, #32
 80832e2:	f7fd fb6e 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 80832e6:	e004      	b.n	80832f2 <_Z18serialGetPm25Slopev+0xd2>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
 80832e8:	f006 fed0 	bl	808a08c <_Z16_fetch_usbserialv>
 80832ec:	4909      	ldr	r1, [pc, #36]	; (8083314 <_Z18serialGetPm25Slopev+0xf4>)
 80832ee:	f005 fe98 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.print("Current PM2.5 slope:");
    Serial.print(String(PM_25_slope, 2));
    Serial.println(" ");
    Serial.print("Enter new PM2.5 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 80832f2:	a802      	add	r0, sp, #8
 80832f4:	f005 fc8c 	bl	8088c10 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 80832f8:	b00b      	add	sp, #44	; 0x2c
 80832fa:	bd30      	pop	{r4, r5, pc}
 80832fc:	0808fa38 	.word	0x0808fa38
 8083300:	200007a8 	.word	0x200007a8
 8083304:	08091166 	.word	0x08091166
 8083308:	0808fa4d 	.word	0x0808fa4d
 808330c:	42c80000 	.word	0x42c80000
 8083310:	0808fa65 	.word	0x0808fa65
 8083314:	0808f735 	.word	0x0808f735

08083318 <_Z17serialGetPm25Zerov>:

void serialGetPm25Zero(void)
{
 8083318:	b530      	push	{r4, r5, lr}
 808331a:	b087      	sub	sp, #28
    Serial.println();
 808331c:	f006 feb6 	bl	808a08c <_Z16_fetch_usbserialv>
    Serial.print("Current PM2.5 zero:");
    Serial.print(PM_25_zero);
 8083320:	4d26      	ldr	r5, [pc, #152]	; (80833bc <_Z17serialGetPm25Zerov+0xa4>)
    }
}

void serialGetPm25Zero(void)
{
    Serial.println();
 8083322:	f005 fe72 	bl	808900a <_ZN5Print7printlnEv>
    Serial.print("Current PM2.5 zero:");
 8083326:	f006 feb1 	bl	808a08c <_Z16_fetch_usbserialv>
 808332a:	4925      	ldr	r1, [pc, #148]	; (80833c0 <_Z17serialGetPm25Zerov+0xa8>)
 808332c:	f005 fe66 	bl	8088ffc <_ZN5Print5printEPKc>
    Serial.print(PM_25_zero);
 8083330:	f006 feac 	bl	808a08c <_Z16_fetch_usbserialv>
 8083334:	220a      	movs	r2, #10
 8083336:	6829      	ldr	r1, [r5, #0]
 8083338:	f005 fedf 	bl	80890fa <_ZN5Print5printEii>
    Serial.println(" ug/m3");
 808333c:	f006 fea6 	bl	808a08c <_Z16_fetch_usbserialv>
 8083340:	4920      	ldr	r1, [pc, #128]	; (80833c4 <_Z17serialGetPm25Zerov+0xac>)
 8083342:	f005 fe6e 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM2.5 Zero\n\r");
 8083346:	f006 fea1 	bl	808a08c <_Z16_fetch_usbserialv>
 808334a:	491f      	ldr	r1, [pc, #124]	; (80833c8 <_Z17serialGetPm25Zerov+0xb0>)
 808334c:	f005 fe56 	bl	8088ffc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083350:	f006 fe9c 	bl	808a08c <_Z16_fetch_usbserialv>
 8083354:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083358:	f005 ffe7 	bl	808932a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 808335c:	f006 fe96 	bl	808a08c <_Z16_fetch_usbserialv>
 8083360:	220d      	movs	r2, #13
 8083362:	4601      	mov	r1, r0
 8083364:	a802      	add	r0, sp, #8
 8083366:	f005 fff7 	bl	8089358 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 808336a:	a802      	add	r0, sp, #8
 808336c:	f005 fdf8 	bl	8088f60 <_ZNK6String5toIntEv>
 8083370:	9001      	str	r0, [sp, #4]

    if (tempValue >= -1000 && tempValue < 1000)
 8083372:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8083376:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 808337a:	d215      	bcs.n	80833a8 <_Z17serialGetPm25Zerov+0x90>
    {
        Serial.print("\n\rNew PM2.5 zero: ");
 808337c:	f006 fe86 	bl	808a08c <_Z16_fetch_usbserialv>
 8083380:	4912      	ldr	r1, [pc, #72]	; (80833cc <_Z17serialGetPm25Zerov+0xb4>)
 8083382:	f005 fe3b 	bl	8088ffc <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        PM_25_zero = tempValue;
 8083386:	ac06      	add	r4, sp, #24
    int tempValue = tempString.toInt();

    if (tempValue >= -1000 && tempValue < 1000)
    {
        Serial.print("\n\rNew PM2.5 zero: ");
        Serial.println(tempValue);
 8083388:	f006 fe80 	bl	808a08c <_Z16_fetch_usbserialv>
 808338c:	9901      	ldr	r1, [sp, #4]
 808338e:	220a      	movs	r2, #10
 8083390:	f005 feb5 	bl	80890fe <_ZN5Print7printlnEii>
        PM_25_zero = tempValue;
 8083394:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8083398:	602b      	str	r3, [r5, #0]
        EEPROM.put(PM_25_ZERO_MEM_ADDRESS, tempValue);
 808339a:	f007 f957 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 808339e:	4621      	mov	r1, r4
 80833a0:	201c      	movs	r0, #28
 80833a2:	f7fd fb0e 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 80833a6:	e004      	b.n	80833b2 <_Z17serialGetPm25Zerov+0x9a>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
 80833a8:	f006 fe70 	bl	808a08c <_Z16_fetch_usbserialv>
 80833ac:	4908      	ldr	r1, [pc, #32]	; (80833d0 <_Z17serialGetPm25Zerov+0xb8>)
 80833ae:	f005 fe38 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.print("Current PM2.5 zero:");
    Serial.print(PM_25_zero);
    Serial.println(" ug/m3");
    Serial.print("Enter new PM2.5 Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 80833b2:	a802      	add	r0, sp, #8
 80833b4:	f005 fc2c 	bl	8088c10 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 80833b8:	b007      	add	sp, #28
 80833ba:	bd30      	pop	{r4, r5, pc}
 80833bc:	20000768 	.word	0x20000768
 80833c0:	0808fa79 	.word	0x0808fa79
 80833c4:	0808fa0b 	.word	0x0808fa0b
 80833c8:	0808fa8d 	.word	0x0808fa8d
 80833cc:	0808faa4 	.word	0x0808faa4
 80833d0:	0808f735 	.word	0x0808f735

080833d4 <_Z18serialGetPm10Slopev>:

void serialGetPm10Slope(void)
{
 80833d4:	b530      	push	{r4, r5, lr}
 80833d6:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 80833d8:	f006 fe58 	bl	808a08c <_Z16_fetch_usbserialv>
 80833dc:	f005 fe15 	bl	808900a <_ZN5Print7printlnEv>
    Serial.print("Current PM10 slope:");
 80833e0:	f006 fe54 	bl	808a08c <_Z16_fetch_usbserialv>
 80833e4:	4932      	ldr	r1, [pc, #200]	; (80834b0 <_Z18serialGetPm10Slopev+0xdc>)
 80833e6:	f005 fe09 	bl	8088ffc <_ZN5Print5printEPKc>
    Serial.print(String(PM_10_slope, 2));
 80833ea:	f006 fe4f 	bl	808a08c <_Z16_fetch_usbserialv>
 80833ee:	4605      	mov	r5, r0
 80833f0:	4c30      	ldr	r4, [pc, #192]	; (80834b4 <_Z18serialGetPm10Slopev+0xe0>)
 80833f2:	2202      	movs	r2, #2
 80833f4:	6821      	ldr	r1, [r4, #0]
 80833f6:	a806      	add	r0, sp, #24
 80833f8:	f005 fceb 	bl	8088dd2 <_ZN6StringC1Efi>
 80833fc:	9906      	ldr	r1, [sp, #24]
 80833fe:	4628      	mov	r0, r5
 8083400:	f005 fdfc 	bl	8088ffc <_ZN5Print5printEPKc>
 8083404:	a806      	add	r0, sp, #24
 8083406:	f005 fc03 	bl	8088c10 <_ZN6StringD1Ev>
    Serial.println(" ");
 808340a:	f006 fe3f 	bl	808a08c <_Z16_fetch_usbserialv>
 808340e:	492a      	ldr	r1, [pc, #168]	; (80834b8 <_Z18serialGetPm10Slopev+0xe4>)
 8083410:	f005 fe07 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM10 slope\n\r");
 8083414:	f006 fe3a 	bl	808a08c <_Z16_fetch_usbserialv>
 8083418:	4928      	ldr	r1, [pc, #160]	; (80834bc <_Z18serialGetPm10Slopev+0xe8>)
 808341a:	f005 fdef 	bl	8088ffc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 808341e:	f006 fe35 	bl	808a08c <_Z16_fetch_usbserialv>
 8083422:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083426:	f005 ff80 	bl	808932a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 808342a:	f006 fe2f 	bl	808a08c <_Z16_fetch_usbserialv>
 808342e:	220d      	movs	r2, #13
 8083430:	4601      	mov	r1, r0
 8083432:	a802      	add	r0, sp, #8
 8083434:	f005 ff90 	bl	8089358 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083438:	a802      	add	r0, sp, #8
 808343a:	f005 fd96 	bl	8088f6a <_ZNK6String7toFloatEv>
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 1.5)
 808343e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(PM_10_slope, 2));
    Serial.println(" ");
    Serial.print("Enter new PM10 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 8083442:	4605      	mov	r5, r0
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 1.5)
 8083444:	f008 fa80 	bl	808b948 <__aeabi_fcmpge>
 8083448:	b340      	cbz	r0, 808349c <_Z18serialGetPm10Slopev+0xc8>
 808344a:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 808344e:	4628      	mov	r0, r5
 8083450:	f008 fa66 	bl	808b920 <__aeabi_fcmplt>
 8083454:	b310      	cbz	r0, 808349c <_Z18serialGetPm10Slopev+0xc8>
    {
        PM_10_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 8083456:	491a      	ldr	r1, [pc, #104]	; (80834c0 <_Z18serialGetPm10Slopev+0xec>)
 8083458:	4628      	mov	r0, r5
    float tempfloat = tempString.toFloat();
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 1.5)
    {
        PM_10_slope = tempfloat;
 808345a:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 808345c:	f008 f8c2 	bl	808b5e4 <__aeabi_fmul>
 8083460:	f008 fa86 	bl	808b970 <__aeabi_f2iz>
 8083464:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew PM10 slope: ");
 8083466:	f006 fe11 	bl	808a08c <_Z16_fetch_usbserialv>
 808346a:	4916      	ldr	r1, [pc, #88]	; (80834c4 <_Z18serialGetPm10Slopev+0xf0>)
 808346c:	f005 fdc6 	bl	8088ffc <_ZN5Print5printEPKc>
        Serial.println(String(PM_10_slope, 2));
 8083470:	f006 fe0c 	bl	808a08c <_Z16_fetch_usbserialv>
 8083474:	4605      	mov	r5, r0
 8083476:	2202      	movs	r2, #2
 8083478:	6821      	ldr	r1, [r4, #0]
 808347a:	a806      	add	r0, sp, #24
 808347c:	f005 fca9 	bl	8088dd2 <_ZN6StringC1Efi>
 8083480:	9906      	ldr	r1, [sp, #24]
 8083482:	4628      	mov	r0, r5
 8083484:	f005 fdcd 	bl	8089022 <_ZN5Print7printlnEPKc>
 8083488:	a806      	add	r0, sp, #24
 808348a:	f005 fbc1 	bl	8088c10 <_ZN6StringD1Ev>

        EEPROM.put(PM_10_SLOPE_MEM_ADDRESS, tempValue);
 808348e:	f007 f8dd 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8083492:	a901      	add	r1, sp, #4
 8083494:	2028      	movs	r0, #40	; 0x28
 8083496:	f7fd fa94 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 808349a:	e004      	b.n	80834a6 <_Z18serialGetPm10Slopev+0xd2>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
 808349c:	f006 fdf6 	bl	808a08c <_Z16_fetch_usbserialv>
 80834a0:	4909      	ldr	r1, [pc, #36]	; (80834c8 <_Z18serialGetPm10Slopev+0xf4>)
 80834a2:	f005 fdbe 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.print("Current PM10 slope:");
    Serial.print(String(PM_10_slope, 2));
    Serial.println(" ");
    Serial.print("Enter new PM10 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 80834a6:	a802      	add	r0, sp, #8
 80834a8:	f005 fbb2 	bl	8088c10 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 80834ac:	b00b      	add	sp, #44	; 0x2c
 80834ae:	bd30      	pop	{r4, r5, pc}
 80834b0:	0808fab7 	.word	0x0808fab7
 80834b4:	20000af0 	.word	0x20000af0
 80834b8:	08091166 	.word	0x08091166
 80834bc:	0808facb 	.word	0x0808facb
 80834c0:	42c80000 	.word	0x42c80000
 80834c4:	0808fae2 	.word	0x0808fae2
 80834c8:	0808f735 	.word	0x0808f735

080834cc <_Z17serialGetPm10Zerov>:

void serialGetPm10Zero(void)
{
 80834cc:	b530      	push	{r4, r5, lr}
 80834ce:	b087      	sub	sp, #28
    Serial.println();
 80834d0:	f006 fddc 	bl	808a08c <_Z16_fetch_usbserialv>
    Serial.print("Current PM10 zero:");
    Serial.print(PM_10_zero);
 80834d4:	4d26      	ldr	r5, [pc, #152]	; (8083570 <_Z17serialGetPm10Zerov+0xa4>)
    }
}

void serialGetPm10Zero(void)
{
    Serial.println();
 80834d6:	f005 fd98 	bl	808900a <_ZN5Print7printlnEv>
    Serial.print("Current PM10 zero:");
 80834da:	f006 fdd7 	bl	808a08c <_Z16_fetch_usbserialv>
 80834de:	4925      	ldr	r1, [pc, #148]	; (8083574 <_Z17serialGetPm10Zerov+0xa8>)
 80834e0:	f005 fd8c 	bl	8088ffc <_ZN5Print5printEPKc>
    Serial.print(PM_10_zero);
 80834e4:	f006 fdd2 	bl	808a08c <_Z16_fetch_usbserialv>
 80834e8:	220a      	movs	r2, #10
 80834ea:	6829      	ldr	r1, [r5, #0]
 80834ec:	f005 fe05 	bl	80890fa <_ZN5Print5printEii>
    Serial.println(" um/m3");
 80834f0:	f006 fdcc 	bl	808a08c <_Z16_fetch_usbserialv>
 80834f4:	4920      	ldr	r1, [pc, #128]	; (8083578 <_Z17serialGetPm10Zerov+0xac>)
 80834f6:	f005 fd94 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM10 Zero\n\r");
 80834fa:	f006 fdc7 	bl	808a08c <_Z16_fetch_usbserialv>
 80834fe:	491f      	ldr	r1, [pc, #124]	; (808357c <_Z17serialGetPm10Zerov+0xb0>)
 8083500:	f005 fd7c 	bl	8088ffc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083504:	f006 fdc2 	bl	808a08c <_Z16_fetch_usbserialv>
 8083508:	f24c 3150 	movw	r1, #50000	; 0xc350
 808350c:	f005 ff0d 	bl	808932a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083510:	f006 fdbc 	bl	808a08c <_Z16_fetch_usbserialv>
 8083514:	220d      	movs	r2, #13
 8083516:	4601      	mov	r1, r0
 8083518:	a802      	add	r0, sp, #8
 808351a:	f005 ff1d 	bl	8089358 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 808351e:	a802      	add	r0, sp, #8
 8083520:	f005 fd1e 	bl	8088f60 <_ZNK6String5toIntEv>
 8083524:	9001      	str	r0, [sp, #4]

    if (tempValue >= -1000 && tempValue < 1000)
 8083526:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 808352a:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 808352e:	d215      	bcs.n	808355c <_Z17serialGetPm10Zerov+0x90>
    {
        Serial.print("\n\rNew PM10 zero: ");
 8083530:	f006 fdac 	bl	808a08c <_Z16_fetch_usbserialv>
 8083534:	4912      	ldr	r1, [pc, #72]	; (8083580 <_Z17serialGetPm10Zerov+0xb4>)
 8083536:	f005 fd61 	bl	8088ffc <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        PM_10_zero = tempValue;
 808353a:	ac06      	add	r4, sp, #24
    int tempValue = tempString.toInt();

    if (tempValue >= -1000 && tempValue < 1000)
    {
        Serial.print("\n\rNew PM10 zero: ");
        Serial.println(tempValue);
 808353c:	f006 fda6 	bl	808a08c <_Z16_fetch_usbserialv>
 8083540:	9901      	ldr	r1, [sp, #4]
 8083542:	220a      	movs	r2, #10
 8083544:	f005 fddb 	bl	80890fe <_ZN5Print7printlnEii>
        PM_10_zero = tempValue;
 8083548:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 808354c:	602b      	str	r3, [r5, #0]
        EEPROM.put(PM_10_ZERO_MEM_ADDRESS, tempValue);
 808354e:	f007 f87d 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8083552:	4621      	mov	r1, r4
 8083554:	2024      	movs	r0, #36	; 0x24
 8083556:	f7fd fa34 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 808355a:	e004      	b.n	8083566 <_Z17serialGetPm10Zerov+0x9a>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
 808355c:	f006 fd96 	bl	808a08c <_Z16_fetch_usbserialv>
 8083560:	4908      	ldr	r1, [pc, #32]	; (8083584 <_Z17serialGetPm10Zerov+0xb8>)
 8083562:	f005 fd5e 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.print("Current PM10 zero:");
    Serial.print(PM_10_zero);
    Serial.println(" um/m3");
    Serial.print("Enter new PM10 Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083566:	a802      	add	r0, sp, #8
 8083568:	f005 fb52 	bl	8088c10 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 808356c:	b007      	add	sp, #28
 808356e:	bd30      	pop	{r4, r5, pc}
 8083570:	20000ad4 	.word	0x20000ad4
 8083574:	0808faf5 	.word	0x0808faf5
 8083578:	0808fb08 	.word	0x0808fb08
 808357c:	0808fb0f 	.word	0x0808fb0f
 8083580:	0808fb25 	.word	0x0808fb25
 8083584:	0808f735 	.word	0x0808f735

08083588 <_Z25serialGetTemperatureSlopev>:

void serialGetTemperatureSlope(void) 
{
 8083588:	b530      	push	{r4, r5, lr}
 808358a:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 808358c:	f006 fd7e 	bl	808a08c <_Z16_fetch_usbserialv>
 8083590:	f005 fd3b 	bl	808900a <_ZN5Print7printlnEv>
    Serial.print("Current Temperature slope:");
 8083594:	f006 fd7a 	bl	808a08c <_Z16_fetch_usbserialv>
 8083598:	4932      	ldr	r1, [pc, #200]	; (8083664 <_Z25serialGetTemperatureSlopev+0xdc>)
 808359a:	f005 fd2f 	bl	8088ffc <_ZN5Print5printEPKc>
    Serial.print(String(temp_slope, 2));
 808359e:	f006 fd75 	bl	808a08c <_Z16_fetch_usbserialv>
 80835a2:	4605      	mov	r5, r0
 80835a4:	4c30      	ldr	r4, [pc, #192]	; (8083668 <_Z25serialGetTemperatureSlopev+0xe0>)
 80835a6:	2202      	movs	r2, #2
 80835a8:	6821      	ldr	r1, [r4, #0]
 80835aa:	a806      	add	r0, sp, #24
 80835ac:	f005 fc11 	bl	8088dd2 <_ZN6StringC1Efi>
 80835b0:	9906      	ldr	r1, [sp, #24]
 80835b2:	4628      	mov	r0, r5
 80835b4:	f005 fd22 	bl	8088ffc <_ZN5Print5printEPKc>
 80835b8:	a806      	add	r0, sp, #24
 80835ba:	f005 fb29 	bl	8088c10 <_ZN6StringD1Ev>
    Serial.println(" Degrees C");
 80835be:	f006 fd65 	bl	808a08c <_Z16_fetch_usbserialv>
 80835c2:	492a      	ldr	r1, [pc, #168]	; (808366c <_Z25serialGetTemperatureSlopev+0xe4>)
 80835c4:	f005 fd2d 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Temperature slope\n\r");
 80835c8:	f006 fd60 	bl	808a08c <_Z16_fetch_usbserialv>
 80835cc:	4928      	ldr	r1, [pc, #160]	; (8083670 <_Z25serialGetTemperatureSlopev+0xe8>)
 80835ce:	f005 fd15 	bl	8088ffc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 80835d2:	f006 fd5b 	bl	808a08c <_Z16_fetch_usbserialv>
 80835d6:	f24c 3150 	movw	r1, #50000	; 0xc350
 80835da:	f005 fea6 	bl	808932a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80835de:	f006 fd55 	bl	808a08c <_Z16_fetch_usbserialv>
 80835e2:	220d      	movs	r2, #13
 80835e4:	4601      	mov	r1, r0
 80835e6:	a802      	add	r0, sp, #8
 80835e8:	f005 feb6 	bl	8089358 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 80835ec:	a802      	add	r0, sp, #8
 80835ee:	f005 fcbc 	bl	8088f6a <_ZNK6String7toFloatEv>
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 1.5)
 80835f2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(temp_slope, 2));
    Serial.println(" Degrees C");
    Serial.print("Enter new Temperature slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 80835f6:	4605      	mov	r5, r0
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 1.5)
 80835f8:	f008 f9a6 	bl	808b948 <__aeabi_fcmpge>
 80835fc:	b340      	cbz	r0, 8083650 <_Z25serialGetTemperatureSlopev+0xc8>
 80835fe:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8083602:	4628      	mov	r0, r5
 8083604:	f008 f98c 	bl	808b920 <__aeabi_fcmplt>
 8083608:	b310      	cbz	r0, 8083650 <_Z25serialGetTemperatureSlopev+0xc8>
    {
        temp_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 808360a:	491a      	ldr	r1, [pc, #104]	; (8083674 <_Z25serialGetTemperatureSlopev+0xec>)
 808360c:	4628      	mov	r0, r5
    float tempfloat = tempString.toFloat();
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 1.5)
    {
        temp_slope = tempfloat;
 808360e:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 8083610:	f007 ffe8 	bl	808b5e4 <__aeabi_fmul>
 8083614:	f008 f9ac 	bl	808b970 <__aeabi_f2iz>
 8083618:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew Temperature slope: ");
 808361a:	f006 fd37 	bl	808a08c <_Z16_fetch_usbserialv>
 808361e:	4916      	ldr	r1, [pc, #88]	; (8083678 <_Z25serialGetTemperatureSlopev+0xf0>)
 8083620:	f005 fcec 	bl	8088ffc <_ZN5Print5printEPKc>
        Serial.println(String(temp_slope, 2));
 8083624:	f006 fd32 	bl	808a08c <_Z16_fetch_usbserialv>
 8083628:	4605      	mov	r5, r0
 808362a:	2202      	movs	r2, #2
 808362c:	6821      	ldr	r1, [r4, #0]
 808362e:	a806      	add	r0, sp, #24
 8083630:	f005 fbcf 	bl	8088dd2 <_ZN6StringC1Efi>
 8083634:	9906      	ldr	r1, [sp, #24]
 8083636:	4628      	mov	r0, r5
 8083638:	f005 fcf3 	bl	8089022 <_ZN5Print7printlnEPKc>
 808363c:	a806      	add	r0, sp, #24
 808363e:	f005 fae7 	bl	8088c10 <_ZN6StringD1Ev>

        EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, tempValue);
 8083642:	f007 f803 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8083646:	a901      	add	r1, sp, #4
 8083648:	2030      	movs	r0, #48	; 0x30
 808364a:	f7fd f9ba 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 808364e:	e004      	b.n	808365a <_Z25serialGetTemperatureSlopev+0xd2>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
 8083650:	f006 fd1c 	bl	808a08c <_Z16_fetch_usbserialv>
 8083654:	4909      	ldr	r1, [pc, #36]	; (808367c <_Z25serialGetTemperatureSlopev+0xf4>)
 8083656:	f005 fce4 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.print("Current Temperature slope:");
    Serial.print(String(temp_slope, 2));
    Serial.println(" Degrees C");
    Serial.print("Enter new Temperature slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 808365a:	a802      	add	r0, sp, #8
 808365c:	f005 fad8 	bl	8088c10 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 8083660:	b00b      	add	sp, #44	; 0x2c
 8083662:	bd30      	pop	{r4, r5, pc}
 8083664:	0808fb37 	.word	0x0808fb37
 8083668:	200007b0 	.word	0x200007b0
 808366c:	0808fb52 	.word	0x0808fb52
 8083670:	0808fb5d 	.word	0x0808fb5d
 8083674:	42c80000 	.word	0x42c80000
 8083678:	0808fb7b 	.word	0x0808fb7b
 808367c:	0808f735 	.word	0x0808f735

08083680 <_Z24serialGetTemperatureZerov>:

void serialGetTemperatureZero(void)
{
 8083680:	b530      	push	{r4, r5, lr}
 8083682:	b087      	sub	sp, #28
    Serial.println();
 8083684:	f006 fd02 	bl	808a08c <_Z16_fetch_usbserialv>
    Serial.print("Current Temperature zero:");
    Serial.print(temp_zero);
 8083688:	4d25      	ldr	r5, [pc, #148]	; (8083720 <_Z24serialGetTemperatureZerov+0xa0>)
    }
}

void serialGetTemperatureZero(void)
{
    Serial.println();
 808368a:	f005 fcbe 	bl	808900a <_ZN5Print7printlnEv>
    Serial.print("Current Temperature zero:");
 808368e:	f006 fcfd 	bl	808a08c <_Z16_fetch_usbserialv>
 8083692:	4924      	ldr	r1, [pc, #144]	; (8083724 <_Z24serialGetTemperatureZerov+0xa4>)
 8083694:	f005 fcb2 	bl	8088ffc <_ZN5Print5printEPKc>
    Serial.print(temp_zero);
 8083698:	f006 fcf8 	bl	808a08c <_Z16_fetch_usbserialv>
 808369c:	220a      	movs	r2, #10
 808369e:	6829      	ldr	r1, [r5, #0]
 80836a0:	f005 fd2b 	bl	80890fa <_ZN5Print5printEii>
    Serial.println(" Degrees C");
 80836a4:	f006 fcf2 	bl	808a08c <_Z16_fetch_usbserialv>
 80836a8:	491f      	ldr	r1, [pc, #124]	; (8083728 <_Z24serialGetTemperatureZerov+0xa8>)
 80836aa:	f005 fcba 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Temperature Zero\n\r");
 80836ae:	f006 fced 	bl	808a08c <_Z16_fetch_usbserialv>
 80836b2:	491e      	ldr	r1, [pc, #120]	; (808372c <_Z24serialGetTemperatureZerov+0xac>)
 80836b4:	f005 fca2 	bl	8088ffc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 80836b8:	f006 fce8 	bl	808a08c <_Z16_fetch_usbserialv>
 80836bc:	f24c 3150 	movw	r1, #50000	; 0xc350
 80836c0:	f005 fe33 	bl	808932a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80836c4:	f006 fce2 	bl	808a08c <_Z16_fetch_usbserialv>
 80836c8:	220d      	movs	r2, #13
 80836ca:	4601      	mov	r1, r0
 80836cc:	a802      	add	r0, sp, #8
 80836ce:	f005 fe43 	bl	8089358 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 80836d2:	a802      	add	r0, sp, #8
 80836d4:	f005 fc44 	bl	8088f60 <_ZNK6String5toIntEv>
 80836d8:	9001      	str	r0, [sp, #4]

    if (tempValue >= -30 && tempValue < 30)
 80836da:	301e      	adds	r0, #30
 80836dc:	283b      	cmp	r0, #59	; 0x3b
 80836de:	d815      	bhi.n	808370c <_Z24serialGetTemperatureZerov+0x8c>
    {
        Serial.print("\n\rNew Temperature zero: ");
 80836e0:	f006 fcd4 	bl	808a08c <_Z16_fetch_usbserialv>
 80836e4:	4912      	ldr	r1, [pc, #72]	; (8083730 <_Z24serialGetTemperatureZerov+0xb0>)
 80836e6:	f005 fc89 	bl	8088ffc <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        temp_zero = tempValue;
 80836ea:	ac06      	add	r4, sp, #24
    int tempValue = tempString.toInt();

    if (tempValue >= -30 && tempValue < 30)
    {
        Serial.print("\n\rNew Temperature zero: ");
        Serial.println(tempValue);
 80836ec:	f006 fcce 	bl	808a08c <_Z16_fetch_usbserialv>
 80836f0:	9901      	ldr	r1, [sp, #4]
 80836f2:	220a      	movs	r2, #10
 80836f4:	f005 fd03 	bl	80890fe <_ZN5Print7printlnEii>
        temp_zero = tempValue;
 80836f8:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 80836fc:	602b      	str	r3, [r5, #0]
        EEPROM.put(TEMP_ZERO_MEM_ADDRESS, tempValue);
 80836fe:	f006 ffa5 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8083702:	4621      	mov	r1, r4
 8083704:	202c      	movs	r0, #44	; 0x2c
 8083706:	f7fd f95c 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 808370a:	e004      	b.n	8083716 <_Z24serialGetTemperatureZerov+0x96>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
 808370c:	f006 fcbe 	bl	808a08c <_Z16_fetch_usbserialv>
 8083710:	4908      	ldr	r1, [pc, #32]	; (8083734 <_Z24serialGetTemperatureZerov+0xb4>)
 8083712:	f005 fc86 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.print("Current Temperature zero:");
    Serial.print(temp_zero);
    Serial.println(" Degrees C");
    Serial.print("Enter new Temperature Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083716:	a802      	add	r0, sp, #8
 8083718:	f005 fa7a 	bl	8088c10 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 808371c:	b007      	add	sp, #28
 808371e:	bd30      	pop	{r4, r5, pc}
 8083720:	20000aa8 	.word	0x20000aa8
 8083724:	0808fb95 	.word	0x0808fb95
 8083728:	0808fb52 	.word	0x0808fb52
 808372c:	0808fbaf 	.word	0x0808fbaf
 8083730:	0808fbcc 	.word	0x0808fbcc
 8083734:	0808f735 	.word	0x0808f735

08083738 <_Z22serialGetPressureSlopev>:

void serialGetPressureSlope(void)
{
 8083738:	b530      	push	{r4, r5, lr}
 808373a:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 808373c:	f006 fca6 	bl	808a08c <_Z16_fetch_usbserialv>
 8083740:	f005 fc63 	bl	808900a <_ZN5Print7printlnEv>
    Serial.print("Current Pressure slope:");
 8083744:	f006 fca2 	bl	808a08c <_Z16_fetch_usbserialv>
 8083748:	4932      	ldr	r1, [pc, #200]	; (8083814 <_Z22serialGetPressureSlopev+0xdc>)
 808374a:	f005 fc57 	bl	8088ffc <_ZN5Print5printEPKc>
    Serial.print(String(pressure_slope, 2));
 808374e:	f006 fc9d 	bl	808a08c <_Z16_fetch_usbserialv>
 8083752:	4605      	mov	r5, r0
 8083754:	4c30      	ldr	r4, [pc, #192]	; (8083818 <_Z22serialGetPressureSlopev+0xe0>)
 8083756:	2202      	movs	r2, #2
 8083758:	6821      	ldr	r1, [r4, #0]
 808375a:	a806      	add	r0, sp, #24
 808375c:	f005 fb39 	bl	8088dd2 <_ZN6StringC1Efi>
 8083760:	9906      	ldr	r1, [sp, #24]
 8083762:	4628      	mov	r0, r5
 8083764:	f005 fc4a 	bl	8088ffc <_ZN5Print5printEPKc>
 8083768:	a806      	add	r0, sp, #24
 808376a:	f005 fa51 	bl	8088c10 <_ZN6StringD1Ev>
    Serial.println(" torr");
 808376e:	f006 fc8d 	bl	808a08c <_Z16_fetch_usbserialv>
 8083772:	492a      	ldr	r1, [pc, #168]	; (808381c <_Z22serialGetPressureSlopev+0xe4>)
 8083774:	f005 fc55 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Pressure slope\n\r");
 8083778:	f006 fc88 	bl	808a08c <_Z16_fetch_usbserialv>
 808377c:	4928      	ldr	r1, [pc, #160]	; (8083820 <_Z22serialGetPressureSlopev+0xe8>)
 808377e:	f005 fc3d 	bl	8088ffc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083782:	f006 fc83 	bl	808a08c <_Z16_fetch_usbserialv>
 8083786:	f24c 3150 	movw	r1, #50000	; 0xc350
 808378a:	f005 fdce 	bl	808932a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 808378e:	f006 fc7d 	bl	808a08c <_Z16_fetch_usbserialv>
 8083792:	220d      	movs	r2, #13
 8083794:	4601      	mov	r1, r0
 8083796:	a802      	add	r0, sp, #8
 8083798:	f005 fdde 	bl	8089358 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 808379c:	a802      	add	r0, sp, #8
 808379e:	f005 fbe4 	bl	8088f6a <_ZNK6String7toFloatEv>
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 1.5)
 80837a2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(pressure_slope, 2));
    Serial.println(" torr");
    Serial.print("Enter new Pressure slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 80837a6:	4605      	mov	r5, r0
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 1.5)
 80837a8:	f008 f8ce 	bl	808b948 <__aeabi_fcmpge>
 80837ac:	b340      	cbz	r0, 8083800 <_Z22serialGetPressureSlopev+0xc8>
 80837ae:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80837b2:	4628      	mov	r0, r5
 80837b4:	f008 f8b4 	bl	808b920 <__aeabi_fcmplt>
 80837b8:	b310      	cbz	r0, 8083800 <_Z22serialGetPressureSlopev+0xc8>
    {
        pressure_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 80837ba:	491a      	ldr	r1, [pc, #104]	; (8083824 <_Z22serialGetPressureSlopev+0xec>)
 80837bc:	4628      	mov	r0, r5
    float tempfloat = tempString.toFloat();
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 1.5)
    {
        pressure_slope = tempfloat;
 80837be:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 80837c0:	f007 ff10 	bl	808b5e4 <__aeabi_fmul>
 80837c4:	f008 f8d4 	bl	808b970 <__aeabi_f2iz>
 80837c8:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew Pressure slope: ");
 80837ca:	f006 fc5f 	bl	808a08c <_Z16_fetch_usbserialv>
 80837ce:	4916      	ldr	r1, [pc, #88]	; (8083828 <_Z22serialGetPressureSlopev+0xf0>)
 80837d0:	f005 fc14 	bl	8088ffc <_ZN5Print5printEPKc>
        Serial.println(String(pressure_slope, 2));
 80837d4:	f006 fc5a 	bl	808a08c <_Z16_fetch_usbserialv>
 80837d8:	4605      	mov	r5, r0
 80837da:	2202      	movs	r2, #2
 80837dc:	6821      	ldr	r1, [r4, #0]
 80837de:	a806      	add	r0, sp, #24
 80837e0:	f005 faf7 	bl	8088dd2 <_ZN6StringC1Efi>
 80837e4:	9906      	ldr	r1, [sp, #24]
 80837e6:	4628      	mov	r0, r5
 80837e8:	f005 fc1b 	bl	8089022 <_ZN5Print7printlnEPKc>
 80837ec:	a806      	add	r0, sp, #24
 80837ee:	f005 fa0f 	bl	8088c10 <_ZN6StringD1Ev>

        EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, tempValue);
 80837f2:	f006 ff2b 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 80837f6:	a901      	add	r1, sp, #4
 80837f8:	2038      	movs	r0, #56	; 0x38
 80837fa:	f7fd f8e2 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 80837fe:	e004      	b.n	808380a <_Z22serialGetPressureSlopev+0xd2>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
 8083800:	f006 fc44 	bl	808a08c <_Z16_fetch_usbserialv>
 8083804:	4909      	ldr	r1, [pc, #36]	; (808382c <_Z22serialGetPressureSlopev+0xf4>)
 8083806:	f005 fc0c 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.print("Current Pressure slope:");
    Serial.print(String(pressure_slope, 2));
    Serial.println(" torr");
    Serial.print("Enter new Pressure slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 808380a:	a802      	add	r0, sp, #8
 808380c:	f005 fa00 	bl	8088c10 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 8083810:	b00b      	add	sp, #44	; 0x2c
 8083812:	bd30      	pop	{r4, r5, pc}
 8083814:	0808fbe5 	.word	0x0808fbe5
 8083818:	200001e4 	.word	0x200001e4
 808381c:	0808fbfd 	.word	0x0808fbfd
 8083820:	0808fc03 	.word	0x0808fc03
 8083824:	42c80000 	.word	0x42c80000
 8083828:	0808fc1e 	.word	0x0808fc1e
 808382c:	0808f735 	.word	0x0808f735

08083830 <_Z21serialGetPressureZerov>:

void serialGetPressureZero(void)
{
 8083830:	b530      	push	{r4, r5, lr}
 8083832:	b087      	sub	sp, #28
    Serial.println();
 8083834:	f006 fc2a 	bl	808a08c <_Z16_fetch_usbserialv>
    Serial.print("Current Pressure zero:");
    Serial.print(pressure_zero);
 8083838:	4d26      	ldr	r5, [pc, #152]	; (80838d4 <_Z21serialGetPressureZerov+0xa4>)
    }
}

void serialGetPressureZero(void)
{
    Serial.println();
 808383a:	f005 fbe6 	bl	808900a <_ZN5Print7printlnEv>
    Serial.print("Current Pressure zero:");
 808383e:	f006 fc25 	bl	808a08c <_Z16_fetch_usbserialv>
 8083842:	4925      	ldr	r1, [pc, #148]	; (80838d8 <_Z21serialGetPressureZerov+0xa8>)
 8083844:	f005 fbda 	bl	8088ffc <_ZN5Print5printEPKc>
    Serial.print(pressure_zero);
 8083848:	f006 fc20 	bl	808a08c <_Z16_fetch_usbserialv>
 808384c:	220a      	movs	r2, #10
 808384e:	6829      	ldr	r1, [r5, #0]
 8083850:	f005 fc53 	bl	80890fa <_ZN5Print5printEii>
    Serial.println(" ppm");
 8083854:	f006 fc1a 	bl	808a08c <_Z16_fetch_usbserialv>
 8083858:	4920      	ldr	r1, [pc, #128]	; (80838dc <_Z21serialGetPressureZerov+0xac>)
 808385a:	f005 fbe2 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Pressure Zero\n\r");
 808385e:	f006 fc15 	bl	808a08c <_Z16_fetch_usbserialv>
 8083862:	491f      	ldr	r1, [pc, #124]	; (80838e0 <_Z21serialGetPressureZerov+0xb0>)
 8083864:	f005 fbca 	bl	8088ffc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083868:	f006 fc10 	bl	808a08c <_Z16_fetch_usbserialv>
 808386c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083870:	f005 fd5b 	bl	808932a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083874:	f006 fc0a 	bl	808a08c <_Z16_fetch_usbserialv>
 8083878:	220d      	movs	r2, #13
 808387a:	4601      	mov	r1, r0
 808387c:	a802      	add	r0, sp, #8
 808387e:	f005 fd6b 	bl	8089358 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8083882:	a802      	add	r0, sp, #8
 8083884:	f005 fb6c 	bl	8088f60 <_ZNK6String5toIntEv>
 8083888:	9001      	str	r0, [sp, #4]

    if (tempValue >= -1000 && tempValue < 1000)
 808388a:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 808388e:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8083892:	d215      	bcs.n	80838c0 <_Z21serialGetPressureZerov+0x90>
    {
        Serial.print("\n\rNew Pressure zero: ");
 8083894:	f006 fbfa 	bl	808a08c <_Z16_fetch_usbserialv>
 8083898:	4912      	ldr	r1, [pc, #72]	; (80838e4 <_Z21serialGetPressureZerov+0xb4>)
 808389a:	f005 fbaf 	bl	8088ffc <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        pressure_zero = tempValue;
 808389e:	ac06      	add	r4, sp, #24
    int tempValue = tempString.toInt();

    if (tempValue >= -1000 && tempValue < 1000)
    {
        Serial.print("\n\rNew Pressure zero: ");
        Serial.println(tempValue);
 80838a0:	f006 fbf4 	bl	808a08c <_Z16_fetch_usbserialv>
 80838a4:	9901      	ldr	r1, [sp, #4]
 80838a6:	220a      	movs	r2, #10
 80838a8:	f005 fc29 	bl	80890fe <_ZN5Print7printlnEii>
        pressure_zero = tempValue;
 80838ac:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 80838b0:	602b      	str	r3, [r5, #0]
        EEPROM.put(PRESSURE_ZERO_MEM_ADDRESS, tempValue);
 80838b2:	f006 fecb 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 80838b6:	4621      	mov	r1, r4
 80838b8:	2034      	movs	r0, #52	; 0x34
 80838ba:	f7fd f882 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 80838be:	e004      	b.n	80838ca <_Z21serialGetPressureZerov+0x9a>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
 80838c0:	f006 fbe4 	bl	808a08c <_Z16_fetch_usbserialv>
 80838c4:	4908      	ldr	r1, [pc, #32]	; (80838e8 <_Z21serialGetPressureZerov+0xb8>)
 80838c6:	f005 fbac 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.print("Current Pressure zero:");
    Serial.print(pressure_zero);
    Serial.println(" ppm");
    Serial.print("Enter new Pressure Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 80838ca:	a802      	add	r0, sp, #8
 80838cc:	f005 f9a0 	bl	8088c10 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 80838d0:	b007      	add	sp, #28
 80838d2:	bd30      	pop	{r4, r5, pc}
 80838d4:	20000a04 	.word	0x20000a04
 80838d8:	0808fc35 	.word	0x0808fc35
 80838dc:	0808f8e4 	.word	0x0808f8e4
 80838e0:	0808fc4c 	.word	0x0808fc4c
 80838e4:	0808fc66 	.word	0x0808fc66
 80838e8:	0808f735 	.word	0x0808f735

080838ec <_Z22serialGetHumiditySlopev>:

void serialGetHumiditySlope(void)
{
 80838ec:	b530      	push	{r4, r5, lr}
 80838ee:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 80838f0:	f006 fbcc 	bl	808a08c <_Z16_fetch_usbserialv>
 80838f4:	f005 fb89 	bl	808900a <_ZN5Print7printlnEv>
    Serial.print("Current RH slope:");
 80838f8:	f006 fbc8 	bl	808a08c <_Z16_fetch_usbserialv>
 80838fc:	4932      	ldr	r1, [pc, #200]	; (80839c8 <_Z22serialGetHumiditySlopev+0xdc>)
 80838fe:	f005 fb7d 	bl	8088ffc <_ZN5Print5printEPKc>
    Serial.print(String(rh_slope, 2));
 8083902:	f006 fbc3 	bl	808a08c <_Z16_fetch_usbserialv>
 8083906:	4605      	mov	r5, r0
 8083908:	4c30      	ldr	r4, [pc, #192]	; (80839cc <_Z22serialGetHumiditySlopev+0xe0>)
 808390a:	2202      	movs	r2, #2
 808390c:	6821      	ldr	r1, [r4, #0]
 808390e:	a806      	add	r0, sp, #24
 8083910:	f005 fa5f 	bl	8088dd2 <_ZN6StringC1Efi>
 8083914:	9906      	ldr	r1, [sp, #24]
 8083916:	4628      	mov	r0, r5
 8083918:	f005 fb70 	bl	8088ffc <_ZN5Print5printEPKc>
 808391c:	a806      	add	r0, sp, #24
 808391e:	f005 f977 	bl	8088c10 <_ZN6StringD1Ev>
    Serial.println(" %");
 8083922:	f006 fbb3 	bl	808a08c <_Z16_fetch_usbserialv>
 8083926:	492a      	ldr	r1, [pc, #168]	; (80839d0 <_Z22serialGetHumiditySlopev+0xe4>)
 8083928:	f005 fb7b 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new RH slope\n\r");
 808392c:	f006 fbae 	bl	808a08c <_Z16_fetch_usbserialv>
 8083930:	4928      	ldr	r1, [pc, #160]	; (80839d4 <_Z22serialGetHumiditySlopev+0xe8>)
 8083932:	f005 fb63 	bl	8088ffc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083936:	f006 fba9 	bl	808a08c <_Z16_fetch_usbserialv>
 808393a:	f24c 3150 	movw	r1, #50000	; 0xc350
 808393e:	f005 fcf4 	bl	808932a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083942:	f006 fba3 	bl	808a08c <_Z16_fetch_usbserialv>
 8083946:	220d      	movs	r2, #13
 8083948:	4601      	mov	r1, r0
 808394a:	a802      	add	r0, sp, #8
 808394c:	f005 fd04 	bl	8089358 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083950:	a802      	add	r0, sp, #8
 8083952:	f005 fb0a 	bl	8088f6a <_ZNK6String7toFloatEv>
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 10)
 8083956:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(rh_slope, 2));
    Serial.println(" %");
    Serial.print("Enter new RH slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 808395a:	4605      	mov	r5, r0
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 10)
 808395c:	f007 fff4 	bl	808b948 <__aeabi_fcmpge>
 8083960:	b338      	cbz	r0, 80839b2 <_Z22serialGetHumiditySlopev+0xc6>
 8083962:	491d      	ldr	r1, [pc, #116]	; (80839d8 <_Z22serialGetHumiditySlopev+0xec>)
 8083964:	4628      	mov	r0, r5
 8083966:	f007 ffdb 	bl	808b920 <__aeabi_fcmplt>
 808396a:	b310      	cbz	r0, 80839b2 <_Z22serialGetHumiditySlopev+0xc6>
    {
        rh_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 808396c:	491b      	ldr	r1, [pc, #108]	; (80839dc <_Z22serialGetHumiditySlopev+0xf0>)
 808396e:	4628      	mov	r0, r5
    float tempfloat = tempString.toFloat();
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 10)
    {
        rh_slope = tempfloat;
 8083970:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 8083972:	f007 fe37 	bl	808b5e4 <__aeabi_fmul>
 8083976:	f007 fffb 	bl	808b970 <__aeabi_f2iz>
 808397a:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew RH slope: ");
 808397c:	f006 fb86 	bl	808a08c <_Z16_fetch_usbserialv>
 8083980:	4917      	ldr	r1, [pc, #92]	; (80839e0 <_Z22serialGetHumiditySlopev+0xf4>)
 8083982:	f005 fb3b 	bl	8088ffc <_ZN5Print5printEPKc>
        Serial.println(String(rh_slope, 2));
 8083986:	f006 fb81 	bl	808a08c <_Z16_fetch_usbserialv>
 808398a:	4605      	mov	r5, r0
 808398c:	2202      	movs	r2, #2
 808398e:	6821      	ldr	r1, [r4, #0]
 8083990:	a806      	add	r0, sp, #24
 8083992:	f005 fa1e 	bl	8088dd2 <_ZN6StringC1Efi>
 8083996:	9906      	ldr	r1, [sp, #24]
 8083998:	4628      	mov	r0, r5
 808399a:	f005 fb42 	bl	8089022 <_ZN5Print7printlnEPKc>
 808399e:	a806      	add	r0, sp, #24
 80839a0:	f005 f936 	bl	8088c10 <_ZN6StringD1Ev>

        EEPROM.put(RH_SLOPE_MEM_ADDRESS, tempValue);
 80839a4:	f006 fe52 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 80839a8:	a901      	add	r1, sp, #4
 80839aa:	2040      	movs	r0, #64	; 0x40
 80839ac:	f7fd f809 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 80839b0:	e004      	b.n	80839bc <_Z22serialGetHumiditySlopev+0xd0>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
 80839b2:	f006 fb6b 	bl	808a08c <_Z16_fetch_usbserialv>
 80839b6:	490b      	ldr	r1, [pc, #44]	; (80839e4 <_Z22serialGetHumiditySlopev+0xf8>)
 80839b8:	f005 fb33 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.print("Current RH slope:");
    Serial.print(String(rh_slope, 2));
    Serial.println(" %");
    Serial.print("Enter new RH slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 80839bc:	a802      	add	r0, sp, #8
 80839be:	f005 f927 	bl	8088c10 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 80839c2:	b00b      	add	sp, #44	; 0x2c
 80839c4:	bd30      	pop	{r4, r5, pc}
 80839c6:	bf00      	nop
 80839c8:	0808fc7c 	.word	0x0808fc7c
 80839cc:	200006dc 	.word	0x200006dc
 80839d0:	0808fc8e 	.word	0x0808fc8e
 80839d4:	0808fc91 	.word	0x0808fc91
 80839d8:	41200000 	.word	0x41200000
 80839dc:	42c80000 	.word	0x42c80000
 80839e0:	0808fca6 	.word	0x0808fca6
 80839e4:	0808f735 	.word	0x0808f735

080839e8 <_Z21serialGetHumidityZerov>:

void serialGetHumidityZero(void)
{
 80839e8:	b530      	push	{r4, r5, lr}
 80839ea:	b087      	sub	sp, #28
    Serial.println();
 80839ec:	f006 fb4e 	bl	808a08c <_Z16_fetch_usbserialv>
    Serial.print("Current RH zero:");
    Serial.print(rh_zero);
 80839f0:	4d25      	ldr	r5, [pc, #148]	; (8083a88 <_Z21serialGetHumidityZerov+0xa0>)
    }
}

void serialGetHumidityZero(void)
{
    Serial.println();
 80839f2:	f005 fb0a 	bl	808900a <_ZN5Print7printlnEv>
    Serial.print("Current RH zero:");
 80839f6:	f006 fb49 	bl	808a08c <_Z16_fetch_usbserialv>
 80839fa:	4924      	ldr	r1, [pc, #144]	; (8083a8c <_Z21serialGetHumidityZerov+0xa4>)
 80839fc:	f005 fafe 	bl	8088ffc <_ZN5Print5printEPKc>
    Serial.print(rh_zero);
 8083a00:	f006 fb44 	bl	808a08c <_Z16_fetch_usbserialv>
 8083a04:	220a      	movs	r2, #10
 8083a06:	6829      	ldr	r1, [r5, #0]
 8083a08:	f005 fb77 	bl	80890fa <_ZN5Print5printEii>
    Serial.println(" %");
 8083a0c:	f006 fb3e 	bl	808a08c <_Z16_fetch_usbserialv>
 8083a10:	491f      	ldr	r1, [pc, #124]	; (8083a90 <_Z21serialGetHumidityZerov+0xa8>)
 8083a12:	f005 fb06 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new RH Zero\n\r");
 8083a16:	f006 fb39 	bl	808a08c <_Z16_fetch_usbserialv>
 8083a1a:	491e      	ldr	r1, [pc, #120]	; (8083a94 <_Z21serialGetHumidityZerov+0xac>)
 8083a1c:	f005 faee 	bl	8088ffc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083a20:	f006 fb34 	bl	808a08c <_Z16_fetch_usbserialv>
 8083a24:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083a28:	f005 fc7f 	bl	808932a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083a2c:	f006 fb2e 	bl	808a08c <_Z16_fetch_usbserialv>
 8083a30:	220d      	movs	r2, #13
 8083a32:	4601      	mov	r1, r0
 8083a34:	a802      	add	r0, sp, #8
 8083a36:	f005 fc8f 	bl	8089358 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8083a3a:	a802      	add	r0, sp, #8
 8083a3c:	f005 fa90 	bl	8088f60 <_ZNK6String5toIntEv>
 8083a40:	9001      	str	r0, [sp, #4]

    if (tempValue >= -50 && tempValue < 50)
 8083a42:	3032      	adds	r0, #50	; 0x32
 8083a44:	2863      	cmp	r0, #99	; 0x63
 8083a46:	d815      	bhi.n	8083a74 <_Z21serialGetHumidityZerov+0x8c>
    {
        Serial.print("\n\rNew RH zero: ");
 8083a48:	f006 fb20 	bl	808a08c <_Z16_fetch_usbserialv>
 8083a4c:	4912      	ldr	r1, [pc, #72]	; (8083a98 <_Z21serialGetHumidityZerov+0xb0>)
 8083a4e:	f005 fad5 	bl	8088ffc <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        rh_zero = tempValue;
 8083a52:	ac06      	add	r4, sp, #24
    int tempValue = tempString.toInt();

    if (tempValue >= -50 && tempValue < 50)
    {
        Serial.print("\n\rNew RH zero: ");
        Serial.println(tempValue);
 8083a54:	f006 fb1a 	bl	808a08c <_Z16_fetch_usbserialv>
 8083a58:	9901      	ldr	r1, [sp, #4]
 8083a5a:	220a      	movs	r2, #10
 8083a5c:	f005 fb4f 	bl	80890fe <_ZN5Print7printlnEii>
        rh_zero = tempValue;
 8083a60:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8083a64:	602b      	str	r3, [r5, #0]
        EEPROM.put(RH_ZERO_MEM_ADDRESS, tempValue);
 8083a66:	f006 fdf1 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8083a6a:	4621      	mov	r1, r4
 8083a6c:	203c      	movs	r0, #60	; 0x3c
 8083a6e:	f7fc ffa8 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 8083a72:	e004      	b.n	8083a7e <_Z21serialGetHumidityZerov+0x96>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
 8083a74:	f006 fb0a 	bl	808a08c <_Z16_fetch_usbserialv>
 8083a78:	4908      	ldr	r1, [pc, #32]	; (8083a9c <_Z21serialGetHumidityZerov+0xb4>)
 8083a7a:	f005 fad2 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.print("Current RH zero:");
    Serial.print(rh_zero);
    Serial.println(" %");
    Serial.print("Enter new RH Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083a7e:	a802      	add	r0, sp, #8
 8083a80:	f005 f8c6 	bl	8088c10 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 8083a84:	b007      	add	sp, #28
 8083a86:	bd30      	pop	{r4, r5, pc}
 8083a88:	20000760 	.word	0x20000760
 8083a8c:	0808fcb7 	.word	0x0808fcb7
 8083a90:	0808fc8e 	.word	0x0808fc8e
 8083a94:	0808fcc8 	.word	0x0808fcc8
 8083a98:	0808fcdc 	.word	0x0808fcdc
 8083a9c:	0808f735 	.word	0x0808f735

08083aa0 <_Z19serialGetLowerLimitv>:
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetLowerLimit(void)
{
 8083aa0:	b530      	push	{r4, r5, lr}
 8083aa2:	b089      	sub	sp, #36	; 0x24
    Serial.println();
 8083aa4:	f006 faf2 	bl	808a08c <_Z16_fetch_usbserialv>
    Serial.print("Current lower limit:");
    Serial.println(gas_lower_limit);
 8083aa8:	4c35      	ldr	r4, [pc, #212]	; (8083b80 <_Z19serialGetLowerLimitv+0xe0>)
    }
}

void serialGetLowerLimit(void)
{
    Serial.println();
 8083aaa:	f005 faae 	bl	808900a <_ZN5Print7printlnEv>
    Serial.print("Current lower limit:");
 8083aae:	f006 faed 	bl	808a08c <_Z16_fetch_usbserialv>
 8083ab2:	4934      	ldr	r1, [pc, #208]	; (8083b84 <_Z19serialGetLowerLimitv+0xe4>)
 8083ab4:	f005 faa2 	bl	8088ffc <_ZN5Print5printEPKc>
    Serial.println(gas_lower_limit);
 8083ab8:	f006 fae8 	bl	808a08c <_Z16_fetch_usbserialv>
 8083abc:	220a      	movs	r2, #10
 8083abe:	6821      	ldr	r1, [r4, #0]
 8083ac0:	f005 fb1d 	bl	80890fe <_ZN5Print7printlnEii>
    Serial.println("Please enter password in order to change the lower limit");
 8083ac4:	f006 fae2 	bl	808a08c <_Z16_fetch_usbserialv>
 8083ac8:	492f      	ldr	r1, [pc, #188]	; (8083b88 <_Z19serialGetLowerLimitv+0xe8>)
 8083aca:	f005 faaa 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8083ace:	f006 fadd 	bl	808a08c <_Z16_fetch_usbserialv>
 8083ad2:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083ad6:	f005 fc28 	bl	808932a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083ada:	f006 fad7 	bl	808a08c <_Z16_fetch_usbserialv>
 8083ade:	220d      	movs	r2, #13
 8083ae0:	4601      	mov	r1, r0
 8083ae2:	4668      	mov	r0, sp
 8083ae4:	f005 fc38 	bl	8089358 <_ZN6Stream15readStringUntilEc>
 8083ae8:	4928      	ldr	r1, [pc, #160]	; (8083b8c <_Z19serialGetLowerLimitv+0xec>)
 8083aea:	4668      	mov	r0, sp
 8083aec:	f005 f9f3 	bl	8088ed6 <_ZNK6String6equalsEPKc>

    if (tempString == "bould")
 8083af0:	2800      	cmp	r0, #0
 8083af2:	d03a      	beq.n	8083b6a <_Z19serialGetLowerLimitv+0xca>
    {
        Serial.println("Password correct!");
 8083af4:	f006 faca 	bl	808a08c <_Z16_fetch_usbserialv>
 8083af8:	4925      	ldr	r1, [pc, #148]	; (8083b90 <_Z19serialGetLowerLimitv+0xf0>)
 8083afa:	f005 fa92 	bl	8089022 <_ZN5Print7printlnEPKc>
        Serial.println("Enter new lower limit:\n\r");
 8083afe:	f006 fac5 	bl	808a08c <_Z16_fetch_usbserialv>
 8083b02:	4924      	ldr	r1, [pc, #144]	; (8083b94 <_Z19serialGetLowerLimitv+0xf4>)
 8083b04:	f005 fa8d 	bl	8089022 <_ZN5Print7printlnEPKc>
        String tempString = Serial.readStringUntil('\r');
 8083b08:	f006 fac0 	bl	808a08c <_Z16_fetch_usbserialv>
 8083b0c:	220d      	movs	r2, #13
 8083b0e:	4601      	mov	r1, r0
 8083b10:	a804      	add	r0, sp, #16
 8083b12:	f005 fc21 	bl	8089358 <_ZN6Stream15readStringUntilEc>
        int tempValue = tempString.toInt();
 8083b16:	a804      	add	r0, sp, #16
 8083b18:	f005 fa22 	bl	8088f60 <_ZNK6String5toIntEv>
 8083b1c:	4605      	mov	r5, r0
        Serial.println("");
 8083b1e:	f006 fab5 	bl	808a08c <_Z16_fetch_usbserialv>
 8083b22:	491d      	ldr	r1, [pc, #116]	; (8083b98 <_Z19serialGetLowerLimitv+0xf8>)
 8083b24:	f005 fa7d 	bl	8089022 <_ZN5Print7printlnEPKc>
        if (tempValue > 0 && tempValue < 20000)
 8083b28:	f644 631e 	movw	r3, #19998	; 0x4e1e
 8083b2c:	1e6a      	subs	r2, r5, #1
 8083b2e:	429a      	cmp	r2, r3
 8083b30:	d812      	bhi.n	8083b58 <_Z19serialGetLowerLimitv+0xb8>
        {
            Serial.print("\n\rNew lower limit:");
 8083b32:	f006 faab 	bl	808a08c <_Z16_fetch_usbserialv>
 8083b36:	4919      	ldr	r1, [pc, #100]	; (8083b9c <_Z19serialGetLowerLimitv+0xfc>)
 8083b38:	f005 fa60 	bl	8088ffc <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 8083b3c:	f006 faa6 	bl	808a08c <_Z16_fetch_usbserialv>
 8083b40:	4629      	mov	r1, r5
 8083b42:	220a      	movs	r2, #10
 8083b44:	f005 fadb 	bl	80890fe <_ZN5Print7printlnEii>
            gas_lower_limit = tempValue;
 8083b48:	6025      	str	r5, [r4, #0]
            EEPROM.put(GAS_LOWER_LIMIT_MEM_ADDRESS, gas_lower_limit);
 8083b4a:	f006 fd7f 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8083b4e:	4621      	mov	r1, r4
 8083b50:	204c      	movs	r0, #76	; 0x4c
 8083b52:	f7fc ff36 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 8083b56:	e004      	b.n	8083b62 <_Z19serialGetLowerLimitv+0xc2>
        }
        else
        {
            Serial.println("\n\rInvalid value!");
 8083b58:	f006 fa98 	bl	808a08c <_Z16_fetch_usbserialv>
 8083b5c:	4910      	ldr	r1, [pc, #64]	; (8083ba0 <_Z19serialGetLowerLimitv+0x100>)
 8083b5e:	f005 fa60 	bl	8089022 <_ZN5Print7printlnEPKc>

    if (tempString == "bould")
    {
        Serial.println("Password correct!");
        Serial.println("Enter new lower limit:\n\r");
        String tempString = Serial.readStringUntil('\r');
 8083b62:	a804      	add	r0, sp, #16
 8083b64:	f005 f854 	bl	8088c10 <_ZN6StringD1Ev>
 8083b68:	e004      	b.n	8083b74 <_Z19serialGetLowerLimitv+0xd4>
        {
            Serial.println("\n\rInvalid value!");
        }
    }
    else {
        Serial.println("\n\rIncorrect password!");
 8083b6a:	f006 fa8f 	bl	808a08c <_Z16_fetch_usbserialv>
 8083b6e:	490d      	ldr	r1, [pc, #52]	; (8083ba4 <_Z19serialGetLowerLimitv+0x104>)
 8083b70:	f005 fa57 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println();
    Serial.print("Current lower limit:");
    Serial.println(gas_lower_limit);
    Serial.println("Please enter password in order to change the lower limit");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083b74:	4668      	mov	r0, sp
 8083b76:	f005 f84b 	bl	8088c10 <_ZN6StringD1Ev>
        }
    }
    else {
        Serial.println("\n\rIncorrect password!");
    }
}
 8083b7a:	b009      	add	sp, #36	; 0x24
 8083b7c:	bd30      	pop	{r4, r5, pc}
 8083b7e:	bf00      	nop
 8083b80:	20000090 	.word	0x20000090
 8083b84:	0808fd34 	.word	0x0808fd34
 8083b88:	0808fd49 	.word	0x0808fd49
 8083b8c:	0808f58b 	.word	0x0808f58b
 8083b90:	0808f591 	.word	0x0808f591
 8083b94:	0808fd82 	.word	0x0808fd82
 8083b98:	080917cc 	.word	0x080917cc
 8083b9c:	0808fd9b 	.word	0x0808fd9b
 8083ba0:	0808f735 	.word	0x0808f735
 8083ba4:	0808f6b6 	.word	0x0808f6b6

08083ba8 <_Z19serialGetUpperLimitv>:

void serialGetUpperLimit(void)
{
 8083ba8:	b530      	push	{r4, r5, lr}
 8083baa:	b089      	sub	sp, #36	; 0x24
    Serial.println();
 8083bac:	f006 fa6e 	bl	808a08c <_Z16_fetch_usbserialv>
    Serial.print("Current upper limit:");
    Serial.println(gas_upper_limit);
 8083bb0:	4c35      	ldr	r4, [pc, #212]	; (8083c88 <_Z19serialGetUpperLimitv+0xe0>)
    }
}

void serialGetUpperLimit(void)
{
    Serial.println();
 8083bb2:	f005 fa2a 	bl	808900a <_ZN5Print7printlnEv>
    Serial.print("Current upper limit:");
 8083bb6:	f006 fa69 	bl	808a08c <_Z16_fetch_usbserialv>
 8083bba:	4934      	ldr	r1, [pc, #208]	; (8083c8c <_Z19serialGetUpperLimitv+0xe4>)
 8083bbc:	f005 fa1e 	bl	8088ffc <_ZN5Print5printEPKc>
    Serial.println(gas_upper_limit);
 8083bc0:	f006 fa64 	bl	808a08c <_Z16_fetch_usbserialv>
 8083bc4:	220a      	movs	r2, #10
 8083bc6:	6821      	ldr	r1, [r4, #0]
 8083bc8:	f005 fa99 	bl	80890fe <_ZN5Print7printlnEii>
    Serial.println("Please enter password in order to change the upper limit");
 8083bcc:	f006 fa5e 	bl	808a08c <_Z16_fetch_usbserialv>
 8083bd0:	492f      	ldr	r1, [pc, #188]	; (8083c90 <_Z19serialGetUpperLimitv+0xe8>)
 8083bd2:	f005 fa26 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8083bd6:	f006 fa59 	bl	808a08c <_Z16_fetch_usbserialv>
 8083bda:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083bde:	f005 fba4 	bl	808932a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083be2:	f006 fa53 	bl	808a08c <_Z16_fetch_usbserialv>
 8083be6:	220d      	movs	r2, #13
 8083be8:	4601      	mov	r1, r0
 8083bea:	4668      	mov	r0, sp
 8083bec:	f005 fbb4 	bl	8089358 <_ZN6Stream15readStringUntilEc>
 8083bf0:	4928      	ldr	r1, [pc, #160]	; (8083c94 <_Z19serialGetUpperLimitv+0xec>)
 8083bf2:	4668      	mov	r0, sp
 8083bf4:	f005 f96f 	bl	8088ed6 <_ZNK6String6equalsEPKc>

    if (tempString == "bould")
 8083bf8:	2800      	cmp	r0, #0
 8083bfa:	d03a      	beq.n	8083c72 <_Z19serialGetUpperLimitv+0xca>
    {
        Serial.println("Password correct!");
 8083bfc:	f006 fa46 	bl	808a08c <_Z16_fetch_usbserialv>
 8083c00:	4925      	ldr	r1, [pc, #148]	; (8083c98 <_Z19serialGetUpperLimitv+0xf0>)
 8083c02:	f005 fa0e 	bl	8089022 <_ZN5Print7printlnEPKc>
        Serial.println("Enter new upper limit:\n\r");
 8083c06:	f006 fa41 	bl	808a08c <_Z16_fetch_usbserialv>
 8083c0a:	4924      	ldr	r1, [pc, #144]	; (8083c9c <_Z19serialGetUpperLimitv+0xf4>)
 8083c0c:	f005 fa09 	bl	8089022 <_ZN5Print7printlnEPKc>
        String tempString = Serial.readStringUntil('\r');
 8083c10:	f006 fa3c 	bl	808a08c <_Z16_fetch_usbserialv>
 8083c14:	220d      	movs	r2, #13
 8083c16:	4601      	mov	r1, r0
 8083c18:	a804      	add	r0, sp, #16
 8083c1a:	f005 fb9d 	bl	8089358 <_ZN6Stream15readStringUntilEc>
        int tempValue = tempString.toInt();
 8083c1e:	a804      	add	r0, sp, #16
 8083c20:	f005 f99e 	bl	8088f60 <_ZNK6String5toIntEv>
 8083c24:	4605      	mov	r5, r0
        Serial.println("");
 8083c26:	f006 fa31 	bl	808a08c <_Z16_fetch_usbserialv>
 8083c2a:	491d      	ldr	r1, [pc, #116]	; (8083ca0 <_Z19serialGetUpperLimitv+0xf8>)
 8083c2c:	f005 f9f9 	bl	8089022 <_ZN5Print7printlnEPKc>
        if (tempValue > 0 && tempValue < 50000)
 8083c30:	f24c 334e 	movw	r3, #49998	; 0xc34e
 8083c34:	1e6a      	subs	r2, r5, #1
 8083c36:	429a      	cmp	r2, r3
 8083c38:	d812      	bhi.n	8083c60 <_Z19serialGetUpperLimitv+0xb8>
        {
            Serial.print("\n\rNew upper limit:");
 8083c3a:	f006 fa27 	bl	808a08c <_Z16_fetch_usbserialv>
 8083c3e:	4919      	ldr	r1, [pc, #100]	; (8083ca4 <_Z19serialGetUpperLimitv+0xfc>)
 8083c40:	f005 f9dc 	bl	8088ffc <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 8083c44:	f006 fa22 	bl	808a08c <_Z16_fetch_usbserialv>
 8083c48:	4629      	mov	r1, r5
 8083c4a:	220a      	movs	r2, #10
 8083c4c:	f005 fa57 	bl	80890fe <_ZN5Print7printlnEii>
            gas_upper_limit = tempValue;
 8083c50:	6025      	str	r5, [r4, #0]
            EEPROM.put(GAS_UPPER_LIMIT_MEM_ADDRESS, gas_upper_limit);
 8083c52:	f006 fcfb 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8083c56:	4621      	mov	r1, r4
 8083c58:	2050      	movs	r0, #80	; 0x50
 8083c5a:	f7fc feb2 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 8083c5e:	e004      	b.n	8083c6a <_Z19serialGetUpperLimitv+0xc2>
        }
        else
        {
            Serial.println("\n\rInvalid value!");
 8083c60:	f006 fa14 	bl	808a08c <_Z16_fetch_usbserialv>
 8083c64:	4910      	ldr	r1, [pc, #64]	; (8083ca8 <_Z19serialGetUpperLimitv+0x100>)
 8083c66:	f005 f9dc 	bl	8089022 <_ZN5Print7printlnEPKc>

    if (tempString == "bould")
    {
        Serial.println("Password correct!");
        Serial.println("Enter new upper limit:\n\r");
        String tempString = Serial.readStringUntil('\r');
 8083c6a:	a804      	add	r0, sp, #16
 8083c6c:	f004 ffd0 	bl	8088c10 <_ZN6StringD1Ev>
 8083c70:	e004      	b.n	8083c7c <_Z19serialGetUpperLimitv+0xd4>
            Serial.println("\n\rInvalid value!");
        }
    }
    else
    {
        Serial.println("\n\rIncorrect password!");
 8083c72:	f006 fa0b 	bl	808a08c <_Z16_fetch_usbserialv>
 8083c76:	490d      	ldr	r1, [pc, #52]	; (8083cac <_Z19serialGetUpperLimitv+0x104>)
 8083c78:	f005 f9d3 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println();
    Serial.print("Current upper limit:");
    Serial.println(gas_upper_limit);
    Serial.println("Please enter password in order to change the upper limit");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083c7c:	4668      	mov	r0, sp
 8083c7e:	f004 ffc7 	bl	8088c10 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rIncorrect password!");
    }
}
 8083c82:	b009      	add	sp, #36	; 0x24
 8083c84:	bd30      	pop	{r4, r5, pc}
 8083c86:	bf00      	nop
 8083c88:	2000008c 	.word	0x2000008c
 8083c8c:	0808fdae 	.word	0x0808fdae
 8083c90:	0808fdc3 	.word	0x0808fdc3
 8083c94:	0808f58b 	.word	0x0808f58b
 8083c98:	0808f591 	.word	0x0808f591
 8083c9c:	0808fdfc 	.word	0x0808fdfc
 8083ca0:	080917cc 	.word	0x080917cc
 8083ca4:	0808fe15 	.word	0x0808fe15
 8083ca8:	0808f735 	.word	0x0808f735
 8083cac:	0808f6b6 	.word	0x0808f6b6

08083cb0 <_Z23outputSerialMenuOptionsv>:
        Serial.printf("CO: %1.3f ppm\n\r", CO_float_A);
    }
}

void outputSerialMenuOptions(void)
{
 8083cb0:	b508      	push	{r3, lr}
    Serial.println("Command:  Description");
 8083cb2:	f006 f9eb 	bl	808a08c <_Z16_fetch_usbserialv>
 8083cb6:	49a2      	ldr	r1, [pc, #648]	; (8083f40 <_Z23outputSerialMenuOptionsv+0x290>)
 8083cb8:	f005 f9b3 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("a:  Adjust CO2 slope");
 8083cbc:	f006 f9e6 	bl	808a08c <_Z16_fetch_usbserialv>
 8083cc0:	49a0      	ldr	r1, [pc, #640]	; (8083f44 <_Z23outputSerialMenuOptionsv+0x294>)
 8083cc2:	f005 f9ae 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("b:  Adjust CO2 zero");
 8083cc6:	f006 f9e1 	bl	808a08c <_Z16_fetch_usbserialv>
 8083cca:	499f      	ldr	r1, [pc, #636]	; (8083f48 <_Z23outputSerialMenuOptionsv+0x298>)
 8083ccc:	f005 f9a9 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("c:  Adjust CO slope");
 8083cd0:	f006 f9dc 	bl	808a08c <_Z16_fetch_usbserialv>
 8083cd4:	499d      	ldr	r1, [pc, #628]	; (8083f4c <_Z23outputSerialMenuOptionsv+0x29c>)
 8083cd6:	f005 f9a4 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("d:  Adjust CO zero");
 8083cda:	f006 f9d7 	bl	808a08c <_Z16_fetch_usbserialv>
 8083cde:	499c      	ldr	r1, [pc, #624]	; (8083f50 <_Z23outputSerialMenuOptionsv+0x2a0>)
 8083ce0:	f005 f99f 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("e:  Adjust PM1 slope");
 8083ce4:	f006 f9d2 	bl	808a08c <_Z16_fetch_usbserialv>
 8083ce8:	499a      	ldr	r1, [pc, #616]	; (8083f54 <_Z23outputSerialMenuOptionsv+0x2a4>)
 8083cea:	f005 f99a 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("f:  Adjust PM1 zero");
 8083cee:	f006 f9cd 	bl	808a08c <_Z16_fetch_usbserialv>
 8083cf2:	4999      	ldr	r1, [pc, #612]	; (8083f58 <_Z23outputSerialMenuOptionsv+0x2a8>)
 8083cf4:	f005 f995 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("g:  Adjust PM2.5 slope");
 8083cf8:	f006 f9c8 	bl	808a08c <_Z16_fetch_usbserialv>
 8083cfc:	4997      	ldr	r1, [pc, #604]	; (8083f5c <_Z23outputSerialMenuOptionsv+0x2ac>)
 8083cfe:	f005 f990 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("h:  Adjust PM2.5 zero");
 8083d02:	f006 f9c3 	bl	808a08c <_Z16_fetch_usbserialv>
 8083d06:	4996      	ldr	r1, [pc, #600]	; (8083f60 <_Z23outputSerialMenuOptionsv+0x2b0>)
 8083d08:	f005 f98b 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("i:  Adjust PM10 slope");
 8083d0c:	f006 f9be 	bl	808a08c <_Z16_fetch_usbserialv>
 8083d10:	4994      	ldr	r1, [pc, #592]	; (8083f64 <_Z23outputSerialMenuOptionsv+0x2b4>)
 8083d12:	f005 f986 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("j:  Adjust PM10 zero");
 8083d16:	f006 f9b9 	bl	808a08c <_Z16_fetch_usbserialv>
 8083d1a:	4993      	ldr	r1, [pc, #588]	; (8083f68 <_Z23outputSerialMenuOptionsv+0x2b8>)
 8083d1c:	f005 f981 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("k:  Adjust Temperature slope");
 8083d20:	f006 f9b4 	bl	808a08c <_Z16_fetch_usbserialv>
 8083d24:	4991      	ldr	r1, [pc, #580]	; (8083f6c <_Z23outputSerialMenuOptionsv+0x2bc>)
 8083d26:	f005 f97c 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("l:  Adjust Temperature zero");
 8083d2a:	f006 f9af 	bl	808a08c <_Z16_fetch_usbserialv>
 8083d2e:	4990      	ldr	r1, [pc, #576]	; (8083f70 <_Z23outputSerialMenuOptionsv+0x2c0>)
 8083d30:	f005 f977 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("m:  Adjust Pressure slope");
 8083d34:	f006 f9aa 	bl	808a08c <_Z16_fetch_usbserialv>
 8083d38:	498e      	ldr	r1, [pc, #568]	; (8083f74 <_Z23outputSerialMenuOptionsv+0x2c4>)
 8083d3a:	f005 f972 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("n:  Adjust Pressure zero");
 8083d3e:	f006 f9a5 	bl	808a08c <_Z16_fetch_usbserialv>
 8083d42:	498d      	ldr	r1, [pc, #564]	; (8083f78 <_Z23outputSerialMenuOptionsv+0x2c8>)
 8083d44:	f005 f96d 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("o:  Adjust Humidity slope");
 8083d48:	f006 f9a0 	bl	808a08c <_Z16_fetch_usbserialv>
 8083d4c:	498b      	ldr	r1, [pc, #556]	; (8083f7c <_Z23outputSerialMenuOptionsv+0x2cc>)
 8083d4e:	f005 f968 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("p:  Adjust Humidity zero");
 8083d52:	f006 f99b 	bl	808a08c <_Z16_fetch_usbserialv>
 8083d56:	498a      	ldr	r1, [pc, #552]	; (8083f80 <_Z23outputSerialMenuOptionsv+0x2d0>)
 8083d58:	f005 f963 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("q:  Enable serial debugging");
 8083d5c:	f006 f996 	bl	808a08c <_Z16_fetch_usbserialv>
 8083d60:	4988      	ldr	r1, [pc, #544]	; (8083f84 <_Z23outputSerialMenuOptionsv+0x2d4>)
 8083d62:	f005 f95e 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("r:  Disable serial debugging");
 8083d66:	f006 f991 	bl	808a08c <_Z16_fetch_usbserialv>
 8083d6a:	4987      	ldr	r1, [pc, #540]	; (8083f88 <_Z23outputSerialMenuOptionsv+0x2d8>)
 8083d6c:	f005 f959 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("s:  Output header string");
 8083d70:	f006 f98c 	bl	808a08c <_Z16_fetch_usbserialv>
 8083d74:	4985      	ldr	r1, [pc, #532]	; (8083f8c <_Z23outputSerialMenuOptionsv+0x2dc>)
 8083d76:	f005 f954 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("t:  Enter new time and date");
 8083d7a:	f006 f987 	bl	808a08c <_Z16_fetch_usbserialv>
 8083d7e:	4984      	ldr	r1, [pc, #528]	; (8083f90 <_Z23outputSerialMenuOptionsv+0x2e0>)
 8083d80:	f005 f94f 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("u:  Enter new time zone");
 8083d84:	f006 f982 	bl	808a08c <_Z16_fetch_usbserialv>
 8083d88:	4982      	ldr	r1, [pc, #520]	; (8083f94 <_Z23outputSerialMenuOptionsv+0x2e4>)
 8083d8a:	f005 f94a 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("v:  Adjust the Device ID");
 8083d8e:	f006 f97d 	bl	808a08c <_Z16_fetch_usbserialv>
 8083d92:	4981      	ldr	r1, [pc, #516]	; (8083f98 <_Z23outputSerialMenuOptionsv+0x2e8>)
 8083d94:	f005 f945 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("w:  Get wifi credentials");
 8083d98:	f006 f978 	bl	808a08c <_Z16_fetch_usbserialv>
 8083d9c:	497f      	ldr	r1, [pc, #508]	; (8083f9c <_Z23outputSerialMenuOptionsv+0x2ec>)
 8083d9e:	f005 f940 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("y:  Enable cellular");
 8083da2:	f006 f973 	bl	808a08c <_Z16_fetch_usbserialv>
 8083da6:	497e      	ldr	r1, [pc, #504]	; (8083fa0 <_Z23outputSerialMenuOptionsv+0x2f0>)
 8083da8:	f005 f93b 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("z:  Disable cellular");
 8083dac:	f006 f96e 	bl	808a08c <_Z16_fetch_usbserialv>
 8083db0:	497c      	ldr	r1, [pc, #496]	; (8083fa4 <_Z23outputSerialMenuOptionsv+0x2f4>)
 8083db2:	f005 f936 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("1:  Adjust gas lower limit");
 8083db6:	f006 f969 	bl	808a08c <_Z16_fetch_usbserialv>
 8083dba:	497b      	ldr	r1, [pc, #492]	; (8083fa8 <_Z23outputSerialMenuOptionsv+0x2f8>)
 8083dbc:	f005 f931 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("2:  Adjust gas upper limit");
 8083dc0:	f006 f964 	bl	808a08c <_Z16_fetch_usbserialv>
 8083dc4:	4979      	ldr	r1, [pc, #484]	; (8083fac <_Z23outputSerialMenuOptionsv+0x2fc>)
 8083dc6:	f005 f92c 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("3:  Get build version");
 8083dca:	f006 f95f 	bl	808a08c <_Z16_fetch_usbserialv>
 8083dce:	4978      	ldr	r1, [pc, #480]	; (8083fb0 <_Z23outputSerialMenuOptionsv+0x300>)
 8083dd0:	f005 f927 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("4:  Enable Ozone");
 8083dd4:	f006 f95a 	bl	808a08c <_Z16_fetch_usbserialv>
 8083dd8:	4976      	ldr	r1, [pc, #472]	; (8083fb4 <_Z23outputSerialMenuOptionsv+0x304>)
 8083dda:	f005 f922 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("5:  Disable Ozone");
 8083dde:	f006 f955 	bl	808a08c <_Z16_fetch_usbserialv>
 8083de2:	4975      	ldr	r1, [pc, #468]	; (8083fb8 <_Z23outputSerialMenuOptionsv+0x308>)
 8083de4:	f005 f91d 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("6:  Enable VOC's");
 8083de8:	f006 f950 	bl	808a08c <_Z16_fetch_usbserialv>
 8083dec:	4973      	ldr	r1, [pc, #460]	; (8083fbc <_Z23outputSerialMenuOptionsv+0x30c>)
 8083dee:	f005 f918 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("7:  Disable VOC's");
 8083df2:	f006 f94b 	bl	808a08c <_Z16_fetch_usbserialv>
 8083df6:	4972      	ldr	r1, [pc, #456]	; (8083fc0 <_Z23outputSerialMenuOptionsv+0x310>)
 8083df8:	f005 f913 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("8:  Output the PMIC system configuration");
 8083dfc:	f006 f946 	bl	808a08c <_Z16_fetch_usbserialv>
 8083e00:	4970      	ldr	r1, [pc, #448]	; (8083fc4 <_Z23outputSerialMenuOptionsv+0x314>)
 8083e02:	f005 f90e 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("9:  Increase the charge current by 64 mA");
 8083e06:	f006 f941 	bl	808a08c <_Z16_fetch_usbserialv>
 8083e0a:	496f      	ldr	r1, [pc, #444]	; (8083fc8 <_Z23outputSerialMenuOptionsv+0x318>)
 8083e0c:	f005 f909 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("0:  Increase the current input limit by 100 mA");
 8083e10:	f006 f93c 	bl	808a08c <_Z16_fetch_usbserialv>
 8083e14:	496d      	ldr	r1, [pc, #436]	; (8083fcc <_Z23outputSerialMenuOptionsv+0x31c>)
 8083e16:	f005 f904 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("A:  Output CO constantly and rapidly");
 8083e1a:	f006 f937 	bl	808a08c <_Z16_fetch_usbserialv>
 8083e1e:	496c      	ldr	r1, [pc, #432]	; (8083fd0 <_Z23outputSerialMenuOptionsv+0x320>)
 8083e20:	f005 f8ff 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("B:  Output PM constantly and rapidly");
 8083e24:	f006 f932 	bl	808a08c <_Z16_fetch_usbserialv>
 8083e28:	496a      	ldr	r1, [pc, #424]	; (8083fd4 <_Z23outputSerialMenuOptionsv+0x324>)
 8083e2a:	f005 f8fa 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("C:  Change temperature units to Celsius");
 8083e2e:	f006 f92d 	bl	808a08c <_Z16_fetch_usbserialv>
 8083e32:	4969      	ldr	r1, [pc, #420]	; (8083fd8 <_Z23outputSerialMenuOptionsv+0x328>)
 8083e34:	f005 f8f5 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("D:  Disable TMP36 temperature sensor and use BME680 temperature");
 8083e38:	f006 f928 	bl	808a08c <_Z16_fetch_usbserialv>
 8083e3c:	4967      	ldr	r1, [pc, #412]	; (8083fdc <_Z23outputSerialMenuOptionsv+0x32c>)
 8083e3e:	f005 f8f0 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("E:  Enable TMP36 temperature sensor and disable BME680 temperature");
 8083e42:	f006 f923 	bl	808a08c <_Z16_fetch_usbserialv>
 8083e46:	4966      	ldr	r1, [pc, #408]	; (8083fe0 <_Z23outputSerialMenuOptionsv+0x330>)
 8083e48:	f005 f8eb 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("F:  Change temperature units to Fahrenheit");
 8083e4c:	f006 f91e 	bl	808a08c <_Z16_fetch_usbserialv>
 8083e50:	4964      	ldr	r1, [pc, #400]	; (8083fe4 <_Z23outputSerialMenuOptionsv+0x334>)
 8083e52:	f005 f8e6 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("G:  Read ozone from analog input (not digitally - board dependent)");
 8083e56:	f006 f919 	bl	808a08c <_Z16_fetch_usbserialv>
 8083e5a:	4963      	ldr	r1, [pc, #396]	; (8083fe8 <_Z23outputSerialMenuOptionsv+0x338>)
 8083e5c:	f005 f8e1 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("H:  Read ozone digitally (not through analog input - board dependent)");
 8083e60:	f006 f914 	bl	808a08c <_Z16_fetch_usbserialv>
 8083e64:	4961      	ldr	r1, [pc, #388]	; (8083fec <_Z23outputSerialMenuOptionsv+0x33c>)
 8083e66:	f005 f8dc 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("I:  Adjust frequency for uploading through cellular");
 8083e6a:	f006 f90f 	bl	808a08c <_Z16_fetch_usbserialv>
 8083e6e:	4960      	ldr	r1, [pc, #384]	; (8083ff0 <_Z23outputSerialMenuOptionsv+0x340>)
 8083e70:	f005 f8d7 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("J:  Reset ESP, CO2, Plantower");
 8083e74:	f006 f90a 	bl	808a08c <_Z16_fetch_usbserialv>
 8083e78:	495e      	ldr	r1, [pc, #376]	; (8083ff4 <_Z23outputSerialMenuOptionsv+0x344>)
 8083e7a:	f005 f8d2 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("K:  Continuous serial output of GPS");
 8083e7e:	f006 f905 	bl	808a08c <_Z16_fetch_usbserialv>
 8083e82:	495d      	ldr	r1, [pc, #372]	; (8083ff8 <_Z23outputSerialMenuOptionsv+0x348>)
 8083e84:	f005 f8cd 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("L:  Write default settings");
 8083e88:	f006 f900 	bl	808a08c <_Z16_fetch_usbserialv>
 8083e8c:	495b      	ldr	r1, [pc, #364]	; (8083ffc <_Z23outputSerialMenuOptionsv+0x34c>)
 8083e8e:	f005 f8c8 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("M:  Enable 20% battery threshold limiting");
 8083e92:	f006 f8fb 	bl	808a08c <_Z16_fetch_usbserialv>
 8083e96:	495a      	ldr	r1, [pc, #360]	; (8084000 <_Z23outputSerialMenuOptionsv+0x350>)
 8083e98:	f005 f8c3 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("N:  Disable 20% battery threshold limiting WARNING!!");
 8083e9c:	f006 f8f6 	bl	808a08c <_Z16_fetch_usbserialv>
 8083ea0:	4958      	ldr	r1, [pc, #352]	; (8084004 <_Z23outputSerialMenuOptionsv+0x354>)
 8083ea2:	f005 f8be 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("O:  Enable low power for GPS module");
 8083ea6:	f006 f8f1 	bl	808a08c <_Z16_fetch_usbserialv>
 8083eaa:	4957      	ldr	r1, [pc, #348]	; (8084008 <_Z23outputSerialMenuOptionsv+0x358>)
 8083eac:	f005 f8b9 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("P:  Turn off BATFET");
 8083eb0:	f006 f8ec 	bl	808a08c <_Z16_fetch_usbserialv>
 8083eb4:	4955      	ldr	r1, [pc, #340]	; (808400c <_Z23outputSerialMenuOptionsv+0x35c>)
 8083eb6:	f005 f8b4 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("Q:  Allow BATFET to turn on");
 8083eba:	f006 f8e7 	bl	808a08c <_Z16_fetch_usbserialv>
 8083ebe:	4954      	ldr	r1, [pc, #336]	; (8084010 <_Z23outputSerialMenuOptionsv+0x360>)
 8083ec0:	f005 f8af 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("R:  Disable ABC logic for CO2 sensor");
 8083ec4:	f006 f8e2 	bl	808a08c <_Z16_fetch_usbserialv>
 8083ec8:	4952      	ldr	r1, [pc, #328]	; (8084014 <_Z23outputSerialMenuOptionsv+0x364>)
 8083eca:	f005 f8aa 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("S:  Enable ABC logic for CO2 sensor");
 8083ece:	f006 f8dd 	bl	808a08c <_Z16_fetch_usbserialv>
 8083ed2:	4951      	ldr	r1, [pc, #324]	; (8084018 <_Z23outputSerialMenuOptionsv+0x368>)
 8083ed4:	f005 f8a5 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("T:  Enable/disable HIH8120 RH sensor");
 8083ed8:	f006 f8d8 	bl	808a08c <_Z16_fetch_usbserialv>
 8083edc:	494f      	ldr	r1, [pc, #316]	; (808401c <_Z23outputSerialMenuOptionsv+0x36c>)
 8083ede:	f005 f8a0 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("U:  Switch socket where CO is read from");
 8083ee2:	f006 f8d3 	bl	808a08c <_Z16_fetch_usbserialv>
 8083ee6:	494e      	ldr	r1, [pc, #312]	; (8084020 <_Z23outputSerialMenuOptionsv+0x370>)
 8083ee8:	f005 f89b 	bl	8089022 <_ZN5Print7printlnEPKc>

    Serial.println("W:  Enable/Disable google location services");
 8083eec:	f006 f8ce 	bl	808a08c <_Z16_fetch_usbserialv>
 8083ef0:	494c      	ldr	r1, [pc, #304]	; (8084024 <_Z23outputSerialMenuOptionsv+0x374>)
 8083ef2:	f005 f896 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("V:  Calibrate CO2 sensor - must supply ambient level (go outside!)");
 8083ef6:	f006 f8c9 	bl	808a08c <_Z16_fetch_usbserialv>
 8083efa:	494b      	ldr	r1, [pc, #300]	; (8084028 <_Z23outputSerialMenuOptionsv+0x378>)
 8083efc:	f005 f891 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("Z:  Output cellular information (CCID, IMEI, etc)");
 8083f00:	f006 f8c4 	bl	808a08c <_Z16_fetch_usbserialv>
 8083f04:	4949      	ldr	r1, [pc, #292]	; (808402c <_Z23outputSerialMenuOptionsv+0x37c>)
 8083f06:	f005 f88c 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("!:  Continuous serial output of VOC's");
 8083f0a:	f006 f8bf 	bl	808a08c <_Z16_fetch_usbserialv>
 8083f0e:	4948      	ldr	r1, [pc, #288]	; (8084030 <_Z23outputSerialMenuOptionsv+0x380>)
 8083f10:	f005 f887 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("@   Enable/Disable Sensible-iot data push.  If enabled, time zone will be ignored - UTC will be used.");
 8083f14:	f006 f8ba 	bl	808a08c <_Z16_fetch_usbserialv>
 8083f18:	4946      	ldr	r1, [pc, #280]	; (8084034 <_Z23outputSerialMenuOptionsv+0x384>)
 8083f1a:	f005 f882 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("#   Enable/Disable cartopper power mode.  If enabled, absence of external power will stop cellular.");
 8083f1e:	f006 f8b5 	bl	808a08c <_Z16_fetch_usbserialv>
 8083f22:	4945      	ldr	r1, [pc, #276]	; (8084038 <_Z23outputSerialMenuOptionsv+0x388>)
 8083f24:	f005 f87d 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("?:  Output this menu");
 8083f28:	f006 f8b0 	bl	808a08c <_Z16_fetch_usbserialv>
 8083f2c:	4943      	ldr	r1, [pc, #268]	; (808403c <_Z23outputSerialMenuOptionsv+0x38c>)
 8083f2e:	f005 f878 	bl	8089022 <_ZN5Print7printlnEPKc>
    Serial.println("x:  Exits this menu");
 8083f32:	f006 f8ab 	bl	808a08c <_Z16_fetch_usbserialv>
}
 8083f36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.println("Z:  Output cellular information (CCID, IMEI, etc)");
    Serial.println("!:  Continuous serial output of VOC's");
    Serial.println("@   Enable/Disable Sensible-iot data push.  If enabled, time zone will be ignored - UTC will be used.");
    Serial.println("#   Enable/Disable cartopper power mode.  If enabled, absence of external power will stop cellular.");
    Serial.println("?:  Output this menu");
    Serial.println("x:  Exits this menu");
 8083f3a:	4941      	ldr	r1, [pc, #260]	; (8084040 <_Z23outputSerialMenuOptionsv+0x390>)
 8083f3c:	f005 b871 	b.w	8089022 <_ZN5Print7printlnEPKc>
 8083f40:	0808fe28 	.word	0x0808fe28
 8083f44:	0808fe3e 	.word	0x0808fe3e
 8083f48:	0808fe53 	.word	0x0808fe53
 8083f4c:	0808fe67 	.word	0x0808fe67
 8083f50:	0808fe7b 	.word	0x0808fe7b
 8083f54:	0808fe8e 	.word	0x0808fe8e
 8083f58:	0808fea3 	.word	0x0808fea3
 8083f5c:	0808feb7 	.word	0x0808feb7
 8083f60:	0808fece 	.word	0x0808fece
 8083f64:	0808fee4 	.word	0x0808fee4
 8083f68:	0808fefa 	.word	0x0808fefa
 8083f6c:	0808ff0f 	.word	0x0808ff0f
 8083f70:	0808ff2c 	.word	0x0808ff2c
 8083f74:	0808ff48 	.word	0x0808ff48
 8083f78:	0808ff62 	.word	0x0808ff62
 8083f7c:	0808ff7b 	.word	0x0808ff7b
 8083f80:	0808ff95 	.word	0x0808ff95
 8083f84:	0808ffae 	.word	0x0808ffae
 8083f88:	0808ffca 	.word	0x0808ffca
 8083f8c:	0808ffe7 	.word	0x0808ffe7
 8083f90:	08090000 	.word	0x08090000
 8083f94:	0809001c 	.word	0x0809001c
 8083f98:	08090034 	.word	0x08090034
 8083f9c:	0809004d 	.word	0x0809004d
 8083fa0:	08090066 	.word	0x08090066
 8083fa4:	0809007a 	.word	0x0809007a
 8083fa8:	0809008f 	.word	0x0809008f
 8083fac:	080900aa 	.word	0x080900aa
 8083fb0:	080900c5 	.word	0x080900c5
 8083fb4:	080900db 	.word	0x080900db
 8083fb8:	080900ec 	.word	0x080900ec
 8083fbc:	080900fe 	.word	0x080900fe
 8083fc0:	0809010f 	.word	0x0809010f
 8083fc4:	08090121 	.word	0x08090121
 8083fc8:	0809014a 	.word	0x0809014a
 8083fcc:	08090173 	.word	0x08090173
 8083fd0:	080901a2 	.word	0x080901a2
 8083fd4:	080901c7 	.word	0x080901c7
 8083fd8:	080901ec 	.word	0x080901ec
 8083fdc:	08090214 	.word	0x08090214
 8083fe0:	08090254 	.word	0x08090254
 8083fe4:	08090297 	.word	0x08090297
 8083fe8:	080902c2 	.word	0x080902c2
 8083fec:	08090305 	.word	0x08090305
 8083ff0:	0809034b 	.word	0x0809034b
 8083ff4:	0809037f 	.word	0x0809037f
 8083ff8:	0809039d 	.word	0x0809039d
 8083ffc:	080903c1 	.word	0x080903c1
 8084000:	080903dc 	.word	0x080903dc
 8084004:	08090406 	.word	0x08090406
 8084008:	0809043b 	.word	0x0809043b
 808400c:	0809045f 	.word	0x0809045f
 8084010:	08090473 	.word	0x08090473
 8084014:	0809048f 	.word	0x0809048f
 8084018:	080904b4 	.word	0x080904b4
 808401c:	080904d8 	.word	0x080904d8
 8084020:	080904fd 	.word	0x080904fd
 8084024:	08090525 	.word	0x08090525
 8084028:	08090551 	.word	0x08090551
 808402c:	08090594 	.word	0x08090594
 8084030:	080905c6 	.word	0x080905c6
 8084034:	080905ec 	.word	0x080905ec
 8084038:	08090652 	.word	0x08090652
 808403c:	080906b6 	.word	0x080906b6
 8084040:	080906cb 	.word	0x080906cb

08084044 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8084044:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 8084046:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8084048:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 808404a:	b17c      	cbz	r4, 808406c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 808404c:	6863      	ldr	r3, [r4, #4]
 808404e:	3b01      	subs	r3, #1
 8084050:	6063      	str	r3, [r4, #4]
 8084052:	b95b      	cbnz	r3, 808406c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 8084054:	6823      	ldr	r3, [r4, #0]
 8084056:	4620      	mov	r0, r4
 8084058:	689b      	ldr	r3, [r3, #8]
 808405a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 808405c:	68a3      	ldr	r3, [r4, #8]
 808405e:	3b01      	subs	r3, #1
 8084060:	60a3      	str	r3, [r4, #8]
 8084062:	b91b      	cbnz	r3, 808406c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8084064:	6823      	ldr	r3, [r4, #0]
 8084066:	4620      	mov	r0, r4
 8084068:	68db      	ldr	r3, [r3, #12]
 808406a:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 808406c:	4628      	mov	r0, r5
 808406e:	bd38      	pop	{r3, r4, r5, pc}

08084070 <_Z13outputToCloud6StringS_>:
    Wire3.write(value);
    Wire3.endTransmission(true);
}

void outputToCloud(String data, String sensible_data)
{
 8084070:	b530      	push	{r4, r5, lr}
 8084072:	b08b      	sub	sp, #44	; 0x2c
    String webhook_data = " ";
 8084074:	4929      	ldr	r1, [pc, #164]	; (808411c <_Z13outputToCloud6StringS_+0xac>)
    Wire3.write(value);
    Wire3.endTransmission(true);
}

void outputToCloud(String data, String sensible_data)
{
 8084076:	4605      	mov	r5, r0
    String webhook_data = " ";
 8084078:	a802      	add	r0, sp, #8
 808407a:	f004 fe10 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808407e:	f004 fa5f 	bl	8088540 <spark_cloud_flag_connected>
 8084082:	4c27      	ldr	r4, [pc, #156]	; (8084120 <_Z13outputToCloud6StringS_+0xb0>)
 8084084:	4b27      	ldr	r3, [pc, #156]	; (8084124 <_Z13outputToCloud6StringS_+0xb4>)
    if(Particle.connected() && serial_cellular_enabled)
 8084086:	b108      	cbz	r0, 808408c <_Z13outputToCloud6StringS_+0x1c>
 8084088:	681a      	ldr	r2, [r3, #0]
 808408a:	bb2a      	cbnz	r2, 80840d8 <_Z13outputToCloud6StringS_+0x68>
            writeLogFile("Published pamup data!");
        }
    }
    else
    {
        if(serial_cellular_enabled == 0)
 808408c:	681b      	ldr	r3, [r3, #0]
 808408e:	b943      	cbnz	r3, 80840a2 <_Z13outputToCloud6StringS_+0x32>
        {
            if(debugging_enabled)
 8084090:	6823      	ldr	r3, [r4, #0]
 8084092:	b1e3      	cbz	r3, 80840ce <_Z13outputToCloud6StringS_+0x5e>
            {
                Serial.println("Cellular is disabled.");
 8084094:	f005 fffa 	bl	808a08c <_Z16_fetch_usbserialv>
 8084098:	4923      	ldr	r1, [pc, #140]	; (8084128 <_Z13outputToCloud6StringS_+0xb8>)
 808409a:	f004 ffc2 	bl	8089022 <_ZN5Print7printlnEPKc>
                writeLogFile("Cellular is disabled.");
 808409e:	4922      	ldr	r1, [pc, #136]	; (8084128 <_Z13outputToCloud6StringS_+0xb8>)
 80840a0:	e00c      	b.n	80840bc <_Z13outputToCloud6StringS_+0x4c>
            }
        }
        else
        {
            status_word.status_int &= 0xFFFD;   //clear the connected bit
 80840a2:	4a22      	ldr	r2, [pc, #136]	; (808412c <_Z13outputToCloud6StringS_+0xbc>)
 80840a4:	8813      	ldrh	r3, [r2, #0]
 80840a6:	f023 0302 	bic.w	r3, r3, #2
 80840aa:	8013      	strh	r3, [r2, #0]
            if(debugging_enabled)
 80840ac:	6823      	ldr	r3, [r4, #0]
 80840ae:	b173      	cbz	r3, 80840ce <_Z13outputToCloud6StringS_+0x5e>
            {
                Serial.println("Couldn't connect to particle.");
 80840b0:	f005 ffec 	bl	808a08c <_Z16_fetch_usbserialv>
 80840b4:	491e      	ldr	r1, [pc, #120]	; (8084130 <_Z13outputToCloud6StringS_+0xc0>)
 80840b6:	f004 ffb4 	bl	8089022 <_ZN5Print7printlnEPKc>
                writeLogFile("Couldn't connect to particle.");
 80840ba:	491d      	ldr	r1, [pc, #116]	; (8084130 <_Z13outputToCloud6StringS_+0xc0>)
 80840bc:	a806      	add	r0, sp, #24
 80840be:	f004 fdee 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
 80840c2:	a806      	add	r0, sp, #24
 80840c4:	f7fd fb2c 	bl	8081720 <_Z12writeLogFile6String>
 80840c8:	a806      	add	r0, sp, #24
 80840ca:	f004 fda1 	bl	8088c10 <_ZN6StringD1Ev>
    Wire3.endTransmission(true);
}

void outputToCloud(String data, String sensible_data)
{
    String webhook_data = " ";
 80840ce:	a802      	add	r0, sp, #8
 80840d0:	f004 fd9e 	bl	8088c10 <_ZN6StringD1Ev>
                Serial.println("Couldn't connect to particle.");
                writeLogFile("Couldn't connect to particle.");
            }
        }
    }
}
 80840d4:	b00b      	add	sp, #44	; 0x2c
 80840d6:	bd30      	pop	{r4, r5, pc}
void outputToCloud(String data, String sensible_data)
{
    String webhook_data = " ";
    if(Particle.connected() && serial_cellular_enabled)
    {
        status_word.status_int |= 0x0002;
 80840d8:	4a14      	ldr	r2, [pc, #80]	; (808412c <_Z13outputToCloud6StringS_+0xbc>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80840da:	4916      	ldr	r1, [pc, #88]	; (8084134 <_Z13outputToCloud6StringS_+0xc4>)
 80840dc:	8813      	ldrh	r3, [r2, #0]
 80840de:	a806      	add	r0, sp, #24
 80840e0:	f043 0302 	orr.w	r3, r3, #2
 80840e4:	8013      	strh	r3, [r2, #0]
 80840e6:	4b14      	ldr	r3, [pc, #80]	; (8084138 <_Z13outputToCloud6StringS_+0xc8>)
 80840e8:	682a      	ldr	r2, [r5, #0]
 80840ea:	781b      	ldrb	r3, [r3, #0]
 80840ec:	f88d 3000 	strb.w	r3, [sp]
 80840f0:	233c      	movs	r3, #60	; 0x3c
 80840f2:	f005 fd97 	bl	8089c24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80840f6:	a807      	add	r0, sp, #28
 80840f8:	f7ff ffa4 	bl	8084044 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80840fc:	f004 f814 	bl	8088128 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8084100:	4b0e      	ldr	r3, [pc, #56]	; (808413c <_Z13outputToCloud6StringS_+0xcc>)
 8084102:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 8084104:	f004 fa0c 	bl	8088520 <spark_process>
        Particle.publish("pamup", data, PRIVATE);
        Particle.process(); //attempt at ensuring the publish is complete before sleeping
        if(debugging_enabled)
 8084108:	6823      	ldr	r3, [r4, #0]
 808410a:	2b00      	cmp	r3, #0
 808410c:	d0df      	beq.n	80840ce <_Z13outputToCloud6StringS_+0x5e>
        {
            Serial.println("Published pamup data!");
 808410e:	f005 ffbd 	bl	808a08c <_Z16_fetch_usbserialv>
 8084112:	490b      	ldr	r1, [pc, #44]	; (8084140 <_Z13outputToCloud6StringS_+0xd0>)
 8084114:	f004 ff85 	bl	8089022 <_ZN5Print7printlnEPKc>
            writeLogFile("Published pamup data!");
 8084118:	4909      	ldr	r1, [pc, #36]	; (8084140 <_Z13outputToCloud6StringS_+0xd0>)
 808411a:	e7cf      	b.n	80840bc <_Z13outputToCloud6StringS_+0x4c>
 808411c:	08091166 	.word	0x08091166
 8084120:	20000acc 	.word	0x20000acc
 8084124:	20000214 	.word	0x20000214
 8084128:	080906f5 	.word	0x080906f5
 808412c:	20000b44 	.word	0x20000b44
 8084130:	0809070b 	.word	0x0809070b
 8084134:	08090729 	.word	0x08090729
 8084138:	200006e0 	.word	0x200006e0
 808413c:	20000cb0 	.word	0x20000cb0
 8084140:	080906df 	.word	0x080906df

08084144 <_Z15outputDataToESPv>:
        Serial.println("Unable to write to log file");
    }
}

void outputDataToESP(void)
{
 8084144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8084148:	b0dc      	sub	sp, #368	; 0x170
        int16_t myWord;
        unsigned char bytes[2];
    }wordBytes;

    //get a current time string
    time_t time = Time.now();
 808414a:	f005 fa70 	bl	808962e <_ZN9TimeClass3nowEv>
    Time.setFormat(TIME_FORMAT_ISO8601_FULL);
 808414e:	4bb3      	ldr	r3, [pc, #716]	; (808441c <_Z15outputDataToESPv+0x2d8>)

    //************Fill the cloud output array and file output array for row in csv file on usd card*****************************/
    //This is different than the ble packet in that we are putting all of the data that we have in one packet
    //"$1:D555g47.7M-22.050533C550.866638r1R1q2T45.8P844.9h17.2s1842.700000&"
    String cloud_output_string = "";    //create a clean string
 8084150:	49b3      	ldr	r1, [pc, #716]	; (8084420 <_Z15outputDataToESPv+0x2dc>)
            return format(now(), format_spec);
        }

        void setFormat(const char* format)
        {
            this->format_spec = format;
 8084152:	681a      	ldr	r2, [r3, #0]
 8084154:	4bb3      	ldr	r3, [pc, #716]	; (8084424 <_Z15outputDataToESPv+0x2e0>)
        int16_t myWord;
        unsigned char bytes[2];
    }wordBytes;

    //get a current time string
    time_t time = Time.now();
 8084156:	4606      	mov	r6, r0
    Time.setFormat(TIME_FORMAT_ISO8601_FULL);

    //************Fill the cloud output array and file output array for row in csv file on usd card*****************************/
    //This is different than the ble packet in that we are putting all of the data that we have in one packet
    //"$1:D555g47.7M-22.050533C550.866638r1R1q2T45.8P844.9h17.2s1842.700000&"
    String cloud_output_string = "";    //create a clean string
 8084158:	a803      	add	r0, sp, #12
 808415a:	601a      	str	r2, [r3, #0]
 808415c:	f004 fd9f 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
    String csv_output_string = "";
 8084160:	49af      	ldr	r1, [pc, #700]	; (8084420 <_Z15outputDataToESPv+0x2dc>)
 8084162:	a807      	add	r0, sp, #28
 8084164:	f004 fd9b 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
    String sensible_string = "";
 8084168:	49ad      	ldr	r1, [pc, #692]	; (8084420 <_Z15outputDataToESPv+0x2dc>)
 808416a:	a80b      	add	r0, sp, #44	; 0x2c
 808416c:	f004 fd97 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
    String latitude_string = "";
 8084170:	49ab      	ldr	r1, [pc, #684]	; (8084420 <_Z15outputDataToESPv+0x2dc>)
 8084172:	a80f      	add	r0, sp, #60	; 0x3c
 8084174:	f004 fd93 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
    String longitude_string = "";
 8084178:	49a9      	ldr	r1, [pc, #676]	; (8084420 <_Z15outputDataToESPv+0x2dc>)
 808417a:	a813      	add	r0, sp, #76	; 0x4c
 808417c:	f004 fd8f 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
 8084180:	215e      	movs	r1, #94	; 0x5e
 8084182:	a803      	add	r0, sp, #12
 8084184:	f004 fe7c 	bl	8088e80 <_ZN6String6concatEc>

    cloud_output_string += '^';         //start delimeter
    cloud_output_string += String(1) + ";";           //header
 8084188:	220a      	movs	r2, #10
 808418a:	2101      	movs	r1, #1
 808418c:	a81b      	add	r0, sp, #108	; 0x6c
 808418e:	f004 fdfa 	bl	8088d86 <_ZN6StringC1Eih>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084192:	a91b      	add	r1, sp, #108	; 0x6c
 8084194:	a81f      	add	r0, sp, #124	; 0x7c
 8084196:	f004 fdc1 	bl	8088d1c <_ZN6StringC1ERKS_>
 808419a:	49a3      	ldr	r1, [pc, #652]	; (8084428 <_Z15outputDataToESPv+0x2e4>)
 808419c:	a81f      	add	r0, sp, #124	; 0x7c
 808419e:	f004 fe88 	bl	8088eb2 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80841a2:	4601      	mov	r1, r0
 80841a4:	a803      	add	r0, sp, #12
 80841a6:	f004 fe58 	bl	8088e5a <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80841aa:	a81f      	add	r0, sp, #124	; 0x7c
 80841ac:	f004 fd30 	bl	8088c10 <_ZN6StringD1Ev>
 80841b0:	a81b      	add	r0, sp, #108	; 0x6c
 80841b2:	f004 fd2d 	bl	8088c10 <_ZN6StringD1Ev>
    cloud_output_string += String(DEVICE_ID_PACKET_CONSTANT) + String(DEVICE_id);   //device id
 80841b6:	4c9d      	ldr	r4, [pc, #628]	; (808442c <_Z15outputDataToESPv+0x2e8>)
 80841b8:	215a      	movs	r1, #90	; 0x5a
 80841ba:	a817      	add	r0, sp, #92	; 0x5c
 80841bc:	f004 fdd2 	bl	8088d64 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80841c0:	a917      	add	r1, sp, #92	; 0x5c
 80841c2:	a81f      	add	r0, sp, #124	; 0x7c
 80841c4:	f004 fdaa 	bl	8088d1c <_ZN6StringC1ERKS_>
 80841c8:	220a      	movs	r2, #10
 80841ca:	6821      	ldr	r1, [r4, #0]
 80841cc:	a81b      	add	r0, sp, #108	; 0x6c
 80841ce:	f004 fdda 	bl	8088d86 <_ZN6StringC1Eih>
 80841d2:	a91b      	add	r1, sp, #108	; 0x6c
 80841d4:	a81f      	add	r0, sp, #124	; 0x7c
 80841d6:	f004 fe60 	bl	8088e9a <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80841da:	4601      	mov	r1, r0
 80841dc:	a803      	add	r0, sp, #12
 80841de:	f004 fe3c 	bl	8088e5a <_ZN6String6concatERKS_>
 80841e2:	a81b      	add	r0, sp, #108	; 0x6c
 80841e4:	f004 fd14 	bl	8088c10 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80841e8:	a81f      	add	r0, sp, #124	; 0x7c
 80841ea:	f004 fd11 	bl	8088c10 <_ZN6StringD1Ev>
 80841ee:	a817      	add	r0, sp, #92	; 0x5c
 80841f0:	f004 fd0e 	bl	8088c10 <_ZN6StringD1Ev>
    csv_output_string += String(DEVICE_id) + ",";
 80841f4:	220a      	movs	r2, #10
 80841f6:	6821      	ldr	r1, [r4, #0]
 80841f8:	a81b      	add	r0, sp, #108	; 0x6c
 80841fa:	f004 fdc4 	bl	8088d86 <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80841fe:	a91b      	add	r1, sp, #108	; 0x6c
 8084200:	a81f      	add	r0, sp, #124	; 0x7c
 8084202:	f004 fd8b 	bl	8088d1c <_ZN6StringC1ERKS_>
 8084206:	498a      	ldr	r1, [pc, #552]	; (8084430 <_Z15outputDataToESPv+0x2ec>)
 8084208:	a81f      	add	r0, sp, #124	; 0x7c
 808420a:	f004 fe52 	bl	8088eb2 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808420e:	4601      	mov	r1, r0
 8084210:	a807      	add	r0, sp, #28
 8084212:	f004 fe22 	bl	8088e5a <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084216:	a81f      	add	r0, sp, #124	; 0x7c
 8084218:	f004 fcfa 	bl	8088c10 <_ZN6StringD1Ev>
 808421c:	a81b      	add	r0, sp, #108	; 0x6c
 808421e:	f004 fcf7 	bl	8088c10 <_ZN6StringD1Ev>

    cloud_output_string += String(CARBON_MONOXIDE_PACKET_CONSTANT) + String(CO_float_A, 3);
 8084222:	4c84      	ldr	r4, [pc, #528]	; (8084434 <_Z15outputDataToESPv+0x2f0>)
 8084224:	214d      	movs	r1, #77	; 0x4d
 8084226:	a817      	add	r0, sp, #92	; 0x5c
 8084228:	f004 fd9c 	bl	8088d64 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 808422c:	a917      	add	r1, sp, #92	; 0x5c
 808422e:	a81f      	add	r0, sp, #124	; 0x7c
 8084230:	f004 fd74 	bl	8088d1c <_ZN6StringC1ERKS_>
 8084234:	2203      	movs	r2, #3
 8084236:	6821      	ldr	r1, [r4, #0]
 8084238:	a81b      	add	r0, sp, #108	; 0x6c
 808423a:	f004 fdca 	bl	8088dd2 <_ZN6StringC1Efi>
 808423e:	a91b      	add	r1, sp, #108	; 0x6c
 8084240:	a81f      	add	r0, sp, #124	; 0x7c
 8084242:	f004 fe2a 	bl	8088e9a <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084246:	4601      	mov	r1, r0
 8084248:	a803      	add	r0, sp, #12
 808424a:	f004 fe06 	bl	8088e5a <_ZN6String6concatERKS_>
 808424e:	a81b      	add	r0, sp, #108	; 0x6c
 8084250:	f004 fcde 	bl	8088c10 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084254:	a81f      	add	r0, sp, #124	; 0x7c
 8084256:	f004 fcdb 	bl	8088c10 <_ZN6StringD1Ev>
 808425a:	a817      	add	r0, sp, #92	; 0x5c
 808425c:	f004 fcd8 	bl	8088c10 <_ZN6StringD1Ev>
    csv_output_string += String(CO_float_A, 3) + ",";
 8084260:	2203      	movs	r2, #3
 8084262:	6821      	ldr	r1, [r4, #0]
 8084264:	a81b      	add	r0, sp, #108	; 0x6c
 8084266:	f004 fdb4 	bl	8088dd2 <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 808426a:	a91b      	add	r1, sp, #108	; 0x6c
 808426c:	a81f      	add	r0, sp, #124	; 0x7c
 808426e:	f004 fd55 	bl	8088d1c <_ZN6StringC1ERKS_>
 8084272:	496f      	ldr	r1, [pc, #444]	; (8084430 <_Z15outputDataToESPv+0x2ec>)
 8084274:	a81f      	add	r0, sp, #124	; 0x7c
 8084276:	f004 fe1c 	bl	8088eb2 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808427a:	4601      	mov	r1, r0
 808427c:	a807      	add	r0, sp, #28
 808427e:	f004 fdec 	bl	8088e5a <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084282:	a81f      	add	r0, sp, #124	; 0x7c
 8084284:	f004 fcc4 	bl	8088c10 <_ZN6StringD1Ev>
 8084288:	a81b      	add	r0, sp, #108	; 0x6c
 808428a:	f004 fcc1 	bl	8088c10 <_ZN6StringD1Ev>

    csv_output_string += String(CO_float_B, 3) + ",";
 808428e:	4b6a      	ldr	r3, [pc, #424]	; (8084438 <_Z15outputDataToESPv+0x2f4>)
 8084290:	2203      	movs	r2, #3
 8084292:	6819      	ldr	r1, [r3, #0]
 8084294:	a81b      	add	r0, sp, #108	; 0x6c
 8084296:	f004 fd9c 	bl	8088dd2 <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 808429a:	a91b      	add	r1, sp, #108	; 0x6c
 808429c:	a81f      	add	r0, sp, #124	; 0x7c
 808429e:	f004 fd3d 	bl	8088d1c <_ZN6StringC1ERKS_>
 80842a2:	4963      	ldr	r1, [pc, #396]	; (8084430 <_Z15outputDataToESPv+0x2ec>)
 80842a4:	a81f      	add	r0, sp, #124	; 0x7c
 80842a6:	f004 fe04 	bl	8088eb2 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80842aa:	4601      	mov	r1, r0
 80842ac:	a807      	add	r0, sp, #28
 80842ae:	f004 fdd4 	bl	8088e5a <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80842b2:	a81f      	add	r0, sp, #124	; 0x7c
 80842b4:	f004 fcac 	bl	8088c10 <_ZN6StringD1Ev>
 80842b8:	a81b      	add	r0, sp, #108	; 0x6c
 80842ba:	f004 fca9 	bl	8088c10 <_ZN6StringD1Ev>

    cloud_output_string += String(LATITUDE_PACKET_CONSTANT);
 80842be:	2161      	movs	r1, #97	; 0x61
 80842c0:	a81f      	add	r0, sp, #124	; 0x7c
 80842c2:	f004 fd4f 	bl	8088d64 <_ZN6StringC1Ec>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80842c6:	a91f      	add	r1, sp, #124	; 0x7c
 80842c8:	a803      	add	r0, sp, #12
 80842ca:	f004 fdc6 	bl	8088e5a <_ZN6String6concatERKS_>
 80842ce:	a81f      	add	r0, sp, #124	; 0x7c
 80842d0:	f004 fc9e 	bl	8088c10 <_ZN6StringD1Ev>

    if (gps.get_latitude() != 0)
 80842d4:	4859      	ldr	r0, [pc, #356]	; (808443c <_Z15outputDataToESPv+0x2f8>)
 80842d6:	f001 fee9 	bl	80860ac <_ZN3GPS12get_latitudeEv>
 80842da:	2200      	movs	r2, #0
 80842dc:	2300      	movs	r3, #0
 80842de:	f006 ff93 	bl	808b208 <__aeabi_dcmpeq>
 80842e2:	2800      	cmp	r0, #0
 80842e4:	d131      	bne.n	808434a <_Z15outputDataToESPv+0x206>
    {
        if (gps.get_nsIndicator() == 0)
 80842e6:	4855      	ldr	r0, [pc, #340]	; (808443c <_Z15outputDataToESPv+0x2f8>)
 80842e8:	f001 fefb 	bl	80860e2 <_ZN3GPS15get_nsIndicatorEv>
 80842ec:	b938      	cbnz	r0, 80842fe <_Z15outputDataToESPv+0x1ba>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 80842ee:	4954      	ldr	r1, [pc, #336]	; (8084440 <_Z15outputDataToESPv+0x2fc>)
 80842f0:	a807      	add	r0, sp, #28
 80842f2:	f004 fdb6 	bl	8088e62 <_ZN6String6concatEPKc>
 80842f6:	4952      	ldr	r1, [pc, #328]	; (8084440 <_Z15outputDataToESPv+0x2fc>)
 80842f8:	a803      	add	r0, sp, #12
 80842fa:	f004 fdb2 	bl	8088e62 <_ZN6String6concatEPKc>
        {
            csv_output_string += "-";
            cloud_output_string += "-";
        }
        csv_output_string += String(gps.get_latitude()) + ",";
 80842fe:	484f      	ldr	r0, [pc, #316]	; (808443c <_Z15outputDataToESPv+0x2f8>)
 8084300:	f001 fed4 	bl	80860ac <_ZN3GPS12get_latitudeEv>
 8084304:	2406      	movs	r4, #6
 8084306:	4602      	mov	r2, r0
 8084308:	460b      	mov	r3, r1
 808430a:	9400      	str	r4, [sp, #0]
 808430c:	a81b      	add	r0, sp, #108	; 0x6c
 808430e:	f004 fd77 	bl	8088e00 <_ZN6StringC1Edi>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084312:	a91b      	add	r1, sp, #108	; 0x6c
 8084314:	a81f      	add	r0, sp, #124	; 0x7c
 8084316:	f004 fd01 	bl	8088d1c <_ZN6StringC1ERKS_>
 808431a:	4945      	ldr	r1, [pc, #276]	; (8084430 <_Z15outputDataToESPv+0x2ec>)
 808431c:	a81f      	add	r0, sp, #124	; 0x7c
 808431e:	f004 fdc8 	bl	8088eb2 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084322:	4601      	mov	r1, r0
 8084324:	a807      	add	r0, sp, #28
 8084326:	f004 fd98 	bl	8088e5a <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808432a:	a81f      	add	r0, sp, #124	; 0x7c
 808432c:	f004 fc70 	bl	8088c10 <_ZN6StringD1Ev>
 8084330:	a81b      	add	r0, sp, #108	; 0x6c
 8084332:	f004 fc6d 	bl	8088c10 <_ZN6StringD1Ev>
        cloud_output_string += String(gps.get_latitude());
 8084336:	4841      	ldr	r0, [pc, #260]	; (808443c <_Z15outputDataToESPv+0x2f8>)
 8084338:	f001 feb8 	bl	80860ac <_ZN3GPS12get_latitudeEv>
 808433c:	9400      	str	r4, [sp, #0]
 808433e:	4602      	mov	r2, r0
 8084340:	460b      	mov	r3, r1
 8084342:	a81f      	add	r0, sp, #124	; 0x7c
 8084344:	f004 fd5c 	bl	8088e00 <_ZN6StringC1Edi>
 8084348:	e019      	b.n	808437e <_Z15outputDataToESPv+0x23a>
    }
    else
    {
        csv_output_string += String(geolocation_latitude) + ",";
 808434a:	493e      	ldr	r1, [pc, #248]	; (8084444 <_Z15outputDataToESPv+0x300>)
 808434c:	a81b      	add	r0, sp, #108	; 0x6c
 808434e:	f004 fca6 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084352:	a91b      	add	r1, sp, #108	; 0x6c
 8084354:	a81f      	add	r0, sp, #124	; 0x7c
 8084356:	f004 fce1 	bl	8088d1c <_ZN6StringC1ERKS_>
 808435a:	4935      	ldr	r1, [pc, #212]	; (8084430 <_Z15outputDataToESPv+0x2ec>)
 808435c:	a81f      	add	r0, sp, #124	; 0x7c
 808435e:	f004 fda8 	bl	8088eb2 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084362:	4601      	mov	r1, r0
 8084364:	a807      	add	r0, sp, #28
 8084366:	f004 fd78 	bl	8088e5a <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808436a:	a81f      	add	r0, sp, #124	; 0x7c
 808436c:	f004 fc50 	bl	8088c10 <_ZN6StringD1Ev>
 8084370:	a81b      	add	r0, sp, #108	; 0x6c
 8084372:	f004 fc4d 	bl	8088c10 <_ZN6StringD1Ev>
        cloud_output_string += String(geolocation_latitude);
 8084376:	4933      	ldr	r1, [pc, #204]	; (8084444 <_Z15outputDataToESPv+0x300>)
 8084378:	a81f      	add	r0, sp, #124	; 0x7c
 808437a:	f004 fc90 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808437e:	a91f      	add	r1, sp, #124	; 0x7c
 8084380:	a803      	add	r0, sp, #12
 8084382:	f004 fd6a 	bl	8088e5a <_ZN6String6concatERKS_>
 8084386:	a81f      	add	r0, sp, #124	; 0x7c
 8084388:	f004 fc42 	bl	8088c10 <_ZN6StringD1Ev>
    }

    cloud_output_string += String(LONGITUDE_PACKET_CONSTANT);
 808438c:	216f      	movs	r1, #111	; 0x6f
 808438e:	a81f      	add	r0, sp, #124	; 0x7c
 8084390:	f004 fce8 	bl	8088d64 <_ZN6StringC1Ec>
 8084394:	a91f      	add	r1, sp, #124	; 0x7c
 8084396:	a803      	add	r0, sp, #12
 8084398:	f004 fd5f 	bl	8088e5a <_ZN6String6concatERKS_>
 808439c:	a81f      	add	r0, sp, #124	; 0x7c
 808439e:	f004 fc37 	bl	8088c10 <_ZN6StringD1Ev>

    if (gps.get_longitude() != 0)
 80843a2:	4826      	ldr	r0, [pc, #152]	; (808443c <_Z15outputDataToESPv+0x2f8>)
 80843a4:	f001 fe87 	bl	80860b6 <_ZN3GPS13get_longitudeEv>
 80843a8:	2200      	movs	r2, #0
 80843aa:	2300      	movs	r3, #0
 80843ac:	f006 ff2c 	bl	808b208 <__aeabi_dcmpeq>
 80843b0:	2800      	cmp	r0, #0
 80843b2:	d149      	bne.n	8084448 <_Z15outputDataToESPv+0x304>
    {
        if (gps.get_ewIndicator() == 0x01)
 80843b4:	4821      	ldr	r0, [pc, #132]	; (808443c <_Z15outputDataToESPv+0x2f8>)
 80843b6:	f001 fe97 	bl	80860e8 <_ZN3GPS15get_ewIndicatorEv>
 80843ba:	2801      	cmp	r0, #1
 80843bc:	d107      	bne.n	80843ce <_Z15outputDataToESPv+0x28a>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 80843be:	4920      	ldr	r1, [pc, #128]	; (8084440 <_Z15outputDataToESPv+0x2fc>)
 80843c0:	a807      	add	r0, sp, #28
 80843c2:	f004 fd4e 	bl	8088e62 <_ZN6String6concatEPKc>
 80843c6:	491e      	ldr	r1, [pc, #120]	; (8084440 <_Z15outputDataToESPv+0x2fc>)
 80843c8:	a803      	add	r0, sp, #12
 80843ca:	f004 fd4a 	bl	8088e62 <_ZN6String6concatEPKc>
        {
            csv_output_string += "-";
            cloud_output_string += "-";
        }
        csv_output_string += String(gps.get_longitude()) + ",";
 80843ce:	481b      	ldr	r0, [pc, #108]	; (808443c <_Z15outputDataToESPv+0x2f8>)
 80843d0:	f001 fe71 	bl	80860b6 <_ZN3GPS13get_longitudeEv>
 80843d4:	2406      	movs	r4, #6
 80843d6:	4602      	mov	r2, r0
 80843d8:	460b      	mov	r3, r1
 80843da:	9400      	str	r4, [sp, #0]
 80843dc:	a81b      	add	r0, sp, #108	; 0x6c
 80843de:	f004 fd0f 	bl	8088e00 <_ZN6StringC1Edi>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80843e2:	a91b      	add	r1, sp, #108	; 0x6c
 80843e4:	a81f      	add	r0, sp, #124	; 0x7c
 80843e6:	f004 fc99 	bl	8088d1c <_ZN6StringC1ERKS_>
 80843ea:	4911      	ldr	r1, [pc, #68]	; (8084430 <_Z15outputDataToESPv+0x2ec>)
 80843ec:	a81f      	add	r0, sp, #124	; 0x7c
 80843ee:	f004 fd60 	bl	8088eb2 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80843f2:	4601      	mov	r1, r0
 80843f4:	a807      	add	r0, sp, #28
 80843f6:	f004 fd30 	bl	8088e5a <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80843fa:	a81f      	add	r0, sp, #124	; 0x7c
 80843fc:	f004 fc08 	bl	8088c10 <_ZN6StringD1Ev>
 8084400:	a81b      	add	r0, sp, #108	; 0x6c
 8084402:	f004 fc05 	bl	8088c10 <_ZN6StringD1Ev>
        cloud_output_string += String(gps.get_longitude());
 8084406:	480d      	ldr	r0, [pc, #52]	; (808443c <_Z15outputDataToESPv+0x2f8>)
 8084408:	f001 fe55 	bl	80860b6 <_ZN3GPS13get_longitudeEv>
 808440c:	9400      	str	r4, [sp, #0]
 808440e:	4602      	mov	r2, r0
 8084410:	460b      	mov	r3, r1
 8084412:	a81f      	add	r0, sp, #124	; 0x7c
 8084414:	f004 fcf4 	bl	8088e00 <_ZN6StringC1Edi>
 8084418:	e030      	b.n	808447c <_Z15outputDataToESPv+0x338>
 808441a:	bf00      	nop
 808441c:	200000d4 	.word	0x200000d4
 8084420:	080917cc 	.word	0x080917cc
 8084424:	20000bd0 	.word	0x20000bd0
 8084428:	0809072f 	.word	0x0809072f
 808442c:	20000088 	.word	0x20000088
 8084430:	0809139e 	.word	0x0809139e
 8084434:	20000770 	.word	0x20000770
 8084438:	20000aa0 	.word	0x20000aa0
 808443c:	20000938 	.word	0x20000938
 8084440:	0808f4cb 	.word	0x0808f4cb
 8084444:	200000a8 	.word	0x200000a8
    }
    else
    {
        csv_output_string += String(geolocation_longitude) + ",";
 8084448:	4933      	ldr	r1, [pc, #204]	; (8084518 <_Z15outputDataToESPv+0x3d4>)
 808444a:	a81b      	add	r0, sp, #108	; 0x6c
 808444c:	f004 fc27 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084450:	a91b      	add	r1, sp, #108	; 0x6c
 8084452:	a81f      	add	r0, sp, #124	; 0x7c
 8084454:	f004 fc62 	bl	8088d1c <_ZN6StringC1ERKS_>
 8084458:	4930      	ldr	r1, [pc, #192]	; (808451c <_Z15outputDataToESPv+0x3d8>)
 808445a:	a81f      	add	r0, sp, #124	; 0x7c
 808445c:	f004 fd29 	bl	8088eb2 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084460:	4601      	mov	r1, r0
 8084462:	a807      	add	r0, sp, #28
 8084464:	f004 fcf9 	bl	8088e5a <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084468:	a81f      	add	r0, sp, #124	; 0x7c
 808446a:	f004 fbd1 	bl	8088c10 <_ZN6StringD1Ev>
 808446e:	a81b      	add	r0, sp, #108	; 0x6c
 8084470:	f004 fbce 	bl	8088c10 <_ZN6StringD1Ev>
        cloud_output_string += String(geolocation_longitude);
 8084474:	4928      	ldr	r1, [pc, #160]	; (8084518 <_Z15outputDataToESPv+0x3d4>)
 8084476:	a81f      	add	r0, sp, #124	; 0x7c
 8084478:	f004 fc11 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808447c:	a91f      	add	r1, sp, #124	; 0x7c
 808447e:	a803      	add	r0, sp, #12
 8084480:	f004 fceb 	bl	8088e5a <_ZN6String6concatERKS_>
 8084484:	a81f      	add	r0, sp, #124	; 0x7c
 8084486:	f004 fbc3 	bl	8088c10 <_ZN6StringD1Ev>
    }

    cloud_output_string += String(ACCURACY_PACKET_CONSTANT);
 808448a:	2163      	movs	r1, #99	; 0x63
 808448c:	a81f      	add	r0, sp, #124	; 0x7c
 808448e:	f004 fc69 	bl	8088d64 <_ZN6StringC1Ec>
 8084492:	a91f      	add	r1, sp, #124	; 0x7c
 8084494:	a803      	add	r0, sp, #12
 8084496:	f004 fce0 	bl	8088e5a <_ZN6String6concatERKS_>
 808449a:	a81f      	add	r0, sp, #124	; 0x7c
 808449c:	f004 fbb8 	bl	8088c10 <_ZN6StringD1Ev>
    if (gps.get_longitude() != 0)
 80844a0:	481f      	ldr	r0, [pc, #124]	; (8084520 <_Z15outputDataToESPv+0x3dc>)
 80844a2:	f001 fe08 	bl	80860b6 <_ZN3GPS13get_longitudeEv>
 80844a6:	2200      	movs	r2, #0
 80844a8:	2300      	movs	r3, #0
 80844aa:	f006 fead 	bl	808b208 <__aeabi_dcmpeq>
 80844ae:	2800      	cmp	r0, #0
 80844b0:	d13a      	bne.n	8084528 <_Z15outputDataToESPv+0x3e4>
    {
        csv_output_string += String(gps.get_horizontalDilution() / 10.0) + ",";
 80844b2:	481b      	ldr	r0, [pc, #108]	; (8084520 <_Z15outputDataToESPv+0x3dc>)
 80844b4:	f001 fe04 	bl	80860c0 <_ZN3GPS22get_horizontalDilutionEv>
 80844b8:	f006 fbd8 	bl	808ac6c <__aeabi_i2d>
 80844bc:	2200      	movs	r2, #0
 80844be:	4b19      	ldr	r3, [pc, #100]	; (8084524 <_Z15outputDataToESPv+0x3e0>)
 80844c0:	f006 fd64 	bl	808af8c <__aeabi_ddiv>
 80844c4:	2406      	movs	r4, #6
 80844c6:	4602      	mov	r2, r0
 80844c8:	460b      	mov	r3, r1
 80844ca:	9400      	str	r4, [sp, #0]
 80844cc:	a81b      	add	r0, sp, #108	; 0x6c
 80844ce:	f004 fc97 	bl	8088e00 <_ZN6StringC1Edi>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80844d2:	a91b      	add	r1, sp, #108	; 0x6c
 80844d4:	a81f      	add	r0, sp, #124	; 0x7c
 80844d6:	f004 fc21 	bl	8088d1c <_ZN6StringC1ERKS_>
 80844da:	4910      	ldr	r1, [pc, #64]	; (808451c <_Z15outputDataToESPv+0x3d8>)
 80844dc:	a81f      	add	r0, sp, #124	; 0x7c
 80844de:	f004 fce8 	bl	8088eb2 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80844e2:	4601      	mov	r1, r0
 80844e4:	a807      	add	r0, sp, #28
 80844e6:	f004 fcb8 	bl	8088e5a <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80844ea:	a81f      	add	r0, sp, #124	; 0x7c
 80844ec:	f004 fb90 	bl	8088c10 <_ZN6StringD1Ev>
 80844f0:	a81b      	add	r0, sp, #108	; 0x6c
 80844f2:	f004 fb8d 	bl	8088c10 <_ZN6StringD1Ev>
        cloud_output_string += String(gps.get_horizontalDilution() / 10.0);
 80844f6:	480a      	ldr	r0, [pc, #40]	; (8084520 <_Z15outputDataToESPv+0x3dc>)
 80844f8:	f001 fde2 	bl	80860c0 <_ZN3GPS22get_horizontalDilutionEv>
 80844fc:	f006 fbb6 	bl	808ac6c <__aeabi_i2d>
 8084500:	2200      	movs	r2, #0
 8084502:	4b08      	ldr	r3, [pc, #32]	; (8084524 <_Z15outputDataToESPv+0x3e0>)
 8084504:	f006 fd42 	bl	808af8c <__aeabi_ddiv>
 8084508:	9400      	str	r4, [sp, #0]
 808450a:	4602      	mov	r2, r0
 808450c:	460b      	mov	r3, r1
 808450e:	a81f      	add	r0, sp, #124	; 0x7c
 8084510:	f004 fc76 	bl	8088e00 <_ZN6StringC1Edi>
 8084514:	e022      	b.n	808455c <_Z15outputDataToESPv+0x418>
 8084516:	bf00      	nop
 8084518:	200000b4 	.word	0x200000b4
 808451c:	0809139e 	.word	0x0809139e
 8084520:	20000938 	.word	0x20000938
 8084524:	40240000 	.word	0x40240000
    }
    else
    {
        csv_output_string += String(geolocation_accuracy) + ",";
 8084528:	499a      	ldr	r1, [pc, #616]	; (8084794 <_Z15outputDataToESPv+0x650>)
 808452a:	a81b      	add	r0, sp, #108	; 0x6c
 808452c:	f004 fbb7 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084530:	a91b      	add	r1, sp, #108	; 0x6c
 8084532:	a81f      	add	r0, sp, #124	; 0x7c
 8084534:	f004 fbf2 	bl	8088d1c <_ZN6StringC1ERKS_>
 8084538:	4997      	ldr	r1, [pc, #604]	; (8084798 <_Z15outputDataToESPv+0x654>)
 808453a:	a81f      	add	r0, sp, #124	; 0x7c
 808453c:	f004 fcb9 	bl	8088eb2 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084540:	4601      	mov	r1, r0
 8084542:	a807      	add	r0, sp, #28
 8084544:	f004 fc89 	bl	8088e5a <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084548:	a81f      	add	r0, sp, #124	; 0x7c
 808454a:	f004 fb61 	bl	8088c10 <_ZN6StringD1Ev>
 808454e:	a81b      	add	r0, sp, #108	; 0x6c
 8084550:	f004 fb5e 	bl	8088c10 <_ZN6StringD1Ev>
        cloud_output_string += String(geolocation_accuracy);
 8084554:	498f      	ldr	r1, [pc, #572]	; (8084794 <_Z15outputDataToESPv+0x650>)
 8084556:	a81f      	add	r0, sp, #124	; 0x7c
 8084558:	f004 fba1 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808455c:	a91f      	add	r1, sp, #124	; 0x7c
 808455e:	a803      	add	r0, sp, #12
    }

    csv_output_string += String(status_word.status_int) + ",";
 8084560:	4d8e      	ldr	r5, [pc, #568]	; (808479c <_Z15outputDataToESPv+0x658>)
 8084562:	f004 fc7a 	bl	8088e5a <_ZN6String6concatERKS_>
        cloud_output_string += String(gps.get_horizontalDilution() / 10.0);
    }
    else
    {
        csv_output_string += String(geolocation_accuracy) + ",";
        cloud_output_string += String(geolocation_accuracy);
 8084566:	a81f      	add	r0, sp, #124	; 0x7c
 8084568:	f004 fb52 	bl	8088c10 <_ZN6StringD1Ev>
    }

    csv_output_string += String(status_word.status_int) + ",";
 808456c:	220a      	movs	r2, #10
 808456e:	8829      	ldrh	r1, [r5, #0]
 8084570:	a81b      	add	r0, sp, #108	; 0x6c
 8084572:	f004 fc08 	bl	8088d86 <_ZN6StringC1Eih>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084576:	a91b      	add	r1, sp, #108	; 0x6c
 8084578:	a81f      	add	r0, sp, #124	; 0x7c
 808457a:	f004 fbcf 	bl	8088d1c <_ZN6StringC1ERKS_>
 808457e:	4986      	ldr	r1, [pc, #536]	; (8084798 <_Z15outputDataToESPv+0x654>)
 8084580:	a81f      	add	r0, sp, #124	; 0x7c
 8084582:	f004 fc96 	bl	8088eb2 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084586:	4601      	mov	r1, r0
 8084588:	a807      	add	r0, sp, #28
 808458a:	f004 fc66 	bl	8088e5a <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808458e:	a81f      	add	r0, sp, #124	; 0x7c
 8084590:	f004 fb3e 	bl	8088c10 <_ZN6StringD1Ev>
 8084594:	a81b      	add	r0, sp, #108	; 0x6c
 8084596:	f004 fb3b 	bl	8088c10 <_ZN6StringD1Ev>
    csv_output_string += String(Time.format(time, "%d/%m/%y,%H:%M:%S"));
 808459a:	4b81      	ldr	r3, [pc, #516]	; (80847a0 <_Z15outputDataToESPv+0x65c>)
 808459c:	4632      	mov	r2, r6
 808459e:	4981      	ldr	r1, [pc, #516]	; (80847a4 <_Z15outputDataToESPv+0x660>)
 80845a0:	a81f      	add	r0, sp, #124	; 0x7c
 80845a2:	f004 fff1 	bl	8089588 <_ZN9TimeClass6formatElPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80845a6:	a91f      	add	r1, sp, #124	; 0x7c
 80845a8:	a807      	add	r0, sp, #28
 80845aa:	f004 fc56 	bl	8088e5a <_ZN6String6concatERKS_>
 80845ae:	a81f      	add	r0, sp, #124	; 0x7c
 80845b0:	f004 fb2e 	bl	8088c10 <_ZN6StringD1Ev>
    cloud_output_string += String(PARTICLE_TIME_PACKET_CONSTANT) + String(Time.now());
 80845b4:	2159      	movs	r1, #89	; 0x59
 80845b6:	a817      	add	r0, sp, #92	; 0x5c
 80845b8:	f004 fbd4 	bl	8088d64 <_ZN6StringC1Ec>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80845bc:	a917      	add	r1, sp, #92	; 0x5c
 80845be:	a81f      	add	r0, sp, #124	; 0x7c
 80845c0:	f004 fbac 	bl	8088d1c <_ZN6StringC1ERKS_>
 80845c4:	f005 f833 	bl	808962e <_ZN9TimeClass3nowEv>
 80845c8:	220a      	movs	r2, #10
 80845ca:	4601      	mov	r1, r0
 80845cc:	a81b      	add	r0, sp, #108	; 0x6c
 80845ce:	f004 fbed 	bl	8088dac <_ZN6StringC1Elh>
 80845d2:	a91b      	add	r1, sp, #108	; 0x6c
 80845d4:	a81f      	add	r0, sp, #124	; 0x7c
 80845d6:	f004 fc60 	bl	8088e9a <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80845da:	4601      	mov	r1, r0
 80845dc:	a803      	add	r0, sp, #12
 80845de:	f004 fc3c 	bl	8088e5a <_ZN6String6concatERKS_>
 80845e2:	a81b      	add	r0, sp, #108	; 0x6c
 80845e4:	f004 fb14 	bl	8088c10 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80845e8:	a81f      	add	r0, sp, #124	; 0x7c
 80845ea:	f004 fb11 	bl	8088c10 <_ZN6StringD1Ev>
    cloud_output_string += '&';
    if (debugging_enabled)
 80845ee:	4c6e      	ldr	r4, [pc, #440]	; (80847a8 <_Z15outputDataToESPv+0x664>)
        cloud_output_string += String(geolocation_accuracy);
    }

    csv_output_string += String(status_word.status_int) + ",";
    csv_output_string += String(Time.format(time, "%d/%m/%y,%H:%M:%S"));
    cloud_output_string += String(PARTICLE_TIME_PACKET_CONSTANT) + String(Time.now());
 80845f0:	a817      	add	r0, sp, #92	; 0x5c
 80845f2:	f004 fb0d 	bl	8088c10 <_ZN6StringD1Ev>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
 80845f6:	2126      	movs	r1, #38	; 0x26
 80845f8:	a803      	add	r0, sp, #12
 80845fa:	f004 fc41 	bl	8088e80 <_ZN6String6concatEc>
    cloud_output_string += '&';
    if (debugging_enabled)
 80845fe:	6823      	ldr	r3, [r4, #0]
 8084600:	b14b      	cbz	r3, 8084616 <_Z15outputDataToESPv+0x4d2>
    {
        Serial.println("Line to write to cloud:");
 8084602:	f005 fd43 	bl	808a08c <_Z16_fetch_usbserialv>
 8084606:	4969      	ldr	r1, [pc, #420]	; (80847ac <_Z15outputDataToESPv+0x668>)
 8084608:	f004 fd0b 	bl	8089022 <_ZN5Print7printlnEPKc>
        Serial.println(cloud_output_string);
 808460c:	f005 fd3e 	bl	808a08c <_Z16_fetch_usbserialv>
 8084610:	9903      	ldr	r1, [sp, #12]
 8084612:	f004 fd06 	bl	8089022 <_ZN5Print7printlnEPKc>
    }

    outputToCloud(cloud_output_string, "blahfornow");
 8084616:	a903      	add	r1, sp, #12
 8084618:	a81b      	add	r0, sp, #108	; 0x6c
 808461a:	f004 fb7f 	bl	8088d1c <_ZN6StringC1ERKS_>
 808461e:	4964      	ldr	r1, [pc, #400]	; (80847b0 <_Z15outputDataToESPv+0x66c>)
 8084620:	a81f      	add	r0, sp, #124	; 0x7c
 8084622:	f004 fb3c 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
 8084626:	a91f      	add	r1, sp, #124	; 0x7c
 8084628:	a81b      	add	r0, sp, #108	; 0x6c
 808462a:	f7ff fd21 	bl	8084070 <_Z13outputToCloud6StringS_>
 808462e:	a81f      	add	r0, sp, #124	; 0x7c
 8084630:	f004 faee 	bl	8088c10 <_ZN6StringD1Ev>
 8084634:	a81b      	add	r0, sp, #108	; 0x6c
 8084636:	f004 faeb 	bl	8088c10 <_ZN6StringD1Ev>

    if (esp_wifi_connection_status)
 808463a:	4b5e      	ldr	r3, [pc, #376]	; (80847b4 <_Z15outputDataToESPv+0x670>)
 808463c:	681b      	ldr	r3, [r3, #0]
 808463e:	b1ab      	cbz	r3, 808466c <_Z15outputDataToESPv+0x528>
    {
        if (debugging_enabled)
 8084640:	6823      	ldr	r3, [r4, #0]
 8084642:	b173      	cbz	r3, 8084662 <_Z15outputDataToESPv+0x51e>
        {
            Serial.println("Sending data to esp to upload via wifi...");
 8084644:	f005 fd22 	bl	808a08c <_Z16_fetch_usbserialv>
 8084648:	495b      	ldr	r1, [pc, #364]	; (80847b8 <_Z15outputDataToESPv+0x674>)
 808464a:	f004 fcea 	bl	8089022 <_ZN5Print7printlnEPKc>
            writeLogFile("Sending data to esp to upload via wifi");
 808464e:	495b      	ldr	r1, [pc, #364]	; (80847bc <_Z15outputDataToESPv+0x678>)
 8084650:	a81f      	add	r0, sp, #124	; 0x7c
 8084652:	f004 fb24 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
 8084656:	a81f      	add	r0, sp, #124	; 0x7c
 8084658:	f7fd f862 	bl	8081720 <_Z12writeLogFile6String>
 808465c:	a81f      	add	r0, sp, #124	; 0x7c
 808465e:	f004 fad7 	bl	8088c10 <_ZN6StringD1Ev>
        }
        Serial1.println(cloud_output_string);
 8084662:	f005 fe29 	bl	808a2b8 <_Z22__fetch_global_Serial1v>
 8084666:	9903      	ldr	r1, [sp, #12]
 8084668:	f004 fcdb 	bl	8089022 <_ZN5Print7printlnEPKc>
    }
    Serial.println(csv_output_string);
 808466c:	f005 fd0e 	bl	808a08c <_Z16_fetch_usbserialv>
 8084670:	9907      	ldr	r1, [sp, #28]
 8084672:	f004 fcd6 	bl	8089022 <_ZN5Print7printlnEPKc>
 8084676:	4952      	ldr	r1, [pc, #328]	; (80847c0 <_Z15outputDataToESPv+0x67c>)
 8084678:	2302      	movs	r3, #2
 808467a:	220c      	movs	r2, #12
 808467c:	f5a1 608e 	sub.w	r0, r1, #1136	; 0x470
 8084680:	f7fc fa6a 	bl	8080b58 <_ZN9SdFatBase5beginEP9SdSpiBasehh>

    //write data to file
    if (sd.begin(CS))
 8084684:	2800      	cmp	r0, #0
 8084686:	d036      	beq.n	80846f6 <_Z15outputDataToESPv+0x5b2>
    {
        if (debugging_enabled)
 8084688:	6823      	ldr	r3, [r4, #0]
 808468a:	b123      	cbz	r3, 8084696 <_Z15outputDataToESPv+0x552>
            Serial.println("Writing row to file.");
 808468c:	f005 fcfe 	bl	808a08c <_Z16_fetch_usbserialv>
 8084690:	494c      	ldr	r1, [pc, #304]	; (80847c4 <_Z15outputDataToESPv+0x680>)
 8084692:	f004 fcc6 	bl	8089022 <_ZN5Print7printlnEPKc>
 8084696:	4a4c      	ldr	r2, [pc, #304]	; (80847c8 <_Z15outputDataToESPv+0x684>)
 8084698:	494c      	ldr	r1, [pc, #304]	; (80847cc <_Z15outputDataToESPv+0x688>)
        file.open(fileName, O_CREAT | O_APPEND | O_WRITE);
        if (file_started == 0)
 808469a:	4c4d      	ldr	r4, [pc, #308]	; (80847d0 <_Z15outputDataToESPv+0x68c>)
 808469c:	2346      	movs	r3, #70	; 0x46
 808469e:	6812      	ldr	r2, [r2, #0]
 80846a0:	6809      	ldr	r1, [r1, #0]
 80846a2:	484c      	ldr	r0, [pc, #304]	; (80847d4 <_Z15outputDataToESPv+0x690>)
 80846a4:	f002 fe1f 	bl	80872e6 <_ZN7FatFile4openEPS_PKch>
 80846a8:	6823      	ldr	r3, [r4, #0]
 80846aa:	b9eb      	cbnz	r3, 80846e8 <_Z15outputDataToESPv+0x5a4>
        {
            file.println("File Start timestamp: ");
 80846ac:	494a      	ldr	r1, [pc, #296]	; (80847d8 <_Z15outputDataToESPv+0x694>)
 80846ae:	484b      	ldr	r0, [pc, #300]	; (80847dc <_Z15outputDataToESPv+0x698>)
 80846b0:	f004 fcb7 	bl	8089022 <_ZN5Print7printlnEPKc>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
 80846b4:	f004 ffbb 	bl	808962e <_ZN9TimeClass3nowEv>
 80846b8:	4601      	mov	r1, r0
 80846ba:	a81f      	add	r0, sp, #124	; 0x7c
 80846bc:	f004 fee4 	bl	8089488 <_ZN9TimeClass7timeStrEl>
            file.println(Time.timeStr());
 80846c0:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80846c2:	4846      	ldr	r0, [pc, #280]	; (80847dc <_Z15outputDataToESPv+0x698>)
 80846c4:	f004 fcad 	bl	8089022 <_ZN5Print7printlnEPKc>
 80846c8:	a81f      	add	r0, sp, #124	; 0x7c
 80846ca:	f004 faa1 	bl	8088c10 <_ZN6StringD1Ev>
            file.println(String(HEADER_STRING));
 80846ce:	4944      	ldr	r1, [pc, #272]	; (80847e0 <_Z15outputDataToESPv+0x69c>)
 80846d0:	a81f      	add	r0, sp, #124	; 0x7c
 80846d2:	f004 fae4 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
 80846d6:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80846d8:	4840      	ldr	r0, [pc, #256]	; (80847dc <_Z15outputDataToESPv+0x698>)
 80846da:	f004 fca2 	bl	8089022 <_ZN5Print7printlnEPKc>
 80846de:	a81f      	add	r0, sp, #124	; 0x7c
 80846e0:	f004 fa96 	bl	8088c10 <_ZN6StringD1Ev>
            file_started = 1;
 80846e4:	2301      	movs	r3, #1
 80846e6:	6023      	str	r3, [r4, #0]
        }
        file.println(csv_output_string);
 80846e8:	9907      	ldr	r1, [sp, #28]
 80846ea:	483c      	ldr	r0, [pc, #240]	; (80847dc <_Z15outputDataToESPv+0x698>)
 80846ec:	f004 fc99 	bl	8089022 <_ZN5Print7printlnEPKc>

        file.close();
 80846f0:	4838      	ldr	r0, [pc, #224]	; (80847d4 <_Z15outputDataToESPv+0x690>)
 80846f2:	f002 fdf1 	bl	80872d8 <_ZN7FatFile5closeEv>
        //byte 0 - version
        ble_output_array[0 + i * (BLE_PAYLOAD_SIZE)] = 1;

        //bytes 1,2 - Device ID
        //DEVICE_id = 555;
        wordBytes.myWord = DEVICE_id;
 80846f6:	4f3b      	ldr	r7, [pc, #236]	; (80847e4 <_Z15outputDataToESPv+0x6a0>)
 80846f8:	ac1f      	add	r4, sp, #124	; 0x7c
        Serial.println("Unable to write to log file");
    }
}

void outputDataToESP(void)
{
 80846fa:	2600      	movs	r6, #0
    for (uint8_t i = 0; i < NUMBER_OF_SPECIES; i++)
    {
        //************Fill the ble output array**********************//
        //Serial.printf("making array[%d]\n", i);
        //byte 0 - version
        ble_output_array[0 + i * (BLE_PAYLOAD_SIZE)] = 1;
 80846fc:	2301      	movs	r3, #1
 80846fe:	7023      	strb	r3, [r4, #0]

        //bytes 1,2 - Device ID
        //DEVICE_id = 555;
        wordBytes.myWord = DEVICE_id;
 8084700:	683b      	ldr	r3, [r7, #0]
        ble_output_array[1 + i * (BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8084702:	7063      	strb	r3, [r4, #1]
        ble_output_array[2 + i * (BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8084704:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8084708:	70a3      	strb	r3, [r4, #2]

        //byte 3 - Measurement number
        ble_output_array[3 + i * (BLE_PAYLOAD_SIZE)] = sample_counter;
 808470a:	4b37      	ldr	r3, [pc, #220]	; (80847e8 <_Z15outputDataToESPv+0x6a4>)
 808470c:	681b      	ldr	r3, [r3, #0]
 808470e:	70e3      	strb	r3, [r4, #3]
        9-O3_float
        10-fuel.getSoC()
        11-sound_average
        */

        switch (i)
 8084710:	b2f3      	uxtb	r3, r6
 8084712:	3b01      	subs	r3, #1
 8084714:	2b09      	cmp	r3, #9
 8084716:	d806      	bhi.n	8084726 <_Z15outputDataToESPv+0x5e2>
 8084718:	e8df f003 	tbb	[pc, r3]
 808471c:	17130d09 	.word	0x17130d09
 8084720:	2f27221b 	.word	0x2f27221b
 8084724:	7a34      	.short	0x7a34
        {
        case 0:
            ble_output_array[4 + i * (BLE_PAYLOAD_SIZE)] = CARBON_MONOXIDE_PACKET_CONSTANT;
 8084726:	234d      	movs	r3, #77	; 0x4d
 8084728:	7123      	strb	r3, [r4, #4]
            floatBytes.myFloat = CO_float_A;
 808472a:	4b30      	ldr	r3, [pc, #192]	; (80847ec <_Z15outputDataToESPv+0x6a8>)
 808472c:	e073      	b.n	8084816 <_Z15outputDataToESPv+0x6d2>
            break;

        case 1:
            ble_output_array[4 + i * (BLE_PAYLOAD_SIZE)] = CARBON_DIOXIDE_PACKET_CONSTANT;
 808472e:	2343      	movs	r3, #67	; 0x43
 8084730:	7123      	strb	r3, [r4, #4]
            floatBytes.myFloat = CO2_float;
 8084732:	4b2f      	ldr	r3, [pc, #188]	; (80847f0 <_Z15outputDataToESPv+0x6ac>)
 8084734:	e06f      	b.n	8084816 <_Z15outputDataToESPv+0x6d2>
            break;

        case 2:
            ble_output_array[4 + i * (BLE_PAYLOAD_SIZE)] = BATTERY_PACKET_CONSTANT;
 8084736:	2378      	movs	r3, #120	; 0x78
 8084738:	7123      	strb	r3, [r4, #4]
            floatBytes.myFloat = fuel.getSoC();
 808473a:	482e      	ldr	r0, [pc, #184]	; (80847f4 <_Z15outputDataToESPv+0x6b0>)
 808473c:	f005 f838 	bl	80897b0 <_ZN9FuelGauge6getSoCEv>
            break;
 8084740:	e06a      	b.n	8084818 <_Z15outputDataToESPv+0x6d4>

        case 3:
            ble_output_array[4 + i * (BLE_PAYLOAD_SIZE)] = PM1_PACKET_CONSTANT;
 8084742:	2372      	movs	r3, #114	; 0x72
 8084744:	7123      	strb	r3, [r4, #4]
            floatBytes.myFloat = PM01Value;
 8084746:	4b2c      	ldr	r3, [pc, #176]	; (80847f8 <_Z15outputDataToESPv+0x6b4>)
 8084748:	e006      	b.n	8084758 <_Z15outputDataToESPv+0x614>
            break;

        case 4:
            ble_output_array[4 + i * (BLE_PAYLOAD_SIZE)] = PM2PT5_PACKET_CONSTANT;
 808474a:	2352      	movs	r3, #82	; 0x52
 808474c:	7123      	strb	r3, [r4, #4]
            floatBytes.myFloat = corrected_PM_25;
 808474e:	4b2b      	ldr	r3, [pc, #172]	; (80847fc <_Z15outputDataToESPv+0x6b8>)
 8084750:	e061      	b.n	8084816 <_Z15outputDataToESPv+0x6d2>
            break;

        case 5:
            ble_output_array[4 + i * (BLE_PAYLOAD_SIZE)] = PM10_PACKET_CONSTANT;
 8084752:	2371      	movs	r3, #113	; 0x71
 8084754:	7123      	strb	r3, [r4, #4]
            floatBytes.myFloat = PM10Value;
 8084756:	4b2a      	ldr	r3, [pc, #168]	; (8084800 <_Z15outputDataToESPv+0x6bc>)
 8084758:	6818      	ldr	r0, [r3, #0]
 808475a:	f006 feef 	bl	808b53c <__aeabi_i2f>
            break;
 808475e:	e05b      	b.n	8084818 <_Z15outputDataToESPv+0x6d4>

        case 6:
            ble_output_array[4 + i * (BLE_PAYLOAD_SIZE)] = TEMPERATURE_PACKET_CONSTANT;
 8084760:	2374      	movs	r3, #116	; 0x74
 8084762:	7123      	strb	r3, [r4, #4]
            floatBytes.myFloat = readTemperature();
 8084764:	f7fc fdc4 	bl	80812f0 <_Z15readTemperaturev>
            break;
 8084768:	e056      	b.n	8084818 <_Z15outputDataToESPv+0x6d4>

        case 7:
            ble_output_array[4 + i * (BLE_PAYLOAD_SIZE)] = PRESSURE_PACKET_CONSTANT;
 808476a:	2350      	movs	r3, #80	; 0x50
 808476c:	7123      	strb	r3, [r4, #4]
            floatBytes.myFloat = bme.pressure / 100.0;
 808476e:	4b25      	ldr	r3, [pc, #148]	; (8084804 <_Z15outputDataToESPv+0x6c0>)
 8084770:	4925      	ldr	r1, [pc, #148]	; (8084808 <_Z15outputDataToESPv+0x6c4>)
 8084772:	6858      	ldr	r0, [r3, #4]
 8084774:	f006 ffea 	bl	808b74c <__aeabi_fdiv>
            break;
 8084778:	e04e      	b.n	8084818 <_Z15outputDataToESPv+0x6d4>

        case 8:
            ble_output_array[4 + i * (BLE_PAYLOAD_SIZE)] = HUMIDITY_PACKET_CONSTANT;
 808477a:	2368      	movs	r3, #104	; 0x68
 808477c:	7123      	strb	r3, [r4, #4]
            floatBytes.myFloat = readHumidity();
 808477e:	f7fc fe35 	bl	80813ec <_Z12readHumidityv>
            break;
 8084782:	e049      	b.n	8084818 <_Z15outputDataToESPv+0x6d4>

        case 9:
            ble_output_array[4 + i * (BLE_PAYLOAD_SIZE)] = SOUND_PACKET_CONSTANT;
 8084784:	2373      	movs	r3, #115	; 0x73
 8084786:	7123      	strb	r3, [r4, #4]
            floatBytes.myFloat = sound_average;
 8084788:	4b20      	ldr	r3, [pc, #128]	; (808480c <_Z15outputDataToESPv+0x6c8>)
 808478a:	e9d3 0100 	ldrd	r0, r1, [r3]
 808478e:	f006 fdcb 	bl	808b328 <__aeabi_d2f>
            break;
 8084792:	e041      	b.n	8084818 <_Z15outputDataToESPv+0x6d4>
 8084794:	20000080 	.word	0x20000080
 8084798:	0809139e 	.word	0x0809139e
 808479c:	20000b44 	.word	0x20000b44
 80847a0:	0808f4cd 	.word	0x0808f4cd
 80847a4:	20000bcc 	.word	0x20000bcc
 80847a8:	20000acc 	.word	0x20000acc
 80847ac:	08090731 	.word	0x08090731
 80847b0:	08090749 	.word	0x08090749
 80847b4:	20000228 	.word	0x20000228
 80847b8:	08090754 	.word	0x08090754
 80847bc:	0809077e 	.word	0x0809077e
 80847c0:	2000069c 	.word	0x2000069c
 80847c4:	080907a5 	.word	0x080907a5
 80847c8:	20000aac 	.word	0x20000aac
 80847cc:	20000b94 	.word	0x20000b94
 80847d0:	20000b50 	.word	0x20000b50
 80847d4:	200006b8 	.word	0x200006b8
 80847d8:	0808f174 	.word	0x0808f174
 80847dc:	200006b0 	.word	0x200006b0
 80847e0:	080907ba 	.word	0x080907ba
 80847e4:	20000088 	.word	0x20000088
 80847e8:	20000220 	.word	0x20000220
 80847ec:	20000770 	.word	0x20000770
 80847f0:	20000218 	.word	0x20000218
 80847f4:	20000880 	.word	0x20000880
 80847f8:	20000890 	.word	0x20000890
 80847fc:	20000970 	.word	0x20000970
 8084800:	20000af4 	.word	0x20000af4
 8084804:	200006e8 	.word	0x200006e8
 8084808:	42c80000 	.word	0x42c80000
 808480c:	20000ae8 	.word	0x20000ae8

        case 10:
            ble_output_array[4 + i * (BLE_PAYLOAD_SIZE)] = VOC_PACKET_CONSTANT;
 8084810:	2367      	movs	r3, #103	; 0x67
 8084812:	7123      	strb	r3, [r4, #4]
            floatBytes.myFloat = air_quality_score;
 8084814:	4b32      	ldr	r3, [pc, #200]	; (80848e0 <_Z15outputDataToESPv+0x79c>)
 8084816:	6818      	ldr	r0, [r3, #0]
            break;
        }

        //bytes 5,6,7,8 - Measurement Value
        ble_output_array[5 + i * (BLE_PAYLOAD_SIZE)] = floatBytes.bytes[0];
        ble_output_array[6 + i * (BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
 8084818:	f3c0 2307 	ubfx	r3, r0, #8, #8
        default:
            break;
        }

        //bytes 5,6,7,8 - Measurement Value
        ble_output_array[5 + i * (BLE_PAYLOAD_SIZE)] = floatBytes.bytes[0];
 808481c:	7160      	strb	r0, [r4, #5]
        ble_output_array[6 + i * (BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
 808481e:	71a3      	strb	r3, [r4, #6]
        ble_output_array[7 + i * (BLE_PAYLOAD_SIZE)] = floatBytes.bytes[2];
 8084820:	f3c0 4307 	ubfx	r3, r0, #16, #8
        ble_output_array[8 + i * (BLE_PAYLOAD_SIZE)] = floatBytes.bytes[3];
 8084824:	f3c0 6007 	ubfx	r0, r0, #24, #8
        }

        //bytes 5,6,7,8 - Measurement Value
        ble_output_array[5 + i * (BLE_PAYLOAD_SIZE)] = floatBytes.bytes[0];
        ble_output_array[6 + i * (BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
        ble_output_array[7 + i * (BLE_PAYLOAD_SIZE)] = floatBytes.bytes[2];
 8084828:	71e3      	strb	r3, [r4, #7]
        ble_output_array[8 + i * (BLE_PAYLOAD_SIZE)] = floatBytes.bytes[3];
 808482a:	7220      	strb	r0, [r4, #8]

        //bytes 9-12 - latitude
        wordBytes.myWord = gps.get_latitudeWhole();
 808482c:	482d      	ldr	r0, [pc, #180]	; (80848e4 <_Z15outputDataToESPv+0x7a0>)
 808482e:	f001 fc4c 	bl	80860ca <_ZN3GPS17get_latitudeWholeEv>
        ble_output_array[9 + i * (BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8084832:	7260      	strb	r0, [r4, #9]
        ble_output_array[10 + i * (BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8084834:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8084838:	72a0      	strb	r0, [r4, #10]

        wordBytes.myWord = gps.get_latitudeFrac();
 808483a:	482a      	ldr	r0, [pc, #168]	; (80848e4 <_Z15outputDataToESPv+0x7a0>)
 808483c:	f001 fc48 	bl	80860d0 <_ZN3GPS16get_latitudeFracEv>
        ble_output_array[11 + i * (BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8084840:	72e0      	strb	r0, [r4, #11]
        ble_output_array[12 + i * (BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8084842:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8084846:	7320      	strb	r0, [r4, #12]

        //bytes 14-17 - longitude
        wordBytes.myWord = gps.get_longitudeWhole();
 8084848:	4826      	ldr	r0, [pc, #152]	; (80848e4 <_Z15outputDataToESPv+0x7a0>)
 808484a:	f001 fc44 	bl	80860d6 <_ZN3GPS18get_longitudeWholeEv>
        ble_output_array[13 + i * (BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 808484e:	7360      	strb	r0, [r4, #13]
        ble_output_array[14 + i * (BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8084850:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8084854:	73a0      	strb	r0, [r4, #14]

        wordBytes.myWord = gps.get_longitudeFrac();
 8084856:	4823      	ldr	r0, [pc, #140]	; (80848e4 <_Z15outputDataToESPv+0x7a0>)
 8084858:	f001 fc40 	bl	80860dc <_ZN3GPS17get_longitudeFracEv>
        ble_output_array[15 + i * (BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 808485c:	73e0      	strb	r0, [r4, #15]
        ble_output_array[16 + i * (BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 808485e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8084862:	7420      	strb	r0, [r4, #16]

        //byte 18 - east west and north south indicator
        //  LSB 0 = East, LSB 1 = West
        //  MSB 0 = South, MSB 1 = North
        int northSouth = gps.get_nsIndicator();
 8084864:	481f      	ldr	r0, [pc, #124]	; (80848e4 <_Z15outputDataToESPv+0x7a0>)
 8084866:	f001 fc3c 	bl	80860e2 <_ZN3GPS15get_nsIndicatorEv>
 808486a:	4680      	mov	r8, r0
        int eastWest = gps.get_ewIndicator();
 808486c:	481d      	ldr	r0, [pc, #116]	; (80848e4 <_Z15outputDataToESPv+0x7a0>)
 808486e:	f001 fc3b 	bl	80860e8 <_ZN3GPS15get_ewIndicatorEv>

        ble_output_array[17 + i * (BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
 8084872:	ea48 0000 	orr.w	r0, r8, r0
 8084876:	7460      	strb	r0, [r4, #17]
        ble_output_array[18 + i * (BLE_PAYLOAD_SIZE)] = gps.get_horizontalDilution();
 8084878:	481a      	ldr	r0, [pc, #104]	; (80848e4 <_Z15outputDataToESPv+0x7a0>)
 808487a:	f001 fc21 	bl	80860c0 <_ZN3GPS22get_horizontalDilutionEv>
        ble_output_array[19 + i * (BLE_PAYLOAD_SIZE)] = status_word.byte[1];
 808487e:	786b      	ldrb	r3, [r5, #1]
 8084880:	3601      	adds	r6, #1
 8084882:	74e3      	strb	r3, [r4, #19]
        ble_output_array[20 + i * (BLE_PAYLOAD_SIZE)] = status_word.byte[0];
 8084884:	782b      	ldrb	r3, [r5, #0]
    //Each "section" in the array is separated by a #
    //we are using binary for the ble packets so we can compress the data into 19 bytes for the small payload

    byte ble_output_array[NUMBER_OF_SPECIES * BLE_PAYLOAD_SIZE];     //19 bytes per data line and 12 species to output

    for (uint8_t i = 0; i < NUMBER_OF_SPECIES; i++)
 8084886:	2e0b      	cmp	r6, #11
        int eastWest = gps.get_ewIndicator();

        ble_output_array[17 + i * (BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
        ble_output_array[18 + i * (BLE_PAYLOAD_SIZE)] = gps.get_horizontalDilution();
        ble_output_array[19 + i * (BLE_PAYLOAD_SIZE)] = status_word.byte[1];
        ble_output_array[20 + i * (BLE_PAYLOAD_SIZE)] = status_word.byte[0];
 8084888:	7523      	strb	r3, [r4, #20]

        ble_output_array[21 + i * (BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species
 808488a:	f04f 0323 	mov.w	r3, #35	; 0x23
        //  MSB 0 = South, MSB 1 = North
        int northSouth = gps.get_nsIndicator();
        int eastWest = gps.get_ewIndicator();

        ble_output_array[17 + i * (BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
        ble_output_array[18 + i * (BLE_PAYLOAD_SIZE)] = gps.get_horizontalDilution();
 808488e:	74a0      	strb	r0, [r4, #18]
        ble_output_array[19 + i * (BLE_PAYLOAD_SIZE)] = status_word.byte[1];
        ble_output_array[20 + i * (BLE_PAYLOAD_SIZE)] = status_word.byte[0];

        ble_output_array[21 + i * (BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species
 8084890:	7563      	strb	r3, [r4, #21]
 8084892:	f104 0416 	add.w	r4, r4, #22
    //Each "section" in the array is separated by a #
    //we are using binary for the ble packets so we can compress the data into 19 bytes for the small payload

    byte ble_output_array[NUMBER_OF_SPECIES * BLE_PAYLOAD_SIZE];     //19 bytes per data line and 12 species to output

    for (uint8_t i = 0; i < NUMBER_OF_SPECIES; i++)
 8084896:	f47f af31 	bne.w	80846fc <_Z15outputDataToESPv+0x5b8>

        ble_output_array[21 + i * (BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species
    }

    //send start delimeter to ESP
    Serial1.print("$");
 808489a:	f005 fd0d 	bl	808a2b8 <_Z22__fetch_global_Serial1v>
 808489e:	4912      	ldr	r1, [pc, #72]	; (80848e8 <_Z15outputDataToESPv+0x7a4>)
 80848a0:	f004 fbac 	bl	8088ffc <_ZN5Print5printEPKc>
    //send the packaged data with # delimeters in between packets
    Serial1.write(ble_output_array, NUMBER_OF_SPECIES * BLE_PAYLOAD_SIZE);
 80848a4:	f005 fd08 	bl	808a2b8 <_Z22__fetch_global_Serial1v>
 80848a8:	6803      	ldr	r3, [r0, #0]
 80848aa:	22f2      	movs	r2, #242	; 0xf2
 80848ac:	68db      	ldr	r3, [r3, #12]
 80848ae:	a91f      	add	r1, sp, #124	; 0x7c
 80848b0:	4798      	blx	r3

    //send ending delimeter
    Serial1.print("&");
 80848b2:	f005 fd01 	bl	808a2b8 <_Z22__fetch_global_Serial1v>
 80848b6:	490d      	ldr	r1, [pc, #52]	; (80848ec <_Z15outputDataToESPv+0x7a8>)
 80848b8:	f004 fba0 	bl	8088ffc <_ZN5Print5printEPKc>
    //"$1:D555g47.7M-22.050533C550.866638r1R1q2T45.8P844.9h17.2s1842.700000&"
    String cloud_output_string = "";    //create a clean string
    String csv_output_string = "";
    String sensible_string = "";
    String latitude_string = "";
    String longitude_string = "";
 80848bc:	a813      	add	r0, sp, #76	; 0x4c
 80848be:	f004 f9a7 	bl	8088c10 <_ZN6StringD1Ev>
    //This is different than the ble packet in that we are putting all of the data that we have in one packet
    //"$1:D555g47.7M-22.050533C550.866638r1R1q2T45.8P844.9h17.2s1842.700000&"
    String cloud_output_string = "";    //create a clean string
    String csv_output_string = "";
    String sensible_string = "";
    String latitude_string = "";
 80848c2:	a80f      	add	r0, sp, #60	; 0x3c
 80848c4:	f004 f9a4 	bl	8088c10 <_ZN6StringD1Ev>
    //************Fill the cloud output array and file output array for row in csv file on usd card*****************************/
    //This is different than the ble packet in that we are putting all of the data that we have in one packet
    //"$1:D555g47.7M-22.050533C550.866638r1R1q2T45.8P844.9h17.2s1842.700000&"
    String cloud_output_string = "";    //create a clean string
    String csv_output_string = "";
    String sensible_string = "";
 80848c8:	a80b      	add	r0, sp, #44	; 0x2c
 80848ca:	f004 f9a1 	bl	8088c10 <_ZN6StringD1Ev>

    //************Fill the cloud output array and file output array for row in csv file on usd card*****************************/
    //This is different than the ble packet in that we are putting all of the data that we have in one packet
    //"$1:D555g47.7M-22.050533C550.866638r1R1q2T45.8P844.9h17.2s1842.700000&"
    String cloud_output_string = "";    //create a clean string
    String csv_output_string = "";
 80848ce:	a807      	add	r0, sp, #28
 80848d0:	f004 f99e 	bl	8088c10 <_ZN6StringD1Ev>
    Time.setFormat(TIME_FORMAT_ISO8601_FULL);

    //************Fill the cloud output array and file output array for row in csv file on usd card*****************************/
    //This is different than the ble packet in that we are putting all of the data that we have in one packet
    //"$1:D555g47.7M-22.050533C550.866638r1R1q2T45.8P844.9h17.2s1842.700000&"
    String cloud_output_string = "";    //create a clean string
 80848d4:	a803      	add	r0, sp, #12
 80848d6:	f004 f99b 	bl	8088c10 <_ZN6StringD1Ev>
        Serial.printf("array[%d]:%X ", i, ble_output_array[i]);
        if(ble_output_array[i]=='#')
            Serial.printf("\n\r");
    }
    Serial.println("End of array");*/
}
 80848da:	b05c      	add	sp, #368	; 0x170
 80848dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80848e0:	20000ae0 	.word	0x20000ae0
 80848e4:	20000938 	.word	0x20000938
 80848e8:	0809083c 	.word	0x0809083c
 80848ec:	0808f4e1 	.word	0x0808f4e1

080848f0 <_Z16getEspAQSyncDatav>:
    return ozone_value;
    //parseOzoneString(receivedData);
}

void getEspAQSyncData(void)
{
 80848f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80848f2:	b08f      	sub	sp, #60	; 0x3c
    String getAQSyncData = "Z&";
 80848f4:	4954      	ldr	r1, [pc, #336]	; (8084a48 <_Z16getEspAQSyncDatav+0x158>)
 80848f6:	a802      	add	r0, sp, #8
 80848f8:	f004 f9d1 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
    bool timeOut = false;
    double counterIndex = 0;

    //If esp doesn't answer, keep going
    Serial1.setTimeout(3000);
    if (debugging_enabled)
 80848fc:	4c53      	ldr	r4, [pc, #332]	; (8084a4c <_Z16getEspAQSyncDatav+0x15c>)
}

void getEspAQSyncData(void)
{
    String getAQSyncData = "Z&";
    String receivedData = " ";
 80848fe:	4954      	ldr	r1, [pc, #336]	; (8084a50 <_Z16getEspAQSyncDatav+0x160>)
 8084900:	a806      	add	r0, sp, #24
 8084902:	f004 f9cc 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
    bool timeOut = false;
    double counterIndex = 0;

    //If esp doesn't answer, keep going
    Serial1.setTimeout(3000);
 8084906:	f005 fcd7 	bl	808a2b8 <_Z22__fetch_global_Serial1v>
 808490a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 808490e:	f004 fd0c 	bl	808932a <_ZN6Stream10setTimeoutEm>
    if (debugging_enabled)
 8084912:	6823      	ldr	r3, [r4, #0]
 8084914:	b173      	cbz	r3, 8084934 <_Z16getEspAQSyncDatav+0x44>
    {
        Serial.println("Getting AQ Sync data from esp");
 8084916:	f005 fbb9 	bl	808a08c <_Z16_fetch_usbserialv>
 808491a:	494e      	ldr	r1, [pc, #312]	; (8084a54 <_Z16getEspAQSyncDatav+0x164>)
 808491c:	f004 fb81 	bl	8089022 <_ZN5Print7printlnEPKc>
        writeLogFile("Getting AQ Sync data from esp");
 8084920:	494c      	ldr	r1, [pc, #304]	; (8084a54 <_Z16getEspAQSyncDatav+0x164>)
 8084922:	a80a      	add	r0, sp, #40	; 0x28
 8084924:	f004 f9bb 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
 8084928:	a80a      	add	r0, sp, #40	; 0x28
 808492a:	f7fc fef9 	bl	8081720 <_Z12writeLogFile6String>
 808492e:	a80a      	add	r0, sp, #40	; 0x28
 8084930:	f004 f96e 	bl	8088c10 <_ZN6StringD1Ev>
    }
    Serial1.print(getAQSyncData);
 8084934:	f005 fcc0 	bl	808a2b8 <_Z22__fetch_global_Serial1v>
 8084938:	9902      	ldr	r1, [sp, #8]
 808493a:	f004 fb5f 	bl	8088ffc <_ZN5Print5printEPKc>
void getEspAQSyncData(void)
{
    String getAQSyncData = "Z&";
    String receivedData = " ";
    bool timeOut = false;
    double counterIndex = 0;
 808493e:	2600      	movs	r6, #0
 8084940:	2700      	movs	r7, #0

void getEspAQSyncData(void)
{
    String getAQSyncData = "Z&";
    String receivedData = " ";
    bool timeOut = false;
 8084942:	2500      	movs	r5, #0
    {
        Serial.println("Getting AQ Sync data from esp");
        writeLogFile("Getting AQ Sync data from esp");
    }
    Serial1.print(getAQSyncData);
    while (!Serial1.available() && !timeOut)
 8084944:	f005 fcb8 	bl	808a2b8 <_Z22__fetch_global_Serial1v>
 8084948:	6803      	ldr	r3, [r0, #0]
 808494a:	691b      	ldr	r3, [r3, #16]
 808494c:	4798      	blx	r3
 808494e:	b9e0      	cbnz	r0, 808498a <_Z16getEspAQSyncDatav+0x9a>
 8084950:	b9dd      	cbnz	r5, 808498a <_Z16getEspAQSyncDatav+0x9a>
    {
        //delay(1);
        counterIndex++;
 8084952:	2200      	movs	r2, #0
 8084954:	4b40      	ldr	r3, [pc, #256]	; (8084a58 <_Z16getEspAQSyncDatav+0x168>)
 8084956:	4630      	mov	r0, r6
 8084958:	4639      	mov	r1, r7
 808495a:	f006 f83b 	bl	808a9d4 <__adddf3>
        if (counterIndex > MAX_COUNTER_INDEX)
 808495e:	a338      	add	r3, pc, #224	; (adr r3, 8084a40 <_Z16getEspAQSyncDatav+0x150>)
 8084960:	e9d3 2300 	ldrd	r2, r3, [r3]
    }
    Serial1.print(getAQSyncData);
    while (!Serial1.available() && !timeOut)
    {
        //delay(1);
        counterIndex++;
 8084964:	4606      	mov	r6, r0
 8084966:	460f      	mov	r7, r1
        if (counterIndex > MAX_COUNTER_INDEX)
 8084968:	f006 fc76 	bl	808b258 <__aeabi_dcmpgt>
 808496c:	2800      	cmp	r0, #0
 808496e:	d0e9      	beq.n	8084944 <_Z16getEspAQSyncDatav+0x54>
        {
            if (debugging_enabled)
 8084970:	6823      	ldr	r3, [r4, #0]
 8084972:	b90b      	cbnz	r3, 8084978 <_Z16getEspAQSyncDatav+0x88>
            {
                Serial.printf("Unable to get AQSync data from ESP, counter index: %1.1f\n\r", counterIndex);
            }
            timeOut = true;
 8084974:	2501      	movs	r5, #1
 8084976:	e7e5      	b.n	8084944 <_Z16getEspAQSyncDatav+0x54>
        counterIndex++;
        if (counterIndex > MAX_COUNTER_INDEX)
        {
            if (debugging_enabled)
            {
                Serial.printf("Unable to get AQSync data from ESP, counter index: %1.1f\n\r", counterIndex);
 8084978:	f005 fb88 	bl	808a08c <_Z16_fetch_usbserialv>
 808497c:	e9cd 6700 	strd	r6, r7, [sp]
 8084980:	4a36      	ldr	r2, [pc, #216]	; (8084a5c <_Z16getEspAQSyncDatav+0x16c>)
 8084982:	4629      	mov	r1, r5
 8084984:	f004 fc82 	bl	808928c <_ZN5Print11printf_implEbPKcz>
 8084988:	e7f4      	b.n	8084974 <_Z16getEspAQSyncDatav+0x84>
            }
            timeOut = true;
        }
    }

    delay(10);
 808498a:	200a      	movs	r0, #10
 808498c:	f004 fe9c 	bl	80896c8 <delay>

    receivedData = Serial1.readString();
 8084990:	f005 fc92 	bl	808a2b8 <_Z22__fetch_global_Serial1v>
 8084994:	4601      	mov	r1, r0
 8084996:	a80a      	add	r0, sp, #40	; 0x28
 8084998:	f004 fcca 	bl	8089330 <_ZN6Stream10readStringEv>
 808499c:	a90a      	add	r1, sp, #40	; 0x28
 808499e:	a806      	add	r0, sp, #24
 80849a0:	f004 f9c7 	bl	8088d32 <_ZN6StringaSEOS_>
 80849a4:	a80a      	add	r0, sp, #40	; 0x28
 80849a6:	f004 f933 	bl	8088c10 <_ZN6StringD1Ev>
    //receivedData = "0.1,1.2,3.3,4.5,1.234,10/12/18,9:22:18";
    if (debugging_enabled)
 80849aa:	6823      	ldr	r3, [r4, #0]
 80849ac:	b19b      	cbz	r3, 80849d6 <_Z16getEspAQSyncDatav+0xe6>
    {
        Serial.print("RECEIVED DATA FROM ESP: ");
 80849ae:	f005 fb6d 	bl	808a08c <_Z16_fetch_usbserialv>
 80849b2:	492b      	ldr	r1, [pc, #172]	; (8084a60 <_Z16getEspAQSyncDatav+0x170>)
 80849b4:	f004 fb22 	bl	8088ffc <_ZN5Print5printEPKc>
        Serial.println(receivedData);
 80849b8:	f005 fb68 	bl	808a08c <_Z16_fetch_usbserialv>
 80849bc:	9906      	ldr	r1, [sp, #24]
 80849be:	f004 fb30 	bl	8089022 <_ZN5Print7printlnEPKc>
        writeLogFile("Received data from ESP");
 80849c2:	4928      	ldr	r1, [pc, #160]	; (8084a64 <_Z16getEspAQSyncDatav+0x174>)
 80849c4:	a80a      	add	r0, sp, #40	; 0x28
 80849c6:	f004 f96a 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
 80849ca:	a80a      	add	r0, sp, #40	; 0x28
 80849cc:	f7fc fea8 	bl	8081720 <_Z12writeLogFile6String>
 80849d0:	a80a      	add	r0, sp, #40	; 0x28
 80849d2:	f004 f91d 	bl	8088c10 <_ZN6StringD1Ev>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80849d6:	f003 fdb3 	bl	8088540 <spark_cloud_flag_connected>
    }

    if (Particle.connected() && serial_cellular_enabled)
 80849da:	b330      	cbz	r0, 8084a2a <_Z16getEspAQSyncDatav+0x13a>
 80849dc:	4b22      	ldr	r3, [pc, #136]	; (8084a68 <_Z16getEspAQSyncDatav+0x178>)
 80849de:	681b      	ldr	r3, [r3, #0]
 80849e0:	b31b      	cbz	r3, 8084a2a <_Z16getEspAQSyncDatav+0x13a>
 80849e2:	4b22      	ldr	r3, [pc, #136]	; (8084a6c <_Z16getEspAQSyncDatav+0x17c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80849e4:	9a06      	ldr	r2, [sp, #24]
 80849e6:	781b      	ldrb	r3, [r3, #0]
 80849e8:	4921      	ldr	r1, [pc, #132]	; (8084a70 <_Z16getEspAQSyncDatav+0x180>)
 80849ea:	f88d 3000 	strb.w	r3, [sp]
 80849ee:	a80a      	add	r0, sp, #40	; 0x28
 80849f0:	233c      	movs	r3, #60	; 0x3c
 80849f2:	f005 f917 	bl	8089c24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80849f6:	a80b      	add	r0, sp, #44	; 0x2c
 80849f8:	f7ff fb24 	bl	8084044 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80849fc:	f003 fb94 	bl	8088128 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8084a00:	4b1c      	ldr	r3, [pc, #112]	; (8084a74 <_Z16getEspAQSyncDatav+0x184>)
 8084a02:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 8084a04:	f003 fd8c 	bl	8088520 <spark_process>
    {
        Particle.publish("AQSync", receivedData, PRIVATE);
        Particle.process(); //attempt at ensuring the publish is complete before sleeping
        if (debugging_enabled)
 8084a08:	6823      	ldr	r3, [r4, #0]
 8084a0a:	b173      	cbz	r3, 8084a2a <_Z16getEspAQSyncDatav+0x13a>
        {
            Serial.println("Published AQSync data!");
 8084a0c:	f005 fb3e 	bl	808a08c <_Z16_fetch_usbserialv>
 8084a10:	4919      	ldr	r1, [pc, #100]	; (8084a78 <_Z16getEspAQSyncDatav+0x188>)
 8084a12:	f004 fb06 	bl	8089022 <_ZN5Print7printlnEPKc>
            writeLogFile("Published AQSync data!");
 8084a16:	4918      	ldr	r1, [pc, #96]	; (8084a78 <_Z16getEspAQSyncDatav+0x188>)
 8084a18:	a80a      	add	r0, sp, #40	; 0x28
 8084a1a:	f004 f940 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
 8084a1e:	a80a      	add	r0, sp, #40	; 0x28
 8084a20:	f7fc fe7e 	bl	8081720 <_Z12writeLogFile6String>
 8084a24:	a80a      	add	r0, sp, #40	; 0x28
 8084a26:	f004 f8f3 	bl	8088c10 <_ZN6StringD1Ev>
}

void getEspAQSyncData(void)
{
    String getAQSyncData = "Z&";
    String receivedData = " ";
 8084a2a:	a806      	add	r0, sp, #24
 8084a2c:	f004 f8f0 	bl	8088c10 <_ZN6StringD1Ev>
    //parseOzoneString(receivedData);
}

void getEspAQSyncData(void)
{
    String getAQSyncData = "Z&";
 8084a30:	a802      	add	r0, sp, #8
 8084a32:	f004 f8ed 	bl	8088c10 <_ZN6StringD1Ev>
            //writeLogFile("using string array index 0, not logging");
          }
    }
    return ozone_value;
    //parseOzoneString(receivedData);*/
}
 8084a36:	b00f      	add	sp, #60	; 0x3c
 8084a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084a3a:	bf00      	nop
 8084a3c:	f3af 8000 	nop.w
 8084a40:	00000000 	.word	0x00000000
 8084a44:	40cd4c00 	.word	0x40cd4c00
 8084a48:	0809083e 	.word	0x0809083e
 8084a4c:	20000acc 	.word	0x20000acc
 8084a50:	08091166 	.word	0x08091166
 8084a54:	08090841 	.word	0x08090841
 8084a58:	3ff00000 	.word	0x3ff00000
 8084a5c:	0809085f 	.word	0x0809085f
 8084a60:	0809089a 	.word	0x0809089a
 8084a64:	080908b3 	.word	0x080908b3
 8084a68:	20000214 	.word	0x20000214
 8084a6c:	200006e0 	.word	0x200006e0
 8084a70:	080908e1 	.word	0x080908e1
 8084a74:	20000cb0 	.word	0x20000cb0
 8084a78:	080908ca 	.word	0x080908ca

08084a7c <_ZN5Print6printfIIiEEEjPKcDpT_>:
 8084a7c:	4613      	mov	r3, r2
 8084a7e:	460a      	mov	r2, r1
 8084a80:	2100      	movs	r1, #0
 8084a82:	f004 bc03 	b.w	808928c <_ZN5Print11printf_implEbPKcz>
	...

08084a88 <_Z26serialIncreaseInputCurrentv>:
        Serial.println("Failed writing string");
    }
}

void serialIncreaseInputCurrent(void)
{
 8084a88:	b538      	push	{r3, r4, r5, lr}
    int inputCurrent = pmic.getInputCurrentLimit();
 8084a8a:	481d      	ldr	r0, [pc, #116]	; (8084b00 <_Z26serialIncreaseInputCurrentv+0x78>)
 8084a8c:	f003 fe32 	bl	80886f4 <_ZN4PMIC20getInputCurrentLimitEv>
 8084a90:	4605      	mov	r5, r0
    Serial.printf("Old input current limit: %d\n\r", inputCurrent);
 8084a92:	f005 fafb 	bl	808a08c <_Z16_fetch_usbserialv>
 8084a96:	462a      	mov	r2, r5
 8084a98:	491a      	ldr	r1, [pc, #104]	; (8084b04 <_Z26serialIncreaseInputCurrentv+0x7c>)
 8084a9a:	f7ff ffef 	bl	8084a7c <_ZN5Print6printfIIiEEEjPKcDpT_>

    if (inputCurrent == 100)
    {
        inputCurrent = 150;
    }
    else if (inputCurrent == 100)
 8084a9e:	2d64      	cmp	r5, #100	; 0x64
 8084aa0:	d016      	beq.n	8084ad0 <_Z26serialIncreaseInputCurrentv+0x48>
    {
        inputCurrent = 150;
    }
    else if (inputCurrent == 150)
 8084aa2:	2d96      	cmp	r5, #150	; 0x96
 8084aa4:	d016      	beq.n	8084ad4 <_Z26serialIncreaseInputCurrentv+0x4c>
    {
        inputCurrent = 500;
    }
    else if (inputCurrent == 500)
 8084aa6:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 8084aaa:	d016      	beq.n	8084ada <_Z26serialIncreaseInputCurrentv+0x52>
    {
        inputCurrent = 900;
    }
    else if (inputCurrent == 900)
 8084aac:	f5b5 7f61 	cmp.w	r5, #900	; 0x384
 8084ab0:	d016      	beq.n	8084ae0 <_Z26serialIncreaseInputCurrentv+0x58>
    {
        inputCurrent = 1200;
    }
    else if (inputCurrent == 1200)
 8084ab2:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 8084ab6:	f240 54dc 	movw	r4, #1500	; 0x5dc
 8084aba:	d016      	beq.n	8084aea <_Z26serialIncreaseInputCurrentv+0x62>
    {
        inputCurrent = 1500;
    }
    else if (inputCurrent == 1500)
 8084abc:	42a5      	cmp	r5, r4
 8084abe:	d012      	beq.n	8084ae6 <_Z26serialIncreaseInputCurrentv+0x5e>
    {
        inputCurrent = 2000;
    }
    else if (inputCurrent == 2000)
    {
        inputCurrent = 3000;
 8084ac0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8084ac4:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 8084ac8:	bf14      	ite	ne
 8084aca:	462c      	movne	r4, r5
 8084acc:	4614      	moveq	r4, r2
 8084ace:	e00c      	b.n	8084aea <_Z26serialIncreaseInputCurrentv+0x62>
    {
        inputCurrent = 150;
    }
    else if (inputCurrent == 100)
    {
        inputCurrent = 150;
 8084ad0:	2496      	movs	r4, #150	; 0x96
 8084ad2:	e00a      	b.n	8084aea <_Z26serialIncreaseInputCurrentv+0x62>
    }
    else if (inputCurrent == 150)
    {
        inputCurrent = 500;
 8084ad4:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
 8084ad8:	e007      	b.n	8084aea <_Z26serialIncreaseInputCurrentv+0x62>
    }
    else if (inputCurrent == 500)
    {
        inputCurrent = 900;
 8084ada:	f44f 7461 	mov.w	r4, #900	; 0x384
 8084ade:	e004      	b.n	8084aea <_Z26serialIncreaseInputCurrentv+0x62>
    }
    else if (inputCurrent == 900)
    {
        inputCurrent = 1200;
 8084ae0:	f44f 6496 	mov.w	r4, #1200	; 0x4b0
 8084ae4:	e001      	b.n	8084aea <_Z26serialIncreaseInputCurrentv+0x62>
    {
        inputCurrent = 1500;
    }
    else if (inputCurrent == 1500)
    {
        inputCurrent = 2000;
 8084ae6:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
    else if (inputCurrent == 2000)
    {
        inputCurrent = 3000;
    }
    //delay(2000);
    pmic.setInputCurrentLimit(inputCurrent);
 8084aea:	b2a1      	uxth	r1, r4
 8084aec:	4804      	ldr	r0, [pc, #16]	; (8084b00 <_Z26serialIncreaseInputCurrentv+0x78>)
 8084aee:	f003 fe39 	bl	8088764 <_ZN4PMIC20setInputCurrentLimitEt>
    Serial.printf("New input current limit: %d\n\r", inputCurrent);
 8084af2:	f005 facb 	bl	808a08c <_Z16_fetch_usbserialv>
 8084af6:	4622      	mov	r2, r4
 8084af8:	4903      	ldr	r1, [pc, #12]	; (8084b08 <_Z26serialIncreaseInputCurrentv+0x80>)
 8084afa:	f7ff ffbf 	bl	8084a7c <_ZN5Print6printfIIiEEEjPKcDpT_>
 8084afe:	bd38      	pop	{r3, r4, r5, pc}
 8084b00:	20000aa4 	.word	0x20000aa4
 8084b04:	080909aa 	.word	0x080909aa
 8084b08:	080909c8 	.word	0x080909c8

08084b0c <_Z27serialIncreaseChargeCurrentv>:
}

void serialIncreaseChargeCurrent(void)
{
 8084b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    bool bit5 = 0;
    bool bit4 = 0;
    bool bit3 = 0;
    bool bit2 = 0;

    byte chargeCurrent = pmic.getChargeCurrent();
 8084b0e:	4833      	ldr	r0, [pc, #204]	; (8084bdc <_Z27serialIncreaseChargeCurrentv+0xd0>)
    pmic.setInputCurrentLimit(inputCurrent);
    Serial.printf("New input current limit: %d\n\r", inputCurrent);
}

void serialIncreaseChargeCurrent(void)
{
 8084b10:	b085      	sub	sp, #20
    bool bit5 = 0;
    bool bit4 = 0;
    bool bit3 = 0;
    bool bit2 = 0;

    byte chargeCurrent = pmic.getChargeCurrent();
 8084b12:	f003 fdfb 	bl	808870c <_ZN4PMIC16getChargeCurrentEv>
 8084b16:	4605      	mov	r5, r0
    //bit 7
    if (chargeCurrent & 0x80)
    {
        total_current += 2048;
 8084b18:	f010 0f80 	tst.w	r0, #128	; 0x80
 8084b1c:	bf0c      	ite	eq
 8084b1e:	2400      	moveq	r4, #0
 8084b20:	f44f 6400 	movne.w	r4, #2048	; 0x800
    }
    //bit 6
    if (chargeCurrent & 0x40)
 8084b24:	0647      	lsls	r7, r0, #25
    {
        total_current += 1024;
 8084b26:	bf48      	it	mi
 8084b28:	f504 6480 	addmi.w	r4, r4, #1024	; 0x400
    }
    //bit 5
    if (chargeCurrent & 0x20)
 8084b2c:	0686      	lsls	r6, r0, #26
    {
        total_current += 512;
 8084b2e:	bf48      	it	mi
 8084b30:	f504 7400 	addmi.w	r4, r4, #512	; 0x200
    }
    //bit 4
    if (chargeCurrent & 0x10) {
 8084b34:	06e8      	lsls	r0, r5, #27
        total_current += 256;
 8084b36:	bf48      	it	mi
 8084b38:	f504 7480 	addmi.w	r4, r4, #256	; 0x100
    }
    //bit 3
    if (chargeCurrent & 0x08)
 8084b3c:	0729      	lsls	r1, r5, #28
    {
        total_current += 128;
 8084b3e:	bf48      	it	mi
 8084b40:	3480      	addmi	r4, #128	; 0x80
    }
    //bit 2
    if (chargeCurrent & 0x04)
 8084b42:	076a      	lsls	r2, r5, #29
    {
        total_current += 64;
 8084b44:	bf48      	it	mi
 8084b46:	3440      	addmi	r4, #64	; 0x40
    }
    Serial.printf("Increasing Charge current from %d mA to ", total_current);
 8084b48:	f005 faa0 	bl	808a08c <_Z16_fetch_usbserialv>
 8084b4c:	4622      	mov	r2, r4
 8084b4e:	4924      	ldr	r1, [pc, #144]	; (8084be0 <_Z27serialIncreaseChargeCurrentv+0xd4>)
 8084b50:	f7ff ff94 	bl	8084a7c <_ZN5Print6printfIIiEEEjPKcDpT_>
    chargeCurrent += 4;
 8084b54:	1d28      	adds	r0, r5, #4
 8084b56:	b2c0      	uxtb	r0, r0
    total_current = 0;

    if (chargeCurrent & 0x80)
 8084b58:	0603      	lsls	r3, r0, #24
}

void serialIncreaseChargeCurrent(void)
{
    int total_current = 0;
    bool bit7 = 0;
 8084b5a:	bf58      	it	pl
 8084b5c:	2100      	movpl	r1, #0
    {
        total_current += 2048;
        bit7 = 1;
    }
    //bit 6
    if (chargeCurrent & 0x40)
 8084b5e:	f000 0340 	and.w	r3, r0, #64	; 0x40
    total_current = 0;

    if (chargeCurrent & 0x80)
    {
        total_current += 2048;
        bit7 = 1;
 8084b62:	bf46      	itte	mi
 8084b64:	2101      	movmi	r1, #1
    chargeCurrent += 4;
    total_current = 0;

    if (chargeCurrent & 0x80)
    {
        total_current += 2048;
 8084b66:	f44f 6400 	movmi.w	r4, #2048	; 0x800
    {
        total_current += 64;
    }
    Serial.printf("Increasing Charge current from %d mA to ", total_current);
    chargeCurrent += 4;
    total_current = 0;
 8084b6a:	460c      	movpl	r4, r1
    {
        total_current += 2048;
        bit7 = 1;
    }
    //bit 6
    if (chargeCurrent & 0x40)
 8084b6c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8084b70:	b113      	cbz	r3, 8084b78 <_Z27serialIncreaseChargeCurrentv+0x6c>
    {
        total_current += 1024;
 8084b72:	f504 6480 	add.w	r4, r4, #1024	; 0x400
        bit6 = 1;
 8084b76:	2201      	movs	r2, #1
    }
    //bit 5
    if (chargeCurrent & 0x20)
 8084b78:	f000 0520 	and.w	r5, r0, #32
 8084b7c:	f005 03ff 	and.w	r3, r5, #255	; 0xff
 8084b80:	b115      	cbz	r5, 8084b88 <_Z27serialIncreaseChargeCurrentv+0x7c>
    {
        total_current += 512;
 8084b82:	f504 7400 	add.w	r4, r4, #512	; 0x200
        bit5 = 1;
 8084b86:	2301      	movs	r3, #1
    }
    //bit 4
    if (chargeCurrent & 0x10)
 8084b88:	f000 0610 	and.w	r6, r0, #16
 8084b8c:	f006 05ff 	and.w	r5, r6, #255	; 0xff
 8084b90:	b116      	cbz	r6, 8084b98 <_Z27serialIncreaseChargeCurrentv+0x8c>
    {
        total_current += 256;
 8084b92:	f504 7480 	add.w	r4, r4, #256	; 0x100
        bit4 = 1;
 8084b96:	2501      	movs	r5, #1
    }
    //bit 3
    if (chargeCurrent & 0x08)
 8084b98:	f000 0708 	and.w	r7, r0, #8
 8084b9c:	f007 06ff 	and.w	r6, r7, #255	; 0xff
 8084ba0:	b10f      	cbz	r7, 8084ba6 <_Z27serialIncreaseChargeCurrentv+0x9a>
    {
        total_current += 128;
 8084ba2:	3480      	adds	r4, #128	; 0x80
        bit3 = 1;
 8084ba4:	2601      	movs	r6, #1
    }
    //bit 2
    if (chargeCurrent & 0x04)
 8084ba6:	f000 0004 	and.w	r0, r0, #4
 8084baa:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 8084bae:	b110      	cbz	r0, 8084bb6 <_Z27serialIncreaseChargeCurrentv+0xaa>
    {
        total_current += 64;
 8084bb0:	3440      	adds	r4, #64	; 0x40
        bit2 = 1;
 8084bb2:	2001      	movs	r0, #1
 8084bb4:	e000      	b.n	8084bb8 <_Z27serialIncreaseChargeCurrentv+0xac>
    bool bit7 = 0;
    bool bit6 = 0;
    bool bit5 = 0;
    bool bit4 = 0;
    bool bit3 = 0;
    bool bit2 = 0;
 8084bb6:	4638      	mov	r0, r7
    {
        total_current += 64;
        bit2 = 1;
    }

    pmic.setChargeCurrent(bit7, bit6, bit5, bit4, bit3, bit2);
 8084bb8:	9002      	str	r0, [sp, #8]
 8084bba:	e88d 0060 	stmia.w	sp, {r5, r6}
 8084bbe:	4807      	ldr	r0, [pc, #28]	; (8084bdc <_Z27serialIncreaseChargeCurrentv+0xd0>)
 8084bc0:	f003 fe33 	bl	808882a <_ZN4PMIC16setChargeCurrentEbbbbbb>
    chargeCurrent = pmic.getChargeCurrent();
 8084bc4:	4805      	ldr	r0, [pc, #20]	; (8084bdc <_Z27serialIncreaseChargeCurrentv+0xd0>)
 8084bc6:	f003 fda1 	bl	808870c <_ZN4PMIC16getChargeCurrentEv>
    Serial.printf("new charge current of %d mA\n\r", total_current);
 8084bca:	f005 fa5f 	bl	808a08c <_Z16_fetch_usbserialv>
 8084bce:	4622      	mov	r2, r4
 8084bd0:	4904      	ldr	r1, [pc, #16]	; (8084be4 <_Z27serialIncreaseChargeCurrentv+0xd8>)
 8084bd2:	f7ff ff53 	bl	8084a7c <_ZN5Print6printfIIiEEEjPKcDpT_>
}
 8084bd6:	b005      	add	sp, #20
 8084bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084bda:	bf00      	nop
 8084bdc:	20000aa4 	.word	0x20000aa4
 8084be0:	080909e6 	.word	0x080909e6
 8084be4:	08090a0f 	.word	0x08090a0f

08084be8 <_Z10readAlpha1v>:

    return CO_float;
}

float readAlpha1(void)
{
 8084be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084bec:	b08d      	sub	sp, #52	; 0x34
    float volt_half_Vref = 0;
    float sensorCurrent = 0; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent = 0;
    float correctedCurrent = 0;
    float alpha1_ppmraw = 0;
    String alpha1_ppmRounded = "";
 8084bee:	49aa      	ldr	r1, [pc, #680]	; (8084e98 <_Z10readAlpha1v+0x2b0>)
 8084bf0:	a804      	add	r0, sp, #16
 8084bf2:	f004 f854 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>

    if (debugging_enabled)
 8084bf6:	4ba9      	ldr	r3, [pc, #676]	; (8084e9c <_Z10readAlpha1v+0x2b4>)
 8084bf8:	681a      	ldr	r2, [r3, #0]
 8084bfa:	469a      	mov	sl, r3
 8084bfc:	b122      	cbz	r2, 8084c08 <_Z10readAlpha1v+0x20>
    {
        Serial.println("Start of alpha read");
 8084bfe:	f005 fa45 	bl	808a08c <_Z16_fetch_usbserialv>
 8084c02:	49a7      	ldr	r1, [pc, #668]	; (8084ea0 <_Z10readAlpha1v+0x2b8>)
 8084c04:	f004 fa0d 	bl	8089022 <_ZN5Print7printlnEPKc>
    }
    digitalWrite(lmp91000_1_en, LOW);   //enable
 8084c08:	4da6      	ldr	r5, [pc, #664]	; (8084ea4 <_Z10readAlpha1v+0x2bc>)
 8084c0a:	2100      	movs	r1, #0
 8084c0c:	8828      	ldrh	r0, [r5, #0]
 8084c0e:	f005 fcbe 	bl	808a58e <digitalWrite>

    if (Wire.requestFrom(0x49, 1) == 0)
 8084c12:	f005 fd47 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 8084c16:	2201      	movs	r2, #1
 8084c18:	2149      	movs	r1, #73	; 0x49
 8084c1a:	f005 fbf1 	bl	808a400 <_ZN7TwoWire11requestFromEii>
 8084c1e:	9503      	str	r5, [sp, #12]
 8084c20:	4604      	mov	r4, r0
 8084c22:	b950      	cbnz	r0, 8084c3a <_Z10readAlpha1v+0x52>
    {
        if (debugging_enabled)
 8084c24:	f8da 3000 	ldr.w	r3, [sl]
 8084c28:	2b00      	cmp	r3, #0
 8084c2a:	d03e      	beq.n	8084caa <_Z10readAlpha1v+0xc2>
        {
            Serial.println("Couldn't communicate with LMP91000_1");
 8084c2c:	f005 fa2e 	bl	808a08c <_Z16_fetch_usbserialv>
 8084c30:	499d      	ldr	r1, [pc, #628]	; (8084ea8 <_Z10readAlpha1v+0x2c0>)
 8084c32:	f004 f9f6 	bl	8089022 <_ZN5Print7printlnEPKc>
            writeLogFile("Couldn't communicate with LMP91000_1");
 8084c36:	499c      	ldr	r1, [pc, #624]	; (8084ea8 <_Z10readAlpha1v+0x2c0>)
 8084c38:	e02d      	b.n	8084c96 <_Z10readAlpha1v+0xae>
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }
    else
    {
        half_Vref = ads1.readADC_SingleEnded(3); //half of Vref
 8084c3a:	2103      	movs	r1, #3
 8084c3c:	489b      	ldr	r0, [pc, #620]	; (8084eac <_Z10readAlpha1v+0x2c4>)
 8084c3e:	f001 f96a 	bl	8085f16 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
 8084c42:	4604      	mov	r4, r0
        volt_half_Vref = half_Vref * ads_bitmv;
        if (abs((volt_half_Vref) / 1000 - 1.25) > 0.5)
 8084c44:	f006 fc7a 	bl	808b53c <__aeabi_i2f>
        //delay(200);
    }
    else
    {
        half_Vref = ads1.readADC_SingleEnded(3); //half of Vref
        volt_half_Vref = half_Vref * ads_bitmv;
 8084c48:	4b99      	ldr	r3, [pc, #612]	; (8084eb0 <_Z10readAlpha1v+0x2c8>)
        if (abs((volt_half_Vref) / 1000 - 1.25) > 0.5)
 8084c4a:	6819      	ldr	r1, [r3, #0]
 8084c4c:	f006 fcca 	bl	808b5e4 <__aeabi_fmul>
 8084c50:	4998      	ldr	r1, [pc, #608]	; (8084eb4 <_Z10readAlpha1v+0x2cc>)
 8084c52:	f006 fd7b 	bl	808b74c <__aeabi_fdiv>
 8084c56:	f006 f81b 	bl	808ac90 <__aeabi_f2d>
 8084c5a:	2200      	movs	r2, #0
 8084c5c:	4b96      	ldr	r3, [pc, #600]	; (8084eb8 <_Z10readAlpha1v+0x2d0>)
 8084c5e:	4606      	mov	r6, r0
 8084c60:	460f      	mov	r7, r1
 8084c62:	f005 feb5 	bl	808a9d0 <__aeabi_dsub>
 8084c66:	f006 fb17 	bl	808b298 <__aeabi_d2iz>
 8084c6a:	2800      	cmp	r0, #0
 8084c6c:	bfb8      	it	lt
 8084c6e:	4240      	neglt	r0, r0
 8084c70:	f005 fffc 	bl	808ac6c <__aeabi_i2d>
 8084c74:	2200      	movs	r2, #0
 8084c76:	4b91      	ldr	r3, [pc, #580]	; (8084ebc <_Z10readAlpha1v+0x2d4>)
 8084c78:	f006 faee 	bl	808b258 <__aeabi_dcmpgt>
 8084c7c:	b1b0      	cbz	r0, 8084cac <_Z10readAlpha1v+0xc4>
        {
            if (debugging_enabled)
 8084c7e:	f8da 3000 	ldr.w	r3, [sl]
 8084c82:	b19b      	cbz	r3, 8084cac <_Z10readAlpha1v+0xc4>
            {
                Serial.printf("Halfvolt: %1.2f\n\r", volt_half_Vref / 1000);
 8084c84:	f005 fa02 	bl	808a08c <_Z16_fetch_usbserialv>
 8084c88:	2100      	movs	r1, #0
 8084c8a:	e9cd 6700 	strd	r6, r7, [sp]
 8084c8e:	4a8c      	ldr	r2, [pc, #560]	; (8084ec0 <_Z10readAlpha1v+0x2d8>)
 8084c90:	f004 fafc 	bl	808928c <_ZN5Print11printf_implEbPKcz>
                writeLogFile("Halfvolt higher than 0.5");
 8084c94:	498b      	ldr	r1, [pc, #556]	; (8084ec4 <_Z10readAlpha1v+0x2dc>)
 8084c96:	a808      	add	r0, sp, #32
 8084c98:	f004 f801 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
 8084c9c:	a808      	add	r0, sp, #32
 8084c9e:	f7fc fd3f 	bl	8081720 <_Z12writeLogFile6String>
 8084ca2:	a808      	add	r0, sp, #32
 8084ca4:	f003 ffb4 	bl	8088c10 <_ZN6StringD1Ev>
 8084ca8:	e000      	b.n	8084cac <_Z10readAlpha1v+0xc4>
{
    //read from CO sensor
    int32_t A0_gas = 0; //gas
    int32_t A1_aux = 0; //aux out
    int32_t A2_temperature = 0; //temperature
    int32_t half_Vref = 0; //half of Vref
 8084caa:	461c      	mov	r4, r3
                writeLogFile("Halfvolt higher than 0.5");
            }
        }
    }

    if (lmp91000_1.read(LMP91000_STATUS_REG) == 0)
 8084cac:	2100      	movs	r1, #0
 8084cae:	4886      	ldr	r0, [pc, #536]	; (8084ec8 <_Z10readAlpha1v+0x2e0>)
 8084cb0:	f000 ffdb 	bl	8085c6a <_ZN8LMP910004readEh>
 8084cb4:	b988      	cbnz	r0, 8084cda <_Z10readAlpha1v+0xf2>
    {
        if (debugging_enabled)
 8084cb6:	f8da 3000 	ldr.w	r3, [sl]
 8084cba:	b173      	cbz	r3, 8084cda <_Z10readAlpha1v+0xf2>
        {
            Serial.println("Status = 0 from LMP91000 status reg");
 8084cbc:	f005 f9e6 	bl	808a08c <_Z16_fetch_usbserialv>
 8084cc0:	4982      	ldr	r1, [pc, #520]	; (8084ecc <_Z10readAlpha1v+0x2e4>)
 8084cc2:	f004 f9ae 	bl	8089022 <_ZN5Print7printlnEPKc>
            writeLogFile("LMP1000 status = 0");
 8084cc6:	4982      	ldr	r1, [pc, #520]	; (8084ed0 <_Z10readAlpha1v+0x2e8>)
 8084cc8:	a808      	add	r0, sp, #32
 8084cca:	f003 ffe8 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
 8084cce:	a808      	add	r0, sp, #32
 8084cd0:	f7fc fd26 	bl	8081720 <_Z12writeLogFile6String>
 8084cd4:	a808      	add	r0, sp, #32
 8084cd6:	f003 ff9b 	bl	8088c10 <_ZN6StringD1Ev>
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }

    //if(Wire.requestFrom(0x49,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref)/1000 - 1.25) > 0.5)){
    if (Wire.requestFrom(0x49, 1) == 0 || lmp91000_1.read(LMP91000_STATUS_REG) == 0)
 8084cda:	f005 fce3 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 8084cde:	2201      	movs	r2, #1
 8084ce0:	2149      	movs	r1, #73	; 0x49
 8084ce2:	f005 fb8d 	bl	808a400 <_ZN7TwoWire11requestFromEii>
 8084ce6:	2800      	cmp	r0, #0
 8084ce8:	f000 80bc 	beq.w	8084e64 <_Z10readAlpha1v+0x27c>
 8084cec:	2100      	movs	r1, #0
 8084cee:	4876      	ldr	r0, [pc, #472]	; (8084ec8 <_Z10readAlpha1v+0x2e0>)
 8084cf0:	f000 ffbb 	bl	8085c6a <_ZN8LMP910004readEh>
 8084cf4:	2800      	cmp	r0, #0
 8084cf6:	f000 80b5 	beq.w	8084e64 <_Z10readAlpha1v+0x27c>
 8084cfa:	2400      	movs	r4, #0
 8084cfc:	4625      	mov	r5, r4
 8084cfe:	4627      	mov	r7, r4
 8084d00:	4626      	mov	r6, r4
 8084d02:	f04f 080a 	mov.w	r8, #10
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for (uint8_t i = 0; i < ALPHA_ADC_READ_AMOUNT; i++)
        {
            A0_gas += ads1.readADC_SingleEnded(0); //gas
 8084d06:	2100      	movs	r1, #0
 8084d08:	4868      	ldr	r0, [pc, #416]	; (8084eac <_Z10readAlpha1v+0x2c4>)
 8084d0a:	f001 f904 	bl	8085f16 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
            A1_aux += ads1.readADC_SingleEnded(1); //aux out
 8084d0e:	2101      	movs	r1, #1
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for (uint8_t i = 0; i < ALPHA_ADC_READ_AMOUNT; i++)
        {
            A0_gas += ads1.readADC_SingleEnded(0); //gas
 8084d10:	4406      	add	r6, r0
            A1_aux += ads1.readADC_SingleEnded(1); //aux out
 8084d12:	4866      	ldr	r0, [pc, #408]	; (8084eac <_Z10readAlpha1v+0x2c4>)
 8084d14:	f001 f8ff 	bl	8085f16 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
            A2_temperature += ads1.readADC_SingleEnded(2); //temperature
 8084d18:	2102      	movs	r1, #2
        A2_temperature = 0;
        half_Vref = 0;
        for (uint8_t i = 0; i < ALPHA_ADC_READ_AMOUNT; i++)
        {
            A0_gas += ads1.readADC_SingleEnded(0); //gas
            A1_aux += ads1.readADC_SingleEnded(1); //aux out
 8084d1a:	4407      	add	r7, r0
            A2_temperature += ads1.readADC_SingleEnded(2); //temperature
 8084d1c:	4863      	ldr	r0, [pc, #396]	; (8084eac <_Z10readAlpha1v+0x2c4>)
 8084d1e:	f001 f8fa 	bl	8085f16 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
            half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
 8084d22:	2103      	movs	r1, #3
        half_Vref = 0;
        for (uint8_t i = 0; i < ALPHA_ADC_READ_AMOUNT; i++)
        {
            A0_gas += ads1.readADC_SingleEnded(0); //gas
            A1_aux += ads1.readADC_SingleEnded(1); //aux out
            A2_temperature += ads1.readADC_SingleEnded(2); //temperature
 8084d24:	4405      	add	r5, r0
            half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
 8084d26:	4861      	ldr	r0, [pc, #388]	; (8084eac <_Z10readAlpha1v+0x2c4>)
 8084d28:	f001 f8f5 	bl	8085f16 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
 8084d2c:	f108 38ff 	add.w	r8, r8, #4294967295
    {
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for (uint8_t i = 0; i < ALPHA_ADC_READ_AMOUNT; i++)
 8084d30:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
        {
            A0_gas += ads1.readADC_SingleEnded(0); //gas
            A1_aux += ads1.readADC_SingleEnded(1); //aux out
            A2_temperature += ads1.readADC_SingleEnded(2); //temperature
            half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
 8084d34:	4404      	add	r4, r0
    {
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for (uint8_t i = 0; i < ALPHA_ADC_READ_AMOUNT; i++)
 8084d36:	d1e6      	bne.n	8084d06 <_Z10readAlpha1v+0x11e>
            A1_aux += ads1.readADC_SingleEnded(1); //aux out
            A2_temperature += ads1.readADC_SingleEnded(2); //temperature
            half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
        }

        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
 8084d38:	230a      	movs	r3, #10
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;
 8084d3a:	fb94 f4f3 	sdiv	r4, r4, r3
            A1_aux += ads1.readADC_SingleEnded(1); //aux out
            A2_temperature += ads1.readADC_SingleEnded(2); //temperature
            half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
        }

        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
 8084d3e:	fb96 f6f3 	sdiv	r6, r6, r3
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
 8084d42:	fb97 f7f3 	sdiv	r7, r7, r3
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
 8084d46:	fb95 f5f3 	sdiv	r5, r5, r3
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;

        volt0_gas = A0_gas * ads_bitmv;
 8084d4a:	4b59      	ldr	r3, [pc, #356]	; (8084eb0 <_Z10readAlpha1v+0x2c8>)
        volt1_aux = A1_aux * ads_bitmv;
        volt2_temperature = A2_temperature * ads_bitmv;
        volt_half_Vref = half_Vref * ads_bitmv;
 8084d4c:	4620      	mov	r0, r4
        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;

        volt0_gas = A0_gas * ads_bitmv;
 8084d4e:	f8d3 8000 	ldr.w	r8, [r3]
        volt1_aux = A1_aux * ads_bitmv;
        volt2_temperature = A2_temperature * ads_bitmv;
        volt_half_Vref = half_Vref * ads_bitmv;
 8084d52:	f006 fbf3 	bl	808b53c <__aeabi_i2f>
 8084d56:	4641      	mov	r1, r8
 8084d58:	f006 fc44 	bl	808b5e4 <__aeabi_fmul>
 8084d5c:	4681      	mov	r9, r0

        sensorCurrent = (volt_half_Vref - volt0_gas) / (-1 * 120); // Working Electrode current in microamps (millivolts / Kohms)
 8084d5e:	4630      	mov	r0, r6
 8084d60:	f006 fbec 	bl	808b53c <__aeabi_i2f>
 8084d64:	4641      	mov	r1, r8
 8084d66:	f006 fc3d 	bl	808b5e4 <__aeabi_fmul>
 8084d6a:	4601      	mov	r1, r0
 8084d6c:	4648      	mov	r0, r9
 8084d6e:	f006 fb2f 	bl	808b3d0 <__aeabi_fsub>
 8084d72:	4958      	ldr	r1, [pc, #352]	; (8084ed4 <_Z10readAlpha1v+0x2ec>)
 8084d74:	f006 fcea 	bl	808b74c <__aeabi_fdiv>
 8084d78:	4683      	mov	fp, r0
        auxCurrent = (volt_half_Vref - volt1_aux) / (-1 * 150);
 8084d7a:	4638      	mov	r0, r7
 8084d7c:	f006 fbde 	bl	808b53c <__aeabi_i2f>
 8084d80:	4641      	mov	r1, r8
 8084d82:	f006 fc2f 	bl	808b5e4 <__aeabi_fmul>
 8084d86:	4601      	mov	r1, r0
 8084d88:	4648      	mov	r0, r9
 8084d8a:	f006 fb21 	bl	808b3d0 <__aeabi_fsub>
 8084d8e:	4952      	ldr	r1, [pc, #328]	; (8084ed8 <_Z10readAlpha1v+0x2f0>)
 8084d90:	f006 fcdc 	bl	808b74c <__aeabi_fdiv>
 8084d94:	4680      	mov	r8, r0
        //{1, -1, -0.76}, //CO-A4 (<=10C, 20C, >=30C)
        if (readTemperature() <= 15)
 8084d96:	f7fc faab 	bl	80812f0 <_Z15readTemperaturev>
 8084d9a:	4950      	ldr	r1, [pc, #320]	; (8084edc <_Z10readAlpha1v+0x2f4>)
 8084d9c:	f006 fdca 	bl	808b934 <__aeabi_fcmple>
 8084da0:	b120      	cbz	r0, 8084dac <_Z10readAlpha1v+0x1c4>
        {
            correctedCurrent = ((sensorCurrent)-(auxCurrent));
 8084da2:	4641      	mov	r1, r8
 8084da4:	4658      	mov	r0, fp
 8084da6:	f006 fb13 	bl	808b3d0 <__aeabi_fsub>
 8084daa:	e01f      	b.n	8084dec <_Z10readAlpha1v+0x204>
        }
        else if (readTemperature() <= 25)
 8084dac:	f7fc faa0 	bl	80812f0 <_Z15readTemperaturev>
 8084db0:	494b      	ldr	r1, [pc, #300]	; (8084ee0 <_Z10readAlpha1v+0x2f8>)
 8084db2:	f006 fdbf 	bl	808b934 <__aeabi_fcmple>
 8084db6:	b120      	cbz	r0, 8084dc2 <_Z10readAlpha1v+0x1da>
        {
            correctedCurrent = ((sensorCurrent)-(-1) * (auxCurrent));
 8084db8:	4641      	mov	r1, r8
 8084dba:	4658      	mov	r0, fp
 8084dbc:	f006 fb0a 	bl	808b3d4 <__addsf3>
 8084dc0:	e014      	b.n	8084dec <_Z10readAlpha1v+0x204>
        }
        else
        {
            correctedCurrent = ((sensorCurrent)-(-0.76) * (auxCurrent));
 8084dc2:	4640      	mov	r0, r8
 8084dc4:	f005 ff64 	bl	808ac90 <__aeabi_f2d>
 8084dc8:	a32f      	add	r3, pc, #188	; (adr r3, 8084e88 <_Z10readAlpha1v+0x2a0>)
 8084dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084dce:	f005 ffb3 	bl	808ad38 <__aeabi_dmul>
 8084dd2:	4680      	mov	r8, r0
 8084dd4:	4658      	mov	r0, fp
 8084dd6:	4689      	mov	r9, r1
 8084dd8:	f005 ff5a 	bl	808ac90 <__aeabi_f2d>
 8084ddc:	4602      	mov	r2, r0
 8084dde:	460b      	mov	r3, r1
 8084de0:	4640      	mov	r0, r8
 8084de2:	4649      	mov	r1, r9
 8084de4:	f005 fdf6 	bl	808a9d4 <__adddf3>
 8084de8:	f006 fa9e 	bl	808b328 <__aeabi_d2f>
        }
        alpha1_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 8084dec:	f005 ff50 	bl	808ac90 <__aeabi_f2d>
 8084df0:	a327      	add	r3, pc, #156	; (adr r3, 8084e90 <_Z10readAlpha1v+0x2a8>)
 8084df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084df6:	f006 f8c9 	bl	808af8c <__aeabi_ddiv>
 8084dfa:	f006 fa95 	bl	808b328 <__aeabi_d2f>
        alpha1_ppmRounded = String(alpha1_ppmraw, 2);
 8084dfe:	2202      	movs	r2, #2
 8084e00:	4601      	mov	r1, r0
        }
        else
        {
            correctedCurrent = ((sensorCurrent)-(-0.76) * (auxCurrent));
        }
        alpha1_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 8084e02:	4680      	mov	r8, r0
        alpha1_ppmRounded = String(alpha1_ppmraw, 2);
 8084e04:	a808      	add	r0, sp, #32
 8084e06:	f003 ffe4 	bl	8088dd2 <_ZN6StringC1Efi>
 8084e0a:	a908      	add	r1, sp, #32
 8084e0c:	a804      	add	r0, sp, #16
 8084e0e:	f003 ff90 	bl	8088d32 <_ZN6StringaSEOS_>
 8084e12:	a808      	add	r0, sp, #32
 8084e14:	f003 fefc 	bl	8088c10 <_ZN6StringD1Ev>
    }

    digitalWrite(lmp91000_1_en, HIGH);  //disable
 8084e18:	9b03      	ldr	r3, [sp, #12]
 8084e1a:	2101      	movs	r1, #1
 8084e1c:	8818      	ldrh	r0, [r3, #0]
 8084e1e:	f005 fbb6 	bl	808a58e <digitalWrite>

    if (debugging_enabled)
 8084e22:	f8da 3000 	ldr.w	r3, [sl]
 8084e26:	b33b      	cbz	r3, 8084e78 <_Z10readAlpha1v+0x290>
    {
        Serial.print("CO measurements:  \n\r");
 8084e28:	f005 f930 	bl	808a08c <_Z16_fetch_usbserialv>
 8084e2c:	492d      	ldr	r1, [pc, #180]	; (8084ee4 <_Z10readAlpha1v+0x2fc>)
 8084e2e:	f004 f8e5 	bl	8088ffc <_ZN5Print5printEPKc>
        Serial.printf("A0_gas: %d\n\r", A0_gas);
 8084e32:	f005 f92b 	bl	808a08c <_Z16_fetch_usbserialv>
 8084e36:	4632      	mov	r2, r6
 8084e38:	492b      	ldr	r1, [pc, #172]	; (8084ee8 <_Z10readAlpha1v+0x300>)
 8084e3a:	f7ff fe1f 	bl	8084a7c <_ZN5Print6printfIIiEEEjPKcDpT_>
        Serial.printf("A1_aux: %d\n\r", A1_aux);
 8084e3e:	f005 f925 	bl	808a08c <_Z16_fetch_usbserialv>
 8084e42:	463a      	mov	r2, r7
 8084e44:	4929      	ldr	r1, [pc, #164]	; (8084eec <_Z10readAlpha1v+0x304>)
 8084e46:	f7ff fe19 	bl	8084a7c <_ZN5Print6printfIIiEEEjPKcDpT_>
        Serial.printf("A2_temp: %d\n\r", A2_temperature);
 8084e4a:	f005 f91f 	bl	808a08c <_Z16_fetch_usbserialv>
 8084e4e:	462a      	mov	r2, r5
 8084e50:	4927      	ldr	r1, [pc, #156]	; (8084ef0 <_Z10readAlpha1v+0x308>)
 8084e52:	f7ff fe13 	bl	8084a7c <_ZN5Print6printfIIiEEEjPKcDpT_>
        Serial.printf("half_vref: %d\n\r", half_Vref);
 8084e56:	f005 f919 	bl	808a08c <_Z16_fetch_usbserialv>
 8084e5a:	4622      	mov	r2, r4
 8084e5c:	4925      	ldr	r1, [pc, #148]	; (8084ef4 <_Z10readAlpha1v+0x30c>)
 8084e5e:	f7ff fe0d 	bl	8084a7c <_ZN5Print6printfIIiEEEjPKcDpT_>
 8084e62:	e009      	b.n	8084e78 <_Z10readAlpha1v+0x290>
float readAlpha1(void)
{
    //read from CO sensor
    int32_t A0_gas = 0; //gas
    int32_t A1_aux = 0; //aux out
    int32_t A2_temperature = 0; //temperature
 8084e64:	2500      	movs	r5, #0
    }

    //if(Wire.requestFrom(0x49,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref)/1000 - 1.25) > 0.5)){
    if (Wire.requestFrom(0x49, 1) == 0 || lmp91000_1.read(LMP91000_STATUS_REG) == 0)
    {
        alpha1_ppmRounded = "-99";
 8084e66:	4924      	ldr	r1, [pc, #144]	; (8084ef8 <_Z10readAlpha1v+0x310>)
 8084e68:	a804      	add	r0, sp, #16
 8084e6a:	f003 ff6a 	bl	8088d42 <_ZN6StringaSEPKc>
    float volt2_temperature = 0; //need to code to be able to ensure correct sigfigs..
    float volt_half_Vref = 0;
    float sensorCurrent = 0; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent = 0;
    float correctedCurrent = 0;
    float alpha1_ppmraw = 0;
 8084e6e:	f04f 0800 	mov.w	r8, #0

float readAlpha1(void)
{
    //read from CO sensor
    int32_t A0_gas = 0; //gas
    int32_t A1_aux = 0; //aux out
 8084e72:	462f      	mov	r7, r5
}

float readAlpha1(void)
{
    //read from CO sensor
    int32_t A0_gas = 0; //gas
 8084e74:	462e      	mov	r6, r5
 8084e76:	e7cf      	b.n	8084e18 <_Z10readAlpha1v+0x230>
    float volt_half_Vref = 0;
    float sensorCurrent = 0; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent = 0;
    float correctedCurrent = 0;
    float alpha1_ppmraw = 0;
    String alpha1_ppmRounded = "";
 8084e78:	a804      	add	r0, sp, #16
 8084e7a:	f003 fec9 	bl	8088c10 <_ZN6StringD1Ev>
        Serial.printf("A1_aux: %d\n\r", A1_aux);
        Serial.printf("A2_temp: %d\n\r", A2_temperature);
        Serial.printf("half_vref: %d\n\r", half_Vref);
    }
    return alpha1_ppmraw;
}
 8084e7e:	4640      	mov	r0, r8
 8084e80:	b00d      	add	sp, #52	; 0x34
 8084e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084e86:	bf00      	nop
 8084e88:	851eb852 	.word	0x851eb852
 8084e8c:	3fe851eb 	.word	0x3fe851eb
 8084e90:	d4fdf3b6 	.word	0xd4fdf3b6
 8084e94:	3fd6e978 	.word	0x3fd6e978
 8084e98:	080917cc 	.word	0x080917cc
 8084e9c:	20000acc 	.word	0x20000acc
 8084ea0:	08090a2d 	.word	0x08090a2d
 8084ea4:	20000098 	.word	0x20000098
 8084ea8:	08090a41 	.word	0x08090a41
 8084eac:	20000a94 	.word	0x20000a94
 8084eb0:	200000a0 	.word	0x200000a0
 8084eb4:	447a0000 	.word	0x447a0000
 8084eb8:	3ff40000 	.word	0x3ff40000
 8084ebc:	3fe00000 	.word	0x3fe00000
 8084ec0:	08090a66 	.word	0x08090a66
 8084ec4:	08090a78 	.word	0x08090a78
 8084ec8:	200001e0 	.word	0x200001e0
 8084ecc:	08090a91 	.word	0x08090a91
 8084ed0:	08090ab5 	.word	0x08090ab5
 8084ed4:	c2f00000 	.word	0xc2f00000
 8084ed8:	c3160000 	.word	0xc3160000
 8084edc:	41700000 	.word	0x41700000
 8084ee0:	41c80000 	.word	0x41c80000
 8084ee4:	08090ac8 	.word	0x08090ac8
 8084ee8:	08090add 	.word	0x08090add
 8084eec:	08090aea 	.word	0x08090aea
 8084ef0:	08090af7 	.word	0x08090af7
 8084ef4:	08090b05 	.word	0x08090b05
 8084ef8:	0808f156 	.word	0x0808f156

08084efc <_Z20readAlpha1Constantlyv>:
        Serial.println("\n\rIncorrect password!");
    }
}

void readAlpha1Constantly(void)
{
 8084efc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    while (!Serial.available())
    {
        CO_float_A = readCO_A();
 8084efe:	4d0d      	ldr	r5, [pc, #52]	; (8084f34 <_Z20readAlpha1Constantlyv+0x38>)
    }
}

void readAlpha1Constantly(void)
{
    while (!Serial.available())
 8084f00:	f005 f8c4 	bl	808a08c <_Z16_fetch_usbserialv>
 8084f04:	6803      	ldr	r3, [r0, #0]
 8084f06:	691b      	ldr	r3, [r3, #16]
 8084f08:	4798      	blx	r3
 8084f0a:	4604      	mov	r4, r0
 8084f0c:	b980      	cbnz	r0, 8084f30 <_Z20readAlpha1Constantlyv+0x34>
float readCO_A(void)
{
    float float_offset;
    float CO_float;

    CO_float = readAlpha1();
 8084f0e:	f7ff fe6b 	bl	8084be8 <_Z10readAlpha1v>

void readAlpha1Constantly(void)
{
    while (!Serial.available())
    {
        CO_float_A = readCO_A();
 8084f12:	6028      	str	r0, [r5, #0]
        Serial.printf("CO: %1.3f ppm\n\r", CO_float_A);
 8084f14:	f005 f8ba 	bl	808a08c <_Z16_fetch_usbserialv>
 8084f18:	4606      	mov	r6, r0
 8084f1a:	6828      	ldr	r0, [r5, #0]
 8084f1c:	f005 feb8 	bl	808ac90 <__aeabi_f2d>
 8084f20:	4a05      	ldr	r2, [pc, #20]	; (8084f38 <_Z20readAlpha1Constantlyv+0x3c>)
 8084f22:	e9cd 0100 	strd	r0, r1, [sp]
 8084f26:	4621      	mov	r1, r4
 8084f28:	4630      	mov	r0, r6
 8084f2a:	f004 f9af 	bl	808928c <_ZN5Print11printf_implEbPKcz>
 8084f2e:	e7e7      	b.n	8084f00 <_Z20readAlpha1Constantlyv+0x4>
    }
}
 8084f30:	b002      	add	sp, #8
 8084f32:	bd70      	pop	{r4, r5, r6, pc}
 8084f34:	20000770 	.word	0x20000770
 8084f38:	08090b15 	.word	0x08090b15

08084f3c <_Z10serialMenuv>:
}

/************************Serial menu stuff******************/

void serialMenu()
{
 8084f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    byte fault;
    byte systemStatus;
    incomingByte = '0';
 8084f3e:	4cc8      	ldr	r4, [pc, #800]	; (8085260 <_Z10serialMenuv+0x324>)
 8084f40:	2330      	movs	r3, #48	; 0x30

        case '!':
            Serial.println("Outputting VOCs continuously!  Press any button to exit...");
            while (!Serial.available())
            {
                if (!bme.performReading())
 8084f42:	4ec8      	ldr	r6, [pc, #800]	; (8085264 <_Z10serialMenuv+0x328>)
}

/************************Serial menu stuff******************/

void serialMenu()
{
 8084f44:	b08d      	sub	sp, #52	; 0x34
    byte fault;
    byte systemStatus;
    incomingByte = '0';
 8084f46:	7023      	strb	r3, [r4, #0]
    while (incomingByte != 'x')
 8084f48:	7823      	ldrb	r3, [r4, #0]
 8084f4a:	2b78      	cmp	r3, #120	; 0x78
 8084f4c:	f000 8440 	beq.w	80857d0 <_Z10serialMenuv+0x894>
    {
        Serial.print("Menu>");
 8084f50:	f005 f89c 	bl	808a08c <_Z16_fetch_usbserialv>
 8084f54:	49c4      	ldr	r1, [pc, #784]	; (8085268 <_Z10serialMenuv+0x32c>)
 8084f56:	f004 f851 	bl	8088ffc <_ZN5Print5printEPKc>
        Serial.flush();
 8084f5a:	f005 f897 	bl	808a08c <_Z16_fetch_usbserialv>
 8084f5e:	6803      	ldr	r3, [r0, #0]
 8084f60:	69db      	ldr	r3, [r3, #28]
 8084f62:	4798      	blx	r3
        while (!Serial.available());
 8084f64:	f005 f892 	bl	808a08c <_Z16_fetch_usbserialv>
 8084f68:	6803      	ldr	r3, [r0, #0]
 8084f6a:	691b      	ldr	r3, [r3, #16]
 8084f6c:	4798      	blx	r3
 8084f6e:	2800      	cmp	r0, #0
 8084f70:	d0f8      	beq.n	8084f64 <_Z10serialMenuv+0x28>
        incomingByte = Serial.read();
 8084f72:	f005 f88b 	bl	808a08c <_Z16_fetch_usbserialv>
 8084f76:	6803      	ldr	r3, [r0, #0]
 8084f78:	695b      	ldr	r3, [r3, #20]
 8084f7a:	4798      	blx	r3
 8084f7c:	b2c0      	uxtb	r0, r0
 8084f7e:	7020      	strb	r0, [r4, #0]

        switch (incomingByte)
 8084f80:	3821      	subs	r0, #33	; 0x21
 8084f82:	2859      	cmp	r0, #89	; 0x59
 8084f84:	d8e0      	bhi.n	8084f48 <_Z10serialMenuv+0xc>
 8084f86:	a301      	add	r3, pc, #4	; (adr r3, 8084f8c <_Z10serialMenuv+0x50>)
 8084f88:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8084f8c:	080856fb 	.word	0x080856fb
 8084f90:	08084f49 	.word	0x08084f49
 8084f94:	0808578f 	.word	0x0808578f
 8084f98:	08084f49 	.word	0x08084f49
 8084f9c:	08084f49 	.word	0x08084f49
 8084fa0:	08084f49 	.word	0x08084f49
 8084fa4:	08084f49 	.word	0x08084f49
 8084fa8:	08084f49 	.word	0x08084f49
 8084fac:	08084f49 	.word	0x08084f49
 8084fb0:	080857c1 	.word	0x080857c1
 8084fb4:	08084f49 	.word	0x08084f49
 8084fb8:	08084f49 	.word	0x08084f49
 8084fbc:	08084f49 	.word	0x08084f49
 8084fc0:	08084f49 	.word	0x08084f49
 8084fc4:	08084f49 	.word	0x08084f49
 8084fc8:	080856f5 	.word	0x080856f5
 8084fcc:	08085537 	.word	0x08085537
 8084fd0:	0808553d 	.word	0x0808553d
 8084fd4:	08085543 	.word	0x08085543
 8084fd8:	08085629 	.word	0x08085629
 8084fdc:	08085645 	.word	0x08085645
 8084fe0:	0808566d 	.word	0x0808566d
 8084fe4:	08085689 	.word	0x08085689
 8084fe8:	080856b1 	.word	0x080856b1
 8084fec:	080856ef 	.word	0x080856ef
 8084ff0:	08084f49 	.word	0x08084f49
 8084ff4:	08084f49 	.word	0x08084f49
 8084ff8:	08084f49 	.word	0x08084f49
 8084ffc:	08084f49 	.word	0x08084f49
 8085000:	08084f49 	.word	0x08084f49
 8085004:	080857c9 	.word	0x080857c9
 8085008:	08085767 	.word	0x08085767
 808500c:	080851fd 	.word	0x080851fd
 8085010:	08085203 	.word	0x08085203
 8085014:	0808522f 	.word	0x0808522f
 8085018:	0808524d 	.word	0x0808524d
 808501c:	080852c5 	.word	0x080852c5
 8085020:	080852e1 	.word	0x080852e1
 8085024:	080852f7 	.word	0x080852f7
 8085028:	0808531f 	.word	0x0808531f
 808502c:	08085339 	.word	0x08085339
 8085030:	0808533f 	.word	0x0808533f
 8085034:	0808534b 	.word	0x0808534b
 8085038:	0808535b 	.word	0x0808535b
 808503c:	08085361 	.word	0x08085361
 8085040:	08085383 	.word	0x08085383
 8085044:	080853a9 	.word	0x080853a9
 8085048:	080853b9 	.word	0x080853b9
 808504c:	080853c7 	.word	0x080853c7
 8085050:	080853db 	.word	0x080853db
 8085054:	0808540b 	.word	0x0808540b
 8085058:	0808543b 	.word	0x0808543b
 808505c:	08085467 	.word	0x08085467
 8085060:	08085493 	.word	0x08085493
 8085064:	080854a5 	.word	0x080854a5
 8085068:	080854d3 	.word	0x080854d3
 808506c:	08084f49 	.word	0x08084f49
 8085070:	080854e3 	.word	0x080854e3
 8085074:	08084f49 	.word	0x08084f49
 8085078:	08084f49 	.word	0x08084f49
 808507c:	08084f49 	.word	0x08084f49
 8085080:	08084f49 	.word	0x08084f49
 8085084:	08084f49 	.word	0x08084f49
 8085088:	08084f49 	.word	0x08084f49
 808508c:	080850f5 	.word	0x080850f5
 8085090:	080850fb 	.word	0x080850fb
 8085094:	08085101 	.word	0x08085101
 8085098:	08085107 	.word	0x08085107
 808509c:	0808510d 	.word	0x0808510d
 80850a0:	08085113 	.word	0x08085113
 80850a4:	08085119 	.word	0x08085119
 80850a8:	0808511f 	.word	0x0808511f
 80850ac:	08085125 	.word	0x08085125
 80850b0:	0808512b 	.word	0x0808512b
 80850b4:	08085131 	.word	0x08085131
 80850b8:	08085137 	.word	0x08085137
 80850bc:	0808513d 	.word	0x0808513d
 80850c0:	08085143 	.word	0x08085143
 80850c4:	08085149 	.word	0x08085149
 80850c8:	0808514f 	.word	0x0808514f
 80850cc:	08085155 	.word	0x08085155
 80850d0:	08085165 	.word	0x08085165
 80850d4:	0808517f 	.word	0x0808517f
 80850d8:	08085197 	.word	0x08085197
 80850dc:	0808519d 	.word	0x0808519d
 80850e0:	080851a3 	.word	0x080851a3
 80850e4:	080851a9 	.word	0x080851a9
 80850e8:	08084f49 	.word	0x08084f49
 80850ec:	080851af 	.word	0x080851af
 80850f0:	080851cb 	.word	0x080851cb
        {
        case 'a':
            serialGetCo2Slope();
 80850f4:	f7fd fdf6 	bl	8082ce4 <_Z17serialGetCo2Slopev>
            break;
 80850f8:	e726      	b.n	8084f48 <_Z10serialMenuv+0xc>

        case 'b':
            serialGetCo2Zero();
 80850fa:	f7fd fe71 	bl	8082de0 <_Z16serialGetCo2Zerov>
            break;
 80850fe:	e723      	b.n	8084f48 <_Z10serialMenuv+0xc>

        case 'c':
            serialGetCoSlope();
 8085100:	f7fd fece 	bl	8082ea0 <_Z16serialGetCoSlopev>
            break;
 8085104:	e720      	b.n	8084f48 <_Z10serialMenuv+0xc>

        case 'd':
            serialGetCoZero();
 8085106:	f7fd ff51 	bl	8082fac <_Z15serialGetCoZerov>
            break;
 808510a:	e71d      	b.n	8084f48 <_Z10serialMenuv+0xc>

        case 'e':
            serialGetPm1Slope();
 808510c:	f7fd ffae 	bl	808306c <_Z17serialGetPm1Slopev>
            break;
 8085110:	e71a      	b.n	8084f48 <_Z10serialMenuv+0xc>

        case 'f':
            serialGetPm1Zero();
 8085112:	f7fe f827 	bl	8083164 <_Z16serialGetPm1Zerov>
            break;
 8085116:	e717      	b.n	8084f48 <_Z10serialMenuv+0xc>

        case 'g':
            serialGetPm25Slope();
 8085118:	f7fe f882 	bl	8083220 <_Z18serialGetPm25Slopev>
            break;
 808511c:	e714      	b.n	8084f48 <_Z10serialMenuv+0xc>

        case 'h':
            serialGetPm25Zero();
 808511e:	f7fe f8fb 	bl	8083318 <_Z17serialGetPm25Zerov>
            break;
 8085122:	e711      	b.n	8084f48 <_Z10serialMenuv+0xc>

        case 'i':
            serialGetPm10Slope();
 8085124:	f7fe f956 	bl	80833d4 <_Z18serialGetPm10Slopev>
            break;
 8085128:	e70e      	b.n	8084f48 <_Z10serialMenuv+0xc>

        case 'j':
            serialGetPm10Zero();
 808512a:	f7fe f9cf 	bl	80834cc <_Z17serialGetPm10Zerov>
            break;
 808512e:	e70b      	b.n	8084f48 <_Z10serialMenuv+0xc>

        case 'k':
            serialGetTemperatureSlope();
 8085130:	f7fe fa2a 	bl	8083588 <_Z25serialGetTemperatureSlopev>
            break;
 8085134:	e708      	b.n	8084f48 <_Z10serialMenuv+0xc>

        case 'l':
            serialGetTemperatureZero();
 8085136:	f7fe faa3 	bl	8083680 <_Z24serialGetTemperatureZerov>
            break;
 808513a:	e705      	b.n	8084f48 <_Z10serialMenuv+0xc>

        case 'm':
            serialGetPressureSlope();
 808513c:	f7fe fafc 	bl	8083738 <_Z22serialGetPressureSlopev>
            break;
 8085140:	e702      	b.n	8084f48 <_Z10serialMenuv+0xc>

        case 'n':
            serialGetPressureZero();
 8085142:	f7fe fb75 	bl	8083830 <_Z21serialGetPressureZerov>
            break;
 8085146:	e6ff      	b.n	8084f48 <_Z10serialMenuv+0xc>

        case 'o':
            serialGetHumiditySlope();
 8085148:	f7fe fbd0 	bl	80838ec <_Z22serialGetHumiditySlopev>
            break;
 808514c:	e6fc      	b.n	8084f48 <_Z10serialMenuv+0xc>

        case 'p':
            serialGetHumidityZero();
 808514e:	f7fe fc4b 	bl	80839e8 <_Z21serialGetHumidityZerov>
            break;
 8085152:	e6f9      	b.n	8084f48 <_Z10serialMenuv+0xc>

        case 'q':
            Serial.println("Serial debugging enabled.");
 8085154:	f004 ff9a 	bl	808a08c <_Z16_fetch_usbserialv>
 8085158:	4944      	ldr	r1, [pc, #272]	; (808526c <_Z10serialMenuv+0x330>)
 808515a:	f003 ff62 	bl	8089022 <_ZN5Print7printlnEPKc>
            debugging_enabled = 1;
 808515e:	4d44      	ldr	r5, [pc, #272]	; (8085270 <_Z10serialMenuv+0x334>)
 8085160:	2301      	movs	r3, #1
 8085162:	e006      	b.n	8085172 <_Z10serialMenuv+0x236>
            EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
            break;

        case 'r':
            Serial.println("Serial debugging disabled.");
 8085164:	f004 ff92 	bl	808a08c <_Z16_fetch_usbserialv>
            debugging_enabled = 0;
 8085168:	4d41      	ldr	r5, [pc, #260]	; (8085270 <_Z10serialMenuv+0x334>)
            debugging_enabled = 1;
            EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
            break;

        case 'r':
            Serial.println("Serial debugging disabled.");
 808516a:	4942      	ldr	r1, [pc, #264]	; (8085274 <_Z10serialMenuv+0x338>)
 808516c:	f003 ff59 	bl	8089022 <_ZN5Print7printlnEPKc>
            debugging_enabled = 0;
 8085170:	2300      	movs	r3, #0
 8085172:	602b      	str	r3, [r5, #0]
            EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
 8085174:	f005 fa6a 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8085178:	4629      	mov	r1, r5
 808517a:	2048      	movs	r0, #72	; 0x48
 808517c:	e31c      	b.n	80857b8 <_Z10serialMenuv+0x87c>
            break;

        case 's':
            Serial.println(String(HEADER_STRING));
 808517e:	f004 ff85 	bl	808a08c <_Z16_fetch_usbserialv>
 8085182:	4605      	mov	r5, r0
 8085184:	493c      	ldr	r1, [pc, #240]	; (8085278 <_Z10serialMenuv+0x33c>)
 8085186:	a808      	add	r0, sp, #32
 8085188:	f003 fd89 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
 808518c:	9908      	ldr	r1, [sp, #32]
 808518e:	4628      	mov	r0, r5
 8085190:	f003 ff47 	bl	8089022 <_ZN5Print7printlnEPKc>
 8085194:	e1cb      	b.n	808552e <_Z10serialMenuv+0x5f2>
            break;

        case 't':
            serialGetTimeDate();
 8085196:	f7fd fca7 	bl	8082ae8 <_Z17serialGetTimeDatev>
            break;
 808519a:	e6d5      	b.n	8084f48 <_Z10serialMenuv+0xc>

        case 'u':
            serialGetZone();
 808519c:	f7fd fcf2 	bl	8082b84 <_Z13serialGetZonev>
            break;
 80851a0:	e6d2      	b.n	8084f48 <_Z10serialMenuv+0xc>

        case 'v':
            serialGetDeviceId();
 80851a2:	f7fd fbe5 	bl	8082970 <_Z17serialGetDeviceIdv>
            break;
 80851a6:	e6cf      	b.n	8084f48 <_Z10serialMenuv+0xc>

        case 'w':
            serialGetWifiCredentials();
 80851a8:	f7fd fac8 	bl	808273c <_Z24serialGetWifiCredentialsv>
            break;
 80851ac:	e6cc      	b.n	8084f48 <_Z10serialMenuv+0xc>

        case 'y':
            if (serial_cellular_enabled == 0)
 80851ae:	4d33      	ldr	r5, [pc, #204]	; (808527c <_Z10serialMenuv+0x340>)
 80851b0:	682b      	ldr	r3, [r5, #0]
 80851b2:	b91b      	cbnz	r3, 80851bc <_Z10serialMenuv+0x280>
            {
                Serial.println("Enabling Cellular.");
 80851b4:	f004 ff6a 	bl	808a08c <_Z16_fetch_usbserialv>
 80851b8:	4931      	ldr	r1, [pc, #196]	; (8085280 <_Z10serialMenuv+0x344>)
 80851ba:	e002      	b.n	80851c2 <_Z10serialMenuv+0x286>
            }
            else
            {
                Serial.println("Cellular already enabled.");
 80851bc:	f004 ff66 	bl	808a08c <_Z16_fetch_usbserialv>
 80851c0:	4930      	ldr	r1, [pc, #192]	; (8085284 <_Z10serialMenuv+0x348>)
 80851c2:	f003 ff2e 	bl	8089022 <_ZN5Print7printlnEPKc>
            }
            serial_cellular_enabled = 1;
 80851c6:	2301      	movs	r3, #1
 80851c8:	e012      	b.n	80851f0 <_Z10serialMenuv+0x2b4>
            EEPROM.put(SERIAL_CELLULAR_EN_MEM_ADDRESS, serial_cellular_enabled);
            break;

        case 'z':
            if (serial_cellular_enabled == 1)
 80851ca:	4d2c      	ldr	r5, [pc, #176]	; (808527c <_Z10serialMenuv+0x340>)
 80851cc:	682b      	ldr	r3, [r5, #0]
 80851ce:	2b01      	cmp	r3, #1
 80851d0:	d108      	bne.n	80851e4 <_Z10serialMenuv+0x2a8>
            {
                Serial.println("Disabling Cellular");
 80851d2:	f004 ff5b 	bl	808a08c <_Z16_fetch_usbserialv>
 80851d6:	492c      	ldr	r1, [pc, #176]	; (8085288 <_Z10serialMenuv+0x34c>)
 80851d8:	f003 ff23 	bl	8089022 <_ZN5Print7printlnEPKc>
                Cellular.off();
 80851dc:	482b      	ldr	r0, [pc, #172]	; (808528c <_Z10serialMenuv+0x350>)
 80851de:	f7fb fc22 	bl	8080a26 <_ZN5spark13CellularClass3offEv>
 80851e2:	e004      	b.n	80851ee <_Z10serialMenuv+0x2b2>
            }
            else
            {
                Serial.println("Cellular already disabled.");
 80851e4:	f004 ff52 	bl	808a08c <_Z16_fetch_usbserialv>
 80851e8:	4929      	ldr	r1, [pc, #164]	; (8085290 <_Z10serialMenuv+0x354>)
 80851ea:	f003 ff1a 	bl	8089022 <_ZN5Print7printlnEPKc>
            }
            serial_cellular_enabled = 0;
 80851ee:	2300      	movs	r3, #0
 80851f0:	602b      	str	r3, [r5, #0]
            EEPROM.put(SERIAL_CELLULAR_EN_MEM_ADDRESS, serial_cellular_enabled);
 80851f2:	f005 fa2b 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 80851f6:	4921      	ldr	r1, [pc, #132]	; (808527c <_Z10serialMenuv+0x340>)
 80851f8:	2044      	movs	r0, #68	; 0x44
 80851fa:	e2dd      	b.n	80857b8 <_Z10serialMenuv+0x87c>
            break;

        case 'A':
            readAlpha1Constantly();
 80851fc:	f7ff fe7e 	bl	8084efc <_Z20readAlpha1Constantlyv>
            break;
 8085200:	e6a2      	b.n	8084f48 <_Z10serialMenuv+0xc>

        case 'B':
            if (output_only_particles == 1)
 8085202:	4b24      	ldr	r3, [pc, #144]	; (8085294 <_Z10serialMenuv+0x358>)
 8085204:	681a      	ldr	r2, [r3, #0]
 8085206:	2a01      	cmp	r2, #1
 8085208:	d105      	bne.n	8085216 <_Z10serialMenuv+0x2da>
            {
                output_only_particles = 0;
 808520a:	2200      	movs	r2, #0
 808520c:	601a      	str	r2, [r3, #0]
                Serial.println("Outputting normally");
 808520e:	f004 ff3d 	bl	808a08c <_Z16_fetch_usbserialv>
 8085212:	4921      	ldr	r1, [pc, #132]	; (8085298 <_Z10serialMenuv+0x35c>)
 8085214:	e004      	b.n	8085220 <_Z10serialMenuv+0x2e4>
            }
            else
            {
                output_only_particles = 1;
 8085216:	2201      	movs	r2, #1
 8085218:	601a      	str	r2, [r3, #0]
                Serial.println("Outputting only PM");
 808521a:	f004 ff37 	bl	808a08c <_Z16_fetch_usbserialv>
 808521e:	491f      	ldr	r1, [pc, #124]	; (808529c <_Z10serialMenuv+0x360>)
 8085220:	f003 feff 	bl	8089022 <_ZN5Print7printlnEPKc>
            }
            EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, output_only_particles);
 8085224:	f005 fa12 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8085228:	491a      	ldr	r1, [pc, #104]	; (8085294 <_Z10serialMenuv+0x358>)
 808522a:	2064      	movs	r0, #100	; 0x64
 808522c:	e2c4      	b.n	80857b8 <_Z10serialMenuv+0x87c>
            break;

        case 'C':
            if (temperature_units == FAHRENHEIT)
 808522e:	4b1c      	ldr	r3, [pc, #112]	; (80852a0 <_Z10serialMenuv+0x364>)
 8085230:	681a      	ldr	r2, [r3, #0]
 8085232:	b90a      	cbnz	r2, 8085238 <_Z10serialMenuv+0x2fc>
            {
                temperature_units = CELSIUS;
 8085234:	2201      	movs	r2, #1
 8085236:	e058      	b.n	80852ea <_Z10serialMenuv+0x3ae>
            }
            else
            {
                Serial.println("Temperature units already set to Celsius.");
 8085238:	f004 ff28 	bl	808a08c <_Z16_fetch_usbserialv>
 808523c:	4919      	ldr	r1, [pc, #100]	; (80852a4 <_Z10serialMenuv+0x368>)
 808523e:	f003 fef0 	bl	8089022 <_ZN5Print7printlnEPKc>
            }

            EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, temperature_units);
 8085242:	f005 fa03 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8085246:	4916      	ldr	r1, [pc, #88]	; (80852a0 <_Z10serialMenuv+0x364>)
 8085248:	2060      	movs	r0, #96	; 0x60
 808524a:	e2b5      	b.n	80857b8 <_Z10serialMenuv+0x87c>
            break;

        case 'D':
            if (new_temperature_sensor_enabled == 1)
 808524c:	4b16      	ldr	r3, [pc, #88]	; (80852a8 <_Z10serialMenuv+0x36c>)
 808524e:	681a      	ldr	r2, [r3, #0]
 8085250:	2a01      	cmp	r2, #1
 8085252:	d12d      	bne.n	80852b0 <_Z10serialMenuv+0x374>
            {
                new_temperature_sensor_enabled = 0;
 8085254:	2200      	movs	r2, #0
 8085256:	601a      	str	r2, [r3, #0]
                Serial.println("Disabling new temperature sensor");
 8085258:	f004 ff18 	bl	808a08c <_Z16_fetch_usbserialv>
 808525c:	4913      	ldr	r1, [pc, #76]	; (80852ac <_Z10serialMenuv+0x370>)
 808525e:	e02a      	b.n	80852b6 <_Z10serialMenuv+0x37a>
 8085260:	2000076c 	.word	0x2000076c
 8085264:	200006e8 	.word	0x200006e8
 8085268:	08090b25 	.word	0x08090b25
 808526c:	08090b2b 	.word	0x08090b2b
 8085270:	20000acc 	.word	0x20000acc
 8085274:	08090b45 	.word	0x08090b45
 8085278:	080907ba 	.word	0x080907ba
 808527c:	20000214 	.word	0x20000214
 8085280:	08090b60 	.word	0x08090b60
 8085284:	08090b73 	.word	0x08090b73
 8085288:	08090b8d 	.word	0x08090b8d
 808528c:	20000c28 	.word	0x20000c28
 8085290:	08090ba0 	.word	0x08090ba0
 8085294:	200007ac 	.word	0x200007ac
 8085298:	08090bbb 	.word	0x08090bbb
 808529c:	08090bcf 	.word	0x08090bcf
 80852a0:	200006a8 	.word	0x200006a8
 80852a4:	08090be2 	.word	0x08090be2
 80852a8:	20000764 	.word	0x20000764
 80852ac:	08090c0c 	.word	0x08090c0c
            }
            else
            {

                Serial.println("Temperature sensor already disabled");
 80852b0:	f004 feec 	bl	808a08c <_Z16_fetch_usbserialv>
 80852b4:	49ae      	ldr	r1, [pc, #696]	; (8085570 <_Z10serialMenuv+0x634>)
 80852b6:	f003 feb4 	bl	8089022 <_ZN5Print7printlnEPKc>
            }
            EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, new_temperature_sensor_enabled);
 80852ba:	f005 f9c7 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 80852be:	49ad      	ldr	r1, [pc, #692]	; (8085574 <_Z10serialMenuv+0x638>)
 80852c0:	2068      	movs	r0, #104	; 0x68
 80852c2:	e279      	b.n	80857b8 <_Z10serialMenuv+0x87c>
            break;

        case 'E':
            if (new_temperature_sensor_enabled == 1)
 80852c4:	4bab      	ldr	r3, [pc, #684]	; (8085574 <_Z10serialMenuv+0x638>)
 80852c6:	681a      	ldr	r2, [r3, #0]
 80852c8:	2a01      	cmp	r2, #1
 80852ca:	d103      	bne.n	80852d4 <_Z10serialMenuv+0x398>
            {
                Serial.println("Temperature sensor already enabled");
 80852cc:	f004 fede 	bl	808a08c <_Z16_fetch_usbserialv>
 80852d0:	49a9      	ldr	r1, [pc, #676]	; (8085578 <_Z10serialMenuv+0x63c>)
 80852d2:	e7f0      	b.n	80852b6 <_Z10serialMenuv+0x37a>
            }
            else
            {
                new_temperature_sensor_enabled = 1;
 80852d4:	2201      	movs	r2, #1
 80852d6:	601a      	str	r2, [r3, #0]
                Serial.println("Temperatue sensor now enabled");
 80852d8:	f004 fed8 	bl	808a08c <_Z16_fetch_usbserialv>
 80852dc:	49a7      	ldr	r1, [pc, #668]	; (808557c <_Z10serialMenuv+0x640>)
 80852de:	e7ea      	b.n	80852b6 <_Z10serialMenuv+0x37a>
            }
            EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, new_temperature_sensor_enabled);
            break;

        case 'F':
            if (temperature_units == CELSIUS)
 80852e0:	4ba7      	ldr	r3, [pc, #668]	; (8085580 <_Z10serialMenuv+0x644>)
 80852e2:	681a      	ldr	r2, [r3, #0]
 80852e4:	2a01      	cmp	r2, #1
 80852e6:	d102      	bne.n	80852ee <_Z10serialMenuv+0x3b2>
            {
                temperature_units = FAHRENHEIT;
 80852e8:	2200      	movs	r2, #0
 80852ea:	601a      	str	r2, [r3, #0]
 80852ec:	e7a9      	b.n	8085242 <_Z10serialMenuv+0x306>
            }
            else
            {
                Serial.println("Temperature units already set to Fahrenheit.");
 80852ee:	f004 fecd 	bl	808a08c <_Z16_fetch_usbserialv>
 80852f2:	49a4      	ldr	r1, [pc, #656]	; (8085584 <_Z10serialMenuv+0x648>)
 80852f4:	e7a3      	b.n	808523e <_Z10serialMenuv+0x302>
            EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, temperature_units);
            break;

            //Enable analog reading of ozone and disable esp reading of ozone
        case 'G':
            if (ozone_analog_enabled == 1)
 80852f6:	4ba4      	ldr	r3, [pc, #656]	; (8085588 <_Z10serialMenuv+0x64c>)
 80852f8:	681a      	ldr	r2, [r3, #0]
 80852fa:	2a01      	cmp	r2, #1
 80852fc:	d103      	bne.n	8085306 <_Z10serialMenuv+0x3ca>
            {
                Serial.println("Analog reading of ozone already enabled");
 80852fe:	f004 fec5 	bl	808a08c <_Z16_fetch_usbserialv>
 8085302:	49a2      	ldr	r1, [pc, #648]	; (808558c <_Z10serialMenuv+0x650>)
 8085304:	e004      	b.n	8085310 <_Z10serialMenuv+0x3d4>
            }
            else
            {
                ozone_analog_enabled = 1;
 8085306:	2201      	movs	r2, #1
 8085308:	601a      	str	r2, [r3, #0]
                Serial.println("Analog reading of ozone now enabled");
 808530a:	f004 febf 	bl	808a08c <_Z16_fetch_usbserialv>
 808530e:	49a0      	ldr	r1, [pc, #640]	; (8085590 <_Z10serialMenuv+0x654>)
 8085310:	f003 fe87 	bl	8089022 <_ZN5Print7printlnEPKc>
            }
            EEPROM.put(OZONE_A_OR_D_MEM_ADDRESS, ozone_analog_enabled);
 8085314:	f005 f99a 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8085318:	499b      	ldr	r1, [pc, #620]	; (8085588 <_Z10serialMenuv+0x64c>)
 808531a:	206c      	movs	r0, #108	; 0x6c
 808531c:	e24c      	b.n	80857b8 <_Z10serialMenuv+0x87c>
            break;

            //disable analog reading of ozone and read from esp
        case 'H':
            if (ozone_analog_enabled == 0)
 808531e:	4b9a      	ldr	r3, [pc, #616]	; (8085588 <_Z10serialMenuv+0x64c>)
 8085320:	681a      	ldr	r2, [r3, #0]
 8085322:	b91a      	cbnz	r2, 808532c <_Z10serialMenuv+0x3f0>
            {
                Serial.println("Digital reading of ozone already enabled");
 8085324:	f004 feb2 	bl	808a08c <_Z16_fetch_usbserialv>
 8085328:	499a      	ldr	r1, [pc, #616]	; (8085594 <_Z10serialMenuv+0x658>)
 808532a:	e7f1      	b.n	8085310 <_Z10serialMenuv+0x3d4>
            }
            else
            {
                ozone_analog_enabled = 0;
 808532c:	2200      	movs	r2, #0
 808532e:	601a      	str	r2, [r3, #0]
                Serial.println("Digital reading of ozone now enabled");
 8085330:	f004 feac 	bl	808a08c <_Z16_fetch_usbserialv>
 8085334:	4998      	ldr	r1, [pc, #608]	; (8085598 <_Z10serialMenuv+0x65c>)
 8085336:	e7eb      	b.n	8085310 <_Z10serialMenuv+0x3d4>
            EEPROM.put(OZONE_A_OR_D_MEM_ADDRESS, ozone_analog_enabled);
            break;

            //disable analog reading of ozone and read from esp
        case 'I':
            serialGetAverageTime();
 8085338:	f7fd fc70 	bl	8082c1c <_Z20serialGetAverageTimev>
            break;
 808533c:	e604      	b.n	8084f48 <_Z10serialMenuv+0xc>

        case 'J':
            resetESP();
 808533e:	f7fc fddf 	bl	8081f00 <_Z8resetESPv>
            Serial.println("ESP reset!");
 8085342:	f004 fea3 	bl	808a08c <_Z16_fetch_usbserialv>
 8085346:	4995      	ldr	r1, [pc, #596]	; (808559c <_Z10serialMenuv+0x660>)
 8085348:	e011      	b.n	808536e <_Z10serialMenuv+0x432>
            break;

        case 'K':
            Serial.println("Outputting GPS continuously");
 808534a:	f004 fe9f 	bl	808a08c <_Z16_fetch_usbserialv>
 808534e:	4994      	ldr	r1, [pc, #592]	; (80855a0 <_Z10serialMenuv+0x664>)
 8085350:	f003 fe67 	bl	8089022 <_ZN5Print7printlnEPKc>
            echoGps();
 8085354:	f7fb ff54 	bl	8081200 <_Z7echoGpsv>
            break;
 8085358:	e5f6      	b.n	8084f48 <_Z10serialMenuv+0xc>

        case 'L':
            serialResetSettings();
 808535a:	f7fd fb8d 	bl	8082a78 <_Z19serialResetSettingsv>
            break;
 808535e:	e5f3      	b.n	8084f48 <_Z10serialMenuv+0xc>

        case 'M':
            //serialTestRemoteFunction();
            if (battery_threshold_enable == 1)
 8085360:	4d90      	ldr	r5, [pc, #576]	; (80855a4 <_Z10serialMenuv+0x668>)
 8085362:	682b      	ldr	r3, [r5, #0]
 8085364:	2b01      	cmp	r3, #1
 8085366:	d105      	bne.n	8085374 <_Z10serialMenuv+0x438>
            {
                Serial.println("Battery threshold already enabled");
 8085368:	f004 fe90 	bl	808a08c <_Z16_fetch_usbserialv>
 808536c:	498e      	ldr	r1, [pc, #568]	; (80855a8 <_Z10serialMenuv+0x66c>)
 808536e:	f003 fe58 	bl	8089022 <_ZN5Print7printlnEPKc>
 8085372:	e5e9      	b.n	8084f48 <_Z10serialMenuv+0xc>
            }
            else
            {
                Serial.println("Enabling battery threshold limiting");
 8085374:	f004 fe8a 	bl	808a08c <_Z16_fetch_usbserialv>
 8085378:	498c      	ldr	r1, [pc, #560]	; (80855ac <_Z10serialMenuv+0x670>)
 808537a:	f003 fe52 	bl	8089022 <_ZN5Print7printlnEPKc>
                battery_threshold_enable = 1;
 808537e:	2301      	movs	r3, #1
 8085380:	e00c      	b.n	808539c <_Z10serialMenuv+0x460>
            }
            break;

        case 'N':
            //serialTestRemoteFunction();
            if (battery_threshold_enable == 0)
 8085382:	4d88      	ldr	r5, [pc, #544]	; (80855a4 <_Z10serialMenuv+0x668>)
 8085384:	682b      	ldr	r3, [r5, #0]
 8085386:	b91b      	cbnz	r3, 8085390 <_Z10serialMenuv+0x454>
            {
                Serial.println("Battery threshold already disabled");
 8085388:	f004 fe80 	bl	808a08c <_Z16_fetch_usbserialv>
 808538c:	4988      	ldr	r1, [pc, #544]	; (80855b0 <_Z10serialMenuv+0x674>)
 808538e:	e7ee      	b.n	808536e <_Z10serialMenuv+0x432>
            }
            else
            {
                Serial.println("Disabling battery threshold limiting");
 8085390:	f004 fe7c 	bl	808a08c <_Z16_fetch_usbserialv>
 8085394:	4987      	ldr	r1, [pc, #540]	; (80855b4 <_Z10serialMenuv+0x678>)
 8085396:	f003 fe44 	bl	8089022 <_ZN5Print7printlnEPKc>
                battery_threshold_enable = 0;
 808539a:	2300      	movs	r3, #0
 808539c:	602b      	str	r3, [r5, #0]
                EEPROM.put(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
 808539e:	f005 f955 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 80853a2:	4629      	mov	r1, r5
 80853a4:	2078      	movs	r0, #120	; 0x78
 80853a6:	e207      	b.n	80857b8 <_Z10serialMenuv+0x87c>
            break;

        case 'O':
            //Serial.println("Changing frequency for gps");
            //changeFrequency();
            Serial.println("Enabling low power for gps");
 80853a8:	f004 fe70 	bl	808a08c <_Z16_fetch_usbserialv>
 80853ac:	4982      	ldr	r1, [pc, #520]	; (80855b8 <_Z10serialMenuv+0x67c>)
 80853ae:	f003 fe38 	bl	8089022 <_ZN5Print7printlnEPKc>
            enableLowPowerGPS();
 80853b2:	f7fb ff8b 	bl	80812cc <_Z17enableLowPowerGPSv>
            break;
 80853b6:	e5c7      	b.n	8084f48 <_Z10serialMenuv+0xc>

            //turn off batfet
        case 'P':
            Serial.println("Turning off batfet");
 80853b8:	f004 fe68 	bl	808a08c <_Z16_fetch_usbserialv>
 80853bc:	497f      	ldr	r1, [pc, #508]	; (80855bc <_Z10serialMenuv+0x680>)
 80853be:	f003 fe30 	bl	8089022 <_ZN5Print7printlnEPKc>
            writeRegister(7, 0b01101011);
 80853c2:	216b      	movs	r1, #107	; 0x6b
 80853c4:	e005      	b.n	80853d2 <_Z10serialMenuv+0x496>
            break;

            //allow batfet to turn on
        case 'Q':
            Serial.println("Allowing batfet to turn on");
 80853c6:	f004 fe61 	bl	808a08c <_Z16_fetch_usbserialv>
 80853ca:	497d      	ldr	r1, [pc, #500]	; (80855c0 <_Z10serialMenuv+0x684>)
 80853cc:	f003 fe29 	bl	8089022 <_ZN5Print7printlnEPKc>
            writeRegister(7, 0b01001011);
 80853d0:	214b      	movs	r1, #75	; 0x4b
 80853d2:	2007      	movs	r0, #7
 80853d4:	f7fb fbea 	bl	8080bac <_Z13writeRegisterhh>
            break;
 80853d8:	e5b6      	b.n	8084f48 <_Z10serialMenuv+0xc>

        case 'R':
            if (abc_logic_enabled)
 80853da:	4d7a      	ldr	r5, [pc, #488]	; (80855c4 <_Z10serialMenuv+0x688>)
 80853dc:	682b      	ldr	r3, [r5, #0]
 80853de:	b183      	cbz	r3, 8085402 <_Z10serialMenuv+0x4c6>
            {
                Serial.println("Disabling ABC logic for CO2 sensor");
 80853e0:	f004 fe54 	bl	808a08c <_Z16_fetch_usbserialv>
 80853e4:	4978      	ldr	r1, [pc, #480]	; (80855c8 <_Z10serialMenuv+0x68c>)
 80853e6:	f003 fe1c 	bl	8089022 <_ZN5Print7printlnEPKc>
                abc_logic_enabled = 0;
 80853ea:	2300      	movs	r3, #0
 80853ec:	602b      	str	r3, [r5, #0]
                EEPROM.put(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 80853ee:	f005 f92d 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 80853f2:	4629      	mov	r1, r5
 80853f4:	207c      	movs	r0, #124	; 0x7c
 80853f6:	f7fb fae4 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
                t6713.disableABCLogic();
 80853fa:	4874      	ldr	r0, [pc, #464]	; (80855cc <_Z10serialMenuv+0x690>)
 80853fc:	f000 fea3 	bl	8086146 <_ZN13Telaire_T671315disableABCLogicEv>
 8085400:	e5a2      	b.n	8084f48 <_Z10serialMenuv+0xc>
            }
            else
            {
                Serial.println("ABC logic already disabled");
 8085402:	f004 fe43 	bl	808a08c <_Z16_fetch_usbserialv>
 8085406:	4972      	ldr	r1, [pc, #456]	; (80855d0 <_Z10serialMenuv+0x694>)
 8085408:	e7b1      	b.n	808536e <_Z10serialMenuv+0x432>
            }
            break;

        case 'S':
            if (!abc_logic_enabled)
 808540a:	4d6e      	ldr	r5, [pc, #440]	; (80855c4 <_Z10serialMenuv+0x688>)
 808540c:	682b      	ldr	r3, [r5, #0]
 808540e:	b983      	cbnz	r3, 8085432 <_Z10serialMenuv+0x4f6>
            {
                Serial.println("Enabling abc logic for CO2 sensor");
 8085410:	f004 fe3c 	bl	808a08c <_Z16_fetch_usbserialv>
 8085414:	496f      	ldr	r1, [pc, #444]	; (80855d4 <_Z10serialMenuv+0x698>)
 8085416:	f003 fe04 	bl	8089022 <_ZN5Print7printlnEPKc>
                abc_logic_enabled = 1;
 808541a:	2301      	movs	r3, #1
 808541c:	602b      	str	r3, [r5, #0]
                EEPROM.put(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 808541e:	f005 f915 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8085422:	4629      	mov	r1, r5
 8085424:	207c      	movs	r0, #124	; 0x7c
 8085426:	f7fb facc 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
                t6713.enableABCLogic();
 808542a:	4868      	ldr	r0, [pc, #416]	; (80855cc <_Z10serialMenuv+0x690>)
 808542c:	f000 feb0 	bl	8086190 <_ZN13Telaire_T671314enableABCLogicEv>
 8085430:	e58a      	b.n	8084f48 <_Z10serialMenuv+0xc>
            }
            else
            {
                Serial.println("ABC logic already enabled");
 8085432:	f004 fe2b 	bl	808a08c <_Z16_fetch_usbserialv>
 8085436:	4968      	ldr	r1, [pc, #416]	; (80855d8 <_Z10serialMenuv+0x69c>)
 8085438:	e799      	b.n	808536e <_Z10serialMenuv+0x432>
            }
            break;

        case 'T':
            if (!hih8120_enabled)
 808543a:	4d68      	ldr	r5, [pc, #416]	; (80855dc <_Z10serialMenuv+0x6a0>)
 808543c:	682b      	ldr	r3, [r5, #0]
 808543e:	b933      	cbnz	r3, 808544e <_Z10serialMenuv+0x512>
            {
                Serial.println("Enabling HIH8120 RH sensor");
 8085440:	f004 fe24 	bl	808a08c <_Z16_fetch_usbserialv>
 8085444:	4966      	ldr	r1, [pc, #408]	; (80855e0 <_Z10serialMenuv+0x6a4>)
 8085446:	f003 fdec 	bl	8089022 <_ZN5Print7printlnEPKc>
                hih8120_enabled = 1;
 808544a:	2301      	movs	r3, #1
 808544c:	e005      	b.n	808545a <_Z10serialMenuv+0x51e>
                EEPROM.put(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);

            }
            else
            {
                Serial.println("Disabling HIH8120 RH sensor");
 808544e:	f004 fe1d 	bl	808a08c <_Z16_fetch_usbserialv>
 8085452:	4964      	ldr	r1, [pc, #400]	; (80855e4 <_Z10serialMenuv+0x6a8>)
 8085454:	f003 fde5 	bl	8089022 <_ZN5Print7printlnEPKc>
                hih8120_enabled = 0;
 8085458:	2300      	movs	r3, #0
 808545a:	602b      	str	r3, [r5, #0]
                EEPROM.put(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);
 808545c:	f005 f8f6 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8085460:	4629      	mov	r1, r5
 8085462:	2080      	movs	r0, #128	; 0x80
 8085464:	e1a8      	b.n	80857b8 <_Z10serialMenuv+0x87c>
            }
            break;

        case 'U':
            if (!CO_socket)
 8085466:	4d60      	ldr	r5, [pc, #384]	; (80855e8 <_Z10serialMenuv+0x6ac>)
 8085468:	682b      	ldr	r3, [r5, #0]
 808546a:	b933      	cbnz	r3, 808547a <_Z10serialMenuv+0x53e>
            {
                Serial.println("Now reading CO from U20-Alpha2");
 808546c:	f004 fe0e 	bl	808a08c <_Z16_fetch_usbserialv>
 8085470:	495e      	ldr	r1, [pc, #376]	; (80855ec <_Z10serialMenuv+0x6b0>)
 8085472:	f003 fdd6 	bl	8089022 <_ZN5Print7printlnEPKc>
                CO_socket = 1;
 8085476:	2301      	movs	r3, #1
 8085478:	e005      	b.n	8085486 <_Z10serialMenuv+0x54a>
                EEPROM.put(CO_SOCKET_MEM_ADDRESS, CO_socket);
            }
            else
            {
                Serial.println("Now reading CO from U19-Alpha1");
 808547a:	f004 fe07 	bl	808a08c <_Z16_fetch_usbserialv>
 808547e:	495c      	ldr	r1, [pc, #368]	; (80855f0 <_Z10serialMenuv+0x6b4>)
 8085480:	f003 fdcf 	bl	8089022 <_ZN5Print7printlnEPKc>
                CO_socket = 0;
 8085484:	2300      	movs	r3, #0
 8085486:	602b      	str	r3, [r5, #0]
                EEPROM.put(CO_SOCKET_MEM_ADDRESS, CO_socket);
 8085488:	f005 f8e0 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 808548c:	4629      	mov	r1, r5
 808548e:	2084      	movs	r0, #132	; 0x84
 8085490:	e192      	b.n	80857b8 <_Z10serialMenuv+0x87c>
            }
            break;

        case 'V':
            Serial.println("Reseting the CO2 sensor");
 8085492:	f004 fdfb 	bl	808a08c <_Z16_fetch_usbserialv>
 8085496:	4957      	ldr	r1, [pc, #348]	; (80855f4 <_Z10serialMenuv+0x6b8>)
 8085498:	f003 fdc3 	bl	8089022 <_ZN5Print7printlnEPKc>
            t6713.resetSensor();
 808549c:	484b      	ldr	r0, [pc, #300]	; (80855cc <_Z10serialMenuv+0x690>)
 808549e:	f000 fe2d 	bl	80860fc <_ZN13Telaire_T671311resetSensorEv>
            break;
 80854a2:	e551      	b.n	8084f48 <_Z10serialMenuv+0xc>

        case 'W':
            if (google_location_en == 1)
 80854a4:	4d54      	ldr	r5, [pc, #336]	; (80855f8 <_Z10serialMenuv+0x6bc>)
 80854a6:	682b      	ldr	r3, [r5, #0]
 80854a8:	2b01      	cmp	r3, #1
 80854aa:	d106      	bne.n	80854ba <_Z10serialMenuv+0x57e>
            {
                Serial.println("Disabling google location services.");
 80854ac:	f004 fdee 	bl	808a08c <_Z16_fetch_usbserialv>
 80854b0:	4952      	ldr	r1, [pc, #328]	; (80855fc <_Z10serialMenuv+0x6c0>)
 80854b2:	f003 fdb6 	bl	8089022 <_ZN5Print7printlnEPKc>
                google_location_en = 0;
 80854b6:	2300      	movs	r3, #0
 80854b8:	e005      	b.n	80854c6 <_Z10serialMenuv+0x58a>
                EEPROM.put(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
            }
            else
            {
                Serial.println("Enabling google location services.");
 80854ba:	f004 fde7 	bl	808a08c <_Z16_fetch_usbserialv>
 80854be:	4950      	ldr	r1, [pc, #320]	; (8085600 <_Z10serialMenuv+0x6c4>)
 80854c0:	f003 fdaf 	bl	8089022 <_ZN5Print7printlnEPKc>
                google_location_en = 1;
 80854c4:	2301      	movs	r3, #1
 80854c6:	602b      	str	r3, [r5, #0]
                EEPROM.put(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
 80854c8:	f005 f8c0 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 80854cc:	4629      	mov	r1, r5
 80854ce:	2088      	movs	r0, #136	; 0x88
 80854d0:	e172      	b.n	80857b8 <_Z10serialMenuv+0x87c>
            }
            break;

            //calibrate CO2 sensor
        case 'X':
            t6713.calibrate(1);
 80854d2:	2101      	movs	r1, #1
 80854d4:	483d      	ldr	r0, [pc, #244]	; (80855cc <_Z10serialMenuv+0x690>)
 80854d6:	f000 fe81 	bl	80861dc <_ZN13Telaire_T67139calibrateEi>
            //6 minutes if measurement cycle is 2 seconds
            co2_calibration_timer = 180;
 80854da:	4b4a      	ldr	r3, [pc, #296]	; (8085604 <_Z10serialMenuv+0x6c8>)
 80854dc:	22b4      	movs	r2, #180	; 0xb4
 80854de:	601a      	str	r2, [r3, #0]
            break;
 80854e0:	e532      	b.n	8084f48 <_Z10serialMenuv+0xc>

        case 'Z':
            Serial.println("Getting cellular information, this may take a while...");
 80854e2:	f004 fdd3 	bl	808a08c <_Z16_fetch_usbserialv>
 80854e6:	4948      	ldr	r1, [pc, #288]	; (8085608 <_Z10serialMenuv+0x6cc>)
 80854e8:	f003 fd9b 	bl	8089022 <_ZN5Print7printlnEPKc>
            Log.info("IMEI=%s", CellularHelper.getIMEI().c_str());
 80854ec:	4947      	ldr	r1, [pc, #284]	; (808560c <_Z10serialMenuv+0x6d0>)
 80854ee:	a808      	add	r0, sp, #32
 80854f0:	f002 fca4 	bl	8087e3c <_ZNK19CellularHelperClass7getIMEIEv>
 80854f4:	9a08      	ldr	r2, [sp, #32]
 80854f6:	4946      	ldr	r1, [pc, #280]	; (8085610 <_Z10serialMenuv+0x6d4>)
 80854f8:	4846      	ldr	r0, [pc, #280]	; (8085614 <_Z10serialMenuv+0x6d8>)
 80854fa:	f7fb faa1 	bl	8080a40 <_ZNK5spark6Logger4infoEPKcz>
 80854fe:	a808      	add	r0, sp, #32
 8085500:	f003 fb86 	bl	8088c10 <_ZN6StringD1Ev>
            Log.info("IMSI=%s", CellularHelper.getIMSI().c_str());
 8085504:	4941      	ldr	r1, [pc, #260]	; (808560c <_Z10serialMenuv+0x6d0>)
 8085506:	a808      	add	r0, sp, #32
 8085508:	f002 fcb4 	bl	8087e74 <_ZNK19CellularHelperClass7getIMSIEv>
 808550c:	9a08      	ldr	r2, [sp, #32]
 808550e:	4942      	ldr	r1, [pc, #264]	; (8085618 <_Z10serialMenuv+0x6dc>)
 8085510:	4840      	ldr	r0, [pc, #256]	; (8085614 <_Z10serialMenuv+0x6d8>)
 8085512:	f7fb fa95 	bl	8080a40 <_ZNK5spark6Logger4infoEPKcz>
 8085516:	a808      	add	r0, sp, #32
 8085518:	f003 fb7a 	bl	8088c10 <_ZN6StringD1Ev>
            Log.info("ICCID=%s", CellularHelper.getICCID().c_str());
 808551c:	493b      	ldr	r1, [pc, #236]	; (808560c <_Z10serialMenuv+0x6d0>)
 808551e:	a808      	add	r0, sp, #32
 8085520:	f002 fcc4 	bl	8087eac <_ZNK19CellularHelperClass8getICCIDEv>
 8085524:	9a08      	ldr	r2, [sp, #32]
 8085526:	493d      	ldr	r1, [pc, #244]	; (808561c <_Z10serialMenuv+0x6e0>)
 8085528:	483a      	ldr	r0, [pc, #232]	; (8085614 <_Z10serialMenuv+0x6d8>)
 808552a:	f7fb fa89 	bl	8080a40 <_ZNK5spark6Logger4infoEPKcz>
 808552e:	a808      	add	r0, sp, #32
 8085530:	f003 fb6e 	bl	8088c10 <_ZN6StringD1Ev>
            break;
 8085534:	e508      	b.n	8084f48 <_Z10serialMenuv+0xc>

        case '1':
            serialGetLowerLimit();
 8085536:	f7fe fab3 	bl	8083aa0 <_Z19serialGetLowerLimitv>
            break;
 808553a:	e505      	b.n	8084f48 <_Z10serialMenuv+0xc>

        case '2':
            serialGetUpperLimit();
 808553c:	f7fe fb34 	bl	8083ba8 <_Z19serialGetUpperLimitv>
            break;
 8085540:	e502      	b.n	8084f48 <_Z10serialMenuv+0xc>

        case '3':
            Serial.print("APP Version: ");
 8085542:	f004 fda3 	bl	808a08c <_Z16_fetch_usbserialv>
 8085546:	4936      	ldr	r1, [pc, #216]	; (8085620 <_Z10serialMenuv+0x6e4>)
 8085548:	f003 fd58 	bl	8088ffc <_ZN5Print5printEPKc>
            Serial.println(APP_VERSION);
 808554c:	f004 fd9e 	bl	808a08c <_Z16_fetch_usbserialv>
 8085550:	220a      	movs	r2, #10
 8085552:	2146      	movs	r1, #70	; 0x46
 8085554:	f003 fdd3 	bl	80890fe <_ZN5Print7printlnEii>
            Serial.print("Build: ");
 8085558:	f004 fd98 	bl	808a08c <_Z16_fetch_usbserialv>
 808555c:	4931      	ldr	r1, [pc, #196]	; (8085624 <_Z10serialMenuv+0x6e8>)
 808555e:	f003 fd4d 	bl	8088ffc <_ZN5Print5printEPKc>
            Serial.println(BUILD_VERSION);
 8085562:	f004 fd93 	bl	808a08c <_Z16_fetch_usbserialv>
 8085566:	220a      	movs	r2, #10
 8085568:	210d      	movs	r1, #13
 808556a:	f003 fdc8 	bl	80890fe <_ZN5Print7printlnEii>
            break;
 808556e:	e4eb      	b.n	8084f48 <_Z10serialMenuv+0xc>
 8085570:	08090c2d 	.word	0x08090c2d
 8085574:	20000764 	.word	0x20000764
 8085578:	08090c51 	.word	0x08090c51
 808557c:	08090c74 	.word	0x08090c74
 8085580:	200006a8 	.word	0x200006a8
 8085584:	08090c92 	.word	0x08090c92
 8085588:	20000b3c 	.word	0x20000b3c
 808558c:	08090cbf 	.word	0x08090cbf
 8085590:	08090ce7 	.word	0x08090ce7
 8085594:	08090d0b 	.word	0x08090d0b
 8085598:	08090d34 	.word	0x08090d34
 808559c:	0808f481 	.word	0x0808f481
 80855a0:	08090d59 	.word	0x08090d59
 80855a4:	20000b48 	.word	0x20000b48
 80855a8:	08090d75 	.word	0x08090d75
 80855ac:	08090d97 	.word	0x08090d97
 80855b0:	08090dbb 	.word	0x08090dbb
 80855b4:	08090dde 	.word	0x08090dde
 80855b8:	08090e03 	.word	0x08090e03
 80855bc:	08090e1e 	.word	0x08090e1e
 80855c0:	08090e31 	.word	0x08090e31
 80855c4:	20000888 	.word	0x20000888
 80855c8:	08090e4c 	.word	0x08090e4c
 80855cc:	20000b4c 	.word	0x20000b4c
 80855d0:	08090e6f 	.word	0x08090e6f
 80855d4:	08090e8a 	.word	0x08090e8a
 80855d8:	08090eac 	.word	0x08090eac
 80855dc:	200001e8 	.word	0x200001e8
 80855e0:	08090ec6 	.word	0x08090ec6
 80855e4:	08090ee1 	.word	0x08090ee1
 80855e8:	200006e4 	.word	0x200006e4
 80855ec:	08090efd 	.word	0x08090efd
 80855f0:	08090f1c 	.word	0x08090f1c
 80855f4:	08090f3b 	.word	0x08090f3b
 80855f8:	20000b40 	.word	0x20000b40
 80855fc:	08090f53 	.word	0x08090f53
 8085600:	08090f77 	.word	0x08090f77
 8085604:	200006ac 	.word	0x200006ac
 8085608:	08090f9a 	.word	0x08090f9a
 808560c:	20000b9c 	.word	0x20000b9c
 8085610:	08090fd1 	.word	0x08090fd1
 8085614:	20000ba4 	.word	0x20000ba4
 8085618:	08090fd9 	.word	0x08090fd9
 808561c:	08090fe1 	.word	0x08090fe1
 8085620:	08090fea 	.word	0x08090fea
 8085624:	0808f499 	.word	0x0808f499

        case '4':
            if (ozone_enabled == 0)
 8085628:	4d6d      	ldr	r5, [pc, #436]	; (80857e0 <_Z10serialMenuv+0x8a4>)
 808562a:	682b      	ldr	r3, [r5, #0]
 808562c:	b91b      	cbnz	r3, 8085636 <_Z10serialMenuv+0x6fa>
            {
                Serial.println("Enabling Ozone");
 808562e:	f004 fd2d 	bl	808a08c <_Z16_fetch_usbserialv>
 8085632:	496c      	ldr	r1, [pc, #432]	; (80857e4 <_Z10serialMenuv+0x8a8>)
 8085634:	e002      	b.n	808563c <_Z10serialMenuv+0x700>
            }
            else
            {
                Serial.println("Ozone already enabled");
 8085636:	f004 fd29 	bl	808a08c <_Z16_fetch_usbserialv>
 808563a:	496b      	ldr	r1, [pc, #428]	; (80857e8 <_Z10serialMenuv+0x8ac>)
 808563c:	f003 fcf1 	bl	8089022 <_ZN5Print7printlnEPKc>
            }
            ozone_enabled = 1;
 8085640:	2301      	movs	r3, #1
 8085642:	e00d      	b.n	8085660 <_Z10serialMenuv+0x724>
            EEPROM.put(OZONE_EN_MEM_ADDRESS, ozone_enabled);
            break;

        case '5':
            if (ozone_enabled == 1)
 8085644:	4d66      	ldr	r5, [pc, #408]	; (80857e0 <_Z10serialMenuv+0x8a4>)
 8085646:	682b      	ldr	r3, [r5, #0]
 8085648:	2b01      	cmp	r3, #1
 808564a:	d103      	bne.n	8085654 <_Z10serialMenuv+0x718>
            {
                Serial.println("Disabling Ozone");
 808564c:	f004 fd1e 	bl	808a08c <_Z16_fetch_usbserialv>
 8085650:	4966      	ldr	r1, [pc, #408]	; (80857ec <_Z10serialMenuv+0x8b0>)
 8085652:	e002      	b.n	808565a <_Z10serialMenuv+0x71e>
            }
            else
            {
                Serial.println("Ozone already disabled");
 8085654:	f004 fd1a 	bl	808a08c <_Z16_fetch_usbserialv>
 8085658:	4965      	ldr	r1, [pc, #404]	; (80857f0 <_Z10serialMenuv+0x8b4>)
 808565a:	f003 fce2 	bl	8089022 <_ZN5Print7printlnEPKc>
            }
            ozone_enabled = 0;
 808565e:	2300      	movs	r3, #0
 8085660:	602b      	str	r3, [r5, #0]
            EEPROM.put(OZONE_EN_MEM_ADDRESS, ozone_enabled);
 8085662:	f004 fff3 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8085666:	495e      	ldr	r1, [pc, #376]	; (80857e0 <_Z10serialMenuv+0x8a4>)
 8085668:	2058      	movs	r0, #88	; 0x58
 808566a:	e0a5      	b.n	80857b8 <_Z10serialMenuv+0x87c>
            break;

        case '6':
            if (voc_enabled == 0)
 808566c:	4d61      	ldr	r5, [pc, #388]	; (80857f4 <_Z10serialMenuv+0x8b8>)
 808566e:	682b      	ldr	r3, [r5, #0]
 8085670:	b91b      	cbnz	r3, 808567a <_Z10serialMenuv+0x73e>
            {
                Serial.println("Enabling VOCs");
 8085672:	f004 fd0b 	bl	808a08c <_Z16_fetch_usbserialv>
 8085676:	4960      	ldr	r1, [pc, #384]	; (80857f8 <_Z10serialMenuv+0x8bc>)
 8085678:	e002      	b.n	8085680 <_Z10serialMenuv+0x744>
            }
            else
            {
                Serial.println("VOCs already enabled");
 808567a:	f004 fd07 	bl	808a08c <_Z16_fetch_usbserialv>
 808567e:	495f      	ldr	r1, [pc, #380]	; (80857fc <_Z10serialMenuv+0x8c0>)
 8085680:	f003 fccf 	bl	8089022 <_ZN5Print7printlnEPKc>
            }
            voc_enabled = 1;
 8085684:	2301      	movs	r3, #1
 8085686:	e00d      	b.n	80856a4 <_Z10serialMenuv+0x768>
            EEPROM.put(VOC_EN_MEM_ADDRESS, voc_enabled);
            break;

        case '7':
            if (voc_enabled == 1)
 8085688:	4d5a      	ldr	r5, [pc, #360]	; (80857f4 <_Z10serialMenuv+0x8b8>)
 808568a:	682b      	ldr	r3, [r5, #0]
 808568c:	2b01      	cmp	r3, #1
 808568e:	d103      	bne.n	8085698 <_Z10serialMenuv+0x75c>
            {
                Serial.println("Disabling VOC's");
 8085690:	f004 fcfc 	bl	808a08c <_Z16_fetch_usbserialv>
 8085694:	495a      	ldr	r1, [pc, #360]	; (8085800 <_Z10serialMenuv+0x8c4>)
 8085696:	e002      	b.n	808569e <_Z10serialMenuv+0x762>
            }
            else
            {
                Serial.println("VOC's already disabled");
 8085698:	f004 fcf8 	bl	808a08c <_Z16_fetch_usbserialv>
 808569c:	4959      	ldr	r1, [pc, #356]	; (8085804 <_Z10serialMenuv+0x8c8>)
 808569e:	f003 fcc0 	bl	8089022 <_ZN5Print7printlnEPKc>
            }
            voc_enabled = 0;
 80856a2:	2300      	movs	r3, #0
 80856a4:	602b      	str	r3, [r5, #0]
            EEPROM.put(VOC_EN_MEM_ADDRESS, voc_enabled);
 80856a6:	f004 ffd1 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 80856aa:	4952      	ldr	r1, [pc, #328]	; (80857f4 <_Z10serialMenuv+0x8b8>)
 80856ac:	205c      	movs	r0, #92	; 0x5c
 80856ae:	e083      	b.n	80857b8 <_Z10serialMenuv+0x87c>
            break;

        case '8':
            Serial.print("Fault: ");
 80856b0:	f004 fcec 	bl	808a08c <_Z16_fetch_usbserialv>
 80856b4:	4954      	ldr	r1, [pc, #336]	; (8085808 <_Z10serialMenuv+0x8cc>)
 80856b6:	f003 fca1 	bl	8088ffc <_ZN5Print5printEPKc>
            fault = pmic.getFault();
 80856ba:	4854      	ldr	r0, [pc, #336]	; (808580c <_Z10serialMenuv+0x8d0>)
 80856bc:	f003 f82c 	bl	8088718 <_ZN4PMIC8getFaultEv>
 80856c0:	4605      	mov	r5, r0
            Serial.println(fault);
 80856c2:	f004 fce3 	bl	808a08c <_Z16_fetch_usbserialv>
 80856c6:	220a      	movs	r2, #10
 80856c8:	4629      	mov	r1, r5
 80856ca:	f003 fcea 	bl	80890a2 <_ZN5Print7printlnEhi>
            Serial.print("System status: ");
 80856ce:	f004 fcdd 	bl	808a08c <_Z16_fetch_usbserialv>
 80856d2:	494f      	ldr	r1, [pc, #316]	; (8085810 <_Z10serialMenuv+0x8d4>)
 80856d4:	f003 fc92 	bl	8088ffc <_ZN5Print5printEPKc>
            systemStatus = pmic.getSystemStatus();
 80856d8:	484c      	ldr	r0, [pc, #304]	; (808580c <_Z10serialMenuv+0x8d0>)
 80856da:	f003 f81a 	bl	8088712 <_ZN4PMIC15getSystemStatusEv>
 80856de:	4605      	mov	r5, r0
            Serial.println(systemStatus);
 80856e0:	f004 fcd4 	bl	808a08c <_Z16_fetch_usbserialv>
 80856e4:	220a      	movs	r2, #10
 80856e6:	4629      	mov	r1, r5
 80856e8:	f003 fcdb 	bl	80890a2 <_ZN5Print7printlnEhi>
            break;
 80856ec:	e42c      	b.n	8084f48 <_Z10serialMenuv+0xc>

        case '9':
            serialIncreaseChargeCurrent();
 80856ee:	f7ff fa0d 	bl	8084b0c <_Z27serialIncreaseChargeCurrentv>
            break;
 80856f2:	e429      	b.n	8084f48 <_Z10serialMenuv+0xc>

        case '0':
            serialIncreaseInputCurrent();
 80856f4:	f7ff f9c8 	bl	8084a88 <_Z26serialIncreaseInputCurrentv>
            break;
 80856f8:	e426      	b.n	8084f48 <_Z10serialMenuv+0xc>

        case '!':
            Serial.println("Outputting VOCs continuously!  Press any button to exit...");
 80856fa:	f004 fcc7 	bl	808a08c <_Z16_fetch_usbserialv>
 80856fe:	4945      	ldr	r1, [pc, #276]	; (8085814 <_Z10serialMenuv+0x8d8>)
 8085700:	f003 fc8f 	bl	8089022 <_ZN5Print7printlnEPKc>
            while (!Serial.available())
 8085704:	f004 fcc2 	bl	808a08c <_Z16_fetch_usbserialv>
 8085708:	6803      	ldr	r3, [r0, #0]
 808570a:	691b      	ldr	r3, [r3, #16]
 808570c:	4798      	blx	r3
 808570e:	4605      	mov	r5, r0
 8085710:	2800      	cmp	r0, #0
 8085712:	f47f ac19 	bne.w	8084f48 <_Z10serialMenuv+0xc>
            {
                if (!bme.performReading())
 8085716:	4840      	ldr	r0, [pc, #256]	; (8085818 <_Z10serialMenuv+0x8dc>)
 8085718:	f002 f8ba 	bl	8087890 <_ZN15Adafruit_BME68014performReadingEv>
 808571c:	b918      	cbnz	r0, 8085726 <_Z10serialMenuv+0x7ea>
                {
                    Serial.println("Failed to read BME680");
 808571e:	f004 fcb5 	bl	808a08c <_Z16_fetch_usbserialv>
 8085722:	493e      	ldr	r1, [pc, #248]	; (808581c <_Z10serialMenuv+0x8e0>)
 8085724:	e057      	b.n	80857d6 <_Z10serialMenuv+0x89a>
                    return;
                }
                else
                {
                    Serial.printf("TVocs=%1.0f, Temp=%1.1f, press=%1.1f, rh=%1.1f\n\r", bme.gas_resistance / 100, bme.temperature, bme.pressure, bme.humidity);
 8085726:	f004 fcb1 	bl	808a08c <_Z16_fetch_usbserialv>
 808572a:	4607      	mov	r7, r0
 808572c:	68b0      	ldr	r0, [r6, #8]
 808572e:	f005 faaf 	bl	808ac90 <__aeabi_f2d>
 8085732:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8085736:	6870      	ldr	r0, [r6, #4]
 8085738:	f005 faaa 	bl	808ac90 <__aeabi_f2d>
 808573c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8085740:	6830      	ldr	r0, [r6, #0]
 8085742:	f005 faa5 	bl	808ac90 <__aeabi_f2d>
 8085746:	e9cd 0102 	strd	r0, r1, [sp, #8]
 808574a:	4935      	ldr	r1, [pc, #212]	; (8085820 <_Z10serialMenuv+0x8e4>)
 808574c:	68f0      	ldr	r0, [r6, #12]
 808574e:	f005 fffd 	bl	808b74c <__aeabi_fdiv>
 8085752:	f005 fa9d 	bl	808ac90 <__aeabi_f2d>
 8085756:	4a33      	ldr	r2, [pc, #204]	; (8085824 <_Z10serialMenuv+0x8e8>)
 8085758:	e9cd 0100 	strd	r0, r1, [sp]
 808575c:	4629      	mov	r1, r5
 808575e:	4638      	mov	r0, r7
 8085760:	f003 fd94 	bl	808928c <_ZN5Print11printf_implEbPKcz>
 8085764:	e7ce      	b.n	8085704 <_Z10serialMenuv+0x7c8>
                }
            }
            break;

        case '@':
            if (sensible_iot_en == 1)
 8085766:	4d30      	ldr	r5, [pc, #192]	; (8085828 <_Z10serialMenuv+0x8ec>)
 8085768:	682b      	ldr	r3, [r5, #0]
 808576a:	2b01      	cmp	r3, #1
 808576c:	d10b      	bne.n	8085786 <_Z10serialMenuv+0x84a>
            {
                Serial.println("Disabling sensible iot data push.");
 808576e:	f004 fc8d 	bl	808a08c <_Z16_fetch_usbserialv>
 8085772:	492e      	ldr	r1, [pc, #184]	; (808582c <_Z10serialMenuv+0x8f0>)
 8085774:	f003 fc55 	bl	8089022 <_ZN5Print7printlnEPKc>
                sensible_iot_en = 0;
 8085778:	2300      	movs	r3, #0
 808577a:	602b      	str	r3, [r5, #0]
                EEPROM.put(SENSIBLE_IOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 808577c:	f004 ff66 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 8085780:	4629      	mov	r1, r5
 8085782:	208c      	movs	r0, #140	; 0x8c
 8085784:	e018      	b.n	80857b8 <_Z10serialMenuv+0x87c>
            }
            else
            {
                serialSetSensibleIotEnable();
 8085786:	f7fd f8b1 	bl	80828ec <_Z26serialSetSensibleIotEnablev>
 808578a:	f7ff bbdd 	b.w	8084f48 <_Z10serialMenuv+0xc>
            }
            break;

        case '#':
            if (car_topper_power_en == 1)
 808578e:	4d28      	ldr	r5, [pc, #160]	; (8085830 <_Z10serialMenuv+0x8f4>)
 8085790:	682b      	ldr	r3, [r5, #0]
 8085792:	2b01      	cmp	r3, #1
 8085794:	d105      	bne.n	80857a2 <_Z10serialMenuv+0x866>
            {
                car_topper_power_en = 0;
 8085796:	2300      	movs	r3, #0
 8085798:	602b      	str	r3, [r5, #0]
                Serial.println("Disabling car topper power.  ");
 808579a:	f004 fc77 	bl	808a08c <_Z16_fetch_usbserialv>
 808579e:	4925      	ldr	r1, [pc, #148]	; (8085834 <_Z10serialMenuv+0x8f8>)
 80857a0:	e004      	b.n	80857ac <_Z10serialMenuv+0x870>
                EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, car_topper_power_en);
            }
            else
            {
                car_topper_power_en = 1;
 80857a2:	2301      	movs	r3, #1
 80857a4:	602b      	str	r3, [r5, #0]
                Serial.println("Enabling car topper power.  If no external power, system will turn off.");
 80857a6:	f004 fc71 	bl	808a08c <_Z16_fetch_usbserialv>
 80857aa:	4923      	ldr	r1, [pc, #140]	; (8085838 <_Z10serialMenuv+0x8fc>)
 80857ac:	f003 fc39 	bl	8089022 <_ZN5Print7printlnEPKc>
                EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, car_topper_power_en);
 80857b0:	f004 ff4c 	bl	808a64c <_Z21__fetch_global_EEPROMv>
 80857b4:	4629      	mov	r1, r5
 80857b6:	2090      	movs	r0, #144	; 0x90
 80857b8:	f7fb f903 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 80857bc:	f7ff bbc4 	b.w	8084f48 <_Z10serialMenuv+0xc>
            }
            break;

        case '*':
            outputCOtoPI();
 80857c0:	f7fc fe98 	bl	80824f4 <_Z12outputCOtoPIv>
            break;
 80857c4:	f7ff bbc0 	b.w	8084f48 <_Z10serialMenuv+0xc>

        case '?':
            outputSerialMenuOptions();
 80857c8:	f7fe fa72 	bl	8083cb0 <_Z23outputSerialMenuOptionsv>
            break;
 80857cc:	f7ff bbbc 	b.w	8084f48 <_Z10serialMenuv+0xc>

        default:
            break;
        }
    }
    Serial.println("Exiting serial menu...");
 80857d0:	f004 fc5c 	bl	808a08c <_Z16_fetch_usbserialv>
 80857d4:	4919      	ldr	r1, [pc, #100]	; (808583c <_Z10serialMenuv+0x900>)
 80857d6:	f003 fc24 	bl	8089022 <_ZN5Print7printlnEPKc>
}
 80857da:	b00d      	add	sp, #52	; 0x34
 80857dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80857de:	bf00      	nop
 80857e0:	20000a8c 	.word	0x20000a8c
 80857e4:	08090ff8 	.word	0x08090ff8
 80857e8:	08091007 	.word	0x08091007
 80857ec:	0809101d 	.word	0x0809101d
 80857f0:	0809102d 	.word	0x0809102d
 80857f4:	20000b54 	.word	0x20000b54
 80857f8:	08091044 	.word	0x08091044
 80857fc:	08091052 	.word	0x08091052
 8085800:	08091067 	.word	0x08091067
 8085804:	08091077 	.word	0x08091077
 8085808:	0809108e 	.word	0x0809108e
 808580c:	20000aa4 	.word	0x20000aa4
 8085810:	08091096 	.word	0x08091096
 8085814:	080910a6 	.word	0x080910a6
 8085818:	200006e8 	.word	0x200006e8
 808581c:	080910e1 	.word	0x080910e1
 8085820:	42c80000 	.word	0x42c80000
 8085824:	080910f7 	.word	0x080910f7
 8085828:	20000898 	.word	0x20000898
 808582c:	08091128 	.word	0x08091128
 8085830:	20000210 	.word	0x20000210
 8085834:	0809114a 	.word	0x0809114a
 8085838:	08091168 	.word	0x08091168
 808583c:	080911b0 	.word	0x080911b0

08085840 <loop>:

    Log.info("System version: %s", (const char*)System.version());
}

void loop() 
{
 8085840:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    Serial.println("Top of loop");
    measurement_number++;
 8085842:	4c72      	ldr	r4, [pc, #456]	; (8085a0c <loop+0x1cc>)
    Log.info("System version: %s", (const char*)System.version());
}

void loop() 
{
    Serial.println("Top of loop");
 8085844:	f004 fc22 	bl	808a08c <_Z16_fetch_usbserialv>
 8085848:	4971      	ldr	r1, [pc, #452]	; (8085a10 <loop+0x1d0>)
 808584a:	f003 fbea 	bl	8089022 <_ZN5Print7printlnEPKc>
    measurement_number++;
 808584e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8085852:	2200      	movs	r2, #0
 8085854:	4b6f      	ldr	r3, [pc, #444]	; (8085a14 <loop+0x1d4>)
 8085856:	f005 f8bd 	bl	808a9d4 <__adddf3>
 808585a:	e9c4 0100 	strd	r0, r1, [r4]
float readCO_A(void)
{
    float float_offset;
    float CO_float;

    CO_float = readAlpha1();
 808585e:	f7ff f9c3 	bl	8084be8 <_Z10readAlpha1v>
{
    Serial.println("Top of loop");
    measurement_number++;

    //read CO values and apply calibration factors
    CO_float_A = readCO_A();
 8085862:	4b6d      	ldr	r3, [pc, #436]	; (8085a18 <loop+0x1d8>)
 8085864:	6018      	str	r0, [r3, #0]
float readCO_B(void)
{
    float float_offset;
    float CO_float;

    CO_float = readAlpha2();
 8085866:	f7fb fe0b 	bl	8081480 <_Z10readAlpha2v>
    Serial.println("Top of loop");
    measurement_number++;

    //read CO values and apply calibration factors
    CO_float_A = readCO_A();
    CO_float_B = readCO_B();
 808586a:	4b6c      	ldr	r3, [pc, #432]	; (8085a1c <loop+0x1dc>)
 808586c:	6018      	str	r0, [r3, #0]
    readGpsStream();
 808586e:	f7fc f921 	bl	8081ab4 <_Z13readGpsStreamv>
    readGpsStreamDate();        //get the gps date and time along with the cellular time and determine which one to output
 8085872:	f7fb ffa5 	bl	80817c0 <_Z17readGpsStreamDatev>
                                //if no gps connection, use the cellular time.
    systemTime = Time.now();
 8085876:	f003 feda 	bl	808962e <_ZN9TimeClass3nowEv>
 808587a:	4b69      	ldr	r3, [pc, #420]	; (8085a20 <loop+0x1e0>)
 808587c:	6018      	str	r0, [r3, #0]
    Time.setFormat(TIME_FORMAT_ISO8601_FULL);
 808587e:	4b69      	ldr	r3, [pc, #420]	; (8085a24 <loop+0x1e4>)
            return format(now(), format_spec);
        }

        void setFormat(const char* format)
        {
            this->format_spec = format;
 8085880:	681a      	ldr	r2, [r3, #0]
 8085882:	4b69      	ldr	r3, [pc, #420]	; (8085a28 <loop+0x1e8>)
 8085884:	601a      	str	r2, [r3, #0]
    getEspAQSyncData();
 8085886:	f7ff f833 	bl	80848f0 <_Z16getEspAQSyncDatav>
    outputCOtoPI();
 808588a:	f7fc fe33 	bl	80824f4 <_Z12outputCOtoPIv>
    outputDataToESP();
 808588e:	f7fe fc59 	bl	8084144 <_Z15outputDataToESPv>

    if (Serial.available() > 0) 
 8085892:	f004 fbfb 	bl	808a08c <_Z16_fetch_usbserialv>
 8085896:	6803      	ldr	r3, [r0, #0]
 8085898:	691b      	ldr	r3, [r3, #16]
 808589a:	4798      	blx	r3
 808589c:	2800      	cmp	r0, #0
 808589e:	dd1d      	ble.n	80858dc <loop+0x9c>
    {
        // read the incoming byte:
        incomingByte = Serial.read();
 80858a0:	f004 fbf4 	bl	808a08c <_Z16_fetch_usbserialv>
 80858a4:	6803      	ldr	r3, [r0, #0]
 80858a6:	4c61      	ldr	r4, [pc, #388]	; (8085a2c <loop+0x1ec>)
 80858a8:	695b      	ldr	r3, [r3, #20]
 80858aa:	4798      	blx	r3
        if (debugging_enabled) 
 80858ac:	4b60      	ldr	r3, [pc, #384]	; (8085a30 <loop+0x1f0>)
    outputDataToESP();

    if (Serial.available() > 0) 
    {
        // read the incoming byte:
        incomingByte = Serial.read();
 80858ae:	7020      	strb	r0, [r4, #0]
        if (debugging_enabled) 
 80858b0:	681b      	ldr	r3, [r3, #0]
 80858b2:	b14b      	cbz	r3, 80858c8 <loop+0x88>
        {
            Serial.print("Incoming byte:");
 80858b4:	f004 fbea 	bl	808a08c <_Z16_fetch_usbserialv>
 80858b8:	495e      	ldr	r1, [pc, #376]	; (8085a34 <loop+0x1f4>)
 80858ba:	f003 fb9f 	bl	8088ffc <_ZN5Print5printEPKc>
            Serial.println(incomingByte);
 80858be:	f004 fbe5 	bl	808a08c <_Z16_fetch_usbserialv>
 80858c2:	7821      	ldrb	r1, [r4, #0]
 80858c4:	f003 fbb7 	bl	8089036 <_ZN5Print7printlnEc>

        }
        Serial.println(incomingByte);
 80858c8:	f004 fbe0 	bl	808a08c <_Z16_fetch_usbserialv>
 80858cc:	7821      	ldrb	r1, [r4, #0]
 80858ce:	f003 fbb2 	bl	8089036 <_ZN5Print7printlnEc>
        if (incomingByte == 'm') 
 80858d2:	7823      	ldrb	r3, [r4, #0]
 80858d4:	2b6d      	cmp	r3, #109	; 0x6d
 80858d6:	d101      	bne.n	80858dc <loop+0x9c>
        {
            serialMenu();
 80858d8:	f7ff fb30 	bl	8084f3c <_Z10serialMenuv>
        }
    }

    if (serial_cellular_enabled) 
 80858dc:	4b56      	ldr	r3, [pc, #344]	; (8085a38 <loop+0x1f8>)
 80858de:	681b      	ldr	r3, [r3, #0]
 80858e0:	b16b      	cbz	r3, 80858fe <loop+0xbe>
    {
        status_word.status_int |= 0x01;
 80858e2:	4a56      	ldr	r2, [pc, #344]	; (8085a3c <loop+0x1fc>)
 80858e4:	8813      	ldrh	r3, [r2, #0]
 80858e6:	f043 0301 	orr.w	r3, r3, #1
 80858ea:	8013      	strh	r3, [r2, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80858ec:	f002 fe28 	bl	8088540 <spark_cloud_flag_connected>
        //Serial.println("Cellular is enabled.");
        if (!Particle.connected() && !tried_cellular_connect) 
 80858f0:	2800      	cmp	r0, #0
 80858f2:	d138      	bne.n	8085966 <loop+0x126>
 80858f4:	4b52      	ldr	r3, [pc, #328]	; (8085a40 <loop+0x200>)
 80858f6:	781a      	ldrb	r2, [r3, #0]
 80858f8:	2a00      	cmp	r2, #0
 80858fa:	d134      	bne.n	8085966 <loop+0x126>
 80858fc:	e043      	b.n	8085986 <loop+0x146>
 80858fe:	f002 fe1f 	bl	8088540 <spark_cloud_flag_connected>
        }
    }
    else 
    {
        //Serial.println("Cellular is disabled.");
        if (Particle.connected()) 
 8085902:	b1a0      	cbz	r0, 808592e <loop+0xee>
        {
            if (debugging_enabled) 
 8085904:	4b4a      	ldr	r3, [pc, #296]	; (8085a30 <loop+0x1f0>)
 8085906:	681b      	ldr	r3, [r3, #0]
 8085908:	b173      	cbz	r3, 8085928 <loop+0xe8>
            {
                Serial.println("Disconnecting from cellular network");
 808590a:	f004 fbbf 	bl	808a08c <_Z16_fetch_usbserialv>
 808590e:	494d      	ldr	r1, [pc, #308]	; (8085a44 <loop+0x204>)
 8085910:	f003 fb87 	bl	8089022 <_ZN5Print7printlnEPKc>
                writeLogFile("Disconnecting from cellular network");
 8085914:	494b      	ldr	r1, [pc, #300]	; (8085a44 <loop+0x204>)
 8085916:	4668      	mov	r0, sp
 8085918:	f003 f9c1 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
 808591c:	4668      	mov	r0, sp
 808591e:	f7fb feff 	bl	8081720 <_Z12writeLogFile6String>
 8085922:	4668      	mov	r0, sp
 8085924:	f003 f974 	bl	8088c10 <_ZN6StringD1Ev>
            }
            Cellular.off();
 8085928:	4847      	ldr	r0, [pc, #284]	; (8085a48 <loop+0x208>)
 808592a:	f7fb f87c 	bl	8080a26 <_ZN5spark13CellularClass3offEv>
        }
    }

    //check power
    powerCheck.loop();
 808592e:	4c47      	ldr	r4, [pc, #284]	; (8085a4c <loop+0x20c>)
 8085930:	4620      	mov	r0, r4
 8085932:	f000 fa49 	bl	8085dc8 <_ZN10PowerCheck4loopEv>

    //Serial.printf("hasPower=%d hasBattery=%d isCharging=%d\n\r", powerCheck.getHasPower(), powerCheck.getHasBattery(), powerCheck.getIsCharging());
    if ((battery_threshold_enable == 1) && (fuel.getSoC() < BATTERY_THRESHOLD) && (powerCheck.getHasPower() == 0)) 
 8085936:	4b46      	ldr	r3, [pc, #280]	; (8085a50 <loop+0x210>)
 8085938:	681b      	ldr	r3, [r3, #0]
 808593a:	2b01      	cmp	r3, #1
 808593c:	d164      	bne.n	8085a08 <loop+0x1c8>
 808593e:	4845      	ldr	r0, [pc, #276]	; (8085a54 <loop+0x214>)
 8085940:	f003 ff36 	bl	80897b0 <_ZN9FuelGauge6getSoCEv>
 8085944:	4944      	ldr	r1, [pc, #272]	; (8085a58 <loop+0x218>)
 8085946:	f005 ffeb 	bl	808b920 <__aeabi_fcmplt>
 808594a:	2800      	cmp	r0, #0
 808594c:	d05c      	beq.n	8085a08 <loop+0x1c8>
 808594e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8085952:	2b00      	cmp	r3, #0
 8085954:	d158      	bne.n	8085a08 <loop+0x1c8>
    {
        Serial.println("Going to sleep because battery is below 20% charge");
 8085956:	f004 fb99 	bl	808a08c <_Z16_fetch_usbserialv>
 808595a:	4940      	ldr	r1, [pc, #256]	; (8085a5c <loop+0x21c>)
 808595c:	f003 fb61 	bl	8089022 <_ZN5Print7printlnEPKc>
        goToSleepBattery();
 8085960:	f7fc fa72 	bl	8081e48 <_Z16goToSleepBatteryv>
 8085964:	e050      	b.n	8085a08 <loop+0x1c8>
 8085966:	f002 fdeb 	bl	8088540 <spark_cloud_flag_connected>
                Serial.println("After particle connect");
                writeLogFile("After particle connect");
            }
        }
        //this means that it is already connected
        else if (Particle.connected()) 
 808596a:	2800      	cmp	r0, #0
 808596c:	d0df      	beq.n	808592e <loop+0xee>
        {  
            if (debugging_enabled) 
 808596e:	4b30      	ldr	r3, [pc, #192]	; (8085a30 <loop+0x1f0>)
 8085970:	681b      	ldr	r3, [r3, #0]
 8085972:	b123      	cbz	r3, 808597e <loop+0x13e>
            {
                Serial.println("setting tried_cellular_connect to false");
 8085974:	f004 fb8a 	bl	808a08c <_Z16_fetch_usbserialv>
 8085978:	4939      	ldr	r1, [pc, #228]	; (8085a60 <loop+0x220>)
 808597a:	f003 fb52 	bl	8089022 <_ZN5Print7printlnEPKc>
            }
            tried_cellular_connect = false;
 808597e:	4b30      	ldr	r3, [pc, #192]	; (8085a40 <loop+0x200>)
 8085980:	2200      	movs	r2, #0
 8085982:	701a      	strb	r2, [r3, #0]
 8085984:	e7d3      	b.n	808592e <loop+0xee>
        status_word.status_int |= 0x01;
        //Serial.println("Cellular is enabled.");
        if (!Particle.connected() && !tried_cellular_connect) 
        {
            tried_cellular_connect = true;
            if (debugging_enabled) 
 8085986:	4c2a      	ldr	r4, [pc, #168]	; (8085a30 <loop+0x1f0>)
    {
        status_word.status_int |= 0x01;
        //Serial.println("Cellular is enabled.");
        if (!Particle.connected() && !tried_cellular_connect) 
        {
            tried_cellular_connect = true;
 8085988:	2201      	movs	r2, #1
 808598a:	701a      	strb	r2, [r3, #0]
            if (debugging_enabled) 
 808598c:	6823      	ldr	r3, [r4, #0]
 808598e:	b173      	cbz	r3, 80859ae <loop+0x16e>
            {
                Serial.println("Connecting to cellular network");
 8085990:	f004 fb7c 	bl	808a08c <_Z16_fetch_usbserialv>
 8085994:	4933      	ldr	r1, [pc, #204]	; (8085a64 <loop+0x224>)
 8085996:	f003 fb44 	bl	8089022 <_ZN5Print7printlnEPKc>
                writeLogFile("Connecting to cellular network");
 808599a:	4932      	ldr	r1, [pc, #200]	; (8085a64 <loop+0x224>)
 808599c:	4668      	mov	r0, sp
 808599e:	f003 f97e 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
 80859a2:	4668      	mov	r0, sp
 80859a4:	f7fb febc 	bl	8081720 <_Z12writeLogFile6String>
 80859a8:	4668      	mov	r0, sp
 80859aa:	f003 f931 	bl	8088c10 <_ZN6StringD1Ev>

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 80859ae:	4826      	ldr	r0, [pc, #152]	; (8085a48 <loop+0x208>)
 80859b0:	2300      	movs	r3, #0
 80859b2:	461a      	mov	r2, r3
 80859b4:	4619      	mov	r1, r3
 80859b6:	6840      	ldr	r0, [r0, #4]
 80859b8:	f002 fd72 	bl	80884a0 <network_on>
            }
            Cellular.on();
            if (debugging_enabled) 
 80859bc:	6823      	ldr	r3, [r4, #0]
 80859be:	b173      	cbz	r3, 80859de <loop+0x19e>
            {
                Serial.println("after cellularOn");
 80859c0:	f004 fb64 	bl	808a08c <_Z16_fetch_usbserialv>
 80859c4:	4928      	ldr	r1, [pc, #160]	; (8085a68 <loop+0x228>)
 80859c6:	f003 fb2c 	bl	8089022 <_ZN5Print7printlnEPKc>
                writeLogFile("After cellularOn");
 80859ca:	4928      	ldr	r1, [pc, #160]	; (8085a6c <loop+0x22c>)
 80859cc:	4668      	mov	r0, sp
 80859ce:	f003 f966 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
 80859d2:	4668      	mov	r0, sp
 80859d4:	f7fb fea4 	bl	8081720 <_Z12writeLogFile6String>
 80859d8:	4668      	mov	r0, sp
 80859da:	f003 f919 	bl	8088c10 <_ZN6StringD1Ev>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 80859de:	f002 fda7 	bl	8088530 <spark_cloud_flag_connect>
            }
            Particle.connect();
            if (debugging_enabled)
 80859e2:	6823      	ldr	r3, [r4, #0]
 80859e4:	2b00      	cmp	r3, #0
 80859e6:	d0a2      	beq.n	808592e <loop+0xee>
            {
                Serial.println("After particle connect");
 80859e8:	f004 fb50 	bl	808a08c <_Z16_fetch_usbserialv>
 80859ec:	4920      	ldr	r1, [pc, #128]	; (8085a70 <loop+0x230>)
 80859ee:	f003 fb18 	bl	8089022 <_ZN5Print7printlnEPKc>
                writeLogFile("After particle connect");
 80859f2:	491f      	ldr	r1, [pc, #124]	; (8085a70 <loop+0x230>)
 80859f4:	4668      	mov	r0, sp
 80859f6:	f003 f952 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
 80859fa:	4668      	mov	r0, sp
 80859fc:	f7fb fe90 	bl	8081720 <_Z12writeLogFile6String>
 8085a00:	4668      	mov	r0, sp
 8085a02:	f003 f905 	bl	8088c10 <_ZN6StringD1Ev>
 8085a06:	e792      	b.n	808592e <loop+0xee>
    if ((battery_threshold_enable == 1) && (fuel.getSoC() < BATTERY_THRESHOLD) && (powerCheck.getHasPower() == 0)) 
    {
        Serial.println("Going to sleep because battery is below 20% charge");
        goToSleepBattery();
    }
}
 8085a08:	b004      	add	sp, #16
 8085a0a:	bd10      	pop	{r4, pc}
 8085a0c:	20000ad8 	.word	0x20000ad8
 8085a10:	080911c7 	.word	0x080911c7
 8085a14:	3ff00000 	.word	0x3ff00000
 8085a18:	20000770 	.word	0x20000770
 8085a1c:	20000aa0 	.word	0x20000aa0
 8085a20:	20000ac0 	.word	0x20000ac0
 8085a24:	200000d4 	.word	0x200000d4
 8085a28:	20000bd0 	.word	0x20000bd0
 8085a2c:	2000076c 	.word	0x2000076c
 8085a30:	20000acc 	.word	0x20000acc
 8085a34:	080911d3 	.word	0x080911d3
 8085a38:	20000214 	.word	0x20000214
 8085a3c:	20000b44 	.word	0x20000b44
 8085a40:	20000ad0 	.word	0x20000ad0
 8085a44:	08091262 	.word	0x08091262
 8085a48:	20000c28 	.word	0x20000c28
 8085a4c:	20000774 	.word	0x20000774
 8085a50:	20000b48 	.word	0x20000b48
 8085a54:	20000880 	.word	0x20000880
 8085a58:	41a00000 	.word	0x41a00000
 8085a5c:	08091286 	.word	0x08091286
 8085a60:	0809123a 	.word	0x0809123a
 8085a64:	080911e2 	.word	0x080911e2
 8085a68:	08091201 	.word	0x08091201
 8085a6c:	08091212 	.word	0x08091212
 8085a70:	08091223 	.word	0x08091223

08085a74 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v>:
    Serial.println("!:  Continuous serial output of VOC's");
    Serial.println("@   Enable/Disable Sensible-iot data push.  If enabled, time zone will be ignored - UTC will be used.");
    Serial.println("#   Enable/Disable cartopper power mode.  If enabled, absence of external power will stop cellular.");
    Serial.println("?:  Output this menu");
    Serial.println("x:  Exits this menu");
}
 8085a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8085a76:	4b5a      	ldr	r3, [pc, #360]	; (8085be0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x16c>)
#include "google-maps-device-locator.h"
#include "CellularHelper.h"

#define SERIAL_PASSWORD "bould"

GoogleMapsDeviceLocator locator;
 8085a78:	4c5a      	ldr	r4, [pc, #360]	; (8085be4 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x170>)
 8085a7a:	4d5b      	ldr	r5, [pc, #364]	; (8085be8 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x174>)
 8085a7c:	2601      	movs	r6, #1
 8085a7e:	701e      	strb	r6, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 8085a80:	f002 faba 	bl	8087ff8 <HAL_Pin_Map>
 8085a84:	4620      	mov	r0, r4
 8085a86:	f002 f895 	bl	8087bb4 <_ZN23GoogleMapsDeviceLocatorC1Ev>
 8085a8a:	462a      	mov	r2, r5
 8085a8c:	4957      	ldr	r1, [pc, #348]	; (8085bec <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x178>)
 8085a8e:	4620      	mov	r0, r4
 8085a90:	f004 fe48 	bl	808a724 <__aeabi_atexit>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8085a94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8085a98:	4b55      	ldr	r3, [pc, #340]	; (8085bf0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x17c>)
 8085a9a:	2400      	movs	r4, #0
 8085a9c:	701c      	strb	r4, [r3, #0]
 8085a9e:	805c      	strh	r4, [r3, #2]
 8085aa0:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8085aa2:	2003      	movs	r0, #3
 8085aa4:	f002 fc88 	bl	80883b8 <set_system_mode>
int sound_input = B5;       //ozone monitor's voltage output is connected to this input
int co2_en = C5;            //enables the CO2 sensor power

//manually control connection to cellular network
SYSTEM_MODE(MANUAL);
SYSTEM_THREAD(ENABLED);
 8085aa8:	4621      	mov	r1, r4
 8085aaa:	4630      	mov	r0, r6
 8085aac:	f002 fc94 	bl	80883d8 <system_thread_set_state>

//global objects
Adafruit_BME680 bme; // I2C
 8085ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8085ab4:	484f      	ldr	r0, [pc, #316]	; (8085bf4 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x180>)
 8085ab6:	f001 fed5 	bl	8087864 <_ZN15Adafruit_BME680C1Ea>
Telaire_T6713 t6713;  //CO2 sensor
 8085aba:	484f      	ldr	r0, [pc, #316]	; (8085bf8 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x184>)
 8085abc:	f000 fb1d 	bl	80860fa <_ZN13Telaire_T6713C1Ev>
LMP91000 lmp91000_1;
 8085ac0:	484e      	ldr	r0, [pc, #312]	; (8085bfc <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x188>)
 8085ac2:	f000 f8d1 	bl	8085c68 <_ZN8LMP91000C1Ev>
LMP91000 lmp91000_2;
 8085ac6:	484e      	ldr	r0, [pc, #312]	; (8085c00 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x18c>)
 8085ac8:	f000 f8ce 	bl	8085c68 <_ZN8LMP91000C1Ev>
Adafruit_ADS1115 ads1(0x49); //Set I2C address of ADC1
Adafruit_ADS1115 ads2(0x4A); //Set I2C address of ADC2
FuelGauge fuel;
 8085acc:	4e4d      	ldr	r6, [pc, #308]	; (8085c04 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x190>)
//global objects
Adafruit_BME680 bme; // I2C
Telaire_T6713 t6713;  //CO2 sensor
LMP91000 lmp91000_1;
LMP91000 lmp91000_2;
Adafruit_ADS1115 ads1(0x49); //Set I2C address of ADC1
 8085ace:	2149      	movs	r1, #73	; 0x49
 8085ad0:	484d      	ldr	r0, [pc, #308]	; (8085c08 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x194>)
 8085ad2:	f000 fa10 	bl	8085ef6 <_ZN16Adafruit_ADS1115C1Eh>
Adafruit_ADS1115 ads2(0x4A); //Set I2C address of ADC2
 8085ad6:	214a      	movs	r1, #74	; 0x4a
 8085ad8:	484c      	ldr	r0, [pc, #304]	; (8085c0c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x198>)
 8085ada:	f000 fa0c 	bl	8085ef6 <_ZN16Adafruit_ADS1115C1Eh>
FuelGauge fuel;
 8085ade:	4621      	mov	r1, r4
 8085ae0:	4630      	mov	r0, r6
 8085ae2:	f003 fe25 	bl	8089730 <_ZN9FuelGaugeC1Eb>
 8085ae6:	4630      	mov	r0, r6
GPS gps;
PMIC pmic;
 8085ae8:	4e49      	ldr	r6, [pc, #292]	; (8085c10 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x19c>)
Telaire_T6713 t6713;  //CO2 sensor
LMP91000 lmp91000_1;
LMP91000 lmp91000_2;
Adafruit_ADS1115 ads1(0x49); //Set I2C address of ADC1
Adafruit_ADS1115 ads2(0x4A); //Set I2C address of ADC2
FuelGauge fuel;
 8085aea:	462a      	mov	r2, r5
 8085aec:	4949      	ldr	r1, [pc, #292]	; (8085c14 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1a0>)
 8085aee:	f004 fe19 	bl	808a724 <__aeabi_atexit>
GPS gps;
PMIC pmic;
 8085af2:	4621      	mov	r1, r4
 8085af4:	4630      	mov	r0, r6
 8085af6:	f002 fdb2 	bl	808865e <_ZN4PMICC1Eb>
 8085afa:	4630      	mov	r0, r6
PowerCheck powerCheck;
 8085afc:	4e46      	ldr	r6, [pc, #280]	; (8085c18 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1a4>)
LMP91000 lmp91000_2;
Adafruit_ADS1115 ads1(0x49); //Set I2C address of ADC1
Adafruit_ADS1115 ads2(0x4A); //Set I2C address of ADC2
FuelGauge fuel;
GPS gps;
PMIC pmic;
 8085afe:	462a      	mov	r2, r5
 8085b00:	4946      	ldr	r1, [pc, #280]	; (8085c1c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1a8>)
 8085b02:	f004 fe0f 	bl	808a724 <__aeabi_atexit>
PowerCheck powerCheck;
 8085b06:	4630      	mov	r0, r6
 8085b08:	f000 f93e 	bl	8085d88 <_ZN10PowerCheckC1Ev>
 8085b0c:	462a      	mov	r2, r5
 8085b0e:	4944      	ldr	r1, [pc, #272]	; (8085c20 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1ac>)
 8085b10:	4630      	mov	r0, r6
 8085b12:	f004 fe07 	bl	808a724 <__aeabi_atexit>
time_t systemTime;
//SerialLogHandler logHandler;
HIH61XX hih(0x27);
 8085b16:	2127      	movs	r1, #39	; 0x27
 8085b18:	4842      	ldr	r0, [pc, #264]	; (8085c24 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1b0>)
 8085b1a:	f001 ff3d 	bl	8087998 <_ZN7HIH61XXC1Eh>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
 8085b1e:	4b42      	ldr	r3, [pc, #264]	; (8085c28 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1b4>)
#else  // SD_SPI_CONFIGURATION < 3
  typedef SdSpiBase m_spi_t;
#endif  // SD_SPI_CONFIGURATION < 3
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_selected(false),
                m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
 8085b20:	2219      	movs	r2, #25
 8085b22:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
 * \brief Main file system class for %SdFat library.
 */
class SdFat : public SdFatBase {
 public:
#if IMPLEMENT_SPI_INTERFACE_SELECTION
  SdFat() {
 8085b26:	4a41      	ldr	r2, [pc, #260]	; (8085c2c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1b8>)
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8085b28:	4841      	ldr	r0, [pc, #260]	; (8085c30 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1bc>)
 8085b2a:	601a      	str	r2, [r3, #0]
unsigned long lastCheck = 0;
char lastStatus[256];

//sdcard
SdFat sd;
SdFile file;
 8085b2c:	4e41      	ldr	r6, [pc, #260]	; (8085c34 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1c0>)
/**
 * \class SdSpi
 * \brief SPI class for access to SD and SDHC flash memory cards.
 */
#if SD_SPI_CONFIGURATION >= 3
class SdSpi : public SdSpiBase {
 8085b2e:	4a42      	ldr	r2, [pc, #264]	; (8085c38 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1c4>)
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 public:
  SdFile() {}
 8085b30:	4f42      	ldr	r7, [pc, #264]	; (8085c3c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1c8>)
 8085b32:	71dc      	strb	r4, [r3, #7]
 8085b34:	f883 4440 	strb.w	r4, [r3, #1088]	; 0x440
 8085b38:	f883 4441 	strb.w	r4, [r3, #1089]	; 0x441
 8085b3c:	f883 4468 	strb.w	r4, [r3, #1128]	; 0x468
 8085b40:	f883 446d 	strb.w	r4, [r3, #1133]	; 0x46d
 8085b44:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   */
  void send(const uint8_t* buf, size_t n);
  /** \return true - uses SPI transactions */
#if IMPLEMENT_SPI_INTERFACE_SELECTION
  void setSpiIf(uint8_t spiIf) {
    m_spiIf = spiIf;
 8085b48:	f883 4474 	strb.w	r4, [r3, #1140]	; 0x474
 8085b4c:	462a      	mov	r2, r5
 8085b4e:	4631      	mov	r1, r6
 8085b50:	7204      	strb	r4, [r0, #8]
 8085b52:	7244      	strb	r4, [r0, #9]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8085b54:	6044      	str	r4, [r0, #4]
 8085b56:	6007      	str	r7, [r0, #0]
 8085b58:	f004 fde4 	bl	808a724 <__aeabi_atexit>
 8085b5c:	4838      	ldr	r0, [pc, #224]	; (8085c40 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1cc>)
SdFile log_file;
 8085b5e:	462a      	mov	r2, r5
 8085b60:	4631      	mov	r1, r6
 8085b62:	7204      	strb	r4, [r0, #8]
 8085b64:	7244      	strb	r4, [r0, #9]
 8085b66:	6044      	str	r4, [r0, #4]
 8085b68:	6007      	str	r7, [r0, #0]
 8085b6a:	f004 fddb 	bl	808a724 <__aeabi_atexit>
 8085b6e:	4835      	ldr	r0, [pc, #212]	; (8085c44 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1d0>)
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8085b70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
File file1;
String fileName;
 8085b74:	4e34      	ldr	r6, [pc, #208]	; (8085c48 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1d4>)
 8085b76:	4f35      	ldr	r7, [pc, #212]	; (8085c4c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1d8>)
 8085b78:	6083      	str	r3, [r0, #8]
class File : public FatFile, public Stream {
#else  // ARDUINO_FILE_USES_STREAM
class File : public FatFile, public Print {
#endif  // ARDUINO_FILE_USES_STREAM
 public:
  File() {}
 8085b7a:	4b35      	ldr	r3, [pc, #212]	; (8085c50 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1dc>)

//sdcard
SdFat sd;
SdFile file;
SdFile log_file;
File file1;
 8085b7c:	462a      	mov	r2, r5
 8085b7e:	7404      	strb	r4, [r0, #16]
 8085b80:	7444      	strb	r4, [r0, #17]
 8085b82:	6044      	str	r4, [r0, #4]
 8085b84:	4933      	ldr	r1, [pc, #204]	; (8085c54 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1e0>)
 8085b86:	6003      	str	r3, [r0, #0]
String fileName;
 8085b88:	4c33      	ldr	r4, [pc, #204]	; (8085c58 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1e4>)

//sdcard
SdFat sd;
SdFile file;
SdFile log_file;
File file1;
 8085b8a:	f004 fdcb 	bl	808a724 <__aeabi_atexit>
String fileName;
 8085b8e:	4631      	mov	r1, r6
 8085b90:	4638      	mov	r0, r7
 8085b92:	f003 f884 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
 8085b96:	4638      	mov	r0, r7
String logFileName;
 8085b98:	4f30      	ldr	r7, [pc, #192]	; (8085c5c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1e8>)
//sdcard
SdFat sd;
SdFile file;
SdFile log_file;
File file1;
String fileName;
 8085b9a:	462a      	mov	r2, r5
 8085b9c:	4621      	mov	r1, r4
 8085b9e:	f004 fdc1 	bl	808a724 <__aeabi_atexit>
String logFileName;
 8085ba2:	4631      	mov	r1, r6
 8085ba4:	4638      	mov	r0, r7
 8085ba6:	f003 f87a 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
 8085baa:	4638      	mov	r0, r7
int file_started = 0;
int log_file_started = 0;

//wifi
String ssid;        //wifi network name
 8085bac:	4f2c      	ldr	r7, [pc, #176]	; (8085c60 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1ec>)
SdFat sd;
SdFile file;
SdFile log_file;
File file1;
String fileName;
String logFileName;
 8085bae:	462a      	mov	r2, r5
 8085bb0:	4621      	mov	r1, r4
 8085bb2:	f004 fdb7 	bl	808a724 <__aeabi_atexit>
int file_started = 0;
int log_file_started = 0;

//wifi
String ssid;        //wifi network name
 8085bb6:	4631      	mov	r1, r6
 8085bb8:	4638      	mov	r0, r7
 8085bba:	f003 f870 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
 8085bbe:	4638      	mov	r0, r7
String password;    //wifi network password
 8085bc0:	4f28      	ldr	r7, [pc, #160]	; (8085c64 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1f0>)
String logFileName;
int file_started = 0;
int log_file_started = 0;

//wifi
String ssid;        //wifi network name
 8085bc2:	462a      	mov	r2, r5
 8085bc4:	4621      	mov	r1, r4
 8085bc6:	f004 fdad 	bl	808a724 <__aeabi_atexit>
String password;    //wifi network password
 8085bca:	4631      	mov	r1, r6
 8085bcc:	4638      	mov	r0, r7
 8085bce:	f003 f866 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
 8085bd2:	462a      	mov	r2, r5
 8085bd4:	4621      	mov	r1, r4
 8085bd6:	4638      	mov	r0, r7
    Serial.println("!:  Continuous serial output of VOC's");
    Serial.println("@   Enable/Disable Sensible-iot data push.  If enabled, time zone will be ignored - UTC will be used.");
    Serial.println("#   Enable/Disable cartopper power mode.  If enabled, absence of external power will stop cellular.");
    Serial.println("?:  Output this menu");
    Serial.println("x:  Exits this menu");
}
 8085bd8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
int file_started = 0;
int log_file_started = 0;

//wifi
String ssid;        //wifi network name
String password;    //wifi network password
 8085bdc:	f004 bda2 	b.w	808a724 <__aeabi_atexit>
 8085be0:	200006e0 	.word	0x200006e0
 8085be4:	20000af8 	.word	0x20000af8
 8085be8:	200001c8 	.word	0x200001c8
 8085bec:	08087b6d 	.word	0x08087b6d
 8085bf0:	20000ac4 	.word	0x20000ac4
 8085bf4:	200006e8 	.word	0x200006e8
 8085bf8:	20000b4c 	.word	0x20000b4c
 8085bfc:	200001e0 	.word	0x200001e0
 8085c00:	200001e1 	.word	0x200001e1
 8085c04:	20000880 	.word	0x20000880
 8085c08:	20000a94 	.word	0x20000a94
 8085c0c:	20000a9a 	.word	0x20000a9a
 8085c10:	20000aa4 	.word	0x20000aa4
 8085c14:	0808974f 	.word	0x0808974f
 8085c18:	20000774 	.word	0x20000774
 8085c1c:	0808867d 	.word	0x0808867d
 8085c20:	08085d5d 	.word	0x08085d5d
 8085c24:	2000089c 	.word	0x2000089c
 8085c28:	2000022c 	.word	0x2000022c
 8085c2c:	0808efb8 	.word	0x0808efb8
 8085c30:	200006b0 	.word	0x200006b0
 8085c34:	08080933 	.word	0x08080933
 8085c38:	08091330 	.word	0x08091330
 8085c3c:	0808efa0 	.word	0x0808efa0
 8085c40:	20000b58 	.word	0x20000b58
 8085c44:	20000838 	.word	0x20000838
 8085c48:	080917cc 	.word	0x080917cc
 8085c4c:	20000aac 	.word	0x20000aac
 8085c50:	0808ef78 	.word	0x0808ef78
 8085c54:	08080935 	.word	0x08080935
 8085c58:	08088c11 	.word	0x08088c11
 8085c5c:	20000798 	.word	0x20000798
 8085c60:	20000200 	.word	0x20000200
 8085c64:	200001cc 	.word	0x200001cc

08085c68 <_ZN8LMP91000C1Ev>:
#include "LMP91000.h"

LMP91000::LMP91000() {

}
 8085c68:	4770      	bx	lr

08085c6a <_ZN8LMP910004readEh>:

      // read back the value of the register
      return read(reg);
}

uint8_t LMP91000::read(uint8_t reg){
 8085c6a:	b510      	push	{r4, lr}
 8085c6c:	460c      	mov	r4, r1
      //Serial.println("In read func");
      uint8_t chr = 0;
      Wire.beginTransmission(LMP91000_I2C_ADDRESS);           // START+SLA+W
 8085c6e:	f004 fd19 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 8085c72:	2148      	movs	r1, #72	; 0x48
 8085c74:	f004 fbd2 	bl	808a41c <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(reg);                                        // REG
 8085c78:	f004 fd14 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 8085c7c:	6803      	ldr	r3, [r0, #0]
 8085c7e:	4621      	mov	r1, r4
 8085c80:	689b      	ldr	r3, [r3, #8]
 8085c82:	4798      	blx	r3
      //delay(200);
      Wire.endTransmission(false);                            // REP START
 8085c84:	f004 fd0e 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 8085c88:	2100      	movs	r1, #0
 8085c8a:	f004 fbca 	bl	808a422 <_ZN7TwoWire15endTransmissionEh>
      //Serial.println("after end transmission");
      Wire.requestFrom(LMP91000_I2C_ADDRESS, 1, true);        // SLA+R
 8085c8e:	f004 fd09 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 8085c92:	2301      	movs	r3, #1
 8085c94:	461a      	mov	r2, r3
 8085c96:	2148      	movs	r1, #72	; 0x48
 8085c98:	f004 fbb7 	bl	808a40a <_ZN7TwoWire11requestFromEiii>
      if(Wire.available()){
 8085c9c:	f004 fd02 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 8085ca0:	6803      	ldr	r3, [r0, #0]
 8085ca2:	691b      	ldr	r3, [r3, #16]
 8085ca4:	4798      	blx	r3
 8085ca6:	b128      	cbz	r0, 8085cb4 <_ZN8LMP910004readEh+0x4a>
            chr = Wire.read();                                // DATA
 8085ca8:	f004 fcfc 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 8085cac:	6803      	ldr	r3, [r0, #0]
 8085cae:	695b      	ldr	r3, [r3, #20]
 8085cb0:	4798      	blx	r3
 8085cb2:	b2c0      	uxtb	r0, r0
      }

      return chr;
}
 8085cb4:	bd10      	pop	{r4, pc}

08085cb6 <_ZN8LMP910005writeEhh>:

LMP91000::LMP91000() {

}

uint8_t LMP91000::write(uint8_t reg, uint8_t data) {
 8085cb6:	b570      	push	{r4, r5, r6, lr}
 8085cb8:	4616      	mov	r6, r2
 8085cba:	460c      	mov	r4, r1
 8085cbc:	4605      	mov	r5, r0

      Wire.beginTransmission(LMP91000_I2C_ADDRESS);           // START+SLA+W
 8085cbe:	f004 fcf1 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 8085cc2:	2148      	movs	r1, #72	; 0x48
 8085cc4:	f004 fbaa 	bl	808a41c <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(reg);                                        // REG
 8085cc8:	f004 fcec 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 8085ccc:	6803      	ldr	r3, [r0, #0]
 8085cce:	4621      	mov	r1, r4
 8085cd0:	689b      	ldr	r3, [r3, #8]
 8085cd2:	4798      	blx	r3
      Wire.write(data);                                       // DATA
 8085cd4:	f004 fce6 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 8085cd8:	6803      	ldr	r3, [r0, #0]
 8085cda:	4631      	mov	r1, r6
 8085cdc:	689b      	ldr	r3, [r3, #8]
 8085cde:	4798      	blx	r3
      Wire.endTransmission(true); // generate stop condition  // STOP
 8085ce0:	f004 fce0 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 8085ce4:	2101      	movs	r1, #1
 8085ce6:	f004 fb9c 	bl	808a422 <_ZN7TwoWire15endTransmissionEh>

      // read back the value of the register
      return read(reg);
 8085cea:	4621      	mov	r1, r4
 8085cec:	4628      	mov	r0, r5
}
 8085cee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      Wire.write(reg);                                        // REG
      Wire.write(data);                                       // DATA
      Wire.endTransmission(true); // generate stop condition  // STOP

      // read back the value of the register
      return read(reg);
 8085cf2:	f7ff bfba 	b.w	8085c6a <_ZN8LMP910004readEh>

08085cf6 <_ZN8LMP910006statusEv>:

      return chr;
}

uint8_t LMP91000::status(void) {
      return read(LMP91000_STATUS_REG);
 8085cf6:	2100      	movs	r1, #0
 8085cf8:	f7ff bfb7 	b.w	8085c6a <_ZN8LMP910004readEh>

08085cfc <_ZN8LMP910004lockEv>:
}

uint8_t LMP91000::lock(){ // this is the default state
      return write(LMP91000_LOCK_REG, LMP91000_WRITE_LOCK);
 8085cfc:	2201      	movs	r2, #1
 8085cfe:	4611      	mov	r1, r2
 8085d00:	f7ff bfd9 	b.w	8085cb6 <_ZN8LMP910005writeEhh>

08085d04 <_ZN8LMP910006unlockEv>:
}

uint8_t LMP91000::unlock(){
      return write(LMP91000_LOCK_REG, LMP91000_WRITE_UNLOCK);
 8085d04:	2200      	movs	r2, #0
 8085d06:	2101      	movs	r1, #1
 8085d08:	f7ff bfd5 	b.w	8085cb6 <_ZN8LMP910005writeEhh>

08085d0c <_ZN8LMP910009configureEhhh>:
}

uint8_t LMP91000::configure(uint8_t _tiacn, uint8_t _refcn, uint8_t _modecn){
 8085d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8085d10:	4604      	mov	r4, r0
 8085d12:	4688      	mov	r8, r1
 8085d14:	4617      	mov	r7, r2
 8085d16:	461e      	mov	r6, r3

      if(status() == LMP91000_READY){
 8085d18:	f7ff ffed 	bl	8085cf6 <_ZN8LMP910006statusEv>
 8085d1c:	2801      	cmp	r0, #1
 8085d1e:	4605      	mov	r5, r0
 8085d20:	d115      	bne.n	8085d4e <_ZN8LMP910009configureEhhh+0x42>
            unlock();
 8085d22:	4620      	mov	r0, r4
 8085d24:	f7ff ffee 	bl	8085d04 <_ZN8LMP910006unlockEv>
            write(LMP91000_TIACN_REG, _tiacn);
 8085d28:	4642      	mov	r2, r8
 8085d2a:	2110      	movs	r1, #16
 8085d2c:	4620      	mov	r0, r4
 8085d2e:	f7ff ffc2 	bl	8085cb6 <_ZN8LMP910005writeEhh>
            write(LMP91000_REFCN_REG, _refcn);
 8085d32:	463a      	mov	r2, r7
 8085d34:	2111      	movs	r1, #17
 8085d36:	4620      	mov	r0, r4
 8085d38:	f7ff ffbd 	bl	8085cb6 <_ZN8LMP910005writeEhh>
            write(LMP91000_MODECN_REG, _modecn);
 8085d3c:	4632      	mov	r2, r6
 8085d3e:	2112      	movs	r1, #18
 8085d40:	4620      	mov	r0, r4
 8085d42:	f7ff ffb8 	bl	8085cb6 <_ZN8LMP910005writeEhh>
            lock();
 8085d46:	4620      	mov	r0, r4
 8085d48:	f7ff ffd8 	bl	8085cfc <_ZN8LMP910004lockEv>
            return 1;
 8085d4c:	e000      	b.n	8085d50 <_ZN8LMP910009configureEhhh+0x44>
      }
      return 0;
 8085d4e:	2500      	movs	r5, #0
}
 8085d50:	4628      	mov	r0, r5
 8085d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08085d56 <_GLOBAL__sub_I__ZN8LMP91000C2Ev>:
 8085d56:	f002 b94f 	b.w	8087ff8 <HAL_Pin_Map>
	...

08085d5c <_ZN10PowerCheckD1Ev>:
#include "PowerCheck.h"

PowerCheck::PowerCheck() {
}

PowerCheck::~PowerCheck() {
 8085d5c:	b510      	push	{r4, lr}
 8085d5e:	4604      	mov	r4, r0
 8085d60:	4b03      	ldr	r3, [pc, #12]	; (8085d70 <_ZN10PowerCheckD1Ev+0x14>)
 8085d62:	f840 3b14 	str.w	r3, [r0], #20
 8085d66:	f002 fc89 	bl	808867c <_ZN4PMICD1Ev>
}
 8085d6a:	4620      	mov	r0, r4
 8085d6c:	bd10      	pop	{r4, pc}
 8085d6e:	bf00      	nop
 8085d70:	080912c4 	.word	0x080912c4

08085d74 <_ZN10PowerCheckD0Ev>:
#include "PowerCheck.h"

PowerCheck::PowerCheck() {
}

PowerCheck::~PowerCheck() {
 8085d74:	b510      	push	{r4, lr}
 8085d76:	4604      	mov	r4, r0
}
 8085d78:	f7ff fff0 	bl	8085d5c <_ZN10PowerCheckD1Ev>
 8085d7c:	4620      	mov	r0, r4
 8085d7e:	2124      	movs	r1, #36	; 0x24
 8085d80:	f004 fcd5 	bl	808a72e <_ZdlPvj>
 8085d84:	4620      	mov	r0, r4
 8085d86:	bd10      	pop	{r4, pc}

08085d88 <_ZN10PowerCheckC1Ev>:
#include "PowerCheck.h"

PowerCheck::PowerCheck() {
 8085d88:	b538      	push	{r3, r4, r5, lr}
 8085d8a:	4604      	mov	r4, r0
 8085d8c:	4b0d      	ldr	r3, [pc, #52]	; (8085dc4 <_ZN10PowerCheckC1Ev+0x3c>)
 8085d8e:	2500      	movs	r5, #0
 8085d90:	6003      	str	r3, [r0, #0]
 8085d92:	2332      	movs	r3, #50	; 0x32
 8085d94:	6043      	str	r3, [r0, #4]
 8085d96:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8085d9a:	6083      	str	r3, [r0, #8]
 8085d9c:	60c5      	str	r5, [r0, #12]
 8085d9e:	6105      	str	r5, [r0, #16]
 8085da0:	4629      	mov	r1, r5
 8085da2:	3014      	adds	r0, #20
 8085da4:	f002 fc5b 	bl	808865e <_ZN4PMICC1Eb>
 8085da8:	2301      	movs	r3, #1
 8085daa:	61a5      	str	r5, [r4, #24]
 8085dac:	61e5      	str	r5, [r4, #28]
 8085dae:	f884 5020 	strb.w	r5, [r4, #32]
 8085db2:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
 8085db6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8085dba:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
}
 8085dbe:	4620      	mov	r0, r4
 8085dc0:	bd38      	pop	{r3, r4, r5, pc}
 8085dc2:	bf00      	nop
 8085dc4:	080912c4 	.word	0x080912c4

08085dc8 <_ZN10PowerCheck4loopEv>:

PowerCheck::~PowerCheck() {
}

void PowerCheck::loop() {
 8085dc8:	b510      	push	{r4, lr}
 8085dca:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8085dcc:	f002 f9ac 	bl	8088128 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastFastCheck >= FAST_CHECK_INTERVAL_MS) {
 8085dd0:	68e3      	ldr	r3, [r4, #12]
 8085dd2:	1ac0      	subs	r0, r0, r3
 8085dd4:	6863      	ldr	r3, [r4, #4]
 8085dd6:	4298      	cmp	r0, r3
 8085dd8:	d31f      	bcc.n	8085e1a <_ZN10PowerCheck4loopEv+0x52>
 8085dda:	f002 f9a5 	bl	8088128 <HAL_Timer_Get_Milli_Seconds>
		// For reasons explained in greater detail we need to check the system status register frequently.
		// But not too frequently, because it does use some system resources to communicate over I2C.
		// An interval of 50 milliseconds, or 20 times per second, seems about right.
		// Setting the interval to 100 milliseconds causes it to miss the condition looked for below sometimes.

		lastFastCheck = millis();
 8085dde:	60e0      	str	r0, [r4, #12]

		byte systemStatus = pmic.getSystemStatus();
 8085de0:	f104 0014 	add.w	r0, r4, #20
 8085de4:	f002 fc95 	bl	8088712 <_ZN4PMIC15getSystemStatusEv>
		if ((systemStatus & 0x04) != 0) {
 8085de8:	f000 0304 	and.w	r3, r0, #4
 8085dec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8085df0:	b173      	cbz	r3, 8085e10 <_ZN10PowerCheck4loopEv+0x48>
			// Bit 5 CHRG_STAT[1] R
			// Bit 4 CHRG_STAT[0] R
			// 00 – Not Charging, 01 – Pre-charge (<VBATLOWV), 10 – Fast Charging, 11 – Charge Termination Done
			byte chrgStat = (systemStatus >> 4) & 0x3;

			if (chrgStat != lastChrgStat) {
 8085df2:	f894 3020 	ldrb.w	r3, [r4, #32]
			// (It works similarly for a USB charger, except it's 0x24 and 0x34).

			// Bit 5 CHRG_STAT[1] R
			// Bit 4 CHRG_STAT[0] R
			// 00 – Not Charging, 01 – Pre-charge (<VBATLOWV), 10 – Fast Charging, 11 – Charge Termination Done
			byte chrgStat = (systemStatus >> 4) & 0x3;
 8085df6:	f3c0 1001 	ubfx	r0, r0, #4, #2

			if (chrgStat != lastChrgStat) {
 8085dfa:	4283      	cmp	r3, r0
				// Here's where we check to see if the charging status changes. When there's no battery present
				// it changes a lot between fast charging and charge termination done, but since we're polling
				// here instead of using interrupts, we have to poll frequently enough to see states.
				// (The BQ24195 power manager controller is connected to BATT_INT_PC13, but accessing that
				// interrupt from user code is a pain, so I just poll here.)
				changeCount++;
 8085dfc:	bf1f      	itttt	ne
 8085dfe:	69e3      	ldrne	r3, [r4, #28]
				lastChrgStat = chrgStat;
 8085e00:	f884 0020 	strbne.w	r0, [r4, #32]
				// Here's where we check to see if the charging status changes. When there's no battery present
				// it changes a lot between fast charging and charge termination done, but since we're polling
				// here instead of using interrupts, we have to poll frequently enough to see states.
				// (The BQ24195 power manager controller is connected to BATT_INT_PC13, but accessing that
				// interrupt from user code is a pain, so I just poll here.)
				changeCount++;
 8085e04:	3301      	addne	r3, #1
 8085e06:	61e3      	strne	r3, [r4, #28]
				lastChrgStat = chrgStat;
			}

			// We have power (USB or VIN)
			hasPower = true;
 8085e08:	2301      	movs	r3, #1
 8085e0a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 8085e0e:	e001      	b.n	8085e14 <_ZN10PowerCheck4loopEv+0x4c>
			// 0x34 (Charge Termination Done, Power Good)
			// It does not seem to be possible to tell the difference between VIN and a USB charger
		}
		else {
			// Power good is false, so that means we must be running off battery
			hasPower = false;
 8085e10:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
		}

		checkCount++;
 8085e14:	69a3      	ldr	r3, [r4, #24]
 8085e16:	3301      	adds	r3, #1
 8085e18:	61a3      	str	r3, [r4, #24]
 8085e1a:	f002 f985 	bl	8088128 <HAL_Timer_Get_Milli_Seconds>
	}
	if (millis() - lastSlowCheck > SLOW_CHECK_INTERVAL_MS) {
 8085e1e:	6923      	ldr	r3, [r4, #16]
 8085e20:	1ac0      	subs	r0, r0, r3
 8085e22:	68a3      	ldr	r3, [r4, #8]
 8085e24:	4298      	cmp	r0, r3
 8085e26:	d91c      	bls.n	8085e62 <_ZN10PowerCheck4loopEv+0x9a>
 8085e28:	f002 f97e 	bl	8088128 <HAL_Timer_Get_Milli_Seconds>
		lastSlowCheck = millis();

		// Normally we get a checkCount of 36 or so, and a changeCount of 18 when there's no battery
		hasBattery = ! ((checkCount > 10) && (changeCount > (checkCount / 4)));
 8085e2c:	69a3      	ldr	r3, [r4, #24]
		}

		checkCount++;
	}
	if (millis() - lastSlowCheck > SLOW_CHECK_INTERVAL_MS) {
		lastSlowCheck = millis();
 8085e2e:	6120      	str	r0, [r4, #16]

		// Normally we get a checkCount of 36 or so, and a changeCount of 18 when there's no battery
		hasBattery = ! ((checkCount > 10) && (changeCount > (checkCount / 4)));
 8085e30:	2b0a      	cmp	r3, #10
 8085e32:	dd06      	ble.n	8085e42 <_ZN10PowerCheck4loopEv+0x7a>
 8085e34:	69e2      	ldr	r2, [r4, #28]
 8085e36:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 8085e3a:	bfd4      	ite	le
 8085e3c:	2301      	movle	r3, #1
 8085e3e:	2300      	movgt	r3, #0
 8085e40:	e000      	b.n	8085e44 <_ZN10PowerCheck4loopEv+0x7c>
 8085e42:	2301      	movs	r3, #1
 8085e44:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22

		// The battery is charging if in pre-charge or fast charge mode
		isCharging = hasBattery && (lastChrgStat == 1 || lastChrgStat == 2);
 8085e48:	b133      	cbz	r3, 8085e58 <_ZN10PowerCheck4loopEv+0x90>
 8085e4a:	f894 3020 	ldrb.w	r3, [r4, #32]
 8085e4e:	3b01      	subs	r3, #1
 8085e50:	2b01      	cmp	r3, #1
 8085e52:	bf8c      	ite	hi
 8085e54:	2300      	movhi	r3, #0
 8085e56:	2301      	movls	r3, #1
 8085e58:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23

		checkCount = 0;
 8085e5c:	2300      	movs	r3, #0
 8085e5e:	61a3      	str	r3, [r4, #24]
		changeCount = 0;
 8085e60:	61e3      	str	r3, [r4, #28]
 8085e62:	bd10      	pop	{r4, pc}

08085e64 <_GLOBAL__sub_I__ZN10PowerCheckC2Ev>:
 8085e64:	f002 b8c8 	b.w	8087ff8 <HAL_Pin_Map>

08085e68 <_ZL8i2cwriteh>:
/**************************************************************************/
/*!
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static void i2cwrite(uint8_t x) {
 8085e68:	b510      	push	{r4, lr}
 8085e6a:	4604      	mov	r4, r0
  #else
  Wire.send(x);
  #endif
  */
  
  Wire.write((uint8_t)x);
 8085e6c:	f004 fc1a 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 8085e70:	6803      	ldr	r3, [r0, #0]
 8085e72:	4621      	mov	r1, r4
}
 8085e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  #else
  Wire.send(x);
  #endif
  */
  
  Wire.write((uint8_t)x);
 8085e78:	689b      	ldr	r3, [r3, #8]
 8085e7a:	4718      	bx	r3

08085e7c <_ZL7i2creadv>:
/**************************************************************************/
/*!
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static uint8_t i2cread(void) {
 8085e7c:	b508      	push	{r3, lr}
  #else
  return Wire.receive();
  #endif
  */
  
  return Wire.read();
 8085e7e:	f004 fc11 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 8085e82:	6803      	ldr	r3, [r0, #0]
 8085e84:	695b      	ldr	r3, [r3, #20]
 8085e86:	4798      	blx	r3
}
 8085e88:	b2c0      	uxtb	r0, r0
 8085e8a:	bd08      	pop	{r3, pc}

08085e8c <_ZL13writeRegisterhht>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static void writeRegister(uint8_t i2cAddress, uint8_t reg, uint16_t value) {
 8085e8c:	b570      	push	{r4, r5, r6, lr}
 8085e8e:	4606      	mov	r6, r0
 8085e90:	460d      	mov	r5, r1
 8085e92:	4614      	mov	r4, r2
  Wire.beginTransmission(i2cAddress);
 8085e94:	f004 fc06 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 8085e98:	4631      	mov	r1, r6
 8085e9a:	f004 fabb 	bl	808a414 <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite((uint8_t)reg);
 8085e9e:	4628      	mov	r0, r5
 8085ea0:	f7ff ffe2 	bl	8085e68 <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value>>8));
 8085ea4:	0a20      	lsrs	r0, r4, #8
 8085ea6:	f7ff ffdf 	bl	8085e68 <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value & 0xFF));
 8085eaa:	b2e0      	uxtb	r0, r4
 8085eac:	f7ff ffdc 	bl	8085e68 <_ZL8i2cwriteh>
  Wire.endTransmission();
 8085eb0:	f004 fbf8 	bl	808a6a4 <_Z19__fetch_global_Wirev>
}
 8085eb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
static void writeRegister(uint8_t i2cAddress, uint8_t reg, uint16_t value) {
  Wire.beginTransmission(i2cAddress);
  i2cwrite((uint8_t)reg);
  i2cwrite((uint8_t)(value>>8));
  i2cwrite((uint8_t)(value & 0xFF));
  Wire.endTransmission();
 8085eb8:	f004 bab7 	b.w	808a42a <_ZN7TwoWire15endTransmissionEv>

08085ebc <_ZL12readRegisterhh.isra.0>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
 8085ebc:	b510      	push	{r4, lr}
 8085ebe:	4604      	mov	r4, r0
  Wire.beginTransmission(i2cAddress);
 8085ec0:	f004 fbf0 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 8085ec4:	4621      	mov	r1, r4
 8085ec6:	f004 faa5 	bl	808a414 <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite(ADS1015_REG_POINTER_CONVERT);
 8085eca:	2000      	movs	r0, #0
 8085ecc:	f7ff ffcc 	bl	8085e68 <_ZL8i2cwriteh>
  Wire.endTransmission();
 8085ed0:	f004 fbe8 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 8085ed4:	f004 faa9 	bl	808a42a <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(i2cAddress, (uint8_t)2);
 8085ed8:	f004 fbe4 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 8085edc:	4621      	mov	r1, r4
 8085ede:	2202      	movs	r2, #2
 8085ee0:	f004 fa8b 	bl	808a3fa <_ZN7TwoWire11requestFromEhh>
  return ((i2cread() << 8) | i2cread());  
 8085ee4:	f7ff ffca 	bl	8085e7c <_ZL7i2creadv>
 8085ee8:	4604      	mov	r4, r0
 8085eea:	f7ff ffc7 	bl	8085e7c <_ZL7i2creadv>
 8085eee:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
}
 8085ef2:	b280      	uxth	r0, r0
 8085ef4:	bd10      	pop	{r4, pc}

08085ef6 <_ZN16Adafruit_ADS1115C1Eh>:
Adafruit_ADS1015::Adafruit_ADS1015(uint8_t i2cAddress) 
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1015_CONVERSIONDELAY;
   m_bitShift = 4;
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
 8085ef6:	2200      	movs	r2, #0
    @brief  Instantiates a new ADS1115 class w/appropriate properties
*/
/**************************************************************************/
Adafruit_ADS1115::Adafruit_ADS1115(uint8_t i2cAddress)
{
   m_i2cAddress = i2cAddress;
 8085ef8:	7001      	strb	r1, [r0, #0]
   m_conversionDelay = ADS1115_CONVERSIONDELAY;
 8085efa:	2108      	movs	r1, #8
Adafruit_ADS1015::Adafruit_ADS1015(uint8_t i2cAddress) 
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1015_CONVERSIONDELAY;
   m_bitShift = 4;
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
 8085efc:	8082      	strh	r2, [r0, #4]
*/
/**************************************************************************/
Adafruit_ADS1115::Adafruit_ADS1115(uint8_t i2cAddress)
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1115_CONVERSIONDELAY;
 8085efe:	7041      	strb	r1, [r0, #1]
   m_bitShift = 0;
 8085f00:	7082      	strb	r2, [r0, #2]
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
}
 8085f02:	4770      	bx	lr

08085f04 <_ZN16Adafruit_ADS10155beginEv>:
/**************************************************************************/
/*!
    @brief  Sets up the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
void Adafruit_ADS1015::begin() {
 8085f04:	b508      	push	{r3, lr}
  Wire.begin();
 8085f06:	f004 fbcd 	bl	808a6a4 <_Z19__fetch_global_Wirev>
}
 8085f0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/*!
    @brief  Sets up the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
void Adafruit_ADS1015::begin() {
  Wire.begin();
 8085f0e:	f004 ba65 	b.w	808a3dc <_ZN7TwoWire5beginEv>

08085f12 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>:
    @brief  Sets the gain and input voltage range
*/
/**************************************************************************/
void Adafruit_ADS1015::setGain(adsGain_t gain)
{
  m_gain = gain;
 8085f12:	8081      	strh	r1, [r0, #4]
 8085f14:	4770      	bx	lr

08085f16 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>:
/*!
    @brief  Gets a single-ended ADC reading from the specified channel
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
  if (channel > 3)
 8085f16:	2903      	cmp	r1, #3
/**************************************************************************/
/*!
    @brief  Gets a single-ended ADC reading from the specified channel
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
 8085f18:	b510      	push	{r4, lr}
 8085f1a:	4604      	mov	r4, r0
  if (channel > 3)
 8085f1c:	d822      	bhi.n	8085f64 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x4e>

  // Set PGA/voltage range
  config |= m_gain;

  // Set single-ended input channel
  switch (channel)
 8085f1e:	2902      	cmp	r1, #2
                    ADS1015_REG_CONFIG_CMODE_TRAD   | // Traditional comparator (default val)
                    ADS1015_REG_CONFIG_DR_1600SPS   | // 1600 samples per second (default)
                    ADS1015_REG_CONFIG_MODE_SINGLE;   // Single-shot mode (default)

  // Set PGA/voltage range
  config |= m_gain;
 8085f20:	8882      	ldrh	r2, [r0, #4]

  // Set single-ended input channel
  switch (channel)
 8085f22:	d008      	beq.n	8085f36 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x20>
 8085f24:	2903      	cmp	r1, #3
 8085f26:	d009      	beq.n	8085f3c <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x26>
 8085f28:	2901      	cmp	r1, #1
  {
    case (0):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_0;
 8085f2a:	bf14      	ite	ne
 8085f2c:	f442 4283 	orrne.w	r2, r2, #16768	; 0x4180
      break;
    case (1):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
 8085f30:	f442 42a3 	orreq.w	r2, r2, #20864	; 0x5180
 8085f34:	e004      	b.n	8085f40 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x2a>
      break;
    case (2):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
 8085f36:	f442 42c3 	orr.w	r2, r2, #24960	; 0x6180
 8085f3a:	e001      	b.n	8085f40 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x2a>
      break;
    case (3):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
 8085f3c:	f442 42e3 	orr.w	r2, r2, #29056	; 0x7180
 8085f40:	f042 0203 	orr.w	r2, r2, #3

  // Set 'start single-conversion' bit
  config |= ADS1015_REG_CONFIG_OS_SINGLE;

  // Write config register to the ADC
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
 8085f44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8085f48:	2101      	movs	r1, #1
 8085f4a:	7820      	ldrb	r0, [r4, #0]
 8085f4c:	f7ff ff9e 	bl	8085e8c <_ZL13writeRegisterhht>

  // Wait for the conversion to complete
  delay(m_conversionDelay);
 8085f50:	7860      	ldrb	r0, [r4, #1]
 8085f52:	f003 fbb9 	bl	80896c8 <delay>

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
 8085f56:	7820      	ldrb	r0, [r4, #0]
 8085f58:	f7ff ffb0 	bl	8085ebc <_ZL12readRegisterhh.isra.0>
 8085f5c:	78a3      	ldrb	r3, [r4, #2]
 8085f5e:	4118      	asrs	r0, r3
 8085f60:	b280      	uxth	r0, r0
 8085f62:	bd10      	pop	{r4, pc}
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
  if (channel > 3)
  {
    return 0;
 8085f64:	2000      	movs	r0, #0
  delay(m_conversionDelay);

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
}
 8085f66:	bd10      	pop	{r4, pc}

08085f68 <_GLOBAL__sub_I__ZN16Adafruit_ADS1015C2Eh>:
 8085f68:	f002 b846 	b.w	8087ff8 <HAL_Pin_Map>

08085f6c <_ZN3GPS15set_lat_decimalE6Stringc>:
#include "gps.h"

//set decimal value of latitude from NMEA string
void GPS::set_lat_decimal(String latString, char nsString){
 8085f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8085f70:	460e      	mov	r6, r1
 8085f72:	b088      	sub	sp, #32
 8085f74:	4604      	mov	r4, r0
 8085f76:	4615      	mov	r5, r2
    String whole_str = latString.substring(0,2);
 8085f78:	4668      	mov	r0, sp
 8085f7a:	2302      	movs	r3, #2
 8085f7c:	2200      	movs	r2, #0
 8085f7e:	f002 ffc7 	bl	8088f10 <_ZNK6String9substringEjj>
    String frac_str = latString.substring(2,10);
 8085f82:	230a      	movs	r3, #10
 8085f84:	2202      	movs	r2, #2
 8085f86:	4631      	mov	r1, r6
 8085f88:	a804      	add	r0, sp, #16
 8085f8a:	f002 ffc1 	bl	8088f10 <_ZNK6String9substringEjj>
    latWhole = whole_str.toInt();
 8085f8e:	4668      	mov	r0, sp
 8085f90:	f002 ffe6 	bl	8088f60 <_ZNK6String5toIntEv>
 8085f94:	83a0      	strh	r0, [r4, #28]
    latFrac = frac_str.toInt();
 8085f96:	a804      	add	r0, sp, #16
 8085f98:	f002 ffe2 	bl	8088f60 <_ZNK6String5toIntEv>
 8085f9c:	83e0      	strh	r0, [r4, #30]

    int whole_part = whole_str.toInt();
 8085f9e:	4668      	mov	r0, sp
 8085fa0:	f002 ffde 	bl	8088f60 <_ZNK6String5toIntEv>
 8085fa4:	4606      	mov	r6, r0
    //Serial.print("Whole part:");
    //Serial.println(whole_part);

    double frac_part = frac_str.toFloat();
 8085fa6:	a804      	add	r0, sp, #16
 8085fa8:	f002 ffdf 	bl	8088f6a <_ZNK6String7toFloatEv>
 8085fac:	4680      	mov	r8, r0
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    latitude = whole_part;
    latitude += (frac_part)/60;
 8085fae:	4630      	mov	r0, r6
 8085fb0:	f004 fe5c 	bl	808ac6c <__aeabi_i2d>
 8085fb4:	4606      	mov	r6, r0
 8085fb6:	4640      	mov	r0, r8
 8085fb8:	460f      	mov	r7, r1
 8085fba:	f004 fe69 	bl	808ac90 <__aeabi_f2d>
 8085fbe:	2200      	movs	r2, #0
 8085fc0:	4b0c      	ldr	r3, [pc, #48]	; (8085ff4 <_ZN3GPS15set_lat_decimalE6Stringc+0x88>)
 8085fc2:	f004 ffe3 	bl	808af8c <__aeabi_ddiv>
 8085fc6:	460b      	mov	r3, r1
 8085fc8:	4602      	mov	r2, r0
 8085fca:	4639      	mov	r1, r7
 8085fcc:	4630      	mov	r0, r6
 8085fce:	f004 fd01 	bl	808a9d4 <__adddf3>
    if(nsString == 'S'){
 8085fd2:	2d53      	cmp	r5, #83	; 0x53
        ns_indicator = 0;
 8085fd4:	bf0c      	ite	eq
 8085fd6:	2300      	moveq	r3, #0
    }else{
        ns_indicator = 0x80;
 8085fd8:	2380      	movne	r3, #128	; 0x80
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    latitude = whole_part;
    latitude += (frac_part)/60;
 8085fda:	e9c4 0102 	strd	r0, r1, [r4, #8]
    if(nsString == 'S'){
        ns_indicator = 0;
    }else{
        ns_indicator = 0x80;
 8085fde:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
#include "gps.h"

//set decimal value of latitude from NMEA string
void GPS::set_lat_decimal(String latString, char nsString){
    String whole_str = latString.substring(0,2);
    String frac_str = latString.substring(2,10);
 8085fe2:	a804      	add	r0, sp, #16
 8085fe4:	f002 fe14 	bl	8088c10 <_ZN6StringD1Ev>
#include "gps.h"

//set decimal value of latitude from NMEA string
void GPS::set_lat_decimal(String latString, char nsString){
    String whole_str = latString.substring(0,2);
 8085fe8:	4668      	mov	r0, sp
 8085fea:	f002 fe11 	bl	8088c10 <_ZN6StringD1Ev>
    if(nsString == 'S'){
        ns_indicator = 0;
    }else{
        ns_indicator = 0x80;
    }
}
 8085fee:	b008      	add	sp, #32
 8085ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8085ff4:	404e0000 	.word	0x404e0000

08085ff8 <_ZN3GPS16set_long_decimalE6Stringc>:

void GPS::set_long_decimal(String longString, char ewString){
 8085ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8085ffc:	460e      	mov	r6, r1
 8085ffe:	b088      	sub	sp, #32
 8086000:	4604      	mov	r4, r0
 8086002:	4615      	mov	r5, r2
    String whole_str = longString.substring(0,3);
 8086004:	4668      	mov	r0, sp
 8086006:	2303      	movs	r3, #3
 8086008:	2200      	movs	r2, #0
 808600a:	f002 ff81 	bl	8088f10 <_ZNK6String9substringEjj>
    String frac_str = longString.substring(3,10);
 808600e:	230a      	movs	r3, #10
 8086010:	2203      	movs	r2, #3
 8086012:	4631      	mov	r1, r6
 8086014:	a804      	add	r0, sp, #16
 8086016:	f002 ff7b 	bl	8088f10 <_ZNK6String9substringEjj>

    longWhole = whole_str.toInt();
 808601a:	4668      	mov	r0, sp
 808601c:	f002 ffa0 	bl	8088f60 <_ZNK6String5toIntEv>
 8086020:	8420      	strh	r0, [r4, #32]
    longFrac = frac_str.toInt();
 8086022:	a804      	add	r0, sp, #16
 8086024:	f002 ff9c 	bl	8088f60 <_ZNK6String5toIntEv>
 8086028:	8460      	strh	r0, [r4, #34]	; 0x22
    int whole_part = whole_str.toInt();
 808602a:	4668      	mov	r0, sp
 808602c:	f002 ff98 	bl	8088f60 <_ZNK6String5toIntEv>
 8086030:	4606      	mov	r6, r0
    //Serial.print("Whole string: ");
    //Serial.println(whole_str);
    //Serial.print("Whole part:");
    //Serial.println(whole_part);

    double frac_part = frac_str.toFloat();
 8086032:	a804      	add	r0, sp, #16
 8086034:	f002 ff99 	bl	8088f6a <_ZNK6String7toFloatEv>
 8086038:	4680      	mov	r8, r0
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    longitude = whole_part;
    longitude += (frac_part)/60;
 808603a:	4630      	mov	r0, r6
 808603c:	f004 fe16 	bl	808ac6c <__aeabi_i2d>
 8086040:	4606      	mov	r6, r0
 8086042:	4640      	mov	r0, r8
 8086044:	460f      	mov	r7, r1
 8086046:	f004 fe23 	bl	808ac90 <__aeabi_f2d>
 808604a:	2200      	movs	r2, #0
 808604c:	4b0c      	ldr	r3, [pc, #48]	; (8086080 <_ZN3GPS16set_long_decimalE6Stringc+0x88>)
 808604e:	f004 ff9d 	bl	808af8c <__aeabi_ddiv>
 8086052:	460b      	mov	r3, r1
 8086054:	4602      	mov	r2, r0
 8086056:	4639      	mov	r1, r7
 8086058:	4630      	mov	r0, r6
 808605a:	f004 fcbb 	bl	808a9d4 <__adddf3>
    if(ewString == 'E'){
 808605e:	2d45      	cmp	r5, #69	; 0x45
      ew_indicator = 0;
 8086060:	bf0c      	ite	eq
 8086062:	2300      	moveq	r3, #0
    }else{
      ew_indicator = 0x01;
 8086064:	2301      	movne	r3, #1
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    longitude = whole_part;
    longitude += (frac_part)/60;
 8086066:	e9c4 0104 	strd	r0, r1, [r4, #16]
    if(ewString == 'E'){
      ew_indicator = 0;
    }else{
      ew_indicator = 0x01;
 808606a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    }
}

void GPS::set_long_decimal(String longString, char ewString){
    String whole_str = longString.substring(0,3);
    String frac_str = longString.substring(3,10);
 808606e:	a804      	add	r0, sp, #16
 8086070:	f002 fdce 	bl	8088c10 <_ZN6StringD1Ev>
        ns_indicator = 0x80;
    }
}

void GPS::set_long_decimal(String longString, char ewString){
    String whole_str = longString.substring(0,3);
 8086074:	4668      	mov	r0, sp
 8086076:	f002 fdcb 	bl	8088c10 <_ZN6StringD1Ev>
    if(ewString == 'E'){
      ew_indicator = 0;
    }else{
      ew_indicator = 0x01;
    }
}
 808607a:	b008      	add	sp, #32
 808607c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8086080:	404e0000 	.word	0x404e0000

08086084 <_ZN3GPS14set_satellitesE6String>:

void GPS::set_satellites(String satString){
 8086084:	b510      	push	{r4, lr}
 8086086:	4604      	mov	r4, r0
    satellites_used = satString.toInt();
 8086088:	4608      	mov	r0, r1
 808608a:	f002 ff69 	bl	8088f60 <_ZNK6String5toIntEv>
 808608e:	62e0      	str	r0, [r4, #44]	; 0x2c
 8086090:	bd10      	pop	{r4, pc}
	...

08086094 <_ZN3GPS22set_horizontalDilutionE6String>:
}

void GPS::set_horizontalDilution(String hdString){
 8086094:	b510      	push	{r4, lr}
 8086096:	4604      	mov	r4, r0
    float temp_float = hdString.toFloat();
 8086098:	4608      	mov	r0, r1
 808609a:	f002 ff66 	bl	8088f6a <_ZNK6String7toFloatEv>
    temp_float *= 10;

    horizontal_dilution = temp_float;
 808609e:	4902      	ldr	r1, [pc, #8]	; (80860a8 <_ZN3GPS22set_horizontalDilutionE6String+0x14>)
 80860a0:	f005 faa0 	bl	808b5e4 <__aeabi_fmul>
 80860a4:	6320      	str	r0, [r4, #48]	; 0x30
 80860a6:	bd10      	pop	{r4, pc}
 80860a8:	41200000 	.word	0x41200000

080860ac <_ZN3GPS12get_latitudeEv>:
}

double GPS::get_latitude(void){
    return latitude;
}
 80860ac:	f100 0108 	add.w	r1, r0, #8
 80860b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80860b4:	4770      	bx	lr

080860b6 <_ZN3GPS13get_longitudeEv>:

double GPS::get_longitude(void){
    return longitude;
}
 80860b6:	f100 0110 	add.w	r1, r0, #16
 80860ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80860be:	4770      	bx	lr

080860c0 <_ZN3GPS22get_horizontalDilutionEv>:

int GPS::get_satellites(void){
    return satellites_used;
}

int GPS::get_horizontalDilution(void){
 80860c0:	b508      	push	{r3, lr}
    return horizontal_dilution;
 80860c2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80860c4:	f005 fc54 	bl	808b970 <__aeabi_f2iz>
}
 80860c8:	bd08      	pop	{r3, pc}

080860ca <_ZN3GPS17get_latitudeWholeEv>:

int16_t GPS::get_latitudeWhole(void){
    return latWhole;
}
 80860ca:	f9b0 001c 	ldrsh.w	r0, [r0, #28]
 80860ce:	4770      	bx	lr

080860d0 <_ZN3GPS16get_latitudeFracEv>:
int16_t GPS::get_latitudeFrac(void){
    return latFrac;
}
 80860d0:	f9b0 001e 	ldrsh.w	r0, [r0, #30]
 80860d4:	4770      	bx	lr

080860d6 <_ZN3GPS18get_longitudeWholeEv>:
int16_t GPS::get_longitudeWhole(void){
    return longWhole;
}
 80860d6:	f9b0 0020 	ldrsh.w	r0, [r0, #32]
 80860da:	4770      	bx	lr

080860dc <_ZN3GPS17get_longitudeFracEv>:
int16_t GPS::get_longitudeFrac(void){
    return longFrac;
}
 80860dc:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 80860e0:	4770      	bx	lr

080860e2 <_ZN3GPS15get_nsIndicatorEv>:

int8_t GPS::get_nsIndicator(void){
    return ns_indicator;
}
 80860e2:	f990 0024 	ldrsb.w	r0, [r0, #36]	; 0x24
 80860e6:	4770      	bx	lr

080860e8 <_ZN3GPS15get_ewIndicatorEv>:

int8_t GPS::get_ewIndicator(void){
    return ew_indicator;
}
 80860e8:	f990 0025 	ldrsb.w	r0, [r0, #37]	; 0x25
 80860ec:	4770      	bx	lr

080860ee <_GLOBAL__sub_I__ZN3GPS15set_lat_decimalE6Stringc>:
 80860ee:	f001 bf83 	b.w	8087ff8 <HAL_Pin_Map>

080860f2 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80860f2:	6803      	ldr	r3, [r0, #0]
 80860f4:	b2c9      	uxtb	r1, r1
 80860f6:	689b      	ldr	r3, [r3, #8]
 80860f8:	4718      	bx	r3

080860fa <_ZN13Telaire_T6713C1Ev>:
#define ADDR_6713  0x15 // default I2C slave address

Telaire_T6713::Telaire_T6713()
{
  //perform initialization
}
 80860fa:	4770      	bx	lr

080860fc <_ZN13Telaire_T671311resetSensorEv>:
   }

}

void Telaire_T6713::resetSensor()
{
 80860fc:	b508      	push	{r3, lr}
  Wire.beginTransmission(ADDR_6713);
 80860fe:	f004 fad1 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 8086102:	2115      	movs	r1, #21
 8086104:	f004 f98a 	bl	808a41c <_ZN7TwoWire17beginTransmissionEi>

  // Function code = 0x04
  Wire.write(0x05);
 8086108:	f004 facc 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 808610c:	2105      	movs	r1, #5
 808610e:	f7ff fff0 	bl	80860f2 <_ZN7TwoWire5writeEi>
  // Starting address (MSB) = 0x13
  Wire.write(0x03);
 8086112:	f004 fac7 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 8086116:	2103      	movs	r1, #3
 8086118:	f7ff ffeb 	bl	80860f2 <_ZN7TwoWire5writeEi>
  // Starting address (LSB) = 0x8B
  Wire.write(0xE8);
 808611c:	f004 fac2 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 8086120:	21e8      	movs	r1, #232	; 0xe8
 8086122:	f7ff ffe6 	bl	80860f2 <_ZN7TwoWire5writeEi>
  // Input registers to read (MSB) = 0x00
  Wire.write(0xFF);
 8086126:	f004 fabd 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 808612a:	21ff      	movs	r1, #255	; 0xff
 808612c:	f7ff ffe1 	bl	80860f2 <_ZN7TwoWire5writeEi>
  // Input registers to read (LSB) = 0x01
  Wire.write(0x00);
 8086130:	f004 fab8 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 8086134:	2100      	movs	r1, #0
 8086136:	f7ff ffdc 	bl	80860f2 <_ZN7TwoWire5writeEi>

  // end transmission
   Wire.endTransmission();
 808613a:	f004 fab3 	bl	808a6a4 <_Z19__fetch_global_Wirev>
}
 808613e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Wire.write(0xFF);
  // Input registers to read (LSB) = 0x01
  Wire.write(0x00);

  // end transmission
   Wire.endTransmission();
 8086142:	f004 b972 	b.w	808a42a <_ZN7TwoWire15endTransmissionEv>

08086146 <_ZN13Telaire_T671315disableABCLogicEv>:
}

void Telaire_T6713::disableABCLogic()
{
 8086146:	b508      	push	{r3, lr}
    Wire.beginTransmission(ADDR_6713);
 8086148:	f004 faac 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 808614c:	2115      	movs	r1, #21
 808614e:	f004 f965 	bl	808a41c <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 8086152:	f004 faa7 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 8086156:	2105      	movs	r1, #5
 8086158:	f7ff ffcb 	bl	80860f2 <_ZN7TwoWire5writeEi>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 808615c:	f004 faa2 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 8086160:	2103      	movs	r1, #3
 8086162:	f7ff ffc6 	bl	80860f2 <_ZN7TwoWire5writeEi>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEE);
 8086166:	f004 fa9d 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 808616a:	21ee      	movs	r1, #238	; 0xee
 808616c:	f7ff ffc1 	bl	80860f2 <_ZN7TwoWire5writeEi>
    // Input registers to read (MSB) = 0x00
    Wire.write(0x00);
 8086170:	f004 fa98 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 8086174:	2100      	movs	r1, #0
 8086176:	f7ff ffbc 	bl	80860f2 <_ZN7TwoWire5writeEi>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 808617a:	f004 fa93 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 808617e:	2100      	movs	r1, #0
 8086180:	f7ff ffb7 	bl	80860f2 <_ZN7TwoWire5writeEi>

    // end transmission
    Wire.endTransmission();
 8086184:	f004 fa8e 	bl	808a6a4 <_Z19__fetch_global_Wirev>
}
 8086188:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.write(0x00);
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);

    // end transmission
    Wire.endTransmission();
 808618c:	f004 b94d 	b.w	808a42a <_ZN7TwoWire15endTransmissionEv>

08086190 <_ZN13Telaire_T671314enableABCLogicEv>:
}

void Telaire_T6713::enableABCLogic()
{
 8086190:	b508      	push	{r3, lr}
    Wire.beginTransmission(ADDR_6713);
 8086192:	f004 fa87 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 8086196:	2115      	movs	r1, #21
 8086198:	f004 f940 	bl	808a41c <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 808619c:	f004 fa82 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 80861a0:	2105      	movs	r1, #5
 80861a2:	f7ff ffa6 	bl	80860f2 <_ZN7TwoWire5writeEi>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 80861a6:	f004 fa7d 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 80861aa:	2103      	movs	r1, #3
 80861ac:	f7ff ffa1 	bl	80860f2 <_ZN7TwoWire5writeEi>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEE);
 80861b0:	f004 fa78 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 80861b4:	21ee      	movs	r1, #238	; 0xee
 80861b6:	f7ff ff9c 	bl	80860f2 <_ZN7TwoWire5writeEi>
    // Input registers to read (MSB) = 0x00
    Wire.write(0xFF);
 80861ba:	f004 fa73 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 80861be:	21ff      	movs	r1, #255	; 0xff
 80861c0:	f7ff ff97 	bl	80860f2 <_ZN7TwoWire5writeEi>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 80861c4:	f004 fa6e 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 80861c8:	2100      	movs	r1, #0
 80861ca:	f7ff ff92 	bl	80860f2 <_ZN7TwoWire5writeEi>

    // end transmission
    Wire.endTransmission();
 80861ce:	f004 fa69 	bl	808a6a4 <_Z19__fetch_global_Wirev>
}
 80861d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.write(0xFF);
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);

    // end transmission
    Wire.endTransmission();
 80861d6:	f004 b928 	b.w	808a42a <_ZN7TwoWire15endTransmissionEv>
	...

080861dc <_ZN13Telaire_T67139calibrateEi>:
}


//start a 1 point calibration - this lasts 6 minutes so check the status bit
void Telaire_T6713::calibrate(int debugging)
{
 80861dc:	b508      	push	{r3, lr}
    if(debugging){
 80861de:	b121      	cbz	r1, 80861ea <_ZN13Telaire_T67139calibrateEi+0xe>
      Serial.println("Calibrating CO2");
 80861e0:	f003 ff54 	bl	808a08c <_Z16_fetch_usbserialv>
 80861e4:	4913      	ldr	r1, [pc, #76]	; (8086234 <_ZN13Telaire_T67139calibrateEi+0x58>)
 80861e6:	f002 ff1c 	bl	8089022 <_ZN5Print7printlnEPKc>
    }
    //[0x05, 0x03, 0xec, 0xff, 0x00]
    Wire.beginTransmission(ADDR_6713);
 80861ea:	f004 fa5b 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 80861ee:	2115      	movs	r1, #21
 80861f0:	f004 f914 	bl	808a41c <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 80861f4:	f004 fa56 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 80861f8:	2105      	movs	r1, #5
 80861fa:	f7ff ff7a 	bl	80860f2 <_ZN7TwoWire5writeEi>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 80861fe:	f004 fa51 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 8086202:	2103      	movs	r1, #3
 8086204:	f7ff ff75 	bl	80860f2 <_ZN7TwoWire5writeEi>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEC);
 8086208:	f004 fa4c 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 808620c:	21ec      	movs	r1, #236	; 0xec
 808620e:	f7ff ff70 	bl	80860f2 <_ZN7TwoWire5writeEi>
    // Input registers to read (MSB) = 0x00
    Wire.write(0xFF);
 8086212:	f004 fa47 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 8086216:	21ff      	movs	r1, #255	; 0xff
 8086218:	f7ff ff6b 	bl	80860f2 <_ZN7TwoWire5writeEi>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 808621c:	f004 fa42 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 8086220:	2100      	movs	r1, #0
 8086222:	f7ff ff66 	bl	80860f2 <_ZN7TwoWire5writeEi>

    // end transmission
    Wire.endTransmission();
 8086226:	f004 fa3d 	bl	808a6a4 <_Z19__fetch_global_Wirev>
}
 808622a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.write(0xFF);
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);

    // end transmission
    Wire.endTransmission();
 808622e:	f004 b8fc 	b.w	808a42a <_ZN7TwoWire15endTransmissionEv>
 8086232:	bf00      	nop
 8086234:	0809130b 	.word	0x0809130b

08086238 <_GLOBAL__sub_I__ZN13Telaire_T6713C2Ev>:
 8086238:	f001 bede 	b.w	8087ff8 <HAL_Pin_Map>

0808623c <_GLOBAL__sub_I__ZN7istream3getEv>:
 808623c:	f001 bedc 	b.w	8087ff8 <HAL_Pin_Map>

08086240 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
 8086240:	b510      	push	{r4, lr}
 8086242:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync();
 8086244:	3028      	adds	r0, #40	; 0x28
 8086246:	f001 f97f 	bl	8087548 <_ZN8FatCache4syncEv>
 808624a:	b128      	cbz	r0, 8086258 <_ZN9FatVolume9cacheSyncEv+0x18>
 808624c:	f504 700d 	add.w	r0, r4, #564	; 0x234
  }
 8086250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync();
 8086254:	f001 b978 	b.w	8087548 <_ZN8FatCache4syncEv>
  }
 8086258:	bd10      	pop	{r4, pc}

0808625a <_ZN7FatFile11lfnChecksumEPh>:
 * <http://www.gnu.org/licenses/>.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
 808625a:	1e41      	subs	r1, r0, #1
 808625c:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
 8086260:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 8086262:	0843      	lsrs	r3, r0, #1
 8086264:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
 8086268:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 808626c:	4418      	add	r0, r3
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 808626e:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 8086270:	f000 00ff 	and.w	r0, r0, #255	; 0xff
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 8086274:	d1f5      	bne.n	8086262 <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
 8086276:	4770      	bx	lr

08086278 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
 8086278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
 808627c:	7803      	ldrb	r3, [r0, #0]
 808627e:	1c44      	adds	r4, r0, #1
 8086280:	2b20      	cmp	r3, #32
 8086282:	d101      	bne.n	8086288 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x10>
 8086284:	4620      	mov	r0, r4
 8086286:	e7f9      	b.n	808627c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
    path++;
  }
  fname->lfn = path;
 8086288:	4605      	mov	r5, r0
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 808628a:	4f70      	ldr	r7, [pc, #448]	; (808644c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
 808628c:	6088      	str	r0, [r1, #8]
 808628e:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
 8086290:	462e      	mov	r6, r5
 8086292:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
 8086296:	b30b      	cbz	r3, 80862dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x64>
 8086298:	2b2f      	cmp	r3, #47	; 0x2f
 808629a:	d101      	bne.n	80862a0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x28>
 808629c:	1903      	adds	r3, r0, r4
 808629e:	e017      	b.n	80862d0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x58>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 80862a0:	2b5c      	cmp	r3, #92	; 0x5c
 80862a2:	d102      	bne.n	80862aa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x32>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
 80862a4:	2000      	movs	r0, #0
 80862a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 80862aa:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
 80862ae:	b2e4      	uxtb	r4, r4
 80862b0:	2c1d      	cmp	r4, #29
 80862b2:	d803      	bhi.n	80862bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x44>
 80862b4:	fa27 f404 	lsr.w	r4, r7, r4
 80862b8:	07e4      	lsls	r4, r4, #31
 80862ba:	d4f3      	bmi.n	80862a4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
 80862bc:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
 80862c0:	2c3c      	cmp	r4, #60	; 0x3c
 80862c2:	d0ef      	beq.n	80862a4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
 80862c4:	3b20      	subs	r3, #32
 80862c6:	2b5e      	cmp	r3, #94	; 0x5e
 80862c8:	d9e1      	bls.n	808628e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x16>
 80862ca:	e7eb      	b.n	80862a4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
 80862cc:	2d2f      	cmp	r5, #47	; 0x2f
 80862ce:	d105      	bne.n	80862dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x64>
 80862d0:	461e      	mov	r6, r3
 80862d2:	f813 5b01 	ldrb.w	r5, [r3], #1
 80862d6:	2d20      	cmp	r5, #32
 80862d8:	d1f8      	bne.n	80862cc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x54>
 80862da:	e7f9      	b.n	80862d0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x58>
  *ptr = &path[end];
 80862dc:	6016      	str	r6, [r2, #0]
 80862de:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
 80862e0:	4298      	cmp	r0, r3
 80862e2:	ebc0 0803 	rsb	r8, r0, r3
 80862e6:	d009      	beq.n	80862fc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x84>
    c = path[len - 1];
 80862e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
 80862ec:	2a2e      	cmp	r2, #46	; 0x2e
 80862ee:	d0f7      	beq.n	80862e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x68>
 80862f0:	2a20      	cmp	r2, #32
 80862f2:	d0f5      	beq.n	80862e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x68>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
 80862f4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80862f8:	dcd4      	bgt.n	80862a4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
 80862fa:	e001      	b.n	8086300 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
 80862fc:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
 8086300:	f8c1 8004 	str.w	r8, [r1, #4]
 8086304:	f101 030c 	add.w	r3, r1, #12
 8086308:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
 808630c:	2420      	movs	r4, #32
 808630e:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
 8086312:	4293      	cmp	r3, r2
 8086314:	d1fb      	bne.n	808630e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x96>
 8086316:	4603      	mov	r3, r0
 8086318:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 808631a:	f813 4b01 	ldrb.w	r4, [r3], #1
 808631e:	2c2e      	cmp	r4, #46	; 0x2e
 8086320:	d0fa      	beq.n	8086318 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa0>
 8086322:	2c20      	cmp	r4, #32
 8086324:	d0f8      	beq.n	8086318 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa0>
  // Not 8.3 if leading dot or space.
  is83 = !si;
 8086326:	fab2 f482 	clz	r4, r2

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 808632a:	f108 36ff 	add.w	r6, r8, #4294967295
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
  // Not 8.3 if leading dot or space.
  is83 = !si;
 808632e:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 8086330:	1c73      	adds	r3, r6, #1
 8086332:	d107      	bne.n	8086344 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xcc>
 8086334:	2700      	movs	r7, #0
 8086336:	f04f 0e07 	mov.w	lr, #7
 808633a:	463d      	mov	r5, r7
 808633c:	46ba      	mov	sl, r7
 808633e:	f04f 0908 	mov.w	r9, #8
 8086342:	e009      	b.n	8086358 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
 8086344:	5d83      	ldrb	r3, [r0, r6]
 8086346:	2b2e      	cmp	r3, #46	; 0x2e
 8086348:	d0f4      	beq.n	8086334 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbc>
 808634a:	3e01      	subs	r6, #1
 808634c:	e7f0      	b.n	8086330 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xb8>
  for (; si < len; si++) {
    c = path[si];
 808634e:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
 8086350:	2b20      	cmp	r3, #32
 8086352:	d104      	bne.n	808635e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe6>
      is83 = false;
 8086354:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
 8086356:	3201      	adds	r2, #1
 8086358:	4542      	cmp	r2, r8
 808635a:	dbf8      	blt.n	808634e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
 808635c:	e04b      	b.n	80863f6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
 808635e:	2b2e      	cmp	r3, #46	; 0x2e
 8086360:	d102      	bne.n	8086368 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
 8086362:	42b2      	cmp	r2, r6
 8086364:	d1f6      	bne.n	8086354 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xdc>
 8086366:	e003      	b.n	8086370 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
 8086368:	2b22      	cmp	r3, #34	; 0x22
 808636a:	d017      	beq.n	808639c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
 808636c:	2b7c      	cmp	r3, #124	; 0x7c
 808636e:	d015      	beq.n	808639c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
 8086370:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
 8086374:	f1bc 0f05 	cmp.w	ip, #5
 8086378:	d801      	bhi.n	808637e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x106>
 808637a:	2b2d      	cmp	r3, #45	; 0x2d
 808637c:	d10e      	bne.n	808639c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
 808637e:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
 8086382:	f1bc 0f05 	cmp.w	ip, #5
 8086386:	d909      	bls.n	808639c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
 8086388:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
 808638c:	f1bc 0f02 	cmp.w	ip, #2
 8086390:	d904      	bls.n	808639c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
 8086392:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
 8086396:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
 808639a:	d902      	bls.n	80863a2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12a>
 808639c:	42b2      	cmp	r2, r6
 808639e:	d10e      	bne.n	80863be <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x146>
 80863a0:	e049      	b.n	8086436 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1be>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
 80863a2:	42b2      	cmp	r2, r6
 80863a4:	d047      	beq.n	8086436 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1be>
 80863a6:	4575      	cmp	r5, lr
 80863a8:	d821      	bhi.n	80863ee <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x176>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
 80863aa:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 80863ae:	f1bc 0f19 	cmp.w	ip, #25
 80863b2:	d808      	bhi.n	80863c6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14e>
        c += 'A' - 'a';
 80863b4:	3b20      	subs	r3, #32
 80863b6:	b2db      	uxtb	r3, r3
        lc |= bit;
 80863b8:	ea49 0707 	orr.w	r7, r9, r7
 80863bc:	e00a      	b.n	80863d4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15c>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
 80863be:	4575      	cmp	r5, lr
 80863c0:	d815      	bhi.n	80863ee <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x176>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
 80863c2:	2400      	movs	r4, #0
      c = '_';
 80863c4:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
 80863c6:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 80863ca:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
 80863ce:	bf98      	it	ls
 80863d0:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
 80863d4:	f105 0c01 	add.w	ip, r5, #1
 80863d8:	fa5f fc8c 	uxtb.w	ip, ip
 80863dc:	440d      	add	r5, r1
      if (i < 7) {
 80863de:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
 80863e2:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
 80863e4:	d801      	bhi.n	80863ea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x172>
        fname->seqPos = i;
 80863e6:	f881 c00c 	strb.w	ip, [r1, #12]
 80863ea:	4665      	mov	r5, ip
 80863ec:	e7b3      	b.n	8086356 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
 80863ee:	f1be 0f0a 	cmp.w	lr, #10
 80863f2:	d117      	bne.n	8086424 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
 80863f4:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
 80863f6:	7b4b      	ldrb	r3, [r1, #13]
 80863f8:	2b20      	cmp	r3, #32
 80863fa:	f43f af53 	beq.w	80862a4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
    return false;
  }

  if (is83) {
 80863fe:	b13c      	cbz	r4, 8086410 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x198>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
 8086400:	ea1a 0f07 	tst.w	sl, r7
 8086404:	bf18      	it	ne
 8086406:	2702      	movne	r7, #2
 8086408:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
 808640a:	2001      	movs	r0, #1
 808640c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
 8086410:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
 8086412:	2001      	movs	r0, #1
 8086414:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
 8086416:	4419      	add	r1, r3
 8086418:	237e      	movs	r3, #126	; 0x7e
 808641a:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
 808641c:	2331      	movs	r3, #49	; 0x31
 808641e:	738b      	strb	r3, [r1, #14]
 8086420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
 8086424:	42b2      	cmp	r2, r6
 8086426:	dce5      	bgt.n	80863f4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17c>
 8086428:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
 808642a:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
 808642e:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 8086430:	f04f 0910 	mov.w	r9, #16
 8086434:	e78e      	b.n	8086354 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xdc>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
 8086436:	f1be 0f0a 	cmp.w	lr, #10
 808643a:	d0db      	beq.n	80863f4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17c>
 808643c:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
 808643e:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
 8086442:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 8086444:	f04f 0910 	mov.w	r9, #16
 8086448:	e785      	b.n	8086356 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
 808644a:	bf00      	nop
 808644c:	31000101 	.word	0x31000101

08086450 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
 8086450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8086454:	4606      	mov	r6, r0
 8086456:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
 8086458:	f891 900c 	ldrb.w	r9, [r1, #12]
 808645c:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 808645e:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 8086460:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
 8086464:	6869      	ldr	r1, [r5, #4]
 8086466:	68aa      	ldr	r2, [r5, #8]
 8086468:	1863      	adds	r3, r4, r1
 808646a:	b29b      	uxth	r3, r3
 808646c:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
 808646e:	4291      	cmp	r1, r2
 8086470:	d006      	beq.n	8086480 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
 8086472:	f812 0b01 	ldrb.w	r0, [r2], #1
 8086476:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 808647a:	4043      	eors	r3, r0
 808647c:	b29b      	uxth	r3, r3
 808647e:	e7f6      	b.n	808646e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
 8086480:	f1b9 0f03 	cmp.w	r9, #3
 8086484:	bf28      	it	cs
 8086486:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 808648a:	f109 0204 	add.w	r2, r9, #4
 808648e:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
 8086490:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8086494:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8086496:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8086498:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 808649a:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 808649c:	bf94      	ite	ls
 808649e:	3130      	addls	r1, #48	; 0x30
 80864a0:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80864a2:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 80864a4:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
 80864a6:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80864aa:	d3f1      	bcc.n	8086490 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 80864ac:	eb05 0309 	add.w	r3, r5, r9
 80864b0:	735f      	strb	r7, [r3, #13]
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
 80864b2:	2100      	movs	r1, #0
 80864b4:	4630      	mov	r0, r6
 80864b6:	f000 fe38 	bl	808712a <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
 80864ba:	2101      	movs	r1, #1
 80864bc:	4630      	mov	r0, r6
 80864be:	f000 fe17 	bl	80870f0 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
 80864c2:	4601      	mov	r1, r0
 80864c4:	b928      	cbnz	r0, 80864d2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
 80864c6:	7870      	ldrb	r0, [r6, #1]
 80864c8:	fab0 f080 	clz	r0, r0
 80864cc:	0940      	lsrs	r0, r0, #5
 80864ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
 80864d2:	7803      	ldrb	r3, [r0, #0]
 80864d4:	b14b      	cbz	r3, 80864ea <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 80864d6:	7ac3      	ldrb	r3, [r0, #11]
 80864d8:	071b      	lsls	r3, r3, #28
 80864da:	d4ee      	bmi.n	80864ba <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 80864dc:	220b      	movs	r2, #11
 80864de:	4640      	mov	r0, r8
 80864e0:	f005 fdd2 	bl	808c088 <memcmp>
 80864e4:	2800      	cmp	r0, #0
 80864e6:	d1e8      	bne.n	80864ba <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 80864e8:	e002      	b.n	80864f0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
 80864ea:	2001      	movs	r0, #1
 80864ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80864f0:	3401      	adds	r4, #1
 80864f2:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
 80864f4:	2c64      	cmp	r4, #100	; 0x64
 80864f6:	d1b5      	bne.n	8086464 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
 80864f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080864fc <_ZN7FatFile4openEPS_P7fname_th>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 80864fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8086500:	b089      	sub	sp, #36	; 0x24
 8086502:	9303      	str	r3, [sp, #12]
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8086504:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 8086506:	9005      	str	r0, [sp, #20]
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8086508:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 808650c:	460e      	mov	r6, r1
 808650e:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8086510:	d101      	bne.n	8086516 <_ZN7FatFile4openEPS_P7fname_th+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
 8086512:	2000      	movs	r0, #0
 8086514:	e199      	b.n	808684a <_ZN7FatFile4openEPS_P7fname_th+0x34e>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8086516:	9b05      	ldr	r3, [sp, #20]
 8086518:	781b      	ldrb	r3, [r3, #0]
 808651a:	2b00      	cmp	r3, #0
 808651c:	d1f9      	bne.n	8086512 <_ZN7FatFile4openEPS_P7fname_th+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 808651e:	7813      	ldrb	r3, [r2, #0]
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
 8086520:	f8d2 b004 	ldr.w	fp, [r2, #4]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 8086524:	079b      	lsls	r3, r3, #30
 8086526:	f000 8186 	beq.w	8086836 <_ZN7FatFile4openEPS_P7fname_th+0x33a>
 808652a:	f10b 030c 	add.w	r3, fp, #12
 808652e:	270d      	movs	r7, #13
 8086530:	fbb3 f7f7 	udiv	r7, r3, r7
 8086534:	3701      	adds	r7, #1
 8086536:	b2ff      	uxtb	r7, r7
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
 8086538:	f04f 0800 	mov.w	r8, #0
 808653c:	2100      	movs	r1, #0
 808653e:	4630      	mov	r0, r6
 8086540:	f000 fdf3 	bl	808712a <_ZN7FatFile7seekSetEm>
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
 8086544:	4645      	mov	r5, r8
  uint8_t ord = 0;
 8086546:	4643      	mov	r3, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
 8086548:	4644      	mov	r4, r8
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 808654a:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
 808654e:	f8cd 8008 	str.w	r8, [sp, #8]
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
  bool fnameFound = false;
 8086552:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8086556:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 8086558:	6972      	ldr	r2, [r6, #20]
    dir = dirFile->readDirCache(true);
 808655a:	2101      	movs	r1, #1
 808655c:	4630      	mov	r0, r6
 808655e:	9307      	str	r3, [sp, #28]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 8086560:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
 8086564:	f000 fdc4 	bl	80870f0 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 8086568:	9b07      	ldr	r3, [sp, #28]
 808656a:	b920      	cbnz	r0, 8086576 <_ZN7FatFile4openEPS_P7fname_th+0x7a>
      if (dirFile->getError()) {
 808656c:	7873      	ldrb	r3, [r6, #1]
 808656e:	2b00      	cmp	r3, #0
 8086570:	f000 808e 	beq.w	8086690 <_ZN7FatFile4openEPS_P7fname_th+0x194>
 8086574:	e7cd      	b.n	8086512 <_ZN7FatFile4openEPS_P7fname_th+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
 8086576:	7802      	ldrb	r2, [r0, #0]
 8086578:	2ae5      	cmp	r2, #229	; 0xe5
 808657a:	d000      	beq.n	808657e <_ZN7FatFile4openEPS_P7fname_th+0x82>
 808657c:	b942      	cbnz	r2, 8086590 <_ZN7FatFile4openEPS_P7fname_th+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 808657e:	2d00      	cmp	r5, #0
 8086580:	bf08      	it	eq
 8086582:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
 8086584:	42bd      	cmp	r5, r7
        freeFound++;
 8086586:	bf3c      	itt	cc
 8086588:	3501      	addcc	r5, #1
 808658a:	b2ed      	uxtbcc	r5, r5
      }
      if (dir->name[0] == DIR_NAME_FREE) {
 808658c:	b922      	cbnz	r2, 8086598 <_ZN7FatFile4openEPS_P7fname_th+0x9c>
 808658e:	e07f      	b.n	8086690 <_ZN7FatFile4openEPS_P7fname_th+0x194>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
 8086590:	42bd      	cmp	r5, r7
 8086592:	bf38      	it	cc
 8086594:	2500      	movcc	r5, #0
 8086596:	e003      	b.n	80865a0 <_ZN7FatFile4openEPS_P7fname_th+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 8086598:	2ae5      	cmp	r2, #229	; 0xe5
 808659a:	d101      	bne.n	80865a0 <_ZN7FatFile4openEPS_P7fname_th+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
 808659c:	2400      	movs	r4, #0
 808659e:	e7db      	b.n	8086558 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 80865a0:	2a2e      	cmp	r2, #46	; 0x2e
 80865a2:	d0fb      	beq.n	808659c <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 80865a4:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
 80865a6:	290f      	cmp	r1, #15
 80865a8:	d150      	bne.n	808664c <_ZN7FatFile4openEPS_P7fname_th+0x150>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
 80865aa:	b93c      	cbnz	r4, 80865bc <_ZN7FatFile4openEPS_P7fname_th+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
 80865ac:	0651      	lsls	r1, r2, #25
 80865ae:	d5d3      	bpl.n	8086558 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
 80865b0:	7b43      	ldrb	r3, [r0, #13]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
 80865b2:	f002 041f 	and.w	r4, r2, #31
        chksum = ldir->chksum;
 80865b6:	9302      	str	r3, [sp, #8]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
 80865b8:	4623      	mov	r3, r4
 80865ba:	e007      	b.n	80865cc <_ZN7FatFile4openEPS_P7fname_th+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
 80865bc:	3b01      	subs	r3, #1
 80865be:	b2db      	uxtb	r3, r3
 80865c0:	429a      	cmp	r2, r3
 80865c2:	d1eb      	bne.n	808659c <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 80865c4:	7b42      	ldrb	r2, [r0, #13]
 80865c6:	9902      	ldr	r1, [sp, #8]
 80865c8:	4291      	cmp	r1, r2
 80865ca:	d1e7      	bne.n	808659c <_ZN7FatFile4openEPS_P7fname_th+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
 80865cc:	1e5a      	subs	r2, r3, #1
 80865ce:	f04f 0c0d 	mov.w	ip, #13
 80865d2:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
 80865d6:	45e3      	cmp	fp, ip
 80865d8:	d9e0      	bls.n	808659c <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 80865da:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
 80865de:	f1be 0f04 	cmp.w	lr, #4
 80865e2:	fa5f f28e 	uxtb.w	r2, lr
 80865e6:	d804      	bhi.n	80865f2 <_ZN7FatFile4openEPS_P7fname_th+0xf6>
    return ldir->name1[i];
 80865e8:	eb00 024e 	add.w	r2, r0, lr, lsl #1
 80865ec:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 80865f0:	e00c      	b.n	808660c <_ZN7FatFile4openEPS_P7fname_th+0x110>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 80865f2:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
 80865f4:	bf95      	itete	ls
 80865f6:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 80865fa:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 80865fe:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8086602:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 8086606:	bf94      	ite	ls
 8086608:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 808660a:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
 808660c:	45e3      	cmp	fp, ip
 808660e:	d103      	bne.n	8086618 <_ZN7FatFile4openEPS_P7fname_th+0x11c>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
 8086610:	2a00      	cmp	r2, #0
 8086612:	bf18      	it	ne
 8086614:	2400      	movne	r4, #0
 8086616:	e79f      	b.n	8086558 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8086618:	2aff      	cmp	r2, #255	; 0xff
 808661a:	d8bf      	bhi.n	808659c <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 808661c:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 808661e:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 8086622:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8086624:	f8d9 1008 	ldr.w	r1, [r9, #8]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8086628:	bf98      	it	ls
 808662a:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 808662c:	f811 100c 	ldrb.w	r1, [r1, ip]
 8086630:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8086634:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
 8086638:	bf98      	it	ls
 808663a:	b2d2      	uxtbls	r2, r2
 808663c:	f1bc 0f19 	cmp.w	ip, #25
 8086640:	bf9c      	itt	ls
 8086642:	3120      	addls	r1, #32
 8086644:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8086646:	4291      	cmp	r1, r2
 8086648:	d1a8      	bne.n	808659c <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 808664a:	e0f6      	b.n	808683a <_ZN7FatFile4openEPS_P7fname_th+0x33e>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
 808664c:	070a      	lsls	r2, r1, #28
 808664e:	d4a5      	bmi.n	808659c <_ZN7FatFile4openEPS_P7fname_th+0xa0>
      if (lfnOrd) {
 8086650:	b14c      	cbz	r4, 8086666 <_ZN7FatFile4openEPS_P7fname_th+0x16a>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
 8086652:	2b01      	cmp	r3, #1
 8086654:	f47f af5d 	bne.w	8086512 <_ZN7FatFile4openEPS_P7fname_th+0x16>
 8086658:	f7ff fdff 	bl	808625a <_ZN7FatFile11lfnChecksumEPh>
 808665c:	9b02      	ldr	r3, [sp, #8]
 808665e:	4283      	cmp	r3, r0
 8086660:	f47f af57 	bne.w	8086512 <_ZN7FatFile4openEPS_P7fname_th+0x16>
 8086664:	e00f      	b.n	8086686 <_ZN7FatFile4openEPS_P7fname_th+0x18a>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8086666:	220b      	movs	r2, #11
 8086668:	9906      	ldr	r1, [sp, #24]
 808666a:	9307      	str	r3, [sp, #28]
 808666c:	f005 fd0c 	bl	808c088 <memcmp>
 8086670:	9b07      	ldr	r3, [sp, #28]
 8086672:	2800      	cmp	r0, #0
 8086674:	f47f af70 	bne.w	8086558 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
 8086678:	f899 2000 	ldrb.w	r2, [r9]
 808667c:	07d1      	lsls	r1, r2, #31
 808667e:	d502      	bpl.n	8086686 <_ZN7FatFile4openEPS_P7fname_th+0x18a>
          goto found;
        }
        fnameFound = true;
 8086680:	2201      	movs	r2, #1
 8086682:	9204      	str	r2, [sp, #16]
 8086684:	e768      	b.n	8086558 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
 8086686:	9b03      	ldr	r3, [sp, #12]
 8086688:	061a      	lsls	r2, r3, #24
 808668a:	f140 80cc 	bpl.w	8086826 <_ZN7FatFile4openEPS_P7fname_th+0x32a>
 808668e:	e740      	b.n	8086512 <_ZN7FatFile4openEPS_P7fname_th+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and O_WRITE
  if (!(oflag & O_CREAT) || !(oflag & O_WRITE)) {
 8086690:	9b03      	ldr	r3, [sp, #12]
 8086692:	f003 0342 	and.w	r3, r3, #66	; 0x42
 8086696:	2b42      	cmp	r3, #66	; 0x42
 8086698:	f47f af3b 	bne.w	8086512 <_ZN7FatFile4openEPS_P7fname_th+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
 808669c:	2d00      	cmp	r5, #0
 808669e:	bf08      	it	eq
 80866a0:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
 80866a2:	42bd      	cmp	r5, r7
 80866a4:	d302      	bcc.n	80866ac <_ZN7FatFile4openEPS_P7fname_th+0x1b0>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
 80866a6:	9b04      	ldr	r3, [sp, #16]
 80866a8:	b9cb      	cbnz	r3, 80866de <_ZN7FatFile4openEPS_P7fname_th+0x1e2>
 80866aa:	e01f      	b.n	80866ec <_ZN7FatFile4openEPS_P7fname_th+0x1f0>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
 80866ac:	2100      	movs	r1, #0
 80866ae:	4630      	mov	r0, r6
 80866b0:	f000 fd1e 	bl	80870f0 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 80866b4:	b910      	cbnz	r0, 80866bc <_ZN7FatFile4openEPS_P7fname_th+0x1c0>
      if (dirFile->getError()) {
 80866b6:	7873      	ldrb	r3, [r6, #1]
 80866b8:	b15b      	cbz	r3, 80866d2 <_ZN7FatFile4openEPS_P7fname_th+0x1d6>
 80866ba:	e72a      	b.n	8086512 <_ZN7FatFile4openEPS_P7fname_th+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
 80866bc:	3501      	adds	r5, #1
 80866be:	b2ed      	uxtb	r5, r5
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
 80866c0:	e7ef      	b.n	80866a2 <_ZN7FatFile4openEPS_P7fname_th+0x1a6>
 80866c2:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
 80866c4:	791b      	ldrb	r3, [r3, #4]
 80866c6:	2b01      	cmp	r3, #1
 80866c8:	d8ed      	bhi.n	80866a6 <_ZN7FatFile4openEPS_P7fname_th+0x1aa>
      break;
    }
    freeFound += 16;
 80866ca:	3510      	adds	r5, #16
 80866cc:	b2ed      	uxtb	r5, r5
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
 80866ce:	42af      	cmp	r7, r5
 80866d0:	d9e9      	bls.n	80866a6 <_ZN7FatFile4openEPS_P7fname_th+0x1aa>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
 80866d2:	4630      	mov	r0, r6
 80866d4:	f000 fbde 	bl	8086e94 <_ZN7FatFile13addDirClusterEv>
 80866d8:	2800      	cmp	r0, #0
 80866da:	d1f2      	bne.n	80866c2 <_ZN7FatFile4openEPS_P7fname_th+0x1c6>
 80866dc:	e719      	b.n	8086512 <_ZN7FatFile4openEPS_P7fname_th+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
 80866de:	4649      	mov	r1, r9
 80866e0:	4630      	mov	r0, r6
 80866e2:	f7ff feb5 	bl	8086450 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
 80866e6:	2800      	cmp	r0, #0
 80866e8:	f43f af13 	beq.w	8086512 <_ZN7FatFile4openEPS_P7fname_th+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
 80866ec:	ea4f 1148 	mov.w	r1, r8, lsl #5
 80866f0:	4630      	mov	r0, r6
 80866f2:	f000 fd1a 	bl	808712a <_ZN7FatFile7seekSetEm>
 80866f6:	2800      	cmp	r0, #0
 80866f8:	f43f af0b 	beq.w	8086512 <_ZN7FatFile4openEPS_P7fname_th+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
 80866fc:	1e7c      	subs	r4, r7, #1
 80866fe:	b2e4      	uxtb	r4, r4
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 8086700:	4625      	mov	r5, r4
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 8086702:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
 8086706:	f04f 080f 	mov.w	r8, #15
 808670a:	e040      	b.n	808678e <_ZN7FatFile4openEPS_P7fname_th+0x292>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 808670c:	2100      	movs	r1, #0
 808670e:	4630      	mov	r0, r6
 8086710:	f000 fcee 	bl	80870f0 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
 8086714:	4607      	mov	r7, r0
 8086716:	2800      	cmp	r0, #0
 8086718:	f43f aefb 	beq.w	8086512 <_ZN7FatFile4openEPS_P7fname_th+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
 808671c:	68b2      	ldr	r2, [r6, #8]
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 808671e:	42a5      	cmp	r5, r4
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
 8086720:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8086724:	f043 0301 	orr.w	r3, r3, #1
 8086728:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 808672c:	bf14      	ite	ne
 808672e:	462a      	movne	r2, r5
 8086730:	f045 0240 	orreq.w	r2, r5, #64	; 0x40
 8086734:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
 8086736:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
 808673a:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
 808673e:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 8086742:	9202      	str	r2, [sp, #8]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
 8086744:	f7ff fd89 	bl	808625a <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8086748:	9a02      	ldr	r2, [sp, #8]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
 808674a:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
 808674c:	f887 a01a 	strb.w	sl, [r7, #26]
 8086750:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8086754:	f002 021f 	and.w	r2, r2, #31
 8086758:	230d      	movs	r3, #13
 808675a:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
 808675c:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8086760:	435a      	muls	r2, r3
 8086762:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 8086764:	4593      	cmp	fp, r2
 8086766:	d915      	bls.n	8086794 <_ZN7FatFile4openEPS_P7fname_th+0x298>
 8086768:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
 808676c:	2b04      	cmp	r3, #4
 808676e:	fa5f fc83 	uxtb.w	ip, r3
 8086772:	f103 0001 	add.w	r0, r3, #1
 8086776:	d813      	bhi.n	80867a0 <_ZN7FatFile4openEPS_P7fname_th+0x2a4>
    ldir->name1[i] = c;
 8086778:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 808677c:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
 8086780:	280d      	cmp	r0, #13
 8086782:	f102 0201 	add.w	r2, r2, #1
 8086786:	4603      	mov	r3, r0
 8086788:	d1ec      	bne.n	8086764 <_ZN7FatFile4openEPS_P7fname_th+0x268>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 808678a:	3d01      	subs	r5, #1
 808678c:	b2ed      	uxtb	r5, r5
 808678e:	2d00      	cmp	r5, #0
 8086790:	d1bc      	bne.n	808670c <_ZN7FatFile4openEPS_P7fname_th+0x210>
 8086792:	e00e      	b.n	80867b2 <_ZN7FatFile4openEPS_P7fname_th+0x2b6>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 8086794:	bf14      	ite	ne
 8086796:	f04f 31ff 	movne.w	r1, #4294967295
 808679a:	2100      	moveq	r1, #0
 808679c:	b289      	uxth	r1, r1
 808679e:	e7e5      	b.n	808676c <_ZN7FatFile4openEPS_P7fname_th+0x270>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 80867a0:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
 80867a4:	bf94      	ite	ls
 80867a6:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
 80867aa:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
 80867ae:	8099      	strh	r1, [r3, #4]
 80867b0:	e7e6      	b.n	8086780 <_ZN7FatFile4openEPS_P7fname_th+0x284>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
 80867b2:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
 80867b4:	4629      	mov	r1, r5
 80867b6:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
 80867b8:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
 80867bc:	f000 fc98 	bl	80870f0 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
 80867c0:	4607      	mov	r7, r0
 80867c2:	2800      	cmp	r0, #0
 80867c4:	f43f aea5 	beq.w	8086512 <_ZN7FatFile4openEPS_P7fname_th+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
 80867c8:	2220      	movs	r2, #32
 80867ca:	4629      	mov	r1, r5
 80867cc:	f005 fc76 	bl	808c0bc <memset>
  memcpy(dir->name, fname->sfn, 11);
 80867d0:	464b      	mov	r3, r9
 80867d2:	f853 2f0d 	ldr.w	r2, [r3, #13]!
 80867d6:	603a      	str	r2, [r7, #0]
 80867d8:	685a      	ldr	r2, [r3, #4]
 80867da:	607a      	str	r2, [r7, #4]
 80867dc:	891a      	ldrh	r2, [r3, #8]
 80867de:	813a      	strh	r2, [r7, #8]
 80867e0:	7a9b      	ldrb	r3, [r3, #10]
 80867e2:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
 80867e4:	f899 3000 	ldrb.w	r3, [r9]
 80867e8:	f003 0318 	and.w	r3, r3, #24
 80867ec:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
 80867ee:	4b18      	ldr	r3, [pc, #96]	; (8086850 <_ZN7FatFile4openEPS_P7fname_th+0x354>)
 80867f0:	681b      	ldr	r3, [r3, #0]
 80867f2:	b12b      	cbz	r3, 8086800 <_ZN7FatFile4openEPS_P7fname_th+0x304>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
 80867f4:	f107 010e 	add.w	r1, r7, #14
 80867f8:	f107 0010 	add.w	r0, r7, #16
 80867fc:	4798      	blx	r3
 80867fe:	e006      	b.n	808680e <_ZN7FatFile4openEPS_P7fname_th+0x312>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
 8086800:	2321      	movs	r3, #33	; 0x21
 8086802:	743b      	strb	r3, [r7, #16]
 8086804:	2328      	movs	r3, #40	; 0x28
 8086806:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
 8086808:	2308      	movs	r3, #8
 808680a:	73bd      	strb	r5, [r7, #14]
 808680c:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
 808680e:	8a3b      	ldrh	r3, [r7, #16]
 8086810:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
 8086812:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
 8086814:	89fb      	ldrh	r3, [r7, #14]
 8086816:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
 8086818:	68b2      	ldr	r2, [r6, #8]
 808681a:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 808681e:	f043 0301 	orr.w	r3, r3, #1
 8086822:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
 8086826:	9400      	str	r4, [sp, #0]
 8086828:	9b03      	ldr	r3, [sp, #12]
 808682a:	4652      	mov	r2, sl
 808682c:	4631      	mov	r1, r6
 808682e:	9805      	ldr	r0, [sp, #20]
 8086830:	f000 fcc4 	bl	80871bc <_ZN7FatFile15openCachedEntryEPS_thh>
 8086834:	e009      	b.n	808684a <_ZN7FatFile4openEPS_P7fname_th+0x34e>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 8086836:	2701      	movs	r7, #1
 8086838:	e67e      	b.n	8086538 <_ZN7FatFile4openEPS_P7fname_th+0x3c>
 808683a:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
 808683e:	f1be 0f0d 	cmp.w	lr, #13
 8086842:	f43f ae89 	beq.w	8086558 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8086846:	46d4      	mov	ip, sl
 8086848:	e6c9      	b.n	80865de <_ZN7FatFile4openEPS_P7fname_th+0xe2>
  }
  return true;

fail:
  return false;
}
 808684a:	b009      	add	sp, #36	; 0x24
 808684c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8086850:	20000b90 	.word	0x20000b90

08086854 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
 8086854:	f001 bbd0 	b.w	8087ff8 <HAL_Pin_Map>

08086858 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
 8086858:	f001 bbce 	b.w	8087ff8 <HAL_Pin_Map>

0808685c <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
 808685c:	f001 bbcc 	b.w	8087ff8 <HAL_Pin_Map>

08086860 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
 8086860:	f001 bbca 	b.w	8087ff8 <HAL_Pin_Map>

08086864 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spi->receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spi->send(data);
 8086864:	6803      	ldr	r3, [r0, #0]
 8086866:	695b      	ldr	r3, [r3, #20]
 8086868:	4718      	bx	r3

0808686a <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>:
  }
  void spiEndTransaction() {
    m_spi->endTransaction();
  }
  uint8_t spiReceive() {
    return m_spi->receive();
 808686a:	6803      	ldr	r3, [r0, #0]
 808686c:	68db      	ldr	r3, [r3, #12]
 808686e:	4718      	bx	r3

08086870 <_ZN9SdSpiCard14chipSelectHighEv>:
    error(SD_CARD_ERROR_BAD_CSD);
    return 0;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectHigh() {
 8086870:	b510      	push	{r4, lr}
  if (!m_selected) {
 8086872:	7903      	ldrb	r3, [r0, #4]
    error(SD_CARD_ERROR_BAD_CSD);
    return 0;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectHigh() {
 8086874:	4604      	mov	r4, r0
  if (!m_selected) {
 8086876:	b16b      	cbz	r3, 8086894 <_ZN9SdSpiCard14chipSelectHighEv+0x24>
    SD_CS_DBG("chipSelectHigh error");
    return;
  }
  digitalWrite(m_chipSelectPin, HIGH);
 8086878:	2101      	movs	r1, #1
 808687a:	7940      	ldrb	r0, [r0, #5]
 808687c:	f003 fe87 	bl	808a58e <digitalWrite>
  // insure MISO goes high impedance
  spiSend(0XFF);
 8086880:	21ff      	movs	r1, #255	; 0xff
 8086882:	6820      	ldr	r0, [r4, #0]
 8086884:	f7ff ffee 	bl	8086864 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
 8086888:	6820      	ldr	r0, [r4, #0]
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
  }
  void spiEndTransaction() {
    m_spi->endTransaction();
 808688a:	6803      	ldr	r3, [r0, #0]
 808688c:	689b      	ldr	r3, [r3, #8]
 808688e:	4798      	blx	r3
  spiEndTransaction();
  m_selected = false;
 8086890:	2300      	movs	r3, #0
 8086892:	7123      	strb	r3, [r4, #4]
 8086894:	bd10      	pop	{r4, pc}

08086896 <_ZN9SdSpiCard13chipSelectLowEv>:
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectLow() {
 8086896:	b538      	push	{r3, r4, r5, lr}
  if (m_selected) {
 8086898:	7905      	ldrb	r5, [r0, #4]
  spiSend(0XFF);
  spiEndTransaction();
  m_selected = false;
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectLow() {
 808689a:	4604      	mov	r4, r0
  if (m_selected) {
 808689c:	b955      	cbnz	r5, 80868b4 <_ZN9SdSpiCard13chipSelectLowEv+0x1e>
 808689e:	6800      	ldr	r0, [r0, #0]
  bool writeData(uint8_t token, const uint8_t* src);
  void spiBegin(uint8_t chipSelectPin) {
    m_spi->begin(chipSelectPin);
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
 80868a0:	79e1      	ldrb	r1, [r4, #7]
 80868a2:	6803      	ldr	r3, [r0, #0]
 80868a4:	685b      	ldr	r3, [r3, #4]
 80868a6:	4798      	blx	r3
    SD_CS_DBG("chipSelectLow error");
    return;
  }
  spiBeginTransaction(m_sckDivisor);
  digitalWrite(m_chipSelectPin, LOW);
 80868a8:	4629      	mov	r1, r5
 80868aa:	7960      	ldrb	r0, [r4, #5]
 80868ac:	f003 fe6f 	bl	808a58e <digitalWrite>
  m_selected = true;
 80868b0:	2301      	movs	r3, #1
 80868b2:	7123      	strb	r3, [r4, #4]
 80868b4:	bd38      	pop	{r3, r4, r5, pc}

080868b6 <_ZN9SdSpiCard8readDataEPhj>:
    chipSelectHigh();
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
 80868b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80868b8:	4604      	mov	r4, r0
 80868ba:	460d      	mov	r5, r1
 80868bc:	4616      	mov	r6, r2
 80868be:	f001 fc33 	bl	8088128 <HAL_Timer_Get_Milli_Seconds>
 80868c2:	4607      	mov	r7, r0
#if USE_SD_CRC
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start block token
  unsigned t0 = millis();
  while ((m_status = spiReceive()) == 0XFF) {
 80868c4:	6820      	ldr	r0, [r4, #0]
 80868c6:	f7ff ffd0 	bl	808686a <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 80868ca:	28ff      	cmp	r0, #255	; 0xff
 80868cc:	7220      	strb	r0, [r4, #8]
 80868ce:	d107      	bne.n	80868e0 <_ZN9SdSpiCard8readDataEPhj+0x2a>
 80868d0:	f001 fc2a 	bl	8088128 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_READ_TIMEOUT) {
 80868d4:	1bc0      	subs	r0, r0, r7
 80868d6:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
 80868da:	d9f3      	bls.n	80868c4 <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80868dc:	2311      	movs	r3, #17
 80868de:	e00c      	b.n	80868fa <_ZN9SdSpiCard8readDataEPhj+0x44>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (m_status != DATA_START_BLOCK) {
 80868e0:	28fe      	cmp	r0, #254	; 0xfe
 80868e2:	d001      	beq.n	80868e8 <_ZN9SdSpiCard8readDataEPhj+0x32>
 80868e4:	230f      	movs	r3, #15
 80868e6:	e008      	b.n	80868fa <_ZN9SdSpiCard8readDataEPhj+0x44>
 80868e8:	6820      	ldr	r0, [r4, #0]
  }
  uint8_t spiReceive() {
    return m_spi->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spi->receive(buf, n);
 80868ea:	4632      	mov	r2, r6
 80868ec:	6803      	ldr	r3, [r0, #0]
 80868ee:	4629      	mov	r1, r5
 80868f0:	691b      	ldr	r3, [r3, #16]
 80868f2:	4798      	blx	r3
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
 80868f4:	7220      	strb	r0, [r4, #8]
 80868f6:	b130      	cbz	r0, 8086906 <_ZN9SdSpiCard8readDataEPhj+0x50>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80868f8:	231c      	movs	r3, #28
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  chipSelectHigh();
 80868fa:	4620      	mov	r0, r4
 80868fc:	71a3      	strb	r3, [r4, #6]
 80868fe:	f7ff ffb7 	bl	8086870 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8086902:	2000      	movs	r0, #0
}
 8086904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    error(SD_CARD_ERROR_READ_CRC);
    goto fail;
  }
#else
  // discard crc
  spiReceive();
 8086906:	6820      	ldr	r0, [r4, #0]
 8086908:	f7ff ffaf 	bl	808686a <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
  spiReceive();
 808690c:	6820      	ldr	r0, [r4, #0]
 808690e:	f7ff ffac 	bl	808686a <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8086912:	2001      	movs	r0, #1
 8086914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08086916 <_ZN9SdSpiCard11waitNotBusyEt>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMillis) {
 8086916:	b570      	push	{r4, r5, r6, lr}
 8086918:	4606      	mov	r6, r0
 808691a:	460c      	mov	r4, r1
 808691c:	f001 fc04 	bl	8088128 <HAL_Timer_Get_Milli_Seconds>
 8086920:	4605      	mov	r5, r0
  unsigned t0 = millis();
  while (spiReceive() != 0XFF) {
 8086922:	6830      	ldr	r0, [r6, #0]
 8086924:	f7ff ffa1 	bl	808686a <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8086928:	28ff      	cmp	r0, #255	; 0xff
 808692a:	d006      	beq.n	808693a <_ZN9SdSpiCard11waitNotBusyEt+0x24>
 808692c:	f001 fbfc 	bl	8088128 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) >= timeoutMillis) {
 8086930:	1b40      	subs	r0, r0, r5
 8086932:	42a0      	cmp	r0, r4
 8086934:	d3f5      	bcc.n	8086922 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
    }
  }
  return true;

fail:
  return false;
 8086936:	2000      	movs	r0, #0
 8086938:	bd70      	pop	{r4, r5, r6, pc}
  while (spiReceive() != 0XFF) {
    if (((unsigned)millis() - t0) >= timeoutMillis) {
      goto fail;
    }
  }
  return true;
 808693a:	2001      	movs	r0, #1

fail:
  return false;
}
 808693c:	bd70      	pop	{r4, r5, r6, pc}

0808693e <_ZN9SdSpiCard11cardCommandEhm>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 808693e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_selected) {
 8086940:	7903      	ldrb	r3, [r0, #4]
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 8086942:	4604      	mov	r4, r0
 8086944:	460d      	mov	r5, r1
 8086946:	9201      	str	r2, [sp, #4]
  // select card
  if (!m_selected) {
 8086948:	b90b      	cbnz	r3, 808694e <_ZN9SdSpiCard11cardCommandEhm+0x10>
    chipSelectLow();
 808694a:	f7ff ffa4 	bl	8086896 <_ZN9SdSpiCard13chipSelectLowEv>
  }
  // wait if busy
  waitNotBusy(SD_WRITE_TIMEOUT);
 808694e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8086952:	4620      	mov	r0, r4
 8086954:	f7ff ffdf 	bl	8086916 <_ZN9SdSpiCard11waitNotBusyEt>
  for (uint8_t k = 0; k < 6; k++) {
    spiSend(d[k]);
  }
#else  // USE_SD_CRC
  // send command
  spiSend(cmd | 0x40);
 8086958:	f045 0140 	orr.w	r1, r5, #64	; 0x40
 808695c:	6820      	ldr	r0, [r4, #0]
 808695e:	f7ff ff81 	bl	8086864 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
 8086962:	f10d 0607 	add.w	r6, sp, #7
 8086966:	f10d 0703 	add.w	r7, sp, #3

  // send argument
  for (int8_t i = 3; i >= 0; i--) {
    spiSend(pa[i]);
 808696a:	f816 1901 	ldrb.w	r1, [r6], #-1
 808696e:	6820      	ldr	r0, [r4, #0]
 8086970:	f7ff ff78 	bl	8086864 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
#else  // USE_SD_CRC
  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t i = 3; i >= 0; i--) {
 8086974:	42be      	cmp	r6, r7
 8086976:	d1f8      	bne.n	808696a <_ZN9SdSpiCard11cardCommandEhm+0x2c>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 8086978:	2d00      	cmp	r5, #0
 808697a:	bf0c      	ite	eq
 808697c:	2195      	moveq	r1, #149	; 0x95
 808697e:	2187      	movne	r1, #135	; 0x87
 8086980:	6820      	ldr	r0, [r4, #0]
 8086982:	f7ff ff6f 	bl	8086864 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
#endif  // USE_SD_CRC

  // skip stuff byte for stop read
  if (cmd == CMD12) {
 8086986:	2d0c      	cmp	r5, #12
 8086988:	d102      	bne.n	8086990 <_ZN9SdSpiCard11cardCommandEhm+0x52>
    spiReceive();
 808698a:	6820      	ldr	r0, [r4, #0]
 808698c:	f7ff ff6d 	bl	808686a <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
  for (int8_t i = 3; i >= 0; i--) {
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 8086990:	2500      	movs	r5, #0
  if (cmd == CMD12) {
    spiReceive();
  }

  // wait for response
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i != 0XFF; i++) {
 8086992:	6820      	ldr	r0, [r4, #0]
 8086994:	f7ff ff69 	bl	808686a <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8086998:	0603      	lsls	r3, r0, #24
 808699a:	7220      	strb	r0, [r4, #8]
 808699c:	d503      	bpl.n	80869a6 <_ZN9SdSpiCard11cardCommandEhm+0x68>
 808699e:	3501      	adds	r5, #1
 80869a0:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80869a4:	d1f5      	bne.n	8086992 <_ZN9SdSpiCard11cardCommandEhm+0x54>
  }
  return m_status;
}
 80869a6:	b003      	add	sp, #12
 80869a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080869aa <_ZN9SdSpiCard5beginEP9SdSpiBasehh>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
 80869aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80869ac:	461f      	mov	r7, r3
  m_errorCode = m_type = 0;
 80869ae:	2300      	movs	r3, #0
  m_spi = spi;
  m_chipSelectPin = chipSelectPin;
 80869b0:	7142      	strb	r2, [r0, #5]
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
  m_errorCode = m_type = 0;
 80869b2:	7243      	strb	r3, [r0, #9]
 80869b4:	7183      	strb	r3, [r0, #6]
  m_spi = spi;
 80869b6:	6001      	str	r1, [r0, #0]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
 80869b8:	4604      	mov	r4, r0
 80869ba:	f001 fbb5 	bl	8088128 <HAL_Timer_Get_Milli_Seconds>
 80869be:	4606      	mov	r6, r0
 80869c0:	6820      	ldr	r0, [r4, #0]
    m_type = value;
  }
  bool waitNotBusy(uint16_t timeoutMillis);
  bool writeData(uint8_t token, const uint8_t* src);
  void spiBegin(uint8_t chipSelectPin) {
    m_spi->begin(chipSelectPin);
 80869c2:	7961      	ldrb	r1, [r4, #5]
 80869c4:	6803      	ldr	r3, [r0, #0]
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
 80869c6:	250a      	movs	r5, #10
    m_type = value;
  }
  bool waitNotBusy(uint16_t timeoutMillis);
  bool writeData(uint8_t token, const uint8_t* src);
  void spiBegin(uint8_t chipSelectPin) {
    m_spi->begin(chipSelectPin);
 80869c8:	681b      	ldr	r3, [r3, #0]
 80869ca:	4798      	blx	r3

  // initialize SPI bus and chip select pin.
  spiBegin(m_chipSelectPin);

  // set SCK rate for initialization commands.
  m_sckDivisor = SPI_SCK_INIT_DIVISOR;
 80869cc:	2180      	movs	r1, #128	; 0x80
 80869ce:	6820      	ldr	r0, [r4, #0]
 80869d0:	71e1      	strb	r1, [r4, #7]
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
 80869d2:	6803      	ldr	r3, [r0, #0]
 80869d4:	685b      	ldr	r3, [r3, #4]
 80869d6:	4798      	blx	r3
  spiBeginTransaction(m_sckDivisor);

  // must supply min of 74 clock cycles with CS high.
  for (uint8_t i = 0; i < 10; i++) {
    spiSend(0XFF);
 80869d8:	21ff      	movs	r1, #255	; 0xff
 80869da:	6820      	ldr	r0, [r4, #0]
 80869dc:	3d01      	subs	r5, #1
 80869de:	f7ff ff41 	bl	8086864 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
  // set SCK rate for initialization commands.
  m_sckDivisor = SPI_SCK_INIT_DIVISOR;
  spiBeginTransaction(m_sckDivisor);

  // must supply min of 74 clock cycles with CS high.
  for (uint8_t i = 0; i < 10; i++) {
 80869e2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80869e6:	d1f7      	bne.n	80869d8 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x2e>
 80869e8:	6820      	ldr	r0, [r4, #0]
  }
  void spiEndTransaction() {
    m_spi->endTransaction();
 80869ea:	6803      	ldr	r3, [r0, #0]
 80869ec:	689b      	ldr	r3, [r3, #8]
 80869ee:	4798      	blx	r3
    spiSend(0XFF);
  }
  spiEndTransaction();
  // command to go idle in SPI mode
  while (cardCommand(CMD0, 0) != R1_IDLE_STATE) {
 80869f0:	2200      	movs	r2, #0
 80869f2:	4611      	mov	r1, r2
 80869f4:	4620      	mov	r0, r4
 80869f6:	f7ff ffa2 	bl	808693e <_ZN9SdSpiCard11cardCommandEhm>
 80869fa:	2801      	cmp	r0, #1
 80869fc:	d007      	beq.n	8086a0e <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x64>
 80869fe:	f001 fb93 	bl	8088128 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 8086a02:	1b80      	subs	r0, r0, r6
 8086a04:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8086a08:	d9f2      	bls.n	80869f0 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8086a0a:	2301      	movs	r3, #1
 8086a0c:	e048      	b.n	8086aa0 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xf6>
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  while (1) {
    if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
 8086a0e:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8086a12:	2108      	movs	r1, #8
 8086a14:	4620      	mov	r0, r4
 8086a16:	f7ff ff92 	bl	808693e <_ZN9SdSpiCard11cardCommandEhm>
 8086a1a:	2805      	cmp	r0, #5
 8086a1c:	d101      	bne.n	8086a22 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x78>
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void type(uint8_t value) {
    m_type = value;
 8086a1e:	2301      	movs	r3, #1
 8086a20:	e00b      	b.n	8086a3a <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x90>
 8086a22:	2504      	movs	r5, #4
      type(SD_CARD_TYPE_SD1);
      break;
    }
    for (uint8_t i = 0; i < 4; i++) {
      m_status = spiReceive();
 8086a24:	6820      	ldr	r0, [r4, #0]
 8086a26:	f7ff ff20 	bl	808686a <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8086a2a:	3d01      	subs	r5, #1
  while (1) {
    if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
      type(SD_CARD_TYPE_SD1);
      break;
    }
    for (uint8_t i = 0; i < 4; i++) {
 8086a2c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
 8086a30:	7220      	strb	r0, [r4, #8]
  while (1) {
    if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
      type(SD_CARD_TYPE_SD1);
      break;
    }
    for (uint8_t i = 0; i < 4; i++) {
 8086a32:	d1f7      	bne.n	8086a24 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x7a>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
 8086a34:	28aa      	cmp	r0, #170	; 0xaa
 8086a36:	d108      	bne.n	8086a4a <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xa0>
 8086a38:	2302      	movs	r3, #2
 8086a3a:	7263      	strb	r3, [r4, #9]
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 8086a3c:	7a63      	ldrb	r3, [r4, #9]
 8086a3e:	2b02      	cmp	r3, #2
 8086a40:	bf0c      	ite	eq
 8086a42:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
 8086a46:	2500      	movne	r5, #0
 8086a48:	e007      	b.n	8086a5a <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xb0>
 8086a4a:	f001 fb6d 	bl	8088128 <HAL_Timer_Get_Milli_Seconds>
    }
    if (m_status == 0XAA) {
      type(SD_CARD_TYPE_SD2);
      break;
    }
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 8086a4e:	1b80      	subs	r0, r0, r6
 8086a50:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8086a54:	d9db      	bls.n	8086a0e <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8086a56:	2302      	movs	r3, #2
 8086a58:	e022      	b.n	8086aa0 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xf6>
  bool writeStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
 8086a5a:	2200      	movs	r2, #0
 8086a5c:	2137      	movs	r1, #55	; 0x37
 8086a5e:	4620      	mov	r0, r4
 8086a60:	f7ff ff6d 	bl	808693e <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 8086a64:	462a      	mov	r2, r5
 8086a66:	2129      	movs	r1, #41	; 0x29
 8086a68:	4620      	mov	r0, r4
 8086a6a:	f7ff ff68 	bl	808693e <_ZN9SdSpiCard11cardCommandEhm>
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;

  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
 8086a6e:	4602      	mov	r2, r0
 8086a70:	b138      	cbz	r0, 8086a82 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xd8>
 8086a72:	f001 fb59 	bl	8088128 <HAL_Timer_Get_Milli_Seconds>
    // check for timeout
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 8086a76:	1b80      	subs	r0, r0, r6
 8086a78:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8086a7c:	d9ed      	bls.n	8086a5a <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xb0>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8086a7e:	230a      	movs	r3, #10
 8086a80:	e00e      	b.n	8086aa0 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xf6>
      error(SD_CARD_ERROR_ACMD41);
      goto fail;
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
 8086a82:	7a63      	ldrb	r3, [r4, #9]
 8086a84:	2b02      	cmp	r3, #2
 8086a86:	d005      	beq.n	8086a94 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xea>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  chipSelectHigh();
 8086a88:	4620      	mov	r0, r4
 8086a8a:	f7ff fef1 	bl	8086870 <_ZN9SdSpiCard14chipSelectHighEv>
  m_sckDivisor = sckDivisor;
 8086a8e:	71e7      	strb	r7, [r4, #7]
  return true;
 8086a90:	2001      	movs	r0, #1
 8086a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      goto fail;
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
 8086a94:	213a      	movs	r1, #58	; 0x3a
 8086a96:	4620      	mov	r0, r4
 8086a98:	f7ff ff51 	bl	808693e <_ZN9SdSpiCard11cardCommandEhm>
 8086a9c:	b130      	cbz	r0, 8086aac <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x102>
 8086a9e:	2308      	movs	r3, #8
  chipSelectHigh();
  m_sckDivisor = sckDivisor;
  return true;

fail:
  chipSelectHigh();
 8086aa0:	4620      	mov	r0, r4
 8086aa2:	71a3      	strb	r3, [r4, #6]
 8086aa4:	f7ff fee4 	bl	8086870 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8086aa8:	2000      	movs	r0, #0
}
 8086aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
 8086aac:	6820      	ldr	r0, [r4, #0]
 8086aae:	f7ff fedc 	bl	808686a <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8086ab2:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8086ab6:	28c0      	cmp	r0, #192	; 0xc0
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void type(uint8_t value) {
    m_type = value;
 8086ab8:	bf04      	itt	eq
 8086aba:	2303      	moveq	r3, #3
 8086abc:	7263      	strbeq	r3, [r4, #9]
      type(SD_CARD_TYPE_SDHC);
    }
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
 8086abe:	6820      	ldr	r0, [r4, #0]
 8086ac0:	f7ff fed3 	bl	808686a <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8086ac4:	6820      	ldr	r0, [r4, #0]
 8086ac6:	f7ff fed0 	bl	808686a <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8086aca:	6820      	ldr	r0, [r4, #0]
 8086acc:	f7ff fecd 	bl	808686a <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8086ad0:	e7da      	b.n	8086a88 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xde>

08086ad2 <_ZN9SdSpiCard9readBlockEmPh>:
    chipSelectHigh();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8086ad2:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8086ad4:	7a43      	ldrb	r3, [r0, #9]
    chipSelectHigh();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8086ad6:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8086ad8:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8086ada:	bf18      	it	ne
 8086adc:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD17, blockNumber)) {
 8086ade:	460a      	mov	r2, r1
 8086ae0:	2111      	movs	r1, #17
    chipSelectHigh();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8086ae2:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
 8086ae4:	f7ff ff2b 	bl	808693e <_ZN9SdSpiCard11cardCommandEhm>
 8086ae8:	b110      	cbz	r0, 8086af0 <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8086aea:	2304      	movs	r3, #4
 8086aec:	71a3      	strb	r3, [r4, #6]
 8086aee:	e00b      	b.n	8086b08 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
 8086af0:	4629      	mov	r1, r5
 8086af2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8086af6:	4620      	mov	r0, r4
 8086af8:	f7ff fedd 	bl	80868b6 <_ZN9SdSpiCard8readDataEPhj>
 8086afc:	4605      	mov	r5, r0
 8086afe:	b118      	cbz	r0, 8086b08 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  chipSelectHigh();
 8086b00:	4620      	mov	r0, r4
 8086b02:	f7ff feb5 	bl	8086870 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8086b06:	e003      	b.n	8086b10 <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  chipSelectHigh();
 8086b08:	4620      	mov	r0, r4
 8086b0a:	f7ff feb1 	bl	8086870 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8086b0e:	2500      	movs	r5, #0
}
 8086b10:	4628      	mov	r0, r5
 8086b12:	bd38      	pop	{r3, r4, r5, pc}

08086b14 <_ZN9SdSpiCard9readStartEm>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8086b14:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 8086b16:	7a43      	ldrb	r3, [r0, #9]
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8086b18:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 8086b1a:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8086b1c:	bf18      	it	ne
 8086b1e:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
 8086b20:	2112      	movs	r1, #18
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8086b22:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
 8086b24:	f7ff ff0b 	bl	808693e <_ZN9SdSpiCard11cardCommandEhm>
 8086b28:	b130      	cbz	r0, 8086b38 <_ZN9SdSpiCard9readStartEm+0x24>
 8086b2a:	2305      	movs	r3, #5
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 8086b2c:	4620      	mov	r0, r4
 8086b2e:	71a3      	strb	r3, [r4, #6]
 8086b30:	f7ff fe9e 	bl	8086870 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8086b34:	2000      	movs	r0, #0
 8086b36:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
  return true;
 8086b38:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 8086b3a:	bd10      	pop	{r4, pc}

08086b3c <_ZN9SdSpiCard8readStopEv>:
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 8086b3c:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
 8086b3e:	2200      	movs	r2, #0
 8086b40:	210c      	movs	r1, #12
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 8086b42:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
 8086b44:	f7ff fefb 	bl	808693e <_ZN9SdSpiCard11cardCommandEhm>
 8086b48:	b130      	cbz	r0, 8086b58 <_ZN9SdSpiCard8readStopEv+0x1c>
 8086b4a:	2303      	movs	r3, #3
  }
  chipSelectHigh();
  return true;

fail:
  chipSelectHigh();
 8086b4c:	4620      	mov	r0, r4
 8086b4e:	71a3      	strb	r3, [r4, #6]
 8086b50:	f7ff fe8e 	bl	8086870 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8086b54:	2000      	movs	r0, #0
 8086b56:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  chipSelectHigh();
 8086b58:	4620      	mov	r0, r4
 8086b5a:	f7ff fe89 	bl	8086870 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8086b5e:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 8086b60:	bd10      	pop	{r4, pc}

08086b62 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
 8086b62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8086b64:	4605      	mov	r5, r0
 8086b66:	4616      	mov	r6, r2
 8086b68:	461f      	mov	r7, r3
  if (!readStart(block)) {
 8086b6a:	f7ff ffd3 	bl	8086b14 <_ZN9SdSpiCard9readStartEm>
 8086b6e:	b198      	cbz	r0, 8086b98 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
 8086b70:	2400      	movs	r4, #0
 8086b72:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
 8086b74:	429f      	cmp	r7, r3
 8086b76:	eb06 2144 	add.w	r1, r6, r4, lsl #9
 8086b7a:	d908      	bls.n	8086b8e <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
 8086b7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8086b80:	4628      	mov	r0, r5
 8086b82:	f7ff fe98 	bl	80868b6 <_ZN9SdSpiCard8readDataEPhj>
 8086b86:	3401      	adds	r4, #1
 8086b88:	2800      	cmp	r0, #0
 8086b8a:	d1f2      	bne.n	8086b72 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
 8086b8c:	e004      	b.n	8086b98 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
 8086b8e:	4628      	mov	r0, r5
}
 8086b90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
 8086b94:	f7ff bfd2 	b.w	8086b3c <_ZN9SdSpiCard8readStopEv>
}
 8086b98:	2000      	movs	r0, #0
 8086b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08086b9c <_ZN9SdSpiCard9writeDataEhPKh>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
 8086b9c:	b538      	push	{r3, r4, r5, lr}
 8086b9e:	4604      	mov	r4, r0
 8086ba0:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
 8086ba2:	6800      	ldr	r0, [r0, #0]
 8086ba4:	f7ff fe5e 	bl	8086864 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
 8086ba8:	6820      	ldr	r0, [r4, #0]
  }
  void spiSend(uint8_t data) {
    m_spi->send(data);
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spi->send(buf, n);
 8086baa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8086bae:	6803      	ldr	r3, [r0, #0]
 8086bb0:	4629      	mov	r1, r5
 8086bb2:	699b      	ldr	r3, [r3, #24]
 8086bb4:	4798      	blx	r3
  spiSend(src, 512);
  spiSend(crc >> 8);
 8086bb6:	21ff      	movs	r1, #255	; 0xff
 8086bb8:	6820      	ldr	r0, [r4, #0]
 8086bba:	f7ff fe53 	bl	8086864 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
  spiSend(crc & 0XFF);
 8086bbe:	21ff      	movs	r1, #255	; 0xff
 8086bc0:	6820      	ldr	r0, [r4, #0]
 8086bc2:	f7ff fe4f 	bl	8086864 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>

  m_status = spiReceive();
 8086bc6:	6820      	ldr	r0, [r4, #0]
 8086bc8:	f7ff fe4f 	bl	808686a <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8086bcc:	7220      	strb	r0, [r4, #8]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
 8086bce:	f000 001f 	and.w	r0, r0, #31
 8086bd2:	2805      	cmp	r0, #5
 8086bd4:	d006      	beq.n	8086be4 <_ZN9SdSpiCard9writeDataEhPKh+0x48>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8086bd6:	2313      	movs	r3, #19
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 8086bd8:	4620      	mov	r0, r4
 8086bda:	71a3      	strb	r3, [r4, #6]
 8086bdc:	f7ff fe48 	bl	8086870 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8086be0:	2000      	movs	r0, #0
 8086be2:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
 8086be4:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 8086be6:	bd38      	pop	{r3, r4, r5, pc}

08086be8 <_ZN9SdSpiCard10writeBlockEmPKh>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8086be8:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8086bea:	7a43      	ldrb	r3, [r0, #9]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8086bec:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8086bee:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8086bf0:	bf18      	it	ne
 8086bf2:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD24, blockNumber)) {
 8086bf4:	460a      	mov	r2, r1
 8086bf6:	2118      	movs	r1, #24

fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8086bf8:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
 8086bfa:	f7ff fea0 	bl	808693e <_ZN9SdSpiCard11cardCommandEhm>
 8086bfe:	b110      	cbz	r0, 8086c06 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
 8086c00:	2306      	movs	r3, #6
 8086c02:	71a3      	strb	r3, [r4, #6]
 8086c04:	e00a      	b.n	8086c1c <_ZN9SdSpiCard10writeBlockEmPKh+0x34>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
 8086c06:	462a      	mov	r2, r5
 8086c08:	21fe      	movs	r1, #254	; 0xfe
 8086c0a:	4620      	mov	r0, r4
 8086c0c:	f7ff ffc6 	bl	8086b9c <_ZN9SdSpiCard9writeDataEhPKh>
 8086c10:	4605      	mov	r5, r0
 8086c12:	b118      	cbz	r0, 8086c1c <_ZN9SdSpiCard10writeBlockEmPKh+0x34>
    error(SD_CARD_ERROR_WRITE_PROGRAMMING);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  chipSelectHigh();
 8086c14:	4620      	mov	r0, r4
 8086c16:	f7ff fe2b 	bl	8086870 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8086c1a:	e003      	b.n	8086c24 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>

fail:
  chipSelectHigh();
 8086c1c:	4620      	mov	r0, r4
 8086c1e:	f7ff fe27 	bl	8086870 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8086c22:	2500      	movs	r5, #0
}
 8086c24:	4628      	mov	r0, r5
 8086c26:	bd38      	pop	{r3, r4, r5, pc}

08086c28 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
 8086c28:	b570      	push	{r4, r5, r6, lr}
 8086c2a:	4604      	mov	r4, r0
 8086c2c:	460d      	mov	r5, r1
  bool selected = m_selected;
 8086c2e:	7906      	ldrb	r6, [r0, #4]
  chipSelectLow();
 8086c30:	f7ff fe31 	bl	8086896 <_ZN9SdSpiCard13chipSelectLowEv>
  // wait for previous write to finish
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8086c34:	f44f 7116 	mov.w	r1, #600	; 0x258
 8086c38:	4620      	mov	r0, r4
 8086c3a:	f7ff fe6c 	bl	8086916 <_ZN9SdSpiCard11waitNotBusyEt>
 8086c3e:	b910      	cbnz	r0, 8086c46 <_ZN9SdSpiCard9writeDataEPKh+0x1e>
 8086c40:	2317      	movs	r3, #23
 8086c42:	71a3      	strb	r3, [r4, #6]
 8086c44:	e00b      	b.n	8086c5e <_ZN9SdSpiCard9writeDataEPKh+0x36>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
 8086c46:	462a      	mov	r2, r5
 8086c48:	21fc      	movs	r1, #252	; 0xfc
 8086c4a:	4620      	mov	r0, r4
 8086c4c:	f7ff ffa6 	bl	8086b9c <_ZN9SdSpiCard9writeDataEhPKh>
 8086c50:	4605      	mov	r5, r0
 8086c52:	b120      	cbz	r0, 8086c5e <_ZN9SdSpiCard9writeDataEPKh+0x36>
    goto fail;
  }
  if (!selected) {
 8086c54:	b93e      	cbnz	r6, 8086c66 <_ZN9SdSpiCard9writeDataEPKh+0x3e>
    chipSelectHigh();
 8086c56:	4620      	mov	r0, r4
 8086c58:	f7ff fe0a 	bl	8086870 <_ZN9SdSpiCard14chipSelectHighEv>
 8086c5c:	e003      	b.n	8086c66 <_ZN9SdSpiCard9writeDataEPKh+0x3e>
  }
  return true;

fail:
  chipSelectHigh();
 8086c5e:	4620      	mov	r0, r4
 8086c60:	f7ff fe06 	bl	8086870 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8086c64:	2500      	movs	r5, #0
}
 8086c66:	4628      	mov	r0, r5
 8086c68:	bd70      	pop	{r4, r5, r6, pc}

08086c6a <_ZN9SdSpiCard10writeStartEmm>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber, uint32_t eraseCount) {
 8086c6a:	b570      	push	{r4, r5, r6, lr}
 8086c6c:	4604      	mov	r4, r0
 8086c6e:	4616      	mov	r6, r2
 8086c70:	460d      	mov	r5, r1
  bool writeStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
 8086c72:	2200      	movs	r2, #0
 8086c74:	2137      	movs	r1, #55	; 0x37
 8086c76:	f7ff fe62 	bl	808693e <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 8086c7a:	4632      	mov	r2, r6
 8086c7c:	2117      	movs	r1, #23
 8086c7e:	4620      	mov	r0, r4
 8086c80:	f7ff fe5d 	bl	808693e <_ZN9SdSpiCard11cardCommandEhm>
  SD_TRACE("WS", blockNumber);
  // send pre-erase count
  if (cardAcmd(ACMD23, eraseCount)) {
 8086c84:	b108      	cbz	r0, 8086c8a <_ZN9SdSpiCard10writeStartEmm+0x20>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8086c86:	2309      	movs	r3, #9
 8086c88:	e00a      	b.n	8086ca0 <_ZN9SdSpiCard10writeStartEmm+0x36>
    error(SD_CARD_ERROR_ACMD23);
    goto fail;
  }
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8086c8a:	7a63      	ldrb	r3, [r4, #9]
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
 8086c8c:	2119      	movs	r1, #25
  if (cardAcmd(ACMD23, eraseCount)) {
    error(SD_CARD_ERROR_ACMD23);
    goto fail;
  }
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8086c8e:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8086c90:	bf18      	it	ne
 8086c92:	026d      	lslne	r5, r5, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
 8086c94:	462a      	mov	r2, r5
 8086c96:	4620      	mov	r0, r4
 8086c98:	f7ff fe51 	bl	808693e <_ZN9SdSpiCard11cardCommandEhm>
 8086c9c:	b130      	cbz	r0, 8086cac <_ZN9SdSpiCard10writeStartEmm+0x42>
 8086c9e:	2307      	movs	r3, #7
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 8086ca0:	4620      	mov	r0, r4
 8086ca2:	71a3      	strb	r3, [r4, #6]
 8086ca4:	f7ff fde4 	bl	8086870 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8086ca8:	2000      	movs	r0, #0
 8086caa:	bd70      	pop	{r4, r5, r6, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
 8086cac:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 8086cae:	bd70      	pop	{r4, r5, r6, pc}

08086cb0 <_ZN9SdSpiCard9writeStopEv>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 8086cb0:	b538      	push	{r3, r4, r5, lr}
 8086cb2:	4604      	mov	r4, r0
  chipSelectLow();
 8086cb4:	f7ff fdef 	bl	8086896 <_ZN9SdSpiCard13chipSelectLowEv>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8086cb8:	f44f 7116 	mov.w	r1, #600	; 0x258
 8086cbc:	4620      	mov	r0, r4
 8086cbe:	f7ff fe2a 	bl	8086916 <_ZN9SdSpiCard11waitNotBusyEt>
 8086cc2:	b170      	cbz	r0, 8086ce2 <_ZN9SdSpiCard9writeStopEv+0x32>
    goto fail;
  }
  spiSend(STOP_TRAN_TOKEN);
 8086cc4:	21fd      	movs	r1, #253	; 0xfd
 8086cc6:	6820      	ldr	r0, [r4, #0]
 8086cc8:	f7ff fdcc 	bl	8086864 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8086ccc:	f44f 7116 	mov.w	r1, #600	; 0x258
 8086cd0:	4620      	mov	r0, r4
 8086cd2:	f7ff fe20 	bl	8086916 <_ZN9SdSpiCard11waitNotBusyEt>
 8086cd6:	4605      	mov	r5, r0
 8086cd8:	b118      	cbz	r0, 8086ce2 <_ZN9SdSpiCard9writeStopEv+0x32>
    goto fail;
  }
  chipSelectHigh();
 8086cda:	4620      	mov	r0, r4
 8086cdc:	f7ff fdc8 	bl	8086870 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8086ce0:	e005      	b.n	8086cee <_ZN9SdSpiCard9writeStopEv+0x3e>
 8086ce2:	2312      	movs	r3, #18
 8086ce4:	71a3      	strb	r3, [r4, #6]

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
 8086ce6:	4620      	mov	r0, r4
 8086ce8:	f7ff fdc2 	bl	8086870 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8086cec:	2500      	movs	r5, #0
}
 8086cee:	4628      	mov	r0, r5
 8086cf0:	bd38      	pop	{r3, r4, r5, pc}

08086cf2 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 8086cf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8086cf4:	4617      	mov	r7, r2
  if (!writeStart(block, count)) {
 8086cf6:	461a      	mov	r2, r3
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 8086cf8:	4605      	mov	r5, r0
 8086cfa:	461e      	mov	r6, r3
  if (!writeStart(block, count)) {
 8086cfc:	f7ff ffb5 	bl	8086c6a <_ZN9SdSpiCard10writeStartEmm>
 8086d00:	b170      	cbz	r0, 8086d20 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2e>
 8086d02:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 8086d04:	42b4      	cmp	r4, r6
 8086d06:	eb07 2144 	add.w	r1, r7, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 8086d0a:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block, count)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 8086d0c:	d004      	beq.n	8086d18 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x26>
    if (!writeData(src)) {
 8086d0e:	f7ff ff8b 	bl	8086c28 <_ZN9SdSpiCard9writeDataEPKh>
 8086d12:	b128      	cbz	r0, 8086d20 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2e>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block, count)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 8086d14:	3401      	adds	r4, #1
 8086d16:	e7f5      	b.n	8086d04 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x12>
  return writeStop();

 fail:
  chipSelectHigh();
  return false;
}
 8086d18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 8086d1c:	f7ff bfc8 	b.w	8086cb0 <_ZN9SdSpiCard9writeStopEv>

 fail:
  chipSelectHigh();
 8086d20:	4628      	mov	r0, r5
 8086d22:	f7ff fda5 	bl	8086870 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
}
 8086d26:	2000      	movs	r0, #0
 8086d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08086d2a <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP9SdSpiBasehh>:
 8086d2a:	f001 b965 	b.w	8087ff8 <HAL_Pin_Map>
	...

08086d30 <_Z36SD_SPI_DMA_TransferComplete_Callbackv>:
#if SPI_INTERFACE_COUNT == 1
const uint8_t m_spiIf = 0;
#endif
//-----------------------------------------------------------------------------
void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
 8086d30:	4b01      	ldr	r3, [pc, #4]	; (8086d38 <_Z36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
 8086d32:	2201      	movs	r2, #1
 8086d34:	701a      	strb	r2, [r3, #0]
 8086d36:	4770      	bx	lr
 8086d38:	20000b88 	.word	0x20000b88

08086d3c <_ZN5SdSpi14endTransactionEv>:
#endif  // SPI_CLOCK_DIV128
  // delay for SPI transfer done callback too soon bug.
  bugDelay = 24*divisor*(1 + m_spiIf)/60;
}
//-----------------------------------------------------------------------------
void SdSpi::endTransaction() {
 8086d3c:	4770      	bx	lr
	...

08086d40 <_ZN5SdSpi5beginEh>:
void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
}
//------------------------------------------------------------------------------
void SdSpi::begin(uint8_t chipSelectPin) {
  spiPtr[m_spiIf]->begin(chipSelectPin);
 8086d40:	7902      	ldrb	r2, [r0, #4]
 8086d42:	4b02      	ldr	r3, [pc, #8]	; (8086d4c <_ZN5SdSpi5beginEh+0xc>)
 8086d44:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8086d48:	f001 bde4 	b.w	8088914 <_ZN8SPIClass5beginEt>
 8086d4c:	0809131c 	.word	0x0809131c

08086d50 <_ZN5SdSpi16beginTransactionEh>:
}
//------------------------------------------------------------------------------
void SdSpi::beginTransaction(uint8_t divisor) {
 8086d50:	b570      	push	{r4, r5, r6, lr}
 8086d52:	4606      	mov	r6, r0
 8086d54:	460c      	mov	r4, r1
  spiPtr[m_spiIf]->setBitOrder(MSBFIRST);
 8086d56:	7903      	ldrb	r3, [r0, #4]
 8086d58:	4d1a      	ldr	r5, [pc, #104]	; (8086dc4 <_ZN5SdSpi16beginTransactionEh+0x74>)
 8086d5a:	2101      	movs	r1, #1
 8086d5c:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8086d60:	f001 fdde 	bl	8088920 <_ZN8SPIClass11setBitOrderEh>
  spiPtr[m_spiIf]->setDataMode(SPI_MODE0);
 8086d64:	7933      	ldrb	r3, [r6, #4]
 8086d66:	2100      	movs	r1, #0
 8086d68:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8086d6c:	f001 fddb 	bl	8088926 <_ZN8SPIClass11setDataModeEh>
#ifndef SPI_CLOCK_DIV128
  spiPtr[m_spiIf]->setClockDivider(divisor);
#else  // SPI_CLOCK_DIV128
  int v;
  if (divisor <= 2) {
 8086d70:	2c02      	cmp	r4, #2
 8086d72:	d90c      	bls.n	8086d8e <_ZN5SdSpi16beginTransactionEh+0x3e>
    v = SPI_CLOCK_DIV2;
  } else  if (divisor <= 4) {
 8086d74:	2c04      	cmp	r4, #4
 8086d76:	d90c      	bls.n	8086d92 <_ZN5SdSpi16beginTransactionEh+0x42>
    v = SPI_CLOCK_DIV4;
  } else  if (divisor <= 8) {
 8086d78:	2c08      	cmp	r4, #8
 8086d7a:	d90c      	bls.n	8086d96 <_ZN5SdSpi16beginTransactionEh+0x46>
    v = SPI_CLOCK_DIV8;
  } else  if (divisor <= 16) {
 8086d7c:	2c10      	cmp	r4, #16
 8086d7e:	d90c      	bls.n	8086d9a <_ZN5SdSpi16beginTransactionEh+0x4a>
    v = SPI_CLOCK_DIV16;
  } else  if (divisor <= 32) {
 8086d80:	2c20      	cmp	r4, #32
 8086d82:	d90c      	bls.n	8086d9e <_ZN5SdSpi16beginTransactionEh+0x4e>
    v = SPI_CLOCK_DIV32;
  } else  if (divisor <= 64) {
    v = SPI_CLOCK_DIV64;
  } else {
    v = SPI_CLOCK_DIV128;
 8086d84:	2c41      	cmp	r4, #65	; 0x41
 8086d86:	bf34      	ite	cc
 8086d88:	2128      	movcc	r1, #40	; 0x28
 8086d8a:	2130      	movcs	r1, #48	; 0x30
 8086d8c:	e008      	b.n	8086da0 <_ZN5SdSpi16beginTransactionEh+0x50>
#ifndef SPI_CLOCK_DIV128
  spiPtr[m_spiIf]->setClockDivider(divisor);
#else  // SPI_CLOCK_DIV128
  int v;
  if (divisor <= 2) {
    v = SPI_CLOCK_DIV2;
 8086d8e:	2100      	movs	r1, #0
 8086d90:	e006      	b.n	8086da0 <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 4) {
    v = SPI_CLOCK_DIV4;
 8086d92:	2108      	movs	r1, #8
 8086d94:	e004      	b.n	8086da0 <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 8) {
    v = SPI_CLOCK_DIV8;
 8086d96:	2110      	movs	r1, #16
 8086d98:	e002      	b.n	8086da0 <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 16) {
    v = SPI_CLOCK_DIV16;
 8086d9a:	2118      	movs	r1, #24
 8086d9c:	e000      	b.n	8086da0 <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 32) {
    v = SPI_CLOCK_DIV32;
 8086d9e:	2120      	movs	r1, #32
  } else  if (divisor <= 64) {
    v = SPI_CLOCK_DIV64;
  } else {
    v = SPI_CLOCK_DIV128;
  }
  spiPtr[m_spiIf]->setClockDivider(v);
 8086da0:	7933      	ldrb	r3, [r6, #4]
 8086da2:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8086da6:	f001 fe07 	bl	80889b8 <_ZN8SPIClass15setClockDividerEh>
#endif  // SPI_CLOCK_DIV128
  // delay for SPI transfer done callback too soon bug.
  bugDelay = 24*divisor*(1 + m_spiIf)/60;
 8086daa:	2318      	movs	r3, #24
 8086dac:	fb03 f104 	mul.w	r1, r3, r4
 8086db0:	7932      	ldrb	r2, [r6, #4]
 8086db2:	233c      	movs	r3, #60	; 0x3c
 8086db4:	fb02 1101 	mla	r1, r2, r1, r1
 8086db8:	fb91 f1f3 	sdiv	r1, r1, r3
 8086dbc:	4b02      	ldr	r3, [pc, #8]	; (8086dc8 <_ZN5SdSpi16beginTransactionEh+0x78>)
 8086dbe:	6019      	str	r1, [r3, #0]
 8086dc0:	bd70      	pop	{r4, r5, r6, pc}
 8086dc2:	bf00      	nop
 8086dc4:	0809131c 	.word	0x0809131c
 8086dc8:	20000b8c 	.word	0x20000b8c

08086dcc <_ZN5SdSpi7receiveEv>:
void SdSpi::endTransaction() {
}
//-----------------------------------------------------------------------------
/** SPI receive a byte */
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
 8086dcc:	7902      	ldrb	r2, [r0, #4]
 8086dce:	4b03      	ldr	r3, [pc, #12]	; (8086ddc <_ZN5SdSpi7receiveEv+0x10>)
 8086dd0:	21ff      	movs	r1, #255	; 0xff
 8086dd2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8086dd6:	f001 be03 	b.w	80889e0 <_ZN8SPIClass8transferEh>
 8086dda:	bf00      	nop
 8086ddc:	0809131c 	.word	0x0809131c

08086de0 <_ZN5SdSpi4sendEh>:
  return 0;
}
//-----------------------------------------------------------------------------
/** SPI send a byte */
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
 8086de0:	7902      	ldrb	r2, [r0, #4]
 8086de2:	4b02      	ldr	r3, [pc, #8]	; (8086dec <_ZN5SdSpi4sendEh+0xc>)
 8086de4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8086de8:	f001 bdfa 	b.w	80889e0 <_ZN8SPIClass8transferEh>
 8086dec:	0809131c 	.word	0x0809131c

08086df0 <_ZN5SdSpi7receiveEPhj>:
/** SPI receive a byte */
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
}
//-----------------------------------------------------------------------------
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
 8086df0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  SPI_DMA_TransferCompleted = false;
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8086df2:	4b0c      	ldr	r3, [pc, #48]	; (8086e24 <_ZN5SdSpi7receiveEPhj+0x34>)
 8086df4:	7906      	ldrb	r6, [r0, #4]
 8086df6:	480c      	ldr	r0, [pc, #48]	; (8086e28 <_ZN5SdSpi7receiveEPhj+0x38>)
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
}
//-----------------------------------------------------------------------------
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 8086df8:	2500      	movs	r5, #0
 8086dfa:	4c0c      	ldr	r4, [pc, #48]	; (8086e2c <_ZN5SdSpi7receiveEPhj+0x3c>)
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8086dfc:	9300      	str	r3, [sp, #0]
 8086dfe:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8086e02:	4613      	mov	r3, r2
 8086e04:	460a      	mov	r2, r1
 8086e06:	4629      	mov	r1, r5
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
}
//-----------------------------------------------------------------------------
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 8086e08:	7025      	strb	r5, [r4, #0]
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8086e0a:	f001 fdef 	bl	80889ec <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
 8086e0e:	7823      	ldrb	r3, [r4, #0]
 8086e10:	2b00      	cmp	r3, #0
 8086e12:	d0fc      	beq.n	8086e0e <_ZN5SdSpi7receiveEPhj+0x1e>
  if (bugDelay) {
 8086e14:	4b06      	ldr	r3, [pc, #24]	; (8086e30 <_ZN5SdSpi7receiveEPhj+0x40>)
 8086e16:	6818      	ldr	r0, [r3, #0]
 8086e18:	b108      	cbz	r0, 8086e1e <_ZN5SdSpi7receiveEPhj+0x2e>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 8086e1a:	f001 f97d 	bl	8088118 <HAL_Delay_Microseconds>
    delayMicroseconds(bugDelay);
  }
  return 0;
}
 8086e1e:	2000      	movs	r0, #0
 8086e20:	b002      	add	sp, #8
 8086e22:	bd70      	pop	{r4, r5, r6, pc}
 8086e24:	08086d31 	.word	0x08086d31
 8086e28:	0809131c 	.word	0x0809131c
 8086e2c:	20000b88 	.word	0x20000b88
 8086e30:	20000b8c 	.word	0x20000b8c

08086e34 <_ZN5SdSpi4sendEPKhj>:
/** SPI send a byte */
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
 8086e34:	b573      	push	{r0, r1, r4, r5, r6, lr}
  SPI_DMA_TransferCompleted = false;

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 8086e36:	4b0d      	ldr	r3, [pc, #52]	; (8086e6c <_ZN5SdSpi4sendEPKhj+0x38>)
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
 8086e38:	7906      	ldrb	r6, [r0, #4]
                            SD_SPI_DMA_TransferComplete_Callback);
 8086e3a:	480d      	ldr	r0, [pc, #52]	; (8086e70 <_ZN5SdSpi4sendEPKhj+0x3c>)
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 8086e3c:	2500      	movs	r5, #0
 8086e3e:	4c0d      	ldr	r4, [pc, #52]	; (8086e74 <_ZN5SdSpi4sendEPKhj+0x40>)

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 8086e40:	9300      	str	r3, [sp, #0]
 8086e42:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8086e46:	4613      	mov	r3, r2
 8086e48:	462a      	mov	r2, r5
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 8086e4a:	7025      	strb	r5, [r4, #0]

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 8086e4c:	f001 fdce 	bl	80889ec <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
 8086e50:	7823      	ldrb	r3, [r4, #0]
 8086e52:	2b00      	cmp	r3, #0
 8086e54:	d0fc      	beq.n	8086e50 <_ZN5SdSpi4sendEPKhj+0x1c>
  if (bugDelay) {
 8086e56:	4b08      	ldr	r3, [pc, #32]	; (8086e78 <_ZN5SdSpi4sendEPKhj+0x44>)
 8086e58:	6818      	ldr	r0, [r3, #0]
 8086e5a:	b120      	cbz	r0, 8086e66 <_ZN5SdSpi4sendEPKhj+0x32>
    delayMicroseconds(bugDelay);
  }
}
 8086e5c:	b002      	add	sp, #8
 8086e5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8086e62:	f001 b959 	b.w	8088118 <HAL_Delay_Microseconds>
 8086e66:	b002      	add	sp, #8
 8086e68:	bd70      	pop	{r4, r5, r6, pc}
 8086e6a:	bf00      	nop
 8086e6c:	08086d31 	.word	0x08086d31
 8086e70:	0809131c 	.word	0x0809131c
 8086e74:	20000b88 	.word	0x20000b88
 8086e78:	20000b8c 	.word	0x20000b8c

08086e7c <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv>:
 8086e7c:	f001 b8bc 	b.w	8087ff8 <HAL_Pin_Map>

08086e80 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 8086e80:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 8086e82:	f100 0210 	add.w	r2, r0, #16
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 8086e86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8086e8a:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 8086e8c:	6901      	ldr	r1, [r0, #16]
 8086e8e:	6880      	ldr	r0, [r0, #8]
 8086e90:	f000 bc04 	b.w	808769c <_ZN9FatVolume15allocateClusterEmPm>

08086e94 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 8086e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 8086e98:	7803      	ldrb	r3, [r0, #0]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 8086e9a:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 8086e9c:	f003 0320 	and.w	r3, r3, #32
 8086ea0:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8086ea4:	b10b      	cbz	r3, 8086eaa <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
 8086ea6:	2600      	movs	r6, #0
 8086ea8:	e02e      	b.n	8086f08 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
 8086eaa:	6942      	ldr	r2, [r0, #20]
 8086eac:	4b18      	ldr	r3, [pc, #96]	; (8086f10 <_ZN7FatFile13addDirClusterEv+0x7c>)
 8086eae:	429a      	cmp	r2, r3
 8086eb0:	d8f9      	bhi.n	8086ea6 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
 8086eb2:	f7ff ffe5 	bl	8086e80 <_ZN7FatFile10addClusterEv>
 8086eb6:	4606      	mov	r6, r0
 8086eb8:	2800      	cmp	r0, #0
 8086eba:	d0f4      	beq.n	8086ea6 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterStartBlock(m_curCluster);
 8086ebc:	6921      	ldr	r1, [r4, #16]
 8086ebe:	68a0      	ldr	r0, [r4, #8]
 8086ec0:	f000 fb8d 	bl	80875de <_ZNK9FatVolume17clusterStartBlockEm>
 8086ec4:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8086ec6:	68a0      	ldr	r0, [r4, #8]
 8086ec8:	2205      	movs	r2, #5
 8086eca:	4639      	mov	r1, r7
 8086ecc:	3028      	adds	r0, #40	; 0x28
 8086ece:	f000 fb62 	bl	8087596 <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
 8086ed2:	4680      	mov	r8, r0
 8086ed4:	2800      	cmp	r0, #0
 8086ed6:	d0e6      	beq.n	8086ea6 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
 8086ed8:	4629      	mov	r1, r5
 8086eda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8086ede:	f005 f8ed 	bl	808c0bc <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 8086ee2:	2501      	movs	r5, #1
 8086ee4:	68a0      	ldr	r0, [r4, #8]
 8086ee6:	7902      	ldrb	r2, [r0, #4]
 8086ee8:	42aa      	cmp	r2, r5
 8086eea:	d909      	bls.n	8086f00 <_ZN7FatFile13addDirClusterEv+0x6c>
    if (!m_vol->writeBlock(block + i, pc->data)) {
 8086eec:	6803      	ldr	r3, [r0, #0]
 8086eee:	4642      	mov	r2, r8
 8086ef0:	685b      	ldr	r3, [r3, #4]
 8086ef2:	19e9      	adds	r1, r5, r7
 8086ef4:	4798      	blx	r3
 8086ef6:	2800      	cmp	r0, #0
 8086ef8:	d0d5      	beq.n	8086ea6 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 8086efa:	3501      	adds	r5, #1
 8086efc:	b2ed      	uxtb	r5, r5
 8086efe:	e7f1      	b.n	8086ee4 <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
 8086f00:	6963      	ldr	r3, [r4, #20]
 8086f02:	eb03 2342 	add.w	r3, r3, r2, lsl #9
 8086f06:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
 8086f08:	4630      	mov	r0, r6
 8086f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8086f0e:	bf00      	nop
 8086f10:	001ffdff 	.word	0x001ffdff

08086f14 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
 8086f14:	b510      	push	{r4, lr}
 8086f16:	4604      	mov	r4, r0
 8086f18:	6880      	ldr	r0, [r0, #8]
 8086f1a:	460a      	mov	r2, r1
 8086f1c:	3028      	adds	r0, #40	; 0x28
 8086f1e:	69a1      	ldr	r1, [r4, #24]
 8086f20:	f000 fb39 	bl	8087596 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
 8086f24:	b120      	cbz	r0, 8086f30 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
 8086f26:	88a3      	ldrh	r3, [r4, #4]
 8086f28:	f003 030f 	and.w	r3, r3, #15
 8086f2c:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
 8086f30:	bd10      	pop	{r4, pc}

08086f32 <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 8086f32:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
 8086f34:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 8086f36:	4605      	mov	r5, r0
 8086f38:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
 8086f3a:	b984      	cbnz	r4, 8086f5e <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
 8086f3c:	2224      	movs	r2, #36	; 0x24
 8086f3e:	4621      	mov	r1, r4
 8086f40:	f005 f8bc 	bl	808c0bc <memset>

  m_vol = vol;
 8086f44:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
 8086f46:	79f3      	ldrb	r3, [r6, #7]
 8086f48:	2b10      	cmp	r3, #16
 8086f4a:	d003      	beq.n	8086f54 <_ZN7FatFile8openRootEP9FatVolume+0x22>
 8086f4c:	2b20      	cmp	r3, #32
 8086f4e:	d106      	bne.n	8086f5e <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
 8086f50:	2340      	movs	r3, #64	; 0x40
 8086f52:	e000      	b.n	8086f56 <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
 8086f54:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = O_READ;
 8086f56:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
 8086f58:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = O_READ;
 8086f5a:	70a8      	strb	r0, [r5, #2]
 8086f5c:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
 8086f5e:	2000      	movs	r0, #0
 8086f60:	bd70      	pop	{r4, r5, r6, pc}

08086f62 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
 8086f62:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8086f66:	7803      	ldrb	r3, [r0, #0]
 8086f68:	4604      	mov	r4, r0
 8086f6a:	4689      	mov	r9, r1
 8086f6c:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & O_READ)) {
 8086f6e:	b14b      	cbz	r3, 8086f84 <_ZN7FatFile4readEPvj+0x22>
 8086f70:	7882      	ldrb	r2, [r0, #2]
 8086f72:	07d1      	lsls	r1, r2, #31
 8086f74:	d506      	bpl.n	8086f84 <_ZN7FatFile4readEPvj+0x22>
 8086f76:	e00c      	b.n	8086f92 <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8086f78:	465a      	mov	r2, fp
 8086f7a:	6921      	ldr	r1, [r4, #16]
 8086f7c:	f000 fb35 	bl	80875ea <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
 8086f80:	2800      	cmp	r0, #0
 8086f82:	da3d      	bge.n	8087000 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 8086f84:	7863      	ldrb	r3, [r4, #1]
  return -1;
 8086f86:	f04f 30ff 	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 8086f8a:	f043 0302 	orr.w	r3, r3, #2
 8086f8e:	7063      	strb	r3, [r4, #1]
  return -1;
 8086f90:	e098      	b.n	80870c4 <_ZN7FatFile4readEPvj+0x162>
  if (!isOpen() || !(m_flags & O_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
 8086f92:	071a      	lsls	r2, r3, #28
 8086f94:	d503      	bpl.n	8086f9e <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
 8086f96:	69e3      	ldr	r3, [r4, #28]
 8086f98:	6962      	ldr	r2, [r4, #20]
 8086f9a:	1a9b      	subs	r3, r3, r2
 8086f9c:	e007      	b.n	8086fae <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
 8086f9e:	069a      	lsls	r2, r3, #26
 8086fa0:	d508      	bpl.n	8086fb4 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
 8086fa2:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
 8086fa4:	891a      	ldrh	r2, [r3, #8]
 8086fa6:	6963      	ldr	r3, [r4, #20]
 8086fa8:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
 8086fac:	b29b      	uxth	r3, r3
 8086fae:	429d      	cmp	r5, r3
 8086fb0:	bf28      	it	cs
 8086fb2:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
 8086fb4:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
 8086fb6:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8086fba:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 8086fbe:	2e00      	cmp	r6, #0
 8086fc0:	d035      	beq.n	808702e <_ZN7FatFile4readEPvj+0xcc>
 8086fc2:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 8086fc4:	6963      	ldr	r3, [r4, #20]
    if (isRootFixed()) {
 8086fc6:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 8086fca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8086fce:	68a0      	ldr	r0, [r4, #8]
 8086fd0:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
 8086fd4:	d002      	beq.n	8086fdc <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
 8086fd6:	6a03      	ldr	r3, [r0, #32]
 8086fd8:	4419      	add	r1, r3
 8086fda:	e01d      	b.n	8087018 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 8086fdc:	f890 8005 	ldrb.w	r8, [r0, #5]
 8086fe0:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
 8086fe4:	f1ba 0f00 	cmp.w	sl, #0
 8086fe8:	d110      	bne.n	808700c <_ZN7FatFile4readEPvj+0xaa>
 8086fea:	f1b8 0f00 	cmp.w	r8, #0
 8086fee:	d10d      	bne.n	808700c <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
 8086ff0:	2b00      	cmp	r3, #0
 8086ff2:	d1c1      	bne.n	8086f78 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 8086ff4:	0653      	lsls	r3, r2, #25
 8086ff6:	bf4c      	ite	mi
 8086ff8:	6a03      	ldrmi	r3, [r0, #32]
 8086ffa:	6a23      	ldrpl	r3, [r4, #32]
 8086ffc:	6123      	str	r3, [r4, #16]
 8086ffe:	e005      	b.n	808700c <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
 8087000:	d104      	bne.n	808700c <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
 8087002:	7823      	ldrb	r3, [r4, #0]
 8087004:	f013 0f70 	tst.w	r3, #112	; 0x70
 8087008:	d111      	bne.n	808702e <_ZN7FatFile4readEPvj+0xcc>
 808700a:	e7bb      	b.n	8086f84 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 808700c:	6921      	ldr	r1, [r4, #16]
 808700e:	68a0      	ldr	r0, [r4, #8]
 8087010:	f000 fae5 	bl	80875de <_ZNK9FatVolume17clusterStartBlockEm>
 8087014:	eb08 0100 	add.w	r1, r8, r0
 8087018:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
 808701a:	f1ba 0f00 	cmp.w	sl, #0
 808701e:	d135      	bne.n	808708c <_ZN7FatFile4readEPvj+0x12a>
 8087020:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8087024:	d332      	bcc.n	808708c <_ZN7FatFile4readEPvj+0x12a>
 8087026:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8087028:	4291      	cmp	r1, r2
 808702a:	d102      	bne.n	8087032 <_ZN7FatFile4readEPvj+0xd0>
 808702c:	e02e      	b.n	808708c <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
 808702e:	1ba8      	subs	r0, r5, r6
 8087030:	e048      	b.n	80870c4 <_ZN7FatFile4readEPvj+0x162>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
 8087032:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8087036:	d31b      	bcc.n	8087070 <_ZN7FatFile4readEPvj+0x10e>
      uint8_t nb = toRead >> 9;
      if (!isRootFixed()) {
 8087038:	7827      	ldrb	r7, [r4, #0]
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      uint8_t nb = toRead >> 9;
 808703a:	f3c6 2347 	ubfx	r3, r6, #9, #8
      if (!isRootFixed()) {
 808703e:	06bf      	lsls	r7, r7, #26
 8087040:	d406      	bmi.n	8087050 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
 8087042:	7907      	ldrb	r7, [r0, #4]
 8087044:	ebc8 0707 	rsb	r7, r8, r7
 8087048:	b2ff      	uxtb	r7, r7
 808704a:	42bb      	cmp	r3, r7
 808704c:	bf28      	it	cs
 808704e:	463b      	movcs	r3, r7
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8087050:	4291      	cmp	r1, r2
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
 8087052:	ea4f 2743 	mov.w	r7, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8087056:	d207      	bcs.n	8087068 <_ZN7FatFile4readEPvj+0x106>
        if (!m_vol->cacheSync()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
 8087058:	68a0      	ldr	r0, [r4, #8]
 808705a:	6802      	ldr	r2, [r0, #0]
 808705c:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8087060:	464a      	mov	r2, r9
 8087062:	47d0      	blx	sl
 8087064:	b960      	cbnz	r0, 8087080 <_ZN7FatFile4readEPvj+0x11e>
 8087066:	e78d      	b.n	8086f84 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8087068:	441a      	add	r2, r3
 808706a:	4291      	cmp	r1, r2
 808706c:	d321      	bcc.n	80870b2 <_ZN7FatFile4readEPvj+0x150>
 808706e:	e7f3      	b.n	8087058 <_ZN7FatFile4readEPvj+0xf6>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
 8087070:	6803      	ldr	r3, [r0, #0]
 8087072:	464a      	mov	r2, r9
 8087074:	681b      	ldr	r3, [r3, #0]
 8087076:	4798      	blx	r3
 8087078:	2800      	cmp	r0, #0
 808707a:	d083      	beq.n	8086f84 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
 808707c:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
 8087080:	6963      	ldr	r3, [r4, #20]
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
 8087082:	44b9      	add	r9, r7
    m_curPosition += n;
 8087084:	443b      	add	r3, r7
 8087086:	6163      	str	r3, [r4, #20]
    toRead -= n;
 8087088:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 808708a:	e798      	b.n	8086fbe <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 808708c:	2200      	movs	r2, #0
 808708e:	3028      	adds	r0, #40	; 0x28
 8087090:	f000 fa81 	bl	8087596 <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
 8087094:	2800      	cmp	r0, #0
 8087096:	f43f af75 	beq.w	8086f84 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
 808709a:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
 808709e:	42b7      	cmp	r7, r6
 80870a0:	bf28      	it	cs
 80870a2:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
 80870a4:	eb00 010a 	add.w	r1, r0, sl
 80870a8:	463a      	mov	r2, r7
 80870aa:	4648      	mov	r0, r9
 80870ac:	f004 fffb 	bl	808c0a6 <memcpy>
 80870b0:	e7e6      	b.n	8087080 <_ZN7FatFile4readEPvj+0x11e>
 80870b2:	e88d 000a 	stmia.w	sp, {r1, r3}
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSync()) {
 80870b6:	f7ff f8c3 	bl	8086240 <_ZN9FatVolume9cacheSyncEv>
 80870ba:	e89d 000a 	ldmia.w	sp, {r1, r3}
 80870be:	2800      	cmp	r0, #0
 80870c0:	d1ca      	bne.n	8087058 <_ZN7FatFile4readEPvj+0xf6>
 80870c2:	e75f      	b.n	8086f84 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
 80870c4:	b003      	add	sp, #12
 80870c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080870ca <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
 80870ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 80870cc:	2201      	movs	r2, #1
 80870ce:	f10d 0107 	add.w	r1, sp, #7
 80870d2:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
 80870d4:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
 80870d6:	6905      	ldr	r5, [r0, #16]
 80870d8:	f7ff ff43 	bl	8086f62 <_ZN7FatFile4readEPvj>
 80870dc:	2801      	cmp	r0, #1
 80870de:	bf09      	itett	eq
 80870e0:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
 80870e4:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
 80870e8:	6166      	streq	r6, [r4, #20]
  m_curCluster = pos->cluster;
 80870ea:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
 80870ec:	b002      	add	sp, #8
 80870ee:	bd70      	pop	{r4, r5, r6, pc}

080870f0 <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
 80870f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
 80870f2:	6943      	ldr	r3, [r0, #20]
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
 80870f4:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
 80870f6:	f3c3 1543 	ubfx	r5, r3, #5, #4

  if (i == 0 || !skipReadOk) {
 80870fa:	b105      	cbz	r5, 80870fe <_ZN7FatFile12readDirCacheEb+0xe>
 80870fc:	b969      	cbnz	r1, 808711a <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
 80870fe:	2201      	movs	r2, #1
 8087100:	f10d 0107 	add.w	r1, sp, #7
 8087104:	4620      	mov	r0, r4
 8087106:	f7ff ff2c 	bl	8086f62 <_ZN7FatFile4readEPvj>
 808710a:	b240      	sxtb	r0, r0
    if  (n != 1) {
 808710c:	2801      	cmp	r0, #1
 808710e:	d001      	beq.n	8087114 <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
 8087110:	2000      	movs	r0, #0
 8087112:	e008      	b.n	8087126 <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
 8087114:	6963      	ldr	r3, [r4, #20]
 8087116:	331f      	adds	r3, #31
 8087118:	e000      	b.n	808711c <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
 808711a:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
 808711c:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
 808711e:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
 8087120:	3034      	adds	r0, #52	; 0x34
 8087122:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
 8087126:	b003      	add	sp, #12
 8087128:	bd30      	pop	{r4, r5, pc}

0808712a <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
 808712a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808712e:	460e      	mov	r6, r1
 8087130:	7801      	ldrb	r1, [r0, #0]
 8087132:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
 8087134:	6907      	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
 8087136:	2900      	cmp	r1, #0
 8087138:	d039      	beq.n	80871ae <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
 808713a:	6945      	ldr	r5, [r0, #20]
 808713c:	42b5      	cmp	r5, r6
 808713e:	d03a      	beq.n	80871b6 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
 8087140:	b90e      	cbnz	r6, 8087146 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
 8087142:	6106      	str	r6, [r0, #16]
    goto done;
 8087144:	e031      	b.n	80871aa <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
 8087146:	070b      	lsls	r3, r1, #28
 8087148:	d503      	bpl.n	8087152 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
 808714a:	69c3      	ldr	r3, [r0, #28]
 808714c:	429e      	cmp	r6, r3
 808714e:	d82e      	bhi.n	80871ae <_ZN7FatFile7seekSetEm+0x84>
 8087150:	e007      	b.n	8087162 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
 8087152:	0688      	lsls	r0, r1, #26
 8087154:	d505      	bpl.n	8087162 <_ZN7FatFile7seekSetEm+0x38>
 8087156:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
 8087158:	891b      	ldrh	r3, [r3, #8]
 808715a:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
 808715e:	d826      	bhi.n	80871ae <_ZN7FatFile7seekSetEm+0x84>
 8087160:	e023      	b.n	80871aa <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 8087162:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8087166:	1e6a      	subs	r2, r5, #1
 8087168:	f89e 3006 	ldrb.w	r3, [lr, #6]
 808716c:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 8087170:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 8087172:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 8087174:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
 8087176:	429a      	cmp	r2, r3
 8087178:	d800      	bhi.n	808717c <_ZN7FatFile7seekSetEm+0x52>
 808717a:	b94d      	cbnz	r5, 8087190 <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 808717c:	064a      	lsls	r2, r1, #25
 808717e:	bf4c      	ite	mi
 8087180:	f8de 2020 	ldrmi.w	r2, [lr, #32]
 8087184:	6a22      	ldrpl	r2, [r4, #32]
 8087186:	6122      	str	r2, [r4, #16]
 8087188:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 808718a:	f104 0810 	add.w	r8, r4, #16
 808718e:	e00a      	b.n	80871a6 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
 8087190:	1a9b      	subs	r3, r3, r2
 8087192:	e7f9      	b.n	8087188 <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 8087194:	4642      	mov	r2, r8
 8087196:	6921      	ldr	r1, [r4, #16]
 8087198:	68a0      	ldr	r0, [r4, #8]
 808719a:	f000 fa26 	bl	80875ea <_ZN9FatVolume6fatGetEmPm>
 808719e:	2800      	cmp	r0, #0
 80871a0:	f105 35ff 	add.w	r5, r5, #4294967295
 80871a4:	dd03      	ble.n	80871ae <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
 80871a6:	2d00      	cmp	r5, #0
 80871a8:	d1f4      	bne.n	8087194 <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
 80871aa:	6166      	str	r6, [r4, #20]
 80871ac:	e003      	b.n	80871b6 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
 80871ae:	6127      	str	r7, [r4, #16]
  return false;
 80871b0:	2000      	movs	r0, #0
 80871b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
 80871b6:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
 80871b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080871bc <_ZN7FatFile15openCachedEntryEPS_thh>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              uint8_t oflag, uint8_t lfnOrd) {
 80871bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80871be:	460f      	mov	r7, r1
 80871c0:	4604      	mov	r4, r0
 80871c2:	4616      	mov	r6, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
 80871c4:	2100      	movs	r1, #0
 80871c6:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              uint8_t oflag, uint8_t lfnOrd) {
 80871c8:	461d      	mov	r5, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
 80871ca:	f004 ff77 	bl	808c0bc <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
 80871ce:	68b8      	ldr	r0, [r7, #8]
  m_dirIndex = dirIndex;
 80871d0:	80a6      	strh	r6, [r4, #4]
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              uint8_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
 80871d2:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
 80871d4:	6a3b      	ldr	r3, [r7, #32]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 80871d6:	f006 020f 	and.w	r2, r6, #15
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
 80871da:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 80871dc:	0152      	lsls	r2, r2, #5
 80871de:	f100 0334 	add.w	r3, r0, #52	; 0x34
 80871e2:	4413      	add	r3, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
 80871e4:	7ad9      	ldrb	r1, [r3, #11]
 80871e6:	070f      	lsls	r7, r1, #28
 80871e8:	d502      	bpl.n	80871f0 <_ZN7FatFile15openCachedEntryEPS_thh+0x34>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
 80871ea:	2000      	movs	r0, #0
 80871ec:	7020      	strb	r0, [r4, #0]
  return false;
 80871ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
 80871f0:	1881      	adds	r1, r0, r2
 80871f2:	f891 103f 	ldrb.w	r1, [r1, #63]	; 0x3f
 80871f6:	f001 0117 	and.w	r1, r1, #23
 80871fa:	7021      	strb	r1, [r4, #0]
  if (DIR_IS_FILE(dir)) {
 80871fc:	7adb      	ldrb	r3, [r3, #11]
 80871fe:	f013 0f18 	tst.w	r3, #24
    m_attr |= FILE_ATTR_FILE;
 8087202:	bf08      	it	eq
 8087204:	f041 0108 	orreq.w	r1, r1, #8
  }
  m_lfnOrd = lfnOrd;
 8087208:	f89d 3018 	ldrb.w	r3, [sp, #24]
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
  if (DIR_IS_FILE(dir)) {
    m_attr |= FILE_ATTR_FILE;
 808720c:	bf08      	it	eq
 808720e:	7021      	strbeq	r1, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
  // Write, truncate, or at end is an error for a directory or read-only file.
  if (oflag & (O_WRITE | O_TRUNC | O_AT_END)) {
 8087210:	f015 0f32 	tst.w	r5, #50	; 0x32
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
  if (DIR_IS_FILE(dir)) {
    m_attr |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
 8087214:	70e3      	strb	r3, [r4, #3]
  // Write, truncate, or at end is an error for a directory or read-only file.
  if (oflag & (O_WRITE | O_TRUNC | O_AT_END)) {
 8087216:	d003      	beq.n	8087220 <_ZN7FatFile15openCachedEntryEPS_thh+0x64>
    if (isSubDir() || isReadOnly()) {
 8087218:	7823      	ldrb	r3, [r4, #0]
 808721a:	f013 0f11 	tst.w	r3, #17
 808721e:	d1e4      	bne.n	80871ea <_ZN7FatFile15openCachedEntryEPS_thh+0x2e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // save open flags for read/write
  m_flags = oflag & F_OFLAG;
 8087220:	f005 030f 	and.w	r3, r5, #15
 8087224:	70a3      	strb	r3, [r4, #2]
 8087226:	6b03      	ldr	r3, [r0, #48]	; 0x30

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 8087228:	4402      	add	r2, r0
    }
  }
  // save open flags for read/write
  m_flags = oflag & F_OFLAG;

  m_dirBlock = m_vol->cacheBlockNumber();
 808722a:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
 808722c:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
 8087230:	f8b2 104e 	ldrh.w	r1, [r2, #78]	; 0x4e

  if (oflag & O_TRUNC) {
 8087234:	06ee      	lsls	r6, r5, #27

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
 8087236:	ea41 4103 	orr.w	r1, r1, r3, lsl #16

  if (oflag & O_TRUNC) {
 808723a:	d504      	bpl.n	8087246 <_ZN7FatFile15openCachedEntryEPS_thh+0x8a>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 808723c:	b171      	cbz	r1, 808725c <_ZN7FatFile15openCachedEntryEPS_thh+0xa0>
 808723e:	f000 fa68 	bl	8087712 <_ZN9FatVolume9freeChainEm>
 8087242:	b958      	cbnz	r0, 808725c <_ZN7FatFile15openCachedEntryEPS_thh+0xa0>
 8087244:	e7d1      	b.n	80871ea <_ZN7FatFile15openCachedEntryEPS_thh+0x2e>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
 8087246:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
 8087248:	6d13      	ldr	r3, [r2, #80]	; 0x50
 808724a:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 808724c:	06ab      	lsls	r3, r5, #26
 808724e:	d50a      	bpl.n	8087266 <_ZN7FatFile15openCachedEntryEPS_thh+0xaa>
 8087250:	69e1      	ldr	r1, [r4, #28]
 8087252:	4620      	mov	r0, r4
 8087254:	f7ff ff69 	bl	808712a <_ZN7FatFile7seekSetEm>
 8087258:	b928      	cbnz	r0, 8087266 <_ZN7FatFile15openCachedEntryEPS_thh+0xaa>
 808725a:	e7c6      	b.n	80871ea <_ZN7FatFile15openCachedEntryEPS_thh+0x2e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
 808725c:	78a3      	ldrb	r3, [r4, #2]
 808725e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8087262:	70a3      	strb	r3, [r4, #2]
 8087264:	e7f2      	b.n	808724c <_ZN7FatFile15openCachedEntryEPS_thh+0x90>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
 8087266:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
 8087268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0808726c <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 808726c:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
 808726e:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 8087270:	4604      	mov	r4, r0
  if (!isOpen()) {
 8087272:	b90b      	cbnz	r3, 8087278 <_ZN7FatFile4syncEv+0xc>
    return true;
 8087274:	2001      	movs	r0, #1
 8087276:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (m_flags & F_FILE_DIR_DIRTY) {
 8087278:	f990 3002 	ldrsb.w	r3, [r0, #2]
 808727c:	2b00      	cmp	r3, #0
 808727e:	da23      	bge.n	80872c8 <_ZN7FatFile4syncEv+0x5c>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
 8087280:	2101      	movs	r1, #1
 8087282:	f7ff fe47 	bl	8086f14 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 8087286:	4605      	mov	r5, r0
 8087288:	b928      	cbnz	r0, 8087296 <_ZN7FatFile4syncEv+0x2a>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 808728a:	7863      	ldrb	r3, [r4, #1]
  return false;
 808728c:	2000      	movs	r0, #0
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 808728e:	f043 0301 	orr.w	r3, r3, #1
 8087292:	7063      	strb	r3, [r4, #1]
 8087294:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 8087296:	7803      	ldrb	r3, [r0, #0]
 8087298:	2be5      	cmp	r3, #229	; 0xe5
 808729a:	d0f6      	beq.n	808728a <_ZN7FatFile4syncEv+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
 808729c:	7823      	ldrb	r3, [r4, #0]
 808729e:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
 80872a0:	bf44      	itt	mi
 80872a2:	69e3      	ldrmi	r3, [r4, #28]
 80872a4:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
 80872a6:	8c23      	ldrh	r3, [r4, #32]
 80872a8:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
 80872aa:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80872ac:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
 80872ae:	4b09      	ldr	r3, [pc, #36]	; (80872d4 <_ZN7FatFile4syncEv+0x68>)
 80872b0:	681b      	ldr	r3, [r3, #0]
 80872b2:	b12b      	cbz	r3, 80872c0 <_ZN7FatFile4syncEv+0x54>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
 80872b4:	f100 0116 	add.w	r1, r0, #22
 80872b8:	3018      	adds	r0, #24
 80872ba:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
 80872bc:	8b2b      	ldrh	r3, [r5, #24]
 80872be:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
 80872c0:	78a3      	ldrb	r3, [r4, #2]
 80872c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80872c6:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
 80872c8:	68a0      	ldr	r0, [r4, #8]
 80872ca:	f7fe ffb9 	bl	8086240 <_ZN9FatVolume9cacheSyncEv>
 80872ce:	2800      	cmp	r0, #0
 80872d0:	d0db      	beq.n	808728a <_ZN7FatFile4syncEv+0x1e>
 80872d2:	e7cf      	b.n	8087274 <_ZN7FatFile4syncEv+0x8>
 80872d4:	20000b90 	.word	0x20000b90

080872d8 <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
 80872d8:	b510      	push	{r4, lr}
 80872da:	4604      	mov	r4, r0
  bool rtn = sync();
 80872dc:	f7ff ffc6 	bl	808726c <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
 80872e0:	2300      	movs	r3, #0
 80872e2:	7023      	strb	r3, [r4, #0]
  return rtn;
}
 80872e4:	bd10      	pop	{r4, pc}

080872e6 <_ZN7FatFile4openEPS_PKch>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, uint8_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
 80872e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80872e8:	461f      	mov	r7, r3
 80872ea:	b093      	sub	sp, #76	; 0x4c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 80872ec:	2300      	movs	r3, #0
 80872ee:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80872f2:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 80872f6:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, uint8_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
 80872f8:	4606      	mov	r6, r0
 80872fa:	460c      	mov	r4, r1
 80872fc:	9201      	str	r2, [sp, #4]
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 80872fe:	b10b      	cbz	r3, 8087304 <_ZN7FatFile4openEPS_PKch+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
 8087300:	2000      	movs	r0, #0
 8087302:	e03d      	b.n	8087380 <_ZN7FatFile4openEPS_PKch+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 8087304:	780b      	ldrb	r3, [r1, #0]
 8087306:	f013 0f70 	tst.w	r3, #112	; 0x70
 808730a:	d0f9      	beq.n	8087300 <_ZN7FatFile4openEPS_PKch+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
 808730c:	7813      	ldrb	r3, [r2, #0]
 808730e:	2b2f      	cmp	r3, #47	; 0x2f
 8087310:	d112      	bne.n	8087338 <_ZN7FatFile4openEPS_PKch+0x52>
    while (isDirSeparator(*path)) {
 8087312:	9b01      	ldr	r3, [sp, #4]
 8087314:	781a      	ldrb	r2, [r3, #0]
 8087316:	2a2f      	cmp	r2, #47	; 0x2f
 8087318:	d102      	bne.n	8087320 <_ZN7FatFile4openEPS_PKch+0x3a>
      path++;
 808731a:	3301      	adds	r3, #1
 808731c:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
 808731e:	e7f8      	b.n	8087312 <_ZN7FatFile4openEPS_PKch+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
 8087320:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
 8087322:	b91a      	cbnz	r2, 808732c <_ZN7FatFile4openEPS_PKch+0x46>
      return openRoot(dirFile->m_vol);
 8087324:	4630      	mov	r0, r6
 8087326:	f7ff fe04 	bl	8086f32 <_ZN7FatFile8openRootEP9FatVolume>
 808732a:	e029      	b.n	8087380 <_ZN7FatFile4openEPS_PKch+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
 808732c:	a809      	add	r0, sp, #36	; 0x24
 808732e:	f7ff fe00 	bl	8086f32 <_ZN7FatFile8openRootEP9FatVolume>
 8087332:	2800      	cmp	r0, #0
 8087334:	d0e4      	beq.n	8087300 <_ZN7FatFile4openEPS_PKch+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
 8087336:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
 8087338:	aa01      	add	r2, sp, #4
 808733a:	a903      	add	r1, sp, #12
 808733c:	9801      	ldr	r0, [sp, #4]
 808733e:	f7fe ff9b 	bl	8086278 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
 8087342:	2800      	cmp	r0, #0
 8087344:	d0dc      	beq.n	8087300 <_ZN7FatFile4openEPS_PKch+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
 8087346:	9b01      	ldr	r3, [sp, #4]
 8087348:	781b      	ldrb	r3, [r3, #0]
 808734a:	b19b      	cbz	r3, 8087374 <_ZN7FatFile4openEPS_PKch+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_READ)) {
 808734c:	2301      	movs	r3, #1
 808734e:	aa03      	add	r2, sp, #12
 8087350:	4621      	mov	r1, r4
 8087352:	4630      	mov	r0, r6
 8087354:	f7ff f8d2 	bl	80864fc <_ZN7FatFile4openEPS_P7fname_th>
 8087358:	2800      	cmp	r0, #0
 808735a:	d0d1      	beq.n	8087300 <_ZN7FatFile4openEPS_PKch+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
 808735c:	4635      	mov	r5, r6
 808735e:	ac09      	add	r4, sp, #36	; 0x24
 8087360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8087362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8087364:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8087366:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8087368:	682b      	ldr	r3, [r5, #0]
    dirFile = &tmpDir;
    close();
 808736a:	4630      	mov	r0, r6
    }
    if (!open(dirFile, &fname, O_READ)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
 808736c:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
 808736e:	f7ff ffb3 	bl	80872d8 <_ZN7FatFile5closeEv>
 8087372:	e7e0      	b.n	8087336 <_ZN7FatFile4openEPS_PKch+0x50>
  }
  return open(dirFile, &fname, oflag);
 8087374:	463b      	mov	r3, r7
 8087376:	aa03      	add	r2, sp, #12
 8087378:	4621      	mov	r1, r4
 808737a:	4630      	mov	r0, r6
 808737c:	f7ff f8be 	bl	80864fc <_ZN7FatFile4openEPS_P7fname_th>

fail:
  return false;
}
 8087380:	b013      	add	sp, #76	; 0x4c
 8087382:	bdf0      	pop	{r4, r5, r6, r7, pc}

08087384 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 8087384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 8087388:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 808738a:	4604      	mov	r4, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 808738c:	071d      	lsls	r5, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 808738e:	4689      	mov	r9, r1
 8087390:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 8087392:	d508      	bpl.n	80873a6 <_ZN7FatFile5writeEPKvj+0x22>
 8087394:	7883      	ldrb	r3, [r0, #2]
 8087396:	0799      	lsls	r1, r3, #30
 8087398:	d505      	bpl.n	80873a6 <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & O_APPEND)) {
 808739a:	075b      	lsls	r3, r3, #29
 808739c:	d50b      	bpl.n	80873b6 <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
 808739e:	69e1      	ldr	r1, [r4, #28]
 80873a0:	f7ff fec3 	bl	808712a <_ZN7FatFile7seekSetEm>
 80873a4:	b938      	cbnz	r0, 80873b6 <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 80873a6:	7863      	ldrb	r3, [r4, #1]
  return -1;
 80873a8:	f04f 30ff 	mov.w	r0, #4294967295
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 80873ac:	f043 0301 	orr.w	r3, r3, #1
 80873b0:	7063      	strb	r3, [r4, #1]
  return -1;
 80873b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
 80873b6:	6963      	ldr	r3, [r4, #20]
 80873b8:	43db      	mvns	r3, r3
 80873ba:	4598      	cmp	r8, r3
 80873bc:	d8f3      	bhi.n	80873a6 <_ZN7FatFile5writeEPKvj+0x22>
 80873be:	4647      	mov	r7, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 80873c0:	f04f 0a00 	mov.w	sl, #0
 80873c4:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 80873c6:	2f00      	cmp	r7, #0
 80873c8:	f000 8082 	beq.w	80874d0 <_ZN7FatFile5writeEPKvj+0x14c>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
 80873cc:	68a0      	ldr	r0, [r4, #8]
    uint16_t blockOffset = m_curPosition & 0X1FF;
 80873ce:	f3c3 0608 	ubfx	r6, r3, #0, #9
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 80873d2:	7945      	ldrb	r5, [r0, #5]
    if (blockOfCluster == 0 && blockOffset == 0) {
 80873d4:	ea15 2553 	ands.w	r5, r5, r3, lsr #9
 80873d8:	d11c      	bne.n	8087414 <_ZN7FatFile5writeEPKvj+0x90>
 80873da:	b9de      	cbnz	r6, 8087414 <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
 80873dc:	6921      	ldr	r1, [r4, #16]
 80873de:	b171      	cbz	r1, 80873fe <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 80873e0:	f104 0210 	add.w	r2, r4, #16
 80873e4:	f000 f901 	bl	80875ea <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
 80873e8:	2800      	cmp	r0, #0
 80873ea:	dbdc      	blt.n	80873a6 <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
 80873ec:	f040 808e 	bne.w	808750c <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
 80873f0:	4620      	mov	r0, r4
 80873f2:	f7ff fd45 	bl	8086e80 <_ZN7FatFile10addClusterEv>
 80873f6:	2800      	cmp	r0, #0
 80873f8:	f040 8088 	bne.w	808750c <_ZN7FatFile5writeEPKvj+0x188>
 80873fc:	e7d3      	b.n	80873a6 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
 80873fe:	6a23      	ldr	r3, [r4, #32]
 8087400:	b93b      	cbnz	r3, 8087412 <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
 8087402:	4620      	mov	r0, r4
 8087404:	f7ff fd3c 	bl	8086e80 <_ZN7FatFile10addClusterEv>
 8087408:	2800      	cmp	r0, #0
 808740a:	d0cc      	beq.n	80873a6 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
 808740c:	6923      	ldr	r3, [r4, #16]
 808740e:	6223      	str	r3, [r4, #32]
 8087410:	e000      	b.n	8087414 <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
 8087412:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 8087414:	6921      	ldr	r1, [r4, #16]
 8087416:	68a0      	ldr	r0, [r4, #8]
 8087418:	f000 f8e1 	bl	80875de <_ZNK9FatVolume17clusterStartBlockEm>
 808741c:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
 808741e:	b916      	cbnz	r6, 8087426 <_ZN7FatFile5writeEPKvj+0xa2>
 8087420:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 8087424:	d221      	bcs.n	808746a <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
 8087426:	f5c6 7500 	rsb	r5, r6, #512	; 0x200
 808742a:	42bd      	cmp	r5, r7
 808742c:	bf28      	it	cs
 808742e:	463d      	movcs	r5, r7
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
 8087430:	b936      	cbnz	r6, 8087440 <_ZN7FatFile5writeEPKvj+0xbc>
 8087432:	6963      	ldr	r3, [r4, #20]
 8087434:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
 8087436:	4293      	cmp	r3, r2
 8087438:	bf34      	ite	cc
 808743a:	2201      	movcc	r2, #1
 808743c:	2205      	movcs	r2, #5
 808743e:	e000      	b.n	8087442 <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
 8087440:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8087442:	68a0      	ldr	r0, [r4, #8]
 8087444:	3028      	adds	r0, #40	; 0x28
 8087446:	f000 f8a6 	bl	8087596 <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
 808744a:	2800      	cmp	r0, #0
 808744c:	d0ab      	beq.n	80873a6 <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 808744e:	4430      	add	r0, r6
 8087450:	462a      	mov	r2, r5
 8087452:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
 8087454:	442e      	add	r6, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 8087456:	f004 fe26 	bl	808c0a6 <memcpy>
      if (512 == (n + blockOffset)) {
 808745a:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 808745e:	d131      	bne.n	80874c4 <_ZN7FatFile5writeEPKvj+0x140>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
 8087460:	68a0      	ldr	r0, [r4, #8]
 8087462:	3028      	adds	r0, #40	; 0x28
 8087464:	f000 f870 	bl	8087548 <_ZN8FatCache4syncEv>
 8087468:	e018      	b.n	808749c <_ZN7FatFile5writeEPKvj+0x118>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
 808746a:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 808746e:	68a2      	ldr	r2, [r4, #8]
 8087470:	d316      	bcc.n	80874a0 <_ZN7FatFile5writeEPKvj+0x11c>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
 8087472:	7913      	ldrb	r3, [r2, #4]
 8087474:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8087476:	1b5d      	subs	r5, r3, r5
 8087478:	b2ed      	uxtb	r5, r5
      uint8_t nBlock = nToWrite >> 9;
 808747a:	f3c7 2347 	ubfx	r3, r7, #9, #8
 808747e:	42ab      	cmp	r3, r5
 8087480:	bf28      	it	cs
 8087482:	462b      	movcs	r3, r5
      if (nBlock > maxBlocks) {
        nBlock = maxBlocks;
      }
      n = 512*nBlock;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
 8087484:	4281      	cmp	r1, r0
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      uint8_t nBlock = nToWrite >> 9;
      if (nBlock > maxBlocks) {
        nBlock = maxBlocks;
      }
      n = 512*nBlock;
 8087486:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
 808748a:	d302      	bcc.n	8087492 <_ZN7FatFile5writeEPKvj+0x10e>
 808748c:	4418      	add	r0, r3
 808748e:	4281      	cmp	r1, r0
 8087490:	d336      	bcc.n	8087500 <_ZN7FatFile5writeEPKvj+0x17c>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nBlock)) {
 8087492:	68a0      	ldr	r0, [r4, #8]
 8087494:	6802      	ldr	r2, [r0, #0]
 8087496:	68d6      	ldr	r6, [r2, #12]
 8087498:	464a      	mov	r2, r9
 808749a:	47b0      	blx	r6
 808749c:	b990      	cbnz	r0, 80874c4 <_ZN7FatFile5writeEPKvj+0x140>
 808749e:	e782      	b.n	80873a6 <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
 80874a0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80874a2:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 80874a4:	bf02      	ittt	eq
 80874a6:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 80874aa:	f882 a028 	strbeq.w	sl, [r2, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 80874ae:	6313      	streq	r3, [r2, #48]	; 0x30
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
 80874b0:	68a0      	ldr	r0, [r4, #8]
 80874b2:	464a      	mov	r2, r9
 80874b4:	6803      	ldr	r3, [r0, #0]
 80874b6:	685b      	ldr	r3, [r3, #4]
 80874b8:	4798      	blx	r3
 80874ba:	2800      	cmp	r0, #0
 80874bc:	f43f af73 	beq.w	80873a6 <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
 80874c0:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 80874c4:	6963      	ldr	r3, [r4, #20]
    src += n;
 80874c6:	44a9      	add	r9, r5
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 80874c8:	442b      	add	r3, r5
 80874ca:	6163      	str	r3, [r4, #20]
    src += n;
    nToWrite -= n;
 80874cc:	1b7f      	subs	r7, r7, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 80874ce:	e779      	b.n	80873c4 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
 80874d0:	69e2      	ldr	r2, [r4, #28]
 80874d2:	4293      	cmp	r3, r2
 80874d4:	78a2      	ldrb	r2, [r4, #2]
 80874d6:	d901      	bls.n	80874dc <_ZN7FatFile5writeEPKvj+0x158>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
 80874d8:	61e3      	str	r3, [r4, #28]
 80874da:	e002      	b.n	80874e2 <_ZN7FatFile5writeEPKvj+0x15e>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
 80874dc:	4b0e      	ldr	r3, [pc, #56]	; (8087518 <_ZN7FatFile5writeEPKvj+0x194>)
 80874de:	681b      	ldr	r3, [r3, #0]
 80874e0:	b113      	cbz	r3, 80874e8 <_ZN7FatFile5writeEPKvj+0x164>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
 80874e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80874e6:	70a2      	strb	r2, [r4, #2]
  }

  if (m_flags & O_SYNC) {
 80874e8:	78a3      	ldrb	r3, [r4, #2]
 80874ea:	071a      	lsls	r2, r3, #28
 80874ec:	d402      	bmi.n	80874f4 <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
 80874ee:	4640      	mov	r0, r8
 80874f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & O_SYNC) {
    if (!sync()) {
 80874f4:	4620      	mov	r0, r4
 80874f6:	f7ff feb9 	bl	808726c <_ZN7FatFile4syncEv>
 80874fa:	2800      	cmp	r0, #0
 80874fc:	d1f7      	bne.n	80874ee <_ZN7FatFile5writeEPKvj+0x16a>
 80874fe:	e752      	b.n	80873a6 <_ZN7FatFile5writeEPKvj+0x22>
 8087500:	f04f 30ff 	mov.w	r0, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8087504:	f882 a028 	strb.w	sl, [r2, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 8087508:	6310      	str	r0, [r2, #48]	; 0x30
 808750a:	e7c2      	b.n	8087492 <_ZN7FatFile5writeEPKvj+0x10e>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 808750c:	6921      	ldr	r1, [r4, #16]
 808750e:	68a0      	ldr	r0, [r4, #8]
 8087510:	f000 f865 	bl	80875de <_ZNK9FatVolume17clusterStartBlockEm>
 8087514:	4601      	mov	r1, r0
 8087516:	e783      	b.n	8087420 <_ZN7FatFile5writeEPKvj+0x9c>
 8087518:	20000b90 	.word	0x20000b90

0808751c <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
 808751c:	f000 bd6c 	b.w	8087ff8 <HAL_Pin_Map>

08087520 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8087520:	b570      	push	{r4, r5, r6, lr}
 8087522:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8087524:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 8087526:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 8087528:	b149      	cbz	r1, 808753e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 808752a:	f005 fb47 	bl	808cbbc <strlen>
 808752e:	682b      	ldr	r3, [r5, #0]
 8087530:	4602      	mov	r2, r0
 8087532:	4621      	mov	r1, r4
 8087534:	4628      	mov	r0, r5
    }
 8087536:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 808753a:	68db      	ldr	r3, [r3, #12]
 808753c:	4718      	bx	r3
    }
 808753e:	bd70      	pop	{r4, r5, r6, pc}

08087540 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
 8087540:	f000 bd5a 	b.w	8087ff8 <HAL_Pin_Map>

08087544 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
 8087544:	f000 bd58 	b.w	8087ff8 <HAL_Pin_Map>

08087548 <_ZN8FatCache4syncEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 8087548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
 808754a:	7803      	ldrb	r3, [r0, #0]

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 808754c:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
 808754e:	07da      	lsls	r2, r3, #31
 8087550:	d51e      	bpl.n	8087590 <_ZN8FatCache4syncEv+0x48>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
 8087552:	6840      	ldr	r0, [r0, #4]
 8087554:	f104 060c 	add.w	r6, r4, #12
 8087558:	6803      	ldr	r3, [r0, #0]
 808755a:	4632      	mov	r2, r6
 808755c:	685b      	ldr	r3, [r3, #4]
 808755e:	68a1      	ldr	r1, [r4, #8]
 8087560:	4798      	blx	r3
 8087562:	4605      	mov	r5, r0
 8087564:	b908      	cbnz	r0, 808756a <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
 8087566:	2500      	movs	r5, #0
 8087568:	e013      	b.n	8087592 <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
 808756a:	7823      	ldrb	r3, [r4, #0]
 808756c:	079b      	lsls	r3, r3, #30
 808756e:	d404      	bmi.n	808757a <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
 8087570:	7823      	ldrb	r3, [r4, #0]
 8087572:	f023 0301 	bic.w	r3, r3, #1
 8087576:	7023      	strb	r3, [r4, #0]
 8087578:	e00b      	b.n	8087592 <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
 808757a:	6860      	ldr	r0, [r4, #4]
      if (!m_vol->writeBlock(lbn, m_block.data)) {
 808757c:	68a7      	ldr	r7, [r4, #8]
 808757e:	6901      	ldr	r1, [r0, #16]
 8087580:	6803      	ldr	r3, [r0, #0]
 8087582:	4632      	mov	r2, r6
 8087584:	685b      	ldr	r3, [r3, #4]
 8087586:	4439      	add	r1, r7
 8087588:	4798      	blx	r3
 808758a:	2800      	cmp	r0, #0
 808758c:	d1f0      	bne.n	8087570 <_ZN8FatCache4syncEv+0x28>
 808758e:	e7ea      	b.n	8087566 <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
 8087590:	2501      	movs	r5, #1

fail:
  return false;
}
 8087592:	4628      	mov	r0, r5
 8087594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08087596 <_ZN8FatCache4readEmh>:
 * <http://www.gnu.org/licenses/>.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8087596:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
 8087598:	6883      	ldr	r3, [r0, #8]
 * <http://www.gnu.org/licenses/>.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 808759a:	4604      	mov	r4, r0
  if (m_lbn != lbn) {
 808759c:	428b      	cmp	r3, r1
 * <http://www.gnu.org/licenses/>.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 808759e:	460e      	mov	r6, r1
 80875a0:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
 80875a2:	d014      	beq.n	80875ce <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
 80875a4:	f7ff ffd0 	bl	8087548 <_ZN8FatCache4syncEv>
 80875a8:	b908      	cbnz	r0, 80875ae <_ZN8FatCache4readEmh+0x18>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:
  return 0;
 80875aa:	2000      	movs	r0, #0
 80875ac:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
 80875ae:	076b      	lsls	r3, r5, #29
 80875b0:	d503      	bpl.n	80875ba <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
 80875b2:	2300      	movs	r3, #0
 80875b4:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
 80875b6:	60a6      	str	r6, [r4, #8]
 80875b8:	e009      	b.n	80875ce <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
 80875ba:	6860      	ldr	r0, [r4, #4]
 80875bc:	f104 020c 	add.w	r2, r4, #12
 80875c0:	6803      	ldr	r3, [r0, #0]
 80875c2:	4631      	mov	r1, r6
 80875c4:	681b      	ldr	r3, [r3, #0]
 80875c6:	4798      	blx	r3
 80875c8:	2800      	cmp	r0, #0
 80875ca:	d1f2      	bne.n	80875b2 <_ZN8FatCache4readEmh+0x1c>
 80875cc:	e7ed      	b.n	80875aa <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
 80875ce:	4620      	mov	r0, r4
 80875d0:	7823      	ldrb	r3, [r4, #0]
 80875d2:	f005 0503 	and.w	r5, r5, #3
 80875d6:	431d      	orrs	r5, r3
 80875d8:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:
  return 0;
}
 80875dc:	bd70      	pop	{r4, r5, r6, pc}

080875de <_ZNK9FatVolume17clusterStartBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
 80875de:	7983      	ldrb	r3, [r0, #6]
 80875e0:	3902      	subs	r1, #2
 80875e2:	6940      	ldr	r0, [r0, #20]
 80875e4:	4099      	lsls	r1, r3
}
 80875e6:	4408      	add	r0, r1
 80875e8:	4770      	bx	lr

080875ea <_ZN9FatVolume6fatGetEmPm>:
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 80875ea:	b570      	push	{r4, r5, r6, lr}
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 80875ec:	79c3      	ldrb	r3, [r0, #7]
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 80875ee:	4605      	mov	r5, r0
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 80875f0:	2b20      	cmp	r3, #32
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 80875f2:	460c      	mov	r4, r1
 80875f4:	4616      	mov	r6, r2
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 80875f6:	d112      	bne.n	808761e <_ZN9FatVolume6fatGetEmPm+0x34>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
 80875f8:	6981      	ldr	r1, [r0, #24]
 80875fa:	2202      	movs	r2, #2
 80875fc:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8087600:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8087604:	f7ff ffc7 	bl	8087596 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8087608:	b910      	cbnz	r0, 8087610 <_ZN9FatVolume6fatGetEmPm+0x26>
  }
  *value = next;
  return 1;

fail:
  return -1;
 808760a:	f04f 30ff 	mov.w	r0, #4294967295
 808760e:	bd70      	pop	{r4, r5, r6, pc}
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
 8087610:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8087614:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 8087618:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
 808761c:	e00f      	b.n	808763e <_ZN9FatVolume6fatGetEmPm+0x54>
  }

  if (m_fatType == 16) {
 808761e:	2b10      	cmp	r3, #16
 8087620:	d1f3      	bne.n	808760a <_ZN9FatVolume6fatGetEmPm+0x20>
 8087622:	6983      	ldr	r3, [r0, #24]
 8087624:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8087628:	2202      	movs	r2, #2
 808762a:	4419      	add	r1, r3
 808762c:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8087630:	f7ff ffb1 	bl	8087596 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8087634:	2800      	cmp	r0, #0
 8087636:	d0e8      	beq.n	808760a <_ZN9FatVolume6fatGetEmPm+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
 8087638:	b2e4      	uxtb	r4, r4
 808763a:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
 808763e:	69ea      	ldr	r2, [r5, #28]
 8087640:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
 8087642:	bf9a      	itte	ls
 8087644:	6033      	strls	r3, [r6, #0]
  return 1;
 8087646:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
 8087648:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
 808764a:	bd70      	pop	{r4, r5, r6, pc}

0808764c <_ZN9FatVolume6fatPutEmm>:
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 808764c:	b538      	push	{r3, r4, r5, lr}
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 808764e:	79c3      	ldrb	r3, [r0, #7]
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8087650:	460c      	mov	r4, r1
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8087652:	2b20      	cmp	r3, #32
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8087654:	4615      	mov	r5, r2
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8087656:	d10f      	bne.n	8087678 <_ZN9FatVolume6fatPutEmm+0x2c>
 8087658:	6981      	ldr	r1, [r0, #24]
 808765a:	2203      	movs	r2, #3
 808765c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8087660:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8087664:	f7ff ff97 	bl	8087596 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 8087668:	b908      	cbnz	r0, 808766e <_ZN9FatVolume6fatPutEmm+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
 808766a:	2000      	movs	r0, #0
 808766c:	bd38      	pop	{r3, r4, r5, pc}
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
 808766e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8087672:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
 8087676:	e00f      	b.n	8087698 <_ZN9FatVolume6fatPutEmm+0x4c>
    return true;
  }

  if (m_fatType == 16) {
 8087678:	2b10      	cmp	r3, #16
 808767a:	d1f6      	bne.n	808766a <_ZN9FatVolume6fatPutEmm+0x1e>
 808767c:	6983      	ldr	r3, [r0, #24]
 808767e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8087682:	2203      	movs	r2, #3
 8087684:	4419      	add	r1, r3
 8087686:	f500 700d 	add.w	r0, r0, #564	; 0x234
 808768a:	f7ff ff84 	bl	8087596 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 808768e:	2800      	cmp	r0, #0
 8087690:	d0eb      	beq.n	808766a <_ZN9FatVolume6fatPutEmm+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
 8087692:	b2e4      	uxtb	r4, r4
 8087694:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
 8087698:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
 808769a:	bd38      	pop	{r3, r4, r5, pc}

0808769c <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 808769c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80876a0:	4605      	mov	r5, r0
 80876a2:	4690      	mov	r8, r2
  uint32_t find = current ? current : m_allocSearchStart;
 80876a4:	460f      	mov	r7, r1
 80876a6:	b909      	cbnz	r1, 80876ac <_ZN9FatVolume15allocateClusterEmPm+0x10>
 80876a8:	68c6      	ldr	r6, [r0, #12]
 80876aa:	e000      	b.n	80876ae <_ZN9FatVolume15allocateClusterEmPm+0x12>
 80876ac:	460e      	mov	r6, r1
 80876ae:	4634      	mov	r4, r6
  uint32_t start = find;
  while (1) {
    find++;
    // If at end of FAT go to beginning of FAT.
    if (find > m_lastCluster) {
 80876b0:	69eb      	ldr	r3, [r5, #28]
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
  uint32_t find = current ? current : m_allocSearchStart;
  uint32_t start = find;
  while (1) {
    find++;
 80876b2:	3401      	adds	r4, #1
    // If at end of FAT go to beginning of FAT.
    if (find > m_lastCluster) {
      find = 2;
 80876b4:	429c      	cmp	r4, r3
 80876b6:	bf88      	it	hi
 80876b8:	2402      	movhi	r4, #2
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
 80876ba:	aa01      	add	r2, sp, #4
 80876bc:	4621      	mov	r1, r4
 80876be:	4628      	mov	r0, r5
 80876c0:	f7ff ff93 	bl	80875ea <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 80876c4:	2800      	cmp	r0, #0
 80876c6:	db0d      	blt.n	80876e4 <_ZN9FatVolume15allocateClusterEmPm+0x48>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
 80876c8:	d001      	beq.n	80876ce <_ZN9FatVolume15allocateClusterEmPm+0x32>
 80876ca:	9b01      	ldr	r3, [sp, #4]
 80876cc:	b113      	cbz	r3, 80876d4 <_ZN9FatVolume15allocateClusterEmPm+0x38>
      break;
    }
    if (find == start) {
 80876ce:	42b4      	cmp	r4, r6
 80876d0:	d1ee      	bne.n	80876b0 <_ZN9FatVolume15allocateClusterEmPm+0x14>
 80876d2:	e007      	b.n	80876e4 <_ZN9FatVolume15allocateClusterEmPm+0x48>
  }
  uint32_t clusterStartBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
 80876d4:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80876d8:	4621      	mov	r1, r4
 80876da:	4628      	mov	r0, r5
 80876dc:	f7ff ffb6 	bl	808764c <_ZN9FatVolume6fatPutEmm>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // mark end of chain
  if (!fatPutEOC(find)) {
 80876e0:	4606      	mov	r6, r0
 80876e2:	b908      	cbnz	r0, 80876e8 <_ZN9FatVolume15allocateClusterEmPm+0x4c>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
 80876e4:	2600      	movs	r6, #0
 80876e6:	e010      	b.n	808770a <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // mark end of chain
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
 80876e8:	b137      	cbz	r7, 80876f8 <_ZN9FatVolume15allocateClusterEmPm+0x5c>
    // link clusters
    if (!fatPut(current, find)) {
 80876ea:	4622      	mov	r2, r4
 80876ec:	4639      	mov	r1, r7
 80876ee:	4628      	mov	r0, r5
 80876f0:	f7ff ffac 	bl	808764c <_ZN9FatVolume6fatPutEmm>
 80876f4:	b908      	cbnz	r0, 80876fa <_ZN9FatVolume15allocateClusterEmPm+0x5e>
 80876f6:	e7f5      	b.n	80876e4 <_ZN9FatVolume15allocateClusterEmPm+0x48>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // Remember place for search start.
    m_allocSearchStart = find;
 80876f8:	60ec      	str	r4, [r5, #12]
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
 80876fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80876fc:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
 80876fe:	bfa4      	itt	ge
 8087700:	f103 33ff 	addge.w	r3, r3, #4294967295
 8087704:	626b      	strge	r3, [r5, #36]	; 0x24
  }
  updateFreeClusterCount(-1);
  *next = find;
 8087706:	f8c8 4000 	str.w	r4, [r8]
  return true;

fail:
  return false;
}
 808770a:	4630      	mov	r0, r6
 808770c:	b002      	add	sp, #8
 808770e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08087712 <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
 8087712:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8087714:	4604      	mov	r4, r0
 8087716:	460d      	mov	r5, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
 8087718:	aa01      	add	r2, sp, #4
 808771a:	4629      	mov	r1, r5
 808771c:	4620      	mov	r0, r4
 808771e:	f7ff ff64 	bl	80875ea <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 8087722:	1e06      	subs	r6, r0, #0
 8087724:	da01      	bge.n	808772a <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
 8087726:	2000      	movs	r0, #0
 8087728:	e012      	b.n	8087750 <_ZN9FatVolume9freeChainEm+0x3e>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
 808772a:	2200      	movs	r2, #0
 808772c:	4629      	mov	r1, r5
 808772e:	4620      	mov	r0, r4
 8087730:	f7ff ff8c 	bl	808764c <_ZN9FatVolume6fatPutEmm>
 8087734:	2800      	cmp	r0, #0
 8087736:	d0f6      	beq.n	8087726 <_ZN9FatVolume9freeChainEm+0x14>
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
 8087738:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808773a:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
 808773c:	bfa4      	itt	ge
 808773e:	3301      	addge	r3, #1
 8087740:	6263      	strge	r3, [r4, #36]	; 0x24
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster < m_allocSearchStart) {
 8087742:	68e3      	ldr	r3, [r4, #12]
 8087744:	429d      	cmp	r5, r3
      m_allocSearchStart = cluster;
 8087746:	bf38      	it	cc
 8087748:	60e5      	strcc	r5, [r4, #12]
    }
    cluster = next;
 808774a:	9d01      	ldr	r5, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
 808774c:	2e00      	cmp	r6, #0
 808774e:	d1e3      	bne.n	8087718 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
 8087750:	b002      	add	sp, #8
 8087752:	bd70      	pop	{r4, r5, r6, pc}

08087754 <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
 8087754:	b570      	push	{r4, r5, r6, lr}
 8087756:	4604      	mov	r4, r0
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
 8087758:	2301      	movs	r3, #1
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
 808775a:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
 808775c:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 808775e:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
 8087762:	71c2      	strb	r2, [r0, #7]
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE

  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
 8087764:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
 8087766:	62e0      	str	r0, [r4, #44]	; 0x2c
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8087768:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 808776c:	6303      	str	r3, [r0, #48]	; 0x30
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
 808776e:	f8c4 0238 	str.w	r0, [r4, #568]	; 0x238
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8087772:	f880 2234 	strb.w	r2, [r0, #564]	; 0x234
    m_lbn = 0XFFFFFFFF;
 8087776:	f8c0 323c 	str.w	r3, [r0, #572]	; 0x23c
 808777a:	b1a1      	cbz	r1, 80877a6 <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
 808777c:	2904      	cmp	r1, #4
 808777e:	d860      	bhi.n	8087842 <_ZN9FatVolume4initEh+0xee>
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8087780:	4611      	mov	r1, r2
 8087782:	3028      	adds	r0, #40	; 0x28
 8087784:	f7ff ff07 	bl	8087596 <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8087788:	2800      	cmp	r0, #0
 808778a:	d05a      	beq.n	8087842 <_ZN9FatVolume4initEh+0xee>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
 808778c:	eb00 1305 	add.w	r3, r0, r5, lsl #4
 8087790:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 8087794:	065b      	lsls	r3, r3, #25
 8087796:	d154      	bne.n	8087842 <_ZN9FatVolume4initEh+0xee>
 8087798:	351b      	adds	r5, #27
 808779a:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 808779e:	f8d5 5006 	ldr.w	r5, [r5, #6]
 80877a2:	2d00      	cmp	r5, #0
 80877a4:	d04d      	beq.n	8087842 <_ZN9FatVolume4initEh+0xee>
 80877a6:	2200      	movs	r2, #0
 80877a8:	4629      	mov	r1, r5
 80877aa:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80877ae:	f7ff fef2 	bl	8087596 <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
 80877b2:	2800      	cmp	r0, #0
 80877b4:	d045      	beq.n	8087842 <_ZN9FatVolume4initEh+0xee>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
 80877b6:	f8b0 300b 	ldrh.w	r3, [r0, #11]
 80877ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80877be:	d140      	bne.n	8087842 <_ZN9FatVolume4initEh+0xee>
 80877c0:	7c03      	ldrb	r3, [r0, #16]
 80877c2:	2b02      	cmp	r3, #2
 80877c4:	d13d      	bne.n	8087842 <_ZN9FatVolume4initEh+0xee>
      fbs->fatCount != 2 ||
 80877c6:	89c3      	ldrh	r3, [r0, #14]
 80877c8:	2b00      	cmp	r3, #0
 80877ca:	d03a      	beq.n	8087842 <_ZN9FatVolume4initEh+0xee>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
 80877cc:	7b41      	ldrb	r1, [r0, #13]
  m_clusterBlockMask = m_blocksPerCluster - 1;

  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
 80877ce:	2609      	movs	r6, #9
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
 80877d0:	1e4b      	subs	r3, r1, #1
 80877d2:	7163      	strb	r3, [r4, #5]

  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
 80877d4:	2300      	movs	r3, #0
 80877d6:	71a3      	strb	r3, [r4, #6]
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
 80877d8:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;

  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 80877da:	2301      	movs	r3, #1
 80877dc:	428b      	cmp	r3, r1
 80877de:	d007      	beq.n	80877f0 <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
 80877e0:	3e01      	subs	r6, #1
 80877e2:	d02e      	beq.n	8087842 <_ZN9FatVolume4initEh+0xee>
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;

  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 80877e4:	79a2      	ldrb	r2, [r4, #6]
 80877e6:	005b      	lsls	r3, r3, #1
 80877e8:	3201      	adds	r2, #1
 80877ea:	b2db      	uxtb	r3, r3
 80877ec:	71a2      	strb	r2, [r4, #6]
 80877ee:	e7f5      	b.n	80877dc <_ZN9FatVolume4initEh+0x88>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_blocksPerFat = fbs->sectorsPerFat16 ?
 80877f0:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
 80877f2:	b902      	cbnz	r2, 80877f6 <_ZN9FatVolume4initEh+0xa2>
 80877f4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80877f6:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
 80877f8:	89c6      	ldrh	r6, [r0, #14]
 80877fa:	442e      	add	r6, r5
 80877fc:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 80877fe:	f8b0 3011 	ldrh.w	r3, [r0, #17]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 8087802:	eb06 0142 	add.w	r1, r6, r2, lsl #1
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 8087806:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 8087808:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
 808780a:	f8b0 2011 	ldrh.w	r2, [r0, #17]
 808780e:	0152      	lsls	r2, r2, #5
 8087810:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
 8087814:	eb01 2262 	add.w	r2, r1, r2, asr #9
 8087818:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
 808781a:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
 808781e:	b903      	cbnz	r3, 8087822 <_ZN9FatVolume4initEh+0xce>
 8087820:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
 8087822:	1aad      	subs	r5, r5, r2
 8087824:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
 8087826:	79a5      	ldrb	r5, [r4, #6]
 8087828:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
 808782c:	1c6b      	adds	r3, r5, #1
 808782e:	61e3      	str	r3, [r4, #28]
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
#if MAINTAIN_FREE_CLUSTER_COUNT
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
 8087830:	f04f 33ff 	mov.w	r3, #4294967295
 8087834:	6263      	str	r3, [r4, #36]	; 0x24

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);

  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
 8087836:	f640 73f4 	movw	r3, #4084	; 0xff4
 808783a:	429d      	cmp	r5, r3
 808783c:	d803      	bhi.n	8087846 <_ZN9FatVolume4initEh+0xf2>
    m_fatType = 12;
 808783e:	230c      	movs	r3, #12
 8087840:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
 8087842:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
 8087844:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
 8087846:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 808784a:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
 808784c:	bf89      	itett	hi
 808784e:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
 8087850:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
 8087852:	6223      	strhi	r3, [r4, #32]
    m_fatType = 32;
 8087854:	2320      	movhi	r3, #32
 8087856:	71e3      	strb	r3, [r4, #7]
  }
  return true;
 8087858:	2001      	movs	r0, #1

fail:
  return false;
}
 808785a:	bd70      	pop	{r4, r5, r6, pc}

0808785c <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
 808785c:	f000 bbcc 	b.w	8087ff8 <HAL_Pin_Map>

08087860 <_GLOBAL__sub_I__ZN9SdFatBase9errorHaltEP5Print>:
 8087860:	f000 bbca 	b.w	8087ff8 <HAL_Pin_Map>

08087864 <_ZN15Adafruit_BME680C1Ea>:
    @brief  Instantiates sensor with Hardware SPI or I2C.
    @param  cspin SPI chip select. If not passed in, I2C will be used
*/
/**************************************************************************/
Adafruit_BME680::Adafruit_BME680(int8_t cspin)
  : _cs(cspin)
 8087864:	7701      	strb	r1, [r0, #28]
{
  _BME680_SoftwareSPI_MOSI = -1;
 8087866:	4907      	ldr	r1, [pc, #28]	; (8087884 <_ZN15Adafruit_BME680C1Ea+0x20>)
 8087868:	22ff      	movs	r2, #255	; 0xff
 808786a:	700a      	strb	r2, [r1, #0]
  _BME680_SoftwareSPI_MISO = -1;
 808786c:	4906      	ldr	r1, [pc, #24]	; (8087888 <_ZN15Adafruit_BME680C1Ea+0x24>)
 808786e:	700a      	strb	r2, [r1, #0]
  _BME680_SoftwareSPI_SCK = -1;
 8087870:	4906      	ldr	r1, [pc, #24]	; (808788c <_ZN15Adafruit_BME680C1Ea+0x28>)
 8087872:	700a      	strb	r2, [r1, #0]
  _filterEnabled = _tempEnabled = _humEnabled = _presEnabled = _gasEnabled = false;
 8087874:	2200      	movs	r2, #0
 8087876:	7502      	strb	r2, [r0, #20]
 8087878:	74c2      	strb	r2, [r0, #19]
 808787a:	7482      	strb	r2, [r0, #18]
 808787c:	7442      	strb	r2, [r0, #17]
 808787e:	7402      	strb	r2, [r0, #16]
}
 8087880:	4770      	bx	lr
 8087882:	bf00      	nop
 8087884:	20000b9a 	.word	0x20000b9a
 8087888:	20000b98 	.word	0x20000b98
 808788c:	20000b99 	.word	0x20000b99

08087890 <_ZN15Adafruit_BME68014performReadingEv>:
    and Adafruit_BME680#gas_resistance member variables

    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::performReading(void) {
 8087890:	b530      	push	{r4, r5, lr}
 8087892:	4604      	mov	r4, r0
  struct bme680_field_data data;
  int8_t rslt;

  /* Select the power mode */
  /* Must be set before writing the sensor configuration */
  gas_sensor.power_mode = BME680_FORCED_MODE;
 8087894:	2301      	movs	r3, #1
 8087896:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64

  /* Set the required sensor settings needed */
  if (_tempEnabled)
    set_required_settings |= BME680_OST_SEL;
  if (_humEnabled)
 808789a:	7ca3      	ldrb	r3, [r4, #18]
    and Adafruit_BME680#gas_resistance member variables

    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::performReading(void) {
 808789c:	b087      	sub	sp, #28
  uint8_t set_required_settings = 0;
 808789e:	7c40      	ldrb	r0, [r0, #17]
  gas_sensor.power_mode = BME680_FORCED_MODE;

  /* Set the required sensor settings needed */
  if (_tempEnabled)
    set_required_settings |= BME680_OST_SEL;
  if (_humEnabled)
 80878a0:	b10b      	cbz	r3, 80878a6 <_ZN15Adafruit_BME68014performReadingEv+0x16>
    set_required_settings |= BME680_OSH_SEL;
 80878a2:	f040 0004 	orr.w	r0, r0, #4
  if (_presEnabled)
 80878a6:	7ce3      	ldrb	r3, [r4, #19]
 80878a8:	b10b      	cbz	r3, 80878ae <_ZN15Adafruit_BME68014performReadingEv+0x1e>
    set_required_settings |= BME680_OSP_SEL;
 80878aa:	f040 0002 	orr.w	r0, r0, #2
  if (_filterEnabled)
 80878ae:	7c23      	ldrb	r3, [r4, #16]
 80878b0:	b10b      	cbz	r3, 80878b6 <_ZN15Adafruit_BME68014performReadingEv+0x26>
    set_required_settings |= BME680_FILTER_SEL;
 80878b2:	f040 0010 	orr.w	r0, r0, #16
  if (_gasEnabled)
 80878b6:	7d23      	ldrb	r3, [r4, #20]
 80878b8:	b10b      	cbz	r3, 80878be <_ZN15Adafruit_BME68014performReadingEv+0x2e>
    set_required_settings |= BME680_GAS_SENSOR_SEL;
 80878ba:	f040 00c8 	orr.w	r0, r0, #200	; 0xc8

  /* Set the desired sensor configuration */
  //Serial.println("Setting sensor settings");
  rslt = bme680_set_sensor_settings(set_required_settings, &gas_sensor);
 80878be:	f104 0520 	add.w	r5, r4, #32
 80878c2:	4629      	mov	r1, r5
 80878c4:	f7f8 fcf8 	bl	80802b8 <bme680_set_sensor_settings>
  if (rslt != BME680_OK)
 80878c8:	b108      	cbz	r0, 80878ce <_ZN15Adafruit_BME68014performReadingEv+0x3e>
    return false;
 80878ca:	2500      	movs	r5, #0
 80878cc:	e04b      	b.n	8087966 <_ZN15Adafruit_BME68014performReadingEv+0xd6>

  /* Set the power mode */
  //Serial.println("Setting power mode");
  rslt = bme680_set_sensor_mode(&gas_sensor);
 80878ce:	4628      	mov	r0, r5
 80878d0:	f7f8 fcb3 	bl	808023a <bme680_set_sensor_mode>
  if (rslt != BME680_OK)
 80878d4:	2800      	cmp	r0, #0
 80878d6:	d1f8      	bne.n	80878ca <_ZN15Adafruit_BME68014performReadingEv+0x3a>
    return false;

  /* Get the total measurement duration so as to sleep or wait till the
   * measurement is complete */
  uint16_t meas_period;
  bme680_get_profile_dur(&meas_period, &gas_sensor);
 80878d8:	4629      	mov	r1, r5
 80878da:	f10d 0002 	add.w	r0, sp, #2
 80878de:	f7f8 fe67 	bl	80805b0 <bme680_get_profile_dur>
  //Serial.print("Waiting (ms) "); Serial.println(meas_period);
  delay(meas_period * 2); /* Delay till the measurement is ready */
 80878e2:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 80878e6:	0040      	lsls	r0, r0, #1
 80878e8:	f001 feee 	bl	80896c8 <delay>

  //Serial.print("t_fine = "); Serial.println(gas_sensor.calib.t_fine);

  //Serial.println("Getting sensor data");
  rslt = bme680_get_sensor_data(&data, &gas_sensor);
 80878ec:	4629      	mov	r1, r5
 80878ee:	a801      	add	r0, sp, #4
 80878f0:	f7f8 fe92 	bl	8080618 <bme680_get_sensor_data>
  if (rslt != BME680_OK)
 80878f4:	2800      	cmp	r0, #0
 80878f6:	d1e8      	bne.n	80878ca <_ZN15Adafruit_BME68014performReadingEv+0x3a>
    return false;

  if (_tempEnabled) {
 80878f8:	7c63      	ldrb	r3, [r4, #17]
 80878fa:	b15b      	cbz	r3, 8087914 <_ZN15Adafruit_BME68014performReadingEv+0x84>
    //Serial.print("Temp: "); Serial.println(data.temperature / 100.0, 2);
    temperature = data.temperature / 100.0;
 80878fc:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8087900:	f003 f9b4 	bl	808ac6c <__aeabi_i2d>
 8087904:	2200      	movs	r2, #0
 8087906:	4b19      	ldr	r3, [pc, #100]	; (808796c <_ZN15Adafruit_BME68014performReadingEv+0xdc>)
 8087908:	f003 fb40 	bl	808af8c <__aeabi_ddiv>
 808790c:	f003 fd0c 	bl	808b328 <__aeabi_d2f>
 8087910:	6020      	str	r0, [r4, #0]
 8087912:	e001      	b.n	8087918 <_ZN15Adafruit_BME68014performReadingEv+0x88>
  } else {
    temperature = NAN;
 8087914:	4b16      	ldr	r3, [pc, #88]	; (8087970 <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 8087916:	6023      	str	r3, [r4, #0]
  }

  if (_humEnabled) {
 8087918:	7ca3      	ldrb	r3, [r4, #18]
 808791a:	b153      	cbz	r3, 8087932 <_ZN15Adafruit_BME68014performReadingEv+0xa2>
    //Serial.print("Hum:  "); Serial.println(data.humidity / 1000.0, 2);
    humidity = data.humidity / 1000.0;
 808791c:	9804      	ldr	r0, [sp, #16]
 808791e:	f003 f995 	bl	808ac4c <__aeabi_ui2d>
 8087922:	2200      	movs	r2, #0
 8087924:	4b13      	ldr	r3, [pc, #76]	; (8087974 <_ZN15Adafruit_BME68014performReadingEv+0xe4>)
 8087926:	f003 fb31 	bl	808af8c <__aeabi_ddiv>
 808792a:	f003 fcfd 	bl	808b328 <__aeabi_d2f>
 808792e:	60a0      	str	r0, [r4, #8]
 8087930:	e001      	b.n	8087936 <_ZN15Adafruit_BME68014performReadingEv+0xa6>
  } else {
    humidity = NAN;
 8087932:	4b0f      	ldr	r3, [pc, #60]	; (8087970 <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 8087934:	60a3      	str	r3, [r4, #8]
  }

  if (_presEnabled) {
 8087936:	7ce3      	ldrb	r3, [r4, #19]
 8087938:	b123      	cbz	r3, 8087944 <_ZN15Adafruit_BME68014performReadingEv+0xb4>
    //Serial.print("Pres: "); Serial.println(data.pressure / 100.0, 2);
    pressure = data.pressure;
 808793a:	9803      	ldr	r0, [sp, #12]
 808793c:	f003 fdfa 	bl	808b534 <__aeabi_ui2f>
 8087940:	6060      	str	r0, [r4, #4]
 8087942:	e001      	b.n	8087948 <_ZN15Adafruit_BME68014performReadingEv+0xb8>
  } else {
    pressure = NAN;
 8087944:	4b0a      	ldr	r3, [pc, #40]	; (8087970 <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 8087946:	6063      	str	r3, [r4, #4]
  }

  /* Avoid using measurements from an unstable heating setup */
  if (_gasEnabled) {
 8087948:	7d25      	ldrb	r5, [r4, #20]
 808794a:	b15d      	cbz	r5, 8087964 <_ZN15Adafruit_BME68014performReadingEv+0xd4>
    if (data.status & BME680_HEAT_STAB_MSK) {
 808794c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8087950:	06db      	lsls	r3, r3, #27
 8087952:	d504      	bpl.n	808795e <_ZN15Adafruit_BME68014performReadingEv+0xce>
      //Serial.print("Gas resistance: "); Serial.println(data.gas_resistance);
      gas_resistance = data.gas_resistance;
 8087954:	9805      	ldr	r0, [sp, #20]
 8087956:	f003 fded 	bl	808b534 <__aeabi_ui2f>
 808795a:	60e0      	str	r0, [r4, #12]
 808795c:	e003      	b.n	8087966 <_ZN15Adafruit_BME68014performReadingEv+0xd6>
    } else {
      gas_resistance = 0;
 808795e:	2300      	movs	r3, #0
 8087960:	60e3      	str	r3, [r4, #12]
 8087962:	e000      	b.n	8087966 <_ZN15Adafruit_BME68014performReadingEv+0xd6>
      //Serial.println("Gas reading unstable!");
    }
  }

  return true;
 8087964:	2501      	movs	r5, #1
}
 8087966:	4628      	mov	r0, r5
 8087968:	b007      	add	sp, #28
 808796a:	bd30      	pop	{r4, r5, pc}
 808796c:	40590000 	.word	0x40590000
 8087970:	7fc00000 	.word	0x7fc00000
 8087974:	408f4000 	.word	0x408f4000

08087978 <_GLOBAL__sub_I__BME680_SoftwareSPI_MOSI>:
 8087978:	f000 bb3e 	b.w	8087ff8 <HAL_Pin_Map>

0808797c <_ZN7HIH61XX5startEv>:

        //  use a stream to control the sensor
        uint8_t commandRequest(Stream & stream);
    protected:
        uint8_t setError(uint8_t error) {
            f = (f & ~ErrorMask) | error;
 808797c:	7983      	ldrb	r3, [r0, #6]
 808797e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8087982:	f023 030f 	bic.w	r3, r3, #15
 8087986:	7183      	strb	r3, [r0, #6]
    /*if (p < 255) {
        digitalWrite(p, HIGH);
    }*/
    f |= RunningFlag;
    return setError(0);
}
 8087988:	2000      	movs	r0, #0
 808798a:	4770      	bx	lr

0808798c <_ZN7HIH61XX4stopEv>:
 808798c:	7983      	ldrb	r3, [r0, #6]
 808798e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8087992:	7183      	strb	r3, [r0, #6]
    /*if (p < 255) {
        digitalWrite(p, LOW);
    }*/
    f &= ~RunningFlag;
    return setError(0);
}
 8087994:	2000      	movs	r0, #0
 8087996:	4770      	bx	lr

08087998 <_ZN7HIH61XXC1Eh>:
#include "HIH61XX.h"

HIH61XX::HIH61XX(uint8_t address): a(address), f(0), h(0), t(0) {
 8087998:	4a03      	ldr	r2, [pc, #12]	; (80879a8 <_ZN7HIH61XXC1Eh+0x10>)
 808799a:	7101      	strb	r1, [r0, #4]
 808799c:	6002      	str	r2, [r0, #0]
 808799e:	2200      	movs	r2, #0
 80879a0:	7182      	strb	r2, [r0, #6]
 80879a2:	8102      	strh	r2, [r0, #8]
 80879a4:	8142      	strh	r2, [r0, #10]
    /*if (p < 255) {
        digitalWrite(p, LOW);
        pinMode(p, OUTPUT);
    }*/
}
 80879a6:	4770      	bx	lr
 80879a8:	08091354 	.word	0x08091354

080879ac <_ZN7HIH61XX6updateEv>:
    }*/
    f &= ~RunningFlag;
    return setError(0);
}

uint8_t HIH61XX::update() {
 80879ac:	b570      	push	{r4, r5, r6, lr}
        uint8_t error() const {
            return f & ErrorMask;
        }

        bool isRunning() const {
            return f & RunningFlag;
 80879ae:	f990 3006 	ldrsb.w	r3, [r0, #6]
 80879b2:	4604      	mov	r4, r0
    if (!isRunning()) {
 80879b4:	2b00      	cmp	r3, #0
 80879b6:	db06      	blt.n	80879c6 <_ZN7HIH61XX6updateEv+0x1a>

        //  use a stream to control the sensor
        uint8_t commandRequest(Stream & stream);
    protected:
        uint8_t setError(uint8_t error) {
            f = (f & ~ErrorMask) | error;
 80879b8:	f023 030f 	bic.w	r3, r3, #15
 80879bc:	f043 0303 	orr.w	r3, r3, #3
 80879c0:	7183      	strb	r3, [r0, #6]
        return setError(NotRunningError);
 80879c2:	2003      	movs	r0, #3
 80879c4:	bd70      	pop	{r4, r5, r6, pc}
    }

    uint8_t x, y, s;

    Wire.beginTransmission(a);
 80879c6:	f002 fe6d 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 80879ca:	7921      	ldrb	r1, [r4, #4]
 80879cc:	f002 fd22 	bl	808a414 <_ZN7TwoWire17beginTransmissionEh>
    int azer = Wire.endTransmission();
 80879d0:	f002 fe68 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 80879d4:	f002 fd29 	bl	808a42a <_ZN7TwoWire15endTransmissionEv>
    if (azer == 0) {
 80879d8:	4605      	mov	r5, r0
 80879da:	2800      	cmp	r0, #0
 80879dc:	d15d      	bne.n	8087a9a <_ZN7HIH61XX6updateEv+0xee>
        while (true) {
            delay(10);
 80879de:	200a      	movs	r0, #10
 80879e0:	f001 fe72 	bl	80896c8 <delay>

            Wire.requestFrom(a, (uint8_t) 4);
 80879e4:	f002 fe5e 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 80879e8:	2204      	movs	r2, #4
 80879ea:	7921      	ldrb	r1, [r4, #4]
 80879ec:	f002 fd05 	bl	808a3fa <_ZN7TwoWire11requestFromEhh>
            if (Wire.available()) {
 80879f0:	f002 fe58 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 80879f4:	6803      	ldr	r3, [r0, #0]
 80879f6:	691b      	ldr	r3, [r3, #16]
 80879f8:	4798      	blx	r3
 80879fa:	2800      	cmp	r0, #0
 80879fc:	d045      	beq.n	8087a8a <_ZN7HIH61XX6updateEv+0xde>
                x = Wire.read();
 80879fe:	f002 fe51 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 8087a02:	6803      	ldr	r3, [r0, #0]
 8087a04:	695b      	ldr	r3, [r3, #20]
 8087a06:	4798      	blx	r3
 8087a08:	4606      	mov	r6, r0
                y = Wire.read();
 8087a0a:	f002 fe4b 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 8087a0e:	6803      	ldr	r3, [r0, #0]
                s = x >> 6;

                switch (s) {
 8087a10:	f3c6 1581 	ubfx	r5, r6, #6, #2
            delay(10);

            Wire.requestFrom(a, (uint8_t) 4);
            if (Wire.available()) {
                x = Wire.read();
                y = Wire.read();
 8087a14:	695b      	ldr	r3, [r3, #20]
 8087a16:	4798      	blx	r3
                s = x >> 6;

                switch (s) {
 8087a18:	2d01      	cmp	r5, #1
 8087a1a:	d025      	beq.n	8087a68 <_ZN7HIH61XX6updateEv+0xbc>
 8087a1c:	2d02      	cmp	r5, #2
 8087a1e:	d028      	beq.n	8087a72 <_ZN7HIH61XX6updateEv+0xc6>
 8087a20:	2d00      	cmp	r5, #0
 8087a22:	d1dc      	bne.n	80879de <_ZN7HIH61XX6updateEv+0x32>
                    case 0:
                        h = (((uint16_t)(x & 0x3f)) << 8) | y;
 8087a24:	0236      	lsls	r6, r6, #8
 8087a26:	f406 567c 	and.w	r6, r6, #16128	; 0x3f00
 8087a2a:	b2c0      	uxtb	r0, r0
 8087a2c:	4330      	orrs	r0, r6
 8087a2e:	8120      	strh	r0, [r4, #8]
                        x = Wire.read();
 8087a30:	f002 fe38 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 8087a34:	6803      	ldr	r3, [r0, #0]
 8087a36:	695b      	ldr	r3, [r3, #20]
 8087a38:	4798      	blx	r3
 8087a3a:	4606      	mov	r6, r0
                        y = Wire.read();
 8087a3c:	f002 fe32 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 8087a40:	6803      	ldr	r3, [r0, #0]
                        t = ((((uint16_t) x) << 8) | y) >> 2;
 8087a42:	0236      	lsls	r6, r6, #8

                switch (s) {
                    case 0:
                        h = (((uint16_t)(x & 0x3f)) << 8) | y;
                        x = Wire.read();
                        y = Wire.read();
 8087a44:	695b      	ldr	r3, [r3, #20]
 8087a46:	4798      	blx	r3
                        t = ((((uint16_t) x) << 8) | y) >> 2;
 8087a48:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8087a4c:	b2c0      	uxtb	r0, r0
 8087a4e:	4330      	orrs	r0, r6
 8087a50:	1080      	asrs	r0, r0, #2
 8087a52:	8160      	strh	r0, [r4, #10]
                        Wire.endTransmission();
 8087a54:	f002 fe26 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 8087a58:	f002 fce7 	bl	808a42a <_ZN7TwoWire15endTransmissionEv>
 8087a5c:	79a3      	ldrb	r3, [r4, #6]
                        return setError(0);
 8087a5e:	4628      	mov	r0, r5
 8087a60:	f023 030f 	bic.w	r3, r3, #15
 8087a64:	71a3      	strb	r3, [r4, #6]
 8087a66:	bd70      	pop	{r4, r5, r6, pc}

                    case 1:
                        Wire.endTransmission();
 8087a68:	f002 fe1c 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 8087a6c:	f002 fcdd 	bl	808a42a <_ZN7TwoWire15endTransmissionEv>
 8087a70:	e7b5      	b.n	80879de <_ZN7HIH61XX6updateEv+0x32>
                        break;

                    case 2:
                        Wire.endTransmission();
 8087a72:	f002 fe17 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 8087a76:	f002 fcd8 	bl	808a42a <_ZN7TwoWire15endTransmissionEv>
 8087a7a:	79a3      	ldrb	r3, [r4, #6]
                        return setError(CommandModeError);
 8087a7c:	2004      	movs	r0, #4
 8087a7e:	f023 030f 	bic.w	r3, r3, #15
 8087a82:	f043 0304 	orr.w	r3, r3, #4
 8087a86:	71a3      	strb	r3, [r4, #6]
 8087a88:	bd70      	pop	{r4, r5, r6, pc}
 8087a8a:	79a3      	ldrb	r3, [r4, #6]
                }
            } else {
                return setError(CommunicationError);
 8087a8c:	2002      	movs	r0, #2
 8087a8e:	f023 030f 	bic.w	r3, r3, #15
 8087a92:	f043 0302 	orr.w	r3, r3, #2
 8087a96:	71a3      	strb	r3, [r4, #6]
 8087a98:	bd70      	pop	{r4, r5, r6, pc}
            }
        }
    } else {
        Serial.print("...");
 8087a9a:	f002 faf7 	bl	808a08c <_Z16_fetch_usbserialv>
 8087a9e:	4908      	ldr	r1, [pc, #32]	; (8087ac0 <_ZN7HIH61XX6updateEv+0x114>)
 8087aa0:	f001 faac 	bl	8088ffc <_ZN5Print5printEPKc>
        Serial.println(azer);
 8087aa4:	f002 faf2 	bl	808a08c <_Z16_fetch_usbserialv>
 8087aa8:	220a      	movs	r2, #10
 8087aaa:	4629      	mov	r1, r5
 8087aac:	f001 fb27 	bl	80890fe <_ZN5Print7printlnEii>
 8087ab0:	79a3      	ldrb	r3, [r4, #6]
        return setError(ConnectionError);
 8087ab2:	2001      	movs	r0, #1
 8087ab4:	f023 030f 	bic.w	r3, r3, #15
 8087ab8:	f043 0301 	orr.w	r3, r3, #1
 8087abc:	71a3      	strb	r3, [r4, #6]
    }
}
 8087abe:	bd70      	pop	{r4, r5, r6, pc}
 8087ac0:	08090fcd 	.word	0x08090fcd

08087ac4 <_ZN7HIH61XX14commandProcessER6Streamh>:
    }
    return commandReply(stream, 255);
}

uint8_t HIH61XX::commandProcess(Stream & stream, uint8_t command) {
    switch (command) {
 8087ac4:	2a61      	cmp	r2, #97	; 0x61
        return commandProcess(stream, stream.read());
    }
    return commandReply(stream, 255);
}

uint8_t HIH61XX::commandProcess(Stream & stream, uint8_t command) {
 8087ac6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8087ac8:	460d      	mov	r5, r1
    switch (command) {
 8087aca:	d02b      	beq.n	8087b24 <_ZN7HIH61XX14commandProcessER6Streamh+0x60>
 8087acc:	d806      	bhi.n	8087adc <_ZN7HIH61XX14commandProcessER6Streamh+0x18>
 8087ace:	2a30      	cmp	r2, #48	; 0x30
 8087ad0:	d031      	beq.n	8087b36 <_ZN7HIH61XX14commandProcessER6Streamh+0x72>
 8087ad2:	2a31      	cmp	r2, #49	; 0x31
 8087ad4:	d139      	bne.n	8087b4a <_ZN7HIH61XX14commandProcessER6Streamh+0x86>
        case 'u':
            return commandReply(stream, update());

            //  start
        case '1':
            return commandReply(stream, start());
 8087ad6:	6803      	ldr	r3, [r0, #0]
 8087ad8:	681b      	ldr	r3, [r3, #0]
 8087ada:	e02e      	b.n	8087b3a <_ZN7HIH61XX14commandProcessER6Streamh+0x76>
    }
    return commandReply(stream, 255);
}

uint8_t HIH61XX::commandProcess(Stream & stream, uint8_t command) {
    switch (command) {
 8087adc:	2a74      	cmp	r2, #116	; 0x74
 8087ade:	d00a      	beq.n	8087af6 <_ZN7HIH61XX14commandProcessER6Streamh+0x32>
 8087ae0:	2a75      	cmp	r2, #117	; 0x75
 8087ae2:	d025      	beq.n	8087b30 <_ZN7HIH61XX14commandProcessER6Streamh+0x6c>
 8087ae4:	2a68      	cmp	r2, #104	; 0x68
 8087ae6:	d130      	bne.n	8087b4a <_ZN7HIH61XX14commandProcessER6Streamh+0x86>
            stream.println(result);
            return result;
        }
        template < typename T > uint8_t commandReply(Stream & stream, uint8_t result,
            const T & data) {
            stream.println(data);
 8087ae8:	8900      	ldrh	r0, [r0, #8]
 8087aea:	f003 fd23 	bl	808b534 <__aeabi_ui2f>
 8087aee:	491b      	ldr	r1, [pc, #108]	; (8087b5c <_ZN7HIH61XX14commandProcessER6Streamh+0x98>)
 8087af0:	f003 fe2c 	bl	808b74c <__aeabi_fdiv>
 8087af4:	e00b      	b.n	8087b0e <_ZN7HIH61XX14commandProcessER6Streamh+0x4a>
 8087af6:	8940      	ldrh	r0, [r0, #10]
 8087af8:	f003 fd1c 	bl	808b534 <__aeabi_ui2f>
 8087afc:	4917      	ldr	r1, [pc, #92]	; (8087b5c <_ZN7HIH61XX14commandProcessER6Streamh+0x98>)
 8087afe:	f003 fe25 	bl	808b74c <__aeabi_fdiv>
 8087b02:	4917      	ldr	r1, [pc, #92]	; (8087b60 <_ZN7HIH61XX14commandProcessER6Streamh+0x9c>)
 8087b04:	f003 fd6e 	bl	808b5e4 <__aeabi_fmul>
 8087b08:	4916      	ldr	r1, [pc, #88]	; (8087b64 <_ZN7HIH61XX14commandProcessER6Streamh+0xa0>)
 8087b0a:	f003 fc61 	bl	808b3d0 <__aeabi_fsub>
 8087b0e:	f003 f8bf 	bl	808ac90 <__aeabi_f2d>
 8087b12:	2302      	movs	r3, #2
 8087b14:	9300      	str	r3, [sp, #0]
 8087b16:	4602      	mov	r2, r0
 8087b18:	460b      	mov	r3, r1
 8087b1a:	4628      	mov	r0, r5
 8087b1c:	f001 fba8 	bl	8089270 <_ZN5Print7printlnEdi>
        case 'h':
            return commandReply(stream, 0, humidity());

            //  get temperature
        case 't':
            return commandReply(stream, 0, temperature());
 8087b20:	2400      	movs	r4, #0
 8087b22:	e018      	b.n	8087b56 <_ZN7HIH61XX14commandProcessER6Streamh+0x92>
 8087b24:	7901      	ldrb	r1, [r0, #4]
 8087b26:	220a      	movs	r2, #10
 8087b28:	4628      	mov	r0, r5
 8087b2a:	f001 faba 	bl	80890a2 <_ZN5Print7printlnEhi>
 8087b2e:	e7f7      	b.n	8087b20 <_ZN7HIH61XX14commandProcessER6Streamh+0x5c>

            //  get power pin
        
            //  update
        case 'u':
            return commandReply(stream, update());
 8087b30:	f7ff ff3c 	bl	80879ac <_ZN7HIH61XX6updateEv>
 8087b34:	e002      	b.n	8087b3c <_ZN7HIH61XX14commandProcessER6Streamh+0x78>
        case '1':
            return commandReply(stream, start());

            //  stop
        case '0':
            return commandReply(stream, stop());
 8087b36:	6803      	ldr	r3, [r0, #0]
 8087b38:	685b      	ldr	r3, [r3, #4]
 8087b3a:	4798      	blx	r3
 8087b3c:	4604      	mov	r4, r0
            return error;
        }

        virtual uint8_t commandProcess(Stream & stream, uint8_t command);
        uint8_t commandReply(Stream & stream, uint8_t result) {
            stream.println(result);
 8087b3e:	4601      	mov	r1, r0
 8087b40:	220a      	movs	r2, #10
 8087b42:	4628      	mov	r0, r5
 8087b44:	f001 faad 	bl	80890a2 <_ZN5Print7printlnEhi>
 8087b48:	e005      	b.n	8087b56 <_ZN7HIH61XX14commandProcessER6Streamh+0x92>
 8087b4a:	220a      	movs	r2, #10
 8087b4c:	21fe      	movs	r1, #254	; 0xfe
 8087b4e:	4628      	mov	r0, r5
 8087b50:	f001 faa7 	bl	80890a2 <_ZN5Print7printlnEhi>
    }

    return commandReply(stream, 254);
 8087b54:	24fe      	movs	r4, #254	; 0xfe
}
 8087b56:	4620      	mov	r0, r4
 8087b58:	b003      	add	sp, #12
 8087b5a:	bd30      	pop	{r4, r5, pc}
 8087b5c:	467ff800 	.word	0x467ff800
 8087b60:	43250000 	.word	0x43250000
 8087b64:	42200000 	.word	0x42200000

08087b68 <_GLOBAL__sub_I__ZN7HIH61XXC2Eh>:
 8087b68:	f000 ba46 	b.w	8087ff8 <HAL_Pin_Map>

08087b6c <_ZN23GoogleMapsDeviceLocatorD1Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {

}

GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
 8087b6c:	b510      	push	{r4, lr}
 8087b6e:	4604      	mov	r4, r0
 8087b70:	4b05      	ldr	r3, [pc, #20]	; (8087b88 <_ZN23GoogleMapsDeviceLocatorD1Ev+0x1c>)
 8087b72:	f840 3b2c 	str.w	r3, [r0], #44
 8087b76:	f001 f84b 	bl	8088c10 <_ZN6StringD1Ev>
 8087b7a:	f104 000c 	add.w	r0, r4, #12
 8087b7e:	f001 f847 	bl	8088c10 <_ZN6StringD1Ev>

}
 8087b82:	4620      	mov	r0, r4
 8087b84:	bd10      	pop	{r4, pc}
 8087b86:	bf00      	nop
 8087b88:	08091368 	.word	0x08091368

08087b8c <_ZN23GoogleMapsDeviceLocatorD0Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {

}

GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
 8087b8c:	b510      	push	{r4, lr}
 8087b8e:	4604      	mov	r4, r0

}
 8087b90:	f7ff ffec 	bl	8087b6c <_ZN23GoogleMapsDeviceLocatorD1Ev>
 8087b94:	4620      	mov	r0, r4
 8087b96:	2144      	movs	r1, #68	; 0x44
 8087b98:	f002 fdc9 	bl	808a72e <_ZdlPvj>
 8087b9c:	4620      	mov	r0, r4
 8087b9e:	bd10      	pop	{r4, pc}

08087ba0 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8087ba0:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8087ba2:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8087ba4:	4604      	mov	r4, r0
    {
      if (_M_manager)
 8087ba6:	b113      	cbz	r3, 8087bae <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8087ba8:	2203      	movs	r2, #3
 8087baa:	4601      	mov	r1, r0
 8087bac:	4798      	blx	r3
    }
 8087bae:	4620      	mov	r0, r4
 8087bb0:	bd10      	pop	{r4, pc}
	...

08087bb4 <_ZN23GoogleMapsDeviceLocatorC1Ev>:

static char requestBuf[256];
static char *requestCur;
static int numAdded = 0;

GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
 8087bb4:	b538      	push	{r3, r4, r5, lr}
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
 8087bb6:	4b0f      	ldr	r3, [pc, #60]	; (8087bf4 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x40>)

static char requestBuf[256];
static char *requestCur;
static int numAdded = 0;

GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
 8087bb8:	4604      	mov	r4, r0
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
 8087bba:	6003      	str	r3, [r0, #0]
 8087bbc:	f242 7310 	movw	r3, #10000	; 0x2710
 8087bc0:	2500      	movs	r5, #0
 8087bc2:	6045      	str	r5, [r0, #4]
 8087bc4:	6083      	str	r3, [r0, #8]
 8087bc6:	490c      	ldr	r1, [pc, #48]	; (8087bf8 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x44>)
 8087bc8:	300c      	adds	r0, #12
 8087bca:	f001 f868 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
 8087bce:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8087bd2:	62a3      	str	r3, [r4, #40]	; 0x28
 8087bd4:	61e5      	str	r5, [r4, #28]
 8087bd6:	6225      	str	r5, [r4, #32]
 8087bd8:	6265      	str	r5, [r4, #36]	; 0x24
 8087bda:	4908      	ldr	r1, [pc, #32]	; (8087bfc <_ZN23GoogleMapsDeviceLocatorC1Ev+0x48>)
 8087bdc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8087be0:	f001 f85d 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
 8087be4:	f44f 739b 	mov.w	r3, #310	; 0x136
 8087be8:	63e3      	str	r3, [r4, #60]	; 0x3c
 8087bea:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 8087bee:	6423      	str	r3, [r4, #64]	; 0x40

}
 8087bf0:	4620      	mov	r0, r4
 8087bf2:	bd38      	pop	{r3, r4, r5, pc}
 8087bf4:	08091368 	.word	0x08091368
 8087bf8:	080913a6 	.word	0x080913a6
 8087bfc:	080913b4 	.word	0x080913b4

08087c00 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev>:
 8087c00:	4b02      	ldr	r3, [pc, #8]	; (8087c0c <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev+0xc>)
 8087c02:	2201      	movs	r2, #1
 8087c04:	701a      	strb	r2, [r3, #0]
 8087c06:	f000 b9f7 	b.w	8087ff8 <HAL_Pin_Map>
 8087c0a:	bf00      	nop
 8087c0c:	20000b9b 	.word	0x20000b9b

08087c10 <_ZN19CellularHelperClass16responseCallbackEiPKciPv>:
	}
	return bars;
}

// static
int CellularHelperClass::responseCallback(int type, const char* buf, int len, void *param) {
 8087c10:	b430      	push	{r4, r5}
 8087c12:	461c      	mov	r4, r3
	CellularHelperCommonResponse *presp = (CellularHelperCommonResponse *)param;

	return presp->parse(type, buf, len);
 8087c14:	681b      	ldr	r3, [r3, #0]
 8087c16:	681d      	ldr	r5, [r3, #0]
 8087c18:	4613      	mov	r3, r2
 8087c1a:	46ac      	mov	ip, r5
 8087c1c:	460a      	mov	r2, r1
 8087c1e:	4601      	mov	r1, r0
 8087c20:	4620      	mov	r0, r4
}
 8087c22:	bc30      	pop	{r4, r5}

// static
int CellularHelperClass::responseCallback(int type, const char* buf, int len, void *param) {
	CellularHelperCommonResponse *presp = (CellularHelperCommonResponse *)param;

	return presp->parse(type, buf, len);
 8087c24:	4760      	bx	ip
	...

08087c28 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>:
static LogClass Log;
#endif

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
 8087c28:	b570      	push	{r4, r5, r6, lr}
 8087c2a:	460c      	mov	r4, r1
 8087c2c:	b08c      	sub	sp, #48	; 0x30
	String typeStr;
 8087c2e:	494c      	ldr	r1, [pc, #304]	; (8087d60 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x138>)
 8087c30:	a804      	add	r0, sp, #16
static LogClass Log;
#endif

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
 8087c32:	4615      	mov	r5, r2
 8087c34:	461e      	mov	r6, r3
	String typeStr;
 8087c36:	f001 f832 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
	switch(type) {
 8087c3a:	f5b4 1f10 	cmp.w	r4, #2359296	; 0x240000
 8087c3e:	d035      	beq.n	8087cac <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x84>
 8087c40:	dc13      	bgt.n	8087c6a <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x42>
 8087c42:	f5b4 1f90 	cmp.w	r4, #1179648	; 0x120000
 8087c46:	d028      	beq.n	8087c9a <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x72>
 8087c48:	dc05      	bgt.n	8087c56 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x2e>
 8087c4a:	b324      	cbz	r4, 8087c96 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x6e>
 8087c4c:	f5b4 1f88 	cmp.w	r4, #1114112	; 0x110000
 8087c50:	d136      	bne.n	8087cc0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
	case TYPE_UNKNOWN:
		typeStr = "TYPE_UNKNOWN";
		break;

	case TYPE_OK:
		typeStr = "TYPE_OK";
 8087c52:	4944      	ldr	r1, [pc, #272]	; (8087d64 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x13c>)
 8087c54:	e022      	b.n	8087c9c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
	String typeStr;
	switch(type) {
 8087c56:	f5b4 1f08 	cmp.w	r4, #2228224	; 0x220000
 8087c5a:	d023      	beq.n	8087ca4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x7c>
 8087c5c:	f5b4 1f0c 	cmp.w	r4, #2293760	; 0x230000
 8087c60:	d022      	beq.n	8087ca8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x80>
 8087c62:	f5b4 1f04 	cmp.w	r4, #2162688	; 0x210000
 8087c66:	d12b      	bne.n	8087cc0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
 8087c68:	e017      	b.n	8087c9a <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x72>
 8087c6a:	f5b4 1f40 	cmp.w	r4, #3145728	; 0x300000
 8087c6e:	d021      	beq.n	8087cb4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
 8087c70:	dc07      	bgt.n	8087c82 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x5a>
 8087c72:	f5b4 1f14 	cmp.w	r4, #2424832	; 0x250000
 8087c76:	d01b      	beq.n	8087cb0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x88>
 8087c78:	f5b4 1f18 	cmp.w	r4, #2490368	; 0x260000
 8087c7c:	d120      	bne.n	8087cc0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
	case TYPE_BUSY:
		typeStr = "TYPE_BUSY";
		break;

	case TYPE_NOANSWER:
		typeStr = "TYPE_NOANSWER";
 8087c7e:	493a      	ldr	r1, [pc, #232]	; (8087d68 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x140>)
 8087c80:	e00c      	b.n	8087c9c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
	String typeStr;
	switch(type) {
 8087c82:	f5b4 0fa0 	cmp.w	r4, #5242880	; 0x500000
 8087c86:	d017      	beq.n	8087cb8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x90>
 8087c88:	f5b4 0fc0 	cmp.w	r4, #6291456	; 0x600000
 8087c8c:	d016      	beq.n	8087cbc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x94>
 8087c8e:	f5b4 0f80 	cmp.w	r4, #4194304	; 0x400000
 8087c92:	d115      	bne.n	8087cc0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
 8087c94:	e010      	b.n	8087cb8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x90>
	case TYPE_UNKNOWN:
		typeStr = "TYPE_UNKNOWN";
 8087c96:	4935      	ldr	r1, [pc, #212]	; (8087d6c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x144>)
 8087c98:	e000      	b.n	8087c9c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
	case TYPE_ERROR:
		typeStr = "TYPE_ERROR";
		break;

	case TYPE_RING:
		typeStr = "TYPE_ERROR";
 8087c9a:	4935      	ldr	r1, [pc, #212]	; (8087d70 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x148>)
	case TYPE_UNKNOWN:
		typeStr = "TYPE_UNKNOWN";
		break;

	case TYPE_OK:
		typeStr = "TYPE_OK";
 8087c9c:	a804      	add	r0, sp, #16
 8087c9e:	f001 f850 	bl	8088d42 <_ZN6StringaSEPKc>
		break;
 8087ca2:	e019      	b.n	8087cd8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xb0>
	case TYPE_RING:
		typeStr = "TYPE_ERROR";
		break;

	case TYPE_CONNECT:
		typeStr = "TYPE_CONNECT";
 8087ca4:	4933      	ldr	r1, [pc, #204]	; (8087d74 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x14c>)
 8087ca6:	e7f9      	b.n	8087c9c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	case TYPE_NOCARRIER:
		typeStr = "TYPE_NOCARRIER";
 8087ca8:	4933      	ldr	r1, [pc, #204]	; (8087d78 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x150>)
 8087caa:	e7f7      	b.n	8087c9c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	case TYPE_NODIALTONE:
		typeStr = "TYPE_NODIALTONE";
 8087cac:	4933      	ldr	r1, [pc, #204]	; (8087d7c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x154>)
 8087cae:	e7f5      	b.n	8087c9c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	case TYPE_BUSY:
		typeStr = "TYPE_BUSY";
 8087cb0:	4933      	ldr	r1, [pc, #204]	; (8087d80 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x158>)
 8087cb2:	e7f3      	b.n	8087c9c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
	case TYPE_NOANSWER:
		typeStr = "TYPE_NOANSWER";
		break;

	case TYPE_PROMPT:
		typeStr = "TYPE_PROMPT";
 8087cb4:	4933      	ldr	r1, [pc, #204]	; (8087d84 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x15c>)
 8087cb6:	e7f1      	b.n	8087c9c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
	case TYPE_PLUS:
		typeStr = "TYPE_PLUS";
		break;

	case TYPE_TEXT:
		typeStr = "TYPE_PLUS";
 8087cb8:	4933      	ldr	r1, [pc, #204]	; (8087d88 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x160>)
 8087cba:	e7ef      	b.n	8087c9c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	case TYPE_ABORTED:
		typeStr = "TYPE_ABORTED";
 8087cbc:	4933      	ldr	r1, [pc, #204]	; (8087d8c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x164>)
 8087cbe:	e7ed      	b.n	8087c9c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	default:
		typeStr = String::format("type=0x%x", type);
 8087cc0:	4622      	mov	r2, r4
 8087cc2:	4933      	ldr	r1, [pc, #204]	; (8087d90 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x168>)
 8087cc4:	a808      	add	r0, sp, #32
 8087cc6:	f001 f95b 	bl	8088f80 <_ZN6String6formatEPKcz>
 8087cca:	a908      	add	r1, sp, #32
 8087ccc:	a804      	add	r0, sp, #16
 8087cce:	f001 f830 	bl	8088d32 <_ZN6StringaSEOS_>
 8087cd2:	a808      	add	r0, sp, #32
 8087cd4:	f000 ff9c 	bl	8088c10 <_ZN6StringD1Ev>
		break;
	}

	Log.info("cellular response type=%s len=%d", typeStr.c_str(), len);
 8087cd8:	4633      	mov	r3, r6
 8087cda:	9a04      	ldr	r2, [sp, #16]
 8087cdc:	492d      	ldr	r1, [pc, #180]	; (8087d94 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x16c>)
 8087cde:	482e      	ldr	r0, [pc, #184]	; (8087d98 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
 8087ce0:	f7f8 feae 	bl	8080a40 <_ZNK5spark6Logger4infoEPKcz>
	String out;
 8087ce4:	491e      	ldr	r1, [pc, #120]	; (8087d60 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x138>)
 8087ce6:	a808      	add	r0, sp, #32
 8087ce8:	f000 ffd9 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
 8087cec:	462c      	mov	r4, r5
	for(int ii = 0; ii < len; ii++) {
 8087cee:	1b63      	subs	r3, r4, r5
 8087cf0:	429e      	cmp	r6, r3
 8087cf2:	dd27      	ble.n	8087d44 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x11c>
		if (buf[ii] == '\n') {
 8087cf4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8087cf8:	2b0a      	cmp	r3, #10
 8087cfa:	d10c      	bne.n	8087d16 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xee>
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8087cfc:	4927      	ldr	r1, [pc, #156]	; (8087d9c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x174>)
 8087cfe:	a808      	add	r0, sp, #32
 8087d00:	f001 f8af 	bl	8088e62 <_ZN6String6concatEPKc>
			out += "\\n";
			Log.info(out);
 8087d04:	9908      	ldr	r1, [sp, #32]
 8087d06:	4824      	ldr	r0, [pc, #144]	; (8087d98 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
 8087d08:	f7f8 fe9a 	bl	8080a40 <_ZNK5spark6Logger4infoEPKcz>
			out = "";
 8087d0c:	4914      	ldr	r1, [pc, #80]	; (8087d60 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x138>)
 8087d0e:	a808      	add	r0, sp, #32
 8087d10:	f001 f817 	bl	8088d42 <_ZN6StringaSEPKc>
 8087d14:	e7eb      	b.n	8087cee <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xc6>
		}
		else
		if (buf[ii] == '\r') {
 8087d16:	2b0d      	cmp	r3, #13
 8087d18:	d101      	bne.n	8087d1e <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xf6>
 8087d1a:	4921      	ldr	r1, [pc, #132]	; (8087da0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x178>)
 8087d1c:	e009      	b.n	8087d32 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x10a>
			out += "\\r";
		}
		else
		if (buf[ii] < ' ' || buf[ii] >= 127) {
 8087d1e:	f1a3 0220 	sub.w	r2, r3, #32
 8087d22:	2a5e      	cmp	r2, #94	; 0x5e
 8087d24:	d909      	bls.n	8087d3a <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x112>
			char hex[10];
			snprintf(hex, sizeof(hex), "0x%02x", buf[ii]);
 8087d26:	210a      	movs	r1, #10
 8087d28:	4a1e      	ldr	r2, [pc, #120]	; (8087da4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x17c>)
 8087d2a:	a801      	add	r0, sp, #4
 8087d2c:	f000 fc58 	bl	80885e0 <snprintf>
			out.concat(hex);
 8087d30:	a901      	add	r1, sp, #4
 8087d32:	a808      	add	r0, sp, #32
 8087d34:	f001 f895 	bl	8088e62 <_ZN6String6concatEPKc>
 8087d38:	e7d9      	b.n	8087cee <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xc6>
		}
		else {
			out.concat(buf[ii]);
 8087d3a:	4619      	mov	r1, r3
 8087d3c:	a808      	add	r0, sp, #32
 8087d3e:	f001 f89f 	bl	8088e80 <_ZN6String6concatEc>
		break;
	}

	Log.info("cellular response type=%s len=%d", typeStr.c_str(), len);
	String out;
	for(int ii = 0; ii < len; ii++) {
 8087d42:	e7d4      	b.n	8087cee <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xc6>
		}
		else {
			out.concat(buf[ii]);
		}
	}
	if (out.length() > 0) {
 8087d44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8087d46:	b11b      	cbz	r3, 8087d50 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x128>
		Log.info(out);
 8087d48:	9908      	ldr	r1, [sp, #32]
 8087d4a:	4813      	ldr	r0, [pc, #76]	; (8087d98 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
 8087d4c:	f7f8 fe78 	bl	8080a40 <_ZNK5spark6Logger4infoEPKcz>
		typeStr = String::format("type=0x%x", type);
		break;
	}

	Log.info("cellular response type=%s len=%d", typeStr.c_str(), len);
	String out;
 8087d50:	a808      	add	r0, sp, #32
 8087d52:	f000 ff5d 	bl	8088c10 <_ZN6StringD1Ev>
#endif

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
	String typeStr;
 8087d56:	a804      	add	r0, sp, #16
 8087d58:	f000 ff5a 	bl	8088c10 <_ZN6StringD1Ev>
		}
	}
	if (out.length() > 0) {
		Log.info(out);
	}
}
 8087d5c:	b00c      	add	sp, #48	; 0x30
 8087d5e:	bd70      	pop	{r4, r5, r6, pc}
 8087d60:	080917cc 	.word	0x080917cc
 8087d64:	08091405 	.word	0x08091405
 8087d68:	0809144e 	.word	0x0809144e
 8087d6c:	080913f8 	.word	0x080913f8
 8087d70:	0809140d 	.word	0x0809140d
 8087d74:	08091418 	.word	0x08091418
 8087d78:	08091425 	.word	0x08091425
 8087d7c:	08091434 	.word	0x08091434
 8087d80:	08091444 	.word	0x08091444
 8087d84:	0809145c 	.word	0x0809145c
 8087d88:	08091468 	.word	0x08091468
 8087d8c:	08091472 	.word	0x08091472
 8087d90:	0809147f 	.word	0x0809147f
 8087d94:	08091489 	.word	0x08091489
 8087d98:	20000ba4 	.word	0x20000ba4
 8087d9c:	080914aa 	.word	0x080914aa
 8087da0:	080914ad 	.word	0x080914ad
 8087da4:	080914b0 	.word	0x080914b0

08087da8 <_ZN32CellularHelperPlusStringResponseC1Ev>:
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 8087da8:	b538      	push	{r3, r4, r5, lr}
 8087daa:	4604      	mov	r4, r0

/**
 * All response objects inherit from this, so the parse() method can be called
 * in the subclass, and also the resp and enableDebug members are always available.
 */
class CellularHelperCommonResponse {
 8087dac:	f06f 0302 	mvn.w	r3, #2
 8087db0:	6043      	str	r3, [r0, #4]
 8087db2:	2300      	movs	r3, #0
 8087db4:	7203      	strb	r3, [r0, #8]
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 8087db6:	4d07      	ldr	r5, [pc, #28]	; (8087dd4 <_ZN32CellularHelperPlusStringResponseC1Ev+0x2c>)
 8087db8:	4b07      	ldr	r3, [pc, #28]	; (8087dd8 <_ZN32CellularHelperPlusStringResponseC1Ev+0x30>)
 8087dba:	4629      	mov	r1, r5
 8087dbc:	f840 3b0c 	str.w	r3, [r0], #12
 8087dc0:	f000 ff6d 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
 8087dc4:	4629      	mov	r1, r5
 8087dc6:	f104 001c 	add.w	r0, r4, #28
 8087dca:	f000 ff68 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
 8087dce:	4620      	mov	r0, r4
 8087dd0:	bd38      	pop	{r3, r4, r5, pc}
 8087dd2:	bf00      	nop
 8087dd4:	080917cc 	.word	0x080917cc
 8087dd8:	080917e8 	.word	0x080917e8

08087ddc <_ZN32CellularHelperPlusStringResponseD1Ev>:
 8087ddc:	b510      	push	{r4, lr}
 8087dde:	4604      	mov	r4, r0
 8087de0:	4b05      	ldr	r3, [pc, #20]	; (8087df8 <_ZN32CellularHelperPlusStringResponseD1Ev+0x1c>)
 8087de2:	f840 3b1c 	str.w	r3, [r0], #28
 8087de6:	f000 ff13 	bl	8088c10 <_ZN6StringD1Ev>
 8087dea:	f104 000c 	add.w	r0, r4, #12
 8087dee:	f000 ff0f 	bl	8088c10 <_ZN6StringD1Ev>
 8087df2:	4620      	mov	r0, r4
 8087df4:	bd10      	pop	{r4, pc}
 8087df6:	bf00      	nop
 8087df8:	080917e8 	.word	0x080917e8

08087dfc <_ZN28CellularHelperStringResponseC1Ev>:
 * Things that return a simple string, like the manufacturer string, use this
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperStringResponse : public CellularHelperCommonResponse {
 8087dfc:	b510      	push	{r4, lr}
 8087dfe:	4604      	mov	r4, r0

/**
 * All response objects inherit from this, so the parse() method can be called
 * in the subclass, and also the resp and enableDebug members are always available.
 */
class CellularHelperCommonResponse {
 8087e00:	f06f 0302 	mvn.w	r3, #2
 8087e04:	6043      	str	r3, [r0, #4]
 8087e06:	2300      	movs	r3, #0
 8087e08:	7203      	strb	r3, [r0, #8]
 * Things that return a simple string, like the manufacturer string, use this
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperStringResponse : public CellularHelperCommonResponse {
 8087e0a:	4b04      	ldr	r3, [pc, #16]	; (8087e1c <_ZN28CellularHelperStringResponseC1Ev+0x20>)
 8087e0c:	4904      	ldr	r1, [pc, #16]	; (8087e20 <_ZN28CellularHelperStringResponseC1Ev+0x24>)
 8087e0e:	f840 3b0c 	str.w	r3, [r0], #12
 8087e12:	f000 ff44 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
 8087e16:	4620      	mov	r0, r4
 8087e18:	bd10      	pop	{r4, pc}
 8087e1a:	bf00      	nop
 8087e1c:	080913f4 	.word	0x080913f4
 8087e20:	080917cc 	.word	0x080917cc

08087e24 <_ZN28CellularHelperStringResponseD1Ev>:
 8087e24:	b510      	push	{r4, lr}
 8087e26:	4604      	mov	r4, r0
 8087e28:	4b03      	ldr	r3, [pc, #12]	; (8087e38 <_ZN28CellularHelperStringResponseD1Ev+0x14>)
 8087e2a:	f840 3b0c 	str.w	r3, [r0], #12
 8087e2e:	f000 feef 	bl	8088c10 <_ZN6StringD1Ev>
 8087e32:	4620      	mov	r0, r4
 8087e34:	bd10      	pop	{r4, pc}
 8087e36:	bf00      	nop
 8087e38:	080913f4 	.word	0x080913f4

08087e3c <_ZNK19CellularHelperClass7getIMEIEv>:
	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGMR\r\n");

	return resp.string;
}

String CellularHelperClass::getIMEI() const {
 8087e3c:	b510      	push	{r4, lr}
 8087e3e:	4604      	mov	r4, r0
 8087e40:	b088      	sub	sp, #32
	CellularHelperStringResponse resp;
 8087e42:	a801      	add	r0, sp, #4
 8087e44:	f7ff ffda 	bl	8087dfc <_ZN28CellularHelperStringResponseC1Ev>

    template<typename T, typename... Targs>
    inline int command(int (*cb)(int type, const char* buf, int len, T* param),
            T* param, system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
 8087e48:	4b08      	ldr	r3, [pc, #32]	; (8087e6c <_ZNK19CellularHelperClass7getIMEIEv+0x30>)
 8087e4a:	f242 7210 	movw	r2, #10000	; 0x2710
 8087e4e:	a901      	add	r1, sp, #4
 8087e50:	4807      	ldr	r0, [pc, #28]	; (8087e70 <_ZNK19CellularHelperClass7getIMEIEv+0x34>)
 8087e52:	f000 fa61 	bl	8088318 <cellular_command>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGSN\r\n");

	return resp.string;
 8087e56:	a904      	add	r1, sp, #16
 8087e58:	4620      	mov	r0, r4
 8087e5a:	f000 ff5f 	bl	8088d1c <_ZN6StringC1ERKS_>

	return resp.string;
}

String CellularHelperClass::getIMEI() const {
	CellularHelperStringResponse resp;
 8087e5e:	a801      	add	r0, sp, #4
 8087e60:	f7ff ffe0 	bl	8087e24 <_ZN28CellularHelperStringResponseD1Ev>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGSN\r\n");

	return resp.string;
}
 8087e64:	4620      	mov	r0, r4
 8087e66:	b008      	add	sp, #32
 8087e68:	bd10      	pop	{r4, pc}
 8087e6a:	bf00      	nop
 8087e6c:	080916b0 	.word	0x080916b0
 8087e70:	08087c11 	.word	0x08087c11

08087e74 <_ZNK19CellularHelperClass7getIMSIEv>:

String CellularHelperClass::getIMSI() const {
 8087e74:	b510      	push	{r4, lr}
 8087e76:	4604      	mov	r4, r0
 8087e78:	b088      	sub	sp, #32
	CellularHelperStringResponse resp;
 8087e7a:	a801      	add	r0, sp, #4
 8087e7c:	f7ff ffbe 	bl	8087dfc <_ZN28CellularHelperStringResponseC1Ev>
 8087e80:	4b08      	ldr	r3, [pc, #32]	; (8087ea4 <_ZNK19CellularHelperClass7getIMSIEv+0x30>)
 8087e82:	f242 7210 	movw	r2, #10000	; 0x2710
 8087e86:	a901      	add	r1, sp, #4
 8087e88:	4807      	ldr	r0, [pc, #28]	; (8087ea8 <_ZNK19CellularHelperClass7getIMSIEv+0x34>)
 8087e8a:	f000 fa45 	bl	8088318 <cellular_command>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGMI\r\n");

	return resp.string;
 8087e8e:	a904      	add	r1, sp, #16
 8087e90:	4620      	mov	r0, r4
 8087e92:	f000 ff43 	bl	8088d1c <_ZN6StringC1ERKS_>

	return resp.string;
}

String CellularHelperClass::getIMSI() const {
	CellularHelperStringResponse resp;
 8087e96:	a801      	add	r0, sp, #4
 8087e98:	f7ff ffc4 	bl	8087e24 <_ZN28CellularHelperStringResponseD1Ev>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGMI\r\n");

	return resp.string;
}
 8087e9c:	4620      	mov	r0, r4
 8087e9e:	b008      	add	sp, #32
 8087ea0:	bd10      	pop	{r4, pc}
 8087ea2:	bf00      	nop
 8087ea4:	080916ba 	.word	0x080916ba
 8087ea8:	08087c11 	.word	0x08087c11

08087eac <_ZNK19CellularHelperClass8getICCIDEv>:

String CellularHelperClass::getICCID() const {
 8087eac:	b510      	push	{r4, lr}
 8087eae:	4604      	mov	r4, r0
 8087eb0:	b08c      	sub	sp, #48	; 0x30
	CellularHelperPlusStringResponse resp;
 8087eb2:	a801      	add	r0, sp, #4
 8087eb4:	f7ff ff78 	bl	8087da8 <_ZN32CellularHelperPlusStringResponseC1Ev>
	resp.command = "CCID";
 8087eb8:	490a      	ldr	r1, [pc, #40]	; (8087ee4 <_ZNK19CellularHelperClass8getICCIDEv+0x38>)
 8087eba:	a804      	add	r0, sp, #16
 8087ebc:	f000 ff41 	bl	8088d42 <_ZN6StringaSEPKc>
 8087ec0:	4b09      	ldr	r3, [pc, #36]	; (8087ee8 <_ZNK19CellularHelperClass8getICCIDEv+0x3c>)
 8087ec2:	f242 7210 	movw	r2, #10000	; 0x2710
 8087ec6:	a901      	add	r1, sp, #4
 8087ec8:	4808      	ldr	r0, [pc, #32]	; (8087eec <_ZNK19CellularHelperClass8getICCIDEv+0x40>)
 8087eca:	f000 fa25 	bl	8088318 <cellular_command>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CCID\r\n");

	return resp.string;
 8087ece:	a908      	add	r1, sp, #32
 8087ed0:	4620      	mov	r0, r4
 8087ed2:	f000 ff23 	bl	8088d1c <_ZN6StringC1ERKS_>

	return resp.string;
}

String CellularHelperClass::getICCID() const {
	CellularHelperPlusStringResponse resp;
 8087ed6:	a801      	add	r0, sp, #4
 8087ed8:	f7ff ff80 	bl	8087ddc <_ZN32CellularHelperPlusStringResponseD1Ev>
	resp.command = "CCID";

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CCID\r\n");

	return resp.string;
}
 8087edc:	4620      	mov	r0, r4
 8087ede:	b00c      	add	sp, #48	; 0x30
 8087ee0:	bd10      	pop	{r4, pc}
 8087ee2:	bf00      	nop
 8087ee4:	080916c4 	.word	0x080916c4
 8087ee8:	080916c9 	.word	0x080916c9
 8087eec:	08087c11 	.word	0x08087c11

08087ef0 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>:



// There isn't an overload of String that takes a buffer and length, but that's what comes back from
// the Cellular.command callback, so that's why this method exists.
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 8087ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8087ef4:	460d      	mov	r5, r1
 8087ef6:	4616      	mov	r6, r2
	str.reserve(str.length() + (size_t)len + 1);
 8087ef8:	1c59      	adds	r1, r3, #1



// There isn't an overload of String that takes a buffer and length, but that's what comes back from
// the Cellular.command callback, so that's why this method exists.
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 8087efa:	461f      	mov	r7, r3
	str.reserve(str.length() + (size_t)len + 1);
 8087efc:	68ab      	ldr	r3, [r5, #8]
 8087efe:	4628      	mov	r0, r5
 8087f00:	4419      	add	r1, r3



// There isn't an overload of String that takes a buffer and length, but that's what comes back from
// the Cellular.command callback, so that's why this method exists.
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 8087f02:	f89d 8018 	ldrb.w	r8, [sp, #24]
	str.reserve(str.length() + (size_t)len + 1);
 8087f06:	4634      	mov	r4, r6
 8087f08:	f000 fea0 	bl	8088c4c <_ZN6String7reserveEj>
	for(int ii = 0; ii < len; ii++) {
 8087f0c:	1ba3      	subs	r3, r4, r6
 8087f0e:	429f      	cmp	r7, r3
 8087f10:	dd0d      	ble.n	8087f2e <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3e>
		if (!noEOL || (buf[ii] != '\r' && buf[ii] != '\n')) {
 8087f12:	f1b8 0f00 	cmp.w	r8, #0
 8087f16:	d004      	beq.n	8087f22 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x32>
 8087f18:	7823      	ldrb	r3, [r4, #0]
 8087f1a:	2b0d      	cmp	r3, #13
 8087f1c:	d005      	beq.n	8087f2a <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3a>
 8087f1e:	2b0a      	cmp	r3, #10
 8087f20:	d003      	beq.n	8087f2a <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3a>
			str.concat(buf[ii]);
 8087f22:	7821      	ldrb	r1, [r4, #0]
 8087f24:	4628      	mov	r0, r5
 8087f26:	f000 ffab 	bl	8088e80 <_ZN6String6concatEc>
 8087f2a:	3401      	adds	r4, #1

// There isn't an overload of String that takes a buffer and length, but that's what comes back from
// the Cellular.command callback, so that's why this method exists.
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
	str.reserve(str.length() + (size_t)len + 1);
	for(int ii = 0; ii < len; ii++) {
 8087f2c:	e7ee      	b.n	8087f0c <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x1c>
 8087f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08087f34 <_ZN28CellularHelperStringResponse5parseEiPKci>:
}




int CellularHelperStringResponse::parse(int type, const char *buf, int len) {
 8087f34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (enableDebug) {
 8087f36:	f890 e008 	ldrb.w	lr, [r0, #8]
}




int CellularHelperStringResponse::parse(int type, const char *buf, int len) {
 8087f3a:	4604      	mov	r4, r0
 8087f3c:	460f      	mov	r7, r1
 8087f3e:	4615      	mov	r5, r2
 8087f40:	461e      	mov	r6, r3
	if (enableDebug) {
 8087f42:	f1be 0f00 	cmp.w	lr, #0
 8087f46:	d001      	beq.n	8087f4c <_ZN28CellularHelperStringResponse5parseEiPKci+0x18>
		logCellularDebug(type, buf, len);
 8087f48:	f7ff fe6e 	bl	8087c28 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	}
	if (type == TYPE_UNKNOWN) {
 8087f4c:	b947      	cbnz	r7, 8087f60 <_ZN28CellularHelperStringResponse5parseEiPKci+0x2c>
		CellularHelper.appendBufferToString(string, buf, len, true);
 8087f4e:	2301      	movs	r3, #1
 8087f50:	9300      	str	r3, [sp, #0]
 8087f52:	462a      	mov	r2, r5
 8087f54:	4633      	mov	r3, r6
 8087f56:	f104 010c 	add.w	r1, r4, #12
 8087f5a:	4803      	ldr	r0, [pc, #12]	; (8087f68 <_ZN28CellularHelperStringResponse5parseEiPKci+0x34>)
 8087f5c:	f7ff ffc8 	bl	8087ef0 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>
	}
	return WAIT;
}
 8087f60:	f04f 30ff 	mov.w	r0, #4294967295
 8087f64:	b003      	add	sp, #12
 8087f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8087f68:	20000b9c 	.word	0x20000b9c

08087f6c <_ZN32CellularHelperPlusStringResponse5parseEiPKci>:


int CellularHelperPlusStringResponse::parse(int type, const char *buf, int len) {
 8087f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (enableDebug) {
 8087f6e:	f890 e008 	ldrb.w	lr, [r0, #8]
	}
	return WAIT;
}


int CellularHelperPlusStringResponse::parse(int type, const char *buf, int len) {
 8087f72:	b08b      	sub	sp, #44	; 0x2c
 8087f74:	4606      	mov	r6, r0
 8087f76:	460d      	mov	r5, r1
 8087f78:	4617      	mov	r7, r2
 8087f7a:	461c      	mov	r4, r3
	if (enableDebug) {
 8087f7c:	f1be 0f00 	cmp.w	lr, #0
 8087f80:	d001      	beq.n	8087f86 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x1a>
		logCellularDebug(type, buf, len);
 8087f82:	f7ff fe51 	bl	8087c28 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	}
	if (type == TYPE_PLUS) {
 8087f86:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
 8087f8a:	d12a      	bne.n	8087fe2 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x76>
		// Copy to temporary string to make processing easier
		char *copy = (char *) malloc(len + 1);
 8087f8c:	1c60      	adds	r0, r4, #1
 8087f8e:	f000 faf7 	bl	8088580 <malloc>
		if (copy) {
 8087f92:	4605      	mov	r5, r0
 8087f94:	b328      	cbz	r0, 8087fe2 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x76>
			strncpy(copy, buf, len);
 8087f96:	4622      	mov	r2, r4
 8087f98:	4639      	mov	r1, r7
 8087f9a:	f004 fe2c 	bl	808cbf6 <strncpy>
			copy[len] = 0;
 8087f9e:	2300      	movs	r3, #0
 8087fa0:	552b      	strb	r3, [r5, r4]

			// We return the parts of the + response corresponding to the command we requested
			char searchFor[32];
			snprintf(searchFor, sizeof(searchFor), "\n+%s: ", command.c_str());
 8087fa2:	68f3      	ldr	r3, [r6, #12]
 8087fa4:	4a11      	ldr	r2, [pc, #68]	; (8087fec <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x80>)
 8087fa6:	2120      	movs	r1, #32
 8087fa8:	a802      	add	r0, sp, #8
 8087faa:	f000 fb19 	bl	80885e0 <snprintf>

			//Log.info("searching for: +%s:", command.c_str());

			char *start = strstr(copy, searchFor);
 8087fae:	a902      	add	r1, sp, #8
 8087fb0:	4628      	mov	r0, r5
 8087fb2:	f004 fe33 	bl	808cc1c <strstr>
			if (start) {
 8087fb6:	4604      	mov	r4, r0
 8087fb8:	b180      	cbz	r0, 8087fdc <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x70>
				start += strlen(searchFor);
 8087fba:	a802      	add	r0, sp, #8
 8087fbc:	f004 fdfe 	bl	808cbbc <strlen>
 8087fc0:	4404      	add	r4, r0

				char *end = strchr(start, '\r');
 8087fc2:	210d      	movs	r1, #13
 8087fc4:	4620      	mov	r0, r4
 8087fc6:	f004 f8a9 	bl	808c11c <strchr>
				CellularHelper.appendBufferToString(string, start, end - start);
 8087fca:	2301      	movs	r3, #1
 8087fcc:	9300      	str	r3, [sp, #0]
 8087fce:	4622      	mov	r2, r4
 8087fd0:	1b03      	subs	r3, r0, r4
 8087fd2:	f106 011c 	add.w	r1, r6, #28
 8087fd6:	4806      	ldr	r0, [pc, #24]	; (8087ff0 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x84>)
 8087fd8:	f7ff ff8a 	bl	8087ef0 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>
			}
			else {
				//Log.info("not found");
			}

			free(copy);
 8087fdc:	4628      	mov	r0, r5
 8087fde:	f000 fad7 	bl	8088590 <free>
		}
	}
	return WAIT;
}
 8087fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8087fe6:	b00b      	add	sp, #44	; 0x2c
 8087fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8087fea:	bf00      	nop
 8087fec:	080917d9 	.word	0x080917d9
 8087ff0:	20000b9c 	.word	0x20000b9c

08087ff4 <_GLOBAL__sub_I_CellularHelper>:
 8087ff4:	f000 b800 	b.w	8087ff8 <HAL_Pin_Map>

08087ff8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 8087ff8:	b508      	push	{r3, lr}
 8087ffa:	4b02      	ldr	r3, [pc, #8]	; (8088004 <HAL_Pin_Map+0xc>)
 8087ffc:	681b      	ldr	r3, [r3, #0]
 8087ffe:	681b      	ldr	r3, [r3, #0]
 8088000:	9301      	str	r3, [sp, #4]
 8088002:	bd08      	pop	{r3, pc}
 8088004:	080401b0 	.word	0x080401b0

08088008 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 8088008:	b508      	push	{r3, lr}
 808800a:	4b02      	ldr	r3, [pc, #8]	; (8088014 <HAL_Validate_Pin_Function+0xc>)
 808800c:	681b      	ldr	r3, [r3, #0]
 808800e:	685b      	ldr	r3, [r3, #4]
 8088010:	9301      	str	r3, [sp, #4]
 8088012:	bd08      	pop	{r3, pc}
 8088014:	080401b0 	.word	0x080401b0

08088018 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8088018:	b508      	push	{r3, lr}
 808801a:	4b02      	ldr	r3, [pc, #8]	; (8088024 <HAL_Pin_Mode+0xc>)
 808801c:	681b      	ldr	r3, [r3, #0]
 808801e:	689b      	ldr	r3, [r3, #8]
 8088020:	9301      	str	r3, [sp, #4]
 8088022:	bd08      	pop	{r3, pc}
 8088024:	080401b0 	.word	0x080401b0

08088028 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8088028:	b508      	push	{r3, lr}
 808802a:	4b02      	ldr	r3, [pc, #8]	; (8088034 <HAL_Get_Pin_Mode+0xc>)
 808802c:	681b      	ldr	r3, [r3, #0]
 808802e:	68db      	ldr	r3, [r3, #12]
 8088030:	9301      	str	r3, [sp, #4]
 8088032:	bd08      	pop	{r3, pc}
 8088034:	080401b0 	.word	0x080401b0

08088038 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8088038:	b508      	push	{r3, lr}
 808803a:	4b02      	ldr	r3, [pc, #8]	; (8088044 <HAL_GPIO_Write+0xc>)
 808803c:	681b      	ldr	r3, [r3, #0]
 808803e:	691b      	ldr	r3, [r3, #16]
 8088040:	9301      	str	r3, [sp, #4]
 8088042:	bd08      	pop	{r3, pc}
 8088044:	080401b0 	.word	0x080401b0

08088048 <HAL_ADC_Set_Sample_Time>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
 8088048:	b508      	push	{r3, lr}
 808804a:	4b02      	ldr	r3, [pc, #8]	; (8088054 <HAL_ADC_Set_Sample_Time+0xc>)
 808804c:	681b      	ldr	r3, [r3, #0]
 808804e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8088050:	9301      	str	r3, [sp, #4]
 8088052:	bd08      	pop	{r3, pc}
 8088054:	080401b0 	.word	0x080401b0

08088058 <HAL_ADC_Read>:
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 8088058:	b508      	push	{r3, lr}
 808805a:	4b02      	ldr	r3, [pc, #8]	; (8088064 <HAL_ADC_Read+0xc>)
 808805c:	681b      	ldr	r3, [r3, #0]
 808805e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8088060:	9301      	str	r3, [sp, #4]
 8088062:	bd08      	pop	{r3, pc}
 8088064:	080401b0 	.word	0x080401b0

08088068 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 8088068:	b508      	push	{r3, lr}
 808806a:	4b02      	ldr	r3, [pc, #8]	; (8088074 <HAL_SPI_Begin+0xc>)
 808806c:	681b      	ldr	r3, [r3, #0]
 808806e:	681b      	ldr	r3, [r3, #0]
 8088070:	9301      	str	r3, [sp, #4]
 8088072:	bd08      	pop	{r3, pc}
 8088074:	080401b4 	.word	0x080401b4

08088078 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 8088078:	b508      	push	{r3, lr}
 808807a:	4b02      	ldr	r3, [pc, #8]	; (8088084 <HAL_SPI_Set_Bit_Order+0xc>)
 808807c:	681b      	ldr	r3, [r3, #0]
 808807e:	689b      	ldr	r3, [r3, #8]
 8088080:	9301      	str	r3, [sp, #4]
 8088082:	bd08      	pop	{r3, pc}
 8088084:	080401b4 	.word	0x080401b4

08088088 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 8088088:	b508      	push	{r3, lr}
 808808a:	4b02      	ldr	r3, [pc, #8]	; (8088094 <HAL_SPI_Set_Data_Mode+0xc>)
 808808c:	681b      	ldr	r3, [r3, #0]
 808808e:	68db      	ldr	r3, [r3, #12]
 8088090:	9301      	str	r3, [sp, #4]
 8088092:	bd08      	pop	{r3, pc}
 8088094:	080401b4 	.word	0x080401b4

08088098 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 8088098:	b508      	push	{r3, lr}
 808809a:	4b02      	ldr	r3, [pc, #8]	; (80880a4 <HAL_SPI_Set_Clock_Divider+0xc>)
 808809c:	681b      	ldr	r3, [r3, #0]
 808809e:	691b      	ldr	r3, [r3, #16]
 80880a0:	9301      	str	r3, [sp, #4]
 80880a2:	bd08      	pop	{r3, pc}
 80880a4:	080401b4 	.word	0x080401b4

080880a8 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80880a8:	b508      	push	{r3, lr}
 80880aa:	4b02      	ldr	r3, [pc, #8]	; (80880b4 <HAL_SPI_Send_Receive_Data+0xc>)
 80880ac:	681b      	ldr	r3, [r3, #0]
 80880ae:	695b      	ldr	r3, [r3, #20]
 80880b0:	9301      	str	r3, [sp, #4]
 80880b2:	bd08      	pop	{r3, pc}
 80880b4:	080401b4 	.word	0x080401b4

080880b8 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80880b8:	b508      	push	{r3, lr}
 80880ba:	4b02      	ldr	r3, [pc, #8]	; (80880c4 <HAL_SPI_Init+0xc>)
 80880bc:	681b      	ldr	r3, [r3, #0]
 80880be:	69db      	ldr	r3, [r3, #28]
 80880c0:	9301      	str	r3, [sp, #4]
 80880c2:	bd08      	pop	{r3, pc}
 80880c4:	080401b4 	.word	0x080401b4

080880c8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80880c8:	b508      	push	{r3, lr}
 80880ca:	4b02      	ldr	r3, [pc, #8]	; (80880d4 <HAL_SPI_Is_Enabled+0xc>)
 80880cc:	681b      	ldr	r3, [r3, #0]
 80880ce:	6a1b      	ldr	r3, [r3, #32]
 80880d0:	9301      	str	r3, [sp, #4]
 80880d2:	bd08      	pop	{r3, pc}
 80880d4:	080401b4 	.word	0x080401b4

080880d8 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 80880d8:	b508      	push	{r3, lr}
 80880da:	4b02      	ldr	r3, [pc, #8]	; (80880e4 <HAL_SPI_Info+0xc>)
 80880dc:	681b      	ldr	r3, [r3, #0]
 80880de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80880e0:	9301      	str	r3, [sp, #4]
 80880e2:	bd08      	pop	{r3, pc}
 80880e4:	080401b4 	.word	0x080401b4

080880e8 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
 80880e8:	b508      	push	{r3, lr}
 80880ea:	4b02      	ldr	r3, [pc, #8]	; (80880f4 <HAL_SPI_DMA_Transfer+0xc>)
 80880ec:	681b      	ldr	r3, [r3, #0]
 80880ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80880f0:	9301      	str	r3, [sp, #4]
 80880f2:	bd08      	pop	{r3, pc}
 80880f4:	080401b4 	.word	0x080401b4

080880f8 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
 80880f8:	b508      	push	{r3, lr}
 80880fa:	4b02      	ldr	r3, [pc, #8]	; (8088104 <HAL_SPI_DMA_Transfer_Status+0xc>)
 80880fc:	681b      	ldr	r3, [r3, #0]
 80880fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8088100:	9301      	str	r3, [sp, #4]
 8088102:	bd08      	pop	{r3, pc}
 8088104:	080401b4 	.word	0x080401b4

08088108 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8088108:	b508      	push	{r3, lr}
 808810a:	4b02      	ldr	r3, [pc, #8]	; (8088114 <HAL_RNG_GetRandomNumber+0xc>)
 808810c:	681b      	ldr	r3, [r3, #0]
 808810e:	685b      	ldr	r3, [r3, #4]
 8088110:	9301      	str	r3, [sp, #4]
 8088112:	bd08      	pop	{r3, pc}
 8088114:	0804019c 	.word	0x0804019c

08088118 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 8088118:	b508      	push	{r3, lr}
 808811a:	4b02      	ldr	r3, [pc, #8]	; (8088124 <HAL_Delay_Microseconds+0xc>)
 808811c:	681b      	ldr	r3, [r3, #0]
 808811e:	68db      	ldr	r3, [r3, #12]
 8088120:	9301      	str	r3, [sp, #4]
 8088122:	bd08      	pop	{r3, pc}
 8088124:	0804019c 	.word	0x0804019c

08088128 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8088128:	b508      	push	{r3, lr}
 808812a:	4b02      	ldr	r3, [pc, #8]	; (8088134 <HAL_Timer_Get_Milli_Seconds+0xc>)
 808812c:	681b      	ldr	r3, [r3, #0]
 808812e:	695b      	ldr	r3, [r3, #20]
 8088130:	9301      	str	r3, [sp, #4]
 8088132:	bd08      	pop	{r3, pc}
 8088134:	0804019c 	.word	0x0804019c

08088138 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 8088138:	b508      	push	{r3, lr}
 808813a:	4b02      	ldr	r3, [pc, #8]	; (8088144 <HAL_RTC_Get_UnixTime+0xc>)
 808813c:	681b      	ldr	r3, [r3, #0]
 808813e:	69db      	ldr	r3, [r3, #28]
 8088140:	9301      	str	r3, [sp, #4]
 8088142:	bd08      	pop	{r3, pc}
 8088144:	0804019c 	.word	0x0804019c

08088148 <HAL_RTC_Set_UnixTime>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
 8088148:	b508      	push	{r3, lr}
 808814a:	4b02      	ldr	r3, [pc, #8]	; (8088154 <HAL_RTC_Set_UnixTime+0xc>)
 808814c:	681b      	ldr	r3, [r3, #0]
 808814e:	6a1b      	ldr	r3, [r3, #32]
 8088150:	9301      	str	r3, [sp, #4]
 8088152:	bd08      	pop	{r3, pc}
 8088154:	0804019c 	.word	0x0804019c

08088158 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 8088158:	b508      	push	{r3, lr}
 808815a:	4b02      	ldr	r3, [pc, #8]	; (8088164 <HAL_EEPROM_Init+0xc>)
 808815c:	681b      	ldr	r3, [r3, #0]
 808815e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8088160:	9301      	str	r3, [sp, #4]
 8088162:	bd08      	pop	{r3, pc}
 8088164:	0804019c 	.word	0x0804019c

08088168 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
 8088168:	b508      	push	{r3, lr}
 808816a:	4b02      	ldr	r3, [pc, #8]	; (8088174 <HAL_EEPROM_Get+0xc>)
 808816c:	681b      	ldr	r3, [r3, #0]
 808816e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8088170:	9301      	str	r3, [sp, #4]
 8088172:	bd08      	pop	{r3, pc}
 8088174:	0804019c 	.word	0x0804019c

08088178 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 8088178:	b508      	push	{r3, lr}
 808817a:	4b02      	ldr	r3, [pc, #8]	; (8088184 <HAL_EEPROM_Put+0xc>)
 808817c:	681b      	ldr	r3, [r3, #0]
 808817e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8088180:	9301      	str	r3, [sp, #4]
 8088182:	bd08      	pop	{r3, pc}
 8088184:	0804019c 	.word	0x0804019c

08088188 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 8088188:	b508      	push	{r3, lr}
 808818a:	4b02      	ldr	r3, [pc, #8]	; (8088194 <HAL_RTC_Time_Is_Valid+0xc>)
 808818c:	681b      	ldr	r3, [r3, #0]
 808818e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8088190:	9301      	str	r3, [sp, #4]
 8088192:	bd08      	pop	{r3, pc}
 8088194:	0804019c 	.word	0x0804019c

08088198 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 8088198:	b508      	push	{r3, lr}
 808819a:	4b02      	ldr	r3, [pc, #8]	; (80881a4 <os_mutex_create+0xc>)
 808819c:	681b      	ldr	r3, [r3, #0]
 808819e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80881a0:	9301      	str	r3, [sp, #4]
 80881a2:	bd08      	pop	{r3, pc}
 80881a4:	080401d0 	.word	0x080401d0

080881a8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80881a8:	b508      	push	{r3, lr}
 80881aa:	4b02      	ldr	r3, [pc, #8]	; (80881b4 <HAL_USART_Init+0xc>)
 80881ac:	681b      	ldr	r3, [r3, #0]
 80881ae:	699b      	ldr	r3, [r3, #24]
 80881b0:	9301      	str	r3, [sp, #4]
 80881b2:	bd08      	pop	{r3, pc}
 80881b4:	080401c4 	.word	0x080401c4

080881b8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80881b8:	b508      	push	{r3, lr}
 80881ba:	4b02      	ldr	r3, [pc, #8]	; (80881c4 <HAL_USART_Write_Data+0xc>)
 80881bc:	681b      	ldr	r3, [r3, #0]
 80881be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80881c0:	9301      	str	r3, [sp, #4]
 80881c2:	bd08      	pop	{r3, pc}
 80881c4:	080401c4 	.word	0x080401c4

080881c8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80881c8:	b508      	push	{r3, lr}
 80881ca:	4b02      	ldr	r3, [pc, #8]	; (80881d4 <HAL_USART_Available_Data+0xc>)
 80881cc:	681b      	ldr	r3, [r3, #0]
 80881ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80881d0:	9301      	str	r3, [sp, #4]
 80881d2:	bd08      	pop	{r3, pc}
 80881d4:	080401c4 	.word	0x080401c4

080881d8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80881d8:	b508      	push	{r3, lr}
 80881da:	4b02      	ldr	r3, [pc, #8]	; (80881e4 <HAL_USART_Read_Data+0xc>)
 80881dc:	681b      	ldr	r3, [r3, #0]
 80881de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80881e0:	9301      	str	r3, [sp, #4]
 80881e2:	bd08      	pop	{r3, pc}
 80881e4:	080401c4 	.word	0x080401c4

080881e8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80881e8:	b508      	push	{r3, lr}
 80881ea:	4b02      	ldr	r3, [pc, #8]	; (80881f4 <HAL_USART_Peek_Data+0xc>)
 80881ec:	681b      	ldr	r3, [r3, #0]
 80881ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80881f0:	9301      	str	r3, [sp, #4]
 80881f2:	bd08      	pop	{r3, pc}
 80881f4:	080401c4 	.word	0x080401c4

080881f8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80881f8:	b508      	push	{r3, lr}
 80881fa:	4b02      	ldr	r3, [pc, #8]	; (8088204 <HAL_USART_Flush_Data+0xc>)
 80881fc:	681b      	ldr	r3, [r3, #0]
 80881fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8088200:	9301      	str	r3, [sp, #4]
 8088202:	bd08      	pop	{r3, pc}
 8088204:	080401c4 	.word	0x080401c4

08088208 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 8088208:	b508      	push	{r3, lr}
 808820a:	4b02      	ldr	r3, [pc, #8]	; (8088214 <HAL_USART_Is_Enabled+0xc>)
 808820c:	681b      	ldr	r3, [r3, #0]
 808820e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8088210:	9301      	str	r3, [sp, #4]
 8088212:	bd08      	pop	{r3, pc}
 8088214:	080401c4 	.word	0x080401c4

08088218 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 8088218:	b508      	push	{r3, lr}
 808821a:	4b02      	ldr	r3, [pc, #8]	; (8088224 <HAL_USART_Available_Data_For_Write+0xc>)
 808821c:	681b      	ldr	r3, [r3, #0]
 808821e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8088220:	9301      	str	r3, [sp, #4]
 8088222:	bd08      	pop	{r3, pc}
 8088224:	080401c4 	.word	0x080401c4

08088228 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 8088228:	b508      	push	{r3, lr}
 808822a:	4b02      	ldr	r3, [pc, #8]	; (8088234 <HAL_USART_BeginConfig+0xc>)
 808822c:	681b      	ldr	r3, [r3, #0]
 808822e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8088230:	9301      	str	r3, [sp, #4]
 8088232:	bd08      	pop	{r3, pc}
 8088234:	080401c4 	.word	0x080401c4

08088238 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 8088238:	b508      	push	{r3, lr}
 808823a:	4b02      	ldr	r3, [pc, #8]	; (8088244 <HAL_I2C_Begin+0xc>)
 808823c:	681b      	ldr	r3, [r3, #0]
 808823e:	68db      	ldr	r3, [r3, #12]
 8088240:	9301      	str	r3, [sp, #4]
 8088242:	bd08      	pop	{r3, pc}
 8088244:	080401ac 	.word	0x080401ac

08088248 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 8088248:	b508      	push	{r3, lr}
 808824a:	4b02      	ldr	r3, [pc, #8]	; (8088254 <HAL_I2C_Request_Data+0xc>)
 808824c:	681b      	ldr	r3, [r3, #0]
 808824e:	695b      	ldr	r3, [r3, #20]
 8088250:	9301      	str	r3, [sp, #4]
 8088252:	bd08      	pop	{r3, pc}
 8088254:	080401ac 	.word	0x080401ac

08088258 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 8088258:	b508      	push	{r3, lr}
 808825a:	4b02      	ldr	r3, [pc, #8]	; (8088264 <HAL_I2C_Begin_Transmission+0xc>)
 808825c:	681b      	ldr	r3, [r3, #0]
 808825e:	699b      	ldr	r3, [r3, #24]
 8088260:	9301      	str	r3, [sp, #4]
 8088262:	bd08      	pop	{r3, pc}
 8088264:	080401ac 	.word	0x080401ac

08088268 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 8088268:	b508      	push	{r3, lr}
 808826a:	4b02      	ldr	r3, [pc, #8]	; (8088274 <HAL_I2C_End_Transmission+0xc>)
 808826c:	681b      	ldr	r3, [r3, #0]
 808826e:	69db      	ldr	r3, [r3, #28]
 8088270:	9301      	str	r3, [sp, #4]
 8088272:	bd08      	pop	{r3, pc}
 8088274:	080401ac 	.word	0x080401ac

08088278 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 8088278:	b508      	push	{r3, lr}
 808827a:	4b02      	ldr	r3, [pc, #8]	; (8088284 <HAL_I2C_Write_Data+0xc>)
 808827c:	681b      	ldr	r3, [r3, #0]
 808827e:	6a1b      	ldr	r3, [r3, #32]
 8088280:	9301      	str	r3, [sp, #4]
 8088282:	bd08      	pop	{r3, pc}
 8088284:	080401ac 	.word	0x080401ac

08088288 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 8088288:	b508      	push	{r3, lr}
 808828a:	4b02      	ldr	r3, [pc, #8]	; (8088294 <HAL_I2C_Available_Data+0xc>)
 808828c:	681b      	ldr	r3, [r3, #0]
 808828e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8088290:	9301      	str	r3, [sp, #4]
 8088292:	bd08      	pop	{r3, pc}
 8088294:	080401ac 	.word	0x080401ac

08088298 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 8088298:	b508      	push	{r3, lr}
 808829a:	4b02      	ldr	r3, [pc, #8]	; (80882a4 <HAL_I2C_Read_Data+0xc>)
 808829c:	681b      	ldr	r3, [r3, #0]
 808829e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80882a0:	9301      	str	r3, [sp, #4]
 80882a2:	bd08      	pop	{r3, pc}
 80882a4:	080401ac 	.word	0x080401ac

080882a8 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80882a8:	b508      	push	{r3, lr}
 80882aa:	4b02      	ldr	r3, [pc, #8]	; (80882b4 <HAL_I2C_Peek_Data+0xc>)
 80882ac:	681b      	ldr	r3, [r3, #0]
 80882ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80882b0:	9301      	str	r3, [sp, #4]
 80882b2:	bd08      	pop	{r3, pc}
 80882b4:	080401ac 	.word	0x080401ac

080882b8 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80882b8:	b508      	push	{r3, lr}
 80882ba:	4b02      	ldr	r3, [pc, #8]	; (80882c4 <HAL_I2C_Flush_Data+0xc>)
 80882bc:	681b      	ldr	r3, [r3, #0]
 80882be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80882c0:	9301      	str	r3, [sp, #4]
 80882c2:	bd08      	pop	{r3, pc}
 80882c4:	080401ac 	.word	0x080401ac

080882c8 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80882c8:	b508      	push	{r3, lr}
 80882ca:	4b02      	ldr	r3, [pc, #8]	; (80882d4 <HAL_I2C_Is_Enabled+0xc>)
 80882cc:	681b      	ldr	r3, [r3, #0]
 80882ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80882d0:	9301      	str	r3, [sp, #4]
 80882d2:	bd08      	pop	{r3, pc}
 80882d4:	080401ac 	.word	0x080401ac

080882d8 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80882d8:	b508      	push	{r3, lr}
 80882da:	4b02      	ldr	r3, [pc, #8]	; (80882e4 <HAL_I2C_Init+0xc>)
 80882dc:	681b      	ldr	r3, [r3, #0]
 80882de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80882e0:	9301      	str	r3, [sp, #4]
 80882e2:	bd08      	pop	{r3, pc}
 80882e4:	080401ac 	.word	0x080401ac

080882e8 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
 80882e8:	b508      	push	{r3, lr}
 80882ea:	4b02      	ldr	r3, [pc, #8]	; (80882f4 <HAL_I2C_Acquire+0xc>)
 80882ec:	681b      	ldr	r3, [r3, #0]
 80882ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80882f0:	9301      	str	r3, [sp, #4]
 80882f2:	bd08      	pop	{r3, pc}
 80882f4:	080401ac 	.word	0x080401ac

080882f8 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
 80882f8:	b508      	push	{r3, lr}
 80882fa:	4b02      	ldr	r3, [pc, #8]	; (8088304 <HAL_I2C_Release+0xc>)
 80882fc:	681b      	ldr	r3, [r3, #0]
 80882fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8088300:	9301      	str	r3, [sp, #4]
 8088302:	bd08      	pop	{r3, pc}
 8088304:	080401ac 	.word	0x080401ac

08088308 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 8088308:	b508      	push	{r3, lr}
 808830a:	4b02      	ldr	r3, [pc, #8]	; (8088314 <inet_gethostbyname+0xc>)
 808830c:	681b      	ldr	r3, [r3, #0]
 808830e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8088310:	9301      	str	r3, [sp, #4]
 8088312:	bd08      	pop	{r3, pc}
 8088314:	08060020 	.word	0x08060020

08088318 <cellular_command>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 8088318:	b508      	push	{r3, lr}
 808831a:	4b02      	ldr	r3, [pc, #8]	; (8088324 <cellular_command+0xc>)
 808831c:	681b      	ldr	r3, [r3, #0]
 808831e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8088320:	9301      	str	r3, [sp, #4]
 8088322:	bd08      	pop	{r3, pc}
 8088324:	08060020 	.word	0x08060020

08088328 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8088328:	b508      	push	{r3, lr}
 808832a:	4b02      	ldr	r3, [pc, #8]	; (8088334 <HAL_USB_USART_Init+0xc>)
 808832c:	681b      	ldr	r3, [r3, #0]
 808832e:	681b      	ldr	r3, [r3, #0]
 8088330:	9301      	str	r3, [sp, #4]
 8088332:	bd08      	pop	{r3, pc}
 8088334:	0806001c 	.word	0x0806001c

08088338 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 8088338:	b508      	push	{r3, lr}
 808833a:	4b02      	ldr	r3, [pc, #8]	; (8088344 <HAL_USB_USART_Begin+0xc>)
 808833c:	681b      	ldr	r3, [r3, #0]
 808833e:	685b      	ldr	r3, [r3, #4]
 8088340:	9301      	str	r3, [sp, #4]
 8088342:	bd08      	pop	{r3, pc}
 8088344:	0806001c 	.word	0x0806001c

08088348 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8088348:	b508      	push	{r3, lr}
 808834a:	4b02      	ldr	r3, [pc, #8]	; (8088354 <HAL_USB_USART_Available_Data+0xc>)
 808834c:	681b      	ldr	r3, [r3, #0]
 808834e:	691b      	ldr	r3, [r3, #16]
 8088350:	9301      	str	r3, [sp, #4]
 8088352:	bd08      	pop	{r3, pc}
 8088354:	0806001c 	.word	0x0806001c

08088358 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8088358:	b508      	push	{r3, lr}
 808835a:	4b02      	ldr	r3, [pc, #8]	; (8088364 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 808835c:	681b      	ldr	r3, [r3, #0]
 808835e:	695b      	ldr	r3, [r3, #20]
 8088360:	9301      	str	r3, [sp, #4]
 8088362:	bd08      	pop	{r3, pc}
 8088364:	0806001c 	.word	0x0806001c

08088368 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8088368:	b508      	push	{r3, lr}
 808836a:	4b02      	ldr	r3, [pc, #8]	; (8088374 <HAL_USB_USART_Receive_Data+0xc>)
 808836c:	681b      	ldr	r3, [r3, #0]
 808836e:	699b      	ldr	r3, [r3, #24]
 8088370:	9301      	str	r3, [sp, #4]
 8088372:	bd08      	pop	{r3, pc}
 8088374:	0806001c 	.word	0x0806001c

08088378 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8088378:	b508      	push	{r3, lr}
 808837a:	4b02      	ldr	r3, [pc, #8]	; (8088384 <HAL_USB_USART_Send_Data+0xc>)
 808837c:	681b      	ldr	r3, [r3, #0]
 808837e:	69db      	ldr	r3, [r3, #28]
 8088380:	9301      	str	r3, [sp, #4]
 8088382:	bd08      	pop	{r3, pc}
 8088384:	0806001c 	.word	0x0806001c

08088388 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8088388:	b508      	push	{r3, lr}
 808838a:	4b02      	ldr	r3, [pc, #8]	; (8088394 <HAL_USB_USART_Flush_Data+0xc>)
 808838c:	681b      	ldr	r3, [r3, #0]
 808838e:	6a1b      	ldr	r3, [r3, #32]
 8088390:	9301      	str	r3, [sp, #4]
 8088392:	bd08      	pop	{r3, pc}
 8088394:	0806001c 	.word	0x0806001c

08088398 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 8088398:	b508      	push	{r3, lr}
 808839a:	4b02      	ldr	r3, [pc, #8]	; (80883a4 <log_message_v+0xc>)
 808839c:	681b      	ldr	r3, [r3, #0]
 808839e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80883a0:	9301      	str	r3, [sp, #4]
 80883a2:	bd08      	pop	{r3, pc}
 80883a4:	080201a0 	.word	0x080201a0

080883a8 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80883a8:	b508      	push	{r3, lr}
 80883aa:	4b02      	ldr	r3, [pc, #8]	; (80883b4 <system_mode+0xc>)
 80883ac:	681b      	ldr	r3, [r3, #0]
 80883ae:	681b      	ldr	r3, [r3, #0]
 80883b0:	9301      	str	r3, [sp, #4]
 80883b2:	bd08      	pop	{r3, pc}
 80883b4:	080401a4 	.word	0x080401a4

080883b8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80883b8:	b508      	push	{r3, lr}
 80883ba:	4b02      	ldr	r3, [pc, #8]	; (80883c4 <set_system_mode+0xc>)
 80883bc:	681b      	ldr	r3, [r3, #0]
 80883be:	685b      	ldr	r3, [r3, #4]
 80883c0:	9301      	str	r3, [sp, #4]
 80883c2:	bd08      	pop	{r3, pc}
 80883c4:	080401a4 	.word	0x080401a4

080883c8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80883c8:	b508      	push	{r3, lr}
 80883ca:	4b02      	ldr	r3, [pc, #8]	; (80883d4 <system_delay_ms+0xc>)
 80883cc:	681b      	ldr	r3, [r3, #0]
 80883ce:	695b      	ldr	r3, [r3, #20]
 80883d0:	9301      	str	r3, [sp, #4]
 80883d2:	bd08      	pop	{r3, pc}
 80883d4:	080401a4 	.word	0x080401a4

080883d8 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80883d8:	b508      	push	{r3, lr}
 80883da:	4b02      	ldr	r3, [pc, #8]	; (80883e4 <system_thread_set_state+0xc>)
 80883dc:	681b      	ldr	r3, [r3, #0]
 80883de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80883e0:	9301      	str	r3, [sp, #4]
 80883e2:	bd08      	pop	{r3, pc}
 80883e4:	080401a4 	.word	0x080401a4

080883e8 <system_version_info>:
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
 80883e8:	b508      	push	{r3, lr}
 80883ea:	4b02      	ldr	r3, [pc, #8]	; (80883f4 <system_version_info+0xc>)
 80883ec:	681b      	ldr	r3, [r3, #0]
 80883ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80883f0:	9301      	str	r3, [sp, #4]
 80883f2:	bd08      	pop	{r3, pc}
 80883f4:	080401a4 	.word	0x080401a4

080883f8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80883f8:	b508      	push	{r3, lr}
 80883fa:	4b02      	ldr	r3, [pc, #8]	; (8088404 <application_thread_current+0xc>)
 80883fc:	681b      	ldr	r3, [r3, #0]
 80883fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8088400:	9301      	str	r3, [sp, #4]
 8088402:	bd08      	pop	{r3, pc}
 8088404:	080401a4 	.word	0x080401a4

08088408 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 8088408:	b508      	push	{r3, lr}
 808840a:	4b02      	ldr	r3, [pc, #8]	; (8088414 <application_thread_invoke+0xc>)
 808840c:	681b      	ldr	r3, [r3, #0]
 808840e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8088410:	9301      	str	r3, [sp, #4]
 8088412:	bd08      	pop	{r3, pc}
 8088414:	080401a4 	.word	0x080401a4

08088418 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 8088418:	b508      	push	{r3, lr}
 808841a:	4b02      	ldr	r3, [pc, #8]	; (8088424 <system_thread_get_state+0xc>)
 808841c:	681b      	ldr	r3, [r3, #0]
 808841e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8088420:	9301      	str	r3, [sp, #4]
 8088422:	bd08      	pop	{r3, pc}
 8088424:	080401a4 	.word	0x080401a4

08088428 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
 8088428:	b508      	push	{r3, lr}
 808842a:	4b02      	ldr	r3, [pc, #8]	; (8088434 <system_notify_time_changed+0xc>)
 808842c:	681b      	ldr	r3, [r3, #0]
 808842e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8088430:	9301      	str	r3, [sp, #4]
 8088432:	bd08      	pop	{r3, pc}
 8088434:	080401a4 	.word	0x080401a4

08088438 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8088438:	b508      	push	{r3, lr}
 808843a:	4b03      	ldr	r3, [pc, #12]	; (8088448 <system_ctrl_set_app_request_handler+0x10>)
 808843c:	681b      	ldr	r3, [r3, #0]
 808843e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8088442:	9301      	str	r3, [sp, #4]
 8088444:	bd08      	pop	{r3, pc}
 8088446:	0000      	.short	0x0000
 8088448:	080401a4 	.word	0x080401a4

0808844c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 808844c:	b508      	push	{r3, lr}
 808844e:	4b03      	ldr	r3, [pc, #12]	; (808845c <system_ctrl_set_result+0x10>)
 8088450:	681b      	ldr	r3, [r3, #0]
 8088452:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8088456:	9301      	str	r3, [sp, #4]
 8088458:	bd08      	pop	{r3, pc}
 808845a:	0000      	.short	0x0000
 808845c:	080401a4 	.word	0x080401a4

08088460 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8088460:	b508      	push	{r3, lr}
 8088462:	4b02      	ldr	r3, [pc, #8]	; (808846c <network_connect+0xc>)
 8088464:	681b      	ldr	r3, [r3, #0]
 8088466:	685b      	ldr	r3, [r3, #4]
 8088468:	9301      	str	r3, [sp, #4]
 808846a:	bd08      	pop	{r3, pc}
 808846c:	080401c8 	.word	0x080401c8

08088470 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8088470:	b508      	push	{r3, lr}
 8088472:	4b02      	ldr	r3, [pc, #8]	; (808847c <network_connecting+0xc>)
 8088474:	681b      	ldr	r3, [r3, #0]
 8088476:	689b      	ldr	r3, [r3, #8]
 8088478:	9301      	str	r3, [sp, #4]
 808847a:	bd08      	pop	{r3, pc}
 808847c:	080401c8 	.word	0x080401c8

08088480 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8088480:	b508      	push	{r3, lr}
 8088482:	4b02      	ldr	r3, [pc, #8]	; (808848c <network_disconnect+0xc>)
 8088484:	681b      	ldr	r3, [r3, #0]
 8088486:	68db      	ldr	r3, [r3, #12]
 8088488:	9301      	str	r3, [sp, #4]
 808848a:	bd08      	pop	{r3, pc}
 808848c:	080401c8 	.word	0x080401c8

08088490 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8088490:	b508      	push	{r3, lr}
 8088492:	4b02      	ldr	r3, [pc, #8]	; (808849c <network_ready+0xc>)
 8088494:	681b      	ldr	r3, [r3, #0]
 8088496:	691b      	ldr	r3, [r3, #16]
 8088498:	9301      	str	r3, [sp, #4]
 808849a:	bd08      	pop	{r3, pc}
 808849c:	080401c8 	.word	0x080401c8

080884a0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80884a0:	b508      	push	{r3, lr}
 80884a2:	4b02      	ldr	r3, [pc, #8]	; (80884ac <network_on+0xc>)
 80884a4:	681b      	ldr	r3, [r3, #0]
 80884a6:	695b      	ldr	r3, [r3, #20]
 80884a8:	9301      	str	r3, [sp, #4]
 80884aa:	bd08      	pop	{r3, pc}
 80884ac:	080401c8 	.word	0x080401c8

080884b0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80884b0:	b508      	push	{r3, lr}
 80884b2:	4b02      	ldr	r3, [pc, #8]	; (80884bc <network_off+0xc>)
 80884b4:	681b      	ldr	r3, [r3, #0]
 80884b6:	699b      	ldr	r3, [r3, #24]
 80884b8:	9301      	str	r3, [sp, #4]
 80884ba:	bd08      	pop	{r3, pc}
 80884bc:	080401c8 	.word	0x080401c8

080884c0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80884c0:	b508      	push	{r3, lr}
 80884c2:	4b02      	ldr	r3, [pc, #8]	; (80884cc <network_listen+0xc>)
 80884c4:	681b      	ldr	r3, [r3, #0]
 80884c6:	69db      	ldr	r3, [r3, #28]
 80884c8:	9301      	str	r3, [sp, #4]
 80884ca:	bd08      	pop	{r3, pc}
 80884cc:	080401c8 	.word	0x080401c8

080884d0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80884d0:	b508      	push	{r3, lr}
 80884d2:	4b02      	ldr	r3, [pc, #8]	; (80884dc <network_listening+0xc>)
 80884d4:	681b      	ldr	r3, [r3, #0]
 80884d6:	6a1b      	ldr	r3, [r3, #32]
 80884d8:	9301      	str	r3, [sp, #4]
 80884da:	bd08      	pop	{r3, pc}
 80884dc:	080401c8 	.word	0x080401c8

080884e0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80884e0:	b508      	push	{r3, lr}
 80884e2:	4b02      	ldr	r3, [pc, #8]	; (80884ec <network_set_listen_timeout+0xc>)
 80884e4:	681b      	ldr	r3, [r3, #0]
 80884e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80884e8:	9301      	str	r3, [sp, #4]
 80884ea:	bd08      	pop	{r3, pc}
 80884ec:	080401c8 	.word	0x080401c8

080884f0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80884f0:	b508      	push	{r3, lr}
 80884f2:	4b02      	ldr	r3, [pc, #8]	; (80884fc <network_get_listen_timeout+0xc>)
 80884f4:	681b      	ldr	r3, [r3, #0]
 80884f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80884f8:	9301      	str	r3, [sp, #4]
 80884fa:	bd08      	pop	{r3, pc}
 80884fc:	080401c8 	.word	0x080401c8

08088500 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 8088500:	b508      	push	{r3, lr}
 8088502:	4b02      	ldr	r3, [pc, #8]	; (808850c <spark_variable+0xc>)
 8088504:	681b      	ldr	r3, [r3, #0]
 8088506:	681b      	ldr	r3, [r3, #0]
 8088508:	9301      	str	r3, [sp, #4]
 808850a:	bd08      	pop	{r3, pc}
 808850c:	080401cc 	.word	0x080401cc

08088510 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 8088510:	b508      	push	{r3, lr}
 8088512:	4b02      	ldr	r3, [pc, #8]	; (808851c <spark_function+0xc>)
 8088514:	681b      	ldr	r3, [r3, #0]
 8088516:	685b      	ldr	r3, [r3, #4]
 8088518:	9301      	str	r3, [sp, #4]
 808851a:	bd08      	pop	{r3, pc}
 808851c:	080401cc 	.word	0x080401cc

08088520 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 8088520:	b508      	push	{r3, lr}
 8088522:	4b02      	ldr	r3, [pc, #8]	; (808852c <spark_process+0xc>)
 8088524:	681b      	ldr	r3, [r3, #0]
 8088526:	689b      	ldr	r3, [r3, #8]
 8088528:	9301      	str	r3, [sp, #4]
 808852a:	bd08      	pop	{r3, pc}
 808852c:	080401cc 	.word	0x080401cc

08088530 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 8088530:	b508      	push	{r3, lr}
 8088532:	4b02      	ldr	r3, [pc, #8]	; (808853c <spark_cloud_flag_connect+0xc>)
 8088534:	681b      	ldr	r3, [r3, #0]
 8088536:	68db      	ldr	r3, [r3, #12]
 8088538:	9301      	str	r3, [sp, #4]
 808853a:	bd08      	pop	{r3, pc}
 808853c:	080401cc 	.word	0x080401cc

08088540 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 8088540:	b508      	push	{r3, lr}
 8088542:	4b02      	ldr	r3, [pc, #8]	; (808854c <spark_cloud_flag_connected+0xc>)
 8088544:	681b      	ldr	r3, [r3, #0]
 8088546:	695b      	ldr	r3, [r3, #20]
 8088548:	9301      	str	r3, [sp, #4]
 808854a:	bd08      	pop	{r3, pc}
 808854c:	080401cc 	.word	0x080401cc

08088550 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 8088550:	b508      	push	{r3, lr}
 8088552:	4b02      	ldr	r3, [pc, #8]	; (808855c <spark_send_event+0xc>)
 8088554:	681b      	ldr	r3, [r3, #0]
 8088556:	6a1b      	ldr	r3, [r3, #32]
 8088558:	9301      	str	r3, [sp, #4]
 808855a:	bd08      	pop	{r3, pc}
 808855c:	080401cc 	.word	0x080401cc

08088560 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 8088560:	b508      	push	{r3, lr}
 8088562:	4b02      	ldr	r3, [pc, #8]	; (808856c <spark_sync_time_pending+0xc>)
 8088564:	681b      	ldr	r3, [r3, #0]
 8088566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8088568:	9301      	str	r3, [sp, #4]
 808856a:	bd08      	pop	{r3, pc}
 808856c:	080401cc 	.word	0x080401cc

08088570 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8088570:	b508      	push	{r3, lr}
 8088572:	4b02      	ldr	r3, [pc, #8]	; (808857c <spark_set_random_seed_from_cloud_handler+0xc>)
 8088574:	681b      	ldr	r3, [r3, #0]
 8088576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8088578:	9301      	str	r3, [sp, #4]
 808857a:	bd08      	pop	{r3, pc}
 808857c:	080401cc 	.word	0x080401cc

08088580 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8088580:	b508      	push	{r3, lr}
 8088582:	4b02      	ldr	r3, [pc, #8]	; (808858c <malloc+0xc>)
 8088584:	681b      	ldr	r3, [r3, #0]
 8088586:	681b      	ldr	r3, [r3, #0]
 8088588:	9301      	str	r3, [sp, #4]
 808858a:	bd08      	pop	{r3, pc}
 808858c:	080401a0 	.word	0x080401a0

08088590 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8088590:	b508      	push	{r3, lr}
 8088592:	4b02      	ldr	r3, [pc, #8]	; (808859c <free+0xc>)
 8088594:	681b      	ldr	r3, [r3, #0]
 8088596:	685b      	ldr	r3, [r3, #4]
 8088598:	9301      	str	r3, [sp, #4]
 808859a:	bd08      	pop	{r3, pc}
 808859c:	080401a0 	.word	0x080401a0

080885a0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80885a0:	b508      	push	{r3, lr}
 80885a2:	4b02      	ldr	r3, [pc, #8]	; (80885ac <realloc+0xc>)
 80885a4:	681b      	ldr	r3, [r3, #0]
 80885a6:	689b      	ldr	r3, [r3, #8]
 80885a8:	9301      	str	r3, [sp, #4]
 80885aa:	bd08      	pop	{r3, pc}
 80885ac:	080401a0 	.word	0x080401a0

080885b0 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 80885b0:	b508      	push	{r3, lr}
 80885b2:	4b02      	ldr	r3, [pc, #8]	; (80885bc <sprintf+0xc>)
 80885b4:	681b      	ldr	r3, [r3, #0]
 80885b6:	68db      	ldr	r3, [r3, #12]
 80885b8:	9301      	str	r3, [sp, #4]
 80885ba:	bd08      	pop	{r3, pc}
 80885bc:	080401a0 	.word	0x080401a0

080885c0 <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 80885c0:	b508      	push	{r3, lr}
 80885c2:	4b02      	ldr	r3, [pc, #8]	; (80885cc <siprintf+0xc>)
 80885c4:	681b      	ldr	r3, [r3, #0]
 80885c6:	691b      	ldr	r3, [r3, #16]
 80885c8:	9301      	str	r3, [sp, #4]
 80885ca:	bd08      	pop	{r3, pc}
 80885cc:	080401a0 	.word	0x080401a0

080885d0 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80885d0:	b508      	push	{r3, lr}
 80885d2:	4b02      	ldr	r3, [pc, #8]	; (80885dc <siscanf+0xc>)
 80885d4:	681b      	ldr	r3, [r3, #0]
 80885d6:	699b      	ldr	r3, [r3, #24]
 80885d8:	9301      	str	r3, [sp, #4]
 80885da:	bd08      	pop	{r3, pc}
 80885dc:	080401a0 	.word	0x080401a0

080885e0 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80885e0:	b508      	push	{r3, lr}
 80885e2:	4b02      	ldr	r3, [pc, #8]	; (80885ec <snprintf+0xc>)
 80885e4:	681b      	ldr	r3, [r3, #0]
 80885e6:	69db      	ldr	r3, [r3, #28]
 80885e8:	9301      	str	r3, [sp, #4]
 80885ea:	bd08      	pop	{r3, pc}
 80885ec:	080401a0 	.word	0x080401a0

080885f0 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
 80885f0:	b508      	push	{r3, lr}
 80885f2:	4b02      	ldr	r3, [pc, #8]	; (80885fc <sniprintf+0xc>)
 80885f4:	681b      	ldr	r3, [r3, #0]
 80885f6:	6a1b      	ldr	r3, [r3, #32]
 80885f8:	9301      	str	r3, [sp, #4]
 80885fa:	bd08      	pop	{r3, pc}
 80885fc:	080401a0 	.word	0x080401a0

08088600 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 8088600:	b508      	push	{r3, lr}
 8088602:	4b02      	ldr	r3, [pc, #8]	; (808860c <vsnprintf+0xc>)
 8088604:	681b      	ldr	r3, [r3, #0]
 8088606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8088608:	9301      	str	r3, [sp, #4]
 808860a:	bd08      	pop	{r3, pc}
 808860c:	080401a0 	.word	0x080401a0

08088610 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 8088610:	b508      	push	{r3, lr}
 8088612:	4b02      	ldr	r3, [pc, #8]	; (808861c <abort+0xc>)
 8088614:	681b      	ldr	r3, [r3, #0]
 8088616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8088618:	9301      	str	r3, [sp, #4]
 808861a:	bd08      	pop	{r3, pc}
 808861c:	080401a0 	.word	0x080401a0

08088620 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8088620:	b508      	push	{r3, lr}
 8088622:	4b02      	ldr	r3, [pc, #8]	; (808862c <_malloc_r+0xc>)
 8088624:	681b      	ldr	r3, [r3, #0]
 8088626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8088628:	9301      	str	r3, [sp, #4]
 808862a:	bd08      	pop	{r3, pc}
 808862c:	080401a0 	.word	0x080401a0

08088630 <_ZN4PMIC5beginEv>:
 * Description    : Initializes the I2C for the PMIC module
 * Input          : NONE
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
 8088630:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8088632:	f002 f857 	bl	808a6e4 <_Z20__fetch_global_Wire3v>
 * Input          : NONE
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
 8088636:	f001 fefb 	bl	808a430 <_ZN7TwoWire9isEnabledEv>
 808863a:	b918      	cbnz	r0, 8088644 <_ZN4PMIC5beginEv+0x14>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808863c:	f002 f852 	bl	808a6e4 <_Z20__fetch_global_Wire3v>
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
 8088640:	f001 fecc 	bl	808a3dc <_ZN7TwoWire5beginEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8088644:	f002 f84e 	bl	808a6e4 <_Z20__fetch_global_Wire3v>
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
    }
    return pmicWireInstance()->isEnabled();
}
 8088648:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
    }
    return pmicWireInstance()->isEnabled();
 808864c:	f001 bef0 	b.w	808a430 <_ZN7TwoWire9isEnabledEv>

08088650 <_ZN4PMIC4lockEv>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
 8088650:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8088652:	f002 f847 	bl	808a6e4 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}
 8088656:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
 808865a:	f001 beed 	b.w	808a438 <_ZN7TwoWire4lockEv>

0808865e <_ZN4PMICC1Eb>:

} // anonymous

#include <mutex>

PMIC::PMIC(bool _lock) :
 808865e:	b510      	push	{r4, lr}
 8088660:	4604      	mov	r4, r0
    lock_(_lock)
 8088662:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
 8088664:	b109      	cbz	r1, 808866a <_ZN4PMICC1Eb+0xc>
        lock();
 8088666:	f7ff fff3 	bl	8088650 <_ZN4PMIC4lockEv>
    }
}
 808866a:	4620      	mov	r0, r4
 808866c:	bd10      	pop	{r4, pc}

0808866e <_ZN4PMIC6unlockEv>:

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
 808866e:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8088670:	f002 f838 	bl	808a6e4 <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
}
 8088674:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
 8088678:	f001 bee7 	b.w	808a44a <_ZN7TwoWire6unlockEv>

0808867c <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 808867c:	b510      	push	{r4, lr}
{
    if (lock_) {
 808867e:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 8088680:	4604      	mov	r4, r0
{
    if (lock_) {
 8088682:	b10b      	cbz	r3, 8088688 <_ZN4PMICD1Ev+0xc>
        unlock();
 8088684:	f7ff fff3 	bl	808866e <_ZN4PMIC6unlockEv>
    }
}
 8088688:	4620      	mov	r0, r4
 808868a:	bd10      	pop	{r4, pc}

0808868c <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 808868c:	b510      	push	{r4, lr}
 808868e:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 8088690:	6800      	ldr	r0, [r0, #0]
 8088692:	f7ff ffec 	bl	808866e <_ZN4PMIC6unlockEv>
 8088696:	4620      	mov	r0, r4
 8088698:	bd10      	pop	{r4, pc}

0808869a <_ZN4PMIC12readRegisterEh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
 808869a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808869c:	ac02      	add	r4, sp, #8
 808869e:	460d      	mov	r5, r1
 80886a0:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 80886a4:	f7ff ffd4 	bl	8088650 <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80886a8:	f002 f81c 	bl	808a6e4 <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 80886ac:	216b      	movs	r1, #107	; 0x6b
 80886ae:	f001 feb5 	bl	808a41c <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80886b2:	f002 f817 	bl	808a6e4 <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
 80886b6:	6803      	ldr	r3, [r0, #0]
 80886b8:	4629      	mov	r1, r5
 80886ba:	689b      	ldr	r3, [r3, #8]
 80886bc:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80886be:	f002 f811 	bl	808a6e4 <_Z20__fetch_global_Wire3v>
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);
 80886c2:	2101      	movs	r1, #1
 80886c4:	f001 fead 	bl	808a422 <_ZN7TwoWire15endTransmissionEh>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80886c8:	f002 f80c 	bl	808a6e4 <_Z20__fetch_global_Wire3v>
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
 80886cc:	2301      	movs	r3, #1
 80886ce:	461a      	mov	r2, r3
 80886d0:	216b      	movs	r1, #107	; 0x6b
 80886d2:	f001 fe9a 	bl	808a40a <_ZN7TwoWire11requestFromEiii>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80886d6:	f002 f805 	bl	808a6e4 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
 80886da:	6803      	ldr	r3, [r0, #0]
 80886dc:	695b      	ldr	r3, [r3, #20]
 80886de:	4798      	blx	r3
 80886e0:	4605      	mov	r5, r0
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
 80886e2:	4620      	mov	r0, r4
 80886e4:	f7ff ffd2 	bl	808868c <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
    return DATA;
}
 80886e8:	b2e8      	uxtb	r0, r5
 80886ea:	b003      	add	sp, #12
 80886ec:	bd30      	pop	{r4, r5, pc}

080886ee <_ZN4PMIC23readInputSourceRegisterEv>:
 * Input          : NONE
 * Return         :
 *******************************************************************************/
byte PMIC::readInputSourceRegister(void) {

    return readRegister(INPUT_SOURCE_REGISTER);
 80886ee:	2100      	movs	r1, #0
 80886f0:	f7ff bfd3 	b.w	808869a <_ZN4PMIC12readRegisterEh>

080886f4 <_ZN4PMIC20getInputCurrentLimitEv>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
uint16_t PMIC::getInputCurrentLimit(void) {
 80886f4:	b508      	push	{r3, lr}
        1200,
        1500,
        2000,
        3000
    };
    byte raw = readInputSourceRegister();
 80886f6:	f7ff fffa 	bl	80886ee <_ZN4PMIC23readInputSourceRegisterEv>
    raw &= 0x07;
    return mapping[raw];
}
 80886fa:	4b03      	ldr	r3, [pc, #12]	; (8088708 <_ZN4PMIC20getInputCurrentLimitEv+0x14>)
        2000,
        3000
    };
    byte raw = readInputSourceRegister();
    raw &= 0x07;
    return mapping[raw];
 80886fc:	f000 0007 	and.w	r0, r0, #7
}
 8088700:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8088704:	bd08      	pop	{r3, pc}
 8088706:	bf00      	nop
 8088708:	080917ec 	.word	0x080917ec

0808870c <_ZN4PMIC16getChargeCurrentEv>:
 * Return         :
 *******************************************************************************/
//TO DO: Return more meaningful value
byte PMIC::getChargeCurrent(void) {

    return readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 808870c:	2102      	movs	r1, #2
 808870e:	f7ff bfc4 	b.w	808869a <_ZN4PMIC12readRegisterEh>

08088712 <_ZN4PMIC15getSystemStatusEv>:
 * Return         :
 *******************************************************************************/
byte PMIC::getSystemStatus() {

    byte DATA = 0;
    DATA = readRegister(SYSTEM_STATUS_REGISTER);
 8088712:	2108      	movs	r1, #8
 8088714:	f7ff bfc1 	b.w	808869a <_ZN4PMIC12readRegisterEh>

08088718 <_ZN4PMIC8getFaultEv>:
 * Return         :
 *******************************************************************************/
byte PMIC::getFault() {

    byte DATA = 0;
    DATA = readRegister(FAULT_REGISTER);
 8088718:	2109      	movs	r1, #9
 808871a:	f7ff bfbe 	b.w	808869a <_ZN4PMIC12readRegisterEh>

0808871e <_ZN4PMIC13writeRegisterEhh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
 808871e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8088720:	ac02      	add	r4, sp, #8
 8088722:	4615      	mov	r5, r2
 8088724:	460e      	mov	r6, r1
 8088726:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 808872a:	f7ff ff91 	bl	8088650 <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808872e:	f001 ffd9 	bl	808a6e4 <_Z20__fetch_global_Wire3v>
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 8088732:	216b      	movs	r1, #107	; 0x6b
 8088734:	f001 fe72 	bl	808a41c <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8088738:	f001 ffd4 	bl	808a6e4 <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
 808873c:	6803      	ldr	r3, [r0, #0]
 808873e:	4631      	mov	r1, r6
 8088740:	689b      	ldr	r3, [r3, #8]
 8088742:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8088744:	f001 ffce 	bl	808a6e4 <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
 8088748:	6803      	ldr	r3, [r0, #0]
 808874a:	4629      	mov	r1, r5
 808874c:	689b      	ldr	r3, [r3, #8]
 808874e:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8088750:	f001 ffc8 	bl	808a6e4 <_Z20__fetch_global_Wire3v>
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
 8088754:	2101      	movs	r1, #1
 8088756:	f001 fe64 	bl	808a422 <_ZN7TwoWire15endTransmissionEh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
 808875a:	4620      	mov	r0, r4
 808875c:	f7ff ff96 	bl	808868c <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}
 8088760:	b002      	add	sp, #8
 8088762:	bd70      	pop	{r4, r5, r6, pc}

08088764 <_ZN4PMIC20setInputCurrentLimitEt>:
 * Function Name  : setInputCurrentLimit
 * Description    : Sets the input current limit for the PMIC
 * Input          : 100,150,500,900,1200,1500,2000,3000 (mAmp)
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
 8088764:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8088766:	4604      	mov	r4, r0
 8088768:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808876a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808876c:	f7ff ff70 	bl	8088650 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
 8088770:	2100      	movs	r1, #0
 8088772:	4620      	mov	r0, r4
 8088774:	f7ff ff91 	bl	808869a <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b11111000;

    switch (current) {
 8088778:	f5b5 7f61 	cmp.w	r5, #900	; 0x384
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b11111000;
 808877c:	f000 02f8 	and.w	r2, r0, #248	; 0xf8

    switch (current) {
 8088780:	d023      	beq.n	80887ca <_ZN4PMIC20setInputCurrentLimitEt+0x66>
 8088782:	d807      	bhi.n	8088794 <_ZN4PMIC20setInputCurrentLimitEt+0x30>
 8088784:	2d96      	cmp	r5, #150	; 0x96
 8088786:	d01a      	beq.n	80887be <_ZN4PMIC20setInputCurrentLimitEt+0x5a>
 8088788:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 808878c:	d01a      	beq.n	80887c4 <_ZN4PMIC20setInputCurrentLimitEt+0x60>
 808878e:	2d64      	cmp	r5, #100	; 0x64
 8088790:	d129      	bne.n	80887e6 <_ZN4PMIC20setInputCurrentLimitEt+0x82>
 8088792:	e022      	b.n	80887da <_ZN4PMIC20setInputCurrentLimitEt+0x76>
 8088794:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8088798:	429d      	cmp	r5, r3
 808879a:	d019      	beq.n	80887d0 <_ZN4PMIC20setInputCurrentLimitEt+0x6c>
 808879c:	d805      	bhi.n	80887aa <_ZN4PMIC20setInputCurrentLimitEt+0x46>
 808879e:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 80887a2:	d120      	bne.n	80887e6 <_ZN4PMIC20setInputCurrentLimitEt+0x82>
        case 900:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
        break;

        case 1200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
 80887a4:	f042 0204 	orr.w	r2, r2, #4
 80887a8:	e017      	b.n	80887da <_ZN4PMIC20setInputCurrentLimitEt+0x76>
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b11111000;

    switch (current) {
 80887aa:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 80887ae:	d012      	beq.n	80887d6 <_ZN4PMIC20setInputCurrentLimitEt+0x72>
 80887b0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80887b4:	429d      	cmp	r5, r3
 80887b6:	d116      	bne.n	80887e6 <_ZN4PMIC20setInputCurrentLimitEt+0x82>
        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
        break;

        case 3000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
 80887b8:	f042 0207 	orr.w	r2, r2, #7
 80887bc:	e00d      	b.n	80887da <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        case 100:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000000));
        break;

        case 150:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000001));
 80887be:	f042 0201 	orr.w	r2, r2, #1
 80887c2:	e00a      	b.n	80887da <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 500:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000010));
 80887c4:	f042 0202 	orr.w	r2, r2, #2
 80887c8:	e007      	b.n	80887da <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 900:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
 80887ca:	f042 0203 	orr.w	r2, r2, #3
 80887ce:	e004      	b.n	80887da <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        case 1200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
        break;

        case 1500:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
 80887d0:	f042 0205 	orr.w	r2, r2, #5
 80887d4:	e001      	b.n	80887da <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
 80887d6:	f042 0206 	orr.w	r2, r2, #6
 80887da:	4620      	mov	r0, r4
 80887dc:	2100      	movs	r1, #0
 80887de:	f7ff ff9e 	bl	808871e <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 80887e2:	2401      	movs	r4, #1
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
        break;

        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
        break;
 80887e4:	e000      	b.n	80887e8 <_ZN4PMIC20setInputCurrentLimitEt+0x84>
        case 3000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
        break;

        default:
        return 0; // return error since the value passed didn't match
 80887e6:	2400      	movs	r4, #0
 * Description    : Sets the input current limit for the PMIC
 * Input          : 100,150,500,900,1200,1500,2000,3000 (mAmp)
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
    std::lock_guard<PMIC> l(*this);
 80887e8:	a801      	add	r0, sp, #4
 80887ea:	f7ff ff4f 	bl	808868c <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 80887ee:	4620      	mov	r0, r4
 80887f0:	b003      	add	sp, #12
 80887f2:	bd30      	pop	{r4, r5, pc}

080887f4 <_ZN4PMIC10disableOTGEv>:
 * Function Name  : disableOTG
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableOTG(void) {
 80887f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80887f6:	4605      	mov	r5, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80887f8:	ac02      	add	r4, sp, #8
 80887fa:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 80887fe:	f7ff ff27 	bl	8088650 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
 8088802:	2101      	movs	r1, #1
 8088804:	4628      	mov	r0, r5
 8088806:	f7ff ff48 	bl	808869a <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
 808880a:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
    DATA = DATA | 0b00010000;
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
 808880e:	f042 0210 	orr.w	r2, r2, #16
 8088812:	2101      	movs	r1, #1
 8088814:	4628      	mov	r0, r5
 8088816:	f7ff ff82 	bl	808871e <_ZN4PMIC13writeRegisterEhh>
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableOTG(void) {
    std::lock_guard<PMIC> l(*this);
 808881a:	4620      	mov	r0, r4
 808881c:	f7ff ff36 	bl	808868c <_ZNSt10lock_guardI4PMICED1Ev>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
    DATA = DATA & 0b11001111;
    DATA = DATA | 0b00010000;
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
    return 1;
}
 8088820:	2001      	movs	r0, #1
 8088822:	b003      	add	sp, #12
 8088824:	bd30      	pop	{r4, r5, pc}

08088826 <_ZN4PMIC14enableChargingEv>:
 8088826:	f7ff bfe5 	b.w	80887f4 <_ZN4PMIC10disableOTGEv>

0808882a <_ZN4PMIC16setChargeCurrentEbbbbbb>:
                    For example,
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
 808882a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 808882c:	460c      	mov	r4, r1
 808882e:	4617      	mov	r7, r2
 8088830:	4605      	mov	r5, r0
 8088832:	461e      	mov	r6, r3
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8088834:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8088836:	f7ff ff0b 	bl	8088650 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte current = 0;
    if (bit7) current = current | 0b10000000;
 808883a:	2c00      	cmp	r4, #0
 808883c:	bf0c      	ite	eq
 808883e:	2400      	moveq	r4, #0
 8088840:	2480      	movne	r4, #128	; 0x80
    if (bit6) current = current | 0b01000000;
 8088842:	b117      	cbz	r7, 808884a <_ZN4PMIC16setChargeCurrentEbbbbbb+0x20>
 8088844:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8088848:	b2e4      	uxtb	r4, r4
    if (bit5) current = current | 0b00100000;
 808884a:	b10e      	cbz	r6, 8088850 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x26>
 808884c:	f044 0420 	orr.w	r4, r4, #32
    if (bit4) current = current | 0b00010000;
 8088850:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8088854:	b10b      	cbz	r3, 808885a <_ZN4PMIC16setChargeCurrentEbbbbbb+0x30>
 8088856:	f044 0410 	orr.w	r4, r4, #16
    if (bit3) current = current | 0b00001000;
 808885a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 808885e:	b10b      	cbz	r3, 8088864 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x3a>
 8088860:	f044 0408 	orr.w	r4, r4, #8
    if (bit2) current = current | 0b00000100;
 8088864:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8088868:	b10b      	cbz	r3, 808886e <_ZN4PMIC16setChargeCurrentEbbbbbb+0x44>
 808886a:	f044 0404 	orr.w	r4, r4, #4

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 808886e:	2102      	movs	r1, #2
 8088870:	4628      	mov	r0, r5
 8088872:	f7ff ff12 	bl	808869a <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
 8088876:	f000 0201 	and.w	r2, r0, #1
 808887a:	4322      	orrs	r2, r4
 808887c:	2102      	movs	r1, #2
 808887e:	4628      	mov	r0, r5
 8088880:	f7ff ff4d 	bl	808871e <_ZN4PMIC13writeRegisterEhh>
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
    std::lock_guard<PMIC> l(*this);
 8088884:	a801      	add	r0, sp, #4
 8088886:	f7ff ff01 	bl	808868c <_ZNSt10lock_guardI4PMICED1Ev>

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
    return 1;
}
 808888a:	2001      	movs	r0, #1
 808888c:	b003      	add	sp, #12
 808888e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08088890 <_ZN4PMIC16setChargeVoltageEt>:
                    4208 is the default
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
 8088890:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8088892:	4604      	mov	r4, r0
 8088894:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8088896:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8088898:	f7ff feda 	bl	8088650 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
 808889c:	2104      	movs	r1, #4
 808889e:	4620      	mov	r0, r4
 80888a0:	f7ff fefb 	bl	808869a <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b000000011;

    switch (voltage) {
 80888a4:	f241 0310 	movw	r3, #4112	; 0x1010
 80888a8:	429d      	cmp	r5, r3
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
    byte mask = DATA & 0b000000011;
 80888aa:	f000 0203 	and.w	r2, r0, #3

    switch (voltage) {
 80888ae:	d006      	beq.n	80888be <_ZN4PMIC16setChargeVoltageEt+0x2e>
 80888b0:	f241 0370 	movw	r3, #4208	; 0x1070
 80888b4:	429d      	cmp	r5, r3
 80888b6:	d10a      	bne.n	80888ce <_ZN4PMIC16setChargeVoltageEt+0x3e>
        case 4112:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
 80888b8:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
 80888bc:	e001      	b.n	80888c2 <_ZN4PMIC16setChargeVoltageEt+0x32>
    byte mask = DATA & 0b000000011;

    switch (voltage) {

        case 4112:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
 80888be:	f042 0298 	orr.w	r2, r2, #152	; 0x98
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
 80888c2:	4620      	mov	r0, r4
 80888c4:	2104      	movs	r1, #4
 80888c6:	f7ff ff2a 	bl	808871e <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 80888ca:	2401      	movs	r4, #1
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
        break;
 80888cc:	e000      	b.n	80888d0 <_ZN4PMIC16setChargeVoltageEt+0x40>

        default:
        return 0; // return error since the value passed didn't match
 80888ce:	2400      	movs	r4, #0
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
 80888d0:	a801      	add	r0, sp, #4
 80888d2:	f7ff fedb 	bl	808868c <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 80888d6:	4620      	mov	r0, r4
 80888d8:	b003      	add	sp, #12
 80888da:	bd30      	pop	{r4, r5, pc}

080888dc <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80888dc:	4770      	bx	lr

080888de <_ZN8SPIClassD0Ev>:
 80888de:	b510      	push	{r4, lr}
 80888e0:	4604      	mov	r4, r0
 80888e2:	2110      	movs	r1, #16
 80888e4:	f001 ff23 	bl	808a72e <_ZdlPvj>
 80888e8:	4620      	mov	r0, r4
 80888ea:	bd10      	pop	{r4, pc}

080888ec <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80888ec:	b570      	push	{r4, r5, r6, lr}
 80888ee:	4604      	mov	r4, r0
 80888f0:	460e      	mov	r6, r1
 80888f2:	4b07      	ldr	r3, [pc, #28]	; (8088910 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80888f4:	2500      	movs	r5, #0
 80888f6:	6003      	str	r3, [r0, #0]
 80888f8:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80888fc:	f7ff fc4c 	bl	8088198 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 8088900:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 8088902:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 8088904:	f7ff fbd8 	bl	80880b8 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 8088908:	60a5      	str	r5, [r4, #8]
}
 808890a:	4620      	mov	r0, r4
 808890c:	bd70      	pop	{r4, r5, r6, pc}
 808890e:	bf00      	nop
 8088910:	08091804 	.word	0x08091804

08088914 <_ZN8SPIClass5beginEt>:
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
}

void SPIClass::begin(uint16_t ss_pin)
{
  if (ss_pin >= TOTAL_PINS)
 8088914:	292e      	cmp	r1, #46	; 0x2e
 8088916:	d802      	bhi.n	808891e <_ZN8SPIClass5beginEt+0xa>
  {
    return;
  }

  HAL_SPI_Begin(_spi, ss_pin);
 8088918:	7900      	ldrb	r0, [r0, #4]
 808891a:	f7ff bba5 	b.w	8088068 <HAL_SPI_Begin>
 808891e:	4770      	bx	lr

08088920 <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 8088920:	7900      	ldrb	r0, [r0, #4]
 8088922:	f7ff bba9 	b.w	8088078 <HAL_SPI_Set_Bit_Order>

08088926 <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
 8088926:	7900      	ldrb	r0, [r0, #4]
 8088928:	f7ff bbae 	b.w	8088088 <HAL_SPI_Set_Data_Mode>

0808892c <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 808892c:	4a05      	ldr	r2, [pc, #20]	; (8088944 <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
 808892e:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 8088930:	5c99      	ldrb	r1, [r3, r2]
 8088932:	4281      	cmp	r1, r0
 8088934:	d002      	beq.n	808893c <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
 8088936:	3301      	adds	r3, #1
 8088938:	2b08      	cmp	r3, #8
 808893a:	d1f9      	bne.n	8088930 <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
 808893c:	1c58      	adds	r0, r3, #1
}
 808893e:	b2c0      	uxtb	r0, r0
 8088940:	4770      	bx	lr
 8088942:	bf00      	nop
 8088944:	0809180c 	.word	0x0809180c

08088948 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 8088948:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 808894a:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 808894c:	6018      	str	r0, [r3, #0]
 808894e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 8088950:	6818      	ldr	r0, [r3, #0]
 8088952:	b2e5      	uxtb	r5, r4
 8088954:	4288      	cmp	r0, r1
 8088956:	d906      	bls.n	8088966 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 8088958:	3401      	adds	r4, #1
 808895a:	2c08      	cmp	r4, #8
 808895c:	d002      	beq.n	8088964 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 808895e:	0840      	lsrs	r0, r0, #1
 8088960:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 8088962:	e7f5      	b.n	8088950 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 8088964:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 8088966:	4b02      	ldr	r3, [pc, #8]	; (8088970 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 8088968:	5d5b      	ldrb	r3, [r3, r5]
 808896a:	7013      	strb	r3, [r2, #0]
 808896c:	bd30      	pop	{r4, r5, pc}
 808896e:	bf00      	nop
 8088970:	0809180c 	.word	0x0809180c

08088974 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 8088974:	b570      	push	{r4, r5, r6, lr}
 8088976:	4604      	mov	r4, r0
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
 8088978:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 808897c:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
 808897e:	7906      	ldrb	r6, [r0, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 8088980:	2214      	movs	r2, #20
 8088982:	2100      	movs	r1, #0
 8088984:	a803      	add	r0, sp, #12
 8088986:	f003 fb99 	bl	808c0bc <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 808898a:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 808898c:	a903      	add	r1, sp, #12
 808898e:	4630      	mov	r0, r6
 8088990:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 8088992:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
 8088996:	f7ff fb9f 	bl	80880d8 <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
 808899a:	ab02      	add	r3, sp, #8
 808899c:	f10d 0207 	add.w	r2, sp, #7
 80889a0:	4629      	mov	r1, r5
 80889a2:	9804      	ldr	r0, [sp, #16]
 80889a4:	f7ff ffd0 	bl	8088948 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
 80889a8:	7920      	ldrb	r0, [r4, #4]
 80889aa:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80889ae:	f7ff fb73 	bl	8088098 <HAL_SPI_Set_Clock_Divider>
    return clock;
}
 80889b2:	9802      	ldr	r0, [sp, #8]
 80889b4:	b008      	add	sp, #32
 80889b6:	bd70      	pop	{r4, r5, r6, pc}

080889b8 <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80889b8:	b538      	push	{r3, r4, r5, lr}
 80889ba:	4604      	mov	r4, r0
    if (dividerReference)
 80889bc:	68a5      	ldr	r5, [r4, #8]
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80889be:	4608      	mov	r0, r1
    if (dividerReference)
 80889c0:	b14d      	cbz	r5, 80889d6 <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
 80889c2:	f7ff ffb3 	bl	808892c <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80889c6:	2201      	movs	r2, #1
 80889c8:	fa25 f100 	lsr.w	r1, r5, r0
 80889cc:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
 80889ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80889d2:	f7ff bfcf 	b.w	8088974 <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80889d6:	7920      	ldrb	r0, [r4, #4]
    }
}
 80889d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80889dc:	f7ff bb5c 	b.w	8088098 <HAL_SPI_Set_Clock_Divider>

080889e0 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80889e0:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 80889e2:	7900      	ldrb	r0, [r0, #4]
 80889e4:	f7ff fb60 	bl	80880a8 <HAL_SPI_Send_Receive_Data>
}
 80889e8:	b2c0      	uxtb	r0, r0
 80889ea:	bd08      	pop	{r3, pc}

080889ec <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 80889ec:	b530      	push	{r4, r5, lr}
 80889ee:	b087      	sub	sp, #28
 80889f0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80889f2:	4604      	mov	r4, r0
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
 80889f4:	7900      	ldrb	r0, [r0, #4]
 80889f6:	9500      	str	r5, [sp, #0]
 80889f8:	f7ff fb76 	bl	80880e8 <HAL_SPI_DMA_Transfer>
  if (user_callback == NULL) {
 80889fc:	b93d      	cbnz	r5, 8088a0e <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    HAL_SPI_TransferStatus st;
    do {
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
 80889fe:	a902      	add	r1, sp, #8
 8088a00:	7920      	ldrb	r0, [r4, #4]
 8088a02:	f7ff fb79 	bl	80880f8 <HAL_SPI_DMA_Transfer_Status>
void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
  if (user_callback == NULL) {
    HAL_SPI_TransferStatus st;
    do {
 8088a06:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8088a0a:	07db      	lsls	r3, r3, #31
 8088a0c:	d4f7      	bmi.n	80889fe <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
    } while(st.transfer_ongoing);
  }
}
 8088a0e:	b007      	add	sp, #28
 8088a10:	bd30      	pop	{r4, r5, pc}

08088a12 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 8088a12:	7900      	ldrb	r0, [r0, #4]
 8088a14:	f7ff bb58 	b.w	80880c8 <HAL_SPI_Is_Enabled>

08088a18 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8088a18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8088a1c:	4b03      	ldr	r3, [pc, #12]	; (8088a2c <_GLOBAL__sub_I_System+0x14>)
 8088a1e:	2000      	movs	r0, #0
 8088a20:	7018      	strb	r0, [r3, #0]
 8088a22:	8058      	strh	r0, [r3, #2]
 8088a24:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8088a26:	f7ff bcc7 	b.w	80883b8 <set_system_mode>
 8088a2a:	bf00      	nop
 8088a2c:	20000b9e 	.word	0x20000b9e

08088a30 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 8088a30:	b510      	push	{r4, lr}
 8088a32:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 8088a34:	f004 f8c2 	bl	808cbbc <strlen>
 8088a38:	3801      	subs	r0, #1
 8088a3a:	1823      	adds	r3, r4, r0
 8088a3c:	4620      	mov	r0, r4
	while(i<j){
 8088a3e:	4298      	cmp	r0, r3
 8088a40:	d206      	bcs.n	8088a50 <_Z11str_reversePc+0x20>
		c = *i;
 8088a42:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 8088a44:	7819      	ldrb	r1, [r3, #0]
 8088a46:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 8088a4a:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 8088a4e:	e7f6      	b.n	8088a3e <_Z11str_reversePc+0xe>
 8088a50:	bd10      	pop	{r4, pc}

08088a52 <ltoa>:
{
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
 8088a52:	1e93      	subs	r3, r2, #2
            base = 10;                    /* can only use 0-9, A-Z        */
 8088a54:	2b23      	cmp	r3, #35	; 0x23



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
 8088a56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8088a5a:	4615      	mov	r5, r2
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
 8088a5c:	bf34      	ite	cc
 8088a5e:	4615      	movcc	r5, r2
 8088a60:	250a      	movcs	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
 8088a62:	b08c      	sub	sp, #48	; 0x30
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
 8088a64:	2300      	movs	r3, #0

      if (10 == base && N < 0L)
 8088a66:	2d0a      	cmp	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
 8088a68:	460c      	mov	r4, r1
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
 8088a6a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c

      if (10 == base && N < 0L)
 8088a6e:	d107      	bne.n	8088a80 <ltoa+0x2e>
 8088a70:	4298      	cmp	r0, r3
 8088a72:	da05      	bge.n	8088a80 <ltoa+0x2e>
      {
            *head++ = '-';
 8088a74:	232d      	movs	r3, #45	; 0x2d
 8088a76:	f101 0801 	add.w	r8, r1, #1
 8088a7a:	700b      	strb	r3, [r1, #0]
            uarg    = -N;
 8088a7c:	4240      	negs	r0, r0
 8088a7e:	e001      	b.n	8088a84 <ltoa+0x32>
      }
      else  uarg = N;

      if (uarg)
 8088a80:	b1a8      	cbz	r0, 8088aae <ltoa+0x5c>
 8088a82:	46a0      	mov	r8, r4
 8088a84:	f10d 062b 	add.w	r6, sp, #43	; 0x2b
 8088a88:	2701      	movs	r7, #1
      {
            for (i = 1; uarg; ++i)
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
 8088a8a:	462a      	mov	r2, r5
 8088a8c:	4601      	mov	r1, r0
 8088a8e:	a801      	add	r0, sp, #4
 8088a90:	f003 fae2 	bl	808c058 <ldiv>
 8088a94:	9a02      	ldr	r2, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
 8088a96:	9801      	ldr	r0, [sp, #4]
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
 8088a98:	2a09      	cmp	r2, #9
 8088a9a:	bfcc      	ite	gt
 8088a9c:	2337      	movgt	r3, #55	; 0x37
 8088a9e:	2330      	movle	r3, #48	; 0x30
 8088aa0:	4413      	add	r3, r2
 8088aa2:	f806 3901 	strb.w	r3, [r6], #-1
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
 8088aa6:	3701      	adds	r7, #1
 8088aa8:	2800      	cmp	r0, #0
 8088aaa:	d1ee      	bne.n	8088a8a <ltoa+0x38>
 8088aac:	e006      	b.n	8088abc <ltoa+0x6a>
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';
 8088aae:	46a0      	mov	r8, r4
 8088ab0:	2330      	movs	r3, #48	; 0x30
 8088ab2:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8088ab6:	f10d 062a 	add.w	r6, sp, #42	; 0x2a


//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
      int i = 2;
 8088aba:	2702      	movs	r7, #2
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
 8088abc:	463a      	mov	r2, r7
 8088abe:	1c71      	adds	r1, r6, #1
 8088ac0:	4640      	mov	r0, r8
 8088ac2:	f003 faf0 	bl	808c0a6 <memcpy>
      return str;
}
 8088ac6:	4620      	mov	r0, r4
 8088ac8:	b00c      	add	sp, #48	; 0x30
 8088aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08088ace <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 8088ace:	b570      	push	{r4, r5, r6, lr}
 8088ad0:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 8088ad2:	1e91      	subs	r1, r2, #2
 8088ad4:	2922      	cmp	r1, #34	; 0x22
 8088ad6:	d820      	bhi.n	8088b1a <ultoa+0x4c>
 8088ad8:	4625      	mov	r5, r4
 8088ada:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 8088adc:	b910      	cbnz	r0, 8088ae4 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 8088ade:	4423      	add	r3, r4
            *ptr++ = '0';
 8088ae0:	2230      	movs	r2, #48	; 0x30
 8088ae2:	e00e      	b.n	8088b02 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 8088ae4:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 8088ae8:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 8088aec:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 8088aee:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 8088af0:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 8088af4:	bf94      	ite	ls
 8088af6:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 8088af8:	3157      	addhi	r1, #87	; 0x57
 8088afa:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 8088afe:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 8088b00:	e7eb      	b.n	8088ada <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 8088b02:	4299      	cmp	r1, r3
 8088b04:	d202      	bcs.n	8088b0c <ultoa+0x3e>
            *ptr++ = '0';
 8088b06:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 8088b0a:	e7fa      	b.n	8088b02 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 8088b0c:	2300      	movs	r3, #0
	str_reverse(buffer);
 8088b0e:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 8088b10:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 8088b12:	f7ff ff8d 	bl	8088a30 <_Z11str_reversePc>
	return buffer;
 8088b16:	4620      	mov	r0, r4
 8088b18:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 8088b1a:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 8088b1c:	bd70      	pop	{r4, r5, r6, pc}

08088b1e <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 8088b1e:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 8088b20:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 8088b22:	460c      	mov	r4, r1
 8088b24:	4615      	mov	r5, r2
	if(a<0){
 8088b26:	da0b      	bge.n	8088b40 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 8088b28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 8088b2c:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 8088b30:	bf14      	ite	ne
 8088b32:	4258      	negne	r0, r3
 8088b34:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 8088b36:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 8088b38:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
 8088b3a:	462a      	mov	r2, r5
 8088b3c:	4419      	add	r1, r3
 8088b3e:	e000      	b.n	8088b42 <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
 8088b40:	2301      	movs	r3, #1
 8088b42:	f7ff ffc4 	bl	8088ace <ultoa>
	}
	return buffer;
}
 8088b46:	4620      	mov	r0, r4
 8088b48:	bd38      	pop	{r3, r4, r5, pc}
	...

08088b4c <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 8088b4c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8088b50:	4680      	mov	r8, r0
 8088b52:	460d      	mov	r5, r1
 8088b54:	4617      	mov	r7, r2
 8088b56:	461e      	mov	r6, r3
    bool negative = val<0;
    if (negative) {
 8088b58:	2200      	movs	r2, #0
 8088b5a:	2300      	movs	r3, #0
 8088b5c:	4640      	mov	r0, r8
 8088b5e:	4629      	mov	r1, r5
 8088b60:	f002 fb5c 	bl	808b21c <__aeabi_dcmplt>
 8088b64:	b120      	cbz	r0, 8088b70 <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 8088b66:	232d      	movs	r3, #45	; 0x2d
 8088b68:	7033      	strb	r3, [r6, #0]
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
    bool negative = val<0;
    if (negative) {
        val = -val;
 8088b6a:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 8088b6e:	3601      	adds	r6, #1
 8088b70:	2300      	movs	r3, #0
    }
    long scale = 1;
 8088b72:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 8088b74:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 8088b76:	b2d9      	uxtb	r1, r3
 8088b78:	428f      	cmp	r7, r1
 8088b7a:	d902      	bls.n	8088b82 <_Z4dtoadhPc+0x36>
        scale *= 10;
 8088b7c:	4354      	muls	r4, r2
 8088b7e:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 8088b80:	e7f9      	b.n	8088b76 <_Z4dtoadhPc+0x2a>
        scale *= 10;
    val *= scale;   // capture all the significant digits
 8088b82:	4620      	mov	r0, r4
 8088b84:	f002 f872 	bl	808ac6c <__aeabi_i2d>
 8088b88:	4642      	mov	r2, r8
 8088b8a:	462b      	mov	r3, r5
 8088b8c:	f002 f8d4 	bl	808ad38 <__aeabi_dmul>
 8088b90:	4682      	mov	sl, r0
 8088b92:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
 8088b94:	f002 ff7a 	bl	808ba8c <__aeabi_d2ulz>
 8088b98:	4680      	mov	r8, r0
 8088b9a:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
 8088b9c:	f002 f896 	bl	808accc <__aeabi_ul2d>
 8088ba0:	4602      	mov	r2, r0
 8088ba2:	460b      	mov	r3, r1
 8088ba4:	4650      	mov	r0, sl
 8088ba6:	4659      	mov	r1, fp
 8088ba8:	f001 ff12 	bl	808a9d0 <__aeabi_dsub>
 8088bac:	2200      	movs	r2, #0
 8088bae:	4b17      	ldr	r3, [pc, #92]	; (8088c0c <_Z4dtoadhPc+0xc0>)
 8088bb0:	f002 fb48 	bl	808b244 <__aeabi_dcmpge>
 8088bb4:	b118      	cbz	r0, 8088bbe <_Z4dtoadhPc+0x72>
        fixed++;
 8088bb6:	f118 0801 	adds.w	r8, r8, #1
 8088bba:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
 8088bbe:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 8088bc0:	4622      	mov	r2, r4
 8088bc2:	462b      	mov	r3, r5
 8088bc4:	4640      	mov	r0, r8
 8088bc6:	4649      	mov	r1, r9
 8088bc8:	f002 ff48 	bl	808ba5c <__aeabi_uldivmod>
 8088bcc:	2301      	movs	r3, #1
 8088bce:	220a      	movs	r2, #10
 8088bd0:	4631      	mov	r1, r6
 8088bd2:	f7ff ff7c 	bl	8088ace <ultoa>
    if (prec) {
 8088bd6:	b1af      	cbz	r7, 8088c04 <_Z4dtoadhPc+0xb8>
        sout += strlen(sout);
 8088bd8:	4630      	mov	r0, r6
 8088bda:	f003 ffef 	bl	808cbbc <strlen>
        *sout++ = '.';
 8088bde:	232e      	movs	r3, #46	; 0x2e
 8088be0:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
 8088be2:	3001      	adds	r0, #1
 8088be4:	4406      	add	r6, r0
 8088be6:	4622      	mov	r2, r4
 8088be8:	462b      	mov	r3, r5
 8088bea:	4640      	mov	r0, r8
 8088bec:	4649      	mov	r1, r9
 8088bee:	f002 ff35 	bl	808ba5c <__aeabi_uldivmod>
 8088bf2:	463b      	mov	r3, r7
 8088bf4:	4610      	mov	r0, r2
 8088bf6:	4631      	mov	r1, r6
 8088bf8:	220a      	movs	r2, #10
    }
}
 8088bfa:	b001      	add	sp, #4
 8088bfc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
 8088c00:	f7ff bf65 	b.w	8088ace <ultoa>
    }
}
 8088c04:	b001      	add	sp, #4
 8088c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8088c0a:	bf00      	nop
 8088c0c:	3fe00000 	.word	0x3fe00000

08088c10 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8088c10:	b510      	push	{r4, lr}
 8088c12:	4604      	mov	r4, r0
{
	free(buffer);
 8088c14:	6800      	ldr	r0, [r0, #0]
 8088c16:	f7ff fcbb 	bl	8088590 <free>
}
 8088c1a:	4620      	mov	r0, r4
 8088c1c:	bd10      	pop	{r4, pc}

08088c1e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8088c1e:	b510      	push	{r4, lr}
 8088c20:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8088c22:	6800      	ldr	r0, [r0, #0]
 8088c24:	b108      	cbz	r0, 8088c2a <_ZN6String10invalidateEv+0xc>
 8088c26:	f7ff fcb3 	bl	8088590 <free>
	buffer = NULL;
 8088c2a:	2300      	movs	r3, #0
 8088c2c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 8088c2e:	60a3      	str	r3, [r4, #8]
 8088c30:	6063      	str	r3, [r4, #4]
 8088c32:	bd10      	pop	{r4, pc}

08088c34 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8088c34:	b538      	push	{r3, r4, r5, lr}
 8088c36:	4604      	mov	r4, r0
 8088c38:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8088c3a:	6800      	ldr	r0, [r0, #0]
 8088c3c:	3101      	adds	r1, #1
 8088c3e:	f7ff fcaf 	bl	80885a0 <realloc>
	if (newbuffer) {
 8088c42:	b110      	cbz	r0, 8088c4a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 8088c44:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 8088c48:	2001      	movs	r0, #1
	}
	return 0;
}
 8088c4a:	bd38      	pop	{r3, r4, r5, pc}

08088c4c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8088c4c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8088c4e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8088c50:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8088c52:	b113      	cbz	r3, 8088c5a <_ZN6String7reserveEj+0xe>
 8088c54:	6843      	ldr	r3, [r0, #4]
 8088c56:	428b      	cmp	r3, r1
 8088c58:	d207      	bcs.n	8088c6a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 8088c5a:	4620      	mov	r0, r4
 8088c5c:	f7ff ffea 	bl	8088c34 <_ZN6String12changeBufferEj>
 8088c60:	b120      	cbz	r0, 8088c6c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 8088c62:	68a3      	ldr	r3, [r4, #8]
 8088c64:	b90b      	cbnz	r3, 8088c6a <_ZN6String7reserveEj+0x1e>
 8088c66:	6822      	ldr	r2, [r4, #0]
 8088c68:	7013      	strb	r3, [r2, #0]
 8088c6a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 8088c6c:	bd10      	pop	{r4, pc}

08088c6e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8088c6e:	b570      	push	{r4, r5, r6, lr}
 8088c70:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8088c72:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8088c74:	4604      	mov	r4, r0
 8088c76:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8088c78:	f7ff ffe8 	bl	8088c4c <_ZN6String7reserveEj>
 8088c7c:	b918      	cbnz	r0, 8088c86 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 8088c7e:	4620      	mov	r0, r4
 8088c80:	f7ff ffcd 	bl	8088c1e <_ZN6String10invalidateEv>
		return *this;
 8088c84:	e009      	b.n	8088c9a <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 8088c86:	462a      	mov	r2, r5
 8088c88:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 8088c8a:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8088c8c:	6820      	ldr	r0, [r4, #0]
 8088c8e:	f003 fa0a 	bl	808c0a6 <memcpy>
	buffer[len] = 0;
 8088c92:	6822      	ldr	r2, [r4, #0]
 8088c94:	68a3      	ldr	r3, [r4, #8]
 8088c96:	2100      	movs	r1, #0
 8088c98:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 8088c9a:	4620      	mov	r0, r4
 8088c9c:	bd70      	pop	{r4, r5, r6, pc}

08088c9e <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8088c9e:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8088ca0:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8088ca2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8088ca4:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8088ca6:	6043      	str	r3, [r0, #4]
	len = 0;
 8088ca8:	6083      	str	r3, [r0, #8]
	flags = 0;
 8088caa:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 8088cac:	460d      	mov	r5, r1
 8088cae:	b139      	cbz	r1, 8088cc0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 8088cb0:	4608      	mov	r0, r1
 8088cb2:	f003 ff83 	bl	808cbbc <strlen>
 8088cb6:	4629      	mov	r1, r5
 8088cb8:	4602      	mov	r2, r0
 8088cba:	4620      	mov	r0, r4
 8088cbc:	f7ff ffd7 	bl	8088c6e <_ZN6String4copyEPKcj>
}
 8088cc0:	4620      	mov	r0, r4
 8088cc2:	bd38      	pop	{r3, r4, r5, pc}

08088cc4 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 8088cc4:	b538      	push	{r3, r4, r5, lr}
 8088cc6:	4605      	mov	r5, r0
	if (buffer) {
 8088cc8:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 8088cca:	460c      	mov	r4, r1
	if (buffer) {
 8088ccc:	b160      	cbz	r0, 8088ce8 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
 8088cce:	686a      	ldr	r2, [r5, #4]
 8088cd0:	688b      	ldr	r3, [r1, #8]
 8088cd2:	429a      	cmp	r2, r3
 8088cd4:	d306      	bcc.n	8088ce4 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
 8088cd6:	6809      	ldr	r1, [r1, #0]
 8088cd8:	f003 fa38 	bl	808c14c <strcpy>
			len = rhs.len;
 8088cdc:	68a3      	ldr	r3, [r4, #8]
 8088cde:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 8088ce0:	2300      	movs	r3, #0
 8088ce2:	e00a      	b.n	8088cfa <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
 8088ce4:	f7ff fc54 	bl	8088590 <free>
		}
	}
	buffer = rhs.buffer;
 8088ce8:	6823      	ldr	r3, [r4, #0]
 8088cea:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 8088cec:	6863      	ldr	r3, [r4, #4]
 8088cee:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 8088cf0:	68a3      	ldr	r3, [r4, #8]
 8088cf2:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 8088cf4:	2300      	movs	r3, #0
 8088cf6:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
 8088cf8:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
 8088cfa:	60a3      	str	r3, [r4, #8]
 8088cfc:	bd38      	pop	{r3, r4, r5, pc}

08088cfe <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8088cfe:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 8088d00:	b510      	push	{r4, lr}
 8088d02:	460b      	mov	r3, r1
 8088d04:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 8088d06:	d007      	beq.n	8088d18 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 8088d08:	6809      	ldr	r1, [r1, #0]
 8088d0a:	b119      	cbz	r1, 8088d14 <_ZN6StringaSERKS_+0x16>
 8088d0c:	689a      	ldr	r2, [r3, #8]
 8088d0e:	f7ff ffae 	bl	8088c6e <_ZN6String4copyEPKcj>
 8088d12:	e001      	b.n	8088d18 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 8088d14:	f7ff ff83 	bl	8088c1e <_ZN6String10invalidateEv>

	return *this;
}
 8088d18:	4620      	mov	r0, r4
 8088d1a:	bd10      	pop	{r4, pc}

08088d1c <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 8088d1c:	b510      	push	{r4, lr}
 8088d1e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8088d20:	2300      	movs	r3, #0
 8088d22:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8088d24:	6043      	str	r3, [r0, #4]
	len = 0;
 8088d26:	6083      	str	r3, [r0, #8]
	flags = 0;
 8088d28:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 8088d2a:	f7ff ffe8 	bl	8088cfe <_ZN6StringaSERKS_>
}
 8088d2e:	4620      	mov	r0, r4
 8088d30:	bd10      	pop	{r4, pc}

08088d32 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 8088d32:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
 8088d34:	b510      	push	{r4, lr}
 8088d36:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 8088d38:	d001      	beq.n	8088d3e <_ZN6StringaSEOS_+0xc>
 8088d3a:	f7ff ffc3 	bl	8088cc4 <_ZN6String4moveERS_>
	return *this;
}
 8088d3e:	4620      	mov	r0, r4
 8088d40:	bd10      	pop	{r4, pc}

08088d42 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 8088d42:	b538      	push	{r3, r4, r5, lr}
 8088d44:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 8088d46:	460c      	mov	r4, r1
 8088d48:	b141      	cbz	r1, 8088d5c <_ZN6StringaSEPKc+0x1a>
 8088d4a:	4608      	mov	r0, r1
 8088d4c:	f003 ff36 	bl	808cbbc <strlen>
 8088d50:	4621      	mov	r1, r4
 8088d52:	4602      	mov	r2, r0
 8088d54:	4628      	mov	r0, r5
 8088d56:	f7ff ff8a 	bl	8088c6e <_ZN6String4copyEPKcj>
 8088d5a:	e001      	b.n	8088d60 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 8088d5c:	f7ff ff5f 	bl	8088c1e <_ZN6String10invalidateEv>

	return *this;
}
 8088d60:	4628      	mov	r0, r5
 8088d62:	bd38      	pop	{r3, r4, r5, pc}

08088d64 <_ZN6StringC1Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
 8088d64:	b513      	push	{r0, r1, r4, lr}
 8088d66:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8088d68:	2300      	movs	r3, #0

String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
 8088d6a:	f88d 1004 	strb.w	r1, [sp, #4]
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8088d6e:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8088d70:	6043      	str	r3, [r0, #4]
	len = 0;
 8088d72:	6083      	str	r3, [r0, #8]
	flags = 0;
 8088d74:	7303      	strb	r3, [r0, #12]
{
	init();
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
 8088d76:	a901      	add	r1, sp, #4
String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 8088d78:	f88d 3005 	strb.w	r3, [sp, #5]
	*this = buf;
 8088d7c:	f7ff ffe1 	bl	8088d42 <_ZN6StringaSEPKc>
}
 8088d80:	4620      	mov	r0, r4
 8088d82:	b002      	add	sp, #8
 8088d84:	bd10      	pop	{r4, pc}

08088d86 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 8088d86:	b510      	push	{r4, lr}
 8088d88:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8088d8a:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 8088d8c:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8088d8e:	6023      	str	r3, [r4, #0]
	capacity = 0;
 8088d90:	6063      	str	r3, [r4, #4]
	len = 0;
 8088d92:	60a3      	str	r3, [r4, #8]
	flags = 0;
 8088d94:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 8088d96:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
 8088d98:	a901      	add	r1, sp, #4
 8088d9a:	f7ff fec0 	bl	8088b1e <itoa>
	*this = buf;
 8088d9e:	a901      	add	r1, sp, #4
 8088da0:	4620      	mov	r0, r4
 8088da2:	f7ff ffce 	bl	8088d42 <_ZN6StringaSEPKc>
}
 8088da6:	4620      	mov	r0, r4
 8088da8:	b00a      	add	sp, #40	; 0x28
 8088daa:	bd10      	pop	{r4, pc}

08088dac <_ZN6StringC1Elh>:
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
 8088dac:	b510      	push	{r4, lr}
 8088dae:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8088db0:	2300      	movs	r3, #0
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
 8088db2:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8088db4:	6023      	str	r3, [r4, #0]
	capacity = 0;
 8088db6:	6063      	str	r3, [r4, #4]
	len = 0;
 8088db8:	60a3      	str	r3, [r4, #8]
	flags = 0;
 8088dba:	7323      	strb	r3, [r4, #12]
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
 8088dbc:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	ltoa(value, buf, base);
 8088dbe:	a901      	add	r1, sp, #4
 8088dc0:	f7ff fe47 	bl	8088a52 <ltoa>
	*this = buf;
 8088dc4:	a901      	add	r1, sp, #4
 8088dc6:	4620      	mov	r0, r4
 8088dc8:	f7ff ffbb 	bl	8088d42 <_ZN6StringaSEPKc>
}
 8088dcc:	4620      	mov	r0, r4
 8088dce:	b00a      	add	sp, #40	; 0x28
 8088dd0:	bd10      	pop	{r4, pc}

08088dd2 <_ZN6StringC1Efi>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
 8088dd2:	b530      	push	{r4, r5, lr}
 8088dd4:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8088dd6:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
 8088dd8:	b08b      	sub	sp, #44	; 0x2c
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8088dda:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8088ddc:	6043      	str	r3, [r0, #4]
	len = 0;
 8088dde:	6083      	str	r3, [r0, #8]
	flags = 0;
 8088de0:	7303      	strb	r3, [r0, #12]

String::String(float value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
 8088de2:	b2d5      	uxtb	r5, r2
 8088de4:	4608      	mov	r0, r1
 8088de6:	f001 ff53 	bl	808ac90 <__aeabi_f2d>
 8088dea:	ab01      	add	r3, sp, #4
 8088dec:	462a      	mov	r2, r5
 8088dee:	f7ff fead 	bl	8088b4c <_Z4dtoadhPc>
        *this = buf;
 8088df2:	a901      	add	r1, sp, #4
 8088df4:	4620      	mov	r0, r4
 8088df6:	f7ff ffa4 	bl	8088d42 <_ZN6StringaSEPKc>
}
 8088dfa:	4620      	mov	r0, r4
 8088dfc:	b00b      	add	sp, #44	; 0x2c
 8088dfe:	bd30      	pop	{r4, r5, pc}

08088e00 <_ZN6StringC1Edi>:

String::String(double value, int decimalPlaces)
 8088e00:	b510      	push	{r4, lr}
 8088e02:	4604      	mov	r4, r0
 8088e04:	b08a      	sub	sp, #40	; 0x28
 8088e06:	4619      	mov	r1, r3
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8088e08:	2300      	movs	r3, #0
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
 8088e0a:	4610      	mov	r0, r2
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8088e0c:	6023      	str	r3, [r4, #0]
	capacity = 0;
 8088e0e:	6063      	str	r3, [r4, #4]
	len = 0;
 8088e10:	60a3      	str	r3, [r4, #8]
	flags = 0;
 8088e12:	7323      	strb	r3, [r4, #12]

String::String(double value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
 8088e14:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8088e18:	ab01      	add	r3, sp, #4
 8088e1a:	f7ff fe97 	bl	8088b4c <_Z4dtoadhPc>
        *this = buf;
 8088e1e:	a901      	add	r1, sp, #4
 8088e20:	4620      	mov	r0, r4
 8088e22:	f7ff ff8e 	bl	8088d42 <_ZN6StringaSEPKc>
}
 8088e26:	4620      	mov	r0, r4
 8088e28:	b00a      	add	sp, #40	; 0x28
 8088e2a:	bd10      	pop	{r4, pc}

08088e2c <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 8088e2c:	b570      	push	{r4, r5, r6, lr}
 8088e2e:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 8088e30:	460e      	mov	r6, r1
 8088e32:	b909      	cbnz	r1, 8088e38 <_ZN6String6concatEPKcj+0xc>
 8088e34:	2000      	movs	r0, #0
 8088e36:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 8088e38:	b16a      	cbz	r2, 8088e56 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 8088e3a:	6883      	ldr	r3, [r0, #8]
 8088e3c:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 8088e3e:	4629      	mov	r1, r5
 8088e40:	f7ff ff04 	bl	8088c4c <_ZN6String7reserveEj>
 8088e44:	2800      	cmp	r0, #0
 8088e46:	d0f5      	beq.n	8088e34 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 8088e48:	6820      	ldr	r0, [r4, #0]
 8088e4a:	68a3      	ldr	r3, [r4, #8]
 8088e4c:	4631      	mov	r1, r6
 8088e4e:	4418      	add	r0, r3
 8088e50:	f003 f97c 	bl	808c14c <strcpy>
	len = newlen;
 8088e54:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 8088e56:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 8088e58:	bd70      	pop	{r4, r5, r6, pc}

08088e5a <_ZN6String6concatERKS_>:
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
 8088e5a:	688a      	ldr	r2, [r1, #8]
 8088e5c:	6809      	ldr	r1, [r1, #0]
 8088e5e:	f7ff bfe5 	b.w	8088e2c <_ZN6String6concatEPKcj>

08088e62 <_ZN6String6concatEPKc>:
	len = newlen;
	return 1;
}

unsigned char String::concat(const char *cstr)
{
 8088e62:	b538      	push	{r3, r4, r5, lr}
 8088e64:	4605      	mov	r5, r0
	if (!cstr) return 0;
 8088e66:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
 8088e68:	4608      	mov	r0, r1
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
 8088e6a:	b141      	cbz	r1, 8088e7e <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
 8088e6c:	f003 fea6 	bl	808cbbc <strlen>
 8088e70:	4621      	mov	r1, r4
 8088e72:	4602      	mov	r2, r0
 8088e74:	4628      	mov	r0, r5
}
 8088e76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
 8088e7a:	f7ff bfd7 	b.w	8088e2c <_ZN6String6concatEPKcj>
}
 8088e7e:	bd38      	pop	{r3, r4, r5, pc}

08088e80 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
 8088e80:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 8088e82:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
 8088e84:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
 8088e88:	2201      	movs	r2, #1
 8088e8a:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 8088e8c:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 8088e90:	f7ff ffcc 	bl	8088e2c <_ZN6String6concatEPKcj>
}
 8088e94:	b003      	add	sp, #12
 8088e96:	f85d fb04 	ldr.w	pc, [sp], #4

08088e9a <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 8088e9a:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 8088e9c:	688a      	ldr	r2, [r1, #8]
 8088e9e:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 8088ea0:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 8088ea2:	f7ff ffc3 	bl	8088e2c <_ZN6String6concatEPKcj>
 8088ea6:	b910      	cbnz	r0, 8088eae <_ZplRK15StringSumHelperRK6String+0x14>
 8088ea8:	4620      	mov	r0, r4
 8088eaa:	f7ff feb8 	bl	8088c1e <_ZN6String10invalidateEv>
	return a;
}
 8088eae:	4620      	mov	r0, r4
 8088eb0:	bd10      	pop	{r4, pc}

08088eb2 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 8088eb2:	b538      	push	{r3, r4, r5, lr}
 8088eb4:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 8088eb6:	460d      	mov	r5, r1
 8088eb8:	b141      	cbz	r1, 8088ecc <_ZplRK15StringSumHelperPKc+0x1a>
 8088eba:	4608      	mov	r0, r1
 8088ebc:	f003 fe7e 	bl	808cbbc <strlen>
 8088ec0:	4629      	mov	r1, r5
 8088ec2:	4602      	mov	r2, r0
 8088ec4:	4620      	mov	r0, r4
 8088ec6:	f7ff ffb1 	bl	8088e2c <_ZN6String6concatEPKcj>
 8088eca:	b910      	cbnz	r0, 8088ed2 <_ZplRK15StringSumHelperPKc+0x20>
 8088ecc:	4620      	mov	r0, r4
 8088ece:	f7ff fea6 	bl	8088c1e <_ZN6String10invalidateEv>
	return a;
}
 8088ed2:	4620      	mov	r0, r4
 8088ed4:	bd38      	pop	{r3, r4, r5, pc}

08088ed6 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8088ed6:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8088ed8:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8088eda:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8088edc:	b912      	cbnz	r2, 8088ee4 <_ZNK6String6equalsEPKc+0xe>
 8088ede:	b919      	cbnz	r1, 8088ee8 <_ZNK6String6equalsEPKc+0x12>
 8088ee0:	2001      	movs	r0, #1
 8088ee2:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 8088ee4:	b911      	cbnz	r1, 8088eec <_ZNK6String6equalsEPKc+0x16>
 8088ee6:	6803      	ldr	r3, [r0, #0]
 8088ee8:	7818      	ldrb	r0, [r3, #0]
 8088eea:	e002      	b.n	8088ef2 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 8088eec:	6800      	ldr	r0, [r0, #0]
 8088eee:	f003 f923 	bl	808c138 <strcmp>
 8088ef2:	fab0 f080 	clz	r0, r0
 8088ef6:	0940      	lsrs	r0, r0, #5
}
 8088ef8:	bd08      	pop	{r3, pc}

08088efa <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 8088efa:	6883      	ldr	r3, [r0, #8]
 8088efc:	428b      	cmp	r3, r1
 8088efe:	d903      	bls.n	8088f08 <_ZNK6StringixEj+0xe>
 8088f00:	6800      	ldr	r0, [r0, #0]
 8088f02:	b110      	cbz	r0, 8088f0a <_ZNK6StringixEj+0x10>
	return buffer[index];
 8088f04:	5c40      	ldrb	r0, [r0, r1]
 8088f06:	4770      	bx	lr
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 8088f08:	2000      	movs	r0, #0
	return buffer[index];
}
 8088f0a:	4770      	bx	lr

08088f0c <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
 8088f0c:	f7ff bff5 	b.w	8088efa <_ZNK6StringixEj>

08088f10 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 8088f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8088f14:	461c      	mov	r4, r3
	if (left > right) {
 8088f16:	429a      	cmp	r2, r3
 8088f18:	bf88      	it	hi
 8088f1a:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 8088f1c:	460e      	mov	r6, r1
 8088f1e:	4615      	mov	r5, r2
	if (left > right) {
 8088f20:	bf88      	it	hi
 8088f22:	4625      	movhi	r5, r4
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 8088f24:	490d      	ldr	r1, [pc, #52]	; (8088f5c <_ZNK6String9substringEjj+0x4c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
 8088f26:	bf88      	it	hi
 8088f28:	461c      	movhi	r4, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 8088f2a:	4607      	mov	r7, r0
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 8088f2c:	f7ff feb7 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
 8088f30:	68b1      	ldr	r1, [r6, #8]
 8088f32:	428d      	cmp	r5, r1
 8088f34:	d80f      	bhi.n	8088f56 <_ZNK6String9substringEjj+0x46>
 8088f36:	428c      	cmp	r4, r1
 8088f38:	bf28      	it	cs
 8088f3a:	460c      	movcs	r4, r1
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
 8088f3c:	6833      	ldr	r3, [r6, #0]
	buffer[right] = '\0';
 8088f3e:	2200      	movs	r2, #0
		left = temp;
	}
	String out;
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
 8088f40:	f813 8004 	ldrb.w	r8, [r3, r4]
	buffer[right] = '\0';
 8088f44:	551a      	strb	r2, [r3, r4]
	out = buffer + left;  // pointer arithmetic
 8088f46:	6831      	ldr	r1, [r6, #0]
 8088f48:	4638      	mov	r0, r7
 8088f4a:	4429      	add	r1, r5
 8088f4c:	f7ff fef9 	bl	8088d42 <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
 8088f50:	6833      	ldr	r3, [r6, #0]
 8088f52:	f803 8004 	strb.w	r8, [r3, r4]
	return out;
}
 8088f56:	4638      	mov	r0, r7
 8088f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8088f5c:	080917cc 	.word	0x080917cc

08088f60 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 8088f60:	6800      	ldr	r0, [r0, #0]
 8088f62:	b108      	cbz	r0, 8088f68 <_ZNK6String5toIntEv+0x8>
 8088f64:	f002 bf6d 	b.w	808be42 <atol>
	return 0;
}
 8088f68:	4770      	bx	lr

08088f6a <_ZNK6String7toFloatEv>:


float String::toFloat(void) const
{
 8088f6a:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
 8088f6c:	6800      	ldr	r0, [r0, #0]
 8088f6e:	b120      	cbz	r0, 8088f7a <_ZNK6String7toFloatEv+0x10>
 8088f70:	f002 ff64 	bl	808be3c <atof>
 8088f74:	f002 f9d8 	bl	808b328 <__aeabi_d2f>
 8088f78:	bd08      	pop	{r3, pc}
	return 0;
 8088f7a:	2000      	movs	r0, #0
}
 8088f7c:	bd08      	pop	{r3, pc}
	...

08088f80 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
 8088f80:	b40e      	push	{r1, r2, r3}
 8088f82:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 8088f84:	ac09      	add	r4, sp, #36	; 0x24
 8088f86:	f854 7b04 	ldr.w	r7, [r4], #4
 8088f8a:	4605      	mov	r5, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 8088f8c:	4623      	mov	r3, r4
 8088f8e:	463a      	mov	r2, r7
 8088f90:	2105      	movs	r1, #5
 8088f92:	a802      	add	r0, sp, #8
}

String String::format(const char* fmt, ...)
{
    va_list marker;
    va_start(marker, fmt);
 8088f94:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 8088f96:	f7ff fb33 	bl	8088600 <vsnprintf>
 8088f9a:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 8088f9c:	490b      	ldr	r1, [pc, #44]	; (8088fcc <_ZN6String6formatEPKcz+0x4c>)
 8088f9e:	4628      	mov	r0, r5
 8088fa0:	f7ff fe7d 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
 8088fa4:	4631      	mov	r1, r6
 8088fa6:	4628      	mov	r0, r5
 8088fa8:	f7ff fe50 	bl	8088c4c <_ZN6String7reserveEj>
    if (result.buffer) {
 8088fac:	6828      	ldr	r0, [r5, #0]
 8088fae:	b130      	cbz	r0, 8088fbe <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 8088fb0:	4623      	mov	r3, r4
 8088fb2:	463a      	mov	r2, r7
 8088fb4:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
 8088fb6:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 8088fb8:	f7ff fb22 	bl	8088600 <vsnprintf>
        va_end(marker);
        result.len = n;
 8088fbc:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
 8088fbe:	4628      	mov	r0, r5
 8088fc0:	b004      	add	sp, #16
 8088fc2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8088fc6:	b003      	add	sp, #12
 8088fc8:	4770      	bx	lr
 8088fca:	bf00      	nop
 8088fcc:	080917cc 	.word	0x080917cc

08088fd0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8088fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8088fd2:	4606      	mov	r6, r0
 8088fd4:	460d      	mov	r5, r1
 8088fd6:	188f      	adds	r7, r1, r2
  size_t n = 0;
 8088fd8:	2400      	movs	r4, #0
  while (size--) {
 8088fda:	42bd      	cmp	r5, r7
 8088fdc:	d00c      	beq.n	8088ff8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 8088fde:	6833      	ldr	r3, [r6, #0]
 8088fe0:	f815 1b01 	ldrb.w	r1, [r5], #1
 8088fe4:	689b      	ldr	r3, [r3, #8]
 8088fe6:	4630      	mov	r0, r6
 8088fe8:	4798      	blx	r3
     if (chunk>=0)
 8088fea:	2800      	cmp	r0, #0
 8088fec:	db01      	blt.n	8088ff2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 8088fee:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 8088ff0:	e7f3      	b.n	8088fda <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8088ff2:	2c00      	cmp	r4, #0
 8088ff4:	bf08      	it	eq
 8088ff6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 8088ff8:	4620      	mov	r0, r4
 8088ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08088ffc <_ZN5Print5printEPKc>:
 8088ffc:	b508      	push	{r3, lr}
 8088ffe:	f7fe fa8f 	bl	8087520 <_ZN5Print5writeEPKc>
 8089002:	bd08      	pop	{r3, pc}

08089004 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8089004:	6803      	ldr	r3, [r0, #0]
 8089006:	689b      	ldr	r3, [r3, #8]
 8089008:	4718      	bx	r3

0808900a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 808900a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 808900c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 808900e:	4605      	mov	r5, r0
  size_t n = print('\r');
 8089010:	f7ff fff8 	bl	8089004 <_ZN5Print5printEc>
  n += print('\n');
 8089014:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 8089016:	4604      	mov	r4, r0
  n += print('\n');
 8089018:	4628      	mov	r0, r5
 808901a:	f7ff fff3 	bl	8089004 <_ZN5Print5printEc>
  return n;
}
 808901e:	4420      	add	r0, r4
 8089020:	bd38      	pop	{r3, r4, r5, pc}

08089022 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 8089022:	b538      	push	{r3, r4, r5, lr}
 8089024:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8089026:	f7fe fa7b 	bl	8087520 <_ZN5Print5writeEPKc>
 808902a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 808902c:	4628      	mov	r0, r5
 808902e:	f7ff ffec 	bl	808900a <_ZN5Print7printlnEv>
  return n;
}
 8089032:	4420      	add	r0, r4
 8089034:	bd38      	pop	{r3, r4, r5, pc}

08089036 <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
 8089036:	b538      	push	{r3, r4, r5, lr}
 8089038:	4605      	mov	r5, r0
  size_t n = print(c);
 808903a:	f7ff ffe3 	bl	8089004 <_ZN5Print5printEc>
 808903e:	4604      	mov	r4, r0
  n += println();
 8089040:	4628      	mov	r0, r5
 8089042:	f7ff ffe2 	bl	808900a <_ZN5Print7printlnEv>
  return n;
}
 8089046:	4420      	add	r0, r4
 8089048:	bd38      	pop	{r3, r4, r5, pc}

0808904a <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 808904a:	2a01      	cmp	r2, #1
 808904c:	bf98      	it	ls
 808904e:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 8089050:	b530      	push	{r4, r5, lr}
 8089052:	460b      	mov	r3, r1
 8089054:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8089056:	2100      	movs	r1, #0
 8089058:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 808905c:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 8089060:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 8089064:	fb05 3312 	mls	r3, r5, r2, r3
 8089068:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 808906a:	2b09      	cmp	r3, #9
 808906c:	bf94      	ite	ls
 808906e:	3330      	addls	r3, #48	; 0x30
 8089070:	3337      	addhi	r3, #55	; 0x37
 8089072:	b2db      	uxtb	r3, r3
 8089074:	4621      	mov	r1, r4
 8089076:	f804 3901 	strb.w	r3, [r4], #-1
 808907a:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 808907c:	2d00      	cmp	r5, #0
 808907e:	d1ef      	bne.n	8089060 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 8089080:	f7fe fa4e 	bl	8087520 <_ZN5Print5writeEPKc>
}
 8089084:	b00b      	add	sp, #44	; 0x2c
 8089086:	bd30      	pop	{r4, r5, pc}

08089088 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 8089088:	b410      	push	{r4}
  if (base == 0) return write(n);
 808908a:	b922      	cbnz	r2, 8089096 <_ZN5Print5printEmi+0xe>
 808908c:	6803      	ldr	r3, [r0, #0]
 808908e:	b2c9      	uxtb	r1, r1
 8089090:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 8089092:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 8089094:	4718      	bx	r3
  else return printNumber(n, base);
 8089096:	b2d2      	uxtb	r2, r2
}
 8089098:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 808909a:	f7ff bfd6 	b.w	808904a <_ZN5Print11printNumberEmh>

0808909e <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 808909e:	f7ff bff3 	b.w	8089088 <_ZN5Print5printEmi>

080890a2 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
 80890a2:	b538      	push	{r3, r4, r5, lr}
 80890a4:	4605      	mov	r5, r0
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80890a6:	f7ff ffef 	bl	8089088 <_ZN5Print5printEmi>
 80890aa:	4604      	mov	r4, r0
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
 80890ac:	4628      	mov	r0, r5
 80890ae:	f7ff ffac 	bl	808900a <_ZN5Print7printlnEv>
  return n;
}
 80890b2:	4420      	add	r0, r4
 80890b4:	bd38      	pop	{r3, r4, r5, pc}

080890b6 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80890b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80890ba:	4607      	mov	r7, r0
 80890bc:	460e      	mov	r6, r1
  if (base == 0) {
 80890be:	4615      	mov	r5, r2
 80890c0:	b92a      	cbnz	r2, 80890ce <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80890c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80890c6:	6803      	ldr	r3, [r0, #0]
 80890c8:	b2c9      	uxtb	r1, r1
 80890ca:	689b      	ldr	r3, [r3, #8]
 80890cc:	4718      	bx	r3
  } else if (base == 10) {
 80890ce:	2a0a      	cmp	r2, #10
 80890d0:	d102      	bne.n	80890d8 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80890d2:	2900      	cmp	r1, #0
 80890d4:	da01      	bge.n	80890da <_ZN5Print5printEli+0x24>
 80890d6:	e004      	b.n	80890e2 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80890d8:	b2d2      	uxtb	r2, r2
  }
}
 80890da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80890de:	f7ff bfb4 	b.w	808904a <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80890e2:	212d      	movs	r1, #45	; 0x2d
 80890e4:	f7ff ff8e 	bl	8089004 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80890e8:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80890ea:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80890ec:	4271      	negs	r1, r6
 80890ee:	4638      	mov	r0, r7
 80890f0:	f7ff ffab 	bl	808904a <_ZN5Print11printNumberEmh>
 80890f4:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80890f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080890fa <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80890fa:	f7ff bfdc 	b.w	80890b6 <_ZN5Print5printEli>

080890fe <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 80890fe:	b538      	push	{r3, r4, r5, lr}
 8089100:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 8089102:	f7ff ffd8 	bl	80890b6 <_ZN5Print5printEli>
 8089106:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 8089108:	4628      	mov	r0, r5
 808910a:	f7ff ff7e 	bl	808900a <_ZN5Print7printlnEv>
  return n;
}
 808910e:	4420      	add	r0, r4
 8089110:	bd38      	pop	{r3, r4, r5, pc}
	...

08089114 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 8089114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 8089118:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 808911a:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 808911c:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 808911e:	4617      	mov	r7, r2
 8089120:	461e      	mov	r6, r3
 8089122:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 8089126:	f002 f8a1 	bl	808b26c <__aeabi_dcmpun>
 808912a:	b108      	cbz	r0, 8089130 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808912c:	4947      	ldr	r1, [pc, #284]	; (808924c <_ZN5Print10printFloatEdh+0x138>)
 808912e:	e012      	b.n	8089156 <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 8089130:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8089134:	f04f 32ff 	mov.w	r2, #4294967295
 8089138:	4b45      	ldr	r3, [pc, #276]	; (8089250 <_ZN5Print10printFloatEdh+0x13c>)
 808913a:	4638      	mov	r0, r7
 808913c:	4621      	mov	r1, r4
 808913e:	f002 f895 	bl	808b26c <__aeabi_dcmpun>
 8089142:	b968      	cbnz	r0, 8089160 <_ZN5Print10printFloatEdh+0x4c>
 8089144:	f04f 32ff 	mov.w	r2, #4294967295
 8089148:	4b41      	ldr	r3, [pc, #260]	; (8089250 <_ZN5Print10printFloatEdh+0x13c>)
 808914a:	4638      	mov	r0, r7
 808914c:	4621      	mov	r1, r4
 808914e:	f002 f86f 	bl	808b230 <__aeabi_dcmple>
 8089152:	b928      	cbnz	r0, 8089160 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8089154:	493f      	ldr	r1, [pc, #252]	; (8089254 <_ZN5Print10printFloatEdh+0x140>)
 8089156:	4640      	mov	r0, r8
 8089158:	f7fe f9e2 	bl	8087520 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 808915c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 8089160:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8089164:	4b3c      	ldr	r3, [pc, #240]	; (8089258 <_ZN5Print10printFloatEdh+0x144>)
 8089166:	4638      	mov	r0, r7
 8089168:	4631      	mov	r1, r6
 808916a:	f002 f875 	bl	808b258 <__aeabi_dcmpgt>
 808916e:	b108      	cbz	r0, 8089174 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8089170:	493a      	ldr	r1, [pc, #232]	; (808925c <_ZN5Print10printFloatEdh+0x148>)
 8089172:	e7f0      	b.n	8089156 <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 8089174:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8089178:	4b39      	ldr	r3, [pc, #228]	; (8089260 <_ZN5Print10printFloatEdh+0x14c>)
 808917a:	4638      	mov	r0, r7
 808917c:	4631      	mov	r1, r6
 808917e:	f002 f84d 	bl	808b21c <__aeabi_dcmplt>
 8089182:	2800      	cmp	r0, #0
 8089184:	d1f4      	bne.n	8089170 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 8089186:	2200      	movs	r2, #0
 8089188:	2300      	movs	r3, #0
 808918a:	4638      	mov	r0, r7
 808918c:	4631      	mov	r1, r6
 808918e:	f002 f845 	bl	808b21c <__aeabi_dcmplt>
 8089192:	b138      	cbz	r0, 80891a4 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 8089194:	212d      	movs	r1, #45	; 0x2d
 8089196:	4640      	mov	r0, r8
 8089198:	f7ff ff34 	bl	8089004 <_ZN5Print5printEc>
     number = -number;
 808919c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80891a0:	4604      	mov	r4, r0
 80891a2:	e000      	b.n	80891a6 <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80891a4:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80891a6:	492f      	ldr	r1, [pc, #188]	; (8089264 <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80891a8:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80891ac:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80891ae:	fa5f f389 	uxtb.w	r3, r9
 80891b2:	429d      	cmp	r5, r3
 80891b4:	d906      	bls.n	80891c4 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80891b6:	2200      	movs	r2, #0
 80891b8:	4b2b      	ldr	r3, [pc, #172]	; (8089268 <_ZN5Print10printFloatEdh+0x154>)
 80891ba:	f001 fee7 	bl	808af8c <__aeabi_ddiv>
 80891be:	f109 0901 	add.w	r9, r9, #1
 80891c2:	e7f4      	b.n	80891ae <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80891c4:	463a      	mov	r2, r7
 80891c6:	4633      	mov	r3, r6
 80891c8:	f001 fc04 	bl	808a9d4 <__adddf3>
 80891cc:	460f      	mov	r7, r1
 80891ce:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80891d0:	f002 f88a 	bl	808b2e8 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80891d4:	220a      	movs	r2, #10
 80891d6:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80891d8:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80891da:	4640      	mov	r0, r8
 80891dc:	f7ff ff35 	bl	808904a <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80891e0:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80891e2:	b37d      	cbz	r5, 8089244 <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80891e4:	4648      	mov	r0, r9
 80891e6:	f001 fd31 	bl	808ac4c <__aeabi_ui2d>
 80891ea:	4602      	mov	r2, r0
 80891ec:	460b      	mov	r3, r1
 80891ee:	4630      	mov	r0, r6
 80891f0:	4639      	mov	r1, r7
 80891f2:	f001 fbed 	bl	808a9d0 <__aeabi_dsub>
 80891f6:	4606      	mov	r6, r0
 80891f8:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80891fa:	4640      	mov	r0, r8
 80891fc:	491b      	ldr	r1, [pc, #108]	; (808926c <_ZN5Print10printFloatEdh+0x158>)
 80891fe:	f7fe f98f 	bl	8087520 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 8089202:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 8089204:	4b18      	ldr	r3, [pc, #96]	; (8089268 <_ZN5Print10printFloatEdh+0x154>)
 8089206:	2200      	movs	r2, #0
 8089208:	4630      	mov	r0, r6
 808920a:	4639      	mov	r1, r7
 808920c:	f001 fd94 	bl	808ad38 <__aeabi_dmul>
 8089210:	460f      	mov	r7, r1
 8089212:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 8089214:	f002 f840 	bl	808b298 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 8089218:	220a      	movs	r2, #10
 808921a:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 808921c:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 808921e:	4640      	mov	r0, r8
 8089220:	f7ff ff49 	bl	80890b6 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 8089224:	4404      	add	r4, r0
    remainder -= toPrint;
 8089226:	4648      	mov	r0, r9
 8089228:	f001 fd20 	bl	808ac6c <__aeabi_i2d>
 808922c:	4602      	mov	r2, r0
 808922e:	460b      	mov	r3, r1
 8089230:	4630      	mov	r0, r6
 8089232:	4639      	mov	r1, r7
 8089234:	f001 fbcc 	bl	808a9d0 <__aeabi_dsub>
 8089238:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 808923a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 808923e:	4606      	mov	r6, r0
 8089240:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 8089242:	d1df      	bne.n	8089204 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 8089244:	4620      	mov	r0, r4
 8089246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808924a:	bf00      	nop
 808924c:	08091814 	.word	0x08091814
 8089250:	7fefffff 	.word	0x7fefffff
 8089254:	0809181c 	.word	0x0809181c
 8089258:	41efffff 	.word	0x41efffff
 808925c:	08091818 	.word	0x08091818
 8089260:	c1efffff 	.word	0xc1efffff
 8089264:	3fe00000 	.word	0x3fe00000
 8089268:	40240000 	.word	0x40240000
 808926c:	08090fcf 	.word	0x08090fcf

08089270 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 8089270:	b537      	push	{r0, r1, r2, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 8089272:	f89d 1018 	ldrb.w	r1, [sp, #24]
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 8089276:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 8089278:	9100      	str	r1, [sp, #0]
 808927a:	f7ff ff4b 	bl	8089114 <_ZN5Print10printFloatEdh>
 808927e:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
 8089280:	4628      	mov	r0, r5
 8089282:	f7ff fec2 	bl	808900a <_ZN5Print7printlnEv>
  return n;
}
 8089286:	4420      	add	r0, r4
 8089288:	b003      	add	sp, #12
 808928a:	bd30      	pop	{r4, r5, pc}

0808928c <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 808928c:	b40c      	push	{r2, r3}
 808928e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8089292:	b087      	sub	sp, #28
 8089294:	af00      	add	r7, sp, #0
 8089296:	f107 0438 	add.w	r4, r7, #56	; 0x38
 808929a:	f854 9b04 	ldr.w	r9, [r4], #4
 808929e:	4605      	mov	r5, r0
 80892a0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 80892a2:	4623      	mov	r3, r4
 80892a4:	464a      	mov	r2, r9
 80892a6:	2114      	movs	r1, #20
 80892a8:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 80892aa:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 80892ac:	f7ff f9a8 	bl	8088600 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 80892b0:	2813      	cmp	r0, #19
 80892b2:	d805      	bhi.n	80892c0 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80892b4:	1d39      	adds	r1, r7, #4
 80892b6:	4628      	mov	r0, r5
 80892b8:	f7fe f932 	bl	8087520 <_ZN5Print5writeEPKc>
 80892bc:	4604      	mov	r4, r0
 80892be:	e013      	b.n	80892e8 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80892c0:	f100 0308 	add.w	r3, r0, #8
 80892c4:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 80892c8:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80892ca:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 80892ce:	1c41      	adds	r1, r0, #1
 80892d0:	4623      	mov	r3, r4
 80892d2:	464a      	mov	r2, r9
 80892d4:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 80892d6:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 80892d8:	f7ff f992 	bl	8088600 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80892dc:	4669      	mov	r1, sp
 80892de:	4628      	mov	r0, r5
 80892e0:	f7fe f91e 	bl	8087520 <_ZN5Print5writeEPKc>
 80892e4:	4604      	mov	r4, r0
 80892e6:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 80892e8:	b11e      	cbz	r6, 80892f2 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 80892ea:	4628      	mov	r0, r5
 80892ec:	f7ff fe8d 	bl	808900a <_ZN5Print7printlnEv>
 80892f0:	4404      	add	r4, r0
    return n;
}
 80892f2:	4620      	mov	r0, r4
 80892f4:	371c      	adds	r7, #28
 80892f6:	46bd      	mov	sp, r7
 80892f8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80892fc:	b002      	add	sp, #8
 80892fe:	4770      	bx	lr

08089300 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
 8089300:	b510      	push	{r4, lr}
 8089302:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8089304:	f7fe ff10 	bl	8088128 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
 8089308:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 808930a:	6823      	ldr	r3, [r4, #0]
 808930c:	4620      	mov	r0, r4
 808930e:	695b      	ldr	r3, [r3, #20]
 8089310:	4798      	blx	r3
    if (c >= 0) return c;
 8089312:	2800      	cmp	r0, #0
 8089314:	da08      	bge.n	8089328 <_ZN6Stream9timedReadEv+0x28>
 8089316:	f7fe ff07 	bl	8088128 <HAL_Timer_Get_Milli_Seconds>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
 808931a:	68e3      	ldr	r3, [r4, #12]
 808931c:	1ac0      	subs	r0, r0, r3
 808931e:	68a3      	ldr	r3, [r4, #8]
 8089320:	4298      	cmp	r0, r3
 8089322:	d3f2      	bcc.n	808930a <_ZN6Stream9timedReadEv+0xa>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
 8089324:	f04f 30ff 	mov.w	r0, #4294967295
}
 8089328:	bd10      	pop	{r4, pc}

0808932a <_ZN6Stream10setTimeoutEm>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(system_tick_t timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
 808932a:	6081      	str	r1, [r0, #8]
 808932c:	4770      	bx	lr
	...

08089330 <_ZN6Stream10readStringEv>:
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
 8089330:	b538      	push	{r3, r4, r5, lr}
 8089332:	460d      	mov	r5, r1
  String ret;
 8089334:	4907      	ldr	r1, [pc, #28]	; (8089354 <_ZN6Stream10readStringEv+0x24>)
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
 8089336:	4604      	mov	r4, r0
  String ret;
 8089338:	f7ff fcb1 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
 808933c:	4628      	mov	r0, r5
 808933e:	f7ff ffdf 	bl	8089300 <_ZN6Stream9timedReadEv>
  while (c >= 0)
 8089342:	2800      	cmp	r0, #0
 8089344:	db04      	blt.n	8089350 <_ZN6Stream10readStringEv+0x20>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
 8089346:	b2c1      	uxtb	r1, r0
 8089348:	4620      	mov	r0, r4
 808934a:	f7ff fd99 	bl	8088e80 <_ZN6String6concatEc>
 808934e:	e7f5      	b.n	808933c <_ZN6Stream10readStringEv+0xc>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
 8089350:	4620      	mov	r0, r4
 8089352:	bd38      	pop	{r3, r4, r5, pc}
 8089354:	080917cc 	.word	0x080917cc

08089358 <_ZN6Stream15readStringUntilEc>:

String Stream::readStringUntil(char terminator)
{
 8089358:	b570      	push	{r4, r5, r6, lr}
 808935a:	460d      	mov	r5, r1
  String ret;
 808935c:	4909      	ldr	r1, [pc, #36]	; (8089384 <_ZN6Stream15readStringUntilEc+0x2c>)
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
 808935e:	4604      	mov	r4, r0
 8089360:	4616      	mov	r6, r2
  String ret;
 8089362:	f7ff fc9c 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
 8089366:	4628      	mov	r0, r5
 8089368:	f7ff ffca 	bl	8089300 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
 808936c:	2800      	cmp	r0, #0
 808936e:	db06      	blt.n	808937e <_ZN6Stream15readStringUntilEc+0x26>
 8089370:	42b0      	cmp	r0, r6
 8089372:	d004      	beq.n	808937e <_ZN6Stream15readStringUntilEc+0x26>
 8089374:	b2c1      	uxtb	r1, r0
 8089376:	4620      	mov	r0, r4
 8089378:	f7ff fd82 	bl	8088e80 <_ZN6String6concatEc>
 808937c:	e7f3      	b.n	8089366 <_ZN6Stream15readStringUntilEc+0xe>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
 808937e:	4620      	mov	r0, r4
 8089380:	bd70      	pop	{r4, r5, r6, pc}
 8089382:	bf00      	nop
 8089384:	080917cc 	.word	0x080917cc

08089388 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 8089388:	680b      	ldr	r3, [r1, #0]
 808938a:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 808938c:	b113      	cbz	r3, 8089394 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 808938e:	685a      	ldr	r2, [r3, #4]
 8089390:	3201      	adds	r2, #1
 8089392:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 8089394:	4770      	bx	lr
	...

08089398 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8089398:	4a01      	ldr	r2, [pc, #4]	; (80893a0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 808939a:	4b02      	ldr	r3, [pc, #8]	; (80893a4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 808939c:	601a      	str	r2, [r3, #0]
 808939e:	4770      	bx	lr
 80893a0:	08091893 	.word	0x08091893
 80893a4:	20000ba4 	.word	0x20000ba4

080893a8 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80893a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 80893aa:	4b14      	ldr	r3, [pc, #80]	; (80893fc <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80893ac:	4f14      	ldr	r7, [pc, #80]	; (8089400 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80893ae:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 80893b0:	4b14      	ldr	r3, [pc, #80]	; (8089404 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80893b2:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 80893b4:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 80893b6:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 80893b8:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 80893ba:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80893bc:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80893be:	d01b      	beq.n	80893f8 <_ZL22Refresh_UnixTime_Cachel+0x50>
 80893c0:	a80a      	add	r0, sp, #40	; 0x28
 80893c2:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 80893c6:	f002 fd4f 	bl	808be68 <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 80893ca:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80893cc:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 80893ce:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80893d0:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80893d4:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 80893d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80893d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80893da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80893dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80893de:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80893e2:	4c09      	ldr	r4, [pc, #36]	; (8089408 <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 80893e4:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80893e8:	ad01      	add	r5, sp, #4
 80893ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80893ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80893ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80893f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 80893f2:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80893f4:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 80893f8:	b00b      	add	sp, #44	; 0x2c
 80893fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80893fc:	20000bdc 	.word	0x20000bdc
 8089400:	20000bd8 	.word	0x20000bd8
 8089404:	20000bd4 	.word	0x20000bd4
 8089408:	20000ba8 	.word	0x20000ba8

0808940c <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 808940c:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 808940e:	2000      	movs	r0, #0
 8089410:	f7ff f8a6 	bl	8088560 <spark_sync_time_pending>
 8089414:	b128      	cbz	r0, 8089422 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8089416:	f7ff f893 	bl	8088540 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 808941a:	f080 0001 	eor.w	r0, r0, #1
 808941e:	b2c0      	uxtb	r0, r0
 8089420:	bd08      	pop	{r3, pc}
 8089422:	2001      	movs	r0, #1
    }
 8089424:	bd08      	pop	{r3, pc}
	...

08089428 <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 8089428:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 808942a:	f7ff ffbd 	bl	80893a8 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 808942e:	4b02      	ldr	r3, [pc, #8]	; (8089438 <_ZN9TimeClass5monthEl+0x10>)
 8089430:	6918      	ldr	r0, [r3, #16]
}
 8089432:	3001      	adds	r0, #1
 8089434:	bd08      	pop	{r3, pc}
 8089436:	bf00      	nop
 8089438:	20000ba8 	.word	0x20000ba8

0808943c <_ZN9TimeClass4zoneEf>:
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 808943c:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 808943e:	4909      	ldr	r1, [pc, #36]	; (8089464 <_ZN9TimeClass4zoneEf+0x28>)
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 8089440:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 8089442:	f002 fa6d 	bl	808b920 <__aeabi_fcmplt>
 8089446:	b960      	cbnz	r0, 8089462 <_ZN9TimeClass4zoneEf+0x26>
 8089448:	4907      	ldr	r1, [pc, #28]	; (8089468 <_ZN9TimeClass4zoneEf+0x2c>)
 808944a:	4620      	mov	r0, r4
 808944c:	f002 fa86 	bl	808b95c <__aeabi_fcmpgt>
 8089450:	b938      	cbnz	r0, 8089462 <_ZN9TimeClass4zoneEf+0x26>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 8089452:	4906      	ldr	r1, [pc, #24]	; (808946c <_ZN9TimeClass4zoneEf+0x30>)
 8089454:	4620      	mov	r0, r4
 8089456:	f002 f8c5 	bl	808b5e4 <__aeabi_fmul>
 808945a:	f002 fa89 	bl	808b970 <__aeabi_f2iz>
 808945e:	4b04      	ldr	r3, [pc, #16]	; (8089470 <_ZN9TimeClass4zoneEf+0x34>)
 8089460:	6018      	str	r0, [r3, #0]
 8089462:	bd10      	pop	{r4, pc}
 8089464:	c1400000 	.word	0xc1400000
 8089468:	41600000 	.word	0x41600000
 808946c:	45610000 	.word	0x45610000
 8089470:	20000bdc 	.word	0x20000bdc

08089474 <_ZN9TimeClass7setTimeEl>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
 8089474:	b508      	push	{r3, lr}
    HAL_RTC_Set_UnixTime(t);
 8089476:	f7fe fe67 	bl	8088148 <HAL_RTC_Set_UnixTime>
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}
 808947a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
    HAL_RTC_Set_UnixTime(t);
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
 808947e:	2200      	movs	r2, #0
 8089480:	4611      	mov	r1, r2
 8089482:	4610      	mov	r0, r2
 8089484:	f7fe bfd0 	b.w	8088428 <system_notify_time_changed>

08089488 <_ZN9TimeClass7timeStrEl>:
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8089488:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 808948a:	4b0e      	ldr	r3, [pc, #56]	; (80894c4 <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 808948c:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 808948e:	681b      	ldr	r3, [r3, #0]
 8089490:	a802      	add	r0, sp, #8
 8089492:	4419      	add	r1, r3
 8089494:	4b0c      	ldr	r3, [pc, #48]	; (80894c8 <_ZN9TimeClass7timeStrEl+0x40>)
 8089496:	681b      	ldr	r3, [r3, #0]
 8089498:	4419      	add	r1, r3
 808949a:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 808949e:	f002 fce3 	bl	808be68 <localtime>
        char* ascstr = asctime(calendar_time);
 80894a2:	f002 fc8f 	bl	808bdc4 <asctime>
 80894a6:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 80894a8:	f003 fb88 	bl	808cbbc <strlen>
        ascstr[len-1] = 0; // remove final newline
 80894ac:	2300      	movs	r3, #0
 80894ae:	4428      	add	r0, r5
 80894b0:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 80894b4:	4629      	mov	r1, r5
 80894b6:	4620      	mov	r0, r4
 80894b8:	f7ff fbf1 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
}
 80894bc:	4620      	mov	r0, r4
 80894be:	b003      	add	sp, #12
 80894c0:	bd30      	pop	{r4, r5, pc}
 80894c2:	bf00      	nop
 80894c4:	20000bdc 	.word	0x20000bdc
 80894c8:	20000bd4 	.word	0x20000bd4

080894cc <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80894cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80894d0:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    strcpy(format_str, format);
 80894d2:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80894d4:	4607      	mov	r7, r0
 80894d6:	4689      	mov	r9, r1
    char format_str[64];
    strcpy(format_str, format);
 80894d8:	4620      	mov	r0, r4
 80894da:	4611      	mov	r1, r2
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80894dc:	461d      	mov	r5, r3
    char format_str[64];
    strcpy(format_str, format);
 80894de:	f002 fe35 	bl	808c14c <strcpy>
    size_t len = strlen(format_str);
 80894e2:	4620      	mov	r0, r4
 80894e4:	f003 fb6a 	bl	808cbbc <strlen>
 80894e8:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 80894ea:	b925      	cbnz	r5, 80894f6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2a>
        strcpy(time_zone_str, "Z");
 80894ec:	4924      	ldr	r1, [pc, #144]	; (8089580 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb4>)
 80894ee:	a803      	add	r0, sp, #12
 80894f0:	f002 fe2c 	bl	808c14c <strcpy>
 80894f4:	e013      	b.n	808951e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x52>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 80894f6:	213c      	movs	r1, #60	; 0x3c
 80894f8:	fb95 f2f1 	sdiv	r2, r5, r1
 80894fc:	2a00      	cmp	r2, #0
 80894fe:	bfb8      	it	lt
 8089500:	4252      	neglt	r2, r2
 8089502:	fb92 f3f1 	sdiv	r3, r2, r1
 8089506:	fb01 2213 	mls	r2, r1, r3, r2
 808950a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808950e:	9200      	str	r2, [sp, #0]
 8089510:	fb95 f3f3 	sdiv	r3, r5, r3
 8089514:	4a1b      	ldr	r2, [pc, #108]	; (8089584 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb8>)
 8089516:	2110      	movs	r1, #16
 8089518:	a803      	add	r0, sp, #12
 808951a:	f7ff f861 	bl	80885e0 <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 808951e:	4625      	mov	r5, r4
 8089520:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 8089522:	f108 3aff 	add.w	sl, r8, #4294967295
 8089526:	45b2      	cmp	sl, r6
 8089528:	d91b      	bls.n	8089562 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x96>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 808952a:	782b      	ldrb	r3, [r5, #0]
 808952c:	2b25      	cmp	r3, #37	; 0x25
 808952e:	d116      	bne.n	808955e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
 8089530:	786b      	ldrb	r3, [r5, #1]
 8089532:	2b7a      	cmp	r3, #122	; 0x7a
 8089534:	d113      	bne.n	808955e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
        {
            size_t tzlen = strlen(time_zone_str);
 8089536:	a803      	add	r0, sp, #12
 8089538:	f003 fb40 	bl	808cbbc <strlen>
 808953c:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 808953e:	4430      	add	r0, r6
 8089540:	ebc6 020a 	rsb	r2, r6, sl
 8089544:	1ca9      	adds	r1, r5, #2
 8089546:	4420      	add	r0, r4
 8089548:	f002 fdad 	bl	808c0a6 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 808954c:	4642      	mov	r2, r8
 808954e:	a903      	add	r1, sp, #12
 8089550:	4628      	mov	r0, r5
 8089552:	f002 fda8 	bl	808c0a6 <memcpy>
            len = strlen(format_str);
 8089556:	4620      	mov	r0, r4
 8089558:	f003 fb30 	bl	808cbbc <strlen>
 808955c:	4680      	mov	r8, r0
 808955e:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 8089560:	e7de      	b.n	8089520 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x54>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
 8089562:	464b      	mov	r3, r9
 8089564:	4622      	mov	r2, r4
 8089566:	2132      	movs	r1, #50	; 0x32
 8089568:	a807      	add	r0, sp, #28
 808956a:	f002 fe73 	bl	808c254 <strftime>
    return String(buf);
 808956e:	a907      	add	r1, sp, #28
 8089570:	4638      	mov	r0, r7
 8089572:	f7ff fb94 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
}
 8089576:	4638      	mov	r0, r7
 8089578:	b024      	add	sp, #144	; 0x90
 808957a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808957e:	bf00      	nop
 8089580:	08091f39 	.word	0x08091f39
 8089584:	080918f9 	.word	0x080918f9

08089588 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
 8089588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 808958a:	4605      	mov	r5, r0
 808958c:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
 808958e:	461c      	mov	r4, r3
 8089590:	b913      	cbnz	r3, 8089598 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
 8089592:	4b12      	ldr	r3, [pc, #72]	; (80895dc <_ZN9TimeClass6formatElPKc+0x54>)
 8089594:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
 8089596:	b12c      	cbz	r4, 80895a4 <_ZN9TimeClass6formatElPKc+0x1c>
 8089598:	4b11      	ldr	r3, [pc, #68]	; (80895e0 <_ZN9TimeClass6formatElPKc+0x58>)
 808959a:	4620      	mov	r0, r4
 808959c:	6819      	ldr	r1, [r3, #0]
 808959e:	f002 fdcb 	bl	808c138 <strcmp>
 80895a2:	b920      	cbnz	r0, 80895ae <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
 80895a4:	9901      	ldr	r1, [sp, #4]
 80895a6:	4628      	mov	r0, r5
 80895a8:	f7ff ff6e 	bl	8089488 <_ZN9TimeClass7timeStrEl>
 80895ac:	e013      	b.n	80895d6 <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
 80895ae:	4f0d      	ldr	r7, [pc, #52]	; (80895e4 <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
 80895b0:	9a01      	ldr	r2, [sp, #4]
 80895b2:	683b      	ldr	r3, [r7, #0]
 80895b4:	4e0c      	ldr	r6, [pc, #48]	; (80895e8 <_ZN9TimeClass6formatElPKc+0x60>)
 80895b6:	441a      	add	r2, r3
 80895b8:	6833      	ldr	r3, [r6, #0]
 80895ba:	a802      	add	r0, sp, #8
 80895bc:	4413      	add	r3, r2
 80895be:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
 80895c2:	f002 fc51 	bl	808be68 <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
 80895c6:	683a      	ldr	r2, [r7, #0]
 80895c8:	6833      	ldr	r3, [r6, #0]
 80895ca:	4601      	mov	r1, r0
 80895cc:	4413      	add	r3, r2
 80895ce:	4628      	mov	r0, r5
 80895d0:	4622      	mov	r2, r4
 80895d2:	f7ff ff7b 	bl	80894cc <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
 80895d6:	4628      	mov	r0, r5
 80895d8:	b003      	add	sp, #12
 80895da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80895dc:	20000bd0 	.word	0x20000bd0
 80895e0:	200000d8 	.word	0x200000d8
 80895e4:	20000bdc 	.word	0x20000bdc
 80895e8:	20000bd4 	.word	0x20000bd4

080895ec <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80895ec:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 80895ee:	2000      	movs	r0, #0
 80895f0:	f7fe fdca 	bl	8088188 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 80895f4:	4604      	mov	r4, r0
 80895f6:	b968      	cbnz	r0, 8089614 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80895f8:	f7fe fed6 	bl	80883a8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80895fc:	2801      	cmp	r0, #1
 80895fe:	d10b      	bne.n	8089618 <_ZN9TimeClass7isValidEv+0x2c>
 8089600:	4620      	mov	r0, r4
 8089602:	f7fe ff09 	bl	8088418 <system_thread_get_state>
 8089606:	b938      	cbnz	r0, 8089618 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 8089608:	f7ff ff00 	bl	808940c <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 808960c:	b930      	cbnz	r0, 808961c <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 808960e:	f7fe ff87 	bl	8088520 <spark_process>
 8089612:	e7f9      	b.n	8089608 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 8089614:	2001      	movs	r0, #1
 8089616:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 8089618:	2000      	movs	r0, #0
 808961a:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 808961c:	f7ff fef6 	bl	808940c <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 8089620:	2000      	movs	r0, #0
 8089622:	f7fe fdb1 	bl	8088188 <HAL_RTC_Time_Is_Valid>
 8089626:	3000      	adds	r0, #0
 8089628:	bf18      	it	ne
 808962a:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 808962c:	bd10      	pop	{r4, pc}

0808962e <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 808962e:	b508      	push	{r3, lr}
    (void)isValid();
 8089630:	f7ff ffdc 	bl	80895ec <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 8089634:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 8089638:	f7fe bd7e 	b.w	8088138 <HAL_RTC_Get_UnixTime>

0808963c <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
 808963c:	b508      	push	{r3, lr}
	return hour(now());
 808963e:	f7ff fff6 	bl	808962e <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
 8089642:	f7ff feb1 	bl	80893a8 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
 8089646:	4b01      	ldr	r3, [pc, #4]	; (808964c <_ZN9TimeClass4hourEv+0x10>)
 8089648:	6898      	ldr	r0, [r3, #8]
 808964a:	bd08      	pop	{r3, pc}
 808964c:	20000ba8 	.word	0x20000ba8

08089650 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
 8089650:	b508      	push	{r3, lr}
	return minute(now());
 8089652:	f7ff ffec 	bl	808962e <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
 8089656:	f7ff fea7 	bl	80893a8 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
 808965a:	4b01      	ldr	r3, [pc, #4]	; (8089660 <_ZN9TimeClass6minuteEv+0x10>)
 808965c:	6858      	ldr	r0, [r3, #4]
 808965e:	bd08      	pop	{r3, pc}
 8089660:	20000ba8 	.word	0x20000ba8

08089664 <_ZN9TimeClass6secondEv>:
	return calendar_time_cache.tm_min;
}

/* current seconds */
int TimeClass::second()
{
 8089664:	b508      	push	{r3, lr}
	return second(now());
 8089666:	f7ff ffe2 	bl	808962e <_ZN9TimeClass3nowEv>
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
	Refresh_UnixTime_Cache(t);
 808966a:	f7ff fe9d 	bl	80893a8 <_ZL22Refresh_UnixTime_Cachel>

/* current seconds */
int TimeClass::second()
{
	return second(now());
}
 808966e:	4b01      	ldr	r3, [pc, #4]	; (8089674 <_ZN9TimeClass6secondEv+0x10>)
 8089670:	6818      	ldr	r0, [r3, #0]
 8089672:	bd08      	pop	{r3, pc}
 8089674:	20000ba8 	.word	0x20000ba8

08089678 <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
 8089678:	b508      	push	{r3, lr}
	return day(now());
 808967a:	f7ff ffd8 	bl	808962e <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
 808967e:	f7ff fe93 	bl	80893a8 <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
 8089682:	4b01      	ldr	r3, [pc, #4]	; (8089688 <_ZN9TimeClass3dayEv+0x10>)
 8089684:	68d8      	ldr	r0, [r3, #12]
 8089686:	bd08      	pop	{r3, pc}
 8089688:	20000ba8 	.word	0x20000ba8

0808968c <_ZN9TimeClass5monthEv>:
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
}

/* current month */
int TimeClass::month()
{
 808968c:	b508      	push	{r3, lr}
	return month(now());
 808968e:	f7ff ffce 	bl	808962e <_ZN9TimeClass3nowEv>
}
 8089692:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current month */
int TimeClass::month()
{
	return month(now());
 8089696:	f7ff bec7 	b.w	8089428 <_ZN9TimeClass5monthEl>
	...

0808969c <_ZN9TimeClass4yearEv>:
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
}

/* current four digit year */
int TimeClass::year()
{
 808969c:	b508      	push	{r3, lr}
	return year(now());
 808969e:	f7ff ffc6 	bl	808962e <_ZN9TimeClass3nowEv>
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80896a2:	f7ff fe81 	bl	80893a8 <_ZL22Refresh_UnixTime_Cachel>

/* current four digit year */
int TimeClass::year()
{
	return year(now());
}
 80896a6:	4b01      	ldr	r3, [pc, #4]	; (80896ac <_ZN9TimeClass4yearEv+0x10>)
 80896a8:	6958      	ldr	r0, [r3, #20]
 80896aa:	bd08      	pop	{r3, pc}
 80896ac:	20000ba8 	.word	0x20000ba8

080896b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80896b0:	4b02      	ldr	r3, [pc, #8]	; (80896bc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80896b2:	681a      	ldr	r2, [r3, #0]
 80896b4:	4b02      	ldr	r3, [pc, #8]	; (80896c0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80896b6:	601a      	str	r2, [r3, #0]
 80896b8:	4770      	bx	lr
 80896ba:	bf00      	nop
 80896bc:	200000d8 	.word	0x200000d8
 80896c0:	20000bd0 	.word	0x20000bd0

080896c4 <setADCSampleTime>:
 *
 * @retval None
 */
void setADCSampleTime(uint8_t ADC_SampleTime)
{
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
 80896c4:	f7fe bcc0 	b.w	8088048 <HAL_ADC_Set_Sample_Time>

080896c8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80896c8:	2100      	movs	r1, #0
 80896ca:	f7fe be7d 	b.w	80883c8 <system_delay_ms>

080896ce <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80896ce:	b510      	push	{r4, lr}
 80896d0:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80896d2:	f7fe fa65 	bl	8087ba0 <_ZNSt14_Function_baseD1Ev>
 80896d6:	4620      	mov	r0, r4
 80896d8:	bd10      	pop	{r4, pc}

080896da <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80896da:	b513      	push	{r0, r1, r4, lr}
 80896dc:	460b      	mov	r3, r1
 80896de:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80896e0:	c803      	ldmia	r0, {r0, r1}
 80896e2:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80896e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80896ea:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80896ee:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80896f2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80896f6:	b002      	add	sp, #8
 80896f8:	bd10      	pop	{r4, pc}
	...

080896fc <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80896fc:	4803      	ldr	r0, [pc, #12]	; (808970c <_GLOBAL__sub_I_RGB+0x10>)
 80896fe:	2300      	movs	r3, #0
 8089700:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8089702:	4a03      	ldr	r2, [pc, #12]	; (8089710 <_GLOBAL__sub_I_RGB+0x14>)
 8089704:	4903      	ldr	r1, [pc, #12]	; (8089714 <_GLOBAL__sub_I_RGB+0x18>)
 8089706:	f001 b80d 	b.w	808a724 <__aeabi_atexit>
 808970a:	bf00      	nop
 808970c:	20000be0 	.word	0x20000be0
 8089710:	200001c8 	.word	0x200001c8
 8089714:	080896cf 	.word	0x080896cf

08089718 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
 8089718:	6800      	ldr	r0, [r0, #0]
 808971a:	f000 be8d 	b.w	808a438 <_ZN7TwoWire4lockEv>

0808971e <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 808971e:	b510      	push	{r4, lr}
 8089720:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
 8089722:	6001      	str	r1, [r0, #0]
 8089724:	7102      	strb	r2, [r0, #4]

    if (lock_) {
 8089726:	b10a      	cbz	r2, 808972c <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 8089728:	f7ff fff6 	bl	8089718 <_ZN9FuelGauge4lockEv>
    }
}
 808972c:	4620      	mov	r0, r4
 808972e:	bd10      	pop	{r4, pc}

08089730 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
 8089730:	b538      	push	{r3, r4, r5, lr}
 8089732:	4604      	mov	r4, r0
 8089734:	460d      	mov	r5, r1
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8089736:	f000 ffd5 	bl	808a6e4 <_Z20__fetch_global_Wire3v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
 808973a:	462a      	mov	r2, r5
 808973c:	4601      	mov	r1, r0
 808973e:	4620      	mov	r0, r4
 8089740:	f7ff ffed 	bl	808971e <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
 8089744:	4620      	mov	r0, r4
 8089746:	bd38      	pop	{r3, r4, r5, pc}

08089748 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
 8089748:	6800      	ldr	r0, [r0, #0]
 808974a:	f000 be7e 	b.w	808a44a <_ZN7TwoWire6unlockEv>

0808974e <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 808974e:	b510      	push	{r4, lr}
{
    if (lock_) {
 8089750:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 8089752:	4604      	mov	r4, r0
{
    if (lock_) {
 8089754:	b10b      	cbz	r3, 808975a <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 8089756:	f7ff fff7 	bl	8089748 <_ZN9FuelGauge6unlockEv>
    }
}
 808975a:	4620      	mov	r0, r4
 808975c:	bd10      	pop	{r4, pc}

0808975e <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 808975e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8089760:	4604      	mov	r4, r0
 8089762:	460f      	mov	r7, r1
 8089764:	4616      	mov	r6, r2
 8089766:	461d      	mov	r5, r3
 8089768:	f7ff ffd6 	bl	8089718 <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
 808976c:	6820      	ldr	r0, [r4, #0]
 808976e:	2136      	movs	r1, #54	; 0x36
 8089770:	f000 fe54 	bl	808a41c <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
 8089774:	6820      	ldr	r0, [r4, #0]
 8089776:	4639      	mov	r1, r7
 8089778:	6803      	ldr	r3, [r0, #0]
 808977a:	689b      	ldr	r3, [r3, #8]
 808977c:	4798      	blx	r3
    i2c_.endTransmission(true);
 808977e:	2101      	movs	r1, #1
 8089780:	6820      	ldr	r0, [r4, #0]
 8089782:	f000 fe4e 	bl	808a422 <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
 8089786:	2202      	movs	r2, #2
 8089788:	2136      	movs	r1, #54	; 0x36
 808978a:	2301      	movs	r3, #1
 808978c:	6820      	ldr	r0, [r4, #0]
 808978e:	f000 fe3c 	bl	808a40a <_ZN7TwoWire11requestFromEiii>
    MSB = i2c_.read();
 8089792:	6820      	ldr	r0, [r4, #0]
 8089794:	6803      	ldr	r3, [r0, #0]
 8089796:	695b      	ldr	r3, [r3, #20]
 8089798:	4798      	blx	r3
 808979a:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
 808979c:	6820      	ldr	r0, [r4, #0]
 808979e:	6803      	ldr	r3, [r0, #0]
 80897a0:	695b      	ldr	r3, [r3, #20]
 80897a2:	4798      	blx	r3
 80897a4:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
 80897a6:	4620      	mov	r0, r4
}
 80897a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80897ac:	f7ff bfcc 	b.w	8089748 <_ZN9FuelGauge6unlockEv>

080897b0 <_ZN9FuelGauge6getSoCEv>:
	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
 80897b0:	b513      	push	{r0, r1, r4, lr}

	byte MSB = 0;
 80897b2:	2200      	movs	r2, #0
	byte LSB = 0;
 80897b4:	ab02      	add	r3, sp, #8
 80897b6:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
 80897ba:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
 80897be:	2104      	movs	r1, #4
 80897c0:	f10d 0206 	add.w	r2, sp, #6
 80897c4:	f7ff ffcb 	bl	808975e <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
 80897c8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80897cc:	f001 fa4e 	bl	808ac6c <__aeabi_i2d>
 80897d0:	2200      	movs	r2, #0
 80897d2:	4b08      	ldr	r3, [pc, #32]	; (80897f4 <_ZN9FuelGauge6getSoCEv+0x44>)
 80897d4:	f001 fab0 	bl	808ad38 <__aeabi_dmul>
 80897d8:	f001 fda6 	bl	808b328 <__aeabi_d2f>
 80897dc:	4604      	mov	r4, r0
 80897de:	f89d 0006 	ldrb.w	r0, [sp, #6]
 80897e2:	f001 feab 	bl	808b53c <__aeabi_i2f>
 80897e6:	4601      	mov	r1, r0
 80897e8:	4620      	mov	r0, r4
 80897ea:	f001 fdf3 	bl	808b3d4 <__addsf3>
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
 80897ee:	b002      	add	sp, #8
 80897f0:	bd10      	pop	{r4, pc}
 80897f2:	bf00      	nop
 80897f4:	3f700000 	.word	0x3f700000

080897f8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80897f8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80897fa:	4b18      	ldr	r3, [pc, #96]	; (808985c <serialEventRun+0x64>)
 80897fc:	b133      	cbz	r3, 808980c <serialEventRun+0x14>
 80897fe:	f000 fc45 	bl	808a08c <_Z16_fetch_usbserialv>
 8089802:	6803      	ldr	r3, [r0, #0]
 8089804:	691b      	ldr	r3, [r3, #16]
 8089806:	4798      	blx	r3
 8089808:	2800      	cmp	r0, #0
 808980a:	dc1e      	bgt.n	808984a <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 808980c:	4b14      	ldr	r3, [pc, #80]	; (8089860 <serialEventRun+0x68>)
 808980e:	b133      	cbz	r3, 808981e <serialEventRun+0x26>
 8089810:	f000 fd52 	bl	808a2b8 <_Z22__fetch_global_Serial1v>
 8089814:	6803      	ldr	r3, [r0, #0]
 8089816:	691b      	ldr	r3, [r3, #16]
 8089818:	4798      	blx	r3
 808981a:	2800      	cmp	r0, #0
 808981c:	dc18      	bgt.n	8089850 <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 808981e:	4b11      	ldr	r3, [pc, #68]	; (8089864 <serialEventRun+0x6c>)
 8089820:	b10b      	cbz	r3, 8089826 <serialEventRun+0x2e>
 8089822:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 8089826:	4b10      	ldr	r3, [pc, #64]	; (8089868 <serialEventRun+0x70>)
 8089828:	b10b      	cbz	r3, 808982e <serialEventRun+0x36>
 808982a:	f7f7 f947 	bl	8080abc <_Z15serialEventRun4v>
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 808982e:	4b0f      	ldr	r3, [pc, #60]	; (808986c <serialEventRun+0x74>)
 8089830:	b10b      	cbz	r3, 8089836 <serialEventRun+0x3e>
 8089832:	f7f7 f97d 	bl	8080b30 <_Z15serialEventRun5v>
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8089836:	4b0e      	ldr	r3, [pc, #56]	; (8089870 <serialEventRun+0x78>)
 8089838:	b17b      	cbz	r3, 808985a <serialEventRun+0x62>
 808983a:	f000 fc55 	bl	808a0e8 <_Z17_fetch_usbserial1v>
 808983e:	6803      	ldr	r3, [r0, #0]
 8089840:	691b      	ldr	r3, [r3, #16]
 8089842:	4798      	blx	r3
 8089844:	2800      	cmp	r0, #0
 8089846:	dc06      	bgt.n	8089856 <serialEventRun+0x5e>
 8089848:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 808984a:	f3af 8000 	nop.w
 808984e:	e7dd      	b.n	808980c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 8089850:	f3af 8000 	nop.w
 8089854:	e7e3      	b.n	808981e <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 8089856:	f3af 8000 	nop.w
 808985a:	bd08      	pop	{r3, pc}
	...
 8089868:	08080abd 	.word	0x08080abd
 808986c:	08080b31 	.word	0x08080b31
 8089870:	00000000 	.word	0x00000000

08089874 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 8089874:	b508      	push	{r3, lr}
	serialEventRun();
 8089876:	f7ff ffbf 	bl	80897f8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 808987a:	f7fe fc55 	bl	8088128 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 808987e:	4b01      	ldr	r3, [pc, #4]	; (8089884 <_post_loop+0x10>)
 8089880:	6018      	str	r0, [r3, #0]
 8089882:	bd08      	pop	{r3, pc}
 8089884:	20000cb0 	.word	0x20000cb0

08089888 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8089888:	4802      	ldr	r0, [pc, #8]	; (8089894 <_Z33system_initialize_user_backup_ramv+0xc>)
 808988a:	4a03      	ldr	r2, [pc, #12]	; (8089898 <_Z33system_initialize_user_backup_ramv+0x10>)
 808988c:	4903      	ldr	r1, [pc, #12]	; (808989c <_Z33system_initialize_user_backup_ramv+0x14>)
 808988e:	1a12      	subs	r2, r2, r0
 8089890:	f002 bc09 	b.w	808c0a6 <memcpy>
 8089894:	40024000 	.word	0x40024000
 8089898:	40024004 	.word	0x40024004
 808989c:	08092108 	.word	0x08092108

080898a0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80898a0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80898a2:	2300      	movs	r3, #0
 80898a4:	9300      	str	r3, [sp, #0]
 80898a6:	461a      	mov	r2, r3
 80898a8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80898ac:	f7fe fdce 	bl	808844c <system_ctrl_set_result>
}
 80898b0:	b003      	add	sp, #12
 80898b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080898b8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80898b8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80898ba:	8843      	ldrh	r3, [r0, #2]
 80898bc:	2b0a      	cmp	r3, #10
 80898be:	d008      	beq.n	80898d2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80898c0:	2b50      	cmp	r3, #80	; 0x50
 80898c2:	d109      	bne.n	80898d8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80898c4:	4b09      	ldr	r3, [pc, #36]	; (80898ec <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80898c6:	681b      	ldr	r3, [r3, #0]
 80898c8:	b13b      	cbz	r3, 80898da <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80898ca:	b003      	add	sp, #12
 80898cc:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80898d0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80898d2:	f7ff ffe5 	bl	80898a0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80898d6:	e006      	b.n	80898e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80898d8:	2300      	movs	r3, #0
 80898da:	9300      	str	r3, [sp, #0]
 80898dc:	461a      	mov	r2, r3
 80898de:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80898e2:	f7fe fdb3 	bl	808844c <system_ctrl_set_result>
        break;
    }
}
 80898e6:	b003      	add	sp, #12
 80898e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80898ec:	20000bf0 	.word	0x20000bf0

080898f0 <module_user_init_hook>:

void module_user_init_hook()
{
 80898f0:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80898f2:	4c10      	ldr	r4, [pc, #64]	; (8089934 <module_user_init_hook+0x44>)
 80898f4:	4d10      	ldr	r5, [pc, #64]	; (8089938 <module_user_init_hook+0x48>)
 80898f6:	6823      	ldr	r3, [r4, #0]
 80898f8:	42ab      	cmp	r3, r5
 80898fa:	4b10      	ldr	r3, [pc, #64]	; (808993c <module_user_init_hook+0x4c>)
 80898fc:	bf0c      	ite	eq
 80898fe:	2201      	moveq	r2, #1
 8089900:	2200      	movne	r2, #0
 8089902:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8089904:	d002      	beq.n	808990c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 8089906:	f7ff ffbf 	bl	8089888 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 808990a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 808990c:	f7fe fbfc 	bl	8088108 <HAL_RNG_GetRandomNumber>
 8089910:	4604      	mov	r4, r0
    srand(seed);
 8089912:	f002 fbdb 	bl	808c0cc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8089916:	4b0a      	ldr	r3, [pc, #40]	; (8089940 <module_user_init_hook+0x50>)
 8089918:	b113      	cbz	r3, 8089920 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 808991a:	4620      	mov	r0, r4
 808991c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8089920:	2100      	movs	r1, #0
 8089922:	4807      	ldr	r0, [pc, #28]	; (8089940 <module_user_init_hook+0x50>)
 8089924:	f7fe fe24 	bl	8088570 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8089928:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 808992c:	2100      	movs	r1, #0
 808992e:	4805      	ldr	r0, [pc, #20]	; (8089944 <module_user_init_hook+0x54>)
 8089930:	f7fe bd82 	b.w	8088438 <system_ctrl_set_app_request_handler>
 8089934:	40024000 	.word	0x40024000
 8089938:	9a271c1e 	.word	0x9a271c1e
 808993c:	20000bf4 	.word	0x20000bf4
 8089940:	00000000 	.word	0x00000000
 8089944:	080898b9 	.word	0x080898b9

08089948 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8089948:	4770      	bx	lr

0808994a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 808994a:	2000      	movs	r0, #0
 808994c:	4770      	bx	lr

0808994e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 808994e:	b510      	push	{r4, lr}
 8089950:	4604      	mov	r4, r0
 8089952:	2110      	movs	r1, #16
 8089954:	f000 feeb 	bl	808a72e <_ZdlPvj>
 8089958:	4620      	mov	r0, r4
 808995a:	bd10      	pop	{r4, pc}

0808995c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 808995c:	b508      	push	{r3, lr}
      { delete this; }
 808995e:	b108      	cbz	r0, 8089964 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 8089960:	f7ff fff5 	bl	808994e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8089964:	bd08      	pop	{r3, pc}

08089966 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8089966:	2200      	movs	r2, #0
 8089968:	6002      	str	r2, [r0, #0]
 808996a:	f64f 729c 	movw	r2, #65436	; 0xff9c
 808996e:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 8089970:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8089972:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 8089976:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8089978:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808997a:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 808997c:	680c      	ldr	r4, [r1, #0]
 808997e:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8089980:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 8089982:	bd10      	pop	{r4, pc}

08089984 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 8089984:	b510      	push	{r4, lr}
 8089986:	4604      	mov	r4, r0
    free((void*)msg_);
 8089988:	6800      	ldr	r0, [r0, #0]
 808998a:	f7fe fe01 	bl	8088590 <free>
}
 808998e:	4620      	mov	r0, r4
 8089990:	bd10      	pop	{r4, pc}

08089992 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 8089992:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 8089994:	68c4      	ldr	r4, [r0, #12]
 8089996:	b1f4      	cbz	r4, 80899d6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 8089998:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 808999a:	2b02      	cmp	r3, #2
 808999c:	d103      	bne.n	80899a6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 808999e:	f104 000c 	add.w	r0, r4, #12
 80899a2:	f7ff ffef 	bl	8089984 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80899a6:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80899a8:	b135      	cbz	r5, 80899b8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80899aa:	4628      	mov	r0, r5
 80899ac:	f7fe f8f8 	bl	8087ba0 <_ZNSt14_Function_baseD1Ev>
 80899b0:	2110      	movs	r1, #16
 80899b2:	4628      	mov	r0, r5
 80899b4:	f000 febb 	bl	808a72e <_ZdlPvj>
 80899b8:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80899ba:	b135      	cbz	r5, 80899ca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80899bc:	4628      	mov	r0, r5
 80899be:	f7fe f8ef 	bl	8087ba0 <_ZNSt14_Function_baseD1Ev>
 80899c2:	2110      	movs	r1, #16
 80899c4:	4628      	mov	r0, r5
 80899c6:	f000 feb2 	bl	808a72e <_ZdlPvj>
 80899ca:	4620      	mov	r0, r4
 80899cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80899d0:	2114      	movs	r1, #20
 80899d2:	f000 beac 	b.w	808a72e <_ZdlPvj>
 80899d6:	bd38      	pop	{r3, r4, r5, pc}

080899d8 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80899d8:	b510      	push	{r4, lr}
 80899da:	b088      	sub	sp, #32
 80899dc:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80899de:	4668      	mov	r0, sp
 80899e0:	f7ff f95d 	bl	8088c9e <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80899e4:	4669      	mov	r1, sp
 80899e6:	a804      	add	r0, sp, #16
 80899e8:	f7ff f998 	bl	8088d1c <_ZN6StringC1ERKS_>
 80899ec:	a804      	add	r0, sp, #16
 80899ee:	47a0      	blx	r4
 80899f0:	4604      	mov	r4, r0
 80899f2:	a804      	add	r0, sp, #16
 80899f4:	f7ff f90c 	bl	8088c10 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80899f8:	4668      	mov	r0, sp
 80899fa:	f7ff f909 	bl	8088c10 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 80899fe:	4620      	mov	r0, r4
 8089a00:	b008      	add	sp, #32
 8089a02:	bd10      	pop	{r4, pc}

08089a04 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 8089a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8089a06:	4607      	mov	r7, r0
 8089a08:	460e      	mov	r6, r1
 8089a0a:	4615      	mov	r5, r2
 8089a0c:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 8089a0e:	2410      	movs	r4, #16
 8089a10:	4622      	mov	r2, r4
 8089a12:	2100      	movs	r1, #0
 8089a14:	4668      	mov	r0, sp
 8089a16:	f002 fb51 	bl	808c0bc <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8089a1a:	2200      	movs	r2, #0
 8089a1c:	4669      	mov	r1, sp
 8089a1e:	4610      	mov	r0, r2
         size = sizeof(*this);
 8089a20:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
 8089a24:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 8089a26:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 8089a28:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8089a2a:	f7fe fd71 	bl	8088510 <spark_function>
}
 8089a2e:	b005      	add	sp, #20
 8089a30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08089a32 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 8089a32:	b513      	push	{r0, r1, r4, lr}
 8089a34:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8089a36:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 8089a3a:	2300      	movs	r3, #0
 8089a3c:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8089a3e:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 8089a40:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 8089a42:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8089a44:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 8089a46:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8089a48:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8089a4a:	f7fa fafb 	bl	8084044 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8089a4e:	4620      	mov	r0, r4
 8089a50:	b002      	add	sp, #8
 8089a52:	bd10      	pop	{r4, pc}

08089a54 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 8089a54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8089a56:	460c      	mov	r4, r1
 8089a58:	4606      	mov	r6, r0
 8089a5a:	460f      	mov	r7, r1
 8089a5c:	f854 3b04 	ldr.w	r3, [r4], #4
 8089a60:	ad02      	add	r5, sp, #8
 8089a62:	f845 3d08 	str.w	r3, [r5, #-8]!
 8089a66:	4621      	mov	r1, r4
 8089a68:	a801      	add	r0, sp, #4
 8089a6a:	f7ff fc8d 	bl	8089388 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 8089a6e:	4629      	mov	r1, r5
 8089a70:	4630      	mov	r0, r6
 8089a72:	f7ff ffde 	bl	8089a32 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8089a76:	a801      	add	r0, sp, #4
 8089a78:	f7fa fae4 	bl	8084044 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8089a7c:	4620      	mov	r0, r4
 8089a7e:	f7fa fae1 	bl	8084044 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 8089a82:	4638      	mov	r0, r7
 8089a84:	2108      	movs	r1, #8
 8089a86:	f000 fe52 	bl	808a72e <_ZdlPvj>
        return p;
    }
 8089a8a:	4630      	mov	r0, r6
 8089a8c:	b003      	add	sp, #12
 8089a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08089a90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8089a90:	b538      	push	{r3, r4, r5, lr}
 8089a92:	2300      	movs	r3, #0
 8089a94:	4604      	mov	r4, r0
 8089a96:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8089a98:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8089a9a:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8089a9c:	f7f6 faff 	bl	808009e <_Znwj>
 8089aa0:	b128      	cbz	r0, 8089aae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 8089aa2:	2301      	movs	r3, #1
 8089aa4:	6043      	str	r3, [r0, #4]
 8089aa6:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 8089aa8:	4b02      	ldr	r3, [pc, #8]	; (8089ab4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 8089aaa:	60c5      	str	r5, [r0, #12]
 8089aac:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8089aae:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 8089ab0:	4620      	mov	r0, r4
 8089ab2:	bd38      	pop	{r3, r4, r5, pc}
 8089ab4:	08091928 	.word	0x08091928

08089ab8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8089ab8:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8089aba:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8089abc:	b90a      	cbnz	r2, 8089ac2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8089abe:	f000 fe38 	bl	808a732 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8089ac2:	68c3      	ldr	r3, [r0, #12]
    }
 8089ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8089ac8:	4718      	bx	r3

08089aca <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8089aca:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8089acc:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8089ace:	f100 0110 	add.w	r1, r0, #16
 8089ad2:	f7ff fff1 	bl	8089ab8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8089ad6:	bd08      	pop	{r3, pc}

08089ad8 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8089ad8:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8089ada:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8089adc:	b90a      	cbnz	r2, 8089ae2 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8089ade:	f000 fe28 	bl	808a732 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8089ae2:	68c3      	ldr	r3, [r0, #12]
    }
 8089ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8089ae8:	4718      	bx	r3

08089aea <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8089aea:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8089aec:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8089aee:	f100 0110 	add.w	r1, r0, #16
 8089af2:	f7ff fff1 	bl	8089ad8 <_ZNKSt8functionIFvRKbEEclES1_>
 8089af6:	bd08      	pop	{r3, pc}

08089af8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8089af8:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8089afa:	2300      	movs	r3, #0
 8089afc:	6083      	str	r3, [r0, #8]
 8089afe:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8089b00:	4604      	mov	r4, r0
 8089b02:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8089b04:	b12b      	cbz	r3, 8089b12 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8089b06:	2202      	movs	r2, #2
 8089b08:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8089b0a:	68eb      	ldr	r3, [r5, #12]
 8089b0c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8089b0e:	68ab      	ldr	r3, [r5, #8]
 8089b10:	60a3      	str	r3, [r4, #8]
	}
    }
 8089b12:	4620      	mov	r0, r4
 8089b14:	bd38      	pop	{r3, r4, r5, pc}
	...

08089b18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 8089b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8089b1a:	b089      	sub	sp, #36	; 0x24
 8089b1c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 8089b1e:	4668      	mov	r0, sp
 8089b20:	f7ff ff21 	bl	8089966 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8089b24:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8089b28:	2300      	movs	r3, #0
 8089b2a:	f88d 3008 	strb.w	r3, [sp, #8]
 8089b2e:	e8d4 3f4f 	ldrexb	r3, [r4]
 8089b32:	2b00      	cmp	r3, #0
 8089b34:	d103      	bne.n	8089b3e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 8089b36:	e8c4 2f41 	strexb	r1, r2, [r4]
 8089b3a:	2900      	cmp	r1, #0
 8089b3c:	d1f7      	bne.n	8089b2e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 8089b3e:	d002      	beq.n	8089b46 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 8089b40:	f88d 3008 	strb.w	r3, [sp, #8]
 8089b44:	e063      	b.n	8089c0e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 8089b46:	f114 050c 	adds.w	r5, r4, #12
 8089b4a:	d003      	beq.n	8089b54 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 8089b4c:	4669      	mov	r1, sp
 8089b4e:	4628      	mov	r0, r5
 8089b50:	f7ff ff09 	bl	8089966 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8089b54:	f3bf 8f5f 	dmb	sy
 8089b58:	2301      	movs	r3, #1
 8089b5a:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8089b5c:	f3bf 8f5f 	dmb	sy
 8089b60:	f104 0308 	add.w	r3, r4, #8
 8089b64:	2000      	movs	r0, #0
 8089b66:	e853 6f00 	ldrex	r6, [r3]
 8089b6a:	e843 0200 	strex	r2, r0, [r3]
 8089b6e:	2a00      	cmp	r2, #0
 8089b70:	d1f9      	bne.n	8089b66 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 8089b72:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8089b76:	2e00      	cmp	r6, #0
 8089b78:	d049      	beq.n	8089c0e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8089b7a:	f7fe fc3d 	bl	80883f8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8089b7e:	b120      	cbz	r0, 8089b8a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8089b80:	4629      	mov	r1, r5
 8089b82:	4630      	mov	r0, r6
 8089b84:	f7ff ff98 	bl	8089ab8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8089b88:	e03a      	b.n	8089c00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8089b8a:	4631      	mov	r1, r6
 8089b8c:	a802      	add	r0, sp, #8
 8089b8e:	f7ff ffb3 	bl	8089af8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8089b92:	68e0      	ldr	r0, [r4, #12]
 8089b94:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8089b98:	b108      	cbz	r0, 8089b9e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 8089b9a:	f002 fadf 	bl	808c15c <strdup>
 8089b9e:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8089ba0:	2010      	movs	r0, #16
 8089ba2:	f8ad 501c 	strh.w	r5, [sp, #28]
 8089ba6:	f7f6 fa7a 	bl	808009e <_Znwj>
 8089baa:	4605      	mov	r5, r0
 8089bac:	b1e8      	cbz	r0, 8089bea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8089bae:	2700      	movs	r7, #0
 8089bb0:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8089bb2:	2018      	movs	r0, #24
 8089bb4:	f7f6 fa73 	bl	808009e <_Znwj>
 8089bb8:	4604      	mov	r4, r0
 8089bba:	b188      	cbz	r0, 8089be0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8089bbc:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8089bbe:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8089bc0:	a802      	add	r0, sp, #8
 8089bc2:	f7ff fd8a 	bl	80896da <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8089bc6:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8089bc8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8089bca:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8089bcc:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8089bce:	9204      	str	r2, [sp, #16]
 8089bd0:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8089bd2:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 8089bd4:	60e3      	str	r3, [r4, #12]
 8089bd6:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8089bda:	9205      	str	r2, [sp, #20]
 8089bdc:	f7ff fec3 	bl	8089966 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8089be0:	4b0d      	ldr	r3, [pc, #52]	; (8089c18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8089be2:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8089be4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8089be6:	4b0d      	ldr	r3, [pc, #52]	; (8089c1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 8089be8:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 8089bea:	a806      	add	r0, sp, #24
 8089bec:	f7ff feca 	bl	8089984 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8089bf0:	a802      	add	r0, sp, #8
 8089bf2:	f7fd ffd5 	bl	8087ba0 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8089bf6:	2200      	movs	r2, #0
 8089bf8:	4629      	mov	r1, r5
 8089bfa:	4809      	ldr	r0, [pc, #36]	; (8089c20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 8089bfc:	f7fe fc04 	bl	8088408 <application_thread_invoke>
 8089c00:	4630      	mov	r0, r6
 8089c02:	f7fd ffcd 	bl	8087ba0 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8089c06:	2110      	movs	r1, #16
 8089c08:	4630      	mov	r0, r6
 8089c0a:	f000 fd90 	bl	808a72e <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 8089c0e:	4668      	mov	r0, sp
 8089c10:	f7ff feb8 	bl	8089984 <_ZN8particle5ErrorD1Ev>
    }
 8089c14:	b009      	add	sp, #36	; 0x24
 8089c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8089c18:	08089acb 	.word	0x08089acb
 8089c1c:	08089d41 	.word	0x08089d41
 8089c20:	0808a339 	.word	0x0808a339

08089c24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8089c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8089c28:	b08b      	sub	sp, #44	; 0x2c
 8089c2a:	4606      	mov	r6, r0
 8089c2c:	460f      	mov	r7, r1
 8089c2e:	4690      	mov	r8, r2
 8089c30:	4699      	mov	r9, r3
 8089c32:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8089c36:	f7fe fc83 	bl	8088540 <spark_cloud_flag_connected>
 8089c3a:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
 8089c3c:	4683      	mov	fp, r0
 8089c3e:	bb30      	cbnz	r0, 8089c8e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8089c40:	f64f 732e 	movw	r3, #65326	; 0xff2e
 8089c44:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8089c46:	a905      	add	r1, sp, #20
 8089c48:	4628      	mov	r0, r5
 8089c4a:	f8ad 3018 	strh.w	r3, [sp, #24]
 8089c4e:	f7ff fe8a 	bl	8089966 <_ZN8particle5ErrorC1EOS0_>
 8089c52:	2014      	movs	r0, #20
 8089c54:	f7f6 fa23 	bl	808009e <_Znwj>
 8089c58:	4604      	mov	r4, r0
 8089c5a:	b158      	cbz	r0, 8089c74 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8089c5c:	2302      	movs	r3, #2
 8089c5e:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8089c60:	2301      	movs	r3, #1
 8089c62:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8089c64:	f8c0 b004 	str.w	fp, [r0, #4]
 8089c68:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 8089c6c:	4629      	mov	r1, r5
 8089c6e:	300c      	adds	r0, #12
 8089c70:	f7ff fe79 	bl	8089966 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 8089c74:	4630      	mov	r0, r6
 8089c76:	4621      	mov	r1, r4
 8089c78:	f840 4b04 	str.w	r4, [r0], #4
 8089c7c:	f7ff ff08 	bl	8089a90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8089c80:	4628      	mov	r0, r5
 8089c82:	f7ff fe7f 	bl	8089984 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 8089c86:	a805      	add	r0, sp, #20
 8089c88:	f7ff fe7c 	bl	8089984 <_ZN8particle5ErrorD1Ev>
 8089c8c:	e052      	b.n	8089d34 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8089c8e:	2400      	movs	r4, #0
 8089c90:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 8089c92:	2014      	movs	r0, #20
 8089c94:	606c      	str	r4, [r5, #4]
 8089c96:	60ac      	str	r4, [r5, #8]
 8089c98:	9307      	str	r3, [sp, #28]
 8089c9a:	f7f6 fa00 	bl	808009e <_Znwj>
 8089c9e:	4601      	mov	r1, r0
 8089ca0:	b118      	cbz	r0, 8089caa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 8089ca2:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8089ca4:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8089ca6:	6044      	str	r4, [r0, #4]
 8089ca8:	6084      	str	r4, [r0, #8]
 8089caa:	a804      	add	r0, sp, #16
 8089cac:	9103      	str	r1, [sp, #12]
 8089cae:	f7ff feef 	bl	8089a90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 8089cb2:	4b22      	ldr	r3, [pc, #136]	; (8089d3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 8089cb4:	2008      	movs	r0, #8
 8089cb6:	9308      	str	r3, [sp, #32]
 8089cb8:	f7f6 f9f1 	bl	808009e <_Znwj>
 8089cbc:	4604      	mov	r4, r0
 8089cbe:	b128      	cbz	r0, 8089ccc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8089cc0:	9b03      	ldr	r3, [sp, #12]
 8089cc2:	a904      	add	r1, sp, #16
 8089cc4:	f840 3b04 	str.w	r3, [r0], #4
 8089cc8:	f7ff fb5e 	bl	8089388 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8089ccc:	9500      	str	r5, [sp, #0]
 8089cce:	fa5f f38a 	uxtb.w	r3, sl
 8089cd2:	464a      	mov	r2, r9
 8089cd4:	4641      	mov	r1, r8
 8089cd6:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 8089cd8:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8089cda:	f7fe fc39 	bl	8088550 <spark_send_event>
 8089cde:	b920      	cbnz	r0, 8089cea <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 8089ce0:	9b03      	ldr	r3, [sp, #12]
 8089ce2:	785b      	ldrb	r3, [r3, #1]
 8089ce4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8089ce8:	b183      	cbz	r3, 8089d0c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 8089cea:	9b03      	ldr	r3, [sp, #12]
 8089cec:	a904      	add	r1, sp, #16
 8089cee:	a806      	add	r0, sp, #24
 8089cf0:	9305      	str	r3, [sp, #20]
 8089cf2:	f7ff fb49 	bl	8089388 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 8089cf6:	a905      	add	r1, sp, #20
 8089cf8:	4630      	mov	r0, r6
 8089cfa:	f7ff fe9a 	bl	8089a32 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8089cfe:	a806      	add	r0, sp, #24
 8089d00:	f7fa f9a0 	bl	8084044 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8089d04:	a804      	add	r0, sp, #16
 8089d06:	f7fa f99d 	bl	8084044 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8089d0a:	e013      	b.n	8089d34 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 8089d0c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 8089d10:	a905      	add	r1, sp, #20
 8089d12:	a803      	add	r0, sp, #12
 8089d14:	9205      	str	r2, [sp, #20]
 8089d16:	f8ad 3018 	strh.w	r3, [sp, #24]
 8089d1a:	f7ff fefd 	bl	8089b18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8089d1e:	a805      	add	r0, sp, #20
 8089d20:	f7ff fe30 	bl	8089984 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 8089d24:	a805      	add	r0, sp, #20
 8089d26:	9909      	ldr	r1, [sp, #36]	; 0x24
 8089d28:	f7ff fe94 	bl	8089a54 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 8089d2c:	a806      	add	r0, sp, #24
 8089d2e:	f7fa f989 	bl	8084044 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8089d32:	e7da      	b.n	8089cea <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 8089d34:	4630      	mov	r0, r6
 8089d36:	b00b      	add	sp, #44	; 0x2c
 8089d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8089d3c:	08089eb1 	.word	0x08089eb1

08089d40 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8089d40:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8089d42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8089d44:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8089d46:	d006      	beq.n	8089d56 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 8089d48:	2a03      	cmp	r2, #3
 8089d4a:	d017      	beq.n	8089d7c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 8089d4c:	2a01      	cmp	r2, #1
 8089d4e:	d122      	bne.n	8089d96 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8089d50:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8089d52:	6003      	str	r3, [r0, #0]
	      break;
 8089d54:	e01f      	b.n	8089d96 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8089d56:	2018      	movs	r0, #24
 8089d58:	680e      	ldr	r6, [r1, #0]
 8089d5a:	f7f6 f9a0 	bl	808009e <_Znwj>
 8089d5e:	4605      	mov	r5, r0
 8089d60:	b150      	cbz	r0, 8089d78 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8089d62:	4631      	mov	r1, r6
 8089d64:	f7ff fec8 	bl	8089af8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8089d68:	6930      	ldr	r0, [r6, #16]
 8089d6a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8089d6e:	b108      	cbz	r0, 8089d74 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 8089d70:	f002 f9f4 	bl	808c15c <strdup>
 8089d74:	6128      	str	r0, [r5, #16]
 8089d76:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8089d78:	6025      	str	r5, [r4, #0]
 8089d7a:	e00c      	b.n	8089d96 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8089d7c:	6804      	ldr	r4, [r0, #0]
 8089d7e:	b154      	cbz	r4, 8089d96 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 8089d80:	f104 0010 	add.w	r0, r4, #16
 8089d84:	f7ff fdfe 	bl	8089984 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8089d88:	4620      	mov	r0, r4
 8089d8a:	f7fd ff09 	bl	8087ba0 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8089d8e:	2118      	movs	r1, #24
 8089d90:	4620      	mov	r0, r4
 8089d92:	f000 fccc 	bl	808a72e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8089d96:	2000      	movs	r0, #0
 8089d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08089d9a <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8089d9a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8089d9c:	2300      	movs	r3, #0
 8089d9e:	6083      	str	r3, [r0, #8]
 8089da0:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8089da2:	4604      	mov	r4, r0
 8089da4:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8089da6:	b12b      	cbz	r3, 8089db4 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8089da8:	2202      	movs	r2, #2
 8089daa:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8089dac:	68eb      	ldr	r3, [r5, #12]
 8089dae:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8089db0:	68ab      	ldr	r3, [r5, #8]
 8089db2:	60a3      	str	r3, [r4, #8]
	}
    }
 8089db4:	4620      	mov	r0, r4
 8089db6:	bd38      	pop	{r3, r4, r5, pc}

08089db8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8089db8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8089dba:	b570      	push	{r4, r5, r6, lr}
 8089dbc:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8089dbe:	d006      	beq.n	8089dce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 8089dc0:	2a03      	cmp	r2, #3
 8089dc2:	d011      	beq.n	8089de8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 8089dc4:	2a01      	cmp	r2, #1
 8089dc6:	d118      	bne.n	8089dfa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8089dc8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8089dca:	6003      	str	r3, [r0, #0]
	      break;
 8089dcc:	e015      	b.n	8089dfa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8089dce:	2014      	movs	r0, #20
 8089dd0:	680e      	ldr	r6, [r1, #0]
 8089dd2:	f7f6 f964 	bl	808009e <_Znwj>
 8089dd6:	4605      	mov	r5, r0
 8089dd8:	b120      	cbz	r0, 8089de4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8089dda:	4631      	mov	r1, r6
 8089ddc:	f7ff ffdd 	bl	8089d9a <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8089de0:	7c33      	ldrb	r3, [r6, #16]
 8089de2:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8089de4:	6025      	str	r5, [r4, #0]
 8089de6:	e008      	b.n	8089dfa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8089de8:	6804      	ldr	r4, [r0, #0]
 8089dea:	b134      	cbz	r4, 8089dfa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8089dec:	4620      	mov	r0, r4
 8089dee:	f7fd fed7 	bl	8087ba0 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8089df2:	2114      	movs	r1, #20
 8089df4:	4620      	mov	r0, r4
 8089df6:	f000 fc9a 	bl	808a72e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8089dfa:	2000      	movs	r0, #0
 8089dfc:	bd70      	pop	{r4, r5, r6, pc}
	...

08089e00 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 8089e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8089e02:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8089e04:	f3bf 8f5f 	dmb	sy
 8089e08:	b087      	sub	sp, #28
 8089e0a:	2300      	movs	r3, #0
 8089e0c:	e850 6f00 	ldrex	r6, [r0]
 8089e10:	e840 3200 	strex	r2, r3, [r0]
 8089e14:	2a00      	cmp	r2, #0
 8089e16:	d1f9      	bne.n	8089e0c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 8089e18:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8089e1c:	2e00      	cmp	r6, #0
 8089e1e:	d03f      	beq.n	8089ea0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8089e20:	4618      	mov	r0, r3
 8089e22:	f7fe fae9 	bl	80883f8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8089e26:	4607      	mov	r7, r0
 8089e28:	b120      	cbz	r0, 8089e34 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8089e2a:	4621      	mov	r1, r4
 8089e2c:	4630      	mov	r0, r6
 8089e2e:	f7ff fe53 	bl	8089ad8 <_ZNKSt8functionIFvRKbEEclES1_>
 8089e32:	e02e      	b.n	8089e92 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8089e34:	4631      	mov	r1, r6
 8089e36:	a801      	add	r0, sp, #4
 8089e38:	f7ff ffaf 	bl	8089d9a <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8089e3c:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8089e3e:	2010      	movs	r0, #16
 8089e40:	f88d 3014 	strb.w	r3, [sp, #20]
 8089e44:	f7f6 f92b 	bl	808009e <_Znwj>
 8089e48:	4605      	mov	r5, r0
 8089e4a:	b1d0      	cbz	r0, 8089e82 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8089e4c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8089e4e:	2014      	movs	r0, #20
 8089e50:	f7f6 f925 	bl	808009e <_Znwj>
 8089e54:	4604      	mov	r4, r0
 8089e56:	b178      	cbz	r0, 8089e78 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8089e58:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8089e5a:	4601      	mov	r1, r0
 8089e5c:	a801      	add	r0, sp, #4
 8089e5e:	f7ff fc3c 	bl	80896da <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8089e62:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8089e64:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8089e66:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8089e68:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8089e6a:	9203      	str	r2, [sp, #12]
 8089e6c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8089e6e:	60e3      	str	r3, [r4, #12]
 8089e70:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8089e74:	9204      	str	r2, [sp, #16]
 8089e76:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8089e78:	4b0a      	ldr	r3, [pc, #40]	; (8089ea4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8089e7a:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8089e7c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8089e7e:	4b0a      	ldr	r3, [pc, #40]	; (8089ea8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 8089e80:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8089e82:	a801      	add	r0, sp, #4
 8089e84:	f7fd fe8c 	bl	8087ba0 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8089e88:	2200      	movs	r2, #0
 8089e8a:	4629      	mov	r1, r5
 8089e8c:	4807      	ldr	r0, [pc, #28]	; (8089eac <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 8089e8e:	f7fe fabb 	bl	8088408 <application_thread_invoke>
 8089e92:	4630      	mov	r0, r6
 8089e94:	f7fd fe84 	bl	8087ba0 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8089e98:	2110      	movs	r1, #16
 8089e9a:	4630      	mov	r0, r6
 8089e9c:	f000 fc47 	bl	808a72e <_ZdlPvj>
        }
    }
 8089ea0:	b007      	add	sp, #28
 8089ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8089ea4:	08089aeb 	.word	0x08089aeb
 8089ea8:	08089db9 	.word	0x08089db9
 8089eac:	0808a339 	.word	0x0808a339

08089eb0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8089eb0:	b530      	push	{r4, r5, lr}
 8089eb2:	4604      	mov	r4, r0
 8089eb4:	b085      	sub	sp, #20
 8089eb6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 8089eb8:	4668      	mov	r0, sp
 8089eba:	4611      	mov	r1, r2
 8089ebc:	f7ff fdca 	bl	8089a54 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 8089ec0:	b17c      	cbz	r4, 8089ee2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 8089ec2:	b224      	sxth	r4, r4
 8089ec4:	4628      	mov	r0, r5
 8089ec6:	b10d      	cbz	r5, 8089ecc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 8089ec8:	f002 f948 	bl	808c15c <strdup>
 8089ecc:	9002      	str	r0, [sp, #8]
 8089ece:	a902      	add	r1, sp, #8
 8089ed0:	4668      	mov	r0, sp
 8089ed2:	f8ad 400c 	strh.w	r4, [sp, #12]
 8089ed6:	f7ff fe1f 	bl	8089b18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8089eda:	a802      	add	r0, sp, #8
 8089edc:	f7ff fd52 	bl	8089984 <_ZN8particle5ErrorD1Ev>
 8089ee0:	e01d      	b.n	8089f1e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8089ee2:	f04f 0201 	mov.w	r2, #1
 8089ee6:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8089ee8:	f88d 4008 	strb.w	r4, [sp, #8]
 8089eec:	e8d0 3f4f 	ldrexb	r3, [r0]
 8089ef0:	42a3      	cmp	r3, r4
 8089ef2:	d103      	bne.n	8089efc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 8089ef4:	e8c0 2f41 	strexb	r1, r2, [r0]
 8089ef8:	2900      	cmp	r1, #0
 8089efa:	d1f7      	bne.n	8089eec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 8089efc:	d002      	beq.n	8089f04 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 8089efe:	f88d 3008 	strb.w	r3, [sp, #8]
 8089f02:	e00c      	b.n	8089f1e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 8089f04:	f110 010c 	adds.w	r1, r0, #12
 8089f08:	f04f 0301 	mov.w	r3, #1
 8089f0c:	bf18      	it	ne
 8089f0e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8089f10:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 8089f14:	3004      	adds	r0, #4
 8089f16:	f800 3c03 	strb.w	r3, [r0, #-3]
 8089f1a:	f7ff ff71 	bl	8089e00 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 8089f1e:	a801      	add	r0, sp, #4
 8089f20:	f7fa f890 	bl	8084044 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 8089f24:	b005      	add	sp, #20
 8089f26:	bd30      	pop	{r4, r5, pc}

08089f28 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8089f28:	4770      	bx	lr

08089f2a <_ZN9IPAddressD0Ev>:
 8089f2a:	b510      	push	{r4, lr}
 8089f2c:	4604      	mov	r4, r0
 8089f2e:	2108      	movs	r1, #8
 8089f30:	f000 fbfd 	bl	808a72e <_ZdlPvj>
 8089f34:	4620      	mov	r0, r4
 8089f36:	bd10      	pop	{r4, pc}

08089f38 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8089f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8089f3a:	460f      	mov	r7, r1
 8089f3c:	f100 0608 	add.w	r6, r0, #8
 8089f40:	1d05      	adds	r5, r0, #4
 8089f42:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8089f44:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8089f48:	220a      	movs	r2, #10
 8089f4a:	4638      	mov	r0, r7
 8089f4c:	f7ff f8a7 	bl	808909e <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8089f50:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8089f52:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8089f54:	d007      	beq.n	8089f66 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 8089f56:	2c00      	cmp	r4, #0
 8089f58:	d0f4      	beq.n	8089f44 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8089f5a:	212e      	movs	r1, #46	; 0x2e
 8089f5c:	4638      	mov	r0, r7
 8089f5e:	f7ff f851 	bl	8089004 <_ZN5Print5printEc>
 8089f62:	4404      	add	r4, r0
 8089f64:	e7ee      	b.n	8089f44 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 8089f66:	4620      	mov	r0, r4
 8089f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08089f6c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 8089f6c:	4a02      	ldr	r2, [pc, #8]	; (8089f78 <_ZN9IPAddressC1Ev+0xc>)
 8089f6e:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8089f70:	2200      	movs	r2, #0
 8089f72:	6042      	str	r2, [r0, #4]
{
    clear();
}
 8089f74:	4770      	bx	lr
 8089f76:	bf00      	nop
 8089f78:	08091944 	.word	0x08091944

08089f7c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 8089f7c:	4a02      	ldr	r2, [pc, #8]	; (8089f88 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 8089f7e:	6002      	str	r2, [r0, #0]
{
    memcpy(&this->address, &address, sizeof(address));
 8089f80:	680a      	ldr	r2, [r1, #0]
 8089f82:	6042      	str	r2, [r0, #4]
}
 8089f84:	4770      	bx	lr
 8089f86:	bf00      	nop
 8089f88:	08091944 	.word	0x08091944

08089f8c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8089f8c:	4a01      	ldr	r2, [pc, #4]	; (8089f94 <_ZN9IPAddressC1Em+0x8>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 8089f8e:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8089f90:	6002      	str	r2, [r0, #0]
{
    *this = address;
}
 8089f92:	4770      	bx	lr
 8089f94:	08091944 	.word	0x08091944

08089f98 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 8089f98:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8089f9a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8089f9e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 8089fa2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8089fa6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8089faa:	6041      	str	r1, [r0, #4]
 8089fac:	bd10      	pop	{r4, pc}
	...

08089fb0 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8089fb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8089fb2:	4d04      	ldr	r5, [pc, #16]	; (8089fc4 <_ZN9IPAddressC1Ehhhh+0x14>)
 8089fb4:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8089fb6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8089fba:	9500      	str	r5, [sp, #0]
 8089fbc:	f7ff ffec 	bl	8089f98 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8089fc0:	b003      	add	sp, #12
 8089fc2:	bd30      	pop	{r4, r5, pc}
 8089fc4:	08091944 	.word	0x08091944

08089fc8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8089fc8:	7441      	strb	r1, [r0, #17]
 8089fca:	4770      	bx	lr

08089fcc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8089fcc:	4770      	bx	lr

08089fce <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 8089fce:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 8089fd0:	2100      	movs	r1, #0
 8089fd2:	7c00      	ldrb	r0, [r0, #16]
 8089fd4:	f7fe f9c8 	bl	8088368 <HAL_USB_USART_Receive_Data>
}
 8089fd8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8089fdc:	bf28      	it	cs
 8089fde:	f04f 30ff 	movcs.w	r0, #4294967295
 8089fe2:	bd08      	pop	{r3, pc}

08089fe4 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 8089fe4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 8089fe6:	2101      	movs	r1, #1
 8089fe8:	7c00      	ldrb	r0, [r0, #16]
 8089fea:	f7fe f9bd 	bl	8088368 <HAL_USB_USART_Receive_Data>
}
 8089fee:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8089ff2:	bf28      	it	cs
 8089ff4:	f04f 30ff 	movcs.w	r0, #4294967295
 8089ff8:	bd08      	pop	{r3, pc}

08089ffa <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 8089ffa:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8089ffc:	7c00      	ldrb	r0, [r0, #16]
 8089ffe:	f7fe f9ab 	bl	8088358 <HAL_USB_USART_Available_Data_For_Write>
}
 808a002:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808a006:	bd08      	pop	{r3, pc}

0808a008 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 808a008:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 808a00a:	7c00      	ldrb	r0, [r0, #16]
 808a00c:	f7fe f99c 	bl	8088348 <HAL_USB_USART_Available_Data>
}
 808a010:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808a014:	bd08      	pop	{r3, pc}

0808a016 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 808a016:	7c00      	ldrb	r0, [r0, #16]
 808a018:	f7fe b9b6 	b.w	8088388 <HAL_USB_USART_Flush_Data>

0808a01c <_ZN9USBSerialD0Ev>:
 808a01c:	b510      	push	{r4, lr}
 808a01e:	4604      	mov	r4, r0
 808a020:	2114      	movs	r1, #20
 808a022:	f000 fb84 	bl	808a72e <_ZdlPvj>
 808a026:	4620      	mov	r0, r4
 808a028:	bd10      	pop	{r4, pc}

0808a02a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 808a02a:	b538      	push	{r3, r4, r5, lr}
 808a02c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808a02e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 808a030:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808a032:	f7fe f991 	bl	8088358 <HAL_USB_USART_Available_Data_For_Write>
 808a036:	2800      	cmp	r0, #0
 808a038:	dc01      	bgt.n	808a03e <_ZN9USBSerial5writeEh+0x14>
 808a03a:	7c60      	ldrb	r0, [r4, #17]
 808a03c:	b128      	cbz	r0, 808a04a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 808a03e:	4629      	mov	r1, r5
 808a040:	7c20      	ldrb	r0, [r4, #16]
 808a042:	f7fe f999 	bl	8088378 <HAL_USB_USART_Send_Data>
 808a046:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 808a04a:	bd38      	pop	{r3, r4, r5, pc}

0808a04c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 808a04c:	b510      	push	{r4, lr}
 808a04e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 808a050:	2300      	movs	r3, #0
 808a052:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 808a054:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808a058:	60a3      	str	r3, [r4, #8]
 808a05a:	4b05      	ldr	r3, [pc, #20]	; (808a070 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 808a05c:	4608      	mov	r0, r1
 808a05e:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 808a060:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 808a062:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 808a064:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 808a066:	4611      	mov	r1, r2
 808a068:	f7fe f95e 	bl	8088328 <HAL_USB_USART_Init>
}
 808a06c:	4620      	mov	r0, r4
 808a06e:	bd10      	pop	{r4, pc}
 808a070:	08091958 	.word	0x08091958

0808a074 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 808a074:	2200      	movs	r2, #0
 808a076:	7c00      	ldrb	r0, [r0, #16]
 808a078:	f7fe b95e 	b.w	8088338 <HAL_USB_USART_Begin>

0808a07c <_Z19acquireSerialBufferv>:
 808a07c:	b510      	push	{r4, lr}
 808a07e:	4604      	mov	r4, r0
 808a080:	2214      	movs	r2, #20
 808a082:	2100      	movs	r1, #0
 808a084:	f002 f81a 	bl	808c0bc <memset>
 808a088:	4620      	mov	r0, r4
 808a08a:	bd10      	pop	{r4, pc}

0808a08c <_Z16_fetch_usbserialv>:

  return conf;
}

USBSerial& _fetch_usbserial()
{
 808a08c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 808a08e:	4d0e      	ldr	r5, [pc, #56]	; (808a0c8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 808a090:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 808a092:	a801      	add	r0, sp, #4
 808a094:	f7ff fff2 	bl	808a07c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 808a098:	6829      	ldr	r1, [r5, #0]
 808a09a:	f011 0401 	ands.w	r4, r1, #1
 808a09e:	d110      	bne.n	808a0c2 <_Z16_fetch_usbserialv+0x36>
 808a0a0:	4628      	mov	r0, r5
 808a0a2:	f7f6 f800 	bl	80800a6 <__cxa_guard_acquire>
 808a0a6:	b160      	cbz	r0, 808a0c2 <_Z16_fetch_usbserialv+0x36>
 808a0a8:	aa01      	add	r2, sp, #4
 808a0aa:	4621      	mov	r1, r4
 808a0ac:	4807      	ldr	r0, [pc, #28]	; (808a0cc <_Z16_fetch_usbserialv+0x40>)
 808a0ae:	f7ff ffcd 	bl	808a04c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 808a0b2:	4628      	mov	r0, r5
 808a0b4:	f7f5 fffc 	bl	80800b0 <__cxa_guard_release>
 808a0b8:	4a05      	ldr	r2, [pc, #20]	; (808a0d0 <_Z16_fetch_usbserialv+0x44>)
 808a0ba:	4906      	ldr	r1, [pc, #24]	; (808a0d4 <_Z16_fetch_usbserialv+0x48>)
 808a0bc:	4803      	ldr	r0, [pc, #12]	; (808a0cc <_Z16_fetch_usbserialv+0x40>)
 808a0be:	f000 fb31 	bl	808a724 <__aeabi_atexit>
	return _usbserial;
}
 808a0c2:	4802      	ldr	r0, [pc, #8]	; (808a0cc <_Z16_fetch_usbserialv+0x40>)
 808a0c4:	b007      	add	sp, #28
 808a0c6:	bd30      	pop	{r4, r5, pc}
 808a0c8:	20000bf8 	.word	0x20000bf8
 808a0cc:	20000c00 	.word	0x20000c00
 808a0d0:	200001c8 	.word	0x200001c8
 808a0d4:	08089fcd 	.word	0x08089fcd

0808a0d8 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 808a0d8:	b510      	push	{r4, lr}
 808a0da:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 808a0dc:	2214      	movs	r2, #20
 808a0de:	2100      	movs	r1, #0
 808a0e0:	f001 ffec 	bl	808c0bc <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 808a0e4:	4620      	mov	r0, r4
 808a0e6:	bd10      	pop	{r4, pc}

0808a0e8 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 808a0e8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808a0ea:	4c0e      	ldr	r4, [pc, #56]	; (808a124 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 808a0ec:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 808a0ee:	a801      	add	r0, sp, #4
 808a0f0:	f7ff fff2 	bl	808a0d8 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808a0f4:	6823      	ldr	r3, [r4, #0]
 808a0f6:	07db      	lsls	r3, r3, #31
 808a0f8:	d410      	bmi.n	808a11c <_Z17_fetch_usbserial1v+0x34>
 808a0fa:	4620      	mov	r0, r4
 808a0fc:	f7f5 ffd3 	bl	80800a6 <__cxa_guard_acquire>
 808a100:	b160      	cbz	r0, 808a11c <_Z17_fetch_usbserial1v+0x34>
 808a102:	aa01      	add	r2, sp, #4
 808a104:	2101      	movs	r1, #1
 808a106:	4808      	ldr	r0, [pc, #32]	; (808a128 <_Z17_fetch_usbserial1v+0x40>)
 808a108:	f7ff ffa0 	bl	808a04c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 808a10c:	4620      	mov	r0, r4
 808a10e:	f7f5 ffcf 	bl	80800b0 <__cxa_guard_release>
 808a112:	4a06      	ldr	r2, [pc, #24]	; (808a12c <_Z17_fetch_usbserial1v+0x44>)
 808a114:	4906      	ldr	r1, [pc, #24]	; (808a130 <_Z17_fetch_usbserial1v+0x48>)
 808a116:	4804      	ldr	r0, [pc, #16]	; (808a128 <_Z17_fetch_usbserial1v+0x40>)
 808a118:	f000 fb04 	bl	808a724 <__aeabi_atexit>
  return _usbserial1;
}
 808a11c:	4802      	ldr	r0, [pc, #8]	; (808a128 <_Z17_fetch_usbserial1v+0x40>)
 808a11e:	b006      	add	sp, #24
 808a120:	bd10      	pop	{r4, pc}
 808a122:	bf00      	nop
 808a124:	20000bfc 	.word	0x20000bfc
 808a128:	20000c14 	.word	0x20000c14
 808a12c:	200001c8 	.word	0x200001c8
 808a130:	08089fcd 	.word	0x08089fcd

0808a134 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 808a134:	2200      	movs	r2, #0
 808a136:	4611      	mov	r1, r2
 808a138:	6840      	ldr	r0, [r0, #4]
 808a13a:	f7fe b9a9 	b.w	8088490 <network_ready>

0808a13e <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 808a13e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
        HAL_IPAddress ip = {0};
 808a142:	2600      	movs	r6, #0
 808a144:	ac04      	add	r4, sp, #16
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 808a146:	4605      	mov	r5, r0
    {
        HAL_IPAddress ip = {0};
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808a148:	4610      	mov	r0, r2
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 808a14a:	4688      	mov	r8, r1
 808a14c:	4617      	mov	r7, r2
    {
        HAL_IPAddress ip = {0};
 808a14e:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808a152:	f002 fd33 	bl	808cbbc <strlen>
 808a156:	9600      	str	r6, [sp, #0]
 808a158:	b281      	uxth	r1, r0
 808a15a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 808a15e:	4622      	mov	r2, r4
 808a160:	4638      	mov	r0, r7
 808a162:	f7fe f8d1 	bl	8088308 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 808a166:	b120      	cbz	r0, 808a172 <_ZN5spark13CellularClass7resolveEPKc+0x34>
 808a168:	4631      	mov	r1, r6
 808a16a:	4628      	mov	r0, r5
 808a16c:	f7ff ff0e 	bl	8089f8c <_ZN9IPAddressC1Em>
 808a170:	e003      	b.n	808a17a <_ZN5spark13CellularClass7resolveEPKc+0x3c>
 808a172:	4621      	mov	r1, r4
 808a174:	4628      	mov	r0, r5
 808a176:	f7ff ff01 	bl	8089f7c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 808a17a:	4628      	mov	r0, r5
 808a17c:	b004      	add	sp, #16
 808a17e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808a182 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 808a182:	2200      	movs	r2, #0
 808a184:	4611      	mov	r1, r2
 808a186:	6840      	ldr	r0, [r0, #4]
 808a188:	f7fe b9a2 	b.w	80884d0 <network_listening>

0808a18c <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 808a18c:	2200      	movs	r2, #0
 808a18e:	4611      	mov	r1, r2
 808a190:	6840      	ldr	r0, [r0, #4]
 808a192:	f7fe b9ad 	b.w	80884f0 <network_get_listen_timeout>

0808a196 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 808a196:	2200      	movs	r2, #0
 808a198:	6840      	ldr	r0, [r0, #4]
 808a19a:	f7fe b9a1 	b.w	80884e0 <network_set_listen_timeout>

0808a19e <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 808a19e:	2200      	movs	r2, #0
 808a1a0:	f081 0101 	eor.w	r1, r1, #1
 808a1a4:	6840      	ldr	r0, [r0, #4]
 808a1a6:	f7fe b98b 	b.w	80884c0 <network_listen>

0808a1aa <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 808a1aa:	2300      	movs	r3, #0
 808a1ac:	461a      	mov	r2, r3
 808a1ae:	4619      	mov	r1, r3
 808a1b0:	6840      	ldr	r0, [r0, #4]
 808a1b2:	f7fe b975 	b.w	80884a0 <network_on>

0808a1b6 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 808a1b6:	2200      	movs	r2, #0
 808a1b8:	4611      	mov	r1, r2
 808a1ba:	6840      	ldr	r0, [r0, #4]
 808a1bc:	f7fe b958 	b.w	8088470 <network_connecting>

0808a1c0 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 808a1c0:	2200      	movs	r2, #0
 808a1c2:	2102      	movs	r1, #2
 808a1c4:	6840      	ldr	r0, [r0, #4]
 808a1c6:	f7fe b95b 	b.w	8088480 <network_disconnect>

0808a1ca <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 808a1ca:	2300      	movs	r3, #0
 808a1cc:	461a      	mov	r2, r3
 808a1ce:	6840      	ldr	r0, [r0, #4]
 808a1d0:	f7fe b946 	b.w	8088460 <network_connect>

0808a1d4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 808a1d4:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 808a1d6:	4c08      	ldr	r4, [pc, #32]	; (808a1f8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 808a1d8:	2528      	movs	r5, #40	; 0x28
 808a1da:	462a      	mov	r2, r5
 808a1dc:	2100      	movs	r1, #0
 808a1de:	4620      	mov	r0, r4
 808a1e0:	f001 ff6c 	bl	808c0bc <memset>
        cid = -1;
 808a1e4:	f04f 33ff 	mov.w	r3, #4294967295
 808a1e8:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 808a1ea:	4b04      	ldr	r3, [pc, #16]	; (808a1fc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
 808a1ec:	2204      	movs	r2, #4
 808a1ee:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 808a1f0:	4a03      	ldr	r2, [pc, #12]	; (808a200 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
        size = sizeof(*this);
 808a1f2:	8025      	strh	r5, [r4, #0]
 808a1f4:	601a      	str	r2, [r3, #0]
 808a1f6:	bd38      	pop	{r3, r4, r5, pc}
 808a1f8:	20000c30 	.word	0x20000c30
 808a1fc:	20000c28 	.word	0x20000c28
 808a200:	08091988 	.word	0x08091988

0808a204 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 808a204:	7441      	strb	r1, [r0, #17]
 808a206:	4770      	bx	lr

0808a208 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 808a208:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 808a20a:	7c00      	ldrb	r0, [r0, #16]
 808a20c:	f7fe f804 	bl	8088218 <HAL_USART_Available_Data_For_Write>
}
 808a210:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808a214:	bd08      	pop	{r3, pc}

0808a216 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 808a216:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 808a218:	7c00      	ldrb	r0, [r0, #16]
 808a21a:	f7fd ffd5 	bl	80881c8 <HAL_USART_Available_Data>
}
 808a21e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808a222:	bd08      	pop	{r3, pc}

0808a224 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 808a224:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 808a226:	7c00      	ldrb	r0, [r0, #16]
 808a228:	f7fd ffde 	bl	80881e8 <HAL_USART_Peek_Data>
}
 808a22c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 808a230:	bf28      	it	cs
 808a232:	f04f 30ff 	movcs.w	r0, #4294967295
 808a236:	bd08      	pop	{r3, pc}

0808a238 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 808a238:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 808a23a:	7c00      	ldrb	r0, [r0, #16]
 808a23c:	f7fd ffcc 	bl	80881d8 <HAL_USART_Read_Data>
}
 808a240:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 808a244:	bf28      	it	cs
 808a246:	f04f 30ff 	movcs.w	r0, #4294967295
 808a24a:	bd08      	pop	{r3, pc}

0808a24c <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 808a24c:	7c00      	ldrb	r0, [r0, #16]
 808a24e:	f7fd bfd3 	b.w	80881f8 <HAL_USART_Flush_Data>

0808a252 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 808a252:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 808a254:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 808a256:	4604      	mov	r4, r0
 808a258:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 808a25a:	b925      	cbnz	r5, 808a266 <_ZN11USARTSerial5writeEh+0x14>
 808a25c:	7c00      	ldrb	r0, [r0, #16]
 808a25e:	f7fd ffdb 	bl	8088218 <HAL_USART_Available_Data_For_Write>
 808a262:	2800      	cmp	r0, #0
 808a264:	dd05      	ble.n	808a272 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 808a266:	4631      	mov	r1, r6
 808a268:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 808a26a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 808a26e:	f7fd bfa3 	b.w	80881b8 <HAL_USART_Write_Data>
  }
  return 0;
}
 808a272:	4628      	mov	r0, r5
 808a274:	bd70      	pop	{r4, r5, r6, pc}
	...

0808a278 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 808a278:	b510      	push	{r4, lr}
 808a27a:	4604      	mov	r4, r0
 808a27c:	4608      	mov	r0, r1
 808a27e:	4611      	mov	r1, r2
 808a280:	2200      	movs	r2, #0
 808a282:	6062      	str	r2, [r4, #4]
 808a284:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 808a288:	60a2      	str	r2, [r4, #8]
 808a28a:	4a05      	ldr	r2, [pc, #20]	; (808a2a0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 808a28c:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 808a28e:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 808a290:	2201      	movs	r2, #1
 808a292:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 808a294:	461a      	mov	r2, r3
 808a296:	f7fd ff87 	bl	80881a8 <HAL_USART_Init>
}
 808a29a:	4620      	mov	r0, r4
 808a29c:	bd10      	pop	{r4, pc}
 808a29e:	bf00      	nop
 808a2a0:	080919bc 	.word	0x080919bc

0808a2a4 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 808a2a4:	2300      	movs	r3, #0
 808a2a6:	7c00      	ldrb	r0, [r0, #16]
 808a2a8:	f7fd bfbe 	b.w	8088228 <HAL_USART_BeginConfig>

0808a2ac <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 808a2ac:	2200      	movs	r2, #0
 808a2ae:	f7ff bff9 	b.w	808a2a4 <_ZN11USARTSerial5beginEmm>

0808a2b2 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 808a2b2:	7c00      	ldrb	r0, [r0, #16]
 808a2b4:	f7fd bfa8 	b.w	8088208 <HAL_USART_Is_Enabled>

0808a2b8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 808a2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 808a2ba:	4c19      	ldr	r4, [pc, #100]	; (808a320 <_Z22__fetch_global_Serial1v+0x68>)
 808a2bc:	6825      	ldr	r5, [r4, #0]
 808a2be:	b94d      	cbnz	r5, 808a2d4 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
 808a2c0:	2084      	movs	r0, #132	; 0x84
 808a2c2:	f7f5 feec 	bl	808009e <_Znwj>
 808a2c6:	4606      	mov	r6, r0
 808a2c8:	b118      	cbz	r0, 808a2d2 <_Z22__fetch_global_Serial1v+0x1a>
 808a2ca:	2284      	movs	r2, #132	; 0x84
 808a2cc:	4629      	mov	r1, r5
 808a2ce:	f001 fef5 	bl	808c0bc <memset>
 808a2d2:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 808a2d4:	4d13      	ldr	r5, [pc, #76]	; (808a324 <_Z22__fetch_global_Serial1v+0x6c>)
 808a2d6:	682e      	ldr	r6, [r5, #0]
 808a2d8:	b94e      	cbnz	r6, 808a2ee <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
 808a2da:	2084      	movs	r0, #132	; 0x84
 808a2dc:	f7f5 fedf 	bl	808009e <_Znwj>
 808a2e0:	4607      	mov	r7, r0
 808a2e2:	b118      	cbz	r0, 808a2ec <_Z22__fetch_global_Serial1v+0x34>
 808a2e4:	2284      	movs	r2, #132	; 0x84
 808a2e6:	4631      	mov	r1, r6
 808a2e8:	f001 fee8 	bl	808c0bc <memset>
 808a2ec:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 808a2ee:	4f0e      	ldr	r7, [pc, #56]	; (808a328 <_Z22__fetch_global_Serial1v+0x70>)
 808a2f0:	6839      	ldr	r1, [r7, #0]
 808a2f2:	f011 0601 	ands.w	r6, r1, #1
 808a2f6:	d111      	bne.n	808a31c <_Z22__fetch_global_Serial1v+0x64>
 808a2f8:	4638      	mov	r0, r7
 808a2fa:	f7f5 fed4 	bl	80800a6 <__cxa_guard_acquire>
 808a2fe:	b168      	cbz	r0, 808a31c <_Z22__fetch_global_Serial1v+0x64>
 808a300:	6822      	ldr	r2, [r4, #0]
 808a302:	4631      	mov	r1, r6
 808a304:	682b      	ldr	r3, [r5, #0]
 808a306:	4809      	ldr	r0, [pc, #36]	; (808a32c <_Z22__fetch_global_Serial1v+0x74>)
 808a308:	f7ff ffb6 	bl	808a278 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 808a30c:	4638      	mov	r0, r7
 808a30e:	f7f5 fecf 	bl	80800b0 <__cxa_guard_release>
 808a312:	4a07      	ldr	r2, [pc, #28]	; (808a330 <_Z22__fetch_global_Serial1v+0x78>)
 808a314:	4907      	ldr	r1, [pc, #28]	; (808a334 <_Z22__fetch_global_Serial1v+0x7c>)
 808a316:	4805      	ldr	r0, [pc, #20]	; (808a32c <_Z22__fetch_global_Serial1v+0x74>)
 808a318:	f000 fa04 	bl	808a724 <__aeabi_atexit>
#endif
	return serial1;
}
 808a31c:	4803      	ldr	r0, [pc, #12]	; (808a32c <_Z22__fetch_global_Serial1v+0x74>)
 808a31e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808a320:	20000c74 	.word	0x20000c74
 808a324:	20000c6c 	.word	0x20000c6c
 808a328:	20000c70 	.word	0x20000c70
 808a32c:	20000c58 	.word	0x20000c58
 808a330:	200001c8 	.word	0x200001c8
 808a334:	08080915 	.word	0x08080915

0808a338 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 808a338:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808a33a:	6883      	ldr	r3, [r0, #8]
 808a33c:	4604      	mov	r4, r0
 808a33e:	b90b      	cbnz	r3, 808a344 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 808a340:	f000 f9f7 	bl	808a732 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808a344:	68c3      	ldr	r3, [r0, #12]
 808a346:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 808a348:	68a3      	ldr	r3, [r4, #8]
 808a34a:	b11b      	cbz	r3, 808a354 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 808a34c:	2203      	movs	r2, #3
 808a34e:	4621      	mov	r1, r4
 808a350:	4620      	mov	r0, r4
 808a352:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 808a354:	4620      	mov	r0, r4
}
 808a356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 808a35a:	2110      	movs	r1, #16
 808a35c:	f000 b9e7 	b.w	808a72e <_ZdlPvj>

0808a360 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 808a360:	4770      	bx	lr

0808a362 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 808a362:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808a364:	4606      	mov	r6, r0
 808a366:	4615      	mov	r5, r2
 808a368:	460c      	mov	r4, r1
 808a36a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 808a36c:	42bc      	cmp	r4, r7
 808a36e:	d006      	beq.n	808a37e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 808a370:	6833      	ldr	r3, [r6, #0]
 808a372:	f814 1b01 	ldrb.w	r1, [r4], #1
 808a376:	689b      	ldr	r3, [r3, #8]
 808a378:	4630      	mov	r0, r6
 808a37a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 808a37c:	e7f6      	b.n	808a36c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 808a37e:	4628      	mov	r0, r5
 808a380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808a382 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 808a382:	2200      	movs	r2, #0
 808a384:	7c00      	ldrb	r0, [r0, #16]
 808a386:	f7fd bf77 	b.w	8088278 <HAL_I2C_Write_Data>

0808a38a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 808a38a:	2100      	movs	r1, #0
 808a38c:	7c00      	ldrb	r0, [r0, #16]
 808a38e:	f7fd bf7b 	b.w	8088288 <HAL_I2C_Available_Data>

0808a392 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 808a392:	2100      	movs	r1, #0
 808a394:	7c00      	ldrb	r0, [r0, #16]
 808a396:	f7fd bf7f 	b.w	8088298 <HAL_I2C_Read_Data>

0808a39a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 808a39a:	2100      	movs	r1, #0
 808a39c:	7c00      	ldrb	r0, [r0, #16]
 808a39e:	f7fd bf83 	b.w	80882a8 <HAL_I2C_Peek_Data>

0808a3a2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 808a3a2:	2100      	movs	r1, #0
 808a3a4:	7c00      	ldrb	r0, [r0, #16]
 808a3a6:	f7fd bf87 	b.w	80882b8 <HAL_I2C_Flush_Data>

0808a3aa <_ZN7TwoWireD0Ev>:
 808a3aa:	b510      	push	{r4, lr}
 808a3ac:	4604      	mov	r4, r0
 808a3ae:	2114      	movs	r1, #20
 808a3b0:	f000 f9bd 	bl	808a72e <_ZdlPvj>
 808a3b4:	4620      	mov	r0, r4
 808a3b6:	bd10      	pop	{r4, pc}

0808a3b8 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 808a3b8:	b510      	push	{r4, lr}
 808a3ba:	4604      	mov	r4, r0
 808a3bc:	4608      	mov	r0, r1
 808a3be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808a3c2:	60a3      	str	r3, [r4, #8]
 808a3c4:	4b04      	ldr	r3, [pc, #16]	; (808a3d8 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 808a3c6:	2100      	movs	r1, #0
{
  _i2c = i2c;
 808a3c8:	7420      	strb	r0, [r4, #16]
 808a3ca:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 808a3cc:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 808a3ce:	f7fd ff83 	bl	80882d8 <HAL_I2C_Init>

}
 808a3d2:	4620      	mov	r0, r4
 808a3d4:	bd10      	pop	{r4, pc}
 808a3d6:	bf00      	nop
 808a3d8:	080919ec 	.word	0x080919ec

0808a3dc <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 808a3dc:	2300      	movs	r3, #0
 808a3de:	461a      	mov	r2, r3
 808a3e0:	4619      	mov	r1, r3
 808a3e2:	7c00      	ldrb	r0, [r0, #16]
 808a3e4:	f7fd bf28 	b.w	8088238 <HAL_I2C_Begin>

0808a3e8 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 808a3e8:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 808a3ea:	2400      	movs	r4, #0
 808a3ec:	7c00      	ldrb	r0, [r0, #16]
 808a3ee:	9400      	str	r4, [sp, #0]
 808a3f0:	f7fd ff2a 	bl	8088248 <HAL_I2C_Request_Data>
  return result;
}
 808a3f4:	b2c0      	uxtb	r0, r0
 808a3f6:	b002      	add	sp, #8
 808a3f8:	bd10      	pop	{r4, pc}

0808a3fa <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 808a3fa:	2301      	movs	r3, #1
 808a3fc:	f7ff bff4 	b.w	808a3e8 <_ZN7TwoWire11requestFromEhhh>

0808a400 <_ZN7TwoWire11requestFromEii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 808a400:	2301      	movs	r3, #1
 808a402:	b2d2      	uxtb	r2, r2
 808a404:	b2c9      	uxtb	r1, r1
 808a406:	f7ff bfef 	b.w	808a3e8 <_ZN7TwoWire11requestFromEhhh>

0808a40a <_ZN7TwoWire11requestFromEiii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
 808a40a:	b2db      	uxtb	r3, r3
 808a40c:	b2d2      	uxtb	r2, r2
 808a40e:	b2c9      	uxtb	r1, r1
 808a410:	f7ff bfea 	b.w	808a3e8 <_ZN7TwoWire11requestFromEhhh>

0808a414 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 808a414:	2200      	movs	r2, #0
 808a416:	7c00      	ldrb	r0, [r0, #16]
 808a418:	f7fd bf1e 	b.w	8088258 <HAL_I2C_Begin_Transmission>

0808a41c <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 808a41c:	b2c9      	uxtb	r1, r1
 808a41e:	f7ff bff9 	b.w	808a414 <_ZN7TwoWire17beginTransmissionEh>

0808a422 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 808a422:	2200      	movs	r2, #0
 808a424:	7c00      	ldrb	r0, [r0, #16]
 808a426:	f7fd bf1f 	b.w	8088268 <HAL_I2C_End_Transmission>

0808a42a <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 808a42a:	2101      	movs	r1, #1
 808a42c:	f7ff bff9 	b.w	808a422 <_ZN7TwoWire15endTransmissionEh>

0808a430 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 808a430:	2100      	movs	r1, #0
 808a432:	7c00      	ldrb	r0, [r0, #16]
 808a434:	f7fd bf48 	b.w	80882c8 <HAL_I2C_Is_Enabled>

0808a438 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 808a438:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
 808a43a:	2100      	movs	r1, #0
 808a43c:	7c00      	ldrb	r0, [r0, #16]
 808a43e:	f7fd ff53 	bl	80882e8 <HAL_I2C_Acquire>
}
 808a442:	fab0 f080 	clz	r0, r0
 808a446:	0940      	lsrs	r0, r0, #5
 808a448:	bd08      	pop	{r3, pc}

0808a44a <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 808a44a:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
 808a44c:	2100      	movs	r1, #0
 808a44e:	7c00      	ldrb	r0, [r0, #16]
 808a450:	f7fd ff52 	bl	80882f8 <HAL_I2C_Release>
}
 808a454:	fab0 f080 	clz	r0, r0
 808a458:	0940      	lsrs	r0, r0, #5
 808a45a:	bd08      	pop	{r3, pc}

0808a45c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 808a45c:	2300      	movs	r3, #0
 808a45e:	461a      	mov	r2, r3
 808a460:	6840      	ldr	r0, [r0, #4]
 808a462:	f7fd bffd 	b.w	8088460 <network_connect>

0808a466 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 808a466:	2200      	movs	r2, #0
 808a468:	2102      	movs	r1, #2
 808a46a:	6840      	ldr	r0, [r0, #4]
 808a46c:	f7fe b808 	b.w	8088480 <network_disconnect>

0808a470 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 808a470:	2200      	movs	r2, #0
 808a472:	4611      	mov	r1, r2
 808a474:	6840      	ldr	r0, [r0, #4]
 808a476:	f7fd bffb 	b.w	8088470 <network_connecting>

0808a47a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 808a47a:	2200      	movs	r2, #0
 808a47c:	4611      	mov	r1, r2
 808a47e:	6840      	ldr	r0, [r0, #4]
 808a480:	f7fe b806 	b.w	8088490 <network_ready>

0808a484 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 808a484:	2300      	movs	r3, #0
 808a486:	461a      	mov	r2, r3
 808a488:	4619      	mov	r1, r3
 808a48a:	6840      	ldr	r0, [r0, #4]
 808a48c:	f7fe b808 	b.w	80884a0 <network_on>

0808a490 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 808a490:	2300      	movs	r3, #0
 808a492:	461a      	mov	r2, r3
 808a494:	4619      	mov	r1, r3
 808a496:	6840      	ldr	r0, [r0, #4]
 808a498:	f7fe b80a 	b.w	80884b0 <network_off>

0808a49c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 808a49c:	2200      	movs	r2, #0
 808a49e:	f081 0101 	eor.w	r1, r1, #1
 808a4a2:	6840      	ldr	r0, [r0, #4]
 808a4a4:	f7fe b80c 	b.w	80884c0 <network_listen>

0808a4a8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 808a4a8:	2200      	movs	r2, #0
 808a4aa:	6840      	ldr	r0, [r0, #4]
 808a4ac:	f7fe b818 	b.w	80884e0 <network_set_listen_timeout>

0808a4b0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 808a4b0:	2200      	movs	r2, #0
 808a4b2:	4611      	mov	r1, r2
 808a4b4:	6840      	ldr	r0, [r0, #4]
 808a4b6:	f7fe b81b 	b.w	80884f0 <network_get_listen_timeout>

0808a4ba <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 808a4ba:	2200      	movs	r2, #0
 808a4bc:	4611      	mov	r1, r2
 808a4be:	6840      	ldr	r0, [r0, #4]
 808a4c0:	f7fe b806 	b.w	80884d0 <network_listening>

0808a4c4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 808a4c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 808a4c6:	4617      	mov	r7, r2
 808a4c8:	b087      	sub	sp, #28
 808a4ca:	4605      	mov	r5, r0
    IPAddress addr;
 808a4cc:	a804      	add	r0, sp, #16
 808a4ce:	f7ff fd4d 	bl	8089f6c <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 808a4d2:	2600      	movs	r6, #0
 808a4d4:	ac06      	add	r4, sp, #24
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808a4d6:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 808a4d8:	f844 6d0c 	str.w	r6, [r4, #-12]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808a4dc:	f002 fb6e 	bl	808cbbc <strlen>
 808a4e0:	4b0a      	ldr	r3, [pc, #40]	; (808a50c <_ZN5spark12NetworkClass7resolveEPKc+0x48>)
 808a4e2:	9600      	str	r6, [sp, #0]
 808a4e4:	b281      	uxth	r1, r0
 808a4e6:	685b      	ldr	r3, [r3, #4]
 808a4e8:	4622      	mov	r2, r4
 808a4ea:	4638      	mov	r0, r7
 808a4ec:	f7fd ff0c 	bl	8088308 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 808a4f0:	b120      	cbz	r0, 808a4fc <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 808a4f2:	4631      	mov	r1, r6
 808a4f4:	4628      	mov	r0, r5
 808a4f6:	f7ff fd49 	bl	8089f8c <_ZN9IPAddressC1Em>
 808a4fa:	e003      	b.n	808a504 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 808a4fc:	4621      	mov	r1, r4
 808a4fe:	4628      	mov	r0, r5
 808a500:	f7ff fd3c 	bl	8089f7c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 808a504:	4628      	mov	r0, r5
 808a506:	b007      	add	sp, #28
 808a508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808a50a:	bf00      	nop
 808a50c:	20000c28 	.word	0x20000c28

0808a510 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 808a510:	4b02      	ldr	r3, [pc, #8]	; (808a51c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 808a512:	4a03      	ldr	r2, [pc, #12]	; (808a520 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 808a514:	601a      	str	r2, [r3, #0]
 808a516:	2200      	movs	r2, #0
 808a518:	605a      	str	r2, [r3, #4]
 808a51a:	4770      	bx	lr
 808a51c:	20000c78 	.word	0x20000c78
 808a520:	08091a14 	.word	0x08091a14

0808a524 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 808a524:	b510      	push	{r4, lr}
 808a526:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 808a528:	480f      	ldr	r0, [pc, #60]	; (808a568 <pinAvailable+0x44>)
 808a52a:	f7fe fa72 	bl	8088a12 <_ZN8SPIClass9isEnabledEv>
 808a52e:	b128      	cbz	r0, 808a53c <pinAvailable+0x18>
 808a530:	f1a4 030d 	sub.w	r3, r4, #13
 808a534:	2b02      	cmp	r3, #2
 808a536:	d801      	bhi.n	808a53c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 808a538:	2000      	movs	r0, #0
 808a53a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 808a53c:	f000 f8b2 	bl	808a6a4 <_Z19__fetch_global_Wirev>
 808a540:	f7ff ff76 	bl	808a430 <_ZN7TwoWire9isEnabledEv>
 808a544:	b108      	cbz	r0, 808a54a <pinAvailable+0x26>
 808a546:	2c01      	cmp	r4, #1
 808a548:	d9f6      	bls.n	808a538 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 808a54a:	f7ff feb5 	bl	808a2b8 <_Z22__fetch_global_Serial1v>
 808a54e:	f7ff feb0 	bl	808a2b2 <_ZN11USARTSerial9isEnabledEv>
 808a552:	b118      	cbz	r0, 808a55c <pinAvailable+0x38>
 808a554:	f1a4 0312 	sub.w	r3, r4, #18
 808a558:	2b01      	cmp	r3, #1
 808a55a:	d9ed      	bls.n	808a538 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 808a55c:	2c2e      	cmp	r4, #46	; 0x2e
 808a55e:	bf8c      	ite	hi
 808a560:	2000      	movhi	r0, #0
 808a562:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 808a564:	bd10      	pop	{r4, pc}
 808a566:	bf00      	nop
 808a568:	20000c80 	.word	0x20000c80

0808a56c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 808a56c:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 808a56e:	b538      	push	{r3, r4, r5, lr}
 808a570:	4604      	mov	r4, r0
 808a572:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 808a574:	d80a      	bhi.n	808a58c <pinMode+0x20>
 808a576:	29ff      	cmp	r1, #255	; 0xff
 808a578:	d008      	beq.n	808a58c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 808a57a:	f7ff ffd3 	bl	808a524 <pinAvailable>
 808a57e:	b128      	cbz	r0, 808a58c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 808a580:	4629      	mov	r1, r5
 808a582:	4620      	mov	r0, r4
}
 808a584:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 808a588:	f7fd bd46 	b.w	8088018 <HAL_Pin_Mode>
 808a58c:	bd38      	pop	{r3, r4, r5, pc}

0808a58e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 808a58e:	b538      	push	{r3, r4, r5, lr}
 808a590:	4604      	mov	r4, r0
 808a592:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 808a594:	f7fd fd48 	bl	8088028 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 808a598:	28ff      	cmp	r0, #255	; 0xff
 808a59a:	d010      	beq.n	808a5be <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 808a59c:	2806      	cmp	r0, #6
 808a59e:	d804      	bhi.n	808a5aa <digitalWrite+0x1c>
 808a5a0:	234d      	movs	r3, #77	; 0x4d
 808a5a2:	fa23 f000 	lsr.w	r0, r3, r0
 808a5a6:	07c3      	lsls	r3, r0, #31
 808a5a8:	d409      	bmi.n	808a5be <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 808a5aa:	4620      	mov	r0, r4
 808a5ac:	f7ff ffba 	bl	808a524 <pinAvailable>
 808a5b0:	b128      	cbz	r0, 808a5be <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 808a5b2:	4629      	mov	r1, r5
 808a5b4:	4620      	mov	r0, r4
}
 808a5b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 808a5ba:	f7fd bd3d 	b.w	8088038 <HAL_GPIO_Write>
 808a5be:	bd38      	pop	{r3, r4, r5, pc}

0808a5c0 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 808a5c0:	b510      	push	{r4, lr}
 808a5c2:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 808a5c4:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 808a5c6:	bf9c      	itt	ls
 808a5c8:	340a      	addls	r4, #10
 808a5ca:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 808a5cc:	4620      	mov	r0, r4
 808a5ce:	f7ff ffa9 	bl	808a524 <pinAvailable>
 808a5d2:	b150      	cbz	r0, 808a5ea <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 808a5d4:	2103      	movs	r1, #3
 808a5d6:	4620      	mov	r0, r4
 808a5d8:	f7fd fd16 	bl	8088008 <HAL_Validate_Pin_Function>
 808a5dc:	2803      	cmp	r0, #3
 808a5de:	d104      	bne.n	808a5ea <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 808a5e0:	4620      	mov	r0, r4
}
 808a5e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 808a5e6:	f7fd bd37 	b.w	8088058 <HAL_ADC_Read>
}
 808a5ea:	2000      	movs	r0, #0
 808a5ec:	bd10      	pop	{r4, pc}
	...

0808a5f0 <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 808a5f0:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 808a5f2:	4e11      	ldr	r6, [pc, #68]	; (808a638 <_GLOBAL__sub_I_SPI+0x48>)
 808a5f4:	4d11      	ldr	r5, [pc, #68]	; (808a63c <_GLOBAL__sub_I_SPI+0x4c>)
 808a5f6:	4c12      	ldr	r4, [pc, #72]	; (808a640 <_GLOBAL__sub_I_SPI+0x50>)
 808a5f8:	2100      	movs	r1, #0
 808a5fa:	4630      	mov	r0, r6
 808a5fc:	f7fe f976 	bl	80888ec <_ZN8SPIClassC1E17HAL_SPI_Interface>
 808a600:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 808a602:	4e10      	ldr	r6, [pc, #64]	; (808a644 <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 808a604:	462a      	mov	r2, r5
 808a606:	4621      	mov	r1, r4
 808a608:	f000 f88c 	bl	808a724 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 808a60c:	2101      	movs	r1, #1
 808a60e:	4630      	mov	r0, r6
 808a610:	f7fe f96c 	bl	80888ec <_ZN8SPIClassC1E17HAL_SPI_Interface>
 808a614:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 808a616:	4e0c      	ldr	r6, [pc, #48]	; (808a648 <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 808a618:	462a      	mov	r2, r5
 808a61a:	4621      	mov	r1, r4
 808a61c:	f000 f882 	bl	808a724 <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 808a620:	2102      	movs	r1, #2
 808a622:	4630      	mov	r0, r6
 808a624:	f7fe f962 	bl	80888ec <_ZN8SPIClassC1E17HAL_SPI_Interface>
 808a628:	462a      	mov	r2, r5
 808a62a:	4621      	mov	r1, r4
 808a62c:	4630      	mov	r0, r6
 808a62e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 808a632:	f000 b877 	b.w	808a724 <__aeabi_atexit>
 808a636:	bf00      	nop
 808a638:	20000c80 	.word	0x20000c80
 808a63c:	200001c8 	.word	0x200001c8
 808a640:	080888dd 	.word	0x080888dd
 808a644:	20000c90 	.word	0x20000c90
 808a648:	20000ca0 	.word	0x20000ca0

0808a64c <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 808a64c:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 808a64e:	4c07      	ldr	r4, [pc, #28]	; (808a66c <_Z21__fetch_global_EEPROMv+0x20>)
 808a650:	6823      	ldr	r3, [r4, #0]
 808a652:	07db      	lsls	r3, r3, #31
 808a654:	d408      	bmi.n	808a668 <_Z21__fetch_global_EEPROMv+0x1c>
 808a656:	4620      	mov	r0, r4
 808a658:	f7f5 fd25 	bl	80800a6 <__cxa_guard_acquire>
 808a65c:	b120      	cbz	r0, 808a668 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 808a65e:	f7fd fd7b 	bl	8088158 <HAL_EEPROM_Init>
 808a662:	4620      	mov	r0, r4
 808a664:	f7f5 fd24 	bl	80800b0 <__cxa_guard_release>
	return eeprom;
}
 808a668:	4801      	ldr	r0, [pc, #4]	; (808a670 <_Z21__fetch_global_EEPROMv+0x24>)
 808a66a:	bd10      	pop	{r4, pc}
 808a66c:	20000cb4 	.word	0x20000cb4
 808a670:	20000cb8 	.word	0x20000cb8

0808a674 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 808a674:	b513      	push	{r0, r1, r4, lr}
 808a676:	4c08      	ldr	r4, [pc, #32]	; (808a698 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 808a678:	2300      	movs	r3, #0
 808a67a:	461a      	mov	r2, r3
 808a67c:	4619      	mov	r1, r3
 808a67e:	9300      	str	r3, [sp, #0]
 808a680:	4620      	mov	r0, r4
 808a682:	f7ff fc95 	bl	8089fb0 <_ZN9IPAddressC1Ehhhh>
 808a686:	4620      	mov	r0, r4
 808a688:	4a04      	ldr	r2, [pc, #16]	; (808a69c <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 808a68a:	4905      	ldr	r1, [pc, #20]	; (808a6a0 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 808a68c:	b002      	add	sp, #8
 808a68e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808a692:	f000 b847 	b.w	808a724 <__aeabi_atexit>
 808a696:	bf00      	nop
 808a698:	20000cbc 	.word	0x20000cbc
 808a69c:	200001c8 	.word	0x200001c8
 808a6a0:	08089f29 	.word	0x08089f29

0808a6a4 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 808a6a4:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 808a6a6:	4d0b      	ldr	r5, [pc, #44]	; (808a6d4 <_Z19__fetch_global_Wirev+0x30>)
 808a6a8:	6829      	ldr	r1, [r5, #0]
 808a6aa:	f011 0401 	ands.w	r4, r1, #1
 808a6ae:	d10f      	bne.n	808a6d0 <_Z19__fetch_global_Wirev+0x2c>
 808a6b0:	4628      	mov	r0, r5
 808a6b2:	f7f5 fcf8 	bl	80800a6 <__cxa_guard_acquire>
 808a6b6:	b158      	cbz	r0, 808a6d0 <_Z19__fetch_global_Wirev+0x2c>
 808a6b8:	4621      	mov	r1, r4
 808a6ba:	4807      	ldr	r0, [pc, #28]	; (808a6d8 <_Z19__fetch_global_Wirev+0x34>)
 808a6bc:	f7ff fe7c 	bl	808a3b8 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 808a6c0:	4628      	mov	r0, r5
 808a6c2:	f7f5 fcf5 	bl	80800b0 <__cxa_guard_release>
 808a6c6:	4a05      	ldr	r2, [pc, #20]	; (808a6dc <_Z19__fetch_global_Wirev+0x38>)
 808a6c8:	4905      	ldr	r1, [pc, #20]	; (808a6e0 <_Z19__fetch_global_Wirev+0x3c>)
 808a6ca:	4803      	ldr	r0, [pc, #12]	; (808a6d8 <_Z19__fetch_global_Wirev+0x34>)
 808a6cc:	f000 f82a 	bl	808a724 <__aeabi_atexit>
	return wire;
}
 808a6d0:	4801      	ldr	r0, [pc, #4]	; (808a6d8 <_Z19__fetch_global_Wirev+0x34>)
 808a6d2:	bd38      	pop	{r3, r4, r5, pc}
 808a6d4:	20000cc4 	.word	0x20000cc4
 808a6d8:	20000cdc 	.word	0x20000cdc
 808a6dc:	200001c8 	.word	0x200001c8
 808a6e0:	0808a361 	.word	0x0808a361

0808a6e4 <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 808a6e4:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3);
 808a6e6:	4c0b      	ldr	r4, [pc, #44]	; (808a714 <_Z20__fetch_global_Wire3v+0x30>)
 808a6e8:	6823      	ldr	r3, [r4, #0]
 808a6ea:	07db      	lsls	r3, r3, #31
 808a6ec:	d40f      	bmi.n	808a70e <_Z20__fetch_global_Wire3v+0x2a>
 808a6ee:	4620      	mov	r0, r4
 808a6f0:	f7f5 fcd9 	bl	80800a6 <__cxa_guard_acquire>
 808a6f4:	b158      	cbz	r0, 808a70e <_Z20__fetch_global_Wire3v+0x2a>
 808a6f6:	2102      	movs	r1, #2
 808a6f8:	4807      	ldr	r0, [pc, #28]	; (808a718 <_Z20__fetch_global_Wire3v+0x34>)
 808a6fa:	f7ff fe5d 	bl	808a3b8 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 808a6fe:	4620      	mov	r0, r4
 808a700:	f7f5 fcd6 	bl	80800b0 <__cxa_guard_release>
 808a704:	4a05      	ldr	r2, [pc, #20]	; (808a71c <_Z20__fetch_global_Wire3v+0x38>)
 808a706:	4906      	ldr	r1, [pc, #24]	; (808a720 <_Z20__fetch_global_Wire3v+0x3c>)
 808a708:	4803      	ldr	r0, [pc, #12]	; (808a718 <_Z20__fetch_global_Wire3v+0x34>)
 808a70a:	f000 f80b 	bl	808a724 <__aeabi_atexit>
	return wire;
}
 808a70e:	4802      	ldr	r0, [pc, #8]	; (808a718 <_Z20__fetch_global_Wire3v+0x34>)
 808a710:	bd10      	pop	{r4, pc}
 808a712:	bf00      	nop
 808a714:	20000cf0 	.word	0x20000cf0
 808a718:	20000cc8 	.word	0x20000cc8
 808a71c:	200001c8 	.word	0x200001c8
 808a720:	0808a361 	.word	0x0808a361

0808a724 <__aeabi_atexit>:
 808a724:	460b      	mov	r3, r1
 808a726:	4601      	mov	r1, r0
 808a728:	4618      	mov	r0, r3
 808a72a:	f001 bb8f 	b.w	808be4c <__cxa_atexit>

0808a72e <_ZdlPvj>:
 808a72e:	f7f5 bcb8 	b.w	80800a2 <_ZdlPv>

0808a732 <_ZSt25__throw_bad_function_callv>:
 808a732:	b508      	push	{r3, lr}
 808a734:	f7fd ff6c 	bl	8088610 <abort>

0808a738 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 808a738:	4b18      	ldr	r3, [pc, #96]	; (808a79c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 808a73a:	681a      	ldr	r2, [r3, #0]
 808a73c:	07d1      	lsls	r1, r2, #31
 808a73e:	bf5c      	itt	pl
 808a740:	2201      	movpl	r2, #1
 808a742:	601a      	strpl	r2, [r3, #0]
 808a744:	4b16      	ldr	r3, [pc, #88]	; (808a7a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 808a746:	681a      	ldr	r2, [r3, #0]
 808a748:	07d2      	lsls	r2, r2, #31
 808a74a:	bf5c      	itt	pl
 808a74c:	2201      	movpl	r2, #1
 808a74e:	601a      	strpl	r2, [r3, #0]
 808a750:	4b14      	ldr	r3, [pc, #80]	; (808a7a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 808a752:	681a      	ldr	r2, [r3, #0]
 808a754:	07d0      	lsls	r0, r2, #31
 808a756:	bf5c      	itt	pl
 808a758:	2201      	movpl	r2, #1
 808a75a:	601a      	strpl	r2, [r3, #0]
 808a75c:	4b12      	ldr	r3, [pc, #72]	; (808a7a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 808a75e:	681a      	ldr	r2, [r3, #0]
 808a760:	07d1      	lsls	r1, r2, #31
 808a762:	bf5c      	itt	pl
 808a764:	2201      	movpl	r2, #1
 808a766:	601a      	strpl	r2, [r3, #0]
 808a768:	4b10      	ldr	r3, [pc, #64]	; (808a7ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 808a76a:	681a      	ldr	r2, [r3, #0]
 808a76c:	07d2      	lsls	r2, r2, #31
 808a76e:	bf5c      	itt	pl
 808a770:	2201      	movpl	r2, #1
 808a772:	601a      	strpl	r2, [r3, #0]
 808a774:	4b0e      	ldr	r3, [pc, #56]	; (808a7b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 808a776:	681a      	ldr	r2, [r3, #0]
 808a778:	07d0      	lsls	r0, r2, #31
 808a77a:	bf5c      	itt	pl
 808a77c:	2201      	movpl	r2, #1
 808a77e:	601a      	strpl	r2, [r3, #0]
 808a780:	4b0c      	ldr	r3, [pc, #48]	; (808a7b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 808a782:	681a      	ldr	r2, [r3, #0]
 808a784:	07d1      	lsls	r1, r2, #31
 808a786:	bf5c      	itt	pl
 808a788:	2201      	movpl	r2, #1
 808a78a:	601a      	strpl	r2, [r3, #0]
 808a78c:	4b0a      	ldr	r3, [pc, #40]	; (808a7b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 808a78e:	681a      	ldr	r2, [r3, #0]
 808a790:	07d2      	lsls	r2, r2, #31
 808a792:	bf5c      	itt	pl
 808a794:	2201      	movpl	r2, #1
 808a796:	601a      	strpl	r2, [r3, #0]
 808a798:	4770      	bx	lr
 808a79a:	bf00      	nop
 808a79c:	20000d10 	.word	0x20000d10
 808a7a0:	20000d0c 	.word	0x20000d0c
 808a7a4:	20000d08 	.word	0x20000d08
 808a7a8:	20000d04 	.word	0x20000d04
 808a7ac:	20000d00 	.word	0x20000d00
 808a7b0:	20000cfc 	.word	0x20000cfc
 808a7b4:	20000cf8 	.word	0x20000cf8
 808a7b8:	20000cf4 	.word	0x20000cf4

0808a7bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 808a7bc:	4b24      	ldr	r3, [pc, #144]	; (808a850 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 808a7be:	681a      	ldr	r2, [r3, #0]
 808a7c0:	07d0      	lsls	r0, r2, #31
 808a7c2:	bf5c      	itt	pl
 808a7c4:	2201      	movpl	r2, #1
 808a7c6:	601a      	strpl	r2, [r3, #0]
 808a7c8:	4b22      	ldr	r3, [pc, #136]	; (808a854 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 808a7ca:	681a      	ldr	r2, [r3, #0]
 808a7cc:	07d1      	lsls	r1, r2, #31
 808a7ce:	bf5c      	itt	pl
 808a7d0:	2201      	movpl	r2, #1
 808a7d2:	601a      	strpl	r2, [r3, #0]
 808a7d4:	4b20      	ldr	r3, [pc, #128]	; (808a858 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 808a7d6:	681a      	ldr	r2, [r3, #0]
 808a7d8:	07d2      	lsls	r2, r2, #31
 808a7da:	bf5c      	itt	pl
 808a7dc:	2201      	movpl	r2, #1
 808a7de:	601a      	strpl	r2, [r3, #0]
 808a7e0:	4b1e      	ldr	r3, [pc, #120]	; (808a85c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 808a7e2:	681a      	ldr	r2, [r3, #0]
 808a7e4:	07d0      	lsls	r0, r2, #31
 808a7e6:	bf5c      	itt	pl
 808a7e8:	2201      	movpl	r2, #1
 808a7ea:	601a      	strpl	r2, [r3, #0]
 808a7ec:	4b1c      	ldr	r3, [pc, #112]	; (808a860 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 808a7ee:	681a      	ldr	r2, [r3, #0]
 808a7f0:	07d1      	lsls	r1, r2, #31
 808a7f2:	bf5c      	itt	pl
 808a7f4:	2201      	movpl	r2, #1
 808a7f6:	601a      	strpl	r2, [r3, #0]
 808a7f8:	4b1a      	ldr	r3, [pc, #104]	; (808a864 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 808a7fa:	681a      	ldr	r2, [r3, #0]
 808a7fc:	07d2      	lsls	r2, r2, #31
 808a7fe:	bf5c      	itt	pl
 808a800:	2201      	movpl	r2, #1
 808a802:	601a      	strpl	r2, [r3, #0]
 808a804:	4b18      	ldr	r3, [pc, #96]	; (808a868 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 808a806:	681a      	ldr	r2, [r3, #0]
 808a808:	07d0      	lsls	r0, r2, #31
 808a80a:	bf5c      	itt	pl
 808a80c:	2201      	movpl	r2, #1
 808a80e:	601a      	strpl	r2, [r3, #0]
 808a810:	4b16      	ldr	r3, [pc, #88]	; (808a86c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 808a812:	681a      	ldr	r2, [r3, #0]
 808a814:	07d1      	lsls	r1, r2, #31
 808a816:	bf5c      	itt	pl
 808a818:	2201      	movpl	r2, #1
 808a81a:	601a      	strpl	r2, [r3, #0]
 808a81c:	4b14      	ldr	r3, [pc, #80]	; (808a870 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 808a81e:	681a      	ldr	r2, [r3, #0]
 808a820:	07d2      	lsls	r2, r2, #31
 808a822:	bf5c      	itt	pl
 808a824:	2201      	movpl	r2, #1
 808a826:	601a      	strpl	r2, [r3, #0]
 808a828:	4b12      	ldr	r3, [pc, #72]	; (808a874 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 808a82a:	681a      	ldr	r2, [r3, #0]
 808a82c:	07d0      	lsls	r0, r2, #31
 808a82e:	bf5c      	itt	pl
 808a830:	2201      	movpl	r2, #1
 808a832:	601a      	strpl	r2, [r3, #0]
 808a834:	4b10      	ldr	r3, [pc, #64]	; (808a878 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 808a836:	681a      	ldr	r2, [r3, #0]
 808a838:	07d1      	lsls	r1, r2, #31
 808a83a:	bf5c      	itt	pl
 808a83c:	2201      	movpl	r2, #1
 808a83e:	601a      	strpl	r2, [r3, #0]
 808a840:	4b0e      	ldr	r3, [pc, #56]	; (808a87c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 808a842:	681a      	ldr	r2, [r3, #0]
 808a844:	07d2      	lsls	r2, r2, #31
 808a846:	bf5c      	itt	pl
 808a848:	2201      	movpl	r2, #1
 808a84a:	601a      	strpl	r2, [r3, #0]
 808a84c:	4770      	bx	lr
 808a84e:	bf00      	nop
 808a850:	20000d40 	.word	0x20000d40
 808a854:	20000d3c 	.word	0x20000d3c
 808a858:	20000d38 	.word	0x20000d38
 808a85c:	20000d34 	.word	0x20000d34
 808a860:	20000d30 	.word	0x20000d30
 808a864:	20000d2c 	.word	0x20000d2c
 808a868:	20000d28 	.word	0x20000d28
 808a86c:	20000d24 	.word	0x20000d24
 808a870:	20000d20 	.word	0x20000d20
 808a874:	20000d1c 	.word	0x20000d1c
 808a878:	20000d18 	.word	0x20000d18
 808a87c:	20000d14 	.word	0x20000d14

0808a880 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 808a880:	4b24      	ldr	r3, [pc, #144]	; (808a914 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 808a882:	681a      	ldr	r2, [r3, #0]
 808a884:	07d0      	lsls	r0, r2, #31
 808a886:	bf5c      	itt	pl
 808a888:	2201      	movpl	r2, #1
 808a88a:	601a      	strpl	r2, [r3, #0]
 808a88c:	4b22      	ldr	r3, [pc, #136]	; (808a918 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 808a88e:	681a      	ldr	r2, [r3, #0]
 808a890:	07d1      	lsls	r1, r2, #31
 808a892:	bf5c      	itt	pl
 808a894:	2201      	movpl	r2, #1
 808a896:	601a      	strpl	r2, [r3, #0]
 808a898:	4b20      	ldr	r3, [pc, #128]	; (808a91c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 808a89a:	681a      	ldr	r2, [r3, #0]
 808a89c:	07d2      	lsls	r2, r2, #31
 808a89e:	bf5c      	itt	pl
 808a8a0:	2201      	movpl	r2, #1
 808a8a2:	601a      	strpl	r2, [r3, #0]
 808a8a4:	4b1e      	ldr	r3, [pc, #120]	; (808a920 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 808a8a6:	681a      	ldr	r2, [r3, #0]
 808a8a8:	07d0      	lsls	r0, r2, #31
 808a8aa:	bf5c      	itt	pl
 808a8ac:	2201      	movpl	r2, #1
 808a8ae:	601a      	strpl	r2, [r3, #0]
 808a8b0:	4b1c      	ldr	r3, [pc, #112]	; (808a924 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 808a8b2:	681a      	ldr	r2, [r3, #0]
 808a8b4:	07d1      	lsls	r1, r2, #31
 808a8b6:	bf5c      	itt	pl
 808a8b8:	2201      	movpl	r2, #1
 808a8ba:	601a      	strpl	r2, [r3, #0]
 808a8bc:	4b1a      	ldr	r3, [pc, #104]	; (808a928 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 808a8be:	681a      	ldr	r2, [r3, #0]
 808a8c0:	07d2      	lsls	r2, r2, #31
 808a8c2:	bf5c      	itt	pl
 808a8c4:	2201      	movpl	r2, #1
 808a8c6:	601a      	strpl	r2, [r3, #0]
 808a8c8:	4b18      	ldr	r3, [pc, #96]	; (808a92c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 808a8ca:	681a      	ldr	r2, [r3, #0]
 808a8cc:	07d0      	lsls	r0, r2, #31
 808a8ce:	bf5c      	itt	pl
 808a8d0:	2201      	movpl	r2, #1
 808a8d2:	601a      	strpl	r2, [r3, #0]
 808a8d4:	4b16      	ldr	r3, [pc, #88]	; (808a930 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 808a8d6:	681a      	ldr	r2, [r3, #0]
 808a8d8:	07d1      	lsls	r1, r2, #31
 808a8da:	bf5c      	itt	pl
 808a8dc:	2201      	movpl	r2, #1
 808a8de:	601a      	strpl	r2, [r3, #0]
 808a8e0:	4b14      	ldr	r3, [pc, #80]	; (808a934 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 808a8e2:	681a      	ldr	r2, [r3, #0]
 808a8e4:	07d2      	lsls	r2, r2, #31
 808a8e6:	bf5c      	itt	pl
 808a8e8:	2201      	movpl	r2, #1
 808a8ea:	601a      	strpl	r2, [r3, #0]
 808a8ec:	4b12      	ldr	r3, [pc, #72]	; (808a938 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 808a8ee:	681a      	ldr	r2, [r3, #0]
 808a8f0:	07d0      	lsls	r0, r2, #31
 808a8f2:	bf5c      	itt	pl
 808a8f4:	2201      	movpl	r2, #1
 808a8f6:	601a      	strpl	r2, [r3, #0]
 808a8f8:	4b10      	ldr	r3, [pc, #64]	; (808a93c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 808a8fa:	681a      	ldr	r2, [r3, #0]
 808a8fc:	07d1      	lsls	r1, r2, #31
 808a8fe:	bf5c      	itt	pl
 808a900:	2201      	movpl	r2, #1
 808a902:	601a      	strpl	r2, [r3, #0]
 808a904:	4b0e      	ldr	r3, [pc, #56]	; (808a940 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 808a906:	681a      	ldr	r2, [r3, #0]
 808a908:	07d2      	lsls	r2, r2, #31
 808a90a:	bf5c      	itt	pl
 808a90c:	2201      	movpl	r2, #1
 808a90e:	601a      	strpl	r2, [r3, #0]
 808a910:	4770      	bx	lr
 808a912:	bf00      	nop
 808a914:	20000d70 	.word	0x20000d70
 808a918:	20000d6c 	.word	0x20000d6c
 808a91c:	20000d68 	.word	0x20000d68
 808a920:	20000d64 	.word	0x20000d64
 808a924:	20000d60 	.word	0x20000d60
 808a928:	20000d5c 	.word	0x20000d5c
 808a92c:	20000d58 	.word	0x20000d58
 808a930:	20000d54 	.word	0x20000d54
 808a934:	20000d50 	.word	0x20000d50
 808a938:	20000d4c 	.word	0x20000d4c
 808a93c:	20000d48 	.word	0x20000d48
 808a940:	20000d44 	.word	0x20000d44

0808a944 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 808a944:	4b18      	ldr	r3, [pc, #96]	; (808a9a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 808a946:	681a      	ldr	r2, [r3, #0]
 808a948:	07d1      	lsls	r1, r2, #31
 808a94a:	bf5c      	itt	pl
 808a94c:	2201      	movpl	r2, #1
 808a94e:	601a      	strpl	r2, [r3, #0]
 808a950:	4b16      	ldr	r3, [pc, #88]	; (808a9ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 808a952:	681a      	ldr	r2, [r3, #0]
 808a954:	07d2      	lsls	r2, r2, #31
 808a956:	bf5c      	itt	pl
 808a958:	2201      	movpl	r2, #1
 808a95a:	601a      	strpl	r2, [r3, #0]
 808a95c:	4b14      	ldr	r3, [pc, #80]	; (808a9b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 808a95e:	681a      	ldr	r2, [r3, #0]
 808a960:	07d0      	lsls	r0, r2, #31
 808a962:	bf5c      	itt	pl
 808a964:	2201      	movpl	r2, #1
 808a966:	601a      	strpl	r2, [r3, #0]
 808a968:	4b12      	ldr	r3, [pc, #72]	; (808a9b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 808a96a:	681a      	ldr	r2, [r3, #0]
 808a96c:	07d1      	lsls	r1, r2, #31
 808a96e:	bf5c      	itt	pl
 808a970:	2201      	movpl	r2, #1
 808a972:	601a      	strpl	r2, [r3, #0]
 808a974:	4b10      	ldr	r3, [pc, #64]	; (808a9b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 808a976:	681a      	ldr	r2, [r3, #0]
 808a978:	07d2      	lsls	r2, r2, #31
 808a97a:	bf5c      	itt	pl
 808a97c:	2201      	movpl	r2, #1
 808a97e:	601a      	strpl	r2, [r3, #0]
 808a980:	4b0e      	ldr	r3, [pc, #56]	; (808a9bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 808a982:	681a      	ldr	r2, [r3, #0]
 808a984:	07d0      	lsls	r0, r2, #31
 808a986:	bf5c      	itt	pl
 808a988:	2201      	movpl	r2, #1
 808a98a:	601a      	strpl	r2, [r3, #0]
 808a98c:	4b0c      	ldr	r3, [pc, #48]	; (808a9c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 808a98e:	681a      	ldr	r2, [r3, #0]
 808a990:	07d1      	lsls	r1, r2, #31
 808a992:	bf5c      	itt	pl
 808a994:	2201      	movpl	r2, #1
 808a996:	601a      	strpl	r2, [r3, #0]
 808a998:	4b0a      	ldr	r3, [pc, #40]	; (808a9c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 808a99a:	681a      	ldr	r2, [r3, #0]
 808a99c:	07d2      	lsls	r2, r2, #31
 808a99e:	bf5c      	itt	pl
 808a9a0:	2201      	movpl	r2, #1
 808a9a2:	601a      	strpl	r2, [r3, #0]
 808a9a4:	4770      	bx	lr
 808a9a6:	bf00      	nop
 808a9a8:	20000d90 	.word	0x20000d90
 808a9ac:	20000d8c 	.word	0x20000d8c
 808a9b0:	20000d88 	.word	0x20000d88
 808a9b4:	20000d84 	.word	0x20000d84
 808a9b8:	20000d80 	.word	0x20000d80
 808a9bc:	20000d7c 	.word	0x20000d7c
 808a9c0:	20000d78 	.word	0x20000d78
 808a9c4:	20000d74 	.word	0x20000d74

0808a9c8 <__aeabi_drsub>:
 808a9c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 808a9cc:	e002      	b.n	808a9d4 <__adddf3>
 808a9ce:	bf00      	nop

0808a9d0 <__aeabi_dsub>:
 808a9d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0808a9d4 <__adddf3>:
 808a9d4:	b530      	push	{r4, r5, lr}
 808a9d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 808a9da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 808a9de:	ea94 0f05 	teq	r4, r5
 808a9e2:	bf08      	it	eq
 808a9e4:	ea90 0f02 	teqeq	r0, r2
 808a9e8:	bf1f      	itttt	ne
 808a9ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 808a9ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 808a9f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 808a9f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 808a9fa:	f000 80e2 	beq.w	808abc2 <__adddf3+0x1ee>
 808a9fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 808aa02:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 808aa06:	bfb8      	it	lt
 808aa08:	426d      	neglt	r5, r5
 808aa0a:	dd0c      	ble.n	808aa26 <__adddf3+0x52>
 808aa0c:	442c      	add	r4, r5
 808aa0e:	ea80 0202 	eor.w	r2, r0, r2
 808aa12:	ea81 0303 	eor.w	r3, r1, r3
 808aa16:	ea82 0000 	eor.w	r0, r2, r0
 808aa1a:	ea83 0101 	eor.w	r1, r3, r1
 808aa1e:	ea80 0202 	eor.w	r2, r0, r2
 808aa22:	ea81 0303 	eor.w	r3, r1, r3
 808aa26:	2d36      	cmp	r5, #54	; 0x36
 808aa28:	bf88      	it	hi
 808aa2a:	bd30      	pophi	{r4, r5, pc}
 808aa2c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808aa30:	ea4f 3101 	mov.w	r1, r1, lsl #12
 808aa34:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 808aa38:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 808aa3c:	d002      	beq.n	808aa44 <__adddf3+0x70>
 808aa3e:	4240      	negs	r0, r0
 808aa40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808aa44:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 808aa48:	ea4f 3303 	mov.w	r3, r3, lsl #12
 808aa4c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 808aa50:	d002      	beq.n	808aa58 <__adddf3+0x84>
 808aa52:	4252      	negs	r2, r2
 808aa54:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808aa58:	ea94 0f05 	teq	r4, r5
 808aa5c:	f000 80a7 	beq.w	808abae <__adddf3+0x1da>
 808aa60:	f1a4 0401 	sub.w	r4, r4, #1
 808aa64:	f1d5 0e20 	rsbs	lr, r5, #32
 808aa68:	db0d      	blt.n	808aa86 <__adddf3+0xb2>
 808aa6a:	fa02 fc0e 	lsl.w	ip, r2, lr
 808aa6e:	fa22 f205 	lsr.w	r2, r2, r5
 808aa72:	1880      	adds	r0, r0, r2
 808aa74:	f141 0100 	adc.w	r1, r1, #0
 808aa78:	fa03 f20e 	lsl.w	r2, r3, lr
 808aa7c:	1880      	adds	r0, r0, r2
 808aa7e:	fa43 f305 	asr.w	r3, r3, r5
 808aa82:	4159      	adcs	r1, r3
 808aa84:	e00e      	b.n	808aaa4 <__adddf3+0xd0>
 808aa86:	f1a5 0520 	sub.w	r5, r5, #32
 808aa8a:	f10e 0e20 	add.w	lr, lr, #32
 808aa8e:	2a01      	cmp	r2, #1
 808aa90:	fa03 fc0e 	lsl.w	ip, r3, lr
 808aa94:	bf28      	it	cs
 808aa96:	f04c 0c02 	orrcs.w	ip, ip, #2
 808aa9a:	fa43 f305 	asr.w	r3, r3, r5
 808aa9e:	18c0      	adds	r0, r0, r3
 808aaa0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 808aaa4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808aaa8:	d507      	bpl.n	808aaba <__adddf3+0xe6>
 808aaaa:	f04f 0e00 	mov.w	lr, #0
 808aaae:	f1dc 0c00 	rsbs	ip, ip, #0
 808aab2:	eb7e 0000 	sbcs.w	r0, lr, r0
 808aab6:	eb6e 0101 	sbc.w	r1, lr, r1
 808aaba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 808aabe:	d31b      	bcc.n	808aaf8 <__adddf3+0x124>
 808aac0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 808aac4:	d30c      	bcc.n	808aae0 <__adddf3+0x10c>
 808aac6:	0849      	lsrs	r1, r1, #1
 808aac8:	ea5f 0030 	movs.w	r0, r0, rrx
 808aacc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 808aad0:	f104 0401 	add.w	r4, r4, #1
 808aad4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 808aad8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 808aadc:	f080 809a 	bcs.w	808ac14 <__adddf3+0x240>
 808aae0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 808aae4:	bf08      	it	eq
 808aae6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808aaea:	f150 0000 	adcs.w	r0, r0, #0
 808aaee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808aaf2:	ea41 0105 	orr.w	r1, r1, r5
 808aaf6:	bd30      	pop	{r4, r5, pc}
 808aaf8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 808aafc:	4140      	adcs	r0, r0
 808aafe:	eb41 0101 	adc.w	r1, r1, r1
 808ab02:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808ab06:	f1a4 0401 	sub.w	r4, r4, #1
 808ab0a:	d1e9      	bne.n	808aae0 <__adddf3+0x10c>
 808ab0c:	f091 0f00 	teq	r1, #0
 808ab10:	bf04      	itt	eq
 808ab12:	4601      	moveq	r1, r0
 808ab14:	2000      	moveq	r0, #0
 808ab16:	fab1 f381 	clz	r3, r1
 808ab1a:	bf08      	it	eq
 808ab1c:	3320      	addeq	r3, #32
 808ab1e:	f1a3 030b 	sub.w	r3, r3, #11
 808ab22:	f1b3 0220 	subs.w	r2, r3, #32
 808ab26:	da0c      	bge.n	808ab42 <__adddf3+0x16e>
 808ab28:	320c      	adds	r2, #12
 808ab2a:	dd08      	ble.n	808ab3e <__adddf3+0x16a>
 808ab2c:	f102 0c14 	add.w	ip, r2, #20
 808ab30:	f1c2 020c 	rsb	r2, r2, #12
 808ab34:	fa01 f00c 	lsl.w	r0, r1, ip
 808ab38:	fa21 f102 	lsr.w	r1, r1, r2
 808ab3c:	e00c      	b.n	808ab58 <__adddf3+0x184>
 808ab3e:	f102 0214 	add.w	r2, r2, #20
 808ab42:	bfd8      	it	le
 808ab44:	f1c2 0c20 	rsble	ip, r2, #32
 808ab48:	fa01 f102 	lsl.w	r1, r1, r2
 808ab4c:	fa20 fc0c 	lsr.w	ip, r0, ip
 808ab50:	bfdc      	itt	le
 808ab52:	ea41 010c 	orrle.w	r1, r1, ip
 808ab56:	4090      	lslle	r0, r2
 808ab58:	1ae4      	subs	r4, r4, r3
 808ab5a:	bfa2      	ittt	ge
 808ab5c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 808ab60:	4329      	orrge	r1, r5
 808ab62:	bd30      	popge	{r4, r5, pc}
 808ab64:	ea6f 0404 	mvn.w	r4, r4
 808ab68:	3c1f      	subs	r4, #31
 808ab6a:	da1c      	bge.n	808aba6 <__adddf3+0x1d2>
 808ab6c:	340c      	adds	r4, #12
 808ab6e:	dc0e      	bgt.n	808ab8e <__adddf3+0x1ba>
 808ab70:	f104 0414 	add.w	r4, r4, #20
 808ab74:	f1c4 0220 	rsb	r2, r4, #32
 808ab78:	fa20 f004 	lsr.w	r0, r0, r4
 808ab7c:	fa01 f302 	lsl.w	r3, r1, r2
 808ab80:	ea40 0003 	orr.w	r0, r0, r3
 808ab84:	fa21 f304 	lsr.w	r3, r1, r4
 808ab88:	ea45 0103 	orr.w	r1, r5, r3
 808ab8c:	bd30      	pop	{r4, r5, pc}
 808ab8e:	f1c4 040c 	rsb	r4, r4, #12
 808ab92:	f1c4 0220 	rsb	r2, r4, #32
 808ab96:	fa20 f002 	lsr.w	r0, r0, r2
 808ab9a:	fa01 f304 	lsl.w	r3, r1, r4
 808ab9e:	ea40 0003 	orr.w	r0, r0, r3
 808aba2:	4629      	mov	r1, r5
 808aba4:	bd30      	pop	{r4, r5, pc}
 808aba6:	fa21 f004 	lsr.w	r0, r1, r4
 808abaa:	4629      	mov	r1, r5
 808abac:	bd30      	pop	{r4, r5, pc}
 808abae:	f094 0f00 	teq	r4, #0
 808abb2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 808abb6:	bf06      	itte	eq
 808abb8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 808abbc:	3401      	addeq	r4, #1
 808abbe:	3d01      	subne	r5, #1
 808abc0:	e74e      	b.n	808aa60 <__adddf3+0x8c>
 808abc2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 808abc6:	bf18      	it	ne
 808abc8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 808abcc:	d029      	beq.n	808ac22 <__adddf3+0x24e>
 808abce:	ea94 0f05 	teq	r4, r5
 808abd2:	bf08      	it	eq
 808abd4:	ea90 0f02 	teqeq	r0, r2
 808abd8:	d005      	beq.n	808abe6 <__adddf3+0x212>
 808abda:	ea54 0c00 	orrs.w	ip, r4, r0
 808abde:	bf04      	itt	eq
 808abe0:	4619      	moveq	r1, r3
 808abe2:	4610      	moveq	r0, r2
 808abe4:	bd30      	pop	{r4, r5, pc}
 808abe6:	ea91 0f03 	teq	r1, r3
 808abea:	bf1e      	ittt	ne
 808abec:	2100      	movne	r1, #0
 808abee:	2000      	movne	r0, #0
 808abf0:	bd30      	popne	{r4, r5, pc}
 808abf2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 808abf6:	d105      	bne.n	808ac04 <__adddf3+0x230>
 808abf8:	0040      	lsls	r0, r0, #1
 808abfa:	4149      	adcs	r1, r1
 808abfc:	bf28      	it	cs
 808abfe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 808ac02:	bd30      	pop	{r4, r5, pc}
 808ac04:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 808ac08:	bf3c      	itt	cc
 808ac0a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 808ac0e:	bd30      	popcc	{r4, r5, pc}
 808ac10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808ac14:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 808ac18:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 808ac1c:	f04f 0000 	mov.w	r0, #0
 808ac20:	bd30      	pop	{r4, r5, pc}
 808ac22:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 808ac26:	bf1a      	itte	ne
 808ac28:	4619      	movne	r1, r3
 808ac2a:	4610      	movne	r0, r2
 808ac2c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 808ac30:	bf1c      	itt	ne
 808ac32:	460b      	movne	r3, r1
 808ac34:	4602      	movne	r2, r0
 808ac36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808ac3a:	bf06      	itte	eq
 808ac3c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 808ac40:	ea91 0f03 	teqeq	r1, r3
 808ac44:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 808ac48:	bd30      	pop	{r4, r5, pc}
 808ac4a:	bf00      	nop

0808ac4c <__aeabi_ui2d>:
 808ac4c:	f090 0f00 	teq	r0, #0
 808ac50:	bf04      	itt	eq
 808ac52:	2100      	moveq	r1, #0
 808ac54:	4770      	bxeq	lr
 808ac56:	b530      	push	{r4, r5, lr}
 808ac58:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808ac5c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808ac60:	f04f 0500 	mov.w	r5, #0
 808ac64:	f04f 0100 	mov.w	r1, #0
 808ac68:	e750      	b.n	808ab0c <__adddf3+0x138>
 808ac6a:	bf00      	nop

0808ac6c <__aeabi_i2d>:
 808ac6c:	f090 0f00 	teq	r0, #0
 808ac70:	bf04      	itt	eq
 808ac72:	2100      	moveq	r1, #0
 808ac74:	4770      	bxeq	lr
 808ac76:	b530      	push	{r4, r5, lr}
 808ac78:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808ac7c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808ac80:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 808ac84:	bf48      	it	mi
 808ac86:	4240      	negmi	r0, r0
 808ac88:	f04f 0100 	mov.w	r1, #0
 808ac8c:	e73e      	b.n	808ab0c <__adddf3+0x138>
 808ac8e:	bf00      	nop

0808ac90 <__aeabi_f2d>:
 808ac90:	0042      	lsls	r2, r0, #1
 808ac92:	ea4f 01e2 	mov.w	r1, r2, asr #3
 808ac96:	ea4f 0131 	mov.w	r1, r1, rrx
 808ac9a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 808ac9e:	bf1f      	itttt	ne
 808aca0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 808aca4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 808aca8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 808acac:	4770      	bxne	lr
 808acae:	f092 0f00 	teq	r2, #0
 808acb2:	bf14      	ite	ne
 808acb4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 808acb8:	4770      	bxeq	lr
 808acba:	b530      	push	{r4, r5, lr}
 808acbc:	f44f 7460 	mov.w	r4, #896	; 0x380
 808acc0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808acc4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 808acc8:	e720      	b.n	808ab0c <__adddf3+0x138>
 808acca:	bf00      	nop

0808accc <__aeabi_ul2d>:
 808accc:	ea50 0201 	orrs.w	r2, r0, r1
 808acd0:	bf08      	it	eq
 808acd2:	4770      	bxeq	lr
 808acd4:	b530      	push	{r4, r5, lr}
 808acd6:	f04f 0500 	mov.w	r5, #0
 808acda:	e00a      	b.n	808acf2 <__aeabi_l2d+0x16>

0808acdc <__aeabi_l2d>:
 808acdc:	ea50 0201 	orrs.w	r2, r0, r1
 808ace0:	bf08      	it	eq
 808ace2:	4770      	bxeq	lr
 808ace4:	b530      	push	{r4, r5, lr}
 808ace6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 808acea:	d502      	bpl.n	808acf2 <__aeabi_l2d+0x16>
 808acec:	4240      	negs	r0, r0
 808acee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808acf2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808acf6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808acfa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 808acfe:	f43f aedc 	beq.w	808aaba <__adddf3+0xe6>
 808ad02:	f04f 0203 	mov.w	r2, #3
 808ad06:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808ad0a:	bf18      	it	ne
 808ad0c:	3203      	addne	r2, #3
 808ad0e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808ad12:	bf18      	it	ne
 808ad14:	3203      	addne	r2, #3
 808ad16:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 808ad1a:	f1c2 0320 	rsb	r3, r2, #32
 808ad1e:	fa00 fc03 	lsl.w	ip, r0, r3
 808ad22:	fa20 f002 	lsr.w	r0, r0, r2
 808ad26:	fa01 fe03 	lsl.w	lr, r1, r3
 808ad2a:	ea40 000e 	orr.w	r0, r0, lr
 808ad2e:	fa21 f102 	lsr.w	r1, r1, r2
 808ad32:	4414      	add	r4, r2
 808ad34:	e6c1      	b.n	808aaba <__adddf3+0xe6>
 808ad36:	bf00      	nop

0808ad38 <__aeabi_dmul>:
 808ad38:	b570      	push	{r4, r5, r6, lr}
 808ad3a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808ad3e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808ad42:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808ad46:	bf1d      	ittte	ne
 808ad48:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 808ad4c:	ea94 0f0c 	teqne	r4, ip
 808ad50:	ea95 0f0c 	teqne	r5, ip
 808ad54:	f000 f8de 	bleq	808af14 <__aeabi_dmul+0x1dc>
 808ad58:	442c      	add	r4, r5
 808ad5a:	ea81 0603 	eor.w	r6, r1, r3
 808ad5e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 808ad62:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 808ad66:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 808ad6a:	bf18      	it	ne
 808ad6c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 808ad70:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808ad74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 808ad78:	d038      	beq.n	808adec <__aeabi_dmul+0xb4>
 808ad7a:	fba0 ce02 	umull	ip, lr, r0, r2
 808ad7e:	f04f 0500 	mov.w	r5, #0
 808ad82:	fbe1 e502 	umlal	lr, r5, r1, r2
 808ad86:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 808ad8a:	fbe0 e503 	umlal	lr, r5, r0, r3
 808ad8e:	f04f 0600 	mov.w	r6, #0
 808ad92:	fbe1 5603 	umlal	r5, r6, r1, r3
 808ad96:	f09c 0f00 	teq	ip, #0
 808ad9a:	bf18      	it	ne
 808ad9c:	f04e 0e01 	orrne.w	lr, lr, #1
 808ada0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 808ada4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 808ada8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 808adac:	d204      	bcs.n	808adb8 <__aeabi_dmul+0x80>
 808adae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 808adb2:	416d      	adcs	r5, r5
 808adb4:	eb46 0606 	adc.w	r6, r6, r6
 808adb8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 808adbc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 808adc0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 808adc4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 808adc8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 808adcc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808add0:	bf88      	it	hi
 808add2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 808add6:	d81e      	bhi.n	808ae16 <__aeabi_dmul+0xde>
 808add8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 808addc:	bf08      	it	eq
 808adde:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 808ade2:	f150 0000 	adcs.w	r0, r0, #0
 808ade6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808adea:	bd70      	pop	{r4, r5, r6, pc}
 808adec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 808adf0:	ea46 0101 	orr.w	r1, r6, r1
 808adf4:	ea40 0002 	orr.w	r0, r0, r2
 808adf8:	ea81 0103 	eor.w	r1, r1, r3
 808adfc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 808ae00:	bfc2      	ittt	gt
 808ae02:	ebd4 050c 	rsbsgt	r5, r4, ip
 808ae06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808ae0a:	bd70      	popgt	{r4, r5, r6, pc}
 808ae0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808ae10:	f04f 0e00 	mov.w	lr, #0
 808ae14:	3c01      	subs	r4, #1
 808ae16:	f300 80ab 	bgt.w	808af70 <__aeabi_dmul+0x238>
 808ae1a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 808ae1e:	bfde      	ittt	le
 808ae20:	2000      	movle	r0, #0
 808ae22:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 808ae26:	bd70      	pople	{r4, r5, r6, pc}
 808ae28:	f1c4 0400 	rsb	r4, r4, #0
 808ae2c:	3c20      	subs	r4, #32
 808ae2e:	da35      	bge.n	808ae9c <__aeabi_dmul+0x164>
 808ae30:	340c      	adds	r4, #12
 808ae32:	dc1b      	bgt.n	808ae6c <__aeabi_dmul+0x134>
 808ae34:	f104 0414 	add.w	r4, r4, #20
 808ae38:	f1c4 0520 	rsb	r5, r4, #32
 808ae3c:	fa00 f305 	lsl.w	r3, r0, r5
 808ae40:	fa20 f004 	lsr.w	r0, r0, r4
 808ae44:	fa01 f205 	lsl.w	r2, r1, r5
 808ae48:	ea40 0002 	orr.w	r0, r0, r2
 808ae4c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 808ae50:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 808ae54:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 808ae58:	fa21 f604 	lsr.w	r6, r1, r4
 808ae5c:	eb42 0106 	adc.w	r1, r2, r6
 808ae60:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808ae64:	bf08      	it	eq
 808ae66:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808ae6a:	bd70      	pop	{r4, r5, r6, pc}
 808ae6c:	f1c4 040c 	rsb	r4, r4, #12
 808ae70:	f1c4 0520 	rsb	r5, r4, #32
 808ae74:	fa00 f304 	lsl.w	r3, r0, r4
 808ae78:	fa20 f005 	lsr.w	r0, r0, r5
 808ae7c:	fa01 f204 	lsl.w	r2, r1, r4
 808ae80:	ea40 0002 	orr.w	r0, r0, r2
 808ae84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808ae88:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 808ae8c:	f141 0100 	adc.w	r1, r1, #0
 808ae90:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808ae94:	bf08      	it	eq
 808ae96:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808ae9a:	bd70      	pop	{r4, r5, r6, pc}
 808ae9c:	f1c4 0520 	rsb	r5, r4, #32
 808aea0:	fa00 f205 	lsl.w	r2, r0, r5
 808aea4:	ea4e 0e02 	orr.w	lr, lr, r2
 808aea8:	fa20 f304 	lsr.w	r3, r0, r4
 808aeac:	fa01 f205 	lsl.w	r2, r1, r5
 808aeb0:	ea43 0302 	orr.w	r3, r3, r2
 808aeb4:	fa21 f004 	lsr.w	r0, r1, r4
 808aeb8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808aebc:	fa21 f204 	lsr.w	r2, r1, r4
 808aec0:	ea20 0002 	bic.w	r0, r0, r2
 808aec4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 808aec8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808aecc:	bf08      	it	eq
 808aece:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808aed2:	bd70      	pop	{r4, r5, r6, pc}
 808aed4:	f094 0f00 	teq	r4, #0
 808aed8:	d10f      	bne.n	808aefa <__aeabi_dmul+0x1c2>
 808aeda:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 808aede:	0040      	lsls	r0, r0, #1
 808aee0:	eb41 0101 	adc.w	r1, r1, r1
 808aee4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808aee8:	bf08      	it	eq
 808aeea:	3c01      	subeq	r4, #1
 808aeec:	d0f7      	beq.n	808aede <__aeabi_dmul+0x1a6>
 808aeee:	ea41 0106 	orr.w	r1, r1, r6
 808aef2:	f095 0f00 	teq	r5, #0
 808aef6:	bf18      	it	ne
 808aef8:	4770      	bxne	lr
 808aefa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 808aefe:	0052      	lsls	r2, r2, #1
 808af00:	eb43 0303 	adc.w	r3, r3, r3
 808af04:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 808af08:	bf08      	it	eq
 808af0a:	3d01      	subeq	r5, #1
 808af0c:	d0f7      	beq.n	808aefe <__aeabi_dmul+0x1c6>
 808af0e:	ea43 0306 	orr.w	r3, r3, r6
 808af12:	4770      	bx	lr
 808af14:	ea94 0f0c 	teq	r4, ip
 808af18:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808af1c:	bf18      	it	ne
 808af1e:	ea95 0f0c 	teqne	r5, ip
 808af22:	d00c      	beq.n	808af3e <__aeabi_dmul+0x206>
 808af24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808af28:	bf18      	it	ne
 808af2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808af2e:	d1d1      	bne.n	808aed4 <__aeabi_dmul+0x19c>
 808af30:	ea81 0103 	eor.w	r1, r1, r3
 808af34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808af38:	f04f 0000 	mov.w	r0, #0
 808af3c:	bd70      	pop	{r4, r5, r6, pc}
 808af3e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808af42:	bf06      	itte	eq
 808af44:	4610      	moveq	r0, r2
 808af46:	4619      	moveq	r1, r3
 808af48:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808af4c:	d019      	beq.n	808af82 <__aeabi_dmul+0x24a>
 808af4e:	ea94 0f0c 	teq	r4, ip
 808af52:	d102      	bne.n	808af5a <__aeabi_dmul+0x222>
 808af54:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 808af58:	d113      	bne.n	808af82 <__aeabi_dmul+0x24a>
 808af5a:	ea95 0f0c 	teq	r5, ip
 808af5e:	d105      	bne.n	808af6c <__aeabi_dmul+0x234>
 808af60:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 808af64:	bf1c      	itt	ne
 808af66:	4610      	movne	r0, r2
 808af68:	4619      	movne	r1, r3
 808af6a:	d10a      	bne.n	808af82 <__aeabi_dmul+0x24a>
 808af6c:	ea81 0103 	eor.w	r1, r1, r3
 808af70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808af74:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808af78:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 808af7c:	f04f 0000 	mov.w	r0, #0
 808af80:	bd70      	pop	{r4, r5, r6, pc}
 808af82:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808af86:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 808af8a:	bd70      	pop	{r4, r5, r6, pc}

0808af8c <__aeabi_ddiv>:
 808af8c:	b570      	push	{r4, r5, r6, lr}
 808af8e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808af92:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808af96:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808af9a:	bf1d      	ittte	ne
 808af9c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 808afa0:	ea94 0f0c 	teqne	r4, ip
 808afa4:	ea95 0f0c 	teqne	r5, ip
 808afa8:	f000 f8a7 	bleq	808b0fa <__aeabi_ddiv+0x16e>
 808afac:	eba4 0405 	sub.w	r4, r4, r5
 808afb0:	ea81 0e03 	eor.w	lr, r1, r3
 808afb4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808afb8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 808afbc:	f000 8088 	beq.w	808b0d0 <__aeabi_ddiv+0x144>
 808afc0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 808afc4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 808afc8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 808afcc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 808afd0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 808afd4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 808afd8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 808afdc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 808afe0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 808afe4:	429d      	cmp	r5, r3
 808afe6:	bf08      	it	eq
 808afe8:	4296      	cmpeq	r6, r2
 808afea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 808afee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 808aff2:	d202      	bcs.n	808affa <__aeabi_ddiv+0x6e>
 808aff4:	085b      	lsrs	r3, r3, #1
 808aff6:	ea4f 0232 	mov.w	r2, r2, rrx
 808affa:	1ab6      	subs	r6, r6, r2
 808affc:	eb65 0503 	sbc.w	r5, r5, r3
 808b000:	085b      	lsrs	r3, r3, #1
 808b002:	ea4f 0232 	mov.w	r2, r2, rrx
 808b006:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 808b00a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 808b00e:	ebb6 0e02 	subs.w	lr, r6, r2
 808b012:	eb75 0e03 	sbcs.w	lr, r5, r3
 808b016:	bf22      	ittt	cs
 808b018:	1ab6      	subcs	r6, r6, r2
 808b01a:	4675      	movcs	r5, lr
 808b01c:	ea40 000c 	orrcs.w	r0, r0, ip
 808b020:	085b      	lsrs	r3, r3, #1
 808b022:	ea4f 0232 	mov.w	r2, r2, rrx
 808b026:	ebb6 0e02 	subs.w	lr, r6, r2
 808b02a:	eb75 0e03 	sbcs.w	lr, r5, r3
 808b02e:	bf22      	ittt	cs
 808b030:	1ab6      	subcs	r6, r6, r2
 808b032:	4675      	movcs	r5, lr
 808b034:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808b038:	085b      	lsrs	r3, r3, #1
 808b03a:	ea4f 0232 	mov.w	r2, r2, rrx
 808b03e:	ebb6 0e02 	subs.w	lr, r6, r2
 808b042:	eb75 0e03 	sbcs.w	lr, r5, r3
 808b046:	bf22      	ittt	cs
 808b048:	1ab6      	subcs	r6, r6, r2
 808b04a:	4675      	movcs	r5, lr
 808b04c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808b050:	085b      	lsrs	r3, r3, #1
 808b052:	ea4f 0232 	mov.w	r2, r2, rrx
 808b056:	ebb6 0e02 	subs.w	lr, r6, r2
 808b05a:	eb75 0e03 	sbcs.w	lr, r5, r3
 808b05e:	bf22      	ittt	cs
 808b060:	1ab6      	subcs	r6, r6, r2
 808b062:	4675      	movcs	r5, lr
 808b064:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808b068:	ea55 0e06 	orrs.w	lr, r5, r6
 808b06c:	d018      	beq.n	808b0a0 <__aeabi_ddiv+0x114>
 808b06e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 808b072:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 808b076:	ea4f 1606 	mov.w	r6, r6, lsl #4
 808b07a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 808b07e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 808b082:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 808b086:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 808b08a:	d1c0      	bne.n	808b00e <__aeabi_ddiv+0x82>
 808b08c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808b090:	d10b      	bne.n	808b0aa <__aeabi_ddiv+0x11e>
 808b092:	ea41 0100 	orr.w	r1, r1, r0
 808b096:	f04f 0000 	mov.w	r0, #0
 808b09a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 808b09e:	e7b6      	b.n	808b00e <__aeabi_ddiv+0x82>
 808b0a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808b0a4:	bf04      	itt	eq
 808b0a6:	4301      	orreq	r1, r0
 808b0a8:	2000      	moveq	r0, #0
 808b0aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808b0ae:	bf88      	it	hi
 808b0b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 808b0b4:	f63f aeaf 	bhi.w	808ae16 <__aeabi_dmul+0xde>
 808b0b8:	ebb5 0c03 	subs.w	ip, r5, r3
 808b0bc:	bf04      	itt	eq
 808b0be:	ebb6 0c02 	subseq.w	ip, r6, r2
 808b0c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808b0c6:	f150 0000 	adcs.w	r0, r0, #0
 808b0ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808b0ce:	bd70      	pop	{r4, r5, r6, pc}
 808b0d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 808b0d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 808b0d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 808b0dc:	bfc2      	ittt	gt
 808b0de:	ebd4 050c 	rsbsgt	r5, r4, ip
 808b0e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808b0e6:	bd70      	popgt	{r4, r5, r6, pc}
 808b0e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808b0ec:	f04f 0e00 	mov.w	lr, #0
 808b0f0:	3c01      	subs	r4, #1
 808b0f2:	e690      	b.n	808ae16 <__aeabi_dmul+0xde>
 808b0f4:	ea45 0e06 	orr.w	lr, r5, r6
 808b0f8:	e68d      	b.n	808ae16 <__aeabi_dmul+0xde>
 808b0fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808b0fe:	ea94 0f0c 	teq	r4, ip
 808b102:	bf08      	it	eq
 808b104:	ea95 0f0c 	teqeq	r5, ip
 808b108:	f43f af3b 	beq.w	808af82 <__aeabi_dmul+0x24a>
 808b10c:	ea94 0f0c 	teq	r4, ip
 808b110:	d10a      	bne.n	808b128 <__aeabi_ddiv+0x19c>
 808b112:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808b116:	f47f af34 	bne.w	808af82 <__aeabi_dmul+0x24a>
 808b11a:	ea95 0f0c 	teq	r5, ip
 808b11e:	f47f af25 	bne.w	808af6c <__aeabi_dmul+0x234>
 808b122:	4610      	mov	r0, r2
 808b124:	4619      	mov	r1, r3
 808b126:	e72c      	b.n	808af82 <__aeabi_dmul+0x24a>
 808b128:	ea95 0f0c 	teq	r5, ip
 808b12c:	d106      	bne.n	808b13c <__aeabi_ddiv+0x1b0>
 808b12e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808b132:	f43f aefd 	beq.w	808af30 <__aeabi_dmul+0x1f8>
 808b136:	4610      	mov	r0, r2
 808b138:	4619      	mov	r1, r3
 808b13a:	e722      	b.n	808af82 <__aeabi_dmul+0x24a>
 808b13c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808b140:	bf18      	it	ne
 808b142:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808b146:	f47f aec5 	bne.w	808aed4 <__aeabi_dmul+0x19c>
 808b14a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 808b14e:	f47f af0d 	bne.w	808af6c <__aeabi_dmul+0x234>
 808b152:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 808b156:	f47f aeeb 	bne.w	808af30 <__aeabi_dmul+0x1f8>
 808b15a:	e712      	b.n	808af82 <__aeabi_dmul+0x24a>

0808b15c <__gedf2>:
 808b15c:	f04f 3cff 	mov.w	ip, #4294967295
 808b160:	e006      	b.n	808b170 <__cmpdf2+0x4>
 808b162:	bf00      	nop

0808b164 <__ledf2>:
 808b164:	f04f 0c01 	mov.w	ip, #1
 808b168:	e002      	b.n	808b170 <__cmpdf2+0x4>
 808b16a:	bf00      	nop

0808b16c <__cmpdf2>:
 808b16c:	f04f 0c01 	mov.w	ip, #1
 808b170:	f84d cd04 	str.w	ip, [sp, #-4]!
 808b174:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808b178:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808b17c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808b180:	bf18      	it	ne
 808b182:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 808b186:	d01b      	beq.n	808b1c0 <__cmpdf2+0x54>
 808b188:	b001      	add	sp, #4
 808b18a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 808b18e:	bf0c      	ite	eq
 808b190:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 808b194:	ea91 0f03 	teqne	r1, r3
 808b198:	bf02      	ittt	eq
 808b19a:	ea90 0f02 	teqeq	r0, r2
 808b19e:	2000      	moveq	r0, #0
 808b1a0:	4770      	bxeq	lr
 808b1a2:	f110 0f00 	cmn.w	r0, #0
 808b1a6:	ea91 0f03 	teq	r1, r3
 808b1aa:	bf58      	it	pl
 808b1ac:	4299      	cmppl	r1, r3
 808b1ae:	bf08      	it	eq
 808b1b0:	4290      	cmpeq	r0, r2
 808b1b2:	bf2c      	ite	cs
 808b1b4:	17d8      	asrcs	r0, r3, #31
 808b1b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 808b1ba:	f040 0001 	orr.w	r0, r0, #1
 808b1be:	4770      	bx	lr
 808b1c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808b1c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808b1c8:	d102      	bne.n	808b1d0 <__cmpdf2+0x64>
 808b1ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808b1ce:	d107      	bne.n	808b1e0 <__cmpdf2+0x74>
 808b1d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808b1d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808b1d8:	d1d6      	bne.n	808b188 <__cmpdf2+0x1c>
 808b1da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808b1de:	d0d3      	beq.n	808b188 <__cmpdf2+0x1c>
 808b1e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 808b1e4:	4770      	bx	lr
 808b1e6:	bf00      	nop

0808b1e8 <__aeabi_cdrcmple>:
 808b1e8:	4684      	mov	ip, r0
 808b1ea:	4610      	mov	r0, r2
 808b1ec:	4662      	mov	r2, ip
 808b1ee:	468c      	mov	ip, r1
 808b1f0:	4619      	mov	r1, r3
 808b1f2:	4663      	mov	r3, ip
 808b1f4:	e000      	b.n	808b1f8 <__aeabi_cdcmpeq>
 808b1f6:	bf00      	nop

0808b1f8 <__aeabi_cdcmpeq>:
 808b1f8:	b501      	push	{r0, lr}
 808b1fa:	f7ff ffb7 	bl	808b16c <__cmpdf2>
 808b1fe:	2800      	cmp	r0, #0
 808b200:	bf48      	it	mi
 808b202:	f110 0f00 	cmnmi.w	r0, #0
 808b206:	bd01      	pop	{r0, pc}

0808b208 <__aeabi_dcmpeq>:
 808b208:	f84d ed08 	str.w	lr, [sp, #-8]!
 808b20c:	f7ff fff4 	bl	808b1f8 <__aeabi_cdcmpeq>
 808b210:	bf0c      	ite	eq
 808b212:	2001      	moveq	r0, #1
 808b214:	2000      	movne	r0, #0
 808b216:	f85d fb08 	ldr.w	pc, [sp], #8
 808b21a:	bf00      	nop

0808b21c <__aeabi_dcmplt>:
 808b21c:	f84d ed08 	str.w	lr, [sp, #-8]!
 808b220:	f7ff ffea 	bl	808b1f8 <__aeabi_cdcmpeq>
 808b224:	bf34      	ite	cc
 808b226:	2001      	movcc	r0, #1
 808b228:	2000      	movcs	r0, #0
 808b22a:	f85d fb08 	ldr.w	pc, [sp], #8
 808b22e:	bf00      	nop

0808b230 <__aeabi_dcmple>:
 808b230:	f84d ed08 	str.w	lr, [sp, #-8]!
 808b234:	f7ff ffe0 	bl	808b1f8 <__aeabi_cdcmpeq>
 808b238:	bf94      	ite	ls
 808b23a:	2001      	movls	r0, #1
 808b23c:	2000      	movhi	r0, #0
 808b23e:	f85d fb08 	ldr.w	pc, [sp], #8
 808b242:	bf00      	nop

0808b244 <__aeabi_dcmpge>:
 808b244:	f84d ed08 	str.w	lr, [sp, #-8]!
 808b248:	f7ff ffce 	bl	808b1e8 <__aeabi_cdrcmple>
 808b24c:	bf94      	ite	ls
 808b24e:	2001      	movls	r0, #1
 808b250:	2000      	movhi	r0, #0
 808b252:	f85d fb08 	ldr.w	pc, [sp], #8
 808b256:	bf00      	nop

0808b258 <__aeabi_dcmpgt>:
 808b258:	f84d ed08 	str.w	lr, [sp, #-8]!
 808b25c:	f7ff ffc4 	bl	808b1e8 <__aeabi_cdrcmple>
 808b260:	bf34      	ite	cc
 808b262:	2001      	movcc	r0, #1
 808b264:	2000      	movcs	r0, #0
 808b266:	f85d fb08 	ldr.w	pc, [sp], #8
 808b26a:	bf00      	nop

0808b26c <__aeabi_dcmpun>:
 808b26c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808b270:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808b274:	d102      	bne.n	808b27c <__aeabi_dcmpun+0x10>
 808b276:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808b27a:	d10a      	bne.n	808b292 <__aeabi_dcmpun+0x26>
 808b27c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808b280:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808b284:	d102      	bne.n	808b28c <__aeabi_dcmpun+0x20>
 808b286:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808b28a:	d102      	bne.n	808b292 <__aeabi_dcmpun+0x26>
 808b28c:	f04f 0000 	mov.w	r0, #0
 808b290:	4770      	bx	lr
 808b292:	f04f 0001 	mov.w	r0, #1
 808b296:	4770      	bx	lr

0808b298 <__aeabi_d2iz>:
 808b298:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808b29c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 808b2a0:	d215      	bcs.n	808b2ce <__aeabi_d2iz+0x36>
 808b2a2:	d511      	bpl.n	808b2c8 <__aeabi_d2iz+0x30>
 808b2a4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 808b2a8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 808b2ac:	d912      	bls.n	808b2d4 <__aeabi_d2iz+0x3c>
 808b2ae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808b2b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808b2b6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808b2ba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808b2be:	fa23 f002 	lsr.w	r0, r3, r2
 808b2c2:	bf18      	it	ne
 808b2c4:	4240      	negne	r0, r0
 808b2c6:	4770      	bx	lr
 808b2c8:	f04f 0000 	mov.w	r0, #0
 808b2cc:	4770      	bx	lr
 808b2ce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808b2d2:	d105      	bne.n	808b2e0 <__aeabi_d2iz+0x48>
 808b2d4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 808b2d8:	bf08      	it	eq
 808b2da:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808b2de:	4770      	bx	lr
 808b2e0:	f04f 0000 	mov.w	r0, #0
 808b2e4:	4770      	bx	lr
 808b2e6:	bf00      	nop

0808b2e8 <__aeabi_d2uiz>:
 808b2e8:	004a      	lsls	r2, r1, #1
 808b2ea:	d211      	bcs.n	808b310 <__aeabi_d2uiz+0x28>
 808b2ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 808b2f0:	d211      	bcs.n	808b316 <__aeabi_d2uiz+0x2e>
 808b2f2:	d50d      	bpl.n	808b310 <__aeabi_d2uiz+0x28>
 808b2f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 808b2f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 808b2fc:	d40e      	bmi.n	808b31c <__aeabi_d2uiz+0x34>
 808b2fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808b302:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808b306:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808b30a:	fa23 f002 	lsr.w	r0, r3, r2
 808b30e:	4770      	bx	lr
 808b310:	f04f 0000 	mov.w	r0, #0
 808b314:	4770      	bx	lr
 808b316:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808b31a:	d102      	bne.n	808b322 <__aeabi_d2uiz+0x3a>
 808b31c:	f04f 30ff 	mov.w	r0, #4294967295
 808b320:	4770      	bx	lr
 808b322:	f04f 0000 	mov.w	r0, #0
 808b326:	4770      	bx	lr

0808b328 <__aeabi_d2f>:
 808b328:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808b32c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 808b330:	bf24      	itt	cs
 808b332:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 808b336:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 808b33a:	d90d      	bls.n	808b358 <__aeabi_d2f+0x30>
 808b33c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808b340:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 808b344:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 808b348:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 808b34c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 808b350:	bf08      	it	eq
 808b352:	f020 0001 	biceq.w	r0, r0, #1
 808b356:	4770      	bx	lr
 808b358:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 808b35c:	d121      	bne.n	808b3a2 <__aeabi_d2f+0x7a>
 808b35e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 808b362:	bfbc      	itt	lt
 808b364:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 808b368:	4770      	bxlt	lr
 808b36a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808b36e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 808b372:	f1c2 0218 	rsb	r2, r2, #24
 808b376:	f1c2 0c20 	rsb	ip, r2, #32
 808b37a:	fa10 f30c 	lsls.w	r3, r0, ip
 808b37e:	fa20 f002 	lsr.w	r0, r0, r2
 808b382:	bf18      	it	ne
 808b384:	f040 0001 	orrne.w	r0, r0, #1
 808b388:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808b38c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 808b390:	fa03 fc0c 	lsl.w	ip, r3, ip
 808b394:	ea40 000c 	orr.w	r0, r0, ip
 808b398:	fa23 f302 	lsr.w	r3, r3, r2
 808b39c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 808b3a0:	e7cc      	b.n	808b33c <__aeabi_d2f+0x14>
 808b3a2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 808b3a6:	d107      	bne.n	808b3b8 <__aeabi_d2f+0x90>
 808b3a8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 808b3ac:	bf1e      	ittt	ne
 808b3ae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 808b3b2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 808b3b6:	4770      	bxne	lr
 808b3b8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 808b3bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808b3c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808b3c4:	4770      	bx	lr
 808b3c6:	bf00      	nop

0808b3c8 <__aeabi_frsub>:
 808b3c8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 808b3cc:	e002      	b.n	808b3d4 <__addsf3>
 808b3ce:	bf00      	nop

0808b3d0 <__aeabi_fsub>:
 808b3d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0808b3d4 <__addsf3>:
 808b3d4:	0042      	lsls	r2, r0, #1
 808b3d6:	bf1f      	itttt	ne
 808b3d8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 808b3dc:	ea92 0f03 	teqne	r2, r3
 808b3e0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 808b3e4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808b3e8:	d06a      	beq.n	808b4c0 <__addsf3+0xec>
 808b3ea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 808b3ee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 808b3f2:	bfc1      	itttt	gt
 808b3f4:	18d2      	addgt	r2, r2, r3
 808b3f6:	4041      	eorgt	r1, r0
 808b3f8:	4048      	eorgt	r0, r1
 808b3fa:	4041      	eorgt	r1, r0
 808b3fc:	bfb8      	it	lt
 808b3fe:	425b      	neglt	r3, r3
 808b400:	2b19      	cmp	r3, #25
 808b402:	bf88      	it	hi
 808b404:	4770      	bxhi	lr
 808b406:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808b40a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808b40e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 808b412:	bf18      	it	ne
 808b414:	4240      	negne	r0, r0
 808b416:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808b41a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 808b41e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 808b422:	bf18      	it	ne
 808b424:	4249      	negne	r1, r1
 808b426:	ea92 0f03 	teq	r2, r3
 808b42a:	d03f      	beq.n	808b4ac <__addsf3+0xd8>
 808b42c:	f1a2 0201 	sub.w	r2, r2, #1
 808b430:	fa41 fc03 	asr.w	ip, r1, r3
 808b434:	eb10 000c 	adds.w	r0, r0, ip
 808b438:	f1c3 0320 	rsb	r3, r3, #32
 808b43c:	fa01 f103 	lsl.w	r1, r1, r3
 808b440:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808b444:	d502      	bpl.n	808b44c <__addsf3+0x78>
 808b446:	4249      	negs	r1, r1
 808b448:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 808b44c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 808b450:	d313      	bcc.n	808b47a <__addsf3+0xa6>
 808b452:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 808b456:	d306      	bcc.n	808b466 <__addsf3+0x92>
 808b458:	0840      	lsrs	r0, r0, #1
 808b45a:	ea4f 0131 	mov.w	r1, r1, rrx
 808b45e:	f102 0201 	add.w	r2, r2, #1
 808b462:	2afe      	cmp	r2, #254	; 0xfe
 808b464:	d251      	bcs.n	808b50a <__addsf3+0x136>
 808b466:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 808b46a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808b46e:	bf08      	it	eq
 808b470:	f020 0001 	biceq.w	r0, r0, #1
 808b474:	ea40 0003 	orr.w	r0, r0, r3
 808b478:	4770      	bx	lr
 808b47a:	0049      	lsls	r1, r1, #1
 808b47c:	eb40 0000 	adc.w	r0, r0, r0
 808b480:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 808b484:	f1a2 0201 	sub.w	r2, r2, #1
 808b488:	d1ed      	bne.n	808b466 <__addsf3+0x92>
 808b48a:	fab0 fc80 	clz	ip, r0
 808b48e:	f1ac 0c08 	sub.w	ip, ip, #8
 808b492:	ebb2 020c 	subs.w	r2, r2, ip
 808b496:	fa00 f00c 	lsl.w	r0, r0, ip
 808b49a:	bfaa      	itet	ge
 808b49c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 808b4a0:	4252      	neglt	r2, r2
 808b4a2:	4318      	orrge	r0, r3
 808b4a4:	bfbc      	itt	lt
 808b4a6:	40d0      	lsrlt	r0, r2
 808b4a8:	4318      	orrlt	r0, r3
 808b4aa:	4770      	bx	lr
 808b4ac:	f092 0f00 	teq	r2, #0
 808b4b0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 808b4b4:	bf06      	itte	eq
 808b4b6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 808b4ba:	3201      	addeq	r2, #1
 808b4bc:	3b01      	subne	r3, #1
 808b4be:	e7b5      	b.n	808b42c <__addsf3+0x58>
 808b4c0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808b4c4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808b4c8:	bf18      	it	ne
 808b4ca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808b4ce:	d021      	beq.n	808b514 <__addsf3+0x140>
 808b4d0:	ea92 0f03 	teq	r2, r3
 808b4d4:	d004      	beq.n	808b4e0 <__addsf3+0x10c>
 808b4d6:	f092 0f00 	teq	r2, #0
 808b4da:	bf08      	it	eq
 808b4dc:	4608      	moveq	r0, r1
 808b4de:	4770      	bx	lr
 808b4e0:	ea90 0f01 	teq	r0, r1
 808b4e4:	bf1c      	itt	ne
 808b4e6:	2000      	movne	r0, #0
 808b4e8:	4770      	bxne	lr
 808b4ea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 808b4ee:	d104      	bne.n	808b4fa <__addsf3+0x126>
 808b4f0:	0040      	lsls	r0, r0, #1
 808b4f2:	bf28      	it	cs
 808b4f4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 808b4f8:	4770      	bx	lr
 808b4fa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 808b4fe:	bf3c      	itt	cc
 808b500:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 808b504:	4770      	bxcc	lr
 808b506:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808b50a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 808b50e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808b512:	4770      	bx	lr
 808b514:	ea7f 6222 	mvns.w	r2, r2, asr #24
 808b518:	bf16      	itet	ne
 808b51a:	4608      	movne	r0, r1
 808b51c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 808b520:	4601      	movne	r1, r0
 808b522:	0242      	lsls	r2, r0, #9
 808b524:	bf06      	itte	eq
 808b526:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 808b52a:	ea90 0f01 	teqeq	r0, r1
 808b52e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 808b532:	4770      	bx	lr

0808b534 <__aeabi_ui2f>:
 808b534:	f04f 0300 	mov.w	r3, #0
 808b538:	e004      	b.n	808b544 <__aeabi_i2f+0x8>
 808b53a:	bf00      	nop

0808b53c <__aeabi_i2f>:
 808b53c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 808b540:	bf48      	it	mi
 808b542:	4240      	negmi	r0, r0
 808b544:	ea5f 0c00 	movs.w	ip, r0
 808b548:	bf08      	it	eq
 808b54a:	4770      	bxeq	lr
 808b54c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 808b550:	4601      	mov	r1, r0
 808b552:	f04f 0000 	mov.w	r0, #0
 808b556:	e01c      	b.n	808b592 <__aeabi_l2f+0x2a>

0808b558 <__aeabi_ul2f>:
 808b558:	ea50 0201 	orrs.w	r2, r0, r1
 808b55c:	bf08      	it	eq
 808b55e:	4770      	bxeq	lr
 808b560:	f04f 0300 	mov.w	r3, #0
 808b564:	e00a      	b.n	808b57c <__aeabi_l2f+0x14>
 808b566:	bf00      	nop

0808b568 <__aeabi_l2f>:
 808b568:	ea50 0201 	orrs.w	r2, r0, r1
 808b56c:	bf08      	it	eq
 808b56e:	4770      	bxeq	lr
 808b570:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 808b574:	d502      	bpl.n	808b57c <__aeabi_l2f+0x14>
 808b576:	4240      	negs	r0, r0
 808b578:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808b57c:	ea5f 0c01 	movs.w	ip, r1
 808b580:	bf02      	ittt	eq
 808b582:	4684      	moveq	ip, r0
 808b584:	4601      	moveq	r1, r0
 808b586:	2000      	moveq	r0, #0
 808b588:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 808b58c:	bf08      	it	eq
 808b58e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 808b592:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 808b596:	fabc f28c 	clz	r2, ip
 808b59a:	3a08      	subs	r2, #8
 808b59c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 808b5a0:	db10      	blt.n	808b5c4 <__aeabi_l2f+0x5c>
 808b5a2:	fa01 fc02 	lsl.w	ip, r1, r2
 808b5a6:	4463      	add	r3, ip
 808b5a8:	fa00 fc02 	lsl.w	ip, r0, r2
 808b5ac:	f1c2 0220 	rsb	r2, r2, #32
 808b5b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 808b5b4:	fa20 f202 	lsr.w	r2, r0, r2
 808b5b8:	eb43 0002 	adc.w	r0, r3, r2
 808b5bc:	bf08      	it	eq
 808b5be:	f020 0001 	biceq.w	r0, r0, #1
 808b5c2:	4770      	bx	lr
 808b5c4:	f102 0220 	add.w	r2, r2, #32
 808b5c8:	fa01 fc02 	lsl.w	ip, r1, r2
 808b5cc:	f1c2 0220 	rsb	r2, r2, #32
 808b5d0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 808b5d4:	fa21 f202 	lsr.w	r2, r1, r2
 808b5d8:	eb43 0002 	adc.w	r0, r3, r2
 808b5dc:	bf08      	it	eq
 808b5de:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808b5e2:	4770      	bx	lr

0808b5e4 <__aeabi_fmul>:
 808b5e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808b5e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808b5ec:	bf1e      	ittt	ne
 808b5ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808b5f2:	ea92 0f0c 	teqne	r2, ip
 808b5f6:	ea93 0f0c 	teqne	r3, ip
 808b5fa:	d06f      	beq.n	808b6dc <__aeabi_fmul+0xf8>
 808b5fc:	441a      	add	r2, r3
 808b5fe:	ea80 0c01 	eor.w	ip, r0, r1
 808b602:	0240      	lsls	r0, r0, #9
 808b604:	bf18      	it	ne
 808b606:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 808b60a:	d01e      	beq.n	808b64a <__aeabi_fmul+0x66>
 808b60c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 808b610:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 808b614:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 808b618:	fba0 3101 	umull	r3, r1, r0, r1
 808b61c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808b620:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 808b624:	bf3e      	ittt	cc
 808b626:	0049      	lslcc	r1, r1, #1
 808b628:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 808b62c:	005b      	lslcc	r3, r3, #1
 808b62e:	ea40 0001 	orr.w	r0, r0, r1
 808b632:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 808b636:	2afd      	cmp	r2, #253	; 0xfd
 808b638:	d81d      	bhi.n	808b676 <__aeabi_fmul+0x92>
 808b63a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 808b63e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808b642:	bf08      	it	eq
 808b644:	f020 0001 	biceq.w	r0, r0, #1
 808b648:	4770      	bx	lr
 808b64a:	f090 0f00 	teq	r0, #0
 808b64e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808b652:	bf08      	it	eq
 808b654:	0249      	lsleq	r1, r1, #9
 808b656:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808b65a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 808b65e:	3a7f      	subs	r2, #127	; 0x7f
 808b660:	bfc2      	ittt	gt
 808b662:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808b666:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808b66a:	4770      	bxgt	lr
 808b66c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808b670:	f04f 0300 	mov.w	r3, #0
 808b674:	3a01      	subs	r2, #1
 808b676:	dc5d      	bgt.n	808b734 <__aeabi_fmul+0x150>
 808b678:	f112 0f19 	cmn.w	r2, #25
 808b67c:	bfdc      	itt	le
 808b67e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 808b682:	4770      	bxle	lr
 808b684:	f1c2 0200 	rsb	r2, r2, #0
 808b688:	0041      	lsls	r1, r0, #1
 808b68a:	fa21 f102 	lsr.w	r1, r1, r2
 808b68e:	f1c2 0220 	rsb	r2, r2, #32
 808b692:	fa00 fc02 	lsl.w	ip, r0, r2
 808b696:	ea5f 0031 	movs.w	r0, r1, rrx
 808b69a:	f140 0000 	adc.w	r0, r0, #0
 808b69e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 808b6a2:	bf08      	it	eq
 808b6a4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808b6a8:	4770      	bx	lr
 808b6aa:	f092 0f00 	teq	r2, #0
 808b6ae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808b6b2:	bf02      	ittt	eq
 808b6b4:	0040      	lsleq	r0, r0, #1
 808b6b6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808b6ba:	3a01      	subeq	r2, #1
 808b6bc:	d0f9      	beq.n	808b6b2 <__aeabi_fmul+0xce>
 808b6be:	ea40 000c 	orr.w	r0, r0, ip
 808b6c2:	f093 0f00 	teq	r3, #0
 808b6c6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808b6ca:	bf02      	ittt	eq
 808b6cc:	0049      	lsleq	r1, r1, #1
 808b6ce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808b6d2:	3b01      	subeq	r3, #1
 808b6d4:	d0f9      	beq.n	808b6ca <__aeabi_fmul+0xe6>
 808b6d6:	ea41 010c 	orr.w	r1, r1, ip
 808b6da:	e78f      	b.n	808b5fc <__aeabi_fmul+0x18>
 808b6dc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 808b6e0:	ea92 0f0c 	teq	r2, ip
 808b6e4:	bf18      	it	ne
 808b6e6:	ea93 0f0c 	teqne	r3, ip
 808b6ea:	d00a      	beq.n	808b702 <__aeabi_fmul+0x11e>
 808b6ec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808b6f0:	bf18      	it	ne
 808b6f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808b6f6:	d1d8      	bne.n	808b6aa <__aeabi_fmul+0xc6>
 808b6f8:	ea80 0001 	eor.w	r0, r0, r1
 808b6fc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808b700:	4770      	bx	lr
 808b702:	f090 0f00 	teq	r0, #0
 808b706:	bf17      	itett	ne
 808b708:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 808b70c:	4608      	moveq	r0, r1
 808b70e:	f091 0f00 	teqne	r1, #0
 808b712:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 808b716:	d014      	beq.n	808b742 <__aeabi_fmul+0x15e>
 808b718:	ea92 0f0c 	teq	r2, ip
 808b71c:	d101      	bne.n	808b722 <__aeabi_fmul+0x13e>
 808b71e:	0242      	lsls	r2, r0, #9
 808b720:	d10f      	bne.n	808b742 <__aeabi_fmul+0x15e>
 808b722:	ea93 0f0c 	teq	r3, ip
 808b726:	d103      	bne.n	808b730 <__aeabi_fmul+0x14c>
 808b728:	024b      	lsls	r3, r1, #9
 808b72a:	bf18      	it	ne
 808b72c:	4608      	movne	r0, r1
 808b72e:	d108      	bne.n	808b742 <__aeabi_fmul+0x15e>
 808b730:	ea80 0001 	eor.w	r0, r0, r1
 808b734:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808b738:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808b73c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808b740:	4770      	bx	lr
 808b742:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808b746:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 808b74a:	4770      	bx	lr

0808b74c <__aeabi_fdiv>:
 808b74c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808b750:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808b754:	bf1e      	ittt	ne
 808b756:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808b75a:	ea92 0f0c 	teqne	r2, ip
 808b75e:	ea93 0f0c 	teqne	r3, ip
 808b762:	d069      	beq.n	808b838 <__aeabi_fdiv+0xec>
 808b764:	eba2 0203 	sub.w	r2, r2, r3
 808b768:	ea80 0c01 	eor.w	ip, r0, r1
 808b76c:	0249      	lsls	r1, r1, #9
 808b76e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 808b772:	d037      	beq.n	808b7e4 <__aeabi_fdiv+0x98>
 808b774:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 808b778:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 808b77c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 808b780:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808b784:	428b      	cmp	r3, r1
 808b786:	bf38      	it	cc
 808b788:	005b      	lslcc	r3, r3, #1
 808b78a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 808b78e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 808b792:	428b      	cmp	r3, r1
 808b794:	bf24      	itt	cs
 808b796:	1a5b      	subcs	r3, r3, r1
 808b798:	ea40 000c 	orrcs.w	r0, r0, ip
 808b79c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 808b7a0:	bf24      	itt	cs
 808b7a2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 808b7a6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808b7aa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 808b7ae:	bf24      	itt	cs
 808b7b0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 808b7b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808b7b8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 808b7bc:	bf24      	itt	cs
 808b7be:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 808b7c2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808b7c6:	011b      	lsls	r3, r3, #4
 808b7c8:	bf18      	it	ne
 808b7ca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 808b7ce:	d1e0      	bne.n	808b792 <__aeabi_fdiv+0x46>
 808b7d0:	2afd      	cmp	r2, #253	; 0xfd
 808b7d2:	f63f af50 	bhi.w	808b676 <__aeabi_fmul+0x92>
 808b7d6:	428b      	cmp	r3, r1
 808b7d8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808b7dc:	bf08      	it	eq
 808b7de:	f020 0001 	biceq.w	r0, r0, #1
 808b7e2:	4770      	bx	lr
 808b7e4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808b7e8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808b7ec:	327f      	adds	r2, #127	; 0x7f
 808b7ee:	bfc2      	ittt	gt
 808b7f0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808b7f4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808b7f8:	4770      	bxgt	lr
 808b7fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808b7fe:	f04f 0300 	mov.w	r3, #0
 808b802:	3a01      	subs	r2, #1
 808b804:	e737      	b.n	808b676 <__aeabi_fmul+0x92>
 808b806:	f092 0f00 	teq	r2, #0
 808b80a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808b80e:	bf02      	ittt	eq
 808b810:	0040      	lsleq	r0, r0, #1
 808b812:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808b816:	3a01      	subeq	r2, #1
 808b818:	d0f9      	beq.n	808b80e <__aeabi_fdiv+0xc2>
 808b81a:	ea40 000c 	orr.w	r0, r0, ip
 808b81e:	f093 0f00 	teq	r3, #0
 808b822:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808b826:	bf02      	ittt	eq
 808b828:	0049      	lsleq	r1, r1, #1
 808b82a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808b82e:	3b01      	subeq	r3, #1
 808b830:	d0f9      	beq.n	808b826 <__aeabi_fdiv+0xda>
 808b832:	ea41 010c 	orr.w	r1, r1, ip
 808b836:	e795      	b.n	808b764 <__aeabi_fdiv+0x18>
 808b838:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 808b83c:	ea92 0f0c 	teq	r2, ip
 808b840:	d108      	bne.n	808b854 <__aeabi_fdiv+0x108>
 808b842:	0242      	lsls	r2, r0, #9
 808b844:	f47f af7d 	bne.w	808b742 <__aeabi_fmul+0x15e>
 808b848:	ea93 0f0c 	teq	r3, ip
 808b84c:	f47f af70 	bne.w	808b730 <__aeabi_fmul+0x14c>
 808b850:	4608      	mov	r0, r1
 808b852:	e776      	b.n	808b742 <__aeabi_fmul+0x15e>
 808b854:	ea93 0f0c 	teq	r3, ip
 808b858:	d104      	bne.n	808b864 <__aeabi_fdiv+0x118>
 808b85a:	024b      	lsls	r3, r1, #9
 808b85c:	f43f af4c 	beq.w	808b6f8 <__aeabi_fmul+0x114>
 808b860:	4608      	mov	r0, r1
 808b862:	e76e      	b.n	808b742 <__aeabi_fmul+0x15e>
 808b864:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808b868:	bf18      	it	ne
 808b86a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808b86e:	d1ca      	bne.n	808b806 <__aeabi_fdiv+0xba>
 808b870:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 808b874:	f47f af5c 	bne.w	808b730 <__aeabi_fmul+0x14c>
 808b878:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 808b87c:	f47f af3c 	bne.w	808b6f8 <__aeabi_fmul+0x114>
 808b880:	e75f      	b.n	808b742 <__aeabi_fmul+0x15e>
 808b882:	bf00      	nop

0808b884 <__gesf2>:
 808b884:	f04f 3cff 	mov.w	ip, #4294967295
 808b888:	e006      	b.n	808b898 <__cmpsf2+0x4>
 808b88a:	bf00      	nop

0808b88c <__lesf2>:
 808b88c:	f04f 0c01 	mov.w	ip, #1
 808b890:	e002      	b.n	808b898 <__cmpsf2+0x4>
 808b892:	bf00      	nop

0808b894 <__cmpsf2>:
 808b894:	f04f 0c01 	mov.w	ip, #1
 808b898:	f84d cd04 	str.w	ip, [sp, #-4]!
 808b89c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808b8a0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808b8a4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808b8a8:	bf18      	it	ne
 808b8aa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808b8ae:	d011      	beq.n	808b8d4 <__cmpsf2+0x40>
 808b8b0:	b001      	add	sp, #4
 808b8b2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 808b8b6:	bf18      	it	ne
 808b8b8:	ea90 0f01 	teqne	r0, r1
 808b8bc:	bf58      	it	pl
 808b8be:	ebb2 0003 	subspl.w	r0, r2, r3
 808b8c2:	bf88      	it	hi
 808b8c4:	17c8      	asrhi	r0, r1, #31
 808b8c6:	bf38      	it	cc
 808b8c8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 808b8cc:	bf18      	it	ne
 808b8ce:	f040 0001 	orrne.w	r0, r0, #1
 808b8d2:	4770      	bx	lr
 808b8d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808b8d8:	d102      	bne.n	808b8e0 <__cmpsf2+0x4c>
 808b8da:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 808b8de:	d105      	bne.n	808b8ec <__cmpsf2+0x58>
 808b8e0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 808b8e4:	d1e4      	bne.n	808b8b0 <__cmpsf2+0x1c>
 808b8e6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 808b8ea:	d0e1      	beq.n	808b8b0 <__cmpsf2+0x1c>
 808b8ec:	f85d 0b04 	ldr.w	r0, [sp], #4
 808b8f0:	4770      	bx	lr
 808b8f2:	bf00      	nop

0808b8f4 <__aeabi_cfrcmple>:
 808b8f4:	4684      	mov	ip, r0
 808b8f6:	4608      	mov	r0, r1
 808b8f8:	4661      	mov	r1, ip
 808b8fa:	e7ff      	b.n	808b8fc <__aeabi_cfcmpeq>

0808b8fc <__aeabi_cfcmpeq>:
 808b8fc:	b50f      	push	{r0, r1, r2, r3, lr}
 808b8fe:	f7ff ffc9 	bl	808b894 <__cmpsf2>
 808b902:	2800      	cmp	r0, #0
 808b904:	bf48      	it	mi
 808b906:	f110 0f00 	cmnmi.w	r0, #0
 808b90a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0808b90c <__aeabi_fcmpeq>:
 808b90c:	f84d ed08 	str.w	lr, [sp, #-8]!
 808b910:	f7ff fff4 	bl	808b8fc <__aeabi_cfcmpeq>
 808b914:	bf0c      	ite	eq
 808b916:	2001      	moveq	r0, #1
 808b918:	2000      	movne	r0, #0
 808b91a:	f85d fb08 	ldr.w	pc, [sp], #8
 808b91e:	bf00      	nop

0808b920 <__aeabi_fcmplt>:
 808b920:	f84d ed08 	str.w	lr, [sp, #-8]!
 808b924:	f7ff ffea 	bl	808b8fc <__aeabi_cfcmpeq>
 808b928:	bf34      	ite	cc
 808b92a:	2001      	movcc	r0, #1
 808b92c:	2000      	movcs	r0, #0
 808b92e:	f85d fb08 	ldr.w	pc, [sp], #8
 808b932:	bf00      	nop

0808b934 <__aeabi_fcmple>:
 808b934:	f84d ed08 	str.w	lr, [sp, #-8]!
 808b938:	f7ff ffe0 	bl	808b8fc <__aeabi_cfcmpeq>
 808b93c:	bf94      	ite	ls
 808b93e:	2001      	movls	r0, #1
 808b940:	2000      	movhi	r0, #0
 808b942:	f85d fb08 	ldr.w	pc, [sp], #8
 808b946:	bf00      	nop

0808b948 <__aeabi_fcmpge>:
 808b948:	f84d ed08 	str.w	lr, [sp, #-8]!
 808b94c:	f7ff ffd2 	bl	808b8f4 <__aeabi_cfrcmple>
 808b950:	bf94      	ite	ls
 808b952:	2001      	movls	r0, #1
 808b954:	2000      	movhi	r0, #0
 808b956:	f85d fb08 	ldr.w	pc, [sp], #8
 808b95a:	bf00      	nop

0808b95c <__aeabi_fcmpgt>:
 808b95c:	f84d ed08 	str.w	lr, [sp, #-8]!
 808b960:	f7ff ffc8 	bl	808b8f4 <__aeabi_cfrcmple>
 808b964:	bf34      	ite	cc
 808b966:	2001      	movcc	r0, #1
 808b968:	2000      	movcs	r0, #0
 808b96a:	f85d fb08 	ldr.w	pc, [sp], #8
 808b96e:	bf00      	nop

0808b970 <__aeabi_f2iz>:
 808b970:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808b974:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 808b978:	d30f      	bcc.n	808b99a <__aeabi_f2iz+0x2a>
 808b97a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 808b97e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 808b982:	d90d      	bls.n	808b9a0 <__aeabi_f2iz+0x30>
 808b984:	ea4f 2300 	mov.w	r3, r0, lsl #8
 808b988:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808b98c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808b990:	fa23 f002 	lsr.w	r0, r3, r2
 808b994:	bf18      	it	ne
 808b996:	4240      	negne	r0, r0
 808b998:	4770      	bx	lr
 808b99a:	f04f 0000 	mov.w	r0, #0
 808b99e:	4770      	bx	lr
 808b9a0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 808b9a4:	d101      	bne.n	808b9aa <__aeabi_f2iz+0x3a>
 808b9a6:	0242      	lsls	r2, r0, #9
 808b9a8:	d105      	bne.n	808b9b6 <__aeabi_f2iz+0x46>
 808b9aa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 808b9ae:	bf08      	it	eq
 808b9b0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808b9b4:	4770      	bx	lr
 808b9b6:	f04f 0000 	mov.w	r0, #0
 808b9ba:	4770      	bx	lr

0808b9bc <__aeabi_ldivmod>:
 808b9bc:	b97b      	cbnz	r3, 808b9de <__aeabi_ldivmod+0x22>
 808b9be:	b972      	cbnz	r2, 808b9de <__aeabi_ldivmod+0x22>
 808b9c0:	2900      	cmp	r1, #0
 808b9c2:	bfbe      	ittt	lt
 808b9c4:	2000      	movlt	r0, #0
 808b9c6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 808b9ca:	e006      	blt.n	808b9da <__aeabi_ldivmod+0x1e>
 808b9cc:	bf08      	it	eq
 808b9ce:	2800      	cmpeq	r0, #0
 808b9d0:	bf1c      	itt	ne
 808b9d2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 808b9d6:	f04f 30ff 	movne.w	r0, #4294967295
 808b9da:	f000 b9f1 	b.w	808bdc0 <__aeabi_idiv0>
 808b9de:	f1ad 0c08 	sub.w	ip, sp, #8
 808b9e2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 808b9e6:	2900      	cmp	r1, #0
 808b9e8:	db09      	blt.n	808b9fe <__aeabi_ldivmod+0x42>
 808b9ea:	2b00      	cmp	r3, #0
 808b9ec:	db1a      	blt.n	808ba24 <__aeabi_ldivmod+0x68>
 808b9ee:	f000 f871 	bl	808bad4 <__udivmoddi4>
 808b9f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 808b9f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808b9fa:	b004      	add	sp, #16
 808b9fc:	4770      	bx	lr
 808b9fe:	4240      	negs	r0, r0
 808ba00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808ba04:	2b00      	cmp	r3, #0
 808ba06:	db1b      	blt.n	808ba40 <__aeabi_ldivmod+0x84>
 808ba08:	f000 f864 	bl	808bad4 <__udivmoddi4>
 808ba0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 808ba10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808ba14:	b004      	add	sp, #16
 808ba16:	4240      	negs	r0, r0
 808ba18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808ba1c:	4252      	negs	r2, r2
 808ba1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808ba22:	4770      	bx	lr
 808ba24:	4252      	negs	r2, r2
 808ba26:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808ba2a:	f000 f853 	bl	808bad4 <__udivmoddi4>
 808ba2e:	f8dd e004 	ldr.w	lr, [sp, #4]
 808ba32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808ba36:	b004      	add	sp, #16
 808ba38:	4240      	negs	r0, r0
 808ba3a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808ba3e:	4770      	bx	lr
 808ba40:	4252      	negs	r2, r2
 808ba42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808ba46:	f000 f845 	bl	808bad4 <__udivmoddi4>
 808ba4a:	f8dd e004 	ldr.w	lr, [sp, #4]
 808ba4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808ba52:	b004      	add	sp, #16
 808ba54:	4252      	negs	r2, r2
 808ba56:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808ba5a:	4770      	bx	lr

0808ba5c <__aeabi_uldivmod>:
 808ba5c:	b953      	cbnz	r3, 808ba74 <__aeabi_uldivmod+0x18>
 808ba5e:	b94a      	cbnz	r2, 808ba74 <__aeabi_uldivmod+0x18>
 808ba60:	2900      	cmp	r1, #0
 808ba62:	bf08      	it	eq
 808ba64:	2800      	cmpeq	r0, #0
 808ba66:	bf1c      	itt	ne
 808ba68:	f04f 31ff 	movne.w	r1, #4294967295
 808ba6c:	f04f 30ff 	movne.w	r0, #4294967295
 808ba70:	f000 b9a6 	b.w	808bdc0 <__aeabi_idiv0>
 808ba74:	f1ad 0c08 	sub.w	ip, sp, #8
 808ba78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 808ba7c:	f000 f82a 	bl	808bad4 <__udivmoddi4>
 808ba80:	f8dd e004 	ldr.w	lr, [sp, #4]
 808ba84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808ba88:	b004      	add	sp, #16
 808ba8a:	4770      	bx	lr

0808ba8c <__aeabi_d2ulz>:
 808ba8c:	b5d0      	push	{r4, r6, r7, lr}
 808ba8e:	2200      	movs	r2, #0
 808ba90:	4b0e      	ldr	r3, [pc, #56]	; (808bacc <__aeabi_d2ulz+0x40>)
 808ba92:	4606      	mov	r6, r0
 808ba94:	460f      	mov	r7, r1
 808ba96:	f7ff f94f 	bl	808ad38 <__aeabi_dmul>
 808ba9a:	f7ff fc25 	bl	808b2e8 <__aeabi_d2uiz>
 808ba9e:	4604      	mov	r4, r0
 808baa0:	f7ff f8d4 	bl	808ac4c <__aeabi_ui2d>
 808baa4:	2200      	movs	r2, #0
 808baa6:	4b0a      	ldr	r3, [pc, #40]	; (808bad0 <__aeabi_d2ulz+0x44>)
 808baa8:	f7ff f946 	bl	808ad38 <__aeabi_dmul>
 808baac:	4602      	mov	r2, r0
 808baae:	460b      	mov	r3, r1
 808bab0:	4630      	mov	r0, r6
 808bab2:	4639      	mov	r1, r7
 808bab4:	f7fe ff8c 	bl	808a9d0 <__aeabi_dsub>
 808bab8:	f7ff fc16 	bl	808b2e8 <__aeabi_d2uiz>
 808babc:	4623      	mov	r3, r4
 808babe:	2200      	movs	r2, #0
 808bac0:	ea42 0200 	orr.w	r2, r2, r0
 808bac4:	4610      	mov	r0, r2
 808bac6:	4619      	mov	r1, r3
 808bac8:	bdd0      	pop	{r4, r6, r7, pc}
 808baca:	bf00      	nop
 808bacc:	3df00000 	.word	0x3df00000
 808bad0:	41f00000 	.word	0x41f00000

0808bad4 <__udivmoddi4>:
 808bad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808bad8:	468c      	mov	ip, r1
 808bada:	460c      	mov	r4, r1
 808badc:	4605      	mov	r5, r0
 808bade:	9e09      	ldr	r6, [sp, #36]	; 0x24
 808bae0:	2b00      	cmp	r3, #0
 808bae2:	d14f      	bne.n	808bb84 <__udivmoddi4+0xb0>
 808bae4:	428a      	cmp	r2, r1
 808bae6:	4617      	mov	r7, r2
 808bae8:	d96b      	bls.n	808bbc2 <__udivmoddi4+0xee>
 808baea:	fab2 fe82 	clz	lr, r2
 808baee:	f1be 0f00 	cmp.w	lr, #0
 808baf2:	d00b      	beq.n	808bb0c <__udivmoddi4+0x38>
 808baf4:	f1ce 0520 	rsb	r5, lr, #32
 808baf8:	fa20 f505 	lsr.w	r5, r0, r5
 808bafc:	fa01 f30e 	lsl.w	r3, r1, lr
 808bb00:	ea45 0c03 	orr.w	ip, r5, r3
 808bb04:	fa02 f70e 	lsl.w	r7, r2, lr
 808bb08:	fa00 f50e 	lsl.w	r5, r0, lr
 808bb0c:	0c39      	lsrs	r1, r7, #16
 808bb0e:	fbbc f0f1 	udiv	r0, ip, r1
 808bb12:	b2ba      	uxth	r2, r7
 808bb14:	fb01 c310 	mls	r3, r1, r0, ip
 808bb18:	fb00 f802 	mul.w	r8, r0, r2
 808bb1c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 808bb20:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 808bb24:	45a0      	cmp	r8, r4
 808bb26:	d909      	bls.n	808bb3c <__udivmoddi4+0x68>
 808bb28:	19e4      	adds	r4, r4, r7
 808bb2a:	f100 33ff 	add.w	r3, r0, #4294967295
 808bb2e:	f080 8128 	bcs.w	808bd82 <__udivmoddi4+0x2ae>
 808bb32:	45a0      	cmp	r8, r4
 808bb34:	f240 8125 	bls.w	808bd82 <__udivmoddi4+0x2ae>
 808bb38:	3802      	subs	r0, #2
 808bb3a:	443c      	add	r4, r7
 808bb3c:	ebc8 0404 	rsb	r4, r8, r4
 808bb40:	fbb4 f3f1 	udiv	r3, r4, r1
 808bb44:	fb01 4c13 	mls	ip, r1, r3, r4
 808bb48:	fb03 f202 	mul.w	r2, r3, r2
 808bb4c:	b2ac      	uxth	r4, r5
 808bb4e:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 808bb52:	428a      	cmp	r2, r1
 808bb54:	d909      	bls.n	808bb6a <__udivmoddi4+0x96>
 808bb56:	19c9      	adds	r1, r1, r7
 808bb58:	f103 34ff 	add.w	r4, r3, #4294967295
 808bb5c:	f080 810f 	bcs.w	808bd7e <__udivmoddi4+0x2aa>
 808bb60:	428a      	cmp	r2, r1
 808bb62:	f240 810c 	bls.w	808bd7e <__udivmoddi4+0x2aa>
 808bb66:	3b02      	subs	r3, #2
 808bb68:	4439      	add	r1, r7
 808bb6a:	1a8a      	subs	r2, r1, r2
 808bb6c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 808bb70:	2100      	movs	r1, #0
 808bb72:	2e00      	cmp	r6, #0
 808bb74:	d063      	beq.n	808bc3e <__udivmoddi4+0x16a>
 808bb76:	fa22 f20e 	lsr.w	r2, r2, lr
 808bb7a:	2300      	movs	r3, #0
 808bb7c:	e886 000c 	stmia.w	r6, {r2, r3}
 808bb80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808bb84:	428b      	cmp	r3, r1
 808bb86:	d907      	bls.n	808bb98 <__udivmoddi4+0xc4>
 808bb88:	2e00      	cmp	r6, #0
 808bb8a:	d056      	beq.n	808bc3a <__udivmoddi4+0x166>
 808bb8c:	2100      	movs	r1, #0
 808bb8e:	e886 0011 	stmia.w	r6, {r0, r4}
 808bb92:	4608      	mov	r0, r1
 808bb94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808bb98:	fab3 f183 	clz	r1, r3
 808bb9c:	2900      	cmp	r1, #0
 808bb9e:	f040 8093 	bne.w	808bcc8 <__udivmoddi4+0x1f4>
 808bba2:	42a3      	cmp	r3, r4
 808bba4:	d302      	bcc.n	808bbac <__udivmoddi4+0xd8>
 808bba6:	4282      	cmp	r2, r0
 808bba8:	f200 80fe 	bhi.w	808bda8 <__udivmoddi4+0x2d4>
 808bbac:	1a85      	subs	r5, r0, r2
 808bbae:	eb64 0303 	sbc.w	r3, r4, r3
 808bbb2:	469c      	mov	ip, r3
 808bbb4:	2001      	movs	r0, #1
 808bbb6:	2e00      	cmp	r6, #0
 808bbb8:	d041      	beq.n	808bc3e <__udivmoddi4+0x16a>
 808bbba:	e886 1020 	stmia.w	r6, {r5, ip}
 808bbbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808bbc2:	b912      	cbnz	r2, 808bbca <__udivmoddi4+0xf6>
 808bbc4:	2701      	movs	r7, #1
 808bbc6:	fbb7 f7f2 	udiv	r7, r7, r2
 808bbca:	fab7 fe87 	clz	lr, r7
 808bbce:	f1be 0f00 	cmp.w	lr, #0
 808bbd2:	d136      	bne.n	808bc42 <__udivmoddi4+0x16e>
 808bbd4:	1be4      	subs	r4, r4, r7
 808bbd6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 808bbda:	fa1f f987 	uxth.w	r9, r7
 808bbde:	2101      	movs	r1, #1
 808bbe0:	fbb4 f3f8 	udiv	r3, r4, r8
 808bbe4:	fb08 4413 	mls	r4, r8, r3, r4
 808bbe8:	fb09 f203 	mul.w	r2, r9, r3
 808bbec:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 808bbf0:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 808bbf4:	42a2      	cmp	r2, r4
 808bbf6:	d907      	bls.n	808bc08 <__udivmoddi4+0x134>
 808bbf8:	19e4      	adds	r4, r4, r7
 808bbfa:	f103 30ff 	add.w	r0, r3, #4294967295
 808bbfe:	d202      	bcs.n	808bc06 <__udivmoddi4+0x132>
 808bc00:	42a2      	cmp	r2, r4
 808bc02:	f200 80d3 	bhi.w	808bdac <__udivmoddi4+0x2d8>
 808bc06:	4603      	mov	r3, r0
 808bc08:	1aa4      	subs	r4, r4, r2
 808bc0a:	fbb4 f0f8 	udiv	r0, r4, r8
 808bc0e:	fb08 4810 	mls	r8, r8, r0, r4
 808bc12:	fb09 f900 	mul.w	r9, r9, r0
 808bc16:	b2ac      	uxth	r4, r5
 808bc18:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 808bc1c:	4591      	cmp	r9, r2
 808bc1e:	d907      	bls.n	808bc30 <__udivmoddi4+0x15c>
 808bc20:	19d2      	adds	r2, r2, r7
 808bc22:	f100 34ff 	add.w	r4, r0, #4294967295
 808bc26:	d202      	bcs.n	808bc2e <__udivmoddi4+0x15a>
 808bc28:	4591      	cmp	r9, r2
 808bc2a:	f200 80ba 	bhi.w	808bda2 <__udivmoddi4+0x2ce>
 808bc2e:	4620      	mov	r0, r4
 808bc30:	ebc9 0202 	rsb	r2, r9, r2
 808bc34:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 808bc38:	e79b      	b.n	808bb72 <__udivmoddi4+0x9e>
 808bc3a:	4631      	mov	r1, r6
 808bc3c:	4630      	mov	r0, r6
 808bc3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808bc42:	fa07 f70e 	lsl.w	r7, r7, lr
 808bc46:	f1ce 0c20 	rsb	ip, lr, #32
 808bc4a:	fa24 f30c 	lsr.w	r3, r4, ip
 808bc4e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 808bc52:	fbb3 faf8 	udiv	sl, r3, r8
 808bc56:	fa1f f987 	uxth.w	r9, r7
 808bc5a:	fb08 351a 	mls	r5, r8, sl, r3
 808bc5e:	fa20 fc0c 	lsr.w	ip, r0, ip
 808bc62:	fa04 f40e 	lsl.w	r4, r4, lr
 808bc66:	fb0a fb09 	mul.w	fp, sl, r9
 808bc6a:	ea4c 0c04 	orr.w	ip, ip, r4
 808bc6e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 808bc72:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 808bc76:	459b      	cmp	fp, r3
 808bc78:	fa00 f50e 	lsl.w	r5, r0, lr
 808bc7c:	d90a      	bls.n	808bc94 <__udivmoddi4+0x1c0>
 808bc7e:	19db      	adds	r3, r3, r7
 808bc80:	f10a 32ff 	add.w	r2, sl, #4294967295
 808bc84:	f080 808b 	bcs.w	808bd9e <__udivmoddi4+0x2ca>
 808bc88:	459b      	cmp	fp, r3
 808bc8a:	f240 8088 	bls.w	808bd9e <__udivmoddi4+0x2ca>
 808bc8e:	f1aa 0a02 	sub.w	sl, sl, #2
 808bc92:	443b      	add	r3, r7
 808bc94:	ebcb 0303 	rsb	r3, fp, r3
 808bc98:	fbb3 f0f8 	udiv	r0, r3, r8
 808bc9c:	fb08 3310 	mls	r3, r8, r0, r3
 808bca0:	fb00 f409 	mul.w	r4, r0, r9
 808bca4:	fa1f fc8c 	uxth.w	ip, ip
 808bca8:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 808bcac:	429c      	cmp	r4, r3
 808bcae:	d907      	bls.n	808bcc0 <__udivmoddi4+0x1ec>
 808bcb0:	19db      	adds	r3, r3, r7
 808bcb2:	f100 32ff 	add.w	r2, r0, #4294967295
 808bcb6:	d26e      	bcs.n	808bd96 <__udivmoddi4+0x2c2>
 808bcb8:	429c      	cmp	r4, r3
 808bcba:	d96c      	bls.n	808bd96 <__udivmoddi4+0x2c2>
 808bcbc:	3802      	subs	r0, #2
 808bcbe:	443b      	add	r3, r7
 808bcc0:	1b1c      	subs	r4, r3, r4
 808bcc2:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 808bcc6:	e78b      	b.n	808bbe0 <__udivmoddi4+0x10c>
 808bcc8:	f1c1 0e20 	rsb	lr, r1, #32
 808bccc:	408b      	lsls	r3, r1
 808bcce:	fa22 fc0e 	lsr.w	ip, r2, lr
 808bcd2:	ea4c 0c03 	orr.w	ip, ip, r3
 808bcd6:	fa24 f70e 	lsr.w	r7, r4, lr
 808bcda:	ea4f 491c 	mov.w	r9, ip, lsr #16
 808bcde:	fbb7 faf9 	udiv	sl, r7, r9
 808bce2:	fa1f f38c 	uxth.w	r3, ip
 808bce6:	fb09 771a 	mls	r7, r9, sl, r7
 808bcea:	fa20 f80e 	lsr.w	r8, r0, lr
 808bcee:	408c      	lsls	r4, r1
 808bcf0:	fb0a f503 	mul.w	r5, sl, r3
 808bcf4:	ea48 0404 	orr.w	r4, r8, r4
 808bcf8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 808bcfc:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 808bd00:	42bd      	cmp	r5, r7
 808bd02:	fa02 f201 	lsl.w	r2, r2, r1
 808bd06:	fa00 fb01 	lsl.w	fp, r0, r1
 808bd0a:	d909      	bls.n	808bd20 <__udivmoddi4+0x24c>
 808bd0c:	eb17 070c 	adds.w	r7, r7, ip
 808bd10:	f10a 30ff 	add.w	r0, sl, #4294967295
 808bd14:	d241      	bcs.n	808bd9a <__udivmoddi4+0x2c6>
 808bd16:	42bd      	cmp	r5, r7
 808bd18:	d93f      	bls.n	808bd9a <__udivmoddi4+0x2c6>
 808bd1a:	f1aa 0a02 	sub.w	sl, sl, #2
 808bd1e:	4467      	add	r7, ip
 808bd20:	1b7f      	subs	r7, r7, r5
 808bd22:	fbb7 f5f9 	udiv	r5, r7, r9
 808bd26:	fb09 7715 	mls	r7, r9, r5, r7
 808bd2a:	fb05 f303 	mul.w	r3, r5, r3
 808bd2e:	b2a4      	uxth	r4, r4
 808bd30:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 808bd34:	42bb      	cmp	r3, r7
 808bd36:	d908      	bls.n	808bd4a <__udivmoddi4+0x276>
 808bd38:	eb17 070c 	adds.w	r7, r7, ip
 808bd3c:	f105 30ff 	add.w	r0, r5, #4294967295
 808bd40:	d227      	bcs.n	808bd92 <__udivmoddi4+0x2be>
 808bd42:	42bb      	cmp	r3, r7
 808bd44:	d925      	bls.n	808bd92 <__udivmoddi4+0x2be>
 808bd46:	3d02      	subs	r5, #2
 808bd48:	4467      	add	r7, ip
 808bd4a:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 808bd4e:	fba0 8902 	umull	r8, r9, r0, r2
 808bd52:	1aff      	subs	r7, r7, r3
 808bd54:	454f      	cmp	r7, r9
 808bd56:	4645      	mov	r5, r8
 808bd58:	464c      	mov	r4, r9
 808bd5a:	d314      	bcc.n	808bd86 <__udivmoddi4+0x2b2>
 808bd5c:	d029      	beq.n	808bdb2 <__udivmoddi4+0x2de>
 808bd5e:	b366      	cbz	r6, 808bdba <__udivmoddi4+0x2e6>
 808bd60:	ebbb 0305 	subs.w	r3, fp, r5
 808bd64:	eb67 0704 	sbc.w	r7, r7, r4
 808bd68:	fa07 fe0e 	lsl.w	lr, r7, lr
 808bd6c:	40cb      	lsrs	r3, r1
 808bd6e:	40cf      	lsrs	r7, r1
 808bd70:	ea4e 0303 	orr.w	r3, lr, r3
 808bd74:	e886 0088 	stmia.w	r6, {r3, r7}
 808bd78:	2100      	movs	r1, #0
 808bd7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808bd7e:	4623      	mov	r3, r4
 808bd80:	e6f3      	b.n	808bb6a <__udivmoddi4+0x96>
 808bd82:	4618      	mov	r0, r3
 808bd84:	e6da      	b.n	808bb3c <__udivmoddi4+0x68>
 808bd86:	ebb8 0502 	subs.w	r5, r8, r2
 808bd8a:	eb69 040c 	sbc.w	r4, r9, ip
 808bd8e:	3801      	subs	r0, #1
 808bd90:	e7e5      	b.n	808bd5e <__udivmoddi4+0x28a>
 808bd92:	4605      	mov	r5, r0
 808bd94:	e7d9      	b.n	808bd4a <__udivmoddi4+0x276>
 808bd96:	4610      	mov	r0, r2
 808bd98:	e792      	b.n	808bcc0 <__udivmoddi4+0x1ec>
 808bd9a:	4682      	mov	sl, r0
 808bd9c:	e7c0      	b.n	808bd20 <__udivmoddi4+0x24c>
 808bd9e:	4692      	mov	sl, r2
 808bda0:	e778      	b.n	808bc94 <__udivmoddi4+0x1c0>
 808bda2:	3802      	subs	r0, #2
 808bda4:	443a      	add	r2, r7
 808bda6:	e743      	b.n	808bc30 <__udivmoddi4+0x15c>
 808bda8:	4608      	mov	r0, r1
 808bdaa:	e704      	b.n	808bbb6 <__udivmoddi4+0xe2>
 808bdac:	3b02      	subs	r3, #2
 808bdae:	443c      	add	r4, r7
 808bdb0:	e72a      	b.n	808bc08 <__udivmoddi4+0x134>
 808bdb2:	45c3      	cmp	fp, r8
 808bdb4:	d3e7      	bcc.n	808bd86 <__udivmoddi4+0x2b2>
 808bdb6:	463c      	mov	r4, r7
 808bdb8:	e7d1      	b.n	808bd5e <__udivmoddi4+0x28a>
 808bdba:	4631      	mov	r1, r6
 808bdbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808bdc0 <__aeabi_idiv0>:
 808bdc0:	4770      	bx	lr
 808bdc2:	bf00      	nop

0808bdc4 <asctime>:
 808bdc4:	4b09      	ldr	r3, [pc, #36]	; (808bdec <asctime+0x28>)
 808bdc6:	b570      	push	{r4, r5, r6, lr}
 808bdc8:	681c      	ldr	r4, [r3, #0]
 808bdca:	4606      	mov	r6, r0
 808bdcc:	6c25      	ldr	r5, [r4, #64]	; 0x40
 808bdce:	b93d      	cbnz	r5, 808bde0 <asctime+0x1c>
 808bdd0:	201a      	movs	r0, #26
 808bdd2:	f7fc fbd5 	bl	8088580 <malloc>
 808bdd6:	221a      	movs	r2, #26
 808bdd8:	6420      	str	r0, [r4, #64]	; 0x40
 808bdda:	4629      	mov	r1, r5
 808bddc:	f000 f96e 	bl	808c0bc <memset>
 808bde0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 808bde2:	4630      	mov	r0, r6
 808bde4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 808bde8:	f000 b802 	b.w	808bdf0 <asctime_r>
 808bdec:	20000140 	.word	0x20000140

0808bdf0 <asctime_r>:
 808bdf0:	b510      	push	{r4, lr}
 808bdf2:	460c      	mov	r4, r1
 808bdf4:	6941      	ldr	r1, [r0, #20]
 808bdf6:	b086      	sub	sp, #24
 808bdf8:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 808bdfc:	6903      	ldr	r3, [r0, #16]
 808bdfe:	6982      	ldr	r2, [r0, #24]
 808be00:	9104      	str	r1, [sp, #16]
 808be02:	6801      	ldr	r1, [r0, #0]
 808be04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 808be08:	9103      	str	r1, [sp, #12]
 808be0a:	6841      	ldr	r1, [r0, #4]
 808be0c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 808be10:	9102      	str	r1, [sp, #8]
 808be12:	6881      	ldr	r1, [r0, #8]
 808be14:	9101      	str	r1, [sp, #4]
 808be16:	68c1      	ldr	r1, [r0, #12]
 808be18:	4620      	mov	r0, r4
 808be1a:	9100      	str	r1, [sp, #0]
 808be1c:	4904      	ldr	r1, [pc, #16]	; (808be30 <asctime_r+0x40>)
 808be1e:	440b      	add	r3, r1
 808be20:	4904      	ldr	r1, [pc, #16]	; (808be34 <asctime_r+0x44>)
 808be22:	440a      	add	r2, r1
 808be24:	4904      	ldr	r1, [pc, #16]	; (808be38 <asctime_r+0x48>)
 808be26:	f7fc fbcb 	bl	80885c0 <siprintf>
 808be2a:	4620      	mov	r0, r4
 808be2c:	b006      	add	sp, #24
 808be2e:	bd10      	pop	{r4, pc}
 808be30:	08091a55 	.word	0x08091a55
 808be34:	08091a40 	.word	0x08091a40
 808be38:	08091a79 	.word	0x08091a79

0808be3c <atof>:
 808be3c:	2100      	movs	r1, #0
 808be3e:	f001 bd2b 	b.w	808d898 <strtod>

0808be42 <atol>:
 808be42:	220a      	movs	r2, #10
 808be44:	2100      	movs	r1, #0
 808be46:	f001 bdb5 	b.w	808d9b4 <strtol>
	...

0808be4c <__cxa_atexit>:
 808be4c:	b510      	push	{r4, lr}
 808be4e:	4c05      	ldr	r4, [pc, #20]	; (808be64 <__cxa_atexit+0x18>)
 808be50:	4613      	mov	r3, r2
 808be52:	b12c      	cbz	r4, 808be60 <__cxa_atexit+0x14>
 808be54:	460a      	mov	r2, r1
 808be56:	4601      	mov	r1, r0
 808be58:	2002      	movs	r0, #2
 808be5a:	f3af 8000 	nop.w
 808be5e:	bd10      	pop	{r4, pc}
 808be60:	4620      	mov	r0, r4
 808be62:	bd10      	pop	{r4, pc}
 808be64:	00000000 	.word	0x00000000

0808be68 <localtime>:
 808be68:	b538      	push	{r3, r4, r5, lr}
 808be6a:	4b07      	ldr	r3, [pc, #28]	; (808be88 <localtime+0x20>)
 808be6c:	4605      	mov	r5, r0
 808be6e:	681c      	ldr	r4, [r3, #0]
 808be70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 808be72:	b91b      	cbnz	r3, 808be7c <localtime+0x14>
 808be74:	2024      	movs	r0, #36	; 0x24
 808be76:	f7fc fb83 	bl	8088580 <malloc>
 808be7a:	63e0      	str	r0, [r4, #60]	; 0x3c
 808be7c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 808be7e:	4628      	mov	r0, r5
 808be80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808be84:	f000 b802 	b.w	808be8c <localtime_r>
 808be88:	20000140 	.word	0x20000140

0808be8c <localtime_r>:
 808be8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808be90:	460c      	mov	r4, r1
 808be92:	4680      	mov	r8, r0
 808be94:	f002 fbc6 	bl	808e624 <__gettzinfo>
 808be98:	4621      	mov	r1, r4
 808be9a:	4607      	mov	r7, r0
 808be9c:	4640      	mov	r0, r8
 808be9e:	f002 fbc5 	bl	808e62c <gmtime_r>
 808bea2:	6946      	ldr	r6, [r0, #20]
 808bea4:	4604      	mov	r4, r0
 808bea6:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 808beaa:	07b3      	lsls	r3, r6, #30
 808beac:	d105      	bne.n	808beba <localtime_r+0x2e>
 808beae:	2264      	movs	r2, #100	; 0x64
 808beb0:	fb96 f3f2 	sdiv	r3, r6, r2
 808beb4:	fb02 6313 	mls	r3, r2, r3, r6
 808beb8:	b94b      	cbnz	r3, 808bece <localtime_r+0x42>
 808beba:	f44f 75c8 	mov.w	r5, #400	; 0x190
 808bebe:	fb96 f3f5 	sdiv	r3, r6, r5
 808bec2:	fb05 6513 	mls	r5, r5, r3, r6
 808bec6:	fab5 f385 	clz	r3, r5
 808beca:	095b      	lsrs	r3, r3, #5
 808becc:	e000      	b.n	808bed0 <localtime_r+0x44>
 808bece:	2301      	movs	r3, #1
 808bed0:	4a5f      	ldr	r2, [pc, #380]	; (808c050 <localtime_r+0x1c4>)
 808bed2:	2530      	movs	r5, #48	; 0x30
 808bed4:	fb05 2503 	mla	r5, r5, r3, r2
 808bed8:	f001 feb6 	bl	808dc48 <__tz_lock>
 808bedc:	f001 feb6 	bl	808dc4c <_tzset_unlocked>
 808bee0:	4b5c      	ldr	r3, [pc, #368]	; (808c054 <localtime_r+0x1c8>)
 808bee2:	681b      	ldr	r3, [r3, #0]
 808bee4:	b1f3      	cbz	r3, 808bf24 <localtime_r+0x98>
 808bee6:	687b      	ldr	r3, [r7, #4]
 808bee8:	429e      	cmp	r6, r3
 808beea:	d105      	bne.n	808bef8 <localtime_r+0x6c>
 808beec:	6839      	ldr	r1, [r7, #0]
 808beee:	f8d8 3000 	ldr.w	r3, [r8]
 808bef2:	69fa      	ldr	r2, [r7, #28]
 808bef4:	b941      	cbnz	r1, 808bf08 <localtime_r+0x7c>
 808bef6:	e00a      	b.n	808bf0e <localtime_r+0x82>
 808bef8:	4630      	mov	r0, r6
 808befa:	f001 fdfd 	bl	808daf8 <__tzcalc_limits>
 808befe:	2800      	cmp	r0, #0
 808bf00:	d1f4      	bne.n	808beec <localtime_r+0x60>
 808bf02:	f04f 33ff 	mov.w	r3, #4294967295
 808bf06:	e00d      	b.n	808bf24 <localtime_r+0x98>
 808bf08:	4293      	cmp	r3, r2
 808bf0a:	db08      	blt.n	808bf1e <localtime_r+0x92>
 808bf0c:	e001      	b.n	808bf12 <localtime_r+0x86>
 808bf0e:	4293      	cmp	r3, r2
 808bf10:	da07      	bge.n	808bf22 <localtime_r+0x96>
 808bf12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 808bf14:	4293      	cmp	r3, r2
 808bf16:	bfac      	ite	ge
 808bf18:	2300      	movge	r3, #0
 808bf1a:	2301      	movlt	r3, #1
 808bf1c:	e002      	b.n	808bf24 <localtime_r+0x98>
 808bf1e:	2300      	movs	r3, #0
 808bf20:	e000      	b.n	808bf24 <localtime_r+0x98>
 808bf22:	2301      	movs	r3, #1
 808bf24:	6223      	str	r3, [r4, #32]
 808bf26:	6a23      	ldr	r3, [r4, #32]
 808bf28:	203c      	movs	r0, #60	; 0x3c
 808bf2a:	2b01      	cmp	r3, #1
 808bf2c:	bf0c      	ite	eq
 808bf2e:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 808bf30:	6a39      	ldrne	r1, [r7, #32]
 808bf32:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808bf36:	fb91 f6f3 	sdiv	r6, r1, r3
 808bf3a:	fb03 1316 	mls	r3, r3, r6, r1
 808bf3e:	fb93 f2f0 	sdiv	r2, r3, r0
 808bf42:	fb00 3012 	mls	r0, r0, r2, r3
 808bf46:	6861      	ldr	r1, [r4, #4]
 808bf48:	6823      	ldr	r3, [r4, #0]
 808bf4a:	1a89      	subs	r1, r1, r2
 808bf4c:	68a2      	ldr	r2, [r4, #8]
 808bf4e:	1a1b      	subs	r3, r3, r0
 808bf50:	1b92      	subs	r2, r2, r6
 808bf52:	2b3b      	cmp	r3, #59	; 0x3b
 808bf54:	6023      	str	r3, [r4, #0]
 808bf56:	6061      	str	r1, [r4, #4]
 808bf58:	60a2      	str	r2, [r4, #8]
 808bf5a:	dd03      	ble.n	808bf64 <localtime_r+0xd8>
 808bf5c:	3101      	adds	r1, #1
 808bf5e:	6061      	str	r1, [r4, #4]
 808bf60:	3b3c      	subs	r3, #60	; 0x3c
 808bf62:	e004      	b.n	808bf6e <localtime_r+0xe2>
 808bf64:	2b00      	cmp	r3, #0
 808bf66:	da03      	bge.n	808bf70 <localtime_r+0xe4>
 808bf68:	3901      	subs	r1, #1
 808bf6a:	6061      	str	r1, [r4, #4]
 808bf6c:	333c      	adds	r3, #60	; 0x3c
 808bf6e:	6023      	str	r3, [r4, #0]
 808bf70:	6863      	ldr	r3, [r4, #4]
 808bf72:	2b3b      	cmp	r3, #59	; 0x3b
 808bf74:	dd03      	ble.n	808bf7e <localtime_r+0xf2>
 808bf76:	3201      	adds	r2, #1
 808bf78:	60a2      	str	r2, [r4, #8]
 808bf7a:	3b3c      	subs	r3, #60	; 0x3c
 808bf7c:	e004      	b.n	808bf88 <localtime_r+0xfc>
 808bf7e:	2b00      	cmp	r3, #0
 808bf80:	da03      	bge.n	808bf8a <localtime_r+0xfe>
 808bf82:	3a01      	subs	r2, #1
 808bf84:	60a2      	str	r2, [r4, #8]
 808bf86:	333c      	adds	r3, #60	; 0x3c
 808bf88:	6063      	str	r3, [r4, #4]
 808bf8a:	68a3      	ldr	r3, [r4, #8]
 808bf8c:	2b17      	cmp	r3, #23
 808bf8e:	dd22      	ble.n	808bfd6 <localtime_r+0x14a>
 808bf90:	69e2      	ldr	r2, [r4, #28]
 808bf92:	3b18      	subs	r3, #24
 808bf94:	3201      	adds	r2, #1
 808bf96:	61e2      	str	r2, [r4, #28]
 808bf98:	69a2      	ldr	r2, [r4, #24]
 808bf9a:	60a3      	str	r3, [r4, #8]
 808bf9c:	3201      	adds	r2, #1
 808bf9e:	2a06      	cmp	r2, #6
 808bfa0:	bfc8      	it	gt
 808bfa2:	2200      	movgt	r2, #0
 808bfa4:	61a2      	str	r2, [r4, #24]
 808bfa6:	68e2      	ldr	r2, [r4, #12]
 808bfa8:	6923      	ldr	r3, [r4, #16]
 808bfaa:	3201      	adds	r2, #1
 808bfac:	60e2      	str	r2, [r4, #12]
 808bfae:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 808bfb2:	428a      	cmp	r2, r1
 808bfb4:	dd46      	ble.n	808c044 <localtime_r+0x1b8>
 808bfb6:	3301      	adds	r3, #1
 808bfb8:	2b0c      	cmp	r3, #12
 808bfba:	bf08      	it	eq
 808bfbc:	6963      	ldreq	r3, [r4, #20]
 808bfbe:	eba2 0201 	sub.w	r2, r2, r1
 808bfc2:	60e2      	str	r2, [r4, #12]
 808bfc4:	bf05      	ittet	eq
 808bfc6:	3301      	addeq	r3, #1
 808bfc8:	2200      	moveq	r2, #0
 808bfca:	6123      	strne	r3, [r4, #16]
 808bfcc:	6122      	streq	r2, [r4, #16]
 808bfce:	bf04      	itt	eq
 808bfd0:	6163      	streq	r3, [r4, #20]
 808bfd2:	61e2      	streq	r2, [r4, #28]
 808bfd4:	e036      	b.n	808c044 <localtime_r+0x1b8>
 808bfd6:	2b00      	cmp	r3, #0
 808bfd8:	da34      	bge.n	808c044 <localtime_r+0x1b8>
 808bfda:	69e2      	ldr	r2, [r4, #28]
 808bfdc:	3318      	adds	r3, #24
 808bfde:	3a01      	subs	r2, #1
 808bfe0:	61e2      	str	r2, [r4, #28]
 808bfe2:	69a2      	ldr	r2, [r4, #24]
 808bfe4:	60a3      	str	r3, [r4, #8]
 808bfe6:	3a01      	subs	r2, #1
 808bfe8:	bf48      	it	mi
 808bfea:	2206      	movmi	r2, #6
 808bfec:	61a2      	str	r2, [r4, #24]
 808bfee:	68e2      	ldr	r2, [r4, #12]
 808bff0:	3a01      	subs	r2, #1
 808bff2:	60e2      	str	r2, [r4, #12]
 808bff4:	bb32      	cbnz	r2, 808c044 <localtime_r+0x1b8>
 808bff6:	6923      	ldr	r3, [r4, #16]
 808bff8:	3b01      	subs	r3, #1
 808bffa:	d401      	bmi.n	808c000 <localtime_r+0x174>
 808bffc:	6123      	str	r3, [r4, #16]
 808bffe:	e01d      	b.n	808c03c <localtime_r+0x1b0>
 808c000:	230b      	movs	r3, #11
 808c002:	6123      	str	r3, [r4, #16]
 808c004:	6963      	ldr	r3, [r4, #20]
 808c006:	1e5a      	subs	r2, r3, #1
 808c008:	f012 0f03 	tst.w	r2, #3
 808c00c:	6162      	str	r2, [r4, #20]
 808c00e:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 808c012:	d105      	bne.n	808c020 <localtime_r+0x194>
 808c014:	2164      	movs	r1, #100	; 0x64
 808c016:	fb93 f2f1 	sdiv	r2, r3, r1
 808c01a:	fb01 3212 	mls	r2, r1, r2, r3
 808c01e:	b94a      	cbnz	r2, 808c034 <localtime_r+0x1a8>
 808c020:	f44f 71c8 	mov.w	r1, #400	; 0x190
 808c024:	fb93 f2f1 	sdiv	r2, r3, r1
 808c028:	fb01 3312 	mls	r3, r1, r2, r3
 808c02c:	fab3 f383 	clz	r3, r3
 808c030:	095b      	lsrs	r3, r3, #5
 808c032:	e000      	b.n	808c036 <localtime_r+0x1aa>
 808c034:	2301      	movs	r3, #1
 808c036:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 808c03a:	61e3      	str	r3, [r4, #28]
 808c03c:	6923      	ldr	r3, [r4, #16]
 808c03e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 808c042:	60e3      	str	r3, [r4, #12]
 808c044:	f001 fe01 	bl	808dc4a <__tz_unlock>
 808c048:	4620      	mov	r0, r4
 808c04a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808c04e:	bf00      	nop
 808c050:	08091c04 	.word	0x08091c04
 808c054:	20000eb0 	.word	0x20000eb0

0808c058 <ldiv>:
 808c058:	b510      	push	{r4, lr}
 808c05a:	fb91 f4f2 	sdiv	r4, r1, r2
 808c05e:	2900      	cmp	r1, #0
 808c060:	fb02 1314 	mls	r3, r2, r4, r1
 808c064:	db04      	blt.n	808c070 <ldiv+0x18>
 808c066:	2b00      	cmp	r3, #0
 808c068:	da07      	bge.n	808c07a <ldiv+0x22>
 808c06a:	3401      	adds	r4, #1
 808c06c:	1a9b      	subs	r3, r3, r2
 808c06e:	e004      	b.n	808c07a <ldiv+0x22>
 808c070:	2b00      	cmp	r3, #0
 808c072:	bfc4      	itt	gt
 808c074:	f104 34ff 	addgt.w	r4, r4, #4294967295
 808c078:	189b      	addgt	r3, r3, r2
 808c07a:	6004      	str	r4, [r0, #0]
 808c07c:	6043      	str	r3, [r0, #4]
 808c07e:	bd10      	pop	{r4, pc}

0808c080 <_localeconv_r>:
 808c080:	4800      	ldr	r0, [pc, #0]	; (808c084 <_localeconv_r+0x4>)
 808c082:	4770      	bx	lr
 808c084:	20000144 	.word	0x20000144

0808c088 <memcmp>:
 808c088:	b510      	push	{r4, lr}
 808c08a:	3901      	subs	r1, #1
 808c08c:	4402      	add	r2, r0
 808c08e:	4290      	cmp	r0, r2
 808c090:	d007      	beq.n	808c0a2 <memcmp+0x1a>
 808c092:	f810 3b01 	ldrb.w	r3, [r0], #1
 808c096:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808c09a:	42a3      	cmp	r3, r4
 808c09c:	d0f7      	beq.n	808c08e <memcmp+0x6>
 808c09e:	1b18      	subs	r0, r3, r4
 808c0a0:	bd10      	pop	{r4, pc}
 808c0a2:	2000      	movs	r0, #0
 808c0a4:	bd10      	pop	{r4, pc}

0808c0a6 <memcpy>:
 808c0a6:	b510      	push	{r4, lr}
 808c0a8:	1e43      	subs	r3, r0, #1
 808c0aa:	440a      	add	r2, r1
 808c0ac:	4291      	cmp	r1, r2
 808c0ae:	d004      	beq.n	808c0ba <memcpy+0x14>
 808c0b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 808c0b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 808c0b8:	e7f8      	b.n	808c0ac <memcpy+0x6>
 808c0ba:	bd10      	pop	{r4, pc}

0808c0bc <memset>:
 808c0bc:	4603      	mov	r3, r0
 808c0be:	4402      	add	r2, r0
 808c0c0:	4293      	cmp	r3, r2
 808c0c2:	d002      	beq.n	808c0ca <memset+0xe>
 808c0c4:	f803 1b01 	strb.w	r1, [r3], #1
 808c0c8:	e7fa      	b.n	808c0c0 <memset+0x4>
 808c0ca:	4770      	bx	lr

0808c0cc <srand>:
 808c0cc:	b538      	push	{r3, r4, r5, lr}
 808c0ce:	4b12      	ldr	r3, [pc, #72]	; (808c118 <srand+0x4c>)
 808c0d0:	4605      	mov	r5, r0
 808c0d2:	681c      	ldr	r4, [r3, #0]
 808c0d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 808c0d6:	b9d3      	cbnz	r3, 808c10e <srand+0x42>
 808c0d8:	2018      	movs	r0, #24
 808c0da:	f7fc fa51 	bl	8088580 <malloc>
 808c0de:	f243 330e 	movw	r3, #13070	; 0x330e
 808c0e2:	63a0      	str	r0, [r4, #56]	; 0x38
 808c0e4:	8003      	strh	r3, [r0, #0]
 808c0e6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 808c0ea:	8043      	strh	r3, [r0, #2]
 808c0ec:	f241 2334 	movw	r3, #4660	; 0x1234
 808c0f0:	8083      	strh	r3, [r0, #4]
 808c0f2:	f24e 636d 	movw	r3, #58989	; 0xe66d
 808c0f6:	80c3      	strh	r3, [r0, #6]
 808c0f8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 808c0fc:	8103      	strh	r3, [r0, #8]
 808c0fe:	2305      	movs	r3, #5
 808c100:	8143      	strh	r3, [r0, #10]
 808c102:	230b      	movs	r3, #11
 808c104:	8183      	strh	r3, [r0, #12]
 808c106:	2201      	movs	r2, #1
 808c108:	2300      	movs	r3, #0
 808c10a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 808c10e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 808c110:	2200      	movs	r2, #0
 808c112:	611d      	str	r5, [r3, #16]
 808c114:	615a      	str	r2, [r3, #20]
 808c116:	bd38      	pop	{r3, r4, r5, pc}
 808c118:	20000140 	.word	0x20000140

0808c11c <strchr>:
 808c11c:	b2c9      	uxtb	r1, r1
 808c11e:	4603      	mov	r3, r0
 808c120:	f810 2b01 	ldrb.w	r2, [r0], #1
 808c124:	b11a      	cbz	r2, 808c12e <strchr+0x12>
 808c126:	4291      	cmp	r1, r2
 808c128:	d1f9      	bne.n	808c11e <strchr+0x2>
 808c12a:	4618      	mov	r0, r3
 808c12c:	4770      	bx	lr
 808c12e:	2900      	cmp	r1, #0
 808c130:	bf0c      	ite	eq
 808c132:	4618      	moveq	r0, r3
 808c134:	2000      	movne	r0, #0
 808c136:	4770      	bx	lr

0808c138 <strcmp>:
 808c138:	f810 2b01 	ldrb.w	r2, [r0], #1
 808c13c:	f811 3b01 	ldrb.w	r3, [r1], #1
 808c140:	2a01      	cmp	r2, #1
 808c142:	bf28      	it	cs
 808c144:	429a      	cmpcs	r2, r3
 808c146:	d0f7      	beq.n	808c138 <strcmp>
 808c148:	1ad0      	subs	r0, r2, r3
 808c14a:	4770      	bx	lr

0808c14c <strcpy>:
 808c14c:	4603      	mov	r3, r0
 808c14e:	f811 2b01 	ldrb.w	r2, [r1], #1
 808c152:	f803 2b01 	strb.w	r2, [r3], #1
 808c156:	2a00      	cmp	r2, #0
 808c158:	d1f9      	bne.n	808c14e <strcpy+0x2>
 808c15a:	4770      	bx	lr

0808c15c <strdup>:
 808c15c:	4b02      	ldr	r3, [pc, #8]	; (808c168 <strdup+0xc>)
 808c15e:	4601      	mov	r1, r0
 808c160:	6818      	ldr	r0, [r3, #0]
 808c162:	f000 b803 	b.w	808c16c <_strdup_r>
 808c166:	bf00      	nop
 808c168:	20000140 	.word	0x20000140

0808c16c <_strdup_r>:
 808c16c:	b570      	push	{r4, r5, r6, lr}
 808c16e:	4606      	mov	r6, r0
 808c170:	4608      	mov	r0, r1
 808c172:	460c      	mov	r4, r1
 808c174:	f000 fd22 	bl	808cbbc <strlen>
 808c178:	1c45      	adds	r5, r0, #1
 808c17a:	4629      	mov	r1, r5
 808c17c:	4630      	mov	r0, r6
 808c17e:	f7fc fa4f 	bl	8088620 <_malloc_r>
 808c182:	4606      	mov	r6, r0
 808c184:	b118      	cbz	r0, 808c18e <_strdup_r+0x22>
 808c186:	462a      	mov	r2, r5
 808c188:	4621      	mov	r1, r4
 808c18a:	f7ff ff8c 	bl	808c0a6 <memcpy>
 808c18e:	4630      	mov	r0, r6
 808c190:	bd70      	pop	{r4, r5, r6, pc}

0808c192 <iso_year_adjust>:
 808c192:	6941      	ldr	r1, [r0, #20]
 808c194:	b510      	push	{r4, lr}
 808c196:	078b      	lsls	r3, r1, #30
 808c198:	d10c      	bne.n	808c1b4 <iso_year_adjust+0x22>
 808c19a:	f240 736c 	movw	r3, #1900	; 0x76c
 808c19e:	2900      	cmp	r1, #0
 808c1a0:	bfa8      	it	ge
 808c1a2:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 808c1a6:	440b      	add	r3, r1
 808c1a8:	2464      	movs	r4, #100	; 0x64
 808c1aa:	fb93 f2f4 	sdiv	r2, r3, r4
 808c1ae:	fb04 3312 	mls	r3, r4, r2, r3
 808c1b2:	b983      	cbnz	r3, 808c1d6 <iso_year_adjust+0x44>
 808c1b4:	f240 736c 	movw	r3, #1900	; 0x76c
 808c1b8:	2900      	cmp	r1, #0
 808c1ba:	bfa8      	it	ge
 808c1bc:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 808c1c0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808c1c4:	440b      	add	r3, r1
 808c1c6:	fb93 f1f2 	sdiv	r1, r3, r2
 808c1ca:	fb02 3311 	mls	r3, r2, r1, r3
 808c1ce:	fab3 f283 	clz	r2, r3
 808c1d2:	0952      	lsrs	r2, r2, #5
 808c1d4:	e000      	b.n	808c1d8 <iso_year_adjust+0x46>
 808c1d6:	2201      	movs	r2, #1
 808c1d8:	6983      	ldr	r3, [r0, #24]
 808c1da:	69c1      	ldr	r1, [r0, #28]
 808c1dc:	005b      	lsls	r3, r3, #1
 808c1de:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 808c1e2:	4413      	add	r3, r2
 808c1e4:	2b21      	cmp	r3, #33	; 0x21
 808c1e6:	dc0e      	bgt.n	808c206 <iso_year_adjust+0x74>
 808c1e8:	2b20      	cmp	r3, #32
 808c1ea:	da2f      	bge.n	808c24c <iso_year_adjust+0xba>
 808c1ec:	2b0d      	cmp	r3, #13
 808c1ee:	dc02      	bgt.n	808c1f6 <iso_year_adjust+0x64>
 808c1f0:	2b0a      	cmp	r3, #10
 808c1f2:	db05      	blt.n	808c200 <iso_year_adjust+0x6e>
 808c1f4:	e02a      	b.n	808c24c <iso_year_adjust+0xba>
 808c1f6:	2b10      	cmp	r3, #16
 808c1f8:	db26      	blt.n	808c248 <iso_year_adjust+0xb6>
 808c1fa:	2b11      	cmp	r3, #17
 808c1fc:	dd26      	ble.n	808c24c <iso_year_adjust+0xba>
 808c1fe:	3b1c      	subs	r3, #28
 808c200:	2b01      	cmp	r3, #1
 808c202:	d923      	bls.n	808c24c <iso_year_adjust+0xba>
 808c204:	e020      	b.n	808c248 <iso_year_adjust+0xb6>
 808c206:	f241 62c6 	movw	r2, #5830	; 0x16c6
 808c20a:	4293      	cmp	r3, r2
 808c20c:	dc0e      	bgt.n	808c22c <iso_year_adjust+0x9a>
 808c20e:	f241 62c2 	movw	r2, #5826	; 0x16c2
 808c212:	4293      	cmp	r3, r2
 808c214:	da16      	bge.n	808c244 <iso_year_adjust+0xb2>
 808c216:	f241 62a2 	movw	r2, #5794	; 0x16a2
 808c21a:	4293      	cmp	r3, r2
 808c21c:	d012      	beq.n	808c244 <iso_year_adjust+0xb2>
 808c21e:	db13      	blt.n	808c248 <iso_year_adjust+0xb6>
 808c220:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
 808c224:	3b12      	subs	r3, #18
 808c226:	2b02      	cmp	r3, #2
 808c228:	d90c      	bls.n	808c244 <iso_year_adjust+0xb2>
 808c22a:	e00d      	b.n	808c248 <iso_year_adjust+0xb6>
 808c22c:	f241 62d5 	movw	r2, #5845	; 0x16d5
 808c230:	4293      	cmp	r3, r2
 808c232:	d007      	beq.n	808c244 <iso_year_adjust+0xb2>
 808c234:	f241 62d7 	movw	r2, #5847	; 0x16d7
 808c238:	4293      	cmp	r3, r2
 808c23a:	d003      	beq.n	808c244 <iso_year_adjust+0xb2>
 808c23c:	f241 62d3 	movw	r2, #5843	; 0x16d3
 808c240:	4293      	cmp	r3, r2
 808c242:	d101      	bne.n	808c248 <iso_year_adjust+0xb6>
 808c244:	2001      	movs	r0, #1
 808c246:	bd10      	pop	{r4, pc}
 808c248:	2000      	movs	r0, #0
 808c24a:	bd10      	pop	{r4, pc}
 808c24c:	f04f 30ff 	mov.w	r0, #4294967295
 808c250:	bd10      	pop	{r4, pc}
	...

0808c254 <strftime>:
 808c254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808c258:	460e      	mov	r6, r1
 808c25a:	b093      	sub	sp, #76	; 0x4c
 808c25c:	461d      	mov	r5, r3
 808c25e:	4607      	mov	r7, r0
 808c260:	4691      	mov	r9, r2
 808c262:	f001 fc39 	bl	808dad8 <__get_current_time_locale>
 808c266:	2300      	movs	r3, #0
 808c268:	9306      	str	r3, [sp, #24]
 808c26a:	461c      	mov	r4, r3
 808c26c:	1e73      	subs	r3, r6, #1
 808c26e:	9003      	str	r0, [sp, #12]
 808c270:	9302      	str	r3, [sp, #8]
 808c272:	f899 3000 	ldrb.w	r3, [r9]
 808c276:	2b00      	cmp	r3, #0
 808c278:	f000 8492 	beq.w	808cba0 <strftime+0x94c>
 808c27c:	2b25      	cmp	r3, #37	; 0x25
 808c27e:	d008      	beq.n	808c292 <strftime+0x3e>
 808c280:	9a02      	ldr	r2, [sp, #8]
 808c282:	4294      	cmp	r4, r2
 808c284:	f080 8490 	bcs.w	808cba8 <strftime+0x954>
 808c288:	553b      	strb	r3, [r7, r4]
 808c28a:	f109 0901 	add.w	r9, r9, #1
 808c28e:	3401      	adds	r4, #1
 808c290:	e7ef      	b.n	808c272 <strftime+0x1e>
 808c292:	f899 a001 	ldrb.w	sl, [r9, #1]
 808c296:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 808c29a:	d007      	beq.n	808c2ac <strftime+0x58>
 808c29c:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808c2a0:	d004      	beq.n	808c2ac <strftime+0x58>
 808c2a2:	f109 0901 	add.w	r9, r9, #1
 808c2a6:	f04f 0a00 	mov.w	sl, #0
 808c2aa:	e001      	b.n	808c2b0 <strftime+0x5c>
 808c2ac:	f109 0902 	add.w	r9, r9, #2
 808c2b0:	f899 3000 	ldrb.w	r3, [r9]
 808c2b4:	3b31      	subs	r3, #49	; 0x31
 808c2b6:	2b08      	cmp	r3, #8
 808c2b8:	d808      	bhi.n	808c2cc <strftime+0x78>
 808c2ba:	4648      	mov	r0, r9
 808c2bc:	220a      	movs	r2, #10
 808c2be:	a90a      	add	r1, sp, #40	; 0x28
 808c2c0:	f001 fc00 	bl	808dac4 <strtoul>
 808c2c4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 808c2c8:	4680      	mov	r8, r0
 808c2ca:	e001      	b.n	808c2d0 <strftime+0x7c>
 808c2cc:	f04f 0800 	mov.w	r8, #0
 808c2d0:	f899 3000 	ldrb.w	r3, [r9]
 808c2d4:	2b45      	cmp	r3, #69	; 0x45
 808c2d6:	d001      	beq.n	808c2dc <strftime+0x88>
 808c2d8:	2b4f      	cmp	r3, #79	; 0x4f
 808c2da:	d101      	bne.n	808c2e0 <strftime+0x8c>
 808c2dc:	f109 0901 	add.w	r9, r9, #1
 808c2e0:	f899 0000 	ldrb.w	r0, [r9]
 808c2e4:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 808c2e8:	2b55      	cmp	r3, #85	; 0x55
 808c2ea:	f200 845d 	bhi.w	808cba8 <strftime+0x954>
 808c2ee:	e8df f013 	tbh	[pc, r3, lsl #1]
 808c2f2:	044a      	.short	0x044a
 808c2f4:	045b045b 	.word	0x045b045b
 808c2f8:	045b045b 	.word	0x045b045b
 808c2fc:	045b045b 	.word	0x045b045b
 808c300:	045b045b 	.word	0x045b045b
 808c304:	045b045b 	.word	0x045b045b
 808c308:	045b045b 	.word	0x045b045b
 808c30c:	045b045b 	.word	0x045b045b
 808c310:	045b045b 	.word	0x045b045b
 808c314:	045b045b 	.word	0x045b045b
 808c318:	045b045b 	.word	0x045b045b
 808c31c:	045b045b 	.word	0x045b045b
 808c320:	045b045b 	.word	0x045b045b
 808c324:	045b045b 	.word	0x045b045b
 808c328:	006f045b 	.word	0x006f045b
 808c32c:	00d400a1 	.word	0x00d400a1
 808c330:	045b011a 	.word	0x045b011a
 808c334:	01a0013f 	.word	0x01a0013f
 808c338:	022d0226 	.word	0x022d0226
 808c33c:	045b045b 	.word	0x045b045b
 808c340:	0260045b 	.word	0x0260045b
 808c344:	045b045b 	.word	0x045b045b
 808c348:	045b0268 	.word	0x045b0268
 808c34c:	031c0296 	.word	0x031c0296
 808c350:	033a0324 	.word	0x033a0324
 808c354:	03850342 	.word	0x03850342
 808c358:	039f00c6 	.word	0x039f00c6
 808c35c:	045b041f 	.word	0x045b041f
 808c360:	045b045b 	.word	0x045b045b
 808c364:	045b045b 	.word	0x045b045b
 808c368:	0056045b 	.word	0x0056045b
 808c36c:	00ba0089 	.word	0x00ba0089
 808c370:	010c010c 	.word	0x010c010c
 808c374:	0171045b 	.word	0x0171045b
 808c378:	045b0089 	.word	0x045b0089
 808c37c:	0226023d 	.word	0x0226023d
 808c380:	025d022d 	.word	0x025d022d
 808c384:	045b0262 	.word	0x045b0262
 808c388:	045b0268 	.word	0x045b0268
 808c38c:	029b00be 	.word	0x029b00be
 808c390:	032d031e 	.word	0x032d031e
 808c394:	037e045b 	.word	0x037e045b
 808c398:	039100c2 	.word	0x039100c2
 808c39c:	03e7      	.short	0x03e7
 808c39e:	69ab      	ldr	r3, [r5, #24]
 808c3a0:	9a03      	ldr	r2, [sp, #12]
 808c3a2:	3318      	adds	r3, #24
 808c3a4:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808c3a8:	4640      	mov	r0, r8
 808c3aa:	f000 fc07 	bl	808cbbc <strlen>
 808c3ae:	f108 38ff 	add.w	r8, r8, #4294967295
 808c3b2:	193b      	adds	r3, r7, r4
 808c3b4:	4420      	add	r0, r4
 808c3b6:	4284      	cmp	r4, r0
 808c3b8:	f000 83eb 	beq.w	808cb92 <strftime+0x93e>
 808c3bc:	9a02      	ldr	r2, [sp, #8]
 808c3be:	4294      	cmp	r4, r2
 808c3c0:	f080 83f2 	bcs.w	808cba8 <strftime+0x954>
 808c3c4:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808c3c8:	3401      	adds	r4, #1
 808c3ca:	f803 2b01 	strb.w	r2, [r3], #1
 808c3ce:	e7f2      	b.n	808c3b6 <strftime+0x162>
 808c3d0:	69ab      	ldr	r3, [r5, #24]
 808c3d2:	9a03      	ldr	r2, [sp, #12]
 808c3d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 808c3d8:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
 808c3dc:	4640      	mov	r0, r8
 808c3de:	f000 fbed 	bl	808cbbc <strlen>
 808c3e2:	f108 38ff 	add.w	r8, r8, #4294967295
 808c3e6:	193b      	adds	r3, r7, r4
 808c3e8:	4420      	add	r0, r4
 808c3ea:	4284      	cmp	r4, r0
 808c3ec:	f000 83d1 	beq.w	808cb92 <strftime+0x93e>
 808c3f0:	9a02      	ldr	r2, [sp, #8]
 808c3f2:	4294      	cmp	r4, r2
 808c3f4:	f080 83d8 	bcs.w	808cba8 <strftime+0x954>
 808c3f8:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808c3fc:	3401      	adds	r4, #1
 808c3fe:	f803 2b01 	strb.w	r2, [r3], #1
 808c402:	e7f2      	b.n	808c3ea <strftime+0x196>
 808c404:	692b      	ldr	r3, [r5, #16]
 808c406:	9a03      	ldr	r2, [sp, #12]
 808c408:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808c40c:	4640      	mov	r0, r8
 808c40e:	f000 fbd5 	bl	808cbbc <strlen>
 808c412:	f108 38ff 	add.w	r8, r8, #4294967295
 808c416:	193b      	adds	r3, r7, r4
 808c418:	4420      	add	r0, r4
 808c41a:	4284      	cmp	r4, r0
 808c41c:	f000 83b9 	beq.w	808cb92 <strftime+0x93e>
 808c420:	9a02      	ldr	r2, [sp, #8]
 808c422:	4294      	cmp	r4, r2
 808c424:	f080 83c0 	bcs.w	808cba8 <strftime+0x954>
 808c428:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808c42c:	3401      	adds	r4, #1
 808c42e:	f803 2b01 	strb.w	r2, [r3], #1
 808c432:	e7f2      	b.n	808c41a <strftime+0x1c6>
 808c434:	692b      	ldr	r3, [r5, #16]
 808c436:	9a03      	ldr	r2, [sp, #12]
 808c438:	330c      	adds	r3, #12
 808c43a:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808c43e:	4640      	mov	r0, r8
 808c440:	f000 fbbc 	bl	808cbbc <strlen>
 808c444:	f108 38ff 	add.w	r8, r8, #4294967295
 808c448:	193b      	adds	r3, r7, r4
 808c44a:	4420      	add	r0, r4
 808c44c:	4284      	cmp	r4, r0
 808c44e:	f000 83a0 	beq.w	808cb92 <strftime+0x93e>
 808c452:	9a02      	ldr	r2, [sp, #8]
 808c454:	4294      	cmp	r4, r2
 808c456:	f080 83a7 	bcs.w	808cba8 <strftime+0x954>
 808c45a:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808c45e:	3401      	adds	r4, #1
 808c460:	f803 2b01 	strb.w	r2, [r3], #1
 808c464:	e7f2      	b.n	808c44c <strftime+0x1f8>
 808c466:	9b03      	ldr	r3, [sp, #12]
 808c468:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
 808c46c:	e00a      	b.n	808c484 <strftime+0x230>
 808c46e:	9b03      	ldr	r3, [sp, #12]
 808c470:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
 808c474:	e006      	b.n	808c484 <strftime+0x230>
 808c476:	9b03      	ldr	r3, [sp, #12]
 808c478:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
 808c47c:	e002      	b.n	808c484 <strftime+0x230>
 808c47e:	9b03      	ldr	r3, [sp, #12]
 808c480:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
 808c484:	4640      	mov	r0, r8
 808c486:	f000 fb99 	bl	808cbbc <strlen>
 808c48a:	f898 3000 	ldrb.w	r3, [r8]
 808c48e:	2b00      	cmp	r3, #0
 808c490:	f000 837f 	beq.w	808cb92 <strftime+0x93e>
 808c494:	462b      	mov	r3, r5
 808c496:	4642      	mov	r2, r8
 808c498:	e093      	b.n	808c5c2 <strftime+0x36e>
 808c49a:	49b6      	ldr	r1, [pc, #728]	; (808c774 <strftime+0x520>)
 808c49c:	f8d5 b014 	ldr.w	fp, [r5, #20]
 808c4a0:	458b      	cmp	fp, r1
 808c4a2:	bfac      	ite	ge
 808c4a4:	2100      	movge	r1, #0
 808c4a6:	2101      	movlt	r1, #1
 808c4a8:	f1bb 0f00 	cmp.w	fp, #0
 808c4ac:	db04      	blt.n	808c4b8 <strftime+0x264>
 808c4ae:	2064      	movs	r0, #100	; 0x64
 808c4b0:	fb9b f0f0 	sdiv	r0, fp, r0
 808c4b4:	3013      	adds	r0, #19
 808c4b6:	e008      	b.n	808c4ca <strftime+0x276>
 808c4b8:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
 808c4bc:	9107      	str	r1, [sp, #28]
 808c4be:	f001 fd4b 	bl	808df58 <abs>
 808c4c2:	2364      	movs	r3, #100	; 0x64
 808c4c4:	fb90 f0f3 	sdiv	r0, r0, r3
 808c4c8:	9907      	ldr	r1, [sp, #28]
 808c4ca:	f1ba 0f00 	cmp.w	sl, #0
 808c4ce:	d008      	beq.n	808c4e2 <strftime+0x28e>
 808c4d0:	2863      	cmp	r0, #99	; 0x63
 808c4d2:	dd09      	ble.n	808c4e8 <strftime+0x294>
 808c4d4:	4ba8      	ldr	r3, [pc, #672]	; (808c778 <strftime+0x524>)
 808c4d6:	4aa9      	ldr	r2, [pc, #676]	; (808c77c <strftime+0x528>)
 808c4d8:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808c4dc:	bf18      	it	ne
 808c4de:	4613      	movne	r3, r2
 808c4e0:	e003      	b.n	808c4ea <strftime+0x296>
 808c4e2:	4ba6      	ldr	r3, [pc, #664]	; (808c77c <strftime+0x528>)
 808c4e4:	4aa6      	ldr	r2, [pc, #664]	; (808c780 <strftime+0x52c>)
 808c4e6:	e001      	b.n	808c4ec <strftime+0x298>
 808c4e8:	4ba4      	ldr	r3, [pc, #656]	; (808c77c <strftime+0x528>)
 808c4ea:	4aa6      	ldr	r2, [pc, #664]	; (808c784 <strftime+0x530>)
 808c4ec:	f1b8 0f01 	cmp.w	r8, #1
 808c4f0:	bf98      	it	ls
 808c4f2:	f04f 0802 	movls.w	r8, #2
 808c4f6:	ebc1 0108 	rsb	r1, r1, r8
 808c4fa:	9001      	str	r0, [sp, #4]
 808c4fc:	9100      	str	r1, [sp, #0]
 808c4fe:	489d      	ldr	r0, [pc, #628]	; (808c774 <strftime+0x520>)
 808c500:	49a1      	ldr	r1, [pc, #644]	; (808c788 <strftime+0x534>)
 808c502:	4583      	cmp	fp, r0
 808c504:	bfb8      	it	lt
 808c506:	460b      	movlt	r3, r1
 808c508:	e21d      	b.n	808c946 <strftime+0x6f2>
 808c50a:	4aa0      	ldr	r2, [pc, #640]	; (808c78c <strftime+0x538>)
 808c50c:	49a0      	ldr	r1, [pc, #640]	; (808c790 <strftime+0x53c>)
 808c50e:	68eb      	ldr	r3, [r5, #12]
 808c510:	2864      	cmp	r0, #100	; 0x64
 808c512:	bf08      	it	eq
 808c514:	460a      	moveq	r2, r1
 808c516:	1b31      	subs	r1, r6, r4
 808c518:	1938      	adds	r0, r7, r4
 808c51a:	f7fc f869 	bl	80885f0 <sniprintf>
 808c51e:	2800      	cmp	r0, #0
 808c520:	f280 8302 	bge.w	808cb28 <strftime+0x8d4>
 808c524:	e340      	b.n	808cba8 <strftime+0x954>
 808c526:	6968      	ldr	r0, [r5, #20]
 808c528:	692b      	ldr	r3, [r5, #16]
 808c52a:	2800      	cmp	r0, #0
 808c52c:	f103 0b01 	add.w	fp, r3, #1
 808c530:	eb07 0804 	add.w	r8, r7, r4
 808c534:	ebc4 0a06 	rsb	sl, r4, r6
 808c538:	68eb      	ldr	r3, [r5, #12]
 808c53a:	db05      	blt.n	808c548 <strftime+0x2f4>
 808c53c:	2264      	movs	r2, #100	; 0x64
 808c53e:	fb90 f1f2 	sdiv	r1, r0, r2
 808c542:	fb02 0011 	mls	r0, r2, r1, r0
 808c546:	e00a      	b.n	808c55e <strftime+0x30a>
 808c548:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808c54c:	9307      	str	r3, [sp, #28]
 808c54e:	f001 fd03 	bl	808df58 <abs>
 808c552:	2264      	movs	r2, #100	; 0x64
 808c554:	fb90 f1f2 	sdiv	r1, r0, r2
 808c558:	fb01 0012 	mls	r0, r1, r2, r0
 808c55c:	9b07      	ldr	r3, [sp, #28]
 808c55e:	9001      	str	r0, [sp, #4]
 808c560:	9300      	str	r3, [sp, #0]
 808c562:	4651      	mov	r1, sl
 808c564:	465b      	mov	r3, fp
 808c566:	4640      	mov	r0, r8
 808c568:	4a8a      	ldr	r2, [pc, #552]	; (808c794 <strftime+0x540>)
 808c56a:	f7fc f841 	bl	80885f0 <sniprintf>
 808c56e:	e7d6      	b.n	808c51e <strftime+0x2ca>
 808c570:	2325      	movs	r3, #37	; 0x25
 808c572:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 808c576:	f1ba 0f00 	cmp.w	sl, #0
 808c57a:	d007      	beq.n	808c58c <strftime+0x338>
 808c57c:	f1b8 0f05 	cmp.w	r8, #5
 808c580:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
 808c584:	bf98      	it	ls
 808c586:	f04f 0806 	movls.w	r8, #6
 808c58a:	e004      	b.n	808c596 <strftime+0x342>
 808c58c:	232b      	movs	r3, #43	; 0x2b
 808c58e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 808c592:	f04f 080a 	mov.w	r8, #10
 808c596:	f1b8 0306 	subs.w	r3, r8, #6
 808c59a:	d102      	bne.n	808c5a2 <strftime+0x34e>
 808c59c:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 808c5a0:	e00a      	b.n	808c5b8 <strftime+0x364>
 808c5a2:	4a7d      	ldr	r2, [pc, #500]	; (808c798 <strftime+0x544>)
 808c5a4:	211e      	movs	r1, #30
 808c5a6:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 808c5aa:	f7fc f821 	bl	80885f0 <sniprintf>
 808c5ae:	2800      	cmp	r0, #0
 808c5b0:	ddf4      	ble.n	808c59c <strftime+0x348>
 808c5b2:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 808c5b6:	4418      	add	r0, r3
 808c5b8:	4978      	ldr	r1, [pc, #480]	; (808c79c <strftime+0x548>)
 808c5ba:	f7ff fdc7 	bl	808c14c <strcpy>
 808c5be:	462b      	mov	r3, r5
 808c5c0:	aa0a      	add	r2, sp, #40	; 0x28
 808c5c2:	1b31      	subs	r1, r6, r4
 808c5c4:	1938      	adds	r0, r7, r4
 808c5c6:	f7ff fe45 	bl	808c254 <strftime>
 808c5ca:	2800      	cmp	r0, #0
 808c5cc:	f340 82ec 	ble.w	808cba8 <strftime+0x954>
 808c5d0:	4404      	add	r4, r0
 808c5d2:	e2de      	b.n	808cb92 <strftime+0x93e>
 808c5d4:	4628      	mov	r0, r5
 808c5d6:	f7ff fddc 	bl	808c192 <iso_year_adjust>
 808c5da:	4680      	mov	r8, r0
 808c5dc:	6968      	ldr	r0, [r5, #20]
 808c5de:	2800      	cmp	r0, #0
 808c5e0:	db05      	blt.n	808c5ee <strftime+0x39a>
 808c5e2:	2264      	movs	r2, #100	; 0x64
 808c5e4:	fb90 f1f2 	sdiv	r1, r0, r2
 808c5e8:	fb02 0011 	mls	r0, r2, r1, r0
 808c5ec:	e008      	b.n	808c600 <strftime+0x3ac>
 808c5ee:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808c5f2:	f001 fcb1 	bl	808df58 <abs>
 808c5f6:	2264      	movs	r2, #100	; 0x64
 808c5f8:	fb90 f3f2 	sdiv	r3, r0, r2
 808c5fc:	fb03 0012 	mls	r0, r3, r2, r0
 808c600:	f1b8 0f00 	cmp.w	r8, #0
 808c604:	da06      	bge.n	808c614 <strftime+0x3c0>
 808c606:	696a      	ldr	r2, [r5, #20]
 808c608:	4b65      	ldr	r3, [pc, #404]	; (808c7a0 <strftime+0x54c>)
 808c60a:	429a      	cmp	r2, r3
 808c60c:	bfb8      	it	lt
 808c60e:	f04f 0801 	movlt.w	r8, #1
 808c612:	e006      	b.n	808c622 <strftime+0x3ce>
 808c614:	d005      	beq.n	808c622 <strftime+0x3ce>
 808c616:	696a      	ldr	r2, [r5, #20]
 808c618:	4b56      	ldr	r3, [pc, #344]	; (808c774 <strftime+0x520>)
 808c61a:	429a      	cmp	r2, r3
 808c61c:	bfb8      	it	lt
 808c61e:	f04f 38ff 	movlt.w	r8, #4294967295
 808c622:	2364      	movs	r3, #100	; 0x64
 808c624:	4440      	add	r0, r8
 808c626:	fb90 f2f3 	sdiv	r2, r0, r3
 808c62a:	fb03 0012 	mls	r0, r3, r2, r0
 808c62e:	4418      	add	r0, r3
 808c630:	e1f8      	b.n	808ca24 <strftime+0x7d0>
 808c632:	4b50      	ldr	r3, [pc, #320]	; (808c774 <strftime+0x520>)
 808c634:	6969      	ldr	r1, [r5, #20]
 808c636:	4628      	mov	r0, r5
 808c638:	4299      	cmp	r1, r3
 808c63a:	bfac      	ite	ge
 808c63c:	2300      	movge	r3, #0
 808c63e:	2301      	movlt	r3, #1
 808c640:	9108      	str	r1, [sp, #32]
 808c642:	9307      	str	r3, [sp, #28]
 808c644:	f7ff fda5 	bl	808c192 <iso_year_adjust>
 808c648:	9908      	ldr	r1, [sp, #32]
 808c64a:	4683      	mov	fp, r0
 808c64c:	2900      	cmp	r1, #0
 808c64e:	db04      	blt.n	808c65a <strftime+0x406>
 808c650:	2364      	movs	r3, #100	; 0x64
 808c652:	fb91 f3f3 	sdiv	r3, r1, r3
 808c656:	3313      	adds	r3, #19
 808c658:	e008      	b.n	808c66c <strftime+0x418>
 808c65a:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 808c65e:	9108      	str	r1, [sp, #32]
 808c660:	f001 fc7a 	bl	808df58 <abs>
 808c664:	2364      	movs	r3, #100	; 0x64
 808c666:	fb90 f3f3 	sdiv	r3, r0, r3
 808c66a:	9908      	ldr	r1, [sp, #32]
 808c66c:	6968      	ldr	r0, [r5, #20]
 808c66e:	2800      	cmp	r0, #0
 808c670:	db06      	blt.n	808c680 <strftime+0x42c>
 808c672:	f04f 0e64 	mov.w	lr, #100	; 0x64
 808c676:	fb90 fcfe 	sdiv	ip, r0, lr
 808c67a:	fb0e 001c 	mls	r0, lr, ip, r0
 808c67e:	e00d      	b.n	808c69c <strftime+0x448>
 808c680:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808c684:	9109      	str	r1, [sp, #36]	; 0x24
 808c686:	9308      	str	r3, [sp, #32]
 808c688:	f001 fc66 	bl	808df58 <abs>
 808c68c:	f04f 0e64 	mov.w	lr, #100	; 0x64
 808c690:	fb90 fcfe 	sdiv	ip, r0, lr
 808c694:	fb0c 001e 	mls	r0, ip, lr, r0
 808c698:	9909      	ldr	r1, [sp, #36]	; 0x24
 808c69a:	9b08      	ldr	r3, [sp, #32]
 808c69c:	f1bb 0f00 	cmp.w	fp, #0
 808c6a0:	da08      	bge.n	808c6b4 <strftime+0x460>
 808c6a2:	6969      	ldr	r1, [r5, #20]
 808c6a4:	4a3e      	ldr	r2, [pc, #248]	; (808c7a0 <strftime+0x54c>)
 808c6a6:	4291      	cmp	r1, r2
 808c6a8:	da0a      	bge.n	808c6c0 <strftime+0x46c>
 808c6aa:	f04f 0b01 	mov.w	fp, #1
 808c6ae:	f8cd b01c 	str.w	fp, [sp, #28]
 808c6b2:	e005      	b.n	808c6c0 <strftime+0x46c>
 808c6b4:	d004      	beq.n	808c6c0 <strftime+0x46c>
 808c6b6:	4a2f      	ldr	r2, [pc, #188]	; (808c774 <strftime+0x520>)
 808c6b8:	4291      	cmp	r1, r2
 808c6ba:	bfb8      	it	lt
 808c6bc:	f04f 3bff 	movlt.w	fp, #4294967295
 808c6c0:	eb0b 0200 	add.w	r2, fp, r0
 808c6c4:	1c50      	adds	r0, r2, #1
 808c6c6:	d102      	bne.n	808c6ce <strftime+0x47a>
 808c6c8:	3b01      	subs	r3, #1
 808c6ca:	2263      	movs	r2, #99	; 0x63
 808c6cc:	e003      	b.n	808c6d6 <strftime+0x482>
 808c6ce:	2a64      	cmp	r2, #100	; 0x64
 808c6d0:	bf04      	itt	eq
 808c6d2:	3301      	addeq	r3, #1
 808c6d4:	2200      	moveq	r2, #0
 808c6d6:	2064      	movs	r0, #100	; 0x64
 808c6d8:	fb00 2303 	mla	r3, r0, r3, r2
 808c6dc:	9a07      	ldr	r2, [sp, #28]
 808c6de:	b142      	cbz	r2, 808c6f2 <strftime+0x49e>
 808c6e0:	222d      	movs	r2, #45	; 0x2d
 808c6e2:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
 808c6e6:	f1b8 0f00 	cmp.w	r8, #0
 808c6ea:	d013      	beq.n	808c714 <strftime+0x4c0>
 808c6ec:	f108 38ff 	add.w	r8, r8, #4294967295
 808c6f0:	e010      	b.n	808c714 <strftime+0x4c0>
 808c6f2:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808c6f6:	d110      	bne.n	808c71a <strftime+0x4c6>
 808c6f8:	f242 720f 	movw	r2, #9999	; 0x270f
 808c6fc:	4293      	cmp	r3, r2
 808c6fe:	d90c      	bls.n	808c71a <strftime+0x4c6>
 808c700:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 808c704:	f1b8 0f00 	cmp.w	r8, #0
 808c708:	d1f0      	bne.n	808c6ec <strftime+0x498>
 808c70a:	aa12      	add	r2, sp, #72	; 0x48
 808c70c:	2125      	movs	r1, #37	; 0x25
 808c70e:	f802 1d1f 	strb.w	r1, [r2, #-31]!
 808c712:	e00a      	b.n	808c72a <strftime+0x4d6>
 808c714:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 808c718:	e000      	b.n	808c71c <strftime+0x4c8>
 808c71a:	aa0a      	add	r2, sp, #40	; 0x28
 808c71c:	2125      	movs	r1, #37	; 0x25
 808c71e:	7011      	strb	r1, [r2, #0]
 808c720:	f1ba 0f00 	cmp.w	sl, #0
 808c724:	d101      	bne.n	808c72a <strftime+0x4d6>
 808c726:	1c50      	adds	r0, r2, #1
 808c728:	e002      	b.n	808c730 <strftime+0x4dc>
 808c72a:	2130      	movs	r1, #48	; 0x30
 808c72c:	1c90      	adds	r0, r2, #2
 808c72e:	7051      	strb	r1, [r2, #1]
 808c730:	491c      	ldr	r1, [pc, #112]	; (808c7a4 <strftime+0x550>)
 808c732:	9307      	str	r3, [sp, #28]
 808c734:	f7ff fd0a 	bl	808c14c <strcpy>
 808c738:	9b07      	ldr	r3, [sp, #28]
 808c73a:	9300      	str	r3, [sp, #0]
 808c73c:	e1ac      	b.n	808ca98 <strftime+0x844>
 808c73e:	4a14      	ldr	r2, [pc, #80]	; (808c790 <strftime+0x53c>)
 808c740:	4912      	ldr	r1, [pc, #72]	; (808c78c <strftime+0x538>)
 808c742:	68ab      	ldr	r3, [r5, #8]
 808c744:	286b      	cmp	r0, #107	; 0x6b
 808c746:	bf08      	it	eq
 808c748:	460a      	moveq	r2, r1
 808c74a:	e6e4      	b.n	808c516 <strftime+0x2c2>
 808c74c:	68a9      	ldr	r1, [r5, #8]
 808c74e:	230c      	movs	r3, #12
 808c750:	b131      	cbz	r1, 808c760 <strftime+0x50c>
 808c752:	4299      	cmp	r1, r3
 808c754:	bf16      	itet	ne
 808c756:	fb91 f2f3 	sdivne	r2, r1, r3
 808c75a:	460b      	moveq	r3, r1
 808c75c:	fb03 1312 	mlsne	r3, r3, r2, r1
 808c760:	4a0a      	ldr	r2, [pc, #40]	; (808c78c <strftime+0x538>)
 808c762:	490b      	ldr	r1, [pc, #44]	; (808c790 <strftime+0x53c>)
 808c764:	2849      	cmp	r0, #73	; 0x49
 808c766:	bf08      	it	eq
 808c768:	460a      	moveq	r2, r1
 808c76a:	e6d4      	b.n	808c516 <strftime+0x2c2>
 808c76c:	69eb      	ldr	r3, [r5, #28]
 808c76e:	4a0e      	ldr	r2, [pc, #56]	; (808c7a8 <strftime+0x554>)
 808c770:	3301      	adds	r3, #1
 808c772:	e6d0      	b.n	808c516 <strftime+0x2c2>
 808c774:	fffff894 	.word	0xfffff894
 808c778:	08091c73 	.word	0x08091c73
 808c77c:	080917cc 	.word	0x080917cc
 808c780:	08091c64 	.word	0x08091c64
 808c784:	08091c6b 	.word	0x08091c6b
 808c788:	0808f4cb 	.word	0x0808f4cb
 808c78c:	08091c75 	.word	0x08091c75
 808c790:	08091c83 	.word	0x08091c83
 808c794:	08091c79 	.word	0x08091c79
 808c798:	08091c88 	.word	0x08091c88
 808c79c:	08091c8c 	.word	0x08091c8c
 808c7a0:	fffff895 	.word	0xfffff895
 808c7a4:	08091c94 	.word	0x08091c94
 808c7a8:	08091c98 	.word	0x08091c98
 808c7ac:	692b      	ldr	r3, [r5, #16]
 808c7ae:	3301      	adds	r3, #1
 808c7b0:	e13c      	b.n	808ca2c <strftime+0x7d8>
 808c7b2:	686b      	ldr	r3, [r5, #4]
 808c7b4:	e13a      	b.n	808ca2c <strftime+0x7d8>
 808c7b6:	9b02      	ldr	r3, [sp, #8]
 808c7b8:	429c      	cmp	r4, r3
 808c7ba:	f080 81f5 	bcs.w	808cba8 <strftime+0x954>
 808c7be:	230a      	movs	r3, #10
 808c7c0:	e1e5      	b.n	808cb8e <strftime+0x93a>
 808c7c2:	68ab      	ldr	r3, [r5, #8]
 808c7c4:	9a03      	ldr	r2, [sp, #12]
 808c7c6:	2b0b      	cmp	r3, #11
 808c7c8:	bfcc      	ite	gt
 808c7ca:	23a4      	movgt	r3, #164	; 0xa4
 808c7cc:	23a0      	movle	r3, #160	; 0xa0
 808c7ce:	4413      	add	r3, r2
 808c7d0:	f8d3 8004 	ldr.w	r8, [r3, #4]
 808c7d4:	4640      	mov	r0, r8
 808c7d6:	f000 f9f1 	bl	808cbbc <strlen>
 808c7da:	4642      	mov	r2, r8
 808c7dc:	4bb1      	ldr	r3, [pc, #708]	; (808caa4 <strftime+0x850>)
 808c7de:	1939      	adds	r1, r7, r4
 808c7e0:	f8d3 e000 	ldr.w	lr, [r3]
 808c7e4:	4420      	add	r0, r4
 808c7e6:	4284      	cmp	r4, r0
 808c7e8:	f000 81d3 	beq.w	808cb92 <strftime+0x93e>
 808c7ec:	9b02      	ldr	r3, [sp, #8]
 808c7ee:	429c      	cmp	r4, r3
 808c7f0:	f080 81da 	bcs.w	808cba8 <strftime+0x954>
 808c7f4:	f899 3000 	ldrb.w	r3, [r9]
 808c7f8:	3401      	adds	r4, #1
 808c7fa:	2b50      	cmp	r3, #80	; 0x50
 808c7fc:	7813      	ldrb	r3, [r2, #0]
 808c7fe:	d10a      	bne.n	808c816 <strftime+0x5c2>
 808c800:	eb0e 0c03 	add.w	ip, lr, r3
 808c804:	f89c c001 	ldrb.w	ip, [ip, #1]
 808c808:	f00c 0c03 	and.w	ip, ip, #3
 808c80c:	f1bc 0f01 	cmp.w	ip, #1
 808c810:	bf08      	it	eq
 808c812:	3320      	addeq	r3, #32
 808c814:	b2db      	uxtb	r3, r3
 808c816:	f801 3b01 	strb.w	r3, [r1], #1
 808c81a:	3201      	adds	r2, #1
 808c81c:	e7e3      	b.n	808c7e6 <strftime+0x592>
 808c81e:	686b      	ldr	r3, [r5, #4]
 808c820:	4aa1      	ldr	r2, [pc, #644]	; (808caa8 <strftime+0x854>)
 808c822:	9300      	str	r3, [sp, #0]
 808c824:	68ab      	ldr	r3, [r5, #8]
 808c826:	e139      	b.n	808ca9c <strftime+0x848>
 808c828:	6a2b      	ldr	r3, [r5, #32]
 808c82a:	2b00      	cmp	r3, #0
 808c82c:	db17      	blt.n	808c85e <strftime+0x60a>
 808c82e:	f001 fa0b 	bl	808dc48 <__tz_lock>
 808c832:	9b06      	ldr	r3, [sp, #24]
 808c834:	b91b      	cbnz	r3, 808c83e <strftime+0x5ea>
 808c836:	f001 fa09 	bl	808dc4c <_tzset_unlocked>
 808c83a:	2301      	movs	r3, #1
 808c83c:	9306      	str	r3, [sp, #24]
 808c83e:	f001 fef1 	bl	808e624 <__gettzinfo>
 808c842:	6a2b      	ldr	r3, [r5, #32]
 808c844:	221c      	movs	r2, #28
 808c846:	2b00      	cmp	r3, #0
 808c848:	bfd4      	ite	le
 808c84a:	2300      	movle	r3, #0
 808c84c:	2301      	movgt	r3, #1
 808c84e:	fb02 0003 	mla	r0, r2, r3, r0
 808c852:	6a03      	ldr	r3, [r0, #32]
 808c854:	f1c3 0800 	rsb	r8, r3, #0
 808c858:	f001 f9f7 	bl	808dc4a <__tz_unlock>
 808c85c:	e001      	b.n	808c862 <strftime+0x60e>
 808c85e:	f04f 0800 	mov.w	r8, #0
 808c862:	f8d5 e014 	ldr.w	lr, [r5, #20]
 808c866:	ebc4 0c06 	rsb	ip, r4, r6
 808c86a:	4670      	mov	r0, lr
 808c86c:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
 808c870:	ea4f 71e0 	mov.w	r1, r0, asr #31
 808c874:	f141 33ff 	adc.w	r3, r1, #4294967295
 808c878:	2a00      	cmp	r2, #0
 808c87a:	f173 0b00 	sbcs.w	fp, r3, #0
 808c87e:	eb07 0a04 	add.w	sl, r7, r4
 808c882:	da03      	bge.n	808c88c <strftime+0x638>
 808c884:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
 808c888:	f141 33ff 	adc.w	r3, r1, #4294967295
 808c88c:	0891      	lsrs	r1, r2, #2
 808c88e:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
 808c892:	109b      	asrs	r3, r3, #2
 808c894:	9104      	str	r1, [sp, #16]
 808c896:	9305      	str	r3, [sp, #20]
 808c898:	f10e 31ff 	add.w	r1, lr, #4294967295
 808c89c:	2364      	movs	r3, #100	; 0x64
 808c89e:	fb91 f1f3 	sdiv	r1, r1, r3
 808c8a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 808c8a6:	1a52      	subs	r2, r2, r1
 808c8a8:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
 808c8ac:	f20e 102b 	addw	r0, lr, #299	; 0x12b
 808c8b0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 808c8b4:	fb90 f1f1 	sdiv	r1, r0, r1
 808c8b8:	1852      	adds	r2, r2, r1
 808c8ba:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 808c8be:	f240 116d 	movw	r1, #365	; 0x16d
 808c8c2:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
 808c8c6:	fb01 fe0e 	mul.w	lr, r1, lr
 808c8ca:	69e9      	ldr	r1, [r5, #28]
 808c8cc:	eb12 020e 	adds.w	r2, r2, lr
 808c8d0:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
 808c8d4:	1852      	adds	r2, r2, r1
 808c8d6:	f04f 0e18 	mov.w	lr, #24
 808c8da:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 808c8de:	fba2 010e 	umull	r0, r1, r2, lr
 808c8e2:	fb0e 1103 	mla	r1, lr, r3, r1
 808c8e6:	68ab      	ldr	r3, [r5, #8]
 808c8e8:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
 808c8ec:	18c0      	adds	r0, r0, r3
 808c8ee:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 808c8f2:	fba0 230e 	umull	r2, r3, r0, lr
 808c8f6:	fb0e 3301 	mla	r3, lr, r1, r3
 808c8fa:	6869      	ldr	r1, [r5, #4]
 808c8fc:	1852      	adds	r2, r2, r1
 808c8fe:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 808c902:	fba2 010e 	umull	r0, r1, r2, lr
 808c906:	fb0e 1103 	mla	r1, lr, r3, r1
 808c90a:	682b      	ldr	r3, [r5, #0]
 808c90c:	4a67      	ldr	r2, [pc, #412]	; (808caac <strftime+0x858>)
 808c90e:	18c0      	adds	r0, r0, r3
 808c910:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 808c914:	ebb0 0008 	subs.w	r0, r0, r8
 808c918:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
 808c91c:	e9cd 0100 	strd	r0, r1, [sp]
 808c920:	4661      	mov	r1, ip
 808c922:	4650      	mov	r0, sl
 808c924:	f7fb fe64 	bl	80885f0 <sniprintf>
 808c928:	e5f9      	b.n	808c51e <strftime+0x2ca>
 808c92a:	682b      	ldr	r3, [r5, #0]
 808c92c:	e07e      	b.n	808ca2c <strftime+0x7d8>
 808c92e:	9b02      	ldr	r3, [sp, #8]
 808c930:	429c      	cmp	r4, r3
 808c932:	f080 8139 	bcs.w	808cba8 <strftime+0x954>
 808c936:	2309      	movs	r3, #9
 808c938:	e129      	b.n	808cb8e <strftime+0x93a>
 808c93a:	682b      	ldr	r3, [r5, #0]
 808c93c:	4a5c      	ldr	r2, [pc, #368]	; (808cab0 <strftime+0x85c>)
 808c93e:	9301      	str	r3, [sp, #4]
 808c940:	686b      	ldr	r3, [r5, #4]
 808c942:	9300      	str	r3, [sp, #0]
 808c944:	68ab      	ldr	r3, [r5, #8]
 808c946:	1b31      	subs	r1, r6, r4
 808c948:	1938      	adds	r0, r7, r4
 808c94a:	e60e      	b.n	808c56a <strftime+0x316>
 808c94c:	9b02      	ldr	r3, [sp, #8]
 808c94e:	429c      	cmp	r4, r3
 808c950:	f080 812a 	bcs.w	808cba8 <strftime+0x954>
 808c954:	69ab      	ldr	r3, [r5, #24]
 808c956:	1c62      	adds	r2, r4, #1
 808c958:	b90b      	cbnz	r3, 808c95e <strftime+0x70a>
 808c95a:	2337      	movs	r3, #55	; 0x37
 808c95c:	e000      	b.n	808c960 <strftime+0x70c>
 808c95e:	3330      	adds	r3, #48	; 0x30
 808c960:	553b      	strb	r3, [r7, r4]
 808c962:	4614      	mov	r4, r2
 808c964:	e115      	b.n	808cb92 <strftime+0x93e>
 808c966:	69eb      	ldr	r3, [r5, #28]
 808c968:	69aa      	ldr	r2, [r5, #24]
 808c96a:	3307      	adds	r3, #7
 808c96c:	1a9b      	subs	r3, r3, r2
 808c96e:	2207      	movs	r2, #7
 808c970:	fb93 f3f2 	sdiv	r3, r3, r2
 808c974:	e05a      	b.n	808ca2c <strftime+0x7d8>
 808c976:	4628      	mov	r0, r5
 808c978:	f7ff fc0b 	bl	808c192 <iso_year_adjust>
 808c97c:	69aa      	ldr	r2, [r5, #24]
 808c97e:	b10a      	cbz	r2, 808c984 <strftime+0x730>
 808c980:	1e53      	subs	r3, r2, #1
 808c982:	e000      	b.n	808c986 <strftime+0x732>
 808c984:	2306      	movs	r3, #6
 808c986:	2800      	cmp	r0, #0
 808c988:	dc2f      	bgt.n	808c9ea <strftime+0x796>
 808c98a:	69ea      	ldr	r2, [r5, #28]
 808c98c:	d101      	bne.n	808c992 <strftime+0x73e>
 808c98e:	320a      	adds	r2, #10
 808c990:	e03b      	b.n	808ca0a <strftime+0x7b6>
 808c992:	f240 716b 	movw	r1, #1899	; 0x76b
 808c996:	1a9a      	subs	r2, r3, r2
 808c998:	696b      	ldr	r3, [r5, #20]
 808c99a:	2b00      	cmp	r3, #0
 808c99c:	bfb4      	ite	lt
 808c99e:	4608      	movlt	r0, r1
 808c9a0:	f06f 0064 	mvnge.w	r0, #100	; 0x64
 808c9a4:	4418      	add	r0, r3
 808c9a6:	0781      	lsls	r1, r0, #30
 808c9a8:	d107      	bne.n	808c9ba <strftime+0x766>
 808c9aa:	f04f 0e64 	mov.w	lr, #100	; 0x64
 808c9ae:	4601      	mov	r1, r0
 808c9b0:	fb90 f0fe 	sdiv	r0, r0, lr
 808c9b4:	fb0e 1110 	mls	r1, lr, r0, r1
 808c9b8:	b981      	cbnz	r1, 808c9dc <strftime+0x788>
 808c9ba:	f240 716b 	movw	r1, #1899	; 0x76b
 808c9be:	2b00      	cmp	r3, #0
 808c9c0:	bfa8      	it	ge
 808c9c2:	f06f 0164 	mvnge.w	r1, #100	; 0x64
 808c9c6:	4419      	add	r1, r3
 808c9c8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 808c9cc:	fb91 f0f3 	sdiv	r0, r1, r3
 808c9d0:	fb03 1110 	mls	r1, r3, r0, r1
 808c9d4:	fab1 f181 	clz	r1, r1
 808c9d8:	0949      	lsrs	r1, r1, #5
 808c9da:	e000      	b.n	808c9de <strftime+0x78a>
 808c9dc:	2101      	movs	r1, #1
 808c9de:	1a52      	subs	r2, r2, r1
 808c9e0:	2a05      	cmp	r2, #5
 808c9e2:	bfb4      	ite	lt
 808c9e4:	2335      	movlt	r3, #53	; 0x35
 808c9e6:	2334      	movge	r3, #52	; 0x34
 808c9e8:	e020      	b.n	808ca2c <strftime+0x7d8>
 808c9ea:	2301      	movs	r3, #1
 808c9ec:	e01e      	b.n	808ca2c <strftime+0x7d8>
 808c9ee:	9b02      	ldr	r3, [sp, #8]
 808c9f0:	429c      	cmp	r4, r3
 808c9f2:	f080 80d9 	bcs.w	808cba8 <strftime+0x954>
 808c9f6:	69ab      	ldr	r3, [r5, #24]
 808c9f8:	3330      	adds	r3, #48	; 0x30
 808c9fa:	e0c8      	b.n	808cb8e <strftime+0x93a>
 808c9fc:	69aa      	ldr	r2, [r5, #24]
 808c9fe:	b10a      	cbz	r2, 808ca04 <strftime+0x7b0>
 808ca00:	1e53      	subs	r3, r2, #1
 808ca02:	e000      	b.n	808ca06 <strftime+0x7b2>
 808ca04:	2306      	movs	r3, #6
 808ca06:	69ea      	ldr	r2, [r5, #28]
 808ca08:	3207      	adds	r2, #7
 808ca0a:	1ad2      	subs	r2, r2, r3
 808ca0c:	2307      	movs	r3, #7
 808ca0e:	fb92 f3f3 	sdiv	r3, r2, r3
 808ca12:	e00b      	b.n	808ca2c <strftime+0x7d8>
 808ca14:	6968      	ldr	r0, [r5, #20]
 808ca16:	2800      	cmp	r0, #0
 808ca18:	da03      	bge.n	808ca22 <strftime+0x7ce>
 808ca1a:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808ca1e:	f001 fa9b 	bl	808df58 <abs>
 808ca22:	2364      	movs	r3, #100	; 0x64
 808ca24:	fb90 f2f3 	sdiv	r2, r0, r3
 808ca28:	fb02 0313 	mls	r3, r2, r3, r0
 808ca2c:	4a21      	ldr	r2, [pc, #132]	; (808cab4 <strftime+0x860>)
 808ca2e:	e572      	b.n	808c516 <strftime+0x2c2>
 808ca30:	696b      	ldr	r3, [r5, #20]
 808ca32:	4a21      	ldr	r2, [pc, #132]	; (808cab8 <strftime+0x864>)
 808ca34:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
 808ca38:	4293      	cmp	r3, r2
 808ca3a:	da05      	bge.n	808ca48 <strftime+0x7f4>
 808ca3c:	232d      	movs	r3, #45	; 0x2d
 808ca3e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 808ca42:	f1cb 0b00 	rsb	fp, fp, #0
 808ca46:	e008      	b.n	808ca5a <strftime+0x806>
 808ca48:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808ca4c:	d10d      	bne.n	808ca6a <strftime+0x816>
 808ca4e:	f242 730f 	movw	r3, #9999	; 0x270f
 808ca52:	459b      	cmp	fp, r3
 808ca54:	d911      	bls.n	808ca7a <strftime+0x826>
 808ca56:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 808ca5a:	f1b8 0f00 	cmp.w	r8, #0
 808ca5e:	d001      	beq.n	808ca64 <strftime+0x810>
 808ca60:	f108 38ff 	add.w	r8, r8, #4294967295
 808ca64:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 808ca68:	e000      	b.n	808ca6c <strftime+0x818>
 808ca6a:	ab0a      	add	r3, sp, #40	; 0x28
 808ca6c:	2225      	movs	r2, #37	; 0x25
 808ca6e:	701a      	strb	r2, [r3, #0]
 808ca70:	f1ba 0f00 	cmp.w	sl, #0
 808ca74:	d108      	bne.n	808ca88 <strftime+0x834>
 808ca76:	1c58      	adds	r0, r3, #1
 808ca78:	e009      	b.n	808ca8e <strftime+0x83a>
 808ca7a:	f1b8 0f00 	cmp.w	r8, #0
 808ca7e:	d1f4      	bne.n	808ca6a <strftime+0x816>
 808ca80:	2325      	movs	r3, #37	; 0x25
 808ca82:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 808ca86:	ab0a      	add	r3, sp, #40	; 0x28
 808ca88:	2230      	movs	r2, #48	; 0x30
 808ca8a:	1c98      	adds	r0, r3, #2
 808ca8c:	705a      	strb	r2, [r3, #1]
 808ca8e:	490b      	ldr	r1, [pc, #44]	; (808cabc <strftime+0x868>)
 808ca90:	f7ff fb5c 	bl	808c14c <strcpy>
 808ca94:	f8cd b000 	str.w	fp, [sp]
 808ca98:	4643      	mov	r3, r8
 808ca9a:	aa0a      	add	r2, sp, #40	; 0x28
 808ca9c:	1b31      	subs	r1, r6, r4
 808ca9e:	1938      	adds	r0, r7, r4
 808caa0:	e03f      	b.n	808cb22 <strftime+0x8ce>
 808caa2:	bf00      	nop
 808caa4:	200000dc 	.word	0x200000dc
 808caa8:	08091ca7 	.word	0x08091ca7
 808caac:	08091c9d 	.word	0x08091c9d
 808cab0:	08091ca2 	.word	0x08091ca2
 808cab4:	08091c83 	.word	0x08091c83
 808cab8:	fffff894 	.word	0xfffff894
 808cabc:	08091c94 	.word	0x08091c94
 808cac0:	6a2b      	ldr	r3, [r5, #32]
 808cac2:	2b00      	cmp	r3, #0
 808cac4:	db65      	blt.n	808cb92 <strftime+0x93e>
 808cac6:	f001 f8bf 	bl	808dc48 <__tz_lock>
 808caca:	9b06      	ldr	r3, [sp, #24]
 808cacc:	b91b      	cbnz	r3, 808cad6 <strftime+0x882>
 808cace:	f001 f8bd 	bl	808dc4c <_tzset_unlocked>
 808cad2:	2301      	movs	r3, #1
 808cad4:	9306      	str	r3, [sp, #24]
 808cad6:	f001 fda5 	bl	808e624 <__gettzinfo>
 808cada:	6a2b      	ldr	r3, [r5, #32]
 808cadc:	221c      	movs	r2, #28
 808cade:	2b00      	cmp	r3, #0
 808cae0:	bfd4      	ite	le
 808cae2:	2300      	movle	r3, #0
 808cae4:	2301      	movgt	r3, #1
 808cae6:	fb02 0003 	mla	r0, r2, r3, r0
 808caea:	6a03      	ldr	r3, [r0, #32]
 808caec:	eb07 0a04 	add.w	sl, r7, r4
 808caf0:	f1c3 0800 	rsb	r8, r3, #0
 808caf4:	f001 f8a9 	bl	808dc4a <__tz_unlock>
 808caf8:	233c      	movs	r3, #60	; 0x3c
 808cafa:	fb98 f0f3 	sdiv	r0, r8, r3
 808cafe:	9307      	str	r3, [sp, #28]
 808cb00:	f001 fe2a 	bl	808e758 <labs>
 808cb04:	9b07      	ldr	r3, [sp, #28]
 808cb06:	ebc4 0b06 	rsb	fp, r4, r6
 808cb0a:	fb90 f2f3 	sdiv	r2, r0, r3
 808cb0e:	fb02 0013 	mls	r0, r2, r3, r0
 808cb12:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808cb16:	9000      	str	r0, [sp, #0]
 808cb18:	fb98 f3f3 	sdiv	r3, r8, r3
 808cb1c:	4659      	mov	r1, fp
 808cb1e:	4650      	mov	r0, sl
 808cb20:	4a24      	ldr	r2, [pc, #144]	; (808cbb4 <strftime+0x960>)
 808cb22:	f7fb fd65 	bl	80885f0 <sniprintf>
 808cb26:	e4fa      	b.n	808c51e <strftime+0x2ca>
 808cb28:	4404      	add	r4, r0
 808cb2a:	42a6      	cmp	r6, r4
 808cb2c:	d831      	bhi.n	808cb92 <strftime+0x93e>
 808cb2e:	e03b      	b.n	808cba8 <strftime+0x954>
 808cb30:	6a2b      	ldr	r3, [r5, #32]
 808cb32:	2b00      	cmp	r3, #0
 808cb34:	db2d      	blt.n	808cb92 <strftime+0x93e>
 808cb36:	f001 f887 	bl	808dc48 <__tz_lock>
 808cb3a:	9b06      	ldr	r3, [sp, #24]
 808cb3c:	b91b      	cbnz	r3, 808cb46 <strftime+0x8f2>
 808cb3e:	f001 f885 	bl	808dc4c <_tzset_unlocked>
 808cb42:	2301      	movs	r3, #1
 808cb44:	9306      	str	r3, [sp, #24]
 808cb46:	6a2b      	ldr	r3, [r5, #32]
 808cb48:	4a1b      	ldr	r2, [pc, #108]	; (808cbb8 <strftime+0x964>)
 808cb4a:	2b00      	cmp	r3, #0
 808cb4c:	bfd4      	ite	le
 808cb4e:	2300      	movle	r3, #0
 808cb50:	2301      	movgt	r3, #1
 808cb52:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808cb56:	4640      	mov	r0, r8
 808cb58:	f000 f830 	bl	808cbbc <strlen>
 808cb5c:	f108 38ff 	add.w	r8, r8, #4294967295
 808cb60:	193b      	adds	r3, r7, r4
 808cb62:	4420      	add	r0, r4
 808cb64:	4284      	cmp	r4, r0
 808cb66:	d00b      	beq.n	808cb80 <strftime+0x92c>
 808cb68:	9a02      	ldr	r2, [sp, #8]
 808cb6a:	4294      	cmp	r4, r2
 808cb6c:	d205      	bcs.n	808cb7a <strftime+0x926>
 808cb6e:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808cb72:	3401      	adds	r4, #1
 808cb74:	f803 2b01 	strb.w	r2, [r3], #1
 808cb78:	e7f4      	b.n	808cb64 <strftime+0x910>
 808cb7a:	f001 f866 	bl	808dc4a <__tz_unlock>
 808cb7e:	e013      	b.n	808cba8 <strftime+0x954>
 808cb80:	f001 f863 	bl	808dc4a <__tz_unlock>
 808cb84:	e005      	b.n	808cb92 <strftime+0x93e>
 808cb86:	9b02      	ldr	r3, [sp, #8]
 808cb88:	429c      	cmp	r4, r3
 808cb8a:	d20d      	bcs.n	808cba8 <strftime+0x954>
 808cb8c:	2325      	movs	r3, #37	; 0x25
 808cb8e:	553b      	strb	r3, [r7, r4]
 808cb90:	3401      	adds	r4, #1
 808cb92:	f899 3000 	ldrb.w	r3, [r9]
 808cb96:	b11b      	cbz	r3, 808cba0 <strftime+0x94c>
 808cb98:	f109 0901 	add.w	r9, r9, #1
 808cb9c:	f7ff bb69 	b.w	808c272 <strftime+0x1e>
 808cba0:	b126      	cbz	r6, 808cbac <strftime+0x958>
 808cba2:	2300      	movs	r3, #0
 808cba4:	553b      	strb	r3, [r7, r4]
 808cba6:	e001      	b.n	808cbac <strftime+0x958>
 808cba8:	2000      	movs	r0, #0
 808cbaa:	e000      	b.n	808cbae <strftime+0x95a>
 808cbac:	4620      	mov	r0, r4
 808cbae:	b013      	add	sp, #76	; 0x4c
 808cbb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808cbb4:	08091cb1 	.word	0x08091cb1
 808cbb8:	2000017c 	.word	0x2000017c

0808cbbc <strlen>:
 808cbbc:	4603      	mov	r3, r0
 808cbbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 808cbc2:	2a00      	cmp	r2, #0
 808cbc4:	d1fb      	bne.n	808cbbe <strlen+0x2>
 808cbc6:	1a18      	subs	r0, r3, r0
 808cbc8:	3801      	subs	r0, #1
 808cbca:	4770      	bx	lr

0808cbcc <strncmp>:
 808cbcc:	b530      	push	{r4, r5, lr}
 808cbce:	b182      	cbz	r2, 808cbf2 <strncmp+0x26>
 808cbd0:	1e45      	subs	r5, r0, #1
 808cbd2:	3901      	subs	r1, #1
 808cbd4:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 808cbd8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808cbdc:	42a3      	cmp	r3, r4
 808cbde:	d106      	bne.n	808cbee <strncmp+0x22>
 808cbe0:	43ec      	mvns	r4, r5
 808cbe2:	4414      	add	r4, r2
 808cbe4:	42e0      	cmn	r0, r4
 808cbe6:	d001      	beq.n	808cbec <strncmp+0x20>
 808cbe8:	2b00      	cmp	r3, #0
 808cbea:	d1f3      	bne.n	808cbd4 <strncmp+0x8>
 808cbec:	461c      	mov	r4, r3
 808cbee:	1b18      	subs	r0, r3, r4
 808cbf0:	bd30      	pop	{r4, r5, pc}
 808cbf2:	4610      	mov	r0, r2
 808cbf4:	bd30      	pop	{r4, r5, pc}

0808cbf6 <strncpy>:
 808cbf6:	4603      	mov	r3, r0
 808cbf8:	b510      	push	{r4, lr}
 808cbfa:	b142      	cbz	r2, 808cc0e <strncpy+0x18>
 808cbfc:	f811 4b01 	ldrb.w	r4, [r1], #1
 808cc00:	3a01      	subs	r2, #1
 808cc02:	f803 4b01 	strb.w	r4, [r3], #1
 808cc06:	2c00      	cmp	r4, #0
 808cc08:	d1f7      	bne.n	808cbfa <strncpy+0x4>
 808cc0a:	441a      	add	r2, r3
 808cc0c:	e000      	b.n	808cc10 <strncpy+0x1a>
 808cc0e:	bd10      	pop	{r4, pc}
 808cc10:	4293      	cmp	r3, r2
 808cc12:	d002      	beq.n	808cc1a <strncpy+0x24>
 808cc14:	f803 4b01 	strb.w	r4, [r3], #1
 808cc18:	e7fa      	b.n	808cc10 <strncpy+0x1a>
 808cc1a:	bd10      	pop	{r4, pc}

0808cc1c <strstr>:
 808cc1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808cc1e:	7803      	ldrb	r3, [r0, #0]
 808cc20:	b963      	cbnz	r3, 808cc3c <strstr+0x20>
 808cc22:	780b      	ldrb	r3, [r1, #0]
 808cc24:	2b00      	cmp	r3, #0
 808cc26:	bf18      	it	ne
 808cc28:	2000      	movne	r0, #0
 808cc2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808cc2c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 808cc30:	b162      	cbz	r2, 808cc4c <strstr+0x30>
 808cc32:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 808cc36:	4630      	mov	r0, r6
 808cc38:	4297      	cmp	r7, r2
 808cc3a:	d0f7      	beq.n	808cc2c <strstr+0x10>
 808cc3c:	4603      	mov	r3, r0
 808cc3e:	1c46      	adds	r6, r0, #1
 808cc40:	7800      	ldrb	r0, [r0, #0]
 808cc42:	b110      	cbz	r0, 808cc4a <strstr+0x2e>
 808cc44:	1e4d      	subs	r5, r1, #1
 808cc46:	1e5c      	subs	r4, r3, #1
 808cc48:	e7f0      	b.n	808cc2c <strstr+0x10>
 808cc4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808cc4c:	4618      	mov	r0, r3
 808cc4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808cc50 <sulp>:
 808cc50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808cc54:	460f      	mov	r7, r1
 808cc56:	4690      	mov	r8, r2
 808cc58:	f002 f848 	bl	808ecec <__ulp>
 808cc5c:	4604      	mov	r4, r0
 808cc5e:	460d      	mov	r5, r1
 808cc60:	f1b8 0f00 	cmp.w	r8, #0
 808cc64:	d011      	beq.n	808cc8a <sulp+0x3a>
 808cc66:	f3c7 530a 	ubfx	r3, r7, #20, #11
 808cc6a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808cc6e:	2b00      	cmp	r3, #0
 808cc70:	dd0b      	ble.n	808cc8a <sulp+0x3a>
 808cc72:	051b      	lsls	r3, r3, #20
 808cc74:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 808cc78:	2400      	movs	r4, #0
 808cc7a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 808cc7e:	4622      	mov	r2, r4
 808cc80:	462b      	mov	r3, r5
 808cc82:	f7fe f859 	bl	808ad38 <__aeabi_dmul>
 808cc86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808cc8a:	4620      	mov	r0, r4
 808cc8c:	4629      	mov	r1, r5
 808cc8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808cc92:	0000      	movs	r0, r0
 808cc94:	0000      	movs	r0, r0
	...

0808cc98 <_strtod_r>:
 808cc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808cc9c:	4682      	mov	sl, r0
 808cc9e:	460c      	mov	r4, r1
 808cca0:	b09d      	sub	sp, #116	; 0x74
 808cca2:	2300      	movs	r3, #0
 808cca4:	9213      	str	r2, [sp, #76]	; 0x4c
 808cca6:	9318      	str	r3, [sp, #96]	; 0x60
 808cca8:	f04f 0800 	mov.w	r8, #0
 808ccac:	f04f 0900 	mov.w	r9, #0
 808ccb0:	9117      	str	r1, [sp, #92]	; 0x5c
 808ccb2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808ccb4:	781a      	ldrb	r2, [r3, #0]
 808ccb6:	2a0d      	cmp	r2, #13
 808ccb8:	d805      	bhi.n	808ccc6 <_strtod_r+0x2e>
 808ccba:	2a09      	cmp	r2, #9
 808ccbc:	d213      	bcs.n	808cce6 <_strtod_r+0x4e>
 808ccbe:	2a00      	cmp	r2, #0
 808ccc0:	f000 81ad 	beq.w	808d01e <_strtod_r+0x386>
 808ccc4:	e012      	b.n	808ccec <_strtod_r+0x54>
 808ccc6:	2a2b      	cmp	r2, #43	; 0x2b
 808ccc8:	d004      	beq.n	808ccd4 <_strtod_r+0x3c>
 808ccca:	2a2d      	cmp	r2, #45	; 0x2d
 808cccc:	d004      	beq.n	808ccd8 <_strtod_r+0x40>
 808ccce:	2a20      	cmp	r2, #32
 808ccd0:	d10c      	bne.n	808ccec <_strtod_r+0x54>
 808ccd2:	e008      	b.n	808cce6 <_strtod_r+0x4e>
 808ccd4:	2200      	movs	r2, #0
 808ccd6:	e000      	b.n	808ccda <_strtod_r+0x42>
 808ccd8:	2201      	movs	r2, #1
 808ccda:	920c      	str	r2, [sp, #48]	; 0x30
 808ccdc:	1c5a      	adds	r2, r3, #1
 808ccde:	9217      	str	r2, [sp, #92]	; 0x5c
 808cce0:	785b      	ldrb	r3, [r3, #1]
 808cce2:	b92b      	cbnz	r3, 808ccf0 <_strtod_r+0x58>
 808cce4:	e19b      	b.n	808d01e <_strtod_r+0x386>
 808cce6:	3301      	adds	r3, #1
 808cce8:	9317      	str	r3, [sp, #92]	; 0x5c
 808ccea:	e7e2      	b.n	808ccb2 <_strtod_r+0x1a>
 808ccec:	2300      	movs	r3, #0
 808ccee:	930c      	str	r3, [sp, #48]	; 0x30
 808ccf0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 808ccf2:	782b      	ldrb	r3, [r5, #0]
 808ccf4:	2b30      	cmp	r3, #48	; 0x30
 808ccf6:	d15c      	bne.n	808cdb2 <_strtod_r+0x11a>
 808ccf8:	786b      	ldrb	r3, [r5, #1]
 808ccfa:	2b58      	cmp	r3, #88	; 0x58
 808ccfc:	d001      	beq.n	808cd02 <_strtod_r+0x6a>
 808ccfe:	2b78      	cmp	r3, #120	; 0x78
 808cd00:	d14c      	bne.n	808cd9c <_strtod_r+0x104>
 808cd02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808cd04:	4aa8      	ldr	r2, [pc, #672]	; (808cfa8 <_strtod_r+0x310>)
 808cd06:	9301      	str	r3, [sp, #4]
 808cd08:	ab18      	add	r3, sp, #96	; 0x60
 808cd0a:	9300      	str	r3, [sp, #0]
 808cd0c:	a917      	add	r1, sp, #92	; 0x5c
 808cd0e:	ab19      	add	r3, sp, #100	; 0x64
 808cd10:	4650      	mov	r0, sl
 808cd12:	f001 f970 	bl	808dff6 <__gethex>
 808cd16:	f010 0607 	ands.w	r6, r0, #7
 808cd1a:	4604      	mov	r4, r0
 808cd1c:	f000 8585 	beq.w	808d82a <_strtod_r+0xb92>
 808cd20:	2e06      	cmp	r6, #6
 808cd22:	d105      	bne.n	808cd30 <_strtod_r+0x98>
 808cd24:	3501      	adds	r5, #1
 808cd26:	2300      	movs	r3, #0
 808cd28:	9517      	str	r5, [sp, #92]	; 0x5c
 808cd2a:	930c      	str	r3, [sp, #48]	; 0x30
 808cd2c:	f000 bd7d 	b.w	808d82a <_strtod_r+0xb92>
 808cd30:	9a18      	ldr	r2, [sp, #96]	; 0x60
 808cd32:	b13a      	cbz	r2, 808cd44 <_strtod_r+0xac>
 808cd34:	2135      	movs	r1, #53	; 0x35
 808cd36:	a81a      	add	r0, sp, #104	; 0x68
 808cd38:	f002 f8bf 	bl	808eeba <__copybits>
 808cd3c:	9918      	ldr	r1, [sp, #96]	; 0x60
 808cd3e:	4650      	mov	r0, sl
 808cd40:	f001 fd43 	bl	808e7ca <_Bfree>
 808cd44:	2e06      	cmp	r6, #6
 808cd46:	d822      	bhi.n	808cd8e <_strtod_r+0xf6>
 808cd48:	e8df f006 	tbb	[pc, r6]
 808cd4c:	18080d04 	.word	0x18080d04
 808cd50:	0d1d      	.short	0x0d1d
 808cd52:	04          	.byte	0x04
 808cd53:	00          	.byte	0x00
 808cd54:	f04f 0900 	mov.w	r9, #0
 808cd58:	46c8      	mov	r8, r9
 808cd5a:	e018      	b.n	808cd8e <_strtod_r+0xf6>
 808cd5c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 808cd60:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 808cd64:	e013      	b.n	808cd8e <_strtod_r+0xf6>
 808cd66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808cd68:	9a19      	ldr	r2, [sp, #100]	; 0x64
 808cd6a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 808cd6e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 808cd72:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 808cd76:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 808cd7a:	e008      	b.n	808cd8e <_strtod_r+0xf6>
 808cd7c:	f8df 922c 	ldr.w	r9, [pc, #556]	; 808cfac <_strtod_r+0x314>
 808cd80:	f04f 0800 	mov.w	r8, #0
 808cd84:	e003      	b.n	808cd8e <_strtod_r+0xf6>
 808cd86:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 808cd8a:	f04f 38ff 	mov.w	r8, #4294967295
 808cd8e:	0721      	lsls	r1, r4, #28
 808cd90:	f140 854b 	bpl.w	808d82a <_strtod_r+0xb92>
 808cd94:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 808cd98:	f000 bd47 	b.w	808d82a <_strtod_r+0xb92>
 808cd9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808cd9e:	1c5a      	adds	r2, r3, #1
 808cda0:	9217      	str	r2, [sp, #92]	; 0x5c
 808cda2:	785b      	ldrb	r3, [r3, #1]
 808cda4:	2b30      	cmp	r3, #48	; 0x30
 808cda6:	d0f9      	beq.n	808cd9c <_strtod_r+0x104>
 808cda8:	2b00      	cmp	r3, #0
 808cdaa:	f000 853e 	beq.w	808d82a <_strtod_r+0xb92>
 808cdae:	2301      	movs	r3, #1
 808cdb0:	e000      	b.n	808cdb4 <_strtod_r+0x11c>
 808cdb2:	2300      	movs	r3, #0
 808cdb4:	9305      	str	r3, [sp, #20]
 808cdb6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808cdb8:	220a      	movs	r2, #10
 808cdba:	9306      	str	r3, [sp, #24]
 808cdbc:	2300      	movs	r3, #0
 808cdbe:	469b      	mov	fp, r3
 808cdc0:	9302      	str	r3, [sp, #8]
 808cdc2:	9304      	str	r3, [sp, #16]
 808cdc4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 808cdc6:	782e      	ldrb	r6, [r5, #0]
 808cdc8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 808cdcc:	b2d9      	uxtb	r1, r3
 808cdce:	2909      	cmp	r1, #9
 808cdd0:	d811      	bhi.n	808cdf6 <_strtod_r+0x15e>
 808cdd2:	f1bb 0f08 	cmp.w	fp, #8
 808cdd6:	bfd5      	itete	le
 808cdd8:	9904      	ldrle	r1, [sp, #16]
 808cdda:	9902      	ldrgt	r1, [sp, #8]
 808cddc:	fb02 3301 	mlale	r3, r2, r1, r3
 808cde0:	fb02 3301 	mlagt	r3, r2, r1, r3
 808cde4:	f105 0501 	add.w	r5, r5, #1
 808cde8:	bfd4      	ite	le
 808cdea:	9304      	strle	r3, [sp, #16]
 808cdec:	9302      	strgt	r3, [sp, #8]
 808cdee:	f10b 0b01 	add.w	fp, fp, #1
 808cdf2:	9517      	str	r5, [sp, #92]	; 0x5c
 808cdf4:	e7e6      	b.n	808cdc4 <_strtod_r+0x12c>
 808cdf6:	4650      	mov	r0, sl
 808cdf8:	f7ff f942 	bl	808c080 <_localeconv_r>
 808cdfc:	6807      	ldr	r7, [r0, #0]
 808cdfe:	4650      	mov	r0, sl
 808ce00:	f7ff f93e 	bl	808c080 <_localeconv_r>
 808ce04:	6800      	ldr	r0, [r0, #0]
 808ce06:	f7ff fed9 	bl	808cbbc <strlen>
 808ce0a:	4639      	mov	r1, r7
 808ce0c:	4602      	mov	r2, r0
 808ce0e:	4628      	mov	r0, r5
 808ce10:	f7ff fedc 	bl	808cbcc <strncmp>
 808ce14:	4607      	mov	r7, r0
 808ce16:	b128      	cbz	r0, 808ce24 <_strtod_r+0x18c>
 808ce18:	2000      	movs	r0, #0
 808ce1a:	4633      	mov	r3, r6
 808ce1c:	465d      	mov	r5, fp
 808ce1e:	4602      	mov	r2, r0
 808ce20:	4601      	mov	r1, r0
 808ce22:	e05a      	b.n	808ceda <_strtod_r+0x242>
 808ce24:	4650      	mov	r0, sl
 808ce26:	f7ff f92b 	bl	808c080 <_localeconv_r>
 808ce2a:	6800      	ldr	r0, [r0, #0]
 808ce2c:	f7ff fec6 	bl	808cbbc <strlen>
 808ce30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808ce32:	181a      	adds	r2, r3, r0
 808ce34:	9217      	str	r2, [sp, #92]	; 0x5c
 808ce36:	5c1b      	ldrb	r3, [r3, r0]
 808ce38:	f1bb 0f00 	cmp.w	fp, #0
 808ce3c:	d145      	bne.n	808ceca <_strtod_r+0x232>
 808ce3e:	4658      	mov	r0, fp
 808ce40:	2b30      	cmp	r3, #48	; 0x30
 808ce42:	d105      	bne.n	808ce50 <_strtod_r+0x1b8>
 808ce44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808ce46:	3001      	adds	r0, #1
 808ce48:	1c5a      	adds	r2, r3, #1
 808ce4a:	9217      	str	r2, [sp, #92]	; 0x5c
 808ce4c:	785b      	ldrb	r3, [r3, #1]
 808ce4e:	e7f7      	b.n	808ce40 <_strtod_r+0x1a8>
 808ce50:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 808ce54:	2a08      	cmp	r2, #8
 808ce56:	d846      	bhi.n	808cee6 <_strtod_r+0x24e>
 808ce58:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 808ce5a:	9206      	str	r2, [sp, #24]
 808ce5c:	4602      	mov	r2, r0
 808ce5e:	2000      	movs	r0, #0
 808ce60:	4605      	mov	r5, r0
 808ce62:	3b30      	subs	r3, #48	; 0x30
 808ce64:	f100 0101 	add.w	r1, r0, #1
 808ce68:	d029      	beq.n	808cebe <_strtod_r+0x226>
 808ce6a:	440a      	add	r2, r1
 808ce6c:	4629      	mov	r1, r5
 808ce6e:	eb05 0c00 	add.w	ip, r5, r0
 808ce72:	260a      	movs	r6, #10
 808ce74:	4561      	cmp	r1, ip
 808ce76:	d00f      	beq.n	808ce98 <_strtod_r+0x200>
 808ce78:	3101      	adds	r1, #1
 808ce7a:	f101 3eff 	add.w	lr, r1, #4294967295
 808ce7e:	f1be 0f08 	cmp.w	lr, #8
 808ce82:	dc03      	bgt.n	808ce8c <_strtod_r+0x1f4>
 808ce84:	9f04      	ldr	r7, [sp, #16]
 808ce86:	4377      	muls	r7, r6
 808ce88:	9704      	str	r7, [sp, #16]
 808ce8a:	e7f3      	b.n	808ce74 <_strtod_r+0x1dc>
 808ce8c:	2910      	cmp	r1, #16
 808ce8e:	bfde      	ittt	le
 808ce90:	9f02      	ldrle	r7, [sp, #8]
 808ce92:	4377      	mulle	r7, r6
 808ce94:	9702      	strle	r7, [sp, #8]
 808ce96:	e7ed      	b.n	808ce74 <_strtod_r+0x1dc>
 808ce98:	4428      	add	r0, r5
 808ce9a:	2808      	cmp	r0, #8
 808ce9c:	f100 0501 	add.w	r5, r0, #1
 808cea0:	dc05      	bgt.n	808ceae <_strtod_r+0x216>
 808cea2:	9804      	ldr	r0, [sp, #16]
 808cea4:	210a      	movs	r1, #10
 808cea6:	fb01 3300 	mla	r3, r1, r0, r3
 808ceaa:	9304      	str	r3, [sp, #16]
 808ceac:	e006      	b.n	808cebc <_strtod_r+0x224>
 808ceae:	2d10      	cmp	r5, #16
 808ceb0:	bfdf      	itttt	le
 808ceb2:	9802      	ldrle	r0, [sp, #8]
 808ceb4:	210a      	movle	r1, #10
 808ceb6:	fb01 3300 	mlale	r3, r1, r0, r3
 808ceba:	9302      	strle	r3, [sp, #8]
 808cebc:	2100      	movs	r1, #0
 808cebe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808cec0:	1c58      	adds	r0, r3, #1
 808cec2:	9017      	str	r0, [sp, #92]	; 0x5c
 808cec4:	785b      	ldrb	r3, [r3, #1]
 808cec6:	4608      	mov	r0, r1
 808cec8:	e002      	b.n	808ced0 <_strtod_r+0x238>
 808ceca:	465d      	mov	r5, fp
 808cecc:	4638      	mov	r0, r7
 808cece:	463a      	mov	r2, r7
 808ced0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 808ced4:	2909      	cmp	r1, #9
 808ced6:	d9c4      	bls.n	808ce62 <_strtod_r+0x1ca>
 808ced8:	2101      	movs	r1, #1
 808ceda:	2b65      	cmp	r3, #101	; 0x65
 808cedc:	d001      	beq.n	808cee2 <_strtod_r+0x24a>
 808cede:	2b45      	cmp	r3, #69	; 0x45
 808cee0:	d14f      	bne.n	808cf82 <_strtod_r+0x2ea>
 808cee2:	b96d      	cbnz	r5, 808cf00 <_strtod_r+0x268>
 808cee4:	e004      	b.n	808cef0 <_strtod_r+0x258>
 808cee6:	2b65      	cmp	r3, #101	; 0x65
 808cee8:	f040 84ad 	bne.w	808d846 <_strtod_r+0xbae>
 808ceec:	2200      	movs	r2, #0
 808ceee:	2101      	movs	r1, #1
 808cef0:	b928      	cbnz	r0, 808cefe <_strtod_r+0x266>
 808cef2:	9b05      	ldr	r3, [sp, #20]
 808cef4:	2b00      	cmp	r3, #0
 808cef6:	f000 8092 	beq.w	808d01e <_strtod_r+0x386>
 808cefa:	4605      	mov	r5, r0
 808cefc:	e000      	b.n	808cf00 <_strtod_r+0x268>
 808cefe:	2500      	movs	r5, #0
 808cf00:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 808cf02:	1c63      	adds	r3, r4, #1
 808cf04:	9317      	str	r3, [sp, #92]	; 0x5c
 808cf06:	7863      	ldrb	r3, [r4, #1]
 808cf08:	2b2b      	cmp	r3, #43	; 0x2b
 808cf0a:	d006      	beq.n	808cf1a <_strtod_r+0x282>
 808cf0c:	2b2d      	cmp	r3, #45	; 0x2d
 808cf0e:	d002      	beq.n	808cf16 <_strtod_r+0x27e>
 808cf10:	2600      	movs	r6, #0
 808cf12:	9603      	str	r6, [sp, #12]
 808cf14:	e006      	b.n	808cf24 <_strtod_r+0x28c>
 808cf16:	2301      	movs	r3, #1
 808cf18:	e000      	b.n	808cf1c <_strtod_r+0x284>
 808cf1a:	2300      	movs	r3, #0
 808cf1c:	9303      	str	r3, [sp, #12]
 808cf1e:	1ca3      	adds	r3, r4, #2
 808cf20:	9317      	str	r3, [sp, #92]	; 0x5c
 808cf22:	78a3      	ldrb	r3, [r4, #2]
 808cf24:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 808cf28:	2e09      	cmp	r6, #9
 808cf2a:	d829      	bhi.n	808cf80 <_strtod_r+0x2e8>
 808cf2c:	2b30      	cmp	r3, #48	; 0x30
 808cf2e:	d104      	bne.n	808cf3a <_strtod_r+0x2a2>
 808cf30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808cf32:	1c5e      	adds	r6, r3, #1
 808cf34:	9617      	str	r6, [sp, #92]	; 0x5c
 808cf36:	785b      	ldrb	r3, [r3, #1]
 808cf38:	e7f8      	b.n	808cf2c <_strtod_r+0x294>
 808cf3a:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 808cf3e:	2e08      	cmp	r6, #8
 808cf40:	d81f      	bhi.n	808cf82 <_strtod_r+0x2ea>
 808cf42:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 808cf46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808cf48:	461f      	mov	r7, r3
 808cf4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808cf4c:	1c5e      	adds	r6, r3, #1
 808cf4e:	9617      	str	r6, [sp, #92]	; 0x5c
 808cf50:	785b      	ldrb	r3, [r3, #1]
 808cf52:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 808cf56:	f1bc 0f09 	cmp.w	ip, #9
 808cf5a:	d805      	bhi.n	808cf68 <_strtod_r+0x2d0>
 808cf5c:	260a      	movs	r6, #10
 808cf5e:	fb06 3e0e 	mla	lr, r6, lr, r3
 808cf62:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 808cf66:	e7f0      	b.n	808cf4a <_strtod_r+0x2b2>
 808cf68:	1bf6      	subs	r6, r6, r7
 808cf6a:	2e08      	cmp	r6, #8
 808cf6c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 808cf70:	dc02      	bgt.n	808cf78 <_strtod_r+0x2e0>
 808cf72:	4576      	cmp	r6, lr
 808cf74:	bfa8      	it	ge
 808cf76:	4676      	movge	r6, lr
 808cf78:	9f03      	ldr	r7, [sp, #12]
 808cf7a:	b11f      	cbz	r7, 808cf84 <_strtod_r+0x2ec>
 808cf7c:	4276      	negs	r6, r6
 808cf7e:	e001      	b.n	808cf84 <_strtod_r+0x2ec>
 808cf80:	9417      	str	r4, [sp, #92]	; 0x5c
 808cf82:	2600      	movs	r6, #0
 808cf84:	2d00      	cmp	r5, #0
 808cf86:	d152      	bne.n	808d02e <_strtod_r+0x396>
 808cf88:	2800      	cmp	r0, #0
 808cf8a:	f040 844e 	bne.w	808d82a <_strtod_r+0xb92>
 808cf8e:	9a05      	ldr	r2, [sp, #20]
 808cf90:	2a00      	cmp	r2, #0
 808cf92:	f040 844a 	bne.w	808d82a <_strtod_r+0xb92>
 808cf96:	2900      	cmp	r1, #0
 808cf98:	d141      	bne.n	808d01e <_strtod_r+0x386>
 808cf9a:	2b4e      	cmp	r3, #78	; 0x4e
 808cf9c:	d020      	beq.n	808cfe0 <_strtod_r+0x348>
 808cf9e:	dc07      	bgt.n	808cfb0 <_strtod_r+0x318>
 808cfa0:	2b49      	cmp	r3, #73	; 0x49
 808cfa2:	d00a      	beq.n	808cfba <_strtod_r+0x322>
 808cfa4:	e03b      	b.n	808d01e <_strtod_r+0x386>
 808cfa6:	bf00      	nop
 808cfa8:	08091cc0 	.word	0x08091cc0
 808cfac:	7ff00000 	.word	0x7ff00000
 808cfb0:	2b69      	cmp	r3, #105	; 0x69
 808cfb2:	d002      	beq.n	808cfba <_strtod_r+0x322>
 808cfb4:	2b6e      	cmp	r3, #110	; 0x6e
 808cfb6:	d013      	beq.n	808cfe0 <_strtod_r+0x348>
 808cfb8:	e031      	b.n	808d01e <_strtod_r+0x386>
 808cfba:	49aa      	ldr	r1, [pc, #680]	; (808d264 <_strtod_r+0x5cc>)
 808cfbc:	a817      	add	r0, sp, #92	; 0x5c
 808cfbe:	f001 fa4b 	bl	808e458 <__match>
 808cfc2:	b360      	cbz	r0, 808d01e <_strtod_r+0x386>
 808cfc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808cfc6:	49a8      	ldr	r1, [pc, #672]	; (808d268 <_strtod_r+0x5d0>)
 808cfc8:	3b01      	subs	r3, #1
 808cfca:	a817      	add	r0, sp, #92	; 0x5c
 808cfcc:	9317      	str	r3, [sp, #92]	; 0x5c
 808cfce:	f001 fa43 	bl	808e458 <__match>
 808cfd2:	b910      	cbnz	r0, 808cfda <_strtod_r+0x342>
 808cfd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808cfd6:	3301      	adds	r3, #1
 808cfd8:	9317      	str	r3, [sp, #92]	; 0x5c
 808cfda:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 808d284 <_strtod_r+0x5ec>
 808cfde:	e01a      	b.n	808d016 <_strtod_r+0x37e>
 808cfe0:	49a2      	ldr	r1, [pc, #648]	; (808d26c <_strtod_r+0x5d4>)
 808cfe2:	a817      	add	r0, sp, #92	; 0x5c
 808cfe4:	f001 fa38 	bl	808e458 <__match>
 808cfe8:	b1c8      	cbz	r0, 808d01e <_strtod_r+0x386>
 808cfea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808cfec:	781b      	ldrb	r3, [r3, #0]
 808cfee:	2b28      	cmp	r3, #40	; 0x28
 808cff0:	d10f      	bne.n	808d012 <_strtod_r+0x37a>
 808cff2:	aa1a      	add	r2, sp, #104	; 0x68
 808cff4:	499e      	ldr	r1, [pc, #632]	; (808d270 <_strtod_r+0x5d8>)
 808cff6:	a817      	add	r0, sp, #92	; 0x5c
 808cff8:	f001 fa41 	bl	808e47e <__hexnan>
 808cffc:	2805      	cmp	r0, #5
 808cffe:	d108      	bne.n	808d012 <_strtod_r+0x37a>
 808d000:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808d002:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 808d006:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 808d00a:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 808d00e:	f000 bc0c 	b.w	808d82a <_strtod_r+0xb92>
 808d012:	f8df 9274 	ldr.w	r9, [pc, #628]	; 808d288 <_strtod_r+0x5f0>
 808d016:	f04f 0800 	mov.w	r8, #0
 808d01a:	f000 bc06 	b.w	808d82a <_strtod_r+0xb92>
 808d01e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 808d020:	9417      	str	r4, [sp, #92]	; 0x5c
 808d022:	2b00      	cmp	r3, #0
 808d024:	f000 840c 	beq.w	808d840 <_strtod_r+0xba8>
 808d028:	2300      	movs	r3, #0
 808d02a:	930c      	str	r3, [sp, #48]	; 0x30
 808d02c:	e3ff      	b.n	808d82e <_strtod_r+0xb96>
 808d02e:	462c      	mov	r4, r5
 808d030:	f1bb 0f00 	cmp.w	fp, #0
 808d034:	bf08      	it	eq
 808d036:	46ab      	moveq	fp, r5
 808d038:	9804      	ldr	r0, [sp, #16]
 808d03a:	2d10      	cmp	r5, #16
 808d03c:	bfa8      	it	ge
 808d03e:	2410      	movge	r4, #16
 808d040:	1ab7      	subs	r7, r6, r2
 808d042:	f7fd fe03 	bl	808ac4c <__aeabi_ui2d>
 808d046:	2c09      	cmp	r4, #9
 808d048:	4680      	mov	r8, r0
 808d04a:	4689      	mov	r9, r1
 808d04c:	dd13      	ble.n	808d076 <_strtod_r+0x3de>
 808d04e:	4b89      	ldr	r3, [pc, #548]	; (808d274 <_strtod_r+0x5dc>)
 808d050:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 808d054:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 808d058:	f7fd fe6e 	bl	808ad38 <__aeabi_dmul>
 808d05c:	4680      	mov	r8, r0
 808d05e:	9802      	ldr	r0, [sp, #8]
 808d060:	4689      	mov	r9, r1
 808d062:	f7fd fdf3 	bl	808ac4c <__aeabi_ui2d>
 808d066:	4602      	mov	r2, r0
 808d068:	460b      	mov	r3, r1
 808d06a:	4640      	mov	r0, r8
 808d06c:	4649      	mov	r1, r9
 808d06e:	f7fd fcb1 	bl	808a9d4 <__adddf3>
 808d072:	4680      	mov	r8, r0
 808d074:	4689      	mov	r9, r1
 808d076:	2d0f      	cmp	r5, #15
 808d078:	dc33      	bgt.n	808d0e2 <_strtod_r+0x44a>
 808d07a:	2f00      	cmp	r7, #0
 808d07c:	f000 83d5 	beq.w	808d82a <_strtod_r+0xb92>
 808d080:	dd22      	ble.n	808d0c8 <_strtod_r+0x430>
 808d082:	2f16      	cmp	r7, #22
 808d084:	dc07      	bgt.n	808d096 <_strtod_r+0x3fe>
 808d086:	4d7b      	ldr	r5, [pc, #492]	; (808d274 <_strtod_r+0x5dc>)
 808d088:	4642      	mov	r2, r8
 808d08a:	eb05 01c7 	add.w	r1, r5, r7, lsl #3
 808d08e:	464b      	mov	r3, r9
 808d090:	e9d1 0100 	ldrd	r0, r1, [r1]
 808d094:	e013      	b.n	808d0be <_strtod_r+0x426>
 808d096:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 808d09a:	429f      	cmp	r7, r3
 808d09c:	dc21      	bgt.n	808d0e2 <_strtod_r+0x44a>
 808d09e:	4c75      	ldr	r4, [pc, #468]	; (808d274 <_strtod_r+0x5dc>)
 808d0a0:	f1c5 050f 	rsb	r5, r5, #15
 808d0a4:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 808d0a8:	1b7d      	subs	r5, r7, r5
 808d0aa:	4642      	mov	r2, r8
 808d0ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 808d0b0:	464b      	mov	r3, r9
 808d0b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 808d0b6:	f7fd fe3f 	bl	808ad38 <__aeabi_dmul>
 808d0ba:	e9d4 2300 	ldrd	r2, r3, [r4]
 808d0be:	f7fd fe3b 	bl	808ad38 <__aeabi_dmul>
 808d0c2:	4680      	mov	r8, r0
 808d0c4:	4689      	mov	r9, r1
 808d0c6:	e3b0      	b.n	808d82a <_strtod_r+0xb92>
 808d0c8:	f117 0f16 	cmn.w	r7, #22
 808d0cc:	db09      	blt.n	808d0e2 <_strtod_r+0x44a>
 808d0ce:	4d69      	ldr	r5, [pc, #420]	; (808d274 <_strtod_r+0x5dc>)
 808d0d0:	4640      	mov	r0, r8
 808d0d2:	eba5 03c7 	sub.w	r3, r5, r7, lsl #3
 808d0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 808d0da:	4649      	mov	r1, r9
 808d0dc:	f7fd ff56 	bl	808af8c <__aeabi_ddiv>
 808d0e0:	e7ef      	b.n	808d0c2 <_strtod_r+0x42a>
 808d0e2:	1b2c      	subs	r4, r5, r4
 808d0e4:	443c      	add	r4, r7
 808d0e6:	2c00      	cmp	r4, #0
 808d0e8:	dd5d      	ble.n	808d1a6 <_strtod_r+0x50e>
 808d0ea:	f014 010f 	ands.w	r1, r4, #15
 808d0ee:	d00a      	beq.n	808d106 <_strtod_r+0x46e>
 808d0f0:	4b60      	ldr	r3, [pc, #384]	; (808d274 <_strtod_r+0x5dc>)
 808d0f2:	4642      	mov	r2, r8
 808d0f4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 808d0f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 808d0fc:	464b      	mov	r3, r9
 808d0fe:	f7fd fe1b 	bl	808ad38 <__aeabi_dmul>
 808d102:	4680      	mov	r8, r0
 808d104:	4689      	mov	r9, r1
 808d106:	f034 040f 	bics.w	r4, r4, #15
 808d10a:	f000 80c1 	beq.w	808d290 <_strtod_r+0x5f8>
 808d10e:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 808d112:	dd0f      	ble.n	808d134 <_strtod_r+0x49c>
 808d114:	f04f 0b00 	mov.w	fp, #0
 808d118:	f8cd b008 	str.w	fp, [sp, #8]
 808d11c:	f8cd b014 	str.w	fp, [sp, #20]
 808d120:	f8cd b010 	str.w	fp, [sp, #16]
 808d124:	2322      	movs	r3, #34	; 0x22
 808d126:	f8ca 3000 	str.w	r3, [sl]
 808d12a:	f8df 9158 	ldr.w	r9, [pc, #344]	; 808d284 <_strtod_r+0x5ec>
 808d12e:	f04f 0800 	mov.w	r8, #0
 808d132:	e189      	b.n	808d448 <_strtod_r+0x7b0>
 808d134:	4640      	mov	r0, r8
 808d136:	4649      	mov	r1, r9
 808d138:	2300      	movs	r3, #0
 808d13a:	4e4f      	ldr	r6, [pc, #316]	; (808d278 <_strtod_r+0x5e0>)
 808d13c:	1124      	asrs	r4, r4, #4
 808d13e:	9302      	str	r3, [sp, #8]
 808d140:	2c01      	cmp	r4, #1
 808d142:	dd0c      	ble.n	808d15e <_strtod_r+0x4c6>
 808d144:	07e2      	lsls	r2, r4, #31
 808d146:	d504      	bpl.n	808d152 <_strtod_r+0x4ba>
 808d148:	e9d6 2300 	ldrd	r2, r3, [r6]
 808d14c:	f7fd fdf4 	bl	808ad38 <__aeabi_dmul>
 808d150:	2301      	movs	r3, #1
 808d152:	9a02      	ldr	r2, [sp, #8]
 808d154:	1064      	asrs	r4, r4, #1
 808d156:	3201      	adds	r2, #1
 808d158:	9202      	str	r2, [sp, #8]
 808d15a:	3608      	adds	r6, #8
 808d15c:	e7f0      	b.n	808d140 <_strtod_r+0x4a8>
 808d15e:	b10b      	cbz	r3, 808d164 <_strtod_r+0x4cc>
 808d160:	4680      	mov	r8, r0
 808d162:	4689      	mov	r9, r1
 808d164:	4b44      	ldr	r3, [pc, #272]	; (808d278 <_strtod_r+0x5e0>)
 808d166:	9a02      	ldr	r2, [sp, #8]
 808d168:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 808d16c:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 808d170:	e9d1 0100 	ldrd	r0, r1, [r1]
 808d174:	4642      	mov	r2, r8
 808d176:	464b      	mov	r3, r9
 808d178:	f7fd fdde 	bl	808ad38 <__aeabi_dmul>
 808d17c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 808d180:	4689      	mov	r9, r1
 808d182:	460a      	mov	r2, r1
 808d184:	0d1b      	lsrs	r3, r3, #20
 808d186:	493d      	ldr	r1, [pc, #244]	; (808d27c <_strtod_r+0x5e4>)
 808d188:	051b      	lsls	r3, r3, #20
 808d18a:	428b      	cmp	r3, r1
 808d18c:	4680      	mov	r8, r0
 808d18e:	d8c1      	bhi.n	808d114 <_strtod_r+0x47c>
 808d190:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 808d194:	428b      	cmp	r3, r1
 808d196:	bf86      	itte	hi
 808d198:	f8df 90f0 	ldrhi.w	r9, [pc, #240]	; 808d28c <_strtod_r+0x5f4>
 808d19c:	f04f 38ff 	movhi.w	r8, #4294967295
 808d1a0:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 808d1a4:	e074      	b.n	808d290 <_strtod_r+0x5f8>
 808d1a6:	d073      	beq.n	808d290 <_strtod_r+0x5f8>
 808d1a8:	4264      	negs	r4, r4
 808d1aa:	f014 020f 	ands.w	r2, r4, #15
 808d1ae:	d00a      	beq.n	808d1c6 <_strtod_r+0x52e>
 808d1b0:	4b30      	ldr	r3, [pc, #192]	; (808d274 <_strtod_r+0x5dc>)
 808d1b2:	4640      	mov	r0, r8
 808d1b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 808d1b8:	4649      	mov	r1, r9
 808d1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 808d1be:	f7fd fee5 	bl	808af8c <__aeabi_ddiv>
 808d1c2:	4680      	mov	r8, r0
 808d1c4:	4689      	mov	r9, r1
 808d1c6:	1124      	asrs	r4, r4, #4
 808d1c8:	d062      	beq.n	808d290 <_strtod_r+0x5f8>
 808d1ca:	2c1f      	cmp	r4, #31
 808d1cc:	dd08      	ble.n	808d1e0 <_strtod_r+0x548>
 808d1ce:	f04f 0b00 	mov.w	fp, #0
 808d1d2:	f8cd b008 	str.w	fp, [sp, #8]
 808d1d6:	f8cd b014 	str.w	fp, [sp, #20]
 808d1da:	f8cd b010 	str.w	fp, [sp, #16]
 808d1de:	e12c      	b.n	808d43a <_strtod_r+0x7a2>
 808d1e0:	4640      	mov	r0, r8
 808d1e2:	4649      	mov	r1, r9
 808d1e4:	f014 0f10 	tst.w	r4, #16
 808d1e8:	bf0c      	ite	eq
 808d1ea:	2300      	moveq	r3, #0
 808d1ec:	236a      	movne	r3, #106	; 0x6a
 808d1ee:	4e24      	ldr	r6, [pc, #144]	; (808d280 <_strtod_r+0x5e8>)
 808d1f0:	9303      	str	r3, [sp, #12]
 808d1f2:	2300      	movs	r3, #0
 808d1f4:	2c00      	cmp	r4, #0
 808d1f6:	dd09      	ble.n	808d20c <_strtod_r+0x574>
 808d1f8:	07e2      	lsls	r2, r4, #31
 808d1fa:	d504      	bpl.n	808d206 <_strtod_r+0x56e>
 808d1fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 808d200:	f7fd fd9a 	bl	808ad38 <__aeabi_dmul>
 808d204:	2301      	movs	r3, #1
 808d206:	1064      	asrs	r4, r4, #1
 808d208:	3608      	adds	r6, #8
 808d20a:	e7f3      	b.n	808d1f4 <_strtod_r+0x55c>
 808d20c:	b10b      	cbz	r3, 808d212 <_strtod_r+0x57a>
 808d20e:	4680      	mov	r8, r0
 808d210:	4689      	mov	r9, r1
 808d212:	9b03      	ldr	r3, [sp, #12]
 808d214:	b1eb      	cbz	r3, 808d252 <_strtod_r+0x5ba>
 808d216:	f3c9 530a 	ubfx	r3, r9, #20, #11
 808d21a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808d21e:	2b00      	cmp	r3, #0
 808d220:	4649      	mov	r1, r9
 808d222:	dd16      	ble.n	808d252 <_strtod_r+0x5ba>
 808d224:	2b1f      	cmp	r3, #31
 808d226:	dd0e      	ble.n	808d246 <_strtod_r+0x5ae>
 808d228:	2b34      	cmp	r3, #52	; 0x34
 808d22a:	bfde      	ittt	le
 808d22c:	3b20      	suble	r3, #32
 808d22e:	f04f 32ff 	movle.w	r2, #4294967295
 808d232:	fa02 f303 	lslle.w	r3, r2, r3
 808d236:	f04f 0800 	mov.w	r8, #0
 808d23a:	bfcc      	ite	gt
 808d23c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 808d240:	ea03 0901 	andle.w	r9, r3, r1
 808d244:	e005      	b.n	808d252 <_strtod_r+0x5ba>
 808d246:	f04f 32ff 	mov.w	r2, #4294967295
 808d24a:	fa02 f303 	lsl.w	r3, r2, r3
 808d24e:	ea03 0808 	and.w	r8, r3, r8
 808d252:	2200      	movs	r2, #0
 808d254:	2300      	movs	r3, #0
 808d256:	4640      	mov	r0, r8
 808d258:	4649      	mov	r1, r9
 808d25a:	f7fd ffd5 	bl	808b208 <__aeabi_dcmpeq>
 808d25e:	2800      	cmp	r0, #0
 808d260:	d1b5      	bne.n	808d1ce <_strtod_r+0x536>
 808d262:	e017      	b.n	808d294 <_strtod_r+0x5fc>
 808d264:	0809181d 	.word	0x0809181d
 808d268:	08091cd4 	.word	0x08091cd4
 808d26c:	08091d21 	.word	0x08091d21
 808d270:	08091cdc 	.word	0x08091cdc
 808d274:	08091f78 	.word	0x08091f78
 808d278:	08092040 	.word	0x08092040
 808d27c:	7ca00000 	.word	0x7ca00000
 808d280:	08091cf0 	.word	0x08091cf0
 808d284:	7ff00000 	.word	0x7ff00000
 808d288:	fff80000 	.word	0xfff80000
 808d28c:	7fefffff 	.word	0x7fefffff
 808d290:	2300      	movs	r3, #0
 808d292:	9303      	str	r3, [sp, #12]
 808d294:	9b04      	ldr	r3, [sp, #16]
 808d296:	465a      	mov	r2, fp
 808d298:	9300      	str	r3, [sp, #0]
 808d29a:	9906      	ldr	r1, [sp, #24]
 808d29c:	462b      	mov	r3, r5
 808d29e:	4650      	mov	r0, sl
 808d2a0:	f001 fae5 	bl	808e86e <__s2b>
 808d2a4:	9005      	str	r0, [sp, #20]
 808d2a6:	2800      	cmp	r0, #0
 808d2a8:	f43f af34 	beq.w	808d114 <_strtod_r+0x47c>
 808d2ac:	2f00      	cmp	r7, #0
 808d2ae:	f1c7 0300 	rsb	r3, r7, #0
 808d2b2:	bfa8      	it	ge
 808d2b4:	2300      	movge	r3, #0
 808d2b6:	930d      	str	r3, [sp, #52]	; 0x34
 808d2b8:	f04f 0b00 	mov.w	fp, #0
 808d2bc:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 808d2c0:	9312      	str	r3, [sp, #72]	; 0x48
 808d2c2:	f8cd b008 	str.w	fp, [sp, #8]
 808d2c6:	9b05      	ldr	r3, [sp, #20]
 808d2c8:	4650      	mov	r0, sl
 808d2ca:	6859      	ldr	r1, [r3, #4]
 808d2cc:	f001 fa48 	bl	808e760 <_Balloc>
 808d2d0:	9004      	str	r0, [sp, #16]
 808d2d2:	2800      	cmp	r0, #0
 808d2d4:	f43f af26 	beq.w	808d124 <_strtod_r+0x48c>
 808d2d8:	9b05      	ldr	r3, [sp, #20]
 808d2da:	300c      	adds	r0, #12
 808d2dc:	691a      	ldr	r2, [r3, #16]
 808d2de:	f103 010c 	add.w	r1, r3, #12
 808d2e2:	3202      	adds	r2, #2
 808d2e4:	0092      	lsls	r2, r2, #2
 808d2e6:	f7fe fede 	bl	808c0a6 <memcpy>
 808d2ea:	ab1a      	add	r3, sp, #104	; 0x68
 808d2ec:	9301      	str	r3, [sp, #4]
 808d2ee:	ab19      	add	r3, sp, #100	; 0x64
 808d2f0:	9300      	str	r3, [sp, #0]
 808d2f2:	4642      	mov	r2, r8
 808d2f4:	464b      	mov	r3, r9
 808d2f6:	4650      	mov	r0, sl
 808d2f8:	e9cd 8908 	strd	r8, r9, [sp, #32]
 808d2fc:	f001 fd67 	bl	808edce <__d2b>
 808d300:	9018      	str	r0, [sp, #96]	; 0x60
 808d302:	2800      	cmp	r0, #0
 808d304:	f43f af0e 	beq.w	808d124 <_strtod_r+0x48c>
 808d308:	2101      	movs	r1, #1
 808d30a:	4650      	mov	r0, sl
 808d30c:	f001 fb3a 	bl	808e984 <__i2b>
 808d310:	9002      	str	r0, [sp, #8]
 808d312:	2800      	cmp	r0, #0
 808d314:	f43f af06 	beq.w	808d124 <_strtod_r+0x48c>
 808d318:	9b19      	ldr	r3, [sp, #100]	; 0x64
 808d31a:	9903      	ldr	r1, [sp, #12]
 808d31c:	2b00      	cmp	r3, #0
 808d31e:	bfac      	ite	ge
 808d320:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
 808d322:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 808d324:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 808d326:	bfac      	ite	ge
 808d328:	18d6      	addge	r6, r2, r3
 808d32a:	1ad2      	sublt	r2, r2, r3
 808d32c:	eba3 0301 	sub.w	r3, r3, r1
 808d330:	4423      	add	r3, r4
 808d332:	49b1      	ldr	r1, [pc, #708]	; (808d5f8 <_strtod_r+0x960>)
 808d334:	f103 33ff 	add.w	r3, r3, #4294967295
 808d338:	bfac      	ite	ge
 808d33a:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 808d33c:	9e0d      	ldrlt	r6, [sp, #52]	; 0x34
 808d33e:	428b      	cmp	r3, r1
 808d340:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
 808d344:	f280 8085 	bge.w	808d452 <_strtod_r+0x7ba>
 808d348:	1ac9      	subs	r1, r1, r3
 808d34a:	291f      	cmp	r1, #31
 808d34c:	bfc8      	it	gt
 808d34e:	4dab      	ldrgt	r5, [pc, #684]	; (808d5fc <_strtod_r+0x964>)
 808d350:	f04f 0701 	mov.w	r7, #1
 808d354:	bfd4      	ite	le
 808d356:	fa07 f301 	lslle.w	r3, r7, r1
 808d35a:	1aed      	subgt	r5, r5, r3
 808d35c:	eba4 0401 	sub.w	r4, r4, r1
 808d360:	bfd9      	ittee	le
 808d362:	9307      	strle	r3, [sp, #28]
 808d364:	2500      	movle	r5, #0
 808d366:	fa07 f505 	lslgt.w	r5, r7, r5
 808d36a:	9707      	strgt	r7, [sp, #28]
 808d36c:	1937      	adds	r7, r6, r4
 808d36e:	9b03      	ldr	r3, [sp, #12]
 808d370:	42be      	cmp	r6, r7
 808d372:	4414      	add	r4, r2
 808d374:	441c      	add	r4, r3
 808d376:	4633      	mov	r3, r6
 808d378:	bfa8      	it	ge
 808d37a:	463b      	movge	r3, r7
 808d37c:	42a3      	cmp	r3, r4
 808d37e:	bfa8      	it	ge
 808d380:	4623      	movge	r3, r4
 808d382:	2b00      	cmp	r3, #0
 808d384:	bfc2      	ittt	gt
 808d386:	1aff      	subgt	r7, r7, r3
 808d388:	1ae4      	subgt	r4, r4, r3
 808d38a:	1af6      	subgt	r6, r6, r3
 808d38c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808d38e:	2b00      	cmp	r3, #0
 808d390:	d163      	bne.n	808d45a <_strtod_r+0x7c2>
 808d392:	2f00      	cmp	r7, #0
 808d394:	dc7a      	bgt.n	808d48c <_strtod_r+0x7f4>
 808d396:	9b12      	ldr	r3, [sp, #72]	; 0x48
 808d398:	2b00      	cmp	r3, #0
 808d39a:	f040 8081 	bne.w	808d4a0 <_strtod_r+0x808>
 808d39e:	2c00      	cmp	r4, #0
 808d3a0:	f300 8088 	bgt.w	808d4b4 <_strtod_r+0x81c>
 808d3a4:	2e00      	cmp	r6, #0
 808d3a6:	f300 808f 	bgt.w	808d4c8 <_strtod_r+0x830>
 808d3aa:	9a04      	ldr	r2, [sp, #16]
 808d3ac:	9918      	ldr	r1, [sp, #96]	; 0x60
 808d3ae:	4650      	mov	r0, sl
 808d3b0:	f001 fc3d 	bl	808ec2e <__mdiff>
 808d3b4:	4683      	mov	fp, r0
 808d3b6:	2800      	cmp	r0, #0
 808d3b8:	f43f aeb4 	beq.w	808d124 <_strtod_r+0x48c>
 808d3bc:	68c3      	ldr	r3, [r0, #12]
 808d3be:	2400      	movs	r4, #0
 808d3c0:	60c4      	str	r4, [r0, #12]
 808d3c2:	9902      	ldr	r1, [sp, #8]
 808d3c4:	9306      	str	r3, [sp, #24]
 808d3c6:	f001 fc16 	bl	808ebf6 <__mcmp>
 808d3ca:	42a0      	cmp	r0, r4
 808d3cc:	f280 808b 	bge.w	808d4e6 <_strtod_r+0x84e>
 808d3d0:	9b06      	ldr	r3, [sp, #24]
 808d3d2:	2b00      	cmp	r3, #0
 808d3d4:	f040 8202 	bne.w	808d7dc <_strtod_r+0xb44>
 808d3d8:	f1b8 0f00 	cmp.w	r8, #0
 808d3dc:	f040 81fe 	bne.w	808d7dc <_strtod_r+0xb44>
 808d3e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808d3e4:	2b00      	cmp	r3, #0
 808d3e6:	f040 81f9 	bne.w	808d7dc <_strtod_r+0xb44>
 808d3ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808d3ee:	0d1b      	lsrs	r3, r3, #20
 808d3f0:	051b      	lsls	r3, r3, #20
 808d3f2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 808d3f6:	f240 81f1 	bls.w	808d7dc <_strtod_r+0xb44>
 808d3fa:	f8db 3014 	ldr.w	r3, [fp, #20]
 808d3fe:	2b00      	cmp	r3, #0
 808d400:	d06c      	beq.n	808d4dc <_strtod_r+0x844>
 808d402:	4659      	mov	r1, fp
 808d404:	2201      	movs	r2, #1
 808d406:	4650      	mov	r0, sl
 808d408:	f001 fba4 	bl	808eb54 <__lshift>
 808d40c:	9902      	ldr	r1, [sp, #8]
 808d40e:	4683      	mov	fp, r0
 808d410:	f001 fbf1 	bl	808ebf6 <__mcmp>
 808d414:	2800      	cmp	r0, #0
 808d416:	f340 81e1 	ble.w	808d7dc <_strtod_r+0xb44>
 808d41a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808d41e:	9a03      	ldr	r2, [sp, #12]
 808d420:	0d1b      	lsrs	r3, r3, #20
 808d422:	051b      	lsls	r3, r3, #20
 808d424:	2a00      	cmp	r2, #0
 808d426:	f000 808d 	beq.w	808d544 <_strtod_r+0x8ac>
 808d42a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 808d42e:	f300 8089 	bgt.w	808d544 <_strtod_r+0x8ac>
 808d432:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 808d436:	f300 81d3 	bgt.w	808d7e0 <_strtod_r+0xb48>
 808d43a:	2322      	movs	r3, #34	; 0x22
 808d43c:	f04f 0800 	mov.w	r8, #0
 808d440:	f04f 0900 	mov.w	r9, #0
 808d444:	f8ca 3000 	str.w	r3, [sl]
 808d448:	9b05      	ldr	r3, [sp, #20]
 808d44a:	2b00      	cmp	r3, #0
 808d44c:	f040 81d9 	bne.w	808d802 <_strtod_r+0xb6a>
 808d450:	e1eb      	b.n	808d82a <_strtod_r+0xb92>
 808d452:	2301      	movs	r3, #1
 808d454:	2500      	movs	r5, #0
 808d456:	9307      	str	r3, [sp, #28]
 808d458:	e788      	b.n	808d36c <_strtod_r+0x6d4>
 808d45a:	461a      	mov	r2, r3
 808d45c:	9902      	ldr	r1, [sp, #8]
 808d45e:	4650      	mov	r0, sl
 808d460:	f001 fb2a 	bl	808eab8 <__pow5mult>
 808d464:	9002      	str	r0, [sp, #8]
 808d466:	2800      	cmp	r0, #0
 808d468:	f43f ae5c 	beq.w	808d124 <_strtod_r+0x48c>
 808d46c:	4601      	mov	r1, r0
 808d46e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 808d470:	4650      	mov	r0, sl
 808d472:	f001 fa90 	bl	808e996 <__multiply>
 808d476:	9006      	str	r0, [sp, #24]
 808d478:	2800      	cmp	r0, #0
 808d47a:	f43f ae53 	beq.w	808d124 <_strtod_r+0x48c>
 808d47e:	9918      	ldr	r1, [sp, #96]	; 0x60
 808d480:	4650      	mov	r0, sl
 808d482:	f001 f9a2 	bl	808e7ca <_Bfree>
 808d486:	9b06      	ldr	r3, [sp, #24]
 808d488:	9318      	str	r3, [sp, #96]	; 0x60
 808d48a:	e782      	b.n	808d392 <_strtod_r+0x6fa>
 808d48c:	463a      	mov	r2, r7
 808d48e:	9918      	ldr	r1, [sp, #96]	; 0x60
 808d490:	4650      	mov	r0, sl
 808d492:	f001 fb5f 	bl	808eb54 <__lshift>
 808d496:	9018      	str	r0, [sp, #96]	; 0x60
 808d498:	2800      	cmp	r0, #0
 808d49a:	f47f af7c 	bne.w	808d396 <_strtod_r+0x6fe>
 808d49e:	e641      	b.n	808d124 <_strtod_r+0x48c>
 808d4a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 808d4a2:	9904      	ldr	r1, [sp, #16]
 808d4a4:	4650      	mov	r0, sl
 808d4a6:	f001 fb07 	bl	808eab8 <__pow5mult>
 808d4aa:	9004      	str	r0, [sp, #16]
 808d4ac:	2800      	cmp	r0, #0
 808d4ae:	f47f af76 	bne.w	808d39e <_strtod_r+0x706>
 808d4b2:	e637      	b.n	808d124 <_strtod_r+0x48c>
 808d4b4:	4622      	mov	r2, r4
 808d4b6:	9904      	ldr	r1, [sp, #16]
 808d4b8:	4650      	mov	r0, sl
 808d4ba:	f001 fb4b 	bl	808eb54 <__lshift>
 808d4be:	9004      	str	r0, [sp, #16]
 808d4c0:	2800      	cmp	r0, #0
 808d4c2:	f47f af6f 	bne.w	808d3a4 <_strtod_r+0x70c>
 808d4c6:	e62d      	b.n	808d124 <_strtod_r+0x48c>
 808d4c8:	4632      	mov	r2, r6
 808d4ca:	9902      	ldr	r1, [sp, #8]
 808d4cc:	4650      	mov	r0, sl
 808d4ce:	f001 fb41 	bl	808eb54 <__lshift>
 808d4d2:	9002      	str	r0, [sp, #8]
 808d4d4:	2800      	cmp	r0, #0
 808d4d6:	f47f af68 	bne.w	808d3aa <_strtod_r+0x712>
 808d4da:	e623      	b.n	808d124 <_strtod_r+0x48c>
 808d4dc:	f8db 3010 	ldr.w	r3, [fp, #16]
 808d4e0:	2b01      	cmp	r3, #1
 808d4e2:	dc8e      	bgt.n	808d402 <_strtod_r+0x76a>
 808d4e4:	e17a      	b.n	808d7dc <_strtod_r+0xb44>
 808d4e6:	d161      	bne.n	808d5ac <_strtod_r+0x914>
 808d4e8:	9a06      	ldr	r2, [sp, #24]
 808d4ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808d4ee:	b322      	cbz	r2, 808d53a <_strtod_r+0x8a2>
 808d4f0:	4943      	ldr	r1, [pc, #268]	; (808d600 <_strtod_r+0x968>)
 808d4f2:	464a      	mov	r2, r9
 808d4f4:	428b      	cmp	r3, r1
 808d4f6:	d12e      	bne.n	808d556 <_strtod_r+0x8be>
 808d4f8:	9b03      	ldr	r3, [sp, #12]
 808d4fa:	4641      	mov	r1, r8
 808d4fc:	b163      	cbz	r3, 808d518 <_strtod_r+0x880>
 808d4fe:	4b41      	ldr	r3, [pc, #260]	; (808d604 <_strtod_r+0x96c>)
 808d500:	4013      	ands	r3, r2
 808d502:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 808d506:	d807      	bhi.n	808d518 <_strtod_r+0x880>
 808d508:	0d1b      	lsrs	r3, r3, #20
 808d50a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808d50e:	f04f 30ff 	mov.w	r0, #4294967295
 808d512:	fa00 f303 	lsl.w	r3, r0, r3
 808d516:	e001      	b.n	808d51c <_strtod_r+0x884>
 808d518:	f04f 33ff 	mov.w	r3, #4294967295
 808d51c:	428b      	cmp	r3, r1
 808d51e:	d11a      	bne.n	808d556 <_strtod_r+0x8be>
 808d520:	4939      	ldr	r1, [pc, #228]	; (808d608 <_strtod_r+0x970>)
 808d522:	428a      	cmp	r2, r1
 808d524:	d102      	bne.n	808d52c <_strtod_r+0x894>
 808d526:	3301      	adds	r3, #1
 808d528:	f43f adfc 	beq.w	808d124 <_strtod_r+0x48c>
 808d52c:	4b35      	ldr	r3, [pc, #212]	; (808d604 <_strtod_r+0x96c>)
 808d52e:	f04f 0800 	mov.w	r8, #0
 808d532:	4013      	ands	r3, r2
 808d534:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 808d538:	e150      	b.n	808d7dc <_strtod_r+0xb44>
 808d53a:	b963      	cbnz	r3, 808d556 <_strtod_r+0x8be>
 808d53c:	f1b8 0f00 	cmp.w	r8, #0
 808d540:	d109      	bne.n	808d556 <_strtod_r+0x8be>
 808d542:	e76a      	b.n	808d41a <_strtod_r+0x782>
 808d544:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 808d548:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 808d54c:	f04f 38ff 	mov.w	r8, #4294967295
 808d550:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 808d554:	e142      	b.n	808d7dc <_strtod_r+0xb44>
 808d556:	b115      	cbz	r5, 808d55e <_strtod_r+0x8c6>
 808d558:	ea15 0f09 	tst.w	r5, r9
 808d55c:	e002      	b.n	808d564 <_strtod_r+0x8cc>
 808d55e:	9b07      	ldr	r3, [sp, #28]
 808d560:	ea13 0f08 	tst.w	r3, r8
 808d564:	f000 813a 	beq.w	808d7dc <_strtod_r+0xb44>
 808d568:	9b06      	ldr	r3, [sp, #24]
 808d56a:	9a03      	ldr	r2, [sp, #12]
 808d56c:	4640      	mov	r0, r8
 808d56e:	4649      	mov	r1, r9
 808d570:	b153      	cbz	r3, 808d588 <_strtod_r+0x8f0>
 808d572:	f7ff fb6d 	bl	808cc50 <sulp>
 808d576:	4602      	mov	r2, r0
 808d578:	460b      	mov	r3, r1
 808d57a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808d57e:	f7fd fa29 	bl	808a9d4 <__adddf3>
 808d582:	4680      	mov	r8, r0
 808d584:	4689      	mov	r9, r1
 808d586:	e129      	b.n	808d7dc <_strtod_r+0xb44>
 808d588:	f7ff fb62 	bl	808cc50 <sulp>
 808d58c:	4602      	mov	r2, r0
 808d58e:	460b      	mov	r3, r1
 808d590:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808d594:	f7fd fa1c 	bl	808a9d0 <__aeabi_dsub>
 808d598:	2200      	movs	r2, #0
 808d59a:	2300      	movs	r3, #0
 808d59c:	4680      	mov	r8, r0
 808d59e:	4689      	mov	r9, r1
 808d5a0:	f7fd fe32 	bl	808b208 <__aeabi_dcmpeq>
 808d5a4:	2800      	cmp	r0, #0
 808d5a6:	f47f af48 	bne.w	808d43a <_strtod_r+0x7a2>
 808d5aa:	e117      	b.n	808d7dc <_strtod_r+0xb44>
 808d5ac:	9902      	ldr	r1, [sp, #8]
 808d5ae:	4658      	mov	r0, fp
 808d5b0:	f001 fc5b 	bl	808ee6a <__ratio>
 808d5b4:	2200      	movs	r2, #0
 808d5b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 808d5ba:	4606      	mov	r6, r0
 808d5bc:	460f      	mov	r7, r1
 808d5be:	f7fd fe37 	bl	808b230 <__aeabi_dcmple>
 808d5c2:	2800      	cmp	r0, #0
 808d5c4:	d03f      	beq.n	808d646 <_strtod_r+0x9ae>
 808d5c6:	9b06      	ldr	r3, [sp, #24]
 808d5c8:	b113      	cbz	r3, 808d5d0 <_strtod_r+0x938>
 808d5ca:	2600      	movs	r6, #0
 808d5cc:	4f0f      	ldr	r7, [pc, #60]	; (808d60c <_strtod_r+0x974>)
 808d5ce:	e010      	b.n	808d5f2 <_strtod_r+0x95a>
 808d5d0:	f1b8 0f00 	cmp.w	r8, #0
 808d5d4:	d103      	bne.n	808d5de <_strtod_r+0x946>
 808d5d6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808d5da:	b93b      	cbnz	r3, 808d5ec <_strtod_r+0x954>
 808d5dc:	e01a      	b.n	808d614 <_strtod_r+0x97c>
 808d5de:	f1b8 0f01 	cmp.w	r8, #1
 808d5e2:	d103      	bne.n	808d5ec <_strtod_r+0x954>
 808d5e4:	f1b9 0f00 	cmp.w	r9, #0
 808d5e8:	f43f af27 	beq.w	808d43a <_strtod_r+0x7a2>
 808d5ec:	4f08      	ldr	r7, [pc, #32]	; (808d610 <_strtod_r+0x978>)
 808d5ee:	2600      	movs	r6, #0
 808d5f0:	2400      	movs	r4, #0
 808d5f2:	4d06      	ldr	r5, [pc, #24]	; (808d60c <_strtod_r+0x974>)
 808d5f4:	e03c      	b.n	808d670 <_strtod_r+0x9d8>
 808d5f6:	bf00      	nop
 808d5f8:	fffffc02 	.word	0xfffffc02
 808d5fc:	fffffbe2 	.word	0xfffffbe2
 808d600:	000fffff 	.word	0x000fffff
 808d604:	7ff00000 	.word	0x7ff00000
 808d608:	7fefffff 	.word	0x7fefffff
 808d60c:	3ff00000 	.word	0x3ff00000
 808d610:	bff00000 	.word	0xbff00000
 808d614:	2200      	movs	r2, #0
 808d616:	4b9a      	ldr	r3, [pc, #616]	; (808d880 <_strtod_r+0xbe8>)
 808d618:	4630      	mov	r0, r6
 808d61a:	4639      	mov	r1, r7
 808d61c:	f7fd fdfe 	bl	808b21c <__aeabi_dcmplt>
 808d620:	b940      	cbnz	r0, 808d634 <_strtod_r+0x99c>
 808d622:	2200      	movs	r2, #0
 808d624:	4b97      	ldr	r3, [pc, #604]	; (808d884 <_strtod_r+0xbec>)
 808d626:	4630      	mov	r0, r6
 808d628:	4639      	mov	r1, r7
 808d62a:	f7fd fb85 	bl	808ad38 <__aeabi_dmul>
 808d62e:	4604      	mov	r4, r0
 808d630:	460d      	mov	r5, r1
 808d632:	e001      	b.n	808d638 <_strtod_r+0x9a0>
 808d634:	9c06      	ldr	r4, [sp, #24]
 808d636:	4d93      	ldr	r5, [pc, #588]	; (808d884 <_strtod_r+0xbec>)
 808d638:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 808d63c:	9414      	str	r4, [sp, #80]	; 0x50
 808d63e:	9315      	str	r3, [sp, #84]	; 0x54
 808d640:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 808d644:	e014      	b.n	808d670 <_strtod_r+0x9d8>
 808d646:	4b8f      	ldr	r3, [pc, #572]	; (808d884 <_strtod_r+0xbec>)
 808d648:	2200      	movs	r2, #0
 808d64a:	4630      	mov	r0, r6
 808d64c:	4639      	mov	r1, r7
 808d64e:	f7fd fb73 	bl	808ad38 <__aeabi_dmul>
 808d652:	9b06      	ldr	r3, [sp, #24]
 808d654:	4604      	mov	r4, r0
 808d656:	460d      	mov	r5, r1
 808d658:	b923      	cbnz	r3, 808d664 <_strtod_r+0x9cc>
 808d65a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 808d65e:	900e      	str	r0, [sp, #56]	; 0x38
 808d660:	930f      	str	r3, [sp, #60]	; 0x3c
 808d662:	e003      	b.n	808d66c <_strtod_r+0x9d4>
 808d664:	4602      	mov	r2, r0
 808d666:	460b      	mov	r3, r1
 808d668:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 808d66c:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 808d670:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808d674:	0d1b      	lsrs	r3, r3, #20
 808d676:	051b      	lsls	r3, r3, #20
 808d678:	9307      	str	r3, [sp, #28]
 808d67a:	9a07      	ldr	r2, [sp, #28]
 808d67c:	4b82      	ldr	r3, [pc, #520]	; (808d888 <_strtod_r+0xbf0>)
 808d67e:	429a      	cmp	r2, r3
 808d680:	d12b      	bne.n	808d6da <_strtod_r+0xa42>
 808d682:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 808d686:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 808d68a:	4640      	mov	r0, r8
 808d68c:	4649      	mov	r1, r9
 808d68e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 808d692:	f001 fb2b 	bl	808ecec <__ulp>
 808d696:	4602      	mov	r2, r0
 808d698:	460b      	mov	r3, r1
 808d69a:	4630      	mov	r0, r6
 808d69c:	4639      	mov	r1, r7
 808d69e:	f7fd fb4b 	bl	808ad38 <__aeabi_dmul>
 808d6a2:	4642      	mov	r2, r8
 808d6a4:	464b      	mov	r3, r9
 808d6a6:	f7fd f995 	bl	808a9d4 <__adddf3>
 808d6aa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 808d6ae:	0d1b      	lsrs	r3, r3, #20
 808d6b0:	4a76      	ldr	r2, [pc, #472]	; (808d88c <_strtod_r+0xbf4>)
 808d6b2:	051b      	lsls	r3, r3, #20
 808d6b4:	4293      	cmp	r3, r2
 808d6b6:	4680      	mov	r8, r0
 808d6b8:	d90c      	bls.n	808d6d4 <_strtod_r+0xa3c>
 808d6ba:	4b75      	ldr	r3, [pc, #468]	; (808d890 <_strtod_r+0xbf8>)
 808d6bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 808d6be:	429a      	cmp	r2, r3
 808d6c0:	d103      	bne.n	808d6ca <_strtod_r+0xa32>
 808d6c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808d6c4:	3301      	adds	r3, #1
 808d6c6:	f43f ad2d 	beq.w	808d124 <_strtod_r+0x48c>
 808d6ca:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 808d890 <_strtod_r+0xbf8>
 808d6ce:	f04f 38ff 	mov.w	r8, #4294967295
 808d6d2:	e072      	b.n	808d7ba <_strtod_r+0xb22>
 808d6d4:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 808d6d8:	e039      	b.n	808d74e <_strtod_r+0xab6>
 808d6da:	9b03      	ldr	r3, [sp, #12]
 808d6dc:	b33b      	cbz	r3, 808d72e <_strtod_r+0xa96>
 808d6de:	9b07      	ldr	r3, [sp, #28]
 808d6e0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 808d6e4:	d823      	bhi.n	808d72e <_strtod_r+0xa96>
 808d6e6:	a35e      	add	r3, pc, #376	; (adr r3, 808d860 <_strtod_r+0xbc8>)
 808d6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 808d6ec:	4620      	mov	r0, r4
 808d6ee:	4629      	mov	r1, r5
 808d6f0:	f7fd fd9e 	bl	808b230 <__aeabi_dcmple>
 808d6f4:	b1b8      	cbz	r0, 808d726 <_strtod_r+0xa8e>
 808d6f6:	4629      	mov	r1, r5
 808d6f8:	4620      	mov	r0, r4
 808d6fa:	f7fd fdf5 	bl	808b2e8 <__aeabi_d2uiz>
 808d6fe:	2800      	cmp	r0, #0
 808d700:	bf08      	it	eq
 808d702:	2001      	moveq	r0, #1
 808d704:	f7fd faa2 	bl	808ac4c <__aeabi_ui2d>
 808d708:	9b06      	ldr	r3, [sp, #24]
 808d70a:	4604      	mov	r4, r0
 808d70c:	460d      	mov	r5, r1
 808d70e:	b923      	cbnz	r3, 808d71a <_strtod_r+0xa82>
 808d710:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 808d714:	9010      	str	r0, [sp, #64]	; 0x40
 808d716:	9311      	str	r3, [sp, #68]	; 0x44
 808d718:	e003      	b.n	808d722 <_strtod_r+0xa8a>
 808d71a:	4602      	mov	r2, r0
 808d71c:	460b      	mov	r3, r1
 808d71e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 808d722:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 808d726:	9a07      	ldr	r2, [sp, #28]
 808d728:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 808d72c:	1a9f      	subs	r7, r3, r2
 808d72e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808d732:	f001 fadb 	bl	808ecec <__ulp>
 808d736:	4602      	mov	r2, r0
 808d738:	460b      	mov	r3, r1
 808d73a:	4630      	mov	r0, r6
 808d73c:	4639      	mov	r1, r7
 808d73e:	f7fd fafb 	bl	808ad38 <__aeabi_dmul>
 808d742:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 808d746:	f7fd f945 	bl	808a9d4 <__adddf3>
 808d74a:	4680      	mov	r8, r0
 808d74c:	4689      	mov	r9, r1
 808d74e:	9b03      	ldr	r3, [sp, #12]
 808d750:	bb9b      	cbnz	r3, 808d7ba <_strtod_r+0xb22>
 808d752:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808d756:	0d1b      	lsrs	r3, r3, #20
 808d758:	9a07      	ldr	r2, [sp, #28]
 808d75a:	051b      	lsls	r3, r3, #20
 808d75c:	429a      	cmp	r2, r3
 808d75e:	464e      	mov	r6, r9
 808d760:	d12b      	bne.n	808d7ba <_strtod_r+0xb22>
 808d762:	4629      	mov	r1, r5
 808d764:	4620      	mov	r0, r4
 808d766:	f7fd fd97 	bl	808b298 <__aeabi_d2iz>
 808d76a:	f7fd fa7f 	bl	808ac6c <__aeabi_i2d>
 808d76e:	460b      	mov	r3, r1
 808d770:	4602      	mov	r2, r0
 808d772:	4629      	mov	r1, r5
 808d774:	4620      	mov	r0, r4
 808d776:	f7fd f92b 	bl	808a9d0 <__aeabi_dsub>
 808d77a:	9b06      	ldr	r3, [sp, #24]
 808d77c:	4604      	mov	r4, r0
 808d77e:	460d      	mov	r5, r1
 808d780:	b92b      	cbnz	r3, 808d78e <_strtod_r+0xaf6>
 808d782:	f1b8 0f00 	cmp.w	r8, #0
 808d786:	d102      	bne.n	808d78e <_strtod_r+0xaf6>
 808d788:	f3c9 0613 	ubfx	r6, r9, #0, #20
 808d78c:	b17e      	cbz	r6, 808d7ae <_strtod_r+0xb16>
 808d78e:	a336      	add	r3, pc, #216	; (adr r3, 808d868 <_strtod_r+0xbd0>)
 808d790:	e9d3 2300 	ldrd	r2, r3, [r3]
 808d794:	4620      	mov	r0, r4
 808d796:	4629      	mov	r1, r5
 808d798:	f7fd fd40 	bl	808b21c <__aeabi_dcmplt>
 808d79c:	bb88      	cbnz	r0, 808d802 <_strtod_r+0xb6a>
 808d79e:	a334      	add	r3, pc, #208	; (adr r3, 808d870 <_strtod_r+0xbd8>)
 808d7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 808d7a4:	4620      	mov	r0, r4
 808d7a6:	4629      	mov	r1, r5
 808d7a8:	f7fd fd56 	bl	808b258 <__aeabi_dcmpgt>
 808d7ac:	e004      	b.n	808d7b8 <_strtod_r+0xb20>
 808d7ae:	a332      	add	r3, pc, #200	; (adr r3, 808d878 <_strtod_r+0xbe0>)
 808d7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 808d7b4:	f7fd fd32 	bl	808b21c <__aeabi_dcmplt>
 808d7b8:	bb18      	cbnz	r0, 808d802 <_strtod_r+0xb6a>
 808d7ba:	9918      	ldr	r1, [sp, #96]	; 0x60
 808d7bc:	4650      	mov	r0, sl
 808d7be:	f001 f804 	bl	808e7ca <_Bfree>
 808d7c2:	9904      	ldr	r1, [sp, #16]
 808d7c4:	4650      	mov	r0, sl
 808d7c6:	f001 f800 	bl	808e7ca <_Bfree>
 808d7ca:	9902      	ldr	r1, [sp, #8]
 808d7cc:	4650      	mov	r0, sl
 808d7ce:	f000 fffc 	bl	808e7ca <_Bfree>
 808d7d2:	4659      	mov	r1, fp
 808d7d4:	4650      	mov	r0, sl
 808d7d6:	f000 fff8 	bl	808e7ca <_Bfree>
 808d7da:	e574      	b.n	808d2c6 <_strtod_r+0x62e>
 808d7dc:	9b03      	ldr	r3, [sp, #12]
 808d7de:	b183      	cbz	r3, 808d802 <_strtod_r+0xb6a>
 808d7e0:	4b2c      	ldr	r3, [pc, #176]	; (808d894 <_strtod_r+0xbfc>)
 808d7e2:	4640      	mov	r0, r8
 808d7e4:	930b      	str	r3, [sp, #44]	; 0x2c
 808d7e6:	2300      	movs	r3, #0
 808d7e8:	930a      	str	r3, [sp, #40]	; 0x28
 808d7ea:	4649      	mov	r1, r9
 808d7ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 808d7f0:	f7fd faa2 	bl	808ad38 <__aeabi_dmul>
 808d7f4:	4680      	mov	r8, r0
 808d7f6:	4689      	mov	r9, r1
 808d7f8:	b919      	cbnz	r1, 808d802 <_strtod_r+0xb6a>
 808d7fa:	b910      	cbnz	r0, 808d802 <_strtod_r+0xb6a>
 808d7fc:	2322      	movs	r3, #34	; 0x22
 808d7fe:	f8ca 3000 	str.w	r3, [sl]
 808d802:	9918      	ldr	r1, [sp, #96]	; 0x60
 808d804:	4650      	mov	r0, sl
 808d806:	f000 ffe0 	bl	808e7ca <_Bfree>
 808d80a:	9904      	ldr	r1, [sp, #16]
 808d80c:	4650      	mov	r0, sl
 808d80e:	f000 ffdc 	bl	808e7ca <_Bfree>
 808d812:	9902      	ldr	r1, [sp, #8]
 808d814:	4650      	mov	r0, sl
 808d816:	f000 ffd8 	bl	808e7ca <_Bfree>
 808d81a:	9905      	ldr	r1, [sp, #20]
 808d81c:	4650      	mov	r0, sl
 808d81e:	f000 ffd4 	bl	808e7ca <_Bfree>
 808d822:	4659      	mov	r1, fp
 808d824:	4650      	mov	r0, sl
 808d826:	f000 ffd0 	bl	808e7ca <_Bfree>
 808d82a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 808d82c:	b113      	cbz	r3, 808d834 <_strtod_r+0xb9c>
 808d82e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808d830:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 808d832:	6013      	str	r3, [r2, #0]
 808d834:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808d836:	b11b      	cbz	r3, 808d840 <_strtod_r+0xba8>
 808d838:	4642      	mov	r2, r8
 808d83a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 808d83e:	e007      	b.n	808d850 <_strtod_r+0xbb8>
 808d840:	4642      	mov	r2, r8
 808d842:	464b      	mov	r3, r9
 808d844:	e004      	b.n	808d850 <_strtod_r+0xbb8>
 808d846:	2500      	movs	r5, #0
 808d848:	462a      	mov	r2, r5
 808d84a:	2101      	movs	r1, #1
 808d84c:	f7ff bb47 	b.w	808cede <_strtod_r+0x246>
 808d850:	4610      	mov	r0, r2
 808d852:	4619      	mov	r1, r3
 808d854:	b01d      	add	sp, #116	; 0x74
 808d856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808d85a:	bf00      	nop
 808d85c:	f3af 8000 	nop.w
 808d860:	ffc00000 	.word	0xffc00000
 808d864:	41dfffff 	.word	0x41dfffff
 808d868:	94a03595 	.word	0x94a03595
 808d86c:	3fdfffff 	.word	0x3fdfffff
 808d870:	35afe535 	.word	0x35afe535
 808d874:	3fe00000 	.word	0x3fe00000
 808d878:	94a03595 	.word	0x94a03595
 808d87c:	3fcfffff 	.word	0x3fcfffff
 808d880:	3ff00000 	.word	0x3ff00000
 808d884:	3fe00000 	.word	0x3fe00000
 808d888:	7fe00000 	.word	0x7fe00000
 808d88c:	7c9fffff 	.word	0x7c9fffff
 808d890:	7fefffff 	.word	0x7fefffff
 808d894:	39500000 	.word	0x39500000

0808d898 <strtod>:
 808d898:	4b02      	ldr	r3, [pc, #8]	; (808d8a4 <strtod+0xc>)
 808d89a:	460a      	mov	r2, r1
 808d89c:	4601      	mov	r1, r0
 808d89e:	6818      	ldr	r0, [r3, #0]
 808d8a0:	f7ff b9fa 	b.w	808cc98 <_strtod_r>
 808d8a4:	20000140 	.word	0x20000140

0808d8a8 <_strtol_r>:
 808d8a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808d8ac:	460f      	mov	r7, r1
 808d8ae:	4680      	mov	r8, r0
 808d8b0:	483f      	ldr	r0, [pc, #252]	; (808d9b0 <_strtol_r+0x108>)
 808d8b2:	f8d0 9000 	ldr.w	r9, [r0]
 808d8b6:	463d      	mov	r5, r7
 808d8b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 808d8bc:	eb09 0004 	add.w	r0, r9, r4
 808d8c0:	7840      	ldrb	r0, [r0, #1]
 808d8c2:	f000 0008 	and.w	r0, r0, #8
 808d8c6:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 808d8ca:	b108      	cbz	r0, 808d8d0 <_strtol_r+0x28>
 808d8cc:	462f      	mov	r7, r5
 808d8ce:	e7f2      	b.n	808d8b6 <_strtol_r+0xe>
 808d8d0:	2c2d      	cmp	r4, #45	; 0x2d
 808d8d2:	d103      	bne.n	808d8dc <_strtol_r+0x34>
 808d8d4:	1cbd      	adds	r5, r7, #2
 808d8d6:	787c      	ldrb	r4, [r7, #1]
 808d8d8:	2601      	movs	r6, #1
 808d8da:	e003      	b.n	808d8e4 <_strtol_r+0x3c>
 808d8dc:	2c2b      	cmp	r4, #43	; 0x2b
 808d8de:	bf04      	itt	eq
 808d8e0:	787c      	ldrbeq	r4, [r7, #1]
 808d8e2:	1cbd      	addeq	r5, r7, #2
 808d8e4:	b113      	cbz	r3, 808d8ec <_strtol_r+0x44>
 808d8e6:	2b10      	cmp	r3, #16
 808d8e8:	d10a      	bne.n	808d900 <_strtol_r+0x58>
 808d8ea:	e05b      	b.n	808d9a4 <_strtol_r+0xfc>
 808d8ec:	2c30      	cmp	r4, #48	; 0x30
 808d8ee:	d157      	bne.n	808d9a0 <_strtol_r+0xf8>
 808d8f0:	7828      	ldrb	r0, [r5, #0]
 808d8f2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 808d8f6:	2858      	cmp	r0, #88	; 0x58
 808d8f8:	d14d      	bne.n	808d996 <_strtol_r+0xee>
 808d8fa:	786c      	ldrb	r4, [r5, #1]
 808d8fc:	2310      	movs	r3, #16
 808d8fe:	3502      	adds	r5, #2
 808d900:	2e00      	cmp	r6, #0
 808d902:	bf14      	ite	ne
 808d904:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 808d908:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 808d90c:	fbbc faf3 	udiv	sl, ip, r3
 808d910:	2700      	movs	r7, #0
 808d912:	4638      	mov	r0, r7
 808d914:	fb03 cc1a 	mls	ip, r3, sl, ip
 808d918:	eb09 0e04 	add.w	lr, r9, r4
 808d91c:	f89e e001 	ldrb.w	lr, [lr, #1]
 808d920:	f01e 0f04 	tst.w	lr, #4
 808d924:	d001      	beq.n	808d92a <_strtol_r+0x82>
 808d926:	3c30      	subs	r4, #48	; 0x30
 808d928:	e00b      	b.n	808d942 <_strtol_r+0x9a>
 808d92a:	f01e 0e03 	ands.w	lr, lr, #3
 808d92e:	d01b      	beq.n	808d968 <_strtol_r+0xc0>
 808d930:	f1be 0f01 	cmp.w	lr, #1
 808d934:	bf0c      	ite	eq
 808d936:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 808d93a:	f04f 0e57 	movne.w	lr, #87	; 0x57
 808d93e:	ebce 0404 	rsb	r4, lr, r4
 808d942:	42a3      	cmp	r3, r4
 808d944:	dd10      	ble.n	808d968 <_strtol_r+0xc0>
 808d946:	f1b7 3fff 	cmp.w	r7, #4294967295
 808d94a:	d00a      	beq.n	808d962 <_strtol_r+0xba>
 808d94c:	4550      	cmp	r0, sl
 808d94e:	d806      	bhi.n	808d95e <_strtol_r+0xb6>
 808d950:	d101      	bne.n	808d956 <_strtol_r+0xae>
 808d952:	4564      	cmp	r4, ip
 808d954:	dc03      	bgt.n	808d95e <_strtol_r+0xb6>
 808d956:	fb03 4000 	mla	r0, r3, r0, r4
 808d95a:	2701      	movs	r7, #1
 808d95c:	e001      	b.n	808d962 <_strtol_r+0xba>
 808d95e:	f04f 37ff 	mov.w	r7, #4294967295
 808d962:	f815 4b01 	ldrb.w	r4, [r5], #1
 808d966:	e7d7      	b.n	808d918 <_strtol_r+0x70>
 808d968:	1c7b      	adds	r3, r7, #1
 808d96a:	d10c      	bne.n	808d986 <_strtol_r+0xde>
 808d96c:	2e00      	cmp	r6, #0
 808d96e:	f04f 0322 	mov.w	r3, #34	; 0x22
 808d972:	bf14      	ite	ne
 808d974:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 808d978:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808d97c:	f8c8 3000 	str.w	r3, [r8]
 808d980:	b92a      	cbnz	r2, 808d98e <_strtol_r+0xe6>
 808d982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808d986:	b106      	cbz	r6, 808d98a <_strtol_r+0xe2>
 808d988:	4240      	negs	r0, r0
 808d98a:	b172      	cbz	r2, 808d9aa <_strtol_r+0x102>
 808d98c:	b107      	cbz	r7, 808d990 <_strtol_r+0xe8>
 808d98e:	1e69      	subs	r1, r5, #1
 808d990:	6011      	str	r1, [r2, #0]
 808d992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808d996:	2430      	movs	r4, #48	; 0x30
 808d998:	2b00      	cmp	r3, #0
 808d99a:	d1b1      	bne.n	808d900 <_strtol_r+0x58>
 808d99c:	2308      	movs	r3, #8
 808d99e:	e7af      	b.n	808d900 <_strtol_r+0x58>
 808d9a0:	230a      	movs	r3, #10
 808d9a2:	e7ad      	b.n	808d900 <_strtol_r+0x58>
 808d9a4:	2c30      	cmp	r4, #48	; 0x30
 808d9a6:	d0a3      	beq.n	808d8f0 <_strtol_r+0x48>
 808d9a8:	e7aa      	b.n	808d900 <_strtol_r+0x58>
 808d9aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808d9ae:	bf00      	nop
 808d9b0:	200000dc 	.word	0x200000dc

0808d9b4 <strtol>:
 808d9b4:	4613      	mov	r3, r2
 808d9b6:	460a      	mov	r2, r1
 808d9b8:	4601      	mov	r1, r0
 808d9ba:	4802      	ldr	r0, [pc, #8]	; (808d9c4 <strtol+0x10>)
 808d9bc:	6800      	ldr	r0, [r0, #0]
 808d9be:	f7ff bf73 	b.w	808d8a8 <_strtol_r>
 808d9c2:	bf00      	nop
 808d9c4:	20000140 	.word	0x20000140

0808d9c8 <_strtoul_r>:
 808d9c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808d9cc:	460e      	mov	r6, r1
 808d9ce:	4680      	mov	r8, r0
 808d9d0:	483b      	ldr	r0, [pc, #236]	; (808dac0 <_strtoul_r+0xf8>)
 808d9d2:	f8d0 9000 	ldr.w	r9, [r0]
 808d9d6:	4635      	mov	r5, r6
 808d9d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 808d9dc:	eb09 0004 	add.w	r0, r9, r4
 808d9e0:	7840      	ldrb	r0, [r0, #1]
 808d9e2:	f000 0008 	and.w	r0, r0, #8
 808d9e6:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 808d9ea:	b108      	cbz	r0, 808d9f0 <_strtoul_r+0x28>
 808d9ec:	462e      	mov	r6, r5
 808d9ee:	e7f2      	b.n	808d9d6 <_strtoul_r+0xe>
 808d9f0:	2c2d      	cmp	r4, #45	; 0x2d
 808d9f2:	d103      	bne.n	808d9fc <_strtoul_r+0x34>
 808d9f4:	1cb5      	adds	r5, r6, #2
 808d9f6:	7874      	ldrb	r4, [r6, #1]
 808d9f8:	2701      	movs	r7, #1
 808d9fa:	e003      	b.n	808da04 <_strtoul_r+0x3c>
 808d9fc:	2c2b      	cmp	r4, #43	; 0x2b
 808d9fe:	bf04      	itt	eq
 808da00:	7874      	ldrbeq	r4, [r6, #1]
 808da02:	1cb5      	addeq	r5, r6, #2
 808da04:	b113      	cbz	r3, 808da0c <_strtoul_r+0x44>
 808da06:	2b10      	cmp	r3, #16
 808da08:	d10a      	bne.n	808da20 <_strtoul_r+0x58>
 808da0a:	e053      	b.n	808dab4 <_strtoul_r+0xec>
 808da0c:	2c30      	cmp	r4, #48	; 0x30
 808da0e:	d14f      	bne.n	808dab0 <_strtoul_r+0xe8>
 808da10:	7828      	ldrb	r0, [r5, #0]
 808da12:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 808da16:	2858      	cmp	r0, #88	; 0x58
 808da18:	d145      	bne.n	808daa6 <_strtoul_r+0xde>
 808da1a:	786c      	ldrb	r4, [r5, #1]
 808da1c:	2310      	movs	r3, #16
 808da1e:	3502      	adds	r5, #2
 808da20:	f04f 3cff 	mov.w	ip, #4294967295
 808da24:	fbbc fcf3 	udiv	ip, ip, r3
 808da28:	fb03 fa0c 	mul.w	sl, r3, ip
 808da2c:	2600      	movs	r6, #0
 808da2e:	ea6f 0a0a 	mvn.w	sl, sl
 808da32:	4630      	mov	r0, r6
 808da34:	eb09 0e04 	add.w	lr, r9, r4
 808da38:	f89e e001 	ldrb.w	lr, [lr, #1]
 808da3c:	f01e 0f04 	tst.w	lr, #4
 808da40:	d001      	beq.n	808da46 <_strtoul_r+0x7e>
 808da42:	3c30      	subs	r4, #48	; 0x30
 808da44:	e00b      	b.n	808da5e <_strtoul_r+0x96>
 808da46:	f01e 0e03 	ands.w	lr, lr, #3
 808da4a:	d01a      	beq.n	808da82 <_strtoul_r+0xba>
 808da4c:	f1be 0f01 	cmp.w	lr, #1
 808da50:	bf0c      	ite	eq
 808da52:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 808da56:	f04f 0e57 	movne.w	lr, #87	; 0x57
 808da5a:	ebce 0404 	rsb	r4, lr, r4
 808da5e:	42a3      	cmp	r3, r4
 808da60:	dd0f      	ble.n	808da82 <_strtoul_r+0xba>
 808da62:	2e00      	cmp	r6, #0
 808da64:	db08      	blt.n	808da78 <_strtoul_r+0xb0>
 808da66:	4560      	cmp	r0, ip
 808da68:	d806      	bhi.n	808da78 <_strtoul_r+0xb0>
 808da6a:	d101      	bne.n	808da70 <_strtoul_r+0xa8>
 808da6c:	4554      	cmp	r4, sl
 808da6e:	dc03      	bgt.n	808da78 <_strtoul_r+0xb0>
 808da70:	fb03 4000 	mla	r0, r3, r0, r4
 808da74:	2601      	movs	r6, #1
 808da76:	e001      	b.n	808da7c <_strtoul_r+0xb4>
 808da78:	f04f 36ff 	mov.w	r6, #4294967295
 808da7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 808da80:	e7d8      	b.n	808da34 <_strtoul_r+0x6c>
 808da82:	2e00      	cmp	r6, #0
 808da84:	da07      	bge.n	808da96 <_strtoul_r+0xce>
 808da86:	2322      	movs	r3, #34	; 0x22
 808da88:	f8c8 3000 	str.w	r3, [r8]
 808da8c:	f04f 30ff 	mov.w	r0, #4294967295
 808da90:	b92a      	cbnz	r2, 808da9e <_strtoul_r+0xd6>
 808da92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808da96:	b107      	cbz	r7, 808da9a <_strtoul_r+0xd2>
 808da98:	4240      	negs	r0, r0
 808da9a:	b172      	cbz	r2, 808daba <_strtoul_r+0xf2>
 808da9c:	b106      	cbz	r6, 808daa0 <_strtoul_r+0xd8>
 808da9e:	1e69      	subs	r1, r5, #1
 808daa0:	6011      	str	r1, [r2, #0]
 808daa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808daa6:	2430      	movs	r4, #48	; 0x30
 808daa8:	2b00      	cmp	r3, #0
 808daaa:	d1b9      	bne.n	808da20 <_strtoul_r+0x58>
 808daac:	2308      	movs	r3, #8
 808daae:	e7b7      	b.n	808da20 <_strtoul_r+0x58>
 808dab0:	230a      	movs	r3, #10
 808dab2:	e7b5      	b.n	808da20 <_strtoul_r+0x58>
 808dab4:	2c30      	cmp	r4, #48	; 0x30
 808dab6:	d0ab      	beq.n	808da10 <_strtoul_r+0x48>
 808dab8:	e7b2      	b.n	808da20 <_strtoul_r+0x58>
 808daba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808dabe:	bf00      	nop
 808dac0:	200000dc 	.word	0x200000dc

0808dac4 <strtoul>:
 808dac4:	4613      	mov	r3, r2
 808dac6:	460a      	mov	r2, r1
 808dac8:	4601      	mov	r1, r0
 808daca:	4802      	ldr	r0, [pc, #8]	; (808dad4 <strtoul+0x10>)
 808dacc:	6800      	ldr	r0, [r0, #0]
 808dace:	f7ff bf7b 	b.w	808d9c8 <_strtoul_r>
 808dad2:	bf00      	nop
 808dad4:	20000140 	.word	0x20000140

0808dad8 <__get_current_time_locale>:
 808dad8:	4b04      	ldr	r3, [pc, #16]	; (808daec <__get_current_time_locale+0x14>)
 808dada:	4a05      	ldr	r2, [pc, #20]	; (808daf0 <__get_current_time_locale+0x18>)
 808dadc:	6818      	ldr	r0, [r3, #0]
 808dade:	4b05      	ldr	r3, [pc, #20]	; (808daf4 <__get_current_time_locale+0x1c>)
 808dae0:	2800      	cmp	r0, #0
 808dae2:	bf14      	ite	ne
 808dae4:	4610      	movne	r0, r2
 808dae6:	4618      	moveq	r0, r3
 808dae8:	4770      	bx	lr
 808daea:	bf00      	nop
 808daec:	20000d94 	.word	0x20000d94
 808daf0:	20000d98 	.word	0x20000d98
 808daf4:	08091e3c 	.word	0x08091e3c

0808daf8 <__tzcalc_limits>:
 808daf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808dafc:	4604      	mov	r4, r0
 808dafe:	f000 fd91 	bl	808e624 <__gettzinfo>
 808db02:	f240 73b1 	movw	r3, #1969	; 0x7b1
 808db06:	429c      	cmp	r4, r3
 808db08:	f340 8096 	ble.w	808dc38 <__tzcalc_limits+0x140>
 808db0c:	f240 156d 	movw	r5, #365	; 0x16d
 808db10:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 808db14:	18e3      	adds	r3, r4, r3
 808db16:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 808db1a:	109b      	asrs	r3, r3, #2
 808db1c:	fb05 3502 	mla	r5, r5, r2, r3
 808db20:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 808db24:	f06f 0363 	mvn.w	r3, #99	; 0x63
 808db28:	fb92 f3f3 	sdiv	r3, r2, r3
 808db2c:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 808db30:	442b      	add	r3, r5
 808db32:	18a5      	adds	r5, r4, r2
 808db34:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808db38:	fb94 f7f2 	sdiv	r7, r4, r2
 808db3c:	fb95 f5f2 	sdiv	r5, r5, r2
 808db40:	fb02 4717 	mls	r7, r2, r7, r4
 808db44:	441d      	add	r5, r3
 808db46:	2364      	movs	r3, #100	; 0x64
 808db48:	fb94 f6f3 	sdiv	r6, r4, r3
 808db4c:	fab7 fe87 	clz	lr, r7
 808db50:	4601      	mov	r1, r0
 808db52:	fb03 4616 	mls	r6, r3, r6, r4
 808db56:	f100 0338 	add.w	r3, r0, #56	; 0x38
 808db5a:	9301      	str	r3, [sp, #4]
 808db5c:	f004 0303 	and.w	r3, r4, #3
 808db60:	6044      	str	r4, [r0, #4]
 808db62:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 808db66:	9300      	str	r3, [sp, #0]
 808db68:	f04f 0c07 	mov.w	ip, #7
 808db6c:	7a0b      	ldrb	r3, [r1, #8]
 808db6e:	2b4a      	cmp	r3, #74	; 0x4a
 808db70:	d10e      	bne.n	808db90 <__tzcalc_limits+0x98>
 808db72:	694b      	ldr	r3, [r1, #20]
 808db74:	9a00      	ldr	r2, [sp, #0]
 808db76:	18ec      	adds	r4, r5, r3
 808db78:	b902      	cbnz	r2, 808db7c <__tzcalc_limits+0x84>
 808db7a:	b906      	cbnz	r6, 808db7e <__tzcalc_limits+0x86>
 808db7c:	b927      	cbnz	r7, 808db88 <__tzcalc_limits+0x90>
 808db7e:	2b3b      	cmp	r3, #59	; 0x3b
 808db80:	bfd4      	ite	le
 808db82:	2300      	movle	r3, #0
 808db84:	2301      	movgt	r3, #1
 808db86:	e000      	b.n	808db8a <__tzcalc_limits+0x92>
 808db88:	2300      	movs	r3, #0
 808db8a:	4423      	add	r3, r4
 808db8c:	3b01      	subs	r3, #1
 808db8e:	e03f      	b.n	808dc10 <__tzcalc_limits+0x118>
 808db90:	2b44      	cmp	r3, #68	; 0x44
 808db92:	d102      	bne.n	808db9a <__tzcalc_limits+0xa2>
 808db94:	694b      	ldr	r3, [r1, #20]
 808db96:	442b      	add	r3, r5
 808db98:	e03a      	b.n	808dc10 <__tzcalc_limits+0x118>
 808db9a:	9b00      	ldr	r3, [sp, #0]
 808db9c:	b92b      	cbnz	r3, 808dbaa <__tzcalc_limits+0xb2>
 808db9e:	2e00      	cmp	r6, #0
 808dba0:	bf0c      	ite	eq
 808dba2:	46f0      	moveq	r8, lr
 808dba4:	f04f 0801 	movne.w	r8, #1
 808dba8:	e000      	b.n	808dbac <__tzcalc_limits+0xb4>
 808dbaa:	46f0      	mov	r8, lr
 808dbac:	46a9      	mov	r9, r5
 808dbae:	4b24      	ldr	r3, [pc, #144]	; (808dc40 <__tzcalc_limits+0x148>)
 808dbb0:	2230      	movs	r2, #48	; 0x30
 808dbb2:	fb02 3808 	mla	r8, r2, r8, r3
 808dbb6:	68cc      	ldr	r4, [r1, #12]
 808dbb8:	f1a8 0a04 	sub.w	sl, r8, #4
 808dbbc:	2301      	movs	r3, #1
 808dbbe:	42a3      	cmp	r3, r4
 808dbc0:	da04      	bge.n	808dbcc <__tzcalc_limits+0xd4>
 808dbc2:	f85a bf04 	ldr.w	fp, [sl, #4]!
 808dbc6:	3301      	adds	r3, #1
 808dbc8:	44d9      	add	r9, fp
 808dbca:	e7f8      	b.n	808dbbe <__tzcalc_limits+0xc6>
 808dbcc:	f109 0304 	add.w	r3, r9, #4
 808dbd0:	fb93 fbfc 	sdiv	fp, r3, ip
 808dbd4:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 808dbd8:	ebca 0a03 	rsb	sl, sl, r3
 808dbdc:	694b      	ldr	r3, [r1, #20]
 808dbde:	2c01      	cmp	r4, #1
 808dbe0:	bfb8      	it	lt
 808dbe2:	2401      	movlt	r4, #1
 808dbe4:	ebb3 0a0a 	subs.w	sl, r3, sl
 808dbe8:	690b      	ldr	r3, [r1, #16]
 808dbea:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 808dbee:	f103 33ff 	add.w	r3, r3, #4294967295
 808dbf2:	f104 34ff 	add.w	r4, r4, #4294967295
 808dbf6:	bf48      	it	mi
 808dbf8:	f10a 0a07 	addmi.w	sl, sl, #7
 808dbfc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 808dc00:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 808dc04:	4453      	add	r3, sl
 808dc06:	42a3      	cmp	r3, r4
 808dc08:	db01      	blt.n	808dc0e <__tzcalc_limits+0x116>
 808dc0a:	3b07      	subs	r3, #7
 808dc0c:	e7fb      	b.n	808dc06 <__tzcalc_limits+0x10e>
 808dc0e:	444b      	add	r3, r9
 808dc10:	698c      	ldr	r4, [r1, #24]
 808dc12:	4a0c      	ldr	r2, [pc, #48]	; (808dc44 <__tzcalc_limits+0x14c>)
 808dc14:	fb02 4303 	mla	r3, r2, r3, r4
 808dc18:	6a0c      	ldr	r4, [r1, #32]
 808dc1a:	4423      	add	r3, r4
 808dc1c:	f841 3f1c 	str.w	r3, [r1, #28]!
 808dc20:	9b01      	ldr	r3, [sp, #4]
 808dc22:	4299      	cmp	r1, r3
 808dc24:	d1a2      	bne.n	808db6c <__tzcalc_limits+0x74>
 808dc26:	69c3      	ldr	r3, [r0, #28]
 808dc28:	6b82      	ldr	r2, [r0, #56]	; 0x38
 808dc2a:	4293      	cmp	r3, r2
 808dc2c:	bfac      	ite	ge
 808dc2e:	2300      	movge	r3, #0
 808dc30:	2301      	movlt	r3, #1
 808dc32:	6003      	str	r3, [r0, #0]
 808dc34:	2001      	movs	r0, #1
 808dc36:	e000      	b.n	808dc3a <__tzcalc_limits+0x142>
 808dc38:	2000      	movs	r0, #0
 808dc3a:	b003      	add	sp, #12
 808dc3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808dc40:	08091c04 	.word	0x08091c04
 808dc44:	00015180 	.word	0x00015180

0808dc48 <__tz_lock>:
 808dc48:	4770      	bx	lr

0808dc4a <__tz_unlock>:
 808dc4a:	4770      	bx	lr

0808dc4c <_tzset_unlocked>:
 808dc4c:	4b01      	ldr	r3, [pc, #4]	; (808dc54 <_tzset_unlocked+0x8>)
 808dc4e:	6818      	ldr	r0, [r3, #0]
 808dc50:	f000 b802 	b.w	808dc58 <_tzset_unlocked_r>
 808dc54:	20000140 	.word	0x20000140

0808dc58 <_tzset_unlocked_r>:
 808dc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808dc5c:	b08d      	sub	sp, #52	; 0x34
 808dc5e:	4607      	mov	r7, r0
 808dc60:	f000 fce0 	bl	808e624 <__gettzinfo>
 808dc64:	49b0      	ldr	r1, [pc, #704]	; (808df28 <_tzset_unlocked_r+0x2d0>)
 808dc66:	4604      	mov	r4, r0
 808dc68:	4638      	mov	r0, r7
 808dc6a:	f000 fcd3 	bl	808e614 <_getenv_r>
 808dc6e:	4eaf      	ldr	r6, [pc, #700]	; (808df2c <_tzset_unlocked_r+0x2d4>)
 808dc70:	4605      	mov	r5, r0
 808dc72:	b960      	cbnz	r0, 808dc8e <_tzset_unlocked_r+0x36>
 808dc74:	4bae      	ldr	r3, [pc, #696]	; (808df30 <_tzset_unlocked_r+0x2d8>)
 808dc76:	4aaf      	ldr	r2, [pc, #700]	; (808df34 <_tzset_unlocked_r+0x2dc>)
 808dc78:	6018      	str	r0, [r3, #0]
 808dc7a:	4baf      	ldr	r3, [pc, #700]	; (808df38 <_tzset_unlocked_r+0x2e0>)
 808dc7c:	6018      	str	r0, [r3, #0]
 808dc7e:	4baf      	ldr	r3, [pc, #700]	; (808df3c <_tzset_unlocked_r+0x2e4>)
 808dc80:	6830      	ldr	r0, [r6, #0]
 808dc82:	601a      	str	r2, [r3, #0]
 808dc84:	605a      	str	r2, [r3, #4]
 808dc86:	f7fa fc83 	bl	8088590 <free>
 808dc8a:	6035      	str	r5, [r6, #0]
 808dc8c:	e148      	b.n	808df20 <_tzset_unlocked_r+0x2c8>
 808dc8e:	6831      	ldr	r1, [r6, #0]
 808dc90:	b979      	cbnz	r1, 808dcb2 <_tzset_unlocked_r+0x5a>
 808dc92:	6830      	ldr	r0, [r6, #0]
 808dc94:	f7fa fc7c 	bl	8088590 <free>
 808dc98:	4628      	mov	r0, r5
 808dc9a:	f7fe ff8f 	bl	808cbbc <strlen>
 808dc9e:	1c41      	adds	r1, r0, #1
 808dca0:	4638      	mov	r0, r7
 808dca2:	f7fa fcbd 	bl	8088620 <_malloc_r>
 808dca6:	6030      	str	r0, [r6, #0]
 808dca8:	b148      	cbz	r0, 808dcbe <_tzset_unlocked_r+0x66>
 808dcaa:	4629      	mov	r1, r5
 808dcac:	f7fe fa4e 	bl	808c14c <strcpy>
 808dcb0:	e005      	b.n	808dcbe <_tzset_unlocked_r+0x66>
 808dcb2:	f7fe fa41 	bl	808c138 <strcmp>
 808dcb6:	2800      	cmp	r0, #0
 808dcb8:	f000 8132 	beq.w	808df20 <_tzset_unlocked_r+0x2c8>
 808dcbc:	e7e9      	b.n	808dc92 <_tzset_unlocked_r+0x3a>
 808dcbe:	782b      	ldrb	r3, [r5, #0]
 808dcc0:	ae0a      	add	r6, sp, #40	; 0x28
 808dcc2:	2b3a      	cmp	r3, #58	; 0x3a
 808dcc4:	bf08      	it	eq
 808dcc6:	3501      	addeq	r5, #1
 808dcc8:	4633      	mov	r3, r6
 808dcca:	4a9d      	ldr	r2, [pc, #628]	; (808df40 <_tzset_unlocked_r+0x2e8>)
 808dccc:	499d      	ldr	r1, [pc, #628]	; (808df44 <_tzset_unlocked_r+0x2ec>)
 808dcce:	4628      	mov	r0, r5
 808dcd0:	f7fa fc7e 	bl	80885d0 <siscanf>
 808dcd4:	2800      	cmp	r0, #0
 808dcd6:	f340 8123 	ble.w	808df20 <_tzset_unlocked_r+0x2c8>
 808dcda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808dcdc:	18ef      	adds	r7, r5, r3
 808dcde:	5ceb      	ldrb	r3, [r5, r3]
 808dce0:	2b2d      	cmp	r3, #45	; 0x2d
 808dce2:	d103      	bne.n	808dcec <_tzset_unlocked_r+0x94>
 808dce4:	3701      	adds	r7, #1
 808dce6:	f04f 35ff 	mov.w	r5, #4294967295
 808dcea:	e003      	b.n	808dcf4 <_tzset_unlocked_r+0x9c>
 808dcec:	2b2b      	cmp	r3, #43	; 0x2b
 808dcee:	bf08      	it	eq
 808dcf0:	3701      	addeq	r7, #1
 808dcf2:	2501      	movs	r5, #1
 808dcf4:	f10d 0a20 	add.w	sl, sp, #32
 808dcf8:	f10d 0b1e 	add.w	fp, sp, #30
 808dcfc:	f04f 0800 	mov.w	r8, #0
 808dd00:	9603      	str	r6, [sp, #12]
 808dd02:	f8cd a008 	str.w	sl, [sp, #8]
 808dd06:	9601      	str	r6, [sp, #4]
 808dd08:	f8cd b000 	str.w	fp, [sp]
 808dd0c:	4633      	mov	r3, r6
 808dd0e:	aa07      	add	r2, sp, #28
 808dd10:	498d      	ldr	r1, [pc, #564]	; (808df48 <_tzset_unlocked_r+0x2f0>)
 808dd12:	4638      	mov	r0, r7
 808dd14:	f8ad 801e 	strh.w	r8, [sp, #30]
 808dd18:	f8ad 8020 	strh.w	r8, [sp, #32]
 808dd1c:	f7fa fc58 	bl	80885d0 <siscanf>
 808dd20:	4540      	cmp	r0, r8
 808dd22:	f340 80fd 	ble.w	808df20 <_tzset_unlocked_r+0x2c8>
 808dd26:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 808dd2a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808dd2e:	213c      	movs	r1, #60	; 0x3c
 808dd30:	fb01 3302 	mla	r3, r1, r2, r3
 808dd34:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 808dd38:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 808dd3c:	fb01 3302 	mla	r3, r1, r2, r3
 808dd40:	435d      	muls	r5, r3
 808dd42:	4b7f      	ldr	r3, [pc, #508]	; (808df40 <_tzset_unlocked_r+0x2e8>)
 808dd44:	6225      	str	r5, [r4, #32]
 808dd46:	4d7d      	ldr	r5, [pc, #500]	; (808df3c <_tzset_unlocked_r+0x2e4>)
 808dd48:	f8df 9208 	ldr.w	r9, [pc, #520]	; 808df54 <_tzset_unlocked_r+0x2fc>
 808dd4c:	602b      	str	r3, [r5, #0]
 808dd4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808dd50:	464a      	mov	r2, r9
 808dd52:	441f      	add	r7, r3
 808dd54:	497b      	ldr	r1, [pc, #492]	; (808df44 <_tzset_unlocked_r+0x2ec>)
 808dd56:	4633      	mov	r3, r6
 808dd58:	4638      	mov	r0, r7
 808dd5a:	f7fa fc39 	bl	80885d0 <siscanf>
 808dd5e:	4540      	cmp	r0, r8
 808dd60:	dc08      	bgt.n	808dd74 <_tzset_unlocked_r+0x11c>
 808dd62:	682b      	ldr	r3, [r5, #0]
 808dd64:	6a22      	ldr	r2, [r4, #32]
 808dd66:	606b      	str	r3, [r5, #4]
 808dd68:	4b71      	ldr	r3, [pc, #452]	; (808df30 <_tzset_unlocked_r+0x2d8>)
 808dd6a:	601a      	str	r2, [r3, #0]
 808dd6c:	4b72      	ldr	r3, [pc, #456]	; (808df38 <_tzset_unlocked_r+0x2e0>)
 808dd6e:	f8c3 8000 	str.w	r8, [r3]
 808dd72:	e0d5      	b.n	808df20 <_tzset_unlocked_r+0x2c8>
 808dd74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808dd76:	f8c5 9004 	str.w	r9, [r5, #4]
 808dd7a:	18fd      	adds	r5, r7, r3
 808dd7c:	5cfb      	ldrb	r3, [r7, r3]
 808dd7e:	2b2d      	cmp	r3, #45	; 0x2d
 808dd80:	d103      	bne.n	808dd8a <_tzset_unlocked_r+0x132>
 808dd82:	3501      	adds	r5, #1
 808dd84:	f04f 37ff 	mov.w	r7, #4294967295
 808dd88:	e003      	b.n	808dd92 <_tzset_unlocked_r+0x13a>
 808dd8a:	2b2b      	cmp	r3, #43	; 0x2b
 808dd8c:	bf08      	it	eq
 808dd8e:	3501      	addeq	r5, #1
 808dd90:	2701      	movs	r7, #1
 808dd92:	2300      	movs	r3, #0
 808dd94:	f8ad 301c 	strh.w	r3, [sp, #28]
 808dd98:	f8ad 301e 	strh.w	r3, [sp, #30]
 808dd9c:	f8ad 3020 	strh.w	r3, [sp, #32]
 808dda0:	930a      	str	r3, [sp, #40]	; 0x28
 808dda2:	9603      	str	r6, [sp, #12]
 808dda4:	f8cd a008 	str.w	sl, [sp, #8]
 808dda8:	9601      	str	r6, [sp, #4]
 808ddaa:	f8cd b000 	str.w	fp, [sp]
 808ddae:	4633      	mov	r3, r6
 808ddb0:	aa07      	add	r2, sp, #28
 808ddb2:	4965      	ldr	r1, [pc, #404]	; (808df48 <_tzset_unlocked_r+0x2f0>)
 808ddb4:	4628      	mov	r0, r5
 808ddb6:	f7fa fc0b 	bl	80885d0 <siscanf>
 808ddba:	2800      	cmp	r0, #0
 808ddbc:	dc04      	bgt.n	808ddc8 <_tzset_unlocked_r+0x170>
 808ddbe:	6a23      	ldr	r3, [r4, #32]
 808ddc0:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 808ddc4:	63e3      	str	r3, [r4, #60]	; 0x3c
 808ddc6:	e00e      	b.n	808dde6 <_tzset_unlocked_r+0x18e>
 808ddc8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 808ddcc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808ddd0:	213c      	movs	r1, #60	; 0x3c
 808ddd2:	fb01 3302 	mla	r3, r1, r2, r3
 808ddd6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 808ddda:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 808ddde:	fb01 3302 	mla	r3, r1, r2, r3
 808dde2:	435f      	muls	r7, r3
 808dde4:	63e7      	str	r7, [r4, #60]	; 0x3c
 808dde6:	4627      	mov	r7, r4
 808dde8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808ddea:	f04f 0900 	mov.w	r9, #0
 808ddee:	441d      	add	r5, r3
 808ddf0:	782b      	ldrb	r3, [r5, #0]
 808ddf2:	2b2c      	cmp	r3, #44	; 0x2c
 808ddf4:	bf08      	it	eq
 808ddf6:	3501      	addeq	r5, #1
 808ddf8:	f895 8000 	ldrb.w	r8, [r5]
 808ddfc:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 808de00:	d126      	bne.n	808de50 <_tzset_unlocked_r+0x1f8>
 808de02:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 808de06:	9302      	str	r3, [sp, #8]
 808de08:	ab09      	add	r3, sp, #36	; 0x24
 808de0a:	9300      	str	r3, [sp, #0]
 808de0c:	9603      	str	r6, [sp, #12]
 808de0e:	9601      	str	r6, [sp, #4]
 808de10:	4633      	mov	r3, r6
 808de12:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 808de16:	494d      	ldr	r1, [pc, #308]	; (808df4c <_tzset_unlocked_r+0x2f4>)
 808de18:	4628      	mov	r0, r5
 808de1a:	f7fa fbd9 	bl	80885d0 <siscanf>
 808de1e:	2803      	cmp	r0, #3
 808de20:	d17e      	bne.n	808df20 <_tzset_unlocked_r+0x2c8>
 808de22:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 808de26:	1e4b      	subs	r3, r1, #1
 808de28:	2b0b      	cmp	r3, #11
 808de2a:	d879      	bhi.n	808df20 <_tzset_unlocked_r+0x2c8>
 808de2c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 808de30:	1e53      	subs	r3, r2, #1
 808de32:	2b04      	cmp	r3, #4
 808de34:	d874      	bhi.n	808df20 <_tzset_unlocked_r+0x2c8>
 808de36:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 808de3a:	2b06      	cmp	r3, #6
 808de3c:	d870      	bhi.n	808df20 <_tzset_unlocked_r+0x2c8>
 808de3e:	f887 8008 	strb.w	r8, [r7, #8]
 808de42:	60f9      	str	r1, [r7, #12]
 808de44:	613a      	str	r2, [r7, #16]
 808de46:	617b      	str	r3, [r7, #20]
 808de48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808de4a:	eb05 0803 	add.w	r8, r5, r3
 808de4e:	e02a      	b.n	808dea6 <_tzset_unlocked_r+0x24e>
 808de50:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 808de54:	bf06      	itte	eq
 808de56:	4643      	moveq	r3, r8
 808de58:	3501      	addeq	r5, #1
 808de5a:	2344      	movne	r3, #68	; 0x44
 808de5c:	220a      	movs	r2, #10
 808de5e:	a90b      	add	r1, sp, #44	; 0x2c
 808de60:	4628      	mov	r0, r5
 808de62:	9305      	str	r3, [sp, #20]
 808de64:	f7ff fe2e 	bl	808dac4 <strtoul>
 808de68:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 808de6c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 808de70:	4545      	cmp	r5, r8
 808de72:	9b05      	ldr	r3, [sp, #20]
 808de74:	d114      	bne.n	808dea0 <_tzset_unlocked_r+0x248>
 808de76:	234d      	movs	r3, #77	; 0x4d
 808de78:	f1b9 0f00 	cmp.w	r9, #0
 808de7c:	d107      	bne.n	808de8e <_tzset_unlocked_r+0x236>
 808de7e:	7223      	strb	r3, [r4, #8]
 808de80:	2303      	movs	r3, #3
 808de82:	60e3      	str	r3, [r4, #12]
 808de84:	2302      	movs	r3, #2
 808de86:	6123      	str	r3, [r4, #16]
 808de88:	f8c4 9014 	str.w	r9, [r4, #20]
 808de8c:	e00b      	b.n	808dea6 <_tzset_unlocked_r+0x24e>
 808de8e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 808de92:	230b      	movs	r3, #11
 808de94:	62a3      	str	r3, [r4, #40]	; 0x28
 808de96:	2301      	movs	r3, #1
 808de98:	62e3      	str	r3, [r4, #44]	; 0x2c
 808de9a:	2300      	movs	r3, #0
 808de9c:	6323      	str	r3, [r4, #48]	; 0x30
 808de9e:	e002      	b.n	808dea6 <_tzset_unlocked_r+0x24e>
 808dea0:	b280      	uxth	r0, r0
 808dea2:	723b      	strb	r3, [r7, #8]
 808dea4:	6178      	str	r0, [r7, #20]
 808dea6:	2302      	movs	r3, #2
 808dea8:	f8ad 301c 	strh.w	r3, [sp, #28]
 808deac:	2300      	movs	r3, #0
 808deae:	f8ad 301e 	strh.w	r3, [sp, #30]
 808deb2:	f8ad 3020 	strh.w	r3, [sp, #32]
 808deb6:	930a      	str	r3, [sp, #40]	; 0x28
 808deb8:	f898 3000 	ldrb.w	r3, [r8]
 808debc:	2b2f      	cmp	r3, #47	; 0x2f
 808debe:	d10b      	bne.n	808ded8 <_tzset_unlocked_r+0x280>
 808dec0:	9603      	str	r6, [sp, #12]
 808dec2:	f8cd a008 	str.w	sl, [sp, #8]
 808dec6:	9601      	str	r6, [sp, #4]
 808dec8:	f8cd b000 	str.w	fp, [sp]
 808decc:	4633      	mov	r3, r6
 808dece:	aa07      	add	r2, sp, #28
 808ded0:	491f      	ldr	r1, [pc, #124]	; (808df50 <_tzset_unlocked_r+0x2f8>)
 808ded2:	4640      	mov	r0, r8
 808ded4:	f7fa fb7c 	bl	80885d0 <siscanf>
 808ded8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 808dedc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808dee0:	213c      	movs	r1, #60	; 0x3c
 808dee2:	fb01 3302 	mla	r3, r1, r2, r3
 808dee6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 808deea:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 808deee:	fb01 3302 	mla	r3, r1, r2, r3
 808def2:	61bb      	str	r3, [r7, #24]
 808def4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808def6:	f109 0901 	add.w	r9, r9, #1
 808defa:	f1b9 0f02 	cmp.w	r9, #2
 808defe:	4445      	add	r5, r8
 808df00:	f107 071c 	add.w	r7, r7, #28
 808df04:	f47f af74 	bne.w	808ddf0 <_tzset_unlocked_r+0x198>
 808df08:	6860      	ldr	r0, [r4, #4]
 808df0a:	f7ff fdf5 	bl	808daf8 <__tzcalc_limits>
 808df0e:	6a22      	ldr	r2, [r4, #32]
 808df10:	4b07      	ldr	r3, [pc, #28]	; (808df30 <_tzset_unlocked_r+0x2d8>)
 808df12:	601a      	str	r2, [r3, #0]
 808df14:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 808df16:	1a9b      	subs	r3, r3, r2
 808df18:	4a07      	ldr	r2, [pc, #28]	; (808df38 <_tzset_unlocked_r+0x2e0>)
 808df1a:	bf18      	it	ne
 808df1c:	2301      	movne	r3, #1
 808df1e:	6013      	str	r3, [r2, #0]
 808df20:	b00d      	add	sp, #52	; 0x34
 808df22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808df26:	bf00      	nop
 808df28:	08091f38 	.word	0x08091f38
 808df2c:	20000eac 	.word	0x20000eac
 808df30:	20000eb4 	.word	0x20000eb4
 808df34:	08091f3b 	.word	0x08091f3b
 808df38:	20000eb0 	.word	0x20000eb0
 808df3c:	2000017c 	.word	0x2000017c
 808df40:	20000e9f 	.word	0x20000e9f
 808df44:	08091f3f 	.word	0x08091f3f
 808df48:	08091f62 	.word	0x08091f62
 808df4c:	08091f4e 	.word	0x08091f4e
 808df50:	08091f61 	.word	0x08091f61
 808df54:	20000e94 	.word	0x20000e94

0808df58 <abs>:
 808df58:	2800      	cmp	r0, #0
 808df5a:	bfb8      	it	lt
 808df5c:	4240      	neglt	r0, r0
 808df5e:	4770      	bx	lr

0808df60 <rshift>:
 808df60:	b5f0      	push	{r4, r5, r6, r7, lr}
 808df62:	6906      	ldr	r6, [r0, #16]
 808df64:	114b      	asrs	r3, r1, #5
 808df66:	42b3      	cmp	r3, r6
 808df68:	f100 0514 	add.w	r5, r0, #20
 808df6c:	da27      	bge.n	808dfbe <rshift+0x5e>
 808df6e:	f011 011f 	ands.w	r1, r1, #31
 808df72:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 808df76:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 808df7a:	d101      	bne.n	808df80 <rshift+0x20>
 808df7c:	4629      	mov	r1, r5
 808df7e:	e016      	b.n	808dfae <rshift+0x4e>
 808df80:	1d14      	adds	r4, r2, #4
 808df82:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 808df86:	462b      	mov	r3, r5
 808df88:	f1c1 0e20 	rsb	lr, r1, #32
 808df8c:	40ca      	lsrs	r2, r1
 808df8e:	42b4      	cmp	r4, r6
 808df90:	d209      	bcs.n	808dfa6 <rshift+0x46>
 808df92:	6827      	ldr	r7, [r4, #0]
 808df94:	fa07 f70e 	lsl.w	r7, r7, lr
 808df98:	433a      	orrs	r2, r7
 808df9a:	f843 2b04 	str.w	r2, [r3], #4
 808df9e:	f854 2b04 	ldr.w	r2, [r4], #4
 808dfa2:	40ca      	lsrs	r2, r1
 808dfa4:	e7f3      	b.n	808df8e <rshift+0x2e>
 808dfa6:	601a      	str	r2, [r3, #0]
 808dfa8:	b152      	cbz	r2, 808dfc0 <rshift+0x60>
 808dfaa:	3304      	adds	r3, #4
 808dfac:	e008      	b.n	808dfc0 <rshift+0x60>
 808dfae:	42b2      	cmp	r2, r6
 808dfb0:	460b      	mov	r3, r1
 808dfb2:	d205      	bcs.n	808dfc0 <rshift+0x60>
 808dfb4:	f852 3b04 	ldr.w	r3, [r2], #4
 808dfb8:	f841 3b04 	str.w	r3, [r1], #4
 808dfbc:	e7f7      	b.n	808dfae <rshift+0x4e>
 808dfbe:	462b      	mov	r3, r5
 808dfc0:	1b5b      	subs	r3, r3, r5
 808dfc2:	109b      	asrs	r3, r3, #2
 808dfc4:	6103      	str	r3, [r0, #16]
 808dfc6:	b903      	cbnz	r3, 808dfca <rshift+0x6a>
 808dfc8:	6143      	str	r3, [r0, #20]
 808dfca:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808dfcc <__hexdig_fun>:
 808dfcc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 808dfd0:	2b09      	cmp	r3, #9
 808dfd2:	d801      	bhi.n	808dfd8 <__hexdig_fun+0xc>
 808dfd4:	3820      	subs	r0, #32
 808dfd6:	e00a      	b.n	808dfee <__hexdig_fun+0x22>
 808dfd8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 808dfdc:	2b05      	cmp	r3, #5
 808dfde:	d801      	bhi.n	808dfe4 <__hexdig_fun+0x18>
 808dfe0:	3847      	subs	r0, #71	; 0x47
 808dfe2:	e004      	b.n	808dfee <__hexdig_fun+0x22>
 808dfe4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 808dfe8:	2b05      	cmp	r3, #5
 808dfea:	d802      	bhi.n	808dff2 <__hexdig_fun+0x26>
 808dfec:	3827      	subs	r0, #39	; 0x27
 808dfee:	b2c0      	uxtb	r0, r0
 808dff0:	4770      	bx	lr
 808dff2:	2000      	movs	r0, #0
 808dff4:	4770      	bx	lr

0808dff6 <__gethex>:
 808dff6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808dffa:	b08b      	sub	sp, #44	; 0x2c
 808dffc:	468a      	mov	sl, r1
 808dffe:	4690      	mov	r8, r2
 808e000:	9306      	str	r3, [sp, #24]
 808e002:	9002      	str	r0, [sp, #8]
 808e004:	f7fe f83c 	bl	808c080 <_localeconv_r>
 808e008:	6803      	ldr	r3, [r0, #0]
 808e00a:	f04f 0b00 	mov.w	fp, #0
 808e00e:	4618      	mov	r0, r3
 808e010:	9303      	str	r3, [sp, #12]
 808e012:	f7fe fdd3 	bl	808cbbc <strlen>
 808e016:	9b03      	ldr	r3, [sp, #12]
 808e018:	9001      	str	r0, [sp, #4]
 808e01a:	4403      	add	r3, r0
 808e01c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 808e020:	9307      	str	r3, [sp, #28]
 808e022:	f8da 3000 	ldr.w	r3, [sl]
 808e026:	3302      	adds	r3, #2
 808e028:	461f      	mov	r7, r3
 808e02a:	f813 0b01 	ldrb.w	r0, [r3], #1
 808e02e:	2830      	cmp	r0, #48	; 0x30
 808e030:	d102      	bne.n	808e038 <__gethex+0x42>
 808e032:	f10b 0b01 	add.w	fp, fp, #1
 808e036:	e7f7      	b.n	808e028 <__gethex+0x32>
 808e038:	f7ff ffc8 	bl	808dfcc <__hexdig_fun>
 808e03c:	4604      	mov	r4, r0
 808e03e:	b9e0      	cbnz	r0, 808e07a <__gethex+0x84>
 808e040:	9a01      	ldr	r2, [sp, #4]
 808e042:	9903      	ldr	r1, [sp, #12]
 808e044:	4638      	mov	r0, r7
 808e046:	f7fe fdc1 	bl	808cbcc <strncmp>
 808e04a:	2800      	cmp	r0, #0
 808e04c:	d134      	bne.n	808e0b8 <__gethex+0xc2>
 808e04e:	9b01      	ldr	r3, [sp, #4]
 808e050:	5cf8      	ldrb	r0, [r7, r3]
 808e052:	18fe      	adds	r6, r7, r3
 808e054:	f7ff ffba 	bl	808dfcc <__hexdig_fun>
 808e058:	b380      	cbz	r0, 808e0bc <__gethex+0xc6>
 808e05a:	4633      	mov	r3, r6
 808e05c:	7818      	ldrb	r0, [r3, #0]
 808e05e:	461f      	mov	r7, r3
 808e060:	2830      	cmp	r0, #48	; 0x30
 808e062:	f103 0301 	add.w	r3, r3, #1
 808e066:	d0f9      	beq.n	808e05c <__gethex+0x66>
 808e068:	f7ff ffb0 	bl	808dfcc <__hexdig_fun>
 808e06c:	fab0 f580 	clz	r5, r0
 808e070:	4634      	mov	r4, r6
 808e072:	096d      	lsrs	r5, r5, #5
 808e074:	f04f 0b01 	mov.w	fp, #1
 808e078:	e001      	b.n	808e07e <__gethex+0x88>
 808e07a:	2500      	movs	r5, #0
 808e07c:	462c      	mov	r4, r5
 808e07e:	463a      	mov	r2, r7
 808e080:	4616      	mov	r6, r2
 808e082:	7830      	ldrb	r0, [r6, #0]
 808e084:	3201      	adds	r2, #1
 808e086:	f7ff ffa1 	bl	808dfcc <__hexdig_fun>
 808e08a:	2800      	cmp	r0, #0
 808e08c:	d1f8      	bne.n	808e080 <__gethex+0x8a>
 808e08e:	9a01      	ldr	r2, [sp, #4]
 808e090:	9903      	ldr	r1, [sp, #12]
 808e092:	4630      	mov	r0, r6
 808e094:	f7fe fd9a 	bl	808cbcc <strncmp>
 808e098:	b950      	cbnz	r0, 808e0b0 <__gethex+0xba>
 808e09a:	b954      	cbnz	r4, 808e0b2 <__gethex+0xbc>
 808e09c:	9b01      	ldr	r3, [sp, #4]
 808e09e:	18f4      	adds	r4, r6, r3
 808e0a0:	4622      	mov	r2, r4
 808e0a2:	4616      	mov	r6, r2
 808e0a4:	7830      	ldrb	r0, [r6, #0]
 808e0a6:	3201      	adds	r2, #1
 808e0a8:	f7ff ff90 	bl	808dfcc <__hexdig_fun>
 808e0ac:	2800      	cmp	r0, #0
 808e0ae:	d1f8      	bne.n	808e0a2 <__gethex+0xac>
 808e0b0:	b134      	cbz	r4, 808e0c0 <__gethex+0xca>
 808e0b2:	1ba4      	subs	r4, r4, r6
 808e0b4:	00a4      	lsls	r4, r4, #2
 808e0b6:	e003      	b.n	808e0c0 <__gethex+0xca>
 808e0b8:	463e      	mov	r6, r7
 808e0ba:	e000      	b.n	808e0be <__gethex+0xc8>
 808e0bc:	4604      	mov	r4, r0
 808e0be:	2501      	movs	r5, #1
 808e0c0:	7833      	ldrb	r3, [r6, #0]
 808e0c2:	2b50      	cmp	r3, #80	; 0x50
 808e0c4:	d001      	beq.n	808e0ca <__gethex+0xd4>
 808e0c6:	2b70      	cmp	r3, #112	; 0x70
 808e0c8:	d12a      	bne.n	808e120 <__gethex+0x12a>
 808e0ca:	7873      	ldrb	r3, [r6, #1]
 808e0cc:	2b2b      	cmp	r3, #43	; 0x2b
 808e0ce:	d008      	beq.n	808e0e2 <__gethex+0xec>
 808e0d0:	2b2d      	cmp	r3, #45	; 0x2d
 808e0d2:	d003      	beq.n	808e0dc <__gethex+0xe6>
 808e0d4:	1c71      	adds	r1, r6, #1
 808e0d6:	f04f 0900 	mov.w	r9, #0
 808e0da:	e005      	b.n	808e0e8 <__gethex+0xf2>
 808e0dc:	f04f 0901 	mov.w	r9, #1
 808e0e0:	e001      	b.n	808e0e6 <__gethex+0xf0>
 808e0e2:	f04f 0900 	mov.w	r9, #0
 808e0e6:	1cb1      	adds	r1, r6, #2
 808e0e8:	7808      	ldrb	r0, [r1, #0]
 808e0ea:	f7ff ff6f 	bl	808dfcc <__hexdig_fun>
 808e0ee:	1e43      	subs	r3, r0, #1
 808e0f0:	b2db      	uxtb	r3, r3
 808e0f2:	2b18      	cmp	r3, #24
 808e0f4:	d814      	bhi.n	808e120 <__gethex+0x12a>
 808e0f6:	f1a0 0210 	sub.w	r2, r0, #16
 808e0fa:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 808e0fe:	f7ff ff65 	bl	808dfcc <__hexdig_fun>
 808e102:	1e43      	subs	r3, r0, #1
 808e104:	b2db      	uxtb	r3, r3
 808e106:	2b18      	cmp	r3, #24
 808e108:	d804      	bhi.n	808e114 <__gethex+0x11e>
 808e10a:	230a      	movs	r3, #10
 808e10c:	fb03 0202 	mla	r2, r3, r2, r0
 808e110:	3a10      	subs	r2, #16
 808e112:	e7f2      	b.n	808e0fa <__gethex+0x104>
 808e114:	f1b9 0f00 	cmp.w	r9, #0
 808e118:	d000      	beq.n	808e11c <__gethex+0x126>
 808e11a:	4252      	negs	r2, r2
 808e11c:	4414      	add	r4, r2
 808e11e:	e000      	b.n	808e122 <__gethex+0x12c>
 808e120:	4631      	mov	r1, r6
 808e122:	f8ca 1000 	str.w	r1, [sl]
 808e126:	b12d      	cbz	r5, 808e134 <__gethex+0x13e>
 808e128:	f1bb 0f00 	cmp.w	fp, #0
 808e12c:	bf14      	ite	ne
 808e12e:	2000      	movne	r0, #0
 808e130:	2006      	moveq	r0, #6
 808e132:	e17c      	b.n	808e42e <__gethex+0x438>
 808e134:	4629      	mov	r1, r5
 808e136:	1bf3      	subs	r3, r6, r7
 808e138:	3b01      	subs	r3, #1
 808e13a:	2b07      	cmp	r3, #7
 808e13c:	dd02      	ble.n	808e144 <__gethex+0x14e>
 808e13e:	3101      	adds	r1, #1
 808e140:	105b      	asrs	r3, r3, #1
 808e142:	e7fa      	b.n	808e13a <__gethex+0x144>
 808e144:	9802      	ldr	r0, [sp, #8]
 808e146:	f000 fb0b 	bl	808e760 <_Balloc>
 808e14a:	f04f 0900 	mov.w	r9, #0
 808e14e:	4605      	mov	r5, r0
 808e150:	46cb      	mov	fp, r9
 808e152:	9b01      	ldr	r3, [sp, #4]
 808e154:	f100 0a14 	add.w	sl, r0, #20
 808e158:	f1c3 0301 	rsb	r3, r3, #1
 808e15c:	f8cd a010 	str.w	sl, [sp, #16]
 808e160:	9308      	str	r3, [sp, #32]
 808e162:	42b7      	cmp	r7, r6
 808e164:	d22f      	bcs.n	808e1c6 <__gethex+0x1d0>
 808e166:	1e73      	subs	r3, r6, #1
 808e168:	9305      	str	r3, [sp, #20]
 808e16a:	9a07      	ldr	r2, [sp, #28]
 808e16c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 808e170:	4293      	cmp	r3, r2
 808e172:	d00b      	beq.n	808e18c <__gethex+0x196>
 808e174:	f1bb 0f20 	cmp.w	fp, #32
 808e178:	d116      	bne.n	808e1a8 <__gethex+0x1b2>
 808e17a:	9b04      	ldr	r3, [sp, #16]
 808e17c:	f8c3 9000 	str.w	r9, [r3]
 808e180:	3304      	adds	r3, #4
 808e182:	f04f 0900 	mov.w	r9, #0
 808e186:	9304      	str	r3, [sp, #16]
 808e188:	46cb      	mov	fp, r9
 808e18a:	e00d      	b.n	808e1a8 <__gethex+0x1b2>
 808e18c:	9b05      	ldr	r3, [sp, #20]
 808e18e:	9a08      	ldr	r2, [sp, #32]
 808e190:	4413      	add	r3, r2
 808e192:	429f      	cmp	r7, r3
 808e194:	d8ee      	bhi.n	808e174 <__gethex+0x17e>
 808e196:	4618      	mov	r0, r3
 808e198:	9a01      	ldr	r2, [sp, #4]
 808e19a:	9903      	ldr	r1, [sp, #12]
 808e19c:	9309      	str	r3, [sp, #36]	; 0x24
 808e19e:	f7fe fd15 	bl	808cbcc <strncmp>
 808e1a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808e1a4:	b168      	cbz	r0, 808e1c2 <__gethex+0x1cc>
 808e1a6:	e7e5      	b.n	808e174 <__gethex+0x17e>
 808e1a8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 808e1ac:	f7ff ff0e 	bl	808dfcc <__hexdig_fun>
 808e1b0:	f000 000f 	and.w	r0, r0, #15
 808e1b4:	fa00 f00b 	lsl.w	r0, r0, fp
 808e1b8:	9b05      	ldr	r3, [sp, #20]
 808e1ba:	ea49 0900 	orr.w	r9, r9, r0
 808e1be:	f10b 0b04 	add.w	fp, fp, #4
 808e1c2:	461e      	mov	r6, r3
 808e1c4:	e7cd      	b.n	808e162 <__gethex+0x16c>
 808e1c6:	9804      	ldr	r0, [sp, #16]
 808e1c8:	f840 9b04 	str.w	r9, [r0], #4
 808e1cc:	ebca 0000 	rsb	r0, sl, r0
 808e1d0:	1080      	asrs	r0, r0, #2
 808e1d2:	6128      	str	r0, [r5, #16]
 808e1d4:	0147      	lsls	r7, r0, #5
 808e1d6:	4648      	mov	r0, r9
 808e1d8:	f000 fb87 	bl	808e8ea <__hi0bits>
 808e1dc:	f8d8 6000 	ldr.w	r6, [r8]
 808e1e0:	1a38      	subs	r0, r7, r0
 808e1e2:	42b0      	cmp	r0, r6
 808e1e4:	dd26      	ble.n	808e234 <__gethex+0x23e>
 808e1e6:	1b87      	subs	r7, r0, r6
 808e1e8:	4639      	mov	r1, r7
 808e1ea:	4628      	mov	r0, r5
 808e1ec:	f000 fe7f 	bl	808eeee <__any_on>
 808e1f0:	b1c8      	cbz	r0, 808e226 <__gethex+0x230>
 808e1f2:	1e7b      	subs	r3, r7, #1
 808e1f4:	1159      	asrs	r1, r3, #5
 808e1f6:	f003 021f 	and.w	r2, r3, #31
 808e1fa:	f04f 0901 	mov.w	r9, #1
 808e1fe:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 808e202:	fa09 f202 	lsl.w	r2, r9, r2
 808e206:	420a      	tst	r2, r1
 808e208:	d00e      	beq.n	808e228 <__gethex+0x232>
 808e20a:	454b      	cmp	r3, r9
 808e20c:	dc02      	bgt.n	808e214 <__gethex+0x21e>
 808e20e:	f04f 0902 	mov.w	r9, #2
 808e212:	e009      	b.n	808e228 <__gethex+0x232>
 808e214:	1eb9      	subs	r1, r7, #2
 808e216:	4628      	mov	r0, r5
 808e218:	f000 fe69 	bl	808eeee <__any_on>
 808e21c:	2800      	cmp	r0, #0
 808e21e:	d0f6      	beq.n	808e20e <__gethex+0x218>
 808e220:	f04f 0903 	mov.w	r9, #3
 808e224:	e000      	b.n	808e228 <__gethex+0x232>
 808e226:	4681      	mov	r9, r0
 808e228:	4639      	mov	r1, r7
 808e22a:	4628      	mov	r0, r5
 808e22c:	f7ff fe98 	bl	808df60 <rshift>
 808e230:	443c      	add	r4, r7
 808e232:	e00c      	b.n	808e24e <__gethex+0x258>
 808e234:	da09      	bge.n	808e24a <__gethex+0x254>
 808e236:	1a37      	subs	r7, r6, r0
 808e238:	4629      	mov	r1, r5
 808e23a:	463a      	mov	r2, r7
 808e23c:	9802      	ldr	r0, [sp, #8]
 808e23e:	f000 fc89 	bl	808eb54 <__lshift>
 808e242:	4605      	mov	r5, r0
 808e244:	1be4      	subs	r4, r4, r7
 808e246:	f100 0a14 	add.w	sl, r0, #20
 808e24a:	f04f 0900 	mov.w	r9, #0
 808e24e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 808e252:	429c      	cmp	r4, r3
 808e254:	dd08      	ble.n	808e268 <__gethex+0x272>
 808e256:	9802      	ldr	r0, [sp, #8]
 808e258:	4629      	mov	r1, r5
 808e25a:	f000 fab6 	bl	808e7ca <_Bfree>
 808e25e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 808e260:	2300      	movs	r3, #0
 808e262:	6013      	str	r3, [r2, #0]
 808e264:	20a3      	movs	r0, #163	; 0xa3
 808e266:	e0e2      	b.n	808e42e <__gethex+0x438>
 808e268:	f8d8 0004 	ldr.w	r0, [r8, #4]
 808e26c:	4284      	cmp	r4, r0
 808e26e:	da53      	bge.n	808e318 <__gethex+0x322>
 808e270:	1b04      	subs	r4, r0, r4
 808e272:	42a6      	cmp	r6, r4
 808e274:	dc2e      	bgt.n	808e2d4 <__gethex+0x2de>
 808e276:	f8d8 300c 	ldr.w	r3, [r8, #12]
 808e27a:	2b02      	cmp	r3, #2
 808e27c:	d01a      	beq.n	808e2b4 <__gethex+0x2be>
 808e27e:	2b03      	cmp	r3, #3
 808e280:	d01c      	beq.n	808e2bc <__gethex+0x2c6>
 808e282:	2b01      	cmp	r3, #1
 808e284:	d11d      	bne.n	808e2c2 <__gethex+0x2cc>
 808e286:	42a6      	cmp	r6, r4
 808e288:	d11b      	bne.n	808e2c2 <__gethex+0x2cc>
 808e28a:	2e01      	cmp	r6, #1
 808e28c:	dc0b      	bgt.n	808e2a6 <__gethex+0x2b0>
 808e28e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 808e292:	9a06      	ldr	r2, [sp, #24]
 808e294:	2062      	movs	r0, #98	; 0x62
 808e296:	6013      	str	r3, [r2, #0]
 808e298:	2301      	movs	r3, #1
 808e29a:	612b      	str	r3, [r5, #16]
 808e29c:	f8ca 3000 	str.w	r3, [sl]
 808e2a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 808e2a2:	601d      	str	r5, [r3, #0]
 808e2a4:	e0c3      	b.n	808e42e <__gethex+0x438>
 808e2a6:	1e71      	subs	r1, r6, #1
 808e2a8:	4628      	mov	r0, r5
 808e2aa:	f000 fe20 	bl	808eeee <__any_on>
 808e2ae:	2800      	cmp	r0, #0
 808e2b0:	d1ed      	bne.n	808e28e <__gethex+0x298>
 808e2b2:	e006      	b.n	808e2c2 <__gethex+0x2cc>
 808e2b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808e2b6:	2b00      	cmp	r3, #0
 808e2b8:	d0e9      	beq.n	808e28e <__gethex+0x298>
 808e2ba:	e002      	b.n	808e2c2 <__gethex+0x2cc>
 808e2bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808e2be:	2b00      	cmp	r3, #0
 808e2c0:	d1e5      	bne.n	808e28e <__gethex+0x298>
 808e2c2:	9802      	ldr	r0, [sp, #8]
 808e2c4:	4629      	mov	r1, r5
 808e2c6:	f000 fa80 	bl	808e7ca <_Bfree>
 808e2ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 808e2cc:	2300      	movs	r3, #0
 808e2ce:	6013      	str	r3, [r2, #0]
 808e2d0:	2050      	movs	r0, #80	; 0x50
 808e2d2:	e0ac      	b.n	808e42e <__gethex+0x438>
 808e2d4:	1e67      	subs	r7, r4, #1
 808e2d6:	f1b9 0f00 	cmp.w	r9, #0
 808e2da:	d106      	bne.n	808e2ea <__gethex+0x2f4>
 808e2dc:	b13f      	cbz	r7, 808e2ee <__gethex+0x2f8>
 808e2de:	4639      	mov	r1, r7
 808e2e0:	4628      	mov	r0, r5
 808e2e2:	f000 fe04 	bl	808eeee <__any_on>
 808e2e6:	4681      	mov	r9, r0
 808e2e8:	e001      	b.n	808e2ee <__gethex+0x2f8>
 808e2ea:	f04f 0901 	mov.w	r9, #1
 808e2ee:	117a      	asrs	r2, r7, #5
 808e2f0:	2301      	movs	r3, #1
 808e2f2:	f007 071f 	and.w	r7, r7, #31
 808e2f6:	fa03 f707 	lsl.w	r7, r3, r7
 808e2fa:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 808e2fe:	4621      	mov	r1, r4
 808e300:	421f      	tst	r7, r3
 808e302:	4628      	mov	r0, r5
 808e304:	bf18      	it	ne
 808e306:	f049 0902 	orrne.w	r9, r9, #2
 808e30a:	1b36      	subs	r6, r6, r4
 808e30c:	f7ff fe28 	bl	808df60 <rshift>
 808e310:	2702      	movs	r7, #2
 808e312:	f8d8 4004 	ldr.w	r4, [r8, #4]
 808e316:	e000      	b.n	808e31a <__gethex+0x324>
 808e318:	2701      	movs	r7, #1
 808e31a:	f1b9 0f00 	cmp.w	r9, #0
 808e31e:	f000 8081 	beq.w	808e424 <__gethex+0x42e>
 808e322:	f8d8 300c 	ldr.w	r3, [r8, #12]
 808e326:	2b02      	cmp	r3, #2
 808e328:	d00e      	beq.n	808e348 <__gethex+0x352>
 808e32a:	2b03      	cmp	r3, #3
 808e32c:	d010      	beq.n	808e350 <__gethex+0x35a>
 808e32e:	2b01      	cmp	r3, #1
 808e330:	d176      	bne.n	808e420 <__gethex+0x42a>
 808e332:	f019 0f02 	tst.w	r9, #2
 808e336:	d073      	beq.n	808e420 <__gethex+0x42a>
 808e338:	f8da 0000 	ldr.w	r0, [sl]
 808e33c:	ea49 0900 	orr.w	r9, r9, r0
 808e340:	f019 0f01 	tst.w	r9, #1
 808e344:	d107      	bne.n	808e356 <__gethex+0x360>
 808e346:	e06b      	b.n	808e420 <__gethex+0x42a>
 808e348:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808e34a:	f1c3 0301 	rsb	r3, r3, #1
 808e34e:	9315      	str	r3, [sp, #84]	; 0x54
 808e350:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808e352:	2b00      	cmp	r3, #0
 808e354:	d064      	beq.n	808e420 <__gethex+0x42a>
 808e356:	f8d5 a010 	ldr.w	sl, [r5, #16]
 808e35a:	f105 0314 	add.w	r3, r5, #20
 808e35e:	ea4f 098a 	mov.w	r9, sl, lsl #2
 808e362:	eb03 0109 	add.w	r1, r3, r9
 808e366:	2000      	movs	r0, #0
 808e368:	681a      	ldr	r2, [r3, #0]
 808e36a:	f1b2 3fff 	cmp.w	r2, #4294967295
 808e36e:	d002      	beq.n	808e376 <__gethex+0x380>
 808e370:	3201      	adds	r2, #1
 808e372:	601a      	str	r2, [r3, #0]
 808e374:	e020      	b.n	808e3b8 <__gethex+0x3c2>
 808e376:	f843 0b04 	str.w	r0, [r3], #4
 808e37a:	4299      	cmp	r1, r3
 808e37c:	d8f4      	bhi.n	808e368 <__gethex+0x372>
 808e37e:	68ab      	ldr	r3, [r5, #8]
 808e380:	459a      	cmp	sl, r3
 808e382:	db12      	blt.n	808e3aa <__gethex+0x3b4>
 808e384:	6869      	ldr	r1, [r5, #4]
 808e386:	9802      	ldr	r0, [sp, #8]
 808e388:	3101      	adds	r1, #1
 808e38a:	f000 f9e9 	bl	808e760 <_Balloc>
 808e38e:	4683      	mov	fp, r0
 808e390:	692a      	ldr	r2, [r5, #16]
 808e392:	f105 010c 	add.w	r1, r5, #12
 808e396:	3202      	adds	r2, #2
 808e398:	0092      	lsls	r2, r2, #2
 808e39a:	300c      	adds	r0, #12
 808e39c:	f7fd fe83 	bl	808c0a6 <memcpy>
 808e3a0:	4629      	mov	r1, r5
 808e3a2:	9802      	ldr	r0, [sp, #8]
 808e3a4:	f000 fa11 	bl	808e7ca <_Bfree>
 808e3a8:	465d      	mov	r5, fp
 808e3aa:	692b      	ldr	r3, [r5, #16]
 808e3ac:	1c5a      	adds	r2, r3, #1
 808e3ae:	612a      	str	r2, [r5, #16]
 808e3b0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 808e3b4:	2201      	movs	r2, #1
 808e3b6:	615a      	str	r2, [r3, #20]
 808e3b8:	2f02      	cmp	r7, #2
 808e3ba:	f105 0214 	add.w	r2, r5, #20
 808e3be:	d111      	bne.n	808e3e4 <__gethex+0x3ee>
 808e3c0:	f8d8 3000 	ldr.w	r3, [r8]
 808e3c4:	3b01      	subs	r3, #1
 808e3c6:	429e      	cmp	r6, r3
 808e3c8:	d127      	bne.n	808e41a <__gethex+0x424>
 808e3ca:	1171      	asrs	r1, r6, #5
 808e3cc:	2301      	movs	r3, #1
 808e3ce:	f006 061f 	and.w	r6, r6, #31
 808e3d2:	fa03 f606 	lsl.w	r6, r3, r6
 808e3d6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 808e3da:	421e      	tst	r6, r3
 808e3dc:	bf0c      	ite	eq
 808e3de:	2702      	moveq	r7, #2
 808e3e0:	2701      	movne	r7, #1
 808e3e2:	e01a      	b.n	808e41a <__gethex+0x424>
 808e3e4:	692b      	ldr	r3, [r5, #16]
 808e3e6:	459a      	cmp	sl, r3
 808e3e8:	da0a      	bge.n	808e400 <__gethex+0x40a>
 808e3ea:	2101      	movs	r1, #1
 808e3ec:	4628      	mov	r0, r5
 808e3ee:	f7ff fdb7 	bl	808df60 <rshift>
 808e3f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 808e3f6:	3401      	adds	r4, #1
 808e3f8:	429c      	cmp	r4, r3
 808e3fa:	f73f af2c 	bgt.w	808e256 <__gethex+0x260>
 808e3fe:	e00b      	b.n	808e418 <__gethex+0x422>
 808e400:	f016 061f 	ands.w	r6, r6, #31
 808e404:	d008      	beq.n	808e418 <__gethex+0x422>
 808e406:	4491      	add	r9, r2
 808e408:	f859 0c04 	ldr.w	r0, [r9, #-4]
 808e40c:	f000 fa6d 	bl	808e8ea <__hi0bits>
 808e410:	f1c6 0620 	rsb	r6, r6, #32
 808e414:	42b0      	cmp	r0, r6
 808e416:	dbe8      	blt.n	808e3ea <__gethex+0x3f4>
 808e418:	2701      	movs	r7, #1
 808e41a:	f047 0720 	orr.w	r7, r7, #32
 808e41e:	e001      	b.n	808e424 <__gethex+0x42e>
 808e420:	f047 0710 	orr.w	r7, r7, #16
 808e424:	4638      	mov	r0, r7
 808e426:	9b14      	ldr	r3, [sp, #80]	; 0x50
 808e428:	601d      	str	r5, [r3, #0]
 808e42a:	9b06      	ldr	r3, [sp, #24]
 808e42c:	601c      	str	r4, [r3, #0]
 808e42e:	b00b      	add	sp, #44	; 0x2c
 808e430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808e434 <L_shift>:
 808e434:	f1c2 0208 	rsb	r2, r2, #8
 808e438:	0092      	lsls	r2, r2, #2
 808e43a:	b570      	push	{r4, r5, r6, lr}
 808e43c:	f1c2 0620 	rsb	r6, r2, #32
 808e440:	6843      	ldr	r3, [r0, #4]
 808e442:	6805      	ldr	r5, [r0, #0]
 808e444:	fa03 f406 	lsl.w	r4, r3, r6
 808e448:	432c      	orrs	r4, r5
 808e44a:	40d3      	lsrs	r3, r2
 808e44c:	6004      	str	r4, [r0, #0]
 808e44e:	f840 3f04 	str.w	r3, [r0, #4]!
 808e452:	4288      	cmp	r0, r1
 808e454:	d3f4      	bcc.n	808e440 <L_shift+0xc>
 808e456:	bd70      	pop	{r4, r5, r6, pc}

0808e458 <__match>:
 808e458:	b530      	push	{r4, r5, lr}
 808e45a:	6803      	ldr	r3, [r0, #0]
 808e45c:	f811 4b01 	ldrb.w	r4, [r1], #1
 808e460:	3301      	adds	r3, #1
 808e462:	b14c      	cbz	r4, 808e478 <__match+0x20>
 808e464:	781a      	ldrb	r2, [r3, #0]
 808e466:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 808e46a:	2d19      	cmp	r5, #25
 808e46c:	bf98      	it	ls
 808e46e:	3220      	addls	r2, #32
 808e470:	42a2      	cmp	r2, r4
 808e472:	d0f3      	beq.n	808e45c <__match+0x4>
 808e474:	2000      	movs	r0, #0
 808e476:	bd30      	pop	{r4, r5, pc}
 808e478:	6003      	str	r3, [r0, #0]
 808e47a:	2001      	movs	r0, #1
 808e47c:	bd30      	pop	{r4, r5, pc}

0808e47e <__hexnan>:
 808e47e:	680b      	ldr	r3, [r1, #0]
 808e480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808e484:	115e      	asrs	r6, r3, #5
 808e486:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 808e48a:	f013 031f 	ands.w	r3, r3, #31
 808e48e:	bf18      	it	ne
 808e490:	3604      	addne	r6, #4
 808e492:	1f35      	subs	r5, r6, #4
 808e494:	4617      	mov	r7, r2
 808e496:	2200      	movs	r2, #0
 808e498:	4682      	mov	sl, r0
 808e49a:	46a8      	mov	r8, r5
 808e49c:	462c      	mov	r4, r5
 808e49e:	4691      	mov	r9, r2
 808e4a0:	b085      	sub	sp, #20
 808e4a2:	f8d0 b000 	ldr.w	fp, [r0]
 808e4a6:	9301      	str	r3, [sp, #4]
 808e4a8:	f846 2c04 	str.w	r2, [r6, #-4]
 808e4ac:	9200      	str	r2, [sp, #0]
 808e4ae:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 808e4b2:	2900      	cmp	r1, #0
 808e4b4:	d03c      	beq.n	808e530 <__hexnan+0xb2>
 808e4b6:	4608      	mov	r0, r1
 808e4b8:	9203      	str	r2, [sp, #12]
 808e4ba:	9102      	str	r1, [sp, #8]
 808e4bc:	f7ff fd86 	bl	808dfcc <__hexdig_fun>
 808e4c0:	9a03      	ldr	r2, [sp, #12]
 808e4c2:	bb00      	cbnz	r0, 808e506 <__hexnan+0x88>
 808e4c4:	9902      	ldr	r1, [sp, #8]
 808e4c6:	2920      	cmp	r1, #32
 808e4c8:	d816      	bhi.n	808e4f8 <__hexnan+0x7a>
 808e4ca:	9b00      	ldr	r3, [sp, #0]
 808e4cc:	4599      	cmp	r9, r3
 808e4ce:	ddee      	ble.n	808e4ae <__hexnan+0x30>
 808e4d0:	4544      	cmp	r4, r8
 808e4d2:	d205      	bcs.n	808e4e0 <__hexnan+0x62>
 808e4d4:	2a07      	cmp	r2, #7
 808e4d6:	dc03      	bgt.n	808e4e0 <__hexnan+0x62>
 808e4d8:	4641      	mov	r1, r8
 808e4da:	4620      	mov	r0, r4
 808e4dc:	f7ff ffaa 	bl	808e434 <L_shift>
 808e4e0:	42bc      	cmp	r4, r7
 808e4e2:	d923      	bls.n	808e52c <__hexnan+0xae>
 808e4e4:	2300      	movs	r3, #0
 808e4e6:	f1a4 0804 	sub.w	r8, r4, #4
 808e4ea:	f844 3c04 	str.w	r3, [r4, #-4]
 808e4ee:	f8cd 9000 	str.w	r9, [sp]
 808e4f2:	4644      	mov	r4, r8
 808e4f4:	461a      	mov	r2, r3
 808e4f6:	e7da      	b.n	808e4ae <__hexnan+0x30>
 808e4f8:	2929      	cmp	r1, #41	; 0x29
 808e4fa:	d148      	bne.n	808e58e <__hexnan+0x110>
 808e4fc:	f10b 0301 	add.w	r3, fp, #1
 808e500:	f8ca 3000 	str.w	r3, [sl]
 808e504:	e014      	b.n	808e530 <__hexnan+0xb2>
 808e506:	3201      	adds	r2, #1
 808e508:	2a08      	cmp	r2, #8
 808e50a:	f109 0901 	add.w	r9, r9, #1
 808e50e:	dd06      	ble.n	808e51e <__hexnan+0xa0>
 808e510:	42bc      	cmp	r4, r7
 808e512:	d9cc      	bls.n	808e4ae <__hexnan+0x30>
 808e514:	2300      	movs	r3, #0
 808e516:	f844 3c04 	str.w	r3, [r4, #-4]
 808e51a:	2201      	movs	r2, #1
 808e51c:	3c04      	subs	r4, #4
 808e51e:	6821      	ldr	r1, [r4, #0]
 808e520:	f000 000f 	and.w	r0, r0, #15
 808e524:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 808e528:	6020      	str	r0, [r4, #0]
 808e52a:	e7c0      	b.n	808e4ae <__hexnan+0x30>
 808e52c:	2208      	movs	r2, #8
 808e52e:	e7be      	b.n	808e4ae <__hexnan+0x30>
 808e530:	f1b9 0f00 	cmp.w	r9, #0
 808e534:	d02b      	beq.n	808e58e <__hexnan+0x110>
 808e536:	4544      	cmp	r4, r8
 808e538:	d205      	bcs.n	808e546 <__hexnan+0xc8>
 808e53a:	2a07      	cmp	r2, #7
 808e53c:	dc03      	bgt.n	808e546 <__hexnan+0xc8>
 808e53e:	4641      	mov	r1, r8
 808e540:	4620      	mov	r0, r4
 808e542:	f7ff ff77 	bl	808e434 <L_shift>
 808e546:	42bc      	cmp	r4, r7
 808e548:	d90c      	bls.n	808e564 <__hexnan+0xe6>
 808e54a:	463b      	mov	r3, r7
 808e54c:	f854 2b04 	ldr.w	r2, [r4], #4
 808e550:	42a5      	cmp	r5, r4
 808e552:	f843 2b04 	str.w	r2, [r3], #4
 808e556:	d2f9      	bcs.n	808e54c <__hexnan+0xce>
 808e558:	2200      	movs	r2, #0
 808e55a:	f843 2b04 	str.w	r2, [r3], #4
 808e55e:	429d      	cmp	r5, r3
 808e560:	d2fb      	bcs.n	808e55a <__hexnan+0xdc>
 808e562:	e00b      	b.n	808e57c <__hexnan+0xfe>
 808e564:	9b01      	ldr	r3, [sp, #4]
 808e566:	b14b      	cbz	r3, 808e57c <__hexnan+0xfe>
 808e568:	f1c3 0220 	rsb	r2, r3, #32
 808e56c:	f04f 33ff 	mov.w	r3, #4294967295
 808e570:	40d3      	lsrs	r3, r2
 808e572:	f856 2c04 	ldr.w	r2, [r6, #-4]
 808e576:	4013      	ands	r3, r2
 808e578:	f846 3c04 	str.w	r3, [r6, #-4]
 808e57c:	682b      	ldr	r3, [r5, #0]
 808e57e:	b943      	cbnz	r3, 808e592 <__hexnan+0x114>
 808e580:	42bd      	cmp	r5, r7
 808e582:	d102      	bne.n	808e58a <__hexnan+0x10c>
 808e584:	2301      	movs	r3, #1
 808e586:	602b      	str	r3, [r5, #0]
 808e588:	e003      	b.n	808e592 <__hexnan+0x114>
 808e58a:	3d04      	subs	r5, #4
 808e58c:	e7f6      	b.n	808e57c <__hexnan+0xfe>
 808e58e:	2004      	movs	r0, #4
 808e590:	e000      	b.n	808e594 <__hexnan+0x116>
 808e592:	2005      	movs	r0, #5
 808e594:	b005      	add	sp, #20
 808e596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0808e59c <_findenv_r>:
 808e59c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808e5a0:	4607      	mov	r7, r0
 808e5a2:	468b      	mov	fp, r1
 808e5a4:	4690      	mov	r8, r2
 808e5a6:	f000 fcd2 	bl	808ef4e <__env_lock>
 808e5aa:	4b19      	ldr	r3, [pc, #100]	; (808e610 <_findenv_r+0x74>)
 808e5ac:	681d      	ldr	r5, [r3, #0]
 808e5ae:	469a      	mov	sl, r3
 808e5b0:	b13d      	cbz	r5, 808e5c2 <_findenv_r+0x26>
 808e5b2:	465c      	mov	r4, fp
 808e5b4:	4623      	mov	r3, r4
 808e5b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 808e5ba:	b142      	cbz	r2, 808e5ce <_findenv_r+0x32>
 808e5bc:	2a3d      	cmp	r2, #61	; 0x3d
 808e5be:	461c      	mov	r4, r3
 808e5c0:	d1f8      	bne.n	808e5b4 <_findenv_r+0x18>
 808e5c2:	4638      	mov	r0, r7
 808e5c4:	f000 fcc4 	bl	808ef50 <__env_unlock>
 808e5c8:	2000      	movs	r0, #0
 808e5ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808e5ce:	ebcb 0404 	rsb	r4, fp, r4
 808e5d2:	46a9      	mov	r9, r5
 808e5d4:	f859 0b04 	ldr.w	r0, [r9], #4
 808e5d8:	2800      	cmp	r0, #0
 808e5da:	d0f2      	beq.n	808e5c2 <_findenv_r+0x26>
 808e5dc:	4622      	mov	r2, r4
 808e5de:	4659      	mov	r1, fp
 808e5e0:	f7fe faf4 	bl	808cbcc <strncmp>
 808e5e4:	b988      	cbnz	r0, 808e60a <_findenv_r+0x6e>
 808e5e6:	f859 3c04 	ldr.w	r3, [r9, #-4]
 808e5ea:	191e      	adds	r6, r3, r4
 808e5ec:	5d1b      	ldrb	r3, [r3, r4]
 808e5ee:	2b3d      	cmp	r3, #61	; 0x3d
 808e5f0:	d10b      	bne.n	808e60a <_findenv_r+0x6e>
 808e5f2:	f8da 3000 	ldr.w	r3, [sl]
 808e5f6:	4638      	mov	r0, r7
 808e5f8:	1aed      	subs	r5, r5, r3
 808e5fa:	10ad      	asrs	r5, r5, #2
 808e5fc:	f8c8 5000 	str.w	r5, [r8]
 808e600:	f000 fca6 	bl	808ef50 <__env_unlock>
 808e604:	1c70      	adds	r0, r6, #1
 808e606:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808e60a:	464d      	mov	r5, r9
 808e60c:	e7e1      	b.n	808e5d2 <_findenv_r+0x36>
 808e60e:	bf00      	nop
 808e610:	200001c4 	.word	0x200001c4

0808e614 <_getenv_r>:
 808e614:	b507      	push	{r0, r1, r2, lr}
 808e616:	aa01      	add	r2, sp, #4
 808e618:	f7ff ffc0 	bl	808e59c <_findenv_r>
 808e61c:	b003      	add	sp, #12
 808e61e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0808e624 <__gettzinfo>:
 808e624:	4800      	ldr	r0, [pc, #0]	; (808e628 <__gettzinfo+0x4>)
 808e626:	4770      	bx	lr
 808e628:	20000184 	.word	0x20000184

0808e62c <gmtime_r>:
 808e62c:	6802      	ldr	r2, [r0, #0]
 808e62e:	4b46      	ldr	r3, [pc, #280]	; (808e748 <gmtime_r+0x11c>)
 808e630:	b5f0      	push	{r4, r5, r6, r7, lr}
 808e632:	fb92 f4f3 	sdiv	r4, r2, r3
 808e636:	fb03 2214 	mls	r2, r3, r4, r2
 808e63a:	2a00      	cmp	r2, #0
 808e63c:	bfbc      	itt	lt
 808e63e:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 808e642:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 808e646:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 808e64a:	fb92 f3f0 	sdiv	r3, r2, r0
 808e64e:	fb00 2213 	mls	r2, r0, r3, r2
 808e652:	f04f 003c 	mov.w	r0, #60	; 0x3c
 808e656:	608b      	str	r3, [r1, #8]
 808e658:	fb92 f3f0 	sdiv	r3, r2, r0
 808e65c:	fb00 2213 	mls	r2, r0, r3, r2
 808e660:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 808e664:	bfac      	ite	ge
 808e666:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 808e66a:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 808e66e:	604b      	str	r3, [r1, #4]
 808e670:	600a      	str	r2, [r1, #0]
 808e672:	2307      	movs	r3, #7
 808e674:	1ce2      	adds	r2, r4, #3
 808e676:	fb92 f3f3 	sdiv	r3, r2, r3
 808e67a:	4d34      	ldr	r5, [pc, #208]	; (808e74c <gmtime_r+0x120>)
 808e67c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 808e680:	fb94 f5f5 	sdiv	r5, r4, r5
 808e684:	1ad3      	subs	r3, r2, r3
 808e686:	f648 62ac 	movw	r2, #36524	; 0x8eac
 808e68a:	f240 57b4 	movw	r7, #1460	; 0x5b4
 808e68e:	618b      	str	r3, [r1, #24]
 808e690:	4b2f      	ldr	r3, [pc, #188]	; (808e750 <gmtime_r+0x124>)
 808e692:	4830      	ldr	r0, [pc, #192]	; (808e754 <gmtime_r+0x128>)
 808e694:	fb03 4405 	mla	r4, r3, r5, r4
 808e698:	fbb4 f2f2 	udiv	r2, r4, r2
 808e69c:	fbb4 f3f7 	udiv	r3, r4, r7
 808e6a0:	fbb4 f0f0 	udiv	r0, r4, r0
 808e6a4:	4422      	add	r2, r4
 808e6a6:	1ad2      	subs	r2, r2, r3
 808e6a8:	f648 6694 	movw	r6, #36500	; 0x8e94
 808e6ac:	1a13      	subs	r3, r2, r0
 808e6ae:	f240 126d 	movw	r2, #365	; 0x16d
 808e6b2:	fbb3 f6f6 	udiv	r6, r3, r6
 808e6b6:	fbb3 f0f2 	udiv	r0, r3, r2
 808e6ba:	fbb3 f3f7 	udiv	r3, r3, r7
 808e6be:	4434      	add	r4, r6
 808e6c0:	1ae3      	subs	r3, r4, r3
 808e6c2:	fb02 3310 	mls	r3, r2, r0, r3
 808e6c6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 808e6ca:	2499      	movs	r4, #153	; 0x99
 808e6cc:	3202      	adds	r2, #2
 808e6ce:	fbb2 f2f4 	udiv	r2, r2, r4
 808e6d2:	4354      	muls	r4, r2
 808e6d4:	1ca6      	adds	r6, r4, #2
 808e6d6:	2405      	movs	r4, #5
 808e6d8:	fbb6 f4f4 	udiv	r4, r6, r4
 808e6dc:	2a0a      	cmp	r2, #10
 808e6de:	bf34      	ite	cc
 808e6e0:	2602      	movcc	r6, #2
 808e6e2:	f06f 0609 	mvncs.w	r6, #9
 808e6e6:	4416      	add	r6, r2
 808e6e8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808e6ec:	fb02 0505 	mla	r5, r2, r5, r0
 808e6f0:	1c5f      	adds	r7, r3, #1
 808e6f2:	2e01      	cmp	r6, #1
 808e6f4:	bf98      	it	ls
 808e6f6:	3501      	addls	r5, #1
 808e6f8:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 808e6fc:	eba7 0704 	sub.w	r7, r7, r4
 808e700:	d302      	bcc.n	808e708 <gmtime_r+0xdc>
 808e702:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 808e706:	e014      	b.n	808e732 <gmtime_r+0x106>
 808e708:	0782      	lsls	r2, r0, #30
 808e70a:	d105      	bne.n	808e718 <gmtime_r+0xec>
 808e70c:	2464      	movs	r4, #100	; 0x64
 808e70e:	fbb0 f2f4 	udiv	r2, r0, r4
 808e712:	fb04 0212 	mls	r2, r4, r2, r0
 808e716:	b94a      	cbnz	r2, 808e72c <gmtime_r+0x100>
 808e718:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808e71c:	fbb0 f4f2 	udiv	r4, r0, r2
 808e720:	fb02 0014 	mls	r0, r2, r4, r0
 808e724:	fab0 f280 	clz	r2, r0
 808e728:	0952      	lsrs	r2, r2, #5
 808e72a:	e000      	b.n	808e72e <gmtime_r+0x102>
 808e72c:	2201      	movs	r2, #1
 808e72e:	333b      	adds	r3, #59	; 0x3b
 808e730:	441a      	add	r2, r3
 808e732:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 808e736:	2300      	movs	r3, #0
 808e738:	61ca      	str	r2, [r1, #28]
 808e73a:	614d      	str	r5, [r1, #20]
 808e73c:	610e      	str	r6, [r1, #16]
 808e73e:	60cf      	str	r7, [r1, #12]
 808e740:	620b      	str	r3, [r1, #32]
 808e742:	4608      	mov	r0, r1
 808e744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808e746:	bf00      	nop
 808e748:	00015180 	.word	0x00015180
 808e74c:	00023ab1 	.word	0x00023ab1
 808e750:	fffdc54f 	.word	0xfffdc54f
 808e754:	00023ab0 	.word	0x00023ab0

0808e758 <labs>:
 808e758:	2800      	cmp	r0, #0
 808e75a:	bfb8      	it	lt
 808e75c:	4240      	neglt	r0, r0
 808e75e:	4770      	bx	lr

0808e760 <_Balloc>:
 808e760:	b570      	push	{r4, r5, r6, lr}
 808e762:	6a45      	ldr	r5, [r0, #36]	; 0x24
 808e764:	4604      	mov	r4, r0
 808e766:	460e      	mov	r6, r1
 808e768:	b93d      	cbnz	r5, 808e77a <_Balloc+0x1a>
 808e76a:	2010      	movs	r0, #16
 808e76c:	f7f9 ff08 	bl	8088580 <malloc>
 808e770:	6260      	str	r0, [r4, #36]	; 0x24
 808e772:	6045      	str	r5, [r0, #4]
 808e774:	6085      	str	r5, [r0, #8]
 808e776:	6005      	str	r5, [r0, #0]
 808e778:	60c5      	str	r5, [r0, #12]
 808e77a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 808e77c:	68eb      	ldr	r3, [r5, #12]
 808e77e:	b143      	cbz	r3, 808e792 <_Balloc+0x32>
 808e780:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808e782:	68db      	ldr	r3, [r3, #12]
 808e784:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 808e788:	b178      	cbz	r0, 808e7aa <_Balloc+0x4a>
 808e78a:	6802      	ldr	r2, [r0, #0]
 808e78c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 808e790:	e017      	b.n	808e7c2 <_Balloc+0x62>
 808e792:	2221      	movs	r2, #33	; 0x21
 808e794:	2104      	movs	r1, #4
 808e796:	4620      	mov	r0, r4
 808e798:	f000 fbcb 	bl	808ef32 <_calloc_r>
 808e79c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808e79e:	60e8      	str	r0, [r5, #12]
 808e7a0:	68db      	ldr	r3, [r3, #12]
 808e7a2:	2b00      	cmp	r3, #0
 808e7a4:	d1ec      	bne.n	808e780 <_Balloc+0x20>
 808e7a6:	2000      	movs	r0, #0
 808e7a8:	bd70      	pop	{r4, r5, r6, pc}
 808e7aa:	2101      	movs	r1, #1
 808e7ac:	fa01 f506 	lsl.w	r5, r1, r6
 808e7b0:	1d6a      	adds	r2, r5, #5
 808e7b2:	0092      	lsls	r2, r2, #2
 808e7b4:	4620      	mov	r0, r4
 808e7b6:	f000 fbbc 	bl	808ef32 <_calloc_r>
 808e7ba:	2800      	cmp	r0, #0
 808e7bc:	d0f3      	beq.n	808e7a6 <_Balloc+0x46>
 808e7be:	6046      	str	r6, [r0, #4]
 808e7c0:	6085      	str	r5, [r0, #8]
 808e7c2:	2300      	movs	r3, #0
 808e7c4:	6103      	str	r3, [r0, #16]
 808e7c6:	60c3      	str	r3, [r0, #12]
 808e7c8:	bd70      	pop	{r4, r5, r6, pc}

0808e7ca <_Bfree>:
 808e7ca:	b570      	push	{r4, r5, r6, lr}
 808e7cc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 808e7ce:	4606      	mov	r6, r0
 808e7d0:	460d      	mov	r5, r1
 808e7d2:	b93c      	cbnz	r4, 808e7e4 <_Bfree+0x1a>
 808e7d4:	2010      	movs	r0, #16
 808e7d6:	f7f9 fed3 	bl	8088580 <malloc>
 808e7da:	6270      	str	r0, [r6, #36]	; 0x24
 808e7dc:	6044      	str	r4, [r0, #4]
 808e7de:	6084      	str	r4, [r0, #8]
 808e7e0:	6004      	str	r4, [r0, #0]
 808e7e2:	60c4      	str	r4, [r0, #12]
 808e7e4:	b13d      	cbz	r5, 808e7f6 <_Bfree+0x2c>
 808e7e6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 808e7e8:	686a      	ldr	r2, [r5, #4]
 808e7ea:	68db      	ldr	r3, [r3, #12]
 808e7ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 808e7f0:	6029      	str	r1, [r5, #0]
 808e7f2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 808e7f6:	bd70      	pop	{r4, r5, r6, pc}

0808e7f8 <__multadd>:
 808e7f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808e7fc:	4606      	mov	r6, r0
 808e7fe:	460c      	mov	r4, r1
 808e800:	690d      	ldr	r5, [r1, #16]
 808e802:	461f      	mov	r7, r3
 808e804:	f101 0e14 	add.w	lr, r1, #20
 808e808:	2300      	movs	r3, #0
 808e80a:	f8de 0000 	ldr.w	r0, [lr]
 808e80e:	3301      	adds	r3, #1
 808e810:	b281      	uxth	r1, r0
 808e812:	fb02 7101 	mla	r1, r2, r1, r7
 808e816:	0c00      	lsrs	r0, r0, #16
 808e818:	0c0f      	lsrs	r7, r1, #16
 808e81a:	fb02 7000 	mla	r0, r2, r0, r7
 808e81e:	b289      	uxth	r1, r1
 808e820:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 808e824:	429d      	cmp	r5, r3
 808e826:	ea4f 4710 	mov.w	r7, r0, lsr #16
 808e82a:	f84e 1b04 	str.w	r1, [lr], #4
 808e82e:	dcec      	bgt.n	808e80a <__multadd+0x12>
 808e830:	b1d7      	cbz	r7, 808e868 <__multadd+0x70>
 808e832:	68a3      	ldr	r3, [r4, #8]
 808e834:	429d      	cmp	r5, r3
 808e836:	db12      	blt.n	808e85e <__multadd+0x66>
 808e838:	6861      	ldr	r1, [r4, #4]
 808e83a:	4630      	mov	r0, r6
 808e83c:	3101      	adds	r1, #1
 808e83e:	f7ff ff8f 	bl	808e760 <_Balloc>
 808e842:	4680      	mov	r8, r0
 808e844:	6922      	ldr	r2, [r4, #16]
 808e846:	f104 010c 	add.w	r1, r4, #12
 808e84a:	3202      	adds	r2, #2
 808e84c:	0092      	lsls	r2, r2, #2
 808e84e:	300c      	adds	r0, #12
 808e850:	f7fd fc29 	bl	808c0a6 <memcpy>
 808e854:	4621      	mov	r1, r4
 808e856:	4630      	mov	r0, r6
 808e858:	f7ff ffb7 	bl	808e7ca <_Bfree>
 808e85c:	4644      	mov	r4, r8
 808e85e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 808e862:	3501      	adds	r5, #1
 808e864:	615f      	str	r7, [r3, #20]
 808e866:	6125      	str	r5, [r4, #16]
 808e868:	4620      	mov	r0, r4
 808e86a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808e86e <__s2b>:
 808e86e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808e872:	4606      	mov	r6, r0
 808e874:	4615      	mov	r5, r2
 808e876:	461f      	mov	r7, r3
 808e878:	2209      	movs	r2, #9
 808e87a:	3308      	adds	r3, #8
 808e87c:	460c      	mov	r4, r1
 808e87e:	fb93 f3f2 	sdiv	r3, r3, r2
 808e882:	2100      	movs	r1, #0
 808e884:	2201      	movs	r2, #1
 808e886:	429a      	cmp	r2, r3
 808e888:	da02      	bge.n	808e890 <__s2b+0x22>
 808e88a:	0052      	lsls	r2, r2, #1
 808e88c:	3101      	adds	r1, #1
 808e88e:	e7fa      	b.n	808e886 <__s2b+0x18>
 808e890:	4630      	mov	r0, r6
 808e892:	f7ff ff65 	bl	808e760 <_Balloc>
 808e896:	9b08      	ldr	r3, [sp, #32]
 808e898:	2d09      	cmp	r5, #9
 808e89a:	6143      	str	r3, [r0, #20]
 808e89c:	f04f 0301 	mov.w	r3, #1
 808e8a0:	6103      	str	r3, [r0, #16]
 808e8a2:	dd11      	ble.n	808e8c8 <__s2b+0x5a>
 808e8a4:	f104 0809 	add.w	r8, r4, #9
 808e8a8:	46c1      	mov	r9, r8
 808e8aa:	442c      	add	r4, r5
 808e8ac:	f819 3b01 	ldrb.w	r3, [r9], #1
 808e8b0:	4601      	mov	r1, r0
 808e8b2:	3b30      	subs	r3, #48	; 0x30
 808e8b4:	220a      	movs	r2, #10
 808e8b6:	4630      	mov	r0, r6
 808e8b8:	f7ff ff9e 	bl	808e7f8 <__multadd>
 808e8bc:	45a1      	cmp	r9, r4
 808e8be:	d1f5      	bne.n	808e8ac <__s2b+0x3e>
 808e8c0:	eb08 0405 	add.w	r4, r8, r5
 808e8c4:	3c08      	subs	r4, #8
 808e8c6:	e001      	b.n	808e8cc <__s2b+0x5e>
 808e8c8:	340a      	adds	r4, #10
 808e8ca:	2509      	movs	r5, #9
 808e8cc:	1b2d      	subs	r5, r5, r4
 808e8ce:	1963      	adds	r3, r4, r5
 808e8d0:	429f      	cmp	r7, r3
 808e8d2:	dd08      	ble.n	808e8e6 <__s2b+0x78>
 808e8d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 808e8d8:	4601      	mov	r1, r0
 808e8da:	3b30      	subs	r3, #48	; 0x30
 808e8dc:	220a      	movs	r2, #10
 808e8de:	4630      	mov	r0, r6
 808e8e0:	f7ff ff8a 	bl	808e7f8 <__multadd>
 808e8e4:	e7f3      	b.n	808e8ce <__s2b+0x60>
 808e8e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0808e8ea <__hi0bits>:
 808e8ea:	0c03      	lsrs	r3, r0, #16
 808e8ec:	041b      	lsls	r3, r3, #16
 808e8ee:	b913      	cbnz	r3, 808e8f6 <__hi0bits+0xc>
 808e8f0:	0400      	lsls	r0, r0, #16
 808e8f2:	2310      	movs	r3, #16
 808e8f4:	e000      	b.n	808e8f8 <__hi0bits+0xe>
 808e8f6:	2300      	movs	r3, #0
 808e8f8:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 808e8fc:	bf04      	itt	eq
 808e8fe:	0200      	lsleq	r0, r0, #8
 808e900:	3308      	addeq	r3, #8
 808e902:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 808e906:	bf04      	itt	eq
 808e908:	0100      	lsleq	r0, r0, #4
 808e90a:	3304      	addeq	r3, #4
 808e90c:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 808e910:	bf04      	itt	eq
 808e912:	0080      	lsleq	r0, r0, #2
 808e914:	3302      	addeq	r3, #2
 808e916:	2800      	cmp	r0, #0
 808e918:	db03      	blt.n	808e922 <__hi0bits+0x38>
 808e91a:	0042      	lsls	r2, r0, #1
 808e91c:	d503      	bpl.n	808e926 <__hi0bits+0x3c>
 808e91e:	1c58      	adds	r0, r3, #1
 808e920:	4770      	bx	lr
 808e922:	4618      	mov	r0, r3
 808e924:	4770      	bx	lr
 808e926:	2020      	movs	r0, #32
 808e928:	4770      	bx	lr

0808e92a <__lo0bits>:
 808e92a:	6803      	ldr	r3, [r0, #0]
 808e92c:	f013 0207 	ands.w	r2, r3, #7
 808e930:	d00b      	beq.n	808e94a <__lo0bits+0x20>
 808e932:	07d9      	lsls	r1, r3, #31
 808e934:	d422      	bmi.n	808e97c <__lo0bits+0x52>
 808e936:	079a      	lsls	r2, r3, #30
 808e938:	bf4b      	itete	mi
 808e93a:	085b      	lsrmi	r3, r3, #1
 808e93c:	089b      	lsrpl	r3, r3, #2
 808e93e:	6003      	strmi	r3, [r0, #0]
 808e940:	6003      	strpl	r3, [r0, #0]
 808e942:	bf4c      	ite	mi
 808e944:	2001      	movmi	r0, #1
 808e946:	2002      	movpl	r0, #2
 808e948:	4770      	bx	lr
 808e94a:	b299      	uxth	r1, r3
 808e94c:	b909      	cbnz	r1, 808e952 <__lo0bits+0x28>
 808e94e:	0c1b      	lsrs	r3, r3, #16
 808e950:	2210      	movs	r2, #16
 808e952:	f013 0fff 	tst.w	r3, #255	; 0xff
 808e956:	bf04      	itt	eq
 808e958:	0a1b      	lsreq	r3, r3, #8
 808e95a:	3208      	addeq	r2, #8
 808e95c:	0719      	lsls	r1, r3, #28
 808e95e:	bf04      	itt	eq
 808e960:	091b      	lsreq	r3, r3, #4
 808e962:	3204      	addeq	r2, #4
 808e964:	0799      	lsls	r1, r3, #30
 808e966:	bf04      	itt	eq
 808e968:	089b      	lsreq	r3, r3, #2
 808e96a:	3202      	addeq	r2, #2
 808e96c:	07d9      	lsls	r1, r3, #31
 808e96e:	d402      	bmi.n	808e976 <__lo0bits+0x4c>
 808e970:	085b      	lsrs	r3, r3, #1
 808e972:	d005      	beq.n	808e980 <__lo0bits+0x56>
 808e974:	3201      	adds	r2, #1
 808e976:	6003      	str	r3, [r0, #0]
 808e978:	4610      	mov	r0, r2
 808e97a:	4770      	bx	lr
 808e97c:	2000      	movs	r0, #0
 808e97e:	4770      	bx	lr
 808e980:	2020      	movs	r0, #32
 808e982:	4770      	bx	lr

0808e984 <__i2b>:
 808e984:	b510      	push	{r4, lr}
 808e986:	460c      	mov	r4, r1
 808e988:	2101      	movs	r1, #1
 808e98a:	f7ff fee9 	bl	808e760 <_Balloc>
 808e98e:	2201      	movs	r2, #1
 808e990:	6144      	str	r4, [r0, #20]
 808e992:	6102      	str	r2, [r0, #16]
 808e994:	bd10      	pop	{r4, pc}

0808e996 <__multiply>:
 808e996:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808e99a:	4614      	mov	r4, r2
 808e99c:	690a      	ldr	r2, [r1, #16]
 808e99e:	6923      	ldr	r3, [r4, #16]
 808e9a0:	4688      	mov	r8, r1
 808e9a2:	429a      	cmp	r2, r3
 808e9a4:	bfbe      	ittt	lt
 808e9a6:	460b      	movlt	r3, r1
 808e9a8:	46a0      	movlt	r8, r4
 808e9aa:	461c      	movlt	r4, r3
 808e9ac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 808e9b0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 808e9b4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 808e9b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 808e9bc:	eb07 0609 	add.w	r6, r7, r9
 808e9c0:	429e      	cmp	r6, r3
 808e9c2:	bfc8      	it	gt
 808e9c4:	3101      	addgt	r1, #1
 808e9c6:	f7ff fecb 	bl	808e760 <_Balloc>
 808e9ca:	f100 0514 	add.w	r5, r0, #20
 808e9ce:	462b      	mov	r3, r5
 808e9d0:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 808e9d4:	2200      	movs	r2, #0
 808e9d6:	4563      	cmp	r3, ip
 808e9d8:	d202      	bcs.n	808e9e0 <__multiply+0x4a>
 808e9da:	f843 2b04 	str.w	r2, [r3], #4
 808e9de:	e7fa      	b.n	808e9d6 <__multiply+0x40>
 808e9e0:	f104 0214 	add.w	r2, r4, #20
 808e9e4:	f108 0114 	add.w	r1, r8, #20
 808e9e8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 808e9ec:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 808e9f0:	9300      	str	r3, [sp, #0]
 808e9f2:	9b00      	ldr	r3, [sp, #0]
 808e9f4:	9201      	str	r2, [sp, #4]
 808e9f6:	4293      	cmp	r3, r2
 808e9f8:	d957      	bls.n	808eaaa <__multiply+0x114>
 808e9fa:	f8b2 b000 	ldrh.w	fp, [r2]
 808e9fe:	f1bb 0f00 	cmp.w	fp, #0
 808ea02:	d023      	beq.n	808ea4c <__multiply+0xb6>
 808ea04:	4689      	mov	r9, r1
 808ea06:	46ae      	mov	lr, r5
 808ea08:	f04f 0800 	mov.w	r8, #0
 808ea0c:	f859 4b04 	ldr.w	r4, [r9], #4
 808ea10:	f8be a000 	ldrh.w	sl, [lr]
 808ea14:	b2a3      	uxth	r3, r4
 808ea16:	fb0b a303 	mla	r3, fp, r3, sl
 808ea1a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 808ea1e:	f8de 4000 	ldr.w	r4, [lr]
 808ea22:	4443      	add	r3, r8
 808ea24:	ea4f 4814 	mov.w	r8, r4, lsr #16
 808ea28:	fb0b 840a 	mla	r4, fp, sl, r8
 808ea2c:	46f2      	mov	sl, lr
 808ea2e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 808ea32:	b29b      	uxth	r3, r3
 808ea34:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 808ea38:	454f      	cmp	r7, r9
 808ea3a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 808ea3e:	f84a 3b04 	str.w	r3, [sl], #4
 808ea42:	d901      	bls.n	808ea48 <__multiply+0xb2>
 808ea44:	46d6      	mov	lr, sl
 808ea46:	e7e1      	b.n	808ea0c <__multiply+0x76>
 808ea48:	f8ce 8004 	str.w	r8, [lr, #4]
 808ea4c:	9b01      	ldr	r3, [sp, #4]
 808ea4e:	3204      	adds	r2, #4
 808ea50:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 808ea54:	f1ba 0f00 	cmp.w	sl, #0
 808ea58:	d021      	beq.n	808ea9e <__multiply+0x108>
 808ea5a:	462c      	mov	r4, r5
 808ea5c:	4689      	mov	r9, r1
 808ea5e:	682b      	ldr	r3, [r5, #0]
 808ea60:	f04f 0800 	mov.w	r8, #0
 808ea64:	f8b9 e000 	ldrh.w	lr, [r9]
 808ea68:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 808ea6c:	b29b      	uxth	r3, r3
 808ea6e:	fb0a be0e 	mla	lr, sl, lr, fp
 808ea72:	46a3      	mov	fp, r4
 808ea74:	44f0      	add	r8, lr
 808ea76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 808ea7a:	f84b 3b04 	str.w	r3, [fp], #4
 808ea7e:	f859 3b04 	ldr.w	r3, [r9], #4
 808ea82:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 808ea86:	0c1b      	lsrs	r3, r3, #16
 808ea88:	fb0a e303 	mla	r3, sl, r3, lr
 808ea8c:	454f      	cmp	r7, r9
 808ea8e:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 808ea92:	ea4f 4813 	mov.w	r8, r3, lsr #16
 808ea96:	d901      	bls.n	808ea9c <__multiply+0x106>
 808ea98:	465c      	mov	r4, fp
 808ea9a:	e7e3      	b.n	808ea64 <__multiply+0xce>
 808ea9c:	6063      	str	r3, [r4, #4]
 808ea9e:	3504      	adds	r5, #4
 808eaa0:	e7a7      	b.n	808e9f2 <__multiply+0x5c>
 808eaa2:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 808eaa6:	b913      	cbnz	r3, 808eaae <__multiply+0x118>
 808eaa8:	3e01      	subs	r6, #1
 808eaaa:	2e00      	cmp	r6, #0
 808eaac:	dcf9      	bgt.n	808eaa2 <__multiply+0x10c>
 808eaae:	6106      	str	r6, [r0, #16]
 808eab0:	b003      	add	sp, #12
 808eab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0808eab8 <__pow5mult>:
 808eab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808eabc:	4615      	mov	r5, r2
 808eabe:	f012 0203 	ands.w	r2, r2, #3
 808eac2:	4606      	mov	r6, r0
 808eac4:	460f      	mov	r7, r1
 808eac6:	d007      	beq.n	808ead8 <__pow5mult+0x20>
 808eac8:	4c21      	ldr	r4, [pc, #132]	; (808eb50 <__pow5mult+0x98>)
 808eaca:	3a01      	subs	r2, #1
 808eacc:	2300      	movs	r3, #0
 808eace:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 808ead2:	f7ff fe91 	bl	808e7f8 <__multadd>
 808ead6:	4607      	mov	r7, r0
 808ead8:	10ad      	asrs	r5, r5, #2
 808eada:	d036      	beq.n	808eb4a <__pow5mult+0x92>
 808eadc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 808eade:	b93c      	cbnz	r4, 808eaf0 <__pow5mult+0x38>
 808eae0:	2010      	movs	r0, #16
 808eae2:	f7f9 fd4d 	bl	8088580 <malloc>
 808eae6:	6270      	str	r0, [r6, #36]	; 0x24
 808eae8:	6044      	str	r4, [r0, #4]
 808eaea:	6084      	str	r4, [r0, #8]
 808eaec:	6004      	str	r4, [r0, #0]
 808eaee:	60c4      	str	r4, [r0, #12]
 808eaf0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 808eaf4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 808eaf8:	b94c      	cbnz	r4, 808eb0e <__pow5mult+0x56>
 808eafa:	f240 2171 	movw	r1, #625	; 0x271
 808eafe:	4630      	mov	r0, r6
 808eb00:	f7ff ff40 	bl	808e984 <__i2b>
 808eb04:	4604      	mov	r4, r0
 808eb06:	2300      	movs	r3, #0
 808eb08:	f8c8 0008 	str.w	r0, [r8, #8]
 808eb0c:	6003      	str	r3, [r0, #0]
 808eb0e:	f04f 0800 	mov.w	r8, #0
 808eb12:	07eb      	lsls	r3, r5, #31
 808eb14:	d50a      	bpl.n	808eb2c <__pow5mult+0x74>
 808eb16:	4639      	mov	r1, r7
 808eb18:	4622      	mov	r2, r4
 808eb1a:	4630      	mov	r0, r6
 808eb1c:	f7ff ff3b 	bl	808e996 <__multiply>
 808eb20:	4681      	mov	r9, r0
 808eb22:	4639      	mov	r1, r7
 808eb24:	4630      	mov	r0, r6
 808eb26:	f7ff fe50 	bl	808e7ca <_Bfree>
 808eb2a:	464f      	mov	r7, r9
 808eb2c:	106d      	asrs	r5, r5, #1
 808eb2e:	d00c      	beq.n	808eb4a <__pow5mult+0x92>
 808eb30:	6820      	ldr	r0, [r4, #0]
 808eb32:	b108      	cbz	r0, 808eb38 <__pow5mult+0x80>
 808eb34:	4604      	mov	r4, r0
 808eb36:	e7ec      	b.n	808eb12 <__pow5mult+0x5a>
 808eb38:	4622      	mov	r2, r4
 808eb3a:	4621      	mov	r1, r4
 808eb3c:	4630      	mov	r0, r6
 808eb3e:	f7ff ff2a 	bl	808e996 <__multiply>
 808eb42:	6020      	str	r0, [r4, #0]
 808eb44:	f8c0 8000 	str.w	r8, [r0]
 808eb48:	e7f4      	b.n	808eb34 <__pow5mult+0x7c>
 808eb4a:	4638      	mov	r0, r7
 808eb4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808eb50:	08092068 	.word	0x08092068

0808eb54 <__lshift>:
 808eb54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808eb58:	460c      	mov	r4, r1
 808eb5a:	4607      	mov	r7, r0
 808eb5c:	4691      	mov	r9, r2
 808eb5e:	6926      	ldr	r6, [r4, #16]
 808eb60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 808eb64:	4456      	add	r6, sl
 808eb66:	6849      	ldr	r1, [r1, #4]
 808eb68:	68a3      	ldr	r3, [r4, #8]
 808eb6a:	1c75      	adds	r5, r6, #1
 808eb6c:	42ab      	cmp	r3, r5
 808eb6e:	da02      	bge.n	808eb76 <__lshift+0x22>
 808eb70:	3101      	adds	r1, #1
 808eb72:	005b      	lsls	r3, r3, #1
 808eb74:	e7fa      	b.n	808eb6c <__lshift+0x18>
 808eb76:	4638      	mov	r0, r7
 808eb78:	f7ff fdf2 	bl	808e760 <_Balloc>
 808eb7c:	2300      	movs	r3, #0
 808eb7e:	4680      	mov	r8, r0
 808eb80:	461a      	mov	r2, r3
 808eb82:	f100 0114 	add.w	r1, r0, #20
 808eb86:	4553      	cmp	r3, sl
 808eb88:	da03      	bge.n	808eb92 <__lshift+0x3e>
 808eb8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 808eb8e:	3301      	adds	r3, #1
 808eb90:	e7f9      	b.n	808eb86 <__lshift+0x32>
 808eb92:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 808eb96:	6920      	ldr	r0, [r4, #16]
 808eb98:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 808eb9c:	f019 091f 	ands.w	r9, r9, #31
 808eba0:	f104 0114 	add.w	r1, r4, #20
 808eba4:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 808eba8:	d014      	beq.n	808ebd4 <__lshift+0x80>
 808ebaa:	f1c9 0c20 	rsb	ip, r9, #32
 808ebae:	2200      	movs	r2, #0
 808ebb0:	6808      	ldr	r0, [r1, #0]
 808ebb2:	469a      	mov	sl, r3
 808ebb4:	fa00 f009 	lsl.w	r0, r0, r9
 808ebb8:	4302      	orrs	r2, r0
 808ebba:	f843 2b04 	str.w	r2, [r3], #4
 808ebbe:	f851 2b04 	ldr.w	r2, [r1], #4
 808ebc2:	458e      	cmp	lr, r1
 808ebc4:	fa22 f20c 	lsr.w	r2, r2, ip
 808ebc8:	d8f2      	bhi.n	808ebb0 <__lshift+0x5c>
 808ebca:	f8ca 2004 	str.w	r2, [sl, #4]
 808ebce:	b142      	cbz	r2, 808ebe2 <__lshift+0x8e>
 808ebd0:	1cb5      	adds	r5, r6, #2
 808ebd2:	e006      	b.n	808ebe2 <__lshift+0x8e>
 808ebd4:	3b04      	subs	r3, #4
 808ebd6:	f851 2b04 	ldr.w	r2, [r1], #4
 808ebda:	458e      	cmp	lr, r1
 808ebdc:	f843 2f04 	str.w	r2, [r3, #4]!
 808ebe0:	d8f9      	bhi.n	808ebd6 <__lshift+0x82>
 808ebe2:	3d01      	subs	r5, #1
 808ebe4:	4638      	mov	r0, r7
 808ebe6:	f8c8 5010 	str.w	r5, [r8, #16]
 808ebea:	4621      	mov	r1, r4
 808ebec:	f7ff fded 	bl	808e7ca <_Bfree>
 808ebf0:	4640      	mov	r0, r8
 808ebf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0808ebf6 <__mcmp>:
 808ebf6:	6903      	ldr	r3, [r0, #16]
 808ebf8:	690a      	ldr	r2, [r1, #16]
 808ebfa:	b510      	push	{r4, lr}
 808ebfc:	1a9b      	subs	r3, r3, r2
 808ebfe:	d111      	bne.n	808ec24 <__mcmp+0x2e>
 808ec00:	0092      	lsls	r2, r2, #2
 808ec02:	3014      	adds	r0, #20
 808ec04:	3114      	adds	r1, #20
 808ec06:	1883      	adds	r3, r0, r2
 808ec08:	440a      	add	r2, r1
 808ec0a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 808ec0e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 808ec12:	428c      	cmp	r4, r1
 808ec14:	d002      	beq.n	808ec1c <__mcmp+0x26>
 808ec16:	d307      	bcc.n	808ec28 <__mcmp+0x32>
 808ec18:	2001      	movs	r0, #1
 808ec1a:	bd10      	pop	{r4, pc}
 808ec1c:	4298      	cmp	r0, r3
 808ec1e:	d3f4      	bcc.n	808ec0a <__mcmp+0x14>
 808ec20:	2000      	movs	r0, #0
 808ec22:	bd10      	pop	{r4, pc}
 808ec24:	4618      	mov	r0, r3
 808ec26:	bd10      	pop	{r4, pc}
 808ec28:	f04f 30ff 	mov.w	r0, #4294967295
 808ec2c:	bd10      	pop	{r4, pc}

0808ec2e <__mdiff>:
 808ec2e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808ec32:	460c      	mov	r4, r1
 808ec34:	4607      	mov	r7, r0
 808ec36:	4611      	mov	r1, r2
 808ec38:	4620      	mov	r0, r4
 808ec3a:	4615      	mov	r5, r2
 808ec3c:	f7ff ffdb 	bl	808ebf6 <__mcmp>
 808ec40:	1e06      	subs	r6, r0, #0
 808ec42:	d108      	bne.n	808ec56 <__mdiff+0x28>
 808ec44:	4631      	mov	r1, r6
 808ec46:	4638      	mov	r0, r7
 808ec48:	f7ff fd8a 	bl	808e760 <_Balloc>
 808ec4c:	2301      	movs	r3, #1
 808ec4e:	6103      	str	r3, [r0, #16]
 808ec50:	6146      	str	r6, [r0, #20]
 808ec52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808ec56:	bfbc      	itt	lt
 808ec58:	4623      	movlt	r3, r4
 808ec5a:	462c      	movlt	r4, r5
 808ec5c:	4638      	mov	r0, r7
 808ec5e:	6861      	ldr	r1, [r4, #4]
 808ec60:	bfba      	itte	lt
 808ec62:	461d      	movlt	r5, r3
 808ec64:	2601      	movlt	r6, #1
 808ec66:	2600      	movge	r6, #0
 808ec68:	f7ff fd7a 	bl	808e760 <_Balloc>
 808ec6c:	692b      	ldr	r3, [r5, #16]
 808ec6e:	60c6      	str	r6, [r0, #12]
 808ec70:	6926      	ldr	r6, [r4, #16]
 808ec72:	f105 0914 	add.w	r9, r5, #20
 808ec76:	f104 0114 	add.w	r1, r4, #20
 808ec7a:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 808ec7e:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 808ec82:	f100 0514 	add.w	r5, r0, #20
 808ec86:	f04f 0c00 	mov.w	ip, #0
 808ec8a:	f851 2b04 	ldr.w	r2, [r1], #4
 808ec8e:	f859 4b04 	ldr.w	r4, [r9], #4
 808ec92:	b293      	uxth	r3, r2
 808ec94:	449c      	add	ip, r3
 808ec96:	b2a3      	uxth	r3, r4
 808ec98:	0c24      	lsrs	r4, r4, #16
 808ec9a:	ebc3 030c 	rsb	r3, r3, ip
 808ec9e:	ebc4 4212 	rsb	r2, r4, r2, lsr #16
 808eca2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 808eca6:	b29b      	uxth	r3, r3
 808eca8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 808ecac:	45c8      	cmp	r8, r9
 808ecae:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 808ecb2:	468e      	mov	lr, r1
 808ecb4:	f845 2b04 	str.w	r2, [r5], #4
 808ecb8:	d8e7      	bhi.n	808ec8a <__mdiff+0x5c>
 808ecba:	45be      	cmp	lr, r7
 808ecbc:	d20e      	bcs.n	808ecdc <__mdiff+0xae>
 808ecbe:	f85e 1b04 	ldr.w	r1, [lr], #4
 808ecc2:	b28a      	uxth	r2, r1
 808ecc4:	4462      	add	r2, ip
 808ecc6:	1413      	asrs	r3, r2, #16
 808ecc8:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 808eccc:	b292      	uxth	r2, r2
 808ecce:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 808ecd2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 808ecd6:	f845 2b04 	str.w	r2, [r5], #4
 808ecda:	e7ee      	b.n	808ecba <__mdiff+0x8c>
 808ecdc:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 808ece0:	b90b      	cbnz	r3, 808ece6 <__mdiff+0xb8>
 808ece2:	3e01      	subs	r6, #1
 808ece4:	e7fa      	b.n	808ecdc <__mdiff+0xae>
 808ece6:	6106      	str	r6, [r0, #16]
 808ece8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0808ecec <__ulp>:
 808ecec:	4b10      	ldr	r3, [pc, #64]	; (808ed30 <__ulp+0x44>)
 808ecee:	400b      	ands	r3, r1
 808ecf0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 808ecf4:	2b00      	cmp	r3, #0
 808ecf6:	dd02      	ble.n	808ecfe <__ulp+0x12>
 808ecf8:	2000      	movs	r0, #0
 808ecfa:	4619      	mov	r1, r3
 808ecfc:	4770      	bx	lr
 808ecfe:	425b      	negs	r3, r3
 808ed00:	151b      	asrs	r3, r3, #20
 808ed02:	2b13      	cmp	r3, #19
 808ed04:	f04f 0000 	mov.w	r0, #0
 808ed08:	f04f 0100 	mov.w	r1, #0
 808ed0c:	dc04      	bgt.n	808ed18 <__ulp+0x2c>
 808ed0e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 808ed12:	fa42 f103 	asr.w	r1, r2, r3
 808ed16:	4770      	bx	lr
 808ed18:	3b14      	subs	r3, #20
 808ed1a:	2b1e      	cmp	r3, #30
 808ed1c:	f04f 0201 	mov.w	r2, #1
 808ed20:	bfce      	itee	gt
 808ed22:	4613      	movgt	r3, r2
 808ed24:	f1c3 031f 	rsble	r3, r3, #31
 808ed28:	fa02 f303 	lslle.w	r3, r2, r3
 808ed2c:	4618      	mov	r0, r3
 808ed2e:	4770      	bx	lr
 808ed30:	7ff00000 	.word	0x7ff00000

0808ed34 <__b2d>:
 808ed34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808ed36:	6905      	ldr	r5, [r0, #16]
 808ed38:	f100 0614 	add.w	r6, r0, #20
 808ed3c:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 808ed40:	f855 4c04 	ldr.w	r4, [r5, #-4]
 808ed44:	1f2f      	subs	r7, r5, #4
 808ed46:	4620      	mov	r0, r4
 808ed48:	f7ff fdcf 	bl	808e8ea <__hi0bits>
 808ed4c:	f1c0 0320 	rsb	r3, r0, #32
 808ed50:	280a      	cmp	r0, #10
 808ed52:	600b      	str	r3, [r1, #0]
 808ed54:	dc14      	bgt.n	808ed80 <__b2d+0x4c>
 808ed56:	f1c0 0e0b 	rsb	lr, r0, #11
 808ed5a:	fa24 f10e 	lsr.w	r1, r4, lr
 808ed5e:	42be      	cmp	r6, r7
 808ed60:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 808ed64:	bf34      	ite	cc
 808ed66:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 808ed6a:	2100      	movcs	r1, #0
 808ed6c:	3015      	adds	r0, #21
 808ed6e:	fa04 f000 	lsl.w	r0, r4, r0
 808ed72:	fa21 f10e 	lsr.w	r1, r1, lr
 808ed76:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 808ed7a:	ea40 0201 	orr.w	r2, r0, r1
 808ed7e:	e023      	b.n	808edc8 <__b2d+0x94>
 808ed80:	42be      	cmp	r6, r7
 808ed82:	bf3a      	itte	cc
 808ed84:	f1a5 0708 	subcc.w	r7, r5, #8
 808ed88:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 808ed8c:	2100      	movcs	r1, #0
 808ed8e:	380b      	subs	r0, #11
 808ed90:	d015      	beq.n	808edbe <__b2d+0x8a>
 808ed92:	4084      	lsls	r4, r0
 808ed94:	f1c0 0520 	rsb	r5, r0, #32
 808ed98:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 808ed9c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 808eda0:	42b7      	cmp	r7, r6
 808eda2:	fa21 fe05 	lsr.w	lr, r1, r5
 808eda6:	ea44 030e 	orr.w	r3, r4, lr
 808edaa:	bf8c      	ite	hi
 808edac:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
 808edb0:	2400      	movls	r4, #0
 808edb2:	fa01 f000 	lsl.w	r0, r1, r0
 808edb6:	40ec      	lsrs	r4, r5
 808edb8:	ea40 0204 	orr.w	r2, r0, r4
 808edbc:	e004      	b.n	808edc8 <__b2d+0x94>
 808edbe:	460a      	mov	r2, r1
 808edc0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 808edc4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 808edc8:	4610      	mov	r0, r2
 808edca:	4619      	mov	r1, r3
 808edcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808edce <__d2b>:
 808edce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 808edd2:	461c      	mov	r4, r3
 808edd4:	2101      	movs	r1, #1
 808edd6:	4690      	mov	r8, r2
 808edd8:	9e08      	ldr	r6, [sp, #32]
 808edda:	9d09      	ldr	r5, [sp, #36]	; 0x24
 808eddc:	f7ff fcc0 	bl	808e760 <_Balloc>
 808ede0:	f3c4 0213 	ubfx	r2, r4, #0, #20
 808ede4:	f3c4 540a 	ubfx	r4, r4, #20, #11
 808ede8:	4607      	mov	r7, r0
 808edea:	b10c      	cbz	r4, 808edf0 <__d2b+0x22>
 808edec:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 808edf0:	9201      	str	r2, [sp, #4]
 808edf2:	f1b8 0f00 	cmp.w	r8, #0
 808edf6:	d019      	beq.n	808ee2c <__d2b+0x5e>
 808edf8:	a802      	add	r0, sp, #8
 808edfa:	f840 8d08 	str.w	r8, [r0, #-8]!
 808edfe:	f7ff fd94 	bl	808e92a <__lo0bits>
 808ee02:	9b00      	ldr	r3, [sp, #0]
 808ee04:	b148      	cbz	r0, 808ee1a <__d2b+0x4c>
 808ee06:	9a01      	ldr	r2, [sp, #4]
 808ee08:	f1c0 0120 	rsb	r1, r0, #32
 808ee0c:	fa02 f101 	lsl.w	r1, r2, r1
 808ee10:	430b      	orrs	r3, r1
 808ee12:	40c2      	lsrs	r2, r0
 808ee14:	617b      	str	r3, [r7, #20]
 808ee16:	9201      	str	r2, [sp, #4]
 808ee18:	e000      	b.n	808ee1c <__d2b+0x4e>
 808ee1a:	617b      	str	r3, [r7, #20]
 808ee1c:	9b01      	ldr	r3, [sp, #4]
 808ee1e:	2b00      	cmp	r3, #0
 808ee20:	bf14      	ite	ne
 808ee22:	2102      	movne	r1, #2
 808ee24:	2101      	moveq	r1, #1
 808ee26:	61bb      	str	r3, [r7, #24]
 808ee28:	6139      	str	r1, [r7, #16]
 808ee2a:	e007      	b.n	808ee3c <__d2b+0x6e>
 808ee2c:	a801      	add	r0, sp, #4
 808ee2e:	f7ff fd7c 	bl	808e92a <__lo0bits>
 808ee32:	9b01      	ldr	r3, [sp, #4]
 808ee34:	2101      	movs	r1, #1
 808ee36:	617b      	str	r3, [r7, #20]
 808ee38:	6139      	str	r1, [r7, #16]
 808ee3a:	3020      	adds	r0, #32
 808ee3c:	b134      	cbz	r4, 808ee4c <__d2b+0x7e>
 808ee3e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 808ee42:	4404      	add	r4, r0
 808ee44:	6034      	str	r4, [r6, #0]
 808ee46:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 808ee4a:	e009      	b.n	808ee60 <__d2b+0x92>
 808ee4c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 808ee50:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 808ee54:	6030      	str	r0, [r6, #0]
 808ee56:	6918      	ldr	r0, [r3, #16]
 808ee58:	f7ff fd47 	bl	808e8ea <__hi0bits>
 808ee5c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 808ee60:	6028      	str	r0, [r5, #0]
 808ee62:	4638      	mov	r0, r7
 808ee64:	b002      	add	sp, #8
 808ee66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808ee6a <__ratio>:
 808ee6a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 808ee6e:	4688      	mov	r8, r1
 808ee70:	4669      	mov	r1, sp
 808ee72:	4681      	mov	r9, r0
 808ee74:	f7ff ff5e 	bl	808ed34 <__b2d>
 808ee78:	460d      	mov	r5, r1
 808ee7a:	4604      	mov	r4, r0
 808ee7c:	a901      	add	r1, sp, #4
 808ee7e:	4640      	mov	r0, r8
 808ee80:	f7ff ff58 	bl	808ed34 <__b2d>
 808ee84:	460f      	mov	r7, r1
 808ee86:	4606      	mov	r6, r0
 808ee88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 808ee8c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 808ee90:	4620      	mov	r0, r4
 808ee92:	1a9a      	subs	r2, r3, r2
 808ee94:	e89d 000a 	ldmia.w	sp, {r1, r3}
 808ee98:	1ac9      	subs	r1, r1, r3
 808ee9a:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 808ee9e:	2b00      	cmp	r3, #0
 808eea0:	bfcc      	ite	gt
 808eea2:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 808eea6:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
 808eeaa:	4632      	mov	r2, r6
 808eeac:	463b      	mov	r3, r7
 808eeae:	4629      	mov	r1, r5
 808eeb0:	f7fc f86c 	bl	808af8c <__aeabi_ddiv>
 808eeb4:	b003      	add	sp, #12
 808eeb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0808eeba <__copybits>:
 808eeba:	3901      	subs	r1, #1
 808eebc:	b510      	push	{r4, lr}
 808eebe:	1149      	asrs	r1, r1, #5
 808eec0:	6914      	ldr	r4, [r2, #16]
 808eec2:	3101      	adds	r1, #1
 808eec4:	f102 0314 	add.w	r3, r2, #20
 808eec8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 808eecc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 808eed0:	42a3      	cmp	r3, r4
 808eed2:	4602      	mov	r2, r0
 808eed4:	d204      	bcs.n	808eee0 <__copybits+0x26>
 808eed6:	f853 2b04 	ldr.w	r2, [r3], #4
 808eeda:	f840 2b04 	str.w	r2, [r0], #4
 808eede:	e7f7      	b.n	808eed0 <__copybits+0x16>
 808eee0:	2300      	movs	r3, #0
 808eee2:	428a      	cmp	r2, r1
 808eee4:	d202      	bcs.n	808eeec <__copybits+0x32>
 808eee6:	f842 3b04 	str.w	r3, [r2], #4
 808eeea:	e7fa      	b.n	808eee2 <__copybits+0x28>
 808eeec:	bd10      	pop	{r4, pc}

0808eeee <__any_on>:
 808eeee:	f100 0214 	add.w	r2, r0, #20
 808eef2:	6900      	ldr	r0, [r0, #16]
 808eef4:	114b      	asrs	r3, r1, #5
 808eef6:	4298      	cmp	r0, r3
 808eef8:	b510      	push	{r4, lr}
 808eefa:	db0c      	blt.n	808ef16 <__any_on+0x28>
 808eefc:	dd0c      	ble.n	808ef18 <__any_on+0x2a>
 808eefe:	f011 011f 	ands.w	r1, r1, #31
 808ef02:	d009      	beq.n	808ef18 <__any_on+0x2a>
 808ef04:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 808ef08:	fa24 f001 	lsr.w	r0, r4, r1
 808ef0c:	fa00 f101 	lsl.w	r1, r0, r1
 808ef10:	428c      	cmp	r4, r1
 808ef12:	d10c      	bne.n	808ef2e <__any_on+0x40>
 808ef14:	e000      	b.n	808ef18 <__any_on+0x2a>
 808ef16:	4603      	mov	r3, r0
 808ef18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 808ef1c:	4293      	cmp	r3, r2
 808ef1e:	d904      	bls.n	808ef2a <__any_on+0x3c>
 808ef20:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 808ef24:	2900      	cmp	r1, #0
 808ef26:	d0f9      	beq.n	808ef1c <__any_on+0x2e>
 808ef28:	e001      	b.n	808ef2e <__any_on+0x40>
 808ef2a:	2000      	movs	r0, #0
 808ef2c:	bd10      	pop	{r4, pc}
 808ef2e:	2001      	movs	r0, #1
 808ef30:	bd10      	pop	{r4, pc}

0808ef32 <_calloc_r>:
 808ef32:	b538      	push	{r3, r4, r5, lr}
 808ef34:	fb02 f401 	mul.w	r4, r2, r1
 808ef38:	4621      	mov	r1, r4
 808ef3a:	f7f9 fb71 	bl	8088620 <_malloc_r>
 808ef3e:	4605      	mov	r5, r0
 808ef40:	b118      	cbz	r0, 808ef4a <_calloc_r+0x18>
 808ef42:	4622      	mov	r2, r4
 808ef44:	2100      	movs	r1, #0
 808ef46:	f7fd f8b9 	bl	808c0bc <memset>
 808ef4a:	4628      	mov	r0, r5
 808ef4c:	bd38      	pop	{r3, r4, r5, pc}

0808ef4e <__env_lock>:
 808ef4e:	4770      	bx	lr

0808ef50 <__env_unlock>:
 808ef50:	4770      	bx	lr

0808ef52 <link_code_end>:
	...

0808ef54 <dynalib_user>:
 808ef54:	0021 0808 0061 0808 008d 0808 0091 0808     !...a...........
 808ef64:	0000 0000 0100 0402 1008 0000               ............

0808ef70 <_ZTV4File>:
	...
 808ef78:	0935 0808 0945 0808 095f 0808 0959 0808     5...E..._...Y...
 808ef88:	0917 0808 0983 0808 097d 0808 0977 0808     ........}...w...

0808ef98 <_ZTV6SdFile>:
	...
 808efa0:	0933 0808 0937 0808 0a0f 0808 0953 0808     3...7.......S...

0808efb0 <_ZTV5SdFat>:
	...
 808efb8:	09bb 0808 09b3 0808 09ab 0808 09a3 0808     ................
 808efc8:	62b5 0806 0006 0064 0001 0001 127a 62b5     .b....d.....z..b
 808efd8:	1106 0002 0000 831a 62b5 1106 0002 0001     .........b......
 808efe8:	831a 7546 6c6c 6120 6464 6572 7373 6120     ..Full address a
 808eff8:	646e 7620 6c61 6575 7320 6275 7473 6972     nd value substri
 808f008:	676e 203a 6100 6464 6572 7373 7320 6275     ng: .address sub
 808f018:	7473 6972 676e 203a 7325 0d0a 5600 6c61     string: %s...Val
 808f028:	6575 7320 6275 7473 6972 676e 203a 7325     ue substring: %s
 808f038:	0d0a 2500 322e 0058 6554 706d 7265 7461     ...%.2X.Temperat
 808f048:	7275 2065 6572 6461 6e69 2067 7266 6d6f     ure reading from
 808f058:	4820 4849 3138 3032 5400 6d65 6570 6172      HIH8120.Tempera
 808f068:	7574 6572 7220 6165 6964 676e 6620 6f72     ture reading fro
 808f078:	206d 4d54 3350 0036 6554 706d 7265 7461     m TMP36.Temperat
 808f088:	7275 2065 6572 6461 6e69 2067 7266 6d6f     ure reading from
 808f098:	4220 454d 6620 726f 4120 706c 6168 6573      BME for Alphase
 808f0a8:	736e 0065 7548 696d 6964 7974 7220 6165     nse.Humidity rea
 808f0b8:	6964 676e 6620 6f72 206d 4948 3848 3231     ding from HIH812
 808f0c8:	0030 7548 696d 6964 7974 7220 6165 6964     0.Humidity readi
 808f0d8:	676e 6620 6f72 206d 4d42 0045 7453 7261     ng from BME.Star
 808f0e8:	2074 666f 6120 706c 6168 3220 7220 6165     t of alpha 2 rea
 808f0f8:	0064 6f43 6c75 6e64 7427 6320 6d6f 756d     d.Couldn't commu
 808f108:	696e 6163 6574 7720 7469 2068 4d4c 3950     nicate with LMP9
 808f118:	3031 3030 3220 6800 6c61 2066 7276 6665     1000 2.half vref
 808f128:	2032 6461 3173 5300 6174 7574 2073 3d3d     2 ads1.Status ==
 808f138:	3020 6620 6f72 206d 4d4c 3950 3031 3030      0 from LMP91000
 808f148:	3220 7320 6174 7574 2073 6572 0067 392d      2 status reg.-9
 808f158:	0039 7257 7469 6e69 2067 6164 6174 7420     9.Writing data t
 808f168:	206f 6f6c 2067 6966 656c 002e 6946 656c     o log file..File
 808f178:	5320 6174 7472 7420 6d69 7365 6174 706d      Start timestamp
 808f188:	203a 5500 616e 6c62 2065 6f74 7720 6972     : .Unable to wri
 808f198:	6574 7420 206f 6f6c 2067 6966 656c 6900     te to log file.i
 808f1a8:	696e 0074 7245 6f72 2072 6572 6461 6e69     nit.Error readin
 808f1b8:	2067 5047 2053 4d52 0043 5047 2053 7475     g GPS RMC.GPS ut
 808f1c8:	2063 7473 6972 676e 203a 4c00 7461 7469     c string: .Latit
 808f1d8:	6475 2065 7473 6972 676e 203a 6c00 6e6f     ude string: .lon
 808f1e8:	6967 7574 6564 7320 7274 6e69 3a67 0020     gitude string: .
 808f1f8:	6552 6563 7669 6465 6220 6461 6920 646e     Received bad ind
 808f208:	7865 6920 206e 6572 6461 7047 5373 7274     ex in readGpsStr
 808f218:	6165 446d 7461 0065 4747 0041 7245 6f72     eamDate.GGA.Erro
 808f228:	2072 6572 6461 6e69 2067 5047 0053 4142     r reading GPS.BA
 808f238:	2044 6e69 6564 2078 6e69 7220 6165 4764     D index in readG
 808f248:	7370 7453 6572 6d61 000a 2621 4500 5053     psStream..!&.ESP
 808f258:	5720 6669 2069 6f63 6e6e 6365 6974 6e6f      Wifi connection
 808f268:	7320 6174 7574 2073 7369 203a 4300 6e6f      status is: .Con
 808f278:	656e 7463 6465 0021 5345 2050 6977 6966     nected!.ESP wifi
 808f288:	6320 6e6f 656e 7463 6465 4e00 206f 6f43      connected.No Co
 808f298:	6e6e 6365 6974 6e6f 4500 5053 7720 6669     nnection.ESP wif
 808f2a8:	2069 6f6e 2074 6f63 6e6e 6365 6574 0064     i not connected.
 808f2b8:	2140 5300 6e65 6964 676e 6e20 7765 7720     @!.Sending new w
 808f2c8:	6669 2069 7263 6465 6e65 6974 6c61 2073     ifi credentials 
 808f2d8:	6f74 4520 5053 5300 6375 6563 7373 0021     to ESP.Success!.
 808f2e8:	6567 6574 7065 6f72 646d 7461 0061 4f43     geteepromdata.CO
 808f2f8:	7a5f 7265 416f 2e00 7874 0074 6843 6365     _zeroA..txt.Chec
 808f308:	696b 676e 6620 726f 7320 2064 6163 6472     king for sd card
 808f318:	6c00 676f 005f 7243 6165 6574 2064 656e     .log_.Created ne
 808f328:	2077 6966 656c 7420 206f 6f6c 2067 6f74     w file to log to
 808f338:	7520 4453 6320 7261 3a64 0020 6f4e 7520      uSD card: .No u
 808f348:	4453 6320 7261 2064 6564 6574 7463 6465     SD card detected
 808f358:	002e 7453 7261 6974 676e 4c20 504d 3139     ..Starting LMP91
 808f368:	3030 2030 4f43 6920 696e 6974 6c61 7a69     000 CO initializ
 808f378:	7461 6f69 006e 6f43 6c75 6e64 7427 6320     ation.Couldn't c
 808f388:	6d6f 756d 696e 6163 6574 7720 7469 2068     ommunicate with 
 808f398:	4d4c 3950 3031 3030 315f 6620 726f 4320     LMP91000_1 for C
 808f3a8:	004f 6e49 7469 6169 696c 657a 2064 4d4c     O.Initialized LM
 808f3b8:	3950 3031 3030 315f 6620 726f 4320 004f     P91000_1 for CO.
 808f3c8:	6e49 7469 6169 696c 657a 2064 4d4c 3950     Initialized LMP9
 808f3d8:	3031 3030 6620 726f 4320 004f 6f43 6c75     1000 for CO.Coul
 808f3e8:	2064 6f6e 2074 6f63 6d6d 6e75 6369 7461     d not communicat
 808f3f8:	2065 6977 6874 4120 6164 7266 6975 5f74     e with Adafruit_
 808f408:	4441 3153 3131 2035 6f66 2072 4f43 5300     ADS1115 for CO.S
 808f418:	6174 7472 6e69 2067 4d4c 3950 3031 3030     tarting LMP91000
 808f428:	325f 6920 696e 6974 6c61 7a69 7461 6f69     _2 initializatio
 808f438:	006e 6f43 6c75 6e64 7427 6320 6d6f 756d     n.Couldn't commu
 808f448:	696e 6163 6574 7720 7469 2068 4d4c 3950     nicate with LMP9
 808f458:	3031 3030 6620 726f 3220 4900 696e 6974     1000 for 2.Initi
 808f468:	6c61 7a69 6465 4c20 504d 3139 3030 2030     alized LMP91000 
 808f478:	6f66 2072 4f43 3220 4500 5053 7220 7365     for CO 2.ESP res
 808f488:	7465 0021 5746 5620 7265 6973 6e6f 203a     et!.FW Version: 
 808f498:	4200 6975 646c 203a 5300 7379 6574 206d     .Build: .System 
 808f4a8:	6576 7372 6f69 3a6e 2520 0073 002a 754f     version: %s.*.Ou
 808f4b8:	7074 7475 6974 676e 4320 204f 6f74 5020     tputting CO to P
 808f4c8:	2e49 2d00 2500 2f64 6d25 252f 2c79 4825     I..-.%d/%m/%y,%H
 808f4d8:	253a 3a4d 5325 0a00 260d 4500 746e 7265     :%M:%S...&.Enter
 808f4e8:	7320 7274 6e69 2067 6128 6464 6572 7373      string (address
 808f4f8:	762c 6c61 6575 0029 7553 6363 7365 2073     ,value).Success 
 808f508:	6e69 7720 6972 6974 676e 4600 6961 656c     in writing.Faile
 808f518:	2064 7277 7469 6e69 2067 7473 6972 676e     d writing string
 808f528:	4300 7275 6572 746e 7320 6f74 6572 2064     .Current stored 
 808f538:	7373 6469 203a 4300 7275 6572 746e 7320     ssid: .Current s
 808f548:	6f74 6572 2064 6170 7373 6f77 6472 203a     tored password: 
 808f558:	5000 656c 7361 2065 6e65 6574 2072 6170     .Please enter pa
 808f568:	7373 6f77 6472 6920 206e 726f 6564 2072     ssword in order 
 808f578:	6f74 6d20 6b61 2065 6863 6e61 6567 2e73     to make changes.
 808f588:	0d0a 6200 756f 646c 5000 7361 7773 726f     ...bould.Passwor
 808f598:	2064 6f63 7272 6365 2174 4500 746e 7265     d correct!.Enter
 808f5a8:	6e20 7765 7320 6973 3a64 5900 756f 2072      new ssid:.Your 
 808f5b8:	656e 2077 7373 6469 7720 6c69 206c 6562     new ssid will be
 808f5c8:	203a 4900 2073 6874 7369 6f20 616b 3f79     : .Is this okay?
 808f5d8:	7928 6f20 2072 296e 5300 7661 6e69 2067     (y or n).Saving 
 808f5e8:	656e 2077 7373 6469 4500 746e 7265 6e20     new ssid.Enter n
 808f5f8:	7765 7020 7361 7773 726f 0064 6f59 7275     ew password.Your
 808f608:	6e20 7765 7020 7361 7773 726f 2064 6977      new password wi
 808f618:	6c6c 6220 3a65 0020 6153 6976 676e 6e20     ll be: .Saving n
 808f628:	7765 7020 7361 7773 726f 0064 6b6f 7961     ew password.okay
 808f638:	202c 6f6e 7020 6f72 6c62 6d65 0d0a 5000     , no problem...P
 808f648:	656c 7361 2065 6e65 6574 2072 6170 7373     lease enter pass
 808f658:	6f77 6472 6920 206e 726f 6564 2072 6f74     word in order to
 808f668:	6520 616e 6c62 2065 6164 6174 7020 7375      enable data pus
 808f678:	2068 6f74 5320 6e65 6973 6c62 2065 6f49     h to Sensible Io
 808f688:	0074 6d69 6573 736e 6269 656c 4500 616e     t.imsensible.Ena
 808f698:	6c62 6e69 2067 6573 736e 6269 656c 6920     bling sensible i
 808f6a8:	746f 6420 7461 2061 7570 6873 002e 0d0a     ot data push....
 808f6b8:	6e49 6f63 7272 6365 2074 6170 7373 6f77     Incorrect passwo
 808f6c8:	6472 0021 7543 7272 6e65 2074 6544 6976     rd!.Current Devi
 808f6d8:	6563 4920 3a44 5000 656c 7361 2065 6e65     ce ID:.Please en
 808f6e8:	6574 2072 6170 7373 6f77 6472 6920 206e     ter password in 
 808f6f8:	726f 6564 2072 6f74 6320 6168 676e 2065     order to change 
 808f708:	6874 2065 4449 4500 746e 7265 6e20 7765     the ID.Enter new
 808f718:	4420 7665 6369 2065 4449 003a 0d0a 654e      Device ID:...Ne
 808f728:	2077 6544 6976 6563 4920 3a44 0a00 490d     w Device ID:...I
 808f738:	766e 6c61 6469 7620 6c61 6575 0021 6c50     nvalid value!.Pl
 808f748:	6165 6573 6520 746e 7265 7020 7361 7773     ease enter passw
 808f758:	726f 2064 6e69 6f20 6472 7265 7420 206f     ord in order to 
 808f768:	7061 6c70 2079 6564 6166 6c75 2074 6573     apply default se
 808f778:	7474 6e69 7367 5000 7361 7773 726f 2064     ttings.Password 
 808f788:	6f63 7272 6365 2c74 7220 7365 7465 6974     correct, resetti
 808f798:	676e 6120 6c6c 7320 7465 6974 676e 2073     ng all settings 
 808f7a8:	6f74 6420 6665 7561 746c 2021 5020 656c     to default!  Ple
 808f7b8:	7361 2065 6572 6573 2074 6f79 7275 4920     ase reset your I
 808f7c8:	2044 6f74 7420 6568 6f20 656e 7320 6f68     D to the one sho
 808f7d8:	6e77 6f20 206e 6f79 7275 6520 636e 6f6c     wn on your enclo
 808f7e8:	7573 6572 002e 6e45 6574 2072 656e 2077     sure..Enter new 
 808f7f8:	6544 6976 6563 7420 6d69 2065 6e61 2064     Device time and 
 808f808:	6164 6574 2820 3031 6420 6769 7469 6520     date (10 digit e
 808f818:	6f70 6863 7420 6d69 7365 6174 706d 3a29     poch timestamp):
 808f828:	0a00 4e0d 7765 4420 7665 6369 2065 6954     ...New Device Ti
 808f838:	656d 003a 6e45 6574 2072 656e 2077 6544     me:.Enter new De
 808f848:	6976 6563 7420 6d69 2065 6f7a 656e 2820     vice time zone (
 808f858:	312d 2e32 2030 6f74 3120 2e34 2930 0a00     -12.0 to 14.0)..
 808f868:	4e0d 7765 4420 7665 6369 2065 6974 656d     .New Device time
 808f878:	7a20 6e6f 3a65 4300 7275 6572 746e 4620      zone:.Current F
 808f888:	6572 7571 6e65 7963 203a 2800 327e 7320     requency: .(~2 s
 808f898:	6365 6e6f 2964 6d20 6165 7573 6572 656d     econd) measureme
 808f8a8:	746e 0073 6e45 6574 2072 656e 2077 6d61     nts.Enter new am
 808f8b8:	756f 746e 0d0a 0a00 4e0d 7765 4620 6572     ount.....New Fre
 808f8c8:	7571 6e65 7963 203a 4300 7275 6572 746e     quency: .Current
 808f8d8:	4320 324f 7320 6f6c 6570 003a 7020 6d70      CO2 slope:. ppm
 808f8e8:	4500 746e 7265 6e20 7765 4320 324f 7320     .Enter new CO2 s
 808f8f8:	6f6c 6570 0d0a 0a00 4e0d 7765 4320 324f     lope.....New CO2
 808f908:	7320 6f6c 6570 203a 4300 7275 6572 746e      slope: .Current
 808f918:	4320 324f 7a20 7265 3a6f 4500 746e 7265      CO2 zero:.Enter
 808f928:	6e20 7765 4320 324f 5a20 7265 0a6f 000d      new CO2 Zero...
 808f938:	0d0a 654e 2077 4f43 2032 657a 6f72 203a     ..New CO2 zero: 
 808f948:	4300 7275 6572 746e 4320 204f 6c73 706f     .Current CO slop
 808f958:	3a65 4500 746e 7265 6e20 7765 4320 204f     e:.Enter new CO 
 808f968:	6c73 706f 0a65 000d 0d0a 654e 2077 4f43     slope.....New CO
 808f978:	2041 6c73 706f 3a65 0020 7543 7272 6e65     A slope: .Curren
 808f988:	2074 4f43 415f 7a20 7265 3a6f 2000 7070     t CO_A zero:. pp
 808f998:	0062 6e45 6574 2072 656e 2077 4f43 5a20     b.Enter new CO Z
 808f9a8:	7265 0a6f 000d 0d0a 654e 2077 4f43 7a20     ero.....New CO z
 808f9b8:	7265 3a6f 0020 7543 7272 6e65 2074 4d50     ero: .Current PM
 808f9c8:	2031 6c73 706f 3a65 4500 746e 7265 6e20     1 slope:.Enter n
 808f9d8:	7765 5020 314d 7320 6f6c 6570 0d0a 0a00     ew PM1 slope....
 808f9e8:	4e0d 7765 5020 314d 7320 6f6c 6570 203a     .New PM1 slope: 
 808f9f8:	4300 7275 6572 746e 5020 314d 7a20 7265     .Current PM1 zer
 808fa08:	3a6f 2000 6775 6d2f 0033 6e45 6574 2072     o:. ug/m3.Enter 
 808fa18:	656e 2077 4d50 2031 655a 6f72 0d0a 0a00     new PM1 Zero....
 808fa28:	4e0d 7765 5020 314d 7a20 7265 3a6f 0020     .New PM1 zero: .
 808fa38:	7543 7272 6e65 2074 4d50 2e32 2035 6c73     Current PM2.5 sl
 808fa48:	706f 3a65 4500 746e 7265 6e20 7765 5020     ope:.Enter new P
 808fa58:	324d 352e 7320 6f6c 6570 0d0a 0a00 4e0d     M2.5 slope.....N
 808fa68:	7765 5020 324d 352e 7320 6f6c 6570 203a     ew PM2.5 slope: 
 808fa78:	4300 7275 6572 746e 5020 324d 352e 7a20     .Current PM2.5 z
 808fa88:	7265 3a6f 4500 746e 7265 6e20 7765 5020     ero:.Enter new P
 808fa98:	324d 352e 5a20 7265 0a6f 000d 0d0a 654e     M2.5 Zero.....Ne
 808faa8:	2077 4d50 2e32 2035 657a 6f72 203a 4300     w PM2.5 zero: .C
 808fab8:	7275 6572 746e 5020 314d 2030 6c73 706f     urrent PM10 slop
 808fac8:	3a65 4500 746e 7265 6e20 7765 5020 314d     e:.Enter new PM1
 808fad8:	2030 6c73 706f 0a65 000d 0d0a 654e 2077     0 slope.....New 
 808fae8:	4d50 3031 7320 6f6c 6570 203a 4300 7275     PM10 slope: .Cur
 808faf8:	6572 746e 5020 314d 2030 657a 6f72 003a     rent PM10 zero:.
 808fb08:	7520 2f6d 336d 4500 746e 7265 6e20 7765      um/m3.Enter new
 808fb18:	5020 314d 2030 655a 6f72 0d0a 0a00 4e0d      PM10 Zero.....N
 808fb28:	7765 5020 314d 2030 657a 6f72 203a 4300     ew PM10 zero: .C
 808fb38:	7275 6572 746e 5420 6d65 6570 6172 7574     urrent Temperatu
 808fb48:	6572 7320 6f6c 6570 003a 4420 6765 6572     re slope:. Degre
 808fb58:	7365 4320 4500 746e 7265 6e20 7765 5420     es C.Enter new T
 808fb68:	6d65 6570 6172 7574 6572 7320 6f6c 6570     emperature slope
 808fb78:	0d0a 0a00 4e0d 7765 5420 6d65 6570 6172     .....New Tempera
 808fb88:	7574 6572 7320 6f6c 6570 203a 4300 7275     ture slope: .Cur
 808fb98:	6572 746e 5420 6d65 6570 6172 7574 6572     rent Temperature
 808fba8:	7a20 7265 3a6f 4500 746e 7265 6e20 7765      zero:.Enter new
 808fbb8:	5420 6d65 6570 6172 7574 6572 5a20 7265      Temperature Zer
 808fbc8:	0a6f 000d 0d0a 654e 2077 6554 706d 7265     o.....New Temper
 808fbd8:	7461 7275 2065 657a 6f72 203a 4300 7275     ature zero: .Cur
 808fbe8:	6572 746e 5020 6572 7373 7275 2065 6c73     rent Pressure sl
 808fbf8:	706f 3a65 2000 6f74 7272 4500 746e 7265     ope:. torr.Enter
 808fc08:	6e20 7765 5020 6572 7373 7275 2065 6c73      new Pressure sl
 808fc18:	706f 0a65 000d 0d0a 654e 2077 7250 7365     ope.....New Pres
 808fc28:	7573 6572 7320 6f6c 6570 203a 4300 7275     sure slope: .Cur
 808fc38:	6572 746e 5020 6572 7373 7275 2065 657a     rent Pressure ze
 808fc48:	6f72 003a 6e45 6574 2072 656e 2077 7250     ro:.Enter new Pr
 808fc58:	7365 7573 6572 5a20 7265 0a6f 000d 0d0a     essure Zero.....
 808fc68:	654e 2077 7250 7365 7573 6572 7a20 7265     New Pressure zer
 808fc78:	3a6f 0020 7543 7272 6e65 2074 4852 7320     o: .Current RH s
 808fc88:	6f6c 6570 003a 2520 4500 746e 7265 6e20     lope:. %.Enter n
 808fc98:	7765 5220 2048 6c73 706f 0a65 000d 0d0a     ew RH slope.....
 808fca8:	654e 2077 4852 7320 6f6c 6570 203a 4300     New RH slope: .C
 808fcb8:	7275 6572 746e 5220 2048 657a 6f72 003a     urrent RH zero:.
 808fcc8:	6e45 6574 2072 656e 2077 4852 5a20 7265     Enter new RH Zer
 808fcd8:	0a6f 000d 0d0a 654e 2077 4852 7a20 7265     o.....New RH zer
 808fce8:	3a6f 0020 7543 7272 6e65 2074 334f 6120     o: .Current O3 a
 808fcf8:	616e 6f6c 2067 666f 7366 7465 003a 6e45     nalog offset:.En
 808fd08:	6574 2072 656e 2077 7a6f 6e6f 2065 666f     ter new ozone of
 808fd18:	7366 7465 0d0a 0a00 4e0d 7765 6f20 6f7a     fset.....New ozo
 808fd28:	656e 6f20 6666 6573 3a74 0020 7543 7272     ne offset: .Curr
 808fd38:	6e65 2074 6f6c 6577 2072 696c 696d 3a74     ent lower limit:
 808fd48:	5000 656c 7361 2065 6e65 6574 2072 6170     .Please enter pa
 808fd58:	7373 6f77 6472 6920 206e 726f 6564 2072     ssword in order 
 808fd68:	6f74 6320 6168 676e 2065 6874 2065 6f6c     to change the lo
 808fd78:	6577 2072 696c 696d 0074 6e45 6574 2072     wer limit.Enter 
 808fd88:	656e 2077 6f6c 6577 2072 696c 696d 3a74     new lower limit:
 808fd98:	0d0a 0a00 4e0d 7765 6c20 776f 7265 6c20     .....New lower l
 808fda8:	6d69 7469 003a 7543 7272 6e65 2074 7075     imit:.Current up
 808fdb8:	6570 2072 696c 696d 3a74 5000 656c 7361     per limit:.Pleas
 808fdc8:	2065 6e65 6574 2072 6170 7373 6f77 6472     e enter password
 808fdd8:	6920 206e 726f 6564 2072 6f74 6320 6168      in order to cha
 808fde8:	676e 2065 6874 2065 7075 6570 2072 696c     nge the upper li
 808fdf8:	696d 0074 6e45 6574 2072 656e 2077 7075     mit.Enter new up
 808fe08:	6570 2072 696c 696d 3a74 0d0a 0a00 4e0d     per limit:.....N
 808fe18:	7765 7520 7070 7265 6c20 6d69 7469 003a     ew upper limit:.
 808fe28:	6f43 6d6d 6e61 3a64 2020 6544 6373 6972     Command:  Descri
 808fe38:	7470 6f69 006e 3a61 2020 6441 756a 7473     ption.a:  Adjust
 808fe48:	4320 324f 7320 6f6c 6570 6200 203a 4120      CO2 slope.b:  A
 808fe58:	6a64 7375 2074 4f43 2032 657a 6f72 6300     djust CO2 zero.c
 808fe68:	203a 4120 6a64 7375 2074 4f43 7320 6f6c     :  Adjust CO slo
 808fe78:	6570 6400 203a 4120 6a64 7375 2074 4f43     pe.d:  Adjust CO
 808fe88:	7a20 7265 006f 3a65 2020 6441 756a 7473      zero.e:  Adjust
 808fe98:	5020 314d 7320 6f6c 6570 6600 203a 4120      PM1 slope.f:  A
 808fea8:	6a64 7375 2074 4d50 2031 657a 6f72 6700     djust PM1 zero.g
 808feb8:	203a 4120 6a64 7375 2074 4d50 2e32 2035     :  Adjust PM2.5 
 808fec8:	6c73 706f 0065 3a68 2020 6441 756a 7473     slope.h:  Adjust
 808fed8:	5020 324d 352e 7a20 7265 006f 3a69 2020      PM2.5 zero.i:  
 808fee8:	6441 756a 7473 5020 314d 2030 6c73 706f     Adjust PM10 slop
 808fef8:	0065 3a6a 2020 6441 756a 7473 5020 314d     e.j:  Adjust PM1
 808ff08:	2030 657a 6f72 6b00 203a 4120 6a64 7375     0 zero.k:  Adjus
 808ff18:	2074 6554 706d 7265 7461 7275 2065 6c73     t Temperature sl
 808ff28:	706f 0065 3a6c 2020 6441 756a 7473 5420     ope.l:  Adjust T
 808ff38:	6d65 6570 6172 7574 6572 7a20 7265 006f     emperature zero.
 808ff48:	3a6d 2020 6441 756a 7473 5020 6572 7373     m:  Adjust Press
 808ff58:	7275 2065 6c73 706f 0065 3a6e 2020 6441     ure slope.n:  Ad
 808ff68:	756a 7473 5020 6572 7373 7275 2065 657a     just Pressure ze
 808ff78:	6f72 6f00 203a 4120 6a64 7375 2074 7548     ro.o:  Adjust Hu
 808ff88:	696d 6964 7974 7320 6f6c 6570 7000 203a     midity slope.p: 
 808ff98:	4120 6a64 7375 2074 7548 696d 6964 7974      Adjust Humidity
 808ffa8:	7a20 7265 006f 3a71 2020 6e45 6261 656c      zero.q:  Enable
 808ffb8:	7320 7265 6169 206c 6564 7562 6767 6e69      serial debuggin
 808ffc8:	0067 3a72 2020 6944 6173 6c62 2065 6573     g.r:  Disable se
 808ffd8:	6972 6c61 6420 6265 6775 6967 676e 7300     rial debugging.s
 808ffe8:	203a 4f20 7475 7570 2074 6568 6461 7265     :  Output header
 808fff8:	7320 7274 6e69 0067 3a74 2020 6e45 6574      string.t:  Ente
 8090008:	2072 656e 2077 6974 656d 6120 646e 6420     r new time and d
 8090018:	7461 0065 3a75 2020 6e45 6574 2072 656e     ate.u:  Enter ne
 8090028:	2077 6974 656d 7a20 6e6f 0065 3a76 2020     w time zone.v:  
 8090038:	6441 756a 7473 7420 6568 4420 7665 6369     Adjust the Devic
 8090048:	2065 4449 7700 203a 4720 7465 7720 6669     e ID.w:  Get wif
 8090058:	2069 7263 6465 6e65 6974 6c61 0073 3a79     i credentials.y:
 8090068:	2020 6e45 6261 656c 6320 6c65 756c 616c       Enable cellula
 8090078:	0072 3a7a 2020 6944 6173 6c62 2065 6563     r.z:  Disable ce
 8090088:	6c6c 6c75 7261 3100 203a 4120 6a64 7375     llular.1:  Adjus
 8090098:	2074 6167 2073 6f6c 6577 2072 696c 696d     t gas lower limi
 80900a8:	0074 3a32 2020 6441 756a 7473 6720 7361     t.2:  Adjust gas
 80900b8:	7520 7070 7265 6c20 6d69 7469 3300 203a      upper limit.3: 
 80900c8:	4720 7465 6220 6975 646c 7620 7265 6973      Get build versi
 80900d8:	6e6f 3400 203a 4520 616e 6c62 2065 7a4f     on.4:  Enable Oz
 80900e8:	6e6f 0065 3a35 2020 6944 6173 6c62 2065     one.5:  Disable 
 80900f8:	7a4f 6e6f 0065 3a36 2020 6e45 6261 656c     Ozone.6:  Enable
 8090108:	5620 434f 7327 3700 203a 4420 7369 6261      VOC's.7:  Disab
 8090118:	656c 5620 434f 7327 3800 203a 4f20 7475     le VOC's.8:  Out
 8090128:	7570 2074 6874 2065 4d50 4349 7320 7379     put the PMIC sys
 8090138:	6574 206d 6f63 666e 6769 7275 7461 6f69     tem configuratio
 8090148:	006e 3a39 2020 6e49 7263 6165 6573 7420     n.9:  Increase t
 8090158:	6568 6320 6168 6772 2065 7563 7272 6e65     he charge curren
 8090168:	2074 7962 3620 2034 416d 3000 203a 4920     t by 64 mA.0:  I
 8090178:	636e 6572 7361 2065 6874 2065 7563 7272     ncrease the curr
 8090188:	6e65 2074 6e69 7570 2074 696c 696d 2074     ent input limit 
 8090198:	7962 3120 3030 6d20 0041 3a41 2020 754f     by 100 mA.A:  Ou
 80901a8:	7074 7475 4320 204f 6f63 736e 6174 746e     tput CO constant
 80901b8:	796c 6120 646e 7220 7061 6469 796c 4200     ly and rapidly.B
 80901c8:	203a 4f20 7475 7570 2074 4d50 6320 6e6f     :  Output PM con
 80901d8:	7473 6e61 6c74 2079 6e61 2064 6172 6970     stantly and rapi
 80901e8:	6c64 0079 3a43 2020 6843 6e61 6567 7420     dly.C:  Change t
 80901f8:	6d65 6570 6172 7574 6572 7520 696e 7374     emperature units
 8090208:	7420 206f 6543 736c 7569 0073 3a44 2020      to Celsius.D:  
 8090218:	6944 6173 6c62 2065 4d54 3350 2036 6574     Disable TMP36 te
 8090228:	706d 7265 7461 7275 2065 6573 736e 726f     mperature sensor
 8090238:	6120 646e 7520 6573 4220 454d 3836 2030      and use BME680 
 8090248:	6574 706d 7265 7461 7275 0065 3a45 2020     temperature.E:  
 8090258:	6e45 6261 656c 5420 504d 3633 7420 6d65     Enable TMP36 tem
 8090268:	6570 6172 7574 6572 7320 6e65 6f73 2072     perature sensor 
 8090278:	6e61 2064 6964 6173 6c62 2065 4d42 3645     and disable BME6
 8090288:	3038 7420 6d65 6570 6172 7574 6572 4600     80 temperature.F
 8090298:	203a 4320 6168 676e 2065 6574 706d 7265     :  Change temper
 80902a8:	7461 7275 2065 6e75 7469 2073 6f74 4620     ature units to F
 80902b8:	6861 6572 686e 6965 0074 3a47 2020 6552     ahrenheit.G:  Re
 80902c8:	6461 6f20 6f7a 656e 6620 6f72 206d 6e61     ad ozone from an
 80902d8:	6c61 676f 6920 706e 7475 2820 6f6e 2074     alog input (not 
 80902e8:	6964 6967 6174 6c6c 2079 202d 6f62 7261     digitally - boar
 80902f8:	2064 6564 6570 646e 6e65 2974 4800 203a     d dependent).H: 
 8090308:	5220 6165 2064 7a6f 6e6f 2065 6964 6967      Read ozone digi
 8090318:	6174 6c6c 2079 6e28 746f 7420 7268 756f     tally (not throu
 8090328:	6867 6120 616e 6f6c 2067 6e69 7570 2074     gh analog input 
 8090338:	202d 6f62 7261 2064 6564 6570 646e 6e65     - board dependen
 8090348:	2974 4900 203a 4120 6a64 7375 2074 7266     t).I:  Adjust fr
 8090358:	7165 6575 636e 2079 6f66 2072 7075 6f6c     equency for uplo
 8090368:	6461 6e69 2067 6874 6f72 6775 2068 6563     ading through ce
 8090378:	6c6c 6c75 7261 4a00 203a 5220 7365 7465     llular.J:  Reset
 8090388:	4520 5053 202c 4f43 2c32 5020 616c 746e      ESP, CO2, Plant
 8090398:	776f 7265 4b00 203a 4320 6e6f 6974 756e     ower.K:  Continu
 80903a8:	756f 2073 6573 6972 6c61 6f20 7475 7570     ous serial outpu
 80903b8:	2074 666f 4720 5350 4c00 203a 5720 6972     t of GPS.L:  Wri
 80903c8:	6574 6420 6665 7561 746c 7320 7465 6974     te default setti
 80903d8:	676e 0073 3a4d 2020 6e45 6261 656c 3220     ngs.M:  Enable 2
 80903e8:	2530 6220 7461 6574 7972 7420 7268 7365     0% battery thres
 80903f8:	6f68 646c 6c20 6d69 7469 6e69 0067 3a4e     hold limiting.N:
 8090408:	2020 6944 6173 6c62 2065 3032 2025 6162       Disable 20% ba
 8090418:	7474 7265 2079 6874 6572 6873 6c6f 2064     ttery threshold 
 8090428:	696c 696d 6974 676e 5720 5241 494e 474e     limiting WARNING
 8090438:	2121 4f00 203a 4520 616e 6c62 2065 6f6c     !!.O:  Enable lo
 8090448:	2077 6f70 6577 2072 6f66 2072 5047 2053     w power for GPS 
 8090458:	6f6d 7564 656c 5000 203a 5420 7275 206e     module.P:  Turn 
 8090468:	666f 2066 4142 4654 5445 5100 203a 4120     off BATFET.Q:  A
 8090478:	6c6c 776f 4220 5441 4546 2054 6f74 7420     llow BATFET to t
 8090488:	7275 206e 6e6f 5200 203a 4420 7369 6261     urn on.R:  Disab
 8090498:	656c 4120 4342 6c20 676f 6369 6620 726f     le ABC logic for
 80904a8:	4320 324f 7320 6e65 6f73 0072 3a53 2020      CO2 sensor.S:  
 80904b8:	6e45 6261 656c 4120 4342 6c20 676f 6369     Enable ABC logic
 80904c8:	6620 726f 4320 324f 7320 6e65 6f73 0072      for CO2 sensor.
 80904d8:	3a54 2020 6e45 6261 656c 642f 7369 6261     T:  Enable/disab
 80904e8:	656c 4820 4849 3138 3032 5220 2048 6573     le HIH8120 RH se
 80904f8:	736e 726f 5500 203a 5320 6977 6374 2068     nsor.U:  Switch 
 8090508:	6f73 6b63 7465 7720 6568 6572 4320 204f     socket where CO 
 8090518:	7369 7220 6165 2064 7266 6d6f 5700 203a     is read from.W: 
 8090528:	4520 616e 6c62 2f65 6944 6173 6c62 2065      Enable/Disable 
 8090538:	6f67 676f 656c 6c20 636f 7461 6f69 206e     google location 
 8090548:	6573 7672 6369 7365 5600 203a 4320 6c61     services.V:  Cal
 8090558:	6269 6172 6574 4320 324f 7320 6e65 6f73     ibrate CO2 senso
 8090568:	2072 202d 756d 7473 7320 7075 6c70 2079     r - must supply 
 8090578:	6d61 6962 6e65 2074 656c 6576 206c 6728     ambient level (g
 8090588:	206f 756f 7374 6469 2165 0029 3a5a 2020     o outside!).Z:  
 8090598:	754f 7074 7475 6320 6c65 756c 616c 2072     Output cellular 
 80905a8:	6e69 6f66 6d72 7461 6f69 206e 4328 4943     information (CCI
 80905b8:	2c44 4920 454d 2c49 6520 6374 0029 3a21     D, IMEI, etc).!:
 80905c8:	2020 6f43 746e 6e69 6f75 7375 7320 7265       Continuous ser
 80905d8:	6169 206c 756f 7074 7475 6f20 2066 4f56     ial output of VO
 80905e8:	2743 0073 2040 2020 6e45 6261 656c 442f     C's.@   Enable/D
 80905f8:	7369 6261 656c 5320 6e65 6973 6c62 2d65     isable Sensible-
 8090608:	6f69 2074 6164 6174 7020 7375 2e68 2020     iot data push.  
 8090618:	6649 6520 616e 6c62 6465 202c 6974 656d     If enabled, time
 8090628:	7a20 6e6f 2065 6977 6c6c 6220 2065 6769      zone will be ig
 8090638:	6f6e 6572 2064 202d 5455 2043 6977 6c6c     nored - UTC will
 8090648:	6220 2065 7375 6465 002e 2023 2020 6e45      be used..#   En
 8090658:	6261 656c 442f 7369 6261 656c 6320 7261     able/Disable car
 8090668:	6f74 7070 7265 7020 776f 7265 6d20 646f     topper power mod
 8090678:	2e65 2020 6649 6520 616e 6c62 6465 202c     e.  If enabled, 
 8090688:	6261 6573 636e 2065 666f 6520 7478 7265     absence of exter
 8090698:	616e 206c 6f70 6577 2072 6977 6c6c 7320     nal power will s
 80906a8:	6f74 2070 6563 6c6c 6c75 7261 002e 3a3f     top cellular..?:
 80906b8:	2020 754f 7074 7475 7420 6968 2073 656d       Output this me
 80906c8:	756e 7800 203a 4520 6978 7374 7420 6968     nu.x:  Exits thi
 80906d8:	2073 656d 756e 5000 6275 696c 6873 6465     s menu.Published
 80906e8:	7020 6d61 7075 6420 7461 2161 4300 6c65      pamup data!.Cel
 80906f8:	756c 616c 2072 7369 6420 7369 6261 656c     lular is disable
 8090708:	2e64 4300 756f 646c 276e 2074 6f63 6e6e     d..Couldn't conn
 8090718:	6365 2074 6f74 7020 7261 6974 6c63 2e65     ect to particle.
 8090728:	7000 6d61 7075 3b00 4c00 6e69 2065 6f74     .pamup.;.Line to
 8090738:	7720 6972 6574 7420 206f 6c63 756f 3a64      write to cloud:
 8090748:	6200 616c 6668 726f 6f6e 0077 6553 646e     .blahfornow.Send
 8090758:	6e69 2067 6164 6174 7420 206f 7365 2070     ing data to esp 
 8090768:	6f74 7520 6c70 616f 2064 6976 2061 6977     to upload via wi
 8090778:	6966 2e2e 002e 6553 646e 6e69 2067 6164     fi....Sending da
 8090788:	6174 7420 206f 7365 2070 6f74 7520 6c70     ta to esp to upl
 8090798:	616f 2064 6976 2061 6977 6966 5700 6972     oad via wifi.Wri
 80907a8:	6974 676e 7220 776f 7420 206f 6966 656c     ting row to file
 80907b8:	002e 4544 2c56 4f43 7028 6d70 2c29 4f43     ..DEV,CO(ppm),CO
 80907c8:	2832 7070 296d 562c 434f 2873 4149 2951     2(ppm),VOCs(IAQ)
 80907d8:	502c 314d 502c 324d 355f 502c 314d 2c30     ,PM1,PM2_5,PM10,
 80907e8:	2854 2943 502c 6572 7373 6d28 6142 2972     T(C),Press(mBar)
 80907f8:	522c 2848 2925 4f2c 2833 7070 2962 422c     ,RH(%),O3(ppb),B
 8090808:	7461 2874 2925 532c 646e 6428 2962 4c2c     att(%),Snd(db),L
 8090818:	7461 7469 6475 2c65 6f4c 676e 7469 6475     atitude,Longitud
 8090828:	2c65 2f4e 2c41 2f4e 2c41 6144 6574 542f     e,N/A,N/A,Date/T
 8090838:	6d69 0065 0024 265a 4700 7465 6974 676e     ime.$.Z&.Getting
 8090848:	4120 2051 7953 636e 6420 7461 2061 7266      AQ Sync data fr
 8090858:	6d6f 6520 7073 5500 616e 6c62 2065 6f74     om esp.Unable to
 8090868:	6720 7465 4120 5351 6e79 2063 6164 6174      get AQSync data
 8090878:	6620 6f72 206d 5345 2c50 6320 756f 746e      from ESP, count
 8090888:	7265 6920 646e 7865 203a 3125 312e 0a66     er index: %1.1f.
 8090898:	000d 4552 4543 5649 4445 4420 5441 2041     ..RECEIVED DATA 
 80908a8:	5246 4d4f 4520 5053 203a 5200 6365 6965     FROM ESP: .Recei
 80908b8:	6576 2064 6164 6174 6620 6f72 206d 5345     ved data from ES
 80908c8:	0050 7550 6c62 7369 6568 2064 5141 7953     P.Published AQSy
 80908d8:	636e 6420 7461 2161 4100 5351 6e79 0063     nc data!.AQSync.
 80908e8:	6547 7474 6e69 2067 7a6f 6e6f 2065 6164     Getting ozone da
 80908f8:	6174 6620 6f72 206d 7365 0070 6e55 6261     ta from esp.Unab
 8090908:	656c 7420 206f 6567 2074 7a6f 6e6f 2065     le to get ozone 
 8090918:	6164 6174 6620 6f72 206d 5345 2c50 6320     data from ESP, c
 8090928:	756f 746e 7265 6920 646e 7865 203a 3125     ounter index: %1
 8090938:	312e 0a66 000d 6f63 6d6d 2061 6e69 6564     .1f...comma inde
 8090948:	3a78 0020 7453 6972 676e 255b 5d64 003a     x: .String[%d]:.
 8090958:	7375 6e69 2067 7473 6972 676e 6120 7272     using string arr
 8090968:	7961 6920 646e 7865 3120 6420 6575 7420     ay index 1 due t
 8090978:	206f 6f6c 6767 6e69 0067 7375 6e69 2067     o logging.using 
 8090988:	7473 6972 676e 6120 7272 7961 6920 646e     string array ind
 8090998:	7865 3020 202c 6f6e 2074 6f6c 6767 6e69     ex 0, not loggin
 80909a8:	0067 6c4f 2064 6e69 7570 2074 7563 7272     g.Old input curr
 80909b8:	6e65 2074 696c 696d 3a74 2520 0a64 000d     ent limit: %d...
 80909c8:	654e 2077 6e69 7570 2074 7563 7272 6e65     New input curren
 80909d8:	2074 696c 696d 3a74 2520 0a64 000d 6e49     t limit: %d...In
 80909e8:	7263 6165 6973 676e 4320 6168 6772 2065     creasing Charge 
 80909f8:	7563 7272 6e65 2074 7266 6d6f 2520 2064     current from %d 
 8090a08:	416d 7420 206f 6e00 7765 6320 6168 6772     mA to .new charg
 8090a18:	2065 7563 7272 6e65 2074 666f 2520 2064     e current of %d 
 8090a28:	416d 0d0a 5300 6174 7472 6f20 2066 6c61     mA...Start of al
 8090a38:	6870 2061 6572 6461 4300 756f 646c 276e     pha read.Couldn'
 8090a48:	2074 6f63 6d6d 6e75 6369 7461 2065 6977     t communicate wi
 8090a58:	6874 4c20 504d 3139 3030 5f30 0031 6148     th LMP91000_1.Ha
 8090a68:	666c 6f76 746c 203a 3125 322e 0a66 000d     lfvolt: %1.2f...
 8090a78:	6148 666c 6f76 746c 6820 6769 6568 2072     Halfvolt higher 
 8090a88:	6874 6e61 3020 352e 5300 6174 7574 2073     than 0.5.Status 
 8090a98:	203d 2030 7266 6d6f 4c20 504d 3139 3030     = 0 from LMP9100
 8090aa8:	2030 7473 7461 7375 7220 6765 4c00 504d     0 status reg.LMP
 8090ab8:	3031 3030 7320 6174 7574 2073 203d 0030     1000 status = 0.
 8090ac8:	4f43 6d20 6165 7573 6572 656d 746e 3a73     CO measurements:
 8090ad8:	2020 0d0a 4100 5f30 6167 3a73 2520 0a64       ...A0_gas: %d.
 8090ae8:	000d 3141 615f 7875 203a 6425 0d0a 4100     ..A1_aux: %d...A
 8090af8:	5f32 6574 706d 203a 6425 0d0a 6800 6c61     2_temp: %d...hal
 8090b08:	5f66 7276 6665 203a 6425 0d0a 4300 3a4f     f_vref: %d...CO:
 8090b18:	2520 2e31 6633 7020 6d70 0d0a 4d00 6e65      %1.3f ppm...Men
 8090b28:	3e75 5300 7265 6169 206c 6564 7562 6767     u>.Serial debugg
 8090b38:	6e69 2067 6e65 6261 656c 2e64 5300 7265     ing enabled..Ser
 8090b48:	6169 206c 6564 7562 6767 6e69 2067 6964     ial debugging di
 8090b58:	6173 6c62 6465 002e 6e45 6261 696c 676e     sabled..Enabling
 8090b68:	4320 6c65 756c 616c 2e72 4300 6c65 756c      Cellular..Cellu
 8090b78:	616c 2072 6c61 6572 6461 2079 6e65 6261     lar already enab
 8090b88:	656c 2e64 4400 7369 6261 696c 676e 4320     led..Disabling C
 8090b98:	6c65 756c 616c 0072 6543 6c6c 6c75 7261     ellular.Cellular
 8090ba8:	6120 726c 6165 7964 6420 7369 6261 656c      already disable
 8090bb8:	2e64 4f00 7475 7570 7474 6e69 2067 6f6e     d..Outputting no
 8090bc8:	6d72 6c61 796c 4f00 7475 7570 7474 6e69     rmally.Outputtin
 8090bd8:	2067 6e6f 796c 5020 004d 6554 706d 7265     g only PM.Temper
 8090be8:	7461 7275 2065 6e75 7469 2073 6c61 6572     ature units alre
 8090bf8:	6461 2079 6573 2074 6f74 4320 6c65 6973     ady set to Celsi
 8090c08:	7375 002e 6944 6173 6c62 6e69 2067 656e     us..Disabling ne
 8090c18:	2077 6574 706d 7265 7461 7275 2065 6573     w temperature se
 8090c28:	736e 726f 5400 6d65 6570 6172 7574 6572     nsor.Temperature
 8090c38:	7320 6e65 6f73 2072 6c61 6572 6461 2079      sensor already 
 8090c48:	6964 6173 6c62 6465 5400 6d65 6570 6172     disabled.Tempera
 8090c58:	7574 6572 7320 6e65 6f73 2072 6c61 6572     ture sensor alre
 8090c68:	6461 2079 6e65 6261 656c 0064 6554 706d     ady enabled.Temp
 8090c78:	7265 7461 6575 7320 6e65 6f73 2072 6f6e     eratue sensor no
 8090c88:	2077 6e65 6261 656c 0064 6554 706d 7265     w enabled.Temper
 8090c98:	7461 7275 2065 6e75 7469 2073 6c61 6572     ature units alre
 8090ca8:	6461 2079 6573 2074 6f74 4620 6861 6572     ady set to Fahre
 8090cb8:	686e 6965 2e74 4100 616e 6f6c 2067 6572     nheit..Analog re
 8090cc8:	6461 6e69 2067 666f 6f20 6f7a 656e 6120     ading of ozone a
 8090cd8:	726c 6165 7964 6520 616e 6c62 6465 4100     lready enabled.A
 8090ce8:	616e 6f6c 2067 6572 6461 6e69 2067 666f     nalog reading of
 8090cf8:	6f20 6f7a 656e 6e20 776f 6520 616e 6c62      ozone now enabl
 8090d08:	6465 4400 6769 7469 6c61 7220 6165 6964     ed.Digital readi
 8090d18:	676e 6f20 2066 7a6f 6e6f 2065 6c61 6572     ng of ozone alre
 8090d28:	6461 2079 6e65 6261 656c 0064 6944 6967     ady enabled.Digi
 8090d38:	6174 206c 6572 6461 6e69 2067 666f 6f20     tal reading of o
 8090d48:	6f7a 656e 6e20 776f 6520 616e 6c62 6465     zone now enabled
 8090d58:	4f00 7475 7570 7474 6e69 2067 5047 2053     .Outputting GPS 
 8090d68:	6f63 746e 6e69 6f75 7375 796c 4200 7461     continuously.Bat
 8090d78:	6574 7972 7420 7268 7365 6f68 646c 6120     tery threshold a
 8090d88:	726c 6165 7964 6520 616e 6c62 6465 4500     lready enabled.E
 8090d98:	616e 6c62 6e69 2067 6162 7474 7265 2079     nabling battery 
 8090da8:	6874 6572 6873 6c6f 2064 696c 696d 6974     threshold limiti
 8090db8:	676e 4200 7461 6574 7972 7420 7268 7365     ng.Battery thres
 8090dc8:	6f68 646c 6120 726c 6165 7964 6420 7369     hold already dis
 8090dd8:	6261 656c 0064 6944 6173 6c62 6e69 2067     abled.Disabling 
 8090de8:	6162 7474 7265 2079 6874 6572 6873 6c6f     battery threshol
 8090df8:	2064 696c 696d 6974 676e 4500 616e 6c62     d limiting.Enabl
 8090e08:	6e69 2067 6f6c 2077 6f70 6577 2072 6f66     ing low power fo
 8090e18:	2072 7067 0073 7554 6e72 6e69 2067 666f     r gps.Turning of
 8090e28:	2066 6162 6674 7465 4100 6c6c 776f 6e69     f batfet.Allowin
 8090e38:	2067 6162 6674 7465 7420 206f 7574 6e72     g batfet to turn
 8090e48:	6f20 006e 6944 6173 6c62 6e69 2067 4241      on.Disabling AB
 8090e58:	2043 6f6c 6967 2063 6f66 2072 4f43 2032     C logic for CO2 
 8090e68:	6573 736e 726f 4100 4342 6c20 676f 6369     sensor.ABC logic
 8090e78:	6120 726c 6165 7964 6420 7369 6261 656c      already disable
 8090e88:	0064 6e45 6261 696c 676e 6120 6362 6c20     d.Enabling abc l
 8090e98:	676f 6369 6620 726f 4320 324f 7320 6e65     ogic for CO2 sen
 8090ea8:	6f73 0072 4241 2043 6f6c 6967 2063 6c61     sor.ABC logic al
 8090eb8:	6572 6461 2079 6e65 6261 656c 0064 6e45     ready enabled.En
 8090ec8:	6261 696c 676e 4820 4849 3138 3032 5220     abling HIH8120 R
 8090ed8:	2048 6573 736e 726f 4400 7369 6261 696c     H sensor.Disabli
 8090ee8:	676e 4820 4849 3138 3032 5220 2048 6573     ng HIH8120 RH se
 8090ef8:	736e 726f 4e00 776f 7220 6165 6964 676e     nsor.Now reading
 8090f08:	4320 204f 7266 6d6f 5520 3032 412d 706c      CO from U20-Alp
 8090f18:	6168 0032 6f4e 2077 6572 6461 6e69 2067     ha2.Now reading 
 8090f28:	4f43 6620 6f72 206d 3155 2d39 6c41 6870     CO from U19-Alph
 8090f38:	3161 5200 7365 7465 6e69 2067 6874 2065     a1.Reseting the 
 8090f48:	4f43 2032 6573 736e 726f 4400 7369 6261     CO2 sensor.Disab
 8090f58:	696c 676e 6720 6f6f 6c67 2065 6f6c 6163     ling google loca
 8090f68:	6974 6e6f 7320 7265 6976 6563 2e73 4500     tion services..E
 8090f78:	616e 6c62 6e69 2067 6f67 676f 656c 6c20     nabling google l
 8090f88:	636f 7461 6f69 206e 6573 7672 6369 7365     ocation services
 8090f98:	002e 6547 7474 6e69 2067 6563 6c6c 6c75     ..Getting cellul
 8090fa8:	7261 6920 666e 726f 616d 6974 6e6f 202c     ar information, 
 8090fb8:	6874 7369 6d20 7961 7420 6b61 2065 2061     this may take a 
 8090fc8:	6877 6c69 2e65 2e2e 4900 454d 3d49 7325     while....IMEI=%s
 8090fd8:	4900 534d 3d49 7325 4900 4343 4449 253d     .IMSI=%s.ICCID=%
 8090fe8:	0073 5041 2050 6556 7372 6f69 3a6e 0020     s.APP Version: .
 8090ff8:	6e45 6261 696c 676e 4f20 6f7a 656e 4f00     Enabling Ozone.O
 8091008:	6f7a 656e 6120 726c 6165 7964 6520 616e     zone already ena
 8091018:	6c62 6465 4400 7369 6261 696c 676e 4f20     bled.Disabling O
 8091028:	6f7a 656e 4f00 6f7a 656e 6120 726c 6165     zone.Ozone alrea
 8091038:	7964 6420 7369 6261 656c 0064 6e45 6261     dy disabled.Enab
 8091048:	696c 676e 5620 434f 0073 4f56 7343 6120     ling VOCs.VOCs a
 8091058:	726c 6165 7964 6520 616e 6c62 6465 4400     lready enabled.D
 8091068:	7369 6261 696c 676e 5620 434f 7327 5600     isabling VOC's.V
 8091078:	434f 7327 6120 726c 6165 7964 6420 7369     OC's already dis
 8091088:	6261 656c 0064 6146 6c75 3a74 0020 7953     abled.Fault: .Sy
 8091098:	7473 6d65 7320 6174 7574 3a73 0020 754f     stem status: .Ou
 80910a8:	7074 7475 6974 676e 5620 434f 2073 6f63     tputting VOCs co
 80910b8:	746e 6e69 6f75 7375 796c 2021 5020 6572     ntinuously!  Pre
 80910c8:	7373 6120 796e 6220 7475 6f74 206e 6f74     ss any button to
 80910d8:	6520 6978 2e74 2e2e 4600 6961 656c 2064      exit....Failed 
 80910e8:	6f74 7220 6165 2064 4d42 3645 3038 5400     to read BME680.T
 80910f8:	6f56 7363 253d 2e31 6630 202c 6554 706d     Vocs=%1.0f, Temp
 8091108:	253d 2e31 6631 202c 7270 7365 3d73 3125     =%1.1f, press=%1
 8091118:	312e 2c66 7220 3d68 3125 312e 0a66 000d     .1f, rh=%1.1f...
 8091128:	6944 6173 6c62 6e69 2067 6573 736e 6269     Disabling sensib
 8091138:	656c 6920 746f 6420 7461 2061 7570 6873     le iot data push
 8091148:	002e 6944 6173 6c62 6e69 2067 6163 2072     ..Disabling car 
 8091158:	6f74 7070 7265 7020 776f 7265 202e 0020     topper power.  .
 8091168:	6e45 6261 696c 676e 6320 7261 7420 706f     Enabling car top
 8091178:	6570 2072 6f70 6577 2e72 2020 6649 6e20     per power.  If n
 8091188:	206f 7865 6574 6e72 6c61 7020 776f 7265     o external power
 8091198:	202c 7973 7473 6d65 7720 6c69 206c 7574     , system will tu
 80911a8:	6e72 6f20 6666 002e 7845 7469 6e69 2067     rn off..Exiting 
 80911b8:	6573 6972 6c61 6d20 6e65 2e75 2e2e 5400     serial menu....T
 80911c8:	706f 6f20 2066 6f6c 706f 4900 636e 6d6f     op of loop.Incom
 80911d8:	6e69 2067 7962 6574 003a 6f43 6e6e 6365     ing byte:.Connec
 80911e8:	6974 676e 7420 206f 6563 6c6c 6c75 7261     ting to cellular
 80911f8:	6e20 7465 6f77 6b72 6100 7466 7265 6320      network.after c
 8091208:	6c65 756c 616c 4f72 006e 6641 6574 2072     ellularOn.After 
 8091218:	6563 6c6c 6c75 7261 6e4f 4100 7466 7265     cellularOn.After
 8091228:	7020 7261 6974 6c63 2065 6f63 6e6e 6365      particle connec
 8091238:	0074 6573 7474 6e69 2067 7274 6569 5f64     t.setting tried_
 8091248:	6563 6c6c 6c75 7261 635f 6e6f 656e 7463     cellular_connect
 8091258:	7420 206f 6166 736c 0065 6944 6373 6e6f      to false.Discon
 8091268:	656e 7463 6e69 2067 7266 6d6f 6320 6c65     necting from cel
 8091278:	756c 616c 2072 656e 7774 726f 006b 6f47     lular network.Go
 8091288:	6e69 2067 6f74 7320 656c 7065 6220 6365     ing to sleep bec
 8091298:	7561 6573 6220 7461 6574 7972 6920 2073     ause battery is 
 80912a8:	6562 6f6c 2077 3032 2025 6863 7261 6567     below 20% charge
 80912b8:	0000 0000                                   ....

080912bc <_ZTV10PowerCheck>:
	...
 80912c4:	5d5d 0808 5d75 0808 6572 6461 6e69 2067     ]]..u]..reading 
 80912d4:	4f43 2032 6573 736e 726f 7320 6174 7574     CO2 sensor statu
 80912e4:	0073 7546 636e 6320 646f 3a65 0020 7962     s.Func code: .by
 80912f4:	6574 6320 756f 746e 203a 4d00 4253 203a     te count: .MSB: 
 8091304:	4c00 4253 203a 4300 6c61 6269 6172 6974     .LSB: .Calibrati
 8091314:	676e 4320 324f 0000                         ng CO2..

0809131c <_ZL6spiPtr>:
 809131c:	0c80 2000 0c90 2000 0ca0 2000               ... ... ... 

08091328 <_ZTV5SdSpi>:
	...
 8091330:	6d41 0808 6d51 0808 6d3d 0808 6dcd 0808     Am..Qm..=m...m..
 8091340:	6df1 0808 6de1 0808 6e35 0808               .m...m..5n..

0809134c <_ZTV7HIH61XX>:
	...
 8091354:	797d 0808 798d 0808 7ac5 0808               }y...y...z..

08091360 <_ZTV23GoogleMapsDeviceLocator>:
	...
 8091368:	7b6d 0808 7b8d 0808 7325 227b 2269 253a     m{...{..%s{"i":%
 8091378:	2c64 6c22 3a22 7525 222c 2263 253a 2c64     d,"l":%u,"c":%d,
 8091388:	6e22 3a22 6425 007d 227b 2263 7b3a 6f22     "n":%d}.{"c":{"o
 8091398:	3a22 2522 2273 002c 6122 3a22 005b 6564     ":"%s",."a":[.de
 80913a8:	6976 6563 6f4c 6163 6f74 0072 5441 5426     viceLocator.AT&T
 80913b8:	7000 6275 696c 6873 6f4c 6163 6974 6e6f     .publishLocation
 80913c8:	7300 6163 446e 7461 3d61 7325 6800 6f6f     .scanData=%s.hoo
 80913d8:	2d6b 6572 7073 6e6f 6573 252f 2f73 7325     k-response/%s/%s
 80913e8:	0000 0000                                   ....

080913ec <_ZTV28CellularHelperStringResponse>:
	...
 80913f4:	7f35 0808 5954 4550 555f 4b4e 4f4e 4e57     5...TYPE_UNKNOWN
 8091404:	5400 5059 5f45 4b4f 5400 5059 5f45 5245     .TYPE_OK.TYPE_ER
 8091414:	4f52 0052 5954 4550 435f 4e4f 454e 5443     ROR.TYPE_CONNECT
 8091424:	5400 5059 5f45 4f4e 4143 5252 4549 0052     .TYPE_NOCARRIER.
 8091434:	5954 4550 4e5f 444f 4149 544c 4e4f 0045     TYPE_NODIALTONE.
 8091444:	5954 4550 425f 5355 0059 5954 4550 4e5f     TYPE_BUSY.TYPE_N
 8091454:	414f 534e 4557 0052 5954 4550 505f 4f52     OANSWER.TYPE_PRO
 8091464:	504d 0054 5954 4550 505f 554c 0053 5954     MPT.TYPE_PLUS.TY
 8091474:	4550 415f 4f42 5452 4445 7400 7079 3d65     PE_ABORTED.type=
 8091484:	7830 7825 6300 6c65 756c 616c 2072 6572     0x%x.cellular re
 8091494:	7073 6e6f 6573 7420 7079 3d65 7325 6c20     sponse type=%s l
 80914a4:	6e65 253d 0064 6e5c 5c00 0072 7830 3025     en=%d.\n.\r.0x%0
 80914b4:	7832 2500 2c64 6425 6b00 7965 7420 6f6f     2x.%d,%d.key too
 80914c4:	6c20 6e6f 2067 656b 3d79 7325 7620 6c61      long key=%s val
 80914d4:	6575 253d 0073 4152 0054 4d55 5354 4d00     ue=%s.RAT.UMTS.M
 80914e4:	4343 4d00 434e 4c00 4341 4300 0049 5342     CC.MNC.LAC.CI.BS
 80914f4:	4349 4100 4652 4e43 4100 4652 4e43 445f     IC.ARFCN.ARFCN_D
 8091504:	4445 5200 4c58 5645 5553 0042 5f54 4441     ED.RXLEVSUB.T_AD
 8091514:	0056 5852 454c 0056 4c44 0046 4c55 0046     V.RXLEV.DLF.ULF.
 8091524:	5352 5043 4c20 5645 5200 4341 5300 0043     RSCP LEV.RAC.SC.
 8091534:	4345 304e 4c20 5645 7500 6b6e 6f6e 6e77     ECN0 LEV.unknown
 8091544:	6b20 7965 253d 2073 6176 756c 3d65 7325      key=%s value=%s
 8091554:	4d00 4343 003a 4152 3a54 4700 4d53 0020     .MCC:.RAT:.GSM .
 8091564:	4344 2053 3831 3030 4500 4753 204d 3039     DCS 1800.ESGM 90
 8091574:	0030 4d55 5354 0020 4733 7520 6b6e 6f6e     0.UMTS .3G unkno
 8091584:	6e77 4400 5343 3120 3038 2030 726f 3120     wn.DCS 1800 or 1
 8091594:	3039 0030 4745 4d53 3920 3030 3200 2047     900.EGSM 900.2G 
 80915a4:	6e75 6e6b 776f 006e 636d 3d63 6425 202c     unknown.mcc=%d, 
 80915b4:	6e6d 3d63 6425 202c 616c 3d63 7825 6320     mnc=%d, lac=%x c
 80915c4:	3d69 7825 6220 6e61 3d64 7325 7220 7373     i=%x band=%s rss
 80915d4:	3d69 6425 7200 7461 553d 544d 2053 7325     i=%d.rat=UMTS %s
 80915e4:	6420 666c 253d 2064 6c75 3d66 6425 7200      dlf=%d ulf=%d.r
 80915f4:	7461 473d 4d53 2520 2073 7362 6369 253d     at=GSM %s bsic=%
 8091604:	2078 7261 6366 3d6e 6425 7220 6c78 7665     x arfcn=%d rxlev
 8091614:	253d 0064 6573 7672 6369 2065 7325 6e00     =%d.service %s.n
 8091624:	6965 6867 6f62 2072 6425 2520 0073 616c     eighbor %d %s.la
 8091634:	3d74 6625 6c20 6e6f 253d 2066 6c61 3d74     t=%f lon=%f alt=
 8091644:	6425 7520 636e 7265 6174 6e69 7974 253d     %d uncertainty=%
 8091654:	0064 6176 696c 3d64 6166 736c 0065 6425     d.valid=false.%d
 8091664:	252c 2c64 2522 2278 222c 7825 2c22 6425     ,%d,"%x","%x",%d
 8091674:	7300 6174 3d74 6425 6c20 6361 303d 2578     .stat=%d lac=0x%
 8091684:	2078 6963 303d 2578 2078 6172 3d74 6425     x ci=0x%x rat=%d
 8091694:	4100 2b54 4743 4d4d 0a0d 4100 4954 0d30     .AT+CGMM...ATI0.
 80916a4:	000a 5441 432b 4d47 0d52 000a 5441 432b     ..AT+CGMR...AT+C
 80916b4:	5347 0d4e 000a 5441 432b 4d47 0d49 000a     GSN...AT+CGMI...
 80916c4:	4343 4449 4100 2b54 4343 4449 0a0d 5300     CCID.AT+CCID...S
 80916d4:	5241 2d41 3452 5500 4f44 4e50 4100 2b54     ARA-R4.UDOPN.AT+
 80916e4:	4455 504f 3d4e 6425 0a0d 4300 5153 4100     UDOPN=%d...CSQ.A
 80916f4:	2b54 5343 0d51 000a 5441 432b 504f 3d53     T+CSQ...AT+COPS=
 8091704:	0d30 000a 706f 7265 7461 726f 6120 726c     0...operator alr
 8091714:	6165 7964 2520 0073 5441 432b 504f 3d53     eady %s.AT+COPS=
 8091724:	0d32 000a 5441 432b 504f 3d53 2c34 2c32     2...AT+COPS=4,2,
 8091734:	2522 2273 0a0d 4300 4547 0044 5441 432b     "%s"...CGED.AT+C
 8091744:	4547 3d44 6425 0a0d 5500 4c55 434f 4100     GED=%d...UULOC.A
 8091754:	2b54 4c55 434f 4543 4c4c 303d 0a0d 4100     T+ULOCCELL=0...A
 8091764:	2b54 4c55 434f 323d 322c 302c 252c 2c64     T+ULOC=2,2,0,%d,
 8091774:	3035 3030 0a0d 4100 2b54 5243 4745 323d     5000...AT+CREG=2
 8091784:	0a0d 4300 4552 0047 5441 432b 4552 3f47     ...CREG.AT+CREG?
 8091794:	0a0d 4100 2b54 5243 4745 303d 0a0d 4100     ...AT+CREG=0...A
 80917a4:	2b54 5055 4e49 3d47 2522 2273 0a0d 5500     T+UPING="%s"...U
 80917b4:	4e44 5253 004e 5441 552b 4e44 5253 3d4e     DNSRN.AT+UDNSRN=
 80917c4:	2c30 2522 2273 0a0d 2500 2e75 7525 252e     0,"%s"...%u.%u.%
 80917d4:	2e75 7525 0a00 252b 3a73 0020               u.%u..+%s: .

080917e0 <_ZTV32CellularHelperPlusStringResponse>:
	...
 80917e8:	7f6d 0808                                   m...

080917ec <_ZZN4PMIC20getInputCurrentLimitEvE7mapping>:
 80917ec:	0064 0096 01f4 0384 04b0 05dc 07d0 0bb8     d...............

080917fc <_ZTV8SPIClass>:
	...
 8091804:	88dd 0808 88df 0808                         ........

0809180c <_ZL14clock_divisors>:
 809180c:	0800 1810 2820 3830 616e 006e 766f 0066     .... (08nan.ovf.
 809181c:	6e69 0066 6162 6475 5300 7265 6169 006c     inf.baud.Serial.
 809182c:	5355 5342 7265 6169 316c 7400 7079 0065     USBSerial1.type.
 809183c:	6170 6172 006d 6d63 0064 6e68 0064 7473     param.cmd.hnd.st
 809184c:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
 809185c:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
 809186c:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
 809187c:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
 809188c:	6e61 6c64 7265 6100 7070 2500 3130 7530     andler.app.%010u
 809189c:	0020 205d 2c00 0020 2928 203a 2000 005b      .] ., .(): . [.
 80918ac:	6f63 6564 3d20 0020 6925 6400 7465 6961     code = .%i.detai
 80918bc:	736c 3d20 0020 6e6c 6600 006e 6f63 6564     ls = .ln.fn.code
 80918cc:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
 80918dc:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
 80918ec:	726f 7000 6e61 6369 6100 6c6c 2500 302b     or.panic.all.%+0
 80918fc:	6433 253a 3230 0075 5925 252d 2d6d 6425     3d:%02u.%Y-%m-%d
 809190c:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
 809191c:	6d69 0065                                   ime.

08091920 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8091928:	9949 0808 994f 0808 9993 0808 995d 0808     I...O.......]...
 8091938:	994b 0808                                   K...

0809193c <_ZTV9IPAddress>:
	...
 8091944:	9f39 0808 9f29 0808 9f2b 0808               9...)...+...

08091950 <_ZTV9USBSerial>:
	...
 8091958:	9fcd 0808 a01d 0808 a02b 0808 8fd1 0808     ........+.......
 8091968:	a009 0808 9fcf 0808 9fe5 0808 a017 0808     ................
 8091978:	9ffb 0808 9fc9 0808                         ........

08091980 <_ZTVN5spark13CellularClassE>:
	...
 8091988:	a1cb 0808 a1c1 0808 a1b7 0808 a135 0808     ............5...
 8091998:	a1ab 0808 0a27 0808 a19f 0808 a197 0808     ....'...........
 80919a8:	a18d 0808 a183 0808 a13f 0808               ........?...

080919b4 <_ZTV11USARTSerial>:
	...
 80919bc:	0915 0808 0a33 0808 a253 0808 8fd1 0808     ....3...S.......
 80919cc:	a217 0808 a239 0808 a225 0808 a24d 0808     ....9...%...M...
 80919dc:	a205 0808 a209 0808                         ........

080919e4 <_ZTV7TwoWire>:
	...
 80919ec:	a361 0808 a3ab 0808 a383 0808 a363 0808     a...........c...
 80919fc:	a38b 0808 a393 0808 a39b 0808 a3a3 0808     ................

08091a0c <_ZTVN5spark12NetworkClassE>:
	...
 8091a14:	a45d 0808 a467 0808 a471 0808 a47b 0808     ]...g...q...{...
 8091a24:	a485 0808 a491 0808 a49d 0808 a4a9 0808     ................
 8091a34:	a4b1 0808 a4bb 0808 a4c5 0808               ............

08091a40 <day_name.4723>:
 8091a40:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 8091a50:	6972 6153 4a74                                   riSat

08091a55 <mon_name.4724>:
 8091a55:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 8091a65:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 8091a75:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 8091a85:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 8091a95:	6425 000a                                   %d..

08091a99 <_ctype_>:
 8091a99:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 8091aa9:	2020 2020 2020 2020 2020 2020 2020 2020                     
 8091ab9:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 8091ac9:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 8091ad9:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 8091ae9:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 8091af9:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 8091b09:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 8091b19:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

08091b9c <__sf_fake_stdin>:
	...

08091bbc <__sf_fake_stdout>:
	...

08091bdc <__sf_fake_stderr>:
	...
 8091bfc:	4f50 4953 0058 0000                         POSIX...

08091c04 <__month_lengths>:
 8091c04:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 8091c14:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 8091c24:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 8091c34:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 8091c44:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 8091c54:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 8091c64:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
 8091c74:	2500 6432 2500 322e 2f64 2e25 6432 252f     .%2d.%.2d/%.2d/%
 8091c84:	322e 0064 6c25 0075 2d59 6d25 252d 0064     .2d.%lu.Y-%m-%d.
 8091c94:	2a2e 0075 2e25 6433 2500 6c6c 0064 2e25     .*u.%.3d.%lld.%.
 8091ca4:	6432 253a 322e 3a64 2e25 6432 2500 302b     2d:%.2d:%.2d.%+0
 8091cb4:	6c33 2564 322e 646c 0000 0000               3ld%.2ld....

08091cc0 <fpi.5342>:
 8091cc0:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 8091cd0:	0000 0000 6e69 7469 0079 0000               ....inity...

08091cdc <fpinan.5378>:
 8091cdc:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
 8091cec:	0000 0000                                   ....

08091cf0 <tinytens>:
 8091cf0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 8091d00:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 8091d10:	6f43 64ac 0628 1168 434c 545f 4d49 0045     Co.d(.h.LC_TIME.
 8091d20:	614a 006e 6546 0062 614d 0072 7041 0072     Jan.Feb.Mar.Apr.
 8091d30:	614d 0079 754a 006e 754a 006c 7541 0067     May.Jun.Jul.Aug.
 8091d40:	6553 0070 634f 0074 6f4e 0076 6544 0063     Sep.Oct.Nov.Dec.
 8091d50:	614a 756e 7261 0079 6546 7262 6175 7972     January.February
 8091d60:	4d00 7261 6863 4100 7270 6c69 4a00 6e75     .March.April.Jun
 8091d70:	0065 754a 796c 4100 6775 7375 0074 6553     e.July.August.Se
 8091d80:	7470 6d65 6562 0072 634f 6f74 6562 0072     ptember.October.
 8091d90:	6f4e 6576 626d 7265 4400 6365 6d65 6562     November.Decembe
 8091da0:	0072 7553 006e 6f4d 006e 7554 0065 6557     r.Sun.Mon.Tue.We
 8091db0:	0064 6854 0075 7246 0069 6153 0074 7553     d.Thu.Fri.Sat.Su
 8091dc0:	646e 7961 4d00 6e6f 6164 0079 7554 7365     nday.Monday.Tues
 8091dd0:	6164 0079 6557 6e64 7365 6164 0079 6854     day.Wednesday.Th
 8091de0:	7275 6473 7961 4600 6972 6164 0079 6153     ursday.Friday.Sa
 8091df0:	7574 6472 7961 2500 2f6d 6425 252f 0079     turday.%m/%d/%y.
 8091e00:	6125 2520 2062 6525 2520 3a48 4d25 253a     %a %b %e %H:%M:%
 8091e10:	2053 5925 4100 004d 6125 2520 2062 6525     S %Y.AM.%a %b %e
 8091e20:	2520 3a48 4d25 253a 2053 5a25 2520 0059      %H:%M:%S %Z %Y.
 8091e30:	4925 253a 3a4d 5325 2520 0070               %I:%M:%S %p.

08091e3c <_C_time_locale>:
 8091e3c:	1d20 0809 1d24 0809 1d28 0809 1d2c 0809      ...$...(...,...
 8091e4c:	1d30 0809 1d34 0809 1d38 0809 1d3c 0809     0...4...8...<...
 8091e5c:	1d40 0809 1d44 0809 1d48 0809 1d4c 0809     @...D...H...L...
 8091e6c:	1d50 0809 1d58 0809 1d61 0809 1d67 0809     P...X...a...g...
 8091e7c:	1d30 0809 1d6d 0809 1d72 0809 1d77 0809     0...m...r...w...
 8091e8c:	1d7e 0809 1d88 0809 1d90 0809 1d99 0809     ~...............
 8091e9c:	1da2 0809 1da6 0809 1daa 0809 1dae 0809     ................
 8091eac:	1db2 0809 1db6 0809 1dba 0809 1dbe 0809     ................
 8091ebc:	1dc5 0809 1dcc 0809 1dd4 0809 1dde 0809     ................
 8091ecc:	1de7 0809 1dee 0809 f4d6 0808 1df7 0809     ................
 8091edc:	1e00 0809 1e15 0809 0bdf 0809 1e18 0809     ................
 8091eec:	1d50 0809 1d58 0809 1d61 0809 1d67 0809     P...X...a...g...
 8091efc:	1d30 0809 1d6d 0809 1d72 0809 1d77 0809     0...m...r...w...
 8091f0c:	1d7e 0809 1d88 0809 1d90 0809 1d99 0809     ~...............
 8091f1c:	1843 0809 1e30 0809 17cc 0809 17cc 0809     C...0...........
 8091f2c:	17cc 0809 17cc 0809 17cc 0809 5a54 4700     ............TZ.G
 8091f3c:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
 8091f4c:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
 8091f5c:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
 8091f6c:	3a6e 6825 2575 006e 0000 0000               n:%hu%n.....

08091f78 <__mprec_tens>:
 8091f78:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 8091f88:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 8091f98:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 8091fa8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 8091fb8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 8091fc8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 8091fd8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 8091fe8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 8091ff8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 8092008:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 8092018:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 8092028:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 8092038:	9db4 79d9 7843 44ea                         ...yCx.D

08092040 <__mprec_bigtens>:
 8092040:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 8092050:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 8092060:	bf3c 7f73 4fdd 7515                         <.s..O.u

08092068 <p05.5385>:
 8092068:	0005 0000 0019 0000 007d 0000               ........}...

08092074 <link_const_variable_data_end>:
 8092074:	08085a75 	.word	0x08085a75
 8092078:	08085d57 	.word	0x08085d57
 809207c:	08085e65 	.word	0x08085e65
 8092080:	08085f69 	.word	0x08085f69
 8092084:	080860ef 	.word	0x080860ef
 8092088:	08086239 	.word	0x08086239
 809208c:	0808623d 	.word	0x0808623d
 8092090:	08086855 	.word	0x08086855
 8092094:	08086859 	.word	0x08086859
 8092098:	0808685d 	.word	0x0808685d
 809209c:	08086861 	.word	0x08086861
 80920a0:	08086d2b 	.word	0x08086d2b
 80920a4:	08086e7d 	.word	0x08086e7d
 80920a8:	0808751d 	.word	0x0808751d
 80920ac:	08087541 	.word	0x08087541
 80920b0:	08087545 	.word	0x08087545
 80920b4:	0808785d 	.word	0x0808785d
 80920b8:	08087861 	.word	0x08087861
 80920bc:	08087979 	.word	0x08087979
 80920c0:	08087b69 	.word	0x08087b69
 80920c4:	08087c01 	.word	0x08087c01
 80920c8:	08087ff5 	.word	0x08087ff5
 80920cc:	08088a19 	.word	0x08088a19
 80920d0:	08089399 	.word	0x08089399
 80920d4:	080896b1 	.word	0x080896b1
 80920d8:	080896fd 	.word	0x080896fd
 80920dc:	0808a1d5 	.word	0x0808a1d5
 80920e0:	0808a511 	.word	0x0808a511
 80920e4:	0808a5f1 	.word	0x0808a5f1
 80920e8:	0808a675 	.word	0x0808a675
 80920ec:	0808a739 	.word	0x0808a739
 80920f0:	0808a7bd 	.word	0x0808a7bd
 80920f4:	0808a881 	.word	0x0808a881
 80920f8:	0808a945 	.word	0x0808a945

080920fc <link_constructors_end>:
 80920fc:	00000000 	.word	0x00000000
