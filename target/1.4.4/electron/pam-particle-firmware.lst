
c:/Users/abailly/PAM_ESP/pam-particle-firmware/target/1.4.4/electron/pam-particle-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00013980  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080939a0  080939a0  000239a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080939a8  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001cc  20000000  080939ac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001128  200001d0  200001d0  000401d0  2**3
                  ALLOC
  7 .module_info_suffix 00000028  08093b78  08093b78  00033b78  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  08093ba0  08093ba0  00033ba0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0029d782  00000000  00000000  00033ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00035409  00000000  00000000  002d1326  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0003786a  00000000  00000000  0030672f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003de0  00000000  00000000  0033df99  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00006da0  00000000  00000000  00341d79  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0005a3b5  00000000  00000000  00348b19  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00086429  00000000  00000000  003a2ece  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000d1096  00000000  00000000  004292f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00011c54  00000000  00000000  004fa390  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080020:	4809      	ldr	r0, [pc, #36]	; (8080048 <module_user_pre_init+0x28>)
 8080022:	490a      	ldr	r1, [pc, #40]	; (808004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080026:	4288      	cmp	r0, r1
 8080028:	d005      	beq.n	8080036 <module_user_pre_init+0x16>
 808002a:	4a09      	ldr	r2, [pc, #36]	; (8080050 <module_user_pre_init+0x30>)
 808002c:	4282      	cmp	r2, r0
 808002e:	d002      	beq.n	8080036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080030:	1a12      	subs	r2, r2, r0
 8080032:	f00d fc18 	bl	808d866 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080036:	4807      	ldr	r0, [pc, #28]	; (8080054 <module_user_pre_init+0x34>)
 8080038:	4a07      	ldr	r2, [pc, #28]	; (8080058 <module_user_pre_init+0x38>)
 808003a:	2100      	movs	r1, #0
 808003c:	1a12      	subs	r2, r2, r0
 808003e:	f00d fc1d 	bl	808d87c <memset>
    return &link_heap_start;
}
 8080042:	4806      	ldr	r0, [pc, #24]	; (808005c <module_user_pre_init+0x3c>)
 8080044:	bd08      	pop	{r3, pc}
 8080046:	bf00      	nop
 8080048:	20000000 	.word	0x20000000
 808004c:	080939ac 	.word	0x080939ac
 8080050:	200001cc 	.word	0x200001cc
 8080054:	200001d0 	.word	0x200001d0
 8080058:	200012f8 	.word	0x200012f8
 808005c:	200012f8 	.word	0x200012f8

08080060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080062:	f00a ff13 	bl	808ae8c <module_user_init_hook>
 8080066:	4b07      	ldr	r3, [pc, #28]	; (8080084 <module_user_init+0x24>)
 8080068:	4c07      	ldr	r4, [pc, #28]	; (8080088 <module_user_init+0x28>)
 808006a:	461e      	mov	r6, r3
 808006c:	1ae4      	subs	r4, r4, r3
 808006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080070:	2500      	movs	r5, #0
 8080072:	42a5      	cmp	r5, r4
 8080074:	d004      	beq.n	8080080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 808007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808007c:	3501      	adds	r5, #1
 808007e:	e7f8      	b.n	8080072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080080:	bd70      	pop	{r4, r5, r6, pc}
 8080082:	bf00      	nop
 8080084:	080938b4 	.word	0x080938b4
 8080088:	08093994 	.word	0x08093994

0808008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 808008c:	f002 b8ce 	b.w	808222c <setup>

08080090 <module_user_loop>:
}

void module_user_loop() {
 8080090:	b508      	push	{r3, lr}
    loop();
 8080092:	f006 fa69 	bl	8086568 <loop>
    _post_loop();
}
 8080096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 808009a:	f00a beb9 	b.w	808ae10 <_post_loop>

0808009e <_Znwj>:
 808009e:	f009 bc53 	b.w	8089948 <malloc>

080800a2 <_ZdlPv>:
 80800a2:	f009 bc59 	b.w	8089958 <free>

080800a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a6:	7800      	ldrb	r0, [r0, #0]
 80800a8:	fab0 f080 	clz	r0, r0
 80800ac:	0940      	lsrs	r0, r0, #5
 80800ae:	4770      	bx	lr

080800b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800b0:	2301      	movs	r3, #1
 80800b2:	7003      	strb	r3, [r0, #0]
 80800b4:	4770      	bx	lr

080800b6 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80800b6:	b148      	cbz	r0, 80800cc <null_ptr_check+0x16>
 80800b8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80800ba:	b13b      	cbz	r3, 80800cc <null_ptr_check+0x16>
 80800bc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80800be:	b12b      	cbz	r3, 80800cc <null_ptr_check+0x16>
 80800c0:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80800c2:	fab0 f080 	clz	r0, r0
 80800c6:	0940      	lsrs	r0, r0, #5
 80800c8:	4240      	negs	r0, r0
 80800ca:	4770      	bx	lr
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
 80800cc:	f04f 30ff 	mov.w	r0, #4294967295
		/* Device structure is fine */
		rslt = BME680_OK;
	}

	return rslt;
}
 80800d0:	4770      	bx	lr

080800d2 <set_mem_page>:

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
 80800d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80800d4:	4602      	mov	r2, r0
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
 80800d6:	4608      	mov	r0, r1

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
 80800d8:	460c      	mov	r4, r1
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
 80800da:	f7ff ffec 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80800de:	4605      	mov	r5, r0
 80800e0:	bb50      	cbnz	r0, 8080138 <set_mem_page+0x66>
		if (reg_addr > 0x7f)
			mem_page = BME680_MEM_PAGE1;
		else
			mem_page = BME680_MEM_PAGE0;
 80800e2:	f012 0f80 	tst.w	r2, #128	; 0x80

		if (mem_page != dev->mem_page) {
 80800e6:	78ca      	ldrb	r2, [r1, #3]
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (reg_addr > 0x7f)
			mem_page = BME680_MEM_PAGE1;
		else
			mem_page = BME680_MEM_PAGE0;
 80800e8:	bf14      	ite	ne
 80800ea:	2300      	movne	r3, #0
 80800ec:	2310      	moveq	r3, #16

		if (mem_page != dev->mem_page) {
 80800ee:	429a      	cmp	r2, r3
 80800f0:	d022      	beq.n	8080138 <set_mem_page+0x66>
			dev->mem_page = mem_page;
 80800f2:	70cb      	strb	r3, [r1, #3]

			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 80800f4:	6c8e      	ldr	r6, [r1, #72]	; 0x48
 80800f6:	2301      	movs	r3, #1
 80800f8:	f10d 0207 	add.w	r2, sp, #7
 80800fc:	21f3      	movs	r1, #243	; 0xf3
 80800fe:	7860      	ldrb	r0, [r4, #1]
 8080100:	47b0      	blx	r6
 8080102:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
			if (dev->com_rslt != 0)
 8080106:	b110      	cbz	r0, 808010e <set_mem_page+0x3c>
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
					&reg, 1);
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
 8080108:	f06f 0501 	mvn.w	r5, #1
 808010c:	e014      	b.n	8080138 <set_mem_page+0x66>
			if (dev->com_rslt != 0)
				rslt = BME680_E_COM_FAIL;

			if (rslt == BME680_OK) {
				reg = reg & (~BME680_MEM_PAGE_MSK);
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 808010e:	78e3      	ldrb	r3, [r4, #3]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 8080110:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
			if (dev->com_rslt != 0)
				rslt = BME680_E_COM_FAIL;

			if (rslt == BME680_OK) {
				reg = reg & (~BME680_MEM_PAGE_MSK);
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 8080112:	f003 0210 	and.w	r2, r3, #16
 8080116:	f89d 3007 	ldrb.w	r3, [sp, #7]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 808011a:	2173      	movs	r1, #115	; 0x73
			if (dev->com_rslt != 0)
				rslt = BME680_E_COM_FAIL;

			if (rslt == BME680_OK) {
				reg = reg & (~BME680_MEM_PAGE_MSK);
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 808011c:	f023 0310 	bic.w	r3, r3, #16
 8080120:	4313      	orrs	r3, r2
 8080122:	f88d 3007 	strb.w	r3, [sp, #7]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 8080126:	f10d 0207 	add.w	r2, sp, #7
 808012a:	2301      	movs	r3, #1
 808012c:	7860      	ldrb	r0, [r4, #1]
 808012e:	47b0      	blx	r6
 8080130:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
					&reg, 1);
				if (dev->com_rslt != 0)
 8080134:	2800      	cmp	r0, #0
 8080136:	d1e7      	bne.n	8080108 <set_mem_page+0x36>
			}
		}
	}

	return rslt;
}
 8080138:	4628      	mov	r0, r5
 808013a:	b002      	add	sp, #8
 808013c:	bd70      	pop	{r4, r5, r6, pc}

0808013e <get_mem_page>:

/*!
 * @brief This internal API is used to get the memory page based on register address.
 */
static int8_t get_mem_page(struct bme680_dev *dev)
{
 808013e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8080140:	4604      	mov	r4, r0
	int8_t rslt;
	uint8_t reg;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080142:	f7ff ffb8 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080146:	4605      	mov	r5, r0
 8080148:	b988      	cbnz	r0, 808016e <get_mem_page+0x30>
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 808014a:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 808014c:	2301      	movs	r3, #1
 808014e:	f10d 0207 	add.w	r2, sp, #7
 8080152:	21f3      	movs	r1, #243	; 0xf3
 8080154:	7860      	ldrb	r0, [r4, #1]
 8080156:	47b0      	blx	r6
 8080158:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
		if (dev->com_rslt != 0)
 808015c:	b928      	cbnz	r0, 808016a <get_mem_page+0x2c>
			rslt = BME680_E_COM_FAIL;
		else
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
 808015e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8080162:	f003 0310 	and.w	r3, r3, #16
 8080166:	70e3      	strb	r3, [r4, #3]
 8080168:	e001      	b.n	808016e <get_mem_page+0x30>
	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
		if (dev->com_rslt != 0)
			rslt = BME680_E_COM_FAIL;
 808016a:	f06f 0501 	mvn.w	r5, #1
		else
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
	}

	return rslt;
}
 808016e:	4628      	mov	r0, r5
 8080170:	b002      	add	sp, #8
 8080172:	bd70      	pop	{r4, r5, r6, pc}

08080174 <boundary_check.isra.1.constprop.2>:
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
	int8_t rslt = BME680_OK;

	if (value != NULL) {
 8080174:	b140      	cbz	r0, 8080188 <boundary_check.isra.1.constprop.2+0x14>
			/* Auto correct the invalid value to minimum value */
			*value = min;
			dev->info_msg |= BME680_I_MIN_CORRECTION;
		}
		/* Check if value is above maximum value */
		if (*value > max) {
 8080176:	7803      	ldrb	r3, [r0, #0]
 8080178:	428b      	cmp	r3, r1
 808017a:	d908      	bls.n	808018e <boundary_check.isra.1.constprop.2+0x1a>
			/* Auto correct the invalid value to maximum value */
			*value = max;
 808017c:	7001      	strb	r1, [r0, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 808017e:	7813      	ldrb	r3, [r2, #0]
 8080180:	f043 0302 	orr.w	r3, r3, #2
 8080184:	7013      	strb	r3, [r2, #0]
 8080186:	e002      	b.n	808018e <boundary_check.isra.1.constprop.2+0x1a>
		}
	} else {
		rslt = BME680_E_NULL_PTR;
 8080188:	f04f 30ff 	mov.w	r0, #4294967295
 808018c:	4770      	bx	lr
 * @brief This internal API is used to validate the boundary
 * conditions.
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
	int8_t rslt = BME680_OK;
 808018e:	2000      	movs	r0, #0
	} else {
		rslt = BME680_E_NULL_PTR;
	}

	return rslt;
}
 8080190:	4770      	bx	lr

08080192 <bme680_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
 8080192:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8080196:	4606      	mov	r6, r0
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080198:	4618      	mov	r0, r3

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
 808019a:	4688      	mov	r8, r1
 808019c:	4691      	mov	r9, r2
 808019e:	461d      	mov	r5, r3
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80801a0:	f7ff ff89 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80801a4:	4604      	mov	r4, r0
 80801a6:	b9a8      	cbnz	r0, 80801d4 <bme680_get_regs+0x42>
		if (dev->intf == BME680_SPI_INTF) {
 80801a8:	78ab      	ldrb	r3, [r5, #2]
 80801aa:	b93b      	cbnz	r3, 80801bc <bme680_get_regs+0x2a>
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
 80801ac:	4629      	mov	r1, r5
 80801ae:	4630      	mov	r0, r6
 80801b0:	f7ff ff8f 	bl	80800d2 <set_mem_page>
			if (rslt == BME680_OK)
 80801b4:	4604      	mov	r4, r0
 80801b6:	b908      	cbnz	r0, 80801bc <bme680_get_regs+0x2a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
 80801b8:	f046 0680 	orr.w	r6, r6, #128	; 0x80
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80801bc:	6caf      	ldr	r7, [r5, #72]	; 0x48
 80801be:	464b      	mov	r3, r9
 80801c0:	4642      	mov	r2, r8
 80801c2:	4631      	mov	r1, r6
 80801c4:	7868      	ldrb	r0, [r5, #1]
 80801c6:	47b8      	blx	r7
		if (dev->com_rslt != 0)
 80801c8:	2800      	cmp	r0, #0
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
			if (rslt == BME680_OK)
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80801ca:	f885 0054 	strb.w	r0, [r5, #84]	; 0x54
		if (dev->com_rslt != 0)
			rslt = BME680_E_COM_FAIL;
 80801ce:	bf18      	it	ne
 80801d0:	f06f 0401 	mvnne.w	r4, #1
	}

	return rslt;
}
 80801d4:	4620      	mov	r0, r4
 80801d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080801da <bme680_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme680_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme680_dev *dev)
{
 80801da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80801de:	461e      	mov	r6, r3
 80801e0:	b08b      	sub	sp, #44	; 0x2c
 80801e2:	4683      	mov	fp, r0
 80801e4:	468a      	mov	sl, r1
 80801e6:	4614      	mov	r4, r2
	int8_t rslt;
	/* Length of the temporary buffer is 2*(length of register)*/
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 80801e8:	2100      	movs	r1, #0
 80801ea:	2228      	movs	r2, #40	; 0x28
 80801ec:	4668      	mov	r0, sp
 80801ee:	f00d fb45 	bl	808d87c <memset>
	uint16_t index;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80801f2:	4630      	mov	r0, r6
 80801f4:	f7ff ff5f 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80801f8:	4605      	mov	r5, r0
 80801fa:	bba8      	cbnz	r0, 8080268 <bme680_set_regs+0x8e>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
 80801fc:	1e63      	subs	r3, r4, #1
 80801fe:	2b12      	cmp	r3, #18
 8080200:	d830      	bhi.n	8080264 <bme680_set_regs+0x8a>
 8080202:	f10d 0801 	add.w	r8, sp, #1
 8080206:	465f      	mov	r7, fp
 8080208:	46c1      	mov	r9, r8
 808020a:	f10a 3aff 	add.w	sl, sl, #4294967295
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
 808020e:	b2a4      	uxth	r4, r4
 8080210:	ebcb 0307 	rsb	r3, fp, r7
 8080214:	b29b      	uxth	r3, r3
 8080216:	429c      	cmp	r4, r3
 8080218:	d913      	bls.n	8080242 <bme680_set_regs+0x68>
				if (dev->intf == BME680_SPI_INTF) {
 808021a:	78b3      	ldrb	r3, [r6, #2]
 808021c:	b943      	cbnz	r3, 8080230 <bme680_set_regs+0x56>
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
 808021e:	4631      	mov	r1, r6
 8080220:	7838      	ldrb	r0, [r7, #0]
 8080222:	f7ff ff56 	bl	80800d2 <set_mem_page>
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 8080226:	783b      	ldrb	r3, [r7, #0]
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
				if (dev->intf == BME680_SPI_INTF) {
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
 8080228:	4605      	mov	r5, r0
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 808022a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 808022e:	e000      	b.n	8080232 <bme680_set_regs+0x58>
				} else {
					tmp_buff[(2 * index)] = reg_addr[index];
 8080230:	783b      	ldrb	r3, [r7, #0]
 8080232:	f808 3c01 	strb.w	r3, [r8, #-1]
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
 8080236:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 808023a:	3701      	adds	r7, #1
 808023c:	f808 3b02 	strb.w	r3, [r8], #2
 8080240:	e7e6      	b.n	8080210 <bme680_set_regs+0x36>
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
 8080242:	b98d      	cbnz	r5, 8080268 <bme680_set_regs+0x8e>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 8080244:	0063      	lsls	r3, r4, #1
 8080246:	3b01      	subs	r3, #1
 8080248:	6cf4      	ldr	r4, [r6, #76]	; 0x4c
 808024a:	b29b      	uxth	r3, r3
 808024c:	464a      	mov	r2, r9
 808024e:	f89d 1000 	ldrb.w	r1, [sp]
 8080252:	7870      	ldrb	r0, [r6, #1]
 8080254:	47a0      	blx	r4
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
 8080256:	2800      	cmp	r0, #0
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 8080258:	f886 0054 	strb.w	r0, [r6, #84]	; 0x54
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
 808025c:	bf18      	it	ne
 808025e:	f06f 0501 	mvnne.w	r5, #1
 8080262:	e001      	b.n	8080268 <bme680_set_regs+0x8e>
			}
		} else {
			rslt = BME680_E_INVALID_LENGTH;
 8080264:	f06f 0503 	mvn.w	r5, #3
		}
	}

	return rslt;
}
 8080268:	4628      	mov	r0, r5
 808026a:	b00b      	add	sp, #44	; 0x2c
 808026c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08080270 <bme680_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme680_soft_reset(struct bme680_dev *dev)
{
 8080270:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int8_t rslt;
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
 8080272:	23e0      	movs	r3, #224	; 0xe0
 8080274:	f88d 3006 	strb.w	r3, [sp, #6]
	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 8080278:	23b6      	movs	r3, #182	; 0xb6

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme680_soft_reset(struct bme680_dev *dev)
{
 808027a:	4605      	mov	r5, r0
	int8_t rslt;
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 808027c:	f88d 3007 	strb.w	r3, [sp, #7]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080280:	f7ff ff19 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080284:	4604      	mov	r4, r0
 8080286:	b9d8      	cbnz	r0, 80802c0 <bme680_soft_reset+0x50>
		if (dev->intf == BME680_SPI_INTF)
 8080288:	78ab      	ldrb	r3, [r5, #2]
 808028a:	b16b      	cbz	r3, 80802a8 <bme680_soft_reset+0x38>
			rslt = get_mem_page(dev);

		/* Reset the device */
		if (rslt == BME680_OK) {
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 808028c:	462b      	mov	r3, r5
 808028e:	2201      	movs	r2, #1
 8080290:	f10d 0107 	add.w	r1, sp, #7
 8080294:	f10d 0006 	add.w	r0, sp, #6
 8080298:	f7ff ff9f 	bl	80801da <bme680_set_regs>
 808029c:	4604      	mov	r4, r0
			/* Wait for 5ms */
			dev->delay_ms(BME680_RESET_PERIOD);
 808029e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80802a0:	200a      	movs	r0, #10
 80802a2:	4798      	blx	r3

			if (rslt == BME680_OK) {
 80802a4:	b134      	cbz	r4, 80802b4 <bme680_soft_reset+0x44>
 80802a6:	e00b      	b.n	80802c0 <bme680_soft_reset+0x50>

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (dev->intf == BME680_SPI_INTF)
			rslt = get_mem_page(dev);
 80802a8:	4628      	mov	r0, r5
 80802aa:	f7ff ff48 	bl	808013e <get_mem_page>

		/* Reset the device */
		if (rslt == BME680_OK) {
 80802ae:	4604      	mov	r4, r0
 80802b0:	b930      	cbnz	r0, 80802c0 <bme680_soft_reset+0x50>
 80802b2:	e7eb      	b.n	808028c <bme680_soft_reset+0x1c>
			/* Wait for 5ms */
			dev->delay_ms(BME680_RESET_PERIOD);

			if (rslt == BME680_OK) {
				/* After reset get the memory page */
				if (dev->intf == BME680_SPI_INTF)
 80802b4:	78ab      	ldrb	r3, [r5, #2]
 80802b6:	b91b      	cbnz	r3, 80802c0 <bme680_soft_reset+0x50>
					rslt = get_mem_page(dev);
 80802b8:	4628      	mov	r0, r5
 80802ba:	f7ff ff40 	bl	808013e <get_mem_page>
 80802be:	4604      	mov	r4, r0
			}
		}
	}

	return rslt;
}
 80802c0:	4620      	mov	r0, r4
 80802c2:	b003      	add	sp, #12
 80802c4:	bd30      	pop	{r4, r5, pc}

080802c6 <bme680_init>:
/*!
 *@brief This API is the entry point.
 *It reads the chip-id and calibration data from the sensor.
 */
int8_t bme680_init(struct bme680_dev *dev)
{
 80802c6:	b530      	push	{r4, r5, lr}
 80802c8:	b08d      	sub	sp, #52	; 0x34
 80802ca:	4604      	mov	r4, r0
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80802cc:	f7ff fef3 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80802d0:	4605      	mov	r5, r0
 80802d2:	2800      	cmp	r0, #0
 80802d4:	f040 80d5 	bne.w	8080482 <bme680_init+0x1bc>
		/* Soft reset to restore it to default values*/
		rslt = bme680_soft_reset(dev);
 80802d8:	4620      	mov	r0, r4
 80802da:	f7ff ffc9 	bl	8080270 <bme680_soft_reset>
		if (rslt == BME680_OK) {
 80802de:	4605      	mov	r5, r0
 80802e0:	2800      	cmp	r0, #0
 80802e2:	f040 80ce 	bne.w	8080482 <bme680_init+0x1bc>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 80802e6:	4623      	mov	r3, r4
 80802e8:	2201      	movs	r2, #1
 80802ea:	4621      	mov	r1, r4
 80802ec:	20d0      	movs	r0, #208	; 0xd0
 80802ee:	f7ff ff50 	bl	8080192 <bme680_get_regs>
			if (rslt == BME680_OK) {
 80802f2:	4605      	mov	r5, r0
 80802f4:	2800      	cmp	r0, #0
 80802f6:	f040 80c4 	bne.w	8080482 <bme680_init+0x1bc>
				if (dev->chip_id == BME680_CHIP_ID) {
 80802fa:	7823      	ldrb	r3, [r4, #0]
 80802fc:	2b61      	cmp	r3, #97	; 0x61
 80802fe:	f040 80be 	bne.w	808047e <bme680_init+0x1b8>
 * @brief This internal API is used to read the calibrated data from the sensor.
 */
static int8_t get_calib_data(struct bme680_dev *dev)
{
	int8_t rslt;
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
 8080302:	4601      	mov	r1, r0
 8080304:	2229      	movs	r2, #41	; 0x29
 8080306:	a801      	add	r0, sp, #4
 8080308:	f00d fab8 	bl	808d87c <memset>
	uint8_t temp_var = 0; /* Temporary variable */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 808030c:	4620      	mov	r0, r4
 */
static int8_t get_calib_data(struct bme680_dev *dev)
{
	int8_t rslt;
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
	uint8_t temp_var = 0; /* Temporary variable */
 808030e:	f88d 5003 	strb.w	r5, [sp, #3]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080312:	f7ff fed0 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080316:	4605      	mov	r5, r0
 8080318:	2800      	cmp	r0, #0
 808031a:	f040 80b2 	bne.w	8080482 <bme680_init+0x1bc>
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
 808031e:	4623      	mov	r3, r4
 8080320:	2219      	movs	r2, #25
 8080322:	a901      	add	r1, sp, #4
 8080324:	2089      	movs	r0, #137	; 0x89
 8080326:	f7ff ff34 	bl	8080192 <bme680_get_regs>
		/* Append the second half in the same array */
		if (rslt == BME680_OK)
 808032a:	4605      	mov	r5, r0
 808032c:	b938      	cbnz	r0, 808033e <bme680_init+0x78>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
 808032e:	4623      	mov	r3, r4
 8080330:	2210      	movs	r2, #16
 8080332:	f10d 011d 	add.w	r1, sp, #29
 8080336:	20e1      	movs	r0, #225	; 0xe1
 8080338:	f7ff ff2b 	bl	8080192 <bme680_get_regs>
 808033c:	4605      	mov	r5, r0
			, BME680_COEFF_ADDR2_LEN, dev);

		/* Temperature related coefficients */
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
 808033e:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8080342:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8080346:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 808034a:	82e3      	strh	r3, [r4, #22]
			coeff_array[BME680_T1_LSB_REG]));
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
 808034c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8080350:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8080354:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8080358:	8323      	strh	r3, [r4, #24]
			coeff_array[BME680_T2_LSB_REG]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 808035a:	f89d 3007 	ldrb.w	r3, [sp, #7]

		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 808035e:	f89d 200a 	ldrb.w	r2, [sp, #10]
		/* Temperature related coefficients */
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
			coeff_array[BME680_T1_LSB_REG]));
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
			coeff_array[BME680_T2_LSB_REG]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 8080362:	76a3      	strb	r3, [r4, #26]

		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 8080364:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8080368:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 808036c:	83a3      	strh	r3, [r4, #28]
			coeff_array[BME680_P1_LSB_REG]));
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
 808036e:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8080372:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8080376:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 808037a:	83e3      	strh	r3, [r4, #30]
			coeff_array[BME680_P2_LSB_REG]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 808037c:	f89d 300d 	ldrb.w	r3, [sp, #13]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 8080380:	f89d 2010 	ldrb.w	r2, [sp, #16]
		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
			coeff_array[BME680_P1_LSB_REG]));
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
			coeff_array[BME680_P2_LSB_REG]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 8080384:	f884 3020 	strb.w	r3, [r4, #32]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 8080388:	f89d 300f 	ldrb.w	r3, [sp, #15]
 808038c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8080390:	8463      	strh	r3, [r4, #34]	; 0x22
			coeff_array[BME680_P4_LSB_REG]));
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
 8080392:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8080396:	f89d 3011 	ldrb.w	r3, [sp, #17]
 808039a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 808039e:	84a3      	strh	r3, [r4, #36]	; 0x24
			coeff_array[BME680_P5_LSB_REG]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 80803a0:	f89d 3014 	ldrb.w	r3, [sp, #20]
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 80803a4:	f89d 2018 	ldrb.w	r2, [sp, #24]
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
			coeff_array[BME680_P4_LSB_REG]));
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
			coeff_array[BME680_P5_LSB_REG]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 80803a8:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
 80803ac:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80803b0:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 80803b4:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80803b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80803bc:	8523      	strh	r3, [r4, #40]	; 0x28
			coeff_array[BME680_P8_LSB_REG]));
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
 80803be:	f89d 201a 	ldrb.w	r2, [sp, #26]
 80803c2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80803c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80803ca:	8563      	strh	r3, [r4, #42]	; 0x2a
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 80803cc:	f89d 301b 	ldrb.w	r3, [sp, #27]

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80803d0:	f89d 101f 	ldrb.w	r1, [sp, #31]
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
			coeff_array[BME680_P8_LSB_REG]));
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 80803d4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
 80803d8:	f89d 301e 	ldrb.w	r3, [sp, #30]
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80803dc:	f003 020f 	and.w	r2, r3, #15
 80803e0:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 80803e4:	8122      	strh	r2, [r4, #8]
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80803e6:	f89d 201d 	ldrb.w	r2, [sp, #29]
 80803ea:	091b      	lsrs	r3, r3, #4
 80803ec:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80803f0:	8163      	strh	r3, [r4, #10]
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 80803f2:	f89d 3020 	ldrb.w	r3, [sp, #32]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];

		/* Gas heater related coefficients */
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 80803f6:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 80803fa:	7323      	strb	r3, [r4, #12]
		dev->calib.par_h4 = (int8_t) coeff_array[BME680_H4_REG];
 80803fc:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8080400:	7363      	strb	r3, [r4, #13]
		dev->calib.par_h5 = (int8_t) coeff_array[BME680_H5_REG];
 8080402:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 8080406:	73a3      	strb	r3, [r4, #14]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
 8080408:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 808040c:	73e3      	strb	r3, [r4, #15]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
 808040e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8080412:	7423      	strb	r3, [r4, #16]

		/* Gas heater related coefficients */
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
 8080414:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 8080418:	7463      	strb	r3, [r4, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 808041a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 808041e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8080422:	8263      	strh	r3, [r4, #18]
			coeff_array[BME680_GH2_LSB_REG]));
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
 8080424:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 8080428:	7523      	strb	r3, [r4, #20]

		/* Other coefficients */
		if (rslt == BME680_OK) {
 808042a:	bb15      	cbnz	r5, 8080472 <bme680_init+0x1ac>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
 808042c:	4623      	mov	r3, r4
 808042e:	2201      	movs	r2, #1
 8080430:	f10d 0103 	add.w	r1, sp, #3
 8080434:	2002      	movs	r0, #2
 8080436:	f7ff feac 	bl	8080192 <bme680_get_regs>

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 808043a:	f89d 3003 	ldrb.w	r3, [sp, #3]
			if (rslt == BME680_OK) {
 808043e:	4605      	mov	r5, r0

		/* Other coefficients */
		if (rslt == BME680_OK) {
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 8080440:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8080444:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if (rslt == BME680_OK) {
 8080448:	b998      	cbnz	r0, 8080472 <bme680_init+0x1ac>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
 808044a:	4623      	mov	r3, r4
 808044c:	2201      	movs	r2, #1
 808044e:	f10d 0103 	add.w	r1, sp, #3
 8080452:	f7ff fe9e 	bl	8080192 <bme680_get_regs>

				dev->calib.res_heat_val = (int8_t) temp_var;
 8080456:	f89d 3003 	ldrb.w	r3, [sp, #3]
				if (rslt == BME680_OK)
 808045a:	4605      	mov	r5, r0

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
			if (rslt == BME680_OK) {
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);

				dev->calib.res_heat_val = (int8_t) temp_var;
 808045c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
				if (rslt == BME680_OK)
 8080460:	b938      	cbnz	r0, 8080472 <bme680_init+0x1ac>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
 8080462:	4623      	mov	r3, r4
 8080464:	2201      	movs	r2, #1
 8080466:	f10d 0103 	add.w	r1, sp, #3
 808046a:	2004      	movs	r0, #4
 808046c:	f7ff fe91 	bl	8080192 <bme680_get_regs>
 8080470:	4605      	mov	r5, r0
			}
		}
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
 8080472:	f99d 3003 	ldrsb.w	r3, [sp, #3]
 8080476:	111b      	asrs	r3, r3, #4
 8080478:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
 808047c:	e001      	b.n	8080482 <bme680_init+0x1bc>
			if (rslt == BME680_OK) {
				if (dev->chip_id == BME680_CHIP_ID) {
					/* Get the Calibration data */
					rslt = get_calib_data(dev);
				} else {
					rslt = BME680_E_DEV_NOT_FOUND;
 808047e:	f06f 0502 	mvn.w	r5, #2
			}
		}
	}

	return rslt;
}
 8080482:	4628      	mov	r0, r5
 8080484:	b00d      	add	sp, #52	; 0x34
 8080486:	bd30      	pop	{r4, r5, pc}

08080488 <bme680_set_sensor_mode>:

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
 8080488:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 808048a:	2374      	movs	r3, #116	; 0x74

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
 808048c:	4604      	mov	r4, r0
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 808048e:	f88d 3007 	strb.w	r3, [sp, #7]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080492:	f7ff fe10 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080496:	bba0      	cbnz	r0, 8080502 <bme680_set_sensor_mode+0x7a>
 8080498:	4605      	mov	r5, r0
		/* Call recursively until in sleep */
		do {
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
 808049a:	4623      	mov	r3, r4
 808049c:	2201      	movs	r2, #1
 808049e:	f10d 0106 	add.w	r1, sp, #6
 80804a2:	2074      	movs	r0, #116	; 0x74
 80804a4:	f7ff fe75 	bl	8080192 <bme680_get_regs>
			if (rslt == BME680_OK) {
 80804a8:	b9a0      	cbnz	r0, 80804d4 <bme680_set_sensor_mode+0x4c>
				/* Put to sleep before changing mode */
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
 80804aa:	f89d 3006 	ldrb.w	r3, [sp, #6]

				if (pow_mode != BME680_SLEEP_MODE) {
 80804ae:	f013 0503 	ands.w	r5, r3, #3
 80804b2:	d011      	beq.n	80804d8 <bme680_set_sensor_mode+0x50>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 80804b4:	f023 0303 	bic.w	r3, r3, #3
 80804b8:	f88d 3006 	strb.w	r3, [sp, #6]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80804bc:	2201      	movs	r2, #1
 80804be:	4623      	mov	r3, r4
 80804c0:	f10d 0106 	add.w	r1, sp, #6
 80804c4:	f10d 0007 	add.w	r0, sp, #7
 80804c8:	f7ff fe87 	bl	80801da <bme680_set_regs>
					dev->delay_ms(BME680_POLL_PERIOD_MS);
 80804cc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80804ce:	200a      	movs	r0, #10
 80804d0:	4798      	blx	r3
 80804d2:	e7e2      	b.n	808049a <bme680_set_sensor_mode+0x12>
				}
			}
		} while (pow_mode != BME680_SLEEP_MODE);
 80804d4:	2d00      	cmp	r5, #0
 80804d6:	d1e0      	bne.n	808049a <bme680_set_sensor_mode+0x12>

		/* Already in sleep */
		if (dev->power_mode != BME680_SLEEP_MODE) {
 80804d8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80804dc:	b18b      	cbz	r3, 8080502 <bme680_set_sensor_mode+0x7a>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
 80804de:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80804e2:	f003 0303 	and.w	r3, r3, #3
 80804e6:	f022 0203 	bic.w	r2, r2, #3
 80804ea:	4313      	orrs	r3, r2
 80804ec:	f88d 3006 	strb.w	r3, [sp, #6]
			if (rslt == BME680_OK)
 80804f0:	b938      	cbnz	r0, 8080502 <bme680_set_sensor_mode+0x7a>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80804f2:	4623      	mov	r3, r4
 80804f4:	2201      	movs	r2, #1
 80804f6:	f10d 0106 	add.w	r1, sp, #6
 80804fa:	f10d 0007 	add.w	r0, sp, #7
 80804fe:	f7ff fe6c 	bl	80801da <bme680_set_regs>
		}
	}

	return rslt;
}
 8080502:	b003      	add	sp, #12
 8080504:	bd30      	pop	{r4, r5, pc}

08080506 <bme680_set_sensor_settings>:
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 8080506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
 808050a:	2300      	movs	r3, #0
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 808050c:	b088      	sub	sp, #32
 808050e:	4606      	mov	r6, r0
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080510:	4608      	mov	r0, r1
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 8080512:	460c      	mov	r4, r1
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
 8080514:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t count = 0;
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 8080518:	9304      	str	r3, [sp, #16]
 808051a:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 808051e:	9306      	str	r3, [sp, #24]
 8080520:	f8ad 301c 	strh.w	r3, [sp, #28]
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080524:	f7ff fdc7 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080528:	2800      	cmp	r0, #0
 808052a:	f040 8164 	bne.w	80807f6 <bme680_set_sensor_settings+0x2f0>
		if (desired_settings & BME680_GAS_MEAS_SEL)
 808052e:	0732      	lsls	r2, r6, #28
	uint8_t reg_addr;
	uint8_t data = 0;
	uint8_t count = 0;
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
 8080530:	f891 7044 	ldrb.w	r7, [r1, #68]	; 0x44

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (desired_settings & BME680_GAS_MEAS_SEL)
 8080534:	d56a      	bpl.n	808060c <bme680_set_sensor_settings+0x106>
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
 8080536:	2f01      	cmp	r7, #1

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
 8080538:	f8ad 0008 	strh.w	r0, [sp, #8]
		uint8_t reg_data[2] = {0};
 808053c:	f8ad 000c 	strh.w	r0, [sp, #12]

		if (dev->power_mode == BME680_FORCED_MODE) {
 8080540:	d163      	bne.n	808060a <bme680_set_sensor_settings+0x104>
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 8080542:	235a      	movs	r3, #90	; 0x5a
 8080544:	f88d 3008 	strb.w	r3, [sp, #8]
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
 8080548:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
	int32_t var3;
	int32_t var4;
	int32_t var5;
	int32_t heatr_res_x100;

	if (temp < 200) /* Cap temperature */
 808054c:	2bc7      	cmp	r3, #199	; 0xc7
 808054e:	d905      	bls.n	808055c <bme680_set_sensor_settings+0x56>
 8080550:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8080554:	bf28      	it	cs
 8080556:	f44f 73c8 	movcs.w	r3, #400	; 0x190
 808055a:	e000      	b.n	808055e <bme680_set_sensor_settings+0x58>
		temp = 200;
 808055c:	23c8      	movs	r3, #200	; 0xc8
		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
 808055e:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 8080562:	2114      	movs	r1, #20
 8080564:	f502 3216 	add.w	r2, r2, #153600	; 0x25800
 8080568:	f202 1299 	addw	r2, r2, #409	; 0x199
 808056c:	4353      	muls	r3, r2
 808056e:	fb93 f3f1 	sdiv	r3, r3, r1
 8080572:	210a      	movs	r1, #10
 8080574:	f503 1348 	add.w	r3, r3, #3276800	; 0x320000
 8080578:	fb93 f3f1 	sdiv	r3, r3, r1
 808057c:	f994 2011 	ldrsb.w	r2, [r4, #17]
 8080580:	f994 0014 	ldrsb.w	r0, [r4, #20]
 8080584:	f502 7244 	add.w	r2, r2, #784	; 0x310
 8080588:	435a      	muls	r2, r3
 808058a:	f994 3004 	ldrsb.w	r3, [r4, #4]
 808058e:	4358      	muls	r0, r3
 8080590:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080594:	fb90 f3f3 	sdiv	r3, r0, r3
 8080598:	021b      	lsls	r3, r3, #8
 808059a:	eb03 0162 	add.w	r1, r3, r2, asr #1
 808059e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80805a2:	3304      	adds	r3, #4
 80805a4:	fb91 f2f3 	sdiv	r2, r1, r3
 80805a8:	f994 1035 	ldrsb.w	r1, [r4, #53]	; 0x35
 80805ac:	2383      	movs	r3, #131	; 0x83
 80805ae:	434b      	muls	r3, r1
 80805b0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80805b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80805b8:	2222      	movs	r2, #34	; 0x22
 80805ba:	3bfa      	subs	r3, #250	; 0xfa
 80805bc:	4353      	muls	r3, r2
 80805be:	2264      	movs	r2, #100	; 0x64
 80805c0:	3332      	adds	r3, #50	; 0x32
 80805c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80805c6:	f88d 300c 	strb.w	r3, [sp, #12]
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 80805ca:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
 80805ce:	f88d 2009 	strb.w	r2, [sp, #9]
static uint8_t calc_heater_dur(uint16_t dur)
{
	uint8_t factor = 0;
	uint8_t durval;

	if (dur >= 0xfc0) {
 80805d2:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
 80805d6:	d20b      	bcs.n	80805f0 <bme680_set_sensor_settings+0xea>
 80805d8:	2200      	movs	r2, #0
		durval = 0xff; /* Max duration*/
	} else {
		while (dur > 0x3F) {
 80805da:	2b3f      	cmp	r3, #63	; 0x3f
 80805dc:	b2d1      	uxtb	r1, r2
 80805de:	f102 0201 	add.w	r2, r2, #1
 80805e2:	d901      	bls.n	80805e8 <bme680_set_sensor_settings+0xe2>
			dur = dur / 4;
 80805e4:	089b      	lsrs	r3, r3, #2
 80805e6:	e7f8      	b.n	80805da <bme680_set_sensor_settings+0xd4>
			factor += 1;
		}
		durval = (uint8_t) (dur + (factor * 64));
 80805e8:	eb03 1381 	add.w	r3, r3, r1, lsl #6
 80805ec:	b2db      	uxtb	r3, r3
 80805ee:	e000      	b.n	80805f2 <bme680_set_sensor_settings+0xec>
{
	uint8_t factor = 0;
	uint8_t durval;

	if (dur >= 0xfc0) {
		durval = 0xff; /* Max duration*/
 80805f0:	23ff      	movs	r3, #255	; 0xff

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 80805f2:	f88d 300d 	strb.w	r3, [sp, #13]
			dev->gas_sett.nb_conv = 0;
 80805f6:	2300      	movs	r3, #0
 80805f8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		} else {
			rslt = BME680_W_DEFINE_PWR_MODE;
		}
		if (rslt == BME680_OK)
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 80805fc:	2202      	movs	r2, #2
 80805fe:	4623      	mov	r3, r4
 8080600:	a903      	add	r1, sp, #12
 8080602:	a802      	add	r0, sp, #8
 8080604:	f7ff fde9 	bl	80801da <bme680_set_regs>
 8080608:	e000      	b.n	808060c <bme680_set_sensor_settings+0x106>
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
 808060a:	2001      	movs	r0, #1
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (desired_settings & BME680_GAS_MEAS_SEL)
			rslt = set_gas_config(dev);

		dev->power_mode = BME680_SLEEP_MODE;
 808060c:	2300      	movs	r3, #0
 808060e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		if (rslt == BME680_OK)
 8080612:	b910      	cbnz	r0, 808061a <bme680_set_sensor_settings+0x114>
			rslt = bme680_set_sensor_mode(dev);
 8080614:	4620      	mov	r0, r4
 8080616:	f7ff ff37 	bl	8080488 <bme680_set_sensor_mode>

		/* Selecting the filter */
		if (desired_settings & BME680_FILTER_SEL) {
 808061a:	f006 0510 	and.w	r5, r6, #16
 808061e:	b2ad      	uxth	r5, r5
 8080620:	b305      	cbz	r5, 8080664 <bme680_set_sensor_settings+0x15e>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
 8080622:	f104 0246 	add.w	r2, r4, #70	; 0x46
 8080626:	2107      	movs	r1, #7
 8080628:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 808062c:	f7ff fda2 	bl	8080174 <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_ODR_FILT_ADDR;

			if (rslt == BME680_OK)
 8080630:	b930      	cbnz	r0, 8080640 <bme680_set_sensor_settings+0x13a>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8080632:	4623      	mov	r3, r4
 8080634:	2201      	movs	r2, #1
 8080636:	f10d 0107 	add.w	r1, sp, #7
 808063a:	2075      	movs	r0, #117	; 0x75
 808063c:	f7ff fda9 	bl	8080192 <bme680_get_regs>

			if (desired_settings & BME680_FILTER_SEL)
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 8080640:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b

			reg_array[count] = reg_addr; /* Append configuration */
			data_array[count] = data;
			count++;
 8080644:	2501      	movs	r5, #1

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);

			if (desired_settings & BME680_FILTER_SEL)
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 8080646:	009b      	lsls	r3, r3, #2
 8080648:	f003 021c 	and.w	r2, r3, #28
 808064c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8080650:	f023 031c 	bic.w	r3, r3, #28
 8080654:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
 8080656:	2275      	movs	r2, #117	; 0x75

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);

			if (desired_settings & BME680_FILTER_SEL)
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 8080658:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 808065c:	f88d 2010 	strb.w	r2, [sp, #16]
			data_array[count] = data;
 8080660:	f88d 3018 	strb.w	r3, [sp, #24]
			count++;
		}

		/* Selecting heater control for the sensor */
		if (desired_settings & BME680_HCNTRL_SEL) {
 8080664:	06b3      	lsls	r3, r6, #26
 8080666:	d522      	bpl.n	80806ae <bme680_set_sensor_settings+0x1a8>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
 8080668:	f104 0246 	add.w	r2, r4, #70	; 0x46
 808066c:	2108      	movs	r1, #8
 808066e:	f104 003d 	add.w	r0, r4, #61	; 0x3d
 8080672:	f7ff fd7f 	bl	8080174 <boundary_check.isra.1.constprop.2>
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;

			if (rslt == BME680_OK)
 8080676:	b930      	cbnz	r0, 8080686 <bme680_set_sensor_settings+0x180>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8080678:	4623      	mov	r3, r4
 808067a:	2201      	movs	r2, #1
 808067c:	f10d 0107 	add.w	r1, sp, #7
 8080680:	2070      	movs	r0, #112	; 0x70
 8080682:	f7ff fd86 	bl	8080192 <bme680_get_regs>
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 8080686:	f89d 3007 	ldrb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 808068a:	2170      	movs	r1, #112	; 0x70
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 808068c:	f023 0208 	bic.w	r2, r3, #8
 8080690:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8080694:	f003 0308 	and.w	r3, r3, #8
 8080698:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
 808069a:	aa08      	add	r2, sp, #32
 808069c:	442a      	add	r2, r5
			data_array[count] = data;
			count++;
 808069e:	3501      	adds	r5, #1
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 80806a0:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 80806a4:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 80806a8:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
 80806ac:	b2ed      	uxtb	r5, r5
		}

		/* Selecting heater T,P oversampling for the sensor */
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
 80806ae:	07b1      	lsls	r1, r6, #30
 80806b0:	d033      	beq.n	808071a <bme680_set_sensor_settings+0x214>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
 80806b2:	f104 0246 	add.w	r2, r4, #70	; 0x46
 80806b6:	2105      	movs	r1, #5
 80806b8:	f104 0039 	add.w	r0, r4, #57	; 0x39
 80806bc:	f7ff fd5a 	bl	8080174 <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_T_P_MODE_ADDR;

			if (rslt == BME680_OK)
 80806c0:	b930      	cbnz	r0, 80806d0 <bme680_set_sensor_settings+0x1ca>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80806c2:	4623      	mov	r3, r4
 80806c4:	2201      	movs	r2, #1
 80806c6:	f10d 0107 	add.w	r1, sp, #7
 80806ca:	2074      	movs	r0, #116	; 0x74
 80806cc:	f7ff fd61 	bl	8080192 <bme680_get_regs>

			if (desired_settings & BME680_OST_SEL)
 80806d0:	07f2      	lsls	r2, r6, #31
 80806d2:	d509      	bpl.n	80806e8 <bme680_set_sensor_settings+0x1e2>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
 80806d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80806d8:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80806dc:	f003 031f 	and.w	r3, r3, #31
 80806e0:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80806e4:	f88d 3007 	strb.w	r3, [sp, #7]

			if (desired_settings & BME680_OSP_SEL)
 80806e8:	07b3      	lsls	r3, r6, #30
 80806ea:	d50b      	bpl.n	8080704 <bme680_set_sensor_settings+0x1fe>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
 80806ec:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 80806f0:	009b      	lsls	r3, r3, #2
 80806f2:	f003 021c 	and.w	r2, r3, #28
 80806f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80806fa:	f023 031c 	bic.w	r3, r3, #28
 80806fe:	4313      	orrs	r3, r2
 8080700:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr;
 8080704:	ab08      	add	r3, sp, #32
 8080706:	442b      	add	r3, r5
 8080708:	2274      	movs	r2, #116	; 0x74
 808070a:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 808070e:	f89d 2007 	ldrb.w	r2, [sp, #7]
			count++;
 8080712:	3501      	adds	r5, #1

			if (desired_settings & BME680_OSP_SEL)
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);

			reg_array[count] = reg_addr;
			data_array[count] = data;
 8080714:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
 8080718:	b2ed      	uxtb	r5, r5
		}

		/* Selecting humidity oversampling for the sensor */
		if (desired_settings & BME680_OSH_SEL) {
 808071a:	0771      	lsls	r1, r6, #29
 808071c:	d522      	bpl.n	8080764 <bme680_set_sensor_settings+0x25e>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
 808071e:	f104 0246 	add.w	r2, r4, #70	; 0x46
 8080722:	2105      	movs	r1, #5
 8080724:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8080728:	f7ff fd24 	bl	8080174 <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_OS_H_ADDR;

			if (rslt == BME680_OK)
 808072c:	b930      	cbnz	r0, 808073c <bme680_set_sensor_settings+0x236>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 808072e:	4623      	mov	r3, r4
 8080730:	2201      	movs	r2, #1
 8080732:	f10d 0107 	add.w	r1, sp, #7
 8080736:	2072      	movs	r0, #114	; 0x72
 8080738:	f7ff fd2b 	bl	8080192 <bme680_get_regs>
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 808073c:	f89d 3007 	ldrb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 8080740:	2172      	movs	r1, #114	; 0x72
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
			reg_addr = BME680_CONF_OS_H_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8080742:	f023 0207 	bic.w	r2, r3, #7
 8080746:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 808074a:	f003 0307 	and.w	r3, r3, #7
 808074e:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
 8080750:	aa08      	add	r2, sp, #32
 8080752:	442a      	add	r2, r5
			data_array[count] = data;
			count++;
 8080754:	3501      	adds	r5, #1
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
			reg_addr = BME680_CONF_OS_H_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8080756:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 808075a:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 808075e:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
 8080762:	b2ed      	uxtb	r5, r5
		}

		/* Selecting the runGas and NB conversion settings for the sensor */
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
 8080764:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8080768:	d03c      	beq.n	80807e4 <bme680_set_sensor_settings+0x2de>
 808076a:	f104 0846 	add.w	r8, r4, #70	; 0x46
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
 808076e:	4642      	mov	r2, r8
 8080770:	2101      	movs	r1, #1
 8080772:	f104 003e 	add.w	r0, r4, #62	; 0x3e
 8080776:	f7ff fcfd 	bl	8080174 <boundary_check.isra.1.constprop.2>
				BME680_RUN_GAS_ENABLE, dev);
			if (rslt == BME680_OK) {
 808077a:	b968      	cbnz	r0, 8080798 <bme680_set_sensor_settings+0x292>
				/* Validate boundary conditions */
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
 808077c:	4642      	mov	r2, r8
 808077e:	210a      	movs	r1, #10
 8080780:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8080784:	f7ff fcf6 	bl	8080174 <boundary_check.isra.1.constprop.2>
					BME680_NBCONV_MAX, dev);
			}

			reg_addr = BME680_CONF_ODR_RUN_GAS_NBC_ADDR;

			if (rslt == BME680_OK)
 8080788:	b930      	cbnz	r0, 8080798 <bme680_set_sensor_settings+0x292>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 808078a:	4623      	mov	r3, r4
 808078c:	2201      	movs	r2, #1
 808078e:	f10d 0107 	add.w	r1, sp, #7
 8080792:	2071      	movs	r0, #113	; 0x71
 8080794:	f7ff fcfd 	bl	8080192 <bme680_get_regs>

			if (desired_settings & BME680_RUN_GAS_SEL)
 8080798:	0672      	lsls	r2, r6, #25
 808079a:	d50b      	bpl.n	80807b4 <bme680_set_sensor_settings+0x2ae>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
 808079c:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80807a0:	011b      	lsls	r3, r3, #4
 80807a2:	f003 0210 	and.w	r2, r3, #16
 80807a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80807aa:	f023 0310 	bic.w	r3, r3, #16
 80807ae:	4313      	orrs	r3, r2
 80807b0:	f88d 3007 	strb.w	r3, [sp, #7]

			if (desired_settings & BME680_NBCONV_SEL)
 80807b4:	0633      	lsls	r3, r6, #24
 80807b6:	d50a      	bpl.n	80807ce <bme680_set_sensor_settings+0x2c8>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
 80807b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80807bc:	f023 020f 	bic.w	r2, r3, #15
 80807c0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80807c4:	f003 030f 	and.w	r3, r3, #15
 80807c8:	4313      	orrs	r3, r2
 80807ca:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 80807ce:	ab08      	add	r3, sp, #32
 80807d0:	442b      	add	r3, r5
 80807d2:	2271      	movs	r2, #113	; 0x71
 80807d4:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 80807d8:	f89d 2007 	ldrb.w	r2, [sp, #7]
			count++;
 80807dc:	3501      	adds	r5, #1

			if (desired_settings & BME680_NBCONV_SEL)
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);

			reg_array[count] = reg_addr; /* Append configuration */
			data_array[count] = data;
 80807de:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
 80807e2:	b2ed      	uxtb	r5, r5
		}

		if (rslt == BME680_OK)
 80807e4:	b928      	cbnz	r0, 80807f2 <bme680_set_sensor_settings+0x2ec>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
 80807e6:	4623      	mov	r3, r4
 80807e8:	462a      	mov	r2, r5
 80807ea:	a906      	add	r1, sp, #24
 80807ec:	a804      	add	r0, sp, #16
 80807ee:	f7ff fcf4 	bl	80801da <bme680_set_regs>

		/* Restore previous intended power mode */
		dev->power_mode = intended_power_mode;
 80807f2:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
	}

	return rslt;
}
 80807f6:	b008      	add	sp, #32
 80807f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080807fc <bme680_get_profile_dur>:

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
 80807fc:	b513      	push	{r0, r1, r4, lr}
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80807fe:	4b18      	ldr	r3, [pc, #96]	; (8080860 <bme680_get_profile_dur+0x64>)

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
 8080800:	4604      	mov	r4, r0
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 8080802:	6818      	ldr	r0, [r3, #0]
 8080804:	889b      	ldrh	r3, [r3, #4]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 8080806:	aa02      	add	r2, sp, #8
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 8080808:	f8ad 3004 	strh.w	r3, [sp, #4]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 808080c:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 8080810:	9000      	str	r0, [sp, #0]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 8080812:	4413      	add	r3, r2
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 8080814:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8080818:	a802      	add	r0, sp, #8
 808081a:	4402      	add	r2, r0
 808081c:	f812 2c08 	ldrb.w	r2, [r2, #-8]
{
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 8080820:	f813 3c08 	ldrb.w	r3, [r3, #-8]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 8080824:	4413      	add	r3, r2
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 8080826:	f891 2038 	ldrb.w	r2, [r1, #56]	; 0x38
 808082a:	4402      	add	r2, r0

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
 808082c:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8080830:	4413      	add	r3, r2
 8080832:	f240 72ab 	movw	r2, #1963	; 0x7ab
 8080836:	4353      	muls	r3, r2
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 8080838:	f503 5395 	add.w	r3, r3, #4768	; 0x12a0
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 808083c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 8080840:	3319      	adds	r3, #25
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 8080842:	fbb3 f3f2 	udiv	r3, r3, r2

	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */

	*duration = (uint16_t) tph_dur;
 8080846:	3301      	adds	r3, #1
 8080848:	b29b      	uxth	r3, r3
 808084a:	8023      	strh	r3, [r4, #0]

	/* Get the gas duration only when the run gas is enabled */
	if (dev->gas_sett.run_gas) {
 808084c:	f891 203e 	ldrb.w	r2, [r1, #62]	; 0x3e
 8080850:	b11a      	cbz	r2, 808085a <bme680_get_profile_dur+0x5e>
		/* The remaining time should be used for heating */
		*duration += dev->gas_sett.heatr_dur;
 8080852:	f8b1 2042 	ldrh.w	r2, [r1, #66]	; 0x42
 8080856:	4413      	add	r3, r2
 8080858:	8023      	strh	r3, [r4, #0]
	}
}
 808085a:	b002      	add	sp, #8
 808085c:	bd10      	pop	{r4, pc}
 808085e:	bf00      	nop
 8080860:	08090728 	.word	0x08090728

08080864 <bme680_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 8080864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080868:	4680      	mov	r8, r0
 808086a:	b089      	sub	sp, #36	; 0x24
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 808086c:	4608      	mov	r0, r1
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 808086e:	460c      	mov	r4, r1
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080870:	f7ff fc21 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080874:	4605      	mov	r5, r0
 8080876:	2800      	cmp	r0, #0
 8080878:	f040 8167 	bne.w	8080b4a <bme680_get_sensor_data+0x2e6>
 * @brief This internal API is used to calculate the field data of sensor.
 */
static int8_t read_field_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
	int8_t rslt;
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 808087c:	af04      	add	r7, sp, #16
 808087e:	4601      	mov	r1, r0
 8080880:	220f      	movs	r2, #15
 8080882:	4638      	mov	r0, r7
 8080884:	f00c fffa 	bl	808d87c <memset>
	uint16_t adc_hum;
	uint16_t adc_gas_res;
	uint8_t tries = 10;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080888:	4620      	mov	r0, r4
 808088a:	f7ff fc14 	bl	80800b6 <null_ptr_check>
 808088e:	4605      	mov	r5, r0
 8080890:	260a      	movs	r6, #10
	do {
		if (rslt == BME680_OK) {
 8080892:	2d00      	cmp	r5, #0
 8080894:	f040 8153 	bne.w	8080b3e <bme680_get_sensor_data+0x2da>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 8080898:	4623      	mov	r3, r4
 808089a:	220f      	movs	r2, #15
 808089c:	4639      	mov	r1, r7
 808089e:	201d      	movs	r0, #29
 80808a0:	f7ff fc77 	bl	8080192 <bme680_get_regs>
 80808a4:	4605      	mov	r5, r0
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
 80808a6:	f89d 0010 	ldrb.w	r0, [sp, #16]
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80808aa:	f89d e01e 	ldrb.w	lr, [sp, #30]
		if (rslt == BME680_OK) {
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 80808ae:	f000 030f 	and.w	r3, r0, #15
 80808b2:	f888 3001 	strb.w	r3, [r8, #1]
			data->meas_index = buff[1];
 80808b6:	f89d 3011 	ldrb.w	r3, [sp, #17]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80808ba:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
			data->meas_index = buff[1];
 80808be:	f888 3002 	strb.w	r3, [r8, #2]

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 80808c2:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80808c6:	f89d 9013 	ldrb.w	r9, [sp, #19]
 80808ca:	9300      	str	r3, [sp, #0]
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 80808cc:	f89d 3018 	ldrb.w	r3, [sp, #24]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
			data->meas_index = buff[1];

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
 80808d0:	f89d c014 	ldrb.w	ip, [sp, #20]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 80808d4:	9301      	str	r3, [sp, #4]
 80808d6:	f89d 3019 	ldrb.w	r3, [sp, #25]
			data->meas_index = buff[1];

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80808da:	f89d b015 	ldrb.w	fp, [sp, #21]
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 80808de:	9302      	str	r3, [sp, #8]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80808e0:	f89d 301d 	ldrb.w	r3, [sp, #29]
			data->meas_index = buff[1];

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80808e4:	f89d 1016 	ldrb.w	r1, [sp, #22]
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80808e8:	9303      	str	r3, [sp, #12]
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 80808ea:	fa4f f38e 	sxtb.w	r3, lr
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80808ee:	f003 0a20 	and.w	sl, r3, #32
 80808f2:	ea40 000a 	orr.w	r0, r0, sl
 80808f6:	f003 0310 	and.w	r3, r3, #16
 80808fa:	4318      	orrs	r0, r3
 80808fc:	b240      	sxtb	r0, r0

			if (data->status & BME680_NEW_DATA_MSK) {
 80808fe:	2800      	cmp	r0, #0

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
 8080900:	f89d 2017 	ldrb.w	r2, [sp, #23]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 8080904:	f888 0000 	strb.w	r0, [r8]

			if (data->status & BME680_NEW_DATA_MSK) {
 8080908:	f280 8116 	bge.w	8080b38 <bme680_get_sensor_data+0x2d4>
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 808090c:	0912      	lsrs	r2, r2, #4
 808090e:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
 8080912:	ea41 3b0b 	orr.w	fp, r1, fp, lsl #12
 8080916:	8ae1      	ldrh	r1, [r4, #22]
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 8080918:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 808091c:	0049      	lsls	r1, r1, #1
 808091e:	ebc1 01db 	rsb	r1, r1, fp, lsr #3
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 8080922:	460a      	mov	r2, r1
 8080924:	17cb      	asrs	r3, r1, #31
 8080926:	105b      	asrs	r3, r3, #1
 8080928:	ea4f 0232 	mov.w	r2, r2, rrx
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 808092c:	fb02 f603 	mul.w	r6, r2, r3
 8080930:	fba2 2302 	umull	r2, r3, r2, r2
 8080934:	ea4f 3a12 	mov.w	sl, r2, lsr #12
 8080938:	f994 201a 	ldrsb.w	r2, [r4, #26]
 808093c:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8080940:	ea4a 5a03 	orr.w	sl, sl, r3, lsl #20
 8080944:	ea4f 3b23 	mov.w	fp, r3, asr #12
 8080948:	0113      	lsls	r3, r2, #4
 808094a:	17df      	asrs	r7, r3, #31
 808094c:	fb0a f607 	mul.w	r6, sl, r7
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8080950:	fb80 0101 	smull	r0, r1, r0, r1
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080954:	fb03 660b 	mla	r6, r3, fp, r6
 8080958:	fbaa 2303 	umull	r2, r3, sl, r3
	dev->calib.t_fine = (int32_t) (var2 + var3);
 808095c:	0ac0      	lsrs	r0, r0, #11
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 808095e:	4433      	add	r3, r6
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8080960:	0b92      	lsrs	r2, r2, #14
 8080962:	ea40 5041 	orr.w	r0, r0, r1, lsl #21
 8080966:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 808096a:	1883      	adds	r3, r0, r2
 808096c:	6323      	str	r3, [r4, #48]	; 0x30

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
 808096e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8080972:	3380      	adds	r3, #128	; 0x80
 8080974:	121b      	asrs	r3, r3, #8
 8080976:	f8a8 3004 	strh.w	r3, [r8, #4]
	int32_t var2 = 0;
	int32_t var3 = 0;
	int32_t var4 = 0;
	int32_t pressure_comp = 0;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 808097a:	6b23      	ldr	r3, [r4, #48]	; 0x30
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 808097c:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
	int32_t var2 = 0;
	int32_t var3 = 0;
	int32_t var4 = 0;
	int32_t pressure_comp = 0;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8080980:	105b      	asrs	r3, r3, #1
 8080982:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8080986:	109a      	asrs	r2, r3, #2
 8080988:	4352      	muls	r2, r2
 808098a:	12d1      	asrs	r1, r2, #11
 808098c:	4348      	muls	r0, r1
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 808098e:	f9b4 1024 	ldrsh.w	r1, [r4, #36]	; 0x24
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8080992:	1352      	asrs	r2, r2, #13

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 8080994:	4359      	muls	r1, r3
 8080996:	0049      	lsls	r1, r1, #1
 8080998:	eb01 01a0 	add.w	r1, r1, r0, asr #2
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 808099c:	f9b4 001e 	ldrsh.w	r0, [r4, #30]
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
	pressure_comp = 1048576 - pres_adc;
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
	var4 = (1 << 31);
	if (pressure_comp >= var4)
		pressure_comp = ((pressure_comp / (uint32_t)var1) << 1);
 80809a0:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 80809a4:	4343      	muls	r3, r0
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 80809a6:	f994 0020 	ldrsb.w	r0, [r4, #32]
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
	pressure_comp = 1048576 - pres_adc;
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
	var4 = (1 << 31);
	if (pressure_comp >= var4)
		pressure_comp = ((pressure_comp / (uint32_t)var1) << 1);
 80809aa:	ea4c 1909 	orr.w	r9, ip, r9, lsl #4
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 80809ae:	0140      	lsls	r0, r0, #5
 80809b0:	4342      	muls	r2, r0
 80809b2:	10d2      	asrs	r2, r2, #3
 80809b4:	eb02 0363 	add.w	r3, r2, r3, asr #1
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
	var1 = var1 >> 18;
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 80809b8:	149b      	asrs	r3, r3, #18
 80809ba:	8ba2      	ldrh	r2, [r4, #28]
 80809bc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80809c0:	4353      	muls	r3, r2
	pressure_comp = 1048576 - pres_adc;
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
	var4 = (1 << 31);
	if (pressure_comp >= var4)
		pressure_comp = ((pressure_comp / (uint32_t)var1) << 1);
 80809c2:	9a00      	ldr	r2, [sp, #0]
 80809c4:	13db      	asrs	r3, r3, #15
 80809c6:	ea49 3902 	orr.w	r9, r9, r2, lsl #12
 80809ca:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
 80809ce:	f5c9 1980 	rsb	r9, r9, #1048576	; 0x100000
 80809d2:	0412      	lsls	r2, r2, #16
 80809d4:	eb02 01a1 	add.w	r1, r2, r1, asr #2
 80809d8:	f640 4235 	movw	r2, #3125	; 0xc35
 80809dc:	eba9 3121 	sub.w	r1, r9, r1, asr #12
 80809e0:	4351      	muls	r1, r2
 80809e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80809e6:	005b      	lsls	r3, r3, #1
	else
		pressure_comp = ((pressure_comp << 1) / (uint32_t)var1);
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
		(pressure_comp >> 3)) >> 13)) >> 12;
 80809e8:	10d9      	asrs	r1, r3, #3
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 80809ea:	4349      	muls	r1, r1
 80809ec:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
 80809f0:	f9b4 0028 	ldrsh.w	r0, [r4, #40]	; 0x28
 80809f4:	1349      	asrs	r1, r1, #13
 80809f6:	434a      	muls	r2, r1
 80809f8:	1099      	asrs	r1, r3, #2
 80809fa:	4341      	muls	r1, r0
		pressure_comp = ((pressure_comp << 1) / (uint32_t)var1);
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
		(pressure_comp >> 3)) >> 13)) >> 12;
	var2 = ((int32_t)(pressure_comp >> 2) *
		(int32_t)dev->calib.par_p8) >> 13;
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 80809fc:	121e      	asrs	r6, r3, #8
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 80809fe:	1349      	asrs	r1, r1, #13
 8080a00:	eb01 3122 	add.w	r1, r1, r2, asr #12
 8080a04:	fb06 f206 	mul.w	r2, r6, r6
 8080a08:	4356      	muls	r6, r2
 8080a0a:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8080a0e:	4372      	muls	r2, r6
 8080a10:	eb01 4262 	add.w	r2, r1, r2, asr #17
 8080a14:	f994 1027 	ldrsb.w	r1, [r4, #39]	; 0x27
 8080a18:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
 8080a1c:	eb03 1322 	add.w	r3, r3, r2, asr #4
 8080a20:	f8c8 3008 	str.w	r3, [r8, #8]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 8080a24:	6b23      	ldr	r3, [r4, #48]	; 0x30
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
	var2 = ((int32_t) dev->calib.par_h2
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
 8080a26:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 8080a2a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8080a2e:	3380      	adds	r3, #128	; 0x80
 8080a30:	121b      	asrs	r3, r3, #8
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
	var2 = ((int32_t) dev->calib.par_h2
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
 8080a32:	4359      	muls	r1, r3
 8080a34:	2264      	movs	r2, #100	; 0x64
 8080a36:	fb91 f1f2 	sdiv	r1, r1, r2
 8080a3a:	f994 000d 	ldrsb.w	r0, [r4, #13]
 8080a3e:	4359      	muls	r1, r3
 8080a40:	4358      	muls	r0, r3
 8080a42:	1189      	asrs	r1, r1, #6
 8080a44:	fb90 f0f2 	sdiv	r0, r0, r2
 8080a48:	fb91 f1f2 	sdiv	r1, r1, r2
 8080a4c:	8967      	ldrh	r7, [r4, #10]
 8080a4e:	4401      	add	r1, r0
 8080a50:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8080a54:	4379      	muls	r1, r7
 8080a56:	9801      	ldr	r0, [sp, #4]
 8080a58:	128f      	asrs	r7, r1, #10
 8080a5a:	9902      	ldr	r1, [sp, #8]
 8080a5c:	8926      	ldrh	r6, [r4, #8]
 8080a5e:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 8080a62:	f994 100c 	ldrsb.w	r1, [r4, #12]
 8080a66:	eba0 1606 	sub.w	r6, r0, r6, lsl #4
 8080a6a:	4359      	muls	r1, r3
 8080a6c:	fb91 f1f2 	sdiv	r1, r1, r2
 8080a70:	eba6 0061 	sub.w	r0, r6, r1, asr #1
 8080a74:	fb00 f107 	mul.w	r1, r0, r7
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080a78:	f994 0010 	ldrsb.w	r0, [r4, #16]
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
 8080a7c:	f00e 060f 	and.w	r6, lr, #15
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080a80:	4343      	muls	r3, r0
 8080a82:	fb93 f2f2 	sdiv	r2, r3, r2
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080a86:	f240 503c 	movw	r0, #1340	; 0x53c
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080a8a:	7be3      	ldrb	r3, [r4, #15]
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080a8c:	ea4f 1e9e 	mov.w	lr, lr, lsr #6
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080a90:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8080a94:	138b      	asrs	r3, r1, #14
	var6 = (var4 * var5) >> 1;
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8080a96:	435b      	muls	r3, r3
 8080a98:	1112      	asrs	r2, r2, #4
 8080a9a:	129b      	asrs	r3, r3, #10
 8080a9c:	4353      	muls	r3, r2
 8080a9e:	eb01 0363 	add.w	r3, r1, r3, asr #1
 8080aa2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8080aa6:	129b      	asrs	r3, r3, #10
 8080aa8:	4353      	muls	r3, r2
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
 8080aaa:	4a2a      	ldr	r2, [pc, #168]	; (8080b54 <bme680_get_sensor_data+0x2f0>)
	var3 = var1 * var2;
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
	var6 = (var4 * var5) >> 1;
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8080aac:	131b      	asrs	r3, r3, #12
 8080aae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
 8080ab2:	4293      	cmp	r3, r2
 8080ab4:	bfd4      	ite	le
 8080ab6:	f8c8 300c 	strle.w	r3, [r8, #12]
 8080aba:	f8c8 200c 	strgt.w	r2, [r8, #12]
 8080abe:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080ac2:	2205      	movs	r2, #5
 8080ac4:	2100      	movs	r1, #0
 8080ac6:	fbc3 0102 	smlal	r0, r1, r3, r2
		((int64_t) lookupTable1[gas_range])) >> 16;
 8080aca:	4b23      	ldr	r3, [pc, #140]	; (8080b58 <bme680_get_sensor_data+0x2f4>)
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080acc:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 8080ad0:	fba0 2307 	umull	r2, r3, r0, r7
 8080ad4:	fb07 3301 	mla	r3, r7, r1, r3
 8080ad8:	0c10      	lsrs	r0, r2, #16
 8080ada:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8080ade:	1419      	asrs	r1, r3, #16
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080ae0:	9b03      	ldr	r3, [sp, #12]
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 8080ae2:	4f1e      	ldr	r7, [pc, #120]	; (8080b5c <bme680_get_sensor_data+0x2f8>)
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080ae4:	ea4e 0e83 	orr.w	lr, lr, r3, lsl #2
 8080ae8:	ea4f 32ce 	mov.w	r2, lr, lsl #15

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 8080aec:	f857 e026 	ldr.w	lr, [r7, r6, lsl #2]
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080af0:	f112 427f 	adds.w	r2, r2, #4278190080	; 0xff000000

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 8080af4:	fbae 6700 	umull	r6, r7, lr, r0
 8080af8:	fb0e 7701 	mla	r7, lr, r1, r7
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080afc:	f04f 0300 	mov.w	r3, #0
 8080b00:	f143 33ff 	adc.w	r3, r3, #4294967295
 8080b04:	1812      	adds	r2, r2, r0
 8080b06:	414b      	adcs	r3, r1

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 8080b08:	0a70      	lsrs	r0, r6, #9
 8080b0a:	ea40 50c7 	orr.w	r0, r0, r7, lsl #23
 8080b0e:	1279      	asrs	r1, r7, #9
 8080b10:	105f      	asrs	r7, r3, #1
 8080b12:	ea4f 0632 	mov.w	r6, r2, rrx
 8080b16:	1980      	adds	r0, r0, r6
 8080b18:	4179      	adcs	r1, r7
 8080b1a:	f00c fb2f 	bl	808d17c <__aeabi_ldivmod>
 8080b1e:	f8c8 0010 	str.w	r0, [r8, #16]
	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		/* Reading the sensor data in forced mode only */
		rslt = read_field_data(data, dev);
		if (rslt == BME680_OK) {
 8080b22:	b995      	cbnz	r5, 8080b4a <bme680_get_sensor_data+0x2e6>
			if (data->status & BME680_NEW_DATA_MSK)
 8080b24:	f998 3000 	ldrsb.w	r3, [r8]
 8080b28:	2b00      	cmp	r3, #0
				dev->new_fields = 1;
 8080b2a:	bfba      	itte	lt
 8080b2c:	2301      	movlt	r3, #1
 8080b2e:	f884 3045 	strblt.w	r3, [r4, #69]	; 0x45
			else
				dev->new_fields = 0;
 8080b32:	f884 5045 	strbge.w	r5, [r4, #69]	; 0x45
 8080b36:	e008      	b.n	8080b4a <bme680_get_sensor_data+0x2e6>
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
				break;
			}
			/* Delay to poll the data */
			dev->delay_ms(BME680_POLL_PERIOD_MS);
 8080b38:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8080b3a:	200a      	movs	r0, #10
 8080b3c:	4798      	blx	r3
 8080b3e:	3e01      	subs	r6, #1
		}
		tries--;
	} while (tries);
 8080b40:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8080b44:	f47f aea5 	bne.w	8080892 <bme680_get_sensor_data+0x2e>

	if (!tries)
		rslt = BME680_W_NO_NEW_DATA;
 8080b48:	2502      	movs	r5, #2
				dev->new_fields = 0;
		}
	}

	return rslt;
}
 8080b4a:	4628      	mov	r0, r5
 8080b4c:	b009      	add	sp, #36	; 0x24
 8080b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8080b52:	bf00      	nop
 8080b54:	000186a0 	.word	0x000186a0
 8080b58:	20000000 	.word	0x20000000
 8080b5c:	20000040 	.word	0x20000040

08080b60 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 8080b60:	4770      	bx	lr

08080b62 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
 8080b62:	7c03      	ldrb	r3, [r0, #16]
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
 8080b64:	4602      	mov	r2, r0
 8080b66:	f003 0308 	and.w	r3, r3, #8
 8080b6a:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8080b6e:	b12b      	cbz	r3, 8080b7c <_ZN4File9availableEv+0x1a>
 8080b70:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8080b72:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
 8080b74:	1a18      	subs	r0, r3, r0
 8080b76:	bf48      	it	mi
 8080b78:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
 8080b7c:	4770      	bx	lr

08080b7e <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 8080b7e:	4770      	bx	lr

08080b80 <_ZN4FileD1Ev>:
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
#if ARDUINO_FILE_USES_STREAM
class File : public FatFile, public Stream {
 8080b80:	4770      	bx	lr

08080b82 <_ZN6SdFileD0Ev>:
 8080b82:	b510      	push	{r4, lr}
 8080b84:	4604      	mov	r4, r0
 8080b86:	212c      	movs	r1, #44	; 0x2c
 8080b88:	f00b f9b1 	bl	808beee <_ZdlPvj>
 8080b8c:	4620      	mov	r0, r4
 8080b8e:	bd10      	pop	{r4, pc}

08080b90 <_ZN4FileD0Ev>:
 8080b90:	b510      	push	{r4, lr}
 8080b92:	4604      	mov	r4, r0
 8080b94:	2134      	movs	r1, #52	; 0x34
 8080b96:	f00b f9aa 	bl	808beee <_ZdlPvj>
 8080b9a:	4620      	mov	r0, r4
 8080b9c:	bd10      	pop	{r4, pc}

08080b9e <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
 8080b9e:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 8080ba0:	2201      	movs	r2, #1
 8080ba2:	f10d 0107 	add.w	r1, sp, #7
 8080ba6:	3010      	adds	r0, #16
 8080ba8:	f007 f9b9 	bl	8087f1e <_ZN7FatFile4readEPvj>
 8080bac:	2801      	cmp	r0, #1
 8080bae:	bf0c      	ite	eq
 8080bb0:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
 8080bb4:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
 8080bb8:	b003      	add	sp, #12
 8080bba:	f85d fb04 	ldr.w	pc, [sp], #4

08080bbe <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
 8080bbe:	3010      	adds	r0, #16
 8080bc0:	f007 bb32 	b.w	8088228 <_ZN7FatFile4syncEv>

08080bc4 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
 8080bc4:	3010      	adds	r0, #16
 8080bc6:	f007 ba5e 	b.w	8088086 <_ZN7FatFile4peekEv>

08080bca <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
 8080bca:	3010      	adds	r0, #16
 8080bcc:	f007 bbb8 	b.w	8088340 <_ZN7FatFile5writeEPKvj>

08080bd0 <_ZN9PrintFile5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
 8080bd0:	3008      	adds	r0, #8
 8080bd2:	f007 bbb5 	b.w	8088340 <_ZN7FatFile5writeEPKvj>

08080bd6 <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
 8080bd6:	b507      	push	{r0, r1, r2, lr}
 8080bd8:	ab02      	add	r3, sp, #8
 8080bda:	f803 1d01 	strb.w	r1, [r3, #-1]!
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
 8080bde:	2201      	movs	r2, #1
 8080be0:	4619      	mov	r1, r3
 8080be2:	3010      	adds	r0, #16
 8080be4:	f007 fbac 	bl	8088340 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
 8080be8:	b003      	add	sp, #12
 8080bea:	f85d fb04 	ldr.w	pc, [sp], #4

08080bee <_ZN9SdFatBase11writeBlocksEmPKhj>:
  }
  bool readBlocks(uint32_t block, uint8_t* dst, size_t n) {
    return m_sdCard.readBlocks(block, dst, n);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t n) {
    return m_sdCard.writeBlocks(block, src, n);
 8080bee:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080bf2:	f007 b85c 	b.w	8087cae <_ZN9SdSpiCard11writeBlocksEmPKhj>

08080bf6 <_ZN9SdFatBase10readBlocksEmPhj>:
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_sdCard.writeBlock(block, src);
  }
  bool readBlocks(uint32_t block, uint8_t* dst, size_t n) {
    return m_sdCard.readBlocks(block, dst, n);
 8080bf6:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080bfa:	f006 bf90 	b.w	8087b1e <_ZN9SdSpiCard10readBlocksEmPhj>

08080bfe <_ZN9SdFatBase10writeBlockEmPKh>:

  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_sdCard.readBlock(block, dst);
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_sdCard.writeBlock(block, src);
 8080bfe:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080c02:	f006 bfcf 	b.w	8087ba4 <_ZN9SdSpiCard10writeBlockEmPKh>

08080c06 <_ZN9SdFatBase9readBlockEmPh>:
#endif  // defined(ARDUINO) || defined(DOXYGEN)

 private:

  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_sdCard.readBlock(block, dst);
 8080c06:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080c0a:	f006 bf40 	b.w	8087a8e <_ZN9SdSpiCard9readBlockEmPh>

08080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>:
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
 8080c0e:	b510      	push	{r4, lr}
 8080c10:	460c      	mov	r4, r1
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 8080c12:	2204      	movs	r2, #4
 8080c14:	f008 fc8a 	bl	808952c <HAL_EEPROM_Put>
        return t;
    }
 8080c18:	4620      	mov	r0, r4
 8080c1a:	bd10      	pop	{r4, pc}

08080c1c <_Z20remoteReadStoredVars6String>:
        return -1;
    }

}

int remoteReadStoredVars(String mem_address){
 8080c1c:	b513      	push	{r0, r1, r4, lr}
    uint16_t tempValue = 0;
 8080c1e:	2300      	movs	r3, #0
 8080c20:	f8ad 3006 	strh.w	r3, [sp, #6]
    int numerical_mem_address = mem_address.toInt();
 8080c24:	f009 fc14 	bl	808a450 <_ZNK6String5toIntEv>
    if(numerical_mem_address >= 0 && numerical_mem_address <= MAX_MEM_ADDRESS){
 8080c28:	2890      	cmp	r0, #144	; 0x90

}

int remoteReadStoredVars(String mem_address){
    uint16_t tempValue = 0;
    int numerical_mem_address = mem_address.toInt();
 8080c2a:	4604      	mov	r4, r0
    if(numerical_mem_address >= 0 && numerical_mem_address <= MAX_MEM_ADDRESS){
 8080c2c:	d80a      	bhi.n	8080c44 <_Z20remoteReadStoredVars6String+0x28>
        EEPROM.get(numerical_mem_address, tempValue);
 8080c2e:	f00b f8ed 	bl	808be0c <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 8080c32:	4620      	mov	r0, r4
 8080c34:	2202      	movs	r2, #2
 8080c36:	f10d 0106 	add.w	r1, sp, #6
 8080c3a:	f008 fc6f 	bl	808951c <HAL_EEPROM_Get>
        return tempValue;
 8080c3e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8080c42:	e001      	b.n	8080c48 <_Z20remoteReadStoredVars6String+0x2c>
    }else{
        return -1;
 8080c44:	f04f 30ff 	mov.w	r0, #4294967295
    }
}
 8080c48:	b002      	add	sp, #8
 8080c4a:	bd10      	pop	{r4, pc}

08080c4c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>:
    EEPtr begin()                        { return 0x00; }
    EEPtr end()                          { return length(); } //Standards requires this to be the item after the last valid entry. The returned pointer is invalid.
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
 8080c4c:	b510      	push	{r4, lr}
 8080c4e:	460c      	mov	r4, r1
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 8080c50:	2204      	movs	r2, #4
 8080c52:	f008 fc63 	bl	808951c <HAL_EEPROM_Get>
        return t;
    }
 8080c56:	4620      	mov	r0, r4
 8080c58:	bd10      	pop	{r4, pc}

08080c5a <_ZN9PrintFile5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
 8080c5a:	b507      	push	{r0, r1, r2, lr}
 8080c5c:	ab02      	add	r3, sp, #8
 8080c5e:	f803 1d01 	strb.w	r1, [r3, #-1]!
 8080c62:	2201      	movs	r2, #1
 8080c64:	4619      	mov	r1, r3
 8080c66:	3008      	adds	r0, #8
 8080c68:	f007 fb6a 	bl	8088340 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
 8080c6c:	b003      	add	sp, #12
 8080c6e:	f85d fb04 	ldr.w	pc, [sp], #4

08080c72 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 8080c72:	2300      	movs	r3, #0
 8080c74:	461a      	mov	r2, r3
 8080c76:	4619      	mov	r1, r3
 8080c78:	6840      	ldr	r0, [r0, #4]
 8080c7a:	f008 be05 	b.w	8089888 <network_off>

08080c7e <_ZN11USARTSerialD0Ev>:
 8080c7e:	b510      	push	{r4, lr}
 8080c80:	4604      	mov	r4, r0
 8080c82:	2114      	movs	r1, #20
 8080c84:	f00b f933 	bl	808beee <_ZdlPvj>
 8080c88:	4620      	mov	r0, r4
 8080c8a:	bd10      	pop	{r4, pc}

08080c8c <_ZN5spark10JSONWriter4nameEPKc>:
// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
}

inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
 8080c8c:	b538      	push	{r3, r4, r5, lr}
 8080c8e:	4605      	mov	r5, r0
    return this->name(name, strlen(name));
 8080c90:	4608      	mov	r0, r1
// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
}

inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
 8080c92:	460c      	mov	r4, r1
    return this->name(name, strlen(name));
 8080c94:	f00d fb72 	bl	808e37c <strlen>
 8080c98:	4621      	mov	r1, r4
 8080c9a:	4602      	mov	r2, r0
 8080c9c:	4628      	mov	r0, r5
}
 8080c9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
}

inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
    return this->name(name, strlen(name));
 8080ca2:	f00a bfef 	b.w	808bc84 <_ZN5spark10JSONWriter4nameEPKcj>

08080ca6 <_ZN5spark10JSONWriter5valueERK6String>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
}

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
 8080ca6:	688a      	ldr	r2, [r1, #8]
 8080ca8:	6809      	ldr	r1, [r1, #0]
 8080caa:	f00a bffa 	b.w	808bca2 <_ZN5spark10JSONWriter5valueEPKcj>

08080cae <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 8080cae:	b40e      	push	{r1, r2, r3}
 8080cb0:	b500      	push	{lr}
 8080cb2:	b08c      	sub	sp, #48	; 0x30
 8080cb4:	aa0d      	add	r2, sp, #52	; 0x34
 8080cb6:	f852 1b04 	ldr.w	r1, [r2], #4
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 8080cba:	2320      	movs	r3, #32
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080cbc:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
 8080cc0:	9203      	str	r2, [sp, #12]
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 8080cc2:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080cc4:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 8080cc6:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080cc8:	aa04      	add	r2, sp, #16
 8080cca:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 8080ccc:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080cce:	f008 fd45 	bl	808975c <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
 8080cd2:	b00c      	add	sp, #48	; 0x30
 8080cd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8080cd8:	b003      	add	sp, #12
 8080cda:	4770      	bx	lr

08080cdc <_Z22__fetch_global_Serial4v>:
// instantiate Serial4
static Ring_Buffer serial4_rx_buffer;
static Ring_Buffer serial4_tx_buffer;

USARTSerial& __fetch_global_Serial4()
{
 8080cdc:	b510      	push	{r4, lr}
	static USARTSerial serial4(HAL_USART_SERIAL4, &serial4_rx_buffer, &serial4_tx_buffer);
 8080cde:	4c0c      	ldr	r4, [pc, #48]	; (8080d10 <_Z22__fetch_global_Serial4v+0x34>)
 8080ce0:	6823      	ldr	r3, [r4, #0]
 8080ce2:	07db      	lsls	r3, r3, #31
 8080ce4:	d411      	bmi.n	8080d0a <_Z22__fetch_global_Serial4v+0x2e>
 8080ce6:	4620      	mov	r0, r4
 8080ce8:	f7ff f9dd 	bl	80800a6 <__cxa_guard_acquire>
 8080cec:	b168      	cbz	r0, 8080d0a <_Z22__fetch_global_Serial4v+0x2e>
 8080cee:	4a09      	ldr	r2, [pc, #36]	; (8080d14 <_Z22__fetch_global_Serial4v+0x38>)
 8080cf0:	2103      	movs	r1, #3
 8080cf2:	4b09      	ldr	r3, [pc, #36]	; (8080d18 <_Z22__fetch_global_Serial4v+0x3c>)
 8080cf4:	4809      	ldr	r0, [pc, #36]	; (8080d1c <_Z22__fetch_global_Serial4v+0x40>)
 8080cf6:	f00a fdd3 	bl	808b8a0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8080cfa:	4620      	mov	r0, r4
 8080cfc:	f7ff f9d8 	bl	80800b0 <__cxa_guard_release>
 8080d00:	4a07      	ldr	r2, [pc, #28]	; (8080d20 <_Z22__fetch_global_Serial4v+0x44>)
 8080d02:	4908      	ldr	r1, [pc, #32]	; (8080d24 <_Z22__fetch_global_Serial4v+0x48>)
 8080d04:	4805      	ldr	r0, [pc, #20]	; (8080d1c <_Z22__fetch_global_Serial4v+0x40>)
 8080d06:	f00b f8ed 	bl	808bee4 <__aeabi_atexit>
	return serial4;
}
 8080d0a:	4804      	ldr	r0, [pc, #16]	; (8080d1c <_Z22__fetch_global_Serial4v+0x40>)
 8080d0c:	bd10      	pop	{r4, pc}
 8080d0e:	bf00      	nop
 8080d10:	20000a2c 	.word	0x20000a2c
 8080d14:	200009a4 	.word	0x200009a4
 8080d18:	20000a34 	.word	0x20000a34
 8080d1c:	200008a4 	.word	0x200008a4
 8080d20:	200001d0 	.word	0x200001d0
 8080d24:	08080b61 	.word	0x08080b61

08080d28 <_Z15serialEventRun4v>:

void serialEventRun4()
{
 8080d28:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial4, serialEvent4);
 8080d2a:	f7ff ffd7 	bl	8080cdc <_Z22__fetch_global_Serial4v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 8080d2e:	4b07      	ldr	r3, [pc, #28]	; (8080d4c <_Z15serialEventRun4v+0x24>)
 8080d30:	4604      	mov	r4, r0
 8080d32:	b153      	cbz	r3, 8080d4a <_Z15serialEventRun4v+0x22>
 8080d34:	f00a fdd1 	bl	808b8da <_ZN11USARTSerial9isEnabledEv>
 8080d38:	b138      	cbz	r0, 8080d4a <_Z15serialEventRun4v+0x22>
 8080d3a:	6823      	ldr	r3, [r4, #0]
 8080d3c:	4620      	mov	r0, r4
 8080d3e:	691b      	ldr	r3, [r3, #16]
 8080d40:	4798      	blx	r3
 8080d42:	2800      	cmp	r0, #0
 8080d44:	dd01      	ble.n	8080d4a <_Z15serialEventRun4v+0x22>
        handler();
 8080d46:	f3af 8000 	nop.w
 8080d4a:	bd10      	pop	{r4, pc}
 8080d4c:	00000000 	.word	0x00000000

08080d50 <_Z22__fetch_global_Serial5v>:
// instantiate Serial5
static Ring_Buffer serial5_rx_buffer;
static Ring_Buffer serial5_tx_buffer;

USARTSerial& __fetch_global_Serial5()
{
 8080d50:	b510      	push	{r4, lr}
	static USARTSerial serial5(HAL_USART_SERIAL5, &serial5_rx_buffer, &serial5_tx_buffer);
 8080d52:	4c0c      	ldr	r4, [pc, #48]	; (8080d84 <_Z22__fetch_global_Serial5v+0x34>)
 8080d54:	6823      	ldr	r3, [r4, #0]
 8080d56:	07db      	lsls	r3, r3, #31
 8080d58:	d411      	bmi.n	8080d7e <_Z22__fetch_global_Serial5v+0x2e>
 8080d5a:	4620      	mov	r0, r4
 8080d5c:	f7ff f9a3 	bl	80800a6 <__cxa_guard_acquire>
 8080d60:	b168      	cbz	r0, 8080d7e <_Z22__fetch_global_Serial5v+0x2e>
 8080d62:	4a09      	ldr	r2, [pc, #36]	; (8080d88 <_Z22__fetch_global_Serial5v+0x38>)
 8080d64:	2104      	movs	r1, #4
 8080d66:	4b09      	ldr	r3, [pc, #36]	; (8080d8c <_Z22__fetch_global_Serial5v+0x3c>)
 8080d68:	4809      	ldr	r0, [pc, #36]	; (8080d90 <_Z22__fetch_global_Serial5v+0x40>)
 8080d6a:	f00a fd99 	bl	808b8a0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8080d6e:	4620      	mov	r0, r4
 8080d70:	f7ff f99e 	bl	80800b0 <__cxa_guard_release>
 8080d74:	4a07      	ldr	r2, [pc, #28]	; (8080d94 <_Z22__fetch_global_Serial5v+0x44>)
 8080d76:	4908      	ldr	r1, [pc, #32]	; (8080d98 <_Z22__fetch_global_Serial5v+0x48>)
 8080d78:	4805      	ldr	r0, [pc, #20]	; (8080d90 <_Z22__fetch_global_Serial5v+0x40>)
 8080d7a:	f00b f8b3 	bl	808bee4 <__aeabi_atexit>
	return serial5;
}
 8080d7e:	4804      	ldr	r0, [pc, #16]	; (8080d90 <_Z22__fetch_global_Serial5v+0x40>)
 8080d80:	bd10      	pop	{r4, pc}
 8080d82:	bf00      	nop
 8080d84:	200001ec 	.word	0x200001ec
 8080d88:	200007ec 	.word	0x200007ec
 8080d8c:	200008e0 	.word	0x200008e0
 8080d90:	200001f8 	.word	0x200001f8
 8080d94:	200001d0 	.word	0x200001d0
 8080d98:	08080b61 	.word	0x08080b61

08080d9c <_Z15serialEventRun5v>:


void serialEventRun5()
{
 8080d9c:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial5, serialEvent5);
 8080d9e:	f7ff ffd7 	bl	8080d50 <_Z22__fetch_global_Serial5v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 8080da2:	4b07      	ldr	r3, [pc, #28]	; (8080dc0 <_Z15serialEventRun5v+0x24>)
 8080da4:	4604      	mov	r4, r0
 8080da6:	b153      	cbz	r3, 8080dbe <_Z15serialEventRun5v+0x22>
 8080da8:	f00a fd97 	bl	808b8da <_ZN11USARTSerial9isEnabledEv>
 8080dac:	b138      	cbz	r0, 8080dbe <_Z15serialEventRun5v+0x22>
 8080dae:	6823      	ldr	r3, [r4, #0]
 8080db0:	4620      	mov	r0, r4
 8080db2:	691b      	ldr	r3, [r3, #16]
 8080db4:	4798      	blx	r3
 8080db6:	2800      	cmp	r0, #0
 8080db8:	dd01      	ble.n	8080dbe <_Z15serialEventRun5v+0x22>
        handler();
 8080dba:	f3af 8000 	nop.w
 8080dbe:	bd10      	pop	{r4, pc}
 8080dc0:	00000000 	.word	0x00000000

08080dc4 <_ZN9SdFatBase5beginEP9SdSpiBasehh>:
   * \param[in] spi SPI object for the card.
   * \param[in] csPin SD card chip select pin.
   * \param[in] divisor SPI divisor.
   * \return true for success else false.
   */
  bool begin(SdSpiCard::m_spi_t* spi, uint8_t csPin = SS, uint8_t divisor = 2) {
 8080dc4:	b538      	push	{r3, r4, r5, lr}
 8080dc6:	4604      	mov	r4, r0
    return m_sdCard.begin(spi, csPin, divisor) &&
 8080dc8:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080dcc:	f006 fdcb 	bl	8087966 <_ZN9SdSpiCard5beginEP9SdSpiBasehh>
 8080dd0:	b1e8      	cbz	r0, 8080e0e <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x4a>
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
 8080dd2:	f504 6588 	add.w	r5, r4, #1088	; 0x440
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(uint8_t part = 0) {
    vwd()->close();
 8080dd6:	4628      	mov	r0, r5
 8080dd8:	f007 fa5c 	bl	8088294 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
 8080ddc:	2101      	movs	r1, #1
 8080dde:	4620      	mov	r0, r4
 8080de0:	f007 fc96 	bl	8088710 <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
 8080de4:	4601      	mov	r1, r0
 8080de6:	b168      	cbz	r0, 8080e04 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x40>
 8080de8:	4621      	mov	r1, r4
 8080dea:	4628      	mov	r0, r5
 8080dec:	f007 f87f 	bl	8087eee <_ZN7FatFile8openRootEP9FatVolume>
 8080df0:	b168      	cbz	r0, 8080e0e <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x4a>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
 8080df2:	f894 3440 	ldrb.w	r3, [r4, #1088]	; 0x440
 8080df6:	f013 0370 	ands.w	r3, r3, #112	; 0x70
      return false;
    }
    m_cwd = dir;
 8080dfa:	bf16      	itet	ne
 8080dfc:	4b05      	ldrne	r3, [pc, #20]	; (8080e14 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x50>)
 8080dfe:	4618      	moveq	r0, r3
 8080e00:	601d      	strne	r5, [r3, #0]
 8080e02:	bd38      	pop	{r3, r4, r5, pc}
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(uint8_t part = 0) {
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
 8080e04:	4620      	mov	r0, r4
 8080e06:	f007 fc83 	bl	8088710 <_ZN9FatVolume4initEh>
 8080e0a:	2800      	cmp	r0, #0
 8080e0c:	d1ec      	bne.n	8080de8 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x24>
 8080e0e:	2000      	movs	r0, #0
           FatFileSystem::begin();
  }
 8080e10:	bd38      	pop	{r3, r4, r5, pc}
 8080e12:	bf00      	nop
 8080e14:	20000bc4 	.word	0x20000bc4

08080e18 <_Z13writeRegisterhh>:
void locationCallback(float lat, float lon, float accuracy);

//void testsensible();

//test for setting up PMIC manually
void writeRegister(uint8_t reg, uint8_t value) {
 8080e18:	b538      	push	{r3, r4, r5, lr}
 8080e1a:	460c      	mov	r4, r1
 8080e1c:	4605      	mov	r5, r0
    // This would be easier if pmic.writeRegister wasn't private
    Wire3.beginTransmission(PMIC_ADDRESS);
 8080e1e:	f00b f841 	bl	808bea4 <_Z20__fetch_global_Wire3v>
 8080e22:	216b      	movs	r1, #107	; 0x6b
 8080e24:	f00a fdf4 	bl	808ba10 <_ZN7TwoWire17beginTransmissionEi>
    Wire3.write(reg);
 8080e28:	f00b f83c 	bl	808bea4 <_Z20__fetch_global_Wire3v>
 8080e2c:	6803      	ldr	r3, [r0, #0]
 8080e2e:	4629      	mov	r1, r5
 8080e30:	689b      	ldr	r3, [r3, #8]
 8080e32:	4798      	blx	r3
    Wire3.write(value);
 8080e34:	f00b f836 	bl	808bea4 <_Z20__fetch_global_Wire3v>
 8080e38:	6803      	ldr	r3, [r0, #0]
 8080e3a:	4621      	mov	r1, r4
 8080e3c:	689b      	ldr	r3, [r3, #8]
 8080e3e:	4798      	blx	r3
    Wire3.endTransmission(true);
 8080e40:	f00b f830 	bl	808bea4 <_Z20__fetch_global_Wire3v>

}
 8080e44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void writeRegister(uint8_t reg, uint8_t value) {
    // This would be easier if pmic.writeRegister wasn't private
    Wire3.beginTransmission(PMIC_ADDRESS);
    Wire3.write(reg);
    Wire3.write(value);
    Wire3.endTransmission(true);
 8080e48:	2101      	movs	r1, #1
 8080e4a:	f00a bde4 	b.w	808ba16 <_ZN7TwoWire15endTransmissionEh>
	...

08080e50 <_Z20writeDefaultSettingsv>:
    {
        PM_10_slope = 1;
    }
}

void writeDefaultSettings(void){
 8080e50:	b573      	push	{r0, r1, r4, r5, r6, lr}
    EEPROM.put(DEVICE_ID_MEM_ADDRESS, 1555);
 8080e52:	f00a ffdb 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8080e56:	f240 6313 	movw	r3, #1555	; 0x613
 8080e5a:	ac02      	add	r4, sp, #8
 8080e5c:	f844 3d04 	str.w	r3, [r4, #-4]!
 8080e60:	4621      	mov	r1, r4
 8080e62:	2000      	movs	r0, #0


    EEPROM.put(CO2_SLOPE_MEM_ADDRESS, 100);
 8080e64:	2664      	movs	r6, #100	; 0x64
        PM_10_slope = 1;
    }
}

void writeDefaultSettings(void){
    EEPROM.put(DEVICE_ID_MEM_ADDRESS, 1555);
 8080e66:	f7ff fed2 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>


    EEPROM.put(CO2_SLOPE_MEM_ADDRESS, 100);
 8080e6a:	f00a ffcf 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8080e6e:	4621      	mov	r1, r4
 8080e70:	2008      	movs	r0, #8
 8080e72:	9601      	str	r6, [sp, #4]
 8080e74:	f7ff fecb 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(CO_SLOPE_MEM_ADDRESS, 100);
 8080e78:	f00a ffc8 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8080e7c:	4621      	mov	r1, r4
 8080e7e:	2010      	movs	r0, #16
 8080e80:	9601      	str	r6, [sp, #4]
 8080e82:	f7ff fec4 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(PM_1_SLOPE_MEM_ADDRESS, 100);
 8080e86:	f00a ffc1 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8080e8a:	4621      	mov	r1, r4
 8080e8c:	2018      	movs	r0, #24
 8080e8e:	9601      	str	r6, [sp, #4]
 8080e90:	f7ff febd 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(PM_25_SLOPE_MEM_ADDRESS, 100);
 8080e94:	f00a ffba 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8080e98:	4621      	mov	r1, r4
 8080e9a:	2020      	movs	r0, #32
 8080e9c:	9601      	str	r6, [sp, #4]
 8080e9e:	f7ff feb6 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(PM_10_SLOPE_MEM_ADDRESS, 100);
 8080ea2:	f00a ffb3 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8080ea6:	4621      	mov	r1, r4
 8080ea8:	2028      	movs	r0, #40	; 0x28
 8080eaa:	9601      	str	r6, [sp, #4]
 8080eac:	f7ff feaf 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, 100);
 8080eb0:	f00a ffac 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8080eb4:	4621      	mov	r1, r4
 8080eb6:	2030      	movs	r0, #48	; 0x30
 8080eb8:	9601      	str	r6, [sp, #4]
 8080eba:	f7ff fea8 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, 100);
 8080ebe:	f00a ffa5 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8080ec2:	4621      	mov	r1, r4
 8080ec4:	2038      	movs	r0, #56	; 0x38
 8080ec6:	9601      	str	r6, [sp, #4]
 8080ec8:	f7ff fea1 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(RH_SLOPE_MEM_ADDRESS, 100);
 8080ecc:	f00a ff9e 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8080ed0:	4621      	mov	r1, r4
 8080ed2:	2040      	movs	r0, #64	; 0x40

    EEPROM.put(CO2_ZERO_MEM_ADDRESS, 0);
 8080ed4:	2500      	movs	r5, #0
    EEPROM.put(PM_1_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(PM_25_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(PM_10_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(RH_SLOPE_MEM_ADDRESS, 100);
 8080ed6:	9601      	str	r6, [sp, #4]
 8080ed8:	f7ff fe99 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>

    EEPROM.put(CO2_ZERO_MEM_ADDRESS, 0);
 8080edc:	f00a ff96 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8080ee0:	4621      	mov	r1, r4
 8080ee2:	2004      	movs	r0, #4
 8080ee4:	9501      	str	r5, [sp, #4]
 8080ee6:	f7ff fe92 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(CO_ZERO_MEM_ADDRESS, 0);
 8080eea:	f00a ff8f 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8080eee:	4621      	mov	r1, r4
 8080ef0:	200c      	movs	r0, #12
 8080ef2:	9501      	str	r5, [sp, #4]
 8080ef4:	f7ff fe8b 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(PM_1_ZERO_MEM_ADDRESS, 0);
 8080ef8:	f00a ff88 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8080efc:	4621      	mov	r1, r4
 8080efe:	2014      	movs	r0, #20
 8080f00:	9501      	str	r5, [sp, #4]
 8080f02:	f7ff fe84 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(PM_25_ZERO_MEM_ADDRESS, 0);
 8080f06:	f00a ff81 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8080f0a:	4621      	mov	r1, r4
 8080f0c:	201c      	movs	r0, #28
 8080f0e:	9501      	str	r5, [sp, #4]
 8080f10:	f7ff fe7d 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(PM_10_ZERO_MEM_ADDRESS, 0);
 8080f14:	f00a ff7a 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8080f18:	4621      	mov	r1, r4
 8080f1a:	2024      	movs	r0, #36	; 0x24
 8080f1c:	9501      	str	r5, [sp, #4]
 8080f1e:	f7ff fe76 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(TEMP_ZERO_MEM_ADDRESS, 0);
 8080f22:	f00a ff73 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8080f26:	4621      	mov	r1, r4
 8080f28:	202c      	movs	r0, #44	; 0x2c
 8080f2a:	9501      	str	r5, [sp, #4]
 8080f2c:	f7ff fe6f 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(PRESSURE_ZERO_MEM_ADDRESS, 0);
 8080f30:	f00a ff6c 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8080f34:	4621      	mov	r1, r4
 8080f36:	2034      	movs	r0, #52	; 0x34
 8080f38:	9501      	str	r5, [sp, #4]
 8080f3a:	f7ff fe68 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(RH_ZERO_MEM_ADDRESS, 0);
 8080f3e:	f00a ff65 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8080f42:	4621      	mov	r1, r4
 8080f44:	203c      	movs	r0, #60	; 0x3c
 8080f46:	9501      	str	r5, [sp, #4]
 8080f48:	f7ff fe61 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>

    EEPROM.put(SERIAL_CELLULAR_EN_MEM_ADDRESS, 0);
 8080f4c:	f00a ff5e 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8080f50:	4621      	mov	r1, r4
 8080f52:	2044      	movs	r0, #68	; 0x44
 8080f54:	9501      	str	r5, [sp, #4]
 8080f56:	f7ff fe5a 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, 0);
 8080f5a:	f00a ff57 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8080f5e:	4621      	mov	r1, r4
 8080f60:	2048      	movs	r0, #72	; 0x48
 8080f62:	9501      	str	r5, [sp, #4]
 8080f64:	f7ff fe53 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(OZONE_EN_MEM_ADDRESS, 0);
 8080f68:	f00a ff50 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8080f6c:	4621      	mov	r1, r4
 8080f6e:	2058      	movs	r0, #88	; 0x58
 8080f70:	9501      	str	r5, [sp, #4]
 8080f72:	f7ff fe4c 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(VOC_EN_MEM_ADDRESS, voc_enabled);
 8080f76:	f00a ff49 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8080f7a:	4941      	ldr	r1, [pc, #260]	; (8081080 <_Z20writeDefaultSettingsv+0x230>)
 8080f7c:	205c      	movs	r0, #92	; 0x5c
 8080f7e:	f7ff fe46 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(GAS_LOWER_LIMIT_MEM_ADDRESS, 1000);
 8080f82:	f00a ff43 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8080f86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080f8a:	4621      	mov	r1, r4
 8080f8c:	204c      	movs	r0, #76	; 0x4c
 8080f8e:	9301      	str	r3, [sp, #4]
 8080f90:	f7ff fe3d 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(GAS_UPPER_LIMIT_MEM_ADDRESS, 10000);
 8080f94:	f00a ff3a 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8080f98:	f242 7310 	movw	r3, #10000	; 0x2710
 8080f9c:	4621      	mov	r1, r4
 8080f9e:	2050      	movs	r0, #80	; 0x50
 8080fa0:	9301      	str	r3, [sp, #4]
 8080fa2:	f7ff fe34 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(TIME_ZONE_MEM_ADDRESS, -7);
 8080fa6:	f00a ff31 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8080faa:	4621      	mov	r1, r4
 8080fac:	f06f 0306 	mvn.w	r3, #6
 8080fb0:	2054      	movs	r0, #84	; 0x54
 8080fb2:	9301      	str	r3, [sp, #4]
 8080fb4:	f7ff fe2b 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    Time.zone(tempValue);
 8080fb8:	4b32      	ldr	r3, [pc, #200]	; (8081084 <_Z20writeDefaultSettingsv+0x234>)
 8080fba:	6818      	ldr	r0, [r3, #0]
 8080fbc:	f00b fe9e 	bl	808ccfc <__aeabi_i2f>
 8080fc0:	f009 fd0a 	bl	808a9d8 <_ZN9TimeClass4zoneEf>
    EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, 0);
 8080fc4:	f00a ff22 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8080fc8:	4621      	mov	r1, r4
 8080fca:	2060      	movs	r0, #96	; 0x60
 8080fcc:	9501      	str	r5, [sp, #4]
 8080fce:	f7ff fe1e 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, 0);
 8080fd2:	f00a ff1b 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8080fd6:	4621      	mov	r1, r4
 8080fd8:	4630      	mov	r0, r6
 8080fda:	9501      	str	r5, [sp, #4]
    EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, 1);
 8080fdc:	2601      	movs	r6, #1
    EEPROM.put(GAS_LOWER_LIMIT_MEM_ADDRESS, 1000);
    EEPROM.put(GAS_UPPER_LIMIT_MEM_ADDRESS, 10000);
    EEPROM.put(TIME_ZONE_MEM_ADDRESS, -7);
    Time.zone(tempValue);
    EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, 0);
    EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, 0);
 8080fde:	f7ff fe16 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, 1);
 8080fe2:	f00a ff13 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8080fe6:	4621      	mov	r1, r4
 8080fe8:	2068      	movs	r0, #104	; 0x68
 8080fea:	9601      	str	r6, [sp, #4]
 8080fec:	f7ff fe0f 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(OZONE_A_OR_D_MEM_ADDRESS, 0);
 8080ff0:	f00a ff0c 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8080ff4:	4621      	mov	r1, r4
 8080ff6:	206c      	movs	r0, #108	; 0x6c
 8080ff8:	9501      	str	r5, [sp, #4]
 8080ffa:	f7ff fe08 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(OZONE_OFFSET_MEM_ADDRESS,0);
 8080ffe:	f00a ff05 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8081002:	4621      	mov	r1, r4
 8081004:	2070      	movs	r0, #112	; 0x70
 8081006:	9501      	str	r5, [sp, #4]
 8081008:	f7ff fe01 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(MEASUREMENTS_TO_AVG_MEM_ADDRESS, 1);
 808100c:	f00a fefe 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8081010:	4621      	mov	r1, r4
 8081012:	2074      	movs	r0, #116	; 0x74
 8081014:	9601      	str	r6, [sp, #4]
 8081016:	f7ff fdfa 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, 1);
 808101a:	f00a fef7 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 808101e:	4621      	mov	r1, r4
 8081020:	2078      	movs	r0, #120	; 0x78
 8081022:	9601      	str	r6, [sp, #4]
 8081024:	f7ff fdf3 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(ABC_ENABLE_MEM_ADDRESS, 0);
 8081028:	f00a fef0 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 808102c:	4621      	mov	r1, r4
 808102e:	207c      	movs	r0, #124	; 0x7c
 8081030:	9501      	str	r5, [sp, #4]
 8081032:	f7ff fdec 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(HIH8120_ENABLE_MEM_ADDRESS, 1);
 8081036:	f00a fee9 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 808103a:	4621      	mov	r1, r4
 808103c:	2080      	movs	r0, #128	; 0x80
 808103e:	9601      	str	r6, [sp, #4]
 8081040:	f7ff fde5 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(CO_SOCKET_MEM_ADDRESS, 0);
 8081044:	f00a fee2 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8081048:	4621      	mov	r1, r4
 808104a:	2084      	movs	r0, #132	; 0x84
 808104c:	9501      	str	r5, [sp, #4]
 808104e:	f7ff fdde 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(GOOGLE_LOCATION_MEM_ADDRESS, 0);
 8081052:	f00a fedb 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8081056:	4621      	mov	r1, r4
 8081058:	2088      	movs	r0, #136	; 0x88
 808105a:	9501      	str	r5, [sp, #4]
 808105c:	f7ff fdd7 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(SENSIBLEIOT_ENABLE_MEM_ADDRESS, 0);
 8081060:	f00a fed4 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8081064:	4621      	mov	r1, r4
 8081066:	208c      	movs	r0, #140	; 0x8c
 8081068:	9501      	str	r5, [sp, #4]
 808106a:	f7ff fdd0 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, 0);
 808106e:	f00a fecd 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8081072:	4621      	mov	r1, r4
 8081074:	2090      	movs	r0, #144	; 0x90
 8081076:	9501      	str	r5, [sp, #4]
 8081078:	f7ff fdc9 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
}
 808107c:	b002      	add	sp, #8
 808107e:	bd70      	pop	{r4, r5, r6, pc}
 8081080:	20000b84 	.word	0x20000b84
 8081084:	20000bb4 	.word	0x20000bb4

08081088 <_Z14readStoredVarsv>:
    }else{
        return -1;
    }
}
//read all eeprom stored variables
void readStoredVars(void){
 8081088:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    //just changing the rh calibration for temporary!! -- remove me!!
    //these values were determined by John Birks from 2019 cdphe study at la casa in denver February 2019



    EEPROM.get(DEVICE_ID_MEM_ADDRESS, DEVICE_id);
 808108c:	4cb7      	ldr	r4, [pc, #732]	; (808136c <_Z14readStoredVarsv+0x2e4>)
 808108e:	f00a febd 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8081092:	4621      	mov	r1, r4
 8081094:	2000      	movs	r0, #0
 8081096:	f7ff fdd9 	bl	8080c4c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    if(DEVICE_id == -1){
 808109a:	6823      	ldr	r3, [r4, #0]
 808109c:	3301      	adds	r3, #1
 808109e:	d104      	bne.n	80810aa <_Z14readStoredVarsv+0x22>
        DEVICE_id = 1555;
 80810a0:	f240 6313 	movw	r3, #1555	; 0x613
 80810a4:	6023      	str	r3, [r4, #0]
        writeDefaultSettings();
 80810a6:	f7ff fed3 	bl	8080e50 <_Z20writeDefaultSettingsv>
    }

    EEPROM.get(CO2_SLOPE_MEM_ADDRESS, tempValue);
 80810aa:	f00a feaf 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 80810ae:	a901      	add	r1, sp, #4
 80810b0:	2008      	movs	r0, #8
 80810b2:	f7ff fdcb 	bl	8080c4c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    CO2_slope = tempValue;
    CO2_slope /= 100;
 80810b6:	9801      	ldr	r0, [sp, #4]
 80810b8:	f00b fe20 	bl	808ccfc <__aeabi_i2f>
 80810bc:	49ac      	ldr	r1, [pc, #688]	; (8081370 <_Z14readStoredVarsv+0x2e8>)
 80810be:	f00b ff25 	bl	808cf0c <__aeabi_fdiv>
 80810c2:	f8df 8334 	ldr.w	r8, [pc, #820]	; 80813f8 <_Z14readStoredVarsv+0x370>
    EEPROM.get(CO_SLOPE_MEM_ADDRESS, tempValue);
    CO_slope = tempValue;
    CO_slope /= 100;
 80810c6:	4fab      	ldr	r7, [pc, #684]	; (8081374 <_Z14readStoredVarsv+0x2ec>)
        writeDefaultSettings();
    }

    EEPROM.get(CO2_SLOPE_MEM_ADDRESS, tempValue);
    CO2_slope = tempValue;
    CO2_slope /= 100;
 80810c8:	f8c8 0000 	str.w	r0, [r8]
    EEPROM.get(CO_SLOPE_MEM_ADDRESS, tempValue);
 80810cc:	f00a fe9e 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 80810d0:	a901      	add	r1, sp, #4
 80810d2:	2010      	movs	r0, #16
 80810d4:	f7ff fdba 	bl	8080c4c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    CO_slope = tempValue;
    CO_slope /= 100;
 80810d8:	9801      	ldr	r0, [sp, #4]
 80810da:	f00b fe0f 	bl	808ccfc <__aeabi_i2f>
 80810de:	49a4      	ldr	r1, [pc, #656]	; (8081370 <_Z14readStoredVarsv+0x2e8>)
 80810e0:	f00b ff14 	bl	808cf0c <__aeabi_fdiv>
 80810e4:	6038      	str	r0, [r7, #0]
    EEPROM.get(PM_1_SLOPE_MEM_ADDRESS, tempValue);
 80810e6:	f00a fe91 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 80810ea:	a901      	add	r1, sp, #4
 80810ec:	2018      	movs	r0, #24
 80810ee:	f7ff fdad 	bl	8080c4c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    PM_1_slope = tempValue;
    PM_1_slope /= 100;
 80810f2:	9801      	ldr	r0, [sp, #4]
 80810f4:	f00b fe02 	bl	808ccfc <__aeabi_i2f>
 80810f8:	499d      	ldr	r1, [pc, #628]	; (8081370 <_Z14readStoredVarsv+0x2e8>)
 80810fa:	f00b ff07 	bl	808cf0c <__aeabi_fdiv>
 80810fe:	4e9e      	ldr	r6, [pc, #632]	; (8081378 <_Z14readStoredVarsv+0x2f0>)
    EEPROM.get(PM_25_SLOPE_MEM_ADDRESS, tempValue);
    PM_25_slope = tempValue;
    PM_25_slope /= 100;
 8081100:	4d9e      	ldr	r5, [pc, #632]	; (808137c <_Z14readStoredVarsv+0x2f4>)
    EEPROM.get(CO_SLOPE_MEM_ADDRESS, tempValue);
    CO_slope = tempValue;
    CO_slope /= 100;
    EEPROM.get(PM_1_SLOPE_MEM_ADDRESS, tempValue);
    PM_1_slope = tempValue;
    PM_1_slope /= 100;
 8081102:	6030      	str	r0, [r6, #0]
    EEPROM.get(PM_25_SLOPE_MEM_ADDRESS, tempValue);
 8081104:	f00a fe82 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8081108:	a901      	add	r1, sp, #4
 808110a:	2020      	movs	r0, #32
 808110c:	f7ff fd9e 	bl	8080c4c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    PM_25_slope = tempValue;
    PM_25_slope /= 100;
 8081110:	9801      	ldr	r0, [sp, #4]
 8081112:	f00b fdf3 	bl	808ccfc <__aeabi_i2f>
 8081116:	4996      	ldr	r1, [pc, #600]	; (8081370 <_Z14readStoredVarsv+0x2e8>)
 8081118:	f00b fef8 	bl	808cf0c <__aeabi_fdiv>
 808111c:	6028      	str	r0, [r5, #0]
    EEPROM.get(PM_10_SLOPE_MEM_ADDRESS, tempValue);
 808111e:	f00a fe75 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8081122:	a901      	add	r1, sp, #4
 8081124:	2028      	movs	r0, #40	; 0x28
 8081126:	f7ff fd91 	bl	8080c4c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    PM_10_slope = tempValue;
    PM_10_slope /= 100;
 808112a:	9801      	ldr	r0, [sp, #4]
 808112c:	f00b fde6 	bl	808ccfc <__aeabi_i2f>
 8081130:	498f      	ldr	r1, [pc, #572]	; (8081370 <_Z14readStoredVarsv+0x2e8>)
 8081132:	f00b feeb 	bl	808cf0c <__aeabi_fdiv>
 8081136:	4c92      	ldr	r4, [pc, #584]	; (8081380 <_Z14readStoredVarsv+0x2f8>)
    EEPROM.get(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
    EEPROM.get(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
    EEPROM.get(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);
    EEPROM.get(CO_SOCKET_MEM_ADDRESS, CO_socket);
    EEPROM.get(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
    EEPROM.get(SENSIBLEIOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 8081138:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 80813fc <_Z14readStoredVarsv+0x374>
    EEPROM.get(PM_25_SLOPE_MEM_ADDRESS, tempValue);
    PM_25_slope = tempValue;
    PM_25_slope /= 100;
    EEPROM.get(PM_10_SLOPE_MEM_ADDRESS, tempValue);
    PM_10_slope = tempValue;
    PM_10_slope /= 100;
 808113c:	6020      	str	r0, [r4, #0]
    EEPROM.get(TEMP_SLOPE_MEM_ADDRESS, tempValue);  //temperature
 808113e:	f00a fe65 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8081142:	a901      	add	r1, sp, #4
 8081144:	2030      	movs	r0, #48	; 0x30
 8081146:	f7ff fd81 	bl	8080c4c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    temp_slope = tempValue;
    temp_slope /= 100;
 808114a:	9801      	ldr	r0, [sp, #4]
 808114c:	f00b fdd6 	bl	808ccfc <__aeabi_i2f>
 8081150:	4987      	ldr	r1, [pc, #540]	; (8081370 <_Z14readStoredVarsv+0x2e8>)
 8081152:	f00b fedb 	bl	808cf0c <__aeabi_fdiv>
 8081156:	4b8b      	ldr	r3, [pc, #556]	; (8081384 <_Z14readStoredVarsv+0x2fc>)
 8081158:	6018      	str	r0, [r3, #0]
    EEPROM.get(PRESSURE_SLOPE_MEM_ADDRESS, tempValue);
 808115a:	f00a fe57 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 808115e:	a901      	add	r1, sp, #4
 8081160:	2038      	movs	r0, #56	; 0x38
 8081162:	f7ff fd73 	bl	8080c4c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    pressure_slope = tempValue;
    pressure_slope /= 100;
 8081166:	9801      	ldr	r0, [sp, #4]
 8081168:	f00b fdc8 	bl	808ccfc <__aeabi_i2f>
 808116c:	4980      	ldr	r1, [pc, #512]	; (8081370 <_Z14readStoredVarsv+0x2e8>)
 808116e:	f00b fecd 	bl	808cf0c <__aeabi_fdiv>
 8081172:	4b85      	ldr	r3, [pc, #532]	; (8081388 <_Z14readStoredVarsv+0x300>)
 8081174:	6018      	str	r0, [r3, #0]
    EEPROM.get(RH_SLOPE_MEM_ADDRESS, tempValue);
 8081176:	f00a fe49 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 808117a:	a901      	add	r1, sp, #4
 808117c:	2040      	movs	r0, #64	; 0x40
 808117e:	f7ff fd65 	bl	8080c4c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    rh_slope = tempValue;
    rh_slope /= 100;
 8081182:	9801      	ldr	r0, [sp, #4]
 8081184:	f00b fdba 	bl	808ccfc <__aeabi_i2f>
 8081188:	4979      	ldr	r1, [pc, #484]	; (8081370 <_Z14readStoredVarsv+0x2e8>)
 808118a:	f00b febf 	bl	808cf0c <__aeabi_fdiv>
 808118e:	4b7f      	ldr	r3, [pc, #508]	; (808138c <_Z14readStoredVarsv+0x304>)
 8081190:	6018      	str	r0, [r3, #0]

    EEPROM.get(CO2_ZERO_MEM_ADDRESS, CO2_zero);
 8081192:	f00a fe3b 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8081196:	497e      	ldr	r1, [pc, #504]	; (8081390 <_Z14readStoredVarsv+0x308>)
 8081198:	2004      	movs	r0, #4
 808119a:	f7ff fd57 	bl	8080c4c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(CO_ZERO_MEM_ADDRESS, CO_zero);
 808119e:	f00a fe35 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 80811a2:	497c      	ldr	r1, [pc, #496]	; (8081394 <_Z14readStoredVarsv+0x30c>)
 80811a4:	200c      	movs	r0, #12
 80811a6:	f7ff fd51 	bl	8080c4c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(PM_1_ZERO_MEM_ADDRESS, PM_1_zero);
 80811aa:	f00a fe2f 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 80811ae:	497a      	ldr	r1, [pc, #488]	; (8081398 <_Z14readStoredVarsv+0x310>)
 80811b0:	2014      	movs	r0, #20
 80811b2:	f7ff fd4b 	bl	8080c4c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(PM_25_ZERO_MEM_ADDRESS, PM_25_zero);
 80811b6:	f00a fe29 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 80811ba:	4978      	ldr	r1, [pc, #480]	; (808139c <_Z14readStoredVarsv+0x314>)
 80811bc:	201c      	movs	r0, #28
 80811be:	f7ff fd45 	bl	8080c4c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(PM_10_ZERO_MEM_ADDRESS, PM_10_zero);
 80811c2:	f00a fe23 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 80811c6:	4976      	ldr	r1, [pc, #472]	; (80813a0 <_Z14readStoredVarsv+0x318>)
 80811c8:	2024      	movs	r0, #36	; 0x24
 80811ca:	f7ff fd3f 	bl	8080c4c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(TEMP_ZERO_MEM_ADDRESS, temp_zero);
 80811ce:	f00a fe1d 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 80811d2:	4974      	ldr	r1, [pc, #464]	; (80813a4 <_Z14readStoredVarsv+0x31c>)
 80811d4:	202c      	movs	r0, #44	; 0x2c
 80811d6:	f7ff fd39 	bl	8080c4c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(PRESSURE_ZERO_MEM_ADDRESS, pressure_zero);
 80811da:	f00a fe17 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 80811de:	4972      	ldr	r1, [pc, #456]	; (80813a8 <_Z14readStoredVarsv+0x320>)
 80811e0:	2034      	movs	r0, #52	; 0x34
 80811e2:	f7ff fd33 	bl	8080c4c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(RH_ZERO_MEM_ADDRESS, rh_zero);
 80811e6:	f00a fe11 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 80811ea:	4970      	ldr	r1, [pc, #448]	; (80813ac <_Z14readStoredVarsv+0x324>)
 80811ec:	203c      	movs	r0, #60	; 0x3c
 80811ee:	f7ff fd2d 	bl	8080c4c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>

    EEPROM.get(SERIAL_CELLULAR_EN_MEM_ADDRESS, serial_cellular_enabled);
 80811f2:	f00a fe0b 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 80811f6:	496e      	ldr	r1, [pc, #440]	; (80813b0 <_Z14readStoredVarsv+0x328>)
 80811f8:	2044      	movs	r0, #68	; 0x44
 80811fa:	f7ff fd27 	bl	8080c4c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
 80811fe:	f00a fe05 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8081202:	496c      	ldr	r1, [pc, #432]	; (80813b4 <_Z14readStoredVarsv+0x32c>)
 8081204:	2048      	movs	r0, #72	; 0x48
 8081206:	f7ff fd21 	bl	8080c4c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(OZONE_EN_MEM_ADDRESS, ozone_enabled);
 808120a:	f00a fdff 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 808120e:	496a      	ldr	r1, [pc, #424]	; (80813b8 <_Z14readStoredVarsv+0x330>)
 8081210:	2058      	movs	r0, #88	; 0x58
 8081212:	f7ff fd1b 	bl	8080c4c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(VOC_EN_MEM_ADDRESS, voc_enabled);
 8081216:	f00a fdf9 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 808121a:	4968      	ldr	r1, [pc, #416]	; (80813bc <_Z14readStoredVarsv+0x334>)
 808121c:	205c      	movs	r0, #92	; 0x5c
 808121e:	f7ff fd15 	bl	8080c4c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(GAS_LOWER_LIMIT_MEM_ADDRESS, gas_lower_limit);
 8081222:	f00a fdf3 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8081226:	4966      	ldr	r1, [pc, #408]	; (80813c0 <_Z14readStoredVarsv+0x338>)
 8081228:	204c      	movs	r0, #76	; 0x4c
 808122a:	f7ff fd0f 	bl	8080c4c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(GAS_UPPER_LIMIT_MEM_ADDRESS, gas_upper_limit);
 808122e:	f00a fded 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8081232:	4964      	ldr	r1, [pc, #400]	; (80813c4 <_Z14readStoredVarsv+0x33c>)
 8081234:	2050      	movs	r0, #80	; 0x50
 8081236:	f7ff fd09 	bl	8080c4c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(TIME_ZONE_MEM_ADDRESS, tempValue);
 808123a:	f00a fde7 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 808123e:	a901      	add	r1, sp, #4
 8081240:	2054      	movs	r0, #84	; 0x54
 8081242:	f7ff fd03 	bl	8080c4c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    Time.zone(tempValue);
 8081246:	9801      	ldr	r0, [sp, #4]
 8081248:	f00b fd58 	bl	808ccfc <__aeabi_i2f>
 808124c:	f009 fbc4 	bl	808a9d8 <_ZN9TimeClass4zoneEf>
    EEPROM.get(TEMPERATURE_UNITS_MEM_ADDRESS, temperature_units);
 8081250:	f00a fddc 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8081254:	495c      	ldr	r1, [pc, #368]	; (80813c8 <_Z14readStoredVarsv+0x340>)
 8081256:	2060      	movs	r0, #96	; 0x60
 8081258:	f7ff fcf8 	bl	8080c4c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(OUTPUT_PARTICLES_MEM_ADDRESS, output_only_particles);
 808125c:	f00a fdd6 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8081260:	495a      	ldr	r1, [pc, #360]	; (80813cc <_Z14readStoredVarsv+0x344>)
 8081262:	2064      	movs	r0, #100	; 0x64
 8081264:	f7ff fcf2 	bl	8080c4c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, new_temperature_sensor_enabled);
 8081268:	f00a fdd0 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 808126c:	4958      	ldr	r1, [pc, #352]	; (80813d0 <_Z14readStoredVarsv+0x348>)
 808126e:	2068      	movs	r0, #104	; 0x68
 8081270:	f7ff fcec 	bl	8080c4c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(OZONE_A_OR_D_MEM_ADDRESS, ozone_analog_enabled);
 8081274:	f00a fdca 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8081278:	4956      	ldr	r1, [pc, #344]	; (80813d4 <_Z14readStoredVarsv+0x34c>)
 808127a:	206c      	movs	r0, #108	; 0x6c
 808127c:	f7ff fce6 	bl	8080c4c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(OZONE_OFFSET_MEM_ADDRESS, ozone_offset);
 8081280:	f00a fdc4 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8081284:	4954      	ldr	r1, [pc, #336]	; (80813d8 <_Z14readStoredVarsv+0x350>)
 8081286:	2070      	movs	r0, #112	; 0x70
 8081288:	f7ff fce0 	bl	8080c4c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(MEASUREMENTS_TO_AVG_MEM_ADDRESS, measurements_to_average);
 808128c:	f00a fdbe 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8081290:	4952      	ldr	r1, [pc, #328]	; (80813dc <_Z14readStoredVarsv+0x354>)
 8081292:	2074      	movs	r0, #116	; 0x74
 8081294:	f7ff fcda 	bl	8080c4c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
 8081298:	f00a fdb8 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 808129c:	4950      	ldr	r1, [pc, #320]	; (80813e0 <_Z14readStoredVarsv+0x358>)
 808129e:	2078      	movs	r0, #120	; 0x78
 80812a0:	f7ff fcd4 	bl	8080c4c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 80812a4:	f00a fdb2 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 80812a8:	494e      	ldr	r1, [pc, #312]	; (80813e4 <_Z14readStoredVarsv+0x35c>)
 80812aa:	207c      	movs	r0, #124	; 0x7c
 80812ac:	f7ff fcce 	bl	8080c4c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);
 80812b0:	f00a fdac 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 80812b4:	494c      	ldr	r1, [pc, #304]	; (80813e8 <_Z14readStoredVarsv+0x360>)
 80812b6:	2080      	movs	r0, #128	; 0x80
 80812b8:	f7ff fcc8 	bl	8080c4c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(CO_SOCKET_MEM_ADDRESS, CO_socket);
 80812bc:	f00a fda6 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 80812c0:	494a      	ldr	r1, [pc, #296]	; (80813ec <_Z14readStoredVarsv+0x364>)
 80812c2:	2084      	movs	r0, #132	; 0x84
 80812c4:	f7ff fcc2 	bl	8080c4c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
 80812c8:	f00a fda0 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 80812cc:	4948      	ldr	r1, [pc, #288]	; (80813f0 <_Z14readStoredVarsv+0x368>)
 80812ce:	2088      	movs	r0, #136	; 0x88
 80812d0:	f7ff fcbc 	bl	8080c4c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(SENSIBLEIOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 80812d4:	f00a fd9a 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 80812d8:	4649      	mov	r1, r9
 80812da:	208c      	movs	r0, #140	; 0x8c
 80812dc:	f7ff fcb6 	bl	8080c4c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(CAR_TOPPER_POWER_MEM_ADDRESS, car_topper_power_en);
 80812e0:	f00a fd94 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 80812e4:	4943      	ldr	r1, [pc, #268]	; (80813f4 <_Z14readStoredVarsv+0x36c>)
 80812e6:	2090      	movs	r0, #144	; 0x90
 80812e8:	f7ff fcb0 	bl	8080c4c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>

    if(sensible_iot_en){
 80812ec:	f8d9 3000 	ldr.w	r3, [r9]
 80812f0:	b113      	cbz	r3, 80812f8 <_Z14readStoredVarsv+0x270>
        Time.zone(0);       //use UTC if using sensible iot upload
 80812f2:	2000      	movs	r0, #0
 80812f4:	f009 fb70 	bl	808a9d8 <_ZN9TimeClass4zoneEf>
    }

    //measurements_to_average = 5;
    if(measurements_to_average < 1 || measurements_to_average > 5000)
 80812f8:	f241 3187 	movw	r1, #4999	; 0x1387
 80812fc:	4a37      	ldr	r2, [pc, #220]	; (80813dc <_Z14readStoredVarsv+0x354>)
        measurements_to_average = 1;

    //check all values to make sure are within limits
    if(!CO2_slope)
 80812fe:	f8d8 0000 	ldr.w	r0, [r8]
    if(sensible_iot_en){
        Time.zone(0);       //use UTC if using sensible iot upload
    }

    //measurements_to_average = 5;
    if(measurements_to_average < 1 || measurements_to_average > 5000)
 8081302:	6813      	ldr	r3, [r2, #0]
 8081304:	3b01      	subs	r3, #1
 8081306:	428b      	cmp	r3, r1
        measurements_to_average = 1;
 8081308:	bf84      	itt	hi
 808130a:	2301      	movhi	r3, #1
 808130c:	6013      	strhi	r3, [r2, #0]

    //check all values to make sure are within limits
    if(!CO2_slope)
 808130e:	2100      	movs	r1, #0
 8081310:	f00b fedc 	bl	808d0cc <__aeabi_fcmpeq>
 8081314:	b118      	cbz	r0, 808131e <_Z14readStoredVarsv+0x296>
    {
        CO2_slope = 1;
 8081316:	4b38      	ldr	r3, [pc, #224]	; (80813f8 <_Z14readStoredVarsv+0x370>)
 8081318:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 808131c:	601a      	str	r2, [r3, #0]
    }
    if(!CO_slope)
 808131e:	2100      	movs	r1, #0
 8081320:	6838      	ldr	r0, [r7, #0]
 8081322:	f00b fed3 	bl	808d0cc <__aeabi_fcmpeq>
 8081326:	b118      	cbz	r0, 8081330 <_Z14readStoredVarsv+0x2a8>
    {
        CO_slope = 1;
 8081328:	4b12      	ldr	r3, [pc, #72]	; (8081374 <_Z14readStoredVarsv+0x2ec>)
 808132a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 808132e:	601a      	str	r2, [r3, #0]
    }
    if(!PM_1_slope)
 8081330:	2100      	movs	r1, #0
 8081332:	6830      	ldr	r0, [r6, #0]
 8081334:	f00b feca 	bl	808d0cc <__aeabi_fcmpeq>
 8081338:	b118      	cbz	r0, 8081342 <_Z14readStoredVarsv+0x2ba>
    {
        PM_1_slope = 1;
 808133a:	4b0f      	ldr	r3, [pc, #60]	; (8081378 <_Z14readStoredVarsv+0x2f0>)
 808133c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8081340:	601a      	str	r2, [r3, #0]
    }
    if(!PM_25_slope)
 8081342:	2100      	movs	r1, #0
 8081344:	6828      	ldr	r0, [r5, #0]
 8081346:	f00b fec1 	bl	808d0cc <__aeabi_fcmpeq>
 808134a:	b118      	cbz	r0, 8081354 <_Z14readStoredVarsv+0x2cc>
    {
        PM_25_slope = 1;
 808134c:	4b0b      	ldr	r3, [pc, #44]	; (808137c <_Z14readStoredVarsv+0x2f4>)
 808134e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8081352:	601a      	str	r2, [r3, #0]
    }
    if(!PM_10_slope)
 8081354:	2100      	movs	r1, #0
 8081356:	6820      	ldr	r0, [r4, #0]
 8081358:	f00b feb8 	bl	808d0cc <__aeabi_fcmpeq>
 808135c:	b118      	cbz	r0, 8081366 <_Z14readStoredVarsv+0x2de>
    {
        PM_10_slope = 1;
 808135e:	4b08      	ldr	r3, [pc, #32]	; (8081380 <_Z14readStoredVarsv+0x2f8>)
 8081360:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8081364:	601a      	str	r2, [r3, #0]
    }
}
 8081366:	b003      	add	sp, #12
 8081368:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808136c:	20000088 	.word	0x20000088
 8081370:	42c80000 	.word	0x42c80000
 8081374:	200001e8 	.word	0x200001e8
 8081378:	20000230 	.word	0x20000230
 808137c:	200007dc 	.word	0x200007dc
 8081380:	20000b18 	.word	0x20000b18
 8081384:	200007e4 	.word	0x200007e4
 8081388:	200001f0 	.word	0x200001f0
 808138c:	200006ec 	.word	0x200006ec
 8081390:	20000234 	.word	0x20000234
 8081394:	200007e8 	.word	0x200007e8
 8081398:	20000acc 	.word	0x20000acc
 808139c:	2000077c 	.word	0x2000077c
 80813a0:	20000b00 	.word	0x20000b00
 80813a4:	20000ad8 	.word	0x20000ad8
 80813a8:	20000a30 	.word	0x20000a30
 80813ac:	20000770 	.word	0x20000770
 80813b0:	20000224 	.word	0x20000224
 80813b4:	20000af8 	.word	0x20000af8
 80813b8:	20000ab8 	.word	0x20000ab8
 80813bc:	20000b84 	.word	0x20000b84
 80813c0:	20000090 	.word	0x20000090
 80813c4:	2000008c 	.word	0x2000008c
 80813c8:	200006b8 	.word	0x200006b8
 80813cc:	200007e0 	.word	0x200007e0
 80813d0:	20000778 	.word	0x20000778
 80813d4:	20000b64 	.word	0x20000b64
 80813d8:	200006b4 	.word	0x200006b4
 80813dc:	20000aec 	.word	0x20000aec
 80813e0:	20000b78 	.word	0x20000b78
 80813e4:	200008c0 	.word	0x200008c0
 80813e8:	200001f4 	.word	0x200001f4
 80813ec:	200006f4 	.word	0x200006f4
 80813f0:	20000b70 	.word	0x20000b70
 80813f4:	2000021c 	.word	0x2000021c
 80813f8:	20000abc 	.word	0x20000abc
 80813fc:	200008d0 	.word	0x200008d0

08081400 <_Z7echoGpsv>:
      air_quality_score = hum_score + gas_score;


}

void echoGps(){
 8081400:	b510      	push	{r4, lr}
    char gps_byte = 0;
    while(!Serial.available()){
 8081402:	f00a f91f 	bl	808b644 <_Z16_fetch_usbserialv>
 8081406:	6803      	ldr	r3, [r0, #0]
 8081408:	691b      	ldr	r3, [r3, #16]
 808140a:	4798      	blx	r3
 808140c:	b990      	cbnz	r0, 8081434 <_Z7echoGpsv+0x34>
        if(Serial5.available() > 0){
 808140e:	f7ff fc9f 	bl	8080d50 <_Z22__fetch_global_Serial5v>
 8081412:	6803      	ldr	r3, [r0, #0]
 8081414:	691b      	ldr	r3, [r3, #16]
 8081416:	4798      	blx	r3
 8081418:	2800      	cmp	r0, #0
 808141a:	ddf2      	ble.n	8081402 <_Z7echoGpsv+0x2>
            gps_byte = Serial5.read();
 808141c:	f7ff fc98 	bl	8080d50 <_Z22__fetch_global_Serial5v>
 8081420:	6803      	ldr	r3, [r0, #0]
 8081422:	695b      	ldr	r3, [r3, #20]
 8081424:	4798      	blx	r3
 8081426:	4604      	mov	r4, r0
            Serial.print(gps_byte);
 8081428:	f00a f90c 	bl	808b644 <_Z16_fetch_usbserialv>
 808142c:	b2e1      	uxtb	r1, r4
 808142e:	f009 f861 	bl	808a4f4 <_ZN5Print5printEc>
 8081432:	e7e6      	b.n	8081402 <_Z7echoGpsv+0x2>
 8081434:	bd10      	pop	{r4, pc}
	...

08081438 <_Z11printPacketPhh>:
    printPacket(packet, len);
}

// Print the packet specified to the PC serial in a hexadecimal form.
void printPacket(byte *packet, byte len)
{
 8081438:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 808143a:	4606      	mov	r6, r0
 808143c:	460d      	mov	r5, r1
 808143e:	2400      	movs	r4, #0
    for (byte i = 0; i < len; i++)
    {
        sprintf(temp, "%.2X", packet[i]);
        Serial.print(temp);

        if (i != len - 1)
 8081440:	1e4f      	subs	r7, r1, #1
// Print the packet specified to the PC serial in a hexadecimal form.
void printPacket(byte *packet, byte len)
{
    char temp[3];

    for (byte i = 0; i < len; i++)
 8081442:	42ac      	cmp	r4, r5
 8081444:	d012      	beq.n	808146c <_Z11printPacketPhh+0x34>
    {
        sprintf(temp, "%.2X", packet[i]);
 8081446:	5d32      	ldrb	r2, [r6, r4]
 8081448:	490b      	ldr	r1, [pc, #44]	; (8081478 <_Z11printPacketPhh+0x40>)
 808144a:	a801      	add	r0, sp, #4
 808144c:	f008 fa94 	bl	8089978 <sprintf>
        Serial.print(temp);
 8081450:	f00a f8f8 	bl	808b644 <_Z16_fetch_usbserialv>
 8081454:	a901      	add	r1, sp, #4
 8081456:	f009 f849 	bl	808a4ec <_ZN5Print5printEPKc>

        if (i != len - 1)
 808145a:	42a7      	cmp	r7, r4
 808145c:	d004      	beq.n	8081468 <_Z11printPacketPhh+0x30>
        {
            Serial.print(' ');
 808145e:	f00a f8f1 	bl	808b644 <_Z16_fetch_usbserialv>
 8081462:	2120      	movs	r1, #32
 8081464:	f009 f846 	bl	808a4f4 <_ZN5Print5printEc>
 8081468:	3401      	adds	r4, #1
// Print the packet specified to the PC serial in a hexadecimal form.
void printPacket(byte *packet, byte len)
{
    char temp[3];

    for (byte i = 0; i < len; i++)
 808146a:	e7ea      	b.n	8081442 <_Z11printPacketPhh+0xa>
        {
            Serial.print(' ');
        }
    }

    Serial.println();
 808146c:	f00a f8ea 	bl	808b644 <_Z16_fetch_usbserialv>
 8081470:	f009 f843 	bl	808a4fa <_ZN5Print7printlnEv>
}
 8081474:	b003      	add	sp, #12
 8081476:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8081478:	08090898 	.word	0x08090898

0808147c <_Z10sendPacketPhh>:
    sendPacket(packet, sizeof(packet));
}

// Send the packet specified to the receiver.
void sendPacket(byte *packet, byte len)
{
 808147c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808147e:	4604      	mov	r4, r0
 8081480:	460f      	mov	r7, r1
 8081482:	1e4e      	subs	r6, r1, #1
 8081484:	1e45      	subs	r5, r0, #1
 8081486:	4406      	add	r6, r0
    for (byte i = 0; i < len; i++)
 8081488:	42b5      	cmp	r5, r6
 808148a:	d007      	beq.n	808149c <_Z10sendPacketPhh+0x20>
    {
        Serial5.write(packet[i]);
 808148c:	f7ff fc60 	bl	8080d50 <_Z22__fetch_global_Serial5v>
 8081490:	6803      	ldr	r3, [r0, #0]
 8081492:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8081496:	689b      	ldr	r3, [r3, #8]
 8081498:	4798      	blx	r3
}

// Send the packet specified to the receiver.
void sendPacket(byte *packet, byte len)
{
    for (byte i = 0; i < len; i++)
 808149a:	e7f5      	b.n	8081488 <_Z10sendPacketPhh+0xc>
    {
        Serial5.write(packet[i]);
    }

    printPacket(packet, len);
 808149c:	4639      	mov	r1, r7
 808149e:	4620      	mov	r0, r4
}
 80814a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    for (byte i = 0; i < len; i++)
    {
        Serial5.write(packet[i]);
    }

    printPacket(packet, len);
 80814a4:	f7ff bfc8 	b.w	8081438 <_Z11printPacketPhh>

080814a8 <_Z19enableContinuousGPSv>:

    sendPacket(packet, sizeof(packet));
}

void enableContinuousGPS()
{
 80814a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        0x00, // length
        0x00, // payload
        0x00, // payload
        0x1A, // CK_A
        0x83, // CK_B
    };
 80814aa:	4a07      	ldr	r2, [pc, #28]	; (80814c8 <_Z19enableContinuousGPSv+0x20>)
 80814ac:	ab01      	add	r3, sp, #4
 80814ae:	f852 0f0e 	ldr.w	r0, [r2, #14]!
 80814b2:	6851      	ldr	r1, [r2, #4]
 80814b4:	8912      	ldrh	r2, [r2, #8]
 80814b6:	c303      	stmia	r3!, {r0, r1}

    sendPacket(packet, sizeof(packet));
 80814b8:	210a      	movs	r1, #10
 80814ba:	a801      	add	r0, sp, #4
        0x00, // length
        0x00, // payload
        0x00, // payload
        0x1A, // CK_A
        0x83, // CK_B
    };
 80814bc:	801a      	strh	r2, [r3, #0]

    sendPacket(packet, sizeof(packet));
 80814be:	f7ff ffdd 	bl	808147c <_Z10sendPacketPhh>
}
 80814c2:	b005      	add	sp, #20
 80814c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80814c8:	08090788 	.word	0x08090788

080814cc <_Z17enableLowPowerGPSv>:

void enableLowPowerGPS()
{
 80814cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        0x00, // length
        0x01, // payload
        0x00, // payload
        0x1A, // CK_A
        0x83, // CK_B
    };
 80814ce:	4a07      	ldr	r2, [pc, #28]	; (80814ec <_Z17enableLowPowerGPSv+0x20>)
 80814d0:	ab01      	add	r3, sp, #4
 80814d2:	f852 0f18 	ldr.w	r0, [r2, #24]!
 80814d6:	6851      	ldr	r1, [r2, #4]
 80814d8:	8912      	ldrh	r2, [r2, #8]
 80814da:	c303      	stmia	r3!, {r0, r1}

    sendPacket(packet, sizeof(packet));
 80814dc:	210a      	movs	r1, #10
 80814de:	a801      	add	r0, sp, #4
        0x00, // length
        0x01, // payload
        0x00, // payload
        0x1A, // CK_A
        0x83, // CK_B
    };
 80814e0:	801a      	strh	r2, [r3, #0]

    sendPacket(packet, sizeof(packet));
 80814e2:	f7ff ffcb 	bl	808147c <_Z10sendPacketPhh>
}
 80814e6:	b005      	add	sp, #20
 80814e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80814ec:	08090788 	.word	0x08090788

080814f0 <_Z15readTemperaturev>:
    }

    Serial.println();
}

float readTemperature(void){
 80814f0:	b538      	push	{r3, r4, r5, lr}
    float temperature = 0;
    if(hih8120_enabled){
 80814f2:	4b31      	ldr	r3, [pc, #196]	; (80815b8 <_Z15readTemperaturev+0xc8>)
 80814f4:	4d31      	ldr	r5, [pc, #196]	; (80815bc <_Z15readTemperaturev+0xcc>)
 80814f6:	681b      	ldr	r3, [r3, #0]
 80814f8:	b1b3      	cbz	r3, 8081528 <_Z15readTemperaturev+0x38>
        //  convert humidity / temperature
        static float rawToHumidity(uint16_t raw) {
            return float(raw) / 16382;
        }
        static float rawToTemperature(uint16_t raw) {
            return (float(raw) / 16382) * 165 - 40;
 80814fa:	4b31      	ldr	r3, [pc, #196]	; (80815c0 <_Z15readTemperaturev+0xd0>)
 80814fc:	8958      	ldrh	r0, [r3, #10]
 80814fe:	f00b fbf9 	bl	808ccf4 <__aeabi_ui2f>
 8081502:	4930      	ldr	r1, [pc, #192]	; (80815c4 <_Z15readTemperaturev+0xd4>)
 8081504:	f00b fd02 	bl	808cf0c <__aeabi_fdiv>
 8081508:	492f      	ldr	r1, [pc, #188]	; (80815c8 <_Z15readTemperaturev+0xd8>)
 808150a:	f00b fc4b 	bl	808cda4 <__aeabi_fmul>
 808150e:	492f      	ldr	r1, [pc, #188]	; (80815cc <_Z15readTemperaturev+0xdc>)
 8081510:	f00b fb3e 	bl	808cb90 <__aeabi_fsub>
        temperature = hih.temperature();
        if(debugging_enabled){
 8081514:	682b      	ldr	r3, [r5, #0]
 8081516:	4604      	mov	r4, r0
 8081518:	2b00      	cmp	r3, #0
 808151a:	d035      	beq.n	8081588 <_Z15readTemperaturev+0x98>
            Serial.println("Temperature reading from HIH8120");
 808151c:	f00a f892 	bl	808b644 <_Z16_fetch_usbserialv>
 8081520:	492b      	ldr	r1, [pc, #172]	; (80815d0 <_Z15readTemperaturev+0xe0>)
 8081522:	f008 fff6 	bl	808a512 <_ZN5Print7printlnEPKc>
 8081526:	e02f      	b.n	8081588 <_Z15readTemperaturev+0x98>
        }
    }else if(new_temperature_sensor_enabled){
 8081528:	4b2a      	ldr	r3, [pc, #168]	; (80815d4 <_Z15readTemperaturev+0xe4>)
 808152a:	681b      	ldr	r3, [r3, #0]
 808152c:	b31b      	cbz	r3, 8081576 <_Z15readTemperaturev+0x86>
        if(debugging_enabled){
 808152e:	682b      	ldr	r3, [r5, #0]
 8081530:	b123      	cbz	r3, 808153c <_Z15readTemperaturev+0x4c>
            Serial.println("Temperature reading from TMP36");
 8081532:	f00a f887 	bl	808b644 <_Z16_fetch_usbserialv>
 8081536:	4928      	ldr	r1, [pc, #160]	; (80815d8 <_Z15readTemperaturev+0xe8>)
 8081538:	f008 ffeb 	bl	808a512 <_ZN5Print7printlnEPKc>
        }
        temperature = analogRead(A1);
 808153c:	200b      	movs	r0, #11
 808153e:	f00a fc20 	bl	808bd82 <analogRead>


        temperature *= VOLTS_PER_UNIT;
 8081542:	f00b fbdb 	bl	808ccfc <__aeabi_i2f>
 8081546:	f00a ff83 	bl	808c450 <__aeabi_f2d>
 808154a:	a317      	add	r3, pc, #92	; (adr r3, 80815a8 <_Z15readTemperaturev+0xb8>)
 808154c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081550:	f00a ffd2 	bl	808c4f8 <__aeabi_dmul>
 8081554:	f00b fac8 	bl	808cae8 <__aeabi_d2f>

        temperature -= TMP36_OFFSET;
        temperature /= TMP36_VPDC;
 8081558:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 808155c:	f00b fb18 	bl	808cb90 <__aeabi_fsub>
 8081560:	f00a ff76 	bl	808c450 <__aeabi_f2d>
 8081564:	a312      	add	r3, pc, #72	; (adr r3, 80815b0 <_Z15readTemperaturev+0xc0>)
 8081566:	e9d3 2300 	ldrd	r2, r3, [r3]
 808156a:	f00b f8ef 	bl	808c74c <__aeabi_ddiv>
 808156e:	f00b fabb 	bl	808cae8 <__aeabi_d2f>
 8081572:	4604      	mov	r4, r0
 8081574:	e008      	b.n	8081588 <_Z15readTemperaturev+0x98>
    }else{
        if(debugging_enabled){
 8081576:	682b      	ldr	r3, [r5, #0]
 8081578:	b123      	cbz	r3, 8081584 <_Z15readTemperaturev+0x94>
            Serial.println("Temperature reading from BME for Alphasense");
 808157a:	f00a f863 	bl	808b644 <_Z16_fetch_usbserialv>
 808157e:	4917      	ldr	r1, [pc, #92]	; (80815dc <_Z15readTemperaturev+0xec>)
 8081580:	f008 ffc7 	bl	808a512 <_ZN5Print7printlnEPKc>

          }
        temperature = bme.temperature;
 8081584:	4b16      	ldr	r3, [pc, #88]	; (80815e0 <_Z15readTemperaturev+0xf0>)
 8081586:	681c      	ldr	r4, [r3, #0]
    }
    //temperature *= 100;

    temperature *= temp_slope;
 8081588:	4b16      	ldr	r3, [pc, #88]	; (80815e4 <_Z15readTemperaturev+0xf4>)
 808158a:	4620      	mov	r0, r4
 808158c:	6819      	ldr	r1, [r3, #0]
 808158e:	f00b fc09 	bl	808cda4 <__aeabi_fmul>
 8081592:	4604      	mov	r4, r0
    temperature += temp_zero;       //user input zero offset
 8081594:	4b14      	ldr	r3, [pc, #80]	; (80815e8 <_Z15readTemperaturev+0xf8>)

    return temperature;
 8081596:	6818      	ldr	r0, [r3, #0]
 8081598:	f00b fbb0 	bl	808ccfc <__aeabi_i2f>
 808159c:	4621      	mov	r1, r4
 808159e:	f00b faf9 	bl	808cb94 <__addsf3>
    //temperature = temperature +
}
 80815a2:	bd38      	pop	{r3, r4, r5, pc}
 80815a4:	f3af 8000 	nop.w
 80815a8:	eb1c432d 	.word	0xeb1c432d
 80815ac:	3f4a36e2 	.word	0x3f4a36e2
 80815b0:	47ae147b 	.word	0x47ae147b
 80815b4:	3f847ae1 	.word	0x3f847ae1
 80815b8:	200001f4 	.word	0x200001f4
 80815bc:	20000af8 	.word	0x20000af8
 80815c0:	200008d4 	.word	0x200008d4
 80815c4:	467ff800 	.word	0x467ff800
 80815c8:	43250000 	.word	0x43250000
 80815cc:	42200000 	.word	0x42200000
 80815d0:	0809089d 	.word	0x0809089d
 80815d4:	20000778 	.word	0x20000778
 80815d8:	080908be 	.word	0x080908be
 80815dc:	080908dd 	.word	0x080908dd
 80815e0:	200006f8 	.word	0x200006f8
 80815e4:	200007e4 	.word	0x200007e4
 80815e8:	20000ad8 	.word	0x20000ad8

080815ec <_Z12readHumidityv>:

float readHumidity(void){
 80815ec:	b538      	push	{r3, r4, r5, lr}
    float humidity;
    if(hih8120_enabled){
 80815ee:	4b19      	ldr	r3, [pc, #100]	; (8081654 <_Z12readHumidityv+0x68>)
 80815f0:	4d19      	ldr	r5, [pc, #100]	; (8081658 <_Z12readHumidityv+0x6c>)
 80815f2:	681b      	ldr	r3, [r3, #0]
 80815f4:	b183      	cbz	r3, 8081618 <_Z12readHumidityv+0x2c>
        humidity = hih.humidity();
        humidity *= 100;
 80815f6:	4b19      	ldr	r3, [pc, #100]	; (808165c <_Z12readHumidityv+0x70>)
 80815f8:	8918      	ldrh	r0, [r3, #8]
 80815fa:	f00b fb7b 	bl	808ccf4 <__aeabi_ui2f>
 80815fe:	4918      	ldr	r1, [pc, #96]	; (8081660 <_Z12readHumidityv+0x74>)
 8081600:	f00b fc84 	bl	808cf0c <__aeabi_fdiv>
 8081604:	4917      	ldr	r1, [pc, #92]	; (8081664 <_Z12readHumidityv+0x78>)
 8081606:	f00b fbcd 	bl	808cda4 <__aeabi_fmul>
        if(debugging_enabled){
 808160a:	682b      	ldr	r3, [r5, #0]

float readHumidity(void){
    float humidity;
    if(hih8120_enabled){
        humidity = hih.humidity();
        humidity *= 100;
 808160c:	4604      	mov	r4, r0
        if(debugging_enabled){
 808160e:	b163      	cbz	r3, 808162a <_Z12readHumidityv+0x3e>
            Serial.println("Humidity reading from HIH8120");
 8081610:	f00a f818 	bl	808b644 <_Z16_fetch_usbserialv>
 8081614:	4914      	ldr	r1, [pc, #80]	; (8081668 <_Z12readHumidityv+0x7c>)
 8081616:	e006      	b.n	8081626 <_Z12readHumidityv+0x3a>
        }
    }else{
        humidity = bme.humidity;
 8081618:	4b14      	ldr	r3, [pc, #80]	; (808166c <_Z12readHumidityv+0x80>)
 808161a:	689c      	ldr	r4, [r3, #8]
        if(debugging_enabled){
 808161c:	682b      	ldr	r3, [r5, #0]
 808161e:	b123      	cbz	r3, 808162a <_Z12readHumidityv+0x3e>
            Serial.println("Humidity reading from BME");
 8081620:	f00a f810 	bl	808b644 <_Z16_fetch_usbserialv>
 8081624:	4912      	ldr	r1, [pc, #72]	; (8081670 <_Z12readHumidityv+0x84>)
 8081626:	f008 ff74 	bl	808a512 <_ZN5Print7printlnEPKc>
        }
    }


    humidity *= rh_slope;
 808162a:	4b12      	ldr	r3, [pc, #72]	; (8081674 <_Z12readHumidityv+0x88>)
 808162c:	4620      	mov	r0, r4
 808162e:	6819      	ldr	r1, [r3, #0]
 8081630:	f00b fbb8 	bl	808cda4 <__aeabi_fmul>
 8081634:	4604      	mov	r4, r0
    humidity += rh_zero;       //user input zero offset
 8081636:	4b10      	ldr	r3, [pc, #64]	; (8081678 <_Z12readHumidityv+0x8c>)
 8081638:	6818      	ldr	r0, [r3, #0]
 808163a:	f00b fb5f 	bl	808ccfc <__aeabi_i2f>
 808163e:	4621      	mov	r1, r4
 8081640:	f00b faa8 	bl	808cb94 <__addsf3>
    if(humidity > 100)
 8081644:	4907      	ldr	r1, [pc, #28]	; (8081664 <_Z12readHumidityv+0x78>)
        }
    }


    humidity *= rh_slope;
    humidity += rh_zero;       //user input zero offset
 8081646:	4604      	mov	r4, r0
    if(humidity > 100)
 8081648:	f00b fd68 	bl	808d11c <__aeabi_fcmpgt>
 808164c:	b100      	cbz	r0, 8081650 <_Z12readHumidityv+0x64>
        humidity = 100;
 808164e:	4c05      	ldr	r4, [pc, #20]	; (8081664 <_Z12readHumidityv+0x78>)
    return humidity;
    //temperature = temperature +
}
 8081650:	4620      	mov	r0, r4
 8081652:	bd38      	pop	{r3, r4, r5, pc}
 8081654:	200001f4 	.word	0x200001f4
 8081658:	20000af8 	.word	0x20000af8
 808165c:	200008d4 	.word	0x200008d4
 8081660:	467ff800 	.word	0x467ff800
 8081664:	42c80000 	.word	0x42c80000
 8081668:	08090909 	.word	0x08090909
 808166c:	200006f8 	.word	0x200006f8
 8081670:	08090927 	.word	0x08090927
 8081674:	200006ec 	.word	0x200006ec
 8081678:	20000770 	.word	0x20000770

0808167c <_Z7readCO2v>:
    CO_float += float_offset;

    return CO_float;
}

float readCO2(void){
 808167c:	b538      	push	{r3, r4, r5, lr}
    //read CO2 values and apply calibration factors
    if(debugging_enabled){
 808167e:	4b14      	ldr	r3, [pc, #80]	; (80816d0 <_Z7readCO2v+0x54>)
 8081680:	681b      	ldr	r3, [r3, #0]
 8081682:	b11b      	cbz	r3, 808168c <_Z7readCO2v+0x10>
        t6713.readStatus(1);
 8081684:	2101      	movs	r1, #1
 8081686:	4813      	ldr	r0, [pc, #76]	; (80816d4 <_Z7readCO2v+0x58>)
 8081688:	f005 fc8a 	bl	8086fa0 <_ZN13Telaire_T671310readStatusEi>
    }
    CO2_float = t6713.readPPM();
 808168c:	4811      	ldr	r0, [pc, #68]	; (80816d4 <_Z7readCO2v+0x58>)
 808168e:	f005 fc59 	bl	8086f44 <_ZN13Telaire_T67137readPPMEv>
 8081692:	f00b fb33 	bl	808ccfc <__aeabi_i2f>
 8081696:	4c10      	ldr	r4, [pc, #64]	; (80816d8 <_Z7readCO2v+0x5c>)

    if(CO2_float == 0){
 8081698:	2100      	movs	r1, #0
float readCO2(void){
    //read CO2 values and apply calibration factors
    if(debugging_enabled){
        t6713.readStatus(1);
    }
    CO2_float = t6713.readPPM();
 808169a:	6020      	str	r0, [r4, #0]
 808169c:	4605      	mov	r5, r0

    if(CO2_float == 0){
 808169e:	f00b fd15 	bl	808d0cc <__aeabi_fcmpeq>
 80816a2:	4b0e      	ldr	r3, [pc, #56]	; (80816dc <_Z7readCO2v+0x60>)
 80816a4:	b110      	cbz	r0, 80816ac <_Z7readCO2v+0x30>
        CO2_float = CO2_float_previous;
 80816a6:	681b      	ldr	r3, [r3, #0]
 80816a8:	6023      	str	r3, [r4, #0]
 80816aa:	e000      	b.n	80816ae <_Z7readCO2v+0x32>
    }else{
        CO2_float_previous = CO2_float;
 80816ac:	601d      	str	r5, [r3, #0]
    }

    CO2_float *= CO2_slope;
 80816ae:	4b0c      	ldr	r3, [pc, #48]	; (80816e0 <_Z7readCO2v+0x64>)
    CO2_float += CO2_zero;
 80816b0:	6820      	ldr	r0, [r4, #0]
 80816b2:	6819      	ldr	r1, [r3, #0]
 80816b4:	f00b fb76 	bl	808cda4 <__aeabi_fmul>
 80816b8:	4b0a      	ldr	r3, [pc, #40]	; (80816e4 <_Z7readCO2v+0x68>)
 80816ba:	4605      	mov	r5, r0
 80816bc:	6818      	ldr	r0, [r3, #0]
 80816be:	f00b fb1d 	bl	808ccfc <__aeabi_i2f>
 80816c2:	4601      	mov	r1, r0
 80816c4:	4628      	mov	r0, r5
 80816c6:	f00b fa65 	bl	808cb94 <__addsf3>
 80816ca:	6020      	str	r0, [r4, #0]
    
    return CO2_float;
}
 80816cc:	bd38      	pop	{r3, r4, r5, pc}
 80816ce:	bf00      	nop
 80816d0:	20000af8 	.word	0x20000af8
 80816d4:	20000b7c 	.word	0x20000b7c
 80816d8:	20000228 	.word	0x20000228
 80816dc:	20000ad0 	.word	0x20000ad0
 80816e0:	20000abc 	.word	0x20000abc
 80816e4:	20000234 	.word	0x20000234

080816e8 <_Z10readAlpha2v>:

      }
      return alpha1_ppmraw;
}

float readAlpha2(void){
 80816e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80816ec:	b08b      	sub	sp, #44	; 0x2c
    float volt_half_Vref;
    float sensorCurrent; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent;
    float correctedCurrent;
    float alpha2_ppmraw;
    String alpha2_ppmRounded;
 80816ee:	4994      	ldr	r1, [pc, #592]	; (8081940 <_Z10readAlpha2v+0x258>)
 80816f0:	a802      	add	r0, sp, #8
 80816f2:	f008 fd04 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
    if(debugging_enabled){
 80816f6:	4b93      	ldr	r3, [pc, #588]	; (8081944 <_Z10readAlpha2v+0x25c>)
 80816f8:	681a      	ldr	r2, [r3, #0]
 80816fa:	469b      	mov	fp, r3
 80816fc:	b122      	cbz	r2, 8081708 <_Z10readAlpha2v+0x20>
        Serial.println("Start of alpha 2 read");
 80816fe:	f009 ffa1 	bl	808b644 <_Z16_fetch_usbserialv>
 8081702:	4991      	ldr	r1, [pc, #580]	; (8081948 <_Z10readAlpha2v+0x260>)
 8081704:	f008 ff05 	bl	808a512 <_ZN5Print7printlnEPKc>
    }
    digitalWrite(lmp91000_2_en, LOW);   //enable
 8081708:	4c90      	ldr	r4, [pc, #576]	; (808194c <_Z10readAlpha2v+0x264>)
 808170a:	2100      	movs	r1, #0
 808170c:	8820      	ldrh	r0, [r4, #0]
 808170e:	f00a fb0c 	bl	808bd2a <digitalWrite>

    if(Wire.requestFrom(0x4A,1) == 0){
 8081712:	f00a fba7 	bl	808be64 <_Z19__fetch_global_Wirev>
 8081716:	2201      	movs	r2, #1
 8081718:	214a      	movs	r1, #74	; 0x4a
 808171a:	f00a f96b 	bl	808b9f4 <_ZN7TwoWire11requestFromEii>
 808171e:	4627      	mov	r7, r4
 8081720:	b928      	cbnz	r0, 808172e <_Z10readAlpha2v+0x46>
        Serial.println("Couldn't communicate with LMP91000 2");
 8081722:	f009 ff8f 	bl	808b644 <_Z16_fetch_usbserialv>
 8081726:	498a      	ldr	r1, [pc, #552]	; (8081950 <_Z10readAlpha2v+0x268>)
 8081728:	f008 fef3 	bl	808a512 <_ZN5Print7printlnEPKc>
 808172c:	e02e      	b.n	808178c <_Z10readAlpha2v+0xa4>
        //digitalWrite(red_status_led, HIGH);
        //delay(200);
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }else{
        half_Vref = ads2.readADC_SingleEnded(3); //half of Vref
 808172e:	2103      	movs	r1, #3
 8081730:	4888      	ldr	r0, [pc, #544]	; (8081954 <_Z10readAlpha2v+0x26c>)
 8081732:	f005 faa2 	bl	8086c7a <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
        volt_half_Vref = half_Vref * ads_bitmv;
 8081736:	f00b fae1 	bl	808ccfc <__aeabi_i2f>
 808173a:	4b87      	ldr	r3, [pc, #540]	; (8081958 <_Z10readAlpha2v+0x270>)
 808173c:	6819      	ldr	r1, [r3, #0]
 808173e:	f00b fb31 	bl	808cda4 <__aeabi_fmul>
        if(abs((volt_half_Vref)/1000 - 1.25) > 0.5){
 8081742:	4986      	ldr	r1, [pc, #536]	; (808195c <_Z10readAlpha2v+0x274>)
        //delay(200);
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }else{
        half_Vref = ads2.readADC_SingleEnded(3); //half of Vref
        volt_half_Vref = half_Vref * ads_bitmv;
 8081744:	4682      	mov	sl, r0
        if(abs((volt_half_Vref)/1000 - 1.25) > 0.5){
 8081746:	f00b fbe1 	bl	808cf0c <__aeabi_fdiv>
 808174a:	f00a fe81 	bl	808c450 <__aeabi_f2d>
 808174e:	2200      	movs	r2, #0
 8081750:	4b83      	ldr	r3, [pc, #524]	; (8081960 <_Z10readAlpha2v+0x278>)
 8081752:	4680      	mov	r8, r0
 8081754:	4689      	mov	r9, r1
 8081756:	f00a fd1b 	bl	808c190 <__aeabi_dsub>
 808175a:	f00b f97d 	bl	808ca58 <__aeabi_d2iz>
 808175e:	2800      	cmp	r0, #0
 8081760:	bfb8      	it	lt
 8081762:	4240      	neglt	r0, r0
 8081764:	f00a fe62 	bl	808c42c <__aeabi_i2d>
 8081768:	2200      	movs	r2, #0
 808176a:	4b7e      	ldr	r3, [pc, #504]	; (8081964 <_Z10readAlpha2v+0x27c>)
 808176c:	f00b f954 	bl	808ca18 <__aeabi_dcmpgt>
 8081770:	b160      	cbz	r0, 808178c <_Z10readAlpha2v+0xa4>
          //operation_log += "AD1_VREF2,";
          //digitalWrite(red_status_led, HIGH);
          //delay(200);
          //digitalWrite(red_status_led, LOW);
          //delay(200);
          Serial.print("half vref2 ads1");
 8081772:	f009 ff67 	bl	808b644 <_Z16_fetch_usbserialv>
 8081776:	497c      	ldr	r1, [pc, #496]	; (8081968 <_Z10readAlpha2v+0x280>)
 8081778:	f008 feb8 	bl	808a4ec <_ZN5Print5printEPKc>
          Serial.println(volt_half_Vref/1000);
 808177c:	f009 ff62 	bl	808b644 <_Z16_fetch_usbserialv>
 8081780:	2302      	movs	r3, #2
 8081782:	9300      	str	r3, [sp, #0]
 8081784:	4642      	mov	r2, r8
 8081786:	464b      	mov	r3, r9
 8081788:	f008 ffea 	bl	808a760 <_ZN5Print7printlnEdi>

        }
    }

    if(lmp91000.read(LMP91000_STATUS_REG) == 0){
 808178c:	2100      	movs	r1, #0
 808178e:	4877      	ldr	r0, [pc, #476]	; (808196c <_Z10readAlpha2v+0x284>)
 8081790:	f005 f91d 	bl	80869ce <_ZN8LMP910004readEh>
 8081794:	b938      	cbnz	r0, 80817a6 <_Z10readAlpha2v+0xbe>
        if(debugging_enabled)
 8081796:	f8db 3000 	ldr.w	r3, [fp]
 808179a:	b123      	cbz	r3, 80817a6 <_Z10readAlpha2v+0xbe>
            Serial.println("Status == 0 from LMP91000 2 status reg");
 808179c:	f009 ff52 	bl	808b644 <_Z16_fetch_usbserialv>
 80817a0:	4973      	ldr	r1, [pc, #460]	; (8081970 <_Z10readAlpha2v+0x288>)
 80817a2:	f008 feb6 	bl	808a512 <_ZN5Print7printlnEPKc>
        //delay(200);
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }

    if(Wire.requestFrom(0x4A,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref)/1000 - 1.25) > 0.5)){
 80817a6:	f00a fb5d 	bl	808be64 <_Z19__fetch_global_Wirev>
 80817aa:	2201      	movs	r2, #1
 80817ac:	214a      	movs	r1, #74	; 0x4a
 80817ae:	f00a f921 	bl	808b9f4 <_ZN7TwoWire11requestFromEii>
 80817b2:	2800      	cmp	r0, #0
 80817b4:	f000 80ac 	beq.w	8081910 <_Z10readAlpha2v+0x228>
 80817b8:	2100      	movs	r1, #0
 80817ba:	486c      	ldr	r0, [pc, #432]	; (808196c <_Z10readAlpha2v+0x284>)
 80817bc:	f005 f907 	bl	80869ce <_ZN8LMP910004readEh>
 80817c0:	2800      	cmp	r0, #0
 80817c2:	f000 80a5 	beq.w	8081910 <_Z10readAlpha2v+0x228>
 80817c6:	4965      	ldr	r1, [pc, #404]	; (808195c <_Z10readAlpha2v+0x274>)
 80817c8:	4650      	mov	r0, sl
 80817ca:	f00b fb9f 	bl	808cf0c <__aeabi_fdiv>
 80817ce:	f00a fe3f 	bl	808c450 <__aeabi_f2d>
 80817d2:	2200      	movs	r2, #0
 80817d4:	4b62      	ldr	r3, [pc, #392]	; (8081960 <_Z10readAlpha2v+0x278>)
 80817d6:	f00a fcdb 	bl	808c190 <__aeabi_dsub>
 80817da:	f00b f93d 	bl	808ca58 <__aeabi_d2iz>
 80817de:	2800      	cmp	r0, #0
 80817e0:	bfb8      	it	lt
 80817e2:	4240      	neglt	r0, r0
 80817e4:	f00a fe22 	bl	808c42c <__aeabi_i2d>
 80817e8:	2200      	movs	r2, #0
 80817ea:	4b5e      	ldr	r3, [pc, #376]	; (8081964 <_Z10readAlpha2v+0x27c>)
 80817ec:	f00b f914 	bl	808ca18 <__aeabi_dcmpgt>
 80817f0:	2800      	cmp	r0, #0
 80817f2:	f040 808d 	bne.w	8081910 <_Z10readAlpha2v+0x228>
 80817f6:	4604      	mov	r4, r0
 80817f8:	4680      	mov	r8, r0
 80817fa:	4681      	mov	r9, r0
 80817fc:	250a      	movs	r5, #10
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
          A0_gas += ads2.readADC_SingleEnded(0); //gas
 80817fe:	2100      	movs	r1, #0
 8081800:	4854      	ldr	r0, [pc, #336]	; (8081954 <_Z10readAlpha2v+0x26c>)
 8081802:	f005 fa3a 	bl	8086c7a <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          A1_aux += ads2.readADC_SingleEnded(1); //aux out
 8081806:	2101      	movs	r1, #1
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
          A0_gas += ads2.readADC_SingleEnded(0); //gas
 8081808:	4481      	add	r9, r0
          A1_aux += ads2.readADC_SingleEnded(1); //aux out
 808180a:	4852      	ldr	r0, [pc, #328]	; (8081954 <_Z10readAlpha2v+0x26c>)
 808180c:	f005 fa35 	bl	8086c7a <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          A2_temperature += ads2.readADC_SingleEnded(2); //temperature
 8081810:	2102      	movs	r1, #2
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
          A0_gas += ads2.readADC_SingleEnded(0); //gas
          A1_aux += ads2.readADC_SingleEnded(1); //aux out
 8081812:	4480      	add	r8, r0
          A2_temperature += ads2.readADC_SingleEnded(2); //temperature
 8081814:	484f      	ldr	r0, [pc, #316]	; (8081954 <_Z10readAlpha2v+0x26c>)
 8081816:	f005 fa30 	bl	8086c7a <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          half_Vref += ads2.readADC_SingleEnded(3); //half of Vref
 808181a:	2103      	movs	r1, #3
 808181c:	484d      	ldr	r0, [pc, #308]	; (8081954 <_Z10readAlpha2v+0x26c>)
 808181e:	f005 fa2c 	bl	8086c7a <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
    }else{
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
 8081822:	3d01      	subs	r5, #1
          A0_gas += ads2.readADC_SingleEnded(0); //gas
          A1_aux += ads2.readADC_SingleEnded(1); //aux out
          A2_temperature += ads2.readADC_SingleEnded(2); //temperature
          half_Vref += ads2.readADC_SingleEnded(3); //half of Vref
 8081824:	4404      	add	r4, r0
    }else{
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
 8081826:	d1ea      	bne.n	80817fe <_Z10readAlpha2v+0x116>
        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;

        volt0_gas = A0_gas * ads_bitmv;
 8081828:	4b4b      	ldr	r3, [pc, #300]	; (8081958 <_Z10readAlpha2v+0x270>)
        volt1_aux = A1_aux * ads_bitmv;
        volt2_temperature = A2_temperature * ads_bitmv;
        volt_half_Vref = half_Vref * ads_bitmv;
 808182a:	250a      	movs	r5, #10
        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;

        volt0_gas = A0_gas * ads_bitmv;
 808182c:	f8d3 a000 	ldr.w	sl, [r3]
        volt1_aux = A1_aux * ads_bitmv;
        volt2_temperature = A2_temperature * ads_bitmv;
        volt_half_Vref = half_Vref * ads_bitmv;
 8081830:	fb94 f0f5 	sdiv	r0, r4, r5
 8081834:	f00b fa62 	bl	808ccfc <__aeabi_i2f>
 8081838:	4651      	mov	r1, sl
 808183a:	f00b fab3 	bl	808cda4 <__aeabi_fmul>
 808183e:	4604      	mov	r4, r0

        sensorCurrent = (volt_half_Vref - volt0_gas) / (-1*120); // Working Electrode current in microamps (millivolts / Kohms)
 8081840:	fb99 f0f5 	sdiv	r0, r9, r5
 8081844:	f00b fa5a 	bl	808ccfc <__aeabi_i2f>
 8081848:	4651      	mov	r1, sl
 808184a:	f00b faab 	bl	808cda4 <__aeabi_fmul>
 808184e:	4601      	mov	r1, r0
 8081850:	4620      	mov	r0, r4
 8081852:	f00b f99d 	bl	808cb90 <__aeabi_fsub>
 8081856:	4947      	ldr	r1, [pc, #284]	; (8081974 <_Z10readAlpha2v+0x28c>)
 8081858:	f00b fb58 	bl	808cf0c <__aeabi_fdiv>
 808185c:	4681      	mov	r9, r0
        auxCurrent = (volt_half_Vref - volt1_aux) / (-1*150);
 808185e:	fb98 f0f5 	sdiv	r0, r8, r5
 8081862:	f00b fa4b 	bl	808ccfc <__aeabi_i2f>
 8081866:	4651      	mov	r1, sl
 8081868:	f00b fa9c 	bl	808cda4 <__aeabi_fmul>
 808186c:	4601      	mov	r1, r0
 808186e:	4620      	mov	r0, r4
 8081870:	f00b f98e 	bl	808cb90 <__aeabi_fsub>
 8081874:	4940      	ldr	r1, [pc, #256]	; (8081978 <_Z10readAlpha2v+0x290>)
 8081876:	f00b fb49 	bl	808cf0c <__aeabi_fdiv>
 808187a:	4604      	mov	r4, r0
        //{1, -1, -0.76}, //CO-A4 (<=10C, 20C, >=30C)
        if(readTemperature() <= 15){
 808187c:	f7ff fe38 	bl	80814f0 <_Z15readTemperaturev>
 8081880:	493e      	ldr	r1, [pc, #248]	; (808197c <_Z10readAlpha2v+0x294>)
 8081882:	f00b fc37 	bl	808d0f4 <__aeabi_fcmple>
 8081886:	b120      	cbz	r0, 8081892 <_Z10readAlpha2v+0x1aa>
          correctedCurrent = ((sensorCurrent) - (auxCurrent));
 8081888:	4621      	mov	r1, r4
 808188a:	4648      	mov	r0, r9
 808188c:	f00b f980 	bl	808cb90 <__aeabi_fsub>
 8081890:	e025      	b.n	80818de <_Z10readAlpha2v+0x1f6>
        }
        else if(readTemperature() <= 25){
 8081892:	f7ff fe2d 	bl	80814f0 <_Z15readTemperaturev>
 8081896:	493a      	ldr	r1, [pc, #232]	; (8081980 <_Z10readAlpha2v+0x298>)
 8081898:	f00b fc2c 	bl	808d0f4 <__aeabi_fcmple>
 808189c:	b120      	cbz	r0, 80818a8 <_Z10readAlpha2v+0x1c0>
          correctedCurrent = ((sensorCurrent) - (-1)*(auxCurrent));
 808189e:	4621      	mov	r1, r4
 80818a0:	4648      	mov	r0, r9
 80818a2:	f00b f977 	bl	808cb94 <__addsf3>
 80818a6:	e01a      	b.n	80818de <_Z10readAlpha2v+0x1f6>
        }
        else if(readTemperature() > 25){
 80818a8:	f7ff fe22 	bl	80814f0 <_Z15readTemperaturev>
 80818ac:	4934      	ldr	r1, [pc, #208]	; (8081980 <_Z10readAlpha2v+0x298>)
 80818ae:	f00b fc35 	bl	808d11c <__aeabi_fcmpgt>
 80818b2:	b1a8      	cbz	r0, 80818e0 <_Z10readAlpha2v+0x1f8>
          correctedCurrent = ((sensorCurrent) - (-0.76)*(auxCurrent));
 80818b4:	4620      	mov	r0, r4
 80818b6:	f00a fdcb 	bl	808c450 <__aeabi_f2d>
 80818ba:	a31d      	add	r3, pc, #116	; (adr r3, 8081930 <_Z10readAlpha2v+0x248>)
 80818bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80818c0:	f00a fe1a 	bl	808c4f8 <__aeabi_dmul>
 80818c4:	4604      	mov	r4, r0
 80818c6:	4648      	mov	r0, r9
 80818c8:	460d      	mov	r5, r1
 80818ca:	f00a fdc1 	bl	808c450 <__aeabi_f2d>
 80818ce:	4602      	mov	r2, r0
 80818d0:	460b      	mov	r3, r1
 80818d2:	4620      	mov	r0, r4
 80818d4:	4629      	mov	r1, r5
 80818d6:	f00a fc5d 	bl	808c194 <__adddf3>
 80818da:	f00b f905 	bl	808cae8 <__aeabi_d2f>
 80818de:	4606      	mov	r6, r0
        }
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 80818e0:	4630      	mov	r0, r6
 80818e2:	f00a fdb5 	bl	808c450 <__aeabi_f2d>
 80818e6:	a314      	add	r3, pc, #80	; (adr r3, 8081938 <_Z10readAlpha2v+0x250>)
 80818e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80818ec:	f00a ff2e 	bl	808c74c <__aeabi_ddiv>
 80818f0:	f00b f8fa 	bl	808cae8 <__aeabi_d2f>
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
 80818f4:	2202      	movs	r2, #2
 80818f6:	4601      	mov	r1, r0
          correctedCurrent = ((sensorCurrent) - (-1)*(auxCurrent));
        }
        else if(readTemperature() > 25){
          correctedCurrent = ((sensorCurrent) - (-0.76)*(auxCurrent));
        }
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 80818f8:	4605      	mov	r5, r0
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
 80818fa:	a806      	add	r0, sp, #24
 80818fc:	f008 fc99 	bl	808a232 <_ZN6StringC1Efi>
 8081900:	a906      	add	r1, sp, #24
 8081902:	a802      	add	r0, sp, #8
 8081904:	f008 fc45 	bl	808a192 <_ZN6StringaSEOS_>
 8081908:	a806      	add	r0, sp, #24
 808190a:	f008 fbb1 	bl	808a070 <_ZN6StringD1Ev>
 808190e:	e003      	b.n	8081918 <_Z10readAlpha2v+0x230>
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }

    if(Wire.requestFrom(0x4A,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref)/1000 - 1.25) > 0.5)){
        alpha2_ppmRounded = "-99";
 8081910:	491c      	ldr	r1, [pc, #112]	; (8081984 <_Z10readAlpha2v+0x29c>)
 8081912:	a802      	add	r0, sp, #8
 8081914:	f008 fc45 	bl	808a1a2 <_ZN6StringaSEPKc>
        }
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
      }

      digitalWrite(lmp91000_2_en, HIGH);  //disable
 8081918:	2101      	movs	r1, #1
 808191a:	8838      	ldrh	r0, [r7, #0]
 808191c:	f00a fa05 	bl	808bd2a <digitalWrite>
    float volt_half_Vref;
    float sensorCurrent; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent;
    float correctedCurrent;
    float alpha2_ppmraw;
    String alpha2_ppmRounded;
 8081920:	a802      	add	r0, sp, #8
 8081922:	f008 fba5 	bl	808a070 <_ZN6StringD1Ev>

      Serial.print("Volt1 Aux:");
      Serial.print(volt1_aux);
      Serial.println("Volts");*/
      return alpha2_ppmraw;
}
 8081926:	4628      	mov	r0, r5
 8081928:	b00b      	add	sp, #44	; 0x2c
 808192a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808192e:	bf00      	nop
 8081930:	851eb852 	.word	0x851eb852
 8081934:	3fe851eb 	.word	0x3fe851eb
 8081938:	d4fdf3b6 	.word	0xd4fdf3b6
 808193c:	3fd6e978 	.word	0x3fd6e978
 8081940:	08092fdc 	.word	0x08092fdc
 8081944:	20000af8 	.word	0x20000af8
 8081948:	08090987 	.word	0x08090987
 808194c:	200000d0 	.word	0x200000d0
 8081950:	0809099d 	.word	0x0809099d
 8081954:	20000ac6 	.word	0x20000ac6
 8081958:	200000a4 	.word	0x200000a4
 808195c:	447a0000 	.word	0x447a0000
 8081960:	3ff40000 	.word	0x3ff40000
 8081964:	3fe00000 	.word	0x3fe00000
 8081968:	080909c2 	.word	0x080909c2
 808196c:	2000022c 	.word	0x2000022c
 8081970:	080909d2 	.word	0x080909d2
 8081974:	c2f00000 	.word	0xc2f00000
 8081978:	c3160000 	.word	0xc3160000
 808197c:	41700000 	.word	0x41700000
 8081980:	41c80000 	.word	0x41c80000
 8081984:	080909f9 	.word	0x080909f9

08081988 <_Z12writeLogFile6String>:
    }else{
        O3_float = getEspOzoneData();
    }
}

void writeLogFile(String data){
 8081988:	b530      	push	{r4, r5, lr}
   * \param[in] csPin SD card chip select pin.
   * \param[in] divisor SPI divisor.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, uint8_t divisor = 2) {
    return SdFatBase::begin(&m_spi, csPin, divisor);
 808198a:	491e      	ldr	r1, [pc, #120]	; (8081a04 <_Z12writeLogFile6String+0x7c>)
 808198c:	b085      	sub	sp, #20
 808198e:	4605      	mov	r5, r0
 8081990:	2302      	movs	r3, #2
 8081992:	220c      	movs	r2, #12
 8081994:	f5a1 608e 	sub.w	r0, r1, #1136	; 0x470
 8081998:	f7ff fa14 	bl	8080dc4 <_ZN9SdFatBase5beginEP9SdSpiBasehh>
  if (sd.begin(CS)){
 808199c:	b350      	cbz	r0, 80819f4 <_Z12writeLogFile6String+0x6c>
      Serial.println("Writing data to log file.");
 808199e:	f009 fe51 	bl	808b644 <_Z16_fetch_usbserialv>
 80819a2:	4919      	ldr	r1, [pc, #100]	; (8081a08 <_Z12writeLogFile6String+0x80>)
 80819a4:	f008 fdb5 	bl	808a512 <_ZN5Print7printlnEPKc>
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, uint8_t oflag = O_READ) {
    return open(m_cwd, path, oflag);
 80819a8:	4a18      	ldr	r2, [pc, #96]	; (8081a0c <_Z12writeLogFile6String+0x84>)
 80819aa:	4919      	ldr	r1, [pc, #100]	; (8081a10 <_Z12writeLogFile6String+0x88>)
      log_file.open(logFileName, O_CREAT | O_APPEND | O_WRITE);
      if(log_file_started == 0){
 80819ac:	4c19      	ldr	r4, [pc, #100]	; (8081a14 <_Z12writeLogFile6String+0x8c>)
 80819ae:	2346      	movs	r3, #70	; 0x46
 80819b0:	6812      	ldr	r2, [r2, #0]
 80819b2:	6809      	ldr	r1, [r1, #0]
 80819b4:	4818      	ldr	r0, [pc, #96]	; (8081a18 <_Z12writeLogFile6String+0x90>)
 80819b6:	f006 fc74 	bl	80882a2 <_ZN7FatFile4openEPS_PKch>
 80819ba:	6823      	ldr	r3, [r4, #0]
 80819bc:	b993      	cbnz	r3, 80819e4 <_Z12writeLogFile6String+0x5c>
          log_file.println("File Start timestamp: ");
 80819be:	4917      	ldr	r1, [pc, #92]	; (8081a1c <_Z12writeLogFile6String+0x94>)
 80819c0:	4817      	ldr	r0, [pc, #92]	; (8081a20 <_Z12writeLogFile6String+0x98>)
 80819c2:	f008 fda6 	bl	808a512 <_ZN5Print7printlnEPKc>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
 80819c6:	f009 f900 	bl	808abca <_ZN9TimeClass3nowEv>
 80819ca:	4601      	mov	r1, r0
 80819cc:	4668      	mov	r0, sp
 80819ce:	f009 f829 	bl	808aa24 <_ZN9TimeClass7timeStrEl>
          log_file.println(Time.timeStr());
 80819d2:	9900      	ldr	r1, [sp, #0]
 80819d4:	4812      	ldr	r0, [pc, #72]	; (8081a20 <_Z12writeLogFile6String+0x98>)
 80819d6:	f008 fd9c 	bl	808a512 <_ZN5Print7printlnEPKc>
 80819da:	4668      	mov	r0, sp
 80819dc:	f008 fb48 	bl	808a070 <_ZN6StringD1Ev>
          log_file_started = 1;
 80819e0:	2301      	movs	r3, #1
 80819e2:	6023      	str	r3, [r4, #0]
      }
      log_file.println(data);
 80819e4:	6829      	ldr	r1, [r5, #0]
 80819e6:	480e      	ldr	r0, [pc, #56]	; (8081a20 <_Z12writeLogFile6String+0x98>)
 80819e8:	f008 fd93 	bl	808a512 <_ZN5Print7printlnEPKc>

      log_file.close();
 80819ec:	480a      	ldr	r0, [pc, #40]	; (8081a18 <_Z12writeLogFile6String+0x90>)
 80819ee:	f006 fc51 	bl	8088294 <_ZN7FatFile5closeEv>
 80819f2:	e004      	b.n	80819fe <_Z12writeLogFile6String+0x76>
  }else{
    Serial.println("Unable to write to log file");
 80819f4:	f009 fe26 	bl	808b644 <_Z16_fetch_usbserialv>
 80819f8:	490a      	ldr	r1, [pc, #40]	; (8081a24 <_Z12writeLogFile6String+0x9c>)
 80819fa:	f008 fd8a 	bl	808a512 <_ZN5Print7printlnEPKc>
  }
}
 80819fe:	b005      	add	sp, #20
 8081a00:	bd30      	pop	{r4, r5, pc}
 8081a02:	bf00      	nop
 8081a04:	200006ac 	.word	0x200006ac
 8081a08:	080909fd 	.word	0x080909fd
 8081a0c:	200007ac 	.word	0x200007ac
 8081a10:	20000bc4 	.word	0x20000bc4
 8081a14:	200008cc 	.word	0x200008cc
 8081a18:	20000b90 	.word	0x20000b90
 8081a1c:	08090a17 	.word	0x08090a17
 8081a20:	20000b88 	.word	0x20000b88
 8081a24:	08090a2e 	.word	0x08090a2e

08081a28 <_Z13readGpsStreamv>:
/*void disableGPS(void){
    Serial.println("Turning off gps");
    String disableString = "";
    Serial5.write()
}*/
void readGpsStream(void){
 8081a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081a2a:	b08d      	sub	sp, #52	; 0x34
    String gps_sentence = "init";
 8081a2c:	4993      	ldr	r1, [pc, #588]	; (8081c7c <_Z13readGpsStreamv+0x254>)
 8081a2e:	4668      	mov	r0, sp
 8081a30:	f008 fb65 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
    int stringFound = 0;
    int error = 0;
    int comma_counter = 0;
    while(!stringFound && !error){
        gps_sentence = Serial5.readStringUntil('\r');
 8081a34:	f7ff f98c 	bl	8080d50 <_Z22__fetch_global_Serial5v>
 8081a38:	220d      	movs	r2, #13
 8081a3a:	4601      	mov	r1, r0
 8081a3c:	a808      	add	r0, sp, #32
 8081a3e:	f008 ff59 	bl	808a8f4 <_ZN6Stream15readStringUntilEc>
 8081a42:	a908      	add	r1, sp, #32
 8081a44:	4668      	mov	r0, sp
 8081a46:	f008 fba4 	bl	808a192 <_ZN6StringaSEOS_>
 8081a4a:	a808      	add	r0, sp, #32
 8081a4c:	f008 fb10 	bl	808a070 <_ZN6StringD1Ev>
        String prefix_string = gps_sentence.substring(4,7);
 8081a50:	2307      	movs	r3, #7
 8081a52:	2204      	movs	r2, #4
 8081a54:	4669      	mov	r1, sp
 8081a56:	a804      	add	r0, sp, #16
 8081a58:	f008 fcd2 	bl	808a400 <_ZNK6String9substringEjj>
        if(prefix_string.equals("GGA")){
 8081a5c:	4988      	ldr	r1, [pc, #544]	; (8081c80 <_Z13readGpsStreamv+0x258>)
 8081a5e:	a804      	add	r0, sp, #16
 8081a60:	f008 fca2 	bl	808a3a8 <_ZNK6String6equalsEPKc>
 8081a64:	4605      	mov	r5, r0
 8081a66:	b9a8      	cbnz	r0, 8081a94 <_Z13readGpsStreamv+0x6c>
            //Serial.print("prefix string: ");
            //Serial.println(prefix_string);
            //Serial.print("String:");
            //Serial.println(gps_sentence);
            stringFound = 1;
        }else if(gps_sentence.equals("init")){
 8081a68:	4984      	ldr	r1, [pc, #528]	; (8081c7c <_Z13readGpsStreamv+0x254>)
 8081a6a:	4668      	mov	r0, sp
 8081a6c:	f008 fc9c 	bl	808a3a8 <_ZNK6String6equalsEPKc>
 8081a70:	b198      	cbz	r0, 8081a9a <_Z13readGpsStreamv+0x72>
            error = 1;
            Serial.println("Error reading GPS");
 8081a72:	f009 fde7 	bl	808b644 <_Z16_fetch_usbserialv>
 8081a76:	4983      	ldr	r1, [pc, #524]	; (8081c84 <_Z13readGpsStreamv+0x25c>)
 8081a78:	f008 fd4b 	bl	808a512 <_ZN5Print7printlnEPKc>
            writeLogFile("Error reading GPS");
 8081a7c:	4981      	ldr	r1, [pc, #516]	; (8081c84 <_Z13readGpsStreamv+0x25c>)
 8081a7e:	a808      	add	r0, sp, #32
 8081a80:	f008 fb3d 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
 8081a84:	a808      	add	r0, sp, #32
 8081a86:	f7ff ff7f 	bl	8081988 <_Z12writeLogFile6String>
 8081a8a:	a808      	add	r0, sp, #32
 8081a8c:	f008 faf0 	bl	808a070 <_ZN6StringD1Ev>
            //Serial.println(prefix_string);
            //Serial.print("String:");
            //Serial.println(gps_sentence);
            stringFound = 1;
        }else if(gps_sentence.equals("init")){
            error = 1;
 8081a90:	2401      	movs	r4, #1
 8081a92:	e004      	b.n	8081a9e <_Z13readGpsStreamv+0x76>
 8081a94:	2400      	movs	r4, #0
            //
            //Serial.print("prefix string: ");
            //Serial.println(prefix_string);
            //Serial.print("String:");
            //Serial.println(gps_sentence);
            stringFound = 1;
 8081a96:	2501      	movs	r5, #1
 8081a98:	e001      	b.n	8081a9e <_Z13readGpsStreamv+0x76>
 8081a9a:	4604      	mov	r4, r0
 8081a9c:	4605      	mov	r5, r0
    int stringFound = 0;
    int error = 0;
    int comma_counter = 0;
    while(!stringFound && !error){
        gps_sentence = Serial5.readStringUntil('\r');
        String prefix_string = gps_sentence.substring(4,7);
 8081a9e:	a804      	add	r0, sp, #16
 8081aa0:	f008 fae6 	bl	808a070 <_ZN6StringD1Ev>
void readGpsStream(void){
    String gps_sentence = "init";
    int stringFound = 0;
    int error = 0;
    int comma_counter = 0;
    while(!stringFound && !error){
 8081aa4:	b915      	cbnz	r5, 8081aac <_Z13readGpsStreamv+0x84>
 8081aa6:	2c00      	cmp	r4, #0
 8081aa8:	d0c4      	beq.n	8081a34 <_Z13readGpsStreamv+0xc>
 8081aaa:	e0e2      	b.n	8081c72 <_Z13readGpsStreamv+0x24a>
                    }
                }else if(comma_counter == HORZONTAL_DILLUTION_INDEX){
                    if(gps_sentence.charAt(a+1)!=','){
                        String hdString = gps_sentence.substring(a+1,a+3);
                        gps.set_horizontalDillution(hdString);
                        status_word.status_int &= 0xFFF3;
 8081aac:	4e76      	ldr	r6, [pc, #472]	; (8081c88 <_Z13readGpsStreamv+0x260>)
 8081aae:	2401      	movs	r4, #1
 8081ab0:	4637      	mov	r7, r6
 8081ab2:	2500      	movs	r5, #0
        //quality is after 6th comma
        //gps_sentence = String("$GNGGA,011545.00,3945.81586,N,10514.09384,W,1,08,1.28,1799.4,M,-21.5,M,,*40");
        //
        comma_counter = 0;

        for(int a = 0; a<gps_sentence.length(); a++){
 8081ab4:	9b02      	ldr	r3, [sp, #8]
 8081ab6:	1e61      	subs	r1, r4, #1
 8081ab8:	4299      	cmp	r1, r3
 8081aba:	f080 80da 	bcs.w	8081c72 <_Z13readGpsStreamv+0x24a>
            if(gps_sentence.charAt(a) == ','){
 8081abe:	4668      	mov	r0, sp
 8081ac0:	f008 fc8d 	bl	808a3de <_ZNK6String6charAtEj>
 8081ac4:	282c      	cmp	r0, #44	; 0x2c
 8081ac6:	f040 80d2 	bne.w	8081c6e <_Z13readGpsStreamv+0x246>
                if(comma_counter == TIME_FIELD_INDEX){
 8081aca:	b9e5      	cbnz	r5, 8081b06 <_Z13readGpsStreamv+0xde>
                    if(gps_sentence.charAt(a+1)!=','){
 8081acc:	4621      	mov	r1, r4
 8081ace:	4668      	mov	r0, sp
 8081ad0:	f008 fc85 	bl	808a3de <_ZNK6String6charAtEj>
 8081ad4:	282c      	cmp	r0, #44	; 0x2c
 8081ad6:	f000 80c9 	beq.w	8081c6c <_Z13readGpsStreamv+0x244>
                        String utc_string = gps_sentence.substring(a+1,a+11);
 8081ada:	f104 030a 	add.w	r3, r4, #10
 8081ade:	4622      	mov	r2, r4
 8081ae0:	4669      	mov	r1, sp
 8081ae2:	a808      	add	r0, sp, #32
 8081ae4:	f008 fc8c 	bl	808a400 <_ZNK6String9substringEjj>
                        //Serial.print("GPS utc string: ");
                        if(debugging_enabled){
 8081ae8:	4b68      	ldr	r3, [pc, #416]	; (8081c8c <_Z13readGpsStreamv+0x264>)
 8081aea:	681b      	ldr	r3, [r3, #0]
 8081aec:	b14b      	cbz	r3, 8081b02 <_Z13readGpsStreamv+0xda>
                            Serial.print("GPS utc string: ");
 8081aee:	f009 fda9 	bl	808b644 <_Z16_fetch_usbserialv>
 8081af2:	4967      	ldr	r1, [pc, #412]	; (8081c90 <_Z13readGpsStreamv+0x268>)
 8081af4:	f008 fcfa 	bl	808a4ec <_ZN5Print5printEPKc>
                            Serial.println(utc_string);
 8081af8:	f009 fda4 	bl	808b644 <_Z16_fetch_usbserialv>
 8081afc:	9908      	ldr	r1, [sp, #32]
 8081afe:	f008 fd08 	bl	808a512 <_ZN5Print7printlnEPKc>

        for(int a = 0; a<gps_sentence.length(); a++){
            if(gps_sentence.charAt(a) == ','){
                if(comma_counter == TIME_FIELD_INDEX){
                    if(gps_sentence.charAt(a+1)!=','){
                        String utc_string = gps_sentence.substring(a+1,a+11);
 8081b02:	a808      	add	r0, sp, #32
 8081b04:	e0b0      	b.n	8081c68 <_Z13readGpsStreamv+0x240>
                            Serial.println(utc_string);

                        }
                        //Serial.println(utc_string);
                    }
                }else if(comma_counter == LATITUDE_FIELD_INDEX){
 8081b06:	2d01      	cmp	r5, #1
 8081b08:	d12f      	bne.n	8081b6a <_Z13readGpsStreamv+0x142>
                    if(gps_sentence.charAt(a+1)!=','){
 8081b0a:	4621      	mov	r1, r4
 8081b0c:	4668      	mov	r0, sp
 8081b0e:	f008 fc66 	bl	808a3de <_ZNK6String6charAtEj>
 8081b12:	282c      	cmp	r0, #44	; 0x2c
 8081b14:	f000 80aa 	beq.w	8081c6c <_Z13readGpsStreamv+0x244>
                        String latitudeString = gps_sentence.substring(a+1,a+10);
 8081b18:	f104 0309 	add.w	r3, r4, #9
 8081b1c:	4622      	mov	r2, r4
 8081b1e:	4669      	mov	r1, sp
 8081b20:	a804      	add	r0, sp, #16
 8081b22:	f008 fc6d 	bl	808a400 <_ZNK6String9substringEjj>
                        if(debugging_enabled){
 8081b26:	4b59      	ldr	r3, [pc, #356]	; (8081c8c <_Z13readGpsStreamv+0x264>)
 8081b28:	681b      	ldr	r3, [r3, #0]
 8081b2a:	b14b      	cbz	r3, 8081b40 <_Z13readGpsStreamv+0x118>
                          Serial.print("Latitude string: ");
 8081b2c:	f009 fd8a 	bl	808b644 <_Z16_fetch_usbserialv>
 8081b30:	4958      	ldr	r1, [pc, #352]	; (8081c94 <_Z13readGpsStreamv+0x26c>)
 8081b32:	f008 fcdb 	bl	808a4ec <_ZN5Print5printEPKc>
                          Serial.print(latitudeString);
 8081b36:	f009 fd85 	bl	808b644 <_Z16_fetch_usbserialv>
 8081b3a:	9904      	ldr	r1, [sp, #16]
 8081b3c:	f008 fcd6 	bl	808a4ec <_ZN5Print5printEPKc>
                        }
                        //Serial.print("Latitude string: ");
                        //Serial.print(latitudeString);
                        //Serial.print(" ");
                        //Serial.println(gps_sentence.charAt(a+12));
                        gps.set_lat_decimal(latitudeString, gps_sentence.charAt(a+12));
 8081b40:	a904      	add	r1, sp, #16
 8081b42:	a808      	add	r0, sp, #32
 8081b44:	f008 fb1a 	bl	808a17c <_ZN6StringC1ERKS_>
 8081b48:	f104 010b 	add.w	r1, r4, #11
 8081b4c:	4668      	mov	r0, sp
 8081b4e:	f008 fc46 	bl	808a3de <_ZNK6String6charAtEj>
 8081b52:	a908      	add	r1, sp, #32
 8081b54:	4602      	mov	r2, r0
 8081b56:	4850      	ldr	r0, [pc, #320]	; (8081c98 <_Z13readGpsStreamv+0x270>)
 8081b58:	f005 f8ba 	bl	8086cd0 <_ZN3GPS15set_lat_decimalE6Stringc>
 8081b5c:	a808      	add	r0, sp, #32
 8081b5e:	f008 fa87 	bl	808a070 <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF7;
 8081b62:	8833      	ldrh	r3, [r6, #0]
 8081b64:	f023 0308 	bic.w	r3, r3, #8
 8081b68:	e069      	b.n	8081c3e <_Z13readGpsStreamv+0x216>
                        //Serial.print("Latitude decimal: ");
                        //Serial.println(gps.get_latitude(), 5);
                    }
                }else if(comma_counter == LONGITUDE_FIELD_INDEX){
 8081b6a:	2d03      	cmp	r5, #3
 8081b6c:	d128      	bne.n	8081bc0 <_Z13readGpsStreamv+0x198>
                    if(gps_sentence.charAt(a+1)!=','){
 8081b6e:	4621      	mov	r1, r4
 8081b70:	4668      	mov	r0, sp
 8081b72:	f008 fc34 	bl	808a3de <_ZNK6String6charAtEj>
 8081b76:	282c      	cmp	r0, #44	; 0x2c
 8081b78:	d078      	beq.n	8081c6c <_Z13readGpsStreamv+0x244>
                        String longitudeString = gps_sentence.substring(a+1,a+11);
 8081b7a:	f104 030a 	add.w	r3, r4, #10
 8081b7e:	4622      	mov	r2, r4
 8081b80:	4669      	mov	r1, sp
 8081b82:	a804      	add	r0, sp, #16
 8081b84:	f008 fc3c 	bl	808a400 <_ZNK6String9substringEjj>
                        if(debugging_enabled){
 8081b88:	4b40      	ldr	r3, [pc, #256]	; (8081c8c <_Z13readGpsStreamv+0x264>)
 8081b8a:	681b      	ldr	r3, [r3, #0]
 8081b8c:	b14b      	cbz	r3, 8081ba2 <_Z13readGpsStreamv+0x17a>
                          Serial.print("longitude string: ");
 8081b8e:	f009 fd59 	bl	808b644 <_Z16_fetch_usbserialv>
 8081b92:	4942      	ldr	r1, [pc, #264]	; (8081c9c <_Z13readGpsStreamv+0x274>)
 8081b94:	f008 fcaa 	bl	808a4ec <_ZN5Print5printEPKc>
                          Serial.print(longitudeString);
 8081b98:	f009 fd54 	bl	808b644 <_Z16_fetch_usbserialv>
 8081b9c:	9904      	ldr	r1, [sp, #16]
 8081b9e:	f008 fca5 	bl	808a4ec <_ZN5Print5printEPKc>
                        }
                        //Serial.print(" ");
                        //Serial.println(gps_sentence.charAt(a+13));
                        gps.set_long_decimal(longitudeString, gps_sentence.charAt(a+13));
 8081ba2:	a904      	add	r1, sp, #16
 8081ba4:	a808      	add	r0, sp, #32
 8081ba6:	f008 fae9 	bl	808a17c <_ZN6StringC1ERKS_>
 8081baa:	f104 010c 	add.w	r1, r4, #12
 8081bae:	4668      	mov	r0, sp
 8081bb0:	f008 fc15 	bl	808a3de <_ZNK6String6charAtEj>
 8081bb4:	a908      	add	r1, sp, #32
 8081bb6:	4602      	mov	r2, r0
 8081bb8:	4837      	ldr	r0, [pc, #220]	; (8081c98 <_Z13readGpsStreamv+0x270>)
 8081bba:	f005 f8cf 	bl	8086d5c <_ZN3GPS16set_long_decimalE6Stringc>
 8081bbe:	e015      	b.n	8081bec <_Z13readGpsStreamv+0x1c4>
                        //Serial.print("Longitude decimal: ");
                        //Serial.println(gps.get_longitude(), 5);
                    }
                }else if(comma_counter == NUMBER_OF_SATELLITES_INDEX){
 8081bc0:	2d06      	cmp	r5, #6
 8081bc2:	d117      	bne.n	8081bf4 <_Z13readGpsStreamv+0x1cc>
                    if(gps_sentence.charAt(a+1)!=','){
 8081bc4:	4621      	mov	r1, r4
 8081bc6:	4668      	mov	r0, sp
 8081bc8:	f008 fc09 	bl	808a3de <_ZNK6String6charAtEj>
 8081bcc:	282c      	cmp	r0, #44	; 0x2c
 8081bce:	d04d      	beq.n	8081c6c <_Z13readGpsStreamv+0x244>
                        String numberOfSatellitesString = gps_sentence.substring(a+1,a+3);
 8081bd0:	1ca3      	adds	r3, r4, #2
 8081bd2:	4622      	mov	r2, r4
 8081bd4:	4669      	mov	r1, sp
 8081bd6:	a804      	add	r0, sp, #16
 8081bd8:	f008 fc12 	bl	808a400 <_ZNK6String9substringEjj>
                        gps.set_satellites(numberOfSatellitesString);
 8081bdc:	a904      	add	r1, sp, #16
 8081bde:	a808      	add	r0, sp, #32
 8081be0:	f008 facc 	bl	808a17c <_ZN6StringC1ERKS_>
 8081be4:	a908      	add	r1, sp, #32
 8081be6:	482c      	ldr	r0, [pc, #176]	; (8081c98 <_Z13readGpsStreamv+0x270>)
 8081be8:	f005 f8fe 	bl	8086de8 <_ZN3GPS14set_satellitesE6String>
 8081bec:	a808      	add	r0, sp, #32
 8081bee:	f008 fa3f 	bl	808a070 <_ZN6StringD1Ev>
 8081bf2:	e038      	b.n	8081c66 <_Z13readGpsStreamv+0x23e>
                    }
                }else if(comma_counter == HORZONTAL_DILLUTION_INDEX){
 8081bf4:	2d07      	cmp	r5, #7
 8081bf6:	d139      	bne.n	8081c6c <_Z13readGpsStreamv+0x244>
                    if(gps_sentence.charAt(a+1)!=','){
 8081bf8:	4621      	mov	r1, r4
 8081bfa:	4668      	mov	r0, sp
 8081bfc:	f008 fbef 	bl	808a3de <_ZNK6String6charAtEj>
 8081c00:	282c      	cmp	r0, #44	; 0x2c
 8081c02:	d033      	beq.n	8081c6c <_Z13readGpsStreamv+0x244>
                        String hdString = gps_sentence.substring(a+1,a+3);
 8081c04:	1ca3      	adds	r3, r4, #2
 8081c06:	4622      	mov	r2, r4
 8081c08:	4669      	mov	r1, sp
 8081c0a:	a804      	add	r0, sp, #16
 8081c0c:	f008 fbf8 	bl	808a400 <_ZNK6String9substringEjj>
                        gps.set_horizontalDillution(hdString);
 8081c10:	a904      	add	r1, sp, #16
 8081c12:	a808      	add	r0, sp, #32
 8081c14:	f008 fab2 	bl	808a17c <_ZN6StringC1ERKS_>
 8081c18:	a908      	add	r1, sp, #32
 8081c1a:	481f      	ldr	r0, [pc, #124]	; (8081c98 <_Z13readGpsStreamv+0x270>)
 8081c1c:	f005 f8ec 	bl	8086df8 <_ZN3GPS23set_horizontalDillutionE6String>
 8081c20:	a808      	add	r0, sp, #32
 8081c22:	f008 fa25 	bl	808a070 <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF3;
 8081c26:	8833      	ldrh	r3, [r6, #0]
                        if(gps.get_horizontalDillution() < 2){
 8081c28:	481b      	ldr	r0, [pc, #108]	; (8081c98 <_Z13readGpsStreamv+0x270>)
                    }
                }else if(comma_counter == HORZONTAL_DILLUTION_INDEX){
                    if(gps_sentence.charAt(a+1)!=','){
                        String hdString = gps_sentence.substring(a+1,a+3);
                        gps.set_horizontalDillution(hdString);
                        status_word.status_int &= 0xFFF3;
 8081c2a:	f023 030c 	bic.w	r3, r3, #12
 8081c2e:	8033      	strh	r3, [r6, #0]
                        if(gps.get_horizontalDillution() < 2){
 8081c30:	f005 f8f8 	bl	8086e24 <_ZN3GPS23get_horizontalDillutionEv>
 8081c34:	2801      	cmp	r0, #1
 8081c36:	dc04      	bgt.n	8081c42 <_Z13readGpsStreamv+0x21a>
                            status_word.status_int |= 0x000C;
 8081c38:	8833      	ldrh	r3, [r6, #0]
 8081c3a:	f043 030c 	orr.w	r3, r3, #12
 8081c3e:	8033      	strh	r3, [r6, #0]
 8081c40:	e011      	b.n	8081c66 <_Z13readGpsStreamv+0x23e>
                        }else if(gps.get_horizontalDillution() < 5){
 8081c42:	4815      	ldr	r0, [pc, #84]	; (8081c98 <_Z13readGpsStreamv+0x270>)
 8081c44:	f005 f8ee 	bl	8086e24 <_ZN3GPS23get_horizontalDillutionEv>
 8081c48:	2804      	cmp	r0, #4
 8081c4a:	dc03      	bgt.n	8081c54 <_Z13readGpsStreamv+0x22c>
                            status_word.status_int |= 0x0008;
 8081c4c:	883b      	ldrh	r3, [r7, #0]
 8081c4e:	f043 0308 	orr.w	r3, r3, #8
 8081c52:	e007      	b.n	8081c64 <_Z13readGpsStreamv+0x23c>
                        }else if(gps.get_horizontalDillution() < 20){
 8081c54:	4810      	ldr	r0, [pc, #64]	; (8081c98 <_Z13readGpsStreamv+0x270>)
 8081c56:	f005 f8e5 	bl	8086e24 <_ZN3GPS23get_horizontalDillutionEv>
 8081c5a:	2813      	cmp	r0, #19
 8081c5c:	dc03      	bgt.n	8081c66 <_Z13readGpsStreamv+0x23e>
                            status_word.status_int |= 0x0004;
 8081c5e:	883b      	ldrh	r3, [r7, #0]
 8081c60:	f043 0304 	orr.w	r3, r3, #4
 8081c64:	803b      	strh	r3, [r7, #0]
                        String numberOfSatellitesString = gps_sentence.substring(a+1,a+3);
                        gps.set_satellites(numberOfSatellitesString);
                    }
                }else if(comma_counter == HORZONTAL_DILLUTION_INDEX){
                    if(gps_sentence.charAt(a+1)!=','){
                        String hdString = gps_sentence.substring(a+1,a+3);
 8081c66:	a804      	add	r0, sp, #16
 8081c68:	f008 fa02 	bl	808a070 <_ZN6StringD1Ev>
                        }


                    }
                }
                comma_counter++;
 8081c6c:	3501      	adds	r5, #1
 8081c6e:	3401      	adds	r4, #1
        //quality is after 6th comma
        //gps_sentence = String("$GNGGA,011545.00,3945.81586,N,10514.09384,W,1,08,1.28,1799.4,M,-21.5,M,,*40");
        //
        comma_counter = 0;

        for(int a = 0; a<gps_sentence.length(); a++){
 8081c70:	e720      	b.n	8081ab4 <_Z13readGpsStreamv+0x8c>
    Serial.println("Turning off gps");
    String disableString = "";
    Serial5.write()
}*/
void readGpsStream(void){
    String gps_sentence = "init";
 8081c72:	4668      	mov	r0, sp
 8081c74:	f008 f9fc 	bl	808a070 <_ZN6StringD1Ev>
                comma_counter++;
            }
        }
    }

}
 8081c78:	b00d      	add	sp, #52	; 0x34
 8081c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8081c7c:	08090a4a 	.word	0x08090a4a
 8081c80:	08090a4f 	.word	0x08090a4f
 8081c84:	08090a53 	.word	0x08090a53
 8081c88:	20000b74 	.word	0x20000b74
 8081c8c:	20000af8 	.word	0x20000af8
 8081c90:	08090a65 	.word	0x08090a65
 8081c94:	08090a76 	.word	0x08090a76
 8081c98:	20000968 	.word	0x20000968
 8081c9c:	08090a88 	.word	0x08090a88

08081ca0 <_Z12sendWifiInfov>:
          }
        esp_wifi_connection_status = 0;
    }
}
//send wifi information to the ESP
void sendWifiInfo(void){
 8081ca0:	b510      	push	{r4, lr}
 8081ca2:	b090      	sub	sp, #64	; 0x40

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 8081ca4:	491d      	ldr	r1, [pc, #116]	; (8081d1c <_Z12sendWifiInfov+0x7c>)
 8081ca6:	a808      	add	r0, sp, #32
 8081ca8:	f008 fa29 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
    String wifiCredentials = "@!" + String(ssid) + "," + String(password) + "&";
 8081cac:	491c      	ldr	r1, [pc, #112]	; (8081d20 <_Z12sendWifiInfov+0x80>)
 8081cae:	a804      	add	r0, sp, #16
 8081cb0:	f008 fa64 	bl	808a17c <_ZN6StringC1ERKS_>
 8081cb4:	a904      	add	r1, sp, #16
 8081cb6:	a808      	add	r0, sp, #32
 8081cb8:	f008 fb44 	bl	808a344 <_ZplRK15StringSumHelperRK6String>
 8081cbc:	4919      	ldr	r1, [pc, #100]	; (8081d24 <_Z12sendWifiInfov+0x84>)
 8081cbe:	f008 fb4d 	bl	808a35c <_ZplRK15StringSumHelperPKc>
 8081cc2:	4604      	mov	r4, r0
 8081cc4:	4918      	ldr	r1, [pc, #96]	; (8081d28 <_Z12sendWifiInfov+0x88>)
 8081cc6:	a80c      	add	r0, sp, #48	; 0x30
 8081cc8:	f008 fa58 	bl	808a17c <_ZN6StringC1ERKS_>
 8081ccc:	a90c      	add	r1, sp, #48	; 0x30
 8081cce:	4620      	mov	r0, r4
 8081cd0:	f008 fb38 	bl	808a344 <_ZplRK15StringSumHelperRK6String>
 8081cd4:	4915      	ldr	r1, [pc, #84]	; (8081d2c <_Z12sendWifiInfov+0x8c>)
 8081cd6:	f008 fb41 	bl	808a35c <_ZplRK15StringSumHelperPKc>
 8081cda:	4601      	mov	r1, r0
 8081cdc:	4668      	mov	r0, sp
 8081cde:	f008 fa4d 	bl	808a17c <_ZN6StringC1ERKS_>
 8081ce2:	a80c      	add	r0, sp, #48	; 0x30
 8081ce4:	f008 f9c4 	bl	808a070 <_ZN6StringD1Ev>
 8081ce8:	a804      	add	r0, sp, #16
 8081cea:	f008 f9c1 	bl	808a070 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8081cee:	a808      	add	r0, sp, #32
 8081cf0:	f008 f9be 	bl	808a070 <_ZN6StringD1Ev>
    Serial.println("Sending new wifi credentials to ESP");
 8081cf4:	f009 fca6 	bl	808b644 <_Z16_fetch_usbserialv>
 8081cf8:	490d      	ldr	r1, [pc, #52]	; (8081d30 <_Z12sendWifiInfov+0x90>)
 8081cfa:	f008 fc0a 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial1.println(wifiCredentials);
 8081cfe:	f009 fdef 	bl	808b8e0 <_Z22__fetch_global_Serial1v>
 8081d02:	9900      	ldr	r1, [sp, #0]
 8081d04:	f008 fc05 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("Success!");
 8081d08:	f009 fc9c 	bl	808b644 <_Z16_fetch_usbserialv>
 8081d0c:	4909      	ldr	r1, [pc, #36]	; (8081d34 <_Z12sendWifiInfov+0x94>)
 8081d0e:	f008 fc00 	bl	808a512 <_ZN5Print7printlnEPKc>
        esp_wifi_connection_status = 0;
    }
}
//send wifi information to the ESP
void sendWifiInfo(void){
    String wifiCredentials = "@!" + String(ssid) + "," + String(password) + "&";
 8081d12:	4668      	mov	r0, sp
 8081d14:	f008 f9ac 	bl	808a070 <_ZN6StringD1Ev>
    Serial.println("Sending new wifi credentials to ESP");
    Serial1.println(wifiCredentials);
    Serial.println("Success!");
}
 8081d18:	b010      	add	sp, #64	; 0x40
 8081d1a:	bd10      	pop	{r4, pc}
 8081d1c:	08090b17 	.word	0x08090b17
 8081d20:	2000020c 	.word	0x2000020c
 8081d24:	08092bae 	.word	0x08092bae
 8081d28:	200001d8 	.word	0x200001d8
 8081d2c:	08090ab2 	.word	0x08090ab2
 8081d30:	08090b1a 	.word	0x08090b1a
 8081d34:	08090b3e 	.word	0x08090b3e

08081d38 <_Z10checkValuePcc>:
            char clearBuffer = Serial4.read();
            //Serial.print(clearBuffer);
        }
      }
}
char checkValue(char *thebuf, char leng)  {
 8081d38:	4602      	mov	r2, r0
 8081d3a:	b530      	push	{r4, r5, lr}
    char receiveflag=0;
    int receiveSum=0;
 8081d3c:	2300      	movs	r3, #0

    for(int i=0; i<(leng-2); i++) {
 8081d3e:	1e8d      	subs	r5, r1, #2
 8081d40:	1a14      	subs	r4, r2, r0
 8081d42:	42a5      	cmp	r5, r4
 8081d44:	dd03      	ble.n	8081d4e <_Z10checkValuePcc+0x16>
      receiveSum=receiveSum+thebuf[i];
 8081d46:	f812 4b01 	ldrb.w	r4, [r2], #1
 8081d4a:	4423      	add	r3, r4
}
char checkValue(char *thebuf, char leng)  {
    char receiveflag=0;
    int receiveSum=0;

    for(int i=0; i<(leng-2); i++) {
 8081d4c:	e7f8      	b.n	8081d40 <_Z10checkValuePcc+0x8>
      receiveSum=receiveSum+thebuf[i];
    }
    receiveSum=receiveSum + 0x42;

    if(receiveSum == ((thebuf[leng-2]<<8)+thebuf[leng-1])) { //check the serial data
 8081d4e:	4401      	add	r1, r0
      receiveSum = 0;
      receiveflag = 1;
    }
    return receiveflag;
 8081d50:	f811 0c02 	ldrb.w	r0, [r1, #-2]
 8081d54:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 8081d58:	3342      	adds	r3, #66	; 0x42
 8081d5a:	eb02 2000 	add.w	r0, r2, r0, lsl #8
}
 8081d5e:	1ac3      	subs	r3, r0, r3
 8081d60:	4258      	negs	r0, r3
 8081d62:	4158      	adcs	r0, r3
 8081d64:	bd30      	pop	{r4, r5, pc}

08081d66 <_Z13transmitPM2_5Pc>:
    int PM01Val;
    PM01Val=((thebuf[3]<<8) + thebuf[4]); //count PM1.0 value of the air detector module
    return PM01Val;
}
//transmit PM Value to PC
float transmitPM2_5(char *thebuf) {
 8081d66:	b508      	push	{r3, lr}
    float PM2_5Val;
    PM2_5Val=((thebuf[5]<<8) + thebuf[6]);//count PM2.5 value of the air detector module
    return PM2_5Val;
 8081d68:	7942      	ldrb	r2, [r0, #5]
 8081d6a:	7980      	ldrb	r0, [r0, #6]
 8081d6c:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 8081d70:	f00a ffc4 	bl	808ccfc <__aeabi_i2f>
}
 8081d74:	bd08      	pop	{r3, pc}
	...

08081d78 <_Z13readPlantowerv>:
    Serial.println(" C (");
    Serial.print(hih.temperature_Raw());
    Serial.println(")");*/
}
//read from plantower pms 5500
void readPlantower(void){
 8081d78:	b510      	push	{r4, lr}
    if(Serial4.find("B")){    //start to read when detect 0x42
 8081d7a:	f7fe ffaf 	bl	8080cdc <_Z22__fetch_global_Serial4v>
 8081d7e:	491a      	ldr	r1, [pc, #104]	; (8081de8 <_Z13readPlantowerv+0x70>)
 8081d80:	f008 fd8b 	bl	808a89a <_ZN6Stream4findEPc>
 8081d84:	b310      	cbz	r0, 8081dcc <_Z13readPlantowerv+0x54>
        //if(debugging_enabled)
          //Serial.println("Found a B when reading plantower");
          Serial4.readBytes(buf,LENG);
 8081d86:	4c19      	ldr	r4, [pc, #100]	; (8081dec <_Z13readPlantowerv+0x74>)
 8081d88:	f7fe ffa8 	bl	8080cdc <_Z22__fetch_global_Serial4v>
 8081d8c:	221f      	movs	r2, #31
 8081d8e:	4621      	mov	r1, r4
 8081d90:	f008 fd86 	bl	808a8a0 <_ZN6Stream9readBytesEPcj>
          if(buf[0] == 0x4d){
 8081d94:	7823      	ldrb	r3, [r4, #0]
 8081d96:	2b4d      	cmp	r3, #77	; 0x4d
 8081d98:	d124      	bne.n	8081de4 <_Z13readPlantowerv+0x6c>
              if(checkValue(buf,LENG)){ //All units are ug/m^3
 8081d9a:	211f      	movs	r1, #31
 8081d9c:	4620      	mov	r0, r4
 8081d9e:	f7ff ffcb 	bl	8081d38 <_Z10checkValuePcc>
 8081da2:	b1f8      	cbz	r0, 8081de4 <_Z13readPlantowerv+0x6c>
                  //Serial.println("Value is good from pm buff");
                  PM01Value=transmitPM01(buf); //count PM1.0 value of the air detector module
 8081da4:	78e2      	ldrb	r2, [r4, #3]
 8081da6:	7923      	ldrb	r3, [r4, #4]
                  PM2_5Value=transmitPM2_5(buf);//count PM2.5 value of the air detector module
 8081da8:	4620      	mov	r0, r4
          //Serial.println("Found a B when reading plantower");
          Serial4.readBytes(buf,LENG);
          if(buf[0] == 0x4d){
              if(checkValue(buf,LENG)){ //All units are ug/m^3
                  //Serial.println("Value is good from pm buff");
                  PM01Value=transmitPM01(buf); //count PM1.0 value of the air detector module
 8081daa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8081dae:	4a10      	ldr	r2, [pc, #64]	; (8081df0 <_Z13readPlantowerv+0x78>)
 8081db0:	6013      	str	r3, [r2, #0]
                  PM2_5Value=transmitPM2_5(buf);//count PM2.5 value of the air detector module
 8081db2:	f7ff ffd8 	bl	8081d66 <_Z13transmitPM2_5Pc>
 8081db6:	f00b f9bb 	bl	808d130 <__aeabi_f2iz>
 8081dba:	4b0e      	ldr	r3, [pc, #56]	; (8081df4 <_Z13readPlantowerv+0x7c>)
                  PM10Value=transmitPM10(buf); //count PM10 value of the air detector module
 8081dbc:	79e2      	ldrb	r2, [r4, #7]
          Serial4.readBytes(buf,LENG);
          if(buf[0] == 0x4d){
              if(checkValue(buf,LENG)){ //All units are ug/m^3
                  //Serial.println("Value is good from pm buff");
                  PM01Value=transmitPM01(buf); //count PM1.0 value of the air detector module
                  PM2_5Value=transmitPM2_5(buf);//count PM2.5 value of the air detector module
 8081dbe:	6018      	str	r0, [r3, #0]
                  PM10Value=transmitPM10(buf); //count PM10 value of the air detector module
 8081dc0:	7a23      	ldrb	r3, [r4, #8]
 8081dc2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8081dc6:	4a0c      	ldr	r2, [pc, #48]	; (8081df8 <_Z13readPlantowerv+0x80>)
 8081dc8:	6013      	str	r3, [r2, #0]
 8081dca:	bd10      	pop	{r4, pc}
              }
          }
      }
      else{
        //Serial.println("Clearing serial buffer from PM measurement");
        while(Serial4.available()){
 8081dcc:	f7fe ff86 	bl	8080cdc <_Z22__fetch_global_Serial4v>
 8081dd0:	6803      	ldr	r3, [r0, #0]
 8081dd2:	691b      	ldr	r3, [r3, #16]
 8081dd4:	4798      	blx	r3
 8081dd6:	b128      	cbz	r0, 8081de4 <_Z13readPlantowerv+0x6c>
            char clearBuffer = Serial4.read();
 8081dd8:	f7fe ff80 	bl	8080cdc <_Z22__fetch_global_Serial4v>
 8081ddc:	6803      	ldr	r3, [r0, #0]
 8081dde:	695b      	ldr	r3, [r3, #20]
 8081de0:	4798      	blx	r3
              }
          }
      }
      else{
        //Serial.println("Clearing serial buffer from PM measurement");
        while(Serial4.available()){
 8081de2:	e7f3      	b.n	8081dcc <_Z13readPlantowerv+0x54>
 8081de4:	bd10      	pop	{r4, pc}
 8081de6:	bf00      	nop
 8081de8:	08092d1e 	.word	0x08092d1e
 8081dec:	200007bc 	.word	0x200007bc
 8081df0:	200008c8 	.word	0x200008c8
 8081df4:	20000a28 	.word	0x20000a28
 8081df8:	20000b1c 	.word	0x20000b1c
 8081dfc:	00000000 	.word	0x00000000

08081e00 <_Z15outputParticlesv>:



/***start of all plantower functions***/

void outputParticles(){
 8081e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8081e04:	b0be      	sub	sp, #248	; 0xf8
    union {
        int16_t myWord;
        unsigned char bytes[2];
    }wordBytes;

    while(!Serial.available()){
 8081e06:	f009 fc1d 	bl	808b644 <_Z16_fetch_usbserialv>
 8081e0a:	6803      	ldr	r3, [r0, #0]
 8081e0c:	691b      	ldr	r3, [r3, #16]
 8081e0e:	4798      	blx	r3
 8081e10:	2800      	cmp	r0, #0
 8081e12:	f040 80f5 	bne.w	8082000 <_Z15outputParticlesv+0x200>
        if (! bme.performReading()) {
 8081e16:	4880      	ldr	r0, [pc, #512]	; (8082018 <_Z15outputParticlesv+0x218>)
 8081e18:	f006 fe8e 	bl	8088b38 <_ZN15Adafruit_BME68014performReadingEv>
 8081e1c:	b920      	cbnz	r0, 8081e28 <_Z15outputParticlesv+0x28>
          Serial.println("Failed to read BME680");
 8081e1e:	f009 fc11 	bl	808b644 <_Z16_fetch_usbserialv>
 8081e22:	497e      	ldr	r1, [pc, #504]	; (808201c <_Z15outputParticlesv+0x21c>)
 8081e24:	f008 fb75 	bl	808a512 <_ZN5Print7printlnEPKc>

        }
        readPlantower();
 8081e28:	f7ff ffa6 	bl	8081d78 <_Z13readPlantowerv>
        readGpsStream();
 8081e2c:	f7ff fdfc 	bl	8081a28 <_Z13readGpsStreamv>
        CO2_float = t6713.readPPM();
 8081e30:	487b      	ldr	r0, [pc, #492]	; (8082020 <_Z15outputParticlesv+0x220>)
 8081e32:	f005 f887 	bl	8086f44 <_ZN13Telaire_T67137readPPMEv>

        CO2_float += CO2_zero;
 8081e36:	4b7b      	ldr	r3, [pc, #492]	; (8082024 <_Z15outputParticlesv+0x224>)
          Serial.println("Failed to read BME680");

        }
        readPlantower();
        readGpsStream();
        CO2_float = t6713.readPPM();
 8081e38:	4605      	mov	r5, r0

        CO2_float += CO2_zero;
        CO2_float *= CO2_slope;
 8081e3a:	6818      	ldr	r0, [r3, #0]
 8081e3c:	f00a ff5e 	bl	808ccfc <__aeabi_i2f>
 8081e40:	4604      	mov	r4, r0
 8081e42:	4628      	mov	r0, r5
 8081e44:	f00a ff5a 	bl	808ccfc <__aeabi_i2f>
 8081e48:	4601      	mov	r1, r0
 8081e4a:	4620      	mov	r0, r4
 8081e4c:	f00a fea2 	bl	808cb94 <__addsf3>
 8081e50:	4b75      	ldr	r3, [pc, #468]	; (8082028 <_Z15outputParticlesv+0x228>)
 8081e52:	4c76      	ldr	r4, [pc, #472]	; (808202c <_Z15outputParticlesv+0x22c>)
 8081e54:	6819      	ldr	r1, [r3, #0]
 8081e56:	f00a ffa5 	bl	808cda4 <__aeabi_fmul>
        //correct for altitude
        float pressure_correction = bme.pressure/100;
 8081e5a:	4b6f      	ldr	r3, [pc, #444]	; (8082018 <_Z15outputParticlesv+0x218>)
        readPlantower();
        readGpsStream();
        CO2_float = t6713.readPPM();

        CO2_float += CO2_zero;
        CO2_float *= CO2_slope;
 8081e5c:	6020      	str	r0, [r4, #0]
        //correct for altitude
        float pressure_correction = bme.pressure/100;
 8081e5e:	4974      	ldr	r1, [pc, #464]	; (8082030 <_Z15outputParticlesv+0x230>)
        readPlantower();
        readGpsStream();
        CO2_float = t6713.readPPM();

        CO2_float += CO2_zero;
        CO2_float *= CO2_slope;
 8081e60:	4605      	mov	r5, r0
        //correct for altitude
        float pressure_correction = bme.pressure/100;
 8081e62:	6858      	ldr	r0, [r3, #4]
 8081e64:	f00b f852 	bl	808cf0c <__aeabi_fdiv>
        if(pressure_correction > LOW_PRESSURE_LIMIT && pressure_correction < HIGH_PRESSURE_LIMIT){
 8081e68:	4971      	ldr	r1, [pc, #452]	; (8082030 <_Z15outputParticlesv+0x230>)
        CO2_float = t6713.readPPM();

        CO2_float += CO2_zero;
        CO2_float *= CO2_slope;
        //correct for altitude
        float pressure_correction = bme.pressure/100;
 8081e6a:	4606      	mov	r6, r0
        if(pressure_correction > LOW_PRESSURE_LIMIT && pressure_correction < HIGH_PRESSURE_LIMIT){
 8081e6c:	f00b f956 	bl	808d11c <__aeabi_fcmpgt>
 8081e70:	46a0      	mov	r8, r4
 8081e72:	b160      	cbz	r0, 8081e8e <_Z15outputParticlesv+0x8e>
 8081e74:	496f      	ldr	r1, [pc, #444]	; (8082034 <_Z15outputParticlesv+0x234>)
 8081e76:	4630      	mov	r0, r6
 8081e78:	f00b f932 	bl	808d0e0 <__aeabi_fcmplt>
 8081e7c:	b138      	cbz	r0, 8081e8e <_Z15outputParticlesv+0x8e>
            pressure_correction /= SEALEVELPRESSURE_HPA;
            CO2_float *= pressure_correction;
 8081e7e:	496e      	ldr	r1, [pc, #440]	; (8082038 <_Z15outputParticlesv+0x238>)
 8081e80:	4630      	mov	r0, r6
 8081e82:	f00b f843 	bl	808cf0c <__aeabi_fdiv>
 8081e86:	4629      	mov	r1, r5
 8081e88:	f00a ff8c 	bl	808cda4 <__aeabi_fmul>
 8081e8c:	6020      	str	r0, [r4, #0]
        }
        pm_25_correction_factor = PM_25_CONSTANT_A + (PM_25_CONSTANT_B*(readHumidity()/100))/(1 - (readHumidity()/100));
 8081e8e:	f7ff fbad 	bl	80815ec <_Z12readHumidityv>
 8081e92:	4604      	mov	r4, r0
 8081e94:	f7ff fbaa 	bl	80815ec <_Z12readHumidityv>
 8081e98:	4965      	ldr	r1, [pc, #404]	; (8082030 <_Z15outputParticlesv+0x230>)
 8081e9a:	4606      	mov	r6, r0
 8081e9c:	4620      	mov	r0, r4
 8081e9e:	f00b f835 	bl	808cf0c <__aeabi_fdiv>
 8081ea2:	f00a fad5 	bl	808c450 <__aeabi_f2d>
 8081ea6:	a358      	add	r3, pc, #352	; (adr r3, 8082008 <_Z15outputParticlesv+0x208>)
 8081ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081eac:	f00a fb24 	bl	808c4f8 <__aeabi_dmul>
 8081eb0:	4604      	mov	r4, r0
 8081eb2:	460d      	mov	r5, r1
 8081eb4:	4630      	mov	r0, r6
 8081eb6:	495e      	ldr	r1, [pc, #376]	; (8082030 <_Z15outputParticlesv+0x230>)
 8081eb8:	f00b f828 	bl	808cf0c <__aeabi_fdiv>
 8081ebc:	4601      	mov	r1, r0
 8081ebe:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8081ec2:	f00a fe65 	bl	808cb90 <__aeabi_fsub>
 8081ec6:	f00a fac3 	bl	808c450 <__aeabi_f2d>
 8081eca:	4602      	mov	r2, r0
 8081ecc:	460b      	mov	r3, r1
 8081ece:	4620      	mov	r0, r4
 8081ed0:	4629      	mov	r1, r5
 8081ed2:	f00a fc3b 	bl	808c74c <__aeabi_ddiv>
 8081ed6:	a34e      	add	r3, pc, #312	; (adr r3, 8082010 <_Z15outputParticlesv+0x210>)
 8081ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081edc:	f00a f95a 	bl	808c194 <__adddf3>
 8081ee0:	f00a fe02 	bl	808cae8 <__aeabi_d2f>
 8081ee4:	4604      	mov	r4, r0
 8081ee6:	4b55      	ldr	r3, [pc, #340]	; (808203c <_Z15outputParticlesv+0x23c>)
        corrected_PM_25 = PM2_5Value * pm_25_correction_factor;
 8081ee8:	4e55      	ldr	r6, [pc, #340]	; (8082040 <_Z15outputParticlesv+0x240>)
        float pressure_correction = bme.pressure/100;
        if(pressure_correction > LOW_PRESSURE_LIMIT && pressure_correction < HIGH_PRESSURE_LIMIT){
            pressure_correction /= SEALEVELPRESSURE_HPA;
            CO2_float *= pressure_correction;
        }
        pm_25_correction_factor = PM_25_CONSTANT_A + (PM_25_CONSTANT_B*(readHumidity()/100))/(1 - (readHumidity()/100));
 8081eea:	6018      	str	r0, [r3, #0]
        corrected_PM_25 = PM2_5Value * pm_25_correction_factor;
 8081eec:	4b55      	ldr	r3, [pc, #340]	; (8082044 <_Z15outputParticlesv+0x244>)
            wordBytes.myWord = DEVICE_id;
            ble_output_array[1 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
            ble_output_array[2 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];

            //byte 3 - Measurement number
            ble_output_array[3 + i*(BLE_PAYLOAD_SIZE)] = sample_counter;
 8081eee:	f8df 915c 	ldr.w	r9, [pc, #348]	; 808204c <_Z15outputParticlesv+0x24c>
        if(pressure_correction > LOW_PRESSURE_LIMIT && pressure_correction < HIGH_PRESSURE_LIMIT){
            pressure_correction /= SEALEVELPRESSURE_HPA;
            CO2_float *= pressure_correction;
        }
        pm_25_correction_factor = PM_25_CONSTANT_A + (PM_25_CONSTANT_B*(readHumidity()/100))/(1 - (readHumidity()/100));
        corrected_PM_25 = PM2_5Value * pm_25_correction_factor;
 8081ef2:	6818      	ldr	r0, [r3, #0]
 8081ef4:	f00a ff02 	bl	808ccfc <__aeabi_i2f>
 8081ef8:	4621      	mov	r1, r4
 8081efa:	f00a ff53 	bl	808cda4 <__aeabi_fmul>
 8081efe:	f10d 0405 	add.w	r4, sp, #5
 8081f02:	6030      	str	r0, [r6, #0]

        byte ble_output_array[NUMBER_OF_SPECIES*BLE_PAYLOAD_SIZE];     //19 bytes per data line and 12 species to output


        for(int i=0; i<5; i++){
 8081f04:	2500      	movs	r5, #0

            //************Fill the ble output array**********************//
            //Serial.printf("making array[%d]\n", i);
            //byte 0 - version
            ble_output_array[0 + i*(BLE_PAYLOAD_SIZE)] = 1;
 8081f06:	2301      	movs	r3, #1
 8081f08:	f804 3c01 	strb.w	r3, [r4, #-1]

            //bytes 1,2 - Device ID
            //DEVICE_id = 555;
            wordBytes.myWord = DEVICE_id;
 8081f0c:	4b4e      	ldr	r3, [pc, #312]	; (8082048 <_Z15outputParticlesv+0x248>)
 8081f0e:	4f4f      	ldr	r7, [pc, #316]	; (808204c <_Z15outputParticlesv+0x24c>)
 8081f10:	681b      	ldr	r3, [r3, #0]
            ble_output_array[1 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8081f12:	7023      	strb	r3, [r4, #0]
            ble_output_array[2 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8081f14:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8081f18:	7063      	strb	r3, [r4, #1]

            //byte 3 - Measurement number
            ble_output_array[3 + i*(BLE_PAYLOAD_SIZE)] = sample_counter;
 8081f1a:	f8d9 3000 	ldr.w	r3, [r9]
 8081f1e:	70a3      	strb	r3, [r4, #2]
            3-PM10Value


            */

            if(i == 0){
 8081f20:	b92d      	cbnz	r5, 8081f2e <_Z15outputParticlesv+0x12e>
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = BATTERY_PACKET_CONSTANT;
 8081f22:	2378      	movs	r3, #120	; 0x78
 8081f24:	70e3      	strb	r3, [r4, #3]
                floatBytes.myFloat = fuel.getSoC();
 8081f26:	484a      	ldr	r0, [pc, #296]	; (8082050 <_Z15outputParticlesv+0x250>)
 8081f28:	f008 ff10 	bl	808ad4c <_ZN9FuelGauge6getSoCEv>
 8081f2c:	e018      	b.n	8081f60 <_Z15outputParticlesv+0x160>
            }else if(i == 1){
 8081f2e:	2d01      	cmp	r5, #1
 8081f30:	d103      	bne.n	8081f3a <_Z15outputParticlesv+0x13a>
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM1_PACKET_CONSTANT;
 8081f32:	2372      	movs	r3, #114	; 0x72
 8081f34:	70e3      	strb	r3, [r4, #3]
                floatBytes.myFloat = PM01Value;
 8081f36:	4b47      	ldr	r3, [pc, #284]	; (8082054 <_Z15outputParticlesv+0x254>)
 8081f38:	e00a      	b.n	8081f50 <_Z15outputParticlesv+0x150>
            }else if(i == 2){
 8081f3a:	2d02      	cmp	r5, #2
 8081f3c:	d103      	bne.n	8081f46 <_Z15outputParticlesv+0x146>
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM2PT5_PACKET_CONSTANT;
 8081f3e:	2352      	movs	r3, #82	; 0x52
 8081f40:	70e3      	strb	r3, [r4, #3]
                floatBytes.myFloat = corrected_PM_25;
 8081f42:	6830      	ldr	r0, [r6, #0]
 8081f44:	e00c      	b.n	8081f60 <_Z15outputParticlesv+0x160>
            }else if(i == 3){
 8081f46:	2d03      	cmp	r5, #3
 8081f48:	d106      	bne.n	8081f58 <_Z15outputParticlesv+0x158>
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM10_PACKET_CONSTANT;
 8081f4a:	2371      	movs	r3, #113	; 0x71
 8081f4c:	70e3      	strb	r3, [r4, #3]
                floatBytes.myFloat = PM10Value;
 8081f4e:	4b42      	ldr	r3, [pc, #264]	; (8082058 <_Z15outputParticlesv+0x258>)
 8081f50:	6818      	ldr	r0, [r3, #0]
 8081f52:	f00a fed3 	bl	808ccfc <__aeabi_i2f>
 8081f56:	e003      	b.n	8081f60 <_Z15outputParticlesv+0x160>
            }else if(i == 4){
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = CARBON_DIOXIDE_PACKET_CONSTANT;
 8081f58:	2343      	movs	r3, #67	; 0x43
                floatBytes.myFloat = CO2_float;
 8081f5a:	f8d8 0000 	ldr.w	r0, [r8]
                floatBytes.myFloat = corrected_PM_25;
            }else if(i == 3){
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM10_PACKET_CONSTANT;
                floatBytes.myFloat = PM10Value;
            }else if(i == 4){
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = CARBON_DIOXIDE_PACKET_CONSTANT;
 8081f5e:	70e3      	strb	r3, [r4, #3]
                floatBytes.myFloat = CO2_float;
            }

            //bytes 5,6,7,8 - Measurement Value
            ble_output_array[5 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[0];
            ble_output_array[6 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
 8081f60:	f3c0 2307 	ubfx	r3, r0, #8, #8
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = CARBON_DIOXIDE_PACKET_CONSTANT;
                floatBytes.myFloat = CO2_float;
            }

            //bytes 5,6,7,8 - Measurement Value
            ble_output_array[5 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[0];
 8081f64:	7120      	strb	r0, [r4, #4]
            ble_output_array[6 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
 8081f66:	7163      	strb	r3, [r4, #5]
            ble_output_array[7 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[2];
 8081f68:	f3c0 4307 	ubfx	r3, r0, #16, #8
            ble_output_array[8 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[3];
 8081f6c:	f3c0 6007 	ubfx	r0, r0, #24, #8
            }

            //bytes 5,6,7,8 - Measurement Value
            ble_output_array[5 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[0];
            ble_output_array[6 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
            ble_output_array[7 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[2];
 8081f70:	71a3      	strb	r3, [r4, #6]
            ble_output_array[8 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[3];
 8081f72:	71e0      	strb	r0, [r4, #7]


            //bytes 9-12 - latitude
            wordBytes.myWord = gps.get_latitudeWhole();
 8081f74:	4839      	ldr	r0, [pc, #228]	; (808205c <_Z15outputParticlesv+0x25c>)
 8081f76:	f004 ff5a 	bl	8086e2e <_ZN3GPS17get_latitudeWholeEv>
            ble_output_array[9 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8081f7a:	7220      	strb	r0, [r4, #8]
            ble_output_array[10 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8081f7c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8081f80:	7260      	strb	r0, [r4, #9]

            wordBytes.myWord = gps.get_latitudeFrac();
 8081f82:	4836      	ldr	r0, [pc, #216]	; (808205c <_Z15outputParticlesv+0x25c>)
 8081f84:	f004 ff56 	bl	8086e34 <_ZN3GPS16get_latitudeFracEv>
            ble_output_array[11 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8081f88:	72a0      	strb	r0, [r4, #10]
            ble_output_array[12 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8081f8a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8081f8e:	72e0      	strb	r0, [r4, #11]

            //bytes 14-17 - longitude
            wordBytes.myWord = gps.get_longitudeWhole();
 8081f90:	4832      	ldr	r0, [pc, #200]	; (808205c <_Z15outputParticlesv+0x25c>)
 8081f92:	f004 ff52 	bl	8086e3a <_ZN3GPS18get_longitudeWholeEv>
            ble_output_array[13 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8081f96:	7320      	strb	r0, [r4, #12]
            ble_output_array[14 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8081f98:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8081f9c:	7360      	strb	r0, [r4, #13]

            wordBytes.myWord = gps.get_longitudeFrac();
 8081f9e:	482f      	ldr	r0, [pc, #188]	; (808205c <_Z15outputParticlesv+0x25c>)
 8081fa0:	f004 ff4e 	bl	8086e40 <_ZN3GPS17get_longitudeFracEv>
            ble_output_array[15 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8081fa4:	73a0      	strb	r0, [r4, #14]
            ble_output_array[16 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8081fa6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8081faa:	73e0      	strb	r0, [r4, #15]


            //byte 18 - east west and north south indicator
            //  LSB 0 = East, LSB 1 = West
            //  MSB 0 = South, MSB 1 = North
            int northSouth = gps.get_nsIndicator();
 8081fac:	482b      	ldr	r0, [pc, #172]	; (808205c <_Z15outputParticlesv+0x25c>)
 8081fae:	f004 ff4a 	bl	8086e46 <_ZN3GPS15get_nsIndicatorEv>
 8081fb2:	4682      	mov	sl, r0
            int eastWest = gps.get_ewIndicator();
 8081fb4:	4829      	ldr	r0, [pc, #164]	; (808205c <_Z15outputParticlesv+0x25c>)
 8081fb6:	f004 ff49 	bl	8086e4c <_ZN3GPS15get_ewIndicatorEv>

            ble_output_array[17 + i*(BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
 8081fba:	ea4a 0000 	orr.w	r0, sl, r0
 8081fbe:	7420      	strb	r0, [r4, #16]
            ble_output_array[18 + i*(BLE_PAYLOAD_SIZE)] = gps.get_horizontalDillution();
 8081fc0:	4826      	ldr	r0, [pc, #152]	; (808205c <_Z15outputParticlesv+0x25c>)
 8081fc2:	f004 ff2f 	bl	8086e24 <_ZN3GPS23get_horizontalDillutionEv>
        corrected_PM_25 = PM2_5Value * pm_25_correction_factor;

        byte ble_output_array[NUMBER_OF_SPECIES*BLE_PAYLOAD_SIZE];     //19 bytes per data line and 12 species to output


        for(int i=0; i<5; i++){
 8081fc6:	3501      	adds	r5, #1
            int eastWest = gps.get_ewIndicator();

            ble_output_array[17 + i*(BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
            ble_output_array[18 + i*(BLE_PAYLOAD_SIZE)] = gps.get_horizontalDillution();

            ble_output_array[19 + i*(BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species
 8081fc8:	2323      	movs	r3, #35	; 0x23
        corrected_PM_25 = PM2_5Value * pm_25_correction_factor;

        byte ble_output_array[NUMBER_OF_SPECIES*BLE_PAYLOAD_SIZE];     //19 bytes per data line and 12 species to output


        for(int i=0; i<5; i++){
 8081fca:	2d05      	cmp	r5, #5
            //  MSB 0 = South, MSB 1 = North
            int northSouth = gps.get_nsIndicator();
            int eastWest = gps.get_ewIndicator();

            ble_output_array[17 + i*(BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
            ble_output_array[18 + i*(BLE_PAYLOAD_SIZE)] = gps.get_horizontalDillution();
 8081fcc:	7460      	strb	r0, [r4, #17]

            ble_output_array[19 + i*(BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species
 8081fce:	74a3      	strb	r3, [r4, #18]
 8081fd0:	f104 0416 	add.w	r4, r4, #22
        corrected_PM_25 = PM2_5Value * pm_25_correction_factor;

        byte ble_output_array[NUMBER_OF_SPECIES*BLE_PAYLOAD_SIZE];     //19 bytes per data line and 12 species to output


        for(int i=0; i<5; i++){
 8081fd4:	d197      	bne.n	8081f06 <_Z15outputParticlesv+0x106>
            ble_output_array[19 + i*(BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species

        }

        //send start delimeter to ESP
        Serial1.print("$");
 8081fd6:	f009 fc83 	bl	808b8e0 <_Z22__fetch_global_Serial1v>
 8081fda:	4921      	ldr	r1, [pc, #132]	; (8082060 <_Z15outputParticlesv+0x260>)
 8081fdc:	f008 fa86 	bl	808a4ec <_ZN5Print5printEPKc>
        //send the packaged data with # delimeters in between packets
        Serial1.write(ble_output_array, 5*BLE_PAYLOAD_SIZE);
 8081fe0:	f009 fc7e 	bl	808b8e0 <_Z22__fetch_global_Serial1v>
 8081fe4:	6803      	ldr	r3, [r0, #0]
 8081fe6:	226e      	movs	r2, #110	; 0x6e
 8081fe8:	68db      	ldr	r3, [r3, #12]
 8081fea:	a901      	add	r1, sp, #4
 8081fec:	4798      	blx	r3

        //send ending delimeter
        Serial1.print("&");
 8081fee:	f009 fc77 	bl	808b8e0 <_Z22__fetch_global_Serial1v>
 8081ff2:	491c      	ldr	r1, [pc, #112]	; (8082064 <_Z15outputParticlesv+0x264>)
 8081ff4:	f008 fa7a 	bl	808a4ec <_ZN5Print5printEPKc>
        sample_counter += 1;
 8081ff8:	683b      	ldr	r3, [r7, #0]
 8081ffa:	3301      	adds	r3, #1
 8081ffc:	603b      	str	r3, [r7, #0]
    union {
        int16_t myWord;
        unsigned char bytes[2];
    }wordBytes;

    while(!Serial.available()){
 8081ffe:	e702      	b.n	8081e06 <_Z15outputParticlesv+0x6>

        //send ending delimeter
        Serial1.print("&");
        sample_counter += 1;
    }
}
 8082000:	b03e      	add	sp, #248	; 0xf8
 8082002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8082006:	bf00      	nop
 8082008:	b4395810 	.word	0xb4395810
 808200c:	3fbe76c8 	.word	0x3fbe76c8
 8082010:	70a3d70a 	.word	0x70a3d70a
 8082014:	3ff30a3d 	.word	0x3ff30a3d
 8082018:	200006f8 	.word	0x200006f8
 808201c:	08090b47 	.word	0x08090b47
 8082020:	20000b7c 	.word	0x20000b7c
 8082024:	20000234 	.word	0x20000234
 8082028:	20000abc 	.word	0x20000abc
 808202c:	20000228 	.word	0x20000228
 8082030:	42c80000 	.word	0x42c80000
 8082034:	44bb8000 	.word	0x44bb8000
 8082038:	447d5000 	.word	0x447d5000
 808203c:	20000964 	.word	0x20000964
 8082040:	200009a0 	.word	0x200009a0
 8082044:	20000a28 	.word	0x20000a28
 8082048:	20000088 	.word	0x20000088
 808204c:	20000774 	.word	0x20000774
 8082050:	200008b8 	.word	0x200008b8
 8082054:	200008c8 	.word	0x200008c8
 8082058:	20000b1c 	.word	0x20000b1c
 808205c:	20000968 	.word	0x20000968
 8082060:	08090b5d 	.word	0x08090b5d
 8082064:	08090ab2 	.word	0x08090ab2

08082068 <_Z9goToSleepv>:
    int PM10Val;
    PM10Val=((thebuf[7]<<8) + thebuf[8]); //count PM10 value of the air detector module
    return PM10Val;
}

void goToSleep(void){
 8082068:	b500      	push	{lr}
    //Serial.println("Going to sleep:)");
    digitalWrite(power_led_en, LOW);
 808206a:	4b1e      	ldr	r3, [pc, #120]	; (80820e4 <_Z9goToSleepv+0x7c>)
    int PM10Val;
    PM10Val=((thebuf[7]<<8) + thebuf[8]); //count PM10 value of the air detector module
    return PM10Val;
}

void goToSleep(void){
 808206c:	b089      	sub	sp, #36	; 0x24
    //Serial.println("Going to sleep:)");
    digitalWrite(power_led_en, LOW);
 808206e:	8818      	ldrh	r0, [r3, #0]
 8082070:	2100      	movs	r1, #0
 8082072:	f009 fe5a 	bl	808bd2a <digitalWrite>
    digitalWrite(plantower_en, LOW);
 8082076:	4b1c      	ldr	r3, [pc, #112]	; (80820e8 <_Z9goToSleepv+0x80>)
 8082078:	2100      	movs	r1, #0
 808207a:	8818      	ldrh	r0, [r3, #0]
 808207c:	f009 fe55 	bl	808bd2a <digitalWrite>
    digitalWrite(esp_wroom_en, LOW);
 8082080:	4b1a      	ldr	r3, [pc, #104]	; (80820ec <_Z9goToSleepv+0x84>)
 8082082:	2100      	movs	r1, #0
 8082084:	8818      	ldrh	r0, [r3, #0]
 8082086:	f009 fe50 	bl	808bd2a <digitalWrite>
    digitalWrite(blower_en, LOW);
 808208a:	4b19      	ldr	r3, [pc, #100]	; (80820f0 <_Z9goToSleepv+0x88>)
 808208c:	2100      	movs	r1, #0
 808208e:	8818      	ldrh	r0, [r3, #0]
 8082090:	f009 fe4b 	bl	808bd2a <digitalWrite>
    digitalWrite(co2_en, LOW);
 8082094:	4b17      	ldr	r3, [pc, #92]	; (80820f4 <_Z9goToSleepv+0x8c>)
 8082096:	2100      	movs	r1, #0
 8082098:	8818      	ldrh	r0, [r3, #0]
 808209a:	f009 fe46 	bl	808bd2a <digitalWrite>
    digitalWrite(fiveVolt_en, LOW);
 808209e:	4b16      	ldr	r3, [pc, #88]	; (80820f8 <_Z9goToSleepv+0x90>)
 80820a0:	2100      	movs	r1, #0
 80820a2:	8818      	ldrh	r0, [r3, #0]
 80820a4:	f009 fe41 	bl	808bd2a <digitalWrite>
    enableLowPowerGPS();
 80820a8:	f7ff fa10 	bl	80814cc <_Z17enableLowPowerGPSv>
    System.sleep(D4, FALLING, sleepInterval * 2);     //every 2 minutes wake up and check if battery voltage is too low
 80820ac:	4b13      	ldr	r3, [pc, #76]	; (80820fc <_Z9goToSleepv+0x94>)
 80820ae:	4a14      	ldr	r2, [pc, #80]	; (8082100 <_Z9goToSleepv+0x98>)
 80820b0:	681b      	ldr	r3, [r3, #0]
 80820b2:	6812      	ldr	r2, [r2, #0]
 80820b4:	2104      	movs	r1, #4
 80820b6:	f8ad 1016 	strh.w	r1, [sp, #22]
        return sleep(sleepMode, seconds, flag);
    }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) {
        return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag);
 80820ba:	9202      	str	r2, [sp, #8]
 80820bc:	005b      	lsls	r3, r3, #1
 80820be:	2201      	movs	r2, #1
 80820c0:	2102      	movs	r1, #2
 80820c2:	f88d 1015 	strb.w	r1, [sp, #21]
 80820c6:	9301      	str	r3, [sp, #4]
 80820c8:	9200      	str	r2, [sp, #0]
 80820ca:	f10d 0315 	add.w	r3, sp, #21
 80820ce:	f10d 0116 	add.w	r1, sp, #22
 80820d2:	a806      	add	r0, sp, #24
 80820d4:	f007 feaa 	bl	8089e2c <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
    System.reset();
 80820d8:	f007 fe8d 	bl	8089df6 <_ZN11SystemClass5resetEv>
}
 80820dc:	b009      	add	sp, #36	; 0x24
 80820de:	f85d fb04 	ldr.w	pc, [sp], #4
 80820e2:	bf00      	nop
 80820e4:	20000098 	.word	0x20000098
 80820e8:	200000cc 	.word	0x200000cc
 80820ec:	200000a0 	.word	0x200000a0
 80820f0:	200000c8 	.word	0x200000c8
 80820f4:	200000a8 	.word	0x200000a8
 80820f8:	200000d4 	.word	0x200000d4
 80820fc:	20000094 	.word	0x20000094
 8082100:	200008c4 	.word	0x200008c4

08082104 <_Z16goToSleepBatteryv>:

void goToSleepBattery(void){
 8082104:	b510      	push	{r4, lr}
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 8082106:	4c2c      	ldr	r4, [pc, #176]	; (80821b8 <_Z16goToSleepBatteryv+0xb4>)
 8082108:	2101      	movs	r1, #1
 808210a:	8820      	ldrh	r0, [r4, #0]
 808210c:	f009 fe0d 	bl	808bd2a <digitalWrite>
    delay(250);                   // waits for a second
 8082110:	20fa      	movs	r0, #250	; 0xfa
 8082112:	f008 fda7 	bl	808ac64 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 8082116:	2100      	movs	r1, #0
 8082118:	8820      	ldrh	r0, [r4, #0]
 808211a:	f009 fe06 	bl	808bd2a <digitalWrite>
    delay(250);                   // waits for a second
 808211e:	20fa      	movs	r0, #250	; 0xfa
 8082120:	f008 fda0 	bl	808ac64 <delay>
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 8082124:	2101      	movs	r1, #1
 8082126:	8820      	ldrh	r0, [r4, #0]
 8082128:	f009 fdff 	bl	808bd2a <digitalWrite>
    delay(250);                   // waits for a second
 808212c:	20fa      	movs	r0, #250	; 0xfa
 808212e:	f008 fd99 	bl	808ac64 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 8082132:	2100      	movs	r1, #0
 8082134:	8820      	ldrh	r0, [r4, #0]
 8082136:	f009 fdf8 	bl	808bd2a <digitalWrite>
    delay(250);                   // waits for a second
 808213a:	20fa      	movs	r0, #250	; 0xfa
 808213c:	f008 fd92 	bl	808ac64 <delay>
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 8082140:	2101      	movs	r1, #1
 8082142:	8820      	ldrh	r0, [r4, #0]
 8082144:	f009 fdf1 	bl	808bd2a <digitalWrite>
    delay(250);                   // waits for a second
 8082148:	20fa      	movs	r0, #250	; 0xfa
 808214a:	f008 fd8b 	bl	808ac64 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 808214e:	2100      	movs	r1, #0
 8082150:	8820      	ldrh	r0, [r4, #0]
 8082152:	f009 fdea 	bl	808bd2a <digitalWrite>
    delay(250);                   // waits for a second
 8082156:	20fa      	movs	r0, #250	; 0xfa
 8082158:	f008 fd84 	bl	808ac64 <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 808215c:	2101      	movs	r1, #1
 808215e:	8820      	ldrh	r0, [r4, #0]
 8082160:	f009 fde3 	bl	808bd2a <digitalWrite>
    delay(250);                   // waits for a second
 8082164:	20fa      	movs	r0, #250	; 0xfa
 8082166:	f008 fd7d 	bl	808ac64 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 808216a:	2100      	movs	r1, #0
 808216c:	8820      	ldrh	r0, [r4, #0]
 808216e:	f009 fddc 	bl	808bd2a <digitalWrite>
    delay(250);                   // waits for a second
 8082172:	20fa      	movs	r0, #250	; 0xfa
 8082174:	f008 fd76 	bl	808ac64 <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 8082178:	2101      	movs	r1, #1
 808217a:	8820      	ldrh	r0, [r4, #0]
 808217c:	f009 fdd5 	bl	808bd2a <digitalWrite>
    delay(250);                   // waits for a second
 8082180:	20fa      	movs	r0, #250	; 0xfa
 8082182:	f008 fd6f 	bl	808ac64 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 8082186:	2100      	movs	r1, #0
 8082188:	8820      	ldrh	r0, [r4, #0]
 808218a:	f009 fdce 	bl	808bd2a <digitalWrite>
    delay(250);                   // waits for a second
 808218e:	20fa      	movs	r0, #250	; 0xfa
 8082190:	f008 fd68 	bl	808ac64 <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 8082194:	2101      	movs	r1, #1
 8082196:	8820      	ldrh	r0, [r4, #0]
 8082198:	f009 fdc7 	bl	808bd2a <digitalWrite>
    delay(250);                   // waits for a second
 808219c:	20fa      	movs	r0, #250	; 0xfa
 808219e:	f008 fd61 	bl	808ac64 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 80821a2:	8820      	ldrh	r0, [r4, #0]
 80821a4:	2100      	movs	r1, #0
 80821a6:	f009 fdc0 	bl	808bd2a <digitalWrite>
    digitalWrite(blower_en, HIGH);
    digitalWrite(co2_en, HIGH);
    digitalWrite(fiveVolt_en, HIGH);*/
    //System.sleep(SLEEP_MODE_DEEP, 600);

}
 80821aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
    delay(250);                   // waits for a second
    digitalWrite(power_led_en, LOW);    // Sets the LED off

    //Serial.println("Turning off batfet");
    writeRegister(7, 0b01101011);   //turn off batfet
 80821ae:	216b      	movs	r1, #107	; 0x6b
 80821b0:	2007      	movs	r0, #7
 80821b2:	f7fe be31 	b.w	8080e18 <_Z13writeRegisterhh>
 80821b6:	bf00      	nop
 80821b8:	20000098 	.word	0x20000098

080821bc <_Z8resetESPv>:
    digitalWrite(fiveVolt_en, HIGH);*/
    //System.sleep(SLEEP_MODE_DEEP, 600);

}

void resetESP(void){
 80821bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  digitalWrite(esp_wroom_en, LOW);
 80821be:	4f17      	ldr	r7, [pc, #92]	; (808221c <_Z8resetESPv+0x60>)
  digitalWrite(plantower_en, LOW);
 80821c0:	4e17      	ldr	r6, [pc, #92]	; (8082220 <_Z8resetESPv+0x64>)
    //System.sleep(SLEEP_MODE_DEEP, 600);

}

void resetESP(void){
  digitalWrite(esp_wroom_en, LOW);
 80821c2:	8838      	ldrh	r0, [r7, #0]
  digitalWrite(plantower_en, LOW);
  digitalWrite(blower_en, LOW);
 80821c4:	4d17      	ldr	r5, [pc, #92]	; (8082224 <_Z8resetESPv+0x68>)
    //System.sleep(SLEEP_MODE_DEEP, 600);

}

void resetESP(void){
  digitalWrite(esp_wroom_en, LOW);
 80821c6:	2100      	movs	r1, #0
 80821c8:	f009 fdaf 	bl	808bd2a <digitalWrite>
  digitalWrite(plantower_en, LOW);
  digitalWrite(blower_en, LOW);
  digitalWrite(co2_en, LOW);
 80821cc:	4c16      	ldr	r4, [pc, #88]	; (8082228 <_Z8resetESPv+0x6c>)

}

void resetESP(void){
  digitalWrite(esp_wroom_en, LOW);
  digitalWrite(plantower_en, LOW);
 80821ce:	8830      	ldrh	r0, [r6, #0]
 80821d0:	2100      	movs	r1, #0
 80821d2:	f009 fdaa 	bl	808bd2a <digitalWrite>
  digitalWrite(blower_en, LOW);
 80821d6:	8828      	ldrh	r0, [r5, #0]
 80821d8:	2100      	movs	r1, #0
 80821da:	f009 fda6 	bl	808bd2a <digitalWrite>
  digitalWrite(co2_en, LOW);
 80821de:	2100      	movs	r1, #0
 80821e0:	8820      	ldrh	r0, [r4, #0]
 80821e2:	f009 fda2 	bl	808bd2a <digitalWrite>
  delay(1000);
 80821e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80821ea:	f008 fd3b 	bl	808ac64 <delay>
  digitalWrite(esp_wroom_en, HIGH);
 80821ee:	8838      	ldrh	r0, [r7, #0]
 80821f0:	2101      	movs	r1, #1
 80821f2:	f009 fd9a 	bl	808bd2a <digitalWrite>
  digitalWrite(plantower_en, HIGH);
 80821f6:	8830      	ldrh	r0, [r6, #0]
 80821f8:	2101      	movs	r1, #1
 80821fa:	f009 fd96 	bl	808bd2a <digitalWrite>
  digitalWrite(blower_en, HIGH);
 80821fe:	8828      	ldrh	r0, [r5, #0]
 8082200:	2101      	movs	r1, #1
 8082202:	f009 fd92 	bl	808bd2a <digitalWrite>
  digitalWrite(co2_en, HIGH);
 8082206:	8820      	ldrh	r0, [r4, #0]
 8082208:	2101      	movs	r1, #1
 808220a:	f009 fd8e 	bl	808bd2a <digitalWrite>
  delay(1000);
}
 808220e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  delay(1000);
  digitalWrite(esp_wroom_en, HIGH);
  digitalWrite(plantower_en, HIGH);
  digitalWrite(blower_en, HIGH);
  digitalWrite(co2_en, HIGH);
  delay(1000);
 8082212:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8082216:	f008 bd25 	b.w	808ac64 <delay>
 808221a:	bf00      	nop
 808221c:	200000a0 	.word	0x200000a0
 8082220:	200000cc 	.word	0x200000cc
 8082224:	200000c8 	.word	0x200000c8
 8082228:	200000a8 	.word	0x200000a8

0808222c <setup>:
    file1.close();

}

void setup()
{
 808222c:	b570      	push	{r4, r5, r6, lr}
    status_word.status_int  = 0;
    status_word.status_int |= (APP_VERSION << 12) & 0xFF00;
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
 808222e:	4bb2      	ldr	r3, [pc, #712]	; (80824f8 <setup+0x2cc>)
    file1.close();

}

void setup()
{
 8082230:	b0aa      	sub	sp, #168	; 0xa8
    status_word.status_int  = 0;
    status_word.status_int |= (APP_VERSION << 12) & 0xFF00;
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
 8082232:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
    //status_word.status_int |= 0x6500;

    String init_log; //intialization error log
 8082236:	49b1      	ldr	r1, [pc, #708]	; (80824fc <setup+0x2d0>)
 8082238:	a803      	add	r0, sp, #12


    setADCSampleTime(ADC_SampleTime_480Cycles);
    //setup i/o
    pinMode(lmp91000_1_en, OUTPUT);
 808223a:	4db1      	ldr	r5, [pc, #708]	; (8082500 <setup+0x2d4>)

void setup()
{
    status_word.status_int  = 0;
    status_word.status_int |= (APP_VERSION << 12) & 0xFF00;
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
 808223c:	801a      	strh	r2, [r3, #0]


    setADCSampleTime(ADC_SampleTime_480Cycles);
    //setup i/o
    pinMode(lmp91000_1_en, OUTPUT);
    pinMode(lmp91000_2_en, OUTPUT);
 808223e:	4eb1      	ldr	r6, [pc, #708]	; (8082504 <setup+0x2d8>)
    status_word.status_int  = 0;
    status_word.status_int |= (APP_VERSION << 12) & 0xFF00;
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
    //status_word.status_int |= 0x6500;

    String init_log; //intialization error log
 8082240:	f007 ff5d 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>


    setADCSampleTime(ADC_SampleTime_480Cycles);
 8082244:	2007      	movs	r0, #7
 8082246:	f008 fd0b 	bl	808ac60 <setADCSampleTime>
    //setup i/o
    pinMode(lmp91000_1_en, OUTPUT);
 808224a:	2101      	movs	r1, #1
 808224c:	8828      	ldrh	r0, [r5, #0]
 808224e:	f009 fd5b 	bl	808bd08 <pinMode>
    pinMode(lmp91000_2_en, OUTPUT);
 8082252:	2101      	movs	r1, #1
 8082254:	8830      	ldrh	r0, [r6, #0]
 8082256:	f009 fd57 	bl	808bd08 <pinMode>
    pinMode(fiveVolt_en, OUTPUT);
 808225a:	4bab      	ldr	r3, [pc, #684]	; (8082508 <setup+0x2dc>)
 808225c:	2101      	movs	r1, #1
 808225e:	8818      	ldrh	r0, [r3, #0]
 8082260:	f009 fd52 	bl	808bd08 <pinMode>
    pinMode(plantower_en, OUTPUT);
 8082264:	4ba9      	ldr	r3, [pc, #676]	; (808250c <setup+0x2e0>)
 8082266:	2101      	movs	r1, #1
 8082268:	8818      	ldrh	r0, [r3, #0]
 808226a:	f009 fd4d 	bl	808bd08 <pinMode>
    pinMode(power_led_en, OUTPUT);
 808226e:	4ba8      	ldr	r3, [pc, #672]	; (8082510 <setup+0x2e4>)
 8082270:	2101      	movs	r1, #1
 8082272:	8818      	ldrh	r0, [r3, #0]
 8082274:	f009 fd48 	bl	808bd08 <pinMode>
    pinMode(esp_wroom_en, OUTPUT);
 8082278:	4ba6      	ldr	r3, [pc, #664]	; (8082514 <setup+0x2e8>)
 808227a:	2101      	movs	r1, #1
 808227c:	8818      	ldrh	r0, [r3, #0]
 808227e:	f009 fd43 	bl	808bd08 <pinMode>
    pinMode(blower_en, OUTPUT);
 8082282:	4ba5      	ldr	r3, [pc, #660]	; (8082518 <setup+0x2ec>)
 8082284:	2101      	movs	r1, #1
 8082286:	8818      	ldrh	r0, [r3, #0]
 8082288:	f009 fd3e 	bl	808bd08 <pinMode>
    pinMode(D4, INPUT);
 808228c:	2100      	movs	r1, #0
 808228e:	2004      	movs	r0, #4
 8082290:	f009 fd3a 	bl	808bd08 <pinMode>
    pinMode(co2_en, OUTPUT);
 8082294:	4ba1      	ldr	r3, [pc, #644]	; (808251c <setup+0x2f0>)
 8082296:	2101      	movs	r1, #1
 8082298:	8818      	ldrh	r0, [r3, #0]
 808229a:	f009 fd35 	bl	808bd08 <pinMode>

    //read all stored variables (calibration parameters)
    readStoredVars();
 808229e:	f7fe fef3 	bl	8081088 <_Z14readStoredVarsv>

    pmic.begin();
 80822a2:	489f      	ldr	r0, [pc, #636]	; (8082520 <setup+0x2f4>)
 80822a4:	f007 fba8 	bl	80899f8 <_ZN4PMIC5beginEv>
    pmic.setChargeVoltage(4208);      //  Set Li-Po charge termination voltage to 4.21V,
 80822a8:	f241 0170 	movw	r1, #4208	; 0x1070
 80822ac:	489c      	ldr	r0, [pc, #624]	; (8082520 <setup+0x2f4>)
 80822ae:	f007 fcd3 	bl	8089c58 <_ZN4PMIC16setChargeVoltageEt>
    //pmic.setChargeCurrent(0,1,1,0,0,0);
    //pmic.setInputCurrentLimit(1200);
    pmic.enableCharging();
 80822b2:	489b      	ldr	r0, [pc, #620]	; (8082520 <setup+0x2f4>)
 80822b4:	f007 fc9b 	bl	8089bee <_ZN4PMIC14enableChargingEv>
    writeRegister(0, 0b00110100);
    writeRegister(1, 0b00011011);
    //writeRegister(2, 0b01100000);
    //check power
    powerCheck.loop();
 80822b8:	4c9a      	ldr	r4, [pc, #616]	; (8082524 <setup+0x2f8>)
    pmic.begin();
    pmic.setChargeVoltage(4208);      //  Set Li-Po charge termination voltage to 4.21V,
    //pmic.setChargeCurrent(0,1,1,0,0,0);
    //pmic.setInputCurrentLimit(1200);
    pmic.enableCharging();
    writeRegister(0, 0b00110100);
 80822ba:	2134      	movs	r1, #52	; 0x34
 80822bc:	2000      	movs	r0, #0
 80822be:	f7fe fdab 	bl	8080e18 <_Z13writeRegisterhh>
    writeRegister(1, 0b00011011);
 80822c2:	211b      	movs	r1, #27
 80822c4:	2001      	movs	r0, #1
 80822c6:	f7fe fda7 	bl	8080e18 <_Z13writeRegisterhh>
    //writeRegister(2, 0b01100000);
    //check power
    powerCheck.loop();
 80822ca:	4620      	mov	r0, r4
 80822cc:	f004 fc2e 	bl	8086b2c <_ZN10PowerCheck4loopEv>

    
    if(car_topper_power_en && powerCheck.getHasPower() == 0){
 80822d0:	4b95      	ldr	r3, [pc, #596]	; (8082528 <setup+0x2fc>)
 80822d2:	681b      	ldr	r3, [r3, #0]
 80822d4:	b123      	cbz	r3, 80822e0 <setup+0xb4>
 80822d6:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80822da:	2b00      	cmp	r3, #0
 80822dc:	f000 829a 	beq.w	8082814 <setup+0x5e8>
        goToSleepBattery();
    }else if((battery_threshold_enable == 1) && (fuel.getSoC() < BATTERY_THRESHOLD) && (powerCheck.getHasPower() == 0)){
 80822e0:	4b92      	ldr	r3, [pc, #584]	; (808252c <setup+0x300>)
 80822e2:	681b      	ldr	r3, [r3, #0]
 80822e4:	2b01      	cmp	r3, #1
 80822e6:	d10b      	bne.n	8082300 <setup+0xd4>
 80822e8:	4891      	ldr	r0, [pc, #580]	; (8082530 <setup+0x304>)
 80822ea:	f008 fd2f 	bl	808ad4c <_ZN9FuelGauge6getSoCEv>
 80822ee:	4991      	ldr	r1, [pc, #580]	; (8082534 <setup+0x308>)
 80822f0:	f00a fef6 	bl	808d0e0 <__aeabi_fcmplt>
 80822f4:	b120      	cbz	r0, 8082300 <setup+0xd4>
 80822f6:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80822fa:	2b00      	cmp	r3, #0
 80822fc:	f000 828a 	beq.w	8082814 <setup+0x5e8>
            //Serial.println("Going to sleep because battery is below 20% charge");
        goToSleepBattery();
    }
    //if user presses power button during operation, reset and it will go to low power mode
    attachInterrupt(D4, System.reset, RISING);
 8082300:	2300      	movs	r3, #0
 8082302:	9300      	str	r3, [sp, #0]
 8082304:	2201      	movs	r2, #1
 8082306:	f04f 33ff 	mov.w	r3, #4294967295
 808230a:	498b      	ldr	r1, [pc, #556]	; (8082538 <setup+0x30c>)
 808230c:	2004      	movs	r0, #4
 808230e:	f009 f9fd 	bl	808b70c <_Z15attachInterrupttPFvvE13InterruptModeah>
    if(digitalRead(D4)){
 8082312:	2004      	movs	r0, #4
 8082314:	f009 fd22 	bl	808bd5c <digitalRead>
 8082318:	b108      	cbz	r0, 808231e <setup+0xf2>
      goToSleep();
 808231a:	f7ff fea5 	bl	8082068 <_Z9goToSleepv>
    }

    digitalWrite(lmp91000_1_en, HIGH);
 808231e:	2101      	movs	r1, #1
 8082320:	8828      	ldrh	r0, [r5, #0]
 8082322:	f009 fd02 	bl	808bd2a <digitalWrite>
    digitalWrite(lmp91000_2_en, HIGH);
 8082326:	2101      	movs	r1, #1
 8082328:	8830      	ldrh	r0, [r6, #0]
 808232a:	f009 fcfe 	bl	808bd2a <digitalWrite>
    digitalWrite(power_led_en, HIGH);
 808232e:	4b78      	ldr	r3, [pc, #480]	; (8082510 <setup+0x2e4>)
 8082330:	2101      	movs	r1, #1
 8082332:	8818      	ldrh	r0, [r3, #0]
 8082334:	f009 fcf9 	bl	808bd2a <digitalWrite>
    digitalWrite(plantower_en, HIGH);
 8082338:	4b74      	ldr	r3, [pc, #464]	; (808250c <setup+0x2e0>)
 808233a:	2101      	movs	r1, #1
 808233c:	8818      	ldrh	r0, [r3, #0]
 808233e:	f009 fcf4 	bl	808bd2a <digitalWrite>
    digitalWrite(esp_wroom_en, HIGH);
 8082342:	4b74      	ldr	r3, [pc, #464]	; (8082514 <setup+0x2e8>)
 8082344:	2101      	movs	r1, #1
 8082346:	8818      	ldrh	r0, [r3, #0]
 8082348:	f009 fcef 	bl	808bd2a <digitalWrite>
    digitalWrite(blower_en, HIGH);
 808234c:	4b72      	ldr	r3, [pc, #456]	; (8082518 <setup+0x2ec>)
 808234e:	2101      	movs	r1, #1
 8082350:	8818      	ldrh	r0, [r3, #0]
 8082352:	f009 fcea 	bl	808bd2a <digitalWrite>
    digitalWrite(co2_en, HIGH);
 8082356:	4b71      	ldr	r3, [pc, #452]	; (808251c <setup+0x2f0>)
 8082358:	2101      	movs	r1, #1
 808235a:	8818      	ldrh	r0, [r3, #0]
 808235c:	f009 fce5 	bl	808bd2a <digitalWrite>
    digitalWrite(fiveVolt_en, HIGH);
 8082360:	4b69      	ldr	r3, [pc, #420]	; (8082508 <setup+0x2dc>)
 8082362:	2101      	movs	r1, #1
 8082364:	8818      	ldrh	r0, [r3, #0]
 8082366:	f009 fce0 	bl	808bd2a <digitalWrite>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 808236a:	4a74      	ldr	r2, [pc, #464]	; (808253c <setup+0x310>)
 808236c:	4974      	ldr	r1, [pc, #464]	; (8082540 <setup+0x314>)
 808236e:	4875      	ldr	r0, [pc, #468]	; (8082544 <setup+0x318>)
 8082370:	f008 fe16 	bl	808afa0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>

    // register the cloud function
    Particle.function("geteepromdata", remoteReadStoredVars);
    //debugging_enabled = 1;  //for testing...
    //initialize serial1 for communication with BLE nano from redbear labs
    Serial1.begin(9600);
 8082374:	f009 fab4 	bl	808b8e0 <_Z22__fetch_global_Serial1v>
 8082378:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 808237c:	f009 faaa 	bl	808b8d4 <_ZN11USARTSerial5beginEm>
    //init serial4 to communicate with Plantower PMS5003
    Serial4.begin(9600);
 8082380:	f7fe fcac 	bl	8080cdc <_Z22__fetch_global_Serial4v>
 8082384:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8082388:	f009 faa4 	bl	808b8d4 <_ZN11USARTSerial5beginEm>
    Serial5.begin(9600);        //gps is connected to this serial port
 808238c:	f7fe fce0 	bl	8080d50 <_Z22__fetch_global_Serial5v>
 8082390:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8082394:	f009 fa9e 	bl	808b8d4 <_ZN11USARTSerial5beginEm>
    //set the Timeout to 1500ms, longer than the data transmission periodic time of the sensor
    Serial4.setTimeout(5000);
 8082398:	f7fe fca0 	bl	8080cdc <_Z22__fetch_global_Serial4v>
 808239c:	f241 3188 	movw	r1, #5000	; 0x1388
 80823a0:	f008 fa3b 	bl	808a81a <_ZN6Stream10setTimeoutEm>
    // REG07 Misc Operation Control Register Format
    writeRegister(7, 0b01001011);   //0x4B*/


    //delay for 5 seconds to give time to programmer person for connecting to serial port for debugging
    delay(10000);
 80823a4:	f242 7010 	movw	r0, #10000	; 0x2710
 80823a8:	f008 fc5c 	bl	808ac64 <delay>
    //initialize main serial port for debug output
    Serial.begin(9600);
 80823ac:	f009 f94a 	bl	808b644 <_Z16_fetch_usbserialv>
 80823b0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80823b4:	f009 f92c 	bl	808b610 <_ZN9USBSerial5beginEl>



    #if sd_en
     fileName = String(DEVICE_id) + "_" + String(Time.year()) + String(Time.month()) + String(Time.day()) + "_" + String(Time.hour()) + String(Time.minute()) + String(Time.second()) + ".txt";
 80823b8:	4b63      	ldr	r3, [pc, #396]	; (8082548 <setup+0x31c>)
 80823ba:	220a      	movs	r2, #10
 80823bc:	6819      	ldr	r1, [r3, #0]
 80823be:	a807      	add	r0, sp, #28
 80823c0:	f007 ff11 	bl	808a1e6 <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80823c4:	a907      	add	r1, sp, #28
 80823c6:	a80b      	add	r0, sp, #44	; 0x2c
 80823c8:	f007 fed8 	bl	808a17c <_ZN6StringC1ERKS_>
 80823cc:	495f      	ldr	r1, [pc, #380]	; (808254c <setup+0x320>)
 80823ce:	a80b      	add	r0, sp, #44	; 0x2c
 80823d0:	f007 ffc4 	bl	808a35c <_ZplRK15StringSumHelperPKc>
 80823d4:	4604      	mov	r4, r0
 80823d6:	f008 fc2f 	bl	808ac38 <_ZN9TimeClass4yearEv>
 80823da:	220a      	movs	r2, #10
 80823dc:	4601      	mov	r1, r0
 80823de:	a80f      	add	r0, sp, #60	; 0x3c
 80823e0:	f007 ff01 	bl	808a1e6 <_ZN6StringC1Eih>
 80823e4:	a90f      	add	r1, sp, #60	; 0x3c
 80823e6:	4620      	mov	r0, r4
 80823e8:	f007 ffac 	bl	808a344 <_ZplRK15StringSumHelperRK6String>
 80823ec:	4604      	mov	r4, r0
 80823ee:	f008 fc1b 	bl	808ac28 <_ZN9TimeClass5monthEv>
 80823f2:	220a      	movs	r2, #10
 80823f4:	4601      	mov	r1, r0
 80823f6:	a813      	add	r0, sp, #76	; 0x4c
 80823f8:	f007 fef5 	bl	808a1e6 <_ZN6StringC1Eih>
 80823fc:	a913      	add	r1, sp, #76	; 0x4c
 80823fe:	4620      	mov	r0, r4
 8082400:	f007 ffa0 	bl	808a344 <_ZplRK15StringSumHelperRK6String>
 8082404:	4604      	mov	r4, r0
 8082406:	f008 fc05 	bl	808ac14 <_ZN9TimeClass3dayEv>
 808240a:	220a      	movs	r2, #10
 808240c:	4601      	mov	r1, r0
 808240e:	a817      	add	r0, sp, #92	; 0x5c
 8082410:	f007 fee9 	bl	808a1e6 <_ZN6StringC1Eih>
 8082414:	a917      	add	r1, sp, #92	; 0x5c
 8082416:	4620      	mov	r0, r4
 8082418:	f007 ff94 	bl	808a344 <_ZplRK15StringSumHelperRK6String>
 808241c:	494b      	ldr	r1, [pc, #300]	; (808254c <setup+0x320>)
 808241e:	f007 ff9d 	bl	808a35c <_ZplRK15StringSumHelperPKc>
 8082422:	4604      	mov	r4, r0
 8082424:	f008 fbd8 	bl	808abd8 <_ZN9TimeClass4hourEv>
 8082428:	220a      	movs	r2, #10
 808242a:	4601      	mov	r1, r0
 808242c:	a81b      	add	r0, sp, #108	; 0x6c
 808242e:	f007 feda 	bl	808a1e6 <_ZN6StringC1Eih>
 8082432:	a91b      	add	r1, sp, #108	; 0x6c
 8082434:	4620      	mov	r0, r4
 8082436:	f007 ff85 	bl	808a344 <_ZplRK15StringSumHelperRK6String>
 808243a:	4604      	mov	r4, r0
 808243c:	f008 fbd6 	bl	808abec <_ZN9TimeClass6minuteEv>
 8082440:	220a      	movs	r2, #10
 8082442:	4601      	mov	r1, r0
 8082444:	a81f      	add	r0, sp, #124	; 0x7c
 8082446:	f007 fece 	bl	808a1e6 <_ZN6StringC1Eih>
 808244a:	a91f      	add	r1, sp, #124	; 0x7c
 808244c:	4620      	mov	r0, r4
 808244e:	f007 ff79 	bl	808a344 <_ZplRK15StringSumHelperRK6String>
 8082452:	4604      	mov	r4, r0
 8082454:	f008 fbd4 	bl	808ac00 <_ZN9TimeClass6secondEv>
 8082458:	220a      	movs	r2, #10
 808245a:	4601      	mov	r1, r0
 808245c:	a823      	add	r0, sp, #140	; 0x8c
 808245e:	f007 fec2 	bl	808a1e6 <_ZN6StringC1Eih>
 8082462:	a923      	add	r1, sp, #140	; 0x8c
 8082464:	4620      	mov	r0, r4
 8082466:	f007 ff6d 	bl	808a344 <_ZplRK15StringSumHelperRK6String>
 808246a:	4939      	ldr	r1, [pc, #228]	; (8082550 <setup+0x324>)
 808246c:	f007 ff76 	bl	808a35c <_ZplRK15StringSumHelperPKc>
 8082470:	4c38      	ldr	r4, [pc, #224]	; (8082554 <setup+0x328>)
 8082472:	4601      	mov	r1, r0
 8082474:	4620      	mov	r0, r4
 8082476:	f007 fe72 	bl	808a15e <_ZN6StringaSERKS_>
 808247a:	a823      	add	r0, sp, #140	; 0x8c
 808247c:	f007 fdf8 	bl	808a070 <_ZN6StringD1Ev>
 8082480:	a81f      	add	r0, sp, #124	; 0x7c
 8082482:	f007 fdf5 	bl	808a070 <_ZN6StringD1Ev>
 8082486:	a81b      	add	r0, sp, #108	; 0x6c
 8082488:	f007 fdf2 	bl	808a070 <_ZN6StringD1Ev>
 808248c:	a817      	add	r0, sp, #92	; 0x5c
 808248e:	f007 fdef 	bl	808a070 <_ZN6StringD1Ev>
 8082492:	a813      	add	r0, sp, #76	; 0x4c
 8082494:	f007 fdec 	bl	808a070 <_ZN6StringD1Ev>
 8082498:	a80f      	add	r0, sp, #60	; 0x3c
 808249a:	f007 fde9 	bl	808a070 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808249e:	a80b      	add	r0, sp, #44	; 0x2c
 80824a0:	f007 fde6 	bl	808a070 <_ZN6StringD1Ev>
 80824a4:	a807      	add	r0, sp, #28
 80824a6:	f007 fde3 	bl	808a070 <_ZN6StringD1Ev>
     Serial.println("Checking for sd card");
 80824aa:	f009 f8cb 	bl	808b644 <_Z16_fetch_usbserialv>
 80824ae:	492a      	ldr	r1, [pc, #168]	; (8082558 <setup+0x32c>)
 80824b0:	f008 f82f 	bl	808a512 <_ZN5Print7printlnEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80824b4:	4929      	ldr	r1, [pc, #164]	; (808255c <setup+0x330>)
 80824b6:	a823      	add	r0, sp, #140	; 0x8c
 80824b8:	f007 fe21 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
     logFileName = "log_" + fileName;
 80824bc:	4621      	mov	r1, r4
 80824be:	a823      	add	r0, sp, #140	; 0x8c
 80824c0:	f007 ff40 	bl	808a344 <_ZplRK15StringSumHelperRK6String>
 80824c4:	4601      	mov	r1, r0
 80824c6:	4826      	ldr	r0, [pc, #152]	; (8082560 <setup+0x334>)
 80824c8:	f007 fe49 	bl	808a15e <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80824cc:	a823      	add	r0, sp, #140	; 0x8c
 80824ce:	f007 fdcf 	bl	808a070 <_ZN6StringD1Ev>
 80824d2:	4924      	ldr	r1, [pc, #144]	; (8082564 <setup+0x338>)
 80824d4:	2302      	movs	r3, #2
 80824d6:	220c      	movs	r2, #12
 80824d8:	f5a1 608e 	sub.w	r0, r1, #1136	; 0x470
 80824dc:	f7fe fc72 	bl	8080dc4 <_ZN9SdFatBase5beginEP9SdSpiBasehh>

    if (sd.begin(CS)) { //if uSD is functioning and MCP error has not been logged yet.
 80824e0:	2800      	cmp	r0, #0
 80824e2:	d043      	beq.n	808256c <setup+0x340>
      //look for a wifi file
      check_wifi_file();
      //look for a calibration file
      check_cal_file();*/

      Serial.print("Created new file to log to uSD card: ");
 80824e4:	f009 f8ae 	bl	808b644 <_Z16_fetch_usbserialv>
 80824e8:	491f      	ldr	r1, [pc, #124]	; (8082568 <setup+0x33c>)
 80824ea:	f007 ffff 	bl	808a4ec <_ZN5Print5printEPKc>
      Serial.println(fileName);
 80824ee:	f009 f8a9 	bl	808b644 <_Z16_fetch_usbserialv>
 80824f2:	6821      	ldr	r1, [r4, #0]
 80824f4:	e03d      	b.n	8082572 <setup+0x346>
 80824f6:	bf00      	nop
 80824f8:	20000b74 	.word	0x20000b74
 80824fc:	08092fdc 	.word	0x08092fdc
 8082500:	2000009c 	.word	0x2000009c
 8082504:	200000d0 	.word	0x200000d0
 8082508:	200000d4 	.word	0x200000d4
 808250c:	200000cc 	.word	0x200000cc
 8082510:	20000098 	.word	0x20000098
 8082514:	200000a0 	.word	0x200000a0
 8082518:	200000c8 	.word	0x200000c8
 808251c:	200000a8 	.word	0x200000a8
 8082520:	20000ad4 	.word	0x20000ad4
 8082524:	20000788 	.word	0x20000788
 8082528:	2000021c 	.word	0x2000021c
 808252c:	20000b78 	.word	0x20000b78
 8082530:	200008b8 	.word	0x200008b8
 8082534:	41a00000 	.word	0x41a00000
 8082538:	08089df7 	.word	0x08089df7
 808253c:	08090b5f 	.word	0x08090b5f
 8082540:	08080c1d 	.word	0x08080c1d
 8082544:	0808af75 	.word	0x0808af75
 8082548:	20000088 	.word	0x20000088
 808254c:	08090b85 	.word	0x08090b85
 8082550:	0809080f 	.word	0x0809080f
 8082554:	20000adc 	.word	0x20000adc
 8082558:	08090b6d 	.word	0x08090b6d
 808255c:	08090b82 	.word	0x08090b82
 8082560:	200007ac 	.word	0x200007ac
 8082564:	200006ac 	.word	0x200006ac
 8082568:	08090b87 	.word	0x08090b87
    }else { //uSD is not functioning
        Serial.println("No uSD card detected.");
 808256c:	f009 f86a 	bl	808b644 <_Z16_fetch_usbserialv>
 8082570:	49aa      	ldr	r1, [pc, #680]	; (808281c <setup+0x5f0>)
    #endif


    //setup the AFE
    Serial.println("Starting LMP91000 CO initialization");
    if(debugging_enabled)
 8082572:	4cab      	ldr	r4, [pc, #684]	; (8082820 <setup+0x5f4>)
      check_cal_file();*/

      Serial.print("Created new file to log to uSD card: ");
      Serial.println(fileName);
    }else { //uSD is not functioning
        Serial.println("No uSD card detected.");
 8082574:	f007 ffcd 	bl	808a512 <_ZN5Print7printlnEPKc>
    }
    #endif


    //setup the AFE
    Serial.println("Starting LMP91000 CO initialization");
 8082578:	f009 f864 	bl	808b644 <_Z16_fetch_usbserialv>
 808257c:	49a9      	ldr	r1, [pc, #676]	; (8082824 <setup+0x5f8>)
 808257e:	f007 ffc8 	bl	808a512 <_ZN5Print7printlnEPKc>
    if(debugging_enabled)
 8082582:	6823      	ldr	r3, [r4, #0]
 8082584:	b14b      	cbz	r3, 808259a <setup+0x36e>
        writeLogFile("Starting LMP91000 CO initialization");
 8082586:	49a7      	ldr	r1, [pc, #668]	; (8082824 <setup+0x5f8>)
 8082588:	a823      	add	r0, sp, #140	; 0x8c
 808258a:	f007 fdb8 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
 808258e:	a823      	add	r0, sp, #140	; 0x8c
 8082590:	f7ff f9fa 	bl	8081988 <_Z12writeLogFile6String>
 8082594:	a823      	add	r0, sp, #140	; 0x8c
 8082596:	f007 fd6b 	bl	808a070 <_ZN6StringD1Ev>
    Wire.begin();   //this must be done for the LMP91000
 808259a:	f009 fc63 	bl	808be64 <_Z19__fetch_global_Wirev>
 808259e:	f009 fa17 	bl	808b9d0 <_ZN7TwoWire5beginEv>
    digitalWrite(lmp91000_1_en, LOW); //enable the chip
 80825a2:	2100      	movs	r1, #0
 80825a4:	8828      	ldrh	r0, [r5, #0]
 80825a6:	f009 fbc0 	bl	808bd2a <digitalWrite>

    if(lmp91000.configure(LMP91000_TIA_GAIN_120K | LMP91000_RLOAD_10OHM, LMP91000_REF_SOURCE_EXT | LMP91000_INT_Z_50PCT | LMP91000_BIAS_SIGN_POS | LMP91000_BIAS_0PCT, LMP91000_FET_SHORT_DISABLED | LMP91000_OP_MODE_AMPEROMETRIC) == 0)
 80825aa:	2303      	movs	r3, #3
 80825ac:	22b0      	movs	r2, #176	; 0xb0
 80825ae:	2118      	movs	r1, #24
 80825b0:	489d      	ldr	r0, [pc, #628]	; (8082828 <setup+0x5fc>)
 80825b2:	f004 fa5d 	bl	8086a70 <_ZN8LMP910009configureEhhh>
 80825b6:	b988      	cbnz	r0, 80825dc <setup+0x3b0>
    {
          Serial.println("Couldn't communicate with LMP91000 for CO");
 80825b8:	f009 f844 	bl	808b644 <_Z16_fetch_usbserialv>
 80825bc:	499b      	ldr	r1, [pc, #620]	; (808282c <setup+0x600>)
 80825be:	f007 ffa8 	bl	808a512 <_ZN5Print7printlnEPKc>
          if(debugging_enabled){
 80825c2:	6823      	ldr	r3, [r4, #0]
 80825c4:	b1fb      	cbz	r3, 8082606 <setup+0x3da>
            writeLogFile("Couldn't communicate with LMP91000 for CO");
 80825c6:	4999      	ldr	r1, [pc, #612]	; (808282c <setup+0x600>)
 80825c8:	a823      	add	r0, sp, #140	; 0x8c
 80825ca:	f007 fd98 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
 80825ce:	a823      	add	r0, sp, #140	; 0x8c
 80825d0:	f7ff f9da 	bl	8081988 <_Z12writeLogFile6String>
 80825d4:	a823      	add	r0, sp, #140	; 0x8c
 80825d6:	f007 fd4b 	bl	808a070 <_ZN6StringD1Ev>
 80825da:	e014      	b.n	8082606 <setup+0x3da>
          }
    }else{
          Serial.println("Initialized LMP91000 for CO");
 80825dc:	f009 f832 	bl	808b644 <_Z16_fetch_usbserialv>
 80825e0:	4993      	ldr	r1, [pc, #588]	; (8082830 <setup+0x604>)
 80825e2:	f007 ff96 	bl	808a512 <_ZN5Print7printlnEPKc>
          if(debugging_enabled){
 80825e6:	6823      	ldr	r3, [r4, #0]
 80825e8:	b14b      	cbz	r3, 80825fe <setup+0x3d2>
            writeLogFile("Initialized LMP91000 for CO");
 80825ea:	4991      	ldr	r1, [pc, #580]	; (8082830 <setup+0x604>)
 80825ec:	a823      	add	r0, sp, #140	; 0x8c
 80825ee:	f007 fd86 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
 80825f2:	a823      	add	r0, sp, #140	; 0x8c
 80825f4:	f7ff f9c8 	bl	8081988 <_Z12writeLogFile6String>
 80825f8:	a823      	add	r0, sp, #140	; 0x8c
 80825fa:	f007 fd39 	bl	808a070 <_ZN6StringD1Ev>
          Serial.println(lmp91000.read(LMP91000_TIACN_REG),HEX);
          Serial.print("REFCN: ");
          Serial.println(lmp91000.read(LMP91000_REFCN_REG),HEX);
          Serial.print("MODECN: ");
          Serial.println(lmp91000.read(LMP91000_MODECN_REG),HEX);*/
          digitalWrite(lmp91000_1_en, HIGH);  //disable
 80825fe:	2101      	movs	r1, #1
 8082600:	8828      	ldrh	r0, [r5, #0]
 8082602:	f009 fb92 	bl	808bd2a <digitalWrite>
    }
    ads1.begin();
 8082606:	488b      	ldr	r0, [pc, #556]	; (8082834 <setup+0x608>)
 8082608:	f004 fb2e 	bl	8086c68 <_ZN16Adafruit_ADS10155beginEv>
    if(Wire.requestFrom(0x49,1) == 0) { //if can't get 1 byte from ADC1, add it to the init error log
 808260c:	f009 fc2a 	bl	808be64 <_Z19__fetch_global_Wirev>
 8082610:	2201      	movs	r2, #1
 8082612:	2149      	movs	r1, #73	; 0x49
 8082614:	f009 f9ee 	bl	808b9f4 <_ZN7TwoWire11requestFromEii>
 8082618:	b988      	cbnz	r0, 808263e <setup+0x412>
      //init_log += "AD1,";
      //digitalWrite(red_status_led, HIGH);
      //delay(200);
      //digitalWrite(red_status_led, LOW);
      //delay(200);
      Serial.println("Could not communicate with Adafruit_ADS1115 for CO");
 808261a:	f009 f813 	bl	808b644 <_Z16_fetch_usbserialv>
 808261e:	4986      	ldr	r1, [pc, #536]	; (8082838 <setup+0x60c>)
 8082620:	f007 ff77 	bl	808a512 <_ZN5Print7printlnEPKc>
      if(debugging_enabled)
 8082624:	6823      	ldr	r3, [r4, #0]
 8082626:	b173      	cbz	r3, 8082646 <setup+0x41a>
        writeLogFile("Could not communicate with Adafruit_ADS1115 for CO");
 8082628:	4983      	ldr	r1, [pc, #524]	; (8082838 <setup+0x60c>)
 808262a:	a823      	add	r0, sp, #140	; 0x8c
 808262c:	f007 fd67 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
 8082630:	a823      	add	r0, sp, #140	; 0x8c
 8082632:	f7ff f9a9 	bl	8081988 <_Z12writeLogFile6String>
 8082636:	a823      	add	r0, sp, #140	; 0x8c
 8082638:	f007 fd1a 	bl	808a070 <_ZN6StringD1Ev>
 808263c:	e003      	b.n	8082646 <setup+0x41a>
    }
    else{
      ads1.setGain(GAIN_TWOTHIRDS);
 808263e:	2100      	movs	r1, #0
 8082640:	487c      	ldr	r0, [pc, #496]	; (8082834 <setup+0x608>)
 8082642:	f004 fb18 	bl	8086c76 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
    }

    //AFE 2 setup
    //#if AFE2_en
    Serial.println("Starting LMP91000 2 initialization");
 8082646:	f008 fffd 	bl	808b644 <_Z16_fetch_usbserialv>
 808264a:	497c      	ldr	r1, [pc, #496]	; (808283c <setup+0x610>)
 808264c:	f007 ff61 	bl	808a512 <_ZN5Print7printlnEPKc>
    if(debugging_enabled)
 8082650:	6823      	ldr	r3, [r4, #0]
 8082652:	b14b      	cbz	r3, 8082668 <setup+0x43c>
        writeLogFile("Starting LMP91000 2 initialization");
 8082654:	4979      	ldr	r1, [pc, #484]	; (808283c <setup+0x610>)
 8082656:	a823      	add	r0, sp, #140	; 0x8c
 8082658:	f007 fd51 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
 808265c:	a823      	add	r0, sp, #140	; 0x8c
 808265e:	f7ff f993 	bl	8081988 <_Z12writeLogFile6String>
 8082662:	a823      	add	r0, sp, #140	; 0x8c
 8082664:	f007 fd04 	bl	808a070 <_ZN6StringD1Ev>
    Wire.begin();   //this must be done for the LMP91000
    digitalWrite(lmp91000_2_en, LOW); //enable the chip
 8082668:	4d75      	ldr	r5, [pc, #468]	; (8082840 <setup+0x614>)
    //AFE 2 setup
    //#if AFE2_en
    Serial.println("Starting LMP91000 2 initialization");
    if(debugging_enabled)
        writeLogFile("Starting LMP91000 2 initialization");
    Wire.begin();   //this must be done for the LMP91000
 808266a:	f009 fbfb 	bl	808be64 <_Z19__fetch_global_Wirev>
 808266e:	f009 f9af 	bl	808b9d0 <_ZN7TwoWire5beginEv>
    digitalWrite(lmp91000_2_en, LOW); //enable the chip
 8082672:	2100      	movs	r1, #0
 8082674:	8828      	ldrh	r0, [r5, #0]
 8082676:	f009 fb58 	bl	808bd2a <digitalWrite>

    if(lmp91000.configure(LMP91000_TIA_GAIN_120K | LMP91000_RLOAD_10OHM, LMP91000_REF_SOURCE_EXT | LMP91000_INT_Z_50PCT | LMP91000_BIAS_SIGN_POS | LMP91000_BIAS_0PCT, LMP91000_FET_SHORT_DISABLED | LMP91000_OP_MODE_AMPEROMETRIC) == 0)
 808267a:	2303      	movs	r3, #3
 808267c:	22b0      	movs	r2, #176	; 0xb0
 808267e:	2118      	movs	r1, #24
 8082680:	4869      	ldr	r0, [pc, #420]	; (8082828 <setup+0x5fc>)
 8082682:	f004 f9f5 	bl	8086a70 <_ZN8LMP910009configureEhhh>
 8082686:	b978      	cbnz	r0, 80826a8 <setup+0x47c>
    {
          Serial.println("Couldn't communicate with LMP91000 for 2");
 8082688:	f008 ffdc 	bl	808b644 <_Z16_fetch_usbserialv>
 808268c:	496d      	ldr	r1, [pc, #436]	; (8082844 <setup+0x618>)
 808268e:	f007 ff40 	bl	808a512 <_ZN5Print7printlnEPKc>
          writeLogFile("Couldn't communicate with LMP91000 for 2");
 8082692:	496c      	ldr	r1, [pc, #432]	; (8082844 <setup+0x618>)
 8082694:	a823      	add	r0, sp, #140	; 0x8c
 8082696:	f007 fd32 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
 808269a:	a823      	add	r0, sp, #140	; 0x8c
 808269c:	f7ff f974 	bl	8081988 <_Z12writeLogFile6String>
 80826a0:	a823      	add	r0, sp, #140	; 0x8c
 80826a2:	f007 fce5 	bl	808a070 <_ZN6StringD1Ev>
 80826a6:	e014      	b.n	80826d2 <setup+0x4a6>
    }else{
          Serial.println("Initialized LMP91000 for 2");
 80826a8:	f008 ffcc 	bl	808b644 <_Z16_fetch_usbserialv>
 80826ac:	4966      	ldr	r1, [pc, #408]	; (8082848 <setup+0x61c>)
 80826ae:	f007 ff30 	bl	808a512 <_ZN5Print7printlnEPKc>
          if(debugging_enabled)
 80826b2:	6823      	ldr	r3, [r4, #0]
 80826b4:	b14b      	cbz	r3, 80826ca <setup+0x49e>
            writeLogFile("Initialized LMP91000 for 2");
 80826b6:	4964      	ldr	r1, [pc, #400]	; (8082848 <setup+0x61c>)
 80826b8:	a823      	add	r0, sp, #140	; 0x8c
 80826ba:	f007 fd20 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
 80826be:	a823      	add	r0, sp, #140	; 0x8c
 80826c0:	f7ff f962 	bl	8081988 <_Z12writeLogFile6String>
 80826c4:	a823      	add	r0, sp, #140	; 0x8c
 80826c6:	f007 fcd3 	bl	808a070 <_ZN6StringD1Ev>
          Serial.println(lmp91000.read(LMP91000_TIACN_REG),HEX);
          Serial.print("REFCN: ");
          Serial.println(lmp91000.read(LMP91000_REFCN_REG),HEX);
          Serial.print("MODECN: ");
          Serial.println(lmp91000.read(LMP91000_MODECN_REG),HEX);*/
          digitalWrite(lmp91000_2_en, HIGH);  //disable
 80826ca:	2101      	movs	r1, #1
 80826cc:	8828      	ldrh	r0, [r5, #0]
 80826ce:	f009 fb2c 	bl	808bd2a <digitalWrite>
    }
    ads2.begin();
 80826d2:	485e      	ldr	r0, [pc, #376]	; (808284c <setup+0x620>)
 80826d4:	f004 fac8 	bl	8086c68 <_ZN16Adafruit_ADS10155beginEv>
    if(Wire.requestFrom(0x4A,1) == 0) { //if can't get 1 byte from ADC1, add it to the init error log
 80826d8:	f009 fbc4 	bl	808be64 <_Z19__fetch_global_Wirev>
 80826dc:	2201      	movs	r2, #1
 80826de:	214a      	movs	r1, #74	; 0x4a
 80826e0:	f009 f988 	bl	808b9f4 <_ZN7TwoWire11requestFromEii>
 80826e4:	b988      	cbnz	r0, 808270a <setup+0x4de>
      //init_log += "AD1,";
      //digitalWrite(red_status_led, HIGH);
      //delay(200);
      //digitalWrite(red_status_led, LOW);
      //delay(200);
      Serial.println("Could not communicate with Adafruit_ADS1115 for CO");
 80826e6:	f008 ffad 	bl	808b644 <_Z16_fetch_usbserialv>
 80826ea:	4953      	ldr	r1, [pc, #332]	; (8082838 <setup+0x60c>)
 80826ec:	f007 ff11 	bl	808a512 <_ZN5Print7printlnEPKc>
      if(debugging_enabled)
 80826f0:	6823      	ldr	r3, [r4, #0]
 80826f2:	b173      	cbz	r3, 8082712 <setup+0x4e6>
        writeLogFile("Could not communicate with Adafruit_ADS1115 for CO");
 80826f4:	4950      	ldr	r1, [pc, #320]	; (8082838 <setup+0x60c>)
 80826f6:	a823      	add	r0, sp, #140	; 0x8c
 80826f8:	f007 fd01 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
 80826fc:	a823      	add	r0, sp, #140	; 0x8c
 80826fe:	f7ff f943 	bl	8081988 <_Z12writeLogFile6String>
 8082702:	a823      	add	r0, sp, #140	; 0x8c
 8082704:	f007 fcb4 	bl	808a070 <_ZN6StringD1Ev>
 8082708:	e003      	b.n	8082712 <setup+0x4e6>
    }
    else{
      ads2.setGain(GAIN_TWOTHIRDS);
 808270a:	2100      	movs	r1, #0
 808270c:	484f      	ldr	r0, [pc, #316]	; (808284c <setup+0x620>)
 808270e:	f004 fab2 	bl	8086c76 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
    }
    //#endif

    if (!bme.begin()) {
 8082712:	2177      	movs	r1, #119	; 0x77
 8082714:	484e      	ldr	r0, [pc, #312]	; (8082850 <setup+0x624>)
 8082716:	f006 f993 	bl	8088a40 <_ZN15Adafruit_BME6805beginEh>
 808271a:	b940      	cbnz	r0, 808272e <setup+0x502>
      Serial.println("Could not find a valid BME680 sensor, check wiring!");
 808271c:	f008 ff92 	bl	808b644 <_Z16_fetch_usbserialv>
 8082720:	494c      	ldr	r1, [pc, #304]	; (8082854 <setup+0x628>)
 8082722:	f007 fef6 	bl	808a512 <_ZN5Print7printlnEPKc>
      if(debugging_enabled)
 8082726:	6823      	ldr	r3, [r4, #0]
 8082728:	b193      	cbz	r3, 8082750 <setup+0x524>
          writeLogFile("Could not find a valid BME680 sensor, check wiring!");
 808272a:	494a      	ldr	r1, [pc, #296]	; (8082854 <setup+0x628>)
 808272c:	e007      	b.n	808273e <setup+0x512>
      //while (1);
    }else{
      Serial.println("Initialized BME Sensor");
 808272e:	f008 ff89 	bl	808b644 <_Z16_fetch_usbserialv>
 8082732:	4949      	ldr	r1, [pc, #292]	; (8082858 <setup+0x62c>)
 8082734:	f007 feed 	bl	808a512 <_ZN5Print7printlnEPKc>
      if(debugging_enabled)
 8082738:	6823      	ldr	r3, [r4, #0]
 808273a:	b14b      	cbz	r3, 8082750 <setup+0x524>
        writeLogFile("Initialized BME Sensor");
 808273c:	4946      	ldr	r1, [pc, #280]	; (8082858 <setup+0x62c>)
 808273e:	a823      	add	r0, sp, #140	; 0x8c
 8082740:	f007 fcdd 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
 8082744:	a823      	add	r0, sp, #140	; 0x8c
 8082746:	f7ff f91f 	bl	8081988 <_Z12writeLogFile6String>
 808274a:	a823      	add	r0, sp, #140	; 0x8c
 808274c:	f007 fc90 	bl	808a070 <_ZN6StringD1Ev>
    }

    if(!t6713.begin()){
 8082750:	4842      	ldr	r0, [pc, #264]	; (808285c <setup+0x630>)
 8082752:	f004 fb85 	bl	8086e60 <_ZN13Telaire_T67135beginEv>
 8082756:	b980      	cbnz	r0, 808277a <setup+0x54e>
      Serial.println("Could not find a valid T6713 sensor, check wiring!");
 8082758:	f008 ff74 	bl	808b644 <_Z16_fetch_usbserialv>
 808275c:	4940      	ldr	r1, [pc, #256]	; (8082860 <setup+0x634>)
 808275e:	f007 fed8 	bl	808a512 <_ZN5Print7printlnEPKc>
      if(debugging_enabled)
 8082762:	6823      	ldr	r3, [r4, #0]
 8082764:	b14b      	cbz	r3, 808277a <setup+0x54e>
          writeLogFile("Could not find a valid T6713");
 8082766:	493f      	ldr	r1, [pc, #252]	; (8082864 <setup+0x638>)
 8082768:	a823      	add	r0, sp, #140	; 0x8c
 808276a:	f007 fcc8 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
 808276e:	a823      	add	r0, sp, #140	; 0x8c
 8082770:	f7ff f90a 	bl	8081988 <_Z12writeLogFile6String>
 8082774:	a823      	add	r0, sp, #140	; 0x8c
 8082776:	f007 fc7b 	bl	808a070 <_ZN6StringD1Ev>
    }
  //Serial.println("before bme setup");
    // Set up oversampling and filter initialization
    bme.setTemperatureOversampling(BME680_OS_8X);
 808277a:	2104      	movs	r1, #4
 808277c:	4834      	ldr	r0, [pc, #208]	; (8082850 <setup+0x624>)
 808277e:	f006 fa5d 	bl	8088c3c <_ZN15Adafruit_BME68026setTemperatureOversamplingEh>
    bme.setHumidityOversampling(BME680_OS_2X);
 8082782:	2102      	movs	r1, #2
 8082784:	4832      	ldr	r0, [pc, #200]	; (8082850 <setup+0x624>)
 8082786:	f006 fa66 	bl	8088c56 <_ZN15Adafruit_BME68023setHumidityOversamplingEh>
    bme.setPressureOversampling(BME680_OS_4X);
 808278a:	2103      	movs	r1, #3
 808278c:	4830      	ldr	r0, [pc, #192]	; (8082850 <setup+0x624>)
 808278e:	f006 fa6f 	bl	8088c70 <_ZN15Adafruit_BME68023setPressureOversamplingEh>
    bme.setIIRFilterSize(BME680_FILTER_SIZE_3);
 8082792:	2102      	movs	r1, #2
 8082794:	482e      	ldr	r0, [pc, #184]	; (8082850 <setup+0x624>)
 8082796:	f006 fa78 	bl	8088c8a <_ZN15Adafruit_BME68016setIIRFilterSizeEh>
    bme.setGasHeater(320, 150); // 320*C for 150 ms
 808279a:	2296      	movs	r2, #150	; 0x96
 808279c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80827a0:	482b      	ldr	r0, [pc, #172]	; (8082850 <setup+0x624>)
 80827a2:	f006 fa3d 	bl	8088c20 <_ZN15Adafruit_BME68012setGasHeaterEtt>
        file.println(Time.timeStr());
        file.println(String(HEADER_STRING));
        file.close();
        file_started = 1;
    }*/
    resetESP();
 80827a6:	f7ff fd09 	bl	80821bc <_Z8resetESPv>

    Serial.println("ESP reset!");
 80827aa:	f008 ff4b 	bl	808b644 <_Z16_fetch_usbserialv>
 80827ae:	492e      	ldr	r1, [pc, #184]	; (8082868 <setup+0x63c>)
 80827b0:	f007 feaf 	bl	808a512 <_ZN5Print7printlnEPKc>

    Serial.print("FW Version: ");
 80827b4:	f008 ff46 	bl	808b644 <_Z16_fetch_usbserialv>
 80827b8:	492c      	ldr	r1, [pc, #176]	; (808286c <setup+0x640>)
 80827ba:	f007 fe97 	bl	808a4ec <_ZN5Print5printEPKc>
    Serial.println(APP_VERSION);
 80827be:	f008 ff41 	bl	808b644 <_Z16_fetch_usbserialv>
 80827c2:	220a      	movs	r2, #10
 80827c4:	2107      	movs	r1, #7
 80827c6:	f007 ff12 	bl	808a5ee <_ZN5Print7printlnEii>
    Serial.print("Build: ");
 80827ca:	f008 ff3b 	bl	808b644 <_Z16_fetch_usbserialv>
 80827ce:	4928      	ldr	r1, [pc, #160]	; (8082870 <setup+0x644>)
 80827d0:	f007 fe8c 	bl	808a4ec <_ZN5Print5printEPKc>
    Serial.println(BUILD_VERSION);
 80827d4:	f008 ff36 	bl	808b644 <_Z16_fetch_usbserialv>
 80827d8:	220a      	movs	r2, #10
 80827da:	210f      	movs	r1, #15
 80827dc:	f007 ff07 	bl	808a5ee <_ZN5Print7printlnEii>



    enableContinuousGPS();
 80827e0:	f7fe fe62 	bl	80814a8 <_Z19enableContinuousGPSv>
#define SYSTEM_VERSION_141
#define SYSTEM_VERSION_142
#define SYSTEM_VERSION_143
#define SYSTEM_VERSION_144

typedef struct __attribute__((packed)) SystemVersionInfo
 80827e4:	231c      	movs	r3, #28
    static bool enableFeature(const WiFiTesterFeature feature);

    String version()
    {
        SystemVersionInfo info;
        system_version_info(&info, nullptr);
 80827e6:	2100      	movs	r1, #0
 80827e8:	a823      	add	r0, sp, #140	; 0x8c
 80827ea:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
 80827ee:	f006 ffdd 	bl	80897ac <system_version_info>
        return String(info.versionString);
 80827f2:	a925      	add	r1, sp, #148	; 0x94
 80827f4:	a81f      	add	r0, sp, #124	; 0x7c
 80827f6:	f007 fc82 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
        Serial.println("Setting up google maps geolocation.");
        locator.withSubscribe(locationCallback).withLocatePeriodic(5); //setup google maps geolocation
    }*/

    
    Log.info("System version: %s", (const char*)System.version());
 80827fa:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80827fc:	491d      	ldr	r1, [pc, #116]	; (8082874 <setup+0x648>)
 80827fe:	481e      	ldr	r0, [pc, #120]	; (8082878 <setup+0x64c>)
 8082800:	f7fe fa55 	bl	8080cae <_ZNK5spark6Logger4infoEPKcz>
 8082804:	a81f      	add	r0, sp, #124	; 0x7c
 8082806:	f007 fc33 	bl	808a070 <_ZN6StringD1Ev>
    status_word.status_int  = 0;
    status_word.status_int |= (APP_VERSION << 12) & 0xFF00;
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
    //status_word.status_int |= 0x6500;

    String init_log; //intialization error log
 808280a:	a803      	add	r0, sp, #12
 808280c:	f007 fc30 	bl	808a070 <_ZN6StringD1Ev>

    
    Log.info("System version: %s", (const char*)System.version());
    

}
 8082810:	b02a      	add	sp, #168	; 0xa8
 8082812:	bd70      	pop	{r4, r5, r6, pc}
    //check power
    powerCheck.loop();

    
    if(car_topper_power_en && powerCheck.getHasPower() == 0){
        goToSleepBattery();
 8082814:	f7ff fc76 	bl	8082104 <_Z16goToSleepBatteryv>
 8082818:	e572      	b.n	8082300 <setup+0xd4>
 808281a:	bf00      	nop
 808281c:	08090bad 	.word	0x08090bad
 8082820:	20000af8 	.word	0x20000af8
 8082824:	08090bc3 	.word	0x08090bc3
 8082828:	2000022c 	.word	0x2000022c
 808282c:	08090be7 	.word	0x08090be7
 8082830:	08090c11 	.word	0x08090c11
 8082834:	20000ac0 	.word	0x20000ac0
 8082838:	08090c2d 	.word	0x08090c2d
 808283c:	08090c60 	.word	0x08090c60
 8082840:	200000d0 	.word	0x200000d0
 8082844:	08090c83 	.word	0x08090c83
 8082848:	08090cac 	.word	0x08090cac
 808284c:	20000ac6 	.word	0x20000ac6
 8082850:	200006f8 	.word	0x200006f8
 8082854:	08090cc7 	.word	0x08090cc7
 8082858:	08090cfb 	.word	0x08090cfb
 808285c:	20000b7c 	.word	0x20000b7c
 8082860:	08090d12 	.word	0x08090d12
 8082864:	08090d45 	.word	0x08090d45
 8082868:	08090d62 	.word	0x08090d62
 808286c:	08090d6d 	.word	0x08090d6d
 8082870:	08090d7a 	.word	0x08090d7a
 8082874:	08090d82 	.word	0x08090d82
 8082878:	20000bd4 	.word	0x20000bd4

0808287c <_Z24serialGetWifiCredentialsv>:
    pmic.setChargeCurrent(bit7, bit6, bit5, bit4, bit3, bit2);
    chargeCurrent = pmic.getChargeCurrent();
    Serial.printf("new charge current of %d mA\n\r", total_current);
}

void serialGetWifiCredentials(void){
 808287c:	b530      	push	{r4, r5, lr}
 808287e:	4d5b      	ldr	r5, [pc, #364]	; (80829ec <_Z24serialGetWifiCredentialsv+0x170>)
 8082880:	b095      	sub	sp, #84	; 0x54
    Serial.print("Current stored ssid: ");
 8082882:	f008 fedf 	bl	808b644 <_Z16_fetch_usbserialv>
 8082886:	495a      	ldr	r1, [pc, #360]	; (80829f0 <_Z24serialGetWifiCredentialsv+0x174>)
 8082888:	f007 fe30 	bl	808a4ec <_ZN5Print5printEPKc>
 808288c:	4c59      	ldr	r4, [pc, #356]	; (80829f4 <_Z24serialGetWifiCredentialsv+0x178>)
    Serial.println(ssid);
 808288e:	f008 fed9 	bl	808b644 <_Z16_fetch_usbserialv>
 8082892:	6829      	ldr	r1, [r5, #0]
 8082894:	f007 fe3d 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.print("Current stored password: ");
 8082898:	f008 fed4 	bl	808b644 <_Z16_fetch_usbserialv>
 808289c:	4956      	ldr	r1, [pc, #344]	; (80829f8 <_Z24serialGetWifiCredentialsv+0x17c>)
 808289e:	f007 fe25 	bl	808a4ec <_ZN5Print5printEPKc>
    Serial.println(password);
 80828a2:	f008 fecf 	bl	808b644 <_Z16_fetch_usbserialv>
 80828a6:	6821      	ldr	r1, [r4, #0]
 80828a8:	f007 fe33 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("Please enter password in order to make changes.\n\r");
 80828ac:	f008 feca 	bl	808b644 <_Z16_fetch_usbserialv>
 80828b0:	4952      	ldr	r1, [pc, #328]	; (80829fc <_Z24serialGetWifiCredentialsv+0x180>)
 80828b2:	f007 fe2e 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 80828b6:	f008 fec5 	bl	808b644 <_Z16_fetch_usbserialv>
 80828ba:	f24c 3150 	movw	r1, #50000	; 0xc350
 80828be:	f007 ffac 	bl	808a81a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80828c2:	f008 febf 	bl	808b644 <_Z16_fetch_usbserialv>
 80828c6:	220d      	movs	r2, #13
 80828c8:	4601      	mov	r1, r0
 80828ca:	4668      	mov	r0, sp
 80828cc:	f008 f812 	bl	808a8f4 <_ZN6Stream15readStringUntilEc>
    if(tempString.equals("bould")){
 80828d0:	494b      	ldr	r1, [pc, #300]	; (8082a00 <_Z24serialGetWifiCredentialsv+0x184>)
 80828d2:	4668      	mov	r0, sp
 80828d4:	f007 fd68 	bl	808a3a8 <_ZNK6String6equalsEPKc>
 80828d8:	2800      	cmp	r0, #0
 80828da:	f000 8081 	beq.w	80829e0 <_Z24serialGetWifiCredentialsv+0x164>
        Serial.println("Password correct!");
 80828de:	f008 feb1 	bl	808b644 <_Z16_fetch_usbserialv>
 80828e2:	4948      	ldr	r1, [pc, #288]	; (8082a04 <_Z24serialGetWifiCredentialsv+0x188>)
 80828e4:	f007 fe15 	bl	808a512 <_ZN5Print7printlnEPKc>
        Serial.println("Enter new ssid:");
 80828e8:	f008 feac 	bl	808b644 <_Z16_fetch_usbserialv>
 80828ec:	4946      	ldr	r1, [pc, #280]	; (8082a08 <_Z24serialGetWifiCredentialsv+0x18c>)
 80828ee:	f007 fe10 	bl	808a512 <_ZN5Print7printlnEPKc>
        Serial.setTimeout(50000);
 80828f2:	f008 fea7 	bl	808b644 <_Z16_fetch_usbserialv>
 80828f6:	f24c 3150 	movw	r1, #50000	; 0xc350
 80828fa:	f007 ff8e 	bl	808a81a <_ZN6Stream10setTimeoutEm>
        String tempSsid = Serial.readStringUntil('\r');
 80828fe:	f008 fea1 	bl	808b644 <_Z16_fetch_usbserialv>
 8082902:	220d      	movs	r2, #13
 8082904:	4601      	mov	r1, r0
 8082906:	a804      	add	r0, sp, #16
 8082908:	f007 fff4 	bl	808a8f4 <_ZN6Stream15readStringUntilEc>
        Serial.print("Your new ssid will be: ");
 808290c:	f008 fe9a 	bl	808b644 <_Z16_fetch_usbserialv>
 8082910:	493e      	ldr	r1, [pc, #248]	; (8082a0c <_Z24serialGetWifiCredentialsv+0x190>)
 8082912:	f007 fdeb 	bl	808a4ec <_ZN5Print5printEPKc>
        Serial.println(tempSsid);
 8082916:	f008 fe95 	bl	808b644 <_Z16_fetch_usbserialv>
 808291a:	9904      	ldr	r1, [sp, #16]
 808291c:	f007 fdf9 	bl	808a512 <_ZN5Print7printlnEPKc>
        Serial.println("Is this okay?(y or n)");
 8082920:	f008 fe90 	bl	808b644 <_Z16_fetch_usbserialv>
 8082924:	493a      	ldr	r1, [pc, #232]	; (8082a10 <_Z24serialGetWifiCredentialsv+0x194>)
 8082926:	f007 fdf4 	bl	808a512 <_ZN5Print7printlnEPKc>
        String ok = Serial.readStringUntil('\r');
 808292a:	f008 fe8b 	bl	808b644 <_Z16_fetch_usbserialv>
 808292e:	220d      	movs	r2, #13
 8082930:	4601      	mov	r1, r0
 8082932:	a808      	add	r0, sp, #32
 8082934:	f007 ffde 	bl	808a8f4 <_ZN6Stream15readStringUntilEc>
        if(ok.equals("y")){
 8082938:	4936      	ldr	r1, [pc, #216]	; (8082a14 <_Z24serialGetWifiCredentialsv+0x198>)
 808293a:	a808      	add	r0, sp, #32
 808293c:	f007 fd34 	bl	808a3a8 <_ZNK6String6equalsEPKc>
 8082940:	2800      	cmp	r0, #0
 8082942:	d042      	beq.n	80829ca <_Z24serialGetWifiCredentialsv+0x14e>
            Serial.println("Saving new ssid");
 8082944:	f008 fe7e 	bl	808b644 <_Z16_fetch_usbserialv>
 8082948:	4933      	ldr	r1, [pc, #204]	; (8082a18 <_Z24serialGetWifiCredentialsv+0x19c>)
 808294a:	f007 fde2 	bl	808a512 <_ZN5Print7printlnEPKc>
            ssid = tempSsid;
 808294e:	a904      	add	r1, sp, #16
 8082950:	4628      	mov	r0, r5
 8082952:	f007 fc04 	bl	808a15e <_ZN6StringaSERKS_>
            Serial.println("Enter new password");
 8082956:	f008 fe75 	bl	808b644 <_Z16_fetch_usbserialv>
 808295a:	4930      	ldr	r1, [pc, #192]	; (8082a1c <_Z24serialGetWifiCredentialsv+0x1a0>)
 808295c:	f007 fdd9 	bl	808a512 <_ZN5Print7printlnEPKc>
            String tempPassword = Serial.readStringUntil('\r');
 8082960:	f008 fe70 	bl	808b644 <_Z16_fetch_usbserialv>
 8082964:	220d      	movs	r2, #13
 8082966:	4601      	mov	r1, r0
 8082968:	a80c      	add	r0, sp, #48	; 0x30
 808296a:	f007 ffc3 	bl	808a8f4 <_ZN6Stream15readStringUntilEc>
            Serial.print("Your new password will be: ");
 808296e:	f008 fe69 	bl	808b644 <_Z16_fetch_usbserialv>
 8082972:	492b      	ldr	r1, [pc, #172]	; (8082a20 <_Z24serialGetWifiCredentialsv+0x1a4>)
 8082974:	f007 fdba 	bl	808a4ec <_ZN5Print5printEPKc>
            Serial.println(tempPassword);
 8082978:	f008 fe64 	bl	808b644 <_Z16_fetch_usbserialv>
 808297c:	990c      	ldr	r1, [sp, #48]	; 0x30
 808297e:	f007 fdc8 	bl	808a512 <_ZN5Print7printlnEPKc>
            String ok = Serial.readStringUntil('\r');
 8082982:	f008 fe5f 	bl	808b644 <_Z16_fetch_usbserialv>
 8082986:	220d      	movs	r2, #13
 8082988:	4601      	mov	r1, r0
 808298a:	a810      	add	r0, sp, #64	; 0x40
 808298c:	f007 ffb2 	bl	808a8f4 <_ZN6Stream15readStringUntilEc>
            if(ok.equals("y")){
 8082990:	4920      	ldr	r1, [pc, #128]	; (8082a14 <_Z24serialGetWifiCredentialsv+0x198>)
 8082992:	a810      	add	r0, sp, #64	; 0x40
 8082994:	f007 fd08 	bl	808a3a8 <_ZNK6String6equalsEPKc>
 8082998:	b158      	cbz	r0, 80829b2 <_Z24serialGetWifiCredentialsv+0x136>
                Serial.println("Saving new password");
 808299a:	f008 fe53 	bl	808b644 <_Z16_fetch_usbserialv>
 808299e:	4921      	ldr	r1, [pc, #132]	; (8082a24 <_Z24serialGetWifiCredentialsv+0x1a8>)
 80829a0:	f007 fdb7 	bl	808a512 <_ZN5Print7printlnEPKc>
                password = tempPassword;
 80829a4:	a90c      	add	r1, sp, #48	; 0x30
 80829a6:	4620      	mov	r0, r4
 80829a8:	f007 fbd9 	bl	808a15e <_ZN6StringaSERKS_>
                sendWifiInfo();
 80829ac:	f7ff f978 	bl	8081ca0 <_Z12sendWifiInfov>
 80829b0:	e004      	b.n	80829bc <_Z24serialGetWifiCredentialsv+0x140>
            }else{
                Serial.println("okay, no problem\n\r");
 80829b2:	f008 fe47 	bl	808b644 <_Z16_fetch_usbserialv>
 80829b6:	491c      	ldr	r1, [pc, #112]	; (8082a28 <_Z24serialGetWifiCredentialsv+0x1ac>)
 80829b8:	f007 fdab 	bl	808a512 <_ZN5Print7printlnEPKc>
            ssid = tempSsid;
            Serial.println("Enter new password");
            String tempPassword = Serial.readStringUntil('\r');
            Serial.print("Your new password will be: ");
            Serial.println(tempPassword);
            String ok = Serial.readStringUntil('\r');
 80829bc:	a810      	add	r0, sp, #64	; 0x40
 80829be:	f007 fb57 	bl	808a070 <_ZN6StringD1Ev>
        String ok = Serial.readStringUntil('\r');
        if(ok.equals("y")){
            Serial.println("Saving new ssid");
            ssid = tempSsid;
            Serial.println("Enter new password");
            String tempPassword = Serial.readStringUntil('\r');
 80829c2:	a80c      	add	r0, sp, #48	; 0x30
 80829c4:	f007 fb54 	bl	808a070 <_ZN6StringD1Ev>
 80829c8:	e004      	b.n	80829d4 <_Z24serialGetWifiCredentialsv+0x158>
                sendWifiInfo();
            }else{
                Serial.println("okay, no problem\n\r");
            }
        }else{
            Serial.println("okay, no problem\n\r");
 80829ca:	f008 fe3b 	bl	808b644 <_Z16_fetch_usbserialv>
 80829ce:	4916      	ldr	r1, [pc, #88]	; (8082a28 <_Z24serialGetWifiCredentialsv+0x1ac>)
 80829d0:	f007 fd9f 	bl	808a512 <_ZN5Print7printlnEPKc>
            return;
 80829d4:	a808      	add	r0, sp, #32
 80829d6:	f007 fb4b 	bl	808a070 <_ZN6StringD1Ev>
 80829da:	a804      	add	r0, sp, #16
 80829dc:	f007 fb48 	bl	808a070 <_ZN6StringD1Ev>
    Serial.println(ssid);
    Serial.print("Current stored password: ");
    Serial.println(password);
    Serial.println("Please enter password in order to make changes.\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 80829e0:	4668      	mov	r0, sp
 80829e2:	f007 fb45 	bl	808a070 <_ZN6StringD1Ev>
        }else{
            Serial.println("okay, no problem\n\r");
            return;
        }
    }
}
 80829e6:	b015      	add	sp, #84	; 0x54
 80829e8:	bd30      	pop	{r4, r5, pc}
 80829ea:	bf00      	nop
 80829ec:	2000020c 	.word	0x2000020c
 80829f0:	08090dda 	.word	0x08090dda
 80829f4:	200001d8 	.word	0x200001d8
 80829f8:	08090df0 	.word	0x08090df0
 80829fc:	08090e0a 	.word	0x08090e0a
 8082a00:	08090e3c 	.word	0x08090e3c
 8082a04:	08090e42 	.word	0x08090e42
 8082a08:	08090e54 	.word	0x08090e54
 8082a0c:	08090e64 	.word	0x08090e64
 8082a10:	08090e7c 	.word	0x08090e7c
 8082a14:	0809363e 	.word	0x0809363e
 8082a18:	08090e92 	.word	0x08090e92
 8082a1c:	08090ea2 	.word	0x08090ea2
 8082a20:	08090eb5 	.word	0x08090eb5
 8082a24:	08090ed1 	.word	0x08090ed1
 8082a28:	08090ee5 	.word	0x08090ee5

08082a2c <_Z26serialSetSensibleIotEnablev>:
void serialSetSensibleIotEnable(void){
 8082a2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    Serial.println("Please enter password in order to enable data push to Sensible Iot");
 8082a2e:	f008 fe09 	bl	808b644 <_Z16_fetch_usbserialv>
 8082a32:	4919      	ldr	r1, [pc, #100]	; (8082a98 <_Z26serialSetSensibleIotEnablev+0x6c>)
 8082a34:	f007 fd6d 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082a38:	f008 fe04 	bl	808b644 <_Z16_fetch_usbserialv>
 8082a3c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082a40:	f007 feeb 	bl	808a81a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082a44:	f008 fdfe 	bl	808b644 <_Z16_fetch_usbserialv>
 8082a48:	220d      	movs	r2, #13
 8082a4a:	4601      	mov	r1, r0
 8082a4c:	4668      	mov	r0, sp
 8082a4e:	f007 ff51 	bl	808a8f4 <_ZN6Stream15readStringUntilEc>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8082a52:	4912      	ldr	r1, [pc, #72]	; (8082a9c <_Z26serialSetSensibleIotEnablev+0x70>)
 8082a54:	4668      	mov	r0, sp
 8082a56:	f007 fca7 	bl	808a3a8 <_ZNK6String6equalsEPKc>
    if(tempString == "imsensible"){
 8082a5a:	b198      	cbz	r0, 8082a84 <_Z26serialSetSensibleIotEnablev+0x58>
        Serial.println("Password correct!");
 8082a5c:	f008 fdf2 	bl	808b644 <_Z16_fetch_usbserialv>
 8082a60:	490f      	ldr	r1, [pc, #60]	; (8082aa0 <_Z26serialSetSensibleIotEnablev+0x74>)
 8082a62:	f007 fd56 	bl	808a512 <_ZN5Print7printlnEPKc>
        Serial.println("Enabling sensible iot data push.");
        sensible_iot_en = 1;
 8082a66:	4c0f      	ldr	r4, [pc, #60]	; (8082aa4 <_Z26serialSetSensibleIotEnablev+0x78>)
    Serial.println("Please enter password in order to enable data push to Sensible Iot");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    if(tempString == "imsensible"){
        Serial.println("Password correct!");
        Serial.println("Enabling sensible iot data push.");
 8082a68:	f008 fdec 	bl	808b644 <_Z16_fetch_usbserialv>
 8082a6c:	490e      	ldr	r1, [pc, #56]	; (8082aa8 <_Z26serialSetSensibleIotEnablev+0x7c>)
 8082a6e:	f007 fd50 	bl	808a512 <_ZN5Print7printlnEPKc>
        sensible_iot_en = 1;
 8082a72:	2301      	movs	r3, #1
 8082a74:	6023      	str	r3, [r4, #0]
        EEPROM.put(SENSIBLEIOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 8082a76:	f009 f9c9 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8082a7a:	4621      	mov	r1, r4
 8082a7c:	208c      	movs	r0, #140	; 0x8c
 8082a7e:	f7fe f8c6 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 8082a82:	e004      	b.n	8082a8e <_Z26serialSetSensibleIotEnablev+0x62>
    }else{
        Serial.println("\n\rIncorrect password!");
 8082a84:	f008 fdde 	bl	808b644 <_Z16_fetch_usbserialv>
 8082a88:	4908      	ldr	r1, [pc, #32]	; (8082aac <_Z26serialSetSensibleIotEnablev+0x80>)
 8082a8a:	f007 fd42 	bl	808a512 <_ZN5Print7printlnEPKc>
    }
}
void serialSetSensibleIotEnable(void){
    Serial.println("Please enter password in order to enable data push to Sensible Iot");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082a8e:	4668      	mov	r0, sp
 8082a90:	f007 faee 	bl	808a070 <_ZN6StringD1Ev>
        sensible_iot_en = 1;
        EEPROM.put(SENSIBLEIOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
 8082a94:	b004      	add	sp, #16
 8082a96:	bd10      	pop	{r4, pc}
 8082a98:	08090ef8 	.word	0x08090ef8
 8082a9c:	08090f3b 	.word	0x08090f3b
 8082aa0:	08090e42 	.word	0x08090e42
 8082aa4:	200008d0 	.word	0x200008d0
 8082aa8:	08090f46 	.word	0x08090f46
 8082aac:	08090f67 	.word	0x08090f67

08082ab0 <_Z17serialGetDeviceIdv>:

void serialGetDeviceId(void){
 8082ab0:	b530      	push	{r4, r5, lr}
 8082ab2:	b089      	sub	sp, #36	; 0x24

    Serial.println();
 8082ab4:	f008 fdc6 	bl	808b644 <_Z16_fetch_usbserialv>
    Serial.print("Current Device ID:");
    Serial.println(DEVICE_id);
 8082ab8:	4c35      	ldr	r4, [pc, #212]	; (8082b90 <_Z17serialGetDeviceIdv+0xe0>)
    }
}

void serialGetDeviceId(void){

    Serial.println();
 8082aba:	f007 fd1e 	bl	808a4fa <_ZN5Print7printlnEv>
    Serial.print("Current Device ID:");
 8082abe:	f008 fdc1 	bl	808b644 <_Z16_fetch_usbserialv>
 8082ac2:	4934      	ldr	r1, [pc, #208]	; (8082b94 <_Z17serialGetDeviceIdv+0xe4>)
 8082ac4:	f007 fd12 	bl	808a4ec <_ZN5Print5printEPKc>
    Serial.println(DEVICE_id);
 8082ac8:	f008 fdbc 	bl	808b644 <_Z16_fetch_usbserialv>
 8082acc:	220a      	movs	r2, #10
 8082ace:	6821      	ldr	r1, [r4, #0]
 8082ad0:	f007 fd8d 	bl	808a5ee <_ZN5Print7printlnEii>
    Serial.println("Please enter password in order to change the ID");
 8082ad4:	f008 fdb6 	bl	808b644 <_Z16_fetch_usbserialv>
 8082ad8:	492f      	ldr	r1, [pc, #188]	; (8082b98 <_Z17serialGetDeviceIdv+0xe8>)
 8082ada:	f007 fd1a 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082ade:	f008 fdb1 	bl	808b644 <_Z16_fetch_usbserialv>
 8082ae2:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082ae6:	f007 fe98 	bl	808a81a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082aea:	f008 fdab 	bl	808b644 <_Z16_fetch_usbserialv>
 8082aee:	220d      	movs	r2, #13
 8082af0:	4601      	mov	r1, r0
 8082af2:	4668      	mov	r0, sp
 8082af4:	f007 fefe 	bl	808a8f4 <_ZN6Stream15readStringUntilEc>
 8082af8:	4928      	ldr	r1, [pc, #160]	; (8082b9c <_Z17serialGetDeviceIdv+0xec>)
 8082afa:	4668      	mov	r0, sp
 8082afc:	f007 fc54 	bl	808a3a8 <_ZNK6String6equalsEPKc>


    if(tempString == "bould"){
 8082b00:	2800      	cmp	r0, #0
 8082b02:	d03a      	beq.n	8082b7a <_Z17serialGetDeviceIdv+0xca>
        Serial.println("Password correct!");
 8082b04:	f008 fd9e 	bl	808b644 <_Z16_fetch_usbserialv>
 8082b08:	4925      	ldr	r1, [pc, #148]	; (8082ba0 <_Z17serialGetDeviceIdv+0xf0>)
 8082b0a:	f007 fd02 	bl	808a512 <_ZN5Print7printlnEPKc>
        Serial.println("Enter new Device ID:");
 8082b0e:	f008 fd99 	bl	808b644 <_Z16_fetch_usbserialv>
 8082b12:	4924      	ldr	r1, [pc, #144]	; (8082ba4 <_Z17serialGetDeviceIdv+0xf4>)
 8082b14:	f007 fcfd 	bl	808a512 <_ZN5Print7printlnEPKc>
        String tempString = Serial.readStringUntil('\r');
 8082b18:	f008 fd94 	bl	808b644 <_Z16_fetch_usbserialv>
 8082b1c:	220d      	movs	r2, #13
 8082b1e:	4601      	mov	r1, r0
 8082b20:	a804      	add	r0, sp, #16
 8082b22:	f007 fee7 	bl	808a8f4 <_ZN6Stream15readStringUntilEc>
        int tempValue = tempString.toInt();
 8082b26:	a804      	add	r0, sp, #16
 8082b28:	f007 fc92 	bl	808a450 <_ZNK6String5toIntEv>
 8082b2c:	4605      	mov	r5, r0
        Serial.println("");
 8082b2e:	f008 fd89 	bl	808b644 <_Z16_fetch_usbserialv>
 8082b32:	491d      	ldr	r1, [pc, #116]	; (8082ba8 <_Z17serialGetDeviceIdv+0xf8>)
 8082b34:	f007 fced 	bl	808a512 <_ZN5Print7printlnEPKc>
        if(tempValue > MIN_DEVICE_ID_NUMBER && tempValue < MAX_DEVICE_ID_NUMBER){
 8082b38:	f242 730c 	movw	r3, #9996	; 0x270c
 8082b3c:	1eaa      	subs	r2, r5, #2
 8082b3e:	429a      	cmp	r2, r3
 8082b40:	d812      	bhi.n	8082b68 <_Z17serialGetDeviceIdv+0xb8>
            Serial.print("\n\rNew Device ID:");
 8082b42:	f008 fd7f 	bl	808b644 <_Z16_fetch_usbserialv>
 8082b46:	4919      	ldr	r1, [pc, #100]	; (8082bac <_Z17serialGetDeviceIdv+0xfc>)
 8082b48:	f007 fcd0 	bl	808a4ec <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 8082b4c:	f008 fd7a 	bl	808b644 <_Z16_fetch_usbserialv>
 8082b50:	4629      	mov	r1, r5
 8082b52:	220a      	movs	r2, #10
 8082b54:	f007 fd4b 	bl	808a5ee <_ZN5Print7printlnEii>
            DEVICE_id = tempValue;
 8082b58:	6025      	str	r5, [r4, #0]
            EEPROM.put(DEVICE_ID_MEM_ADDRESS, DEVICE_id);
 8082b5a:	f009 f957 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8082b5e:	4621      	mov	r1, r4
 8082b60:	2000      	movs	r0, #0
 8082b62:	f7fe f854 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 8082b66:	e004      	b.n	8082b72 <_Z17serialGetDeviceIdv+0xc2>
        }else{
            Serial.println("\n\rInvalid value!");
 8082b68:	f008 fd6c 	bl	808b644 <_Z16_fetch_usbserialv>
 8082b6c:	4910      	ldr	r1, [pc, #64]	; (8082bb0 <_Z17serialGetDeviceIdv+0x100>)
 8082b6e:	f007 fcd0 	bl	808a512 <_ZN5Print7printlnEPKc>


    if(tempString == "bould"){
        Serial.println("Password correct!");
        Serial.println("Enter new Device ID:");
        String tempString = Serial.readStringUntil('\r');
 8082b72:	a804      	add	r0, sp, #16
 8082b74:	f007 fa7c 	bl	808a070 <_ZN6StringD1Ev>
 8082b78:	e004      	b.n	8082b84 <_Z17serialGetDeviceIdv+0xd4>
            EEPROM.put(DEVICE_ID_MEM_ADDRESS, DEVICE_id);
        }else{
            Serial.println("\n\rInvalid value!");
        }
    }else{
        Serial.println("\n\rIncorrect password!");
 8082b7a:	f008 fd63 	bl	808b644 <_Z16_fetch_usbserialv>
 8082b7e:	490d      	ldr	r1, [pc, #52]	; (8082bb4 <_Z17serialGetDeviceIdv+0x104>)
 8082b80:	f007 fcc7 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println();
    Serial.print("Current Device ID:");
    Serial.println(DEVICE_id);
    Serial.println("Please enter password in order to change the ID");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082b84:	4668      	mov	r0, sp
 8082b86:	f007 fa73 	bl	808a070 <_ZN6StringD1Ev>
            Serial.println("\n\rInvalid value!");
        }
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
 8082b8a:	b009      	add	sp, #36	; 0x24
 8082b8c:	bd30      	pop	{r4, r5, pc}
 8082b8e:	bf00      	nop
 8082b90:	20000088 	.word	0x20000088
 8082b94:	08090f7d 	.word	0x08090f7d
 8082b98:	08090f90 	.word	0x08090f90
 8082b9c:	08090e3c 	.word	0x08090e3c
 8082ba0:	08090e42 	.word	0x08090e42
 8082ba4:	08090fc0 	.word	0x08090fc0
 8082ba8:	08092fdc 	.word	0x08092fdc
 8082bac:	08090fd5 	.word	0x08090fd5
 8082bb0:	08090fe6 	.word	0x08090fe6
 8082bb4:	08090f67 	.word	0x08090f67

08082bb8 <_Z19serialResetSettingsv>:

void serialResetSettings(void){
 8082bb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    Serial.println();
 8082bba:	f008 fd43 	bl	808b644 <_Z16_fetch_usbserialv>
 8082bbe:	f007 fc9c 	bl	808a4fa <_ZN5Print7printlnEv>
    Serial.println("Please enter password in order to apply default settings");
 8082bc2:	f008 fd3f 	bl	808b644 <_Z16_fetch_usbserialv>
 8082bc6:	4914      	ldr	r1, [pc, #80]	; (8082c18 <_Z19serialResetSettingsv+0x60>)
 8082bc8:	f007 fca3 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082bcc:	f008 fd3a 	bl	808b644 <_Z16_fetch_usbserialv>
 8082bd0:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082bd4:	f007 fe21 	bl	808a81a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082bd8:	f008 fd34 	bl	808b644 <_Z16_fetch_usbserialv>
 8082bdc:	220d      	movs	r2, #13
 8082bde:	4601      	mov	r1, r0
 8082be0:	4668      	mov	r0, sp
 8082be2:	f007 fe87 	bl	808a8f4 <_ZN6Stream15readStringUntilEc>
 8082be6:	490d      	ldr	r1, [pc, #52]	; (8082c1c <_Z19serialResetSettingsv+0x64>)
 8082be8:	4668      	mov	r0, sp
 8082bea:	f007 fbdd 	bl	808a3a8 <_ZNK6String6equalsEPKc>


    if(tempString == "bould"){
 8082bee:	b138      	cbz	r0, 8082c00 <_Z19serialResetSettingsv+0x48>
        Serial.println("Password correct, resetting all settings to default!  Please reset your ID to the one shown on your enclosure.");
 8082bf0:	f008 fd28 	bl	808b644 <_Z16_fetch_usbserialv>
 8082bf4:	490a      	ldr	r1, [pc, #40]	; (8082c20 <_Z19serialResetSettingsv+0x68>)
 8082bf6:	f007 fc8c 	bl	808a512 <_ZN5Print7printlnEPKc>
        writeDefaultSettings();
 8082bfa:	f7fe f929 	bl	8080e50 <_Z20writeDefaultSettingsv>
 8082bfe:	e004      	b.n	8082c0a <_Z19serialResetSettingsv+0x52>
    }else{
        Serial.println("\n\rIncorrect password!");
 8082c00:	f008 fd20 	bl	808b644 <_Z16_fetch_usbserialv>
 8082c04:	4907      	ldr	r1, [pc, #28]	; (8082c24 <_Z19serialResetSettingsv+0x6c>)
 8082c06:	f007 fc84 	bl	808a512 <_ZN5Print7printlnEPKc>
void serialResetSettings(void){

    Serial.println();
    Serial.println("Please enter password in order to apply default settings");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082c0a:	4668      	mov	r0, sp
 8082c0c:	f007 fa30 	bl	808a070 <_ZN6StringD1Ev>
        Serial.println("Password correct, resetting all settings to default!  Please reset your ID to the one shown on your enclosure.");
        writeDefaultSettings();
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
 8082c10:	b005      	add	sp, #20
 8082c12:	f85d fb04 	ldr.w	pc, [sp], #4
 8082c16:	bf00      	nop
 8082c18:	08090ff7 	.word	0x08090ff7
 8082c1c:	08090e3c 	.word	0x08090e3c
 8082c20:	08091030 	.word	0x08091030
 8082c24:	08090f67 	.word	0x08090f67

08082c28 <_Z17serialGetTimeDatev>:

void serialGetTimeDate(void){
 8082c28:	b510      	push	{r4, lr}
 8082c2a:	b088      	sub	sp, #32
    Serial.println("Enter new Device time and date (10 digit epoch timestamp):");
 8082c2c:	f008 fd0a 	bl	808b644 <_Z16_fetch_usbserialv>
 8082c30:	491f      	ldr	r1, [pc, #124]	; (8082cb0 <_Z17serialGetTimeDatev+0x88>)
 8082c32:	f007 fc6e 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082c36:	f008 fd05 	bl	808b644 <_Z16_fetch_usbserialv>
 8082c3a:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082c3e:	f007 fdec 	bl	808a81a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082c42:	f008 fcff 	bl	808b644 <_Z16_fetch_usbserialv>
 8082c46:	220d      	movs	r2, #13
 8082c48:	4601      	mov	r1, r0
 8082c4a:	4668      	mov	r0, sp
 8082c4c:	f007 fe52 	bl	808a8f4 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8082c50:	4668      	mov	r0, sp
 8082c52:	f007 fbfd 	bl	808a450 <_ZNK6String5toIntEv>
 8082c56:	4604      	mov	r4, r0
    Serial.println("");
 8082c58:	f008 fcf4 	bl	808b644 <_Z16_fetch_usbserialv>
 8082c5c:	4915      	ldr	r1, [pc, #84]	; (8082cb4 <_Z17serialGetTimeDatev+0x8c>)
 8082c5e:	f007 fc58 	bl	808a512 <_ZN5Print7printlnEPKc>
    if(tempValue > 966012661 && tempValue < 4121686261){       //min is the year 2000, max is the year 2100
 8082c62:	4b15      	ldr	r3, [pc, #84]	; (8082cb8 <_Z17serialGetTimeDatev+0x90>)
 8082c64:	429c      	cmp	r4, r3
 8082c66:	dd18      	ble.n	8082c9a <_Z17serialGetTimeDatev+0x72>
        Time.setTime(tempValue);
 8082c68:	4620      	mov	r0, r4
 8082c6a:	f007 fed1 	bl	808aa10 <_ZN9TimeClass7setTimeEl>
        Serial.print("\n\rNew Device Time:");
 8082c6e:	f008 fce9 	bl	808b644 <_Z16_fetch_usbserialv>
 8082c72:	4912      	ldr	r1, [pc, #72]	; (8082cbc <_Z17serialGetTimeDatev+0x94>)
 8082c74:	f007 fc3a 	bl	808a4ec <_ZN5Print5printEPKc>
        Serial.println(Time.timeStr());
 8082c78:	f008 fce4 	bl	808b644 <_Z16_fetch_usbserialv>
 8082c7c:	4604      	mov	r4, r0
 8082c7e:	f007 ffa4 	bl	808abca <_ZN9TimeClass3nowEv>
 8082c82:	4601      	mov	r1, r0
 8082c84:	a804      	add	r0, sp, #16
 8082c86:	f007 fecd 	bl	808aa24 <_ZN9TimeClass7timeStrEl>
 8082c8a:	9904      	ldr	r1, [sp, #16]
 8082c8c:	4620      	mov	r0, r4
 8082c8e:	f007 fc40 	bl	808a512 <_ZN5Print7printlnEPKc>
 8082c92:	a804      	add	r0, sp, #16
 8082c94:	f007 f9ec 	bl	808a070 <_ZN6StringD1Ev>
 8082c98:	e004      	b.n	8082ca4 <_Z17serialGetTimeDatev+0x7c>
    }else{
        Serial.println("\n\rInvalid value!");
 8082c9a:	f008 fcd3 	bl	808b644 <_Z16_fetch_usbserialv>
 8082c9e:	4908      	ldr	r1, [pc, #32]	; (8082cc0 <_Z17serialGetTimeDatev+0x98>)
 8082ca0:	f007 fc37 	bl	808a512 <_ZN5Print7printlnEPKc>
}

void serialGetTimeDate(void){
    Serial.println("Enter new Device time and date (10 digit epoch timestamp):");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082ca4:	4668      	mov	r0, sp
 8082ca6:	f007 f9e3 	bl	808a070 <_ZN6StringD1Ev>
        Serial.print("\n\rNew Device Time:");
        Serial.println(Time.timeStr());
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8082caa:	b008      	add	sp, #32
 8082cac:	bd10      	pop	{r4, pc}
 8082cae:	bf00      	nop
 8082cb0:	0809109f 	.word	0x0809109f
 8082cb4:	08092fdc 	.word	0x08092fdc
 8082cb8:	39942ef5 	.word	0x39942ef5
 8082cbc:	080910da 	.word	0x080910da
 8082cc0:	08090fe6 	.word	0x08090fe6

08082cc4 <_Z13serialGetZonev>:

void serialGetZone(void){
 8082cc4:	b510      	push	{r4, lr}
 8082cc6:	b086      	sub	sp, #24
    Serial.println("Enter new Device time zone (-12.0 to 14.0)");
 8082cc8:	f008 fcbc 	bl	808b644 <_Z16_fetch_usbserialv>
 8082ccc:	491f      	ldr	r1, [pc, #124]	; (8082d4c <_Z13serialGetZonev+0x88>)
 8082cce:	f007 fc20 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082cd2:	f008 fcb7 	bl	808b644 <_Z16_fetch_usbserialv>
 8082cd6:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082cda:	f007 fd9e 	bl	808a81a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082cde:	f008 fcb1 	bl	808b644 <_Z16_fetch_usbserialv>
 8082ce2:	220d      	movs	r2, #13
 8082ce4:	4601      	mov	r1, r0
 8082ce6:	a802      	add	r0, sp, #8
 8082ce8:	f007 fe04 	bl	808a8f4 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8082cec:	a802      	add	r0, sp, #8
 8082cee:	f007 fbaf 	bl	808a450 <_ZNK6String5toIntEv>
 8082cf2:	9001      	str	r0, [sp, #4]
    Serial.println("");
 8082cf4:	f008 fca6 	bl	808b644 <_Z16_fetch_usbserialv>
 8082cf8:	4915      	ldr	r1, [pc, #84]	; (8082d50 <_Z13serialGetZonev+0x8c>)
 8082cfa:	f007 fc0a 	bl	808a512 <_ZN5Print7printlnEPKc>
    if(tempValue >= -12 && tempValue <= 14){       //min is the year 2000, max is the year 2100
 8082cfe:	9801      	ldr	r0, [sp, #4]
 8082d00:	f100 030c 	add.w	r3, r0, #12
 8082d04:	2b1a      	cmp	r3, #26
 8082d06:	d817      	bhi.n	8082d38 <_Z13serialGetZonev+0x74>
        Time.zone(tempValue);
 8082d08:	f009 fff8 	bl	808ccfc <__aeabi_i2f>
 8082d0c:	f007 fe64 	bl	808a9d8 <_ZN9TimeClass4zoneEf>
        Serial.print("\n\rNew Device time zone:");
        Serial.println(tempValue);
 8082d10:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();
    Serial.println("");
    if(tempValue >= -12 && tempValue <= 14){       //min is the year 2000, max is the year 2100
        Time.zone(tempValue);
        Serial.print("\n\rNew Device time zone:");
 8082d12:	f008 fc97 	bl	808b644 <_Z16_fetch_usbserialv>
 8082d16:	490f      	ldr	r1, [pc, #60]	; (8082d54 <_Z13serialGetZonev+0x90>)
 8082d18:	f007 fbe8 	bl	808a4ec <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8082d1c:	f008 fc92 	bl	808b644 <_Z16_fetch_usbserialv>
 8082d20:	f854 1d14 	ldr.w	r1, [r4, #-20]!
 8082d24:	220a      	movs	r2, #10
 8082d26:	f007 fc62 	bl	808a5ee <_ZN5Print7printlnEii>
        EEPROM.put(TIME_ZONE_MEM_ADDRESS, tempValue);
 8082d2a:	f009 f86f 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8082d2e:	4621      	mov	r1, r4
 8082d30:	2054      	movs	r0, #84	; 0x54
 8082d32:	f7fd ff6c 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 8082d36:	e004      	b.n	8082d42 <_Z13serialGetZonev+0x7e>
    }else{
        Serial.println("\n\rInvalid value!");
 8082d38:	f008 fc84 	bl	808b644 <_Z16_fetch_usbserialv>
 8082d3c:	4906      	ldr	r1, [pc, #24]	; (8082d58 <_Z13serialGetZonev+0x94>)
 8082d3e:	f007 fbe8 	bl	808a512 <_ZN5Print7printlnEPKc>
}

void serialGetZone(void){
    Serial.println("Enter new Device time zone (-12.0 to 14.0)");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082d42:	a802      	add	r0, sp, #8
 8082d44:	f007 f994 	bl	808a070 <_ZN6StringD1Ev>
        Serial.println(tempValue);
        EEPROM.put(TIME_ZONE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8082d48:	b006      	add	sp, #24
 8082d4a:	bd10      	pop	{r4, pc}
 8082d4c:	080910ed 	.word	0x080910ed
 8082d50:	08092fdc 	.word	0x08092fdc
 8082d54:	08091118 	.word	0x08091118
 8082d58:	08090fe6 	.word	0x08090fe6

08082d5c <_Z20serialGetAverageTimev>:

void serialGetAverageTime(void){
 8082d5c:	b530      	push	{r4, r5, lr}
 8082d5e:	b087      	sub	sp, #28
    Serial.println();
 8082d60:	f008 fc70 	bl	808b644 <_Z16_fetch_usbserialv>
    Serial.print("Current Frequency: ");
    Serial.print(measurements_to_average);
 8082d64:	4d29      	ldr	r5, [pc, #164]	; (8082e0c <_Z20serialGetAverageTimev+0xb0>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetAverageTime(void){
    Serial.println();
 8082d66:	f007 fbc8 	bl	808a4fa <_ZN5Print7printlnEv>
    Serial.print("Current Frequency: ");
 8082d6a:	f008 fc6b 	bl	808b644 <_Z16_fetch_usbserialv>
 8082d6e:	4928      	ldr	r1, [pc, #160]	; (8082e10 <_Z20serialGetAverageTimev+0xb4>)
 8082d70:	f007 fbbc 	bl	808a4ec <_ZN5Print5printEPKc>
    Serial.print(measurements_to_average);
 8082d74:	f008 fc66 	bl	808b644 <_Z16_fetch_usbserialv>
 8082d78:	220a      	movs	r2, #10
 8082d7a:	6829      	ldr	r1, [r5, #0]
 8082d7c:	f007 fc35 	bl	808a5ea <_ZN5Print5printEii>
    Serial.println("(~2 second) measurements");
 8082d80:	f008 fc60 	bl	808b644 <_Z16_fetch_usbserialv>
 8082d84:	4923      	ldr	r1, [pc, #140]	; (8082e14 <_Z20serialGetAverageTimev+0xb8>)
 8082d86:	f007 fbc4 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new amount\n\r");
 8082d8a:	f008 fc5b 	bl	808b644 <_Z16_fetch_usbserialv>
 8082d8e:	4922      	ldr	r1, [pc, #136]	; (8082e18 <_Z20serialGetAverageTimev+0xbc>)
 8082d90:	f007 fbac 	bl	808a4ec <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082d94:	f008 fc56 	bl	808b644 <_Z16_fetch_usbserialv>
 8082d98:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082d9c:	f007 fd3d 	bl	808a81a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082da0:	f008 fc50 	bl	808b644 <_Z16_fetch_usbserialv>
 8082da4:	220d      	movs	r2, #13
 8082da6:	4601      	mov	r1, r0
 8082da8:	a802      	add	r0, sp, #8
 8082daa:	f007 fda3 	bl	808a8f4 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8082dae:	a802      	add	r0, sp, #8
 8082db0:	f007 fb4e 	bl	808a450 <_ZNK6String5toIntEv>

    if(tempValue >= 1 && tempValue < 10000){
 8082db4:	f242 730e 	movw	r3, #9998	; 0x270e
    Serial.print(measurements_to_average);
    Serial.println("(~2 second) measurements");
    Serial.print("Enter new amount\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();
 8082db8:	9001      	str	r0, [sp, #4]

    if(tempValue >= 1 && tempValue < 10000){
 8082dba:	3801      	subs	r0, #1
 8082dbc:	4298      	cmp	r0, r3
 8082dbe:	d81a      	bhi.n	8082df6 <_Z20serialGetAverageTimev+0x9a>
        Serial.print("\n\rNew Frequency: ");
 8082dc0:	f008 fc40 	bl	808b644 <_Z16_fetch_usbserialv>
 8082dc4:	4915      	ldr	r1, [pc, #84]	; (8082e1c <_Z20serialGetAverageTimev+0xc0>)
 8082dc6:	f007 fb91 	bl	808a4ec <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8082dca:	f008 fc3b 	bl	808b644 <_Z16_fetch_usbserialv>
 8082dce:	220a      	movs	r2, #10
 8082dd0:	9901      	ldr	r1, [sp, #4]
 8082dd2:	f007 fc0c 	bl	808a5ee <_ZN5Print7printlnEii>
        Serial.println("(~2 second) measurements");
        measurements_to_average = tempValue;
 8082dd6:	ac06      	add	r4, sp, #24
    int tempValue = tempString.toInt();

    if(tempValue >= 1 && tempValue < 10000){
        Serial.print("\n\rNew Frequency: ");
        Serial.println(tempValue);
        Serial.println("(~2 second) measurements");
 8082dd8:	f008 fc34 	bl	808b644 <_Z16_fetch_usbserialv>
 8082ddc:	490d      	ldr	r1, [pc, #52]	; (8082e14 <_Z20serialGetAverageTimev+0xb8>)
 8082dde:	f007 fb98 	bl	808a512 <_ZN5Print7printlnEPKc>
        measurements_to_average = tempValue;
 8082de2:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8082de6:	602b      	str	r3, [r5, #0]
        EEPROM.put(MEASUREMENTS_TO_AVG_MEM_ADDRESS, tempValue);
 8082de8:	f009 f810 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8082dec:	4621      	mov	r1, r4
 8082dee:	2074      	movs	r0, #116	; 0x74
 8082df0:	f7fd ff0d 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 8082df4:	e004      	b.n	8082e00 <_Z20serialGetAverageTimev+0xa4>
    }else{
        Serial.println("\n\rInvalid value!");
 8082df6:	f008 fc25 	bl	808b644 <_Z16_fetch_usbserialv>
 8082dfa:	4909      	ldr	r1, [pc, #36]	; (8082e20 <_Z20serialGetAverageTimev+0xc4>)
 8082dfc:	f007 fb89 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.print("Current Frequency: ");
    Serial.print(measurements_to_average);
    Serial.println("(~2 second) measurements");
    Serial.print("Enter new amount\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082e00:	a802      	add	r0, sp, #8
 8082e02:	f007 f935 	bl	808a070 <_ZN6StringD1Ev>
        measurements_to_average = tempValue;
        EEPROM.put(MEASUREMENTS_TO_AVG_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8082e06:	b007      	add	sp, #28
 8082e08:	bd30      	pop	{r4, r5, pc}
 8082e0a:	bf00      	nop
 8082e0c:	20000aec 	.word	0x20000aec
 8082e10:	08091130 	.word	0x08091130
 8082e14:	08091144 	.word	0x08091144
 8082e18:	0809115d 	.word	0x0809115d
 8082e1c:	08091170 	.word	0x08091170
 8082e20:	08090fe6 	.word	0x08090fe6

08082e24 <_Z17serialGetCo2Slopev>:

void serialGetCo2Slope(void){
 8082e24:	b530      	push	{r4, r5, lr}
 8082e26:	b08b      	sub	sp, #44	; 0x2c

    Serial.println();
 8082e28:	f008 fc0c 	bl	808b644 <_Z16_fetch_usbserialv>
 8082e2c:	f007 fb65 	bl	808a4fa <_ZN5Print7printlnEv>
    Serial.print("Current CO2 slope:");
 8082e30:	f008 fc08 	bl	808b644 <_Z16_fetch_usbserialv>
 8082e34:	4932      	ldr	r1, [pc, #200]	; (8082f00 <_Z17serialGetCo2Slopev+0xdc>)
 8082e36:	f007 fb59 	bl	808a4ec <_ZN5Print5printEPKc>
    Serial.print(String(CO2_slope, 2));
 8082e3a:	f008 fc03 	bl	808b644 <_Z16_fetch_usbserialv>
 8082e3e:	4605      	mov	r5, r0
 8082e40:	4c30      	ldr	r4, [pc, #192]	; (8082f04 <_Z17serialGetCo2Slopev+0xe0>)
 8082e42:	2202      	movs	r2, #2
 8082e44:	6821      	ldr	r1, [r4, #0]
 8082e46:	a806      	add	r0, sp, #24
 8082e48:	f007 f9f3 	bl	808a232 <_ZN6StringC1Efi>
 8082e4c:	9906      	ldr	r1, [sp, #24]
 8082e4e:	4628      	mov	r0, r5
 8082e50:	f007 fb4c 	bl	808a4ec <_ZN5Print5printEPKc>
 8082e54:	a806      	add	r0, sp, #24
 8082e56:	f007 f90b 	bl	808a070 <_ZN6StringD1Ev>
    Serial.println(" ppm");
 8082e5a:	f008 fbf3 	bl	808b644 <_Z16_fetch_usbserialv>
 8082e5e:	492a      	ldr	r1, [pc, #168]	; (8082f08 <_Z17serialGetCo2Slopev+0xe4>)
 8082e60:	f007 fb57 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO2 slope\n\r");
 8082e64:	f008 fbee 	bl	808b644 <_Z16_fetch_usbserialv>
 8082e68:	4928      	ldr	r1, [pc, #160]	; (8082f0c <_Z17serialGetCo2Slopev+0xe8>)
 8082e6a:	f007 fb3f 	bl	808a4ec <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082e6e:	f008 fbe9 	bl	808b644 <_Z16_fetch_usbserialv>
 8082e72:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082e76:	f007 fcd0 	bl	808a81a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082e7a:	f008 fbe3 	bl	808b644 <_Z16_fetch_usbserialv>
 8082e7e:	220d      	movs	r2, #13
 8082e80:	4601      	mov	r1, r0
 8082e82:	a802      	add	r0, sp, #8
 8082e84:	f007 fd36 	bl	808a8f4 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8082e88:	a802      	add	r0, sp, #8
 8082e8a:	f007 fae6 	bl	808a45a <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 10.0){
 8082e8e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(CO2_slope, 2));
    Serial.println(" ppm");
    Serial.print("Enter new CO2 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 8082e92:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 10.0){
 8082e94:	f00a f938 	bl	808d108 <__aeabi_fcmpge>
 8082e98:	b338      	cbz	r0, 8082eea <_Z17serialGetCo2Slopev+0xc6>
 8082e9a:	491d      	ldr	r1, [pc, #116]	; (8082f10 <_Z17serialGetCo2Slopev+0xec>)
 8082e9c:	4628      	mov	r0, r5
 8082e9e:	f00a f91f 	bl	808d0e0 <__aeabi_fcmplt>
 8082ea2:	b310      	cbz	r0, 8082eea <_Z17serialGetCo2Slopev+0xc6>
        CO2_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 8082ea4:	491b      	ldr	r1, [pc, #108]	; (8082f14 <_Z17serialGetCo2Slopev+0xf0>)
 8082ea6:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 10.0){
        CO2_slope = tempfloat;
 8082ea8:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 8082eaa:	f009 ff7b 	bl	808cda4 <__aeabi_fmul>
 8082eae:	f00a f93f 	bl	808d130 <__aeabi_f2iz>
 8082eb2:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew CO2 slope: ");
 8082eb4:	f008 fbc6 	bl	808b644 <_Z16_fetch_usbserialv>
 8082eb8:	4917      	ldr	r1, [pc, #92]	; (8082f18 <_Z17serialGetCo2Slopev+0xf4>)
 8082eba:	f007 fb17 	bl	808a4ec <_ZN5Print5printEPKc>
        Serial.println(String(CO2_slope,2));
 8082ebe:	f008 fbc1 	bl	808b644 <_Z16_fetch_usbserialv>
 8082ec2:	4605      	mov	r5, r0
 8082ec4:	2202      	movs	r2, #2
 8082ec6:	6821      	ldr	r1, [r4, #0]
 8082ec8:	a806      	add	r0, sp, #24
 8082eca:	f007 f9b2 	bl	808a232 <_ZN6StringC1Efi>
 8082ece:	9906      	ldr	r1, [sp, #24]
 8082ed0:	4628      	mov	r0, r5
 8082ed2:	f007 fb1e 	bl	808a512 <_ZN5Print7printlnEPKc>
 8082ed6:	a806      	add	r0, sp, #24
 8082ed8:	f007 f8ca 	bl	808a070 <_ZN6StringD1Ev>

        EEPROM.put(CO2_SLOPE_MEM_ADDRESS, tempValue);
 8082edc:	f008 ff96 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8082ee0:	a901      	add	r1, sp, #4
 8082ee2:	2008      	movs	r0, #8
 8082ee4:	f7fd fe93 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 8082ee8:	e004      	b.n	8082ef4 <_Z17serialGetCo2Slopev+0xd0>
    }else{
        Serial.println("\n\rInvalid value!");
 8082eea:	f008 fbab 	bl	808b644 <_Z16_fetch_usbserialv>
 8082eee:	490b      	ldr	r1, [pc, #44]	; (8082f1c <_Z17serialGetCo2Slopev+0xf8>)
 8082ef0:	f007 fb0f 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.print("Current CO2 slope:");
    Serial.print(String(CO2_slope, 2));
    Serial.println(" ppm");
    Serial.print("Enter new CO2 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082ef4:	a802      	add	r0, sp, #8
 8082ef6:	f007 f8bb 	bl	808a070 <_ZN6StringD1Ev>

        EEPROM.put(CO2_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8082efa:	b00b      	add	sp, #44	; 0x2c
 8082efc:	bd30      	pop	{r4, r5, pc}
 8082efe:	bf00      	nop
 8082f00:	08091182 	.word	0x08091182
 8082f04:	20000abc 	.word	0x20000abc
 8082f08:	08091195 	.word	0x08091195
 8082f0c:	0809119a 	.word	0x0809119a
 8082f10:	41200000 	.word	0x41200000
 8082f14:	42c80000 	.word	0x42c80000
 8082f18:	080911b0 	.word	0x080911b0
 8082f1c:	08090fe6 	.word	0x08090fe6

08082f20 <_Z16serialGetCo2Zerov>:

void serialGetCo2Zero(void){
 8082f20:	b530      	push	{r4, r5, lr}
 8082f22:	b087      	sub	sp, #28
    Serial.println();
 8082f24:	f008 fb8e 	bl	808b644 <_Z16_fetch_usbserialv>
    Serial.print("Current CO2 zero:");
    Serial.print(CO2_zero);
 8082f28:	4d26      	ldr	r5, [pc, #152]	; (8082fc4 <_Z16serialGetCo2Zerov+0xa4>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetCo2Zero(void){
    Serial.println();
 8082f2a:	f007 fae6 	bl	808a4fa <_ZN5Print7printlnEv>
    Serial.print("Current CO2 zero:");
 8082f2e:	f008 fb89 	bl	808b644 <_Z16_fetch_usbserialv>
 8082f32:	4925      	ldr	r1, [pc, #148]	; (8082fc8 <_Z16serialGetCo2Zerov+0xa8>)
 8082f34:	f007 fada 	bl	808a4ec <_ZN5Print5printEPKc>
    Serial.print(CO2_zero);
 8082f38:	f008 fb84 	bl	808b644 <_Z16_fetch_usbserialv>
 8082f3c:	220a      	movs	r2, #10
 8082f3e:	6829      	ldr	r1, [r5, #0]
 8082f40:	f007 fb53 	bl	808a5ea <_ZN5Print5printEii>
    Serial.println(" ppm");
 8082f44:	f008 fb7e 	bl	808b644 <_Z16_fetch_usbserialv>
 8082f48:	4920      	ldr	r1, [pc, #128]	; (8082fcc <_Z16serialGetCo2Zerov+0xac>)
 8082f4a:	f007 fae2 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO2 Zero\n\r");
 8082f4e:	f008 fb79 	bl	808b644 <_Z16_fetch_usbserialv>
 8082f52:	491f      	ldr	r1, [pc, #124]	; (8082fd0 <_Z16serialGetCo2Zerov+0xb0>)
 8082f54:	f007 faca 	bl	808a4ec <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082f58:	f008 fb74 	bl	808b644 <_Z16_fetch_usbserialv>
 8082f5c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082f60:	f007 fc5b 	bl	808a81a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082f64:	f008 fb6e 	bl	808b644 <_Z16_fetch_usbserialv>
 8082f68:	220d      	movs	r2, #13
 8082f6a:	4601      	mov	r1, r0
 8082f6c:	a802      	add	r0, sp, #8
 8082f6e:	f007 fcc1 	bl	808a8f4 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8082f72:	a802      	add	r0, sp, #8
 8082f74:	f007 fa6c 	bl	808a450 <_ZNK6String5toIntEv>
 8082f78:	9001      	str	r0, [sp, #4]

    if(tempValue >= -1000 && tempValue < 1000){
 8082f7a:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8082f7e:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8082f82:	d215      	bcs.n	8082fb0 <_Z16serialGetCo2Zerov+0x90>
        Serial.print("\n\rNew CO2 zero: ");
 8082f84:	f008 fb5e 	bl	808b644 <_Z16_fetch_usbserialv>
 8082f88:	4912      	ldr	r1, [pc, #72]	; (8082fd4 <_Z16serialGetCo2Zerov+0xb4>)
 8082f8a:	f007 faaf 	bl	808a4ec <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        CO2_zero = tempValue;
 8082f8e:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -1000 && tempValue < 1000){
        Serial.print("\n\rNew CO2 zero: ");
        Serial.println(tempValue);
 8082f90:	f008 fb58 	bl	808b644 <_Z16_fetch_usbserialv>
 8082f94:	9901      	ldr	r1, [sp, #4]
 8082f96:	220a      	movs	r2, #10
 8082f98:	f007 fb29 	bl	808a5ee <_ZN5Print7printlnEii>
        CO2_zero = tempValue;
 8082f9c:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8082fa0:	602b      	str	r3, [r5, #0]
        EEPROM.put(CO2_ZERO_MEM_ADDRESS, tempValue);
 8082fa2:	f008 ff33 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8082fa6:	4621      	mov	r1, r4
 8082fa8:	2004      	movs	r0, #4
 8082faa:	f7fd fe30 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 8082fae:	e004      	b.n	8082fba <_Z16serialGetCo2Zerov+0x9a>
    }else{
        Serial.println("\n\rInvalid value!");
 8082fb0:	f008 fb48 	bl	808b644 <_Z16_fetch_usbserialv>
 8082fb4:	4908      	ldr	r1, [pc, #32]	; (8082fd8 <_Z16serialGetCo2Zerov+0xb8>)
 8082fb6:	f007 faac 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.print("Current CO2 zero:");
    Serial.print(CO2_zero);
    Serial.println(" ppm");
    Serial.print("Enter new CO2 Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082fba:	a802      	add	r0, sp, #8
 8082fbc:	f007 f858 	bl	808a070 <_ZN6StringD1Ev>
        CO2_zero = tempValue;
        EEPROM.put(CO2_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8082fc0:	b007      	add	sp, #28
 8082fc2:	bd30      	pop	{r4, r5, pc}
 8082fc4:	20000234 	.word	0x20000234
 8082fc8:	080911c2 	.word	0x080911c2
 8082fcc:	08091195 	.word	0x08091195
 8082fd0:	080911d4 	.word	0x080911d4
 8082fd4:	080911e9 	.word	0x080911e9
 8082fd8:	08090fe6 	.word	0x08090fe6
 8082fdc:	00000000 	.word	0x00000000

08082fe0 <_Z16serialGetCoSlopev>:

void serialGetCoSlope(void){
 8082fe0:	b530      	push	{r4, r5, lr}
 8082fe2:	b08b      	sub	sp, #44	; 0x2c

    Serial.println();
 8082fe4:	f008 fb2e 	bl	808b644 <_Z16_fetch_usbserialv>
 8082fe8:	f007 fa87 	bl	808a4fa <_ZN5Print7printlnEv>
    Serial.print("Current CO slope:");
 8082fec:	f008 fb2a 	bl	808b644 <_Z16_fetch_usbserialv>
 8082ff0:	4937      	ldr	r1, [pc, #220]	; (80830d0 <_Z16serialGetCoSlopev+0xf0>)
 8082ff2:	f007 fa7b 	bl	808a4ec <_ZN5Print5printEPKc>
    Serial.print(String(CO_slope, 2));
 8082ff6:	f008 fb25 	bl	808b644 <_Z16_fetch_usbserialv>
 8082ffa:	4605      	mov	r5, r0
 8082ffc:	4c35      	ldr	r4, [pc, #212]	; (80830d4 <_Z16serialGetCoSlopev+0xf4>)
 8082ffe:	2202      	movs	r2, #2
 8083000:	6821      	ldr	r1, [r4, #0]
 8083002:	a806      	add	r0, sp, #24
 8083004:	f007 f915 	bl	808a232 <_ZN6StringC1Efi>
 8083008:	9906      	ldr	r1, [sp, #24]
 808300a:	4628      	mov	r0, r5
 808300c:	f007 fa6e 	bl	808a4ec <_ZN5Print5printEPKc>
 8083010:	a806      	add	r0, sp, #24
 8083012:	f007 f82d 	bl	808a070 <_ZN6StringD1Ev>
    Serial.println(" ppm");
 8083016:	f008 fb15 	bl	808b644 <_Z16_fetch_usbserialv>
 808301a:	492f      	ldr	r1, [pc, #188]	; (80830d8 <_Z16serialGetCoSlopev+0xf8>)
 808301c:	f007 fa79 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO slope\n\r");
 8083020:	f008 fb10 	bl	808b644 <_Z16_fetch_usbserialv>
 8083024:	492d      	ldr	r1, [pc, #180]	; (80830dc <_Z16serialGetCoSlopev+0xfc>)
 8083026:	f007 fa61 	bl	808a4ec <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 808302a:	f008 fb0b 	bl	808b644 <_Z16_fetch_usbserialv>
 808302e:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083032:	f007 fbf2 	bl	808a81a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083036:	f008 fb05 	bl	808b644 <_Z16_fetch_usbserialv>
 808303a:	220d      	movs	r2, #13
 808303c:	4601      	mov	r1, r0
 808303e:	a802      	add	r0, sp, #8
 8083040:	f007 fc58 	bl	808a8f4 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083044:	a802      	add	r0, sp, #8
 8083046:	f007 fa08 	bl	808a45a <_ZNK6String7toFloatEv>
 808304a:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.1 && tempfloat < 2.0){
 808304c:	f009 fa00 	bl	808c450 <__aeabi_f2d>
 8083050:	a31d      	add	r3, pc, #116	; (adr r3, 80830c8 <_Z16serialGetCoSlopev+0xe8>)
 8083052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8083056:	f009 fcd5 	bl	808ca04 <__aeabi_dcmpge>
 808305a:	b340      	cbz	r0, 80830ae <_Z16serialGetCoSlopev+0xce>
 808305c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8083060:	4628      	mov	r0, r5
 8083062:	f00a f83d 	bl	808d0e0 <__aeabi_fcmplt>
 8083066:	b310      	cbz	r0, 80830ae <_Z16serialGetCoSlopev+0xce>
        CO_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 8083068:	491d      	ldr	r1, [pc, #116]	; (80830e0 <_Z16serialGetCoSlopev+0x100>)
 808306a:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.1 && tempfloat < 2.0){
        CO_slope = tempfloat;
 808306c:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 808306e:	f009 fe99 	bl	808cda4 <__aeabi_fmul>
 8083072:	f00a f85d 	bl	808d130 <__aeabi_f2iz>
 8083076:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew CO slope: ");
 8083078:	f008 fae4 	bl	808b644 <_Z16_fetch_usbserialv>
 808307c:	4919      	ldr	r1, [pc, #100]	; (80830e4 <_Z16serialGetCoSlopev+0x104>)
 808307e:	f007 fa35 	bl	808a4ec <_ZN5Print5printEPKc>
        Serial.println(String(CO_slope,2));
 8083082:	f008 fadf 	bl	808b644 <_Z16_fetch_usbserialv>
 8083086:	4605      	mov	r5, r0
 8083088:	2202      	movs	r2, #2
 808308a:	6821      	ldr	r1, [r4, #0]
 808308c:	a806      	add	r0, sp, #24
 808308e:	f007 f8d0 	bl	808a232 <_ZN6StringC1Efi>
 8083092:	9906      	ldr	r1, [sp, #24]
 8083094:	4628      	mov	r0, r5
 8083096:	f007 fa3c 	bl	808a512 <_ZN5Print7printlnEPKc>
 808309a:	a806      	add	r0, sp, #24
 808309c:	f006 ffe8 	bl	808a070 <_ZN6StringD1Ev>

        EEPROM.put(CO_SLOPE_MEM_ADDRESS, tempValue);
 80830a0:	f008 feb4 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 80830a4:	a901      	add	r1, sp, #4
 80830a6:	2010      	movs	r0, #16
 80830a8:	f7fd fdb1 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 80830ac:	e004      	b.n	80830b8 <_Z16serialGetCoSlopev+0xd8>
    }else{
        Serial.println("\n\rInvalid value!");
 80830ae:	f008 fac9 	bl	808b644 <_Z16_fetch_usbserialv>
 80830b2:	490d      	ldr	r1, [pc, #52]	; (80830e8 <_Z16serialGetCoSlopev+0x108>)
 80830b4:	f007 fa2d 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.print("Current CO slope:");
    Serial.print(String(CO_slope, 2));
    Serial.println(" ppm");
    Serial.print("Enter new CO slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 80830b8:	a802      	add	r0, sp, #8
 80830ba:	f006 ffd9 	bl	808a070 <_ZN6StringD1Ev>

        EEPROM.put(CO_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 80830be:	b00b      	add	sp, #44	; 0x2c
 80830c0:	bd30      	pop	{r4, r5, pc}
 80830c2:	bf00      	nop
 80830c4:	f3af 8000 	nop.w
 80830c8:	9999999a 	.word	0x9999999a
 80830cc:	3fb99999 	.word	0x3fb99999
 80830d0:	080911fa 	.word	0x080911fa
 80830d4:	200001e8 	.word	0x200001e8
 80830d8:	08091195 	.word	0x08091195
 80830dc:	0809120c 	.word	0x0809120c
 80830e0:	42c80000 	.word	0x42c80000
 80830e4:	08091221 	.word	0x08091221
 80830e8:	08090fe6 	.word	0x08090fe6

080830ec <_Z15serialGetCoZerov>:

void serialGetCoZero(void){
 80830ec:	b530      	push	{r4, r5, lr}
 80830ee:	b087      	sub	sp, #28
    Serial.println();
 80830f0:	f008 faa8 	bl	808b644 <_Z16_fetch_usbserialv>
    Serial.print("Current CO zero:");
    Serial.print(CO_zero);
 80830f4:	4d27      	ldr	r5, [pc, #156]	; (8083194 <_Z15serialGetCoZerov+0xa8>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetCoZero(void){
    Serial.println();
 80830f6:	f007 fa00 	bl	808a4fa <_ZN5Print7printlnEv>
    Serial.print("Current CO zero:");
 80830fa:	f008 faa3 	bl	808b644 <_Z16_fetch_usbserialv>
 80830fe:	4926      	ldr	r1, [pc, #152]	; (8083198 <_Z15serialGetCoZerov+0xac>)
 8083100:	f007 f9f4 	bl	808a4ec <_ZN5Print5printEPKc>
    Serial.print(CO_zero);
 8083104:	f008 fa9e 	bl	808b644 <_Z16_fetch_usbserialv>
 8083108:	220a      	movs	r2, #10
 808310a:	6829      	ldr	r1, [r5, #0]
 808310c:	f007 fa6d 	bl	808a5ea <_ZN5Print5printEii>
    Serial.println(" ppb");
 8083110:	f008 fa98 	bl	808b644 <_Z16_fetch_usbserialv>
 8083114:	4921      	ldr	r1, [pc, #132]	; (808319c <_Z15serialGetCoZerov+0xb0>)
 8083116:	f007 f9fc 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO Zero\n\r");
 808311a:	f008 fa93 	bl	808b644 <_Z16_fetch_usbserialv>
 808311e:	4920      	ldr	r1, [pc, #128]	; (80831a0 <_Z15serialGetCoZerov+0xb4>)
 8083120:	f007 f9e4 	bl	808a4ec <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083124:	f008 fa8e 	bl	808b644 <_Z16_fetch_usbserialv>
 8083128:	f24c 3150 	movw	r1, #50000	; 0xc350
 808312c:	f007 fb75 	bl	808a81a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083130:	f008 fa88 	bl	808b644 <_Z16_fetch_usbserialv>
 8083134:	220d      	movs	r2, #13
 8083136:	4601      	mov	r1, r0
 8083138:	a802      	add	r0, sp, #8
 808313a:	f007 fbdb 	bl	808a8f4 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 808313e:	a802      	add	r0, sp, #8
 8083140:	f007 f986 	bl	808a450 <_ZNK6String5toIntEv>

    if(tempValue >= -5000 && tempValue < 5000){
 8083144:	f242 730f 	movw	r3, #9999	; 0x270f
    Serial.print(CO_zero);
    Serial.println(" ppb");
    Serial.print("Enter new CO Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();
 8083148:	9001      	str	r0, [sp, #4]

    if(tempValue >= -5000 && tempValue < 5000){
 808314a:	f500 509c 	add.w	r0, r0, #4992	; 0x1380
 808314e:	3008      	adds	r0, #8
 8083150:	4298      	cmp	r0, r3
 8083152:	d815      	bhi.n	8083180 <_Z15serialGetCoZerov+0x94>
        Serial.print("\n\rNew CO zero: ");
 8083154:	f008 fa76 	bl	808b644 <_Z16_fetch_usbserialv>
 8083158:	4912      	ldr	r1, [pc, #72]	; (80831a4 <_Z15serialGetCoZerov+0xb8>)
 808315a:	f007 f9c7 	bl	808a4ec <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        CO_zero = tempValue;
 808315e:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -5000 && tempValue < 5000){
        Serial.print("\n\rNew CO zero: ");
        Serial.println(tempValue);
 8083160:	f008 fa70 	bl	808b644 <_Z16_fetch_usbserialv>
 8083164:	9901      	ldr	r1, [sp, #4]
 8083166:	220a      	movs	r2, #10
 8083168:	f007 fa41 	bl	808a5ee <_ZN5Print7printlnEii>
        CO_zero = tempValue;
 808316c:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8083170:	602b      	str	r3, [r5, #0]
        EEPROM.put(CO_ZERO_MEM_ADDRESS, tempValue);
 8083172:	f008 fe4b 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8083176:	4621      	mov	r1, r4
 8083178:	200c      	movs	r0, #12
 808317a:	f7fd fd48 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 808317e:	e004      	b.n	808318a <_Z15serialGetCoZerov+0x9e>
    }else{
        Serial.println("\n\rInvalid value!");
 8083180:	f008 fa60 	bl	808b644 <_Z16_fetch_usbserialv>
 8083184:	4908      	ldr	r1, [pc, #32]	; (80831a8 <_Z15serialGetCoZerov+0xbc>)
 8083186:	f007 f9c4 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.print("Current CO zero:");
    Serial.print(CO_zero);
    Serial.println(" ppb");
    Serial.print("Enter new CO Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 808318a:	a802      	add	r0, sp, #8
 808318c:	f006 ff70 	bl	808a070 <_ZN6StringD1Ev>
        CO_zero = tempValue;
        EEPROM.put(CO_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083190:	b007      	add	sp, #28
 8083192:	bd30      	pop	{r4, r5, pc}
 8083194:	200007e8 	.word	0x200007e8
 8083198:	08091232 	.word	0x08091232
 808319c:	08091243 	.word	0x08091243
 80831a0:	08091248 	.word	0x08091248
 80831a4:	0809125c 	.word	0x0809125c
 80831a8:	08090fe6 	.word	0x08090fe6

080831ac <_Z17serialGetPm1Slopev>:

void serialGetPm1Slope(void){
 80831ac:	b530      	push	{r4, r5, lr}
 80831ae:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 80831b0:	f008 fa48 	bl	808b644 <_Z16_fetch_usbserialv>
 80831b4:	f007 f9a1 	bl	808a4fa <_ZN5Print7printlnEv>
    Serial.print("Current PM1 slope:");
 80831b8:	f008 fa44 	bl	808b644 <_Z16_fetch_usbserialv>
 80831bc:	4932      	ldr	r1, [pc, #200]	; (8083288 <_Z17serialGetPm1Slopev+0xdc>)
 80831be:	f007 f995 	bl	808a4ec <_ZN5Print5printEPKc>
    Serial.print(String(PM_1_slope, 2));
 80831c2:	f008 fa3f 	bl	808b644 <_Z16_fetch_usbserialv>
 80831c6:	4605      	mov	r5, r0
 80831c8:	4c30      	ldr	r4, [pc, #192]	; (808328c <_Z17serialGetPm1Slopev+0xe0>)
 80831ca:	2202      	movs	r2, #2
 80831cc:	6821      	ldr	r1, [r4, #0]
 80831ce:	a806      	add	r0, sp, #24
 80831d0:	f007 f82f 	bl	808a232 <_ZN6StringC1Efi>
 80831d4:	9906      	ldr	r1, [sp, #24]
 80831d6:	4628      	mov	r0, r5
 80831d8:	f007 f988 	bl	808a4ec <_ZN5Print5printEPKc>
 80831dc:	a806      	add	r0, sp, #24
 80831de:	f006 ff47 	bl	808a070 <_ZN6StringD1Ev>
    Serial.println(" ");
 80831e2:	f008 fa2f 	bl	808b644 <_Z16_fetch_usbserialv>
 80831e6:	492a      	ldr	r1, [pc, #168]	; (8083290 <_Z17serialGetPm1Slopev+0xe4>)
 80831e8:	f007 f993 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM1 slope\n\r");
 80831ec:	f008 fa2a 	bl	808b644 <_Z16_fetch_usbserialv>
 80831f0:	4928      	ldr	r1, [pc, #160]	; (8083294 <_Z17serialGetPm1Slopev+0xe8>)
 80831f2:	f007 f97b 	bl	808a4ec <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 80831f6:	f008 fa25 	bl	808b644 <_Z16_fetch_usbserialv>
 80831fa:	f24c 3150 	movw	r1, #50000	; 0xc350
 80831fe:	f007 fb0c 	bl	808a81a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083202:	f008 fa1f 	bl	808b644 <_Z16_fetch_usbserialv>
 8083206:	220d      	movs	r2, #13
 8083208:	4601      	mov	r1, r0
 808320a:	a802      	add	r0, sp, #8
 808320c:	f007 fb72 	bl	808a8f4 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083210:	a802      	add	r0, sp, #8
 8083212:	f007 f922 	bl	808a45a <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8083216:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(PM_1_slope, 2));
    Serial.println(" ");
    Serial.print("Enter new PM1 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 808321a:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 808321c:	f009 ff74 	bl	808d108 <__aeabi_fcmpge>
 8083220:	b340      	cbz	r0, 8083274 <_Z17serialGetPm1Slopev+0xc8>
 8083222:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8083226:	4628      	mov	r0, r5
 8083228:	f009 ff5a 	bl	808d0e0 <__aeabi_fcmplt>
 808322c:	b310      	cbz	r0, 8083274 <_Z17serialGetPm1Slopev+0xc8>
        PM_1_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 808322e:	491a      	ldr	r1, [pc, #104]	; (8083298 <_Z17serialGetPm1Slopev+0xec>)
 8083230:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
        PM_1_slope = tempfloat;
 8083232:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 8083234:	f009 fdb6 	bl	808cda4 <__aeabi_fmul>
 8083238:	f009 ff7a 	bl	808d130 <__aeabi_f2iz>
 808323c:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew PM1 slope: ");
 808323e:	f008 fa01 	bl	808b644 <_Z16_fetch_usbserialv>
 8083242:	4916      	ldr	r1, [pc, #88]	; (808329c <_Z17serialGetPm1Slopev+0xf0>)
 8083244:	f007 f952 	bl	808a4ec <_ZN5Print5printEPKc>
        Serial.println(String(PM_1_slope, 2));
 8083248:	f008 f9fc 	bl	808b644 <_Z16_fetch_usbserialv>
 808324c:	4605      	mov	r5, r0
 808324e:	2202      	movs	r2, #2
 8083250:	6821      	ldr	r1, [r4, #0]
 8083252:	a806      	add	r0, sp, #24
 8083254:	f006 ffed 	bl	808a232 <_ZN6StringC1Efi>
 8083258:	9906      	ldr	r1, [sp, #24]
 808325a:	4628      	mov	r0, r5
 808325c:	f007 f959 	bl	808a512 <_ZN5Print7printlnEPKc>
 8083260:	a806      	add	r0, sp, #24
 8083262:	f006 ff05 	bl	808a070 <_ZN6StringD1Ev>

        EEPROM.put(PM_1_SLOPE_MEM_ADDRESS, tempValue);
 8083266:	f008 fdd1 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 808326a:	a901      	add	r1, sp, #4
 808326c:	2018      	movs	r0, #24
 808326e:	f7fd fcce 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 8083272:	e004      	b.n	808327e <_Z17serialGetPm1Slopev+0xd2>
    }else{
        Serial.println("\n\rInvalid value!");
 8083274:	f008 f9e6 	bl	808b644 <_Z16_fetch_usbserialv>
 8083278:	4909      	ldr	r1, [pc, #36]	; (80832a0 <_Z17serialGetPm1Slopev+0xf4>)
 808327a:	f007 f94a 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.print("Current PM1 slope:");
    Serial.print(String(PM_1_slope, 2));
    Serial.println(" ");
    Serial.print("Enter new PM1 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 808327e:	a802      	add	r0, sp, #8
 8083280:	f006 fef6 	bl	808a070 <_ZN6StringD1Ev>

        EEPROM.put(PM_1_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083284:	b00b      	add	sp, #44	; 0x2c
 8083286:	bd30      	pop	{r4, r5, pc}
 8083288:	0809126c 	.word	0x0809126c
 808328c:	20000230 	.word	0x20000230
 8083290:	08090809 	.word	0x08090809
 8083294:	0809127f 	.word	0x0809127f
 8083298:	42c80000 	.word	0x42c80000
 808329c:	08091295 	.word	0x08091295
 80832a0:	08090fe6 	.word	0x08090fe6

080832a4 <_Z16serialGetPm1Zerov>:

void serialGetPm1Zero(void){
 80832a4:	b530      	push	{r4, r5, lr}
 80832a6:	b087      	sub	sp, #28
    Serial.println();
 80832a8:	f008 f9cc 	bl	808b644 <_Z16_fetch_usbserialv>
    Serial.print("Current PM1 zero:");
    Serial.print(PM_1_zero);
 80832ac:	4d26      	ldr	r5, [pc, #152]	; (8083348 <_Z16serialGetPm1Zerov+0xa4>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetPm1Zero(void){
    Serial.println();
 80832ae:	f007 f924 	bl	808a4fa <_ZN5Print7printlnEv>
    Serial.print("Current PM1 zero:");
 80832b2:	f008 f9c7 	bl	808b644 <_Z16_fetch_usbserialv>
 80832b6:	4925      	ldr	r1, [pc, #148]	; (808334c <_Z16serialGetPm1Zerov+0xa8>)
 80832b8:	f007 f918 	bl	808a4ec <_ZN5Print5printEPKc>
    Serial.print(PM_1_zero);
 80832bc:	f008 f9c2 	bl	808b644 <_Z16_fetch_usbserialv>
 80832c0:	220a      	movs	r2, #10
 80832c2:	6829      	ldr	r1, [r5, #0]
 80832c4:	f007 f991 	bl	808a5ea <_ZN5Print5printEii>
    Serial.println(" ug/m3");
 80832c8:	f008 f9bc 	bl	808b644 <_Z16_fetch_usbserialv>
 80832cc:	4920      	ldr	r1, [pc, #128]	; (8083350 <_Z16serialGetPm1Zerov+0xac>)
 80832ce:	f007 f920 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM1 Zero\n\r");
 80832d2:	f008 f9b7 	bl	808b644 <_Z16_fetch_usbserialv>
 80832d6:	491f      	ldr	r1, [pc, #124]	; (8083354 <_Z16serialGetPm1Zerov+0xb0>)
 80832d8:	f007 f908 	bl	808a4ec <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 80832dc:	f008 f9b2 	bl	808b644 <_Z16_fetch_usbserialv>
 80832e0:	f24c 3150 	movw	r1, #50000	; 0xc350
 80832e4:	f007 fa99 	bl	808a81a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80832e8:	f008 f9ac 	bl	808b644 <_Z16_fetch_usbserialv>
 80832ec:	220d      	movs	r2, #13
 80832ee:	4601      	mov	r1, r0
 80832f0:	a802      	add	r0, sp, #8
 80832f2:	f007 faff 	bl	808a8f4 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 80832f6:	a802      	add	r0, sp, #8
 80832f8:	f007 f8aa 	bl	808a450 <_ZNK6String5toIntEv>
 80832fc:	9001      	str	r0, [sp, #4]

    if(tempValue >= -1000 && tempValue < 1000){
 80832fe:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8083302:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8083306:	d215      	bcs.n	8083334 <_Z16serialGetPm1Zerov+0x90>
        Serial.print("\n\rNew PM1 zero: ");
 8083308:	f008 f99c 	bl	808b644 <_Z16_fetch_usbserialv>
 808330c:	4912      	ldr	r1, [pc, #72]	; (8083358 <_Z16serialGetPm1Zerov+0xb4>)
 808330e:	f007 f8ed 	bl	808a4ec <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        PM_1_zero = tempValue;
 8083312:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -1000 && tempValue < 1000){
        Serial.print("\n\rNew PM1 zero: ");
        Serial.println(tempValue);
 8083314:	f008 f996 	bl	808b644 <_Z16_fetch_usbserialv>
 8083318:	9901      	ldr	r1, [sp, #4]
 808331a:	220a      	movs	r2, #10
 808331c:	f007 f967 	bl	808a5ee <_ZN5Print7printlnEii>
        PM_1_zero = tempValue;
 8083320:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8083324:	602b      	str	r3, [r5, #0]
        EEPROM.put(PM_1_ZERO_MEM_ADDRESS, tempValue);
 8083326:	f008 fd71 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 808332a:	4621      	mov	r1, r4
 808332c:	2014      	movs	r0, #20
 808332e:	f7fd fc6e 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 8083332:	e004      	b.n	808333e <_Z16serialGetPm1Zerov+0x9a>
    }else{
        Serial.println("\n\rInvalid value!");
 8083334:	f008 f986 	bl	808b644 <_Z16_fetch_usbserialv>
 8083338:	4908      	ldr	r1, [pc, #32]	; (808335c <_Z16serialGetPm1Zerov+0xb8>)
 808333a:	f007 f8ea 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.print("Current PM1 zero:");
    Serial.print(PM_1_zero);
    Serial.println(" ug/m3");
    Serial.print("Enter new PM1 Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 808333e:	a802      	add	r0, sp, #8
 8083340:	f006 fe96 	bl	808a070 <_ZN6StringD1Ev>
        PM_1_zero = tempValue;
        EEPROM.put(PM_1_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083344:	b007      	add	sp, #28
 8083346:	bd30      	pop	{r4, r5, pc}
 8083348:	20000acc 	.word	0x20000acc
 808334c:	080912a7 	.word	0x080912a7
 8083350:	080912b9 	.word	0x080912b9
 8083354:	080912c0 	.word	0x080912c0
 8083358:	080912d5 	.word	0x080912d5
 808335c:	08090fe6 	.word	0x08090fe6

08083360 <_Z18serialGetPm25Slopev>:

void serialGetPm25Slope(void){
 8083360:	b530      	push	{r4, r5, lr}
 8083362:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8083364:	f008 f96e 	bl	808b644 <_Z16_fetch_usbserialv>
 8083368:	f007 f8c7 	bl	808a4fa <_ZN5Print7printlnEv>
    Serial.print("Current PM2.5 slope:");
 808336c:	f008 f96a 	bl	808b644 <_Z16_fetch_usbserialv>
 8083370:	4932      	ldr	r1, [pc, #200]	; (808343c <_Z18serialGetPm25Slopev+0xdc>)
 8083372:	f007 f8bb 	bl	808a4ec <_ZN5Print5printEPKc>
    Serial.print(String(PM_25_slope, 2));
 8083376:	f008 f965 	bl	808b644 <_Z16_fetch_usbserialv>
 808337a:	4605      	mov	r5, r0
 808337c:	4c30      	ldr	r4, [pc, #192]	; (8083440 <_Z18serialGetPm25Slopev+0xe0>)
 808337e:	2202      	movs	r2, #2
 8083380:	6821      	ldr	r1, [r4, #0]
 8083382:	a806      	add	r0, sp, #24
 8083384:	f006 ff55 	bl	808a232 <_ZN6StringC1Efi>
 8083388:	9906      	ldr	r1, [sp, #24]
 808338a:	4628      	mov	r0, r5
 808338c:	f007 f8ae 	bl	808a4ec <_ZN5Print5printEPKc>
 8083390:	a806      	add	r0, sp, #24
 8083392:	f006 fe6d 	bl	808a070 <_ZN6StringD1Ev>
    Serial.println(" ");
 8083396:	f008 f955 	bl	808b644 <_Z16_fetch_usbserialv>
 808339a:	492a      	ldr	r1, [pc, #168]	; (8083444 <_Z18serialGetPm25Slopev+0xe4>)
 808339c:	f007 f8b9 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM2.5 slope\n\r");
 80833a0:	f008 f950 	bl	808b644 <_Z16_fetch_usbserialv>
 80833a4:	4928      	ldr	r1, [pc, #160]	; (8083448 <_Z18serialGetPm25Slopev+0xe8>)
 80833a6:	f007 f8a1 	bl	808a4ec <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 80833aa:	f008 f94b 	bl	808b644 <_Z16_fetch_usbserialv>
 80833ae:	f24c 3150 	movw	r1, #50000	; 0xc350
 80833b2:	f007 fa32 	bl	808a81a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80833b6:	f008 f945 	bl	808b644 <_Z16_fetch_usbserialv>
 80833ba:	220d      	movs	r2, #13
 80833bc:	4601      	mov	r1, r0
 80833be:	a802      	add	r0, sp, #8
 80833c0:	f007 fa98 	bl	808a8f4 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 80833c4:	a802      	add	r0, sp, #8
 80833c6:	f007 f848 	bl	808a45a <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 80833ca:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(PM_25_slope, 2));
    Serial.println(" ");
    Serial.print("Enter new PM2.5 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 80833ce:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 80833d0:	f009 fe9a 	bl	808d108 <__aeabi_fcmpge>
 80833d4:	b340      	cbz	r0, 8083428 <_Z18serialGetPm25Slopev+0xc8>
 80833d6:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80833da:	4628      	mov	r0, r5
 80833dc:	f009 fe80 	bl	808d0e0 <__aeabi_fcmplt>
 80833e0:	b310      	cbz	r0, 8083428 <_Z18serialGetPm25Slopev+0xc8>
        PM_25_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 80833e2:	491a      	ldr	r1, [pc, #104]	; (808344c <_Z18serialGetPm25Slopev+0xec>)
 80833e4:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
        PM_25_slope = tempfloat;
 80833e6:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 80833e8:	f009 fcdc 	bl	808cda4 <__aeabi_fmul>
 80833ec:	f009 fea0 	bl	808d130 <__aeabi_f2iz>
 80833f0:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew PM2.5 slope: ");
 80833f2:	f008 f927 	bl	808b644 <_Z16_fetch_usbserialv>
 80833f6:	4916      	ldr	r1, [pc, #88]	; (8083450 <_Z18serialGetPm25Slopev+0xf0>)
 80833f8:	f007 f878 	bl	808a4ec <_ZN5Print5printEPKc>
        Serial.println(String(PM_25_slope,2));
 80833fc:	f008 f922 	bl	808b644 <_Z16_fetch_usbserialv>
 8083400:	4605      	mov	r5, r0
 8083402:	2202      	movs	r2, #2
 8083404:	6821      	ldr	r1, [r4, #0]
 8083406:	a806      	add	r0, sp, #24
 8083408:	f006 ff13 	bl	808a232 <_ZN6StringC1Efi>
 808340c:	9906      	ldr	r1, [sp, #24]
 808340e:	4628      	mov	r0, r5
 8083410:	f007 f87f 	bl	808a512 <_ZN5Print7printlnEPKc>
 8083414:	a806      	add	r0, sp, #24
 8083416:	f006 fe2b 	bl	808a070 <_ZN6StringD1Ev>

        EEPROM.put(PM_25_SLOPE_MEM_ADDRESS, tempValue);
 808341a:	f008 fcf7 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 808341e:	a901      	add	r1, sp, #4
 8083420:	2020      	movs	r0, #32
 8083422:	f7fd fbf4 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 8083426:	e004      	b.n	8083432 <_Z18serialGetPm25Slopev+0xd2>
    }else{
        Serial.println("\n\rInvalid value!");
 8083428:	f008 f90c 	bl	808b644 <_Z16_fetch_usbserialv>
 808342c:	4909      	ldr	r1, [pc, #36]	; (8083454 <_Z18serialGetPm25Slopev+0xf4>)
 808342e:	f007 f870 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.print("Current PM2.5 slope:");
    Serial.print(String(PM_25_slope, 2));
    Serial.println(" ");
    Serial.print("Enter new PM2.5 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083432:	a802      	add	r0, sp, #8
 8083434:	f006 fe1c 	bl	808a070 <_ZN6StringD1Ev>

        EEPROM.put(PM_25_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083438:	b00b      	add	sp, #44	; 0x2c
 808343a:	bd30      	pop	{r4, r5, pc}
 808343c:	080912e6 	.word	0x080912e6
 8083440:	200007dc 	.word	0x200007dc
 8083444:	08090809 	.word	0x08090809
 8083448:	080912fb 	.word	0x080912fb
 808344c:	42c80000 	.word	0x42c80000
 8083450:	08091313 	.word	0x08091313
 8083454:	08090fe6 	.word	0x08090fe6

08083458 <_Z17serialGetPm25Zerov>:

void serialGetPm25Zero(void){
 8083458:	b530      	push	{r4, r5, lr}
 808345a:	b087      	sub	sp, #28
    Serial.println();
 808345c:	f008 f8f2 	bl	808b644 <_Z16_fetch_usbserialv>
    Serial.print("Current PM2.5 zero:");
    Serial.print(PM_25_zero);
 8083460:	4d26      	ldr	r5, [pc, #152]	; (80834fc <_Z17serialGetPm25Zerov+0xa4>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetPm25Zero(void){
    Serial.println();
 8083462:	f007 f84a 	bl	808a4fa <_ZN5Print7printlnEv>
    Serial.print("Current PM2.5 zero:");
 8083466:	f008 f8ed 	bl	808b644 <_Z16_fetch_usbserialv>
 808346a:	4925      	ldr	r1, [pc, #148]	; (8083500 <_Z17serialGetPm25Zerov+0xa8>)
 808346c:	f007 f83e 	bl	808a4ec <_ZN5Print5printEPKc>
    Serial.print(PM_25_zero);
 8083470:	f008 f8e8 	bl	808b644 <_Z16_fetch_usbserialv>
 8083474:	220a      	movs	r2, #10
 8083476:	6829      	ldr	r1, [r5, #0]
 8083478:	f007 f8b7 	bl	808a5ea <_ZN5Print5printEii>
    Serial.println(" ug/m3");
 808347c:	f008 f8e2 	bl	808b644 <_Z16_fetch_usbserialv>
 8083480:	4920      	ldr	r1, [pc, #128]	; (8083504 <_Z17serialGetPm25Zerov+0xac>)
 8083482:	f007 f846 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM2.5 Zero\n\r");
 8083486:	f008 f8dd 	bl	808b644 <_Z16_fetch_usbserialv>
 808348a:	491f      	ldr	r1, [pc, #124]	; (8083508 <_Z17serialGetPm25Zerov+0xb0>)
 808348c:	f007 f82e 	bl	808a4ec <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083490:	f008 f8d8 	bl	808b644 <_Z16_fetch_usbserialv>
 8083494:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083498:	f007 f9bf 	bl	808a81a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 808349c:	f008 f8d2 	bl	808b644 <_Z16_fetch_usbserialv>
 80834a0:	220d      	movs	r2, #13
 80834a2:	4601      	mov	r1, r0
 80834a4:	a802      	add	r0, sp, #8
 80834a6:	f007 fa25 	bl	808a8f4 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 80834aa:	a802      	add	r0, sp, #8
 80834ac:	f006 ffd0 	bl	808a450 <_ZNK6String5toIntEv>
 80834b0:	9001      	str	r0, [sp, #4]

    if(tempValue >= -1000 && tempValue < 1000){
 80834b2:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 80834b6:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 80834ba:	d215      	bcs.n	80834e8 <_Z17serialGetPm25Zerov+0x90>
        Serial.print("\n\rNew PM2.5 zero: ");
 80834bc:	f008 f8c2 	bl	808b644 <_Z16_fetch_usbserialv>
 80834c0:	4912      	ldr	r1, [pc, #72]	; (808350c <_Z17serialGetPm25Zerov+0xb4>)
 80834c2:	f007 f813 	bl	808a4ec <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        PM_25_zero = tempValue;
 80834c6:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -1000 && tempValue < 1000){
        Serial.print("\n\rNew PM2.5 zero: ");
        Serial.println(tempValue);
 80834c8:	f008 f8bc 	bl	808b644 <_Z16_fetch_usbserialv>
 80834cc:	9901      	ldr	r1, [sp, #4]
 80834ce:	220a      	movs	r2, #10
 80834d0:	f007 f88d 	bl	808a5ee <_ZN5Print7printlnEii>
        PM_25_zero = tempValue;
 80834d4:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 80834d8:	602b      	str	r3, [r5, #0]
        EEPROM.put(PM_25_ZERO_MEM_ADDRESS, tempValue);
 80834da:	f008 fc97 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 80834de:	4621      	mov	r1, r4
 80834e0:	201c      	movs	r0, #28
 80834e2:	f7fd fb94 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 80834e6:	e004      	b.n	80834f2 <_Z17serialGetPm25Zerov+0x9a>
    }else{
        Serial.println("\n\rInvalid value!");
 80834e8:	f008 f8ac 	bl	808b644 <_Z16_fetch_usbserialv>
 80834ec:	4908      	ldr	r1, [pc, #32]	; (8083510 <_Z17serialGetPm25Zerov+0xb8>)
 80834ee:	f007 f810 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.print("Current PM2.5 zero:");
    Serial.print(PM_25_zero);
    Serial.println(" ug/m3");
    Serial.print("Enter new PM2.5 Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 80834f2:	a802      	add	r0, sp, #8
 80834f4:	f006 fdbc 	bl	808a070 <_ZN6StringD1Ev>
        PM_25_zero = tempValue;
        EEPROM.put(PM_25_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 80834f8:	b007      	add	sp, #28
 80834fa:	bd30      	pop	{r4, r5, pc}
 80834fc:	2000077c 	.word	0x2000077c
 8083500:	08091327 	.word	0x08091327
 8083504:	080912b9 	.word	0x080912b9
 8083508:	0809133b 	.word	0x0809133b
 808350c:	08091352 	.word	0x08091352
 8083510:	08090fe6 	.word	0x08090fe6

08083514 <_Z18serialGetPm10Slopev>:

void serialGetPm10Slope(void){
 8083514:	b530      	push	{r4, r5, lr}
 8083516:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8083518:	f008 f894 	bl	808b644 <_Z16_fetch_usbserialv>
 808351c:	f006 ffed 	bl	808a4fa <_ZN5Print7printlnEv>
    Serial.print("Current PM10 slope:");
 8083520:	f008 f890 	bl	808b644 <_Z16_fetch_usbserialv>
 8083524:	4932      	ldr	r1, [pc, #200]	; (80835f0 <_Z18serialGetPm10Slopev+0xdc>)
 8083526:	f006 ffe1 	bl	808a4ec <_ZN5Print5printEPKc>
    Serial.print(String(PM_10_slope, 2));
 808352a:	f008 f88b 	bl	808b644 <_Z16_fetch_usbserialv>
 808352e:	4605      	mov	r5, r0
 8083530:	4c30      	ldr	r4, [pc, #192]	; (80835f4 <_Z18serialGetPm10Slopev+0xe0>)
 8083532:	2202      	movs	r2, #2
 8083534:	6821      	ldr	r1, [r4, #0]
 8083536:	a806      	add	r0, sp, #24
 8083538:	f006 fe7b 	bl	808a232 <_ZN6StringC1Efi>
 808353c:	9906      	ldr	r1, [sp, #24]
 808353e:	4628      	mov	r0, r5
 8083540:	f006 ffd4 	bl	808a4ec <_ZN5Print5printEPKc>
 8083544:	a806      	add	r0, sp, #24
 8083546:	f006 fd93 	bl	808a070 <_ZN6StringD1Ev>
    Serial.println(" ");
 808354a:	f008 f87b 	bl	808b644 <_Z16_fetch_usbserialv>
 808354e:	492a      	ldr	r1, [pc, #168]	; (80835f8 <_Z18serialGetPm10Slopev+0xe4>)
 8083550:	f006 ffdf 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM10 slope\n\r");
 8083554:	f008 f876 	bl	808b644 <_Z16_fetch_usbserialv>
 8083558:	4928      	ldr	r1, [pc, #160]	; (80835fc <_Z18serialGetPm10Slopev+0xe8>)
 808355a:	f006 ffc7 	bl	808a4ec <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 808355e:	f008 f871 	bl	808b644 <_Z16_fetch_usbserialv>
 8083562:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083566:	f007 f958 	bl	808a81a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 808356a:	f008 f86b 	bl	808b644 <_Z16_fetch_usbserialv>
 808356e:	220d      	movs	r2, #13
 8083570:	4601      	mov	r1, r0
 8083572:	a802      	add	r0, sp, #8
 8083574:	f007 f9be 	bl	808a8f4 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083578:	a802      	add	r0, sp, #8
 808357a:	f006 ff6e 	bl	808a45a <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 808357e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(PM_10_slope, 2));
    Serial.println(" ");
    Serial.print("Enter new PM10 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 8083582:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8083584:	f009 fdc0 	bl	808d108 <__aeabi_fcmpge>
 8083588:	b340      	cbz	r0, 80835dc <_Z18serialGetPm10Slopev+0xc8>
 808358a:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 808358e:	4628      	mov	r0, r5
 8083590:	f009 fda6 	bl	808d0e0 <__aeabi_fcmplt>
 8083594:	b310      	cbz	r0, 80835dc <_Z18serialGetPm10Slopev+0xc8>
        PM_10_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 8083596:	491a      	ldr	r1, [pc, #104]	; (8083600 <_Z18serialGetPm10Slopev+0xec>)
 8083598:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
        PM_10_slope = tempfloat;
 808359a:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 808359c:	f009 fc02 	bl	808cda4 <__aeabi_fmul>
 80835a0:	f009 fdc6 	bl	808d130 <__aeabi_f2iz>
 80835a4:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew PM10 slope: ");
 80835a6:	f008 f84d 	bl	808b644 <_Z16_fetch_usbserialv>
 80835aa:	4916      	ldr	r1, [pc, #88]	; (8083604 <_Z18serialGetPm10Slopev+0xf0>)
 80835ac:	f006 ff9e 	bl	808a4ec <_ZN5Print5printEPKc>
        Serial.println(String(PM_10_slope,2));
 80835b0:	f008 f848 	bl	808b644 <_Z16_fetch_usbserialv>
 80835b4:	4605      	mov	r5, r0
 80835b6:	2202      	movs	r2, #2
 80835b8:	6821      	ldr	r1, [r4, #0]
 80835ba:	a806      	add	r0, sp, #24
 80835bc:	f006 fe39 	bl	808a232 <_ZN6StringC1Efi>
 80835c0:	9906      	ldr	r1, [sp, #24]
 80835c2:	4628      	mov	r0, r5
 80835c4:	f006 ffa5 	bl	808a512 <_ZN5Print7printlnEPKc>
 80835c8:	a806      	add	r0, sp, #24
 80835ca:	f006 fd51 	bl	808a070 <_ZN6StringD1Ev>

        EEPROM.put(PM_10_SLOPE_MEM_ADDRESS, tempValue);
 80835ce:	f008 fc1d 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 80835d2:	a901      	add	r1, sp, #4
 80835d4:	2028      	movs	r0, #40	; 0x28
 80835d6:	f7fd fb1a 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 80835da:	e004      	b.n	80835e6 <_Z18serialGetPm10Slopev+0xd2>
    }else{
        Serial.println("\n\rInvalid value!");
 80835dc:	f008 f832 	bl	808b644 <_Z16_fetch_usbserialv>
 80835e0:	4909      	ldr	r1, [pc, #36]	; (8083608 <_Z18serialGetPm10Slopev+0xf4>)
 80835e2:	f006 ff96 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.print("Current PM10 slope:");
    Serial.print(String(PM_10_slope, 2));
    Serial.println(" ");
    Serial.print("Enter new PM10 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 80835e6:	a802      	add	r0, sp, #8
 80835e8:	f006 fd42 	bl	808a070 <_ZN6StringD1Ev>

        EEPROM.put(PM_10_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 80835ec:	b00b      	add	sp, #44	; 0x2c
 80835ee:	bd30      	pop	{r4, r5, pc}
 80835f0:	08091365 	.word	0x08091365
 80835f4:	20000b18 	.word	0x20000b18
 80835f8:	08090809 	.word	0x08090809
 80835fc:	08091379 	.word	0x08091379
 8083600:	42c80000 	.word	0x42c80000
 8083604:	08091390 	.word	0x08091390
 8083608:	08090fe6 	.word	0x08090fe6

0808360c <_Z17serialGetPm10Zerov>:

void serialGetPm10Zero(void){
 808360c:	b530      	push	{r4, r5, lr}
 808360e:	b087      	sub	sp, #28
    Serial.println();
 8083610:	f008 f818 	bl	808b644 <_Z16_fetch_usbserialv>
    Serial.print("Current PM10 zero:");
    Serial.print(PM_10_zero);
 8083614:	4d26      	ldr	r5, [pc, #152]	; (80836b0 <_Z17serialGetPm10Zerov+0xa4>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetPm10Zero(void){
    Serial.println();
 8083616:	f006 ff70 	bl	808a4fa <_ZN5Print7printlnEv>
    Serial.print("Current PM10 zero:");
 808361a:	f008 f813 	bl	808b644 <_Z16_fetch_usbserialv>
 808361e:	4925      	ldr	r1, [pc, #148]	; (80836b4 <_Z17serialGetPm10Zerov+0xa8>)
 8083620:	f006 ff64 	bl	808a4ec <_ZN5Print5printEPKc>
    Serial.print(PM_10_zero);
 8083624:	f008 f80e 	bl	808b644 <_Z16_fetch_usbserialv>
 8083628:	220a      	movs	r2, #10
 808362a:	6829      	ldr	r1, [r5, #0]
 808362c:	f006 ffdd 	bl	808a5ea <_ZN5Print5printEii>
    Serial.println(" um/m3");
 8083630:	f008 f808 	bl	808b644 <_Z16_fetch_usbserialv>
 8083634:	4920      	ldr	r1, [pc, #128]	; (80836b8 <_Z17serialGetPm10Zerov+0xac>)
 8083636:	f006 ff6c 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM10 Zero\n\r");
 808363a:	f008 f803 	bl	808b644 <_Z16_fetch_usbserialv>
 808363e:	491f      	ldr	r1, [pc, #124]	; (80836bc <_Z17serialGetPm10Zerov+0xb0>)
 8083640:	f006 ff54 	bl	808a4ec <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083644:	f007 fffe 	bl	808b644 <_Z16_fetch_usbserialv>
 8083648:	f24c 3150 	movw	r1, #50000	; 0xc350
 808364c:	f007 f8e5 	bl	808a81a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083650:	f007 fff8 	bl	808b644 <_Z16_fetch_usbserialv>
 8083654:	220d      	movs	r2, #13
 8083656:	4601      	mov	r1, r0
 8083658:	a802      	add	r0, sp, #8
 808365a:	f007 f94b 	bl	808a8f4 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 808365e:	a802      	add	r0, sp, #8
 8083660:	f006 fef6 	bl	808a450 <_ZNK6String5toIntEv>
 8083664:	9001      	str	r0, [sp, #4]

    if(tempValue >= -1000 && tempValue < 1000){
 8083666:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 808366a:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 808366e:	d215      	bcs.n	808369c <_Z17serialGetPm10Zerov+0x90>
        Serial.print("\n\rNew PM10 zero: ");
 8083670:	f007 ffe8 	bl	808b644 <_Z16_fetch_usbserialv>
 8083674:	4912      	ldr	r1, [pc, #72]	; (80836c0 <_Z17serialGetPm10Zerov+0xb4>)
 8083676:	f006 ff39 	bl	808a4ec <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        PM_10_zero = tempValue;
 808367a:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -1000 && tempValue < 1000){
        Serial.print("\n\rNew PM10 zero: ");
        Serial.println(tempValue);
 808367c:	f007 ffe2 	bl	808b644 <_Z16_fetch_usbserialv>
 8083680:	9901      	ldr	r1, [sp, #4]
 8083682:	220a      	movs	r2, #10
 8083684:	f006 ffb3 	bl	808a5ee <_ZN5Print7printlnEii>
        PM_10_zero = tempValue;
 8083688:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 808368c:	602b      	str	r3, [r5, #0]
        EEPROM.put(PM_10_ZERO_MEM_ADDRESS, tempValue);
 808368e:	f008 fbbd 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8083692:	4621      	mov	r1, r4
 8083694:	2024      	movs	r0, #36	; 0x24
 8083696:	f7fd faba 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 808369a:	e004      	b.n	80836a6 <_Z17serialGetPm10Zerov+0x9a>
    }else{
        Serial.println("\n\rInvalid value!");
 808369c:	f007 ffd2 	bl	808b644 <_Z16_fetch_usbserialv>
 80836a0:	4908      	ldr	r1, [pc, #32]	; (80836c4 <_Z17serialGetPm10Zerov+0xb8>)
 80836a2:	f006 ff36 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.print("Current PM10 zero:");
    Serial.print(PM_10_zero);
    Serial.println(" um/m3");
    Serial.print("Enter new PM10 Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 80836a6:	a802      	add	r0, sp, #8
 80836a8:	f006 fce2 	bl	808a070 <_ZN6StringD1Ev>
        PM_10_zero = tempValue;
        EEPROM.put(PM_10_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 80836ac:	b007      	add	sp, #28
 80836ae:	bd30      	pop	{r4, r5, pc}
 80836b0:	20000b00 	.word	0x20000b00
 80836b4:	080913a3 	.word	0x080913a3
 80836b8:	080913b6 	.word	0x080913b6
 80836bc:	080913bd 	.word	0x080913bd
 80836c0:	080913d3 	.word	0x080913d3
 80836c4:	08090fe6 	.word	0x08090fe6

080836c8 <_Z25serialGetTemperatureSlopev>:

void serialGetTemperatureSlope(void){
 80836c8:	b530      	push	{r4, r5, lr}
 80836ca:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 80836cc:	f007 ffba 	bl	808b644 <_Z16_fetch_usbserialv>
 80836d0:	f006 ff13 	bl	808a4fa <_ZN5Print7printlnEv>
    Serial.print("Current Temperature slope:");
 80836d4:	f007 ffb6 	bl	808b644 <_Z16_fetch_usbserialv>
 80836d8:	4932      	ldr	r1, [pc, #200]	; (80837a4 <_Z25serialGetTemperatureSlopev+0xdc>)
 80836da:	f006 ff07 	bl	808a4ec <_ZN5Print5printEPKc>
    Serial.print(String(temp_slope, 2));
 80836de:	f007 ffb1 	bl	808b644 <_Z16_fetch_usbserialv>
 80836e2:	4605      	mov	r5, r0
 80836e4:	4c30      	ldr	r4, [pc, #192]	; (80837a8 <_Z25serialGetTemperatureSlopev+0xe0>)
 80836e6:	2202      	movs	r2, #2
 80836e8:	6821      	ldr	r1, [r4, #0]
 80836ea:	a806      	add	r0, sp, #24
 80836ec:	f006 fda1 	bl	808a232 <_ZN6StringC1Efi>
 80836f0:	9906      	ldr	r1, [sp, #24]
 80836f2:	4628      	mov	r0, r5
 80836f4:	f006 fefa 	bl	808a4ec <_ZN5Print5printEPKc>
 80836f8:	a806      	add	r0, sp, #24
 80836fa:	f006 fcb9 	bl	808a070 <_ZN6StringD1Ev>
    Serial.println(" Degrees C");
 80836fe:	f007 ffa1 	bl	808b644 <_Z16_fetch_usbserialv>
 8083702:	492a      	ldr	r1, [pc, #168]	; (80837ac <_Z25serialGetTemperatureSlopev+0xe4>)
 8083704:	f006 ff05 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Temperature slope\n\r");
 8083708:	f007 ff9c 	bl	808b644 <_Z16_fetch_usbserialv>
 808370c:	4928      	ldr	r1, [pc, #160]	; (80837b0 <_Z25serialGetTemperatureSlopev+0xe8>)
 808370e:	f006 feed 	bl	808a4ec <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083712:	f007 ff97 	bl	808b644 <_Z16_fetch_usbserialv>
 8083716:	f24c 3150 	movw	r1, #50000	; 0xc350
 808371a:	f007 f87e 	bl	808a81a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 808371e:	f007 ff91 	bl	808b644 <_Z16_fetch_usbserialv>
 8083722:	220d      	movs	r2, #13
 8083724:	4601      	mov	r1, r0
 8083726:	a802      	add	r0, sp, #8
 8083728:	f007 f8e4 	bl	808a8f4 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 808372c:	a802      	add	r0, sp, #8
 808372e:	f006 fe94 	bl	808a45a <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8083732:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(temp_slope, 2));
    Serial.println(" Degrees C");
    Serial.print("Enter new Temperature slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 8083736:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8083738:	f009 fce6 	bl	808d108 <__aeabi_fcmpge>
 808373c:	b340      	cbz	r0, 8083790 <_Z25serialGetTemperatureSlopev+0xc8>
 808373e:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8083742:	4628      	mov	r0, r5
 8083744:	f009 fccc 	bl	808d0e0 <__aeabi_fcmplt>
 8083748:	b310      	cbz	r0, 8083790 <_Z25serialGetTemperatureSlopev+0xc8>
        temp_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 808374a:	491a      	ldr	r1, [pc, #104]	; (80837b4 <_Z25serialGetTemperatureSlopev+0xec>)
 808374c:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
        temp_slope = tempfloat;
 808374e:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 8083750:	f009 fb28 	bl	808cda4 <__aeabi_fmul>
 8083754:	f009 fcec 	bl	808d130 <__aeabi_f2iz>
 8083758:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew Temperature slope: ");
 808375a:	f007 ff73 	bl	808b644 <_Z16_fetch_usbserialv>
 808375e:	4916      	ldr	r1, [pc, #88]	; (80837b8 <_Z25serialGetTemperatureSlopev+0xf0>)
 8083760:	f006 fec4 	bl	808a4ec <_ZN5Print5printEPKc>
        Serial.println(String(temp_slope,2));
 8083764:	f007 ff6e 	bl	808b644 <_Z16_fetch_usbserialv>
 8083768:	4605      	mov	r5, r0
 808376a:	2202      	movs	r2, #2
 808376c:	6821      	ldr	r1, [r4, #0]
 808376e:	a806      	add	r0, sp, #24
 8083770:	f006 fd5f 	bl	808a232 <_ZN6StringC1Efi>
 8083774:	9906      	ldr	r1, [sp, #24]
 8083776:	4628      	mov	r0, r5
 8083778:	f006 fecb 	bl	808a512 <_ZN5Print7printlnEPKc>
 808377c:	a806      	add	r0, sp, #24
 808377e:	f006 fc77 	bl	808a070 <_ZN6StringD1Ev>

        EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, tempValue);
 8083782:	f008 fb43 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8083786:	a901      	add	r1, sp, #4
 8083788:	2030      	movs	r0, #48	; 0x30
 808378a:	f7fd fa40 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 808378e:	e004      	b.n	808379a <_Z25serialGetTemperatureSlopev+0xd2>
    }else{
        Serial.println("\n\rInvalid value!");
 8083790:	f007 ff58 	bl	808b644 <_Z16_fetch_usbserialv>
 8083794:	4909      	ldr	r1, [pc, #36]	; (80837bc <_Z25serialGetTemperatureSlopev+0xf4>)
 8083796:	f006 febc 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.print("Current Temperature slope:");
    Serial.print(String(temp_slope, 2));
    Serial.println(" Degrees C");
    Serial.print("Enter new Temperature slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 808379a:	a802      	add	r0, sp, #8
 808379c:	f006 fc68 	bl	808a070 <_ZN6StringD1Ev>

        EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 80837a0:	b00b      	add	sp, #44	; 0x2c
 80837a2:	bd30      	pop	{r4, r5, pc}
 80837a4:	080913e5 	.word	0x080913e5
 80837a8:	200007e4 	.word	0x200007e4
 80837ac:	08091400 	.word	0x08091400
 80837b0:	0809140b 	.word	0x0809140b
 80837b4:	42c80000 	.word	0x42c80000
 80837b8:	08091429 	.word	0x08091429
 80837bc:	08090fe6 	.word	0x08090fe6

080837c0 <_Z24serialGetTemperatureZerov>:

void serialGetTemperatureZero(void){
 80837c0:	b530      	push	{r4, r5, lr}
 80837c2:	b087      	sub	sp, #28
    Serial.println();
 80837c4:	f007 ff3e 	bl	808b644 <_Z16_fetch_usbserialv>
    Serial.print("Current Temperature zero:");
    Serial.print(temp_zero);
 80837c8:	4d25      	ldr	r5, [pc, #148]	; (8083860 <_Z24serialGetTemperatureZerov+0xa0>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetTemperatureZero(void){
    Serial.println();
 80837ca:	f006 fe96 	bl	808a4fa <_ZN5Print7printlnEv>
    Serial.print("Current Temperature zero:");
 80837ce:	f007 ff39 	bl	808b644 <_Z16_fetch_usbserialv>
 80837d2:	4924      	ldr	r1, [pc, #144]	; (8083864 <_Z24serialGetTemperatureZerov+0xa4>)
 80837d4:	f006 fe8a 	bl	808a4ec <_ZN5Print5printEPKc>
    Serial.print(temp_zero);
 80837d8:	f007 ff34 	bl	808b644 <_Z16_fetch_usbserialv>
 80837dc:	220a      	movs	r2, #10
 80837de:	6829      	ldr	r1, [r5, #0]
 80837e0:	f006 ff03 	bl	808a5ea <_ZN5Print5printEii>
    Serial.println(" Degrees C");
 80837e4:	f007 ff2e 	bl	808b644 <_Z16_fetch_usbserialv>
 80837e8:	491f      	ldr	r1, [pc, #124]	; (8083868 <_Z24serialGetTemperatureZerov+0xa8>)
 80837ea:	f006 fe92 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Temperature Zero\n\r");
 80837ee:	f007 ff29 	bl	808b644 <_Z16_fetch_usbserialv>
 80837f2:	491e      	ldr	r1, [pc, #120]	; (808386c <_Z24serialGetTemperatureZerov+0xac>)
 80837f4:	f006 fe7a 	bl	808a4ec <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 80837f8:	f007 ff24 	bl	808b644 <_Z16_fetch_usbserialv>
 80837fc:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083800:	f007 f80b 	bl	808a81a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083804:	f007 ff1e 	bl	808b644 <_Z16_fetch_usbserialv>
 8083808:	220d      	movs	r2, #13
 808380a:	4601      	mov	r1, r0
 808380c:	a802      	add	r0, sp, #8
 808380e:	f007 f871 	bl	808a8f4 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8083812:	a802      	add	r0, sp, #8
 8083814:	f006 fe1c 	bl	808a450 <_ZNK6String5toIntEv>
 8083818:	9001      	str	r0, [sp, #4]

    if(tempValue >= -30 && tempValue < 30){
 808381a:	301e      	adds	r0, #30
 808381c:	283b      	cmp	r0, #59	; 0x3b
 808381e:	d815      	bhi.n	808384c <_Z24serialGetTemperatureZerov+0x8c>
        Serial.print("\n\rNew Temperature zero: ");
 8083820:	f007 ff10 	bl	808b644 <_Z16_fetch_usbserialv>
 8083824:	4912      	ldr	r1, [pc, #72]	; (8083870 <_Z24serialGetTemperatureZerov+0xb0>)
 8083826:	f006 fe61 	bl	808a4ec <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        temp_zero = tempValue;
 808382a:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -30 && tempValue < 30){
        Serial.print("\n\rNew Temperature zero: ");
        Serial.println(tempValue);
 808382c:	f007 ff0a 	bl	808b644 <_Z16_fetch_usbserialv>
 8083830:	9901      	ldr	r1, [sp, #4]
 8083832:	220a      	movs	r2, #10
 8083834:	f006 fedb 	bl	808a5ee <_ZN5Print7printlnEii>
        temp_zero = tempValue;
 8083838:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 808383c:	602b      	str	r3, [r5, #0]
        EEPROM.put(TEMP_ZERO_MEM_ADDRESS, tempValue);
 808383e:	f008 fae5 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8083842:	4621      	mov	r1, r4
 8083844:	202c      	movs	r0, #44	; 0x2c
 8083846:	f7fd f9e2 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 808384a:	e004      	b.n	8083856 <_Z24serialGetTemperatureZerov+0x96>
    }else{
        Serial.println("\n\rInvalid value!");
 808384c:	f007 fefa 	bl	808b644 <_Z16_fetch_usbserialv>
 8083850:	4908      	ldr	r1, [pc, #32]	; (8083874 <_Z24serialGetTemperatureZerov+0xb4>)
 8083852:	f006 fe5e 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.print("Current Temperature zero:");
    Serial.print(temp_zero);
    Serial.println(" Degrees C");
    Serial.print("Enter new Temperature Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083856:	a802      	add	r0, sp, #8
 8083858:	f006 fc0a 	bl	808a070 <_ZN6StringD1Ev>
        temp_zero = tempValue;
        EEPROM.put(TEMP_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 808385c:	b007      	add	sp, #28
 808385e:	bd30      	pop	{r4, r5, pc}
 8083860:	20000ad8 	.word	0x20000ad8
 8083864:	08091443 	.word	0x08091443
 8083868:	08091400 	.word	0x08091400
 808386c:	0809145d 	.word	0x0809145d
 8083870:	0809147a 	.word	0x0809147a
 8083874:	08090fe6 	.word	0x08090fe6

08083878 <_Z22serialGetPressureSlopev>:

void serialGetPressureSlope(void){
 8083878:	b530      	push	{r4, r5, lr}
 808387a:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 808387c:	f007 fee2 	bl	808b644 <_Z16_fetch_usbserialv>
 8083880:	f006 fe3b 	bl	808a4fa <_ZN5Print7printlnEv>
    Serial.print("Current Pressure slope:");
 8083884:	f007 fede 	bl	808b644 <_Z16_fetch_usbserialv>
 8083888:	4932      	ldr	r1, [pc, #200]	; (8083954 <_Z22serialGetPressureSlopev+0xdc>)
 808388a:	f006 fe2f 	bl	808a4ec <_ZN5Print5printEPKc>
    Serial.print(String(pressure_slope, 2));
 808388e:	f007 fed9 	bl	808b644 <_Z16_fetch_usbserialv>
 8083892:	4605      	mov	r5, r0
 8083894:	4c30      	ldr	r4, [pc, #192]	; (8083958 <_Z22serialGetPressureSlopev+0xe0>)
 8083896:	2202      	movs	r2, #2
 8083898:	6821      	ldr	r1, [r4, #0]
 808389a:	a806      	add	r0, sp, #24
 808389c:	f006 fcc9 	bl	808a232 <_ZN6StringC1Efi>
 80838a0:	9906      	ldr	r1, [sp, #24]
 80838a2:	4628      	mov	r0, r5
 80838a4:	f006 fe22 	bl	808a4ec <_ZN5Print5printEPKc>
 80838a8:	a806      	add	r0, sp, #24
 80838aa:	f006 fbe1 	bl	808a070 <_ZN6StringD1Ev>
    Serial.println(" torr");
 80838ae:	f007 fec9 	bl	808b644 <_Z16_fetch_usbserialv>
 80838b2:	492a      	ldr	r1, [pc, #168]	; (808395c <_Z22serialGetPressureSlopev+0xe4>)
 80838b4:	f006 fe2d 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Pressure slope\n\r");
 80838b8:	f007 fec4 	bl	808b644 <_Z16_fetch_usbserialv>
 80838bc:	4928      	ldr	r1, [pc, #160]	; (8083960 <_Z22serialGetPressureSlopev+0xe8>)
 80838be:	f006 fe15 	bl	808a4ec <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 80838c2:	f007 febf 	bl	808b644 <_Z16_fetch_usbserialv>
 80838c6:	f24c 3150 	movw	r1, #50000	; 0xc350
 80838ca:	f006 ffa6 	bl	808a81a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80838ce:	f007 feb9 	bl	808b644 <_Z16_fetch_usbserialv>
 80838d2:	220d      	movs	r2, #13
 80838d4:	4601      	mov	r1, r0
 80838d6:	a802      	add	r0, sp, #8
 80838d8:	f007 f80c 	bl	808a8f4 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 80838dc:	a802      	add	r0, sp, #8
 80838de:	f006 fdbc 	bl	808a45a <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 80838e2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(pressure_slope, 2));
    Serial.println(" torr");
    Serial.print("Enter new Pressure slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 80838e6:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 80838e8:	f009 fc0e 	bl	808d108 <__aeabi_fcmpge>
 80838ec:	b340      	cbz	r0, 8083940 <_Z22serialGetPressureSlopev+0xc8>
 80838ee:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80838f2:	4628      	mov	r0, r5
 80838f4:	f009 fbf4 	bl	808d0e0 <__aeabi_fcmplt>
 80838f8:	b310      	cbz	r0, 8083940 <_Z22serialGetPressureSlopev+0xc8>
        pressure_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 80838fa:	491a      	ldr	r1, [pc, #104]	; (8083964 <_Z22serialGetPressureSlopev+0xec>)
 80838fc:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
        pressure_slope = tempfloat;
 80838fe:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 8083900:	f009 fa50 	bl	808cda4 <__aeabi_fmul>
 8083904:	f009 fc14 	bl	808d130 <__aeabi_f2iz>
 8083908:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew Pressure slope: ");
 808390a:	f007 fe9b 	bl	808b644 <_Z16_fetch_usbserialv>
 808390e:	4916      	ldr	r1, [pc, #88]	; (8083968 <_Z22serialGetPressureSlopev+0xf0>)
 8083910:	f006 fdec 	bl	808a4ec <_ZN5Print5printEPKc>
        Serial.println(String(pressure_slope,2));
 8083914:	f007 fe96 	bl	808b644 <_Z16_fetch_usbserialv>
 8083918:	4605      	mov	r5, r0
 808391a:	2202      	movs	r2, #2
 808391c:	6821      	ldr	r1, [r4, #0]
 808391e:	a806      	add	r0, sp, #24
 8083920:	f006 fc87 	bl	808a232 <_ZN6StringC1Efi>
 8083924:	9906      	ldr	r1, [sp, #24]
 8083926:	4628      	mov	r0, r5
 8083928:	f006 fdf3 	bl	808a512 <_ZN5Print7printlnEPKc>
 808392c:	a806      	add	r0, sp, #24
 808392e:	f006 fb9f 	bl	808a070 <_ZN6StringD1Ev>

        EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, tempValue);
 8083932:	f008 fa6b 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8083936:	a901      	add	r1, sp, #4
 8083938:	2038      	movs	r0, #56	; 0x38
 808393a:	f7fd f968 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 808393e:	e004      	b.n	808394a <_Z22serialGetPressureSlopev+0xd2>
    }else{
        Serial.println("\n\rInvalid value!");
 8083940:	f007 fe80 	bl	808b644 <_Z16_fetch_usbserialv>
 8083944:	4909      	ldr	r1, [pc, #36]	; (808396c <_Z22serialGetPressureSlopev+0xf4>)
 8083946:	f006 fde4 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.print("Current Pressure slope:");
    Serial.print(String(pressure_slope, 2));
    Serial.println(" torr");
    Serial.print("Enter new Pressure slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 808394a:	a802      	add	r0, sp, #8
 808394c:	f006 fb90 	bl	808a070 <_ZN6StringD1Ev>

        EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083950:	b00b      	add	sp, #44	; 0x2c
 8083952:	bd30      	pop	{r4, r5, pc}
 8083954:	08091493 	.word	0x08091493
 8083958:	200001f0 	.word	0x200001f0
 808395c:	080914ab 	.word	0x080914ab
 8083960:	080914b1 	.word	0x080914b1
 8083964:	42c80000 	.word	0x42c80000
 8083968:	080914cc 	.word	0x080914cc
 808396c:	08090fe6 	.word	0x08090fe6

08083970 <_Z21serialGetPressureZerov>:

void serialGetPressureZero(void){
 8083970:	b530      	push	{r4, r5, lr}
 8083972:	b087      	sub	sp, #28
    Serial.println();
 8083974:	f007 fe66 	bl	808b644 <_Z16_fetch_usbserialv>
    Serial.print("Current Pressure zero:");
    Serial.print(pressure_zero);
 8083978:	4d26      	ldr	r5, [pc, #152]	; (8083a14 <_Z21serialGetPressureZerov+0xa4>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetPressureZero(void){
    Serial.println();
 808397a:	f006 fdbe 	bl	808a4fa <_ZN5Print7printlnEv>
    Serial.print("Current Pressure zero:");
 808397e:	f007 fe61 	bl	808b644 <_Z16_fetch_usbserialv>
 8083982:	4925      	ldr	r1, [pc, #148]	; (8083a18 <_Z21serialGetPressureZerov+0xa8>)
 8083984:	f006 fdb2 	bl	808a4ec <_ZN5Print5printEPKc>
    Serial.print(pressure_zero);
 8083988:	f007 fe5c 	bl	808b644 <_Z16_fetch_usbserialv>
 808398c:	220a      	movs	r2, #10
 808398e:	6829      	ldr	r1, [r5, #0]
 8083990:	f006 fe2b 	bl	808a5ea <_ZN5Print5printEii>
    Serial.println(" ppm");
 8083994:	f007 fe56 	bl	808b644 <_Z16_fetch_usbserialv>
 8083998:	4920      	ldr	r1, [pc, #128]	; (8083a1c <_Z21serialGetPressureZerov+0xac>)
 808399a:	f006 fdba 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Pressure Zero\n\r");
 808399e:	f007 fe51 	bl	808b644 <_Z16_fetch_usbserialv>
 80839a2:	491f      	ldr	r1, [pc, #124]	; (8083a20 <_Z21serialGetPressureZerov+0xb0>)
 80839a4:	f006 fda2 	bl	808a4ec <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 80839a8:	f007 fe4c 	bl	808b644 <_Z16_fetch_usbserialv>
 80839ac:	f24c 3150 	movw	r1, #50000	; 0xc350
 80839b0:	f006 ff33 	bl	808a81a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80839b4:	f007 fe46 	bl	808b644 <_Z16_fetch_usbserialv>
 80839b8:	220d      	movs	r2, #13
 80839ba:	4601      	mov	r1, r0
 80839bc:	a802      	add	r0, sp, #8
 80839be:	f006 ff99 	bl	808a8f4 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 80839c2:	a802      	add	r0, sp, #8
 80839c4:	f006 fd44 	bl	808a450 <_ZNK6String5toIntEv>
 80839c8:	9001      	str	r0, [sp, #4]

    if(tempValue >= -1000 && tempValue < 1000){
 80839ca:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 80839ce:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 80839d2:	d215      	bcs.n	8083a00 <_Z21serialGetPressureZerov+0x90>
        Serial.print("\n\rNew Pressure zero: ");
 80839d4:	f007 fe36 	bl	808b644 <_Z16_fetch_usbserialv>
 80839d8:	4912      	ldr	r1, [pc, #72]	; (8083a24 <_Z21serialGetPressureZerov+0xb4>)
 80839da:	f006 fd87 	bl	808a4ec <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        pressure_zero = tempValue;
 80839de:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -1000 && tempValue < 1000){
        Serial.print("\n\rNew Pressure zero: ");
        Serial.println(tempValue);
 80839e0:	f007 fe30 	bl	808b644 <_Z16_fetch_usbserialv>
 80839e4:	9901      	ldr	r1, [sp, #4]
 80839e6:	220a      	movs	r2, #10
 80839e8:	f006 fe01 	bl	808a5ee <_ZN5Print7printlnEii>
        pressure_zero = tempValue;
 80839ec:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 80839f0:	602b      	str	r3, [r5, #0]
        EEPROM.put(PRESSURE_ZERO_MEM_ADDRESS, tempValue);
 80839f2:	f008 fa0b 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 80839f6:	4621      	mov	r1, r4
 80839f8:	2034      	movs	r0, #52	; 0x34
 80839fa:	f7fd f908 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 80839fe:	e004      	b.n	8083a0a <_Z21serialGetPressureZerov+0x9a>
    }else{
        Serial.println("\n\rInvalid value!");
 8083a00:	f007 fe20 	bl	808b644 <_Z16_fetch_usbserialv>
 8083a04:	4908      	ldr	r1, [pc, #32]	; (8083a28 <_Z21serialGetPressureZerov+0xb8>)
 8083a06:	f006 fd84 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.print("Current Pressure zero:");
    Serial.print(pressure_zero);
    Serial.println(" ppm");
    Serial.print("Enter new Pressure Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083a0a:	a802      	add	r0, sp, #8
 8083a0c:	f006 fb30 	bl	808a070 <_ZN6StringD1Ev>
        pressure_zero = tempValue;
        EEPROM.put(PRESSURE_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083a10:	b007      	add	sp, #28
 8083a12:	bd30      	pop	{r4, r5, pc}
 8083a14:	20000a30 	.word	0x20000a30
 8083a18:	080914e3 	.word	0x080914e3
 8083a1c:	08091195 	.word	0x08091195
 8083a20:	080914fa 	.word	0x080914fa
 8083a24:	08091514 	.word	0x08091514
 8083a28:	08090fe6 	.word	0x08090fe6

08083a2c <_Z22serialGetHumiditySlopev>:

void serialGetHumiditySlope(void){
 8083a2c:	b530      	push	{r4, r5, lr}
 8083a2e:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8083a30:	f007 fe08 	bl	808b644 <_Z16_fetch_usbserialv>
 8083a34:	f006 fd61 	bl	808a4fa <_ZN5Print7printlnEv>
    Serial.print("Current RH slope:");
 8083a38:	f007 fe04 	bl	808b644 <_Z16_fetch_usbserialv>
 8083a3c:	4932      	ldr	r1, [pc, #200]	; (8083b08 <_Z22serialGetHumiditySlopev+0xdc>)
 8083a3e:	f006 fd55 	bl	808a4ec <_ZN5Print5printEPKc>
    Serial.print(String(rh_slope, 2));
 8083a42:	f007 fdff 	bl	808b644 <_Z16_fetch_usbserialv>
 8083a46:	4605      	mov	r5, r0
 8083a48:	4c30      	ldr	r4, [pc, #192]	; (8083b0c <_Z22serialGetHumiditySlopev+0xe0>)
 8083a4a:	2202      	movs	r2, #2
 8083a4c:	6821      	ldr	r1, [r4, #0]
 8083a4e:	a806      	add	r0, sp, #24
 8083a50:	f006 fbef 	bl	808a232 <_ZN6StringC1Efi>
 8083a54:	9906      	ldr	r1, [sp, #24]
 8083a56:	4628      	mov	r0, r5
 8083a58:	f006 fd48 	bl	808a4ec <_ZN5Print5printEPKc>
 8083a5c:	a806      	add	r0, sp, #24
 8083a5e:	f006 fb07 	bl	808a070 <_ZN6StringD1Ev>
    Serial.println(" %");
 8083a62:	f007 fdef 	bl	808b644 <_Z16_fetch_usbserialv>
 8083a66:	492a      	ldr	r1, [pc, #168]	; (8083b10 <_Z22serialGetHumiditySlopev+0xe4>)
 8083a68:	f006 fd53 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new RH slope\n\r");
 8083a6c:	f007 fdea 	bl	808b644 <_Z16_fetch_usbserialv>
 8083a70:	4928      	ldr	r1, [pc, #160]	; (8083b14 <_Z22serialGetHumiditySlopev+0xe8>)
 8083a72:	f006 fd3b 	bl	808a4ec <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083a76:	f007 fde5 	bl	808b644 <_Z16_fetch_usbserialv>
 8083a7a:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083a7e:	f006 fecc 	bl	808a81a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083a82:	f007 fddf 	bl	808b644 <_Z16_fetch_usbserialv>
 8083a86:	220d      	movs	r2, #13
 8083a88:	4601      	mov	r1, r0
 8083a8a:	a802      	add	r0, sp, #8
 8083a8c:	f006 ff32 	bl	808a8f4 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083a90:	a802      	add	r0, sp, #8
 8083a92:	f006 fce2 	bl	808a45a <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 10){
 8083a96:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(rh_slope, 2));
    Serial.println(" %");
    Serial.print("Enter new RH slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 8083a9a:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 10){
 8083a9c:	f009 fb34 	bl	808d108 <__aeabi_fcmpge>
 8083aa0:	b338      	cbz	r0, 8083af2 <_Z22serialGetHumiditySlopev+0xc6>
 8083aa2:	491d      	ldr	r1, [pc, #116]	; (8083b18 <_Z22serialGetHumiditySlopev+0xec>)
 8083aa4:	4628      	mov	r0, r5
 8083aa6:	f009 fb1b 	bl	808d0e0 <__aeabi_fcmplt>
 8083aaa:	b310      	cbz	r0, 8083af2 <_Z22serialGetHumiditySlopev+0xc6>
        rh_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 8083aac:	491b      	ldr	r1, [pc, #108]	; (8083b1c <_Z22serialGetHumiditySlopev+0xf0>)
 8083aae:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 10){
        rh_slope = tempfloat;
 8083ab0:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 8083ab2:	f009 f977 	bl	808cda4 <__aeabi_fmul>
 8083ab6:	f009 fb3b 	bl	808d130 <__aeabi_f2iz>
 8083aba:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew RH slope: ");
 8083abc:	f007 fdc2 	bl	808b644 <_Z16_fetch_usbserialv>
 8083ac0:	4917      	ldr	r1, [pc, #92]	; (8083b20 <_Z22serialGetHumiditySlopev+0xf4>)
 8083ac2:	f006 fd13 	bl	808a4ec <_ZN5Print5printEPKc>
        Serial.println(String(rh_slope,2));
 8083ac6:	f007 fdbd 	bl	808b644 <_Z16_fetch_usbserialv>
 8083aca:	4605      	mov	r5, r0
 8083acc:	2202      	movs	r2, #2
 8083ace:	6821      	ldr	r1, [r4, #0]
 8083ad0:	a806      	add	r0, sp, #24
 8083ad2:	f006 fbae 	bl	808a232 <_ZN6StringC1Efi>
 8083ad6:	9906      	ldr	r1, [sp, #24]
 8083ad8:	4628      	mov	r0, r5
 8083ada:	f006 fd1a 	bl	808a512 <_ZN5Print7printlnEPKc>
 8083ade:	a806      	add	r0, sp, #24
 8083ae0:	f006 fac6 	bl	808a070 <_ZN6StringD1Ev>

        EEPROM.put(RH_SLOPE_MEM_ADDRESS, tempValue);
 8083ae4:	f008 f992 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8083ae8:	a901      	add	r1, sp, #4
 8083aea:	2040      	movs	r0, #64	; 0x40
 8083aec:	f7fd f88f 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 8083af0:	e004      	b.n	8083afc <_Z22serialGetHumiditySlopev+0xd0>
    }else{
        Serial.println("\n\rInvalid value!");
 8083af2:	f007 fda7 	bl	808b644 <_Z16_fetch_usbserialv>
 8083af6:	490b      	ldr	r1, [pc, #44]	; (8083b24 <_Z22serialGetHumiditySlopev+0xf8>)
 8083af8:	f006 fd0b 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.print("Current RH slope:");
    Serial.print(String(rh_slope, 2));
    Serial.println(" %");
    Serial.print("Enter new RH slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083afc:	a802      	add	r0, sp, #8
 8083afe:	f006 fab7 	bl	808a070 <_ZN6StringD1Ev>

        EEPROM.put(RH_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083b02:	b00b      	add	sp, #44	; 0x2c
 8083b04:	bd30      	pop	{r4, r5, pc}
 8083b06:	bf00      	nop
 8083b08:	0809152a 	.word	0x0809152a
 8083b0c:	200006ec 	.word	0x200006ec
 8083b10:	0809153c 	.word	0x0809153c
 8083b14:	0809153f 	.word	0x0809153f
 8083b18:	41200000 	.word	0x41200000
 8083b1c:	42c80000 	.word	0x42c80000
 8083b20:	08091554 	.word	0x08091554
 8083b24:	08090fe6 	.word	0x08090fe6

08083b28 <_Z21serialGetHumidityZerov>:

void serialGetHumidityZero(void){
 8083b28:	b530      	push	{r4, r5, lr}
 8083b2a:	b087      	sub	sp, #28
    Serial.println();
 8083b2c:	f007 fd8a 	bl	808b644 <_Z16_fetch_usbserialv>
    Serial.print("Current RH zero:");
    Serial.print(rh_zero);
 8083b30:	4d25      	ldr	r5, [pc, #148]	; (8083bc8 <_Z21serialGetHumidityZerov+0xa0>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetHumidityZero(void){
    Serial.println();
 8083b32:	f006 fce2 	bl	808a4fa <_ZN5Print7printlnEv>
    Serial.print("Current RH zero:");
 8083b36:	f007 fd85 	bl	808b644 <_Z16_fetch_usbserialv>
 8083b3a:	4924      	ldr	r1, [pc, #144]	; (8083bcc <_Z21serialGetHumidityZerov+0xa4>)
 8083b3c:	f006 fcd6 	bl	808a4ec <_ZN5Print5printEPKc>
    Serial.print(rh_zero);
 8083b40:	f007 fd80 	bl	808b644 <_Z16_fetch_usbserialv>
 8083b44:	220a      	movs	r2, #10
 8083b46:	6829      	ldr	r1, [r5, #0]
 8083b48:	f006 fd4f 	bl	808a5ea <_ZN5Print5printEii>
    Serial.println(" %");
 8083b4c:	f007 fd7a 	bl	808b644 <_Z16_fetch_usbserialv>
 8083b50:	491f      	ldr	r1, [pc, #124]	; (8083bd0 <_Z21serialGetHumidityZerov+0xa8>)
 8083b52:	f006 fcde 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new RH Zero\n\r");
 8083b56:	f007 fd75 	bl	808b644 <_Z16_fetch_usbserialv>
 8083b5a:	491e      	ldr	r1, [pc, #120]	; (8083bd4 <_Z21serialGetHumidityZerov+0xac>)
 8083b5c:	f006 fcc6 	bl	808a4ec <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083b60:	f007 fd70 	bl	808b644 <_Z16_fetch_usbserialv>
 8083b64:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083b68:	f006 fe57 	bl	808a81a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083b6c:	f007 fd6a 	bl	808b644 <_Z16_fetch_usbserialv>
 8083b70:	220d      	movs	r2, #13
 8083b72:	4601      	mov	r1, r0
 8083b74:	a802      	add	r0, sp, #8
 8083b76:	f006 febd 	bl	808a8f4 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8083b7a:	a802      	add	r0, sp, #8
 8083b7c:	f006 fc68 	bl	808a450 <_ZNK6String5toIntEv>
 8083b80:	9001      	str	r0, [sp, #4]

    if(tempValue >= -50 && tempValue < 50){
 8083b82:	3032      	adds	r0, #50	; 0x32
 8083b84:	2863      	cmp	r0, #99	; 0x63
 8083b86:	d815      	bhi.n	8083bb4 <_Z21serialGetHumidityZerov+0x8c>
        Serial.print("\n\rNew RH zero: ");
 8083b88:	f007 fd5c 	bl	808b644 <_Z16_fetch_usbserialv>
 8083b8c:	4912      	ldr	r1, [pc, #72]	; (8083bd8 <_Z21serialGetHumidityZerov+0xb0>)
 8083b8e:	f006 fcad 	bl	808a4ec <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        rh_zero = tempValue;
 8083b92:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -50 && tempValue < 50){
        Serial.print("\n\rNew RH zero: ");
        Serial.println(tempValue);
 8083b94:	f007 fd56 	bl	808b644 <_Z16_fetch_usbserialv>
 8083b98:	9901      	ldr	r1, [sp, #4]
 8083b9a:	220a      	movs	r2, #10
 8083b9c:	f006 fd27 	bl	808a5ee <_ZN5Print7printlnEii>
        rh_zero = tempValue;
 8083ba0:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8083ba4:	602b      	str	r3, [r5, #0]
        EEPROM.put(RH_ZERO_MEM_ADDRESS, tempValue);
 8083ba6:	f008 f931 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8083baa:	4621      	mov	r1, r4
 8083bac:	203c      	movs	r0, #60	; 0x3c
 8083bae:	f7fd f82e 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 8083bb2:	e004      	b.n	8083bbe <_Z21serialGetHumidityZerov+0x96>
    }else{
        Serial.println("\n\rInvalid value!");
 8083bb4:	f007 fd46 	bl	808b644 <_Z16_fetch_usbserialv>
 8083bb8:	4908      	ldr	r1, [pc, #32]	; (8083bdc <_Z21serialGetHumidityZerov+0xb4>)
 8083bba:	f006 fcaa 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.print("Current RH zero:");
    Serial.print(rh_zero);
    Serial.println(" %");
    Serial.print("Enter new RH Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083bbe:	a802      	add	r0, sp, #8
 8083bc0:	f006 fa56 	bl	808a070 <_ZN6StringD1Ev>
        rh_zero = tempValue;
        EEPROM.put(RH_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083bc4:	b007      	add	sp, #28
 8083bc6:	bd30      	pop	{r4, r5, pc}
 8083bc8:	20000770 	.word	0x20000770
 8083bcc:	08091565 	.word	0x08091565
 8083bd0:	0809153c 	.word	0x0809153c
 8083bd4:	08091576 	.word	0x08091576
 8083bd8:	0809158a 	.word	0x0809158a
 8083bdc:	08090fe6 	.word	0x08090fe6

08083be0 <_Z19serialGetLowerLimitv>:
    }else{
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetLowerLimit(void){
 8083be0:	b530      	push	{r4, r5, lr}
 8083be2:	b089      	sub	sp, #36	; 0x24
    Serial.println();
 8083be4:	f007 fd2e 	bl	808b644 <_Z16_fetch_usbserialv>
    Serial.print("Current lower limit:");
    Serial.println(gas_lower_limit);
 8083be8:	4c35      	ldr	r4, [pc, #212]	; (8083cc0 <_Z19serialGetLowerLimitv+0xe0>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetLowerLimit(void){
    Serial.println();
 8083bea:	f006 fc86 	bl	808a4fa <_ZN5Print7printlnEv>
    Serial.print("Current lower limit:");
 8083bee:	f007 fd29 	bl	808b644 <_Z16_fetch_usbserialv>
 8083bf2:	4934      	ldr	r1, [pc, #208]	; (8083cc4 <_Z19serialGetLowerLimitv+0xe4>)
 8083bf4:	f006 fc7a 	bl	808a4ec <_ZN5Print5printEPKc>
    Serial.println(gas_lower_limit);
 8083bf8:	f007 fd24 	bl	808b644 <_Z16_fetch_usbserialv>
 8083bfc:	220a      	movs	r2, #10
 8083bfe:	6821      	ldr	r1, [r4, #0]
 8083c00:	f006 fcf5 	bl	808a5ee <_ZN5Print7printlnEii>
    Serial.println("Please enter password in order to change the lower limit");
 8083c04:	f007 fd1e 	bl	808b644 <_Z16_fetch_usbserialv>
 8083c08:	492f      	ldr	r1, [pc, #188]	; (8083cc8 <_Z19serialGetLowerLimitv+0xe8>)
 8083c0a:	f006 fc82 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8083c0e:	f007 fd19 	bl	808b644 <_Z16_fetch_usbserialv>
 8083c12:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083c16:	f006 fe00 	bl	808a81a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083c1a:	f007 fd13 	bl	808b644 <_Z16_fetch_usbserialv>
 8083c1e:	220d      	movs	r2, #13
 8083c20:	4601      	mov	r1, r0
 8083c22:	4668      	mov	r0, sp
 8083c24:	f006 fe66 	bl	808a8f4 <_ZN6Stream15readStringUntilEc>
 8083c28:	4928      	ldr	r1, [pc, #160]	; (8083ccc <_Z19serialGetLowerLimitv+0xec>)
 8083c2a:	4668      	mov	r0, sp
 8083c2c:	f006 fbbc 	bl	808a3a8 <_ZNK6String6equalsEPKc>


    if(tempString == "bould"){
 8083c30:	2800      	cmp	r0, #0
 8083c32:	d03a      	beq.n	8083caa <_Z19serialGetLowerLimitv+0xca>
        Serial.println("Password correct!");
 8083c34:	f007 fd06 	bl	808b644 <_Z16_fetch_usbserialv>
 8083c38:	4925      	ldr	r1, [pc, #148]	; (8083cd0 <_Z19serialGetLowerLimitv+0xf0>)
 8083c3a:	f006 fc6a 	bl	808a512 <_ZN5Print7printlnEPKc>
        Serial.println("Enter new lower limit:\n\r");
 8083c3e:	f007 fd01 	bl	808b644 <_Z16_fetch_usbserialv>
 8083c42:	4924      	ldr	r1, [pc, #144]	; (8083cd4 <_Z19serialGetLowerLimitv+0xf4>)
 8083c44:	f006 fc65 	bl	808a512 <_ZN5Print7printlnEPKc>
        String tempString = Serial.readStringUntil('\r');
 8083c48:	f007 fcfc 	bl	808b644 <_Z16_fetch_usbserialv>
 8083c4c:	220d      	movs	r2, #13
 8083c4e:	4601      	mov	r1, r0
 8083c50:	a804      	add	r0, sp, #16
 8083c52:	f006 fe4f 	bl	808a8f4 <_ZN6Stream15readStringUntilEc>
        int tempValue = tempString.toInt();
 8083c56:	a804      	add	r0, sp, #16
 8083c58:	f006 fbfa 	bl	808a450 <_ZNK6String5toIntEv>
 8083c5c:	4605      	mov	r5, r0
        Serial.println("");
 8083c5e:	f007 fcf1 	bl	808b644 <_Z16_fetch_usbserialv>
 8083c62:	491d      	ldr	r1, [pc, #116]	; (8083cd8 <_Z19serialGetLowerLimitv+0xf8>)
 8083c64:	f006 fc55 	bl	808a512 <_ZN5Print7printlnEPKc>
        if(tempValue > 0 && tempValue < 20000){
 8083c68:	f644 631e 	movw	r3, #19998	; 0x4e1e
 8083c6c:	1e6a      	subs	r2, r5, #1
 8083c6e:	429a      	cmp	r2, r3
 8083c70:	d812      	bhi.n	8083c98 <_Z19serialGetLowerLimitv+0xb8>
            Serial.print("\n\rNew lower limit:");
 8083c72:	f007 fce7 	bl	808b644 <_Z16_fetch_usbserialv>
 8083c76:	4919      	ldr	r1, [pc, #100]	; (8083cdc <_Z19serialGetLowerLimitv+0xfc>)
 8083c78:	f006 fc38 	bl	808a4ec <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 8083c7c:	f007 fce2 	bl	808b644 <_Z16_fetch_usbserialv>
 8083c80:	4629      	mov	r1, r5
 8083c82:	220a      	movs	r2, #10
 8083c84:	f006 fcb3 	bl	808a5ee <_ZN5Print7printlnEii>
            gas_lower_limit = tempValue;
 8083c88:	6025      	str	r5, [r4, #0]
            EEPROM.put(GAS_LOWER_LIMIT_MEM_ADDRESS, gas_lower_limit);
 8083c8a:	f008 f8bf 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8083c8e:	4621      	mov	r1, r4
 8083c90:	204c      	movs	r0, #76	; 0x4c
 8083c92:	f7fc ffbc 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 8083c96:	e004      	b.n	8083ca2 <_Z19serialGetLowerLimitv+0xc2>
        }else{
            Serial.println("\n\rInvalid value!");
 8083c98:	f007 fcd4 	bl	808b644 <_Z16_fetch_usbserialv>
 8083c9c:	4910      	ldr	r1, [pc, #64]	; (8083ce0 <_Z19serialGetLowerLimitv+0x100>)
 8083c9e:	f006 fc38 	bl	808a512 <_ZN5Print7printlnEPKc>


    if(tempString == "bould"){
        Serial.println("Password correct!");
        Serial.println("Enter new lower limit:\n\r");
        String tempString = Serial.readStringUntil('\r');
 8083ca2:	a804      	add	r0, sp, #16
 8083ca4:	f006 f9e4 	bl	808a070 <_ZN6StringD1Ev>
 8083ca8:	e004      	b.n	8083cb4 <_Z19serialGetLowerLimitv+0xd4>
            EEPROM.put(GAS_LOWER_LIMIT_MEM_ADDRESS, gas_lower_limit);
        }else{
            Serial.println("\n\rInvalid value!");
        }
    }else{
        Serial.println("\n\rIncorrect password!");
 8083caa:	f007 fccb 	bl	808b644 <_Z16_fetch_usbserialv>
 8083cae:	490d      	ldr	r1, [pc, #52]	; (8083ce4 <_Z19serialGetLowerLimitv+0x104>)
 8083cb0:	f006 fc2f 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println();
    Serial.print("Current lower limit:");
    Serial.println(gas_lower_limit);
    Serial.println("Please enter password in order to change the lower limit");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083cb4:	4668      	mov	r0, sp
 8083cb6:	f006 f9db 	bl	808a070 <_ZN6StringD1Ev>
            Serial.println("\n\rInvalid value!");
        }
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
 8083cba:	b009      	add	sp, #36	; 0x24
 8083cbc:	bd30      	pop	{r4, r5, pc}
 8083cbe:	bf00      	nop
 8083cc0:	20000090 	.word	0x20000090
 8083cc4:	080915e2 	.word	0x080915e2
 8083cc8:	080915f7 	.word	0x080915f7
 8083ccc:	08090e3c 	.word	0x08090e3c
 8083cd0:	08090e42 	.word	0x08090e42
 8083cd4:	08091630 	.word	0x08091630
 8083cd8:	08092fdc 	.word	0x08092fdc
 8083cdc:	08091649 	.word	0x08091649
 8083ce0:	08090fe6 	.word	0x08090fe6
 8083ce4:	08090f67 	.word	0x08090f67

08083ce8 <_Z19serialGetUpperLimitv>:
void serialGetUpperLimit(void){
 8083ce8:	b530      	push	{r4, r5, lr}
 8083cea:	b089      	sub	sp, #36	; 0x24
    Serial.println();
 8083cec:	f007 fcaa 	bl	808b644 <_Z16_fetch_usbserialv>
    Serial.print("Current upper limit:");
    Serial.println(gas_upper_limit);
 8083cf0:	4c35      	ldr	r4, [pc, #212]	; (8083dc8 <_Z19serialGetUpperLimitv+0xe0>)
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
void serialGetUpperLimit(void){
    Serial.println();
 8083cf2:	f006 fc02 	bl	808a4fa <_ZN5Print7printlnEv>
    Serial.print("Current upper limit:");
 8083cf6:	f007 fca5 	bl	808b644 <_Z16_fetch_usbserialv>
 8083cfa:	4934      	ldr	r1, [pc, #208]	; (8083dcc <_Z19serialGetUpperLimitv+0xe4>)
 8083cfc:	f006 fbf6 	bl	808a4ec <_ZN5Print5printEPKc>
    Serial.println(gas_upper_limit);
 8083d00:	f007 fca0 	bl	808b644 <_Z16_fetch_usbserialv>
 8083d04:	220a      	movs	r2, #10
 8083d06:	6821      	ldr	r1, [r4, #0]
 8083d08:	f006 fc71 	bl	808a5ee <_ZN5Print7printlnEii>
    Serial.println("Please enter password in order to change the upper limit");
 8083d0c:	f007 fc9a 	bl	808b644 <_Z16_fetch_usbserialv>
 8083d10:	492f      	ldr	r1, [pc, #188]	; (8083dd0 <_Z19serialGetUpperLimitv+0xe8>)
 8083d12:	f006 fbfe 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8083d16:	f007 fc95 	bl	808b644 <_Z16_fetch_usbserialv>
 8083d1a:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083d1e:	f006 fd7c 	bl	808a81a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083d22:	f007 fc8f 	bl	808b644 <_Z16_fetch_usbserialv>
 8083d26:	220d      	movs	r2, #13
 8083d28:	4601      	mov	r1, r0
 8083d2a:	4668      	mov	r0, sp
 8083d2c:	f006 fde2 	bl	808a8f4 <_ZN6Stream15readStringUntilEc>
 8083d30:	4928      	ldr	r1, [pc, #160]	; (8083dd4 <_Z19serialGetUpperLimitv+0xec>)
 8083d32:	4668      	mov	r0, sp
 8083d34:	f006 fb38 	bl	808a3a8 <_ZNK6String6equalsEPKc>


    if(tempString == "bould"){
 8083d38:	2800      	cmp	r0, #0
 8083d3a:	d03a      	beq.n	8083db2 <_Z19serialGetUpperLimitv+0xca>
        Serial.println("Password correct!");
 8083d3c:	f007 fc82 	bl	808b644 <_Z16_fetch_usbserialv>
 8083d40:	4925      	ldr	r1, [pc, #148]	; (8083dd8 <_Z19serialGetUpperLimitv+0xf0>)
 8083d42:	f006 fbe6 	bl	808a512 <_ZN5Print7printlnEPKc>
        Serial.println("Enter new upper limit:\n\r");
 8083d46:	f007 fc7d 	bl	808b644 <_Z16_fetch_usbserialv>
 8083d4a:	4924      	ldr	r1, [pc, #144]	; (8083ddc <_Z19serialGetUpperLimitv+0xf4>)
 8083d4c:	f006 fbe1 	bl	808a512 <_ZN5Print7printlnEPKc>
        String tempString = Serial.readStringUntil('\r');
 8083d50:	f007 fc78 	bl	808b644 <_Z16_fetch_usbserialv>
 8083d54:	220d      	movs	r2, #13
 8083d56:	4601      	mov	r1, r0
 8083d58:	a804      	add	r0, sp, #16
 8083d5a:	f006 fdcb 	bl	808a8f4 <_ZN6Stream15readStringUntilEc>
        int tempValue = tempString.toInt();
 8083d5e:	a804      	add	r0, sp, #16
 8083d60:	f006 fb76 	bl	808a450 <_ZNK6String5toIntEv>
 8083d64:	4605      	mov	r5, r0
        Serial.println("");
 8083d66:	f007 fc6d 	bl	808b644 <_Z16_fetch_usbserialv>
 8083d6a:	491d      	ldr	r1, [pc, #116]	; (8083de0 <_Z19serialGetUpperLimitv+0xf8>)
 8083d6c:	f006 fbd1 	bl	808a512 <_ZN5Print7printlnEPKc>
        if(tempValue > 0 && tempValue < 50000){
 8083d70:	f24c 334e 	movw	r3, #49998	; 0xc34e
 8083d74:	1e6a      	subs	r2, r5, #1
 8083d76:	429a      	cmp	r2, r3
 8083d78:	d812      	bhi.n	8083da0 <_Z19serialGetUpperLimitv+0xb8>
            Serial.print("\n\rNew upper limit:");
 8083d7a:	f007 fc63 	bl	808b644 <_Z16_fetch_usbserialv>
 8083d7e:	4919      	ldr	r1, [pc, #100]	; (8083de4 <_Z19serialGetUpperLimitv+0xfc>)
 8083d80:	f006 fbb4 	bl	808a4ec <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 8083d84:	f007 fc5e 	bl	808b644 <_Z16_fetch_usbserialv>
 8083d88:	4629      	mov	r1, r5
 8083d8a:	220a      	movs	r2, #10
 8083d8c:	f006 fc2f 	bl	808a5ee <_ZN5Print7printlnEii>
            gas_upper_limit = tempValue;
 8083d90:	6025      	str	r5, [r4, #0]
            EEPROM.put(GAS_UPPER_LIMIT_MEM_ADDRESS, gas_upper_limit);
 8083d92:	f008 f83b 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8083d96:	4621      	mov	r1, r4
 8083d98:	2050      	movs	r0, #80	; 0x50
 8083d9a:	f7fc ff38 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 8083d9e:	e004      	b.n	8083daa <_Z19serialGetUpperLimitv+0xc2>
        }else{
            Serial.println("\n\rInvalid value!");
 8083da0:	f007 fc50 	bl	808b644 <_Z16_fetch_usbserialv>
 8083da4:	4910      	ldr	r1, [pc, #64]	; (8083de8 <_Z19serialGetUpperLimitv+0x100>)
 8083da6:	f006 fbb4 	bl	808a512 <_ZN5Print7printlnEPKc>


    if(tempString == "bould"){
        Serial.println("Password correct!");
        Serial.println("Enter new upper limit:\n\r");
        String tempString = Serial.readStringUntil('\r');
 8083daa:	a804      	add	r0, sp, #16
 8083dac:	f006 f960 	bl	808a070 <_ZN6StringD1Ev>
 8083db0:	e004      	b.n	8083dbc <_Z19serialGetUpperLimitv+0xd4>
            EEPROM.put(GAS_UPPER_LIMIT_MEM_ADDRESS, gas_upper_limit);
        }else{
            Serial.println("\n\rInvalid value!");
        }
    }else{
        Serial.println("\n\rIncorrect password!");
 8083db2:	f007 fc47 	bl	808b644 <_Z16_fetch_usbserialv>
 8083db6:	490d      	ldr	r1, [pc, #52]	; (8083dec <_Z19serialGetUpperLimitv+0x104>)
 8083db8:	f006 fbab 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println();
    Serial.print("Current upper limit:");
    Serial.println(gas_upper_limit);
    Serial.println("Please enter password in order to change the upper limit");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083dbc:	4668      	mov	r0, sp
 8083dbe:	f006 f957 	bl	808a070 <_ZN6StringD1Ev>
            Serial.println("\n\rInvalid value!");
        }
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
 8083dc2:	b009      	add	sp, #36	; 0x24
 8083dc4:	bd30      	pop	{r4, r5, pc}
 8083dc6:	bf00      	nop
 8083dc8:	2000008c 	.word	0x2000008c
 8083dcc:	0809165c 	.word	0x0809165c
 8083dd0:	08091671 	.word	0x08091671
 8083dd4:	08090e3c 	.word	0x08090e3c
 8083dd8:	08090e42 	.word	0x08090e42
 8083ddc:	080916aa 	.word	0x080916aa
 8083de0:	08092fdc 	.word	0x08092fdc
 8083de4:	080916c3 	.word	0x080916c3
 8083de8:	08090fe6 	.word	0x08090fe6
 8083dec:	08090f67 	.word	0x08090f67

08083df0 <_Z23outputSerialMenuOptionsv>:
    while(!Serial.available()){
        CO_float = readCO();
        Serial.printf("CO: %1.3f ppm\n\r", CO_float);
    }
}
void outputSerialMenuOptions(void){
 8083df0:	b508      	push	{r3, lr}
    Serial.println("Command:  Description");
 8083df2:	f007 fc27 	bl	808b644 <_Z16_fetch_usbserialv>
 8083df6:	4989      	ldr	r1, [pc, #548]	; (808401c <_Z23outputSerialMenuOptionsv+0x22c>)
 8083df8:	f006 fb8b 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("a:  Adjust CO2 slope");
 8083dfc:	f007 fc22 	bl	808b644 <_Z16_fetch_usbserialv>
 8083e00:	4987      	ldr	r1, [pc, #540]	; (8084020 <_Z23outputSerialMenuOptionsv+0x230>)
 8083e02:	f006 fb86 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("b:  Adjust CO2 zero");
 8083e06:	f007 fc1d 	bl	808b644 <_Z16_fetch_usbserialv>
 8083e0a:	4986      	ldr	r1, [pc, #536]	; (8084024 <_Z23outputSerialMenuOptionsv+0x234>)
 8083e0c:	f006 fb81 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("c:  Adjust CO slope");
 8083e10:	f007 fc18 	bl	808b644 <_Z16_fetch_usbserialv>
 8083e14:	4984      	ldr	r1, [pc, #528]	; (8084028 <_Z23outputSerialMenuOptionsv+0x238>)
 8083e16:	f006 fb7c 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("d:  Adjust CO zero");
 8083e1a:	f007 fc13 	bl	808b644 <_Z16_fetch_usbserialv>
 8083e1e:	4983      	ldr	r1, [pc, #524]	; (808402c <_Z23outputSerialMenuOptionsv+0x23c>)
 8083e20:	f006 fb77 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("e:  Adjust PM1 slope");
 8083e24:	f007 fc0e 	bl	808b644 <_Z16_fetch_usbserialv>
 8083e28:	4981      	ldr	r1, [pc, #516]	; (8084030 <_Z23outputSerialMenuOptionsv+0x240>)
 8083e2a:	f006 fb72 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("f:  Adjust PM1 zero");
 8083e2e:	f007 fc09 	bl	808b644 <_Z16_fetch_usbserialv>
 8083e32:	4980      	ldr	r1, [pc, #512]	; (8084034 <_Z23outputSerialMenuOptionsv+0x244>)
 8083e34:	f006 fb6d 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("g:  Adjust PM2.5 slope");
 8083e38:	f007 fc04 	bl	808b644 <_Z16_fetch_usbserialv>
 8083e3c:	497e      	ldr	r1, [pc, #504]	; (8084038 <_Z23outputSerialMenuOptionsv+0x248>)
 8083e3e:	f006 fb68 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("h:  Adjust PM2.5 zero");
 8083e42:	f007 fbff 	bl	808b644 <_Z16_fetch_usbserialv>
 8083e46:	497d      	ldr	r1, [pc, #500]	; (808403c <_Z23outputSerialMenuOptionsv+0x24c>)
 8083e48:	f006 fb63 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("i:  Adjust PM10 slope");
 8083e4c:	f007 fbfa 	bl	808b644 <_Z16_fetch_usbserialv>
 8083e50:	497b      	ldr	r1, [pc, #492]	; (8084040 <_Z23outputSerialMenuOptionsv+0x250>)
 8083e52:	f006 fb5e 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("j:  Adjust PM10 zero");
 8083e56:	f007 fbf5 	bl	808b644 <_Z16_fetch_usbserialv>
 8083e5a:	497a      	ldr	r1, [pc, #488]	; (8084044 <_Z23outputSerialMenuOptionsv+0x254>)
 8083e5c:	f006 fb59 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("k:  Adjust Temperature slope");
 8083e60:	f007 fbf0 	bl	808b644 <_Z16_fetch_usbserialv>
 8083e64:	4978      	ldr	r1, [pc, #480]	; (8084048 <_Z23outputSerialMenuOptionsv+0x258>)
 8083e66:	f006 fb54 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("l:  Adjust Temperature zero");
 8083e6a:	f007 fbeb 	bl	808b644 <_Z16_fetch_usbserialv>
 8083e6e:	4977      	ldr	r1, [pc, #476]	; (808404c <_Z23outputSerialMenuOptionsv+0x25c>)
 8083e70:	f006 fb4f 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("m:  Adjust Pressure slope");
 8083e74:	f007 fbe6 	bl	808b644 <_Z16_fetch_usbserialv>
 8083e78:	4975      	ldr	r1, [pc, #468]	; (8084050 <_Z23outputSerialMenuOptionsv+0x260>)
 8083e7a:	f006 fb4a 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("n:  Adjust Pressure zero");
 8083e7e:	f007 fbe1 	bl	808b644 <_Z16_fetch_usbserialv>
 8083e82:	4974      	ldr	r1, [pc, #464]	; (8084054 <_Z23outputSerialMenuOptionsv+0x264>)
 8083e84:	f006 fb45 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("o:  Adjust Humidity slope");
 8083e88:	f007 fbdc 	bl	808b644 <_Z16_fetch_usbserialv>
 8083e8c:	4972      	ldr	r1, [pc, #456]	; (8084058 <_Z23outputSerialMenuOptionsv+0x268>)
 8083e8e:	f006 fb40 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("p:  Adjust Humidity zero");
 8083e92:	f007 fbd7 	bl	808b644 <_Z16_fetch_usbserialv>
 8083e96:	4971      	ldr	r1, [pc, #452]	; (808405c <_Z23outputSerialMenuOptionsv+0x26c>)
 8083e98:	f006 fb3b 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("q:  Enable serial debugging");
 8083e9c:	f007 fbd2 	bl	808b644 <_Z16_fetch_usbserialv>
 8083ea0:	496f      	ldr	r1, [pc, #444]	; (8084060 <_Z23outputSerialMenuOptionsv+0x270>)
 8083ea2:	f006 fb36 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("r:  Disable serial debugging");
 8083ea6:	f007 fbcd 	bl	808b644 <_Z16_fetch_usbserialv>
 8083eaa:	496e      	ldr	r1, [pc, #440]	; (8084064 <_Z23outputSerialMenuOptionsv+0x274>)
 8083eac:	f006 fb31 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("s:  Output header string");
 8083eb0:	f007 fbc8 	bl	808b644 <_Z16_fetch_usbserialv>
 8083eb4:	496c      	ldr	r1, [pc, #432]	; (8084068 <_Z23outputSerialMenuOptionsv+0x278>)
 8083eb6:	f006 fb2c 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("t:  Enter new time and date");
 8083eba:	f007 fbc3 	bl	808b644 <_Z16_fetch_usbserialv>
 8083ebe:	496b      	ldr	r1, [pc, #428]	; (808406c <_Z23outputSerialMenuOptionsv+0x27c>)
 8083ec0:	f006 fb27 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("u:  Enter new time zone");
 8083ec4:	f007 fbbe 	bl	808b644 <_Z16_fetch_usbserialv>
 8083ec8:	4969      	ldr	r1, [pc, #420]	; (8084070 <_Z23outputSerialMenuOptionsv+0x280>)
 8083eca:	f006 fb22 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("v:  Adjust the Device ID");
 8083ece:	f007 fbb9 	bl	808b644 <_Z16_fetch_usbserialv>
 8083ed2:	4968      	ldr	r1, [pc, #416]	; (8084074 <_Z23outputSerialMenuOptionsv+0x284>)
 8083ed4:	f006 fb1d 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("w:  Get wifi credentials");
 8083ed8:	f007 fbb4 	bl	808b644 <_Z16_fetch_usbserialv>
 8083edc:	4966      	ldr	r1, [pc, #408]	; (8084078 <_Z23outputSerialMenuOptionsv+0x288>)
 8083ede:	f006 fb18 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("y:  Enable cellular");
 8083ee2:	f007 fbaf 	bl	808b644 <_Z16_fetch_usbserialv>
 8083ee6:	4965      	ldr	r1, [pc, #404]	; (808407c <_Z23outputSerialMenuOptionsv+0x28c>)
 8083ee8:	f006 fb13 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("z:  Disable cellular");
 8083eec:	f007 fbaa 	bl	808b644 <_Z16_fetch_usbserialv>
 8083ef0:	4963      	ldr	r1, [pc, #396]	; (8084080 <_Z23outputSerialMenuOptionsv+0x290>)
 8083ef2:	f006 fb0e 	bl	808a512 <_ZN5Print7printlnEPKc>
    //Serial.println("1:  Adjust gas lower limit");
    //Serial.println("2:  Adjust gas upper limit");
    Serial.println("3:  Get build version");
 8083ef6:	f007 fba5 	bl	808b644 <_Z16_fetch_usbserialv>
 8083efa:	4962      	ldr	r1, [pc, #392]	; (8084084 <_Z23outputSerialMenuOptionsv+0x294>)
 8083efc:	f006 fb09 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("4:  Enable Ozone");
 8083f00:	f007 fba0 	bl	808b644 <_Z16_fetch_usbserialv>
 8083f04:	4960      	ldr	r1, [pc, #384]	; (8084088 <_Z23outputSerialMenuOptionsv+0x298>)
 8083f06:	f006 fb04 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("5:  Disable Ozone");
 8083f0a:	f007 fb9b 	bl	808b644 <_Z16_fetch_usbserialv>
 8083f0e:	495f      	ldr	r1, [pc, #380]	; (808408c <_Z23outputSerialMenuOptionsv+0x29c>)
 8083f10:	f006 faff 	bl	808a512 <_ZN5Print7printlnEPKc>
    //Serial.println("6:  Enable VOC's");
    //Serial.println("7:  Disable VOC's");
    Serial.println("8:  Output the PMIC system configuration");
 8083f14:	f007 fb96 	bl	808b644 <_Z16_fetch_usbserialv>
 8083f18:	495d      	ldr	r1, [pc, #372]	; (8084090 <_Z23outputSerialMenuOptionsv+0x2a0>)
 8083f1a:	f006 fafa 	bl	808a512 <_ZN5Print7printlnEPKc>
    //Serial.println("9:  Increase the charge current by 64 mA");
    //Serial.println("0:  Increase the current input limit by 100 mA");
    Serial.println("A:  Ouptput CO constantly and rapidly");
 8083f1e:	f007 fb91 	bl	808b644 <_Z16_fetch_usbserialv>
 8083f22:	495c      	ldr	r1, [pc, #368]	; (8084094 <_Z23outputSerialMenuOptionsv+0x2a4>)
 8083f24:	f006 faf5 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("B:  Output PM constantly and rapidly");
 8083f28:	f007 fb8c 	bl	808b644 <_Z16_fetch_usbserialv>
 8083f2c:	495a      	ldr	r1, [pc, #360]	; (8084098 <_Z23outputSerialMenuOptionsv+0x2a8>)
 8083f2e:	f006 faf0 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("C:  Change temperature units to Celcius");
 8083f32:	f007 fb87 	bl	808b644 <_Z16_fetch_usbserialv>
 8083f36:	4959      	ldr	r1, [pc, #356]	; (808409c <_Z23outputSerialMenuOptionsv+0x2ac>)
 8083f38:	f006 faeb 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("D:  Disable TMP36 temperature sensor and use BME680 temperature");
 8083f3c:	f007 fb82 	bl	808b644 <_Z16_fetch_usbserialv>
 8083f40:	4957      	ldr	r1, [pc, #348]	; (80840a0 <_Z23outputSerialMenuOptionsv+0x2b0>)
 8083f42:	f006 fae6 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("E:  Enable TMP36 temperature sensor and disable BME680 temperature");
 8083f46:	f007 fb7d 	bl	808b644 <_Z16_fetch_usbserialv>
 8083f4a:	4956      	ldr	r1, [pc, #344]	; (80840a4 <_Z23outputSerialMenuOptionsv+0x2b4>)
 8083f4c:	f006 fae1 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("F:  Change temperature units to Farenheit");
 8083f50:	f007 fb78 	bl	808b644 <_Z16_fetch_usbserialv>
 8083f54:	4954      	ldr	r1, [pc, #336]	; (80840a8 <_Z23outputSerialMenuOptionsv+0x2b8>)
 8083f56:	f006 fadc 	bl	808a512 <_ZN5Print7printlnEPKc>
    //Serial.println("G:  Read ozone from analog input (not digitally - board dependent)");
    //Serial.println("H:  Read ozone");
    Serial.println("I:  Adjust frequency for uploading through cellular");
 8083f5a:	f007 fb73 	bl	808b644 <_Z16_fetch_usbserialv>
 8083f5e:	4953      	ldr	r1, [pc, #332]	; (80840ac <_Z23outputSerialMenuOptionsv+0x2bc>)
 8083f60:	f006 fad7 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("J:  Reset ESP, CO2, Plantower");
 8083f64:	f007 fb6e 	bl	808b644 <_Z16_fetch_usbserialv>
 8083f68:	4951      	ldr	r1, [pc, #324]	; (80840b0 <_Z23outputSerialMenuOptionsv+0x2c0>)
 8083f6a:	f006 fad2 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("K:  Continuous serial output of GPS");
 8083f6e:	f007 fb69 	bl	808b644 <_Z16_fetch_usbserialv>
 8083f72:	4950      	ldr	r1, [pc, #320]	; (80840b4 <_Z23outputSerialMenuOptionsv+0x2c4>)
 8083f74:	f006 facd 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("L:  Write default settings");
 8083f78:	f007 fb64 	bl	808b644 <_Z16_fetch_usbserialv>
 8083f7c:	494e      	ldr	r1, [pc, #312]	; (80840b8 <_Z23outputSerialMenuOptionsv+0x2c8>)
 8083f7e:	f006 fac8 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("M:  Enable 20% battery threshold limiting");
 8083f82:	f007 fb5f 	bl	808b644 <_Z16_fetch_usbserialv>
 8083f86:	494d      	ldr	r1, [pc, #308]	; (80840bc <_Z23outputSerialMenuOptionsv+0x2cc>)
 8083f88:	f006 fac3 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("N:  Disable 20% battery threshold limiting WARNING!!");
 8083f8c:	f007 fb5a 	bl	808b644 <_Z16_fetch_usbserialv>
 8083f90:	494b      	ldr	r1, [pc, #300]	; (80840c0 <_Z23outputSerialMenuOptionsv+0x2d0>)
 8083f92:	f006 fabe 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("O:  Enable low power for GPS module");
 8083f96:	f007 fb55 	bl	808b644 <_Z16_fetch_usbserialv>
 8083f9a:	494a      	ldr	r1, [pc, #296]	; (80840c4 <_Z23outputSerialMenuOptionsv+0x2d4>)
 8083f9c:	f006 fab9 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("P:  Turn off BATFET");
 8083fa0:	f007 fb50 	bl	808b644 <_Z16_fetch_usbserialv>
 8083fa4:	4948      	ldr	r1, [pc, #288]	; (80840c8 <_Z23outputSerialMenuOptionsv+0x2d8>)
 8083fa6:	f006 fab4 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("Q:  Allow BATFET to turn on");
 8083faa:	f007 fb4b 	bl	808b644 <_Z16_fetch_usbserialv>
 8083fae:	4947      	ldr	r1, [pc, #284]	; (80840cc <_Z23outputSerialMenuOptionsv+0x2dc>)
 8083fb0:	f006 faaf 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("R:  Disable ABC logic for CO2 sensor");
 8083fb4:	f007 fb46 	bl	808b644 <_Z16_fetch_usbserialv>
 8083fb8:	4945      	ldr	r1, [pc, #276]	; (80840d0 <_Z23outputSerialMenuOptionsv+0x2e0>)
 8083fba:	f006 faaa 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("S:  Enable ABC logic for CO2 sensor");
 8083fbe:	f007 fb41 	bl	808b644 <_Z16_fetch_usbserialv>
 8083fc2:	4944      	ldr	r1, [pc, #272]	; (80840d4 <_Z23outputSerialMenuOptionsv+0x2e4>)
 8083fc4:	f006 faa5 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("T:  Enable/disable HIH8120 RH sensor");
 8083fc8:	f007 fb3c 	bl	808b644 <_Z16_fetch_usbserialv>
 8083fcc:	4942      	ldr	r1, [pc, #264]	; (80840d8 <_Z23outputSerialMenuOptionsv+0x2e8>)
 8083fce:	f006 faa0 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("U:  Switch socket where CO is read from");
 8083fd2:	f007 fb37 	bl	808b644 <_Z16_fetch_usbserialv>
 8083fd6:	4941      	ldr	r1, [pc, #260]	; (80840dc <_Z23outputSerialMenuOptionsv+0x2ec>)
 8083fd8:	f006 fa9b 	bl	808a512 <_ZN5Print7printlnEPKc>
    
    //Serial.println("W:  Enable/Disable google location services");
    Serial.println("V:  Calibrate CO2 sensor - must supply ambient level (go outside!)");
 8083fdc:	f007 fb32 	bl	808b644 <_Z16_fetch_usbserialv>
 8083fe0:	493f      	ldr	r1, [pc, #252]	; (80840e0 <_Z23outputSerialMenuOptionsv+0x2f0>)
 8083fe2:	f006 fa96 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("Z:  Output cellular information (CCID, IMEI, etc)");
 8083fe6:	f007 fb2d 	bl	808b644 <_Z16_fetch_usbserialv>
 8083fea:	493e      	ldr	r1, [pc, #248]	; (80840e4 <_Z23outputSerialMenuOptionsv+0x2f4>)
 8083fec:	f006 fa91 	bl	808a512 <_ZN5Print7printlnEPKc>
    //Serial.println("!:  Continuous serial output of VOC's");
    Serial.println("@   Enable/Disable Sensible-iot data push.  If enabled, time zone will be ignored - UTC will be used.");
 8083ff0:	f007 fb28 	bl	808b644 <_Z16_fetch_usbserialv>
 8083ff4:	493c      	ldr	r1, [pc, #240]	; (80840e8 <_Z23outputSerialMenuOptionsv+0x2f8>)
 8083ff6:	f006 fa8c 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("#   Enable/Disable cartopper power mode.  If enabled, absense of external power will stop cellular.");
 8083ffa:	f007 fb23 	bl	808b644 <_Z16_fetch_usbserialv>
 8083ffe:	493b      	ldr	r1, [pc, #236]	; (80840ec <_Z23outputSerialMenuOptionsv+0x2fc>)
 8084000:	f006 fa87 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("?:  Output this menu");
 8084004:	f007 fb1e 	bl	808b644 <_Z16_fetch_usbserialv>
 8084008:	4939      	ldr	r1, [pc, #228]	; (80840f0 <_Z23outputSerialMenuOptionsv+0x300>)
 808400a:	f006 fa82 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial.println("x:  Exits this menu");
 808400e:	f007 fb19 	bl	808b644 <_Z16_fetch_usbserialv>
  }
 8084012:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.println("Z:  Output cellular information (CCID, IMEI, etc)");
    //Serial.println("!:  Continuous serial output of VOC's");
    Serial.println("@   Enable/Disable Sensible-iot data push.  If enabled, time zone will be ignored - UTC will be used.");
    Serial.println("#   Enable/Disable cartopper power mode.  If enabled, absense of external power will stop cellular.");
    Serial.println("?:  Output this menu");
    Serial.println("x:  Exits this menu");
 8084016:	4937      	ldr	r1, [pc, #220]	; (80840f4 <_Z23outputSerialMenuOptionsv+0x304>)
 8084018:	f006 ba7b 	b.w	808a512 <_ZN5Print7printlnEPKc>
 808401c:	080916d6 	.word	0x080916d6
 8084020:	080916ec 	.word	0x080916ec
 8084024:	08091701 	.word	0x08091701
 8084028:	08091715 	.word	0x08091715
 808402c:	08091729 	.word	0x08091729
 8084030:	0809173c 	.word	0x0809173c
 8084034:	08091751 	.word	0x08091751
 8084038:	08091765 	.word	0x08091765
 808403c:	0809177c 	.word	0x0809177c
 8084040:	08091792 	.word	0x08091792
 8084044:	080917a8 	.word	0x080917a8
 8084048:	080917bd 	.word	0x080917bd
 808404c:	080917da 	.word	0x080917da
 8084050:	080917f6 	.word	0x080917f6
 8084054:	08091810 	.word	0x08091810
 8084058:	08091829 	.word	0x08091829
 808405c:	08091843 	.word	0x08091843
 8084060:	0809185c 	.word	0x0809185c
 8084064:	08091878 	.word	0x08091878
 8084068:	08091895 	.word	0x08091895
 808406c:	080918ae 	.word	0x080918ae
 8084070:	080918ca 	.word	0x080918ca
 8084074:	080918e2 	.word	0x080918e2
 8084078:	080918fb 	.word	0x080918fb
 808407c:	08091914 	.word	0x08091914
 8084080:	08091928 	.word	0x08091928
 8084084:	0809193d 	.word	0x0809193d
 8084088:	08091953 	.word	0x08091953
 808408c:	08091964 	.word	0x08091964
 8084090:	08091976 	.word	0x08091976
 8084094:	0809199f 	.word	0x0809199f
 8084098:	080919c5 	.word	0x080919c5
 808409c:	080919ea 	.word	0x080919ea
 80840a0:	08091a12 	.word	0x08091a12
 80840a4:	08091a52 	.word	0x08091a52
 80840a8:	08091a95 	.word	0x08091a95
 80840ac:	08091abf 	.word	0x08091abf
 80840b0:	08091af3 	.word	0x08091af3
 80840b4:	08091b11 	.word	0x08091b11
 80840b8:	08091b35 	.word	0x08091b35
 80840bc:	08091b50 	.word	0x08091b50
 80840c0:	08091b7a 	.word	0x08091b7a
 80840c4:	08091baf 	.word	0x08091baf
 80840c8:	08091bd3 	.word	0x08091bd3
 80840cc:	08091be7 	.word	0x08091be7
 80840d0:	08091c03 	.word	0x08091c03
 80840d4:	08091c28 	.word	0x08091c28
 80840d8:	08091c4c 	.word	0x08091c4c
 80840dc:	08091c71 	.word	0x08091c71
 80840e0:	08091c99 	.word	0x08091c99
 80840e4:	08091cdc 	.word	0x08091cdc
 80840e8:	08091d0e 	.word	0x08091d0e
 80840ec:	08091d74 	.word	0x08091d74
 80840f0:	08091dd8 	.word	0x08091dd8
 80840f4:	08091ded 	.word	0x08091ded

080840f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80840f8:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80840fa:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80840fc:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80840fe:	b17c      	cbz	r4, 8084120 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8084100:	6863      	ldr	r3, [r4, #4]
 8084102:	3b01      	subs	r3, #1
 8084104:	6063      	str	r3, [r4, #4]
 8084106:	b95b      	cbnz	r3, 8084120 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 8084108:	6823      	ldr	r3, [r4, #0]
 808410a:	4620      	mov	r0, r4
 808410c:	689b      	ldr	r3, [r3, #8]
 808410e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8084110:	68a3      	ldr	r3, [r4, #8]
 8084112:	3b01      	subs	r3, #1
 8084114:	60a3      	str	r3, [r4, #8]
 8084116:	b91b      	cbnz	r3, 8084120 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8084118:	6823      	ldr	r3, [r4, #0]
 808411a:	4620      	mov	r0, r4
 808411c:	68db      	ldr	r3, [r3, #12]
 808411e:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 8084120:	4628      	mov	r0, r5
 8084122:	bd38      	pop	{r3, r4, r5, pc}

08084124 <_Z13outputToCloud6StringS_>:
    snprintf(data, sizeof(data), "{\"lat\":%f, \"lng\":%f}", lat, lng);

    Particle.publish("testJson", data, PRIVATE);
}*/
//todo: average everything except ozone
void outputToCloud(String data, String sensible_data){
 8084124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084128:	b099      	sub	sp, #100	; 0x64
 808412a:	4606      	mov	r6, r0
 808412c:	460f      	mov	r7, r1
    String webhook_data = " ";
 808412e:	a804      	add	r0, sp, #16
 8084130:	49ab      	ldr	r1, [pc, #684]	; (80843e0 <_Z13outputToCloud6StringS_+0x2bc>)
 8084132:	f005 ffe4 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
    CO_sum += CO_float;
 8084136:	4cab      	ldr	r4, [pc, #684]	; (80843e4 <_Z13outputToCloud6StringS_+0x2c0>)
 8084138:	4bab      	ldr	r3, [pc, #684]	; (80843e8 <_Z13outputToCloud6StringS_+0x2c4>)
 808413a:	6820      	ldr	r0, [r4, #0]
 808413c:	6819      	ldr	r1, [r3, #0]
 808413e:	f008 fd29 	bl	808cb94 <__addsf3>
    CO2_sum += CO2_float;
 8084142:	4daa      	ldr	r5, [pc, #680]	; (80843ec <_Z13outputToCloud6StringS_+0x2c8>)
 8084144:	4baa      	ldr	r3, [pc, #680]	; (80843f0 <_Z13outputToCloud6StringS_+0x2cc>)
    Particle.publish("testJson", data, PRIVATE);
}*/
//todo: average everything except ozone
void outputToCloud(String data, String sensible_data){
    String webhook_data = " ";
    CO_sum += CO_float;
 8084146:	6020      	str	r0, [r4, #0]
    CO2_sum += CO2_float;
 8084148:	6819      	ldr	r1, [r3, #0]
    Particle.publish("testJson", data, PRIVATE);
}*/
//todo: average everything except ozone
void outputToCloud(String data, String sensible_data){
    String webhook_data = " ";
    CO_sum += CO_float;
 808414a:	4681      	mov	r9, r0
    CO2_sum += CO2_float;
 808414c:	6828      	ldr	r0, [r5, #0]
 808414e:	f008 fd21 	bl	808cb94 <__addsf3>
    O3_sum = O3_float;      //do not average ozone because it is averaged on the ozone monitor
 8084152:	4ba8      	ldr	r3, [pc, #672]	; (80843f4 <_Z13outputToCloud6StringS_+0x2d0>)
 8084154:	f8df 8304 	ldr.w	r8, [pc, #772]	; 808445c <_Z13outputToCloud6StringS_+0x338>
 8084158:	681b      	ldr	r3, [r3, #0]
    measurement_count++;
 808415a:	f8df a314 	ldr.w	sl, [pc, #788]	; 8084470 <_Z13outputToCloud6StringS_+0x34c>
//todo: average everything except ozone
void outputToCloud(String data, String sensible_data){
    String webhook_data = " ";
    CO_sum += CO_float;
    CO2_sum += CO2_float;
    O3_sum = O3_float;      //do not average ozone because it is averaged on the ozone monitor
 808415e:	f8c8 3000 	str.w	r3, [r8]
    measurement_count++;

    if(measurement_count == measurements_to_average){
 8084162:	4ba5      	ldr	r3, [pc, #660]	; (80843f8 <_Z13outputToCloud6StringS_+0x2d4>)
}*/
//todo: average everything except ozone
void outputToCloud(String data, String sensible_data){
    String webhook_data = " ";
    CO_sum += CO_float;
    CO2_sum += CO2_float;
 8084164:	4683      	mov	fp, r0
 8084166:	6028      	str	r0, [r5, #0]
    O3_sum = O3_float;      //do not average ozone because it is averaged on the ozone monitor
    measurement_count++;
 8084168:	f8da 0000 	ldr.w	r0, [sl]

    if(measurement_count == measurements_to_average){
 808416c:	681b      	ldr	r3, [r3, #0]
void outputToCloud(String data, String sensible_data){
    String webhook_data = " ";
    CO_sum += CO_float;
    CO2_sum += CO2_float;
    O3_sum = O3_float;      //do not average ozone because it is averaged on the ozone monitor
    measurement_count++;
 808416e:	3001      	adds	r0, #1

    if(measurement_count == measurements_to_average){
 8084170:	4298      	cmp	r0, r3
void outputToCloud(String data, String sensible_data){
    String webhook_data = " ";
    CO_sum += CO_float;
    CO2_sum += CO2_float;
    O3_sum = O3_float;      //do not average ozone because it is averaged on the ozone monitor
    measurement_count++;
 8084172:	f8ca 0000 	str.w	r0, [sl]

    if(measurement_count == measurements_to_average){
 8084176:	f040 80ec 	bne.w	8084352 <_Z13outputToCloud6StringS_+0x22e>
        CO_sum /= measurements_to_average;
 808417a:	f008 fdbf 	bl	808ccfc <__aeabi_i2f>
 808417e:	4601      	mov	r1, r0
 8084180:	9003      	str	r0, [sp, #12]
 8084182:	4648      	mov	r0, r9
 8084184:	f008 fec2 	bl	808cf0c <__aeabi_fdiv>
        CO2_sum /= measurements_to_average;
 8084188:	9b03      	ldr	r3, [sp, #12]
    CO2_sum += CO2_float;
    O3_sum = O3_float;      //do not average ozone because it is averaged on the ozone monitor
    measurement_count++;

    if(measurement_count == measurements_to_average){
        CO_sum /= measurements_to_average;
 808418a:	6020      	str	r0, [r4, #0]
        CO2_sum /= measurements_to_average;
 808418c:	4619      	mov	r1, r3
 808418e:	4658      	mov	r0, fp
 8084190:	f008 febc 	bl	808cf0c <__aeabi_fdiv>
        //O3_sum /= measurements_to_average;

        measurement_count = 0;
 8084194:	2300      	movs	r3, #0
 8084196:	f8ca 3000 	str.w	r3, [sl]
        String webhook_data = String(DEVICE_id) + ", CO: " + CO_sum + ", CO2: " + CO2_sum + ", PM1: " + PM01Value + ",PM2.5: " + corrected_PM_25 + ", PM10: " + PM10Value + ",Temp: " + String(readTemperature(), 1) + ",Press: ";
 808419a:	4b98      	ldr	r3, [pc, #608]	; (80843fc <_Z13outputToCloud6StringS_+0x2d8>)
 808419c:	220a      	movs	r2, #10
 808419e:	6819      	ldr	r1, [r3, #0]
    O3_sum = O3_float;      //do not average ozone because it is averaged on the ozone monitor
    measurement_count++;

    if(measurement_count == measurements_to_average){
        CO_sum /= measurements_to_average;
        CO2_sum /= measurements_to_average;
 80841a0:	6028      	str	r0, [r5, #0]
        //O3_sum /= measurements_to_average;

        measurement_count = 0;
        String webhook_data = String(DEVICE_id) + ", CO: " + CO_sum + ", CO2: " + CO2_sum + ", PM1: " + PM01Value + ",PM2.5: " + corrected_PM_25 + ", PM10: " + PM10Value + ",Temp: " + String(readTemperature(), 1) + ",Press: ";
 80841a2:	a80c      	add	r0, sp, #48	; 0x30
 80841a4:	f006 f81f 	bl	808a1e6 <_ZN6StringC1Eih>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80841a8:	a90c      	add	r1, sp, #48	; 0x30
 80841aa:	a810      	add	r0, sp, #64	; 0x40
 80841ac:	f005 ffe6 	bl	808a17c <_ZN6StringC1ERKS_>
 80841b0:	4993      	ldr	r1, [pc, #588]	; (8084400 <_Z13outputToCloud6StringS_+0x2dc>)
 80841b2:	a810      	add	r0, sp, #64	; 0x40
 80841b4:	f006 f8d2 	bl	808a35c <_ZplRK15StringSumHelperPKc>
 80841b8:	6821      	ldr	r1, [r4, #0]
 80841ba:	f006 f8eb 	bl	808a394 <_ZplRK15StringSumHelperf>
 80841be:	4991      	ldr	r1, [pc, #580]	; (8084404 <_Z13outputToCloud6StringS_+0x2e0>)
 80841c0:	f006 f8cc 	bl	808a35c <_ZplRK15StringSumHelperPKc>
 80841c4:	6829      	ldr	r1, [r5, #0]
 80841c6:	f006 f8e5 	bl	808a394 <_ZplRK15StringSumHelperf>
 80841ca:	498f      	ldr	r1, [pc, #572]	; (8084408 <_Z13outputToCloud6StringS_+0x2e4>)
 80841cc:	f006 f8c6 	bl	808a35c <_ZplRK15StringSumHelperPKc>
 80841d0:	4b8e      	ldr	r3, [pc, #568]	; (808440c <_Z13outputToCloud6StringS_+0x2e8>)
        webhook_data += String(bme.pressure / 100.0, 1) + ",HUM: " + String(bme.humidity, 1);
 80841d2:	f04f 0901 	mov.w	r9, #1
        CO_sum /= measurements_to_average;
        CO2_sum /= measurements_to_average;
        //O3_sum /= measurements_to_average;

        measurement_count = 0;
        String webhook_data = String(DEVICE_id) + ", CO: " + CO_sum + ", CO2: " + CO2_sum + ", PM1: " + PM01Value + ",PM2.5: " + corrected_PM_25 + ", PM10: " + PM10Value + ",Temp: " + String(readTemperature(), 1) + ",Press: ";
 80841d6:	6819      	ldr	r1, [r3, #0]
 80841d8:	f006 f8d2 	bl	808a380 <_ZplRK15StringSumHelperi>
 80841dc:	498c      	ldr	r1, [pc, #560]	; (8084410 <_Z13outputToCloud6StringS_+0x2ec>)
 80841de:	f006 f8bd 	bl	808a35c <_ZplRK15StringSumHelperPKc>
 80841e2:	4b8c      	ldr	r3, [pc, #560]	; (8084414 <_Z13outputToCloud6StringS_+0x2f0>)
 80841e4:	6819      	ldr	r1, [r3, #0]
 80841e6:	f006 f8d5 	bl	808a394 <_ZplRK15StringSumHelperf>
 80841ea:	498b      	ldr	r1, [pc, #556]	; (8084418 <_Z13outputToCloud6StringS_+0x2f4>)
 80841ec:	f006 f8b6 	bl	808a35c <_ZplRK15StringSumHelperPKc>
 80841f0:	4b8a      	ldr	r3, [pc, #552]	; (808441c <_Z13outputToCloud6StringS_+0x2f8>)
 80841f2:	6819      	ldr	r1, [r3, #0]
 80841f4:	f006 f8c4 	bl	808a380 <_ZplRK15StringSumHelperi>
 80841f8:	4989      	ldr	r1, [pc, #548]	; (8084420 <_Z13outputToCloud6StringS_+0x2fc>)
 80841fa:	f006 f8af 	bl	808a35c <_ZplRK15StringSumHelperPKc>
 80841fe:	4605      	mov	r5, r0
 8084200:	f7fd f976 	bl	80814f0 <_Z15readTemperaturev>
 8084204:	2201      	movs	r2, #1
 8084206:	4601      	mov	r1, r0
 8084208:	a814      	add	r0, sp, #80	; 0x50
 808420a:	f006 f812 	bl	808a232 <_ZN6StringC1Efi>
 808420e:	a914      	add	r1, sp, #80	; 0x50
 8084210:	4628      	mov	r0, r5
 8084212:	f006 f897 	bl	808a344 <_ZplRK15StringSumHelperRK6String>
 8084216:	4983      	ldr	r1, [pc, #524]	; (8084424 <_Z13outputToCloud6StringS_+0x300>)
 8084218:	f006 f8a0 	bl	808a35c <_ZplRK15StringSumHelperPKc>
 808421c:	4601      	mov	r1, r0
 808421e:	a808      	add	r0, sp, #32
 8084220:	f005 ffac 	bl	808a17c <_ZN6StringC1ERKS_>
 8084224:	a814      	add	r0, sp, #80	; 0x50
 8084226:	f005 ff23 	bl	808a070 <_ZN6StringD1Ev>
        webhook_data += String(bme.pressure / 100.0, 1) + ",HUM: " + String(bme.humidity, 1);
 808422a:	4d7f      	ldr	r5, [pc, #508]	; (8084428 <_Z13outputToCloud6StringS_+0x304>)

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808422c:	a810      	add	r0, sp, #64	; 0x40
 808422e:	f005 ff1f 	bl	808a070 <_ZN6StringD1Ev>
        CO_sum /= measurements_to_average;
        CO2_sum /= measurements_to_average;
        //O3_sum /= measurements_to_average;

        measurement_count = 0;
        String webhook_data = String(DEVICE_id) + ", CO: " + CO_sum + ", CO2: " + CO2_sum + ", PM1: " + PM01Value + ",PM2.5: " + corrected_PM_25 + ", PM10: " + PM10Value + ",Temp: " + String(readTemperature(), 1) + ",Press: ";
 8084232:	a80c      	add	r0, sp, #48	; 0x30
 8084234:	f005 ff1c 	bl	808a070 <_ZN6StringD1Ev>
        webhook_data += String(bme.pressure / 100.0, 1) + ",HUM: " + String(bme.humidity, 1);
 8084238:	6868      	ldr	r0, [r5, #4]
 808423a:	f008 f909 	bl	808c450 <__aeabi_f2d>
 808423e:	2200      	movs	r2, #0
 8084240:	4b7a      	ldr	r3, [pc, #488]	; (808442c <_Z13outputToCloud6StringS_+0x308>)
 8084242:	f008 fa83 	bl	808c74c <__aeabi_ddiv>
 8084246:	f8cd 9000 	str.w	r9, [sp]
 808424a:	460b      	mov	r3, r1
 808424c:	4602      	mov	r2, r0
 808424e:	a80c      	add	r0, sp, #48	; 0x30
 8084250:	f006 f806 	bl	808a260 <_ZN6StringC1Edi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084254:	a90c      	add	r1, sp, #48	; 0x30
 8084256:	a810      	add	r0, sp, #64	; 0x40
 8084258:	f005 ff90 	bl	808a17c <_ZN6StringC1ERKS_>
 808425c:	4974      	ldr	r1, [pc, #464]	; (8084430 <_Z13outputToCloud6StringS_+0x30c>)
 808425e:	a810      	add	r0, sp, #64	; 0x40
 8084260:	f006 f87c 	bl	808a35c <_ZplRK15StringSumHelperPKc>
 8084264:	4682      	mov	sl, r0
 8084266:	464a      	mov	r2, r9
 8084268:	68a9      	ldr	r1, [r5, #8]
 808426a:	a814      	add	r0, sp, #80	; 0x50
 808426c:	f005 ffe1 	bl	808a232 <_ZN6StringC1Efi>
 8084270:	a914      	add	r1, sp, #80	; 0x50
 8084272:	4650      	mov	r0, sl
 8084274:	f006 f866 	bl	808a344 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084278:	4601      	mov	r1, r0
 808427a:	a808      	add	r0, sp, #32
 808427c:	f006 f81d 	bl	808a2ba <_ZN6String6concatERKS_>
 8084280:	a814      	add	r0, sp, #80	; 0x50
 8084282:	f005 fef5 	bl	808a070 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084286:	a810      	add	r0, sp, #64	; 0x40
 8084288:	f005 fef2 	bl	808a070 <_ZN6StringD1Ev>
 808428c:	a80c      	add	r0, sp, #48	; 0x30
 808428e:	f005 feef 	bl	808a070 <_ZN6StringD1Ev>
        if(ozone_enabled){
 8084292:	4b68      	ldr	r3, [pc, #416]	; (8084434 <_Z13outputToCloud6StringS_+0x310>)
 8084294:	681b      	ldr	r3, [r3, #0]
 8084296:	b1bb      	cbz	r3, 80842c8 <_Z13outputToCloud6StringS_+0x1a4>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 8084298:	4967      	ldr	r1, [pc, #412]	; (8084438 <_Z13outputToCloud6StringS_+0x314>)
 808429a:	a814      	add	r0, sp, #80	; 0x50
 808429c:	f005 ff2f 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
            webhook_data += ",O3: " + String(O3_sum);
 80842a0:	2206      	movs	r2, #6
 80842a2:	f8d8 1000 	ldr.w	r1, [r8]
 80842a6:	a810      	add	r0, sp, #64	; 0x40
 80842a8:	f005 ffc3 	bl	808a232 <_ZN6StringC1Efi>
 80842ac:	a910      	add	r1, sp, #64	; 0x40
 80842ae:	a814      	add	r0, sp, #80	; 0x50
 80842b0:	f006 f848 	bl	808a344 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80842b4:	4601      	mov	r1, r0
 80842b6:	a808      	add	r0, sp, #32
 80842b8:	f005 ffff 	bl	808a2ba <_ZN6String6concatERKS_>
 80842bc:	a810      	add	r0, sp, #64	; 0x40
 80842be:	f005 fed7 	bl	808a070 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80842c2:	a814      	add	r0, sp, #80	; 0x50
 80842c4:	f005 fed4 	bl	808a070 <_ZN6StringD1Ev>
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 80842c8:	495c      	ldr	r1, [pc, #368]	; (808443c <_Z13outputToCloud6StringS_+0x318>)
 80842ca:	a808      	add	r0, sp, #32
 80842cc:	f005 fff9 	bl	808a2c2 <_ZN6String6concatEPKc>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80842d0:	f005 fb1a 	bl	8089908 <spark_cloud_flag_connected>
 80842d4:	4d5a      	ldr	r5, [pc, #360]	; (8084440 <_Z13outputToCloud6StringS_+0x31c>)
 80842d6:	4b5b      	ldr	r3, [pc, #364]	; (8084444 <_Z13outputToCloud6StringS_+0x320>)
        } 
        webhook_data += "\n\r";

        if(Particle.connected() && serial_cellular_enabled){
 80842d8:	2800      	cmp	r0, #0
 80842da:	d040      	beq.n	808435e <_Z13outputToCloud6StringS_+0x23a>
 80842dc:	681a      	ldr	r2, [r3, #0]
 80842de:	2a00      	cmp	r2, #0
 80842e0:	d03d      	beq.n	808435e <_Z13outputToCloud6StringS_+0x23a>
            status_word.status_int |= 0x0002;
 80842e2:	4a59      	ldr	r2, [pc, #356]	; (8084448 <_Z13outputToCloud6StringS_+0x324>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80842e4:	4959      	ldr	r1, [pc, #356]	; (808444c <_Z13outputToCloud6StringS_+0x328>)
 80842e6:	8813      	ldrh	r3, [r2, #0]
 80842e8:	a814      	add	r0, sp, #80	; 0x50
 80842ea:	f043 0302 	orr.w	r3, r3, #2
 80842ee:	8013      	strh	r3, [r2, #0]
 80842f0:	6832      	ldr	r2, [r6, #0]
 80842f2:	4e57      	ldr	r6, [pc, #348]	; (8084450 <_Z13outputToCloud6StringS_+0x32c>)
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80842f4:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8084474 <_Z13outputToCloud6StringS_+0x350>
 80842f8:	7833      	ldrb	r3, [r6, #0]
 80842fa:	f88d 3000 	strb.w	r3, [sp]
 80842fe:	233c      	movs	r3, #60	; 0x3c
 8084300:	f006 ff5e 	bl	808b1c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8084304:	a815      	add	r0, sp, #84	; 0x54
 8084306:	f7ff fef7 	bl	80840f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 808430a:	f005 f8e7 	bl	80894dc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 808430e:	f8c8 0000 	str.w	r0, [r8]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 8084312:	f005 fae9 	bl	80898e8 <spark_process>
            Particle.publish("pamup", data, PRIVATE);
            Particle.process(); //attempt at ensuring the publish is complete before sleeping
            if(debugging_enabled){
 8084316:	682b      	ldr	r3, [r5, #0]
 8084318:	b173      	cbz	r3, 8084338 <_Z13outputToCloud6StringS_+0x214>
              Serial.println("Published pamup data!");
 808431a:	f007 f993 	bl	808b644 <_Z16_fetch_usbserialv>
 808431e:	494d      	ldr	r1, [pc, #308]	; (8084454 <_Z13outputToCloud6StringS_+0x330>)
 8084320:	f006 f8f7 	bl	808a512 <_ZN5Print7printlnEPKc>
              writeLogFile("Published pamup data!");
 8084324:	494b      	ldr	r1, [pc, #300]	; (8084454 <_Z13outputToCloud6StringS_+0x330>)
 8084326:	a814      	add	r0, sp, #80	; 0x50
 8084328:	f005 fee9 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
 808432c:	a814      	add	r0, sp, #80	; 0x50
 808432e:	f7fd fb2b 	bl	8081988 <_Z12writeLogFile6String>
 8084332:	a814      	add	r0, sp, #80	; 0x50
 8084334:	f005 fe9c 	bl	808a070 <_ZN6StringD1Ev>
            }
            if(sensible_iot_en){
 8084338:	4b47      	ldr	r3, [pc, #284]	; (8084458 <_Z13outputToCloud6StringS_+0x334>)
 808433a:	681b      	ldr	r3, [r3, #0]
 808433c:	2b00      	cmp	r3, #0
 808433e:	d132      	bne.n	80843a6 <_Z13outputToCloud6StringS_+0x282>
                    writeLogFile("Couldn't connect to particle.");
                  }
            }
        }
        CO_sum = 0;
        CO2_sum = 0;
 8084340:	4a2a      	ldr	r2, [pc, #168]	; (80843ec <_Z13outputToCloud6StringS_+0x2c8>)
                    Serial.println("Couldn't connect to particle.");
                    writeLogFile("Couldn't connect to particle.");
                  }
            }
        }
        CO_sum = 0;
 8084342:	2300      	movs	r3, #0
        CO2_sum = 0;
 8084344:	6013      	str	r3, [r2, #0]
        O3_sum = 0;
 8084346:	4a45      	ldr	r2, [pc, #276]	; (808445c <_Z13outputToCloud6StringS_+0x338>)
        CO_sum /= measurements_to_average;
        CO2_sum /= measurements_to_average;
        //O3_sum /= measurements_to_average;

        measurement_count = 0;
        String webhook_data = String(DEVICE_id) + ", CO: " + CO_sum + ", CO2: " + CO2_sum + ", PM1: " + PM01Value + ",PM2.5: " + corrected_PM_25 + ", PM10: " + PM10Value + ",Temp: " + String(readTemperature(), 1) + ",Press: ";
 8084348:	a808      	add	r0, sp, #32
                    Serial.println("Couldn't connect to particle.");
                    writeLogFile("Couldn't connect to particle.");
                  }
            }
        }
        CO_sum = 0;
 808434a:	6023      	str	r3, [r4, #0]
        CO2_sum = 0;
        O3_sum = 0;
 808434c:	6013      	str	r3, [r2, #0]
        CO_sum /= measurements_to_average;
        CO2_sum /= measurements_to_average;
        //O3_sum /= measurements_to_average;

        measurement_count = 0;
        String webhook_data = String(DEVICE_id) + ", CO: " + CO_sum + ", CO2: " + CO2_sum + ", PM1: " + PM01Value + ",PM2.5: " + corrected_PM_25 + ", PM10: " + PM10Value + ",Temp: " + String(readTemperature(), 1) + ",Press: ";
 808434e:	f005 fe8f 	bl	808a070 <_ZN6StringD1Ev>

    Particle.publish("testJson", data, PRIVATE);
}*/
//todo: average everything except ozone
void outputToCloud(String data, String sensible_data){
    String webhook_data = " ";
 8084352:	a804      	add	r0, sp, #16
 8084354:	f005 fe8c 	bl	808a070 <_ZN6StringD1Ev>
        }
        CO_sum = 0;
        CO2_sum = 0;
        O3_sum = 0;
    }
}
 8084358:	b019      	add	sp, #100	; 0x64
 808435a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    Serial.println("Published sensible data!");
                    writeLogFile("Published sensible data!");
                }
            }
        }else{
            if(serial_cellular_enabled == 0){
 808435e:	681b      	ldr	r3, [r3, #0]
 8084360:	b94b      	cbnz	r3, 8084376 <_Z13outputToCloud6StringS_+0x252>
                if(debugging_enabled){
 8084362:	682b      	ldr	r3, [r5, #0]
 8084364:	2b00      	cmp	r3, #0
 8084366:	d0eb      	beq.n	8084340 <_Z13outputToCloud6StringS_+0x21c>
                    Serial.println("Cellular is disabled.");
 8084368:	f007 f96c 	bl	808b644 <_Z16_fetch_usbserialv>
 808436c:	493c      	ldr	r1, [pc, #240]	; (8084460 <_Z13outputToCloud6StringS_+0x33c>)
 808436e:	f006 f8d0 	bl	808a512 <_ZN5Print7printlnEPKc>
                    writeLogFile("Cellular is disabled.");
 8084372:	493b      	ldr	r1, [pc, #236]	; (8084460 <_Z13outputToCloud6StringS_+0x33c>)
 8084374:	e00d      	b.n	8084392 <_Z13outputToCloud6StringS_+0x26e>

                  }
            }else{
                status_word.status_int &= 0xFFFD;   //clear the connected bit
 8084376:	4a34      	ldr	r2, [pc, #208]	; (8084448 <_Z13outputToCloud6StringS_+0x324>)
 8084378:	8813      	ldrh	r3, [r2, #0]
 808437a:	f023 0302 	bic.w	r3, r3, #2
 808437e:	8013      	strh	r3, [r2, #0]
                if(debugging_enabled){
 8084380:	682b      	ldr	r3, [r5, #0]
 8084382:	2b00      	cmp	r3, #0
 8084384:	d0dc      	beq.n	8084340 <_Z13outputToCloud6StringS_+0x21c>
                    Serial.println("Couldn't connect to particle.");
 8084386:	f007 f95d 	bl	808b644 <_Z16_fetch_usbserialv>
 808438a:	4936      	ldr	r1, [pc, #216]	; (8084464 <_Z13outputToCloud6StringS_+0x340>)
 808438c:	f006 f8c1 	bl	808a512 <_ZN5Print7printlnEPKc>
                    writeLogFile("Couldn't connect to particle.");
 8084390:	4934      	ldr	r1, [pc, #208]	; (8084464 <_Z13outputToCloud6StringS_+0x340>)
 8084392:	a814      	add	r0, sp, #80	; 0x50
 8084394:	f005 feb3 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
 8084398:	a814      	add	r0, sp, #80	; 0x50
 808439a:	f7fd faf5 	bl	8081988 <_Z12writeLogFile6String>
 808439e:	a814      	add	r0, sp, #80	; 0x50
 80843a0:	f005 fe66 	bl	808a070 <_ZN6StringD1Ev>
 80843a4:	e7cc      	b.n	8084340 <_Z13outputToCloud6StringS_+0x21c>
 80843a6:	7833      	ldrb	r3, [r6, #0]
 80843a8:	683a      	ldr	r2, [r7, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80843aa:	492f      	ldr	r1, [pc, #188]	; (8084468 <_Z13outputToCloud6StringS_+0x344>)
 80843ac:	f88d 3000 	strb.w	r3, [sp]
 80843b0:	a814      	add	r0, sp, #80	; 0x50
 80843b2:	233c      	movs	r3, #60	; 0x3c
 80843b4:	f006 ff04 	bl	808b1c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80843b8:	a815      	add	r0, sp, #84	; 0x54
 80843ba:	f7ff fe9d 	bl	80840f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80843be:	f005 f88d 	bl	80894dc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80843c2:	f8c8 0000 	str.w	r0, [r8]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80843c6:	f005 fa8f 	bl	80898e8 <spark_process>
            }
            if(sensible_iot_en){
                Particle.publish("sensiblePamUp", sensible_data, PRIVATE);
                //testsensible();
                Particle.process();
                if(debugging_enabled){
 80843ca:	682b      	ldr	r3, [r5, #0]
 80843cc:	2b00      	cmp	r3, #0
 80843ce:	d0b7      	beq.n	8084340 <_Z13outputToCloud6StringS_+0x21c>
                    Serial.println("Published sensible data!");
 80843d0:	f007 f938 	bl	808b644 <_Z16_fetch_usbserialv>
 80843d4:	4925      	ldr	r1, [pc, #148]	; (808446c <_Z13outputToCloud6StringS_+0x348>)
 80843d6:	f006 f89c 	bl	808a512 <_ZN5Print7printlnEPKc>
                    writeLogFile("Published sensible data!");
 80843da:	4924      	ldr	r1, [pc, #144]	; (808446c <_Z13outputToCloud6StringS_+0x348>)
 80843dc:	e7d9      	b.n	8084392 <_Z13outputToCloud6StringS_+0x26e>
 80843de:	bf00      	nop
 80843e0:	08090809 	.word	0x08090809
 80843e4:	20000b6c 	.word	0x20000b6c
 80843e8:	20000b04 	.word	0x20000b04
 80843ec:	20000784 	.word	0x20000784
 80843f0:	20000228 	.word	0x20000228
 80843f4:	20000b80 	.word	0x20000b80
 80843f8:	20000aec 	.word	0x20000aec
 80843fc:	20000088 	.word	0x20000088
 8084400:	08091e01 	.word	0x08091e01
 8084404:	08091e08 	.word	0x08091e08
 8084408:	08091e10 	.word	0x08091e10
 808440c:	200008c8 	.word	0x200008c8
 8084410:	08091e18 	.word	0x08091e18
 8084414:	200009a0 	.word	0x200009a0
 8084418:	08091e21 	.word	0x08091e21
 808441c:	20000b1c 	.word	0x20000b1c
 8084420:	08091e2a 	.word	0x08091e2a
 8084424:	08091e32 	.word	0x08091e32
 8084428:	200006f8 	.word	0x200006f8
 808442c:	40590000 	.word	0x40590000
 8084430:	08091e3b 	.word	0x08091e3b
 8084434:	20000ab8 	.word	0x20000ab8
 8084438:	08091e42 	.word	0x08091e42
 808443c:	0809223e 	.word	0x0809223e
 8084440:	20000af8 	.word	0x20000af8
 8084444:	20000224 	.word	0x20000224
 8084448:	20000b74 	.word	0x20000b74
 808444c:	08091eb9 	.word	0x08091eb9
 8084450:	200006f0 	.word	0x200006f0
 8084454:	08091e48 	.word	0x08091e48
 8084458:	200008d0 	.word	0x200008d0
 808445c:	200001d4 	.word	0x200001d4
 8084460:	08091e85 	.word	0x08091e85
 8084464:	08091e9b 	.word	0x08091e9b
 8084468:	08091e5e 	.word	0x08091e5e
 808446c:	08091e6c 	.word	0x08091e6c
 8084470:	20000220 	.word	0x20000220
 8084474:	200010ec 	.word	0x200010ec

08084478 <_Z15outputDataToESPv>:
  }else{
    Serial.println("Unable to write to log file");
  }
}

void outputDataToESP(void){
 8084478:	b5f0      	push	{r4, r5, r6, r7, lr}
 808447a:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
        unsigned char bytes[2];
    }wordBytes;


    //get a current time string
    time_t time = Time.now();
 808447e:	f006 fba4 	bl	808abca <_ZN9TimeClass3nowEv>
    Time.setFormat(TIME_FORMAT_ISO8601_FULL);
 8084482:	4ba9      	ldr	r3, [pc, #676]	; (8084728 <_Z15outputDataToESPv+0x2b0>)
        unsigned char bytes[2];
    }wordBytes;


    //get a current time string
    time_t time = Time.now();
 8084484:	4607      	mov	r7, r0
            return format(now(), format_spec);
        }

        void setFormat(const char* format)
        {
            this->format_spec = format;
 8084486:	681a      	ldr	r2, [r3, #0]
 8084488:	4ba8      	ldr	r3, [pc, #672]	; (808472c <_Z15outputDataToESPv+0x2b4>)
    }*/

    //************Fill the cloud output array and file output array for row in csv file on usd card*****************************/
    //This is different than the ble packet in that we are putting all of the data that we have in one packet
    //"$1:D555g47.7M-22.050533C550.866638r1R1q2T45.8P844.9h17.2s1842.700000&"
    String cloud_output_string = "";    //create a clean string
 808448a:	49a9      	ldr	r1, [pc, #676]	; (8084730 <_Z15outputDataToESPv+0x2b8>)
 808448c:	a802      	add	r0, sp, #8
 808448e:	601a      	str	r2, [r3, #0]
 8084490:	f005 fe35 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
    String csv_output_string = "";
 8084494:	49a6      	ldr	r1, [pc, #664]	; (8084730 <_Z15outputDataToESPv+0x2b8>)
 8084496:	a806      	add	r0, sp, #24
 8084498:	f005 fe31 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
    String sensible_string = "";
 808449c:	49a4      	ldr	r1, [pc, #656]	; (8084730 <_Z15outputDataToESPv+0x2b8>)
 808449e:	a80a      	add	r0, sp, #40	; 0x28
 80844a0:	f005 fe2d 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
    String latitude_string = "";
 80844a4:	49a2      	ldr	r1, [pc, #648]	; (8084730 <_Z15outputDataToESPv+0x2b8>)
 80844a6:	a80e      	add	r0, sp, #56	; 0x38
 80844a8:	f005 fe29 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
    String longitude_string = "";
 80844ac:	49a0      	ldr	r1, [pc, #640]	; (8084730 <_Z15outputDataToESPv+0x2b8>)
 80844ae:	a812      	add	r0, sp, #72	; 0x48
 80844b0:	f005 fe25 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
	String & operator += (char c)			{concat(c); return (*this);}
 80844b4:	215e      	movs	r1, #94	; 0x5e
 80844b6:	a802      	add	r0, sp, #8
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80844b8:	ac64      	add	r4, sp, #400	; 0x190

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
 80844ba:	f005 ff11 	bl	808a2e0 <_ZN6String6concatEc>

    char sensible_buf[256];
    cloud_output_string += '^';         //start delimeter
    cloud_output_string += String(1) + ";";           //header
 80844be:	220a      	movs	r2, #10
 80844c0:	2101      	movs	r1, #1
 80844c2:	a827      	add	r0, sp, #156	; 0x9c
 80844c4:	f005 fe8f 	bl	808a1e6 <_ZN6StringC1Eih>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80844c8:	a927      	add	r1, sp, #156	; 0x9c
 80844ca:	4620      	mov	r0, r4
 80844cc:	f005 fe56 	bl	808a17c <_ZN6StringC1ERKS_>
 80844d0:	4998      	ldr	r1, [pc, #608]	; (8084734 <_Z15outputDataToESPv+0x2bc>)
 80844d2:	4620      	mov	r0, r4
 80844d4:	f005 ff42 	bl	808a35c <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80844d8:	4601      	mov	r1, r0
 80844da:	a802      	add	r0, sp, #8
 80844dc:	f005 feed 	bl	808a2ba <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80844e0:	4620      	mov	r0, r4
 80844e2:	f005 fdc5 	bl	808a070 <_ZN6StringD1Ev>
 80844e6:	a827      	add	r0, sp, #156	; 0x9c
 80844e8:	f005 fdc2 	bl	808a070 <_ZN6StringD1Ev>
    cloud_output_string += String(DEVICE_ID_PACKET_CONSTANT) + String(DEVICE_id);   //device id
 80844ec:	4e92      	ldr	r6, [pc, #584]	; (8084738 <_Z15outputDataToESPv+0x2c0>)
 80844ee:	215a      	movs	r1, #90	; 0x5a
 80844f0:	a822      	add	r0, sp, #136	; 0x88
 80844f2:	f005 fe67 	bl	808a1c4 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80844f6:	a922      	add	r1, sp, #136	; 0x88
 80844f8:	4620      	mov	r0, r4
 80844fa:	f005 fe3f 	bl	808a17c <_ZN6StringC1ERKS_>
 80844fe:	220a      	movs	r2, #10
 8084500:	6831      	ldr	r1, [r6, #0]
 8084502:	a827      	add	r0, sp, #156	; 0x9c
 8084504:	f005 fe6f 	bl	808a1e6 <_ZN6StringC1Eih>
 8084508:	a927      	add	r1, sp, #156	; 0x9c
 808450a:	4620      	mov	r0, r4
 808450c:	f005 ff1a 	bl	808a344 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084510:	4601      	mov	r1, r0
 8084512:	a802      	add	r0, sp, #8
 8084514:	f005 fed1 	bl	808a2ba <_ZN6String6concatERKS_>
 8084518:	a827      	add	r0, sp, #156	; 0x9c
 808451a:	f005 fda9 	bl	808a070 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808451e:	4620      	mov	r0, r4
 8084520:	f005 fda6 	bl	808a070 <_ZN6StringD1Ev>
 8084524:	a822      	add	r0, sp, #136	; 0x88
 8084526:	f005 fda3 	bl	808a070 <_ZN6StringD1Ev>
    csv_output_string += String(DEVICE_id) + ",";
 808452a:	220a      	movs	r2, #10
 808452c:	6831      	ldr	r1, [r6, #0]
 808452e:	a827      	add	r0, sp, #156	; 0x9c
 8084530:	f005 fe59 	bl	808a1e6 <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084534:	a927      	add	r1, sp, #156	; 0x9c
 8084536:	4620      	mov	r0, r4
 8084538:	f005 fe20 	bl	808a17c <_ZN6StringC1ERKS_>
 808453c:	497f      	ldr	r1, [pc, #508]	; (808473c <_Z15outputDataToESPv+0x2c4>)
 808453e:	4620      	mov	r0, r4
 8084540:	f005 ff0c 	bl	808a35c <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084544:	4601      	mov	r1, r0
 8084546:	a806      	add	r0, sp, #24
 8084548:	f005 feb7 	bl	808a2ba <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808454c:	4620      	mov	r0, r4
 808454e:	f005 fd8f 	bl	808a070 <_ZN6StringD1Ev>
 8084552:	a827      	add	r0, sp, #156	; 0x9c
 8084554:	f005 fd8c 	bl	808a070 <_ZN6StringD1Ev>

// spark::JSONBufferWriter
inline spark::JSONBufferWriter::JSONBufferWriter(char *buf, size_t size) :
        buf_(buf),
        bufSize_(size),
        n_(0) {
 8084558:	4b79      	ldr	r3, [pc, #484]	; (8084740 <_Z15outputDataToESPv+0x2c8>)
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
 808455a:	2500      	movs	r5, #0

// spark::JSONBufferWriter
inline spark::JSONBufferWriter::JSONBufferWriter(char *buf, size_t size) :
        buf_(buf),
        bufSize_(size),
        n_(0) {
 808455c:	9322      	str	r3, [sp, #136]	; 0x88




    JSONBufferWriter writer(sensible_buf, sizeof(sensible_buf) - 1);
    writer.beginObject();
 808455e:	a822      	add	r0, sp, #136	; 0x88
 8084560:	23ff      	movs	r3, #255	; 0xff
 8084562:	9325      	str	r3, [sp, #148]	; 0x94
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
 8084564:	f88d 508c 	strb.w	r5, [sp, #140]	; 0x8c

// spark::JSONBufferWriter
inline spark::JSONBufferWriter::JSONBufferWriter(char *buf, size_t size) :
        buf_(buf),
        bufSize_(size),
        n_(0) {
 8084568:	9424      	str	r4, [sp, #144]	; 0x90
 808456a:	9526      	str	r5, [sp, #152]	; 0x98
 808456c:	f007 fb2a 	bl	808bbc4 <_ZN5spark10JSONWriter11beginObjectEv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 8084570:	4974      	ldr	r1, [pc, #464]	; (8084744 <_Z15outputDataToESPv+0x2cc>)
 8084572:	a827      	add	r0, sp, #156	; 0x9c
 8084574:	f005 fdc3 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
    String device_string = "PAM-" + String(DEVICE_id);
 8084578:	220a      	movs	r2, #10
 808457a:	6831      	ldr	r1, [r6, #0]
 808457c:	a81e      	add	r0, sp, #120	; 0x78
 808457e:	f005 fe32 	bl	808a1e6 <_ZN6StringC1Eih>
 8084582:	a91e      	add	r1, sp, #120	; 0x78
 8084584:	a827      	add	r0, sp, #156	; 0x9c
 8084586:	f005 fedd 	bl	808a344 <_ZplRK15StringSumHelperRK6String>
 808458a:	4601      	mov	r1, r0
 808458c:	a816      	add	r0, sp, #88	; 0x58
 808458e:	f005 fdf5 	bl	808a17c <_ZN6StringC1ERKS_>
 8084592:	a81e      	add	r0, sp, #120	; 0x78
 8084594:	f005 fd6c 	bl	808a070 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084598:	a827      	add	r0, sp, #156	; 0x9c
 808459a:	f005 fd69 	bl	808a070 <_ZN6StringD1Ev>
    //String device_time = String(Time.format(time, "%Y/%m/%dT%H:%M:%SZ"));
    //String co2_string = String(CO2_float, 0);
    //String co_string = String(CO_float, 3);
    writer.name("instrumentKey").value(device_string);
 808459e:	496a      	ldr	r1, [pc, #424]	; (8084748 <_Z15outputDataToESPv+0x2d0>)
 80845a0:	a822      	add	r0, sp, #136	; 0x88
 80845a2:	f7fc fb73 	bl	8080c8c <_ZN5spark10JSONWriter4nameEPKc>
 80845a6:	a916      	add	r1, sp, #88	; 0x58
 80845a8:	f7fc fb7d 	bl	8080ca6 <_ZN5spark10JSONWriter5valueERK6String>
    writer.name("datetime").value(String(Time.format(time, "%Y-%m-%dT%H:%M:%SZ")));
 80845ac:	4967      	ldr	r1, [pc, #412]	; (808474c <_Z15outputDataToESPv+0x2d4>)
 80845ae:	a822      	add	r0, sp, #136	; 0x88
 80845b0:	f7fc fb6c 	bl	8080c8c <_ZN5spark10JSONWriter4nameEPKc>
 80845b4:	4604      	mov	r4, r0
 80845b6:	4b66      	ldr	r3, [pc, #408]	; (8084750 <_Z15outputDataToESPv+0x2d8>)
 80845b8:	463a      	mov	r2, r7
 80845ba:	4966      	ldr	r1, [pc, #408]	; (8084754 <_Z15outputDataToESPv+0x2dc>)
 80845bc:	a827      	add	r0, sp, #156	; 0x9c
 80845be:	f006 fab1 	bl	808ab24 <_ZN9TimeClass6formatElPKc>
 80845c2:	a927      	add	r1, sp, #156	; 0x9c
 80845c4:	4620      	mov	r0, r4
 80845c6:	f7fc fb6e 	bl	8080ca6 <_ZN5spark10JSONWriter5valueERK6String>
 80845ca:	a827      	add	r0, sp, #156	; 0x9c
 80845cc:	f005 fd50 	bl	808a070 <_ZN6StringD1Ev>
    writer.name("CO2").value(String(CO2_float, 0));
 80845d0:	4961      	ldr	r1, [pc, #388]	; (8084758 <_Z15outputDataToESPv+0x2e0>)
 80845d2:	a822      	add	r0, sp, #136	; 0x88
 80845d4:	f7fc fb5a 	bl	8080c8c <_ZN5spark10JSONWriter4nameEPKc>
 80845d8:	4604      	mov	r4, r0
 80845da:	4b60      	ldr	r3, [pc, #384]	; (808475c <_Z15outputDataToESPv+0x2e4>)
 80845dc:	462a      	mov	r2, r5
 80845de:	6819      	ldr	r1, [r3, #0]
 80845e0:	a827      	add	r0, sp, #156	; 0x9c
 80845e2:	f005 fe26 	bl	808a232 <_ZN6StringC1Efi>
 80845e6:	a927      	add	r1, sp, #156	; 0x9c
 80845e8:	4620      	mov	r0, r4
 80845ea:	f7fc fb5c 	bl	8080ca6 <_ZN5spark10JSONWriter5valueERK6String>
 80845ee:	a827      	add	r0, sp, #156	; 0x9c
 80845f0:	f005 fd3e 	bl	808a070 <_ZN6StringD1Ev>
    writer.name("CO").value(String(CO_float, 3));
 80845f4:	495a      	ldr	r1, [pc, #360]	; (8084760 <_Z15outputDataToESPv+0x2e8>)
 80845f6:	a822      	add	r0, sp, #136	; 0x88
 80845f8:	f7fc fb48 	bl	8080c8c <_ZN5spark10JSONWriter4nameEPKc>
 80845fc:	4604      	mov	r4, r0
 80845fe:	4b59      	ldr	r3, [pc, #356]	; (8084764 <_Z15outputDataToESPv+0x2ec>)
 8084600:	2203      	movs	r2, #3
 8084602:	6819      	ldr	r1, [r3, #0]
 8084604:	a827      	add	r0, sp, #156	; 0x9c
 8084606:	f005 fe14 	bl	808a232 <_ZN6StringC1Efi>
 808460a:	a927      	add	r1, sp, #156	; 0x9c
 808460c:	4620      	mov	r0, r4
 808460e:	f7fc fb4a 	bl	8080ca6 <_ZN5spark10JSONWriter5valueERK6String>
 8084612:	a827      	add	r0, sp, #156	; 0x9c
 8084614:	f005 fd2c 	bl	808a070 <_ZN6StringD1Ev>
    writer.name("PM1_0").value(String(PM01Value));
 8084618:	4953      	ldr	r1, [pc, #332]	; (8084768 <_Z15outputDataToESPv+0x2f0>)
 808461a:	a822      	add	r0, sp, #136	; 0x88
 808461c:	f7fc fb36 	bl	8080c8c <_ZN5spark10JSONWriter4nameEPKc>
 8084620:	4604      	mov	r4, r0
 8084622:	4b52      	ldr	r3, [pc, #328]	; (808476c <_Z15outputDataToESPv+0x2f4>)
 8084624:	220a      	movs	r2, #10
 8084626:	6819      	ldr	r1, [r3, #0]
 8084628:	a827      	add	r0, sp, #156	; 0x9c
 808462a:	f005 fddc 	bl	808a1e6 <_ZN6StringC1Eih>
 808462e:	a927      	add	r1, sp, #156	; 0x9c
 8084630:	4620      	mov	r0, r4
 8084632:	f7fc fb38 	bl	8080ca6 <_ZN5spark10JSONWriter5valueERK6String>
 8084636:	a827      	add	r0, sp, #156	; 0x9c
 8084638:	f005 fd1a 	bl	808a070 <_ZN6StringD1Ev>
    writer.name("PM2_5").value(String(corrected_PM_25, 0)); 
 808463c:	494c      	ldr	r1, [pc, #304]	; (8084770 <_Z15outputDataToESPv+0x2f8>)
 808463e:	a822      	add	r0, sp, #136	; 0x88
 8084640:	f7fc fb24 	bl	8080c8c <_ZN5spark10JSONWriter4nameEPKc>
 8084644:	4604      	mov	r4, r0
 8084646:	4b4b      	ldr	r3, [pc, #300]	; (8084774 <_Z15outputDataToESPv+0x2fc>)
 8084648:	462a      	mov	r2, r5
 808464a:	6819      	ldr	r1, [r3, #0]
 808464c:	a827      	add	r0, sp, #156	; 0x9c
 808464e:	f005 fdf0 	bl	808a232 <_ZN6StringC1Efi>
 8084652:	a927      	add	r1, sp, #156	; 0x9c
 8084654:	4620      	mov	r0, r4
 8084656:	f7fc fb26 	bl	8080ca6 <_ZN5spark10JSONWriter5valueERK6String>
 808465a:	a827      	add	r0, sp, #156	; 0x9c
 808465c:	f005 fd08 	bl	808a070 <_ZN6StringD1Ev>
    writer.name("Temp").value(String(readTemperature(), 1));
 8084660:	4945      	ldr	r1, [pc, #276]	; (8084778 <_Z15outputDataToESPv+0x300>)
 8084662:	a822      	add	r0, sp, #136	; 0x88
 8084664:	f7fc fb12 	bl	8080c8c <_ZN5spark10JSONWriter4nameEPKc>
 8084668:	4604      	mov	r4, r0
 808466a:	f7fc ff41 	bl	80814f0 <_Z15readTemperaturev>
 808466e:	2201      	movs	r2, #1
 8084670:	4601      	mov	r1, r0
 8084672:	a827      	add	r0, sp, #156	; 0x9c
 8084674:	f005 fddd 	bl	808a232 <_ZN6StringC1Efi>
 8084678:	a927      	add	r1, sp, #156	; 0x9c
 808467a:	4620      	mov	r0, r4
 808467c:	f7fc fb13 	bl	8080ca6 <_ZN5spark10JSONWriter5valueERK6String>
 8084680:	a827      	add	r0, sp, #156	; 0x9c
 8084682:	f005 fcf5 	bl	808a070 <_ZN6StringD1Ev>
    writer.name("Press").value(String(bme.pressure / 100.0, 1));
 8084686:	493d      	ldr	r1, [pc, #244]	; (808477c <_Z15outputDataToESPv+0x304>)
 8084688:	a822      	add	r0, sp, #136	; 0x88
 808468a:	f7fc faff 	bl	8080c8c <_ZN5spark10JSONWriter4nameEPKc>
 808468e:	4b3c      	ldr	r3, [pc, #240]	; (8084780 <_Z15outputDataToESPv+0x308>)
 8084690:	4605      	mov	r5, r0
 8084692:	6858      	ldr	r0, [r3, #4]
 8084694:	f007 fedc 	bl	808c450 <__aeabi_f2d>
 8084698:	2200      	movs	r2, #0
 808469a:	4b3a      	ldr	r3, [pc, #232]	; (8084784 <_Z15outputDataToESPv+0x30c>)
 808469c:	f008 f856 	bl	808c74c <__aeabi_ddiv>
 80846a0:	2401      	movs	r4, #1
 80846a2:	460b      	mov	r3, r1
 80846a4:	4602      	mov	r2, r0
 80846a6:	9400      	str	r4, [sp, #0]
 80846a8:	a827      	add	r0, sp, #156	; 0x9c
 80846aa:	f005 fdd9 	bl	808a260 <_ZN6StringC1Edi>
 80846ae:	a927      	add	r1, sp, #156	; 0x9c
 80846b0:	4628      	mov	r0, r5
 80846b2:	f7fc faf8 	bl	8080ca6 <_ZN5spark10JSONWriter5valueERK6String>
 80846b6:	a827      	add	r0, sp, #156	; 0x9c
 80846b8:	f005 fcda 	bl	808a070 <_ZN6StringD1Ev>
    writer.name("Hmdty").value(String(readHumidity(), 1));
 80846bc:	4932      	ldr	r1, [pc, #200]	; (8084788 <_Z15outputDataToESPv+0x310>)
 80846be:	a822      	add	r0, sp, #136	; 0x88
 80846c0:	f7fc fae4 	bl	8080c8c <_ZN5spark10JSONWriter4nameEPKc>
 80846c4:	4605      	mov	r5, r0
 80846c6:	f7fc ff91 	bl	80815ec <_Z12readHumidityv>
 80846ca:	4622      	mov	r2, r4
 80846cc:	4601      	mov	r1, r0
 80846ce:	a827      	add	r0, sp, #156	; 0x9c
 80846d0:	f005 fdaf 	bl	808a232 <_ZN6StringC1Efi>
 80846d4:	a927      	add	r1, sp, #156	; 0x9c
 80846d6:	4628      	mov	r0, r5
 80846d8:	f7fc fae5 	bl	8080ca6 <_ZN5spark10JSONWriter5valueERK6String>
 80846dc:	a827      	add	r0, sp, #156	; 0x9c
 80846de:	f005 fcc7 	bl	808a070 <_ZN6StringD1Ev>
    //add gps coordinates to json:
    if(gps.get_latitude() != 0){
 80846e2:	482a      	ldr	r0, [pc, #168]	; (808478c <_Z15outputDataToESPv+0x314>)
 80846e4:	f002 fb94 	bl	8086e10 <_ZN3GPS12get_latitudeEv>
 80846e8:	2200      	movs	r2, #0
 80846ea:	2300      	movs	r3, #0
 80846ec:	f008 f96c 	bl	808c9c8 <__aeabi_dcmpeq>
 80846f0:	2800      	cmp	r0, #0
 80846f2:	d14f      	bne.n	8084794 <_Z15outputDataToESPv+0x31c>
        if(gps.get_nsIndicator() == 0){
 80846f4:	4825      	ldr	r0, [pc, #148]	; (808478c <_Z15outputDataToESPv+0x314>)
 80846f6:	f002 fba6 	bl	8086e46 <_ZN3GPS15get_nsIndicatorEv>
 80846fa:	b918      	cbnz	r0, 8084704 <_Z15outputDataToESPv+0x28c>
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 80846fc:	4924      	ldr	r1, [pc, #144]	; (8084790 <_Z15outputDataToESPv+0x318>)
 80846fe:	a80e      	add	r0, sp, #56	; 0x38
 8084700:	f005 fddf 	bl	808a2c2 <_ZN6String6concatEPKc>
            latitude_string += "-";
        }
    
        latitude_string += String(gps.get_latitude());
 8084704:	4821      	ldr	r0, [pc, #132]	; (808478c <_Z15outputDataToESPv+0x314>)
 8084706:	f002 fb83 	bl	8086e10 <_ZN3GPS12get_latitudeEv>
 808470a:	2306      	movs	r3, #6
 808470c:	4602      	mov	r2, r0
 808470e:	9300      	str	r3, [sp, #0]
 8084710:	a827      	add	r0, sp, #156	; 0x9c
 8084712:	460b      	mov	r3, r1
 8084714:	f005 fda4 	bl	808a260 <_ZN6StringC1Edi>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084718:	a927      	add	r1, sp, #156	; 0x9c
 808471a:	a80e      	add	r0, sp, #56	; 0x38
 808471c:	f005 fdcd 	bl	808a2ba <_ZN6String6concatERKS_>
 8084720:	a827      	add	r0, sp, #156	; 0x9c
 8084722:	f005 fca5 	bl	808a070 <_ZN6StringD1Ev>
 8084726:	e039      	b.n	808479c <_Z15outputDataToESPv+0x324>
 8084728:	200000d8 	.word	0x200000d8
 808472c:	20000c00 	.word	0x20000c00
 8084730:	08092fdc 	.word	0x08092fdc
 8084734:	08091ebf 	.word	0x08091ebf
 8084738:	20000088 	.word	0x20000088
 808473c:	08092bae 	.word	0x08092bae
 8084740:	08093258 	.word	0x08093258
 8084744:	08091ec1 	.word	0x08091ec1
 8084748:	08091ec6 	.word	0x08091ec6
 808474c:	08091ed4 	.word	0x08091ed4
 8084750:	08091edd 	.word	0x08091edd
 8084754:	20000bfc 	.word	0x20000bfc
 8084758:	08092b27 	.word	0x08092b27
 808475c:	20000228 	.word	0x20000228
 8084760:	08090c2a 	.word	0x08090c2a
 8084764:	20000b04 	.word	0x20000b04
 8084768:	08091ef0 	.word	0x08091ef0
 808476c:	200008c8 	.word	0x200008c8
 8084770:	08091ef6 	.word	0x08091ef6
 8084774:	200009a0 	.word	0x200009a0
 8084778:	08091efc 	.word	0x08091efc
 808477c:	08091f01 	.word	0x08091f01
 8084780:	200006f8 	.word	0x200006f8
 8084784:	40590000 	.word	0x40590000
 8084788:	08091f07 	.word	0x08091f07
 808478c:	20000968 	.word	0x20000968
 8084790:	08091ec4 	.word	0x08091ec4
    }else{
        latitude_string = "";
 8084794:	49b5      	ldr	r1, [pc, #724]	; (8084a6c <_Z15outputDataToESPv+0x5f4>)
 8084796:	a80e      	add	r0, sp, #56	; 0x38
 8084798:	f005 fd03 	bl	808a1a2 <_ZN6StringaSEPKc>
    }
    writer.name("Lat").value(latitude_string);
 808479c:	49b4      	ldr	r1, [pc, #720]	; (8084a70 <_Z15outputDataToESPv+0x5f8>)
 808479e:	a822      	add	r0, sp, #136	; 0x88
 80847a0:	f7fc fa74 	bl	8080c8c <_ZN5spark10JSONWriter4nameEPKc>
 80847a4:	a90e      	add	r1, sp, #56	; 0x38
 80847a6:	f7fc fa7e 	bl	8080ca6 <_ZN5spark10JSONWriter5valueERK6String>

    if(gps.get_longitude() != 0){
 80847aa:	48b2      	ldr	r0, [pc, #712]	; (8084a74 <_Z15outputDataToESPv+0x5fc>)
 80847ac:	f002 fb35 	bl	8086e1a <_ZN3GPS13get_longitudeEv>
 80847b0:	2200      	movs	r2, #0
 80847b2:	2300      	movs	r3, #0
 80847b4:	f008 f908 	bl	808c9c8 <__aeabi_dcmpeq>
 80847b8:	b9c8      	cbnz	r0, 80847ee <_Z15outputDataToESPv+0x376>
        if(gps.get_ewIndicator() == 0x01){
 80847ba:	48ae      	ldr	r0, [pc, #696]	; (8084a74 <_Z15outputDataToESPv+0x5fc>)
 80847bc:	f002 fb46 	bl	8086e4c <_ZN3GPS15get_ewIndicatorEv>
 80847c0:	2801      	cmp	r0, #1
 80847c2:	d103      	bne.n	80847cc <_Z15outputDataToESPv+0x354>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 80847c4:	49ac      	ldr	r1, [pc, #688]	; (8084a78 <_Z15outputDataToESPv+0x600>)
 80847c6:	a812      	add	r0, sp, #72	; 0x48
 80847c8:	f005 fd7b 	bl	808a2c2 <_ZN6String6concatEPKc>
            longitude_string += "-";
            
        }
        longitude_string += String(gps.get_longitude());
 80847cc:	48a9      	ldr	r0, [pc, #676]	; (8084a74 <_Z15outputDataToESPv+0x5fc>)
 80847ce:	f002 fb24 	bl	8086e1a <_ZN3GPS13get_longitudeEv>
 80847d2:	2306      	movs	r3, #6
 80847d4:	4602      	mov	r2, r0
 80847d6:	9300      	str	r3, [sp, #0]
 80847d8:	a827      	add	r0, sp, #156	; 0x9c
 80847da:	460b      	mov	r3, r1
 80847dc:	f005 fd40 	bl	808a260 <_ZN6StringC1Edi>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80847e0:	a927      	add	r1, sp, #156	; 0x9c
 80847e2:	a812      	add	r0, sp, #72	; 0x48
 80847e4:	f005 fd69 	bl	808a2ba <_ZN6String6concatERKS_>
 80847e8:	a827      	add	r0, sp, #156	; 0x9c
 80847ea:	f005 fc41 	bl	808a070 <_ZN6StringD1Ev>
    }  
      
    writer.name("Long").value(longitude_string);
 80847ee:	49a3      	ldr	r1, [pc, #652]	; (8084a7c <_Z15outputDataToESPv+0x604>)
 80847f0:	a822      	add	r0, sp, #136	; 0x88
 80847f2:	f7fc fa4b 	bl	8080c8c <_ZN5spark10JSONWriter4nameEPKc>
 80847f6:	a912      	add	r1, sp, #72	; 0x48
 80847f8:	f7fc fa55 	bl	8080ca6 <_ZN5spark10JSONWriter5valueERK6String>
    
    
    writer.endObject();
 80847fc:	a822      	add	r0, sp, #136	; 0x88
 80847fe:	f007 f9cb 	bl	808bb98 <_ZN5spark10JSONWriter9endObjectEv>
    writer.buffer()[std::min(writer.bufferSize(), writer.dataSize())] = 0;
 8084802:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8084804:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8084806:	2400      	movs	r4, #0
 8084808:	4293      	cmp	r3, r2
 808480a:	bf28      	it	cs
 808480c:	4613      	movcs	r3, r2
 808480e:	9a24      	ldr	r2, [sp, #144]	; 0x90

    cloud_output_string += String(CARBON_MONOXIDE_PACKET_CONSTANT) + String(CO_float, 3);
 8084810:	4d9b      	ldr	r5, [pc, #620]	; (8084a80 <_Z15outputDataToESPv+0x608>)
      
    writer.name("Long").value(longitude_string);
    
    
    writer.endObject();
    writer.buffer()[std::min(writer.bufferSize(), writer.dataSize())] = 0;
 8084812:	54d4      	strb	r4, [r2, r3]

    cloud_output_string += String(CARBON_MONOXIDE_PACKET_CONSTANT) + String(CO_float, 3);
 8084814:	214d      	movs	r1, #77	; 0x4d
 8084816:	a81a      	add	r0, sp, #104	; 0x68
 8084818:	f005 fcd4 	bl	808a1c4 <_ZN6StringC1Ec>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 808481c:	a91a      	add	r1, sp, #104	; 0x68
 808481e:	a827      	add	r0, sp, #156	; 0x9c
 8084820:	f005 fcac 	bl	808a17c <_ZN6StringC1ERKS_>
 8084824:	2203      	movs	r2, #3
 8084826:	6829      	ldr	r1, [r5, #0]
 8084828:	a81e      	add	r0, sp, #120	; 0x78
 808482a:	f005 fd02 	bl	808a232 <_ZN6StringC1Efi>
 808482e:	a91e      	add	r1, sp, #120	; 0x78
 8084830:	a827      	add	r0, sp, #156	; 0x9c
 8084832:	f005 fd87 	bl	808a344 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084836:	4601      	mov	r1, r0
 8084838:	a802      	add	r0, sp, #8
 808483a:	f005 fd3e 	bl	808a2ba <_ZN6String6concatERKS_>
 808483e:	a81e      	add	r0, sp, #120	; 0x78
 8084840:	f005 fc16 	bl	808a070 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084844:	a827      	add	r0, sp, #156	; 0x9c
 8084846:	f005 fc13 	bl	808a070 <_ZN6StringD1Ev>
 808484a:	a81a      	add	r0, sp, #104	; 0x68
 808484c:	f005 fc10 	bl	808a070 <_ZN6StringD1Ev>
    csv_output_string += String(CO_float, 3) + ",";
 8084850:	2203      	movs	r2, #3
 8084852:	6829      	ldr	r1, [r5, #0]
 8084854:	a81e      	add	r0, sp, #120	; 0x78
 8084856:	f005 fcec 	bl	808a232 <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 808485a:	a91e      	add	r1, sp, #120	; 0x78
 808485c:	a827      	add	r0, sp, #156	; 0x9c
 808485e:	f005 fc8d 	bl	808a17c <_ZN6StringC1ERKS_>
 8084862:	4988      	ldr	r1, [pc, #544]	; (8084a84 <_Z15outputDataToESPv+0x60c>)
 8084864:	a827      	add	r0, sp, #156	; 0x9c
 8084866:	f005 fd79 	bl	808a35c <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808486a:	4601      	mov	r1, r0
 808486c:	a806      	add	r0, sp, #24
 808486e:	f005 fd24 	bl	808a2ba <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084872:	a827      	add	r0, sp, #156	; 0x9c
 8084874:	f005 fbfc 	bl	808a070 <_ZN6StringD1Ev>
 8084878:	a81e      	add	r0, sp, #120	; 0x78
 808487a:	f005 fbf9 	bl	808a070 <_ZN6StringD1Ev>
    #if AFE2_en
    cloud_output_string += String(CARBON_MONOXIDE_PACKET_CONSTANT) + String(CO_float_2, 3);
    csv_output_string += String(CO_float_2, 3) + ",";
    #endif
    cloud_output_string += String(CARBON_DIOXIDE_PACKET_CONSTANT) + String(CO2_float, 0);
 808487e:	4d82      	ldr	r5, [pc, #520]	; (8084a88 <_Z15outputDataToESPv+0x610>)
 8084880:	2143      	movs	r1, #67	; 0x43
 8084882:	a81a      	add	r0, sp, #104	; 0x68
 8084884:	f005 fc9e 	bl	808a1c4 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084888:	a91a      	add	r1, sp, #104	; 0x68
 808488a:	a827      	add	r0, sp, #156	; 0x9c
 808488c:	f005 fc76 	bl	808a17c <_ZN6StringC1ERKS_>
 8084890:	4622      	mov	r2, r4
 8084892:	6829      	ldr	r1, [r5, #0]
 8084894:	a81e      	add	r0, sp, #120	; 0x78
 8084896:	f005 fccc 	bl	808a232 <_ZN6StringC1Efi>
 808489a:	a91e      	add	r1, sp, #120	; 0x78
 808489c:	a827      	add	r0, sp, #156	; 0x9c
 808489e:	f005 fd51 	bl	808a344 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80848a2:	4601      	mov	r1, r0
 80848a4:	a802      	add	r0, sp, #8
 80848a6:	f005 fd08 	bl	808a2ba <_ZN6String6concatERKS_>
 80848aa:	a81e      	add	r0, sp, #120	; 0x78
 80848ac:	f005 fbe0 	bl	808a070 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80848b0:	a827      	add	r0, sp, #156	; 0x9c
 80848b2:	f005 fbdd 	bl	808a070 <_ZN6StringD1Ev>
 80848b6:	a81a      	add	r0, sp, #104	; 0x68
 80848b8:	f005 fbda 	bl	808a070 <_ZN6StringD1Ev>
    csv_output_string += String(CO2_float, 0) + ",";
 80848bc:	4622      	mov	r2, r4
 80848be:	6829      	ldr	r1, [r5, #0]
 80848c0:	a81e      	add	r0, sp, #120	; 0x78
 80848c2:	f005 fcb6 	bl	808a232 <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80848c6:	a91e      	add	r1, sp, #120	; 0x78
 80848c8:	a827      	add	r0, sp, #156	; 0x9c
 80848ca:	f005 fc57 	bl	808a17c <_ZN6StringC1ERKS_>
 80848ce:	496d      	ldr	r1, [pc, #436]	; (8084a84 <_Z15outputDataToESPv+0x60c>)
 80848d0:	a827      	add	r0, sp, #156	; 0x9c
 80848d2:	f005 fd43 	bl	808a35c <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80848d6:	4601      	mov	r1, r0
 80848d8:	a806      	add	r0, sp, #24
 80848da:	f005 fcee 	bl	808a2ba <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80848de:	a827      	add	r0, sp, #156	; 0x9c
 80848e0:	f005 fbc6 	bl	808a070 <_ZN6StringD1Ev>
 80848e4:	a81e      	add	r0, sp, #120	; 0x78
 80848e6:	f005 fbc3 	bl	808a070 <_ZN6StringD1Ev>

    if(voc_enabled){
 80848ea:	4b68      	ldr	r3, [pc, #416]	; (8084a8c <_Z15outputDataToESPv+0x614>)
 80848ec:	681b      	ldr	r3, [r3, #0]
 80848ee:	2b00      	cmp	r3, #0
 80848f0:	d035      	beq.n	808495e <_Z15outputDataToESPv+0x4e6>
        cloud_output_string += String(VOC_PACKET_CONSTANT) + String(air_quality_score, 1);
 80848f2:	2167      	movs	r1, #103	; 0x67
 80848f4:	4c66      	ldr	r4, [pc, #408]	; (8084a90 <_Z15outputDataToESPv+0x618>)
 80848f6:	a81a      	add	r0, sp, #104	; 0x68
 80848f8:	f005 fc64 	bl	808a1c4 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80848fc:	a91a      	add	r1, sp, #104	; 0x68
 80848fe:	a827      	add	r0, sp, #156	; 0x9c
 8084900:	f005 fc3c 	bl	808a17c <_ZN6StringC1ERKS_>
 8084904:	2201      	movs	r2, #1
 8084906:	6821      	ldr	r1, [r4, #0]
 8084908:	a81e      	add	r0, sp, #120	; 0x78
 808490a:	f005 fc92 	bl	808a232 <_ZN6StringC1Efi>
 808490e:	a91e      	add	r1, sp, #120	; 0x78
 8084910:	a827      	add	r0, sp, #156	; 0x9c
 8084912:	f005 fd17 	bl	808a344 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084916:	4601      	mov	r1, r0
 8084918:	a802      	add	r0, sp, #8
 808491a:	f005 fcce 	bl	808a2ba <_ZN6String6concatERKS_>
 808491e:	a81e      	add	r0, sp, #120	; 0x78
 8084920:	f005 fba6 	bl	808a070 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084924:	a827      	add	r0, sp, #156	; 0x9c
 8084926:	f005 fba3 	bl	808a070 <_ZN6StringD1Ev>
 808492a:	a81a      	add	r0, sp, #104	; 0x68
 808492c:	f005 fba0 	bl	808a070 <_ZN6StringD1Ev>
        csv_output_string += String(air_quality_score, 1) + ",";
 8084930:	2201      	movs	r2, #1
 8084932:	6821      	ldr	r1, [r4, #0]
 8084934:	a81e      	add	r0, sp, #120	; 0x78
 8084936:	f005 fc7c 	bl	808a232 <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 808493a:	a91e      	add	r1, sp, #120	; 0x78
 808493c:	a827      	add	r0, sp, #156	; 0x9c
 808493e:	f005 fc1d 	bl	808a17c <_ZN6StringC1ERKS_>
 8084942:	4950      	ldr	r1, [pc, #320]	; (8084a84 <_Z15outputDataToESPv+0x60c>)
 8084944:	a827      	add	r0, sp, #156	; 0x9c
 8084946:	f005 fd09 	bl	808a35c <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808494a:	4601      	mov	r1, r0
 808494c:	a806      	add	r0, sp, #24
 808494e:	f005 fcb4 	bl	808a2ba <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084952:	a827      	add	r0, sp, #156	; 0x9c
 8084954:	f005 fb8c 	bl	808a070 <_ZN6StringD1Ev>
 8084958:	a81e      	add	r0, sp, #120	; 0x78
 808495a:	f005 fb89 	bl	808a070 <_ZN6StringD1Ev>
    }
    cloud_output_string += String(PM1_PACKET_CONSTANT) + String(PM01Value);
 808495e:	4c4d      	ldr	r4, [pc, #308]	; (8084a94 <_Z15outputDataToESPv+0x61c>)
 8084960:	2172      	movs	r1, #114	; 0x72
 8084962:	a81a      	add	r0, sp, #104	; 0x68
 8084964:	f005 fc2e 	bl	808a1c4 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084968:	a91a      	add	r1, sp, #104	; 0x68
 808496a:	a827      	add	r0, sp, #156	; 0x9c
 808496c:	f005 fc06 	bl	808a17c <_ZN6StringC1ERKS_>
 8084970:	220a      	movs	r2, #10
 8084972:	6821      	ldr	r1, [r4, #0]
 8084974:	a81e      	add	r0, sp, #120	; 0x78
 8084976:	f005 fc36 	bl	808a1e6 <_ZN6StringC1Eih>
 808497a:	a91e      	add	r1, sp, #120	; 0x78
 808497c:	a827      	add	r0, sp, #156	; 0x9c
 808497e:	f005 fce1 	bl	808a344 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084982:	4601      	mov	r1, r0
 8084984:	a802      	add	r0, sp, #8
 8084986:	f005 fc98 	bl	808a2ba <_ZN6String6concatERKS_>
 808498a:	a81e      	add	r0, sp, #120	; 0x78
 808498c:	f005 fb70 	bl	808a070 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084990:	a827      	add	r0, sp, #156	; 0x9c
 8084992:	f005 fb6d 	bl	808a070 <_ZN6StringD1Ev>
 8084996:	a81a      	add	r0, sp, #104	; 0x68
 8084998:	f005 fb6a 	bl	808a070 <_ZN6StringD1Ev>
    csv_output_string += String(PM01Value) + ",";
 808499c:	220a      	movs	r2, #10
 808499e:	6821      	ldr	r1, [r4, #0]
 80849a0:	a81e      	add	r0, sp, #120	; 0x78
 80849a2:	f005 fc20 	bl	808a1e6 <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80849a6:	a91e      	add	r1, sp, #120	; 0x78
 80849a8:	a827      	add	r0, sp, #156	; 0x9c
 80849aa:	f005 fbe7 	bl	808a17c <_ZN6StringC1ERKS_>
 80849ae:	4935      	ldr	r1, [pc, #212]	; (8084a84 <_Z15outputDataToESPv+0x60c>)
 80849b0:	a827      	add	r0, sp, #156	; 0x9c
 80849b2:	f005 fcd3 	bl	808a35c <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80849b6:	4601      	mov	r1, r0
 80849b8:	a806      	add	r0, sp, #24
 80849ba:	f005 fc7e 	bl	808a2ba <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80849be:	a827      	add	r0, sp, #156	; 0x9c
 80849c0:	f005 fb56 	bl	808a070 <_ZN6StringD1Ev>
 80849c4:	a81e      	add	r0, sp, #120	; 0x78
 80849c6:	f005 fb53 	bl	808a070 <_ZN6StringD1Ev>
    cloud_output_string += String(PM2PT5_PACKET_CONSTANT) + String(corrected_PM_25, 0);
 80849ca:	4c33      	ldr	r4, [pc, #204]	; (8084a98 <_Z15outputDataToESPv+0x620>)
 80849cc:	2152      	movs	r1, #82	; 0x52
 80849ce:	a81a      	add	r0, sp, #104	; 0x68
 80849d0:	f005 fbf8 	bl	808a1c4 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80849d4:	a91a      	add	r1, sp, #104	; 0x68
 80849d6:	a827      	add	r0, sp, #156	; 0x9c
 80849d8:	f005 fbd0 	bl	808a17c <_ZN6StringC1ERKS_>
 80849dc:	2200      	movs	r2, #0
 80849de:	6821      	ldr	r1, [r4, #0]
 80849e0:	a81e      	add	r0, sp, #120	; 0x78
 80849e2:	f005 fc26 	bl	808a232 <_ZN6StringC1Efi>
 80849e6:	a91e      	add	r1, sp, #120	; 0x78
 80849e8:	a827      	add	r0, sp, #156	; 0x9c
 80849ea:	f005 fcab 	bl	808a344 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80849ee:	4601      	mov	r1, r0
 80849f0:	a802      	add	r0, sp, #8
 80849f2:	f005 fc62 	bl	808a2ba <_ZN6String6concatERKS_>
 80849f6:	a81e      	add	r0, sp, #120	; 0x78
 80849f8:	f005 fb3a 	bl	808a070 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80849fc:	a827      	add	r0, sp, #156	; 0x9c
 80849fe:	f005 fb37 	bl	808a070 <_ZN6StringD1Ev>
 8084a02:	a81a      	add	r0, sp, #104	; 0x68
 8084a04:	f005 fb34 	bl	808a070 <_ZN6StringD1Ev>
    csv_output_string += String(corrected_PM_25, 0) + ",";
 8084a08:	2200      	movs	r2, #0
 8084a0a:	6821      	ldr	r1, [r4, #0]
 8084a0c:	a81e      	add	r0, sp, #120	; 0x78
 8084a0e:	f005 fc10 	bl	808a232 <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084a12:	a91e      	add	r1, sp, #120	; 0x78
 8084a14:	a827      	add	r0, sp, #156	; 0x9c
 8084a16:	f005 fbb1 	bl	808a17c <_ZN6StringC1ERKS_>
 8084a1a:	491a      	ldr	r1, [pc, #104]	; (8084a84 <_Z15outputDataToESPv+0x60c>)
 8084a1c:	a827      	add	r0, sp, #156	; 0x9c
 8084a1e:	f005 fc9d 	bl	808a35c <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084a22:	4601      	mov	r1, r0
 8084a24:	a806      	add	r0, sp, #24
 8084a26:	f005 fc48 	bl	808a2ba <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084a2a:	a827      	add	r0, sp, #156	; 0x9c
 8084a2c:	f005 fb20 	bl	808a070 <_ZN6StringD1Ev>
 8084a30:	a81e      	add	r0, sp, #120	; 0x78
 8084a32:	f005 fb1d 	bl	808a070 <_ZN6StringD1Ev>
    cloud_output_string += String(PM10_PACKET_CONSTANT) + String(PM10Value);
 8084a36:	4c19      	ldr	r4, [pc, #100]	; (8084a9c <_Z15outputDataToESPv+0x624>)
 8084a38:	2171      	movs	r1, #113	; 0x71
 8084a3a:	a81a      	add	r0, sp, #104	; 0x68
 8084a3c:	f005 fbc2 	bl	808a1c4 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084a40:	a91a      	add	r1, sp, #104	; 0x68
 8084a42:	a827      	add	r0, sp, #156	; 0x9c
 8084a44:	f005 fb9a 	bl	808a17c <_ZN6StringC1ERKS_>
 8084a48:	220a      	movs	r2, #10
 8084a4a:	6821      	ldr	r1, [r4, #0]
 8084a4c:	a81e      	add	r0, sp, #120	; 0x78
 8084a4e:	f005 fbca 	bl	808a1e6 <_ZN6StringC1Eih>
 8084a52:	a91e      	add	r1, sp, #120	; 0x78
 8084a54:	a827      	add	r0, sp, #156	; 0x9c
 8084a56:	f005 fc75 	bl	808a344 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084a5a:	4601      	mov	r1, r0
 8084a5c:	a802      	add	r0, sp, #8
 8084a5e:	f005 fc2c 	bl	808a2ba <_ZN6String6concatERKS_>
 8084a62:	a81e      	add	r0, sp, #120	; 0x78
 8084a64:	f005 fb04 	bl	808a070 <_ZN6StringD1Ev>
 8084a68:	e01a      	b.n	8084aa0 <_Z15outputDataToESPv+0x628>
 8084a6a:	bf00      	nop
 8084a6c:	08092fdc 	.word	0x08092fdc
 8084a70:	08091f0d 	.word	0x08091f0d
 8084a74:	20000968 	.word	0x20000968
 8084a78:	08091ec4 	.word	0x08091ec4
 8084a7c:	08091f11 	.word	0x08091f11
 8084a80:	20000b04 	.word	0x20000b04
 8084a84:	08092bae 	.word	0x08092bae
 8084a88:	20000228 	.word	0x20000228
 8084a8c:	20000b84 	.word	0x20000b84
 8084a90:	20000b08 	.word	0x20000b08
 8084a94:	200008c8 	.word	0x200008c8
 8084a98:	200009a0 	.word	0x200009a0
 8084a9c:	20000b1c 	.word	0x20000b1c

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084aa0:	a827      	add	r0, sp, #156	; 0x9c
 8084aa2:	f005 fae5 	bl	808a070 <_ZN6StringD1Ev>
 8084aa6:	a81a      	add	r0, sp, #104	; 0x68
 8084aa8:	f005 fae2 	bl	808a070 <_ZN6StringD1Ev>
    csv_output_string += String(PM10Value) + ",";
 8084aac:	220a      	movs	r2, #10
 8084aae:	6821      	ldr	r1, [r4, #0]
 8084ab0:	a81e      	add	r0, sp, #120	; 0x78
 8084ab2:	f005 fb98 	bl	808a1e6 <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084ab6:	a91e      	add	r1, sp, #120	; 0x78
 8084ab8:	a827      	add	r0, sp, #156	; 0x9c
 8084aba:	f005 fb5f 	bl	808a17c <_ZN6StringC1ERKS_>
 8084abe:	49b9      	ldr	r1, [pc, #740]	; (8084da4 <_Z15outputDataToESPv+0x92c>)
 8084ac0:	a827      	add	r0, sp, #156	; 0x9c
 8084ac2:	f005 fc4b 	bl	808a35c <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084ac6:	4601      	mov	r1, r0
 8084ac8:	a806      	add	r0, sp, #24
 8084aca:	f005 fbf6 	bl	808a2ba <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084ace:	a827      	add	r0, sp, #156	; 0x9c
 8084ad0:	f005 face 	bl	808a070 <_ZN6StringD1Ev>
 8084ad4:	a81e      	add	r0, sp, #120	; 0x78
 8084ad6:	f005 facb 	bl	808a070 <_ZN6StringD1Ev>
    cloud_output_string += String(TEMPERATURE_PACKET_CONSTANT) + String(readTemperature(), 1);
 8084ada:	2174      	movs	r1, #116	; 0x74
 8084adc:	a81a      	add	r0, sp, #104	; 0x68
 8084ade:	f005 fb71 	bl	808a1c4 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084ae2:	a91a      	add	r1, sp, #104	; 0x68
 8084ae4:	a827      	add	r0, sp, #156	; 0x9c
 8084ae6:	f005 fb49 	bl	808a17c <_ZN6StringC1ERKS_>
 8084aea:	f7fc fd01 	bl	80814f0 <_Z15readTemperaturev>
 8084aee:	2201      	movs	r2, #1
 8084af0:	4601      	mov	r1, r0
 8084af2:	a81e      	add	r0, sp, #120	; 0x78
 8084af4:	f005 fb9d 	bl	808a232 <_ZN6StringC1Efi>
 8084af8:	a91e      	add	r1, sp, #120	; 0x78
 8084afa:	a827      	add	r0, sp, #156	; 0x9c
 8084afc:	f005 fc22 	bl	808a344 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084b00:	4601      	mov	r1, r0
 8084b02:	a802      	add	r0, sp, #8
 8084b04:	f005 fbd9 	bl	808a2ba <_ZN6String6concatERKS_>
 8084b08:	a81e      	add	r0, sp, #120	; 0x78
 8084b0a:	f005 fab1 	bl	808a070 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084b0e:	a827      	add	r0, sp, #156	; 0x9c
 8084b10:	f005 faae 	bl	808a070 <_ZN6StringD1Ev>
 8084b14:	a81a      	add	r0, sp, #104	; 0x68
 8084b16:	f005 faab 	bl	808a070 <_ZN6StringD1Ev>
    csv_output_string += String(readTemperature(), 1) + ",";
 8084b1a:	f7fc fce9 	bl	80814f0 <_Z15readTemperaturev>
 8084b1e:	2201      	movs	r2, #1
 8084b20:	4601      	mov	r1, r0
 8084b22:	a81e      	add	r0, sp, #120	; 0x78
 8084b24:	f005 fb85 	bl	808a232 <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084b28:	a91e      	add	r1, sp, #120	; 0x78
 8084b2a:	a827      	add	r0, sp, #156	; 0x9c
 8084b2c:	f005 fb26 	bl	808a17c <_ZN6StringC1ERKS_>
 8084b30:	499c      	ldr	r1, [pc, #624]	; (8084da4 <_Z15outputDataToESPv+0x92c>)
 8084b32:	a827      	add	r0, sp, #156	; 0x9c
 8084b34:	f005 fc12 	bl	808a35c <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084b38:	4601      	mov	r1, r0
 8084b3a:	a806      	add	r0, sp, #24
 8084b3c:	f005 fbbd 	bl	808a2ba <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084b40:	a827      	add	r0, sp, #156	; 0x9c
 8084b42:	f005 fa95 	bl	808a070 <_ZN6StringD1Ev>
 8084b46:	a81e      	add	r0, sp, #120	; 0x78
 8084b48:	f005 fa92 	bl	808a070 <_ZN6StringD1Ev>
    cloud_output_string += String(PRESSURE_PACKET_CONSTANT) + String(bme.pressure / 100.0, 1);
 8084b4c:	4d96      	ldr	r5, [pc, #600]	; (8084da8 <_Z15outputDataToESPv+0x930>)
 8084b4e:	2150      	movs	r1, #80	; 0x50
 8084b50:	a81a      	add	r0, sp, #104	; 0x68
 8084b52:	f005 fb37 	bl	808a1c4 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084b56:	a91a      	add	r1, sp, #104	; 0x68
 8084b58:	a827      	add	r0, sp, #156	; 0x9c
 8084b5a:	f005 fb0f 	bl	808a17c <_ZN6StringC1ERKS_>
 8084b5e:	6868      	ldr	r0, [r5, #4]
 8084b60:	f007 fc76 	bl	808c450 <__aeabi_f2d>
 8084b64:	2200      	movs	r2, #0
 8084b66:	4b91      	ldr	r3, [pc, #580]	; (8084dac <_Z15outputDataToESPv+0x934>)
 8084b68:	f007 fdf0 	bl	808c74c <__aeabi_ddiv>
 8084b6c:	2401      	movs	r4, #1
 8084b6e:	4602      	mov	r2, r0
 8084b70:	460b      	mov	r3, r1
 8084b72:	9400      	str	r4, [sp, #0]
 8084b74:	a81e      	add	r0, sp, #120	; 0x78
 8084b76:	f005 fb73 	bl	808a260 <_ZN6StringC1Edi>
 8084b7a:	a91e      	add	r1, sp, #120	; 0x78
 8084b7c:	a827      	add	r0, sp, #156	; 0x9c
 8084b7e:	f005 fbe1 	bl	808a344 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084b82:	4601      	mov	r1, r0
 8084b84:	a802      	add	r0, sp, #8
 8084b86:	f005 fb98 	bl	808a2ba <_ZN6String6concatERKS_>
 8084b8a:	a81e      	add	r0, sp, #120	; 0x78
 8084b8c:	f005 fa70 	bl	808a070 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084b90:	a827      	add	r0, sp, #156	; 0x9c
 8084b92:	f005 fa6d 	bl	808a070 <_ZN6StringD1Ev>
 8084b96:	a81a      	add	r0, sp, #104	; 0x68
 8084b98:	f005 fa6a 	bl	808a070 <_ZN6StringD1Ev>
    csv_output_string += String(bme.pressure / 100.0, 1) + ",";
 8084b9c:	6868      	ldr	r0, [r5, #4]
 8084b9e:	f007 fc57 	bl	808c450 <__aeabi_f2d>
 8084ba2:	2200      	movs	r2, #0
 8084ba4:	4b81      	ldr	r3, [pc, #516]	; (8084dac <_Z15outputDataToESPv+0x934>)
 8084ba6:	f007 fdd1 	bl	808c74c <__aeabi_ddiv>
 8084baa:	9400      	str	r4, [sp, #0]
 8084bac:	460b      	mov	r3, r1
 8084bae:	4602      	mov	r2, r0
 8084bb0:	a81e      	add	r0, sp, #120	; 0x78
 8084bb2:	f005 fb55 	bl	808a260 <_ZN6StringC1Edi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084bb6:	a91e      	add	r1, sp, #120	; 0x78
 8084bb8:	a827      	add	r0, sp, #156	; 0x9c
 8084bba:	f005 fadf 	bl	808a17c <_ZN6StringC1ERKS_>
 8084bbe:	4979      	ldr	r1, [pc, #484]	; (8084da4 <_Z15outputDataToESPv+0x92c>)
 8084bc0:	a827      	add	r0, sp, #156	; 0x9c
 8084bc2:	f005 fbcb 	bl	808a35c <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084bc6:	4601      	mov	r1, r0
 8084bc8:	a806      	add	r0, sp, #24
 8084bca:	f005 fb76 	bl	808a2ba <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084bce:	a827      	add	r0, sp, #156	; 0x9c
 8084bd0:	f005 fa4e 	bl	808a070 <_ZN6StringD1Ev>
 8084bd4:	a81e      	add	r0, sp, #120	; 0x78
 8084bd6:	f005 fa4b 	bl	808a070 <_ZN6StringD1Ev>
    cloud_output_string += String(HUMIDITY_PACKET_CONSTANT) + String(readHumidity(), 1);
 8084bda:	2168      	movs	r1, #104	; 0x68
 8084bdc:	eb0d 0001 	add.w	r0, sp, r1
 8084be0:	f005 faf0 	bl	808a1c4 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084be4:	a91a      	add	r1, sp, #104	; 0x68
 8084be6:	a827      	add	r0, sp, #156	; 0x9c
 8084be8:	f005 fac8 	bl	808a17c <_ZN6StringC1ERKS_>
 8084bec:	f7fc fcfe 	bl	80815ec <_Z12readHumidityv>
 8084bf0:	4622      	mov	r2, r4
 8084bf2:	4601      	mov	r1, r0
 8084bf4:	a81e      	add	r0, sp, #120	; 0x78
 8084bf6:	f005 fb1c 	bl	808a232 <_ZN6StringC1Efi>
 8084bfa:	a91e      	add	r1, sp, #120	; 0x78
 8084bfc:	a827      	add	r0, sp, #156	; 0x9c
 8084bfe:	f005 fba1 	bl	808a344 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084c02:	4601      	mov	r1, r0
 8084c04:	a802      	add	r0, sp, #8
 8084c06:	f005 fb58 	bl	808a2ba <_ZN6String6concatERKS_>
 8084c0a:	a81e      	add	r0, sp, #120	; 0x78
 8084c0c:	f005 fa30 	bl	808a070 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084c10:	a827      	add	r0, sp, #156	; 0x9c
 8084c12:	f005 fa2d 	bl	808a070 <_ZN6StringD1Ev>
 8084c16:	a81a      	add	r0, sp, #104	; 0x68
 8084c18:	f005 fa2a 	bl	808a070 <_ZN6StringD1Ev>
    csv_output_string += String(readHumidity(), 1) + ",";
 8084c1c:	f7fc fce6 	bl	80815ec <_Z12readHumidityv>
 8084c20:	4622      	mov	r2, r4
 8084c22:	4601      	mov	r1, r0
 8084c24:	a81e      	add	r0, sp, #120	; 0x78
 8084c26:	f005 fb04 	bl	808a232 <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084c2a:	a91e      	add	r1, sp, #120	; 0x78
 8084c2c:	a827      	add	r0, sp, #156	; 0x9c
 8084c2e:	f005 faa5 	bl	808a17c <_ZN6StringC1ERKS_>
 8084c32:	495c      	ldr	r1, [pc, #368]	; (8084da4 <_Z15outputDataToESPv+0x92c>)
 8084c34:	a827      	add	r0, sp, #156	; 0x9c
 8084c36:	f005 fb91 	bl	808a35c <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084c3a:	4601      	mov	r1, r0
 8084c3c:	a806      	add	r0, sp, #24
 8084c3e:	f005 fb3c 	bl	808a2ba <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084c42:	a827      	add	r0, sp, #156	; 0x9c
 8084c44:	f005 fa14 	bl	808a070 <_ZN6StringD1Ev>
 8084c48:	a81e      	add	r0, sp, #120	; 0x78
 8084c4a:	f005 fa11 	bl	808a070 <_ZN6StringD1Ev>
    if(ozone_enabled){
 8084c4e:	4b58      	ldr	r3, [pc, #352]	; (8084db0 <_Z15outputDataToESPv+0x938>)
 8084c50:	681b      	ldr	r3, [r3, #0]
 8084c52:	2b00      	cmp	r3, #0
 8084c54:	d035      	beq.n	8084cc2 <_Z15outputDataToESPv+0x84a>
        cloud_output_string += String(OZONE_PACKET_CONSTANT) + String(O3_float, 1);
 8084c56:	214f      	movs	r1, #79	; 0x4f
 8084c58:	4d56      	ldr	r5, [pc, #344]	; (8084db4 <_Z15outputDataToESPv+0x93c>)
 8084c5a:	a81a      	add	r0, sp, #104	; 0x68
 8084c5c:	f005 fab2 	bl	808a1c4 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084c60:	a91a      	add	r1, sp, #104	; 0x68
 8084c62:	a827      	add	r0, sp, #156	; 0x9c
 8084c64:	f005 fa8a 	bl	808a17c <_ZN6StringC1ERKS_>
 8084c68:	4622      	mov	r2, r4
 8084c6a:	6829      	ldr	r1, [r5, #0]
 8084c6c:	a81e      	add	r0, sp, #120	; 0x78
 8084c6e:	f005 fae0 	bl	808a232 <_ZN6StringC1Efi>
 8084c72:	a91e      	add	r1, sp, #120	; 0x78
 8084c74:	a827      	add	r0, sp, #156	; 0x9c
 8084c76:	f005 fb65 	bl	808a344 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084c7a:	4601      	mov	r1, r0
 8084c7c:	a802      	add	r0, sp, #8
 8084c7e:	f005 fb1c 	bl	808a2ba <_ZN6String6concatERKS_>
 8084c82:	a81e      	add	r0, sp, #120	; 0x78
 8084c84:	f005 f9f4 	bl	808a070 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084c88:	a827      	add	r0, sp, #156	; 0x9c
 8084c8a:	f005 f9f1 	bl	808a070 <_ZN6StringD1Ev>
 8084c8e:	a81a      	add	r0, sp, #104	; 0x68
 8084c90:	f005 f9ee 	bl	808a070 <_ZN6StringD1Ev>
        csv_output_string += String(O3_float, 1) + ",";
 8084c94:	4622      	mov	r2, r4
 8084c96:	6829      	ldr	r1, [r5, #0]
 8084c98:	a81e      	add	r0, sp, #120	; 0x78
 8084c9a:	f005 faca 	bl	808a232 <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084c9e:	a91e      	add	r1, sp, #120	; 0x78
 8084ca0:	a827      	add	r0, sp, #156	; 0x9c
 8084ca2:	f005 fa6b 	bl	808a17c <_ZN6StringC1ERKS_>
 8084ca6:	493f      	ldr	r1, [pc, #252]	; (8084da4 <_Z15outputDataToESPv+0x92c>)
 8084ca8:	a827      	add	r0, sp, #156	; 0x9c
 8084caa:	f005 fb57 	bl	808a35c <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084cae:	4601      	mov	r1, r0
 8084cb0:	a806      	add	r0, sp, #24
 8084cb2:	f005 fb02 	bl	808a2ba <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084cb6:	a827      	add	r0, sp, #156	; 0x9c
 8084cb8:	f005 f9da 	bl	808a070 <_ZN6StringD1Ev>
 8084cbc:	a81e      	add	r0, sp, #120	; 0x78
 8084cbe:	f005 f9d7 	bl	808a070 <_ZN6StringD1Ev>
    }
    cloud_output_string += String(BATTERY_PACKET_CONSTANT) + String(fuel.getSoC(), 1);
 8084cc2:	2178      	movs	r1, #120	; 0x78
 8084cc4:	a81a      	add	r0, sp, #104	; 0x68
 8084cc6:	f005 fa7d 	bl	808a1c4 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084cca:	a91a      	add	r1, sp, #104	; 0x68
 8084ccc:	a827      	add	r0, sp, #156	; 0x9c
 8084cce:	f005 fa55 	bl	808a17c <_ZN6StringC1ERKS_>
 8084cd2:	4839      	ldr	r0, [pc, #228]	; (8084db8 <_Z15outputDataToESPv+0x940>)
 8084cd4:	f006 f83a 	bl	808ad4c <_ZN9FuelGauge6getSoCEv>
 8084cd8:	2201      	movs	r2, #1
 8084cda:	4601      	mov	r1, r0
 8084cdc:	a81e      	add	r0, sp, #120	; 0x78
 8084cde:	f005 faa8 	bl	808a232 <_ZN6StringC1Efi>
 8084ce2:	a91e      	add	r1, sp, #120	; 0x78
 8084ce4:	a827      	add	r0, sp, #156	; 0x9c
 8084ce6:	f005 fb2d 	bl	808a344 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084cea:	4601      	mov	r1, r0
 8084cec:	a802      	add	r0, sp, #8
 8084cee:	f005 fae4 	bl	808a2ba <_ZN6String6concatERKS_>
 8084cf2:	a81e      	add	r0, sp, #120	; 0x78
 8084cf4:	f005 f9bc 	bl	808a070 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084cf8:	a827      	add	r0, sp, #156	; 0x9c
 8084cfa:	f005 f9b9 	bl	808a070 <_ZN6StringD1Ev>
 8084cfe:	a81a      	add	r0, sp, #104	; 0x68
 8084d00:	f005 f9b6 	bl	808a070 <_ZN6StringD1Ev>
    csv_output_string += String(fuel.getSoC(), 1) + ",";
 8084d04:	482c      	ldr	r0, [pc, #176]	; (8084db8 <_Z15outputDataToESPv+0x940>)
 8084d06:	f006 f821 	bl	808ad4c <_ZN9FuelGauge6getSoCEv>
 8084d0a:	2201      	movs	r2, #1
 8084d0c:	4601      	mov	r1, r0
 8084d0e:	a81e      	add	r0, sp, #120	; 0x78
 8084d10:	f005 fa8f 	bl	808a232 <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084d14:	a91e      	add	r1, sp, #120	; 0x78
 8084d16:	a827      	add	r0, sp, #156	; 0x9c
 8084d18:	f005 fa30 	bl	808a17c <_ZN6StringC1ERKS_>
 8084d1c:	4921      	ldr	r1, [pc, #132]	; (8084da4 <_Z15outputDataToESPv+0x92c>)
 8084d1e:	a827      	add	r0, sp, #156	; 0x9c
 8084d20:	f005 fb1c 	bl	808a35c <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084d24:	4601      	mov	r1, r0
 8084d26:	a806      	add	r0, sp, #24
 8084d28:	f005 fac7 	bl	808a2ba <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084d2c:	a827      	add	r0, sp, #156	; 0x9c
 8084d2e:	f005 f99f 	bl	808a070 <_ZN6StringD1Ev>
 8084d32:	a81e      	add	r0, sp, #120	; 0x78
 8084d34:	f005 f99c 	bl	808a070 <_ZN6StringD1Ev>
    //cloud_output_string += String(SOUND_PACKET_CONSTANT) + String(sound_average, 0);

    //csv_output_string += String(sound_average, 0) + ",";
    cloud_output_string += String(LATITUDE_PACKET_CONSTANT);
 8084d38:	2161      	movs	r1, #97	; 0x61
 8084d3a:	a827      	add	r0, sp, #156	; 0x9c
 8084d3c:	f005 fa42 	bl	808a1c4 <_ZN6StringC1Ec>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084d40:	a927      	add	r1, sp, #156	; 0x9c
 8084d42:	a802      	add	r0, sp, #8
 8084d44:	f005 fab9 	bl	808a2ba <_ZN6String6concatERKS_>
 8084d48:	a827      	add	r0, sp, #156	; 0x9c
 8084d4a:	f005 f991 	bl	808a070 <_ZN6StringD1Ev>

    if(gps.get_latitude() != 0){
 8084d4e:	481b      	ldr	r0, [pc, #108]	; (8084dbc <_Z15outputDataToESPv+0x944>)
 8084d50:	f002 f85e 	bl	8086e10 <_ZN3GPS12get_latitudeEv>
 8084d54:	2200      	movs	r2, #0
 8084d56:	2300      	movs	r3, #0
 8084d58:	f007 fe36 	bl	808c9c8 <__aeabi_dcmpeq>
 8084d5c:	2800      	cmp	r0, #0
 8084d5e:	d143      	bne.n	8084de8 <_Z15outputDataToESPv+0x970>
        if(gps.get_nsIndicator() == 0){
 8084d60:	4816      	ldr	r0, [pc, #88]	; (8084dbc <_Z15outputDataToESPv+0x944>)
 8084d62:	f002 f870 	bl	8086e46 <_ZN3GPS15get_nsIndicatorEv>
 8084d66:	b938      	cbnz	r0, 8084d78 <_Z15outputDataToESPv+0x900>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8084d68:	4915      	ldr	r1, [pc, #84]	; (8084dc0 <_Z15outputDataToESPv+0x948>)
 8084d6a:	a806      	add	r0, sp, #24
 8084d6c:	f005 faa9 	bl	808a2c2 <_ZN6String6concatEPKc>
 8084d70:	4913      	ldr	r1, [pc, #76]	; (8084dc0 <_Z15outputDataToESPv+0x948>)
 8084d72:	a802      	add	r0, sp, #8
 8084d74:	f005 faa5 	bl	808a2c2 <_ZN6String6concatEPKc>
            csv_output_string += "-";
            cloud_output_string += "-";
        }
        csv_output_string += String(gps.get_latitude()) + ",";
 8084d78:	4810      	ldr	r0, [pc, #64]	; (8084dbc <_Z15outputDataToESPv+0x944>)
 8084d7a:	f002 f849 	bl	8086e10 <_ZN3GPS12get_latitudeEv>
 8084d7e:	2406      	movs	r4, #6
 8084d80:	4602      	mov	r2, r0
 8084d82:	460b      	mov	r3, r1
 8084d84:	9400      	str	r4, [sp, #0]
 8084d86:	a81e      	add	r0, sp, #120	; 0x78
 8084d88:	f005 fa6a 	bl	808a260 <_ZN6StringC1Edi>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084d8c:	a91e      	add	r1, sp, #120	; 0x78
 8084d8e:	a827      	add	r0, sp, #156	; 0x9c
 8084d90:	f005 f9f4 	bl	808a17c <_ZN6StringC1ERKS_>
 8084d94:	4903      	ldr	r1, [pc, #12]	; (8084da4 <_Z15outputDataToESPv+0x92c>)
 8084d96:	a827      	add	r0, sp, #156	; 0x9c
 8084d98:	f005 fae0 	bl	808a35c <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084d9c:	4601      	mov	r1, r0
 8084d9e:	a806      	add	r0, sp, #24
 8084da0:	e010      	b.n	8084dc4 <_Z15outputDataToESPv+0x94c>
 8084da2:	bf00      	nop
 8084da4:	08092bae 	.word	0x08092bae
 8084da8:	200006f8 	.word	0x200006f8
 8084dac:	40590000 	.word	0x40590000
 8084db0:	20000ab8 	.word	0x20000ab8
 8084db4:	20000b80 	.word	0x20000b80
 8084db8:	200008b8 	.word	0x200008b8
 8084dbc:	20000968 	.word	0x20000968
 8084dc0:	08091ec4 	.word	0x08091ec4
 8084dc4:	f005 fa79 	bl	808a2ba <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084dc8:	a827      	add	r0, sp, #156	; 0x9c
 8084dca:	f005 f951 	bl	808a070 <_ZN6StringD1Ev>
 8084dce:	a81e      	add	r0, sp, #120	; 0x78
 8084dd0:	f005 f94e 	bl	808a070 <_ZN6StringD1Ev>
        cloud_output_string += String(gps.get_latitude());
 8084dd4:	485b      	ldr	r0, [pc, #364]	; (8084f44 <_Z15outputDataToESPv+0xacc>)
 8084dd6:	f002 f81b 	bl	8086e10 <_ZN3GPS12get_latitudeEv>
 8084dda:	9400      	str	r4, [sp, #0]
 8084ddc:	4602      	mov	r2, r0
 8084dde:	460b      	mov	r3, r1
 8084de0:	a827      	add	r0, sp, #156	; 0x9c
 8084de2:	f005 fa3d 	bl	808a260 <_ZN6StringC1Edi>
 8084de6:	e019      	b.n	8084e1c <_Z15outputDataToESPv+0x9a4>
    }else{
        csv_output_string += String(geolocation_latitude)+ ",";
 8084de8:	4957      	ldr	r1, [pc, #348]	; (8084f48 <_Z15outputDataToESPv+0xad0>)
 8084dea:	a81e      	add	r0, sp, #120	; 0x78
 8084dec:	f005 f987 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084df0:	a91e      	add	r1, sp, #120	; 0x78
 8084df2:	a827      	add	r0, sp, #156	; 0x9c
 8084df4:	f005 f9c2 	bl	808a17c <_ZN6StringC1ERKS_>
 8084df8:	4954      	ldr	r1, [pc, #336]	; (8084f4c <_Z15outputDataToESPv+0xad4>)
 8084dfa:	a827      	add	r0, sp, #156	; 0x9c
 8084dfc:	f005 faae 	bl	808a35c <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084e00:	4601      	mov	r1, r0
 8084e02:	a806      	add	r0, sp, #24
 8084e04:	f005 fa59 	bl	808a2ba <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084e08:	a827      	add	r0, sp, #156	; 0x9c
 8084e0a:	f005 f931 	bl	808a070 <_ZN6StringD1Ev>
 8084e0e:	a81e      	add	r0, sp, #120	; 0x78
 8084e10:	f005 f92e 	bl	808a070 <_ZN6StringD1Ev>
        cloud_output_string += String(geolocation_latitude);
 8084e14:	494c      	ldr	r1, [pc, #304]	; (8084f48 <_Z15outputDataToESPv+0xad0>)
 8084e16:	a827      	add	r0, sp, #156	; 0x9c
 8084e18:	f005 f971 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084e1c:	a927      	add	r1, sp, #156	; 0x9c
 8084e1e:	a802      	add	r0, sp, #8
 8084e20:	f005 fa4b 	bl	808a2ba <_ZN6String6concatERKS_>
 8084e24:	a827      	add	r0, sp, #156	; 0x9c
 8084e26:	f005 f923 	bl	808a070 <_ZN6StringD1Ev>
    }

    cloud_output_string += String(LONGITUDE_PACKET_CONSTANT);
 8084e2a:	216f      	movs	r1, #111	; 0x6f
 8084e2c:	a827      	add	r0, sp, #156	; 0x9c
 8084e2e:	f005 f9c9 	bl	808a1c4 <_ZN6StringC1Ec>
 8084e32:	a927      	add	r1, sp, #156	; 0x9c
 8084e34:	a802      	add	r0, sp, #8
 8084e36:	f005 fa40 	bl	808a2ba <_ZN6String6concatERKS_>
 8084e3a:	a827      	add	r0, sp, #156	; 0x9c
 8084e3c:	f005 f918 	bl	808a070 <_ZN6StringD1Ev>

    if(gps.get_longitude() != 0){
 8084e40:	4840      	ldr	r0, [pc, #256]	; (8084f44 <_Z15outputDataToESPv+0xacc>)
 8084e42:	f001 ffea 	bl	8086e1a <_ZN3GPS13get_longitudeEv>
 8084e46:	2200      	movs	r2, #0
 8084e48:	2300      	movs	r3, #0
 8084e4a:	f007 fdbd 	bl	808c9c8 <__aeabi_dcmpeq>
 8084e4e:	2800      	cmp	r0, #0
 8084e50:	d132      	bne.n	8084eb8 <_Z15outputDataToESPv+0xa40>
        if(gps.get_ewIndicator() == 0x01){
 8084e52:	483c      	ldr	r0, [pc, #240]	; (8084f44 <_Z15outputDataToESPv+0xacc>)
 8084e54:	f001 fffa 	bl	8086e4c <_ZN3GPS15get_ewIndicatorEv>
 8084e58:	2801      	cmp	r0, #1
 8084e5a:	d107      	bne.n	8084e6c <_Z15outputDataToESPv+0x9f4>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8084e5c:	493c      	ldr	r1, [pc, #240]	; (8084f50 <_Z15outputDataToESPv+0xad8>)
 8084e5e:	a806      	add	r0, sp, #24
 8084e60:	f005 fa2f 	bl	808a2c2 <_ZN6String6concatEPKc>
 8084e64:	493a      	ldr	r1, [pc, #232]	; (8084f50 <_Z15outputDataToESPv+0xad8>)
 8084e66:	a802      	add	r0, sp, #8
 8084e68:	f005 fa2b 	bl	808a2c2 <_ZN6String6concatEPKc>
            csv_output_string += "-";
            cloud_output_string += "-";
        }
        csv_output_string += String(gps.get_longitude()) + ",";
 8084e6c:	4835      	ldr	r0, [pc, #212]	; (8084f44 <_Z15outputDataToESPv+0xacc>)
 8084e6e:	f001 ffd4 	bl	8086e1a <_ZN3GPS13get_longitudeEv>
 8084e72:	2406      	movs	r4, #6
 8084e74:	4602      	mov	r2, r0
 8084e76:	460b      	mov	r3, r1
 8084e78:	9400      	str	r4, [sp, #0]
 8084e7a:	a81e      	add	r0, sp, #120	; 0x78
 8084e7c:	f005 f9f0 	bl	808a260 <_ZN6StringC1Edi>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084e80:	a91e      	add	r1, sp, #120	; 0x78
 8084e82:	a827      	add	r0, sp, #156	; 0x9c
 8084e84:	f005 f97a 	bl	808a17c <_ZN6StringC1ERKS_>
 8084e88:	4930      	ldr	r1, [pc, #192]	; (8084f4c <_Z15outputDataToESPv+0xad4>)
 8084e8a:	a827      	add	r0, sp, #156	; 0x9c
 8084e8c:	f005 fa66 	bl	808a35c <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084e90:	4601      	mov	r1, r0
 8084e92:	a806      	add	r0, sp, #24
 8084e94:	f005 fa11 	bl	808a2ba <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084e98:	a827      	add	r0, sp, #156	; 0x9c
 8084e9a:	f005 f8e9 	bl	808a070 <_ZN6StringD1Ev>
 8084e9e:	a81e      	add	r0, sp, #120	; 0x78
 8084ea0:	f005 f8e6 	bl	808a070 <_ZN6StringD1Ev>
        cloud_output_string += String(gps.get_longitude());
 8084ea4:	4827      	ldr	r0, [pc, #156]	; (8084f44 <_Z15outputDataToESPv+0xacc>)
 8084ea6:	f001 ffb8 	bl	8086e1a <_ZN3GPS13get_longitudeEv>
 8084eaa:	9400      	str	r4, [sp, #0]
 8084eac:	4602      	mov	r2, r0
 8084eae:	460b      	mov	r3, r1
 8084eb0:	a827      	add	r0, sp, #156	; 0x9c
 8084eb2:	f005 f9d5 	bl	808a260 <_ZN6StringC1Edi>
 8084eb6:	e019      	b.n	8084eec <_Z15outputDataToESPv+0xa74>
    }else{
        csv_output_string += String(geolocation_longitude) + ",";
 8084eb8:	4926      	ldr	r1, [pc, #152]	; (8084f54 <_Z15outputDataToESPv+0xadc>)
 8084eba:	a81e      	add	r0, sp, #120	; 0x78
 8084ebc:	f005 f91f 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084ec0:	a91e      	add	r1, sp, #120	; 0x78
 8084ec2:	a827      	add	r0, sp, #156	; 0x9c
 8084ec4:	f005 f95a 	bl	808a17c <_ZN6StringC1ERKS_>
 8084ec8:	4920      	ldr	r1, [pc, #128]	; (8084f4c <_Z15outputDataToESPv+0xad4>)
 8084eca:	a827      	add	r0, sp, #156	; 0x9c
 8084ecc:	f005 fa46 	bl	808a35c <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084ed0:	4601      	mov	r1, r0
 8084ed2:	a806      	add	r0, sp, #24
 8084ed4:	f005 f9f1 	bl	808a2ba <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084ed8:	a827      	add	r0, sp, #156	; 0x9c
 8084eda:	f005 f8c9 	bl	808a070 <_ZN6StringD1Ev>
 8084ede:	a81e      	add	r0, sp, #120	; 0x78
 8084ee0:	f005 f8c6 	bl	808a070 <_ZN6StringD1Ev>
        cloud_output_string += String(geolocation_longitude);
 8084ee4:	491b      	ldr	r1, [pc, #108]	; (8084f54 <_Z15outputDataToESPv+0xadc>)
 8084ee6:	a827      	add	r0, sp, #156	; 0x9c
 8084ee8:	f005 f909 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084eec:	a927      	add	r1, sp, #156	; 0x9c
 8084eee:	a802      	add	r0, sp, #8
 8084ef0:	f005 f9e3 	bl	808a2ba <_ZN6String6concatERKS_>
 8084ef4:	a827      	add	r0, sp, #156	; 0x9c
 8084ef6:	f005 f8bb 	bl	808a070 <_ZN6StringD1Ev>
    }

    cloud_output_string += String(ACCURACY_PACKET_CONSTANT);
 8084efa:	2163      	movs	r1, #99	; 0x63
 8084efc:	a827      	add	r0, sp, #156	; 0x9c
 8084efe:	f005 f961 	bl	808a1c4 <_ZN6StringC1Ec>
 8084f02:	a927      	add	r1, sp, #156	; 0x9c
 8084f04:	a802      	add	r0, sp, #8
 8084f06:	f005 f9d8 	bl	808a2ba <_ZN6String6concatERKS_>
 8084f0a:	a827      	add	r0, sp, #156	; 0x9c
 8084f0c:	f005 f8b0 	bl	808a070 <_ZN6StringD1Ev>
    if (gps.get_longitude() != 0) {
 8084f10:	480c      	ldr	r0, [pc, #48]	; (8084f44 <_Z15outputDataToESPv+0xacc>)
 8084f12:	f001 ff82 	bl	8086e1a <_ZN3GPS13get_longitudeEv>
 8084f16:	2200      	movs	r2, #0
 8084f18:	2300      	movs	r3, #0
 8084f1a:	f007 fd55 	bl	808c9c8 <__aeabi_dcmpeq>
 8084f1e:	b9e8      	cbnz	r0, 8084f5c <_Z15outputDataToESPv+0xae4>
        //csv_output_string += String(gps.get_horizontalDillution() / 10.0) + ",";
        cloud_output_string += String(gps.get_horizontalDillution() / 10.0);
 8084f20:	4808      	ldr	r0, [pc, #32]	; (8084f44 <_Z15outputDataToESPv+0xacc>)
 8084f22:	f001 ff7f 	bl	8086e24 <_ZN3GPS23get_horizontalDillutionEv>
 8084f26:	f007 fa81 	bl	808c42c <__aeabi_i2d>
 8084f2a:	2200      	movs	r2, #0
 8084f2c:	4b0a      	ldr	r3, [pc, #40]	; (8084f58 <_Z15outputDataToESPv+0xae0>)
 8084f2e:	f007 fc0d 	bl	808c74c <__aeabi_ddiv>
 8084f32:	2306      	movs	r3, #6
 8084f34:	9300      	str	r3, [sp, #0]
 8084f36:	4602      	mov	r2, r0
 8084f38:	460b      	mov	r3, r1
 8084f3a:	a827      	add	r0, sp, #156	; 0x9c
 8084f3c:	f005 f990 	bl	808a260 <_ZN6StringC1Edi>
 8084f40:	e010      	b.n	8084f64 <_Z15outputDataToESPv+0xaec>
 8084f42:	bf00      	nop
 8084f44:	20000968 	.word	0x20000968
 8084f48:	200000ac 	.word	0x200000ac
 8084f4c:	08092bae 	.word	0x08092bae
 8084f50:	08091ec4 	.word	0x08091ec4
 8084f54:	200000b8 	.word	0x200000b8
 8084f58:	40240000 	.word	0x40240000
    } else {
        //csv_output_string += String(geolocation_accuracy) + ",";
        cloud_output_string += String(geolocation_accuracy);
 8084f5c:	4988      	ldr	r1, [pc, #544]	; (8085180 <_Z15outputDataToESPv+0xd08>)
 8084f5e:	a827      	add	r0, sp, #156	; 0x9c
 8084f60:	f005 f8cd 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
 8084f64:	a927      	add	r1, sp, #156	; 0x9c
 8084f66:	a802      	add	r0, sp, #8
 8084f68:	f005 f9a7 	bl	808a2ba <_ZN6String6concatERKS_>
 8084f6c:	a827      	add	r0, sp, #156	; 0x9c
 8084f6e:	f005 f87f 	bl	808a070 <_ZN6StringD1Ev>
    }

    //csv_output_string += String(status_word.status_int) + ",";
    csv_output_string += String(Time.format(time, "%d/%m/%y,%H:%M:%S"));
 8084f72:	4b84      	ldr	r3, [pc, #528]	; (8085184 <_Z15outputDataToESPv+0xd0c>)
 8084f74:	463a      	mov	r2, r7
 8084f76:	4984      	ldr	r1, [pc, #528]	; (8085188 <_Z15outputDataToESPv+0xd10>)
 8084f78:	a827      	add	r0, sp, #156	; 0x9c
 8084f7a:	f005 fdd3 	bl	808ab24 <_ZN9TimeClass6formatElPKc>
 8084f7e:	a927      	add	r1, sp, #156	; 0x9c
 8084f80:	a806      	add	r0, sp, #24
 8084f82:	f005 f99a 	bl	808a2ba <_ZN6String6concatERKS_>
 8084f86:	a827      	add	r0, sp, #156	; 0x9c
 8084f88:	f005 f872 	bl	808a070 <_ZN6StringD1Ev>
    cloud_output_string += String(PARTICLE_TIME_PACKET_CONSTANT) + String(Time.now());
 8084f8c:	2159      	movs	r1, #89	; 0x59
 8084f8e:	a81a      	add	r0, sp, #104	; 0x68
 8084f90:	f005 f918 	bl	808a1c4 <_ZN6StringC1Ec>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084f94:	a91a      	add	r1, sp, #104	; 0x68
 8084f96:	a827      	add	r0, sp, #156	; 0x9c
 8084f98:	f005 f8f0 	bl	808a17c <_ZN6StringC1ERKS_>
 8084f9c:	f005 fe15 	bl	808abca <_ZN9TimeClass3nowEv>
 8084fa0:	220a      	movs	r2, #10
 8084fa2:	4601      	mov	r1, r0
 8084fa4:	a81e      	add	r0, sp, #120	; 0x78
 8084fa6:	f005 f931 	bl	808a20c <_ZN6StringC1Elh>
 8084faa:	a91e      	add	r1, sp, #120	; 0x78
 8084fac:	a827      	add	r0, sp, #156	; 0x9c
 8084fae:	f005 f9c9 	bl	808a344 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084fb2:	4601      	mov	r1, r0
 8084fb4:	a802      	add	r0, sp, #8
 8084fb6:	f005 f980 	bl	808a2ba <_ZN6String6concatERKS_>
 8084fba:	a81e      	add	r0, sp, #120	; 0x78
 8084fbc:	f005 f858 	bl	808a070 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084fc0:	a827      	add	r0, sp, #156	; 0x9c
 8084fc2:	f005 f855 	bl	808a070 <_ZN6StringD1Ev>
    cloud_output_string += '&';
    if(debugging_enabled){
 8084fc6:	4c71      	ldr	r4, [pc, #452]	; (808518c <_Z15outputDataToESPv+0xd14>)
        cloud_output_string += String(geolocation_accuracy);
    }

    //csv_output_string += String(status_word.status_int) + ",";
    csv_output_string += String(Time.format(time, "%d/%m/%y,%H:%M:%S"));
    cloud_output_string += String(PARTICLE_TIME_PACKET_CONSTANT) + String(Time.now());
 8084fc8:	a81a      	add	r0, sp, #104	; 0x68
 8084fca:	f005 f851 	bl	808a070 <_ZN6StringD1Ev>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
 8084fce:	2126      	movs	r1, #38	; 0x26
 8084fd0:	a802      	add	r0, sp, #8
 8084fd2:	f005 f985 	bl	808a2e0 <_ZN6String6concatEc>
    cloud_output_string += '&';
    if(debugging_enabled){
 8084fd6:	6823      	ldr	r3, [r4, #0]
 8084fd8:	b14b      	cbz	r3, 8084fee <_Z15outputDataToESPv+0xb76>
        Serial.println("Line to write to cloud:");
 8084fda:	f006 fb33 	bl	808b644 <_Z16_fetch_usbserialv>
 8084fde:	496c      	ldr	r1, [pc, #432]	; (8085190 <_Z15outputDataToESPv+0xd18>)
 8084fe0:	f005 fa97 	bl	808a512 <_ZN5Print7printlnEPKc>
        Serial.println(cloud_output_string);
 8084fe4:	f006 fb2e 	bl	808b644 <_Z16_fetch_usbserialv>
 8084fe8:	9902      	ldr	r1, [sp, #8]
 8084fea:	f005 fa92 	bl	808a512 <_ZN5Print7printlnEPKc>
    }
    
    outputToCloud(cloud_output_string, sensible_buf);
 8084fee:	a902      	add	r1, sp, #8
 8084ff0:	a81e      	add	r0, sp, #120	; 0x78
 8084ff2:	f005 f8c3 	bl	808a17c <_ZN6StringC1ERKS_>
 8084ff6:	a964      	add	r1, sp, #400	; 0x190
 8084ff8:	a827      	add	r0, sp, #156	; 0x9c
 8084ffa:	f005 f880 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
 8084ffe:	a927      	add	r1, sp, #156	; 0x9c
 8085000:	a81e      	add	r0, sp, #120	; 0x78
 8085002:	f7ff f88f 	bl	8084124 <_Z13outputToCloud6StringS_>
 8085006:	a827      	add	r0, sp, #156	; 0x9c
 8085008:	f005 f832 	bl	808a070 <_ZN6StringD1Ev>
 808500c:	a81e      	add	r0, sp, #120	; 0x78
 808500e:	f005 f82f 	bl	808a070 <_ZN6StringD1Ev>
    
    if(esp_wifi_connection_status){
 8085012:	4b60      	ldr	r3, [pc, #384]	; (8085194 <_Z15outputDataToESPv+0xd1c>)
 8085014:	681b      	ldr	r3, [r3, #0]
 8085016:	b1ab      	cbz	r3, 8085044 <_Z15outputDataToESPv+0xbcc>
        if(debugging_enabled){
 8085018:	6823      	ldr	r3, [r4, #0]
 808501a:	b173      	cbz	r3, 808503a <_Z15outputDataToESPv+0xbc2>
            Serial.println("Sending data to esp to upload via wifi...");
 808501c:	f006 fb12 	bl	808b644 <_Z16_fetch_usbserialv>
 8085020:	495d      	ldr	r1, [pc, #372]	; (8085198 <_Z15outputDataToESPv+0xd20>)
 8085022:	f005 fa76 	bl	808a512 <_ZN5Print7printlnEPKc>
            writeLogFile("Sending data to esp to upload via wifi");
 8085026:	495d      	ldr	r1, [pc, #372]	; (808519c <_Z15outputDataToESPv+0xd24>)
 8085028:	a827      	add	r0, sp, #156	; 0x9c
 808502a:	f005 f868 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
 808502e:	a827      	add	r0, sp, #156	; 0x9c
 8085030:	f7fc fcaa 	bl	8081988 <_Z12writeLogFile6String>
 8085034:	a827      	add	r0, sp, #156	; 0x9c
 8085036:	f005 f81b 	bl	808a070 <_ZN6StringD1Ev>
          }
        Serial1.println(cloud_output_string);
 808503a:	f006 fc51 	bl	808b8e0 <_Z22__fetch_global_Serial1v>
 808503e:	9902      	ldr	r1, [sp, #8]
 8085040:	f005 fa67 	bl	808a512 <_ZN5Print7printlnEPKc>
    }
    Serial.println(csv_output_string);
 8085044:	f006 fafe 	bl	808b644 <_Z16_fetch_usbserialv>
 8085048:	9906      	ldr	r1, [sp, #24]
 808504a:	f005 fa62 	bl	808a512 <_ZN5Print7printlnEPKc>
 808504e:	4954      	ldr	r1, [pc, #336]	; (80851a0 <_Z15outputDataToESPv+0xd28>)
 8085050:	2302      	movs	r3, #2
 8085052:	220c      	movs	r2, #12
 8085054:	f5a1 608e 	sub.w	r0, r1, #1136	; 0x470
 8085058:	f7fb feb4 	bl	8080dc4 <_ZN9SdFatBase5beginEP9SdSpiBasehh>

    //write data to file
    if (sd.begin(CS)){
 808505c:	2800      	cmp	r0, #0
 808505e:	d036      	beq.n	80850ce <_Z15outputDataToESPv+0xc56>
        if(debugging_enabled)
 8085060:	6823      	ldr	r3, [r4, #0]
 8085062:	b123      	cbz	r3, 808506e <_Z15outputDataToESPv+0xbf6>
            Serial.println("Writing row to file.");
 8085064:	f006 faee 	bl	808b644 <_Z16_fetch_usbserialv>
 8085068:	494e      	ldr	r1, [pc, #312]	; (80851a4 <_Z15outputDataToESPv+0xd2c>)
 808506a:	f005 fa52 	bl	808a512 <_ZN5Print7printlnEPKc>
 808506e:	4a4e      	ldr	r2, [pc, #312]	; (80851a8 <_Z15outputDataToESPv+0xd30>)
 8085070:	494e      	ldr	r1, [pc, #312]	; (80851ac <_Z15outputDataToESPv+0xd34>)
        file.open(fileName, O_CREAT | O_APPEND | O_WRITE);
        if(file_started == 0){
 8085072:	4c4f      	ldr	r4, [pc, #316]	; (80851b0 <_Z15outputDataToESPv+0xd38>)
 8085074:	2346      	movs	r3, #70	; 0x46
 8085076:	6812      	ldr	r2, [r2, #0]
 8085078:	6809      	ldr	r1, [r1, #0]
 808507a:	484e      	ldr	r0, [pc, #312]	; (80851b4 <_Z15outputDataToESPv+0xd3c>)
 808507c:	f003 f911 	bl	80882a2 <_ZN7FatFile4openEPS_PKch>
 8085080:	6823      	ldr	r3, [r4, #0]
 8085082:	b9eb      	cbnz	r3, 80850c0 <_Z15outputDataToESPv+0xc48>
            file.println("File Start timestamp: ");
 8085084:	494c      	ldr	r1, [pc, #304]	; (80851b8 <_Z15outputDataToESPv+0xd40>)
 8085086:	484d      	ldr	r0, [pc, #308]	; (80851bc <_Z15outputDataToESPv+0xd44>)
 8085088:	f005 fa43 	bl	808a512 <_ZN5Print7printlnEPKc>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
 808508c:	f005 fd9d 	bl	808abca <_ZN9TimeClass3nowEv>
 8085090:	4601      	mov	r1, r0
 8085092:	a827      	add	r0, sp, #156	; 0x9c
 8085094:	f005 fcc6 	bl	808aa24 <_ZN9TimeClass7timeStrEl>
            file.println(Time.timeStr());
 8085098:	9927      	ldr	r1, [sp, #156]	; 0x9c
 808509a:	4848      	ldr	r0, [pc, #288]	; (80851bc <_Z15outputDataToESPv+0xd44>)
 808509c:	f005 fa39 	bl	808a512 <_ZN5Print7printlnEPKc>
 80850a0:	a827      	add	r0, sp, #156	; 0x9c
 80850a2:	f004 ffe5 	bl	808a070 <_ZN6StringD1Ev>
            file.println(String(HEADER_STRING));
 80850a6:	4946      	ldr	r1, [pc, #280]	; (80851c0 <_Z15outputDataToESPv+0xd48>)
 80850a8:	a827      	add	r0, sp, #156	; 0x9c
 80850aa:	f005 f828 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
 80850ae:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80850b0:	4842      	ldr	r0, [pc, #264]	; (80851bc <_Z15outputDataToESPv+0xd44>)
 80850b2:	f005 fa2e 	bl	808a512 <_ZN5Print7printlnEPKc>
 80850b6:	a827      	add	r0, sp, #156	; 0x9c
 80850b8:	f004 ffda 	bl	808a070 <_ZN6StringD1Ev>
            file_started = 1;
 80850bc:	2301      	movs	r3, #1
 80850be:	6023      	str	r3, [r4, #0]
        }
        file.println(csv_output_string);
 80850c0:	9906      	ldr	r1, [sp, #24]
 80850c2:	483e      	ldr	r0, [pc, #248]	; (80851bc <_Z15outputDataToESPv+0xd44>)
 80850c4:	f005 fa25 	bl	808a512 <_ZN5Print7printlnEPKc>

        file.close();
 80850c8:	483a      	ldr	r0, [pc, #232]	; (80851b4 <_Z15outputDataToESPv+0xd3c>)
 80850ca:	f003 f8e3 	bl	8088294 <_ZN7FatFile5closeEv>
        //byte 0 - version
        ble_output_array[0 + i*(BLE_PAYLOAD_SIZE)] = 1;

        //bytes 1,2 - Device ID
        //DEVICE_id = 555;
        wordBytes.myWord = DEVICE_id;
 80850ce:	4e3d      	ldr	r6, [pc, #244]	; (80851c4 <_Z15outputDataToESPv+0xd4c>)
 80850d0:	f10d 049d 	add.w	r4, sp, #157	; 0x9d
  }else{
    Serial.println("Unable to write to log file");
  }
}

void outputDataToESP(void){
 80850d4:	2500      	movs	r5, #0
    for(int i=0; i<NUMBER_OF_SPECIES; i++){

        //************Fill the ble output array**********************//
        //Serial.printf("making array[%d]\n", i);
        //byte 0 - version
        ble_output_array[0 + i*(BLE_PAYLOAD_SIZE)] = 1;
 80850d6:	2301      	movs	r3, #1
 80850d8:	f804 3c01 	strb.w	r3, [r4, #-1]

        //bytes 1,2 - Device ID
        //DEVICE_id = 555;
        wordBytes.myWord = DEVICE_id;
 80850dc:	6833      	ldr	r3, [r6, #0]
        ble_output_array[1 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 80850de:	7023      	strb	r3, [r4, #0]
        ble_output_array[2 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 80850e0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80850e4:	7063      	strb	r3, [r4, #1]

        //byte 3 - Measurement number
        ble_output_array[3 + i*(BLE_PAYLOAD_SIZE)] = sample_counter;
 80850e6:	4b38      	ldr	r3, [pc, #224]	; (80851c8 <_Z15outputDataToESPv+0xd50>)
 80850e8:	681b      	ldr	r3, [r3, #0]
 80850ea:	70a3      	strb	r3, [r4, #2]
        11-sound_average



        */
        if(i == 0){
 80850ec:	b91d      	cbnz	r5, 80850f6 <_Z15outputDataToESPv+0xc7e>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = CARBON_MONOXIDE_PACKET_CONSTANT;
 80850ee:	234d      	movs	r3, #77	; 0x4d
 80850f0:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = CO_float;
 80850f2:	4b36      	ldr	r3, [pc, #216]	; (80851cc <_Z15outputDataToESPv+0xd54>)
 80850f4:	e07f      	b.n	80851f6 <_Z15outputDataToESPv+0xd7e>
        }else if(i == 1){
 80850f6:	2d01      	cmp	r5, #1
 80850f8:	d103      	bne.n	8085102 <_Z15outputDataToESPv+0xc8a>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = CARBON_DIOXIDE_PACKET_CONSTANT;
 80850fa:	2343      	movs	r3, #67	; 0x43
 80850fc:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = CO2_float;
 80850fe:	4b34      	ldr	r3, [pc, #208]	; (80851d0 <_Z15outputDataToESPv+0xd58>)
 8085100:	e079      	b.n	80851f6 <_Z15outputDataToESPv+0xd7e>
        }else if(i == 2){
 8085102:	2d02      	cmp	r5, #2
 8085104:	d105      	bne.n	8085112 <_Z15outputDataToESPv+0xc9a>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = BATTERY_PACKET_CONSTANT;
 8085106:	2378      	movs	r3, #120	; 0x78
 8085108:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = fuel.getSoC();
 808510a:	4832      	ldr	r0, [pc, #200]	; (80851d4 <_Z15outputDataToESPv+0xd5c>)
 808510c:	f005 fe1e 	bl	808ad4c <_ZN9FuelGauge6getSoCEv>
 8085110:	e072      	b.n	80851f8 <_Z15outputDataToESPv+0xd80>
        }else if(i == 3){
 8085112:	2d03      	cmp	r5, #3
 8085114:	d103      	bne.n	808511e <_Z15outputDataToESPv+0xca6>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM1_PACKET_CONSTANT;
 8085116:	2372      	movs	r3, #114	; 0x72
 8085118:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = PM01Value;
 808511a:	4b2f      	ldr	r3, [pc, #188]	; (80851d8 <_Z15outputDataToESPv+0xd60>)
 808511c:	e00a      	b.n	8085134 <_Z15outputDataToESPv+0xcbc>
        }else if(i == 4){
 808511e:	2d04      	cmp	r5, #4
 8085120:	d103      	bne.n	808512a <_Z15outputDataToESPv+0xcb2>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM2PT5_PACKET_CONSTANT;
 8085122:	2352      	movs	r3, #82	; 0x52
 8085124:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = corrected_PM_25;
 8085126:	4b2d      	ldr	r3, [pc, #180]	; (80851dc <_Z15outputDataToESPv+0xd64>)
 8085128:	e065      	b.n	80851f6 <_Z15outputDataToESPv+0xd7e>
        }else if(i == 5){
 808512a:	2d05      	cmp	r5, #5
 808512c:	d106      	bne.n	808513c <_Z15outputDataToESPv+0xcc4>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM10_PACKET_CONSTANT;
 808512e:	2371      	movs	r3, #113	; 0x71
 8085130:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = PM10Value;
 8085132:	4b2b      	ldr	r3, [pc, #172]	; (80851e0 <_Z15outputDataToESPv+0xd68>)
 8085134:	6818      	ldr	r0, [r3, #0]
 8085136:	f007 fde1 	bl	808ccfc <__aeabi_i2f>
 808513a:	e05d      	b.n	80851f8 <_Z15outputDataToESPv+0xd80>
        }else if(i == 6){
 808513c:	2d06      	cmp	r5, #6
 808513e:	d104      	bne.n	808514a <_Z15outputDataToESPv+0xcd2>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = TEMPERATURE_PACKET_CONSTANT;
 8085140:	2374      	movs	r3, #116	; 0x74
 8085142:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = readTemperature();
 8085144:	f7fc f9d4 	bl	80814f0 <_Z15readTemperaturev>
 8085148:	e056      	b.n	80851f8 <_Z15outputDataToESPv+0xd80>
        }else if(i == 7){
 808514a:	2d07      	cmp	r5, #7
 808514c:	d107      	bne.n	808515e <_Z15outputDataToESPv+0xce6>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PRESSURE_PACKET_CONSTANT;
 808514e:	2350      	movs	r3, #80	; 0x50
 8085150:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = bme.pressure / 100.0;
 8085152:	4b24      	ldr	r3, [pc, #144]	; (80851e4 <_Z15outputDataToESPv+0xd6c>)
 8085154:	4924      	ldr	r1, [pc, #144]	; (80851e8 <_Z15outputDataToESPv+0xd70>)
 8085156:	6858      	ldr	r0, [r3, #4]
 8085158:	f007 fed8 	bl	808cf0c <__aeabi_fdiv>
 808515c:	e04c      	b.n	80851f8 <_Z15outputDataToESPv+0xd80>
        }else if(i == 8){
 808515e:	2d08      	cmp	r5, #8
 8085160:	d104      	bne.n	808516c <_Z15outputDataToESPv+0xcf4>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = HUMIDITY_PACKET_CONSTANT;
 8085162:	2368      	movs	r3, #104	; 0x68
 8085164:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = readHumidity();
 8085166:	f7fc fa41 	bl	80815ec <_Z12readHumidityv>
 808516a:	e045      	b.n	80851f8 <_Z15outputDataToESPv+0xd80>
        }else if(i == 9){
 808516c:	2d09      	cmp	r5, #9
 808516e:	d13f      	bne.n	80851f0 <_Z15outputDataToESPv+0xd78>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = SOUND_PACKET_CONSTANT;
 8085170:	2373      	movs	r3, #115	; 0x73
 8085172:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = sound_average;
 8085174:	4b1d      	ldr	r3, [pc, #116]	; (80851ec <_Z15outputDataToESPv+0xd74>)
 8085176:	e9d3 0100 	ldrd	r0, r1, [r3]
 808517a:	f007 fcb5 	bl	808cae8 <__aeabi_d2f>
 808517e:	e03b      	b.n	80851f8 <_Z15outputDataToESPv+0xd80>
 8085180:	20000080 	.word	0x20000080
 8085184:	08091f16 	.word	0x08091f16
 8085188:	20000bfc 	.word	0x20000bfc
 808518c:	20000af8 	.word	0x20000af8
 8085190:	08091f28 	.word	0x08091f28
 8085194:	20000238 	.word	0x20000238
 8085198:	08091f40 	.word	0x08091f40
 808519c:	08091f6a 	.word	0x08091f6a
 80851a0:	200006ac 	.word	0x200006ac
 80851a4:	08091f91 	.word	0x08091f91
 80851a8:	20000adc 	.word	0x20000adc
 80851ac:	20000bc4 	.word	0x20000bc4
 80851b0:	200006bc 	.word	0x200006bc
 80851b4:	200006c8 	.word	0x200006c8
 80851b8:	08090a17 	.word	0x08090a17
 80851bc:	200006c0 	.word	0x200006c0
 80851c0:	08091fa6 	.word	0x08091fa6
 80851c4:	20000088 	.word	0x20000088
 80851c8:	20000774 	.word	0x20000774
 80851cc:	20000b04 	.word	0x20000b04
 80851d0:	20000228 	.word	0x20000228
 80851d4:	200008b8 	.word	0x200008b8
 80851d8:	200008c8 	.word	0x200008c8
 80851dc:	200009a0 	.word	0x200009a0
 80851e0:	20000b1c 	.word	0x20000b1c
 80851e4:	200006f8 	.word	0x200006f8
 80851e8:	42c80000 	.word	0x42c80000
 80851ec:	20000b10 	.word	0x20000b10
        }else if(i == 10){
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = VOC_PACKET_CONSTANT;
 80851f0:	2367      	movs	r3, #103	; 0x67
 80851f2:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = air_quality_score;
 80851f4:	4b34      	ldr	r3, [pc, #208]	; (80852c8 <_Z15outputDataToESPv+0xe50>)
 80851f6:	6818      	ldr	r0, [r3, #0]
            floatBytes.myFloat = O3_float;
        }*/

        //bytes 5,6,7,8 - Measurement Value
        ble_output_array[5 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[0];
        ble_output_array[6 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
 80851f8:	f3c0 2307 	ubfx	r3, r0, #8, #8
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = OZONE_PACKET_CONSTANT;
            floatBytes.myFloat = O3_float;
        }*/

        //bytes 5,6,7,8 - Measurement Value
        ble_output_array[5 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[0];
 80851fc:	7120      	strb	r0, [r4, #4]
        ble_output_array[6 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
 80851fe:	7163      	strb	r3, [r4, #5]
        ble_output_array[7 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[2];
 8085200:	f3c0 4307 	ubfx	r3, r0, #16, #8
        ble_output_array[8 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[3];
 8085204:	f3c0 6007 	ubfx	r0, r0, #24, #8
        }*/

        //bytes 5,6,7,8 - Measurement Value
        ble_output_array[5 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[0];
        ble_output_array[6 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
        ble_output_array[7 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[2];
 8085208:	71a3      	strb	r3, [r4, #6]
        ble_output_array[8 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[3];
 808520a:	71e0      	strb	r0, [r4, #7]


        //bytes 9-12 - latitude
        wordBytes.myWord = gps.get_latitudeWhole();
 808520c:	482f      	ldr	r0, [pc, #188]	; (80852cc <_Z15outputDataToESPv+0xe54>)
 808520e:	f001 fe0e 	bl	8086e2e <_ZN3GPS17get_latitudeWholeEv>
        ble_output_array[9 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8085212:	7220      	strb	r0, [r4, #8]
        ble_output_array[10 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8085214:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8085218:	7260      	strb	r0, [r4, #9]

        wordBytes.myWord = gps.get_latitudeFrac();
 808521a:	482c      	ldr	r0, [pc, #176]	; (80852cc <_Z15outputDataToESPv+0xe54>)
 808521c:	f001 fe0a 	bl	8086e34 <_ZN3GPS16get_latitudeFracEv>
        ble_output_array[11 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8085220:	72a0      	strb	r0, [r4, #10]
        ble_output_array[12 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8085222:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8085226:	72e0      	strb	r0, [r4, #11]

        //bytes 14-17 - longitude
        wordBytes.myWord = gps.get_longitudeWhole();
 8085228:	4828      	ldr	r0, [pc, #160]	; (80852cc <_Z15outputDataToESPv+0xe54>)
 808522a:	f001 fe06 	bl	8086e3a <_ZN3GPS18get_longitudeWholeEv>
        ble_output_array[13 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 808522e:	7320      	strb	r0, [r4, #12]
        ble_output_array[14 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8085230:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8085234:	7360      	strb	r0, [r4, #13]

        wordBytes.myWord = gps.get_longitudeFrac();
 8085236:	4825      	ldr	r0, [pc, #148]	; (80852cc <_Z15outputDataToESPv+0xe54>)
 8085238:	f001 fe02 	bl	8086e40 <_ZN3GPS17get_longitudeFracEv>
        ble_output_array[15 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 808523c:	73a0      	strb	r0, [r4, #14]
        ble_output_array[16 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 808523e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8085242:	73e0      	strb	r0, [r4, #15]


        //byte 18 - east west and north south indicator
        //  LSB 0 = East, LSB 1 = West
        //  MSB 0 = South, MSB 1 = North
        int northSouth = gps.get_nsIndicator();
 8085244:	4821      	ldr	r0, [pc, #132]	; (80852cc <_Z15outputDataToESPv+0xe54>)
 8085246:	f001 fdfe 	bl	8086e46 <_ZN3GPS15get_nsIndicatorEv>
 808524a:	4607      	mov	r7, r0
        int eastWest = gps.get_ewIndicator();
 808524c:	481f      	ldr	r0, [pc, #124]	; (80852cc <_Z15outputDataToESPv+0xe54>)
 808524e:	f001 fdfd 	bl	8086e4c <_ZN3GPS15get_ewIndicatorEv>

        ble_output_array[17 + i*(BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
 8085252:	4338      	orrs	r0, r7
 8085254:	7420      	strb	r0, [r4, #16]
        ble_output_array[18 + i*(BLE_PAYLOAD_SIZE)] = gps.get_horizontalDillution();
 8085256:	481d      	ldr	r0, [pc, #116]	; (80852cc <_Z15outputDataToESPv+0xe54>)
 8085258:	f001 fde4 	bl	8086e24 <_ZN3GPS23get_horizontalDillutionEv>
        ble_output_array[19 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[1];
 808525c:	4b1c      	ldr	r3, [pc, #112]	; (80852d0 <_Z15outputDataToESPv+0xe58>)
    //we are using binary for the ble packets so we can compress the data into 19 bytes for the small payload

    byte ble_output_array[NUMBER_OF_SPECIES*BLE_PAYLOAD_SIZE];     //19 bytes per data line and 12 species to output


    for(int i=0; i<NUMBER_OF_SPECIES; i++){
 808525e:	3501      	adds	r5, #1
        int northSouth = gps.get_nsIndicator();
        int eastWest = gps.get_ewIndicator();

        ble_output_array[17 + i*(BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
        ble_output_array[18 + i*(BLE_PAYLOAD_SIZE)] = gps.get_horizontalDillution();
        ble_output_array[19 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[1];
 8085260:	785a      	ldrb	r2, [r3, #1]
        ble_output_array[20 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[0];
 8085262:	781b      	ldrb	r3, [r3, #0]
    //we are using binary for the ble packets so we can compress the data into 19 bytes for the small payload

    byte ble_output_array[NUMBER_OF_SPECIES*BLE_PAYLOAD_SIZE];     //19 bytes per data line and 12 species to output


    for(int i=0; i<NUMBER_OF_SPECIES; i++){
 8085264:	2d0b      	cmp	r5, #11
        int eastWest = gps.get_ewIndicator();

        ble_output_array[17 + i*(BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
        ble_output_array[18 + i*(BLE_PAYLOAD_SIZE)] = gps.get_horizontalDillution();
        ble_output_array[19 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[1];
        ble_output_array[20 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[0];
 8085266:	74e3      	strb	r3, [r4, #19]

        ble_output_array[21 + i*(BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species
 8085268:	f04f 0323 	mov.w	r3, #35	; 0x23
        //  MSB 0 = South, MSB 1 = North
        int northSouth = gps.get_nsIndicator();
        int eastWest = gps.get_ewIndicator();

        ble_output_array[17 + i*(BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
        ble_output_array[18 + i*(BLE_PAYLOAD_SIZE)] = gps.get_horizontalDillution();
 808526c:	7460      	strb	r0, [r4, #17]
        ble_output_array[19 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[1];
 808526e:	74a2      	strb	r2, [r4, #18]
        ble_output_array[20 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[0];

        ble_output_array[21 + i*(BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species
 8085270:	7523      	strb	r3, [r4, #20]
 8085272:	f104 0416 	add.w	r4, r4, #22
    //we are using binary for the ble packets so we can compress the data into 19 bytes for the small payload

    byte ble_output_array[NUMBER_OF_SPECIES*BLE_PAYLOAD_SIZE];     //19 bytes per data line and 12 species to output


    for(int i=0; i<NUMBER_OF_SPECIES; i++){
 8085276:	f47f af2e 	bne.w	80850d6 <_Z15outputDataToESPv+0xc5e>
        ble_output_array[21 + i*(BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species

    }

    //send start delimeter to ESP
    Serial1.print("$");
 808527a:	f006 fb31 	bl	808b8e0 <_Z22__fetch_global_Serial1v>
 808527e:	4915      	ldr	r1, [pc, #84]	; (80852d4 <_Z15outputDataToESPv+0xe5c>)
 8085280:	f005 f934 	bl	808a4ec <_ZN5Print5printEPKc>
    //send the packaged data with # delimeters in between packets
    Serial1.write(ble_output_array, NUMBER_OF_SPECIES*BLE_PAYLOAD_SIZE);
 8085284:	f006 fb2c 	bl	808b8e0 <_Z22__fetch_global_Serial1v>
 8085288:	6803      	ldr	r3, [r0, #0]
 808528a:	22f2      	movs	r2, #242	; 0xf2
 808528c:	68db      	ldr	r3, [r3, #12]
 808528e:	a927      	add	r1, sp, #156	; 0x9c
 8085290:	4798      	blx	r3

    //send ending delimeter
    Serial1.print("&");
 8085292:	f006 fb25 	bl	808b8e0 <_Z22__fetch_global_Serial1v>
 8085296:	4910      	ldr	r1, [pc, #64]	; (80852d8 <_Z15outputDataToESPv+0xe60>)
 8085298:	f005 f928 	bl	808a4ec <_ZN5Print5printEPKc>



    JSONBufferWriter writer(sensible_buf, sizeof(sensible_buf) - 1);
    writer.beginObject();
    String device_string = "PAM-" + String(DEVICE_id);
 808529c:	a816      	add	r0, sp, #88	; 0x58
 808529e:	f004 fee7 	bl	808a070 <_ZN6StringD1Ev>
    //"$1:D555g47.7M-22.050533C550.866638r1R1q2T45.8P844.9h17.2s1842.700000&"
    String cloud_output_string = "";    //create a clean string
    String csv_output_string = "";
    String sensible_string = "";
    String latitude_string = "";
    String longitude_string = "";
 80852a2:	a812      	add	r0, sp, #72	; 0x48
 80852a4:	f004 fee4 	bl	808a070 <_ZN6StringD1Ev>
    //This is different than the ble packet in that we are putting all of the data that we have in one packet
    //"$1:D555g47.7M-22.050533C550.866638r1R1q2T45.8P844.9h17.2s1842.700000&"
    String cloud_output_string = "";    //create a clean string
    String csv_output_string = "";
    String sensible_string = "";
    String latitude_string = "";
 80852a8:	a80e      	add	r0, sp, #56	; 0x38
 80852aa:	f004 fee1 	bl	808a070 <_ZN6StringD1Ev>
    //************Fill the cloud output array and file output array for row in csv file on usd card*****************************/
    //This is different than the ble packet in that we are putting all of the data that we have in one packet
    //"$1:D555g47.7M-22.050533C550.866638r1R1q2T45.8P844.9h17.2s1842.700000&"
    String cloud_output_string = "";    //create a clean string
    String csv_output_string = "";
    String sensible_string = "";
 80852ae:	a80a      	add	r0, sp, #40	; 0x28
 80852b0:	f004 fede 	bl	808a070 <_ZN6StringD1Ev>

    //************Fill the cloud output array and file output array for row in csv file on usd card*****************************/
    //This is different than the ble packet in that we are putting all of the data that we have in one packet
    //"$1:D555g47.7M-22.050533C550.866638r1R1q2T45.8P844.9h17.2s1842.700000&"
    String cloud_output_string = "";    //create a clean string
    String csv_output_string = "";
 80852b4:	a806      	add	r0, sp, #24
 80852b6:	f004 fedb 	bl	808a070 <_ZN6StringD1Ev>
    }*/

    //************Fill the cloud output array and file output array for row in csv file on usd card*****************************/
    //This is different than the ble packet in that we are putting all of the data that we have in one packet
    //"$1:D555g47.7M-22.050533C550.866638r1R1q2T45.8P844.9h17.2s1842.700000&"
    String cloud_output_string = "";    //create a clean string
 80852ba:	a802      	add	r0, sp, #8
 80852bc:	f004 fed8 	bl	808a070 <_ZN6StringD1Ev>
        if(ble_output_array[i]=='#')
            Serial.printf("\n\r");
    }
    Serial.println("End of array");*/

}
 80852c0:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 80852c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80852c6:	bf00      	nop
 80852c8:	20000b08 	.word	0x20000b08
 80852cc:	20000968 	.word	0x20000968
 80852d0:	20000b74 	.word	0x20000b74
 80852d4:	08090b5d 	.word	0x08090b5d
 80852d8:	08090ab2 	.word	0x08090ab2

080852dc <_ZN5Print6printfIIfEEEjPKcDpT_>:
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
 80852dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80852de:	4604      	mov	r4, r0
    {
        return this->printf_impl(false, format, args...);
 80852e0:	4610      	mov	r0, r2
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
 80852e2:	460d      	mov	r5, r1
    {
        return this->printf_impl(false, format, args...);
 80852e4:	f007 f8b4 	bl	808c450 <__aeabi_f2d>
 80852e8:	462a      	mov	r2, r5
 80852ea:	e9cd 0100 	strd	r0, r1, [sp]
 80852ee:	2100      	movs	r1, #0
 80852f0:	4620      	mov	r0, r4
 80852f2:	f005 fa43 	bl	808a77c <_ZN5Print11printf_implEbPKcz>
    }
 80852f6:	b003      	add	sp, #12
 80852f8:	bd30      	pop	{r4, r5, pc}

080852fa <_ZN5Print6printfIIiEEEjPKcDpT_>:
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 80852fa:	4613      	mov	r3, r2
 80852fc:	460a      	mov	r2, r1
 80852fe:	2100      	movs	r1, #0
 8085300:	f005 ba3c 	b.w	808a77c <_ZN5Print11printf_implEbPKcz>
 8085304:	0000      	movs	r0, r0
	...

08085308 <_Z15getEspOzoneDatav>:
    Serial.println("Sending new wifi credentials to ESP");
    Serial1.println(wifiCredentials);
    Serial.println("Success!");
}

float getEspOzoneData(void){
 8085308:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808530c:	b0ab      	sub	sp, #172	; 0xac
    float ozone_value = 0.0;
    String getOzoneData = "Z&";
 808530e:	4986      	ldr	r1, [pc, #536]	; (8085528 <_Z15getEspOzoneDatav+0x220>)
 8085310:	a802      	add	r0, sp, #8
 8085312:	f004 fef4 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
    String recievedData = " ";
    bool timeOut = false;
    double counterIndex = 0;
    //if esp doesn't answer, keep going
    Serial1.setTimeout(3000);
    if(debugging_enabled){
 8085316:	4d85      	ldr	r5, [pc, #532]	; (808552c <_Z15getEspOzoneDatav+0x224>)
}

float getEspOzoneData(void){
    float ozone_value = 0.0;
    String getOzoneData = "Z&";
    String recievedData = " ";
 8085318:	4985      	ldr	r1, [pc, #532]	; (8085530 <_Z15getEspOzoneDatav+0x228>)
 808531a:	a806      	add	r0, sp, #24
 808531c:	f004 feef 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
    bool timeOut = false;
    double counterIndex = 0;
    //if esp doesn't answer, keep going
    Serial1.setTimeout(3000);
 8085320:	f006 fade 	bl	808b8e0 <_Z22__fetch_global_Serial1v>
 8085324:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8085328:	f005 fa77 	bl	808a81a <_ZN6Stream10setTimeoutEm>
    if(debugging_enabled){
 808532c:	682b      	ldr	r3, [r5, #0]
 808532e:	b173      	cbz	r3, 808534e <_Z15getEspOzoneDatav+0x46>
        Serial.println("Getting ozone data from esp");
 8085330:	f006 f988 	bl	808b644 <_Z16_fetch_usbserialv>
 8085334:	497f      	ldr	r1, [pc, #508]	; (8085534 <_Z15getEspOzoneDatav+0x22c>)
 8085336:	f005 f8ec 	bl	808a512 <_ZN5Print7printlnEPKc>
        writeLogFile("Getting ozone data from esp");
 808533a:	497e      	ldr	r1, [pc, #504]	; (8085534 <_Z15getEspOzoneDatav+0x22c>)
 808533c:	a80e      	add	r0, sp, #56	; 0x38
 808533e:	f004 fede 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
 8085342:	a80e      	add	r0, sp, #56	; 0x38
 8085344:	f7fc fb20 	bl	8081988 <_Z12writeLogFile6String>
 8085348:	a80e      	add	r0, sp, #56	; 0x38
 808534a:	f004 fe91 	bl	808a070 <_ZN6StringD1Ev>
      }
    Serial1.print(getOzoneData);
 808534e:	f006 fac7 	bl	808b8e0 <_Z22__fetch_global_Serial1v>
 8085352:	9902      	ldr	r1, [sp, #8]
 8085354:	f005 f8ca 	bl	808a4ec <_ZN5Print5printEPKc>
float getEspOzoneData(void){
    float ozone_value = 0.0;
    String getOzoneData = "Z&";
    String recievedData = " ";
    bool timeOut = false;
    double counterIndex = 0;
 8085358:	2600      	movs	r6, #0
 808535a:	2700      	movs	r7, #0

float getEspOzoneData(void){
    float ozone_value = 0.0;
    String getOzoneData = "Z&";
    String recievedData = " ";
    bool timeOut = false;
 808535c:	2400      	movs	r4, #0
    if(debugging_enabled){
        Serial.println("Getting ozone data from esp");
        writeLogFile("Getting ozone data from esp");
      }
    Serial1.print(getOzoneData);
    while(!Serial1.available() && timeOut == false){
 808535e:	f006 fabf 	bl	808b8e0 <_Z22__fetch_global_Serial1v>
 8085362:	6803      	ldr	r3, [r0, #0]
 8085364:	691b      	ldr	r3, [r3, #16]
 8085366:	4798      	blx	r3
 8085368:	b9e0      	cbnz	r0, 80853a4 <_Z15getEspOzoneDatav+0x9c>
 808536a:	b9dc      	cbnz	r4, 80853a4 <_Z15getEspOzoneDatav+0x9c>
      //delay(1);
      counterIndex++;
 808536c:	2200      	movs	r2, #0
 808536e:	4b72      	ldr	r3, [pc, #456]	; (8085538 <_Z15getEspOzoneDatav+0x230>)
 8085370:	4630      	mov	r0, r6
 8085372:	4639      	mov	r1, r7
 8085374:	f006 ff0e 	bl	808c194 <__adddf3>
      if(counterIndex > MAX_COUNTER_INDEX){
 8085378:	a369      	add	r3, pc, #420	; (adr r3, 8085520 <_Z15getEspOzoneDatav+0x218>)
 808537a:	e9d3 2300 	ldrd	r2, r3, [r3]
        writeLogFile("Getting ozone data from esp");
      }
    Serial1.print(getOzoneData);
    while(!Serial1.available() && timeOut == false){
      //delay(1);
      counterIndex++;
 808537e:	4606      	mov	r6, r0
 8085380:	460f      	mov	r7, r1
      if(counterIndex > MAX_COUNTER_INDEX){
 8085382:	f007 fb49 	bl	808ca18 <__aeabi_dcmpgt>
 8085386:	2800      	cmp	r0, #0
 8085388:	d0e9      	beq.n	808535e <_Z15getEspOzoneDatav+0x56>
        if(debugging_enabled){
 808538a:	682b      	ldr	r3, [r5, #0]
 808538c:	b90b      	cbnz	r3, 8085392 <_Z15getEspOzoneDatav+0x8a>
          Serial.printf("Unable to get ozone data from ESP, counter index: %1.1f\n\r", counterIndex);
        }
        timeOut = true;
 808538e:	2401      	movs	r4, #1
 8085390:	e7e5      	b.n	808535e <_Z15getEspOzoneDatav+0x56>
    while(!Serial1.available() && timeOut == false){
      //delay(1);
      counterIndex++;
      if(counterIndex > MAX_COUNTER_INDEX){
        if(debugging_enabled){
          Serial.printf("Unable to get ozone data from ESP, counter index: %1.1f\n\r", counterIndex);
 8085392:	f006 f957 	bl	808b644 <_Z16_fetch_usbserialv>
 8085396:	e9cd 6700 	strd	r6, r7, [sp]
 808539a:	4a68      	ldr	r2, [pc, #416]	; (808553c <_Z15getEspOzoneDatav+0x234>)
 808539c:	4621      	mov	r1, r4
 808539e:	f005 f9ed 	bl	808a77c <_ZN5Print11printf_implEbPKcz>
 80853a2:	e7f4      	b.n	808538e <_Z15getEspOzoneDatav+0x86>
        timeOut = true;
      }
    }


    delay(10);
 80853a4:	200a      	movs	r0, #10
 80853a6:	f005 fc5d 	bl	808ac64 <delay>

    recievedData = Serial1.readString();
 80853aa:	f006 fa99 	bl	808b8e0 <_Z22__fetch_global_Serial1v>
 80853ae:	ac0e      	add	r4, sp, #56	; 0x38
 80853b0:	4601      	mov	r1, r0
 80853b2:	4620      	mov	r0, r4
 80853b4:	f005 fa8a 	bl	808a8cc <_ZN6Stream10readStringEv>
 80853b8:	4621      	mov	r1, r4
 80853ba:	a806      	add	r0, sp, #24
 80853bc:	f004 fee9 	bl	808a192 <_ZN6StringaSEOS_>
 80853c0:	4620      	mov	r0, r4
 80853c2:	f004 fe55 	bl	808a070 <_ZN6StringD1Ev>
    //recievedData = "0.1,1.2,3.3,4.5,1.234,10/12/18,9:22:18";
    if(debugging_enabled)
 80853c6:	682b      	ldr	r3, [r5, #0]
 80853c8:	b19b      	cbz	r3, 80853f2 <_Z15getEspOzoneDatav+0xea>
    {
        Serial.print("RECIEVED DATA FROM ESP: ");
 80853ca:	f006 f93b 	bl	808b644 <_Z16_fetch_usbserialv>
 80853ce:	495c      	ldr	r1, [pc, #368]	; (8085540 <_Z15getEspOzoneDatav+0x238>)
 80853d0:	f005 f88c 	bl	808a4ec <_ZN5Print5printEPKc>
        Serial.println(recievedData);
 80853d4:	f006 f936 	bl	808b644 <_Z16_fetch_usbserialv>
 80853d8:	9906      	ldr	r1, [sp, #24]
 80853da:	f005 f89a 	bl	808a512 <_ZN5Print7printlnEPKc>
        writeLogFile("Recieved data from ESP");
 80853de:	4959      	ldr	r1, [pc, #356]	; (8085544 <_Z15getEspOzoneDatav+0x23c>)
 80853e0:	4620      	mov	r0, r4
 80853e2:	f004 fe8c 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
 80853e6:	4620      	mov	r0, r4
 80853e8:	f7fc face 	bl	8081988 <_Z12writeLogFile6String>
 80853ec:	4620      	mov	r0, r4
 80853ee:	f004 fe3f 	bl	808a070 <_ZN6StringD1Ev>

float getEspOzoneData(void){
    float ozone_value = 0.0;
    String getOzoneData = "Z&";
    String recievedData = " ";
    bool timeOut = false;
 80853f2:	2600      	movs	r6, #0
    //parse data if not null
    int comma_count = 0;
    int from_index = 0;
    int index_of_comma = 0;
    bool still_searching_for_commas = true;
    String stringArray[NUMBER_OF_FEILDS];
 80853f4:	19a0      	adds	r0, r4, r6
 80853f6:	4954      	ldr	r1, [pc, #336]	; (8085548 <_Z15getEspOzoneDatav+0x240>)
 80853f8:	3610      	adds	r6, #16
 80853fa:	f004 fe80 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
 80853fe:	2e70      	cmp	r6, #112	; 0x70
 8085400:	d1f8      	bne.n	80853f4 <_Z15getEspOzoneDatav+0xec>
 8085402:	2700      	movs	r7, #0
 8085404:	463e      	mov	r6, r7

    while(still_searching_for_commas && comma_count < NUMBER_OF_FEILDS){
        //Serial.printf("From index: %d\n\r", from_index);

        index_of_comma = recievedData.indexOf(',', from_index);
 8085406:	463a      	mov	r2, r7
 8085408:	212c      	movs	r1, #44	; 0x2c
 808540a:	a806      	add	r0, sp, #24
 808540c:	f004 ffe9 	bl	808a3e2 <_ZNK6String7indexOfEcj>
        if(debugging_enabled){
 8085410:	682b      	ldr	r3, [r5, #0]
    String stringArray[NUMBER_OF_FEILDS];

    while(still_searching_for_commas && comma_count < NUMBER_OF_FEILDS){
        //Serial.printf("From index: %d\n\r", from_index);

        index_of_comma = recievedData.indexOf(',', from_index);
 8085412:	4680      	mov	r8, r0
        if(debugging_enabled){
 8085414:	b153      	cbz	r3, 808542c <_Z15getEspOzoneDatav+0x124>
          Serial.print("comma index: ");
 8085416:	f006 f915 	bl	808b644 <_Z16_fetch_usbserialv>
 808541a:	494c      	ldr	r1, [pc, #304]	; (808554c <_Z15getEspOzoneDatav+0x244>)
 808541c:	f005 f866 	bl	808a4ec <_ZN5Print5printEPKc>
          Serial.println(index_of_comma);
 8085420:	f006 f910 	bl	808b644 <_Z16_fetch_usbserialv>
 8085424:	220a      	movs	r2, #10
 8085426:	4641      	mov	r1, r8
 8085428:	f005 f8e1 	bl	808a5ee <_ZN5Print7printlnEii>
          //writeLogFile("got a comma");

        }

        //if the index of the comma is not zero, then there is data.
        if(index_of_comma > 0){
 808542c:	f1b8 0f00 	cmp.w	r8, #0
 8085430:	dd2d      	ble.n	808548e <_Z15getEspOzoneDatav+0x186>
            stringArray[comma_count] = recievedData.substring(from_index, index_of_comma);
 8085432:	4643      	mov	r3, r8
 8085434:	463a      	mov	r2, r7
 8085436:	a906      	add	r1, sp, #24
 8085438:	a80a      	add	r0, sp, #40	; 0x28
 808543a:	ea4f 1906 	mov.w	r9, r6, lsl #4
 808543e:	f004 ffdf 	bl	808a400 <_ZNK6String9substringEjj>
 8085442:	a90a      	add	r1, sp, #40	; 0x28
 8085444:	eb04 0009 	add.w	r0, r4, r9
 8085448:	f004 fea3 	bl	808a192 <_ZN6StringaSEOS_>
 808544c:	a80a      	add	r0, sp, #40	; 0x28
 808544e:	f004 fe0f 	bl	808a070 <_ZN6StringD1Ev>
            if(debugging_enabled){
 8085452:	682b      	ldr	r3, [r5, #0]
 8085454:	b15b      	cbz	r3, 808546e <_Z15getEspOzoneDatav+0x166>
                Serial.printf("String[%d]:", comma_count);
 8085456:	f006 f8f5 	bl	808b644 <_Z16_fetch_usbserialv>
 808545a:	493d      	ldr	r1, [pc, #244]	; (8085550 <_Z15getEspOzoneDatav+0x248>)
 808545c:	4632      	mov	r2, r6
 808545e:	f7ff ff4c 	bl	80852fa <_ZN5Print6printfIIiEEEjPKcDpT_>
                Serial.println(stringArray[comma_count]);
 8085462:	f006 f8ef 	bl	808b644 <_Z16_fetch_usbserialv>
 8085466:	f854 1009 	ldr.w	r1, [r4, r9]
 808546a:	f005 f852 	bl	808a512 <_ZN5Print7printlnEPKc>
                //writeLogFile(stringArray[comma_count]);
            }
            comma_count++;
 808546e:	3601      	adds	r6, #1
    int from_index = 0;
    int index_of_comma = 0;
    bool still_searching_for_commas = true;
    String stringArray[NUMBER_OF_FEILDS];

    while(still_searching_for_commas && comma_count < NUMBER_OF_FEILDS){
 8085470:	2e07      	cmp	r6, #7
                Serial.println(stringArray[comma_count]);
                //writeLogFile(stringArray[comma_count]);
            }
            comma_count++;
            from_index = index_of_comma;
            from_index += 1;
 8085472:	f108 0701 	add.w	r7, r8, #1
    int from_index = 0;
    int index_of_comma = 0;
    bool still_searching_for_commas = true;
    String stringArray[NUMBER_OF_FEILDS];

    while(still_searching_for_commas && comma_count < NUMBER_OF_FEILDS){
 8085476:	d1c6      	bne.n	8085406 <_Z15getEspOzoneDatav+0xfe>
            }
            still_searching_for_commas = false;
        }
    }
    if(comma_count == NUMBER_OF_FIELDS_LOGGING){
        ozone_value = stringArray[1].toFloat();
 8085478:	a812      	add	r0, sp, #72	; 0x48
 808547a:	f004 ffee 	bl	808a45a <_ZNK6String7toFloatEv>
        if(debugging_enabled){
 808547e:	682b      	ldr	r3, [r5, #0]
            }
            still_searching_for_commas = false;
        }
    }
    if(comma_count == NUMBER_OF_FIELDS_LOGGING){
        ozone_value = stringArray[1].toFloat();
 8085480:	4606      	mov	r6, r0
        if(debugging_enabled){
 8085482:	2b00      	cmp	r3, #0
 8085484:	d035      	beq.n	80854f2 <_Z15getEspOzoneDatav+0x1ea>
            Serial.println("using string array index 1 due to logging");
 8085486:	f006 f8dd 	bl	808b644 <_Z16_fetch_usbserialv>
 808548a:	4932      	ldr	r1, [pc, #200]	; (8085554 <_Z15getEspOzoneDatav+0x24c>)
 808548c:	e02f      	b.n	80854ee <_Z15getEspOzoneDatav+0x1e6>
            }
            comma_count++;
            from_index = index_of_comma;
            from_index += 1;
        }else{
            int index_of_cr = recievedData.indexOf('\r', from_index);
 808548e:	463a      	mov	r2, r7
 8085490:	210d      	movs	r1, #13
 8085492:	a806      	add	r0, sp, #24
 8085494:	f004 ffa5 	bl	808a3e2 <_ZNK6String7indexOfEcj>
            if(index_of_cr > 0){
 8085498:	1e03      	subs	r3, r0, #0
 808549a:	dd1d      	ble.n	80854d8 <_Z15getEspOzoneDatav+0x1d0>
                stringArray[comma_count] = recievedData.substring(from_index, index_of_cr);
 808549c:	ea4f 1806 	mov.w	r8, r6, lsl #4
 80854a0:	463a      	mov	r2, r7
 80854a2:	a906      	add	r1, sp, #24
 80854a4:	a80a      	add	r0, sp, #40	; 0x28
 80854a6:	eb04 0908 	add.w	r9, r4, r8
 80854aa:	f004 ffa9 	bl	808a400 <_ZNK6String9substringEjj>
 80854ae:	a90a      	add	r1, sp, #40	; 0x28
 80854b0:	4648      	mov	r0, r9
 80854b2:	f004 fe6e 	bl	808a192 <_ZN6StringaSEOS_>
 80854b6:	a80a      	add	r0, sp, #40	; 0x28
 80854b8:	f004 fdda 	bl	808a070 <_ZN6StringD1Ev>
                if(debugging_enabled){
 80854bc:	682b      	ldr	r3, [r5, #0]
 80854be:	b15b      	cbz	r3, 80854d8 <_Z15getEspOzoneDatav+0x1d0>
                    Serial.printf("String[%d]:", comma_count);
 80854c0:	f006 f8c0 	bl	808b644 <_Z16_fetch_usbserialv>
 80854c4:	4922      	ldr	r1, [pc, #136]	; (8085550 <_Z15getEspOzoneDatav+0x248>)
 80854c6:	4632      	mov	r2, r6
 80854c8:	f7ff ff17 	bl	80852fa <_ZN5Print6printfIIiEEEjPKcDpT_>
                    Serial.println(stringArray[comma_count]);
 80854cc:	f006 f8ba 	bl	808b644 <_Z16_fetch_usbserialv>
 80854d0:	f854 1008 	ldr.w	r1, [r4, r8]
 80854d4:	f005 f81d 	bl	808a512 <_ZN5Print7printlnEPKc>
        ozone_value = stringArray[1].toFloat();
        if(debugging_enabled){
            Serial.println("using string array index 1 due to logging");
            //writeLogFile("using string array index 1 due to logging");
          }
    }else if(comma_count == (NUMBER_OF_FIELDS_LOGGING - 1)){
 80854d8:	2e06      	cmp	r6, #6
 80854da:	d113      	bne.n	8085504 <_Z15getEspOzoneDatav+0x1fc>
        ozone_value = stringArray[0].toFloat();
 80854dc:	4620      	mov	r0, r4
 80854de:	f004 ffbc 	bl	808a45a <_ZNK6String7toFloatEv>
        if(debugging_enabled){
 80854e2:	682b      	ldr	r3, [r5, #0]
        if(debugging_enabled){
            Serial.println("using string array index 1 due to logging");
            //writeLogFile("using string array index 1 due to logging");
          }
    }else if(comma_count == (NUMBER_OF_FIELDS_LOGGING - 1)){
        ozone_value = stringArray[0].toFloat();
 80854e4:	4606      	mov	r6, r0
        if(debugging_enabled){
 80854e6:	b123      	cbz	r3, 80854f2 <_Z15getEspOzoneDatav+0x1ea>
            Serial.println("using string array index 0, not logging");
 80854e8:	f006 f8ac 	bl	808b644 <_Z16_fetch_usbserialv>
 80854ec:	491a      	ldr	r1, [pc, #104]	; (8085558 <_Z15getEspOzoneDatav+0x250>)
 80854ee:	f005 f810 	bl	808a512 <_ZN5Print7printlnEPKc>
    Serial1.println(wifiCredentials);
    Serial.println("Success!");
}

float getEspOzoneData(void){
    float ozone_value = 0.0;
 80854f2:	2506      	movs	r5, #6
    //parse data if not null
    int comma_count = 0;
    int from_index = 0;
    int index_of_comma = 0;
    bool still_searching_for_commas = true;
    String stringArray[NUMBER_OF_FEILDS];
 80854f4:	eb04 1005 	add.w	r0, r4, r5, lsl #4
 80854f8:	f004 fdba 	bl	808a070 <_ZN6StringD1Ev>
 80854fc:	f115 35ff 	adds.w	r5, r5, #4294967295
 8085500:	d2f8      	bcs.n	80854f4 <_Z15getEspOzoneDatav+0x1ec>
 8085502:	e001      	b.n	8085508 <_Z15getEspOzoneDatav+0x200>
    Serial1.println(wifiCredentials);
    Serial.println("Success!");
}

float getEspOzoneData(void){
    float ozone_value = 0.0;
 8085504:	2600      	movs	r6, #0
 8085506:	e7f4      	b.n	80854f2 <_Z15getEspOzoneDatav+0x1ea>
    String getOzoneData = "Z&";
    String recievedData = " ";
 8085508:	a806      	add	r0, sp, #24
 808550a:	f004 fdb1 	bl	808a070 <_ZN6StringD1Ev>
    Serial.println("Success!");
}

float getEspOzoneData(void){
    float ozone_value = 0.0;
    String getOzoneData = "Z&";
 808550e:	a802      	add	r0, sp, #8
 8085510:	f004 fdae 	bl	808a070 <_ZN6StringD1Ev>
            //writeLogFile("using string array index 0, not logging");
          }
    }
    return ozone_value;
    //parseOzoneString(recievedData);
}
 8085514:	4630      	mov	r0, r6
 8085516:	b02b      	add	sp, #172	; 0xac
 8085518:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808551c:	f3af 8000 	nop.w
 8085520:	00000000 	.word	0x00000000
 8085524:	40cd4c00 	.word	0x40cd4c00
 8085528:	08092006 	.word	0x08092006
 808552c:	20000af8 	.word	0x20000af8
 8085530:	08090809 	.word	0x08090809
 8085534:	08092009 	.word	0x08092009
 8085538:	3ff00000 	.word	0x3ff00000
 808553c:	08092025 	.word	0x08092025
 8085540:	0809205f 	.word	0x0809205f
 8085544:	08092078 	.word	0x08092078
 8085548:	08092fdc 	.word	0x08092fdc
 808554c:	0809208f 	.word	0x0809208f
 8085550:	0809209d 	.word	0x0809209d
 8085554:	080920a9 	.word	0x080920a9
 8085558:	080920d3 	.word	0x080920d3
 808555c:	00000000 	.word	0x00000000

08085560 <_Z9readOzonev>:
      Serial.print(volt1_aux);
      Serial.println("Volts");*/
      return alpha2_ppmraw;
}

void readOzone(void){
 8085560:	b538      	push	{r3, r4, r5, lr}
    int tempValue = 0;
    if(ozone_analog_enabled){
 8085562:	4b21      	ldr	r3, [pc, #132]	; (80855e8 <_Z9readOzonev+0x88>)
 8085564:	4c21      	ldr	r4, [pc, #132]	; (80855ec <_Z9readOzonev+0x8c>)
 8085566:	681b      	ldr	r3, [r3, #0]
 8085568:	b383      	cbz	r3, 80855cc <_Z9readOzonev+0x6c>
        tempValue = analogRead(A0);  // read the analogPin for ozone voltage
 808556a:	200a      	movs	r0, #10
 808556c:	f006 fc09 	bl	808bd82 <analogRead>
        if(debugging_enabled){
 8085570:	4b1f      	ldr	r3, [pc, #124]	; (80855f0 <_Z9readOzonev+0x90>)
}

void readOzone(void){
    int tempValue = 0;
    if(ozone_analog_enabled){
        tempValue = analogRead(A0);  // read the analogPin for ozone voltage
 8085572:	4605      	mov	r5, r0
        if(debugging_enabled){
 8085574:	681b      	ldr	r3, [r3, #0]
 8085576:	b153      	cbz	r3, 808558e <_Z9readOzonev+0x2e>
            Serial.print("Ozone Raw analog in:");
 8085578:	f006 f864 	bl	808b644 <_Z16_fetch_usbserialv>
 808557c:	491d      	ldr	r1, [pc, #116]	; (80855f4 <_Z9readOzonev+0x94>)
 808557e:	f004 ffb5 	bl	808a4ec <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 8085582:	f006 f85f 	bl	808b644 <_Z16_fetch_usbserialv>
 8085586:	220a      	movs	r2, #10
 8085588:	4629      	mov	r1, r5
 808558a:	f005 f830 	bl	808a5ee <_ZN5Print7printlnEii>

        }
        O3_float = tempValue;
        O3_float *= VOLTS_PER_UNIT;           //convert digital reading to voltage
        O3_float /= VOLTS_PER_PPB;            //convert voltage to ppb of ozone
        O3_float += ozone_offset;
 808558e:	4628      	mov	r0, r5
 8085590:	f007 fbb4 	bl	808ccfc <__aeabi_i2f>
 8085594:	f006 ff5c 	bl	808c450 <__aeabi_f2d>
 8085598:	a30f      	add	r3, pc, #60	; (adr r3, 80855d8 <_Z9readOzonev+0x78>)
 808559a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808559e:	f006 ffab 	bl	808c4f8 <__aeabi_dmul>
 80855a2:	f007 faa1 	bl	808cae8 <__aeabi_d2f>
 80855a6:	f006 ff53 	bl	808c450 <__aeabi_f2d>
 80855aa:	a30d      	add	r3, pc, #52	; (adr r3, 80855e0 <_Z9readOzonev+0x80>)
 80855ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80855b0:	f007 f8cc 	bl	808c74c <__aeabi_ddiv>
 80855b4:	f007 fa98 	bl	808cae8 <__aeabi_d2f>
 80855b8:	4b0f      	ldr	r3, [pc, #60]	; (80855f8 <_Z9readOzonev+0x98>)
 80855ba:	4605      	mov	r5, r0
 80855bc:	6818      	ldr	r0, [r3, #0]
 80855be:	f007 fb9d 	bl	808ccfc <__aeabi_i2f>
 80855c2:	4601      	mov	r1, r0
 80855c4:	4628      	mov	r0, r5
 80855c6:	f007 fae5 	bl	808cb94 <__addsf3>
 80855ca:	e001      	b.n	80855d0 <_Z9readOzonev+0x70>
    }else{
        O3_float = getEspOzoneData();
 80855cc:	f7ff fe9c 	bl	8085308 <_Z15getEspOzoneDatav>
 80855d0:	6020      	str	r0, [r4, #0]
 80855d2:	bd38      	pop	{r3, r4, r5, pc}
 80855d4:	f3af 8000 	nop.w
 80855d8:	eb1c432d 	.word	0xeb1c432d
 80855dc:	3f4a36e2 	.word	0x3f4a36e2
 80855e0:	9999999a 	.word	0x9999999a
 80855e4:	3f899999 	.word	0x3f899999
 80855e8:	20000b64 	.word	0x20000b64
 80855ec:	20000b80 	.word	0x20000b80
 80855f0:	20000af8 	.word	0x20000af8
 80855f4:	080920fb 	.word	0x080920fb
 80855f8:	200006b4 	.word	0x200006b4

080855fc <_Z26serialIncreaseInputCurrentv>:
    Serial.println("failed writing string");
  }

}

void serialIncreaseInputCurrent(void){
 80855fc:	b538      	push	{r3, r4, r5, lr}
    int inputCurrent = pmic.getInputCurrentLimit();
 80855fe:	481d      	ldr	r0, [pc, #116]	; (8085674 <_Z26serialIncreaseInputCurrentv+0x78>)
 8085600:	f004 fa5c 	bl	8089abc <_ZN4PMIC20getInputCurrentLimitEv>
 8085604:	4605      	mov	r5, r0
    Serial.printf("Old input current limit: %d\n\r", inputCurrent);
 8085606:	f006 f81d 	bl	808b644 <_Z16_fetch_usbserialv>
 808560a:	462a      	mov	r2, r5
 808560c:	491a      	ldr	r1, [pc, #104]	; (8085678 <_Z26serialIncreaseInputCurrentv+0x7c>)
 808560e:	f7ff fe74 	bl	80852fa <_ZN5Print6printfIIiEEEjPKcDpT_>

    if(inputCurrent == 100){
        inputCurrent = 150;
    }else if(inputCurrent == 100){
 8085612:	2d64      	cmp	r5, #100	; 0x64
 8085614:	d016      	beq.n	8085644 <_Z26serialIncreaseInputCurrentv+0x48>
        inputCurrent = 150;
    }else if(inputCurrent == 150){
 8085616:	2d96      	cmp	r5, #150	; 0x96
 8085618:	d016      	beq.n	8085648 <_Z26serialIncreaseInputCurrentv+0x4c>
        inputCurrent = 500;
    }else if(inputCurrent == 500){
 808561a:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 808561e:	d016      	beq.n	808564e <_Z26serialIncreaseInputCurrentv+0x52>
        inputCurrent = 900;
    }else if(inputCurrent == 900){
 8085620:	f5b5 7f61 	cmp.w	r5, #900	; 0x384
 8085624:	d016      	beq.n	8085654 <_Z26serialIncreaseInputCurrentv+0x58>
        inputCurrent = 1200;
    }else if(inputCurrent == 1200){
 8085626:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 808562a:	f240 54dc 	movw	r4, #1500	; 0x5dc
 808562e:	d016      	beq.n	808565e <_Z26serialIncreaseInputCurrentv+0x62>
        inputCurrent = 1500;
    }else if(inputCurrent == 1500){
 8085630:	42a5      	cmp	r5, r4
 8085632:	d012      	beq.n	808565a <_Z26serialIncreaseInputCurrentv+0x5e>
        inputCurrent = 2000;
    }else if(inputCurrent == 2000){
        inputCurrent = 3000;
 8085634:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8085638:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 808563c:	bf14      	ite	ne
 808563e:	462c      	movne	r4, r5
 8085640:	4614      	moveq	r4, r2
 8085642:	e00c      	b.n	808565e <_Z26serialIncreaseInputCurrentv+0x62>
    Serial.printf("Old input current limit: %d\n\r", inputCurrent);

    if(inputCurrent == 100){
        inputCurrent = 150;
    }else if(inputCurrent == 100){
        inputCurrent = 150;
 8085644:	2496      	movs	r4, #150	; 0x96
 8085646:	e00a      	b.n	808565e <_Z26serialIncreaseInputCurrentv+0x62>
    }else if(inputCurrent == 150){
        inputCurrent = 500;
 8085648:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
 808564c:	e007      	b.n	808565e <_Z26serialIncreaseInputCurrentv+0x62>
    }else if(inputCurrent == 500){
        inputCurrent = 900;
 808564e:	f44f 7461 	mov.w	r4, #900	; 0x384
 8085652:	e004      	b.n	808565e <_Z26serialIncreaseInputCurrentv+0x62>
    }else if(inputCurrent == 900){
        inputCurrent = 1200;
 8085654:	f44f 6496 	mov.w	r4, #1200	; 0x4b0
 8085658:	e001      	b.n	808565e <_Z26serialIncreaseInputCurrentv+0x62>
    }else if(inputCurrent == 1200){
        inputCurrent = 1500;
    }else if(inputCurrent == 1500){
        inputCurrent = 2000;
 808565a:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
    }else if(inputCurrent == 2000){
        inputCurrent = 3000;
    }
    //delay(2000);
    pmic.setInputCurrentLimit(inputCurrent);
 808565e:	b2a1      	uxth	r1, r4
 8085660:	4804      	ldr	r0, [pc, #16]	; (8085674 <_Z26serialIncreaseInputCurrentv+0x78>)
 8085662:	f004 fa63 	bl	8089b2c <_ZN4PMIC20setInputCurrentLimitEt>
    Serial.printf("New input current limit: %d\n\r", inputCurrent);
 8085666:	f005 ffed 	bl	808b644 <_Z16_fetch_usbserialv>
 808566a:	4622      	mov	r2, r4
 808566c:	4903      	ldr	r1, [pc, #12]	; (808567c <_Z26serialIncreaseInputCurrentv+0x80>)
 808566e:	f7ff fe44 	bl	80852fa <_ZN5Print6printfIIiEEEjPKcDpT_>
 8085672:	bd38      	pop	{r3, r4, r5, pc}
 8085674:	20000ad4 	.word	0x20000ad4
 8085678:	08092110 	.word	0x08092110
 808567c:	0809212e 	.word	0x0809212e

08085680 <_Z27serialIncreaseChargeCurrentv>:
}

void serialIncreaseChargeCurrent(void){
 8085680:	b5f0      	push	{r4, r5, r6, r7, lr}
    bool bit5 = 0;
    bool bit4 = 0;
    bool bit3 = 0;
    bool bit2 = 0;

    byte chargeCurrent = pmic.getChargeCurrent();
 8085682:	4833      	ldr	r0, [pc, #204]	; (8085750 <_Z27serialIncreaseChargeCurrentv+0xd0>)
    //delay(2000);
    pmic.setInputCurrentLimit(inputCurrent);
    Serial.printf("New input current limit: %d\n\r", inputCurrent);
}

void serialIncreaseChargeCurrent(void){
 8085684:	b085      	sub	sp, #20
    bool bit5 = 0;
    bool bit4 = 0;
    bool bit3 = 0;
    bool bit2 = 0;

    byte chargeCurrent = pmic.getChargeCurrent();
 8085686:	f004 fa25 	bl	8089ad4 <_ZN4PMIC16getChargeCurrentEv>
 808568a:	4605      	mov	r5, r0
    //bit 7
    if(chargeCurrent & 0x80){
        total_current += 2048;
 808568c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8085690:	bf0c      	ite	eq
 8085692:	2400      	moveq	r4, #0
 8085694:	f44f 6400 	movne.w	r4, #2048	; 0x800
    }
    //bit 6
    if(chargeCurrent & 0x40){
 8085698:	0647      	lsls	r7, r0, #25
        total_current += 1024;
 808569a:	bf48      	it	mi
 808569c:	f504 6480 	addmi.w	r4, r4, #1024	; 0x400
    }
    //bit 5
    if(chargeCurrent & 0x20){
 80856a0:	0686      	lsls	r6, r0, #26
        total_current += 512;
 80856a2:	bf48      	it	mi
 80856a4:	f504 7400 	addmi.w	r4, r4, #512	; 0x200
    }
    //bit 4
    if(chargeCurrent & 0x10){
 80856a8:	06e8      	lsls	r0, r5, #27
        total_current += 256;
 80856aa:	bf48      	it	mi
 80856ac:	f504 7480 	addmi.w	r4, r4, #256	; 0x100
    }
    //bit 3
    if(chargeCurrent & 0x08){
 80856b0:	0729      	lsls	r1, r5, #28
        total_current += 128;
 80856b2:	bf48      	it	mi
 80856b4:	3480      	addmi	r4, #128	; 0x80
    }
    //bit 2
    if(chargeCurrent & 0x04){
 80856b6:	076a      	lsls	r2, r5, #29
        total_current += 64;
 80856b8:	bf48      	it	mi
 80856ba:	3440      	addmi	r4, #64	; 0x40
    }
    Serial.printf("Increasing Charge current from %d mA to ", total_current);
 80856bc:	f005 ffc2 	bl	808b644 <_Z16_fetch_usbserialv>
 80856c0:	4622      	mov	r2, r4
 80856c2:	4924      	ldr	r1, [pc, #144]	; (8085754 <_Z27serialIncreaseChargeCurrentv+0xd4>)
 80856c4:	f7ff fe19 	bl	80852fa <_ZN5Print6printfIIiEEEjPKcDpT_>
    chargeCurrent += 4;
 80856c8:	1d28      	adds	r0, r5, #4
 80856ca:	b2c0      	uxtb	r0, r0
    total_current = 0;

    if(chargeCurrent & 0x80){
 80856cc:	0603      	lsls	r3, r0, #24
    Serial.printf("New input current limit: %d\n\r", inputCurrent);
}

void serialIncreaseChargeCurrent(void){
    int total_current = 0;
    bool bit7 = 0;
 80856ce:	bf58      	it	pl
 80856d0:	2100      	movpl	r1, #0
    if(chargeCurrent & 0x80){
        total_current += 2048;
        bit7 = 1;
    }
    //bit 6
    if(chargeCurrent & 0x40){
 80856d2:	f000 0340 	and.w	r3, r0, #64	; 0x40
    chargeCurrent += 4;
    total_current = 0;

    if(chargeCurrent & 0x80){
        total_current += 2048;
        bit7 = 1;
 80856d6:	bf46      	itte	mi
 80856d8:	2101      	movmi	r1, #1
    Serial.printf("Increasing Charge current from %d mA to ", total_current);
    chargeCurrent += 4;
    total_current = 0;

    if(chargeCurrent & 0x80){
        total_current += 2048;
 80856da:	f44f 6400 	movmi.w	r4, #2048	; 0x800
    if(chargeCurrent & 0x04){
        total_current += 64;
    }
    Serial.printf("Increasing Charge current from %d mA to ", total_current);
    chargeCurrent += 4;
    total_current = 0;
 80856de:	460c      	movpl	r4, r1
    if(chargeCurrent & 0x80){
        total_current += 2048;
        bit7 = 1;
    }
    //bit 6
    if(chargeCurrent & 0x40){
 80856e0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80856e4:	b113      	cbz	r3, 80856ec <_Z27serialIncreaseChargeCurrentv+0x6c>
        total_current += 1024;
 80856e6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
        bit6 = 1;
 80856ea:	2201      	movs	r2, #1
    }
    //bit 5
    if(chargeCurrent & 0x20){
 80856ec:	f000 0520 	and.w	r5, r0, #32
 80856f0:	f005 03ff 	and.w	r3, r5, #255	; 0xff
 80856f4:	b115      	cbz	r5, 80856fc <_Z27serialIncreaseChargeCurrentv+0x7c>
        total_current += 512;
 80856f6:	f504 7400 	add.w	r4, r4, #512	; 0x200
        bit5 = 1;
 80856fa:	2301      	movs	r3, #1
    }
    //bit 4
    if(chargeCurrent & 0x10){
 80856fc:	f000 0610 	and.w	r6, r0, #16
 8085700:	f006 05ff 	and.w	r5, r6, #255	; 0xff
 8085704:	b116      	cbz	r6, 808570c <_Z27serialIncreaseChargeCurrentv+0x8c>
        total_current += 256;
 8085706:	f504 7480 	add.w	r4, r4, #256	; 0x100
        bit4 = 1;
 808570a:	2501      	movs	r5, #1
    }
    //bit 3
    if(chargeCurrent & 0x08){
 808570c:	f000 0708 	and.w	r7, r0, #8
 8085710:	f007 06ff 	and.w	r6, r7, #255	; 0xff
 8085714:	b10f      	cbz	r7, 808571a <_Z27serialIncreaseChargeCurrentv+0x9a>
        total_current += 128;
 8085716:	3480      	adds	r4, #128	; 0x80
        bit3 = 1;
 8085718:	2601      	movs	r6, #1
    }
    //bit 2
    if(chargeCurrent & 0x04){
 808571a:	f000 0004 	and.w	r0, r0, #4
 808571e:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 8085722:	b110      	cbz	r0, 808572a <_Z27serialIncreaseChargeCurrentv+0xaa>
        total_current += 64;
 8085724:	3440      	adds	r4, #64	; 0x40
        bit2 = 1;
 8085726:	2001      	movs	r0, #1
 8085728:	e000      	b.n	808572c <_Z27serialIncreaseChargeCurrentv+0xac>
    bool bit7 = 0;
    bool bit6 = 0;
    bool bit5 = 0;
    bool bit4 = 0;
    bool bit3 = 0;
    bool bit2 = 0;
 808572a:	4638      	mov	r0, r7
    if(chargeCurrent & 0x04){
        total_current += 64;
        bit2 = 1;
    }

    pmic.setChargeCurrent(bit7, bit6, bit5, bit4, bit3, bit2);
 808572c:	9002      	str	r0, [sp, #8]
 808572e:	e88d 0060 	stmia.w	sp, {r5, r6}
 8085732:	4807      	ldr	r0, [pc, #28]	; (8085750 <_Z27serialIncreaseChargeCurrentv+0xd0>)
 8085734:	f004 fa5d 	bl	8089bf2 <_ZN4PMIC16setChargeCurrentEbbbbbb>
    chargeCurrent = pmic.getChargeCurrent();
 8085738:	4805      	ldr	r0, [pc, #20]	; (8085750 <_Z27serialIncreaseChargeCurrentv+0xd0>)
 808573a:	f004 f9cb 	bl	8089ad4 <_ZN4PMIC16getChargeCurrentEv>
    Serial.printf("new charge current of %d mA\n\r", total_current);
 808573e:	f005 ff81 	bl	808b644 <_Z16_fetch_usbserialv>
 8085742:	4622      	mov	r2, r4
 8085744:	4904      	ldr	r1, [pc, #16]	; (8085758 <_Z27serialIncreaseChargeCurrentv+0xd8>)
 8085746:	f7ff fdd8 	bl	80852fa <_ZN5Print6printfIIiEEEjPKcDpT_>
}
 808574a:	b005      	add	sp, #20
 808574c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808574e:	bf00      	nop
 8085750:	20000ad4 	.word	0x20000ad4
 8085754:	0809214c 	.word	0x0809214c
 8085758:	08092175 	.word	0x08092175
 808575c:	00000000 	.word	0x00000000

08085760 <_Z10readAlpha1v>:
    CO2_float *= CO2_slope;
    CO2_float += CO2_zero;
    
    return CO2_float;
}
float readAlpha1(void){
 8085760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    float sensorCurrent; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent;
    float correctedCurrent;
    float alpha1_ppmraw;
    String alpha1_ppmRounded;
    if(debugging_enabled){
 8085764:	4da2      	ldr	r5, [pc, #648]	; (80859f0 <_Z10readAlpha1v+0x290>)
    CO2_float *= CO2_slope;
    CO2_float += CO2_zero;
    
    return CO2_float;
}
float readAlpha1(void){
 8085766:	b08b      	sub	sp, #44	; 0x2c
    float volt_half_Vref;
    float sensorCurrent; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent;
    float correctedCurrent;
    float alpha1_ppmraw;
    String alpha1_ppmRounded;
 8085768:	49a2      	ldr	r1, [pc, #648]	; (80859f4 <_Z10readAlpha1v+0x294>)
 808576a:	a802      	add	r0, sp, #8
 808576c:	f004 fcc7 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
    if(debugging_enabled){
 8085770:	682b      	ldr	r3, [r5, #0]
 8085772:	b123      	cbz	r3, 808577e <_Z10readAlpha1v+0x1e>
        Serial.println("Start of alpha read");
 8085774:	f005 ff66 	bl	808b644 <_Z16_fetch_usbserialv>
 8085778:	499f      	ldr	r1, [pc, #636]	; (80859f8 <_Z10readAlpha1v+0x298>)
 808577a:	f004 feca 	bl	808a512 <_ZN5Print7printlnEPKc>
    }
    digitalWrite(lmp91000_1_en, LOW);   //enable
 808577e:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8085a50 <_Z10readAlpha1v+0x2f0>
 8085782:	2100      	movs	r1, #0
 8085784:	f8b9 0000 	ldrh.w	r0, [r9]
 8085788:	f006 facf 	bl	808bd2a <digitalWrite>

    if(Wire.requestFrom(0x49,1) == 0){
 808578c:	f006 fb6a 	bl	808be64 <_Z19__fetch_global_Wirev>
 8085790:	2201      	movs	r2, #1
 8085792:	2149      	movs	r1, #73	; 0x49
 8085794:	f006 f92e 	bl	808b9f4 <_ZN7TwoWire11requestFromEii>
 8085798:	f8cd 9004 	str.w	r9, [sp, #4]
 808579c:	b948      	cbnz	r0, 80857b2 <_Z10readAlpha1v+0x52>
      if(debugging_enabled){
 808579e:	682b      	ldr	r3, [r5, #0]
 80857a0:	2b00      	cmp	r3, #0
 80857a2:	d039      	beq.n	8085818 <_Z10readAlpha1v+0xb8>
        Serial.println("Couldn't communicate with LMP91000");
 80857a4:	f005 ff4e 	bl	808b644 <_Z16_fetch_usbserialv>
 80857a8:	4994      	ldr	r1, [pc, #592]	; (80859fc <_Z10readAlpha1v+0x29c>)
 80857aa:	f004 feb2 	bl	808a512 <_ZN5Print7printlnEPKc>
        writeLogFile("Couldn't communicate with LMP91000");
 80857ae:	4993      	ldr	r1, [pc, #588]	; (80859fc <_Z10readAlpha1v+0x29c>)
 80857b0:	e029      	b.n	8085806 <_Z10readAlpha1v+0xa6>
        //digitalWrite(red_status_led, HIGH);
        //delay(200);
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }else{
        half_Vref = ads1.readADC_SingleEnded(3); //half of Vref
 80857b2:	2103      	movs	r1, #3
 80857b4:	4892      	ldr	r0, [pc, #584]	; (8085a00 <_Z10readAlpha1v+0x2a0>)
 80857b6:	f001 fa60 	bl	8086c7a <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
 80857ba:	4604      	mov	r4, r0
        volt_half_Vref = half_Vref * ads_bitmv;
        if(abs((volt_half_Vref)/1000 - 1.25) > 0.5){
 80857bc:	f007 fa9e 	bl	808ccfc <__aeabi_i2f>
        //delay(200);
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }else{
        half_Vref = ads1.readADC_SingleEnded(3); //half of Vref
        volt_half_Vref = half_Vref * ads_bitmv;
 80857c0:	4b90      	ldr	r3, [pc, #576]	; (8085a04 <_Z10readAlpha1v+0x2a4>)
        if(abs((volt_half_Vref)/1000 - 1.25) > 0.5){
 80857c2:	6819      	ldr	r1, [r3, #0]
 80857c4:	f007 faee 	bl	808cda4 <__aeabi_fmul>
 80857c8:	498f      	ldr	r1, [pc, #572]	; (8085a08 <_Z10readAlpha1v+0x2a8>)
 80857ca:	f007 fb9f 	bl	808cf0c <__aeabi_fdiv>
 80857ce:	4681      	mov	r9, r0
 80857d0:	f006 fe3e 	bl	808c450 <__aeabi_f2d>
 80857d4:	2200      	movs	r2, #0
 80857d6:	4b8d      	ldr	r3, [pc, #564]	; (8085a0c <_Z10readAlpha1v+0x2ac>)
 80857d8:	f006 fcda 	bl	808c190 <__aeabi_dsub>
 80857dc:	f007 f93c 	bl	808ca58 <__aeabi_d2iz>
 80857e0:	2800      	cmp	r0, #0
 80857e2:	bfb8      	it	lt
 80857e4:	4240      	neglt	r0, r0
 80857e6:	f006 fe21 	bl	808c42c <__aeabi_i2d>
 80857ea:	2200      	movs	r2, #0
 80857ec:	4b88      	ldr	r3, [pc, #544]	; (8085a10 <_Z10readAlpha1v+0x2b0>)
 80857ee:	f007 f913 	bl	808ca18 <__aeabi_dcmpgt>
 80857f2:	b188      	cbz	r0, 8085818 <_Z10readAlpha1v+0xb8>
          if(debugging_enabled){
 80857f4:	682b      	ldr	r3, [r5, #0]
 80857f6:	b17b      	cbz	r3, 8085818 <_Z10readAlpha1v+0xb8>
            Serial.printf("Halfvolt: %1.2f\n\r", volt_half_Vref/1000);
 80857f8:	f005 ff24 	bl	808b644 <_Z16_fetch_usbserialv>
 80857fc:	4985      	ldr	r1, [pc, #532]	; (8085a14 <_Z10readAlpha1v+0x2b4>)
 80857fe:	464a      	mov	r2, r9
 8085800:	f7ff fd6c 	bl	80852dc <_ZN5Print6printfIIfEEEjPKcDpT_>
            writeLogFile("Halfvolt higher than 0.5");
 8085804:	4984      	ldr	r1, [pc, #528]	; (8085a18 <_Z10readAlpha1v+0x2b8>)
 8085806:	a806      	add	r0, sp, #24
 8085808:	f004 fc79 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
 808580c:	a806      	add	r0, sp, #24
 808580e:	f7fc f8bb 	bl	8081988 <_Z12writeLogFile6String>
 8085812:	a806      	add	r0, sp, #24
 8085814:	f004 fc2c 	bl	808a070 <_ZN6StringD1Ev>
          }
        }
    }

    if(lmp91000.read(LMP91000_STATUS_REG) == 0){
 8085818:	2100      	movs	r1, #0
 808581a:	4880      	ldr	r0, [pc, #512]	; (8085a1c <_Z10readAlpha1v+0x2bc>)
 808581c:	f001 f8d7 	bl	80869ce <_ZN8LMP910004readEh>
 8085820:	b980      	cbnz	r0, 8085844 <_Z10readAlpha1v+0xe4>
        if(debugging_enabled){
 8085822:	682b      	ldr	r3, [r5, #0]
 8085824:	b173      	cbz	r3, 8085844 <_Z10readAlpha1v+0xe4>
            Serial.println("Status = 0 from LMP91000 status reg");
 8085826:	f005 ff0d 	bl	808b644 <_Z16_fetch_usbserialv>
 808582a:	497d      	ldr	r1, [pc, #500]	; (8085a20 <_Z10readAlpha1v+0x2c0>)
 808582c:	f004 fe71 	bl	808a512 <_ZN5Print7printlnEPKc>
            writeLogFile("LMP1000 status = 0");
 8085830:	497c      	ldr	r1, [pc, #496]	; (8085a24 <_Z10readAlpha1v+0x2c4>)
 8085832:	a806      	add	r0, sp, #24
 8085834:	f004 fc63 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
 8085838:	a806      	add	r0, sp, #24
 808583a:	f7fc f8a5 	bl	8081988 <_Z12writeLogFile6String>
 808583e:	a806      	add	r0, sp, #24
 8085840:	f004 fc16 	bl	808a070 <_ZN6StringD1Ev>
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }

    //if(Wire.requestFrom(0x49,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref)/1000 - 1.25) > 0.5)){
    if(Wire.requestFrom(0x49,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0){
 8085844:	f006 fb0e 	bl	808be64 <_Z19__fetch_global_Wirev>
 8085848:	2201      	movs	r2, #1
 808584a:	2149      	movs	r1, #73	; 0x49
 808584c:	f006 f8d2 	bl	808b9f4 <_ZN7TwoWire11requestFromEii>
 8085850:	2800      	cmp	r0, #0
 8085852:	f000 80b9 	beq.w	80859c8 <_Z10readAlpha1v+0x268>
 8085856:	2100      	movs	r1, #0
 8085858:	4870      	ldr	r0, [pc, #448]	; (8085a1c <_Z10readAlpha1v+0x2bc>)
 808585a:	f001 f8b8 	bl	80869ce <_ZN8LMP910004readEh>
 808585e:	2800      	cmp	r0, #0
 8085860:	f000 80b2 	beq.w	80859c8 <_Z10readAlpha1v+0x268>
 8085864:	2400      	movs	r4, #0
 8085866:	46a2      	mov	sl, r4
 8085868:	4627      	mov	r7, r4
 808586a:	4626      	mov	r6, r4
 808586c:	f04f 080a 	mov.w	r8, #10
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
          A0_gas += ads1.readADC_SingleEnded(0); //gas
 8085870:	2100      	movs	r1, #0
 8085872:	4863      	ldr	r0, [pc, #396]	; (8085a00 <_Z10readAlpha1v+0x2a0>)
 8085874:	f001 fa01 	bl	8086c7a <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
 8085878:	2101      	movs	r1, #1
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
          A0_gas += ads1.readADC_SingleEnded(0); //gas
 808587a:	4406      	add	r6, r0
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
 808587c:	4860      	ldr	r0, [pc, #384]	; (8085a00 <_Z10readAlpha1v+0x2a0>)
 808587e:	f001 f9fc 	bl	8086c7a <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
 8085882:	2102      	movs	r1, #2
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
          A0_gas += ads1.readADC_SingleEnded(0); //gas
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
 8085884:	4407      	add	r7, r0
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
 8085886:	485e      	ldr	r0, [pc, #376]	; (8085a00 <_Z10readAlpha1v+0x2a0>)
 8085888:	f001 f9f7 	bl	8086c7a <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
 808588c:	2103      	movs	r1, #3
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
          A0_gas += ads1.readADC_SingleEnded(0); //gas
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
 808588e:	4482      	add	sl, r0
          half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
 8085890:	485b      	ldr	r0, [pc, #364]	; (8085a00 <_Z10readAlpha1v+0x2a0>)
 8085892:	f001 f9f2 	bl	8086c7a <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
    }else{
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
 8085896:	f1b8 0801 	subs.w	r8, r8, #1
          A0_gas += ads1.readADC_SingleEnded(0); //gas
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
          half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
 808589a:	4404      	add	r4, r0
    }else{
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
 808589c:	d1e8      	bne.n	8085870 <_Z10readAlpha1v+0x110>
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
          half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
        }

        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
 808589e:	230a      	movs	r3, #10
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;
 80858a0:	fb94 f4f3 	sdiv	r4, r4, r3
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
          half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
        }

        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
 80858a4:	fb96 f6f3 	sdiv	r6, r6, r3
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
 80858a8:	fb97 f7f3 	sdiv	r7, r7, r3
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
 80858ac:	fb9a faf3 	sdiv	sl, sl, r3
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;

        volt0_gas = A0_gas * ads_bitmv;
 80858b0:	4b54      	ldr	r3, [pc, #336]	; (8085a04 <_Z10readAlpha1v+0x2a4>)
        volt1_aux = A1_aux * ads_bitmv;
        volt2_temperature = A2_temperature * ads_bitmv;
        volt_half_Vref = half_Vref * ads_bitmv;
 80858b2:	4620      	mov	r0, r4
        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;

        volt0_gas = A0_gas * ads_bitmv;
 80858b4:	f8d3 8000 	ldr.w	r8, [r3]
        volt1_aux = A1_aux * ads_bitmv;
        volt2_temperature = A2_temperature * ads_bitmv;
        volt_half_Vref = half_Vref * ads_bitmv;
 80858b8:	f007 fa20 	bl	808ccfc <__aeabi_i2f>
 80858bc:	4641      	mov	r1, r8
 80858be:	f007 fa71 	bl	808cda4 <__aeabi_fmul>
 80858c2:	4681      	mov	r9, r0

        sensorCurrent = (volt_half_Vref - volt0_gas) / (-1*120); // Working Electrode current in microamps (millivolts / Kohms)
 80858c4:	4630      	mov	r0, r6
 80858c6:	f007 fa19 	bl	808ccfc <__aeabi_i2f>
 80858ca:	4641      	mov	r1, r8
 80858cc:	f007 fa6a 	bl	808cda4 <__aeabi_fmul>
 80858d0:	4601      	mov	r1, r0
 80858d2:	4648      	mov	r0, r9
 80858d4:	f007 f95c 	bl	808cb90 <__aeabi_fsub>
 80858d8:	4953      	ldr	r1, [pc, #332]	; (8085a28 <_Z10readAlpha1v+0x2c8>)
 80858da:	f007 fb17 	bl	808cf0c <__aeabi_fdiv>
 80858de:	4683      	mov	fp, r0
        auxCurrent = (volt_half_Vref - volt1_aux) / (-1*150);
 80858e0:	4638      	mov	r0, r7
 80858e2:	f007 fa0b 	bl	808ccfc <__aeabi_i2f>
 80858e6:	4641      	mov	r1, r8
 80858e8:	f007 fa5c 	bl	808cda4 <__aeabi_fmul>
 80858ec:	4601      	mov	r1, r0
 80858ee:	4648      	mov	r0, r9
 80858f0:	f007 f94e 	bl	808cb90 <__aeabi_fsub>
 80858f4:	494d      	ldr	r1, [pc, #308]	; (8085a2c <_Z10readAlpha1v+0x2cc>)
 80858f6:	f007 fb09 	bl	808cf0c <__aeabi_fdiv>
 80858fa:	4680      	mov	r8, r0
        //{1, -1, -0.76}, //CO-A4 (<=10C, 20C, >=30C)
        if(readTemperature() <= 15){
 80858fc:	f7fb fdf8 	bl	80814f0 <_Z15readTemperaturev>
 8085900:	494b      	ldr	r1, [pc, #300]	; (8085a30 <_Z10readAlpha1v+0x2d0>)
 8085902:	f007 fbf7 	bl	808d0f4 <__aeabi_fcmple>
 8085906:	b120      	cbz	r0, 8085912 <_Z10readAlpha1v+0x1b2>
          correctedCurrent = ((sensorCurrent) - (auxCurrent));
 8085908:	4641      	mov	r1, r8
 808590a:	4658      	mov	r0, fp
 808590c:	f007 f940 	bl	808cb90 <__aeabi_fsub>
 8085910:	e01f      	b.n	8085952 <_Z10readAlpha1v+0x1f2>
        }
        else if(readTemperature() <= 25){
 8085912:	f7fb fded 	bl	80814f0 <_Z15readTemperaturev>
 8085916:	4947      	ldr	r1, [pc, #284]	; (8085a34 <_Z10readAlpha1v+0x2d4>)
 8085918:	f007 fbec 	bl	808d0f4 <__aeabi_fcmple>
 808591c:	b120      	cbz	r0, 8085928 <_Z10readAlpha1v+0x1c8>
          correctedCurrent = ((sensorCurrent) - (-1)*(auxCurrent));
 808591e:	4641      	mov	r1, r8
 8085920:	4658      	mov	r0, fp
 8085922:	f007 f937 	bl	808cb94 <__addsf3>
 8085926:	e014      	b.n	8085952 <_Z10readAlpha1v+0x1f2>
        }
        else{
          correctedCurrent = ((sensorCurrent) - (-0.76)*(auxCurrent));
 8085928:	4640      	mov	r0, r8
 808592a:	f006 fd91 	bl	808c450 <__aeabi_f2d>
 808592e:	a32c      	add	r3, pc, #176	; (adr r3, 80859e0 <_Z10readAlpha1v+0x280>)
 8085930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8085934:	f006 fde0 	bl	808c4f8 <__aeabi_dmul>
 8085938:	4680      	mov	r8, r0
 808593a:	4658      	mov	r0, fp
 808593c:	4689      	mov	r9, r1
 808593e:	f006 fd87 	bl	808c450 <__aeabi_f2d>
 8085942:	4602      	mov	r2, r0
 8085944:	460b      	mov	r3, r1
 8085946:	4640      	mov	r0, r8
 8085948:	4649      	mov	r1, r9
 808594a:	f006 fc23 	bl	808c194 <__adddf3>
 808594e:	f007 f8cb 	bl	808cae8 <__aeabi_d2f>
        }
        alpha1_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 8085952:	f006 fd7d 	bl	808c450 <__aeabi_f2d>
 8085956:	a324      	add	r3, pc, #144	; (adr r3, 80859e8 <_Z10readAlpha1v+0x288>)
 8085958:	e9d3 2300 	ldrd	r2, r3, [r3]
 808595c:	f006 fef6 	bl	808c74c <__aeabi_ddiv>
 8085960:	f007 f8c2 	bl	808cae8 <__aeabi_d2f>
        alpha1_ppmRounded = String(alpha1_ppmraw, 2);
 8085964:	2202      	movs	r2, #2
 8085966:	4601      	mov	r1, r0
          correctedCurrent = ((sensorCurrent) - (-1)*(auxCurrent));
        }
        else{
          correctedCurrent = ((sensorCurrent) - (-0.76)*(auxCurrent));
        }
        alpha1_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 8085968:	4680      	mov	r8, r0
        alpha1_ppmRounded = String(alpha1_ppmraw, 2);
 808596a:	a806      	add	r0, sp, #24
 808596c:	f004 fc61 	bl	808a232 <_ZN6StringC1Efi>
 8085970:	a906      	add	r1, sp, #24
 8085972:	a802      	add	r0, sp, #8
 8085974:	f004 fc0d 	bl	808a192 <_ZN6StringaSEOS_>
 8085978:	a806      	add	r0, sp, #24
 808597a:	f004 fb79 	bl	808a070 <_ZN6StringD1Ev>
      }

      digitalWrite(lmp91000_1_en, HIGH);  //disable
 808597e:	9b01      	ldr	r3, [sp, #4]
 8085980:	2101      	movs	r1, #1
 8085982:	8818      	ldrh	r0, [r3, #0]
 8085984:	f006 f9d1 	bl	808bd2a <digitalWrite>

      if(debugging_enabled){
 8085988:	682b      	ldr	r3, [r5, #0]
 808598a:	b313      	cbz	r3, 80859d2 <_Z10readAlpha1v+0x272>
          Serial.print("CO measurements:  \n\r");
 808598c:	f005 fe5a 	bl	808b644 <_Z16_fetch_usbserialv>
 8085990:	4929      	ldr	r1, [pc, #164]	; (8085a38 <_Z10readAlpha1v+0x2d8>)
 8085992:	f004 fdab 	bl	808a4ec <_ZN5Print5printEPKc>
          Serial.printf("A0_gas: %d\n\r", A0_gas);
 8085996:	f005 fe55 	bl	808b644 <_Z16_fetch_usbserialv>
 808599a:	4632      	mov	r2, r6
 808599c:	4927      	ldr	r1, [pc, #156]	; (8085a3c <_Z10readAlpha1v+0x2dc>)
 808599e:	f7ff fcac 	bl	80852fa <_ZN5Print6printfIIiEEEjPKcDpT_>
          Serial.printf("A1_aux: %d\n\r", A1_aux);
 80859a2:	f005 fe4f 	bl	808b644 <_Z16_fetch_usbserialv>
 80859a6:	463a      	mov	r2, r7
 80859a8:	4925      	ldr	r1, [pc, #148]	; (8085a40 <_Z10readAlpha1v+0x2e0>)
 80859aa:	f7ff fca6 	bl	80852fa <_ZN5Print6printfIIiEEEjPKcDpT_>
          Serial.printf("A2_temp: %d\n\r", A2_temperature);
 80859ae:	f005 fe49 	bl	808b644 <_Z16_fetch_usbserialv>
 80859b2:	4652      	mov	r2, sl
 80859b4:	4923      	ldr	r1, [pc, #140]	; (8085a44 <_Z10readAlpha1v+0x2e4>)
 80859b6:	f7ff fca0 	bl	80852fa <_ZN5Print6printfIIiEEEjPKcDpT_>
          Serial.printf("half_vref: %d\n\r", half_Vref);
 80859ba:	f005 fe43 	bl	808b644 <_Z16_fetch_usbserialv>
 80859be:	4622      	mov	r2, r4
 80859c0:	4921      	ldr	r1, [pc, #132]	; (8085a48 <_Z10readAlpha1v+0x2e8>)
 80859c2:	f7ff fc9a 	bl	80852fa <_ZN5Print6printfIIiEEEjPKcDpT_>
 80859c6:	e004      	b.n	80859d2 <_Z10readAlpha1v+0x272>
        //delay(200);
    }

    //if(Wire.requestFrom(0x49,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref)/1000 - 1.25) > 0.5)){
    if(Wire.requestFrom(0x49,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0){
        alpha1_ppmRounded = "-99";
 80859c8:	4920      	ldr	r1, [pc, #128]	; (8085a4c <_Z10readAlpha1v+0x2ec>)
 80859ca:	a802      	add	r0, sp, #8
 80859cc:	f004 fbe9 	bl	808a1a2 <_ZN6StringaSEPKc>
 80859d0:	e7d5      	b.n	808597e <_Z10readAlpha1v+0x21e>
    float volt_half_Vref;
    float sensorCurrent; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent;
    float correctedCurrent;
    float alpha1_ppmraw;
    String alpha1_ppmRounded;
 80859d2:	a802      	add	r0, sp, #8
 80859d4:	f004 fb4c 	bl	808a070 <_ZN6StringD1Ev>
          Serial.printf("A2_temp: %d\n\r", A2_temperature);
          Serial.printf("half_vref: %d\n\r", half_Vref);

      }
      return alpha1_ppmraw;
}
 80859d8:	4640      	mov	r0, r8
 80859da:	b00b      	add	sp, #44	; 0x2c
 80859dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80859e0:	851eb852 	.word	0x851eb852
 80859e4:	3fe851eb 	.word	0x3fe851eb
 80859e8:	d4fdf3b6 	.word	0xd4fdf3b6
 80859ec:	3fd6e978 	.word	0x3fd6e978
 80859f0:	20000af8 	.word	0x20000af8
 80859f4:	08092fdc 	.word	0x08092fdc
 80859f8:	08092193 	.word	0x08092193
 80859fc:	080921a7 	.word	0x080921a7
 8085a00:	20000ac0 	.word	0x20000ac0
 8085a04:	200000a4 	.word	0x200000a4
 8085a08:	447a0000 	.word	0x447a0000
 8085a0c:	3ff40000 	.word	0x3ff40000
 8085a10:	3fe00000 	.word	0x3fe00000
 8085a14:	080921ca 	.word	0x080921ca
 8085a18:	080921dc 	.word	0x080921dc
 8085a1c:	2000022c 	.word	0x2000022c
 8085a20:	080921f5 	.word	0x080921f5
 8085a24:	08092219 	.word	0x08092219
 8085a28:	c2f00000 	.word	0xc2f00000
 8085a2c:	c3160000 	.word	0xc3160000
 8085a30:	41700000 	.word	0x41700000
 8085a34:	41c80000 	.word	0x41c80000
 8085a38:	0809222c 	.word	0x0809222c
 8085a3c:	08092241 	.word	0x08092241
 8085a40:	0809224e 	.word	0x0809224e
 8085a44:	0809225b 	.word	0x0809225b
 8085a48:	08092269 	.word	0x08092269
 8085a4c:	080909f9 	.word	0x080909f9
 8085a50:	2000009c 	.word	0x2000009c

08085a54 <_Z6readCOv>:
    sum /= 4095;
    sum *= 100;
    return sum;
}
//read Carbon monoxide alphasense sensor
float readCO(void){
 8085a54:	b570      	push	{r4, r5, r6, lr}
    float float_offset;

    if(CO_socket == 0){
 8085a56:	4b0f      	ldr	r3, [pc, #60]	; (8085a94 <_Z6readCOv+0x40>)
 8085a58:	4c0f      	ldr	r4, [pc, #60]	; (8085a98 <_Z6readCOv+0x44>)
 8085a5a:	681b      	ldr	r3, [r3, #0]
 8085a5c:	b913      	cbnz	r3, 8085a64 <_Z6readCOv+0x10>
        CO_float = readAlpha1();
 8085a5e:	f7ff fe7f 	bl	8085760 <_Z10readAlpha1v>
 8085a62:	e001      	b.n	8085a68 <_Z6readCOv+0x14>
    }else{
        CO_float = readAlpha2();
 8085a64:	f7fb fe40 	bl	80816e8 <_Z10readAlpha2v>
    }

    float_offset = CO_zero;
 8085a68:	4b0c      	ldr	r3, [pc, #48]	; (8085a9c <_Z6readCOv+0x48>)
    float float_offset;

    if(CO_socket == 0){
        CO_float = readAlpha1();
    }else{
        CO_float = readAlpha2();
 8085a6a:	6020      	str	r0, [r4, #0]
    }

    float_offset = CO_zero;
 8085a6c:	6818      	ldr	r0, [r3, #0]
 8085a6e:	f007 f945 	bl	808ccfc <__aeabi_i2f>
    float_offset /= 1000;

    CO_float *= CO_slope;
 8085a72:	4b0b      	ldr	r3, [pc, #44]	; (8085aa0 <_Z6readCOv+0x4c>)
        CO_float = readAlpha1();
    }else{
        CO_float = readAlpha2();
    }

    float_offset = CO_zero;
 8085a74:	4606      	mov	r6, r0
    float_offset /= 1000;

    CO_float *= CO_slope;
    CO_float += float_offset;
 8085a76:	6819      	ldr	r1, [r3, #0]
 8085a78:	6820      	ldr	r0, [r4, #0]
 8085a7a:	f007 f993 	bl	808cda4 <__aeabi_fmul>
 8085a7e:	4909      	ldr	r1, [pc, #36]	; (8085aa4 <_Z6readCOv+0x50>)
 8085a80:	4605      	mov	r5, r0
 8085a82:	4630      	mov	r0, r6
 8085a84:	f007 fa42 	bl	808cf0c <__aeabi_fdiv>
 8085a88:	4601      	mov	r1, r0
 8085a8a:	4628      	mov	r0, r5
 8085a8c:	f007 f882 	bl	808cb94 <__addsf3>
 8085a90:	6020      	str	r0, [r4, #0]

    return CO_float;
}
 8085a92:	bd70      	pop	{r4, r5, r6, pc}
 8085a94:	200006f4 	.word	0x200006f4
 8085a98:	20000b04 	.word	0x20000b04
 8085a9c:	200007e8 	.word	0x200007e8
 8085aa0:	200001e8 	.word	0x200001e8
 8085aa4:	447a0000 	.word	0x447a0000

08085aa8 <_Z20readAlpha1Constantlyv>:
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}

void readAlpha1Constantly(void){
 8085aa8:	b510      	push	{r4, lr}
    while(!Serial.available()){
        CO_float = readCO();
 8085aaa:	4c09      	ldr	r4, [pc, #36]	; (8085ad0 <_Z20readAlpha1Constantlyv+0x28>)
        Serial.println("\n\rIncorrect password!");
    }
}

void readAlpha1Constantly(void){
    while(!Serial.available()){
 8085aac:	f005 fdca 	bl	808b644 <_Z16_fetch_usbserialv>
 8085ab0:	6803      	ldr	r3, [r0, #0]
 8085ab2:	691b      	ldr	r3, [r3, #16]
 8085ab4:	4798      	blx	r3
 8085ab6:	b948      	cbnz	r0, 8085acc <_Z20readAlpha1Constantlyv+0x24>
        CO_float = readCO();
 8085ab8:	f7ff ffcc 	bl	8085a54 <_Z6readCOv>
 8085abc:	6020      	str	r0, [r4, #0]
        Serial.printf("CO: %1.3f ppm\n\r", CO_float);
 8085abe:	f005 fdc1 	bl	808b644 <_Z16_fetch_usbserialv>
 8085ac2:	6822      	ldr	r2, [r4, #0]
 8085ac4:	4903      	ldr	r1, [pc, #12]	; (8085ad4 <_Z20readAlpha1Constantlyv+0x2c>)
 8085ac6:	f7ff fc09 	bl	80852dc <_ZN5Print6printfIIfEEEjPKcDpT_>
        Serial.println("\n\rIncorrect password!");
    }
}

void readAlpha1Constantly(void){
    while(!Serial.available()){
 8085aca:	e7ef      	b.n	8085aac <_Z20readAlpha1Constantlyv+0x4>
 8085acc:	bd10      	pop	{r4, pc}
 8085ace:	bf00      	nop
 8085ad0:	20000b04 	.word	0x20000b04
 8085ad4:	08092279 	.word	0x08092279

08085ad8 <_Z10serialMenuv>:
  delay(1000);
}

/************************Serial menu stuff******************/

void serialMenu(){
 8085ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
  incomingByte = '0';
 8085ada:	4cac      	ldr	r4, [pc, #688]	; (8085d8c <_Z10serialMenuv+0x2b4>)
 8085adc:	2330      	movs	r3, #48	; 0x30

    }else if(incomingByte == '!'){

        Serial.println("Outputting VOCs continuously!  Press any button to exit...");
        while(!Serial.available()){
            if (! bme.performReading()) {
 8085ade:	4eac      	ldr	r6, [pc, #688]	; (8085d90 <_Z10serialMenuv+0x2b8>)
  delay(1000);
}

/************************Serial menu stuff******************/

void serialMenu(){
 8085ae0:	b08d      	sub	sp, #52	; 0x34
  incomingByte = '0';
 8085ae2:	7023      	strb	r3, [r4, #0]
  while(incomingByte!= 'x')
 8085ae4:	7823      	ldrb	r3, [r4, #0]
 8085ae6:	2b78      	cmp	r3, #120	; 0x78
 8085ae8:	f000 8401 	beq.w	80862ee <_Z10serialMenuv+0x816>
  {
    Serial.print("Menu>");
 8085aec:	f005 fdaa 	bl	808b644 <_Z16_fetch_usbserialv>
 8085af0:	49a8      	ldr	r1, [pc, #672]	; (8085d94 <_Z10serialMenuv+0x2bc>)
 8085af2:	f004 fcfb 	bl	808a4ec <_ZN5Print5printEPKc>
    Serial.flush();
 8085af6:	f005 fda5 	bl	808b644 <_Z16_fetch_usbserialv>
 8085afa:	6803      	ldr	r3, [r0, #0]
 8085afc:	69db      	ldr	r3, [r3, #28]
 8085afe:	4798      	blx	r3
    while(!Serial.available());
 8085b00:	f005 fda0 	bl	808b644 <_Z16_fetch_usbserialv>
 8085b04:	6803      	ldr	r3, [r0, #0]
 8085b06:	691b      	ldr	r3, [r3, #16]
 8085b08:	4798      	blx	r3
 8085b0a:	2800      	cmp	r0, #0
 8085b0c:	d0f8      	beq.n	8085b00 <_Z10serialMenuv+0x28>
    incomingByte = Serial.read();
 8085b0e:	f005 fd99 	bl	808b644 <_Z16_fetch_usbserialv>
 8085b12:	6803      	ldr	r3, [r0, #0]
 8085b14:	695b      	ldr	r3, [r3, #20]
 8085b16:	4798      	blx	r3
 8085b18:	b2c0      	uxtb	r0, r0
    if(incomingByte == 'a'){
 8085b1a:	2861      	cmp	r0, #97	; 0x61
  while(incomingByte!= 'x')
  {
    Serial.print("Menu>");
    Serial.flush();
    while(!Serial.available());
    incomingByte = Serial.read();
 8085b1c:	7020      	strb	r0, [r4, #0]
    if(incomingByte == 'a'){
 8085b1e:	d102      	bne.n	8085b26 <_Z10serialMenuv+0x4e>
        serialGetCo2Slope();
 8085b20:	f7fd f980 	bl	8082e24 <_Z17serialGetCo2Slopev>
 8085b24:	e7de      	b.n	8085ae4 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'b'){
 8085b26:	2862      	cmp	r0, #98	; 0x62
 8085b28:	d102      	bne.n	8085b30 <_Z10serialMenuv+0x58>
        serialGetCo2Zero();
 8085b2a:	f7fd f9f9 	bl	8082f20 <_Z16serialGetCo2Zerov>
 8085b2e:	e7d9      	b.n	8085ae4 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'c'){
 8085b30:	2863      	cmp	r0, #99	; 0x63
 8085b32:	d102      	bne.n	8085b3a <_Z10serialMenuv+0x62>
        serialGetCoSlope();
 8085b34:	f7fd fa54 	bl	8082fe0 <_Z16serialGetCoSlopev>
 8085b38:	e7d4      	b.n	8085ae4 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'd'){
 8085b3a:	2864      	cmp	r0, #100	; 0x64
 8085b3c:	d102      	bne.n	8085b44 <_Z10serialMenuv+0x6c>
        serialGetCoZero();
 8085b3e:	f7fd fad5 	bl	80830ec <_Z15serialGetCoZerov>
 8085b42:	e7cf      	b.n	8085ae4 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'e'){
 8085b44:	2865      	cmp	r0, #101	; 0x65
 8085b46:	d102      	bne.n	8085b4e <_Z10serialMenuv+0x76>
        serialGetPm1Slope();
 8085b48:	f7fd fb30 	bl	80831ac <_Z17serialGetPm1Slopev>
 8085b4c:	e7ca      	b.n	8085ae4 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'f'){
 8085b4e:	2866      	cmp	r0, #102	; 0x66
 8085b50:	d102      	bne.n	8085b58 <_Z10serialMenuv+0x80>
         serialGetPm1Zero();
 8085b52:	f7fd fba7 	bl	80832a4 <_Z16serialGetPm1Zerov>
 8085b56:	e7c5      	b.n	8085ae4 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'g'){
 8085b58:	2867      	cmp	r0, #103	; 0x67
 8085b5a:	d102      	bne.n	8085b62 <_Z10serialMenuv+0x8a>
        serialGetPm25Slope();
 8085b5c:	f7fd fc00 	bl	8083360 <_Z18serialGetPm25Slopev>
 8085b60:	e7c0      	b.n	8085ae4 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'h'){
 8085b62:	2868      	cmp	r0, #104	; 0x68
 8085b64:	d102      	bne.n	8085b6c <_Z10serialMenuv+0x94>
        serialGetPm25Zero();
 8085b66:	f7fd fc77 	bl	8083458 <_Z17serialGetPm25Zerov>
 8085b6a:	e7bb      	b.n	8085ae4 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'i'){
 8085b6c:	2869      	cmp	r0, #105	; 0x69
 8085b6e:	d102      	bne.n	8085b76 <_Z10serialMenuv+0x9e>
        serialGetPm10Slope();
 8085b70:	f7fd fcd0 	bl	8083514 <_Z18serialGetPm10Slopev>
 8085b74:	e7b6      	b.n	8085ae4 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'j'){
 8085b76:	286a      	cmp	r0, #106	; 0x6a
 8085b78:	d102      	bne.n	8085b80 <_Z10serialMenuv+0xa8>
        serialGetPm10Zero();
 8085b7a:	f7fd fd47 	bl	808360c <_Z17serialGetPm10Zerov>
 8085b7e:	e7b1      	b.n	8085ae4 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'k'){
 8085b80:	286b      	cmp	r0, #107	; 0x6b
 8085b82:	d102      	bne.n	8085b8a <_Z10serialMenuv+0xb2>
        serialGetTemperatureSlope();
 8085b84:	f7fd fda0 	bl	80836c8 <_Z25serialGetTemperatureSlopev>
 8085b88:	e7ac      	b.n	8085ae4 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'l'){
 8085b8a:	286c      	cmp	r0, #108	; 0x6c
 8085b8c:	d102      	bne.n	8085b94 <_Z10serialMenuv+0xbc>
        serialGetTemperatureZero();
 8085b8e:	f7fd fe17 	bl	80837c0 <_Z24serialGetTemperatureZerov>
 8085b92:	e7a7      	b.n	8085ae4 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'm'){
 8085b94:	286d      	cmp	r0, #109	; 0x6d
 8085b96:	d102      	bne.n	8085b9e <_Z10serialMenuv+0xc6>
        serialGetPressureSlope();
 8085b98:	f7fd fe6e 	bl	8083878 <_Z22serialGetPressureSlopev>
 8085b9c:	e7a2      	b.n	8085ae4 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'n'){
 8085b9e:	286e      	cmp	r0, #110	; 0x6e
 8085ba0:	d102      	bne.n	8085ba8 <_Z10serialMenuv+0xd0>
        serialGetPressureZero();
 8085ba2:	f7fd fee5 	bl	8083970 <_Z21serialGetPressureZerov>
 8085ba6:	e79d      	b.n	8085ae4 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'o'){
 8085ba8:	286f      	cmp	r0, #111	; 0x6f
 8085baa:	d102      	bne.n	8085bb2 <_Z10serialMenuv+0xda>
        serialGetHumiditySlope();
 8085bac:	f7fd ff3e 	bl	8083a2c <_Z22serialGetHumiditySlopev>
 8085bb0:	e798      	b.n	8085ae4 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'p'){
 8085bb2:	2870      	cmp	r0, #112	; 0x70
 8085bb4:	d102      	bne.n	8085bbc <_Z10serialMenuv+0xe4>
        serialGetHumidityZero();
 8085bb6:	f7fd ffb7 	bl	8083b28 <_Z21serialGetHumidityZerov>
 8085bba:	e793      	b.n	8085ae4 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'q'){
 8085bbc:	2871      	cmp	r0, #113	; 0x71
 8085bbe:	d107      	bne.n	8085bd0 <_Z10serialMenuv+0xf8>
        Serial.println("Serial debugging enabled.");
 8085bc0:	f005 fd40 	bl	808b644 <_Z16_fetch_usbserialv>
 8085bc4:	4974      	ldr	r1, [pc, #464]	; (8085d98 <_Z10serialMenuv+0x2c0>)
 8085bc6:	f004 fca4 	bl	808a512 <_ZN5Print7printlnEPKc>
        debugging_enabled = 1;
 8085bca:	4d74      	ldr	r5, [pc, #464]	; (8085d9c <_Z10serialMenuv+0x2c4>)
 8085bcc:	2301      	movs	r3, #1
 8085bce:	e008      	b.n	8085be2 <_Z10serialMenuv+0x10a>
        EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
    }else if(incomingByte == 'r'){
 8085bd0:	2872      	cmp	r0, #114	; 0x72
 8085bd2:	d10e      	bne.n	8085bf2 <_Z10serialMenuv+0x11a>
        Serial.println("Serial debugging disabled.");
 8085bd4:	f005 fd36 	bl	808b644 <_Z16_fetch_usbserialv>
        debugging_enabled = 0;
 8085bd8:	4d70      	ldr	r5, [pc, #448]	; (8085d9c <_Z10serialMenuv+0x2c4>)
    }else if(incomingByte == 'q'){
        Serial.println("Serial debugging enabled.");
        debugging_enabled = 1;
        EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
    }else if(incomingByte == 'r'){
        Serial.println("Serial debugging disabled.");
 8085bda:	4971      	ldr	r1, [pc, #452]	; (8085da0 <_Z10serialMenuv+0x2c8>)
 8085bdc:	f004 fc99 	bl	808a512 <_ZN5Print7printlnEPKc>
        debugging_enabled = 0;
 8085be0:	2300      	movs	r3, #0
 8085be2:	602b      	str	r3, [r5, #0]
        EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
 8085be4:	f006 f912 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8085be8:	4629      	mov	r1, r5
 8085bea:	2048      	movs	r0, #72	; 0x48
 8085bec:	f7fb f80f 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 8085bf0:	e778      	b.n	8085ae4 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 's'){
 8085bf2:	2873      	cmp	r0, #115	; 0x73
 8085bf4:	d10b      	bne.n	8085c0e <_Z10serialMenuv+0x136>
        Serial.println(String(HEADER_STRING));
 8085bf6:	f005 fd25 	bl	808b644 <_Z16_fetch_usbserialv>
 8085bfa:	4605      	mov	r5, r0
 8085bfc:	4969      	ldr	r1, [pc, #420]	; (8085da4 <_Z10serialMenuv+0x2cc>)
 8085bfe:	a808      	add	r0, sp, #32
 8085c00:	f004 fa7d 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
 8085c04:	9908      	ldr	r1, [sp, #32]
 8085c06:	4628      	mov	r0, r5
 8085c08:	f004 fc83 	bl	808a512 <_ZN5Print7printlnEPKc>
 8085c0c:	e364      	b.n	80862d8 <_Z10serialMenuv+0x800>
    }else if(incomingByte == 't'){
 8085c0e:	2874      	cmp	r0, #116	; 0x74
 8085c10:	d102      	bne.n	8085c18 <_Z10serialMenuv+0x140>
        serialGetTimeDate();
 8085c12:	f7fd f809 	bl	8082c28 <_Z17serialGetTimeDatev>
 8085c16:	e765      	b.n	8085ae4 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'u'){
 8085c18:	2875      	cmp	r0, #117	; 0x75
 8085c1a:	d102      	bne.n	8085c22 <_Z10serialMenuv+0x14a>
        serialGetZone();
 8085c1c:	f7fd f852 	bl	8082cc4 <_Z13serialGetZonev>
 8085c20:	e760      	b.n	8085ae4 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'v'){
 8085c22:	2876      	cmp	r0, #118	; 0x76
 8085c24:	d102      	bne.n	8085c2c <_Z10serialMenuv+0x154>
        serialGetDeviceId();
 8085c26:	f7fc ff43 	bl	8082ab0 <_Z17serialGetDeviceIdv>
 8085c2a:	e75b      	b.n	8085ae4 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'w'){
 8085c2c:	2877      	cmp	r0, #119	; 0x77
 8085c2e:	d102      	bne.n	8085c36 <_Z10serialMenuv+0x15e>
        serialGetWifiCredentials();
 8085c30:	f7fc fe24 	bl	808287c <_Z24serialGetWifiCredentialsv>
 8085c34:	e756      	b.n	8085ae4 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'y'){
 8085c36:	2879      	cmp	r0, #121	; 0x79
 8085c38:	d10d      	bne.n	8085c56 <_Z10serialMenuv+0x17e>
        if(serial_cellular_enabled == 0){
 8085c3a:	4d5b      	ldr	r5, [pc, #364]	; (8085da8 <_Z10serialMenuv+0x2d0>)
 8085c3c:	682b      	ldr	r3, [r5, #0]
 8085c3e:	b91b      	cbnz	r3, 8085c48 <_Z10serialMenuv+0x170>
            Serial.println("Enabling Cellular.");
 8085c40:	f005 fd00 	bl	808b644 <_Z16_fetch_usbserialv>
 8085c44:	4959      	ldr	r1, [pc, #356]	; (8085dac <_Z10serialMenuv+0x2d4>)
 8085c46:	e002      	b.n	8085c4e <_Z10serialMenuv+0x176>
        }else{
            Serial.println("Cellular already enabled.");
 8085c48:	f005 fcfc 	bl	808b644 <_Z16_fetch_usbserialv>
 8085c4c:	4958      	ldr	r1, [pc, #352]	; (8085db0 <_Z10serialMenuv+0x2d8>)
 8085c4e:	f004 fc60 	bl	808a512 <_ZN5Print7printlnEPKc>
        }
        serial_cellular_enabled = 1;
 8085c52:	2301      	movs	r3, #1
 8085c54:	e014      	b.n	8085c80 <_Z10serialMenuv+0x1a8>
        EEPROM.put(SERIAL_CELLULAR_EN_MEM_ADDRESS, serial_cellular_enabled);
    }else if(incomingByte == 'z'){
 8085c56:	287a      	cmp	r0, #122	; 0x7a
 8085c58:	d118      	bne.n	8085c8c <_Z10serialMenuv+0x1b4>
        if(serial_cellular_enabled == 1){
 8085c5a:	4d53      	ldr	r5, [pc, #332]	; (8085da8 <_Z10serialMenuv+0x2d0>)
 8085c5c:	682b      	ldr	r3, [r5, #0]
 8085c5e:	2b01      	cmp	r3, #1
 8085c60:	d108      	bne.n	8085c74 <_Z10serialMenuv+0x19c>
            Serial.println("Disabling Cellular");
 8085c62:	f005 fcef 	bl	808b644 <_Z16_fetch_usbserialv>
 8085c66:	4953      	ldr	r1, [pc, #332]	; (8085db4 <_Z10serialMenuv+0x2dc>)
 8085c68:	f004 fc53 	bl	808a512 <_ZN5Print7printlnEPKc>
            Cellular.off();
 8085c6c:	4852      	ldr	r0, [pc, #328]	; (8085db8 <_Z10serialMenuv+0x2e0>)
 8085c6e:	f7fb f800 	bl	8080c72 <_ZN5spark13CellularClass3offEv>
 8085c72:	e004      	b.n	8085c7e <_Z10serialMenuv+0x1a6>
        }else{
            Serial.println("Cellular already disabled.");
 8085c74:	f005 fce6 	bl	808b644 <_Z16_fetch_usbserialv>
 8085c78:	4950      	ldr	r1, [pc, #320]	; (8085dbc <_Z10serialMenuv+0x2e4>)
 8085c7a:	f004 fc4a 	bl	808a512 <_ZN5Print7printlnEPKc>
        }
        serial_cellular_enabled = 0;
 8085c7e:	2300      	movs	r3, #0
 8085c80:	602b      	str	r3, [r5, #0]
        EEPROM.put(SERIAL_CELLULAR_EN_MEM_ADDRESS, serial_cellular_enabled);
 8085c82:	f006 f8c3 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8085c86:	4948      	ldr	r1, [pc, #288]	; (8085da8 <_Z10serialMenuv+0x2d0>)
 8085c88:	2044      	movs	r0, #68	; 0x44
 8085c8a:	e7af      	b.n	8085bec <_Z10serialMenuv+0x114>
    }else if(incomingByte == 'F'){
 8085c8c:	2846      	cmp	r0, #70	; 0x46
 8085c8e:	d10f      	bne.n	8085cb0 <_Z10serialMenuv+0x1d8>
        if(temperature_units == CELCIUS){
 8085c90:	4b4b      	ldr	r3, [pc, #300]	; (8085dc0 <_Z10serialMenuv+0x2e8>)
 8085c92:	681a      	ldr	r2, [r3, #0]
 8085c94:	2a01      	cmp	r2, #1
 8085c96:	d101      	bne.n	8085c9c <_Z10serialMenuv+0x1c4>
            temperature_units = FARENHEIT;
 8085c98:	2200      	movs	r2, #0
 8085c9a:	e00f      	b.n	8085cbc <_Z10serialMenuv+0x1e4>

        }else{
            Serial.println("Temperature units already set to Fareneit.");
 8085c9c:	f005 fcd2 	bl	808b644 <_Z16_fetch_usbserialv>
 8085ca0:	4948      	ldr	r1, [pc, #288]	; (8085dc4 <_Z10serialMenuv+0x2ec>)
 8085ca2:	f004 fc36 	bl	808a512 <_ZN5Print7printlnEPKc>
        }

        EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, temperature_units);
 8085ca6:	f006 f8b1 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8085caa:	4945      	ldr	r1, [pc, #276]	; (8085dc0 <_Z10serialMenuv+0x2e8>)
 8085cac:	2060      	movs	r0, #96	; 0x60
 8085cae:	e79d      	b.n	8085bec <_Z10serialMenuv+0x114>

    }else if(incomingByte == 'C'){
 8085cb0:	2843      	cmp	r0, #67	; 0x43
 8085cb2:	d109      	bne.n	8085cc8 <_Z10serialMenuv+0x1f0>
        if(temperature_units == FARENHEIT){
 8085cb4:	4b42      	ldr	r3, [pc, #264]	; (8085dc0 <_Z10serialMenuv+0x2e8>)
 8085cb6:	681a      	ldr	r2, [r3, #0]
 8085cb8:	b912      	cbnz	r2, 8085cc0 <_Z10serialMenuv+0x1e8>
            temperature_units = CELCIUS;
 8085cba:	2201      	movs	r2, #1
 8085cbc:	601a      	str	r2, [r3, #0]
 8085cbe:	e7f2      	b.n	8085ca6 <_Z10serialMenuv+0x1ce>

        }else{
            Serial.println("Temperature units already set to Celcius.");
 8085cc0:	f005 fcc0 	bl	808b644 <_Z16_fetch_usbserialv>
 8085cc4:	4940      	ldr	r1, [pc, #256]	; (8085dc8 <_Z10serialMenuv+0x2f0>)
 8085cc6:	e7ec      	b.n	8085ca2 <_Z10serialMenuv+0x1ca>
        }

        EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, temperature_units);
    }else if(incomingByte == 'D'){
 8085cc8:	2844      	cmp	r0, #68	; 0x44
 8085cca:	d113      	bne.n	8085cf4 <_Z10serialMenuv+0x21c>
        if(new_temperature_sensor_enabled == 1){
 8085ccc:	4b3f      	ldr	r3, [pc, #252]	; (8085dcc <_Z10serialMenuv+0x2f4>)
 8085cce:	681a      	ldr	r2, [r3, #0]
 8085cd0:	2a01      	cmp	r2, #1
 8085cd2:	d105      	bne.n	8085ce0 <_Z10serialMenuv+0x208>
            new_temperature_sensor_enabled = 0;
 8085cd4:	2200      	movs	r2, #0
 8085cd6:	601a      	str	r2, [r3, #0]
            Serial.println("Disabling new temperature sensor");
 8085cd8:	f005 fcb4 	bl	808b644 <_Z16_fetch_usbserialv>
 8085cdc:	493c      	ldr	r1, [pc, #240]	; (8085dd0 <_Z10serialMenuv+0x2f8>)
 8085cde:	e002      	b.n	8085ce6 <_Z10serialMenuv+0x20e>
        }else{

            Serial.println("Temperature sensor already disabled");
 8085ce0:	f005 fcb0 	bl	808b644 <_Z16_fetch_usbserialv>
 8085ce4:	493b      	ldr	r1, [pc, #236]	; (8085dd4 <_Z10serialMenuv+0x2fc>)
 8085ce6:	f004 fc14 	bl	808a512 <_ZN5Print7printlnEPKc>
        }
        EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, new_temperature_sensor_enabled);
 8085cea:	f006 f88f 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8085cee:	4937      	ldr	r1, [pc, #220]	; (8085dcc <_Z10serialMenuv+0x2f4>)
 8085cf0:	2068      	movs	r0, #104	; 0x68
 8085cf2:	e77b      	b.n	8085bec <_Z10serialMenuv+0x114>

    }else if(incomingByte == 'E'){
 8085cf4:	2845      	cmp	r0, #69	; 0x45
 8085cf6:	d10d      	bne.n	8085d14 <_Z10serialMenuv+0x23c>
        if(new_temperature_sensor_enabled == 1){
 8085cf8:	4b34      	ldr	r3, [pc, #208]	; (8085dcc <_Z10serialMenuv+0x2f4>)
 8085cfa:	681a      	ldr	r2, [r3, #0]
 8085cfc:	2a01      	cmp	r2, #1
 8085cfe:	d103      	bne.n	8085d08 <_Z10serialMenuv+0x230>
            Serial.println("Temperature sensor already enabled");
 8085d00:	f005 fca0 	bl	808b644 <_Z16_fetch_usbserialv>
 8085d04:	4934      	ldr	r1, [pc, #208]	; (8085dd8 <_Z10serialMenuv+0x300>)
 8085d06:	e7ee      	b.n	8085ce6 <_Z10serialMenuv+0x20e>
        }else{
            new_temperature_sensor_enabled = 1;
 8085d08:	2201      	movs	r2, #1
 8085d0a:	601a      	str	r2, [r3, #0]
            Serial.println("Temperatue sensor now enabled");
 8085d0c:	f005 fc9a 	bl	808b644 <_Z16_fetch_usbserialv>
 8085d10:	4932      	ldr	r1, [pc, #200]	; (8085ddc <_Z10serialMenuv+0x304>)
 8085d12:	e7e8      	b.n	8085ce6 <_Z10serialMenuv+0x20e>
        }
        EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, new_temperature_sensor_enabled );

    }else if(incomingByte == 'G'){      //enable analog reading of ozone and disable esp reading of ozone
 8085d14:	2847      	cmp	r0, #71	; 0x47
 8085d16:	d113      	bne.n	8085d40 <_Z10serialMenuv+0x268>
        if(ozone_analog_enabled == 1){
 8085d18:	4b31      	ldr	r3, [pc, #196]	; (8085de0 <_Z10serialMenuv+0x308>)
 8085d1a:	681a      	ldr	r2, [r3, #0]
 8085d1c:	2a01      	cmp	r2, #1
 8085d1e:	d103      	bne.n	8085d28 <_Z10serialMenuv+0x250>
            Serial.println("Analog reading of ozone already enabled");
 8085d20:	f005 fc90 	bl	808b644 <_Z16_fetch_usbserialv>
 8085d24:	492f      	ldr	r1, [pc, #188]	; (8085de4 <_Z10serialMenuv+0x30c>)
 8085d26:	e004      	b.n	8085d32 <_Z10serialMenuv+0x25a>
        }else{
            ozone_analog_enabled = 1;
 8085d28:	2201      	movs	r2, #1
 8085d2a:	601a      	str	r2, [r3, #0]
            Serial.println("Analog reading of ozone now enabled");
 8085d2c:	f005 fc8a 	bl	808b644 <_Z16_fetch_usbserialv>
 8085d30:	492d      	ldr	r1, [pc, #180]	; (8085de8 <_Z10serialMenuv+0x310>)
 8085d32:	f004 fbee 	bl	808a512 <_ZN5Print7printlnEPKc>
        }
        EEPROM.put(OZONE_A_OR_D_MEM_ADDRESS, ozone_analog_enabled);
 8085d36:	f006 f869 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8085d3a:	4929      	ldr	r1, [pc, #164]	; (8085de0 <_Z10serialMenuv+0x308>)
 8085d3c:	206c      	movs	r0, #108	; 0x6c
 8085d3e:	e755      	b.n	8085bec <_Z10serialMenuv+0x114>

    }else if(incomingByte == 'H'){      //disable analog reading of ozone and read from esp
 8085d40:	2848      	cmp	r0, #72	; 0x48
 8085d42:	d10c      	bne.n	8085d5e <_Z10serialMenuv+0x286>
        if(ozone_analog_enabled == 0){
 8085d44:	4b26      	ldr	r3, [pc, #152]	; (8085de0 <_Z10serialMenuv+0x308>)
 8085d46:	681a      	ldr	r2, [r3, #0]
 8085d48:	b91a      	cbnz	r2, 8085d52 <_Z10serialMenuv+0x27a>
            Serial.println("Digital reading of ozone already enabled");
 8085d4a:	f005 fc7b 	bl	808b644 <_Z16_fetch_usbserialv>
 8085d4e:	4927      	ldr	r1, [pc, #156]	; (8085dec <_Z10serialMenuv+0x314>)
 8085d50:	e7ef      	b.n	8085d32 <_Z10serialMenuv+0x25a>
        }else{
            ozone_analog_enabled = 0;
 8085d52:	2200      	movs	r2, #0
 8085d54:	601a      	str	r2, [r3, #0]
            Serial.println("Digital reading of ozone now enabled");
 8085d56:	f005 fc75 	bl	808b644 <_Z16_fetch_usbserialv>
 8085d5a:	4925      	ldr	r1, [pc, #148]	; (8085df0 <_Z10serialMenuv+0x318>)
 8085d5c:	e7e9      	b.n	8085d32 <_Z10serialMenuv+0x25a>
        }
        EEPROM.put(OZONE_A_OR_D_MEM_ADDRESS, ozone_analog_enabled);

    }else if(incomingByte == 'I'){      //disable analog reading of ozone and read from esp
 8085d5e:	2849      	cmp	r0, #73	; 0x49
 8085d60:	d102      	bne.n	8085d68 <_Z10serialMenuv+0x290>
        serialGetAverageTime();
 8085d62:	f7fc fffb 	bl	8082d5c <_Z20serialGetAverageTimev>
 8085d66:	e6bd      	b.n	8085ae4 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'J'){
 8085d68:	284a      	cmp	r0, #74	; 0x4a
 8085d6a:	d105      	bne.n	8085d78 <_Z10serialMenuv+0x2a0>
        resetESP();
 8085d6c:	f7fc fa26 	bl	80821bc <_Z8resetESPv>
        Serial.println("ESP reset!");
 8085d70:	f005 fc68 	bl	808b644 <_Z16_fetch_usbserialv>
 8085d74:	491f      	ldr	r1, [pc, #124]	; (8085df4 <_Z10serialMenuv+0x31c>)
 8085d76:	e04f      	b.n	8085e18 <_Z10serialMenuv+0x340>
    }else if(incomingByte == 'K'){
 8085d78:	284b      	cmp	r0, #75	; 0x4b
 8085d7a:	d13f      	bne.n	8085dfc <_Z10serialMenuv+0x324>
      Serial.println("Outputting GPS continuously");
 8085d7c:	f005 fc62 	bl	808b644 <_Z16_fetch_usbserialv>
 8085d80:	491d      	ldr	r1, [pc, #116]	; (8085df8 <_Z10serialMenuv+0x320>)
 8085d82:	f004 fbc6 	bl	808a512 <_ZN5Print7printlnEPKc>
      echoGps();
 8085d86:	f7fb fb3b 	bl	8081400 <_Z7echoGpsv>
 8085d8a:	e6ab      	b.n	8085ae4 <_Z10serialMenuv+0xc>
 8085d8c:	20000780 	.word	0x20000780
 8085d90:	200006f8 	.word	0x200006f8
 8085d94:	08092289 	.word	0x08092289
 8085d98:	0809228f 	.word	0x0809228f
 8085d9c:	20000af8 	.word	0x20000af8
 8085da0:	080922a9 	.word	0x080922a9
 8085da4:	08091fa6 	.word	0x08091fa6
 8085da8:	20000224 	.word	0x20000224
 8085dac:	080922c4 	.word	0x080922c4
 8085db0:	080922d7 	.word	0x080922d7
 8085db4:	080922f1 	.word	0x080922f1
 8085db8:	20000f64 	.word	0x20000f64
 8085dbc:	08092304 	.word	0x08092304
 8085dc0:	200006b8 	.word	0x200006b8
 8085dc4:	0809231f 	.word	0x0809231f
 8085dc8:	0809234a 	.word	0x0809234a
 8085dcc:	20000778 	.word	0x20000778
 8085dd0:	08092374 	.word	0x08092374
 8085dd4:	08092395 	.word	0x08092395
 8085dd8:	080923b9 	.word	0x080923b9
 8085ddc:	080923dc 	.word	0x080923dc
 8085de0:	20000b64 	.word	0x20000b64
 8085de4:	080923fa 	.word	0x080923fa
 8085de8:	08092422 	.word	0x08092422
 8085dec:	08092446 	.word	0x08092446
 8085df0:	0809246f 	.word	0x0809246f
 8085df4:	08090d62 	.word	0x08090d62
 8085df8:	08092494 	.word	0x08092494
    }else if(incomingByte == 'L'){
 8085dfc:	284c      	cmp	r0, #76	; 0x4c
 8085dfe:	d102      	bne.n	8085e06 <_Z10serialMenuv+0x32e>
      serialResetSettings();
 8085e00:	f7fc feda 	bl	8082bb8 <_Z19serialResetSettingsv>
 8085e04:	e66e      	b.n	8085ae4 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'M'){
 8085e06:	284d      	cmp	r0, #77	; 0x4d
 8085e08:	d110      	bne.n	8085e2c <_Z10serialMenuv+0x354>
      //serialTestRemoteFunction();
      if(battery_threshold_enable == 1){
 8085e0a:	4daf      	ldr	r5, [pc, #700]	; (80860c8 <_Z10serialMenuv+0x5f0>)
 8085e0c:	682b      	ldr	r3, [r5, #0]
 8085e0e:	2b01      	cmp	r3, #1
 8085e10:	d105      	bne.n	8085e1e <_Z10serialMenuv+0x346>
          Serial.println("Battery threshold already enabled");
 8085e12:	f005 fc17 	bl	808b644 <_Z16_fetch_usbserialv>
 8085e16:	49ad      	ldr	r1, [pc, #692]	; (80860cc <_Z10serialMenuv+0x5f4>)
 8085e18:	f004 fb7b 	bl	808a512 <_ZN5Print7printlnEPKc>
 8085e1c:	e662      	b.n	8085ae4 <_Z10serialMenuv+0xc>
      }else{
          Serial.println("Enabling battery threshold limiting");
 8085e1e:	f005 fc11 	bl	808b644 <_Z16_fetch_usbserialv>
 8085e22:	49ab      	ldr	r1, [pc, #684]	; (80860d0 <_Z10serialMenuv+0x5f8>)
 8085e24:	f004 fb75 	bl	808a512 <_ZN5Print7printlnEPKc>
          battery_threshold_enable = 1;
 8085e28:	2301      	movs	r3, #1
 8085e2a:	e00e      	b.n	8085e4a <_Z10serialMenuv+0x372>
          EEPROM.put(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
      }

    }else if(incomingByte == 'N'){
 8085e2c:	284e      	cmp	r0, #78	; 0x4e
 8085e2e:	d112      	bne.n	8085e56 <_Z10serialMenuv+0x37e>
      //serialTestRemoteFunction();
      if(battery_threshold_enable == 0){
 8085e30:	4da5      	ldr	r5, [pc, #660]	; (80860c8 <_Z10serialMenuv+0x5f0>)
 8085e32:	682b      	ldr	r3, [r5, #0]
 8085e34:	b91b      	cbnz	r3, 8085e3e <_Z10serialMenuv+0x366>
          Serial.println("Battery threshold already disabled");
 8085e36:	f005 fc05 	bl	808b644 <_Z16_fetch_usbserialv>
 8085e3a:	49a6      	ldr	r1, [pc, #664]	; (80860d4 <_Z10serialMenuv+0x5fc>)
 8085e3c:	e7ec      	b.n	8085e18 <_Z10serialMenuv+0x340>
      }else{
          Serial.println("Disabling battery threshold limiting");
 8085e3e:	f005 fc01 	bl	808b644 <_Z16_fetch_usbserialv>
 8085e42:	49a5      	ldr	r1, [pc, #660]	; (80860d8 <_Z10serialMenuv+0x600>)
 8085e44:	f004 fb65 	bl	808a512 <_ZN5Print7printlnEPKc>
          battery_threshold_enable = 0;
 8085e48:	2300      	movs	r3, #0
 8085e4a:	602b      	str	r3, [r5, #0]
          EEPROM.put(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
 8085e4c:	f005 ffde 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8085e50:	4629      	mov	r1, r5
 8085e52:	2078      	movs	r0, #120	; 0x78
 8085e54:	e6ca      	b.n	8085bec <_Z10serialMenuv+0x114>
      }

    }else if(incomingByte == 'O'){
 8085e56:	284f      	cmp	r0, #79	; 0x4f
 8085e58:	d107      	bne.n	8085e6a <_Z10serialMenuv+0x392>
        //Serial.println("Changing frequency for gps");
        //changeFrequency();
        Serial.println("Enabling low power for gps");
 8085e5a:	f005 fbf3 	bl	808b644 <_Z16_fetch_usbserialv>
 8085e5e:	499f      	ldr	r1, [pc, #636]	; (80860dc <_Z10serialMenuv+0x604>)
 8085e60:	f004 fb57 	bl	808a512 <_ZN5Print7printlnEPKc>
        enableLowPowerGPS();
 8085e64:	f7fb fb32 	bl	80814cc <_Z17enableLowPowerGPSv>
 8085e68:	e63c      	b.n	8085ae4 <_Z10serialMenuv+0xc>
    }else if(incomingByte  == 'P'){
 8085e6a:	2850      	cmp	r0, #80	; 0x50
 8085e6c:	d106      	bne.n	8085e7c <_Z10serialMenuv+0x3a4>
        Serial.println("Turning off batfet");
 8085e6e:	f005 fbe9 	bl	808b644 <_Z16_fetch_usbserialv>
 8085e72:	499b      	ldr	r1, [pc, #620]	; (80860e0 <_Z10serialMenuv+0x608>)
 8085e74:	f004 fb4d 	bl	808a512 <_ZN5Print7printlnEPKc>
        writeRegister(7, 0b01101011);   //turn off batfet
 8085e78:	216b      	movs	r1, #107	; 0x6b
 8085e7a:	e007      	b.n	8085e8c <_Z10serialMenuv+0x3b4>
    }else if(incomingByte == 'Q'){
 8085e7c:	2851      	cmp	r0, #81	; 0x51
 8085e7e:	d109      	bne.n	8085e94 <_Z10serialMenuv+0x3bc>

        Serial.println("Allowing batfet to turn on");
 8085e80:	f005 fbe0 	bl	808b644 <_Z16_fetch_usbserialv>
 8085e84:	4997      	ldr	r1, [pc, #604]	; (80860e4 <_Z10serialMenuv+0x60c>)
 8085e86:	f004 fb44 	bl	808a512 <_ZN5Print7printlnEPKc>
        writeRegister(7, 0b01001011);   //allow batfet to turn on
 8085e8a:	214b      	movs	r1, #75	; 0x4b
 8085e8c:	2007      	movs	r0, #7
 8085e8e:	f7fa ffc3 	bl	8080e18 <_Z13writeRegisterhh>
 8085e92:	e627      	b.n	8085ae4 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'R'){
 8085e94:	2852      	cmp	r0, #82	; 0x52
 8085e96:	d117      	bne.n	8085ec8 <_Z10serialMenuv+0x3f0>
        if(abc_logic_enabled){
 8085e98:	4d93      	ldr	r5, [pc, #588]	; (80860e8 <_Z10serialMenuv+0x610>)
 8085e9a:	682b      	ldr	r3, [r5, #0]
 8085e9c:	b183      	cbz	r3, 8085ec0 <_Z10serialMenuv+0x3e8>
            Serial.println("Disabling ABC logic for CO2 sensor");
 8085e9e:	f005 fbd1 	bl	808b644 <_Z16_fetch_usbserialv>
 8085ea2:	4992      	ldr	r1, [pc, #584]	; (80860ec <_Z10serialMenuv+0x614>)
 8085ea4:	f004 fb35 	bl	808a512 <_ZN5Print7printlnEPKc>
            abc_logic_enabled = 0;
 8085ea8:	2300      	movs	r3, #0
 8085eaa:	602b      	str	r3, [r5, #0]
            EEPROM.put(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 8085eac:	f005 ffae 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8085eb0:	4629      	mov	r1, r5
 8085eb2:	207c      	movs	r0, #124	; 0x7c
 8085eb4:	f7fa feab 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
            t6713.disableABCLogic();
 8085eb8:	488d      	ldr	r0, [pc, #564]	; (80860f0 <_Z10serialMenuv+0x618>)
 8085eba:	f001 f922 	bl	8087102 <_ZN13Telaire_T671315disableABCLogicEv>
 8085ebe:	e611      	b.n	8085ae4 <_Z10serialMenuv+0xc>
        }else{
            Serial.println("ABC logic already disabled");
 8085ec0:	f005 fbc0 	bl	808b644 <_Z16_fetch_usbserialv>
 8085ec4:	498b      	ldr	r1, [pc, #556]	; (80860f4 <_Z10serialMenuv+0x61c>)
 8085ec6:	e7a7      	b.n	8085e18 <_Z10serialMenuv+0x340>
        }

    }else if(incomingByte == 'S'){
 8085ec8:	2853      	cmp	r0, #83	; 0x53
 8085eca:	d117      	bne.n	8085efc <_Z10serialMenuv+0x424>
        if(!abc_logic_enabled){
 8085ecc:	4d86      	ldr	r5, [pc, #536]	; (80860e8 <_Z10serialMenuv+0x610>)
 8085ece:	682b      	ldr	r3, [r5, #0]
 8085ed0:	b983      	cbnz	r3, 8085ef4 <_Z10serialMenuv+0x41c>
            Serial.println("Enabling abc logic for CO2 sensor");
 8085ed2:	f005 fbb7 	bl	808b644 <_Z16_fetch_usbserialv>
 8085ed6:	4988      	ldr	r1, [pc, #544]	; (80860f8 <_Z10serialMenuv+0x620>)
 8085ed8:	f004 fb1b 	bl	808a512 <_ZN5Print7printlnEPKc>
            abc_logic_enabled = 1;
 8085edc:	2301      	movs	r3, #1
 8085ede:	602b      	str	r3, [r5, #0]
            EEPROM.put(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 8085ee0:	f005 ff94 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8085ee4:	4629      	mov	r1, r5
 8085ee6:	207c      	movs	r0, #124	; 0x7c
 8085ee8:	f7fa fe91 	bl	8080c0e <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
            t6713.enableABCLogic();
 8085eec:	4880      	ldr	r0, [pc, #512]	; (80860f0 <_Z10serialMenuv+0x618>)
 8085eee:	f001 f92d 	bl	808714c <_ZN13Telaire_T671314enableABCLogicEv>
 8085ef2:	e5f7      	b.n	8085ae4 <_Z10serialMenuv+0xc>
        }else{
            Serial.println("ABC logic already enabled");
 8085ef4:	f005 fba6 	bl	808b644 <_Z16_fetch_usbserialv>
 8085ef8:	4980      	ldr	r1, [pc, #512]	; (80860fc <_Z10serialMenuv+0x624>)
 8085efa:	e78d      	b.n	8085e18 <_Z10serialMenuv+0x340>
        }
    }else if(incomingByte == 'T'){
 8085efc:	2854      	cmp	r0, #84	; 0x54
 8085efe:	d115      	bne.n	8085f2c <_Z10serialMenuv+0x454>
        if(!hih8120_enabled){
 8085f00:	4d7f      	ldr	r5, [pc, #508]	; (8086100 <_Z10serialMenuv+0x628>)
 8085f02:	682b      	ldr	r3, [r5, #0]
 8085f04:	b933      	cbnz	r3, 8085f14 <_Z10serialMenuv+0x43c>
            Serial.println("Enabling HIH8120 RH sensor");
 8085f06:	f005 fb9d 	bl	808b644 <_Z16_fetch_usbserialv>
 8085f0a:	497e      	ldr	r1, [pc, #504]	; (8086104 <_Z10serialMenuv+0x62c>)
 8085f0c:	f004 fb01 	bl	808a512 <_ZN5Print7printlnEPKc>
            hih8120_enabled = 1;
 8085f10:	2301      	movs	r3, #1
 8085f12:	e005      	b.n	8085f20 <_Z10serialMenuv+0x448>
            EEPROM.put(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);

        }else{
            Serial.println("Disabling HIH8120 RH sensor");
 8085f14:	f005 fb96 	bl	808b644 <_Z16_fetch_usbserialv>
 8085f18:	497b      	ldr	r1, [pc, #492]	; (8086108 <_Z10serialMenuv+0x630>)
 8085f1a:	f004 fafa 	bl	808a512 <_ZN5Print7printlnEPKc>
            hih8120_enabled = 0;
 8085f1e:	2300      	movs	r3, #0
 8085f20:	602b      	str	r3, [r5, #0]
            EEPROM.put(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);
 8085f22:	f005 ff73 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8085f26:	4629      	mov	r1, r5
 8085f28:	2080      	movs	r0, #128	; 0x80
 8085f2a:	e65f      	b.n	8085bec <_Z10serialMenuv+0x114>
        }

    }else if(incomingByte == 'U'){
 8085f2c:	2855      	cmp	r0, #85	; 0x55
 8085f2e:	d115      	bne.n	8085f5c <_Z10serialMenuv+0x484>
        if(!CO_socket){
 8085f30:	4d76      	ldr	r5, [pc, #472]	; (808610c <_Z10serialMenuv+0x634>)
 8085f32:	682b      	ldr	r3, [r5, #0]
 8085f34:	b933      	cbnz	r3, 8085f44 <_Z10serialMenuv+0x46c>
            Serial.println("Now reading CO from U20-Alpha2");
 8085f36:	f005 fb85 	bl	808b644 <_Z16_fetch_usbserialv>
 8085f3a:	4975      	ldr	r1, [pc, #468]	; (8086110 <_Z10serialMenuv+0x638>)
 8085f3c:	f004 fae9 	bl	808a512 <_ZN5Print7printlnEPKc>
            CO_socket = 1;
 8085f40:	2301      	movs	r3, #1
 8085f42:	e005      	b.n	8085f50 <_Z10serialMenuv+0x478>
            EEPROM.put(CO_SOCKET_MEM_ADDRESS, CO_socket);

        }else{
            Serial.println("Now reading CO from U19-Alpha1");
 8085f44:	f005 fb7e 	bl	808b644 <_Z16_fetch_usbserialv>
 8085f48:	4972      	ldr	r1, [pc, #456]	; (8086114 <_Z10serialMenuv+0x63c>)
 8085f4a:	f004 fae2 	bl	808a512 <_ZN5Print7printlnEPKc>
            CO_socket = 0;
 8085f4e:	2300      	movs	r3, #0
 8085f50:	602b      	str	r3, [r5, #0]
            EEPROM.put(CO_SOCKET_MEM_ADDRESS, CO_socket);
 8085f52:	f005 ff5b 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8085f56:	4629      	mov	r1, r5
 8085f58:	2084      	movs	r0, #132	; 0x84
 8085f5a:	e647      	b.n	8085bec <_Z10serialMenuv+0x114>
        }
    }else if(incomingByte == 'V'){
 8085f5c:	2856      	cmp	r0, #86	; 0x56
 8085f5e:	d108      	bne.n	8085f72 <_Z10serialMenuv+0x49a>
        Serial.println("Reseting the CO2 sensor");
 8085f60:	f005 fb70 	bl	808b644 <_Z16_fetch_usbserialv>
 8085f64:	496c      	ldr	r1, [pc, #432]	; (8086118 <_Z10serialMenuv+0x640>)
 8085f66:	f004 fad4 	bl	808a512 <_ZN5Print7printlnEPKc>
        t6713.resetSensor();
 8085f6a:	4861      	ldr	r0, [pc, #388]	; (80860f0 <_Z10serialMenuv+0x618>)
 8085f6c:	f001 f8a4 	bl	80870b8 <_ZN13Telaire_T671311resetSensorEv>
 8085f70:	e5b8      	b.n	8085ae4 <_Z10serialMenuv+0xc>

    }else if(incomingByte == '1'){
 8085f72:	2831      	cmp	r0, #49	; 0x31
 8085f74:	d102      	bne.n	8085f7c <_Z10serialMenuv+0x4a4>
        serialGetLowerLimit();
 8085f76:	f7fd fe33 	bl	8083be0 <_Z19serialGetLowerLimitv>
 8085f7a:	e5b3      	b.n	8085ae4 <_Z10serialMenuv+0xc>
    }else if(incomingByte == '2'){
 8085f7c:	2832      	cmp	r0, #50	; 0x32
 8085f7e:	d102      	bne.n	8085f86 <_Z10serialMenuv+0x4ae>
        serialGetUpperLimit();
 8085f80:	f7fd feb2 	bl	8083ce8 <_Z19serialGetUpperLimitv>
 8085f84:	e5ae      	b.n	8085ae4 <_Z10serialMenuv+0xc>
    }else if(incomingByte == '3'){
 8085f86:	2833      	cmp	r0, #51	; 0x33
 8085f88:	d116      	bne.n	8085fb8 <_Z10serialMenuv+0x4e0>
        Serial.print("APP Version: ");
 8085f8a:	f005 fb5b 	bl	808b644 <_Z16_fetch_usbserialv>
 8085f8e:	4963      	ldr	r1, [pc, #396]	; (808611c <_Z10serialMenuv+0x644>)
 8085f90:	f004 faac 	bl	808a4ec <_ZN5Print5printEPKc>
        Serial.println(APP_VERSION);
 8085f94:	f005 fb56 	bl	808b644 <_Z16_fetch_usbserialv>
 8085f98:	220a      	movs	r2, #10
 8085f9a:	2107      	movs	r1, #7
 8085f9c:	f004 fb27 	bl	808a5ee <_ZN5Print7printlnEii>
        Serial.print("Build: ");
 8085fa0:	f005 fb50 	bl	808b644 <_Z16_fetch_usbserialv>
 8085fa4:	495e      	ldr	r1, [pc, #376]	; (8086120 <_Z10serialMenuv+0x648>)
 8085fa6:	f004 faa1 	bl	808a4ec <_ZN5Print5printEPKc>
        Serial.println(BUILD_VERSION);
 8085faa:	f005 fb4b 	bl	808b644 <_Z16_fetch_usbserialv>
 8085fae:	220a      	movs	r2, #10
 8085fb0:	210f      	movs	r1, #15
 8085fb2:	f004 fb1c 	bl	808a5ee <_ZN5Print7printlnEii>
 8085fb6:	e595      	b.n	8085ae4 <_Z10serialMenuv+0xc>
    }else if(incomingByte == '4'){
 8085fb8:	2834      	cmp	r0, #52	; 0x34
 8085fba:	d10d      	bne.n	8085fd8 <_Z10serialMenuv+0x500>
        if(ozone_enabled == 0){
 8085fbc:	4d59      	ldr	r5, [pc, #356]	; (8086124 <_Z10serialMenuv+0x64c>)
 8085fbe:	682b      	ldr	r3, [r5, #0]
 8085fc0:	b91b      	cbnz	r3, 8085fca <_Z10serialMenuv+0x4f2>
            Serial.println("Enabling Ozone");
 8085fc2:	f005 fb3f 	bl	808b644 <_Z16_fetch_usbserialv>
 8085fc6:	4958      	ldr	r1, [pc, #352]	; (8086128 <_Z10serialMenuv+0x650>)
 8085fc8:	e002      	b.n	8085fd0 <_Z10serialMenuv+0x4f8>
        }else{
            Serial.println("Ozone already enabled");
 8085fca:	f005 fb3b 	bl	808b644 <_Z16_fetch_usbserialv>
 8085fce:	4957      	ldr	r1, [pc, #348]	; (808612c <_Z10serialMenuv+0x654>)
 8085fd0:	f004 fa9f 	bl	808a512 <_ZN5Print7printlnEPKc>
        }
        ozone_enabled = 1;
 8085fd4:	2301      	movs	r3, #1
 8085fd6:	e00f      	b.n	8085ff8 <_Z10serialMenuv+0x520>
        EEPROM.put(OZONE_EN_MEM_ADDRESS, ozone_enabled);
    }else if(incomingByte == '5'){
 8085fd8:	2835      	cmp	r0, #53	; 0x35
 8085fda:	d113      	bne.n	8086004 <_Z10serialMenuv+0x52c>
        if(ozone_enabled == 1){
 8085fdc:	4d51      	ldr	r5, [pc, #324]	; (8086124 <_Z10serialMenuv+0x64c>)
 8085fde:	682b      	ldr	r3, [r5, #0]
 8085fe0:	2b01      	cmp	r3, #1
 8085fe2:	d103      	bne.n	8085fec <_Z10serialMenuv+0x514>
            Serial.println("Disabling Ozone");
 8085fe4:	f005 fb2e 	bl	808b644 <_Z16_fetch_usbserialv>
 8085fe8:	4951      	ldr	r1, [pc, #324]	; (8086130 <_Z10serialMenuv+0x658>)
 8085fea:	e002      	b.n	8085ff2 <_Z10serialMenuv+0x51a>
        }else{
            Serial.println("Ozone already disabled");
 8085fec:	f005 fb2a 	bl	808b644 <_Z16_fetch_usbserialv>
 8085ff0:	4950      	ldr	r1, [pc, #320]	; (8086134 <_Z10serialMenuv+0x65c>)
 8085ff2:	f004 fa8e 	bl	808a512 <_ZN5Print7printlnEPKc>
        }
        ozone_enabled = 0;
 8085ff6:	2300      	movs	r3, #0
 8085ff8:	602b      	str	r3, [r5, #0]
        EEPROM.put(OZONE_EN_MEM_ADDRESS, ozone_enabled);
 8085ffa:	f005 ff07 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8085ffe:	4949      	ldr	r1, [pc, #292]	; (8086124 <_Z10serialMenuv+0x64c>)
 8086000:	2058      	movs	r0, #88	; 0x58
 8086002:	e5f3      	b.n	8085bec <_Z10serialMenuv+0x114>
    }else if(incomingByte == '6'){
 8086004:	2836      	cmp	r0, #54	; 0x36
 8086006:	d10d      	bne.n	8086024 <_Z10serialMenuv+0x54c>
        if(voc_enabled == 0){
 8086008:	4d4b      	ldr	r5, [pc, #300]	; (8086138 <_Z10serialMenuv+0x660>)
 808600a:	682b      	ldr	r3, [r5, #0]
 808600c:	b91b      	cbnz	r3, 8086016 <_Z10serialMenuv+0x53e>
            Serial.println("Enabling VOC's");
 808600e:	f005 fb19 	bl	808b644 <_Z16_fetch_usbserialv>
 8086012:	494a      	ldr	r1, [pc, #296]	; (808613c <_Z10serialMenuv+0x664>)
 8086014:	e002      	b.n	808601c <_Z10serialMenuv+0x544>
        }else{
            Serial.println("VOC's already enabled");
 8086016:	f005 fb15 	bl	808b644 <_Z16_fetch_usbserialv>
 808601a:	4949      	ldr	r1, [pc, #292]	; (8086140 <_Z10serialMenuv+0x668>)
 808601c:	f004 fa79 	bl	808a512 <_ZN5Print7printlnEPKc>
        }
        voc_enabled = 1;
 8086020:	2301      	movs	r3, #1
 8086022:	e00f      	b.n	8086044 <_Z10serialMenuv+0x56c>
        EEPROM.put(VOC_EN_MEM_ADDRESS, voc_enabled);
    }else if(incomingByte == '7'){
 8086024:	2837      	cmp	r0, #55	; 0x37
 8086026:	d113      	bne.n	8086050 <_Z10serialMenuv+0x578>
        if(voc_enabled == 1){
 8086028:	4d43      	ldr	r5, [pc, #268]	; (8086138 <_Z10serialMenuv+0x660>)
 808602a:	682b      	ldr	r3, [r5, #0]
 808602c:	2b01      	cmp	r3, #1
 808602e:	d103      	bne.n	8086038 <_Z10serialMenuv+0x560>
            Serial.println("Disabling VOC's");
 8086030:	f005 fb08 	bl	808b644 <_Z16_fetch_usbserialv>
 8086034:	4943      	ldr	r1, [pc, #268]	; (8086144 <_Z10serialMenuv+0x66c>)
 8086036:	e002      	b.n	808603e <_Z10serialMenuv+0x566>
        }else{
            Serial.println("VOC's already disabled");
 8086038:	f005 fb04 	bl	808b644 <_Z16_fetch_usbserialv>
 808603c:	4942      	ldr	r1, [pc, #264]	; (8086148 <_Z10serialMenuv+0x670>)
 808603e:	f004 fa68 	bl	808a512 <_ZN5Print7printlnEPKc>
        }
        voc_enabled = 0;
 8086042:	2300      	movs	r3, #0
 8086044:	602b      	str	r3, [r5, #0]
        EEPROM.put(VOC_EN_MEM_ADDRESS, voc_enabled);
 8086046:	f005 fee1 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 808604a:	493b      	ldr	r1, [pc, #236]	; (8086138 <_Z10serialMenuv+0x660>)
 808604c:	205c      	movs	r0, #92	; 0x5c
 808604e:	e5cd      	b.n	8085bec <_Z10serialMenuv+0x114>
    }else if(incomingByte == '8'){
 8086050:	2838      	cmp	r0, #56	; 0x38
 8086052:	d11e      	bne.n	8086092 <_Z10serialMenuv+0x5ba>
        Serial.print("Fault: ");
 8086054:	f005 faf6 	bl	808b644 <_Z16_fetch_usbserialv>
 8086058:	493c      	ldr	r1, [pc, #240]	; (808614c <_Z10serialMenuv+0x674>)
 808605a:	f004 fa47 	bl	808a4ec <_ZN5Print5printEPKc>
        byte fault = pmic.getFault();
 808605e:	483c      	ldr	r0, [pc, #240]	; (8086150 <_Z10serialMenuv+0x678>)
 8086060:	f003 fd3e 	bl	8089ae0 <_ZN4PMIC8getFaultEv>
 8086064:	4605      	mov	r5, r0
        Serial.println(fault);
 8086066:	f005 faed 	bl	808b644 <_Z16_fetch_usbserialv>
 808606a:	220a      	movs	r2, #10
 808606c:	4629      	mov	r1, r5
 808606e:	f004 fa90 	bl	808a592 <_ZN5Print7printlnEhi>
        Serial.print("System status: ");
 8086072:	f005 fae7 	bl	808b644 <_Z16_fetch_usbserialv>
 8086076:	4937      	ldr	r1, [pc, #220]	; (8086154 <_Z10serialMenuv+0x67c>)
 8086078:	f004 fa38 	bl	808a4ec <_ZN5Print5printEPKc>
        byte systemStatus = pmic.getSystemStatus();
 808607c:	4834      	ldr	r0, [pc, #208]	; (8086150 <_Z10serialMenuv+0x678>)
 808607e:	f003 fd2c 	bl	8089ada <_ZN4PMIC15getSystemStatusEv>
 8086082:	4605      	mov	r5, r0
        Serial.println(systemStatus);
 8086084:	f005 fade 	bl	808b644 <_Z16_fetch_usbserialv>
 8086088:	220a      	movs	r2, #10
 808608a:	4629      	mov	r1, r5
 808608c:	f004 fa81 	bl	808a592 <_ZN5Print7printlnEhi>
 8086090:	e528      	b.n	8085ae4 <_Z10serialMenuv+0xc>

    }else if(incomingByte == '9'){
 8086092:	2839      	cmp	r0, #57	; 0x39
 8086094:	d102      	bne.n	808609c <_Z10serialMenuv+0x5c4>
        serialIncreaseChargeCurrent();
 8086096:	f7ff faf3 	bl	8085680 <_Z27serialIncreaseChargeCurrentv>
 808609a:	e523      	b.n	8085ae4 <_Z10serialMenuv+0xc>
    }else if(incomingByte == '0'){
 808609c:	2830      	cmp	r0, #48	; 0x30
 808609e:	d102      	bne.n	80860a6 <_Z10serialMenuv+0x5ce>
        serialIncreaseInputCurrent();
 80860a0:	f7ff faac 	bl	80855fc <_Z26serialIncreaseInputCurrentv>
 80860a4:	e51e      	b.n	8085ae4 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'A'){
 80860a6:	2841      	cmp	r0, #65	; 0x41
 80860a8:	d102      	bne.n	80860b0 <_Z10serialMenuv+0x5d8>
        readAlpha1Constantly();
 80860aa:	f7ff fcfd 	bl	8085aa8 <_Z20readAlpha1Constantlyv>
 80860ae:	e519      	b.n	8085ae4 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'B'){
 80860b0:	2842      	cmp	r0, #66	; 0x42
 80860b2:	d161      	bne.n	8086178 <_Z10serialMenuv+0x6a0>
        if(output_only_particles == 1){
 80860b4:	4b28      	ldr	r3, [pc, #160]	; (8086158 <_Z10serialMenuv+0x680>)
 80860b6:	681a      	ldr	r2, [r3, #0]
 80860b8:	2a01      	cmp	r2, #1
 80860ba:	d151      	bne.n	8086160 <_Z10serialMenuv+0x688>
            output_only_particles = 0;
 80860bc:	2200      	movs	r2, #0
 80860be:	601a      	str	r2, [r3, #0]
            Serial.println("Outputting normally");
 80860c0:	f005 fac0 	bl	808b644 <_Z16_fetch_usbserialv>
 80860c4:	4925      	ldr	r1, [pc, #148]	; (808615c <_Z10serialMenuv+0x684>)
 80860c6:	e050      	b.n	808616a <_Z10serialMenuv+0x692>
 80860c8:	20000b78 	.word	0x20000b78
 80860cc:	080924b0 	.word	0x080924b0
 80860d0:	080924d2 	.word	0x080924d2
 80860d4:	080924f6 	.word	0x080924f6
 80860d8:	08092519 	.word	0x08092519
 80860dc:	0809253e 	.word	0x0809253e
 80860e0:	08092559 	.word	0x08092559
 80860e4:	0809256c 	.word	0x0809256c
 80860e8:	200008c0 	.word	0x200008c0
 80860ec:	08092587 	.word	0x08092587
 80860f0:	20000b7c 	.word	0x20000b7c
 80860f4:	080925aa 	.word	0x080925aa
 80860f8:	080925c5 	.word	0x080925c5
 80860fc:	080925e7 	.word	0x080925e7
 8086100:	200001f4 	.word	0x200001f4
 8086104:	08092601 	.word	0x08092601
 8086108:	0809261c 	.word	0x0809261c
 808610c:	200006f4 	.word	0x200006f4
 8086110:	08092638 	.word	0x08092638
 8086114:	08092657 	.word	0x08092657
 8086118:	08092676 	.word	0x08092676
 808611c:	0809268e 	.word	0x0809268e
 8086120:	08090d7a 	.word	0x08090d7a
 8086124:	20000ab8 	.word	0x20000ab8
 8086128:	0809269c 	.word	0x0809269c
 808612c:	080926ab 	.word	0x080926ab
 8086130:	080926c1 	.word	0x080926c1
 8086134:	080926d1 	.word	0x080926d1
 8086138:	20000b84 	.word	0x20000b84
 808613c:	080926e8 	.word	0x080926e8
 8086140:	080926f7 	.word	0x080926f7
 8086144:	0809270d 	.word	0x0809270d
 8086148:	0809271d 	.word	0x0809271d
 808614c:	08092734 	.word	0x08092734
 8086150:	20000ad4 	.word	0x20000ad4
 8086154:	0809273c 	.word	0x0809273c
 8086158:	200007e0 	.word	0x200007e0
 808615c:	0809274c 	.word	0x0809274c
        }else{
            output_only_particles = 1;
 8086160:	2201      	movs	r2, #1
 8086162:	601a      	str	r2, [r3, #0]
            Serial.println("Outputting only PM");
 8086164:	f005 fa6e 	bl	808b644 <_Z16_fetch_usbserialv>
 8086168:	4964      	ldr	r1, [pc, #400]	; (80862fc <_Z10serialMenuv+0x824>)
 808616a:	f004 f9d2 	bl	808a512 <_ZN5Print7printlnEPKc>
        }
        EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, output_only_particles);
 808616e:	f005 fe4d 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8086172:	4963      	ldr	r1, [pc, #396]	; (8086300 <_Z10serialMenuv+0x828>)
 8086174:	2064      	movs	r0, #100	; 0x64
 8086176:	e539      	b.n	8085bec <_Z10serialMenuv+0x114>

    }else if(incomingByte == '!'){
 8086178:	2821      	cmp	r0, #33	; 0x21
 808617a:	d135      	bne.n	80861e8 <_Z10serialMenuv+0x710>

        Serial.println("Outputting VOCs continuously!  Press any button to exit...");
 808617c:	f005 fa62 	bl	808b644 <_Z16_fetch_usbserialv>
 8086180:	4960      	ldr	r1, [pc, #384]	; (8086304 <_Z10serialMenuv+0x82c>)
 8086182:	f004 f9c6 	bl	808a512 <_ZN5Print7printlnEPKc>
        while(!Serial.available()){
 8086186:	f005 fa5d 	bl	808b644 <_Z16_fetch_usbserialv>
 808618a:	6803      	ldr	r3, [r0, #0]
 808618c:	691b      	ldr	r3, [r3, #16]
 808618e:	4798      	blx	r3
 8086190:	4605      	mov	r5, r0
 8086192:	2800      	cmp	r0, #0
 8086194:	f47f aca6 	bne.w	8085ae4 <_Z10serialMenuv+0xc>
            if (! bme.performReading()) {
 8086198:	485b      	ldr	r0, [pc, #364]	; (8086308 <_Z10serialMenuv+0x830>)
 808619a:	f002 fccd 	bl	8088b38 <_ZN15Adafruit_BME68014performReadingEv>
 808619e:	b918      	cbnz	r0, 80861a8 <_Z10serialMenuv+0x6d0>
              Serial.println("Failed to read BME680");
 80861a0:	f005 fa50 	bl	808b644 <_Z16_fetch_usbserialv>
 80861a4:	4959      	ldr	r1, [pc, #356]	; (808630c <_Z10serialMenuv+0x834>)
 80861a6:	e0a5      	b.n	80862f4 <_Z10serialMenuv+0x81c>
              return;
            }else{
                Serial.printf("TVocs=%1.0f, Temp=%1.1f, press=%1.1f, rh=%1.1f\n\r", bme.gas_resistance/100, bme.temperature, bme.pressure, bme.humidity);
 80861a8:	f005 fa4c 	bl	808b644 <_Z16_fetch_usbserialv>
 80861ac:	4607      	mov	r7, r0
 80861ae:	68b0      	ldr	r0, [r6, #8]
 80861b0:	f006 f94e 	bl	808c450 <__aeabi_f2d>
 80861b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80861b8:	6870      	ldr	r0, [r6, #4]
 80861ba:	f006 f949 	bl	808c450 <__aeabi_f2d>
 80861be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80861c2:	6830      	ldr	r0, [r6, #0]
 80861c4:	f006 f944 	bl	808c450 <__aeabi_f2d>
 80861c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80861cc:	4950      	ldr	r1, [pc, #320]	; (8086310 <_Z10serialMenuv+0x838>)
 80861ce:	68f0      	ldr	r0, [r6, #12]
 80861d0:	f006 fe9c 	bl	808cf0c <__aeabi_fdiv>
 80861d4:	f006 f93c 	bl	808c450 <__aeabi_f2d>
 80861d8:	4a4e      	ldr	r2, [pc, #312]	; (8086314 <_Z10serialMenuv+0x83c>)
 80861da:	e9cd 0100 	strd	r0, r1, [sp]
 80861de:	4629      	mov	r1, r5
 80861e0:	4638      	mov	r0, r7
 80861e2:	f004 facb 	bl	808a77c <_ZN5Print11printf_implEbPKcz>
 80861e6:	e7ce      	b.n	8086186 <_Z10serialMenuv+0x6ae>
            }
        }
    }else if(incomingByte == '@'){
 80861e8:	2840      	cmp	r0, #64	; 0x40
 80861ea:	d112      	bne.n	8086212 <_Z10serialMenuv+0x73a>
        if(sensible_iot_en == 1){
 80861ec:	4d4a      	ldr	r5, [pc, #296]	; (8086318 <_Z10serialMenuv+0x840>)
 80861ee:	682b      	ldr	r3, [r5, #0]
 80861f0:	2b01      	cmp	r3, #1
 80861f2:	d10b      	bne.n	808620c <_Z10serialMenuv+0x734>
            Serial.println("Disabling sensible iot data push.");
 80861f4:	f005 fa26 	bl	808b644 <_Z16_fetch_usbserialv>
 80861f8:	4948      	ldr	r1, [pc, #288]	; (808631c <_Z10serialMenuv+0x844>)
 80861fa:	f004 f98a 	bl	808a512 <_ZN5Print7printlnEPKc>
            sensible_iot_en = 0;
 80861fe:	2300      	movs	r3, #0
 8086200:	602b      	str	r3, [r5, #0]
            EEPROM.put(SENSIBLEIOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 8086202:	f005 fe03 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 8086206:	4629      	mov	r1, r5
 8086208:	208c      	movs	r0, #140	; 0x8c
 808620a:	e4ef      	b.n	8085bec <_Z10serialMenuv+0x114>
        }else{
            serialSetSensibleIotEnable();
 808620c:	f7fc fc0e 	bl	8082a2c <_Z26serialSetSensibleIotEnablev>
 8086210:	e468      	b.n	8085ae4 <_Z10serialMenuv+0xc>
            
        }
    }else if(incomingByte == '#'){
 8086212:	2823      	cmp	r0, #35	; 0x23
 8086214:	d115      	bne.n	8086242 <_Z10serialMenuv+0x76a>
        if(car_topper_power_en == 1){
 8086216:	4d42      	ldr	r5, [pc, #264]	; (8086320 <_Z10serialMenuv+0x848>)
 8086218:	682b      	ldr	r3, [r5, #0]
 808621a:	2b01      	cmp	r3, #1
 808621c:	d105      	bne.n	808622a <_Z10serialMenuv+0x752>
            car_topper_power_en = 0;
 808621e:	2300      	movs	r3, #0
 8086220:	602b      	str	r3, [r5, #0]
            Serial.println("Disabling car topper power.  ");
 8086222:	f005 fa0f 	bl	808b644 <_Z16_fetch_usbserialv>
 8086226:	493f      	ldr	r1, [pc, #252]	; (8086324 <_Z10serialMenuv+0x84c>)
 8086228:	e004      	b.n	8086234 <_Z10serialMenuv+0x75c>
            EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, car_topper_power_en);
        }else{
            car_topper_power_en = 1;
 808622a:	2301      	movs	r3, #1
 808622c:	602b      	str	r3, [r5, #0]
            Serial.println("Enabling car topper power.  If no external power, system will turn off.");
 808622e:	f005 fa09 	bl	808b644 <_Z16_fetch_usbserialv>
 8086232:	493d      	ldr	r1, [pc, #244]	; (8086328 <_Z10serialMenuv+0x850>)
 8086234:	f004 f96d 	bl	808a512 <_ZN5Print7printlnEPKc>
            EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, car_topper_power_en);
 8086238:	f005 fde8 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 808623c:	4629      	mov	r1, r5
 808623e:	2090      	movs	r0, #144	; 0x90
 8086240:	e4d4      	b.n	8085bec <_Z10serialMenuv+0x114>
        }
    
    }else if(incomingByte == 'W'){
 8086242:	2857      	cmp	r0, #87	; 0x57
 8086244:	d116      	bne.n	8086274 <_Z10serialMenuv+0x79c>
        if(google_location_en == 1){
 8086246:	4d39      	ldr	r5, [pc, #228]	; (808632c <_Z10serialMenuv+0x854>)
 8086248:	682b      	ldr	r3, [r5, #0]
 808624a:	2b01      	cmp	r3, #1
 808624c:	d106      	bne.n	808625c <_Z10serialMenuv+0x784>
            Serial.println("Disabling google location services.");
 808624e:	f005 f9f9 	bl	808b644 <_Z16_fetch_usbserialv>
 8086252:	4937      	ldr	r1, [pc, #220]	; (8086330 <_Z10serialMenuv+0x858>)
 8086254:	f004 f95d 	bl	808a512 <_ZN5Print7printlnEPKc>
            google_location_en = 0;
 8086258:	2300      	movs	r3, #0
 808625a:	e005      	b.n	8086268 <_Z10serialMenuv+0x790>
            EEPROM.put(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
        }else{
            Serial.println("Enabling google location services.");
 808625c:	f005 f9f2 	bl	808b644 <_Z16_fetch_usbserialv>
 8086260:	4934      	ldr	r1, [pc, #208]	; (8086334 <_Z10serialMenuv+0x85c>)
 8086262:	f004 f956 	bl	808a512 <_ZN5Print7printlnEPKc>
            google_location_en = 1;
 8086266:	2301      	movs	r3, #1
 8086268:	602b      	str	r3, [r5, #0]
            EEPROM.put(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
 808626a:	f005 fdcf 	bl	808be0c <_Z21__fetch_global_EEPROMv>
 808626e:	4629      	mov	r1, r5
 8086270:	2088      	movs	r0, #136	; 0x88
 8086272:	e4bb      	b.n	8085bec <_Z10serialMenuv+0x114>
        }
        
    }else if(incomingByte == 'X'){
 8086274:	2858      	cmp	r0, #88	; 0x58
 8086276:	d107      	bne.n	8086288 <_Z10serialMenuv+0x7b0>
        //calibrate CO2 sensor
        //if(debugging_enabled){
            t6713.calibrate(1);
 8086278:	2101      	movs	r1, #1
 808627a:	482f      	ldr	r0, [pc, #188]	; (8086338 <_Z10serialMenuv+0x860>)
 808627c:	f000 ff8c 	bl	8087198 <_ZN13Telaire_T67139calibrateEi>
        //}else{
         //   t6713.calibrate(0);
        //}
        
        co2_calibration_timer = 180;        //6 minutes if measurement cycle is 2 seconds
 8086280:	4b2e      	ldr	r3, [pc, #184]	; (808633c <_Z10serialMenuv+0x864>)
 8086282:	22b4      	movs	r2, #180	; 0xb4
 8086284:	601a      	str	r2, [r3, #0]
 8086286:	e42d      	b.n	8085ae4 <_Z10serialMenuv+0xc>
        
    
    }else if(incomingByte == 'Z'){
 8086288:	285a      	cmp	r0, #90	; 0x5a
 808628a:	d129      	bne.n	80862e0 <_Z10serialMenuv+0x808>
        Serial.println("Getting cellular information, this may take a while...");
 808628c:	f005 f9da 	bl	808b644 <_Z16_fetch_usbserialv>
 8086290:	492b      	ldr	r1, [pc, #172]	; (8086340 <_Z10serialMenuv+0x868>)
 8086292:	f004 f93e 	bl	808a512 <_ZN5Print7printlnEPKc>

        Log.info("IMEI=%s", CellularHelper.getIMEI().c_str());
 8086296:	492b      	ldr	r1, [pc, #172]	; (8086344 <_Z10serialMenuv+0x86c>)
 8086298:	a808      	add	r0, sp, #32
 808629a:	f002 ff65 	bl	8089168 <_ZNK19CellularHelperClass7getIMEIEv>
 808629e:	9a08      	ldr	r2, [sp, #32]
 80862a0:	4929      	ldr	r1, [pc, #164]	; (8086348 <_Z10serialMenuv+0x870>)
 80862a2:	482a      	ldr	r0, [pc, #168]	; (808634c <_Z10serialMenuv+0x874>)
 80862a4:	f7fa fd03 	bl	8080cae <_ZNK5spark6Logger4infoEPKcz>
 80862a8:	a808      	add	r0, sp, #32
 80862aa:	f003 fee1 	bl	808a070 <_ZN6StringD1Ev>

        Log.info("IMSI=%s", CellularHelper.getIMSI().c_str());
 80862ae:	4925      	ldr	r1, [pc, #148]	; (8086344 <_Z10serialMenuv+0x86c>)
 80862b0:	a808      	add	r0, sp, #32
 80862b2:	f002 ff75 	bl	80891a0 <_ZNK19CellularHelperClass7getIMSIEv>
 80862b6:	9a08      	ldr	r2, [sp, #32]
 80862b8:	4925      	ldr	r1, [pc, #148]	; (8086350 <_Z10serialMenuv+0x878>)
 80862ba:	4824      	ldr	r0, [pc, #144]	; (808634c <_Z10serialMenuv+0x874>)
 80862bc:	f7fa fcf7 	bl	8080cae <_ZNK5spark6Logger4infoEPKcz>
 80862c0:	a808      	add	r0, sp, #32
 80862c2:	f003 fed5 	bl	808a070 <_ZN6StringD1Ev>

        Log.info("ICCID=%s", CellularHelper.getICCID().c_str());
 80862c6:	491f      	ldr	r1, [pc, #124]	; (8086344 <_Z10serialMenuv+0x86c>)
 80862c8:	a808      	add	r0, sp, #32
 80862ca:	f002 ff85 	bl	80891d8 <_ZNK19CellularHelperClass8getICCIDEv>
 80862ce:	9a08      	ldr	r2, [sp, #32]
 80862d0:	4920      	ldr	r1, [pc, #128]	; (8086354 <_Z10serialMenuv+0x87c>)
 80862d2:	481e      	ldr	r0, [pc, #120]	; (808634c <_Z10serialMenuv+0x874>)
 80862d4:	f7fa fceb 	bl	8080cae <_ZNK5spark6Logger4infoEPKcz>
 80862d8:	a808      	add	r0, sp, #32
 80862da:	f003 fec9 	bl	808a070 <_ZN6StringD1Ev>
 80862de:	e401      	b.n	8085ae4 <_Z10serialMenuv+0xc>
        //if(serial_cellular_enabled){

        //}else{
        //    Serial.println("Cellular not enabled.  Please enable cellular first!");
        //}
    }else if(incomingByte == '?'){
 80862e0:	283f      	cmp	r0, #63	; 0x3f
 80862e2:	f47f abff 	bne.w	8085ae4 <_Z10serialMenuv+0xc>
        outputSerialMenuOptions();
 80862e6:	f7fd fd83 	bl	8083df0 <_Z23outputSerialMenuOptionsv>
 80862ea:	f7ff bbfb 	b.w	8085ae4 <_Z10serialMenuv+0xc>
    }
  }
  Serial.println("Exiting serial menu...");
 80862ee:	f005 f9a9 	bl	808b644 <_Z16_fetch_usbserialv>
 80862f2:	4919      	ldr	r1, [pc, #100]	; (8086358 <_Z10serialMenuv+0x880>)
 80862f4:	f004 f90d 	bl	808a512 <_ZN5Print7printlnEPKc>

}
 80862f8:	b00d      	add	sp, #52	; 0x34
 80862fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80862fc:	08092760 	.word	0x08092760
 8086300:	200007e0 	.word	0x200007e0
 8086304:	08092773 	.word	0x08092773
 8086308:	200006f8 	.word	0x200006f8
 808630c:	08090b47 	.word	0x08090b47
 8086310:	42c80000 	.word	0x42c80000
 8086314:	080927ae 	.word	0x080927ae
 8086318:	200008d0 	.word	0x200008d0
 808631c:	080927df 	.word	0x080927df
 8086320:	2000021c 	.word	0x2000021c
 8086324:	08092801 	.word	0x08092801
 8086328:	0809281f 	.word	0x0809281f
 808632c:	20000b70 	.word	0x20000b70
 8086330:	08092867 	.word	0x08092867
 8086334:	0809288b 	.word	0x0809288b
 8086338:	20000b7c 	.word	0x20000b7c
 808633c:	20000b68 	.word	0x20000b68
 8086340:	080928ae 	.word	0x080928ae
 8086344:	20000bcc 	.word	0x20000bcc
 8086348:	080928e5 	.word	0x080928e5
 808634c:	20000bd4 	.word	0x20000bd4
 8086350:	080928ed 	.word	0x080928ed
 8086354:	080928f5 	.word	0x080928f5
 8086358:	080928fe 	.word	0x080928fe

0808635c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v>:
    //Serial.println("!:  Continuous serial output of VOC's");
    Serial.println("@   Enable/Disable Sensible-iot data push.  If enabled, time zone will be ignored - UTC will be used.");
    Serial.println("#   Enable/Disable cartopper power mode.  If enabled, absense of external power will stop cellular.");
    Serial.println("?:  Output this menu");
    Serial.println("x:  Exits this menu");
  }
 808635c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 808635e:	4b5a      	ldr	r3, [pc, #360]	; (80864c8 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x16c>)
 8086360:	2400      	movs	r4, #0
 8086362:	601c      	str	r4, [r3, #0]
#include "SdFat.h"
#include "HIH61XX.h"
#include "google-maps-device-locator.h"
#include "CellularHelper.h"

GoogleMapsDeviceLocator locator;
 8086364:	4f59      	ldr	r7, [pc, #356]	; (80864cc <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x170>)
 8086366:	4b5a      	ldr	r3, [pc, #360]	; (80864d0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x174>)
 8086368:	4d5a      	ldr	r5, [pc, #360]	; (80864d4 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x178>)
 808636a:	2601      	movs	r6, #1
 808636c:	701e      	strb	r6, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 808636e:	f003 f805 	bl	808937c <HAL_Pin_Map>
 8086372:	4638      	mov	r0, r7
 8086374:	f002 fdb4 	bl	8088ee0 <_ZN23GoogleMapsDeviceLocatorC1Ev>
 8086378:	462a      	mov	r2, r5
 808637a:	4957      	ldr	r1, [pc, #348]	; (80864d8 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x17c>)
 808637c:	4638      	mov	r0, r7
 808637e:	f005 fdb1 	bl	808bee4 <__aeabi_atexit>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8086382:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8086386:	4b55      	ldr	r3, [pc, #340]	; (80864dc <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x180>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8086388:	2003      	movs	r0, #3
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 808638a:	701c      	strb	r4, [r3, #0]
 808638c:	805c      	strh	r4, [r3, #2]
 808638e:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8086390:	f003 f9f4 	bl	808977c <set_system_mode>



//manually control connection to cellular network
SYSTEM_MODE(MANUAL);
SYSTEM_THREAD(ENABLED);
 8086394:	4621      	mov	r1, r4
 8086396:	4630      	mov	r0, r6
 8086398:	f003 fa00 	bl	808979c <system_thread_set_state>

//global objects
Adafruit_BME680 bme; // I2C
 808639c:	f04f 31ff 	mov.w	r1, #4294967295
 80863a0:	484f      	ldr	r0, [pc, #316]	; (80864e0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x184>)
 80863a2:	f002 fb37 	bl	8088a14 <_ZN15Adafruit_BME680C1Ea>
Telaire_T6713 t6713;  //CO2 sensor
 80863a6:	484f      	ldr	r0, [pc, #316]	; (80864e4 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x188>)
 80863a8:	f000 fd59 	bl	8086e5e <_ZN13Telaire_T6713C1Ev>
LMP91000 lmp91000;
 80863ac:	484e      	ldr	r0, [pc, #312]	; (80864e8 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x18c>)
 80863ae:	f000 fb0d 	bl	80869cc <_ZN8LMP91000C1Ev>
Adafruit_ADS1115 ads1(0x49); //Set I2C address of ADC1
Adafruit_ADS1115 ads2(0x4A); //Set I2C address of ADC2
FuelGauge fuel;
 80863b2:	4e4e      	ldr	r6, [pc, #312]	; (80864ec <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x190>)

//global objects
Adafruit_BME680 bme; // I2C
Telaire_T6713 t6713;  //CO2 sensor
LMP91000 lmp91000;
Adafruit_ADS1115 ads1(0x49); //Set I2C address of ADC1
 80863b4:	2149      	movs	r1, #73	; 0x49
 80863b6:	484e      	ldr	r0, [pc, #312]	; (80864f0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x194>)
 80863b8:	f000 fc4f 	bl	8086c5a <_ZN16Adafruit_ADS1115C1Eh>
Adafruit_ADS1115 ads2(0x4A); //Set I2C address of ADC2
 80863bc:	214a      	movs	r1, #74	; 0x4a
 80863be:	484d      	ldr	r0, [pc, #308]	; (80864f4 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x198>)
 80863c0:	f000 fc4b 	bl	8086c5a <_ZN16Adafruit_ADS1115C1Eh>
FuelGauge fuel;
 80863c4:	4621      	mov	r1, r4
 80863c6:	4630      	mov	r0, r6
 80863c8:	f004 fc80 	bl	808accc <_ZN9FuelGaugeC1Eb>
 80863cc:	4630      	mov	r0, r6
GPS gps;
PMIC pmic;
 80863ce:	4e4a      	ldr	r6, [pc, #296]	; (80864f8 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x19c>)
Adafruit_BME680 bme; // I2C
Telaire_T6713 t6713;  //CO2 sensor
LMP91000 lmp91000;
Adafruit_ADS1115 ads1(0x49); //Set I2C address of ADC1
Adafruit_ADS1115 ads2(0x4A); //Set I2C address of ADC2
FuelGauge fuel;
 80863d0:	462a      	mov	r2, r5
 80863d2:	494a      	ldr	r1, [pc, #296]	; (80864fc <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1a0>)
 80863d4:	f005 fd86 	bl	808bee4 <__aeabi_atexit>
GPS gps;
PMIC pmic;
 80863d8:	4621      	mov	r1, r4
 80863da:	4630      	mov	r0, r6
 80863dc:	f003 fb23 	bl	8089a26 <_ZN4PMICC1Eb>
 80863e0:	4630      	mov	r0, r6
PowerCheck powerCheck;
 80863e2:	4e47      	ldr	r6, [pc, #284]	; (8086500 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1a4>)
LMP91000 lmp91000;
Adafruit_ADS1115 ads1(0x49); //Set I2C address of ADC1
Adafruit_ADS1115 ads2(0x4A); //Set I2C address of ADC2
FuelGauge fuel;
GPS gps;
PMIC pmic;
 80863e4:	462a      	mov	r2, r5
 80863e6:	4947      	ldr	r1, [pc, #284]	; (8086504 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1a8>)
 80863e8:	f005 fd7c 	bl	808bee4 <__aeabi_atexit>
PowerCheck powerCheck;
 80863ec:	4630      	mov	r0, r6
 80863ee:	f000 fb7d 	bl	8086aec <_ZN10PowerCheckC1Ev>
 80863f2:	462a      	mov	r2, r5
 80863f4:	4944      	ldr	r1, [pc, #272]	; (8086508 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1ac>)
 80863f6:	4630      	mov	r0, r6
 80863f8:	f005 fd74 	bl	808bee4 <__aeabi_atexit>
//SerialLogHandler logHandler;
HIH61XX hih(0x27);
 80863fc:	2127      	movs	r1, #39	; 0x27
 80863fe:	4843      	ldr	r0, [pc, #268]	; (808650c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1b0>)
 8086400:	f002 fc60 	bl	8088cc4 <_ZN7HIH61XXC1Eh>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
 8086404:	4b42      	ldr	r3, [pc, #264]	; (8086510 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1b4>)
#else  // SD_SPI_CONFIGURATION < 3
  typedef SdSpiBase m_spi_t;
#endif  // SD_SPI_CONFIGURATION < 3
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_selected(false),
                m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
 8086406:	2219      	movs	r2, #25
 8086408:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
 * \brief Main file system class for %SdFat library.
 */
class SdFat : public SdFatBase {
 public:
#if IMPLEMENT_SPI_INTERFACE_SELECTION
  SdFat() {
 808640c:	4a41      	ldr	r2, [pc, #260]	; (8086514 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1b8>)
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 808640e:	4842      	ldr	r0, [pc, #264]	; (8086518 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1bc>)
 8086410:	601a      	str	r2, [r3, #0]
unsigned long lastCheck = 0;
char lastStatus[256];

//sdcard
SdFat sd;
SdFile file;
 8086412:	4e42      	ldr	r6, [pc, #264]	; (808651c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1c0>)
/**
 * \class SdSpi
 * \brief SPI class for access to SD and SDHC flash memory cards.
 */
#if SD_SPI_CONFIGURATION >= 3
class SdSpi : public SdSpiBase {
 8086414:	4a42      	ldr	r2, [pc, #264]	; (8086520 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1c4>)
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 public:
  SdFile() {}
 8086416:	4f43      	ldr	r7, [pc, #268]	; (8086524 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1c8>)
 8086418:	71dc      	strb	r4, [r3, #7]
 808641a:	f883 4440 	strb.w	r4, [r3, #1088]	; 0x440
 808641e:	f883 4441 	strb.w	r4, [r3, #1089]	; 0x441
 8086422:	f883 4468 	strb.w	r4, [r3, #1128]	; 0x468
 8086426:	f883 446d 	strb.w	r4, [r3, #1133]	; 0x46d
 808642a:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   */
  void send(const uint8_t* buf, size_t n);
  /** \return true - uses SPI transactions */
#if IMPLEMENT_SPI_INTERFACE_SELECTION
  void setSpiIf(uint8_t spiIf) {
    m_spiIf = spiIf;
 808642e:	f883 4474 	strb.w	r4, [r3, #1140]	; 0x474
 8086432:	462a      	mov	r2, r5
 8086434:	4631      	mov	r1, r6
 8086436:	7204      	strb	r4, [r0, #8]
 8086438:	7244      	strb	r4, [r0, #9]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 808643a:	6044      	str	r4, [r0, #4]
 808643c:	6007      	str	r7, [r0, #0]
 808643e:	f005 fd51 	bl	808bee4 <__aeabi_atexit>
 8086442:	4839      	ldr	r0, [pc, #228]	; (8086528 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1cc>)
SdFile log_file;
 8086444:	462a      	mov	r2, r5
 8086446:	4631      	mov	r1, r6
 8086448:	7204      	strb	r4, [r0, #8]
 808644a:	7244      	strb	r4, [r0, #9]
 808644c:	6044      	str	r4, [r0, #4]
 808644e:	6007      	str	r7, [r0, #0]
 8086450:	f005 fd48 	bl	808bee4 <__aeabi_atexit>
 8086454:	4835      	ldr	r0, [pc, #212]	; (808652c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1d0>)
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8086456:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
File file1;
String fileName;
 808645a:	4e35      	ldr	r6, [pc, #212]	; (8086530 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1d4>)
 808645c:	4f35      	ldr	r7, [pc, #212]	; (8086534 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1d8>)
 808645e:	6083      	str	r3, [r0, #8]
class File : public FatFile, public Stream {
#else  // ARDUINO_FILE_USES_STREAM
class File : public FatFile, public Print {
#endif  // ARDUINO_FILE_USES_STREAM
 public:
  File() {}
 8086460:	4b35      	ldr	r3, [pc, #212]	; (8086538 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1dc>)

//sdcard
SdFat sd;
SdFile file;
SdFile log_file;
File file1;
 8086462:	462a      	mov	r2, r5
 8086464:	7404      	strb	r4, [r0, #16]
 8086466:	7444      	strb	r4, [r0, #17]
 8086468:	6044      	str	r4, [r0, #4]
 808646a:	4934      	ldr	r1, [pc, #208]	; (808653c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1e0>)
 808646c:	6003      	str	r3, [r0, #0]
String fileName;
 808646e:	4c34      	ldr	r4, [pc, #208]	; (8086540 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1e4>)

//sdcard
SdFat sd;
SdFile file;
SdFile log_file;
File file1;
 8086470:	f005 fd38 	bl	808bee4 <__aeabi_atexit>
String fileName;
 8086474:	4631      	mov	r1, r6
 8086476:	4638      	mov	r0, r7
 8086478:	f003 fe41 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
 808647c:	4638      	mov	r0, r7
String logFileName;
 808647e:	4f31      	ldr	r7, [pc, #196]	; (8086544 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1e8>)
//sdcard
SdFat sd;
SdFile file;
SdFile log_file;
File file1;
String fileName;
 8086480:	462a      	mov	r2, r5
 8086482:	4621      	mov	r1, r4
 8086484:	f005 fd2e 	bl	808bee4 <__aeabi_atexit>
String logFileName;
 8086488:	4631      	mov	r1, r6
 808648a:	4638      	mov	r0, r7
 808648c:	f003 fe37 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
 8086490:	4638      	mov	r0, r7
int file_started = 0;
int log_file_started = 0;

//wifi
String ssid; //wifi network name
 8086492:	4f2d      	ldr	r7, [pc, #180]	; (8086548 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1ec>)
SdFat sd;
SdFile file;
SdFile log_file;
File file1;
String fileName;
String logFileName;
 8086494:	462a      	mov	r2, r5
 8086496:	4621      	mov	r1, r4
 8086498:	f005 fd24 	bl	808bee4 <__aeabi_atexit>
int file_started = 0;
int log_file_started = 0;

//wifi
String ssid; //wifi network name
 808649c:	4631      	mov	r1, r6
 808649e:	4638      	mov	r0, r7
 80864a0:	f003 fe2d 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
 80864a4:	4638      	mov	r0, r7
String password; //wifi network password
 80864a6:	4f29      	ldr	r7, [pc, #164]	; (808654c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1f0>)
String logFileName;
int file_started = 0;
int log_file_started = 0;

//wifi
String ssid; //wifi network name
 80864a8:	462a      	mov	r2, r5
 80864aa:	4621      	mov	r1, r4
 80864ac:	f005 fd1a 	bl	808bee4 <__aeabi_atexit>
String password; //wifi network password
 80864b0:	4631      	mov	r1, r6
 80864b2:	4638      	mov	r0, r7
 80864b4:	f003 fe23 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
 80864b8:	462a      	mov	r2, r5
 80864ba:	4621      	mov	r1, r4
 80864bc:	4638      	mov	r0, r7
    //Serial.println("!:  Continuous serial output of VOC's");
    Serial.println("@   Enable/Disable Sensible-iot data push.  If enabled, time zone will be ignored - UTC will be used.");
    Serial.println("#   Enable/Disable cartopper power mode.  If enabled, absense of external power will stop cellular.");
    Serial.println("?:  Output this menu");
    Serial.println("x:  Exits this menu");
  }
 80864be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
int file_started = 0;
int log_file_started = 0;

//wifi
String ssid; //wifi network name
String password; //wifi network password
 80864c2:	f005 bd0f 	b.w	808bee4 <__aeabi_atexit>
 80864c6:	bf00      	nop
 80864c8:	200008c4 	.word	0x200008c4
 80864cc:	20000b20 	.word	0x20000b20
 80864d0:	200006f0 	.word	0x200006f0
 80864d4:	200001d0 	.word	0x200001d0
 80864d8:	08088e99 	.word	0x08088e99
 80864dc:	20000af0 	.word	0x20000af0
 80864e0:	200006f8 	.word	0x200006f8
 80864e4:	20000b7c 	.word	0x20000b7c
 80864e8:	2000022c 	.word	0x2000022c
 80864ec:	200008b8 	.word	0x200008b8
 80864f0:	20000ac0 	.word	0x20000ac0
 80864f4:	20000ac6 	.word	0x20000ac6
 80864f8:	20000ad4 	.word	0x20000ad4
 80864fc:	0808aceb 	.word	0x0808aceb
 8086500:	20000788 	.word	0x20000788
 8086504:	08089a45 	.word	0x08089a45
 8086508:	08086ac1 	.word	0x08086ac1
 808650c:	200008d4 	.word	0x200008d4
 8086510:	2000023c 	.word	0x2000023c
 8086514:	08090778 	.word	0x08090778
 8086518:	200006c0 	.word	0x200006c0
 808651c:	08080b7f 	.word	0x08080b7f
 8086520:	08092b40 	.word	0x08092b40
 8086524:	08090760 	.word	0x08090760
 8086528:	20000b88 	.word	0x20000b88
 808652c:	20000870 	.word	0x20000870
 8086530:	08092fdc 	.word	0x08092fdc
 8086534:	20000adc 	.word	0x20000adc
 8086538:	08090738 	.word	0x08090738
 808653c:	08080b81 	.word	0x08080b81
 8086540:	0808a071 	.word	0x0808a071
 8086544:	200007ac 	.word	0x200007ac
 8086548:	2000020c 	.word	0x2000020c
 808654c:	200001d8 	.word	0x200001d8

08086550 <_Z11readHIH8120v>:
        Serial1.print("&");
        sample_counter += 1;
    }
}

void readHIH8120(void){
 8086550:	b510      	push	{r4, lr}
    hih.start();
 8086552:	4c04      	ldr	r4, [pc, #16]	; (8086564 <_Z11readHIH8120v+0x14>)
 8086554:	4620      	mov	r0, r4
 8086556:	f002 fba7 	bl	8088ca8 <_ZN7HIH61XX5startEv>

    //  request an update of the humidity and temperature
    hih.update();
 808655a:	4620      	mov	r0, r4
    Serial.print("Temperature: ");
    Serial.print(hih.temperature(), 5);
    Serial.println(" C (");
    Serial.print(hih.temperature_Raw());
    Serial.println(")");*/
}
 808655c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void readHIH8120(void){
    hih.start();

    //  request an update of the humidity and temperature
    hih.update();
 8086560:	f002 bbba 	b.w	8088cd8 <_ZN7HIH61XX6updateEv>
 8086564:	200008d4 	.word	0x200008d4

08086568 <loop>:
          status_word.status_int |= 0x0004;
      }
  }
}

void loop() {
 8086568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    if(car_topper_power_en && powerCheck.getHasPower() == 0){
 808656c:	4b9e      	ldr	r3, [pc, #632]	; (80867e8 <loop+0x280>)
          status_word.status_int |= 0x0004;
      }
  }
}

void loop() {
 808656e:	b08a      	sub	sp, #40	; 0x28

    if(car_topper_power_en && powerCheck.getHasPower() == 0){
 8086570:	681b      	ldr	r3, [r3, #0]
 8086572:	b12b      	cbz	r3, 8086580 <loop+0x18>
 8086574:	4b9d      	ldr	r3, [pc, #628]	; (80867ec <loop+0x284>)
 8086576:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 808657a:	2b00      	cmp	r3, #0
 808657c:	f000 81aa 	beq.w	80868d4 <loop+0x36c>
    }
    //Serial.println("locator loop");
   // locator.loop();
    

    if(output_only_particles == 1){
 8086580:	4b9b      	ldr	r3, [pc, #620]	; (80867f0 <loop+0x288>)
 8086582:	681b      	ldr	r3, [r3, #0]
 8086584:	2b01      	cmp	r3, #1
 8086586:	d101      	bne.n	808658c <loop+0x24>
        outputParticles();
 8086588:	f7fb fc3a 	bl	8081e00 <_Z15outputParticlesv>
    }
    //read temp, press, humidity, and TVOCs
    if(debugging_enabled){
 808658c:	4c99      	ldr	r4, [pc, #612]	; (80867f4 <loop+0x28c>)
 808658e:	6823      	ldr	r3, [r4, #0]
 8086590:	b173      	cbz	r3, 80865b0 <loop+0x48>
      Serial.println("Before reading bme");
 8086592:	f005 f857 	bl	808b644 <_Z16_fetch_usbserialv>
 8086596:	4998      	ldr	r1, [pc, #608]	; (80867f8 <loop+0x290>)
 8086598:	f003 ffbb 	bl	808a512 <_ZN5Print7printlnEPKc>
      writeLogFile("before reading bme");
 808659c:	4997      	ldr	r1, [pc, #604]	; (80867fc <loop+0x294>)
 808659e:	a806      	add	r0, sp, #24
 80865a0:	f003 fdad 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
 80865a4:	a806      	add	r0, sp, #24
 80865a6:	f7fb f9ef 	bl	8081988 <_Z12writeLogFile6String>
 80865aa:	a806      	add	r0, sp, #24
 80865ac:	f003 fd60 	bl	808a070 <_ZN6StringD1Ev>
    }
    if (! bme.performReading()) {
 80865b0:	4d93      	ldr	r5, [pc, #588]	; (8086800 <loop+0x298>)
 80865b2:	4628      	mov	r0, r5
 80865b4:	f002 fac0 	bl	8088b38 <_ZN15Adafruit_BME68014performReadingEv>
 80865b8:	b978      	cbnz	r0, 80865da <loop+0x72>
      Serial.println("Failed to read BME680");
 80865ba:	f005 f843 	bl	808b644 <_Z16_fetch_usbserialv>
 80865be:	4991      	ldr	r1, [pc, #580]	; (8086804 <loop+0x29c>)
 80865c0:	f003 ffa7 	bl	808a512 <_ZN5Print7printlnEPKc>
      writeLogFile("Failed to read BME680");
 80865c4:	498f      	ldr	r1, [pc, #572]	; (8086804 <loop+0x29c>)
 80865c6:	a806      	add	r0, sp, #24
 80865c8:	f003 fd99 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
 80865cc:	a806      	add	r0, sp, #24
 80865ce:	f7fb f9db 	bl	8081988 <_Z12writeLogFile6String>
 80865d2:	a806      	add	r0, sp, #24
 80865d4:	f003 fd4c 	bl	808a070 <_ZN6StringD1Ev>
      return;
 80865d8:	e1d6      	b.n	8086988 <loop+0x420>
    }else{
      if(debugging_enabled){
 80865da:	6823      	ldr	r3, [r4, #0]
 80865dc:	b1cb      	cbz	r3, 8086612 <loop+0xaa>
        Serial.printf("Temp=%1.1f, press=%1.1f, rh=%1.1f\n\r", bme.temperature, bme.pressure/100, bme.humidity);
 80865de:	f005 f831 	bl	808b644 <_Z16_fetch_usbserialv>
 80865e2:	4606      	mov	r6, r0
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 80865e4:	68a8      	ldr	r0, [r5, #8]
 80865e6:	f005 ff33 	bl	808c450 <__aeabi_f2d>
 80865ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80865ee:	4986      	ldr	r1, [pc, #536]	; (8086808 <loop+0x2a0>)
 80865f0:	6868      	ldr	r0, [r5, #4]
 80865f2:	f006 fc8b 	bl	808cf0c <__aeabi_fdiv>
 80865f6:	f005 ff2b 	bl	808c450 <__aeabi_f2d>
 80865fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80865fe:	6828      	ldr	r0, [r5, #0]
 8086600:	f005 ff26 	bl	808c450 <__aeabi_f2d>
 8086604:	4a81      	ldr	r2, [pc, #516]	; (808680c <loop+0x2a4>)
 8086606:	e9cd 0100 	strd	r0, r1, [sp]
 808660a:	2100      	movs	r1, #0
 808660c:	4630      	mov	r0, r6
 808660e:	f004 f8b5 	bl	808a77c <_ZN5Print11printf_implEbPKcz>
      }
    }
    if(hih8120_enabled){
 8086612:	4b7f      	ldr	r3, [pc, #508]	; (8086810 <loop+0x2a8>)
 8086614:	681b      	ldr	r3, [r3, #0]
 8086616:	b10b      	cbz	r3, 808661c <loop+0xb4>
        readHIH8120();
 8086618:	f7ff ff9a 	bl	8086550 <_Z11readHIH8120v>
    }
    readGpsStream();
 808661c:	f7fb fa04 	bl	8081a28 <_Z13readGpsStreamv>


    //read CO values and apply calibration factors
    CO_float = readCO();
 8086620:	f7ff fa18 	bl	8085a54 <_Z6readCOv>
 8086624:	4b7b      	ldr	r3, [pc, #492]	; (8086814 <loop+0x2ac>)


    CO2_float = readCO2();
 8086626:	4e7c      	ldr	r6, [pc, #496]	; (8086818 <loop+0x2b0>)
    }
    readGpsStream();


    //read CO values and apply calibration factors
    CO_float = readCO();
 8086628:	6018      	str	r0, [r3, #0]


    CO2_float = readCO2();
 808662a:	f7fb f827 	bl	808167c <_Z7readCO2v>


    //correct for altitude
    float pressure_correction = bme.pressure/100;
 808662e:	4976      	ldr	r1, [pc, #472]	; (8086808 <loop+0x2a0>)

    //read CO values and apply calibration factors
    CO_float = readCO();


    CO2_float = readCO2();
 8086630:	6030      	str	r0, [r6, #0]


    //correct for altitude
    float pressure_correction = bme.pressure/100;
 8086632:	6868      	ldr	r0, [r5, #4]
 8086634:	f006 fc6a 	bl	808cf0c <__aeabi_fdiv>
    if(pressure_correction > LOW_PRESSURE_LIMIT && pressure_correction < HIGH_PRESSURE_LIMIT){
 8086638:	4973      	ldr	r1, [pc, #460]	; (8086808 <loop+0x2a0>)

    CO2_float = readCO2();


    //correct for altitude
    float pressure_correction = bme.pressure/100;
 808663a:	4607      	mov	r7, r0
    if(pressure_correction > LOW_PRESSURE_LIMIT && pressure_correction < HIGH_PRESSURE_LIMIT){
 808663c:	f006 fd6e 	bl	808d11c <__aeabi_fcmpgt>
 8086640:	4635      	mov	r5, r6
 8086642:	b1b8      	cbz	r0, 8086674 <loop+0x10c>
 8086644:	4975      	ldr	r1, [pc, #468]	; (808681c <loop+0x2b4>)
 8086646:	4638      	mov	r0, r7
 8086648:	f006 fd4a 	bl	808d0e0 <__aeabi_fcmplt>
 808664c:	b190      	cbz	r0, 8086674 <loop+0x10c>
        pressure_correction /= SEALEVELPRESSURE_HPA;
 808664e:	4974      	ldr	r1, [pc, #464]	; (8086820 <loop+0x2b8>)
 8086650:	4638      	mov	r0, r7
 8086652:	f006 fc5b 	bl	808cf0c <__aeabi_fdiv>
        if(debugging_enabled){
 8086656:	6823      	ldr	r3, [r4, #0]


    //correct for altitude
    float pressure_correction = bme.pressure/100;
    if(pressure_correction > LOW_PRESSURE_LIMIT && pressure_correction < HIGH_PRESSURE_LIMIT){
        pressure_correction /= SEALEVELPRESSURE_HPA;
 8086658:	4606      	mov	r6, r0
        if(debugging_enabled){
 808665a:	b12b      	cbz	r3, 8086668 <loop+0x100>
            Serial.printf("pressure correction factor for CO2:%1.2f\n\r", pressure_correction);
 808665c:	f004 fff2 	bl	808b644 <_Z16_fetch_usbserialv>
 8086660:	4632      	mov	r2, r6
 8086662:	4970      	ldr	r1, [pc, #448]	; (8086824 <loop+0x2bc>)
 8086664:	f7fe fe3a 	bl	80852dc <_ZN5Print6printfIIfEEEjPKcDpT_>

        }
        CO2_float *= pressure_correction;
 8086668:	6828      	ldr	r0, [r5, #0]
 808666a:	4631      	mov	r1, r6
 808666c:	f006 fb9a 	bl	808cda4 <__aeabi_fmul>
 8086670:	6028      	str	r0, [r5, #0]
 8086672:	e00a      	b.n	808668a <loop+0x122>
    }else{
        Serial.println("Error: Pressure out of range, not using pressure correction for CO2.");
 8086674:	f004 ffe6 	bl	808b644 <_Z16_fetch_usbserialv>
 8086678:	496b      	ldr	r1, [pc, #428]	; (8086828 <loop+0x2c0>)
 808667a:	f003 ff4a 	bl	808a512 <_ZN5Print7printlnEPKc>
        Serial.printf("Pressure=%1.2f\n\r", pressure_correction);
 808667e:	f004 ffe1 	bl	808b644 <_Z16_fetch_usbserialv>
 8086682:	463a      	mov	r2, r7
 8086684:	4969      	ldr	r1, [pc, #420]	; (808682c <loop+0x2c4>)
 8086686:	f7fe fe29 	bl	80852dc <_ZN5Print6printfIIfEEEjPKcDpT_>

    }


    if(ozone_enabled){
 808668a:	4b69      	ldr	r3, [pc, #420]	; (8086830 <loop+0x2c8>)
 808668c:	681b      	ldr	r3, [r3, #0]
 808668e:	b10b      	cbz	r3, 8086694 <loop+0x12c>
        readOzone();
 8086690:	f7fe ff66 	bl	8085560 <_Z9readOzonev>

    //sound_average = 0;
    //calculateAQI();
    //sound_average = readSound();
    //read PM values and apply calibration factors
    readPlantower();
 8086694:	f7fb fb70 	bl	8081d78 <_Z13readPlantowerv>

    pm_25_correction_factor = PM_25_CONSTANT_A + (PM_25_CONSTANT_B*(readHumidity()/100))/(1 - (readHumidity()/100));
 8086698:	f7fa ffa8 	bl	80815ec <_Z12readHumidityv>
 808669c:	4606      	mov	r6, r0
 808669e:	f7fa ffa5 	bl	80815ec <_Z12readHumidityv>
 80866a2:	4959      	ldr	r1, [pc, #356]	; (8086808 <loop+0x2a0>)
 80866a4:	4680      	mov	r8, r0
 80866a6:	4630      	mov	r0, r6
 80866a8:	f006 fc30 	bl	808cf0c <__aeabi_fdiv>
 80866ac:	f005 fed0 	bl	808c450 <__aeabi_f2d>
 80866b0:	a349      	add	r3, pc, #292	; (adr r3, 80867d8 <loop+0x270>)
 80866b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80866b6:	f005 ff1f 	bl	808c4f8 <__aeabi_dmul>
 80866ba:	4606      	mov	r6, r0
 80866bc:	460f      	mov	r7, r1
 80866be:	4640      	mov	r0, r8
 80866c0:	4951      	ldr	r1, [pc, #324]	; (8086808 <loop+0x2a0>)
 80866c2:	f006 fc23 	bl	808cf0c <__aeabi_fdiv>
 80866c6:	4601      	mov	r1, r0
 80866c8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80866cc:	f006 fa60 	bl	808cb90 <__aeabi_fsub>
 80866d0:	f005 febe 	bl	808c450 <__aeabi_f2d>
 80866d4:	4602      	mov	r2, r0
 80866d6:	460b      	mov	r3, r1
 80866d8:	4630      	mov	r0, r6
 80866da:	4639      	mov	r1, r7
 80866dc:	f006 f836 	bl	808c74c <__aeabi_ddiv>
 80866e0:	a33f      	add	r3, pc, #252	; (adr r3, 80867e0 <loop+0x278>)
 80866e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80866e6:	f005 fd55 	bl	808c194 <__adddf3>
 80866ea:	f006 f9fd 	bl	808cae8 <__aeabi_d2f>
 80866ee:	4d51      	ldr	r5, [pc, #324]	; (8086834 <loop+0x2cc>)
    if(debugging_enabled){
 80866f0:	6823      	ldr	r3, [r4, #0]
    //calculateAQI();
    //sound_average = readSound();
    //read PM values and apply calibration factors
    readPlantower();

    pm_25_correction_factor = PM_25_CONSTANT_A + (PM_25_CONSTANT_B*(readHumidity()/100))/(1 - (readHumidity()/100));
 80866f2:	6028      	str	r0, [r5, #0]
    if(debugging_enabled){
 80866f4:	b1b3      	cbz	r3, 8086724 <loop+0x1bc>
        Serial.printf("pm2.5 correction factor: %1.2f, %1.2f\n\r", pm_25_correction_factor, readHumidity()/100);
 80866f6:	f004 ffa5 	bl	808b644 <_Z16_fetch_usbserialv>
 80866fa:	682f      	ldr	r7, [r5, #0]
 80866fc:	4606      	mov	r6, r0
 80866fe:	f7fa ff75 	bl	80815ec <_Z12readHumidityv>
 8086702:	4941      	ldr	r1, [pc, #260]	; (8086808 <loop+0x2a0>)
 8086704:	f006 fc02 	bl	808cf0c <__aeabi_fdiv>
 8086708:	f005 fea2 	bl	808c450 <__aeabi_f2d>
 808670c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8086710:	4638      	mov	r0, r7
 8086712:	f005 fe9d 	bl	808c450 <__aeabi_f2d>
 8086716:	4a48      	ldr	r2, [pc, #288]	; (8086838 <loop+0x2d0>)
 8086718:	e9cd 0100 	strd	r0, r1, [sp]
 808671c:	2100      	movs	r1, #0
 808671e:	4630      	mov	r0, r6
 8086720:	f004 f82c 	bl	808a77c <_ZN5Print11printf_implEbPKcz>
    }
    corrected_PM_25 = PM2_5Value / pm_25_correction_factor;
 8086724:	4b45      	ldr	r3, [pc, #276]	; (808683c <loop+0x2d4>)
    corrected_PM_25 = corrected_PM_25 + PM_25_zero;
    corrected_PM_25 = corrected_PM_25 * PM_25_slope;
 8086726:	6818      	ldr	r0, [r3, #0]
 8086728:	f006 fae8 	bl	808ccfc <__aeabi_i2f>
 808672c:	6829      	ldr	r1, [r5, #0]
 808672e:	f006 fbed 	bl	808cf0c <__aeabi_fdiv>
    pm_25_correction_factor = PM_25_CONSTANT_A + (PM_25_CONSTANT_B*(readHumidity()/100))/(1 - (readHumidity()/100));
    if(debugging_enabled){
        Serial.printf("pm2.5 correction factor: %1.2f, %1.2f\n\r", pm_25_correction_factor, readHumidity()/100);
    }
    corrected_PM_25 = PM2_5Value / pm_25_correction_factor;
    corrected_PM_25 = corrected_PM_25 + PM_25_zero;
 8086732:	4b43      	ldr	r3, [pc, #268]	; (8086840 <loop+0x2d8>)
    corrected_PM_25 = corrected_PM_25 * PM_25_slope;
 8086734:	4605      	mov	r5, r0
 8086736:	6818      	ldr	r0, [r3, #0]
 8086738:	f006 fae0 	bl	808ccfc <__aeabi_i2f>
 808673c:	4601      	mov	r1, r0
 808673e:	4628      	mov	r0, r5
 8086740:	f006 fa28 	bl	808cb94 <__addsf3>
 8086744:	4b3f      	ldr	r3, [pc, #252]	; (8086844 <loop+0x2dc>)
 8086746:	6819      	ldr	r1, [r3, #0]
 8086748:	f006 fb2c 	bl	808cda4 <__aeabi_fmul>
 808674c:	4b3e      	ldr	r3, [pc, #248]	; (8086848 <loop+0x2e0>)
 808674e:	6018      	str	r0, [r3, #0]

    //getEspWifiStatus();
    outputDataToESP();
 8086750:	f7fd fe92 	bl	8084478 <_Z15outputDataToESPv>

    sample_counter = ++sample_counter;
 8086754:	4a3d      	ldr	r2, [pc, #244]	; (808684c <loop+0x2e4>)
 8086756:	6813      	ldr	r3, [r2, #0]
 8086758:	3301      	adds	r3, #1
    if(sample_counter == 99)    {
 808675a:	2b63      	cmp	r3, #99	; 0x63
          sample_counter = 0;
 808675c:	bf08      	it	eq
 808675e:	2300      	moveq	r3, #0
 8086760:	6013      	str	r3, [r2, #0]
    }

    if (Serial.available() > 0) {
 8086762:	f004 ff6f 	bl	808b644 <_Z16_fetch_usbserialv>
 8086766:	6803      	ldr	r3, [r0, #0]
 8086768:	691b      	ldr	r3, [r3, #16]
 808676a:	4798      	blx	r3
 808676c:	2800      	cmp	r0, #0
 808676e:	dd1c      	ble.n	80867aa <loop+0x242>
        // read the incoming byte:
        incomingByte = Serial.read();
 8086770:	f004 ff68 	bl	808b644 <_Z16_fetch_usbserialv>
 8086774:	6803      	ldr	r3, [r0, #0]
 8086776:	4d36      	ldr	r5, [pc, #216]	; (8086850 <loop+0x2e8>)
 8086778:	695b      	ldr	r3, [r3, #20]
 808677a:	4798      	blx	r3
        if(debugging_enabled){
 808677c:	6823      	ldr	r3, [r4, #0]
          sample_counter = 0;
    }

    if (Serial.available() > 0) {
        // read the incoming byte:
        incomingByte = Serial.read();
 808677e:	7028      	strb	r0, [r5, #0]
        if(debugging_enabled){
 8086780:	b14b      	cbz	r3, 8086796 <loop+0x22e>
            Serial.print("incomming byte:");
 8086782:	f004 ff5f 	bl	808b644 <_Z16_fetch_usbserialv>
 8086786:	4933      	ldr	r1, [pc, #204]	; (8086854 <loop+0x2ec>)
 8086788:	f003 feb0 	bl	808a4ec <_ZN5Print5printEPKc>
            Serial.println(incomingByte);
 808678c:	f004 ff5a 	bl	808b644 <_Z16_fetch_usbserialv>
 8086790:	7829      	ldrb	r1, [r5, #0]
 8086792:	f003 fec8 	bl	808a526 <_ZN5Print7printlnEc>

        }
        Serial.println(incomingByte);
 8086796:	f004 ff55 	bl	808b644 <_Z16_fetch_usbserialv>
 808679a:	7829      	ldrb	r1, [r5, #0]
 808679c:	f003 fec3 	bl	808a526 <_ZN5Print7printlnEc>
        if(incomingByte == 'm'){
 80867a0:	782b      	ldrb	r3, [r5, #0]
 80867a2:	2b6d      	cmp	r3, #109	; 0x6d
 80867a4:	d101      	bne.n	80867aa <loop+0x242>
          serialMenu();
 80867a6:	f7ff f997 	bl	8085ad8 <_Z10serialMenuv>
        }
    }

    if(serial_cellular_enabled){
 80867aa:	4b2b      	ldr	r3, [pc, #172]	; (8086858 <loop+0x2f0>)
 80867ac:	681b      	ldr	r3, [r3, #0]
 80867ae:	2b00      	cmp	r3, #0
 80867b0:	d058      	beq.n	8086864 <loop+0x2fc>
        status_word.status_int |= 0x01;
 80867b2:	4a2a      	ldr	r2, [pc, #168]	; (808685c <loop+0x2f4>)
 80867b4:	8813      	ldrh	r3, [r2, #0]
 80867b6:	f043 0301 	orr.w	r3, r3, #1
 80867ba:	8013      	strh	r3, [r2, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80867bc:	f003 f8a4 	bl	8089908 <spark_cloud_flag_connected>
        //Serial.println("Cellular is enabled.");
      if (Particle.connected() == false && tried_cellular_connect == false) {
 80867c0:	2800      	cmp	r0, #0
 80867c2:	f040 808a 	bne.w	80868da <loop+0x372>
 80867c6:	4b26      	ldr	r3, [pc, #152]	; (8086860 <loop+0x2f8>)
 80867c8:	781a      	ldrb	r2, [r3, #0]
 80867ca:	2a00      	cmp	r2, #0
 80867cc:	f040 8085 	bne.w	80868da <loop+0x372>
 80867d0:	e092      	b.n	80868f8 <loop+0x390>
 80867d2:	bf00      	nop
 80867d4:	f3af 8000 	nop.w
 80867d8:	b4395810 	.word	0xb4395810
 80867dc:	3fbe76c8 	.word	0x3fbe76c8
 80867e0:	70a3d70a 	.word	0x70a3d70a
 80867e4:	3ff30a3d 	.word	0x3ff30a3d
 80867e8:	2000021c 	.word	0x2000021c
 80867ec:	20000788 	.word	0x20000788
 80867f0:	200007e0 	.word	0x200007e0
 80867f4:	20000af8 	.word	0x20000af8
 80867f8:	08092915 	.word	0x08092915
 80867fc:	08092928 	.word	0x08092928
 8086800:	200006f8 	.word	0x200006f8
 8086804:	08090b47 	.word	0x08090b47
 8086808:	42c80000 	.word	0x42c80000
 808680c:	080927bb 	.word	0x080927bb
 8086810:	200001f4 	.word	0x200001f4
 8086814:	20000b04 	.word	0x20000b04
 8086818:	20000228 	.word	0x20000228
 808681c:	44bb8000 	.word	0x44bb8000
 8086820:	447d5000 	.word	0x447d5000
 8086824:	0809293b 	.word	0x0809293b
 8086828:	08092966 	.word	0x08092966
 808682c:	080929ab 	.word	0x080929ab
 8086830:	20000ab8 	.word	0x20000ab8
 8086834:	20000964 	.word	0x20000964
 8086838:	080929bc 	.word	0x080929bc
 808683c:	20000a28 	.word	0x20000a28
 8086840:	2000077c 	.word	0x2000077c
 8086844:	200007dc 	.word	0x200007dc
 8086848:	200009a0 	.word	0x200009a0
 808684c:	20000774 	.word	0x20000774
 8086850:	20000780 	.word	0x20000780
 8086854:	080929e4 	.word	0x080929e4
 8086858:	20000224 	.word	0x20000224
 808685c:	20000b74 	.word	0x20000b74
 8086860:	20000afc 	.word	0x20000afc
 8086864:	f003 f850 	bl	8089908 <spark_cloud_flag_connected>
        }
        tried_cellular_connect = false;
      }
    }else{
        //Serial.println("Cellular is disabled.");
      if (Particle.connected() == true) {
 8086868:	b198      	cbz	r0, 8086892 <loop+0x32a>
          if(debugging_enabled){
 808686a:	6823      	ldr	r3, [r4, #0]
 808686c:	b173      	cbz	r3, 808688c <loop+0x324>
            Serial.println("Disconnecting from cellular network");
 808686e:	f004 fee9 	bl	808b644 <_Z16_fetch_usbserialv>
 8086872:	4947      	ldr	r1, [pc, #284]	; (8086990 <loop+0x428>)
 8086874:	f003 fe4d 	bl	808a512 <_ZN5Print7printlnEPKc>
            writeLogFile("Disconnecting from cellular network");
 8086878:	4945      	ldr	r1, [pc, #276]	; (8086990 <loop+0x428>)
 808687a:	a806      	add	r0, sp, #24
 808687c:	f003 fc3f 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
 8086880:	a806      	add	r0, sp, #24
 8086882:	f7fb f881 	bl	8081988 <_Z12writeLogFile6String>
 8086886:	a806      	add	r0, sp, #24
 8086888:	f003 fbf2 	bl	808a070 <_ZN6StringD1Ev>
          }
          Cellular.off();
 808688c:	4841      	ldr	r0, [pc, #260]	; (8086994 <loop+0x42c>)
 808688e:	f7fa f9f0 	bl	8080c72 <_ZN5spark13CellularClass3offEv>
      }
    }

    //check power
    powerCheck.loop();
 8086892:	4d41      	ldr	r5, [pc, #260]	; (8086998 <loop+0x430>)
 8086894:	4628      	mov	r0, r5
 8086896:	f000 f949 	bl	8086b2c <_ZN10PowerCheck4loopEv>

	//Serial.printf("hasPower=%d hasBattery=%d isCharging=%d\n\r", powerCheck.getHasPower(), powerCheck.getHasBattery(), powerCheck.getIsCharging());
    if((battery_threshold_enable == 1) && (fuel.getSoC() < BATTERY_THRESHOLD) && (powerCheck.getHasPower() == 0)){
 808689a:	4b40      	ldr	r3, [pc, #256]	; (808699c <loop+0x434>)
 808689c:	681b      	ldr	r3, [r3, #0]
 808689e:	2b01      	cmp	r3, #1
 80868a0:	d10a      	bne.n	80868b8 <loop+0x350>
 80868a2:	483f      	ldr	r0, [pc, #252]	; (80869a0 <loop+0x438>)
 80868a4:	f004 fa52 	bl	808ad4c <_ZN9FuelGauge6getSoCEv>
 80868a8:	493e      	ldr	r1, [pc, #248]	; (80869a4 <loop+0x43c>)
 80868aa:	f006 fc19 	bl	808d0e0 <__aeabi_fcmplt>
 80868ae:	b118      	cbz	r0, 80868b8 <loop+0x350>
 80868b0:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 80868b4:	2b00      	cmp	r3, #0
 80868b6:	d05f      	beq.n	8086978 <loop+0x410>
        Serial.println("Going to sleep because battery is below 20% charge");
        goToSleepBattery();
    }

    if(co2_calibration_timer){
 80868b8:	4a3b      	ldr	r2, [pc, #236]	; (80869a8 <loop+0x440>)
 80868ba:	6813      	ldr	r3, [r2, #0]
 80868bc:	2b00      	cmp	r3, #0
 80868be:	d063      	beq.n	8086988 <loop+0x420>
        co2_calibration_timer--;
 80868c0:	3b01      	subs	r3, #1
 80868c2:	6013      	str	r3, [r2, #0]
        if(debugging_enabled){
 80868c4:	6823      	ldr	r3, [r4, #0]
 80868c6:	2b00      	cmp	r3, #0
 80868c8:	d05e      	beq.n	8086988 <loop+0x420>
            t6713.readStatus(1);
 80868ca:	2101      	movs	r1, #1
 80868cc:	4837      	ldr	r0, [pc, #220]	; (80869ac <loop+0x444>)
 80868ce:	f000 fb67 	bl	8086fa0 <_ZN13Telaire_T671310readStatusEi>
 80868d2:	e059      	b.n	8086988 <loop+0x420>

void loop() {

    if(car_topper_power_en && powerCheck.getHasPower() == 0){
        
        goToSleepBattery();
 80868d4:	f7fb fc16 	bl	8082104 <_Z16goToSleepBatteryv>
 80868d8:	e652      	b.n	8086580 <loop+0x18>
 80868da:	f003 f815 	bl	8089908 <spark_cloud_flag_connected>
          Particle.connect();
          if(debugging_enabled){
            Serial.println("After particle connect");
            writeLogFile("After particle connect");
          }
      }else if(Particle.connected() == true){  //this means that it is already connected
 80868de:	2800      	cmp	r0, #0
 80868e0:	d0d7      	beq.n	8086892 <loop+0x32a>
        if(debugging_enabled){
 80868e2:	6823      	ldr	r3, [r4, #0]
 80868e4:	b123      	cbz	r3, 80868f0 <loop+0x388>
          Serial.println("setting tried_cellular_connect to false");
 80868e6:	f004 fead 	bl	808b644 <_Z16_fetch_usbserialv>
 80868ea:	4931      	ldr	r1, [pc, #196]	; (80869b0 <loop+0x448>)
 80868ec:	f003 fe11 	bl	808a512 <_ZN5Print7printlnEPKc>
        }
        tried_cellular_connect = false;
 80868f0:	4b30      	ldr	r3, [pc, #192]	; (80869b4 <loop+0x44c>)
 80868f2:	2200      	movs	r2, #0
 80868f4:	701a      	strb	r2, [r3, #0]
 80868f6:	e7cc      	b.n	8086892 <loop+0x32a>

    if(serial_cellular_enabled){
        status_word.status_int |= 0x01;
        //Serial.println("Cellular is enabled.");
      if (Particle.connected() == false && tried_cellular_connect == false) {
        tried_cellular_connect = true;
 80868f8:	2201      	movs	r2, #1
 80868fa:	701a      	strb	r2, [r3, #0]
          if(debugging_enabled){
 80868fc:	6823      	ldr	r3, [r4, #0]
 80868fe:	b173      	cbz	r3, 808691e <loop+0x3b6>
            Serial.println("Connecting to cellular network");
 8086900:	f004 fea0 	bl	808b644 <_Z16_fetch_usbserialv>
 8086904:	492c      	ldr	r1, [pc, #176]	; (80869b8 <loop+0x450>)
 8086906:	f003 fe04 	bl	808a512 <_ZN5Print7printlnEPKc>
            writeLogFile("Connecting to cellular network");
 808690a:	492b      	ldr	r1, [pc, #172]	; (80869b8 <loop+0x450>)
 808690c:	a806      	add	r0, sp, #24
 808690e:	f003 fbf6 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
 8086912:	a806      	add	r0, sp, #24
 8086914:	f7fb f838 	bl	8081988 <_Z12writeLogFile6String>
 8086918:	a806      	add	r0, sp, #24
 808691a:	f003 fba9 	bl	808a070 <_ZN6StringD1Ev>

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 808691e:	481d      	ldr	r0, [pc, #116]	; (8086994 <loop+0x42c>)
 8086920:	2300      	movs	r3, #0
 8086922:	461a      	mov	r2, r3
 8086924:	4619      	mov	r1, r3
 8086926:	6840      	ldr	r0, [r0, #4]
 8086928:	f002 ffa6 	bl	8089878 <network_on>
          }
          Cellular.on();
          if(debugging_enabled){
 808692c:	6823      	ldr	r3, [r4, #0]
 808692e:	b173      	cbz	r3, 808694e <loop+0x3e6>
            Serial.println("after cellularOn");
 8086930:	f004 fe88 	bl	808b644 <_Z16_fetch_usbserialv>
 8086934:	4921      	ldr	r1, [pc, #132]	; (80869bc <loop+0x454>)
 8086936:	f003 fdec 	bl	808a512 <_ZN5Print7printlnEPKc>
            writeLogFile("After cellularOn");
 808693a:	4921      	ldr	r1, [pc, #132]	; (80869c0 <loop+0x458>)
 808693c:	a806      	add	r0, sp, #24
 808693e:	f003 fbde 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
 8086942:	a806      	add	r0, sp, #24
 8086944:	f7fb f820 	bl	8081988 <_Z12writeLogFile6String>
 8086948:	a806      	add	r0, sp, #24
 808694a:	f003 fb91 	bl	808a070 <_ZN6StringD1Ev>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 808694e:	f002 ffd3 	bl	80898f8 <spark_cloud_flag_connect>
          }
          Particle.connect();
          if(debugging_enabled){
 8086952:	6823      	ldr	r3, [r4, #0]
 8086954:	2b00      	cmp	r3, #0
 8086956:	d09c      	beq.n	8086892 <loop+0x32a>
            Serial.println("After particle connect");
 8086958:	f004 fe74 	bl	808b644 <_Z16_fetch_usbserialv>
 808695c:	4919      	ldr	r1, [pc, #100]	; (80869c4 <loop+0x45c>)
 808695e:	f003 fdd8 	bl	808a512 <_ZN5Print7printlnEPKc>
            writeLogFile("After particle connect");
 8086962:	4918      	ldr	r1, [pc, #96]	; (80869c4 <loop+0x45c>)
 8086964:	a806      	add	r0, sp, #24
 8086966:	f003 fbca 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
 808696a:	a806      	add	r0, sp, #24
 808696c:	f7fb f80c 	bl	8081988 <_Z12writeLogFile6String>
 8086970:	a806      	add	r0, sp, #24
 8086972:	f003 fb7d 	bl	808a070 <_ZN6StringD1Ev>
 8086976:	e78c      	b.n	8086892 <loop+0x32a>
    //check power
    powerCheck.loop();

	//Serial.printf("hasPower=%d hasBattery=%d isCharging=%d\n\r", powerCheck.getHasPower(), powerCheck.getHasBattery(), powerCheck.getIsCharging());
    if((battery_threshold_enable == 1) && (fuel.getSoC() < BATTERY_THRESHOLD) && (powerCheck.getHasPower() == 0)){
        Serial.println("Going to sleep because battery is below 20% charge");
 8086978:	f004 fe64 	bl	808b644 <_Z16_fetch_usbserialv>
 808697c:	4912      	ldr	r1, [pc, #72]	; (80869c8 <loop+0x460>)
 808697e:	f003 fdc8 	bl	808a512 <_ZN5Print7printlnEPKc>
        goToSleepBattery();
 8086982:	f7fb fbbf 	bl	8082104 <_Z16goToSleepBatteryv>
 8086986:	e797      	b.n	80868b8 <loop+0x350>
        if(debugging_enabled){
            t6713.readStatus(1);
        }
    }

}
 8086988:	b00a      	add	sp, #40	; 0x28
 808698a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808698e:	bf00      	nop
 8086990:	08092a74 	.word	0x08092a74
 8086994:	20000f64 	.word	0x20000f64
 8086998:	20000788 	.word	0x20000788
 808699c:	20000b78 	.word	0x20000b78
 80869a0:	200008b8 	.word	0x200008b8
 80869a4:	41a00000 	.word	0x41a00000
 80869a8:	20000b68 	.word	0x20000b68
 80869ac:	20000b7c 	.word	0x20000b7c
 80869b0:	08092a4c 	.word	0x08092a4c
 80869b4:	20000afc 	.word	0x20000afc
 80869b8:	080929f4 	.word	0x080929f4
 80869bc:	08092a13 	.word	0x08092a13
 80869c0:	08092a24 	.word	0x08092a24
 80869c4:	08092a35 	.word	0x08092a35
 80869c8:	08092a98 	.word	0x08092a98

080869cc <_ZN8LMP91000C1Ev>:
#include "LMP91000.h"

LMP91000::LMP91000() {

}
 80869cc:	4770      	bx	lr

080869ce <_ZN8LMP910004readEh>:

      // read back the value of the register
      return read(reg);
}

uint8_t LMP91000::read(uint8_t reg){
 80869ce:	b510      	push	{r4, lr}
 80869d0:	460c      	mov	r4, r1
      //Serial.println("In read func");
      uint8_t chr = 0;
      Wire.beginTransmission(LMP91000_I2C_ADDRESS);           // START+SLA+W
 80869d2:	f005 fa47 	bl	808be64 <_Z19__fetch_global_Wirev>
 80869d6:	2148      	movs	r1, #72	; 0x48
 80869d8:	f005 f81a 	bl	808ba10 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(reg);                                        // REG
 80869dc:	f005 fa42 	bl	808be64 <_Z19__fetch_global_Wirev>
 80869e0:	6803      	ldr	r3, [r0, #0]
 80869e2:	4621      	mov	r1, r4
 80869e4:	689b      	ldr	r3, [r3, #8]
 80869e6:	4798      	blx	r3
      //delay(200);
      Wire.endTransmission(false);                            // REP START
 80869e8:	f005 fa3c 	bl	808be64 <_Z19__fetch_global_Wirev>
 80869ec:	2100      	movs	r1, #0
 80869ee:	f005 f812 	bl	808ba16 <_ZN7TwoWire15endTransmissionEh>
      //Serial.println("after end transmission");
      Wire.requestFrom(LMP91000_I2C_ADDRESS, 1, true);        // SLA+R
 80869f2:	f005 fa37 	bl	808be64 <_Z19__fetch_global_Wirev>
 80869f6:	2301      	movs	r3, #1
 80869f8:	461a      	mov	r2, r3
 80869fa:	2148      	movs	r1, #72	; 0x48
 80869fc:	f004 ffff 	bl	808b9fe <_ZN7TwoWire11requestFromEiii>
      if(Wire.available()){
 8086a00:	f005 fa30 	bl	808be64 <_Z19__fetch_global_Wirev>
 8086a04:	6803      	ldr	r3, [r0, #0]
 8086a06:	691b      	ldr	r3, [r3, #16]
 8086a08:	4798      	blx	r3
 8086a0a:	b128      	cbz	r0, 8086a18 <_ZN8LMP910004readEh+0x4a>
            chr = Wire.read();                                // DATA
 8086a0c:	f005 fa2a 	bl	808be64 <_Z19__fetch_global_Wirev>
 8086a10:	6803      	ldr	r3, [r0, #0]
 8086a12:	695b      	ldr	r3, [r3, #20]
 8086a14:	4798      	blx	r3
 8086a16:	b2c0      	uxtb	r0, r0
      }

      return chr;
}
 8086a18:	bd10      	pop	{r4, pc}

08086a1a <_ZN8LMP910005writeEhh>:

LMP91000::LMP91000() {

}

uint8_t LMP91000::write(uint8_t reg, uint8_t data) {
 8086a1a:	b570      	push	{r4, r5, r6, lr}
 8086a1c:	4616      	mov	r6, r2
 8086a1e:	460c      	mov	r4, r1
 8086a20:	4605      	mov	r5, r0

      Wire.beginTransmission(LMP91000_I2C_ADDRESS);           // START+SLA+W
 8086a22:	f005 fa1f 	bl	808be64 <_Z19__fetch_global_Wirev>
 8086a26:	2148      	movs	r1, #72	; 0x48
 8086a28:	f004 fff2 	bl	808ba10 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(reg);                                        // REG
 8086a2c:	f005 fa1a 	bl	808be64 <_Z19__fetch_global_Wirev>
 8086a30:	6803      	ldr	r3, [r0, #0]
 8086a32:	4621      	mov	r1, r4
 8086a34:	689b      	ldr	r3, [r3, #8]
 8086a36:	4798      	blx	r3
      Wire.write(data);                                       // DATA
 8086a38:	f005 fa14 	bl	808be64 <_Z19__fetch_global_Wirev>
 8086a3c:	6803      	ldr	r3, [r0, #0]
 8086a3e:	4631      	mov	r1, r6
 8086a40:	689b      	ldr	r3, [r3, #8]
 8086a42:	4798      	blx	r3
      Wire.endTransmission(true); // generate stop condition  // STOP
 8086a44:	f005 fa0e 	bl	808be64 <_Z19__fetch_global_Wirev>
 8086a48:	2101      	movs	r1, #1
 8086a4a:	f004 ffe4 	bl	808ba16 <_ZN7TwoWire15endTransmissionEh>

      // read back the value of the register
      return read(reg);
 8086a4e:	4621      	mov	r1, r4
 8086a50:	4628      	mov	r0, r5
}
 8086a52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      Wire.write(reg);                                        // REG
      Wire.write(data);                                       // DATA
      Wire.endTransmission(true); // generate stop condition  // STOP

      // read back the value of the register
      return read(reg);
 8086a56:	f7ff bfba 	b.w	80869ce <_ZN8LMP910004readEh>

08086a5a <_ZN8LMP910006statusEv>:

      return chr;
}

uint8_t LMP91000::status(void) {
      return read(LMP91000_STATUS_REG);
 8086a5a:	2100      	movs	r1, #0
 8086a5c:	f7ff bfb7 	b.w	80869ce <_ZN8LMP910004readEh>

08086a60 <_ZN8LMP910004lockEv>:
}

uint8_t LMP91000::lock(){ // this is the default state
      return write(LMP91000_LOCK_REG, LMP91000_WRITE_LOCK);
 8086a60:	2201      	movs	r2, #1
 8086a62:	4611      	mov	r1, r2
 8086a64:	f7ff bfd9 	b.w	8086a1a <_ZN8LMP910005writeEhh>

08086a68 <_ZN8LMP910006unlockEv>:
}

uint8_t LMP91000::unlock(){
      return write(LMP91000_LOCK_REG, LMP91000_WRITE_UNLOCK);
 8086a68:	2200      	movs	r2, #0
 8086a6a:	2101      	movs	r1, #1
 8086a6c:	f7ff bfd5 	b.w	8086a1a <_ZN8LMP910005writeEhh>

08086a70 <_ZN8LMP910009configureEhhh>:
}

uint8_t LMP91000::configure(uint8_t _tiacn, uint8_t _refcn, uint8_t _modecn){
 8086a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8086a74:	4604      	mov	r4, r0
 8086a76:	4688      	mov	r8, r1
 8086a78:	4617      	mov	r7, r2
 8086a7a:	461e      	mov	r6, r3

      if(status() == LMP91000_READY){
 8086a7c:	f7ff ffed 	bl	8086a5a <_ZN8LMP910006statusEv>
 8086a80:	2801      	cmp	r0, #1
 8086a82:	4605      	mov	r5, r0
 8086a84:	d115      	bne.n	8086ab2 <_ZN8LMP910009configureEhhh+0x42>
            unlock();
 8086a86:	4620      	mov	r0, r4
 8086a88:	f7ff ffee 	bl	8086a68 <_ZN8LMP910006unlockEv>
            write(LMP91000_TIACN_REG, _tiacn);
 8086a8c:	4642      	mov	r2, r8
 8086a8e:	2110      	movs	r1, #16
 8086a90:	4620      	mov	r0, r4
 8086a92:	f7ff ffc2 	bl	8086a1a <_ZN8LMP910005writeEhh>
            write(LMP91000_REFCN_REG, _refcn);
 8086a96:	463a      	mov	r2, r7
 8086a98:	2111      	movs	r1, #17
 8086a9a:	4620      	mov	r0, r4
 8086a9c:	f7ff ffbd 	bl	8086a1a <_ZN8LMP910005writeEhh>
            write(LMP91000_MODECN_REG, _modecn);
 8086aa0:	4632      	mov	r2, r6
 8086aa2:	2112      	movs	r1, #18
 8086aa4:	4620      	mov	r0, r4
 8086aa6:	f7ff ffb8 	bl	8086a1a <_ZN8LMP910005writeEhh>
            lock();
 8086aaa:	4620      	mov	r0, r4
 8086aac:	f7ff ffd8 	bl	8086a60 <_ZN8LMP910004lockEv>
            return 1;
 8086ab0:	e000      	b.n	8086ab4 <_ZN8LMP910009configureEhhh+0x44>
      }
      return 0;
 8086ab2:	2500      	movs	r5, #0
}
 8086ab4:	4628      	mov	r0, r5
 8086ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08086aba <_GLOBAL__sub_I__ZN8LMP91000C2Ev>:
 8086aba:	f002 bc5f 	b.w	808937c <HAL_Pin_Map>
	...

08086ac0 <_ZN10PowerCheckD1Ev>:
#include "PowerCheck.h"

PowerCheck::PowerCheck() {
}

PowerCheck::~PowerCheck() {
 8086ac0:	b510      	push	{r4, lr}
 8086ac2:	4604      	mov	r4, r0
 8086ac4:	4b03      	ldr	r3, [pc, #12]	; (8086ad4 <_ZN10PowerCheckD1Ev+0x14>)
 8086ac6:	f840 3b14 	str.w	r3, [r0], #20
 8086aca:	f002 ffbb 	bl	8089a44 <_ZN4PMICD1Ev>
}
 8086ace:	4620      	mov	r0, r4
 8086ad0:	bd10      	pop	{r4, pc}
 8086ad2:	bf00      	nop
 8086ad4:	08092ad4 	.word	0x08092ad4

08086ad8 <_ZN10PowerCheckD0Ev>:
#include "PowerCheck.h"

PowerCheck::PowerCheck() {
}

PowerCheck::~PowerCheck() {
 8086ad8:	b510      	push	{r4, lr}
 8086ada:	4604      	mov	r4, r0
}
 8086adc:	f7ff fff0 	bl	8086ac0 <_ZN10PowerCheckD1Ev>
 8086ae0:	4620      	mov	r0, r4
 8086ae2:	2124      	movs	r1, #36	; 0x24
 8086ae4:	f005 fa03 	bl	808beee <_ZdlPvj>
 8086ae8:	4620      	mov	r0, r4
 8086aea:	bd10      	pop	{r4, pc}

08086aec <_ZN10PowerCheckC1Ev>:
#include "PowerCheck.h"

PowerCheck::PowerCheck() {
 8086aec:	b538      	push	{r3, r4, r5, lr}
 8086aee:	4604      	mov	r4, r0
 8086af0:	4b0d      	ldr	r3, [pc, #52]	; (8086b28 <_ZN10PowerCheckC1Ev+0x3c>)
 8086af2:	2500      	movs	r5, #0
 8086af4:	6003      	str	r3, [r0, #0]
 8086af6:	2332      	movs	r3, #50	; 0x32
 8086af8:	6043      	str	r3, [r0, #4]
 8086afa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8086afe:	6083      	str	r3, [r0, #8]
 8086b00:	60c5      	str	r5, [r0, #12]
 8086b02:	6105      	str	r5, [r0, #16]
 8086b04:	4629      	mov	r1, r5
 8086b06:	3014      	adds	r0, #20
 8086b08:	f002 ff8d 	bl	8089a26 <_ZN4PMICC1Eb>
 8086b0c:	2301      	movs	r3, #1
 8086b0e:	61a5      	str	r5, [r4, #24]
 8086b10:	61e5      	str	r5, [r4, #28]
 8086b12:	f884 5020 	strb.w	r5, [r4, #32]
 8086b16:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
 8086b1a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8086b1e:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
}
 8086b22:	4620      	mov	r0, r4
 8086b24:	bd38      	pop	{r3, r4, r5, pc}
 8086b26:	bf00      	nop
 8086b28:	08092ad4 	.word	0x08092ad4

08086b2c <_ZN10PowerCheck4loopEv>:

PowerCheck::~PowerCheck() {
}

void PowerCheck::loop() {
 8086b2c:	b510      	push	{r4, lr}
 8086b2e:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8086b30:	f002 fcd4 	bl	80894dc <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastFastCheck >= FAST_CHECK_INTERVAL_MS) {
 8086b34:	68e3      	ldr	r3, [r4, #12]
 8086b36:	1ac0      	subs	r0, r0, r3
 8086b38:	6863      	ldr	r3, [r4, #4]
 8086b3a:	4298      	cmp	r0, r3
 8086b3c:	d31f      	bcc.n	8086b7e <_ZN10PowerCheck4loopEv+0x52>
 8086b3e:	f002 fccd 	bl	80894dc <HAL_Timer_Get_Milli_Seconds>
		// For reasons explained in greater detail we need to check the system status register frequently.
		// But not too frequently, because it does use some system resources to communicate over I2C.
		// An interval of 50 milliseconds, or 20 times per second, seems about right.
		// Setting the interval to 100 milliseconds causes it to miss the condition looked for below sometimes.

		lastFastCheck = millis();
 8086b42:	60e0      	str	r0, [r4, #12]

		byte systemStatus = pmic.getSystemStatus();
 8086b44:	f104 0014 	add.w	r0, r4, #20
 8086b48:	f002 ffc7 	bl	8089ada <_ZN4PMIC15getSystemStatusEv>
		if ((systemStatus & 0x04) != 0) {
 8086b4c:	f000 0304 	and.w	r3, r0, #4
 8086b50:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8086b54:	b173      	cbz	r3, 8086b74 <_ZN10PowerCheck4loopEv+0x48>
			// Bit 5 CHRG_STAT[1] R
			// Bit 4 CHRG_STAT[0] R
			// 00 – Not Charging, 01 – Pre-charge (<VBATLOWV), 10 – Fast Charging, 11 – Charge Termination Done
			byte chrgStat = (systemStatus >> 4) & 0x3;

			if (chrgStat != lastChrgStat) {
 8086b56:	f894 3020 	ldrb.w	r3, [r4, #32]
			// (It works similarly for a USB charger, except it's 0x24 and 0x34).

			// Bit 5 CHRG_STAT[1] R
			// Bit 4 CHRG_STAT[0] R
			// 00 – Not Charging, 01 – Pre-charge (<VBATLOWV), 10 – Fast Charging, 11 – Charge Termination Done
			byte chrgStat = (systemStatus >> 4) & 0x3;
 8086b5a:	f3c0 1001 	ubfx	r0, r0, #4, #2

			if (chrgStat != lastChrgStat) {
 8086b5e:	4283      	cmp	r3, r0
				// Here's where we check to see if the charging status changes. When there's no battery present
				// it changes a lot between fast charging and charge termination done, but since we're polling
				// here instead of using interrupts, we have to poll frequently enough to see states.
				// (The BQ24195 power manager controller is connected to BATT_INT_PC13, but accessing that
				// interrupt from user code is a pain, so I just poll here.)
				changeCount++;
 8086b60:	bf1f      	itttt	ne
 8086b62:	69e3      	ldrne	r3, [r4, #28]
				lastChrgStat = chrgStat;
 8086b64:	f884 0020 	strbne.w	r0, [r4, #32]
				// Here's where we check to see if the charging status changes. When there's no battery present
				// it changes a lot between fast charging and charge termination done, but since we're polling
				// here instead of using interrupts, we have to poll frequently enough to see states.
				// (The BQ24195 power manager controller is connected to BATT_INT_PC13, but accessing that
				// interrupt from user code is a pain, so I just poll here.)
				changeCount++;
 8086b68:	3301      	addne	r3, #1
 8086b6a:	61e3      	strne	r3, [r4, #28]
				lastChrgStat = chrgStat;
			}

			// We have power (USB or VIN)
			hasPower = true;
 8086b6c:	2301      	movs	r3, #1
 8086b6e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 8086b72:	e001      	b.n	8086b78 <_ZN10PowerCheck4loopEv+0x4c>
			// 0x34 (Charge Termination Done, Power Good)
			// It does not seem to be possible to tell the difference between VIN and a USB charger
		}
		else {
			// Power good is false, so that means we must be running off battery
			hasPower = false;
 8086b74:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
		}

		checkCount++;
 8086b78:	69a3      	ldr	r3, [r4, #24]
 8086b7a:	3301      	adds	r3, #1
 8086b7c:	61a3      	str	r3, [r4, #24]
 8086b7e:	f002 fcad 	bl	80894dc <HAL_Timer_Get_Milli_Seconds>
	}
	if (millis() - lastSlowCheck > SLOW_CHECK_INTERVAL_MS) {
 8086b82:	6923      	ldr	r3, [r4, #16]
 8086b84:	1ac0      	subs	r0, r0, r3
 8086b86:	68a3      	ldr	r3, [r4, #8]
 8086b88:	4298      	cmp	r0, r3
 8086b8a:	d91c      	bls.n	8086bc6 <_ZN10PowerCheck4loopEv+0x9a>
 8086b8c:	f002 fca6 	bl	80894dc <HAL_Timer_Get_Milli_Seconds>
		lastSlowCheck = millis();

		// Normally we get a checkCount of 36 or so, and a changeCount of 18 when there's no battery
		hasBattery = ! ((checkCount > 10) && (changeCount > (checkCount / 4)));
 8086b90:	69a3      	ldr	r3, [r4, #24]
		}

		checkCount++;
	}
	if (millis() - lastSlowCheck > SLOW_CHECK_INTERVAL_MS) {
		lastSlowCheck = millis();
 8086b92:	6120      	str	r0, [r4, #16]

		// Normally we get a checkCount of 36 or so, and a changeCount of 18 when there's no battery
		hasBattery = ! ((checkCount > 10) && (changeCount > (checkCount / 4)));
 8086b94:	2b0a      	cmp	r3, #10
 8086b96:	dd06      	ble.n	8086ba6 <_ZN10PowerCheck4loopEv+0x7a>
 8086b98:	69e2      	ldr	r2, [r4, #28]
 8086b9a:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 8086b9e:	bfd4      	ite	le
 8086ba0:	2301      	movle	r3, #1
 8086ba2:	2300      	movgt	r3, #0
 8086ba4:	e000      	b.n	8086ba8 <_ZN10PowerCheck4loopEv+0x7c>
 8086ba6:	2301      	movs	r3, #1
 8086ba8:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22

		// The battery is charging if in pre-charge or fast charge mode
		isCharging = hasBattery && (lastChrgStat == 1 || lastChrgStat == 2);
 8086bac:	b133      	cbz	r3, 8086bbc <_ZN10PowerCheck4loopEv+0x90>
 8086bae:	f894 3020 	ldrb.w	r3, [r4, #32]
 8086bb2:	3b01      	subs	r3, #1
 8086bb4:	2b01      	cmp	r3, #1
 8086bb6:	bf8c      	ite	hi
 8086bb8:	2300      	movhi	r3, #0
 8086bba:	2301      	movls	r3, #1
 8086bbc:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23

		checkCount = 0;
 8086bc0:	2300      	movs	r3, #0
 8086bc2:	61a3      	str	r3, [r4, #24]
		changeCount = 0;
 8086bc4:	61e3      	str	r3, [r4, #28]
 8086bc6:	bd10      	pop	{r4, pc}

08086bc8 <_GLOBAL__sub_I__ZN10PowerCheckC2Ev>:
 8086bc8:	f002 bbd8 	b.w	808937c <HAL_Pin_Map>

08086bcc <_ZL8i2cwriteh>:
/**************************************************************************/
/*!
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static void i2cwrite(uint8_t x) {
 8086bcc:	b510      	push	{r4, lr}
 8086bce:	4604      	mov	r4, r0
  #else
  Wire.send(x);
  #endif
  */
  
  Wire.write((uint8_t)x);
 8086bd0:	f005 f948 	bl	808be64 <_Z19__fetch_global_Wirev>
 8086bd4:	6803      	ldr	r3, [r0, #0]
 8086bd6:	4621      	mov	r1, r4
}
 8086bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  #else
  Wire.send(x);
  #endif
  */
  
  Wire.write((uint8_t)x);
 8086bdc:	689b      	ldr	r3, [r3, #8]
 8086bde:	4718      	bx	r3

08086be0 <_ZL7i2creadv>:
/**************************************************************************/
/*!
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static uint8_t i2cread(void) {
 8086be0:	b508      	push	{r3, lr}
  #else
  return Wire.receive();
  #endif
  */
  
  return Wire.read();
 8086be2:	f005 f93f 	bl	808be64 <_Z19__fetch_global_Wirev>
 8086be6:	6803      	ldr	r3, [r0, #0]
 8086be8:	695b      	ldr	r3, [r3, #20]
 8086bea:	4798      	blx	r3
}
 8086bec:	b2c0      	uxtb	r0, r0
 8086bee:	bd08      	pop	{r3, pc}

08086bf0 <_ZL13writeRegisterhht>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static void writeRegister(uint8_t i2cAddress, uint8_t reg, uint16_t value) {
 8086bf0:	b570      	push	{r4, r5, r6, lr}
 8086bf2:	4606      	mov	r6, r0
 8086bf4:	460d      	mov	r5, r1
 8086bf6:	4614      	mov	r4, r2
  Wire.beginTransmission(i2cAddress);
 8086bf8:	f005 f934 	bl	808be64 <_Z19__fetch_global_Wirev>
 8086bfc:	4631      	mov	r1, r6
 8086bfe:	f004 ff03 	bl	808ba08 <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite((uint8_t)reg);
 8086c02:	4628      	mov	r0, r5
 8086c04:	f7ff ffe2 	bl	8086bcc <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value>>8));
 8086c08:	0a20      	lsrs	r0, r4, #8
 8086c0a:	f7ff ffdf 	bl	8086bcc <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value & 0xFF));
 8086c0e:	b2e0      	uxtb	r0, r4
 8086c10:	f7ff ffdc 	bl	8086bcc <_ZL8i2cwriteh>
  Wire.endTransmission();
 8086c14:	f005 f926 	bl	808be64 <_Z19__fetch_global_Wirev>
}
 8086c18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
static void writeRegister(uint8_t i2cAddress, uint8_t reg, uint16_t value) {
  Wire.beginTransmission(i2cAddress);
  i2cwrite((uint8_t)reg);
  i2cwrite((uint8_t)(value>>8));
  i2cwrite((uint8_t)(value & 0xFF));
  Wire.endTransmission();
 8086c1c:	f004 beff 	b.w	808ba1e <_ZN7TwoWire15endTransmissionEv>

08086c20 <_ZL12readRegisterhh.isra.0>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
 8086c20:	b510      	push	{r4, lr}
 8086c22:	4604      	mov	r4, r0
  Wire.beginTransmission(i2cAddress);
 8086c24:	f005 f91e 	bl	808be64 <_Z19__fetch_global_Wirev>
 8086c28:	4621      	mov	r1, r4
 8086c2a:	f004 feed 	bl	808ba08 <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite(ADS1015_REG_POINTER_CONVERT);
 8086c2e:	2000      	movs	r0, #0
 8086c30:	f7ff ffcc 	bl	8086bcc <_ZL8i2cwriteh>
  Wire.endTransmission();
 8086c34:	f005 f916 	bl	808be64 <_Z19__fetch_global_Wirev>
 8086c38:	f004 fef1 	bl	808ba1e <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(i2cAddress, (uint8_t)2);
 8086c3c:	f005 f912 	bl	808be64 <_Z19__fetch_global_Wirev>
 8086c40:	4621      	mov	r1, r4
 8086c42:	2202      	movs	r2, #2
 8086c44:	f004 fed3 	bl	808b9ee <_ZN7TwoWire11requestFromEhh>
  return ((i2cread() << 8) | i2cread());  
 8086c48:	f7ff ffca 	bl	8086be0 <_ZL7i2creadv>
 8086c4c:	4604      	mov	r4, r0
 8086c4e:	f7ff ffc7 	bl	8086be0 <_ZL7i2creadv>
 8086c52:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
}
 8086c56:	b280      	uxth	r0, r0
 8086c58:	bd10      	pop	{r4, pc}

08086c5a <_ZN16Adafruit_ADS1115C1Eh>:
Adafruit_ADS1015::Adafruit_ADS1015(uint8_t i2cAddress) 
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1015_CONVERSIONDELAY;
   m_bitShift = 4;
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
 8086c5a:	2200      	movs	r2, #0
    @brief  Instantiates a new ADS1115 class w/appropriate properties
*/
/**************************************************************************/
Adafruit_ADS1115::Adafruit_ADS1115(uint8_t i2cAddress)
{
   m_i2cAddress = i2cAddress;
 8086c5c:	7001      	strb	r1, [r0, #0]
   m_conversionDelay = ADS1115_CONVERSIONDELAY;
 8086c5e:	2108      	movs	r1, #8
Adafruit_ADS1015::Adafruit_ADS1015(uint8_t i2cAddress) 
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1015_CONVERSIONDELAY;
   m_bitShift = 4;
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
 8086c60:	8082      	strh	r2, [r0, #4]
*/
/**************************************************************************/
Adafruit_ADS1115::Adafruit_ADS1115(uint8_t i2cAddress)
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1115_CONVERSIONDELAY;
 8086c62:	7041      	strb	r1, [r0, #1]
   m_bitShift = 0;
 8086c64:	7082      	strb	r2, [r0, #2]
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
}
 8086c66:	4770      	bx	lr

08086c68 <_ZN16Adafruit_ADS10155beginEv>:
/**************************************************************************/
/*!
    @brief  Sets up the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
void Adafruit_ADS1015::begin() {
 8086c68:	b508      	push	{r3, lr}
  Wire.begin();
 8086c6a:	f005 f8fb 	bl	808be64 <_Z19__fetch_global_Wirev>
}
 8086c6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/*!
    @brief  Sets up the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
void Adafruit_ADS1015::begin() {
  Wire.begin();
 8086c72:	f004 bead 	b.w	808b9d0 <_ZN7TwoWire5beginEv>

08086c76 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>:
    @brief  Sets the gain and input voltage range
*/
/**************************************************************************/
void Adafruit_ADS1015::setGain(adsGain_t gain)
{
  m_gain = gain;
 8086c76:	8081      	strh	r1, [r0, #4]
 8086c78:	4770      	bx	lr

08086c7a <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>:
/*!
    @brief  Gets a single-ended ADC reading from the specified channel
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
  if (channel > 3)
 8086c7a:	2903      	cmp	r1, #3
/**************************************************************************/
/*!
    @brief  Gets a single-ended ADC reading from the specified channel
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
 8086c7c:	b510      	push	{r4, lr}
 8086c7e:	4604      	mov	r4, r0
  if (channel > 3)
 8086c80:	d822      	bhi.n	8086cc8 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x4e>

  // Set PGA/voltage range
  config |= m_gain;

  // Set single-ended input channel
  switch (channel)
 8086c82:	2902      	cmp	r1, #2
                    ADS1015_REG_CONFIG_CMODE_TRAD   | // Traditional comparator (default val)
                    ADS1015_REG_CONFIG_DR_1600SPS   | // 1600 samples per second (default)
                    ADS1015_REG_CONFIG_MODE_SINGLE;   // Single-shot mode (default)

  // Set PGA/voltage range
  config |= m_gain;
 8086c84:	8882      	ldrh	r2, [r0, #4]

  // Set single-ended input channel
  switch (channel)
 8086c86:	d008      	beq.n	8086c9a <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x20>
 8086c88:	2903      	cmp	r1, #3
 8086c8a:	d009      	beq.n	8086ca0 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x26>
 8086c8c:	2901      	cmp	r1, #1
  {
    case (0):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_0;
 8086c8e:	bf14      	ite	ne
 8086c90:	f442 4283 	orrne.w	r2, r2, #16768	; 0x4180
      break;
    case (1):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
 8086c94:	f442 42a3 	orreq.w	r2, r2, #20864	; 0x5180
 8086c98:	e004      	b.n	8086ca4 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x2a>
      break;
    case (2):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
 8086c9a:	f442 42c3 	orr.w	r2, r2, #24960	; 0x6180
 8086c9e:	e001      	b.n	8086ca4 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x2a>
      break;
    case (3):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
 8086ca0:	f442 42e3 	orr.w	r2, r2, #29056	; 0x7180
 8086ca4:	f042 0203 	orr.w	r2, r2, #3

  // Set 'start single-conversion' bit
  config |= ADS1015_REG_CONFIG_OS_SINGLE;

  // Write config register to the ADC
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
 8086ca8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8086cac:	2101      	movs	r1, #1
 8086cae:	7820      	ldrb	r0, [r4, #0]
 8086cb0:	f7ff ff9e 	bl	8086bf0 <_ZL13writeRegisterhht>

  // Wait for the conversion to complete
  delay(m_conversionDelay);
 8086cb4:	7860      	ldrb	r0, [r4, #1]
 8086cb6:	f003 ffd5 	bl	808ac64 <delay>

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
 8086cba:	7820      	ldrb	r0, [r4, #0]
 8086cbc:	f7ff ffb0 	bl	8086c20 <_ZL12readRegisterhh.isra.0>
 8086cc0:	78a3      	ldrb	r3, [r4, #2]
 8086cc2:	4118      	asrs	r0, r3
 8086cc4:	b280      	uxth	r0, r0
 8086cc6:	bd10      	pop	{r4, pc}
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
  if (channel > 3)
  {
    return 0;
 8086cc8:	2000      	movs	r0, #0
  delay(m_conversionDelay);

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
}
 8086cca:	bd10      	pop	{r4, pc}

08086ccc <_GLOBAL__sub_I__ZN16Adafruit_ADS1015C2Eh>:
 8086ccc:	f002 bb56 	b.w	808937c <HAL_Pin_Map>

08086cd0 <_ZN3GPS15set_lat_decimalE6Stringc>:
#include "gps.h"



//set decimal value of latitude from NMEA string
void GPS::set_lat_decimal(String latString, char nsString){
 8086cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8086cd4:	460e      	mov	r6, r1
 8086cd6:	b088      	sub	sp, #32
 8086cd8:	4604      	mov	r4, r0
 8086cda:	4615      	mov	r5, r2
    String whole_str = latString.substring(0,2);
 8086cdc:	4668      	mov	r0, sp
 8086cde:	2302      	movs	r3, #2
 8086ce0:	2200      	movs	r2, #0
 8086ce2:	f003 fb8d 	bl	808a400 <_ZNK6String9substringEjj>
    String frac_str = latString.substring(2,10);
 8086ce6:	230a      	movs	r3, #10
 8086ce8:	2202      	movs	r2, #2
 8086cea:	4631      	mov	r1, r6
 8086cec:	a804      	add	r0, sp, #16
 8086cee:	f003 fb87 	bl	808a400 <_ZNK6String9substringEjj>
    latWhole = whole_str.toInt();
 8086cf2:	4668      	mov	r0, sp
 8086cf4:	f003 fbac 	bl	808a450 <_ZNK6String5toIntEv>
 8086cf8:	83a0      	strh	r0, [r4, #28]
    latFrac = frac_str.toInt();
 8086cfa:	a804      	add	r0, sp, #16
 8086cfc:	f003 fba8 	bl	808a450 <_ZNK6String5toIntEv>
 8086d00:	83e0      	strh	r0, [r4, #30]

    int whole_part = whole_str.toInt();
 8086d02:	4668      	mov	r0, sp
 8086d04:	f003 fba4 	bl	808a450 <_ZNK6String5toIntEv>
 8086d08:	4606      	mov	r6, r0
    //Serial.print("Whole part:");
    //Serial.println(whole_part);

    double frac_part = frac_str.toFloat();
 8086d0a:	a804      	add	r0, sp, #16
 8086d0c:	f003 fba5 	bl	808a45a <_ZNK6String7toFloatEv>
 8086d10:	4680      	mov	r8, r0
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    latitude = whole_part;
    latitude += (frac_part)/60;
 8086d12:	4630      	mov	r0, r6
 8086d14:	f005 fb8a 	bl	808c42c <__aeabi_i2d>
 8086d18:	4606      	mov	r6, r0
 8086d1a:	4640      	mov	r0, r8
 8086d1c:	460f      	mov	r7, r1
 8086d1e:	f005 fb97 	bl	808c450 <__aeabi_f2d>
 8086d22:	2200      	movs	r2, #0
 8086d24:	4b0c      	ldr	r3, [pc, #48]	; (8086d58 <_ZN3GPS15set_lat_decimalE6Stringc+0x88>)
 8086d26:	f005 fd11 	bl	808c74c <__aeabi_ddiv>
 8086d2a:	460b      	mov	r3, r1
 8086d2c:	4602      	mov	r2, r0
 8086d2e:	4639      	mov	r1, r7
 8086d30:	4630      	mov	r0, r6
 8086d32:	f005 fa2f 	bl	808c194 <__adddf3>
    if(nsString == 'S'){
 8086d36:	2d53      	cmp	r5, #83	; 0x53
        ns_indicator = 0;
 8086d38:	bf0c      	ite	eq
 8086d3a:	2300      	moveq	r3, #0
    }else{
        ns_indicator = 0x80;
 8086d3c:	2380      	movne	r3, #128	; 0x80
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    latitude = whole_part;
    latitude += (frac_part)/60;
 8086d3e:	e9c4 0102 	strd	r0, r1, [r4, #8]
    if(nsString == 'S'){
        ns_indicator = 0;
    }else{
        ns_indicator = 0x80;
 8086d42:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24


//set decimal value of latitude from NMEA string
void GPS::set_lat_decimal(String latString, char nsString){
    String whole_str = latString.substring(0,2);
    String frac_str = latString.substring(2,10);
 8086d46:	a804      	add	r0, sp, #16
 8086d48:	f003 f992 	bl	808a070 <_ZN6StringD1Ev>



//set decimal value of latitude from NMEA string
void GPS::set_lat_decimal(String latString, char nsString){
    String whole_str = latString.substring(0,2);
 8086d4c:	4668      	mov	r0, sp
 8086d4e:	f003 f98f 	bl	808a070 <_ZN6StringD1Ev>
    if(nsString == 'S'){
        ns_indicator = 0;
    }else{
        ns_indicator = 0x80;
    }
}
 8086d52:	b008      	add	sp, #32
 8086d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8086d58:	404e0000 	.word	0x404e0000

08086d5c <_ZN3GPS16set_long_decimalE6Stringc>:

void GPS::set_long_decimal(String longString, char ewString){
 8086d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8086d60:	460e      	mov	r6, r1
 8086d62:	b088      	sub	sp, #32
 8086d64:	4604      	mov	r4, r0
 8086d66:	4615      	mov	r5, r2
    String whole_str = longString.substring(0,3);
 8086d68:	4668      	mov	r0, sp
 8086d6a:	2303      	movs	r3, #3
 8086d6c:	2200      	movs	r2, #0
 8086d6e:	f003 fb47 	bl	808a400 <_ZNK6String9substringEjj>
    String frac_str = longString.substring(3,10);
 8086d72:	230a      	movs	r3, #10
 8086d74:	2203      	movs	r2, #3
 8086d76:	4631      	mov	r1, r6
 8086d78:	a804      	add	r0, sp, #16
 8086d7a:	f003 fb41 	bl	808a400 <_ZNK6String9substringEjj>

    longWhole = whole_str.toInt();
 8086d7e:	4668      	mov	r0, sp
 8086d80:	f003 fb66 	bl	808a450 <_ZNK6String5toIntEv>
 8086d84:	8420      	strh	r0, [r4, #32]
    longFrac = frac_str.toInt();
 8086d86:	a804      	add	r0, sp, #16
 8086d88:	f003 fb62 	bl	808a450 <_ZNK6String5toIntEv>
 8086d8c:	8460      	strh	r0, [r4, #34]	; 0x22
    int whole_part = whole_str.toInt();
 8086d8e:	4668      	mov	r0, sp
 8086d90:	f003 fb5e 	bl	808a450 <_ZNK6String5toIntEv>
 8086d94:	4606      	mov	r6, r0
    //Serial.print("Whole string: ");
    //Serial.println(whole_str);
    //Serial.print("Whole part:");
    //Serial.println(whole_part);

    double frac_part = frac_str.toFloat();
 8086d96:	a804      	add	r0, sp, #16
 8086d98:	f003 fb5f 	bl	808a45a <_ZNK6String7toFloatEv>
 8086d9c:	4680      	mov	r8, r0
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    longitude = whole_part;
    longitude += (frac_part)/60;
 8086d9e:	4630      	mov	r0, r6
 8086da0:	f005 fb44 	bl	808c42c <__aeabi_i2d>
 8086da4:	4606      	mov	r6, r0
 8086da6:	4640      	mov	r0, r8
 8086da8:	460f      	mov	r7, r1
 8086daa:	f005 fb51 	bl	808c450 <__aeabi_f2d>
 8086dae:	2200      	movs	r2, #0
 8086db0:	4b0c      	ldr	r3, [pc, #48]	; (8086de4 <_ZN3GPS16set_long_decimalE6Stringc+0x88>)
 8086db2:	f005 fccb 	bl	808c74c <__aeabi_ddiv>
 8086db6:	460b      	mov	r3, r1
 8086db8:	4602      	mov	r2, r0
 8086dba:	4639      	mov	r1, r7
 8086dbc:	4630      	mov	r0, r6
 8086dbe:	f005 f9e9 	bl	808c194 <__adddf3>
    if(ewString == 'E'){
 8086dc2:	2d45      	cmp	r5, #69	; 0x45
      ew_indicator = 0;
 8086dc4:	bf0c      	ite	eq
 8086dc6:	2300      	moveq	r3, #0
    }else{
      ew_indicator = 0x01;
 8086dc8:	2301      	movne	r3, #1
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    longitude = whole_part;
    longitude += (frac_part)/60;
 8086dca:	e9c4 0104 	strd	r0, r1, [r4, #16]
    if(ewString == 'E'){
      ew_indicator = 0;
    }else{
      ew_indicator = 0x01;
 8086dce:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    }
}

void GPS::set_long_decimal(String longString, char ewString){
    String whole_str = longString.substring(0,3);
    String frac_str = longString.substring(3,10);
 8086dd2:	a804      	add	r0, sp, #16
 8086dd4:	f003 f94c 	bl	808a070 <_ZN6StringD1Ev>
        ns_indicator = 0x80;
    }
}

void GPS::set_long_decimal(String longString, char ewString){
    String whole_str = longString.substring(0,3);
 8086dd8:	4668      	mov	r0, sp
 8086dda:	f003 f949 	bl	808a070 <_ZN6StringD1Ev>
    if(ewString == 'E'){
      ew_indicator = 0;
    }else{
      ew_indicator = 0x01;
    }
}
 8086dde:	b008      	add	sp, #32
 8086de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8086de4:	404e0000 	.word	0x404e0000

08086de8 <_ZN3GPS14set_satellitesE6String>:

void GPS::set_satellites(String satString){
 8086de8:	b510      	push	{r4, lr}
 8086dea:	4604      	mov	r4, r0
    satellites_used = satString.toInt();
 8086dec:	4608      	mov	r0, r1
 8086dee:	f003 fb2f 	bl	808a450 <_ZNK6String5toIntEv>
 8086df2:	62e0      	str	r0, [r4, #44]	; 0x2c
 8086df4:	bd10      	pop	{r4, pc}
	...

08086df8 <_ZN3GPS23set_horizontalDillutionE6String>:
}

void GPS::set_horizontalDillution(String hdString){
 8086df8:	b510      	push	{r4, lr}
 8086dfa:	4604      	mov	r4, r0
    float temp_float = hdString.toFloat();
 8086dfc:	4608      	mov	r0, r1
 8086dfe:	f003 fb2c 	bl	808a45a <_ZNK6String7toFloatEv>
    temp_float *= 10;

    horizontal_dillution = temp_float;
 8086e02:	4902      	ldr	r1, [pc, #8]	; (8086e0c <_ZN3GPS23set_horizontalDillutionE6String+0x14>)
 8086e04:	f005 ffce 	bl	808cda4 <__aeabi_fmul>
 8086e08:	6320      	str	r0, [r4, #48]	; 0x30
 8086e0a:	bd10      	pop	{r4, pc}
 8086e0c:	41200000 	.word	0x41200000

08086e10 <_ZN3GPS12get_latitudeEv>:
}

double GPS::get_latitude(void){
    return latitude;
}
 8086e10:	f100 0108 	add.w	r1, r0, #8
 8086e14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8086e18:	4770      	bx	lr

08086e1a <_ZN3GPS13get_longitudeEv>:

double GPS::get_longitude(void){
    return longitude;
}
 8086e1a:	f100 0110 	add.w	r1, r0, #16
 8086e1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8086e22:	4770      	bx	lr

08086e24 <_ZN3GPS23get_horizontalDillutionEv>:

int GPS::get_satellites(void){
    return satellites_used;
}

int GPS::get_horizontalDillution(void){
 8086e24:	b508      	push	{r3, lr}
    return horizontal_dillution;
 8086e26:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8086e28:	f006 f982 	bl	808d130 <__aeabi_f2iz>
}
 8086e2c:	bd08      	pop	{r3, pc}

08086e2e <_ZN3GPS17get_latitudeWholeEv>:

int16_t GPS::get_latitudeWhole(void){
    return latWhole;
}
 8086e2e:	f9b0 001c 	ldrsh.w	r0, [r0, #28]
 8086e32:	4770      	bx	lr

08086e34 <_ZN3GPS16get_latitudeFracEv>:
int16_t GPS::get_latitudeFrac(void){
    return latFrac;
}
 8086e34:	f9b0 001e 	ldrsh.w	r0, [r0, #30]
 8086e38:	4770      	bx	lr

08086e3a <_ZN3GPS18get_longitudeWholeEv>:
int16_t GPS::get_longitudeWhole(void){
    return longWhole;
}
 8086e3a:	f9b0 0020 	ldrsh.w	r0, [r0, #32]
 8086e3e:	4770      	bx	lr

08086e40 <_ZN3GPS17get_longitudeFracEv>:
int16_t GPS::get_longitudeFrac(void){
    return longFrac;
}
 8086e40:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8086e44:	4770      	bx	lr

08086e46 <_ZN3GPS15get_nsIndicatorEv>:

int8_t GPS::get_nsIndicator(void){
    return ns_indicator;
}
 8086e46:	f990 0024 	ldrsb.w	r0, [r0, #36]	; 0x24
 8086e4a:	4770      	bx	lr

08086e4c <_ZN3GPS15get_ewIndicatorEv>:

int8_t GPS::get_ewIndicator(void){
    return ew_indicator;
}
 8086e4c:	f990 0025 	ldrsb.w	r0, [r0, #37]	; 0x25
 8086e50:	4770      	bx	lr

08086e52 <_GLOBAL__sub_I__ZN3GPS15set_lat_decimalE6Stringc>:
 8086e52:	f002 ba93 	b.w	808937c <HAL_Pin_Map>

08086e56 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 8086e56:	6803      	ldr	r3, [r0, #0]
 8086e58:	b2c9      	uxtb	r1, r1
 8086e5a:	689b      	ldr	r3, [r3, #8]
 8086e5c:	4718      	bx	r3

08086e5e <_ZN13Telaire_T6713C1Ev>:
#define ADDR_6713  0x15 // default I2C slave address

Telaire_T6713::Telaire_T6713()
{
  //perform initialization
}
 8086e5e:	4770      	bx	lr

08086e60 <_ZN13Telaire_T67135beginEv>:

bool Telaire_T6713::begin()
{
 8086e60:	b510      	push	{r4, lr}
  LSB = 0;
  #ifdef T6713_DEBUG
  Serial.println("Begin Telaire_T6713");
  #endif
  // start I2C
  Wire.beginTransmission(ADDR_6713);
 8086e62:	f004 ffff 	bl	808be64 <_Z19__fetch_global_Wirev>
 8086e66:	2115      	movs	r1, #21
 8086e68:	f004 fdd2 	bl	808ba10 <_ZN7TwoWire17beginTransmissionEi>

  // Function code = 0x04
  Wire.write(0x04);
 8086e6c:	f004 fffa 	bl	808be64 <_Z19__fetch_global_Wirev>
 8086e70:	2104      	movs	r1, #4
 8086e72:	f7ff fff0 	bl	8086e56 <_ZN7TwoWire5writeEi>
  // Starting address (MSB) = 0x13
  Wire.write(0x13);
 8086e76:	f004 fff5 	bl	808be64 <_Z19__fetch_global_Wirev>
 8086e7a:	2113      	movs	r1, #19
 8086e7c:	f7ff ffeb 	bl	8086e56 <_ZN7TwoWire5writeEi>
  // Starting address (LSB) = 0x8B
  Wire.write(0x8B);
 8086e80:	f004 fff0 	bl	808be64 <_Z19__fetch_global_Wirev>
 8086e84:	218b      	movs	r1, #139	; 0x8b
 8086e86:	f7ff ffe6 	bl	8086e56 <_ZN7TwoWire5writeEi>
  // Input registers to read (MSB) = 0x00
  Wire.write(0x00);
 8086e8a:	f004 ffeb 	bl	808be64 <_Z19__fetch_global_Wirev>
 8086e8e:	2100      	movs	r1, #0
 8086e90:	f7ff ffe1 	bl	8086e56 <_ZN7TwoWire5writeEi>
  // Input registers to read (LSB) = 0x01
  Wire.write(0x01);
 8086e94:	f004 ffe6 	bl	808be64 <_Z19__fetch_global_Wirev>
 8086e98:	2101      	movs	r1, #1
 8086e9a:	f7ff ffdc 	bl	8086e56 <_ZN7TwoWire5writeEi>

  // end transmission
  Wire.endTransmission();
 8086e9e:	f004 ffe1 	bl	808be64 <_Z19__fetch_global_Wirev>
 8086ea2:	f004 fdbc 	bl	808ba1e <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(ADDR_6713, 4);    // request 6 bytes from slave device
 8086ea6:	f004 ffdd 	bl	808be64 <_Z19__fetch_global_Wirev>
 8086eaa:	2204      	movs	r2, #4
 8086eac:	2115      	movs	r1, #21
 8086eae:	f004 fda1 	bl	808b9f4 <_ZN7TwoWire11requestFromEii>
  while(Wire.available() == 0);
 8086eb2:	f004 ffd7 	bl	808be64 <_Z19__fetch_global_Wirev>
 8086eb6:	6803      	ldr	r3, [r0, #0]
 8086eb8:	691b      	ldr	r3, [r3, #16]
 8086eba:	4798      	blx	r3
 8086ebc:	2800      	cmp	r0, #0
 8086ebe:	d0f8      	beq.n	8086eb2 <_ZN13Telaire_T67135beginEv+0x52>
  func_code = Wire.read();
 8086ec0:	f004 ffd0 	bl	808be64 <_Z19__fetch_global_Wirev>
 8086ec4:	6803      	ldr	r3, [r0, #0]
 8086ec6:	695b      	ldr	r3, [r3, #20]
 8086ec8:	4798      	blx	r3
  byte_count = Wire.read();
 8086eca:	f004 ffcb 	bl	808be64 <_Z19__fetch_global_Wirev>
 8086ece:	6803      	ldr	r3, [r0, #0]
 8086ed0:	695b      	ldr	r3, [r3, #20]
 8086ed2:	4798      	blx	r3
  MSB = Wire.read();
 8086ed4:	f004 ffc6 	bl	808be64 <_Z19__fetch_global_Wirev>
 8086ed8:	6803      	ldr	r3, [r0, #0]
 8086eda:	695b      	ldr	r3, [r3, #20]
 8086edc:	4798      	blx	r3
 8086ede:	4604      	mov	r4, r0
  LSB = Wire.read();
 8086ee0:	f004 ffc0 	bl	808be64 <_Z19__fetch_global_Wirev>
 8086ee4:	6803      	ldr	r3, [r0, #0]
 8086ee6:	b2e4      	uxtb	r4, r4
 8086ee8:	695b      	ldr	r3, [r3, #20]
 8086eea:	4798      	blx	r3
 8086eec:	b2c0      	uxtb	r0, r0
 8086eee:	eb00 2004 	add.w	r0, r0, r4, lsl #8
  {
    return false;
  }

  return true;
}
 8086ef2:	3000      	adds	r0, #0
 8086ef4:	bf18      	it	ne
 8086ef6:	2001      	movne	r0, #1
 8086ef8:	bd10      	pop	{r4, pc}

08086efa <_ZN13Telaire_T67138queryPPMEv>:
// send request to read current gas measurement in ppm
// return status: 0 success
void Telaire_T6713::queryPPM()
{
 8086efa:	b508      	push	{r3, lr}
  byte_count = 0;
  MSB = 0;
  LSB = 0;

  // start I2C
  Wire.beginTransmission(ADDR_6713);
 8086efc:	f004 ffb2 	bl	808be64 <_Z19__fetch_global_Wirev>
 8086f00:	2115      	movs	r1, #21
 8086f02:	f004 fd85 	bl	808ba10 <_ZN7TwoWire17beginTransmissionEi>

  // Function code = 0x04
  Wire.write(0x04);
 8086f06:	f004 ffad 	bl	808be64 <_Z19__fetch_global_Wirev>
 8086f0a:	2104      	movs	r1, #4
 8086f0c:	f7ff ffa3 	bl	8086e56 <_ZN7TwoWire5writeEi>
  // Starting address (MSB) = 0x13
  Wire.write(0x13);
 8086f10:	f004 ffa8 	bl	808be64 <_Z19__fetch_global_Wirev>
 8086f14:	2113      	movs	r1, #19
 8086f16:	f7ff ff9e 	bl	8086e56 <_ZN7TwoWire5writeEi>
  // Starting address (LSB) = 0x8B
  Wire.write(0x8B);
 8086f1a:	f004 ffa3 	bl	808be64 <_Z19__fetch_global_Wirev>
 8086f1e:	218b      	movs	r1, #139	; 0x8b
 8086f20:	f7ff ff99 	bl	8086e56 <_ZN7TwoWire5writeEi>
  // Input registers to read (MSB) = 0x00
  Wire.write(0x00);
 8086f24:	f004 ff9e 	bl	808be64 <_Z19__fetch_global_Wirev>
 8086f28:	2100      	movs	r1, #0
 8086f2a:	f7ff ff94 	bl	8086e56 <_ZN7TwoWire5writeEi>
  // Input registers to read (LSB) = 0x01
  Wire.write(0x01);
 8086f2e:	f004 ff99 	bl	808be64 <_Z19__fetch_global_Wirev>
 8086f32:	2101      	movs	r1, #1
 8086f34:	f7ff ff8f 	bl	8086e56 <_ZN7TwoWire5writeEi>

  // end transmission
  Wire.endTransmission();
 8086f38:	f004 ff94 	bl	808be64 <_Z19__fetch_global_Wirev>
  Serial.println(LSB);
  int ppm = MSB*256 + LSB;
  Serial.println(ppm);*/


}
 8086f3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Wire.write(0x00);
  // Input registers to read (LSB) = 0x01
  Wire.write(0x01);

  // end transmission
  Wire.endTransmission();
 8086f40:	f004 bd6d 	b.w	808ba1e <_ZN7TwoWire15endTransmissionEv>

08086f44 <_ZN13Telaire_T67137readPPMEv>:

}

// read report of current gas measurement in ppm
int Telaire_T6713::readPPM()
{
 8086f44:	b510      	push	{r4, lr}
  LSB = 0;
  #ifdef T6713_DEBUG
  Serial.println("reading gas ppm");
  #endif

  queryPPM();
 8086f46:	f7ff ffd8 	bl	8086efa <_ZN13Telaire_T67138queryPPMEv>
  delay(10);    //test delay
 8086f4a:	200a      	movs	r0, #10
 8086f4c:	f003 fe8a 	bl	808ac64 <delay>
  Wire.requestFrom(ADDR_6713, 4);    // request 6 bytes from slave device
 8086f50:	f004 ff88 	bl	808be64 <_Z19__fetch_global_Wirev>
 8086f54:	2204      	movs	r2, #4
 8086f56:	2115      	movs	r1, #21
 8086f58:	f004 fd4c 	bl	808b9f4 <_ZN7TwoWire11requestFromEii>

   while(Wire.available() == 0);
 8086f5c:	f004 ff82 	bl	808be64 <_Z19__fetch_global_Wirev>
 8086f60:	6803      	ldr	r3, [r0, #0]
 8086f62:	691b      	ldr	r3, [r3, #16]
 8086f64:	4798      	blx	r3
 8086f66:	2800      	cmp	r0, #0
 8086f68:	d0f8      	beq.n	8086f5c <_ZN13Telaire_T67137readPPMEv+0x18>
   func_code = Wire.read();
 8086f6a:	f004 ff7b 	bl	808be64 <_Z19__fetch_global_Wirev>
 8086f6e:	6803      	ldr	r3, [r0, #0]
 8086f70:	695b      	ldr	r3, [r3, #20]
 8086f72:	4798      	blx	r3
   byte_count = Wire.read();
 8086f74:	f004 ff76 	bl	808be64 <_Z19__fetch_global_Wirev>
 8086f78:	6803      	ldr	r3, [r0, #0]
 8086f7a:	695b      	ldr	r3, [r3, #20]
 8086f7c:	4798      	blx	r3
   MSB = Wire.read();
 8086f7e:	f004 ff71 	bl	808be64 <_Z19__fetch_global_Wirev>
 8086f82:	6803      	ldr	r3, [r0, #0]
 8086f84:	695b      	ldr	r3, [r3, #20]
 8086f86:	4798      	blx	r3
 8086f88:	4604      	mov	r4, r0
   LSB = Wire.read();
 8086f8a:	f004 ff6b 	bl	808be64 <_Z19__fetch_global_Wirev>
 8086f8e:	6803      	ldr	r3, [r0, #0]
   Serial.print("LSB: ");
   Serial.println(LSB);
   #endif

   // ppm = MSB*256 + LSB
   return ((MSB<<8)|LSB);
 8086f90:	0224      	lsls	r4, r4, #8

   while(Wire.available() == 0);
   func_code = Wire.read();
   byte_count = Wire.read();
   MSB = Wire.read();
   LSB = Wire.read();
 8086f92:	695b      	ldr	r3, [r3, #20]
 8086f94:	4798      	blx	r3
   Serial.print("LSB: ");
   Serial.println(LSB);
   #endif

   // ppm = MSB*256 + LSB
   return ((MSB<<8)|LSB);
 8086f96:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8086f9a:	b2c0      	uxtb	r0, r0
}
 8086f9c:	4320      	orrs	r0, r4
 8086f9e:	bd10      	pop	{r4, pc}

08086fa0 <_ZN13Telaire_T671310readStatusEi>:

void Telaire_T6713::readStatus(int debugging)
{
 8086fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8086fa4:	460c      	mov	r4, r1
  byte func_code, byte_count, MSB, LSB;
  func_code = 0;
  byte_count = 0;
  MSB = 0;
  LSB = 0;
  Wire.beginTransmission(ADDR_6713);
 8086fa6:	f004 ff5d 	bl	808be64 <_Z19__fetch_global_Wirev>
 8086faa:	2115      	movs	r1, #21
 8086fac:	f004 fd30 	bl	808ba10 <_ZN7TwoWire17beginTransmissionEi>
  //Wire.write(0x00);
  // Input registers to read (LSB) = 0x01
  //Wire.write(0x01);

  // Function code = 0x04
  Wire.write(0x04);
 8086fb0:	f004 ff58 	bl	808be64 <_Z19__fetch_global_Wirev>
 8086fb4:	2104      	movs	r1, #4
 8086fb6:	f7ff ff4e 	bl	8086e56 <_ZN7TwoWire5writeEi>
  // Starting address (MSB) = 0x13
  Wire.write(0x13);
 8086fba:	f004 ff53 	bl	808be64 <_Z19__fetch_global_Wirev>
 8086fbe:	2113      	movs	r1, #19
 8086fc0:	f7ff ff49 	bl	8086e56 <_ZN7TwoWire5writeEi>
  // Starting address (LSB) = 0x8B
  Wire.write(0x8A);
 8086fc4:	f004 ff4e 	bl	808be64 <_Z19__fetch_global_Wirev>
 8086fc8:	218a      	movs	r1, #138	; 0x8a
 8086fca:	f7ff ff44 	bl	8086e56 <_ZN7TwoWire5writeEi>
  // Input registers to read (MSB) = 0x00
  Wire.write(0x00);
 8086fce:	f004 ff49 	bl	808be64 <_Z19__fetch_global_Wirev>
 8086fd2:	2100      	movs	r1, #0
 8086fd4:	f7ff ff3f 	bl	8086e56 <_ZN7TwoWire5writeEi>
  // Input registers to read (LSB) = 0x01
  Wire.write(0x01);
 8086fd8:	f004 ff44 	bl	808be64 <_Z19__fetch_global_Wirev>
 8086fdc:	2101      	movs	r1, #1
 8086fde:	f7ff ff3a 	bl	8086e56 <_ZN7TwoWire5writeEi>

  // end transmission
   Wire.endTransmission();
 8086fe2:	f004 ff3f 	bl	808be64 <_Z19__fetch_global_Wirev>
 8086fe6:	f004 fd1a 	bl	808ba1e <_ZN7TwoWire15endTransmissionEv>
   if(debugging){
 8086fea:	b124      	cbz	r4, 8086ff6 <_ZN13Telaire_T671310readStatusEi+0x56>
       Serial.println("reading CO2 sensor status");
 8086fec:	f004 fb2a 	bl	808b644 <_Z16_fetch_usbserialv>
 8086ff0:	492c      	ldr	r1, [pc, #176]	; (80870a4 <_ZN13Telaire_T671310readStatusEi+0x104>)
 8086ff2:	f003 fa8e 	bl	808a512 <_ZN5Print7printlnEPKc>
   }
   Wire.requestFrom(ADDR_6713, 4);    // request 6 bytes from slave device
 8086ff6:	f004 ff35 	bl	808be64 <_Z19__fetch_global_Wirev>
 8086ffa:	2204      	movs	r2, #4
 8086ffc:	2115      	movs	r1, #21
 8086ffe:	f004 fcf9 	bl	808b9f4 <_ZN7TwoWire11requestFromEii>

   while(Wire.available() == 0);
 8087002:	f004 ff2f 	bl	808be64 <_Z19__fetch_global_Wirev>
 8087006:	6803      	ldr	r3, [r0, #0]
 8087008:	691b      	ldr	r3, [r3, #16]
 808700a:	4798      	blx	r3
 808700c:	2800      	cmp	r0, #0
 808700e:	d0f8      	beq.n	8087002 <_ZN13Telaire_T671310readStatusEi+0x62>
   func_code = Wire.read();
 8087010:	f004 ff28 	bl	808be64 <_Z19__fetch_global_Wirev>
 8087014:	6803      	ldr	r3, [r0, #0]
 8087016:	695b      	ldr	r3, [r3, #20]
 8087018:	4798      	blx	r3
 808701a:	4680      	mov	r8, r0
   byte_count = Wire.read();
 808701c:	f004 ff22 	bl	808be64 <_Z19__fetch_global_Wirev>
 8087020:	6803      	ldr	r3, [r0, #0]
 8087022:	695b      	ldr	r3, [r3, #20]
 8087024:	4798      	blx	r3
 8087026:	4607      	mov	r7, r0
   MSB = Wire.read();
 8087028:	f004 ff1c 	bl	808be64 <_Z19__fetch_global_Wirev>
 808702c:	6803      	ldr	r3, [r0, #0]
 808702e:	695b      	ldr	r3, [r3, #20]
 8087030:	4798      	blx	r3
 8087032:	4606      	mov	r6, r0
   LSB = Wire.read();
 8087034:	f004 ff16 	bl	808be64 <_Z19__fetch_global_Wirev>
 8087038:	6803      	ldr	r3, [r0, #0]
 808703a:	695b      	ldr	r3, [r3, #20]
 808703c:	4798      	blx	r3
 808703e:	4605      	mov	r5, r0
   if(debugging){
 8087040:	b374      	cbz	r4, 80870a0 <_ZN13Telaire_T671310readStatusEi+0x100>
       Serial.print("Func code: ");
 8087042:	f004 faff 	bl	808b644 <_Z16_fetch_usbserialv>
 8087046:	4918      	ldr	r1, [pc, #96]	; (80870a8 <_ZN13Telaire_T671310readStatusEi+0x108>)
 8087048:	f003 fa50 	bl	808a4ec <_ZN5Print5printEPKc>
       Serial.println(func_code, HEX);
 808704c:	f004 fafa 	bl	808b644 <_Z16_fetch_usbserialv>
 8087050:	2210      	movs	r2, #16
 8087052:	fa5f f188 	uxtb.w	r1, r8
 8087056:	f003 fa9c 	bl	808a592 <_ZN5Print7printlnEhi>
       Serial.print("byte count: ");
 808705a:	f004 faf3 	bl	808b644 <_Z16_fetch_usbserialv>
 808705e:	4913      	ldr	r1, [pc, #76]	; (80870ac <_ZN13Telaire_T671310readStatusEi+0x10c>)
 8087060:	f003 fa44 	bl	808a4ec <_ZN5Print5printEPKc>
       Serial.println(byte_count, HEX);
 8087064:	f004 faee 	bl	808b644 <_Z16_fetch_usbserialv>
 8087068:	2210      	movs	r2, #16
 808706a:	b2f9      	uxtb	r1, r7
 808706c:	f003 fa91 	bl	808a592 <_ZN5Print7printlnEhi>
       Serial.print("MSB: ");
 8087070:	f004 fae8 	bl	808b644 <_Z16_fetch_usbserialv>
 8087074:	490e      	ldr	r1, [pc, #56]	; (80870b0 <_ZN13Telaire_T671310readStatusEi+0x110>)
 8087076:	f003 fa39 	bl	808a4ec <_ZN5Print5printEPKc>
       Serial.println(MSB, BIN);
 808707a:	f004 fae3 	bl	808b644 <_Z16_fetch_usbserialv>
 808707e:	2202      	movs	r2, #2
 8087080:	b2f1      	uxtb	r1, r6
 8087082:	f003 fa86 	bl	808a592 <_ZN5Print7printlnEhi>
       Serial.print("LSB: ");
 8087086:	f004 fadd 	bl	808b644 <_Z16_fetch_usbserialv>
 808708a:	490a      	ldr	r1, [pc, #40]	; (80870b4 <_ZN13Telaire_T671310readStatusEi+0x114>)
 808708c:	f003 fa2e 	bl	808a4ec <_ZN5Print5printEPKc>
       Serial.println(LSB, BIN);
 8087090:	f004 fad8 	bl	808b644 <_Z16_fetch_usbserialv>
 8087094:	b2e9      	uxtb	r1, r5
 8087096:	2202      	movs	r2, #2
   }

}
 8087098:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
       Serial.print("byte count: ");
       Serial.println(byte_count, HEX);
       Serial.print("MSB: ");
       Serial.println(MSB, BIN);
       Serial.print("LSB: ");
       Serial.println(LSB, BIN);
 808709c:	f003 ba79 	b.w	808a592 <_ZN5Print7printlnEhi>
 80870a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80870a4:	08092adc 	.word	0x08092adc
 80870a8:	08092af6 	.word	0x08092af6
 80870ac:	08092b02 	.word	0x08092b02
 80870b0:	08092b0f 	.word	0x08092b0f
 80870b4:	08092b15 	.word	0x08092b15

080870b8 <_ZN13Telaire_T671311resetSensorEv>:
   }

}

void Telaire_T6713::resetSensor()
{
 80870b8:	b508      	push	{r3, lr}
  Wire.beginTransmission(ADDR_6713);
 80870ba:	f004 fed3 	bl	808be64 <_Z19__fetch_global_Wirev>
 80870be:	2115      	movs	r1, #21
 80870c0:	f004 fca6 	bl	808ba10 <_ZN7TwoWire17beginTransmissionEi>

  // Function code = 0x04
  Wire.write(0x05);
 80870c4:	f004 fece 	bl	808be64 <_Z19__fetch_global_Wirev>
 80870c8:	2105      	movs	r1, #5
 80870ca:	f7ff fec4 	bl	8086e56 <_ZN7TwoWire5writeEi>
  // Starting address (MSB) = 0x13
  Wire.write(0x03);
 80870ce:	f004 fec9 	bl	808be64 <_Z19__fetch_global_Wirev>
 80870d2:	2103      	movs	r1, #3
 80870d4:	f7ff febf 	bl	8086e56 <_ZN7TwoWire5writeEi>
  // Starting address (LSB) = 0x8B
  Wire.write(0xE8);
 80870d8:	f004 fec4 	bl	808be64 <_Z19__fetch_global_Wirev>
 80870dc:	21e8      	movs	r1, #232	; 0xe8
 80870de:	f7ff feba 	bl	8086e56 <_ZN7TwoWire5writeEi>
  // Input registers to read (MSB) = 0x00
  Wire.write(0xFF);
 80870e2:	f004 febf 	bl	808be64 <_Z19__fetch_global_Wirev>
 80870e6:	21ff      	movs	r1, #255	; 0xff
 80870e8:	f7ff feb5 	bl	8086e56 <_ZN7TwoWire5writeEi>
  // Input registers to read (LSB) = 0x01
  Wire.write(0x00);
 80870ec:	f004 feba 	bl	808be64 <_Z19__fetch_global_Wirev>
 80870f0:	2100      	movs	r1, #0
 80870f2:	f7ff feb0 	bl	8086e56 <_ZN7TwoWire5writeEi>

  // end transmission
   Wire.endTransmission();
 80870f6:	f004 feb5 	bl	808be64 <_Z19__fetch_global_Wirev>
}
 80870fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Wire.write(0xFF);
  // Input registers to read (LSB) = 0x01
  Wire.write(0x00);

  // end transmission
   Wire.endTransmission();
 80870fe:	f004 bc8e 	b.w	808ba1e <_ZN7TwoWire15endTransmissionEv>

08087102 <_ZN13Telaire_T671315disableABCLogicEv>:
}

void Telaire_T6713::disableABCLogic()
{
 8087102:	b508      	push	{r3, lr}
    Wire.beginTransmission(ADDR_6713);
 8087104:	f004 feae 	bl	808be64 <_Z19__fetch_global_Wirev>
 8087108:	2115      	movs	r1, #21
 808710a:	f004 fc81 	bl	808ba10 <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 808710e:	f004 fea9 	bl	808be64 <_Z19__fetch_global_Wirev>
 8087112:	2105      	movs	r1, #5
 8087114:	f7ff fe9f 	bl	8086e56 <_ZN7TwoWire5writeEi>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 8087118:	f004 fea4 	bl	808be64 <_Z19__fetch_global_Wirev>
 808711c:	2103      	movs	r1, #3
 808711e:	f7ff fe9a 	bl	8086e56 <_ZN7TwoWire5writeEi>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEE);
 8087122:	f004 fe9f 	bl	808be64 <_Z19__fetch_global_Wirev>
 8087126:	21ee      	movs	r1, #238	; 0xee
 8087128:	f7ff fe95 	bl	8086e56 <_ZN7TwoWire5writeEi>
    // Input registers to read (MSB) = 0x00
    Wire.write(0x00);
 808712c:	f004 fe9a 	bl	808be64 <_Z19__fetch_global_Wirev>
 8087130:	2100      	movs	r1, #0
 8087132:	f7ff fe90 	bl	8086e56 <_ZN7TwoWire5writeEi>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 8087136:	f004 fe95 	bl	808be64 <_Z19__fetch_global_Wirev>
 808713a:	2100      	movs	r1, #0
 808713c:	f7ff fe8b 	bl	8086e56 <_ZN7TwoWire5writeEi>

    // end transmission
    Wire.endTransmission();
 8087140:	f004 fe90 	bl	808be64 <_Z19__fetch_global_Wirev>
}
 8087144:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.write(0x00);
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);

    // end transmission
    Wire.endTransmission();
 8087148:	f004 bc69 	b.w	808ba1e <_ZN7TwoWire15endTransmissionEv>

0808714c <_ZN13Telaire_T671314enableABCLogicEv>:
}

void Telaire_T6713::enableABCLogic()
{
 808714c:	b508      	push	{r3, lr}
    Wire.beginTransmission(ADDR_6713);
 808714e:	f004 fe89 	bl	808be64 <_Z19__fetch_global_Wirev>
 8087152:	2115      	movs	r1, #21
 8087154:	f004 fc5c 	bl	808ba10 <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 8087158:	f004 fe84 	bl	808be64 <_Z19__fetch_global_Wirev>
 808715c:	2105      	movs	r1, #5
 808715e:	f7ff fe7a 	bl	8086e56 <_ZN7TwoWire5writeEi>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 8087162:	f004 fe7f 	bl	808be64 <_Z19__fetch_global_Wirev>
 8087166:	2103      	movs	r1, #3
 8087168:	f7ff fe75 	bl	8086e56 <_ZN7TwoWire5writeEi>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEE);
 808716c:	f004 fe7a 	bl	808be64 <_Z19__fetch_global_Wirev>
 8087170:	21ee      	movs	r1, #238	; 0xee
 8087172:	f7ff fe70 	bl	8086e56 <_ZN7TwoWire5writeEi>
    // Input registers to read (MSB) = 0x00
    Wire.write(0xFF);
 8087176:	f004 fe75 	bl	808be64 <_Z19__fetch_global_Wirev>
 808717a:	21ff      	movs	r1, #255	; 0xff
 808717c:	f7ff fe6b 	bl	8086e56 <_ZN7TwoWire5writeEi>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 8087180:	f004 fe70 	bl	808be64 <_Z19__fetch_global_Wirev>
 8087184:	2100      	movs	r1, #0
 8087186:	f7ff fe66 	bl	8086e56 <_ZN7TwoWire5writeEi>

    // end transmission
    Wire.endTransmission();
 808718a:	f004 fe6b 	bl	808be64 <_Z19__fetch_global_Wirev>
}
 808718e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.write(0xFF);
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);

    // end transmission
    Wire.endTransmission();
 8087192:	f004 bc44 	b.w	808ba1e <_ZN7TwoWire15endTransmissionEv>
	...

08087198 <_ZN13Telaire_T67139calibrateEi>:
}


//start a 1 point calibration - this lasts 6 minutes so check the status bit
void Telaire_T6713::calibrate(int debugging)
{
 8087198:	b508      	push	{r3, lr}
    if(debugging){
 808719a:	b121      	cbz	r1, 80871a6 <_ZN13Telaire_T67139calibrateEi+0xe>
      Serial.println("Calibrating CO2");
 808719c:	f004 fa52 	bl	808b644 <_Z16_fetch_usbserialv>
 80871a0:	4913      	ldr	r1, [pc, #76]	; (80871f0 <_ZN13Telaire_T67139calibrateEi+0x58>)
 80871a2:	f003 f9b6 	bl	808a512 <_ZN5Print7printlnEPKc>
    }
    //[0x05, 0x03, 0xec, 0xff, 0x00]
    Wire.beginTransmission(ADDR_6713);
 80871a6:	f004 fe5d 	bl	808be64 <_Z19__fetch_global_Wirev>
 80871aa:	2115      	movs	r1, #21
 80871ac:	f004 fc30 	bl	808ba10 <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 80871b0:	f004 fe58 	bl	808be64 <_Z19__fetch_global_Wirev>
 80871b4:	2105      	movs	r1, #5
 80871b6:	f7ff fe4e 	bl	8086e56 <_ZN7TwoWire5writeEi>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 80871ba:	f004 fe53 	bl	808be64 <_Z19__fetch_global_Wirev>
 80871be:	2103      	movs	r1, #3
 80871c0:	f7ff fe49 	bl	8086e56 <_ZN7TwoWire5writeEi>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEC);
 80871c4:	f004 fe4e 	bl	808be64 <_Z19__fetch_global_Wirev>
 80871c8:	21ec      	movs	r1, #236	; 0xec
 80871ca:	f7ff fe44 	bl	8086e56 <_ZN7TwoWire5writeEi>
    // Input registers to read (MSB) = 0x00
    Wire.write(0xFF);
 80871ce:	f004 fe49 	bl	808be64 <_Z19__fetch_global_Wirev>
 80871d2:	21ff      	movs	r1, #255	; 0xff
 80871d4:	f7ff fe3f 	bl	8086e56 <_ZN7TwoWire5writeEi>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 80871d8:	f004 fe44 	bl	808be64 <_Z19__fetch_global_Wirev>
 80871dc:	2100      	movs	r1, #0
 80871de:	f7ff fe3a 	bl	8086e56 <_ZN7TwoWire5writeEi>

    // end transmission
    Wire.endTransmission();
 80871e2:	f004 fe3f 	bl	808be64 <_Z19__fetch_global_Wirev>
}
 80871e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.write(0xFF);
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);

    // end transmission
    Wire.endTransmission();
 80871ea:	f004 bc18 	b.w	808ba1e <_ZN7TwoWire15endTransmissionEv>
 80871ee:	bf00      	nop
 80871f0:	08092b1b 	.word	0x08092b1b

080871f4 <_GLOBAL__sub_I__ZN13Telaire_T6713C2Ev>:
 80871f4:	f002 b8c2 	b.w	808937c <HAL_Pin_Map>

080871f8 <_GLOBAL__sub_I__ZN7istream3getEv>:
 80871f8:	f002 b8c0 	b.w	808937c <HAL_Pin_Map>

080871fc <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
 80871fc:	b510      	push	{r4, lr}
 80871fe:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync();
 8087200:	3028      	adds	r0, #40	; 0x28
 8087202:	f001 f97f 	bl	8088504 <_ZN8FatCache4syncEv>
 8087206:	b128      	cbz	r0, 8087214 <_ZN9FatVolume9cacheSyncEv+0x18>
 8087208:	f504 700d 	add.w	r0, r4, #564	; 0x234
  }
 808720c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync();
 8087210:	f001 b978 	b.w	8088504 <_ZN8FatCache4syncEv>
  }
 8087214:	bd10      	pop	{r4, pc}

08087216 <_ZN7FatFile11lfnChecksumEPh>:
 * <http://www.gnu.org/licenses/>.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
 8087216:	1e41      	subs	r1, r0, #1
 8087218:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
 808721c:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 808721e:	0843      	lsrs	r3, r0, #1
 8087220:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
 8087224:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8087228:	4418      	add	r0, r3
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 808722a:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 808722c:	f000 00ff 	and.w	r0, r0, #255	; 0xff
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 8087230:	d1f5      	bne.n	808721e <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
 8087232:	4770      	bx	lr

08087234 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
 8087234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
 8087238:	7803      	ldrb	r3, [r0, #0]
 808723a:	1c44      	adds	r4, r0, #1
 808723c:	2b20      	cmp	r3, #32
 808723e:	d101      	bne.n	8087244 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x10>
 8087240:	4620      	mov	r0, r4
 8087242:	e7f9      	b.n	8087238 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
    path++;
  }
  fname->lfn = path;
 8087244:	4605      	mov	r5, r0
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 8087246:	4f70      	ldr	r7, [pc, #448]	; (8087408 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
 8087248:	6088      	str	r0, [r1, #8]
 808724a:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
 808724c:	462e      	mov	r6, r5
 808724e:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
 8087252:	b30b      	cbz	r3, 8087298 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x64>
 8087254:	2b2f      	cmp	r3, #47	; 0x2f
 8087256:	d101      	bne.n	808725c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x28>
 8087258:	1903      	adds	r3, r0, r4
 808725a:	e017      	b.n	808728c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x58>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 808725c:	2b5c      	cmp	r3, #92	; 0x5c
 808725e:	d102      	bne.n	8087266 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x32>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
 8087260:	2000      	movs	r0, #0
 8087262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 8087266:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
 808726a:	b2e4      	uxtb	r4, r4
 808726c:	2c1d      	cmp	r4, #29
 808726e:	d803      	bhi.n	8087278 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x44>
 8087270:	fa27 f404 	lsr.w	r4, r7, r4
 8087274:	07e4      	lsls	r4, r4, #31
 8087276:	d4f3      	bmi.n	8087260 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
 8087278:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
 808727c:	2c3c      	cmp	r4, #60	; 0x3c
 808727e:	d0ef      	beq.n	8087260 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
 8087280:	3b20      	subs	r3, #32
 8087282:	2b5e      	cmp	r3, #94	; 0x5e
 8087284:	d9e1      	bls.n	808724a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x16>
 8087286:	e7eb      	b.n	8087260 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
 8087288:	2d2f      	cmp	r5, #47	; 0x2f
 808728a:	d105      	bne.n	8087298 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x64>
 808728c:	461e      	mov	r6, r3
 808728e:	f813 5b01 	ldrb.w	r5, [r3], #1
 8087292:	2d20      	cmp	r5, #32
 8087294:	d1f8      	bne.n	8087288 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x54>
 8087296:	e7f9      	b.n	808728c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x58>
  *ptr = &path[end];
 8087298:	6016      	str	r6, [r2, #0]
 808729a:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
 808729c:	4298      	cmp	r0, r3
 808729e:	ebc0 0803 	rsb	r8, r0, r3
 80872a2:	d009      	beq.n	80872b8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x84>
    c = path[len - 1];
 80872a4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
 80872a8:	2a2e      	cmp	r2, #46	; 0x2e
 80872aa:	d0f7      	beq.n	808729c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x68>
 80872ac:	2a20      	cmp	r2, #32
 80872ae:	d0f5      	beq.n	808729c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x68>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
 80872b0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80872b4:	dcd4      	bgt.n	8087260 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
 80872b6:	e001      	b.n	80872bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
 80872b8:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
 80872bc:	f8c1 8004 	str.w	r8, [r1, #4]
 80872c0:	f101 030c 	add.w	r3, r1, #12
 80872c4:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
 80872c8:	2420      	movs	r4, #32
 80872ca:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
 80872ce:	4293      	cmp	r3, r2
 80872d0:	d1fb      	bne.n	80872ca <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x96>
 80872d2:	4603      	mov	r3, r0
 80872d4:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 80872d6:	f813 4b01 	ldrb.w	r4, [r3], #1
 80872da:	2c2e      	cmp	r4, #46	; 0x2e
 80872dc:	d0fa      	beq.n	80872d4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa0>
 80872de:	2c20      	cmp	r4, #32
 80872e0:	d0f8      	beq.n	80872d4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa0>
  // Not 8.3 if leading dot or space.
  is83 = !si;
 80872e2:	fab2 f482 	clz	r4, r2

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 80872e6:	f108 36ff 	add.w	r6, r8, #4294967295
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
  // Not 8.3 if leading dot or space.
  is83 = !si;
 80872ea:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 80872ec:	1c73      	adds	r3, r6, #1
 80872ee:	d107      	bne.n	8087300 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xcc>
 80872f0:	2700      	movs	r7, #0
 80872f2:	f04f 0e07 	mov.w	lr, #7
 80872f6:	463d      	mov	r5, r7
 80872f8:	46ba      	mov	sl, r7
 80872fa:	f04f 0908 	mov.w	r9, #8
 80872fe:	e009      	b.n	8087314 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
 8087300:	5d83      	ldrb	r3, [r0, r6]
 8087302:	2b2e      	cmp	r3, #46	; 0x2e
 8087304:	d0f4      	beq.n	80872f0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbc>
 8087306:	3e01      	subs	r6, #1
 8087308:	e7f0      	b.n	80872ec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xb8>
  for (; si < len; si++) {
    c = path[si];
 808730a:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
 808730c:	2b20      	cmp	r3, #32
 808730e:	d104      	bne.n	808731a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe6>
      is83 = false;
 8087310:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
 8087312:	3201      	adds	r2, #1
 8087314:	4542      	cmp	r2, r8
 8087316:	dbf8      	blt.n	808730a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
 8087318:	e04b      	b.n	80873b2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
 808731a:	2b2e      	cmp	r3, #46	; 0x2e
 808731c:	d102      	bne.n	8087324 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
 808731e:	42b2      	cmp	r2, r6
 8087320:	d1f6      	bne.n	8087310 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xdc>
 8087322:	e003      	b.n	808732c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
 8087324:	2b22      	cmp	r3, #34	; 0x22
 8087326:	d017      	beq.n	8087358 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
 8087328:	2b7c      	cmp	r3, #124	; 0x7c
 808732a:	d015      	beq.n	8087358 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
 808732c:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
 8087330:	f1bc 0f05 	cmp.w	ip, #5
 8087334:	d801      	bhi.n	808733a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x106>
 8087336:	2b2d      	cmp	r3, #45	; 0x2d
 8087338:	d10e      	bne.n	8087358 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
 808733a:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
 808733e:	f1bc 0f05 	cmp.w	ip, #5
 8087342:	d909      	bls.n	8087358 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
 8087344:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
 8087348:	f1bc 0f02 	cmp.w	ip, #2
 808734c:	d904      	bls.n	8087358 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
 808734e:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
 8087352:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
 8087356:	d902      	bls.n	808735e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12a>
 8087358:	42b2      	cmp	r2, r6
 808735a:	d10e      	bne.n	808737a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x146>
 808735c:	e049      	b.n	80873f2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1be>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
 808735e:	42b2      	cmp	r2, r6
 8087360:	d047      	beq.n	80873f2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1be>
 8087362:	4575      	cmp	r5, lr
 8087364:	d821      	bhi.n	80873aa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x176>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
 8087366:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 808736a:	f1bc 0f19 	cmp.w	ip, #25
 808736e:	d808      	bhi.n	8087382 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14e>
        c += 'A' - 'a';
 8087370:	3b20      	subs	r3, #32
 8087372:	b2db      	uxtb	r3, r3
        lc |= bit;
 8087374:	ea49 0707 	orr.w	r7, r9, r7
 8087378:	e00a      	b.n	8087390 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15c>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
 808737a:	4575      	cmp	r5, lr
 808737c:	d815      	bhi.n	80873aa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x176>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
 808737e:	2400      	movs	r4, #0
      c = '_';
 8087380:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
 8087382:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 8087386:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
 808738a:	bf98      	it	ls
 808738c:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
 8087390:	f105 0c01 	add.w	ip, r5, #1
 8087394:	fa5f fc8c 	uxtb.w	ip, ip
 8087398:	440d      	add	r5, r1
      if (i < 7) {
 808739a:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
 808739e:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
 80873a0:	d801      	bhi.n	80873a6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x172>
        fname->seqPos = i;
 80873a2:	f881 c00c 	strb.w	ip, [r1, #12]
 80873a6:	4665      	mov	r5, ip
 80873a8:	e7b3      	b.n	8087312 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
 80873aa:	f1be 0f0a 	cmp.w	lr, #10
 80873ae:	d117      	bne.n	80873e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
 80873b0:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
 80873b2:	7b4b      	ldrb	r3, [r1, #13]
 80873b4:	2b20      	cmp	r3, #32
 80873b6:	f43f af53 	beq.w	8087260 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
    return false;
  }

  if (is83) {
 80873ba:	b13c      	cbz	r4, 80873cc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x198>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
 80873bc:	ea1a 0f07 	tst.w	sl, r7
 80873c0:	bf18      	it	ne
 80873c2:	2702      	movne	r7, #2
 80873c4:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
 80873c6:	2001      	movs	r0, #1
 80873c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
 80873cc:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
 80873ce:	2001      	movs	r0, #1
 80873d0:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
 80873d2:	4419      	add	r1, r3
 80873d4:	237e      	movs	r3, #126	; 0x7e
 80873d6:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
 80873d8:	2331      	movs	r3, #49	; 0x31
 80873da:	738b      	strb	r3, [r1, #14]
 80873dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
 80873e0:	42b2      	cmp	r2, r6
 80873e2:	dce5      	bgt.n	80873b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17c>
 80873e4:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
 80873e6:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
 80873ea:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 80873ec:	f04f 0910 	mov.w	r9, #16
 80873f0:	e78e      	b.n	8087310 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xdc>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
 80873f2:	f1be 0f0a 	cmp.w	lr, #10
 80873f6:	d0db      	beq.n	80873b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17c>
 80873f8:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
 80873fa:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
 80873fe:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 8087400:	f04f 0910 	mov.w	r9, #16
 8087404:	e785      	b.n	8087312 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
 8087406:	bf00      	nop
 8087408:	31000101 	.word	0x31000101

0808740c <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
 808740c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8087410:	4606      	mov	r6, r0
 8087412:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
 8087414:	f891 900c 	ldrb.w	r9, [r1, #12]
 8087418:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 808741a:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 808741c:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
 8087420:	6869      	ldr	r1, [r5, #4]
 8087422:	68aa      	ldr	r2, [r5, #8]
 8087424:	1863      	adds	r3, r4, r1
 8087426:	b29b      	uxth	r3, r3
 8087428:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
 808742a:	4291      	cmp	r1, r2
 808742c:	d006      	beq.n	808743c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
 808742e:	f812 0b01 	ldrb.w	r0, [r2], #1
 8087432:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 8087436:	4043      	eors	r3, r0
 8087438:	b29b      	uxth	r3, r3
 808743a:	e7f6      	b.n	808742a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
 808743c:	f1b9 0f03 	cmp.w	r9, #3
 8087440:	bf28      	it	cs
 8087442:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8087446:	f109 0204 	add.w	r2, r9, #4
 808744a:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
 808744c:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8087450:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8087452:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8087454:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8087456:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8087458:	bf94      	ite	ls
 808745a:	3130      	addls	r1, #48	; 0x30
 808745c:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 808745e:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8087460:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
 8087462:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8087466:	d3f1      	bcc.n	808744c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 8087468:	eb05 0309 	add.w	r3, r5, r9
 808746c:	735f      	strb	r7, [r3, #13]
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
 808746e:	2100      	movs	r1, #0
 8087470:	4630      	mov	r0, r6
 8087472:	f000 fe38 	bl	80880e6 <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
 8087476:	2101      	movs	r1, #1
 8087478:	4630      	mov	r0, r6
 808747a:	f000 fe17 	bl	80880ac <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
 808747e:	4601      	mov	r1, r0
 8087480:	b928      	cbnz	r0, 808748e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
 8087482:	7870      	ldrb	r0, [r6, #1]
 8087484:	fab0 f080 	clz	r0, r0
 8087488:	0940      	lsrs	r0, r0, #5
 808748a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
 808748e:	7803      	ldrb	r3, [r0, #0]
 8087490:	b14b      	cbz	r3, 80874a6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 8087492:	7ac3      	ldrb	r3, [r0, #11]
 8087494:	071b      	lsls	r3, r3, #28
 8087496:	d4ee      	bmi.n	8087476 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 8087498:	220b      	movs	r2, #11
 808749a:	4640      	mov	r0, r8
 808749c:	f006 f9d4 	bl	808d848 <memcmp>
 80874a0:	2800      	cmp	r0, #0
 80874a2:	d1e8      	bne.n	8087476 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 80874a4:	e002      	b.n	80874ac <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
 80874a6:	2001      	movs	r0, #1
 80874a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80874ac:	3401      	adds	r4, #1
 80874ae:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
 80874b0:	2c64      	cmp	r4, #100	; 0x64
 80874b2:	d1b5      	bne.n	8087420 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
 80874b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080874b8 <_ZN7FatFile4openEPS_P7fname_th>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 80874b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80874bc:	b089      	sub	sp, #36	; 0x24
 80874be:	9303      	str	r3, [sp, #12]
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 80874c0:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 80874c2:	9005      	str	r0, [sp, #20]
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 80874c4:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 80874c8:	460e      	mov	r6, r1
 80874ca:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 80874cc:	d101      	bne.n	80874d2 <_ZN7FatFile4openEPS_P7fname_th+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
 80874ce:	2000      	movs	r0, #0
 80874d0:	e199      	b.n	8087806 <_ZN7FatFile4openEPS_P7fname_th+0x34e>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 80874d2:	9b05      	ldr	r3, [sp, #20]
 80874d4:	781b      	ldrb	r3, [r3, #0]
 80874d6:	2b00      	cmp	r3, #0
 80874d8:	d1f9      	bne.n	80874ce <_ZN7FatFile4openEPS_P7fname_th+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 80874da:	7813      	ldrb	r3, [r2, #0]
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
 80874dc:	f8d2 b004 	ldr.w	fp, [r2, #4]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 80874e0:	079b      	lsls	r3, r3, #30
 80874e2:	f000 8186 	beq.w	80877f2 <_ZN7FatFile4openEPS_P7fname_th+0x33a>
 80874e6:	f10b 030c 	add.w	r3, fp, #12
 80874ea:	270d      	movs	r7, #13
 80874ec:	fbb3 f7f7 	udiv	r7, r3, r7
 80874f0:	3701      	adds	r7, #1
 80874f2:	b2ff      	uxtb	r7, r7
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
 80874f4:	f04f 0800 	mov.w	r8, #0
 80874f8:	2100      	movs	r1, #0
 80874fa:	4630      	mov	r0, r6
 80874fc:	f000 fdf3 	bl	80880e6 <_ZN7FatFile7seekSetEm>
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
 8087500:	4645      	mov	r5, r8
  uint8_t ord = 0;
 8087502:	4643      	mov	r3, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
 8087504:	4644      	mov	r4, r8
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8087506:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
 808750a:	f8cd 8008 	str.w	r8, [sp, #8]
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
  bool fnameFound = false;
 808750e:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8087512:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 8087514:	6972      	ldr	r2, [r6, #20]
    dir = dirFile->readDirCache(true);
 8087516:	2101      	movs	r1, #1
 8087518:	4630      	mov	r0, r6
 808751a:	9307      	str	r3, [sp, #28]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 808751c:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
 8087520:	f000 fdc4 	bl	80880ac <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 8087524:	9b07      	ldr	r3, [sp, #28]
 8087526:	b920      	cbnz	r0, 8087532 <_ZN7FatFile4openEPS_P7fname_th+0x7a>
      if (dirFile->getError()) {
 8087528:	7873      	ldrb	r3, [r6, #1]
 808752a:	2b00      	cmp	r3, #0
 808752c:	f000 808e 	beq.w	808764c <_ZN7FatFile4openEPS_P7fname_th+0x194>
 8087530:	e7cd      	b.n	80874ce <_ZN7FatFile4openEPS_P7fname_th+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
 8087532:	7802      	ldrb	r2, [r0, #0]
 8087534:	2ae5      	cmp	r2, #229	; 0xe5
 8087536:	d000      	beq.n	808753a <_ZN7FatFile4openEPS_P7fname_th+0x82>
 8087538:	b942      	cbnz	r2, 808754c <_ZN7FatFile4openEPS_P7fname_th+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 808753a:	2d00      	cmp	r5, #0
 808753c:	bf08      	it	eq
 808753e:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
 8087540:	42bd      	cmp	r5, r7
        freeFound++;
 8087542:	bf3c      	itt	cc
 8087544:	3501      	addcc	r5, #1
 8087546:	b2ed      	uxtbcc	r5, r5
      }
      if (dir->name[0] == DIR_NAME_FREE) {
 8087548:	b922      	cbnz	r2, 8087554 <_ZN7FatFile4openEPS_P7fname_th+0x9c>
 808754a:	e07f      	b.n	808764c <_ZN7FatFile4openEPS_P7fname_th+0x194>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
 808754c:	42bd      	cmp	r5, r7
 808754e:	bf38      	it	cc
 8087550:	2500      	movcc	r5, #0
 8087552:	e003      	b.n	808755c <_ZN7FatFile4openEPS_P7fname_th+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 8087554:	2ae5      	cmp	r2, #229	; 0xe5
 8087556:	d101      	bne.n	808755c <_ZN7FatFile4openEPS_P7fname_th+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
 8087558:	2400      	movs	r4, #0
 808755a:	e7db      	b.n	8087514 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 808755c:	2a2e      	cmp	r2, #46	; 0x2e
 808755e:	d0fb      	beq.n	8087558 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 8087560:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
 8087562:	290f      	cmp	r1, #15
 8087564:	d150      	bne.n	8087608 <_ZN7FatFile4openEPS_P7fname_th+0x150>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
 8087566:	b93c      	cbnz	r4, 8087578 <_ZN7FatFile4openEPS_P7fname_th+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
 8087568:	0651      	lsls	r1, r2, #25
 808756a:	d5d3      	bpl.n	8087514 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
 808756c:	7b43      	ldrb	r3, [r0, #13]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
 808756e:	f002 041f 	and.w	r4, r2, #31
        chksum = ldir->chksum;
 8087572:	9302      	str	r3, [sp, #8]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
 8087574:	4623      	mov	r3, r4
 8087576:	e007      	b.n	8087588 <_ZN7FatFile4openEPS_P7fname_th+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
 8087578:	3b01      	subs	r3, #1
 808757a:	b2db      	uxtb	r3, r3
 808757c:	429a      	cmp	r2, r3
 808757e:	d1eb      	bne.n	8087558 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 8087580:	7b42      	ldrb	r2, [r0, #13]
 8087582:	9902      	ldr	r1, [sp, #8]
 8087584:	4291      	cmp	r1, r2
 8087586:	d1e7      	bne.n	8087558 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
 8087588:	1e5a      	subs	r2, r3, #1
 808758a:	f04f 0c0d 	mov.w	ip, #13
 808758e:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
 8087592:	45e3      	cmp	fp, ip
 8087594:	d9e0      	bls.n	8087558 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 8087596:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
 808759a:	f1be 0f04 	cmp.w	lr, #4
 808759e:	fa5f f28e 	uxtb.w	r2, lr
 80875a2:	d804      	bhi.n	80875ae <_ZN7FatFile4openEPS_P7fname_th+0xf6>
    return ldir->name1[i];
 80875a4:	eb00 024e 	add.w	r2, r0, lr, lsl #1
 80875a8:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 80875ac:	e00c      	b.n	80875c8 <_ZN7FatFile4openEPS_P7fname_th+0x110>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 80875ae:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
 80875b0:	bf95      	itete	ls
 80875b2:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 80875b6:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 80875ba:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 80875be:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 80875c2:	bf94      	ite	ls
 80875c4:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 80875c6:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
 80875c8:	45e3      	cmp	fp, ip
 80875ca:	d103      	bne.n	80875d4 <_ZN7FatFile4openEPS_P7fname_th+0x11c>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
 80875cc:	2a00      	cmp	r2, #0
 80875ce:	bf18      	it	ne
 80875d0:	2400      	movne	r4, #0
 80875d2:	e79f      	b.n	8087514 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 80875d4:	2aff      	cmp	r2, #255	; 0xff
 80875d6:	d8bf      	bhi.n	8087558 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 80875d8:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 80875da:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 80875de:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 80875e0:	f8d9 1008 	ldr.w	r1, [r9, #8]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 80875e4:	bf98      	it	ls
 80875e6:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 80875e8:	f811 100c 	ldrb.w	r1, [r1, ip]
 80875ec:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 80875f0:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
 80875f4:	bf98      	it	ls
 80875f6:	b2d2      	uxtbls	r2, r2
 80875f8:	f1bc 0f19 	cmp.w	ip, #25
 80875fc:	bf9c      	itt	ls
 80875fe:	3120      	addls	r1, #32
 8087600:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8087602:	4291      	cmp	r1, r2
 8087604:	d1a8      	bne.n	8087558 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 8087606:	e0f6      	b.n	80877f6 <_ZN7FatFile4openEPS_P7fname_th+0x33e>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
 8087608:	070a      	lsls	r2, r1, #28
 808760a:	d4a5      	bmi.n	8087558 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
      if (lfnOrd) {
 808760c:	b14c      	cbz	r4, 8087622 <_ZN7FatFile4openEPS_P7fname_th+0x16a>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
 808760e:	2b01      	cmp	r3, #1
 8087610:	f47f af5d 	bne.w	80874ce <_ZN7FatFile4openEPS_P7fname_th+0x16>
 8087614:	f7ff fdff 	bl	8087216 <_ZN7FatFile11lfnChecksumEPh>
 8087618:	9b02      	ldr	r3, [sp, #8]
 808761a:	4283      	cmp	r3, r0
 808761c:	f47f af57 	bne.w	80874ce <_ZN7FatFile4openEPS_P7fname_th+0x16>
 8087620:	e00f      	b.n	8087642 <_ZN7FatFile4openEPS_P7fname_th+0x18a>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8087622:	220b      	movs	r2, #11
 8087624:	9906      	ldr	r1, [sp, #24]
 8087626:	9307      	str	r3, [sp, #28]
 8087628:	f006 f90e 	bl	808d848 <memcmp>
 808762c:	9b07      	ldr	r3, [sp, #28]
 808762e:	2800      	cmp	r0, #0
 8087630:	f47f af70 	bne.w	8087514 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
 8087634:	f899 2000 	ldrb.w	r2, [r9]
 8087638:	07d1      	lsls	r1, r2, #31
 808763a:	d502      	bpl.n	8087642 <_ZN7FatFile4openEPS_P7fname_th+0x18a>
          goto found;
        }
        fnameFound = true;
 808763c:	2201      	movs	r2, #1
 808763e:	9204      	str	r2, [sp, #16]
 8087640:	e768      	b.n	8087514 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
 8087642:	9b03      	ldr	r3, [sp, #12]
 8087644:	061a      	lsls	r2, r3, #24
 8087646:	f140 80cc 	bpl.w	80877e2 <_ZN7FatFile4openEPS_P7fname_th+0x32a>
 808764a:	e740      	b.n	80874ce <_ZN7FatFile4openEPS_P7fname_th+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and O_WRITE
  if (!(oflag & O_CREAT) || !(oflag & O_WRITE)) {
 808764c:	9b03      	ldr	r3, [sp, #12]
 808764e:	f003 0342 	and.w	r3, r3, #66	; 0x42
 8087652:	2b42      	cmp	r3, #66	; 0x42
 8087654:	f47f af3b 	bne.w	80874ce <_ZN7FatFile4openEPS_P7fname_th+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
 8087658:	2d00      	cmp	r5, #0
 808765a:	bf08      	it	eq
 808765c:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
 808765e:	42bd      	cmp	r5, r7
 8087660:	d302      	bcc.n	8087668 <_ZN7FatFile4openEPS_P7fname_th+0x1b0>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
 8087662:	9b04      	ldr	r3, [sp, #16]
 8087664:	b9cb      	cbnz	r3, 808769a <_ZN7FatFile4openEPS_P7fname_th+0x1e2>
 8087666:	e01f      	b.n	80876a8 <_ZN7FatFile4openEPS_P7fname_th+0x1f0>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
 8087668:	2100      	movs	r1, #0
 808766a:	4630      	mov	r0, r6
 808766c:	f000 fd1e 	bl	80880ac <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 8087670:	b910      	cbnz	r0, 8087678 <_ZN7FatFile4openEPS_P7fname_th+0x1c0>
      if (dirFile->getError()) {
 8087672:	7873      	ldrb	r3, [r6, #1]
 8087674:	b15b      	cbz	r3, 808768e <_ZN7FatFile4openEPS_P7fname_th+0x1d6>
 8087676:	e72a      	b.n	80874ce <_ZN7FatFile4openEPS_P7fname_th+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
 8087678:	3501      	adds	r5, #1
 808767a:	b2ed      	uxtb	r5, r5
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
 808767c:	e7ef      	b.n	808765e <_ZN7FatFile4openEPS_P7fname_th+0x1a6>
 808767e:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
 8087680:	791b      	ldrb	r3, [r3, #4]
 8087682:	2b01      	cmp	r3, #1
 8087684:	d8ed      	bhi.n	8087662 <_ZN7FatFile4openEPS_P7fname_th+0x1aa>
      break;
    }
    freeFound += 16;
 8087686:	3510      	adds	r5, #16
 8087688:	b2ed      	uxtb	r5, r5
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
 808768a:	42af      	cmp	r7, r5
 808768c:	d9e9      	bls.n	8087662 <_ZN7FatFile4openEPS_P7fname_th+0x1aa>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
 808768e:	4630      	mov	r0, r6
 8087690:	f000 fbde 	bl	8087e50 <_ZN7FatFile13addDirClusterEv>
 8087694:	2800      	cmp	r0, #0
 8087696:	d1f2      	bne.n	808767e <_ZN7FatFile4openEPS_P7fname_th+0x1c6>
 8087698:	e719      	b.n	80874ce <_ZN7FatFile4openEPS_P7fname_th+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
 808769a:	4649      	mov	r1, r9
 808769c:	4630      	mov	r0, r6
 808769e:	f7ff feb5 	bl	808740c <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
 80876a2:	2800      	cmp	r0, #0
 80876a4:	f43f af13 	beq.w	80874ce <_ZN7FatFile4openEPS_P7fname_th+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
 80876a8:	ea4f 1148 	mov.w	r1, r8, lsl #5
 80876ac:	4630      	mov	r0, r6
 80876ae:	f000 fd1a 	bl	80880e6 <_ZN7FatFile7seekSetEm>
 80876b2:	2800      	cmp	r0, #0
 80876b4:	f43f af0b 	beq.w	80874ce <_ZN7FatFile4openEPS_P7fname_th+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
 80876b8:	1e7c      	subs	r4, r7, #1
 80876ba:	b2e4      	uxtb	r4, r4
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 80876bc:	4625      	mov	r5, r4
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 80876be:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
 80876c2:	f04f 080f 	mov.w	r8, #15
 80876c6:	e040      	b.n	808774a <_ZN7FatFile4openEPS_P7fname_th+0x292>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 80876c8:	2100      	movs	r1, #0
 80876ca:	4630      	mov	r0, r6
 80876cc:	f000 fcee 	bl	80880ac <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
 80876d0:	4607      	mov	r7, r0
 80876d2:	2800      	cmp	r0, #0
 80876d4:	f43f aefb 	beq.w	80874ce <_ZN7FatFile4openEPS_P7fname_th+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
 80876d8:	68b2      	ldr	r2, [r6, #8]
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 80876da:	42a5      	cmp	r5, r4
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
 80876dc:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80876e0:	f043 0301 	orr.w	r3, r3, #1
 80876e4:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 80876e8:	bf14      	ite	ne
 80876ea:	462a      	movne	r2, r5
 80876ec:	f045 0240 	orreq.w	r2, r5, #64	; 0x40
 80876f0:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
 80876f2:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
 80876f6:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
 80876fa:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 80876fe:	9202      	str	r2, [sp, #8]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
 8087700:	f7ff fd89 	bl	8087216 <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8087704:	9a02      	ldr	r2, [sp, #8]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
 8087706:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
 8087708:	f887 a01a 	strb.w	sl, [r7, #26]
 808770c:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8087710:	f002 021f 	and.w	r2, r2, #31
 8087714:	230d      	movs	r3, #13
 8087716:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
 8087718:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 808771c:	435a      	muls	r2, r3
 808771e:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 8087720:	4593      	cmp	fp, r2
 8087722:	d915      	bls.n	8087750 <_ZN7FatFile4openEPS_P7fname_th+0x298>
 8087724:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
 8087728:	2b04      	cmp	r3, #4
 808772a:	fa5f fc83 	uxtb.w	ip, r3
 808772e:	f103 0001 	add.w	r0, r3, #1
 8087732:	d813      	bhi.n	808775c <_ZN7FatFile4openEPS_P7fname_th+0x2a4>
    ldir->name1[i] = c;
 8087734:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8087738:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
 808773c:	280d      	cmp	r0, #13
 808773e:	f102 0201 	add.w	r2, r2, #1
 8087742:	4603      	mov	r3, r0
 8087744:	d1ec      	bne.n	8087720 <_ZN7FatFile4openEPS_P7fname_th+0x268>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 8087746:	3d01      	subs	r5, #1
 8087748:	b2ed      	uxtb	r5, r5
 808774a:	2d00      	cmp	r5, #0
 808774c:	d1bc      	bne.n	80876c8 <_ZN7FatFile4openEPS_P7fname_th+0x210>
 808774e:	e00e      	b.n	808776e <_ZN7FatFile4openEPS_P7fname_th+0x2b6>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 8087750:	bf14      	ite	ne
 8087752:	f04f 31ff 	movne.w	r1, #4294967295
 8087756:	2100      	moveq	r1, #0
 8087758:	b289      	uxth	r1, r1
 808775a:	e7e5      	b.n	8087728 <_ZN7FatFile4openEPS_P7fname_th+0x270>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 808775c:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
 8087760:	bf94      	ite	ls
 8087762:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
 8087766:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
 808776a:	8099      	strh	r1, [r3, #4]
 808776c:	e7e6      	b.n	808773c <_ZN7FatFile4openEPS_P7fname_th+0x284>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
 808776e:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
 8087770:	4629      	mov	r1, r5
 8087772:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
 8087774:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
 8087778:	f000 fc98 	bl	80880ac <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
 808777c:	4607      	mov	r7, r0
 808777e:	2800      	cmp	r0, #0
 8087780:	f43f aea5 	beq.w	80874ce <_ZN7FatFile4openEPS_P7fname_th+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
 8087784:	2220      	movs	r2, #32
 8087786:	4629      	mov	r1, r5
 8087788:	f006 f878 	bl	808d87c <memset>
  memcpy(dir->name, fname->sfn, 11);
 808778c:	464b      	mov	r3, r9
 808778e:	f853 2f0d 	ldr.w	r2, [r3, #13]!
 8087792:	603a      	str	r2, [r7, #0]
 8087794:	685a      	ldr	r2, [r3, #4]
 8087796:	607a      	str	r2, [r7, #4]
 8087798:	891a      	ldrh	r2, [r3, #8]
 808779a:	813a      	strh	r2, [r7, #8]
 808779c:	7a9b      	ldrb	r3, [r3, #10]
 808779e:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
 80877a0:	f899 3000 	ldrb.w	r3, [r9]
 80877a4:	f003 0318 	and.w	r3, r3, #24
 80877a8:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
 80877aa:	4b18      	ldr	r3, [pc, #96]	; (808780c <_ZN7FatFile4openEPS_P7fname_th+0x354>)
 80877ac:	681b      	ldr	r3, [r3, #0]
 80877ae:	b12b      	cbz	r3, 80877bc <_ZN7FatFile4openEPS_P7fname_th+0x304>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
 80877b0:	f107 010e 	add.w	r1, r7, #14
 80877b4:	f107 0010 	add.w	r0, r7, #16
 80877b8:	4798      	blx	r3
 80877ba:	e006      	b.n	80877ca <_ZN7FatFile4openEPS_P7fname_th+0x312>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
 80877bc:	2321      	movs	r3, #33	; 0x21
 80877be:	743b      	strb	r3, [r7, #16]
 80877c0:	2328      	movs	r3, #40	; 0x28
 80877c2:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
 80877c4:	2308      	movs	r3, #8
 80877c6:	73bd      	strb	r5, [r7, #14]
 80877c8:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
 80877ca:	8a3b      	ldrh	r3, [r7, #16]
 80877cc:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
 80877ce:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
 80877d0:	89fb      	ldrh	r3, [r7, #14]
 80877d2:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
 80877d4:	68b2      	ldr	r2, [r6, #8]
 80877d6:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80877da:	f043 0301 	orr.w	r3, r3, #1
 80877de:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
 80877e2:	9400      	str	r4, [sp, #0]
 80877e4:	9b03      	ldr	r3, [sp, #12]
 80877e6:	4652      	mov	r2, sl
 80877e8:	4631      	mov	r1, r6
 80877ea:	9805      	ldr	r0, [sp, #20]
 80877ec:	f000 fcc4 	bl	8088178 <_ZN7FatFile15openCachedEntryEPS_thh>
 80877f0:	e009      	b.n	8087806 <_ZN7FatFile4openEPS_P7fname_th+0x34e>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 80877f2:	2701      	movs	r7, #1
 80877f4:	e67e      	b.n	80874f4 <_ZN7FatFile4openEPS_P7fname_th+0x3c>
 80877f6:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
 80877fa:	f1be 0f0d 	cmp.w	lr, #13
 80877fe:	f43f ae89 	beq.w	8087514 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8087802:	46d4      	mov	ip, sl
 8087804:	e6c9      	b.n	808759a <_ZN7FatFile4openEPS_P7fname_th+0xe2>
  }
  return true;

fail:
  return false;
}
 8087806:	b009      	add	sp, #36	; 0x24
 8087808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808780c:	20000bc0 	.word	0x20000bc0

08087810 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
 8087810:	f001 bdb4 	b.w	808937c <HAL_Pin_Map>

08087814 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
 8087814:	f001 bdb2 	b.w	808937c <HAL_Pin_Map>

08087818 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
 8087818:	f001 bdb0 	b.w	808937c <HAL_Pin_Map>

0808781c <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
 808781c:	f001 bdae 	b.w	808937c <HAL_Pin_Map>

08087820 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spi->receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spi->send(data);
 8087820:	6803      	ldr	r3, [r0, #0]
 8087822:	695b      	ldr	r3, [r3, #20]
 8087824:	4718      	bx	r3

08087826 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>:
  }
  void spiEndTransaction() {
    m_spi->endTransaction();
  }
  uint8_t spiReceive() {
    return m_spi->receive();
 8087826:	6803      	ldr	r3, [r0, #0]
 8087828:	68db      	ldr	r3, [r3, #12]
 808782a:	4718      	bx	r3

0808782c <_ZN9SdSpiCard14chipSelectHighEv>:
    error(SD_CARD_ERROR_BAD_CSD);
    return 0;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectHigh() {
 808782c:	b510      	push	{r4, lr}
  if (!m_selected) {
 808782e:	7903      	ldrb	r3, [r0, #4]
    error(SD_CARD_ERROR_BAD_CSD);
    return 0;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectHigh() {
 8087830:	4604      	mov	r4, r0
  if (!m_selected) {
 8087832:	b16b      	cbz	r3, 8087850 <_ZN9SdSpiCard14chipSelectHighEv+0x24>
    SD_CS_DBG("chipSelectHigh error");
    return;
  }
  digitalWrite(m_chipSelectPin, HIGH);
 8087834:	2101      	movs	r1, #1
 8087836:	7940      	ldrb	r0, [r0, #5]
 8087838:	f004 fa77 	bl	808bd2a <digitalWrite>
  // insure MISO goes high impedance
  spiSend(0XFF);
 808783c:	21ff      	movs	r1, #255	; 0xff
 808783e:	6820      	ldr	r0, [r4, #0]
 8087840:	f7ff ffee 	bl	8087820 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
 8087844:	6820      	ldr	r0, [r4, #0]
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
  }
  void spiEndTransaction() {
    m_spi->endTransaction();
 8087846:	6803      	ldr	r3, [r0, #0]
 8087848:	689b      	ldr	r3, [r3, #8]
 808784a:	4798      	blx	r3
  spiEndTransaction();
  m_selected = false;
 808784c:	2300      	movs	r3, #0
 808784e:	7123      	strb	r3, [r4, #4]
 8087850:	bd10      	pop	{r4, pc}

08087852 <_ZN9SdSpiCard13chipSelectLowEv>:
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectLow() {
 8087852:	b538      	push	{r3, r4, r5, lr}
  if (m_selected) {
 8087854:	7905      	ldrb	r5, [r0, #4]
  spiSend(0XFF);
  spiEndTransaction();
  m_selected = false;
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectLow() {
 8087856:	4604      	mov	r4, r0
  if (m_selected) {
 8087858:	b955      	cbnz	r5, 8087870 <_ZN9SdSpiCard13chipSelectLowEv+0x1e>
 808785a:	6800      	ldr	r0, [r0, #0]
  bool writeData(uint8_t token, const uint8_t* src);
  void spiBegin(uint8_t chipSelectPin) {
    m_spi->begin(chipSelectPin);
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
 808785c:	79e1      	ldrb	r1, [r4, #7]
 808785e:	6803      	ldr	r3, [r0, #0]
 8087860:	685b      	ldr	r3, [r3, #4]
 8087862:	4798      	blx	r3
    SD_CS_DBG("chipSelectLow error");
    return;
  }
  spiBeginTransaction(m_sckDivisor);
  digitalWrite(m_chipSelectPin, LOW);
 8087864:	4629      	mov	r1, r5
 8087866:	7960      	ldrb	r0, [r4, #5]
 8087868:	f004 fa5f 	bl	808bd2a <digitalWrite>
  m_selected = true;
 808786c:	2301      	movs	r3, #1
 808786e:	7123      	strb	r3, [r4, #4]
 8087870:	bd38      	pop	{r3, r4, r5, pc}

08087872 <_ZN9SdSpiCard8readDataEPhj>:
    chipSelectHigh();
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
 8087872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8087874:	4604      	mov	r4, r0
 8087876:	460d      	mov	r5, r1
 8087878:	4616      	mov	r6, r2
 808787a:	f001 fe2f 	bl	80894dc <HAL_Timer_Get_Milli_Seconds>
 808787e:	4607      	mov	r7, r0
#if USE_SD_CRC
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start block token
  unsigned t0 = millis();
  while ((m_status = spiReceive()) == 0XFF) {
 8087880:	6820      	ldr	r0, [r4, #0]
 8087882:	f7ff ffd0 	bl	8087826 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8087886:	28ff      	cmp	r0, #255	; 0xff
 8087888:	7220      	strb	r0, [r4, #8]
 808788a:	d107      	bne.n	808789c <_ZN9SdSpiCard8readDataEPhj+0x2a>
 808788c:	f001 fe26 	bl	80894dc <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_READ_TIMEOUT) {
 8087890:	1bc0      	subs	r0, r0, r7
 8087892:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
 8087896:	d9f3      	bls.n	8087880 <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8087898:	2311      	movs	r3, #17
 808789a:	e00c      	b.n	80878b6 <_ZN9SdSpiCard8readDataEPhj+0x44>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (m_status != DATA_START_BLOCK) {
 808789c:	28fe      	cmp	r0, #254	; 0xfe
 808789e:	d001      	beq.n	80878a4 <_ZN9SdSpiCard8readDataEPhj+0x32>
 80878a0:	230f      	movs	r3, #15
 80878a2:	e008      	b.n	80878b6 <_ZN9SdSpiCard8readDataEPhj+0x44>
 80878a4:	6820      	ldr	r0, [r4, #0]
  }
  uint8_t spiReceive() {
    return m_spi->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spi->receive(buf, n);
 80878a6:	4632      	mov	r2, r6
 80878a8:	6803      	ldr	r3, [r0, #0]
 80878aa:	4629      	mov	r1, r5
 80878ac:	691b      	ldr	r3, [r3, #16]
 80878ae:	4798      	blx	r3
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
 80878b0:	7220      	strb	r0, [r4, #8]
 80878b2:	b130      	cbz	r0, 80878c2 <_ZN9SdSpiCard8readDataEPhj+0x50>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80878b4:	231c      	movs	r3, #28
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  chipSelectHigh();
 80878b6:	4620      	mov	r0, r4
 80878b8:	71a3      	strb	r3, [r4, #6]
 80878ba:	f7ff ffb7 	bl	808782c <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 80878be:	2000      	movs	r0, #0
}
 80878c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    error(SD_CARD_ERROR_READ_CRC);
    goto fail;
  }
#else
  // discard crc
  spiReceive();
 80878c2:	6820      	ldr	r0, [r4, #0]
 80878c4:	f7ff ffaf 	bl	8087826 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
  spiReceive();
 80878c8:	6820      	ldr	r0, [r4, #0]
 80878ca:	f7ff ffac 	bl	8087826 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 80878ce:	2001      	movs	r0, #1
 80878d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080878d2 <_ZN9SdSpiCard11waitNotBusyEt>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMillis) {
 80878d2:	b570      	push	{r4, r5, r6, lr}
 80878d4:	4606      	mov	r6, r0
 80878d6:	460c      	mov	r4, r1
 80878d8:	f001 fe00 	bl	80894dc <HAL_Timer_Get_Milli_Seconds>
 80878dc:	4605      	mov	r5, r0
  unsigned t0 = millis();
  while (spiReceive() != 0XFF) {
 80878de:	6830      	ldr	r0, [r6, #0]
 80878e0:	f7ff ffa1 	bl	8087826 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 80878e4:	28ff      	cmp	r0, #255	; 0xff
 80878e6:	d006      	beq.n	80878f6 <_ZN9SdSpiCard11waitNotBusyEt+0x24>
 80878e8:	f001 fdf8 	bl	80894dc <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) >= timeoutMillis) {
 80878ec:	1b40      	subs	r0, r0, r5
 80878ee:	42a0      	cmp	r0, r4
 80878f0:	d3f5      	bcc.n	80878de <_ZN9SdSpiCard11waitNotBusyEt+0xc>
    }
  }
  return true;

fail:
  return false;
 80878f2:	2000      	movs	r0, #0
 80878f4:	bd70      	pop	{r4, r5, r6, pc}
  while (spiReceive() != 0XFF) {
    if (((unsigned)millis() - t0) >= timeoutMillis) {
      goto fail;
    }
  }
  return true;
 80878f6:	2001      	movs	r0, #1

fail:
  return false;
}
 80878f8:	bd70      	pop	{r4, r5, r6, pc}

080878fa <_ZN9SdSpiCard11cardCommandEhm>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 80878fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_selected) {
 80878fc:	7903      	ldrb	r3, [r0, #4]
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 80878fe:	4604      	mov	r4, r0
 8087900:	460d      	mov	r5, r1
 8087902:	9201      	str	r2, [sp, #4]
  // select card
  if (!m_selected) {
 8087904:	b90b      	cbnz	r3, 808790a <_ZN9SdSpiCard11cardCommandEhm+0x10>
    chipSelectLow();
 8087906:	f7ff ffa4 	bl	8087852 <_ZN9SdSpiCard13chipSelectLowEv>
  }
  // wait if busy
  waitNotBusy(SD_WRITE_TIMEOUT);
 808790a:	f44f 7116 	mov.w	r1, #600	; 0x258
 808790e:	4620      	mov	r0, r4
 8087910:	f7ff ffdf 	bl	80878d2 <_ZN9SdSpiCard11waitNotBusyEt>
  for (uint8_t k = 0; k < 6; k++) {
    spiSend(d[k]);
  }
#else  // USE_SD_CRC
  // send command
  spiSend(cmd | 0x40);
 8087914:	f045 0140 	orr.w	r1, r5, #64	; 0x40
 8087918:	6820      	ldr	r0, [r4, #0]
 808791a:	f7ff ff81 	bl	8087820 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
 808791e:	f10d 0607 	add.w	r6, sp, #7
 8087922:	f10d 0703 	add.w	r7, sp, #3

  // send argument
  for (int8_t i = 3; i >= 0; i--) {
    spiSend(pa[i]);
 8087926:	f816 1901 	ldrb.w	r1, [r6], #-1
 808792a:	6820      	ldr	r0, [r4, #0]
 808792c:	f7ff ff78 	bl	8087820 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
#else  // USE_SD_CRC
  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t i = 3; i >= 0; i--) {
 8087930:	42be      	cmp	r6, r7
 8087932:	d1f8      	bne.n	8087926 <_ZN9SdSpiCard11cardCommandEhm+0x2c>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 8087934:	2d00      	cmp	r5, #0
 8087936:	bf0c      	ite	eq
 8087938:	2195      	moveq	r1, #149	; 0x95
 808793a:	2187      	movne	r1, #135	; 0x87
 808793c:	6820      	ldr	r0, [r4, #0]
 808793e:	f7ff ff6f 	bl	8087820 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
#endif  // USE_SD_CRC

  // skip stuff byte for stop read
  if (cmd == CMD12) {
 8087942:	2d0c      	cmp	r5, #12
 8087944:	d102      	bne.n	808794c <_ZN9SdSpiCard11cardCommandEhm+0x52>
    spiReceive();
 8087946:	6820      	ldr	r0, [r4, #0]
 8087948:	f7ff ff6d 	bl	8087826 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
  for (int8_t i = 3; i >= 0; i--) {
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 808794c:	2500      	movs	r5, #0
  if (cmd == CMD12) {
    spiReceive();
  }

  // wait for response
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i != 0XFF; i++) {
 808794e:	6820      	ldr	r0, [r4, #0]
 8087950:	f7ff ff69 	bl	8087826 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8087954:	0603      	lsls	r3, r0, #24
 8087956:	7220      	strb	r0, [r4, #8]
 8087958:	d503      	bpl.n	8087962 <_ZN9SdSpiCard11cardCommandEhm+0x68>
 808795a:	3501      	adds	r5, #1
 808795c:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8087960:	d1f5      	bne.n	808794e <_ZN9SdSpiCard11cardCommandEhm+0x54>
  }
  return m_status;
}
 8087962:	b003      	add	sp, #12
 8087964:	bdf0      	pop	{r4, r5, r6, r7, pc}

08087966 <_ZN9SdSpiCard5beginEP9SdSpiBasehh>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
 8087966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8087968:	461f      	mov	r7, r3
  m_errorCode = m_type = 0;
 808796a:	2300      	movs	r3, #0
  m_spi = spi;
  m_chipSelectPin = chipSelectPin;
 808796c:	7142      	strb	r2, [r0, #5]
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
  m_errorCode = m_type = 0;
 808796e:	7243      	strb	r3, [r0, #9]
 8087970:	7183      	strb	r3, [r0, #6]
  m_spi = spi;
 8087972:	6001      	str	r1, [r0, #0]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
 8087974:	4604      	mov	r4, r0
 8087976:	f001 fdb1 	bl	80894dc <HAL_Timer_Get_Milli_Seconds>
 808797a:	4606      	mov	r6, r0
 808797c:	6820      	ldr	r0, [r4, #0]
    m_type = value;
  }
  bool waitNotBusy(uint16_t timeoutMillis);
  bool writeData(uint8_t token, const uint8_t* src);
  void spiBegin(uint8_t chipSelectPin) {
    m_spi->begin(chipSelectPin);
 808797e:	7961      	ldrb	r1, [r4, #5]
 8087980:	6803      	ldr	r3, [r0, #0]
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
 8087982:	250a      	movs	r5, #10
    m_type = value;
  }
  bool waitNotBusy(uint16_t timeoutMillis);
  bool writeData(uint8_t token, const uint8_t* src);
  void spiBegin(uint8_t chipSelectPin) {
    m_spi->begin(chipSelectPin);
 8087984:	681b      	ldr	r3, [r3, #0]
 8087986:	4798      	blx	r3

  // initialize SPI bus and chip select pin.
  spiBegin(m_chipSelectPin);

  // set SCK rate for initialization commands.
  m_sckDivisor = SPI_SCK_INIT_DIVISOR;
 8087988:	2180      	movs	r1, #128	; 0x80
 808798a:	6820      	ldr	r0, [r4, #0]
 808798c:	71e1      	strb	r1, [r4, #7]
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
 808798e:	6803      	ldr	r3, [r0, #0]
 8087990:	685b      	ldr	r3, [r3, #4]
 8087992:	4798      	blx	r3
  spiBeginTransaction(m_sckDivisor);

  // must supply min of 74 clock cycles with CS high.
  for (uint8_t i = 0; i < 10; i++) {
    spiSend(0XFF);
 8087994:	21ff      	movs	r1, #255	; 0xff
 8087996:	6820      	ldr	r0, [r4, #0]
 8087998:	3d01      	subs	r5, #1
 808799a:	f7ff ff41 	bl	8087820 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
  // set SCK rate for initialization commands.
  m_sckDivisor = SPI_SCK_INIT_DIVISOR;
  spiBeginTransaction(m_sckDivisor);

  // must supply min of 74 clock cycles with CS high.
  for (uint8_t i = 0; i < 10; i++) {
 808799e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80879a2:	d1f7      	bne.n	8087994 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x2e>
 80879a4:	6820      	ldr	r0, [r4, #0]
  }
  void spiEndTransaction() {
    m_spi->endTransaction();
 80879a6:	6803      	ldr	r3, [r0, #0]
 80879a8:	689b      	ldr	r3, [r3, #8]
 80879aa:	4798      	blx	r3
    spiSend(0XFF);
  }
  spiEndTransaction();
  // command to go idle in SPI mode
  while (cardCommand(CMD0, 0) != R1_IDLE_STATE) {
 80879ac:	2200      	movs	r2, #0
 80879ae:	4611      	mov	r1, r2
 80879b0:	4620      	mov	r0, r4
 80879b2:	f7ff ffa2 	bl	80878fa <_ZN9SdSpiCard11cardCommandEhm>
 80879b6:	2801      	cmp	r0, #1
 80879b8:	d007      	beq.n	80879ca <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x64>
 80879ba:	f001 fd8f 	bl	80894dc <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 80879be:	1b80      	subs	r0, r0, r6
 80879c0:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 80879c4:	d9f2      	bls.n	80879ac <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80879c6:	2301      	movs	r3, #1
 80879c8:	e048      	b.n	8087a5c <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xf6>
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  while (1) {
    if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
 80879ca:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80879ce:	2108      	movs	r1, #8
 80879d0:	4620      	mov	r0, r4
 80879d2:	f7ff ff92 	bl	80878fa <_ZN9SdSpiCard11cardCommandEhm>
 80879d6:	2805      	cmp	r0, #5
 80879d8:	d101      	bne.n	80879de <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x78>
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void type(uint8_t value) {
    m_type = value;
 80879da:	2301      	movs	r3, #1
 80879dc:	e00b      	b.n	80879f6 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x90>
 80879de:	2504      	movs	r5, #4
      type(SD_CARD_TYPE_SD1);
      break;
    }
    for (uint8_t i = 0; i < 4; i++) {
      m_status = spiReceive();
 80879e0:	6820      	ldr	r0, [r4, #0]
 80879e2:	f7ff ff20 	bl	8087826 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 80879e6:	3d01      	subs	r5, #1
  while (1) {
    if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
      type(SD_CARD_TYPE_SD1);
      break;
    }
    for (uint8_t i = 0; i < 4; i++) {
 80879e8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
 80879ec:	7220      	strb	r0, [r4, #8]
  while (1) {
    if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
      type(SD_CARD_TYPE_SD1);
      break;
    }
    for (uint8_t i = 0; i < 4; i++) {
 80879ee:	d1f7      	bne.n	80879e0 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x7a>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
 80879f0:	28aa      	cmp	r0, #170	; 0xaa
 80879f2:	d108      	bne.n	8087a06 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xa0>
 80879f4:	2302      	movs	r3, #2
 80879f6:	7263      	strb	r3, [r4, #9]
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 80879f8:	7a63      	ldrb	r3, [r4, #9]
 80879fa:	2b02      	cmp	r3, #2
 80879fc:	bf0c      	ite	eq
 80879fe:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
 8087a02:	2500      	movne	r5, #0
 8087a04:	e007      	b.n	8087a16 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xb0>
 8087a06:	f001 fd69 	bl	80894dc <HAL_Timer_Get_Milli_Seconds>
    }
    if (m_status == 0XAA) {
      type(SD_CARD_TYPE_SD2);
      break;
    }
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 8087a0a:	1b80      	subs	r0, r0, r6
 8087a0c:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8087a10:	d9db      	bls.n	80879ca <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8087a12:	2302      	movs	r3, #2
 8087a14:	e022      	b.n	8087a5c <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xf6>
  bool writeStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
 8087a16:	2200      	movs	r2, #0
 8087a18:	2137      	movs	r1, #55	; 0x37
 8087a1a:	4620      	mov	r0, r4
 8087a1c:	f7ff ff6d 	bl	80878fa <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 8087a20:	462a      	mov	r2, r5
 8087a22:	2129      	movs	r1, #41	; 0x29
 8087a24:	4620      	mov	r0, r4
 8087a26:	f7ff ff68 	bl	80878fa <_ZN9SdSpiCard11cardCommandEhm>
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;

  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
 8087a2a:	4602      	mov	r2, r0
 8087a2c:	b138      	cbz	r0, 8087a3e <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xd8>
 8087a2e:	f001 fd55 	bl	80894dc <HAL_Timer_Get_Milli_Seconds>
    // check for timeout
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 8087a32:	1b80      	subs	r0, r0, r6
 8087a34:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8087a38:	d9ed      	bls.n	8087a16 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xb0>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8087a3a:	230a      	movs	r3, #10
 8087a3c:	e00e      	b.n	8087a5c <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xf6>
      error(SD_CARD_ERROR_ACMD41);
      goto fail;
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
 8087a3e:	7a63      	ldrb	r3, [r4, #9]
 8087a40:	2b02      	cmp	r3, #2
 8087a42:	d005      	beq.n	8087a50 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xea>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  chipSelectHigh();
 8087a44:	4620      	mov	r0, r4
 8087a46:	f7ff fef1 	bl	808782c <_ZN9SdSpiCard14chipSelectHighEv>
  m_sckDivisor = sckDivisor;
 8087a4a:	71e7      	strb	r7, [r4, #7]
  return true;
 8087a4c:	2001      	movs	r0, #1
 8087a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      goto fail;
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
 8087a50:	213a      	movs	r1, #58	; 0x3a
 8087a52:	4620      	mov	r0, r4
 8087a54:	f7ff ff51 	bl	80878fa <_ZN9SdSpiCard11cardCommandEhm>
 8087a58:	b130      	cbz	r0, 8087a68 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x102>
 8087a5a:	2308      	movs	r3, #8
  chipSelectHigh();
  m_sckDivisor = sckDivisor;
  return true;

fail:
  chipSelectHigh();
 8087a5c:	4620      	mov	r0, r4
 8087a5e:	71a3      	strb	r3, [r4, #6]
 8087a60:	f7ff fee4 	bl	808782c <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8087a64:	2000      	movs	r0, #0
}
 8087a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
 8087a68:	6820      	ldr	r0, [r4, #0]
 8087a6a:	f7ff fedc 	bl	8087826 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8087a6e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8087a72:	28c0      	cmp	r0, #192	; 0xc0
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void type(uint8_t value) {
    m_type = value;
 8087a74:	bf04      	itt	eq
 8087a76:	2303      	moveq	r3, #3
 8087a78:	7263      	strbeq	r3, [r4, #9]
      type(SD_CARD_TYPE_SDHC);
    }
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
 8087a7a:	6820      	ldr	r0, [r4, #0]
 8087a7c:	f7ff fed3 	bl	8087826 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8087a80:	6820      	ldr	r0, [r4, #0]
 8087a82:	f7ff fed0 	bl	8087826 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8087a86:	6820      	ldr	r0, [r4, #0]
 8087a88:	f7ff fecd 	bl	8087826 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8087a8c:	e7da      	b.n	8087a44 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xde>

08087a8e <_ZN9SdSpiCard9readBlockEmPh>:
    chipSelectHigh();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8087a8e:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8087a90:	7a43      	ldrb	r3, [r0, #9]
    chipSelectHigh();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8087a92:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8087a94:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8087a96:	bf18      	it	ne
 8087a98:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD17, blockNumber)) {
 8087a9a:	460a      	mov	r2, r1
 8087a9c:	2111      	movs	r1, #17
    chipSelectHigh();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8087a9e:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
 8087aa0:	f7ff ff2b 	bl	80878fa <_ZN9SdSpiCard11cardCommandEhm>
 8087aa4:	b110      	cbz	r0, 8087aac <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8087aa6:	2304      	movs	r3, #4
 8087aa8:	71a3      	strb	r3, [r4, #6]
 8087aaa:	e00b      	b.n	8087ac4 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
 8087aac:	4629      	mov	r1, r5
 8087aae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8087ab2:	4620      	mov	r0, r4
 8087ab4:	f7ff fedd 	bl	8087872 <_ZN9SdSpiCard8readDataEPhj>
 8087ab8:	4605      	mov	r5, r0
 8087aba:	b118      	cbz	r0, 8087ac4 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  chipSelectHigh();
 8087abc:	4620      	mov	r0, r4
 8087abe:	f7ff feb5 	bl	808782c <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8087ac2:	e003      	b.n	8087acc <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  chipSelectHigh();
 8087ac4:	4620      	mov	r0, r4
 8087ac6:	f7ff feb1 	bl	808782c <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8087aca:	2500      	movs	r5, #0
}
 8087acc:	4628      	mov	r0, r5
 8087ace:	bd38      	pop	{r3, r4, r5, pc}

08087ad0 <_ZN9SdSpiCard9readStartEm>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8087ad0:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 8087ad2:	7a43      	ldrb	r3, [r0, #9]
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8087ad4:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 8087ad6:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8087ad8:	bf18      	it	ne
 8087ada:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
 8087adc:	2112      	movs	r1, #18
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8087ade:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
 8087ae0:	f7ff ff0b 	bl	80878fa <_ZN9SdSpiCard11cardCommandEhm>
 8087ae4:	b130      	cbz	r0, 8087af4 <_ZN9SdSpiCard9readStartEm+0x24>
 8087ae6:	2305      	movs	r3, #5
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 8087ae8:	4620      	mov	r0, r4
 8087aea:	71a3      	strb	r3, [r4, #6]
 8087aec:	f7ff fe9e 	bl	808782c <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8087af0:	2000      	movs	r0, #0
 8087af2:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
  return true;
 8087af4:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 8087af6:	bd10      	pop	{r4, pc}

08087af8 <_ZN9SdSpiCard8readStopEv>:
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 8087af8:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
 8087afa:	2200      	movs	r2, #0
 8087afc:	210c      	movs	r1, #12
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 8087afe:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
 8087b00:	f7ff fefb 	bl	80878fa <_ZN9SdSpiCard11cardCommandEhm>
 8087b04:	b130      	cbz	r0, 8087b14 <_ZN9SdSpiCard8readStopEv+0x1c>
 8087b06:	2303      	movs	r3, #3
  }
  chipSelectHigh();
  return true;

fail:
  chipSelectHigh();
 8087b08:	4620      	mov	r0, r4
 8087b0a:	71a3      	strb	r3, [r4, #6]
 8087b0c:	f7ff fe8e 	bl	808782c <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8087b10:	2000      	movs	r0, #0
 8087b12:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  chipSelectHigh();
 8087b14:	4620      	mov	r0, r4
 8087b16:	f7ff fe89 	bl	808782c <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8087b1a:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 8087b1c:	bd10      	pop	{r4, pc}

08087b1e <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
 8087b1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8087b20:	4605      	mov	r5, r0
 8087b22:	4616      	mov	r6, r2
 8087b24:	461f      	mov	r7, r3
  if (!readStart(block)) {
 8087b26:	f7ff ffd3 	bl	8087ad0 <_ZN9SdSpiCard9readStartEm>
 8087b2a:	b198      	cbz	r0, 8087b54 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
 8087b2c:	2400      	movs	r4, #0
 8087b2e:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
 8087b30:	429f      	cmp	r7, r3
 8087b32:	eb06 2144 	add.w	r1, r6, r4, lsl #9
 8087b36:	d908      	bls.n	8087b4a <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
 8087b38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8087b3c:	4628      	mov	r0, r5
 8087b3e:	f7ff fe98 	bl	8087872 <_ZN9SdSpiCard8readDataEPhj>
 8087b42:	3401      	adds	r4, #1
 8087b44:	2800      	cmp	r0, #0
 8087b46:	d1f2      	bne.n	8087b2e <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
 8087b48:	e004      	b.n	8087b54 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
 8087b4a:	4628      	mov	r0, r5
}
 8087b4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
 8087b50:	f7ff bfd2 	b.w	8087af8 <_ZN9SdSpiCard8readStopEv>
}
 8087b54:	2000      	movs	r0, #0
 8087b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08087b58 <_ZN9SdSpiCard9writeDataEhPKh>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
 8087b58:	b538      	push	{r3, r4, r5, lr}
 8087b5a:	4604      	mov	r4, r0
 8087b5c:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
 8087b5e:	6800      	ldr	r0, [r0, #0]
 8087b60:	f7ff fe5e 	bl	8087820 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
 8087b64:	6820      	ldr	r0, [r4, #0]
  }
  void spiSend(uint8_t data) {
    m_spi->send(data);
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spi->send(buf, n);
 8087b66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8087b6a:	6803      	ldr	r3, [r0, #0]
 8087b6c:	4629      	mov	r1, r5
 8087b6e:	699b      	ldr	r3, [r3, #24]
 8087b70:	4798      	blx	r3
  spiSend(src, 512);
  spiSend(crc >> 8);
 8087b72:	21ff      	movs	r1, #255	; 0xff
 8087b74:	6820      	ldr	r0, [r4, #0]
 8087b76:	f7ff fe53 	bl	8087820 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
  spiSend(crc & 0XFF);
 8087b7a:	21ff      	movs	r1, #255	; 0xff
 8087b7c:	6820      	ldr	r0, [r4, #0]
 8087b7e:	f7ff fe4f 	bl	8087820 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>

  m_status = spiReceive();
 8087b82:	6820      	ldr	r0, [r4, #0]
 8087b84:	f7ff fe4f 	bl	8087826 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8087b88:	7220      	strb	r0, [r4, #8]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
 8087b8a:	f000 001f 	and.w	r0, r0, #31
 8087b8e:	2805      	cmp	r0, #5
 8087b90:	d006      	beq.n	8087ba0 <_ZN9SdSpiCard9writeDataEhPKh+0x48>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8087b92:	2313      	movs	r3, #19
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 8087b94:	4620      	mov	r0, r4
 8087b96:	71a3      	strb	r3, [r4, #6]
 8087b98:	f7ff fe48 	bl	808782c <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8087b9c:	2000      	movs	r0, #0
 8087b9e:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
 8087ba0:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 8087ba2:	bd38      	pop	{r3, r4, r5, pc}

08087ba4 <_ZN9SdSpiCard10writeBlockEmPKh>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8087ba4:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8087ba6:	7a43      	ldrb	r3, [r0, #9]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8087ba8:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8087baa:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8087bac:	bf18      	it	ne
 8087bae:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD24, blockNumber)) {
 8087bb0:	460a      	mov	r2, r1
 8087bb2:	2118      	movs	r1, #24

fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8087bb4:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
 8087bb6:	f7ff fea0 	bl	80878fa <_ZN9SdSpiCard11cardCommandEhm>
 8087bba:	b110      	cbz	r0, 8087bc2 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
 8087bbc:	2306      	movs	r3, #6
 8087bbe:	71a3      	strb	r3, [r4, #6]
 8087bc0:	e00a      	b.n	8087bd8 <_ZN9SdSpiCard10writeBlockEmPKh+0x34>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
 8087bc2:	462a      	mov	r2, r5
 8087bc4:	21fe      	movs	r1, #254	; 0xfe
 8087bc6:	4620      	mov	r0, r4
 8087bc8:	f7ff ffc6 	bl	8087b58 <_ZN9SdSpiCard9writeDataEhPKh>
 8087bcc:	4605      	mov	r5, r0
 8087bce:	b118      	cbz	r0, 8087bd8 <_ZN9SdSpiCard10writeBlockEmPKh+0x34>
    error(SD_CARD_ERROR_WRITE_PROGRAMMING);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  chipSelectHigh();
 8087bd0:	4620      	mov	r0, r4
 8087bd2:	f7ff fe2b 	bl	808782c <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8087bd6:	e003      	b.n	8087be0 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>

fail:
  chipSelectHigh();
 8087bd8:	4620      	mov	r0, r4
 8087bda:	f7ff fe27 	bl	808782c <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8087bde:	2500      	movs	r5, #0
}
 8087be0:	4628      	mov	r0, r5
 8087be2:	bd38      	pop	{r3, r4, r5, pc}

08087be4 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
 8087be4:	b570      	push	{r4, r5, r6, lr}
 8087be6:	4604      	mov	r4, r0
 8087be8:	460d      	mov	r5, r1
  bool selected = m_selected;
 8087bea:	7906      	ldrb	r6, [r0, #4]
  chipSelectLow();
 8087bec:	f7ff fe31 	bl	8087852 <_ZN9SdSpiCard13chipSelectLowEv>
  // wait for previous write to finish
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8087bf0:	f44f 7116 	mov.w	r1, #600	; 0x258
 8087bf4:	4620      	mov	r0, r4
 8087bf6:	f7ff fe6c 	bl	80878d2 <_ZN9SdSpiCard11waitNotBusyEt>
 8087bfa:	b910      	cbnz	r0, 8087c02 <_ZN9SdSpiCard9writeDataEPKh+0x1e>
 8087bfc:	2317      	movs	r3, #23
 8087bfe:	71a3      	strb	r3, [r4, #6]
 8087c00:	e00b      	b.n	8087c1a <_ZN9SdSpiCard9writeDataEPKh+0x36>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
 8087c02:	462a      	mov	r2, r5
 8087c04:	21fc      	movs	r1, #252	; 0xfc
 8087c06:	4620      	mov	r0, r4
 8087c08:	f7ff ffa6 	bl	8087b58 <_ZN9SdSpiCard9writeDataEhPKh>
 8087c0c:	4605      	mov	r5, r0
 8087c0e:	b120      	cbz	r0, 8087c1a <_ZN9SdSpiCard9writeDataEPKh+0x36>
    goto fail;
  }
  if (!selected) {
 8087c10:	b93e      	cbnz	r6, 8087c22 <_ZN9SdSpiCard9writeDataEPKh+0x3e>
    chipSelectHigh();
 8087c12:	4620      	mov	r0, r4
 8087c14:	f7ff fe0a 	bl	808782c <_ZN9SdSpiCard14chipSelectHighEv>
 8087c18:	e003      	b.n	8087c22 <_ZN9SdSpiCard9writeDataEPKh+0x3e>
  }
  return true;

fail:
  chipSelectHigh();
 8087c1a:	4620      	mov	r0, r4
 8087c1c:	f7ff fe06 	bl	808782c <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8087c20:	2500      	movs	r5, #0
}
 8087c22:	4628      	mov	r0, r5
 8087c24:	bd70      	pop	{r4, r5, r6, pc}

08087c26 <_ZN9SdSpiCard10writeStartEmm>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber, uint32_t eraseCount) {
 8087c26:	b570      	push	{r4, r5, r6, lr}
 8087c28:	4604      	mov	r4, r0
 8087c2a:	4616      	mov	r6, r2
 8087c2c:	460d      	mov	r5, r1
  bool writeStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
 8087c2e:	2200      	movs	r2, #0
 8087c30:	2137      	movs	r1, #55	; 0x37
 8087c32:	f7ff fe62 	bl	80878fa <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 8087c36:	4632      	mov	r2, r6
 8087c38:	2117      	movs	r1, #23
 8087c3a:	4620      	mov	r0, r4
 8087c3c:	f7ff fe5d 	bl	80878fa <_ZN9SdSpiCard11cardCommandEhm>
  SD_TRACE("WS", blockNumber);
  // send pre-erase count
  if (cardAcmd(ACMD23, eraseCount)) {
 8087c40:	b108      	cbz	r0, 8087c46 <_ZN9SdSpiCard10writeStartEmm+0x20>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8087c42:	2309      	movs	r3, #9
 8087c44:	e00a      	b.n	8087c5c <_ZN9SdSpiCard10writeStartEmm+0x36>
    error(SD_CARD_ERROR_ACMD23);
    goto fail;
  }
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8087c46:	7a63      	ldrb	r3, [r4, #9]
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
 8087c48:	2119      	movs	r1, #25
  if (cardAcmd(ACMD23, eraseCount)) {
    error(SD_CARD_ERROR_ACMD23);
    goto fail;
  }
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8087c4a:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8087c4c:	bf18      	it	ne
 8087c4e:	026d      	lslne	r5, r5, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
 8087c50:	462a      	mov	r2, r5
 8087c52:	4620      	mov	r0, r4
 8087c54:	f7ff fe51 	bl	80878fa <_ZN9SdSpiCard11cardCommandEhm>
 8087c58:	b130      	cbz	r0, 8087c68 <_ZN9SdSpiCard10writeStartEmm+0x42>
 8087c5a:	2307      	movs	r3, #7
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 8087c5c:	4620      	mov	r0, r4
 8087c5e:	71a3      	strb	r3, [r4, #6]
 8087c60:	f7ff fde4 	bl	808782c <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8087c64:	2000      	movs	r0, #0
 8087c66:	bd70      	pop	{r4, r5, r6, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
 8087c68:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 8087c6a:	bd70      	pop	{r4, r5, r6, pc}

08087c6c <_ZN9SdSpiCard9writeStopEv>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 8087c6c:	b538      	push	{r3, r4, r5, lr}
 8087c6e:	4604      	mov	r4, r0
  chipSelectLow();
 8087c70:	f7ff fdef 	bl	8087852 <_ZN9SdSpiCard13chipSelectLowEv>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8087c74:	f44f 7116 	mov.w	r1, #600	; 0x258
 8087c78:	4620      	mov	r0, r4
 8087c7a:	f7ff fe2a 	bl	80878d2 <_ZN9SdSpiCard11waitNotBusyEt>
 8087c7e:	b170      	cbz	r0, 8087c9e <_ZN9SdSpiCard9writeStopEv+0x32>
    goto fail;
  }
  spiSend(STOP_TRAN_TOKEN);
 8087c80:	21fd      	movs	r1, #253	; 0xfd
 8087c82:	6820      	ldr	r0, [r4, #0]
 8087c84:	f7ff fdcc 	bl	8087820 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8087c88:	f44f 7116 	mov.w	r1, #600	; 0x258
 8087c8c:	4620      	mov	r0, r4
 8087c8e:	f7ff fe20 	bl	80878d2 <_ZN9SdSpiCard11waitNotBusyEt>
 8087c92:	4605      	mov	r5, r0
 8087c94:	b118      	cbz	r0, 8087c9e <_ZN9SdSpiCard9writeStopEv+0x32>
    goto fail;
  }
  chipSelectHigh();
 8087c96:	4620      	mov	r0, r4
 8087c98:	f7ff fdc8 	bl	808782c <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8087c9c:	e005      	b.n	8087caa <_ZN9SdSpiCard9writeStopEv+0x3e>
 8087c9e:	2312      	movs	r3, #18
 8087ca0:	71a3      	strb	r3, [r4, #6]

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
 8087ca2:	4620      	mov	r0, r4
 8087ca4:	f7ff fdc2 	bl	808782c <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8087ca8:	2500      	movs	r5, #0
}
 8087caa:	4628      	mov	r0, r5
 8087cac:	bd38      	pop	{r3, r4, r5, pc}

08087cae <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 8087cae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8087cb0:	4617      	mov	r7, r2
  if (!writeStart(block, count)) {
 8087cb2:	461a      	mov	r2, r3
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 8087cb4:	4605      	mov	r5, r0
 8087cb6:	461e      	mov	r6, r3
  if (!writeStart(block, count)) {
 8087cb8:	f7ff ffb5 	bl	8087c26 <_ZN9SdSpiCard10writeStartEmm>
 8087cbc:	b170      	cbz	r0, 8087cdc <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2e>
 8087cbe:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 8087cc0:	42b4      	cmp	r4, r6
 8087cc2:	eb07 2144 	add.w	r1, r7, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 8087cc6:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block, count)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 8087cc8:	d004      	beq.n	8087cd4 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x26>
    if (!writeData(src)) {
 8087cca:	f7ff ff8b 	bl	8087be4 <_ZN9SdSpiCard9writeDataEPKh>
 8087cce:	b128      	cbz	r0, 8087cdc <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2e>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block, count)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 8087cd0:	3401      	adds	r4, #1
 8087cd2:	e7f5      	b.n	8087cc0 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x12>
  return writeStop();

 fail:
  chipSelectHigh();
  return false;
}
 8087cd4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 8087cd8:	f7ff bfc8 	b.w	8087c6c <_ZN9SdSpiCard9writeStopEv>

 fail:
  chipSelectHigh();
 8087cdc:	4628      	mov	r0, r5
 8087cde:	f7ff fda5 	bl	808782c <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
}
 8087ce2:	2000      	movs	r0, #0
 8087ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08087ce6 <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP9SdSpiBasehh>:
 8087ce6:	f001 bb49 	b.w	808937c <HAL_Pin_Map>
	...

08087cec <_Z36SD_SPI_DMA_TransferComplete_Callbackv>:
#if SPI_INTERFACE_COUNT == 1
const uint8_t m_spiIf = 0;
#endif
//-----------------------------------------------------------------------------
void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
 8087cec:	4b01      	ldr	r3, [pc, #4]	; (8087cf4 <_Z36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
 8087cee:	2201      	movs	r2, #1
 8087cf0:	701a      	strb	r2, [r3, #0]
 8087cf2:	4770      	bx	lr
 8087cf4:	20000bb8 	.word	0x20000bb8

08087cf8 <_ZN5SdSpi14endTransactionEv>:
#endif  // SPI_CLOCK_DIV128
  // delay for SPI transfer done callback too soon bug.
  bugDelay = 24*divisor*(1 + m_spiIf)/60;
}
//-----------------------------------------------------------------------------
void SdSpi::endTransaction() {
 8087cf8:	4770      	bx	lr
	...

08087cfc <_ZN5SdSpi5beginEh>:
void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
}
//------------------------------------------------------------------------------
void SdSpi::begin(uint8_t chipSelectPin) {
  spiPtr[m_spiIf]->begin(chipSelectPin);
 8087cfc:	7902      	ldrb	r2, [r0, #4]
 8087cfe:	4b02      	ldr	r3, [pc, #8]	; (8087d08 <_ZN5SdSpi5beginEh+0xc>)
 8087d00:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8087d04:	f001 bfef 	b.w	8089ce6 <_ZN8SPIClass5beginEt>
 8087d08:	08092b2c 	.word	0x08092b2c

08087d0c <_ZN5SdSpi16beginTransactionEh>:
}
//------------------------------------------------------------------------------
void SdSpi::beginTransaction(uint8_t divisor) {
 8087d0c:	b570      	push	{r4, r5, r6, lr}
 8087d0e:	4606      	mov	r6, r0
 8087d10:	460c      	mov	r4, r1
  spiPtr[m_spiIf]->setBitOrder(MSBFIRST);
 8087d12:	7903      	ldrb	r3, [r0, #4]
 8087d14:	4d1a      	ldr	r5, [pc, #104]	; (8087d80 <_ZN5SdSpi16beginTransactionEh+0x74>)
 8087d16:	2101      	movs	r1, #1
 8087d18:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8087d1c:	f001 ffe9 	bl	8089cf2 <_ZN8SPIClass11setBitOrderEh>
  spiPtr[m_spiIf]->setDataMode(SPI_MODE0);
 8087d20:	7933      	ldrb	r3, [r6, #4]
 8087d22:	2100      	movs	r1, #0
 8087d24:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8087d28:	f001 ffe6 	bl	8089cf8 <_ZN8SPIClass11setDataModeEh>
#ifndef SPI_CLOCK_DIV128
  spiPtr[m_spiIf]->setClockDivider(divisor);
#else  // SPI_CLOCK_DIV128
  int v;
  if (divisor <= 2) {
 8087d2c:	2c02      	cmp	r4, #2
 8087d2e:	d90c      	bls.n	8087d4a <_ZN5SdSpi16beginTransactionEh+0x3e>
    v = SPI_CLOCK_DIV2;
  } else  if (divisor <= 4) {
 8087d30:	2c04      	cmp	r4, #4
 8087d32:	d90c      	bls.n	8087d4e <_ZN5SdSpi16beginTransactionEh+0x42>
    v = SPI_CLOCK_DIV4;
  } else  if (divisor <= 8) {
 8087d34:	2c08      	cmp	r4, #8
 8087d36:	d90c      	bls.n	8087d52 <_ZN5SdSpi16beginTransactionEh+0x46>
    v = SPI_CLOCK_DIV8;
  } else  if (divisor <= 16) {
 8087d38:	2c10      	cmp	r4, #16
 8087d3a:	d90c      	bls.n	8087d56 <_ZN5SdSpi16beginTransactionEh+0x4a>
    v = SPI_CLOCK_DIV16;
  } else  if (divisor <= 32) {
 8087d3c:	2c20      	cmp	r4, #32
 8087d3e:	d90c      	bls.n	8087d5a <_ZN5SdSpi16beginTransactionEh+0x4e>
    v = SPI_CLOCK_DIV32;
  } else  if (divisor <= 64) {
    v = SPI_CLOCK_DIV64;
  } else {
    v = SPI_CLOCK_DIV128;
 8087d40:	2c41      	cmp	r4, #65	; 0x41
 8087d42:	bf34      	ite	cc
 8087d44:	2128      	movcc	r1, #40	; 0x28
 8087d46:	2130      	movcs	r1, #48	; 0x30
 8087d48:	e008      	b.n	8087d5c <_ZN5SdSpi16beginTransactionEh+0x50>
#ifndef SPI_CLOCK_DIV128
  spiPtr[m_spiIf]->setClockDivider(divisor);
#else  // SPI_CLOCK_DIV128
  int v;
  if (divisor <= 2) {
    v = SPI_CLOCK_DIV2;
 8087d4a:	2100      	movs	r1, #0
 8087d4c:	e006      	b.n	8087d5c <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 4) {
    v = SPI_CLOCK_DIV4;
 8087d4e:	2108      	movs	r1, #8
 8087d50:	e004      	b.n	8087d5c <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 8) {
    v = SPI_CLOCK_DIV8;
 8087d52:	2110      	movs	r1, #16
 8087d54:	e002      	b.n	8087d5c <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 16) {
    v = SPI_CLOCK_DIV16;
 8087d56:	2118      	movs	r1, #24
 8087d58:	e000      	b.n	8087d5c <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 32) {
    v = SPI_CLOCK_DIV32;
 8087d5a:	2120      	movs	r1, #32
  } else  if (divisor <= 64) {
    v = SPI_CLOCK_DIV64;
  } else {
    v = SPI_CLOCK_DIV128;
  }
  spiPtr[m_spiIf]->setClockDivider(v);
 8087d5c:	7933      	ldrb	r3, [r6, #4]
 8087d5e:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8087d62:	f002 f813 	bl	8089d8c <_ZN8SPIClass15setClockDividerEh>
#endif  // SPI_CLOCK_DIV128
  // delay for SPI transfer done callback too soon bug.
  bugDelay = 24*divisor*(1 + m_spiIf)/60;
 8087d66:	2318      	movs	r3, #24
 8087d68:	fb03 f104 	mul.w	r1, r3, r4
 8087d6c:	7932      	ldrb	r2, [r6, #4]
 8087d6e:	233c      	movs	r3, #60	; 0x3c
 8087d70:	fb02 1101 	mla	r1, r2, r1, r1
 8087d74:	fb91 f1f3 	sdiv	r1, r1, r3
 8087d78:	4b02      	ldr	r3, [pc, #8]	; (8087d84 <_ZN5SdSpi16beginTransactionEh+0x78>)
 8087d7a:	6019      	str	r1, [r3, #0]
 8087d7c:	bd70      	pop	{r4, r5, r6, pc}
 8087d7e:	bf00      	nop
 8087d80:	08092b2c 	.word	0x08092b2c
 8087d84:	20000bbc 	.word	0x20000bbc

08087d88 <_ZN5SdSpi7receiveEv>:
void SdSpi::endTransaction() {
}
//-----------------------------------------------------------------------------
/** SPI receive a byte */
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
 8087d88:	7902      	ldrb	r2, [r0, #4]
 8087d8a:	4b03      	ldr	r3, [pc, #12]	; (8087d98 <_ZN5SdSpi7receiveEv+0x10>)
 8087d8c:	21ff      	movs	r1, #255	; 0xff
 8087d8e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8087d92:	f002 b80f 	b.w	8089db4 <_ZN8SPIClass8transferEh>
 8087d96:	bf00      	nop
 8087d98:	08092b2c 	.word	0x08092b2c

08087d9c <_ZN5SdSpi4sendEh>:
  return 0;
}
//-----------------------------------------------------------------------------
/** SPI send a byte */
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
 8087d9c:	7902      	ldrb	r2, [r0, #4]
 8087d9e:	4b02      	ldr	r3, [pc, #8]	; (8087da8 <_ZN5SdSpi4sendEh+0xc>)
 8087da0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8087da4:	f002 b806 	b.w	8089db4 <_ZN8SPIClass8transferEh>
 8087da8:	08092b2c 	.word	0x08092b2c

08087dac <_ZN5SdSpi7receiveEPhj>:
/** SPI receive a byte */
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
}
//-----------------------------------------------------------------------------
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
 8087dac:	b573      	push	{r0, r1, r4, r5, r6, lr}
  SPI_DMA_TransferCompleted = false;
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8087dae:	4b0c      	ldr	r3, [pc, #48]	; (8087de0 <_ZN5SdSpi7receiveEPhj+0x34>)
 8087db0:	7906      	ldrb	r6, [r0, #4]
 8087db2:	480c      	ldr	r0, [pc, #48]	; (8087de4 <_ZN5SdSpi7receiveEPhj+0x38>)
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
}
//-----------------------------------------------------------------------------
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 8087db4:	2500      	movs	r5, #0
 8087db6:	4c0c      	ldr	r4, [pc, #48]	; (8087de8 <_ZN5SdSpi7receiveEPhj+0x3c>)
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8087db8:	9300      	str	r3, [sp, #0]
 8087dba:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8087dbe:	4613      	mov	r3, r2
 8087dc0:	460a      	mov	r2, r1
 8087dc2:	4629      	mov	r1, r5
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
}
//-----------------------------------------------------------------------------
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 8087dc4:	7025      	strb	r5, [r4, #0]
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8087dc6:	f001 fffb 	bl	8089dc0 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
 8087dca:	7823      	ldrb	r3, [r4, #0]
 8087dcc:	2b00      	cmp	r3, #0
 8087dce:	d0fc      	beq.n	8087dca <_ZN5SdSpi7receiveEPhj+0x1e>
  if (bugDelay) {
 8087dd0:	4b06      	ldr	r3, [pc, #24]	; (8087dec <_ZN5SdSpi7receiveEPhj+0x40>)
 8087dd2:	6818      	ldr	r0, [r3, #0]
 8087dd4:	b108      	cbz	r0, 8087dda <_ZN5SdSpi7receiveEPhj+0x2e>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 8087dd6:	f001 fb79 	bl	80894cc <HAL_Delay_Microseconds>
    delayMicroseconds(bugDelay);
  }
  return 0;
}
 8087dda:	2000      	movs	r0, #0
 8087ddc:	b002      	add	sp, #8
 8087dde:	bd70      	pop	{r4, r5, r6, pc}
 8087de0:	08087ced 	.word	0x08087ced
 8087de4:	08092b2c 	.word	0x08092b2c
 8087de8:	20000bb8 	.word	0x20000bb8
 8087dec:	20000bbc 	.word	0x20000bbc

08087df0 <_ZN5SdSpi4sendEPKhj>:
/** SPI send a byte */
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
 8087df0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  SPI_DMA_TransferCompleted = false;

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 8087df2:	4b0d      	ldr	r3, [pc, #52]	; (8087e28 <_ZN5SdSpi4sendEPKhj+0x38>)
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
 8087df4:	7906      	ldrb	r6, [r0, #4]
                            SD_SPI_DMA_TransferComplete_Callback);
 8087df6:	480d      	ldr	r0, [pc, #52]	; (8087e2c <_ZN5SdSpi4sendEPKhj+0x3c>)
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 8087df8:	2500      	movs	r5, #0
 8087dfa:	4c0d      	ldr	r4, [pc, #52]	; (8087e30 <_ZN5SdSpi4sendEPKhj+0x40>)

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 8087dfc:	9300      	str	r3, [sp, #0]
 8087dfe:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8087e02:	4613      	mov	r3, r2
 8087e04:	462a      	mov	r2, r5
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 8087e06:	7025      	strb	r5, [r4, #0]

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 8087e08:	f001 ffda 	bl	8089dc0 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
 8087e0c:	7823      	ldrb	r3, [r4, #0]
 8087e0e:	2b00      	cmp	r3, #0
 8087e10:	d0fc      	beq.n	8087e0c <_ZN5SdSpi4sendEPKhj+0x1c>
  if (bugDelay) {
 8087e12:	4b08      	ldr	r3, [pc, #32]	; (8087e34 <_ZN5SdSpi4sendEPKhj+0x44>)
 8087e14:	6818      	ldr	r0, [r3, #0]
 8087e16:	b120      	cbz	r0, 8087e22 <_ZN5SdSpi4sendEPKhj+0x32>
    delayMicroseconds(bugDelay);
  }
}
 8087e18:	b002      	add	sp, #8
 8087e1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8087e1e:	f001 bb55 	b.w	80894cc <HAL_Delay_Microseconds>
 8087e22:	b002      	add	sp, #8
 8087e24:	bd70      	pop	{r4, r5, r6, pc}
 8087e26:	bf00      	nop
 8087e28:	08087ced 	.word	0x08087ced
 8087e2c:	08092b2c 	.word	0x08092b2c
 8087e30:	20000bb8 	.word	0x20000bb8
 8087e34:	20000bbc 	.word	0x20000bbc

08087e38 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv>:
 8087e38:	f001 baa0 	b.w	808937c <HAL_Pin_Map>

08087e3c <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 8087e3c:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 8087e3e:	f100 0210 	add.w	r2, r0, #16
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 8087e42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8087e46:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 8087e48:	6901      	ldr	r1, [r0, #16]
 8087e4a:	6880      	ldr	r0, [r0, #8]
 8087e4c:	f000 bc04 	b.w	8088658 <_ZN9FatVolume15allocateClusterEmPm>

08087e50 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 8087e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 8087e54:	7803      	ldrb	r3, [r0, #0]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 8087e56:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 8087e58:	f003 0320 	and.w	r3, r3, #32
 8087e5c:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8087e60:	b10b      	cbz	r3, 8087e66 <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
 8087e62:	2600      	movs	r6, #0
 8087e64:	e02e      	b.n	8087ec4 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
 8087e66:	6942      	ldr	r2, [r0, #20]
 8087e68:	4b18      	ldr	r3, [pc, #96]	; (8087ecc <_ZN7FatFile13addDirClusterEv+0x7c>)
 8087e6a:	429a      	cmp	r2, r3
 8087e6c:	d8f9      	bhi.n	8087e62 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
 8087e6e:	f7ff ffe5 	bl	8087e3c <_ZN7FatFile10addClusterEv>
 8087e72:	4606      	mov	r6, r0
 8087e74:	2800      	cmp	r0, #0
 8087e76:	d0f4      	beq.n	8087e62 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterStartBlock(m_curCluster);
 8087e78:	6921      	ldr	r1, [r4, #16]
 8087e7a:	68a0      	ldr	r0, [r4, #8]
 8087e7c:	f000 fb8d 	bl	808859a <_ZNK9FatVolume17clusterStartBlockEm>
 8087e80:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8087e82:	68a0      	ldr	r0, [r4, #8]
 8087e84:	2205      	movs	r2, #5
 8087e86:	4639      	mov	r1, r7
 8087e88:	3028      	adds	r0, #40	; 0x28
 8087e8a:	f000 fb62 	bl	8088552 <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
 8087e8e:	4680      	mov	r8, r0
 8087e90:	2800      	cmp	r0, #0
 8087e92:	d0e6      	beq.n	8087e62 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
 8087e94:	4629      	mov	r1, r5
 8087e96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8087e9a:	f005 fcef 	bl	808d87c <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 8087e9e:	2501      	movs	r5, #1
 8087ea0:	68a0      	ldr	r0, [r4, #8]
 8087ea2:	7902      	ldrb	r2, [r0, #4]
 8087ea4:	42aa      	cmp	r2, r5
 8087ea6:	d909      	bls.n	8087ebc <_ZN7FatFile13addDirClusterEv+0x6c>
    if (!m_vol->writeBlock(block + i, pc->data)) {
 8087ea8:	6803      	ldr	r3, [r0, #0]
 8087eaa:	4642      	mov	r2, r8
 8087eac:	685b      	ldr	r3, [r3, #4]
 8087eae:	19e9      	adds	r1, r5, r7
 8087eb0:	4798      	blx	r3
 8087eb2:	2800      	cmp	r0, #0
 8087eb4:	d0d5      	beq.n	8087e62 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 8087eb6:	3501      	adds	r5, #1
 8087eb8:	b2ed      	uxtb	r5, r5
 8087eba:	e7f1      	b.n	8087ea0 <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
 8087ebc:	6963      	ldr	r3, [r4, #20]
 8087ebe:	eb03 2342 	add.w	r3, r3, r2, lsl #9
 8087ec2:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
 8087ec4:	4630      	mov	r0, r6
 8087ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8087eca:	bf00      	nop
 8087ecc:	001ffdff 	.word	0x001ffdff

08087ed0 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
 8087ed0:	b510      	push	{r4, lr}
 8087ed2:	4604      	mov	r4, r0
 8087ed4:	6880      	ldr	r0, [r0, #8]
 8087ed6:	460a      	mov	r2, r1
 8087ed8:	3028      	adds	r0, #40	; 0x28
 8087eda:	69a1      	ldr	r1, [r4, #24]
 8087edc:	f000 fb39 	bl	8088552 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
 8087ee0:	b120      	cbz	r0, 8087eec <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
 8087ee2:	88a3      	ldrh	r3, [r4, #4]
 8087ee4:	f003 030f 	and.w	r3, r3, #15
 8087ee8:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
 8087eec:	bd10      	pop	{r4, pc}

08087eee <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 8087eee:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
 8087ef0:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 8087ef2:	4605      	mov	r5, r0
 8087ef4:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
 8087ef6:	b984      	cbnz	r4, 8087f1a <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
 8087ef8:	2224      	movs	r2, #36	; 0x24
 8087efa:	4621      	mov	r1, r4
 8087efc:	f005 fcbe 	bl	808d87c <memset>

  m_vol = vol;
 8087f00:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
 8087f02:	79f3      	ldrb	r3, [r6, #7]
 8087f04:	2b10      	cmp	r3, #16
 8087f06:	d003      	beq.n	8087f10 <_ZN7FatFile8openRootEP9FatVolume+0x22>
 8087f08:	2b20      	cmp	r3, #32
 8087f0a:	d106      	bne.n	8087f1a <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
 8087f0c:	2340      	movs	r3, #64	; 0x40
 8087f0e:	e000      	b.n	8087f12 <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
 8087f10:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = O_READ;
 8087f12:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
 8087f14:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = O_READ;
 8087f16:	70a8      	strb	r0, [r5, #2]
 8087f18:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
 8087f1a:	2000      	movs	r0, #0
 8087f1c:	bd70      	pop	{r4, r5, r6, pc}

08087f1e <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
 8087f1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8087f22:	7803      	ldrb	r3, [r0, #0]
 8087f24:	4604      	mov	r4, r0
 8087f26:	4689      	mov	r9, r1
 8087f28:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & O_READ)) {
 8087f2a:	b14b      	cbz	r3, 8087f40 <_ZN7FatFile4readEPvj+0x22>
 8087f2c:	7882      	ldrb	r2, [r0, #2]
 8087f2e:	07d1      	lsls	r1, r2, #31
 8087f30:	d506      	bpl.n	8087f40 <_ZN7FatFile4readEPvj+0x22>
 8087f32:	e00c      	b.n	8087f4e <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8087f34:	465a      	mov	r2, fp
 8087f36:	6921      	ldr	r1, [r4, #16]
 8087f38:	f000 fb35 	bl	80885a6 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
 8087f3c:	2800      	cmp	r0, #0
 8087f3e:	da3d      	bge.n	8087fbc <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 8087f40:	7863      	ldrb	r3, [r4, #1]
  return -1;
 8087f42:	f04f 30ff 	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 8087f46:	f043 0302 	orr.w	r3, r3, #2
 8087f4a:	7063      	strb	r3, [r4, #1]
  return -1;
 8087f4c:	e098      	b.n	8088080 <_ZN7FatFile4readEPvj+0x162>
  if (!isOpen() || !(m_flags & O_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
 8087f4e:	071a      	lsls	r2, r3, #28
 8087f50:	d503      	bpl.n	8087f5a <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
 8087f52:	69e3      	ldr	r3, [r4, #28]
 8087f54:	6962      	ldr	r2, [r4, #20]
 8087f56:	1a9b      	subs	r3, r3, r2
 8087f58:	e007      	b.n	8087f6a <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
 8087f5a:	069a      	lsls	r2, r3, #26
 8087f5c:	d508      	bpl.n	8087f70 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
 8087f5e:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
 8087f60:	891a      	ldrh	r2, [r3, #8]
 8087f62:	6963      	ldr	r3, [r4, #20]
 8087f64:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
 8087f68:	b29b      	uxth	r3, r3
 8087f6a:	429d      	cmp	r5, r3
 8087f6c:	bf28      	it	cs
 8087f6e:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
 8087f70:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
 8087f72:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8087f76:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 8087f7a:	2e00      	cmp	r6, #0
 8087f7c:	d035      	beq.n	8087fea <_ZN7FatFile4readEPvj+0xcc>
 8087f7e:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 8087f80:	6963      	ldr	r3, [r4, #20]
    if (isRootFixed()) {
 8087f82:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 8087f86:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8087f8a:	68a0      	ldr	r0, [r4, #8]
 8087f8c:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
 8087f90:	d002      	beq.n	8087f98 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
 8087f92:	6a03      	ldr	r3, [r0, #32]
 8087f94:	4419      	add	r1, r3
 8087f96:	e01d      	b.n	8087fd4 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 8087f98:	f890 8005 	ldrb.w	r8, [r0, #5]
 8087f9c:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
 8087fa0:	f1ba 0f00 	cmp.w	sl, #0
 8087fa4:	d110      	bne.n	8087fc8 <_ZN7FatFile4readEPvj+0xaa>
 8087fa6:	f1b8 0f00 	cmp.w	r8, #0
 8087faa:	d10d      	bne.n	8087fc8 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
 8087fac:	2b00      	cmp	r3, #0
 8087fae:	d1c1      	bne.n	8087f34 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 8087fb0:	0653      	lsls	r3, r2, #25
 8087fb2:	bf4c      	ite	mi
 8087fb4:	6a03      	ldrmi	r3, [r0, #32]
 8087fb6:	6a23      	ldrpl	r3, [r4, #32]
 8087fb8:	6123      	str	r3, [r4, #16]
 8087fba:	e005      	b.n	8087fc8 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
 8087fbc:	d104      	bne.n	8087fc8 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
 8087fbe:	7823      	ldrb	r3, [r4, #0]
 8087fc0:	f013 0f70 	tst.w	r3, #112	; 0x70
 8087fc4:	d111      	bne.n	8087fea <_ZN7FatFile4readEPvj+0xcc>
 8087fc6:	e7bb      	b.n	8087f40 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 8087fc8:	6921      	ldr	r1, [r4, #16]
 8087fca:	68a0      	ldr	r0, [r4, #8]
 8087fcc:	f000 fae5 	bl	808859a <_ZNK9FatVolume17clusterStartBlockEm>
 8087fd0:	eb08 0100 	add.w	r1, r8, r0
 8087fd4:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
 8087fd6:	f1ba 0f00 	cmp.w	sl, #0
 8087fda:	d135      	bne.n	8088048 <_ZN7FatFile4readEPvj+0x12a>
 8087fdc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8087fe0:	d332      	bcc.n	8088048 <_ZN7FatFile4readEPvj+0x12a>
 8087fe2:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8087fe4:	4291      	cmp	r1, r2
 8087fe6:	d102      	bne.n	8087fee <_ZN7FatFile4readEPvj+0xd0>
 8087fe8:	e02e      	b.n	8088048 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
 8087fea:	1ba8      	subs	r0, r5, r6
 8087fec:	e048      	b.n	8088080 <_ZN7FatFile4readEPvj+0x162>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
 8087fee:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8087ff2:	d31b      	bcc.n	808802c <_ZN7FatFile4readEPvj+0x10e>
      uint8_t nb = toRead >> 9;
      if (!isRootFixed()) {
 8087ff4:	7827      	ldrb	r7, [r4, #0]
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      uint8_t nb = toRead >> 9;
 8087ff6:	f3c6 2347 	ubfx	r3, r6, #9, #8
      if (!isRootFixed()) {
 8087ffa:	06bf      	lsls	r7, r7, #26
 8087ffc:	d406      	bmi.n	808800c <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
 8087ffe:	7907      	ldrb	r7, [r0, #4]
 8088000:	ebc8 0707 	rsb	r7, r8, r7
 8088004:	b2ff      	uxtb	r7, r7
 8088006:	42bb      	cmp	r3, r7
 8088008:	bf28      	it	cs
 808800a:	463b      	movcs	r3, r7
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 808800c:	4291      	cmp	r1, r2
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
 808800e:	ea4f 2743 	mov.w	r7, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8088012:	d207      	bcs.n	8088024 <_ZN7FatFile4readEPvj+0x106>
        if (!m_vol->cacheSync()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
 8088014:	68a0      	ldr	r0, [r4, #8]
 8088016:	6802      	ldr	r2, [r0, #0]
 8088018:	f8d2 a008 	ldr.w	sl, [r2, #8]
 808801c:	464a      	mov	r2, r9
 808801e:	47d0      	blx	sl
 8088020:	b960      	cbnz	r0, 808803c <_ZN7FatFile4readEPvj+0x11e>
 8088022:	e78d      	b.n	8087f40 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8088024:	441a      	add	r2, r3
 8088026:	4291      	cmp	r1, r2
 8088028:	d321      	bcc.n	808806e <_ZN7FatFile4readEPvj+0x150>
 808802a:	e7f3      	b.n	8088014 <_ZN7FatFile4readEPvj+0xf6>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
 808802c:	6803      	ldr	r3, [r0, #0]
 808802e:	464a      	mov	r2, r9
 8088030:	681b      	ldr	r3, [r3, #0]
 8088032:	4798      	blx	r3
 8088034:	2800      	cmp	r0, #0
 8088036:	d083      	beq.n	8087f40 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
 8088038:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
 808803c:	6963      	ldr	r3, [r4, #20]
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
 808803e:	44b9      	add	r9, r7
    m_curPosition += n;
 8088040:	443b      	add	r3, r7
 8088042:	6163      	str	r3, [r4, #20]
    toRead -= n;
 8088044:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 8088046:	e798      	b.n	8087f7a <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8088048:	2200      	movs	r2, #0
 808804a:	3028      	adds	r0, #40	; 0x28
 808804c:	f000 fa81 	bl	8088552 <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
 8088050:	2800      	cmp	r0, #0
 8088052:	f43f af75 	beq.w	8087f40 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
 8088056:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
 808805a:	42b7      	cmp	r7, r6
 808805c:	bf28      	it	cs
 808805e:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
 8088060:	eb00 010a 	add.w	r1, r0, sl
 8088064:	463a      	mov	r2, r7
 8088066:	4648      	mov	r0, r9
 8088068:	f005 fbfd 	bl	808d866 <memcpy>
 808806c:	e7e6      	b.n	808803c <_ZN7FatFile4readEPvj+0x11e>
 808806e:	e88d 000a 	stmia.w	sp, {r1, r3}
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSync()) {
 8088072:	f7ff f8c3 	bl	80871fc <_ZN9FatVolume9cacheSyncEv>
 8088076:	e89d 000a 	ldmia.w	sp, {r1, r3}
 808807a:	2800      	cmp	r0, #0
 808807c:	d1ca      	bne.n	8088014 <_ZN7FatFile4readEPvj+0xf6>
 808807e:	e75f      	b.n	8087f40 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
 8088080:	b003      	add	sp, #12
 8088082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08088086 <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
 8088086:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 8088088:	2201      	movs	r2, #1
 808808a:	f10d 0107 	add.w	r1, sp, #7
 808808e:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
 8088090:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
 8088092:	6905      	ldr	r5, [r0, #16]
 8088094:	f7ff ff43 	bl	8087f1e <_ZN7FatFile4readEPvj>
 8088098:	2801      	cmp	r0, #1
 808809a:	bf09      	itett	eq
 808809c:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
 80880a0:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
 80880a4:	6166      	streq	r6, [r4, #20]
  m_curCluster = pos->cluster;
 80880a6:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
 80880a8:	b002      	add	sp, #8
 80880aa:	bd70      	pop	{r4, r5, r6, pc}

080880ac <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
 80880ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
 80880ae:	6943      	ldr	r3, [r0, #20]
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
 80880b0:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
 80880b2:	f3c3 1543 	ubfx	r5, r3, #5, #4

  if (i == 0 || !skipReadOk) {
 80880b6:	b105      	cbz	r5, 80880ba <_ZN7FatFile12readDirCacheEb+0xe>
 80880b8:	b969      	cbnz	r1, 80880d6 <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
 80880ba:	2201      	movs	r2, #1
 80880bc:	f10d 0107 	add.w	r1, sp, #7
 80880c0:	4620      	mov	r0, r4
 80880c2:	f7ff ff2c 	bl	8087f1e <_ZN7FatFile4readEPvj>
 80880c6:	b240      	sxtb	r0, r0
    if  (n != 1) {
 80880c8:	2801      	cmp	r0, #1
 80880ca:	d001      	beq.n	80880d0 <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
 80880cc:	2000      	movs	r0, #0
 80880ce:	e008      	b.n	80880e2 <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
 80880d0:	6963      	ldr	r3, [r4, #20]
 80880d2:	331f      	adds	r3, #31
 80880d4:	e000      	b.n	80880d8 <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
 80880d6:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
 80880d8:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
 80880da:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
 80880dc:	3034      	adds	r0, #52	; 0x34
 80880de:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
 80880e2:	b003      	add	sp, #12
 80880e4:	bd30      	pop	{r4, r5, pc}

080880e6 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
 80880e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80880ea:	460e      	mov	r6, r1
 80880ec:	7801      	ldrb	r1, [r0, #0]
 80880ee:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
 80880f0:	6907      	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
 80880f2:	2900      	cmp	r1, #0
 80880f4:	d039      	beq.n	808816a <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
 80880f6:	6945      	ldr	r5, [r0, #20]
 80880f8:	42b5      	cmp	r5, r6
 80880fa:	d03a      	beq.n	8088172 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
 80880fc:	b90e      	cbnz	r6, 8088102 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
 80880fe:	6106      	str	r6, [r0, #16]
    goto done;
 8088100:	e031      	b.n	8088166 <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
 8088102:	070b      	lsls	r3, r1, #28
 8088104:	d503      	bpl.n	808810e <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
 8088106:	69c3      	ldr	r3, [r0, #28]
 8088108:	429e      	cmp	r6, r3
 808810a:	d82e      	bhi.n	808816a <_ZN7FatFile7seekSetEm+0x84>
 808810c:	e007      	b.n	808811e <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
 808810e:	0688      	lsls	r0, r1, #26
 8088110:	d505      	bpl.n	808811e <_ZN7FatFile7seekSetEm+0x38>
 8088112:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
 8088114:	891b      	ldrh	r3, [r3, #8]
 8088116:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
 808811a:	d826      	bhi.n	808816a <_ZN7FatFile7seekSetEm+0x84>
 808811c:	e023      	b.n	8088166 <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 808811e:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8088122:	1e6a      	subs	r2, r5, #1
 8088124:	f89e 3006 	ldrb.w	r3, [lr, #6]
 8088128:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 808812c:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 808812e:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 8088130:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
 8088132:	429a      	cmp	r2, r3
 8088134:	d800      	bhi.n	8088138 <_ZN7FatFile7seekSetEm+0x52>
 8088136:	b94d      	cbnz	r5, 808814c <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 8088138:	064a      	lsls	r2, r1, #25
 808813a:	bf4c      	ite	mi
 808813c:	f8de 2020 	ldrmi.w	r2, [lr, #32]
 8088140:	6a22      	ldrpl	r2, [r4, #32]
 8088142:	6122      	str	r2, [r4, #16]
 8088144:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 8088146:	f104 0810 	add.w	r8, r4, #16
 808814a:	e00a      	b.n	8088162 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
 808814c:	1a9b      	subs	r3, r3, r2
 808814e:	e7f9      	b.n	8088144 <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 8088150:	4642      	mov	r2, r8
 8088152:	6921      	ldr	r1, [r4, #16]
 8088154:	68a0      	ldr	r0, [r4, #8]
 8088156:	f000 fa26 	bl	80885a6 <_ZN9FatVolume6fatGetEmPm>
 808815a:	2800      	cmp	r0, #0
 808815c:	f105 35ff 	add.w	r5, r5, #4294967295
 8088160:	dd03      	ble.n	808816a <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
 8088162:	2d00      	cmp	r5, #0
 8088164:	d1f4      	bne.n	8088150 <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
 8088166:	6166      	str	r6, [r4, #20]
 8088168:	e003      	b.n	8088172 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
 808816a:	6127      	str	r7, [r4, #16]
  return false;
 808816c:	2000      	movs	r0, #0
 808816e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
 8088172:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
 8088174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08088178 <_ZN7FatFile15openCachedEntryEPS_thh>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              uint8_t oflag, uint8_t lfnOrd) {
 8088178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808817a:	460f      	mov	r7, r1
 808817c:	4604      	mov	r4, r0
 808817e:	4616      	mov	r6, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
 8088180:	2100      	movs	r1, #0
 8088182:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              uint8_t oflag, uint8_t lfnOrd) {
 8088184:	461d      	mov	r5, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
 8088186:	f005 fb79 	bl	808d87c <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
 808818a:	68b8      	ldr	r0, [r7, #8]
  m_dirIndex = dirIndex;
 808818c:	80a6      	strh	r6, [r4, #4]
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              uint8_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
 808818e:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
 8088190:	6a3b      	ldr	r3, [r7, #32]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 8088192:	f006 020f 	and.w	r2, r6, #15
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
 8088196:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 8088198:	0152      	lsls	r2, r2, #5
 808819a:	f100 0334 	add.w	r3, r0, #52	; 0x34
 808819e:	4413      	add	r3, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
 80881a0:	7ad9      	ldrb	r1, [r3, #11]
 80881a2:	070f      	lsls	r7, r1, #28
 80881a4:	d502      	bpl.n	80881ac <_ZN7FatFile15openCachedEntryEPS_thh+0x34>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
 80881a6:	2000      	movs	r0, #0
 80881a8:	7020      	strb	r0, [r4, #0]
  return false;
 80881aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
 80881ac:	1881      	adds	r1, r0, r2
 80881ae:	f891 103f 	ldrb.w	r1, [r1, #63]	; 0x3f
 80881b2:	f001 0117 	and.w	r1, r1, #23
 80881b6:	7021      	strb	r1, [r4, #0]
  if (DIR_IS_FILE(dir)) {
 80881b8:	7adb      	ldrb	r3, [r3, #11]
 80881ba:	f013 0f18 	tst.w	r3, #24
    m_attr |= FILE_ATTR_FILE;
 80881be:	bf08      	it	eq
 80881c0:	f041 0108 	orreq.w	r1, r1, #8
  }
  m_lfnOrd = lfnOrd;
 80881c4:	f89d 3018 	ldrb.w	r3, [sp, #24]
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
  if (DIR_IS_FILE(dir)) {
    m_attr |= FILE_ATTR_FILE;
 80881c8:	bf08      	it	eq
 80881ca:	7021      	strbeq	r1, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
  // Write, truncate, or at end is an error for a directory or read-only file.
  if (oflag & (O_WRITE | O_TRUNC | O_AT_END)) {
 80881cc:	f015 0f32 	tst.w	r5, #50	; 0x32
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
  if (DIR_IS_FILE(dir)) {
    m_attr |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
 80881d0:	70e3      	strb	r3, [r4, #3]
  // Write, truncate, or at end is an error for a directory or read-only file.
  if (oflag & (O_WRITE | O_TRUNC | O_AT_END)) {
 80881d2:	d003      	beq.n	80881dc <_ZN7FatFile15openCachedEntryEPS_thh+0x64>
    if (isSubDir() || isReadOnly()) {
 80881d4:	7823      	ldrb	r3, [r4, #0]
 80881d6:	f013 0f11 	tst.w	r3, #17
 80881da:	d1e4      	bne.n	80881a6 <_ZN7FatFile15openCachedEntryEPS_thh+0x2e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // save open flags for read/write
  m_flags = oflag & F_OFLAG;
 80881dc:	f005 030f 	and.w	r3, r5, #15
 80881e0:	70a3      	strb	r3, [r4, #2]
 80881e2:	6b03      	ldr	r3, [r0, #48]	; 0x30

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 80881e4:	4402      	add	r2, r0
    }
  }
  // save open flags for read/write
  m_flags = oflag & F_OFLAG;

  m_dirBlock = m_vol->cacheBlockNumber();
 80881e6:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
 80881e8:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
 80881ec:	f8b2 104e 	ldrh.w	r1, [r2, #78]	; 0x4e

  if (oflag & O_TRUNC) {
 80881f0:	06ee      	lsls	r6, r5, #27

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
 80881f2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16

  if (oflag & O_TRUNC) {
 80881f6:	d504      	bpl.n	8088202 <_ZN7FatFile15openCachedEntryEPS_thh+0x8a>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 80881f8:	b171      	cbz	r1, 8088218 <_ZN7FatFile15openCachedEntryEPS_thh+0xa0>
 80881fa:	f000 fa68 	bl	80886ce <_ZN9FatVolume9freeChainEm>
 80881fe:	b958      	cbnz	r0, 8088218 <_ZN7FatFile15openCachedEntryEPS_thh+0xa0>
 8088200:	e7d1      	b.n	80881a6 <_ZN7FatFile15openCachedEntryEPS_thh+0x2e>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
 8088202:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
 8088204:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8088206:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 8088208:	06ab      	lsls	r3, r5, #26
 808820a:	d50a      	bpl.n	8088222 <_ZN7FatFile15openCachedEntryEPS_thh+0xaa>
 808820c:	69e1      	ldr	r1, [r4, #28]
 808820e:	4620      	mov	r0, r4
 8088210:	f7ff ff69 	bl	80880e6 <_ZN7FatFile7seekSetEm>
 8088214:	b928      	cbnz	r0, 8088222 <_ZN7FatFile15openCachedEntryEPS_thh+0xaa>
 8088216:	e7c6      	b.n	80881a6 <_ZN7FatFile15openCachedEntryEPS_thh+0x2e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
 8088218:	78a3      	ldrb	r3, [r4, #2]
 808821a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 808821e:	70a3      	strb	r3, [r4, #2]
 8088220:	e7f2      	b.n	8088208 <_ZN7FatFile15openCachedEntryEPS_thh+0x90>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
 8088222:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
 8088224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08088228 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 8088228:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
 808822a:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 808822c:	4604      	mov	r4, r0
  if (!isOpen()) {
 808822e:	b90b      	cbnz	r3, 8088234 <_ZN7FatFile4syncEv+0xc>
    return true;
 8088230:	2001      	movs	r0, #1
 8088232:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (m_flags & F_FILE_DIR_DIRTY) {
 8088234:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8088238:	2b00      	cmp	r3, #0
 808823a:	da23      	bge.n	8088284 <_ZN7FatFile4syncEv+0x5c>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
 808823c:	2101      	movs	r1, #1
 808823e:	f7ff fe47 	bl	8087ed0 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 8088242:	4605      	mov	r5, r0
 8088244:	b928      	cbnz	r0, 8088252 <_ZN7FatFile4syncEv+0x2a>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 8088246:	7863      	ldrb	r3, [r4, #1]
  return false;
 8088248:	2000      	movs	r0, #0
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 808824a:	f043 0301 	orr.w	r3, r3, #1
 808824e:	7063      	strb	r3, [r4, #1]
 8088250:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 8088252:	7803      	ldrb	r3, [r0, #0]
 8088254:	2be5      	cmp	r3, #229	; 0xe5
 8088256:	d0f6      	beq.n	8088246 <_ZN7FatFile4syncEv+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
 8088258:	7823      	ldrb	r3, [r4, #0]
 808825a:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
 808825c:	bf44      	itt	mi
 808825e:	69e3      	ldrmi	r3, [r4, #28]
 8088260:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
 8088262:	8c23      	ldrh	r3, [r4, #32]
 8088264:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
 8088266:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8088268:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
 808826a:	4b09      	ldr	r3, [pc, #36]	; (8088290 <_ZN7FatFile4syncEv+0x68>)
 808826c:	681b      	ldr	r3, [r3, #0]
 808826e:	b12b      	cbz	r3, 808827c <_ZN7FatFile4syncEv+0x54>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
 8088270:	f100 0116 	add.w	r1, r0, #22
 8088274:	3018      	adds	r0, #24
 8088276:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
 8088278:	8b2b      	ldrh	r3, [r5, #24]
 808827a:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
 808827c:	78a3      	ldrb	r3, [r4, #2]
 808827e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8088282:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
 8088284:	68a0      	ldr	r0, [r4, #8]
 8088286:	f7fe ffb9 	bl	80871fc <_ZN9FatVolume9cacheSyncEv>
 808828a:	2800      	cmp	r0, #0
 808828c:	d0db      	beq.n	8088246 <_ZN7FatFile4syncEv+0x1e>
 808828e:	e7cf      	b.n	8088230 <_ZN7FatFile4syncEv+0x8>
 8088290:	20000bc0 	.word	0x20000bc0

08088294 <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
 8088294:	b510      	push	{r4, lr}
 8088296:	4604      	mov	r4, r0
  bool rtn = sync();
 8088298:	f7ff ffc6 	bl	8088228 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
 808829c:	2300      	movs	r3, #0
 808829e:	7023      	strb	r3, [r4, #0]
  return rtn;
}
 80882a0:	bd10      	pop	{r4, pc}

080882a2 <_ZN7FatFile4openEPS_PKch>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, uint8_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
 80882a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80882a4:	461f      	mov	r7, r3
 80882a6:	b093      	sub	sp, #76	; 0x4c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 80882a8:	2300      	movs	r3, #0
 80882aa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80882ae:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 80882b2:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, uint8_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
 80882b4:	4606      	mov	r6, r0
 80882b6:	460c      	mov	r4, r1
 80882b8:	9201      	str	r2, [sp, #4]
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 80882ba:	b10b      	cbz	r3, 80882c0 <_ZN7FatFile4openEPS_PKch+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
 80882bc:	2000      	movs	r0, #0
 80882be:	e03d      	b.n	808833c <_ZN7FatFile4openEPS_PKch+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 80882c0:	780b      	ldrb	r3, [r1, #0]
 80882c2:	f013 0f70 	tst.w	r3, #112	; 0x70
 80882c6:	d0f9      	beq.n	80882bc <_ZN7FatFile4openEPS_PKch+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
 80882c8:	7813      	ldrb	r3, [r2, #0]
 80882ca:	2b2f      	cmp	r3, #47	; 0x2f
 80882cc:	d112      	bne.n	80882f4 <_ZN7FatFile4openEPS_PKch+0x52>
    while (isDirSeparator(*path)) {
 80882ce:	9b01      	ldr	r3, [sp, #4]
 80882d0:	781a      	ldrb	r2, [r3, #0]
 80882d2:	2a2f      	cmp	r2, #47	; 0x2f
 80882d4:	d102      	bne.n	80882dc <_ZN7FatFile4openEPS_PKch+0x3a>
      path++;
 80882d6:	3301      	adds	r3, #1
 80882d8:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
 80882da:	e7f8      	b.n	80882ce <_ZN7FatFile4openEPS_PKch+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
 80882dc:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
 80882de:	b91a      	cbnz	r2, 80882e8 <_ZN7FatFile4openEPS_PKch+0x46>
      return openRoot(dirFile->m_vol);
 80882e0:	4630      	mov	r0, r6
 80882e2:	f7ff fe04 	bl	8087eee <_ZN7FatFile8openRootEP9FatVolume>
 80882e6:	e029      	b.n	808833c <_ZN7FatFile4openEPS_PKch+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
 80882e8:	a809      	add	r0, sp, #36	; 0x24
 80882ea:	f7ff fe00 	bl	8087eee <_ZN7FatFile8openRootEP9FatVolume>
 80882ee:	2800      	cmp	r0, #0
 80882f0:	d0e4      	beq.n	80882bc <_ZN7FatFile4openEPS_PKch+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
 80882f2:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
 80882f4:	aa01      	add	r2, sp, #4
 80882f6:	a903      	add	r1, sp, #12
 80882f8:	9801      	ldr	r0, [sp, #4]
 80882fa:	f7fe ff9b 	bl	8087234 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
 80882fe:	2800      	cmp	r0, #0
 8088300:	d0dc      	beq.n	80882bc <_ZN7FatFile4openEPS_PKch+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
 8088302:	9b01      	ldr	r3, [sp, #4]
 8088304:	781b      	ldrb	r3, [r3, #0]
 8088306:	b19b      	cbz	r3, 8088330 <_ZN7FatFile4openEPS_PKch+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_READ)) {
 8088308:	2301      	movs	r3, #1
 808830a:	aa03      	add	r2, sp, #12
 808830c:	4621      	mov	r1, r4
 808830e:	4630      	mov	r0, r6
 8088310:	f7ff f8d2 	bl	80874b8 <_ZN7FatFile4openEPS_P7fname_th>
 8088314:	2800      	cmp	r0, #0
 8088316:	d0d1      	beq.n	80882bc <_ZN7FatFile4openEPS_PKch+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
 8088318:	4635      	mov	r5, r6
 808831a:	ac09      	add	r4, sp, #36	; 0x24
 808831c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 808831e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8088320:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8088322:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8088324:	682b      	ldr	r3, [r5, #0]
    dirFile = &tmpDir;
    close();
 8088326:	4630      	mov	r0, r6
    }
    if (!open(dirFile, &fname, O_READ)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
 8088328:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
 808832a:	f7ff ffb3 	bl	8088294 <_ZN7FatFile5closeEv>
 808832e:	e7e0      	b.n	80882f2 <_ZN7FatFile4openEPS_PKch+0x50>
  }
  return open(dirFile, &fname, oflag);
 8088330:	463b      	mov	r3, r7
 8088332:	aa03      	add	r2, sp, #12
 8088334:	4621      	mov	r1, r4
 8088336:	4630      	mov	r0, r6
 8088338:	f7ff f8be 	bl	80874b8 <_ZN7FatFile4openEPS_P7fname_th>

fail:
  return false;
}
 808833c:	b013      	add	sp, #76	; 0x4c
 808833e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08088340 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 8088340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 8088344:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 8088346:	4604      	mov	r4, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 8088348:	071d      	lsls	r5, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 808834a:	4689      	mov	r9, r1
 808834c:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 808834e:	d508      	bpl.n	8088362 <_ZN7FatFile5writeEPKvj+0x22>
 8088350:	7883      	ldrb	r3, [r0, #2]
 8088352:	0799      	lsls	r1, r3, #30
 8088354:	d505      	bpl.n	8088362 <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & O_APPEND)) {
 8088356:	075b      	lsls	r3, r3, #29
 8088358:	d50b      	bpl.n	8088372 <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
 808835a:	69e1      	ldr	r1, [r4, #28]
 808835c:	f7ff fec3 	bl	80880e6 <_ZN7FatFile7seekSetEm>
 8088360:	b938      	cbnz	r0, 8088372 <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 8088362:	7863      	ldrb	r3, [r4, #1]
  return -1;
 8088364:	f04f 30ff 	mov.w	r0, #4294967295
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 8088368:	f043 0301 	orr.w	r3, r3, #1
 808836c:	7063      	strb	r3, [r4, #1]
  return -1;
 808836e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
 8088372:	6963      	ldr	r3, [r4, #20]
 8088374:	43db      	mvns	r3, r3
 8088376:	4598      	cmp	r8, r3
 8088378:	d8f3      	bhi.n	8088362 <_ZN7FatFile5writeEPKvj+0x22>
 808837a:	4647      	mov	r7, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 808837c:	f04f 0a00 	mov.w	sl, #0
 8088380:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 8088382:	2f00      	cmp	r7, #0
 8088384:	f000 8082 	beq.w	808848c <_ZN7FatFile5writeEPKvj+0x14c>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
 8088388:	68a0      	ldr	r0, [r4, #8]
    uint16_t blockOffset = m_curPosition & 0X1FF;
 808838a:	f3c3 0608 	ubfx	r6, r3, #0, #9
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 808838e:	7945      	ldrb	r5, [r0, #5]
    if (blockOfCluster == 0 && blockOffset == 0) {
 8088390:	ea15 2553 	ands.w	r5, r5, r3, lsr #9
 8088394:	d11c      	bne.n	80883d0 <_ZN7FatFile5writeEPKvj+0x90>
 8088396:	b9de      	cbnz	r6, 80883d0 <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
 8088398:	6921      	ldr	r1, [r4, #16]
 808839a:	b171      	cbz	r1, 80883ba <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 808839c:	f104 0210 	add.w	r2, r4, #16
 80883a0:	f000 f901 	bl	80885a6 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
 80883a4:	2800      	cmp	r0, #0
 80883a6:	dbdc      	blt.n	8088362 <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
 80883a8:	f040 808e 	bne.w	80884c8 <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
 80883ac:	4620      	mov	r0, r4
 80883ae:	f7ff fd45 	bl	8087e3c <_ZN7FatFile10addClusterEv>
 80883b2:	2800      	cmp	r0, #0
 80883b4:	f040 8088 	bne.w	80884c8 <_ZN7FatFile5writeEPKvj+0x188>
 80883b8:	e7d3      	b.n	8088362 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
 80883ba:	6a23      	ldr	r3, [r4, #32]
 80883bc:	b93b      	cbnz	r3, 80883ce <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
 80883be:	4620      	mov	r0, r4
 80883c0:	f7ff fd3c 	bl	8087e3c <_ZN7FatFile10addClusterEv>
 80883c4:	2800      	cmp	r0, #0
 80883c6:	d0cc      	beq.n	8088362 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
 80883c8:	6923      	ldr	r3, [r4, #16]
 80883ca:	6223      	str	r3, [r4, #32]
 80883cc:	e000      	b.n	80883d0 <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
 80883ce:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 80883d0:	6921      	ldr	r1, [r4, #16]
 80883d2:	68a0      	ldr	r0, [r4, #8]
 80883d4:	f000 f8e1 	bl	808859a <_ZNK9FatVolume17clusterStartBlockEm>
 80883d8:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
 80883da:	b916      	cbnz	r6, 80883e2 <_ZN7FatFile5writeEPKvj+0xa2>
 80883dc:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 80883e0:	d221      	bcs.n	8088426 <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
 80883e2:	f5c6 7500 	rsb	r5, r6, #512	; 0x200
 80883e6:	42bd      	cmp	r5, r7
 80883e8:	bf28      	it	cs
 80883ea:	463d      	movcs	r5, r7
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
 80883ec:	b936      	cbnz	r6, 80883fc <_ZN7FatFile5writeEPKvj+0xbc>
 80883ee:	6963      	ldr	r3, [r4, #20]
 80883f0:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
 80883f2:	4293      	cmp	r3, r2
 80883f4:	bf34      	ite	cc
 80883f6:	2201      	movcc	r2, #1
 80883f8:	2205      	movcs	r2, #5
 80883fa:	e000      	b.n	80883fe <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
 80883fc:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 80883fe:	68a0      	ldr	r0, [r4, #8]
 8088400:	3028      	adds	r0, #40	; 0x28
 8088402:	f000 f8a6 	bl	8088552 <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
 8088406:	2800      	cmp	r0, #0
 8088408:	d0ab      	beq.n	8088362 <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 808840a:	4430      	add	r0, r6
 808840c:	462a      	mov	r2, r5
 808840e:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
 8088410:	442e      	add	r6, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 8088412:	f005 fa28 	bl	808d866 <memcpy>
      if (512 == (n + blockOffset)) {
 8088416:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 808841a:	d131      	bne.n	8088480 <_ZN7FatFile5writeEPKvj+0x140>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
 808841c:	68a0      	ldr	r0, [r4, #8]
 808841e:	3028      	adds	r0, #40	; 0x28
 8088420:	f000 f870 	bl	8088504 <_ZN8FatCache4syncEv>
 8088424:	e018      	b.n	8088458 <_ZN7FatFile5writeEPKvj+0x118>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
 8088426:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 808842a:	68a2      	ldr	r2, [r4, #8]
 808842c:	d316      	bcc.n	808845c <_ZN7FatFile5writeEPKvj+0x11c>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
 808842e:	7913      	ldrb	r3, [r2, #4]
 8088430:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8088432:	1b5d      	subs	r5, r3, r5
 8088434:	b2ed      	uxtb	r5, r5
      uint8_t nBlock = nToWrite >> 9;
 8088436:	f3c7 2347 	ubfx	r3, r7, #9, #8
 808843a:	42ab      	cmp	r3, r5
 808843c:	bf28      	it	cs
 808843e:	462b      	movcs	r3, r5
      if (nBlock > maxBlocks) {
        nBlock = maxBlocks;
      }
      n = 512*nBlock;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
 8088440:	4281      	cmp	r1, r0
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      uint8_t nBlock = nToWrite >> 9;
      if (nBlock > maxBlocks) {
        nBlock = maxBlocks;
      }
      n = 512*nBlock;
 8088442:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
 8088446:	d302      	bcc.n	808844e <_ZN7FatFile5writeEPKvj+0x10e>
 8088448:	4418      	add	r0, r3
 808844a:	4281      	cmp	r1, r0
 808844c:	d336      	bcc.n	80884bc <_ZN7FatFile5writeEPKvj+0x17c>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nBlock)) {
 808844e:	68a0      	ldr	r0, [r4, #8]
 8088450:	6802      	ldr	r2, [r0, #0]
 8088452:	68d6      	ldr	r6, [r2, #12]
 8088454:	464a      	mov	r2, r9
 8088456:	47b0      	blx	r6
 8088458:	b990      	cbnz	r0, 8088480 <_ZN7FatFile5writeEPKvj+0x140>
 808845a:	e782      	b.n	8088362 <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
 808845c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 808845e:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 8088460:	bf02      	ittt	eq
 8088462:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8088466:	f882 a028 	strbeq.w	sl, [r2, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 808846a:	6313      	streq	r3, [r2, #48]	; 0x30
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
 808846c:	68a0      	ldr	r0, [r4, #8]
 808846e:	464a      	mov	r2, r9
 8088470:	6803      	ldr	r3, [r0, #0]
 8088472:	685b      	ldr	r3, [r3, #4]
 8088474:	4798      	blx	r3
 8088476:	2800      	cmp	r0, #0
 8088478:	f43f af73 	beq.w	8088362 <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
 808847c:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 8088480:	6963      	ldr	r3, [r4, #20]
    src += n;
 8088482:	44a9      	add	r9, r5
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 8088484:	442b      	add	r3, r5
 8088486:	6163      	str	r3, [r4, #20]
    src += n;
    nToWrite -= n;
 8088488:	1b7f      	subs	r7, r7, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 808848a:	e779      	b.n	8088380 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
 808848c:	69e2      	ldr	r2, [r4, #28]
 808848e:	4293      	cmp	r3, r2
 8088490:	78a2      	ldrb	r2, [r4, #2]
 8088492:	d901      	bls.n	8088498 <_ZN7FatFile5writeEPKvj+0x158>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
 8088494:	61e3      	str	r3, [r4, #28]
 8088496:	e002      	b.n	808849e <_ZN7FatFile5writeEPKvj+0x15e>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
 8088498:	4b0e      	ldr	r3, [pc, #56]	; (80884d4 <_ZN7FatFile5writeEPKvj+0x194>)
 808849a:	681b      	ldr	r3, [r3, #0]
 808849c:	b113      	cbz	r3, 80884a4 <_ZN7FatFile5writeEPKvj+0x164>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
 808849e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80884a2:	70a2      	strb	r2, [r4, #2]
  }

  if (m_flags & O_SYNC) {
 80884a4:	78a3      	ldrb	r3, [r4, #2]
 80884a6:	071a      	lsls	r2, r3, #28
 80884a8:	d402      	bmi.n	80884b0 <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
 80884aa:	4640      	mov	r0, r8
 80884ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & O_SYNC) {
    if (!sync()) {
 80884b0:	4620      	mov	r0, r4
 80884b2:	f7ff feb9 	bl	8088228 <_ZN7FatFile4syncEv>
 80884b6:	2800      	cmp	r0, #0
 80884b8:	d1f7      	bne.n	80884aa <_ZN7FatFile5writeEPKvj+0x16a>
 80884ba:	e752      	b.n	8088362 <_ZN7FatFile5writeEPKvj+0x22>
 80884bc:	f04f 30ff 	mov.w	r0, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 80884c0:	f882 a028 	strb.w	sl, [r2, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 80884c4:	6310      	str	r0, [r2, #48]	; 0x30
 80884c6:	e7c2      	b.n	808844e <_ZN7FatFile5writeEPKvj+0x10e>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 80884c8:	6921      	ldr	r1, [r4, #16]
 80884ca:	68a0      	ldr	r0, [r4, #8]
 80884cc:	f000 f865 	bl	808859a <_ZNK9FatVolume17clusterStartBlockEm>
 80884d0:	4601      	mov	r1, r0
 80884d2:	e783      	b.n	80883dc <_ZN7FatFile5writeEPKvj+0x9c>
 80884d4:	20000bc0 	.word	0x20000bc0

080884d8 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
 80884d8:	f000 bf50 	b.w	808937c <HAL_Pin_Map>

080884dc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80884dc:	b570      	push	{r4, r5, r6, lr}
 80884de:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80884e0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80884e2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80884e4:	b149      	cbz	r1, 80884fa <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80884e6:	f005 ff49 	bl	808e37c <strlen>
 80884ea:	682b      	ldr	r3, [r5, #0]
 80884ec:	4602      	mov	r2, r0
 80884ee:	4621      	mov	r1, r4
 80884f0:	4628      	mov	r0, r5
    }
 80884f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80884f6:	68db      	ldr	r3, [r3, #12]
 80884f8:	4718      	bx	r3
    }
 80884fa:	bd70      	pop	{r4, r5, r6, pc}

080884fc <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
 80884fc:	f000 bf3e 	b.w	808937c <HAL_Pin_Map>

08088500 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
 8088500:	f000 bf3c 	b.w	808937c <HAL_Pin_Map>

08088504 <_ZN8FatCache4syncEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 8088504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
 8088506:	7803      	ldrb	r3, [r0, #0]

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 8088508:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
 808850a:	07da      	lsls	r2, r3, #31
 808850c:	d51e      	bpl.n	808854c <_ZN8FatCache4syncEv+0x48>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
 808850e:	6840      	ldr	r0, [r0, #4]
 8088510:	f104 060c 	add.w	r6, r4, #12
 8088514:	6803      	ldr	r3, [r0, #0]
 8088516:	4632      	mov	r2, r6
 8088518:	685b      	ldr	r3, [r3, #4]
 808851a:	68a1      	ldr	r1, [r4, #8]
 808851c:	4798      	blx	r3
 808851e:	4605      	mov	r5, r0
 8088520:	b908      	cbnz	r0, 8088526 <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
 8088522:	2500      	movs	r5, #0
 8088524:	e013      	b.n	808854e <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
 8088526:	7823      	ldrb	r3, [r4, #0]
 8088528:	079b      	lsls	r3, r3, #30
 808852a:	d404      	bmi.n	8088536 <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
 808852c:	7823      	ldrb	r3, [r4, #0]
 808852e:	f023 0301 	bic.w	r3, r3, #1
 8088532:	7023      	strb	r3, [r4, #0]
 8088534:	e00b      	b.n	808854e <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
 8088536:	6860      	ldr	r0, [r4, #4]
      if (!m_vol->writeBlock(lbn, m_block.data)) {
 8088538:	68a7      	ldr	r7, [r4, #8]
 808853a:	6901      	ldr	r1, [r0, #16]
 808853c:	6803      	ldr	r3, [r0, #0]
 808853e:	4632      	mov	r2, r6
 8088540:	685b      	ldr	r3, [r3, #4]
 8088542:	4439      	add	r1, r7
 8088544:	4798      	blx	r3
 8088546:	2800      	cmp	r0, #0
 8088548:	d1f0      	bne.n	808852c <_ZN8FatCache4syncEv+0x28>
 808854a:	e7ea      	b.n	8088522 <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
 808854c:	2501      	movs	r5, #1

fail:
  return false;
}
 808854e:	4628      	mov	r0, r5
 8088550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08088552 <_ZN8FatCache4readEmh>:
 * <http://www.gnu.org/licenses/>.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8088552:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
 8088554:	6883      	ldr	r3, [r0, #8]
 * <http://www.gnu.org/licenses/>.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8088556:	4604      	mov	r4, r0
  if (m_lbn != lbn) {
 8088558:	428b      	cmp	r3, r1
 * <http://www.gnu.org/licenses/>.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 808855a:	460e      	mov	r6, r1
 808855c:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
 808855e:	d014      	beq.n	808858a <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
 8088560:	f7ff ffd0 	bl	8088504 <_ZN8FatCache4syncEv>
 8088564:	b908      	cbnz	r0, 808856a <_ZN8FatCache4readEmh+0x18>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:
  return 0;
 8088566:	2000      	movs	r0, #0
 8088568:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
 808856a:	076b      	lsls	r3, r5, #29
 808856c:	d503      	bpl.n	8088576 <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
 808856e:	2300      	movs	r3, #0
 8088570:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
 8088572:	60a6      	str	r6, [r4, #8]
 8088574:	e009      	b.n	808858a <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
 8088576:	6860      	ldr	r0, [r4, #4]
 8088578:	f104 020c 	add.w	r2, r4, #12
 808857c:	6803      	ldr	r3, [r0, #0]
 808857e:	4631      	mov	r1, r6
 8088580:	681b      	ldr	r3, [r3, #0]
 8088582:	4798      	blx	r3
 8088584:	2800      	cmp	r0, #0
 8088586:	d1f2      	bne.n	808856e <_ZN8FatCache4readEmh+0x1c>
 8088588:	e7ed      	b.n	8088566 <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
 808858a:	4620      	mov	r0, r4
 808858c:	7823      	ldrb	r3, [r4, #0]
 808858e:	f005 0503 	and.w	r5, r5, #3
 8088592:	431d      	orrs	r5, r3
 8088594:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:
  return 0;
}
 8088598:	bd70      	pop	{r4, r5, r6, pc}

0808859a <_ZNK9FatVolume17clusterStartBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
 808859a:	7983      	ldrb	r3, [r0, #6]
 808859c:	3902      	subs	r1, #2
 808859e:	6940      	ldr	r0, [r0, #20]
 80885a0:	4099      	lsls	r1, r3
}
 80885a2:	4408      	add	r0, r1
 80885a4:	4770      	bx	lr

080885a6 <_ZN9FatVolume6fatGetEmPm>:
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 80885a6:	b570      	push	{r4, r5, r6, lr}
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 80885a8:	79c3      	ldrb	r3, [r0, #7]
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 80885aa:	4605      	mov	r5, r0
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 80885ac:	2b20      	cmp	r3, #32
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 80885ae:	460c      	mov	r4, r1
 80885b0:	4616      	mov	r6, r2
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 80885b2:	d112      	bne.n	80885da <_ZN9FatVolume6fatGetEmPm+0x34>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
 80885b4:	6981      	ldr	r1, [r0, #24]
 80885b6:	2202      	movs	r2, #2
 80885b8:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80885bc:	f500 700d 	add.w	r0, r0, #564	; 0x234
 80885c0:	f7ff ffc7 	bl	8088552 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 80885c4:	b910      	cbnz	r0, 80885cc <_ZN9FatVolume6fatGetEmPm+0x26>
  }
  *value = next;
  return 1;

fail:
  return -1;
 80885c6:	f04f 30ff 	mov.w	r0, #4294967295
 80885ca:	bd70      	pop	{r4, r5, r6, pc}
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
 80885cc:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 80885d0:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 80885d4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
 80885d8:	e00f      	b.n	80885fa <_ZN9FatVolume6fatGetEmPm+0x54>
  }

  if (m_fatType == 16) {
 80885da:	2b10      	cmp	r3, #16
 80885dc:	d1f3      	bne.n	80885c6 <_ZN9FatVolume6fatGetEmPm+0x20>
 80885de:	6983      	ldr	r3, [r0, #24]
 80885e0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80885e4:	2202      	movs	r2, #2
 80885e6:	4419      	add	r1, r3
 80885e8:	f500 700d 	add.w	r0, r0, #564	; 0x234
 80885ec:	f7ff ffb1 	bl	8088552 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 80885f0:	2800      	cmp	r0, #0
 80885f2:	d0e8      	beq.n	80885c6 <_ZN9FatVolume6fatGetEmPm+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
 80885f4:	b2e4      	uxtb	r4, r4
 80885f6:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
 80885fa:	69ea      	ldr	r2, [r5, #28]
 80885fc:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
 80885fe:	bf9a      	itte	ls
 8088600:	6033      	strls	r3, [r6, #0]
  return 1;
 8088602:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
 8088604:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
 8088606:	bd70      	pop	{r4, r5, r6, pc}

08088608 <_ZN9FatVolume6fatPutEmm>:
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8088608:	b538      	push	{r3, r4, r5, lr}
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 808860a:	79c3      	ldrb	r3, [r0, #7]
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 808860c:	460c      	mov	r4, r1
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 808860e:	2b20      	cmp	r3, #32
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8088610:	4615      	mov	r5, r2
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8088612:	d10f      	bne.n	8088634 <_ZN9FatVolume6fatPutEmm+0x2c>
 8088614:	6981      	ldr	r1, [r0, #24]
 8088616:	2203      	movs	r2, #3
 8088618:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 808861c:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8088620:	f7ff ff97 	bl	8088552 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 8088624:	b908      	cbnz	r0, 808862a <_ZN9FatVolume6fatPutEmm+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
 8088626:	2000      	movs	r0, #0
 8088628:	bd38      	pop	{r3, r4, r5, pc}
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
 808862a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 808862e:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
 8088632:	e00f      	b.n	8088654 <_ZN9FatVolume6fatPutEmm+0x4c>
    return true;
  }

  if (m_fatType == 16) {
 8088634:	2b10      	cmp	r3, #16
 8088636:	d1f6      	bne.n	8088626 <_ZN9FatVolume6fatPutEmm+0x1e>
 8088638:	6983      	ldr	r3, [r0, #24]
 808863a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 808863e:	2203      	movs	r2, #3
 8088640:	4419      	add	r1, r3
 8088642:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8088646:	f7ff ff84 	bl	8088552 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 808864a:	2800      	cmp	r0, #0
 808864c:	d0eb      	beq.n	8088626 <_ZN9FatVolume6fatPutEmm+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
 808864e:	b2e4      	uxtb	r4, r4
 8088650:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
 8088654:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
 8088656:	bd38      	pop	{r3, r4, r5, pc}

08088658 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 8088658:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 808865c:	4605      	mov	r5, r0
 808865e:	4690      	mov	r8, r2
  uint32_t find = current ? current : m_allocSearchStart;
 8088660:	460f      	mov	r7, r1
 8088662:	b909      	cbnz	r1, 8088668 <_ZN9FatVolume15allocateClusterEmPm+0x10>
 8088664:	68c6      	ldr	r6, [r0, #12]
 8088666:	e000      	b.n	808866a <_ZN9FatVolume15allocateClusterEmPm+0x12>
 8088668:	460e      	mov	r6, r1
 808866a:	4634      	mov	r4, r6
  uint32_t start = find;
  while (1) {
    find++;
    // If at end of FAT go to beginning of FAT.
    if (find > m_lastCluster) {
 808866c:	69eb      	ldr	r3, [r5, #28]
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
  uint32_t find = current ? current : m_allocSearchStart;
  uint32_t start = find;
  while (1) {
    find++;
 808866e:	3401      	adds	r4, #1
    // If at end of FAT go to beginning of FAT.
    if (find > m_lastCluster) {
      find = 2;
 8088670:	429c      	cmp	r4, r3
 8088672:	bf88      	it	hi
 8088674:	2402      	movhi	r4, #2
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
 8088676:	aa01      	add	r2, sp, #4
 8088678:	4621      	mov	r1, r4
 808867a:	4628      	mov	r0, r5
 808867c:	f7ff ff93 	bl	80885a6 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 8088680:	2800      	cmp	r0, #0
 8088682:	db0d      	blt.n	80886a0 <_ZN9FatVolume15allocateClusterEmPm+0x48>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
 8088684:	d001      	beq.n	808868a <_ZN9FatVolume15allocateClusterEmPm+0x32>
 8088686:	9b01      	ldr	r3, [sp, #4]
 8088688:	b113      	cbz	r3, 8088690 <_ZN9FatVolume15allocateClusterEmPm+0x38>
      break;
    }
    if (find == start) {
 808868a:	42b4      	cmp	r4, r6
 808868c:	d1ee      	bne.n	808866c <_ZN9FatVolume15allocateClusterEmPm+0x14>
 808868e:	e007      	b.n	80886a0 <_ZN9FatVolume15allocateClusterEmPm+0x48>
  }
  uint32_t clusterStartBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
 8088690:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8088694:	4621      	mov	r1, r4
 8088696:	4628      	mov	r0, r5
 8088698:	f7ff ffb6 	bl	8088608 <_ZN9FatVolume6fatPutEmm>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // mark end of chain
  if (!fatPutEOC(find)) {
 808869c:	4606      	mov	r6, r0
 808869e:	b908      	cbnz	r0, 80886a4 <_ZN9FatVolume15allocateClusterEmPm+0x4c>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
 80886a0:	2600      	movs	r6, #0
 80886a2:	e010      	b.n	80886c6 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // mark end of chain
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
 80886a4:	b137      	cbz	r7, 80886b4 <_ZN9FatVolume15allocateClusterEmPm+0x5c>
    // link clusters
    if (!fatPut(current, find)) {
 80886a6:	4622      	mov	r2, r4
 80886a8:	4639      	mov	r1, r7
 80886aa:	4628      	mov	r0, r5
 80886ac:	f7ff ffac 	bl	8088608 <_ZN9FatVolume6fatPutEmm>
 80886b0:	b908      	cbnz	r0, 80886b6 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
 80886b2:	e7f5      	b.n	80886a0 <_ZN9FatVolume15allocateClusterEmPm+0x48>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // Remember place for search start.
    m_allocSearchStart = find;
 80886b4:	60ec      	str	r4, [r5, #12]
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
 80886b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80886b8:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
 80886ba:	bfa4      	itt	ge
 80886bc:	f103 33ff 	addge.w	r3, r3, #4294967295
 80886c0:	626b      	strge	r3, [r5, #36]	; 0x24
  }
  updateFreeClusterCount(-1);
  *next = find;
 80886c2:	f8c8 4000 	str.w	r4, [r8]
  return true;

fail:
  return false;
}
 80886c6:	4630      	mov	r0, r6
 80886c8:	b002      	add	sp, #8
 80886ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080886ce <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
 80886ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80886d0:	4604      	mov	r4, r0
 80886d2:	460d      	mov	r5, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
 80886d4:	aa01      	add	r2, sp, #4
 80886d6:	4629      	mov	r1, r5
 80886d8:	4620      	mov	r0, r4
 80886da:	f7ff ff64 	bl	80885a6 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 80886de:	1e06      	subs	r6, r0, #0
 80886e0:	da01      	bge.n	80886e6 <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
 80886e2:	2000      	movs	r0, #0
 80886e4:	e012      	b.n	808870c <_ZN9FatVolume9freeChainEm+0x3e>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
 80886e6:	2200      	movs	r2, #0
 80886e8:	4629      	mov	r1, r5
 80886ea:	4620      	mov	r0, r4
 80886ec:	f7ff ff8c 	bl	8088608 <_ZN9FatVolume6fatPutEmm>
 80886f0:	2800      	cmp	r0, #0
 80886f2:	d0f6      	beq.n	80886e2 <_ZN9FatVolume9freeChainEm+0x14>
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
 80886f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80886f6:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
 80886f8:	bfa4      	itt	ge
 80886fa:	3301      	addge	r3, #1
 80886fc:	6263      	strge	r3, [r4, #36]	; 0x24
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster < m_allocSearchStart) {
 80886fe:	68e3      	ldr	r3, [r4, #12]
 8088700:	429d      	cmp	r5, r3
      m_allocSearchStart = cluster;
 8088702:	bf38      	it	cc
 8088704:	60e5      	strcc	r5, [r4, #12]
    }
    cluster = next;
 8088706:	9d01      	ldr	r5, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
 8088708:	2e00      	cmp	r6, #0
 808870a:	d1e3      	bne.n	80886d4 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
 808870c:	b002      	add	sp, #8
 808870e:	bd70      	pop	{r4, r5, r6, pc}

08088710 <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
 8088710:	b570      	push	{r4, r5, r6, lr}
 8088712:	4604      	mov	r4, r0
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
 8088714:	2301      	movs	r3, #1
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
 8088716:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
 8088718:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 808871a:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
 808871e:	71c2      	strb	r2, [r0, #7]
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE

  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
 8088720:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
 8088722:	62e0      	str	r0, [r4, #44]	; 0x2c
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8088724:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 8088728:	6303      	str	r3, [r0, #48]	; 0x30
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
 808872a:	f8c4 0238 	str.w	r0, [r4, #568]	; 0x238
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 808872e:	f880 2234 	strb.w	r2, [r0, #564]	; 0x234
    m_lbn = 0XFFFFFFFF;
 8088732:	f8c0 323c 	str.w	r3, [r0, #572]	; 0x23c
 8088736:	b1a1      	cbz	r1, 8088762 <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
 8088738:	2904      	cmp	r1, #4
 808873a:	d860      	bhi.n	80887fe <_ZN9FatVolume4initEh+0xee>
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 808873c:	4611      	mov	r1, r2
 808873e:	3028      	adds	r0, #40	; 0x28
 8088740:	f7ff ff07 	bl	8088552 <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8088744:	2800      	cmp	r0, #0
 8088746:	d05a      	beq.n	80887fe <_ZN9FatVolume4initEh+0xee>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
 8088748:	eb00 1305 	add.w	r3, r0, r5, lsl #4
 808874c:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 8088750:	065b      	lsls	r3, r3, #25
 8088752:	d154      	bne.n	80887fe <_ZN9FatVolume4initEh+0xee>
 8088754:	351b      	adds	r5, #27
 8088756:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 808875a:	f8d5 5006 	ldr.w	r5, [r5, #6]
 808875e:	2d00      	cmp	r5, #0
 8088760:	d04d      	beq.n	80887fe <_ZN9FatVolume4initEh+0xee>
 8088762:	2200      	movs	r2, #0
 8088764:	4629      	mov	r1, r5
 8088766:	f104 0028 	add.w	r0, r4, #40	; 0x28
 808876a:	f7ff fef2 	bl	8088552 <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
 808876e:	2800      	cmp	r0, #0
 8088770:	d045      	beq.n	80887fe <_ZN9FatVolume4initEh+0xee>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
 8088772:	f8b0 300b 	ldrh.w	r3, [r0, #11]
 8088776:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 808877a:	d140      	bne.n	80887fe <_ZN9FatVolume4initEh+0xee>
 808877c:	7c03      	ldrb	r3, [r0, #16]
 808877e:	2b02      	cmp	r3, #2
 8088780:	d13d      	bne.n	80887fe <_ZN9FatVolume4initEh+0xee>
      fbs->fatCount != 2 ||
 8088782:	89c3      	ldrh	r3, [r0, #14]
 8088784:	2b00      	cmp	r3, #0
 8088786:	d03a      	beq.n	80887fe <_ZN9FatVolume4initEh+0xee>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
 8088788:	7b41      	ldrb	r1, [r0, #13]
  m_clusterBlockMask = m_blocksPerCluster - 1;

  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
 808878a:	2609      	movs	r6, #9
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
 808878c:	1e4b      	subs	r3, r1, #1
 808878e:	7163      	strb	r3, [r4, #5]

  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
 8088790:	2300      	movs	r3, #0
 8088792:	71a3      	strb	r3, [r4, #6]
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
 8088794:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;

  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8088796:	2301      	movs	r3, #1
 8088798:	428b      	cmp	r3, r1
 808879a:	d007      	beq.n	80887ac <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
 808879c:	3e01      	subs	r6, #1
 808879e:	d02e      	beq.n	80887fe <_ZN9FatVolume4initEh+0xee>
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;

  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 80887a0:	79a2      	ldrb	r2, [r4, #6]
 80887a2:	005b      	lsls	r3, r3, #1
 80887a4:	3201      	adds	r2, #1
 80887a6:	b2db      	uxtb	r3, r3
 80887a8:	71a2      	strb	r2, [r4, #6]
 80887aa:	e7f5      	b.n	8088798 <_ZN9FatVolume4initEh+0x88>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_blocksPerFat = fbs->sectorsPerFat16 ?
 80887ac:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
 80887ae:	b902      	cbnz	r2, 80887b2 <_ZN9FatVolume4initEh+0xa2>
 80887b0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80887b2:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
 80887b4:	89c6      	ldrh	r6, [r0, #14]
 80887b6:	442e      	add	r6, r5
 80887b8:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 80887ba:	f8b0 3011 	ldrh.w	r3, [r0, #17]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 80887be:	eb06 0142 	add.w	r1, r6, r2, lsl #1
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 80887c2:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 80887c4:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
 80887c6:	f8b0 2011 	ldrh.w	r2, [r0, #17]
 80887ca:	0152      	lsls	r2, r2, #5
 80887cc:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
 80887d0:	eb01 2262 	add.w	r2, r1, r2, asr #9
 80887d4:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
 80887d6:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
 80887da:	b903      	cbnz	r3, 80887de <_ZN9FatVolume4initEh+0xce>
 80887dc:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
 80887de:	1aad      	subs	r5, r5, r2
 80887e0:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
 80887e2:	79a5      	ldrb	r5, [r4, #6]
 80887e4:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
 80887e8:	1c6b      	adds	r3, r5, #1
 80887ea:	61e3      	str	r3, [r4, #28]
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
#if MAINTAIN_FREE_CLUSTER_COUNT
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
 80887ec:	f04f 33ff 	mov.w	r3, #4294967295
 80887f0:	6263      	str	r3, [r4, #36]	; 0x24

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);

  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
 80887f2:	f640 73f4 	movw	r3, #4084	; 0xff4
 80887f6:	429d      	cmp	r5, r3
 80887f8:	d803      	bhi.n	8088802 <_ZN9FatVolume4initEh+0xf2>
    m_fatType = 12;
 80887fa:	230c      	movs	r3, #12
 80887fc:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
 80887fe:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
 8088800:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
 8088802:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8088806:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
 8088808:	bf89      	itett	hi
 808880a:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
 808880c:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
 808880e:	6223      	strhi	r3, [r4, #32]
    m_fatType = 32;
 8088810:	2320      	movhi	r3, #32
 8088812:	71e3      	strb	r3, [r4, #7]
  }
  return true;
 8088814:	2001      	movs	r0, #1

fail:
  return false;
}
 8088816:	bd70      	pop	{r4, r5, r6, pc}

08088818 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
 8088818:	f000 bdb0 	b.w	808937c <HAL_Pin_Map>

0808881c <_GLOBAL__sub_I__ZN9SdFatBase9errorHaltEP5Print>:
 808881c:	f000 bdae 	b.w	808937c <HAL_Pin_Map>

08088820 <_ZL10delay_msecm>:
  return reply;
}


static void delay_msec(uint32_t ms){
  delay(ms);
 8088820:	f002 ba20 	b.w	808ac64 <delay>

08088824 <_ZL9i2c_writehhPht>:
/**************************************************************************/
/*!
    @brief  Writes 8 bit values over I2C
*/
/**************************************************************************/
int8_t i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8088824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8088826:	4607      	mov	r7, r0
 8088828:	4614      	mov	r4, r2
 808882a:	461d      	mov	r5, r3
 808882c:	460e      	mov	r6, r1
#ifdef BME680_DEBUG
  Serial.print("\tI2C $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif
  Wire.beginTransmission((uint8_t)dev_id);
 808882e:	f003 fb19 	bl	808be64 <_Z19__fetch_global_Wirev>
 8088832:	4639      	mov	r1, r7
 8088834:	f003 f8e8 	bl	808ba08 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((uint8_t)reg_addr);
 8088838:	f003 fb14 	bl	808be64 <_Z19__fetch_global_Wirev>
 808883c:	6803      	ldr	r3, [r0, #0]
 808883e:	4631      	mov	r1, r6
 8088840:	689b      	ldr	r3, [r3, #8]
 8088842:	4798      	blx	r3
 8088844:	4425      	add	r5, r4
  while (len--) {
 8088846:	42ac      	cmp	r4, r5
 8088848:	d007      	beq.n	808885a <_ZL9i2c_writehhPht+0x36>
    Wire.write(*reg_data);
 808884a:	f003 fb0b 	bl	808be64 <_Z19__fetch_global_Wirev>
 808884e:	6803      	ldr	r3, [r0, #0]
 8088850:	f814 1b01 	ldrb.w	r1, [r4], #1
 8088854:	689b      	ldr	r3, [r3, #8]
 8088856:	4798      	blx	r3
#ifdef BME680_DEBUG
  Serial.print("\tI2C $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif
  Wire.beginTransmission((uint8_t)dev_id);
  Wire.write((uint8_t)reg_addr);
  while (len--) {
 8088858:	e7f5      	b.n	8088846 <_ZL9i2c_writehhPht+0x22>
#ifdef BME680_DEBUG
    Serial.print("0x"); Serial.print(*reg_data, HEX); Serial.print(", ");
#endif
    reg_data++;
  }
  Wire.endTransmission();
 808885a:	f003 fb03 	bl	808be64 <_Z19__fetch_global_Wirev>
 808885e:	f003 f8de 	bl	808ba1e <_ZN7TwoWire15endTransmissionEv>
#ifdef BME680_DEBUG
  Serial.println("");
#endif
  return 0;
}
 8088862:	2000      	movs	r0, #0
 8088864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08088868 <_ZL12spi_transferh>:
#endif
  return 0;
}


static uint8_t spi_transfer(uint8_t x) {
 8088868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (_BME680_SoftwareSPI_SCK == -1)
 808886c:	4d1b      	ldr	r5, [pc, #108]	; (80888dc <_ZL12spi_transferh+0x74>)
#endif
  return 0;
}


static uint8_t spi_transfer(uint8_t x) {
 808886e:	4680      	mov	r8, r0
  if (_BME680_SoftwareSPI_SCK == -1)
 8088870:	f995 3000 	ldrsb.w	r3, [r5]
 8088874:	3301      	adds	r3, #1
 8088876:	d105      	bne.n	8088884 <_ZL12spi_transferh+0x1c>
    return SPI.transfer(x);
 8088878:	4601      	mov	r1, r0
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
      reply |= 1;
  }
  return reply;
}
 808887a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
}


static uint8_t spi_transfer(uint8_t x) {
  if (_BME680_SoftwareSPI_SCK == -1)
    return SPI.transfer(x);
 808887e:	4818      	ldr	r0, [pc, #96]	; (80888e0 <_ZL12spi_transferh+0x78>)
 8088880:	f001 ba98 	b.w	8089db4 <_ZN8SPIClass8transferEh>
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
 8088884:	f8df 905c 	ldr.w	r9, [pc, #92]	; 80888e4 <_ZL12spi_transferh+0x7c>
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
 8088888:	f8df a05c 	ldr.w	sl, [pc, #92]	; 80888e8 <_ZL12spi_transferh+0x80>
 808888c:	2607      	movs	r6, #7
 808888e:	2400      	movs	r4, #0
  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
 8088890:	f995 0000 	ldrsb.w	r0, [r5]
 8088894:	2100      	movs	r1, #0
 8088896:	b280      	uxth	r0, r0
 8088898:	f003 fa47 	bl	808bd2a <digitalWrite>
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
 808889c:	2701      	movs	r7, #1
 808889e:	f999 0000 	ldrsb.w	r0, [r9]
 80888a2:	fa07 f106 	lsl.w	r1, r7, r6
 80888a6:	ea01 0108 	and.w	r1, r1, r8
 80888aa:	b280      	uxth	r0, r0
 80888ac:	f003 fa3d 	bl	808bd2a <digitalWrite>
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
 80888b0:	f995 0000 	ldrsb.w	r0, [r5]
 80888b4:	4639      	mov	r1, r7
 80888b6:	b280      	uxth	r0, r0
 80888b8:	f003 fa37 	bl	808bd2a <digitalWrite>
    if (digitalRead(_BME680_SoftwareSPI_MISO))
 80888bc:	f99a 0000 	ldrsb.w	r0, [sl]

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
 80888c0:	0064      	lsls	r4, r4, #1
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
 80888c2:	b280      	uxth	r0, r0

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
 80888c4:	b2e4      	uxtb	r4, r4
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
 80888c6:	f003 fa49 	bl	808bd5c <digitalRead>
 80888ca:	b100      	cbz	r0, 80888ce <_ZL12spi_transferh+0x66>
      reply |= 1;
 80888cc:	433c      	orrs	r4, r7
    return SPI.transfer(x);

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
 80888ce:	f116 36ff 	adds.w	r6, r6, #4294967295
 80888d2:	d2dd      	bcs.n	8088890 <_ZL12spi_transferh+0x28>
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
      reply |= 1;
  }
  return reply;
}
 80888d4:	4620      	mov	r0, r4
 80888d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80888da:	bf00      	nop
 80888dc:	20000bc9 	.word	0x20000bc9
 80888e0:	200010bc 	.word	0x200010bc
 80888e4:	20000bca 	.word	0x20000bca
 80888e8:	20000bc8 	.word	0x20000bc8

080888ec <_ZL9spi_writehhPht>:
/**************************************************************************/
/*!
    @brief  Writes 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_write(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 80888ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80888ee:	460f      	mov	r7, r1
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif

  digitalWrite(cspin, LOW);
 80888f0:	2100      	movs	r1, #0
/**************************************************************************/
/*!
    @brief  Writes 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_write(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 80888f2:	461d      	mov	r5, r3
 80888f4:	4614      	mov	r4, r2
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif

  digitalWrite(cspin, LOW);
 80888f6:	4606      	mov	r6, r0
 80888f8:	f003 fa17 	bl	808bd2a <digitalWrite>

  // If hardware SPI we should use transactions!
  if (_BME680_SoftwareSPI_SCK == -1) {
 80888fc:	4b12      	ldr	r3, [pc, #72]	; (8088948 <_ZL9spi_writehhPht+0x5c>)
 80888fe:	f993 3000 	ldrsb.w	r3, [r3]
 8088902:	3301      	adds	r3, #1
 8088904:	d10e      	bne.n	8088924 <_ZL9spi_writehhPht+0x38>
    SPI.begin();
 8088906:	4811      	ldr	r0, [pc, #68]	; (808894c <_ZL9spi_writehhPht+0x60>)
 8088908:	f001 f9e8 	bl	8089cdc <_ZN8SPIClass5beginEv>
    SPI.setClockDivider(BME680_DEFAULT_SPIFREQ);
 808890c:	2140      	movs	r1, #64	; 0x40
 808890e:	480f      	ldr	r0, [pc, #60]	; (808894c <_ZL9spi_writehhPht+0x60>)
 8088910:	f001 fa3c 	bl	8089d8c <_ZN8SPIClass15setClockDividerEh>
    SPI.setBitOrder(MSBFIRST);
 8088914:	2101      	movs	r1, #1
 8088916:	480d      	ldr	r0, [pc, #52]	; (808894c <_ZL9spi_writehhPht+0x60>)
 8088918:	f001 f9eb 	bl	8089cf2 <_ZN8SPIClass11setBitOrderEh>
    SPI.setDataMode(SPI_MODE0);
 808891c:	2100      	movs	r1, #0
 808891e:	480b      	ldr	r0, [pc, #44]	; (808894c <_ZL9spi_writehhPht+0x60>)
 8088920:	f001 f9ea 	bl	8089cf8 <_ZN8SPIClass11setDataModeEh>
    // SPI.beginTransaction(SPISettings(BME680_DEFAULT_SPIFREQ, MSBFIRST, SPI_MODE0));
  }

  spi_transfer(reg_addr);
 8088924:	4638      	mov	r0, r7
 8088926:	f7ff ff9f 	bl	8088868 <_ZL12spi_transferh>
 808892a:	4425      	add	r5, r4
  while (len--) {
 808892c:	42ac      	cmp	r4, r5
 808892e:	d004      	beq.n	808893a <_ZL9spi_writehhPht+0x4e>
    spi_transfer(*reg_data);
 8088930:	f814 0b01 	ldrb.w	r0, [r4], #1
 8088934:	f7ff ff98 	bl	8088868 <_ZL12spi_transferh>
    SPI.setDataMode(SPI_MODE0);
    // SPI.beginTransaction(SPISettings(BME680_DEFAULT_SPIFREQ, MSBFIRST, SPI_MODE0));
  }

  spi_transfer(reg_addr);
  while (len--) {
 8088938:	e7f8      	b.n	808892c <_ZL9spi_writehhPht+0x40>

  if (_BME680_SoftwareSPI_SCK == -1) {
    //SPI.endTransaction();
  }

  digitalWrite(cspin, HIGH);
 808893a:	4630      	mov	r0, r6
 808893c:	2101      	movs	r1, #1
 808893e:	f003 f9f4 	bl	808bd2a <digitalWrite>

#ifdef BME680_DEBUG
  Serial.println("");
#endif
  return 0;
}
 8088942:	2000      	movs	r0, #0
 8088944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8088946:	bf00      	nop
 8088948:	20000bc9 	.word	0x20000bc9
 808894c:	200010bc 	.word	0x200010bc

08088950 <_ZL8spi_readhhPht>:
/**************************************************************************/
/*!
    @brief  Reads 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_read(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8088950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8088952:	460f      	mov	r7, r1
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" => ");
#endif

  digitalWrite(cspin, LOW);
 8088954:	2100      	movs	r1, #0
/**************************************************************************/
/*!
    @brief  Reads 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_read(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8088956:	461d      	mov	r5, r3
 8088958:	4614      	mov	r4, r2
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" => ");
#endif

  digitalWrite(cspin, LOW);
 808895a:	4606      	mov	r6, r0
 808895c:	f003 f9e5 	bl	808bd2a <digitalWrite>

  // If hardware SPI we should use transactions!
  if (_BME680_SoftwareSPI_SCK == -1) {
 8088960:	4b12      	ldr	r3, [pc, #72]	; (80889ac <_ZL8spi_readhhPht+0x5c>)
 8088962:	f993 3000 	ldrsb.w	r3, [r3]
 8088966:	3301      	adds	r3, #1
 8088968:	d10e      	bne.n	8088988 <_ZL8spi_readhhPht+0x38>
    SPI.begin();
 808896a:	4811      	ldr	r0, [pc, #68]	; (80889b0 <_ZL8spi_readhhPht+0x60>)
 808896c:	f001 f9b6 	bl	8089cdc <_ZN8SPIClass5beginEv>
    SPI.setClockDivider(BME680_DEFAULT_SPIFREQ);
 8088970:	2140      	movs	r1, #64	; 0x40
 8088972:	480f      	ldr	r0, [pc, #60]	; (80889b0 <_ZL8spi_readhhPht+0x60>)
 8088974:	f001 fa0a 	bl	8089d8c <_ZN8SPIClass15setClockDividerEh>
    SPI.setBitOrder(MSBFIRST);
 8088978:	2101      	movs	r1, #1
 808897a:	480d      	ldr	r0, [pc, #52]	; (80889b0 <_ZL8spi_readhhPht+0x60>)
 808897c:	f001 f9b9 	bl	8089cf2 <_ZN8SPIClass11setBitOrderEh>
    SPI.setDataMode(SPI_MODE0);
 8088980:	2100      	movs	r1, #0
 8088982:	480b      	ldr	r0, [pc, #44]	; (80889b0 <_ZL8spi_readhhPht+0x60>)
 8088984:	f001 f9b8 	bl	8089cf8 <_ZN8SPIClass11setDataModeEh>
    // SPI.beginTransaction(SPISettings(BME680_DEFAULT_SPIFREQ, MSBFIRST, SPI_MODE0));
  }

  spi_transfer(reg_addr);
 8088988:	4638      	mov	r0, r7
 808898a:	f7ff ff6d 	bl	8088868 <_ZL12spi_transferh>
 808898e:	4425      	add	r5, r4

  while (len--) {
 8088990:	42ac      	cmp	r4, r5
 8088992:	d005      	beq.n	80889a0 <_ZL8spi_readhhPht+0x50>
    *reg_data = spi_transfer(0x00);
 8088994:	2000      	movs	r0, #0
 8088996:	f7ff ff67 	bl	8088868 <_ZL12spi_transferh>
 808899a:	f804 0b01 	strb.w	r0, [r4], #1
    // SPI.beginTransaction(SPISettings(BME680_DEFAULT_SPIFREQ, MSBFIRST, SPI_MODE0));
  }

  spi_transfer(reg_addr);

  while (len--) {
 808899e:	e7f7      	b.n	8088990 <_ZL8spi_readhhPht+0x40>

  if (_BME680_SoftwareSPI_SCK == -1) {
    //SPI.endTransaction();
  }

  digitalWrite(cspin, HIGH);
 80889a0:	4630      	mov	r0, r6
 80889a2:	2101      	movs	r1, #1
 80889a4:	f003 f9c1 	bl	808bd2a <digitalWrite>

#ifdef BME680_DEBUG
  Serial.println("");
#endif
  return 0;
}
 80889a8:	2000      	movs	r0, #0
 80889aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80889ac:	20000bc9 	.word	0x20000bc9
 80889b0:	200010bc 	.word	0x200010bc

080889b4 <_ZL8i2c_readhhPht>:
/**************************************************************************/
/*!
    @brief  Reads 8 bit values over I2C
*/
/**************************************************************************/
int8_t i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 80889b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80889b6:	4604      	mov	r4, r0
 80889b8:	4615      	mov	r5, r2
 80889ba:	461e      	mov	r6, r3
 80889bc:	460f      	mov	r7, r1
#ifdef BME680_DEBUG
  Serial.print("\tI2C $"); Serial.print(reg_addr, HEX); Serial.print(" => ");
#endif

  Wire.beginTransmission((uint8_t)dev_id);
 80889be:	f003 fa51 	bl	808be64 <_Z19__fetch_global_Wirev>
 80889c2:	4621      	mov	r1, r4
 80889c4:	f003 f820 	bl	808ba08 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((uint8_t)reg_addr);
 80889c8:	f003 fa4c 	bl	808be64 <_Z19__fetch_global_Wirev>
 80889cc:	6803      	ldr	r3, [r0, #0]
 80889ce:	4639      	mov	r1, r7
 80889d0:	689b      	ldr	r3, [r3, #8]
 80889d2:	4798      	blx	r3
  Wire.endTransmission();
 80889d4:	f003 fa46 	bl	808be64 <_Z19__fetch_global_Wirev>
 80889d8:	f003 f821 	bl	808ba1e <_ZN7TwoWire15endTransmissionEv>
  if (len != Wire.requestFrom((uint8_t)dev_id, (byte)len)) {
 80889dc:	f003 fa42 	bl	808be64 <_Z19__fetch_global_Wirev>
 80889e0:	4621      	mov	r1, r4
 80889e2:	b2f2      	uxtb	r2, r6
 80889e4:	f003 f803 	bl	808b9ee <_ZN7TwoWire11requestFromEhh>
 80889e8:	b284      	uxth	r4, r0
 80889ea:	42a6      	cmp	r6, r4
 80889ec:	d10d      	bne.n	8088a0a <_ZL8i2c_readhhPht+0x56>
#ifdef BME680_DEBUG
    Serial.print("Failed to read "); Serial.print(len); Serial.print(" bytes from "); Serial.println(dev_id, HEX);
#endif
    return 1;
  }
  while (len--) {
 80889ee:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80889f2:	3c01      	subs	r4, #1
 80889f4:	b2a4      	uxth	r4, r4
 80889f6:	42b4      	cmp	r4, r6
 80889f8:	d009      	beq.n	8088a0e <_ZL8i2c_readhhPht+0x5a>
    *reg_data = (uint8_t)Wire.read();
 80889fa:	f003 fa33 	bl	808be64 <_Z19__fetch_global_Wirev>
 80889fe:	6803      	ldr	r3, [r0, #0]
 8088a00:	695b      	ldr	r3, [r3, #20]
 8088a02:	4798      	blx	r3
 8088a04:	f805 0b01 	strb.w	r0, [r5], #1
 8088a08:	e7f3      	b.n	80889f2 <_ZL8i2c_readhhPht+0x3e>
  Wire.endTransmission();
  if (len != Wire.requestFrom((uint8_t)dev_id, (byte)len)) {
#ifdef BME680_DEBUG
    Serial.print("Failed to read "); Serial.print(len); Serial.print(" bytes from "); Serial.println(dev_id, HEX);
#endif
    return 1;
 8088a0a:	2001      	movs	r0, #1
 8088a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  while (len--) {
 8088a0e:	2000      	movs	r0, #0
  }
#ifdef BME680_DEBUG
  Serial.println("");
#endif
  return 0;
}
 8088a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08088a14 <_ZN15Adafruit_BME680C1Ea>:
    @brief  Instantiates sensor with Hardware SPI or I2C.
    @param  cspin SPI chip select. If not passed in, I2C will be used
*/
/**************************************************************************/
Adafruit_BME680::Adafruit_BME680(int8_t cspin)
  : _cs(cspin)
 8088a14:	7701      	strb	r1, [r0, #28]
{
  _BME680_SoftwareSPI_MOSI = -1;
 8088a16:	4907      	ldr	r1, [pc, #28]	; (8088a34 <_ZN15Adafruit_BME680C1Ea+0x20>)
 8088a18:	22ff      	movs	r2, #255	; 0xff
 8088a1a:	700a      	strb	r2, [r1, #0]
  _BME680_SoftwareSPI_MISO = -1;
 8088a1c:	4906      	ldr	r1, [pc, #24]	; (8088a38 <_ZN15Adafruit_BME680C1Ea+0x24>)
 8088a1e:	700a      	strb	r2, [r1, #0]
  _BME680_SoftwareSPI_SCK = -1;
 8088a20:	4906      	ldr	r1, [pc, #24]	; (8088a3c <_ZN15Adafruit_BME680C1Ea+0x28>)
 8088a22:	700a      	strb	r2, [r1, #0]
  _filterEnabled = _tempEnabled = _humEnabled = _presEnabled = _gasEnabled = false;
 8088a24:	2200      	movs	r2, #0
 8088a26:	7502      	strb	r2, [r0, #20]
 8088a28:	74c2      	strb	r2, [r0, #19]
 8088a2a:	7482      	strb	r2, [r0, #18]
 8088a2c:	7442      	strb	r2, [r0, #17]
 8088a2e:	7402      	strb	r2, [r0, #16]
}
 8088a30:	4770      	bx	lr
 8088a32:	bf00      	nop
 8088a34:	20000bca 	.word	0x20000bca
 8088a38:	20000bc8 	.word	0x20000bc8
 8088a3c:	20000bc9 	.word	0x20000bc9

08088a40 <_ZN15Adafruit_BME6805beginEh>:

    @param  addr Optional parameter for the I2C address of BME680. Default is 0x77
    @return True on sensor initialization success. False on failure.
*/
/**************************************************************************/
bool Adafruit_BME680::begin(uint8_t addr) {
 8088a40:	b538      	push	{r3, r4, r5, lr}
 8088a42:	4604      	mov	r4, r0
  _i2caddr = addr;
 8088a44:	7561      	strb	r1, [r4, #21]

  if (_cs == -1) {
 8088a46:	f990 001c 	ldrsb.w	r0, [r0, #28]

    @param  addr Optional parameter for the I2C address of BME680. Default is 0x77
    @return True on sensor initialization success. False on failure.
*/
/**************************************************************************/
bool Adafruit_BME680::begin(uint8_t addr) {
 8088a4a:	460d      	mov	r5, r1
  _i2caddr = addr;

  if (_cs == -1) {
 8088a4c:	1c42      	adds	r2, r0, #1
 8088a4e:	d10c      	bne.n	8088a6a <_ZN15Adafruit_BME6805beginEh+0x2a>
    // i2c
    Wire.begin();
 8088a50:	f003 fa08 	bl	808be64 <_Z19__fetch_global_Wirev>
 8088a54:	f002 ffbc 	bl	808b9d0 <_ZN7TwoWire5beginEv>

    gas_sensor.dev_id = addr;
    gas_sensor.intf = BME680_I2C_INTF;
 8088a58:	2301      	movs	r3, #1
 8088a5a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    gas_sensor.read = &i2c_read;
 8088a5e:	4b2d      	ldr	r3, [pc, #180]	; (8088b14 <_ZN15Adafruit_BME6805beginEh+0xd4>)

  if (_cs == -1) {
    // i2c
    Wire.begin();

    gas_sensor.dev_id = addr;
 8088a60:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
    gas_sensor.intf = BME680_I2C_INTF;
    gas_sensor.read = &i2c_read;
 8088a64:	66a3      	str	r3, [r4, #104]	; 0x68
    gas_sensor.write = &i2c_write;
 8088a66:	4b2c      	ldr	r3, [pc, #176]	; (8088b18 <_ZN15Adafruit_BME6805beginEh+0xd8>)
 8088a68:	e02d      	b.n	8088ac6 <_ZN15Adafruit_BME6805beginEh+0x86>
  } else {
    digitalWrite(_cs, HIGH);
 8088a6a:	2101      	movs	r1, #1
 8088a6c:	b280      	uxth	r0, r0
 8088a6e:	f003 f95c 	bl	808bd2a <digitalWrite>
    pinMode(_cs, OUTPUT);
 8088a72:	f994 001c 	ldrsb.w	r0, [r4, #28]
 8088a76:	2101      	movs	r1, #1
 8088a78:	b280      	uxth	r0, r0
 8088a7a:	f003 f945 	bl	808bd08 <pinMode>

    if (_BME680_SoftwareSPI_SCK == -1) {
 8088a7e:	4b27      	ldr	r3, [pc, #156]	; (8088b1c <_ZN15Adafruit_BME6805beginEh+0xdc>)
 8088a80:	f993 0000 	ldrsb.w	r0, [r3]
 8088a84:	1c43      	adds	r3, r0, #1
 8088a86:	d103      	bne.n	8088a90 <_ZN15Adafruit_BME6805beginEh+0x50>
      // hardware SPI
      SPI.begin();
 8088a88:	4825      	ldr	r0, [pc, #148]	; (8088b20 <_ZN15Adafruit_BME6805beginEh+0xe0>)
 8088a8a:	f001 f927 	bl	8089cdc <_ZN8SPIClass5beginEv>
 8088a8e:	e011      	b.n	8088ab4 <_ZN15Adafruit_BME6805beginEh+0x74>
    } else {
      // software SPI
      pinMode(_BME680_SoftwareSPI_SCK, OUTPUT);
 8088a90:	2101      	movs	r1, #1
 8088a92:	b280      	uxth	r0, r0
 8088a94:	f003 f938 	bl	808bd08 <pinMode>
      pinMode(_BME680_SoftwareSPI_MOSI, OUTPUT);
 8088a98:	4b22      	ldr	r3, [pc, #136]	; (8088b24 <_ZN15Adafruit_BME6805beginEh+0xe4>)
 8088a9a:	2101      	movs	r1, #1
 8088a9c:	f993 0000 	ldrsb.w	r0, [r3]
 8088aa0:	b280      	uxth	r0, r0
 8088aa2:	f003 f931 	bl	808bd08 <pinMode>
      pinMode(_BME680_SoftwareSPI_MISO, INPUT);
 8088aa6:	4b20      	ldr	r3, [pc, #128]	; (8088b28 <_ZN15Adafruit_BME6805beginEh+0xe8>)
 8088aa8:	2100      	movs	r1, #0
 8088aaa:	f993 0000 	ldrsb.w	r0, [r3]
 8088aae:	b280      	uxth	r0, r0
 8088ab0:	f003 f92a 	bl	808bd08 <pinMode>
    }

    gas_sensor.dev_id = _cs;
 8088ab4:	7f23      	ldrb	r3, [r4, #28]
 8088ab6:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    gas_sensor.intf = BME680_SPI_INTF;
 8088aba:	2300      	movs	r3, #0
 8088abc:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    gas_sensor.read = &spi_read;
 8088ac0:	4b1a      	ldr	r3, [pc, #104]	; (8088b2c <_ZN15Adafruit_BME6805beginEh+0xec>)
 8088ac2:	66a3      	str	r3, [r4, #104]	; 0x68
    gas_sensor.write = &spi_write;
 8088ac4:	4b1a      	ldr	r3, [pc, #104]	; (8088b30 <_ZN15Adafruit_BME6805beginEh+0xf0>)
 8088ac6:	66e3      	str	r3, [r4, #108]	; 0x6c
  }

  gas_sensor.delay_ms = delay_msec;
 8088ac8:	4b1a      	ldr	r3, [pc, #104]	; (8088b34 <_ZN15Adafruit_BME6805beginEh+0xf4>)

  int8_t rslt = BME680_OK;
  rslt = bme680_init(&gas_sensor);
 8088aca:	f104 0020 	add.w	r0, r4, #32
    gas_sensor.intf = BME680_SPI_INTF;
    gas_sensor.read = &spi_read;
    gas_sensor.write = &spi_write;
  }

  gas_sensor.delay_ms = delay_msec;
 8088ace:	6723      	str	r3, [r4, #112]	; 0x70

  int8_t rslt = BME680_OK;
  rslt = bme680_init(&gas_sensor);
 8088ad0:	f7f7 fbf9 	bl	80802c6 <bme680_init>
#ifdef BME680_DEBUG
  Serial.print("Result: "); Serial.println(rslt);
#endif

  if (rslt != BME680_OK)
 8088ad4:	b9e0      	cbnz	r0, 8088b10 <_ZN15Adafruit_BME6805beginEh+0xd0>
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_temp = oversample;
 8088ad6:	2304      	movs	r3, #4
 8088ad8:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_hum = oversample;
 8088adc:	2302      	movs	r3, #2
 8088ade:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
*/
/**************************************************************************/
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
  if (filtersize > BME680_FILTER_SIZE_127) return false;

  gas_sensor.tph_sett.filter = filtersize;
 8088ae2:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
    @param  heaterTime Time to keep heater on in milliseconds
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
 8088ae6:	f44f 73a0 	mov.w	r3, #320	; 0x140
  gas_sensor.tph_sett.os_temp = oversample;

  if (oversample == BME680_OS_NONE)
    _tempEnabled = false;
  else
    _tempEnabled = true;
 8088aea:	2001      	movs	r0, #1
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_pres = oversample;
 8088aec:	2203      	movs	r2, #3
    @param  heaterTime Time to keep heater on in milliseconds
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
 8088aee:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  gas_sensor.gas_sett.heatr_dur = heaterTime;
 8088af2:	2396      	movs	r3, #150	; 0x96
  gas_sensor.tph_sett.os_temp = oversample;

  if (oversample == BME680_OS_NONE)
    _tempEnabled = false;
  else
    _tempEnabled = true;
 8088af4:	7460      	strb	r0, [r4, #17]
  gas_sensor.tph_sett.os_hum = oversample;

  if (oversample == BME680_OS_NONE)
    _humEnabled = false;
  else
    _humEnabled = true;
 8088af6:	74a0      	strb	r0, [r4, #18]
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_pres = oversample;
 8088af8:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a

  if (oversample == BME680_OS_NONE)
    _presEnabled = false;
  else
    _presEnabled = true;
 8088afc:	74e0      	strb	r0, [r4, #19]
  gas_sensor.tph_sett.filter = filtersize;

  if (filtersize == BME680_FILTER_SIZE_0)
    _filterEnabled = false;
  else
    _filterEnabled = true;
 8088afe:	7420      	strb	r0, [r4, #16]
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
  gas_sensor.gas_sett.heatr_dur = heaterTime;
 8088b00:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  if ( (heaterTemp == 0) || (heaterTime == 0) ) {
    // disabled!
    gas_sensor.gas_sett.run_gas = BME680_DISABLE_GAS_MEAS;
    _gasEnabled = false;
  } else {
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 8088b04:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    _gasEnabled = true;
 8088b08:	7520      	strb	r0, [r4, #20]
  setPressureOversampling(BME680_OS_4X);
  setIIRFilterSize(BME680_FILTER_SIZE_3);
  setGasHeater(320, 150); // 320*C for 150 ms

  // don't do anything till we request a reading
  gas_sensor.power_mode = BME680_FORCED_MODE;
 8088b0a:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64

  return true;
 8088b0e:	bd38      	pop	{r3, r4, r5, pc}
#ifdef BME680_DEBUG
  Serial.print("Result: "); Serial.println(rslt);
#endif

  if (rslt != BME680_OK)
    return false;
 8088b10:	2000      	movs	r0, #0

  // don't do anything till we request a reading
  gas_sensor.power_mode = BME680_FORCED_MODE;

  return true;
}
 8088b12:	bd38      	pop	{r3, r4, r5, pc}
 8088b14:	080889b5 	.word	0x080889b5
 8088b18:	08088825 	.word	0x08088825
 8088b1c:	20000bc9 	.word	0x20000bc9
 8088b20:	200010bc 	.word	0x200010bc
 8088b24:	20000bca 	.word	0x20000bca
 8088b28:	20000bc8 	.word	0x20000bc8
 8088b2c:	08088951 	.word	0x08088951
 8088b30:	080888ed 	.word	0x080888ed
 8088b34:	08088821 	.word	0x08088821

08088b38 <_ZN15Adafruit_BME68014performReadingEv>:
    and Adafruit_BME680#gas_resistance member variables

    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::performReading(void) {
 8088b38:	b530      	push	{r4, r5, lr}
 8088b3a:	4604      	mov	r4, r0
  struct bme680_field_data data;
  int8_t rslt;

  /* Select the power mode */
  /* Must be set before writing the sensor configuration */
  gas_sensor.power_mode = BME680_FORCED_MODE;
 8088b3c:	2301      	movs	r3, #1
 8088b3e:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64

  /* Set the required sensor settings needed */
  if (_tempEnabled)
    set_required_settings |= BME680_OST_SEL;
  if (_humEnabled)
 8088b42:	7ca3      	ldrb	r3, [r4, #18]
    and Adafruit_BME680#gas_resistance member variables

    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::performReading(void) {
 8088b44:	b087      	sub	sp, #28
  uint8_t set_required_settings = 0;
 8088b46:	7c40      	ldrb	r0, [r0, #17]
  gas_sensor.power_mode = BME680_FORCED_MODE;

  /* Set the required sensor settings needed */
  if (_tempEnabled)
    set_required_settings |= BME680_OST_SEL;
  if (_humEnabled)
 8088b48:	b10b      	cbz	r3, 8088b4e <_ZN15Adafruit_BME68014performReadingEv+0x16>
    set_required_settings |= BME680_OSH_SEL;
 8088b4a:	f040 0004 	orr.w	r0, r0, #4
  if (_presEnabled)
 8088b4e:	7ce3      	ldrb	r3, [r4, #19]
 8088b50:	b10b      	cbz	r3, 8088b56 <_ZN15Adafruit_BME68014performReadingEv+0x1e>
    set_required_settings |= BME680_OSP_SEL;
 8088b52:	f040 0002 	orr.w	r0, r0, #2
  if (_filterEnabled)
 8088b56:	7c23      	ldrb	r3, [r4, #16]
 8088b58:	b10b      	cbz	r3, 8088b5e <_ZN15Adafruit_BME68014performReadingEv+0x26>
    set_required_settings |= BME680_FILTER_SEL;
 8088b5a:	f040 0010 	orr.w	r0, r0, #16
  if (_gasEnabled)
 8088b5e:	7d23      	ldrb	r3, [r4, #20]
 8088b60:	b10b      	cbz	r3, 8088b66 <_ZN15Adafruit_BME68014performReadingEv+0x2e>
    set_required_settings |= BME680_GAS_SENSOR_SEL;
 8088b62:	f040 00c8 	orr.w	r0, r0, #200	; 0xc8

  /* Set the desired sensor configuration */
  //Serial.println("Setting sensor settings");
  rslt = bme680_set_sensor_settings(set_required_settings, &gas_sensor);
 8088b66:	f104 0520 	add.w	r5, r4, #32
 8088b6a:	4629      	mov	r1, r5
 8088b6c:	f7f7 fccb 	bl	8080506 <bme680_set_sensor_settings>
  if (rslt != BME680_OK)
 8088b70:	b108      	cbz	r0, 8088b76 <_ZN15Adafruit_BME68014performReadingEv+0x3e>
    return false;
 8088b72:	2500      	movs	r5, #0
 8088b74:	e04b      	b.n	8088c0e <_ZN15Adafruit_BME68014performReadingEv+0xd6>

  /* Set the power mode */
  //Serial.println("Setting power mode");
  rslt = bme680_set_sensor_mode(&gas_sensor);
 8088b76:	4628      	mov	r0, r5
 8088b78:	f7f7 fc86 	bl	8080488 <bme680_set_sensor_mode>
  if (rslt != BME680_OK)
 8088b7c:	2800      	cmp	r0, #0
 8088b7e:	d1f8      	bne.n	8088b72 <_ZN15Adafruit_BME68014performReadingEv+0x3a>
    return false;

  /* Get the total measurement duration so as to sleep or wait till the
   * measurement is complete */
  uint16_t meas_period;
  bme680_get_profile_dur(&meas_period, &gas_sensor);
 8088b80:	4629      	mov	r1, r5
 8088b82:	f10d 0002 	add.w	r0, sp, #2
 8088b86:	f7f7 fe39 	bl	80807fc <bme680_get_profile_dur>
  //Serial.print("Waiting (ms) "); Serial.println(meas_period);
  delay(meas_period * 2); /* Delay till the measurement is ready */
 8088b8a:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8088b8e:	0040      	lsls	r0, r0, #1
 8088b90:	f002 f868 	bl	808ac64 <delay>

  //Serial.print("t_fine = "); Serial.println(gas_sensor.calib.t_fine);

  //Serial.println("Getting sensor data");
  rslt = bme680_get_sensor_data(&data, &gas_sensor);
 8088b94:	4629      	mov	r1, r5
 8088b96:	a801      	add	r0, sp, #4
 8088b98:	f7f7 fe64 	bl	8080864 <bme680_get_sensor_data>
  if (rslt != BME680_OK)
 8088b9c:	2800      	cmp	r0, #0
 8088b9e:	d1e8      	bne.n	8088b72 <_ZN15Adafruit_BME68014performReadingEv+0x3a>
    return false;

  if (_tempEnabled) {
 8088ba0:	7c63      	ldrb	r3, [r4, #17]
 8088ba2:	b15b      	cbz	r3, 8088bbc <_ZN15Adafruit_BME68014performReadingEv+0x84>
    //Serial.print("Temp: "); Serial.println(data.temperature / 100.0, 2);
    temperature = data.temperature / 100.0;
 8088ba4:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8088ba8:	f003 fc40 	bl	808c42c <__aeabi_i2d>
 8088bac:	2200      	movs	r2, #0
 8088bae:	4b19      	ldr	r3, [pc, #100]	; (8088c14 <_ZN15Adafruit_BME68014performReadingEv+0xdc>)
 8088bb0:	f003 fdcc 	bl	808c74c <__aeabi_ddiv>
 8088bb4:	f003 ff98 	bl	808cae8 <__aeabi_d2f>
 8088bb8:	6020      	str	r0, [r4, #0]
 8088bba:	e001      	b.n	8088bc0 <_ZN15Adafruit_BME68014performReadingEv+0x88>
  } else {
    temperature = NAN;
 8088bbc:	4b16      	ldr	r3, [pc, #88]	; (8088c18 <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 8088bbe:	6023      	str	r3, [r4, #0]
  }

  if (_humEnabled) {
 8088bc0:	7ca3      	ldrb	r3, [r4, #18]
 8088bc2:	b153      	cbz	r3, 8088bda <_ZN15Adafruit_BME68014performReadingEv+0xa2>
    //Serial.print("Hum:  "); Serial.println(data.humidity / 1000.0, 2);
    humidity = data.humidity / 1000.0;
 8088bc4:	9804      	ldr	r0, [sp, #16]
 8088bc6:	f003 fc21 	bl	808c40c <__aeabi_ui2d>
 8088bca:	2200      	movs	r2, #0
 8088bcc:	4b13      	ldr	r3, [pc, #76]	; (8088c1c <_ZN15Adafruit_BME68014performReadingEv+0xe4>)
 8088bce:	f003 fdbd 	bl	808c74c <__aeabi_ddiv>
 8088bd2:	f003 ff89 	bl	808cae8 <__aeabi_d2f>
 8088bd6:	60a0      	str	r0, [r4, #8]
 8088bd8:	e001      	b.n	8088bde <_ZN15Adafruit_BME68014performReadingEv+0xa6>
  } else {
    humidity = NAN;
 8088bda:	4b0f      	ldr	r3, [pc, #60]	; (8088c18 <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 8088bdc:	60a3      	str	r3, [r4, #8]
  }

  if (_presEnabled) {
 8088bde:	7ce3      	ldrb	r3, [r4, #19]
 8088be0:	b123      	cbz	r3, 8088bec <_ZN15Adafruit_BME68014performReadingEv+0xb4>
    //Serial.print("Pres: "); Serial.println(data.pressure / 100.0, 2);
    pressure = data.pressure;
 8088be2:	9803      	ldr	r0, [sp, #12]
 8088be4:	f004 f886 	bl	808ccf4 <__aeabi_ui2f>
 8088be8:	6060      	str	r0, [r4, #4]
 8088bea:	e001      	b.n	8088bf0 <_ZN15Adafruit_BME68014performReadingEv+0xb8>
  } else {
    pressure = NAN;
 8088bec:	4b0a      	ldr	r3, [pc, #40]	; (8088c18 <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 8088bee:	6063      	str	r3, [r4, #4]
  }

  /* Avoid using measurements from an unstable heating setup */
  if (_gasEnabled) {
 8088bf0:	7d25      	ldrb	r5, [r4, #20]
 8088bf2:	b15d      	cbz	r5, 8088c0c <_ZN15Adafruit_BME68014performReadingEv+0xd4>
    if (data.status & BME680_HEAT_STAB_MSK) {
 8088bf4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8088bf8:	06db      	lsls	r3, r3, #27
 8088bfa:	d504      	bpl.n	8088c06 <_ZN15Adafruit_BME68014performReadingEv+0xce>
      //Serial.print("Gas resistance: "); Serial.println(data.gas_resistance);
      gas_resistance = data.gas_resistance;
 8088bfc:	9805      	ldr	r0, [sp, #20]
 8088bfe:	f004 f879 	bl	808ccf4 <__aeabi_ui2f>
 8088c02:	60e0      	str	r0, [r4, #12]
 8088c04:	e003      	b.n	8088c0e <_ZN15Adafruit_BME68014performReadingEv+0xd6>
    } else {
      gas_resistance = 0;
 8088c06:	2300      	movs	r3, #0
 8088c08:	60e3      	str	r3, [r4, #12]
 8088c0a:	e000      	b.n	8088c0e <_ZN15Adafruit_BME68014performReadingEv+0xd6>
      //Serial.println("Gas reading unstable!");
    }
  }

  return true;
 8088c0c:	2501      	movs	r5, #1
}
 8088c0e:	4628      	mov	r0, r5
 8088c10:	b007      	add	sp, #28
 8088c12:	bd30      	pop	{r4, r5, pc}
 8088c14:	40590000 	.word	0x40590000
 8088c18:	7fc00000 	.word	0x7fc00000
 8088c1c:	408f4000 	.word	0x408f4000

08088c20 <_ZN15Adafruit_BME68012setGasHeaterEtt>:
    @param  heaterTime Time to keep heater on in milliseconds
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
 8088c20:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
  gas_sensor.gas_sett.heatr_dur = heaterTime;
 8088c24:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62

  if ( (heaterTemp == 0) || (heaterTime == 0) ) {
 8088c28:	b101      	cbz	r1, 8088c2c <_ZN15Adafruit_BME68012setGasHeaterEtt+0xc>
 8088c2a:	b90a      	cbnz	r2, 8088c30 <_ZN15Adafruit_BME68012setGasHeaterEtt+0x10>
    // disabled!
    gas_sensor.gas_sett.run_gas = BME680_DISABLE_GAS_MEAS;
 8088c2c:	2300      	movs	r3, #0
 8088c2e:	e000      	b.n	8088c32 <_ZN15Adafruit_BME68012setGasHeaterEtt+0x12>
    _gasEnabled = false;
  } else {
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 8088c30:	2301      	movs	r3, #1
 8088c32:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
    _gasEnabled = true;
 8088c36:	7503      	strb	r3, [r0, #20]
  }
  return true;
}
 8088c38:	2001      	movs	r0, #1
 8088c3a:	4770      	bx	lr

08088c3c <_ZN15Adafruit_BME68026setTemperatureOversamplingEh>:
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
 8088c3c:	2905      	cmp	r1, #5
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
 8088c3e:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
 8088c40:	d807      	bhi.n	8088c52 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh+0x16>

  gas_sensor.tph_sett.os_temp = oversample;
 8088c42:	f880 1059 	strb.w	r1, [r0, #89]	; 0x59
 8088c46:	2001      	movs	r0, #1

  if (oversample == BME680_OS_NONE)
 8088c48:	b909      	cbnz	r1, 8088c4e <_ZN15Adafruit_BME68026setTemperatureOversamplingEh+0x12>
    _tempEnabled = false;
 8088c4a:	7459      	strb	r1, [r3, #17]
 8088c4c:	4770      	bx	lr
  else
    _tempEnabled = true;
 8088c4e:	7458      	strb	r0, [r3, #17]
 8088c50:	4770      	bx	lr
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
 8088c52:	2000      	movs	r0, #0
    _tempEnabled = false;
  else
    _tempEnabled = true;

  return true;
}
 8088c54:	4770      	bx	lr

08088c56 <_ZN15Adafruit_BME68023setHumidityOversamplingEh>:
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
 8088c56:	2905      	cmp	r1, #5
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
 8088c58:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
 8088c5a:	d807      	bhi.n	8088c6c <_ZN15Adafruit_BME68023setHumidityOversamplingEh+0x16>

  gas_sensor.tph_sett.os_hum = oversample;
 8088c5c:	f880 1058 	strb.w	r1, [r0, #88]	; 0x58
 8088c60:	2001      	movs	r0, #1

  if (oversample == BME680_OS_NONE)
 8088c62:	b909      	cbnz	r1, 8088c68 <_ZN15Adafruit_BME68023setHumidityOversamplingEh+0x12>
    _humEnabled = false;
 8088c64:	7499      	strb	r1, [r3, #18]
 8088c66:	4770      	bx	lr
  else
    _humEnabled = true;
 8088c68:	7498      	strb	r0, [r3, #18]
 8088c6a:	4770      	bx	lr
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
 8088c6c:	2000      	movs	r0, #0
    _humEnabled = false;
  else
    _humEnabled = true;

  return true;
}
 8088c6e:	4770      	bx	lr

08088c70 <_ZN15Adafruit_BME68023setPressureOversamplingEh>:
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
 8088c70:	2905      	cmp	r1, #5
    @param  oversample Oversampling setting, can be BME680_OS_NONE (turn off Pressure reading),
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
 8088c72:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
 8088c74:	d807      	bhi.n	8088c86 <_ZN15Adafruit_BME68023setPressureOversamplingEh+0x16>

  gas_sensor.tph_sett.os_pres = oversample;
 8088c76:	f880 105a 	strb.w	r1, [r0, #90]	; 0x5a
 8088c7a:	2001      	movs	r0, #1

  if (oversample == BME680_OS_NONE)
 8088c7c:	b909      	cbnz	r1, 8088c82 <_ZN15Adafruit_BME68023setPressureOversamplingEh+0x12>
    _presEnabled = false;
 8088c7e:	74d9      	strb	r1, [r3, #19]
 8088c80:	4770      	bx	lr
  else
    _presEnabled = true;
 8088c82:	74d8      	strb	r0, [r3, #19]
 8088c84:	4770      	bx	lr
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
 8088c86:	2000      	movs	r0, #0
    _presEnabled = false;
  else
    _presEnabled = true;

  return true;
}
 8088c88:	4770      	bx	lr

08088c8a <_ZN15Adafruit_BME68016setIIRFilterSizeEh>:
    @return True on success, False on failure

*/
/**************************************************************************/
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
  if (filtersize > BME680_FILTER_SIZE_127) return false;
 8088c8a:	2907      	cmp	r1, #7
    @param filtersize Size of the filter (in samples). Can be BME680_FILTER_SIZE_0 (no filtering), BME680_FILTER_SIZE_1, BME680_FILTER_SIZE_3, BME680_FILTER_SIZE_7, BME680_FILTER_SIZE_15, BME680_FILTER_SIZE_31, BME680_FILTER_SIZE_63, BME680_FILTER_SIZE_127
    @return True on success, False on failure

*/
/**************************************************************************/
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
 8088c8c:	4603      	mov	r3, r0
  if (filtersize > BME680_FILTER_SIZE_127) return false;
 8088c8e:	d807      	bhi.n	8088ca0 <_ZN15Adafruit_BME68016setIIRFilterSizeEh+0x16>

  gas_sensor.tph_sett.filter = filtersize;
 8088c90:	f880 105b 	strb.w	r1, [r0, #91]	; 0x5b
 8088c94:	2001      	movs	r0, #1

  if (filtersize == BME680_FILTER_SIZE_0)
 8088c96:	b909      	cbnz	r1, 8088c9c <_ZN15Adafruit_BME68016setIIRFilterSizeEh+0x12>
    _filterEnabled = false;
 8088c98:	7419      	strb	r1, [r3, #16]
 8088c9a:	4770      	bx	lr
  else
    _filterEnabled = true;
 8088c9c:	7418      	strb	r0, [r3, #16]
 8088c9e:	4770      	bx	lr
    @return True on success, False on failure

*/
/**************************************************************************/
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
  if (filtersize > BME680_FILTER_SIZE_127) return false;
 8088ca0:	2000      	movs	r0, #0
    _filterEnabled = false;
  else
    _filterEnabled = true;

  return true;
}
 8088ca2:	4770      	bx	lr

08088ca4 <_GLOBAL__sub_I__BME680_SoftwareSPI_MOSI>:
 8088ca4:	f000 bb6a 	b.w	808937c <HAL_Pin_Map>

08088ca8 <_ZN7HIH61XX5startEv>:

        //  use a stream to control the sensor
        uint8_t commandRequest(Stream & stream);
    protected:
        uint8_t setError(uint8_t error) {
            f = (f & ~ErrorMask) | error;
 8088ca8:	7983      	ldrb	r3, [r0, #6]
 8088caa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8088cae:	f023 030f 	bic.w	r3, r3, #15
 8088cb2:	7183      	strb	r3, [r0, #6]
    /*if (p < 255) {
        digitalWrite(p, HIGH);
    }*/
    f |= RunningFlag;
    return setError(0);
}
 8088cb4:	2000      	movs	r0, #0
 8088cb6:	4770      	bx	lr

08088cb8 <_ZN7HIH61XX4stopEv>:
 8088cb8:	7983      	ldrb	r3, [r0, #6]
 8088cba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8088cbe:	7183      	strb	r3, [r0, #6]
    /*if (p < 255) {
        digitalWrite(p, LOW);
    }*/
    f &= ~RunningFlag;
    return setError(0);
}
 8088cc0:	2000      	movs	r0, #0
 8088cc2:	4770      	bx	lr

08088cc4 <_ZN7HIH61XXC1Eh>:
#include "HIH61XX.h"

HIH61XX::HIH61XX(uint8_t address): a(address), f(0), h(0), t(0) {
 8088cc4:	4a03      	ldr	r2, [pc, #12]	; (8088cd4 <_ZN7HIH61XXC1Eh+0x10>)
 8088cc6:	7101      	strb	r1, [r0, #4]
 8088cc8:	6002      	str	r2, [r0, #0]
 8088cca:	2200      	movs	r2, #0
 8088ccc:	7182      	strb	r2, [r0, #6]
 8088cce:	8102      	strh	r2, [r0, #8]
 8088cd0:	8142      	strh	r2, [r0, #10]
    /*if (p < 255) {
        digitalWrite(p, LOW);
        pinMode(p, OUTPUT);
    }*/
}
 8088cd2:	4770      	bx	lr
 8088cd4:	08092b64 	.word	0x08092b64

08088cd8 <_ZN7HIH61XX6updateEv>:
    }*/
    f &= ~RunningFlag;
    return setError(0);
}

uint8_t HIH61XX::update() {
 8088cd8:	b570      	push	{r4, r5, r6, lr}
        uint8_t error() const {
            return f & ErrorMask;
        }

        bool isRunning() const {
            return f & RunningFlag;
 8088cda:	f990 3006 	ldrsb.w	r3, [r0, #6]
 8088cde:	4604      	mov	r4, r0
    if (!isRunning()) {
 8088ce0:	2b00      	cmp	r3, #0
 8088ce2:	db06      	blt.n	8088cf2 <_ZN7HIH61XX6updateEv+0x1a>

        //  use a stream to control the sensor
        uint8_t commandRequest(Stream & stream);
    protected:
        uint8_t setError(uint8_t error) {
            f = (f & ~ErrorMask) | error;
 8088ce4:	f023 030f 	bic.w	r3, r3, #15
 8088ce8:	f043 0303 	orr.w	r3, r3, #3
 8088cec:	7183      	strb	r3, [r0, #6]
        return setError(NotRunningError);
 8088cee:	2003      	movs	r0, #3
 8088cf0:	bd70      	pop	{r4, r5, r6, pc}
    }

    uint8_t x, y, s;

    Wire.beginTransmission(a);
 8088cf2:	f003 f8b7 	bl	808be64 <_Z19__fetch_global_Wirev>
 8088cf6:	7921      	ldrb	r1, [r4, #4]
 8088cf8:	f002 fe86 	bl	808ba08 <_ZN7TwoWire17beginTransmissionEh>
    int azer = Wire.endTransmission();
 8088cfc:	f003 f8b2 	bl	808be64 <_Z19__fetch_global_Wirev>
 8088d00:	f002 fe8d 	bl	808ba1e <_ZN7TwoWire15endTransmissionEv>
    if (azer == 0) {
 8088d04:	4605      	mov	r5, r0
 8088d06:	2800      	cmp	r0, #0
 8088d08:	d15d      	bne.n	8088dc6 <_ZN7HIH61XX6updateEv+0xee>
        while (true) {
            delay(10);
 8088d0a:	200a      	movs	r0, #10
 8088d0c:	f001 ffaa 	bl	808ac64 <delay>

            Wire.requestFrom(a, (uint8_t) 4);
 8088d10:	f003 f8a8 	bl	808be64 <_Z19__fetch_global_Wirev>
 8088d14:	2204      	movs	r2, #4
 8088d16:	7921      	ldrb	r1, [r4, #4]
 8088d18:	f002 fe69 	bl	808b9ee <_ZN7TwoWire11requestFromEhh>
            if (Wire.available()) {
 8088d1c:	f003 f8a2 	bl	808be64 <_Z19__fetch_global_Wirev>
 8088d20:	6803      	ldr	r3, [r0, #0]
 8088d22:	691b      	ldr	r3, [r3, #16]
 8088d24:	4798      	blx	r3
 8088d26:	2800      	cmp	r0, #0
 8088d28:	d045      	beq.n	8088db6 <_ZN7HIH61XX6updateEv+0xde>
                x = Wire.read();
 8088d2a:	f003 f89b 	bl	808be64 <_Z19__fetch_global_Wirev>
 8088d2e:	6803      	ldr	r3, [r0, #0]
 8088d30:	695b      	ldr	r3, [r3, #20]
 8088d32:	4798      	blx	r3
 8088d34:	4606      	mov	r6, r0
                y = Wire.read();
 8088d36:	f003 f895 	bl	808be64 <_Z19__fetch_global_Wirev>
 8088d3a:	6803      	ldr	r3, [r0, #0]
                s = x >> 6;

                switch (s) {
 8088d3c:	f3c6 1581 	ubfx	r5, r6, #6, #2
            delay(10);

            Wire.requestFrom(a, (uint8_t) 4);
            if (Wire.available()) {
                x = Wire.read();
                y = Wire.read();
 8088d40:	695b      	ldr	r3, [r3, #20]
 8088d42:	4798      	blx	r3
                s = x >> 6;

                switch (s) {
 8088d44:	2d01      	cmp	r5, #1
 8088d46:	d025      	beq.n	8088d94 <_ZN7HIH61XX6updateEv+0xbc>
 8088d48:	2d02      	cmp	r5, #2
 8088d4a:	d028      	beq.n	8088d9e <_ZN7HIH61XX6updateEv+0xc6>
 8088d4c:	2d00      	cmp	r5, #0
 8088d4e:	d1dc      	bne.n	8088d0a <_ZN7HIH61XX6updateEv+0x32>
                    case 0:
                        h = (((uint16_t)(x & 0x3f)) << 8) | y;
 8088d50:	0236      	lsls	r6, r6, #8
 8088d52:	f406 567c 	and.w	r6, r6, #16128	; 0x3f00
 8088d56:	b2c0      	uxtb	r0, r0
 8088d58:	4330      	orrs	r0, r6
 8088d5a:	8120      	strh	r0, [r4, #8]
                        x = Wire.read();
 8088d5c:	f003 f882 	bl	808be64 <_Z19__fetch_global_Wirev>
 8088d60:	6803      	ldr	r3, [r0, #0]
 8088d62:	695b      	ldr	r3, [r3, #20]
 8088d64:	4798      	blx	r3
 8088d66:	4606      	mov	r6, r0
                        y = Wire.read();
 8088d68:	f003 f87c 	bl	808be64 <_Z19__fetch_global_Wirev>
 8088d6c:	6803      	ldr	r3, [r0, #0]
                        t = ((((uint16_t) x) << 8) | y) >> 2;
 8088d6e:	0236      	lsls	r6, r6, #8

                switch (s) {
                    case 0:
                        h = (((uint16_t)(x & 0x3f)) << 8) | y;
                        x = Wire.read();
                        y = Wire.read();
 8088d70:	695b      	ldr	r3, [r3, #20]
 8088d72:	4798      	blx	r3
                        t = ((((uint16_t) x) << 8) | y) >> 2;
 8088d74:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8088d78:	b2c0      	uxtb	r0, r0
 8088d7a:	4330      	orrs	r0, r6
 8088d7c:	1080      	asrs	r0, r0, #2
 8088d7e:	8160      	strh	r0, [r4, #10]
                        Wire.endTransmission();
 8088d80:	f003 f870 	bl	808be64 <_Z19__fetch_global_Wirev>
 8088d84:	f002 fe4b 	bl	808ba1e <_ZN7TwoWire15endTransmissionEv>
 8088d88:	79a3      	ldrb	r3, [r4, #6]
                        return setError(0);
 8088d8a:	4628      	mov	r0, r5
 8088d8c:	f023 030f 	bic.w	r3, r3, #15
 8088d90:	71a3      	strb	r3, [r4, #6]
 8088d92:	bd70      	pop	{r4, r5, r6, pc}

                    case 1:
                        Wire.endTransmission();
 8088d94:	f003 f866 	bl	808be64 <_Z19__fetch_global_Wirev>
 8088d98:	f002 fe41 	bl	808ba1e <_ZN7TwoWire15endTransmissionEv>
 8088d9c:	e7b5      	b.n	8088d0a <_ZN7HIH61XX6updateEv+0x32>
                        break;

                    case 2:
                        Wire.endTransmission();
 8088d9e:	f003 f861 	bl	808be64 <_Z19__fetch_global_Wirev>
 8088da2:	f002 fe3c 	bl	808ba1e <_ZN7TwoWire15endTransmissionEv>
 8088da6:	79a3      	ldrb	r3, [r4, #6]
                        return setError(CommandModeError);
 8088da8:	2004      	movs	r0, #4
 8088daa:	f023 030f 	bic.w	r3, r3, #15
 8088dae:	f043 0304 	orr.w	r3, r3, #4
 8088db2:	71a3      	strb	r3, [r4, #6]
 8088db4:	bd70      	pop	{r4, r5, r6, pc}
 8088db6:	79a3      	ldrb	r3, [r4, #6]
                }
            } else {
                return setError(CommunicationError);
 8088db8:	2002      	movs	r0, #2
 8088dba:	f023 030f 	bic.w	r3, r3, #15
 8088dbe:	f043 0302 	orr.w	r3, r3, #2
 8088dc2:	71a3      	strb	r3, [r4, #6]
 8088dc4:	bd70      	pop	{r4, r5, r6, pc}
            }
        }
    } else {
        Serial.print("...");
 8088dc6:	f002 fc3d 	bl	808b644 <_Z16_fetch_usbserialv>
 8088dca:	4908      	ldr	r1, [pc, #32]	; (8088dec <_ZN7HIH61XX6updateEv+0x114>)
 8088dcc:	f001 fb8e 	bl	808a4ec <_ZN5Print5printEPKc>
        Serial.println(azer);
 8088dd0:	f002 fc38 	bl	808b644 <_Z16_fetch_usbserialv>
 8088dd4:	220a      	movs	r2, #10
 8088dd6:	4629      	mov	r1, r5
 8088dd8:	f001 fc09 	bl	808a5ee <_ZN5Print7printlnEii>
 8088ddc:	79a3      	ldrb	r3, [r4, #6]
        return setError(ConnectionError);
 8088dde:	2001      	movs	r0, #1
 8088de0:	f023 030f 	bic.w	r3, r3, #15
 8088de4:	f043 0301 	orr.w	r3, r3, #1
 8088de8:	71a3      	strb	r3, [r4, #6]
    }
}
 8088dea:	bd70      	pop	{r4, r5, r6, pc}
 8088dec:	080928e1 	.word	0x080928e1

08088df0 <_ZN7HIH61XX14commandProcessER6Streamh>:
    }
    return commandReply(stream, 255);
}

uint8_t HIH61XX::commandProcess(Stream & stream, uint8_t command) {
    switch (command) {
 8088df0:	2a61      	cmp	r2, #97	; 0x61
        return commandProcess(stream, stream.read());
    }
    return commandReply(stream, 255);
}

uint8_t HIH61XX::commandProcess(Stream & stream, uint8_t command) {
 8088df2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8088df4:	460d      	mov	r5, r1
    switch (command) {
 8088df6:	d02b      	beq.n	8088e50 <_ZN7HIH61XX14commandProcessER6Streamh+0x60>
 8088df8:	d806      	bhi.n	8088e08 <_ZN7HIH61XX14commandProcessER6Streamh+0x18>
 8088dfa:	2a30      	cmp	r2, #48	; 0x30
 8088dfc:	d031      	beq.n	8088e62 <_ZN7HIH61XX14commandProcessER6Streamh+0x72>
 8088dfe:	2a31      	cmp	r2, #49	; 0x31
 8088e00:	d139      	bne.n	8088e76 <_ZN7HIH61XX14commandProcessER6Streamh+0x86>
        case 'u':
            return commandReply(stream, update());

            //  start
        case '1':
            return commandReply(stream, start());
 8088e02:	6803      	ldr	r3, [r0, #0]
 8088e04:	681b      	ldr	r3, [r3, #0]
 8088e06:	e02e      	b.n	8088e66 <_ZN7HIH61XX14commandProcessER6Streamh+0x76>
    }
    return commandReply(stream, 255);
}

uint8_t HIH61XX::commandProcess(Stream & stream, uint8_t command) {
    switch (command) {
 8088e08:	2a74      	cmp	r2, #116	; 0x74
 8088e0a:	d00a      	beq.n	8088e22 <_ZN7HIH61XX14commandProcessER6Streamh+0x32>
 8088e0c:	2a75      	cmp	r2, #117	; 0x75
 8088e0e:	d025      	beq.n	8088e5c <_ZN7HIH61XX14commandProcessER6Streamh+0x6c>
 8088e10:	2a68      	cmp	r2, #104	; 0x68
 8088e12:	d130      	bne.n	8088e76 <_ZN7HIH61XX14commandProcessER6Streamh+0x86>
            stream.println(result);
            return result;
        }
        template < typename T > uint8_t commandReply(Stream & stream, uint8_t result,
            const T & data) {
            stream.println(data);
 8088e14:	8900      	ldrh	r0, [r0, #8]
 8088e16:	f003 ff6d 	bl	808ccf4 <__aeabi_ui2f>
 8088e1a:	491b      	ldr	r1, [pc, #108]	; (8088e88 <_ZN7HIH61XX14commandProcessER6Streamh+0x98>)
 8088e1c:	f004 f876 	bl	808cf0c <__aeabi_fdiv>
 8088e20:	e00b      	b.n	8088e3a <_ZN7HIH61XX14commandProcessER6Streamh+0x4a>
 8088e22:	8940      	ldrh	r0, [r0, #10]
 8088e24:	f003 ff66 	bl	808ccf4 <__aeabi_ui2f>
 8088e28:	4917      	ldr	r1, [pc, #92]	; (8088e88 <_ZN7HIH61XX14commandProcessER6Streamh+0x98>)
 8088e2a:	f004 f86f 	bl	808cf0c <__aeabi_fdiv>
 8088e2e:	4917      	ldr	r1, [pc, #92]	; (8088e8c <_ZN7HIH61XX14commandProcessER6Streamh+0x9c>)
 8088e30:	f003 ffb8 	bl	808cda4 <__aeabi_fmul>
 8088e34:	4916      	ldr	r1, [pc, #88]	; (8088e90 <_ZN7HIH61XX14commandProcessER6Streamh+0xa0>)
 8088e36:	f003 feab 	bl	808cb90 <__aeabi_fsub>
 8088e3a:	f003 fb09 	bl	808c450 <__aeabi_f2d>
 8088e3e:	2302      	movs	r3, #2
 8088e40:	9300      	str	r3, [sp, #0]
 8088e42:	4602      	mov	r2, r0
 8088e44:	460b      	mov	r3, r1
 8088e46:	4628      	mov	r0, r5
 8088e48:	f001 fc8a 	bl	808a760 <_ZN5Print7printlnEdi>
        case 'h':
            return commandReply(stream, 0, humidity());

            //  get temperature
        case 't':
            return commandReply(stream, 0, temperature());
 8088e4c:	2400      	movs	r4, #0
 8088e4e:	e018      	b.n	8088e82 <_ZN7HIH61XX14commandProcessER6Streamh+0x92>
 8088e50:	7901      	ldrb	r1, [r0, #4]
 8088e52:	220a      	movs	r2, #10
 8088e54:	4628      	mov	r0, r5
 8088e56:	f001 fb9c 	bl	808a592 <_ZN5Print7printlnEhi>
 8088e5a:	e7f7      	b.n	8088e4c <_ZN7HIH61XX14commandProcessER6Streamh+0x5c>

            //  get power pin
        
            //  update
        case 'u':
            return commandReply(stream, update());
 8088e5c:	f7ff ff3c 	bl	8088cd8 <_ZN7HIH61XX6updateEv>
 8088e60:	e002      	b.n	8088e68 <_ZN7HIH61XX14commandProcessER6Streamh+0x78>
        case '1':
            return commandReply(stream, start());

            //  stop
        case '0':
            return commandReply(stream, stop());
 8088e62:	6803      	ldr	r3, [r0, #0]
 8088e64:	685b      	ldr	r3, [r3, #4]
 8088e66:	4798      	blx	r3
 8088e68:	4604      	mov	r4, r0
            return error;
        }

        virtual uint8_t commandProcess(Stream & stream, uint8_t command);
        uint8_t commandReply(Stream & stream, uint8_t result) {
            stream.println(result);
 8088e6a:	4601      	mov	r1, r0
 8088e6c:	220a      	movs	r2, #10
 8088e6e:	4628      	mov	r0, r5
 8088e70:	f001 fb8f 	bl	808a592 <_ZN5Print7printlnEhi>
 8088e74:	e005      	b.n	8088e82 <_ZN7HIH61XX14commandProcessER6Streamh+0x92>
 8088e76:	220a      	movs	r2, #10
 8088e78:	21fe      	movs	r1, #254	; 0xfe
 8088e7a:	4628      	mov	r0, r5
 8088e7c:	f001 fb89 	bl	808a592 <_ZN5Print7printlnEhi>
    }

    return commandReply(stream, 254);
 8088e80:	24fe      	movs	r4, #254	; 0xfe
}
 8088e82:	4620      	mov	r0, r4
 8088e84:	b003      	add	sp, #12
 8088e86:	bd30      	pop	{r4, r5, pc}
 8088e88:	467ff800 	.word	0x467ff800
 8088e8c:	43250000 	.word	0x43250000
 8088e90:	42200000 	.word	0x42200000

08088e94 <_GLOBAL__sub_I__ZN7HIH61XXC2Eh>:
 8088e94:	f000 ba72 	b.w	808937c <HAL_Pin_Map>

08088e98 <_ZN23GoogleMapsDeviceLocatorD1Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {

}

GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
 8088e98:	b510      	push	{r4, lr}
 8088e9a:	4604      	mov	r4, r0
 8088e9c:	4b05      	ldr	r3, [pc, #20]	; (8088eb4 <_ZN23GoogleMapsDeviceLocatorD1Ev+0x1c>)
 8088e9e:	f840 3b2c 	str.w	r3, [r0], #44
 8088ea2:	f001 f8e5 	bl	808a070 <_ZN6StringD1Ev>
 8088ea6:	f104 000c 	add.w	r0, r4, #12
 8088eaa:	f001 f8e1 	bl	808a070 <_ZN6StringD1Ev>

}
 8088eae:	4620      	mov	r0, r4
 8088eb0:	bd10      	pop	{r4, pc}
 8088eb2:	bf00      	nop
 8088eb4:	08092b78 	.word	0x08092b78

08088eb8 <_ZN23GoogleMapsDeviceLocatorD0Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {

}

GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
 8088eb8:	b510      	push	{r4, lr}
 8088eba:	4604      	mov	r4, r0

}
 8088ebc:	f7ff ffec 	bl	8088e98 <_ZN23GoogleMapsDeviceLocatorD1Ev>
 8088ec0:	4620      	mov	r0, r4
 8088ec2:	2144      	movs	r1, #68	; 0x44
 8088ec4:	f003 f813 	bl	808beee <_ZdlPvj>
 8088ec8:	4620      	mov	r0, r4
 8088eca:	bd10      	pop	{r4, pc}

08088ecc <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8088ecc:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8088ece:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8088ed0:	4604      	mov	r4, r0
    {
      if (_M_manager)
 8088ed2:	b113      	cbz	r3, 8088eda <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8088ed4:	2203      	movs	r2, #3
 8088ed6:	4601      	mov	r1, r0
 8088ed8:	4798      	blx	r3
    }
 8088eda:	4620      	mov	r0, r4
 8088edc:	bd10      	pop	{r4, pc}
	...

08088ee0 <_ZN23GoogleMapsDeviceLocatorC1Ev>:

static char requestBuf[256];
static char *requestCur;
static int numAdded = 0;

GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
 8088ee0:	b538      	push	{r3, r4, r5, lr}
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
 8088ee2:	4b0f      	ldr	r3, [pc, #60]	; (8088f20 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x40>)

static char requestBuf[256];
static char *requestCur;
static int numAdded = 0;

GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
 8088ee4:	4604      	mov	r4, r0
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
 8088ee6:	6003      	str	r3, [r0, #0]
 8088ee8:	f242 7310 	movw	r3, #10000	; 0x2710
 8088eec:	2500      	movs	r5, #0
 8088eee:	6045      	str	r5, [r0, #4]
 8088ef0:	6083      	str	r3, [r0, #8]
 8088ef2:	490c      	ldr	r1, [pc, #48]	; (8088f24 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x44>)
 8088ef4:	300c      	adds	r0, #12
 8088ef6:	f001 f902 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
 8088efa:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8088efe:	62a3      	str	r3, [r4, #40]	; 0x28
 8088f00:	61e5      	str	r5, [r4, #28]
 8088f02:	6225      	str	r5, [r4, #32]
 8088f04:	6265      	str	r5, [r4, #36]	; 0x24
 8088f06:	4908      	ldr	r1, [pc, #32]	; (8088f28 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x48>)
 8088f08:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8088f0c:	f001 f8f7 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
 8088f10:	f44f 739b 	mov.w	r3, #310	; 0x136
 8088f14:	63e3      	str	r3, [r4, #60]	; 0x3c
 8088f16:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 8088f1a:	6423      	str	r3, [r4, #64]	; 0x40

}
 8088f1c:	4620      	mov	r0, r4
 8088f1e:	bd38      	pop	{r3, r4, r5, pc}
 8088f20:	08092b78 	.word	0x08092b78
 8088f24:	08092bb6 	.word	0x08092bb6
 8088f28:	08092bc4 	.word	0x08092bc4

08088f2c <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev>:
 8088f2c:	4b02      	ldr	r3, [pc, #8]	; (8088f38 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev+0xc>)
 8088f2e:	2201      	movs	r2, #1
 8088f30:	701a      	strb	r2, [r3, #0]
 8088f32:	f000 ba23 	b.w	808937c <HAL_Pin_Map>
 8088f36:	bf00      	nop
 8088f38:	20000bcb 	.word	0x20000bcb

08088f3c <_ZN19CellularHelperClass16responseCallbackEiPKciPv>:
	}
	return bars;
}

// static
int CellularHelperClass::responseCallback(int type, const char* buf, int len, void *param) {
 8088f3c:	b430      	push	{r4, r5}
 8088f3e:	461c      	mov	r4, r3
	CellularHelperCommonResponse *presp = (CellularHelperCommonResponse *)param;

	return presp->parse(type, buf, len);
 8088f40:	681b      	ldr	r3, [r3, #0]
 8088f42:	681d      	ldr	r5, [r3, #0]
 8088f44:	4613      	mov	r3, r2
 8088f46:	46ac      	mov	ip, r5
 8088f48:	460a      	mov	r2, r1
 8088f4a:	4601      	mov	r1, r0
 8088f4c:	4620      	mov	r0, r4
}
 8088f4e:	bc30      	pop	{r4, r5}

// static
int CellularHelperClass::responseCallback(int type, const char* buf, int len, void *param) {
	CellularHelperCommonResponse *presp = (CellularHelperCommonResponse *)param;

	return presp->parse(type, buf, len);
 8088f50:	4760      	bx	ip
	...

08088f54 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>:
static LogClass Log;
#endif

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
 8088f54:	b570      	push	{r4, r5, r6, lr}
 8088f56:	460c      	mov	r4, r1
 8088f58:	b08c      	sub	sp, #48	; 0x30
	String typeStr;
 8088f5a:	494c      	ldr	r1, [pc, #304]	; (808908c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x138>)
 8088f5c:	a804      	add	r0, sp, #16
static LogClass Log;
#endif

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
 8088f5e:	4615      	mov	r5, r2
 8088f60:	461e      	mov	r6, r3
	String typeStr;
 8088f62:	f001 f8cc 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
	switch(type) {
 8088f66:	f5b4 1f10 	cmp.w	r4, #2359296	; 0x240000
 8088f6a:	d035      	beq.n	8088fd8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x84>
 8088f6c:	dc13      	bgt.n	8088f96 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x42>
 8088f6e:	f5b4 1f90 	cmp.w	r4, #1179648	; 0x120000
 8088f72:	d028      	beq.n	8088fc6 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x72>
 8088f74:	dc05      	bgt.n	8088f82 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x2e>
 8088f76:	b324      	cbz	r4, 8088fc2 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x6e>
 8088f78:	f5b4 1f88 	cmp.w	r4, #1114112	; 0x110000
 8088f7c:	d136      	bne.n	8088fec <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
	case TYPE_UNKNOWN:
		typeStr = "TYPE_UNKNOWN";
		break;

	case TYPE_OK:
		typeStr = "TYPE_OK";
 8088f7e:	4944      	ldr	r1, [pc, #272]	; (8089090 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x13c>)
 8088f80:	e022      	b.n	8088fc8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
	String typeStr;
	switch(type) {
 8088f82:	f5b4 1f08 	cmp.w	r4, #2228224	; 0x220000
 8088f86:	d023      	beq.n	8088fd0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x7c>
 8088f88:	f5b4 1f0c 	cmp.w	r4, #2293760	; 0x230000
 8088f8c:	d022      	beq.n	8088fd4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x80>
 8088f8e:	f5b4 1f04 	cmp.w	r4, #2162688	; 0x210000
 8088f92:	d12b      	bne.n	8088fec <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
 8088f94:	e017      	b.n	8088fc6 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x72>
 8088f96:	f5b4 1f40 	cmp.w	r4, #3145728	; 0x300000
 8088f9a:	d021      	beq.n	8088fe0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
 8088f9c:	dc07      	bgt.n	8088fae <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x5a>
 8088f9e:	f5b4 1f14 	cmp.w	r4, #2424832	; 0x250000
 8088fa2:	d01b      	beq.n	8088fdc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x88>
 8088fa4:	f5b4 1f18 	cmp.w	r4, #2490368	; 0x260000
 8088fa8:	d120      	bne.n	8088fec <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
	case TYPE_BUSY:
		typeStr = "TYPE_BUSY";
		break;

	case TYPE_NOANSWER:
		typeStr = "TYPE_NOANSWER";
 8088faa:	493a      	ldr	r1, [pc, #232]	; (8089094 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x140>)
 8088fac:	e00c      	b.n	8088fc8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
	String typeStr;
	switch(type) {
 8088fae:	f5b4 0fa0 	cmp.w	r4, #5242880	; 0x500000
 8088fb2:	d017      	beq.n	8088fe4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x90>
 8088fb4:	f5b4 0fc0 	cmp.w	r4, #6291456	; 0x600000
 8088fb8:	d016      	beq.n	8088fe8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x94>
 8088fba:	f5b4 0f80 	cmp.w	r4, #4194304	; 0x400000
 8088fbe:	d115      	bne.n	8088fec <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
 8088fc0:	e010      	b.n	8088fe4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x90>
	case TYPE_UNKNOWN:
		typeStr = "TYPE_UNKNOWN";
 8088fc2:	4935      	ldr	r1, [pc, #212]	; (8089098 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x144>)
 8088fc4:	e000      	b.n	8088fc8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
	case TYPE_ERROR:
		typeStr = "TYPE_ERROR";
		break;

	case TYPE_RING:
		typeStr = "TYPE_ERROR";
 8088fc6:	4935      	ldr	r1, [pc, #212]	; (808909c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x148>)
	case TYPE_UNKNOWN:
		typeStr = "TYPE_UNKNOWN";
		break;

	case TYPE_OK:
		typeStr = "TYPE_OK";
 8088fc8:	a804      	add	r0, sp, #16
 8088fca:	f001 f8ea 	bl	808a1a2 <_ZN6StringaSEPKc>
		break;
 8088fce:	e019      	b.n	8089004 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xb0>
	case TYPE_RING:
		typeStr = "TYPE_ERROR";
		break;

	case TYPE_CONNECT:
		typeStr = "TYPE_CONNECT";
 8088fd0:	4933      	ldr	r1, [pc, #204]	; (80890a0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x14c>)
 8088fd2:	e7f9      	b.n	8088fc8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	case TYPE_NOCARRIER:
		typeStr = "TYPE_NOCARRIER";
 8088fd4:	4933      	ldr	r1, [pc, #204]	; (80890a4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x150>)
 8088fd6:	e7f7      	b.n	8088fc8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	case TYPE_NODIALTONE:
		typeStr = "TYPE_NODIALTONE";
 8088fd8:	4933      	ldr	r1, [pc, #204]	; (80890a8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x154>)
 8088fda:	e7f5      	b.n	8088fc8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	case TYPE_BUSY:
		typeStr = "TYPE_BUSY";
 8088fdc:	4933      	ldr	r1, [pc, #204]	; (80890ac <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x158>)
 8088fde:	e7f3      	b.n	8088fc8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
	case TYPE_NOANSWER:
		typeStr = "TYPE_NOANSWER";
		break;

	case TYPE_PROMPT:
		typeStr = "TYPE_PROMPT";
 8088fe0:	4933      	ldr	r1, [pc, #204]	; (80890b0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x15c>)
 8088fe2:	e7f1      	b.n	8088fc8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
	case TYPE_PLUS:
		typeStr = "TYPE_PLUS";
		break;

	case TYPE_TEXT:
		typeStr = "TYPE_PLUS";
 8088fe4:	4933      	ldr	r1, [pc, #204]	; (80890b4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x160>)
 8088fe6:	e7ef      	b.n	8088fc8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	case TYPE_ABORTED:
		typeStr = "TYPE_ABORTED";
 8088fe8:	4933      	ldr	r1, [pc, #204]	; (80890b8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x164>)
 8088fea:	e7ed      	b.n	8088fc8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	default:
		typeStr = String::format("type=0x%x", type);
 8088fec:	4622      	mov	r2, r4
 8088fee:	4933      	ldr	r1, [pc, #204]	; (80890bc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x168>)
 8088ff0:	a808      	add	r0, sp, #32
 8088ff2:	f001 fa3d 	bl	808a470 <_ZN6String6formatEPKcz>
 8088ff6:	a908      	add	r1, sp, #32
 8088ff8:	a804      	add	r0, sp, #16
 8088ffa:	f001 f8ca 	bl	808a192 <_ZN6StringaSEOS_>
 8088ffe:	a808      	add	r0, sp, #32
 8089000:	f001 f836 	bl	808a070 <_ZN6StringD1Ev>
		break;
	}

	Log.info("cellular response type=%s len=%d", typeStr.c_str(), len);
 8089004:	4633      	mov	r3, r6
 8089006:	9a04      	ldr	r2, [sp, #16]
 8089008:	492d      	ldr	r1, [pc, #180]	; (80890c0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x16c>)
 808900a:	482e      	ldr	r0, [pc, #184]	; (80890c4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
 808900c:	f7f7 fe4f 	bl	8080cae <_ZNK5spark6Logger4infoEPKcz>
	String out;
 8089010:	491e      	ldr	r1, [pc, #120]	; (808908c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x138>)
 8089012:	a808      	add	r0, sp, #32
 8089014:	f001 f873 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
 8089018:	462c      	mov	r4, r5
	for(int ii = 0; ii < len; ii++) {
 808901a:	1b63      	subs	r3, r4, r5
 808901c:	429e      	cmp	r6, r3
 808901e:	dd27      	ble.n	8089070 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x11c>
		if (buf[ii] == '\n') {
 8089020:	f814 3b01 	ldrb.w	r3, [r4], #1
 8089024:	2b0a      	cmp	r3, #10
 8089026:	d10c      	bne.n	8089042 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xee>
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8089028:	4927      	ldr	r1, [pc, #156]	; (80890c8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x174>)
 808902a:	a808      	add	r0, sp, #32
 808902c:	f001 f949 	bl	808a2c2 <_ZN6String6concatEPKc>
			out += "\\n";
			Log.info(out);
 8089030:	9908      	ldr	r1, [sp, #32]
 8089032:	4824      	ldr	r0, [pc, #144]	; (80890c4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
 8089034:	f7f7 fe3b 	bl	8080cae <_ZNK5spark6Logger4infoEPKcz>
			out = "";
 8089038:	4914      	ldr	r1, [pc, #80]	; (808908c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x138>)
 808903a:	a808      	add	r0, sp, #32
 808903c:	f001 f8b1 	bl	808a1a2 <_ZN6StringaSEPKc>
 8089040:	e7eb      	b.n	808901a <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xc6>
		}
		else
		if (buf[ii] == '\r') {
 8089042:	2b0d      	cmp	r3, #13
 8089044:	d101      	bne.n	808904a <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xf6>
 8089046:	4921      	ldr	r1, [pc, #132]	; (80890cc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x178>)
 8089048:	e009      	b.n	808905e <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x10a>
			out += "\\r";
		}
		else
		if (buf[ii] < ' ' || buf[ii] >= 127) {
 808904a:	f1a3 0220 	sub.w	r2, r3, #32
 808904e:	2a5e      	cmp	r2, #94	; 0x5e
 8089050:	d909      	bls.n	8089066 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x112>
			char hex[10];
			snprintf(hex, sizeof(hex), "0x%02x", buf[ii]);
 8089052:	210a      	movs	r1, #10
 8089054:	4a1e      	ldr	r2, [pc, #120]	; (80890d0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x17c>)
 8089056:	a801      	add	r0, sp, #4
 8089058:	f000 fca6 	bl	80899a8 <snprintf>
			out.concat(hex);
 808905c:	a901      	add	r1, sp, #4
 808905e:	a808      	add	r0, sp, #32
 8089060:	f001 f92f 	bl	808a2c2 <_ZN6String6concatEPKc>
 8089064:	e7d9      	b.n	808901a <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xc6>
		}
		else {
			out.concat(buf[ii]);
 8089066:	4619      	mov	r1, r3
 8089068:	a808      	add	r0, sp, #32
 808906a:	f001 f939 	bl	808a2e0 <_ZN6String6concatEc>
		break;
	}

	Log.info("cellular response type=%s len=%d", typeStr.c_str(), len);
	String out;
	for(int ii = 0; ii < len; ii++) {
 808906e:	e7d4      	b.n	808901a <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xc6>
		}
		else {
			out.concat(buf[ii]);
		}
	}
	if (out.length() > 0) {
 8089070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8089072:	b11b      	cbz	r3, 808907c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x128>
		Log.info(out);
 8089074:	9908      	ldr	r1, [sp, #32]
 8089076:	4813      	ldr	r0, [pc, #76]	; (80890c4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
 8089078:	f7f7 fe19 	bl	8080cae <_ZNK5spark6Logger4infoEPKcz>
		typeStr = String::format("type=0x%x", type);
		break;
	}

	Log.info("cellular response type=%s len=%d", typeStr.c_str(), len);
	String out;
 808907c:	a808      	add	r0, sp, #32
 808907e:	f000 fff7 	bl	808a070 <_ZN6StringD1Ev>
#endif

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
	String typeStr;
 8089082:	a804      	add	r0, sp, #16
 8089084:	f000 fff4 	bl	808a070 <_ZN6StringD1Ev>
		}
	}
	if (out.length() > 0) {
		Log.info(out);
	}
}
 8089088:	b00c      	add	sp, #48	; 0x30
 808908a:	bd70      	pop	{r4, r5, r6, pc}
 808908c:	08092fdc 	.word	0x08092fdc
 8089090:	08092c15 	.word	0x08092c15
 8089094:	08092c5e 	.word	0x08092c5e
 8089098:	08092c08 	.word	0x08092c08
 808909c:	08092c1d 	.word	0x08092c1d
 80890a0:	08092c28 	.word	0x08092c28
 80890a4:	08092c35 	.word	0x08092c35
 80890a8:	08092c44 	.word	0x08092c44
 80890ac:	08092c54 	.word	0x08092c54
 80890b0:	08092c6c 	.word	0x08092c6c
 80890b4:	08092c78 	.word	0x08092c78
 80890b8:	08092c82 	.word	0x08092c82
 80890bc:	08092c8f 	.word	0x08092c8f
 80890c0:	08092c99 	.word	0x08092c99
 80890c4:	20000bd4 	.word	0x20000bd4
 80890c8:	08092cba 	.word	0x08092cba
 80890cc:	08092cbd 	.word	0x08092cbd
 80890d0:	08092cc0 	.word	0x08092cc0

080890d4 <_ZN32CellularHelperPlusStringResponseC1Ev>:
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 80890d4:	b538      	push	{r3, r4, r5, lr}
 80890d6:	4604      	mov	r4, r0

/**
 * All response objects inherit from this, so the parse() method can be called
 * in the subclass, and also the resp and enableDebug members are always available.
 */
class CellularHelperCommonResponse {
 80890d8:	f06f 0302 	mvn.w	r3, #2
 80890dc:	6043      	str	r3, [r0, #4]
 80890de:	2300      	movs	r3, #0
 80890e0:	7203      	strb	r3, [r0, #8]
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 80890e2:	4d07      	ldr	r5, [pc, #28]	; (8089100 <_ZN32CellularHelperPlusStringResponseC1Ev+0x2c>)
 80890e4:	4b07      	ldr	r3, [pc, #28]	; (8089104 <_ZN32CellularHelperPlusStringResponseC1Ev+0x30>)
 80890e6:	4629      	mov	r1, r5
 80890e8:	f840 3b0c 	str.w	r3, [r0], #12
 80890ec:	f001 f807 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
 80890f0:	4629      	mov	r1, r5
 80890f2:	f104 001c 	add.w	r0, r4, #28
 80890f6:	f001 f802 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
 80890fa:	4620      	mov	r0, r4
 80890fc:	bd38      	pop	{r3, r4, r5, pc}
 80890fe:	bf00      	nop
 8089100:	08092fdc 	.word	0x08092fdc
 8089104:	08092ff8 	.word	0x08092ff8

08089108 <_ZN32CellularHelperPlusStringResponseD1Ev>:
 8089108:	b510      	push	{r4, lr}
 808910a:	4604      	mov	r4, r0
 808910c:	4b05      	ldr	r3, [pc, #20]	; (8089124 <_ZN32CellularHelperPlusStringResponseD1Ev+0x1c>)
 808910e:	f840 3b1c 	str.w	r3, [r0], #28
 8089112:	f000 ffad 	bl	808a070 <_ZN6StringD1Ev>
 8089116:	f104 000c 	add.w	r0, r4, #12
 808911a:	f000 ffa9 	bl	808a070 <_ZN6StringD1Ev>
 808911e:	4620      	mov	r0, r4
 8089120:	bd10      	pop	{r4, pc}
 8089122:	bf00      	nop
 8089124:	08092ff8 	.word	0x08092ff8

08089128 <_ZN28CellularHelperStringResponseC1Ev>:
 * Things that return a simple string, like the manufacturer string, use this
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperStringResponse : public CellularHelperCommonResponse {
 8089128:	b510      	push	{r4, lr}
 808912a:	4604      	mov	r4, r0

/**
 * All response objects inherit from this, so the parse() method can be called
 * in the subclass, and also the resp and enableDebug members are always available.
 */
class CellularHelperCommonResponse {
 808912c:	f06f 0302 	mvn.w	r3, #2
 8089130:	6043      	str	r3, [r0, #4]
 8089132:	2300      	movs	r3, #0
 8089134:	7203      	strb	r3, [r0, #8]
 * Things that return a simple string, like the manufacturer string, use this
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperStringResponse : public CellularHelperCommonResponse {
 8089136:	4b04      	ldr	r3, [pc, #16]	; (8089148 <_ZN28CellularHelperStringResponseC1Ev+0x20>)
 8089138:	4904      	ldr	r1, [pc, #16]	; (808914c <_ZN28CellularHelperStringResponseC1Ev+0x24>)
 808913a:	f840 3b0c 	str.w	r3, [r0], #12
 808913e:	f000 ffde 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
 8089142:	4620      	mov	r0, r4
 8089144:	bd10      	pop	{r4, pc}
 8089146:	bf00      	nop
 8089148:	08092c04 	.word	0x08092c04
 808914c:	08092fdc 	.word	0x08092fdc

08089150 <_ZN28CellularHelperStringResponseD1Ev>:
 8089150:	b510      	push	{r4, lr}
 8089152:	4604      	mov	r4, r0
 8089154:	4b03      	ldr	r3, [pc, #12]	; (8089164 <_ZN28CellularHelperStringResponseD1Ev+0x14>)
 8089156:	f840 3b0c 	str.w	r3, [r0], #12
 808915a:	f000 ff89 	bl	808a070 <_ZN6StringD1Ev>
 808915e:	4620      	mov	r0, r4
 8089160:	bd10      	pop	{r4, pc}
 8089162:	bf00      	nop
 8089164:	08092c04 	.word	0x08092c04

08089168 <_ZNK19CellularHelperClass7getIMEIEv>:
	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGMR\r\n");

	return resp.string;
}

String CellularHelperClass::getIMEI() const {
 8089168:	b510      	push	{r4, lr}
 808916a:	4604      	mov	r4, r0
 808916c:	b088      	sub	sp, #32
	CellularHelperStringResponse resp;
 808916e:	a801      	add	r0, sp, #4
 8089170:	f7ff ffda 	bl	8089128 <_ZN28CellularHelperStringResponseC1Ev>

    template<typename T, typename... Targs>
    inline int command(int (*cb)(int type, const char* buf, int len, T* param),
            T* param, system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
 8089174:	4b08      	ldr	r3, [pc, #32]	; (8089198 <_ZNK19CellularHelperClass7getIMEIEv+0x30>)
 8089176:	f242 7210 	movw	r2, #10000	; 0x2710
 808917a:	a901      	add	r1, sp, #4
 808917c:	4807      	ldr	r0, [pc, #28]	; (808919c <_ZNK19CellularHelperClass7getIMEIEv+0x34>)
 808917e:	f000 faad 	bl	80896dc <cellular_command>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGSN\r\n");

	return resp.string;
 8089182:	a904      	add	r1, sp, #16
 8089184:	4620      	mov	r0, r4
 8089186:	f000 fff9 	bl	808a17c <_ZN6StringC1ERKS_>

	return resp.string;
}

String CellularHelperClass::getIMEI() const {
	CellularHelperStringResponse resp;
 808918a:	a801      	add	r0, sp, #4
 808918c:	f7ff ffe0 	bl	8089150 <_ZN28CellularHelperStringResponseD1Ev>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGSN\r\n");

	return resp.string;
}
 8089190:	4620      	mov	r0, r4
 8089192:	b008      	add	sp, #32
 8089194:	bd10      	pop	{r4, pc}
 8089196:	bf00      	nop
 8089198:	08092ec0 	.word	0x08092ec0
 808919c:	08088f3d 	.word	0x08088f3d

080891a0 <_ZNK19CellularHelperClass7getIMSIEv>:

String CellularHelperClass::getIMSI() const {
 80891a0:	b510      	push	{r4, lr}
 80891a2:	4604      	mov	r4, r0
 80891a4:	b088      	sub	sp, #32
	CellularHelperStringResponse resp;
 80891a6:	a801      	add	r0, sp, #4
 80891a8:	f7ff ffbe 	bl	8089128 <_ZN28CellularHelperStringResponseC1Ev>
 80891ac:	4b08      	ldr	r3, [pc, #32]	; (80891d0 <_ZNK19CellularHelperClass7getIMSIEv+0x30>)
 80891ae:	f242 7210 	movw	r2, #10000	; 0x2710
 80891b2:	a901      	add	r1, sp, #4
 80891b4:	4807      	ldr	r0, [pc, #28]	; (80891d4 <_ZNK19CellularHelperClass7getIMSIEv+0x34>)
 80891b6:	f000 fa91 	bl	80896dc <cellular_command>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGMI\r\n");

	return resp.string;
 80891ba:	a904      	add	r1, sp, #16
 80891bc:	4620      	mov	r0, r4
 80891be:	f000 ffdd 	bl	808a17c <_ZN6StringC1ERKS_>

	return resp.string;
}

String CellularHelperClass::getIMSI() const {
	CellularHelperStringResponse resp;
 80891c2:	a801      	add	r0, sp, #4
 80891c4:	f7ff ffc4 	bl	8089150 <_ZN28CellularHelperStringResponseD1Ev>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGMI\r\n");

	return resp.string;
}
 80891c8:	4620      	mov	r0, r4
 80891ca:	b008      	add	sp, #32
 80891cc:	bd10      	pop	{r4, pc}
 80891ce:	bf00      	nop
 80891d0:	08092eca 	.word	0x08092eca
 80891d4:	08088f3d 	.word	0x08088f3d

080891d8 <_ZNK19CellularHelperClass8getICCIDEv>:

String CellularHelperClass::getICCID() const {
 80891d8:	b510      	push	{r4, lr}
 80891da:	4604      	mov	r4, r0
 80891dc:	b08c      	sub	sp, #48	; 0x30
	CellularHelperPlusStringResponse resp;
 80891de:	a801      	add	r0, sp, #4
 80891e0:	f7ff ff78 	bl	80890d4 <_ZN32CellularHelperPlusStringResponseC1Ev>
	resp.command = "CCID";
 80891e4:	490a      	ldr	r1, [pc, #40]	; (8089210 <_ZNK19CellularHelperClass8getICCIDEv+0x38>)
 80891e6:	a804      	add	r0, sp, #16
 80891e8:	f000 ffdb 	bl	808a1a2 <_ZN6StringaSEPKc>
 80891ec:	4b09      	ldr	r3, [pc, #36]	; (8089214 <_ZNK19CellularHelperClass8getICCIDEv+0x3c>)
 80891ee:	f242 7210 	movw	r2, #10000	; 0x2710
 80891f2:	a901      	add	r1, sp, #4
 80891f4:	4808      	ldr	r0, [pc, #32]	; (8089218 <_ZNK19CellularHelperClass8getICCIDEv+0x40>)
 80891f6:	f000 fa71 	bl	80896dc <cellular_command>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CCID\r\n");

	return resp.string;
 80891fa:	a908      	add	r1, sp, #32
 80891fc:	4620      	mov	r0, r4
 80891fe:	f000 ffbd 	bl	808a17c <_ZN6StringC1ERKS_>

	return resp.string;
}

String CellularHelperClass::getICCID() const {
	CellularHelperPlusStringResponse resp;
 8089202:	a801      	add	r0, sp, #4
 8089204:	f7ff ff80 	bl	8089108 <_ZN32CellularHelperPlusStringResponseD1Ev>
	resp.command = "CCID";

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CCID\r\n");

	return resp.string;
}
 8089208:	4620      	mov	r0, r4
 808920a:	b00c      	add	sp, #48	; 0x30
 808920c:	bd10      	pop	{r4, pc}
 808920e:	bf00      	nop
 8089210:	08092ed4 	.word	0x08092ed4
 8089214:	08092ed9 	.word	0x08092ed9
 8089218:	08088f3d 	.word	0x08088f3d

0808921c <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>:



// There isn't an overload of String that takes a buffer and length, but that's what comes back from
// the Cellular.command callback, so that's why this method exists.
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 808921c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8089220:	460d      	mov	r5, r1
 8089222:	4616      	mov	r6, r2
	str.reserve(str.length() + (size_t)len + 1);
 8089224:	1c59      	adds	r1, r3, #1



// There isn't an overload of String that takes a buffer and length, but that's what comes back from
// the Cellular.command callback, so that's why this method exists.
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 8089226:	461f      	mov	r7, r3
	str.reserve(str.length() + (size_t)len + 1);
 8089228:	68ab      	ldr	r3, [r5, #8]
 808922a:	4628      	mov	r0, r5
 808922c:	4419      	add	r1, r3



// There isn't an overload of String that takes a buffer and length, but that's what comes back from
// the Cellular.command callback, so that's why this method exists.
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 808922e:	f89d 8018 	ldrb.w	r8, [sp, #24]
	str.reserve(str.length() + (size_t)len + 1);
 8089232:	4634      	mov	r4, r6
 8089234:	f000 ff3a 	bl	808a0ac <_ZN6String7reserveEj>
	for(int ii = 0; ii < len; ii++) {
 8089238:	1ba3      	subs	r3, r4, r6
 808923a:	429f      	cmp	r7, r3
 808923c:	dd0d      	ble.n	808925a <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3e>
		if (!noEOL || (buf[ii] != '\r' && buf[ii] != '\n')) {
 808923e:	f1b8 0f00 	cmp.w	r8, #0
 8089242:	d004      	beq.n	808924e <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x32>
 8089244:	7823      	ldrb	r3, [r4, #0]
 8089246:	2b0d      	cmp	r3, #13
 8089248:	d005      	beq.n	8089256 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3a>
 808924a:	2b0a      	cmp	r3, #10
 808924c:	d003      	beq.n	8089256 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3a>
			str.concat(buf[ii]);
 808924e:	7821      	ldrb	r1, [r4, #0]
 8089250:	4628      	mov	r0, r5
 8089252:	f001 f845 	bl	808a2e0 <_ZN6String6concatEc>
 8089256:	3401      	adds	r4, #1

// There isn't an overload of String that takes a buffer and length, but that's what comes back from
// the Cellular.command callback, so that's why this method exists.
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
	str.reserve(str.length() + (size_t)len + 1);
	for(int ii = 0; ii < len; ii++) {
 8089258:	e7ee      	b.n	8089238 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x1c>
 808925a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08089260 <_ZN28CellularHelperStringResponse5parseEiPKci>:
}




int CellularHelperStringResponse::parse(int type, const char *buf, int len) {
 8089260:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (enableDebug) {
 8089262:	f890 e008 	ldrb.w	lr, [r0, #8]
}




int CellularHelperStringResponse::parse(int type, const char *buf, int len) {
 8089266:	4604      	mov	r4, r0
 8089268:	460f      	mov	r7, r1
 808926a:	4615      	mov	r5, r2
 808926c:	461e      	mov	r6, r3
	if (enableDebug) {
 808926e:	f1be 0f00 	cmp.w	lr, #0
 8089272:	d001      	beq.n	8089278 <_ZN28CellularHelperStringResponse5parseEiPKci+0x18>
		logCellularDebug(type, buf, len);
 8089274:	f7ff fe6e 	bl	8088f54 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	}
	if (type == TYPE_UNKNOWN) {
 8089278:	b947      	cbnz	r7, 808928c <_ZN28CellularHelperStringResponse5parseEiPKci+0x2c>
		CellularHelper.appendBufferToString(string, buf, len, true);
 808927a:	2301      	movs	r3, #1
 808927c:	9300      	str	r3, [sp, #0]
 808927e:	462a      	mov	r2, r5
 8089280:	4633      	mov	r3, r6
 8089282:	f104 010c 	add.w	r1, r4, #12
 8089286:	4803      	ldr	r0, [pc, #12]	; (8089294 <_ZN28CellularHelperStringResponse5parseEiPKci+0x34>)
 8089288:	f7ff ffc8 	bl	808921c <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>
	}
	return WAIT;
}
 808928c:	f04f 30ff 	mov.w	r0, #4294967295
 8089290:	b003      	add	sp, #12
 8089292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8089294:	20000bcc 	.word	0x20000bcc

08089298 <_ZN32CellularHelperPlusStringResponse5parseEiPKci>:


int CellularHelperPlusStringResponse::parse(int type, const char *buf, int len) {
 8089298:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (enableDebug) {
 808929a:	f890 e008 	ldrb.w	lr, [r0, #8]
	}
	return WAIT;
}


int CellularHelperPlusStringResponse::parse(int type, const char *buf, int len) {
 808929e:	b08b      	sub	sp, #44	; 0x2c
 80892a0:	4606      	mov	r6, r0
 80892a2:	460d      	mov	r5, r1
 80892a4:	4617      	mov	r7, r2
 80892a6:	461c      	mov	r4, r3
	if (enableDebug) {
 80892a8:	f1be 0f00 	cmp.w	lr, #0
 80892ac:	d001      	beq.n	80892b2 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x1a>
		logCellularDebug(type, buf, len);
 80892ae:	f7ff fe51 	bl	8088f54 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	}
	if (type == TYPE_PLUS) {
 80892b2:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
 80892b6:	d12a      	bne.n	808930e <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x76>
		// Copy to temporary string to make processing easier
		char *copy = (char *) malloc(len + 1);
 80892b8:	1c60      	adds	r0, r4, #1
 80892ba:	f000 fb45 	bl	8089948 <malloc>
		if (copy) {
 80892be:	4605      	mov	r5, r0
 80892c0:	b328      	cbz	r0, 808930e <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x76>
			strncpy(copy, buf, len);
 80892c2:	4622      	mov	r2, r4
 80892c4:	4639      	mov	r1, r7
 80892c6:	f005 f876 	bl	808e3b6 <strncpy>
			copy[len] = 0;
 80892ca:	2300      	movs	r3, #0
 80892cc:	552b      	strb	r3, [r5, r4]

			// We return the parts of the + response corresponding to the command we requested
			char searchFor[32];
			snprintf(searchFor, sizeof(searchFor), "\n+%s: ", command.c_str());
 80892ce:	68f3      	ldr	r3, [r6, #12]
 80892d0:	4a11      	ldr	r2, [pc, #68]	; (8089318 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x80>)
 80892d2:	2120      	movs	r1, #32
 80892d4:	a802      	add	r0, sp, #8
 80892d6:	f000 fb67 	bl	80899a8 <snprintf>

			//Log.info("searching for: +%s:", command.c_str());

			char *start = strstr(copy, searchFor);
 80892da:	a902      	add	r1, sp, #8
 80892dc:	4628      	mov	r0, r5
 80892de:	f005 f87d 	bl	808e3dc <strstr>
			if (start) {
 80892e2:	4604      	mov	r4, r0
 80892e4:	b180      	cbz	r0, 8089308 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x70>
				start += strlen(searchFor);
 80892e6:	a802      	add	r0, sp, #8
 80892e8:	f005 f848 	bl	808e37c <strlen>
 80892ec:	4404      	add	r4, r0

				char *end = strchr(start, '\r');
 80892ee:	210d      	movs	r1, #13
 80892f0:	4620      	mov	r0, r4
 80892f2:	f004 faf3 	bl	808d8dc <strchr>
				CellularHelper.appendBufferToString(string, start, end - start);
 80892f6:	2301      	movs	r3, #1
 80892f8:	9300      	str	r3, [sp, #0]
 80892fa:	4622      	mov	r2, r4
 80892fc:	1b03      	subs	r3, r0, r4
 80892fe:	f106 011c 	add.w	r1, r6, #28
 8089302:	4806      	ldr	r0, [pc, #24]	; (808931c <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x84>)
 8089304:	f7ff ff8a 	bl	808921c <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>
			}
			else {
				//Log.info("not found");
			}

			free(copy);
 8089308:	4628      	mov	r0, r5
 808930a:	f000 fb25 	bl	8089958 <free>
		}
	}
	return WAIT;
}
 808930e:	f04f 30ff 	mov.w	r0, #4294967295
 8089312:	b00b      	add	sp, #44	; 0x2c
 8089314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8089316:	bf00      	nop
 8089318:	08092fe9 	.word	0x08092fe9
 808931c:	20000bcc 	.word	0x20000bcc

08089320 <_GLOBAL__sub_I_CellularHelper>:
 8089320:	f000 b82c 	b.w	808937c <HAL_Pin_Map>

08089324 <_GLOBAL__sub_I__ZN16SerialBufferBaseC2EPhjR11USARTSerial>:
 8089324:	f000 b82a 	b.w	808937c <HAL_Pin_Map>

08089328 <_GLOBAL__sub_I__ZN9PAMSensorC2Ev>:
 8089328:	f000 b828 	b.w	808937c <HAL_Pin_Map>

0808932c <_GLOBAL__sub_I__ZN13PAMSensorFeedC2EP9PAMSensor>:
 808932c:	f000 b826 	b.w	808937c <HAL_Pin_Map>

08089330 <_GLOBAL__sub_I__ZN9PAMSpecieC2Ettff>:
 8089330:	f000 b824 	b.w	808937c <HAL_Pin_Map>

08089334 <_GLOBAL__sub_I__ZN7HIH8120C2Eh>:
 8089334:	f000 b822 	b.w	808937c <HAL_Pin_Map>

08089338 <_GLOBAL__sub_I__ZN9PlantowerC2ER11USARTSerial>:
 8089338:	f000 b820 	b.w	808937c <HAL_Pin_Map>

0808933c <_GLOBAL__sub_I__ZN5T6713C2Ev>:
 808933c:	f000 b81e 	b.w	808937c <HAL_Pin_Map>

08089340 <_GLOBAL__sub_I__ZN9TPHFusion16becomesResponderEtb>:
 8089340:	f000 b81c 	b.w	808937c <HAL_Pin_Map>

08089344 <_GLOBAL__sub_I__ZN9TPHFusionC2Ehb>:
 8089344:	f000 b81a 	b.w	808937c <HAL_Pin_Map>

08089348 <_GLOBAL__sub_I__ZN6BME680C2Ev>:
 8089348:	f000 b818 	b.w	808937c <HAL_Pin_Map>

0808934c <_GLOBAL__sub_I__ZN5PAMCOC2Ehhhh>:
 808934c:	f000 b816 	b.w	808937c <HAL_Pin_Map>

08089350 <_GLOBAL__sub_I_PAMEEPROM.cpp>:
 8089350:	f000 b814 	b.w	808937c <HAL_Pin_Map>

08089354 <_GLOBAL__sub_I__Z22__fetch_pam_usb_serialv>:
 8089354:	f000 b812 	b.w	808937c <HAL_Pin_Map>

08089358 <_GLOBAL__sub_I__ZN16PAMSerialManagerC2ER6Stream>:
 8089358:	f000 b810 	b.w	808937c <HAL_Pin_Map>

0808935c <_GLOBAL__sub_I__ZN13PAMSerialMenuC2Ev>:
 808935c:	f000 b80e 	b.w	808937c <HAL_Pin_Map>

08089360 <_GLOBAL__sub_I__ZN18PAMSerialEditValueIfE16becomesResponderEtb>:
 8089360:	f000 b80c 	b.w	808937c <HAL_Pin_Map>

08089364 <_GLOBAL__sub_I__ZN16PAMSensorManager8instanceE>:
 8089364:	f000 b80a 	b.w	808937c <HAL_Pin_Map>

08089368 <_GLOBAL__sub_I_MinimumSerial.cpp>:
 8089368:	f000 b808 	b.w	808937c <HAL_Pin_Map>

0808936c <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
 808936c:	f000 b806 	b.w	808937c <HAL_Pin_Map>

08089370 <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
 8089370:	f000 b804 	b.w	808937c <HAL_Pin_Map>

08089374 <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
 8089374:	f000 b802 	b.w	808937c <HAL_Pin_Map>

08089378 <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
 8089378:	f000 b800 	b.w	808937c <HAL_Pin_Map>

0808937c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 808937c:	b508      	push	{r3, lr}
 808937e:	4b02      	ldr	r3, [pc, #8]	; (8089388 <HAL_Pin_Map+0xc>)
 8089380:	681b      	ldr	r3, [r3, #0]
 8089382:	681b      	ldr	r3, [r3, #0]
 8089384:	9301      	str	r3, [sp, #4]
 8089386:	bd08      	pop	{r3, pc}
 8089388:	080401b0 	.word	0x080401b0

0808938c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 808938c:	b508      	push	{r3, lr}
 808938e:	4b02      	ldr	r3, [pc, #8]	; (8089398 <HAL_Validate_Pin_Function+0xc>)
 8089390:	681b      	ldr	r3, [r3, #0]
 8089392:	685b      	ldr	r3, [r3, #4]
 8089394:	9301      	str	r3, [sp, #4]
 8089396:	bd08      	pop	{r3, pc}
 8089398:	080401b0 	.word	0x080401b0

0808939c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 808939c:	b508      	push	{r3, lr}
 808939e:	4b02      	ldr	r3, [pc, #8]	; (80893a8 <HAL_Pin_Mode+0xc>)
 80893a0:	681b      	ldr	r3, [r3, #0]
 80893a2:	689b      	ldr	r3, [r3, #8]
 80893a4:	9301      	str	r3, [sp, #4]
 80893a6:	bd08      	pop	{r3, pc}
 80893a8:	080401b0 	.word	0x080401b0

080893ac <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80893ac:	b508      	push	{r3, lr}
 80893ae:	4b02      	ldr	r3, [pc, #8]	; (80893b8 <HAL_Get_Pin_Mode+0xc>)
 80893b0:	681b      	ldr	r3, [r3, #0]
 80893b2:	68db      	ldr	r3, [r3, #12]
 80893b4:	9301      	str	r3, [sp, #4]
 80893b6:	bd08      	pop	{r3, pc}
 80893b8:	080401b0 	.word	0x080401b0

080893bc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80893bc:	b508      	push	{r3, lr}
 80893be:	4b02      	ldr	r3, [pc, #8]	; (80893c8 <HAL_GPIO_Write+0xc>)
 80893c0:	681b      	ldr	r3, [r3, #0]
 80893c2:	691b      	ldr	r3, [r3, #16]
 80893c4:	9301      	str	r3, [sp, #4]
 80893c6:	bd08      	pop	{r3, pc}
 80893c8:	080401b0 	.word	0x080401b0

080893cc <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80893cc:	b508      	push	{r3, lr}
 80893ce:	4b02      	ldr	r3, [pc, #8]	; (80893d8 <HAL_GPIO_Read+0xc>)
 80893d0:	681b      	ldr	r3, [r3, #0]
 80893d2:	695b      	ldr	r3, [r3, #20]
 80893d4:	9301      	str	r3, [sp, #4]
 80893d6:	bd08      	pop	{r3, pc}
 80893d8:	080401b0 	.word	0x080401b0

080893dc <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 80893dc:	b508      	push	{r3, lr}
 80893de:	4b02      	ldr	r3, [pc, #8]	; (80893e8 <HAL_Interrupts_Attach+0xc>)
 80893e0:	681b      	ldr	r3, [r3, #0]
 80893e2:	699b      	ldr	r3, [r3, #24]
 80893e4:	9301      	str	r3, [sp, #4]
 80893e6:	bd08      	pop	{r3, pc}
 80893e8:	080401b0 	.word	0x080401b0

080893ec <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
 80893ec:	b508      	push	{r3, lr}
 80893ee:	4b02      	ldr	r3, [pc, #8]	; (80893f8 <HAL_Interrupts_Detach+0xc>)
 80893f0:	681b      	ldr	r3, [r3, #0]
 80893f2:	69db      	ldr	r3, [r3, #28]
 80893f4:	9301      	str	r3, [sp, #4]
 80893f6:	bd08      	pop	{r3, pc}
 80893f8:	080401b0 	.word	0x080401b0

080893fc <HAL_ADC_Set_Sample_Time>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
 80893fc:	b508      	push	{r3, lr}
 80893fe:	4b02      	ldr	r3, [pc, #8]	; (8089408 <HAL_ADC_Set_Sample_Time+0xc>)
 8089400:	681b      	ldr	r3, [r3, #0]
 8089402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8089404:	9301      	str	r3, [sp, #4]
 8089406:	bd08      	pop	{r3, pc}
 8089408:	080401b0 	.word	0x080401b0

0808940c <HAL_ADC_Read>:
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 808940c:	b508      	push	{r3, lr}
 808940e:	4b02      	ldr	r3, [pc, #8]	; (8089418 <HAL_ADC_Read+0xc>)
 8089410:	681b      	ldr	r3, [r3, #0]
 8089412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8089414:	9301      	str	r3, [sp, #4]
 8089416:	bd08      	pop	{r3, pc}
 8089418:	080401b0 	.word	0x080401b0

0808941c <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 808941c:	b508      	push	{r3, lr}
 808941e:	4b02      	ldr	r3, [pc, #8]	; (8089428 <HAL_SPI_Begin+0xc>)
 8089420:	681b      	ldr	r3, [r3, #0]
 8089422:	681b      	ldr	r3, [r3, #0]
 8089424:	9301      	str	r3, [sp, #4]
 8089426:	bd08      	pop	{r3, pc}
 8089428:	080401b4 	.word	0x080401b4

0808942c <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 808942c:	b508      	push	{r3, lr}
 808942e:	4b02      	ldr	r3, [pc, #8]	; (8089438 <HAL_SPI_Set_Bit_Order+0xc>)
 8089430:	681b      	ldr	r3, [r3, #0]
 8089432:	689b      	ldr	r3, [r3, #8]
 8089434:	9301      	str	r3, [sp, #4]
 8089436:	bd08      	pop	{r3, pc}
 8089438:	080401b4 	.word	0x080401b4

0808943c <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 808943c:	b508      	push	{r3, lr}
 808943e:	4b02      	ldr	r3, [pc, #8]	; (8089448 <HAL_SPI_Set_Data_Mode+0xc>)
 8089440:	681b      	ldr	r3, [r3, #0]
 8089442:	68db      	ldr	r3, [r3, #12]
 8089444:	9301      	str	r3, [sp, #4]
 8089446:	bd08      	pop	{r3, pc}
 8089448:	080401b4 	.word	0x080401b4

0808944c <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 808944c:	b508      	push	{r3, lr}
 808944e:	4b02      	ldr	r3, [pc, #8]	; (8089458 <HAL_SPI_Set_Clock_Divider+0xc>)
 8089450:	681b      	ldr	r3, [r3, #0]
 8089452:	691b      	ldr	r3, [r3, #16]
 8089454:	9301      	str	r3, [sp, #4]
 8089456:	bd08      	pop	{r3, pc}
 8089458:	080401b4 	.word	0x080401b4

0808945c <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 808945c:	b508      	push	{r3, lr}
 808945e:	4b02      	ldr	r3, [pc, #8]	; (8089468 <HAL_SPI_Send_Receive_Data+0xc>)
 8089460:	681b      	ldr	r3, [r3, #0]
 8089462:	695b      	ldr	r3, [r3, #20]
 8089464:	9301      	str	r3, [sp, #4]
 8089466:	bd08      	pop	{r3, pc}
 8089468:	080401b4 	.word	0x080401b4

0808946c <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 808946c:	b508      	push	{r3, lr}
 808946e:	4b02      	ldr	r3, [pc, #8]	; (8089478 <HAL_SPI_Init+0xc>)
 8089470:	681b      	ldr	r3, [r3, #0]
 8089472:	69db      	ldr	r3, [r3, #28]
 8089474:	9301      	str	r3, [sp, #4]
 8089476:	bd08      	pop	{r3, pc}
 8089478:	080401b4 	.word	0x080401b4

0808947c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 808947c:	b508      	push	{r3, lr}
 808947e:	4b02      	ldr	r3, [pc, #8]	; (8089488 <HAL_SPI_Is_Enabled+0xc>)
 8089480:	681b      	ldr	r3, [r3, #0]
 8089482:	6a1b      	ldr	r3, [r3, #32]
 8089484:	9301      	str	r3, [sp, #4]
 8089486:	bd08      	pop	{r3, pc}
 8089488:	080401b4 	.word	0x080401b4

0808948c <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 808948c:	b508      	push	{r3, lr}
 808948e:	4b02      	ldr	r3, [pc, #8]	; (8089498 <HAL_SPI_Info+0xc>)
 8089490:	681b      	ldr	r3, [r3, #0]
 8089492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8089494:	9301      	str	r3, [sp, #4]
 8089496:	bd08      	pop	{r3, pc}
 8089498:	080401b4 	.word	0x080401b4

0808949c <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
 808949c:	b508      	push	{r3, lr}
 808949e:	4b02      	ldr	r3, [pc, #8]	; (80894a8 <HAL_SPI_DMA_Transfer+0xc>)
 80894a0:	681b      	ldr	r3, [r3, #0]
 80894a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80894a4:	9301      	str	r3, [sp, #4]
 80894a6:	bd08      	pop	{r3, pc}
 80894a8:	080401b4 	.word	0x080401b4

080894ac <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
 80894ac:	b508      	push	{r3, lr}
 80894ae:	4b02      	ldr	r3, [pc, #8]	; (80894b8 <HAL_SPI_DMA_Transfer_Status+0xc>)
 80894b0:	681b      	ldr	r3, [r3, #0]
 80894b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80894b4:	9301      	str	r3, [sp, #4]
 80894b6:	bd08      	pop	{r3, pc}
 80894b8:	080401b4 	.word	0x080401b4

080894bc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80894bc:	b508      	push	{r3, lr}
 80894be:	4b02      	ldr	r3, [pc, #8]	; (80894c8 <HAL_RNG_GetRandomNumber+0xc>)
 80894c0:	681b      	ldr	r3, [r3, #0]
 80894c2:	685b      	ldr	r3, [r3, #4]
 80894c4:	9301      	str	r3, [sp, #4]
 80894c6:	bd08      	pop	{r3, pc}
 80894c8:	0804019c 	.word	0x0804019c

080894cc <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80894cc:	b508      	push	{r3, lr}
 80894ce:	4b02      	ldr	r3, [pc, #8]	; (80894d8 <HAL_Delay_Microseconds+0xc>)
 80894d0:	681b      	ldr	r3, [r3, #0]
 80894d2:	68db      	ldr	r3, [r3, #12]
 80894d4:	9301      	str	r3, [sp, #4]
 80894d6:	bd08      	pop	{r3, pc}
 80894d8:	0804019c 	.word	0x0804019c

080894dc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80894dc:	b508      	push	{r3, lr}
 80894de:	4b02      	ldr	r3, [pc, #8]	; (80894e8 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80894e0:	681b      	ldr	r3, [r3, #0]
 80894e2:	695b      	ldr	r3, [r3, #20]
 80894e4:	9301      	str	r3, [sp, #4]
 80894e6:	bd08      	pop	{r3, pc}
 80894e8:	0804019c 	.word	0x0804019c

080894ec <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 80894ec:	b508      	push	{r3, lr}
 80894ee:	4b02      	ldr	r3, [pc, #8]	; (80894f8 <HAL_RTC_Get_UnixTime+0xc>)
 80894f0:	681b      	ldr	r3, [r3, #0]
 80894f2:	69db      	ldr	r3, [r3, #28]
 80894f4:	9301      	str	r3, [sp, #4]
 80894f6:	bd08      	pop	{r3, pc}
 80894f8:	0804019c 	.word	0x0804019c

080894fc <HAL_RTC_Set_UnixTime>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
 80894fc:	b508      	push	{r3, lr}
 80894fe:	4b02      	ldr	r3, [pc, #8]	; (8089508 <HAL_RTC_Set_UnixTime+0xc>)
 8089500:	681b      	ldr	r3, [r3, #0]
 8089502:	6a1b      	ldr	r3, [r3, #32]
 8089504:	9301      	str	r3, [sp, #4]
 8089506:	bd08      	pop	{r3, pc}
 8089508:	0804019c 	.word	0x0804019c

0808950c <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 808950c:	b508      	push	{r3, lr}
 808950e:	4b02      	ldr	r3, [pc, #8]	; (8089518 <HAL_EEPROM_Init+0xc>)
 8089510:	681b      	ldr	r3, [r3, #0]
 8089512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8089514:	9301      	str	r3, [sp, #4]
 8089516:	bd08      	pop	{r3, pc}
 8089518:	0804019c 	.word	0x0804019c

0808951c <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
 808951c:	b508      	push	{r3, lr}
 808951e:	4b02      	ldr	r3, [pc, #8]	; (8089528 <HAL_EEPROM_Get+0xc>)
 8089520:	681b      	ldr	r3, [r3, #0]
 8089522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8089524:	9301      	str	r3, [sp, #4]
 8089526:	bd08      	pop	{r3, pc}
 8089528:	0804019c 	.word	0x0804019c

0808952c <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 808952c:	b508      	push	{r3, lr}
 808952e:	4b02      	ldr	r3, [pc, #8]	; (8089538 <HAL_EEPROM_Put+0xc>)
 8089530:	681b      	ldr	r3, [r3, #0]
 8089532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8089534:	9301      	str	r3, [sp, #4]
 8089536:	bd08      	pop	{r3, pc}
 8089538:	0804019c 	.word	0x0804019c

0808953c <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 808953c:	b508      	push	{r3, lr}
 808953e:	4b02      	ldr	r3, [pc, #8]	; (8089548 <HAL_RTC_Time_Is_Valid+0xc>)
 8089540:	681b      	ldr	r3, [r3, #0]
 8089542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8089544:	9301      	str	r3, [sp, #4]
 8089546:	bd08      	pop	{r3, pc}
 8089548:	0804019c 	.word	0x0804019c

0808954c <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
 808954c:	b508      	push	{r3, lr}
 808954e:	4b02      	ldr	r3, [pc, #8]	; (8089558 <HAL_Core_System_Reset_Ex+0xc>)
 8089550:	681b      	ldr	r3, [r3, #0]
 8089552:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8089554:	9301      	str	r3, [sp, #4]
 8089556:	bd08      	pop	{r3, pc}
 8089558:	080401b8 	.word	0x080401b8

0808955c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 808955c:	b508      	push	{r3, lr}
 808955e:	4b02      	ldr	r3, [pc, #8]	; (8089568 <os_mutex_create+0xc>)
 8089560:	681b      	ldr	r3, [r3, #0]
 8089562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8089564:	9301      	str	r3, [sp, #4]
 8089566:	bd08      	pop	{r3, pc}
 8089568:	080401d0 	.word	0x080401d0

0808956c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 808956c:	b508      	push	{r3, lr}
 808956e:	4b02      	ldr	r3, [pc, #8]	; (8089578 <HAL_USART_Init+0xc>)
 8089570:	681b      	ldr	r3, [r3, #0]
 8089572:	699b      	ldr	r3, [r3, #24]
 8089574:	9301      	str	r3, [sp, #4]
 8089576:	bd08      	pop	{r3, pc}
 8089578:	080401c4 	.word	0x080401c4

0808957c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 808957c:	b508      	push	{r3, lr}
 808957e:	4b02      	ldr	r3, [pc, #8]	; (8089588 <HAL_USART_Write_Data+0xc>)
 8089580:	681b      	ldr	r3, [r3, #0]
 8089582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8089584:	9301      	str	r3, [sp, #4]
 8089586:	bd08      	pop	{r3, pc}
 8089588:	080401c4 	.word	0x080401c4

0808958c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 808958c:	b508      	push	{r3, lr}
 808958e:	4b02      	ldr	r3, [pc, #8]	; (8089598 <HAL_USART_Available_Data+0xc>)
 8089590:	681b      	ldr	r3, [r3, #0]
 8089592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8089594:	9301      	str	r3, [sp, #4]
 8089596:	bd08      	pop	{r3, pc}
 8089598:	080401c4 	.word	0x080401c4

0808959c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 808959c:	b508      	push	{r3, lr}
 808959e:	4b02      	ldr	r3, [pc, #8]	; (80895a8 <HAL_USART_Read_Data+0xc>)
 80895a0:	681b      	ldr	r3, [r3, #0]
 80895a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80895a4:	9301      	str	r3, [sp, #4]
 80895a6:	bd08      	pop	{r3, pc}
 80895a8:	080401c4 	.word	0x080401c4

080895ac <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80895ac:	b508      	push	{r3, lr}
 80895ae:	4b02      	ldr	r3, [pc, #8]	; (80895b8 <HAL_USART_Peek_Data+0xc>)
 80895b0:	681b      	ldr	r3, [r3, #0]
 80895b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80895b4:	9301      	str	r3, [sp, #4]
 80895b6:	bd08      	pop	{r3, pc}
 80895b8:	080401c4 	.word	0x080401c4

080895bc <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80895bc:	b508      	push	{r3, lr}
 80895be:	4b02      	ldr	r3, [pc, #8]	; (80895c8 <HAL_USART_Flush_Data+0xc>)
 80895c0:	681b      	ldr	r3, [r3, #0]
 80895c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80895c4:	9301      	str	r3, [sp, #4]
 80895c6:	bd08      	pop	{r3, pc}
 80895c8:	080401c4 	.word	0x080401c4

080895cc <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80895cc:	b508      	push	{r3, lr}
 80895ce:	4b02      	ldr	r3, [pc, #8]	; (80895d8 <HAL_USART_Is_Enabled+0xc>)
 80895d0:	681b      	ldr	r3, [r3, #0]
 80895d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80895d4:	9301      	str	r3, [sp, #4]
 80895d6:	bd08      	pop	{r3, pc}
 80895d8:	080401c4 	.word	0x080401c4

080895dc <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80895dc:	b508      	push	{r3, lr}
 80895de:	4b02      	ldr	r3, [pc, #8]	; (80895e8 <HAL_USART_Available_Data_For_Write+0xc>)
 80895e0:	681b      	ldr	r3, [r3, #0]
 80895e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80895e4:	9301      	str	r3, [sp, #4]
 80895e6:	bd08      	pop	{r3, pc}
 80895e8:	080401c4 	.word	0x080401c4

080895ec <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 80895ec:	b508      	push	{r3, lr}
 80895ee:	4b02      	ldr	r3, [pc, #8]	; (80895f8 <HAL_USART_BeginConfig+0xc>)
 80895f0:	681b      	ldr	r3, [r3, #0]
 80895f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80895f4:	9301      	str	r3, [sp, #4]
 80895f6:	bd08      	pop	{r3, pc}
 80895f8:	080401c4 	.word	0x080401c4

080895fc <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80895fc:	b508      	push	{r3, lr}
 80895fe:	4b02      	ldr	r3, [pc, #8]	; (8089608 <HAL_I2C_Begin+0xc>)
 8089600:	681b      	ldr	r3, [r3, #0]
 8089602:	68db      	ldr	r3, [r3, #12]
 8089604:	9301      	str	r3, [sp, #4]
 8089606:	bd08      	pop	{r3, pc}
 8089608:	080401ac 	.word	0x080401ac

0808960c <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 808960c:	b508      	push	{r3, lr}
 808960e:	4b02      	ldr	r3, [pc, #8]	; (8089618 <HAL_I2C_Request_Data+0xc>)
 8089610:	681b      	ldr	r3, [r3, #0]
 8089612:	695b      	ldr	r3, [r3, #20]
 8089614:	9301      	str	r3, [sp, #4]
 8089616:	bd08      	pop	{r3, pc}
 8089618:	080401ac 	.word	0x080401ac

0808961c <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 808961c:	b508      	push	{r3, lr}
 808961e:	4b02      	ldr	r3, [pc, #8]	; (8089628 <HAL_I2C_Begin_Transmission+0xc>)
 8089620:	681b      	ldr	r3, [r3, #0]
 8089622:	699b      	ldr	r3, [r3, #24]
 8089624:	9301      	str	r3, [sp, #4]
 8089626:	bd08      	pop	{r3, pc}
 8089628:	080401ac 	.word	0x080401ac

0808962c <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 808962c:	b508      	push	{r3, lr}
 808962e:	4b02      	ldr	r3, [pc, #8]	; (8089638 <HAL_I2C_End_Transmission+0xc>)
 8089630:	681b      	ldr	r3, [r3, #0]
 8089632:	69db      	ldr	r3, [r3, #28]
 8089634:	9301      	str	r3, [sp, #4]
 8089636:	bd08      	pop	{r3, pc}
 8089638:	080401ac 	.word	0x080401ac

0808963c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 808963c:	b508      	push	{r3, lr}
 808963e:	4b02      	ldr	r3, [pc, #8]	; (8089648 <HAL_I2C_Write_Data+0xc>)
 8089640:	681b      	ldr	r3, [r3, #0]
 8089642:	6a1b      	ldr	r3, [r3, #32]
 8089644:	9301      	str	r3, [sp, #4]
 8089646:	bd08      	pop	{r3, pc}
 8089648:	080401ac 	.word	0x080401ac

0808964c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 808964c:	b508      	push	{r3, lr}
 808964e:	4b02      	ldr	r3, [pc, #8]	; (8089658 <HAL_I2C_Available_Data+0xc>)
 8089650:	681b      	ldr	r3, [r3, #0]
 8089652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8089654:	9301      	str	r3, [sp, #4]
 8089656:	bd08      	pop	{r3, pc}
 8089658:	080401ac 	.word	0x080401ac

0808965c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 808965c:	b508      	push	{r3, lr}
 808965e:	4b02      	ldr	r3, [pc, #8]	; (8089668 <HAL_I2C_Read_Data+0xc>)
 8089660:	681b      	ldr	r3, [r3, #0]
 8089662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8089664:	9301      	str	r3, [sp, #4]
 8089666:	bd08      	pop	{r3, pc}
 8089668:	080401ac 	.word	0x080401ac

0808966c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 808966c:	b508      	push	{r3, lr}
 808966e:	4b02      	ldr	r3, [pc, #8]	; (8089678 <HAL_I2C_Peek_Data+0xc>)
 8089670:	681b      	ldr	r3, [r3, #0]
 8089672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8089674:	9301      	str	r3, [sp, #4]
 8089676:	bd08      	pop	{r3, pc}
 8089678:	080401ac 	.word	0x080401ac

0808967c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 808967c:	b508      	push	{r3, lr}
 808967e:	4b02      	ldr	r3, [pc, #8]	; (8089688 <HAL_I2C_Flush_Data+0xc>)
 8089680:	681b      	ldr	r3, [r3, #0]
 8089682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8089684:	9301      	str	r3, [sp, #4]
 8089686:	bd08      	pop	{r3, pc}
 8089688:	080401ac 	.word	0x080401ac

0808968c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 808968c:	b508      	push	{r3, lr}
 808968e:	4b02      	ldr	r3, [pc, #8]	; (8089698 <HAL_I2C_Is_Enabled+0xc>)
 8089690:	681b      	ldr	r3, [r3, #0]
 8089692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8089694:	9301      	str	r3, [sp, #4]
 8089696:	bd08      	pop	{r3, pc}
 8089698:	080401ac 	.word	0x080401ac

0808969c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 808969c:	b508      	push	{r3, lr}
 808969e:	4b02      	ldr	r3, [pc, #8]	; (80896a8 <HAL_I2C_Init+0xc>)
 80896a0:	681b      	ldr	r3, [r3, #0]
 80896a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80896a4:	9301      	str	r3, [sp, #4]
 80896a6:	bd08      	pop	{r3, pc}
 80896a8:	080401ac 	.word	0x080401ac

080896ac <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
 80896ac:	b508      	push	{r3, lr}
 80896ae:	4b02      	ldr	r3, [pc, #8]	; (80896b8 <HAL_I2C_Acquire+0xc>)
 80896b0:	681b      	ldr	r3, [r3, #0]
 80896b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80896b4:	9301      	str	r3, [sp, #4]
 80896b6:	bd08      	pop	{r3, pc}
 80896b8:	080401ac 	.word	0x080401ac

080896bc <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
 80896bc:	b508      	push	{r3, lr}
 80896be:	4b02      	ldr	r3, [pc, #8]	; (80896c8 <HAL_I2C_Release+0xc>)
 80896c0:	681b      	ldr	r3, [r3, #0]
 80896c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80896c4:	9301      	str	r3, [sp, #4]
 80896c6:	bd08      	pop	{r3, pc}
 80896c8:	080401ac 	.word	0x080401ac

080896cc <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80896cc:	b508      	push	{r3, lr}
 80896ce:	4b02      	ldr	r3, [pc, #8]	; (80896d8 <inet_gethostbyname+0xc>)
 80896d0:	681b      	ldr	r3, [r3, #0]
 80896d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80896d4:	9301      	str	r3, [sp, #4]
 80896d6:	bd08      	pop	{r3, pc}
 80896d8:	08060020 	.word	0x08060020

080896dc <cellular_command>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 80896dc:	b508      	push	{r3, lr}
 80896de:	4b02      	ldr	r3, [pc, #8]	; (80896e8 <cellular_command+0xc>)
 80896e0:	681b      	ldr	r3, [r3, #0]
 80896e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80896e4:	9301      	str	r3, [sp, #4]
 80896e6:	bd08      	pop	{r3, pc}
 80896e8:	08060020 	.word	0x08060020

080896ec <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80896ec:	b508      	push	{r3, lr}
 80896ee:	4b02      	ldr	r3, [pc, #8]	; (80896f8 <HAL_USB_USART_Init+0xc>)
 80896f0:	681b      	ldr	r3, [r3, #0]
 80896f2:	681b      	ldr	r3, [r3, #0]
 80896f4:	9301      	str	r3, [sp, #4]
 80896f6:	bd08      	pop	{r3, pc}
 80896f8:	0806001c 	.word	0x0806001c

080896fc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80896fc:	b508      	push	{r3, lr}
 80896fe:	4b02      	ldr	r3, [pc, #8]	; (8089708 <HAL_USB_USART_Begin+0xc>)
 8089700:	681b      	ldr	r3, [r3, #0]
 8089702:	685b      	ldr	r3, [r3, #4]
 8089704:	9301      	str	r3, [sp, #4]
 8089706:	bd08      	pop	{r3, pc}
 8089708:	0806001c 	.word	0x0806001c

0808970c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 808970c:	b508      	push	{r3, lr}
 808970e:	4b02      	ldr	r3, [pc, #8]	; (8089718 <HAL_USB_USART_Available_Data+0xc>)
 8089710:	681b      	ldr	r3, [r3, #0]
 8089712:	691b      	ldr	r3, [r3, #16]
 8089714:	9301      	str	r3, [sp, #4]
 8089716:	bd08      	pop	{r3, pc}
 8089718:	0806001c 	.word	0x0806001c

0808971c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 808971c:	b508      	push	{r3, lr}
 808971e:	4b02      	ldr	r3, [pc, #8]	; (8089728 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8089720:	681b      	ldr	r3, [r3, #0]
 8089722:	695b      	ldr	r3, [r3, #20]
 8089724:	9301      	str	r3, [sp, #4]
 8089726:	bd08      	pop	{r3, pc}
 8089728:	0806001c 	.word	0x0806001c

0808972c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 808972c:	b508      	push	{r3, lr}
 808972e:	4b02      	ldr	r3, [pc, #8]	; (8089738 <HAL_USB_USART_Receive_Data+0xc>)
 8089730:	681b      	ldr	r3, [r3, #0]
 8089732:	699b      	ldr	r3, [r3, #24]
 8089734:	9301      	str	r3, [sp, #4]
 8089736:	bd08      	pop	{r3, pc}
 8089738:	0806001c 	.word	0x0806001c

0808973c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 808973c:	b508      	push	{r3, lr}
 808973e:	4b02      	ldr	r3, [pc, #8]	; (8089748 <HAL_USB_USART_Send_Data+0xc>)
 8089740:	681b      	ldr	r3, [r3, #0]
 8089742:	69db      	ldr	r3, [r3, #28]
 8089744:	9301      	str	r3, [sp, #4]
 8089746:	bd08      	pop	{r3, pc}
 8089748:	0806001c 	.word	0x0806001c

0808974c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 808974c:	b508      	push	{r3, lr}
 808974e:	4b02      	ldr	r3, [pc, #8]	; (8089758 <HAL_USB_USART_Flush_Data+0xc>)
 8089750:	681b      	ldr	r3, [r3, #0]
 8089752:	6a1b      	ldr	r3, [r3, #32]
 8089754:	9301      	str	r3, [sp, #4]
 8089756:	bd08      	pop	{r3, pc}
 8089758:	0806001c 	.word	0x0806001c

0808975c <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 808975c:	b508      	push	{r3, lr}
 808975e:	4b02      	ldr	r3, [pc, #8]	; (8089768 <log_message_v+0xc>)
 8089760:	681b      	ldr	r3, [r3, #0]
 8089762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8089764:	9301      	str	r3, [sp, #4]
 8089766:	bd08      	pop	{r3, pc}
 8089768:	080201a0 	.word	0x080201a0

0808976c <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 808976c:	b508      	push	{r3, lr}
 808976e:	4b02      	ldr	r3, [pc, #8]	; (8089778 <system_mode+0xc>)
 8089770:	681b      	ldr	r3, [r3, #0]
 8089772:	681b      	ldr	r3, [r3, #0]
 8089774:	9301      	str	r3, [sp, #4]
 8089776:	bd08      	pop	{r3, pc}
 8089778:	080401a4 	.word	0x080401a4

0808977c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 808977c:	b508      	push	{r3, lr}
 808977e:	4b02      	ldr	r3, [pc, #8]	; (8089788 <set_system_mode+0xc>)
 8089780:	681b      	ldr	r3, [r3, #0]
 8089782:	685b      	ldr	r3, [r3, #4]
 8089784:	9301      	str	r3, [sp, #4]
 8089786:	bd08      	pop	{r3, pc}
 8089788:	080401a4 	.word	0x080401a4

0808978c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 808978c:	b508      	push	{r3, lr}
 808978e:	4b02      	ldr	r3, [pc, #8]	; (8089798 <system_delay_ms+0xc>)
 8089790:	681b      	ldr	r3, [r3, #0]
 8089792:	695b      	ldr	r3, [r3, #20]
 8089794:	9301      	str	r3, [sp, #4]
 8089796:	bd08      	pop	{r3, pc}
 8089798:	080401a4 	.word	0x080401a4

0808979c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 808979c:	b508      	push	{r3, lr}
 808979e:	4b02      	ldr	r3, [pc, #8]	; (80897a8 <system_thread_set_state+0xc>)
 80897a0:	681b      	ldr	r3, [r3, #0]
 80897a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80897a4:	9301      	str	r3, [sp, #4]
 80897a6:	bd08      	pop	{r3, pc}
 80897a8:	080401a4 	.word	0x080401a4

080897ac <system_version_info>:
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
 80897ac:	b508      	push	{r3, lr}
 80897ae:	4b02      	ldr	r3, [pc, #8]	; (80897b8 <system_version_info+0xc>)
 80897b0:	681b      	ldr	r3, [r3, #0]
 80897b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80897b4:	9301      	str	r3, [sp, #4]
 80897b6:	bd08      	pop	{r3, pc}
 80897b8:	080401a4 	.word	0x080401a4

080897bc <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80897bc:	b508      	push	{r3, lr}
 80897be:	4b02      	ldr	r3, [pc, #8]	; (80897c8 <application_thread_current+0xc>)
 80897c0:	681b      	ldr	r3, [r3, #0]
 80897c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80897c4:	9301      	str	r3, [sp, #4]
 80897c6:	bd08      	pop	{r3, pc}
 80897c8:	080401a4 	.word	0x080401a4

080897cc <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80897cc:	b508      	push	{r3, lr}
 80897ce:	4b02      	ldr	r3, [pc, #8]	; (80897d8 <application_thread_invoke+0xc>)
 80897d0:	681b      	ldr	r3, [r3, #0]
 80897d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80897d4:	9301      	str	r3, [sp, #4]
 80897d6:	bd08      	pop	{r3, pc}
 80897d8:	080401a4 	.word	0x080401a4

080897dc <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80897dc:	b508      	push	{r3, lr}
 80897de:	4b02      	ldr	r3, [pc, #8]	; (80897e8 <system_thread_get_state+0xc>)
 80897e0:	681b      	ldr	r3, [r3, #0]
 80897e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80897e4:	9301      	str	r3, [sp, #4]
 80897e6:	bd08      	pop	{r3, pc}
 80897e8:	080401a4 	.word	0x080401a4

080897ec <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
 80897ec:	b508      	push	{r3, lr}
 80897ee:	4b02      	ldr	r3, [pc, #8]	; (80897f8 <system_notify_time_changed+0xc>)
 80897f0:	681b      	ldr	r3, [r3, #0]
 80897f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80897f4:	9301      	str	r3, [sp, #4]
 80897f6:	bd08      	pop	{r3, pc}
 80897f8:	080401a4 	.word	0x080401a4

080897fc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80897fc:	b508      	push	{r3, lr}
 80897fe:	4b03      	ldr	r3, [pc, #12]	; (808980c <system_ctrl_set_app_request_handler+0x10>)
 8089800:	681b      	ldr	r3, [r3, #0]
 8089802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8089806:	9301      	str	r3, [sp, #4]
 8089808:	bd08      	pop	{r3, pc}
 808980a:	0000      	.short	0x0000
 808980c:	080401a4 	.word	0x080401a4

08089810 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8089810:	b508      	push	{r3, lr}
 8089812:	4b03      	ldr	r3, [pc, #12]	; (8089820 <system_ctrl_set_result+0x10>)
 8089814:	681b      	ldr	r3, [r3, #0]
 8089816:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 808981a:	9301      	str	r3, [sp, #4]
 808981c:	bd08      	pop	{r3, pc}
 808981e:	0000      	.short	0x0000
 8089820:	080401a4 	.word	0x080401a4

08089824 <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
 8089824:	b508      	push	{r3, lr}
 8089826:	4b03      	ldr	r3, [pc, #12]	; (8089834 <system_sleep_pins+0x10>)
 8089828:	681b      	ldr	r3, [r3, #0]
 808982a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 808982e:	9301      	str	r3, [sp, #4]
 8089830:	bd08      	pop	{r3, pc}
 8089832:	0000      	.short	0x0000
 8089834:	080401a4 	.word	0x080401a4

08089838 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8089838:	b508      	push	{r3, lr}
 808983a:	4b02      	ldr	r3, [pc, #8]	; (8089844 <network_connect+0xc>)
 808983c:	681b      	ldr	r3, [r3, #0]
 808983e:	685b      	ldr	r3, [r3, #4]
 8089840:	9301      	str	r3, [sp, #4]
 8089842:	bd08      	pop	{r3, pc}
 8089844:	080401c8 	.word	0x080401c8

08089848 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8089848:	b508      	push	{r3, lr}
 808984a:	4b02      	ldr	r3, [pc, #8]	; (8089854 <network_connecting+0xc>)
 808984c:	681b      	ldr	r3, [r3, #0]
 808984e:	689b      	ldr	r3, [r3, #8]
 8089850:	9301      	str	r3, [sp, #4]
 8089852:	bd08      	pop	{r3, pc}
 8089854:	080401c8 	.word	0x080401c8

08089858 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8089858:	b508      	push	{r3, lr}
 808985a:	4b02      	ldr	r3, [pc, #8]	; (8089864 <network_disconnect+0xc>)
 808985c:	681b      	ldr	r3, [r3, #0]
 808985e:	68db      	ldr	r3, [r3, #12]
 8089860:	9301      	str	r3, [sp, #4]
 8089862:	bd08      	pop	{r3, pc}
 8089864:	080401c8 	.word	0x080401c8

08089868 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8089868:	b508      	push	{r3, lr}
 808986a:	4b02      	ldr	r3, [pc, #8]	; (8089874 <network_ready+0xc>)
 808986c:	681b      	ldr	r3, [r3, #0]
 808986e:	691b      	ldr	r3, [r3, #16]
 8089870:	9301      	str	r3, [sp, #4]
 8089872:	bd08      	pop	{r3, pc}
 8089874:	080401c8 	.word	0x080401c8

08089878 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 8089878:	b508      	push	{r3, lr}
 808987a:	4b02      	ldr	r3, [pc, #8]	; (8089884 <network_on+0xc>)
 808987c:	681b      	ldr	r3, [r3, #0]
 808987e:	695b      	ldr	r3, [r3, #20]
 8089880:	9301      	str	r3, [sp, #4]
 8089882:	bd08      	pop	{r3, pc}
 8089884:	080401c8 	.word	0x080401c8

08089888 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 8089888:	b508      	push	{r3, lr}
 808988a:	4b02      	ldr	r3, [pc, #8]	; (8089894 <network_off+0xc>)
 808988c:	681b      	ldr	r3, [r3, #0]
 808988e:	699b      	ldr	r3, [r3, #24]
 8089890:	9301      	str	r3, [sp, #4]
 8089892:	bd08      	pop	{r3, pc}
 8089894:	080401c8 	.word	0x080401c8

08089898 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 8089898:	b508      	push	{r3, lr}
 808989a:	4b02      	ldr	r3, [pc, #8]	; (80898a4 <network_listen+0xc>)
 808989c:	681b      	ldr	r3, [r3, #0]
 808989e:	69db      	ldr	r3, [r3, #28]
 80898a0:	9301      	str	r3, [sp, #4]
 80898a2:	bd08      	pop	{r3, pc}
 80898a4:	080401c8 	.word	0x080401c8

080898a8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80898a8:	b508      	push	{r3, lr}
 80898aa:	4b02      	ldr	r3, [pc, #8]	; (80898b4 <network_listening+0xc>)
 80898ac:	681b      	ldr	r3, [r3, #0]
 80898ae:	6a1b      	ldr	r3, [r3, #32]
 80898b0:	9301      	str	r3, [sp, #4]
 80898b2:	bd08      	pop	{r3, pc}
 80898b4:	080401c8 	.word	0x080401c8

080898b8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80898b8:	b508      	push	{r3, lr}
 80898ba:	4b02      	ldr	r3, [pc, #8]	; (80898c4 <network_set_listen_timeout+0xc>)
 80898bc:	681b      	ldr	r3, [r3, #0]
 80898be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80898c0:	9301      	str	r3, [sp, #4]
 80898c2:	bd08      	pop	{r3, pc}
 80898c4:	080401c8 	.word	0x080401c8

080898c8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80898c8:	b508      	push	{r3, lr}
 80898ca:	4b02      	ldr	r3, [pc, #8]	; (80898d4 <network_get_listen_timeout+0xc>)
 80898cc:	681b      	ldr	r3, [r3, #0]
 80898ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80898d0:	9301      	str	r3, [sp, #4]
 80898d2:	bd08      	pop	{r3, pc}
 80898d4:	080401c8 	.word	0x080401c8

080898d8 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80898d8:	b508      	push	{r3, lr}
 80898da:	4b02      	ldr	r3, [pc, #8]	; (80898e4 <spark_function+0xc>)
 80898dc:	681b      	ldr	r3, [r3, #0]
 80898de:	685b      	ldr	r3, [r3, #4]
 80898e0:	9301      	str	r3, [sp, #4]
 80898e2:	bd08      	pop	{r3, pc}
 80898e4:	080401cc 	.word	0x080401cc

080898e8 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80898e8:	b508      	push	{r3, lr}
 80898ea:	4b02      	ldr	r3, [pc, #8]	; (80898f4 <spark_process+0xc>)
 80898ec:	681b      	ldr	r3, [r3, #0]
 80898ee:	689b      	ldr	r3, [r3, #8]
 80898f0:	9301      	str	r3, [sp, #4]
 80898f2:	bd08      	pop	{r3, pc}
 80898f4:	080401cc 	.word	0x080401cc

080898f8 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 80898f8:	b508      	push	{r3, lr}
 80898fa:	4b02      	ldr	r3, [pc, #8]	; (8089904 <spark_cloud_flag_connect+0xc>)
 80898fc:	681b      	ldr	r3, [r3, #0]
 80898fe:	68db      	ldr	r3, [r3, #12]
 8089900:	9301      	str	r3, [sp, #4]
 8089902:	bd08      	pop	{r3, pc}
 8089904:	080401cc 	.word	0x080401cc

08089908 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 8089908:	b508      	push	{r3, lr}
 808990a:	4b02      	ldr	r3, [pc, #8]	; (8089914 <spark_cloud_flag_connected+0xc>)
 808990c:	681b      	ldr	r3, [r3, #0]
 808990e:	695b      	ldr	r3, [r3, #20]
 8089910:	9301      	str	r3, [sp, #4]
 8089912:	bd08      	pop	{r3, pc}
 8089914:	080401cc 	.word	0x080401cc

08089918 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 8089918:	b508      	push	{r3, lr}
 808991a:	4b02      	ldr	r3, [pc, #8]	; (8089924 <spark_send_event+0xc>)
 808991c:	681b      	ldr	r3, [r3, #0]
 808991e:	6a1b      	ldr	r3, [r3, #32]
 8089920:	9301      	str	r3, [sp, #4]
 8089922:	bd08      	pop	{r3, pc}
 8089924:	080401cc 	.word	0x080401cc

08089928 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 8089928:	b508      	push	{r3, lr}
 808992a:	4b02      	ldr	r3, [pc, #8]	; (8089934 <spark_sync_time_pending+0xc>)
 808992c:	681b      	ldr	r3, [r3, #0]
 808992e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8089930:	9301      	str	r3, [sp, #4]
 8089932:	bd08      	pop	{r3, pc}
 8089934:	080401cc 	.word	0x080401cc

08089938 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8089938:	b508      	push	{r3, lr}
 808993a:	4b02      	ldr	r3, [pc, #8]	; (8089944 <spark_set_random_seed_from_cloud_handler+0xc>)
 808993c:	681b      	ldr	r3, [r3, #0]
 808993e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8089940:	9301      	str	r3, [sp, #4]
 8089942:	bd08      	pop	{r3, pc}
 8089944:	080401cc 	.word	0x080401cc

08089948 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8089948:	b508      	push	{r3, lr}
 808994a:	4b02      	ldr	r3, [pc, #8]	; (8089954 <malloc+0xc>)
 808994c:	681b      	ldr	r3, [r3, #0]
 808994e:	681b      	ldr	r3, [r3, #0]
 8089950:	9301      	str	r3, [sp, #4]
 8089952:	bd08      	pop	{r3, pc}
 8089954:	080401a0 	.word	0x080401a0

08089958 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8089958:	b508      	push	{r3, lr}
 808995a:	4b02      	ldr	r3, [pc, #8]	; (8089964 <free+0xc>)
 808995c:	681b      	ldr	r3, [r3, #0]
 808995e:	685b      	ldr	r3, [r3, #4]
 8089960:	9301      	str	r3, [sp, #4]
 8089962:	bd08      	pop	{r3, pc}
 8089964:	080401a0 	.word	0x080401a0

08089968 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 8089968:	b508      	push	{r3, lr}
 808996a:	4b02      	ldr	r3, [pc, #8]	; (8089974 <realloc+0xc>)
 808996c:	681b      	ldr	r3, [r3, #0]
 808996e:	689b      	ldr	r3, [r3, #8]
 8089970:	9301      	str	r3, [sp, #4]
 8089972:	bd08      	pop	{r3, pc}
 8089974:	080401a0 	.word	0x080401a0

08089978 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 8089978:	b508      	push	{r3, lr}
 808997a:	4b02      	ldr	r3, [pc, #8]	; (8089984 <sprintf+0xc>)
 808997c:	681b      	ldr	r3, [r3, #0]
 808997e:	68db      	ldr	r3, [r3, #12]
 8089980:	9301      	str	r3, [sp, #4]
 8089982:	bd08      	pop	{r3, pc}
 8089984:	080401a0 	.word	0x080401a0

08089988 <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 8089988:	b508      	push	{r3, lr}
 808998a:	4b02      	ldr	r3, [pc, #8]	; (8089994 <siprintf+0xc>)
 808998c:	681b      	ldr	r3, [r3, #0]
 808998e:	691b      	ldr	r3, [r3, #16]
 8089990:	9301      	str	r3, [sp, #4]
 8089992:	bd08      	pop	{r3, pc}
 8089994:	080401a0 	.word	0x080401a0

08089998 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 8089998:	b508      	push	{r3, lr}
 808999a:	4b02      	ldr	r3, [pc, #8]	; (80899a4 <siscanf+0xc>)
 808999c:	681b      	ldr	r3, [r3, #0]
 808999e:	699b      	ldr	r3, [r3, #24]
 80899a0:	9301      	str	r3, [sp, #4]
 80899a2:	bd08      	pop	{r3, pc}
 80899a4:	080401a0 	.word	0x080401a0

080899a8 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80899a8:	b508      	push	{r3, lr}
 80899aa:	4b02      	ldr	r3, [pc, #8]	; (80899b4 <snprintf+0xc>)
 80899ac:	681b      	ldr	r3, [r3, #0]
 80899ae:	69db      	ldr	r3, [r3, #28]
 80899b0:	9301      	str	r3, [sp, #4]
 80899b2:	bd08      	pop	{r3, pc}
 80899b4:	080401a0 	.word	0x080401a0

080899b8 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
 80899b8:	b508      	push	{r3, lr}
 80899ba:	4b02      	ldr	r3, [pc, #8]	; (80899c4 <sniprintf+0xc>)
 80899bc:	681b      	ldr	r3, [r3, #0]
 80899be:	6a1b      	ldr	r3, [r3, #32]
 80899c0:	9301      	str	r3, [sp, #4]
 80899c2:	bd08      	pop	{r3, pc}
 80899c4:	080401a0 	.word	0x080401a0

080899c8 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80899c8:	b508      	push	{r3, lr}
 80899ca:	4b02      	ldr	r3, [pc, #8]	; (80899d4 <vsnprintf+0xc>)
 80899cc:	681b      	ldr	r3, [r3, #0]
 80899ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80899d0:	9301      	str	r3, [sp, #4]
 80899d2:	bd08      	pop	{r3, pc}
 80899d4:	080401a0 	.word	0x080401a0

080899d8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80899d8:	b508      	push	{r3, lr}
 80899da:	4b02      	ldr	r3, [pc, #8]	; (80899e4 <abort+0xc>)
 80899dc:	681b      	ldr	r3, [r3, #0]
 80899de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80899e0:	9301      	str	r3, [sp, #4]
 80899e2:	bd08      	pop	{r3, pc}
 80899e4:	080401a0 	.word	0x080401a0

080899e8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80899e8:	b508      	push	{r3, lr}
 80899ea:	4b02      	ldr	r3, [pc, #8]	; (80899f4 <_malloc_r+0xc>)
 80899ec:	681b      	ldr	r3, [r3, #0]
 80899ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80899f0:	9301      	str	r3, [sp, #4]
 80899f2:	bd08      	pop	{r3, pc}
 80899f4:	080401a0 	.word	0x080401a0

080899f8 <_ZN4PMIC5beginEv>:
 * Description    : Initializes the I2C for the PMIC module
 * Input          : NONE
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
 80899f8:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80899fa:	f002 fa53 	bl	808bea4 <_Z20__fetch_global_Wire3v>
 * Input          : NONE
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
 80899fe:	f002 f811 	bl	808ba24 <_ZN7TwoWire9isEnabledEv>
 8089a02:	b918      	cbnz	r0, 8089a0c <_ZN4PMIC5beginEv+0x14>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8089a04:	f002 fa4e 	bl	808bea4 <_Z20__fetch_global_Wire3v>
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
 8089a08:	f001 ffe2 	bl	808b9d0 <_ZN7TwoWire5beginEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8089a0c:	f002 fa4a 	bl	808bea4 <_Z20__fetch_global_Wire3v>
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
    }
    return pmicWireInstance()->isEnabled();
}
 8089a10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
    }
    return pmicWireInstance()->isEnabled();
 8089a14:	f002 b806 	b.w	808ba24 <_ZN7TwoWire9isEnabledEv>

08089a18 <_ZN4PMIC4lockEv>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
 8089a18:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8089a1a:	f002 fa43 	bl	808bea4 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}
 8089a1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
 8089a22:	f002 b803 	b.w	808ba2c <_ZN7TwoWire4lockEv>

08089a26 <_ZN4PMICC1Eb>:

} // anonymous

#include <mutex>

PMIC::PMIC(bool _lock) :
 8089a26:	b510      	push	{r4, lr}
 8089a28:	4604      	mov	r4, r0
    lock_(_lock)
 8089a2a:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
 8089a2c:	b109      	cbz	r1, 8089a32 <_ZN4PMICC1Eb+0xc>
        lock();
 8089a2e:	f7ff fff3 	bl	8089a18 <_ZN4PMIC4lockEv>
    }
}
 8089a32:	4620      	mov	r0, r4
 8089a34:	bd10      	pop	{r4, pc}

08089a36 <_ZN4PMIC6unlockEv>:

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
 8089a36:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8089a38:	f002 fa34 	bl	808bea4 <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
}
 8089a3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
 8089a40:	f001 bffd 	b.w	808ba3e <_ZN7TwoWire6unlockEv>

08089a44 <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 8089a44:	b510      	push	{r4, lr}
{
    if (lock_) {
 8089a46:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 8089a48:	4604      	mov	r4, r0
{
    if (lock_) {
 8089a4a:	b10b      	cbz	r3, 8089a50 <_ZN4PMICD1Ev+0xc>
        unlock();
 8089a4c:	f7ff fff3 	bl	8089a36 <_ZN4PMIC6unlockEv>
    }
}
 8089a50:	4620      	mov	r0, r4
 8089a52:	bd10      	pop	{r4, pc}

08089a54 <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 8089a54:	b510      	push	{r4, lr}
 8089a56:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 8089a58:	6800      	ldr	r0, [r0, #0]
 8089a5a:	f7ff ffec 	bl	8089a36 <_ZN4PMIC6unlockEv>
 8089a5e:	4620      	mov	r0, r4
 8089a60:	bd10      	pop	{r4, pc}

08089a62 <_ZN4PMIC12readRegisterEh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
 8089a62:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8089a64:	ac02      	add	r4, sp, #8
 8089a66:	460d      	mov	r5, r1
 8089a68:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 8089a6c:	f7ff ffd4 	bl	8089a18 <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8089a70:	f002 fa18 	bl	808bea4 <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 8089a74:	216b      	movs	r1, #107	; 0x6b
 8089a76:	f001 ffcb 	bl	808ba10 <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8089a7a:	f002 fa13 	bl	808bea4 <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
 8089a7e:	6803      	ldr	r3, [r0, #0]
 8089a80:	4629      	mov	r1, r5
 8089a82:	689b      	ldr	r3, [r3, #8]
 8089a84:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8089a86:	f002 fa0d 	bl	808bea4 <_Z20__fetch_global_Wire3v>
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);
 8089a8a:	2101      	movs	r1, #1
 8089a8c:	f001 ffc3 	bl	808ba16 <_ZN7TwoWire15endTransmissionEh>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8089a90:	f002 fa08 	bl	808bea4 <_Z20__fetch_global_Wire3v>
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
 8089a94:	2301      	movs	r3, #1
 8089a96:	461a      	mov	r2, r3
 8089a98:	216b      	movs	r1, #107	; 0x6b
 8089a9a:	f001 ffb0 	bl	808b9fe <_ZN7TwoWire11requestFromEiii>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8089a9e:	f002 fa01 	bl	808bea4 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
 8089aa2:	6803      	ldr	r3, [r0, #0]
 8089aa4:	695b      	ldr	r3, [r3, #20]
 8089aa6:	4798      	blx	r3
 8089aa8:	4605      	mov	r5, r0
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
 8089aaa:	4620      	mov	r0, r4
 8089aac:	f7ff ffd2 	bl	8089a54 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
    return DATA;
}
 8089ab0:	b2e8      	uxtb	r0, r5
 8089ab2:	b003      	add	sp, #12
 8089ab4:	bd30      	pop	{r4, r5, pc}

08089ab6 <_ZN4PMIC23readInputSourceRegisterEv>:
 * Input          : NONE
 * Return         :
 *******************************************************************************/
byte PMIC::readInputSourceRegister(void) {

    return readRegister(INPUT_SOURCE_REGISTER);
 8089ab6:	2100      	movs	r1, #0
 8089ab8:	f7ff bfd3 	b.w	8089a62 <_ZN4PMIC12readRegisterEh>

08089abc <_ZN4PMIC20getInputCurrentLimitEv>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
uint16_t PMIC::getInputCurrentLimit(void) {
 8089abc:	b508      	push	{r3, lr}
        1200,
        1500,
        2000,
        3000
    };
    byte raw = readInputSourceRegister();
 8089abe:	f7ff fffa 	bl	8089ab6 <_ZN4PMIC23readInputSourceRegisterEv>
    raw &= 0x07;
    return mapping[raw];
}
 8089ac2:	4b03      	ldr	r3, [pc, #12]	; (8089ad0 <_ZN4PMIC20getInputCurrentLimitEv+0x14>)
        2000,
        3000
    };
    byte raw = readInputSourceRegister();
    raw &= 0x07;
    return mapping[raw];
 8089ac4:	f000 0007 	and.w	r0, r0, #7
}
 8089ac8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8089acc:	bd08      	pop	{r3, pc}
 8089ace:	bf00      	nop
 8089ad0:	08092ffc 	.word	0x08092ffc

08089ad4 <_ZN4PMIC16getChargeCurrentEv>:
 * Return         :
 *******************************************************************************/
//TO DO: Return more meaningful value
byte PMIC::getChargeCurrent(void) {

    return readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 8089ad4:	2102      	movs	r1, #2
 8089ad6:	f7ff bfc4 	b.w	8089a62 <_ZN4PMIC12readRegisterEh>

08089ada <_ZN4PMIC15getSystemStatusEv>:
 * Return         :
 *******************************************************************************/
byte PMIC::getSystemStatus() {

    byte DATA = 0;
    DATA = readRegister(SYSTEM_STATUS_REGISTER);
 8089ada:	2108      	movs	r1, #8
 8089adc:	f7ff bfc1 	b.w	8089a62 <_ZN4PMIC12readRegisterEh>

08089ae0 <_ZN4PMIC8getFaultEv>:
 * Return         :
 *******************************************************************************/
byte PMIC::getFault() {

    byte DATA = 0;
    DATA = readRegister(FAULT_REGISTER);
 8089ae0:	2109      	movs	r1, #9
 8089ae2:	f7ff bfbe 	b.w	8089a62 <_ZN4PMIC12readRegisterEh>

08089ae6 <_ZN4PMIC13writeRegisterEhh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
 8089ae6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8089ae8:	ac02      	add	r4, sp, #8
 8089aea:	4615      	mov	r5, r2
 8089aec:	460e      	mov	r6, r1
 8089aee:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 8089af2:	f7ff ff91 	bl	8089a18 <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8089af6:	f002 f9d5 	bl	808bea4 <_Z20__fetch_global_Wire3v>
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 8089afa:	216b      	movs	r1, #107	; 0x6b
 8089afc:	f001 ff88 	bl	808ba10 <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8089b00:	f002 f9d0 	bl	808bea4 <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
 8089b04:	6803      	ldr	r3, [r0, #0]
 8089b06:	4631      	mov	r1, r6
 8089b08:	689b      	ldr	r3, [r3, #8]
 8089b0a:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8089b0c:	f002 f9ca 	bl	808bea4 <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
 8089b10:	6803      	ldr	r3, [r0, #0]
 8089b12:	4629      	mov	r1, r5
 8089b14:	689b      	ldr	r3, [r3, #8]
 8089b16:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8089b18:	f002 f9c4 	bl	808bea4 <_Z20__fetch_global_Wire3v>
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
 8089b1c:	2101      	movs	r1, #1
 8089b1e:	f001 ff7a 	bl	808ba16 <_ZN7TwoWire15endTransmissionEh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
 8089b22:	4620      	mov	r0, r4
 8089b24:	f7ff ff96 	bl	8089a54 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}
 8089b28:	b002      	add	sp, #8
 8089b2a:	bd70      	pop	{r4, r5, r6, pc}

08089b2c <_ZN4PMIC20setInputCurrentLimitEt>:
 * Function Name  : setInputCurrentLimit
 * Description    : Sets the input current limit for the PMIC
 * Input          : 100,150,500,900,1200,1500,2000,3000 (mAmp)
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
 8089b2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8089b2e:	4604      	mov	r4, r0
 8089b30:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8089b32:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8089b34:	f7ff ff70 	bl	8089a18 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
 8089b38:	2100      	movs	r1, #0
 8089b3a:	4620      	mov	r0, r4
 8089b3c:	f7ff ff91 	bl	8089a62 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b11111000;

    switch (current) {
 8089b40:	f5b5 7f61 	cmp.w	r5, #900	; 0x384
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b11111000;
 8089b44:	f000 02f8 	and.w	r2, r0, #248	; 0xf8

    switch (current) {
 8089b48:	d023      	beq.n	8089b92 <_ZN4PMIC20setInputCurrentLimitEt+0x66>
 8089b4a:	d807      	bhi.n	8089b5c <_ZN4PMIC20setInputCurrentLimitEt+0x30>
 8089b4c:	2d96      	cmp	r5, #150	; 0x96
 8089b4e:	d01a      	beq.n	8089b86 <_ZN4PMIC20setInputCurrentLimitEt+0x5a>
 8089b50:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 8089b54:	d01a      	beq.n	8089b8c <_ZN4PMIC20setInputCurrentLimitEt+0x60>
 8089b56:	2d64      	cmp	r5, #100	; 0x64
 8089b58:	d129      	bne.n	8089bae <_ZN4PMIC20setInputCurrentLimitEt+0x82>
 8089b5a:	e022      	b.n	8089ba2 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
 8089b5c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8089b60:	429d      	cmp	r5, r3
 8089b62:	d019      	beq.n	8089b98 <_ZN4PMIC20setInputCurrentLimitEt+0x6c>
 8089b64:	d805      	bhi.n	8089b72 <_ZN4PMIC20setInputCurrentLimitEt+0x46>
 8089b66:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 8089b6a:	d120      	bne.n	8089bae <_ZN4PMIC20setInputCurrentLimitEt+0x82>
        case 900:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
        break;

        case 1200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
 8089b6c:	f042 0204 	orr.w	r2, r2, #4
 8089b70:	e017      	b.n	8089ba2 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b11111000;

    switch (current) {
 8089b72:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 8089b76:	d012      	beq.n	8089b9e <_ZN4PMIC20setInputCurrentLimitEt+0x72>
 8089b78:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8089b7c:	429d      	cmp	r5, r3
 8089b7e:	d116      	bne.n	8089bae <_ZN4PMIC20setInputCurrentLimitEt+0x82>
        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
        break;

        case 3000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
 8089b80:	f042 0207 	orr.w	r2, r2, #7
 8089b84:	e00d      	b.n	8089ba2 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        case 100:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000000));
        break;

        case 150:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000001));
 8089b86:	f042 0201 	orr.w	r2, r2, #1
 8089b8a:	e00a      	b.n	8089ba2 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 500:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000010));
 8089b8c:	f042 0202 	orr.w	r2, r2, #2
 8089b90:	e007      	b.n	8089ba2 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 900:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
 8089b92:	f042 0203 	orr.w	r2, r2, #3
 8089b96:	e004      	b.n	8089ba2 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        case 1200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
        break;

        case 1500:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
 8089b98:	f042 0205 	orr.w	r2, r2, #5
 8089b9c:	e001      	b.n	8089ba2 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
 8089b9e:	f042 0206 	orr.w	r2, r2, #6
 8089ba2:	4620      	mov	r0, r4
 8089ba4:	2100      	movs	r1, #0
 8089ba6:	f7ff ff9e 	bl	8089ae6 <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 8089baa:	2401      	movs	r4, #1
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
        break;

        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
        break;
 8089bac:	e000      	b.n	8089bb0 <_ZN4PMIC20setInputCurrentLimitEt+0x84>
        case 3000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
        break;

        default:
        return 0; // return error since the value passed didn't match
 8089bae:	2400      	movs	r4, #0
 * Description    : Sets the input current limit for the PMIC
 * Input          : 100,150,500,900,1200,1500,2000,3000 (mAmp)
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
    std::lock_guard<PMIC> l(*this);
 8089bb0:	a801      	add	r0, sp, #4
 8089bb2:	f7ff ff4f 	bl	8089a54 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 8089bb6:	4620      	mov	r0, r4
 8089bb8:	b003      	add	sp, #12
 8089bba:	bd30      	pop	{r4, r5, pc}

08089bbc <_ZN4PMIC10disableOTGEv>:
 * Function Name  : disableOTG
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableOTG(void) {
 8089bbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8089bbe:	4605      	mov	r5, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8089bc0:	ac02      	add	r4, sp, #8
 8089bc2:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 8089bc6:	f7ff ff27 	bl	8089a18 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
 8089bca:	2101      	movs	r1, #1
 8089bcc:	4628      	mov	r0, r5
 8089bce:	f7ff ff48 	bl	8089a62 <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
 8089bd2:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
    DATA = DATA | 0b00010000;
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
 8089bd6:	f042 0210 	orr.w	r2, r2, #16
 8089bda:	2101      	movs	r1, #1
 8089bdc:	4628      	mov	r0, r5
 8089bde:	f7ff ff82 	bl	8089ae6 <_ZN4PMIC13writeRegisterEhh>
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableOTG(void) {
    std::lock_guard<PMIC> l(*this);
 8089be2:	4620      	mov	r0, r4
 8089be4:	f7ff ff36 	bl	8089a54 <_ZNSt10lock_guardI4PMICED1Ev>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
    DATA = DATA & 0b11001111;
    DATA = DATA | 0b00010000;
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
    return 1;
}
 8089be8:	2001      	movs	r0, #1
 8089bea:	b003      	add	sp, #12
 8089bec:	bd30      	pop	{r4, r5, pc}

08089bee <_ZN4PMIC14enableChargingEv>:
 8089bee:	f7ff bfe5 	b.w	8089bbc <_ZN4PMIC10disableOTGEv>

08089bf2 <_ZN4PMIC16setChargeCurrentEbbbbbb>:
                    For example,
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
 8089bf2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8089bf4:	460c      	mov	r4, r1
 8089bf6:	4617      	mov	r7, r2
 8089bf8:	4605      	mov	r5, r0
 8089bfa:	461e      	mov	r6, r3
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8089bfc:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8089bfe:	f7ff ff0b 	bl	8089a18 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte current = 0;
    if (bit7) current = current | 0b10000000;
 8089c02:	2c00      	cmp	r4, #0
 8089c04:	bf0c      	ite	eq
 8089c06:	2400      	moveq	r4, #0
 8089c08:	2480      	movne	r4, #128	; 0x80
    if (bit6) current = current | 0b01000000;
 8089c0a:	b117      	cbz	r7, 8089c12 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x20>
 8089c0c:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8089c10:	b2e4      	uxtb	r4, r4
    if (bit5) current = current | 0b00100000;
 8089c12:	b10e      	cbz	r6, 8089c18 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x26>
 8089c14:	f044 0420 	orr.w	r4, r4, #32
    if (bit4) current = current | 0b00010000;
 8089c18:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8089c1c:	b10b      	cbz	r3, 8089c22 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x30>
 8089c1e:	f044 0410 	orr.w	r4, r4, #16
    if (bit3) current = current | 0b00001000;
 8089c22:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8089c26:	b10b      	cbz	r3, 8089c2c <_ZN4PMIC16setChargeCurrentEbbbbbb+0x3a>
 8089c28:	f044 0408 	orr.w	r4, r4, #8
    if (bit2) current = current | 0b00000100;
 8089c2c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8089c30:	b10b      	cbz	r3, 8089c36 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x44>
 8089c32:	f044 0404 	orr.w	r4, r4, #4

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 8089c36:	2102      	movs	r1, #2
 8089c38:	4628      	mov	r0, r5
 8089c3a:	f7ff ff12 	bl	8089a62 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
 8089c3e:	f000 0201 	and.w	r2, r0, #1
 8089c42:	4322      	orrs	r2, r4
 8089c44:	2102      	movs	r1, #2
 8089c46:	4628      	mov	r0, r5
 8089c48:	f7ff ff4d 	bl	8089ae6 <_ZN4PMIC13writeRegisterEhh>
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
    std::lock_guard<PMIC> l(*this);
 8089c4c:	a801      	add	r0, sp, #4
 8089c4e:	f7ff ff01 	bl	8089a54 <_ZNSt10lock_guardI4PMICED1Ev>

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
    return 1;
}
 8089c52:	2001      	movs	r0, #1
 8089c54:	b003      	add	sp, #12
 8089c56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08089c58 <_ZN4PMIC16setChargeVoltageEt>:
                    4208 is the default
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
 8089c58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8089c5a:	4604      	mov	r4, r0
 8089c5c:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8089c5e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8089c60:	f7ff feda 	bl	8089a18 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
 8089c64:	2104      	movs	r1, #4
 8089c66:	4620      	mov	r0, r4
 8089c68:	f7ff fefb 	bl	8089a62 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b000000011;

    switch (voltage) {
 8089c6c:	f241 0310 	movw	r3, #4112	; 0x1010
 8089c70:	429d      	cmp	r5, r3
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
    byte mask = DATA & 0b000000011;
 8089c72:	f000 0203 	and.w	r2, r0, #3

    switch (voltage) {
 8089c76:	d006      	beq.n	8089c86 <_ZN4PMIC16setChargeVoltageEt+0x2e>
 8089c78:	f241 0370 	movw	r3, #4208	; 0x1070
 8089c7c:	429d      	cmp	r5, r3
 8089c7e:	d10a      	bne.n	8089c96 <_ZN4PMIC16setChargeVoltageEt+0x3e>
        case 4112:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
 8089c80:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
 8089c84:	e001      	b.n	8089c8a <_ZN4PMIC16setChargeVoltageEt+0x32>
    byte mask = DATA & 0b000000011;

    switch (voltage) {

        case 4112:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
 8089c86:	f042 0298 	orr.w	r2, r2, #152	; 0x98
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
 8089c8a:	4620      	mov	r0, r4
 8089c8c:	2104      	movs	r1, #4
 8089c8e:	f7ff ff2a 	bl	8089ae6 <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 8089c92:	2401      	movs	r4, #1
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
        break;
 8089c94:	e000      	b.n	8089c98 <_ZN4PMIC16setChargeVoltageEt+0x40>

        default:
        return 0; // return error since the value passed didn't match
 8089c96:	2400      	movs	r4, #0
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
 8089c98:	a801      	add	r0, sp, #4
 8089c9a:	f7ff fedb 	bl	8089a54 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 8089c9e:	4620      	mov	r0, r4
 8089ca0:	b003      	add	sp, #12
 8089ca2:	bd30      	pop	{r4, r5, pc}

08089ca4 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 8089ca4:	4770      	bx	lr

08089ca6 <_ZN8SPIClassD0Ev>:
 8089ca6:	b510      	push	{r4, lr}
 8089ca8:	4604      	mov	r4, r0
 8089caa:	2110      	movs	r1, #16
 8089cac:	f002 f91f 	bl	808beee <_ZdlPvj>
 8089cb0:	4620      	mov	r0, r4
 8089cb2:	bd10      	pop	{r4, pc}

08089cb4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 8089cb4:	b570      	push	{r4, r5, r6, lr}
 8089cb6:	4604      	mov	r4, r0
 8089cb8:	460e      	mov	r6, r1
 8089cba:	4b07      	ldr	r3, [pc, #28]	; (8089cd8 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 8089cbc:	2500      	movs	r5, #0
 8089cbe:	6003      	str	r3, [r0, #0]
 8089cc0:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 8089cc4:	f7ff fc4a 	bl	808955c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 8089cc8:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 8089cca:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 8089ccc:	f7ff fbce 	bl	808946c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 8089cd0:	60a5      	str	r5, [r4, #8]
}
 8089cd2:	4620      	mov	r0, r4
 8089cd4:	bd70      	pop	{r4, r5, r6, pc}
 8089cd6:	bf00      	nop
 8089cd8:	08093014 	.word	0x08093014

08089cdc <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 8089cdc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8089ce0:	7900      	ldrb	r0, [r0, #4]
 8089ce2:	f7ff bb9b 	b.w	808941c <HAL_SPI_Begin>

08089ce6 <_ZN8SPIClass5beginEt>:
}

void SPIClass::begin(uint16_t ss_pin)
{
  if (ss_pin >= TOTAL_PINS)
 8089ce6:	292e      	cmp	r1, #46	; 0x2e
 8089ce8:	d802      	bhi.n	8089cf0 <_ZN8SPIClass5beginEt+0xa>
  {
    return;
  }

  HAL_SPI_Begin(_spi, ss_pin);
 8089cea:	7900      	ldrb	r0, [r0, #4]
 8089cec:	f7ff bb96 	b.w	808941c <HAL_SPI_Begin>
 8089cf0:	4770      	bx	lr

08089cf2 <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 8089cf2:	7900      	ldrb	r0, [r0, #4]
 8089cf4:	f7ff bb9a 	b.w	808942c <HAL_SPI_Set_Bit_Order>

08089cf8 <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
 8089cf8:	7900      	ldrb	r0, [r0, #4]
 8089cfa:	f7ff bb9f 	b.w	808943c <HAL_SPI_Set_Data_Mode>
	...

08089d00 <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 8089d00:	4a05      	ldr	r2, [pc, #20]	; (8089d18 <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
 8089d02:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 8089d04:	5c99      	ldrb	r1, [r3, r2]
 8089d06:	4281      	cmp	r1, r0
 8089d08:	d002      	beq.n	8089d10 <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
 8089d0a:	3301      	adds	r3, #1
 8089d0c:	2b08      	cmp	r3, #8
 8089d0e:	d1f9      	bne.n	8089d04 <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
 8089d10:	1c58      	adds	r0, r3, #1
}
 8089d12:	b2c0      	uxtb	r0, r0
 8089d14:	4770      	bx	lr
 8089d16:	bf00      	nop
 8089d18:	0809301c 	.word	0x0809301c

08089d1c <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 8089d1c:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 8089d1e:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 8089d20:	6018      	str	r0, [r3, #0]
 8089d22:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 8089d24:	6818      	ldr	r0, [r3, #0]
 8089d26:	b2e5      	uxtb	r5, r4
 8089d28:	4288      	cmp	r0, r1
 8089d2a:	d906      	bls.n	8089d3a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 8089d2c:	3401      	adds	r4, #1
 8089d2e:	2c08      	cmp	r4, #8
 8089d30:	d002      	beq.n	8089d38 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 8089d32:	0840      	lsrs	r0, r0, #1
 8089d34:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 8089d36:	e7f5      	b.n	8089d24 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 8089d38:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 8089d3a:	4b02      	ldr	r3, [pc, #8]	; (8089d44 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 8089d3c:	5d5b      	ldrb	r3, [r3, r5]
 8089d3e:	7013      	strb	r3, [r2, #0]
 8089d40:	bd30      	pop	{r4, r5, pc}
 8089d42:	bf00      	nop
 8089d44:	0809301c 	.word	0x0809301c

08089d48 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 8089d48:	b570      	push	{r4, r5, r6, lr}
 8089d4a:	4604      	mov	r4, r0
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
 8089d4c:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 8089d50:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
 8089d52:	7906      	ldrb	r6, [r0, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 8089d54:	2214      	movs	r2, #20
 8089d56:	2100      	movs	r1, #0
 8089d58:	a803      	add	r0, sp, #12
 8089d5a:	f003 fd8f 	bl	808d87c <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 8089d5e:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 8089d60:	a903      	add	r1, sp, #12
 8089d62:	4630      	mov	r0, r6
 8089d64:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 8089d66:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
 8089d6a:	f7ff fb8f 	bl	808948c <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
 8089d6e:	ab02      	add	r3, sp, #8
 8089d70:	f10d 0207 	add.w	r2, sp, #7
 8089d74:	4629      	mov	r1, r5
 8089d76:	9804      	ldr	r0, [sp, #16]
 8089d78:	f7ff ffd0 	bl	8089d1c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
 8089d7c:	7920      	ldrb	r0, [r4, #4]
 8089d7e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8089d82:	f7ff fb63 	bl	808944c <HAL_SPI_Set_Clock_Divider>
    return clock;
}
 8089d86:	9802      	ldr	r0, [sp, #8]
 8089d88:	b008      	add	sp, #32
 8089d8a:	bd70      	pop	{r4, r5, r6, pc}

08089d8c <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 8089d8c:	b538      	push	{r3, r4, r5, lr}
 8089d8e:	4604      	mov	r4, r0
    if (dividerReference)
 8089d90:	68a5      	ldr	r5, [r4, #8]
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 8089d92:	4608      	mov	r0, r1
    if (dividerReference)
 8089d94:	b14d      	cbz	r5, 8089daa <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
 8089d96:	f7ff ffb3 	bl	8089d00 <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 8089d9a:	2201      	movs	r2, #1
 8089d9c:	fa25 f100 	lsr.w	r1, r5, r0
 8089da0:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
 8089da2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 8089da6:	f7ff bfcf 	b.w	8089d48 <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 8089daa:	7920      	ldrb	r0, [r4, #4]
    }
}
 8089dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 8089db0:	f7ff bb4c 	b.w	808944c <HAL_SPI_Set_Clock_Divider>

08089db4 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 8089db4:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 8089db6:	7900      	ldrb	r0, [r0, #4]
 8089db8:	f7ff fb50 	bl	808945c <HAL_SPI_Send_Receive_Data>
}
 8089dbc:	b2c0      	uxtb	r0, r0
 8089dbe:	bd08      	pop	{r3, pc}

08089dc0 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 8089dc0:	b530      	push	{r4, r5, lr}
 8089dc2:	b087      	sub	sp, #28
 8089dc4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8089dc6:	4604      	mov	r4, r0
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
 8089dc8:	7900      	ldrb	r0, [r0, #4]
 8089dca:	9500      	str	r5, [sp, #0]
 8089dcc:	f7ff fb66 	bl	808949c <HAL_SPI_DMA_Transfer>
  if (user_callback == NULL) {
 8089dd0:	b93d      	cbnz	r5, 8089de2 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    HAL_SPI_TransferStatus st;
    do {
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
 8089dd2:	a902      	add	r1, sp, #8
 8089dd4:	7920      	ldrb	r0, [r4, #4]
 8089dd6:	f7ff fb69 	bl	80894ac <HAL_SPI_DMA_Transfer_Status>
void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
  if (user_callback == NULL) {
    HAL_SPI_TransferStatus st;
    do {
 8089dda:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8089dde:	07db      	lsls	r3, r3, #31
 8089de0:	d4f7      	bmi.n	8089dd2 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
    } while(st.transfer_ongoing);
  }
}
 8089de2:	b007      	add	sp, #28
 8089de4:	bd30      	pop	{r4, r5, pc}

08089de6 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 8089de6:	7900      	ldrb	r0, [r0, #4]
 8089de8:	f7ff bb48 	b.w	808947c <HAL_SPI_Is_Enabled>

08089dec <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
 8089dec:	4601      	mov	r1, r0
 8089dee:	2200      	movs	r2, #0
 8089df0:	208c      	movs	r0, #140	; 0x8c
 8089df2:	f7ff bbab 	b.w	808954c <HAL_Core_System_Reset_Ex>

08089df6 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
 8089df6:	2000      	movs	r0, #0
 8089df8:	f7ff bff8 	b.w	8089dec <_ZN11SystemClass5resetEm>

08089dfc <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 8089dfc:	b510      	push	{r4, lr}
 8089dfe:	2400      	movs	r4, #0
 8089e00:	7004      	strb	r4, [r0, #0]
 8089e02:	8044      	strh	r4, [r0, #2]
 8089e04:	f64f 74ff 	movw	r4, #65535	; 0xffff
    if (ret > 0) {
 8089e08:	2900      	cmp	r1, #0
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 8089e0a:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
 8089e0c:	dd07      	ble.n	8089e1e <_ZN11SleepResultC1EiPKtj+0x22>
        // pin
        --ret;
        if ((size_t)ret < pinsSize) {
 8089e0e:	3901      	subs	r1, #1
 8089e10:	4299      	cmp	r1, r3
 8089e12:	d209      	bcs.n	8089e28 <_ZN11SleepResultC1EiPKtj+0x2c>
            pin_ = pins[ret];
 8089e14:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 8089e18:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
 8089e1a:	2301      	movs	r3, #1
 8089e1c:	e001      	b.n	8089e22 <_ZN11SleepResultC1EiPKtj+0x26>
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
 8089e1e:	d102      	bne.n	8089e26 <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
 8089e20:	2302      	movs	r3, #2
 8089e22:	7003      	strb	r3, [r0, #0]
 8089e24:	bd10      	pop	{r4, pc}
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
 8089e26:	8041      	strh	r1, [r0, #2]
    }
}
 8089e28:	bd10      	pop	{r4, pc}
	...

08089e2c <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 8089e2c:	b570      	push	{r4, r5, r6, lr}
 8089e2e:	460d      	mov	r5, r1
 8089e30:	4616      	mov	r6, r2
 8089e32:	b086      	sub	sp, #24
 8089e34:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 8089e36:	2300      	movs	r3, #0
 8089e38:	9302      	str	r3, [sp, #8]
 8089e3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 8089e3c:	4604      	mov	r4, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 8089e3e:	9301      	str	r3, [sp, #4]
 8089e40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8089e42:	4631      	mov	r1, r6
 8089e44:	9300      	str	r3, [sp, #0]
 8089e46:	4628      	mov	r0, r5
 8089e48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8089e4a:	f7ff fceb 	bl	8089824 <system_sleep_pins>
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
 8089e4e:	4633      	mov	r3, r6
 8089e50:	462a      	mov	r2, r5
 8089e52:	4601      	mov	r1, r0
 8089e54:	a804      	add	r0, sp, #16
 8089e56:	f7ff ffd1 	bl	8089dfc <_ZN11SleepResultC1EiPKtj>
 8089e5a:	4b06      	ldr	r3, [pc, #24]	; (8089e74 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
 8089e5c:	9804      	ldr	r0, [sp, #16]
 8089e5e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8089e62:	6018      	str	r0, [r3, #0]
    return System.sleepResult_;
}
 8089e64:	4620      	mov	r0, r4
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
 8089e66:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
 8089e68:	681a      	ldr	r2, [r3, #0]
 8089e6a:	889b      	ldrh	r3, [r3, #4]
 8089e6c:	6022      	str	r2, [r4, #0]
 8089e6e:	80a3      	strh	r3, [r4, #4]
}
 8089e70:	b006      	add	sp, #24
 8089e72:	bd70      	pop	{r4, r5, r6, pc}
 8089e74:	20000bce 	.word	0x20000bce

08089e78 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8089e78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8089e7c:	4b03      	ldr	r3, [pc, #12]	; (8089e8c <_GLOBAL__sub_I_System+0x14>)
 8089e7e:	2000      	movs	r0, #0
 8089e80:	7018      	strb	r0, [r3, #0]
 8089e82:	8058      	strh	r0, [r3, #2]
 8089e84:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8089e86:	f7ff bc79 	b.w	808977c <set_system_mode>
 8089e8a:	bf00      	nop
 8089e8c:	20000bce 	.word	0x20000bce

08089e90 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 8089e90:	b510      	push	{r4, lr}
 8089e92:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 8089e94:	f004 fa72 	bl	808e37c <strlen>
 8089e98:	3801      	subs	r0, #1
 8089e9a:	1823      	adds	r3, r4, r0
 8089e9c:	4620      	mov	r0, r4
	while(i<j){
 8089e9e:	4298      	cmp	r0, r3
 8089ea0:	d206      	bcs.n	8089eb0 <_Z11str_reversePc+0x20>
		c = *i;
 8089ea2:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 8089ea4:	7819      	ldrb	r1, [r3, #0]
 8089ea6:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 8089eaa:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 8089eae:	e7f6      	b.n	8089e9e <_Z11str_reversePc+0xe>
 8089eb0:	bd10      	pop	{r4, pc}

08089eb2 <ltoa>:
{
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
 8089eb2:	1e93      	subs	r3, r2, #2
            base = 10;                    /* can only use 0-9, A-Z        */
 8089eb4:	2b23      	cmp	r3, #35	; 0x23



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
 8089eb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8089eba:	4615      	mov	r5, r2
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
 8089ebc:	bf34      	ite	cc
 8089ebe:	4615      	movcc	r5, r2
 8089ec0:	250a      	movcs	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
 8089ec2:	b08c      	sub	sp, #48	; 0x30
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
 8089ec4:	2300      	movs	r3, #0

      if (10 == base && N < 0L)
 8089ec6:	2d0a      	cmp	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
 8089ec8:	460c      	mov	r4, r1
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
 8089eca:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c

      if (10 == base && N < 0L)
 8089ece:	d107      	bne.n	8089ee0 <ltoa+0x2e>
 8089ed0:	4298      	cmp	r0, r3
 8089ed2:	da05      	bge.n	8089ee0 <ltoa+0x2e>
      {
            *head++ = '-';
 8089ed4:	232d      	movs	r3, #45	; 0x2d
 8089ed6:	f101 0801 	add.w	r8, r1, #1
 8089eda:	700b      	strb	r3, [r1, #0]
            uarg    = -N;
 8089edc:	4240      	negs	r0, r0
 8089ede:	e001      	b.n	8089ee4 <ltoa+0x32>
      }
      else  uarg = N;

      if (uarg)
 8089ee0:	b1a8      	cbz	r0, 8089f0e <ltoa+0x5c>
 8089ee2:	46a0      	mov	r8, r4
 8089ee4:	f10d 062b 	add.w	r6, sp, #43	; 0x2b
 8089ee8:	2701      	movs	r7, #1
      {
            for (i = 1; uarg; ++i)
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
 8089eea:	462a      	mov	r2, r5
 8089eec:	4601      	mov	r1, r0
 8089eee:	a801      	add	r0, sp, #4
 8089ef0:	f003 fc92 	bl	808d818 <ldiv>
 8089ef4:	9a02      	ldr	r2, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
 8089ef6:	9801      	ldr	r0, [sp, #4]
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
 8089ef8:	2a09      	cmp	r2, #9
 8089efa:	bfcc      	ite	gt
 8089efc:	2337      	movgt	r3, #55	; 0x37
 8089efe:	2330      	movle	r3, #48	; 0x30
 8089f00:	4413      	add	r3, r2
 8089f02:	f806 3901 	strb.w	r3, [r6], #-1
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
 8089f06:	3701      	adds	r7, #1
 8089f08:	2800      	cmp	r0, #0
 8089f0a:	d1ee      	bne.n	8089eea <ltoa+0x38>
 8089f0c:	e006      	b.n	8089f1c <ltoa+0x6a>
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';
 8089f0e:	46a0      	mov	r8, r4
 8089f10:	2330      	movs	r3, #48	; 0x30
 8089f12:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8089f16:	f10d 062a 	add.w	r6, sp, #42	; 0x2a


//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
      int i = 2;
 8089f1a:	2702      	movs	r7, #2
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
 8089f1c:	463a      	mov	r2, r7
 8089f1e:	1c71      	adds	r1, r6, #1
 8089f20:	4640      	mov	r0, r8
 8089f22:	f003 fca0 	bl	808d866 <memcpy>
      return str;
}
 8089f26:	4620      	mov	r0, r4
 8089f28:	b00c      	add	sp, #48	; 0x30
 8089f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08089f2e <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 8089f2e:	b570      	push	{r4, r5, r6, lr}
 8089f30:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 8089f32:	1e91      	subs	r1, r2, #2
 8089f34:	2922      	cmp	r1, #34	; 0x22
 8089f36:	d820      	bhi.n	8089f7a <ultoa+0x4c>
 8089f38:	4625      	mov	r5, r4
 8089f3a:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 8089f3c:	b910      	cbnz	r0, 8089f44 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 8089f3e:	4423      	add	r3, r4
            *ptr++ = '0';
 8089f40:	2230      	movs	r2, #48	; 0x30
 8089f42:	e00e      	b.n	8089f62 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 8089f44:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 8089f48:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 8089f4c:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 8089f4e:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 8089f50:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 8089f54:	bf94      	ite	ls
 8089f56:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 8089f58:	3157      	addhi	r1, #87	; 0x57
 8089f5a:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 8089f5e:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 8089f60:	e7eb      	b.n	8089f3a <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 8089f62:	4299      	cmp	r1, r3
 8089f64:	d202      	bcs.n	8089f6c <ultoa+0x3e>
            *ptr++ = '0';
 8089f66:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 8089f6a:	e7fa      	b.n	8089f62 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 8089f6c:	2300      	movs	r3, #0
	str_reverse(buffer);
 8089f6e:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 8089f70:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 8089f72:	f7ff ff8d 	bl	8089e90 <_Z11str_reversePc>
	return buffer;
 8089f76:	4620      	mov	r0, r4
 8089f78:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 8089f7a:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 8089f7c:	bd70      	pop	{r4, r5, r6, pc}

08089f7e <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 8089f7e:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 8089f80:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 8089f82:	460c      	mov	r4, r1
 8089f84:	4615      	mov	r5, r2
	if(a<0){
 8089f86:	da0b      	bge.n	8089fa0 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 8089f88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 8089f8c:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 8089f90:	bf14      	ite	ne
 8089f92:	4258      	negne	r0, r3
 8089f94:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 8089f96:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 8089f98:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
 8089f9a:	462a      	mov	r2, r5
 8089f9c:	4419      	add	r1, r3
 8089f9e:	e000      	b.n	8089fa2 <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
 8089fa0:	2301      	movs	r3, #1
 8089fa2:	f7ff ffc4 	bl	8089f2e <ultoa>
	}
	return buffer;
}
 8089fa6:	4620      	mov	r0, r4
 8089fa8:	bd38      	pop	{r3, r4, r5, pc}
	...

08089fac <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 8089fac:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8089fb0:	4680      	mov	r8, r0
 8089fb2:	460d      	mov	r5, r1
 8089fb4:	4617      	mov	r7, r2
 8089fb6:	461e      	mov	r6, r3
    bool negative = val<0;
    if (negative) {
 8089fb8:	2200      	movs	r2, #0
 8089fba:	2300      	movs	r3, #0
 8089fbc:	4640      	mov	r0, r8
 8089fbe:	4629      	mov	r1, r5
 8089fc0:	f002 fd0c 	bl	808c9dc <__aeabi_dcmplt>
 8089fc4:	b120      	cbz	r0, 8089fd0 <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 8089fc6:	232d      	movs	r3, #45	; 0x2d
 8089fc8:	7033      	strb	r3, [r6, #0]
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
    bool negative = val<0;
    if (negative) {
        val = -val;
 8089fca:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 8089fce:	3601      	adds	r6, #1
 8089fd0:	2300      	movs	r3, #0
    }
    long scale = 1;
 8089fd2:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 8089fd4:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 8089fd6:	b2d9      	uxtb	r1, r3
 8089fd8:	428f      	cmp	r7, r1
 8089fda:	d902      	bls.n	8089fe2 <_Z4dtoadhPc+0x36>
        scale *= 10;
 8089fdc:	4354      	muls	r4, r2
 8089fde:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 8089fe0:	e7f9      	b.n	8089fd6 <_Z4dtoadhPc+0x2a>
        scale *= 10;
    val *= scale;   // capture all the significant digits
 8089fe2:	4620      	mov	r0, r4
 8089fe4:	f002 fa22 	bl	808c42c <__aeabi_i2d>
 8089fe8:	4642      	mov	r2, r8
 8089fea:	462b      	mov	r3, r5
 8089fec:	f002 fa84 	bl	808c4f8 <__aeabi_dmul>
 8089ff0:	4682      	mov	sl, r0
 8089ff2:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
 8089ff4:	f003 f92a 	bl	808d24c <__aeabi_d2ulz>
 8089ff8:	4680      	mov	r8, r0
 8089ffa:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
 8089ffc:	f002 fa46 	bl	808c48c <__aeabi_ul2d>
 808a000:	4602      	mov	r2, r0
 808a002:	460b      	mov	r3, r1
 808a004:	4650      	mov	r0, sl
 808a006:	4659      	mov	r1, fp
 808a008:	f002 f8c2 	bl	808c190 <__aeabi_dsub>
 808a00c:	2200      	movs	r2, #0
 808a00e:	4b17      	ldr	r3, [pc, #92]	; (808a06c <_Z4dtoadhPc+0xc0>)
 808a010:	f002 fcf8 	bl	808ca04 <__aeabi_dcmpge>
 808a014:	b118      	cbz	r0, 808a01e <_Z4dtoadhPc+0x72>
        fixed++;
 808a016:	f118 0801 	adds.w	r8, r8, #1
 808a01a:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
 808a01e:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 808a020:	4622      	mov	r2, r4
 808a022:	462b      	mov	r3, r5
 808a024:	4640      	mov	r0, r8
 808a026:	4649      	mov	r1, r9
 808a028:	f003 f8f8 	bl	808d21c <__aeabi_uldivmod>
 808a02c:	2301      	movs	r3, #1
 808a02e:	220a      	movs	r2, #10
 808a030:	4631      	mov	r1, r6
 808a032:	f7ff ff7c 	bl	8089f2e <ultoa>
    if (prec) {
 808a036:	b1af      	cbz	r7, 808a064 <_Z4dtoadhPc+0xb8>
        sout += strlen(sout);
 808a038:	4630      	mov	r0, r6
 808a03a:	f004 f99f 	bl	808e37c <strlen>
        *sout++ = '.';
 808a03e:	232e      	movs	r3, #46	; 0x2e
 808a040:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
 808a042:	3001      	adds	r0, #1
 808a044:	4406      	add	r6, r0
 808a046:	4622      	mov	r2, r4
 808a048:	462b      	mov	r3, r5
 808a04a:	4640      	mov	r0, r8
 808a04c:	4649      	mov	r1, r9
 808a04e:	f003 f8e5 	bl	808d21c <__aeabi_uldivmod>
 808a052:	463b      	mov	r3, r7
 808a054:	4610      	mov	r0, r2
 808a056:	4631      	mov	r1, r6
 808a058:	220a      	movs	r2, #10
    }
}
 808a05a:	b001      	add	sp, #4
 808a05c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
 808a060:	f7ff bf65 	b.w	8089f2e <ultoa>
    }
}
 808a064:	b001      	add	sp, #4
 808a066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808a06a:	bf00      	nop
 808a06c:	3fe00000 	.word	0x3fe00000

0808a070 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 808a070:	b510      	push	{r4, lr}
 808a072:	4604      	mov	r4, r0
{
	free(buffer);
 808a074:	6800      	ldr	r0, [r0, #0]
 808a076:	f7ff fc6f 	bl	8089958 <free>
}
 808a07a:	4620      	mov	r0, r4
 808a07c:	bd10      	pop	{r4, pc}

0808a07e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 808a07e:	b510      	push	{r4, lr}
 808a080:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 808a082:	6800      	ldr	r0, [r0, #0]
 808a084:	b108      	cbz	r0, 808a08a <_ZN6String10invalidateEv+0xc>
 808a086:	f7ff fc67 	bl	8089958 <free>
	buffer = NULL;
 808a08a:	2300      	movs	r3, #0
 808a08c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 808a08e:	60a3      	str	r3, [r4, #8]
 808a090:	6063      	str	r3, [r4, #4]
 808a092:	bd10      	pop	{r4, pc}

0808a094 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 808a094:	b538      	push	{r3, r4, r5, lr}
 808a096:	4604      	mov	r4, r0
 808a098:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 808a09a:	6800      	ldr	r0, [r0, #0]
 808a09c:	3101      	adds	r1, #1
 808a09e:	f7ff fc63 	bl	8089968 <realloc>
	if (newbuffer) {
 808a0a2:	b110      	cbz	r0, 808a0aa <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 808a0a4:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 808a0a8:	2001      	movs	r0, #1
	}
	return 0;
}
 808a0aa:	bd38      	pop	{r3, r4, r5, pc}

0808a0ac <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 808a0ac:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 808a0ae:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 808a0b0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 808a0b2:	b113      	cbz	r3, 808a0ba <_ZN6String7reserveEj+0xe>
 808a0b4:	6843      	ldr	r3, [r0, #4]
 808a0b6:	428b      	cmp	r3, r1
 808a0b8:	d207      	bcs.n	808a0ca <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 808a0ba:	4620      	mov	r0, r4
 808a0bc:	f7ff ffea 	bl	808a094 <_ZN6String12changeBufferEj>
 808a0c0:	b120      	cbz	r0, 808a0cc <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 808a0c2:	68a3      	ldr	r3, [r4, #8]
 808a0c4:	b90b      	cbnz	r3, 808a0ca <_ZN6String7reserveEj+0x1e>
 808a0c6:	6822      	ldr	r2, [r4, #0]
 808a0c8:	7013      	strb	r3, [r2, #0]
 808a0ca:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 808a0cc:	bd10      	pop	{r4, pc}

0808a0ce <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 808a0ce:	b570      	push	{r4, r5, r6, lr}
 808a0d0:	460e      	mov	r6, r1
	if (!reserve(length)) {
 808a0d2:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 808a0d4:	4604      	mov	r4, r0
 808a0d6:	4615      	mov	r5, r2
	if (!reserve(length)) {
 808a0d8:	f7ff ffe8 	bl	808a0ac <_ZN6String7reserveEj>
 808a0dc:	b918      	cbnz	r0, 808a0e6 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 808a0de:	4620      	mov	r0, r4
 808a0e0:	f7ff ffcd 	bl	808a07e <_ZN6String10invalidateEv>
		return *this;
 808a0e4:	e009      	b.n	808a0fa <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 808a0e6:	462a      	mov	r2, r5
 808a0e8:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 808a0ea:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 808a0ec:	6820      	ldr	r0, [r4, #0]
 808a0ee:	f003 fbba 	bl	808d866 <memcpy>
	buffer[len] = 0;
 808a0f2:	6822      	ldr	r2, [r4, #0]
 808a0f4:	68a3      	ldr	r3, [r4, #8]
 808a0f6:	2100      	movs	r1, #0
 808a0f8:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 808a0fa:	4620      	mov	r0, r4
 808a0fc:	bd70      	pop	{r4, r5, r6, pc}

0808a0fe <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 808a0fe:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808a100:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 808a102:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808a104:	6003      	str	r3, [r0, #0]
	capacity = 0;
 808a106:	6043      	str	r3, [r0, #4]
	len = 0;
 808a108:	6083      	str	r3, [r0, #8]
	flags = 0;
 808a10a:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 808a10c:	460d      	mov	r5, r1
 808a10e:	b139      	cbz	r1, 808a120 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 808a110:	4608      	mov	r0, r1
 808a112:	f004 f933 	bl	808e37c <strlen>
 808a116:	4629      	mov	r1, r5
 808a118:	4602      	mov	r2, r0
 808a11a:	4620      	mov	r0, r4
 808a11c:	f7ff ffd7 	bl	808a0ce <_ZN6String4copyEPKcj>
}
 808a120:	4620      	mov	r0, r4
 808a122:	bd38      	pop	{r3, r4, r5, pc}

0808a124 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 808a124:	b538      	push	{r3, r4, r5, lr}
 808a126:	4605      	mov	r5, r0
	if (buffer) {
 808a128:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 808a12a:	460c      	mov	r4, r1
	if (buffer) {
 808a12c:	b160      	cbz	r0, 808a148 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
 808a12e:	686a      	ldr	r2, [r5, #4]
 808a130:	688b      	ldr	r3, [r1, #8]
 808a132:	429a      	cmp	r2, r3
 808a134:	d306      	bcc.n	808a144 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
 808a136:	6809      	ldr	r1, [r1, #0]
 808a138:	f003 fbe8 	bl	808d90c <strcpy>
			len = rhs.len;
 808a13c:	68a3      	ldr	r3, [r4, #8]
 808a13e:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 808a140:	2300      	movs	r3, #0
 808a142:	e00a      	b.n	808a15a <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
 808a144:	f7ff fc08 	bl	8089958 <free>
		}
	}
	buffer = rhs.buffer;
 808a148:	6823      	ldr	r3, [r4, #0]
 808a14a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 808a14c:	6863      	ldr	r3, [r4, #4]
 808a14e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 808a150:	68a3      	ldr	r3, [r4, #8]
 808a152:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 808a154:	2300      	movs	r3, #0
 808a156:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
 808a158:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
 808a15a:	60a3      	str	r3, [r4, #8]
 808a15c:	bd38      	pop	{r3, r4, r5, pc}

0808a15e <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 808a15e:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 808a160:	b510      	push	{r4, lr}
 808a162:	460b      	mov	r3, r1
 808a164:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 808a166:	d007      	beq.n	808a178 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 808a168:	6809      	ldr	r1, [r1, #0]
 808a16a:	b119      	cbz	r1, 808a174 <_ZN6StringaSERKS_+0x16>
 808a16c:	689a      	ldr	r2, [r3, #8]
 808a16e:	f7ff ffae 	bl	808a0ce <_ZN6String4copyEPKcj>
 808a172:	e001      	b.n	808a178 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 808a174:	f7ff ff83 	bl	808a07e <_ZN6String10invalidateEv>

	return *this;
}
 808a178:	4620      	mov	r0, r4
 808a17a:	bd10      	pop	{r4, pc}

0808a17c <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 808a17c:	b510      	push	{r4, lr}
 808a17e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808a180:	2300      	movs	r3, #0
 808a182:	6003      	str	r3, [r0, #0]
	capacity = 0;
 808a184:	6043      	str	r3, [r0, #4]
	len = 0;
 808a186:	6083      	str	r3, [r0, #8]
	flags = 0;
 808a188:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 808a18a:	f7ff ffe8 	bl	808a15e <_ZN6StringaSERKS_>
}
 808a18e:	4620      	mov	r0, r4
 808a190:	bd10      	pop	{r4, pc}

0808a192 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 808a192:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
 808a194:	b510      	push	{r4, lr}
 808a196:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 808a198:	d001      	beq.n	808a19e <_ZN6StringaSEOS_+0xc>
 808a19a:	f7ff ffc3 	bl	808a124 <_ZN6String4moveERS_>
	return *this;
}
 808a19e:	4620      	mov	r0, r4
 808a1a0:	bd10      	pop	{r4, pc}

0808a1a2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 808a1a2:	b538      	push	{r3, r4, r5, lr}
 808a1a4:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 808a1a6:	460c      	mov	r4, r1
 808a1a8:	b141      	cbz	r1, 808a1bc <_ZN6StringaSEPKc+0x1a>
 808a1aa:	4608      	mov	r0, r1
 808a1ac:	f004 f8e6 	bl	808e37c <strlen>
 808a1b0:	4621      	mov	r1, r4
 808a1b2:	4602      	mov	r2, r0
 808a1b4:	4628      	mov	r0, r5
 808a1b6:	f7ff ff8a 	bl	808a0ce <_ZN6String4copyEPKcj>
 808a1ba:	e001      	b.n	808a1c0 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 808a1bc:	f7ff ff5f 	bl	808a07e <_ZN6String10invalidateEv>

	return *this;
}
 808a1c0:	4628      	mov	r0, r5
 808a1c2:	bd38      	pop	{r3, r4, r5, pc}

0808a1c4 <_ZN6StringC1Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
 808a1c4:	b513      	push	{r0, r1, r4, lr}
 808a1c6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808a1c8:	2300      	movs	r3, #0

String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
 808a1ca:	f88d 1004 	strb.w	r1, [sp, #4]
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808a1ce:	6003      	str	r3, [r0, #0]
	capacity = 0;
 808a1d0:	6043      	str	r3, [r0, #4]
	len = 0;
 808a1d2:	6083      	str	r3, [r0, #8]
	flags = 0;
 808a1d4:	7303      	strb	r3, [r0, #12]
{
	init();
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
 808a1d6:	a901      	add	r1, sp, #4
String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 808a1d8:	f88d 3005 	strb.w	r3, [sp, #5]
	*this = buf;
 808a1dc:	f7ff ffe1 	bl	808a1a2 <_ZN6StringaSEPKc>
}
 808a1e0:	4620      	mov	r0, r4
 808a1e2:	b002      	add	sp, #8
 808a1e4:	bd10      	pop	{r4, pc}

0808a1e6 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 808a1e6:	b510      	push	{r4, lr}
 808a1e8:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808a1ea:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 808a1ec:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808a1ee:	6023      	str	r3, [r4, #0]
	capacity = 0;
 808a1f0:	6063      	str	r3, [r4, #4]
	len = 0;
 808a1f2:	60a3      	str	r3, [r4, #8]
	flags = 0;
 808a1f4:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 808a1f6:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
 808a1f8:	a901      	add	r1, sp, #4
 808a1fa:	f7ff fec0 	bl	8089f7e <itoa>
	*this = buf;
 808a1fe:	a901      	add	r1, sp, #4
 808a200:	4620      	mov	r0, r4
 808a202:	f7ff ffce 	bl	808a1a2 <_ZN6StringaSEPKc>
}
 808a206:	4620      	mov	r0, r4
 808a208:	b00a      	add	sp, #40	; 0x28
 808a20a:	bd10      	pop	{r4, pc}

0808a20c <_ZN6StringC1Elh>:
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
 808a20c:	b510      	push	{r4, lr}
 808a20e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808a210:	2300      	movs	r3, #0
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
 808a212:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808a214:	6023      	str	r3, [r4, #0]
	capacity = 0;
 808a216:	6063      	str	r3, [r4, #4]
	len = 0;
 808a218:	60a3      	str	r3, [r4, #8]
	flags = 0;
 808a21a:	7323      	strb	r3, [r4, #12]
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
 808a21c:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	ltoa(value, buf, base);
 808a21e:	a901      	add	r1, sp, #4
 808a220:	f7ff fe47 	bl	8089eb2 <ltoa>
	*this = buf;
 808a224:	a901      	add	r1, sp, #4
 808a226:	4620      	mov	r0, r4
 808a228:	f7ff ffbb 	bl	808a1a2 <_ZN6StringaSEPKc>
}
 808a22c:	4620      	mov	r0, r4
 808a22e:	b00a      	add	sp, #40	; 0x28
 808a230:	bd10      	pop	{r4, pc}

0808a232 <_ZN6StringC1Efi>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
 808a232:	b530      	push	{r4, r5, lr}
 808a234:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808a236:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
 808a238:	b08b      	sub	sp, #44	; 0x2c
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808a23a:	6003      	str	r3, [r0, #0]
	capacity = 0;
 808a23c:	6043      	str	r3, [r0, #4]
	len = 0;
 808a23e:	6083      	str	r3, [r0, #8]
	flags = 0;
 808a240:	7303      	strb	r3, [r0, #12]

String::String(float value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
 808a242:	b2d5      	uxtb	r5, r2
 808a244:	4608      	mov	r0, r1
 808a246:	f002 f903 	bl	808c450 <__aeabi_f2d>
 808a24a:	ab01      	add	r3, sp, #4
 808a24c:	462a      	mov	r2, r5
 808a24e:	f7ff fead 	bl	8089fac <_Z4dtoadhPc>
        *this = buf;
 808a252:	a901      	add	r1, sp, #4
 808a254:	4620      	mov	r0, r4
 808a256:	f7ff ffa4 	bl	808a1a2 <_ZN6StringaSEPKc>
}
 808a25a:	4620      	mov	r0, r4
 808a25c:	b00b      	add	sp, #44	; 0x2c
 808a25e:	bd30      	pop	{r4, r5, pc}

0808a260 <_ZN6StringC1Edi>:

String::String(double value, int decimalPlaces)
 808a260:	b510      	push	{r4, lr}
 808a262:	4604      	mov	r4, r0
 808a264:	b08a      	sub	sp, #40	; 0x28
 808a266:	4619      	mov	r1, r3
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808a268:	2300      	movs	r3, #0
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
 808a26a:	4610      	mov	r0, r2
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808a26c:	6023      	str	r3, [r4, #0]
	capacity = 0;
 808a26e:	6063      	str	r3, [r4, #4]
	len = 0;
 808a270:	60a3      	str	r3, [r4, #8]
	flags = 0;
 808a272:	7323      	strb	r3, [r4, #12]

String::String(double value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
 808a274:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 808a278:	ab01      	add	r3, sp, #4
 808a27a:	f7ff fe97 	bl	8089fac <_Z4dtoadhPc>
        *this = buf;
 808a27e:	a901      	add	r1, sp, #4
 808a280:	4620      	mov	r0, r4
 808a282:	f7ff ff8e 	bl	808a1a2 <_ZN6StringaSEPKc>
}
 808a286:	4620      	mov	r0, r4
 808a288:	b00a      	add	sp, #40	; 0x28
 808a28a:	bd10      	pop	{r4, pc}

0808a28c <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 808a28c:	b570      	push	{r4, r5, r6, lr}
 808a28e:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 808a290:	460e      	mov	r6, r1
 808a292:	b909      	cbnz	r1, 808a298 <_ZN6String6concatEPKcj+0xc>
 808a294:	2000      	movs	r0, #0
 808a296:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 808a298:	b16a      	cbz	r2, 808a2b6 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 808a29a:	6883      	ldr	r3, [r0, #8]
 808a29c:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 808a29e:	4629      	mov	r1, r5
 808a2a0:	f7ff ff04 	bl	808a0ac <_ZN6String7reserveEj>
 808a2a4:	2800      	cmp	r0, #0
 808a2a6:	d0f5      	beq.n	808a294 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 808a2a8:	6820      	ldr	r0, [r4, #0]
 808a2aa:	68a3      	ldr	r3, [r4, #8]
 808a2ac:	4631      	mov	r1, r6
 808a2ae:	4418      	add	r0, r3
 808a2b0:	f003 fb2c 	bl	808d90c <strcpy>
	len = newlen;
 808a2b4:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 808a2b6:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 808a2b8:	bd70      	pop	{r4, r5, r6, pc}

0808a2ba <_ZN6String6concatERKS_>:
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
 808a2ba:	688a      	ldr	r2, [r1, #8]
 808a2bc:	6809      	ldr	r1, [r1, #0]
 808a2be:	f7ff bfe5 	b.w	808a28c <_ZN6String6concatEPKcj>

0808a2c2 <_ZN6String6concatEPKc>:
	len = newlen;
	return 1;
}

unsigned char String::concat(const char *cstr)
{
 808a2c2:	b538      	push	{r3, r4, r5, lr}
 808a2c4:	4605      	mov	r5, r0
	if (!cstr) return 0;
 808a2c6:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
 808a2c8:	4608      	mov	r0, r1
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
 808a2ca:	b141      	cbz	r1, 808a2de <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
 808a2cc:	f004 f856 	bl	808e37c <strlen>
 808a2d0:	4621      	mov	r1, r4
 808a2d2:	4602      	mov	r2, r0
 808a2d4:	4628      	mov	r0, r5
}
 808a2d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
 808a2da:	f7ff bfd7 	b.w	808a28c <_ZN6String6concatEPKcj>
}
 808a2de:	bd38      	pop	{r3, r4, r5, pc}

0808a2e0 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
 808a2e0:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 808a2e2:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
 808a2e4:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
 808a2e8:	2201      	movs	r2, #1
 808a2ea:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 808a2ec:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 808a2f0:	f7ff ffcc 	bl	808a28c <_ZN6String6concatEPKcj>
}
 808a2f4:	b003      	add	sp, #12
 808a2f6:	f85d fb04 	ldr.w	pc, [sp], #4

0808a2fa <_ZN6String6concatEi>:
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
{
 808a2fa:	b513      	push	{r0, r1, r4, lr}
	char buf[7];
	itoa(num, buf, 10);
 808a2fc:	220a      	movs	r2, #10
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
{
 808a2fe:	4604      	mov	r4, r0
 808a300:	4608      	mov	r0, r1
	char buf[7];
	itoa(num, buf, 10);
 808a302:	4669      	mov	r1, sp
 808a304:	f7ff fe3b 	bl	8089f7e <itoa>
	return concat(buf, strlen(buf));
 808a308:	4668      	mov	r0, sp
 808a30a:	f004 f837 	bl	808e37c <strlen>
 808a30e:	4669      	mov	r1, sp
 808a310:	4602      	mov	r2, r0
 808a312:	4620      	mov	r0, r4
 808a314:	f7ff ffba 	bl	808a28c <_ZN6String6concatEPKcj>
}
 808a318:	b002      	add	sp, #8
 808a31a:	bd10      	pop	{r4, pc}

0808a31c <_ZN6String6concatEf>:
	ultoa(num, buf, DEC);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(float num)
{
 808a31c:	b510      	push	{r4, lr}
 808a31e:	4604      	mov	r4, r0
 808a320:	b086      	sub	sp, #24
	char buf[20];
	dtoa(num, 6, buf);
 808a322:	4608      	mov	r0, r1
 808a324:	f002 f894 	bl	808c450 <__aeabi_f2d>
 808a328:	ab01      	add	r3, sp, #4
 808a32a:	2206      	movs	r2, #6
 808a32c:	f7ff fe3e 	bl	8089fac <_Z4dtoadhPc>
	return concat(buf, strlen(buf));
 808a330:	a801      	add	r0, sp, #4
 808a332:	f004 f823 	bl	808e37c <strlen>
 808a336:	a901      	add	r1, sp, #4
 808a338:	4602      	mov	r2, r0
 808a33a:	4620      	mov	r0, r4
 808a33c:	f7ff ffa6 	bl	808a28c <_ZN6String6concatEPKcj>
}
 808a340:	b006      	add	sp, #24
 808a342:	bd10      	pop	{r4, pc}

0808a344 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 808a344:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 808a346:	688a      	ldr	r2, [r1, #8]
 808a348:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 808a34a:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 808a34c:	f7ff ff9e 	bl	808a28c <_ZN6String6concatEPKcj>
 808a350:	b910      	cbnz	r0, 808a358 <_ZplRK15StringSumHelperRK6String+0x14>
 808a352:	4620      	mov	r0, r4
 808a354:	f7ff fe93 	bl	808a07e <_ZN6String10invalidateEv>
	return a;
}
 808a358:	4620      	mov	r0, r4
 808a35a:	bd10      	pop	{r4, pc}

0808a35c <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 808a35c:	b538      	push	{r3, r4, r5, lr}
 808a35e:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 808a360:	460d      	mov	r5, r1
 808a362:	b141      	cbz	r1, 808a376 <_ZplRK15StringSumHelperPKc+0x1a>
 808a364:	4608      	mov	r0, r1
 808a366:	f004 f809 	bl	808e37c <strlen>
 808a36a:	4629      	mov	r1, r5
 808a36c:	4602      	mov	r2, r0
 808a36e:	4620      	mov	r0, r4
 808a370:	f7ff ff8c 	bl	808a28c <_ZN6String6concatEPKcj>
 808a374:	b910      	cbnz	r0, 808a37c <_ZplRK15StringSumHelperPKc+0x20>
 808a376:	4620      	mov	r0, r4
 808a378:	f7ff fe81 	bl	808a07e <_ZN6String10invalidateEv>
	return a;
}
 808a37c:	4620      	mov	r0, r4
 808a37e:	bd38      	pop	{r3, r4, r5, pc}

0808a380 <_ZplRK15StringSumHelperi>:
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, int num)
{
 808a380:	b510      	push	{r4, lr}
 808a382:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
 808a384:	f7ff ffb9 	bl	808a2fa <_ZN6String6concatEi>
 808a388:	b910      	cbnz	r0, 808a390 <_ZplRK15StringSumHelperi+0x10>
 808a38a:	4620      	mov	r0, r4
 808a38c:	f7ff fe77 	bl	808a07e <_ZN6String10invalidateEv>
	return a;
}
 808a390:	4620      	mov	r0, r4
 808a392:	bd10      	pop	{r4, pc}

0808a394 <_ZplRK15StringSumHelperf>:
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, float num)
{
 808a394:	b510      	push	{r4, lr}
 808a396:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
 808a398:	f7ff ffc0 	bl	808a31c <_ZN6String6concatEf>
 808a39c:	b910      	cbnz	r0, 808a3a4 <_ZplRK15StringSumHelperf+0x10>
 808a39e:	4620      	mov	r0, r4
 808a3a0:	f7ff fe6d 	bl	808a07e <_ZN6String10invalidateEv>
	return a;
}
 808a3a4:	4620      	mov	r0, r4
 808a3a6:	bd10      	pop	{r4, pc}

0808a3a8 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 808a3a8:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 808a3aa:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 808a3ac:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 808a3ae:	b912      	cbnz	r2, 808a3b6 <_ZNK6String6equalsEPKc+0xe>
 808a3b0:	b919      	cbnz	r1, 808a3ba <_ZNK6String6equalsEPKc+0x12>
 808a3b2:	2001      	movs	r0, #1
 808a3b4:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 808a3b6:	b911      	cbnz	r1, 808a3be <_ZNK6String6equalsEPKc+0x16>
 808a3b8:	6803      	ldr	r3, [r0, #0]
 808a3ba:	7818      	ldrb	r0, [r3, #0]
 808a3bc:	e002      	b.n	808a3c4 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 808a3be:	6800      	ldr	r0, [r0, #0]
 808a3c0:	f003 fa9a 	bl	808d8f8 <strcmp>
 808a3c4:	fab0 f080 	clz	r0, r0
 808a3c8:	0940      	lsrs	r0, r0, #5
}
 808a3ca:	bd08      	pop	{r3, pc}

0808a3cc <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 808a3cc:	6883      	ldr	r3, [r0, #8]
 808a3ce:	428b      	cmp	r3, r1
 808a3d0:	d903      	bls.n	808a3da <_ZNK6StringixEj+0xe>
 808a3d2:	6800      	ldr	r0, [r0, #0]
 808a3d4:	b110      	cbz	r0, 808a3dc <_ZNK6StringixEj+0x10>
	return buffer[index];
 808a3d6:	5c40      	ldrb	r0, [r0, r1]
 808a3d8:	4770      	bx	lr
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 808a3da:	2000      	movs	r0, #0
	return buffer[index];
}
 808a3dc:	4770      	bx	lr

0808a3de <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
 808a3de:	f7ff bff5 	b.w	808a3cc <_ZNK6StringixEj>

0808a3e2 <_ZNK6String7indexOfEcj>:
{
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
 808a3e2:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
 808a3e4:	6883      	ldr	r3, [r0, #8]
 808a3e6:	4293      	cmp	r3, r2
 808a3e8:	d906      	bls.n	808a3f8 <_ZNK6String7indexOfEcj+0x16>
	const char* temp = strchr(buffer + fromIndex, ch);
 808a3ea:	6804      	ldr	r4, [r0, #0]
 808a3ec:	18a0      	adds	r0, r4, r2
 808a3ee:	f003 fa75 	bl	808d8dc <strchr>
	if (temp == NULL) return -1;
 808a3f2:	b108      	cbz	r0, 808a3f8 <_ZNK6String7indexOfEcj+0x16>
	return temp - buffer;
 808a3f4:	1b00      	subs	r0, r0, r4
 808a3f6:	bd10      	pop	{r4, pc}
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
	if (fromIndex >= len) return -1;
 808a3f8:	f04f 30ff 	mov.w	r0, #4294967295
	const char* temp = strchr(buffer + fromIndex, ch);
	if (temp == NULL) return -1;
	return temp - buffer;
}
 808a3fc:	bd10      	pop	{r4, pc}
	...

0808a400 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 808a400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808a404:	461c      	mov	r4, r3
	if (left > right) {
 808a406:	429a      	cmp	r2, r3
 808a408:	bf88      	it	hi
 808a40a:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 808a40c:	460e      	mov	r6, r1
 808a40e:	4615      	mov	r5, r2
	if (left > right) {
 808a410:	bf88      	it	hi
 808a412:	4625      	movhi	r5, r4
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 808a414:	490d      	ldr	r1, [pc, #52]	; (808a44c <_ZNK6String9substringEjj+0x4c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
 808a416:	bf88      	it	hi
 808a418:	461c      	movhi	r4, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 808a41a:	4607      	mov	r7, r0
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 808a41c:	f7ff fe6f 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
 808a420:	68b1      	ldr	r1, [r6, #8]
 808a422:	428d      	cmp	r5, r1
 808a424:	d80f      	bhi.n	808a446 <_ZNK6String9substringEjj+0x46>
 808a426:	428c      	cmp	r4, r1
 808a428:	bf28      	it	cs
 808a42a:	460c      	movcs	r4, r1
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
 808a42c:	6833      	ldr	r3, [r6, #0]
	buffer[right] = '\0';
 808a42e:	2200      	movs	r2, #0
		left = temp;
	}
	String out;
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
 808a430:	f813 8004 	ldrb.w	r8, [r3, r4]
	buffer[right] = '\0';
 808a434:	551a      	strb	r2, [r3, r4]
	out = buffer + left;  // pointer arithmetic
 808a436:	6831      	ldr	r1, [r6, #0]
 808a438:	4638      	mov	r0, r7
 808a43a:	4429      	add	r1, r5
 808a43c:	f7ff feb1 	bl	808a1a2 <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
 808a440:	6833      	ldr	r3, [r6, #0]
 808a442:	f803 8004 	strb.w	r8, [r3, r4]
	return out;
}
 808a446:	4638      	mov	r0, r7
 808a448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808a44c:	08092fdc 	.word	0x08092fdc

0808a450 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 808a450:	6800      	ldr	r0, [r0, #0]
 808a452:	b108      	cbz	r0, 808a458 <_ZNK6String5toIntEv+0x8>
 808a454:	f003 b8d5 	b.w	808d602 <atol>
	return 0;
}
 808a458:	4770      	bx	lr

0808a45a <_ZNK6String7toFloatEv>:


float String::toFloat(void) const
{
 808a45a:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
 808a45c:	6800      	ldr	r0, [r0, #0]
 808a45e:	b120      	cbz	r0, 808a46a <_ZNK6String7toFloatEv+0x10>
 808a460:	f003 f8cc 	bl	808d5fc <atof>
 808a464:	f002 fb40 	bl	808cae8 <__aeabi_d2f>
 808a468:	bd08      	pop	{r3, pc}
	return 0;
 808a46a:	2000      	movs	r0, #0
}
 808a46c:	bd08      	pop	{r3, pc}
	...

0808a470 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
 808a470:	b40e      	push	{r1, r2, r3}
 808a472:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 808a474:	ac09      	add	r4, sp, #36	; 0x24
 808a476:	f854 7b04 	ldr.w	r7, [r4], #4
 808a47a:	4605      	mov	r5, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 808a47c:	4623      	mov	r3, r4
 808a47e:	463a      	mov	r2, r7
 808a480:	2105      	movs	r1, #5
 808a482:	a802      	add	r0, sp, #8
}

String String::format(const char* fmt, ...)
{
    va_list marker;
    va_start(marker, fmt);
 808a484:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 808a486:	f7ff fa9f 	bl	80899c8 <vsnprintf>
 808a48a:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 808a48c:	490b      	ldr	r1, [pc, #44]	; (808a4bc <_ZN6String6formatEPKcz+0x4c>)
 808a48e:	4628      	mov	r0, r5
 808a490:	f7ff fe35 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
 808a494:	4631      	mov	r1, r6
 808a496:	4628      	mov	r0, r5
 808a498:	f7ff fe08 	bl	808a0ac <_ZN6String7reserveEj>
    if (result.buffer) {
 808a49c:	6828      	ldr	r0, [r5, #0]
 808a49e:	b130      	cbz	r0, 808a4ae <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 808a4a0:	4623      	mov	r3, r4
 808a4a2:	463a      	mov	r2, r7
 808a4a4:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
 808a4a6:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 808a4a8:	f7ff fa8e 	bl	80899c8 <vsnprintf>
        va_end(marker);
        result.len = n;
 808a4ac:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
 808a4ae:	4628      	mov	r0, r5
 808a4b0:	b004      	add	sp, #16
 808a4b2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 808a4b6:	b003      	add	sp, #12
 808a4b8:	4770      	bx	lr
 808a4ba:	bf00      	nop
 808a4bc:	08092fdc 	.word	0x08092fdc

0808a4c0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 808a4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808a4c2:	4606      	mov	r6, r0
 808a4c4:	460d      	mov	r5, r1
 808a4c6:	188f      	adds	r7, r1, r2
  size_t n = 0;
 808a4c8:	2400      	movs	r4, #0
  while (size--) {
 808a4ca:	42bd      	cmp	r5, r7
 808a4cc:	d00c      	beq.n	808a4e8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 808a4ce:	6833      	ldr	r3, [r6, #0]
 808a4d0:	f815 1b01 	ldrb.w	r1, [r5], #1
 808a4d4:	689b      	ldr	r3, [r3, #8]
 808a4d6:	4630      	mov	r0, r6
 808a4d8:	4798      	blx	r3
     if (chunk>=0)
 808a4da:	2800      	cmp	r0, #0
 808a4dc:	db01      	blt.n	808a4e2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 808a4de:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 808a4e0:	e7f3      	b.n	808a4ca <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 808a4e2:	2c00      	cmp	r4, #0
 808a4e4:	bf08      	it	eq
 808a4e6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 808a4e8:	4620      	mov	r0, r4
 808a4ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808a4ec <_ZN5Print5printEPKc>:
 808a4ec:	b508      	push	{r3, lr}
 808a4ee:	f7fd fff5 	bl	80884dc <_ZN5Print5writeEPKc>
 808a4f2:	bd08      	pop	{r3, pc}

0808a4f4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 808a4f4:	6803      	ldr	r3, [r0, #0]
 808a4f6:	689b      	ldr	r3, [r3, #8]
 808a4f8:	4718      	bx	r3

0808a4fa <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 808a4fa:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 808a4fc:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 808a4fe:	4605      	mov	r5, r0
  size_t n = print('\r');
 808a500:	f7ff fff8 	bl	808a4f4 <_ZN5Print5printEc>
  n += print('\n');
 808a504:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 808a506:	4604      	mov	r4, r0
  n += print('\n');
 808a508:	4628      	mov	r0, r5
 808a50a:	f7ff fff3 	bl	808a4f4 <_ZN5Print5printEc>
  return n;
}
 808a50e:	4420      	add	r0, r4
 808a510:	bd38      	pop	{r3, r4, r5, pc}

0808a512 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 808a512:	b538      	push	{r3, r4, r5, lr}
 808a514:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808a516:	f7fd ffe1 	bl	80884dc <_ZN5Print5writeEPKc>
 808a51a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 808a51c:	4628      	mov	r0, r5
 808a51e:	f7ff ffec 	bl	808a4fa <_ZN5Print7printlnEv>
  return n;
}
 808a522:	4420      	add	r0, r4
 808a524:	bd38      	pop	{r3, r4, r5, pc}

0808a526 <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
 808a526:	b538      	push	{r3, r4, r5, lr}
 808a528:	4605      	mov	r5, r0
  size_t n = print(c);
 808a52a:	f7ff ffe3 	bl	808a4f4 <_ZN5Print5printEc>
 808a52e:	4604      	mov	r4, r0
  n += println();
 808a530:	4628      	mov	r0, r5
 808a532:	f7ff ffe2 	bl	808a4fa <_ZN5Print7printlnEv>
  return n;
}
 808a536:	4420      	add	r0, r4
 808a538:	bd38      	pop	{r3, r4, r5, pc}

0808a53a <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 808a53a:	2a01      	cmp	r2, #1
 808a53c:	bf98      	it	ls
 808a53e:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 808a540:	b530      	push	{r4, r5, lr}
 808a542:	460b      	mov	r3, r1
 808a544:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 808a546:	2100      	movs	r1, #0
 808a548:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 808a54c:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 808a550:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 808a554:	fb05 3312 	mls	r3, r5, r2, r3
 808a558:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 808a55a:	2b09      	cmp	r3, #9
 808a55c:	bf94      	ite	ls
 808a55e:	3330      	addls	r3, #48	; 0x30
 808a560:	3337      	addhi	r3, #55	; 0x37
 808a562:	b2db      	uxtb	r3, r3
 808a564:	4621      	mov	r1, r4
 808a566:	f804 3901 	strb.w	r3, [r4], #-1
 808a56a:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 808a56c:	2d00      	cmp	r5, #0
 808a56e:	d1ef      	bne.n	808a550 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 808a570:	f7fd ffb4 	bl	80884dc <_ZN5Print5writeEPKc>
}
 808a574:	b00b      	add	sp, #44	; 0x2c
 808a576:	bd30      	pop	{r4, r5, pc}

0808a578 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 808a578:	b410      	push	{r4}
  if (base == 0) return write(n);
 808a57a:	b922      	cbnz	r2, 808a586 <_ZN5Print5printEmi+0xe>
 808a57c:	6803      	ldr	r3, [r0, #0]
 808a57e:	b2c9      	uxtb	r1, r1
 808a580:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 808a582:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 808a584:	4718      	bx	r3
  else return printNumber(n, base);
 808a586:	b2d2      	uxtb	r2, r2
}
 808a588:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 808a58a:	f7ff bfd6 	b.w	808a53a <_ZN5Print11printNumberEmh>

0808a58e <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 808a58e:	f7ff bff3 	b.w	808a578 <_ZN5Print5printEmi>

0808a592 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
 808a592:	b538      	push	{r3, r4, r5, lr}
 808a594:	4605      	mov	r5, r0
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 808a596:	f7ff ffef 	bl	808a578 <_ZN5Print5printEmi>
 808a59a:	4604      	mov	r4, r0
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
 808a59c:	4628      	mov	r0, r5
 808a59e:	f7ff ffac 	bl	808a4fa <_ZN5Print7printlnEv>
  return n;
}
 808a5a2:	4420      	add	r0, r4
 808a5a4:	bd38      	pop	{r3, r4, r5, pc}

0808a5a6 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 808a5a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808a5aa:	4607      	mov	r7, r0
 808a5ac:	460e      	mov	r6, r1
  if (base == 0) {
 808a5ae:	4615      	mov	r5, r2
 808a5b0:	b92a      	cbnz	r2, 808a5be <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 808a5b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 808a5b6:	6803      	ldr	r3, [r0, #0]
 808a5b8:	b2c9      	uxtb	r1, r1
 808a5ba:	689b      	ldr	r3, [r3, #8]
 808a5bc:	4718      	bx	r3
  } else if (base == 10) {
 808a5be:	2a0a      	cmp	r2, #10
 808a5c0:	d102      	bne.n	808a5c8 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 808a5c2:	2900      	cmp	r1, #0
 808a5c4:	da01      	bge.n	808a5ca <_ZN5Print5printEli+0x24>
 808a5c6:	e004      	b.n	808a5d2 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 808a5c8:	b2d2      	uxtb	r2, r2
  }
}
 808a5ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 808a5ce:	f7ff bfb4 	b.w	808a53a <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 808a5d2:	212d      	movs	r1, #45	; 0x2d
 808a5d4:	f7ff ff8e 	bl	808a4f4 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 808a5d8:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 808a5da:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 808a5dc:	4271      	negs	r1, r6
 808a5de:	4638      	mov	r0, r7
 808a5e0:	f7ff ffab 	bl	808a53a <_ZN5Print11printNumberEmh>
 808a5e4:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 808a5e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808a5ea <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 808a5ea:	f7ff bfdc 	b.w	808a5a6 <_ZN5Print5printEli>

0808a5ee <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 808a5ee:	b538      	push	{r3, r4, r5, lr}
 808a5f0:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 808a5f2:	f7ff ffd8 	bl	808a5a6 <_ZN5Print5printEli>
 808a5f6:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 808a5f8:	4628      	mov	r0, r5
 808a5fa:	f7ff ff7e 	bl	808a4fa <_ZN5Print7printlnEv>
  return n;
}
 808a5fe:	4420      	add	r0, r4
 808a600:	bd38      	pop	{r3, r4, r5, pc}
	...

0808a604 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 808a604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 808a608:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 808a60a:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 808a60c:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 808a60e:	4617      	mov	r7, r2
 808a610:	461e      	mov	r6, r3
 808a612:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 808a616:	f002 fa09 	bl	808ca2c <__aeabi_dcmpun>
 808a61a:	b108      	cbz	r0, 808a620 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808a61c:	4947      	ldr	r1, [pc, #284]	; (808a73c <_ZN5Print10printFloatEdh+0x138>)
 808a61e:	e012      	b.n	808a646 <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 808a620:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 808a624:	f04f 32ff 	mov.w	r2, #4294967295
 808a628:	4b45      	ldr	r3, [pc, #276]	; (808a740 <_ZN5Print10printFloatEdh+0x13c>)
 808a62a:	4638      	mov	r0, r7
 808a62c:	4621      	mov	r1, r4
 808a62e:	f002 f9fd 	bl	808ca2c <__aeabi_dcmpun>
 808a632:	b968      	cbnz	r0, 808a650 <_ZN5Print10printFloatEdh+0x4c>
 808a634:	f04f 32ff 	mov.w	r2, #4294967295
 808a638:	4b41      	ldr	r3, [pc, #260]	; (808a740 <_ZN5Print10printFloatEdh+0x13c>)
 808a63a:	4638      	mov	r0, r7
 808a63c:	4621      	mov	r1, r4
 808a63e:	f002 f9d7 	bl	808c9f0 <__aeabi_dcmple>
 808a642:	b928      	cbnz	r0, 808a650 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808a644:	493f      	ldr	r1, [pc, #252]	; (808a744 <_ZN5Print10printFloatEdh+0x140>)
 808a646:	4640      	mov	r0, r8
 808a648:	f7fd ff48 	bl	80884dc <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 808a64c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 808a650:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 808a654:	4b3c      	ldr	r3, [pc, #240]	; (808a748 <_ZN5Print10printFloatEdh+0x144>)
 808a656:	4638      	mov	r0, r7
 808a658:	4631      	mov	r1, r6
 808a65a:	f002 f9dd 	bl	808ca18 <__aeabi_dcmpgt>
 808a65e:	b108      	cbz	r0, 808a664 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808a660:	493a      	ldr	r1, [pc, #232]	; (808a74c <_ZN5Print10printFloatEdh+0x148>)
 808a662:	e7f0      	b.n	808a646 <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 808a664:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 808a668:	4b39      	ldr	r3, [pc, #228]	; (808a750 <_ZN5Print10printFloatEdh+0x14c>)
 808a66a:	4638      	mov	r0, r7
 808a66c:	4631      	mov	r1, r6
 808a66e:	f002 f9b5 	bl	808c9dc <__aeabi_dcmplt>
 808a672:	2800      	cmp	r0, #0
 808a674:	d1f4      	bne.n	808a660 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 808a676:	2200      	movs	r2, #0
 808a678:	2300      	movs	r3, #0
 808a67a:	4638      	mov	r0, r7
 808a67c:	4631      	mov	r1, r6
 808a67e:	f002 f9ad 	bl	808c9dc <__aeabi_dcmplt>
 808a682:	b138      	cbz	r0, 808a694 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 808a684:	212d      	movs	r1, #45	; 0x2d
 808a686:	4640      	mov	r0, r8
 808a688:	f7ff ff34 	bl	808a4f4 <_ZN5Print5printEc>
     number = -number;
 808a68c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 808a690:	4604      	mov	r4, r0
 808a692:	e000      	b.n	808a696 <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 808a694:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 808a696:	492f      	ldr	r1, [pc, #188]	; (808a754 <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 808a698:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 808a69c:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 808a69e:	fa5f f389 	uxtb.w	r3, r9
 808a6a2:	429d      	cmp	r5, r3
 808a6a4:	d906      	bls.n	808a6b4 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 808a6a6:	2200      	movs	r2, #0
 808a6a8:	4b2b      	ldr	r3, [pc, #172]	; (808a758 <_ZN5Print10printFloatEdh+0x154>)
 808a6aa:	f002 f84f 	bl	808c74c <__aeabi_ddiv>
 808a6ae:	f109 0901 	add.w	r9, r9, #1
 808a6b2:	e7f4      	b.n	808a69e <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 808a6b4:	463a      	mov	r2, r7
 808a6b6:	4633      	mov	r3, r6
 808a6b8:	f001 fd6c 	bl	808c194 <__adddf3>
 808a6bc:	460f      	mov	r7, r1
 808a6be:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 808a6c0:	f002 f9f2 	bl	808caa8 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 808a6c4:	220a      	movs	r2, #10
 808a6c6:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 808a6c8:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 808a6ca:	4640      	mov	r0, r8
 808a6cc:	f7ff ff35 	bl	808a53a <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 808a6d0:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 808a6d2:	b37d      	cbz	r5, 808a734 <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 808a6d4:	4648      	mov	r0, r9
 808a6d6:	f001 fe99 	bl	808c40c <__aeabi_ui2d>
 808a6da:	4602      	mov	r2, r0
 808a6dc:	460b      	mov	r3, r1
 808a6de:	4630      	mov	r0, r6
 808a6e0:	4639      	mov	r1, r7
 808a6e2:	f001 fd55 	bl	808c190 <__aeabi_dsub>
 808a6e6:	4606      	mov	r6, r0
 808a6e8:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808a6ea:	4640      	mov	r0, r8
 808a6ec:	491b      	ldr	r1, [pc, #108]	; (808a75c <_ZN5Print10printFloatEdh+0x158>)
 808a6ee:	f7fd fef5 	bl	80884dc <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 808a6f2:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 808a6f4:	4b18      	ldr	r3, [pc, #96]	; (808a758 <_ZN5Print10printFloatEdh+0x154>)
 808a6f6:	2200      	movs	r2, #0
 808a6f8:	4630      	mov	r0, r6
 808a6fa:	4639      	mov	r1, r7
 808a6fc:	f001 fefc 	bl	808c4f8 <__aeabi_dmul>
 808a700:	460f      	mov	r7, r1
 808a702:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 808a704:	f002 f9a8 	bl	808ca58 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 808a708:	220a      	movs	r2, #10
 808a70a:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 808a70c:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 808a70e:	4640      	mov	r0, r8
 808a710:	f7ff ff49 	bl	808a5a6 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 808a714:	4404      	add	r4, r0
    remainder -= toPrint;
 808a716:	4648      	mov	r0, r9
 808a718:	f001 fe88 	bl	808c42c <__aeabi_i2d>
 808a71c:	4602      	mov	r2, r0
 808a71e:	460b      	mov	r3, r1
 808a720:	4630      	mov	r0, r6
 808a722:	4639      	mov	r1, r7
 808a724:	f001 fd34 	bl	808c190 <__aeabi_dsub>
 808a728:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 808a72a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 808a72e:	4606      	mov	r6, r0
 808a730:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 808a732:	d1df      	bne.n	808a6f4 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 808a734:	4620      	mov	r0, r4
 808a736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808a73a:	bf00      	nop
 808a73c:	08093024 	.word	0x08093024
 808a740:	7fefffff 	.word	0x7fefffff
 808a744:	0809302c 	.word	0x0809302c
 808a748:	41efffff 	.word	0x41efffff
 808a74c:	08093028 	.word	0x08093028
 808a750:	c1efffff 	.word	0xc1efffff
 808a754:	3fe00000 	.word	0x3fe00000
 808a758:	40240000 	.word	0x40240000
 808a75c:	080928e3 	.word	0x080928e3

0808a760 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 808a760:	b537      	push	{r0, r1, r2, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 808a762:	f89d 1018 	ldrb.w	r1, [sp, #24]
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 808a766:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 808a768:	9100      	str	r1, [sp, #0]
 808a76a:	f7ff ff4b 	bl	808a604 <_ZN5Print10printFloatEdh>
 808a76e:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
 808a770:	4628      	mov	r0, r5
 808a772:	f7ff fec2 	bl	808a4fa <_ZN5Print7printlnEv>
  return n;
}
 808a776:	4420      	add	r0, r4
 808a778:	b003      	add	sp, #12
 808a77a:	bd30      	pop	{r4, r5, pc}

0808a77c <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 808a77c:	b40c      	push	{r2, r3}
 808a77e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808a782:	b087      	sub	sp, #28
 808a784:	af00      	add	r7, sp, #0
 808a786:	f107 0438 	add.w	r4, r7, #56	; 0x38
 808a78a:	f854 9b04 	ldr.w	r9, [r4], #4
 808a78e:	4605      	mov	r5, r0
 808a790:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 808a792:	4623      	mov	r3, r4
 808a794:	464a      	mov	r2, r9
 808a796:	2114      	movs	r1, #20
 808a798:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 808a79a:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 808a79c:	f7ff f914 	bl	80899c8 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 808a7a0:	2813      	cmp	r0, #19
 808a7a2:	d805      	bhi.n	808a7b0 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808a7a4:	1d39      	adds	r1, r7, #4
 808a7a6:	4628      	mov	r0, r5
 808a7a8:	f7fd fe98 	bl	80884dc <_ZN5Print5writeEPKc>
 808a7ac:	4604      	mov	r4, r0
 808a7ae:	e013      	b.n	808a7d8 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 808a7b0:	f100 0308 	add.w	r3, r0, #8
 808a7b4:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 808a7b8:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 808a7ba:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 808a7be:	1c41      	adds	r1, r0, #1
 808a7c0:	4623      	mov	r3, r4
 808a7c2:	464a      	mov	r2, r9
 808a7c4:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 808a7c6:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 808a7c8:	f7ff f8fe 	bl	80899c8 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808a7cc:	4669      	mov	r1, sp
 808a7ce:	4628      	mov	r0, r5
 808a7d0:	f7fd fe84 	bl	80884dc <_ZN5Print5writeEPKc>
 808a7d4:	4604      	mov	r4, r0
 808a7d6:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 808a7d8:	b11e      	cbz	r6, 808a7e2 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 808a7da:	4628      	mov	r0, r5
 808a7dc:	f7ff fe8d 	bl	808a4fa <_ZN5Print7printlnEv>
 808a7e0:	4404      	add	r4, r0
    return n;
}
 808a7e2:	4620      	mov	r0, r4
 808a7e4:	371c      	adds	r7, #28
 808a7e6:	46bd      	mov	sp, r7
 808a7e8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808a7ec:	b002      	add	sp, #8
 808a7ee:	4770      	bx	lr

0808a7f0 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
 808a7f0:	b510      	push	{r4, lr}
 808a7f2:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 808a7f4:	f7fe fe72 	bl	80894dc <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
 808a7f8:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 808a7fa:	6823      	ldr	r3, [r4, #0]
 808a7fc:	4620      	mov	r0, r4
 808a7fe:	695b      	ldr	r3, [r3, #20]
 808a800:	4798      	blx	r3
    if (c >= 0) return c;
 808a802:	2800      	cmp	r0, #0
 808a804:	da08      	bge.n	808a818 <_ZN6Stream9timedReadEv+0x28>
 808a806:	f7fe fe69 	bl	80894dc <HAL_Timer_Get_Milli_Seconds>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
 808a80a:	68e3      	ldr	r3, [r4, #12]
 808a80c:	1ac0      	subs	r0, r0, r3
 808a80e:	68a3      	ldr	r3, [r4, #8]
 808a810:	4298      	cmp	r0, r3
 808a812:	d3f2      	bcc.n	808a7fa <_ZN6Stream9timedReadEv+0xa>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
 808a814:	f04f 30ff 	mov.w	r0, #4294967295
}
 808a818:	bd10      	pop	{r4, pc}

0808a81a <_ZN6Stream10setTimeoutEm>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(system_tick_t timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
 808a81a:	6081      	str	r1, [r0, #8]
 808a81c:	4770      	bx	lr

0808a81e <_ZN6Stream9findUntilEPcjS0_j>:

// reads data from the stream until the target string of the given length is found
// search terminated if the terminator string is found
// returns true if target string is found, false if terminated or timed out
bool Stream::findUntil(char *target, size_t targetLen, char *terminator, size_t termLen)
{
 808a81e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808a822:	469a      	mov	sl, r3
  size_t index = 0;  // maximum target string length is 64k bytes!
  size_t termIndex = 0;
  int c;

  if( *target == 0)
 808a824:	780b      	ldrb	r3, [r1, #0]

// reads data from the stream until the target string of the given length is found
// search terminated if the terminator string is found
// returns true if target string is found, false if terminated or timed out
bool Stream::findUntil(char *target, size_t targetLen, char *terminator, size_t termLen)
{
 808a826:	4680      	mov	r8, r0
 808a828:	460f      	mov	r7, r1
 808a82a:	4691      	mov	r9, r2
 808a82c:	9e08      	ldr	r6, [sp, #32]
  size_t index = 0;  // maximum target string length is 64k bytes!
  size_t termIndex = 0;
  int c;

  if( *target == 0)
 808a82e:	b19b      	cbz	r3, 808a858 <_ZN6Stream9findUntilEPcjS0_j+0x3a>
 808a830:	2400      	movs	r4, #0
 808a832:	4625      	mov	r5, r4
 808a834:	e001      	b.n	808a83a <_ZN6Stream9findUntilEPcjS0_j+0x1c>
      if(++index >= targetLen){ // return true if all chars in the target match
        return true;
      }
    }

    if(termLen > 0 && c == terminator[termIndex]){
 808a836:	b996      	cbnz	r6, 808a85e <_ZN6Stream9findUntilEPcjS0_j+0x40>
      if(++termIndex >= termLen)
        return false;       // return false if terminate string found before target string
    }
    else
      termIndex = 0;
 808a838:	2400      	movs	r4, #0
  size_t termIndex = 0;
  int c;

  if( *target == 0)
    return true;   // return true if target is a null string
  while( (c = timedRead()) > 0){
 808a83a:	4640      	mov	r0, r8
 808a83c:	f7ff ffd8 	bl	808a7f0 <_ZN6Stream9timedReadEv>
 808a840:	2800      	cmp	r0, #0
 808a842:	dd13      	ble.n	808a86c <_ZN6Stream9findUntilEPcjS0_j+0x4e>

    if(c != target[index])
 808a844:	5d7b      	ldrb	r3, [r7, r5]
      index = 0; // reset index if any char does not match
 808a846:	4298      	cmp	r0, r3
 808a848:	bf18      	it	ne
 808a84a:	2500      	movne	r5, #0

    if( c == target[index]){
 808a84c:	5d7b      	ldrb	r3, [r7, r5]
 808a84e:	4298      	cmp	r0, r3
 808a850:	d1f1      	bne.n	808a836 <_ZN6Stream9findUntilEPcjS0_j+0x18>
      //////Serial.print("found "); Serial.write(c); Serial.print("index now"); Serial.println(index+1);
      if(++index >= targetLen){ // return true if all chars in the target match
 808a852:	3501      	adds	r5, #1
 808a854:	45a9      	cmp	r9, r5
 808a856:	d8ee      	bhi.n	808a836 <_ZN6Stream9findUntilEPcjS0_j+0x18>
  size_t index = 0;  // maximum target string length is 64k bytes!
  size_t termIndex = 0;
  int c;

  if( *target == 0)
    return true;   // return true if target is a null string
 808a858:	2001      	movs	r0, #1
 808a85a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(++index >= targetLen){ // return true if all chars in the target match
        return true;
      }
    }

    if(termLen > 0 && c == terminator[termIndex]){
 808a85e:	f81a 3004 	ldrb.w	r3, [sl, r4]
 808a862:	4298      	cmp	r0, r3
 808a864:	d1e8      	bne.n	808a838 <_ZN6Stream9findUntilEPcjS0_j+0x1a>
      if(++termIndex >= termLen)
 808a866:	3401      	adds	r4, #1
 808a868:	42a6      	cmp	r6, r4
 808a86a:	d8e6      	bhi.n	808a83a <_ZN6Stream9findUntilEPcjS0_j+0x1c>
        return false;       // return false if terminate string found before target string
    }
    else
      termIndex = 0;
  }
  return false;
 808a86c:	2000      	movs	r0, #0
}
 808a86e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0808a872 <_ZN6Stream9findUntilEPcS0_>:
  return findUntil(target, length, NULL, 0);
}

// as find but search ends if the terminator string is found
bool  Stream::findUntil(char *target, char *terminator)
{
 808a872:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 808a874:	4606      	mov	r6, r0
  return findUntil(target, strlen(target), terminator, strlen(terminator));
 808a876:	4608      	mov	r0, r1
  return findUntil(target, length, NULL, 0);
}

// as find but search ends if the terminator string is found
bool  Stream::findUntil(char *target, char *terminator)
{
 808a878:	4615      	mov	r5, r2
 808a87a:	460c      	mov	r4, r1
  return findUntil(target, strlen(target), terminator, strlen(terminator));
 808a87c:	f003 fd7e 	bl	808e37c <strlen>
 808a880:	4607      	mov	r7, r0
 808a882:	4628      	mov	r0, r5
 808a884:	f003 fd7a 	bl	808e37c <strlen>
 808a888:	462b      	mov	r3, r5
 808a88a:	9000      	str	r0, [sp, #0]
 808a88c:	463a      	mov	r2, r7
 808a88e:	4621      	mov	r1, r4
 808a890:	4630      	mov	r0, r6
 808a892:	f7ff ffc4 	bl	808a81e <_ZN6Stream9findUntilEPcjS0_j>
}
 808a896:	b003      	add	sp, #12
 808a898:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808a89a <_ZN6Stream4findEPc>:
}

 // find returns true if the target string is found
bool  Stream::find(char *target)
{
  return findUntil(target, NULL);
 808a89a:	2200      	movs	r2, #0
 808a89c:	f7ff bfe9 	b.w	808a872 <_ZN6Stream9findUntilEPcS0_>

0808a8a0 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
 808a8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808a8a4:	4680      	mov	r8, r0
 808a8a6:	460d      	mov	r5, r1
 808a8a8:	460c      	mov	r4, r1
 808a8aa:	188f      	adds	r7, r1, r2
  size_t count = 0;
  while (count < length) {
 808a8ac:	42bc      	cmp	r4, r7
 808a8ae:	eba4 0605 	sub.w	r6, r4, r5
 808a8b2:	d007      	beq.n	808a8c4 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
 808a8b4:	4640      	mov	r0, r8
 808a8b6:	f7ff ff9b 	bl	808a7f0 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
 808a8ba:	2800      	cmp	r0, #0
 808a8bc:	db02      	blt.n	808a8c4 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
 808a8be:	f804 0b01 	strb.w	r0, [r4], #1
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
  size_t count = 0;
  while (count < length) {
 808a8c2:	e7f3      	b.n	808a8ac <_ZN6Stream9readBytesEPcj+0xc>
    if (c < 0) break;
    *buffer++ = (char)c;
    count++;
  }
  return count;
}
 808a8c4:	4630      	mov	r0, r6
 808a8c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0808a8cc <_ZN6Stream10readStringEv>:
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
 808a8cc:	b538      	push	{r3, r4, r5, lr}
 808a8ce:	460d      	mov	r5, r1
  String ret;
 808a8d0:	4907      	ldr	r1, [pc, #28]	; (808a8f0 <_ZN6Stream10readStringEv+0x24>)
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
 808a8d2:	4604      	mov	r4, r0
  String ret;
 808a8d4:	f7ff fc13 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
 808a8d8:	4628      	mov	r0, r5
 808a8da:	f7ff ff89 	bl	808a7f0 <_ZN6Stream9timedReadEv>
  while (c >= 0)
 808a8de:	2800      	cmp	r0, #0
 808a8e0:	db04      	blt.n	808a8ec <_ZN6Stream10readStringEv+0x20>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
 808a8e2:	b2c1      	uxtb	r1, r0
 808a8e4:	4620      	mov	r0, r4
 808a8e6:	f7ff fcfb 	bl	808a2e0 <_ZN6String6concatEc>
 808a8ea:	e7f5      	b.n	808a8d8 <_ZN6Stream10readStringEv+0xc>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
 808a8ec:	4620      	mov	r0, r4
 808a8ee:	bd38      	pop	{r3, r4, r5, pc}
 808a8f0:	08092fdc 	.word	0x08092fdc

0808a8f4 <_ZN6Stream15readStringUntilEc>:

String Stream::readStringUntil(char terminator)
{
 808a8f4:	b570      	push	{r4, r5, r6, lr}
 808a8f6:	460d      	mov	r5, r1
  String ret;
 808a8f8:	4909      	ldr	r1, [pc, #36]	; (808a920 <_ZN6Stream15readStringUntilEc+0x2c>)
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
 808a8fa:	4604      	mov	r4, r0
 808a8fc:	4616      	mov	r6, r2
  String ret;
 808a8fe:	f7ff fbfe 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
 808a902:	4628      	mov	r0, r5
 808a904:	f7ff ff74 	bl	808a7f0 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
 808a908:	2800      	cmp	r0, #0
 808a90a:	db06      	blt.n	808a91a <_ZN6Stream15readStringUntilEc+0x26>
 808a90c:	42b0      	cmp	r0, r6
 808a90e:	d004      	beq.n	808a91a <_ZN6Stream15readStringUntilEc+0x26>
 808a910:	b2c1      	uxtb	r1, r0
 808a912:	4620      	mov	r0, r4
 808a914:	f7ff fce4 	bl	808a2e0 <_ZN6String6concatEc>
 808a918:	e7f3      	b.n	808a902 <_ZN6Stream15readStringUntilEc+0xe>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
 808a91a:	4620      	mov	r0, r4
 808a91c:	bd70      	pop	{r4, r5, r6, pc}
 808a91e:	bf00      	nop
 808a920:	08092fdc 	.word	0x08092fdc

0808a924 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 808a924:	680b      	ldr	r3, [r1, #0]
 808a926:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 808a928:	b113      	cbz	r3, 808a930 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 808a92a:	685a      	ldr	r2, [r3, #4]
 808a92c:	3201      	adds	r2, #1
 808a92e:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 808a930:	4770      	bx	lr
	...

0808a934 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 808a934:	4a01      	ldr	r2, [pc, #4]	; (808a93c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 808a936:	4b02      	ldr	r3, [pc, #8]	; (808a940 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 808a938:	601a      	str	r2, [r3, #0]
 808a93a:	4770      	bx	lr
 808a93c:	080930a3 	.word	0x080930a3
 808a940:	20000bd4 	.word	0x20000bd4

0808a944 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 808a944:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 808a946:	4b14      	ldr	r3, [pc, #80]	; (808a998 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 808a948:	4f14      	ldr	r7, [pc, #80]	; (808a99c <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 808a94a:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 808a94c:	4b14      	ldr	r3, [pc, #80]	; (808a9a0 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 808a94e:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 808a950:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 808a952:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 808a954:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 808a956:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 808a958:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 808a95a:	d01b      	beq.n	808a994 <_ZL22Refresh_UnixTime_Cachel+0x50>
 808a95c:	a80a      	add	r0, sp, #40	; 0x28
 808a95e:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 808a962:	f002 fe61 	bl	808d628 <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 808a966:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 808a968:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 808a96a:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 808a96c:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 808a970:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 808a972:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 808a974:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 808a976:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 808a978:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 808a97a:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 808a97e:	4c09      	ldr	r4, [pc, #36]	; (808a9a4 <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 808a980:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 808a984:	ad01      	add	r5, sp, #4
 808a986:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 808a988:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 808a98a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 808a98c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 808a98e:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 808a990:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 808a994:	b00b      	add	sp, #44	; 0x2c
 808a996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808a998:	20000c0c 	.word	0x20000c0c
 808a99c:	20000c08 	.word	0x20000c08
 808a9a0:	20000c04 	.word	0x20000c04
 808a9a4:	20000bd8 	.word	0x20000bd8

0808a9a8 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 808a9a8:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 808a9aa:	2000      	movs	r0, #0
 808a9ac:	f7fe ffbc 	bl	8089928 <spark_sync_time_pending>
 808a9b0:	b128      	cbz	r0, 808a9be <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808a9b2:	f7fe ffa9 	bl	8089908 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 808a9b6:	f080 0001 	eor.w	r0, r0, #1
 808a9ba:	b2c0      	uxtb	r0, r0
 808a9bc:	bd08      	pop	{r3, pc}
 808a9be:	2001      	movs	r0, #1
    }
 808a9c0:	bd08      	pop	{r3, pc}
	...

0808a9c4 <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 808a9c4:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 808a9c6:	f7ff ffbd 	bl	808a944 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 808a9ca:	4b02      	ldr	r3, [pc, #8]	; (808a9d4 <_ZN9TimeClass5monthEl+0x10>)
 808a9cc:	6918      	ldr	r0, [r3, #16]
}
 808a9ce:	3001      	adds	r0, #1
 808a9d0:	bd08      	pop	{r3, pc}
 808a9d2:	bf00      	nop
 808a9d4:	20000bd8 	.word	0x20000bd8

0808a9d8 <_ZN9TimeClass4zoneEf>:
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 808a9d8:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 808a9da:	4909      	ldr	r1, [pc, #36]	; (808aa00 <_ZN9TimeClass4zoneEf+0x28>)
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 808a9dc:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 808a9de:	f002 fb7f 	bl	808d0e0 <__aeabi_fcmplt>
 808a9e2:	b960      	cbnz	r0, 808a9fe <_ZN9TimeClass4zoneEf+0x26>
 808a9e4:	4907      	ldr	r1, [pc, #28]	; (808aa04 <_ZN9TimeClass4zoneEf+0x2c>)
 808a9e6:	4620      	mov	r0, r4
 808a9e8:	f002 fb98 	bl	808d11c <__aeabi_fcmpgt>
 808a9ec:	b938      	cbnz	r0, 808a9fe <_ZN9TimeClass4zoneEf+0x26>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 808a9ee:	4906      	ldr	r1, [pc, #24]	; (808aa08 <_ZN9TimeClass4zoneEf+0x30>)
 808a9f0:	4620      	mov	r0, r4
 808a9f2:	f002 f9d7 	bl	808cda4 <__aeabi_fmul>
 808a9f6:	f002 fb9b 	bl	808d130 <__aeabi_f2iz>
 808a9fa:	4b04      	ldr	r3, [pc, #16]	; (808aa0c <_ZN9TimeClass4zoneEf+0x34>)
 808a9fc:	6018      	str	r0, [r3, #0]
 808a9fe:	bd10      	pop	{r4, pc}
 808aa00:	c1400000 	.word	0xc1400000
 808aa04:	41600000 	.word	0x41600000
 808aa08:	45610000 	.word	0x45610000
 808aa0c:	20000c0c 	.word	0x20000c0c

0808aa10 <_ZN9TimeClass7setTimeEl>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
 808aa10:	b508      	push	{r3, lr}
    HAL_RTC_Set_UnixTime(t);
 808aa12:	f7fe fd73 	bl	80894fc <HAL_RTC_Set_UnixTime>
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}
 808aa16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
    HAL_RTC_Set_UnixTime(t);
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
 808aa1a:	2200      	movs	r2, #0
 808aa1c:	4611      	mov	r1, r2
 808aa1e:	4610      	mov	r0, r2
 808aa20:	f7fe bee4 	b.w	80897ec <system_notify_time_changed>

0808aa24 <_ZN9TimeClass7timeStrEl>:
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 808aa24:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 808aa26:	4b0e      	ldr	r3, [pc, #56]	; (808aa60 <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 808aa28:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 808aa2a:	681b      	ldr	r3, [r3, #0]
 808aa2c:	a802      	add	r0, sp, #8
 808aa2e:	4419      	add	r1, r3
 808aa30:	4b0c      	ldr	r3, [pc, #48]	; (808aa64 <_ZN9TimeClass7timeStrEl+0x40>)
 808aa32:	681b      	ldr	r3, [r3, #0]
 808aa34:	4419      	add	r1, r3
 808aa36:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 808aa3a:	f002 fdf5 	bl	808d628 <localtime>
        char* ascstr = asctime(calendar_time);
 808aa3e:	f002 fda1 	bl	808d584 <asctime>
 808aa42:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 808aa44:	f003 fc9a 	bl	808e37c <strlen>
        ascstr[len-1] = 0; // remove final newline
 808aa48:	2300      	movs	r3, #0
 808aa4a:	4428      	add	r0, r5
 808aa4c:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 808aa50:	4629      	mov	r1, r5
 808aa52:	4620      	mov	r0, r4
 808aa54:	f7ff fb53 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
}
 808aa58:	4620      	mov	r0, r4
 808aa5a:	b003      	add	sp, #12
 808aa5c:	bd30      	pop	{r4, r5, pc}
 808aa5e:	bf00      	nop
 808aa60:	20000c0c 	.word	0x20000c0c
 808aa64:	20000c04 	.word	0x20000c04

0808aa68 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 808aa68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808aa6c:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    strcpy(format_str, format);
 808aa6e:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 808aa70:	4607      	mov	r7, r0
 808aa72:	4689      	mov	r9, r1
    char format_str[64];
    strcpy(format_str, format);
 808aa74:	4620      	mov	r0, r4
 808aa76:	4611      	mov	r1, r2
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 808aa78:	461d      	mov	r5, r3
    char format_str[64];
    strcpy(format_str, format);
 808aa7a:	f002 ff47 	bl	808d90c <strcpy>
    size_t len = strlen(format_str);
 808aa7e:	4620      	mov	r0, r4
 808aa80:	f003 fc7c 	bl	808e37c <strlen>
 808aa84:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 808aa86:	b925      	cbnz	r5, 808aa92 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2a>
        strcpy(time_zone_str, "Z");
 808aa88:	4924      	ldr	r1, [pc, #144]	; (808ab1c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb4>)
 808aa8a:	a803      	add	r0, sp, #12
 808aa8c:	f002 ff3e 	bl	808d90c <strcpy>
 808aa90:	e013      	b.n	808aaba <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x52>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 808aa92:	213c      	movs	r1, #60	; 0x3c
 808aa94:	fb95 f2f1 	sdiv	r2, r5, r1
 808aa98:	2a00      	cmp	r2, #0
 808aa9a:	bfb8      	it	lt
 808aa9c:	4252      	neglt	r2, r2
 808aa9e:	fb92 f3f1 	sdiv	r3, r2, r1
 808aaa2:	fb01 2213 	mls	r2, r1, r3, r2
 808aaa6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808aaaa:	9200      	str	r2, [sp, #0]
 808aaac:	fb95 f3f3 	sdiv	r3, r5, r3
 808aab0:	4a1b      	ldr	r2, [pc, #108]	; (808ab20 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb8>)
 808aab2:	2110      	movs	r1, #16
 808aab4:	a803      	add	r0, sp, #12
 808aab6:	f7fe ff77 	bl	80899a8 <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 808aaba:	4625      	mov	r5, r4
 808aabc:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 808aabe:	f108 3aff 	add.w	sl, r8, #4294967295
 808aac2:	45b2      	cmp	sl, r6
 808aac4:	d91b      	bls.n	808aafe <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x96>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 808aac6:	782b      	ldrb	r3, [r5, #0]
 808aac8:	2b25      	cmp	r3, #37	; 0x25
 808aaca:	d116      	bne.n	808aafa <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
 808aacc:	786b      	ldrb	r3, [r5, #1]
 808aace:	2b7a      	cmp	r3, #122	; 0x7a
 808aad0:	d113      	bne.n	808aafa <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
        {
            size_t tzlen = strlen(time_zone_str);
 808aad2:	a803      	add	r0, sp, #12
 808aad4:	f003 fc52 	bl	808e37c <strlen>
 808aad8:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 808aada:	4430      	add	r0, r6
 808aadc:	ebc6 020a 	rsb	r2, r6, sl
 808aae0:	1ca9      	adds	r1, r5, #2
 808aae2:	4420      	add	r0, r4
 808aae4:	f002 febf 	bl	808d866 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 808aae8:	4642      	mov	r2, r8
 808aaea:	a903      	add	r1, sp, #12
 808aaec:	4628      	mov	r0, r5
 808aaee:	f002 feba 	bl	808d866 <memcpy>
            len = strlen(format_str);
 808aaf2:	4620      	mov	r0, r4
 808aaf4:	f003 fc42 	bl	808e37c <strlen>
 808aaf8:	4680      	mov	r8, r0
 808aafa:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 808aafc:	e7de      	b.n	808aabc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x54>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
 808aafe:	464b      	mov	r3, r9
 808ab00:	4622      	mov	r2, r4
 808ab02:	2132      	movs	r1, #50	; 0x32
 808ab04:	a807      	add	r0, sp, #28
 808ab06:	f002 ff85 	bl	808da14 <strftime>
    return String(buf);
 808ab0a:	a907      	add	r1, sp, #28
 808ab0c:	4638      	mov	r0, r7
 808ab0e:	f7ff faf6 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
}
 808ab12:	4638      	mov	r0, r7
 808ab14:	b024      	add	sp, #144	; 0x90
 808ab16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808ab1a:	bf00      	nop
 808ab1c:	08091eee 	.word	0x08091eee
 808ab20:	08093109 	.word	0x08093109

0808ab24 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
 808ab24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 808ab26:	4605      	mov	r5, r0
 808ab28:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
 808ab2a:	461c      	mov	r4, r3
 808ab2c:	b913      	cbnz	r3, 808ab34 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
 808ab2e:	4b12      	ldr	r3, [pc, #72]	; (808ab78 <_ZN9TimeClass6formatElPKc+0x54>)
 808ab30:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
 808ab32:	b12c      	cbz	r4, 808ab40 <_ZN9TimeClass6formatElPKc+0x1c>
 808ab34:	4b11      	ldr	r3, [pc, #68]	; (808ab7c <_ZN9TimeClass6formatElPKc+0x58>)
 808ab36:	4620      	mov	r0, r4
 808ab38:	6819      	ldr	r1, [r3, #0]
 808ab3a:	f002 fedd 	bl	808d8f8 <strcmp>
 808ab3e:	b920      	cbnz	r0, 808ab4a <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
 808ab40:	9901      	ldr	r1, [sp, #4]
 808ab42:	4628      	mov	r0, r5
 808ab44:	f7ff ff6e 	bl	808aa24 <_ZN9TimeClass7timeStrEl>
 808ab48:	e013      	b.n	808ab72 <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
 808ab4a:	4f0d      	ldr	r7, [pc, #52]	; (808ab80 <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
 808ab4c:	9a01      	ldr	r2, [sp, #4]
 808ab4e:	683b      	ldr	r3, [r7, #0]
 808ab50:	4e0c      	ldr	r6, [pc, #48]	; (808ab84 <_ZN9TimeClass6formatElPKc+0x60>)
 808ab52:	441a      	add	r2, r3
 808ab54:	6833      	ldr	r3, [r6, #0]
 808ab56:	a802      	add	r0, sp, #8
 808ab58:	4413      	add	r3, r2
 808ab5a:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
 808ab5e:	f002 fd63 	bl	808d628 <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
 808ab62:	683a      	ldr	r2, [r7, #0]
 808ab64:	6833      	ldr	r3, [r6, #0]
 808ab66:	4601      	mov	r1, r0
 808ab68:	4413      	add	r3, r2
 808ab6a:	4628      	mov	r0, r5
 808ab6c:	4622      	mov	r2, r4
 808ab6e:	f7ff ff7b 	bl	808aa68 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
 808ab72:	4628      	mov	r0, r5
 808ab74:	b003      	add	sp, #12
 808ab76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808ab78:	20000c00 	.word	0x20000c00
 808ab7c:	200000dc 	.word	0x200000dc
 808ab80:	20000c0c 	.word	0x20000c0c
 808ab84:	20000c04 	.word	0x20000c04

0808ab88 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 808ab88:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 808ab8a:	2000      	movs	r0, #0
 808ab8c:	f7fe fcd6 	bl	808953c <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 808ab90:	4604      	mov	r4, r0
 808ab92:	b968      	cbnz	r0, 808abb0 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 808ab94:	f7fe fdea 	bl	808976c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 808ab98:	2801      	cmp	r0, #1
 808ab9a:	d10b      	bne.n	808abb4 <_ZN9TimeClass7isValidEv+0x2c>
 808ab9c:	4620      	mov	r0, r4
 808ab9e:	f7fe fe1d 	bl	80897dc <system_thread_get_state>
 808aba2:	b938      	cbnz	r0, 808abb4 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 808aba4:	f7ff ff00 	bl	808a9a8 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 808aba8:	b930      	cbnz	r0, 808abb8 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 808abaa:	f7fe fe9d 	bl	80898e8 <spark_process>
 808abae:	e7f9      	b.n	808aba4 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 808abb0:	2001      	movs	r0, #1
 808abb2:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 808abb4:	2000      	movs	r0, #0
 808abb6:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 808abb8:	f7ff fef6 	bl	808a9a8 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 808abbc:	2000      	movs	r0, #0
 808abbe:	f7fe fcbd 	bl	808953c <HAL_RTC_Time_Is_Valid>
 808abc2:	3000      	adds	r0, #0
 808abc4:	bf18      	it	ne
 808abc6:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 808abc8:	bd10      	pop	{r4, pc}

0808abca <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 808abca:	b508      	push	{r3, lr}
    (void)isValid();
 808abcc:	f7ff ffdc 	bl	808ab88 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 808abd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 808abd4:	f7fe bc8a 	b.w	80894ec <HAL_RTC_Get_UnixTime>

0808abd8 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
 808abd8:	b508      	push	{r3, lr}
	return hour(now());
 808abda:	f7ff fff6 	bl	808abca <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
 808abde:	f7ff feb1 	bl	808a944 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
 808abe2:	4b01      	ldr	r3, [pc, #4]	; (808abe8 <_ZN9TimeClass4hourEv+0x10>)
 808abe4:	6898      	ldr	r0, [r3, #8]
 808abe6:	bd08      	pop	{r3, pc}
 808abe8:	20000bd8 	.word	0x20000bd8

0808abec <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
 808abec:	b508      	push	{r3, lr}
	return minute(now());
 808abee:	f7ff ffec 	bl	808abca <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
 808abf2:	f7ff fea7 	bl	808a944 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
 808abf6:	4b01      	ldr	r3, [pc, #4]	; (808abfc <_ZN9TimeClass6minuteEv+0x10>)
 808abf8:	6858      	ldr	r0, [r3, #4]
 808abfa:	bd08      	pop	{r3, pc}
 808abfc:	20000bd8 	.word	0x20000bd8

0808ac00 <_ZN9TimeClass6secondEv>:
	return calendar_time_cache.tm_min;
}

/* current seconds */
int TimeClass::second()
{
 808ac00:	b508      	push	{r3, lr}
	return second(now());
 808ac02:	f7ff ffe2 	bl	808abca <_ZN9TimeClass3nowEv>
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
	Refresh_UnixTime_Cache(t);
 808ac06:	f7ff fe9d 	bl	808a944 <_ZL22Refresh_UnixTime_Cachel>

/* current seconds */
int TimeClass::second()
{
	return second(now());
}
 808ac0a:	4b01      	ldr	r3, [pc, #4]	; (808ac10 <_ZN9TimeClass6secondEv+0x10>)
 808ac0c:	6818      	ldr	r0, [r3, #0]
 808ac0e:	bd08      	pop	{r3, pc}
 808ac10:	20000bd8 	.word	0x20000bd8

0808ac14 <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
 808ac14:	b508      	push	{r3, lr}
	return day(now());
 808ac16:	f7ff ffd8 	bl	808abca <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
 808ac1a:	f7ff fe93 	bl	808a944 <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
 808ac1e:	4b01      	ldr	r3, [pc, #4]	; (808ac24 <_ZN9TimeClass3dayEv+0x10>)
 808ac20:	68d8      	ldr	r0, [r3, #12]
 808ac22:	bd08      	pop	{r3, pc}
 808ac24:	20000bd8 	.word	0x20000bd8

0808ac28 <_ZN9TimeClass5monthEv>:
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
}

/* current month */
int TimeClass::month()
{
 808ac28:	b508      	push	{r3, lr}
	return month(now());
 808ac2a:	f7ff ffce 	bl	808abca <_ZN9TimeClass3nowEv>
}
 808ac2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current month */
int TimeClass::month()
{
	return month(now());
 808ac32:	f7ff bec7 	b.w	808a9c4 <_ZN9TimeClass5monthEl>
	...

0808ac38 <_ZN9TimeClass4yearEv>:
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
}

/* current four digit year */
int TimeClass::year()
{
 808ac38:	b508      	push	{r3, lr}
	return year(now());
 808ac3a:	f7ff ffc6 	bl	808abca <_ZN9TimeClass3nowEv>
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
	Refresh_UnixTime_Cache(t);
 808ac3e:	f7ff fe81 	bl	808a944 <_ZL22Refresh_UnixTime_Cachel>

/* current four digit year */
int TimeClass::year()
{
	return year(now());
}
 808ac42:	4b01      	ldr	r3, [pc, #4]	; (808ac48 <_ZN9TimeClass4yearEv+0x10>)
 808ac44:	6958      	ldr	r0, [r3, #20]
 808ac46:	bd08      	pop	{r3, pc}
 808ac48:	20000bd8 	.word	0x20000bd8

0808ac4c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 808ac4c:	4b02      	ldr	r3, [pc, #8]	; (808ac58 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 808ac4e:	681a      	ldr	r2, [r3, #0]
 808ac50:	4b02      	ldr	r3, [pc, #8]	; (808ac5c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 808ac52:	601a      	str	r2, [r3, #0]
 808ac54:	4770      	bx	lr
 808ac56:	bf00      	nop
 808ac58:	200000dc 	.word	0x200000dc
 808ac5c:	20000c00 	.word	0x20000c00

0808ac60 <setADCSampleTime>:
 *
 * @retval None
 */
void setADCSampleTime(uint8_t ADC_SampleTime)
{
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
 808ac60:	f7fe bbcc 	b.w	80893fc <HAL_ADC_Set_Sample_Time>

0808ac64 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 808ac64:	2100      	movs	r1, #0
 808ac66:	f7fe bd91 	b.w	808978c <system_delay_ms>

0808ac6a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 808ac6a:	b510      	push	{r4, lr}
 808ac6c:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808ac6e:	f7fe f92d 	bl	8088ecc <_ZNSt14_Function_baseD1Ev>
 808ac72:	4620      	mov	r0, r4
 808ac74:	bd10      	pop	{r4, pc}

0808ac76 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 808ac76:	b513      	push	{r0, r1, r4, lr}
 808ac78:	460b      	mov	r3, r1
 808ac7a:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808ac7c:	c803      	ldmia	r0, {r0, r1}
 808ac7e:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 808ac82:	e893 0003 	ldmia.w	r3, {r0, r1}
 808ac86:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 808ac8a:	e89d 0003 	ldmia.w	sp, {r0, r1}
 808ac8e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 808ac92:	b002      	add	sp, #8
 808ac94:	bd10      	pop	{r4, pc}
	...

0808ac98 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808ac98:	4803      	ldr	r0, [pc, #12]	; (808aca8 <_GLOBAL__sub_I_RGB+0x10>)
 808ac9a:	2300      	movs	r3, #0
 808ac9c:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 808ac9e:	4a03      	ldr	r2, [pc, #12]	; (808acac <_GLOBAL__sub_I_RGB+0x14>)
 808aca0:	4903      	ldr	r1, [pc, #12]	; (808acb0 <_GLOBAL__sub_I_RGB+0x18>)
 808aca2:	f001 b91f 	b.w	808bee4 <__aeabi_atexit>
 808aca6:	bf00      	nop
 808aca8:	20000c10 	.word	0x20000c10
 808acac:	200001d0 	.word	0x200001d0
 808acb0:	0808ac6b 	.word	0x0808ac6b

0808acb4 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
 808acb4:	6800      	ldr	r0, [r0, #0]
 808acb6:	f000 beb9 	b.w	808ba2c <_ZN7TwoWire4lockEv>

0808acba <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 808acba:	b510      	push	{r4, lr}
 808acbc:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
 808acbe:	6001      	str	r1, [r0, #0]
 808acc0:	7102      	strb	r2, [r0, #4]

    if (lock_) {
 808acc2:	b10a      	cbz	r2, 808acc8 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 808acc4:	f7ff fff6 	bl	808acb4 <_ZN9FuelGauge4lockEv>
    }
}
 808acc8:	4620      	mov	r0, r4
 808acca:	bd10      	pop	{r4, pc}

0808accc <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
 808accc:	b538      	push	{r3, r4, r5, lr}
 808acce:	4604      	mov	r4, r0
 808acd0:	460d      	mov	r5, r1
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808acd2:	f001 f8e7 	bl	808bea4 <_Z20__fetch_global_Wire3v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
 808acd6:	462a      	mov	r2, r5
 808acd8:	4601      	mov	r1, r0
 808acda:	4620      	mov	r0, r4
 808acdc:	f7ff ffed 	bl	808acba <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
 808ace0:	4620      	mov	r0, r4
 808ace2:	bd38      	pop	{r3, r4, r5, pc}

0808ace4 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
 808ace4:	6800      	ldr	r0, [r0, #0]
 808ace6:	f000 beaa 	b.w	808ba3e <_ZN7TwoWire6unlockEv>

0808acea <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 808acea:	b510      	push	{r4, lr}
{
    if (lock_) {
 808acec:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 808acee:	4604      	mov	r4, r0
{
    if (lock_) {
 808acf0:	b10b      	cbz	r3, 808acf6 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 808acf2:	f7ff fff7 	bl	808ace4 <_ZN9FuelGauge6unlockEv>
    }
}
 808acf6:	4620      	mov	r0, r4
 808acf8:	bd10      	pop	{r4, pc}

0808acfa <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 808acfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808acfc:	4604      	mov	r4, r0
 808acfe:	460f      	mov	r7, r1
 808ad00:	4616      	mov	r6, r2
 808ad02:	461d      	mov	r5, r3
 808ad04:	f7ff ffd6 	bl	808acb4 <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
 808ad08:	6820      	ldr	r0, [r4, #0]
 808ad0a:	2136      	movs	r1, #54	; 0x36
 808ad0c:	f000 fe80 	bl	808ba10 <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
 808ad10:	6820      	ldr	r0, [r4, #0]
 808ad12:	4639      	mov	r1, r7
 808ad14:	6803      	ldr	r3, [r0, #0]
 808ad16:	689b      	ldr	r3, [r3, #8]
 808ad18:	4798      	blx	r3
    i2c_.endTransmission(true);
 808ad1a:	2101      	movs	r1, #1
 808ad1c:	6820      	ldr	r0, [r4, #0]
 808ad1e:	f000 fe7a 	bl	808ba16 <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
 808ad22:	2202      	movs	r2, #2
 808ad24:	2136      	movs	r1, #54	; 0x36
 808ad26:	2301      	movs	r3, #1
 808ad28:	6820      	ldr	r0, [r4, #0]
 808ad2a:	f000 fe68 	bl	808b9fe <_ZN7TwoWire11requestFromEiii>
    MSB = i2c_.read();
 808ad2e:	6820      	ldr	r0, [r4, #0]
 808ad30:	6803      	ldr	r3, [r0, #0]
 808ad32:	695b      	ldr	r3, [r3, #20]
 808ad34:	4798      	blx	r3
 808ad36:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
 808ad38:	6820      	ldr	r0, [r4, #0]
 808ad3a:	6803      	ldr	r3, [r0, #0]
 808ad3c:	695b      	ldr	r3, [r3, #20]
 808ad3e:	4798      	blx	r3
 808ad40:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
 808ad42:	4620      	mov	r0, r4
}
 808ad44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 808ad48:	f7ff bfcc 	b.w	808ace4 <_ZN9FuelGauge6unlockEv>

0808ad4c <_ZN9FuelGauge6getSoCEv>:
	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
 808ad4c:	b513      	push	{r0, r1, r4, lr}

	byte MSB = 0;
 808ad4e:	2200      	movs	r2, #0
	byte LSB = 0;
 808ad50:	ab02      	add	r3, sp, #8
 808ad52:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
 808ad56:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
 808ad5a:	2104      	movs	r1, #4
 808ad5c:	f10d 0206 	add.w	r2, sp, #6
 808ad60:	f7ff ffcb 	bl	808acfa <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
 808ad64:	f89d 0007 	ldrb.w	r0, [sp, #7]
 808ad68:	f001 fb60 	bl	808c42c <__aeabi_i2d>
 808ad6c:	2200      	movs	r2, #0
 808ad6e:	4b08      	ldr	r3, [pc, #32]	; (808ad90 <_ZN9FuelGauge6getSoCEv+0x44>)
 808ad70:	f001 fbc2 	bl	808c4f8 <__aeabi_dmul>
 808ad74:	f001 feb8 	bl	808cae8 <__aeabi_d2f>
 808ad78:	4604      	mov	r4, r0
 808ad7a:	f89d 0006 	ldrb.w	r0, [sp, #6]
 808ad7e:	f001 ffbd 	bl	808ccfc <__aeabi_i2f>
 808ad82:	4601      	mov	r1, r0
 808ad84:	4620      	mov	r0, r4
 808ad86:	f001 ff05 	bl	808cb94 <__addsf3>
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
 808ad8a:	b002      	add	sp, #8
 808ad8c:	bd10      	pop	{r4, pc}
 808ad8e:	bf00      	nop
 808ad90:	3f700000 	.word	0x3f700000

0808ad94 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 808ad94:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 808ad96:	4b18      	ldr	r3, [pc, #96]	; (808adf8 <serialEventRun+0x64>)
 808ad98:	b133      	cbz	r3, 808ada8 <serialEventRun+0x14>
 808ad9a:	f000 fc53 	bl	808b644 <_Z16_fetch_usbserialv>
 808ad9e:	6803      	ldr	r3, [r0, #0]
 808ada0:	691b      	ldr	r3, [r3, #16]
 808ada2:	4798      	blx	r3
 808ada4:	2800      	cmp	r0, #0
 808ada6:	dc1e      	bgt.n	808ade6 <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 808ada8:	4b14      	ldr	r3, [pc, #80]	; (808adfc <serialEventRun+0x68>)
 808adaa:	b133      	cbz	r3, 808adba <serialEventRun+0x26>
 808adac:	f000 fd98 	bl	808b8e0 <_Z22__fetch_global_Serial1v>
 808adb0:	6803      	ldr	r3, [r0, #0]
 808adb2:	691b      	ldr	r3, [r3, #16]
 808adb4:	4798      	blx	r3
 808adb6:	2800      	cmp	r0, #0
 808adb8:	dc18      	bgt.n	808adec <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 808adba:	4b11      	ldr	r3, [pc, #68]	; (808ae00 <serialEventRun+0x6c>)
 808adbc:	b10b      	cbz	r3, 808adc2 <serialEventRun+0x2e>
 808adbe:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 808adc2:	4b10      	ldr	r3, [pc, #64]	; (808ae04 <serialEventRun+0x70>)
 808adc4:	b10b      	cbz	r3, 808adca <serialEventRun+0x36>
 808adc6:	f7f5 ffaf 	bl	8080d28 <_Z15serialEventRun4v>
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 808adca:	4b0f      	ldr	r3, [pc, #60]	; (808ae08 <serialEventRun+0x74>)
 808adcc:	b10b      	cbz	r3, 808add2 <serialEventRun+0x3e>
 808adce:	f7f5 ffe5 	bl	8080d9c <_Z15serialEventRun5v>
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 808add2:	4b0e      	ldr	r3, [pc, #56]	; (808ae0c <serialEventRun+0x78>)
 808add4:	b17b      	cbz	r3, 808adf6 <serialEventRun+0x62>
 808add6:	f000 fc71 	bl	808b6bc <_Z17_fetch_usbserial1v>
 808adda:	6803      	ldr	r3, [r0, #0]
 808addc:	691b      	ldr	r3, [r3, #16]
 808adde:	4798      	blx	r3
 808ade0:	2800      	cmp	r0, #0
 808ade2:	dc06      	bgt.n	808adf2 <serialEventRun+0x5e>
 808ade4:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 808ade6:	f3af 8000 	nop.w
 808adea:	e7dd      	b.n	808ada8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 808adec:	f3af 8000 	nop.w
 808adf0:	e7e3      	b.n	808adba <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 808adf2:	f3af 8000 	nop.w
 808adf6:	bd08      	pop	{r3, pc}
	...
 808ae04:	08080d29 	.word	0x08080d29
 808ae08:	08080d9d 	.word	0x08080d9d
 808ae0c:	00000000 	.word	0x00000000

0808ae10 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 808ae10:	b508      	push	{r3, lr}
	serialEventRun();
 808ae12:	f7ff ffbf 	bl	808ad94 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 808ae16:	f7fe fb61 	bl	80894dc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 808ae1a:	4b01      	ldr	r3, [pc, #4]	; (808ae20 <_post_loop+0x10>)
 808ae1c:	6018      	str	r0, [r3, #0]
 808ae1e:	bd08      	pop	{r3, pc}
 808ae20:	200010ec 	.word	0x200010ec

0808ae24 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 808ae24:	4802      	ldr	r0, [pc, #8]	; (808ae30 <_Z33system_initialize_user_backup_ramv+0xc>)
 808ae26:	4a03      	ldr	r2, [pc, #12]	; (808ae34 <_Z33system_initialize_user_backup_ramv+0x10>)
 808ae28:	4903      	ldr	r1, [pc, #12]	; (808ae38 <_Z33system_initialize_user_backup_ramv+0x14>)
 808ae2a:	1a12      	subs	r2, r2, r0
 808ae2c:	f002 bd1b 	b.w	808d866 <memcpy>
 808ae30:	40024000 	.word	0x40024000
 808ae34:	40024004 	.word	0x40024004
 808ae38:	080939a8 	.word	0x080939a8

0808ae3c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 808ae3c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 808ae3e:	2300      	movs	r3, #0
 808ae40:	9300      	str	r3, [sp, #0]
 808ae42:	461a      	mov	r2, r3
 808ae44:	f06f 0177 	mvn.w	r1, #119	; 0x77
 808ae48:	f7fe fce2 	bl	8089810 <system_ctrl_set_result>
}
 808ae4c:	b003      	add	sp, #12
 808ae4e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0808ae54 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 808ae54:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 808ae56:	8843      	ldrh	r3, [r0, #2]
 808ae58:	2b0a      	cmp	r3, #10
 808ae5a:	d008      	beq.n	808ae6e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 808ae5c:	2b50      	cmp	r3, #80	; 0x50
 808ae5e:	d109      	bne.n	808ae74 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 808ae60:	4b09      	ldr	r3, [pc, #36]	; (808ae88 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 808ae62:	681b      	ldr	r3, [r3, #0]
 808ae64:	b13b      	cbz	r3, 808ae76 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 808ae66:	b003      	add	sp, #12
 808ae68:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 808ae6c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 808ae6e:	f7ff ffe5 	bl	808ae3c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 808ae72:	e006      	b.n	808ae82 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 808ae74:	2300      	movs	r3, #0
 808ae76:	9300      	str	r3, [sp, #0]
 808ae78:	461a      	mov	r2, r3
 808ae7a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 808ae7e:	f7fe fcc7 	bl	8089810 <system_ctrl_set_result>
        break;
    }
}
 808ae82:	b003      	add	sp, #12
 808ae84:	f85d fb04 	ldr.w	pc, [sp], #4
 808ae88:	20000c20 	.word	0x20000c20

0808ae8c <module_user_init_hook>:

void module_user_init_hook()
{
 808ae8c:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 808ae8e:	4c10      	ldr	r4, [pc, #64]	; (808aed0 <module_user_init_hook+0x44>)
 808ae90:	4d10      	ldr	r5, [pc, #64]	; (808aed4 <module_user_init_hook+0x48>)
 808ae92:	6823      	ldr	r3, [r4, #0]
 808ae94:	42ab      	cmp	r3, r5
 808ae96:	4b10      	ldr	r3, [pc, #64]	; (808aed8 <module_user_init_hook+0x4c>)
 808ae98:	bf0c      	ite	eq
 808ae9a:	2201      	moveq	r2, #1
 808ae9c:	2200      	movne	r2, #0
 808ae9e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 808aea0:	d002      	beq.n	808aea8 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 808aea2:	f7ff ffbf 	bl	808ae24 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 808aea6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 808aea8:	f7fe fb08 	bl	80894bc <HAL_RNG_GetRandomNumber>
 808aeac:	4604      	mov	r4, r0
    srand(seed);
 808aeae:	f002 fced 	bl	808d88c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 808aeb2:	4b0a      	ldr	r3, [pc, #40]	; (808aedc <module_user_init_hook+0x50>)
 808aeb4:	b113      	cbz	r3, 808aebc <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 808aeb6:	4620      	mov	r0, r4
 808aeb8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 808aebc:	2100      	movs	r1, #0
 808aebe:	4807      	ldr	r0, [pc, #28]	; (808aedc <module_user_init_hook+0x50>)
 808aec0:	f7fe fd3a 	bl	8089938 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 808aec4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 808aec8:	2100      	movs	r1, #0
 808aeca:	4805      	ldr	r0, [pc, #20]	; (808aee0 <module_user_init_hook+0x54>)
 808aecc:	f7fe bc96 	b.w	80897fc <system_ctrl_set_app_request_handler>
 808aed0:	40024000 	.word	0x40024000
 808aed4:	9a271c1e 	.word	0x9a271c1e
 808aed8:	20000c24 	.word	0x20000c24
 808aedc:	00000000 	.word	0x00000000
 808aee0:	0808ae55 	.word	0x0808ae55

0808aee4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 808aee4:	4770      	bx	lr

0808aee6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 808aee6:	2000      	movs	r0, #0
 808aee8:	4770      	bx	lr

0808aeea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 808aeea:	b510      	push	{r4, lr}
 808aeec:	4604      	mov	r4, r0
 808aeee:	2110      	movs	r1, #16
 808aef0:	f000 fffd 	bl	808beee <_ZdlPvj>
 808aef4:	4620      	mov	r0, r4
 808aef6:	bd10      	pop	{r4, pc}

0808aef8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 808aef8:	b508      	push	{r3, lr}
      { delete this; }
 808aefa:	b108      	cbz	r0, 808af00 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 808aefc:	f7ff fff5 	bl	808aeea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 808af00:	bd08      	pop	{r3, pc}

0808af02 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 808af02:	2200      	movs	r2, #0
 808af04:	6002      	str	r2, [r0, #0]
 808af06:	f64f 729c 	movw	r2, #65436	; 0xff9c
 808af0a:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 808af0c:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808af0e:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 808af12:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 808af14:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808af16:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 808af18:	680c      	ldr	r4, [r1, #0]
 808af1a:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 808af1c:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 808af1e:	bd10      	pop	{r4, pc}

0808af20 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 808af20:	b510      	push	{r4, lr}
 808af22:	4604      	mov	r4, r0
    free((void*)msg_);
 808af24:	6800      	ldr	r0, [r0, #0]
 808af26:	f7fe fd17 	bl	8089958 <free>
}
 808af2a:	4620      	mov	r0, r4
 808af2c:	bd10      	pop	{r4, pc}

0808af2e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 808af2e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 808af30:	68c4      	ldr	r4, [r0, #12]
 808af32:	b1f4      	cbz	r4, 808af72 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 808af34:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 808af36:	2b02      	cmp	r3, #2
 808af38:	d103      	bne.n	808af42 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 808af3a:	f104 000c 	add.w	r0, r4, #12
 808af3e:	f7ff ffef 	bl	808af20 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 808af42:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 808af44:	b135      	cbz	r5, 808af54 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808af46:	4628      	mov	r0, r5
 808af48:	f7fd ffc0 	bl	8088ecc <_ZNSt14_Function_baseD1Ev>
 808af4c:	2110      	movs	r1, #16
 808af4e:	4628      	mov	r0, r5
 808af50:	f000 ffcd 	bl	808beee <_ZdlPvj>
 808af54:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 808af56:	b135      	cbz	r5, 808af66 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 808af58:	4628      	mov	r0, r5
 808af5a:	f7fd ffb7 	bl	8088ecc <_ZNSt14_Function_baseD1Ev>
 808af5e:	2110      	movs	r1, #16
 808af60:	4628      	mov	r0, r5
 808af62:	f000 ffc4 	bl	808beee <_ZdlPvj>
 808af66:	4620      	mov	r0, r4
 808af68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808af6c:	2114      	movs	r1, #20
 808af6e:	f000 bfbe 	b.w	808beee <_ZdlPvj>
 808af72:	bd38      	pop	{r3, r4, r5, pc}

0808af74 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 808af74:	b510      	push	{r4, lr}
 808af76:	b088      	sub	sp, #32
 808af78:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 808af7a:	4668      	mov	r0, sp
 808af7c:	f7ff f8bf 	bl	808a0fe <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 808af80:	4669      	mov	r1, sp
 808af82:	a804      	add	r0, sp, #16
 808af84:	f7ff f8fa 	bl	808a17c <_ZN6StringC1ERKS_>
 808af88:	a804      	add	r0, sp, #16
 808af8a:	47a0      	blx	r4
 808af8c:	4604      	mov	r4, r0
 808af8e:	a804      	add	r0, sp, #16
 808af90:	f7ff f86e 	bl	808a070 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 808af94:	4668      	mov	r0, sp
 808af96:	f7ff f86b 	bl	808a070 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 808af9a:	4620      	mov	r0, r4
 808af9c:	b008      	add	sp, #32
 808af9e:	bd10      	pop	{r4, pc}

0808afa0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 808afa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 808afa2:	4607      	mov	r7, r0
 808afa4:	460e      	mov	r6, r1
 808afa6:	4615      	mov	r5, r2
 808afa8:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 808afaa:	2410      	movs	r4, #16
 808afac:	4622      	mov	r2, r4
 808afae:	2100      	movs	r1, #0
 808afb0:	4668      	mov	r0, sp
 808afb2:	f002 fc63 	bl	808d87c <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 808afb6:	2200      	movs	r2, #0
 808afb8:	4669      	mov	r1, sp
 808afba:	4610      	mov	r0, r2
         size = sizeof(*this);
 808afbc:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
 808afc0:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 808afc2:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 808afc4:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 808afc6:	f7fe fc87 	bl	80898d8 <spark_function>
}
 808afca:	b005      	add	sp, #20
 808afcc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808afce <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 808afce:	b513      	push	{r0, r1, r4, lr}
 808afd0:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 808afd2:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 808afd6:	2300      	movs	r3, #0
 808afd8:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 808afda:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 808afdc:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 808afde:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808afe0:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 808afe2:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 808afe4:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808afe6:	f7f9 f887 	bl	80840f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808afea:	4620      	mov	r0, r4
 808afec:	b002      	add	sp, #8
 808afee:	bd10      	pop	{r4, pc}

0808aff0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 808aff0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 808aff2:	460c      	mov	r4, r1
 808aff4:	4606      	mov	r6, r0
 808aff6:	460f      	mov	r7, r1
 808aff8:	f854 3b04 	ldr.w	r3, [r4], #4
 808affc:	ad02      	add	r5, sp, #8
 808affe:	f845 3d08 	str.w	r3, [r5, #-8]!
 808b002:	4621      	mov	r1, r4
 808b004:	a801      	add	r0, sp, #4
 808b006:	f7ff fc8d 	bl	808a924 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 808b00a:	4629      	mov	r1, r5
 808b00c:	4630      	mov	r0, r6
 808b00e:	f7ff ffde 	bl	808afce <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808b012:	a801      	add	r0, sp, #4
 808b014:	f7f9 f870 	bl	80840f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808b018:	4620      	mov	r0, r4
 808b01a:	f7f9 f86d 	bl	80840f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 808b01e:	4638      	mov	r0, r7
 808b020:	2108      	movs	r1, #8
 808b022:	f000 ff64 	bl	808beee <_ZdlPvj>
        return p;
    }
 808b026:	4630      	mov	r0, r6
 808b028:	b003      	add	sp, #12
 808b02a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808b02c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 808b02c:	b538      	push	{r3, r4, r5, lr}
 808b02e:	2300      	movs	r3, #0
 808b030:	4604      	mov	r4, r0
 808b032:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808b034:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 808b036:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808b038:	f7f5 f831 	bl	808009e <_Znwj>
 808b03c:	b128      	cbz	r0, 808b04a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 808b03e:	2301      	movs	r3, #1
 808b040:	6043      	str	r3, [r0, #4]
 808b042:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 808b044:	4b02      	ldr	r3, [pc, #8]	; (808b050 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 808b046:	60c5      	str	r5, [r0, #12]
 808b048:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808b04a:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 808b04c:	4620      	mov	r0, r4
 808b04e:	bd38      	pop	{r3, r4, r5, pc}
 808b050:	08093138 	.word	0x08093138

0808b054 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808b054:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 808b056:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808b058:	b90a      	cbnz	r2, 808b05e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 808b05a:	f000 ff4a 	bl	808bef2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808b05e:	68c3      	ldr	r3, [r0, #12]
    }
 808b060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808b064:	4718      	bx	r3

0808b066 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 808b066:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 808b068:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 808b06a:	f100 0110 	add.w	r1, r0, #16
 808b06e:	f7ff fff1 	bl	808b054 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 808b072:	bd08      	pop	{r3, pc}

0808b074 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808b074:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 808b076:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808b078:	b90a      	cbnz	r2, 808b07e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 808b07a:	f000 ff3a 	bl	808bef2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808b07e:	68c3      	ldr	r3, [r0, #12]
    }
 808b080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808b084:	4718      	bx	r3

0808b086 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 808b086:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 808b088:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 808b08a:	f100 0110 	add.w	r1, r0, #16
 808b08e:	f7ff fff1 	bl	808b074 <_ZNKSt8functionIFvRKbEEclES1_>
 808b092:	bd08      	pop	{r3, pc}

0808b094 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 808b094:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808b096:	2300      	movs	r3, #0
 808b098:	6083      	str	r3, [r0, #8]
 808b09a:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 808b09c:	4604      	mov	r4, r0
 808b09e:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 808b0a0:	b12b      	cbz	r3, 808b0ae <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808b0a2:	2202      	movs	r2, #2
 808b0a4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 808b0a6:	68eb      	ldr	r3, [r5, #12]
 808b0a8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 808b0aa:	68ab      	ldr	r3, [r5, #8]
 808b0ac:	60a3      	str	r3, [r4, #8]
	}
    }
 808b0ae:	4620      	mov	r0, r4
 808b0b0:	bd38      	pop	{r3, r4, r5, pc}
	...

0808b0b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 808b0b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 808b0b6:	b089      	sub	sp, #36	; 0x24
 808b0b8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 808b0ba:	4668      	mov	r0, sp
 808b0bc:	f7ff ff21 	bl	808af02 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 808b0c0:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 808b0c4:	2300      	movs	r3, #0
 808b0c6:	f88d 3008 	strb.w	r3, [sp, #8]
 808b0ca:	e8d4 3f4f 	ldrexb	r3, [r4]
 808b0ce:	2b00      	cmp	r3, #0
 808b0d0:	d103      	bne.n	808b0da <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 808b0d2:	e8c4 2f41 	strexb	r1, r2, [r4]
 808b0d6:	2900      	cmp	r1, #0
 808b0d8:	d1f7      	bne.n	808b0ca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 808b0da:	d002      	beq.n	808b0e2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 808b0dc:	f88d 3008 	strb.w	r3, [sp, #8]
 808b0e0:	e063      	b.n	808b1aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 808b0e2:	f114 050c 	adds.w	r5, r4, #12
 808b0e6:	d003      	beq.n	808b0f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 808b0e8:	4669      	mov	r1, sp
 808b0ea:	4628      	mov	r0, r5
 808b0ec:	f7ff ff09 	bl	808af02 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 808b0f0:	f3bf 8f5f 	dmb	sy
 808b0f4:	2301      	movs	r3, #1
 808b0f6:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 808b0f8:	f3bf 8f5f 	dmb	sy
 808b0fc:	f104 0308 	add.w	r3, r4, #8
 808b100:	2000      	movs	r0, #0
 808b102:	e853 6f00 	ldrex	r6, [r3]
 808b106:	e843 0200 	strex	r2, r0, [r3]
 808b10a:	2a00      	cmp	r2, #0
 808b10c:	d1f9      	bne.n	808b102 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 808b10e:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 808b112:	2e00      	cmp	r6, #0
 808b114:	d049      	beq.n	808b1aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 808b116:	f7fe fb51 	bl	80897bc <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 808b11a:	b120      	cbz	r0, 808b126 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 808b11c:	4629      	mov	r1, r5
 808b11e:	4630      	mov	r0, r6
 808b120:	f7ff ff98 	bl	808b054 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 808b124:	e03a      	b.n	808b19c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 808b126:	4631      	mov	r1, r6
 808b128:	a802      	add	r0, sp, #8
 808b12a:	f7ff ffb3 	bl	808b094 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 808b12e:	68e0      	ldr	r0, [r4, #12]
 808b130:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 808b134:	b108      	cbz	r0, 808b13a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 808b136:	f002 fbf1 	bl	808d91c <strdup>
 808b13a:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 808b13c:	2010      	movs	r0, #16
 808b13e:	f8ad 501c 	strh.w	r5, [sp, #28]
 808b142:	f7f4 ffac 	bl	808009e <_Znwj>
 808b146:	4605      	mov	r5, r0
 808b148:	b1e8      	cbz	r0, 808b186 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808b14a:	2700      	movs	r7, #0
 808b14c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808b14e:	2018      	movs	r0, #24
 808b150:	f7f4 ffa5 	bl	808009e <_Znwj>
 808b154:	4604      	mov	r4, r0
 808b156:	b188      	cbz	r0, 808b17c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 808b158:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808b15a:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 808b15c:	a802      	add	r0, sp, #8
 808b15e:	f7ff fd8a 	bl	808ac76 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808b162:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 808b164:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808b166:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808b168:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 808b16a:	9204      	str	r2, [sp, #16]
 808b16c:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 808b16e:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 808b170:	60e3      	str	r3, [r4, #12]
 808b172:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808b176:	9205      	str	r2, [sp, #20]
 808b178:	f7ff fec3 	bl	808af02 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 808b17c:	4b0d      	ldr	r3, [pc, #52]	; (808b1b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808b17e:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 808b180:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 808b182:	4b0d      	ldr	r3, [pc, #52]	; (808b1b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 808b184:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 808b186:	a806      	add	r0, sp, #24
 808b188:	f7ff feca 	bl	808af20 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808b18c:	a802      	add	r0, sp, #8
 808b18e:	f7fd fe9d 	bl	8088ecc <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 808b192:	2200      	movs	r2, #0
 808b194:	4629      	mov	r1, r5
 808b196:	4809      	ldr	r0, [pc, #36]	; (808b1bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 808b198:	f7fe fb18 	bl	80897cc <application_thread_invoke>
 808b19c:	4630      	mov	r0, r6
 808b19e:	f7fd fe95 	bl	8088ecc <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 808b1a2:	2110      	movs	r1, #16
 808b1a4:	4630      	mov	r0, r6
 808b1a6:	f000 fea2 	bl	808beee <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 808b1aa:	4668      	mov	r0, sp
 808b1ac:	f7ff feb8 	bl	808af20 <_ZN8particle5ErrorD1Ev>
    }
 808b1b0:	b009      	add	sp, #36	; 0x24
 808b1b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808b1b4:	0808b067 	.word	0x0808b067
 808b1b8:	0808b2dd 	.word	0x0808b2dd
 808b1bc:	0808b92d 	.word	0x0808b92d

0808b1c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 808b1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808b1c4:	b08b      	sub	sp, #44	; 0x2c
 808b1c6:	4606      	mov	r6, r0
 808b1c8:	460f      	mov	r7, r1
 808b1ca:	4690      	mov	r8, r2
 808b1cc:	4699      	mov	r9, r3
 808b1ce:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808b1d2:	f7fe fb99 	bl	8089908 <spark_cloud_flag_connected>
 808b1d6:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
 808b1d8:	4683      	mov	fp, r0
 808b1da:	bb30      	cbnz	r0, 808b22a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 808b1dc:	f64f 732e 	movw	r3, #65326	; 0xff2e
 808b1e0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 808b1e2:	a905      	add	r1, sp, #20
 808b1e4:	4628      	mov	r0, r5
 808b1e6:	f8ad 3018 	strh.w	r3, [sp, #24]
 808b1ea:	f7ff fe8a 	bl	808af02 <_ZN8particle5ErrorC1EOS0_>
 808b1ee:	2014      	movs	r0, #20
 808b1f0:	f7f4 ff55 	bl	808009e <_Znwj>
 808b1f4:	4604      	mov	r4, r0
 808b1f6:	b158      	cbz	r0, 808b210 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 808b1f8:	2302      	movs	r3, #2
 808b1fa:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 808b1fc:	2301      	movs	r3, #1
 808b1fe:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 808b200:	f8c0 b004 	str.w	fp, [r0, #4]
 808b204:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 808b208:	4629      	mov	r1, r5
 808b20a:	300c      	adds	r0, #12
 808b20c:	f7ff fe79 	bl	808af02 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 808b210:	4630      	mov	r0, r6
 808b212:	4621      	mov	r1, r4
 808b214:	f840 4b04 	str.w	r4, [r0], #4
 808b218:	f7ff ff08 	bl	808b02c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 808b21c:	4628      	mov	r0, r5
 808b21e:	f7ff fe7f 	bl	808af20 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 808b222:	a805      	add	r0, sp, #20
 808b224:	f7ff fe7c 	bl	808af20 <_ZN8particle5ErrorD1Ev>
 808b228:	e052      	b.n	808b2d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 808b22a:	2400      	movs	r4, #0
 808b22c:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 808b22e:	2014      	movs	r0, #20
 808b230:	606c      	str	r4, [r5, #4]
 808b232:	60ac      	str	r4, [r5, #8]
 808b234:	9307      	str	r3, [sp, #28]
 808b236:	f7f4 ff32 	bl	808009e <_Znwj>
 808b23a:	4601      	mov	r1, r0
 808b23c:	b118      	cbz	r0, 808b246 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 808b23e:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 808b240:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 808b242:	6044      	str	r4, [r0, #4]
 808b244:	6084      	str	r4, [r0, #8]
 808b246:	a804      	add	r0, sp, #16
 808b248:	9103      	str	r1, [sp, #12]
 808b24a:	f7ff feef 	bl	808b02c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 808b24e:	4b22      	ldr	r3, [pc, #136]	; (808b2d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 808b250:	2008      	movs	r0, #8
 808b252:	9308      	str	r3, [sp, #32]
 808b254:	f7f4 ff23 	bl	808009e <_Znwj>
 808b258:	4604      	mov	r4, r0
 808b25a:	b128      	cbz	r0, 808b268 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 808b25c:	9b03      	ldr	r3, [sp, #12]
 808b25e:	a904      	add	r1, sp, #16
 808b260:	f840 3b04 	str.w	r3, [r0], #4
 808b264:	f7ff fb5e 	bl	808a924 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 808b268:	9500      	str	r5, [sp, #0]
 808b26a:	fa5f f38a 	uxtb.w	r3, sl
 808b26e:	464a      	mov	r2, r9
 808b270:	4641      	mov	r1, r8
 808b272:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 808b274:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 808b276:	f7fe fb4f 	bl	8089918 <spark_send_event>
 808b27a:	b920      	cbnz	r0, 808b286 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 808b27c:	9b03      	ldr	r3, [sp, #12]
 808b27e:	785b      	ldrb	r3, [r3, #1]
 808b280:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 808b284:	b183      	cbz	r3, 808b2a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 808b286:	9b03      	ldr	r3, [sp, #12]
 808b288:	a904      	add	r1, sp, #16
 808b28a:	a806      	add	r0, sp, #24
 808b28c:	9305      	str	r3, [sp, #20]
 808b28e:	f7ff fb49 	bl	808a924 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 808b292:	a905      	add	r1, sp, #20
 808b294:	4630      	mov	r0, r6
 808b296:	f7ff fe9a 	bl	808afce <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808b29a:	a806      	add	r0, sp, #24
 808b29c:	f7f8 ff2c 	bl	80840f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808b2a0:	a804      	add	r0, sp, #16
 808b2a2:	f7f8 ff29 	bl	80840f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808b2a6:	e013      	b.n	808b2d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 808b2a8:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 808b2ac:	a905      	add	r1, sp, #20
 808b2ae:	a803      	add	r0, sp, #12
 808b2b0:	9205      	str	r2, [sp, #20]
 808b2b2:	f8ad 3018 	strh.w	r3, [sp, #24]
 808b2b6:	f7ff fefd 	bl	808b0b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 808b2ba:	a805      	add	r0, sp, #20
 808b2bc:	f7ff fe30 	bl	808af20 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 808b2c0:	a805      	add	r0, sp, #20
 808b2c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 808b2c4:	f7ff fe94 	bl	808aff0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 808b2c8:	a806      	add	r0, sp, #24
 808b2ca:	f7f8 ff15 	bl	80840f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808b2ce:	e7da      	b.n	808b286 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 808b2d0:	4630      	mov	r0, r6
 808b2d2:	b00b      	add	sp, #44	; 0x2c
 808b2d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808b2d8:	0808b44d 	.word	0x0808b44d

0808b2dc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 808b2dc:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 808b2de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808b2e0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 808b2e2:	d006      	beq.n	808b2f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 808b2e4:	2a03      	cmp	r2, #3
 808b2e6:	d017      	beq.n	808b318 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 808b2e8:	2a01      	cmp	r2, #1
 808b2ea:	d122      	bne.n	808b332 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 808b2ec:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 808b2ee:	6003      	str	r3, [r0, #0]
	      break;
 808b2f0:	e01f      	b.n	808b332 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 808b2f2:	2018      	movs	r0, #24
 808b2f4:	680e      	ldr	r6, [r1, #0]
 808b2f6:	f7f4 fed2 	bl	808009e <_Znwj>
 808b2fa:	4605      	mov	r5, r0
 808b2fc:	b150      	cbz	r0, 808b314 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 808b2fe:	4631      	mov	r1, r6
 808b300:	f7ff fec8 	bl	808b094 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 808b304:	6930      	ldr	r0, [r6, #16]
 808b306:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 808b30a:	b108      	cbz	r0, 808b310 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 808b30c:	f002 fb06 	bl	808d91c <strdup>
 808b310:	6128      	str	r0, [r5, #16]
 808b312:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 808b314:	6025      	str	r5, [r4, #0]
 808b316:	e00c      	b.n	808b332 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 808b318:	6804      	ldr	r4, [r0, #0]
 808b31a:	b154      	cbz	r4, 808b332 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 808b31c:	f104 0010 	add.w	r0, r4, #16
 808b320:	f7ff fdfe 	bl	808af20 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808b324:	4620      	mov	r0, r4
 808b326:	f7fd fdd1 	bl	8088ecc <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 808b32a:	2118      	movs	r1, #24
 808b32c:	4620      	mov	r0, r4
 808b32e:	f000 fdde 	bl	808beee <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 808b332:	2000      	movs	r0, #0
 808b334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808b336 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 808b336:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808b338:	2300      	movs	r3, #0
 808b33a:	6083      	str	r3, [r0, #8]
 808b33c:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 808b33e:	4604      	mov	r4, r0
 808b340:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 808b342:	b12b      	cbz	r3, 808b350 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808b344:	2202      	movs	r2, #2
 808b346:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 808b348:	68eb      	ldr	r3, [r5, #12]
 808b34a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 808b34c:	68ab      	ldr	r3, [r5, #8]
 808b34e:	60a3      	str	r3, [r4, #8]
	}
    }
 808b350:	4620      	mov	r0, r4
 808b352:	bd38      	pop	{r3, r4, r5, pc}

0808b354 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 808b354:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 808b356:	b570      	push	{r4, r5, r6, lr}
 808b358:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 808b35a:	d006      	beq.n	808b36a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 808b35c:	2a03      	cmp	r2, #3
 808b35e:	d011      	beq.n	808b384 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 808b360:	2a01      	cmp	r2, #1
 808b362:	d118      	bne.n	808b396 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 808b364:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 808b366:	6003      	str	r3, [r0, #0]
	      break;
 808b368:	e015      	b.n	808b396 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 808b36a:	2014      	movs	r0, #20
 808b36c:	680e      	ldr	r6, [r1, #0]
 808b36e:	f7f4 fe96 	bl	808009e <_Znwj>
 808b372:	4605      	mov	r5, r0
 808b374:	b120      	cbz	r0, 808b380 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 808b376:	4631      	mov	r1, r6
 808b378:	f7ff ffdd 	bl	808b336 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 808b37c:	7c33      	ldrb	r3, [r6, #16]
 808b37e:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 808b380:	6025      	str	r5, [r4, #0]
 808b382:	e008      	b.n	808b396 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 808b384:	6804      	ldr	r4, [r0, #0]
 808b386:	b134      	cbz	r4, 808b396 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808b388:	4620      	mov	r0, r4
 808b38a:	f7fd fd9f 	bl	8088ecc <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 808b38e:	2114      	movs	r1, #20
 808b390:	4620      	mov	r0, r4
 808b392:	f000 fdac 	bl	808beee <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 808b396:	2000      	movs	r0, #0
 808b398:	bd70      	pop	{r4, r5, r6, pc}
	...

0808b39c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 808b39c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808b39e:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 808b3a0:	f3bf 8f5f 	dmb	sy
 808b3a4:	b087      	sub	sp, #28
 808b3a6:	2300      	movs	r3, #0
 808b3a8:	e850 6f00 	ldrex	r6, [r0]
 808b3ac:	e840 3200 	strex	r2, r3, [r0]
 808b3b0:	2a00      	cmp	r2, #0
 808b3b2:	d1f9      	bne.n	808b3a8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 808b3b4:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 808b3b8:	2e00      	cmp	r6, #0
 808b3ba:	d03f      	beq.n	808b43c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 808b3bc:	4618      	mov	r0, r3
 808b3be:	f7fe f9fd 	bl	80897bc <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 808b3c2:	4607      	mov	r7, r0
 808b3c4:	b120      	cbz	r0, 808b3d0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 808b3c6:	4621      	mov	r1, r4
 808b3c8:	4630      	mov	r0, r6
 808b3ca:	f7ff fe53 	bl	808b074 <_ZNKSt8functionIFvRKbEEclES1_>
 808b3ce:	e02e      	b.n	808b42e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 808b3d0:	4631      	mov	r1, r6
 808b3d2:	a801      	add	r0, sp, #4
 808b3d4:	f7ff ffaf 	bl	808b336 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 808b3d8:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 808b3da:	2010      	movs	r0, #16
 808b3dc:	f88d 3014 	strb.w	r3, [sp, #20]
 808b3e0:	f7f4 fe5d 	bl	808009e <_Znwj>
 808b3e4:	4605      	mov	r5, r0
 808b3e6:	b1d0      	cbz	r0, 808b41e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808b3e8:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808b3ea:	2014      	movs	r0, #20
 808b3ec:	f7f4 fe57 	bl	808009e <_Znwj>
 808b3f0:	4604      	mov	r4, r0
 808b3f2:	b178      	cbz	r0, 808b414 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808b3f4:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 808b3f6:	4601      	mov	r1, r0
 808b3f8:	a801      	add	r0, sp, #4
 808b3fa:	f7ff fc3c 	bl	808ac76 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808b3fe:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 808b400:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808b402:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808b404:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 808b406:	9203      	str	r2, [sp, #12]
 808b408:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 808b40a:	60e3      	str	r3, [r4, #12]
 808b40c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808b410:	9204      	str	r2, [sp, #16]
 808b412:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 808b414:	4b0a      	ldr	r3, [pc, #40]	; (808b440 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808b416:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 808b418:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 808b41a:	4b0a      	ldr	r3, [pc, #40]	; (808b444 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 808b41c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808b41e:	a801      	add	r0, sp, #4
 808b420:	f7fd fd54 	bl	8088ecc <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 808b424:	2200      	movs	r2, #0
 808b426:	4629      	mov	r1, r5
 808b428:	4807      	ldr	r0, [pc, #28]	; (808b448 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 808b42a:	f7fe f9cf 	bl	80897cc <application_thread_invoke>
 808b42e:	4630      	mov	r0, r6
 808b430:	f7fd fd4c 	bl	8088ecc <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 808b434:	2110      	movs	r1, #16
 808b436:	4630      	mov	r0, r6
 808b438:	f000 fd59 	bl	808beee <_ZdlPvj>
        }
    }
 808b43c:	b007      	add	sp, #28
 808b43e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808b440:	0808b087 	.word	0x0808b087
 808b444:	0808b355 	.word	0x0808b355
 808b448:	0808b92d 	.word	0x0808b92d

0808b44c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 808b44c:	b530      	push	{r4, r5, lr}
 808b44e:	4604      	mov	r4, r0
 808b450:	b085      	sub	sp, #20
 808b452:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 808b454:	4668      	mov	r0, sp
 808b456:	4611      	mov	r1, r2
 808b458:	f7ff fdca 	bl	808aff0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 808b45c:	b17c      	cbz	r4, 808b47e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 808b45e:	b224      	sxth	r4, r4
 808b460:	4628      	mov	r0, r5
 808b462:	b10d      	cbz	r5, 808b468 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 808b464:	f002 fa5a 	bl	808d91c <strdup>
 808b468:	9002      	str	r0, [sp, #8]
 808b46a:	a902      	add	r1, sp, #8
 808b46c:	4668      	mov	r0, sp
 808b46e:	f8ad 400c 	strh.w	r4, [sp, #12]
 808b472:	f7ff fe1f 	bl	808b0b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 808b476:	a802      	add	r0, sp, #8
 808b478:	f7ff fd52 	bl	808af20 <_ZN8particle5ErrorD1Ev>
 808b47c:	e01d      	b.n	808b4ba <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 808b47e:	f04f 0201 	mov.w	r2, #1
 808b482:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 808b484:	f88d 4008 	strb.w	r4, [sp, #8]
 808b488:	e8d0 3f4f 	ldrexb	r3, [r0]
 808b48c:	42a3      	cmp	r3, r4
 808b48e:	d103      	bne.n	808b498 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 808b490:	e8c0 2f41 	strexb	r1, r2, [r0]
 808b494:	2900      	cmp	r1, #0
 808b496:	d1f7      	bne.n	808b488 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 808b498:	d002      	beq.n	808b4a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 808b49a:	f88d 3008 	strb.w	r3, [sp, #8]
 808b49e:	e00c      	b.n	808b4ba <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 808b4a0:	f110 010c 	adds.w	r1, r0, #12
 808b4a4:	f04f 0301 	mov.w	r3, #1
 808b4a8:	bf18      	it	ne
 808b4aa:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 808b4ac:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 808b4b0:	3004      	adds	r0, #4
 808b4b2:	f800 3c03 	strb.w	r3, [r0, #-3]
 808b4b6:	f7ff ff71 	bl	808b39c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 808b4ba:	a801      	add	r0, sp, #4
 808b4bc:	f7f8 fe1c 	bl	80840f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 808b4c0:	b005      	add	sp, #20
 808b4c2:	bd30      	pop	{r4, r5, pc}

0808b4c4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 808b4c4:	4770      	bx	lr

0808b4c6 <_ZN9IPAddressD0Ev>:
 808b4c6:	b510      	push	{r4, lr}
 808b4c8:	4604      	mov	r4, r0
 808b4ca:	2108      	movs	r1, #8
 808b4cc:	f000 fd0f 	bl	808beee <_ZdlPvj>
 808b4d0:	4620      	mov	r0, r4
 808b4d2:	bd10      	pop	{r4, pc}

0808b4d4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 808b4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808b4d6:	460f      	mov	r7, r1
 808b4d8:	f100 0608 	add.w	r6, r0, #8
 808b4dc:	1d05      	adds	r5, r0, #4
 808b4de:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 808b4e0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 808b4e4:	220a      	movs	r2, #10
 808b4e6:	4638      	mov	r0, r7
 808b4e8:	f7ff f851 	bl	808a58e <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 808b4ec:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 808b4ee:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 808b4f0:	d007      	beq.n	808b502 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 808b4f2:	2c00      	cmp	r4, #0
 808b4f4:	d0f4      	beq.n	808b4e0 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 808b4f6:	212e      	movs	r1, #46	; 0x2e
 808b4f8:	4638      	mov	r0, r7
 808b4fa:	f7fe fffb 	bl	808a4f4 <_ZN5Print5printEc>
 808b4fe:	4404      	add	r4, r0
 808b500:	e7ee      	b.n	808b4e0 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 808b502:	4620      	mov	r0, r4
 808b504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0808b508 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 808b508:	4a02      	ldr	r2, [pc, #8]	; (808b514 <_ZN9IPAddressC1Ev+0xc>)
 808b50a:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 808b50c:	2200      	movs	r2, #0
 808b50e:	6042      	str	r2, [r0, #4]
{
    clear();
}
 808b510:	4770      	bx	lr
 808b512:	bf00      	nop
 808b514:	08093154 	.word	0x08093154

0808b518 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 808b518:	4a02      	ldr	r2, [pc, #8]	; (808b524 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 808b51a:	6002      	str	r2, [r0, #0]
{
    memcpy(&this->address, &address, sizeof(address));
 808b51c:	680a      	ldr	r2, [r1, #0]
 808b51e:	6042      	str	r2, [r0, #4]
}
 808b520:	4770      	bx	lr
 808b522:	bf00      	nop
 808b524:	08093154 	.word	0x08093154

0808b528 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 808b528:	4a01      	ldr	r2, [pc, #4]	; (808b530 <_ZN9IPAddressC1Em+0x8>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 808b52a:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 808b52c:	6002      	str	r2, [r0, #0]
{
    *this = address;
}
 808b52e:	4770      	bx	lr
 808b530:	08093154 	.word	0x08093154

0808b534 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 808b534:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 808b536:	f89d 4008 	ldrb.w	r4, [sp, #8]
 808b53a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 808b53e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 808b542:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 808b546:	6041      	str	r1, [r0, #4]
 808b548:	bd10      	pop	{r4, pc}
	...

0808b54c <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 808b54c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808b54e:	4d04      	ldr	r5, [pc, #16]	; (808b560 <_ZN9IPAddressC1Ehhhh+0x14>)
 808b550:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 808b552:	f89d 5018 	ldrb.w	r5, [sp, #24]
 808b556:	9500      	str	r5, [sp, #0]
 808b558:	f7ff ffec 	bl	808b534 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 808b55c:	b003      	add	sp, #12
 808b55e:	bd30      	pop	{r4, r5, pc}
 808b560:	08093154 	.word	0x08093154

0808b564 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 808b564:	7441      	strb	r1, [r0, #17]
 808b566:	4770      	bx	lr

0808b568 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 808b568:	4770      	bx	lr

0808b56a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 808b56a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 808b56c:	2100      	movs	r1, #0
 808b56e:	7c00      	ldrb	r0, [r0, #16]
 808b570:	f7fe f8dc 	bl	808972c <HAL_USB_USART_Receive_Data>
}
 808b574:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 808b578:	bf28      	it	cs
 808b57a:	f04f 30ff 	movcs.w	r0, #4294967295
 808b57e:	bd08      	pop	{r3, pc}

0808b580 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 808b580:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 808b582:	2101      	movs	r1, #1
 808b584:	7c00      	ldrb	r0, [r0, #16]
 808b586:	f7fe f8d1 	bl	808972c <HAL_USB_USART_Receive_Data>
}
 808b58a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 808b58e:	bf28      	it	cs
 808b590:	f04f 30ff 	movcs.w	r0, #4294967295
 808b594:	bd08      	pop	{r3, pc}

0808b596 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 808b596:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 808b598:	7c00      	ldrb	r0, [r0, #16]
 808b59a:	f7fe f8bf 	bl	808971c <HAL_USB_USART_Available_Data_For_Write>
}
 808b59e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808b5a2:	bd08      	pop	{r3, pc}

0808b5a4 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 808b5a4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 808b5a6:	7c00      	ldrb	r0, [r0, #16]
 808b5a8:	f7fe f8b0 	bl	808970c <HAL_USB_USART_Available_Data>
}
 808b5ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808b5b0:	bd08      	pop	{r3, pc}

0808b5b2 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 808b5b2:	7c00      	ldrb	r0, [r0, #16]
 808b5b4:	f7fe b8ca 	b.w	808974c <HAL_USB_USART_Flush_Data>

0808b5b8 <_ZN9USBSerialD0Ev>:
 808b5b8:	b510      	push	{r4, lr}
 808b5ba:	4604      	mov	r4, r0
 808b5bc:	2114      	movs	r1, #20
 808b5be:	f000 fc96 	bl	808beee <_ZdlPvj>
 808b5c2:	4620      	mov	r0, r4
 808b5c4:	bd10      	pop	{r4, pc}

0808b5c6 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 808b5c6:	b538      	push	{r3, r4, r5, lr}
 808b5c8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808b5ca:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 808b5cc:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808b5ce:	f7fe f8a5 	bl	808971c <HAL_USB_USART_Available_Data_For_Write>
 808b5d2:	2800      	cmp	r0, #0
 808b5d4:	dc01      	bgt.n	808b5da <_ZN9USBSerial5writeEh+0x14>
 808b5d6:	7c60      	ldrb	r0, [r4, #17]
 808b5d8:	b128      	cbz	r0, 808b5e6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 808b5da:	4629      	mov	r1, r5
 808b5dc:	7c20      	ldrb	r0, [r4, #16]
 808b5de:	f7fe f8ad 	bl	808973c <HAL_USB_USART_Send_Data>
 808b5e2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 808b5e6:	bd38      	pop	{r3, r4, r5, pc}

0808b5e8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 808b5e8:	b510      	push	{r4, lr}
 808b5ea:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 808b5ec:	2300      	movs	r3, #0
 808b5ee:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 808b5f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808b5f4:	60a3      	str	r3, [r4, #8]
 808b5f6:	4b05      	ldr	r3, [pc, #20]	; (808b60c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 808b5f8:	4608      	mov	r0, r1
 808b5fa:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 808b5fc:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 808b5fe:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 808b600:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 808b602:	4611      	mov	r1, r2
 808b604:	f7fe f872 	bl	80896ec <HAL_USB_USART_Init>
}
 808b608:	4620      	mov	r0, r4
 808b60a:	bd10      	pop	{r4, pc}
 808b60c:	08093168 	.word	0x08093168

0808b610 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 808b610:	2200      	movs	r2, #0
 808b612:	7c00      	ldrb	r0, [r0, #16]
 808b614:	f7fe b872 	b.w	80896fc <HAL_USB_USART_Begin>

0808b618 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 808b618:	b510      	push	{r4, lr}
 808b61a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 808b61c:	2214      	movs	r2, #20
 808b61e:	2100      	movs	r1, #0
 808b620:	f002 f92c 	bl	808d87c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 808b624:	4b05      	ldr	r3, [pc, #20]	; (808b63c <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 808b626:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 808b628:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 808b62a:	4b05      	ldr	r3, [pc, #20]	; (808b640 <_Z19acquireSerialBufferv+0x28>)
 808b62c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808b62e:	f240 1301 	movw	r3, #257	; 0x101
 808b632:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 808b634:	2381      	movs	r3, #129	; 0x81
 808b636:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 808b638:	bd10      	pop	{r4, pc}
 808b63a:	bf00      	nop
 808b63c:	20000cad 	.word	0x20000cad
 808b640:	20000c2c 	.word	0x20000c2c

0808b644 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 808b644:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 808b646:	4d0e      	ldr	r5, [pc, #56]	; (808b680 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 808b648:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 808b64a:	a801      	add	r0, sp, #4
 808b64c:	f7ff ffe4 	bl	808b618 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 808b650:	6829      	ldr	r1, [r5, #0]
 808b652:	f011 0401 	ands.w	r4, r1, #1
 808b656:	d110      	bne.n	808b67a <_Z16_fetch_usbserialv+0x36>
 808b658:	4628      	mov	r0, r5
 808b65a:	f7f4 fd24 	bl	80800a6 <__cxa_guard_acquire>
 808b65e:	b160      	cbz	r0, 808b67a <_Z16_fetch_usbserialv+0x36>
 808b660:	aa01      	add	r2, sp, #4
 808b662:	4621      	mov	r1, r4
 808b664:	4807      	ldr	r0, [pc, #28]	; (808b684 <_Z16_fetch_usbserialv+0x40>)
 808b666:	f7ff ffbf 	bl	808b5e8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 808b66a:	4628      	mov	r0, r5
 808b66c:	f7f4 fd20 	bl	80800b0 <__cxa_guard_release>
 808b670:	4a05      	ldr	r2, [pc, #20]	; (808b688 <_Z16_fetch_usbserialv+0x44>)
 808b672:	4906      	ldr	r1, [pc, #24]	; (808b68c <_Z16_fetch_usbserialv+0x48>)
 808b674:	4803      	ldr	r0, [pc, #12]	; (808b684 <_Z16_fetch_usbserialv+0x40>)
 808b676:	f000 fc35 	bl	808bee4 <__aeabi_atexit>
	return _usbserial;
}
 808b67a:	4802      	ldr	r0, [pc, #8]	; (808b684 <_Z16_fetch_usbserialv+0x40>)
 808b67c:	b007      	add	sp, #28
 808b67e:	bd30      	pop	{r4, r5, pc}
 808b680:	20000c28 	.word	0x20000c28
 808b684:	20000db0 	.word	0x20000db0
 808b688:	200001d0 	.word	0x200001d0
 808b68c:	0808b569 	.word	0x0808b569

0808b690 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 808b690:	b510      	push	{r4, lr}
 808b692:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 808b694:	2214      	movs	r2, #20
 808b696:	2100      	movs	r1, #0
 808b698:	f002 f8f0 	bl	808d87c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 808b69c:	4b05      	ldr	r3, [pc, #20]	; (808b6b4 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 808b69e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 808b6a0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 808b6a2:	4b05      	ldr	r3, [pc, #20]	; (808b6b8 <_Z23acquireUSBSerial1Bufferv+0x28>)
 808b6a4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808b6a6:	f240 1301 	movw	r3, #257	; 0x101
 808b6aa:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 808b6ac:	2381      	movs	r3, #129	; 0x81
 808b6ae:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 808b6b0:	bd10      	pop	{r4, pc}
 808b6b2:	bf00      	nop
 808b6b4:	20000e60 	.word	0x20000e60
 808b6b8:	20000dc8 	.word	0x20000dc8

0808b6bc <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 808b6bc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808b6be:	4c0e      	ldr	r4, [pc, #56]	; (808b6f8 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 808b6c0:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 808b6c2:	a801      	add	r0, sp, #4
 808b6c4:	f7ff ffe4 	bl	808b690 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808b6c8:	6823      	ldr	r3, [r4, #0]
 808b6ca:	07db      	lsls	r3, r3, #31
 808b6cc:	d410      	bmi.n	808b6f0 <_Z17_fetch_usbserial1v+0x34>
 808b6ce:	4620      	mov	r0, r4
 808b6d0:	f7f4 fce9 	bl	80800a6 <__cxa_guard_acquire>
 808b6d4:	b160      	cbz	r0, 808b6f0 <_Z17_fetch_usbserial1v+0x34>
 808b6d6:	aa01      	add	r2, sp, #4
 808b6d8:	2101      	movs	r1, #1
 808b6da:	4808      	ldr	r0, [pc, #32]	; (808b6fc <_Z17_fetch_usbserial1v+0x40>)
 808b6dc:	f7ff ff84 	bl	808b5e8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 808b6e0:	4620      	mov	r0, r4
 808b6e2:	f7f4 fce5 	bl	80800b0 <__cxa_guard_release>
 808b6e6:	4a06      	ldr	r2, [pc, #24]	; (808b700 <_Z17_fetch_usbserial1v+0x44>)
 808b6e8:	4906      	ldr	r1, [pc, #24]	; (808b704 <_Z17_fetch_usbserial1v+0x48>)
 808b6ea:	4804      	ldr	r0, [pc, #16]	; (808b6fc <_Z17_fetch_usbserial1v+0x40>)
 808b6ec:	f000 fbfa 	bl	808bee4 <__aeabi_atexit>
  return _usbserial1;
}
 808b6f0:	4802      	ldr	r0, [pc, #8]	; (808b6fc <_Z17_fetch_usbserial1v+0x40>)
 808b6f2:	b006      	add	sp, #24
 808b6f4:	bd10      	pop	{r4, pc}
 808b6f6:	bf00      	nop
 808b6f8:	20000dc4 	.word	0x20000dc4
 808b6fc:	20000e4c 	.word	0x20000e4c
 808b700:	200001d0 	.word	0x200001d0
 808b704:	0808b569 	.word	0x0808b569

0808b708 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 808b708:	4700      	bx	r0
	...

0808b70c <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 808b70c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808b70e:	461c      	mov	r4, r3
 808b710:	b085      	sub	sp, #20
 808b712:	460e      	mov	r6, r1
 808b714:	4617      	mov	r7, r2
 808b716:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
 808b718:	f7fd fe68 	bl	80893ec <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
 808b71c:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
 808b71e:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 808b720:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 808b724:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 808b726:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
  }
  return nullptr;
 808b72a:	bfb4      	ite	lt
 808b72c:	4603      	movlt	r3, r0
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 808b72e:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 808b732:	4632      	mov	r2, r6
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 808b734:	bfa4      	itt	ge
 808b736:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
 808b73a:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 808b73c:	9300      	str	r3, [sp, #0]
 808b73e:	4906      	ldr	r1, [pc, #24]	; (808b758 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)
 808b740:	463b      	mov	r3, r7
 808b742:	4628      	mov	r0, r5

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 808b744:	bfa8      	it	ge
 808b746:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 808b74a:	f7fd fe47 	bl	80893dc <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
 808b74e:	fab0 f080 	clz	r0, r0
 808b752:	0940      	lsrs	r0, r0, #5
 808b754:	b005      	add	sp, #20
 808b756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808b758:	0808b709 	.word	0x0808b709

0808b75c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 808b75c:	2200      	movs	r2, #0
 808b75e:	4611      	mov	r1, r2
 808b760:	6840      	ldr	r0, [r0, #4]
 808b762:	f7fe b881 	b.w	8089868 <network_ready>

0808b766 <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 808b766:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
        HAL_IPAddress ip = {0};
 808b76a:	2600      	movs	r6, #0
 808b76c:	ac04      	add	r4, sp, #16
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 808b76e:	4605      	mov	r5, r0
    {
        HAL_IPAddress ip = {0};
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808b770:	4610      	mov	r0, r2
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 808b772:	4688      	mov	r8, r1
 808b774:	4617      	mov	r7, r2
    {
        HAL_IPAddress ip = {0};
 808b776:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808b77a:	f002 fdff 	bl	808e37c <strlen>
 808b77e:	9600      	str	r6, [sp, #0]
 808b780:	b281      	uxth	r1, r0
 808b782:	f8d8 3004 	ldr.w	r3, [r8, #4]
 808b786:	4622      	mov	r2, r4
 808b788:	4638      	mov	r0, r7
 808b78a:	f7fd ff9f 	bl	80896cc <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 808b78e:	b120      	cbz	r0, 808b79a <_ZN5spark13CellularClass7resolveEPKc+0x34>
 808b790:	4631      	mov	r1, r6
 808b792:	4628      	mov	r0, r5
 808b794:	f7ff fec8 	bl	808b528 <_ZN9IPAddressC1Em>
 808b798:	e003      	b.n	808b7a2 <_ZN5spark13CellularClass7resolveEPKc+0x3c>
 808b79a:	4621      	mov	r1, r4
 808b79c:	4628      	mov	r0, r5
 808b79e:	f7ff febb 	bl	808b518 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 808b7a2:	4628      	mov	r0, r5
 808b7a4:	b004      	add	sp, #16
 808b7a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808b7aa <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 808b7aa:	2200      	movs	r2, #0
 808b7ac:	4611      	mov	r1, r2
 808b7ae:	6840      	ldr	r0, [r0, #4]
 808b7b0:	f7fe b87a 	b.w	80898a8 <network_listening>

0808b7b4 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 808b7b4:	2200      	movs	r2, #0
 808b7b6:	4611      	mov	r1, r2
 808b7b8:	6840      	ldr	r0, [r0, #4]
 808b7ba:	f7fe b885 	b.w	80898c8 <network_get_listen_timeout>

0808b7be <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 808b7be:	2200      	movs	r2, #0
 808b7c0:	6840      	ldr	r0, [r0, #4]
 808b7c2:	f7fe b879 	b.w	80898b8 <network_set_listen_timeout>

0808b7c6 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 808b7c6:	2200      	movs	r2, #0
 808b7c8:	f081 0101 	eor.w	r1, r1, #1
 808b7cc:	6840      	ldr	r0, [r0, #4]
 808b7ce:	f7fe b863 	b.w	8089898 <network_listen>

0808b7d2 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 808b7d2:	2300      	movs	r3, #0
 808b7d4:	461a      	mov	r2, r3
 808b7d6:	4619      	mov	r1, r3
 808b7d8:	6840      	ldr	r0, [r0, #4]
 808b7da:	f7fe b84d 	b.w	8089878 <network_on>

0808b7de <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 808b7de:	2200      	movs	r2, #0
 808b7e0:	4611      	mov	r1, r2
 808b7e2:	6840      	ldr	r0, [r0, #4]
 808b7e4:	f7fe b830 	b.w	8089848 <network_connecting>

0808b7e8 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 808b7e8:	2200      	movs	r2, #0
 808b7ea:	2102      	movs	r1, #2
 808b7ec:	6840      	ldr	r0, [r0, #4]
 808b7ee:	f7fe b833 	b.w	8089858 <network_disconnect>

0808b7f2 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 808b7f2:	2300      	movs	r3, #0
 808b7f4:	461a      	mov	r2, r3
 808b7f6:	6840      	ldr	r0, [r0, #4]
 808b7f8:	f7fe b81e 	b.w	8089838 <network_connect>

0808b7fc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 808b7fc:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 808b7fe:	4c08      	ldr	r4, [pc, #32]	; (808b820 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 808b800:	2528      	movs	r5, #40	; 0x28
 808b802:	462a      	mov	r2, r5
 808b804:	2100      	movs	r1, #0
 808b806:	4620      	mov	r0, r4
 808b808:	f002 f838 	bl	808d87c <memset>
        cid = -1;
 808b80c:	f04f 33ff 	mov.w	r3, #4294967295
 808b810:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 808b812:	4b04      	ldr	r3, [pc, #16]	; (808b824 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
 808b814:	2204      	movs	r2, #4
 808b816:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 808b818:	4a03      	ldr	r2, [pc, #12]	; (808b828 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
        size = sizeof(*this);
 808b81a:	8025      	strh	r5, [r4, #0]
 808b81c:	601a      	str	r2, [r3, #0]
 808b81e:	bd38      	pop	{r3, r4, r5, pc}
 808b820:	20000f6c 	.word	0x20000f6c
 808b824:	20000f64 	.word	0x20000f64
 808b828:	08093198 	.word	0x08093198

0808b82c <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 808b82c:	7441      	strb	r1, [r0, #17]
 808b82e:	4770      	bx	lr

0808b830 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 808b830:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 808b832:	7c00      	ldrb	r0, [r0, #16]
 808b834:	f7fd fed2 	bl	80895dc <HAL_USART_Available_Data_For_Write>
}
 808b838:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808b83c:	bd08      	pop	{r3, pc}

0808b83e <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 808b83e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 808b840:	7c00      	ldrb	r0, [r0, #16]
 808b842:	f7fd fea3 	bl	808958c <HAL_USART_Available_Data>
}
 808b846:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808b84a:	bd08      	pop	{r3, pc}

0808b84c <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 808b84c:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 808b84e:	7c00      	ldrb	r0, [r0, #16]
 808b850:	f7fd feac 	bl	80895ac <HAL_USART_Peek_Data>
}
 808b854:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 808b858:	bf28      	it	cs
 808b85a:	f04f 30ff 	movcs.w	r0, #4294967295
 808b85e:	bd08      	pop	{r3, pc}

0808b860 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 808b860:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 808b862:	7c00      	ldrb	r0, [r0, #16]
 808b864:	f7fd fe9a 	bl	808959c <HAL_USART_Read_Data>
}
 808b868:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 808b86c:	bf28      	it	cs
 808b86e:	f04f 30ff 	movcs.w	r0, #4294967295
 808b872:	bd08      	pop	{r3, pc}

0808b874 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 808b874:	7c00      	ldrb	r0, [r0, #16]
 808b876:	f7fd bea1 	b.w	80895bc <HAL_USART_Flush_Data>

0808b87a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 808b87a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 808b87c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 808b87e:	4604      	mov	r4, r0
 808b880:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 808b882:	b925      	cbnz	r5, 808b88e <_ZN11USARTSerial5writeEh+0x14>
 808b884:	7c00      	ldrb	r0, [r0, #16]
 808b886:	f7fd fea9 	bl	80895dc <HAL_USART_Available_Data_For_Write>
 808b88a:	2800      	cmp	r0, #0
 808b88c:	dd05      	ble.n	808b89a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 808b88e:	4631      	mov	r1, r6
 808b890:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 808b892:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 808b896:	f7fd be71 	b.w	808957c <HAL_USART_Write_Data>
  }
  return 0;
}
 808b89a:	4628      	mov	r0, r5
 808b89c:	bd70      	pop	{r4, r5, r6, pc}
	...

0808b8a0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 808b8a0:	b510      	push	{r4, lr}
 808b8a2:	4604      	mov	r4, r0
 808b8a4:	4608      	mov	r0, r1
 808b8a6:	4611      	mov	r1, r2
 808b8a8:	2200      	movs	r2, #0
 808b8aa:	6062      	str	r2, [r4, #4]
 808b8ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 808b8b0:	60a2      	str	r2, [r4, #8]
 808b8b2:	4a05      	ldr	r2, [pc, #20]	; (808b8c8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 808b8b4:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 808b8b6:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 808b8b8:	2201      	movs	r2, #1
 808b8ba:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 808b8bc:	461a      	mov	r2, r3
 808b8be:	f7fd fe55 	bl	808956c <HAL_USART_Init>
}
 808b8c2:	4620      	mov	r0, r4
 808b8c4:	bd10      	pop	{r4, pc}
 808b8c6:	bf00      	nop
 808b8c8:	080931cc 	.word	0x080931cc

0808b8cc <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 808b8cc:	2300      	movs	r3, #0
 808b8ce:	7c00      	ldrb	r0, [r0, #16]
 808b8d0:	f7fd be8c 	b.w	80895ec <HAL_USART_BeginConfig>

0808b8d4 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 808b8d4:	2200      	movs	r2, #0
 808b8d6:	f7ff bff9 	b.w	808b8cc <_ZN11USARTSerial5beginEmm>

0808b8da <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 808b8da:	7c00      	ldrb	r0, [r0, #16]
 808b8dc:	f7fd be76 	b.w	80895cc <HAL_USART_Is_Enabled>

0808b8e0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 808b8e0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 808b8e2:	4d0c      	ldr	r5, [pc, #48]	; (808b914 <_Z22__fetch_global_Serial1v+0x34>)
 808b8e4:	6829      	ldr	r1, [r5, #0]
 808b8e6:	f011 0401 	ands.w	r4, r1, #1
 808b8ea:	d111      	bne.n	808b910 <_Z22__fetch_global_Serial1v+0x30>
 808b8ec:	4628      	mov	r0, r5
 808b8ee:	f7f4 fbda 	bl	80800a6 <__cxa_guard_acquire>
 808b8f2:	b168      	cbz	r0, 808b910 <_Z22__fetch_global_Serial1v+0x30>
 808b8f4:	4a08      	ldr	r2, [pc, #32]	; (808b918 <_Z22__fetch_global_Serial1v+0x38>)
 808b8f6:	4621      	mov	r1, r4
 808b8f8:	4b08      	ldr	r3, [pc, #32]	; (808b91c <_Z22__fetch_global_Serial1v+0x3c>)
 808b8fa:	4809      	ldr	r0, [pc, #36]	; (808b920 <_Z22__fetch_global_Serial1v+0x40>)
 808b8fc:	f7ff ffd0 	bl	808b8a0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 808b900:	4628      	mov	r0, r5
 808b902:	f7f4 fbd5 	bl	80800b0 <__cxa_guard_release>
 808b906:	4a07      	ldr	r2, [pc, #28]	; (808b924 <_Z22__fetch_global_Serial1v+0x44>)
 808b908:	4907      	ldr	r1, [pc, #28]	; (808b928 <_Z22__fetch_global_Serial1v+0x48>)
 808b90a:	4805      	ldr	r0, [pc, #20]	; (808b920 <_Z22__fetch_global_Serial1v+0x40>)
 808b90c:	f000 faea 	bl	808bee4 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 808b910:	4803      	ldr	r0, [pc, #12]	; (808b920 <_Z22__fetch_global_Serial1v+0x40>)
 808b912:	bd38      	pop	{r3, r4, r5, pc}
 808b914:	2000102c 	.word	0x2000102c
 808b918:	20001030 	.word	0x20001030
 808b91c:	20000fa8 	.word	0x20000fa8
 808b920:	20000f94 	.word	0x20000f94
 808b924:	200001d0 	.word	0x200001d0
 808b928:	08080b61 	.word	0x08080b61

0808b92c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 808b92c:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808b92e:	6883      	ldr	r3, [r0, #8]
 808b930:	4604      	mov	r4, r0
 808b932:	b90b      	cbnz	r3, 808b938 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 808b934:	f000 fadd 	bl	808bef2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808b938:	68c3      	ldr	r3, [r0, #12]
 808b93a:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 808b93c:	68a3      	ldr	r3, [r4, #8]
 808b93e:	b11b      	cbz	r3, 808b948 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 808b940:	2203      	movs	r2, #3
 808b942:	4621      	mov	r1, r4
 808b944:	4620      	mov	r0, r4
 808b946:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 808b948:	4620      	mov	r0, r4
}
 808b94a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 808b94e:	2110      	movs	r1, #16
 808b950:	f000 bacd 	b.w	808beee <_ZdlPvj>

0808b954 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 808b954:	4770      	bx	lr

0808b956 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 808b956:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808b958:	4606      	mov	r6, r0
 808b95a:	4615      	mov	r5, r2
 808b95c:	460c      	mov	r4, r1
 808b95e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 808b960:	42bc      	cmp	r4, r7
 808b962:	d006      	beq.n	808b972 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 808b964:	6833      	ldr	r3, [r6, #0]
 808b966:	f814 1b01 	ldrb.w	r1, [r4], #1
 808b96a:	689b      	ldr	r3, [r3, #8]
 808b96c:	4630      	mov	r0, r6
 808b96e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 808b970:	e7f6      	b.n	808b960 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 808b972:	4628      	mov	r0, r5
 808b974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808b976 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 808b976:	2200      	movs	r2, #0
 808b978:	7c00      	ldrb	r0, [r0, #16]
 808b97a:	f7fd be5f 	b.w	808963c <HAL_I2C_Write_Data>

0808b97e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 808b97e:	2100      	movs	r1, #0
 808b980:	7c00      	ldrb	r0, [r0, #16]
 808b982:	f7fd be63 	b.w	808964c <HAL_I2C_Available_Data>

0808b986 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 808b986:	2100      	movs	r1, #0
 808b988:	7c00      	ldrb	r0, [r0, #16]
 808b98a:	f7fd be67 	b.w	808965c <HAL_I2C_Read_Data>

0808b98e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 808b98e:	2100      	movs	r1, #0
 808b990:	7c00      	ldrb	r0, [r0, #16]
 808b992:	f7fd be6b 	b.w	808966c <HAL_I2C_Peek_Data>

0808b996 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 808b996:	2100      	movs	r1, #0
 808b998:	7c00      	ldrb	r0, [r0, #16]
 808b99a:	f7fd be6f 	b.w	808967c <HAL_I2C_Flush_Data>

0808b99e <_ZN7TwoWireD0Ev>:
 808b99e:	b510      	push	{r4, lr}
 808b9a0:	4604      	mov	r4, r0
 808b9a2:	2114      	movs	r1, #20
 808b9a4:	f000 faa3 	bl	808beee <_ZdlPvj>
 808b9a8:	4620      	mov	r0, r4
 808b9aa:	bd10      	pop	{r4, pc}

0808b9ac <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 808b9ac:	b510      	push	{r4, lr}
 808b9ae:	4604      	mov	r4, r0
 808b9b0:	4608      	mov	r0, r1
 808b9b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808b9b6:	60a3      	str	r3, [r4, #8]
 808b9b8:	4b04      	ldr	r3, [pc, #16]	; (808b9cc <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 808b9ba:	2100      	movs	r1, #0
{
  _i2c = i2c;
 808b9bc:	7420      	strb	r0, [r4, #16]
 808b9be:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 808b9c0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 808b9c2:	f7fd fe6b 	bl	808969c <HAL_I2C_Init>

}
 808b9c6:	4620      	mov	r0, r4
 808b9c8:	bd10      	pop	{r4, pc}
 808b9ca:	bf00      	nop
 808b9cc:	080931fc 	.word	0x080931fc

0808b9d0 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 808b9d0:	2300      	movs	r3, #0
 808b9d2:	461a      	mov	r2, r3
 808b9d4:	4619      	mov	r1, r3
 808b9d6:	7c00      	ldrb	r0, [r0, #16]
 808b9d8:	f7fd be10 	b.w	80895fc <HAL_I2C_Begin>

0808b9dc <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 808b9dc:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 808b9de:	2400      	movs	r4, #0
 808b9e0:	7c00      	ldrb	r0, [r0, #16]
 808b9e2:	9400      	str	r4, [sp, #0]
 808b9e4:	f7fd fe12 	bl	808960c <HAL_I2C_Request_Data>
  return result;
}
 808b9e8:	b2c0      	uxtb	r0, r0
 808b9ea:	b002      	add	sp, #8
 808b9ec:	bd10      	pop	{r4, pc}

0808b9ee <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 808b9ee:	2301      	movs	r3, #1
 808b9f0:	f7ff bff4 	b.w	808b9dc <_ZN7TwoWire11requestFromEhhh>

0808b9f4 <_ZN7TwoWire11requestFromEii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 808b9f4:	2301      	movs	r3, #1
 808b9f6:	b2d2      	uxtb	r2, r2
 808b9f8:	b2c9      	uxtb	r1, r1
 808b9fa:	f7ff bfef 	b.w	808b9dc <_ZN7TwoWire11requestFromEhhh>

0808b9fe <_ZN7TwoWire11requestFromEiii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
 808b9fe:	b2db      	uxtb	r3, r3
 808ba00:	b2d2      	uxtb	r2, r2
 808ba02:	b2c9      	uxtb	r1, r1
 808ba04:	f7ff bfea 	b.w	808b9dc <_ZN7TwoWire11requestFromEhhh>

0808ba08 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 808ba08:	2200      	movs	r2, #0
 808ba0a:	7c00      	ldrb	r0, [r0, #16]
 808ba0c:	f7fd be06 	b.w	808961c <HAL_I2C_Begin_Transmission>

0808ba10 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 808ba10:	b2c9      	uxtb	r1, r1
 808ba12:	f7ff bff9 	b.w	808ba08 <_ZN7TwoWire17beginTransmissionEh>

0808ba16 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 808ba16:	2200      	movs	r2, #0
 808ba18:	7c00      	ldrb	r0, [r0, #16]
 808ba1a:	f7fd be07 	b.w	808962c <HAL_I2C_End_Transmission>

0808ba1e <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 808ba1e:	2101      	movs	r1, #1
 808ba20:	f7ff bff9 	b.w	808ba16 <_ZN7TwoWire15endTransmissionEh>

0808ba24 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 808ba24:	2100      	movs	r1, #0
 808ba26:	7c00      	ldrb	r0, [r0, #16]
 808ba28:	f7fd be30 	b.w	808968c <HAL_I2C_Is_Enabled>

0808ba2c <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 808ba2c:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
 808ba2e:	2100      	movs	r1, #0
 808ba30:	7c00      	ldrb	r0, [r0, #16]
 808ba32:	f7fd fe3b 	bl	80896ac <HAL_I2C_Acquire>
}
 808ba36:	fab0 f080 	clz	r0, r0
 808ba3a:	0940      	lsrs	r0, r0, #5
 808ba3c:	bd08      	pop	{r3, pc}

0808ba3e <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 808ba3e:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
 808ba40:	2100      	movs	r1, #0
 808ba42:	7c00      	ldrb	r0, [r0, #16]
 808ba44:	f7fd fe3a 	bl	80896bc <HAL_I2C_Release>
}
 808ba48:	fab0 f080 	clz	r0, r0
 808ba4c:	0940      	lsrs	r0, r0, #5
 808ba4e:	bd08      	pop	{r3, pc}

0808ba50 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 808ba50:	2300      	movs	r3, #0
 808ba52:	461a      	mov	r2, r3
 808ba54:	6840      	ldr	r0, [r0, #4]
 808ba56:	f7fd beef 	b.w	8089838 <network_connect>

0808ba5a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 808ba5a:	2200      	movs	r2, #0
 808ba5c:	2102      	movs	r1, #2
 808ba5e:	6840      	ldr	r0, [r0, #4]
 808ba60:	f7fd befa 	b.w	8089858 <network_disconnect>

0808ba64 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 808ba64:	2200      	movs	r2, #0
 808ba66:	4611      	mov	r1, r2
 808ba68:	6840      	ldr	r0, [r0, #4]
 808ba6a:	f7fd beed 	b.w	8089848 <network_connecting>

0808ba6e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 808ba6e:	2200      	movs	r2, #0
 808ba70:	4611      	mov	r1, r2
 808ba72:	6840      	ldr	r0, [r0, #4]
 808ba74:	f7fd bef8 	b.w	8089868 <network_ready>

0808ba78 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 808ba78:	2300      	movs	r3, #0
 808ba7a:	461a      	mov	r2, r3
 808ba7c:	4619      	mov	r1, r3
 808ba7e:	6840      	ldr	r0, [r0, #4]
 808ba80:	f7fd befa 	b.w	8089878 <network_on>

0808ba84 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 808ba84:	2300      	movs	r3, #0
 808ba86:	461a      	mov	r2, r3
 808ba88:	4619      	mov	r1, r3
 808ba8a:	6840      	ldr	r0, [r0, #4]
 808ba8c:	f7fd befc 	b.w	8089888 <network_off>

0808ba90 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 808ba90:	2200      	movs	r2, #0
 808ba92:	f081 0101 	eor.w	r1, r1, #1
 808ba96:	6840      	ldr	r0, [r0, #4]
 808ba98:	f7fd befe 	b.w	8089898 <network_listen>

0808ba9c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 808ba9c:	2200      	movs	r2, #0
 808ba9e:	6840      	ldr	r0, [r0, #4]
 808baa0:	f7fd bf0a 	b.w	80898b8 <network_set_listen_timeout>

0808baa4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 808baa4:	2200      	movs	r2, #0
 808baa6:	4611      	mov	r1, r2
 808baa8:	6840      	ldr	r0, [r0, #4]
 808baaa:	f7fd bf0d 	b.w	80898c8 <network_get_listen_timeout>

0808baae <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 808baae:	2200      	movs	r2, #0
 808bab0:	4611      	mov	r1, r2
 808bab2:	6840      	ldr	r0, [r0, #4]
 808bab4:	f7fd bef8 	b.w	80898a8 <network_listening>

0808bab8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 808bab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 808baba:	4617      	mov	r7, r2
 808babc:	b087      	sub	sp, #28
 808babe:	4605      	mov	r5, r0
    IPAddress addr;
 808bac0:	a804      	add	r0, sp, #16
 808bac2:	f7ff fd21 	bl	808b508 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 808bac6:	2600      	movs	r6, #0
 808bac8:	ac06      	add	r4, sp, #24
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808baca:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 808bacc:	f844 6d0c 	str.w	r6, [r4, #-12]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808bad0:	f002 fc54 	bl	808e37c <strlen>
 808bad4:	4b0a      	ldr	r3, [pc, #40]	; (808bb00 <_ZN5spark12NetworkClass7resolveEPKc+0x48>)
 808bad6:	9600      	str	r6, [sp, #0]
 808bad8:	b281      	uxth	r1, r0
 808bada:	685b      	ldr	r3, [r3, #4]
 808badc:	4622      	mov	r2, r4
 808bade:	4638      	mov	r0, r7
 808bae0:	f7fd fdf4 	bl	80896cc <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 808bae4:	b120      	cbz	r0, 808baf0 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 808bae6:	4631      	mov	r1, r6
 808bae8:	4628      	mov	r0, r5
 808baea:	f7ff fd1d 	bl	808b528 <_ZN9IPAddressC1Em>
 808baee:	e003      	b.n	808baf8 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 808baf0:	4621      	mov	r1, r4
 808baf2:	4628      	mov	r0, r5
 808baf4:	f7ff fd10 	bl	808b518 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 808baf8:	4628      	mov	r0, r5
 808bafa:	b007      	add	sp, #28
 808bafc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808bafe:	bf00      	nop
 808bb00:	20000f64 	.word	0x20000f64

0808bb04 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 808bb04:	4b02      	ldr	r3, [pc, #8]	; (808bb10 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 808bb06:	4a03      	ldr	r2, [pc, #12]	; (808bb14 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 808bb08:	601a      	str	r2, [r3, #0]
 808bb0a:	2200      	movs	r2, #0
 808bb0c:	605a      	str	r2, [r3, #4]
 808bb0e:	4770      	bx	lr
 808bb10:	200010b4 	.word	0x200010b4
 808bb14:	08093224 	.word	0x08093224

0808bb18 <_ZN5spark16JSONBufferWriterD1Ev>:

private:
    Print &strm_;
};

class JSONBufferWriter: public JSONWriter {
 808bb18:	4770      	bx	lr

0808bb1a <_ZN5spark16JSONBufferWriterD0Ev>:
 808bb1a:	b510      	push	{r4, lr}
 808bb1c:	4604      	mov	r4, r0
 808bb1e:	2114      	movs	r1, #20
 808bb20:	f000 f9e5 	bl	808beee <_ZdlPvj>
 808bb24:	4620      	mov	r0, r4
 808bb26:	bd10      	pop	{r4, pc}

0808bb28 <_ZN5spark16JSONBufferWriter5writeEPKcj>:
    }
    write('"');
}

// spark::JSONBufferWriter
void spark::JSONBufferWriter::write(const char *data, size_t size) {
 808bb28:	b538      	push	{r3, r4, r5, lr}
 808bb2a:	4615      	mov	r5, r2
    if (n_ < bufSize_) {
 808bb2c:	6903      	ldr	r3, [r0, #16]
 808bb2e:	68c2      	ldr	r2, [r0, #12]
    }
    write('"');
}

// spark::JSONBufferWriter
void spark::JSONBufferWriter::write(const char *data, size_t size) {
 808bb30:	4604      	mov	r4, r0
    if (n_ < bufSize_) {
 808bb32:	4293      	cmp	r3, r2
 808bb34:	d207      	bcs.n	808bb46 <_ZN5spark16JSONBufferWriter5writeEPKcj+0x1e>
        memcpy(buf_ + n_, data, std::min(size, bufSize_ - n_));
 808bb36:	1ad2      	subs	r2, r2, r3
 808bb38:	6880      	ldr	r0, [r0, #8]
 808bb3a:	42aa      	cmp	r2, r5
 808bb3c:	bf28      	it	cs
 808bb3e:	462a      	movcs	r2, r5
 808bb40:	4418      	add	r0, r3
 808bb42:	f001 fe90 	bl	808d866 <memcpy>
    }
    n_ += size;
 808bb46:	6923      	ldr	r3, [r4, #16]
 808bb48:	441d      	add	r5, r3
 808bb4a:	6125      	str	r5, [r4, #16]
 808bb4c:	bd38      	pop	{r3, r4, r5, pc}

0808bb4e <_ZN5spark16JSONBufferWriter6printfEPKcz>:
}

void spark::JSONBufferWriter::printf(const char *fmt, ...) {
 808bb4e:	b40e      	push	{r1, r2, r3}
 808bb50:	b517      	push	{r0, r1, r2, r4, lr}
 808bb52:	4604      	mov	r4, r0
 808bb54:	ab05      	add	r3, sp, #20
 808bb56:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, fmt);
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
 808bb5a:	6901      	ldr	r1, [r0, #16]
    n_ += size;
}

void spark::JSONBufferWriter::printf(const char *fmt, ...) {
    va_list args;
    va_start(args, fmt);
 808bb5c:	9301      	str	r3, [sp, #4]
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
 808bb5e:	68e3      	ldr	r3, [r4, #12]
 808bb60:	6880      	ldr	r0, [r0, #8]
 808bb62:	4299      	cmp	r1, r3
 808bb64:	4408      	add	r0, r1
 808bb66:	bf34      	ite	cc
 808bb68:	1a59      	subcc	r1, r3, r1
 808bb6a:	2100      	movcs	r1, #0
 808bb6c:	9b01      	ldr	r3, [sp, #4]
 808bb6e:	f7fd ff2b 	bl	80899c8 <vsnprintf>
    va_end(args);
    n_ += n;
 808bb72:	6923      	ldr	r3, [r4, #16]
 808bb74:	4418      	add	r0, r3
 808bb76:	6120      	str	r0, [r4, #16]
}
 808bb78:	b003      	add	sp, #12
 808bb7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808bb7e:	b003      	add	sp, #12
 808bb80:	4770      	bx	lr

0808bb82 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 808bb82:	b513      	push	{r0, r1, r4, lr}
    write(&c, 1);
 808bb84:	6802      	ldr	r2, [r0, #0]

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 808bb86:	ab02      	add	r3, sp, #8
 808bb88:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
 808bb8c:	6894      	ldr	r4, [r2, #8]
 808bb8e:	4619      	mov	r1, r3
 808bb90:	2201      	movs	r2, #1
 808bb92:	47a0      	blx	r4
}
 808bb94:	b002      	add	sp, #8
 808bb96:	bd10      	pop	{r4, pc}

0808bb98 <_ZN5spark10JSONWriter9endObjectEv>:
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
 808bb98:	b510      	push	{r4, lr}
 808bb9a:	4604      	mov	r4, r0
    write('}');
 808bb9c:	217d      	movs	r1, #125	; 0x7d
 808bb9e:	f7ff fff0 	bl	808bb82 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 808bba2:	2301      	movs	r3, #1
 808bba4:	7123      	strb	r3, [r4, #4]
    return *this;
}
 808bba6:	4620      	mov	r0, r4
 808bba8:	bd10      	pop	{r4, pc}

0808bbaa <_ZN5spark10JSONWriter14writeSeparatorEv>:
    } else if (n > 0) {
        write(buf, n);
    }
}

void spark::JSONWriter::writeSeparator() {
 808bbaa:	b508      	push	{r3, lr}
    switch (state_) {
 808bbac:	7903      	ldrb	r3, [r0, #4]
 808bbae:	2b01      	cmp	r3, #1
 808bbb0:	d002      	beq.n	808bbb8 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 808bbb2:	2b02      	cmp	r3, #2
 808bbb4:	d002      	beq.n	808bbbc <_ZN5spark10JSONWriter14writeSeparatorEv+0x12>
 808bbb6:	bd08      	pop	{r3, pc}
    case NEXT:
        write(',');
 808bbb8:	212c      	movs	r1, #44	; 0x2c
 808bbba:	e000      	b.n	808bbbe <_ZN5spark10JSONWriter14writeSeparatorEv+0x14>
        break;
    case VALUE:
        write(':');
 808bbbc:	213a      	movs	r1, #58	; 0x3a
 808bbbe:	f7ff ffe0 	bl	808bb82 <_ZN5spark10JSONWriter5writeEc>
 808bbc2:	bd08      	pop	{r3, pc}

0808bbc4 <_ZN5spark10JSONWriter11beginObjectEv>:
    write(']');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::beginObject() {
 808bbc4:	b510      	push	{r4, lr}
 808bbc6:	4604      	mov	r4, r0
    writeSeparator();
 808bbc8:	f7ff ffef 	bl	808bbaa <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 808bbcc:	4620      	mov	r0, r4
 808bbce:	217b      	movs	r1, #123	; 0x7b
 808bbd0:	f7ff ffd7 	bl	808bb82 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 808bbd4:	2300      	movs	r3, #0
 808bbd6:	7123      	strb	r3, [r4, #4]
    return *this;
}
 808bbd8:	4620      	mov	r0, r4
 808bbda:	bd10      	pop	{r4, pc}

0808bbdc <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 808bbdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808bbde:	460d      	mov	r5, r1
 808bbe0:	4617      	mov	r7, r2
    write('"');
 808bbe2:	2122      	movs	r1, #34	; 0x22
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 808bbe4:	4604      	mov	r4, r0
    write('"');
 808bbe6:	f7ff ffcc 	bl	808bb82 <_ZN5spark10JSONWriter5writeEc>
 808bbea:	462a      	mov	r2, r5
    const char* const end = str + size;
 808bbec:	4629      	mov	r1, r5
 808bbee:	442f      	add	r7, r5
    const char *s = str;
    while (s != end) {
 808bbf0:	42ba      	cmp	r2, r7
 808bbf2:	d038      	beq.n	808bc66 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8a>
        const char c = *s;
 808bbf4:	4616      	mov	r6, r2
 808bbf6:	f816 5b01 	ldrb.w	r5, [r6], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
 808bbfa:	2d22      	cmp	r5, #34	; 0x22
 808bbfc:	d003      	beq.n	808bc06 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
 808bbfe:	2d5c      	cmp	r5, #92	; 0x5c
 808bc00:	d001      	beq.n	808bc06 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
 808bc02:	2d1f      	cmp	r5, #31
 808bc04:	d82d      	bhi.n	808bc62 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x86>
            write(str, s - str); // Write preceeding characters
 808bc06:	6823      	ldr	r3, [r4, #0]
 808bc08:	1a52      	subs	r2, r2, r1
 808bc0a:	689b      	ldr	r3, [r3, #8]
 808bc0c:	4620      	mov	r0, r4
 808bc0e:	4798      	blx	r3
            write('\\');
 808bc10:	215c      	movs	r1, #92	; 0x5c
 808bc12:	4620      	mov	r0, r4
 808bc14:	f7ff ffb5 	bl	808bb82 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 808bc18:	2d0c      	cmp	r5, #12
 808bc1a:	d019      	beq.n	808bc50 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
 808bc1c:	d807      	bhi.n	808bc2e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x52>
 808bc1e:	2d09      	cmp	r5, #9
 808bc20:	d00f      	beq.n	808bc42 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
 808bc22:	2d0a      	cmp	r5, #10
 808bc24:	d012      	beq.n	808bc4c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x70>
 808bc26:	2d08      	cmp	r5, #8
 808bc28:	d114      	bne.n	808bc54 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
 808bc2a:	2162      	movs	r1, #98	; 0x62
 808bc2c:	e00a      	b.n	808bc44 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
    while (s != end) {
        const char c = *s;
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
 808bc2e:	2d22      	cmp	r5, #34	; 0x22
 808bc30:	d005      	beq.n	808bc3e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
 808bc32:	2d5c      	cmp	r5, #92	; 0x5c
 808bc34:	d003      	beq.n	808bc3e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
 808bc36:	2d0d      	cmp	r5, #13
 808bc38:	d10c      	bne.n	808bc54 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
                break;
            case 0x0c: // Form feed
                write('f');
                break;
            case 0x0d: // Carriage return
                write('r');
 808bc3a:	2172      	movs	r1, #114	; 0x72
 808bc3c:	e002      	b.n	808bc44 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
            case '"':
            case '\\':
                write(c);
 808bc3e:	4629      	mov	r1, r5
 808bc40:	e000      	b.n	808bc44 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x08: // Backspace
                write('b');
                break;
            case 0x09: // Tab
                write('t');
 808bc42:	2174      	movs	r1, #116	; 0x74
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
 808bc44:	4620      	mov	r0, r4
 808bc46:	f7ff ff9c 	bl	808bb82 <_ZN5spark10JSONWriter5writeEc>
                break;
 808bc4a:	e009      	b.n	808bc60 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
            case 0x09: // Tab
                write('t');
                break;
            case 0x0a: // Line feed
                write('n');
 808bc4c:	216e      	movs	r1, #110	; 0x6e
 808bc4e:	e7f9      	b.n	808bc44 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x0c: // Form feed
                write('f');
 808bc50:	2166      	movs	r1, #102	; 0x66
 808bc52:	e7f7      	b.n	808bc44 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 808bc54:	6823      	ldr	r3, [r4, #0]
 808bc56:	462a      	mov	r2, r5
 808bc58:	68db      	ldr	r3, [r3, #12]
 808bc5a:	4909      	ldr	r1, [pc, #36]	; (808bc80 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa4>)
 808bc5c:	4620      	mov	r0, r4
 808bc5e:	4798      	blx	r3
                break;
            }
            str = s + 1;
 808bc60:	4631      	mov	r1, r6

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
    write('"');
    const char* const end = str + size;
    const char *s = str;
    while (s != end) {
 808bc62:	4632      	mov	r2, r6
 808bc64:	e7c4      	b.n	808bbf0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x14>
            }
            str = s + 1;
        }
        ++s;
    }
    if (s != str) {
 808bc66:	4291      	cmp	r1, r2
 808bc68:	d004      	beq.n	808bc74 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x98>
        write(str, s - str); // Write remaining characters
 808bc6a:	6823      	ldr	r3, [r4, #0]
 808bc6c:	1a52      	subs	r2, r2, r1
 808bc6e:	689d      	ldr	r5, [r3, #8]
 808bc70:	4620      	mov	r0, r4
 808bc72:	47a8      	blx	r5
    }
    write('"');
 808bc74:	2122      	movs	r1, #34	; 0x22
 808bc76:	4620      	mov	r0, r4
 808bc78:	f7ff ff83 	bl	808bb82 <_ZN5spark10JSONWriter5writeEc>
 808bc7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808bc7e:	bf00      	nop
 808bc80:	08093279 	.word	0x08093279

0808bc84 <_ZN5spark10JSONWriter4nameEPKcj>:
    write('}');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 808bc84:	b570      	push	{r4, r5, r6, lr}
 808bc86:	4604      	mov	r4, r0
 808bc88:	460d      	mov	r5, r1
 808bc8a:	4616      	mov	r6, r2
    writeSeparator();
 808bc8c:	f7ff ff8d 	bl	808bbaa <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 808bc90:	4620      	mov	r0, r4
 808bc92:	4632      	mov	r2, r6
 808bc94:	4629      	mov	r1, r5
 808bc96:	f7ff ffa1 	bl	808bbdc <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 808bc9a:	2302      	movs	r3, #2
 808bc9c:	7123      	strb	r3, [r4, #4]
    return *this;
}
 808bc9e:	4620      	mov	r0, r4
 808bca0:	bd70      	pop	{r4, r5, r6, pc}

0808bca2 <_ZN5spark10JSONWriter5valueEPKcj>:
    printf("%g", val);
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 808bca2:	b570      	push	{r4, r5, r6, lr}
 808bca4:	4604      	mov	r4, r0
 808bca6:	460d      	mov	r5, r1
 808bca8:	4616      	mov	r6, r2
    writeSeparator();
 808bcaa:	f7ff ff7e 	bl	808bbaa <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 808bcae:	4620      	mov	r0, r4
 808bcb0:	4632      	mov	r2, r6
 808bcb2:	4629      	mov	r1, r5
 808bcb4:	f7ff ff92 	bl	808bbdc <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 808bcb8:	2301      	movs	r3, #1
 808bcba:	7123      	strb	r3, [r4, #4]
    return *this;
}
 808bcbc:	4620      	mov	r0, r4
 808bcbe:	bd70      	pop	{r4, r5, r6, pc}

0808bcc0 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 808bcc0:	b510      	push	{r4, lr}
 808bcc2:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 808bcc4:	480f      	ldr	r0, [pc, #60]	; (808bd04 <pinAvailable+0x44>)
 808bcc6:	f7fe f88e 	bl	8089de6 <_ZN8SPIClass9isEnabledEv>
 808bcca:	b128      	cbz	r0, 808bcd8 <pinAvailable+0x18>
 808bccc:	f1a4 030d 	sub.w	r3, r4, #13
 808bcd0:	2b02      	cmp	r3, #2
 808bcd2:	d801      	bhi.n	808bcd8 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 808bcd4:	2000      	movs	r0, #0
 808bcd6:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 808bcd8:	f000 f8c4 	bl	808be64 <_Z19__fetch_global_Wirev>
 808bcdc:	f7ff fea2 	bl	808ba24 <_ZN7TwoWire9isEnabledEv>
 808bce0:	b108      	cbz	r0, 808bce6 <pinAvailable+0x26>
 808bce2:	2c01      	cmp	r4, #1
 808bce4:	d9f6      	bls.n	808bcd4 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 808bce6:	f7ff fdfb 	bl	808b8e0 <_Z22__fetch_global_Serial1v>
 808bcea:	f7ff fdf6 	bl	808b8da <_ZN11USARTSerial9isEnabledEv>
 808bcee:	b118      	cbz	r0, 808bcf8 <pinAvailable+0x38>
 808bcf0:	f1a4 0312 	sub.w	r3, r4, #18
 808bcf4:	2b01      	cmp	r3, #1
 808bcf6:	d9ed      	bls.n	808bcd4 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 808bcf8:	2c2e      	cmp	r4, #46	; 0x2e
 808bcfa:	bf8c      	ite	hi
 808bcfc:	2000      	movhi	r0, #0
 808bcfe:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 808bd00:	bd10      	pop	{r4, pc}
 808bd02:	bf00      	nop
 808bd04:	200010bc 	.word	0x200010bc

0808bd08 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 808bd08:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 808bd0a:	b538      	push	{r3, r4, r5, lr}
 808bd0c:	4604      	mov	r4, r0
 808bd0e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 808bd10:	d80a      	bhi.n	808bd28 <pinMode+0x20>
 808bd12:	29ff      	cmp	r1, #255	; 0xff
 808bd14:	d008      	beq.n	808bd28 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 808bd16:	f7ff ffd3 	bl	808bcc0 <pinAvailable>
 808bd1a:	b128      	cbz	r0, 808bd28 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 808bd1c:	4629      	mov	r1, r5
 808bd1e:	4620      	mov	r0, r4
}
 808bd20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 808bd24:	f7fd bb3a 	b.w	808939c <HAL_Pin_Mode>
 808bd28:	bd38      	pop	{r3, r4, r5, pc}

0808bd2a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 808bd2a:	b538      	push	{r3, r4, r5, lr}
 808bd2c:	4604      	mov	r4, r0
 808bd2e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 808bd30:	f7fd fb3c 	bl	80893ac <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 808bd34:	28ff      	cmp	r0, #255	; 0xff
 808bd36:	d010      	beq.n	808bd5a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 808bd38:	2806      	cmp	r0, #6
 808bd3a:	d804      	bhi.n	808bd46 <digitalWrite+0x1c>
 808bd3c:	234d      	movs	r3, #77	; 0x4d
 808bd3e:	fa23 f000 	lsr.w	r0, r3, r0
 808bd42:	07c3      	lsls	r3, r0, #31
 808bd44:	d409      	bmi.n	808bd5a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 808bd46:	4620      	mov	r0, r4
 808bd48:	f7ff ffba 	bl	808bcc0 <pinAvailable>
 808bd4c:	b128      	cbz	r0, 808bd5a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 808bd4e:	4629      	mov	r1, r5
 808bd50:	4620      	mov	r0, r4
}
 808bd52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 808bd56:	f7fd bb31 	b.w	80893bc <HAL_GPIO_Write>
 808bd5a:	bd38      	pop	{r3, r4, r5, pc}

0808bd5c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 808bd5c:	b510      	push	{r4, lr}
 808bd5e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 808bd60:	f7fd fb24 	bl	80893ac <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 808bd64:	3804      	subs	r0, #4
 808bd66:	b2c0      	uxtb	r0, r0
 808bd68:	2801      	cmp	r0, #1
 808bd6a:	d908      	bls.n	808bd7e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 808bd6c:	4620      	mov	r0, r4
 808bd6e:	f7ff ffa7 	bl	808bcc0 <pinAvailable>
 808bd72:	b120      	cbz	r0, 808bd7e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 808bd74:	4620      	mov	r0, r4
}
 808bd76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 808bd7a:	f7fd bb27 	b.w	80893cc <HAL_GPIO_Read>
}
 808bd7e:	2000      	movs	r0, #0
 808bd80:	bd10      	pop	{r4, pc}

0808bd82 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 808bd82:	b510      	push	{r4, lr}
 808bd84:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 808bd86:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 808bd88:	bf9c      	itt	ls
 808bd8a:	340a      	addls	r4, #10
 808bd8c:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 808bd8e:	4620      	mov	r0, r4
 808bd90:	f7ff ff96 	bl	808bcc0 <pinAvailable>
 808bd94:	b150      	cbz	r0, 808bdac <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 808bd96:	2103      	movs	r1, #3
 808bd98:	4620      	mov	r0, r4
 808bd9a:	f7fd faf7 	bl	808938c <HAL_Validate_Pin_Function>
 808bd9e:	2803      	cmp	r0, #3
 808bda0:	d104      	bne.n	808bdac <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 808bda2:	4620      	mov	r0, r4
}
 808bda4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 808bda8:	f7fd bb30 	b.w	808940c <HAL_ADC_Read>
}
 808bdac:	2000      	movs	r0, #0
 808bdae:	bd10      	pop	{r4, pc}

0808bdb0 <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 808bdb0:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 808bdb2:	4e11      	ldr	r6, [pc, #68]	; (808bdf8 <_GLOBAL__sub_I_SPI+0x48>)
 808bdb4:	4d11      	ldr	r5, [pc, #68]	; (808bdfc <_GLOBAL__sub_I_SPI+0x4c>)
 808bdb6:	4c12      	ldr	r4, [pc, #72]	; (808be00 <_GLOBAL__sub_I_SPI+0x50>)
 808bdb8:	2100      	movs	r1, #0
 808bdba:	4630      	mov	r0, r6
 808bdbc:	f7fd ff7a 	bl	8089cb4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 808bdc0:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 808bdc2:	4e10      	ldr	r6, [pc, #64]	; (808be04 <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 808bdc4:	462a      	mov	r2, r5
 808bdc6:	4621      	mov	r1, r4
 808bdc8:	f000 f88c 	bl	808bee4 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 808bdcc:	2101      	movs	r1, #1
 808bdce:	4630      	mov	r0, r6
 808bdd0:	f7fd ff70 	bl	8089cb4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 808bdd4:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 808bdd6:	4e0c      	ldr	r6, [pc, #48]	; (808be08 <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 808bdd8:	462a      	mov	r2, r5
 808bdda:	4621      	mov	r1, r4
 808bddc:	f000 f882 	bl	808bee4 <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 808bde0:	2102      	movs	r1, #2
 808bde2:	4630      	mov	r0, r6
 808bde4:	f7fd ff66 	bl	8089cb4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 808bde8:	462a      	mov	r2, r5
 808bdea:	4621      	mov	r1, r4
 808bdec:	4630      	mov	r0, r6
 808bdee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 808bdf2:	f000 b877 	b.w	808bee4 <__aeabi_atexit>
 808bdf6:	bf00      	nop
 808bdf8:	200010bc 	.word	0x200010bc
 808bdfc:	200001d0 	.word	0x200001d0
 808be00:	08089ca5 	.word	0x08089ca5
 808be04:	200010cc 	.word	0x200010cc
 808be08:	200010dc 	.word	0x200010dc

0808be0c <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 808be0c:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 808be0e:	4c07      	ldr	r4, [pc, #28]	; (808be2c <_Z21__fetch_global_EEPROMv+0x20>)
 808be10:	6823      	ldr	r3, [r4, #0]
 808be12:	07db      	lsls	r3, r3, #31
 808be14:	d408      	bmi.n	808be28 <_Z21__fetch_global_EEPROMv+0x1c>
 808be16:	4620      	mov	r0, r4
 808be18:	f7f4 f945 	bl	80800a6 <__cxa_guard_acquire>
 808be1c:	b120      	cbz	r0, 808be28 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 808be1e:	f7fd fb75 	bl	808950c <HAL_EEPROM_Init>
 808be22:	4620      	mov	r0, r4
 808be24:	f7f4 f944 	bl	80800b0 <__cxa_guard_release>
	return eeprom;
}
 808be28:	4801      	ldr	r0, [pc, #4]	; (808be30 <_Z21__fetch_global_EEPROMv+0x24>)
 808be2a:	bd10      	pop	{r4, pc}
 808be2c:	200010f0 	.word	0x200010f0
 808be30:	200010f4 	.word	0x200010f4

0808be34 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 808be34:	b513      	push	{r0, r1, r4, lr}
 808be36:	4c08      	ldr	r4, [pc, #32]	; (808be58 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 808be38:	2300      	movs	r3, #0
 808be3a:	461a      	mov	r2, r3
 808be3c:	4619      	mov	r1, r3
 808be3e:	9300      	str	r3, [sp, #0]
 808be40:	4620      	mov	r0, r4
 808be42:	f7ff fb83 	bl	808b54c <_ZN9IPAddressC1Ehhhh>
 808be46:	4620      	mov	r0, r4
 808be48:	4a04      	ldr	r2, [pc, #16]	; (808be5c <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 808be4a:	4905      	ldr	r1, [pc, #20]	; (808be60 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 808be4c:	b002      	add	sp, #8
 808be4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808be52:	f000 b847 	b.w	808bee4 <__aeabi_atexit>
 808be56:	bf00      	nop
 808be58:	200010f8 	.word	0x200010f8
 808be5c:	200001d0 	.word	0x200001d0
 808be60:	0808b4c5 	.word	0x0808b4c5

0808be64 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 808be64:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 808be66:	4d0b      	ldr	r5, [pc, #44]	; (808be94 <_Z19__fetch_global_Wirev+0x30>)
 808be68:	6829      	ldr	r1, [r5, #0]
 808be6a:	f011 0401 	ands.w	r4, r1, #1
 808be6e:	d10f      	bne.n	808be90 <_Z19__fetch_global_Wirev+0x2c>
 808be70:	4628      	mov	r0, r5
 808be72:	f7f4 f918 	bl	80800a6 <__cxa_guard_acquire>
 808be76:	b158      	cbz	r0, 808be90 <_Z19__fetch_global_Wirev+0x2c>
 808be78:	4621      	mov	r1, r4
 808be7a:	4807      	ldr	r0, [pc, #28]	; (808be98 <_Z19__fetch_global_Wirev+0x34>)
 808be7c:	f7ff fd96 	bl	808b9ac <_ZN7TwoWireC1E17HAL_I2C_Interface>
 808be80:	4628      	mov	r0, r5
 808be82:	f7f4 f915 	bl	80800b0 <__cxa_guard_release>
 808be86:	4a05      	ldr	r2, [pc, #20]	; (808be9c <_Z19__fetch_global_Wirev+0x38>)
 808be88:	4905      	ldr	r1, [pc, #20]	; (808bea0 <_Z19__fetch_global_Wirev+0x3c>)
 808be8a:	4803      	ldr	r0, [pc, #12]	; (808be98 <_Z19__fetch_global_Wirev+0x34>)
 808be8c:	f000 f82a 	bl	808bee4 <__aeabi_atexit>
	return wire;
}
 808be90:	4801      	ldr	r0, [pc, #4]	; (808be98 <_Z19__fetch_global_Wirev+0x34>)
 808be92:	bd38      	pop	{r3, r4, r5, pc}
 808be94:	20001100 	.word	0x20001100
 808be98:	20001118 	.word	0x20001118
 808be9c:	200001d0 	.word	0x200001d0
 808bea0:	0808b955 	.word	0x0808b955

0808bea4 <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 808bea4:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3);
 808bea6:	4c0b      	ldr	r4, [pc, #44]	; (808bed4 <_Z20__fetch_global_Wire3v+0x30>)
 808bea8:	6823      	ldr	r3, [r4, #0]
 808beaa:	07db      	lsls	r3, r3, #31
 808beac:	d40f      	bmi.n	808bece <_Z20__fetch_global_Wire3v+0x2a>
 808beae:	4620      	mov	r0, r4
 808beb0:	f7f4 f8f9 	bl	80800a6 <__cxa_guard_acquire>
 808beb4:	b158      	cbz	r0, 808bece <_Z20__fetch_global_Wire3v+0x2a>
 808beb6:	2102      	movs	r1, #2
 808beb8:	4807      	ldr	r0, [pc, #28]	; (808bed8 <_Z20__fetch_global_Wire3v+0x34>)
 808beba:	f7ff fd77 	bl	808b9ac <_ZN7TwoWireC1E17HAL_I2C_Interface>
 808bebe:	4620      	mov	r0, r4
 808bec0:	f7f4 f8f6 	bl	80800b0 <__cxa_guard_release>
 808bec4:	4a05      	ldr	r2, [pc, #20]	; (808bedc <_Z20__fetch_global_Wire3v+0x38>)
 808bec6:	4906      	ldr	r1, [pc, #24]	; (808bee0 <_Z20__fetch_global_Wire3v+0x3c>)
 808bec8:	4803      	ldr	r0, [pc, #12]	; (808bed8 <_Z20__fetch_global_Wire3v+0x34>)
 808beca:	f000 f80b 	bl	808bee4 <__aeabi_atexit>
	return wire;
}
 808bece:	4802      	ldr	r0, [pc, #8]	; (808bed8 <_Z20__fetch_global_Wire3v+0x34>)
 808bed0:	bd10      	pop	{r4, pc}
 808bed2:	bf00      	nop
 808bed4:	2000112c 	.word	0x2000112c
 808bed8:	20001104 	.word	0x20001104
 808bedc:	200001d0 	.word	0x200001d0
 808bee0:	0808b955 	.word	0x0808b955

0808bee4 <__aeabi_atexit>:
 808bee4:	460b      	mov	r3, r1
 808bee6:	4601      	mov	r1, r0
 808bee8:	4618      	mov	r0, r3
 808beea:	f001 bb8f 	b.w	808d60c <__cxa_atexit>

0808beee <_ZdlPvj>:
 808beee:	f7f4 b8d8 	b.w	80800a2 <_ZdlPv>

0808bef2 <_ZSt25__throw_bad_function_callv>:
 808bef2:	b508      	push	{r3, lr}
 808bef4:	f7fd fd70 	bl	80899d8 <abort>

0808bef8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 808bef8:	4b18      	ldr	r3, [pc, #96]	; (808bf5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 808befa:	681a      	ldr	r2, [r3, #0]
 808befc:	07d1      	lsls	r1, r2, #31
 808befe:	bf5c      	itt	pl
 808bf00:	2201      	movpl	r2, #1
 808bf02:	601a      	strpl	r2, [r3, #0]
 808bf04:	4b16      	ldr	r3, [pc, #88]	; (808bf60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 808bf06:	681a      	ldr	r2, [r3, #0]
 808bf08:	07d2      	lsls	r2, r2, #31
 808bf0a:	bf5c      	itt	pl
 808bf0c:	2201      	movpl	r2, #1
 808bf0e:	601a      	strpl	r2, [r3, #0]
 808bf10:	4b14      	ldr	r3, [pc, #80]	; (808bf64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 808bf12:	681a      	ldr	r2, [r3, #0]
 808bf14:	07d0      	lsls	r0, r2, #31
 808bf16:	bf5c      	itt	pl
 808bf18:	2201      	movpl	r2, #1
 808bf1a:	601a      	strpl	r2, [r3, #0]
 808bf1c:	4b12      	ldr	r3, [pc, #72]	; (808bf68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 808bf1e:	681a      	ldr	r2, [r3, #0]
 808bf20:	07d1      	lsls	r1, r2, #31
 808bf22:	bf5c      	itt	pl
 808bf24:	2201      	movpl	r2, #1
 808bf26:	601a      	strpl	r2, [r3, #0]
 808bf28:	4b10      	ldr	r3, [pc, #64]	; (808bf6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 808bf2a:	681a      	ldr	r2, [r3, #0]
 808bf2c:	07d2      	lsls	r2, r2, #31
 808bf2e:	bf5c      	itt	pl
 808bf30:	2201      	movpl	r2, #1
 808bf32:	601a      	strpl	r2, [r3, #0]
 808bf34:	4b0e      	ldr	r3, [pc, #56]	; (808bf70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 808bf36:	681a      	ldr	r2, [r3, #0]
 808bf38:	07d0      	lsls	r0, r2, #31
 808bf3a:	bf5c      	itt	pl
 808bf3c:	2201      	movpl	r2, #1
 808bf3e:	601a      	strpl	r2, [r3, #0]
 808bf40:	4b0c      	ldr	r3, [pc, #48]	; (808bf74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 808bf42:	681a      	ldr	r2, [r3, #0]
 808bf44:	07d1      	lsls	r1, r2, #31
 808bf46:	bf5c      	itt	pl
 808bf48:	2201      	movpl	r2, #1
 808bf4a:	601a      	strpl	r2, [r3, #0]
 808bf4c:	4b0a      	ldr	r3, [pc, #40]	; (808bf78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 808bf4e:	681a      	ldr	r2, [r3, #0]
 808bf50:	07d2      	lsls	r2, r2, #31
 808bf52:	bf5c      	itt	pl
 808bf54:	2201      	movpl	r2, #1
 808bf56:	601a      	strpl	r2, [r3, #0]
 808bf58:	4770      	bx	lr
 808bf5a:	bf00      	nop
 808bf5c:	2000114c 	.word	0x2000114c
 808bf60:	20001148 	.word	0x20001148
 808bf64:	20001144 	.word	0x20001144
 808bf68:	20001140 	.word	0x20001140
 808bf6c:	2000113c 	.word	0x2000113c
 808bf70:	20001138 	.word	0x20001138
 808bf74:	20001134 	.word	0x20001134
 808bf78:	20001130 	.word	0x20001130

0808bf7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 808bf7c:	4b24      	ldr	r3, [pc, #144]	; (808c010 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 808bf7e:	681a      	ldr	r2, [r3, #0]
 808bf80:	07d0      	lsls	r0, r2, #31
 808bf82:	bf5c      	itt	pl
 808bf84:	2201      	movpl	r2, #1
 808bf86:	601a      	strpl	r2, [r3, #0]
 808bf88:	4b22      	ldr	r3, [pc, #136]	; (808c014 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 808bf8a:	681a      	ldr	r2, [r3, #0]
 808bf8c:	07d1      	lsls	r1, r2, #31
 808bf8e:	bf5c      	itt	pl
 808bf90:	2201      	movpl	r2, #1
 808bf92:	601a      	strpl	r2, [r3, #0]
 808bf94:	4b20      	ldr	r3, [pc, #128]	; (808c018 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 808bf96:	681a      	ldr	r2, [r3, #0]
 808bf98:	07d2      	lsls	r2, r2, #31
 808bf9a:	bf5c      	itt	pl
 808bf9c:	2201      	movpl	r2, #1
 808bf9e:	601a      	strpl	r2, [r3, #0]
 808bfa0:	4b1e      	ldr	r3, [pc, #120]	; (808c01c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 808bfa2:	681a      	ldr	r2, [r3, #0]
 808bfa4:	07d0      	lsls	r0, r2, #31
 808bfa6:	bf5c      	itt	pl
 808bfa8:	2201      	movpl	r2, #1
 808bfaa:	601a      	strpl	r2, [r3, #0]
 808bfac:	4b1c      	ldr	r3, [pc, #112]	; (808c020 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 808bfae:	681a      	ldr	r2, [r3, #0]
 808bfb0:	07d1      	lsls	r1, r2, #31
 808bfb2:	bf5c      	itt	pl
 808bfb4:	2201      	movpl	r2, #1
 808bfb6:	601a      	strpl	r2, [r3, #0]
 808bfb8:	4b1a      	ldr	r3, [pc, #104]	; (808c024 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 808bfba:	681a      	ldr	r2, [r3, #0]
 808bfbc:	07d2      	lsls	r2, r2, #31
 808bfbe:	bf5c      	itt	pl
 808bfc0:	2201      	movpl	r2, #1
 808bfc2:	601a      	strpl	r2, [r3, #0]
 808bfc4:	4b18      	ldr	r3, [pc, #96]	; (808c028 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 808bfc6:	681a      	ldr	r2, [r3, #0]
 808bfc8:	07d0      	lsls	r0, r2, #31
 808bfca:	bf5c      	itt	pl
 808bfcc:	2201      	movpl	r2, #1
 808bfce:	601a      	strpl	r2, [r3, #0]
 808bfd0:	4b16      	ldr	r3, [pc, #88]	; (808c02c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 808bfd2:	681a      	ldr	r2, [r3, #0]
 808bfd4:	07d1      	lsls	r1, r2, #31
 808bfd6:	bf5c      	itt	pl
 808bfd8:	2201      	movpl	r2, #1
 808bfda:	601a      	strpl	r2, [r3, #0]
 808bfdc:	4b14      	ldr	r3, [pc, #80]	; (808c030 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 808bfde:	681a      	ldr	r2, [r3, #0]
 808bfe0:	07d2      	lsls	r2, r2, #31
 808bfe2:	bf5c      	itt	pl
 808bfe4:	2201      	movpl	r2, #1
 808bfe6:	601a      	strpl	r2, [r3, #0]
 808bfe8:	4b12      	ldr	r3, [pc, #72]	; (808c034 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 808bfea:	681a      	ldr	r2, [r3, #0]
 808bfec:	07d0      	lsls	r0, r2, #31
 808bfee:	bf5c      	itt	pl
 808bff0:	2201      	movpl	r2, #1
 808bff2:	601a      	strpl	r2, [r3, #0]
 808bff4:	4b10      	ldr	r3, [pc, #64]	; (808c038 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 808bff6:	681a      	ldr	r2, [r3, #0]
 808bff8:	07d1      	lsls	r1, r2, #31
 808bffa:	bf5c      	itt	pl
 808bffc:	2201      	movpl	r2, #1
 808bffe:	601a      	strpl	r2, [r3, #0]
 808c000:	4b0e      	ldr	r3, [pc, #56]	; (808c03c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 808c002:	681a      	ldr	r2, [r3, #0]
 808c004:	07d2      	lsls	r2, r2, #31
 808c006:	bf5c      	itt	pl
 808c008:	2201      	movpl	r2, #1
 808c00a:	601a      	strpl	r2, [r3, #0]
 808c00c:	4770      	bx	lr
 808c00e:	bf00      	nop
 808c010:	2000117c 	.word	0x2000117c
 808c014:	20001178 	.word	0x20001178
 808c018:	20001174 	.word	0x20001174
 808c01c:	20001170 	.word	0x20001170
 808c020:	2000116c 	.word	0x2000116c
 808c024:	20001168 	.word	0x20001168
 808c028:	20001164 	.word	0x20001164
 808c02c:	20001160 	.word	0x20001160
 808c030:	2000115c 	.word	0x2000115c
 808c034:	20001158 	.word	0x20001158
 808c038:	20001154 	.word	0x20001154
 808c03c:	20001150 	.word	0x20001150

0808c040 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 808c040:	4b24      	ldr	r3, [pc, #144]	; (808c0d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 808c042:	681a      	ldr	r2, [r3, #0]
 808c044:	07d0      	lsls	r0, r2, #31
 808c046:	bf5c      	itt	pl
 808c048:	2201      	movpl	r2, #1
 808c04a:	601a      	strpl	r2, [r3, #0]
 808c04c:	4b22      	ldr	r3, [pc, #136]	; (808c0d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 808c04e:	681a      	ldr	r2, [r3, #0]
 808c050:	07d1      	lsls	r1, r2, #31
 808c052:	bf5c      	itt	pl
 808c054:	2201      	movpl	r2, #1
 808c056:	601a      	strpl	r2, [r3, #0]
 808c058:	4b20      	ldr	r3, [pc, #128]	; (808c0dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 808c05a:	681a      	ldr	r2, [r3, #0]
 808c05c:	07d2      	lsls	r2, r2, #31
 808c05e:	bf5c      	itt	pl
 808c060:	2201      	movpl	r2, #1
 808c062:	601a      	strpl	r2, [r3, #0]
 808c064:	4b1e      	ldr	r3, [pc, #120]	; (808c0e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 808c066:	681a      	ldr	r2, [r3, #0]
 808c068:	07d0      	lsls	r0, r2, #31
 808c06a:	bf5c      	itt	pl
 808c06c:	2201      	movpl	r2, #1
 808c06e:	601a      	strpl	r2, [r3, #0]
 808c070:	4b1c      	ldr	r3, [pc, #112]	; (808c0e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 808c072:	681a      	ldr	r2, [r3, #0]
 808c074:	07d1      	lsls	r1, r2, #31
 808c076:	bf5c      	itt	pl
 808c078:	2201      	movpl	r2, #1
 808c07a:	601a      	strpl	r2, [r3, #0]
 808c07c:	4b1a      	ldr	r3, [pc, #104]	; (808c0e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 808c07e:	681a      	ldr	r2, [r3, #0]
 808c080:	07d2      	lsls	r2, r2, #31
 808c082:	bf5c      	itt	pl
 808c084:	2201      	movpl	r2, #1
 808c086:	601a      	strpl	r2, [r3, #0]
 808c088:	4b18      	ldr	r3, [pc, #96]	; (808c0ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 808c08a:	681a      	ldr	r2, [r3, #0]
 808c08c:	07d0      	lsls	r0, r2, #31
 808c08e:	bf5c      	itt	pl
 808c090:	2201      	movpl	r2, #1
 808c092:	601a      	strpl	r2, [r3, #0]
 808c094:	4b16      	ldr	r3, [pc, #88]	; (808c0f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 808c096:	681a      	ldr	r2, [r3, #0]
 808c098:	07d1      	lsls	r1, r2, #31
 808c09a:	bf5c      	itt	pl
 808c09c:	2201      	movpl	r2, #1
 808c09e:	601a      	strpl	r2, [r3, #0]
 808c0a0:	4b14      	ldr	r3, [pc, #80]	; (808c0f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 808c0a2:	681a      	ldr	r2, [r3, #0]
 808c0a4:	07d2      	lsls	r2, r2, #31
 808c0a6:	bf5c      	itt	pl
 808c0a8:	2201      	movpl	r2, #1
 808c0aa:	601a      	strpl	r2, [r3, #0]
 808c0ac:	4b12      	ldr	r3, [pc, #72]	; (808c0f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 808c0ae:	681a      	ldr	r2, [r3, #0]
 808c0b0:	07d0      	lsls	r0, r2, #31
 808c0b2:	bf5c      	itt	pl
 808c0b4:	2201      	movpl	r2, #1
 808c0b6:	601a      	strpl	r2, [r3, #0]
 808c0b8:	4b10      	ldr	r3, [pc, #64]	; (808c0fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 808c0ba:	681a      	ldr	r2, [r3, #0]
 808c0bc:	07d1      	lsls	r1, r2, #31
 808c0be:	bf5c      	itt	pl
 808c0c0:	2201      	movpl	r2, #1
 808c0c2:	601a      	strpl	r2, [r3, #0]
 808c0c4:	4b0e      	ldr	r3, [pc, #56]	; (808c100 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 808c0c6:	681a      	ldr	r2, [r3, #0]
 808c0c8:	07d2      	lsls	r2, r2, #31
 808c0ca:	bf5c      	itt	pl
 808c0cc:	2201      	movpl	r2, #1
 808c0ce:	601a      	strpl	r2, [r3, #0]
 808c0d0:	4770      	bx	lr
 808c0d2:	bf00      	nop
 808c0d4:	200011ac 	.word	0x200011ac
 808c0d8:	200011a8 	.word	0x200011a8
 808c0dc:	200011a4 	.word	0x200011a4
 808c0e0:	200011a0 	.word	0x200011a0
 808c0e4:	2000119c 	.word	0x2000119c
 808c0e8:	20001198 	.word	0x20001198
 808c0ec:	20001194 	.word	0x20001194
 808c0f0:	20001190 	.word	0x20001190
 808c0f4:	2000118c 	.word	0x2000118c
 808c0f8:	20001188 	.word	0x20001188
 808c0fc:	20001184 	.word	0x20001184
 808c100:	20001180 	.word	0x20001180

0808c104 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 808c104:	4b18      	ldr	r3, [pc, #96]	; (808c168 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 808c106:	681a      	ldr	r2, [r3, #0]
 808c108:	07d1      	lsls	r1, r2, #31
 808c10a:	bf5c      	itt	pl
 808c10c:	2201      	movpl	r2, #1
 808c10e:	601a      	strpl	r2, [r3, #0]
 808c110:	4b16      	ldr	r3, [pc, #88]	; (808c16c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 808c112:	681a      	ldr	r2, [r3, #0]
 808c114:	07d2      	lsls	r2, r2, #31
 808c116:	bf5c      	itt	pl
 808c118:	2201      	movpl	r2, #1
 808c11a:	601a      	strpl	r2, [r3, #0]
 808c11c:	4b14      	ldr	r3, [pc, #80]	; (808c170 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 808c11e:	681a      	ldr	r2, [r3, #0]
 808c120:	07d0      	lsls	r0, r2, #31
 808c122:	bf5c      	itt	pl
 808c124:	2201      	movpl	r2, #1
 808c126:	601a      	strpl	r2, [r3, #0]
 808c128:	4b12      	ldr	r3, [pc, #72]	; (808c174 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 808c12a:	681a      	ldr	r2, [r3, #0]
 808c12c:	07d1      	lsls	r1, r2, #31
 808c12e:	bf5c      	itt	pl
 808c130:	2201      	movpl	r2, #1
 808c132:	601a      	strpl	r2, [r3, #0]
 808c134:	4b10      	ldr	r3, [pc, #64]	; (808c178 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 808c136:	681a      	ldr	r2, [r3, #0]
 808c138:	07d2      	lsls	r2, r2, #31
 808c13a:	bf5c      	itt	pl
 808c13c:	2201      	movpl	r2, #1
 808c13e:	601a      	strpl	r2, [r3, #0]
 808c140:	4b0e      	ldr	r3, [pc, #56]	; (808c17c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 808c142:	681a      	ldr	r2, [r3, #0]
 808c144:	07d0      	lsls	r0, r2, #31
 808c146:	bf5c      	itt	pl
 808c148:	2201      	movpl	r2, #1
 808c14a:	601a      	strpl	r2, [r3, #0]
 808c14c:	4b0c      	ldr	r3, [pc, #48]	; (808c180 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 808c14e:	681a      	ldr	r2, [r3, #0]
 808c150:	07d1      	lsls	r1, r2, #31
 808c152:	bf5c      	itt	pl
 808c154:	2201      	movpl	r2, #1
 808c156:	601a      	strpl	r2, [r3, #0]
 808c158:	4b0a      	ldr	r3, [pc, #40]	; (808c184 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 808c15a:	681a      	ldr	r2, [r3, #0]
 808c15c:	07d2      	lsls	r2, r2, #31
 808c15e:	bf5c      	itt	pl
 808c160:	2201      	movpl	r2, #1
 808c162:	601a      	strpl	r2, [r3, #0]
 808c164:	4770      	bx	lr
 808c166:	bf00      	nop
 808c168:	200011cc 	.word	0x200011cc
 808c16c:	200011c8 	.word	0x200011c8
 808c170:	200011c4 	.word	0x200011c4
 808c174:	200011c0 	.word	0x200011c0
 808c178:	200011bc 	.word	0x200011bc
 808c17c:	200011b8 	.word	0x200011b8
 808c180:	200011b4 	.word	0x200011b4
 808c184:	200011b0 	.word	0x200011b0

0808c188 <__aeabi_drsub>:
 808c188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 808c18c:	e002      	b.n	808c194 <__adddf3>
 808c18e:	bf00      	nop

0808c190 <__aeabi_dsub>:
 808c190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0808c194 <__adddf3>:
 808c194:	b530      	push	{r4, r5, lr}
 808c196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 808c19a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 808c19e:	ea94 0f05 	teq	r4, r5
 808c1a2:	bf08      	it	eq
 808c1a4:	ea90 0f02 	teqeq	r0, r2
 808c1a8:	bf1f      	itttt	ne
 808c1aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 808c1ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 808c1b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 808c1b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 808c1ba:	f000 80e2 	beq.w	808c382 <__adddf3+0x1ee>
 808c1be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 808c1c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 808c1c6:	bfb8      	it	lt
 808c1c8:	426d      	neglt	r5, r5
 808c1ca:	dd0c      	ble.n	808c1e6 <__adddf3+0x52>
 808c1cc:	442c      	add	r4, r5
 808c1ce:	ea80 0202 	eor.w	r2, r0, r2
 808c1d2:	ea81 0303 	eor.w	r3, r1, r3
 808c1d6:	ea82 0000 	eor.w	r0, r2, r0
 808c1da:	ea83 0101 	eor.w	r1, r3, r1
 808c1de:	ea80 0202 	eor.w	r2, r0, r2
 808c1e2:	ea81 0303 	eor.w	r3, r1, r3
 808c1e6:	2d36      	cmp	r5, #54	; 0x36
 808c1e8:	bf88      	it	hi
 808c1ea:	bd30      	pophi	{r4, r5, pc}
 808c1ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808c1f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 808c1f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 808c1f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 808c1fc:	d002      	beq.n	808c204 <__adddf3+0x70>
 808c1fe:	4240      	negs	r0, r0
 808c200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808c204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 808c208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 808c20c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 808c210:	d002      	beq.n	808c218 <__adddf3+0x84>
 808c212:	4252      	negs	r2, r2
 808c214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808c218:	ea94 0f05 	teq	r4, r5
 808c21c:	f000 80a7 	beq.w	808c36e <__adddf3+0x1da>
 808c220:	f1a4 0401 	sub.w	r4, r4, #1
 808c224:	f1d5 0e20 	rsbs	lr, r5, #32
 808c228:	db0d      	blt.n	808c246 <__adddf3+0xb2>
 808c22a:	fa02 fc0e 	lsl.w	ip, r2, lr
 808c22e:	fa22 f205 	lsr.w	r2, r2, r5
 808c232:	1880      	adds	r0, r0, r2
 808c234:	f141 0100 	adc.w	r1, r1, #0
 808c238:	fa03 f20e 	lsl.w	r2, r3, lr
 808c23c:	1880      	adds	r0, r0, r2
 808c23e:	fa43 f305 	asr.w	r3, r3, r5
 808c242:	4159      	adcs	r1, r3
 808c244:	e00e      	b.n	808c264 <__adddf3+0xd0>
 808c246:	f1a5 0520 	sub.w	r5, r5, #32
 808c24a:	f10e 0e20 	add.w	lr, lr, #32
 808c24e:	2a01      	cmp	r2, #1
 808c250:	fa03 fc0e 	lsl.w	ip, r3, lr
 808c254:	bf28      	it	cs
 808c256:	f04c 0c02 	orrcs.w	ip, ip, #2
 808c25a:	fa43 f305 	asr.w	r3, r3, r5
 808c25e:	18c0      	adds	r0, r0, r3
 808c260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 808c264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808c268:	d507      	bpl.n	808c27a <__adddf3+0xe6>
 808c26a:	f04f 0e00 	mov.w	lr, #0
 808c26e:	f1dc 0c00 	rsbs	ip, ip, #0
 808c272:	eb7e 0000 	sbcs.w	r0, lr, r0
 808c276:	eb6e 0101 	sbc.w	r1, lr, r1
 808c27a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 808c27e:	d31b      	bcc.n	808c2b8 <__adddf3+0x124>
 808c280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 808c284:	d30c      	bcc.n	808c2a0 <__adddf3+0x10c>
 808c286:	0849      	lsrs	r1, r1, #1
 808c288:	ea5f 0030 	movs.w	r0, r0, rrx
 808c28c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 808c290:	f104 0401 	add.w	r4, r4, #1
 808c294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 808c298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 808c29c:	f080 809a 	bcs.w	808c3d4 <__adddf3+0x240>
 808c2a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 808c2a4:	bf08      	it	eq
 808c2a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808c2aa:	f150 0000 	adcs.w	r0, r0, #0
 808c2ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808c2b2:	ea41 0105 	orr.w	r1, r1, r5
 808c2b6:	bd30      	pop	{r4, r5, pc}
 808c2b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 808c2bc:	4140      	adcs	r0, r0
 808c2be:	eb41 0101 	adc.w	r1, r1, r1
 808c2c2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808c2c6:	f1a4 0401 	sub.w	r4, r4, #1
 808c2ca:	d1e9      	bne.n	808c2a0 <__adddf3+0x10c>
 808c2cc:	f091 0f00 	teq	r1, #0
 808c2d0:	bf04      	itt	eq
 808c2d2:	4601      	moveq	r1, r0
 808c2d4:	2000      	moveq	r0, #0
 808c2d6:	fab1 f381 	clz	r3, r1
 808c2da:	bf08      	it	eq
 808c2dc:	3320      	addeq	r3, #32
 808c2de:	f1a3 030b 	sub.w	r3, r3, #11
 808c2e2:	f1b3 0220 	subs.w	r2, r3, #32
 808c2e6:	da0c      	bge.n	808c302 <__adddf3+0x16e>
 808c2e8:	320c      	adds	r2, #12
 808c2ea:	dd08      	ble.n	808c2fe <__adddf3+0x16a>
 808c2ec:	f102 0c14 	add.w	ip, r2, #20
 808c2f0:	f1c2 020c 	rsb	r2, r2, #12
 808c2f4:	fa01 f00c 	lsl.w	r0, r1, ip
 808c2f8:	fa21 f102 	lsr.w	r1, r1, r2
 808c2fc:	e00c      	b.n	808c318 <__adddf3+0x184>
 808c2fe:	f102 0214 	add.w	r2, r2, #20
 808c302:	bfd8      	it	le
 808c304:	f1c2 0c20 	rsble	ip, r2, #32
 808c308:	fa01 f102 	lsl.w	r1, r1, r2
 808c30c:	fa20 fc0c 	lsr.w	ip, r0, ip
 808c310:	bfdc      	itt	le
 808c312:	ea41 010c 	orrle.w	r1, r1, ip
 808c316:	4090      	lslle	r0, r2
 808c318:	1ae4      	subs	r4, r4, r3
 808c31a:	bfa2      	ittt	ge
 808c31c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 808c320:	4329      	orrge	r1, r5
 808c322:	bd30      	popge	{r4, r5, pc}
 808c324:	ea6f 0404 	mvn.w	r4, r4
 808c328:	3c1f      	subs	r4, #31
 808c32a:	da1c      	bge.n	808c366 <__adddf3+0x1d2>
 808c32c:	340c      	adds	r4, #12
 808c32e:	dc0e      	bgt.n	808c34e <__adddf3+0x1ba>
 808c330:	f104 0414 	add.w	r4, r4, #20
 808c334:	f1c4 0220 	rsb	r2, r4, #32
 808c338:	fa20 f004 	lsr.w	r0, r0, r4
 808c33c:	fa01 f302 	lsl.w	r3, r1, r2
 808c340:	ea40 0003 	orr.w	r0, r0, r3
 808c344:	fa21 f304 	lsr.w	r3, r1, r4
 808c348:	ea45 0103 	orr.w	r1, r5, r3
 808c34c:	bd30      	pop	{r4, r5, pc}
 808c34e:	f1c4 040c 	rsb	r4, r4, #12
 808c352:	f1c4 0220 	rsb	r2, r4, #32
 808c356:	fa20 f002 	lsr.w	r0, r0, r2
 808c35a:	fa01 f304 	lsl.w	r3, r1, r4
 808c35e:	ea40 0003 	orr.w	r0, r0, r3
 808c362:	4629      	mov	r1, r5
 808c364:	bd30      	pop	{r4, r5, pc}
 808c366:	fa21 f004 	lsr.w	r0, r1, r4
 808c36a:	4629      	mov	r1, r5
 808c36c:	bd30      	pop	{r4, r5, pc}
 808c36e:	f094 0f00 	teq	r4, #0
 808c372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 808c376:	bf06      	itte	eq
 808c378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 808c37c:	3401      	addeq	r4, #1
 808c37e:	3d01      	subne	r5, #1
 808c380:	e74e      	b.n	808c220 <__adddf3+0x8c>
 808c382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 808c386:	bf18      	it	ne
 808c388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 808c38c:	d029      	beq.n	808c3e2 <__adddf3+0x24e>
 808c38e:	ea94 0f05 	teq	r4, r5
 808c392:	bf08      	it	eq
 808c394:	ea90 0f02 	teqeq	r0, r2
 808c398:	d005      	beq.n	808c3a6 <__adddf3+0x212>
 808c39a:	ea54 0c00 	orrs.w	ip, r4, r0
 808c39e:	bf04      	itt	eq
 808c3a0:	4619      	moveq	r1, r3
 808c3a2:	4610      	moveq	r0, r2
 808c3a4:	bd30      	pop	{r4, r5, pc}
 808c3a6:	ea91 0f03 	teq	r1, r3
 808c3aa:	bf1e      	ittt	ne
 808c3ac:	2100      	movne	r1, #0
 808c3ae:	2000      	movne	r0, #0
 808c3b0:	bd30      	popne	{r4, r5, pc}
 808c3b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 808c3b6:	d105      	bne.n	808c3c4 <__adddf3+0x230>
 808c3b8:	0040      	lsls	r0, r0, #1
 808c3ba:	4149      	adcs	r1, r1
 808c3bc:	bf28      	it	cs
 808c3be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 808c3c2:	bd30      	pop	{r4, r5, pc}
 808c3c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 808c3c8:	bf3c      	itt	cc
 808c3ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 808c3ce:	bd30      	popcc	{r4, r5, pc}
 808c3d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808c3d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 808c3d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 808c3dc:	f04f 0000 	mov.w	r0, #0
 808c3e0:	bd30      	pop	{r4, r5, pc}
 808c3e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 808c3e6:	bf1a      	itte	ne
 808c3e8:	4619      	movne	r1, r3
 808c3ea:	4610      	movne	r0, r2
 808c3ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 808c3f0:	bf1c      	itt	ne
 808c3f2:	460b      	movne	r3, r1
 808c3f4:	4602      	movne	r2, r0
 808c3f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808c3fa:	bf06      	itte	eq
 808c3fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 808c400:	ea91 0f03 	teqeq	r1, r3
 808c404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 808c408:	bd30      	pop	{r4, r5, pc}
 808c40a:	bf00      	nop

0808c40c <__aeabi_ui2d>:
 808c40c:	f090 0f00 	teq	r0, #0
 808c410:	bf04      	itt	eq
 808c412:	2100      	moveq	r1, #0
 808c414:	4770      	bxeq	lr
 808c416:	b530      	push	{r4, r5, lr}
 808c418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808c41c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808c420:	f04f 0500 	mov.w	r5, #0
 808c424:	f04f 0100 	mov.w	r1, #0
 808c428:	e750      	b.n	808c2cc <__adddf3+0x138>
 808c42a:	bf00      	nop

0808c42c <__aeabi_i2d>:
 808c42c:	f090 0f00 	teq	r0, #0
 808c430:	bf04      	itt	eq
 808c432:	2100      	moveq	r1, #0
 808c434:	4770      	bxeq	lr
 808c436:	b530      	push	{r4, r5, lr}
 808c438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808c43c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808c440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 808c444:	bf48      	it	mi
 808c446:	4240      	negmi	r0, r0
 808c448:	f04f 0100 	mov.w	r1, #0
 808c44c:	e73e      	b.n	808c2cc <__adddf3+0x138>
 808c44e:	bf00      	nop

0808c450 <__aeabi_f2d>:
 808c450:	0042      	lsls	r2, r0, #1
 808c452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 808c456:	ea4f 0131 	mov.w	r1, r1, rrx
 808c45a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 808c45e:	bf1f      	itttt	ne
 808c460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 808c464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 808c468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 808c46c:	4770      	bxne	lr
 808c46e:	f092 0f00 	teq	r2, #0
 808c472:	bf14      	ite	ne
 808c474:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 808c478:	4770      	bxeq	lr
 808c47a:	b530      	push	{r4, r5, lr}
 808c47c:	f44f 7460 	mov.w	r4, #896	; 0x380
 808c480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808c484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 808c488:	e720      	b.n	808c2cc <__adddf3+0x138>
 808c48a:	bf00      	nop

0808c48c <__aeabi_ul2d>:
 808c48c:	ea50 0201 	orrs.w	r2, r0, r1
 808c490:	bf08      	it	eq
 808c492:	4770      	bxeq	lr
 808c494:	b530      	push	{r4, r5, lr}
 808c496:	f04f 0500 	mov.w	r5, #0
 808c49a:	e00a      	b.n	808c4b2 <__aeabi_l2d+0x16>

0808c49c <__aeabi_l2d>:
 808c49c:	ea50 0201 	orrs.w	r2, r0, r1
 808c4a0:	bf08      	it	eq
 808c4a2:	4770      	bxeq	lr
 808c4a4:	b530      	push	{r4, r5, lr}
 808c4a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 808c4aa:	d502      	bpl.n	808c4b2 <__aeabi_l2d+0x16>
 808c4ac:	4240      	negs	r0, r0
 808c4ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808c4b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808c4b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808c4ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 808c4be:	f43f aedc 	beq.w	808c27a <__adddf3+0xe6>
 808c4c2:	f04f 0203 	mov.w	r2, #3
 808c4c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808c4ca:	bf18      	it	ne
 808c4cc:	3203      	addne	r2, #3
 808c4ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808c4d2:	bf18      	it	ne
 808c4d4:	3203      	addne	r2, #3
 808c4d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 808c4da:	f1c2 0320 	rsb	r3, r2, #32
 808c4de:	fa00 fc03 	lsl.w	ip, r0, r3
 808c4e2:	fa20 f002 	lsr.w	r0, r0, r2
 808c4e6:	fa01 fe03 	lsl.w	lr, r1, r3
 808c4ea:	ea40 000e 	orr.w	r0, r0, lr
 808c4ee:	fa21 f102 	lsr.w	r1, r1, r2
 808c4f2:	4414      	add	r4, r2
 808c4f4:	e6c1      	b.n	808c27a <__adddf3+0xe6>
 808c4f6:	bf00      	nop

0808c4f8 <__aeabi_dmul>:
 808c4f8:	b570      	push	{r4, r5, r6, lr}
 808c4fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808c4fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808c502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808c506:	bf1d      	ittte	ne
 808c508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 808c50c:	ea94 0f0c 	teqne	r4, ip
 808c510:	ea95 0f0c 	teqne	r5, ip
 808c514:	f000 f8de 	bleq	808c6d4 <__aeabi_dmul+0x1dc>
 808c518:	442c      	add	r4, r5
 808c51a:	ea81 0603 	eor.w	r6, r1, r3
 808c51e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 808c522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 808c526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 808c52a:	bf18      	it	ne
 808c52c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 808c530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808c534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 808c538:	d038      	beq.n	808c5ac <__aeabi_dmul+0xb4>
 808c53a:	fba0 ce02 	umull	ip, lr, r0, r2
 808c53e:	f04f 0500 	mov.w	r5, #0
 808c542:	fbe1 e502 	umlal	lr, r5, r1, r2
 808c546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 808c54a:	fbe0 e503 	umlal	lr, r5, r0, r3
 808c54e:	f04f 0600 	mov.w	r6, #0
 808c552:	fbe1 5603 	umlal	r5, r6, r1, r3
 808c556:	f09c 0f00 	teq	ip, #0
 808c55a:	bf18      	it	ne
 808c55c:	f04e 0e01 	orrne.w	lr, lr, #1
 808c560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 808c564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 808c568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 808c56c:	d204      	bcs.n	808c578 <__aeabi_dmul+0x80>
 808c56e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 808c572:	416d      	adcs	r5, r5
 808c574:	eb46 0606 	adc.w	r6, r6, r6
 808c578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 808c57c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 808c580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 808c584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 808c588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 808c58c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808c590:	bf88      	it	hi
 808c592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 808c596:	d81e      	bhi.n	808c5d6 <__aeabi_dmul+0xde>
 808c598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 808c59c:	bf08      	it	eq
 808c59e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 808c5a2:	f150 0000 	adcs.w	r0, r0, #0
 808c5a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808c5aa:	bd70      	pop	{r4, r5, r6, pc}
 808c5ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 808c5b0:	ea46 0101 	orr.w	r1, r6, r1
 808c5b4:	ea40 0002 	orr.w	r0, r0, r2
 808c5b8:	ea81 0103 	eor.w	r1, r1, r3
 808c5bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 808c5c0:	bfc2      	ittt	gt
 808c5c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 808c5c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808c5ca:	bd70      	popgt	{r4, r5, r6, pc}
 808c5cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808c5d0:	f04f 0e00 	mov.w	lr, #0
 808c5d4:	3c01      	subs	r4, #1
 808c5d6:	f300 80ab 	bgt.w	808c730 <__aeabi_dmul+0x238>
 808c5da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 808c5de:	bfde      	ittt	le
 808c5e0:	2000      	movle	r0, #0
 808c5e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 808c5e6:	bd70      	pople	{r4, r5, r6, pc}
 808c5e8:	f1c4 0400 	rsb	r4, r4, #0
 808c5ec:	3c20      	subs	r4, #32
 808c5ee:	da35      	bge.n	808c65c <__aeabi_dmul+0x164>
 808c5f0:	340c      	adds	r4, #12
 808c5f2:	dc1b      	bgt.n	808c62c <__aeabi_dmul+0x134>
 808c5f4:	f104 0414 	add.w	r4, r4, #20
 808c5f8:	f1c4 0520 	rsb	r5, r4, #32
 808c5fc:	fa00 f305 	lsl.w	r3, r0, r5
 808c600:	fa20 f004 	lsr.w	r0, r0, r4
 808c604:	fa01 f205 	lsl.w	r2, r1, r5
 808c608:	ea40 0002 	orr.w	r0, r0, r2
 808c60c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 808c610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 808c614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 808c618:	fa21 f604 	lsr.w	r6, r1, r4
 808c61c:	eb42 0106 	adc.w	r1, r2, r6
 808c620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808c624:	bf08      	it	eq
 808c626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808c62a:	bd70      	pop	{r4, r5, r6, pc}
 808c62c:	f1c4 040c 	rsb	r4, r4, #12
 808c630:	f1c4 0520 	rsb	r5, r4, #32
 808c634:	fa00 f304 	lsl.w	r3, r0, r4
 808c638:	fa20 f005 	lsr.w	r0, r0, r5
 808c63c:	fa01 f204 	lsl.w	r2, r1, r4
 808c640:	ea40 0002 	orr.w	r0, r0, r2
 808c644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808c648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 808c64c:	f141 0100 	adc.w	r1, r1, #0
 808c650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808c654:	bf08      	it	eq
 808c656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808c65a:	bd70      	pop	{r4, r5, r6, pc}
 808c65c:	f1c4 0520 	rsb	r5, r4, #32
 808c660:	fa00 f205 	lsl.w	r2, r0, r5
 808c664:	ea4e 0e02 	orr.w	lr, lr, r2
 808c668:	fa20 f304 	lsr.w	r3, r0, r4
 808c66c:	fa01 f205 	lsl.w	r2, r1, r5
 808c670:	ea43 0302 	orr.w	r3, r3, r2
 808c674:	fa21 f004 	lsr.w	r0, r1, r4
 808c678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808c67c:	fa21 f204 	lsr.w	r2, r1, r4
 808c680:	ea20 0002 	bic.w	r0, r0, r2
 808c684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 808c688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808c68c:	bf08      	it	eq
 808c68e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808c692:	bd70      	pop	{r4, r5, r6, pc}
 808c694:	f094 0f00 	teq	r4, #0
 808c698:	d10f      	bne.n	808c6ba <__aeabi_dmul+0x1c2>
 808c69a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 808c69e:	0040      	lsls	r0, r0, #1
 808c6a0:	eb41 0101 	adc.w	r1, r1, r1
 808c6a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808c6a8:	bf08      	it	eq
 808c6aa:	3c01      	subeq	r4, #1
 808c6ac:	d0f7      	beq.n	808c69e <__aeabi_dmul+0x1a6>
 808c6ae:	ea41 0106 	orr.w	r1, r1, r6
 808c6b2:	f095 0f00 	teq	r5, #0
 808c6b6:	bf18      	it	ne
 808c6b8:	4770      	bxne	lr
 808c6ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 808c6be:	0052      	lsls	r2, r2, #1
 808c6c0:	eb43 0303 	adc.w	r3, r3, r3
 808c6c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 808c6c8:	bf08      	it	eq
 808c6ca:	3d01      	subeq	r5, #1
 808c6cc:	d0f7      	beq.n	808c6be <__aeabi_dmul+0x1c6>
 808c6ce:	ea43 0306 	orr.w	r3, r3, r6
 808c6d2:	4770      	bx	lr
 808c6d4:	ea94 0f0c 	teq	r4, ip
 808c6d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808c6dc:	bf18      	it	ne
 808c6de:	ea95 0f0c 	teqne	r5, ip
 808c6e2:	d00c      	beq.n	808c6fe <__aeabi_dmul+0x206>
 808c6e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808c6e8:	bf18      	it	ne
 808c6ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808c6ee:	d1d1      	bne.n	808c694 <__aeabi_dmul+0x19c>
 808c6f0:	ea81 0103 	eor.w	r1, r1, r3
 808c6f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808c6f8:	f04f 0000 	mov.w	r0, #0
 808c6fc:	bd70      	pop	{r4, r5, r6, pc}
 808c6fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808c702:	bf06      	itte	eq
 808c704:	4610      	moveq	r0, r2
 808c706:	4619      	moveq	r1, r3
 808c708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808c70c:	d019      	beq.n	808c742 <__aeabi_dmul+0x24a>
 808c70e:	ea94 0f0c 	teq	r4, ip
 808c712:	d102      	bne.n	808c71a <__aeabi_dmul+0x222>
 808c714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 808c718:	d113      	bne.n	808c742 <__aeabi_dmul+0x24a>
 808c71a:	ea95 0f0c 	teq	r5, ip
 808c71e:	d105      	bne.n	808c72c <__aeabi_dmul+0x234>
 808c720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 808c724:	bf1c      	itt	ne
 808c726:	4610      	movne	r0, r2
 808c728:	4619      	movne	r1, r3
 808c72a:	d10a      	bne.n	808c742 <__aeabi_dmul+0x24a>
 808c72c:	ea81 0103 	eor.w	r1, r1, r3
 808c730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808c734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808c738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 808c73c:	f04f 0000 	mov.w	r0, #0
 808c740:	bd70      	pop	{r4, r5, r6, pc}
 808c742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808c746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 808c74a:	bd70      	pop	{r4, r5, r6, pc}

0808c74c <__aeabi_ddiv>:
 808c74c:	b570      	push	{r4, r5, r6, lr}
 808c74e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808c752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808c756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808c75a:	bf1d      	ittte	ne
 808c75c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 808c760:	ea94 0f0c 	teqne	r4, ip
 808c764:	ea95 0f0c 	teqne	r5, ip
 808c768:	f000 f8a7 	bleq	808c8ba <__aeabi_ddiv+0x16e>
 808c76c:	eba4 0405 	sub.w	r4, r4, r5
 808c770:	ea81 0e03 	eor.w	lr, r1, r3
 808c774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808c778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 808c77c:	f000 8088 	beq.w	808c890 <__aeabi_ddiv+0x144>
 808c780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 808c784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 808c788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 808c78c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 808c790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 808c794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 808c798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 808c79c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 808c7a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 808c7a4:	429d      	cmp	r5, r3
 808c7a6:	bf08      	it	eq
 808c7a8:	4296      	cmpeq	r6, r2
 808c7aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 808c7ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 808c7b2:	d202      	bcs.n	808c7ba <__aeabi_ddiv+0x6e>
 808c7b4:	085b      	lsrs	r3, r3, #1
 808c7b6:	ea4f 0232 	mov.w	r2, r2, rrx
 808c7ba:	1ab6      	subs	r6, r6, r2
 808c7bc:	eb65 0503 	sbc.w	r5, r5, r3
 808c7c0:	085b      	lsrs	r3, r3, #1
 808c7c2:	ea4f 0232 	mov.w	r2, r2, rrx
 808c7c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 808c7ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 808c7ce:	ebb6 0e02 	subs.w	lr, r6, r2
 808c7d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 808c7d6:	bf22      	ittt	cs
 808c7d8:	1ab6      	subcs	r6, r6, r2
 808c7da:	4675      	movcs	r5, lr
 808c7dc:	ea40 000c 	orrcs.w	r0, r0, ip
 808c7e0:	085b      	lsrs	r3, r3, #1
 808c7e2:	ea4f 0232 	mov.w	r2, r2, rrx
 808c7e6:	ebb6 0e02 	subs.w	lr, r6, r2
 808c7ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 808c7ee:	bf22      	ittt	cs
 808c7f0:	1ab6      	subcs	r6, r6, r2
 808c7f2:	4675      	movcs	r5, lr
 808c7f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808c7f8:	085b      	lsrs	r3, r3, #1
 808c7fa:	ea4f 0232 	mov.w	r2, r2, rrx
 808c7fe:	ebb6 0e02 	subs.w	lr, r6, r2
 808c802:	eb75 0e03 	sbcs.w	lr, r5, r3
 808c806:	bf22      	ittt	cs
 808c808:	1ab6      	subcs	r6, r6, r2
 808c80a:	4675      	movcs	r5, lr
 808c80c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808c810:	085b      	lsrs	r3, r3, #1
 808c812:	ea4f 0232 	mov.w	r2, r2, rrx
 808c816:	ebb6 0e02 	subs.w	lr, r6, r2
 808c81a:	eb75 0e03 	sbcs.w	lr, r5, r3
 808c81e:	bf22      	ittt	cs
 808c820:	1ab6      	subcs	r6, r6, r2
 808c822:	4675      	movcs	r5, lr
 808c824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808c828:	ea55 0e06 	orrs.w	lr, r5, r6
 808c82c:	d018      	beq.n	808c860 <__aeabi_ddiv+0x114>
 808c82e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 808c832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 808c836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 808c83a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 808c83e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 808c842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 808c846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 808c84a:	d1c0      	bne.n	808c7ce <__aeabi_ddiv+0x82>
 808c84c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808c850:	d10b      	bne.n	808c86a <__aeabi_ddiv+0x11e>
 808c852:	ea41 0100 	orr.w	r1, r1, r0
 808c856:	f04f 0000 	mov.w	r0, #0
 808c85a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 808c85e:	e7b6      	b.n	808c7ce <__aeabi_ddiv+0x82>
 808c860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808c864:	bf04      	itt	eq
 808c866:	4301      	orreq	r1, r0
 808c868:	2000      	moveq	r0, #0
 808c86a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808c86e:	bf88      	it	hi
 808c870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 808c874:	f63f aeaf 	bhi.w	808c5d6 <__aeabi_dmul+0xde>
 808c878:	ebb5 0c03 	subs.w	ip, r5, r3
 808c87c:	bf04      	itt	eq
 808c87e:	ebb6 0c02 	subseq.w	ip, r6, r2
 808c882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808c886:	f150 0000 	adcs.w	r0, r0, #0
 808c88a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808c88e:	bd70      	pop	{r4, r5, r6, pc}
 808c890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 808c894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 808c898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 808c89c:	bfc2      	ittt	gt
 808c89e:	ebd4 050c 	rsbsgt	r5, r4, ip
 808c8a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808c8a6:	bd70      	popgt	{r4, r5, r6, pc}
 808c8a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808c8ac:	f04f 0e00 	mov.w	lr, #0
 808c8b0:	3c01      	subs	r4, #1
 808c8b2:	e690      	b.n	808c5d6 <__aeabi_dmul+0xde>
 808c8b4:	ea45 0e06 	orr.w	lr, r5, r6
 808c8b8:	e68d      	b.n	808c5d6 <__aeabi_dmul+0xde>
 808c8ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808c8be:	ea94 0f0c 	teq	r4, ip
 808c8c2:	bf08      	it	eq
 808c8c4:	ea95 0f0c 	teqeq	r5, ip
 808c8c8:	f43f af3b 	beq.w	808c742 <__aeabi_dmul+0x24a>
 808c8cc:	ea94 0f0c 	teq	r4, ip
 808c8d0:	d10a      	bne.n	808c8e8 <__aeabi_ddiv+0x19c>
 808c8d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808c8d6:	f47f af34 	bne.w	808c742 <__aeabi_dmul+0x24a>
 808c8da:	ea95 0f0c 	teq	r5, ip
 808c8de:	f47f af25 	bne.w	808c72c <__aeabi_dmul+0x234>
 808c8e2:	4610      	mov	r0, r2
 808c8e4:	4619      	mov	r1, r3
 808c8e6:	e72c      	b.n	808c742 <__aeabi_dmul+0x24a>
 808c8e8:	ea95 0f0c 	teq	r5, ip
 808c8ec:	d106      	bne.n	808c8fc <__aeabi_ddiv+0x1b0>
 808c8ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808c8f2:	f43f aefd 	beq.w	808c6f0 <__aeabi_dmul+0x1f8>
 808c8f6:	4610      	mov	r0, r2
 808c8f8:	4619      	mov	r1, r3
 808c8fa:	e722      	b.n	808c742 <__aeabi_dmul+0x24a>
 808c8fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808c900:	bf18      	it	ne
 808c902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808c906:	f47f aec5 	bne.w	808c694 <__aeabi_dmul+0x19c>
 808c90a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 808c90e:	f47f af0d 	bne.w	808c72c <__aeabi_dmul+0x234>
 808c912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 808c916:	f47f aeeb 	bne.w	808c6f0 <__aeabi_dmul+0x1f8>
 808c91a:	e712      	b.n	808c742 <__aeabi_dmul+0x24a>

0808c91c <__gedf2>:
 808c91c:	f04f 3cff 	mov.w	ip, #4294967295
 808c920:	e006      	b.n	808c930 <__cmpdf2+0x4>
 808c922:	bf00      	nop

0808c924 <__ledf2>:
 808c924:	f04f 0c01 	mov.w	ip, #1
 808c928:	e002      	b.n	808c930 <__cmpdf2+0x4>
 808c92a:	bf00      	nop

0808c92c <__cmpdf2>:
 808c92c:	f04f 0c01 	mov.w	ip, #1
 808c930:	f84d cd04 	str.w	ip, [sp, #-4]!
 808c934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808c938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808c93c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808c940:	bf18      	it	ne
 808c942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 808c946:	d01b      	beq.n	808c980 <__cmpdf2+0x54>
 808c948:	b001      	add	sp, #4
 808c94a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 808c94e:	bf0c      	ite	eq
 808c950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 808c954:	ea91 0f03 	teqne	r1, r3
 808c958:	bf02      	ittt	eq
 808c95a:	ea90 0f02 	teqeq	r0, r2
 808c95e:	2000      	moveq	r0, #0
 808c960:	4770      	bxeq	lr
 808c962:	f110 0f00 	cmn.w	r0, #0
 808c966:	ea91 0f03 	teq	r1, r3
 808c96a:	bf58      	it	pl
 808c96c:	4299      	cmppl	r1, r3
 808c96e:	bf08      	it	eq
 808c970:	4290      	cmpeq	r0, r2
 808c972:	bf2c      	ite	cs
 808c974:	17d8      	asrcs	r0, r3, #31
 808c976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 808c97a:	f040 0001 	orr.w	r0, r0, #1
 808c97e:	4770      	bx	lr
 808c980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808c984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808c988:	d102      	bne.n	808c990 <__cmpdf2+0x64>
 808c98a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808c98e:	d107      	bne.n	808c9a0 <__cmpdf2+0x74>
 808c990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808c994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808c998:	d1d6      	bne.n	808c948 <__cmpdf2+0x1c>
 808c99a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808c99e:	d0d3      	beq.n	808c948 <__cmpdf2+0x1c>
 808c9a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 808c9a4:	4770      	bx	lr
 808c9a6:	bf00      	nop

0808c9a8 <__aeabi_cdrcmple>:
 808c9a8:	4684      	mov	ip, r0
 808c9aa:	4610      	mov	r0, r2
 808c9ac:	4662      	mov	r2, ip
 808c9ae:	468c      	mov	ip, r1
 808c9b0:	4619      	mov	r1, r3
 808c9b2:	4663      	mov	r3, ip
 808c9b4:	e000      	b.n	808c9b8 <__aeabi_cdcmpeq>
 808c9b6:	bf00      	nop

0808c9b8 <__aeabi_cdcmpeq>:
 808c9b8:	b501      	push	{r0, lr}
 808c9ba:	f7ff ffb7 	bl	808c92c <__cmpdf2>
 808c9be:	2800      	cmp	r0, #0
 808c9c0:	bf48      	it	mi
 808c9c2:	f110 0f00 	cmnmi.w	r0, #0
 808c9c6:	bd01      	pop	{r0, pc}

0808c9c8 <__aeabi_dcmpeq>:
 808c9c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 808c9cc:	f7ff fff4 	bl	808c9b8 <__aeabi_cdcmpeq>
 808c9d0:	bf0c      	ite	eq
 808c9d2:	2001      	moveq	r0, #1
 808c9d4:	2000      	movne	r0, #0
 808c9d6:	f85d fb08 	ldr.w	pc, [sp], #8
 808c9da:	bf00      	nop

0808c9dc <__aeabi_dcmplt>:
 808c9dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 808c9e0:	f7ff ffea 	bl	808c9b8 <__aeabi_cdcmpeq>
 808c9e4:	bf34      	ite	cc
 808c9e6:	2001      	movcc	r0, #1
 808c9e8:	2000      	movcs	r0, #0
 808c9ea:	f85d fb08 	ldr.w	pc, [sp], #8
 808c9ee:	bf00      	nop

0808c9f0 <__aeabi_dcmple>:
 808c9f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 808c9f4:	f7ff ffe0 	bl	808c9b8 <__aeabi_cdcmpeq>
 808c9f8:	bf94      	ite	ls
 808c9fa:	2001      	movls	r0, #1
 808c9fc:	2000      	movhi	r0, #0
 808c9fe:	f85d fb08 	ldr.w	pc, [sp], #8
 808ca02:	bf00      	nop

0808ca04 <__aeabi_dcmpge>:
 808ca04:	f84d ed08 	str.w	lr, [sp, #-8]!
 808ca08:	f7ff ffce 	bl	808c9a8 <__aeabi_cdrcmple>
 808ca0c:	bf94      	ite	ls
 808ca0e:	2001      	movls	r0, #1
 808ca10:	2000      	movhi	r0, #0
 808ca12:	f85d fb08 	ldr.w	pc, [sp], #8
 808ca16:	bf00      	nop

0808ca18 <__aeabi_dcmpgt>:
 808ca18:	f84d ed08 	str.w	lr, [sp, #-8]!
 808ca1c:	f7ff ffc4 	bl	808c9a8 <__aeabi_cdrcmple>
 808ca20:	bf34      	ite	cc
 808ca22:	2001      	movcc	r0, #1
 808ca24:	2000      	movcs	r0, #0
 808ca26:	f85d fb08 	ldr.w	pc, [sp], #8
 808ca2a:	bf00      	nop

0808ca2c <__aeabi_dcmpun>:
 808ca2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808ca30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808ca34:	d102      	bne.n	808ca3c <__aeabi_dcmpun+0x10>
 808ca36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808ca3a:	d10a      	bne.n	808ca52 <__aeabi_dcmpun+0x26>
 808ca3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808ca40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808ca44:	d102      	bne.n	808ca4c <__aeabi_dcmpun+0x20>
 808ca46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808ca4a:	d102      	bne.n	808ca52 <__aeabi_dcmpun+0x26>
 808ca4c:	f04f 0000 	mov.w	r0, #0
 808ca50:	4770      	bx	lr
 808ca52:	f04f 0001 	mov.w	r0, #1
 808ca56:	4770      	bx	lr

0808ca58 <__aeabi_d2iz>:
 808ca58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808ca5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 808ca60:	d215      	bcs.n	808ca8e <__aeabi_d2iz+0x36>
 808ca62:	d511      	bpl.n	808ca88 <__aeabi_d2iz+0x30>
 808ca64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 808ca68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 808ca6c:	d912      	bls.n	808ca94 <__aeabi_d2iz+0x3c>
 808ca6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808ca72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808ca76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808ca7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808ca7e:	fa23 f002 	lsr.w	r0, r3, r2
 808ca82:	bf18      	it	ne
 808ca84:	4240      	negne	r0, r0
 808ca86:	4770      	bx	lr
 808ca88:	f04f 0000 	mov.w	r0, #0
 808ca8c:	4770      	bx	lr
 808ca8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808ca92:	d105      	bne.n	808caa0 <__aeabi_d2iz+0x48>
 808ca94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 808ca98:	bf08      	it	eq
 808ca9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808ca9e:	4770      	bx	lr
 808caa0:	f04f 0000 	mov.w	r0, #0
 808caa4:	4770      	bx	lr
 808caa6:	bf00      	nop

0808caa8 <__aeabi_d2uiz>:
 808caa8:	004a      	lsls	r2, r1, #1
 808caaa:	d211      	bcs.n	808cad0 <__aeabi_d2uiz+0x28>
 808caac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 808cab0:	d211      	bcs.n	808cad6 <__aeabi_d2uiz+0x2e>
 808cab2:	d50d      	bpl.n	808cad0 <__aeabi_d2uiz+0x28>
 808cab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 808cab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 808cabc:	d40e      	bmi.n	808cadc <__aeabi_d2uiz+0x34>
 808cabe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808cac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808cac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808caca:	fa23 f002 	lsr.w	r0, r3, r2
 808cace:	4770      	bx	lr
 808cad0:	f04f 0000 	mov.w	r0, #0
 808cad4:	4770      	bx	lr
 808cad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808cada:	d102      	bne.n	808cae2 <__aeabi_d2uiz+0x3a>
 808cadc:	f04f 30ff 	mov.w	r0, #4294967295
 808cae0:	4770      	bx	lr
 808cae2:	f04f 0000 	mov.w	r0, #0
 808cae6:	4770      	bx	lr

0808cae8 <__aeabi_d2f>:
 808cae8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808caec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 808caf0:	bf24      	itt	cs
 808caf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 808caf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 808cafa:	d90d      	bls.n	808cb18 <__aeabi_d2f+0x30>
 808cafc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808cb00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 808cb04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 808cb08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 808cb0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 808cb10:	bf08      	it	eq
 808cb12:	f020 0001 	biceq.w	r0, r0, #1
 808cb16:	4770      	bx	lr
 808cb18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 808cb1c:	d121      	bne.n	808cb62 <__aeabi_d2f+0x7a>
 808cb1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 808cb22:	bfbc      	itt	lt
 808cb24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 808cb28:	4770      	bxlt	lr
 808cb2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808cb2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 808cb32:	f1c2 0218 	rsb	r2, r2, #24
 808cb36:	f1c2 0c20 	rsb	ip, r2, #32
 808cb3a:	fa10 f30c 	lsls.w	r3, r0, ip
 808cb3e:	fa20 f002 	lsr.w	r0, r0, r2
 808cb42:	bf18      	it	ne
 808cb44:	f040 0001 	orrne.w	r0, r0, #1
 808cb48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808cb4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 808cb50:	fa03 fc0c 	lsl.w	ip, r3, ip
 808cb54:	ea40 000c 	orr.w	r0, r0, ip
 808cb58:	fa23 f302 	lsr.w	r3, r3, r2
 808cb5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 808cb60:	e7cc      	b.n	808cafc <__aeabi_d2f+0x14>
 808cb62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 808cb66:	d107      	bne.n	808cb78 <__aeabi_d2f+0x90>
 808cb68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 808cb6c:	bf1e      	ittt	ne
 808cb6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 808cb72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 808cb76:	4770      	bxne	lr
 808cb78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 808cb7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808cb80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808cb84:	4770      	bx	lr
 808cb86:	bf00      	nop

0808cb88 <__aeabi_frsub>:
 808cb88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 808cb8c:	e002      	b.n	808cb94 <__addsf3>
 808cb8e:	bf00      	nop

0808cb90 <__aeabi_fsub>:
 808cb90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0808cb94 <__addsf3>:
 808cb94:	0042      	lsls	r2, r0, #1
 808cb96:	bf1f      	itttt	ne
 808cb98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 808cb9c:	ea92 0f03 	teqne	r2, r3
 808cba0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 808cba4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808cba8:	d06a      	beq.n	808cc80 <__addsf3+0xec>
 808cbaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 808cbae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 808cbb2:	bfc1      	itttt	gt
 808cbb4:	18d2      	addgt	r2, r2, r3
 808cbb6:	4041      	eorgt	r1, r0
 808cbb8:	4048      	eorgt	r0, r1
 808cbba:	4041      	eorgt	r1, r0
 808cbbc:	bfb8      	it	lt
 808cbbe:	425b      	neglt	r3, r3
 808cbc0:	2b19      	cmp	r3, #25
 808cbc2:	bf88      	it	hi
 808cbc4:	4770      	bxhi	lr
 808cbc6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808cbca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808cbce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 808cbd2:	bf18      	it	ne
 808cbd4:	4240      	negne	r0, r0
 808cbd6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808cbda:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 808cbde:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 808cbe2:	bf18      	it	ne
 808cbe4:	4249      	negne	r1, r1
 808cbe6:	ea92 0f03 	teq	r2, r3
 808cbea:	d03f      	beq.n	808cc6c <__addsf3+0xd8>
 808cbec:	f1a2 0201 	sub.w	r2, r2, #1
 808cbf0:	fa41 fc03 	asr.w	ip, r1, r3
 808cbf4:	eb10 000c 	adds.w	r0, r0, ip
 808cbf8:	f1c3 0320 	rsb	r3, r3, #32
 808cbfc:	fa01 f103 	lsl.w	r1, r1, r3
 808cc00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808cc04:	d502      	bpl.n	808cc0c <__addsf3+0x78>
 808cc06:	4249      	negs	r1, r1
 808cc08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 808cc0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 808cc10:	d313      	bcc.n	808cc3a <__addsf3+0xa6>
 808cc12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 808cc16:	d306      	bcc.n	808cc26 <__addsf3+0x92>
 808cc18:	0840      	lsrs	r0, r0, #1
 808cc1a:	ea4f 0131 	mov.w	r1, r1, rrx
 808cc1e:	f102 0201 	add.w	r2, r2, #1
 808cc22:	2afe      	cmp	r2, #254	; 0xfe
 808cc24:	d251      	bcs.n	808ccca <__addsf3+0x136>
 808cc26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 808cc2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808cc2e:	bf08      	it	eq
 808cc30:	f020 0001 	biceq.w	r0, r0, #1
 808cc34:	ea40 0003 	orr.w	r0, r0, r3
 808cc38:	4770      	bx	lr
 808cc3a:	0049      	lsls	r1, r1, #1
 808cc3c:	eb40 0000 	adc.w	r0, r0, r0
 808cc40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 808cc44:	f1a2 0201 	sub.w	r2, r2, #1
 808cc48:	d1ed      	bne.n	808cc26 <__addsf3+0x92>
 808cc4a:	fab0 fc80 	clz	ip, r0
 808cc4e:	f1ac 0c08 	sub.w	ip, ip, #8
 808cc52:	ebb2 020c 	subs.w	r2, r2, ip
 808cc56:	fa00 f00c 	lsl.w	r0, r0, ip
 808cc5a:	bfaa      	itet	ge
 808cc5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 808cc60:	4252      	neglt	r2, r2
 808cc62:	4318      	orrge	r0, r3
 808cc64:	bfbc      	itt	lt
 808cc66:	40d0      	lsrlt	r0, r2
 808cc68:	4318      	orrlt	r0, r3
 808cc6a:	4770      	bx	lr
 808cc6c:	f092 0f00 	teq	r2, #0
 808cc70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 808cc74:	bf06      	itte	eq
 808cc76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 808cc7a:	3201      	addeq	r2, #1
 808cc7c:	3b01      	subne	r3, #1
 808cc7e:	e7b5      	b.n	808cbec <__addsf3+0x58>
 808cc80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808cc84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808cc88:	bf18      	it	ne
 808cc8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808cc8e:	d021      	beq.n	808ccd4 <__addsf3+0x140>
 808cc90:	ea92 0f03 	teq	r2, r3
 808cc94:	d004      	beq.n	808cca0 <__addsf3+0x10c>
 808cc96:	f092 0f00 	teq	r2, #0
 808cc9a:	bf08      	it	eq
 808cc9c:	4608      	moveq	r0, r1
 808cc9e:	4770      	bx	lr
 808cca0:	ea90 0f01 	teq	r0, r1
 808cca4:	bf1c      	itt	ne
 808cca6:	2000      	movne	r0, #0
 808cca8:	4770      	bxne	lr
 808ccaa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 808ccae:	d104      	bne.n	808ccba <__addsf3+0x126>
 808ccb0:	0040      	lsls	r0, r0, #1
 808ccb2:	bf28      	it	cs
 808ccb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 808ccb8:	4770      	bx	lr
 808ccba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 808ccbe:	bf3c      	itt	cc
 808ccc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 808ccc4:	4770      	bxcc	lr
 808ccc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808ccca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 808ccce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808ccd2:	4770      	bx	lr
 808ccd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 808ccd8:	bf16      	itet	ne
 808ccda:	4608      	movne	r0, r1
 808ccdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 808cce0:	4601      	movne	r1, r0
 808cce2:	0242      	lsls	r2, r0, #9
 808cce4:	bf06      	itte	eq
 808cce6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 808ccea:	ea90 0f01 	teqeq	r0, r1
 808ccee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 808ccf2:	4770      	bx	lr

0808ccf4 <__aeabi_ui2f>:
 808ccf4:	f04f 0300 	mov.w	r3, #0
 808ccf8:	e004      	b.n	808cd04 <__aeabi_i2f+0x8>
 808ccfa:	bf00      	nop

0808ccfc <__aeabi_i2f>:
 808ccfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 808cd00:	bf48      	it	mi
 808cd02:	4240      	negmi	r0, r0
 808cd04:	ea5f 0c00 	movs.w	ip, r0
 808cd08:	bf08      	it	eq
 808cd0a:	4770      	bxeq	lr
 808cd0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 808cd10:	4601      	mov	r1, r0
 808cd12:	f04f 0000 	mov.w	r0, #0
 808cd16:	e01c      	b.n	808cd52 <__aeabi_l2f+0x2a>

0808cd18 <__aeabi_ul2f>:
 808cd18:	ea50 0201 	orrs.w	r2, r0, r1
 808cd1c:	bf08      	it	eq
 808cd1e:	4770      	bxeq	lr
 808cd20:	f04f 0300 	mov.w	r3, #0
 808cd24:	e00a      	b.n	808cd3c <__aeabi_l2f+0x14>
 808cd26:	bf00      	nop

0808cd28 <__aeabi_l2f>:
 808cd28:	ea50 0201 	orrs.w	r2, r0, r1
 808cd2c:	bf08      	it	eq
 808cd2e:	4770      	bxeq	lr
 808cd30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 808cd34:	d502      	bpl.n	808cd3c <__aeabi_l2f+0x14>
 808cd36:	4240      	negs	r0, r0
 808cd38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808cd3c:	ea5f 0c01 	movs.w	ip, r1
 808cd40:	bf02      	ittt	eq
 808cd42:	4684      	moveq	ip, r0
 808cd44:	4601      	moveq	r1, r0
 808cd46:	2000      	moveq	r0, #0
 808cd48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 808cd4c:	bf08      	it	eq
 808cd4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 808cd52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 808cd56:	fabc f28c 	clz	r2, ip
 808cd5a:	3a08      	subs	r2, #8
 808cd5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 808cd60:	db10      	blt.n	808cd84 <__aeabi_l2f+0x5c>
 808cd62:	fa01 fc02 	lsl.w	ip, r1, r2
 808cd66:	4463      	add	r3, ip
 808cd68:	fa00 fc02 	lsl.w	ip, r0, r2
 808cd6c:	f1c2 0220 	rsb	r2, r2, #32
 808cd70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 808cd74:	fa20 f202 	lsr.w	r2, r0, r2
 808cd78:	eb43 0002 	adc.w	r0, r3, r2
 808cd7c:	bf08      	it	eq
 808cd7e:	f020 0001 	biceq.w	r0, r0, #1
 808cd82:	4770      	bx	lr
 808cd84:	f102 0220 	add.w	r2, r2, #32
 808cd88:	fa01 fc02 	lsl.w	ip, r1, r2
 808cd8c:	f1c2 0220 	rsb	r2, r2, #32
 808cd90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 808cd94:	fa21 f202 	lsr.w	r2, r1, r2
 808cd98:	eb43 0002 	adc.w	r0, r3, r2
 808cd9c:	bf08      	it	eq
 808cd9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808cda2:	4770      	bx	lr

0808cda4 <__aeabi_fmul>:
 808cda4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808cda8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808cdac:	bf1e      	ittt	ne
 808cdae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808cdb2:	ea92 0f0c 	teqne	r2, ip
 808cdb6:	ea93 0f0c 	teqne	r3, ip
 808cdba:	d06f      	beq.n	808ce9c <__aeabi_fmul+0xf8>
 808cdbc:	441a      	add	r2, r3
 808cdbe:	ea80 0c01 	eor.w	ip, r0, r1
 808cdc2:	0240      	lsls	r0, r0, #9
 808cdc4:	bf18      	it	ne
 808cdc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 808cdca:	d01e      	beq.n	808ce0a <__aeabi_fmul+0x66>
 808cdcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 808cdd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 808cdd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 808cdd8:	fba0 3101 	umull	r3, r1, r0, r1
 808cddc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808cde0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 808cde4:	bf3e      	ittt	cc
 808cde6:	0049      	lslcc	r1, r1, #1
 808cde8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 808cdec:	005b      	lslcc	r3, r3, #1
 808cdee:	ea40 0001 	orr.w	r0, r0, r1
 808cdf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 808cdf6:	2afd      	cmp	r2, #253	; 0xfd
 808cdf8:	d81d      	bhi.n	808ce36 <__aeabi_fmul+0x92>
 808cdfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 808cdfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808ce02:	bf08      	it	eq
 808ce04:	f020 0001 	biceq.w	r0, r0, #1
 808ce08:	4770      	bx	lr
 808ce0a:	f090 0f00 	teq	r0, #0
 808ce0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808ce12:	bf08      	it	eq
 808ce14:	0249      	lsleq	r1, r1, #9
 808ce16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808ce1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 808ce1e:	3a7f      	subs	r2, #127	; 0x7f
 808ce20:	bfc2      	ittt	gt
 808ce22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808ce26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808ce2a:	4770      	bxgt	lr
 808ce2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808ce30:	f04f 0300 	mov.w	r3, #0
 808ce34:	3a01      	subs	r2, #1
 808ce36:	dc5d      	bgt.n	808cef4 <__aeabi_fmul+0x150>
 808ce38:	f112 0f19 	cmn.w	r2, #25
 808ce3c:	bfdc      	itt	le
 808ce3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 808ce42:	4770      	bxle	lr
 808ce44:	f1c2 0200 	rsb	r2, r2, #0
 808ce48:	0041      	lsls	r1, r0, #1
 808ce4a:	fa21 f102 	lsr.w	r1, r1, r2
 808ce4e:	f1c2 0220 	rsb	r2, r2, #32
 808ce52:	fa00 fc02 	lsl.w	ip, r0, r2
 808ce56:	ea5f 0031 	movs.w	r0, r1, rrx
 808ce5a:	f140 0000 	adc.w	r0, r0, #0
 808ce5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 808ce62:	bf08      	it	eq
 808ce64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808ce68:	4770      	bx	lr
 808ce6a:	f092 0f00 	teq	r2, #0
 808ce6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808ce72:	bf02      	ittt	eq
 808ce74:	0040      	lsleq	r0, r0, #1
 808ce76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808ce7a:	3a01      	subeq	r2, #1
 808ce7c:	d0f9      	beq.n	808ce72 <__aeabi_fmul+0xce>
 808ce7e:	ea40 000c 	orr.w	r0, r0, ip
 808ce82:	f093 0f00 	teq	r3, #0
 808ce86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808ce8a:	bf02      	ittt	eq
 808ce8c:	0049      	lsleq	r1, r1, #1
 808ce8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808ce92:	3b01      	subeq	r3, #1
 808ce94:	d0f9      	beq.n	808ce8a <__aeabi_fmul+0xe6>
 808ce96:	ea41 010c 	orr.w	r1, r1, ip
 808ce9a:	e78f      	b.n	808cdbc <__aeabi_fmul+0x18>
 808ce9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 808cea0:	ea92 0f0c 	teq	r2, ip
 808cea4:	bf18      	it	ne
 808cea6:	ea93 0f0c 	teqne	r3, ip
 808ceaa:	d00a      	beq.n	808cec2 <__aeabi_fmul+0x11e>
 808ceac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808ceb0:	bf18      	it	ne
 808ceb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808ceb6:	d1d8      	bne.n	808ce6a <__aeabi_fmul+0xc6>
 808ceb8:	ea80 0001 	eor.w	r0, r0, r1
 808cebc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808cec0:	4770      	bx	lr
 808cec2:	f090 0f00 	teq	r0, #0
 808cec6:	bf17      	itett	ne
 808cec8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 808cecc:	4608      	moveq	r0, r1
 808cece:	f091 0f00 	teqne	r1, #0
 808ced2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 808ced6:	d014      	beq.n	808cf02 <__aeabi_fmul+0x15e>
 808ced8:	ea92 0f0c 	teq	r2, ip
 808cedc:	d101      	bne.n	808cee2 <__aeabi_fmul+0x13e>
 808cede:	0242      	lsls	r2, r0, #9
 808cee0:	d10f      	bne.n	808cf02 <__aeabi_fmul+0x15e>
 808cee2:	ea93 0f0c 	teq	r3, ip
 808cee6:	d103      	bne.n	808cef0 <__aeabi_fmul+0x14c>
 808cee8:	024b      	lsls	r3, r1, #9
 808ceea:	bf18      	it	ne
 808ceec:	4608      	movne	r0, r1
 808ceee:	d108      	bne.n	808cf02 <__aeabi_fmul+0x15e>
 808cef0:	ea80 0001 	eor.w	r0, r0, r1
 808cef4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808cef8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808cefc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808cf00:	4770      	bx	lr
 808cf02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808cf06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 808cf0a:	4770      	bx	lr

0808cf0c <__aeabi_fdiv>:
 808cf0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808cf10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808cf14:	bf1e      	ittt	ne
 808cf16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808cf1a:	ea92 0f0c 	teqne	r2, ip
 808cf1e:	ea93 0f0c 	teqne	r3, ip
 808cf22:	d069      	beq.n	808cff8 <__aeabi_fdiv+0xec>
 808cf24:	eba2 0203 	sub.w	r2, r2, r3
 808cf28:	ea80 0c01 	eor.w	ip, r0, r1
 808cf2c:	0249      	lsls	r1, r1, #9
 808cf2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 808cf32:	d037      	beq.n	808cfa4 <__aeabi_fdiv+0x98>
 808cf34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 808cf38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 808cf3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 808cf40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808cf44:	428b      	cmp	r3, r1
 808cf46:	bf38      	it	cc
 808cf48:	005b      	lslcc	r3, r3, #1
 808cf4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 808cf4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 808cf52:	428b      	cmp	r3, r1
 808cf54:	bf24      	itt	cs
 808cf56:	1a5b      	subcs	r3, r3, r1
 808cf58:	ea40 000c 	orrcs.w	r0, r0, ip
 808cf5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 808cf60:	bf24      	itt	cs
 808cf62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 808cf66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808cf6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 808cf6e:	bf24      	itt	cs
 808cf70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 808cf74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808cf78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 808cf7c:	bf24      	itt	cs
 808cf7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 808cf82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808cf86:	011b      	lsls	r3, r3, #4
 808cf88:	bf18      	it	ne
 808cf8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 808cf8e:	d1e0      	bne.n	808cf52 <__aeabi_fdiv+0x46>
 808cf90:	2afd      	cmp	r2, #253	; 0xfd
 808cf92:	f63f af50 	bhi.w	808ce36 <__aeabi_fmul+0x92>
 808cf96:	428b      	cmp	r3, r1
 808cf98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808cf9c:	bf08      	it	eq
 808cf9e:	f020 0001 	biceq.w	r0, r0, #1
 808cfa2:	4770      	bx	lr
 808cfa4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808cfa8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808cfac:	327f      	adds	r2, #127	; 0x7f
 808cfae:	bfc2      	ittt	gt
 808cfb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808cfb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808cfb8:	4770      	bxgt	lr
 808cfba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808cfbe:	f04f 0300 	mov.w	r3, #0
 808cfc2:	3a01      	subs	r2, #1
 808cfc4:	e737      	b.n	808ce36 <__aeabi_fmul+0x92>
 808cfc6:	f092 0f00 	teq	r2, #0
 808cfca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808cfce:	bf02      	ittt	eq
 808cfd0:	0040      	lsleq	r0, r0, #1
 808cfd2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808cfd6:	3a01      	subeq	r2, #1
 808cfd8:	d0f9      	beq.n	808cfce <__aeabi_fdiv+0xc2>
 808cfda:	ea40 000c 	orr.w	r0, r0, ip
 808cfde:	f093 0f00 	teq	r3, #0
 808cfe2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808cfe6:	bf02      	ittt	eq
 808cfe8:	0049      	lsleq	r1, r1, #1
 808cfea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808cfee:	3b01      	subeq	r3, #1
 808cff0:	d0f9      	beq.n	808cfe6 <__aeabi_fdiv+0xda>
 808cff2:	ea41 010c 	orr.w	r1, r1, ip
 808cff6:	e795      	b.n	808cf24 <__aeabi_fdiv+0x18>
 808cff8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 808cffc:	ea92 0f0c 	teq	r2, ip
 808d000:	d108      	bne.n	808d014 <__aeabi_fdiv+0x108>
 808d002:	0242      	lsls	r2, r0, #9
 808d004:	f47f af7d 	bne.w	808cf02 <__aeabi_fmul+0x15e>
 808d008:	ea93 0f0c 	teq	r3, ip
 808d00c:	f47f af70 	bne.w	808cef0 <__aeabi_fmul+0x14c>
 808d010:	4608      	mov	r0, r1
 808d012:	e776      	b.n	808cf02 <__aeabi_fmul+0x15e>
 808d014:	ea93 0f0c 	teq	r3, ip
 808d018:	d104      	bne.n	808d024 <__aeabi_fdiv+0x118>
 808d01a:	024b      	lsls	r3, r1, #9
 808d01c:	f43f af4c 	beq.w	808ceb8 <__aeabi_fmul+0x114>
 808d020:	4608      	mov	r0, r1
 808d022:	e76e      	b.n	808cf02 <__aeabi_fmul+0x15e>
 808d024:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808d028:	bf18      	it	ne
 808d02a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808d02e:	d1ca      	bne.n	808cfc6 <__aeabi_fdiv+0xba>
 808d030:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 808d034:	f47f af5c 	bne.w	808cef0 <__aeabi_fmul+0x14c>
 808d038:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 808d03c:	f47f af3c 	bne.w	808ceb8 <__aeabi_fmul+0x114>
 808d040:	e75f      	b.n	808cf02 <__aeabi_fmul+0x15e>
 808d042:	bf00      	nop

0808d044 <__gesf2>:
 808d044:	f04f 3cff 	mov.w	ip, #4294967295
 808d048:	e006      	b.n	808d058 <__cmpsf2+0x4>
 808d04a:	bf00      	nop

0808d04c <__lesf2>:
 808d04c:	f04f 0c01 	mov.w	ip, #1
 808d050:	e002      	b.n	808d058 <__cmpsf2+0x4>
 808d052:	bf00      	nop

0808d054 <__cmpsf2>:
 808d054:	f04f 0c01 	mov.w	ip, #1
 808d058:	f84d cd04 	str.w	ip, [sp, #-4]!
 808d05c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808d060:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808d064:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808d068:	bf18      	it	ne
 808d06a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808d06e:	d011      	beq.n	808d094 <__cmpsf2+0x40>
 808d070:	b001      	add	sp, #4
 808d072:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 808d076:	bf18      	it	ne
 808d078:	ea90 0f01 	teqne	r0, r1
 808d07c:	bf58      	it	pl
 808d07e:	ebb2 0003 	subspl.w	r0, r2, r3
 808d082:	bf88      	it	hi
 808d084:	17c8      	asrhi	r0, r1, #31
 808d086:	bf38      	it	cc
 808d088:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 808d08c:	bf18      	it	ne
 808d08e:	f040 0001 	orrne.w	r0, r0, #1
 808d092:	4770      	bx	lr
 808d094:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808d098:	d102      	bne.n	808d0a0 <__cmpsf2+0x4c>
 808d09a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 808d09e:	d105      	bne.n	808d0ac <__cmpsf2+0x58>
 808d0a0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 808d0a4:	d1e4      	bne.n	808d070 <__cmpsf2+0x1c>
 808d0a6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 808d0aa:	d0e1      	beq.n	808d070 <__cmpsf2+0x1c>
 808d0ac:	f85d 0b04 	ldr.w	r0, [sp], #4
 808d0b0:	4770      	bx	lr
 808d0b2:	bf00      	nop

0808d0b4 <__aeabi_cfrcmple>:
 808d0b4:	4684      	mov	ip, r0
 808d0b6:	4608      	mov	r0, r1
 808d0b8:	4661      	mov	r1, ip
 808d0ba:	e7ff      	b.n	808d0bc <__aeabi_cfcmpeq>

0808d0bc <__aeabi_cfcmpeq>:
 808d0bc:	b50f      	push	{r0, r1, r2, r3, lr}
 808d0be:	f7ff ffc9 	bl	808d054 <__cmpsf2>
 808d0c2:	2800      	cmp	r0, #0
 808d0c4:	bf48      	it	mi
 808d0c6:	f110 0f00 	cmnmi.w	r0, #0
 808d0ca:	bd0f      	pop	{r0, r1, r2, r3, pc}

0808d0cc <__aeabi_fcmpeq>:
 808d0cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 808d0d0:	f7ff fff4 	bl	808d0bc <__aeabi_cfcmpeq>
 808d0d4:	bf0c      	ite	eq
 808d0d6:	2001      	moveq	r0, #1
 808d0d8:	2000      	movne	r0, #0
 808d0da:	f85d fb08 	ldr.w	pc, [sp], #8
 808d0de:	bf00      	nop

0808d0e0 <__aeabi_fcmplt>:
 808d0e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 808d0e4:	f7ff ffea 	bl	808d0bc <__aeabi_cfcmpeq>
 808d0e8:	bf34      	ite	cc
 808d0ea:	2001      	movcc	r0, #1
 808d0ec:	2000      	movcs	r0, #0
 808d0ee:	f85d fb08 	ldr.w	pc, [sp], #8
 808d0f2:	bf00      	nop

0808d0f4 <__aeabi_fcmple>:
 808d0f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 808d0f8:	f7ff ffe0 	bl	808d0bc <__aeabi_cfcmpeq>
 808d0fc:	bf94      	ite	ls
 808d0fe:	2001      	movls	r0, #1
 808d100:	2000      	movhi	r0, #0
 808d102:	f85d fb08 	ldr.w	pc, [sp], #8
 808d106:	bf00      	nop

0808d108 <__aeabi_fcmpge>:
 808d108:	f84d ed08 	str.w	lr, [sp, #-8]!
 808d10c:	f7ff ffd2 	bl	808d0b4 <__aeabi_cfrcmple>
 808d110:	bf94      	ite	ls
 808d112:	2001      	movls	r0, #1
 808d114:	2000      	movhi	r0, #0
 808d116:	f85d fb08 	ldr.w	pc, [sp], #8
 808d11a:	bf00      	nop

0808d11c <__aeabi_fcmpgt>:
 808d11c:	f84d ed08 	str.w	lr, [sp, #-8]!
 808d120:	f7ff ffc8 	bl	808d0b4 <__aeabi_cfrcmple>
 808d124:	bf34      	ite	cc
 808d126:	2001      	movcc	r0, #1
 808d128:	2000      	movcs	r0, #0
 808d12a:	f85d fb08 	ldr.w	pc, [sp], #8
 808d12e:	bf00      	nop

0808d130 <__aeabi_f2iz>:
 808d130:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808d134:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 808d138:	d30f      	bcc.n	808d15a <__aeabi_f2iz+0x2a>
 808d13a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 808d13e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 808d142:	d90d      	bls.n	808d160 <__aeabi_f2iz+0x30>
 808d144:	ea4f 2300 	mov.w	r3, r0, lsl #8
 808d148:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808d14c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808d150:	fa23 f002 	lsr.w	r0, r3, r2
 808d154:	bf18      	it	ne
 808d156:	4240      	negne	r0, r0
 808d158:	4770      	bx	lr
 808d15a:	f04f 0000 	mov.w	r0, #0
 808d15e:	4770      	bx	lr
 808d160:	f112 0f61 	cmn.w	r2, #97	; 0x61
 808d164:	d101      	bne.n	808d16a <__aeabi_f2iz+0x3a>
 808d166:	0242      	lsls	r2, r0, #9
 808d168:	d105      	bne.n	808d176 <__aeabi_f2iz+0x46>
 808d16a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 808d16e:	bf08      	it	eq
 808d170:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808d174:	4770      	bx	lr
 808d176:	f04f 0000 	mov.w	r0, #0
 808d17a:	4770      	bx	lr

0808d17c <__aeabi_ldivmod>:
 808d17c:	b97b      	cbnz	r3, 808d19e <__aeabi_ldivmod+0x22>
 808d17e:	b972      	cbnz	r2, 808d19e <__aeabi_ldivmod+0x22>
 808d180:	2900      	cmp	r1, #0
 808d182:	bfbe      	ittt	lt
 808d184:	2000      	movlt	r0, #0
 808d186:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 808d18a:	e006      	blt.n	808d19a <__aeabi_ldivmod+0x1e>
 808d18c:	bf08      	it	eq
 808d18e:	2800      	cmpeq	r0, #0
 808d190:	bf1c      	itt	ne
 808d192:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 808d196:	f04f 30ff 	movne.w	r0, #4294967295
 808d19a:	f000 b9f1 	b.w	808d580 <__aeabi_idiv0>
 808d19e:	f1ad 0c08 	sub.w	ip, sp, #8
 808d1a2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 808d1a6:	2900      	cmp	r1, #0
 808d1a8:	db09      	blt.n	808d1be <__aeabi_ldivmod+0x42>
 808d1aa:	2b00      	cmp	r3, #0
 808d1ac:	db1a      	blt.n	808d1e4 <__aeabi_ldivmod+0x68>
 808d1ae:	f000 f871 	bl	808d294 <__udivmoddi4>
 808d1b2:	f8dd e004 	ldr.w	lr, [sp, #4]
 808d1b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808d1ba:	b004      	add	sp, #16
 808d1bc:	4770      	bx	lr
 808d1be:	4240      	negs	r0, r0
 808d1c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808d1c4:	2b00      	cmp	r3, #0
 808d1c6:	db1b      	blt.n	808d200 <__aeabi_ldivmod+0x84>
 808d1c8:	f000 f864 	bl	808d294 <__udivmoddi4>
 808d1cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 808d1d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808d1d4:	b004      	add	sp, #16
 808d1d6:	4240      	negs	r0, r0
 808d1d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808d1dc:	4252      	negs	r2, r2
 808d1de:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808d1e2:	4770      	bx	lr
 808d1e4:	4252      	negs	r2, r2
 808d1e6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808d1ea:	f000 f853 	bl	808d294 <__udivmoddi4>
 808d1ee:	f8dd e004 	ldr.w	lr, [sp, #4]
 808d1f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808d1f6:	b004      	add	sp, #16
 808d1f8:	4240      	negs	r0, r0
 808d1fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808d1fe:	4770      	bx	lr
 808d200:	4252      	negs	r2, r2
 808d202:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808d206:	f000 f845 	bl	808d294 <__udivmoddi4>
 808d20a:	f8dd e004 	ldr.w	lr, [sp, #4]
 808d20e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808d212:	b004      	add	sp, #16
 808d214:	4252      	negs	r2, r2
 808d216:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808d21a:	4770      	bx	lr

0808d21c <__aeabi_uldivmod>:
 808d21c:	b953      	cbnz	r3, 808d234 <__aeabi_uldivmod+0x18>
 808d21e:	b94a      	cbnz	r2, 808d234 <__aeabi_uldivmod+0x18>
 808d220:	2900      	cmp	r1, #0
 808d222:	bf08      	it	eq
 808d224:	2800      	cmpeq	r0, #0
 808d226:	bf1c      	itt	ne
 808d228:	f04f 31ff 	movne.w	r1, #4294967295
 808d22c:	f04f 30ff 	movne.w	r0, #4294967295
 808d230:	f000 b9a6 	b.w	808d580 <__aeabi_idiv0>
 808d234:	f1ad 0c08 	sub.w	ip, sp, #8
 808d238:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 808d23c:	f000 f82a 	bl	808d294 <__udivmoddi4>
 808d240:	f8dd e004 	ldr.w	lr, [sp, #4]
 808d244:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808d248:	b004      	add	sp, #16
 808d24a:	4770      	bx	lr

0808d24c <__aeabi_d2ulz>:
 808d24c:	b5d0      	push	{r4, r6, r7, lr}
 808d24e:	2200      	movs	r2, #0
 808d250:	4b0e      	ldr	r3, [pc, #56]	; (808d28c <__aeabi_d2ulz+0x40>)
 808d252:	4606      	mov	r6, r0
 808d254:	460f      	mov	r7, r1
 808d256:	f7ff f94f 	bl	808c4f8 <__aeabi_dmul>
 808d25a:	f7ff fc25 	bl	808caa8 <__aeabi_d2uiz>
 808d25e:	4604      	mov	r4, r0
 808d260:	f7ff f8d4 	bl	808c40c <__aeabi_ui2d>
 808d264:	2200      	movs	r2, #0
 808d266:	4b0a      	ldr	r3, [pc, #40]	; (808d290 <__aeabi_d2ulz+0x44>)
 808d268:	f7ff f946 	bl	808c4f8 <__aeabi_dmul>
 808d26c:	4602      	mov	r2, r0
 808d26e:	460b      	mov	r3, r1
 808d270:	4630      	mov	r0, r6
 808d272:	4639      	mov	r1, r7
 808d274:	f7fe ff8c 	bl	808c190 <__aeabi_dsub>
 808d278:	f7ff fc16 	bl	808caa8 <__aeabi_d2uiz>
 808d27c:	4623      	mov	r3, r4
 808d27e:	2200      	movs	r2, #0
 808d280:	ea42 0200 	orr.w	r2, r2, r0
 808d284:	4610      	mov	r0, r2
 808d286:	4619      	mov	r1, r3
 808d288:	bdd0      	pop	{r4, r6, r7, pc}
 808d28a:	bf00      	nop
 808d28c:	3df00000 	.word	0x3df00000
 808d290:	41f00000 	.word	0x41f00000

0808d294 <__udivmoddi4>:
 808d294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808d298:	468c      	mov	ip, r1
 808d29a:	460c      	mov	r4, r1
 808d29c:	4605      	mov	r5, r0
 808d29e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 808d2a0:	2b00      	cmp	r3, #0
 808d2a2:	d14f      	bne.n	808d344 <__udivmoddi4+0xb0>
 808d2a4:	428a      	cmp	r2, r1
 808d2a6:	4617      	mov	r7, r2
 808d2a8:	d96b      	bls.n	808d382 <__udivmoddi4+0xee>
 808d2aa:	fab2 fe82 	clz	lr, r2
 808d2ae:	f1be 0f00 	cmp.w	lr, #0
 808d2b2:	d00b      	beq.n	808d2cc <__udivmoddi4+0x38>
 808d2b4:	f1ce 0520 	rsb	r5, lr, #32
 808d2b8:	fa20 f505 	lsr.w	r5, r0, r5
 808d2bc:	fa01 f30e 	lsl.w	r3, r1, lr
 808d2c0:	ea45 0c03 	orr.w	ip, r5, r3
 808d2c4:	fa02 f70e 	lsl.w	r7, r2, lr
 808d2c8:	fa00 f50e 	lsl.w	r5, r0, lr
 808d2cc:	0c39      	lsrs	r1, r7, #16
 808d2ce:	fbbc f0f1 	udiv	r0, ip, r1
 808d2d2:	b2ba      	uxth	r2, r7
 808d2d4:	fb01 c310 	mls	r3, r1, r0, ip
 808d2d8:	fb00 f802 	mul.w	r8, r0, r2
 808d2dc:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 808d2e0:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 808d2e4:	45a0      	cmp	r8, r4
 808d2e6:	d909      	bls.n	808d2fc <__udivmoddi4+0x68>
 808d2e8:	19e4      	adds	r4, r4, r7
 808d2ea:	f100 33ff 	add.w	r3, r0, #4294967295
 808d2ee:	f080 8128 	bcs.w	808d542 <__udivmoddi4+0x2ae>
 808d2f2:	45a0      	cmp	r8, r4
 808d2f4:	f240 8125 	bls.w	808d542 <__udivmoddi4+0x2ae>
 808d2f8:	3802      	subs	r0, #2
 808d2fa:	443c      	add	r4, r7
 808d2fc:	ebc8 0404 	rsb	r4, r8, r4
 808d300:	fbb4 f3f1 	udiv	r3, r4, r1
 808d304:	fb01 4c13 	mls	ip, r1, r3, r4
 808d308:	fb03 f202 	mul.w	r2, r3, r2
 808d30c:	b2ac      	uxth	r4, r5
 808d30e:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 808d312:	428a      	cmp	r2, r1
 808d314:	d909      	bls.n	808d32a <__udivmoddi4+0x96>
 808d316:	19c9      	adds	r1, r1, r7
 808d318:	f103 34ff 	add.w	r4, r3, #4294967295
 808d31c:	f080 810f 	bcs.w	808d53e <__udivmoddi4+0x2aa>
 808d320:	428a      	cmp	r2, r1
 808d322:	f240 810c 	bls.w	808d53e <__udivmoddi4+0x2aa>
 808d326:	3b02      	subs	r3, #2
 808d328:	4439      	add	r1, r7
 808d32a:	1a8a      	subs	r2, r1, r2
 808d32c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 808d330:	2100      	movs	r1, #0
 808d332:	2e00      	cmp	r6, #0
 808d334:	d063      	beq.n	808d3fe <__udivmoddi4+0x16a>
 808d336:	fa22 f20e 	lsr.w	r2, r2, lr
 808d33a:	2300      	movs	r3, #0
 808d33c:	e886 000c 	stmia.w	r6, {r2, r3}
 808d340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808d344:	428b      	cmp	r3, r1
 808d346:	d907      	bls.n	808d358 <__udivmoddi4+0xc4>
 808d348:	2e00      	cmp	r6, #0
 808d34a:	d056      	beq.n	808d3fa <__udivmoddi4+0x166>
 808d34c:	2100      	movs	r1, #0
 808d34e:	e886 0011 	stmia.w	r6, {r0, r4}
 808d352:	4608      	mov	r0, r1
 808d354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808d358:	fab3 f183 	clz	r1, r3
 808d35c:	2900      	cmp	r1, #0
 808d35e:	f040 8093 	bne.w	808d488 <__udivmoddi4+0x1f4>
 808d362:	42a3      	cmp	r3, r4
 808d364:	d302      	bcc.n	808d36c <__udivmoddi4+0xd8>
 808d366:	4282      	cmp	r2, r0
 808d368:	f200 80fe 	bhi.w	808d568 <__udivmoddi4+0x2d4>
 808d36c:	1a85      	subs	r5, r0, r2
 808d36e:	eb64 0303 	sbc.w	r3, r4, r3
 808d372:	469c      	mov	ip, r3
 808d374:	2001      	movs	r0, #1
 808d376:	2e00      	cmp	r6, #0
 808d378:	d041      	beq.n	808d3fe <__udivmoddi4+0x16a>
 808d37a:	e886 1020 	stmia.w	r6, {r5, ip}
 808d37e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808d382:	b912      	cbnz	r2, 808d38a <__udivmoddi4+0xf6>
 808d384:	2701      	movs	r7, #1
 808d386:	fbb7 f7f2 	udiv	r7, r7, r2
 808d38a:	fab7 fe87 	clz	lr, r7
 808d38e:	f1be 0f00 	cmp.w	lr, #0
 808d392:	d136      	bne.n	808d402 <__udivmoddi4+0x16e>
 808d394:	1be4      	subs	r4, r4, r7
 808d396:	ea4f 4817 	mov.w	r8, r7, lsr #16
 808d39a:	fa1f f987 	uxth.w	r9, r7
 808d39e:	2101      	movs	r1, #1
 808d3a0:	fbb4 f3f8 	udiv	r3, r4, r8
 808d3a4:	fb08 4413 	mls	r4, r8, r3, r4
 808d3a8:	fb09 f203 	mul.w	r2, r9, r3
 808d3ac:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 808d3b0:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 808d3b4:	42a2      	cmp	r2, r4
 808d3b6:	d907      	bls.n	808d3c8 <__udivmoddi4+0x134>
 808d3b8:	19e4      	adds	r4, r4, r7
 808d3ba:	f103 30ff 	add.w	r0, r3, #4294967295
 808d3be:	d202      	bcs.n	808d3c6 <__udivmoddi4+0x132>
 808d3c0:	42a2      	cmp	r2, r4
 808d3c2:	f200 80d3 	bhi.w	808d56c <__udivmoddi4+0x2d8>
 808d3c6:	4603      	mov	r3, r0
 808d3c8:	1aa4      	subs	r4, r4, r2
 808d3ca:	fbb4 f0f8 	udiv	r0, r4, r8
 808d3ce:	fb08 4810 	mls	r8, r8, r0, r4
 808d3d2:	fb09 f900 	mul.w	r9, r9, r0
 808d3d6:	b2ac      	uxth	r4, r5
 808d3d8:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 808d3dc:	4591      	cmp	r9, r2
 808d3de:	d907      	bls.n	808d3f0 <__udivmoddi4+0x15c>
 808d3e0:	19d2      	adds	r2, r2, r7
 808d3e2:	f100 34ff 	add.w	r4, r0, #4294967295
 808d3e6:	d202      	bcs.n	808d3ee <__udivmoddi4+0x15a>
 808d3e8:	4591      	cmp	r9, r2
 808d3ea:	f200 80ba 	bhi.w	808d562 <__udivmoddi4+0x2ce>
 808d3ee:	4620      	mov	r0, r4
 808d3f0:	ebc9 0202 	rsb	r2, r9, r2
 808d3f4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 808d3f8:	e79b      	b.n	808d332 <__udivmoddi4+0x9e>
 808d3fa:	4631      	mov	r1, r6
 808d3fc:	4630      	mov	r0, r6
 808d3fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808d402:	fa07 f70e 	lsl.w	r7, r7, lr
 808d406:	f1ce 0c20 	rsb	ip, lr, #32
 808d40a:	fa24 f30c 	lsr.w	r3, r4, ip
 808d40e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 808d412:	fbb3 faf8 	udiv	sl, r3, r8
 808d416:	fa1f f987 	uxth.w	r9, r7
 808d41a:	fb08 351a 	mls	r5, r8, sl, r3
 808d41e:	fa20 fc0c 	lsr.w	ip, r0, ip
 808d422:	fa04 f40e 	lsl.w	r4, r4, lr
 808d426:	fb0a fb09 	mul.w	fp, sl, r9
 808d42a:	ea4c 0c04 	orr.w	ip, ip, r4
 808d42e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 808d432:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 808d436:	459b      	cmp	fp, r3
 808d438:	fa00 f50e 	lsl.w	r5, r0, lr
 808d43c:	d90a      	bls.n	808d454 <__udivmoddi4+0x1c0>
 808d43e:	19db      	adds	r3, r3, r7
 808d440:	f10a 32ff 	add.w	r2, sl, #4294967295
 808d444:	f080 808b 	bcs.w	808d55e <__udivmoddi4+0x2ca>
 808d448:	459b      	cmp	fp, r3
 808d44a:	f240 8088 	bls.w	808d55e <__udivmoddi4+0x2ca>
 808d44e:	f1aa 0a02 	sub.w	sl, sl, #2
 808d452:	443b      	add	r3, r7
 808d454:	ebcb 0303 	rsb	r3, fp, r3
 808d458:	fbb3 f0f8 	udiv	r0, r3, r8
 808d45c:	fb08 3310 	mls	r3, r8, r0, r3
 808d460:	fb00 f409 	mul.w	r4, r0, r9
 808d464:	fa1f fc8c 	uxth.w	ip, ip
 808d468:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 808d46c:	429c      	cmp	r4, r3
 808d46e:	d907      	bls.n	808d480 <__udivmoddi4+0x1ec>
 808d470:	19db      	adds	r3, r3, r7
 808d472:	f100 32ff 	add.w	r2, r0, #4294967295
 808d476:	d26e      	bcs.n	808d556 <__udivmoddi4+0x2c2>
 808d478:	429c      	cmp	r4, r3
 808d47a:	d96c      	bls.n	808d556 <__udivmoddi4+0x2c2>
 808d47c:	3802      	subs	r0, #2
 808d47e:	443b      	add	r3, r7
 808d480:	1b1c      	subs	r4, r3, r4
 808d482:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 808d486:	e78b      	b.n	808d3a0 <__udivmoddi4+0x10c>
 808d488:	f1c1 0e20 	rsb	lr, r1, #32
 808d48c:	408b      	lsls	r3, r1
 808d48e:	fa22 fc0e 	lsr.w	ip, r2, lr
 808d492:	ea4c 0c03 	orr.w	ip, ip, r3
 808d496:	fa24 f70e 	lsr.w	r7, r4, lr
 808d49a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 808d49e:	fbb7 faf9 	udiv	sl, r7, r9
 808d4a2:	fa1f f38c 	uxth.w	r3, ip
 808d4a6:	fb09 771a 	mls	r7, r9, sl, r7
 808d4aa:	fa20 f80e 	lsr.w	r8, r0, lr
 808d4ae:	408c      	lsls	r4, r1
 808d4b0:	fb0a f503 	mul.w	r5, sl, r3
 808d4b4:	ea48 0404 	orr.w	r4, r8, r4
 808d4b8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 808d4bc:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 808d4c0:	42bd      	cmp	r5, r7
 808d4c2:	fa02 f201 	lsl.w	r2, r2, r1
 808d4c6:	fa00 fb01 	lsl.w	fp, r0, r1
 808d4ca:	d909      	bls.n	808d4e0 <__udivmoddi4+0x24c>
 808d4cc:	eb17 070c 	adds.w	r7, r7, ip
 808d4d0:	f10a 30ff 	add.w	r0, sl, #4294967295
 808d4d4:	d241      	bcs.n	808d55a <__udivmoddi4+0x2c6>
 808d4d6:	42bd      	cmp	r5, r7
 808d4d8:	d93f      	bls.n	808d55a <__udivmoddi4+0x2c6>
 808d4da:	f1aa 0a02 	sub.w	sl, sl, #2
 808d4de:	4467      	add	r7, ip
 808d4e0:	1b7f      	subs	r7, r7, r5
 808d4e2:	fbb7 f5f9 	udiv	r5, r7, r9
 808d4e6:	fb09 7715 	mls	r7, r9, r5, r7
 808d4ea:	fb05 f303 	mul.w	r3, r5, r3
 808d4ee:	b2a4      	uxth	r4, r4
 808d4f0:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 808d4f4:	42bb      	cmp	r3, r7
 808d4f6:	d908      	bls.n	808d50a <__udivmoddi4+0x276>
 808d4f8:	eb17 070c 	adds.w	r7, r7, ip
 808d4fc:	f105 30ff 	add.w	r0, r5, #4294967295
 808d500:	d227      	bcs.n	808d552 <__udivmoddi4+0x2be>
 808d502:	42bb      	cmp	r3, r7
 808d504:	d925      	bls.n	808d552 <__udivmoddi4+0x2be>
 808d506:	3d02      	subs	r5, #2
 808d508:	4467      	add	r7, ip
 808d50a:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 808d50e:	fba0 8902 	umull	r8, r9, r0, r2
 808d512:	1aff      	subs	r7, r7, r3
 808d514:	454f      	cmp	r7, r9
 808d516:	4645      	mov	r5, r8
 808d518:	464c      	mov	r4, r9
 808d51a:	d314      	bcc.n	808d546 <__udivmoddi4+0x2b2>
 808d51c:	d029      	beq.n	808d572 <__udivmoddi4+0x2de>
 808d51e:	b366      	cbz	r6, 808d57a <__udivmoddi4+0x2e6>
 808d520:	ebbb 0305 	subs.w	r3, fp, r5
 808d524:	eb67 0704 	sbc.w	r7, r7, r4
 808d528:	fa07 fe0e 	lsl.w	lr, r7, lr
 808d52c:	40cb      	lsrs	r3, r1
 808d52e:	40cf      	lsrs	r7, r1
 808d530:	ea4e 0303 	orr.w	r3, lr, r3
 808d534:	e886 0088 	stmia.w	r6, {r3, r7}
 808d538:	2100      	movs	r1, #0
 808d53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808d53e:	4623      	mov	r3, r4
 808d540:	e6f3      	b.n	808d32a <__udivmoddi4+0x96>
 808d542:	4618      	mov	r0, r3
 808d544:	e6da      	b.n	808d2fc <__udivmoddi4+0x68>
 808d546:	ebb8 0502 	subs.w	r5, r8, r2
 808d54a:	eb69 040c 	sbc.w	r4, r9, ip
 808d54e:	3801      	subs	r0, #1
 808d550:	e7e5      	b.n	808d51e <__udivmoddi4+0x28a>
 808d552:	4605      	mov	r5, r0
 808d554:	e7d9      	b.n	808d50a <__udivmoddi4+0x276>
 808d556:	4610      	mov	r0, r2
 808d558:	e792      	b.n	808d480 <__udivmoddi4+0x1ec>
 808d55a:	4682      	mov	sl, r0
 808d55c:	e7c0      	b.n	808d4e0 <__udivmoddi4+0x24c>
 808d55e:	4692      	mov	sl, r2
 808d560:	e778      	b.n	808d454 <__udivmoddi4+0x1c0>
 808d562:	3802      	subs	r0, #2
 808d564:	443a      	add	r2, r7
 808d566:	e743      	b.n	808d3f0 <__udivmoddi4+0x15c>
 808d568:	4608      	mov	r0, r1
 808d56a:	e704      	b.n	808d376 <__udivmoddi4+0xe2>
 808d56c:	3b02      	subs	r3, #2
 808d56e:	443c      	add	r4, r7
 808d570:	e72a      	b.n	808d3c8 <__udivmoddi4+0x134>
 808d572:	45c3      	cmp	fp, r8
 808d574:	d3e7      	bcc.n	808d546 <__udivmoddi4+0x2b2>
 808d576:	463c      	mov	r4, r7
 808d578:	e7d1      	b.n	808d51e <__udivmoddi4+0x28a>
 808d57a:	4631      	mov	r1, r6
 808d57c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808d580 <__aeabi_idiv0>:
 808d580:	4770      	bx	lr
 808d582:	bf00      	nop

0808d584 <asctime>:
 808d584:	4b09      	ldr	r3, [pc, #36]	; (808d5ac <asctime+0x28>)
 808d586:	b570      	push	{r4, r5, r6, lr}
 808d588:	681c      	ldr	r4, [r3, #0]
 808d58a:	4606      	mov	r6, r0
 808d58c:	6c25      	ldr	r5, [r4, #64]	; 0x40
 808d58e:	b93d      	cbnz	r5, 808d5a0 <asctime+0x1c>
 808d590:	201a      	movs	r0, #26
 808d592:	f7fc f9d9 	bl	8089948 <malloc>
 808d596:	221a      	movs	r2, #26
 808d598:	6420      	str	r0, [r4, #64]	; 0x40
 808d59a:	4629      	mov	r1, r5
 808d59c:	f000 f96e 	bl	808d87c <memset>
 808d5a0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 808d5a2:	4630      	mov	r0, r6
 808d5a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 808d5a8:	f000 b802 	b.w	808d5b0 <asctime_r>
 808d5ac:	20000144 	.word	0x20000144

0808d5b0 <asctime_r>:
 808d5b0:	b510      	push	{r4, lr}
 808d5b2:	460c      	mov	r4, r1
 808d5b4:	6941      	ldr	r1, [r0, #20]
 808d5b6:	b086      	sub	sp, #24
 808d5b8:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 808d5bc:	6903      	ldr	r3, [r0, #16]
 808d5be:	6982      	ldr	r2, [r0, #24]
 808d5c0:	9104      	str	r1, [sp, #16]
 808d5c2:	6801      	ldr	r1, [r0, #0]
 808d5c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 808d5c8:	9103      	str	r1, [sp, #12]
 808d5ca:	6841      	ldr	r1, [r0, #4]
 808d5cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 808d5d0:	9102      	str	r1, [sp, #8]
 808d5d2:	6881      	ldr	r1, [r0, #8]
 808d5d4:	9101      	str	r1, [sp, #4]
 808d5d6:	68c1      	ldr	r1, [r0, #12]
 808d5d8:	4620      	mov	r0, r4
 808d5da:	9100      	str	r1, [sp, #0]
 808d5dc:	4904      	ldr	r1, [pc, #16]	; (808d5f0 <asctime_r+0x40>)
 808d5de:	440b      	add	r3, r1
 808d5e0:	4904      	ldr	r1, [pc, #16]	; (808d5f4 <asctime_r+0x44>)
 808d5e2:	440a      	add	r2, r1
 808d5e4:	4904      	ldr	r1, [pc, #16]	; (808d5f8 <asctime_r+0x48>)
 808d5e6:	f7fc f9cf 	bl	8089988 <siprintf>
 808d5ea:	4620      	mov	r0, r4
 808d5ec:	b006      	add	sp, #24
 808d5ee:	bd10      	pop	{r4, pc}
 808d5f0:	08093294 	.word	0x08093294
 808d5f4:	0809327f 	.word	0x0809327f
 808d5f8:	080932b8 	.word	0x080932b8

0808d5fc <atof>:
 808d5fc:	2100      	movs	r1, #0
 808d5fe:	f001 bd2b 	b.w	808f058 <strtod>

0808d602 <atol>:
 808d602:	220a      	movs	r2, #10
 808d604:	2100      	movs	r1, #0
 808d606:	f001 bdb5 	b.w	808f174 <strtol>
	...

0808d60c <__cxa_atexit>:
 808d60c:	b510      	push	{r4, lr}
 808d60e:	4c05      	ldr	r4, [pc, #20]	; (808d624 <__cxa_atexit+0x18>)
 808d610:	4613      	mov	r3, r2
 808d612:	b12c      	cbz	r4, 808d620 <__cxa_atexit+0x14>
 808d614:	460a      	mov	r2, r1
 808d616:	4601      	mov	r1, r0
 808d618:	2002      	movs	r0, #2
 808d61a:	f3af 8000 	nop.w
 808d61e:	bd10      	pop	{r4, pc}
 808d620:	4620      	mov	r0, r4
 808d622:	bd10      	pop	{r4, pc}
 808d624:	00000000 	.word	0x00000000

0808d628 <localtime>:
 808d628:	b538      	push	{r3, r4, r5, lr}
 808d62a:	4b07      	ldr	r3, [pc, #28]	; (808d648 <localtime+0x20>)
 808d62c:	4605      	mov	r5, r0
 808d62e:	681c      	ldr	r4, [r3, #0]
 808d630:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 808d632:	b91b      	cbnz	r3, 808d63c <localtime+0x14>
 808d634:	2024      	movs	r0, #36	; 0x24
 808d636:	f7fc f987 	bl	8089948 <malloc>
 808d63a:	63e0      	str	r0, [r4, #60]	; 0x3c
 808d63c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 808d63e:	4628      	mov	r0, r5
 808d640:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808d644:	f000 b802 	b.w	808d64c <localtime_r>
 808d648:	20000144 	.word	0x20000144

0808d64c <localtime_r>:
 808d64c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808d650:	460c      	mov	r4, r1
 808d652:	4680      	mov	r8, r0
 808d654:	f002 fbc6 	bl	808fde4 <__gettzinfo>
 808d658:	4621      	mov	r1, r4
 808d65a:	4607      	mov	r7, r0
 808d65c:	4640      	mov	r0, r8
 808d65e:	f002 fbc5 	bl	808fdec <gmtime_r>
 808d662:	6946      	ldr	r6, [r0, #20]
 808d664:	4604      	mov	r4, r0
 808d666:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 808d66a:	07b3      	lsls	r3, r6, #30
 808d66c:	d105      	bne.n	808d67a <localtime_r+0x2e>
 808d66e:	2264      	movs	r2, #100	; 0x64
 808d670:	fb96 f3f2 	sdiv	r3, r6, r2
 808d674:	fb02 6313 	mls	r3, r2, r3, r6
 808d678:	b94b      	cbnz	r3, 808d68e <localtime_r+0x42>
 808d67a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 808d67e:	fb96 f3f5 	sdiv	r3, r6, r5
 808d682:	fb05 6513 	mls	r5, r5, r3, r6
 808d686:	fab5 f385 	clz	r3, r5
 808d68a:	095b      	lsrs	r3, r3, #5
 808d68c:	e000      	b.n	808d690 <localtime_r+0x44>
 808d68e:	2301      	movs	r3, #1
 808d690:	4a5f      	ldr	r2, [pc, #380]	; (808d810 <localtime_r+0x1c4>)
 808d692:	2530      	movs	r5, #48	; 0x30
 808d694:	fb05 2503 	mla	r5, r5, r3, r2
 808d698:	f001 feb6 	bl	808f408 <__tz_lock>
 808d69c:	f001 feb6 	bl	808f40c <_tzset_unlocked>
 808d6a0:	4b5c      	ldr	r3, [pc, #368]	; (808d814 <localtime_r+0x1c8>)
 808d6a2:	681b      	ldr	r3, [r3, #0]
 808d6a4:	b1f3      	cbz	r3, 808d6e4 <localtime_r+0x98>
 808d6a6:	687b      	ldr	r3, [r7, #4]
 808d6a8:	429e      	cmp	r6, r3
 808d6aa:	d105      	bne.n	808d6b8 <localtime_r+0x6c>
 808d6ac:	6839      	ldr	r1, [r7, #0]
 808d6ae:	f8d8 3000 	ldr.w	r3, [r8]
 808d6b2:	69fa      	ldr	r2, [r7, #28]
 808d6b4:	b941      	cbnz	r1, 808d6c8 <localtime_r+0x7c>
 808d6b6:	e00a      	b.n	808d6ce <localtime_r+0x82>
 808d6b8:	4630      	mov	r0, r6
 808d6ba:	f001 fdfd 	bl	808f2b8 <__tzcalc_limits>
 808d6be:	2800      	cmp	r0, #0
 808d6c0:	d1f4      	bne.n	808d6ac <localtime_r+0x60>
 808d6c2:	f04f 33ff 	mov.w	r3, #4294967295
 808d6c6:	e00d      	b.n	808d6e4 <localtime_r+0x98>
 808d6c8:	4293      	cmp	r3, r2
 808d6ca:	db08      	blt.n	808d6de <localtime_r+0x92>
 808d6cc:	e001      	b.n	808d6d2 <localtime_r+0x86>
 808d6ce:	4293      	cmp	r3, r2
 808d6d0:	da07      	bge.n	808d6e2 <localtime_r+0x96>
 808d6d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 808d6d4:	4293      	cmp	r3, r2
 808d6d6:	bfac      	ite	ge
 808d6d8:	2300      	movge	r3, #0
 808d6da:	2301      	movlt	r3, #1
 808d6dc:	e002      	b.n	808d6e4 <localtime_r+0x98>
 808d6de:	2300      	movs	r3, #0
 808d6e0:	e000      	b.n	808d6e4 <localtime_r+0x98>
 808d6e2:	2301      	movs	r3, #1
 808d6e4:	6223      	str	r3, [r4, #32]
 808d6e6:	6a23      	ldr	r3, [r4, #32]
 808d6e8:	203c      	movs	r0, #60	; 0x3c
 808d6ea:	2b01      	cmp	r3, #1
 808d6ec:	bf0c      	ite	eq
 808d6ee:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 808d6f0:	6a39      	ldrne	r1, [r7, #32]
 808d6f2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808d6f6:	fb91 f6f3 	sdiv	r6, r1, r3
 808d6fa:	fb03 1316 	mls	r3, r3, r6, r1
 808d6fe:	fb93 f2f0 	sdiv	r2, r3, r0
 808d702:	fb00 3012 	mls	r0, r0, r2, r3
 808d706:	6861      	ldr	r1, [r4, #4]
 808d708:	6823      	ldr	r3, [r4, #0]
 808d70a:	1a89      	subs	r1, r1, r2
 808d70c:	68a2      	ldr	r2, [r4, #8]
 808d70e:	1a1b      	subs	r3, r3, r0
 808d710:	1b92      	subs	r2, r2, r6
 808d712:	2b3b      	cmp	r3, #59	; 0x3b
 808d714:	6023      	str	r3, [r4, #0]
 808d716:	6061      	str	r1, [r4, #4]
 808d718:	60a2      	str	r2, [r4, #8]
 808d71a:	dd03      	ble.n	808d724 <localtime_r+0xd8>
 808d71c:	3101      	adds	r1, #1
 808d71e:	6061      	str	r1, [r4, #4]
 808d720:	3b3c      	subs	r3, #60	; 0x3c
 808d722:	e004      	b.n	808d72e <localtime_r+0xe2>
 808d724:	2b00      	cmp	r3, #0
 808d726:	da03      	bge.n	808d730 <localtime_r+0xe4>
 808d728:	3901      	subs	r1, #1
 808d72a:	6061      	str	r1, [r4, #4]
 808d72c:	333c      	adds	r3, #60	; 0x3c
 808d72e:	6023      	str	r3, [r4, #0]
 808d730:	6863      	ldr	r3, [r4, #4]
 808d732:	2b3b      	cmp	r3, #59	; 0x3b
 808d734:	dd03      	ble.n	808d73e <localtime_r+0xf2>
 808d736:	3201      	adds	r2, #1
 808d738:	60a2      	str	r2, [r4, #8]
 808d73a:	3b3c      	subs	r3, #60	; 0x3c
 808d73c:	e004      	b.n	808d748 <localtime_r+0xfc>
 808d73e:	2b00      	cmp	r3, #0
 808d740:	da03      	bge.n	808d74a <localtime_r+0xfe>
 808d742:	3a01      	subs	r2, #1
 808d744:	60a2      	str	r2, [r4, #8]
 808d746:	333c      	adds	r3, #60	; 0x3c
 808d748:	6063      	str	r3, [r4, #4]
 808d74a:	68a3      	ldr	r3, [r4, #8]
 808d74c:	2b17      	cmp	r3, #23
 808d74e:	dd22      	ble.n	808d796 <localtime_r+0x14a>
 808d750:	69e2      	ldr	r2, [r4, #28]
 808d752:	3b18      	subs	r3, #24
 808d754:	3201      	adds	r2, #1
 808d756:	61e2      	str	r2, [r4, #28]
 808d758:	69a2      	ldr	r2, [r4, #24]
 808d75a:	60a3      	str	r3, [r4, #8]
 808d75c:	3201      	adds	r2, #1
 808d75e:	2a06      	cmp	r2, #6
 808d760:	bfc8      	it	gt
 808d762:	2200      	movgt	r2, #0
 808d764:	61a2      	str	r2, [r4, #24]
 808d766:	68e2      	ldr	r2, [r4, #12]
 808d768:	6923      	ldr	r3, [r4, #16]
 808d76a:	3201      	adds	r2, #1
 808d76c:	60e2      	str	r2, [r4, #12]
 808d76e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 808d772:	428a      	cmp	r2, r1
 808d774:	dd46      	ble.n	808d804 <localtime_r+0x1b8>
 808d776:	3301      	adds	r3, #1
 808d778:	2b0c      	cmp	r3, #12
 808d77a:	bf08      	it	eq
 808d77c:	6963      	ldreq	r3, [r4, #20]
 808d77e:	eba2 0201 	sub.w	r2, r2, r1
 808d782:	60e2      	str	r2, [r4, #12]
 808d784:	bf05      	ittet	eq
 808d786:	3301      	addeq	r3, #1
 808d788:	2200      	moveq	r2, #0
 808d78a:	6123      	strne	r3, [r4, #16]
 808d78c:	6122      	streq	r2, [r4, #16]
 808d78e:	bf04      	itt	eq
 808d790:	6163      	streq	r3, [r4, #20]
 808d792:	61e2      	streq	r2, [r4, #28]
 808d794:	e036      	b.n	808d804 <localtime_r+0x1b8>
 808d796:	2b00      	cmp	r3, #0
 808d798:	da34      	bge.n	808d804 <localtime_r+0x1b8>
 808d79a:	69e2      	ldr	r2, [r4, #28]
 808d79c:	3318      	adds	r3, #24
 808d79e:	3a01      	subs	r2, #1
 808d7a0:	61e2      	str	r2, [r4, #28]
 808d7a2:	69a2      	ldr	r2, [r4, #24]
 808d7a4:	60a3      	str	r3, [r4, #8]
 808d7a6:	3a01      	subs	r2, #1
 808d7a8:	bf48      	it	mi
 808d7aa:	2206      	movmi	r2, #6
 808d7ac:	61a2      	str	r2, [r4, #24]
 808d7ae:	68e2      	ldr	r2, [r4, #12]
 808d7b0:	3a01      	subs	r2, #1
 808d7b2:	60e2      	str	r2, [r4, #12]
 808d7b4:	bb32      	cbnz	r2, 808d804 <localtime_r+0x1b8>
 808d7b6:	6923      	ldr	r3, [r4, #16]
 808d7b8:	3b01      	subs	r3, #1
 808d7ba:	d401      	bmi.n	808d7c0 <localtime_r+0x174>
 808d7bc:	6123      	str	r3, [r4, #16]
 808d7be:	e01d      	b.n	808d7fc <localtime_r+0x1b0>
 808d7c0:	230b      	movs	r3, #11
 808d7c2:	6123      	str	r3, [r4, #16]
 808d7c4:	6963      	ldr	r3, [r4, #20]
 808d7c6:	1e5a      	subs	r2, r3, #1
 808d7c8:	f012 0f03 	tst.w	r2, #3
 808d7cc:	6162      	str	r2, [r4, #20]
 808d7ce:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 808d7d2:	d105      	bne.n	808d7e0 <localtime_r+0x194>
 808d7d4:	2164      	movs	r1, #100	; 0x64
 808d7d6:	fb93 f2f1 	sdiv	r2, r3, r1
 808d7da:	fb01 3212 	mls	r2, r1, r2, r3
 808d7de:	b94a      	cbnz	r2, 808d7f4 <localtime_r+0x1a8>
 808d7e0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 808d7e4:	fb93 f2f1 	sdiv	r2, r3, r1
 808d7e8:	fb01 3312 	mls	r3, r1, r2, r3
 808d7ec:	fab3 f383 	clz	r3, r3
 808d7f0:	095b      	lsrs	r3, r3, #5
 808d7f2:	e000      	b.n	808d7f6 <localtime_r+0x1aa>
 808d7f4:	2301      	movs	r3, #1
 808d7f6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 808d7fa:	61e3      	str	r3, [r4, #28]
 808d7fc:	6923      	ldr	r3, [r4, #16]
 808d7fe:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 808d802:	60e3      	str	r3, [r4, #12]
 808d804:	f001 fe01 	bl	808f40a <__tz_unlock>
 808d808:	4620      	mov	r0, r4
 808d80a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808d80e:	bf00      	nop
 808d810:	08093444 	.word	0x08093444
 808d814:	200012ec 	.word	0x200012ec

0808d818 <ldiv>:
 808d818:	b510      	push	{r4, lr}
 808d81a:	fb91 f4f2 	sdiv	r4, r1, r2
 808d81e:	2900      	cmp	r1, #0
 808d820:	fb02 1314 	mls	r3, r2, r4, r1
 808d824:	db04      	blt.n	808d830 <ldiv+0x18>
 808d826:	2b00      	cmp	r3, #0
 808d828:	da07      	bge.n	808d83a <ldiv+0x22>
 808d82a:	3401      	adds	r4, #1
 808d82c:	1a9b      	subs	r3, r3, r2
 808d82e:	e004      	b.n	808d83a <ldiv+0x22>
 808d830:	2b00      	cmp	r3, #0
 808d832:	bfc4      	itt	gt
 808d834:	f104 34ff 	addgt.w	r4, r4, #4294967295
 808d838:	189b      	addgt	r3, r3, r2
 808d83a:	6004      	str	r4, [r0, #0]
 808d83c:	6043      	str	r3, [r0, #4]
 808d83e:	bd10      	pop	{r4, pc}

0808d840 <_localeconv_r>:
 808d840:	4800      	ldr	r0, [pc, #0]	; (808d844 <_localeconv_r+0x4>)
 808d842:	4770      	bx	lr
 808d844:	20000148 	.word	0x20000148

0808d848 <memcmp>:
 808d848:	b510      	push	{r4, lr}
 808d84a:	3901      	subs	r1, #1
 808d84c:	4402      	add	r2, r0
 808d84e:	4290      	cmp	r0, r2
 808d850:	d007      	beq.n	808d862 <memcmp+0x1a>
 808d852:	f810 3b01 	ldrb.w	r3, [r0], #1
 808d856:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808d85a:	42a3      	cmp	r3, r4
 808d85c:	d0f7      	beq.n	808d84e <memcmp+0x6>
 808d85e:	1b18      	subs	r0, r3, r4
 808d860:	bd10      	pop	{r4, pc}
 808d862:	2000      	movs	r0, #0
 808d864:	bd10      	pop	{r4, pc}

0808d866 <memcpy>:
 808d866:	b510      	push	{r4, lr}
 808d868:	1e43      	subs	r3, r0, #1
 808d86a:	440a      	add	r2, r1
 808d86c:	4291      	cmp	r1, r2
 808d86e:	d004      	beq.n	808d87a <memcpy+0x14>
 808d870:	f811 4b01 	ldrb.w	r4, [r1], #1
 808d874:	f803 4f01 	strb.w	r4, [r3, #1]!
 808d878:	e7f8      	b.n	808d86c <memcpy+0x6>
 808d87a:	bd10      	pop	{r4, pc}

0808d87c <memset>:
 808d87c:	4603      	mov	r3, r0
 808d87e:	4402      	add	r2, r0
 808d880:	4293      	cmp	r3, r2
 808d882:	d002      	beq.n	808d88a <memset+0xe>
 808d884:	f803 1b01 	strb.w	r1, [r3], #1
 808d888:	e7fa      	b.n	808d880 <memset+0x4>
 808d88a:	4770      	bx	lr

0808d88c <srand>:
 808d88c:	b538      	push	{r3, r4, r5, lr}
 808d88e:	4b12      	ldr	r3, [pc, #72]	; (808d8d8 <srand+0x4c>)
 808d890:	4605      	mov	r5, r0
 808d892:	681c      	ldr	r4, [r3, #0]
 808d894:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 808d896:	b9d3      	cbnz	r3, 808d8ce <srand+0x42>
 808d898:	2018      	movs	r0, #24
 808d89a:	f7fc f855 	bl	8089948 <malloc>
 808d89e:	f243 330e 	movw	r3, #13070	; 0x330e
 808d8a2:	63a0      	str	r0, [r4, #56]	; 0x38
 808d8a4:	8003      	strh	r3, [r0, #0]
 808d8a6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 808d8aa:	8043      	strh	r3, [r0, #2]
 808d8ac:	f241 2334 	movw	r3, #4660	; 0x1234
 808d8b0:	8083      	strh	r3, [r0, #4]
 808d8b2:	f24e 636d 	movw	r3, #58989	; 0xe66d
 808d8b6:	80c3      	strh	r3, [r0, #6]
 808d8b8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 808d8bc:	8103      	strh	r3, [r0, #8]
 808d8be:	2305      	movs	r3, #5
 808d8c0:	8143      	strh	r3, [r0, #10]
 808d8c2:	230b      	movs	r3, #11
 808d8c4:	8183      	strh	r3, [r0, #12]
 808d8c6:	2201      	movs	r2, #1
 808d8c8:	2300      	movs	r3, #0
 808d8ca:	e9c0 2304 	strd	r2, r3, [r0, #16]
 808d8ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 808d8d0:	2200      	movs	r2, #0
 808d8d2:	611d      	str	r5, [r3, #16]
 808d8d4:	615a      	str	r2, [r3, #20]
 808d8d6:	bd38      	pop	{r3, r4, r5, pc}
 808d8d8:	20000144 	.word	0x20000144

0808d8dc <strchr>:
 808d8dc:	b2c9      	uxtb	r1, r1
 808d8de:	4603      	mov	r3, r0
 808d8e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 808d8e4:	b11a      	cbz	r2, 808d8ee <strchr+0x12>
 808d8e6:	4291      	cmp	r1, r2
 808d8e8:	d1f9      	bne.n	808d8de <strchr+0x2>
 808d8ea:	4618      	mov	r0, r3
 808d8ec:	4770      	bx	lr
 808d8ee:	2900      	cmp	r1, #0
 808d8f0:	bf0c      	ite	eq
 808d8f2:	4618      	moveq	r0, r3
 808d8f4:	2000      	movne	r0, #0
 808d8f6:	4770      	bx	lr

0808d8f8 <strcmp>:
 808d8f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 808d8fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 808d900:	2a01      	cmp	r2, #1
 808d902:	bf28      	it	cs
 808d904:	429a      	cmpcs	r2, r3
 808d906:	d0f7      	beq.n	808d8f8 <strcmp>
 808d908:	1ad0      	subs	r0, r2, r3
 808d90a:	4770      	bx	lr

0808d90c <strcpy>:
 808d90c:	4603      	mov	r3, r0
 808d90e:	f811 2b01 	ldrb.w	r2, [r1], #1
 808d912:	f803 2b01 	strb.w	r2, [r3], #1
 808d916:	2a00      	cmp	r2, #0
 808d918:	d1f9      	bne.n	808d90e <strcpy+0x2>
 808d91a:	4770      	bx	lr

0808d91c <strdup>:
 808d91c:	4b02      	ldr	r3, [pc, #8]	; (808d928 <strdup+0xc>)
 808d91e:	4601      	mov	r1, r0
 808d920:	6818      	ldr	r0, [r3, #0]
 808d922:	f000 b803 	b.w	808d92c <_strdup_r>
 808d926:	bf00      	nop
 808d928:	20000144 	.word	0x20000144

0808d92c <_strdup_r>:
 808d92c:	b570      	push	{r4, r5, r6, lr}
 808d92e:	4606      	mov	r6, r0
 808d930:	4608      	mov	r0, r1
 808d932:	460c      	mov	r4, r1
 808d934:	f000 fd22 	bl	808e37c <strlen>
 808d938:	1c45      	adds	r5, r0, #1
 808d93a:	4629      	mov	r1, r5
 808d93c:	4630      	mov	r0, r6
 808d93e:	f7fc f853 	bl	80899e8 <_malloc_r>
 808d942:	4606      	mov	r6, r0
 808d944:	b118      	cbz	r0, 808d94e <_strdup_r+0x22>
 808d946:	462a      	mov	r2, r5
 808d948:	4621      	mov	r1, r4
 808d94a:	f7ff ff8c 	bl	808d866 <memcpy>
 808d94e:	4630      	mov	r0, r6
 808d950:	bd70      	pop	{r4, r5, r6, pc}

0808d952 <iso_year_adjust>:
 808d952:	6941      	ldr	r1, [r0, #20]
 808d954:	b510      	push	{r4, lr}
 808d956:	078b      	lsls	r3, r1, #30
 808d958:	d10c      	bne.n	808d974 <iso_year_adjust+0x22>
 808d95a:	f240 736c 	movw	r3, #1900	; 0x76c
 808d95e:	2900      	cmp	r1, #0
 808d960:	bfa8      	it	ge
 808d962:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 808d966:	440b      	add	r3, r1
 808d968:	2464      	movs	r4, #100	; 0x64
 808d96a:	fb93 f2f4 	sdiv	r2, r3, r4
 808d96e:	fb04 3312 	mls	r3, r4, r2, r3
 808d972:	b983      	cbnz	r3, 808d996 <iso_year_adjust+0x44>
 808d974:	f240 736c 	movw	r3, #1900	; 0x76c
 808d978:	2900      	cmp	r1, #0
 808d97a:	bfa8      	it	ge
 808d97c:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 808d980:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808d984:	440b      	add	r3, r1
 808d986:	fb93 f1f2 	sdiv	r1, r3, r2
 808d98a:	fb02 3311 	mls	r3, r2, r1, r3
 808d98e:	fab3 f283 	clz	r2, r3
 808d992:	0952      	lsrs	r2, r2, #5
 808d994:	e000      	b.n	808d998 <iso_year_adjust+0x46>
 808d996:	2201      	movs	r2, #1
 808d998:	6983      	ldr	r3, [r0, #24]
 808d99a:	69c1      	ldr	r1, [r0, #28]
 808d99c:	005b      	lsls	r3, r3, #1
 808d99e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 808d9a2:	4413      	add	r3, r2
 808d9a4:	2b21      	cmp	r3, #33	; 0x21
 808d9a6:	dc0e      	bgt.n	808d9c6 <iso_year_adjust+0x74>
 808d9a8:	2b20      	cmp	r3, #32
 808d9aa:	da2f      	bge.n	808da0c <iso_year_adjust+0xba>
 808d9ac:	2b0d      	cmp	r3, #13
 808d9ae:	dc02      	bgt.n	808d9b6 <iso_year_adjust+0x64>
 808d9b0:	2b0a      	cmp	r3, #10
 808d9b2:	db05      	blt.n	808d9c0 <iso_year_adjust+0x6e>
 808d9b4:	e02a      	b.n	808da0c <iso_year_adjust+0xba>
 808d9b6:	2b10      	cmp	r3, #16
 808d9b8:	db26      	blt.n	808da08 <iso_year_adjust+0xb6>
 808d9ba:	2b11      	cmp	r3, #17
 808d9bc:	dd26      	ble.n	808da0c <iso_year_adjust+0xba>
 808d9be:	3b1c      	subs	r3, #28
 808d9c0:	2b01      	cmp	r3, #1
 808d9c2:	d923      	bls.n	808da0c <iso_year_adjust+0xba>
 808d9c4:	e020      	b.n	808da08 <iso_year_adjust+0xb6>
 808d9c6:	f241 62c6 	movw	r2, #5830	; 0x16c6
 808d9ca:	4293      	cmp	r3, r2
 808d9cc:	dc0e      	bgt.n	808d9ec <iso_year_adjust+0x9a>
 808d9ce:	f241 62c2 	movw	r2, #5826	; 0x16c2
 808d9d2:	4293      	cmp	r3, r2
 808d9d4:	da16      	bge.n	808da04 <iso_year_adjust+0xb2>
 808d9d6:	f241 62a2 	movw	r2, #5794	; 0x16a2
 808d9da:	4293      	cmp	r3, r2
 808d9dc:	d012      	beq.n	808da04 <iso_year_adjust+0xb2>
 808d9de:	db13      	blt.n	808da08 <iso_year_adjust+0xb6>
 808d9e0:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
 808d9e4:	3b12      	subs	r3, #18
 808d9e6:	2b02      	cmp	r3, #2
 808d9e8:	d90c      	bls.n	808da04 <iso_year_adjust+0xb2>
 808d9ea:	e00d      	b.n	808da08 <iso_year_adjust+0xb6>
 808d9ec:	f241 62d5 	movw	r2, #5845	; 0x16d5
 808d9f0:	4293      	cmp	r3, r2
 808d9f2:	d007      	beq.n	808da04 <iso_year_adjust+0xb2>
 808d9f4:	f241 62d7 	movw	r2, #5847	; 0x16d7
 808d9f8:	4293      	cmp	r3, r2
 808d9fa:	d003      	beq.n	808da04 <iso_year_adjust+0xb2>
 808d9fc:	f241 62d3 	movw	r2, #5843	; 0x16d3
 808da00:	4293      	cmp	r3, r2
 808da02:	d101      	bne.n	808da08 <iso_year_adjust+0xb6>
 808da04:	2001      	movs	r0, #1
 808da06:	bd10      	pop	{r4, pc}
 808da08:	2000      	movs	r0, #0
 808da0a:	bd10      	pop	{r4, pc}
 808da0c:	f04f 30ff 	mov.w	r0, #4294967295
 808da10:	bd10      	pop	{r4, pc}
	...

0808da14 <strftime>:
 808da14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808da18:	460e      	mov	r6, r1
 808da1a:	b093      	sub	sp, #76	; 0x4c
 808da1c:	461d      	mov	r5, r3
 808da1e:	4607      	mov	r7, r0
 808da20:	4691      	mov	r9, r2
 808da22:	f001 fc39 	bl	808f298 <__get_current_time_locale>
 808da26:	2300      	movs	r3, #0
 808da28:	9306      	str	r3, [sp, #24]
 808da2a:	461c      	mov	r4, r3
 808da2c:	1e73      	subs	r3, r6, #1
 808da2e:	9003      	str	r0, [sp, #12]
 808da30:	9302      	str	r3, [sp, #8]
 808da32:	f899 3000 	ldrb.w	r3, [r9]
 808da36:	2b00      	cmp	r3, #0
 808da38:	f000 8492 	beq.w	808e360 <strftime+0x94c>
 808da3c:	2b25      	cmp	r3, #37	; 0x25
 808da3e:	d008      	beq.n	808da52 <strftime+0x3e>
 808da40:	9a02      	ldr	r2, [sp, #8]
 808da42:	4294      	cmp	r4, r2
 808da44:	f080 8490 	bcs.w	808e368 <strftime+0x954>
 808da48:	553b      	strb	r3, [r7, r4]
 808da4a:	f109 0901 	add.w	r9, r9, #1
 808da4e:	3401      	adds	r4, #1
 808da50:	e7ef      	b.n	808da32 <strftime+0x1e>
 808da52:	f899 a001 	ldrb.w	sl, [r9, #1]
 808da56:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 808da5a:	d007      	beq.n	808da6c <strftime+0x58>
 808da5c:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808da60:	d004      	beq.n	808da6c <strftime+0x58>
 808da62:	f109 0901 	add.w	r9, r9, #1
 808da66:	f04f 0a00 	mov.w	sl, #0
 808da6a:	e001      	b.n	808da70 <strftime+0x5c>
 808da6c:	f109 0902 	add.w	r9, r9, #2
 808da70:	f899 3000 	ldrb.w	r3, [r9]
 808da74:	3b31      	subs	r3, #49	; 0x31
 808da76:	2b08      	cmp	r3, #8
 808da78:	d808      	bhi.n	808da8c <strftime+0x78>
 808da7a:	4648      	mov	r0, r9
 808da7c:	220a      	movs	r2, #10
 808da7e:	a90a      	add	r1, sp, #40	; 0x28
 808da80:	f001 fc00 	bl	808f284 <strtoul>
 808da84:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 808da88:	4680      	mov	r8, r0
 808da8a:	e001      	b.n	808da90 <strftime+0x7c>
 808da8c:	f04f 0800 	mov.w	r8, #0
 808da90:	f899 3000 	ldrb.w	r3, [r9]
 808da94:	2b45      	cmp	r3, #69	; 0x45
 808da96:	d001      	beq.n	808da9c <strftime+0x88>
 808da98:	2b4f      	cmp	r3, #79	; 0x4f
 808da9a:	d101      	bne.n	808daa0 <strftime+0x8c>
 808da9c:	f109 0901 	add.w	r9, r9, #1
 808daa0:	f899 0000 	ldrb.w	r0, [r9]
 808daa4:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 808daa8:	2b55      	cmp	r3, #85	; 0x55
 808daaa:	f200 845d 	bhi.w	808e368 <strftime+0x954>
 808daae:	e8df f013 	tbh	[pc, r3, lsl #1]
 808dab2:	044a      	.short	0x044a
 808dab4:	045b045b 	.word	0x045b045b
 808dab8:	045b045b 	.word	0x045b045b
 808dabc:	045b045b 	.word	0x045b045b
 808dac0:	045b045b 	.word	0x045b045b
 808dac4:	045b045b 	.word	0x045b045b
 808dac8:	045b045b 	.word	0x045b045b
 808dacc:	045b045b 	.word	0x045b045b
 808dad0:	045b045b 	.word	0x045b045b
 808dad4:	045b045b 	.word	0x045b045b
 808dad8:	045b045b 	.word	0x045b045b
 808dadc:	045b045b 	.word	0x045b045b
 808dae0:	045b045b 	.word	0x045b045b
 808dae4:	045b045b 	.word	0x045b045b
 808dae8:	006f045b 	.word	0x006f045b
 808daec:	00d400a1 	.word	0x00d400a1
 808daf0:	045b011a 	.word	0x045b011a
 808daf4:	01a0013f 	.word	0x01a0013f
 808daf8:	022d0226 	.word	0x022d0226
 808dafc:	045b045b 	.word	0x045b045b
 808db00:	0260045b 	.word	0x0260045b
 808db04:	045b045b 	.word	0x045b045b
 808db08:	045b0268 	.word	0x045b0268
 808db0c:	031c0296 	.word	0x031c0296
 808db10:	033a0324 	.word	0x033a0324
 808db14:	03850342 	.word	0x03850342
 808db18:	039f00c6 	.word	0x039f00c6
 808db1c:	045b041f 	.word	0x045b041f
 808db20:	045b045b 	.word	0x045b045b
 808db24:	045b045b 	.word	0x045b045b
 808db28:	0056045b 	.word	0x0056045b
 808db2c:	00ba0089 	.word	0x00ba0089
 808db30:	010c010c 	.word	0x010c010c
 808db34:	0171045b 	.word	0x0171045b
 808db38:	045b0089 	.word	0x045b0089
 808db3c:	0226023d 	.word	0x0226023d
 808db40:	025d022d 	.word	0x025d022d
 808db44:	045b0262 	.word	0x045b0262
 808db48:	045b0268 	.word	0x045b0268
 808db4c:	029b00be 	.word	0x029b00be
 808db50:	032d031e 	.word	0x032d031e
 808db54:	037e045b 	.word	0x037e045b
 808db58:	039100c2 	.word	0x039100c2
 808db5c:	03e7      	.short	0x03e7
 808db5e:	69ab      	ldr	r3, [r5, #24]
 808db60:	9a03      	ldr	r2, [sp, #12]
 808db62:	3318      	adds	r3, #24
 808db64:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808db68:	4640      	mov	r0, r8
 808db6a:	f000 fc07 	bl	808e37c <strlen>
 808db6e:	f108 38ff 	add.w	r8, r8, #4294967295
 808db72:	193b      	adds	r3, r7, r4
 808db74:	4420      	add	r0, r4
 808db76:	4284      	cmp	r4, r0
 808db78:	f000 83eb 	beq.w	808e352 <strftime+0x93e>
 808db7c:	9a02      	ldr	r2, [sp, #8]
 808db7e:	4294      	cmp	r4, r2
 808db80:	f080 83f2 	bcs.w	808e368 <strftime+0x954>
 808db84:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808db88:	3401      	adds	r4, #1
 808db8a:	f803 2b01 	strb.w	r2, [r3], #1
 808db8e:	e7f2      	b.n	808db76 <strftime+0x162>
 808db90:	69ab      	ldr	r3, [r5, #24]
 808db92:	9a03      	ldr	r2, [sp, #12]
 808db94:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 808db98:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
 808db9c:	4640      	mov	r0, r8
 808db9e:	f000 fbed 	bl	808e37c <strlen>
 808dba2:	f108 38ff 	add.w	r8, r8, #4294967295
 808dba6:	193b      	adds	r3, r7, r4
 808dba8:	4420      	add	r0, r4
 808dbaa:	4284      	cmp	r4, r0
 808dbac:	f000 83d1 	beq.w	808e352 <strftime+0x93e>
 808dbb0:	9a02      	ldr	r2, [sp, #8]
 808dbb2:	4294      	cmp	r4, r2
 808dbb4:	f080 83d8 	bcs.w	808e368 <strftime+0x954>
 808dbb8:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808dbbc:	3401      	adds	r4, #1
 808dbbe:	f803 2b01 	strb.w	r2, [r3], #1
 808dbc2:	e7f2      	b.n	808dbaa <strftime+0x196>
 808dbc4:	692b      	ldr	r3, [r5, #16]
 808dbc6:	9a03      	ldr	r2, [sp, #12]
 808dbc8:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808dbcc:	4640      	mov	r0, r8
 808dbce:	f000 fbd5 	bl	808e37c <strlen>
 808dbd2:	f108 38ff 	add.w	r8, r8, #4294967295
 808dbd6:	193b      	adds	r3, r7, r4
 808dbd8:	4420      	add	r0, r4
 808dbda:	4284      	cmp	r4, r0
 808dbdc:	f000 83b9 	beq.w	808e352 <strftime+0x93e>
 808dbe0:	9a02      	ldr	r2, [sp, #8]
 808dbe2:	4294      	cmp	r4, r2
 808dbe4:	f080 83c0 	bcs.w	808e368 <strftime+0x954>
 808dbe8:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808dbec:	3401      	adds	r4, #1
 808dbee:	f803 2b01 	strb.w	r2, [r3], #1
 808dbf2:	e7f2      	b.n	808dbda <strftime+0x1c6>
 808dbf4:	692b      	ldr	r3, [r5, #16]
 808dbf6:	9a03      	ldr	r2, [sp, #12]
 808dbf8:	330c      	adds	r3, #12
 808dbfa:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808dbfe:	4640      	mov	r0, r8
 808dc00:	f000 fbbc 	bl	808e37c <strlen>
 808dc04:	f108 38ff 	add.w	r8, r8, #4294967295
 808dc08:	193b      	adds	r3, r7, r4
 808dc0a:	4420      	add	r0, r4
 808dc0c:	4284      	cmp	r4, r0
 808dc0e:	f000 83a0 	beq.w	808e352 <strftime+0x93e>
 808dc12:	9a02      	ldr	r2, [sp, #8]
 808dc14:	4294      	cmp	r4, r2
 808dc16:	f080 83a7 	bcs.w	808e368 <strftime+0x954>
 808dc1a:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808dc1e:	3401      	adds	r4, #1
 808dc20:	f803 2b01 	strb.w	r2, [r3], #1
 808dc24:	e7f2      	b.n	808dc0c <strftime+0x1f8>
 808dc26:	9b03      	ldr	r3, [sp, #12]
 808dc28:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
 808dc2c:	e00a      	b.n	808dc44 <strftime+0x230>
 808dc2e:	9b03      	ldr	r3, [sp, #12]
 808dc30:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
 808dc34:	e006      	b.n	808dc44 <strftime+0x230>
 808dc36:	9b03      	ldr	r3, [sp, #12]
 808dc38:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
 808dc3c:	e002      	b.n	808dc44 <strftime+0x230>
 808dc3e:	9b03      	ldr	r3, [sp, #12]
 808dc40:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
 808dc44:	4640      	mov	r0, r8
 808dc46:	f000 fb99 	bl	808e37c <strlen>
 808dc4a:	f898 3000 	ldrb.w	r3, [r8]
 808dc4e:	2b00      	cmp	r3, #0
 808dc50:	f000 837f 	beq.w	808e352 <strftime+0x93e>
 808dc54:	462b      	mov	r3, r5
 808dc56:	4642      	mov	r2, r8
 808dc58:	e093      	b.n	808dd82 <strftime+0x36e>
 808dc5a:	49b6      	ldr	r1, [pc, #728]	; (808df34 <strftime+0x520>)
 808dc5c:	f8d5 b014 	ldr.w	fp, [r5, #20]
 808dc60:	458b      	cmp	fp, r1
 808dc62:	bfac      	ite	ge
 808dc64:	2100      	movge	r1, #0
 808dc66:	2101      	movlt	r1, #1
 808dc68:	f1bb 0f00 	cmp.w	fp, #0
 808dc6c:	db04      	blt.n	808dc78 <strftime+0x264>
 808dc6e:	2064      	movs	r0, #100	; 0x64
 808dc70:	fb9b f0f0 	sdiv	r0, fp, r0
 808dc74:	3013      	adds	r0, #19
 808dc76:	e008      	b.n	808dc8a <strftime+0x276>
 808dc78:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
 808dc7c:	9107      	str	r1, [sp, #28]
 808dc7e:	f001 fd4b 	bl	808f718 <abs>
 808dc82:	2364      	movs	r3, #100	; 0x64
 808dc84:	fb90 f0f3 	sdiv	r0, r0, r3
 808dc88:	9907      	ldr	r1, [sp, #28]
 808dc8a:	f1ba 0f00 	cmp.w	sl, #0
 808dc8e:	d008      	beq.n	808dca2 <strftime+0x28e>
 808dc90:	2863      	cmp	r0, #99	; 0x63
 808dc92:	dd09      	ble.n	808dca8 <strftime+0x294>
 808dc94:	4ba8      	ldr	r3, [pc, #672]	; (808df38 <strftime+0x524>)
 808dc96:	4aa9      	ldr	r2, [pc, #676]	; (808df3c <strftime+0x528>)
 808dc98:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808dc9c:	bf18      	it	ne
 808dc9e:	4613      	movne	r3, r2
 808dca0:	e003      	b.n	808dcaa <strftime+0x296>
 808dca2:	4ba6      	ldr	r3, [pc, #664]	; (808df3c <strftime+0x528>)
 808dca4:	4aa6      	ldr	r2, [pc, #664]	; (808df40 <strftime+0x52c>)
 808dca6:	e001      	b.n	808dcac <strftime+0x298>
 808dca8:	4ba4      	ldr	r3, [pc, #656]	; (808df3c <strftime+0x528>)
 808dcaa:	4aa6      	ldr	r2, [pc, #664]	; (808df44 <strftime+0x530>)
 808dcac:	f1b8 0f01 	cmp.w	r8, #1
 808dcb0:	bf98      	it	ls
 808dcb2:	f04f 0802 	movls.w	r8, #2
 808dcb6:	ebc1 0108 	rsb	r1, r1, r8
 808dcba:	9001      	str	r0, [sp, #4]
 808dcbc:	9100      	str	r1, [sp, #0]
 808dcbe:	489d      	ldr	r0, [pc, #628]	; (808df34 <strftime+0x520>)
 808dcc0:	49a1      	ldr	r1, [pc, #644]	; (808df48 <strftime+0x534>)
 808dcc2:	4583      	cmp	fp, r0
 808dcc4:	bfb8      	it	lt
 808dcc6:	460b      	movlt	r3, r1
 808dcc8:	e21d      	b.n	808e106 <strftime+0x6f2>
 808dcca:	4aa0      	ldr	r2, [pc, #640]	; (808df4c <strftime+0x538>)
 808dccc:	49a0      	ldr	r1, [pc, #640]	; (808df50 <strftime+0x53c>)
 808dcce:	68eb      	ldr	r3, [r5, #12]
 808dcd0:	2864      	cmp	r0, #100	; 0x64
 808dcd2:	bf08      	it	eq
 808dcd4:	460a      	moveq	r2, r1
 808dcd6:	1b31      	subs	r1, r6, r4
 808dcd8:	1938      	adds	r0, r7, r4
 808dcda:	f7fb fe6d 	bl	80899b8 <sniprintf>
 808dcde:	2800      	cmp	r0, #0
 808dce0:	f280 8302 	bge.w	808e2e8 <strftime+0x8d4>
 808dce4:	e340      	b.n	808e368 <strftime+0x954>
 808dce6:	6968      	ldr	r0, [r5, #20]
 808dce8:	692b      	ldr	r3, [r5, #16]
 808dcea:	2800      	cmp	r0, #0
 808dcec:	f103 0b01 	add.w	fp, r3, #1
 808dcf0:	eb07 0804 	add.w	r8, r7, r4
 808dcf4:	ebc4 0a06 	rsb	sl, r4, r6
 808dcf8:	68eb      	ldr	r3, [r5, #12]
 808dcfa:	db05      	blt.n	808dd08 <strftime+0x2f4>
 808dcfc:	2264      	movs	r2, #100	; 0x64
 808dcfe:	fb90 f1f2 	sdiv	r1, r0, r2
 808dd02:	fb02 0011 	mls	r0, r2, r1, r0
 808dd06:	e00a      	b.n	808dd1e <strftime+0x30a>
 808dd08:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808dd0c:	9307      	str	r3, [sp, #28]
 808dd0e:	f001 fd03 	bl	808f718 <abs>
 808dd12:	2264      	movs	r2, #100	; 0x64
 808dd14:	fb90 f1f2 	sdiv	r1, r0, r2
 808dd18:	fb01 0012 	mls	r0, r1, r2, r0
 808dd1c:	9b07      	ldr	r3, [sp, #28]
 808dd1e:	9001      	str	r0, [sp, #4]
 808dd20:	9300      	str	r3, [sp, #0]
 808dd22:	4651      	mov	r1, sl
 808dd24:	465b      	mov	r3, fp
 808dd26:	4640      	mov	r0, r8
 808dd28:	4a8a      	ldr	r2, [pc, #552]	; (808df54 <strftime+0x540>)
 808dd2a:	f7fb fe45 	bl	80899b8 <sniprintf>
 808dd2e:	e7d6      	b.n	808dcde <strftime+0x2ca>
 808dd30:	2325      	movs	r3, #37	; 0x25
 808dd32:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 808dd36:	f1ba 0f00 	cmp.w	sl, #0
 808dd3a:	d007      	beq.n	808dd4c <strftime+0x338>
 808dd3c:	f1b8 0f05 	cmp.w	r8, #5
 808dd40:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
 808dd44:	bf98      	it	ls
 808dd46:	f04f 0806 	movls.w	r8, #6
 808dd4a:	e004      	b.n	808dd56 <strftime+0x342>
 808dd4c:	232b      	movs	r3, #43	; 0x2b
 808dd4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 808dd52:	f04f 080a 	mov.w	r8, #10
 808dd56:	f1b8 0306 	subs.w	r3, r8, #6
 808dd5a:	d102      	bne.n	808dd62 <strftime+0x34e>
 808dd5c:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 808dd60:	e00a      	b.n	808dd78 <strftime+0x364>
 808dd62:	4a7d      	ldr	r2, [pc, #500]	; (808df58 <strftime+0x544>)
 808dd64:	211e      	movs	r1, #30
 808dd66:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 808dd6a:	f7fb fe25 	bl	80899b8 <sniprintf>
 808dd6e:	2800      	cmp	r0, #0
 808dd70:	ddf4      	ble.n	808dd5c <strftime+0x348>
 808dd72:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 808dd76:	4418      	add	r0, r3
 808dd78:	4978      	ldr	r1, [pc, #480]	; (808df5c <strftime+0x548>)
 808dd7a:	f7ff fdc7 	bl	808d90c <strcpy>
 808dd7e:	462b      	mov	r3, r5
 808dd80:	aa0a      	add	r2, sp, #40	; 0x28
 808dd82:	1b31      	subs	r1, r6, r4
 808dd84:	1938      	adds	r0, r7, r4
 808dd86:	f7ff fe45 	bl	808da14 <strftime>
 808dd8a:	2800      	cmp	r0, #0
 808dd8c:	f340 82ec 	ble.w	808e368 <strftime+0x954>
 808dd90:	4404      	add	r4, r0
 808dd92:	e2de      	b.n	808e352 <strftime+0x93e>
 808dd94:	4628      	mov	r0, r5
 808dd96:	f7ff fddc 	bl	808d952 <iso_year_adjust>
 808dd9a:	4680      	mov	r8, r0
 808dd9c:	6968      	ldr	r0, [r5, #20]
 808dd9e:	2800      	cmp	r0, #0
 808dda0:	db05      	blt.n	808ddae <strftime+0x39a>
 808dda2:	2264      	movs	r2, #100	; 0x64
 808dda4:	fb90 f1f2 	sdiv	r1, r0, r2
 808dda8:	fb02 0011 	mls	r0, r2, r1, r0
 808ddac:	e008      	b.n	808ddc0 <strftime+0x3ac>
 808ddae:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808ddb2:	f001 fcb1 	bl	808f718 <abs>
 808ddb6:	2264      	movs	r2, #100	; 0x64
 808ddb8:	fb90 f3f2 	sdiv	r3, r0, r2
 808ddbc:	fb03 0012 	mls	r0, r3, r2, r0
 808ddc0:	f1b8 0f00 	cmp.w	r8, #0
 808ddc4:	da06      	bge.n	808ddd4 <strftime+0x3c0>
 808ddc6:	696a      	ldr	r2, [r5, #20]
 808ddc8:	4b65      	ldr	r3, [pc, #404]	; (808df60 <strftime+0x54c>)
 808ddca:	429a      	cmp	r2, r3
 808ddcc:	bfb8      	it	lt
 808ddce:	f04f 0801 	movlt.w	r8, #1
 808ddd2:	e006      	b.n	808dde2 <strftime+0x3ce>
 808ddd4:	d005      	beq.n	808dde2 <strftime+0x3ce>
 808ddd6:	696a      	ldr	r2, [r5, #20]
 808ddd8:	4b56      	ldr	r3, [pc, #344]	; (808df34 <strftime+0x520>)
 808ddda:	429a      	cmp	r2, r3
 808dddc:	bfb8      	it	lt
 808ddde:	f04f 38ff 	movlt.w	r8, #4294967295
 808dde2:	2364      	movs	r3, #100	; 0x64
 808dde4:	4440      	add	r0, r8
 808dde6:	fb90 f2f3 	sdiv	r2, r0, r3
 808ddea:	fb03 0012 	mls	r0, r3, r2, r0
 808ddee:	4418      	add	r0, r3
 808ddf0:	e1f8      	b.n	808e1e4 <strftime+0x7d0>
 808ddf2:	4b50      	ldr	r3, [pc, #320]	; (808df34 <strftime+0x520>)
 808ddf4:	6969      	ldr	r1, [r5, #20]
 808ddf6:	4628      	mov	r0, r5
 808ddf8:	4299      	cmp	r1, r3
 808ddfa:	bfac      	ite	ge
 808ddfc:	2300      	movge	r3, #0
 808ddfe:	2301      	movlt	r3, #1
 808de00:	9108      	str	r1, [sp, #32]
 808de02:	9307      	str	r3, [sp, #28]
 808de04:	f7ff fda5 	bl	808d952 <iso_year_adjust>
 808de08:	9908      	ldr	r1, [sp, #32]
 808de0a:	4683      	mov	fp, r0
 808de0c:	2900      	cmp	r1, #0
 808de0e:	db04      	blt.n	808de1a <strftime+0x406>
 808de10:	2364      	movs	r3, #100	; 0x64
 808de12:	fb91 f3f3 	sdiv	r3, r1, r3
 808de16:	3313      	adds	r3, #19
 808de18:	e008      	b.n	808de2c <strftime+0x418>
 808de1a:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 808de1e:	9108      	str	r1, [sp, #32]
 808de20:	f001 fc7a 	bl	808f718 <abs>
 808de24:	2364      	movs	r3, #100	; 0x64
 808de26:	fb90 f3f3 	sdiv	r3, r0, r3
 808de2a:	9908      	ldr	r1, [sp, #32]
 808de2c:	6968      	ldr	r0, [r5, #20]
 808de2e:	2800      	cmp	r0, #0
 808de30:	db06      	blt.n	808de40 <strftime+0x42c>
 808de32:	f04f 0e64 	mov.w	lr, #100	; 0x64
 808de36:	fb90 fcfe 	sdiv	ip, r0, lr
 808de3a:	fb0e 001c 	mls	r0, lr, ip, r0
 808de3e:	e00d      	b.n	808de5c <strftime+0x448>
 808de40:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808de44:	9109      	str	r1, [sp, #36]	; 0x24
 808de46:	9308      	str	r3, [sp, #32]
 808de48:	f001 fc66 	bl	808f718 <abs>
 808de4c:	f04f 0e64 	mov.w	lr, #100	; 0x64
 808de50:	fb90 fcfe 	sdiv	ip, r0, lr
 808de54:	fb0c 001e 	mls	r0, ip, lr, r0
 808de58:	9909      	ldr	r1, [sp, #36]	; 0x24
 808de5a:	9b08      	ldr	r3, [sp, #32]
 808de5c:	f1bb 0f00 	cmp.w	fp, #0
 808de60:	da08      	bge.n	808de74 <strftime+0x460>
 808de62:	6969      	ldr	r1, [r5, #20]
 808de64:	4a3e      	ldr	r2, [pc, #248]	; (808df60 <strftime+0x54c>)
 808de66:	4291      	cmp	r1, r2
 808de68:	da0a      	bge.n	808de80 <strftime+0x46c>
 808de6a:	f04f 0b01 	mov.w	fp, #1
 808de6e:	f8cd b01c 	str.w	fp, [sp, #28]
 808de72:	e005      	b.n	808de80 <strftime+0x46c>
 808de74:	d004      	beq.n	808de80 <strftime+0x46c>
 808de76:	4a2f      	ldr	r2, [pc, #188]	; (808df34 <strftime+0x520>)
 808de78:	4291      	cmp	r1, r2
 808de7a:	bfb8      	it	lt
 808de7c:	f04f 3bff 	movlt.w	fp, #4294967295
 808de80:	eb0b 0200 	add.w	r2, fp, r0
 808de84:	1c50      	adds	r0, r2, #1
 808de86:	d102      	bne.n	808de8e <strftime+0x47a>
 808de88:	3b01      	subs	r3, #1
 808de8a:	2263      	movs	r2, #99	; 0x63
 808de8c:	e003      	b.n	808de96 <strftime+0x482>
 808de8e:	2a64      	cmp	r2, #100	; 0x64
 808de90:	bf04      	itt	eq
 808de92:	3301      	addeq	r3, #1
 808de94:	2200      	moveq	r2, #0
 808de96:	2064      	movs	r0, #100	; 0x64
 808de98:	fb00 2303 	mla	r3, r0, r3, r2
 808de9c:	9a07      	ldr	r2, [sp, #28]
 808de9e:	b142      	cbz	r2, 808deb2 <strftime+0x49e>
 808dea0:	222d      	movs	r2, #45	; 0x2d
 808dea2:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
 808dea6:	f1b8 0f00 	cmp.w	r8, #0
 808deaa:	d013      	beq.n	808ded4 <strftime+0x4c0>
 808deac:	f108 38ff 	add.w	r8, r8, #4294967295
 808deb0:	e010      	b.n	808ded4 <strftime+0x4c0>
 808deb2:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808deb6:	d110      	bne.n	808deda <strftime+0x4c6>
 808deb8:	f242 720f 	movw	r2, #9999	; 0x270f
 808debc:	4293      	cmp	r3, r2
 808debe:	d90c      	bls.n	808deda <strftime+0x4c6>
 808dec0:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 808dec4:	f1b8 0f00 	cmp.w	r8, #0
 808dec8:	d1f0      	bne.n	808deac <strftime+0x498>
 808deca:	aa12      	add	r2, sp, #72	; 0x48
 808decc:	2125      	movs	r1, #37	; 0x25
 808dece:	f802 1d1f 	strb.w	r1, [r2, #-31]!
 808ded2:	e00a      	b.n	808deea <strftime+0x4d6>
 808ded4:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 808ded8:	e000      	b.n	808dedc <strftime+0x4c8>
 808deda:	aa0a      	add	r2, sp, #40	; 0x28
 808dedc:	2125      	movs	r1, #37	; 0x25
 808dede:	7011      	strb	r1, [r2, #0]
 808dee0:	f1ba 0f00 	cmp.w	sl, #0
 808dee4:	d101      	bne.n	808deea <strftime+0x4d6>
 808dee6:	1c50      	adds	r0, r2, #1
 808dee8:	e002      	b.n	808def0 <strftime+0x4dc>
 808deea:	2130      	movs	r1, #48	; 0x30
 808deec:	1c90      	adds	r0, r2, #2
 808deee:	7051      	strb	r1, [r2, #1]
 808def0:	491c      	ldr	r1, [pc, #112]	; (808df64 <strftime+0x550>)
 808def2:	9307      	str	r3, [sp, #28]
 808def4:	f7ff fd0a 	bl	808d90c <strcpy>
 808def8:	9b07      	ldr	r3, [sp, #28]
 808defa:	9300      	str	r3, [sp, #0]
 808defc:	e1ac      	b.n	808e258 <strftime+0x844>
 808defe:	4a14      	ldr	r2, [pc, #80]	; (808df50 <strftime+0x53c>)
 808df00:	4912      	ldr	r1, [pc, #72]	; (808df4c <strftime+0x538>)
 808df02:	68ab      	ldr	r3, [r5, #8]
 808df04:	286b      	cmp	r0, #107	; 0x6b
 808df06:	bf08      	it	eq
 808df08:	460a      	moveq	r2, r1
 808df0a:	e6e4      	b.n	808dcd6 <strftime+0x2c2>
 808df0c:	68a9      	ldr	r1, [r5, #8]
 808df0e:	230c      	movs	r3, #12
 808df10:	b131      	cbz	r1, 808df20 <strftime+0x50c>
 808df12:	4299      	cmp	r1, r3
 808df14:	bf16      	itet	ne
 808df16:	fb91 f2f3 	sdivne	r2, r1, r3
 808df1a:	460b      	moveq	r3, r1
 808df1c:	fb03 1312 	mlsne	r3, r3, r2, r1
 808df20:	4a0a      	ldr	r2, [pc, #40]	; (808df4c <strftime+0x538>)
 808df22:	490b      	ldr	r1, [pc, #44]	; (808df50 <strftime+0x53c>)
 808df24:	2849      	cmp	r0, #73	; 0x49
 808df26:	bf08      	it	eq
 808df28:	460a      	moveq	r2, r1
 808df2a:	e6d4      	b.n	808dcd6 <strftime+0x2c2>
 808df2c:	69eb      	ldr	r3, [r5, #28]
 808df2e:	4a0e      	ldr	r2, [pc, #56]	; (808df68 <strftime+0x554>)
 808df30:	3301      	adds	r3, #1
 808df32:	e6d0      	b.n	808dcd6 <strftime+0x2c2>
 808df34:	fffff894 	.word	0xfffff894
 808df38:	080934b3 	.word	0x080934b3
 808df3c:	08092fdc 	.word	0x08092fdc
 808df40:	080934a4 	.word	0x080934a4
 808df44:	080934ab 	.word	0x080934ab
 808df48:	08091ec4 	.word	0x08091ec4
 808df4c:	080934b5 	.word	0x080934b5
 808df50:	080934c3 	.word	0x080934c3
 808df54:	080934b9 	.word	0x080934b9
 808df58:	080934c8 	.word	0x080934c8
 808df5c:	080934cc 	.word	0x080934cc
 808df60:	fffff895 	.word	0xfffff895
 808df64:	080934d4 	.word	0x080934d4
 808df68:	080934d8 	.word	0x080934d8
 808df6c:	692b      	ldr	r3, [r5, #16]
 808df6e:	3301      	adds	r3, #1
 808df70:	e13c      	b.n	808e1ec <strftime+0x7d8>
 808df72:	686b      	ldr	r3, [r5, #4]
 808df74:	e13a      	b.n	808e1ec <strftime+0x7d8>
 808df76:	9b02      	ldr	r3, [sp, #8]
 808df78:	429c      	cmp	r4, r3
 808df7a:	f080 81f5 	bcs.w	808e368 <strftime+0x954>
 808df7e:	230a      	movs	r3, #10
 808df80:	e1e5      	b.n	808e34e <strftime+0x93a>
 808df82:	68ab      	ldr	r3, [r5, #8]
 808df84:	9a03      	ldr	r2, [sp, #12]
 808df86:	2b0b      	cmp	r3, #11
 808df88:	bfcc      	ite	gt
 808df8a:	23a4      	movgt	r3, #164	; 0xa4
 808df8c:	23a0      	movle	r3, #160	; 0xa0
 808df8e:	4413      	add	r3, r2
 808df90:	f8d3 8004 	ldr.w	r8, [r3, #4]
 808df94:	4640      	mov	r0, r8
 808df96:	f000 f9f1 	bl	808e37c <strlen>
 808df9a:	4642      	mov	r2, r8
 808df9c:	4bb1      	ldr	r3, [pc, #708]	; (808e264 <strftime+0x850>)
 808df9e:	1939      	adds	r1, r7, r4
 808dfa0:	f8d3 e000 	ldr.w	lr, [r3]
 808dfa4:	4420      	add	r0, r4
 808dfa6:	4284      	cmp	r4, r0
 808dfa8:	f000 81d3 	beq.w	808e352 <strftime+0x93e>
 808dfac:	9b02      	ldr	r3, [sp, #8]
 808dfae:	429c      	cmp	r4, r3
 808dfb0:	f080 81da 	bcs.w	808e368 <strftime+0x954>
 808dfb4:	f899 3000 	ldrb.w	r3, [r9]
 808dfb8:	3401      	adds	r4, #1
 808dfba:	2b50      	cmp	r3, #80	; 0x50
 808dfbc:	7813      	ldrb	r3, [r2, #0]
 808dfbe:	d10a      	bne.n	808dfd6 <strftime+0x5c2>
 808dfc0:	eb0e 0c03 	add.w	ip, lr, r3
 808dfc4:	f89c c001 	ldrb.w	ip, [ip, #1]
 808dfc8:	f00c 0c03 	and.w	ip, ip, #3
 808dfcc:	f1bc 0f01 	cmp.w	ip, #1
 808dfd0:	bf08      	it	eq
 808dfd2:	3320      	addeq	r3, #32
 808dfd4:	b2db      	uxtb	r3, r3
 808dfd6:	f801 3b01 	strb.w	r3, [r1], #1
 808dfda:	3201      	adds	r2, #1
 808dfdc:	e7e3      	b.n	808dfa6 <strftime+0x592>
 808dfde:	686b      	ldr	r3, [r5, #4]
 808dfe0:	4aa1      	ldr	r2, [pc, #644]	; (808e268 <strftime+0x854>)
 808dfe2:	9300      	str	r3, [sp, #0]
 808dfe4:	68ab      	ldr	r3, [r5, #8]
 808dfe6:	e139      	b.n	808e25c <strftime+0x848>
 808dfe8:	6a2b      	ldr	r3, [r5, #32]
 808dfea:	2b00      	cmp	r3, #0
 808dfec:	db17      	blt.n	808e01e <strftime+0x60a>
 808dfee:	f001 fa0b 	bl	808f408 <__tz_lock>
 808dff2:	9b06      	ldr	r3, [sp, #24]
 808dff4:	b91b      	cbnz	r3, 808dffe <strftime+0x5ea>
 808dff6:	f001 fa09 	bl	808f40c <_tzset_unlocked>
 808dffa:	2301      	movs	r3, #1
 808dffc:	9306      	str	r3, [sp, #24]
 808dffe:	f001 fef1 	bl	808fde4 <__gettzinfo>
 808e002:	6a2b      	ldr	r3, [r5, #32]
 808e004:	221c      	movs	r2, #28
 808e006:	2b00      	cmp	r3, #0
 808e008:	bfd4      	ite	le
 808e00a:	2300      	movle	r3, #0
 808e00c:	2301      	movgt	r3, #1
 808e00e:	fb02 0003 	mla	r0, r2, r3, r0
 808e012:	6a03      	ldr	r3, [r0, #32]
 808e014:	f1c3 0800 	rsb	r8, r3, #0
 808e018:	f001 f9f7 	bl	808f40a <__tz_unlock>
 808e01c:	e001      	b.n	808e022 <strftime+0x60e>
 808e01e:	f04f 0800 	mov.w	r8, #0
 808e022:	f8d5 e014 	ldr.w	lr, [r5, #20]
 808e026:	ebc4 0c06 	rsb	ip, r4, r6
 808e02a:	4670      	mov	r0, lr
 808e02c:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
 808e030:	ea4f 71e0 	mov.w	r1, r0, asr #31
 808e034:	f141 33ff 	adc.w	r3, r1, #4294967295
 808e038:	2a00      	cmp	r2, #0
 808e03a:	f173 0b00 	sbcs.w	fp, r3, #0
 808e03e:	eb07 0a04 	add.w	sl, r7, r4
 808e042:	da03      	bge.n	808e04c <strftime+0x638>
 808e044:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
 808e048:	f141 33ff 	adc.w	r3, r1, #4294967295
 808e04c:	0891      	lsrs	r1, r2, #2
 808e04e:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
 808e052:	109b      	asrs	r3, r3, #2
 808e054:	9104      	str	r1, [sp, #16]
 808e056:	9305      	str	r3, [sp, #20]
 808e058:	f10e 31ff 	add.w	r1, lr, #4294967295
 808e05c:	2364      	movs	r3, #100	; 0x64
 808e05e:	fb91 f1f3 	sdiv	r1, r1, r3
 808e062:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 808e066:	1a52      	subs	r2, r2, r1
 808e068:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
 808e06c:	f20e 102b 	addw	r0, lr, #299	; 0x12b
 808e070:	f44f 71c8 	mov.w	r1, #400	; 0x190
 808e074:	fb90 f1f1 	sdiv	r1, r0, r1
 808e078:	1852      	adds	r2, r2, r1
 808e07a:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 808e07e:	f240 116d 	movw	r1, #365	; 0x16d
 808e082:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
 808e086:	fb01 fe0e 	mul.w	lr, r1, lr
 808e08a:	69e9      	ldr	r1, [r5, #28]
 808e08c:	eb12 020e 	adds.w	r2, r2, lr
 808e090:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
 808e094:	1852      	adds	r2, r2, r1
 808e096:	f04f 0e18 	mov.w	lr, #24
 808e09a:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 808e09e:	fba2 010e 	umull	r0, r1, r2, lr
 808e0a2:	fb0e 1103 	mla	r1, lr, r3, r1
 808e0a6:	68ab      	ldr	r3, [r5, #8]
 808e0a8:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
 808e0ac:	18c0      	adds	r0, r0, r3
 808e0ae:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 808e0b2:	fba0 230e 	umull	r2, r3, r0, lr
 808e0b6:	fb0e 3301 	mla	r3, lr, r1, r3
 808e0ba:	6869      	ldr	r1, [r5, #4]
 808e0bc:	1852      	adds	r2, r2, r1
 808e0be:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 808e0c2:	fba2 010e 	umull	r0, r1, r2, lr
 808e0c6:	fb0e 1103 	mla	r1, lr, r3, r1
 808e0ca:	682b      	ldr	r3, [r5, #0]
 808e0cc:	4a67      	ldr	r2, [pc, #412]	; (808e26c <strftime+0x858>)
 808e0ce:	18c0      	adds	r0, r0, r3
 808e0d0:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 808e0d4:	ebb0 0008 	subs.w	r0, r0, r8
 808e0d8:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
 808e0dc:	e9cd 0100 	strd	r0, r1, [sp]
 808e0e0:	4661      	mov	r1, ip
 808e0e2:	4650      	mov	r0, sl
 808e0e4:	f7fb fc68 	bl	80899b8 <sniprintf>
 808e0e8:	e5f9      	b.n	808dcde <strftime+0x2ca>
 808e0ea:	682b      	ldr	r3, [r5, #0]
 808e0ec:	e07e      	b.n	808e1ec <strftime+0x7d8>
 808e0ee:	9b02      	ldr	r3, [sp, #8]
 808e0f0:	429c      	cmp	r4, r3
 808e0f2:	f080 8139 	bcs.w	808e368 <strftime+0x954>
 808e0f6:	2309      	movs	r3, #9
 808e0f8:	e129      	b.n	808e34e <strftime+0x93a>
 808e0fa:	682b      	ldr	r3, [r5, #0]
 808e0fc:	4a5c      	ldr	r2, [pc, #368]	; (808e270 <strftime+0x85c>)
 808e0fe:	9301      	str	r3, [sp, #4]
 808e100:	686b      	ldr	r3, [r5, #4]
 808e102:	9300      	str	r3, [sp, #0]
 808e104:	68ab      	ldr	r3, [r5, #8]
 808e106:	1b31      	subs	r1, r6, r4
 808e108:	1938      	adds	r0, r7, r4
 808e10a:	e60e      	b.n	808dd2a <strftime+0x316>
 808e10c:	9b02      	ldr	r3, [sp, #8]
 808e10e:	429c      	cmp	r4, r3
 808e110:	f080 812a 	bcs.w	808e368 <strftime+0x954>
 808e114:	69ab      	ldr	r3, [r5, #24]
 808e116:	1c62      	adds	r2, r4, #1
 808e118:	b90b      	cbnz	r3, 808e11e <strftime+0x70a>
 808e11a:	2337      	movs	r3, #55	; 0x37
 808e11c:	e000      	b.n	808e120 <strftime+0x70c>
 808e11e:	3330      	adds	r3, #48	; 0x30
 808e120:	553b      	strb	r3, [r7, r4]
 808e122:	4614      	mov	r4, r2
 808e124:	e115      	b.n	808e352 <strftime+0x93e>
 808e126:	69eb      	ldr	r3, [r5, #28]
 808e128:	69aa      	ldr	r2, [r5, #24]
 808e12a:	3307      	adds	r3, #7
 808e12c:	1a9b      	subs	r3, r3, r2
 808e12e:	2207      	movs	r2, #7
 808e130:	fb93 f3f2 	sdiv	r3, r3, r2
 808e134:	e05a      	b.n	808e1ec <strftime+0x7d8>
 808e136:	4628      	mov	r0, r5
 808e138:	f7ff fc0b 	bl	808d952 <iso_year_adjust>
 808e13c:	69aa      	ldr	r2, [r5, #24]
 808e13e:	b10a      	cbz	r2, 808e144 <strftime+0x730>
 808e140:	1e53      	subs	r3, r2, #1
 808e142:	e000      	b.n	808e146 <strftime+0x732>
 808e144:	2306      	movs	r3, #6
 808e146:	2800      	cmp	r0, #0
 808e148:	dc2f      	bgt.n	808e1aa <strftime+0x796>
 808e14a:	69ea      	ldr	r2, [r5, #28]
 808e14c:	d101      	bne.n	808e152 <strftime+0x73e>
 808e14e:	320a      	adds	r2, #10
 808e150:	e03b      	b.n	808e1ca <strftime+0x7b6>
 808e152:	f240 716b 	movw	r1, #1899	; 0x76b
 808e156:	1a9a      	subs	r2, r3, r2
 808e158:	696b      	ldr	r3, [r5, #20]
 808e15a:	2b00      	cmp	r3, #0
 808e15c:	bfb4      	ite	lt
 808e15e:	4608      	movlt	r0, r1
 808e160:	f06f 0064 	mvnge.w	r0, #100	; 0x64
 808e164:	4418      	add	r0, r3
 808e166:	0781      	lsls	r1, r0, #30
 808e168:	d107      	bne.n	808e17a <strftime+0x766>
 808e16a:	f04f 0e64 	mov.w	lr, #100	; 0x64
 808e16e:	4601      	mov	r1, r0
 808e170:	fb90 f0fe 	sdiv	r0, r0, lr
 808e174:	fb0e 1110 	mls	r1, lr, r0, r1
 808e178:	b981      	cbnz	r1, 808e19c <strftime+0x788>
 808e17a:	f240 716b 	movw	r1, #1899	; 0x76b
 808e17e:	2b00      	cmp	r3, #0
 808e180:	bfa8      	it	ge
 808e182:	f06f 0164 	mvnge.w	r1, #100	; 0x64
 808e186:	4419      	add	r1, r3
 808e188:	f44f 73c8 	mov.w	r3, #400	; 0x190
 808e18c:	fb91 f0f3 	sdiv	r0, r1, r3
 808e190:	fb03 1110 	mls	r1, r3, r0, r1
 808e194:	fab1 f181 	clz	r1, r1
 808e198:	0949      	lsrs	r1, r1, #5
 808e19a:	e000      	b.n	808e19e <strftime+0x78a>
 808e19c:	2101      	movs	r1, #1
 808e19e:	1a52      	subs	r2, r2, r1
 808e1a0:	2a05      	cmp	r2, #5
 808e1a2:	bfb4      	ite	lt
 808e1a4:	2335      	movlt	r3, #53	; 0x35
 808e1a6:	2334      	movge	r3, #52	; 0x34
 808e1a8:	e020      	b.n	808e1ec <strftime+0x7d8>
 808e1aa:	2301      	movs	r3, #1
 808e1ac:	e01e      	b.n	808e1ec <strftime+0x7d8>
 808e1ae:	9b02      	ldr	r3, [sp, #8]
 808e1b0:	429c      	cmp	r4, r3
 808e1b2:	f080 80d9 	bcs.w	808e368 <strftime+0x954>
 808e1b6:	69ab      	ldr	r3, [r5, #24]
 808e1b8:	3330      	adds	r3, #48	; 0x30
 808e1ba:	e0c8      	b.n	808e34e <strftime+0x93a>
 808e1bc:	69aa      	ldr	r2, [r5, #24]
 808e1be:	b10a      	cbz	r2, 808e1c4 <strftime+0x7b0>
 808e1c0:	1e53      	subs	r3, r2, #1
 808e1c2:	e000      	b.n	808e1c6 <strftime+0x7b2>
 808e1c4:	2306      	movs	r3, #6
 808e1c6:	69ea      	ldr	r2, [r5, #28]
 808e1c8:	3207      	adds	r2, #7
 808e1ca:	1ad2      	subs	r2, r2, r3
 808e1cc:	2307      	movs	r3, #7
 808e1ce:	fb92 f3f3 	sdiv	r3, r2, r3
 808e1d2:	e00b      	b.n	808e1ec <strftime+0x7d8>
 808e1d4:	6968      	ldr	r0, [r5, #20]
 808e1d6:	2800      	cmp	r0, #0
 808e1d8:	da03      	bge.n	808e1e2 <strftime+0x7ce>
 808e1da:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808e1de:	f001 fa9b 	bl	808f718 <abs>
 808e1e2:	2364      	movs	r3, #100	; 0x64
 808e1e4:	fb90 f2f3 	sdiv	r2, r0, r3
 808e1e8:	fb02 0313 	mls	r3, r2, r3, r0
 808e1ec:	4a21      	ldr	r2, [pc, #132]	; (808e274 <strftime+0x860>)
 808e1ee:	e572      	b.n	808dcd6 <strftime+0x2c2>
 808e1f0:	696b      	ldr	r3, [r5, #20]
 808e1f2:	4a21      	ldr	r2, [pc, #132]	; (808e278 <strftime+0x864>)
 808e1f4:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
 808e1f8:	4293      	cmp	r3, r2
 808e1fa:	da05      	bge.n	808e208 <strftime+0x7f4>
 808e1fc:	232d      	movs	r3, #45	; 0x2d
 808e1fe:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 808e202:	f1cb 0b00 	rsb	fp, fp, #0
 808e206:	e008      	b.n	808e21a <strftime+0x806>
 808e208:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808e20c:	d10d      	bne.n	808e22a <strftime+0x816>
 808e20e:	f242 730f 	movw	r3, #9999	; 0x270f
 808e212:	459b      	cmp	fp, r3
 808e214:	d911      	bls.n	808e23a <strftime+0x826>
 808e216:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 808e21a:	f1b8 0f00 	cmp.w	r8, #0
 808e21e:	d001      	beq.n	808e224 <strftime+0x810>
 808e220:	f108 38ff 	add.w	r8, r8, #4294967295
 808e224:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 808e228:	e000      	b.n	808e22c <strftime+0x818>
 808e22a:	ab0a      	add	r3, sp, #40	; 0x28
 808e22c:	2225      	movs	r2, #37	; 0x25
 808e22e:	701a      	strb	r2, [r3, #0]
 808e230:	f1ba 0f00 	cmp.w	sl, #0
 808e234:	d108      	bne.n	808e248 <strftime+0x834>
 808e236:	1c58      	adds	r0, r3, #1
 808e238:	e009      	b.n	808e24e <strftime+0x83a>
 808e23a:	f1b8 0f00 	cmp.w	r8, #0
 808e23e:	d1f4      	bne.n	808e22a <strftime+0x816>
 808e240:	2325      	movs	r3, #37	; 0x25
 808e242:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 808e246:	ab0a      	add	r3, sp, #40	; 0x28
 808e248:	2230      	movs	r2, #48	; 0x30
 808e24a:	1c98      	adds	r0, r3, #2
 808e24c:	705a      	strb	r2, [r3, #1]
 808e24e:	490b      	ldr	r1, [pc, #44]	; (808e27c <strftime+0x868>)
 808e250:	f7ff fb5c 	bl	808d90c <strcpy>
 808e254:	f8cd b000 	str.w	fp, [sp]
 808e258:	4643      	mov	r3, r8
 808e25a:	aa0a      	add	r2, sp, #40	; 0x28
 808e25c:	1b31      	subs	r1, r6, r4
 808e25e:	1938      	adds	r0, r7, r4
 808e260:	e03f      	b.n	808e2e2 <strftime+0x8ce>
 808e262:	bf00      	nop
 808e264:	200000e0 	.word	0x200000e0
 808e268:	080934e7 	.word	0x080934e7
 808e26c:	080934dd 	.word	0x080934dd
 808e270:	080934e2 	.word	0x080934e2
 808e274:	080934c3 	.word	0x080934c3
 808e278:	fffff894 	.word	0xfffff894
 808e27c:	080934d4 	.word	0x080934d4
 808e280:	6a2b      	ldr	r3, [r5, #32]
 808e282:	2b00      	cmp	r3, #0
 808e284:	db65      	blt.n	808e352 <strftime+0x93e>
 808e286:	f001 f8bf 	bl	808f408 <__tz_lock>
 808e28a:	9b06      	ldr	r3, [sp, #24]
 808e28c:	b91b      	cbnz	r3, 808e296 <strftime+0x882>
 808e28e:	f001 f8bd 	bl	808f40c <_tzset_unlocked>
 808e292:	2301      	movs	r3, #1
 808e294:	9306      	str	r3, [sp, #24]
 808e296:	f001 fda5 	bl	808fde4 <__gettzinfo>
 808e29a:	6a2b      	ldr	r3, [r5, #32]
 808e29c:	221c      	movs	r2, #28
 808e29e:	2b00      	cmp	r3, #0
 808e2a0:	bfd4      	ite	le
 808e2a2:	2300      	movle	r3, #0
 808e2a4:	2301      	movgt	r3, #1
 808e2a6:	fb02 0003 	mla	r0, r2, r3, r0
 808e2aa:	6a03      	ldr	r3, [r0, #32]
 808e2ac:	eb07 0a04 	add.w	sl, r7, r4
 808e2b0:	f1c3 0800 	rsb	r8, r3, #0
 808e2b4:	f001 f8a9 	bl	808f40a <__tz_unlock>
 808e2b8:	233c      	movs	r3, #60	; 0x3c
 808e2ba:	fb98 f0f3 	sdiv	r0, r8, r3
 808e2be:	9307      	str	r3, [sp, #28]
 808e2c0:	f001 fe2a 	bl	808ff18 <labs>
 808e2c4:	9b07      	ldr	r3, [sp, #28]
 808e2c6:	ebc4 0b06 	rsb	fp, r4, r6
 808e2ca:	fb90 f2f3 	sdiv	r2, r0, r3
 808e2ce:	fb02 0013 	mls	r0, r2, r3, r0
 808e2d2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808e2d6:	9000      	str	r0, [sp, #0]
 808e2d8:	fb98 f3f3 	sdiv	r3, r8, r3
 808e2dc:	4659      	mov	r1, fp
 808e2de:	4650      	mov	r0, sl
 808e2e0:	4a24      	ldr	r2, [pc, #144]	; (808e374 <strftime+0x960>)
 808e2e2:	f7fb fb69 	bl	80899b8 <sniprintf>
 808e2e6:	e4fa      	b.n	808dcde <strftime+0x2ca>
 808e2e8:	4404      	add	r4, r0
 808e2ea:	42a6      	cmp	r6, r4
 808e2ec:	d831      	bhi.n	808e352 <strftime+0x93e>
 808e2ee:	e03b      	b.n	808e368 <strftime+0x954>
 808e2f0:	6a2b      	ldr	r3, [r5, #32]
 808e2f2:	2b00      	cmp	r3, #0
 808e2f4:	db2d      	blt.n	808e352 <strftime+0x93e>
 808e2f6:	f001 f887 	bl	808f408 <__tz_lock>
 808e2fa:	9b06      	ldr	r3, [sp, #24]
 808e2fc:	b91b      	cbnz	r3, 808e306 <strftime+0x8f2>
 808e2fe:	f001 f885 	bl	808f40c <_tzset_unlocked>
 808e302:	2301      	movs	r3, #1
 808e304:	9306      	str	r3, [sp, #24]
 808e306:	6a2b      	ldr	r3, [r5, #32]
 808e308:	4a1b      	ldr	r2, [pc, #108]	; (808e378 <strftime+0x964>)
 808e30a:	2b00      	cmp	r3, #0
 808e30c:	bfd4      	ite	le
 808e30e:	2300      	movle	r3, #0
 808e310:	2301      	movgt	r3, #1
 808e312:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808e316:	4640      	mov	r0, r8
 808e318:	f000 f830 	bl	808e37c <strlen>
 808e31c:	f108 38ff 	add.w	r8, r8, #4294967295
 808e320:	193b      	adds	r3, r7, r4
 808e322:	4420      	add	r0, r4
 808e324:	4284      	cmp	r4, r0
 808e326:	d00b      	beq.n	808e340 <strftime+0x92c>
 808e328:	9a02      	ldr	r2, [sp, #8]
 808e32a:	4294      	cmp	r4, r2
 808e32c:	d205      	bcs.n	808e33a <strftime+0x926>
 808e32e:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808e332:	3401      	adds	r4, #1
 808e334:	f803 2b01 	strb.w	r2, [r3], #1
 808e338:	e7f4      	b.n	808e324 <strftime+0x910>
 808e33a:	f001 f866 	bl	808f40a <__tz_unlock>
 808e33e:	e013      	b.n	808e368 <strftime+0x954>
 808e340:	f001 f863 	bl	808f40a <__tz_unlock>
 808e344:	e005      	b.n	808e352 <strftime+0x93e>
 808e346:	9b02      	ldr	r3, [sp, #8]
 808e348:	429c      	cmp	r4, r3
 808e34a:	d20d      	bcs.n	808e368 <strftime+0x954>
 808e34c:	2325      	movs	r3, #37	; 0x25
 808e34e:	553b      	strb	r3, [r7, r4]
 808e350:	3401      	adds	r4, #1
 808e352:	f899 3000 	ldrb.w	r3, [r9]
 808e356:	b11b      	cbz	r3, 808e360 <strftime+0x94c>
 808e358:	f109 0901 	add.w	r9, r9, #1
 808e35c:	f7ff bb69 	b.w	808da32 <strftime+0x1e>
 808e360:	b126      	cbz	r6, 808e36c <strftime+0x958>
 808e362:	2300      	movs	r3, #0
 808e364:	553b      	strb	r3, [r7, r4]
 808e366:	e001      	b.n	808e36c <strftime+0x958>
 808e368:	2000      	movs	r0, #0
 808e36a:	e000      	b.n	808e36e <strftime+0x95a>
 808e36c:	4620      	mov	r0, r4
 808e36e:	b013      	add	sp, #76	; 0x4c
 808e370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808e374:	080934f1 	.word	0x080934f1
 808e378:	20000180 	.word	0x20000180

0808e37c <strlen>:
 808e37c:	4603      	mov	r3, r0
 808e37e:	f813 2b01 	ldrb.w	r2, [r3], #1
 808e382:	2a00      	cmp	r2, #0
 808e384:	d1fb      	bne.n	808e37e <strlen+0x2>
 808e386:	1a18      	subs	r0, r3, r0
 808e388:	3801      	subs	r0, #1
 808e38a:	4770      	bx	lr

0808e38c <strncmp>:
 808e38c:	b530      	push	{r4, r5, lr}
 808e38e:	b182      	cbz	r2, 808e3b2 <strncmp+0x26>
 808e390:	1e45      	subs	r5, r0, #1
 808e392:	3901      	subs	r1, #1
 808e394:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 808e398:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808e39c:	42a3      	cmp	r3, r4
 808e39e:	d106      	bne.n	808e3ae <strncmp+0x22>
 808e3a0:	43ec      	mvns	r4, r5
 808e3a2:	4414      	add	r4, r2
 808e3a4:	42e0      	cmn	r0, r4
 808e3a6:	d001      	beq.n	808e3ac <strncmp+0x20>
 808e3a8:	2b00      	cmp	r3, #0
 808e3aa:	d1f3      	bne.n	808e394 <strncmp+0x8>
 808e3ac:	461c      	mov	r4, r3
 808e3ae:	1b18      	subs	r0, r3, r4
 808e3b0:	bd30      	pop	{r4, r5, pc}
 808e3b2:	4610      	mov	r0, r2
 808e3b4:	bd30      	pop	{r4, r5, pc}

0808e3b6 <strncpy>:
 808e3b6:	4603      	mov	r3, r0
 808e3b8:	b510      	push	{r4, lr}
 808e3ba:	b142      	cbz	r2, 808e3ce <strncpy+0x18>
 808e3bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 808e3c0:	3a01      	subs	r2, #1
 808e3c2:	f803 4b01 	strb.w	r4, [r3], #1
 808e3c6:	2c00      	cmp	r4, #0
 808e3c8:	d1f7      	bne.n	808e3ba <strncpy+0x4>
 808e3ca:	441a      	add	r2, r3
 808e3cc:	e000      	b.n	808e3d0 <strncpy+0x1a>
 808e3ce:	bd10      	pop	{r4, pc}
 808e3d0:	4293      	cmp	r3, r2
 808e3d2:	d002      	beq.n	808e3da <strncpy+0x24>
 808e3d4:	f803 4b01 	strb.w	r4, [r3], #1
 808e3d8:	e7fa      	b.n	808e3d0 <strncpy+0x1a>
 808e3da:	bd10      	pop	{r4, pc}

0808e3dc <strstr>:
 808e3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 808e3de:	7803      	ldrb	r3, [r0, #0]
 808e3e0:	b963      	cbnz	r3, 808e3fc <strstr+0x20>
 808e3e2:	780b      	ldrb	r3, [r1, #0]
 808e3e4:	2b00      	cmp	r3, #0
 808e3e6:	bf18      	it	ne
 808e3e8:	2000      	movne	r0, #0
 808e3ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808e3ec:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 808e3f0:	b162      	cbz	r2, 808e40c <strstr+0x30>
 808e3f2:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 808e3f6:	4630      	mov	r0, r6
 808e3f8:	4297      	cmp	r7, r2
 808e3fa:	d0f7      	beq.n	808e3ec <strstr+0x10>
 808e3fc:	4603      	mov	r3, r0
 808e3fe:	1c46      	adds	r6, r0, #1
 808e400:	7800      	ldrb	r0, [r0, #0]
 808e402:	b110      	cbz	r0, 808e40a <strstr+0x2e>
 808e404:	1e4d      	subs	r5, r1, #1
 808e406:	1e5c      	subs	r4, r3, #1
 808e408:	e7f0      	b.n	808e3ec <strstr+0x10>
 808e40a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808e40c:	4618      	mov	r0, r3
 808e40e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808e410 <sulp>:
 808e410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808e414:	460f      	mov	r7, r1
 808e416:	4690      	mov	r8, r2
 808e418:	f002 f848 	bl	80904ac <__ulp>
 808e41c:	4604      	mov	r4, r0
 808e41e:	460d      	mov	r5, r1
 808e420:	f1b8 0f00 	cmp.w	r8, #0
 808e424:	d011      	beq.n	808e44a <sulp+0x3a>
 808e426:	f3c7 530a 	ubfx	r3, r7, #20, #11
 808e42a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808e42e:	2b00      	cmp	r3, #0
 808e430:	dd0b      	ble.n	808e44a <sulp+0x3a>
 808e432:	051b      	lsls	r3, r3, #20
 808e434:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 808e438:	2400      	movs	r4, #0
 808e43a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 808e43e:	4622      	mov	r2, r4
 808e440:	462b      	mov	r3, r5
 808e442:	f7fe f859 	bl	808c4f8 <__aeabi_dmul>
 808e446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808e44a:	4620      	mov	r0, r4
 808e44c:	4629      	mov	r1, r5
 808e44e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808e452:	0000      	movs	r0, r0
 808e454:	0000      	movs	r0, r0
	...

0808e458 <_strtod_r>:
 808e458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808e45c:	4682      	mov	sl, r0
 808e45e:	460c      	mov	r4, r1
 808e460:	b09d      	sub	sp, #116	; 0x74
 808e462:	2300      	movs	r3, #0
 808e464:	9213      	str	r2, [sp, #76]	; 0x4c
 808e466:	9318      	str	r3, [sp, #96]	; 0x60
 808e468:	f04f 0800 	mov.w	r8, #0
 808e46c:	f04f 0900 	mov.w	r9, #0
 808e470:	9117      	str	r1, [sp, #92]	; 0x5c
 808e472:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808e474:	781a      	ldrb	r2, [r3, #0]
 808e476:	2a0d      	cmp	r2, #13
 808e478:	d805      	bhi.n	808e486 <_strtod_r+0x2e>
 808e47a:	2a09      	cmp	r2, #9
 808e47c:	d213      	bcs.n	808e4a6 <_strtod_r+0x4e>
 808e47e:	2a00      	cmp	r2, #0
 808e480:	f000 81ad 	beq.w	808e7de <_strtod_r+0x386>
 808e484:	e012      	b.n	808e4ac <_strtod_r+0x54>
 808e486:	2a2b      	cmp	r2, #43	; 0x2b
 808e488:	d004      	beq.n	808e494 <_strtod_r+0x3c>
 808e48a:	2a2d      	cmp	r2, #45	; 0x2d
 808e48c:	d004      	beq.n	808e498 <_strtod_r+0x40>
 808e48e:	2a20      	cmp	r2, #32
 808e490:	d10c      	bne.n	808e4ac <_strtod_r+0x54>
 808e492:	e008      	b.n	808e4a6 <_strtod_r+0x4e>
 808e494:	2200      	movs	r2, #0
 808e496:	e000      	b.n	808e49a <_strtod_r+0x42>
 808e498:	2201      	movs	r2, #1
 808e49a:	920c      	str	r2, [sp, #48]	; 0x30
 808e49c:	1c5a      	adds	r2, r3, #1
 808e49e:	9217      	str	r2, [sp, #92]	; 0x5c
 808e4a0:	785b      	ldrb	r3, [r3, #1]
 808e4a2:	b92b      	cbnz	r3, 808e4b0 <_strtod_r+0x58>
 808e4a4:	e19b      	b.n	808e7de <_strtod_r+0x386>
 808e4a6:	3301      	adds	r3, #1
 808e4a8:	9317      	str	r3, [sp, #92]	; 0x5c
 808e4aa:	e7e2      	b.n	808e472 <_strtod_r+0x1a>
 808e4ac:	2300      	movs	r3, #0
 808e4ae:	930c      	str	r3, [sp, #48]	; 0x30
 808e4b0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 808e4b2:	782b      	ldrb	r3, [r5, #0]
 808e4b4:	2b30      	cmp	r3, #48	; 0x30
 808e4b6:	d15c      	bne.n	808e572 <_strtod_r+0x11a>
 808e4b8:	786b      	ldrb	r3, [r5, #1]
 808e4ba:	2b58      	cmp	r3, #88	; 0x58
 808e4bc:	d001      	beq.n	808e4c2 <_strtod_r+0x6a>
 808e4be:	2b78      	cmp	r3, #120	; 0x78
 808e4c0:	d14c      	bne.n	808e55c <_strtod_r+0x104>
 808e4c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808e4c4:	4aa8      	ldr	r2, [pc, #672]	; (808e768 <_strtod_r+0x310>)
 808e4c6:	9301      	str	r3, [sp, #4]
 808e4c8:	ab18      	add	r3, sp, #96	; 0x60
 808e4ca:	9300      	str	r3, [sp, #0]
 808e4cc:	a917      	add	r1, sp, #92	; 0x5c
 808e4ce:	ab19      	add	r3, sp, #100	; 0x64
 808e4d0:	4650      	mov	r0, sl
 808e4d2:	f001 f970 	bl	808f7b6 <__gethex>
 808e4d6:	f010 0607 	ands.w	r6, r0, #7
 808e4da:	4604      	mov	r4, r0
 808e4dc:	f000 8585 	beq.w	808efea <_strtod_r+0xb92>
 808e4e0:	2e06      	cmp	r6, #6
 808e4e2:	d105      	bne.n	808e4f0 <_strtod_r+0x98>
 808e4e4:	3501      	adds	r5, #1
 808e4e6:	2300      	movs	r3, #0
 808e4e8:	9517      	str	r5, [sp, #92]	; 0x5c
 808e4ea:	930c      	str	r3, [sp, #48]	; 0x30
 808e4ec:	f000 bd7d 	b.w	808efea <_strtod_r+0xb92>
 808e4f0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 808e4f2:	b13a      	cbz	r2, 808e504 <_strtod_r+0xac>
 808e4f4:	2135      	movs	r1, #53	; 0x35
 808e4f6:	a81a      	add	r0, sp, #104	; 0x68
 808e4f8:	f002 f8bf 	bl	809067a <__copybits>
 808e4fc:	9918      	ldr	r1, [sp, #96]	; 0x60
 808e4fe:	4650      	mov	r0, sl
 808e500:	f001 fd43 	bl	808ff8a <_Bfree>
 808e504:	2e06      	cmp	r6, #6
 808e506:	d822      	bhi.n	808e54e <_strtod_r+0xf6>
 808e508:	e8df f006 	tbb	[pc, r6]
 808e50c:	18080d04 	.word	0x18080d04
 808e510:	0d1d      	.short	0x0d1d
 808e512:	04          	.byte	0x04
 808e513:	00          	.byte	0x00
 808e514:	f04f 0900 	mov.w	r9, #0
 808e518:	46c8      	mov	r8, r9
 808e51a:	e018      	b.n	808e54e <_strtod_r+0xf6>
 808e51c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 808e520:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 808e524:	e013      	b.n	808e54e <_strtod_r+0xf6>
 808e526:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808e528:	9a19      	ldr	r2, [sp, #100]	; 0x64
 808e52a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 808e52e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 808e532:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 808e536:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 808e53a:	e008      	b.n	808e54e <_strtod_r+0xf6>
 808e53c:	f8df 922c 	ldr.w	r9, [pc, #556]	; 808e76c <_strtod_r+0x314>
 808e540:	f04f 0800 	mov.w	r8, #0
 808e544:	e003      	b.n	808e54e <_strtod_r+0xf6>
 808e546:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 808e54a:	f04f 38ff 	mov.w	r8, #4294967295
 808e54e:	0721      	lsls	r1, r4, #28
 808e550:	f140 854b 	bpl.w	808efea <_strtod_r+0xb92>
 808e554:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 808e558:	f000 bd47 	b.w	808efea <_strtod_r+0xb92>
 808e55c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808e55e:	1c5a      	adds	r2, r3, #1
 808e560:	9217      	str	r2, [sp, #92]	; 0x5c
 808e562:	785b      	ldrb	r3, [r3, #1]
 808e564:	2b30      	cmp	r3, #48	; 0x30
 808e566:	d0f9      	beq.n	808e55c <_strtod_r+0x104>
 808e568:	2b00      	cmp	r3, #0
 808e56a:	f000 853e 	beq.w	808efea <_strtod_r+0xb92>
 808e56e:	2301      	movs	r3, #1
 808e570:	e000      	b.n	808e574 <_strtod_r+0x11c>
 808e572:	2300      	movs	r3, #0
 808e574:	9305      	str	r3, [sp, #20]
 808e576:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808e578:	220a      	movs	r2, #10
 808e57a:	9306      	str	r3, [sp, #24]
 808e57c:	2300      	movs	r3, #0
 808e57e:	469b      	mov	fp, r3
 808e580:	9302      	str	r3, [sp, #8]
 808e582:	9304      	str	r3, [sp, #16]
 808e584:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 808e586:	782e      	ldrb	r6, [r5, #0]
 808e588:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 808e58c:	b2d9      	uxtb	r1, r3
 808e58e:	2909      	cmp	r1, #9
 808e590:	d811      	bhi.n	808e5b6 <_strtod_r+0x15e>
 808e592:	f1bb 0f08 	cmp.w	fp, #8
 808e596:	bfd5      	itete	le
 808e598:	9904      	ldrle	r1, [sp, #16]
 808e59a:	9902      	ldrgt	r1, [sp, #8]
 808e59c:	fb02 3301 	mlale	r3, r2, r1, r3
 808e5a0:	fb02 3301 	mlagt	r3, r2, r1, r3
 808e5a4:	f105 0501 	add.w	r5, r5, #1
 808e5a8:	bfd4      	ite	le
 808e5aa:	9304      	strle	r3, [sp, #16]
 808e5ac:	9302      	strgt	r3, [sp, #8]
 808e5ae:	f10b 0b01 	add.w	fp, fp, #1
 808e5b2:	9517      	str	r5, [sp, #92]	; 0x5c
 808e5b4:	e7e6      	b.n	808e584 <_strtod_r+0x12c>
 808e5b6:	4650      	mov	r0, sl
 808e5b8:	f7ff f942 	bl	808d840 <_localeconv_r>
 808e5bc:	6807      	ldr	r7, [r0, #0]
 808e5be:	4650      	mov	r0, sl
 808e5c0:	f7ff f93e 	bl	808d840 <_localeconv_r>
 808e5c4:	6800      	ldr	r0, [r0, #0]
 808e5c6:	f7ff fed9 	bl	808e37c <strlen>
 808e5ca:	4639      	mov	r1, r7
 808e5cc:	4602      	mov	r2, r0
 808e5ce:	4628      	mov	r0, r5
 808e5d0:	f7ff fedc 	bl	808e38c <strncmp>
 808e5d4:	4607      	mov	r7, r0
 808e5d6:	b128      	cbz	r0, 808e5e4 <_strtod_r+0x18c>
 808e5d8:	2000      	movs	r0, #0
 808e5da:	4633      	mov	r3, r6
 808e5dc:	465d      	mov	r5, fp
 808e5de:	4602      	mov	r2, r0
 808e5e0:	4601      	mov	r1, r0
 808e5e2:	e05a      	b.n	808e69a <_strtod_r+0x242>
 808e5e4:	4650      	mov	r0, sl
 808e5e6:	f7ff f92b 	bl	808d840 <_localeconv_r>
 808e5ea:	6800      	ldr	r0, [r0, #0]
 808e5ec:	f7ff fec6 	bl	808e37c <strlen>
 808e5f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808e5f2:	181a      	adds	r2, r3, r0
 808e5f4:	9217      	str	r2, [sp, #92]	; 0x5c
 808e5f6:	5c1b      	ldrb	r3, [r3, r0]
 808e5f8:	f1bb 0f00 	cmp.w	fp, #0
 808e5fc:	d145      	bne.n	808e68a <_strtod_r+0x232>
 808e5fe:	4658      	mov	r0, fp
 808e600:	2b30      	cmp	r3, #48	; 0x30
 808e602:	d105      	bne.n	808e610 <_strtod_r+0x1b8>
 808e604:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808e606:	3001      	adds	r0, #1
 808e608:	1c5a      	adds	r2, r3, #1
 808e60a:	9217      	str	r2, [sp, #92]	; 0x5c
 808e60c:	785b      	ldrb	r3, [r3, #1]
 808e60e:	e7f7      	b.n	808e600 <_strtod_r+0x1a8>
 808e610:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 808e614:	2a08      	cmp	r2, #8
 808e616:	d846      	bhi.n	808e6a6 <_strtod_r+0x24e>
 808e618:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 808e61a:	9206      	str	r2, [sp, #24]
 808e61c:	4602      	mov	r2, r0
 808e61e:	2000      	movs	r0, #0
 808e620:	4605      	mov	r5, r0
 808e622:	3b30      	subs	r3, #48	; 0x30
 808e624:	f100 0101 	add.w	r1, r0, #1
 808e628:	d029      	beq.n	808e67e <_strtod_r+0x226>
 808e62a:	440a      	add	r2, r1
 808e62c:	4629      	mov	r1, r5
 808e62e:	eb05 0c00 	add.w	ip, r5, r0
 808e632:	260a      	movs	r6, #10
 808e634:	4561      	cmp	r1, ip
 808e636:	d00f      	beq.n	808e658 <_strtod_r+0x200>
 808e638:	3101      	adds	r1, #1
 808e63a:	f101 3eff 	add.w	lr, r1, #4294967295
 808e63e:	f1be 0f08 	cmp.w	lr, #8
 808e642:	dc03      	bgt.n	808e64c <_strtod_r+0x1f4>
 808e644:	9f04      	ldr	r7, [sp, #16]
 808e646:	4377      	muls	r7, r6
 808e648:	9704      	str	r7, [sp, #16]
 808e64a:	e7f3      	b.n	808e634 <_strtod_r+0x1dc>
 808e64c:	2910      	cmp	r1, #16
 808e64e:	bfde      	ittt	le
 808e650:	9f02      	ldrle	r7, [sp, #8]
 808e652:	4377      	mulle	r7, r6
 808e654:	9702      	strle	r7, [sp, #8]
 808e656:	e7ed      	b.n	808e634 <_strtod_r+0x1dc>
 808e658:	4428      	add	r0, r5
 808e65a:	2808      	cmp	r0, #8
 808e65c:	f100 0501 	add.w	r5, r0, #1
 808e660:	dc05      	bgt.n	808e66e <_strtod_r+0x216>
 808e662:	9804      	ldr	r0, [sp, #16]
 808e664:	210a      	movs	r1, #10
 808e666:	fb01 3300 	mla	r3, r1, r0, r3
 808e66a:	9304      	str	r3, [sp, #16]
 808e66c:	e006      	b.n	808e67c <_strtod_r+0x224>
 808e66e:	2d10      	cmp	r5, #16
 808e670:	bfdf      	itttt	le
 808e672:	9802      	ldrle	r0, [sp, #8]
 808e674:	210a      	movle	r1, #10
 808e676:	fb01 3300 	mlale	r3, r1, r0, r3
 808e67a:	9302      	strle	r3, [sp, #8]
 808e67c:	2100      	movs	r1, #0
 808e67e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808e680:	1c58      	adds	r0, r3, #1
 808e682:	9017      	str	r0, [sp, #92]	; 0x5c
 808e684:	785b      	ldrb	r3, [r3, #1]
 808e686:	4608      	mov	r0, r1
 808e688:	e002      	b.n	808e690 <_strtod_r+0x238>
 808e68a:	465d      	mov	r5, fp
 808e68c:	4638      	mov	r0, r7
 808e68e:	463a      	mov	r2, r7
 808e690:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 808e694:	2909      	cmp	r1, #9
 808e696:	d9c4      	bls.n	808e622 <_strtod_r+0x1ca>
 808e698:	2101      	movs	r1, #1
 808e69a:	2b65      	cmp	r3, #101	; 0x65
 808e69c:	d001      	beq.n	808e6a2 <_strtod_r+0x24a>
 808e69e:	2b45      	cmp	r3, #69	; 0x45
 808e6a0:	d14f      	bne.n	808e742 <_strtod_r+0x2ea>
 808e6a2:	b96d      	cbnz	r5, 808e6c0 <_strtod_r+0x268>
 808e6a4:	e004      	b.n	808e6b0 <_strtod_r+0x258>
 808e6a6:	2b65      	cmp	r3, #101	; 0x65
 808e6a8:	f040 84ad 	bne.w	808f006 <_strtod_r+0xbae>
 808e6ac:	2200      	movs	r2, #0
 808e6ae:	2101      	movs	r1, #1
 808e6b0:	b928      	cbnz	r0, 808e6be <_strtod_r+0x266>
 808e6b2:	9b05      	ldr	r3, [sp, #20]
 808e6b4:	2b00      	cmp	r3, #0
 808e6b6:	f000 8092 	beq.w	808e7de <_strtod_r+0x386>
 808e6ba:	4605      	mov	r5, r0
 808e6bc:	e000      	b.n	808e6c0 <_strtod_r+0x268>
 808e6be:	2500      	movs	r5, #0
 808e6c0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 808e6c2:	1c63      	adds	r3, r4, #1
 808e6c4:	9317      	str	r3, [sp, #92]	; 0x5c
 808e6c6:	7863      	ldrb	r3, [r4, #1]
 808e6c8:	2b2b      	cmp	r3, #43	; 0x2b
 808e6ca:	d006      	beq.n	808e6da <_strtod_r+0x282>
 808e6cc:	2b2d      	cmp	r3, #45	; 0x2d
 808e6ce:	d002      	beq.n	808e6d6 <_strtod_r+0x27e>
 808e6d0:	2600      	movs	r6, #0
 808e6d2:	9603      	str	r6, [sp, #12]
 808e6d4:	e006      	b.n	808e6e4 <_strtod_r+0x28c>
 808e6d6:	2301      	movs	r3, #1
 808e6d8:	e000      	b.n	808e6dc <_strtod_r+0x284>
 808e6da:	2300      	movs	r3, #0
 808e6dc:	9303      	str	r3, [sp, #12]
 808e6de:	1ca3      	adds	r3, r4, #2
 808e6e0:	9317      	str	r3, [sp, #92]	; 0x5c
 808e6e2:	78a3      	ldrb	r3, [r4, #2]
 808e6e4:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 808e6e8:	2e09      	cmp	r6, #9
 808e6ea:	d829      	bhi.n	808e740 <_strtod_r+0x2e8>
 808e6ec:	2b30      	cmp	r3, #48	; 0x30
 808e6ee:	d104      	bne.n	808e6fa <_strtod_r+0x2a2>
 808e6f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808e6f2:	1c5e      	adds	r6, r3, #1
 808e6f4:	9617      	str	r6, [sp, #92]	; 0x5c
 808e6f6:	785b      	ldrb	r3, [r3, #1]
 808e6f8:	e7f8      	b.n	808e6ec <_strtod_r+0x294>
 808e6fa:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 808e6fe:	2e08      	cmp	r6, #8
 808e700:	d81f      	bhi.n	808e742 <_strtod_r+0x2ea>
 808e702:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 808e706:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808e708:	461f      	mov	r7, r3
 808e70a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808e70c:	1c5e      	adds	r6, r3, #1
 808e70e:	9617      	str	r6, [sp, #92]	; 0x5c
 808e710:	785b      	ldrb	r3, [r3, #1]
 808e712:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 808e716:	f1bc 0f09 	cmp.w	ip, #9
 808e71a:	d805      	bhi.n	808e728 <_strtod_r+0x2d0>
 808e71c:	260a      	movs	r6, #10
 808e71e:	fb06 3e0e 	mla	lr, r6, lr, r3
 808e722:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 808e726:	e7f0      	b.n	808e70a <_strtod_r+0x2b2>
 808e728:	1bf6      	subs	r6, r6, r7
 808e72a:	2e08      	cmp	r6, #8
 808e72c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 808e730:	dc02      	bgt.n	808e738 <_strtod_r+0x2e0>
 808e732:	4576      	cmp	r6, lr
 808e734:	bfa8      	it	ge
 808e736:	4676      	movge	r6, lr
 808e738:	9f03      	ldr	r7, [sp, #12]
 808e73a:	b11f      	cbz	r7, 808e744 <_strtod_r+0x2ec>
 808e73c:	4276      	negs	r6, r6
 808e73e:	e001      	b.n	808e744 <_strtod_r+0x2ec>
 808e740:	9417      	str	r4, [sp, #92]	; 0x5c
 808e742:	2600      	movs	r6, #0
 808e744:	2d00      	cmp	r5, #0
 808e746:	d152      	bne.n	808e7ee <_strtod_r+0x396>
 808e748:	2800      	cmp	r0, #0
 808e74a:	f040 844e 	bne.w	808efea <_strtod_r+0xb92>
 808e74e:	9a05      	ldr	r2, [sp, #20]
 808e750:	2a00      	cmp	r2, #0
 808e752:	f040 844a 	bne.w	808efea <_strtod_r+0xb92>
 808e756:	2900      	cmp	r1, #0
 808e758:	d141      	bne.n	808e7de <_strtod_r+0x386>
 808e75a:	2b4e      	cmp	r3, #78	; 0x4e
 808e75c:	d020      	beq.n	808e7a0 <_strtod_r+0x348>
 808e75e:	dc07      	bgt.n	808e770 <_strtod_r+0x318>
 808e760:	2b49      	cmp	r3, #73	; 0x49
 808e762:	d00a      	beq.n	808e77a <_strtod_r+0x322>
 808e764:	e03b      	b.n	808e7de <_strtod_r+0x386>
 808e766:	bf00      	nop
 808e768:	08093500 	.word	0x08093500
 808e76c:	7ff00000 	.word	0x7ff00000
 808e770:	2b69      	cmp	r3, #105	; 0x69
 808e772:	d002      	beq.n	808e77a <_strtod_r+0x322>
 808e774:	2b6e      	cmp	r3, #110	; 0x6e
 808e776:	d013      	beq.n	808e7a0 <_strtod_r+0x348>
 808e778:	e031      	b.n	808e7de <_strtod_r+0x386>
 808e77a:	49aa      	ldr	r1, [pc, #680]	; (808ea24 <_strtod_r+0x5cc>)
 808e77c:	a817      	add	r0, sp, #92	; 0x5c
 808e77e:	f001 fa4b 	bl	808fc18 <__match>
 808e782:	b360      	cbz	r0, 808e7de <_strtod_r+0x386>
 808e784:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808e786:	49a8      	ldr	r1, [pc, #672]	; (808ea28 <_strtod_r+0x5d0>)
 808e788:	3b01      	subs	r3, #1
 808e78a:	a817      	add	r0, sp, #92	; 0x5c
 808e78c:	9317      	str	r3, [sp, #92]	; 0x5c
 808e78e:	f001 fa43 	bl	808fc18 <__match>
 808e792:	b910      	cbnz	r0, 808e79a <_strtod_r+0x342>
 808e794:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808e796:	3301      	adds	r3, #1
 808e798:	9317      	str	r3, [sp, #92]	; 0x5c
 808e79a:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 808ea44 <_strtod_r+0x5ec>
 808e79e:	e01a      	b.n	808e7d6 <_strtod_r+0x37e>
 808e7a0:	49a2      	ldr	r1, [pc, #648]	; (808ea2c <_strtod_r+0x5d4>)
 808e7a2:	a817      	add	r0, sp, #92	; 0x5c
 808e7a4:	f001 fa38 	bl	808fc18 <__match>
 808e7a8:	b1c8      	cbz	r0, 808e7de <_strtod_r+0x386>
 808e7aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808e7ac:	781b      	ldrb	r3, [r3, #0]
 808e7ae:	2b28      	cmp	r3, #40	; 0x28
 808e7b0:	d10f      	bne.n	808e7d2 <_strtod_r+0x37a>
 808e7b2:	aa1a      	add	r2, sp, #104	; 0x68
 808e7b4:	499e      	ldr	r1, [pc, #632]	; (808ea30 <_strtod_r+0x5d8>)
 808e7b6:	a817      	add	r0, sp, #92	; 0x5c
 808e7b8:	f001 fa41 	bl	808fc3e <__hexnan>
 808e7bc:	2805      	cmp	r0, #5
 808e7be:	d108      	bne.n	808e7d2 <_strtod_r+0x37a>
 808e7c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808e7c2:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 808e7c6:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 808e7ca:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 808e7ce:	f000 bc0c 	b.w	808efea <_strtod_r+0xb92>
 808e7d2:	f8df 9274 	ldr.w	r9, [pc, #628]	; 808ea48 <_strtod_r+0x5f0>
 808e7d6:	f04f 0800 	mov.w	r8, #0
 808e7da:	f000 bc06 	b.w	808efea <_strtod_r+0xb92>
 808e7de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 808e7e0:	9417      	str	r4, [sp, #92]	; 0x5c
 808e7e2:	2b00      	cmp	r3, #0
 808e7e4:	f000 840c 	beq.w	808f000 <_strtod_r+0xba8>
 808e7e8:	2300      	movs	r3, #0
 808e7ea:	930c      	str	r3, [sp, #48]	; 0x30
 808e7ec:	e3ff      	b.n	808efee <_strtod_r+0xb96>
 808e7ee:	462c      	mov	r4, r5
 808e7f0:	f1bb 0f00 	cmp.w	fp, #0
 808e7f4:	bf08      	it	eq
 808e7f6:	46ab      	moveq	fp, r5
 808e7f8:	9804      	ldr	r0, [sp, #16]
 808e7fa:	2d10      	cmp	r5, #16
 808e7fc:	bfa8      	it	ge
 808e7fe:	2410      	movge	r4, #16
 808e800:	1ab7      	subs	r7, r6, r2
 808e802:	f7fd fe03 	bl	808c40c <__aeabi_ui2d>
 808e806:	2c09      	cmp	r4, #9
 808e808:	4680      	mov	r8, r0
 808e80a:	4689      	mov	r9, r1
 808e80c:	dd13      	ble.n	808e836 <_strtod_r+0x3de>
 808e80e:	4b89      	ldr	r3, [pc, #548]	; (808ea34 <_strtod_r+0x5dc>)
 808e810:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 808e814:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 808e818:	f7fd fe6e 	bl	808c4f8 <__aeabi_dmul>
 808e81c:	4680      	mov	r8, r0
 808e81e:	9802      	ldr	r0, [sp, #8]
 808e820:	4689      	mov	r9, r1
 808e822:	f7fd fdf3 	bl	808c40c <__aeabi_ui2d>
 808e826:	4602      	mov	r2, r0
 808e828:	460b      	mov	r3, r1
 808e82a:	4640      	mov	r0, r8
 808e82c:	4649      	mov	r1, r9
 808e82e:	f7fd fcb1 	bl	808c194 <__adddf3>
 808e832:	4680      	mov	r8, r0
 808e834:	4689      	mov	r9, r1
 808e836:	2d0f      	cmp	r5, #15
 808e838:	dc33      	bgt.n	808e8a2 <_strtod_r+0x44a>
 808e83a:	2f00      	cmp	r7, #0
 808e83c:	f000 83d5 	beq.w	808efea <_strtod_r+0xb92>
 808e840:	dd22      	ble.n	808e888 <_strtod_r+0x430>
 808e842:	2f16      	cmp	r7, #22
 808e844:	dc07      	bgt.n	808e856 <_strtod_r+0x3fe>
 808e846:	4d7b      	ldr	r5, [pc, #492]	; (808ea34 <_strtod_r+0x5dc>)
 808e848:	4642      	mov	r2, r8
 808e84a:	eb05 01c7 	add.w	r1, r5, r7, lsl #3
 808e84e:	464b      	mov	r3, r9
 808e850:	e9d1 0100 	ldrd	r0, r1, [r1]
 808e854:	e013      	b.n	808e87e <_strtod_r+0x426>
 808e856:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 808e85a:	429f      	cmp	r7, r3
 808e85c:	dc21      	bgt.n	808e8a2 <_strtod_r+0x44a>
 808e85e:	4c75      	ldr	r4, [pc, #468]	; (808ea34 <_strtod_r+0x5dc>)
 808e860:	f1c5 050f 	rsb	r5, r5, #15
 808e864:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 808e868:	1b7d      	subs	r5, r7, r5
 808e86a:	4642      	mov	r2, r8
 808e86c:	e9d1 0100 	ldrd	r0, r1, [r1]
 808e870:	464b      	mov	r3, r9
 808e872:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 808e876:	f7fd fe3f 	bl	808c4f8 <__aeabi_dmul>
 808e87a:	e9d4 2300 	ldrd	r2, r3, [r4]
 808e87e:	f7fd fe3b 	bl	808c4f8 <__aeabi_dmul>
 808e882:	4680      	mov	r8, r0
 808e884:	4689      	mov	r9, r1
 808e886:	e3b0      	b.n	808efea <_strtod_r+0xb92>
 808e888:	f117 0f16 	cmn.w	r7, #22
 808e88c:	db09      	blt.n	808e8a2 <_strtod_r+0x44a>
 808e88e:	4d69      	ldr	r5, [pc, #420]	; (808ea34 <_strtod_r+0x5dc>)
 808e890:	4640      	mov	r0, r8
 808e892:	eba5 03c7 	sub.w	r3, r5, r7, lsl #3
 808e896:	e9d3 2300 	ldrd	r2, r3, [r3]
 808e89a:	4649      	mov	r1, r9
 808e89c:	f7fd ff56 	bl	808c74c <__aeabi_ddiv>
 808e8a0:	e7ef      	b.n	808e882 <_strtod_r+0x42a>
 808e8a2:	1b2c      	subs	r4, r5, r4
 808e8a4:	443c      	add	r4, r7
 808e8a6:	2c00      	cmp	r4, #0
 808e8a8:	dd5d      	ble.n	808e966 <_strtod_r+0x50e>
 808e8aa:	f014 010f 	ands.w	r1, r4, #15
 808e8ae:	d00a      	beq.n	808e8c6 <_strtod_r+0x46e>
 808e8b0:	4b60      	ldr	r3, [pc, #384]	; (808ea34 <_strtod_r+0x5dc>)
 808e8b2:	4642      	mov	r2, r8
 808e8b4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 808e8b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 808e8bc:	464b      	mov	r3, r9
 808e8be:	f7fd fe1b 	bl	808c4f8 <__aeabi_dmul>
 808e8c2:	4680      	mov	r8, r0
 808e8c4:	4689      	mov	r9, r1
 808e8c6:	f034 040f 	bics.w	r4, r4, #15
 808e8ca:	f000 80c1 	beq.w	808ea50 <_strtod_r+0x5f8>
 808e8ce:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 808e8d2:	dd0f      	ble.n	808e8f4 <_strtod_r+0x49c>
 808e8d4:	f04f 0b00 	mov.w	fp, #0
 808e8d8:	f8cd b008 	str.w	fp, [sp, #8]
 808e8dc:	f8cd b014 	str.w	fp, [sp, #20]
 808e8e0:	f8cd b010 	str.w	fp, [sp, #16]
 808e8e4:	2322      	movs	r3, #34	; 0x22
 808e8e6:	f8ca 3000 	str.w	r3, [sl]
 808e8ea:	f8df 9158 	ldr.w	r9, [pc, #344]	; 808ea44 <_strtod_r+0x5ec>
 808e8ee:	f04f 0800 	mov.w	r8, #0
 808e8f2:	e189      	b.n	808ec08 <_strtod_r+0x7b0>
 808e8f4:	4640      	mov	r0, r8
 808e8f6:	4649      	mov	r1, r9
 808e8f8:	2300      	movs	r3, #0
 808e8fa:	4e4f      	ldr	r6, [pc, #316]	; (808ea38 <_strtod_r+0x5e0>)
 808e8fc:	1124      	asrs	r4, r4, #4
 808e8fe:	9302      	str	r3, [sp, #8]
 808e900:	2c01      	cmp	r4, #1
 808e902:	dd0c      	ble.n	808e91e <_strtod_r+0x4c6>
 808e904:	07e2      	lsls	r2, r4, #31
 808e906:	d504      	bpl.n	808e912 <_strtod_r+0x4ba>
 808e908:	e9d6 2300 	ldrd	r2, r3, [r6]
 808e90c:	f7fd fdf4 	bl	808c4f8 <__aeabi_dmul>
 808e910:	2301      	movs	r3, #1
 808e912:	9a02      	ldr	r2, [sp, #8]
 808e914:	1064      	asrs	r4, r4, #1
 808e916:	3201      	adds	r2, #1
 808e918:	9202      	str	r2, [sp, #8]
 808e91a:	3608      	adds	r6, #8
 808e91c:	e7f0      	b.n	808e900 <_strtod_r+0x4a8>
 808e91e:	b10b      	cbz	r3, 808e924 <_strtod_r+0x4cc>
 808e920:	4680      	mov	r8, r0
 808e922:	4689      	mov	r9, r1
 808e924:	4b44      	ldr	r3, [pc, #272]	; (808ea38 <_strtod_r+0x5e0>)
 808e926:	9a02      	ldr	r2, [sp, #8]
 808e928:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 808e92c:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 808e930:	e9d1 0100 	ldrd	r0, r1, [r1]
 808e934:	4642      	mov	r2, r8
 808e936:	464b      	mov	r3, r9
 808e938:	f7fd fdde 	bl	808c4f8 <__aeabi_dmul>
 808e93c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 808e940:	4689      	mov	r9, r1
 808e942:	460a      	mov	r2, r1
 808e944:	0d1b      	lsrs	r3, r3, #20
 808e946:	493d      	ldr	r1, [pc, #244]	; (808ea3c <_strtod_r+0x5e4>)
 808e948:	051b      	lsls	r3, r3, #20
 808e94a:	428b      	cmp	r3, r1
 808e94c:	4680      	mov	r8, r0
 808e94e:	d8c1      	bhi.n	808e8d4 <_strtod_r+0x47c>
 808e950:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 808e954:	428b      	cmp	r3, r1
 808e956:	bf86      	itte	hi
 808e958:	f8df 90f0 	ldrhi.w	r9, [pc, #240]	; 808ea4c <_strtod_r+0x5f4>
 808e95c:	f04f 38ff 	movhi.w	r8, #4294967295
 808e960:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 808e964:	e074      	b.n	808ea50 <_strtod_r+0x5f8>
 808e966:	d073      	beq.n	808ea50 <_strtod_r+0x5f8>
 808e968:	4264      	negs	r4, r4
 808e96a:	f014 020f 	ands.w	r2, r4, #15
 808e96e:	d00a      	beq.n	808e986 <_strtod_r+0x52e>
 808e970:	4b30      	ldr	r3, [pc, #192]	; (808ea34 <_strtod_r+0x5dc>)
 808e972:	4640      	mov	r0, r8
 808e974:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 808e978:	4649      	mov	r1, r9
 808e97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808e97e:	f7fd fee5 	bl	808c74c <__aeabi_ddiv>
 808e982:	4680      	mov	r8, r0
 808e984:	4689      	mov	r9, r1
 808e986:	1124      	asrs	r4, r4, #4
 808e988:	d062      	beq.n	808ea50 <_strtod_r+0x5f8>
 808e98a:	2c1f      	cmp	r4, #31
 808e98c:	dd08      	ble.n	808e9a0 <_strtod_r+0x548>
 808e98e:	f04f 0b00 	mov.w	fp, #0
 808e992:	f8cd b008 	str.w	fp, [sp, #8]
 808e996:	f8cd b014 	str.w	fp, [sp, #20]
 808e99a:	f8cd b010 	str.w	fp, [sp, #16]
 808e99e:	e12c      	b.n	808ebfa <_strtod_r+0x7a2>
 808e9a0:	4640      	mov	r0, r8
 808e9a2:	4649      	mov	r1, r9
 808e9a4:	f014 0f10 	tst.w	r4, #16
 808e9a8:	bf0c      	ite	eq
 808e9aa:	2300      	moveq	r3, #0
 808e9ac:	236a      	movne	r3, #106	; 0x6a
 808e9ae:	4e24      	ldr	r6, [pc, #144]	; (808ea40 <_strtod_r+0x5e8>)
 808e9b0:	9303      	str	r3, [sp, #12]
 808e9b2:	2300      	movs	r3, #0
 808e9b4:	2c00      	cmp	r4, #0
 808e9b6:	dd09      	ble.n	808e9cc <_strtod_r+0x574>
 808e9b8:	07e2      	lsls	r2, r4, #31
 808e9ba:	d504      	bpl.n	808e9c6 <_strtod_r+0x56e>
 808e9bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 808e9c0:	f7fd fd9a 	bl	808c4f8 <__aeabi_dmul>
 808e9c4:	2301      	movs	r3, #1
 808e9c6:	1064      	asrs	r4, r4, #1
 808e9c8:	3608      	adds	r6, #8
 808e9ca:	e7f3      	b.n	808e9b4 <_strtod_r+0x55c>
 808e9cc:	b10b      	cbz	r3, 808e9d2 <_strtod_r+0x57a>
 808e9ce:	4680      	mov	r8, r0
 808e9d0:	4689      	mov	r9, r1
 808e9d2:	9b03      	ldr	r3, [sp, #12]
 808e9d4:	b1eb      	cbz	r3, 808ea12 <_strtod_r+0x5ba>
 808e9d6:	f3c9 530a 	ubfx	r3, r9, #20, #11
 808e9da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808e9de:	2b00      	cmp	r3, #0
 808e9e0:	4649      	mov	r1, r9
 808e9e2:	dd16      	ble.n	808ea12 <_strtod_r+0x5ba>
 808e9e4:	2b1f      	cmp	r3, #31
 808e9e6:	dd0e      	ble.n	808ea06 <_strtod_r+0x5ae>
 808e9e8:	2b34      	cmp	r3, #52	; 0x34
 808e9ea:	bfde      	ittt	le
 808e9ec:	3b20      	suble	r3, #32
 808e9ee:	f04f 32ff 	movle.w	r2, #4294967295
 808e9f2:	fa02 f303 	lslle.w	r3, r2, r3
 808e9f6:	f04f 0800 	mov.w	r8, #0
 808e9fa:	bfcc      	ite	gt
 808e9fc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 808ea00:	ea03 0901 	andle.w	r9, r3, r1
 808ea04:	e005      	b.n	808ea12 <_strtod_r+0x5ba>
 808ea06:	f04f 32ff 	mov.w	r2, #4294967295
 808ea0a:	fa02 f303 	lsl.w	r3, r2, r3
 808ea0e:	ea03 0808 	and.w	r8, r3, r8
 808ea12:	2200      	movs	r2, #0
 808ea14:	2300      	movs	r3, #0
 808ea16:	4640      	mov	r0, r8
 808ea18:	4649      	mov	r1, r9
 808ea1a:	f7fd ffd5 	bl	808c9c8 <__aeabi_dcmpeq>
 808ea1e:	2800      	cmp	r0, #0
 808ea20:	d1b5      	bne.n	808e98e <_strtod_r+0x536>
 808ea22:	e017      	b.n	808ea54 <_strtod_r+0x5fc>
 808ea24:	0809302d 	.word	0x0809302d
 808ea28:	08093514 	.word	0x08093514
 808ea2c:	08093561 	.word	0x08093561
 808ea30:	0809351c 	.word	0x0809351c
 808ea34:	080937b8 	.word	0x080937b8
 808ea38:	08093880 	.word	0x08093880
 808ea3c:	7ca00000 	.word	0x7ca00000
 808ea40:	08093530 	.word	0x08093530
 808ea44:	7ff00000 	.word	0x7ff00000
 808ea48:	fff80000 	.word	0xfff80000
 808ea4c:	7fefffff 	.word	0x7fefffff
 808ea50:	2300      	movs	r3, #0
 808ea52:	9303      	str	r3, [sp, #12]
 808ea54:	9b04      	ldr	r3, [sp, #16]
 808ea56:	465a      	mov	r2, fp
 808ea58:	9300      	str	r3, [sp, #0]
 808ea5a:	9906      	ldr	r1, [sp, #24]
 808ea5c:	462b      	mov	r3, r5
 808ea5e:	4650      	mov	r0, sl
 808ea60:	f001 fae5 	bl	809002e <__s2b>
 808ea64:	9005      	str	r0, [sp, #20]
 808ea66:	2800      	cmp	r0, #0
 808ea68:	f43f af34 	beq.w	808e8d4 <_strtod_r+0x47c>
 808ea6c:	2f00      	cmp	r7, #0
 808ea6e:	f1c7 0300 	rsb	r3, r7, #0
 808ea72:	bfa8      	it	ge
 808ea74:	2300      	movge	r3, #0
 808ea76:	930d      	str	r3, [sp, #52]	; 0x34
 808ea78:	f04f 0b00 	mov.w	fp, #0
 808ea7c:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 808ea80:	9312      	str	r3, [sp, #72]	; 0x48
 808ea82:	f8cd b008 	str.w	fp, [sp, #8]
 808ea86:	9b05      	ldr	r3, [sp, #20]
 808ea88:	4650      	mov	r0, sl
 808ea8a:	6859      	ldr	r1, [r3, #4]
 808ea8c:	f001 fa48 	bl	808ff20 <_Balloc>
 808ea90:	9004      	str	r0, [sp, #16]
 808ea92:	2800      	cmp	r0, #0
 808ea94:	f43f af26 	beq.w	808e8e4 <_strtod_r+0x48c>
 808ea98:	9b05      	ldr	r3, [sp, #20]
 808ea9a:	300c      	adds	r0, #12
 808ea9c:	691a      	ldr	r2, [r3, #16]
 808ea9e:	f103 010c 	add.w	r1, r3, #12
 808eaa2:	3202      	adds	r2, #2
 808eaa4:	0092      	lsls	r2, r2, #2
 808eaa6:	f7fe fede 	bl	808d866 <memcpy>
 808eaaa:	ab1a      	add	r3, sp, #104	; 0x68
 808eaac:	9301      	str	r3, [sp, #4]
 808eaae:	ab19      	add	r3, sp, #100	; 0x64
 808eab0:	9300      	str	r3, [sp, #0]
 808eab2:	4642      	mov	r2, r8
 808eab4:	464b      	mov	r3, r9
 808eab6:	4650      	mov	r0, sl
 808eab8:	e9cd 8908 	strd	r8, r9, [sp, #32]
 808eabc:	f001 fd67 	bl	809058e <__d2b>
 808eac0:	9018      	str	r0, [sp, #96]	; 0x60
 808eac2:	2800      	cmp	r0, #0
 808eac4:	f43f af0e 	beq.w	808e8e4 <_strtod_r+0x48c>
 808eac8:	2101      	movs	r1, #1
 808eaca:	4650      	mov	r0, sl
 808eacc:	f001 fb3a 	bl	8090144 <__i2b>
 808ead0:	9002      	str	r0, [sp, #8]
 808ead2:	2800      	cmp	r0, #0
 808ead4:	f43f af06 	beq.w	808e8e4 <_strtod_r+0x48c>
 808ead8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 808eada:	9903      	ldr	r1, [sp, #12]
 808eadc:	2b00      	cmp	r3, #0
 808eade:	bfac      	ite	ge
 808eae0:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
 808eae2:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 808eae4:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 808eae6:	bfac      	ite	ge
 808eae8:	18d6      	addge	r6, r2, r3
 808eaea:	1ad2      	sublt	r2, r2, r3
 808eaec:	eba3 0301 	sub.w	r3, r3, r1
 808eaf0:	4423      	add	r3, r4
 808eaf2:	49b1      	ldr	r1, [pc, #708]	; (808edb8 <_strtod_r+0x960>)
 808eaf4:	f103 33ff 	add.w	r3, r3, #4294967295
 808eaf8:	bfac      	ite	ge
 808eafa:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 808eafc:	9e0d      	ldrlt	r6, [sp, #52]	; 0x34
 808eafe:	428b      	cmp	r3, r1
 808eb00:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
 808eb04:	f280 8085 	bge.w	808ec12 <_strtod_r+0x7ba>
 808eb08:	1ac9      	subs	r1, r1, r3
 808eb0a:	291f      	cmp	r1, #31
 808eb0c:	bfc8      	it	gt
 808eb0e:	4dab      	ldrgt	r5, [pc, #684]	; (808edbc <_strtod_r+0x964>)
 808eb10:	f04f 0701 	mov.w	r7, #1
 808eb14:	bfd4      	ite	le
 808eb16:	fa07 f301 	lslle.w	r3, r7, r1
 808eb1a:	1aed      	subgt	r5, r5, r3
 808eb1c:	eba4 0401 	sub.w	r4, r4, r1
 808eb20:	bfd9      	ittee	le
 808eb22:	9307      	strle	r3, [sp, #28]
 808eb24:	2500      	movle	r5, #0
 808eb26:	fa07 f505 	lslgt.w	r5, r7, r5
 808eb2a:	9707      	strgt	r7, [sp, #28]
 808eb2c:	1937      	adds	r7, r6, r4
 808eb2e:	9b03      	ldr	r3, [sp, #12]
 808eb30:	42be      	cmp	r6, r7
 808eb32:	4414      	add	r4, r2
 808eb34:	441c      	add	r4, r3
 808eb36:	4633      	mov	r3, r6
 808eb38:	bfa8      	it	ge
 808eb3a:	463b      	movge	r3, r7
 808eb3c:	42a3      	cmp	r3, r4
 808eb3e:	bfa8      	it	ge
 808eb40:	4623      	movge	r3, r4
 808eb42:	2b00      	cmp	r3, #0
 808eb44:	bfc2      	ittt	gt
 808eb46:	1aff      	subgt	r7, r7, r3
 808eb48:	1ae4      	subgt	r4, r4, r3
 808eb4a:	1af6      	subgt	r6, r6, r3
 808eb4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808eb4e:	2b00      	cmp	r3, #0
 808eb50:	d163      	bne.n	808ec1a <_strtod_r+0x7c2>
 808eb52:	2f00      	cmp	r7, #0
 808eb54:	dc7a      	bgt.n	808ec4c <_strtod_r+0x7f4>
 808eb56:	9b12      	ldr	r3, [sp, #72]	; 0x48
 808eb58:	2b00      	cmp	r3, #0
 808eb5a:	f040 8081 	bne.w	808ec60 <_strtod_r+0x808>
 808eb5e:	2c00      	cmp	r4, #0
 808eb60:	f300 8088 	bgt.w	808ec74 <_strtod_r+0x81c>
 808eb64:	2e00      	cmp	r6, #0
 808eb66:	f300 808f 	bgt.w	808ec88 <_strtod_r+0x830>
 808eb6a:	9a04      	ldr	r2, [sp, #16]
 808eb6c:	9918      	ldr	r1, [sp, #96]	; 0x60
 808eb6e:	4650      	mov	r0, sl
 808eb70:	f001 fc3d 	bl	80903ee <__mdiff>
 808eb74:	4683      	mov	fp, r0
 808eb76:	2800      	cmp	r0, #0
 808eb78:	f43f aeb4 	beq.w	808e8e4 <_strtod_r+0x48c>
 808eb7c:	68c3      	ldr	r3, [r0, #12]
 808eb7e:	2400      	movs	r4, #0
 808eb80:	60c4      	str	r4, [r0, #12]
 808eb82:	9902      	ldr	r1, [sp, #8]
 808eb84:	9306      	str	r3, [sp, #24]
 808eb86:	f001 fc16 	bl	80903b6 <__mcmp>
 808eb8a:	42a0      	cmp	r0, r4
 808eb8c:	f280 808b 	bge.w	808eca6 <_strtod_r+0x84e>
 808eb90:	9b06      	ldr	r3, [sp, #24]
 808eb92:	2b00      	cmp	r3, #0
 808eb94:	f040 8202 	bne.w	808ef9c <_strtod_r+0xb44>
 808eb98:	f1b8 0f00 	cmp.w	r8, #0
 808eb9c:	f040 81fe 	bne.w	808ef9c <_strtod_r+0xb44>
 808eba0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808eba4:	2b00      	cmp	r3, #0
 808eba6:	f040 81f9 	bne.w	808ef9c <_strtod_r+0xb44>
 808ebaa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808ebae:	0d1b      	lsrs	r3, r3, #20
 808ebb0:	051b      	lsls	r3, r3, #20
 808ebb2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 808ebb6:	f240 81f1 	bls.w	808ef9c <_strtod_r+0xb44>
 808ebba:	f8db 3014 	ldr.w	r3, [fp, #20]
 808ebbe:	2b00      	cmp	r3, #0
 808ebc0:	d06c      	beq.n	808ec9c <_strtod_r+0x844>
 808ebc2:	4659      	mov	r1, fp
 808ebc4:	2201      	movs	r2, #1
 808ebc6:	4650      	mov	r0, sl
 808ebc8:	f001 fba4 	bl	8090314 <__lshift>
 808ebcc:	9902      	ldr	r1, [sp, #8]
 808ebce:	4683      	mov	fp, r0
 808ebd0:	f001 fbf1 	bl	80903b6 <__mcmp>
 808ebd4:	2800      	cmp	r0, #0
 808ebd6:	f340 81e1 	ble.w	808ef9c <_strtod_r+0xb44>
 808ebda:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808ebde:	9a03      	ldr	r2, [sp, #12]
 808ebe0:	0d1b      	lsrs	r3, r3, #20
 808ebe2:	051b      	lsls	r3, r3, #20
 808ebe4:	2a00      	cmp	r2, #0
 808ebe6:	f000 808d 	beq.w	808ed04 <_strtod_r+0x8ac>
 808ebea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 808ebee:	f300 8089 	bgt.w	808ed04 <_strtod_r+0x8ac>
 808ebf2:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 808ebf6:	f300 81d3 	bgt.w	808efa0 <_strtod_r+0xb48>
 808ebfa:	2322      	movs	r3, #34	; 0x22
 808ebfc:	f04f 0800 	mov.w	r8, #0
 808ec00:	f04f 0900 	mov.w	r9, #0
 808ec04:	f8ca 3000 	str.w	r3, [sl]
 808ec08:	9b05      	ldr	r3, [sp, #20]
 808ec0a:	2b00      	cmp	r3, #0
 808ec0c:	f040 81d9 	bne.w	808efc2 <_strtod_r+0xb6a>
 808ec10:	e1eb      	b.n	808efea <_strtod_r+0xb92>
 808ec12:	2301      	movs	r3, #1
 808ec14:	2500      	movs	r5, #0
 808ec16:	9307      	str	r3, [sp, #28]
 808ec18:	e788      	b.n	808eb2c <_strtod_r+0x6d4>
 808ec1a:	461a      	mov	r2, r3
 808ec1c:	9902      	ldr	r1, [sp, #8]
 808ec1e:	4650      	mov	r0, sl
 808ec20:	f001 fb2a 	bl	8090278 <__pow5mult>
 808ec24:	9002      	str	r0, [sp, #8]
 808ec26:	2800      	cmp	r0, #0
 808ec28:	f43f ae5c 	beq.w	808e8e4 <_strtod_r+0x48c>
 808ec2c:	4601      	mov	r1, r0
 808ec2e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 808ec30:	4650      	mov	r0, sl
 808ec32:	f001 fa90 	bl	8090156 <__multiply>
 808ec36:	9006      	str	r0, [sp, #24]
 808ec38:	2800      	cmp	r0, #0
 808ec3a:	f43f ae53 	beq.w	808e8e4 <_strtod_r+0x48c>
 808ec3e:	9918      	ldr	r1, [sp, #96]	; 0x60
 808ec40:	4650      	mov	r0, sl
 808ec42:	f001 f9a2 	bl	808ff8a <_Bfree>
 808ec46:	9b06      	ldr	r3, [sp, #24]
 808ec48:	9318      	str	r3, [sp, #96]	; 0x60
 808ec4a:	e782      	b.n	808eb52 <_strtod_r+0x6fa>
 808ec4c:	463a      	mov	r2, r7
 808ec4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 808ec50:	4650      	mov	r0, sl
 808ec52:	f001 fb5f 	bl	8090314 <__lshift>
 808ec56:	9018      	str	r0, [sp, #96]	; 0x60
 808ec58:	2800      	cmp	r0, #0
 808ec5a:	f47f af7c 	bne.w	808eb56 <_strtod_r+0x6fe>
 808ec5e:	e641      	b.n	808e8e4 <_strtod_r+0x48c>
 808ec60:	9a12      	ldr	r2, [sp, #72]	; 0x48
 808ec62:	9904      	ldr	r1, [sp, #16]
 808ec64:	4650      	mov	r0, sl
 808ec66:	f001 fb07 	bl	8090278 <__pow5mult>
 808ec6a:	9004      	str	r0, [sp, #16]
 808ec6c:	2800      	cmp	r0, #0
 808ec6e:	f47f af76 	bne.w	808eb5e <_strtod_r+0x706>
 808ec72:	e637      	b.n	808e8e4 <_strtod_r+0x48c>
 808ec74:	4622      	mov	r2, r4
 808ec76:	9904      	ldr	r1, [sp, #16]
 808ec78:	4650      	mov	r0, sl
 808ec7a:	f001 fb4b 	bl	8090314 <__lshift>
 808ec7e:	9004      	str	r0, [sp, #16]
 808ec80:	2800      	cmp	r0, #0
 808ec82:	f47f af6f 	bne.w	808eb64 <_strtod_r+0x70c>
 808ec86:	e62d      	b.n	808e8e4 <_strtod_r+0x48c>
 808ec88:	4632      	mov	r2, r6
 808ec8a:	9902      	ldr	r1, [sp, #8]
 808ec8c:	4650      	mov	r0, sl
 808ec8e:	f001 fb41 	bl	8090314 <__lshift>
 808ec92:	9002      	str	r0, [sp, #8]
 808ec94:	2800      	cmp	r0, #0
 808ec96:	f47f af68 	bne.w	808eb6a <_strtod_r+0x712>
 808ec9a:	e623      	b.n	808e8e4 <_strtod_r+0x48c>
 808ec9c:	f8db 3010 	ldr.w	r3, [fp, #16]
 808eca0:	2b01      	cmp	r3, #1
 808eca2:	dc8e      	bgt.n	808ebc2 <_strtod_r+0x76a>
 808eca4:	e17a      	b.n	808ef9c <_strtod_r+0xb44>
 808eca6:	d161      	bne.n	808ed6c <_strtod_r+0x914>
 808eca8:	9a06      	ldr	r2, [sp, #24]
 808ecaa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808ecae:	b322      	cbz	r2, 808ecfa <_strtod_r+0x8a2>
 808ecb0:	4943      	ldr	r1, [pc, #268]	; (808edc0 <_strtod_r+0x968>)
 808ecb2:	464a      	mov	r2, r9
 808ecb4:	428b      	cmp	r3, r1
 808ecb6:	d12e      	bne.n	808ed16 <_strtod_r+0x8be>
 808ecb8:	9b03      	ldr	r3, [sp, #12]
 808ecba:	4641      	mov	r1, r8
 808ecbc:	b163      	cbz	r3, 808ecd8 <_strtod_r+0x880>
 808ecbe:	4b41      	ldr	r3, [pc, #260]	; (808edc4 <_strtod_r+0x96c>)
 808ecc0:	4013      	ands	r3, r2
 808ecc2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 808ecc6:	d807      	bhi.n	808ecd8 <_strtod_r+0x880>
 808ecc8:	0d1b      	lsrs	r3, r3, #20
 808ecca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808ecce:	f04f 30ff 	mov.w	r0, #4294967295
 808ecd2:	fa00 f303 	lsl.w	r3, r0, r3
 808ecd6:	e001      	b.n	808ecdc <_strtod_r+0x884>
 808ecd8:	f04f 33ff 	mov.w	r3, #4294967295
 808ecdc:	428b      	cmp	r3, r1
 808ecde:	d11a      	bne.n	808ed16 <_strtod_r+0x8be>
 808ece0:	4939      	ldr	r1, [pc, #228]	; (808edc8 <_strtod_r+0x970>)
 808ece2:	428a      	cmp	r2, r1
 808ece4:	d102      	bne.n	808ecec <_strtod_r+0x894>
 808ece6:	3301      	adds	r3, #1
 808ece8:	f43f adfc 	beq.w	808e8e4 <_strtod_r+0x48c>
 808ecec:	4b35      	ldr	r3, [pc, #212]	; (808edc4 <_strtod_r+0x96c>)
 808ecee:	f04f 0800 	mov.w	r8, #0
 808ecf2:	4013      	ands	r3, r2
 808ecf4:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 808ecf8:	e150      	b.n	808ef9c <_strtod_r+0xb44>
 808ecfa:	b963      	cbnz	r3, 808ed16 <_strtod_r+0x8be>
 808ecfc:	f1b8 0f00 	cmp.w	r8, #0
 808ed00:	d109      	bne.n	808ed16 <_strtod_r+0x8be>
 808ed02:	e76a      	b.n	808ebda <_strtod_r+0x782>
 808ed04:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 808ed08:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 808ed0c:	f04f 38ff 	mov.w	r8, #4294967295
 808ed10:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 808ed14:	e142      	b.n	808ef9c <_strtod_r+0xb44>
 808ed16:	b115      	cbz	r5, 808ed1e <_strtod_r+0x8c6>
 808ed18:	ea15 0f09 	tst.w	r5, r9
 808ed1c:	e002      	b.n	808ed24 <_strtod_r+0x8cc>
 808ed1e:	9b07      	ldr	r3, [sp, #28]
 808ed20:	ea13 0f08 	tst.w	r3, r8
 808ed24:	f000 813a 	beq.w	808ef9c <_strtod_r+0xb44>
 808ed28:	9b06      	ldr	r3, [sp, #24]
 808ed2a:	9a03      	ldr	r2, [sp, #12]
 808ed2c:	4640      	mov	r0, r8
 808ed2e:	4649      	mov	r1, r9
 808ed30:	b153      	cbz	r3, 808ed48 <_strtod_r+0x8f0>
 808ed32:	f7ff fb6d 	bl	808e410 <sulp>
 808ed36:	4602      	mov	r2, r0
 808ed38:	460b      	mov	r3, r1
 808ed3a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808ed3e:	f7fd fa29 	bl	808c194 <__adddf3>
 808ed42:	4680      	mov	r8, r0
 808ed44:	4689      	mov	r9, r1
 808ed46:	e129      	b.n	808ef9c <_strtod_r+0xb44>
 808ed48:	f7ff fb62 	bl	808e410 <sulp>
 808ed4c:	4602      	mov	r2, r0
 808ed4e:	460b      	mov	r3, r1
 808ed50:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808ed54:	f7fd fa1c 	bl	808c190 <__aeabi_dsub>
 808ed58:	2200      	movs	r2, #0
 808ed5a:	2300      	movs	r3, #0
 808ed5c:	4680      	mov	r8, r0
 808ed5e:	4689      	mov	r9, r1
 808ed60:	f7fd fe32 	bl	808c9c8 <__aeabi_dcmpeq>
 808ed64:	2800      	cmp	r0, #0
 808ed66:	f47f af48 	bne.w	808ebfa <_strtod_r+0x7a2>
 808ed6a:	e117      	b.n	808ef9c <_strtod_r+0xb44>
 808ed6c:	9902      	ldr	r1, [sp, #8]
 808ed6e:	4658      	mov	r0, fp
 808ed70:	f001 fc5b 	bl	809062a <__ratio>
 808ed74:	2200      	movs	r2, #0
 808ed76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 808ed7a:	4606      	mov	r6, r0
 808ed7c:	460f      	mov	r7, r1
 808ed7e:	f7fd fe37 	bl	808c9f0 <__aeabi_dcmple>
 808ed82:	2800      	cmp	r0, #0
 808ed84:	d03f      	beq.n	808ee06 <_strtod_r+0x9ae>
 808ed86:	9b06      	ldr	r3, [sp, #24]
 808ed88:	b113      	cbz	r3, 808ed90 <_strtod_r+0x938>
 808ed8a:	2600      	movs	r6, #0
 808ed8c:	4f0f      	ldr	r7, [pc, #60]	; (808edcc <_strtod_r+0x974>)
 808ed8e:	e010      	b.n	808edb2 <_strtod_r+0x95a>
 808ed90:	f1b8 0f00 	cmp.w	r8, #0
 808ed94:	d103      	bne.n	808ed9e <_strtod_r+0x946>
 808ed96:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808ed9a:	b93b      	cbnz	r3, 808edac <_strtod_r+0x954>
 808ed9c:	e01a      	b.n	808edd4 <_strtod_r+0x97c>
 808ed9e:	f1b8 0f01 	cmp.w	r8, #1
 808eda2:	d103      	bne.n	808edac <_strtod_r+0x954>
 808eda4:	f1b9 0f00 	cmp.w	r9, #0
 808eda8:	f43f af27 	beq.w	808ebfa <_strtod_r+0x7a2>
 808edac:	4f08      	ldr	r7, [pc, #32]	; (808edd0 <_strtod_r+0x978>)
 808edae:	2600      	movs	r6, #0
 808edb0:	2400      	movs	r4, #0
 808edb2:	4d06      	ldr	r5, [pc, #24]	; (808edcc <_strtod_r+0x974>)
 808edb4:	e03c      	b.n	808ee30 <_strtod_r+0x9d8>
 808edb6:	bf00      	nop
 808edb8:	fffffc02 	.word	0xfffffc02
 808edbc:	fffffbe2 	.word	0xfffffbe2
 808edc0:	000fffff 	.word	0x000fffff
 808edc4:	7ff00000 	.word	0x7ff00000
 808edc8:	7fefffff 	.word	0x7fefffff
 808edcc:	3ff00000 	.word	0x3ff00000
 808edd0:	bff00000 	.word	0xbff00000
 808edd4:	2200      	movs	r2, #0
 808edd6:	4b9a      	ldr	r3, [pc, #616]	; (808f040 <_strtod_r+0xbe8>)
 808edd8:	4630      	mov	r0, r6
 808edda:	4639      	mov	r1, r7
 808eddc:	f7fd fdfe 	bl	808c9dc <__aeabi_dcmplt>
 808ede0:	b940      	cbnz	r0, 808edf4 <_strtod_r+0x99c>
 808ede2:	2200      	movs	r2, #0
 808ede4:	4b97      	ldr	r3, [pc, #604]	; (808f044 <_strtod_r+0xbec>)
 808ede6:	4630      	mov	r0, r6
 808ede8:	4639      	mov	r1, r7
 808edea:	f7fd fb85 	bl	808c4f8 <__aeabi_dmul>
 808edee:	4604      	mov	r4, r0
 808edf0:	460d      	mov	r5, r1
 808edf2:	e001      	b.n	808edf8 <_strtod_r+0x9a0>
 808edf4:	9c06      	ldr	r4, [sp, #24]
 808edf6:	4d93      	ldr	r5, [pc, #588]	; (808f044 <_strtod_r+0xbec>)
 808edf8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 808edfc:	9414      	str	r4, [sp, #80]	; 0x50
 808edfe:	9315      	str	r3, [sp, #84]	; 0x54
 808ee00:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 808ee04:	e014      	b.n	808ee30 <_strtod_r+0x9d8>
 808ee06:	4b8f      	ldr	r3, [pc, #572]	; (808f044 <_strtod_r+0xbec>)
 808ee08:	2200      	movs	r2, #0
 808ee0a:	4630      	mov	r0, r6
 808ee0c:	4639      	mov	r1, r7
 808ee0e:	f7fd fb73 	bl	808c4f8 <__aeabi_dmul>
 808ee12:	9b06      	ldr	r3, [sp, #24]
 808ee14:	4604      	mov	r4, r0
 808ee16:	460d      	mov	r5, r1
 808ee18:	b923      	cbnz	r3, 808ee24 <_strtod_r+0x9cc>
 808ee1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 808ee1e:	900e      	str	r0, [sp, #56]	; 0x38
 808ee20:	930f      	str	r3, [sp, #60]	; 0x3c
 808ee22:	e003      	b.n	808ee2c <_strtod_r+0x9d4>
 808ee24:	4602      	mov	r2, r0
 808ee26:	460b      	mov	r3, r1
 808ee28:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 808ee2c:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 808ee30:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808ee34:	0d1b      	lsrs	r3, r3, #20
 808ee36:	051b      	lsls	r3, r3, #20
 808ee38:	9307      	str	r3, [sp, #28]
 808ee3a:	9a07      	ldr	r2, [sp, #28]
 808ee3c:	4b82      	ldr	r3, [pc, #520]	; (808f048 <_strtod_r+0xbf0>)
 808ee3e:	429a      	cmp	r2, r3
 808ee40:	d12b      	bne.n	808ee9a <_strtod_r+0xa42>
 808ee42:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 808ee46:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 808ee4a:	4640      	mov	r0, r8
 808ee4c:	4649      	mov	r1, r9
 808ee4e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 808ee52:	f001 fb2b 	bl	80904ac <__ulp>
 808ee56:	4602      	mov	r2, r0
 808ee58:	460b      	mov	r3, r1
 808ee5a:	4630      	mov	r0, r6
 808ee5c:	4639      	mov	r1, r7
 808ee5e:	f7fd fb4b 	bl	808c4f8 <__aeabi_dmul>
 808ee62:	4642      	mov	r2, r8
 808ee64:	464b      	mov	r3, r9
 808ee66:	f7fd f995 	bl	808c194 <__adddf3>
 808ee6a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 808ee6e:	0d1b      	lsrs	r3, r3, #20
 808ee70:	4a76      	ldr	r2, [pc, #472]	; (808f04c <_strtod_r+0xbf4>)
 808ee72:	051b      	lsls	r3, r3, #20
 808ee74:	4293      	cmp	r3, r2
 808ee76:	4680      	mov	r8, r0
 808ee78:	d90c      	bls.n	808ee94 <_strtod_r+0xa3c>
 808ee7a:	4b75      	ldr	r3, [pc, #468]	; (808f050 <_strtod_r+0xbf8>)
 808ee7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 808ee7e:	429a      	cmp	r2, r3
 808ee80:	d103      	bne.n	808ee8a <_strtod_r+0xa32>
 808ee82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808ee84:	3301      	adds	r3, #1
 808ee86:	f43f ad2d 	beq.w	808e8e4 <_strtod_r+0x48c>
 808ee8a:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 808f050 <_strtod_r+0xbf8>
 808ee8e:	f04f 38ff 	mov.w	r8, #4294967295
 808ee92:	e072      	b.n	808ef7a <_strtod_r+0xb22>
 808ee94:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 808ee98:	e039      	b.n	808ef0e <_strtod_r+0xab6>
 808ee9a:	9b03      	ldr	r3, [sp, #12]
 808ee9c:	b33b      	cbz	r3, 808eeee <_strtod_r+0xa96>
 808ee9e:	9b07      	ldr	r3, [sp, #28]
 808eea0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 808eea4:	d823      	bhi.n	808eeee <_strtod_r+0xa96>
 808eea6:	a35e      	add	r3, pc, #376	; (adr r3, 808f020 <_strtod_r+0xbc8>)
 808eea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 808eeac:	4620      	mov	r0, r4
 808eeae:	4629      	mov	r1, r5
 808eeb0:	f7fd fd9e 	bl	808c9f0 <__aeabi_dcmple>
 808eeb4:	b1b8      	cbz	r0, 808eee6 <_strtod_r+0xa8e>
 808eeb6:	4629      	mov	r1, r5
 808eeb8:	4620      	mov	r0, r4
 808eeba:	f7fd fdf5 	bl	808caa8 <__aeabi_d2uiz>
 808eebe:	2800      	cmp	r0, #0
 808eec0:	bf08      	it	eq
 808eec2:	2001      	moveq	r0, #1
 808eec4:	f7fd faa2 	bl	808c40c <__aeabi_ui2d>
 808eec8:	9b06      	ldr	r3, [sp, #24]
 808eeca:	4604      	mov	r4, r0
 808eecc:	460d      	mov	r5, r1
 808eece:	b923      	cbnz	r3, 808eeda <_strtod_r+0xa82>
 808eed0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 808eed4:	9010      	str	r0, [sp, #64]	; 0x40
 808eed6:	9311      	str	r3, [sp, #68]	; 0x44
 808eed8:	e003      	b.n	808eee2 <_strtod_r+0xa8a>
 808eeda:	4602      	mov	r2, r0
 808eedc:	460b      	mov	r3, r1
 808eede:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 808eee2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 808eee6:	9a07      	ldr	r2, [sp, #28]
 808eee8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 808eeec:	1a9f      	subs	r7, r3, r2
 808eeee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808eef2:	f001 fadb 	bl	80904ac <__ulp>
 808eef6:	4602      	mov	r2, r0
 808eef8:	460b      	mov	r3, r1
 808eefa:	4630      	mov	r0, r6
 808eefc:	4639      	mov	r1, r7
 808eefe:	f7fd fafb 	bl	808c4f8 <__aeabi_dmul>
 808ef02:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 808ef06:	f7fd f945 	bl	808c194 <__adddf3>
 808ef0a:	4680      	mov	r8, r0
 808ef0c:	4689      	mov	r9, r1
 808ef0e:	9b03      	ldr	r3, [sp, #12]
 808ef10:	bb9b      	cbnz	r3, 808ef7a <_strtod_r+0xb22>
 808ef12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808ef16:	0d1b      	lsrs	r3, r3, #20
 808ef18:	9a07      	ldr	r2, [sp, #28]
 808ef1a:	051b      	lsls	r3, r3, #20
 808ef1c:	429a      	cmp	r2, r3
 808ef1e:	464e      	mov	r6, r9
 808ef20:	d12b      	bne.n	808ef7a <_strtod_r+0xb22>
 808ef22:	4629      	mov	r1, r5
 808ef24:	4620      	mov	r0, r4
 808ef26:	f7fd fd97 	bl	808ca58 <__aeabi_d2iz>
 808ef2a:	f7fd fa7f 	bl	808c42c <__aeabi_i2d>
 808ef2e:	460b      	mov	r3, r1
 808ef30:	4602      	mov	r2, r0
 808ef32:	4629      	mov	r1, r5
 808ef34:	4620      	mov	r0, r4
 808ef36:	f7fd f92b 	bl	808c190 <__aeabi_dsub>
 808ef3a:	9b06      	ldr	r3, [sp, #24]
 808ef3c:	4604      	mov	r4, r0
 808ef3e:	460d      	mov	r5, r1
 808ef40:	b92b      	cbnz	r3, 808ef4e <_strtod_r+0xaf6>
 808ef42:	f1b8 0f00 	cmp.w	r8, #0
 808ef46:	d102      	bne.n	808ef4e <_strtod_r+0xaf6>
 808ef48:	f3c9 0613 	ubfx	r6, r9, #0, #20
 808ef4c:	b17e      	cbz	r6, 808ef6e <_strtod_r+0xb16>
 808ef4e:	a336      	add	r3, pc, #216	; (adr r3, 808f028 <_strtod_r+0xbd0>)
 808ef50:	e9d3 2300 	ldrd	r2, r3, [r3]
 808ef54:	4620      	mov	r0, r4
 808ef56:	4629      	mov	r1, r5
 808ef58:	f7fd fd40 	bl	808c9dc <__aeabi_dcmplt>
 808ef5c:	bb88      	cbnz	r0, 808efc2 <_strtod_r+0xb6a>
 808ef5e:	a334      	add	r3, pc, #208	; (adr r3, 808f030 <_strtod_r+0xbd8>)
 808ef60:	e9d3 2300 	ldrd	r2, r3, [r3]
 808ef64:	4620      	mov	r0, r4
 808ef66:	4629      	mov	r1, r5
 808ef68:	f7fd fd56 	bl	808ca18 <__aeabi_dcmpgt>
 808ef6c:	e004      	b.n	808ef78 <_strtod_r+0xb20>
 808ef6e:	a332      	add	r3, pc, #200	; (adr r3, 808f038 <_strtod_r+0xbe0>)
 808ef70:	e9d3 2300 	ldrd	r2, r3, [r3]
 808ef74:	f7fd fd32 	bl	808c9dc <__aeabi_dcmplt>
 808ef78:	bb18      	cbnz	r0, 808efc2 <_strtod_r+0xb6a>
 808ef7a:	9918      	ldr	r1, [sp, #96]	; 0x60
 808ef7c:	4650      	mov	r0, sl
 808ef7e:	f001 f804 	bl	808ff8a <_Bfree>
 808ef82:	9904      	ldr	r1, [sp, #16]
 808ef84:	4650      	mov	r0, sl
 808ef86:	f001 f800 	bl	808ff8a <_Bfree>
 808ef8a:	9902      	ldr	r1, [sp, #8]
 808ef8c:	4650      	mov	r0, sl
 808ef8e:	f000 fffc 	bl	808ff8a <_Bfree>
 808ef92:	4659      	mov	r1, fp
 808ef94:	4650      	mov	r0, sl
 808ef96:	f000 fff8 	bl	808ff8a <_Bfree>
 808ef9a:	e574      	b.n	808ea86 <_strtod_r+0x62e>
 808ef9c:	9b03      	ldr	r3, [sp, #12]
 808ef9e:	b183      	cbz	r3, 808efc2 <_strtod_r+0xb6a>
 808efa0:	4b2c      	ldr	r3, [pc, #176]	; (808f054 <_strtod_r+0xbfc>)
 808efa2:	4640      	mov	r0, r8
 808efa4:	930b      	str	r3, [sp, #44]	; 0x2c
 808efa6:	2300      	movs	r3, #0
 808efa8:	930a      	str	r3, [sp, #40]	; 0x28
 808efaa:	4649      	mov	r1, r9
 808efac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 808efb0:	f7fd faa2 	bl	808c4f8 <__aeabi_dmul>
 808efb4:	4680      	mov	r8, r0
 808efb6:	4689      	mov	r9, r1
 808efb8:	b919      	cbnz	r1, 808efc2 <_strtod_r+0xb6a>
 808efba:	b910      	cbnz	r0, 808efc2 <_strtod_r+0xb6a>
 808efbc:	2322      	movs	r3, #34	; 0x22
 808efbe:	f8ca 3000 	str.w	r3, [sl]
 808efc2:	9918      	ldr	r1, [sp, #96]	; 0x60
 808efc4:	4650      	mov	r0, sl
 808efc6:	f000 ffe0 	bl	808ff8a <_Bfree>
 808efca:	9904      	ldr	r1, [sp, #16]
 808efcc:	4650      	mov	r0, sl
 808efce:	f000 ffdc 	bl	808ff8a <_Bfree>
 808efd2:	9902      	ldr	r1, [sp, #8]
 808efd4:	4650      	mov	r0, sl
 808efd6:	f000 ffd8 	bl	808ff8a <_Bfree>
 808efda:	9905      	ldr	r1, [sp, #20]
 808efdc:	4650      	mov	r0, sl
 808efde:	f000 ffd4 	bl	808ff8a <_Bfree>
 808efe2:	4659      	mov	r1, fp
 808efe4:	4650      	mov	r0, sl
 808efe6:	f000 ffd0 	bl	808ff8a <_Bfree>
 808efea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 808efec:	b113      	cbz	r3, 808eff4 <_strtod_r+0xb9c>
 808efee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808eff0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 808eff2:	6013      	str	r3, [r2, #0]
 808eff4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808eff6:	b11b      	cbz	r3, 808f000 <_strtod_r+0xba8>
 808eff8:	4642      	mov	r2, r8
 808effa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 808effe:	e007      	b.n	808f010 <_strtod_r+0xbb8>
 808f000:	4642      	mov	r2, r8
 808f002:	464b      	mov	r3, r9
 808f004:	e004      	b.n	808f010 <_strtod_r+0xbb8>
 808f006:	2500      	movs	r5, #0
 808f008:	462a      	mov	r2, r5
 808f00a:	2101      	movs	r1, #1
 808f00c:	f7ff bb47 	b.w	808e69e <_strtod_r+0x246>
 808f010:	4610      	mov	r0, r2
 808f012:	4619      	mov	r1, r3
 808f014:	b01d      	add	sp, #116	; 0x74
 808f016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808f01a:	bf00      	nop
 808f01c:	f3af 8000 	nop.w
 808f020:	ffc00000 	.word	0xffc00000
 808f024:	41dfffff 	.word	0x41dfffff
 808f028:	94a03595 	.word	0x94a03595
 808f02c:	3fdfffff 	.word	0x3fdfffff
 808f030:	35afe535 	.word	0x35afe535
 808f034:	3fe00000 	.word	0x3fe00000
 808f038:	94a03595 	.word	0x94a03595
 808f03c:	3fcfffff 	.word	0x3fcfffff
 808f040:	3ff00000 	.word	0x3ff00000
 808f044:	3fe00000 	.word	0x3fe00000
 808f048:	7fe00000 	.word	0x7fe00000
 808f04c:	7c9fffff 	.word	0x7c9fffff
 808f050:	7fefffff 	.word	0x7fefffff
 808f054:	39500000 	.word	0x39500000

0808f058 <strtod>:
 808f058:	4b02      	ldr	r3, [pc, #8]	; (808f064 <strtod+0xc>)
 808f05a:	460a      	mov	r2, r1
 808f05c:	4601      	mov	r1, r0
 808f05e:	6818      	ldr	r0, [r3, #0]
 808f060:	f7ff b9fa 	b.w	808e458 <_strtod_r>
 808f064:	20000144 	.word	0x20000144

0808f068 <_strtol_r>:
 808f068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808f06c:	460f      	mov	r7, r1
 808f06e:	4680      	mov	r8, r0
 808f070:	483f      	ldr	r0, [pc, #252]	; (808f170 <_strtol_r+0x108>)
 808f072:	f8d0 9000 	ldr.w	r9, [r0]
 808f076:	463d      	mov	r5, r7
 808f078:	f815 4b01 	ldrb.w	r4, [r5], #1
 808f07c:	eb09 0004 	add.w	r0, r9, r4
 808f080:	7840      	ldrb	r0, [r0, #1]
 808f082:	f000 0008 	and.w	r0, r0, #8
 808f086:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 808f08a:	b108      	cbz	r0, 808f090 <_strtol_r+0x28>
 808f08c:	462f      	mov	r7, r5
 808f08e:	e7f2      	b.n	808f076 <_strtol_r+0xe>
 808f090:	2c2d      	cmp	r4, #45	; 0x2d
 808f092:	d103      	bne.n	808f09c <_strtol_r+0x34>
 808f094:	1cbd      	adds	r5, r7, #2
 808f096:	787c      	ldrb	r4, [r7, #1]
 808f098:	2601      	movs	r6, #1
 808f09a:	e003      	b.n	808f0a4 <_strtol_r+0x3c>
 808f09c:	2c2b      	cmp	r4, #43	; 0x2b
 808f09e:	bf04      	itt	eq
 808f0a0:	787c      	ldrbeq	r4, [r7, #1]
 808f0a2:	1cbd      	addeq	r5, r7, #2
 808f0a4:	b113      	cbz	r3, 808f0ac <_strtol_r+0x44>
 808f0a6:	2b10      	cmp	r3, #16
 808f0a8:	d10a      	bne.n	808f0c0 <_strtol_r+0x58>
 808f0aa:	e05b      	b.n	808f164 <_strtol_r+0xfc>
 808f0ac:	2c30      	cmp	r4, #48	; 0x30
 808f0ae:	d157      	bne.n	808f160 <_strtol_r+0xf8>
 808f0b0:	7828      	ldrb	r0, [r5, #0]
 808f0b2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 808f0b6:	2858      	cmp	r0, #88	; 0x58
 808f0b8:	d14d      	bne.n	808f156 <_strtol_r+0xee>
 808f0ba:	786c      	ldrb	r4, [r5, #1]
 808f0bc:	2310      	movs	r3, #16
 808f0be:	3502      	adds	r5, #2
 808f0c0:	2e00      	cmp	r6, #0
 808f0c2:	bf14      	ite	ne
 808f0c4:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 808f0c8:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 808f0cc:	fbbc faf3 	udiv	sl, ip, r3
 808f0d0:	2700      	movs	r7, #0
 808f0d2:	4638      	mov	r0, r7
 808f0d4:	fb03 cc1a 	mls	ip, r3, sl, ip
 808f0d8:	eb09 0e04 	add.w	lr, r9, r4
 808f0dc:	f89e e001 	ldrb.w	lr, [lr, #1]
 808f0e0:	f01e 0f04 	tst.w	lr, #4
 808f0e4:	d001      	beq.n	808f0ea <_strtol_r+0x82>
 808f0e6:	3c30      	subs	r4, #48	; 0x30
 808f0e8:	e00b      	b.n	808f102 <_strtol_r+0x9a>
 808f0ea:	f01e 0e03 	ands.w	lr, lr, #3
 808f0ee:	d01b      	beq.n	808f128 <_strtol_r+0xc0>
 808f0f0:	f1be 0f01 	cmp.w	lr, #1
 808f0f4:	bf0c      	ite	eq
 808f0f6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 808f0fa:	f04f 0e57 	movne.w	lr, #87	; 0x57
 808f0fe:	ebce 0404 	rsb	r4, lr, r4
 808f102:	42a3      	cmp	r3, r4
 808f104:	dd10      	ble.n	808f128 <_strtol_r+0xc0>
 808f106:	f1b7 3fff 	cmp.w	r7, #4294967295
 808f10a:	d00a      	beq.n	808f122 <_strtol_r+0xba>
 808f10c:	4550      	cmp	r0, sl
 808f10e:	d806      	bhi.n	808f11e <_strtol_r+0xb6>
 808f110:	d101      	bne.n	808f116 <_strtol_r+0xae>
 808f112:	4564      	cmp	r4, ip
 808f114:	dc03      	bgt.n	808f11e <_strtol_r+0xb6>
 808f116:	fb03 4000 	mla	r0, r3, r0, r4
 808f11a:	2701      	movs	r7, #1
 808f11c:	e001      	b.n	808f122 <_strtol_r+0xba>
 808f11e:	f04f 37ff 	mov.w	r7, #4294967295
 808f122:	f815 4b01 	ldrb.w	r4, [r5], #1
 808f126:	e7d7      	b.n	808f0d8 <_strtol_r+0x70>
 808f128:	1c7b      	adds	r3, r7, #1
 808f12a:	d10c      	bne.n	808f146 <_strtol_r+0xde>
 808f12c:	2e00      	cmp	r6, #0
 808f12e:	f04f 0322 	mov.w	r3, #34	; 0x22
 808f132:	bf14      	ite	ne
 808f134:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 808f138:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808f13c:	f8c8 3000 	str.w	r3, [r8]
 808f140:	b92a      	cbnz	r2, 808f14e <_strtol_r+0xe6>
 808f142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808f146:	b106      	cbz	r6, 808f14a <_strtol_r+0xe2>
 808f148:	4240      	negs	r0, r0
 808f14a:	b172      	cbz	r2, 808f16a <_strtol_r+0x102>
 808f14c:	b107      	cbz	r7, 808f150 <_strtol_r+0xe8>
 808f14e:	1e69      	subs	r1, r5, #1
 808f150:	6011      	str	r1, [r2, #0]
 808f152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808f156:	2430      	movs	r4, #48	; 0x30
 808f158:	2b00      	cmp	r3, #0
 808f15a:	d1b1      	bne.n	808f0c0 <_strtol_r+0x58>
 808f15c:	2308      	movs	r3, #8
 808f15e:	e7af      	b.n	808f0c0 <_strtol_r+0x58>
 808f160:	230a      	movs	r3, #10
 808f162:	e7ad      	b.n	808f0c0 <_strtol_r+0x58>
 808f164:	2c30      	cmp	r4, #48	; 0x30
 808f166:	d0a3      	beq.n	808f0b0 <_strtol_r+0x48>
 808f168:	e7aa      	b.n	808f0c0 <_strtol_r+0x58>
 808f16a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808f16e:	bf00      	nop
 808f170:	200000e0 	.word	0x200000e0

0808f174 <strtol>:
 808f174:	4613      	mov	r3, r2
 808f176:	460a      	mov	r2, r1
 808f178:	4601      	mov	r1, r0
 808f17a:	4802      	ldr	r0, [pc, #8]	; (808f184 <strtol+0x10>)
 808f17c:	6800      	ldr	r0, [r0, #0]
 808f17e:	f7ff bf73 	b.w	808f068 <_strtol_r>
 808f182:	bf00      	nop
 808f184:	20000144 	.word	0x20000144

0808f188 <_strtoul_r>:
 808f188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808f18c:	460e      	mov	r6, r1
 808f18e:	4680      	mov	r8, r0
 808f190:	483b      	ldr	r0, [pc, #236]	; (808f280 <_strtoul_r+0xf8>)
 808f192:	f8d0 9000 	ldr.w	r9, [r0]
 808f196:	4635      	mov	r5, r6
 808f198:	f815 4b01 	ldrb.w	r4, [r5], #1
 808f19c:	eb09 0004 	add.w	r0, r9, r4
 808f1a0:	7840      	ldrb	r0, [r0, #1]
 808f1a2:	f000 0008 	and.w	r0, r0, #8
 808f1a6:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 808f1aa:	b108      	cbz	r0, 808f1b0 <_strtoul_r+0x28>
 808f1ac:	462e      	mov	r6, r5
 808f1ae:	e7f2      	b.n	808f196 <_strtoul_r+0xe>
 808f1b0:	2c2d      	cmp	r4, #45	; 0x2d
 808f1b2:	d103      	bne.n	808f1bc <_strtoul_r+0x34>
 808f1b4:	1cb5      	adds	r5, r6, #2
 808f1b6:	7874      	ldrb	r4, [r6, #1]
 808f1b8:	2701      	movs	r7, #1
 808f1ba:	e003      	b.n	808f1c4 <_strtoul_r+0x3c>
 808f1bc:	2c2b      	cmp	r4, #43	; 0x2b
 808f1be:	bf04      	itt	eq
 808f1c0:	7874      	ldrbeq	r4, [r6, #1]
 808f1c2:	1cb5      	addeq	r5, r6, #2
 808f1c4:	b113      	cbz	r3, 808f1cc <_strtoul_r+0x44>
 808f1c6:	2b10      	cmp	r3, #16
 808f1c8:	d10a      	bne.n	808f1e0 <_strtoul_r+0x58>
 808f1ca:	e053      	b.n	808f274 <_strtoul_r+0xec>
 808f1cc:	2c30      	cmp	r4, #48	; 0x30
 808f1ce:	d14f      	bne.n	808f270 <_strtoul_r+0xe8>
 808f1d0:	7828      	ldrb	r0, [r5, #0]
 808f1d2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 808f1d6:	2858      	cmp	r0, #88	; 0x58
 808f1d8:	d145      	bne.n	808f266 <_strtoul_r+0xde>
 808f1da:	786c      	ldrb	r4, [r5, #1]
 808f1dc:	2310      	movs	r3, #16
 808f1de:	3502      	adds	r5, #2
 808f1e0:	f04f 3cff 	mov.w	ip, #4294967295
 808f1e4:	fbbc fcf3 	udiv	ip, ip, r3
 808f1e8:	fb03 fa0c 	mul.w	sl, r3, ip
 808f1ec:	2600      	movs	r6, #0
 808f1ee:	ea6f 0a0a 	mvn.w	sl, sl
 808f1f2:	4630      	mov	r0, r6
 808f1f4:	eb09 0e04 	add.w	lr, r9, r4
 808f1f8:	f89e e001 	ldrb.w	lr, [lr, #1]
 808f1fc:	f01e 0f04 	tst.w	lr, #4
 808f200:	d001      	beq.n	808f206 <_strtoul_r+0x7e>
 808f202:	3c30      	subs	r4, #48	; 0x30
 808f204:	e00b      	b.n	808f21e <_strtoul_r+0x96>
 808f206:	f01e 0e03 	ands.w	lr, lr, #3
 808f20a:	d01a      	beq.n	808f242 <_strtoul_r+0xba>
 808f20c:	f1be 0f01 	cmp.w	lr, #1
 808f210:	bf0c      	ite	eq
 808f212:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 808f216:	f04f 0e57 	movne.w	lr, #87	; 0x57
 808f21a:	ebce 0404 	rsb	r4, lr, r4
 808f21e:	42a3      	cmp	r3, r4
 808f220:	dd0f      	ble.n	808f242 <_strtoul_r+0xba>
 808f222:	2e00      	cmp	r6, #0
 808f224:	db08      	blt.n	808f238 <_strtoul_r+0xb0>
 808f226:	4560      	cmp	r0, ip
 808f228:	d806      	bhi.n	808f238 <_strtoul_r+0xb0>
 808f22a:	d101      	bne.n	808f230 <_strtoul_r+0xa8>
 808f22c:	4554      	cmp	r4, sl
 808f22e:	dc03      	bgt.n	808f238 <_strtoul_r+0xb0>
 808f230:	fb03 4000 	mla	r0, r3, r0, r4
 808f234:	2601      	movs	r6, #1
 808f236:	e001      	b.n	808f23c <_strtoul_r+0xb4>
 808f238:	f04f 36ff 	mov.w	r6, #4294967295
 808f23c:	f815 4b01 	ldrb.w	r4, [r5], #1
 808f240:	e7d8      	b.n	808f1f4 <_strtoul_r+0x6c>
 808f242:	2e00      	cmp	r6, #0
 808f244:	da07      	bge.n	808f256 <_strtoul_r+0xce>
 808f246:	2322      	movs	r3, #34	; 0x22
 808f248:	f8c8 3000 	str.w	r3, [r8]
 808f24c:	f04f 30ff 	mov.w	r0, #4294967295
 808f250:	b92a      	cbnz	r2, 808f25e <_strtoul_r+0xd6>
 808f252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808f256:	b107      	cbz	r7, 808f25a <_strtoul_r+0xd2>
 808f258:	4240      	negs	r0, r0
 808f25a:	b172      	cbz	r2, 808f27a <_strtoul_r+0xf2>
 808f25c:	b106      	cbz	r6, 808f260 <_strtoul_r+0xd8>
 808f25e:	1e69      	subs	r1, r5, #1
 808f260:	6011      	str	r1, [r2, #0]
 808f262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808f266:	2430      	movs	r4, #48	; 0x30
 808f268:	2b00      	cmp	r3, #0
 808f26a:	d1b9      	bne.n	808f1e0 <_strtoul_r+0x58>
 808f26c:	2308      	movs	r3, #8
 808f26e:	e7b7      	b.n	808f1e0 <_strtoul_r+0x58>
 808f270:	230a      	movs	r3, #10
 808f272:	e7b5      	b.n	808f1e0 <_strtoul_r+0x58>
 808f274:	2c30      	cmp	r4, #48	; 0x30
 808f276:	d0ab      	beq.n	808f1d0 <_strtoul_r+0x48>
 808f278:	e7b2      	b.n	808f1e0 <_strtoul_r+0x58>
 808f27a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808f27e:	bf00      	nop
 808f280:	200000e0 	.word	0x200000e0

0808f284 <strtoul>:
 808f284:	4613      	mov	r3, r2
 808f286:	460a      	mov	r2, r1
 808f288:	4601      	mov	r1, r0
 808f28a:	4802      	ldr	r0, [pc, #8]	; (808f294 <strtoul+0x10>)
 808f28c:	6800      	ldr	r0, [r0, #0]
 808f28e:	f7ff bf7b 	b.w	808f188 <_strtoul_r>
 808f292:	bf00      	nop
 808f294:	20000144 	.word	0x20000144

0808f298 <__get_current_time_locale>:
 808f298:	4b04      	ldr	r3, [pc, #16]	; (808f2ac <__get_current_time_locale+0x14>)
 808f29a:	4a05      	ldr	r2, [pc, #20]	; (808f2b0 <__get_current_time_locale+0x18>)
 808f29c:	6818      	ldr	r0, [r3, #0]
 808f29e:	4b05      	ldr	r3, [pc, #20]	; (808f2b4 <__get_current_time_locale+0x1c>)
 808f2a0:	2800      	cmp	r0, #0
 808f2a2:	bf14      	ite	ne
 808f2a4:	4610      	movne	r0, r2
 808f2a6:	4618      	moveq	r0, r3
 808f2a8:	4770      	bx	lr
 808f2aa:	bf00      	nop
 808f2ac:	200011d0 	.word	0x200011d0
 808f2b0:	200011d4 	.word	0x200011d4
 808f2b4:	0809367c 	.word	0x0809367c

0808f2b8 <__tzcalc_limits>:
 808f2b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808f2bc:	4604      	mov	r4, r0
 808f2be:	f000 fd91 	bl	808fde4 <__gettzinfo>
 808f2c2:	f240 73b1 	movw	r3, #1969	; 0x7b1
 808f2c6:	429c      	cmp	r4, r3
 808f2c8:	f340 8096 	ble.w	808f3f8 <__tzcalc_limits+0x140>
 808f2cc:	f240 156d 	movw	r5, #365	; 0x16d
 808f2d0:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 808f2d4:	18e3      	adds	r3, r4, r3
 808f2d6:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 808f2da:	109b      	asrs	r3, r3, #2
 808f2dc:	fb05 3502 	mla	r5, r5, r2, r3
 808f2e0:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 808f2e4:	f06f 0363 	mvn.w	r3, #99	; 0x63
 808f2e8:	fb92 f3f3 	sdiv	r3, r2, r3
 808f2ec:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 808f2f0:	442b      	add	r3, r5
 808f2f2:	18a5      	adds	r5, r4, r2
 808f2f4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808f2f8:	fb94 f7f2 	sdiv	r7, r4, r2
 808f2fc:	fb95 f5f2 	sdiv	r5, r5, r2
 808f300:	fb02 4717 	mls	r7, r2, r7, r4
 808f304:	441d      	add	r5, r3
 808f306:	2364      	movs	r3, #100	; 0x64
 808f308:	fb94 f6f3 	sdiv	r6, r4, r3
 808f30c:	fab7 fe87 	clz	lr, r7
 808f310:	4601      	mov	r1, r0
 808f312:	fb03 4616 	mls	r6, r3, r6, r4
 808f316:	f100 0338 	add.w	r3, r0, #56	; 0x38
 808f31a:	9301      	str	r3, [sp, #4]
 808f31c:	f004 0303 	and.w	r3, r4, #3
 808f320:	6044      	str	r4, [r0, #4]
 808f322:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 808f326:	9300      	str	r3, [sp, #0]
 808f328:	f04f 0c07 	mov.w	ip, #7
 808f32c:	7a0b      	ldrb	r3, [r1, #8]
 808f32e:	2b4a      	cmp	r3, #74	; 0x4a
 808f330:	d10e      	bne.n	808f350 <__tzcalc_limits+0x98>
 808f332:	694b      	ldr	r3, [r1, #20]
 808f334:	9a00      	ldr	r2, [sp, #0]
 808f336:	18ec      	adds	r4, r5, r3
 808f338:	b902      	cbnz	r2, 808f33c <__tzcalc_limits+0x84>
 808f33a:	b906      	cbnz	r6, 808f33e <__tzcalc_limits+0x86>
 808f33c:	b927      	cbnz	r7, 808f348 <__tzcalc_limits+0x90>
 808f33e:	2b3b      	cmp	r3, #59	; 0x3b
 808f340:	bfd4      	ite	le
 808f342:	2300      	movle	r3, #0
 808f344:	2301      	movgt	r3, #1
 808f346:	e000      	b.n	808f34a <__tzcalc_limits+0x92>
 808f348:	2300      	movs	r3, #0
 808f34a:	4423      	add	r3, r4
 808f34c:	3b01      	subs	r3, #1
 808f34e:	e03f      	b.n	808f3d0 <__tzcalc_limits+0x118>
 808f350:	2b44      	cmp	r3, #68	; 0x44
 808f352:	d102      	bne.n	808f35a <__tzcalc_limits+0xa2>
 808f354:	694b      	ldr	r3, [r1, #20]
 808f356:	442b      	add	r3, r5
 808f358:	e03a      	b.n	808f3d0 <__tzcalc_limits+0x118>
 808f35a:	9b00      	ldr	r3, [sp, #0]
 808f35c:	b92b      	cbnz	r3, 808f36a <__tzcalc_limits+0xb2>
 808f35e:	2e00      	cmp	r6, #0
 808f360:	bf0c      	ite	eq
 808f362:	46f0      	moveq	r8, lr
 808f364:	f04f 0801 	movne.w	r8, #1
 808f368:	e000      	b.n	808f36c <__tzcalc_limits+0xb4>
 808f36a:	46f0      	mov	r8, lr
 808f36c:	46a9      	mov	r9, r5
 808f36e:	4b24      	ldr	r3, [pc, #144]	; (808f400 <__tzcalc_limits+0x148>)
 808f370:	2230      	movs	r2, #48	; 0x30
 808f372:	fb02 3808 	mla	r8, r2, r8, r3
 808f376:	68cc      	ldr	r4, [r1, #12]
 808f378:	f1a8 0a04 	sub.w	sl, r8, #4
 808f37c:	2301      	movs	r3, #1
 808f37e:	42a3      	cmp	r3, r4
 808f380:	da04      	bge.n	808f38c <__tzcalc_limits+0xd4>
 808f382:	f85a bf04 	ldr.w	fp, [sl, #4]!
 808f386:	3301      	adds	r3, #1
 808f388:	44d9      	add	r9, fp
 808f38a:	e7f8      	b.n	808f37e <__tzcalc_limits+0xc6>
 808f38c:	f109 0304 	add.w	r3, r9, #4
 808f390:	fb93 fbfc 	sdiv	fp, r3, ip
 808f394:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 808f398:	ebca 0a03 	rsb	sl, sl, r3
 808f39c:	694b      	ldr	r3, [r1, #20]
 808f39e:	2c01      	cmp	r4, #1
 808f3a0:	bfb8      	it	lt
 808f3a2:	2401      	movlt	r4, #1
 808f3a4:	ebb3 0a0a 	subs.w	sl, r3, sl
 808f3a8:	690b      	ldr	r3, [r1, #16]
 808f3aa:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 808f3ae:	f103 33ff 	add.w	r3, r3, #4294967295
 808f3b2:	f104 34ff 	add.w	r4, r4, #4294967295
 808f3b6:	bf48      	it	mi
 808f3b8:	f10a 0a07 	addmi.w	sl, sl, #7
 808f3bc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 808f3c0:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 808f3c4:	4453      	add	r3, sl
 808f3c6:	42a3      	cmp	r3, r4
 808f3c8:	db01      	blt.n	808f3ce <__tzcalc_limits+0x116>
 808f3ca:	3b07      	subs	r3, #7
 808f3cc:	e7fb      	b.n	808f3c6 <__tzcalc_limits+0x10e>
 808f3ce:	444b      	add	r3, r9
 808f3d0:	698c      	ldr	r4, [r1, #24]
 808f3d2:	4a0c      	ldr	r2, [pc, #48]	; (808f404 <__tzcalc_limits+0x14c>)
 808f3d4:	fb02 4303 	mla	r3, r2, r3, r4
 808f3d8:	6a0c      	ldr	r4, [r1, #32]
 808f3da:	4423      	add	r3, r4
 808f3dc:	f841 3f1c 	str.w	r3, [r1, #28]!
 808f3e0:	9b01      	ldr	r3, [sp, #4]
 808f3e2:	4299      	cmp	r1, r3
 808f3e4:	d1a2      	bne.n	808f32c <__tzcalc_limits+0x74>
 808f3e6:	69c3      	ldr	r3, [r0, #28]
 808f3e8:	6b82      	ldr	r2, [r0, #56]	; 0x38
 808f3ea:	4293      	cmp	r3, r2
 808f3ec:	bfac      	ite	ge
 808f3ee:	2300      	movge	r3, #0
 808f3f0:	2301      	movlt	r3, #1
 808f3f2:	6003      	str	r3, [r0, #0]
 808f3f4:	2001      	movs	r0, #1
 808f3f6:	e000      	b.n	808f3fa <__tzcalc_limits+0x142>
 808f3f8:	2000      	movs	r0, #0
 808f3fa:	b003      	add	sp, #12
 808f3fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808f400:	08093444 	.word	0x08093444
 808f404:	00015180 	.word	0x00015180

0808f408 <__tz_lock>:
 808f408:	4770      	bx	lr

0808f40a <__tz_unlock>:
 808f40a:	4770      	bx	lr

0808f40c <_tzset_unlocked>:
 808f40c:	4b01      	ldr	r3, [pc, #4]	; (808f414 <_tzset_unlocked+0x8>)
 808f40e:	6818      	ldr	r0, [r3, #0]
 808f410:	f000 b802 	b.w	808f418 <_tzset_unlocked_r>
 808f414:	20000144 	.word	0x20000144

0808f418 <_tzset_unlocked_r>:
 808f418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808f41c:	b08d      	sub	sp, #52	; 0x34
 808f41e:	4607      	mov	r7, r0
 808f420:	f000 fce0 	bl	808fde4 <__gettzinfo>
 808f424:	49b0      	ldr	r1, [pc, #704]	; (808f6e8 <_tzset_unlocked_r+0x2d0>)
 808f426:	4604      	mov	r4, r0
 808f428:	4638      	mov	r0, r7
 808f42a:	f000 fcd3 	bl	808fdd4 <_getenv_r>
 808f42e:	4eaf      	ldr	r6, [pc, #700]	; (808f6ec <_tzset_unlocked_r+0x2d4>)
 808f430:	4605      	mov	r5, r0
 808f432:	b960      	cbnz	r0, 808f44e <_tzset_unlocked_r+0x36>
 808f434:	4bae      	ldr	r3, [pc, #696]	; (808f6f0 <_tzset_unlocked_r+0x2d8>)
 808f436:	4aaf      	ldr	r2, [pc, #700]	; (808f6f4 <_tzset_unlocked_r+0x2dc>)
 808f438:	6018      	str	r0, [r3, #0]
 808f43a:	4baf      	ldr	r3, [pc, #700]	; (808f6f8 <_tzset_unlocked_r+0x2e0>)
 808f43c:	6018      	str	r0, [r3, #0]
 808f43e:	4baf      	ldr	r3, [pc, #700]	; (808f6fc <_tzset_unlocked_r+0x2e4>)
 808f440:	6830      	ldr	r0, [r6, #0]
 808f442:	601a      	str	r2, [r3, #0]
 808f444:	605a      	str	r2, [r3, #4]
 808f446:	f7fa fa87 	bl	8089958 <free>
 808f44a:	6035      	str	r5, [r6, #0]
 808f44c:	e148      	b.n	808f6e0 <_tzset_unlocked_r+0x2c8>
 808f44e:	6831      	ldr	r1, [r6, #0]
 808f450:	b979      	cbnz	r1, 808f472 <_tzset_unlocked_r+0x5a>
 808f452:	6830      	ldr	r0, [r6, #0]
 808f454:	f7fa fa80 	bl	8089958 <free>
 808f458:	4628      	mov	r0, r5
 808f45a:	f7fe ff8f 	bl	808e37c <strlen>
 808f45e:	1c41      	adds	r1, r0, #1
 808f460:	4638      	mov	r0, r7
 808f462:	f7fa fac1 	bl	80899e8 <_malloc_r>
 808f466:	6030      	str	r0, [r6, #0]
 808f468:	b148      	cbz	r0, 808f47e <_tzset_unlocked_r+0x66>
 808f46a:	4629      	mov	r1, r5
 808f46c:	f7fe fa4e 	bl	808d90c <strcpy>
 808f470:	e005      	b.n	808f47e <_tzset_unlocked_r+0x66>
 808f472:	f7fe fa41 	bl	808d8f8 <strcmp>
 808f476:	2800      	cmp	r0, #0
 808f478:	f000 8132 	beq.w	808f6e0 <_tzset_unlocked_r+0x2c8>
 808f47c:	e7e9      	b.n	808f452 <_tzset_unlocked_r+0x3a>
 808f47e:	782b      	ldrb	r3, [r5, #0]
 808f480:	ae0a      	add	r6, sp, #40	; 0x28
 808f482:	2b3a      	cmp	r3, #58	; 0x3a
 808f484:	bf08      	it	eq
 808f486:	3501      	addeq	r5, #1
 808f488:	4633      	mov	r3, r6
 808f48a:	4a9d      	ldr	r2, [pc, #628]	; (808f700 <_tzset_unlocked_r+0x2e8>)
 808f48c:	499d      	ldr	r1, [pc, #628]	; (808f704 <_tzset_unlocked_r+0x2ec>)
 808f48e:	4628      	mov	r0, r5
 808f490:	f7fa fa82 	bl	8089998 <siscanf>
 808f494:	2800      	cmp	r0, #0
 808f496:	f340 8123 	ble.w	808f6e0 <_tzset_unlocked_r+0x2c8>
 808f49a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808f49c:	18ef      	adds	r7, r5, r3
 808f49e:	5ceb      	ldrb	r3, [r5, r3]
 808f4a0:	2b2d      	cmp	r3, #45	; 0x2d
 808f4a2:	d103      	bne.n	808f4ac <_tzset_unlocked_r+0x94>
 808f4a4:	3701      	adds	r7, #1
 808f4a6:	f04f 35ff 	mov.w	r5, #4294967295
 808f4aa:	e003      	b.n	808f4b4 <_tzset_unlocked_r+0x9c>
 808f4ac:	2b2b      	cmp	r3, #43	; 0x2b
 808f4ae:	bf08      	it	eq
 808f4b0:	3701      	addeq	r7, #1
 808f4b2:	2501      	movs	r5, #1
 808f4b4:	f10d 0a20 	add.w	sl, sp, #32
 808f4b8:	f10d 0b1e 	add.w	fp, sp, #30
 808f4bc:	f04f 0800 	mov.w	r8, #0
 808f4c0:	9603      	str	r6, [sp, #12]
 808f4c2:	f8cd a008 	str.w	sl, [sp, #8]
 808f4c6:	9601      	str	r6, [sp, #4]
 808f4c8:	f8cd b000 	str.w	fp, [sp]
 808f4cc:	4633      	mov	r3, r6
 808f4ce:	aa07      	add	r2, sp, #28
 808f4d0:	498d      	ldr	r1, [pc, #564]	; (808f708 <_tzset_unlocked_r+0x2f0>)
 808f4d2:	4638      	mov	r0, r7
 808f4d4:	f8ad 801e 	strh.w	r8, [sp, #30]
 808f4d8:	f8ad 8020 	strh.w	r8, [sp, #32]
 808f4dc:	f7fa fa5c 	bl	8089998 <siscanf>
 808f4e0:	4540      	cmp	r0, r8
 808f4e2:	f340 80fd 	ble.w	808f6e0 <_tzset_unlocked_r+0x2c8>
 808f4e6:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 808f4ea:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808f4ee:	213c      	movs	r1, #60	; 0x3c
 808f4f0:	fb01 3302 	mla	r3, r1, r2, r3
 808f4f4:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 808f4f8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 808f4fc:	fb01 3302 	mla	r3, r1, r2, r3
 808f500:	435d      	muls	r5, r3
 808f502:	4b7f      	ldr	r3, [pc, #508]	; (808f700 <_tzset_unlocked_r+0x2e8>)
 808f504:	6225      	str	r5, [r4, #32]
 808f506:	4d7d      	ldr	r5, [pc, #500]	; (808f6fc <_tzset_unlocked_r+0x2e4>)
 808f508:	f8df 9208 	ldr.w	r9, [pc, #520]	; 808f714 <_tzset_unlocked_r+0x2fc>
 808f50c:	602b      	str	r3, [r5, #0]
 808f50e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808f510:	464a      	mov	r2, r9
 808f512:	441f      	add	r7, r3
 808f514:	497b      	ldr	r1, [pc, #492]	; (808f704 <_tzset_unlocked_r+0x2ec>)
 808f516:	4633      	mov	r3, r6
 808f518:	4638      	mov	r0, r7
 808f51a:	f7fa fa3d 	bl	8089998 <siscanf>
 808f51e:	4540      	cmp	r0, r8
 808f520:	dc08      	bgt.n	808f534 <_tzset_unlocked_r+0x11c>
 808f522:	682b      	ldr	r3, [r5, #0]
 808f524:	6a22      	ldr	r2, [r4, #32]
 808f526:	606b      	str	r3, [r5, #4]
 808f528:	4b71      	ldr	r3, [pc, #452]	; (808f6f0 <_tzset_unlocked_r+0x2d8>)
 808f52a:	601a      	str	r2, [r3, #0]
 808f52c:	4b72      	ldr	r3, [pc, #456]	; (808f6f8 <_tzset_unlocked_r+0x2e0>)
 808f52e:	f8c3 8000 	str.w	r8, [r3]
 808f532:	e0d5      	b.n	808f6e0 <_tzset_unlocked_r+0x2c8>
 808f534:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808f536:	f8c5 9004 	str.w	r9, [r5, #4]
 808f53a:	18fd      	adds	r5, r7, r3
 808f53c:	5cfb      	ldrb	r3, [r7, r3]
 808f53e:	2b2d      	cmp	r3, #45	; 0x2d
 808f540:	d103      	bne.n	808f54a <_tzset_unlocked_r+0x132>
 808f542:	3501      	adds	r5, #1
 808f544:	f04f 37ff 	mov.w	r7, #4294967295
 808f548:	e003      	b.n	808f552 <_tzset_unlocked_r+0x13a>
 808f54a:	2b2b      	cmp	r3, #43	; 0x2b
 808f54c:	bf08      	it	eq
 808f54e:	3501      	addeq	r5, #1
 808f550:	2701      	movs	r7, #1
 808f552:	2300      	movs	r3, #0
 808f554:	f8ad 301c 	strh.w	r3, [sp, #28]
 808f558:	f8ad 301e 	strh.w	r3, [sp, #30]
 808f55c:	f8ad 3020 	strh.w	r3, [sp, #32]
 808f560:	930a      	str	r3, [sp, #40]	; 0x28
 808f562:	9603      	str	r6, [sp, #12]
 808f564:	f8cd a008 	str.w	sl, [sp, #8]
 808f568:	9601      	str	r6, [sp, #4]
 808f56a:	f8cd b000 	str.w	fp, [sp]
 808f56e:	4633      	mov	r3, r6
 808f570:	aa07      	add	r2, sp, #28
 808f572:	4965      	ldr	r1, [pc, #404]	; (808f708 <_tzset_unlocked_r+0x2f0>)
 808f574:	4628      	mov	r0, r5
 808f576:	f7fa fa0f 	bl	8089998 <siscanf>
 808f57a:	2800      	cmp	r0, #0
 808f57c:	dc04      	bgt.n	808f588 <_tzset_unlocked_r+0x170>
 808f57e:	6a23      	ldr	r3, [r4, #32]
 808f580:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 808f584:	63e3      	str	r3, [r4, #60]	; 0x3c
 808f586:	e00e      	b.n	808f5a6 <_tzset_unlocked_r+0x18e>
 808f588:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 808f58c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808f590:	213c      	movs	r1, #60	; 0x3c
 808f592:	fb01 3302 	mla	r3, r1, r2, r3
 808f596:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 808f59a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 808f59e:	fb01 3302 	mla	r3, r1, r2, r3
 808f5a2:	435f      	muls	r7, r3
 808f5a4:	63e7      	str	r7, [r4, #60]	; 0x3c
 808f5a6:	4627      	mov	r7, r4
 808f5a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808f5aa:	f04f 0900 	mov.w	r9, #0
 808f5ae:	441d      	add	r5, r3
 808f5b0:	782b      	ldrb	r3, [r5, #0]
 808f5b2:	2b2c      	cmp	r3, #44	; 0x2c
 808f5b4:	bf08      	it	eq
 808f5b6:	3501      	addeq	r5, #1
 808f5b8:	f895 8000 	ldrb.w	r8, [r5]
 808f5bc:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 808f5c0:	d126      	bne.n	808f610 <_tzset_unlocked_r+0x1f8>
 808f5c2:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 808f5c6:	9302      	str	r3, [sp, #8]
 808f5c8:	ab09      	add	r3, sp, #36	; 0x24
 808f5ca:	9300      	str	r3, [sp, #0]
 808f5cc:	9603      	str	r6, [sp, #12]
 808f5ce:	9601      	str	r6, [sp, #4]
 808f5d0:	4633      	mov	r3, r6
 808f5d2:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 808f5d6:	494d      	ldr	r1, [pc, #308]	; (808f70c <_tzset_unlocked_r+0x2f4>)
 808f5d8:	4628      	mov	r0, r5
 808f5da:	f7fa f9dd 	bl	8089998 <siscanf>
 808f5de:	2803      	cmp	r0, #3
 808f5e0:	d17e      	bne.n	808f6e0 <_tzset_unlocked_r+0x2c8>
 808f5e2:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 808f5e6:	1e4b      	subs	r3, r1, #1
 808f5e8:	2b0b      	cmp	r3, #11
 808f5ea:	d879      	bhi.n	808f6e0 <_tzset_unlocked_r+0x2c8>
 808f5ec:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 808f5f0:	1e53      	subs	r3, r2, #1
 808f5f2:	2b04      	cmp	r3, #4
 808f5f4:	d874      	bhi.n	808f6e0 <_tzset_unlocked_r+0x2c8>
 808f5f6:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 808f5fa:	2b06      	cmp	r3, #6
 808f5fc:	d870      	bhi.n	808f6e0 <_tzset_unlocked_r+0x2c8>
 808f5fe:	f887 8008 	strb.w	r8, [r7, #8]
 808f602:	60f9      	str	r1, [r7, #12]
 808f604:	613a      	str	r2, [r7, #16]
 808f606:	617b      	str	r3, [r7, #20]
 808f608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808f60a:	eb05 0803 	add.w	r8, r5, r3
 808f60e:	e02a      	b.n	808f666 <_tzset_unlocked_r+0x24e>
 808f610:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 808f614:	bf06      	itte	eq
 808f616:	4643      	moveq	r3, r8
 808f618:	3501      	addeq	r5, #1
 808f61a:	2344      	movne	r3, #68	; 0x44
 808f61c:	220a      	movs	r2, #10
 808f61e:	a90b      	add	r1, sp, #44	; 0x2c
 808f620:	4628      	mov	r0, r5
 808f622:	9305      	str	r3, [sp, #20]
 808f624:	f7ff fe2e 	bl	808f284 <strtoul>
 808f628:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 808f62c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 808f630:	4545      	cmp	r5, r8
 808f632:	9b05      	ldr	r3, [sp, #20]
 808f634:	d114      	bne.n	808f660 <_tzset_unlocked_r+0x248>
 808f636:	234d      	movs	r3, #77	; 0x4d
 808f638:	f1b9 0f00 	cmp.w	r9, #0
 808f63c:	d107      	bne.n	808f64e <_tzset_unlocked_r+0x236>
 808f63e:	7223      	strb	r3, [r4, #8]
 808f640:	2303      	movs	r3, #3
 808f642:	60e3      	str	r3, [r4, #12]
 808f644:	2302      	movs	r3, #2
 808f646:	6123      	str	r3, [r4, #16]
 808f648:	f8c4 9014 	str.w	r9, [r4, #20]
 808f64c:	e00b      	b.n	808f666 <_tzset_unlocked_r+0x24e>
 808f64e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 808f652:	230b      	movs	r3, #11
 808f654:	62a3      	str	r3, [r4, #40]	; 0x28
 808f656:	2301      	movs	r3, #1
 808f658:	62e3      	str	r3, [r4, #44]	; 0x2c
 808f65a:	2300      	movs	r3, #0
 808f65c:	6323      	str	r3, [r4, #48]	; 0x30
 808f65e:	e002      	b.n	808f666 <_tzset_unlocked_r+0x24e>
 808f660:	b280      	uxth	r0, r0
 808f662:	723b      	strb	r3, [r7, #8]
 808f664:	6178      	str	r0, [r7, #20]
 808f666:	2302      	movs	r3, #2
 808f668:	f8ad 301c 	strh.w	r3, [sp, #28]
 808f66c:	2300      	movs	r3, #0
 808f66e:	f8ad 301e 	strh.w	r3, [sp, #30]
 808f672:	f8ad 3020 	strh.w	r3, [sp, #32]
 808f676:	930a      	str	r3, [sp, #40]	; 0x28
 808f678:	f898 3000 	ldrb.w	r3, [r8]
 808f67c:	2b2f      	cmp	r3, #47	; 0x2f
 808f67e:	d10b      	bne.n	808f698 <_tzset_unlocked_r+0x280>
 808f680:	9603      	str	r6, [sp, #12]
 808f682:	f8cd a008 	str.w	sl, [sp, #8]
 808f686:	9601      	str	r6, [sp, #4]
 808f688:	f8cd b000 	str.w	fp, [sp]
 808f68c:	4633      	mov	r3, r6
 808f68e:	aa07      	add	r2, sp, #28
 808f690:	491f      	ldr	r1, [pc, #124]	; (808f710 <_tzset_unlocked_r+0x2f8>)
 808f692:	4640      	mov	r0, r8
 808f694:	f7fa f980 	bl	8089998 <siscanf>
 808f698:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 808f69c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808f6a0:	213c      	movs	r1, #60	; 0x3c
 808f6a2:	fb01 3302 	mla	r3, r1, r2, r3
 808f6a6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 808f6aa:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 808f6ae:	fb01 3302 	mla	r3, r1, r2, r3
 808f6b2:	61bb      	str	r3, [r7, #24]
 808f6b4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808f6b6:	f109 0901 	add.w	r9, r9, #1
 808f6ba:	f1b9 0f02 	cmp.w	r9, #2
 808f6be:	4445      	add	r5, r8
 808f6c0:	f107 071c 	add.w	r7, r7, #28
 808f6c4:	f47f af74 	bne.w	808f5b0 <_tzset_unlocked_r+0x198>
 808f6c8:	6860      	ldr	r0, [r4, #4]
 808f6ca:	f7ff fdf5 	bl	808f2b8 <__tzcalc_limits>
 808f6ce:	6a22      	ldr	r2, [r4, #32]
 808f6d0:	4b07      	ldr	r3, [pc, #28]	; (808f6f0 <_tzset_unlocked_r+0x2d8>)
 808f6d2:	601a      	str	r2, [r3, #0]
 808f6d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 808f6d6:	1a9b      	subs	r3, r3, r2
 808f6d8:	4a07      	ldr	r2, [pc, #28]	; (808f6f8 <_tzset_unlocked_r+0x2e0>)
 808f6da:	bf18      	it	ne
 808f6dc:	2301      	movne	r3, #1
 808f6de:	6013      	str	r3, [r2, #0]
 808f6e0:	b00d      	add	sp, #52	; 0x34
 808f6e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808f6e6:	bf00      	nop
 808f6e8:	08093778 	.word	0x08093778
 808f6ec:	200012e8 	.word	0x200012e8
 808f6f0:	200012f0 	.word	0x200012f0
 808f6f4:	0809377b 	.word	0x0809377b
 808f6f8:	200012ec 	.word	0x200012ec
 808f6fc:	20000180 	.word	0x20000180
 808f700:	200012db 	.word	0x200012db
 808f704:	0809377f 	.word	0x0809377f
 808f708:	080937a2 	.word	0x080937a2
 808f70c:	0809378e 	.word	0x0809378e
 808f710:	080937a1 	.word	0x080937a1
 808f714:	200012d0 	.word	0x200012d0

0808f718 <abs>:
 808f718:	2800      	cmp	r0, #0
 808f71a:	bfb8      	it	lt
 808f71c:	4240      	neglt	r0, r0
 808f71e:	4770      	bx	lr

0808f720 <rshift>:
 808f720:	b5f0      	push	{r4, r5, r6, r7, lr}
 808f722:	6906      	ldr	r6, [r0, #16]
 808f724:	114b      	asrs	r3, r1, #5
 808f726:	42b3      	cmp	r3, r6
 808f728:	f100 0514 	add.w	r5, r0, #20
 808f72c:	da27      	bge.n	808f77e <rshift+0x5e>
 808f72e:	f011 011f 	ands.w	r1, r1, #31
 808f732:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 808f736:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 808f73a:	d101      	bne.n	808f740 <rshift+0x20>
 808f73c:	4629      	mov	r1, r5
 808f73e:	e016      	b.n	808f76e <rshift+0x4e>
 808f740:	1d14      	adds	r4, r2, #4
 808f742:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 808f746:	462b      	mov	r3, r5
 808f748:	f1c1 0e20 	rsb	lr, r1, #32
 808f74c:	40ca      	lsrs	r2, r1
 808f74e:	42b4      	cmp	r4, r6
 808f750:	d209      	bcs.n	808f766 <rshift+0x46>
 808f752:	6827      	ldr	r7, [r4, #0]
 808f754:	fa07 f70e 	lsl.w	r7, r7, lr
 808f758:	433a      	orrs	r2, r7
 808f75a:	f843 2b04 	str.w	r2, [r3], #4
 808f75e:	f854 2b04 	ldr.w	r2, [r4], #4
 808f762:	40ca      	lsrs	r2, r1
 808f764:	e7f3      	b.n	808f74e <rshift+0x2e>
 808f766:	601a      	str	r2, [r3, #0]
 808f768:	b152      	cbz	r2, 808f780 <rshift+0x60>
 808f76a:	3304      	adds	r3, #4
 808f76c:	e008      	b.n	808f780 <rshift+0x60>
 808f76e:	42b2      	cmp	r2, r6
 808f770:	460b      	mov	r3, r1
 808f772:	d205      	bcs.n	808f780 <rshift+0x60>
 808f774:	f852 3b04 	ldr.w	r3, [r2], #4
 808f778:	f841 3b04 	str.w	r3, [r1], #4
 808f77c:	e7f7      	b.n	808f76e <rshift+0x4e>
 808f77e:	462b      	mov	r3, r5
 808f780:	1b5b      	subs	r3, r3, r5
 808f782:	109b      	asrs	r3, r3, #2
 808f784:	6103      	str	r3, [r0, #16]
 808f786:	b903      	cbnz	r3, 808f78a <rshift+0x6a>
 808f788:	6143      	str	r3, [r0, #20]
 808f78a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808f78c <__hexdig_fun>:
 808f78c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 808f790:	2b09      	cmp	r3, #9
 808f792:	d801      	bhi.n	808f798 <__hexdig_fun+0xc>
 808f794:	3820      	subs	r0, #32
 808f796:	e00a      	b.n	808f7ae <__hexdig_fun+0x22>
 808f798:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 808f79c:	2b05      	cmp	r3, #5
 808f79e:	d801      	bhi.n	808f7a4 <__hexdig_fun+0x18>
 808f7a0:	3847      	subs	r0, #71	; 0x47
 808f7a2:	e004      	b.n	808f7ae <__hexdig_fun+0x22>
 808f7a4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 808f7a8:	2b05      	cmp	r3, #5
 808f7aa:	d802      	bhi.n	808f7b2 <__hexdig_fun+0x26>
 808f7ac:	3827      	subs	r0, #39	; 0x27
 808f7ae:	b2c0      	uxtb	r0, r0
 808f7b0:	4770      	bx	lr
 808f7b2:	2000      	movs	r0, #0
 808f7b4:	4770      	bx	lr

0808f7b6 <__gethex>:
 808f7b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808f7ba:	b08b      	sub	sp, #44	; 0x2c
 808f7bc:	468a      	mov	sl, r1
 808f7be:	4690      	mov	r8, r2
 808f7c0:	9306      	str	r3, [sp, #24]
 808f7c2:	9002      	str	r0, [sp, #8]
 808f7c4:	f7fe f83c 	bl	808d840 <_localeconv_r>
 808f7c8:	6803      	ldr	r3, [r0, #0]
 808f7ca:	f04f 0b00 	mov.w	fp, #0
 808f7ce:	4618      	mov	r0, r3
 808f7d0:	9303      	str	r3, [sp, #12]
 808f7d2:	f7fe fdd3 	bl	808e37c <strlen>
 808f7d6:	9b03      	ldr	r3, [sp, #12]
 808f7d8:	9001      	str	r0, [sp, #4]
 808f7da:	4403      	add	r3, r0
 808f7dc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 808f7e0:	9307      	str	r3, [sp, #28]
 808f7e2:	f8da 3000 	ldr.w	r3, [sl]
 808f7e6:	3302      	adds	r3, #2
 808f7e8:	461f      	mov	r7, r3
 808f7ea:	f813 0b01 	ldrb.w	r0, [r3], #1
 808f7ee:	2830      	cmp	r0, #48	; 0x30
 808f7f0:	d102      	bne.n	808f7f8 <__gethex+0x42>
 808f7f2:	f10b 0b01 	add.w	fp, fp, #1
 808f7f6:	e7f7      	b.n	808f7e8 <__gethex+0x32>
 808f7f8:	f7ff ffc8 	bl	808f78c <__hexdig_fun>
 808f7fc:	4604      	mov	r4, r0
 808f7fe:	b9e0      	cbnz	r0, 808f83a <__gethex+0x84>
 808f800:	9a01      	ldr	r2, [sp, #4]
 808f802:	9903      	ldr	r1, [sp, #12]
 808f804:	4638      	mov	r0, r7
 808f806:	f7fe fdc1 	bl	808e38c <strncmp>
 808f80a:	2800      	cmp	r0, #0
 808f80c:	d134      	bne.n	808f878 <__gethex+0xc2>
 808f80e:	9b01      	ldr	r3, [sp, #4]
 808f810:	5cf8      	ldrb	r0, [r7, r3]
 808f812:	18fe      	adds	r6, r7, r3
 808f814:	f7ff ffba 	bl	808f78c <__hexdig_fun>
 808f818:	b380      	cbz	r0, 808f87c <__gethex+0xc6>
 808f81a:	4633      	mov	r3, r6
 808f81c:	7818      	ldrb	r0, [r3, #0]
 808f81e:	461f      	mov	r7, r3
 808f820:	2830      	cmp	r0, #48	; 0x30
 808f822:	f103 0301 	add.w	r3, r3, #1
 808f826:	d0f9      	beq.n	808f81c <__gethex+0x66>
 808f828:	f7ff ffb0 	bl	808f78c <__hexdig_fun>
 808f82c:	fab0 f580 	clz	r5, r0
 808f830:	4634      	mov	r4, r6
 808f832:	096d      	lsrs	r5, r5, #5
 808f834:	f04f 0b01 	mov.w	fp, #1
 808f838:	e001      	b.n	808f83e <__gethex+0x88>
 808f83a:	2500      	movs	r5, #0
 808f83c:	462c      	mov	r4, r5
 808f83e:	463a      	mov	r2, r7
 808f840:	4616      	mov	r6, r2
 808f842:	7830      	ldrb	r0, [r6, #0]
 808f844:	3201      	adds	r2, #1
 808f846:	f7ff ffa1 	bl	808f78c <__hexdig_fun>
 808f84a:	2800      	cmp	r0, #0
 808f84c:	d1f8      	bne.n	808f840 <__gethex+0x8a>
 808f84e:	9a01      	ldr	r2, [sp, #4]
 808f850:	9903      	ldr	r1, [sp, #12]
 808f852:	4630      	mov	r0, r6
 808f854:	f7fe fd9a 	bl	808e38c <strncmp>
 808f858:	b950      	cbnz	r0, 808f870 <__gethex+0xba>
 808f85a:	b954      	cbnz	r4, 808f872 <__gethex+0xbc>
 808f85c:	9b01      	ldr	r3, [sp, #4]
 808f85e:	18f4      	adds	r4, r6, r3
 808f860:	4622      	mov	r2, r4
 808f862:	4616      	mov	r6, r2
 808f864:	7830      	ldrb	r0, [r6, #0]
 808f866:	3201      	adds	r2, #1
 808f868:	f7ff ff90 	bl	808f78c <__hexdig_fun>
 808f86c:	2800      	cmp	r0, #0
 808f86e:	d1f8      	bne.n	808f862 <__gethex+0xac>
 808f870:	b134      	cbz	r4, 808f880 <__gethex+0xca>
 808f872:	1ba4      	subs	r4, r4, r6
 808f874:	00a4      	lsls	r4, r4, #2
 808f876:	e003      	b.n	808f880 <__gethex+0xca>
 808f878:	463e      	mov	r6, r7
 808f87a:	e000      	b.n	808f87e <__gethex+0xc8>
 808f87c:	4604      	mov	r4, r0
 808f87e:	2501      	movs	r5, #1
 808f880:	7833      	ldrb	r3, [r6, #0]
 808f882:	2b50      	cmp	r3, #80	; 0x50
 808f884:	d001      	beq.n	808f88a <__gethex+0xd4>
 808f886:	2b70      	cmp	r3, #112	; 0x70
 808f888:	d12a      	bne.n	808f8e0 <__gethex+0x12a>
 808f88a:	7873      	ldrb	r3, [r6, #1]
 808f88c:	2b2b      	cmp	r3, #43	; 0x2b
 808f88e:	d008      	beq.n	808f8a2 <__gethex+0xec>
 808f890:	2b2d      	cmp	r3, #45	; 0x2d
 808f892:	d003      	beq.n	808f89c <__gethex+0xe6>
 808f894:	1c71      	adds	r1, r6, #1
 808f896:	f04f 0900 	mov.w	r9, #0
 808f89a:	e005      	b.n	808f8a8 <__gethex+0xf2>
 808f89c:	f04f 0901 	mov.w	r9, #1
 808f8a0:	e001      	b.n	808f8a6 <__gethex+0xf0>
 808f8a2:	f04f 0900 	mov.w	r9, #0
 808f8a6:	1cb1      	adds	r1, r6, #2
 808f8a8:	7808      	ldrb	r0, [r1, #0]
 808f8aa:	f7ff ff6f 	bl	808f78c <__hexdig_fun>
 808f8ae:	1e43      	subs	r3, r0, #1
 808f8b0:	b2db      	uxtb	r3, r3
 808f8b2:	2b18      	cmp	r3, #24
 808f8b4:	d814      	bhi.n	808f8e0 <__gethex+0x12a>
 808f8b6:	f1a0 0210 	sub.w	r2, r0, #16
 808f8ba:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 808f8be:	f7ff ff65 	bl	808f78c <__hexdig_fun>
 808f8c2:	1e43      	subs	r3, r0, #1
 808f8c4:	b2db      	uxtb	r3, r3
 808f8c6:	2b18      	cmp	r3, #24
 808f8c8:	d804      	bhi.n	808f8d4 <__gethex+0x11e>
 808f8ca:	230a      	movs	r3, #10
 808f8cc:	fb03 0202 	mla	r2, r3, r2, r0
 808f8d0:	3a10      	subs	r2, #16
 808f8d2:	e7f2      	b.n	808f8ba <__gethex+0x104>
 808f8d4:	f1b9 0f00 	cmp.w	r9, #0
 808f8d8:	d000      	beq.n	808f8dc <__gethex+0x126>
 808f8da:	4252      	negs	r2, r2
 808f8dc:	4414      	add	r4, r2
 808f8de:	e000      	b.n	808f8e2 <__gethex+0x12c>
 808f8e0:	4631      	mov	r1, r6
 808f8e2:	f8ca 1000 	str.w	r1, [sl]
 808f8e6:	b12d      	cbz	r5, 808f8f4 <__gethex+0x13e>
 808f8e8:	f1bb 0f00 	cmp.w	fp, #0
 808f8ec:	bf14      	ite	ne
 808f8ee:	2000      	movne	r0, #0
 808f8f0:	2006      	moveq	r0, #6
 808f8f2:	e17c      	b.n	808fbee <__gethex+0x438>
 808f8f4:	4629      	mov	r1, r5
 808f8f6:	1bf3      	subs	r3, r6, r7
 808f8f8:	3b01      	subs	r3, #1
 808f8fa:	2b07      	cmp	r3, #7
 808f8fc:	dd02      	ble.n	808f904 <__gethex+0x14e>
 808f8fe:	3101      	adds	r1, #1
 808f900:	105b      	asrs	r3, r3, #1
 808f902:	e7fa      	b.n	808f8fa <__gethex+0x144>
 808f904:	9802      	ldr	r0, [sp, #8]
 808f906:	f000 fb0b 	bl	808ff20 <_Balloc>
 808f90a:	f04f 0900 	mov.w	r9, #0
 808f90e:	4605      	mov	r5, r0
 808f910:	46cb      	mov	fp, r9
 808f912:	9b01      	ldr	r3, [sp, #4]
 808f914:	f100 0a14 	add.w	sl, r0, #20
 808f918:	f1c3 0301 	rsb	r3, r3, #1
 808f91c:	f8cd a010 	str.w	sl, [sp, #16]
 808f920:	9308      	str	r3, [sp, #32]
 808f922:	42b7      	cmp	r7, r6
 808f924:	d22f      	bcs.n	808f986 <__gethex+0x1d0>
 808f926:	1e73      	subs	r3, r6, #1
 808f928:	9305      	str	r3, [sp, #20]
 808f92a:	9a07      	ldr	r2, [sp, #28]
 808f92c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 808f930:	4293      	cmp	r3, r2
 808f932:	d00b      	beq.n	808f94c <__gethex+0x196>
 808f934:	f1bb 0f20 	cmp.w	fp, #32
 808f938:	d116      	bne.n	808f968 <__gethex+0x1b2>
 808f93a:	9b04      	ldr	r3, [sp, #16]
 808f93c:	f8c3 9000 	str.w	r9, [r3]
 808f940:	3304      	adds	r3, #4
 808f942:	f04f 0900 	mov.w	r9, #0
 808f946:	9304      	str	r3, [sp, #16]
 808f948:	46cb      	mov	fp, r9
 808f94a:	e00d      	b.n	808f968 <__gethex+0x1b2>
 808f94c:	9b05      	ldr	r3, [sp, #20]
 808f94e:	9a08      	ldr	r2, [sp, #32]
 808f950:	4413      	add	r3, r2
 808f952:	429f      	cmp	r7, r3
 808f954:	d8ee      	bhi.n	808f934 <__gethex+0x17e>
 808f956:	4618      	mov	r0, r3
 808f958:	9a01      	ldr	r2, [sp, #4]
 808f95a:	9903      	ldr	r1, [sp, #12]
 808f95c:	9309      	str	r3, [sp, #36]	; 0x24
 808f95e:	f7fe fd15 	bl	808e38c <strncmp>
 808f962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808f964:	b168      	cbz	r0, 808f982 <__gethex+0x1cc>
 808f966:	e7e5      	b.n	808f934 <__gethex+0x17e>
 808f968:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 808f96c:	f7ff ff0e 	bl	808f78c <__hexdig_fun>
 808f970:	f000 000f 	and.w	r0, r0, #15
 808f974:	fa00 f00b 	lsl.w	r0, r0, fp
 808f978:	9b05      	ldr	r3, [sp, #20]
 808f97a:	ea49 0900 	orr.w	r9, r9, r0
 808f97e:	f10b 0b04 	add.w	fp, fp, #4
 808f982:	461e      	mov	r6, r3
 808f984:	e7cd      	b.n	808f922 <__gethex+0x16c>
 808f986:	9804      	ldr	r0, [sp, #16]
 808f988:	f840 9b04 	str.w	r9, [r0], #4
 808f98c:	ebca 0000 	rsb	r0, sl, r0
 808f990:	1080      	asrs	r0, r0, #2
 808f992:	6128      	str	r0, [r5, #16]
 808f994:	0147      	lsls	r7, r0, #5
 808f996:	4648      	mov	r0, r9
 808f998:	f000 fb87 	bl	80900aa <__hi0bits>
 808f99c:	f8d8 6000 	ldr.w	r6, [r8]
 808f9a0:	1a38      	subs	r0, r7, r0
 808f9a2:	42b0      	cmp	r0, r6
 808f9a4:	dd26      	ble.n	808f9f4 <__gethex+0x23e>
 808f9a6:	1b87      	subs	r7, r0, r6
 808f9a8:	4639      	mov	r1, r7
 808f9aa:	4628      	mov	r0, r5
 808f9ac:	f000 fe7f 	bl	80906ae <__any_on>
 808f9b0:	b1c8      	cbz	r0, 808f9e6 <__gethex+0x230>
 808f9b2:	1e7b      	subs	r3, r7, #1
 808f9b4:	1159      	asrs	r1, r3, #5
 808f9b6:	f003 021f 	and.w	r2, r3, #31
 808f9ba:	f04f 0901 	mov.w	r9, #1
 808f9be:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 808f9c2:	fa09 f202 	lsl.w	r2, r9, r2
 808f9c6:	420a      	tst	r2, r1
 808f9c8:	d00e      	beq.n	808f9e8 <__gethex+0x232>
 808f9ca:	454b      	cmp	r3, r9
 808f9cc:	dc02      	bgt.n	808f9d4 <__gethex+0x21e>
 808f9ce:	f04f 0902 	mov.w	r9, #2
 808f9d2:	e009      	b.n	808f9e8 <__gethex+0x232>
 808f9d4:	1eb9      	subs	r1, r7, #2
 808f9d6:	4628      	mov	r0, r5
 808f9d8:	f000 fe69 	bl	80906ae <__any_on>
 808f9dc:	2800      	cmp	r0, #0
 808f9de:	d0f6      	beq.n	808f9ce <__gethex+0x218>
 808f9e0:	f04f 0903 	mov.w	r9, #3
 808f9e4:	e000      	b.n	808f9e8 <__gethex+0x232>
 808f9e6:	4681      	mov	r9, r0
 808f9e8:	4639      	mov	r1, r7
 808f9ea:	4628      	mov	r0, r5
 808f9ec:	f7ff fe98 	bl	808f720 <rshift>
 808f9f0:	443c      	add	r4, r7
 808f9f2:	e00c      	b.n	808fa0e <__gethex+0x258>
 808f9f4:	da09      	bge.n	808fa0a <__gethex+0x254>
 808f9f6:	1a37      	subs	r7, r6, r0
 808f9f8:	4629      	mov	r1, r5
 808f9fa:	463a      	mov	r2, r7
 808f9fc:	9802      	ldr	r0, [sp, #8]
 808f9fe:	f000 fc89 	bl	8090314 <__lshift>
 808fa02:	4605      	mov	r5, r0
 808fa04:	1be4      	subs	r4, r4, r7
 808fa06:	f100 0a14 	add.w	sl, r0, #20
 808fa0a:	f04f 0900 	mov.w	r9, #0
 808fa0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 808fa12:	429c      	cmp	r4, r3
 808fa14:	dd08      	ble.n	808fa28 <__gethex+0x272>
 808fa16:	9802      	ldr	r0, [sp, #8]
 808fa18:	4629      	mov	r1, r5
 808fa1a:	f000 fab6 	bl	808ff8a <_Bfree>
 808fa1e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 808fa20:	2300      	movs	r3, #0
 808fa22:	6013      	str	r3, [r2, #0]
 808fa24:	20a3      	movs	r0, #163	; 0xa3
 808fa26:	e0e2      	b.n	808fbee <__gethex+0x438>
 808fa28:	f8d8 0004 	ldr.w	r0, [r8, #4]
 808fa2c:	4284      	cmp	r4, r0
 808fa2e:	da53      	bge.n	808fad8 <__gethex+0x322>
 808fa30:	1b04      	subs	r4, r0, r4
 808fa32:	42a6      	cmp	r6, r4
 808fa34:	dc2e      	bgt.n	808fa94 <__gethex+0x2de>
 808fa36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 808fa3a:	2b02      	cmp	r3, #2
 808fa3c:	d01a      	beq.n	808fa74 <__gethex+0x2be>
 808fa3e:	2b03      	cmp	r3, #3
 808fa40:	d01c      	beq.n	808fa7c <__gethex+0x2c6>
 808fa42:	2b01      	cmp	r3, #1
 808fa44:	d11d      	bne.n	808fa82 <__gethex+0x2cc>
 808fa46:	42a6      	cmp	r6, r4
 808fa48:	d11b      	bne.n	808fa82 <__gethex+0x2cc>
 808fa4a:	2e01      	cmp	r6, #1
 808fa4c:	dc0b      	bgt.n	808fa66 <__gethex+0x2b0>
 808fa4e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 808fa52:	9a06      	ldr	r2, [sp, #24]
 808fa54:	2062      	movs	r0, #98	; 0x62
 808fa56:	6013      	str	r3, [r2, #0]
 808fa58:	2301      	movs	r3, #1
 808fa5a:	612b      	str	r3, [r5, #16]
 808fa5c:	f8ca 3000 	str.w	r3, [sl]
 808fa60:	9b14      	ldr	r3, [sp, #80]	; 0x50
 808fa62:	601d      	str	r5, [r3, #0]
 808fa64:	e0c3      	b.n	808fbee <__gethex+0x438>
 808fa66:	1e71      	subs	r1, r6, #1
 808fa68:	4628      	mov	r0, r5
 808fa6a:	f000 fe20 	bl	80906ae <__any_on>
 808fa6e:	2800      	cmp	r0, #0
 808fa70:	d1ed      	bne.n	808fa4e <__gethex+0x298>
 808fa72:	e006      	b.n	808fa82 <__gethex+0x2cc>
 808fa74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808fa76:	2b00      	cmp	r3, #0
 808fa78:	d0e9      	beq.n	808fa4e <__gethex+0x298>
 808fa7a:	e002      	b.n	808fa82 <__gethex+0x2cc>
 808fa7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808fa7e:	2b00      	cmp	r3, #0
 808fa80:	d1e5      	bne.n	808fa4e <__gethex+0x298>
 808fa82:	9802      	ldr	r0, [sp, #8]
 808fa84:	4629      	mov	r1, r5
 808fa86:	f000 fa80 	bl	808ff8a <_Bfree>
 808fa8a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 808fa8c:	2300      	movs	r3, #0
 808fa8e:	6013      	str	r3, [r2, #0]
 808fa90:	2050      	movs	r0, #80	; 0x50
 808fa92:	e0ac      	b.n	808fbee <__gethex+0x438>
 808fa94:	1e67      	subs	r7, r4, #1
 808fa96:	f1b9 0f00 	cmp.w	r9, #0
 808fa9a:	d106      	bne.n	808faaa <__gethex+0x2f4>
 808fa9c:	b13f      	cbz	r7, 808faae <__gethex+0x2f8>
 808fa9e:	4639      	mov	r1, r7
 808faa0:	4628      	mov	r0, r5
 808faa2:	f000 fe04 	bl	80906ae <__any_on>
 808faa6:	4681      	mov	r9, r0
 808faa8:	e001      	b.n	808faae <__gethex+0x2f8>
 808faaa:	f04f 0901 	mov.w	r9, #1
 808faae:	117a      	asrs	r2, r7, #5
 808fab0:	2301      	movs	r3, #1
 808fab2:	f007 071f 	and.w	r7, r7, #31
 808fab6:	fa03 f707 	lsl.w	r7, r3, r7
 808faba:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 808fabe:	4621      	mov	r1, r4
 808fac0:	421f      	tst	r7, r3
 808fac2:	4628      	mov	r0, r5
 808fac4:	bf18      	it	ne
 808fac6:	f049 0902 	orrne.w	r9, r9, #2
 808faca:	1b36      	subs	r6, r6, r4
 808facc:	f7ff fe28 	bl	808f720 <rshift>
 808fad0:	2702      	movs	r7, #2
 808fad2:	f8d8 4004 	ldr.w	r4, [r8, #4]
 808fad6:	e000      	b.n	808fada <__gethex+0x324>
 808fad8:	2701      	movs	r7, #1
 808fada:	f1b9 0f00 	cmp.w	r9, #0
 808fade:	f000 8081 	beq.w	808fbe4 <__gethex+0x42e>
 808fae2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 808fae6:	2b02      	cmp	r3, #2
 808fae8:	d00e      	beq.n	808fb08 <__gethex+0x352>
 808faea:	2b03      	cmp	r3, #3
 808faec:	d010      	beq.n	808fb10 <__gethex+0x35a>
 808faee:	2b01      	cmp	r3, #1
 808faf0:	d176      	bne.n	808fbe0 <__gethex+0x42a>
 808faf2:	f019 0f02 	tst.w	r9, #2
 808faf6:	d073      	beq.n	808fbe0 <__gethex+0x42a>
 808faf8:	f8da 0000 	ldr.w	r0, [sl]
 808fafc:	ea49 0900 	orr.w	r9, r9, r0
 808fb00:	f019 0f01 	tst.w	r9, #1
 808fb04:	d107      	bne.n	808fb16 <__gethex+0x360>
 808fb06:	e06b      	b.n	808fbe0 <__gethex+0x42a>
 808fb08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808fb0a:	f1c3 0301 	rsb	r3, r3, #1
 808fb0e:	9315      	str	r3, [sp, #84]	; 0x54
 808fb10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808fb12:	2b00      	cmp	r3, #0
 808fb14:	d064      	beq.n	808fbe0 <__gethex+0x42a>
 808fb16:	f8d5 a010 	ldr.w	sl, [r5, #16]
 808fb1a:	f105 0314 	add.w	r3, r5, #20
 808fb1e:	ea4f 098a 	mov.w	r9, sl, lsl #2
 808fb22:	eb03 0109 	add.w	r1, r3, r9
 808fb26:	2000      	movs	r0, #0
 808fb28:	681a      	ldr	r2, [r3, #0]
 808fb2a:	f1b2 3fff 	cmp.w	r2, #4294967295
 808fb2e:	d002      	beq.n	808fb36 <__gethex+0x380>
 808fb30:	3201      	adds	r2, #1
 808fb32:	601a      	str	r2, [r3, #0]
 808fb34:	e020      	b.n	808fb78 <__gethex+0x3c2>
 808fb36:	f843 0b04 	str.w	r0, [r3], #4
 808fb3a:	4299      	cmp	r1, r3
 808fb3c:	d8f4      	bhi.n	808fb28 <__gethex+0x372>
 808fb3e:	68ab      	ldr	r3, [r5, #8]
 808fb40:	459a      	cmp	sl, r3
 808fb42:	db12      	blt.n	808fb6a <__gethex+0x3b4>
 808fb44:	6869      	ldr	r1, [r5, #4]
 808fb46:	9802      	ldr	r0, [sp, #8]
 808fb48:	3101      	adds	r1, #1
 808fb4a:	f000 f9e9 	bl	808ff20 <_Balloc>
 808fb4e:	4683      	mov	fp, r0
 808fb50:	692a      	ldr	r2, [r5, #16]
 808fb52:	f105 010c 	add.w	r1, r5, #12
 808fb56:	3202      	adds	r2, #2
 808fb58:	0092      	lsls	r2, r2, #2
 808fb5a:	300c      	adds	r0, #12
 808fb5c:	f7fd fe83 	bl	808d866 <memcpy>
 808fb60:	4629      	mov	r1, r5
 808fb62:	9802      	ldr	r0, [sp, #8]
 808fb64:	f000 fa11 	bl	808ff8a <_Bfree>
 808fb68:	465d      	mov	r5, fp
 808fb6a:	692b      	ldr	r3, [r5, #16]
 808fb6c:	1c5a      	adds	r2, r3, #1
 808fb6e:	612a      	str	r2, [r5, #16]
 808fb70:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 808fb74:	2201      	movs	r2, #1
 808fb76:	615a      	str	r2, [r3, #20]
 808fb78:	2f02      	cmp	r7, #2
 808fb7a:	f105 0214 	add.w	r2, r5, #20
 808fb7e:	d111      	bne.n	808fba4 <__gethex+0x3ee>
 808fb80:	f8d8 3000 	ldr.w	r3, [r8]
 808fb84:	3b01      	subs	r3, #1
 808fb86:	429e      	cmp	r6, r3
 808fb88:	d127      	bne.n	808fbda <__gethex+0x424>
 808fb8a:	1171      	asrs	r1, r6, #5
 808fb8c:	2301      	movs	r3, #1
 808fb8e:	f006 061f 	and.w	r6, r6, #31
 808fb92:	fa03 f606 	lsl.w	r6, r3, r6
 808fb96:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 808fb9a:	421e      	tst	r6, r3
 808fb9c:	bf0c      	ite	eq
 808fb9e:	2702      	moveq	r7, #2
 808fba0:	2701      	movne	r7, #1
 808fba2:	e01a      	b.n	808fbda <__gethex+0x424>
 808fba4:	692b      	ldr	r3, [r5, #16]
 808fba6:	459a      	cmp	sl, r3
 808fba8:	da0a      	bge.n	808fbc0 <__gethex+0x40a>
 808fbaa:	2101      	movs	r1, #1
 808fbac:	4628      	mov	r0, r5
 808fbae:	f7ff fdb7 	bl	808f720 <rshift>
 808fbb2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 808fbb6:	3401      	adds	r4, #1
 808fbb8:	429c      	cmp	r4, r3
 808fbba:	f73f af2c 	bgt.w	808fa16 <__gethex+0x260>
 808fbbe:	e00b      	b.n	808fbd8 <__gethex+0x422>
 808fbc0:	f016 061f 	ands.w	r6, r6, #31
 808fbc4:	d008      	beq.n	808fbd8 <__gethex+0x422>
 808fbc6:	4491      	add	r9, r2
 808fbc8:	f859 0c04 	ldr.w	r0, [r9, #-4]
 808fbcc:	f000 fa6d 	bl	80900aa <__hi0bits>
 808fbd0:	f1c6 0620 	rsb	r6, r6, #32
 808fbd4:	42b0      	cmp	r0, r6
 808fbd6:	dbe8      	blt.n	808fbaa <__gethex+0x3f4>
 808fbd8:	2701      	movs	r7, #1
 808fbda:	f047 0720 	orr.w	r7, r7, #32
 808fbde:	e001      	b.n	808fbe4 <__gethex+0x42e>
 808fbe0:	f047 0710 	orr.w	r7, r7, #16
 808fbe4:	4638      	mov	r0, r7
 808fbe6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 808fbe8:	601d      	str	r5, [r3, #0]
 808fbea:	9b06      	ldr	r3, [sp, #24]
 808fbec:	601c      	str	r4, [r3, #0]
 808fbee:	b00b      	add	sp, #44	; 0x2c
 808fbf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808fbf4 <L_shift>:
 808fbf4:	f1c2 0208 	rsb	r2, r2, #8
 808fbf8:	0092      	lsls	r2, r2, #2
 808fbfa:	b570      	push	{r4, r5, r6, lr}
 808fbfc:	f1c2 0620 	rsb	r6, r2, #32
 808fc00:	6843      	ldr	r3, [r0, #4]
 808fc02:	6805      	ldr	r5, [r0, #0]
 808fc04:	fa03 f406 	lsl.w	r4, r3, r6
 808fc08:	432c      	orrs	r4, r5
 808fc0a:	40d3      	lsrs	r3, r2
 808fc0c:	6004      	str	r4, [r0, #0]
 808fc0e:	f840 3f04 	str.w	r3, [r0, #4]!
 808fc12:	4288      	cmp	r0, r1
 808fc14:	d3f4      	bcc.n	808fc00 <L_shift+0xc>
 808fc16:	bd70      	pop	{r4, r5, r6, pc}

0808fc18 <__match>:
 808fc18:	b530      	push	{r4, r5, lr}
 808fc1a:	6803      	ldr	r3, [r0, #0]
 808fc1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 808fc20:	3301      	adds	r3, #1
 808fc22:	b14c      	cbz	r4, 808fc38 <__match+0x20>
 808fc24:	781a      	ldrb	r2, [r3, #0]
 808fc26:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 808fc2a:	2d19      	cmp	r5, #25
 808fc2c:	bf98      	it	ls
 808fc2e:	3220      	addls	r2, #32
 808fc30:	42a2      	cmp	r2, r4
 808fc32:	d0f3      	beq.n	808fc1c <__match+0x4>
 808fc34:	2000      	movs	r0, #0
 808fc36:	bd30      	pop	{r4, r5, pc}
 808fc38:	6003      	str	r3, [r0, #0]
 808fc3a:	2001      	movs	r0, #1
 808fc3c:	bd30      	pop	{r4, r5, pc}

0808fc3e <__hexnan>:
 808fc3e:	680b      	ldr	r3, [r1, #0]
 808fc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808fc44:	115e      	asrs	r6, r3, #5
 808fc46:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 808fc4a:	f013 031f 	ands.w	r3, r3, #31
 808fc4e:	bf18      	it	ne
 808fc50:	3604      	addne	r6, #4
 808fc52:	1f35      	subs	r5, r6, #4
 808fc54:	4617      	mov	r7, r2
 808fc56:	2200      	movs	r2, #0
 808fc58:	4682      	mov	sl, r0
 808fc5a:	46a8      	mov	r8, r5
 808fc5c:	462c      	mov	r4, r5
 808fc5e:	4691      	mov	r9, r2
 808fc60:	b085      	sub	sp, #20
 808fc62:	f8d0 b000 	ldr.w	fp, [r0]
 808fc66:	9301      	str	r3, [sp, #4]
 808fc68:	f846 2c04 	str.w	r2, [r6, #-4]
 808fc6c:	9200      	str	r2, [sp, #0]
 808fc6e:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 808fc72:	2900      	cmp	r1, #0
 808fc74:	d03c      	beq.n	808fcf0 <__hexnan+0xb2>
 808fc76:	4608      	mov	r0, r1
 808fc78:	9203      	str	r2, [sp, #12]
 808fc7a:	9102      	str	r1, [sp, #8]
 808fc7c:	f7ff fd86 	bl	808f78c <__hexdig_fun>
 808fc80:	9a03      	ldr	r2, [sp, #12]
 808fc82:	bb00      	cbnz	r0, 808fcc6 <__hexnan+0x88>
 808fc84:	9902      	ldr	r1, [sp, #8]
 808fc86:	2920      	cmp	r1, #32
 808fc88:	d816      	bhi.n	808fcb8 <__hexnan+0x7a>
 808fc8a:	9b00      	ldr	r3, [sp, #0]
 808fc8c:	4599      	cmp	r9, r3
 808fc8e:	ddee      	ble.n	808fc6e <__hexnan+0x30>
 808fc90:	4544      	cmp	r4, r8
 808fc92:	d205      	bcs.n	808fca0 <__hexnan+0x62>
 808fc94:	2a07      	cmp	r2, #7
 808fc96:	dc03      	bgt.n	808fca0 <__hexnan+0x62>
 808fc98:	4641      	mov	r1, r8
 808fc9a:	4620      	mov	r0, r4
 808fc9c:	f7ff ffaa 	bl	808fbf4 <L_shift>
 808fca0:	42bc      	cmp	r4, r7
 808fca2:	d923      	bls.n	808fcec <__hexnan+0xae>
 808fca4:	2300      	movs	r3, #0
 808fca6:	f1a4 0804 	sub.w	r8, r4, #4
 808fcaa:	f844 3c04 	str.w	r3, [r4, #-4]
 808fcae:	f8cd 9000 	str.w	r9, [sp]
 808fcb2:	4644      	mov	r4, r8
 808fcb4:	461a      	mov	r2, r3
 808fcb6:	e7da      	b.n	808fc6e <__hexnan+0x30>
 808fcb8:	2929      	cmp	r1, #41	; 0x29
 808fcba:	d148      	bne.n	808fd4e <__hexnan+0x110>
 808fcbc:	f10b 0301 	add.w	r3, fp, #1
 808fcc0:	f8ca 3000 	str.w	r3, [sl]
 808fcc4:	e014      	b.n	808fcf0 <__hexnan+0xb2>
 808fcc6:	3201      	adds	r2, #1
 808fcc8:	2a08      	cmp	r2, #8
 808fcca:	f109 0901 	add.w	r9, r9, #1
 808fcce:	dd06      	ble.n	808fcde <__hexnan+0xa0>
 808fcd0:	42bc      	cmp	r4, r7
 808fcd2:	d9cc      	bls.n	808fc6e <__hexnan+0x30>
 808fcd4:	2300      	movs	r3, #0
 808fcd6:	f844 3c04 	str.w	r3, [r4, #-4]
 808fcda:	2201      	movs	r2, #1
 808fcdc:	3c04      	subs	r4, #4
 808fcde:	6821      	ldr	r1, [r4, #0]
 808fce0:	f000 000f 	and.w	r0, r0, #15
 808fce4:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 808fce8:	6020      	str	r0, [r4, #0]
 808fcea:	e7c0      	b.n	808fc6e <__hexnan+0x30>
 808fcec:	2208      	movs	r2, #8
 808fcee:	e7be      	b.n	808fc6e <__hexnan+0x30>
 808fcf0:	f1b9 0f00 	cmp.w	r9, #0
 808fcf4:	d02b      	beq.n	808fd4e <__hexnan+0x110>
 808fcf6:	4544      	cmp	r4, r8
 808fcf8:	d205      	bcs.n	808fd06 <__hexnan+0xc8>
 808fcfa:	2a07      	cmp	r2, #7
 808fcfc:	dc03      	bgt.n	808fd06 <__hexnan+0xc8>
 808fcfe:	4641      	mov	r1, r8
 808fd00:	4620      	mov	r0, r4
 808fd02:	f7ff ff77 	bl	808fbf4 <L_shift>
 808fd06:	42bc      	cmp	r4, r7
 808fd08:	d90c      	bls.n	808fd24 <__hexnan+0xe6>
 808fd0a:	463b      	mov	r3, r7
 808fd0c:	f854 2b04 	ldr.w	r2, [r4], #4
 808fd10:	42a5      	cmp	r5, r4
 808fd12:	f843 2b04 	str.w	r2, [r3], #4
 808fd16:	d2f9      	bcs.n	808fd0c <__hexnan+0xce>
 808fd18:	2200      	movs	r2, #0
 808fd1a:	f843 2b04 	str.w	r2, [r3], #4
 808fd1e:	429d      	cmp	r5, r3
 808fd20:	d2fb      	bcs.n	808fd1a <__hexnan+0xdc>
 808fd22:	e00b      	b.n	808fd3c <__hexnan+0xfe>
 808fd24:	9b01      	ldr	r3, [sp, #4]
 808fd26:	b14b      	cbz	r3, 808fd3c <__hexnan+0xfe>
 808fd28:	f1c3 0220 	rsb	r2, r3, #32
 808fd2c:	f04f 33ff 	mov.w	r3, #4294967295
 808fd30:	40d3      	lsrs	r3, r2
 808fd32:	f856 2c04 	ldr.w	r2, [r6, #-4]
 808fd36:	4013      	ands	r3, r2
 808fd38:	f846 3c04 	str.w	r3, [r6, #-4]
 808fd3c:	682b      	ldr	r3, [r5, #0]
 808fd3e:	b943      	cbnz	r3, 808fd52 <__hexnan+0x114>
 808fd40:	42bd      	cmp	r5, r7
 808fd42:	d102      	bne.n	808fd4a <__hexnan+0x10c>
 808fd44:	2301      	movs	r3, #1
 808fd46:	602b      	str	r3, [r5, #0]
 808fd48:	e003      	b.n	808fd52 <__hexnan+0x114>
 808fd4a:	3d04      	subs	r5, #4
 808fd4c:	e7f6      	b.n	808fd3c <__hexnan+0xfe>
 808fd4e:	2004      	movs	r0, #4
 808fd50:	e000      	b.n	808fd54 <__hexnan+0x116>
 808fd52:	2005      	movs	r0, #5
 808fd54:	b005      	add	sp, #20
 808fd56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0808fd5c <_findenv_r>:
 808fd5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808fd60:	4607      	mov	r7, r0
 808fd62:	468b      	mov	fp, r1
 808fd64:	4690      	mov	r8, r2
 808fd66:	f000 fcd2 	bl	809070e <__env_lock>
 808fd6a:	4b19      	ldr	r3, [pc, #100]	; (808fdd0 <_findenv_r+0x74>)
 808fd6c:	681d      	ldr	r5, [r3, #0]
 808fd6e:	469a      	mov	sl, r3
 808fd70:	b13d      	cbz	r5, 808fd82 <_findenv_r+0x26>
 808fd72:	465c      	mov	r4, fp
 808fd74:	4623      	mov	r3, r4
 808fd76:	f813 2b01 	ldrb.w	r2, [r3], #1
 808fd7a:	b142      	cbz	r2, 808fd8e <_findenv_r+0x32>
 808fd7c:	2a3d      	cmp	r2, #61	; 0x3d
 808fd7e:	461c      	mov	r4, r3
 808fd80:	d1f8      	bne.n	808fd74 <_findenv_r+0x18>
 808fd82:	4638      	mov	r0, r7
 808fd84:	f000 fcc4 	bl	8090710 <__env_unlock>
 808fd88:	2000      	movs	r0, #0
 808fd8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808fd8e:	ebcb 0404 	rsb	r4, fp, r4
 808fd92:	46a9      	mov	r9, r5
 808fd94:	f859 0b04 	ldr.w	r0, [r9], #4
 808fd98:	2800      	cmp	r0, #0
 808fd9a:	d0f2      	beq.n	808fd82 <_findenv_r+0x26>
 808fd9c:	4622      	mov	r2, r4
 808fd9e:	4659      	mov	r1, fp
 808fda0:	f7fe faf4 	bl	808e38c <strncmp>
 808fda4:	b988      	cbnz	r0, 808fdca <_findenv_r+0x6e>
 808fda6:	f859 3c04 	ldr.w	r3, [r9, #-4]
 808fdaa:	191e      	adds	r6, r3, r4
 808fdac:	5d1b      	ldrb	r3, [r3, r4]
 808fdae:	2b3d      	cmp	r3, #61	; 0x3d
 808fdb0:	d10b      	bne.n	808fdca <_findenv_r+0x6e>
 808fdb2:	f8da 3000 	ldr.w	r3, [sl]
 808fdb6:	4638      	mov	r0, r7
 808fdb8:	1aed      	subs	r5, r5, r3
 808fdba:	10ad      	asrs	r5, r5, #2
 808fdbc:	f8c8 5000 	str.w	r5, [r8]
 808fdc0:	f000 fca6 	bl	8090710 <__env_unlock>
 808fdc4:	1c70      	adds	r0, r6, #1
 808fdc6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808fdca:	464d      	mov	r5, r9
 808fdcc:	e7e1      	b.n	808fd92 <_findenv_r+0x36>
 808fdce:	bf00      	nop
 808fdd0:	200001c8 	.word	0x200001c8

0808fdd4 <_getenv_r>:
 808fdd4:	b507      	push	{r0, r1, r2, lr}
 808fdd6:	aa01      	add	r2, sp, #4
 808fdd8:	f7ff ffc0 	bl	808fd5c <_findenv_r>
 808fddc:	b003      	add	sp, #12
 808fdde:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0808fde4 <__gettzinfo>:
 808fde4:	4800      	ldr	r0, [pc, #0]	; (808fde8 <__gettzinfo+0x4>)
 808fde6:	4770      	bx	lr
 808fde8:	20000188 	.word	0x20000188

0808fdec <gmtime_r>:
 808fdec:	6802      	ldr	r2, [r0, #0]
 808fdee:	4b46      	ldr	r3, [pc, #280]	; (808ff08 <gmtime_r+0x11c>)
 808fdf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 808fdf2:	fb92 f4f3 	sdiv	r4, r2, r3
 808fdf6:	fb03 2214 	mls	r2, r3, r4, r2
 808fdfa:	2a00      	cmp	r2, #0
 808fdfc:	bfbc      	itt	lt
 808fdfe:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 808fe02:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 808fe06:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 808fe0a:	fb92 f3f0 	sdiv	r3, r2, r0
 808fe0e:	fb00 2213 	mls	r2, r0, r3, r2
 808fe12:	f04f 003c 	mov.w	r0, #60	; 0x3c
 808fe16:	608b      	str	r3, [r1, #8]
 808fe18:	fb92 f3f0 	sdiv	r3, r2, r0
 808fe1c:	fb00 2213 	mls	r2, r0, r3, r2
 808fe20:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 808fe24:	bfac      	ite	ge
 808fe26:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 808fe2a:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 808fe2e:	604b      	str	r3, [r1, #4]
 808fe30:	600a      	str	r2, [r1, #0]
 808fe32:	2307      	movs	r3, #7
 808fe34:	1ce2      	adds	r2, r4, #3
 808fe36:	fb92 f3f3 	sdiv	r3, r2, r3
 808fe3a:	4d34      	ldr	r5, [pc, #208]	; (808ff0c <gmtime_r+0x120>)
 808fe3c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 808fe40:	fb94 f5f5 	sdiv	r5, r4, r5
 808fe44:	1ad3      	subs	r3, r2, r3
 808fe46:	f648 62ac 	movw	r2, #36524	; 0x8eac
 808fe4a:	f240 57b4 	movw	r7, #1460	; 0x5b4
 808fe4e:	618b      	str	r3, [r1, #24]
 808fe50:	4b2f      	ldr	r3, [pc, #188]	; (808ff10 <gmtime_r+0x124>)
 808fe52:	4830      	ldr	r0, [pc, #192]	; (808ff14 <gmtime_r+0x128>)
 808fe54:	fb03 4405 	mla	r4, r3, r5, r4
 808fe58:	fbb4 f2f2 	udiv	r2, r4, r2
 808fe5c:	fbb4 f3f7 	udiv	r3, r4, r7
 808fe60:	fbb4 f0f0 	udiv	r0, r4, r0
 808fe64:	4422      	add	r2, r4
 808fe66:	1ad2      	subs	r2, r2, r3
 808fe68:	f648 6694 	movw	r6, #36500	; 0x8e94
 808fe6c:	1a13      	subs	r3, r2, r0
 808fe6e:	f240 126d 	movw	r2, #365	; 0x16d
 808fe72:	fbb3 f6f6 	udiv	r6, r3, r6
 808fe76:	fbb3 f0f2 	udiv	r0, r3, r2
 808fe7a:	fbb3 f3f7 	udiv	r3, r3, r7
 808fe7e:	4434      	add	r4, r6
 808fe80:	1ae3      	subs	r3, r4, r3
 808fe82:	fb02 3310 	mls	r3, r2, r0, r3
 808fe86:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 808fe8a:	2499      	movs	r4, #153	; 0x99
 808fe8c:	3202      	adds	r2, #2
 808fe8e:	fbb2 f2f4 	udiv	r2, r2, r4
 808fe92:	4354      	muls	r4, r2
 808fe94:	1ca6      	adds	r6, r4, #2
 808fe96:	2405      	movs	r4, #5
 808fe98:	fbb6 f4f4 	udiv	r4, r6, r4
 808fe9c:	2a0a      	cmp	r2, #10
 808fe9e:	bf34      	ite	cc
 808fea0:	2602      	movcc	r6, #2
 808fea2:	f06f 0609 	mvncs.w	r6, #9
 808fea6:	4416      	add	r6, r2
 808fea8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808feac:	fb02 0505 	mla	r5, r2, r5, r0
 808feb0:	1c5f      	adds	r7, r3, #1
 808feb2:	2e01      	cmp	r6, #1
 808feb4:	bf98      	it	ls
 808feb6:	3501      	addls	r5, #1
 808feb8:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 808febc:	eba7 0704 	sub.w	r7, r7, r4
 808fec0:	d302      	bcc.n	808fec8 <gmtime_r+0xdc>
 808fec2:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 808fec6:	e014      	b.n	808fef2 <gmtime_r+0x106>
 808fec8:	0782      	lsls	r2, r0, #30
 808feca:	d105      	bne.n	808fed8 <gmtime_r+0xec>
 808fecc:	2464      	movs	r4, #100	; 0x64
 808fece:	fbb0 f2f4 	udiv	r2, r0, r4
 808fed2:	fb04 0212 	mls	r2, r4, r2, r0
 808fed6:	b94a      	cbnz	r2, 808feec <gmtime_r+0x100>
 808fed8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808fedc:	fbb0 f4f2 	udiv	r4, r0, r2
 808fee0:	fb02 0014 	mls	r0, r2, r4, r0
 808fee4:	fab0 f280 	clz	r2, r0
 808fee8:	0952      	lsrs	r2, r2, #5
 808feea:	e000      	b.n	808feee <gmtime_r+0x102>
 808feec:	2201      	movs	r2, #1
 808feee:	333b      	adds	r3, #59	; 0x3b
 808fef0:	441a      	add	r2, r3
 808fef2:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 808fef6:	2300      	movs	r3, #0
 808fef8:	61ca      	str	r2, [r1, #28]
 808fefa:	614d      	str	r5, [r1, #20]
 808fefc:	610e      	str	r6, [r1, #16]
 808fefe:	60cf      	str	r7, [r1, #12]
 808ff00:	620b      	str	r3, [r1, #32]
 808ff02:	4608      	mov	r0, r1
 808ff04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808ff06:	bf00      	nop
 808ff08:	00015180 	.word	0x00015180
 808ff0c:	00023ab1 	.word	0x00023ab1
 808ff10:	fffdc54f 	.word	0xfffdc54f
 808ff14:	00023ab0 	.word	0x00023ab0

0808ff18 <labs>:
 808ff18:	2800      	cmp	r0, #0
 808ff1a:	bfb8      	it	lt
 808ff1c:	4240      	neglt	r0, r0
 808ff1e:	4770      	bx	lr

0808ff20 <_Balloc>:
 808ff20:	b570      	push	{r4, r5, r6, lr}
 808ff22:	6a45      	ldr	r5, [r0, #36]	; 0x24
 808ff24:	4604      	mov	r4, r0
 808ff26:	460e      	mov	r6, r1
 808ff28:	b93d      	cbnz	r5, 808ff3a <_Balloc+0x1a>
 808ff2a:	2010      	movs	r0, #16
 808ff2c:	f7f9 fd0c 	bl	8089948 <malloc>
 808ff30:	6260      	str	r0, [r4, #36]	; 0x24
 808ff32:	6045      	str	r5, [r0, #4]
 808ff34:	6085      	str	r5, [r0, #8]
 808ff36:	6005      	str	r5, [r0, #0]
 808ff38:	60c5      	str	r5, [r0, #12]
 808ff3a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 808ff3c:	68eb      	ldr	r3, [r5, #12]
 808ff3e:	b143      	cbz	r3, 808ff52 <_Balloc+0x32>
 808ff40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808ff42:	68db      	ldr	r3, [r3, #12]
 808ff44:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 808ff48:	b178      	cbz	r0, 808ff6a <_Balloc+0x4a>
 808ff4a:	6802      	ldr	r2, [r0, #0]
 808ff4c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 808ff50:	e017      	b.n	808ff82 <_Balloc+0x62>
 808ff52:	2221      	movs	r2, #33	; 0x21
 808ff54:	2104      	movs	r1, #4
 808ff56:	4620      	mov	r0, r4
 808ff58:	f000 fbcb 	bl	80906f2 <_calloc_r>
 808ff5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808ff5e:	60e8      	str	r0, [r5, #12]
 808ff60:	68db      	ldr	r3, [r3, #12]
 808ff62:	2b00      	cmp	r3, #0
 808ff64:	d1ec      	bne.n	808ff40 <_Balloc+0x20>
 808ff66:	2000      	movs	r0, #0
 808ff68:	bd70      	pop	{r4, r5, r6, pc}
 808ff6a:	2101      	movs	r1, #1
 808ff6c:	fa01 f506 	lsl.w	r5, r1, r6
 808ff70:	1d6a      	adds	r2, r5, #5
 808ff72:	0092      	lsls	r2, r2, #2
 808ff74:	4620      	mov	r0, r4
 808ff76:	f000 fbbc 	bl	80906f2 <_calloc_r>
 808ff7a:	2800      	cmp	r0, #0
 808ff7c:	d0f3      	beq.n	808ff66 <_Balloc+0x46>
 808ff7e:	6046      	str	r6, [r0, #4]
 808ff80:	6085      	str	r5, [r0, #8]
 808ff82:	2300      	movs	r3, #0
 808ff84:	6103      	str	r3, [r0, #16]
 808ff86:	60c3      	str	r3, [r0, #12]
 808ff88:	bd70      	pop	{r4, r5, r6, pc}

0808ff8a <_Bfree>:
 808ff8a:	b570      	push	{r4, r5, r6, lr}
 808ff8c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 808ff8e:	4606      	mov	r6, r0
 808ff90:	460d      	mov	r5, r1
 808ff92:	b93c      	cbnz	r4, 808ffa4 <_Bfree+0x1a>
 808ff94:	2010      	movs	r0, #16
 808ff96:	f7f9 fcd7 	bl	8089948 <malloc>
 808ff9a:	6270      	str	r0, [r6, #36]	; 0x24
 808ff9c:	6044      	str	r4, [r0, #4]
 808ff9e:	6084      	str	r4, [r0, #8]
 808ffa0:	6004      	str	r4, [r0, #0]
 808ffa2:	60c4      	str	r4, [r0, #12]
 808ffa4:	b13d      	cbz	r5, 808ffb6 <_Bfree+0x2c>
 808ffa6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 808ffa8:	686a      	ldr	r2, [r5, #4]
 808ffaa:	68db      	ldr	r3, [r3, #12]
 808ffac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 808ffb0:	6029      	str	r1, [r5, #0]
 808ffb2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 808ffb6:	bd70      	pop	{r4, r5, r6, pc}

0808ffb8 <__multadd>:
 808ffb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808ffbc:	4606      	mov	r6, r0
 808ffbe:	460c      	mov	r4, r1
 808ffc0:	690d      	ldr	r5, [r1, #16]
 808ffc2:	461f      	mov	r7, r3
 808ffc4:	f101 0e14 	add.w	lr, r1, #20
 808ffc8:	2300      	movs	r3, #0
 808ffca:	f8de 0000 	ldr.w	r0, [lr]
 808ffce:	3301      	adds	r3, #1
 808ffd0:	b281      	uxth	r1, r0
 808ffd2:	fb02 7101 	mla	r1, r2, r1, r7
 808ffd6:	0c00      	lsrs	r0, r0, #16
 808ffd8:	0c0f      	lsrs	r7, r1, #16
 808ffda:	fb02 7000 	mla	r0, r2, r0, r7
 808ffde:	b289      	uxth	r1, r1
 808ffe0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 808ffe4:	429d      	cmp	r5, r3
 808ffe6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 808ffea:	f84e 1b04 	str.w	r1, [lr], #4
 808ffee:	dcec      	bgt.n	808ffca <__multadd+0x12>
 808fff0:	b1d7      	cbz	r7, 8090028 <__multadd+0x70>
 808fff2:	68a3      	ldr	r3, [r4, #8]
 808fff4:	429d      	cmp	r5, r3
 808fff6:	db12      	blt.n	809001e <__multadd+0x66>
 808fff8:	6861      	ldr	r1, [r4, #4]
 808fffa:	4630      	mov	r0, r6
 808fffc:	3101      	adds	r1, #1
 808fffe:	f7ff ff8f 	bl	808ff20 <_Balloc>
 8090002:	4680      	mov	r8, r0
 8090004:	6922      	ldr	r2, [r4, #16]
 8090006:	f104 010c 	add.w	r1, r4, #12
 809000a:	3202      	adds	r2, #2
 809000c:	0092      	lsls	r2, r2, #2
 809000e:	300c      	adds	r0, #12
 8090010:	f7fd fc29 	bl	808d866 <memcpy>
 8090014:	4621      	mov	r1, r4
 8090016:	4630      	mov	r0, r6
 8090018:	f7ff ffb7 	bl	808ff8a <_Bfree>
 809001c:	4644      	mov	r4, r8
 809001e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8090022:	3501      	adds	r5, #1
 8090024:	615f      	str	r7, [r3, #20]
 8090026:	6125      	str	r5, [r4, #16]
 8090028:	4620      	mov	r0, r4
 809002a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0809002e <__s2b>:
 809002e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8090032:	4606      	mov	r6, r0
 8090034:	4615      	mov	r5, r2
 8090036:	461f      	mov	r7, r3
 8090038:	2209      	movs	r2, #9
 809003a:	3308      	adds	r3, #8
 809003c:	460c      	mov	r4, r1
 809003e:	fb93 f3f2 	sdiv	r3, r3, r2
 8090042:	2100      	movs	r1, #0
 8090044:	2201      	movs	r2, #1
 8090046:	429a      	cmp	r2, r3
 8090048:	da02      	bge.n	8090050 <__s2b+0x22>
 809004a:	0052      	lsls	r2, r2, #1
 809004c:	3101      	adds	r1, #1
 809004e:	e7fa      	b.n	8090046 <__s2b+0x18>
 8090050:	4630      	mov	r0, r6
 8090052:	f7ff ff65 	bl	808ff20 <_Balloc>
 8090056:	9b08      	ldr	r3, [sp, #32]
 8090058:	2d09      	cmp	r5, #9
 809005a:	6143      	str	r3, [r0, #20]
 809005c:	f04f 0301 	mov.w	r3, #1
 8090060:	6103      	str	r3, [r0, #16]
 8090062:	dd11      	ble.n	8090088 <__s2b+0x5a>
 8090064:	f104 0809 	add.w	r8, r4, #9
 8090068:	46c1      	mov	r9, r8
 809006a:	442c      	add	r4, r5
 809006c:	f819 3b01 	ldrb.w	r3, [r9], #1
 8090070:	4601      	mov	r1, r0
 8090072:	3b30      	subs	r3, #48	; 0x30
 8090074:	220a      	movs	r2, #10
 8090076:	4630      	mov	r0, r6
 8090078:	f7ff ff9e 	bl	808ffb8 <__multadd>
 809007c:	45a1      	cmp	r9, r4
 809007e:	d1f5      	bne.n	809006c <__s2b+0x3e>
 8090080:	eb08 0405 	add.w	r4, r8, r5
 8090084:	3c08      	subs	r4, #8
 8090086:	e001      	b.n	809008c <__s2b+0x5e>
 8090088:	340a      	adds	r4, #10
 809008a:	2509      	movs	r5, #9
 809008c:	1b2d      	subs	r5, r5, r4
 809008e:	1963      	adds	r3, r4, r5
 8090090:	429f      	cmp	r7, r3
 8090092:	dd08      	ble.n	80900a6 <__s2b+0x78>
 8090094:	f814 3b01 	ldrb.w	r3, [r4], #1
 8090098:	4601      	mov	r1, r0
 809009a:	3b30      	subs	r3, #48	; 0x30
 809009c:	220a      	movs	r2, #10
 809009e:	4630      	mov	r0, r6
 80900a0:	f7ff ff8a 	bl	808ffb8 <__multadd>
 80900a4:	e7f3      	b.n	809008e <__s2b+0x60>
 80900a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080900aa <__hi0bits>:
 80900aa:	0c03      	lsrs	r3, r0, #16
 80900ac:	041b      	lsls	r3, r3, #16
 80900ae:	b913      	cbnz	r3, 80900b6 <__hi0bits+0xc>
 80900b0:	0400      	lsls	r0, r0, #16
 80900b2:	2310      	movs	r3, #16
 80900b4:	e000      	b.n	80900b8 <__hi0bits+0xe>
 80900b6:	2300      	movs	r3, #0
 80900b8:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80900bc:	bf04      	itt	eq
 80900be:	0200      	lsleq	r0, r0, #8
 80900c0:	3308      	addeq	r3, #8
 80900c2:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80900c6:	bf04      	itt	eq
 80900c8:	0100      	lsleq	r0, r0, #4
 80900ca:	3304      	addeq	r3, #4
 80900cc:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80900d0:	bf04      	itt	eq
 80900d2:	0080      	lsleq	r0, r0, #2
 80900d4:	3302      	addeq	r3, #2
 80900d6:	2800      	cmp	r0, #0
 80900d8:	db03      	blt.n	80900e2 <__hi0bits+0x38>
 80900da:	0042      	lsls	r2, r0, #1
 80900dc:	d503      	bpl.n	80900e6 <__hi0bits+0x3c>
 80900de:	1c58      	adds	r0, r3, #1
 80900e0:	4770      	bx	lr
 80900e2:	4618      	mov	r0, r3
 80900e4:	4770      	bx	lr
 80900e6:	2020      	movs	r0, #32
 80900e8:	4770      	bx	lr

080900ea <__lo0bits>:
 80900ea:	6803      	ldr	r3, [r0, #0]
 80900ec:	f013 0207 	ands.w	r2, r3, #7
 80900f0:	d00b      	beq.n	809010a <__lo0bits+0x20>
 80900f2:	07d9      	lsls	r1, r3, #31
 80900f4:	d422      	bmi.n	809013c <__lo0bits+0x52>
 80900f6:	079a      	lsls	r2, r3, #30
 80900f8:	bf4b      	itete	mi
 80900fa:	085b      	lsrmi	r3, r3, #1
 80900fc:	089b      	lsrpl	r3, r3, #2
 80900fe:	6003      	strmi	r3, [r0, #0]
 8090100:	6003      	strpl	r3, [r0, #0]
 8090102:	bf4c      	ite	mi
 8090104:	2001      	movmi	r0, #1
 8090106:	2002      	movpl	r0, #2
 8090108:	4770      	bx	lr
 809010a:	b299      	uxth	r1, r3
 809010c:	b909      	cbnz	r1, 8090112 <__lo0bits+0x28>
 809010e:	0c1b      	lsrs	r3, r3, #16
 8090110:	2210      	movs	r2, #16
 8090112:	f013 0fff 	tst.w	r3, #255	; 0xff
 8090116:	bf04      	itt	eq
 8090118:	0a1b      	lsreq	r3, r3, #8
 809011a:	3208      	addeq	r2, #8
 809011c:	0719      	lsls	r1, r3, #28
 809011e:	bf04      	itt	eq
 8090120:	091b      	lsreq	r3, r3, #4
 8090122:	3204      	addeq	r2, #4
 8090124:	0799      	lsls	r1, r3, #30
 8090126:	bf04      	itt	eq
 8090128:	089b      	lsreq	r3, r3, #2
 809012a:	3202      	addeq	r2, #2
 809012c:	07d9      	lsls	r1, r3, #31
 809012e:	d402      	bmi.n	8090136 <__lo0bits+0x4c>
 8090130:	085b      	lsrs	r3, r3, #1
 8090132:	d005      	beq.n	8090140 <__lo0bits+0x56>
 8090134:	3201      	adds	r2, #1
 8090136:	6003      	str	r3, [r0, #0]
 8090138:	4610      	mov	r0, r2
 809013a:	4770      	bx	lr
 809013c:	2000      	movs	r0, #0
 809013e:	4770      	bx	lr
 8090140:	2020      	movs	r0, #32
 8090142:	4770      	bx	lr

08090144 <__i2b>:
 8090144:	b510      	push	{r4, lr}
 8090146:	460c      	mov	r4, r1
 8090148:	2101      	movs	r1, #1
 809014a:	f7ff fee9 	bl	808ff20 <_Balloc>
 809014e:	2201      	movs	r2, #1
 8090150:	6144      	str	r4, [r0, #20]
 8090152:	6102      	str	r2, [r0, #16]
 8090154:	bd10      	pop	{r4, pc}

08090156 <__multiply>:
 8090156:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 809015a:	4614      	mov	r4, r2
 809015c:	690a      	ldr	r2, [r1, #16]
 809015e:	6923      	ldr	r3, [r4, #16]
 8090160:	4688      	mov	r8, r1
 8090162:	429a      	cmp	r2, r3
 8090164:	bfbe      	ittt	lt
 8090166:	460b      	movlt	r3, r1
 8090168:	46a0      	movlt	r8, r4
 809016a:	461c      	movlt	r4, r3
 809016c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8090170:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8090174:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8090178:	f8d8 1004 	ldr.w	r1, [r8, #4]
 809017c:	eb07 0609 	add.w	r6, r7, r9
 8090180:	429e      	cmp	r6, r3
 8090182:	bfc8      	it	gt
 8090184:	3101      	addgt	r1, #1
 8090186:	f7ff fecb 	bl	808ff20 <_Balloc>
 809018a:	f100 0514 	add.w	r5, r0, #20
 809018e:	462b      	mov	r3, r5
 8090190:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 8090194:	2200      	movs	r2, #0
 8090196:	4563      	cmp	r3, ip
 8090198:	d202      	bcs.n	80901a0 <__multiply+0x4a>
 809019a:	f843 2b04 	str.w	r2, [r3], #4
 809019e:	e7fa      	b.n	8090196 <__multiply+0x40>
 80901a0:	f104 0214 	add.w	r2, r4, #20
 80901a4:	f108 0114 	add.w	r1, r8, #20
 80901a8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80901ac:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80901b0:	9300      	str	r3, [sp, #0]
 80901b2:	9b00      	ldr	r3, [sp, #0]
 80901b4:	9201      	str	r2, [sp, #4]
 80901b6:	4293      	cmp	r3, r2
 80901b8:	d957      	bls.n	809026a <__multiply+0x114>
 80901ba:	f8b2 b000 	ldrh.w	fp, [r2]
 80901be:	f1bb 0f00 	cmp.w	fp, #0
 80901c2:	d023      	beq.n	809020c <__multiply+0xb6>
 80901c4:	4689      	mov	r9, r1
 80901c6:	46ae      	mov	lr, r5
 80901c8:	f04f 0800 	mov.w	r8, #0
 80901cc:	f859 4b04 	ldr.w	r4, [r9], #4
 80901d0:	f8be a000 	ldrh.w	sl, [lr]
 80901d4:	b2a3      	uxth	r3, r4
 80901d6:	fb0b a303 	mla	r3, fp, r3, sl
 80901da:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80901de:	f8de 4000 	ldr.w	r4, [lr]
 80901e2:	4443      	add	r3, r8
 80901e4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80901e8:	fb0b 840a 	mla	r4, fp, sl, r8
 80901ec:	46f2      	mov	sl, lr
 80901ee:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80901f2:	b29b      	uxth	r3, r3
 80901f4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80901f8:	454f      	cmp	r7, r9
 80901fa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80901fe:	f84a 3b04 	str.w	r3, [sl], #4
 8090202:	d901      	bls.n	8090208 <__multiply+0xb2>
 8090204:	46d6      	mov	lr, sl
 8090206:	e7e1      	b.n	80901cc <__multiply+0x76>
 8090208:	f8ce 8004 	str.w	r8, [lr, #4]
 809020c:	9b01      	ldr	r3, [sp, #4]
 809020e:	3204      	adds	r2, #4
 8090210:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8090214:	f1ba 0f00 	cmp.w	sl, #0
 8090218:	d021      	beq.n	809025e <__multiply+0x108>
 809021a:	462c      	mov	r4, r5
 809021c:	4689      	mov	r9, r1
 809021e:	682b      	ldr	r3, [r5, #0]
 8090220:	f04f 0800 	mov.w	r8, #0
 8090224:	f8b9 e000 	ldrh.w	lr, [r9]
 8090228:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 809022c:	b29b      	uxth	r3, r3
 809022e:	fb0a be0e 	mla	lr, sl, lr, fp
 8090232:	46a3      	mov	fp, r4
 8090234:	44f0      	add	r8, lr
 8090236:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 809023a:	f84b 3b04 	str.w	r3, [fp], #4
 809023e:	f859 3b04 	ldr.w	r3, [r9], #4
 8090242:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 8090246:	0c1b      	lsrs	r3, r3, #16
 8090248:	fb0a e303 	mla	r3, sl, r3, lr
 809024c:	454f      	cmp	r7, r9
 809024e:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 8090252:	ea4f 4813 	mov.w	r8, r3, lsr #16
 8090256:	d901      	bls.n	809025c <__multiply+0x106>
 8090258:	465c      	mov	r4, fp
 809025a:	e7e3      	b.n	8090224 <__multiply+0xce>
 809025c:	6063      	str	r3, [r4, #4]
 809025e:	3504      	adds	r5, #4
 8090260:	e7a7      	b.n	80901b2 <__multiply+0x5c>
 8090262:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 8090266:	b913      	cbnz	r3, 809026e <__multiply+0x118>
 8090268:	3e01      	subs	r6, #1
 809026a:	2e00      	cmp	r6, #0
 809026c:	dcf9      	bgt.n	8090262 <__multiply+0x10c>
 809026e:	6106      	str	r6, [r0, #16]
 8090270:	b003      	add	sp, #12
 8090272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08090278 <__pow5mult>:
 8090278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 809027c:	4615      	mov	r5, r2
 809027e:	f012 0203 	ands.w	r2, r2, #3
 8090282:	4606      	mov	r6, r0
 8090284:	460f      	mov	r7, r1
 8090286:	d007      	beq.n	8090298 <__pow5mult+0x20>
 8090288:	4c21      	ldr	r4, [pc, #132]	; (8090310 <__pow5mult+0x98>)
 809028a:	3a01      	subs	r2, #1
 809028c:	2300      	movs	r3, #0
 809028e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8090292:	f7ff fe91 	bl	808ffb8 <__multadd>
 8090296:	4607      	mov	r7, r0
 8090298:	10ad      	asrs	r5, r5, #2
 809029a:	d036      	beq.n	809030a <__pow5mult+0x92>
 809029c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 809029e:	b93c      	cbnz	r4, 80902b0 <__pow5mult+0x38>
 80902a0:	2010      	movs	r0, #16
 80902a2:	f7f9 fb51 	bl	8089948 <malloc>
 80902a6:	6270      	str	r0, [r6, #36]	; 0x24
 80902a8:	6044      	str	r4, [r0, #4]
 80902aa:	6084      	str	r4, [r0, #8]
 80902ac:	6004      	str	r4, [r0, #0]
 80902ae:	60c4      	str	r4, [r0, #12]
 80902b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80902b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80902b8:	b94c      	cbnz	r4, 80902ce <__pow5mult+0x56>
 80902ba:	f240 2171 	movw	r1, #625	; 0x271
 80902be:	4630      	mov	r0, r6
 80902c0:	f7ff ff40 	bl	8090144 <__i2b>
 80902c4:	4604      	mov	r4, r0
 80902c6:	2300      	movs	r3, #0
 80902c8:	f8c8 0008 	str.w	r0, [r8, #8]
 80902cc:	6003      	str	r3, [r0, #0]
 80902ce:	f04f 0800 	mov.w	r8, #0
 80902d2:	07eb      	lsls	r3, r5, #31
 80902d4:	d50a      	bpl.n	80902ec <__pow5mult+0x74>
 80902d6:	4639      	mov	r1, r7
 80902d8:	4622      	mov	r2, r4
 80902da:	4630      	mov	r0, r6
 80902dc:	f7ff ff3b 	bl	8090156 <__multiply>
 80902e0:	4681      	mov	r9, r0
 80902e2:	4639      	mov	r1, r7
 80902e4:	4630      	mov	r0, r6
 80902e6:	f7ff fe50 	bl	808ff8a <_Bfree>
 80902ea:	464f      	mov	r7, r9
 80902ec:	106d      	asrs	r5, r5, #1
 80902ee:	d00c      	beq.n	809030a <__pow5mult+0x92>
 80902f0:	6820      	ldr	r0, [r4, #0]
 80902f2:	b108      	cbz	r0, 80902f8 <__pow5mult+0x80>
 80902f4:	4604      	mov	r4, r0
 80902f6:	e7ec      	b.n	80902d2 <__pow5mult+0x5a>
 80902f8:	4622      	mov	r2, r4
 80902fa:	4621      	mov	r1, r4
 80902fc:	4630      	mov	r0, r6
 80902fe:	f7ff ff2a 	bl	8090156 <__multiply>
 8090302:	6020      	str	r0, [r4, #0]
 8090304:	f8c0 8000 	str.w	r8, [r0]
 8090308:	e7f4      	b.n	80902f4 <__pow5mult+0x7c>
 809030a:	4638      	mov	r0, r7
 809030c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8090310:	080938a8 	.word	0x080938a8

08090314 <__lshift>:
 8090314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8090318:	460c      	mov	r4, r1
 809031a:	4607      	mov	r7, r0
 809031c:	4691      	mov	r9, r2
 809031e:	6926      	ldr	r6, [r4, #16]
 8090320:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8090324:	4456      	add	r6, sl
 8090326:	6849      	ldr	r1, [r1, #4]
 8090328:	68a3      	ldr	r3, [r4, #8]
 809032a:	1c75      	adds	r5, r6, #1
 809032c:	42ab      	cmp	r3, r5
 809032e:	da02      	bge.n	8090336 <__lshift+0x22>
 8090330:	3101      	adds	r1, #1
 8090332:	005b      	lsls	r3, r3, #1
 8090334:	e7fa      	b.n	809032c <__lshift+0x18>
 8090336:	4638      	mov	r0, r7
 8090338:	f7ff fdf2 	bl	808ff20 <_Balloc>
 809033c:	2300      	movs	r3, #0
 809033e:	4680      	mov	r8, r0
 8090340:	461a      	mov	r2, r3
 8090342:	f100 0114 	add.w	r1, r0, #20
 8090346:	4553      	cmp	r3, sl
 8090348:	da03      	bge.n	8090352 <__lshift+0x3e>
 809034a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 809034e:	3301      	adds	r3, #1
 8090350:	e7f9      	b.n	8090346 <__lshift+0x32>
 8090352:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8090356:	6920      	ldr	r0, [r4, #16]
 8090358:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 809035c:	f019 091f 	ands.w	r9, r9, #31
 8090360:	f104 0114 	add.w	r1, r4, #20
 8090364:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8090368:	d014      	beq.n	8090394 <__lshift+0x80>
 809036a:	f1c9 0c20 	rsb	ip, r9, #32
 809036e:	2200      	movs	r2, #0
 8090370:	6808      	ldr	r0, [r1, #0]
 8090372:	469a      	mov	sl, r3
 8090374:	fa00 f009 	lsl.w	r0, r0, r9
 8090378:	4302      	orrs	r2, r0
 809037a:	f843 2b04 	str.w	r2, [r3], #4
 809037e:	f851 2b04 	ldr.w	r2, [r1], #4
 8090382:	458e      	cmp	lr, r1
 8090384:	fa22 f20c 	lsr.w	r2, r2, ip
 8090388:	d8f2      	bhi.n	8090370 <__lshift+0x5c>
 809038a:	f8ca 2004 	str.w	r2, [sl, #4]
 809038e:	b142      	cbz	r2, 80903a2 <__lshift+0x8e>
 8090390:	1cb5      	adds	r5, r6, #2
 8090392:	e006      	b.n	80903a2 <__lshift+0x8e>
 8090394:	3b04      	subs	r3, #4
 8090396:	f851 2b04 	ldr.w	r2, [r1], #4
 809039a:	458e      	cmp	lr, r1
 809039c:	f843 2f04 	str.w	r2, [r3, #4]!
 80903a0:	d8f9      	bhi.n	8090396 <__lshift+0x82>
 80903a2:	3d01      	subs	r5, #1
 80903a4:	4638      	mov	r0, r7
 80903a6:	f8c8 5010 	str.w	r5, [r8, #16]
 80903aa:	4621      	mov	r1, r4
 80903ac:	f7ff fded 	bl	808ff8a <_Bfree>
 80903b0:	4640      	mov	r0, r8
 80903b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080903b6 <__mcmp>:
 80903b6:	6903      	ldr	r3, [r0, #16]
 80903b8:	690a      	ldr	r2, [r1, #16]
 80903ba:	b510      	push	{r4, lr}
 80903bc:	1a9b      	subs	r3, r3, r2
 80903be:	d111      	bne.n	80903e4 <__mcmp+0x2e>
 80903c0:	0092      	lsls	r2, r2, #2
 80903c2:	3014      	adds	r0, #20
 80903c4:	3114      	adds	r1, #20
 80903c6:	1883      	adds	r3, r0, r2
 80903c8:	440a      	add	r2, r1
 80903ca:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 80903ce:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80903d2:	428c      	cmp	r4, r1
 80903d4:	d002      	beq.n	80903dc <__mcmp+0x26>
 80903d6:	d307      	bcc.n	80903e8 <__mcmp+0x32>
 80903d8:	2001      	movs	r0, #1
 80903da:	bd10      	pop	{r4, pc}
 80903dc:	4298      	cmp	r0, r3
 80903de:	d3f4      	bcc.n	80903ca <__mcmp+0x14>
 80903e0:	2000      	movs	r0, #0
 80903e2:	bd10      	pop	{r4, pc}
 80903e4:	4618      	mov	r0, r3
 80903e6:	bd10      	pop	{r4, pc}
 80903e8:	f04f 30ff 	mov.w	r0, #4294967295
 80903ec:	bd10      	pop	{r4, pc}

080903ee <__mdiff>:
 80903ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80903f2:	460c      	mov	r4, r1
 80903f4:	4607      	mov	r7, r0
 80903f6:	4611      	mov	r1, r2
 80903f8:	4620      	mov	r0, r4
 80903fa:	4615      	mov	r5, r2
 80903fc:	f7ff ffdb 	bl	80903b6 <__mcmp>
 8090400:	1e06      	subs	r6, r0, #0
 8090402:	d108      	bne.n	8090416 <__mdiff+0x28>
 8090404:	4631      	mov	r1, r6
 8090406:	4638      	mov	r0, r7
 8090408:	f7ff fd8a 	bl	808ff20 <_Balloc>
 809040c:	2301      	movs	r3, #1
 809040e:	6103      	str	r3, [r0, #16]
 8090410:	6146      	str	r6, [r0, #20]
 8090412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8090416:	bfbc      	itt	lt
 8090418:	4623      	movlt	r3, r4
 809041a:	462c      	movlt	r4, r5
 809041c:	4638      	mov	r0, r7
 809041e:	6861      	ldr	r1, [r4, #4]
 8090420:	bfba      	itte	lt
 8090422:	461d      	movlt	r5, r3
 8090424:	2601      	movlt	r6, #1
 8090426:	2600      	movge	r6, #0
 8090428:	f7ff fd7a 	bl	808ff20 <_Balloc>
 809042c:	692b      	ldr	r3, [r5, #16]
 809042e:	60c6      	str	r6, [r0, #12]
 8090430:	6926      	ldr	r6, [r4, #16]
 8090432:	f105 0914 	add.w	r9, r5, #20
 8090436:	f104 0114 	add.w	r1, r4, #20
 809043a:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 809043e:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8090442:	f100 0514 	add.w	r5, r0, #20
 8090446:	f04f 0c00 	mov.w	ip, #0
 809044a:	f851 2b04 	ldr.w	r2, [r1], #4
 809044e:	f859 4b04 	ldr.w	r4, [r9], #4
 8090452:	b293      	uxth	r3, r2
 8090454:	449c      	add	ip, r3
 8090456:	b2a3      	uxth	r3, r4
 8090458:	0c24      	lsrs	r4, r4, #16
 809045a:	ebc3 030c 	rsb	r3, r3, ip
 809045e:	ebc4 4212 	rsb	r2, r4, r2, lsr #16
 8090462:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8090466:	b29b      	uxth	r3, r3
 8090468:	ea4f 4c22 	mov.w	ip, r2, asr #16
 809046c:	45c8      	cmp	r8, r9
 809046e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8090472:	468e      	mov	lr, r1
 8090474:	f845 2b04 	str.w	r2, [r5], #4
 8090478:	d8e7      	bhi.n	809044a <__mdiff+0x5c>
 809047a:	45be      	cmp	lr, r7
 809047c:	d20e      	bcs.n	809049c <__mdiff+0xae>
 809047e:	f85e 1b04 	ldr.w	r1, [lr], #4
 8090482:	b28a      	uxth	r2, r1
 8090484:	4462      	add	r2, ip
 8090486:	1413      	asrs	r3, r2, #16
 8090488:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 809048c:	b292      	uxth	r2, r2
 809048e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8090492:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8090496:	f845 2b04 	str.w	r2, [r5], #4
 809049a:	e7ee      	b.n	809047a <__mdiff+0x8c>
 809049c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80904a0:	b90b      	cbnz	r3, 80904a6 <__mdiff+0xb8>
 80904a2:	3e01      	subs	r6, #1
 80904a4:	e7fa      	b.n	809049c <__mdiff+0xae>
 80904a6:	6106      	str	r6, [r0, #16]
 80904a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080904ac <__ulp>:
 80904ac:	4b10      	ldr	r3, [pc, #64]	; (80904f0 <__ulp+0x44>)
 80904ae:	400b      	ands	r3, r1
 80904b0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80904b4:	2b00      	cmp	r3, #0
 80904b6:	dd02      	ble.n	80904be <__ulp+0x12>
 80904b8:	2000      	movs	r0, #0
 80904ba:	4619      	mov	r1, r3
 80904bc:	4770      	bx	lr
 80904be:	425b      	negs	r3, r3
 80904c0:	151b      	asrs	r3, r3, #20
 80904c2:	2b13      	cmp	r3, #19
 80904c4:	f04f 0000 	mov.w	r0, #0
 80904c8:	f04f 0100 	mov.w	r1, #0
 80904cc:	dc04      	bgt.n	80904d8 <__ulp+0x2c>
 80904ce:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80904d2:	fa42 f103 	asr.w	r1, r2, r3
 80904d6:	4770      	bx	lr
 80904d8:	3b14      	subs	r3, #20
 80904da:	2b1e      	cmp	r3, #30
 80904dc:	f04f 0201 	mov.w	r2, #1
 80904e0:	bfce      	itee	gt
 80904e2:	4613      	movgt	r3, r2
 80904e4:	f1c3 031f 	rsble	r3, r3, #31
 80904e8:	fa02 f303 	lslle.w	r3, r2, r3
 80904ec:	4618      	mov	r0, r3
 80904ee:	4770      	bx	lr
 80904f0:	7ff00000 	.word	0x7ff00000

080904f4 <__b2d>:
 80904f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80904f6:	6905      	ldr	r5, [r0, #16]
 80904f8:	f100 0614 	add.w	r6, r0, #20
 80904fc:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 8090500:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8090504:	1f2f      	subs	r7, r5, #4
 8090506:	4620      	mov	r0, r4
 8090508:	f7ff fdcf 	bl	80900aa <__hi0bits>
 809050c:	f1c0 0320 	rsb	r3, r0, #32
 8090510:	280a      	cmp	r0, #10
 8090512:	600b      	str	r3, [r1, #0]
 8090514:	dc14      	bgt.n	8090540 <__b2d+0x4c>
 8090516:	f1c0 0e0b 	rsb	lr, r0, #11
 809051a:	fa24 f10e 	lsr.w	r1, r4, lr
 809051e:	42be      	cmp	r6, r7
 8090520:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 8090524:	bf34      	ite	cc
 8090526:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 809052a:	2100      	movcs	r1, #0
 809052c:	3015      	adds	r0, #21
 809052e:	fa04 f000 	lsl.w	r0, r4, r0
 8090532:	fa21 f10e 	lsr.w	r1, r1, lr
 8090536:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 809053a:	ea40 0201 	orr.w	r2, r0, r1
 809053e:	e023      	b.n	8090588 <__b2d+0x94>
 8090540:	42be      	cmp	r6, r7
 8090542:	bf3a      	itte	cc
 8090544:	f1a5 0708 	subcc.w	r7, r5, #8
 8090548:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 809054c:	2100      	movcs	r1, #0
 809054e:	380b      	subs	r0, #11
 8090550:	d015      	beq.n	809057e <__b2d+0x8a>
 8090552:	4084      	lsls	r4, r0
 8090554:	f1c0 0520 	rsb	r5, r0, #32
 8090558:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 809055c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8090560:	42b7      	cmp	r7, r6
 8090562:	fa21 fe05 	lsr.w	lr, r1, r5
 8090566:	ea44 030e 	orr.w	r3, r4, lr
 809056a:	bf8c      	ite	hi
 809056c:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
 8090570:	2400      	movls	r4, #0
 8090572:	fa01 f000 	lsl.w	r0, r1, r0
 8090576:	40ec      	lsrs	r4, r5
 8090578:	ea40 0204 	orr.w	r2, r0, r4
 809057c:	e004      	b.n	8090588 <__b2d+0x94>
 809057e:	460a      	mov	r2, r1
 8090580:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8090584:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8090588:	4610      	mov	r0, r2
 809058a:	4619      	mov	r1, r3
 809058c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0809058e <__d2b>:
 809058e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8090592:	461c      	mov	r4, r3
 8090594:	2101      	movs	r1, #1
 8090596:	4690      	mov	r8, r2
 8090598:	9e08      	ldr	r6, [sp, #32]
 809059a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 809059c:	f7ff fcc0 	bl	808ff20 <_Balloc>
 80905a0:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80905a4:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80905a8:	4607      	mov	r7, r0
 80905aa:	b10c      	cbz	r4, 80905b0 <__d2b+0x22>
 80905ac:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80905b0:	9201      	str	r2, [sp, #4]
 80905b2:	f1b8 0f00 	cmp.w	r8, #0
 80905b6:	d019      	beq.n	80905ec <__d2b+0x5e>
 80905b8:	a802      	add	r0, sp, #8
 80905ba:	f840 8d08 	str.w	r8, [r0, #-8]!
 80905be:	f7ff fd94 	bl	80900ea <__lo0bits>
 80905c2:	9b00      	ldr	r3, [sp, #0]
 80905c4:	b148      	cbz	r0, 80905da <__d2b+0x4c>
 80905c6:	9a01      	ldr	r2, [sp, #4]
 80905c8:	f1c0 0120 	rsb	r1, r0, #32
 80905cc:	fa02 f101 	lsl.w	r1, r2, r1
 80905d0:	430b      	orrs	r3, r1
 80905d2:	40c2      	lsrs	r2, r0
 80905d4:	617b      	str	r3, [r7, #20]
 80905d6:	9201      	str	r2, [sp, #4]
 80905d8:	e000      	b.n	80905dc <__d2b+0x4e>
 80905da:	617b      	str	r3, [r7, #20]
 80905dc:	9b01      	ldr	r3, [sp, #4]
 80905de:	2b00      	cmp	r3, #0
 80905e0:	bf14      	ite	ne
 80905e2:	2102      	movne	r1, #2
 80905e4:	2101      	moveq	r1, #1
 80905e6:	61bb      	str	r3, [r7, #24]
 80905e8:	6139      	str	r1, [r7, #16]
 80905ea:	e007      	b.n	80905fc <__d2b+0x6e>
 80905ec:	a801      	add	r0, sp, #4
 80905ee:	f7ff fd7c 	bl	80900ea <__lo0bits>
 80905f2:	9b01      	ldr	r3, [sp, #4]
 80905f4:	2101      	movs	r1, #1
 80905f6:	617b      	str	r3, [r7, #20]
 80905f8:	6139      	str	r1, [r7, #16]
 80905fa:	3020      	adds	r0, #32
 80905fc:	b134      	cbz	r4, 809060c <__d2b+0x7e>
 80905fe:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8090602:	4404      	add	r4, r0
 8090604:	6034      	str	r4, [r6, #0]
 8090606:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 809060a:	e009      	b.n	8090620 <__d2b+0x92>
 809060c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8090610:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8090614:	6030      	str	r0, [r6, #0]
 8090616:	6918      	ldr	r0, [r3, #16]
 8090618:	f7ff fd47 	bl	80900aa <__hi0bits>
 809061c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8090620:	6028      	str	r0, [r5, #0]
 8090622:	4638      	mov	r0, r7
 8090624:	b002      	add	sp, #8
 8090626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0809062a <__ratio>:
 809062a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 809062e:	4688      	mov	r8, r1
 8090630:	4669      	mov	r1, sp
 8090632:	4681      	mov	r9, r0
 8090634:	f7ff ff5e 	bl	80904f4 <__b2d>
 8090638:	460d      	mov	r5, r1
 809063a:	4604      	mov	r4, r0
 809063c:	a901      	add	r1, sp, #4
 809063e:	4640      	mov	r0, r8
 8090640:	f7ff ff58 	bl	80904f4 <__b2d>
 8090644:	460f      	mov	r7, r1
 8090646:	4606      	mov	r6, r0
 8090648:	f8d9 3010 	ldr.w	r3, [r9, #16]
 809064c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8090650:	4620      	mov	r0, r4
 8090652:	1a9a      	subs	r2, r3, r2
 8090654:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8090658:	1ac9      	subs	r1, r1, r3
 809065a:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 809065e:	2b00      	cmp	r3, #0
 8090660:	bfcc      	ite	gt
 8090662:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 8090666:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
 809066a:	4632      	mov	r2, r6
 809066c:	463b      	mov	r3, r7
 809066e:	4629      	mov	r1, r5
 8090670:	f7fc f86c 	bl	808c74c <__aeabi_ddiv>
 8090674:	b003      	add	sp, #12
 8090676:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0809067a <__copybits>:
 809067a:	3901      	subs	r1, #1
 809067c:	b510      	push	{r4, lr}
 809067e:	1149      	asrs	r1, r1, #5
 8090680:	6914      	ldr	r4, [r2, #16]
 8090682:	3101      	adds	r1, #1
 8090684:	f102 0314 	add.w	r3, r2, #20
 8090688:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 809068c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8090690:	42a3      	cmp	r3, r4
 8090692:	4602      	mov	r2, r0
 8090694:	d204      	bcs.n	80906a0 <__copybits+0x26>
 8090696:	f853 2b04 	ldr.w	r2, [r3], #4
 809069a:	f840 2b04 	str.w	r2, [r0], #4
 809069e:	e7f7      	b.n	8090690 <__copybits+0x16>
 80906a0:	2300      	movs	r3, #0
 80906a2:	428a      	cmp	r2, r1
 80906a4:	d202      	bcs.n	80906ac <__copybits+0x32>
 80906a6:	f842 3b04 	str.w	r3, [r2], #4
 80906aa:	e7fa      	b.n	80906a2 <__copybits+0x28>
 80906ac:	bd10      	pop	{r4, pc}

080906ae <__any_on>:
 80906ae:	f100 0214 	add.w	r2, r0, #20
 80906b2:	6900      	ldr	r0, [r0, #16]
 80906b4:	114b      	asrs	r3, r1, #5
 80906b6:	4298      	cmp	r0, r3
 80906b8:	b510      	push	{r4, lr}
 80906ba:	db0c      	blt.n	80906d6 <__any_on+0x28>
 80906bc:	dd0c      	ble.n	80906d8 <__any_on+0x2a>
 80906be:	f011 011f 	ands.w	r1, r1, #31
 80906c2:	d009      	beq.n	80906d8 <__any_on+0x2a>
 80906c4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80906c8:	fa24 f001 	lsr.w	r0, r4, r1
 80906cc:	fa00 f101 	lsl.w	r1, r0, r1
 80906d0:	428c      	cmp	r4, r1
 80906d2:	d10c      	bne.n	80906ee <__any_on+0x40>
 80906d4:	e000      	b.n	80906d8 <__any_on+0x2a>
 80906d6:	4603      	mov	r3, r0
 80906d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80906dc:	4293      	cmp	r3, r2
 80906de:	d904      	bls.n	80906ea <__any_on+0x3c>
 80906e0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80906e4:	2900      	cmp	r1, #0
 80906e6:	d0f9      	beq.n	80906dc <__any_on+0x2e>
 80906e8:	e001      	b.n	80906ee <__any_on+0x40>
 80906ea:	2000      	movs	r0, #0
 80906ec:	bd10      	pop	{r4, pc}
 80906ee:	2001      	movs	r0, #1
 80906f0:	bd10      	pop	{r4, pc}

080906f2 <_calloc_r>:
 80906f2:	b538      	push	{r3, r4, r5, lr}
 80906f4:	fb02 f401 	mul.w	r4, r2, r1
 80906f8:	4621      	mov	r1, r4
 80906fa:	f7f9 f975 	bl	80899e8 <_malloc_r>
 80906fe:	4605      	mov	r5, r0
 8090700:	b118      	cbz	r0, 809070a <_calloc_r+0x18>
 8090702:	4622      	mov	r2, r4
 8090704:	2100      	movs	r1, #0
 8090706:	f7fd f8b9 	bl	808d87c <memset>
 809070a:	4628      	mov	r0, r5
 809070c:	bd38      	pop	{r3, r4, r5, pc}

0809070e <__env_lock>:
 809070e:	4770      	bx	lr

08090710 <__env_unlock>:
 8090710:	4770      	bx	lr

08090712 <link_code_end>:
	...

08090714 <dynalib_user>:
 8090714:	0021 0808 0061 0808 008d 0808 0091 0808     !...a...........
 8090724:	0000 0000 0100 0402 1008 0000               ............

08090730 <_ZTV4File>:
	...
 8090738:	0b81 0808 0b91 0808 0bd7 0808 0bcb 0808     ................
 8090748:	0b63 0808 0b9f 0808 0bc5 0808 0bbf 0808     c...............

08090758 <_ZTV6SdFile>:
	...
 8090760:	0b7f 0808 0b83 0808 0c5b 0808 0bd1 0808     ........[.......

08090770 <_ZTV5SdFat>:
	...
 8090778:	0c07 0808 0bff 0808 0bf7 0808 0bef 0808     ................
 8090788:	62b5 0806 0006 0064 0001 0001 127a 62b5     .b....d.....z..b
 8090798:	1106 0002 0000 831a 62b5 1106 0002 0001     .........b......
 80907a8:	831a 7546 6c6c 6120 6464 6572 7373 6120     ..Full address a
 80907b8:	646e 7620 6c61 6575 7320 6275 7473 6972     nd value substri
 80907c8:	676e 203a 6100 6464 6572 7373 7320 6275     ng: .address sub
 80907d8:	7473 6972 676e 203a 7325 0d0a 5600 6c61     string: %s...Val
 80907e8:	6575 7320 6275 7473 6972 676e 203a 7325     ue substring: %s
 80907f8:	0d0a 6500 7272 726f 203a 6500 666f 203a     ...error: .eof: 
 8090808:	2020 7700 6669 2e69 7874 0074 6f43 746e       .wifi.txt.Cont
 8090818:	6e65 7374 6f20 2066 6977 6966 6620 6c69     ents of wifi fil
 8090828:	2065 696c 656e 6220 2079 696c 656e 003a     e line by line:.
 8090838:	0a2c 4600 756f 646e 5320 4953 3a44 4600     ,..Found SSID:.F
 8090848:	756f 646e 7020 7361 7773 726f 3a64 6700     ound password:.g
 8090858:	6f6f 6c67 2065 6567 6c6f 636f 7461 6f69     oogle geolocatio
 8090868:	3a6e 4c00 7461 7469 6475 3a65 6625 202c     n:.Latitude:%f, 
 8090878:	6f6c 676e 7469 6475 3a65 6625 202c 6361     longitude:%f, ac
 8090888:	3a63 6625 2500 362e 0066 3325 322e 0066     c:%f.%.6f.%3.2f.
 8090898:	2e25 5832 5400 6d65 6570 6172 7574 6572     %.2X.Temperature
 80908a8:	7220 6165 6964 676e 6620 6f72 206d 4948      reading from HI
 80908b8:	3848 3231 0030 6554 706d 7265 7461 7275     H8120.Temperatur
 80908c8:	2065 6572 6461 6e69 2067 7266 6d6f 5420     e reading from T
 80908d8:	504d 3633 5400 6d65 6570 6172 7574 6572     MP36.Temperature
 80908e8:	7220 6165 6964 676e 6620 6f72 206d 4d42      reading from BM
 80908f8:	2045 6f66 2072 6c41 6870 7361 6e65 6573     E for Alphasense
 8090908:	4800 6d75 6469 7469 2079 6572 6461 6e69     .Humidity readin
 8090918:	2067 7266 6d6f 4820 4849 3138 3032 4800     g from HIH8120.H
 8090928:	6d75 6469 7469 2079 6572 6461 6e69 2067     umidity reading 
 8090938:	7266 6d6f 4220 454d 6700 7361 7220 7365     from BME.gas res
 8090948:	7369 6174 636e 3a65 2520 2e31 6630 202c     istance: %1.0f, 
 8090958:	7568 696d 6964 7974 203a 3125 322e 0a66     humidity: %1.2f.
 8090968:	000d 6147 2073 6373 726f 3a65 0020 7548     ..Gas score: .Hu
 8090978:	696d 6964 7974 7320 6f63 6572 203a 5300     midity score: .S
 8090988:	6174 7472 6f20 2066 6c61 6870 2061 2032     tart of alpha 2 
 8090998:	6572 6461 4300 756f 646c 276e 2074 6f63     read.Couldn't co
 80909a8:	6d6d 6e75 6369 7461 2065 6977 6874 4c20     mmunicate with L
 80909b8:	504d 3139 3030 2030 0032 6168 666c 7620     MP91000 2.half v
 80909c8:	6572 3266 6120 7364 0031 7453 7461 7375     ref2 ads1.Status
 80909d8:	3d20 203d 2030 7266 6d6f 4c20 504d 3139      == 0 from LMP91
 80909e8:	3030 2030 2032 7473 7461 7375 7220 6765     000 2 status reg
 80909f8:	2d00 3939 5700 6972 6974 676e 6420 7461     .-99.Writing dat
 8090a08:	2061 6f74 6c20 676f 6620 6c69 2e65 4600     a to log file..F
 8090a18:	6c69 2065 7453 7261 2074 6974 656d 7473     ile Start timest
 8090a28:	6d61 3a70 0020 6e55 6261 656c 7420 206f     amp: .Unable to 
 8090a38:	7277 7469 2065 6f74 6c20 676f 6620 6c69     write to log fil
 8090a48:	0065 6e69 7469 4700 4147 4500 7272 726f     e.init.GGA.Error
 8090a58:	7220 6165 6964 676e 4720 5350 4700 5350      reading GPS.GPS
 8090a68:	7520 6374 7320 7274 6e69 3a67 0020 614c      utc string: .La
 8090a78:	6974 7574 6564 7320 7274 6e69 3a67 0020     titude string: .
 8090a88:	6f6c 676e 7469 6475 2065 7473 6972 676e     longitude string
 8090a98:	203a 4500 7272 726f 7220 6165 6964 676e     : .Error reading
 8090aa8:	4720 5350 5220 434d 2100 0026 5345 2050      GPS RMC.!&.ESP 
 8090ab8:	6957 6966 6320 6e6f 656e 7463 6f69 206e     Wifi connection 
 8090ac8:	7473 7461 7375 6920 3a73 0020 6f43 6e6e     status is: .Conn
 8090ad8:	6365 6574 2164 4500 5053 7720 6669 2069     ected!.ESP wifi 
 8090ae8:	6f63 6e6e 6365 6574 0064 6f4e 4320 6e6f     connected.No Con
 8090af8:	656e 7463 6f69 006e 5345 2050 6977 6966     nection.ESP wifi
 8090b08:	6e20 746f 6320 6e6f 656e 7463 6465 4000      not connected.@
 8090b18:	0021 6553 646e 6e69 2067 656e 2077 6977     !.Sending new wi
 8090b28:	6966 6320 6572 6564 746e 6169 736c 7420     fi credentials t
 8090b38:	206f 5345 0050 7553 6363 7365 2173 4600     o ESP.Success!.F
 8090b48:	6961 656c 2064 6f74 7220 6165 2064 4d42     ailed to read BM
 8090b58:	3645 3038 2400 6700 7465 6565 7270 6d6f     E680.$.geteeprom
 8090b68:	6164 6174 4300 6568 6b63 6e69 2067 6f66     data.Checking fo
 8090b78:	2072 6473 6320 7261 0064 6f6c 5f67 4300     r sd card.log_.C
 8090b88:	6572 7461 6465 6e20 7765 6620 6c69 2065     reated new file 
 8090b98:	6f74 6c20 676f 7420 206f 5375 2044 6163     to log to uSD ca
 8090ba8:	6472 203a 4e00 206f 5375 2044 6163 6472     rd: .No uSD card
 8090bb8:	6420 7465 6365 6574 2e64 5300 6174 7472      detected..Start
 8090bc8:	6e69 2067 4d4c 3950 3031 3030 4320 204f     ing LMP91000 CO 
 8090bd8:	6e69 7469 6169 696c 617a 6974 6e6f 4300     initialization.C
 8090be8:	756f 646c 276e 2074 6f63 6d6d 6e75 6369     ouldn't communic
 8090bf8:	7461 2065 6977 6874 4c20 504d 3139 3030     ate with LMP9100
 8090c08:	2030 6f66 2072 4f43 4900 696e 6974 6c61     0 for CO.Initial
 8090c18:	7a69 6465 4c20 504d 3139 3030 2030 6f66     ized LMP91000 fo
 8090c28:	2072 4f43 4300 756f 646c 6e20 746f 6320     r CO.Could not c
 8090c38:	6d6f 756d 696e 6163 6574 7720 7469 2068     ommunicate with 
 8090c48:	6441 6661 7572 7469 415f 5344 3131 3531     Adafruit_ADS1115
 8090c58:	6620 726f 4320 004f 7453 7261 6974 676e      for CO.Starting
 8090c68:	4c20 504d 3139 3030 2030 2032 6e69 7469      LMP91000 2 init
 8090c78:	6169 696c 617a 6974 6e6f 4300 756f 646c     ialization.Could
 8090c88:	276e 2074 6f63 6d6d 6e75 6369 7461 2065     n't communicate 
 8090c98:	6977 6874 4c20 504d 3139 3030 2030 6f66     with LMP91000 fo
 8090ca8:	2072 0032 6e49 7469 6169 696c 657a 2064     r 2.Initialized 
 8090cb8:	4d4c 3950 3031 3030 6620 726f 3220 4300     LMP91000 for 2.C
 8090cc8:	756f 646c 6e20 746f 6620 6e69 2064 2061     ould not find a 
 8090cd8:	6176 696c 2064 4d42 3645 3038 7320 6e65     valid BME680 sen
 8090ce8:	6f73 2c72 6320 6568 6b63 7720 7269 6e69     sor, check wirin
 8090cf8:	2167 4900 696e 6974 6c61 7a69 6465 4220     g!.Initialized B
 8090d08:	454d 5320 6e65 6f73 0072 6f43 6c75 2064     ME Sensor.Could 
 8090d18:	6f6e 2074 6966 646e 6120 7620 6c61 6469     not find a valid
 8090d28:	5420 3736 3331 7320 6e65 6f73 2c72 6320      T6713 sensor, c
 8090d38:	6568 6b63 7720 7269 6e69 2167 4300 756f     heck wiring!.Cou
 8090d48:	646c 6e20 746f 6620 6e69 2064 2061 6176     ld not find a va
 8090d58:	696c 2064 3654 3137 0033 5345 2050 6572     lid T6713.ESP re
 8090d68:	6573 2174 4600 2057 6556 7372 6f69 3a6e     set!.FW Version:
 8090d78:	0020 7542 6c69 3a64 0020 7953 7473 6d65      .Build: .System
 8090d88:	7620 7265 6973 6e6f 203a 7325 4500 746e      version: %s.Ent
 8090d98:	7265 7320 7274 6e69 2067 6128 6464 6572     er string (addre
 8090da8:	7373 762c 6c61 6575 0029 7573 6563 7373     ss,value).sucess
 8090db8:	6920 206e 7277 7469 6e69 0067 6166 6c69      in writing.fail
 8090dc8:	6465 7720 6972 6974 676e 7320 7274 6e69     ed writing strin
 8090dd8:	0067 7543 7272 6e65 2074 7473 726f 6465     g.Current stored
 8090de8:	7320 6973 3a64 0020 7543 7272 6e65 2074      ssid: .Current 
 8090df8:	7473 726f 6465 7020 7361 7773 726f 3a64     stored password:
 8090e08:	0020 6c50 6165 6573 6520 746e 7265 7020      .Please enter p
 8090e18:	7361 7773 726f 2064 6e69 6f20 6472 7265     assword in order
 8090e28:	7420 206f 616d 656b 6320 6168 676e 7365      to make changes
 8090e38:	0a2e 000d 6f62 6c75 0064 6150 7373 6f77     ....bould.Passwo
 8090e48:	6472 6320 726f 6572 7463 0021 6e45 6574     rd correct!.Ente
 8090e58:	2072 656e 2077 7373 6469 003a 6f59 7275     r new ssid:.Your
 8090e68:	6e20 7765 7320 6973 2064 6977 6c6c 6220      new ssid will b
 8090e78:	3a65 0020 7349 7420 6968 2073 6b6f 7961     e: .Is this okay
 8090e88:	283f 2079 726f 6e20 0029 6153 6976 676e     ?(y or n).Saving
 8090e98:	6e20 7765 7320 6973 0064 6e45 6574 2072      new ssid.Enter 
 8090ea8:	656e 2077 6170 7373 6f77 6472 5900 756f     new password.You
 8090eb8:	2072 656e 2077 6170 7373 6f77 6472 7720     r new password w
 8090ec8:	6c69 206c 6562 203a 5300 7661 6e69 2067     ill be: .Saving 
 8090ed8:	656e 2077 6170 7373 6f77 6472 6f00 616b     new password.oka
 8090ee8:	2c79 6e20 206f 7270 626f 656c 0a6d 000d     y, no problem...
 8090ef8:	6c50 6165 6573 6520 746e 7265 7020 7361     Please enter pas
 8090f08:	7773 726f 2064 6e69 6f20 6472 7265 7420     sword in order t
 8090f18:	206f 6e65 6261 656c 6420 7461 2061 7570     o enable data pu
 8090f28:	6873 7420 206f 6553 736e 6269 656c 4920     sh to Sensible I
 8090f38:	746f 6900 736d 6e65 6973 6c62 0065 6e45     ot.imsensible.En
 8090f48:	6261 696c 676e 7320 6e65 6973 6c62 2065     abling sensible 
 8090f58:	6f69 2074 6164 6174 7020 7375 2e68 0a00     iot data push...
 8090f68:	490d 636e 726f 6572 7463 7020 7361 7773     .Incorrect passw
 8090f78:	726f 2164 4300 7275 6572 746e 4420 7665     ord!.Current Dev
 8090f88:	6369 2065 4449 003a 6c50 6165 6573 6520     ice ID:.Please e
 8090f98:	746e 7265 7020 7361 7773 726f 2064 6e69     nter password in
 8090fa8:	6f20 6472 7265 7420 206f 6863 6e61 6567      order to change
 8090fb8:	7420 6568 4920 0044 6e45 6574 2072 656e      the ID.Enter ne
 8090fc8:	2077 6544 6976 6563 4920 3a44 0a00 4e0d     w Device ID:...N
 8090fd8:	7765 4420 7665 6369 2065 4449 003a 0d0a     ew Device ID:...
 8090fe8:	6e49 6176 696c 2064 6176 756c 2165 5000     Invalid value!.P
 8090ff8:	656c 7361 2065 6e65 6574 2072 6170 7373     lease enter pass
 8091008:	6f77 6472 6920 206e 726f 6564 2072 6f74     word in order to
 8091018:	6120 7070 796c 6420 6665 7561 746c 7320      apply default s
 8091028:	7465 6974 676e 0073 6150 7373 6f77 6472     ettings.Password
 8091038:	6320 726f 6572 7463 202c 6572 6573 7474      correct, resett
 8091048:	6e69 2067 6c61 206c 6573 7474 6e69 7367     ing all settings
 8091058:	7420 206f 6564 6166 6c75 2174 2020 6c50      to default!  Pl
 8091068:	6165 6573 7220 7365 7465 7920 756f 2072     ease reset your 
 8091078:	4449 7420 206f 6874 2065 6e6f 2065 6873     ID to the one sh
 8091088:	776f 206e 6e6f 7920 756f 2072 6e65 6c63     own on your encl
 8091098:	736f 7275 2e65 4500 746e 7265 6e20 7765     osure..Enter new
 80910a8:	4420 7665 6369 2065 6974 656d 6120 646e      Device time and
 80910b8:	6420 7461 2065 3128 2030 6964 6967 2074      date (10 digit 
 80910c8:	7065 636f 2068 6974 656d 7473 6d61 2970     epoch timestamp)
 80910d8:	003a 0d0a 654e 2077 6544 6976 6563 5420     :...New Device T
 80910e8:	6d69 3a65 4500 746e 7265 6e20 7765 4420     ime:.Enter new D
 80910f8:	7665 6369 2065 6974 656d 7a20 6e6f 2065     evice time zone 
 8091108:	2d28 3231 302e 7420 206f 3431 302e 0029     (-12.0 to 14.0).
 8091118:	0d0a 654e 2077 6544 6976 6563 7420 6d69     ..New Device tim
 8091128:	2065 6f7a 656e 003a 7543 7272 6e65 2074     e zone:.Current 
 8091138:	7246 7165 6575 636e 3a79 0020 7e28 2032     Frequency: .(~2 
 8091148:	6573 6f63 646e 2029 656d 7361 7275 6d65     second) measurem
 8091158:	6e65 7374 4500 746e 7265 6e20 7765 6120     ents.Enter new a
 8091168:	6f6d 6e75 0a74 000d 0d0a 654e 2077 7246     mount.....New Fr
 8091178:	7165 6575 636e 3a79 0020 7543 7272 6e65     equency: .Curren
 8091188:	2074 4f43 2032 6c73 706f 3a65 2000 7070     t CO2 slope:. pp
 8091198:	006d 6e45 6574 2072 656e 2077 4f43 2032     m.Enter new CO2 
 80911a8:	6c73 706f 0a65 000d 0d0a 654e 2077 4f43     slope.....New CO
 80911b8:	2032 6c73 706f 3a65 0020 7543 7272 6e65     2 slope: .Curren
 80911c8:	2074 4f43 2032 657a 6f72 003a 6e45 6574     t CO2 zero:.Ente
 80911d8:	2072 656e 2077 4f43 2032 655a 6f72 0d0a     r new CO2 Zero..
 80911e8:	0a00 4e0d 7765 4320 324f 7a20 7265 3a6f     ...New CO2 zero:
 80911f8:	0020 7543 7272 6e65 2074 4f43 7320 6f6c      .Current CO slo
 8091208:	6570 003a 6e45 6574 2072 656e 2077 4f43     pe:.Enter new CO
 8091218:	7320 6f6c 6570 0d0a 0a00 4e0d 7765 4320      slope.....New C
 8091228:	204f 6c73 706f 3a65 0020 7543 7272 6e65     O slope: .Curren
 8091238:	2074 4f43 7a20 7265 3a6f 2000 7070 0062     t CO zero:. ppb.
 8091248:	6e45 6574 2072 656e 2077 4f43 5a20 7265     Enter new CO Zer
 8091258:	0a6f 000d 0d0a 654e 2077 4f43 7a20 7265     o.....New CO zer
 8091268:	3a6f 0020 7543 7272 6e65 2074 4d50 2031     o: .Current PM1 
 8091278:	6c73 706f 3a65 4500 746e 7265 6e20 7765     slope:.Enter new
 8091288:	5020 314d 7320 6f6c 6570 0d0a 0a00 4e0d      PM1 slope.....N
 8091298:	7765 5020 314d 7320 6f6c 6570 203a 4300     ew PM1 slope: .C
 80912a8:	7275 6572 746e 5020 314d 7a20 7265 3a6f     urrent PM1 zero:
 80912b8:	2000 6775 6d2f 0033 6e45 6574 2072 656e     . ug/m3.Enter ne
 80912c8:	2077 4d50 2031 655a 6f72 0d0a 0a00 4e0d     w PM1 Zero.....N
 80912d8:	7765 5020 314d 7a20 7265 3a6f 0020 7543     ew PM1 zero: .Cu
 80912e8:	7272 6e65 2074 4d50 2e32 2035 6c73 706f     rrent PM2.5 slop
 80912f8:	3a65 4500 746e 7265 6e20 7765 5020 324d     e:.Enter new PM2
 8091308:	352e 7320 6f6c 6570 0d0a 0a00 4e0d 7765     .5 slope.....New
 8091318:	5020 324d 352e 7320 6f6c 6570 203a 4300      PM2.5 slope: .C
 8091328:	7275 6572 746e 5020 324d 352e 7a20 7265     urrent PM2.5 zer
 8091338:	3a6f 4500 746e 7265 6e20 7765 5020 324d     o:.Enter new PM2
 8091348:	352e 5a20 7265 0a6f 000d 0d0a 654e 2077     .5 Zero.....New 
 8091358:	4d50 2e32 2035 657a 6f72 203a 4300 7275     PM2.5 zero: .Cur
 8091368:	6572 746e 5020 314d 2030 6c73 706f 3a65     rent PM10 slope:
 8091378:	4500 746e 7265 6e20 7765 5020 314d 2030     .Enter new PM10 
 8091388:	6c73 706f 0a65 000d 0d0a 654e 2077 4d50     slope.....New PM
 8091398:	3031 7320 6f6c 6570 203a 4300 7275 6572     10 slope: .Curre
 80913a8:	746e 5020 314d 2030 657a 6f72 003a 7520     nt PM10 zero:. u
 80913b8:	2f6d 336d 4500 746e 7265 6e20 7765 5020     m/m3.Enter new P
 80913c8:	314d 2030 655a 6f72 0d0a 0a00 4e0d 7765     M10 Zero.....New
 80913d8:	5020 314d 2030 657a 6f72 203a 4300 7275      PM10 zero: .Cur
 80913e8:	6572 746e 5420 6d65 6570 6172 7574 6572     rent Temperature
 80913f8:	7320 6f6c 6570 003a 4420 6765 6572 7365      slope:. Degrees
 8091408:	4320 4500 746e 7265 6e20 7765 5420 6d65      C.Enter new Tem
 8091418:	6570 6172 7574 6572 7320 6f6c 6570 0d0a     perature slope..
 8091428:	0a00 4e0d 7765 5420 6d65 6570 6172 7574     ...New Temperatu
 8091438:	6572 7320 6f6c 6570 203a 4300 7275 6572     re slope: .Curre
 8091448:	746e 5420 6d65 6570 6172 7574 6572 7a20     nt Temperature z
 8091458:	7265 3a6f 4500 746e 7265 6e20 7765 5420     ero:.Enter new T
 8091468:	6d65 6570 6172 7574 6572 5a20 7265 0a6f     emperature Zero.
 8091478:	000d 0d0a 654e 2077 6554 706d 7265 7461     ....New Temperat
 8091488:	7275 2065 657a 6f72 203a 4300 7275 6572     ure zero: .Curre
 8091498:	746e 5020 6572 7373 7275 2065 6c73 706f     nt Pressure slop
 80914a8:	3a65 2000 6f74 7272 4500 746e 7265 6e20     e:. torr.Enter n
 80914b8:	7765 5020 6572 7373 7275 2065 6c73 706f     ew Pressure slop
 80914c8:	0a65 000d 0d0a 654e 2077 7250 7365 7573     e.....New Pressu
 80914d8:	6572 7320 6f6c 6570 203a 4300 7275 6572     re slope: .Curre
 80914e8:	746e 5020 6572 7373 7275 2065 657a 6f72     nt Pressure zero
 80914f8:	003a 6e45 6574 2072 656e 2077 7250 7365     :.Enter new Pres
 8091508:	7573 6572 5a20 7265 0a6f 000d 0d0a 654e     sure Zero.....Ne
 8091518:	2077 7250 7365 7573 6572 7a20 7265 3a6f     w Pressure zero:
 8091528:	0020 7543 7272 6e65 2074 4852 7320 6f6c      .Current RH slo
 8091538:	6570 003a 2520 4500 746e 7265 6e20 7765     pe:. %.Enter new
 8091548:	5220 2048 6c73 706f 0a65 000d 0d0a 654e      RH slope.....Ne
 8091558:	2077 4852 7320 6f6c 6570 203a 4300 7275     w RH slope: .Cur
 8091568:	6572 746e 5220 2048 657a 6f72 003a 6e45     rent RH zero:.En
 8091578:	6574 2072 656e 2077 4852 5a20 7265 0a6f     ter new RH Zero.
 8091588:	000d 0d0a 654e 2077 4852 7a20 7265 3a6f     ....New RH zero:
 8091598:	0020 7543 7272 6e65 2074 334f 6120 616e      .Current O3 ana
 80915a8:	6f6c 2067 666f 7366 7465 003a 6e45 6574     log offset:.Ente
 80915b8:	2072 656e 2077 7a6f 6e6f 2065 666f 7366     r new ozone offs
 80915c8:	7465 0d0a 0a00 4e0d 7765 6f20 6f7a 656e     et.....New ozone
 80915d8:	6f20 6666 6573 3a74 0020 7543 7272 6e65      offset: .Curren
 80915e8:	2074 6f6c 6577 2072 696c 696d 3a74 5000     t lower limit:.P
 80915f8:	656c 7361 2065 6e65 6574 2072 6170 7373     lease enter pass
 8091608:	6f77 6472 6920 206e 726f 6564 2072 6f74     word in order to
 8091618:	6320 6168 676e 2065 6874 2065 6f6c 6577      change the lowe
 8091628:	2072 696c 696d 0074 6e45 6574 2072 656e     r limit.Enter ne
 8091638:	2077 6f6c 6577 2072 696c 696d 3a74 0d0a     w lower limit:..
 8091648:	0a00 4e0d 7765 6c20 776f 7265 6c20 6d69     ...New lower lim
 8091658:	7469 003a 7543 7272 6e65 2074 7075 6570     it:.Current uppe
 8091668:	2072 696c 696d 3a74 5000 656c 7361 2065     r limit:.Please 
 8091678:	6e65 6574 2072 6170 7373 6f77 6472 6920     enter password i
 8091688:	206e 726f 6564 2072 6f74 6320 6168 676e     n order to chang
 8091698:	2065 6874 2065 7075 6570 2072 696c 696d     e the upper limi
 80916a8:	0074 6e45 6574 2072 656e 2077 7075 6570     t.Enter new uppe
 80916b8:	2072 696c 696d 3a74 0d0a 0a00 4e0d 7765     r limit:.....New
 80916c8:	7520 7070 7265 6c20 6d69 7469 003a 6f43      upper limit:.Co
 80916d8:	6d6d 6e61 3a64 2020 6544 6373 6972 7470     mmand:  Descript
 80916e8:	6f69 006e 3a61 2020 6441 756a 7473 4320     ion.a:  Adjust C
 80916f8:	324f 7320 6f6c 6570 6200 203a 4120 6a64     O2 slope.b:  Adj
 8091708:	7375 2074 4f43 2032 657a 6f72 6300 203a     ust CO2 zero.c: 
 8091718:	4120 6a64 7375 2074 4f43 7320 6f6c 6570      Adjust CO slope
 8091728:	6400 203a 4120 6a64 7375 2074 4f43 7a20     .d:  Adjust CO z
 8091738:	7265 006f 3a65 2020 6441 756a 7473 5020     ero.e:  Adjust P
 8091748:	314d 7320 6f6c 6570 6600 203a 4120 6a64     M1 slope.f:  Adj
 8091758:	7375 2074 4d50 2031 657a 6f72 6700 203a     ust PM1 zero.g: 
 8091768:	4120 6a64 7375 2074 4d50 2e32 2035 6c73      Adjust PM2.5 sl
 8091778:	706f 0065 3a68 2020 6441 756a 7473 5020     ope.h:  Adjust P
 8091788:	324d 352e 7a20 7265 006f 3a69 2020 6441     M2.5 zero.i:  Ad
 8091798:	756a 7473 5020 314d 2030 6c73 706f 0065     just PM10 slope.
 80917a8:	3a6a 2020 6441 756a 7473 5020 314d 2030     j:  Adjust PM10 
 80917b8:	657a 6f72 6b00 203a 4120 6a64 7375 2074     zero.k:  Adjust 
 80917c8:	6554 706d 7265 7461 7275 2065 6c73 706f     Temperature slop
 80917d8:	0065 3a6c 2020 6441 756a 7473 5420 6d65     e.l:  Adjust Tem
 80917e8:	6570 6172 7574 6572 7a20 7265 006f 3a6d     perature zero.m:
 80917f8:	2020 6441 756a 7473 5020 6572 7373 7275       Adjust Pressur
 8091808:	2065 6c73 706f 0065 3a6e 2020 6441 756a     e slope.n:  Adju
 8091818:	7473 5020 6572 7373 7275 2065 657a 6f72     st Pressure zero
 8091828:	6f00 203a 4120 6a64 7375 2074 7548 696d     .o:  Adjust Humi
 8091838:	6964 7974 7320 6f6c 6570 7000 203a 4120     dity slope.p:  A
 8091848:	6a64 7375 2074 7548 696d 6964 7974 7a20     djust Humidity z
 8091858:	7265 006f 3a71 2020 6e45 6261 656c 7320     ero.q:  Enable s
 8091868:	7265 6169 206c 6564 7562 6767 6e69 0067     erial debugging.
 8091878:	3a72 2020 6944 6173 6c62 2065 6573 6972     r:  Disable seri
 8091888:	6c61 6420 6265 6775 6967 676e 7300 203a     al debugging.s: 
 8091898:	4f20 7475 7570 2074 6568 6461 7265 7320      Output header s
 80918a8:	7274 6e69 0067 3a74 2020 6e45 6574 2072     tring.t:  Enter 
 80918b8:	656e 2077 6974 656d 6120 646e 6420 7461     new time and dat
 80918c8:	0065 3a75 2020 6e45 6574 2072 656e 2077     e.u:  Enter new 
 80918d8:	6974 656d 7a20 6e6f 0065 3a76 2020 6441     time zone.v:  Ad
 80918e8:	756a 7473 7420 6568 4420 7665 6369 2065     just the Device 
 80918f8:	4449 7700 203a 4720 7465 7720 6669 2069     ID.w:  Get wifi 
 8091908:	7263 6465 6e65 6974 6c61 0073 3a79 2020     credentials.y:  
 8091918:	6e45 6261 656c 6320 6c65 756c 616c 0072     Enable cellular.
 8091928:	3a7a 2020 6944 6173 6c62 2065 6563 6c6c     z:  Disable cell
 8091938:	6c75 7261 3300 203a 4720 7465 6220 6975     ular.3:  Get bui
 8091948:	646c 7620 7265 6973 6e6f 3400 203a 4520     ld version.4:  E
 8091958:	616e 6c62 2065 7a4f 6e6f 0065 3a35 2020     nable Ozone.5:  
 8091968:	6944 6173 6c62 2065 7a4f 6e6f 0065 3a38     Disable Ozone.8:
 8091978:	2020 754f 7074 7475 7420 6568 5020 494d       Output the PMI
 8091988:	2043 7973 7473 6d65 6320 6e6f 6966 7567     C system configu
 8091998:	6172 6974 6e6f 4100 203a 4f20 7075 7074     ration.A:  Ouptp
 80919a8:	7475 4320 204f 6f63 736e 6174 746e 796c     ut CO constantly
 80919b8:	6120 646e 7220 7061 6469 796c 4200 203a      and rapidly.B: 
 80919c8:	4f20 7475 7570 2074 4d50 6320 6e6f 7473      Output PM const
 80919d8:	6e61 6c74 2079 6e61 2064 6172 6970 6c64     antly and rapidl
 80919e8:	0079 3a43 2020 6843 6e61 6567 7420 6d65     y.C:  Change tem
 80919f8:	6570 6172 7574 6572 7520 696e 7374 7420     perature units t
 8091a08:	206f 6543 636c 7569 0073 3a44 2020 6944     o Celcius.D:  Di
 8091a18:	6173 6c62 2065 4d54 3350 2036 6574 706d     sable TMP36 temp
 8091a28:	7265 7461 7275 2065 6573 736e 726f 6120     erature sensor a
 8091a38:	646e 7520 6573 4220 454d 3836 2030 6574     nd use BME680 te
 8091a48:	706d 7265 7461 7275 0065 3a45 2020 6e45     mperature.E:  En
 8091a58:	6261 656c 5420 504d 3633 7420 6d65 6570     able TMP36 tempe
 8091a68:	6172 7574 6572 7320 6e65 6f73 2072 6e61     rature sensor an
 8091a78:	2064 6964 6173 6c62 2065 4d42 3645 3038     d disable BME680
 8091a88:	7420 6d65 6570 6172 7574 6572 4600 203a      temperature.F: 
 8091a98:	4320 6168 676e 2065 6574 706d 7265 7461      Change temperat
 8091aa8:	7275 2065 6e75 7469 2073 6f74 4620 7261     ure units to Far
 8091ab8:	6e65 6568 7469 4900 203a 4120 6a64 7375     enheit.I:  Adjus
 8091ac8:	2074 7266 7165 6575 636e 2079 6f66 2072     t frequency for 
 8091ad8:	7075 6f6c 6461 6e69 2067 6874 6f72 6775     uploading throug
 8091ae8:	2068 6563 6c6c 6c75 7261 4a00 203a 5220     h cellular.J:  R
 8091af8:	7365 7465 4520 5053 202c 4f43 2c32 5020     eset ESP, CO2, P
 8091b08:	616c 746e 776f 7265 4b00 203a 4320 6e6f     lantower.K:  Con
 8091b18:	6974 756e 756f 2073 6573 6972 6c61 6f20     tinuous serial o
 8091b28:	7475 7570 2074 666f 4720 5350 4c00 203a     utput of GPS.L: 
 8091b38:	5720 6972 6574 6420 6665 7561 746c 7320      Write default s
 8091b48:	7465 6974 676e 0073 3a4d 2020 6e45 6261     ettings.M:  Enab
 8091b58:	656c 3220 2530 6220 7461 6574 7972 7420     le 20% battery t
 8091b68:	7268 7365 6f68 646c 6c20 6d69 7469 6e69     hreshold limitin
 8091b78:	0067 3a4e 2020 6944 6173 6c62 2065 3032     g.N:  Disable 20
 8091b88:	2025 6162 7474 7265 2079 6874 6572 6873     % battery thresh
 8091b98:	6c6f 2064 696c 696d 6974 676e 5720 5241     old limiting WAR
 8091ba8:	494e 474e 2121 4f00 203a 4520 616e 6c62     NING!!.O:  Enabl
 8091bb8:	2065 6f6c 2077 6f70 6577 2072 6f66 2072     e low power for 
 8091bc8:	5047 2053 6f6d 7564 656c 5000 203a 5420     GPS module.P:  T
 8091bd8:	7275 206e 666f 2066 4142 4654 5445 5100     urn off BATFET.Q
 8091be8:	203a 4120 6c6c 776f 4220 5441 4546 2054     :  Allow BATFET 
 8091bf8:	6f74 7420 7275 206e 6e6f 5200 203a 4420     to turn on.R:  D
 8091c08:	7369 6261 656c 4120 4342 6c20 676f 6369     isable ABC logic
 8091c18:	6620 726f 4320 324f 7320 6e65 6f73 0072      for CO2 sensor.
 8091c28:	3a53 2020 6e45 6261 656c 4120 4342 6c20     S:  Enable ABC l
 8091c38:	676f 6369 6620 726f 4320 324f 7320 6e65     ogic for CO2 sen
 8091c48:	6f73 0072 3a54 2020 6e45 6261 656c 642f     sor.T:  Enable/d
 8091c58:	7369 6261 656c 4820 4849 3138 3032 5220     isable HIH8120 R
 8091c68:	2048 6573 736e 726f 5500 203a 5320 6977     H sensor.U:  Swi
 8091c78:	6374 2068 6f73 6b63 7465 7720 6568 6572     tch socket where
 8091c88:	4320 204f 7369 7220 6165 2064 7266 6d6f      CO is read from
 8091c98:	5600 203a 4320 6c61 6269 6172 6574 4320     .V:  Calibrate C
 8091ca8:	324f 7320 6e65 6f73 2072 202d 756d 7473     O2 sensor - must
 8091cb8:	7320 7075 6c70 2079 6d61 6962 6e65 2074      supply ambient 
 8091cc8:	656c 6576 206c 6728 206f 756f 7374 6469     level (go outsid
 8091cd8:	2165 0029 3a5a 2020 754f 7074 7475 6320     e!).Z:  Output c
 8091ce8:	6c65 756c 616c 2072 6e69 6f66 6d72 7461     ellular informat
 8091cf8:	6f69 206e 4328 4943 2c44 4920 454d 2c49     ion (CCID, IMEI,
 8091d08:	6520 6374 0029 2040 2020 6e45 6261 656c      etc).@   Enable
 8091d18:	442f 7369 6261 656c 5320 6e65 6973 6c62     /Disable Sensibl
 8091d28:	2d65 6f69 2074 6164 6174 7020 7375 2e68     e-iot data push.
 8091d38:	2020 6649 6520 616e 6c62 6465 202c 6974       If enabled, ti
 8091d48:	656d 7a20 6e6f 2065 6977 6c6c 6220 2065     me zone will be 
 8091d58:	6769 6f6e 6572 2064 202d 5455 2043 6977     ignored - UTC wi
 8091d68:	6c6c 6220 2065 7375 6465 002e 2023 2020     ll be used..#   
 8091d78:	6e45 6261 656c 442f 7369 6261 656c 6320     Enable/Disable c
 8091d88:	7261 6f74 7070 7265 7020 776f 7265 6d20     artopper power m
 8091d98:	646f 2e65 2020 6649 6520 616e 6c62 6465     ode.  If enabled
 8091da8:	202c 6261 6573 736e 2065 666f 6520 7478     , absense of ext
 8091db8:	7265 616e 206c 6f70 6577 2072 6977 6c6c     ernal power will
 8091dc8:	7320 6f74 2070 6563 6c6c 6c75 7261 002e      stop cellular..
 8091dd8:	3a3f 2020 754f 7074 7475 7420 6968 2073     ?:  Output this 
 8091de8:	656d 756e 7800 203a 4520 6978 7374 7420     menu.x:  Exits t
 8091df8:	6968 2073 656d 756e 2c00 4320 3a4f 0020     his menu., CO: .
 8091e08:	202c 4f43 3a32 0020 202c 4d50 3a31 0020     , CO2: ., PM1: .
 8091e18:	502c 324d 352e 203a 2c00 5020 314d 3a30     ,PM2.5: ., PM10:
 8091e28:	0020 542c 6d65 3a70 0020 502c 6572 7373      .,Temp: .,Press
 8091e38:	203a 2c00 5548 3a4d 0020 4f2c 3a33 0020     : .,HUM: .,O3: .
 8091e48:	7550 6c62 7369 6568 2064 6170 756d 2070     Published pamup 
 8091e58:	6164 6174 0021 6573 736e 6269 656c 6150     data!.sensiblePa
 8091e68:	556d 0070 7550 6c62 7369 6568 2064 6573     mUp.Published se
 8091e78:	736e 6269 656c 6420 7461 2161 4300 6c65     nsible data!.Cel
 8091e88:	756c 616c 2072 7369 6420 7369 6261 656c     lular is disable
 8091e98:	2e64 4300 756f 646c 276e 2074 6f63 6e6e     d..Couldn't conn
 8091ea8:	6365 2074 6f74 7020 7261 6974 6c63 2e65     ect to particle.
 8091eb8:	7000 6d61 7075 3b00 5000 4d41 002d 6e69     .pamup.;.PAM-.in
 8091ec8:	7473 7572 656d 746e 654b 0079 6164 6574     strumentKey.date
 8091ed8:	6974 656d 2500 2d59 6d25 252d 5464 4825     time.%Y-%m-%dT%H
 8091ee8:	253a 3a4d 5325 005a 4d50 5f31 0030 4d50     :%M:%SZ.PM1_0.PM
 8091ef8:	5f32 0035 6554 706d 5000 6572 7373 4800     2_5.Temp.Press.H
 8091f08:	646d 7974 4c00 7461 4c00 6e6f 0067 6425     mdty.Lat.Long.%d
 8091f18:	252f 2f6d 7925 252c 3a48 4d25 253a 0053     /%m/%y,%H:%M:%S.
 8091f28:	694c 656e 7420 206f 7277 7469 2065 6f74     Line to write to
 8091f38:	6320 6f6c 6475 003a 6553 646e 6e69 2067      cloud:.Sending 
 8091f48:	6164 6174 7420 206f 7365 2070 6f74 7520     data to esp to u
 8091f58:	6c70 616f 2064 6976 2061 6977 6966 2e2e     pload via wifi..
 8091f68:	002e 6553 646e 6e69 2067 6164 6174 7420     ..Sending data t
 8091f78:	206f 7365 2070 6f74 7520 6c70 616f 2064     o esp to upload 
 8091f88:	6976 2061 6977 6966 5700 6972 6974 676e     via wifi.Writing
 8091f98:	7220 776f 7420 206f 6966 656c 002e 4544      row to file..DE
 8091fa8:	2c56 4f43 7028 6d70 2c29 4f43 2832 7070     V,CO(ppm),CO2(pp
 8091fb8:	296d 502c 314d 502c 324d 355f 502c 314d     m),PM1,PM2_5,PM1
 8091fc8:	2c30 2854 2943 502c 6572 7373 6d28 6142     0,T(C),Press(mBa
 8091fd8:	2972 522c 2848 2925 422c 7461 2874 2925     r),RH(%),Batt(%)
 8091fe8:	4c2c 7461 7469 6475 2c65 6f4c 676e 7469     ,Latitude,Longit
 8091ff8:	6475 2c65 6144 6574 542f 6d69 0065 265a     ude,Date/Time.Z&
 8092008:	4700 7465 6974 676e 6f20 6f7a 656e 6420     .Getting ozone d
 8092018:	7461 2061 7266 6d6f 6520 7073 5500 616e     ata from esp.Una
 8092028:	6c62 2065 6f74 6720 7465 6f20 6f7a 656e     ble to get ozone
 8092038:	6420 7461 2061 7266 6d6f 4520 5053 202c      data from ESP, 
 8092048:	6f63 6e75 6574 2072 6e69 6564 3a78 2520     counter index: %
 8092058:	2e31 6631 0d0a 5200 4345 4549 4556 2044     1.1f...RECIEVED 
 8092068:	4144 4154 4620 4f52 204d 5345 3a50 0020     DATA FROM ESP: .
 8092078:	6552 6963 7665 6465 6420 7461 2061 7266     Recieved data fr
 8092088:	6d6f 4520 5053 6300 6d6f 616d 6920 646e     om ESP.comma ind
 8092098:	7865 203a 5300 7274 6e69 5b67 6425 3a5d     ex: .String[%d]:
 80920a8:	7500 6973 676e 7320 7274 6e69 2067 7261     .using string ar
 80920b8:	6172 2079 6e69 6564 2078 2031 7564 2065     ray index 1 due 
 80920c8:	6f74 6c20 676f 6967 676e 7500 6973 676e     to logging.using
 80920d8:	7320 7274 6e69 2067 7261 6172 2079 6e69      string array in
 80920e8:	6564 2078 2c30 6e20 746f 6c20 676f 6967     dex 0, not loggi
 80920f8:	676e 4f00 6f7a 656e 5220 7761 6120 616e     ng.Ozone Raw ana
 8092108:	6f6c 2067 6e69 003a 6c4f 2064 6e69 7570     log in:.Old inpu
 8092118:	2074 7563 7272 6e65 2074 696c 696d 3a74     t current limit:
 8092128:	2520 0a64 000d 654e 2077 6e69 7570 2074      %d...New input 
 8092138:	7563 7272 6e65 2074 696c 696d 3a74 2520     current limit: %
 8092148:	0a64 000d 6e49 7263 6165 6973 676e 4320     d...Increasing C
 8092158:	6168 6772 2065 7563 7272 6e65 2074 7266     harge current fr
 8092168:	6d6f 2520 2064 416d 7420 206f 6e00 7765     om %d mA to .new
 8092178:	6320 6168 6772 2065 7563 7272 6e65 2074      charge current 
 8092188:	666f 2520 2064 416d 0d0a 5300 6174 7472     of %d mA...Start
 8092198:	6f20 2066 6c61 6870 2061 6572 6461 4300      of alpha read.C
 80921a8:	756f 646c 276e 2074 6f63 6d6d 6e75 6369     ouldn't communic
 80921b8:	7461 2065 6977 6874 4c20 504d 3139 3030     ate with LMP9100
 80921c8:	0030 6148 666c 6f76 746c 203a 3125 322e     0.Halfvolt: %1.2
 80921d8:	0a66 000d 6148 666c 6f76 746c 6820 6769     f...Halfvolt hig
 80921e8:	6568 2072 6874 6e61 3020 352e 5300 6174     her than 0.5.Sta
 80921f8:	7574 2073 203d 2030 7266 6d6f 4c20 504d     tus = 0 from LMP
 8092208:	3139 3030 2030 7473 7461 7375 7220 6765     91000 status reg
 8092218:	4c00 504d 3031 3030 7320 6174 7574 2073     .LMP1000 status 
 8092228:	203d 0030 4f43 6d20 6165 7573 6572 656d     = 0.CO measureme
 8092238:	746e 3a73 2020 0d0a 4100 5f30 6167 3a73     nts:  ...A0_gas:
 8092248:	2520 0a64 000d 3141 615f 7875 203a 6425      %d...A1_aux: %d
 8092258:	0d0a 4100 5f32 6574 706d 203a 6425 0d0a     ...A2_temp: %d..
 8092268:	6800 6c61 5f66 7276 6665 203a 6425 0d0a     .half_vref: %d..
 8092278:	4300 3a4f 2520 2e31 6633 7020 6d70 0d0a     .CO: %1.3f ppm..
 8092288:	4d00 6e65 3e75 5300 7265 6169 206c 6564     .Menu>.Serial de
 8092298:	7562 6767 6e69 2067 6e65 6261 656c 2e64     bugging enabled.
 80922a8:	5300 7265 6169 206c 6564 7562 6767 6e69     .Serial debuggin
 80922b8:	2067 6964 6173 6c62 6465 002e 6e45 6261     g disabled..Enab
 80922c8:	696c 676e 4320 6c65 756c 616c 2e72 4300     ling Cellular..C
 80922d8:	6c65 756c 616c 2072 6c61 6572 6461 2079     ellular already 
 80922e8:	6e65 6261 656c 2e64 4400 7369 6261 696c     enabled..Disabli
 80922f8:	676e 4320 6c65 756c 616c 0072 6543 6c6c     ng Cellular.Cell
 8092308:	6c75 7261 6120 726c 6165 7964 6420 7369     ular already dis
 8092318:	6261 656c 2e64 5400 6d65 6570 6172 7574     abled..Temperatu
 8092328:	6572 7520 696e 7374 6120 726c 6165 7964     re units already
 8092338:	7320 7465 7420 206f 6146 6572 656e 7469      set to Fareneit
 8092348:	002e 6554 706d 7265 7461 7275 2065 6e75     ..Temperature un
 8092358:	7469 2073 6c61 6572 6461 2079 6573 2074     its already set 
 8092368:	6f74 4320 6c65 6963 7375 002e 6944 6173     to Celcius..Disa
 8092378:	6c62 6e69 2067 656e 2077 6574 706d 7265     bling new temper
 8092388:	7461 7275 2065 6573 736e 726f 5400 6d65     ature sensor.Tem
 8092398:	6570 6172 7574 6572 7320 6e65 6f73 2072     perature sensor 
 80923a8:	6c61 6572 6461 2079 6964 6173 6c62 6465     already disabled
 80923b8:	5400 6d65 6570 6172 7574 6572 7320 6e65     .Temperature sen
 80923c8:	6f73 2072 6c61 6572 6461 2079 6e65 6261     sor already enab
 80923d8:	656c 0064 6554 706d 7265 7461 6575 7320     led.Temperatue s
 80923e8:	6e65 6f73 2072 6f6e 2077 6e65 6261 656c     ensor now enable
 80923f8:	0064 6e41 6c61 676f 7220 6165 6964 676e     d.Analog reading
 8092408:	6f20 2066 7a6f 6e6f 2065 6c61 6572 6461      of ozone alread
 8092418:	2079 6e65 6261 656c 0064 6e41 6c61 676f     y enabled.Analog
 8092428:	7220 6165 6964 676e 6f20 2066 7a6f 6e6f      reading of ozon
 8092438:	2065 6f6e 2077 6e65 6261 656c 0064 6944     e now enabled.Di
 8092448:	6967 6174 206c 6572 6461 6e69 2067 666f     gital reading of
 8092458:	6f20 6f7a 656e 6120 726c 6165 7964 6520      ozone already e
 8092468:	616e 6c62 6465 4400 6769 7469 6c61 7220     nabled.Digital r
 8092478:	6165 6964 676e 6f20 2066 7a6f 6e6f 2065     eading of ozone 
 8092488:	6f6e 2077 6e65 6261 656c 0064 754f 7074     now enabled.Outp
 8092498:	7475 6974 676e 4720 5350 6320 6e6f 6974     utting GPS conti
 80924a8:	756e 756f 6c73 0079 6142 7474 7265 2079     nuously.Battery 
 80924b8:	6874 6572 6873 6c6f 2064 6c61 6572 6461     threshold alread
 80924c8:	2079 6e65 6261 656c 0064 6e45 6261 696c     y enabled.Enabli
 80924d8:	676e 6220 7461 6574 7972 7420 7268 7365     ng battery thres
 80924e8:	6f68 646c 6c20 6d69 7469 6e69 0067 6142     hold limiting.Ba
 80924f8:	7474 7265 2079 6874 6572 6873 6c6f 2064     ttery threshold 
 8092508:	6c61 6572 6461 2079 6964 6173 6c62 6465     already disabled
 8092518:	4400 7369 6261 696c 676e 6220 7461 6574     .Disabling batte
 8092528:	7972 7420 7268 7365 6f68 646c 6c20 6d69     ry threshold lim
 8092538:	7469 6e69 0067 6e45 6261 696c 676e 6c20     iting.Enabling l
 8092548:	776f 7020 776f 7265 6620 726f 6720 7370     ow power for gps
 8092558:	5400 7275 696e 676e 6f20 6666 6220 7461     .Turning off bat
 8092568:	6566 0074 6c41 6f6c 6977 676e 6220 7461     fet.Allowing bat
 8092578:	6566 2074 6f74 7420 7275 206e 6e6f 4400     fet to turn on.D
 8092588:	7369 6261 696c 676e 4120 4342 6c20 676f     isabling ABC log
 8092598:	6369 6620 726f 4320 324f 7320 6e65 6f73     ic for CO2 senso
 80925a8:	0072 4241 2043 6f6c 6967 2063 6c61 6572     r.ABC logic alre
 80925b8:	6461 2079 6964 6173 6c62 6465 4500 616e     ady disabled.Ena
 80925c8:	6c62 6e69 2067 6261 2063 6f6c 6967 2063     bling abc logic 
 80925d8:	6f66 2072 4f43 2032 6573 736e 726f 4100     for CO2 sensor.A
 80925e8:	4342 6c20 676f 6369 6120 726c 6165 7964     BC logic already
 80925f8:	6520 616e 6c62 6465 4500 616e 6c62 6e69      enabled.Enablin
 8092608:	2067 4948 3848 3231 2030 4852 7320 6e65     g HIH8120 RH sen
 8092618:	6f73 0072 6944 6173 6c62 6e69 2067 4948     sor.Disabling HI
 8092628:	3848 3231 2030 4852 7320 6e65 6f73 0072     H8120 RH sensor.
 8092638:	6f4e 2077 6572 6461 6e69 2067 4f43 6620     Now reading CO f
 8092648:	6f72 206d 3255 2d30 6c41 6870 3261 4e00     rom U20-Alpha2.N
 8092658:	776f 7220 6165 6964 676e 4320 204f 7266     ow reading CO fr
 8092668:	6d6f 5520 3931 412d 706c 6168 0031 6552     om U19-Alpha1.Re
 8092678:	6573 6974 676e 7420 6568 4320 324f 7320     seting the CO2 s
 8092688:	6e65 6f73 0072 5041 2050 6556 7372 6f69     ensor.APP Versio
 8092698:	3a6e 0020 6e45 6261 696c 676e 4f20 6f7a     n: .Enabling Ozo
 80926a8:	656e 4f00 6f7a 656e 6120 726c 6165 7964     ne.Ozone already
 80926b8:	6520 616e 6c62 6465 4400 7369 6261 696c      enabled.Disabli
 80926c8:	676e 4f20 6f7a 656e 4f00 6f7a 656e 6120     ng Ozone.Ozone a
 80926d8:	726c 6165 7964 6420 7369 6261 656c 0064     lready disabled.
 80926e8:	6e45 6261 696c 676e 5620 434f 7327 5600     Enabling VOC's.V
 80926f8:	434f 7327 6120 726c 6165 7964 6520 616e     OC's already ena
 8092708:	6c62 6465 4400 7369 6261 696c 676e 5620     bled.Disabling V
 8092718:	434f 7327 5600 434f 7327 6120 726c 6165     OC's.VOC's alrea
 8092728:	7964 6420 7369 6261 656c 0064 6146 6c75     dy disabled.Faul
 8092738:	3a74 0020 7953 7473 6d65 7320 6174 7574     t: .System statu
 8092748:	3a73 0020 754f 7074 7475 6974 676e 6e20     s: .Outputting n
 8092758:	726f 616d 6c6c 0079 754f 7074 7475 6974     ormally.Outputti
 8092768:	676e 6f20 6c6e 2079 4d50 4f00 7475 7570     ng only PM.Outpu
 8092778:	7474 6e69 2067 4f56 7343 6320 6e6f 6974     tting VOCs conti
 8092788:	756e 756f 6c73 2179 2020 7250 7365 2073     nuously!  Press 
 8092798:	6e61 2079 7562 7474 6e6f 7420 206f 7865     any button to ex
 80927a8:	7469 2e2e 002e 5654 636f 3d73 3125 302e     it....TVocs=%1.0
 80927b8:	2c66 5420 6d65 3d70 3125 312e 2c66 7020     f, Temp=%1.1f, p
 80927c8:	6572 7373 253d 2e31 6631 202c 6872 253d     ress=%1.1f, rh=%
 80927d8:	2e31 6631 0d0a 4400 7369 6261 696c 676e     1.1f...Disabling
 80927e8:	7320 6e65 6973 6c62 2065 6f69 2074 6164      sensible iot da
 80927f8:	6174 7020 7375 2e68 4400 7369 6261 696c     ta push..Disabli
 8092808:	676e 6320 7261 7420 706f 6570 2072 6f70     ng car topper po
 8092818:	6577 2e72 2020 4500 616e 6c62 6e69 2067     wer.  .Enabling 
 8092828:	6163 2072 6f74 7070 7265 7020 776f 7265     car topper power
 8092838:	202e 4920 2066 6f6e 6520 7478 7265 616e     .  If no externa
 8092848:	206c 6f70 6577 2c72 7320 7379 6574 206d     l power, system 
 8092858:	6977 6c6c 7420 7275 206e 666f 2e66 4400     will turn off..D
 8092868:	7369 6261 696c 676e 6720 6f6f 6c67 2065     isabling google 
 8092878:	6f6c 6163 6974 6e6f 7320 7265 6976 6563     location service
 8092888:	2e73 4500 616e 6c62 6e69 2067 6f67 676f     s..Enabling goog
 8092898:	656c 6c20 636f 7461 6f69 206e 6573 7672     le location serv
 80928a8:	6369 7365 002e 6547 7474 6e69 2067 6563     ices..Getting ce
 80928b8:	6c6c 6c75 7261 6920 666e 726f 616d 6974     llular informati
 80928c8:	6e6f 202c 6874 7369 6d20 7961 7420 6b61     on, this may tak
 80928d8:	2065 2061 6877 6c69 2e65 2e2e 4900 454d     e a while....IME
 80928e8:	3d49 7325 4900 534d 3d49 7325 4900 4343     I=%s.IMSI=%s.ICC
 80928f8:	4449 253d 0073 7845 7469 6e69 2067 6573     ID=%s.Exiting se
 8092908:	6972 6c61 6d20 6e65 2e75 2e2e 4200 6665     rial menu....Bef
 8092918:	726f 2065 6572 6461 6e69 2067 6d62 0065     ore reading bme.
 8092928:	6562 6f66 6572 7220 6165 6964 676e 6220     before reading b
 8092938:	656d 7000 6572 7373 7275 2065 6f63 7272     me.pressure corr
 8092948:	6365 6974 6e6f 6620 6361 6f74 2072 6f66     ection factor fo
 8092958:	2072 4f43 3a32 3125 322e 0a66 000d 7245     r CO2:%1.2f...Er
 8092968:	6f72 3a72 5020 6572 7373 7275 2065 756f     ror: Pressure ou
 8092978:	2074 666f 7220 6e61 6567 202c 6f6e 2074     t of range, not 
 8092988:	7375 6e69 2067 7270 7365 7573 6572 6320     using pressure c
 8092998:	726f 6572 7463 6f69 206e 6f66 2072 4f43     orrection for CO
 80929a8:	2e32 5000 6572 7373 7275 3d65 3125 322e     2..Pressure=%1.2
 80929b8:	0a66 000d 6d70 2e32 2035 6f63 7272 6365     f...pm2.5 correc
 80929c8:	6974 6e6f 6620 6361 6f74 3a72 2520 2e31     tion factor: %1.
 80929d8:	6632 202c 3125 322e 0a66 000d 6e69 6f63     2f, %1.2f...inco
 80929e8:	6d6d 6e69 2067 7962 6574 003a 6f43 6e6e     mming byte:.Conn
 80929f8:	6365 6974 676e 7420 206f 6563 6c6c 6c75     ecting to cellul
 8092a08:	7261 6e20 7465 6f77 6b72 6100 7466 7265     ar network.after
 8092a18:	6320 6c65 756c 616c 4f72 006e 6641 6574      cellularOn.Afte
 8092a28:	2072 6563 6c6c 6c75 7261 6e4f 4100 7466     r cellularOn.Aft
 8092a38:	7265 7020 7261 6974 6c63 2065 6f63 6e6e     er particle conn
 8092a48:	6365 0074 6573 7474 6e69 2067 7274 6569     ect.setting trie
 8092a58:	5f64 6563 6c6c 6c75 7261 635f 6e6f 656e     d_cellular_conne
 8092a68:	7463 7420 206f 6166 736c 0065 6944 6373     ct to false.Disc
 8092a78:	6e6f 656e 7463 6e69 2067 7266 6d6f 6320     onnecting from c
 8092a88:	6c65 756c 616c 2072 656e 7774 726f 006b     ellular network.
 8092a98:	6f47 6e69 2067 6f74 7320 656c 7065 6220     Going to sleep b
 8092aa8:	6365 7561 6573 6220 7461 6574 7972 6920     ecause battery i
 8092ab8:	2073 6562 6f6c 2077 3032 2025 6863 7261     s below 20% char
 8092ac8:	6567 0000                                   ge..

08092acc <_ZTV10PowerCheck>:
	...
 8092ad4:	6ac1 0808 6ad9 0808 6572 6461 6e69 2067     .j...j..reading 
 8092ae4:	4f43 2032 6573 736e 726f 7320 6174 7574     CO2 sensor statu
 8092af4:	0073 7546 636e 6320 646f 3a65 0020 7962     s.Func code: .by
 8092b04:	6574 6320 756f 746e 203a 4d00 4253 203a     te count: .MSB: 
 8092b14:	4c00 4253 203a 4300 6c61 6269 6172 6974     .LSB: .Calibrati
 8092b24:	676e 4320 324f 0000                         ng CO2..

08092b2c <_ZL6spiPtr>:
 8092b2c:	10bc 2000 10cc 2000 10dc 2000               ... ... ... 

08092b38 <_ZTV5SdSpi>:
	...
 8092b40:	7cfd 0808 7d0d 0808 7cf9 0808 7d89 0808     .|...}...|...}..
 8092b50:	7dad 0808 7d9d 0808 7df1 0808               .}...}...}..

08092b5c <_ZTV7HIH61XX>:
	...
 8092b64:	8ca9 0808 8cb9 0808 8df1 0808               ............

08092b70 <_ZTV23GoogleMapsDeviceLocator>:
	...
 8092b78:	8e99 0808 8eb9 0808 7325 227b 2269 253a     ........%s{"i":%
 8092b88:	2c64 6c22 3a22 7525 222c 2263 253a 2c64     d,"l":%u,"c":%d,
 8092b98:	6e22 3a22 6425 007d 227b 2263 7b3a 6f22     "n":%d}.{"c":{"o
 8092ba8:	3a22 2522 2273 002c 6122 3a22 005b 6564     ":"%s",."a":[.de
 8092bb8:	6976 6563 6f4c 6163 6f74 0072 5441 5426     viceLocator.AT&T
 8092bc8:	7000 6275 696c 6873 6f4c 6163 6974 6e6f     .publishLocation
 8092bd8:	7300 6163 446e 7461 3d61 7325 6800 6f6f     .scanData=%s.hoo
 8092be8:	2d6b 6572 7073 6e6f 6573 252f 2f73 7325     k-response/%s/%s
 8092bf8:	0000 0000                                   ....

08092bfc <_ZTV28CellularHelperStringResponse>:
	...
 8092c04:	9261 0808 5954 4550 555f 4b4e 4f4e 4e57     a...TYPE_UNKNOWN
 8092c14:	5400 5059 5f45 4b4f 5400 5059 5f45 5245     .TYPE_OK.TYPE_ER
 8092c24:	4f52 0052 5954 4550 435f 4e4f 454e 5443     ROR.TYPE_CONNECT
 8092c34:	5400 5059 5f45 4f4e 4143 5252 4549 0052     .TYPE_NOCARRIER.
 8092c44:	5954 4550 4e5f 444f 4149 544c 4e4f 0045     TYPE_NODIALTONE.
 8092c54:	5954 4550 425f 5355 0059 5954 4550 4e5f     TYPE_BUSY.TYPE_N
 8092c64:	414f 534e 4557 0052 5954 4550 505f 4f52     OANSWER.TYPE_PRO
 8092c74:	504d 0054 5954 4550 505f 554c 0053 5954     MPT.TYPE_PLUS.TY
 8092c84:	4550 415f 4f42 5452 4445 7400 7079 3d65     PE_ABORTED.type=
 8092c94:	7830 7825 6300 6c65 756c 616c 2072 6572     0x%x.cellular re
 8092ca4:	7073 6e6f 6573 7420 7079 3d65 7325 6c20     sponse type=%s l
 8092cb4:	6e65 253d 0064 6e5c 5c00 0072 7830 3025     en=%d.\n.\r.0x%0
 8092cc4:	7832 2500 2c64 6425 6b00 7965 7420 6f6f     2x.%d,%d.key too
 8092cd4:	6c20 6e6f 2067 656b 3d79 7325 7620 6c61      long key=%s val
 8092ce4:	6575 253d 0073 4152 0054 4d55 5354 4d00     ue=%s.RAT.UMTS.M
 8092cf4:	4343 4d00 434e 4c00 4341 4300 0049 5342     CC.MNC.LAC.CI.BS
 8092d04:	4349 4100 4652 4e43 4100 4652 4e43 445f     IC.ARFCN.ARFCN_D
 8092d14:	4445 5200 4c58 5645 5553 0042 5f54 4441     ED.RXLEVSUB.T_AD
 8092d24:	0056 5852 454c 0056 4c44 0046 4c55 0046     V.RXLEV.DLF.ULF.
 8092d34:	5352 5043 4c20 5645 5200 4341 5300 0043     RSCP LEV.RAC.SC.
 8092d44:	4345 304e 4c20 5645 7500 6b6e 6f6e 6e77     ECN0 LEV.unknown
 8092d54:	6b20 7965 253d 2073 6176 756c 3d65 7325      key=%s value=%s
 8092d64:	4d00 4343 003a 4152 3a54 4700 4d53 0020     .MCC:.RAT:.GSM .
 8092d74:	4344 2053 3831 3030 4500 4753 204d 3039     DCS 1800.ESGM 90
 8092d84:	0030 4d55 5354 0020 4733 7520 6b6e 6f6e     0.UMTS .3G unkno
 8092d94:	6e77 4400 5343 3120 3038 2030 726f 3120     wn.DCS 1800 or 1
 8092da4:	3039 0030 4745 4d53 3920 3030 3200 2047     900.EGSM 900.2G 
 8092db4:	6e75 6e6b 776f 006e 636d 3d63 6425 202c     unknown.mcc=%d, 
 8092dc4:	6e6d 3d63 6425 202c 616c 3d63 7825 6320     mnc=%d, lac=%x c
 8092dd4:	3d69 7825 6220 6e61 3d64 7325 7220 7373     i=%x band=%s rss
 8092de4:	3d69 6425 7200 7461 553d 544d 2053 7325     i=%d.rat=UMTS %s
 8092df4:	6420 666c 253d 2064 6c75 3d66 6425 7200      dlf=%d ulf=%d.r
 8092e04:	7461 473d 4d53 2520 2073 7362 6369 253d     at=GSM %s bsic=%
 8092e14:	2078 7261 6366 3d6e 6425 7220 6c78 7665     x arfcn=%d rxlev
 8092e24:	253d 0064 6573 7672 6369 2065 7325 6e00     =%d.service %s.n
 8092e34:	6965 6867 6f62 2072 6425 2520 0073 616c     eighbor %d %s.la
 8092e44:	3d74 6625 6c20 6e6f 253d 2066 6c61 3d74     t=%f lon=%f alt=
 8092e54:	6425 7520 636e 7265 6174 6e69 7974 253d     %d uncertainty=%
 8092e64:	0064 6176 696c 3d64 6166 736c 0065 6425     d.valid=false.%d
 8092e74:	252c 2c64 2522 2278 222c 7825 2c22 6425     ,%d,"%x","%x",%d
 8092e84:	7300 6174 3d74 6425 6c20 6361 303d 2578     .stat=%d lac=0x%
 8092e94:	2078 6963 303d 2578 2078 6172 3d74 6425     x ci=0x%x rat=%d
 8092ea4:	4100 2b54 4743 4d4d 0a0d 4100 4954 0d30     .AT+CGMM...ATI0.
 8092eb4:	000a 5441 432b 4d47 0d52 000a 5441 432b     ..AT+CGMR...AT+C
 8092ec4:	5347 0d4e 000a 5441 432b 4d47 0d49 000a     GSN...AT+CGMI...
 8092ed4:	4343 4449 4100 2b54 4343 4449 0a0d 5300     CCID.AT+CCID...S
 8092ee4:	5241 2d41 3452 5500 4f44 4e50 4100 2b54     ARA-R4.UDOPN.AT+
 8092ef4:	4455 504f 3d4e 6425 0a0d 4300 5153 4100     UDOPN=%d...CSQ.A
 8092f04:	2b54 5343 0d51 000a 5441 432b 504f 3d53     T+CSQ...AT+COPS=
 8092f14:	0d30 000a 706f 7265 7461 726f 6120 726c     0...operator alr
 8092f24:	6165 7964 2520 0073 5441 432b 504f 3d53     eady %s.AT+COPS=
 8092f34:	0d32 000a 5441 432b 504f 3d53 2c34 2c32     2...AT+COPS=4,2,
 8092f44:	2522 2273 0a0d 4300 4547 0044 5441 432b     "%s"...CGED.AT+C
 8092f54:	4547 3d44 6425 0a0d 5500 4c55 434f 4100     GED=%d...UULOC.A
 8092f64:	2b54 4c55 434f 4543 4c4c 303d 0a0d 4100     T+ULOCCELL=0...A
 8092f74:	2b54 4c55 434f 323d 322c 302c 252c 2c64     T+ULOC=2,2,0,%d,
 8092f84:	3035 3030 0a0d 4100 2b54 5243 4745 323d     5000...AT+CREG=2
 8092f94:	0a0d 4300 4552 0047 5441 432b 4552 3f47     ...CREG.AT+CREG?
 8092fa4:	0a0d 4100 2b54 5243 4745 303d 0a0d 4100     ...AT+CREG=0...A
 8092fb4:	2b54 5055 4e49 3d47 2522 2273 0a0d 5500     T+UPING="%s"...U
 8092fc4:	4e44 5253 004e 5441 552b 4e44 5253 3d4e     DNSRN.AT+UDNSRN=
 8092fd4:	2c30 2522 2273 0a0d 2500 2e75 7525 252e     0,"%s"...%u.%u.%
 8092fe4:	2e75 7525 0a00 252b 3a73 0020               u.%u..+%s: .

08092ff0 <_ZTV32CellularHelperPlusStringResponse>:
	...
 8092ff8:	9299 0808                                   ....

08092ffc <_ZZN4PMIC20getInputCurrentLimitEvE7mapping>:
 8092ffc:	0064 0096 01f4 0384 04b0 05dc 07d0 0bb8     d...............

0809300c <_ZTV8SPIClass>:
	...
 8093014:	9ca5 0808 9ca7 0808                         ........

0809301c <_ZL14clock_divisors>:
 809301c:	0800 1810 2820 3830 616e 006e 766f 0066     .... (08nan.ovf.
 809302c:	6e69 0066 6162 6475 5300 7265 6169 006c     inf.baud.Serial.
 809303c:	5355 5342 7265 6169 316c 7400 7079 0065     USBSerial1.type.
 809304c:	6170 6172 006d 6d63 0064 6e68 0064 7473     param.cmd.hnd.st
 809305c:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
 809306c:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
 809307c:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
 809308c:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
 809309c:	6e61 6c64 7265 6100 7070 2500 3130 7530     andler.app.%010u
 80930ac:	0020 205d 2c00 0020 2928 203a 2000 005b      .] ., .(): . [.
 80930bc:	6f63 6564 3d20 0020 6925 6400 7465 6961     code = .%i.detai
 80930cc:	736c 3d20 0020 6e6c 6600 006e 6f63 6564     ls = .ln.fn.code
 80930dc:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
 80930ec:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
 80930fc:	726f 7000 6e61 6369 6100 6c6c 2500 302b     or.panic.all.%+0
 809310c:	6433 253a 3230 0075 5925 252d 2d6d 6425     3d:%02u.%Y-%m-%d
 809311c:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
 809312c:	6d69 0065                                   ime.

08093130 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8093138:	aee5 0808 aeeb 0808 af2f 0808 aef9 0808     ......../.......
 8093148:	aee7 0808                                   ....

0809314c <_ZTV9IPAddress>:
	...
 8093154:	b4d5 0808 b4c5 0808 b4c7 0808               ............

08093160 <_ZTV9USBSerial>:
	...
 8093168:	b569 0808 b5b9 0808 b5c7 0808 a4c1 0808     i...............
 8093178:	b5a5 0808 b56b 0808 b581 0808 b5b3 0808     ....k...........
 8093188:	b597 0808 b565 0808                         ....e...

08093190 <_ZTVN5spark13CellularClassE>:
	...
 8093198:	b7f3 0808 b7e9 0808 b7df 0808 b75d 0808     ............]...
 80931a8:	b7d3 0808 0c73 0808 b7c7 0808 b7bf 0808     ....s...........
 80931b8:	b7b5 0808 b7ab 0808 b767 0808               ........g...

080931c4 <_ZTV11USARTSerial>:
	...
 80931cc:	0b61 0808 0c7f 0808 b87b 0808 a4c1 0808     a.......{.......
 80931dc:	b83f 0808 b861 0808 b84d 0808 b875 0808     ?...a...M...u...
 80931ec:	b82d 0808 b831 0808                         -...1...

080931f4 <_ZTV7TwoWire>:
	...
 80931fc:	b955 0808 b99f 0808 b977 0808 b957 0808     U.......w...W...
 809320c:	b97f 0808 b987 0808 b98f 0808 b997 0808     ................

0809321c <_ZTVN5spark12NetworkClassE>:
	...
 8093224:	ba51 0808 ba5b 0808 ba65 0808 ba6f 0808     Q...[...e...o...
 8093234:	ba79 0808 ba85 0808 ba91 0808 ba9d 0808     y...............
 8093244:	baa5 0808 baaf 0808 bab9 0808               ............

08093250 <_ZTVN5spark16JSONBufferWriterE>:
	...
 8093258:	bb19 0808 bb1b 0808 bb29 0808 bb4f 0808     ........)...O...
 8093268:	2e30 0030 7274 6575 2500 0067 756e 6c6c     0.0.true.%g.null
 8093278:	7500 3025 7834 5300                              .u%04x.

0809327f <day_name.4723>:
 809327f:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 809328f:	6972 6153 4a74                                   riSat

08093294 <mon_name.4724>:
 8093294:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 80932a4:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 80932b4:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 80932c4:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 80932d4:	6425 000a                                   %d..

080932d8 <_ctype_>:
 80932d8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80932e8:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80932f8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 8093308:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 8093318:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 8093328:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 8093338:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 8093348:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 8093358:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080933dc <__sf_fake_stdin>:
	...

080933fc <__sf_fake_stdout>:
	...

0809341c <__sf_fake_stderr>:
	...
 809343c:	4f50 4953 0058 0000                         POSIX...

08093444 <__month_lengths>:
 8093444:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 8093454:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 8093464:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 8093474:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 8093484:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 8093494:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80934a4:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
 80934b4:	2500 6432 2500 322e 2f64 2e25 6432 252f     .%2d.%.2d/%.2d/%
 80934c4:	322e 0064 6c25 0075 2d59 6d25 252d 0064     .2d.%lu.Y-%m-%d.
 80934d4:	2a2e 0075 2e25 6433 2500 6c6c 0064 2e25     .*u.%.3d.%lld.%.
 80934e4:	6432 253a 322e 3a64 2e25 6432 2500 302b     2d:%.2d:%.2d.%+0
 80934f4:	6c33 2564 322e 646c 0000 0000               3ld%.2ld....

08093500 <fpi.5342>:
 8093500:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 8093510:	0000 0000 6e69 7469 0079 0000               ....inity...

0809351c <fpinan.5378>:
 809351c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
 809352c:	0000 0000                                   ....

08093530 <tinytens>:
 8093530:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 8093540:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 8093550:	6f43 64ac 0628 1168 434c 545f 4d49 0045     Co.d(.h.LC_TIME.
 8093560:	614a 006e 6546 0062 614d 0072 7041 0072     Jan.Feb.Mar.Apr.
 8093570:	614d 0079 754a 006e 754a 006c 7541 0067     May.Jun.Jul.Aug.
 8093580:	6553 0070 634f 0074 6f4e 0076 6544 0063     Sep.Oct.Nov.Dec.
 8093590:	614a 756e 7261 0079 6546 7262 6175 7972     January.February
 80935a0:	4d00 7261 6863 4100 7270 6c69 4a00 6e75     .March.April.Jun
 80935b0:	0065 754a 796c 4100 6775 7375 0074 6553     e.July.August.Se
 80935c0:	7470 6d65 6562 0072 634f 6f74 6562 0072     ptember.October.
 80935d0:	6f4e 6576 626d 7265 4400 6365 6d65 6562     November.Decembe
 80935e0:	0072 7553 006e 6f4d 006e 7554 0065 6557     r.Sun.Mon.Tue.We
 80935f0:	0064 6854 0075 7246 0069 6153 0074 7553     d.Thu.Fri.Sat.Su
 8093600:	646e 7961 4d00 6e6f 6164 0079 7554 7365     nday.Monday.Tues
 8093610:	6164 0079 6557 6e64 7365 6164 0079 6854     day.Wednesday.Th
 8093620:	7275 6473 7961 4600 6972 6164 0079 6153     ursday.Friday.Sa
 8093630:	7574 6472 7961 2500 2f6d 6425 252f 0079     turday.%m/%d/%y.
 8093640:	6125 2520 2062 6525 2520 3a48 4d25 253a     %a %b %e %H:%M:%
 8093650:	2053 5925 4100 004d 6125 2520 2062 6525     S %Y.AM.%a %b %e
 8093660:	2520 3a48 4d25 253a 2053 5a25 2520 0059      %H:%M:%S %Z %Y.
 8093670:	4925 253a 3a4d 5325 2520 0070               %I:%M:%S %p.

0809367c <_C_time_locale>:
 809367c:	3560 0809 3564 0809 3568 0809 356c 0809     `5..d5..h5..l5..
 809368c:	3570 0809 3574 0809 3578 0809 357c 0809     p5..t5..x5..|5..
 809369c:	3580 0809 3584 0809 3588 0809 358c 0809     .5...5...5...5..
 80936ac:	3590 0809 3598 0809 35a1 0809 35a7 0809     .5...5...5...5..
 80936bc:	3570 0809 35ad 0809 35b2 0809 35b7 0809     p5...5...5...5..
 80936cc:	35be 0809 35c8 0809 35d0 0809 35d9 0809     .5...5...5...5..
 80936dc:	35e2 0809 35e6 0809 35ea 0809 35ee 0809     .5...5...5...5..
 80936ec:	35f2 0809 35f6 0809 35fa 0809 35fe 0809     .5...5...5...5..
 80936fc:	3605 0809 360c 0809 3614 0809 361e 0809     .6...6...6...6..
 809370c:	3627 0809 362e 0809 1f1f 0809 3637 0809     '6...6......76..
 809371c:	3640 0809 3655 0809 2770 0809 3658 0809     @6..U6..p'..X6..
 809372c:	3590 0809 3598 0809 35a1 0809 35a7 0809     .5...5...5...5..
 809373c:	3570 0809 35ad 0809 35b2 0809 35b7 0809     p5...5...5...5..
 809374c:	35be 0809 35c8 0809 35d0 0809 35d9 0809     .5...5...5...5..
 809375c:	3053 0809 3670 0809 2fdc 0809 2fdc 0809     S0..p6.../.../..
 809376c:	2fdc 0809 2fdc 0809 2fdc 0809 5a54 4700     ./.../.../..TZ.G
 809377c:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
 809378c:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
 809379c:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
 80937ac:	3a6e 6825 2575 006e 0000 0000               n:%hu%n.....

080937b8 <__mprec_tens>:
 80937b8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 80937c8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 80937d8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 80937e8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 80937f8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 8093808:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 8093818:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 8093828:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 8093838:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 8093848:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 8093858:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 8093868:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 8093878:	9db4 79d9 7843 44ea                         ...yCx.D

08093880 <__mprec_bigtens>:
 8093880:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 8093890:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 80938a0:	bf3c 7f73 4fdd 7515                         <.s..O.u

080938a8 <p05.5385>:
 80938a8:	0005 0000 0019 0000 007d 0000               ........}...

080938b4 <link_const_variable_data_end>:
 80938b4:	0808635d 	.word	0x0808635d
 80938b8:	08086abb 	.word	0x08086abb
 80938bc:	08086bc9 	.word	0x08086bc9
 80938c0:	08086ccd 	.word	0x08086ccd
 80938c4:	08086e53 	.word	0x08086e53
 80938c8:	080871f5 	.word	0x080871f5
 80938cc:	080871f9 	.word	0x080871f9
 80938d0:	08087811 	.word	0x08087811
 80938d4:	08087815 	.word	0x08087815
 80938d8:	08087819 	.word	0x08087819
 80938dc:	0808781d 	.word	0x0808781d
 80938e0:	08087ce7 	.word	0x08087ce7
 80938e4:	08087e39 	.word	0x08087e39
 80938e8:	080884d9 	.word	0x080884d9
 80938ec:	080884fd 	.word	0x080884fd
 80938f0:	08088501 	.word	0x08088501
 80938f4:	08088819 	.word	0x08088819
 80938f8:	0808881d 	.word	0x0808881d
 80938fc:	08088ca5 	.word	0x08088ca5
 8093900:	08088e95 	.word	0x08088e95
 8093904:	08088f2d 	.word	0x08088f2d
 8093908:	08089321 	.word	0x08089321
 809390c:	08089325 	.word	0x08089325
 8093910:	08089329 	.word	0x08089329
 8093914:	0808932d 	.word	0x0808932d
 8093918:	08089331 	.word	0x08089331
 809391c:	08089335 	.word	0x08089335
 8093920:	08089339 	.word	0x08089339
 8093924:	0808933d 	.word	0x0808933d
 8093928:	08089341 	.word	0x08089341
 809392c:	08089345 	.word	0x08089345
 8093930:	08089349 	.word	0x08089349
 8093934:	0808934d 	.word	0x0808934d
 8093938:	08089351 	.word	0x08089351
 809393c:	08089355 	.word	0x08089355
 8093940:	08089359 	.word	0x08089359
 8093944:	0808935d 	.word	0x0808935d
 8093948:	08089361 	.word	0x08089361
 809394c:	08089365 	.word	0x08089365
 8093950:	08089369 	.word	0x08089369
 8093954:	0808936d 	.word	0x0808936d
 8093958:	08089371 	.word	0x08089371
 809395c:	08089375 	.word	0x08089375
 8093960:	08089379 	.word	0x08089379
 8093964:	08089e79 	.word	0x08089e79
 8093968:	0808a935 	.word	0x0808a935
 809396c:	0808ac4d 	.word	0x0808ac4d
 8093970:	0808ac99 	.word	0x0808ac99
 8093974:	0808b7fd 	.word	0x0808b7fd
 8093978:	0808bb05 	.word	0x0808bb05
 809397c:	0808bdb1 	.word	0x0808bdb1
 8093980:	0808be35 	.word	0x0808be35
 8093984:	0808bef9 	.word	0x0808bef9
 8093988:	0808bf7d 	.word	0x0808bf7d
 809398c:	0808c041 	.word	0x0808c041
 8093990:	0808c105 	.word	0x0808c105

08093994 <link_constructors_end>:
	...
