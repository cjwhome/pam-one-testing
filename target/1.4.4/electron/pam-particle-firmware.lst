
c:/Users/abailly/PAM_ESP/pam-particle-firmware/target/1.4.4/electron/pam-particle-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00014ab0  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  08094ad0  08094ad0  00024ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  08094ad8  00034000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001d0  20000000  08094adc  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000124c  200001d0  200001d0  000501d0  2**3
                  ALLOC
  7 .module_info_suffix 00000028  08094cac  08094cac  00044cac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  08094cd4  08094cd4  00044cd4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0029a49a  00000000  00000000  00044cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00034c61  00000000  00000000  002df172  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000372cd  00000000  00000000  00313dd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003c20  00000000  00000000  0034b0a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00006b88  00000000  00000000  0034ecc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00059cee  00000000  00000000  00355848  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000851f7  00000000  00000000  003af536  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000d0125  00000000  00000000  0043472d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00011900  00000000  00000000  00504854  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080020:	4809      	ldr	r0, [pc, #36]	; (8080048 <module_user_pre_init+0x28>)
 8080022:	490a      	ldr	r1, [pc, #40]	; (808004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080026:	4288      	cmp	r0, r1
 8080028:	d005      	beq.n	8080036 <module_user_pre_init+0x16>
 808002a:	4a09      	ldr	r2, [pc, #36]	; (8080050 <module_user_pre_init+0x30>)
 808002c:	4282      	cmp	r2, r0
 808002e:	d002      	beq.n	8080036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080030:	1a12      	subs	r2, r2, r0
 8080032:	f00e fb64 	bl	808e6fe <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080036:	4807      	ldr	r0, [pc, #28]	; (8080054 <module_user_pre_init+0x34>)
 8080038:	4a07      	ldr	r2, [pc, #28]	; (8080058 <module_user_pre_init+0x38>)
 808003a:	2100      	movs	r1, #0
 808003c:	1a12      	subs	r2, r2, r0
 808003e:	f00e fb69 	bl	808e714 <memset>
    return &link_heap_start;
}
 8080042:	4806      	ldr	r0, [pc, #24]	; (808005c <module_user_pre_init+0x3c>)
 8080044:	bd08      	pop	{r3, pc}
 8080046:	bf00      	nop
 8080048:	20000000 	.word	0x20000000
 808004c:	08094adc 	.word	0x08094adc
 8080050:	200001d0 	.word	0x200001d0
 8080054:	200001d0 	.word	0x200001d0
 8080058:	2000141c 	.word	0x2000141c
 808005c:	2000141c 	.word	0x2000141c

08080060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080062:	f00b fe77 	bl	808bd54 <module_user_init_hook>
 8080066:	4b07      	ldr	r3, [pc, #28]	; (8080084 <module_user_init+0x24>)
 8080068:	4c07      	ldr	r4, [pc, #28]	; (8080088 <module_user_init+0x28>)
 808006a:	461e      	mov	r6, r3
 808006c:	1ae4      	subs	r4, r4, r3
 808006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080070:	2500      	movs	r5, #0
 8080072:	42a5      	cmp	r5, r4
 8080074:	d004      	beq.n	8080080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 808007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808007c:	3501      	adds	r5, #1
 808007e:	e7f8      	b.n	8080072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080080:	bd70      	pop	{r4, r5, r6, pc}
 8080082:	bf00      	nop
 8080084:	080949e4 	.word	0x080949e4
 8080088:	08094ac4 	.word	0x08094ac4

0808008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 808008c:	f002 bb40 	b.w	8082710 <setup>

08080090 <module_user_loop>:
}

void module_user_loop() {
 8080090:	b508      	push	{r3, lr}
    loop();
 8080092:	f006 fc55 	bl	8086940 <loop>
    _post_loop();
}
 8080096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 808009a:	f00b be1d 	b.w	808bcd8 <_post_loop>

0808009e <_Znwj>:
 808009e:	f00a bbd3 	b.w	808a848 <malloc>

080800a2 <_ZdlPv>:
 80800a2:	f00a bbd9 	b.w	808a858 <free>

080800a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a6:	7800      	ldrb	r0, [r0, #0]
 80800a8:	fab0 f080 	clz	r0, r0
 80800ac:	0940      	lsrs	r0, r0, #5
 80800ae:	4770      	bx	lr

080800b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800b0:	2301      	movs	r3, #1
 80800b2:	7003      	strb	r3, [r0, #0]
 80800b4:	4770      	bx	lr

080800b6 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80800b6:	b148      	cbz	r0, 80800cc <null_ptr_check+0x16>
 80800b8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80800ba:	b13b      	cbz	r3, 80800cc <null_ptr_check+0x16>
 80800bc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80800be:	b12b      	cbz	r3, 80800cc <null_ptr_check+0x16>
 80800c0:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80800c2:	fab0 f080 	clz	r0, r0
 80800c6:	0940      	lsrs	r0, r0, #5
 80800c8:	4240      	negs	r0, r0
 80800ca:	4770      	bx	lr
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
 80800cc:	f04f 30ff 	mov.w	r0, #4294967295
		/* Device structure is fine */
		rslt = BME680_OK;
	}

	return rslt;
}
 80800d0:	4770      	bx	lr

080800d2 <set_mem_page>:

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
 80800d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80800d4:	4602      	mov	r2, r0
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
 80800d6:	4608      	mov	r0, r1

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
 80800d8:	460c      	mov	r4, r1
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
 80800da:	f7ff ffec 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80800de:	4605      	mov	r5, r0
 80800e0:	bb50      	cbnz	r0, 8080138 <set_mem_page+0x66>
		if (reg_addr > 0x7f)
			mem_page = BME680_MEM_PAGE1;
		else
			mem_page = BME680_MEM_PAGE0;
 80800e2:	f012 0f80 	tst.w	r2, #128	; 0x80

		if (mem_page != dev->mem_page) {
 80800e6:	78ca      	ldrb	r2, [r1, #3]
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (reg_addr > 0x7f)
			mem_page = BME680_MEM_PAGE1;
		else
			mem_page = BME680_MEM_PAGE0;
 80800e8:	bf14      	ite	ne
 80800ea:	2300      	movne	r3, #0
 80800ec:	2310      	moveq	r3, #16

		if (mem_page != dev->mem_page) {
 80800ee:	429a      	cmp	r2, r3
 80800f0:	d022      	beq.n	8080138 <set_mem_page+0x66>
			dev->mem_page = mem_page;
 80800f2:	70cb      	strb	r3, [r1, #3]

			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 80800f4:	6c8e      	ldr	r6, [r1, #72]	; 0x48
 80800f6:	2301      	movs	r3, #1
 80800f8:	f10d 0207 	add.w	r2, sp, #7
 80800fc:	21f3      	movs	r1, #243	; 0xf3
 80800fe:	7860      	ldrb	r0, [r4, #1]
 8080100:	47b0      	blx	r6
 8080102:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
			if (dev->com_rslt != 0)
 8080106:	b110      	cbz	r0, 808010e <set_mem_page+0x3c>
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
					&reg, 1);
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
 8080108:	f06f 0501 	mvn.w	r5, #1
 808010c:	e014      	b.n	8080138 <set_mem_page+0x66>
			if (dev->com_rslt != 0)
				rslt = BME680_E_COM_FAIL;

			if (rslt == BME680_OK) {
				reg = reg & (~BME680_MEM_PAGE_MSK);
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 808010e:	78e3      	ldrb	r3, [r4, #3]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 8080110:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
			if (dev->com_rslt != 0)
				rslt = BME680_E_COM_FAIL;

			if (rslt == BME680_OK) {
				reg = reg & (~BME680_MEM_PAGE_MSK);
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 8080112:	f003 0210 	and.w	r2, r3, #16
 8080116:	f89d 3007 	ldrb.w	r3, [sp, #7]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 808011a:	2173      	movs	r1, #115	; 0x73
			if (dev->com_rslt != 0)
				rslt = BME680_E_COM_FAIL;

			if (rslt == BME680_OK) {
				reg = reg & (~BME680_MEM_PAGE_MSK);
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 808011c:	f023 0310 	bic.w	r3, r3, #16
 8080120:	4313      	orrs	r3, r2
 8080122:	f88d 3007 	strb.w	r3, [sp, #7]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 8080126:	f10d 0207 	add.w	r2, sp, #7
 808012a:	2301      	movs	r3, #1
 808012c:	7860      	ldrb	r0, [r4, #1]
 808012e:	47b0      	blx	r6
 8080130:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
					&reg, 1);
				if (dev->com_rslt != 0)
 8080134:	2800      	cmp	r0, #0
 8080136:	d1e7      	bne.n	8080108 <set_mem_page+0x36>
			}
		}
	}

	return rslt;
}
 8080138:	4628      	mov	r0, r5
 808013a:	b002      	add	sp, #8
 808013c:	bd70      	pop	{r4, r5, r6, pc}

0808013e <get_mem_page>:

/*!
 * @brief This internal API is used to get the memory page based on register address.
 */
static int8_t get_mem_page(struct bme680_dev *dev)
{
 808013e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8080140:	4604      	mov	r4, r0
	int8_t rslt;
	uint8_t reg;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080142:	f7ff ffb8 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080146:	4605      	mov	r5, r0
 8080148:	b988      	cbnz	r0, 808016e <get_mem_page+0x30>
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 808014a:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 808014c:	2301      	movs	r3, #1
 808014e:	f10d 0207 	add.w	r2, sp, #7
 8080152:	21f3      	movs	r1, #243	; 0xf3
 8080154:	7860      	ldrb	r0, [r4, #1]
 8080156:	47b0      	blx	r6
 8080158:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
		if (dev->com_rslt != 0)
 808015c:	b928      	cbnz	r0, 808016a <get_mem_page+0x2c>
			rslt = BME680_E_COM_FAIL;
		else
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
 808015e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8080162:	f003 0310 	and.w	r3, r3, #16
 8080166:	70e3      	strb	r3, [r4, #3]
 8080168:	e001      	b.n	808016e <get_mem_page+0x30>
	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
		if (dev->com_rslt != 0)
			rslt = BME680_E_COM_FAIL;
 808016a:	f06f 0501 	mvn.w	r5, #1
		else
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
	}

	return rslt;
}
 808016e:	4628      	mov	r0, r5
 8080170:	b002      	add	sp, #8
 8080172:	bd70      	pop	{r4, r5, r6, pc}

08080174 <boundary_check.isra.1.constprop.2>:
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
	int8_t rslt = BME680_OK;

	if (value != NULL) {
 8080174:	b140      	cbz	r0, 8080188 <boundary_check.isra.1.constprop.2+0x14>
			/* Auto correct the invalid value to minimum value */
			*value = min;
			dev->info_msg |= BME680_I_MIN_CORRECTION;
		}
		/* Check if value is above maximum value */
		if (*value > max) {
 8080176:	7803      	ldrb	r3, [r0, #0]
 8080178:	428b      	cmp	r3, r1
 808017a:	d908      	bls.n	808018e <boundary_check.isra.1.constprop.2+0x1a>
			/* Auto correct the invalid value to maximum value */
			*value = max;
 808017c:	7001      	strb	r1, [r0, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 808017e:	7813      	ldrb	r3, [r2, #0]
 8080180:	f043 0302 	orr.w	r3, r3, #2
 8080184:	7013      	strb	r3, [r2, #0]
 8080186:	e002      	b.n	808018e <boundary_check.isra.1.constprop.2+0x1a>
		}
	} else {
		rslt = BME680_E_NULL_PTR;
 8080188:	f04f 30ff 	mov.w	r0, #4294967295
 808018c:	4770      	bx	lr
 * @brief This internal API is used to validate the boundary
 * conditions.
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
	int8_t rslt = BME680_OK;
 808018e:	2000      	movs	r0, #0
	} else {
		rslt = BME680_E_NULL_PTR;
	}

	return rslt;
}
 8080190:	4770      	bx	lr

08080192 <bme680_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
 8080192:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8080196:	4606      	mov	r6, r0
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080198:	4618      	mov	r0, r3

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
 808019a:	4688      	mov	r8, r1
 808019c:	4691      	mov	r9, r2
 808019e:	461d      	mov	r5, r3
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80801a0:	f7ff ff89 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80801a4:	4604      	mov	r4, r0
 80801a6:	b9a8      	cbnz	r0, 80801d4 <bme680_get_regs+0x42>
		if (dev->intf == BME680_SPI_INTF) {
 80801a8:	78ab      	ldrb	r3, [r5, #2]
 80801aa:	b93b      	cbnz	r3, 80801bc <bme680_get_regs+0x2a>
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
 80801ac:	4629      	mov	r1, r5
 80801ae:	4630      	mov	r0, r6
 80801b0:	f7ff ff8f 	bl	80800d2 <set_mem_page>
			if (rslt == BME680_OK)
 80801b4:	4604      	mov	r4, r0
 80801b6:	b908      	cbnz	r0, 80801bc <bme680_get_regs+0x2a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
 80801b8:	f046 0680 	orr.w	r6, r6, #128	; 0x80
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80801bc:	6caf      	ldr	r7, [r5, #72]	; 0x48
 80801be:	464b      	mov	r3, r9
 80801c0:	4642      	mov	r2, r8
 80801c2:	4631      	mov	r1, r6
 80801c4:	7868      	ldrb	r0, [r5, #1]
 80801c6:	47b8      	blx	r7
		if (dev->com_rslt != 0)
 80801c8:	2800      	cmp	r0, #0
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
			if (rslt == BME680_OK)
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80801ca:	f885 0054 	strb.w	r0, [r5, #84]	; 0x54
		if (dev->com_rslt != 0)
			rslt = BME680_E_COM_FAIL;
 80801ce:	bf18      	it	ne
 80801d0:	f06f 0401 	mvnne.w	r4, #1
	}

	return rslt;
}
 80801d4:	4620      	mov	r0, r4
 80801d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080801da <bme680_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme680_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme680_dev *dev)
{
 80801da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80801de:	461e      	mov	r6, r3
 80801e0:	b08b      	sub	sp, #44	; 0x2c
 80801e2:	4683      	mov	fp, r0
 80801e4:	468a      	mov	sl, r1
 80801e6:	4614      	mov	r4, r2
	int8_t rslt;
	/* Length of the temporary buffer is 2*(length of register)*/
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 80801e8:	2100      	movs	r1, #0
 80801ea:	2228      	movs	r2, #40	; 0x28
 80801ec:	4668      	mov	r0, sp
 80801ee:	f00e fa91 	bl	808e714 <memset>
	uint16_t index;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80801f2:	4630      	mov	r0, r6
 80801f4:	f7ff ff5f 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80801f8:	4605      	mov	r5, r0
 80801fa:	bba8      	cbnz	r0, 8080268 <bme680_set_regs+0x8e>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
 80801fc:	1e63      	subs	r3, r4, #1
 80801fe:	2b12      	cmp	r3, #18
 8080200:	d830      	bhi.n	8080264 <bme680_set_regs+0x8a>
 8080202:	f10d 0801 	add.w	r8, sp, #1
 8080206:	465f      	mov	r7, fp
 8080208:	46c1      	mov	r9, r8
 808020a:	f10a 3aff 	add.w	sl, sl, #4294967295
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
 808020e:	b2a4      	uxth	r4, r4
 8080210:	ebcb 0307 	rsb	r3, fp, r7
 8080214:	b29b      	uxth	r3, r3
 8080216:	429c      	cmp	r4, r3
 8080218:	d913      	bls.n	8080242 <bme680_set_regs+0x68>
				if (dev->intf == BME680_SPI_INTF) {
 808021a:	78b3      	ldrb	r3, [r6, #2]
 808021c:	b943      	cbnz	r3, 8080230 <bme680_set_regs+0x56>
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
 808021e:	4631      	mov	r1, r6
 8080220:	7838      	ldrb	r0, [r7, #0]
 8080222:	f7ff ff56 	bl	80800d2 <set_mem_page>
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 8080226:	783b      	ldrb	r3, [r7, #0]
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
				if (dev->intf == BME680_SPI_INTF) {
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
 8080228:	4605      	mov	r5, r0
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 808022a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 808022e:	e000      	b.n	8080232 <bme680_set_regs+0x58>
				} else {
					tmp_buff[(2 * index)] = reg_addr[index];
 8080230:	783b      	ldrb	r3, [r7, #0]
 8080232:	f808 3c01 	strb.w	r3, [r8, #-1]
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
 8080236:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 808023a:	3701      	adds	r7, #1
 808023c:	f808 3b02 	strb.w	r3, [r8], #2
 8080240:	e7e6      	b.n	8080210 <bme680_set_regs+0x36>
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
 8080242:	b98d      	cbnz	r5, 8080268 <bme680_set_regs+0x8e>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 8080244:	0063      	lsls	r3, r4, #1
 8080246:	3b01      	subs	r3, #1
 8080248:	6cf4      	ldr	r4, [r6, #76]	; 0x4c
 808024a:	b29b      	uxth	r3, r3
 808024c:	464a      	mov	r2, r9
 808024e:	f89d 1000 	ldrb.w	r1, [sp]
 8080252:	7870      	ldrb	r0, [r6, #1]
 8080254:	47a0      	blx	r4
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
 8080256:	2800      	cmp	r0, #0
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 8080258:	f886 0054 	strb.w	r0, [r6, #84]	; 0x54
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
 808025c:	bf18      	it	ne
 808025e:	f06f 0501 	mvnne.w	r5, #1
 8080262:	e001      	b.n	8080268 <bme680_set_regs+0x8e>
			}
		} else {
			rslt = BME680_E_INVALID_LENGTH;
 8080264:	f06f 0503 	mvn.w	r5, #3
		}
	}

	return rslt;
}
 8080268:	4628      	mov	r0, r5
 808026a:	b00b      	add	sp, #44	; 0x2c
 808026c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08080270 <bme680_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme680_soft_reset(struct bme680_dev *dev)
{
 8080270:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int8_t rslt;
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
 8080272:	23e0      	movs	r3, #224	; 0xe0
 8080274:	f88d 3006 	strb.w	r3, [sp, #6]
	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 8080278:	23b6      	movs	r3, #182	; 0xb6

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme680_soft_reset(struct bme680_dev *dev)
{
 808027a:	4605      	mov	r5, r0
	int8_t rslt;
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 808027c:	f88d 3007 	strb.w	r3, [sp, #7]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080280:	f7ff ff19 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080284:	4604      	mov	r4, r0
 8080286:	b9d8      	cbnz	r0, 80802c0 <bme680_soft_reset+0x50>
		if (dev->intf == BME680_SPI_INTF)
 8080288:	78ab      	ldrb	r3, [r5, #2]
 808028a:	b16b      	cbz	r3, 80802a8 <bme680_soft_reset+0x38>
			rslt = get_mem_page(dev);

		/* Reset the device */
		if (rslt == BME680_OK) {
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 808028c:	462b      	mov	r3, r5
 808028e:	2201      	movs	r2, #1
 8080290:	f10d 0107 	add.w	r1, sp, #7
 8080294:	f10d 0006 	add.w	r0, sp, #6
 8080298:	f7ff ff9f 	bl	80801da <bme680_set_regs>
 808029c:	4604      	mov	r4, r0
			/* Wait for 5ms */
			dev->delay_ms(BME680_RESET_PERIOD);
 808029e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80802a0:	200a      	movs	r0, #10
 80802a2:	4798      	blx	r3

			if (rslt == BME680_OK) {
 80802a4:	b134      	cbz	r4, 80802b4 <bme680_soft_reset+0x44>
 80802a6:	e00b      	b.n	80802c0 <bme680_soft_reset+0x50>

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (dev->intf == BME680_SPI_INTF)
			rslt = get_mem_page(dev);
 80802a8:	4628      	mov	r0, r5
 80802aa:	f7ff ff48 	bl	808013e <get_mem_page>

		/* Reset the device */
		if (rslt == BME680_OK) {
 80802ae:	4604      	mov	r4, r0
 80802b0:	b930      	cbnz	r0, 80802c0 <bme680_soft_reset+0x50>
 80802b2:	e7eb      	b.n	808028c <bme680_soft_reset+0x1c>
			/* Wait for 5ms */
			dev->delay_ms(BME680_RESET_PERIOD);

			if (rslt == BME680_OK) {
				/* After reset get the memory page */
				if (dev->intf == BME680_SPI_INTF)
 80802b4:	78ab      	ldrb	r3, [r5, #2]
 80802b6:	b91b      	cbnz	r3, 80802c0 <bme680_soft_reset+0x50>
					rslt = get_mem_page(dev);
 80802b8:	4628      	mov	r0, r5
 80802ba:	f7ff ff40 	bl	808013e <get_mem_page>
 80802be:	4604      	mov	r4, r0
			}
		}
	}

	return rslt;
}
 80802c0:	4620      	mov	r0, r4
 80802c2:	b003      	add	sp, #12
 80802c4:	bd30      	pop	{r4, r5, pc}

080802c6 <bme680_init>:
/*!
 *@brief This API is the entry point.
 *It reads the chip-id and calibration data from the sensor.
 */
int8_t bme680_init(struct bme680_dev *dev)
{
 80802c6:	b530      	push	{r4, r5, lr}
 80802c8:	b08d      	sub	sp, #52	; 0x34
 80802ca:	4604      	mov	r4, r0
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80802cc:	f7ff fef3 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80802d0:	4605      	mov	r5, r0
 80802d2:	2800      	cmp	r0, #0
 80802d4:	f040 80d5 	bne.w	8080482 <bme680_init+0x1bc>
		/* Soft reset to restore it to default values*/
		rslt = bme680_soft_reset(dev);
 80802d8:	4620      	mov	r0, r4
 80802da:	f7ff ffc9 	bl	8080270 <bme680_soft_reset>
		if (rslt == BME680_OK) {
 80802de:	4605      	mov	r5, r0
 80802e0:	2800      	cmp	r0, #0
 80802e2:	f040 80ce 	bne.w	8080482 <bme680_init+0x1bc>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 80802e6:	4623      	mov	r3, r4
 80802e8:	2201      	movs	r2, #1
 80802ea:	4621      	mov	r1, r4
 80802ec:	20d0      	movs	r0, #208	; 0xd0
 80802ee:	f7ff ff50 	bl	8080192 <bme680_get_regs>
			if (rslt == BME680_OK) {
 80802f2:	4605      	mov	r5, r0
 80802f4:	2800      	cmp	r0, #0
 80802f6:	f040 80c4 	bne.w	8080482 <bme680_init+0x1bc>
				if (dev->chip_id == BME680_CHIP_ID) {
 80802fa:	7823      	ldrb	r3, [r4, #0]
 80802fc:	2b61      	cmp	r3, #97	; 0x61
 80802fe:	f040 80be 	bne.w	808047e <bme680_init+0x1b8>
 * @brief This internal API is used to read the calibrated data from the sensor.
 */
static int8_t get_calib_data(struct bme680_dev *dev)
{
	int8_t rslt;
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
 8080302:	4601      	mov	r1, r0
 8080304:	2229      	movs	r2, #41	; 0x29
 8080306:	a801      	add	r0, sp, #4
 8080308:	f00e fa04 	bl	808e714 <memset>
	uint8_t temp_var = 0; /* Temporary variable */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 808030c:	4620      	mov	r0, r4
 */
static int8_t get_calib_data(struct bme680_dev *dev)
{
	int8_t rslt;
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
	uint8_t temp_var = 0; /* Temporary variable */
 808030e:	f88d 5003 	strb.w	r5, [sp, #3]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080312:	f7ff fed0 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080316:	4605      	mov	r5, r0
 8080318:	2800      	cmp	r0, #0
 808031a:	f040 80b2 	bne.w	8080482 <bme680_init+0x1bc>
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
 808031e:	4623      	mov	r3, r4
 8080320:	2219      	movs	r2, #25
 8080322:	a901      	add	r1, sp, #4
 8080324:	2089      	movs	r0, #137	; 0x89
 8080326:	f7ff ff34 	bl	8080192 <bme680_get_regs>
		/* Append the second half in the same array */
		if (rslt == BME680_OK)
 808032a:	4605      	mov	r5, r0
 808032c:	b938      	cbnz	r0, 808033e <bme680_init+0x78>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
 808032e:	4623      	mov	r3, r4
 8080330:	2210      	movs	r2, #16
 8080332:	f10d 011d 	add.w	r1, sp, #29
 8080336:	20e1      	movs	r0, #225	; 0xe1
 8080338:	f7ff ff2b 	bl	8080192 <bme680_get_regs>
 808033c:	4605      	mov	r5, r0
			, BME680_COEFF_ADDR2_LEN, dev);

		/* Temperature related coefficients */
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
 808033e:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8080342:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8080346:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 808034a:	82e3      	strh	r3, [r4, #22]
			coeff_array[BME680_T1_LSB_REG]));
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
 808034c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8080350:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8080354:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8080358:	8323      	strh	r3, [r4, #24]
			coeff_array[BME680_T2_LSB_REG]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 808035a:	f89d 3007 	ldrb.w	r3, [sp, #7]

		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 808035e:	f89d 200a 	ldrb.w	r2, [sp, #10]
		/* Temperature related coefficients */
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
			coeff_array[BME680_T1_LSB_REG]));
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
			coeff_array[BME680_T2_LSB_REG]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 8080362:	76a3      	strb	r3, [r4, #26]

		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 8080364:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8080368:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 808036c:	83a3      	strh	r3, [r4, #28]
			coeff_array[BME680_P1_LSB_REG]));
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
 808036e:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8080372:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8080376:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 808037a:	83e3      	strh	r3, [r4, #30]
			coeff_array[BME680_P2_LSB_REG]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 808037c:	f89d 300d 	ldrb.w	r3, [sp, #13]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 8080380:	f89d 2010 	ldrb.w	r2, [sp, #16]
		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
			coeff_array[BME680_P1_LSB_REG]));
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
			coeff_array[BME680_P2_LSB_REG]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 8080384:	f884 3020 	strb.w	r3, [r4, #32]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 8080388:	f89d 300f 	ldrb.w	r3, [sp, #15]
 808038c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8080390:	8463      	strh	r3, [r4, #34]	; 0x22
			coeff_array[BME680_P4_LSB_REG]));
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
 8080392:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8080396:	f89d 3011 	ldrb.w	r3, [sp, #17]
 808039a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 808039e:	84a3      	strh	r3, [r4, #36]	; 0x24
			coeff_array[BME680_P5_LSB_REG]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 80803a0:	f89d 3014 	ldrb.w	r3, [sp, #20]
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 80803a4:	f89d 2018 	ldrb.w	r2, [sp, #24]
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
			coeff_array[BME680_P4_LSB_REG]));
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
			coeff_array[BME680_P5_LSB_REG]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 80803a8:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
 80803ac:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80803b0:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 80803b4:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80803b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80803bc:	8523      	strh	r3, [r4, #40]	; 0x28
			coeff_array[BME680_P8_LSB_REG]));
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
 80803be:	f89d 201a 	ldrb.w	r2, [sp, #26]
 80803c2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80803c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80803ca:	8563      	strh	r3, [r4, #42]	; 0x2a
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 80803cc:	f89d 301b 	ldrb.w	r3, [sp, #27]

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80803d0:	f89d 101f 	ldrb.w	r1, [sp, #31]
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
			coeff_array[BME680_P8_LSB_REG]));
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 80803d4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
 80803d8:	f89d 301e 	ldrb.w	r3, [sp, #30]
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80803dc:	f003 020f 	and.w	r2, r3, #15
 80803e0:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 80803e4:	8122      	strh	r2, [r4, #8]
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80803e6:	f89d 201d 	ldrb.w	r2, [sp, #29]
 80803ea:	091b      	lsrs	r3, r3, #4
 80803ec:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80803f0:	8163      	strh	r3, [r4, #10]
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 80803f2:	f89d 3020 	ldrb.w	r3, [sp, #32]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];

		/* Gas heater related coefficients */
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 80803f6:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 80803fa:	7323      	strb	r3, [r4, #12]
		dev->calib.par_h4 = (int8_t) coeff_array[BME680_H4_REG];
 80803fc:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8080400:	7363      	strb	r3, [r4, #13]
		dev->calib.par_h5 = (int8_t) coeff_array[BME680_H5_REG];
 8080402:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 8080406:	73a3      	strb	r3, [r4, #14]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
 8080408:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 808040c:	73e3      	strb	r3, [r4, #15]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
 808040e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8080412:	7423      	strb	r3, [r4, #16]

		/* Gas heater related coefficients */
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
 8080414:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 8080418:	7463      	strb	r3, [r4, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 808041a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 808041e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8080422:	8263      	strh	r3, [r4, #18]
			coeff_array[BME680_GH2_LSB_REG]));
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
 8080424:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 8080428:	7523      	strb	r3, [r4, #20]

		/* Other coefficients */
		if (rslt == BME680_OK) {
 808042a:	bb15      	cbnz	r5, 8080472 <bme680_init+0x1ac>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
 808042c:	4623      	mov	r3, r4
 808042e:	2201      	movs	r2, #1
 8080430:	f10d 0103 	add.w	r1, sp, #3
 8080434:	2002      	movs	r0, #2
 8080436:	f7ff feac 	bl	8080192 <bme680_get_regs>

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 808043a:	f89d 3003 	ldrb.w	r3, [sp, #3]
			if (rslt == BME680_OK) {
 808043e:	4605      	mov	r5, r0

		/* Other coefficients */
		if (rslt == BME680_OK) {
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 8080440:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8080444:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if (rslt == BME680_OK) {
 8080448:	b998      	cbnz	r0, 8080472 <bme680_init+0x1ac>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
 808044a:	4623      	mov	r3, r4
 808044c:	2201      	movs	r2, #1
 808044e:	f10d 0103 	add.w	r1, sp, #3
 8080452:	f7ff fe9e 	bl	8080192 <bme680_get_regs>

				dev->calib.res_heat_val = (int8_t) temp_var;
 8080456:	f89d 3003 	ldrb.w	r3, [sp, #3]
				if (rslt == BME680_OK)
 808045a:	4605      	mov	r5, r0

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
			if (rslt == BME680_OK) {
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);

				dev->calib.res_heat_val = (int8_t) temp_var;
 808045c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
				if (rslt == BME680_OK)
 8080460:	b938      	cbnz	r0, 8080472 <bme680_init+0x1ac>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
 8080462:	4623      	mov	r3, r4
 8080464:	2201      	movs	r2, #1
 8080466:	f10d 0103 	add.w	r1, sp, #3
 808046a:	2004      	movs	r0, #4
 808046c:	f7ff fe91 	bl	8080192 <bme680_get_regs>
 8080470:	4605      	mov	r5, r0
			}
		}
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
 8080472:	f99d 3003 	ldrsb.w	r3, [sp, #3]
 8080476:	111b      	asrs	r3, r3, #4
 8080478:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
 808047c:	e001      	b.n	8080482 <bme680_init+0x1bc>
			if (rslt == BME680_OK) {
				if (dev->chip_id == BME680_CHIP_ID) {
					/* Get the Calibration data */
					rslt = get_calib_data(dev);
				} else {
					rslt = BME680_E_DEV_NOT_FOUND;
 808047e:	f06f 0502 	mvn.w	r5, #2
			}
		}
	}

	return rslt;
}
 8080482:	4628      	mov	r0, r5
 8080484:	b00d      	add	sp, #52	; 0x34
 8080486:	bd30      	pop	{r4, r5, pc}

08080488 <bme680_set_sensor_mode>:

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
 8080488:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 808048a:	2374      	movs	r3, #116	; 0x74

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
 808048c:	4604      	mov	r4, r0
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 808048e:	f88d 3007 	strb.w	r3, [sp, #7]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080492:	f7ff fe10 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080496:	bba0      	cbnz	r0, 8080502 <bme680_set_sensor_mode+0x7a>
 8080498:	4605      	mov	r5, r0
		/* Call recursively until in sleep */
		do {
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
 808049a:	4623      	mov	r3, r4
 808049c:	2201      	movs	r2, #1
 808049e:	f10d 0106 	add.w	r1, sp, #6
 80804a2:	2074      	movs	r0, #116	; 0x74
 80804a4:	f7ff fe75 	bl	8080192 <bme680_get_regs>
			if (rslt == BME680_OK) {
 80804a8:	b9a0      	cbnz	r0, 80804d4 <bme680_set_sensor_mode+0x4c>
				/* Put to sleep before changing mode */
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
 80804aa:	f89d 3006 	ldrb.w	r3, [sp, #6]

				if (pow_mode != BME680_SLEEP_MODE) {
 80804ae:	f013 0503 	ands.w	r5, r3, #3
 80804b2:	d011      	beq.n	80804d8 <bme680_set_sensor_mode+0x50>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 80804b4:	f023 0303 	bic.w	r3, r3, #3
 80804b8:	f88d 3006 	strb.w	r3, [sp, #6]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80804bc:	2201      	movs	r2, #1
 80804be:	4623      	mov	r3, r4
 80804c0:	f10d 0106 	add.w	r1, sp, #6
 80804c4:	f10d 0007 	add.w	r0, sp, #7
 80804c8:	f7ff fe87 	bl	80801da <bme680_set_regs>
					dev->delay_ms(BME680_POLL_PERIOD_MS);
 80804cc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80804ce:	200a      	movs	r0, #10
 80804d0:	4798      	blx	r3
 80804d2:	e7e2      	b.n	808049a <bme680_set_sensor_mode+0x12>
				}
			}
		} while (pow_mode != BME680_SLEEP_MODE);
 80804d4:	2d00      	cmp	r5, #0
 80804d6:	d1e0      	bne.n	808049a <bme680_set_sensor_mode+0x12>

		/* Already in sleep */
		if (dev->power_mode != BME680_SLEEP_MODE) {
 80804d8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80804dc:	b18b      	cbz	r3, 8080502 <bme680_set_sensor_mode+0x7a>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
 80804de:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80804e2:	f003 0303 	and.w	r3, r3, #3
 80804e6:	f022 0203 	bic.w	r2, r2, #3
 80804ea:	4313      	orrs	r3, r2
 80804ec:	f88d 3006 	strb.w	r3, [sp, #6]
			if (rslt == BME680_OK)
 80804f0:	b938      	cbnz	r0, 8080502 <bme680_set_sensor_mode+0x7a>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80804f2:	4623      	mov	r3, r4
 80804f4:	2201      	movs	r2, #1
 80804f6:	f10d 0106 	add.w	r1, sp, #6
 80804fa:	f10d 0007 	add.w	r0, sp, #7
 80804fe:	f7ff fe6c 	bl	80801da <bme680_set_regs>
		}
	}

	return rslt;
}
 8080502:	b003      	add	sp, #12
 8080504:	bd30      	pop	{r4, r5, pc}

08080506 <bme680_set_sensor_settings>:
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 8080506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
 808050a:	2300      	movs	r3, #0
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 808050c:	b088      	sub	sp, #32
 808050e:	4606      	mov	r6, r0
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080510:	4608      	mov	r0, r1
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 8080512:	460c      	mov	r4, r1
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
 8080514:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t count = 0;
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 8080518:	9304      	str	r3, [sp, #16]
 808051a:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 808051e:	9306      	str	r3, [sp, #24]
 8080520:	f8ad 301c 	strh.w	r3, [sp, #28]
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080524:	f7ff fdc7 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080528:	2800      	cmp	r0, #0
 808052a:	f040 8164 	bne.w	80807f6 <bme680_set_sensor_settings+0x2f0>
		if (desired_settings & BME680_GAS_MEAS_SEL)
 808052e:	0732      	lsls	r2, r6, #28
	uint8_t reg_addr;
	uint8_t data = 0;
	uint8_t count = 0;
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
 8080530:	f891 7044 	ldrb.w	r7, [r1, #68]	; 0x44

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (desired_settings & BME680_GAS_MEAS_SEL)
 8080534:	d56a      	bpl.n	808060c <bme680_set_sensor_settings+0x106>
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
 8080536:	2f01      	cmp	r7, #1

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
 8080538:	f8ad 0008 	strh.w	r0, [sp, #8]
		uint8_t reg_data[2] = {0};
 808053c:	f8ad 000c 	strh.w	r0, [sp, #12]

		if (dev->power_mode == BME680_FORCED_MODE) {
 8080540:	d163      	bne.n	808060a <bme680_set_sensor_settings+0x104>
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 8080542:	235a      	movs	r3, #90	; 0x5a
 8080544:	f88d 3008 	strb.w	r3, [sp, #8]
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
 8080548:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
	int32_t var3;
	int32_t var4;
	int32_t var5;
	int32_t heatr_res_x100;

	if (temp < 200) /* Cap temperature */
 808054c:	2bc7      	cmp	r3, #199	; 0xc7
 808054e:	d905      	bls.n	808055c <bme680_set_sensor_settings+0x56>
 8080550:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8080554:	bf28      	it	cs
 8080556:	f44f 73c8 	movcs.w	r3, #400	; 0x190
 808055a:	e000      	b.n	808055e <bme680_set_sensor_settings+0x58>
		temp = 200;
 808055c:	23c8      	movs	r3, #200	; 0xc8
		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
 808055e:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 8080562:	2114      	movs	r1, #20
 8080564:	f502 3216 	add.w	r2, r2, #153600	; 0x25800
 8080568:	f202 1299 	addw	r2, r2, #409	; 0x199
 808056c:	4353      	muls	r3, r2
 808056e:	fb93 f3f1 	sdiv	r3, r3, r1
 8080572:	210a      	movs	r1, #10
 8080574:	f503 1348 	add.w	r3, r3, #3276800	; 0x320000
 8080578:	fb93 f3f1 	sdiv	r3, r3, r1
 808057c:	f994 2011 	ldrsb.w	r2, [r4, #17]
 8080580:	f994 0014 	ldrsb.w	r0, [r4, #20]
 8080584:	f502 7244 	add.w	r2, r2, #784	; 0x310
 8080588:	435a      	muls	r2, r3
 808058a:	f994 3004 	ldrsb.w	r3, [r4, #4]
 808058e:	4358      	muls	r0, r3
 8080590:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080594:	fb90 f3f3 	sdiv	r3, r0, r3
 8080598:	021b      	lsls	r3, r3, #8
 808059a:	eb03 0162 	add.w	r1, r3, r2, asr #1
 808059e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80805a2:	3304      	adds	r3, #4
 80805a4:	fb91 f2f3 	sdiv	r2, r1, r3
 80805a8:	f994 1035 	ldrsb.w	r1, [r4, #53]	; 0x35
 80805ac:	2383      	movs	r3, #131	; 0x83
 80805ae:	434b      	muls	r3, r1
 80805b0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80805b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80805b8:	2222      	movs	r2, #34	; 0x22
 80805ba:	3bfa      	subs	r3, #250	; 0xfa
 80805bc:	4353      	muls	r3, r2
 80805be:	2264      	movs	r2, #100	; 0x64
 80805c0:	3332      	adds	r3, #50	; 0x32
 80805c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80805c6:	f88d 300c 	strb.w	r3, [sp, #12]
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 80805ca:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
 80805ce:	f88d 2009 	strb.w	r2, [sp, #9]
static uint8_t calc_heater_dur(uint16_t dur)
{
	uint8_t factor = 0;
	uint8_t durval;

	if (dur >= 0xfc0) {
 80805d2:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
 80805d6:	d20b      	bcs.n	80805f0 <bme680_set_sensor_settings+0xea>
 80805d8:	2200      	movs	r2, #0
		durval = 0xff; /* Max duration*/
	} else {
		while (dur > 0x3F) {
 80805da:	2b3f      	cmp	r3, #63	; 0x3f
 80805dc:	b2d1      	uxtb	r1, r2
 80805de:	f102 0201 	add.w	r2, r2, #1
 80805e2:	d901      	bls.n	80805e8 <bme680_set_sensor_settings+0xe2>
			dur = dur / 4;
 80805e4:	089b      	lsrs	r3, r3, #2
 80805e6:	e7f8      	b.n	80805da <bme680_set_sensor_settings+0xd4>
			factor += 1;
		}
		durval = (uint8_t) (dur + (factor * 64));
 80805e8:	eb03 1381 	add.w	r3, r3, r1, lsl #6
 80805ec:	b2db      	uxtb	r3, r3
 80805ee:	e000      	b.n	80805f2 <bme680_set_sensor_settings+0xec>
{
	uint8_t factor = 0;
	uint8_t durval;

	if (dur >= 0xfc0) {
		durval = 0xff; /* Max duration*/
 80805f0:	23ff      	movs	r3, #255	; 0xff

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 80805f2:	f88d 300d 	strb.w	r3, [sp, #13]
			dev->gas_sett.nb_conv = 0;
 80805f6:	2300      	movs	r3, #0
 80805f8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		} else {
			rslt = BME680_W_DEFINE_PWR_MODE;
		}
		if (rslt == BME680_OK)
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 80805fc:	2202      	movs	r2, #2
 80805fe:	4623      	mov	r3, r4
 8080600:	a903      	add	r1, sp, #12
 8080602:	a802      	add	r0, sp, #8
 8080604:	f7ff fde9 	bl	80801da <bme680_set_regs>
 8080608:	e000      	b.n	808060c <bme680_set_sensor_settings+0x106>
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
 808060a:	2001      	movs	r0, #1
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (desired_settings & BME680_GAS_MEAS_SEL)
			rslt = set_gas_config(dev);

		dev->power_mode = BME680_SLEEP_MODE;
 808060c:	2300      	movs	r3, #0
 808060e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		if (rslt == BME680_OK)
 8080612:	b910      	cbnz	r0, 808061a <bme680_set_sensor_settings+0x114>
			rslt = bme680_set_sensor_mode(dev);
 8080614:	4620      	mov	r0, r4
 8080616:	f7ff ff37 	bl	8080488 <bme680_set_sensor_mode>

		/* Selecting the filter */
		if (desired_settings & BME680_FILTER_SEL) {
 808061a:	f006 0510 	and.w	r5, r6, #16
 808061e:	b2ad      	uxth	r5, r5
 8080620:	b305      	cbz	r5, 8080664 <bme680_set_sensor_settings+0x15e>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
 8080622:	f104 0246 	add.w	r2, r4, #70	; 0x46
 8080626:	2107      	movs	r1, #7
 8080628:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 808062c:	f7ff fda2 	bl	8080174 <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_ODR_FILT_ADDR;

			if (rslt == BME680_OK)
 8080630:	b930      	cbnz	r0, 8080640 <bme680_set_sensor_settings+0x13a>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8080632:	4623      	mov	r3, r4
 8080634:	2201      	movs	r2, #1
 8080636:	f10d 0107 	add.w	r1, sp, #7
 808063a:	2075      	movs	r0, #117	; 0x75
 808063c:	f7ff fda9 	bl	8080192 <bme680_get_regs>

			if (desired_settings & BME680_FILTER_SEL)
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 8080640:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b

			reg_array[count] = reg_addr; /* Append configuration */
			data_array[count] = data;
			count++;
 8080644:	2501      	movs	r5, #1

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);

			if (desired_settings & BME680_FILTER_SEL)
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 8080646:	009b      	lsls	r3, r3, #2
 8080648:	f003 021c 	and.w	r2, r3, #28
 808064c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8080650:	f023 031c 	bic.w	r3, r3, #28
 8080654:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
 8080656:	2275      	movs	r2, #117	; 0x75

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);

			if (desired_settings & BME680_FILTER_SEL)
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 8080658:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 808065c:	f88d 2010 	strb.w	r2, [sp, #16]
			data_array[count] = data;
 8080660:	f88d 3018 	strb.w	r3, [sp, #24]
			count++;
		}

		/* Selecting heater control for the sensor */
		if (desired_settings & BME680_HCNTRL_SEL) {
 8080664:	06b3      	lsls	r3, r6, #26
 8080666:	d522      	bpl.n	80806ae <bme680_set_sensor_settings+0x1a8>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
 8080668:	f104 0246 	add.w	r2, r4, #70	; 0x46
 808066c:	2108      	movs	r1, #8
 808066e:	f104 003d 	add.w	r0, r4, #61	; 0x3d
 8080672:	f7ff fd7f 	bl	8080174 <boundary_check.isra.1.constprop.2>
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;

			if (rslt == BME680_OK)
 8080676:	b930      	cbnz	r0, 8080686 <bme680_set_sensor_settings+0x180>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8080678:	4623      	mov	r3, r4
 808067a:	2201      	movs	r2, #1
 808067c:	f10d 0107 	add.w	r1, sp, #7
 8080680:	2070      	movs	r0, #112	; 0x70
 8080682:	f7ff fd86 	bl	8080192 <bme680_get_regs>
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 8080686:	f89d 3007 	ldrb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 808068a:	2170      	movs	r1, #112	; 0x70
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 808068c:	f023 0208 	bic.w	r2, r3, #8
 8080690:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8080694:	f003 0308 	and.w	r3, r3, #8
 8080698:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
 808069a:	aa08      	add	r2, sp, #32
 808069c:	442a      	add	r2, r5
			data_array[count] = data;
			count++;
 808069e:	3501      	adds	r5, #1
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 80806a0:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 80806a4:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 80806a8:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
 80806ac:	b2ed      	uxtb	r5, r5
		}

		/* Selecting heater T,P oversampling for the sensor */
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
 80806ae:	07b1      	lsls	r1, r6, #30
 80806b0:	d033      	beq.n	808071a <bme680_set_sensor_settings+0x214>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
 80806b2:	f104 0246 	add.w	r2, r4, #70	; 0x46
 80806b6:	2105      	movs	r1, #5
 80806b8:	f104 0039 	add.w	r0, r4, #57	; 0x39
 80806bc:	f7ff fd5a 	bl	8080174 <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_T_P_MODE_ADDR;

			if (rslt == BME680_OK)
 80806c0:	b930      	cbnz	r0, 80806d0 <bme680_set_sensor_settings+0x1ca>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80806c2:	4623      	mov	r3, r4
 80806c4:	2201      	movs	r2, #1
 80806c6:	f10d 0107 	add.w	r1, sp, #7
 80806ca:	2074      	movs	r0, #116	; 0x74
 80806cc:	f7ff fd61 	bl	8080192 <bme680_get_regs>

			if (desired_settings & BME680_OST_SEL)
 80806d0:	07f2      	lsls	r2, r6, #31
 80806d2:	d509      	bpl.n	80806e8 <bme680_set_sensor_settings+0x1e2>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
 80806d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80806d8:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80806dc:	f003 031f 	and.w	r3, r3, #31
 80806e0:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80806e4:	f88d 3007 	strb.w	r3, [sp, #7]

			if (desired_settings & BME680_OSP_SEL)
 80806e8:	07b3      	lsls	r3, r6, #30
 80806ea:	d50b      	bpl.n	8080704 <bme680_set_sensor_settings+0x1fe>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
 80806ec:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 80806f0:	009b      	lsls	r3, r3, #2
 80806f2:	f003 021c 	and.w	r2, r3, #28
 80806f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80806fa:	f023 031c 	bic.w	r3, r3, #28
 80806fe:	4313      	orrs	r3, r2
 8080700:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr;
 8080704:	ab08      	add	r3, sp, #32
 8080706:	442b      	add	r3, r5
 8080708:	2274      	movs	r2, #116	; 0x74
 808070a:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 808070e:	f89d 2007 	ldrb.w	r2, [sp, #7]
			count++;
 8080712:	3501      	adds	r5, #1

			if (desired_settings & BME680_OSP_SEL)
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);

			reg_array[count] = reg_addr;
			data_array[count] = data;
 8080714:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
 8080718:	b2ed      	uxtb	r5, r5
		}

		/* Selecting humidity oversampling for the sensor */
		if (desired_settings & BME680_OSH_SEL) {
 808071a:	0771      	lsls	r1, r6, #29
 808071c:	d522      	bpl.n	8080764 <bme680_set_sensor_settings+0x25e>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
 808071e:	f104 0246 	add.w	r2, r4, #70	; 0x46
 8080722:	2105      	movs	r1, #5
 8080724:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8080728:	f7ff fd24 	bl	8080174 <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_OS_H_ADDR;

			if (rslt == BME680_OK)
 808072c:	b930      	cbnz	r0, 808073c <bme680_set_sensor_settings+0x236>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 808072e:	4623      	mov	r3, r4
 8080730:	2201      	movs	r2, #1
 8080732:	f10d 0107 	add.w	r1, sp, #7
 8080736:	2072      	movs	r0, #114	; 0x72
 8080738:	f7ff fd2b 	bl	8080192 <bme680_get_regs>
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 808073c:	f89d 3007 	ldrb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 8080740:	2172      	movs	r1, #114	; 0x72
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
			reg_addr = BME680_CONF_OS_H_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8080742:	f023 0207 	bic.w	r2, r3, #7
 8080746:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 808074a:	f003 0307 	and.w	r3, r3, #7
 808074e:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
 8080750:	aa08      	add	r2, sp, #32
 8080752:	442a      	add	r2, r5
			data_array[count] = data;
			count++;
 8080754:	3501      	adds	r5, #1
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
			reg_addr = BME680_CONF_OS_H_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8080756:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 808075a:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 808075e:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
 8080762:	b2ed      	uxtb	r5, r5
		}

		/* Selecting the runGas and NB conversion settings for the sensor */
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
 8080764:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8080768:	d03c      	beq.n	80807e4 <bme680_set_sensor_settings+0x2de>
 808076a:	f104 0846 	add.w	r8, r4, #70	; 0x46
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
 808076e:	4642      	mov	r2, r8
 8080770:	2101      	movs	r1, #1
 8080772:	f104 003e 	add.w	r0, r4, #62	; 0x3e
 8080776:	f7ff fcfd 	bl	8080174 <boundary_check.isra.1.constprop.2>
				BME680_RUN_GAS_ENABLE, dev);
			if (rslt == BME680_OK) {
 808077a:	b968      	cbnz	r0, 8080798 <bme680_set_sensor_settings+0x292>
				/* Validate boundary conditions */
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
 808077c:	4642      	mov	r2, r8
 808077e:	210a      	movs	r1, #10
 8080780:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8080784:	f7ff fcf6 	bl	8080174 <boundary_check.isra.1.constprop.2>
					BME680_NBCONV_MAX, dev);
			}

			reg_addr = BME680_CONF_ODR_RUN_GAS_NBC_ADDR;

			if (rslt == BME680_OK)
 8080788:	b930      	cbnz	r0, 8080798 <bme680_set_sensor_settings+0x292>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 808078a:	4623      	mov	r3, r4
 808078c:	2201      	movs	r2, #1
 808078e:	f10d 0107 	add.w	r1, sp, #7
 8080792:	2071      	movs	r0, #113	; 0x71
 8080794:	f7ff fcfd 	bl	8080192 <bme680_get_regs>

			if (desired_settings & BME680_RUN_GAS_SEL)
 8080798:	0672      	lsls	r2, r6, #25
 808079a:	d50b      	bpl.n	80807b4 <bme680_set_sensor_settings+0x2ae>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
 808079c:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80807a0:	011b      	lsls	r3, r3, #4
 80807a2:	f003 0210 	and.w	r2, r3, #16
 80807a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80807aa:	f023 0310 	bic.w	r3, r3, #16
 80807ae:	4313      	orrs	r3, r2
 80807b0:	f88d 3007 	strb.w	r3, [sp, #7]

			if (desired_settings & BME680_NBCONV_SEL)
 80807b4:	0633      	lsls	r3, r6, #24
 80807b6:	d50a      	bpl.n	80807ce <bme680_set_sensor_settings+0x2c8>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
 80807b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80807bc:	f023 020f 	bic.w	r2, r3, #15
 80807c0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80807c4:	f003 030f 	and.w	r3, r3, #15
 80807c8:	4313      	orrs	r3, r2
 80807ca:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 80807ce:	ab08      	add	r3, sp, #32
 80807d0:	442b      	add	r3, r5
 80807d2:	2271      	movs	r2, #113	; 0x71
 80807d4:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 80807d8:	f89d 2007 	ldrb.w	r2, [sp, #7]
			count++;
 80807dc:	3501      	adds	r5, #1

			if (desired_settings & BME680_NBCONV_SEL)
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);

			reg_array[count] = reg_addr; /* Append configuration */
			data_array[count] = data;
 80807de:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
 80807e2:	b2ed      	uxtb	r5, r5
		}

		if (rslt == BME680_OK)
 80807e4:	b928      	cbnz	r0, 80807f2 <bme680_set_sensor_settings+0x2ec>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
 80807e6:	4623      	mov	r3, r4
 80807e8:	462a      	mov	r2, r5
 80807ea:	a906      	add	r1, sp, #24
 80807ec:	a804      	add	r0, sp, #16
 80807ee:	f7ff fcf4 	bl	80801da <bme680_set_regs>

		/* Restore previous intended power mode */
		dev->power_mode = intended_power_mode;
 80807f2:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
	}

	return rslt;
}
 80807f6:	b008      	add	sp, #32
 80807f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080807fc <bme680_get_profile_dur>:

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
 80807fc:	b513      	push	{r0, r1, r4, lr}
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80807fe:	4b18      	ldr	r3, [pc, #96]	; (8080860 <bme680_get_profile_dur+0x64>)

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
 8080800:	4604      	mov	r4, r0
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 8080802:	6818      	ldr	r0, [r3, #0]
 8080804:	889b      	ldrh	r3, [r3, #4]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 8080806:	aa02      	add	r2, sp, #8
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 8080808:	f8ad 3004 	strh.w	r3, [sp, #4]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 808080c:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 8080810:	9000      	str	r0, [sp, #0]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 8080812:	4413      	add	r3, r2
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 8080814:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8080818:	a802      	add	r0, sp, #8
 808081a:	4402      	add	r2, r0
 808081c:	f812 2c08 	ldrb.w	r2, [r2, #-8]
{
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 8080820:	f813 3c08 	ldrb.w	r3, [r3, #-8]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 8080824:	4413      	add	r3, r2
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 8080826:	f891 2038 	ldrb.w	r2, [r1, #56]	; 0x38
 808082a:	4402      	add	r2, r0

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
 808082c:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8080830:	4413      	add	r3, r2
 8080832:	f240 72ab 	movw	r2, #1963	; 0x7ab
 8080836:	4353      	muls	r3, r2
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 8080838:	f503 5395 	add.w	r3, r3, #4768	; 0x12a0
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 808083c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 8080840:	3319      	adds	r3, #25
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 8080842:	fbb3 f3f2 	udiv	r3, r3, r2

	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */

	*duration = (uint16_t) tph_dur;
 8080846:	3301      	adds	r3, #1
 8080848:	b29b      	uxth	r3, r3
 808084a:	8023      	strh	r3, [r4, #0]

	/* Get the gas duration only when the run gas is enabled */
	if (dev->gas_sett.run_gas) {
 808084c:	f891 203e 	ldrb.w	r2, [r1, #62]	; 0x3e
 8080850:	b11a      	cbz	r2, 808085a <bme680_get_profile_dur+0x5e>
		/* The remaining time should be used for heating */
		*duration += dev->gas_sett.heatr_dur;
 8080852:	f8b1 2042 	ldrh.w	r2, [r1, #66]	; 0x42
 8080856:	4413      	add	r3, r2
 8080858:	8023      	strh	r3, [r4, #0]
	}
}
 808085a:	b002      	add	sp, #8
 808085c:	bd10      	pop	{r4, pc}
 808085e:	bf00      	nop
 8080860:	08091634 	.word	0x08091634

08080864 <bme680_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 8080864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080868:	4680      	mov	r8, r0
 808086a:	b089      	sub	sp, #36	; 0x24
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 808086c:	4608      	mov	r0, r1
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 808086e:	460c      	mov	r4, r1
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080870:	f7ff fc21 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080874:	4605      	mov	r5, r0
 8080876:	2800      	cmp	r0, #0
 8080878:	f040 8167 	bne.w	8080b4a <bme680_get_sensor_data+0x2e6>
 * @brief This internal API is used to calculate the field data of sensor.
 */
static int8_t read_field_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
	int8_t rslt;
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 808087c:	af04      	add	r7, sp, #16
 808087e:	4601      	mov	r1, r0
 8080880:	220f      	movs	r2, #15
 8080882:	4638      	mov	r0, r7
 8080884:	f00d ff46 	bl	808e714 <memset>
	uint16_t adc_hum;
	uint16_t adc_gas_res;
	uint8_t tries = 10;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080888:	4620      	mov	r0, r4
 808088a:	f7ff fc14 	bl	80800b6 <null_ptr_check>
 808088e:	4605      	mov	r5, r0
 8080890:	260a      	movs	r6, #10
	do {
		if (rslt == BME680_OK) {
 8080892:	2d00      	cmp	r5, #0
 8080894:	f040 8153 	bne.w	8080b3e <bme680_get_sensor_data+0x2da>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 8080898:	4623      	mov	r3, r4
 808089a:	220f      	movs	r2, #15
 808089c:	4639      	mov	r1, r7
 808089e:	201d      	movs	r0, #29
 80808a0:	f7ff fc77 	bl	8080192 <bme680_get_regs>
 80808a4:	4605      	mov	r5, r0
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
 80808a6:	f89d 0010 	ldrb.w	r0, [sp, #16]
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80808aa:	f89d e01e 	ldrb.w	lr, [sp, #30]
		if (rslt == BME680_OK) {
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 80808ae:	f000 030f 	and.w	r3, r0, #15
 80808b2:	f888 3001 	strb.w	r3, [r8, #1]
			data->meas_index = buff[1];
 80808b6:	f89d 3011 	ldrb.w	r3, [sp, #17]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80808ba:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
			data->meas_index = buff[1];
 80808be:	f888 3002 	strb.w	r3, [r8, #2]

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 80808c2:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80808c6:	f89d 9013 	ldrb.w	r9, [sp, #19]
 80808ca:	9300      	str	r3, [sp, #0]
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 80808cc:	f89d 3018 	ldrb.w	r3, [sp, #24]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
			data->meas_index = buff[1];

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
 80808d0:	f89d c014 	ldrb.w	ip, [sp, #20]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 80808d4:	9301      	str	r3, [sp, #4]
 80808d6:	f89d 3019 	ldrb.w	r3, [sp, #25]
			data->meas_index = buff[1];

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80808da:	f89d b015 	ldrb.w	fp, [sp, #21]
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 80808de:	9302      	str	r3, [sp, #8]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80808e0:	f89d 301d 	ldrb.w	r3, [sp, #29]
			data->meas_index = buff[1];

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80808e4:	f89d 1016 	ldrb.w	r1, [sp, #22]
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80808e8:	9303      	str	r3, [sp, #12]
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 80808ea:	fa4f f38e 	sxtb.w	r3, lr
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80808ee:	f003 0a20 	and.w	sl, r3, #32
 80808f2:	ea40 000a 	orr.w	r0, r0, sl
 80808f6:	f003 0310 	and.w	r3, r3, #16
 80808fa:	4318      	orrs	r0, r3
 80808fc:	b240      	sxtb	r0, r0

			if (data->status & BME680_NEW_DATA_MSK) {
 80808fe:	2800      	cmp	r0, #0

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
 8080900:	f89d 2017 	ldrb.w	r2, [sp, #23]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 8080904:	f888 0000 	strb.w	r0, [r8]

			if (data->status & BME680_NEW_DATA_MSK) {
 8080908:	f280 8116 	bge.w	8080b38 <bme680_get_sensor_data+0x2d4>
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 808090c:	0912      	lsrs	r2, r2, #4
 808090e:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
 8080912:	ea41 3b0b 	orr.w	fp, r1, fp, lsl #12
 8080916:	8ae1      	ldrh	r1, [r4, #22]
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 8080918:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 808091c:	0049      	lsls	r1, r1, #1
 808091e:	ebc1 01db 	rsb	r1, r1, fp, lsr #3
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 8080922:	460a      	mov	r2, r1
 8080924:	17cb      	asrs	r3, r1, #31
 8080926:	105b      	asrs	r3, r3, #1
 8080928:	ea4f 0232 	mov.w	r2, r2, rrx
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 808092c:	fb02 f603 	mul.w	r6, r2, r3
 8080930:	fba2 2302 	umull	r2, r3, r2, r2
 8080934:	ea4f 3a12 	mov.w	sl, r2, lsr #12
 8080938:	f994 201a 	ldrsb.w	r2, [r4, #26]
 808093c:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8080940:	ea4a 5a03 	orr.w	sl, sl, r3, lsl #20
 8080944:	ea4f 3b23 	mov.w	fp, r3, asr #12
 8080948:	0113      	lsls	r3, r2, #4
 808094a:	17df      	asrs	r7, r3, #31
 808094c:	fb0a f607 	mul.w	r6, sl, r7
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8080950:	fb80 0101 	smull	r0, r1, r0, r1
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080954:	fb03 660b 	mla	r6, r3, fp, r6
 8080958:	fbaa 2303 	umull	r2, r3, sl, r3
	dev->calib.t_fine = (int32_t) (var2 + var3);
 808095c:	0ac0      	lsrs	r0, r0, #11
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 808095e:	4433      	add	r3, r6
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8080960:	0b92      	lsrs	r2, r2, #14
 8080962:	ea40 5041 	orr.w	r0, r0, r1, lsl #21
 8080966:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 808096a:	1883      	adds	r3, r0, r2
 808096c:	6323      	str	r3, [r4, #48]	; 0x30

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
 808096e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8080972:	3380      	adds	r3, #128	; 0x80
 8080974:	121b      	asrs	r3, r3, #8
 8080976:	f8a8 3004 	strh.w	r3, [r8, #4]
	int32_t var2 = 0;
	int32_t var3 = 0;
	int32_t var4 = 0;
	int32_t pressure_comp = 0;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 808097a:	6b23      	ldr	r3, [r4, #48]	; 0x30
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 808097c:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
	int32_t var2 = 0;
	int32_t var3 = 0;
	int32_t var4 = 0;
	int32_t pressure_comp = 0;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8080980:	105b      	asrs	r3, r3, #1
 8080982:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8080986:	109a      	asrs	r2, r3, #2
 8080988:	4352      	muls	r2, r2
 808098a:	12d1      	asrs	r1, r2, #11
 808098c:	4348      	muls	r0, r1
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 808098e:	f9b4 1024 	ldrsh.w	r1, [r4, #36]	; 0x24
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8080992:	1352      	asrs	r2, r2, #13

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 8080994:	4359      	muls	r1, r3
 8080996:	0049      	lsls	r1, r1, #1
 8080998:	eb01 01a0 	add.w	r1, r1, r0, asr #2
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 808099c:	f9b4 001e 	ldrsh.w	r0, [r4, #30]
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
	pressure_comp = 1048576 - pres_adc;
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
	var4 = (1 << 31);
	if (pressure_comp >= var4)
		pressure_comp = ((pressure_comp / (uint32_t)var1) << 1);
 80809a0:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 80809a4:	4343      	muls	r3, r0
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 80809a6:	f994 0020 	ldrsb.w	r0, [r4, #32]
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
	pressure_comp = 1048576 - pres_adc;
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
	var4 = (1 << 31);
	if (pressure_comp >= var4)
		pressure_comp = ((pressure_comp / (uint32_t)var1) << 1);
 80809aa:	ea4c 1909 	orr.w	r9, ip, r9, lsl #4
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 80809ae:	0140      	lsls	r0, r0, #5
 80809b0:	4342      	muls	r2, r0
 80809b2:	10d2      	asrs	r2, r2, #3
 80809b4:	eb02 0363 	add.w	r3, r2, r3, asr #1
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
	var1 = var1 >> 18;
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 80809b8:	149b      	asrs	r3, r3, #18
 80809ba:	8ba2      	ldrh	r2, [r4, #28]
 80809bc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80809c0:	4353      	muls	r3, r2
	pressure_comp = 1048576 - pres_adc;
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
	var4 = (1 << 31);
	if (pressure_comp >= var4)
		pressure_comp = ((pressure_comp / (uint32_t)var1) << 1);
 80809c2:	9a00      	ldr	r2, [sp, #0]
 80809c4:	13db      	asrs	r3, r3, #15
 80809c6:	ea49 3902 	orr.w	r9, r9, r2, lsl #12
 80809ca:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
 80809ce:	f5c9 1980 	rsb	r9, r9, #1048576	; 0x100000
 80809d2:	0412      	lsls	r2, r2, #16
 80809d4:	eb02 01a1 	add.w	r1, r2, r1, asr #2
 80809d8:	f640 4235 	movw	r2, #3125	; 0xc35
 80809dc:	eba9 3121 	sub.w	r1, r9, r1, asr #12
 80809e0:	4351      	muls	r1, r2
 80809e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80809e6:	005b      	lsls	r3, r3, #1
	else
		pressure_comp = ((pressure_comp << 1) / (uint32_t)var1);
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
		(pressure_comp >> 3)) >> 13)) >> 12;
 80809e8:	10d9      	asrs	r1, r3, #3
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 80809ea:	4349      	muls	r1, r1
 80809ec:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
 80809f0:	f9b4 0028 	ldrsh.w	r0, [r4, #40]	; 0x28
 80809f4:	1349      	asrs	r1, r1, #13
 80809f6:	434a      	muls	r2, r1
 80809f8:	1099      	asrs	r1, r3, #2
 80809fa:	4341      	muls	r1, r0
		pressure_comp = ((pressure_comp << 1) / (uint32_t)var1);
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
		(pressure_comp >> 3)) >> 13)) >> 12;
	var2 = ((int32_t)(pressure_comp >> 2) *
		(int32_t)dev->calib.par_p8) >> 13;
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 80809fc:	121e      	asrs	r6, r3, #8
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 80809fe:	1349      	asrs	r1, r1, #13
 8080a00:	eb01 3122 	add.w	r1, r1, r2, asr #12
 8080a04:	fb06 f206 	mul.w	r2, r6, r6
 8080a08:	4356      	muls	r6, r2
 8080a0a:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8080a0e:	4372      	muls	r2, r6
 8080a10:	eb01 4262 	add.w	r2, r1, r2, asr #17
 8080a14:	f994 1027 	ldrsb.w	r1, [r4, #39]	; 0x27
 8080a18:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
 8080a1c:	eb03 1322 	add.w	r3, r3, r2, asr #4
 8080a20:	f8c8 3008 	str.w	r3, [r8, #8]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 8080a24:	6b23      	ldr	r3, [r4, #48]	; 0x30
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
	var2 = ((int32_t) dev->calib.par_h2
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
 8080a26:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 8080a2a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8080a2e:	3380      	adds	r3, #128	; 0x80
 8080a30:	121b      	asrs	r3, r3, #8
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
	var2 = ((int32_t) dev->calib.par_h2
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
 8080a32:	4359      	muls	r1, r3
 8080a34:	2264      	movs	r2, #100	; 0x64
 8080a36:	fb91 f1f2 	sdiv	r1, r1, r2
 8080a3a:	f994 000d 	ldrsb.w	r0, [r4, #13]
 8080a3e:	4359      	muls	r1, r3
 8080a40:	4358      	muls	r0, r3
 8080a42:	1189      	asrs	r1, r1, #6
 8080a44:	fb90 f0f2 	sdiv	r0, r0, r2
 8080a48:	fb91 f1f2 	sdiv	r1, r1, r2
 8080a4c:	8967      	ldrh	r7, [r4, #10]
 8080a4e:	4401      	add	r1, r0
 8080a50:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8080a54:	4379      	muls	r1, r7
 8080a56:	9801      	ldr	r0, [sp, #4]
 8080a58:	128f      	asrs	r7, r1, #10
 8080a5a:	9902      	ldr	r1, [sp, #8]
 8080a5c:	8926      	ldrh	r6, [r4, #8]
 8080a5e:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 8080a62:	f994 100c 	ldrsb.w	r1, [r4, #12]
 8080a66:	eba0 1606 	sub.w	r6, r0, r6, lsl #4
 8080a6a:	4359      	muls	r1, r3
 8080a6c:	fb91 f1f2 	sdiv	r1, r1, r2
 8080a70:	eba6 0061 	sub.w	r0, r6, r1, asr #1
 8080a74:	fb00 f107 	mul.w	r1, r0, r7
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080a78:	f994 0010 	ldrsb.w	r0, [r4, #16]
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
 8080a7c:	f00e 060f 	and.w	r6, lr, #15
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080a80:	4343      	muls	r3, r0
 8080a82:	fb93 f2f2 	sdiv	r2, r3, r2
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080a86:	f240 503c 	movw	r0, #1340	; 0x53c
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080a8a:	7be3      	ldrb	r3, [r4, #15]
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080a8c:	ea4f 1e9e 	mov.w	lr, lr, lsr #6
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080a90:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8080a94:	138b      	asrs	r3, r1, #14
	var6 = (var4 * var5) >> 1;
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8080a96:	435b      	muls	r3, r3
 8080a98:	1112      	asrs	r2, r2, #4
 8080a9a:	129b      	asrs	r3, r3, #10
 8080a9c:	4353      	muls	r3, r2
 8080a9e:	eb01 0363 	add.w	r3, r1, r3, asr #1
 8080aa2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8080aa6:	129b      	asrs	r3, r3, #10
 8080aa8:	4353      	muls	r3, r2
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
 8080aaa:	4a2a      	ldr	r2, [pc, #168]	; (8080b54 <bme680_get_sensor_data+0x2f0>)
	var3 = var1 * var2;
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
	var6 = (var4 * var5) >> 1;
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8080aac:	131b      	asrs	r3, r3, #12
 8080aae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
 8080ab2:	4293      	cmp	r3, r2
 8080ab4:	bfd4      	ite	le
 8080ab6:	f8c8 300c 	strle.w	r3, [r8, #12]
 8080aba:	f8c8 200c 	strgt.w	r2, [r8, #12]
 8080abe:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080ac2:	2205      	movs	r2, #5
 8080ac4:	2100      	movs	r1, #0
 8080ac6:	fbc3 0102 	smlal	r0, r1, r3, r2
		((int64_t) lookupTable1[gas_range])) >> 16;
 8080aca:	4b23      	ldr	r3, [pc, #140]	; (8080b58 <bme680_get_sensor_data+0x2f4>)
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080acc:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 8080ad0:	fba0 2307 	umull	r2, r3, r0, r7
 8080ad4:	fb07 3301 	mla	r3, r7, r1, r3
 8080ad8:	0c10      	lsrs	r0, r2, #16
 8080ada:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8080ade:	1419      	asrs	r1, r3, #16
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080ae0:	9b03      	ldr	r3, [sp, #12]
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 8080ae2:	4f1e      	ldr	r7, [pc, #120]	; (8080b5c <bme680_get_sensor_data+0x2f8>)
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080ae4:	ea4e 0e83 	orr.w	lr, lr, r3, lsl #2
 8080ae8:	ea4f 32ce 	mov.w	r2, lr, lsl #15

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 8080aec:	f857 e026 	ldr.w	lr, [r7, r6, lsl #2]
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080af0:	f112 427f 	adds.w	r2, r2, #4278190080	; 0xff000000

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 8080af4:	fbae 6700 	umull	r6, r7, lr, r0
 8080af8:	fb0e 7701 	mla	r7, lr, r1, r7
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080afc:	f04f 0300 	mov.w	r3, #0
 8080b00:	f143 33ff 	adc.w	r3, r3, #4294967295
 8080b04:	1812      	adds	r2, r2, r0
 8080b06:	414b      	adcs	r3, r1

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 8080b08:	0a70      	lsrs	r0, r6, #9
 8080b0a:	ea40 50c7 	orr.w	r0, r0, r7, lsl #23
 8080b0e:	1279      	asrs	r1, r7, #9
 8080b10:	105f      	asrs	r7, r3, #1
 8080b12:	ea4f 0632 	mov.w	r6, r2, rrx
 8080b16:	1980      	adds	r0, r0, r6
 8080b18:	4179      	adcs	r1, r7
 8080b1a:	f00d fa77 	bl	808e00c <__aeabi_ldivmod>
 8080b1e:	f8c8 0010 	str.w	r0, [r8, #16]
	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		/* Reading the sensor data in forced mode only */
		rslt = read_field_data(data, dev);
		if (rslt == BME680_OK) {
 8080b22:	b995      	cbnz	r5, 8080b4a <bme680_get_sensor_data+0x2e6>
			if (data->status & BME680_NEW_DATA_MSK)
 8080b24:	f998 3000 	ldrsb.w	r3, [r8]
 8080b28:	2b00      	cmp	r3, #0
				dev->new_fields = 1;
 8080b2a:	bfba      	itte	lt
 8080b2c:	2301      	movlt	r3, #1
 8080b2e:	f884 3045 	strblt.w	r3, [r4, #69]	; 0x45
			else
				dev->new_fields = 0;
 8080b32:	f884 5045 	strbge.w	r5, [r4, #69]	; 0x45
 8080b36:	e008      	b.n	8080b4a <bme680_get_sensor_data+0x2e6>
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
				break;
			}
			/* Delay to poll the data */
			dev->delay_ms(BME680_POLL_PERIOD_MS);
 8080b38:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8080b3a:	200a      	movs	r0, #10
 8080b3c:	4798      	blx	r3
 8080b3e:	3e01      	subs	r6, #1
		}
		tries--;
	} while (tries);
 8080b40:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8080b44:	f47f aea5 	bne.w	8080892 <bme680_get_sensor_data+0x2e>

	if (!tries)
		rslt = BME680_W_NO_NEW_DATA;
 8080b48:	2502      	movs	r5, #2
				dev->new_fields = 0;
		}
	}

	return rslt;
}
 8080b4a:	4628      	mov	r0, r5
 8080b4c:	b009      	add	sp, #36	; 0x24
 8080b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8080b52:	bf00      	nop
 8080b54:	000186a0 	.word	0x000186a0
 8080b58:	20000000 	.word	0x20000000
 8080b5c:	20000040 	.word	0x20000040

08080b60 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 8080b60:	4770      	bx	lr

08080b62 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
 8080b62:	7c03      	ldrb	r3, [r0, #16]
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
 8080b64:	4602      	mov	r2, r0
 8080b66:	f003 0308 	and.w	r3, r3, #8
 8080b6a:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8080b6e:	b12b      	cbz	r3, 8080b7c <_ZN4File9availableEv+0x1a>
 8080b70:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8080b72:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
 8080b74:	1a18      	subs	r0, r3, r0
 8080b76:	bf48      	it	mi
 8080b78:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
 8080b7c:	4770      	bx	lr

08080b7e <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 8080b7e:	4770      	bx	lr

08080b80 <_ZN4FileD1Ev>:
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
#if ARDUINO_FILE_USES_STREAM
class File : public FatFile, public Stream {
 8080b80:	4770      	bx	lr

08080b82 <_ZN6SdFileD0Ev>:
 8080b82:	b510      	push	{r4, lr}
 8080b84:	4604      	mov	r4, r0
 8080b86:	212c      	movs	r1, #44	; 0x2c
 8080b88:	f00c f8f9 	bl	808cd7e <_ZdlPvj>
 8080b8c:	4620      	mov	r0, r4
 8080b8e:	bd10      	pop	{r4, pc}

08080b90 <_ZN4FileD0Ev>:
 8080b90:	b510      	push	{r4, lr}
 8080b92:	4604      	mov	r4, r0
 8080b94:	2134      	movs	r1, #52	; 0x34
 8080b96:	f00c f8f2 	bl	808cd7e <_ZdlPvj>
 8080b9a:	4620      	mov	r0, r4
 8080b9c:	bd10      	pop	{r4, pc}

08080b9e <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
 8080b9e:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 8080ba0:	2201      	movs	r2, #1
 8080ba2:	f10d 0107 	add.w	r1, sp, #7
 8080ba6:	3010      	adds	r0, #16
 8080ba8:	f007 fbab 	bl	8088302 <_ZN7FatFile4readEPvj>
 8080bac:	2801      	cmp	r0, #1
 8080bae:	bf0c      	ite	eq
 8080bb0:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
 8080bb4:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
 8080bb8:	b003      	add	sp, #12
 8080bba:	f85d fb04 	ldr.w	pc, [sp], #4

08080bbe <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
 8080bbe:	3010      	adds	r0, #16
 8080bc0:	f007 bd24 	b.w	808860c <_ZN7FatFile4syncEv>

08080bc4 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
 8080bc4:	3010      	adds	r0, #16
 8080bc6:	f007 bc50 	b.w	808846a <_ZN7FatFile4peekEv>

08080bca <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
 8080bca:	3010      	adds	r0, #16
 8080bcc:	f007 bdaa 	b.w	8088724 <_ZN7FatFile5writeEPKvj>

08080bd0 <_ZN9PrintFile5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
 8080bd0:	3008      	adds	r0, #8
 8080bd2:	f007 bda7 	b.w	8088724 <_ZN7FatFile5writeEPKvj>

08080bd6 <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
 8080bd6:	b507      	push	{r0, r1, r2, lr}
 8080bd8:	ab02      	add	r3, sp, #8
 8080bda:	f803 1d01 	strb.w	r1, [r3, #-1]!
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
 8080bde:	2201      	movs	r2, #1
 8080be0:	4619      	mov	r1, r3
 8080be2:	3010      	adds	r0, #16
 8080be4:	f007 fd9e 	bl	8088724 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
 8080be8:	b003      	add	sp, #12
 8080bea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08080bf0 <_Z16locationCallbackfff>:
    Log.info("System version: %s", (const char*)System.version());
    

}

void locationCallback(float lat, float lon, float accuracy) {
 8080bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080bf4:	b087      	sub	sp, #28
 8080bf6:	4692      	mov	sl, r2
 8080bf8:	460c      	mov	r4, r1
 8080bfa:	4605      	mov	r5, r0
  // Handle the returned location data for the device. This method is passed three arguments:
  // - Latitude
  // - Longitude
  // - Accuracy of estimated location (in meters)
  Serial.println("google geolocation:");
 8080bfc:	f00b fc94 	bl	808c528 <_Z16_fetch_usbserialv>
 8080c00:	492e      	ldr	r1, [pc, #184]	; (8080cbc <_Z16locationCallbackfff+0xcc>)
 8080c02:	f00a fbea 	bl	808b3da <_ZN5Print7printlnEPKc>
  Serial.printlnf("Latitude:%f, longitude:%f, acc:%f", lat, lon, accuracy);
 8080c06:	f00b fc8f 	bl	808c528 <_Z16_fetch_usbserialv>
 8080c0a:	4683      	mov	fp, r0
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
 8080c0c:	4628      	mov	r0, r5
 8080c0e:	f00c fb67 	bl	808d2e0 <__aeabi_f2d>
 8080c12:	4680      	mov	r8, r0
 8080c14:	4620      	mov	r0, r4
 8080c16:	4689      	mov	r9, r1
 8080c18:	f00c fb62 	bl	808d2e0 <__aeabi_f2d>
 8080c1c:	4606      	mov	r6, r0
 8080c1e:	4650      	mov	r0, sl
 8080c20:	460f      	mov	r7, r1
 8080c22:	f00c fb5d 	bl	808d2e0 <__aeabi_f2d>
 8080c26:	4604      	mov	r4, r0
 8080c28:	460d      	mov	r5, r1
 8080c2a:	4a25      	ldr	r2, [pc, #148]	; (8080cc0 <_Z16locationCallbackfff+0xd0>)
 8080c2c:	2101      	movs	r1, #1
 8080c2e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8080c32:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8080c36:	e9cd 8900 	strd	r8, r9, [sp]
 8080c3a:	4658      	mov	r0, fp
 8080c3c:	f00a fd02 	bl	808b644 <_ZN5Print11printf_implEbPKcz>
  snprintf(geolocation_latitude, sizeof(geolocation_latitude), "%.6f", lat);
 8080c40:	4a20      	ldr	r2, [pc, #128]	; (8080cc4 <_Z16locationCallbackfff+0xd4>)
 8080c42:	210c      	movs	r1, #12
 8080c44:	e9cd 8900 	strd	r8, r9, [sp]
 8080c48:	481f      	ldr	r0, [pc, #124]	; (8080cc8 <_Z16locationCallbackfff+0xd8>)
 8080c4a:	f009 fe35 	bl	808a8b8 <snprintf>
  snprintf(geolocation_longitude, sizeof(geolocation_longitude), "%.6f", lon);
 8080c4e:	4a1d      	ldr	r2, [pc, #116]	; (8080cc4 <_Z16locationCallbackfff+0xd4>)
 8080c50:	210d      	movs	r1, #13
 8080c52:	e9cd 6700 	strd	r6, r7, [sp]
 8080c56:	481d      	ldr	r0, [pc, #116]	; (8080ccc <_Z16locationCallbackfff+0xdc>)
 8080c58:	f009 fe2e 	bl	808a8b8 <snprintf>
  snprintf(geolocation_accuracy, sizeof(geolocation_accuracy), "%3.2f", accuracy);
 8080c5c:	4a1c      	ldr	r2, [pc, #112]	; (8080cd0 <_Z16locationCallbackfff+0xe0>)
 8080c5e:	2106      	movs	r1, #6
 8080c60:	e9cd 4500 	strd	r4, r5, [sp]
 8080c64:	481b      	ldr	r0, [pc, #108]	; (8080cd4 <_Z16locationCallbackfff+0xe4>)
 8080c66:	f009 fe27 	bl	808a8b8 <snprintf>
  if(gps.get_latitude() == 0){
 8080c6a:	481b      	ldr	r0, [pc, #108]	; (8080cd8 <_Z16locationCallbackfff+0xe8>)
 8080c6c:	f006 fac2 	bl	80871f4 <_ZN3GPS12get_latitudeEv>
 8080c70:	2200      	movs	r2, #0
 8080c72:	2300      	movs	r3, #0
 8080c74:	f00c fdf0 	bl	808d858 <__aeabi_dcmpeq>
 8080c78:	b1e8      	cbz	r0, 8080cb6 <_Z16locationCallbackfff+0xc6>
      status_word.status_int |= 0x0008;
 8080c7a:	4d18      	ldr	r5, [pc, #96]	; (8080cdc <_Z16locationCallbackfff+0xec>)
      status_word.status_int &= 0xFFF3;
      if(accuracy < 2){
 8080c7c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8080c80:	882c      	ldrh	r4, [r5, #0]
 8080c82:	4650      	mov	r0, sl
 8080c84:	f024 040c 	bic.w	r4, r4, #12
 8080c88:	b2a4      	uxth	r4, r4
 8080c8a:	f00d f971 	bl	808df70 <__aeabi_fcmplt>
 8080c8e:	b110      	cbz	r0, 8080c96 <_Z16locationCallbackfff+0xa6>
          status_word.status_int |= 0x000C;
 8080c90:	f044 040c 	orr.w	r4, r4, #12
 8080c94:	e00e      	b.n	8080cb4 <_Z16locationCallbackfff+0xc4>
      }else if(accuracy < 5){
 8080c96:	4912      	ldr	r1, [pc, #72]	; (8080ce0 <_Z16locationCallbackfff+0xf0>)
 8080c98:	4650      	mov	r0, sl
 8080c9a:	f00d f969 	bl	808df70 <__aeabi_fcmplt>
 8080c9e:	b110      	cbz	r0, 8080ca6 <_Z16locationCallbackfff+0xb6>
          status_word.status_int |= 0x0008;
 8080ca0:	f044 0408 	orr.w	r4, r4, #8
 8080ca4:	e006      	b.n	8080cb4 <_Z16locationCallbackfff+0xc4>
      }else if(accuracy < 20){
 8080ca6:	490f      	ldr	r1, [pc, #60]	; (8080ce4 <_Z16locationCallbackfff+0xf4>)
 8080ca8:	4650      	mov	r0, sl
 8080caa:	f00d f961 	bl	808df70 <__aeabi_fcmplt>
 8080cae:	b108      	cbz	r0, 8080cb4 <_Z16locationCallbackfff+0xc4>
          status_word.status_int |= 0x0004;
 8080cb0:	f044 0404 	orr.w	r4, r4, #4
 8080cb4:	802c      	strh	r4, [r5, #0]
      }
  }
}
 8080cb6:	b007      	add	sp, #28
 8080cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8080cbc:	080916b6 	.word	0x080916b6
 8080cc0:	080916ca 	.word	0x080916ca
 8080cc4:	080916ec 	.word	0x080916ec
 8080cc8:	200000b4 	.word	0x200000b4
 8080ccc:	200000c0 	.word	0x200000c0
 8080cd0:	080916f1 	.word	0x080916f1
 8080cd4:	20000080 	.word	0x20000080
 8080cd8:	200008f8 	.word	0x200008f8
 8080cdc:	20000b88 	.word	0x20000b88
 8080ce0:	40a00000 	.word	0x40a00000
 8080ce4:	41a00000 	.word	0x41a00000

08080ce8 <_ZN9SdFatBase11writeBlocksEmPKhj>:
  }
  bool readBlocks(uint32_t block, uint8_t* dst, size_t n) {
    return m_sdCard.readBlocks(block, dst, n);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t n) {
    return m_sdCard.writeBlocks(block, src, n);
 8080ce8:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080cec:	f007 b9d1 	b.w	8088092 <_ZN9SdSpiCard11writeBlocksEmPKhj>

08080cf0 <_ZN9SdFatBase10readBlocksEmPhj>:
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_sdCard.writeBlock(block, src);
  }
  bool readBlocks(uint32_t block, uint8_t* dst, size_t n) {
    return m_sdCard.readBlocks(block, dst, n);
 8080cf0:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080cf4:	f007 b905 	b.w	8087f02 <_ZN9SdSpiCard10readBlocksEmPhj>

08080cf8 <_ZN9SdFatBase10writeBlockEmPKh>:

  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_sdCard.readBlock(block, dst);
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_sdCard.writeBlock(block, src);
 8080cf8:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080cfc:	f007 b944 	b.w	8087f88 <_ZN9SdSpiCard10writeBlockEmPKh>

08080d00 <_ZN9SdFatBase9readBlockEmPh>:
#endif  // defined(ARDUINO) || defined(DOXYGEN)

 private:

  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_sdCard.readBlock(block, dst);
 8080d00:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080d04:	f007 b8b5 	b.w	8087e72 <_ZN9SdSpiCard9readBlockEmPh>

08080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>:
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
 8080d08:	b510      	push	{r4, lr}
 8080d0a:	460c      	mov	r4, r1
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 8080d0c:	2204      	movs	r2, #4
 8080d0e:	f009 fb8f 	bl	808a430 <HAL_EEPROM_Put>
        return t;
    }
 8080d12:	4620      	mov	r0, r4
 8080d14:	bd10      	pop	{r4, pc}

08080d16 <_Z20remoteReadStoredVars6String>:
        return -1;
    }

}

int remoteReadStoredVars(String mem_address){
 8080d16:	b513      	push	{r0, r1, r4, lr}
    uint16_t tempValue = 0;
 8080d18:	2300      	movs	r3, #0
 8080d1a:	f8ad 3006 	strh.w	r3, [sp, #6]
    int numerical_mem_address = mem_address.toInt();
 8080d1e:	f00a fafb 	bl	808b318 <_ZNK6String5toIntEv>
    if(numerical_mem_address >= 0 && numerical_mem_address <= MAX_MEM_ADDRESS){
 8080d22:	2890      	cmp	r0, #144	; 0x90

}

int remoteReadStoredVars(String mem_address){
    uint16_t tempValue = 0;
    int numerical_mem_address = mem_address.toInt();
 8080d24:	4604      	mov	r4, r0
    if(numerical_mem_address >= 0 && numerical_mem_address <= MAX_MEM_ADDRESS){
 8080d26:	d80a      	bhi.n	8080d3e <_Z20remoteReadStoredVars6String+0x28>
        EEPROM.get(numerical_mem_address, tempValue);
 8080d28:	f00b ffb8 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 8080d2c:	4620      	mov	r0, r4
 8080d2e:	2202      	movs	r2, #2
 8080d30:	f10d 0106 	add.w	r1, sp, #6
 8080d34:	f009 fb74 	bl	808a420 <HAL_EEPROM_Get>
        return tempValue;
 8080d38:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8080d3c:	e001      	b.n	8080d42 <_Z20remoteReadStoredVars6String+0x2c>
    }else{
        return -1;
 8080d3e:	f04f 30ff 	mov.w	r0, #4294967295
    }
}
 8080d42:	b002      	add	sp, #8
 8080d44:	bd10      	pop	{r4, pc}

08080d46 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>:
    EEPtr begin()                        { return 0x00; }
    EEPtr end()                          { return length(); } //Standards requires this to be the item after the last valid entry. The returned pointer is invalid.
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
 8080d46:	b510      	push	{r4, lr}
 8080d48:	460c      	mov	r4, r1
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 8080d4a:	2204      	movs	r2, #4
 8080d4c:	f009 fb68 	bl	808a420 <HAL_EEPROM_Get>
        return t;
    }
 8080d50:	4620      	mov	r0, r4
 8080d52:	bd10      	pop	{r4, pc}

08080d54 <_ZN9PrintFile5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
 8080d54:	b507      	push	{r0, r1, r2, lr}
 8080d56:	ab02      	add	r3, sp, #8
 8080d58:	f803 1d01 	strb.w	r1, [r3, #-1]!
 8080d5c:	2201      	movs	r2, #1
 8080d5e:	4619      	mov	r1, r3
 8080d60:	3008      	adds	r0, #8
 8080d62:	f007 fcdf 	bl	8088724 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
 8080d66:	b003      	add	sp, #12
 8080d68:	f85d fb04 	ldr.w	pc, [sp], #4

08080d6c <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 8080d6c:	2300      	movs	r3, #0
 8080d6e:	461a      	mov	r2, r3
 8080d70:	4619      	mov	r1, r3
 8080d72:	6840      	ldr	r0, [r0, #4]
 8080d74:	f009 bcf8 	b.w	808a768 <network_off>

08080d78 <_ZN11USARTSerialD0Ev>:
 8080d78:	b510      	push	{r4, lr}
 8080d7a:	4604      	mov	r4, r0
 8080d7c:	2114      	movs	r1, #20
 8080d7e:	f00b fffe 	bl	808cd7e <_ZdlPvj>
 8080d82:	4620      	mov	r0, r4
 8080d84:	bd10      	pop	{r4, pc}

08080d86 <_ZN5spark10JSONWriter4nameEPKc>:
// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
}

inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
 8080d86:	b538      	push	{r3, r4, r5, lr}
 8080d88:	4605      	mov	r5, r0
    return this->name(name, strlen(name));
 8080d8a:	4608      	mov	r0, r1
// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
}

inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
 8080d8c:	460c      	mov	r4, r1
    return this->name(name, strlen(name));
 8080d8e:	f00e fa41 	bl	808f214 <strlen>
 8080d92:	4621      	mov	r1, r4
 8080d94:	4602      	mov	r2, r0
 8080d96:	4628      	mov	r0, r5
}
 8080d98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
}

inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
    return this->name(name, strlen(name));
 8080d9c:	f00b beba 	b.w	808cb14 <_ZN5spark10JSONWriter4nameEPKcj>

08080da0 <_ZN5spark10JSONWriter5valueERK6String>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
}

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
 8080da0:	688a      	ldr	r2, [r1, #8]
 8080da2:	6809      	ldr	r1, [r1, #0]
 8080da4:	f00b bec5 	b.w	808cb32 <_ZN5spark10JSONWriter5valueEPKcj>

08080da8 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 8080da8:	b40e      	push	{r1, r2, r3}
 8080daa:	b500      	push	{lr}
 8080dac:	b08c      	sub	sp, #48	; 0x30
 8080dae:	aa0d      	add	r2, sp, #52	; 0x34
 8080db0:	f852 1b04 	ldr.w	r1, [r2], #4
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 8080db4:	2320      	movs	r3, #32
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080db6:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
 8080dba:	9203      	str	r2, [sp, #12]
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 8080dbc:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080dbe:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 8080dc0:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080dc2:	aa04      	add	r2, sp, #16
 8080dc4:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 8080dc6:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080dc8:	f009 fc42 	bl	808a650 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
 8080dcc:	b00c      	add	sp, #48	; 0x30
 8080dce:	f85d eb04 	ldr.w	lr, [sp], #4
 8080dd2:	b003      	add	sp, #12
 8080dd4:	4770      	bx	lr
	...

08080dd8 <_Z22__fetch_global_Serial4v>:
// instantiate Serial4
static Ring_Buffer serial4_rx_buffer;
static Ring_Buffer serial4_tx_buffer;

USARTSerial& __fetch_global_Serial4()
{
 8080dd8:	b510      	push	{r4, lr}
	static USARTSerial serial4(HAL_USART_SERIAL4, &serial4_rx_buffer, &serial4_tx_buffer);
 8080dda:	4c0c      	ldr	r4, [pc, #48]	; (8080e0c <_Z22__fetch_global_Serial4v+0x34>)
 8080ddc:	6823      	ldr	r3, [r4, #0]
 8080dde:	07db      	lsls	r3, r3, #31
 8080de0:	d411      	bmi.n	8080e06 <_Z22__fetch_global_Serial4v+0x2e>
 8080de2:	4620      	mov	r0, r4
 8080de4:	f7ff f95f 	bl	80800a6 <__cxa_guard_acquire>
 8080de8:	b168      	cbz	r0, 8080e06 <_Z22__fetch_global_Serial4v+0x2e>
 8080dea:	4a09      	ldr	r2, [pc, #36]	; (8080e10 <_Z22__fetch_global_Serial4v+0x38>)
 8080dec:	2103      	movs	r1, #3
 8080dee:	4b09      	ldr	r3, [pc, #36]	; (8080e14 <_Z22__fetch_global_Serial4v+0x3c>)
 8080df0:	4809      	ldr	r0, [pc, #36]	; (8080e18 <_Z22__fetch_global_Serial4v+0x40>)
 8080df2:	f00b fc9d 	bl	808c730 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8080df6:	4620      	mov	r0, r4
 8080df8:	f7ff f95a 	bl	80800b0 <__cxa_guard_release>
 8080dfc:	4a07      	ldr	r2, [pc, #28]	; (8080e1c <_Z22__fetch_global_Serial4v+0x44>)
 8080dfe:	4908      	ldr	r1, [pc, #32]	; (8080e20 <_Z22__fetch_global_Serial4v+0x48>)
 8080e00:	4805      	ldr	r0, [pc, #20]	; (8080e18 <_Z22__fetch_global_Serial4v+0x40>)
 8080e02:	f00b ffb7 	bl	808cd74 <__aeabi_atexit>
	return serial4;
}
 8080e06:	4804      	ldr	r0, [pc, #16]	; (8080e18 <_Z22__fetch_global_Serial4v+0x40>)
 8080e08:	bd10      	pop	{r4, pc}
 8080e0a:	bf00      	nop
 8080e0c:	200009c0 	.word	0x200009c0
 8080e10:	20000934 	.word	0x20000934
 8080e14:	200009c8 	.word	0x200009c8
 8080e18:	20000834 	.word	0x20000834
 8080e1c:	200001d0 	.word	0x200001d0
 8080e20:	08080b61 	.word	0x08080b61

08080e24 <_Z15serialEventRun4v>:

void serialEventRun4()
{
 8080e24:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial4, serialEvent4);
 8080e26:	f7ff ffd7 	bl	8080dd8 <_Z22__fetch_global_Serial4v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 8080e2a:	4b07      	ldr	r3, [pc, #28]	; (8080e48 <_Z15serialEventRun4v+0x24>)
 8080e2c:	4604      	mov	r4, r0
 8080e2e:	b153      	cbz	r3, 8080e46 <_Z15serialEventRun4v+0x22>
 8080e30:	f00b fc9b 	bl	808c76a <_ZN11USARTSerial9isEnabledEv>
 8080e34:	b138      	cbz	r0, 8080e46 <_Z15serialEventRun4v+0x22>
 8080e36:	6823      	ldr	r3, [r4, #0]
 8080e38:	4620      	mov	r0, r4
 8080e3a:	691b      	ldr	r3, [r3, #16]
 8080e3c:	4798      	blx	r3
 8080e3e:	2800      	cmp	r0, #0
 8080e40:	dd01      	ble.n	8080e46 <_Z15serialEventRun4v+0x22>
        handler();
 8080e42:	f3af 8000 	nop.w
 8080e46:	bd10      	pop	{r4, pc}
 8080e48:	00000000 	.word	0x00000000

08080e4c <_Z22__fetch_global_Serial5v>:
// instantiate Serial5
static Ring_Buffer serial5_rx_buffer;
static Ring_Buffer serial5_tx_buffer;

USARTSerial& __fetch_global_Serial5()
{
 8080e4c:	b510      	push	{r4, lr}
	static USARTSerial serial5(HAL_USART_SERIAL5, &serial5_rx_buffer, &serial5_tx_buffer);
 8080e4e:	4c0c      	ldr	r4, [pc, #48]	; (8080e80 <_Z22__fetch_global_Serial5v+0x34>)
 8080e50:	6823      	ldr	r3, [r4, #0]
 8080e52:	07db      	lsls	r3, r3, #31
 8080e54:	d411      	bmi.n	8080e7a <_Z22__fetch_global_Serial5v+0x2e>
 8080e56:	4620      	mov	r0, r4
 8080e58:	f7ff f925 	bl	80800a6 <__cxa_guard_acquire>
 8080e5c:	b168      	cbz	r0, 8080e7a <_Z22__fetch_global_Serial5v+0x2e>
 8080e5e:	4a09      	ldr	r2, [pc, #36]	; (8080e84 <_Z22__fetch_global_Serial5v+0x38>)
 8080e60:	2104      	movs	r1, #4
 8080e62:	4b09      	ldr	r3, [pc, #36]	; (8080e88 <_Z22__fetch_global_Serial5v+0x3c>)
 8080e64:	4809      	ldr	r0, [pc, #36]	; (8080e8c <_Z22__fetch_global_Serial5v+0x40>)
 8080e66:	f00b fc63 	bl	808c730 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8080e6a:	4620      	mov	r0, r4
 8080e6c:	f7ff f920 	bl	80800b0 <__cxa_guard_release>
 8080e70:	4a07      	ldr	r2, [pc, #28]	; (8080e90 <_Z22__fetch_global_Serial5v+0x44>)
 8080e72:	4908      	ldr	r1, [pc, #32]	; (8080e94 <_Z22__fetch_global_Serial5v+0x48>)
 8080e74:	4805      	ldr	r0, [pc, #20]	; (8080e8c <_Z22__fetch_global_Serial5v+0x40>)
 8080e76:	f00b ff7d 	bl	808cd74 <__aeabi_atexit>
	return serial5;
}
 8080e7a:	4804      	ldr	r0, [pc, #16]	; (8080e8c <_Z22__fetch_global_Serial5v+0x40>)
 8080e7c:	bd10      	pop	{r4, pc}
 8080e7e:	bf00      	nop
 8080e80:	200001ec 	.word	0x200001ec
 8080e84:	20000a60 	.word	0x20000a60
 8080e88:	2000086c 	.word	0x2000086c
 8080e8c:	200001f8 	.word	0x200001f8
 8080e90:	200001d0 	.word	0x200001d0
 8080e94:	08080b61 	.word	0x08080b61

08080e98 <_Z15serialEventRun5v>:


void serialEventRun5()
{
 8080e98:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial5, serialEvent5);
 8080e9a:	f7ff ffd7 	bl	8080e4c <_Z22__fetch_global_Serial5v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 8080e9e:	4b07      	ldr	r3, [pc, #28]	; (8080ebc <_Z15serialEventRun5v+0x24>)
 8080ea0:	4604      	mov	r4, r0
 8080ea2:	b153      	cbz	r3, 8080eba <_Z15serialEventRun5v+0x22>
 8080ea4:	f00b fc61 	bl	808c76a <_ZN11USARTSerial9isEnabledEv>
 8080ea8:	b138      	cbz	r0, 8080eba <_Z15serialEventRun5v+0x22>
 8080eaa:	6823      	ldr	r3, [r4, #0]
 8080eac:	4620      	mov	r0, r4
 8080eae:	691b      	ldr	r3, [r3, #16]
 8080eb0:	4798      	blx	r3
 8080eb2:	2800      	cmp	r0, #0
 8080eb4:	dd01      	ble.n	8080eba <_Z15serialEventRun5v+0x22>
        handler();
 8080eb6:	f3af 8000 	nop.w
 8080eba:	bd10      	pop	{r4, pc}
 8080ebc:	00000000 	.word	0x00000000

08080ec0 <_ZN9SdFatBase5beginEP9SdSpiBasehh>:
   * \param[in] spi SPI object for the card.
   * \param[in] csPin SD card chip select pin.
   * \param[in] divisor SPI divisor.
   * \return true for success else false.
   */
  bool begin(SdSpiCard::m_spi_t* spi, uint8_t csPin = SS, uint8_t divisor = 2) {
 8080ec0:	b538      	push	{r3, r4, r5, lr}
 8080ec2:	4604      	mov	r4, r0
    return m_sdCard.begin(spi, csPin, divisor) &&
 8080ec4:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080ec8:	f006 ff3f 	bl	8087d4a <_ZN9SdSpiCard5beginEP9SdSpiBasehh>
 8080ecc:	b1e8      	cbz	r0, 8080f0a <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x4a>
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
 8080ece:	f504 6588 	add.w	r5, r4, #1088	; 0x440
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(uint8_t part = 0) {
    vwd()->close();
 8080ed2:	4628      	mov	r0, r5
 8080ed4:	f007 fbd0 	bl	8088678 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
 8080ed8:	2101      	movs	r1, #1
 8080eda:	4620      	mov	r0, r4
 8080edc:	f007 fe0a 	bl	8088af4 <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
 8080ee0:	4601      	mov	r1, r0
 8080ee2:	b168      	cbz	r0, 8080f00 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x40>
 8080ee4:	4621      	mov	r1, r4
 8080ee6:	4628      	mov	r0, r5
 8080ee8:	f007 f9f3 	bl	80882d2 <_ZN7FatFile8openRootEP9FatVolume>
 8080eec:	b168      	cbz	r0, 8080f0a <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x4a>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
 8080eee:	f894 3440 	ldrb.w	r3, [r4, #1088]	; 0x440
 8080ef2:	f013 0370 	ands.w	r3, r3, #112	; 0x70
      return false;
    }
    m_cwd = dir;
 8080ef6:	bf16      	itet	ne
 8080ef8:	4b05      	ldrne	r3, [pc, #20]	; (8080f10 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x50>)
 8080efa:	4618      	moveq	r0, r3
 8080efc:	601d      	strne	r5, [r3, #0]
 8080efe:	bd38      	pop	{r3, r4, r5, pc}
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(uint8_t part = 0) {
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
 8080f00:	4620      	mov	r0, r4
 8080f02:	f007 fdf7 	bl	8088af4 <_ZN9FatVolume4initEh>
 8080f06:	2800      	cmp	r0, #0
 8080f08:	d1ec      	bne.n	8080ee4 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x24>
 8080f0a:	2000      	movs	r0, #0
           FatFileSystem::begin();
  }
 8080f0c:	bd38      	pop	{r3, r4, r5, pc}
 8080f0e:	bf00      	nop
 8080f10:	20000bdc 	.word	0x20000bdc

08080f14 <_Z13writeRegisterhh>:
void locationCallback(float lat, float lon, float accuracy);

//void testsensible();

//test for setting up PMIC manually
void writeRegister(uint8_t reg, uint8_t value) {
 8080f14:	b538      	push	{r3, r4, r5, lr}
 8080f16:	460c      	mov	r4, r1
 8080f18:	4605      	mov	r5, r0
    // This would be easier if pmic.writeRegister wasn't private
    Wire3.beginTransmission(PMIC_ADDRESS);
 8080f1a:	f00b ff0b 	bl	808cd34 <_Z20__fetch_global_Wire3v>
 8080f1e:	216b      	movs	r1, #107	; 0x6b
 8080f20:	f00b fcbe 	bl	808c8a0 <_ZN7TwoWire17beginTransmissionEi>
    Wire3.write(reg);
 8080f24:	f00b ff06 	bl	808cd34 <_Z20__fetch_global_Wire3v>
 8080f28:	6803      	ldr	r3, [r0, #0]
 8080f2a:	4629      	mov	r1, r5
 8080f2c:	689b      	ldr	r3, [r3, #8]
 8080f2e:	4798      	blx	r3
    Wire3.write(value);
 8080f30:	f00b ff00 	bl	808cd34 <_Z20__fetch_global_Wire3v>
 8080f34:	6803      	ldr	r3, [r0, #0]
 8080f36:	4621      	mov	r1, r4
 8080f38:	689b      	ldr	r3, [r3, #8]
 8080f3a:	4798      	blx	r3
    Wire3.endTransmission(true);
 8080f3c:	f00b fefa 	bl	808cd34 <_Z20__fetch_global_Wire3v>

}
 8080f40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void writeRegister(uint8_t reg, uint8_t value) {
    // This would be easier if pmic.writeRegister wasn't private
    Wire3.beginTransmission(PMIC_ADDRESS);
    Wire3.write(reg);
    Wire3.write(value);
    Wire3.endTransmission(true);
 8080f44:	2101      	movs	r1, #1
 8080f46:	f00b bcae 	b.w	808c8a6 <_ZN7TwoWire15endTransmissionEh>
	...

08080f4c <_Z20writeDefaultSettingsv>:
    {
        PM_10_slope = 1;
    }
}

void writeDefaultSettings(void){
 8080f4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    EEPROM.put(DEVICE_ID_MEM_ADDRESS, 1555);
 8080f4e:	f00b fea5 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8080f52:	f240 6313 	movw	r3, #1555	; 0x613
 8080f56:	ac02      	add	r4, sp, #8
 8080f58:	f844 3d04 	str.w	r3, [r4, #-4]!
 8080f5c:	4621      	mov	r1, r4
 8080f5e:	2000      	movs	r0, #0


    EEPROM.put(CO2_SLOPE_MEM_ADDRESS, 100);
 8080f60:	2664      	movs	r6, #100	; 0x64
        PM_10_slope = 1;
    }
}

void writeDefaultSettings(void){
    EEPROM.put(DEVICE_ID_MEM_ADDRESS, 1555);
 8080f62:	f7ff fed1 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>


    EEPROM.put(CO2_SLOPE_MEM_ADDRESS, 100);
 8080f66:	f00b fe99 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8080f6a:	4621      	mov	r1, r4
 8080f6c:	2008      	movs	r0, #8
 8080f6e:	9601      	str	r6, [sp, #4]
 8080f70:	f7ff feca 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(CO_SLOPE_MEM_ADDRESS, 100);
 8080f74:	f00b fe92 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8080f78:	4621      	mov	r1, r4
 8080f7a:	2010      	movs	r0, #16
 8080f7c:	9601      	str	r6, [sp, #4]
 8080f7e:	f7ff fec3 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(PM_1_SLOPE_MEM_ADDRESS, 100);
 8080f82:	f00b fe8b 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8080f86:	4621      	mov	r1, r4
 8080f88:	2018      	movs	r0, #24
 8080f8a:	9601      	str	r6, [sp, #4]
 8080f8c:	f7ff febc 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(PM_25_SLOPE_MEM_ADDRESS, 100);
 8080f90:	f00b fe84 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8080f94:	4621      	mov	r1, r4
 8080f96:	2020      	movs	r0, #32
 8080f98:	9601      	str	r6, [sp, #4]
 8080f9a:	f7ff feb5 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(PM_10_SLOPE_MEM_ADDRESS, 100);
 8080f9e:	f00b fe7d 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8080fa2:	4621      	mov	r1, r4
 8080fa4:	2028      	movs	r0, #40	; 0x28
 8080fa6:	9601      	str	r6, [sp, #4]
 8080fa8:	f7ff feae 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, 100);
 8080fac:	f00b fe76 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8080fb0:	4621      	mov	r1, r4
 8080fb2:	2030      	movs	r0, #48	; 0x30
 8080fb4:	9601      	str	r6, [sp, #4]
 8080fb6:	f7ff fea7 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, 100);
 8080fba:	f00b fe6f 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8080fbe:	4621      	mov	r1, r4
 8080fc0:	2038      	movs	r0, #56	; 0x38
 8080fc2:	9601      	str	r6, [sp, #4]
 8080fc4:	f7ff fea0 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(RH_SLOPE_MEM_ADDRESS, 100);
 8080fc8:	f00b fe68 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8080fcc:	4621      	mov	r1, r4
 8080fce:	2040      	movs	r0, #64	; 0x40

    EEPROM.put(CO2_ZERO_MEM_ADDRESS, 0);
 8080fd0:	2500      	movs	r5, #0
    EEPROM.put(PM_1_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(PM_25_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(PM_10_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(RH_SLOPE_MEM_ADDRESS, 100);
 8080fd2:	9601      	str	r6, [sp, #4]
 8080fd4:	f7ff fe98 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>

    EEPROM.put(CO2_ZERO_MEM_ADDRESS, 0);
 8080fd8:	f00b fe60 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8080fdc:	4621      	mov	r1, r4
 8080fde:	2004      	movs	r0, #4
 8080fe0:	9501      	str	r5, [sp, #4]
 8080fe2:	f7ff fe91 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(CO_ZERO_MEM_ADDRESS, 0);
 8080fe6:	f00b fe59 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8080fea:	4621      	mov	r1, r4
 8080fec:	200c      	movs	r0, #12
 8080fee:	9501      	str	r5, [sp, #4]
 8080ff0:	f7ff fe8a 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(PM_1_ZERO_MEM_ADDRESS, 0);
 8080ff4:	f00b fe52 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8080ff8:	4621      	mov	r1, r4
 8080ffa:	2014      	movs	r0, #20
 8080ffc:	9501      	str	r5, [sp, #4]
 8080ffe:	f7ff fe83 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(PM_25_ZERO_MEM_ADDRESS, 0);
 8081002:	f00b fe4b 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8081006:	4621      	mov	r1, r4
 8081008:	201c      	movs	r0, #28
 808100a:	9501      	str	r5, [sp, #4]
 808100c:	f7ff fe7c 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(PM_10_ZERO_MEM_ADDRESS, 0);
 8081010:	f00b fe44 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8081014:	4621      	mov	r1, r4
 8081016:	2024      	movs	r0, #36	; 0x24
 8081018:	9501      	str	r5, [sp, #4]
 808101a:	f7ff fe75 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(TEMP_ZERO_MEM_ADDRESS, 0);
 808101e:	f00b fe3d 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8081022:	4621      	mov	r1, r4
 8081024:	202c      	movs	r0, #44	; 0x2c
 8081026:	9501      	str	r5, [sp, #4]
 8081028:	f7ff fe6e 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(PRESSURE_ZERO_MEM_ADDRESS, 0);
 808102c:	f00b fe36 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8081030:	4621      	mov	r1, r4
 8081032:	2034      	movs	r0, #52	; 0x34
 8081034:	9501      	str	r5, [sp, #4]
 8081036:	f7ff fe67 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(RH_ZERO_MEM_ADDRESS, 0);
 808103a:	f00b fe2f 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 808103e:	4621      	mov	r1, r4
 8081040:	203c      	movs	r0, #60	; 0x3c
 8081042:	9501      	str	r5, [sp, #4]
 8081044:	f7ff fe60 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>

    EEPROM.put(SERIAL_CELLULAR_EN_MEM_ADDRESS, 0);
 8081048:	f00b fe28 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 808104c:	4621      	mov	r1, r4
 808104e:	2044      	movs	r0, #68	; 0x44
 8081050:	9501      	str	r5, [sp, #4]
 8081052:	f7ff fe59 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, 0);
 8081056:	f00b fe21 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 808105a:	4621      	mov	r1, r4
 808105c:	2048      	movs	r0, #72	; 0x48
 808105e:	9501      	str	r5, [sp, #4]
 8081060:	f7ff fe52 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(OZONE_EN_MEM_ADDRESS, 0);
 8081064:	f00b fe1a 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8081068:	4621      	mov	r1, r4
 808106a:	2058      	movs	r0, #88	; 0x58
 808106c:	9501      	str	r5, [sp, #4]
 808106e:	f7ff fe4b 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(VOC_EN_MEM_ADDRESS, voc_enabled);
 8081072:	f00b fe13 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8081076:	4941      	ldr	r1, [pc, #260]	; (808117c <_Z20writeDefaultSettingsv+0x230>)
 8081078:	205c      	movs	r0, #92	; 0x5c
 808107a:	f7ff fe45 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(GAS_LOWER_LIMIT_MEM_ADDRESS, 1000);
 808107e:	f00b fe0d 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8081082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8081086:	4621      	mov	r1, r4
 8081088:	204c      	movs	r0, #76	; 0x4c
 808108a:	9301      	str	r3, [sp, #4]
 808108c:	f7ff fe3c 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(GAS_UPPER_LIMIT_MEM_ADDRESS, 10000);
 8081090:	f00b fe04 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8081094:	f242 7310 	movw	r3, #10000	; 0x2710
 8081098:	4621      	mov	r1, r4
 808109a:	2050      	movs	r0, #80	; 0x50
 808109c:	9301      	str	r3, [sp, #4]
 808109e:	f7ff fe33 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(TIME_ZONE_MEM_ADDRESS, -7);
 80810a2:	f00b fdfb 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 80810a6:	4621      	mov	r1, r4
 80810a8:	f06f 0306 	mvn.w	r3, #6
 80810ac:	2054      	movs	r0, #84	; 0x54
 80810ae:	9301      	str	r3, [sp, #4]
 80810b0:	f7ff fe2a 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    Time.zone(tempValue);
 80810b4:	4b32      	ldr	r3, [pc, #200]	; (8081180 <_Z20writeDefaultSettingsv+0x234>)
 80810b6:	6818      	ldr	r0, [r3, #0]
 80810b8:	f00c fd68 	bl	808db8c <__aeabi_i2f>
 80810bc:	f00a fbf0 	bl	808b8a0 <_ZN9TimeClass4zoneEf>
    EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, 0);
 80810c0:	f00b fdec 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 80810c4:	4621      	mov	r1, r4
 80810c6:	2060      	movs	r0, #96	; 0x60
 80810c8:	9501      	str	r5, [sp, #4]
 80810ca:	f7ff fe1d 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, 0);
 80810ce:	f00b fde5 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 80810d2:	4621      	mov	r1, r4
 80810d4:	4630      	mov	r0, r6
 80810d6:	9501      	str	r5, [sp, #4]
    EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, 1);
 80810d8:	2601      	movs	r6, #1
    EEPROM.put(GAS_LOWER_LIMIT_MEM_ADDRESS, 1000);
    EEPROM.put(GAS_UPPER_LIMIT_MEM_ADDRESS, 10000);
    EEPROM.put(TIME_ZONE_MEM_ADDRESS, -7);
    Time.zone(tempValue);
    EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, 0);
    EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, 0);
 80810da:	f7ff fe15 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, 1);
 80810de:	f00b fddd 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 80810e2:	4621      	mov	r1, r4
 80810e4:	2068      	movs	r0, #104	; 0x68
 80810e6:	9601      	str	r6, [sp, #4]
 80810e8:	f7ff fe0e 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(OZONE_A_OR_D_MEM_ADDRESS, 0);
 80810ec:	f00b fdd6 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 80810f0:	4621      	mov	r1, r4
 80810f2:	206c      	movs	r0, #108	; 0x6c
 80810f4:	9501      	str	r5, [sp, #4]
 80810f6:	f7ff fe07 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(OZONE_OFFSET_MEM_ADDRESS,0);
 80810fa:	f00b fdcf 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 80810fe:	4621      	mov	r1, r4
 8081100:	2070      	movs	r0, #112	; 0x70
 8081102:	9501      	str	r5, [sp, #4]
 8081104:	f7ff fe00 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(MEASUREMENTS_TO_AVG_MEM_ADDRESS, 1);
 8081108:	f00b fdc8 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 808110c:	4621      	mov	r1, r4
 808110e:	2074      	movs	r0, #116	; 0x74
 8081110:	9601      	str	r6, [sp, #4]
 8081112:	f7ff fdf9 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, 1);
 8081116:	f00b fdc1 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 808111a:	4621      	mov	r1, r4
 808111c:	2078      	movs	r0, #120	; 0x78
 808111e:	9601      	str	r6, [sp, #4]
 8081120:	f7ff fdf2 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(ABC_ENABLE_MEM_ADDRESS, 0);
 8081124:	f00b fdba 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8081128:	4621      	mov	r1, r4
 808112a:	207c      	movs	r0, #124	; 0x7c
 808112c:	9501      	str	r5, [sp, #4]
 808112e:	f7ff fdeb 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(HIH8120_ENABLE_MEM_ADDRESS, 1);
 8081132:	f00b fdb3 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8081136:	4621      	mov	r1, r4
 8081138:	2080      	movs	r0, #128	; 0x80
 808113a:	9601      	str	r6, [sp, #4]
 808113c:	f7ff fde4 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(CO_SOCKET_MEM_ADDRESS, 0);
 8081140:	f00b fdac 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8081144:	4621      	mov	r1, r4
 8081146:	2084      	movs	r0, #132	; 0x84
 8081148:	9501      	str	r5, [sp, #4]
 808114a:	f7ff fddd 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(GOOGLE_LOCATION_MEM_ADDRESS, 0);
 808114e:	f00b fda5 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8081152:	4621      	mov	r1, r4
 8081154:	2088      	movs	r0, #136	; 0x88
 8081156:	9501      	str	r5, [sp, #4]
 8081158:	f7ff fdd6 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(SENSIBLEIOT_ENABLE_MEM_ADDRESS, 0);
 808115c:	f00b fd9e 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8081160:	4621      	mov	r1, r4
 8081162:	208c      	movs	r0, #140	; 0x8c
 8081164:	9501      	str	r5, [sp, #4]
 8081166:	f7ff fdcf 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
    EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, 0);
 808116a:	f00b fd97 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 808116e:	4621      	mov	r1, r4
 8081170:	2090      	movs	r0, #144	; 0x90
 8081172:	9501      	str	r5, [sp, #4]
 8081174:	f7ff fdc8 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
}
 8081178:	b002      	add	sp, #8
 808117a:	bd70      	pop	{r4, r5, r6, pc}
 808117c:	20000b9c 	.word	0x20000b9c
 8081180:	20000bcc 	.word	0x20000bcc

08081184 <_Z14readStoredVarsv>:
    }else{
        return -1;
    }
}
//read all eeprom stored variables
void readStoredVars(void){
 8081184:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    //just changing the rh calibration for temporary!! -- remove me!!
    //these values were determined by John Birks from 2019 cdphe study at la casa in denver February 2019



    EEPROM.get(DEVICE_ID_MEM_ADDRESS, DEVICE_id);
 8081188:	4cb7      	ldr	r4, [pc, #732]	; (8081468 <_Z14readStoredVarsv+0x2e4>)
 808118a:	f00b fd87 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 808118e:	4621      	mov	r1, r4
 8081190:	2000      	movs	r0, #0
 8081192:	f7ff fdd8 	bl	8080d46 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    if(DEVICE_id == -1){
 8081196:	6823      	ldr	r3, [r4, #0]
 8081198:	3301      	adds	r3, #1
 808119a:	d104      	bne.n	80811a6 <_Z14readStoredVarsv+0x22>
        DEVICE_id = 1555;
 808119c:	f240 6313 	movw	r3, #1555	; 0x613
 80811a0:	6023      	str	r3, [r4, #0]
        writeDefaultSettings();
 80811a2:	f7ff fed3 	bl	8080f4c <_Z20writeDefaultSettingsv>
    }

    EEPROM.get(CO2_SLOPE_MEM_ADDRESS, tempValue);
 80811a6:	f00b fd79 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 80811aa:	a901      	add	r1, sp, #4
 80811ac:	2008      	movs	r0, #8
 80811ae:	f7ff fdca 	bl	8080d46 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    CO2_slope = tempValue;
    CO2_slope /= 100;
 80811b2:	9801      	ldr	r0, [sp, #4]
 80811b4:	f00c fcea 	bl	808db8c <__aeabi_i2f>
 80811b8:	49ac      	ldr	r1, [pc, #688]	; (808146c <_Z14readStoredVarsv+0x2e8>)
 80811ba:	f00c fdef 	bl	808dd9c <__aeabi_fdiv>
 80811be:	f8df 8334 	ldr.w	r8, [pc, #820]	; 80814f4 <_Z14readStoredVarsv+0x370>
    EEPROM.get(CO_SLOPE_MEM_ADDRESS, tempValue);
    CO_slope = tempValue;
    CO_slope /= 100;
 80811c2:	4fab      	ldr	r7, [pc, #684]	; (8081470 <_Z14readStoredVarsv+0x2ec>)
        writeDefaultSettings();
    }

    EEPROM.get(CO2_SLOPE_MEM_ADDRESS, tempValue);
    CO2_slope = tempValue;
    CO2_slope /= 100;
 80811c4:	f8c8 0000 	str.w	r0, [r8]
    EEPROM.get(CO_SLOPE_MEM_ADDRESS, tempValue);
 80811c8:	f00b fd68 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 80811cc:	a901      	add	r1, sp, #4
 80811ce:	2010      	movs	r0, #16
 80811d0:	f7ff fdb9 	bl	8080d46 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    CO_slope = tempValue;
    CO_slope /= 100;
 80811d4:	9801      	ldr	r0, [sp, #4]
 80811d6:	f00c fcd9 	bl	808db8c <__aeabi_i2f>
 80811da:	49a4      	ldr	r1, [pc, #656]	; (808146c <_Z14readStoredVarsv+0x2e8>)
 80811dc:	f00c fdde 	bl	808dd9c <__aeabi_fdiv>
 80811e0:	6038      	str	r0, [r7, #0]
    EEPROM.get(PM_1_SLOPE_MEM_ADDRESS, tempValue);
 80811e2:	f00b fd5b 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 80811e6:	a901      	add	r1, sp, #4
 80811e8:	2018      	movs	r0, #24
 80811ea:	f7ff fdac 	bl	8080d46 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    PM_1_slope = tempValue;
    PM_1_slope /= 100;
 80811ee:	9801      	ldr	r0, [sp, #4]
 80811f0:	f00c fccc 	bl	808db8c <__aeabi_i2f>
 80811f4:	499d      	ldr	r1, [pc, #628]	; (808146c <_Z14readStoredVarsv+0x2e8>)
 80811f6:	f00c fdd1 	bl	808dd9c <__aeabi_fdiv>
 80811fa:	4e9e      	ldr	r6, [pc, #632]	; (8081474 <_Z14readStoredVarsv+0x2f0>)
    EEPROM.get(PM_25_SLOPE_MEM_ADDRESS, tempValue);
    PM_25_slope = tempValue;
    PM_25_slope /= 100;
 80811fc:	4d9e      	ldr	r5, [pc, #632]	; (8081478 <_Z14readStoredVarsv+0x2f4>)
    EEPROM.get(CO_SLOPE_MEM_ADDRESS, tempValue);
    CO_slope = tempValue;
    CO_slope /= 100;
    EEPROM.get(PM_1_SLOPE_MEM_ADDRESS, tempValue);
    PM_1_slope = tempValue;
    PM_1_slope /= 100;
 80811fe:	6030      	str	r0, [r6, #0]
    EEPROM.get(PM_25_SLOPE_MEM_ADDRESS, tempValue);
 8081200:	f00b fd4c 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8081204:	a901      	add	r1, sp, #4
 8081206:	2020      	movs	r0, #32
 8081208:	f7ff fd9d 	bl	8080d46 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    PM_25_slope = tempValue;
    PM_25_slope /= 100;
 808120c:	9801      	ldr	r0, [sp, #4]
 808120e:	f00c fcbd 	bl	808db8c <__aeabi_i2f>
 8081212:	4996      	ldr	r1, [pc, #600]	; (808146c <_Z14readStoredVarsv+0x2e8>)
 8081214:	f00c fdc2 	bl	808dd9c <__aeabi_fdiv>
 8081218:	6028      	str	r0, [r5, #0]
    EEPROM.get(PM_10_SLOPE_MEM_ADDRESS, tempValue);
 808121a:	f00b fd3f 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 808121e:	a901      	add	r1, sp, #4
 8081220:	2028      	movs	r0, #40	; 0x28
 8081222:	f7ff fd90 	bl	8080d46 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    PM_10_slope = tempValue;
    PM_10_slope /= 100;
 8081226:	9801      	ldr	r0, [sp, #4]
 8081228:	f00c fcb0 	bl	808db8c <__aeabi_i2f>
 808122c:	498f      	ldr	r1, [pc, #572]	; (808146c <_Z14readStoredVarsv+0x2e8>)
 808122e:	f00c fdb5 	bl	808dd9c <__aeabi_fdiv>
 8081232:	4c92      	ldr	r4, [pc, #584]	; (808147c <_Z14readStoredVarsv+0x2f8>)
    EEPROM.get(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
    EEPROM.get(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
    EEPROM.get(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);
    EEPROM.get(CO_SOCKET_MEM_ADDRESS, CO_socket);
    EEPROM.get(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
    EEPROM.get(SENSIBLEIOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 8081234:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 80814f8 <_Z14readStoredVarsv+0x374>
    EEPROM.get(PM_25_SLOPE_MEM_ADDRESS, tempValue);
    PM_25_slope = tempValue;
    PM_25_slope /= 100;
    EEPROM.get(PM_10_SLOPE_MEM_ADDRESS, tempValue);
    PM_10_slope = tempValue;
    PM_10_slope /= 100;
 8081238:	6020      	str	r0, [r4, #0]
    EEPROM.get(TEMP_SLOPE_MEM_ADDRESS, tempValue);  //temperature
 808123a:	f00b fd2f 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 808123e:	a901      	add	r1, sp, #4
 8081240:	2030      	movs	r0, #48	; 0x30
 8081242:	f7ff fd80 	bl	8080d46 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    temp_slope = tempValue;
    temp_slope /= 100;
 8081246:	9801      	ldr	r0, [sp, #4]
 8081248:	f00c fca0 	bl	808db8c <__aeabi_i2f>
 808124c:	4987      	ldr	r1, [pc, #540]	; (808146c <_Z14readStoredVarsv+0x2e8>)
 808124e:	f00c fda5 	bl	808dd9c <__aeabi_fdiv>
 8081252:	4b8b      	ldr	r3, [pc, #556]	; (8081480 <_Z14readStoredVarsv+0x2fc>)
 8081254:	6018      	str	r0, [r3, #0]
    EEPROM.get(PRESSURE_SLOPE_MEM_ADDRESS, tempValue);
 8081256:	f00b fd21 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 808125a:	a901      	add	r1, sp, #4
 808125c:	2038      	movs	r0, #56	; 0x38
 808125e:	f7ff fd72 	bl	8080d46 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    pressure_slope = tempValue;
    pressure_slope /= 100;
 8081262:	9801      	ldr	r0, [sp, #4]
 8081264:	f00c fc92 	bl	808db8c <__aeabi_i2f>
 8081268:	4980      	ldr	r1, [pc, #512]	; (808146c <_Z14readStoredVarsv+0x2e8>)
 808126a:	f00c fd97 	bl	808dd9c <__aeabi_fdiv>
 808126e:	4b85      	ldr	r3, [pc, #532]	; (8081484 <_Z14readStoredVarsv+0x300>)
 8081270:	6018      	str	r0, [r3, #0]
    EEPROM.get(RH_SLOPE_MEM_ADDRESS, tempValue);
 8081272:	f00b fd13 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8081276:	a901      	add	r1, sp, #4
 8081278:	2040      	movs	r0, #64	; 0x40
 808127a:	f7ff fd64 	bl	8080d46 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    rh_slope = tempValue;
    rh_slope /= 100;
 808127e:	9801      	ldr	r0, [sp, #4]
 8081280:	f00c fc84 	bl	808db8c <__aeabi_i2f>
 8081284:	4979      	ldr	r1, [pc, #484]	; (808146c <_Z14readStoredVarsv+0x2e8>)
 8081286:	f00c fd89 	bl	808dd9c <__aeabi_fdiv>
 808128a:	4b7f      	ldr	r3, [pc, #508]	; (8081488 <_Z14readStoredVarsv+0x304>)
 808128c:	6018      	str	r0, [r3, #0]

    EEPROM.get(CO2_ZERO_MEM_ADDRESS, CO2_zero);
 808128e:	f00b fd05 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8081292:	497e      	ldr	r1, [pc, #504]	; (808148c <_Z14readStoredVarsv+0x308>)
 8081294:	2004      	movs	r0, #4
 8081296:	f7ff fd56 	bl	8080d46 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(CO_ZERO_MEM_ADDRESS, CO_zero);
 808129a:	f00b fcff 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 808129e:	497c      	ldr	r1, [pc, #496]	; (8081490 <_Z14readStoredVarsv+0x30c>)
 80812a0:	200c      	movs	r0, #12
 80812a2:	f7ff fd50 	bl	8080d46 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(PM_1_ZERO_MEM_ADDRESS, PM_1_zero);
 80812a6:	f00b fcf9 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 80812aa:	497a      	ldr	r1, [pc, #488]	; (8081494 <_Z14readStoredVarsv+0x310>)
 80812ac:	2014      	movs	r0, #20
 80812ae:	f7ff fd4a 	bl	8080d46 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(PM_25_ZERO_MEM_ADDRESS, PM_25_zero);
 80812b2:	f00b fcf3 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 80812b6:	4978      	ldr	r1, [pc, #480]	; (8081498 <_Z14readStoredVarsv+0x314>)
 80812b8:	201c      	movs	r0, #28
 80812ba:	f7ff fd44 	bl	8080d46 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(PM_10_ZERO_MEM_ADDRESS, PM_10_zero);
 80812be:	f00b fced 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 80812c2:	4976      	ldr	r1, [pc, #472]	; (808149c <_Z14readStoredVarsv+0x318>)
 80812c4:	2024      	movs	r0, #36	; 0x24
 80812c6:	f7ff fd3e 	bl	8080d46 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(TEMP_ZERO_MEM_ADDRESS, temp_zero);
 80812ca:	f00b fce7 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 80812ce:	4974      	ldr	r1, [pc, #464]	; (80814a0 <_Z14readStoredVarsv+0x31c>)
 80812d0:	202c      	movs	r0, #44	; 0x2c
 80812d2:	f7ff fd38 	bl	8080d46 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(PRESSURE_ZERO_MEM_ADDRESS, pressure_zero);
 80812d6:	f00b fce1 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 80812da:	4972      	ldr	r1, [pc, #456]	; (80814a4 <_Z14readStoredVarsv+0x320>)
 80812dc:	2034      	movs	r0, #52	; 0x34
 80812de:	f7ff fd32 	bl	8080d46 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(RH_ZERO_MEM_ADDRESS, rh_zero);
 80812e2:	f00b fcdb 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 80812e6:	4970      	ldr	r1, [pc, #448]	; (80814a8 <_Z14readStoredVarsv+0x324>)
 80812e8:	203c      	movs	r0, #60	; 0x3c
 80812ea:	f7ff fd2c 	bl	8080d46 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>

    EEPROM.get(SERIAL_CELLULAR_EN_MEM_ADDRESS, serial_cellular_enabled);
 80812ee:	f00b fcd5 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 80812f2:	496e      	ldr	r1, [pc, #440]	; (80814ac <_Z14readStoredVarsv+0x328>)
 80812f4:	2044      	movs	r0, #68	; 0x44
 80812f6:	f7ff fd26 	bl	8080d46 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
 80812fa:	f00b fccf 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 80812fe:	496c      	ldr	r1, [pc, #432]	; (80814b0 <_Z14readStoredVarsv+0x32c>)
 8081300:	2048      	movs	r0, #72	; 0x48
 8081302:	f7ff fd20 	bl	8080d46 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(OZONE_EN_MEM_ADDRESS, ozone_enabled);
 8081306:	f00b fcc9 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 808130a:	496a      	ldr	r1, [pc, #424]	; (80814b4 <_Z14readStoredVarsv+0x330>)
 808130c:	2058      	movs	r0, #88	; 0x58
 808130e:	f7ff fd1a 	bl	8080d46 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(VOC_EN_MEM_ADDRESS, voc_enabled);
 8081312:	f00b fcc3 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8081316:	4968      	ldr	r1, [pc, #416]	; (80814b8 <_Z14readStoredVarsv+0x334>)
 8081318:	205c      	movs	r0, #92	; 0x5c
 808131a:	f7ff fd14 	bl	8080d46 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(GAS_LOWER_LIMIT_MEM_ADDRESS, gas_lower_limit);
 808131e:	f00b fcbd 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8081322:	4966      	ldr	r1, [pc, #408]	; (80814bc <_Z14readStoredVarsv+0x338>)
 8081324:	204c      	movs	r0, #76	; 0x4c
 8081326:	f7ff fd0e 	bl	8080d46 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(GAS_UPPER_LIMIT_MEM_ADDRESS, gas_upper_limit);
 808132a:	f00b fcb7 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 808132e:	4964      	ldr	r1, [pc, #400]	; (80814c0 <_Z14readStoredVarsv+0x33c>)
 8081330:	2050      	movs	r0, #80	; 0x50
 8081332:	f7ff fd08 	bl	8080d46 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(TIME_ZONE_MEM_ADDRESS, tempValue);
 8081336:	f00b fcb1 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 808133a:	a901      	add	r1, sp, #4
 808133c:	2054      	movs	r0, #84	; 0x54
 808133e:	f7ff fd02 	bl	8080d46 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    Time.zone(tempValue);
 8081342:	9801      	ldr	r0, [sp, #4]
 8081344:	f00c fc22 	bl	808db8c <__aeabi_i2f>
 8081348:	f00a faaa 	bl	808b8a0 <_ZN9TimeClass4zoneEf>
    EEPROM.get(TEMPERATURE_UNITS_MEM_ADDRESS, temperature_units);
 808134c:	f00b fca6 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8081350:	495c      	ldr	r1, [pc, #368]	; (80814c4 <_Z14readStoredVarsv+0x340>)
 8081352:	2060      	movs	r0, #96	; 0x60
 8081354:	f7ff fcf7 	bl	8080d46 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(OUTPUT_PARTICLES_MEM_ADDRESS, output_only_particles);
 8081358:	f00b fca0 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 808135c:	495a      	ldr	r1, [pc, #360]	; (80814c8 <_Z14readStoredVarsv+0x344>)
 808135e:	2064      	movs	r0, #100	; 0x64
 8081360:	f7ff fcf1 	bl	8080d46 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, new_temperature_sensor_enabled);
 8081364:	f00b fc9a 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8081368:	4958      	ldr	r1, [pc, #352]	; (80814cc <_Z14readStoredVarsv+0x348>)
 808136a:	2068      	movs	r0, #104	; 0x68
 808136c:	f7ff fceb 	bl	8080d46 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(OZONE_A_OR_D_MEM_ADDRESS, ozone_analog_enabled);
 8081370:	f00b fc94 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8081374:	4956      	ldr	r1, [pc, #344]	; (80814d0 <_Z14readStoredVarsv+0x34c>)
 8081376:	206c      	movs	r0, #108	; 0x6c
 8081378:	f7ff fce5 	bl	8080d46 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(OZONE_OFFSET_MEM_ADDRESS, ozone_offset);
 808137c:	f00b fc8e 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8081380:	4954      	ldr	r1, [pc, #336]	; (80814d4 <_Z14readStoredVarsv+0x350>)
 8081382:	2070      	movs	r0, #112	; 0x70
 8081384:	f7ff fcdf 	bl	8080d46 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(MEASUREMENTS_TO_AVG_MEM_ADDRESS, measurements_to_average);
 8081388:	f00b fc88 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 808138c:	4952      	ldr	r1, [pc, #328]	; (80814d8 <_Z14readStoredVarsv+0x354>)
 808138e:	2074      	movs	r0, #116	; 0x74
 8081390:	f7ff fcd9 	bl	8080d46 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
 8081394:	f00b fc82 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8081398:	4950      	ldr	r1, [pc, #320]	; (80814dc <_Z14readStoredVarsv+0x358>)
 808139a:	2078      	movs	r0, #120	; 0x78
 808139c:	f7ff fcd3 	bl	8080d46 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 80813a0:	f00b fc7c 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 80813a4:	494e      	ldr	r1, [pc, #312]	; (80814e0 <_Z14readStoredVarsv+0x35c>)
 80813a6:	207c      	movs	r0, #124	; 0x7c
 80813a8:	f7ff fccd 	bl	8080d46 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);
 80813ac:	f00b fc76 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 80813b0:	494c      	ldr	r1, [pc, #304]	; (80814e4 <_Z14readStoredVarsv+0x360>)
 80813b2:	2080      	movs	r0, #128	; 0x80
 80813b4:	f7ff fcc7 	bl	8080d46 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(CO_SOCKET_MEM_ADDRESS, CO_socket);
 80813b8:	f00b fc70 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 80813bc:	494a      	ldr	r1, [pc, #296]	; (80814e8 <_Z14readStoredVarsv+0x364>)
 80813be:	2084      	movs	r0, #132	; 0x84
 80813c0:	f7ff fcc1 	bl	8080d46 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
 80813c4:	f00b fc6a 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 80813c8:	4948      	ldr	r1, [pc, #288]	; (80814ec <_Z14readStoredVarsv+0x368>)
 80813ca:	2088      	movs	r0, #136	; 0x88
 80813cc:	f7ff fcbb 	bl	8080d46 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(SENSIBLEIOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 80813d0:	f00b fc64 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 80813d4:	4649      	mov	r1, r9
 80813d6:	208c      	movs	r0, #140	; 0x8c
 80813d8:	f7ff fcb5 	bl	8080d46 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>
    EEPROM.get(CAR_TOPPER_POWER_MEM_ADDRESS, car_topper_power_en);
 80813dc:	f00b fc5e 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 80813e0:	4943      	ldr	r1, [pc, #268]	; (80814f0 <_Z14readStoredVarsv+0x36c>)
 80813e2:	2090      	movs	r0, #144	; 0x90
 80813e4:	f7ff fcaf 	bl	8080d46 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.25>

    if(sensible_iot_en){
 80813e8:	f8d9 3000 	ldr.w	r3, [r9]
 80813ec:	b113      	cbz	r3, 80813f4 <_Z14readStoredVarsv+0x270>
        Time.zone(0);       //use UTC if using sensible iot upload
 80813ee:	2000      	movs	r0, #0
 80813f0:	f00a fa56 	bl	808b8a0 <_ZN9TimeClass4zoneEf>
    }

    //measurements_to_average = 5;
    if(measurements_to_average < 1 || measurements_to_average > 5000)
 80813f4:	f241 3187 	movw	r1, #4999	; 0x1387
 80813f8:	4a37      	ldr	r2, [pc, #220]	; (80814d8 <_Z14readStoredVarsv+0x354>)
        measurements_to_average = 1;

    //check all values to make sure are within limits
    if(!CO2_slope)
 80813fa:	f8d8 0000 	ldr.w	r0, [r8]
    if(sensible_iot_en){
        Time.zone(0);       //use UTC if using sensible iot upload
    }

    //measurements_to_average = 5;
    if(measurements_to_average < 1 || measurements_to_average > 5000)
 80813fe:	6813      	ldr	r3, [r2, #0]
 8081400:	3b01      	subs	r3, #1
 8081402:	428b      	cmp	r3, r1
        measurements_to_average = 1;
 8081404:	bf84      	itt	hi
 8081406:	2301      	movhi	r3, #1
 8081408:	6013      	strhi	r3, [r2, #0]

    //check all values to make sure are within limits
    if(!CO2_slope)
 808140a:	2100      	movs	r1, #0
 808140c:	f00c fda6 	bl	808df5c <__aeabi_fcmpeq>
 8081410:	b118      	cbz	r0, 808141a <_Z14readStoredVarsv+0x296>
    {
        CO2_slope = 1;
 8081412:	4b38      	ldr	r3, [pc, #224]	; (80814f4 <_Z14readStoredVarsv+0x370>)
 8081414:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8081418:	601a      	str	r2, [r3, #0]
    }
    if(!CO_slope)
 808141a:	2100      	movs	r1, #0
 808141c:	6838      	ldr	r0, [r7, #0]
 808141e:	f00c fd9d 	bl	808df5c <__aeabi_fcmpeq>
 8081422:	b118      	cbz	r0, 808142c <_Z14readStoredVarsv+0x2a8>
    {
        CO_slope = 1;
 8081424:	4b12      	ldr	r3, [pc, #72]	; (8081470 <_Z14readStoredVarsv+0x2ec>)
 8081426:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 808142a:	601a      	str	r2, [r3, #0]
    }
    if(!PM_1_slope)
 808142c:	2100      	movs	r1, #0
 808142e:	6830      	ldr	r0, [r6, #0]
 8081430:	f00c fd94 	bl	808df5c <__aeabi_fcmpeq>
 8081434:	b118      	cbz	r0, 808143e <_Z14readStoredVarsv+0x2ba>
    {
        PM_1_slope = 1;
 8081436:	4b0f      	ldr	r3, [pc, #60]	; (8081474 <_Z14readStoredVarsv+0x2f0>)
 8081438:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 808143c:	601a      	str	r2, [r3, #0]
    }
    if(!PM_25_slope)
 808143e:	2100      	movs	r1, #0
 8081440:	6828      	ldr	r0, [r5, #0]
 8081442:	f00c fd8b 	bl	808df5c <__aeabi_fcmpeq>
 8081446:	b118      	cbz	r0, 8081450 <_Z14readStoredVarsv+0x2cc>
    {
        PM_25_slope = 1;
 8081448:	4b0b      	ldr	r3, [pc, #44]	; (8081478 <_Z14readStoredVarsv+0x2f4>)
 808144a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 808144e:	601a      	str	r2, [r3, #0]
    }
    if(!PM_10_slope)
 8081450:	2100      	movs	r1, #0
 8081452:	6820      	ldr	r0, [r4, #0]
 8081454:	f00c fd82 	bl	808df5c <__aeabi_fcmpeq>
 8081458:	b118      	cbz	r0, 8081462 <_Z14readStoredVarsv+0x2de>
    {
        PM_10_slope = 1;
 808145a:	4b08      	ldr	r3, [pc, #32]	; (808147c <_Z14readStoredVarsv+0x2f8>)
 808145c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8081460:	601a      	str	r2, [r3, #0]
    }
}
 8081462:	b003      	add	sp, #12
 8081464:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8081468:	20000088 	.word	0x20000088
 808146c:	42c80000 	.word	0x42c80000
 8081470:	200001e8 	.word	0x200001e8
 8081474:	20000230 	.word	0x20000230
 8081478:	200007ec 	.word	0x200007ec
 808147c:	20000b30 	.word	0x20000b30
 8081480:	200007f4 	.word	0x200007f4
 8081484:	200001f0 	.word	0x200001f0
 8081488:	200006f0 	.word	0x200006f0
 808148c:	20000234 	.word	0x20000234
 8081490:	200007f8 	.word	0x200007f8
 8081494:	20000ae4 	.word	0x20000ae4
 8081498:	20000788 	.word	0x20000788
 808149c:	20000784 	.word	0x20000784
 80814a0:	20000af0 	.word	0x20000af0
 80814a4:	200009c4 	.word	0x200009c4
 80814a8:	20000778 	.word	0x20000778
 80814ac:	20000224 	.word	0x20000224
 80814b0:	20000b10 	.word	0x20000b10
 80814b4:	20000a4c 	.word	0x20000a4c
 80814b8:	20000b9c 	.word	0x20000b9c
 80814bc:	2000009c 	.word	0x2000009c
 80814c0:	20000090 	.word	0x20000090
 80814c4:	200006b8 	.word	0x200006b8
 80814c8:	200007f0 	.word	0x200007f0
 80814cc:	20000780 	.word	0x20000780
 80814d0:	20000b7c 	.word	0x20000b7c
 80814d4:	200006b4 	.word	0x200006b4
 80814d8:	20000b04 	.word	0x20000b04
 80814dc:	20000b8c 	.word	0x20000b8c
 80814e0:	20000850 	.word	0x20000850
 80814e4:	200001f4 	.word	0x200001f4
 80814e8:	200006fc 	.word	0x200006fc
 80814ec:	20000b84 	.word	0x20000b84
 80814f0:	2000021c 	.word	0x2000021c
 80814f4:	20000a50 	.word	0x20000a50
 80814f8:	2000085c 	.word	0x2000085c

080814fc <_Z7echoGpsv>:
      air_quality_score = hum_score + gas_score;


}

void echoGps(){
 80814fc:	b510      	push	{r4, lr}
    char gps_byte = 0;
    while(!Serial.available()){
 80814fe:	f00b f813 	bl	808c528 <_Z16_fetch_usbserialv>
 8081502:	6803      	ldr	r3, [r0, #0]
 8081504:	691b      	ldr	r3, [r3, #16]
 8081506:	4798      	blx	r3
 8081508:	b990      	cbnz	r0, 8081530 <_Z7echoGpsv+0x34>
        if(Serial5.available() > 0){
 808150a:	f7ff fc9f 	bl	8080e4c <_Z22__fetch_global_Serial5v>
 808150e:	6803      	ldr	r3, [r0, #0]
 8081510:	691b      	ldr	r3, [r3, #16]
 8081512:	4798      	blx	r3
 8081514:	2800      	cmp	r0, #0
 8081516:	ddf2      	ble.n	80814fe <_Z7echoGpsv+0x2>
            gps_byte = Serial5.read();
 8081518:	f7ff fc98 	bl	8080e4c <_Z22__fetch_global_Serial5v>
 808151c:	6803      	ldr	r3, [r0, #0]
 808151e:	695b      	ldr	r3, [r3, #20]
 8081520:	4798      	blx	r3
 8081522:	4604      	mov	r4, r0
            Serial.print(gps_byte);
 8081524:	f00b f800 	bl	808c528 <_Z16_fetch_usbserialv>
 8081528:	b2e1      	uxtb	r1, r4
 808152a:	f009 ff47 	bl	808b3bc <_ZN5Print5printEc>
 808152e:	e7e6      	b.n	80814fe <_Z7echoGpsv+0x2>
 8081530:	bd10      	pop	{r4, pc}
	...

08081534 <_Z11printPacketPhh>:
    printPacket(packet, len);
}

// Print the packet specified to the PC serial in a hexadecimal form.
void printPacket(byte *packet, byte len)
{
 8081534:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8081536:	4606      	mov	r6, r0
 8081538:	460d      	mov	r5, r1
 808153a:	2400      	movs	r4, #0
    for (byte i = 0; i < len; i++)
    {
        sprintf(temp, "%.2X", packet[i]);
        Serial.print(temp);

        if (i != len - 1)
 808153c:	1e4f      	subs	r7, r1, #1
// Print the packet specified to the PC serial in a hexadecimal form.
void printPacket(byte *packet, byte len)
{
    char temp[3];

    for (byte i = 0; i < len; i++)
 808153e:	42ac      	cmp	r4, r5
 8081540:	d012      	beq.n	8081568 <_Z11printPacketPhh+0x34>
    {
        sprintf(temp, "%.2X", packet[i]);
 8081542:	5d32      	ldrb	r2, [r6, r4]
 8081544:	490b      	ldr	r1, [pc, #44]	; (8081574 <_Z11printPacketPhh+0x40>)
 8081546:	a801      	add	r0, sp, #4
 8081548:	f009 f996 	bl	808a878 <sprintf>
        Serial.print(temp);
 808154c:	f00a ffec 	bl	808c528 <_Z16_fetch_usbserialv>
 8081550:	a901      	add	r1, sp, #4
 8081552:	f009 ff2f 	bl	808b3b4 <_ZN5Print5printEPKc>

        if (i != len - 1)
 8081556:	42a7      	cmp	r7, r4
 8081558:	d004      	beq.n	8081564 <_Z11printPacketPhh+0x30>
        {
            Serial.print(' ');
 808155a:	f00a ffe5 	bl	808c528 <_Z16_fetch_usbserialv>
 808155e:	2120      	movs	r1, #32
 8081560:	f009 ff2c 	bl	808b3bc <_ZN5Print5printEc>
 8081564:	3401      	adds	r4, #1
// Print the packet specified to the PC serial in a hexadecimal form.
void printPacket(byte *packet, byte len)
{
    char temp[3];

    for (byte i = 0; i < len; i++)
 8081566:	e7ea      	b.n	808153e <_Z11printPacketPhh+0xa>
        {
            Serial.print(' ');
        }
    }

    Serial.println();
 8081568:	f00a ffde 	bl	808c528 <_Z16_fetch_usbserialv>
 808156c:	f009 ff29 	bl	808b3c2 <_ZN5Print7printlnEv>
}
 8081570:	b003      	add	sp, #12
 8081572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8081574:	080917a4 	.word	0x080917a4

08081578 <_Z10sendPacketPhh>:
    sendPacket(packet, sizeof(packet));
}

// Send the packet specified to the receiver.
void sendPacket(byte *packet, byte len)
{
 8081578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808157a:	4604      	mov	r4, r0
 808157c:	460f      	mov	r7, r1
 808157e:	1e4e      	subs	r6, r1, #1
 8081580:	1e45      	subs	r5, r0, #1
 8081582:	4406      	add	r6, r0
    for (byte i = 0; i < len; i++)
 8081584:	42b5      	cmp	r5, r6
 8081586:	d007      	beq.n	8081598 <_Z10sendPacketPhh+0x20>
    {
        Serial5.write(packet[i]);
 8081588:	f7ff fc60 	bl	8080e4c <_Z22__fetch_global_Serial5v>
 808158c:	6803      	ldr	r3, [r0, #0]
 808158e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8081592:	689b      	ldr	r3, [r3, #8]
 8081594:	4798      	blx	r3
}

// Send the packet specified to the receiver.
void sendPacket(byte *packet, byte len)
{
    for (byte i = 0; i < len; i++)
 8081596:	e7f5      	b.n	8081584 <_Z10sendPacketPhh+0xc>
    {
        Serial5.write(packet[i]);
    }

    printPacket(packet, len);
 8081598:	4639      	mov	r1, r7
 808159a:	4620      	mov	r0, r4
}
 808159c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    for (byte i = 0; i < len; i++)
    {
        Serial5.write(packet[i]);
    }

    printPacket(packet, len);
 80815a0:	f7ff bfc8 	b.w	8081534 <_Z11printPacketPhh>

080815a4 <_Z19enableContinuousGPSv>:

    sendPacket(packet, sizeof(packet));
}

void enableContinuousGPS()
{
 80815a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        0x00, // length
        0x00, // payload
        0x00, // payload
        0x1A, // CK_A
        0x83, // CK_B
    };
 80815a6:	4a07      	ldr	r2, [pc, #28]	; (80815c4 <_Z19enableContinuousGPSv+0x20>)
 80815a8:	ab01      	add	r3, sp, #4
 80815aa:	f852 0f0e 	ldr.w	r0, [r2, #14]!
 80815ae:	6851      	ldr	r1, [r2, #4]
 80815b0:	8912      	ldrh	r2, [r2, #8]
 80815b2:	c303      	stmia	r3!, {r0, r1}

    sendPacket(packet, sizeof(packet));
 80815b4:	210a      	movs	r1, #10
 80815b6:	a801      	add	r0, sp, #4
        0x00, // length
        0x00, // payload
        0x00, // payload
        0x1A, // CK_A
        0x83, // CK_B
    };
 80815b8:	801a      	strh	r2, [r3, #0]

    sendPacket(packet, sizeof(packet));
 80815ba:	f7ff ffdd 	bl	8081578 <_Z10sendPacketPhh>
}
 80815be:	b005      	add	sp, #20
 80815c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80815c4:	08091694 	.word	0x08091694

080815c8 <_Z17enableLowPowerGPSv>:

void enableLowPowerGPS()
{
 80815c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        0x00, // length
        0x01, // payload
        0x00, // payload
        0x1A, // CK_A
        0x83, // CK_B
    };
 80815ca:	4a07      	ldr	r2, [pc, #28]	; (80815e8 <_Z17enableLowPowerGPSv+0x20>)
 80815cc:	ab01      	add	r3, sp, #4
 80815ce:	f852 0f18 	ldr.w	r0, [r2, #24]!
 80815d2:	6851      	ldr	r1, [r2, #4]
 80815d4:	8912      	ldrh	r2, [r2, #8]
 80815d6:	c303      	stmia	r3!, {r0, r1}

    sendPacket(packet, sizeof(packet));
 80815d8:	210a      	movs	r1, #10
 80815da:	a801      	add	r0, sp, #4
        0x00, // length
        0x01, // payload
        0x00, // payload
        0x1A, // CK_A
        0x83, // CK_B
    };
 80815dc:	801a      	strh	r2, [r3, #0]

    sendPacket(packet, sizeof(packet));
 80815de:	f7ff ffcb 	bl	8081578 <_Z10sendPacketPhh>
}
 80815e2:	b005      	add	sp, #20
 80815e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80815e8:	08091694 	.word	0x08091694
 80815ec:	00000000 	.word	0x00000000

080815f0 <_Z15readTemperaturev>:
    }

    Serial.println();
}

float readTemperature(void){
 80815f0:	b538      	push	{r3, r4, r5, lr}
    float temperature = 0;
    if(hih8120_enabled){
 80815f2:	4b31      	ldr	r3, [pc, #196]	; (80816b8 <_Z15readTemperaturev+0xc8>)
 80815f4:	4d31      	ldr	r5, [pc, #196]	; (80816bc <_Z15readTemperaturev+0xcc>)
 80815f6:	681b      	ldr	r3, [r3, #0]
 80815f8:	b1b3      	cbz	r3, 8081628 <_Z15readTemperaturev+0x38>
        //  convert humidity / temperature
        static float rawToHumidity(uint16_t raw) {
            return float(raw) / 16382;
        }
        static float rawToTemperature(uint16_t raw) {
            return (float(raw) / 16382) * 165 - 40;
 80815fa:	4b31      	ldr	r3, [pc, #196]	; (80816c0 <_Z15readTemperaturev+0xd0>)
 80815fc:	8958      	ldrh	r0, [r3, #10]
 80815fe:	f00c fac1 	bl	808db84 <__aeabi_ui2f>
 8081602:	4930      	ldr	r1, [pc, #192]	; (80816c4 <_Z15readTemperaturev+0xd4>)
 8081604:	f00c fbca 	bl	808dd9c <__aeabi_fdiv>
 8081608:	492f      	ldr	r1, [pc, #188]	; (80816c8 <_Z15readTemperaturev+0xd8>)
 808160a:	f00c fb13 	bl	808dc34 <__aeabi_fmul>
 808160e:	492f      	ldr	r1, [pc, #188]	; (80816cc <_Z15readTemperaturev+0xdc>)
 8081610:	f00c fa06 	bl	808da20 <__aeabi_fsub>
        temperature = hih.temperature();
        if(debugging_enabled){
 8081614:	682b      	ldr	r3, [r5, #0]
 8081616:	4604      	mov	r4, r0
 8081618:	2b00      	cmp	r3, #0
 808161a:	d035      	beq.n	8081688 <_Z15readTemperaturev+0x98>
            Serial.println("Temperature reading from HIH8120");
 808161c:	f00a ff84 	bl	808c528 <_Z16_fetch_usbserialv>
 8081620:	492b      	ldr	r1, [pc, #172]	; (80816d0 <_Z15readTemperaturev+0xe0>)
 8081622:	f009 feda 	bl	808b3da <_ZN5Print7printlnEPKc>
 8081626:	e02f      	b.n	8081688 <_Z15readTemperaturev+0x98>
        }
    }else if(new_temperature_sensor_enabled){
 8081628:	4b2a      	ldr	r3, [pc, #168]	; (80816d4 <_Z15readTemperaturev+0xe4>)
 808162a:	681b      	ldr	r3, [r3, #0]
 808162c:	b31b      	cbz	r3, 8081676 <_Z15readTemperaturev+0x86>
        if(debugging_enabled){
 808162e:	682b      	ldr	r3, [r5, #0]
 8081630:	b123      	cbz	r3, 808163c <_Z15readTemperaturev+0x4c>
            Serial.println("Temperature reading from TMP36");
 8081632:	f00a ff79 	bl	808c528 <_Z16_fetch_usbserialv>
 8081636:	4928      	ldr	r1, [pc, #160]	; (80816d8 <_Z15readTemperaturev+0xe8>)
 8081638:	f009 fecf 	bl	808b3da <_ZN5Print7printlnEPKc>
        }
        temperature = analogRead(A1);
 808163c:	200b      	movs	r0, #11
 808163e:	f00b fae8 	bl	808cc12 <analogRead>


        temperature *= VOLTS_PER_UNIT;
 8081642:	f00c faa3 	bl	808db8c <__aeabi_i2f>
 8081646:	f00b fe4b 	bl	808d2e0 <__aeabi_f2d>
 808164a:	a317      	add	r3, pc, #92	; (adr r3, 80816a8 <_Z15readTemperaturev+0xb8>)
 808164c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081650:	f00b fe9a 	bl	808d388 <__aeabi_dmul>
 8081654:	f00c f990 	bl	808d978 <__aeabi_d2f>

        temperature -= TMP36_OFFSET;
        temperature /= TMP36_VPDC;
 8081658:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 808165c:	f00c f9e0 	bl	808da20 <__aeabi_fsub>
 8081660:	f00b fe3e 	bl	808d2e0 <__aeabi_f2d>
 8081664:	a312      	add	r3, pc, #72	; (adr r3, 80816b0 <_Z15readTemperaturev+0xc0>)
 8081666:	e9d3 2300 	ldrd	r2, r3, [r3]
 808166a:	f00b ffb7 	bl	808d5dc <__aeabi_ddiv>
 808166e:	f00c f983 	bl	808d978 <__aeabi_d2f>
 8081672:	4604      	mov	r4, r0
 8081674:	e008      	b.n	8081688 <_Z15readTemperaturev+0x98>
    }else{
        if(debugging_enabled){
 8081676:	682b      	ldr	r3, [r5, #0]
 8081678:	b123      	cbz	r3, 8081684 <_Z15readTemperaturev+0x94>
            Serial.println("Temperature reading from BME for Alphasense");
 808167a:	f00a ff55 	bl	808c528 <_Z16_fetch_usbserialv>
 808167e:	4917      	ldr	r1, [pc, #92]	; (80816dc <_Z15readTemperaturev+0xec>)
 8081680:	f009 feab 	bl	808b3da <_ZN5Print7printlnEPKc>

          }
        temperature = bme.temperature;
 8081684:	4b16      	ldr	r3, [pc, #88]	; (80816e0 <_Z15readTemperaturev+0xf0>)
 8081686:	681c      	ldr	r4, [r3, #0]
    }
    //temperature *= 100;

    temperature *= temp_slope;
 8081688:	4b16      	ldr	r3, [pc, #88]	; (80816e4 <_Z15readTemperaturev+0xf4>)
 808168a:	4620      	mov	r0, r4
 808168c:	6819      	ldr	r1, [r3, #0]
 808168e:	f00c fad1 	bl	808dc34 <__aeabi_fmul>
 8081692:	4604      	mov	r4, r0
    temperature += temp_zero;       //user input zero offset
 8081694:	4b14      	ldr	r3, [pc, #80]	; (80816e8 <_Z15readTemperaturev+0xf8>)

    return temperature;
 8081696:	6818      	ldr	r0, [r3, #0]
 8081698:	f00c fa78 	bl	808db8c <__aeabi_i2f>
 808169c:	4621      	mov	r1, r4
 808169e:	f00c f9c1 	bl	808da24 <__addsf3>
    //temperature = temperature +
}
 80816a2:	bd38      	pop	{r3, r4, r5, pc}
 80816a4:	f3af 8000 	nop.w
 80816a8:	eb1c432d 	.word	0xeb1c432d
 80816ac:	3f4a36e2 	.word	0x3f4a36e2
 80816b0:	47ae147b 	.word	0x47ae147b
 80816b4:	3f847ae1 	.word	0x3f847ae1
 80816b8:	200001f4 	.word	0x200001f4
 80816bc:	20000b10 	.word	0x20000b10
 80816c0:	20000860 	.word	0x20000860
 80816c4:	467ff800 	.word	0x467ff800
 80816c8:	43250000 	.word	0x43250000
 80816cc:	42200000 	.word	0x42200000
 80816d0:	080917a9 	.word	0x080917a9
 80816d4:	20000780 	.word	0x20000780
 80816d8:	080917ca 	.word	0x080917ca
 80816dc:	080917e9 	.word	0x080917e9
 80816e0:	20000700 	.word	0x20000700
 80816e4:	200007f4 	.word	0x200007f4
 80816e8:	20000af0 	.word	0x20000af0

080816ec <_Z12readHumidityv>:

float readHumidity(void){
 80816ec:	b538      	push	{r3, r4, r5, lr}
    float humidity;
    if(hih8120_enabled){
 80816ee:	4b19      	ldr	r3, [pc, #100]	; (8081754 <_Z12readHumidityv+0x68>)
 80816f0:	4d19      	ldr	r5, [pc, #100]	; (8081758 <_Z12readHumidityv+0x6c>)
 80816f2:	681b      	ldr	r3, [r3, #0]
 80816f4:	b183      	cbz	r3, 8081718 <_Z12readHumidityv+0x2c>
        humidity = hih.humidity();
        humidity *= 100;
 80816f6:	4b19      	ldr	r3, [pc, #100]	; (808175c <_Z12readHumidityv+0x70>)
 80816f8:	8918      	ldrh	r0, [r3, #8]
 80816fa:	f00c fa43 	bl	808db84 <__aeabi_ui2f>
 80816fe:	4918      	ldr	r1, [pc, #96]	; (8081760 <_Z12readHumidityv+0x74>)
 8081700:	f00c fb4c 	bl	808dd9c <__aeabi_fdiv>
 8081704:	4917      	ldr	r1, [pc, #92]	; (8081764 <_Z12readHumidityv+0x78>)
 8081706:	f00c fa95 	bl	808dc34 <__aeabi_fmul>
        if(debugging_enabled){
 808170a:	682b      	ldr	r3, [r5, #0]

float readHumidity(void){
    float humidity;
    if(hih8120_enabled){
        humidity = hih.humidity();
        humidity *= 100;
 808170c:	4604      	mov	r4, r0
        if(debugging_enabled){
 808170e:	b163      	cbz	r3, 808172a <_Z12readHumidityv+0x3e>
            Serial.println("Humidity reading from HIH8120");
 8081710:	f00a ff0a 	bl	808c528 <_Z16_fetch_usbserialv>
 8081714:	4914      	ldr	r1, [pc, #80]	; (8081768 <_Z12readHumidityv+0x7c>)
 8081716:	e006      	b.n	8081726 <_Z12readHumidityv+0x3a>
        }
    }else{
        humidity = bme.humidity;
 8081718:	4b14      	ldr	r3, [pc, #80]	; (808176c <_Z12readHumidityv+0x80>)
 808171a:	689c      	ldr	r4, [r3, #8]
        if(debugging_enabled){
 808171c:	682b      	ldr	r3, [r5, #0]
 808171e:	b123      	cbz	r3, 808172a <_Z12readHumidityv+0x3e>
            Serial.println("Humidity reading from BME");
 8081720:	f00a ff02 	bl	808c528 <_Z16_fetch_usbserialv>
 8081724:	4912      	ldr	r1, [pc, #72]	; (8081770 <_Z12readHumidityv+0x84>)
 8081726:	f009 fe58 	bl	808b3da <_ZN5Print7printlnEPKc>
        }
    }


    humidity *= rh_slope;
 808172a:	4b12      	ldr	r3, [pc, #72]	; (8081774 <_Z12readHumidityv+0x88>)
 808172c:	4620      	mov	r0, r4
 808172e:	6819      	ldr	r1, [r3, #0]
 8081730:	f00c fa80 	bl	808dc34 <__aeabi_fmul>
 8081734:	4604      	mov	r4, r0
    humidity += rh_zero;       //user input zero offset
 8081736:	4b10      	ldr	r3, [pc, #64]	; (8081778 <_Z12readHumidityv+0x8c>)
 8081738:	6818      	ldr	r0, [r3, #0]
 808173a:	f00c fa27 	bl	808db8c <__aeabi_i2f>
 808173e:	4621      	mov	r1, r4
 8081740:	f00c f970 	bl	808da24 <__addsf3>
    if(humidity > 100)
 8081744:	4907      	ldr	r1, [pc, #28]	; (8081764 <_Z12readHumidityv+0x78>)
        }
    }


    humidity *= rh_slope;
    humidity += rh_zero;       //user input zero offset
 8081746:	4604      	mov	r4, r0
    if(humidity > 100)
 8081748:	f00c fc30 	bl	808dfac <__aeabi_fcmpgt>
 808174c:	b100      	cbz	r0, 8081750 <_Z12readHumidityv+0x64>
        humidity = 100;
 808174e:	4c05      	ldr	r4, [pc, #20]	; (8081764 <_Z12readHumidityv+0x78>)
    return humidity;
    //temperature = temperature +
}
 8081750:	4620      	mov	r0, r4
 8081752:	bd38      	pop	{r3, r4, r5, pc}
 8081754:	200001f4 	.word	0x200001f4
 8081758:	20000b10 	.word	0x20000b10
 808175c:	20000860 	.word	0x20000860
 8081760:	467ff800 	.word	0x467ff800
 8081764:	42c80000 	.word	0x42c80000
 8081768:	08091815 	.word	0x08091815
 808176c:	20000700 	.word	0x20000700
 8081770:	08091833 	.word	0x08091833
 8081774:	200006f0 	.word	0x200006f0
 8081778:	20000778 	.word	0x20000778
 808177c:	00000000 	.word	0x00000000

08081780 <_Z12calculateAQIv>:
        }
    }

}

void calculateAQI(void){
 8081780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    //Calculate humidity contribution to IAQ index
        gas_reference = bme.gas_resistance/100;
 8081784:	4b74      	ldr	r3, [pc, #464]	; (8081958 <_Z12calculateAQIv+0x1d8>)
        }
    }

}

void calculateAQI(void){
 8081786:	b085      	sub	sp, #20
    //Calculate humidity contribution to IAQ index
        gas_reference = bme.gas_resistance/100;
 8081788:	68d8      	ldr	r0, [r3, #12]
 808178a:	4974      	ldr	r1, [pc, #464]	; (808195c <_Z12calculateAQIv+0x1dc>)
 808178c:	f00c fb06 	bl	808dd9c <__aeabi_fdiv>
 8081790:	4c73      	ldr	r4, [pc, #460]	; (8081960 <_Z12calculateAQIv+0x1e0>)
 8081792:	6020      	str	r0, [r4, #0]
      float current_humidity = readHumidity();
 8081794:	f7ff ffaa 	bl	80816ec <_Z12readHumidityv>
      if(debugging_enabled){
 8081798:	4b72      	ldr	r3, [pc, #456]	; (8081964 <_Z12calculateAQIv+0x1e4>)
}

void calculateAQI(void){
    //Calculate humidity contribution to IAQ index
        gas_reference = bme.gas_resistance/100;
      float current_humidity = readHumidity();
 808179a:	4605      	mov	r5, r0
      if(debugging_enabled){
 808179c:	681a      	ldr	r2, [r3, #0]
 808179e:	46a0      	mov	r8, r4
 80817a0:	469a      	mov	sl, r3
 80817a2:	b192      	cbz	r2, 80817ca <_Z12calculateAQIv+0x4a>
          Serial.printf("gas resistance: %1.0f, humidity: %1.2f\n\r", gas_reference, current_humidity);
 80817a4:	f00a fec0 	bl	808c528 <_Z16_fetch_usbserialv>
 80817a8:	4604      	mov	r4, r0
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 80817aa:	4628      	mov	r0, r5
 80817ac:	f00b fd98 	bl	808d2e0 <__aeabi_f2d>
 80817b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80817b4:	f8d8 0000 	ldr.w	r0, [r8]
 80817b8:	f00b fd92 	bl	808d2e0 <__aeabi_f2d>
 80817bc:	4a6a      	ldr	r2, [pc, #424]	; (8081968 <_Z12calculateAQIv+0x1e8>)
 80817be:	e9cd 0100 	strd	r0, r1, [sp]
 80817c2:	2100      	movs	r1, #0
 80817c4:	4620      	mov	r0, r4
 80817c6:	f009 ff3d 	bl	808b644 <_ZN5Print11printf_implEbPKcz>

      }
      if (current_humidity >= 38 && current_humidity <= 42)
 80817ca:	4968      	ldr	r1, [pc, #416]	; (808196c <_Z12calculateAQIv+0x1ec>)
 80817cc:	4628      	mov	r0, r5
 80817ce:	f00c fbe3 	bl	808df98 <__aeabi_fcmpge>
 80817d2:	4c67      	ldr	r4, [pc, #412]	; (8081970 <_Z12calculateAQIv+0x1f0>)
 80817d4:	b138      	cbz	r0, 80817e6 <_Z12calculateAQIv+0x66>
 80817d6:	4967      	ldr	r1, [pc, #412]	; (8081974 <_Z12calculateAQIv+0x1f4>)
 80817d8:	4628      	mov	r0, r5
 80817da:	f00c fbd3 	bl	808df84 <__aeabi_fcmple>
 80817de:	b110      	cbz	r0, 80817e6 <_Z12calculateAQIv+0x66>
        hum_score = 0.25*100; // Humidity +/-5% around optimum
 80817e0:	4b65      	ldr	r3, [pc, #404]	; (8081978 <_Z12calculateAQIv+0x1f8>)
 80817e2:	6023      	str	r3, [r4, #0]
 80817e4:	e03d      	b.n	8081862 <_Z12calculateAQIv+0xe2>
      else
      { //sub-optimal
        if (current_humidity < 38)
 80817e6:	4961      	ldr	r1, [pc, #388]	; (808196c <_Z12calculateAQIv+0x1ec>)
 80817e8:	4628      	mov	r0, r5
 80817ea:	f00c fbc1 	bl	808df70 <__aeabi_fcmplt>
 80817ee:	4b63      	ldr	r3, [pc, #396]	; (808197c <_Z12calculateAQIv+0x1fc>)
 80817f0:	b1a0      	cbz	r0, 808181c <_Z12calculateAQIv+0x9c>
          hum_score = 0.25/hum_reference*current_humidity*100;
 80817f2:	6818      	ldr	r0, [r3, #0]
 80817f4:	f00b fd74 	bl	808d2e0 <__aeabi_f2d>
 80817f8:	4602      	mov	r2, r0
 80817fa:	460b      	mov	r3, r1
 80817fc:	2000      	movs	r0, #0
 80817fe:	4960      	ldr	r1, [pc, #384]	; (8081980 <_Z12calculateAQIv+0x200>)
 8081800:	f00b feec 	bl	808d5dc <__aeabi_ddiv>
 8081804:	4606      	mov	r6, r0
 8081806:	4628      	mov	r0, r5
 8081808:	460f      	mov	r7, r1
 808180a:	f00b fd69 	bl	808d2e0 <__aeabi_f2d>
 808180e:	4602      	mov	r2, r0
 8081810:	460b      	mov	r3, r1
 8081812:	4630      	mov	r0, r6
 8081814:	4639      	mov	r1, r7
 8081816:	f00b fdb7 	bl	808d388 <__aeabi_dmul>
 808181a:	e01b      	b.n	8081854 <_Z12calculateAQIv+0xd4>
        else
        {
          hum_score = ((-0.25/(100-hum_reference)*current_humidity)+0.416666)*100;
 808181c:	6819      	ldr	r1, [r3, #0]
 808181e:	484f      	ldr	r0, [pc, #316]	; (808195c <_Z12calculateAQIv+0x1dc>)
 8081820:	f00c f8fe 	bl	808da20 <__aeabi_fsub>
 8081824:	f00b fd5c 	bl	808d2e0 <__aeabi_f2d>
 8081828:	4602      	mov	r2, r0
 808182a:	460b      	mov	r3, r1
 808182c:	2000      	movs	r0, #0
 808182e:	4955      	ldr	r1, [pc, #340]	; (8081984 <_Z12calculateAQIv+0x204>)
 8081830:	f00b fed4 	bl	808d5dc <__aeabi_ddiv>
 8081834:	4606      	mov	r6, r0
 8081836:	4628      	mov	r0, r5
 8081838:	460f      	mov	r7, r1
 808183a:	f00b fd51 	bl	808d2e0 <__aeabi_f2d>
 808183e:	4602      	mov	r2, r0
 8081840:	460b      	mov	r3, r1
 8081842:	4630      	mov	r0, r6
 8081844:	4639      	mov	r1, r7
 8081846:	f00b fd9f 	bl	808d388 <__aeabi_dmul>
 808184a:	a341      	add	r3, pc, #260	; (adr r3, 8081950 <_Z12calculateAQIv+0x1d0>)
 808184c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081850:	f00b fbe8 	bl	808d024 <__adddf3>
 8081854:	2200      	movs	r2, #0
 8081856:	4b4c      	ldr	r3, [pc, #304]	; (8081988 <_Z12calculateAQIv+0x208>)
 8081858:	f00b fd96 	bl	808d388 <__aeabi_dmul>
 808185c:	f00c f88c 	bl	808d978 <__aeabi_d2f>
 8081860:	6020      	str	r0, [r4, #0]
        }
      }

      //Calculate gas contribution to IAQ index

      if (gas_reference > gas_upper_limit) gas_reference = gas_upper_limit;
 8081862:	4b4a      	ldr	r3, [pc, #296]	; (808198c <_Z12calculateAQIv+0x20c>)
 8081864:	681d      	ldr	r5, [r3, #0]
 8081866:	4628      	mov	r0, r5
 8081868:	f00c f990 	bl	808db8c <__aeabi_i2f>
 808186c:	f8d8 1000 	ldr.w	r1, [r8]
 8081870:	4606      	mov	r6, r0
 8081872:	f00c fb7d 	bl	808df70 <__aeabi_fcmplt>
 8081876:	b108      	cbz	r0, 808187c <_Z12calculateAQIv+0xfc>
 8081878:	4b39      	ldr	r3, [pc, #228]	; (8081960 <_Z12calculateAQIv+0x1e0>)
 808187a:	601e      	str	r6, [r3, #0]
      if (gas_reference < gas_lower_limit) gas_reference = gas_lower_limit;
 808187c:	4b44      	ldr	r3, [pc, #272]	; (8081990 <_Z12calculateAQIv+0x210>)
 808187e:	f8d3 b000 	ldr.w	fp, [r3]
 8081882:	4658      	mov	r0, fp
 8081884:	f00c f982 	bl	808db8c <__aeabi_i2f>
 8081888:	f8d8 1000 	ldr.w	r1, [r8]
 808188c:	4606      	mov	r6, r0
 808188e:	f00c fb8d 	bl	808dfac <__aeabi_fcmpgt>
 8081892:	b108      	cbz	r0, 8081898 <_Z12calculateAQIv+0x118>
 8081894:	4b32      	ldr	r3, [pc, #200]	; (8081960 <_Z12calculateAQIv+0x1e0>)
 8081896:	601e      	str	r6, [r3, #0]
      gas_score = (0.75/(gas_upper_limit-gas_lower_limit)*gas_reference -(gas_lower_limit*(0.75/(gas_upper_limit-gas_lower_limit))))*100;
 8081898:	ebcb 0005 	rsb	r0, fp, r5
 808189c:	f00b fd0e 	bl	808d2bc <__aeabi_i2d>
 80818a0:	4602      	mov	r2, r0
 80818a2:	460b      	mov	r3, r1
 80818a4:	2000      	movs	r0, #0
 80818a6:	493b      	ldr	r1, [pc, #236]	; (8081994 <_Z12calculateAQIv+0x214>)
 80818a8:	f00b fe98 	bl	808d5dc <__aeabi_ddiv>
 80818ac:	4606      	mov	r6, r0
 80818ae:	460f      	mov	r7, r1
 80818b0:	f8d8 0000 	ldr.w	r0, [r8]
 80818b4:	f00b fd14 	bl	808d2e0 <__aeabi_f2d>
 80818b8:	4632      	mov	r2, r6
 80818ba:	463b      	mov	r3, r7
 80818bc:	f00b fd64 	bl	808d388 <__aeabi_dmul>
 80818c0:	4680      	mov	r8, r0
 80818c2:	4658      	mov	r0, fp
 80818c4:	4689      	mov	r9, r1
 80818c6:	f00b fcf9 	bl	808d2bc <__aeabi_i2d>
 80818ca:	4632      	mov	r2, r6
 80818cc:	463b      	mov	r3, r7
 80818ce:	f00b fd5b 	bl	808d388 <__aeabi_dmul>
 80818d2:	4602      	mov	r2, r0
 80818d4:	460b      	mov	r3, r1
 80818d6:	4640      	mov	r0, r8
 80818d8:	4649      	mov	r1, r9
 80818da:	f00b fba1 	bl	808d020 <__aeabi_dsub>
 80818de:	4b2a      	ldr	r3, [pc, #168]	; (8081988 <_Z12calculateAQIv+0x208>)
 80818e0:	2200      	movs	r2, #0
 80818e2:	f00b fd51 	bl	808d388 <__aeabi_dmul>
 80818e6:	f00c f847 	bl	808d978 <__aeabi_d2f>
 80818ea:	4d2b      	ldr	r5, [pc, #172]	; (8081998 <_Z12calculateAQIv+0x218>)
      if(debugging_enabled){
 80818ec:	f8da 3000 	ldr.w	r3, [sl]

      //Calculate gas contribution to IAQ index

      if (gas_reference > gas_upper_limit) gas_reference = gas_upper_limit;
      if (gas_reference < gas_lower_limit) gas_reference = gas_lower_limit;
      gas_score = (0.75/(gas_upper_limit-gas_lower_limit)*gas_reference -(gas_lower_limit*(0.75/(gas_upper_limit-gas_lower_limit))))*100;
 80818f0:	6028      	str	r0, [r5, #0]
      if(debugging_enabled){
 80818f2:	b313      	cbz	r3, 808193a <_Z12calculateAQIv+0x1ba>
        Serial.print("Gas score: ");
 80818f4:	f00a fe18 	bl	808c528 <_Z16_fetch_usbserialv>
 80818f8:	4928      	ldr	r1, [pc, #160]	; (808199c <_Z12calculateAQIv+0x21c>)
 80818fa:	f009 fd5b 	bl	808b3b4 <_ZN5Print5printEPKc>
        Serial.println(gas_score);
 80818fe:	f00a fe13 	bl	808c528 <_Z16_fetch_usbserialv>
 8081902:	4607      	mov	r7, r0
 8081904:	6828      	ldr	r0, [r5, #0]
 8081906:	f00b fceb 	bl	808d2e0 <__aeabi_f2d>
 808190a:	2602      	movs	r6, #2
 808190c:	4602      	mov	r2, r0
 808190e:	460b      	mov	r3, r1
 8081910:	4638      	mov	r0, r7
 8081912:	9600      	str	r6, [sp, #0]
 8081914:	f009 fe88 	bl	808b628 <_ZN5Print7printlnEdi>
        Serial.print("Humidity score: ");
 8081918:	f00a fe06 	bl	808c528 <_Z16_fetch_usbserialv>
 808191c:	4920      	ldr	r1, [pc, #128]	; (80819a0 <_Z12calculateAQIv+0x220>)
 808191e:	f009 fd49 	bl	808b3b4 <_ZN5Print5printEPKc>
        Serial.println(hum_score);
 8081922:	f00a fe01 	bl	808c528 <_Z16_fetch_usbserialv>
 8081926:	4607      	mov	r7, r0
 8081928:	6820      	ldr	r0, [r4, #0]
 808192a:	f00b fcd9 	bl	808d2e0 <__aeabi_f2d>
 808192e:	9600      	str	r6, [sp, #0]
 8081930:	4602      	mov	r2, r0
 8081932:	460b      	mov	r3, r1
 8081934:	4638      	mov	r0, r7
 8081936:	f009 fe77 	bl	808b628 <_ZN5Print7printlnEdi>
    }

      //Combine results for the final IAQ index value (0-100% where 100% is good quality air)
      air_quality_score = hum_score + gas_score;
 808193a:	6829      	ldr	r1, [r5, #0]
 808193c:	6820      	ldr	r0, [r4, #0]
 808193e:	f00c f871 	bl	808da24 <__addsf3>
 8081942:	4b18      	ldr	r3, [pc, #96]	; (80819a4 <_Z12calculateAQIv+0x224>)
 8081944:	6018      	str	r0, [r3, #0]


}
 8081946:	b005      	add	sp, #20
 8081948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808194c:	f3af 8000 	nop.w
 8081950:	ded6ba8c 	.word	0xded6ba8c
 8081954:	3fdaaaa7 	.word	0x3fdaaaa7
 8081958:	20000700 	.word	0x20000700
 808195c:	42c80000 	.word	0x42c80000
 8081960:	20000094 	.word	0x20000094
 8081964:	20000b10 	.word	0x20000b10
 8081968:	0809184d 	.word	0x0809184d
 808196c:	42180000 	.word	0x42180000
 8081970:	200006ec 	.word	0x200006ec
 8081974:	42280000 	.word	0x42280000
 8081978:	41c80000 	.word	0x41c80000
 808197c:	20000098 	.word	0x20000098
 8081980:	3fd00000 	.word	0x3fd00000
 8081984:	bfd00000 	.word	0xbfd00000
 8081988:	40590000 	.word	0x40590000
 808198c:	20000090 	.word	0x20000090
 8081990:	2000009c 	.word	0x2000009c
 8081994:	3fe80000 	.word	0x3fe80000
 8081998:	20000b98 	.word	0x20000b98
 808199c:	08091876 	.word	0x08091876
 80819a0:	08091882 	.word	0x08091882
 80819a4:	20000b20 	.word	0x20000b20

080819a8 <_Z9readSoundv>:
        humidity = 100;
    return humidity;
    //temperature = temperature +
}
//read sound from
double readSound(void){
 80819a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int val;
    double sum = 0;
    float average = 0;
    for(int i=0; i< 10;i++){
        val = analogRead(sound_input);
 80819aa:	4d13      	ldr	r5, [pc, #76]	; (80819f8 <_Z9readSoundv+0x50>)
        humidity = 100;
    return humidity;
    //temperature = temperature +
}
//read sound from
double readSound(void){
 80819ac:	240a      	movs	r4, #10
    int val;
    double sum = 0;
 80819ae:	2600      	movs	r6, #0
 80819b0:	2700      	movs	r7, #0
    float average = 0;
    for(int i=0; i< 10;i++){
        val = analogRead(sound_input);
 80819b2:	8828      	ldrh	r0, [r5, #0]
 80819b4:	f00b f92d 	bl	808cc12 <analogRead>
        sum += val;
 80819b8:	f00b fc80 	bl	808d2bc <__aeabi_i2d>
 80819bc:	4602      	mov	r2, r0
 80819be:	460b      	mov	r3, r1
 80819c0:	4630      	mov	r0, r6
 80819c2:	4639      	mov	r1, r7
 80819c4:	f00b fb2e 	bl	808d024 <__adddf3>
//read sound from
double readSound(void){
    int val;
    double sum = 0;
    float average = 0;
    for(int i=0; i< 10;i++){
 80819c8:	3c01      	subs	r4, #1
        val = analogRead(sound_input);
        sum += val;
 80819ca:	4606      	mov	r6, r0
 80819cc:	460f      	mov	r7, r1
//read sound from
double readSound(void){
    int val;
    double sum = 0;
    float average = 0;
    for(int i=0; i< 10;i++){
 80819ce:	d1f0      	bne.n	80819b2 <_Z9readSoundv+0xa>
        val = analogRead(sound_input);
        sum += val;
        //Serial.print("Sound level: ");
        //Serial.println(val);
    }
    sum = sum/10;
 80819d0:	2200      	movs	r2, #0
 80819d2:	4b0a      	ldr	r3, [pc, #40]	; (80819fc <_Z9readSoundv+0x54>)
 80819d4:	f00b fe02 	bl	808d5dc <__aeabi_ddiv>
    sum /= 4095;
 80819d8:	a305      	add	r3, pc, #20	; (adr r3, 80819f0 <_Z9readSoundv+0x48>)
 80819da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80819de:	f00b fdfd 	bl	808d5dc <__aeabi_ddiv>
    sum *= 100;
    return sum;
 80819e2:	2200      	movs	r2, #0
 80819e4:	4b06      	ldr	r3, [pc, #24]	; (8081a00 <_Z9readSoundv+0x58>)
 80819e6:	f00b fccf 	bl	808d388 <__aeabi_dmul>
}
 80819ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80819ec:	f3af 8000 	nop.w
 80819f0:	00000000 	.word	0x00000000
 80819f4:	40affe00 	.word	0x40affe00
 80819f8:	2000008c 	.word	0x2000008c
 80819fc:	40240000 	.word	0x40240000
 8081a00:	40590000 	.word	0x40590000

08081a04 <_Z7readCO2v>:
    CO_float += float_offset;

    return CO_float;
}

float readCO2(void){
 8081a04:	b538      	push	{r3, r4, r5, lr}
    //read CO2 values and apply calibration factors
    if(debugging_enabled){
 8081a06:	4b14      	ldr	r3, [pc, #80]	; (8081a58 <_Z7readCO2v+0x54>)
 8081a08:	681b      	ldr	r3, [r3, #0]
 8081a0a:	b11b      	cbz	r3, 8081a14 <_Z7readCO2v+0x10>
        t6713.readStatus(1);
 8081a0c:	2101      	movs	r1, #1
 8081a0e:	4813      	ldr	r0, [pc, #76]	; (8081a5c <_Z7readCO2v+0x58>)
 8081a10:	f005 fcb8 	bl	8087384 <_ZN13Telaire_T671310readStatusEi>
    }
    CO2_float = t6713.readPPM();
 8081a14:	4811      	ldr	r0, [pc, #68]	; (8081a5c <_Z7readCO2v+0x58>)
 8081a16:	f005 fc87 	bl	8087328 <_ZN13Telaire_T67137readPPMEv>
 8081a1a:	f00c f8b7 	bl	808db8c <__aeabi_i2f>
 8081a1e:	4c10      	ldr	r4, [pc, #64]	; (8081a60 <_Z7readCO2v+0x5c>)

    if(CO2_float == 0){
 8081a20:	2100      	movs	r1, #0
float readCO2(void){
    //read CO2 values and apply calibration factors
    if(debugging_enabled){
        t6713.readStatus(1);
    }
    CO2_float = t6713.readPPM();
 8081a22:	6020      	str	r0, [r4, #0]
 8081a24:	4605      	mov	r5, r0

    if(CO2_float == 0){
 8081a26:	f00c fa99 	bl	808df5c <__aeabi_fcmpeq>
 8081a2a:	4b0e      	ldr	r3, [pc, #56]	; (8081a64 <_Z7readCO2v+0x60>)
 8081a2c:	b110      	cbz	r0, 8081a34 <_Z7readCO2v+0x30>
        CO2_float = CO2_float_previous;
 8081a2e:	681b      	ldr	r3, [r3, #0]
 8081a30:	6023      	str	r3, [r4, #0]
 8081a32:	e000      	b.n	8081a36 <_Z7readCO2v+0x32>
    }else{
        CO2_float_previous = CO2_float;
 8081a34:	601d      	str	r5, [r3, #0]
    }

    CO2_float *= CO2_slope;
 8081a36:	4b0c      	ldr	r3, [pc, #48]	; (8081a68 <_Z7readCO2v+0x64>)
    CO2_float += CO2_zero;
 8081a38:	6820      	ldr	r0, [r4, #0]
 8081a3a:	6819      	ldr	r1, [r3, #0]
 8081a3c:	f00c f8fa 	bl	808dc34 <__aeabi_fmul>
 8081a40:	4b0a      	ldr	r3, [pc, #40]	; (8081a6c <_Z7readCO2v+0x68>)
 8081a42:	4605      	mov	r5, r0
 8081a44:	6818      	ldr	r0, [r3, #0]
 8081a46:	f00c f8a1 	bl	808db8c <__aeabi_i2f>
 8081a4a:	4601      	mov	r1, r0
 8081a4c:	4628      	mov	r0, r5
 8081a4e:	f00b ffe9 	bl	808da24 <__addsf3>
 8081a52:	6020      	str	r0, [r4, #0]
    
    return CO2_float;
}
 8081a54:	bd38      	pop	{r3, r4, r5, pc}
 8081a56:	bf00      	nop
 8081a58:	20000b10 	.word	0x20000b10
 8081a5c:	20000b90 	.word	0x20000b90
 8081a60:	20000228 	.word	0x20000228
 8081a64:	20000ae8 	.word	0x20000ae8
 8081a68:	20000a50 	.word	0x20000a50
 8081a6c:	20000234 	.word	0x20000234

08081a70 <_Z10readAlpha2v>:

      }
      return alpha1_ppmraw;
}

float readAlpha2(void){
 8081a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081a74:	b08b      	sub	sp, #44	; 0x2c
    float volt_half_Vref;
    float sensorCurrent; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent;
    float correctedCurrent;
    float alpha2_ppmraw;
    String alpha2_ppmRounded;
 8081a76:	4994      	ldr	r1, [pc, #592]	; (8081cc8 <_Z10readAlpha2v+0x258>)
 8081a78:	a802      	add	r0, sp, #8
 8081a7a:	f009 fa82 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
    if(debugging_enabled){
 8081a7e:	4b93      	ldr	r3, [pc, #588]	; (8081ccc <_Z10readAlpha2v+0x25c>)
 8081a80:	681a      	ldr	r2, [r3, #0]
 8081a82:	469b      	mov	fp, r3
 8081a84:	b122      	cbz	r2, 8081a90 <_Z10readAlpha2v+0x20>
        Serial.println("Start of alpha 2 read");
 8081a86:	f00a fd4f 	bl	808c528 <_Z16_fetch_usbserialv>
 8081a8a:	4991      	ldr	r1, [pc, #580]	; (8081cd0 <_Z10readAlpha2v+0x260>)
 8081a8c:	f009 fca5 	bl	808b3da <_ZN5Print7printlnEPKc>
    }
    digitalWrite(lmp91000_2_en, LOW);   //enable
 8081a90:	4c90      	ldr	r4, [pc, #576]	; (8081cd4 <_Z10readAlpha2v+0x264>)
 8081a92:	2100      	movs	r1, #0
 8081a94:	8820      	ldrh	r0, [r4, #0]
 8081a96:	f00b f890 	bl	808cbba <digitalWrite>

    if(Wire.requestFrom(0x4A,1) == 0){
 8081a9a:	f00b f92b 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8081a9e:	2201      	movs	r2, #1
 8081aa0:	214a      	movs	r1, #74	; 0x4a
 8081aa2:	f00a feef 	bl	808c884 <_ZN7TwoWire11requestFromEii>
 8081aa6:	4627      	mov	r7, r4
 8081aa8:	b928      	cbnz	r0, 8081ab6 <_Z10readAlpha2v+0x46>
        Serial.println("Couldn't communicate with LMP91000 2");
 8081aaa:	f00a fd3d 	bl	808c528 <_Z16_fetch_usbserialv>
 8081aae:	498a      	ldr	r1, [pc, #552]	; (8081cd8 <_Z10readAlpha2v+0x268>)
 8081ab0:	f009 fc93 	bl	808b3da <_ZN5Print7printlnEPKc>
 8081ab4:	e02e      	b.n	8081b14 <_Z10readAlpha2v+0xa4>
        //digitalWrite(red_status_led, HIGH);
        //delay(200);
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }else{
        half_Vref = ads2.readADC_SingleEnded(3); //half of Vref
 8081ab6:	2103      	movs	r1, #3
 8081ab8:	4888      	ldr	r0, [pc, #544]	; (8081cdc <_Z10readAlpha2v+0x26c>)
 8081aba:	f005 fad0 	bl	808705e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
        volt_half_Vref = half_Vref * ads_bitmv;
 8081abe:	f00c f865 	bl	808db8c <__aeabi_i2f>
 8081ac2:	4b87      	ldr	r3, [pc, #540]	; (8081ce0 <_Z10readAlpha2v+0x270>)
 8081ac4:	6819      	ldr	r1, [r3, #0]
 8081ac6:	f00c f8b5 	bl	808dc34 <__aeabi_fmul>
        if(abs((volt_half_Vref)/1000 - 1.25) > 0.5){
 8081aca:	4986      	ldr	r1, [pc, #536]	; (8081ce4 <_Z10readAlpha2v+0x274>)
        //delay(200);
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }else{
        half_Vref = ads2.readADC_SingleEnded(3); //half of Vref
        volt_half_Vref = half_Vref * ads_bitmv;
 8081acc:	4682      	mov	sl, r0
        if(abs((volt_half_Vref)/1000 - 1.25) > 0.5){
 8081ace:	f00c f965 	bl	808dd9c <__aeabi_fdiv>
 8081ad2:	f00b fc05 	bl	808d2e0 <__aeabi_f2d>
 8081ad6:	2200      	movs	r2, #0
 8081ad8:	4b83      	ldr	r3, [pc, #524]	; (8081ce8 <_Z10readAlpha2v+0x278>)
 8081ada:	4680      	mov	r8, r0
 8081adc:	4689      	mov	r9, r1
 8081ade:	f00b fa9f 	bl	808d020 <__aeabi_dsub>
 8081ae2:	f00b ff01 	bl	808d8e8 <__aeabi_d2iz>
 8081ae6:	2800      	cmp	r0, #0
 8081ae8:	bfb8      	it	lt
 8081aea:	4240      	neglt	r0, r0
 8081aec:	f00b fbe6 	bl	808d2bc <__aeabi_i2d>
 8081af0:	2200      	movs	r2, #0
 8081af2:	4b7e      	ldr	r3, [pc, #504]	; (8081cec <_Z10readAlpha2v+0x27c>)
 8081af4:	f00b fed8 	bl	808d8a8 <__aeabi_dcmpgt>
 8081af8:	b160      	cbz	r0, 8081b14 <_Z10readAlpha2v+0xa4>
          //operation_log += "AD1_VREF2,";
          //digitalWrite(red_status_led, HIGH);
          //delay(200);
          //digitalWrite(red_status_led, LOW);
          //delay(200);
          Serial.print("half vref2 ads1");
 8081afa:	f00a fd15 	bl	808c528 <_Z16_fetch_usbserialv>
 8081afe:	497c      	ldr	r1, [pc, #496]	; (8081cf0 <_Z10readAlpha2v+0x280>)
 8081b00:	f009 fc58 	bl	808b3b4 <_ZN5Print5printEPKc>
          Serial.println(volt_half_Vref/1000);
 8081b04:	f00a fd10 	bl	808c528 <_Z16_fetch_usbserialv>
 8081b08:	2302      	movs	r3, #2
 8081b0a:	9300      	str	r3, [sp, #0]
 8081b0c:	4642      	mov	r2, r8
 8081b0e:	464b      	mov	r3, r9
 8081b10:	f009 fd8a 	bl	808b628 <_ZN5Print7printlnEdi>

        }
    }

    if(lmp91000.read(LMP91000_STATUS_REG) == 0){
 8081b14:	2100      	movs	r1, #0
 8081b16:	4877      	ldr	r0, [pc, #476]	; (8081cf4 <_Z10readAlpha2v+0x284>)
 8081b18:	f005 f94b 	bl	8086db2 <_ZN8LMP910004readEh>
 8081b1c:	b938      	cbnz	r0, 8081b2e <_Z10readAlpha2v+0xbe>
        if(debugging_enabled)
 8081b1e:	f8db 3000 	ldr.w	r3, [fp]
 8081b22:	b123      	cbz	r3, 8081b2e <_Z10readAlpha2v+0xbe>
            Serial.println("Status == 0 from LMP91000 2 status reg");
 8081b24:	f00a fd00 	bl	808c528 <_Z16_fetch_usbserialv>
 8081b28:	4973      	ldr	r1, [pc, #460]	; (8081cf8 <_Z10readAlpha2v+0x288>)
 8081b2a:	f009 fc56 	bl	808b3da <_ZN5Print7printlnEPKc>
        //delay(200);
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }

    if(Wire.requestFrom(0x4A,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref)/1000 - 1.25) > 0.5)){
 8081b2e:	f00b f8e1 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8081b32:	2201      	movs	r2, #1
 8081b34:	214a      	movs	r1, #74	; 0x4a
 8081b36:	f00a fea5 	bl	808c884 <_ZN7TwoWire11requestFromEii>
 8081b3a:	2800      	cmp	r0, #0
 8081b3c:	f000 80ac 	beq.w	8081c98 <_Z10readAlpha2v+0x228>
 8081b40:	2100      	movs	r1, #0
 8081b42:	486c      	ldr	r0, [pc, #432]	; (8081cf4 <_Z10readAlpha2v+0x284>)
 8081b44:	f005 f935 	bl	8086db2 <_ZN8LMP910004readEh>
 8081b48:	2800      	cmp	r0, #0
 8081b4a:	f000 80a5 	beq.w	8081c98 <_Z10readAlpha2v+0x228>
 8081b4e:	4965      	ldr	r1, [pc, #404]	; (8081ce4 <_Z10readAlpha2v+0x274>)
 8081b50:	4650      	mov	r0, sl
 8081b52:	f00c f923 	bl	808dd9c <__aeabi_fdiv>
 8081b56:	f00b fbc3 	bl	808d2e0 <__aeabi_f2d>
 8081b5a:	2200      	movs	r2, #0
 8081b5c:	4b62      	ldr	r3, [pc, #392]	; (8081ce8 <_Z10readAlpha2v+0x278>)
 8081b5e:	f00b fa5f 	bl	808d020 <__aeabi_dsub>
 8081b62:	f00b fec1 	bl	808d8e8 <__aeabi_d2iz>
 8081b66:	2800      	cmp	r0, #0
 8081b68:	bfb8      	it	lt
 8081b6a:	4240      	neglt	r0, r0
 8081b6c:	f00b fba6 	bl	808d2bc <__aeabi_i2d>
 8081b70:	2200      	movs	r2, #0
 8081b72:	4b5e      	ldr	r3, [pc, #376]	; (8081cec <_Z10readAlpha2v+0x27c>)
 8081b74:	f00b fe98 	bl	808d8a8 <__aeabi_dcmpgt>
 8081b78:	2800      	cmp	r0, #0
 8081b7a:	f040 808d 	bne.w	8081c98 <_Z10readAlpha2v+0x228>
 8081b7e:	4604      	mov	r4, r0
 8081b80:	4680      	mov	r8, r0
 8081b82:	4681      	mov	r9, r0
 8081b84:	250a      	movs	r5, #10
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
          A0_gas += ads2.readADC_SingleEnded(0); //gas
 8081b86:	2100      	movs	r1, #0
 8081b88:	4854      	ldr	r0, [pc, #336]	; (8081cdc <_Z10readAlpha2v+0x26c>)
 8081b8a:	f005 fa68 	bl	808705e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          A1_aux += ads2.readADC_SingleEnded(1); //aux out
 8081b8e:	2101      	movs	r1, #1
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
          A0_gas += ads2.readADC_SingleEnded(0); //gas
 8081b90:	4481      	add	r9, r0
          A1_aux += ads2.readADC_SingleEnded(1); //aux out
 8081b92:	4852      	ldr	r0, [pc, #328]	; (8081cdc <_Z10readAlpha2v+0x26c>)
 8081b94:	f005 fa63 	bl	808705e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          A2_temperature += ads2.readADC_SingleEnded(2); //temperature
 8081b98:	2102      	movs	r1, #2
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
          A0_gas += ads2.readADC_SingleEnded(0); //gas
          A1_aux += ads2.readADC_SingleEnded(1); //aux out
 8081b9a:	4480      	add	r8, r0
          A2_temperature += ads2.readADC_SingleEnded(2); //temperature
 8081b9c:	484f      	ldr	r0, [pc, #316]	; (8081cdc <_Z10readAlpha2v+0x26c>)
 8081b9e:	f005 fa5e 	bl	808705e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          half_Vref += ads2.readADC_SingleEnded(3); //half of Vref
 8081ba2:	2103      	movs	r1, #3
 8081ba4:	484d      	ldr	r0, [pc, #308]	; (8081cdc <_Z10readAlpha2v+0x26c>)
 8081ba6:	f005 fa5a 	bl	808705e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
    }else{
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
 8081baa:	3d01      	subs	r5, #1
          A0_gas += ads2.readADC_SingleEnded(0); //gas
          A1_aux += ads2.readADC_SingleEnded(1); //aux out
          A2_temperature += ads2.readADC_SingleEnded(2); //temperature
          half_Vref += ads2.readADC_SingleEnded(3); //half of Vref
 8081bac:	4404      	add	r4, r0
    }else{
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
 8081bae:	d1ea      	bne.n	8081b86 <_Z10readAlpha2v+0x116>
        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;

        volt0_gas = A0_gas * ads_bitmv;
 8081bb0:	4b4b      	ldr	r3, [pc, #300]	; (8081ce0 <_Z10readAlpha2v+0x270>)
        volt1_aux = A1_aux * ads_bitmv;
        volt2_temperature = A2_temperature * ads_bitmv;
        volt_half_Vref = half_Vref * ads_bitmv;
 8081bb2:	250a      	movs	r5, #10
        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;

        volt0_gas = A0_gas * ads_bitmv;
 8081bb4:	f8d3 a000 	ldr.w	sl, [r3]
        volt1_aux = A1_aux * ads_bitmv;
        volt2_temperature = A2_temperature * ads_bitmv;
        volt_half_Vref = half_Vref * ads_bitmv;
 8081bb8:	fb94 f0f5 	sdiv	r0, r4, r5
 8081bbc:	f00b ffe6 	bl	808db8c <__aeabi_i2f>
 8081bc0:	4651      	mov	r1, sl
 8081bc2:	f00c f837 	bl	808dc34 <__aeabi_fmul>
 8081bc6:	4604      	mov	r4, r0

        sensorCurrent = (volt_half_Vref - volt0_gas) / (-1*120); // Working Electrode current in microamps (millivolts / Kohms)
 8081bc8:	fb99 f0f5 	sdiv	r0, r9, r5
 8081bcc:	f00b ffde 	bl	808db8c <__aeabi_i2f>
 8081bd0:	4651      	mov	r1, sl
 8081bd2:	f00c f82f 	bl	808dc34 <__aeabi_fmul>
 8081bd6:	4601      	mov	r1, r0
 8081bd8:	4620      	mov	r0, r4
 8081bda:	f00b ff21 	bl	808da20 <__aeabi_fsub>
 8081bde:	4947      	ldr	r1, [pc, #284]	; (8081cfc <_Z10readAlpha2v+0x28c>)
 8081be0:	f00c f8dc 	bl	808dd9c <__aeabi_fdiv>
 8081be4:	4681      	mov	r9, r0
        auxCurrent = (volt_half_Vref - volt1_aux) / (-1*150);
 8081be6:	fb98 f0f5 	sdiv	r0, r8, r5
 8081bea:	f00b ffcf 	bl	808db8c <__aeabi_i2f>
 8081bee:	4651      	mov	r1, sl
 8081bf0:	f00c f820 	bl	808dc34 <__aeabi_fmul>
 8081bf4:	4601      	mov	r1, r0
 8081bf6:	4620      	mov	r0, r4
 8081bf8:	f00b ff12 	bl	808da20 <__aeabi_fsub>
 8081bfc:	4940      	ldr	r1, [pc, #256]	; (8081d00 <_Z10readAlpha2v+0x290>)
 8081bfe:	f00c f8cd 	bl	808dd9c <__aeabi_fdiv>
 8081c02:	4604      	mov	r4, r0
        //{1, -1, -0.76}, //CO-A4 (<=10C, 20C, >=30C)
        if(readTemperature() <= 15){
 8081c04:	f7ff fcf4 	bl	80815f0 <_Z15readTemperaturev>
 8081c08:	493e      	ldr	r1, [pc, #248]	; (8081d04 <_Z10readAlpha2v+0x294>)
 8081c0a:	f00c f9bb 	bl	808df84 <__aeabi_fcmple>
 8081c0e:	b120      	cbz	r0, 8081c1a <_Z10readAlpha2v+0x1aa>
          correctedCurrent = ((sensorCurrent) - (auxCurrent));
 8081c10:	4621      	mov	r1, r4
 8081c12:	4648      	mov	r0, r9
 8081c14:	f00b ff04 	bl	808da20 <__aeabi_fsub>
 8081c18:	e025      	b.n	8081c66 <_Z10readAlpha2v+0x1f6>
        }
        else if(readTemperature() <= 25){
 8081c1a:	f7ff fce9 	bl	80815f0 <_Z15readTemperaturev>
 8081c1e:	493a      	ldr	r1, [pc, #232]	; (8081d08 <_Z10readAlpha2v+0x298>)
 8081c20:	f00c f9b0 	bl	808df84 <__aeabi_fcmple>
 8081c24:	b120      	cbz	r0, 8081c30 <_Z10readAlpha2v+0x1c0>
          correctedCurrent = ((sensorCurrent) - (-1)*(auxCurrent));
 8081c26:	4621      	mov	r1, r4
 8081c28:	4648      	mov	r0, r9
 8081c2a:	f00b fefb 	bl	808da24 <__addsf3>
 8081c2e:	e01a      	b.n	8081c66 <_Z10readAlpha2v+0x1f6>
        }
        else if(readTemperature() > 25){
 8081c30:	f7ff fcde 	bl	80815f0 <_Z15readTemperaturev>
 8081c34:	4934      	ldr	r1, [pc, #208]	; (8081d08 <_Z10readAlpha2v+0x298>)
 8081c36:	f00c f9b9 	bl	808dfac <__aeabi_fcmpgt>
 8081c3a:	b1a8      	cbz	r0, 8081c68 <_Z10readAlpha2v+0x1f8>
          correctedCurrent = ((sensorCurrent) - (-0.76)*(auxCurrent));
 8081c3c:	4620      	mov	r0, r4
 8081c3e:	f00b fb4f 	bl	808d2e0 <__aeabi_f2d>
 8081c42:	a31d      	add	r3, pc, #116	; (adr r3, 8081cb8 <_Z10readAlpha2v+0x248>)
 8081c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081c48:	f00b fb9e 	bl	808d388 <__aeabi_dmul>
 8081c4c:	4604      	mov	r4, r0
 8081c4e:	4648      	mov	r0, r9
 8081c50:	460d      	mov	r5, r1
 8081c52:	f00b fb45 	bl	808d2e0 <__aeabi_f2d>
 8081c56:	4602      	mov	r2, r0
 8081c58:	460b      	mov	r3, r1
 8081c5a:	4620      	mov	r0, r4
 8081c5c:	4629      	mov	r1, r5
 8081c5e:	f00b f9e1 	bl	808d024 <__adddf3>
 8081c62:	f00b fe89 	bl	808d978 <__aeabi_d2f>
 8081c66:	4606      	mov	r6, r0
        }
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 8081c68:	4630      	mov	r0, r6
 8081c6a:	f00b fb39 	bl	808d2e0 <__aeabi_f2d>
 8081c6e:	a314      	add	r3, pc, #80	; (adr r3, 8081cc0 <_Z10readAlpha2v+0x250>)
 8081c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081c74:	f00b fcb2 	bl	808d5dc <__aeabi_ddiv>
 8081c78:	f00b fe7e 	bl	808d978 <__aeabi_d2f>
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
 8081c7c:	2202      	movs	r2, #2
 8081c7e:	4601      	mov	r1, r0
          correctedCurrent = ((sensorCurrent) - (-1)*(auxCurrent));
        }
        else if(readTemperature() > 25){
          correctedCurrent = ((sensorCurrent) - (-0.76)*(auxCurrent));
        }
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 8081c80:	4605      	mov	r5, r0
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
 8081c82:	a806      	add	r0, sp, #24
 8081c84:	f009 fa17 	bl	808b0b6 <_ZN6StringC1Efi>
 8081c88:	a906      	add	r1, sp, #24
 8081c8a:	a802      	add	r0, sp, #8
 8081c8c:	f009 f9c3 	bl	808b016 <_ZN6StringaSEOS_>
 8081c90:	a806      	add	r0, sp, #24
 8081c92:	f009 f92f 	bl	808aef4 <_ZN6StringD1Ev>
 8081c96:	e003      	b.n	8081ca0 <_Z10readAlpha2v+0x230>
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }

    if(Wire.requestFrom(0x4A,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref)/1000 - 1.25) > 0.5)){
        alpha2_ppmRounded = "-99";
 8081c98:	491c      	ldr	r1, [pc, #112]	; (8081d0c <_Z10readAlpha2v+0x29c>)
 8081c9a:	a802      	add	r0, sp, #8
 8081c9c:	f009 f9c3 	bl	808b026 <_ZN6StringaSEPKc>
        }
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
      }

      digitalWrite(lmp91000_2_en, HIGH);  //disable
 8081ca0:	2101      	movs	r1, #1
 8081ca2:	8838      	ldrh	r0, [r7, #0]
 8081ca4:	f00a ff89 	bl	808cbba <digitalWrite>
    float volt_half_Vref;
    float sensorCurrent; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent;
    float correctedCurrent;
    float alpha2_ppmraw;
    String alpha2_ppmRounded;
 8081ca8:	a802      	add	r0, sp, #8
 8081caa:	f009 f923 	bl	808aef4 <_ZN6StringD1Ev>

      Serial.print("Volt1 Aux:");
      Serial.print(volt1_aux);
      Serial.println("Volts");*/
      return alpha2_ppmraw;
}
 8081cae:	4628      	mov	r0, r5
 8081cb0:	b00b      	add	sp, #44	; 0x2c
 8081cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8081cb6:	bf00      	nop
 8081cb8:	851eb852 	.word	0x851eb852
 8081cbc:	3fe851eb 	.word	0x3fe851eb
 8081cc0:	d4fdf3b6 	.word	0xd4fdf3b6
 8081cc4:	3fd6e978 	.word	0x3fd6e978
 8081cc8:	08094100 	.word	0x08094100
 8081ccc:	20000b10 	.word	0x20000b10
 8081cd0:	08091893 	.word	0x08091893
 8081cd4:	200000d8 	.word	0x200000d8
 8081cd8:	080918a9 	.word	0x080918a9
 8081cdc:	20000a5a 	.word	0x20000a5a
 8081ce0:	200000ac 	.word	0x200000ac
 8081ce4:	447a0000 	.word	0x447a0000
 8081ce8:	3ff40000 	.word	0x3ff40000
 8081cec:	3fe00000 	.word	0x3fe00000
 8081cf0:	080918ce 	.word	0x080918ce
 8081cf4:	2000022c 	.word	0x2000022c
 8081cf8:	080918de 	.word	0x080918de
 8081cfc:	c2f00000 	.word	0xc2f00000
 8081d00:	c3160000 	.word	0xc3160000
 8081d04:	41700000 	.word	0x41700000
 8081d08:	41c80000 	.word	0x41c80000
 8081d0c:	08091905 	.word	0x08091905

08081d10 <_Z12writeLogFile6String>:
    // }else{
    //     O3_float = getEspOzoneData();
    // }
}

void writeLogFile(String data){
 8081d10:	b530      	push	{r4, r5, lr}
   * \param[in] csPin SD card chip select pin.
   * \param[in] divisor SPI divisor.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, uint8_t divisor = 2) {
    return SdFatBase::begin(&m_spi, csPin, divisor);
 8081d12:	491e      	ldr	r1, [pc, #120]	; (8081d8c <_Z12writeLogFile6String+0x7c>)
 8081d14:	b085      	sub	sp, #20
 8081d16:	4605      	mov	r5, r0
 8081d18:	2302      	movs	r3, #2
 8081d1a:	220c      	movs	r2, #12
 8081d1c:	f5a1 608e 	sub.w	r0, r1, #1136	; 0x470
 8081d20:	f7ff f8ce 	bl	8080ec0 <_ZN9SdFatBase5beginEP9SdSpiBasehh>
  if (sd.begin(CS)){
 8081d24:	b350      	cbz	r0, 8081d7c <_Z12writeLogFile6String+0x6c>
      Serial.println("Writing data to log file.");
 8081d26:	f00a fbff 	bl	808c528 <_Z16_fetch_usbserialv>
 8081d2a:	4919      	ldr	r1, [pc, #100]	; (8081d90 <_Z12writeLogFile6String+0x80>)
 8081d2c:	f009 fb55 	bl	808b3da <_ZN5Print7printlnEPKc>
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, uint8_t oflag = O_READ) {
    return open(m_cwd, path, oflag);
 8081d30:	4a18      	ldr	r2, [pc, #96]	; (8081d94 <_Z12writeLogFile6String+0x84>)
 8081d32:	4919      	ldr	r1, [pc, #100]	; (8081d98 <_Z12writeLogFile6String+0x88>)
      log_file.open(logFileName, O_CREAT | O_APPEND | O_WRITE);
      if(log_file_started == 0){
 8081d34:	4c19      	ldr	r4, [pc, #100]	; (8081d9c <_Z12writeLogFile6String+0x8c>)
 8081d36:	2346      	movs	r3, #70	; 0x46
 8081d38:	6812      	ldr	r2, [r2, #0]
 8081d3a:	6809      	ldr	r1, [r1, #0]
 8081d3c:	4818      	ldr	r0, [pc, #96]	; (8081da0 <_Z12writeLogFile6String+0x90>)
 8081d3e:	f006 fca2 	bl	8088686 <_ZN7FatFile4openEPS_PKch>
 8081d42:	6823      	ldr	r3, [r4, #0]
 8081d44:	b993      	cbnz	r3, 8081d6c <_Z12writeLogFile6String+0x5c>
          log_file.println("File Start timestamp: ");
 8081d46:	4917      	ldr	r1, [pc, #92]	; (8081da4 <_Z12writeLogFile6String+0x94>)
 8081d48:	4817      	ldr	r0, [pc, #92]	; (8081da8 <_Z12writeLogFile6String+0x98>)
 8081d4a:	f009 fb46 	bl	808b3da <_ZN5Print7printlnEPKc>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
 8081d4e:	f009 fea0 	bl	808ba92 <_ZN9TimeClass3nowEv>
 8081d52:	4601      	mov	r1, r0
 8081d54:	4668      	mov	r0, sp
 8081d56:	f009 fdc9 	bl	808b8ec <_ZN9TimeClass7timeStrEl>
          log_file.println(Time.timeStr());
 8081d5a:	9900      	ldr	r1, [sp, #0]
 8081d5c:	4812      	ldr	r0, [pc, #72]	; (8081da8 <_Z12writeLogFile6String+0x98>)
 8081d5e:	f009 fb3c 	bl	808b3da <_ZN5Print7printlnEPKc>
 8081d62:	4668      	mov	r0, sp
 8081d64:	f009 f8c6 	bl	808aef4 <_ZN6StringD1Ev>
          log_file_started = 1;
 8081d68:	2301      	movs	r3, #1
 8081d6a:	6023      	str	r3, [r4, #0]
      }
      log_file.println(data);
 8081d6c:	6829      	ldr	r1, [r5, #0]
 8081d6e:	480e      	ldr	r0, [pc, #56]	; (8081da8 <_Z12writeLogFile6String+0x98>)
 8081d70:	f009 fb33 	bl	808b3da <_ZN5Print7printlnEPKc>

      log_file.close();
 8081d74:	480a      	ldr	r0, [pc, #40]	; (8081da0 <_Z12writeLogFile6String+0x90>)
 8081d76:	f006 fc7f 	bl	8088678 <_ZN7FatFile5closeEv>
 8081d7a:	e004      	b.n	8081d86 <_Z12writeLogFile6String+0x76>
  }else{
    Serial.println("Unable to write to log file");
 8081d7c:	f00a fbd4 	bl	808c528 <_Z16_fetch_usbserialv>
 8081d80:	490a      	ldr	r1, [pc, #40]	; (8081dac <_Z12writeLogFile6String+0x9c>)
 8081d82:	f009 fb2a 	bl	808b3da <_ZN5Print7printlnEPKc>
  }
}
 8081d86:	b005      	add	sp, #20
 8081d88:	bd30      	pop	{r4, r5, pc}
 8081d8a:	bf00      	nop
 8081d8c:	200006ac 	.word	0x200006ac
 8081d90:	08091909 	.word	0x08091909
 8081d94:	200007bc 	.word	0x200007bc
 8081d98:	20000bdc 	.word	0x20000bdc
 8081d9c:	20000858 	.word	0x20000858
 8081da0:	20000ba8 	.word	0x20000ba8
 8081da4:	08091923 	.word	0x08091923
 8081da8:	20000ba0 	.word	0x20000ba0
 8081dac:	0809193a 	.word	0x0809193a

08081db0 <_Z13readGpsStreamv>:
/*void disableGPS(void){
    Serial.println("Turning off gps");
    String disableString = "";
    Serial5.write()
}*/
void readGpsStream(void){
 8081db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081db2:	b08d      	sub	sp, #52	; 0x34
    String gps_sentence = "init";
 8081db4:	4993      	ldr	r1, [pc, #588]	; (8082004 <_Z13readGpsStreamv+0x254>)
 8081db6:	4668      	mov	r0, sp
 8081db8:	f009 f8e3 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
    int stringFound = 0;
    int error = 0;
    int comma_counter = 0;
    while(!stringFound && !error){
        gps_sentence = Serial5.readStringUntil('\r');
 8081dbc:	f7ff f846 	bl	8080e4c <_Z22__fetch_global_Serial5v>
 8081dc0:	220d      	movs	r2, #13
 8081dc2:	4601      	mov	r1, r0
 8081dc4:	a808      	add	r0, sp, #32
 8081dc6:	f009 fcf9 	bl	808b7bc <_ZN6Stream15readStringUntilEc>
 8081dca:	a908      	add	r1, sp, #32
 8081dcc:	4668      	mov	r0, sp
 8081dce:	f009 f922 	bl	808b016 <_ZN6StringaSEOS_>
 8081dd2:	a808      	add	r0, sp, #32
 8081dd4:	f009 f88e 	bl	808aef4 <_ZN6StringD1Ev>
        String prefix_string = gps_sentence.substring(4,7);
 8081dd8:	2307      	movs	r3, #7
 8081dda:	2204      	movs	r2, #4
 8081ddc:	4669      	mov	r1, sp
 8081dde:	a804      	add	r0, sp, #16
 8081de0:	f009 fa72 	bl	808b2c8 <_ZNK6String9substringEjj>
        if(prefix_string.equals("GGA")){
 8081de4:	4988      	ldr	r1, [pc, #544]	; (8082008 <_Z13readGpsStreamv+0x258>)
 8081de6:	a804      	add	r0, sp, #16
 8081de8:	f009 fa20 	bl	808b22c <_ZNK6String6equalsEPKc>
 8081dec:	4605      	mov	r5, r0
 8081dee:	b9a8      	cbnz	r0, 8081e1c <_Z13readGpsStreamv+0x6c>
            //Serial.print("prefix string: ");
            //Serial.println(prefix_string);
            //Serial.print("String:");
            //Serial.println(gps_sentence);
            stringFound = 1;
        }else if(gps_sentence.equals("init")){
 8081df0:	4984      	ldr	r1, [pc, #528]	; (8082004 <_Z13readGpsStreamv+0x254>)
 8081df2:	4668      	mov	r0, sp
 8081df4:	f009 fa1a 	bl	808b22c <_ZNK6String6equalsEPKc>
 8081df8:	b198      	cbz	r0, 8081e22 <_Z13readGpsStreamv+0x72>
            error = 1;
            Serial.println("Error reading GPS");
 8081dfa:	f00a fb95 	bl	808c528 <_Z16_fetch_usbserialv>
 8081dfe:	4983      	ldr	r1, [pc, #524]	; (808200c <_Z13readGpsStreamv+0x25c>)
 8081e00:	f009 faeb 	bl	808b3da <_ZN5Print7printlnEPKc>
            writeLogFile("Error reading GPS");
 8081e04:	4981      	ldr	r1, [pc, #516]	; (808200c <_Z13readGpsStreamv+0x25c>)
 8081e06:	a808      	add	r0, sp, #32
 8081e08:	f009 f8bb 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
 8081e0c:	a808      	add	r0, sp, #32
 8081e0e:	f7ff ff7f 	bl	8081d10 <_Z12writeLogFile6String>
 8081e12:	a808      	add	r0, sp, #32
 8081e14:	f009 f86e 	bl	808aef4 <_ZN6StringD1Ev>
            //Serial.println(prefix_string);
            //Serial.print("String:");
            //Serial.println(gps_sentence);
            stringFound = 1;
        }else if(gps_sentence.equals("init")){
            error = 1;
 8081e18:	2401      	movs	r4, #1
 8081e1a:	e004      	b.n	8081e26 <_Z13readGpsStreamv+0x76>
 8081e1c:	2400      	movs	r4, #0
            //
            //Serial.print("prefix string: ");
            //Serial.println(prefix_string);
            //Serial.print("String:");
            //Serial.println(gps_sentence);
            stringFound = 1;
 8081e1e:	2501      	movs	r5, #1
 8081e20:	e001      	b.n	8081e26 <_Z13readGpsStreamv+0x76>
 8081e22:	4604      	mov	r4, r0
 8081e24:	4605      	mov	r5, r0
    int stringFound = 0;
    int error = 0;
    int comma_counter = 0;
    while(!stringFound && !error){
        gps_sentence = Serial5.readStringUntil('\r');
        String prefix_string = gps_sentence.substring(4,7);
 8081e26:	a804      	add	r0, sp, #16
 8081e28:	f009 f864 	bl	808aef4 <_ZN6StringD1Ev>
void readGpsStream(void){
    String gps_sentence = "init";
    int stringFound = 0;
    int error = 0;
    int comma_counter = 0;
    while(!stringFound && !error){
 8081e2c:	b915      	cbnz	r5, 8081e34 <_Z13readGpsStreamv+0x84>
 8081e2e:	2c00      	cmp	r4, #0
 8081e30:	d0c4      	beq.n	8081dbc <_Z13readGpsStreamv+0xc>
 8081e32:	e0e2      	b.n	8081ffa <_Z13readGpsStreamv+0x24a>
                    }
                }else if(comma_counter == HORZONTAL_DILLUTION_INDEX){
                    if(gps_sentence.charAt(a+1)!=','){
                        String hdString = gps_sentence.substring(a+1,a+3);
                        gps.set_horizontalDillution(hdString);
                        status_word.status_int &= 0xFFF3;
 8081e34:	4e76      	ldr	r6, [pc, #472]	; (8082010 <_Z13readGpsStreamv+0x260>)
 8081e36:	2401      	movs	r4, #1
 8081e38:	4637      	mov	r7, r6
 8081e3a:	2500      	movs	r5, #0
        //quality is after 6th comma
        //gps_sentence = String("$GNGGA,011545.00,3945.81586,N,10514.09384,W,1,08,1.28,1799.4,M,-21.5,M,,*40");
        //
        comma_counter = 0;

        for(int a = 0; a<gps_sentence.length(); a++){
 8081e3c:	9b02      	ldr	r3, [sp, #8]
 8081e3e:	1e61      	subs	r1, r4, #1
 8081e40:	4299      	cmp	r1, r3
 8081e42:	f080 80da 	bcs.w	8081ffa <_Z13readGpsStreamv+0x24a>
            if(gps_sentence.charAt(a) == ','){
 8081e46:	4668      	mov	r0, sp
 8081e48:	f009 fa2a 	bl	808b2a0 <_ZNK6String6charAtEj>
 8081e4c:	282c      	cmp	r0, #44	; 0x2c
 8081e4e:	f040 80d2 	bne.w	8081ff6 <_Z13readGpsStreamv+0x246>
                if(comma_counter == TIME_FIELD_INDEX){
 8081e52:	b9e5      	cbnz	r5, 8081e8e <_Z13readGpsStreamv+0xde>
                    if(gps_sentence.charAt(a+1)!=','){
 8081e54:	4621      	mov	r1, r4
 8081e56:	4668      	mov	r0, sp
 8081e58:	f009 fa22 	bl	808b2a0 <_ZNK6String6charAtEj>
 8081e5c:	282c      	cmp	r0, #44	; 0x2c
 8081e5e:	f000 80c9 	beq.w	8081ff4 <_Z13readGpsStreamv+0x244>
                        String utc_string = gps_sentence.substring(a+1,a+11);
 8081e62:	f104 030a 	add.w	r3, r4, #10
 8081e66:	4622      	mov	r2, r4
 8081e68:	4669      	mov	r1, sp
 8081e6a:	a808      	add	r0, sp, #32
 8081e6c:	f009 fa2c 	bl	808b2c8 <_ZNK6String9substringEjj>
                        //Serial.print("GPS utc string: ");
                        if(debugging_enabled){
 8081e70:	4b68      	ldr	r3, [pc, #416]	; (8082014 <_Z13readGpsStreamv+0x264>)
 8081e72:	681b      	ldr	r3, [r3, #0]
 8081e74:	b14b      	cbz	r3, 8081e8a <_Z13readGpsStreamv+0xda>
                            Serial.print("GPS utc string: ");
 8081e76:	f00a fb57 	bl	808c528 <_Z16_fetch_usbserialv>
 8081e7a:	4967      	ldr	r1, [pc, #412]	; (8082018 <_Z13readGpsStreamv+0x268>)
 8081e7c:	f009 fa9a 	bl	808b3b4 <_ZN5Print5printEPKc>
                            Serial.println(utc_string);
 8081e80:	f00a fb52 	bl	808c528 <_Z16_fetch_usbserialv>
 8081e84:	9908      	ldr	r1, [sp, #32]
 8081e86:	f009 faa8 	bl	808b3da <_ZN5Print7printlnEPKc>

        for(int a = 0; a<gps_sentence.length(); a++){
            if(gps_sentence.charAt(a) == ','){
                if(comma_counter == TIME_FIELD_INDEX){
                    if(gps_sentence.charAt(a+1)!=','){
                        String utc_string = gps_sentence.substring(a+1,a+11);
 8081e8a:	a808      	add	r0, sp, #32
 8081e8c:	e0b0      	b.n	8081ff0 <_Z13readGpsStreamv+0x240>
                            Serial.println(utc_string);

                        }
                        //Serial.println(utc_string);
                    }
                }else if(comma_counter == LATITUDE_FIELD_INDEX){
 8081e8e:	2d01      	cmp	r5, #1
 8081e90:	d12f      	bne.n	8081ef2 <_Z13readGpsStreamv+0x142>
                    if(gps_sentence.charAt(a+1)!=','){
 8081e92:	4621      	mov	r1, r4
 8081e94:	4668      	mov	r0, sp
 8081e96:	f009 fa03 	bl	808b2a0 <_ZNK6String6charAtEj>
 8081e9a:	282c      	cmp	r0, #44	; 0x2c
 8081e9c:	f000 80aa 	beq.w	8081ff4 <_Z13readGpsStreamv+0x244>
                        String latitudeString = gps_sentence.substring(a+1,a+10);
 8081ea0:	f104 0309 	add.w	r3, r4, #9
 8081ea4:	4622      	mov	r2, r4
 8081ea6:	4669      	mov	r1, sp
 8081ea8:	a804      	add	r0, sp, #16
 8081eaa:	f009 fa0d 	bl	808b2c8 <_ZNK6String9substringEjj>
                        if(debugging_enabled){
 8081eae:	4b59      	ldr	r3, [pc, #356]	; (8082014 <_Z13readGpsStreamv+0x264>)
 8081eb0:	681b      	ldr	r3, [r3, #0]
 8081eb2:	b14b      	cbz	r3, 8081ec8 <_Z13readGpsStreamv+0x118>
                          Serial.print("Latitude string: ");
 8081eb4:	f00a fb38 	bl	808c528 <_Z16_fetch_usbserialv>
 8081eb8:	4958      	ldr	r1, [pc, #352]	; (808201c <_Z13readGpsStreamv+0x26c>)
 8081eba:	f009 fa7b 	bl	808b3b4 <_ZN5Print5printEPKc>
                          Serial.print(latitudeString);
 8081ebe:	f00a fb33 	bl	808c528 <_Z16_fetch_usbserialv>
 8081ec2:	9904      	ldr	r1, [sp, #16]
 8081ec4:	f009 fa76 	bl	808b3b4 <_ZN5Print5printEPKc>
                        }
                        //Serial.print("Latitude string: ");
                        //Serial.print(latitudeString);
                        //Serial.print(" ");
                        //Serial.println(gps_sentence.charAt(a+12));
                        gps.set_lat_decimal(latitudeString, gps_sentence.charAt(a+12));
 8081ec8:	a904      	add	r1, sp, #16
 8081eca:	a808      	add	r0, sp, #32
 8081ecc:	f009 f898 	bl	808b000 <_ZN6StringC1ERKS_>
 8081ed0:	f104 010b 	add.w	r1, r4, #11
 8081ed4:	4668      	mov	r0, sp
 8081ed6:	f009 f9e3 	bl	808b2a0 <_ZNK6String6charAtEj>
 8081eda:	a908      	add	r1, sp, #32
 8081edc:	4602      	mov	r2, r0
 8081ede:	4850      	ldr	r0, [pc, #320]	; (8082020 <_Z13readGpsStreamv+0x270>)
 8081ee0:	f005 f8e8 	bl	80870b4 <_ZN3GPS15set_lat_decimalE6Stringc>
 8081ee4:	a808      	add	r0, sp, #32
 8081ee6:	f009 f805 	bl	808aef4 <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF7;
 8081eea:	8833      	ldrh	r3, [r6, #0]
 8081eec:	f023 0308 	bic.w	r3, r3, #8
 8081ef0:	e069      	b.n	8081fc6 <_Z13readGpsStreamv+0x216>
                        //Serial.print("Latitude decimal: ");
                        //Serial.println(gps.get_latitude(), 5);
                    }
                }else if(comma_counter == LONGITUDE_FIELD_INDEX){
 8081ef2:	2d03      	cmp	r5, #3
 8081ef4:	d128      	bne.n	8081f48 <_Z13readGpsStreamv+0x198>
                    if(gps_sentence.charAt(a+1)!=','){
 8081ef6:	4621      	mov	r1, r4
 8081ef8:	4668      	mov	r0, sp
 8081efa:	f009 f9d1 	bl	808b2a0 <_ZNK6String6charAtEj>
 8081efe:	282c      	cmp	r0, #44	; 0x2c
 8081f00:	d078      	beq.n	8081ff4 <_Z13readGpsStreamv+0x244>
                        String longitudeString = gps_sentence.substring(a+1,a+11);
 8081f02:	f104 030a 	add.w	r3, r4, #10
 8081f06:	4622      	mov	r2, r4
 8081f08:	4669      	mov	r1, sp
 8081f0a:	a804      	add	r0, sp, #16
 8081f0c:	f009 f9dc 	bl	808b2c8 <_ZNK6String9substringEjj>
                        if(debugging_enabled){
 8081f10:	4b40      	ldr	r3, [pc, #256]	; (8082014 <_Z13readGpsStreamv+0x264>)
 8081f12:	681b      	ldr	r3, [r3, #0]
 8081f14:	b14b      	cbz	r3, 8081f2a <_Z13readGpsStreamv+0x17a>
                          Serial.print("longitude string: ");
 8081f16:	f00a fb07 	bl	808c528 <_Z16_fetch_usbserialv>
 8081f1a:	4942      	ldr	r1, [pc, #264]	; (8082024 <_Z13readGpsStreamv+0x274>)
 8081f1c:	f009 fa4a 	bl	808b3b4 <_ZN5Print5printEPKc>
                          Serial.print(longitudeString);
 8081f20:	f00a fb02 	bl	808c528 <_Z16_fetch_usbserialv>
 8081f24:	9904      	ldr	r1, [sp, #16]
 8081f26:	f009 fa45 	bl	808b3b4 <_ZN5Print5printEPKc>
                        }
                        //Serial.print(" ");
                        //Serial.println(gps_sentence.charAt(a+13));
                        gps.set_long_decimal(longitudeString, gps_sentence.charAt(a+13));
 8081f2a:	a904      	add	r1, sp, #16
 8081f2c:	a808      	add	r0, sp, #32
 8081f2e:	f009 f867 	bl	808b000 <_ZN6StringC1ERKS_>
 8081f32:	f104 010c 	add.w	r1, r4, #12
 8081f36:	4668      	mov	r0, sp
 8081f38:	f009 f9b2 	bl	808b2a0 <_ZNK6String6charAtEj>
 8081f3c:	a908      	add	r1, sp, #32
 8081f3e:	4602      	mov	r2, r0
 8081f40:	4837      	ldr	r0, [pc, #220]	; (8082020 <_Z13readGpsStreamv+0x270>)
 8081f42:	f005 f8fd 	bl	8087140 <_ZN3GPS16set_long_decimalE6Stringc>
 8081f46:	e015      	b.n	8081f74 <_Z13readGpsStreamv+0x1c4>
                        //Serial.print("Longitude decimal: ");
                        //Serial.println(gps.get_longitude(), 5);
                    }
                }else if(comma_counter == NUMBER_OF_SATELLITES_INDEX){
 8081f48:	2d06      	cmp	r5, #6
 8081f4a:	d117      	bne.n	8081f7c <_Z13readGpsStreamv+0x1cc>
                    if(gps_sentence.charAt(a+1)!=','){
 8081f4c:	4621      	mov	r1, r4
 8081f4e:	4668      	mov	r0, sp
 8081f50:	f009 f9a6 	bl	808b2a0 <_ZNK6String6charAtEj>
 8081f54:	282c      	cmp	r0, #44	; 0x2c
 8081f56:	d04d      	beq.n	8081ff4 <_Z13readGpsStreamv+0x244>
                        String numberOfSatellitesString = gps_sentence.substring(a+1,a+3);
 8081f58:	1ca3      	adds	r3, r4, #2
 8081f5a:	4622      	mov	r2, r4
 8081f5c:	4669      	mov	r1, sp
 8081f5e:	a804      	add	r0, sp, #16
 8081f60:	f009 f9b2 	bl	808b2c8 <_ZNK6String9substringEjj>
                        gps.set_satellites(numberOfSatellitesString);
 8081f64:	a904      	add	r1, sp, #16
 8081f66:	a808      	add	r0, sp, #32
 8081f68:	f009 f84a 	bl	808b000 <_ZN6StringC1ERKS_>
 8081f6c:	a908      	add	r1, sp, #32
 8081f6e:	482c      	ldr	r0, [pc, #176]	; (8082020 <_Z13readGpsStreamv+0x270>)
 8081f70:	f005 f92c 	bl	80871cc <_ZN3GPS14set_satellitesE6String>
 8081f74:	a808      	add	r0, sp, #32
 8081f76:	f008 ffbd 	bl	808aef4 <_ZN6StringD1Ev>
 8081f7a:	e038      	b.n	8081fee <_Z13readGpsStreamv+0x23e>
                    }
                }else if(comma_counter == HORZONTAL_DILLUTION_INDEX){
 8081f7c:	2d07      	cmp	r5, #7
 8081f7e:	d139      	bne.n	8081ff4 <_Z13readGpsStreamv+0x244>
                    if(gps_sentence.charAt(a+1)!=','){
 8081f80:	4621      	mov	r1, r4
 8081f82:	4668      	mov	r0, sp
 8081f84:	f009 f98c 	bl	808b2a0 <_ZNK6String6charAtEj>
 8081f88:	282c      	cmp	r0, #44	; 0x2c
 8081f8a:	d033      	beq.n	8081ff4 <_Z13readGpsStreamv+0x244>
                        String hdString = gps_sentence.substring(a+1,a+3);
 8081f8c:	1ca3      	adds	r3, r4, #2
 8081f8e:	4622      	mov	r2, r4
 8081f90:	4669      	mov	r1, sp
 8081f92:	a804      	add	r0, sp, #16
 8081f94:	f009 f998 	bl	808b2c8 <_ZNK6String9substringEjj>
                        gps.set_horizontalDillution(hdString);
 8081f98:	a904      	add	r1, sp, #16
 8081f9a:	a808      	add	r0, sp, #32
 8081f9c:	f009 f830 	bl	808b000 <_ZN6StringC1ERKS_>
 8081fa0:	a908      	add	r1, sp, #32
 8081fa2:	481f      	ldr	r0, [pc, #124]	; (8082020 <_Z13readGpsStreamv+0x270>)
 8081fa4:	f005 f91a 	bl	80871dc <_ZN3GPS23set_horizontalDillutionE6String>
 8081fa8:	a808      	add	r0, sp, #32
 8081faa:	f008 ffa3 	bl	808aef4 <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF3;
 8081fae:	8833      	ldrh	r3, [r6, #0]
                        if(gps.get_horizontalDillution() < 2){
 8081fb0:	481b      	ldr	r0, [pc, #108]	; (8082020 <_Z13readGpsStreamv+0x270>)
                    }
                }else if(comma_counter == HORZONTAL_DILLUTION_INDEX){
                    if(gps_sentence.charAt(a+1)!=','){
                        String hdString = gps_sentence.substring(a+1,a+3);
                        gps.set_horizontalDillution(hdString);
                        status_word.status_int &= 0xFFF3;
 8081fb2:	f023 030c 	bic.w	r3, r3, #12
 8081fb6:	8033      	strh	r3, [r6, #0]
                        if(gps.get_horizontalDillution() < 2){
 8081fb8:	f005 f926 	bl	8087208 <_ZN3GPS23get_horizontalDillutionEv>
 8081fbc:	2801      	cmp	r0, #1
 8081fbe:	dc04      	bgt.n	8081fca <_Z13readGpsStreamv+0x21a>
                            status_word.status_int |= 0x000C;
 8081fc0:	8833      	ldrh	r3, [r6, #0]
 8081fc2:	f043 030c 	orr.w	r3, r3, #12
 8081fc6:	8033      	strh	r3, [r6, #0]
 8081fc8:	e011      	b.n	8081fee <_Z13readGpsStreamv+0x23e>
                        }else if(gps.get_horizontalDillution() < 5){
 8081fca:	4815      	ldr	r0, [pc, #84]	; (8082020 <_Z13readGpsStreamv+0x270>)
 8081fcc:	f005 f91c 	bl	8087208 <_ZN3GPS23get_horizontalDillutionEv>
 8081fd0:	2804      	cmp	r0, #4
 8081fd2:	dc03      	bgt.n	8081fdc <_Z13readGpsStreamv+0x22c>
                            status_word.status_int |= 0x0008;
 8081fd4:	883b      	ldrh	r3, [r7, #0]
 8081fd6:	f043 0308 	orr.w	r3, r3, #8
 8081fda:	e007      	b.n	8081fec <_Z13readGpsStreamv+0x23c>
                        }else if(gps.get_horizontalDillution() < 20){
 8081fdc:	4810      	ldr	r0, [pc, #64]	; (8082020 <_Z13readGpsStreamv+0x270>)
 8081fde:	f005 f913 	bl	8087208 <_ZN3GPS23get_horizontalDillutionEv>
 8081fe2:	2813      	cmp	r0, #19
 8081fe4:	dc03      	bgt.n	8081fee <_Z13readGpsStreamv+0x23e>
                            status_word.status_int |= 0x0004;
 8081fe6:	883b      	ldrh	r3, [r7, #0]
 8081fe8:	f043 0304 	orr.w	r3, r3, #4
 8081fec:	803b      	strh	r3, [r7, #0]
                        String numberOfSatellitesString = gps_sentence.substring(a+1,a+3);
                        gps.set_satellites(numberOfSatellitesString);
                    }
                }else if(comma_counter == HORZONTAL_DILLUTION_INDEX){
                    if(gps_sentence.charAt(a+1)!=','){
                        String hdString = gps_sentence.substring(a+1,a+3);
 8081fee:	a804      	add	r0, sp, #16
 8081ff0:	f008 ff80 	bl	808aef4 <_ZN6StringD1Ev>
                        }


                    }
                }
                comma_counter++;
 8081ff4:	3501      	adds	r5, #1
 8081ff6:	3401      	adds	r4, #1
        //quality is after 6th comma
        //gps_sentence = String("$GNGGA,011545.00,3945.81586,N,10514.09384,W,1,08,1.28,1799.4,M,-21.5,M,,*40");
        //
        comma_counter = 0;

        for(int a = 0; a<gps_sentence.length(); a++){
 8081ff8:	e720      	b.n	8081e3c <_Z13readGpsStreamv+0x8c>
    Serial.println("Turning off gps");
    String disableString = "";
    Serial5.write()
}*/
void readGpsStream(void){
    String gps_sentence = "init";
 8081ffa:	4668      	mov	r0, sp
 8081ffc:	f008 ff7a 	bl	808aef4 <_ZN6StringD1Ev>
                comma_counter++;
            }
        }
    }

}
 8082000:	b00d      	add	sp, #52	; 0x34
 8082002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8082004:	08091956 	.word	0x08091956
 8082008:	0809195b 	.word	0x0809195b
 808200c:	0809195f 	.word	0x0809195f
 8082010:	20000b88 	.word	0x20000b88
 8082014:	20000b10 	.word	0x20000b10
 8082018:	08091971 	.word	0x08091971
 808201c:	08091982 	.word	0x08091982
 8082020:	200008f8 	.word	0x200008f8
 8082024:	08091994 	.word	0x08091994

08082028 <_Z12sendWifiInfov>:
          }
        esp_wifi_connection_status = 0;
    }
}
//send wifi information to the ESP
void sendWifiInfo(void){
 8082028:	b510      	push	{r4, lr}
 808202a:	b090      	sub	sp, #64	; 0x40

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 808202c:	491d      	ldr	r1, [pc, #116]	; (80820a4 <_Z12sendWifiInfov+0x7c>)
 808202e:	a808      	add	r0, sp, #32
 8082030:	f008 ffa7 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
    String wifiCredentials = "@!" + String(ssid) + "," + String(password) + "&";
 8082034:	491c      	ldr	r1, [pc, #112]	; (80820a8 <_Z12sendWifiInfov+0x80>)
 8082036:	a804      	add	r0, sp, #16
 8082038:	f008 ffe2 	bl	808b000 <_ZN6StringC1ERKS_>
 808203c:	a904      	add	r1, sp, #16
 808203e:	a808      	add	r0, sp, #32
 8082040:	f009 f8c2 	bl	808b1c8 <_ZplRK15StringSumHelperRK6String>
 8082044:	4919      	ldr	r1, [pc, #100]	; (80820ac <_Z12sendWifiInfov+0x84>)
 8082046:	f009 f8cb 	bl	808b1e0 <_ZplRK15StringSumHelperPKc>
 808204a:	4604      	mov	r4, r0
 808204c:	4918      	ldr	r1, [pc, #96]	; (80820b0 <_Z12sendWifiInfov+0x88>)
 808204e:	a80c      	add	r0, sp, #48	; 0x30
 8082050:	f008 ffd6 	bl	808b000 <_ZN6StringC1ERKS_>
 8082054:	a90c      	add	r1, sp, #48	; 0x30
 8082056:	4620      	mov	r0, r4
 8082058:	f009 f8b6 	bl	808b1c8 <_ZplRK15StringSumHelperRK6String>
 808205c:	4915      	ldr	r1, [pc, #84]	; (80820b4 <_Z12sendWifiInfov+0x8c>)
 808205e:	f009 f8bf 	bl	808b1e0 <_ZplRK15StringSumHelperPKc>
 8082062:	4601      	mov	r1, r0
 8082064:	4668      	mov	r0, sp
 8082066:	f008 ffcb 	bl	808b000 <_ZN6StringC1ERKS_>
 808206a:	a80c      	add	r0, sp, #48	; 0x30
 808206c:	f008 ff42 	bl	808aef4 <_ZN6StringD1Ev>
 8082070:	a804      	add	r0, sp, #16
 8082072:	f008 ff3f 	bl	808aef4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8082076:	a808      	add	r0, sp, #32
 8082078:	f008 ff3c 	bl	808aef4 <_ZN6StringD1Ev>
    Serial.println("Sending new wifi credentials to ESP");
 808207c:	f00a fa54 	bl	808c528 <_Z16_fetch_usbserialv>
 8082080:	490d      	ldr	r1, [pc, #52]	; (80820b8 <_Z12sendWifiInfov+0x90>)
 8082082:	f009 f9aa 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial1.println(wifiCredentials);
 8082086:	f00a fb73 	bl	808c770 <_Z22__fetch_global_Serial1v>
 808208a:	9900      	ldr	r1, [sp, #0]
 808208c:	f009 f9a5 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("Success!");
 8082090:	f00a fa4a 	bl	808c528 <_Z16_fetch_usbserialv>
 8082094:	4909      	ldr	r1, [pc, #36]	; (80820bc <_Z12sendWifiInfov+0x94>)
 8082096:	f009 f9a0 	bl	808b3da <_ZN5Print7printlnEPKc>
        esp_wifi_connection_status = 0;
    }
}
//send wifi information to the ESP
void sendWifiInfo(void){
    String wifiCredentials = "@!" + String(ssid) + "," + String(password) + "&";
 808209a:	4668      	mov	r0, sp
 808209c:	f008 ff2a 	bl	808aef4 <_ZN6StringD1Ev>
    Serial.println("Sending new wifi credentials to ESP");
    Serial1.println(wifiCredentials);
    Serial.println("Success!");
}
 80820a0:	b010      	add	sp, #64	; 0x40
 80820a2:	bd10      	pop	{r4, pc}
 80820a4:	08091a23 	.word	0x08091a23
 80820a8:	2000020c 	.word	0x2000020c
 80820ac:	08093cd2 	.word	0x08093cd2
 80820b0:	200001d8 	.word	0x200001d8
 80820b4:	080919be 	.word	0x080919be
 80820b8:	08091a26 	.word	0x08091a26
 80820bc:	08091a4a 	.word	0x08091a4a

080820c0 <_Z15getEspOzoneDatav>:

float getEspOzoneData(void){
 80820c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80820c2:	b093      	sub	sp, #76	; 0x4c
    float ozone_value = 0.0;
    String getOzoneData = "Z&";
 80820c4:	496c      	ldr	r1, [pc, #432]	; (8082278 <_Z15getEspOzoneDatav+0x1b8>)
 80820c6:	a802      	add	r0, sp, #8
 80820c8:	f008 ff5b 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
    String recievedData = " ";
    bool timeOut = false;
    double counterIndex = 0;
    //if esp doesn't answer, keep going
    Serial1.setTimeout(3000);
    if(debugging_enabled){
 80820cc:	4c6b      	ldr	r4, [pc, #428]	; (808227c <_Z15getEspOzoneDatav+0x1bc>)
}

float getEspOzoneData(void){
    float ozone_value = 0.0;
    String getOzoneData = "Z&";
    String recievedData = " ";
 80820ce:	496c      	ldr	r1, [pc, #432]	; (8082280 <_Z15getEspOzoneDatav+0x1c0>)
 80820d0:	a806      	add	r0, sp, #24
 80820d2:	f008 ff56 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
    bool timeOut = false;
    double counterIndex = 0;
    //if esp doesn't answer, keep going
    Serial1.setTimeout(3000);
 80820d6:	f00a fb4b 	bl	808c770 <_Z22__fetch_global_Serial1v>
 80820da:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80820de:	f009 fb00 	bl	808b6e2 <_ZN6Stream10setTimeoutEm>
    if(debugging_enabled){
 80820e2:	6823      	ldr	r3, [r4, #0]
 80820e4:	b173      	cbz	r3, 8082104 <_Z15getEspOzoneDatav+0x44>
        Serial.println("Getting ozone data from esp");
 80820e6:	f00a fa1f 	bl	808c528 <_Z16_fetch_usbserialv>
 80820ea:	4966      	ldr	r1, [pc, #408]	; (8082284 <_Z15getEspOzoneDatav+0x1c4>)
 80820ec:	f009 f975 	bl	808b3da <_ZN5Print7printlnEPKc>
        writeLogFile("Getting ozone data from esp");
 80820f0:	4964      	ldr	r1, [pc, #400]	; (8082284 <_Z15getEspOzoneDatav+0x1c4>)
 80820f2:	a80e      	add	r0, sp, #56	; 0x38
 80820f4:	f008 ff45 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
 80820f8:	a80e      	add	r0, sp, #56	; 0x38
 80820fa:	f7ff fe09 	bl	8081d10 <_Z12writeLogFile6String>
 80820fe:	a80e      	add	r0, sp, #56	; 0x38
 8082100:	f008 fef8 	bl	808aef4 <_ZN6StringD1Ev>
      }
    Serial1.print(getOzoneData);
 8082104:	f00a fb34 	bl	808c770 <_Z22__fetch_global_Serial1v>
 8082108:	9902      	ldr	r1, [sp, #8]
 808210a:	f009 f953 	bl	808b3b4 <_ZN5Print5printEPKc>
    Serial.println("Sending the command to get data from esp.");
 808210e:	f00a fa0b 	bl	808c528 <_Z16_fetch_usbserialv>
 8082112:	495d      	ldr	r1, [pc, #372]	; (8082288 <_Z15getEspOzoneDatav+0x1c8>)
 8082114:	f009 f961 	bl	808b3da <_ZN5Print7printlnEPKc>
float getEspOzoneData(void){
    float ozone_value = 0.0;
    String getOzoneData = "Z&";
    String recievedData = " ";
    bool timeOut = false;
    double counterIndex = 0;
 8082118:	2600      	movs	r6, #0
 808211a:	2700      	movs	r7, #0

float getEspOzoneData(void){
    float ozone_value = 0.0;
    String getOzoneData = "Z&";
    String recievedData = " ";
    bool timeOut = false;
 808211c:	2500      	movs	r5, #0
        Serial.println("Getting ozone data from esp");
        writeLogFile("Getting ozone data from esp");
      }
    Serial1.print(getOzoneData);
    Serial.println("Sending the command to get data from esp.");
    while(!Serial1.available() && timeOut == false){
 808211e:	f00a fb27 	bl	808c770 <_Z22__fetch_global_Serial1v>
 8082122:	6803      	ldr	r3, [r0, #0]
 8082124:	691b      	ldr	r3, [r3, #16]
 8082126:	4798      	blx	r3
 8082128:	b9e0      	cbnz	r0, 8082164 <_Z15getEspOzoneDatav+0xa4>
 808212a:	b9dd      	cbnz	r5, 8082164 <_Z15getEspOzoneDatav+0xa4>
      //delay(1);
      counterIndex++;
 808212c:	2200      	movs	r2, #0
 808212e:	4b57      	ldr	r3, [pc, #348]	; (808228c <_Z15getEspOzoneDatav+0x1cc>)
 8082130:	4630      	mov	r0, r6
 8082132:	4639      	mov	r1, r7
 8082134:	f00a ff76 	bl	808d024 <__adddf3>
      if(counterIndex > MAX_COUNTER_INDEX){
 8082138:	a34d      	add	r3, pc, #308	; (adr r3, 8082270 <_Z15getEspOzoneDatav+0x1b0>)
 808213a:	e9d3 2300 	ldrd	r2, r3, [r3]
      }
    Serial1.print(getOzoneData);
    Serial.println("Sending the command to get data from esp.");
    while(!Serial1.available() && timeOut == false){
      //delay(1);
      counterIndex++;
 808213e:	4606      	mov	r6, r0
 8082140:	460f      	mov	r7, r1
      if(counterIndex > MAX_COUNTER_INDEX){
 8082142:	f00b fbb1 	bl	808d8a8 <__aeabi_dcmpgt>
 8082146:	2800      	cmp	r0, #0
 8082148:	d0e9      	beq.n	808211e <_Z15getEspOzoneDatav+0x5e>
        if(debugging_enabled){
 808214a:	6823      	ldr	r3, [r4, #0]
 808214c:	b90b      	cbnz	r3, 8082152 <_Z15getEspOzoneDatav+0x92>
          Serial.printf("Unable to get ozone data from ESP, counter index: %1.1f\n\r", counterIndex);
        }
        timeOut = true;
 808214e:	2501      	movs	r5, #1
 8082150:	e7e5      	b.n	808211e <_Z15getEspOzoneDatav+0x5e>
    while(!Serial1.available() && timeOut == false){
      //delay(1);
      counterIndex++;
      if(counterIndex > MAX_COUNTER_INDEX){
        if(debugging_enabled){
          Serial.printf("Unable to get ozone data from ESP, counter index: %1.1f\n\r", counterIndex);
 8082152:	f00a f9e9 	bl	808c528 <_Z16_fetch_usbserialv>
 8082156:	e9cd 6700 	strd	r6, r7, [sp]
 808215a:	4a4d      	ldr	r2, [pc, #308]	; (8082290 <_Z15getEspOzoneDatav+0x1d0>)
 808215c:	4629      	mov	r1, r5
 808215e:	f009 fa71 	bl	808b644 <_ZN5Print11printf_implEbPKcz>
 8082162:	e7f4      	b.n	808214e <_Z15getEspOzoneDatav+0x8e>
        timeOut = true;
      }
    }


    delay(10);
 8082164:	200a      	movs	r0, #10
 8082166:	f009 fce1 	bl	808bb2c <delay>

    recievedData = Serial1.readString();
 808216a:	f00a fb01 	bl	808c770 <_Z22__fetch_global_Serial1v>
 808216e:	4601      	mov	r1, r0
 8082170:	a80e      	add	r0, sp, #56	; 0x38
 8082172:	f009 fb0f 	bl	808b794 <_ZN6Stream10readStringEv>
 8082176:	a90e      	add	r1, sp, #56	; 0x38
 8082178:	a806      	add	r0, sp, #24
 808217a:	f008 ff4c 	bl	808b016 <_ZN6StringaSEOS_>
 808217e:	a80e      	add	r0, sp, #56	; 0x38
 8082180:	f008 feb8 	bl	808aef4 <_ZN6StringD1Ev>
    //recievedData = "0.1,1.2,3.3,4.5,1.234,10/12/18,9:22:18";
    if(debugging_enabled)
 8082184:	6823      	ldr	r3, [r4, #0]
 8082186:	b19b      	cbz	r3, 80821b0 <_Z15getEspOzoneDatav+0xf0>
    {
        Serial.print("RECIEVED DATA FROM ESP: ");
 8082188:	f00a f9ce 	bl	808c528 <_Z16_fetch_usbserialv>
 808218c:	4941      	ldr	r1, [pc, #260]	; (8082294 <_Z15getEspOzoneDatav+0x1d4>)
 808218e:	f009 f911 	bl	808b3b4 <_ZN5Print5printEPKc>
        Serial.println(recievedData);
 8082192:	f00a f9c9 	bl	808c528 <_Z16_fetch_usbserialv>
 8082196:	9906      	ldr	r1, [sp, #24]
 8082198:	f009 f91f 	bl	808b3da <_ZN5Print7printlnEPKc>
        writeLogFile("Recieved data from ESP");
 808219c:	493e      	ldr	r1, [pc, #248]	; (8082298 <_Z15getEspOzoneDatav+0x1d8>)
 808219e:	a80e      	add	r0, sp, #56	; 0x38
 80821a0:	f008 feef 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
 80821a4:	a80e      	add	r0, sp, #56	; 0x38
 80821a6:	f7ff fdb3 	bl	8081d10 <_Z12writeLogFile6String>
 80821aa:	a80e      	add	r0, sp, #56	; 0x38
 80821ac:	f008 fea2 	bl	808aef4 <_ZN6StringD1Ev>
    }
    Serial.print("RECIEVED DATA FROM ESP: ");
 80821b0:	f00a f9ba 	bl	808c528 <_Z16_fetch_usbserialv>
 80821b4:	4937      	ldr	r1, [pc, #220]	; (8082294 <_Z15getEspOzoneDatav+0x1d4>)
 80821b6:	f009 f8fd 	bl	808b3b4 <_ZN5Print5printEPKc>
    Serial.println(recievedData);
 80821ba:	f00a f9b5 	bl	808c528 <_Z16_fetch_usbserialv>
 80821be:	9906      	ldr	r1, [sp, #24]
 80821c0:	f009 f90b 	bl	808b3da <_ZN5Print7printlnEPKc>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80821c4:	4935      	ldr	r1, [pc, #212]	; (808229c <_Z15getEspOzoneDatav+0x1dc>)
 80821c6:	a806      	add	r0, sp, #24
 80821c8:	f009 f830 	bl	808b22c <_ZNK6String6equalsEPKc>
    if (recievedData == "not available")
 80821cc:	4604      	mov	r4, r0
 80821ce:	2800      	cmp	r0, #0
 80821d0:	d144      	bne.n	808225c <_Z15getEspOzoneDatav+0x19c>
    {
        return 1.1;
    }
    String nextData;
 80821d2:	4933      	ldr	r1, [pc, #204]	; (80822a0 <_Z15getEspOzoneDatav+0x1e0>)
 80821d4:	a80a      	add	r0, sp, #40	; 0x28
 80821d6:	f008 fed4 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
                break;
            case 1:
                O3_CellTemp = nextData.toFloat();
                break;
            case 2: 
                O3_CellPress = nextData.toFloat();
 80821da:	4d32      	ldr	r5, [pc, #200]	; (80822a4 <_Z15getEspOzoneDatav+0x1e4>)
                break;
            case 3:
                O3_Voltage = nextData.toFloat();
 80821dc:	4e32      	ldr	r6, [pc, #200]	; (80822a8 <_Z15getEspOzoneDatav+0x1e8>)
    //     nextData = recievedData.substring(0, recievedData.indexOf(','));
    //     recievedData= recievedData.substring(recievedData.indexOf(',')+1, recievedData.length());
    // }
    for (int i = 0; i < 4; i++)
    {
        nextData = recievedData.substring(0, recievedData.indexOf(','));
 80821de:	212c      	movs	r1, #44	; 0x2c
 80821e0:	a806      	add	r0, sp, #24
 80821e2:	f009 f86d 	bl	808b2c0 <_ZNK6String7indexOfEc>
 80821e6:	2200      	movs	r2, #0
 80821e8:	4603      	mov	r3, r0
 80821ea:	a906      	add	r1, sp, #24
 80821ec:	a80e      	add	r0, sp, #56	; 0x38
 80821ee:	f009 f86b 	bl	808b2c8 <_ZNK6String9substringEjj>
 80821f2:	a90e      	add	r1, sp, #56	; 0x38
 80821f4:	a80a      	add	r0, sp, #40	; 0x28
 80821f6:	f008 ff0e 	bl	808b016 <_ZN6StringaSEOS_>
 80821fa:	a80e      	add	r0, sp, #56	; 0x38
 80821fc:	f008 fe7a 	bl	808aef4 <_ZN6StringD1Ev>
        recievedData= recievedData.substring(recievedData.indexOf(',')+1, recievedData.length());
 8082200:	212c      	movs	r1, #44	; 0x2c
 8082202:	a806      	add	r0, sp, #24
 8082204:	f009 f85c 	bl	808b2c0 <_ZNK6String7indexOfEc>
 8082208:	9b08      	ldr	r3, [sp, #32]
 808220a:	1c42      	adds	r2, r0, #1
 808220c:	a906      	add	r1, sp, #24
 808220e:	a80e      	add	r0, sp, #56	; 0x38
 8082210:	f009 f85a 	bl	808b2c8 <_ZNK6String9substringEjj>
 8082214:	a90e      	add	r1, sp, #56	; 0x38
 8082216:	a806      	add	r0, sp, #24
 8082218:	f008 fefd 	bl	808b016 <_ZN6StringaSEOS_>
 808221c:	a80e      	add	r0, sp, #56	; 0x38
 808221e:	f008 fe69 	bl	808aef4 <_ZN6StringD1Ev>
        switch(i)
 8082222:	2c02      	cmp	r4, #2
                break;
            case 1:
                O3_CellTemp = nextData.toFloat();
                break;
            case 2: 
                O3_CellPress = nextData.toFloat();
 8082224:	a80a      	add	r0, sp, #40	; 0x28
    // }
    for (int i = 0; i < 4; i++)
    {
        nextData = recievedData.substring(0, recievedData.indexOf(','));
        recievedData= recievedData.substring(recievedData.indexOf(',')+1, recievedData.length());
        switch(i)
 8082226:	d00c      	beq.n	8082242 <_Z15getEspOzoneDatav+0x182>
 8082228:	2c03      	cmp	r4, #3
 808222a:	d00e      	beq.n	808224a <_Z15getEspOzoneDatav+0x18a>
 808222c:	2c01      	cmp	r4, #1
 808222e:	d003      	beq.n	8082238 <_Z15getEspOzoneDatav+0x178>
        { 
            case 0:
                O3_float = nextData.toFloat();
 8082230:	f009 f877 	bl	808b322 <_ZNK6String7toFloatEv>
 8082234:	4b1d      	ldr	r3, [pc, #116]	; (80822ac <_Z15getEspOzoneDatav+0x1ec>)
 8082236:	e002      	b.n	808223e <_Z15getEspOzoneDatav+0x17e>
                break;
            case 1:
                O3_CellTemp = nextData.toFloat();
 8082238:	f009 f873 	bl	808b322 <_ZNK6String7toFloatEv>
 808223c:	4b1c      	ldr	r3, [pc, #112]	; (80822b0 <_Z15getEspOzoneDatav+0x1f0>)
 808223e:	6018      	str	r0, [r3, #0]
                break;
 8082240:	e006      	b.n	8082250 <_Z15getEspOzoneDatav+0x190>
            case 2: 
                O3_CellPress = nextData.toFloat();
 8082242:	f009 f86e 	bl	808b322 <_ZNK6String7toFloatEv>
 8082246:	6028      	str	r0, [r5, #0]
                break;
 8082248:	e002      	b.n	8082250 <_Z15getEspOzoneDatav+0x190>
            case 3:
                O3_Voltage = nextData.toFloat();
 808224a:	f009 f86a 	bl	808b322 <_ZNK6String7toFloatEv>
 808224e:	6030      	str	r0, [r6, #0]
    // while (recievedData.indexOf(',') > 2)
    // {
    //     nextData = recievedData.substring(0, recievedData.indexOf(','));
    //     recievedData= recievedData.substring(recievedData.indexOf(',')+1, recievedData.length());
    // }
    for (int i = 0; i < 4; i++)
 8082250:	3401      	adds	r4, #1
 8082252:	2c04      	cmp	r4, #4
 8082254:	d1c3      	bne.n	80821de <_Z15getEspOzoneDatav+0x11e>
    Serial.println(recievedData);
    if (recievedData == "not available")
    {
        return 1.1;
    }
    String nextData;
 8082256:	a80a      	add	r0, sp, #40	; 0x28
 8082258:	f008 fe4c 	bl	808aef4 <_ZN6StringD1Ev>
}

float getEspOzoneData(void){
    float ozone_value = 0.0;
    String getOzoneData = "Z&";
    String recievedData = " ";
 808225c:	a806      	add	r0, sp, #24
 808225e:	f008 fe49 	bl	808aef4 <_ZN6StringD1Ev>
    Serial.println("Success!");
}

float getEspOzoneData(void){
    float ozone_value = 0.0;
    String getOzoneData = "Z&";
 8082262:	a802      	add	r0, sp, #8
 8082264:	f008 fe46 	bl	808aef4 <_ZN6StringD1Ev>
    //         //writeLogFile("using string array index 0, not logging");
    //       }
    // }
    // return ozone_value;
    //parseOzoneString(recievedData);
}
 8082268:	4812      	ldr	r0, [pc, #72]	; (80822b4 <_Z15getEspOzoneDatav+0x1f4>)
 808226a:	b013      	add	sp, #76	; 0x4c
 808226c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808226e:	bf00      	nop
 8082270:	00000000 	.word	0x00000000
 8082274:	40cd4c00 	.word	0x40cd4c00
 8082278:	08091a53 	.word	0x08091a53
 808227c:	20000b10 	.word	0x20000b10
 8082280:	08091756 	.word	0x08091756
 8082284:	08091a56 	.word	0x08091a56
 8082288:	08091a72 	.word	0x08091a72
 808228c:	3ff00000 	.word	0x3ff00000
 8082290:	08091a9c 	.word	0x08091a9c
 8082294:	08091ad6 	.word	0x08091ad6
 8082298:	08091aef 	.word	0x08091aef
 808229c:	08091b06 	.word	0x08091b06
 80822a0:	08094100 	.word	0x08094100
 80822a4:	2000078c 	.word	0x2000078c
 80822a8:	200006f8 	.word	0x200006f8
 80822ac:	200007fc 	.word	0x200007fc
 80822b0:	200009bc 	.word	0x200009bc
 80822b4:	3f8ccccd 	.word	0x3f8ccccd

080822b8 <_Z10checkValuePcc>:
            char clearBuffer = Serial4.read();
            //Serial.print(clearBuffer);
        }
      }
}
char checkValue(char *thebuf, char leng)  {
 80822b8:	4602      	mov	r2, r0
 80822ba:	b530      	push	{r4, r5, lr}
    char receiveflag=0;
    int receiveSum=0;
 80822bc:	2300      	movs	r3, #0

    for(int i=0; i<(leng-2); i++) {
 80822be:	1e8d      	subs	r5, r1, #2
 80822c0:	1a14      	subs	r4, r2, r0
 80822c2:	42a5      	cmp	r5, r4
 80822c4:	dd03      	ble.n	80822ce <_Z10checkValuePcc+0x16>
      receiveSum=receiveSum+thebuf[i];
 80822c6:	f812 4b01 	ldrb.w	r4, [r2], #1
 80822ca:	4423      	add	r3, r4
}
char checkValue(char *thebuf, char leng)  {
    char receiveflag=0;
    int receiveSum=0;

    for(int i=0; i<(leng-2); i++) {
 80822cc:	e7f8      	b.n	80822c0 <_Z10checkValuePcc+0x8>
      receiveSum=receiveSum+thebuf[i];
    }
    receiveSum=receiveSum + 0x42;

    if(receiveSum == ((thebuf[leng-2]<<8)+thebuf[leng-1])) { //check the serial data
 80822ce:	4401      	add	r1, r0
      receiveSum = 0;
      receiveflag = 1;
    }
    return receiveflag;
 80822d0:	f811 0c02 	ldrb.w	r0, [r1, #-2]
 80822d4:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 80822d8:	3342      	adds	r3, #66	; 0x42
 80822da:	eb02 2000 	add.w	r0, r2, r0, lsl #8
}
 80822de:	1ac3      	subs	r3, r0, r3
 80822e0:	4258      	negs	r0, r3
 80822e2:	4158      	adcs	r0, r3
 80822e4:	bd30      	pop	{r4, r5, pc}

080822e6 <_Z13transmitPM2_5Pc>:
    int PM01Val;
    PM01Val=((thebuf[3]<<8) + thebuf[4]); //count PM1.0 value of the air detector module
    return PM01Val;
}
//transmit PM Value to PC
float transmitPM2_5(char *thebuf) {
 80822e6:	b508      	push	{r3, lr}
    float PM2_5Val;
    PM2_5Val=((thebuf[5]<<8) + thebuf[6]);//count PM2.5 value of the air detector module
    return PM2_5Val;
 80822e8:	7942      	ldrb	r2, [r0, #5]
 80822ea:	7980      	ldrb	r0, [r0, #6]
 80822ec:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 80822f0:	f00b fc4c 	bl	808db8c <__aeabi_i2f>
}
 80822f4:	bd08      	pop	{r3, pc}
	...

080822f8 <_Z13readPlantowerv>:
    Serial.println(" C (");
    Serial.print(hih.temperature_Raw());
    Serial.println(")");*/
}
//read from plantower pms 5500
void readPlantower(void){
 80822f8:	b510      	push	{r4, lr}
    if(Serial4.find("B")){    //start to read when detect 0x42
 80822fa:	f7fe fd6d 	bl	8080dd8 <_Z22__fetch_global_Serial4v>
 80822fe:	491a      	ldr	r1, [pc, #104]	; (8082368 <_Z13readPlantowerv+0x70>)
 8082300:	f009 fa2f 	bl	808b762 <_ZN6Stream4findEPc>
 8082304:	b310      	cbz	r0, 808234c <_Z13readPlantowerv+0x54>
        //if(debugging_enabled)
          //Serial.println("Found a B when reading plantower");
          Serial4.readBytes(buf,LENG);
 8082306:	4c19      	ldr	r4, [pc, #100]	; (808236c <_Z13readPlantowerv+0x74>)
 8082308:	f7fe fd66 	bl	8080dd8 <_Z22__fetch_global_Serial4v>
 808230c:	221f      	movs	r2, #31
 808230e:	4621      	mov	r1, r4
 8082310:	f009 fa2a 	bl	808b768 <_ZN6Stream9readBytesEPcj>
          if(buf[0] == 0x4d){
 8082314:	7823      	ldrb	r3, [r4, #0]
 8082316:	2b4d      	cmp	r3, #77	; 0x4d
 8082318:	d124      	bne.n	8082364 <_Z13readPlantowerv+0x6c>
              if(checkValue(buf,LENG)){ //All units are ug/m^3
 808231a:	211f      	movs	r1, #31
 808231c:	4620      	mov	r0, r4
 808231e:	f7ff ffcb 	bl	80822b8 <_Z10checkValuePcc>
 8082322:	b1f8      	cbz	r0, 8082364 <_Z13readPlantowerv+0x6c>
                  //Serial.println("Value is good from pm buff");
                  PM01Value=transmitPM01(buf); //count PM1.0 value of the air detector module
 8082324:	78e2      	ldrb	r2, [r4, #3]
 8082326:	7923      	ldrb	r3, [r4, #4]
                  PM2_5Value=transmitPM2_5(buf);//count PM2.5 value of the air detector module
 8082328:	4620      	mov	r0, r4
          //Serial.println("Found a B when reading plantower");
          Serial4.readBytes(buf,LENG);
          if(buf[0] == 0x4d){
              if(checkValue(buf,LENG)){ //All units are ug/m^3
                  //Serial.println("Value is good from pm buff");
                  PM01Value=transmitPM01(buf); //count PM1.0 value of the air detector module
 808232a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 808232e:	4a10      	ldr	r2, [pc, #64]	; (8082370 <_Z13readPlantowerv+0x78>)
 8082330:	6013      	str	r3, [r2, #0]
                  PM2_5Value=transmitPM2_5(buf);//count PM2.5 value of the air detector module
 8082332:	f7ff ffd8 	bl	80822e6 <_Z13transmitPM2_5Pc>
 8082336:	f00b fe43 	bl	808dfc0 <__aeabi_f2iz>
 808233a:	4b0e      	ldr	r3, [pc, #56]	; (8082374 <_Z13readPlantowerv+0x7c>)
                  PM10Value=transmitPM10(buf); //count PM10 value of the air detector module
 808233c:	79e2      	ldrb	r2, [r4, #7]
          Serial4.readBytes(buf,LENG);
          if(buf[0] == 0x4d){
              if(checkValue(buf,LENG)){ //All units are ug/m^3
                  //Serial.println("Value is good from pm buff");
                  PM01Value=transmitPM01(buf); //count PM1.0 value of the air detector module
                  PM2_5Value=transmitPM2_5(buf);//count PM2.5 value of the air detector module
 808233e:	6018      	str	r0, [r3, #0]
                  PM10Value=transmitPM10(buf); //count PM10 value of the air detector module
 8082340:	7a23      	ldrb	r3, [r4, #8]
 8082342:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8082346:	4a0c      	ldr	r2, [pc, #48]	; (8082378 <_Z13readPlantowerv+0x80>)
 8082348:	6013      	str	r3, [r2, #0]
 808234a:	bd10      	pop	{r4, pc}
              }
          }
      }
      else{
        //Serial.println("Clearing serial buffer from PM measurement");
        while(Serial4.available()){
 808234c:	f7fe fd44 	bl	8080dd8 <_Z22__fetch_global_Serial4v>
 8082350:	6803      	ldr	r3, [r0, #0]
 8082352:	691b      	ldr	r3, [r3, #16]
 8082354:	4798      	blx	r3
 8082356:	b128      	cbz	r0, 8082364 <_Z13readPlantowerv+0x6c>
            char clearBuffer = Serial4.read();
 8082358:	f7fe fd3e 	bl	8080dd8 <_Z22__fetch_global_Serial4v>
 808235c:	6803      	ldr	r3, [r0, #0]
 808235e:	695b      	ldr	r3, [r3, #20]
 8082360:	4798      	blx	r3
              }
          }
      }
      else{
        //Serial.println("Clearing serial buffer from PM measurement");
        while(Serial4.available()){
 8082362:	e7f3      	b.n	808234c <_Z13readPlantowerv+0x54>
 8082364:	bd10      	pop	{r4, pc}
 8082366:	bf00      	nop
 8082368:	08093e42 	.word	0x08093e42
 808236c:	200007cc 	.word	0x200007cc
 8082370:	20000b18 	.word	0x20000b18
 8082374:	200009b8 	.word	0x200009b8
 8082378:	20000b34 	.word	0x20000b34
 808237c:	00000000 	.word	0x00000000

08082380 <_Z15outputParticlesv>:



/***start of all plantower functions***/

void outputParticles(){
 8082380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8082384:	b0be      	sub	sp, #248	; 0xf8
    union {
        int16_t myWord;
        unsigned char bytes[2];
    }wordBytes;

    while(!Serial.available()){
 8082386:	f00a f8cf 	bl	808c528 <_Z16_fetch_usbserialv>
 808238a:	6803      	ldr	r3, [r0, #0]
 808238c:	691b      	ldr	r3, [r3, #16]
 808238e:	4798      	blx	r3
 8082390:	2800      	cmp	r0, #0
 8082392:	f040 80f5 	bne.w	8082580 <_Z15outputParticlesv+0x200>
        if (! bme.performReading()) {
 8082396:	4880      	ldr	r0, [pc, #512]	; (8082598 <_Z15outputParticlesv+0x218>)
 8082398:	f006 fdc0 	bl	8088f1c <_ZN15Adafruit_BME68014performReadingEv>
 808239c:	b920      	cbnz	r0, 80823a8 <_Z15outputParticlesv+0x28>
          Serial.println("Failed to read BME680");
 808239e:	f00a f8c3 	bl	808c528 <_Z16_fetch_usbserialv>
 80823a2:	497e      	ldr	r1, [pc, #504]	; (808259c <_Z15outputParticlesv+0x21c>)
 80823a4:	f009 f819 	bl	808b3da <_ZN5Print7printlnEPKc>

        }
        readPlantower();
 80823a8:	f7ff ffa6 	bl	80822f8 <_Z13readPlantowerv>
        readGpsStream();
 80823ac:	f7ff fd00 	bl	8081db0 <_Z13readGpsStreamv>
        CO2_float = t6713.readPPM();
 80823b0:	487b      	ldr	r0, [pc, #492]	; (80825a0 <_Z15outputParticlesv+0x220>)
 80823b2:	f004 ffb9 	bl	8087328 <_ZN13Telaire_T67137readPPMEv>

        CO2_float += CO2_zero;
 80823b6:	4b7b      	ldr	r3, [pc, #492]	; (80825a4 <_Z15outputParticlesv+0x224>)
          Serial.println("Failed to read BME680");

        }
        readPlantower();
        readGpsStream();
        CO2_float = t6713.readPPM();
 80823b8:	4605      	mov	r5, r0

        CO2_float += CO2_zero;
        CO2_float *= CO2_slope;
 80823ba:	6818      	ldr	r0, [r3, #0]
 80823bc:	f00b fbe6 	bl	808db8c <__aeabi_i2f>
 80823c0:	4604      	mov	r4, r0
 80823c2:	4628      	mov	r0, r5
 80823c4:	f00b fbe2 	bl	808db8c <__aeabi_i2f>
 80823c8:	4601      	mov	r1, r0
 80823ca:	4620      	mov	r0, r4
 80823cc:	f00b fb2a 	bl	808da24 <__addsf3>
 80823d0:	4b75      	ldr	r3, [pc, #468]	; (80825a8 <_Z15outputParticlesv+0x228>)
 80823d2:	4c76      	ldr	r4, [pc, #472]	; (80825ac <_Z15outputParticlesv+0x22c>)
 80823d4:	6819      	ldr	r1, [r3, #0]
 80823d6:	f00b fc2d 	bl	808dc34 <__aeabi_fmul>
        //correct for altitude
        float pressure_correction = bme.pressure/100;
 80823da:	4b6f      	ldr	r3, [pc, #444]	; (8082598 <_Z15outputParticlesv+0x218>)
        readPlantower();
        readGpsStream();
        CO2_float = t6713.readPPM();

        CO2_float += CO2_zero;
        CO2_float *= CO2_slope;
 80823dc:	6020      	str	r0, [r4, #0]
        //correct for altitude
        float pressure_correction = bme.pressure/100;
 80823de:	4974      	ldr	r1, [pc, #464]	; (80825b0 <_Z15outputParticlesv+0x230>)
        readPlantower();
        readGpsStream();
        CO2_float = t6713.readPPM();

        CO2_float += CO2_zero;
        CO2_float *= CO2_slope;
 80823e0:	4605      	mov	r5, r0
        //correct for altitude
        float pressure_correction = bme.pressure/100;
 80823e2:	6858      	ldr	r0, [r3, #4]
 80823e4:	f00b fcda 	bl	808dd9c <__aeabi_fdiv>
        if(pressure_correction > LOW_PRESSURE_LIMIT && pressure_correction < HIGH_PRESSURE_LIMIT){
 80823e8:	4971      	ldr	r1, [pc, #452]	; (80825b0 <_Z15outputParticlesv+0x230>)
        CO2_float = t6713.readPPM();

        CO2_float += CO2_zero;
        CO2_float *= CO2_slope;
        //correct for altitude
        float pressure_correction = bme.pressure/100;
 80823ea:	4606      	mov	r6, r0
        if(pressure_correction > LOW_PRESSURE_LIMIT && pressure_correction < HIGH_PRESSURE_LIMIT){
 80823ec:	f00b fdde 	bl	808dfac <__aeabi_fcmpgt>
 80823f0:	46a0      	mov	r8, r4
 80823f2:	b160      	cbz	r0, 808240e <_Z15outputParticlesv+0x8e>
 80823f4:	496f      	ldr	r1, [pc, #444]	; (80825b4 <_Z15outputParticlesv+0x234>)
 80823f6:	4630      	mov	r0, r6
 80823f8:	f00b fdba 	bl	808df70 <__aeabi_fcmplt>
 80823fc:	b138      	cbz	r0, 808240e <_Z15outputParticlesv+0x8e>
            pressure_correction /= SEALEVELPRESSURE_HPA;
            CO2_float *= pressure_correction;
 80823fe:	496e      	ldr	r1, [pc, #440]	; (80825b8 <_Z15outputParticlesv+0x238>)
 8082400:	4630      	mov	r0, r6
 8082402:	f00b fccb 	bl	808dd9c <__aeabi_fdiv>
 8082406:	4629      	mov	r1, r5
 8082408:	f00b fc14 	bl	808dc34 <__aeabi_fmul>
 808240c:	6020      	str	r0, [r4, #0]
        }
        pm_25_correction_factor = PM_25_CONSTANT_A + (PM_25_CONSTANT_B*(readHumidity()/100))/(1 - (readHumidity()/100));
 808240e:	f7ff f96d 	bl	80816ec <_Z12readHumidityv>
 8082412:	4604      	mov	r4, r0
 8082414:	f7ff f96a 	bl	80816ec <_Z12readHumidityv>
 8082418:	4965      	ldr	r1, [pc, #404]	; (80825b0 <_Z15outputParticlesv+0x230>)
 808241a:	4606      	mov	r6, r0
 808241c:	4620      	mov	r0, r4
 808241e:	f00b fcbd 	bl	808dd9c <__aeabi_fdiv>
 8082422:	f00a ff5d 	bl	808d2e0 <__aeabi_f2d>
 8082426:	a358      	add	r3, pc, #352	; (adr r3, 8082588 <_Z15outputParticlesv+0x208>)
 8082428:	e9d3 2300 	ldrd	r2, r3, [r3]
 808242c:	f00a ffac 	bl	808d388 <__aeabi_dmul>
 8082430:	4604      	mov	r4, r0
 8082432:	460d      	mov	r5, r1
 8082434:	4630      	mov	r0, r6
 8082436:	495e      	ldr	r1, [pc, #376]	; (80825b0 <_Z15outputParticlesv+0x230>)
 8082438:	f00b fcb0 	bl	808dd9c <__aeabi_fdiv>
 808243c:	4601      	mov	r1, r0
 808243e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8082442:	f00b faed 	bl	808da20 <__aeabi_fsub>
 8082446:	f00a ff4b 	bl	808d2e0 <__aeabi_f2d>
 808244a:	4602      	mov	r2, r0
 808244c:	460b      	mov	r3, r1
 808244e:	4620      	mov	r0, r4
 8082450:	4629      	mov	r1, r5
 8082452:	f00b f8c3 	bl	808d5dc <__aeabi_ddiv>
 8082456:	a34e      	add	r3, pc, #312	; (adr r3, 8082590 <_Z15outputParticlesv+0x210>)
 8082458:	e9d3 2300 	ldrd	r2, r3, [r3]
 808245c:	f00a fde2 	bl	808d024 <__adddf3>
 8082460:	f00b fa8a 	bl	808d978 <__aeabi_d2f>
 8082464:	4604      	mov	r4, r0
 8082466:	4b55      	ldr	r3, [pc, #340]	; (80825bc <_Z15outputParticlesv+0x23c>)
        corrected_PM_25 = PM2_5Value * pm_25_correction_factor;
 8082468:	4e55      	ldr	r6, [pc, #340]	; (80825c0 <_Z15outputParticlesv+0x240>)
        float pressure_correction = bme.pressure/100;
        if(pressure_correction > LOW_PRESSURE_LIMIT && pressure_correction < HIGH_PRESSURE_LIMIT){
            pressure_correction /= SEALEVELPRESSURE_HPA;
            CO2_float *= pressure_correction;
        }
        pm_25_correction_factor = PM_25_CONSTANT_A + (PM_25_CONSTANT_B*(readHumidity()/100))/(1 - (readHumidity()/100));
 808246a:	6018      	str	r0, [r3, #0]
        corrected_PM_25 = PM2_5Value * pm_25_correction_factor;
 808246c:	4b55      	ldr	r3, [pc, #340]	; (80825c4 <_Z15outputParticlesv+0x244>)
            wordBytes.myWord = DEVICE_id;
            ble_output_array[1 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
            ble_output_array[2 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];

            //byte 3 - Measurement number
            ble_output_array[3 + i*(BLE_PAYLOAD_SIZE)] = sample_counter;
 808246e:	f8df 915c 	ldr.w	r9, [pc, #348]	; 80825cc <_Z15outputParticlesv+0x24c>
        if(pressure_correction > LOW_PRESSURE_LIMIT && pressure_correction < HIGH_PRESSURE_LIMIT){
            pressure_correction /= SEALEVELPRESSURE_HPA;
            CO2_float *= pressure_correction;
        }
        pm_25_correction_factor = PM_25_CONSTANT_A + (PM_25_CONSTANT_B*(readHumidity()/100))/(1 - (readHumidity()/100));
        corrected_PM_25 = PM2_5Value * pm_25_correction_factor;
 8082472:	6818      	ldr	r0, [r3, #0]
 8082474:	f00b fb8a 	bl	808db8c <__aeabi_i2f>
 8082478:	4621      	mov	r1, r4
 808247a:	f00b fbdb 	bl	808dc34 <__aeabi_fmul>
 808247e:	f10d 0405 	add.w	r4, sp, #5
 8082482:	6030      	str	r0, [r6, #0]

        byte ble_output_array[NUMBER_OF_SPECIES*BLE_PAYLOAD_SIZE];     //19 bytes per data line and 12 species to output


        for(int i=0; i<5; i++){
 8082484:	2500      	movs	r5, #0

            //************Fill the ble output array**********************//
            //Serial.printf("making array[%d]\n", i);
            //byte 0 - version
            ble_output_array[0 + i*(BLE_PAYLOAD_SIZE)] = 1;
 8082486:	2301      	movs	r3, #1
 8082488:	f804 3c01 	strb.w	r3, [r4, #-1]

            //bytes 1,2 - Device ID
            //DEVICE_id = 555;
            wordBytes.myWord = DEVICE_id;
 808248c:	4b4e      	ldr	r3, [pc, #312]	; (80825c8 <_Z15outputParticlesv+0x248>)
 808248e:	4f4f      	ldr	r7, [pc, #316]	; (80825cc <_Z15outputParticlesv+0x24c>)
 8082490:	681b      	ldr	r3, [r3, #0]
            ble_output_array[1 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8082492:	7023      	strb	r3, [r4, #0]
            ble_output_array[2 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8082494:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8082498:	7063      	strb	r3, [r4, #1]

            //byte 3 - Measurement number
            ble_output_array[3 + i*(BLE_PAYLOAD_SIZE)] = sample_counter;
 808249a:	f8d9 3000 	ldr.w	r3, [r9]
 808249e:	70a3      	strb	r3, [r4, #2]
            3-PM10Value


            */

            if(i == 0){
 80824a0:	b92d      	cbnz	r5, 80824ae <_Z15outputParticlesv+0x12e>
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = BATTERY_PACKET_CONSTANT;
 80824a2:	2378      	movs	r3, #120	; 0x78
 80824a4:	70e3      	strb	r3, [r4, #3]
                floatBytes.myFloat = fuel.getSoC();
 80824a6:	484a      	ldr	r0, [pc, #296]	; (80825d0 <_Z15outputParticlesv+0x250>)
 80824a8:	f009 fbb4 	bl	808bc14 <_ZN9FuelGauge6getSoCEv>
 80824ac:	e018      	b.n	80824e0 <_Z15outputParticlesv+0x160>
            }else if(i == 1){
 80824ae:	2d01      	cmp	r5, #1
 80824b0:	d103      	bne.n	80824ba <_Z15outputParticlesv+0x13a>
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM1_PACKET_CONSTANT;
 80824b2:	2372      	movs	r3, #114	; 0x72
 80824b4:	70e3      	strb	r3, [r4, #3]
                floatBytes.myFloat = PM01Value;
 80824b6:	4b47      	ldr	r3, [pc, #284]	; (80825d4 <_Z15outputParticlesv+0x254>)
 80824b8:	e00a      	b.n	80824d0 <_Z15outputParticlesv+0x150>
            }else if(i == 2){
 80824ba:	2d02      	cmp	r5, #2
 80824bc:	d103      	bne.n	80824c6 <_Z15outputParticlesv+0x146>
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM2PT5_PACKET_CONSTANT;
 80824be:	2352      	movs	r3, #82	; 0x52
 80824c0:	70e3      	strb	r3, [r4, #3]
                floatBytes.myFloat = corrected_PM_25;
 80824c2:	6830      	ldr	r0, [r6, #0]
 80824c4:	e00c      	b.n	80824e0 <_Z15outputParticlesv+0x160>
            }else if(i == 3){
 80824c6:	2d03      	cmp	r5, #3
 80824c8:	d106      	bne.n	80824d8 <_Z15outputParticlesv+0x158>
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM10_PACKET_CONSTANT;
 80824ca:	2371      	movs	r3, #113	; 0x71
 80824cc:	70e3      	strb	r3, [r4, #3]
                floatBytes.myFloat = PM10Value;
 80824ce:	4b42      	ldr	r3, [pc, #264]	; (80825d8 <_Z15outputParticlesv+0x258>)
 80824d0:	6818      	ldr	r0, [r3, #0]
 80824d2:	f00b fb5b 	bl	808db8c <__aeabi_i2f>
 80824d6:	e003      	b.n	80824e0 <_Z15outputParticlesv+0x160>
            }else if(i == 4){
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = CARBON_DIOXIDE_PACKET_CONSTANT;
 80824d8:	2343      	movs	r3, #67	; 0x43
                floatBytes.myFloat = CO2_float;
 80824da:	f8d8 0000 	ldr.w	r0, [r8]
                floatBytes.myFloat = corrected_PM_25;
            }else if(i == 3){
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM10_PACKET_CONSTANT;
                floatBytes.myFloat = PM10Value;
            }else if(i == 4){
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = CARBON_DIOXIDE_PACKET_CONSTANT;
 80824de:	70e3      	strb	r3, [r4, #3]
                floatBytes.myFloat = CO2_float;
            }

            //bytes 5,6,7,8 - Measurement Value
            ble_output_array[5 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[0];
            ble_output_array[6 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
 80824e0:	f3c0 2307 	ubfx	r3, r0, #8, #8
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = CARBON_DIOXIDE_PACKET_CONSTANT;
                floatBytes.myFloat = CO2_float;
            }

            //bytes 5,6,7,8 - Measurement Value
            ble_output_array[5 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[0];
 80824e4:	7120      	strb	r0, [r4, #4]
            ble_output_array[6 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
 80824e6:	7163      	strb	r3, [r4, #5]
            ble_output_array[7 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[2];
 80824e8:	f3c0 4307 	ubfx	r3, r0, #16, #8
            ble_output_array[8 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[3];
 80824ec:	f3c0 6007 	ubfx	r0, r0, #24, #8
            }

            //bytes 5,6,7,8 - Measurement Value
            ble_output_array[5 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[0];
            ble_output_array[6 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
            ble_output_array[7 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[2];
 80824f0:	71a3      	strb	r3, [r4, #6]
            ble_output_array[8 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[3];
 80824f2:	71e0      	strb	r0, [r4, #7]


            //bytes 9-12 - latitude
            wordBytes.myWord = gps.get_latitudeWhole();
 80824f4:	4839      	ldr	r0, [pc, #228]	; (80825dc <_Z15outputParticlesv+0x25c>)
 80824f6:	f004 fe8c 	bl	8087212 <_ZN3GPS17get_latitudeWholeEv>
            ble_output_array[9 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 80824fa:	7220      	strb	r0, [r4, #8]
            ble_output_array[10 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 80824fc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8082500:	7260      	strb	r0, [r4, #9]

            wordBytes.myWord = gps.get_latitudeFrac();
 8082502:	4836      	ldr	r0, [pc, #216]	; (80825dc <_Z15outputParticlesv+0x25c>)
 8082504:	f004 fe88 	bl	8087218 <_ZN3GPS16get_latitudeFracEv>
            ble_output_array[11 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8082508:	72a0      	strb	r0, [r4, #10]
            ble_output_array[12 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 808250a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 808250e:	72e0      	strb	r0, [r4, #11]

            //bytes 14-17 - longitude
            wordBytes.myWord = gps.get_longitudeWhole();
 8082510:	4832      	ldr	r0, [pc, #200]	; (80825dc <_Z15outputParticlesv+0x25c>)
 8082512:	f004 fe84 	bl	808721e <_ZN3GPS18get_longitudeWholeEv>
            ble_output_array[13 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8082516:	7320      	strb	r0, [r4, #12]
            ble_output_array[14 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8082518:	f3c0 2007 	ubfx	r0, r0, #8, #8
 808251c:	7360      	strb	r0, [r4, #13]

            wordBytes.myWord = gps.get_longitudeFrac();
 808251e:	482f      	ldr	r0, [pc, #188]	; (80825dc <_Z15outputParticlesv+0x25c>)
 8082520:	f004 fe80 	bl	8087224 <_ZN3GPS17get_longitudeFracEv>
            ble_output_array[15 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8082524:	73a0      	strb	r0, [r4, #14]
            ble_output_array[16 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8082526:	f3c0 2007 	ubfx	r0, r0, #8, #8
 808252a:	73e0      	strb	r0, [r4, #15]


            //byte 18 - east west and north south indicator
            //  LSB 0 = East, LSB 1 = West
            //  MSB 0 = South, MSB 1 = North
            int northSouth = gps.get_nsIndicator();
 808252c:	482b      	ldr	r0, [pc, #172]	; (80825dc <_Z15outputParticlesv+0x25c>)
 808252e:	f004 fe7c 	bl	808722a <_ZN3GPS15get_nsIndicatorEv>
 8082532:	4682      	mov	sl, r0
            int eastWest = gps.get_ewIndicator();
 8082534:	4829      	ldr	r0, [pc, #164]	; (80825dc <_Z15outputParticlesv+0x25c>)
 8082536:	f004 fe7b 	bl	8087230 <_ZN3GPS15get_ewIndicatorEv>

            ble_output_array[17 + i*(BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
 808253a:	ea4a 0000 	orr.w	r0, sl, r0
 808253e:	7420      	strb	r0, [r4, #16]
            ble_output_array[18 + i*(BLE_PAYLOAD_SIZE)] = gps.get_horizontalDillution();
 8082540:	4826      	ldr	r0, [pc, #152]	; (80825dc <_Z15outputParticlesv+0x25c>)
 8082542:	f004 fe61 	bl	8087208 <_ZN3GPS23get_horizontalDillutionEv>
        corrected_PM_25 = PM2_5Value * pm_25_correction_factor;

        byte ble_output_array[NUMBER_OF_SPECIES*BLE_PAYLOAD_SIZE];     //19 bytes per data line and 12 species to output


        for(int i=0; i<5; i++){
 8082546:	3501      	adds	r5, #1
            int eastWest = gps.get_ewIndicator();

            ble_output_array[17 + i*(BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
            ble_output_array[18 + i*(BLE_PAYLOAD_SIZE)] = gps.get_horizontalDillution();

            ble_output_array[19 + i*(BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species
 8082548:	2323      	movs	r3, #35	; 0x23
        corrected_PM_25 = PM2_5Value * pm_25_correction_factor;

        byte ble_output_array[NUMBER_OF_SPECIES*BLE_PAYLOAD_SIZE];     //19 bytes per data line and 12 species to output


        for(int i=0; i<5; i++){
 808254a:	2d05      	cmp	r5, #5
            //  MSB 0 = South, MSB 1 = North
            int northSouth = gps.get_nsIndicator();
            int eastWest = gps.get_ewIndicator();

            ble_output_array[17 + i*(BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
            ble_output_array[18 + i*(BLE_PAYLOAD_SIZE)] = gps.get_horizontalDillution();
 808254c:	7460      	strb	r0, [r4, #17]

            ble_output_array[19 + i*(BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species
 808254e:	74a3      	strb	r3, [r4, #18]
 8082550:	f104 0416 	add.w	r4, r4, #22
        corrected_PM_25 = PM2_5Value * pm_25_correction_factor;

        byte ble_output_array[NUMBER_OF_SPECIES*BLE_PAYLOAD_SIZE];     //19 bytes per data line and 12 species to output


        for(int i=0; i<5; i++){
 8082554:	d197      	bne.n	8082486 <_Z15outputParticlesv+0x106>
            ble_output_array[19 + i*(BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species

        }

        //send start delimeter to ESP
        Serial1.print("$");
 8082556:	f00a f90b 	bl	808c770 <_Z22__fetch_global_Serial1v>
 808255a:	4921      	ldr	r1, [pc, #132]	; (80825e0 <_Z15outputParticlesv+0x260>)
 808255c:	f008 ff2a 	bl	808b3b4 <_ZN5Print5printEPKc>
        //send the packaged data with # delimeters in between packets
        Serial1.write(ble_output_array, 5*BLE_PAYLOAD_SIZE);
 8082560:	f00a f906 	bl	808c770 <_Z22__fetch_global_Serial1v>
 8082564:	6803      	ldr	r3, [r0, #0]
 8082566:	226e      	movs	r2, #110	; 0x6e
 8082568:	68db      	ldr	r3, [r3, #12]
 808256a:	a901      	add	r1, sp, #4
 808256c:	4798      	blx	r3

        //send ending delimeter
        Serial1.print("&");
 808256e:	f00a f8ff 	bl	808c770 <_Z22__fetch_global_Serial1v>
 8082572:	491c      	ldr	r1, [pc, #112]	; (80825e4 <_Z15outputParticlesv+0x264>)
 8082574:	f008 ff1e 	bl	808b3b4 <_ZN5Print5printEPKc>
        sample_counter += 1;
 8082578:	683b      	ldr	r3, [r7, #0]
 808257a:	3301      	adds	r3, #1
 808257c:	603b      	str	r3, [r7, #0]
    union {
        int16_t myWord;
        unsigned char bytes[2];
    }wordBytes;

    while(!Serial.available()){
 808257e:	e702      	b.n	8082386 <_Z15outputParticlesv+0x6>

        //send ending delimeter
        Serial1.print("&");
        sample_counter += 1;
    }
}
 8082580:	b03e      	add	sp, #248	; 0xf8
 8082582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8082586:	bf00      	nop
 8082588:	b4395810 	.word	0xb4395810
 808258c:	3fbe76c8 	.word	0x3fbe76c8
 8082590:	70a3d70a 	.word	0x70a3d70a
 8082594:	3ff30a3d 	.word	0x3ff30a3d
 8082598:	20000700 	.word	0x20000700
 808259c:	08091b14 	.word	0x08091b14
 80825a0:	20000b90 	.word	0x20000b90
 80825a4:	20000234 	.word	0x20000234
 80825a8:	20000a50 	.word	0x20000a50
 80825ac:	20000228 	.word	0x20000228
 80825b0:	42c80000 	.word	0x42c80000
 80825b4:	44bb8000 	.word	0x44bb8000
 80825b8:	447d5000 	.word	0x447d5000
 80825bc:	200008f0 	.word	0x200008f0
 80825c0:	20000930 	.word	0x20000930
 80825c4:	200009b8 	.word	0x200009b8
 80825c8:	20000088 	.word	0x20000088
 80825cc:	2000077c 	.word	0x2000077c
 80825d0:	20000848 	.word	0x20000848
 80825d4:	20000b18 	.word	0x20000b18
 80825d8:	20000b34 	.word	0x20000b34
 80825dc:	200008f8 	.word	0x200008f8
 80825e0:	08091b2a 	.word	0x08091b2a
 80825e4:	080919be 	.word	0x080919be

080825e8 <_Z16goToSleepBatteryv>:
    enableLowPowerGPS();
    System.sleep(D4, FALLING, sleepInterval * 2);     //every 2 minutes wake up and check if battery voltage is too low
    System.reset();
}

void goToSleepBattery(void){
 80825e8:	b510      	push	{r4, lr}
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 80825ea:	4c2c      	ldr	r4, [pc, #176]	; (808269c <_Z16goToSleepBatteryv+0xb4>)
 80825ec:	2101      	movs	r1, #1
 80825ee:	8820      	ldrh	r0, [r4, #0]
 80825f0:	f00a fae3 	bl	808cbba <digitalWrite>
    delay(250);                   // waits for a second
 80825f4:	20fa      	movs	r0, #250	; 0xfa
 80825f6:	f009 fa99 	bl	808bb2c <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 80825fa:	2100      	movs	r1, #0
 80825fc:	8820      	ldrh	r0, [r4, #0]
 80825fe:	f00a fadc 	bl	808cbba <digitalWrite>
    delay(250);                   // waits for a second
 8082602:	20fa      	movs	r0, #250	; 0xfa
 8082604:	f009 fa92 	bl	808bb2c <delay>
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 8082608:	2101      	movs	r1, #1
 808260a:	8820      	ldrh	r0, [r4, #0]
 808260c:	f00a fad5 	bl	808cbba <digitalWrite>
    delay(250);                   // waits for a second
 8082610:	20fa      	movs	r0, #250	; 0xfa
 8082612:	f009 fa8b 	bl	808bb2c <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 8082616:	2100      	movs	r1, #0
 8082618:	8820      	ldrh	r0, [r4, #0]
 808261a:	f00a face 	bl	808cbba <digitalWrite>
    delay(250);                   // waits for a second
 808261e:	20fa      	movs	r0, #250	; 0xfa
 8082620:	f009 fa84 	bl	808bb2c <delay>
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 8082624:	2101      	movs	r1, #1
 8082626:	8820      	ldrh	r0, [r4, #0]
 8082628:	f00a fac7 	bl	808cbba <digitalWrite>
    delay(250);                   // waits for a second
 808262c:	20fa      	movs	r0, #250	; 0xfa
 808262e:	f009 fa7d 	bl	808bb2c <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 8082632:	2100      	movs	r1, #0
 8082634:	8820      	ldrh	r0, [r4, #0]
 8082636:	f00a fac0 	bl	808cbba <digitalWrite>
    delay(250);                   // waits for a second
 808263a:	20fa      	movs	r0, #250	; 0xfa
 808263c:	f009 fa76 	bl	808bb2c <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 8082640:	2101      	movs	r1, #1
 8082642:	8820      	ldrh	r0, [r4, #0]
 8082644:	f00a fab9 	bl	808cbba <digitalWrite>
    delay(250);                   // waits for a second
 8082648:	20fa      	movs	r0, #250	; 0xfa
 808264a:	f009 fa6f 	bl	808bb2c <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 808264e:	2100      	movs	r1, #0
 8082650:	8820      	ldrh	r0, [r4, #0]
 8082652:	f00a fab2 	bl	808cbba <digitalWrite>
    delay(250);                   // waits for a second
 8082656:	20fa      	movs	r0, #250	; 0xfa
 8082658:	f009 fa68 	bl	808bb2c <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 808265c:	2101      	movs	r1, #1
 808265e:	8820      	ldrh	r0, [r4, #0]
 8082660:	f00a faab 	bl	808cbba <digitalWrite>
    delay(250);                   // waits for a second
 8082664:	20fa      	movs	r0, #250	; 0xfa
 8082666:	f009 fa61 	bl	808bb2c <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 808266a:	2100      	movs	r1, #0
 808266c:	8820      	ldrh	r0, [r4, #0]
 808266e:	f00a faa4 	bl	808cbba <digitalWrite>
    delay(250);                   // waits for a second
 8082672:	20fa      	movs	r0, #250	; 0xfa
 8082674:	f009 fa5a 	bl	808bb2c <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 8082678:	2101      	movs	r1, #1
 808267a:	8820      	ldrh	r0, [r4, #0]
 808267c:	f00a fa9d 	bl	808cbba <digitalWrite>
    delay(250);                   // waits for a second
 8082680:	20fa      	movs	r0, #250	; 0xfa
 8082682:	f009 fa53 	bl	808bb2c <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 8082686:	8820      	ldrh	r0, [r4, #0]
 8082688:	2100      	movs	r1, #0
 808268a:	f00a fa96 	bl	808cbba <digitalWrite>
    digitalWrite(blower_en, HIGH);
    digitalWrite(co2_en, HIGH);
    digitalWrite(fiveVolt_en, HIGH);*/
    //System.sleep(SLEEP_MODE_DEEP, 600);

}
 808268e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
    delay(250);                   // waits for a second
    digitalWrite(power_led_en, LOW);    // Sets the LED off

    //Serial.println("Turning off batfet");
    writeRegister(7, 0b01101011);   //turn off batfet
 8082692:	216b      	movs	r1, #107	; 0x6b
 8082694:	2007      	movs	r0, #7
 8082696:	f7fe bc3d 	b.w	8080f14 <_Z13writeRegisterhh>
 808269a:	bf00      	nop
 808269c:	200000a0 	.word	0x200000a0

080826a0 <_Z8resetESPv>:
    digitalWrite(fiveVolt_en, HIGH);*/
    //System.sleep(SLEEP_MODE_DEEP, 600);

}

void resetESP(void){
 80826a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  digitalWrite(esp_wroom_en, LOW);
 80826a2:	4f17      	ldr	r7, [pc, #92]	; (8082700 <_Z8resetESPv+0x60>)
  digitalWrite(plantower_en, LOW);
 80826a4:	4e17      	ldr	r6, [pc, #92]	; (8082704 <_Z8resetESPv+0x64>)
    //System.sleep(SLEEP_MODE_DEEP, 600);

}

void resetESP(void){
  digitalWrite(esp_wroom_en, LOW);
 80826a6:	8838      	ldrh	r0, [r7, #0]
  digitalWrite(plantower_en, LOW);
  digitalWrite(blower_en, LOW);
 80826a8:	4d17      	ldr	r5, [pc, #92]	; (8082708 <_Z8resetESPv+0x68>)
    //System.sleep(SLEEP_MODE_DEEP, 600);

}

void resetESP(void){
  digitalWrite(esp_wroom_en, LOW);
 80826aa:	2100      	movs	r1, #0
 80826ac:	f00a fa85 	bl	808cbba <digitalWrite>
  digitalWrite(plantower_en, LOW);
  digitalWrite(blower_en, LOW);
  digitalWrite(co2_en, LOW);
 80826b0:	4c16      	ldr	r4, [pc, #88]	; (808270c <_Z8resetESPv+0x6c>)

}

void resetESP(void){
  digitalWrite(esp_wroom_en, LOW);
  digitalWrite(plantower_en, LOW);
 80826b2:	8830      	ldrh	r0, [r6, #0]
 80826b4:	2100      	movs	r1, #0
 80826b6:	f00a fa80 	bl	808cbba <digitalWrite>
  digitalWrite(blower_en, LOW);
 80826ba:	8828      	ldrh	r0, [r5, #0]
 80826bc:	2100      	movs	r1, #0
 80826be:	f00a fa7c 	bl	808cbba <digitalWrite>
  digitalWrite(co2_en, LOW);
 80826c2:	2100      	movs	r1, #0
 80826c4:	8820      	ldrh	r0, [r4, #0]
 80826c6:	f00a fa78 	bl	808cbba <digitalWrite>
  delay(1000);
 80826ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80826ce:	f009 fa2d 	bl	808bb2c <delay>
  digitalWrite(esp_wroom_en, HIGH);
 80826d2:	8838      	ldrh	r0, [r7, #0]
 80826d4:	2101      	movs	r1, #1
 80826d6:	f00a fa70 	bl	808cbba <digitalWrite>
  digitalWrite(plantower_en, HIGH);
 80826da:	8830      	ldrh	r0, [r6, #0]
 80826dc:	2101      	movs	r1, #1
 80826de:	f00a fa6c 	bl	808cbba <digitalWrite>
  digitalWrite(blower_en, HIGH);
 80826e2:	8828      	ldrh	r0, [r5, #0]
 80826e4:	2101      	movs	r1, #1
 80826e6:	f00a fa68 	bl	808cbba <digitalWrite>
  digitalWrite(co2_en, HIGH);
 80826ea:	8820      	ldrh	r0, [r4, #0]
 80826ec:	2101      	movs	r1, #1
 80826ee:	f00a fa64 	bl	808cbba <digitalWrite>
  delay(1000);
}
 80826f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  delay(1000);
  digitalWrite(esp_wroom_en, HIGH);
  digitalWrite(plantower_en, HIGH);
  digitalWrite(blower_en, HIGH);
  digitalWrite(co2_en, HIGH);
  delay(1000);
 80826f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80826fa:	f009 ba17 	b.w	808bb2c <delay>
 80826fe:	bf00      	nop
 8082700:	200000a8 	.word	0x200000a8
 8082704:	200000d4 	.word	0x200000d4
 8082708:	200000d0 	.word	0x200000d0
 808270c:	200000b0 	.word	0x200000b0

08082710 <setup>:
    file1.close();

}

void setup()
{
 8082710:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8082714:	b0a9      	sub	sp, #164	; 0xa4
    Serial.println("Starting the initialization");
 8082716:	f009 ff07 	bl	808c528 <_Z16_fetch_usbserialv>
 808271a:	49b3      	ldr	r1, [pc, #716]	; (80829e8 <setup+0x2d8>)
 808271c:	f008 fe5d 	bl	808b3da <_ZN5Print7printlnEPKc>
    status_word.status_int  = 0;
    status_word.status_int |= (APP_VERSION << 12) & 0xFF00;
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
 8082720:	4bb2      	ldr	r3, [pc, #712]	; (80829ec <setup+0x2dc>)
 8082722:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
    //status_word.status_int |= 0x6500;

    String init_log; //intialization error log
 8082726:	49b2      	ldr	r1, [pc, #712]	; (80829f0 <setup+0x2e0>)


    setADCSampleTime(ADC_SampleTime_480Cycles);
    //setup i/o
    pinMode(lmp91000_1_en, OUTPUT);
 8082728:	4cb2      	ldr	r4, [pc, #712]	; (80829f4 <setup+0x2e4>)
    status_word.status_int  = 0;
    status_word.status_int |= (APP_VERSION << 12) & 0xFF00;
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
    //status_word.status_int |= 0x6500;

    String init_log; //intialization error log
 808272a:	a801      	add	r0, sp, #4
void setup()
{
    Serial.println("Starting the initialization");
    status_word.status_int  = 0;
    status_word.status_int |= (APP_VERSION << 12) & 0xFF00;
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
 808272c:	801a      	strh	r2, [r3, #0]


    setADCSampleTime(ADC_SampleTime_480Cycles);
    //setup i/o
    pinMode(lmp91000_1_en, OUTPUT);
    pinMode(lmp91000_2_en, OUTPUT);
 808272e:	4fb2      	ldr	r7, [pc, #712]	; (80829f8 <setup+0x2e8>)
    status_word.status_int  = 0;
    status_word.status_int |= (APP_VERSION << 12) & 0xFF00;
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
    //status_word.status_int |= 0x6500;

    String init_log; //intialization error log
 8082730:	f008 fc27 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>


    setADCSampleTime(ADC_SampleTime_480Cycles);
 8082734:	2007      	movs	r0, #7
 8082736:	f009 f9f7 	bl	808bb28 <setADCSampleTime>
    //setup i/o
    pinMode(lmp91000_1_en, OUTPUT);
    pinMode(lmp91000_2_en, OUTPUT);
    //pinMode(fiveVolt_en, OUTPUT);
    pinMode(plantower_en, OUTPUT);
 808273a:	f8df 9314 	ldr.w	r9, [pc, #788]	; 8082a50 <setup+0x340>
    String init_log; //intialization error log


    setADCSampleTime(ADC_SampleTime_480Cycles);
    //setup i/o
    pinMode(lmp91000_1_en, OUTPUT);
 808273e:	2101      	movs	r1, #1
 8082740:	8820      	ldrh	r0, [r4, #0]
 8082742:	f00a fa29 	bl	808cb98 <pinMode>
    pinMode(lmp91000_2_en, OUTPUT);
    //pinMode(fiveVolt_en, OUTPUT);
    pinMode(plantower_en, OUTPUT);
    //pinMode(power_led_en, OUTPUT);
    pinMode(esp_wroom_en, OUTPUT);
 8082746:	f8df 830c 	ldr.w	r8, [pc, #780]	; 8082a54 <setup+0x344>


    setADCSampleTime(ADC_SampleTime_480Cycles);
    //setup i/o
    pinMode(lmp91000_1_en, OUTPUT);
    pinMode(lmp91000_2_en, OUTPUT);
 808274a:	2101      	movs	r1, #1
 808274c:	8838      	ldrh	r0, [r7, #0]
 808274e:	f00a fa23 	bl	808cb98 <pinMode>
    //pinMode(fiveVolt_en, OUTPUT);
    pinMode(plantower_en, OUTPUT);
    //pinMode(power_led_en, OUTPUT);
    pinMode(esp_wroom_en, OUTPUT);
    pinMode(blower_en, OUTPUT);
 8082752:	4eaa      	ldr	r6, [pc, #680]	; (80829fc <setup+0x2ec>)
    setADCSampleTime(ADC_SampleTime_480Cycles);
    //setup i/o
    pinMode(lmp91000_1_en, OUTPUT);
    pinMode(lmp91000_2_en, OUTPUT);
    //pinMode(fiveVolt_en, OUTPUT);
    pinMode(plantower_en, OUTPUT);
 8082754:	2101      	movs	r1, #1
 8082756:	f8b9 0000 	ldrh.w	r0, [r9]
 808275a:	f00a fa1d 	bl	808cb98 <pinMode>
    //pinMode(power_led_en, OUTPUT);
    pinMode(esp_wroom_en, OUTPUT);
 808275e:	2101      	movs	r1, #1
 8082760:	f8b8 0000 	ldrh.w	r0, [r8]
 8082764:	f00a fa18 	bl	808cb98 <pinMode>
    pinMode(blower_en, OUTPUT);
    pinMode(D4, INPUT);
    pinMode(co2_en, OUTPUT);
 8082768:	4da5      	ldr	r5, [pc, #660]	; (8082a00 <setup+0x2f0>)
    pinMode(lmp91000_2_en, OUTPUT);
    //pinMode(fiveVolt_en, OUTPUT);
    pinMode(plantower_en, OUTPUT);
    //pinMode(power_led_en, OUTPUT);
    pinMode(esp_wroom_en, OUTPUT);
    pinMode(blower_en, OUTPUT);
 808276a:	8830      	ldrh	r0, [r6, #0]
 808276c:	2101      	movs	r1, #1
 808276e:	f00a fa13 	bl	808cb98 <pinMode>
    pinMode(D4, INPUT);
 8082772:	2100      	movs	r1, #0
 8082774:	2004      	movs	r0, #4
 8082776:	f00a fa0f 	bl	808cb98 <pinMode>
    pinMode(co2_en, OUTPUT);
 808277a:	2101      	movs	r1, #1
 808277c:	8828      	ldrh	r0, [r5, #0]
 808277e:	f00a fa0b 	bl	808cb98 <pinMode>

    //read all stored variables (calibration parameters)
    readStoredVars();
 8082782:	f7fe fcff 	bl	8081184 <_Z14readStoredVarsv>

    pmic.begin();
 8082786:	489f      	ldr	r0, [pc, #636]	; (8082a04 <setup+0x2f4>)
 8082788:	f008 f8be 	bl	808a908 <_ZN4PMIC5beginEv>
    pmic.setChargeVoltage(4208);      //  Set Li-Po charge termination voltage to 4.21V,
 808278c:	f241 0170 	movw	r1, #4208	; 0x1070
 8082790:	489c      	ldr	r0, [pc, #624]	; (8082a04 <setup+0x2f4>)
 8082792:	f008 f9e9 	bl	808ab68 <_ZN4PMIC16setChargeVoltageEt>
    //pmic.setChargeCurrent(0,1,1,0,0,0);
    //pmic.setInputCurrentLimit(1200);
    pmic.enableCharging();
 8082796:	489b      	ldr	r0, [pc, #620]	; (8082a04 <setup+0x2f4>)
 8082798:	f008 f9b1 	bl	808aafe <_ZN4PMIC14enableChargingEv>
    writeRegister(0, 0b00110100);
 808279c:	2134      	movs	r1, #52	; 0x34
 808279e:	2000      	movs	r0, #0
 80827a0:	f7fe fbb8 	bl	8080f14 <_Z13writeRegisterhh>
    writeRegister(1, 0b00011011);
 80827a4:	211b      	movs	r1, #27
 80827a6:	2001      	movs	r0, #1
 80827a8:	f7fe fbb4 	bl	8080f14 <_Z13writeRegisterhh>
    //writeRegister(2, 0b01100000);
    //check power
    powerCheck.loop();
 80827ac:	4896      	ldr	r0, [pc, #600]	; (8082a08 <setup+0x2f8>)
 80827ae:	f004 fbaf 	bl	8086f10 <_ZN10PowerCheck4loopEv>
    // attachInterrupt(D4, System.reset, RISING);
    // if(digitalRead(D4)){
    //   goToSleep();
    // }

    digitalWrite(lmp91000_1_en, HIGH);
 80827b2:	2101      	movs	r1, #1
 80827b4:	8820      	ldrh	r0, [r4, #0]
 80827b6:	f00a fa00 	bl	808cbba <digitalWrite>
    digitalWrite(lmp91000_2_en, HIGH);
 80827ba:	2101      	movs	r1, #1
 80827bc:	8838      	ldrh	r0, [r7, #0]
 80827be:	f00a f9fc 	bl	808cbba <digitalWrite>
    //digitalWrite(power_led_en, HIGH);
    digitalWrite(plantower_en, HIGH);
 80827c2:	2101      	movs	r1, #1
 80827c4:	f8b9 0000 	ldrh.w	r0, [r9]
 80827c8:	f00a f9f7 	bl	808cbba <digitalWrite>
    digitalWrite(esp_wroom_en, HIGH);
 80827cc:	2101      	movs	r1, #1
 80827ce:	f8b8 0000 	ldrh.w	r0, [r8]
 80827d2:	f00a f9f2 	bl	808cbba <digitalWrite>
    digitalWrite(blower_en, HIGH);
 80827d6:	8830      	ldrh	r0, [r6, #0]
 80827d8:	2101      	movs	r1, #1
 80827da:	f00a f9ee 	bl	808cbba <digitalWrite>
    digitalWrite(co2_en, HIGH);
 80827de:	8828      	ldrh	r0, [r5, #0]
 80827e0:	2101      	movs	r1, #1
 80827e2:	f00a f9ea 	bl	808cbba <digitalWrite>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 80827e6:	4a89      	ldr	r2, [pc, #548]	; (8082a0c <setup+0x2fc>)
 80827e8:	4989      	ldr	r1, [pc, #548]	; (8082a10 <setup+0x300>)
 80827ea:	488a      	ldr	r0, [pc, #552]	; (8082a14 <setup+0x304>)
 80827ec:	f009 fb4a 	bl	808be84 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>

    // register the cloud function
    Particle.function("geteepromdata", remoteReadStoredVars);
    //debugging_enabled = 1;  //for testing...
    //initialize serial1 for communication with BLE nano from redbear labs
    Serial1.begin(9600);
 80827f0:	f009 ffbe 	bl	808c770 <_Z22__fetch_global_Serial1v>
 80827f4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80827f8:	f009 ffb4 	bl	808c764 <_ZN11USARTSerial5beginEm>
    //init serial4 to communicate with Plantower PMS5003
    Serial4.begin(9600);
 80827fc:	f7fe faec 	bl	8080dd8 <_Z22__fetch_global_Serial4v>
 8082800:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8082804:	f009 ffae 	bl	808c764 <_ZN11USARTSerial5beginEm>
    Serial5.begin(9600);        //gps is connected to this serial port
 8082808:	f7fe fb20 	bl	8080e4c <_Z22__fetch_global_Serial5v>
 808280c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8082810:	f009 ffa8 	bl	808c764 <_ZN11USARTSerial5beginEm>
    //set the Timeout to 1500ms, longer than the data transmission periodic time of the sensor
    Serial4.setTimeout(5000);
 8082814:	f7fe fae0 	bl	8080dd8 <_Z22__fetch_global_Serial4v>
 8082818:	f241 3188 	movw	r1, #5000	; 0x1388
 808281c:	f008 ff61 	bl	808b6e2 <_ZN6Stream10setTimeoutEm>
    // REG07 Misc Operation Control Register Format
    writeRegister(7, 0b01001011);   //0x4B*/


    //delay for 5 seconds to give time to programmer person for connecting to serial port for debugging
    delay(10000);
 8082820:	f242 7010 	movw	r0, #10000	; 0x2710
 8082824:	f009 f982 	bl	808bb2c <delay>
    //initialize main serial port for debug output
    Serial.begin(9600);
 8082828:	f009 fe7e 	bl	808c528 <_Z16_fetch_usbserialv>
 808282c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8082830:	f009 fe60 	bl	808c4f4 <_ZN9USBSerial5beginEl>



    #if sd_en
     fileName = String(DEVICE_id) + "_" + String(Time.year()) + String(Time.month()) + String(Time.day()) + "_" + String(Time.hour()) + String(Time.minute()) + String(Time.second()) + ".txt";
 8082834:	4b78      	ldr	r3, [pc, #480]	; (8082a18 <setup+0x308>)
 8082836:	220a      	movs	r2, #10
 8082838:	6819      	ldr	r1, [r3, #0]
 808283a:	a805      	add	r0, sp, #20
 808283c:	f008 fc15 	bl	808b06a <_ZN6StringC1Eih>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8082840:	a905      	add	r1, sp, #20
 8082842:	a809      	add	r0, sp, #36	; 0x24
 8082844:	f008 fbdc 	bl	808b000 <_ZN6StringC1ERKS_>
 8082848:	4974      	ldr	r1, [pc, #464]	; (8082a1c <setup+0x30c>)
 808284a:	a809      	add	r0, sp, #36	; 0x24
 808284c:	f008 fcc8 	bl	808b1e0 <_ZplRK15StringSumHelperPKc>
 8082850:	4605      	mov	r5, r0
 8082852:	f009 f955 	bl	808bb00 <_ZN9TimeClass4yearEv>
 8082856:	220a      	movs	r2, #10
 8082858:	4601      	mov	r1, r0
 808285a:	a80d      	add	r0, sp, #52	; 0x34
 808285c:	f008 fc05 	bl	808b06a <_ZN6StringC1Eih>
 8082860:	a90d      	add	r1, sp, #52	; 0x34
 8082862:	4628      	mov	r0, r5
 8082864:	f008 fcb0 	bl	808b1c8 <_ZplRK15StringSumHelperRK6String>
 8082868:	4605      	mov	r5, r0
 808286a:	f009 f941 	bl	808baf0 <_ZN9TimeClass5monthEv>
 808286e:	220a      	movs	r2, #10
 8082870:	4601      	mov	r1, r0
 8082872:	a811      	add	r0, sp, #68	; 0x44
 8082874:	f008 fbf9 	bl	808b06a <_ZN6StringC1Eih>
 8082878:	a911      	add	r1, sp, #68	; 0x44
 808287a:	4628      	mov	r0, r5
 808287c:	f008 fca4 	bl	808b1c8 <_ZplRK15StringSumHelperRK6String>
 8082880:	4605      	mov	r5, r0
 8082882:	f009 f92b 	bl	808badc <_ZN9TimeClass3dayEv>
 8082886:	220a      	movs	r2, #10
 8082888:	4601      	mov	r1, r0
 808288a:	a815      	add	r0, sp, #84	; 0x54
 808288c:	f008 fbed 	bl	808b06a <_ZN6StringC1Eih>
 8082890:	a915      	add	r1, sp, #84	; 0x54
 8082892:	4628      	mov	r0, r5
 8082894:	f008 fc98 	bl	808b1c8 <_ZplRK15StringSumHelperRK6String>
 8082898:	4960      	ldr	r1, [pc, #384]	; (8082a1c <setup+0x30c>)
 808289a:	f008 fca1 	bl	808b1e0 <_ZplRK15StringSumHelperPKc>
 808289e:	4605      	mov	r5, r0
 80828a0:	f009 f8fe 	bl	808baa0 <_ZN9TimeClass4hourEv>
 80828a4:	220a      	movs	r2, #10
 80828a6:	4601      	mov	r1, r0
 80828a8:	a819      	add	r0, sp, #100	; 0x64
 80828aa:	f008 fbde 	bl	808b06a <_ZN6StringC1Eih>
 80828ae:	a919      	add	r1, sp, #100	; 0x64
 80828b0:	4628      	mov	r0, r5
 80828b2:	f008 fc89 	bl	808b1c8 <_ZplRK15StringSumHelperRK6String>
 80828b6:	4605      	mov	r5, r0
 80828b8:	f009 f8fc 	bl	808bab4 <_ZN9TimeClass6minuteEv>
 80828bc:	220a      	movs	r2, #10
 80828be:	4601      	mov	r1, r0
 80828c0:	a81d      	add	r0, sp, #116	; 0x74
 80828c2:	f008 fbd2 	bl	808b06a <_ZN6StringC1Eih>
 80828c6:	a91d      	add	r1, sp, #116	; 0x74
 80828c8:	4628      	mov	r0, r5
 80828ca:	f008 fc7d 	bl	808b1c8 <_ZplRK15StringSumHelperRK6String>
 80828ce:	4605      	mov	r5, r0
 80828d0:	f009 f8fa 	bl	808bac8 <_ZN9TimeClass6secondEv>
 80828d4:	220a      	movs	r2, #10
 80828d6:	4601      	mov	r1, r0
 80828d8:	a821      	add	r0, sp, #132	; 0x84
 80828da:	f008 fbc6 	bl	808b06a <_ZN6StringC1Eih>
 80828de:	a921      	add	r1, sp, #132	; 0x84
 80828e0:	4628      	mov	r0, r5
 80828e2:	f008 fc71 	bl	808b1c8 <_ZplRK15StringSumHelperRK6String>
 80828e6:	494e      	ldr	r1, [pc, #312]	; (8082a20 <setup+0x310>)
 80828e8:	f008 fc7a 	bl	808b1e0 <_ZplRK15StringSumHelperPKc>
 80828ec:	4e4d      	ldr	r6, [pc, #308]	; (8082a24 <setup+0x314>)
 80828ee:	4601      	mov	r1, r0
 80828f0:	4630      	mov	r0, r6
 80828f2:	f008 fb76 	bl	808afe2 <_ZN6StringaSERKS_>
 80828f6:	a821      	add	r0, sp, #132	; 0x84
 80828f8:	f008 fafc 	bl	808aef4 <_ZN6StringD1Ev>
 80828fc:	a81d      	add	r0, sp, #116	; 0x74
 80828fe:	f008 faf9 	bl	808aef4 <_ZN6StringD1Ev>
 8082902:	a819      	add	r0, sp, #100	; 0x64
 8082904:	f008 faf6 	bl	808aef4 <_ZN6StringD1Ev>
 8082908:	a815      	add	r0, sp, #84	; 0x54
 808290a:	f008 faf3 	bl	808aef4 <_ZN6StringD1Ev>
 808290e:	a811      	add	r0, sp, #68	; 0x44
 8082910:	f008 faf0 	bl	808aef4 <_ZN6StringD1Ev>
 8082914:	a80d      	add	r0, sp, #52	; 0x34
 8082916:	f008 faed 	bl	808aef4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808291a:	a809      	add	r0, sp, #36	; 0x24
 808291c:	f008 faea 	bl	808aef4 <_ZN6StringD1Ev>
 8082920:	a805      	add	r0, sp, #20
 8082922:	f008 fae7 	bl	808aef4 <_ZN6StringD1Ev>
     Serial.println("Checking for sd card");
 8082926:	f009 fdff 	bl	808c528 <_Z16_fetch_usbserialv>
 808292a:	493f      	ldr	r1, [pc, #252]	; (8082a28 <setup+0x318>)
 808292c:	f008 fd55 	bl	808b3da <_ZN5Print7printlnEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 8082930:	493e      	ldr	r1, [pc, #248]	; (8082a2c <setup+0x31c>)
 8082932:	a821      	add	r0, sp, #132	; 0x84
 8082934:	f008 fb25 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
     logFileName = "log_" + fileName;
 8082938:	4631      	mov	r1, r6
 808293a:	a821      	add	r0, sp, #132	; 0x84
 808293c:	f008 fc44 	bl	808b1c8 <_ZplRK15StringSumHelperRK6String>
 8082940:	4601      	mov	r1, r0
 8082942:	483b      	ldr	r0, [pc, #236]	; (8082a30 <setup+0x320>)
 8082944:	f008 fb4d 	bl	808afe2 <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8082948:	a821      	add	r0, sp, #132	; 0x84
 808294a:	f008 fad3 	bl	808aef4 <_ZN6StringD1Ev>
 808294e:	4939      	ldr	r1, [pc, #228]	; (8082a34 <setup+0x324>)
 8082950:	2302      	movs	r3, #2
 8082952:	220c      	movs	r2, #12
 8082954:	f5a1 608e 	sub.w	r0, r1, #1136	; 0x470
 8082958:	f7fe fab2 	bl	8080ec0 <_ZN9SdFatBase5beginEP9SdSpiBasehh>
 808295c:	4625      	mov	r5, r4

    if (sd.begin(CS)) { //if uSD is functioning and MCP error has not been logged yet.
 808295e:	b140      	cbz	r0, 8082972 <setup+0x262>
      //look for a wifi file
      check_wifi_file();
      //look for a calibration file
      check_cal_file();*/

      Serial.print("Created new file to log to uSD card: ");
 8082960:	f009 fde2 	bl	808c528 <_Z16_fetch_usbserialv>
 8082964:	4934      	ldr	r1, [pc, #208]	; (8082a38 <setup+0x328>)
 8082966:	f008 fd25 	bl	808b3b4 <_ZN5Print5printEPKc>
      Serial.println(fileName);
 808296a:	f009 fddd 	bl	808c528 <_Z16_fetch_usbserialv>
 808296e:	6831      	ldr	r1, [r6, #0]
 8082970:	e002      	b.n	8082978 <setup+0x268>
    }else { //uSD is not functioning
        Serial.println("No uSD card detected.");
 8082972:	f009 fdd9 	bl	808c528 <_Z16_fetch_usbserialv>
 8082976:	4931      	ldr	r1, [pc, #196]	; (8082a3c <setup+0x32c>)
    #endif


    //setup the AFE
    Serial.println("Starting LMP91000 CO initialization");
    if(debugging_enabled)
 8082978:	4c31      	ldr	r4, [pc, #196]	; (8082a40 <setup+0x330>)
      check_cal_file();*/

      Serial.print("Created new file to log to uSD card: ");
      Serial.println(fileName);
    }else { //uSD is not functioning
        Serial.println("No uSD card detected.");
 808297a:	f008 fd2e 	bl	808b3da <_ZN5Print7printlnEPKc>
    }
    #endif


    //setup the AFE
    Serial.println("Starting LMP91000 CO initialization");
 808297e:	f009 fdd3 	bl	808c528 <_Z16_fetch_usbserialv>
 8082982:	4930      	ldr	r1, [pc, #192]	; (8082a44 <setup+0x334>)
 8082984:	f008 fd29 	bl	808b3da <_ZN5Print7printlnEPKc>
    if(debugging_enabled)
 8082988:	6823      	ldr	r3, [r4, #0]
 808298a:	b14b      	cbz	r3, 80829a0 <setup+0x290>
        writeLogFile("Starting LMP91000 CO initialization");
 808298c:	492d      	ldr	r1, [pc, #180]	; (8082a44 <setup+0x334>)
 808298e:	a821      	add	r0, sp, #132	; 0x84
 8082990:	f008 faf7 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
 8082994:	a821      	add	r0, sp, #132	; 0x84
 8082996:	f7ff f9bb 	bl	8081d10 <_Z12writeLogFile6String>
 808299a:	a821      	add	r0, sp, #132	; 0x84
 808299c:	f008 faaa 	bl	808aef4 <_ZN6StringD1Ev>
    Wire.begin();   //this must be done for the LMP91000
 80829a0:	f00a f9a8 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 80829a4:	f009 ff5c 	bl	808c860 <_ZN7TwoWire5beginEv>
    digitalWrite(lmp91000_1_en, LOW); //enable the chip
 80829a8:	2100      	movs	r1, #0
 80829aa:	8828      	ldrh	r0, [r5, #0]
 80829ac:	f00a f905 	bl	808cbba <digitalWrite>

    if(lmp91000.configure(LMP91000_TIA_GAIN_120K | LMP91000_RLOAD_10OHM, LMP91000_REF_SOURCE_EXT | LMP91000_INT_Z_50PCT | LMP91000_BIAS_SIGN_POS | LMP91000_BIAS_0PCT, LMP91000_FET_SHORT_DISABLED | LMP91000_OP_MODE_AMPEROMETRIC) == 0)
 80829b0:	2303      	movs	r3, #3
 80829b2:	22b0      	movs	r2, #176	; 0xb0
 80829b4:	2118      	movs	r1, #24
 80829b6:	4824      	ldr	r0, [pc, #144]	; (8082a48 <setup+0x338>)
 80829b8:	f004 fa4c 	bl	8086e54 <_ZN8LMP910009configureEhhh>
 80829bc:	2800      	cmp	r0, #0
 80829be:	d14b      	bne.n	8082a58 <setup+0x348>
    {
          Serial.println("Couldn't communicate with LMP91000 for CO");
 80829c0:	f009 fdb2 	bl	808c528 <_Z16_fetch_usbserialv>
 80829c4:	4921      	ldr	r1, [pc, #132]	; (8082a4c <setup+0x33c>)
 80829c6:	f008 fd08 	bl	808b3da <_ZN5Print7printlnEPKc>
          if(debugging_enabled){
 80829ca:	6823      	ldr	r3, [r4, #0]
 80829cc:	2b00      	cmp	r3, #0
 80829ce:	d058      	beq.n	8082a82 <setup+0x372>
            writeLogFile("Couldn't communicate with LMP91000 for CO");
 80829d0:	491e      	ldr	r1, [pc, #120]	; (8082a4c <setup+0x33c>)
 80829d2:	a821      	add	r0, sp, #132	; 0x84
 80829d4:	f008 fad5 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
 80829d8:	a821      	add	r0, sp, #132	; 0x84
 80829da:	f7ff f999 	bl	8081d10 <_Z12writeLogFile6String>
 80829de:	a821      	add	r0, sp, #132	; 0x84
 80829e0:	f008 fa88 	bl	808aef4 <_ZN6StringD1Ev>
 80829e4:	e04d      	b.n	8082a82 <setup+0x372>
 80829e6:	bf00      	nop
 80829e8:	08091b2c 	.word	0x08091b2c
 80829ec:	20000b88 	.word	0x20000b88
 80829f0:	08094100 	.word	0x08094100
 80829f4:	200000a4 	.word	0x200000a4
 80829f8:	200000d8 	.word	0x200000d8
 80829fc:	200000d0 	.word	0x200000d0
 8082a00:	200000b0 	.word	0x200000b0
 8082a04:	20000aec 	.word	0x20000aec
 8082a08:	20000798 	.word	0x20000798
 8082a0c:	08091b48 	.word	0x08091b48
 8082a10:	08080d17 	.word	0x08080d17
 8082a14:	0808be3d 	.word	0x0808be3d
 8082a18:	20000088 	.word	0x20000088
 8082a1c:	08091b6e 	.word	0x08091b6e
 8082a20:	0809175c 	.word	0x0809175c
 8082a24:	20000af4 	.word	0x20000af4
 8082a28:	08091b56 	.word	0x08091b56
 8082a2c:	08091b6b 	.word	0x08091b6b
 8082a30:	200007bc 	.word	0x200007bc
 8082a34:	200006ac 	.word	0x200006ac
 8082a38:	08091b70 	.word	0x08091b70
 8082a3c:	08091b96 	.word	0x08091b96
 8082a40:	20000b10 	.word	0x20000b10
 8082a44:	08091bac 	.word	0x08091bac
 8082a48:	2000022c 	.word	0x2000022c
 8082a4c:	08091bd0 	.word	0x08091bd0
 8082a50:	200000d4 	.word	0x200000d4
 8082a54:	200000a8 	.word	0x200000a8
          }
    }else{
          Serial.println("Initialized LMP91000 for CO");
 8082a58:	f009 fd66 	bl	808c528 <_Z16_fetch_usbserialv>
 8082a5c:	4994      	ldr	r1, [pc, #592]	; (8082cb0 <setup+0x5a0>)
 8082a5e:	f008 fcbc 	bl	808b3da <_ZN5Print7printlnEPKc>
          if(debugging_enabled){
 8082a62:	6823      	ldr	r3, [r4, #0]
 8082a64:	b14b      	cbz	r3, 8082a7a <setup+0x36a>
            writeLogFile("Initialized LMP91000 for CO");
 8082a66:	4992      	ldr	r1, [pc, #584]	; (8082cb0 <setup+0x5a0>)
 8082a68:	a821      	add	r0, sp, #132	; 0x84
 8082a6a:	f008 fa8a 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
 8082a6e:	a821      	add	r0, sp, #132	; 0x84
 8082a70:	f7ff f94e 	bl	8081d10 <_Z12writeLogFile6String>
 8082a74:	a821      	add	r0, sp, #132	; 0x84
 8082a76:	f008 fa3d 	bl	808aef4 <_ZN6StringD1Ev>
          Serial.println(lmp91000.read(LMP91000_TIACN_REG),HEX);
          Serial.print("REFCN: ");
          Serial.println(lmp91000.read(LMP91000_REFCN_REG),HEX);
          Serial.print("MODECN: ");
          Serial.println(lmp91000.read(LMP91000_MODECN_REG),HEX);*/
          digitalWrite(lmp91000_1_en, HIGH);  //disable
 8082a7a:	2101      	movs	r1, #1
 8082a7c:	8828      	ldrh	r0, [r5, #0]
 8082a7e:	f00a f89c 	bl	808cbba <digitalWrite>
    }
    ads1.begin();
 8082a82:	488c      	ldr	r0, [pc, #560]	; (8082cb4 <setup+0x5a4>)
 8082a84:	f004 fae2 	bl	808704c <_ZN16Adafruit_ADS10155beginEv>
    if(Wire.requestFrom(0x49,1) == 0) { //if can't get 1 byte from ADC1, add it to the init error log
 8082a88:	f00a f934 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8082a8c:	2201      	movs	r2, #1
 8082a8e:	2149      	movs	r1, #73	; 0x49
 8082a90:	f009 fef8 	bl	808c884 <_ZN7TwoWire11requestFromEii>
 8082a94:	b988      	cbnz	r0, 8082aba <setup+0x3aa>
      //init_log += "AD1,";
      //digitalWrite(red_status_led, HIGH);
      //delay(200);
      //digitalWrite(red_status_led, LOW);
      //delay(200);
      Serial.println("Could not communicate with Adafruit_ADS1115 for CO");
 8082a96:	f009 fd47 	bl	808c528 <_Z16_fetch_usbserialv>
 8082a9a:	4987      	ldr	r1, [pc, #540]	; (8082cb8 <setup+0x5a8>)
 8082a9c:	f008 fc9d 	bl	808b3da <_ZN5Print7printlnEPKc>
      if(debugging_enabled)
 8082aa0:	6823      	ldr	r3, [r4, #0]
 8082aa2:	b173      	cbz	r3, 8082ac2 <setup+0x3b2>
        writeLogFile("Could not communicate with Adafruit_ADS1115 for CO");
 8082aa4:	4984      	ldr	r1, [pc, #528]	; (8082cb8 <setup+0x5a8>)
 8082aa6:	a821      	add	r0, sp, #132	; 0x84
 8082aa8:	f008 fa6b 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
 8082aac:	a821      	add	r0, sp, #132	; 0x84
 8082aae:	f7ff f92f 	bl	8081d10 <_Z12writeLogFile6String>
 8082ab2:	a821      	add	r0, sp, #132	; 0x84
 8082ab4:	f008 fa1e 	bl	808aef4 <_ZN6StringD1Ev>
 8082ab8:	e003      	b.n	8082ac2 <setup+0x3b2>
    }
    else{
      ads1.setGain(GAIN_TWOTHIRDS);
 8082aba:	2100      	movs	r1, #0
 8082abc:	487d      	ldr	r0, [pc, #500]	; (8082cb4 <setup+0x5a4>)
 8082abe:	f004 facc 	bl	808705a <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
    }

    //AFE 2 setup
    //#if AFE2_en
    Serial.println("Starting LMP91000 2 initialization");
 8082ac2:	f009 fd31 	bl	808c528 <_Z16_fetch_usbserialv>
 8082ac6:	497d      	ldr	r1, [pc, #500]	; (8082cbc <setup+0x5ac>)
 8082ac8:	f008 fc87 	bl	808b3da <_ZN5Print7printlnEPKc>
    if(debugging_enabled)
 8082acc:	6823      	ldr	r3, [r4, #0]
 8082ace:	b14b      	cbz	r3, 8082ae4 <setup+0x3d4>
        writeLogFile("Starting LMP91000 2 initialization");
 8082ad0:	497a      	ldr	r1, [pc, #488]	; (8082cbc <setup+0x5ac>)
 8082ad2:	a821      	add	r0, sp, #132	; 0x84
 8082ad4:	f008 fa55 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
 8082ad8:	a821      	add	r0, sp, #132	; 0x84
 8082ada:	f7ff f919 	bl	8081d10 <_Z12writeLogFile6String>
 8082ade:	a821      	add	r0, sp, #132	; 0x84
 8082ae0:	f008 fa08 	bl	808aef4 <_ZN6StringD1Ev>
    Wire.begin();   //this must be done for the LMP91000
 8082ae4:	f00a f906 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8082ae8:	f009 feba 	bl	808c860 <_ZN7TwoWire5beginEv>
    digitalWrite(lmp91000_2_en, LOW); //enable the chip
 8082aec:	2100      	movs	r1, #0
 8082aee:	8838      	ldrh	r0, [r7, #0]
 8082af0:	f00a f863 	bl	808cbba <digitalWrite>

    if(lmp91000.configure(LMP91000_TIA_GAIN_120K | LMP91000_RLOAD_10OHM, LMP91000_REF_SOURCE_EXT | LMP91000_INT_Z_50PCT | LMP91000_BIAS_SIGN_POS | LMP91000_BIAS_0PCT, LMP91000_FET_SHORT_DISABLED | LMP91000_OP_MODE_AMPEROMETRIC) == 0)
 8082af4:	2303      	movs	r3, #3
 8082af6:	22b0      	movs	r2, #176	; 0xb0
 8082af8:	2118      	movs	r1, #24
 8082afa:	4871      	ldr	r0, [pc, #452]	; (8082cc0 <setup+0x5b0>)
 8082afc:	f004 f9aa 	bl	8086e54 <_ZN8LMP910009configureEhhh>
 8082b00:	b978      	cbnz	r0, 8082b22 <setup+0x412>
    {
          Serial.println("Couldn't communicate with LMP91000 for 2");
 8082b02:	f009 fd11 	bl	808c528 <_Z16_fetch_usbserialv>
 8082b06:	496f      	ldr	r1, [pc, #444]	; (8082cc4 <setup+0x5b4>)
 8082b08:	f008 fc67 	bl	808b3da <_ZN5Print7printlnEPKc>
          writeLogFile("Couldn't communicate with LMP91000 for 2");
 8082b0c:	496d      	ldr	r1, [pc, #436]	; (8082cc4 <setup+0x5b4>)
 8082b0e:	a821      	add	r0, sp, #132	; 0x84
 8082b10:	f008 fa37 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
 8082b14:	a821      	add	r0, sp, #132	; 0x84
 8082b16:	f7ff f8fb 	bl	8081d10 <_Z12writeLogFile6String>
 8082b1a:	a821      	add	r0, sp, #132	; 0x84
 8082b1c:	f008 f9ea 	bl	808aef4 <_ZN6StringD1Ev>
 8082b20:	e014      	b.n	8082b4c <setup+0x43c>
    }else{
          Serial.println("Initialized LMP91000 for 2");
 8082b22:	f009 fd01 	bl	808c528 <_Z16_fetch_usbserialv>
 8082b26:	4968      	ldr	r1, [pc, #416]	; (8082cc8 <setup+0x5b8>)
 8082b28:	f008 fc57 	bl	808b3da <_ZN5Print7printlnEPKc>
          if(debugging_enabled)
 8082b2c:	6823      	ldr	r3, [r4, #0]
 8082b2e:	b14b      	cbz	r3, 8082b44 <setup+0x434>
            writeLogFile("Initialized LMP91000 for 2");
 8082b30:	4965      	ldr	r1, [pc, #404]	; (8082cc8 <setup+0x5b8>)
 8082b32:	a821      	add	r0, sp, #132	; 0x84
 8082b34:	f008 fa25 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
 8082b38:	a821      	add	r0, sp, #132	; 0x84
 8082b3a:	f7ff f8e9 	bl	8081d10 <_Z12writeLogFile6String>
 8082b3e:	a821      	add	r0, sp, #132	; 0x84
 8082b40:	f008 f9d8 	bl	808aef4 <_ZN6StringD1Ev>
          Serial.println(lmp91000.read(LMP91000_TIACN_REG),HEX);
          Serial.print("REFCN: ");
          Serial.println(lmp91000.read(LMP91000_REFCN_REG),HEX);
          Serial.print("MODECN: ");
          Serial.println(lmp91000.read(LMP91000_MODECN_REG),HEX);*/
          digitalWrite(lmp91000_2_en, HIGH);  //disable
 8082b44:	2101      	movs	r1, #1
 8082b46:	8838      	ldrh	r0, [r7, #0]
 8082b48:	f00a f837 	bl	808cbba <digitalWrite>
    }
    ads2.begin();
 8082b4c:	485f      	ldr	r0, [pc, #380]	; (8082ccc <setup+0x5bc>)
 8082b4e:	f004 fa7d 	bl	808704c <_ZN16Adafruit_ADS10155beginEv>
    if(Wire.requestFrom(0x4A,1) == 0) { //if can't get 1 byte from ADC1, add it to the init error log
 8082b52:	f00a f8cf 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8082b56:	2201      	movs	r2, #1
 8082b58:	214a      	movs	r1, #74	; 0x4a
 8082b5a:	f009 fe93 	bl	808c884 <_ZN7TwoWire11requestFromEii>
 8082b5e:	b988      	cbnz	r0, 8082b84 <setup+0x474>
      //init_log += "AD1,";
      //digitalWrite(red_status_led, HIGH);
      //delay(200);
      //digitalWrite(red_status_led, LOW);
      //delay(200);
      Serial.println("Could not communicate with Adafruit_ADS1115 for CO");
 8082b60:	f009 fce2 	bl	808c528 <_Z16_fetch_usbserialv>
 8082b64:	4954      	ldr	r1, [pc, #336]	; (8082cb8 <setup+0x5a8>)
 8082b66:	f008 fc38 	bl	808b3da <_ZN5Print7printlnEPKc>
      if(debugging_enabled)
 8082b6a:	6823      	ldr	r3, [r4, #0]
 8082b6c:	b173      	cbz	r3, 8082b8c <setup+0x47c>
        writeLogFile("Could not communicate with Adafruit_ADS1115 for CO");
 8082b6e:	4952      	ldr	r1, [pc, #328]	; (8082cb8 <setup+0x5a8>)
 8082b70:	a821      	add	r0, sp, #132	; 0x84
 8082b72:	f008 fa06 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
 8082b76:	a821      	add	r0, sp, #132	; 0x84
 8082b78:	f7ff f8ca 	bl	8081d10 <_Z12writeLogFile6String>
 8082b7c:	a821      	add	r0, sp, #132	; 0x84
 8082b7e:	f008 f9b9 	bl	808aef4 <_ZN6StringD1Ev>
 8082b82:	e003      	b.n	8082b8c <setup+0x47c>
    }
    else{
      ads2.setGain(GAIN_TWOTHIRDS);
 8082b84:	2100      	movs	r1, #0
 8082b86:	4851      	ldr	r0, [pc, #324]	; (8082ccc <setup+0x5bc>)
 8082b88:	f004 fa67 	bl	808705a <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
    }
    //#endif

    if (!bme.begin()) {
 8082b8c:	2177      	movs	r1, #119	; 0x77
 8082b8e:	4850      	ldr	r0, [pc, #320]	; (8082cd0 <setup+0x5c0>)
 8082b90:	f006 f948 	bl	8088e24 <_ZN15Adafruit_BME6805beginEh>
 8082b94:	b940      	cbnz	r0, 8082ba8 <setup+0x498>
      Serial.println("Could not find a valid BME680 sensor, check wiring!");
 8082b96:	f009 fcc7 	bl	808c528 <_Z16_fetch_usbserialv>
 8082b9a:	494e      	ldr	r1, [pc, #312]	; (8082cd4 <setup+0x5c4>)
 8082b9c:	f008 fc1d 	bl	808b3da <_ZN5Print7printlnEPKc>
      if(debugging_enabled)
 8082ba0:	6823      	ldr	r3, [r4, #0]
 8082ba2:	b193      	cbz	r3, 8082bca <setup+0x4ba>
          writeLogFile("Could not find a valid BME680 sensor, check wiring!");
 8082ba4:	494b      	ldr	r1, [pc, #300]	; (8082cd4 <setup+0x5c4>)
 8082ba6:	e007      	b.n	8082bb8 <setup+0x4a8>
      //while (1);
    }else{
      Serial.println("Initialized BME Sensor");
 8082ba8:	f009 fcbe 	bl	808c528 <_Z16_fetch_usbserialv>
 8082bac:	494a      	ldr	r1, [pc, #296]	; (8082cd8 <setup+0x5c8>)
 8082bae:	f008 fc14 	bl	808b3da <_ZN5Print7printlnEPKc>
      if(debugging_enabled)
 8082bb2:	6823      	ldr	r3, [r4, #0]
 8082bb4:	b14b      	cbz	r3, 8082bca <setup+0x4ba>
        writeLogFile("Initialized BME Sensor");
 8082bb6:	4948      	ldr	r1, [pc, #288]	; (8082cd8 <setup+0x5c8>)
 8082bb8:	a821      	add	r0, sp, #132	; 0x84
 8082bba:	f008 f9e2 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
 8082bbe:	a821      	add	r0, sp, #132	; 0x84
 8082bc0:	f7ff f8a6 	bl	8081d10 <_Z12writeLogFile6String>
 8082bc4:	a821      	add	r0, sp, #132	; 0x84
 8082bc6:	f008 f995 	bl	808aef4 <_ZN6StringD1Ev>
    }

    if(!t6713.begin()){
 8082bca:	4844      	ldr	r0, [pc, #272]	; (8082cdc <setup+0x5cc>)
 8082bcc:	f004 fb3a 	bl	8087244 <_ZN13Telaire_T67135beginEv>
 8082bd0:	b980      	cbnz	r0, 8082bf4 <setup+0x4e4>
      Serial.println("Could not find a valid T6713 sensor, check wiring!");
 8082bd2:	f009 fca9 	bl	808c528 <_Z16_fetch_usbserialv>
 8082bd6:	4942      	ldr	r1, [pc, #264]	; (8082ce0 <setup+0x5d0>)
 8082bd8:	f008 fbff 	bl	808b3da <_ZN5Print7printlnEPKc>
      if(debugging_enabled)
 8082bdc:	6823      	ldr	r3, [r4, #0]
 8082bde:	b14b      	cbz	r3, 8082bf4 <setup+0x4e4>
          writeLogFile("Could not find a valid T6713");
 8082be0:	4940      	ldr	r1, [pc, #256]	; (8082ce4 <setup+0x5d4>)
 8082be2:	a821      	add	r0, sp, #132	; 0x84
 8082be4:	f008 f9cd 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
 8082be8:	a821      	add	r0, sp, #132	; 0x84
 8082bea:	f7ff f891 	bl	8081d10 <_Z12writeLogFile6String>
 8082bee:	a821      	add	r0, sp, #132	; 0x84
 8082bf0:	f008 f980 	bl	808aef4 <_ZN6StringD1Ev>
    }
  //Serial.println("before bme setup");
    // Set up oversampling and filter initialization
    bme.setTemperatureOversampling(BME680_OS_8X);
 8082bf4:	2104      	movs	r1, #4
 8082bf6:	4836      	ldr	r0, [pc, #216]	; (8082cd0 <setup+0x5c0>)
 8082bf8:	f006 fa12 	bl	8089020 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh>
    bme.setHumidityOversampling(BME680_OS_2X);
 8082bfc:	2102      	movs	r1, #2
 8082bfe:	4834      	ldr	r0, [pc, #208]	; (8082cd0 <setup+0x5c0>)
 8082c00:	f006 fa1b 	bl	808903a <_ZN15Adafruit_BME68023setHumidityOversamplingEh>
    bme.setPressureOversampling(BME680_OS_4X);
 8082c04:	2103      	movs	r1, #3
 8082c06:	4832      	ldr	r0, [pc, #200]	; (8082cd0 <setup+0x5c0>)
 8082c08:	f006 fa24 	bl	8089054 <_ZN15Adafruit_BME68023setPressureOversamplingEh>
    bme.setIIRFilterSize(BME680_FILTER_SIZE_3);
 8082c0c:	2102      	movs	r1, #2
 8082c0e:	4830      	ldr	r0, [pc, #192]	; (8082cd0 <setup+0x5c0>)
 8082c10:	f006 fa2d 	bl	808906e <_ZN15Adafruit_BME68016setIIRFilterSizeEh>
    bme.setGasHeater(320, 150); // 320*C for 150 ms
 8082c14:	2296      	movs	r2, #150	; 0x96
 8082c16:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8082c1a:	482d      	ldr	r0, [pc, #180]	; (8082cd0 <setup+0x5c0>)
 8082c1c:	f006 f9f2 	bl	8089004 <_ZN15Adafruit_BME68012setGasHeaterEtt>
        file.println(Time.timeStr());
        file.println(String(HEADER_STRING));
        file.close();
        file_started = 1;
    }*/
    resetESP();
 8082c20:	f7ff fd3e 	bl	80826a0 <_Z8resetESPv>

    Serial.println("ESP reset!");
 8082c24:	f009 fc80 	bl	808c528 <_Z16_fetch_usbserialv>
 8082c28:	492f      	ldr	r1, [pc, #188]	; (8082ce8 <setup+0x5d8>)
 8082c2a:	f008 fbd6 	bl	808b3da <_ZN5Print7printlnEPKc>

    Serial.print("FW Version: ");
 8082c2e:	f009 fc7b 	bl	808c528 <_Z16_fetch_usbserialv>
 8082c32:	492e      	ldr	r1, [pc, #184]	; (8082cec <setup+0x5dc>)
 8082c34:	f008 fbbe 	bl	808b3b4 <_ZN5Print5printEPKc>
    Serial.println(APP_VERSION);
 8082c38:	f009 fc76 	bl	808c528 <_Z16_fetch_usbserialv>
 8082c3c:	220a      	movs	r2, #10
 8082c3e:	2107      	movs	r1, #7
 8082c40:	f008 fc39 	bl	808b4b6 <_ZN5Print7printlnEii>
    Serial.print("Build: ");
 8082c44:	f009 fc70 	bl	808c528 <_Z16_fetch_usbserialv>
 8082c48:	4929      	ldr	r1, [pc, #164]	; (8082cf0 <setup+0x5e0>)
 8082c4a:	f008 fbb3 	bl	808b3b4 <_ZN5Print5printEPKc>
    Serial.println(BUILD_VERSION);
 8082c4e:	f009 fc6b 	bl	808c528 <_Z16_fetch_usbserialv>
 8082c52:	220a      	movs	r2, #10
 8082c54:	210d      	movs	r1, #13
 8082c56:	f008 fc2e 	bl	808b4b6 <_ZN5Print7printlnEii>



    enableContinuousGPS();
 8082c5a:	f7fe fca3 	bl	80815a4 <_Z19enableContinuousGPSv>

    if(google_location_en){
 8082c5e:	4b25      	ldr	r3, [pc, #148]	; (8082cf4 <setup+0x5e4>)
 8082c60:	681b      	ldr	r3, [r3, #0]
 8082c62:	b15b      	cbz	r3, 8082c7c <setup+0x56c>
        Serial.println("Setting up google maps geolocation.");
 8082c64:	f009 fc60 	bl	808c528 <_Z16_fetch_usbserialv>
 8082c68:	4923      	ldr	r1, [pc, #140]	; (8082cf8 <setup+0x5e8>)
 8082c6a:	f008 fbb6 	bl	808b3da <_ZN5Print7printlnEPKc>
        locator.withSubscribe(locationCallback).withLocatePeriodic(5); //setup google maps geolocation
 8082c6e:	4923      	ldr	r1, [pc, #140]	; (8082cfc <setup+0x5ec>)
 8082c70:	4823      	ldr	r0, [pc, #140]	; (8082d00 <setup+0x5f0>)
 8082c72:	f006 fda1 	bl	80897b8 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE>
 8082c76:	2105      	movs	r1, #5
 8082c78:	f006 fc6c 	bl	8089554 <_ZN23GoogleMapsDeviceLocator18withLocatePeriodicEm>
#define SYSTEM_VERSION_141
#define SYSTEM_VERSION_142
#define SYSTEM_VERSION_143
#define SYSTEM_VERSION_144

typedef struct __attribute__((packed)) SystemVersionInfo
 8082c7c:	231c      	movs	r3, #28
    static bool enableFeature(const WiFiTesterFeature feature);

    String version()
    {
        SystemVersionInfo info;
        system_version_info(&info, nullptr);
 8082c7e:	2100      	movs	r1, #0
 8082c80:	a821      	add	r0, sp, #132	; 0x84
 8082c82:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
 8082c86:	f007 fd0b 	bl	808a6a0 <system_version_info>
        return String(info.versionString);
 8082c8a:	a923      	add	r1, sp, #140	; 0x8c
 8082c8c:	a81d      	add	r0, sp, #116	; 0x74
 8082c8e:	f008 f978 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
    }

    
    Log.info("System version: %s", (const char*)System.version());
 8082c92:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8082c94:	491b      	ldr	r1, [pc, #108]	; (8082d04 <setup+0x5f4>)
 8082c96:	481c      	ldr	r0, [pc, #112]	; (8082d08 <setup+0x5f8>)
 8082c98:	f7fe f886 	bl	8080da8 <_ZNK5spark6Logger4infoEPKcz>
 8082c9c:	a81d      	add	r0, sp, #116	; 0x74
 8082c9e:	f008 f929 	bl	808aef4 <_ZN6StringD1Ev>
    status_word.status_int  = 0;
    status_word.status_int |= (APP_VERSION << 12) & 0xFF00;
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
    //status_word.status_int |= 0x6500;

    String init_log; //intialization error log
 8082ca2:	a801      	add	r0, sp, #4
 8082ca4:	f008 f926 	bl	808aef4 <_ZN6StringD1Ev>

    
    Log.info("System version: %s", (const char*)System.version());
    

}
 8082ca8:	b029      	add	sp, #164	; 0xa4
 8082caa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8082cae:	bf00      	nop
 8082cb0:	08091bfa 	.word	0x08091bfa
 8082cb4:	20000a54 	.word	0x20000a54
 8082cb8:	08091c16 	.word	0x08091c16
 8082cbc:	08091c49 	.word	0x08091c49
 8082cc0:	2000022c 	.word	0x2000022c
 8082cc4:	08091c6c 	.word	0x08091c6c
 8082cc8:	08091c95 	.word	0x08091c95
 8082ccc:	20000a5a 	.word	0x20000a5a
 8082cd0:	20000700 	.word	0x20000700
 8082cd4:	08091cb0 	.word	0x08091cb0
 8082cd8:	08091ce4 	.word	0x08091ce4
 8082cdc:	20000b90 	.word	0x20000b90
 8082ce0:	08091cfb 	.word	0x08091cfb
 8082ce4:	08091d2e 	.word	0x08091d2e
 8082ce8:	08091d4b 	.word	0x08091d4b
 8082cec:	08091d56 	.word	0x08091d56
 8082cf0:	08091d63 	.word	0x08091d63
 8082cf4:	20000b84 	.word	0x20000b84
 8082cf8:	08091d6b 	.word	0x08091d6b
 8082cfc:	08080bf1 	.word	0x08080bf1
 8082d00:	20000b38 	.word	0x20000b38
 8082d04:	08091d8f 	.word	0x08091d8f
 8082d08:	20000cf8 	.word	0x20000cf8

08082d0c <_Z24serialGetWifiCredentialsv>:
    pmic.setChargeCurrent(bit7, bit6, bit5, bit4, bit3, bit2);
    chargeCurrent = pmic.getChargeCurrent();
    Serial.printf("new charge current of %d mA\n\r", total_current);
}

void serialGetWifiCredentials(void){
 8082d0c:	b530      	push	{r4, r5, lr}
 8082d0e:	4d5b      	ldr	r5, [pc, #364]	; (8082e7c <_Z24serialGetWifiCredentialsv+0x170>)
 8082d10:	b095      	sub	sp, #84	; 0x54
    Serial.print("Current stored ssid: ");
 8082d12:	f009 fc09 	bl	808c528 <_Z16_fetch_usbserialv>
 8082d16:	495a      	ldr	r1, [pc, #360]	; (8082e80 <_Z24serialGetWifiCredentialsv+0x174>)
 8082d18:	f008 fb4c 	bl	808b3b4 <_ZN5Print5printEPKc>
 8082d1c:	4c59      	ldr	r4, [pc, #356]	; (8082e84 <_Z24serialGetWifiCredentialsv+0x178>)
    Serial.println(ssid);
 8082d1e:	f009 fc03 	bl	808c528 <_Z16_fetch_usbserialv>
 8082d22:	6829      	ldr	r1, [r5, #0]
 8082d24:	f008 fb59 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.print("Current stored password: ");
 8082d28:	f009 fbfe 	bl	808c528 <_Z16_fetch_usbserialv>
 8082d2c:	4956      	ldr	r1, [pc, #344]	; (8082e88 <_Z24serialGetWifiCredentialsv+0x17c>)
 8082d2e:	f008 fb41 	bl	808b3b4 <_ZN5Print5printEPKc>
    Serial.println(password);
 8082d32:	f009 fbf9 	bl	808c528 <_Z16_fetch_usbserialv>
 8082d36:	6821      	ldr	r1, [r4, #0]
 8082d38:	f008 fb4f 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("Please enter password in order to make changes.\n\r");
 8082d3c:	f009 fbf4 	bl	808c528 <_Z16_fetch_usbserialv>
 8082d40:	4952      	ldr	r1, [pc, #328]	; (8082e8c <_Z24serialGetWifiCredentialsv+0x180>)
 8082d42:	f008 fb4a 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082d46:	f009 fbef 	bl	808c528 <_Z16_fetch_usbserialv>
 8082d4a:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082d4e:	f008 fcc8 	bl	808b6e2 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082d52:	f009 fbe9 	bl	808c528 <_Z16_fetch_usbserialv>
 8082d56:	220d      	movs	r2, #13
 8082d58:	4601      	mov	r1, r0
 8082d5a:	4668      	mov	r0, sp
 8082d5c:	f008 fd2e 	bl	808b7bc <_ZN6Stream15readStringUntilEc>
    if(tempString.equals("bould")){
 8082d60:	494b      	ldr	r1, [pc, #300]	; (8082e90 <_Z24serialGetWifiCredentialsv+0x184>)
 8082d62:	4668      	mov	r0, sp
 8082d64:	f008 fa62 	bl	808b22c <_ZNK6String6equalsEPKc>
 8082d68:	2800      	cmp	r0, #0
 8082d6a:	f000 8081 	beq.w	8082e70 <_Z24serialGetWifiCredentialsv+0x164>
        Serial.println("Password correct!");
 8082d6e:	f009 fbdb 	bl	808c528 <_Z16_fetch_usbserialv>
 8082d72:	4948      	ldr	r1, [pc, #288]	; (8082e94 <_Z24serialGetWifiCredentialsv+0x188>)
 8082d74:	f008 fb31 	bl	808b3da <_ZN5Print7printlnEPKc>
        Serial.println("Enter new ssid:");
 8082d78:	f009 fbd6 	bl	808c528 <_Z16_fetch_usbserialv>
 8082d7c:	4946      	ldr	r1, [pc, #280]	; (8082e98 <_Z24serialGetWifiCredentialsv+0x18c>)
 8082d7e:	f008 fb2c 	bl	808b3da <_ZN5Print7printlnEPKc>
        Serial.setTimeout(50000);
 8082d82:	f009 fbd1 	bl	808c528 <_Z16_fetch_usbserialv>
 8082d86:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082d8a:	f008 fcaa 	bl	808b6e2 <_ZN6Stream10setTimeoutEm>
        String tempSsid = Serial.readStringUntil('\r');
 8082d8e:	f009 fbcb 	bl	808c528 <_Z16_fetch_usbserialv>
 8082d92:	220d      	movs	r2, #13
 8082d94:	4601      	mov	r1, r0
 8082d96:	a804      	add	r0, sp, #16
 8082d98:	f008 fd10 	bl	808b7bc <_ZN6Stream15readStringUntilEc>
        Serial.print("Your new ssid will be: ");
 8082d9c:	f009 fbc4 	bl	808c528 <_Z16_fetch_usbserialv>
 8082da0:	493e      	ldr	r1, [pc, #248]	; (8082e9c <_Z24serialGetWifiCredentialsv+0x190>)
 8082da2:	f008 fb07 	bl	808b3b4 <_ZN5Print5printEPKc>
        Serial.println(tempSsid);
 8082da6:	f009 fbbf 	bl	808c528 <_Z16_fetch_usbserialv>
 8082daa:	9904      	ldr	r1, [sp, #16]
 8082dac:	f008 fb15 	bl	808b3da <_ZN5Print7printlnEPKc>
        Serial.println("Is this okay?(y or n)");
 8082db0:	f009 fbba 	bl	808c528 <_Z16_fetch_usbserialv>
 8082db4:	493a      	ldr	r1, [pc, #232]	; (8082ea0 <_Z24serialGetWifiCredentialsv+0x194>)
 8082db6:	f008 fb10 	bl	808b3da <_ZN5Print7printlnEPKc>
        String ok = Serial.readStringUntil('\r');
 8082dba:	f009 fbb5 	bl	808c528 <_Z16_fetch_usbserialv>
 8082dbe:	220d      	movs	r2, #13
 8082dc0:	4601      	mov	r1, r0
 8082dc2:	a808      	add	r0, sp, #32
 8082dc4:	f008 fcfa 	bl	808b7bc <_ZN6Stream15readStringUntilEc>
        if(ok.equals("y")){
 8082dc8:	4936      	ldr	r1, [pc, #216]	; (8082ea4 <_Z24serialGetWifiCredentialsv+0x198>)
 8082dca:	a808      	add	r0, sp, #32
 8082dcc:	f008 fa2e 	bl	808b22c <_ZNK6String6equalsEPKc>
 8082dd0:	2800      	cmp	r0, #0
 8082dd2:	d042      	beq.n	8082e5a <_Z24serialGetWifiCredentialsv+0x14e>
            Serial.println("Saving new ssid");
 8082dd4:	f009 fba8 	bl	808c528 <_Z16_fetch_usbserialv>
 8082dd8:	4933      	ldr	r1, [pc, #204]	; (8082ea8 <_Z24serialGetWifiCredentialsv+0x19c>)
 8082dda:	f008 fafe 	bl	808b3da <_ZN5Print7printlnEPKc>
            ssid = tempSsid;
 8082dde:	a904      	add	r1, sp, #16
 8082de0:	4628      	mov	r0, r5
 8082de2:	f008 f8fe 	bl	808afe2 <_ZN6StringaSERKS_>
            Serial.println("Enter new password");
 8082de6:	f009 fb9f 	bl	808c528 <_Z16_fetch_usbserialv>
 8082dea:	4930      	ldr	r1, [pc, #192]	; (8082eac <_Z24serialGetWifiCredentialsv+0x1a0>)
 8082dec:	f008 faf5 	bl	808b3da <_ZN5Print7printlnEPKc>
            String tempPassword = Serial.readStringUntil('\r');
 8082df0:	f009 fb9a 	bl	808c528 <_Z16_fetch_usbserialv>
 8082df4:	220d      	movs	r2, #13
 8082df6:	4601      	mov	r1, r0
 8082df8:	a80c      	add	r0, sp, #48	; 0x30
 8082dfa:	f008 fcdf 	bl	808b7bc <_ZN6Stream15readStringUntilEc>
            Serial.print("Your new password will be: ");
 8082dfe:	f009 fb93 	bl	808c528 <_Z16_fetch_usbserialv>
 8082e02:	492b      	ldr	r1, [pc, #172]	; (8082eb0 <_Z24serialGetWifiCredentialsv+0x1a4>)
 8082e04:	f008 fad6 	bl	808b3b4 <_ZN5Print5printEPKc>
            Serial.println(tempPassword);
 8082e08:	f009 fb8e 	bl	808c528 <_Z16_fetch_usbserialv>
 8082e0c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8082e0e:	f008 fae4 	bl	808b3da <_ZN5Print7printlnEPKc>
            String ok = Serial.readStringUntil('\r');
 8082e12:	f009 fb89 	bl	808c528 <_Z16_fetch_usbserialv>
 8082e16:	220d      	movs	r2, #13
 8082e18:	4601      	mov	r1, r0
 8082e1a:	a810      	add	r0, sp, #64	; 0x40
 8082e1c:	f008 fcce 	bl	808b7bc <_ZN6Stream15readStringUntilEc>
            if(ok.equals("y")){
 8082e20:	4920      	ldr	r1, [pc, #128]	; (8082ea4 <_Z24serialGetWifiCredentialsv+0x198>)
 8082e22:	a810      	add	r0, sp, #64	; 0x40
 8082e24:	f008 fa02 	bl	808b22c <_ZNK6String6equalsEPKc>
 8082e28:	b158      	cbz	r0, 8082e42 <_Z24serialGetWifiCredentialsv+0x136>
                Serial.println("Saving new password");
 8082e2a:	f009 fb7d 	bl	808c528 <_Z16_fetch_usbserialv>
 8082e2e:	4921      	ldr	r1, [pc, #132]	; (8082eb4 <_Z24serialGetWifiCredentialsv+0x1a8>)
 8082e30:	f008 fad3 	bl	808b3da <_ZN5Print7printlnEPKc>
                password = tempPassword;
 8082e34:	a90c      	add	r1, sp, #48	; 0x30
 8082e36:	4620      	mov	r0, r4
 8082e38:	f008 f8d3 	bl	808afe2 <_ZN6StringaSERKS_>
                sendWifiInfo();
 8082e3c:	f7ff f8f4 	bl	8082028 <_Z12sendWifiInfov>
 8082e40:	e004      	b.n	8082e4c <_Z24serialGetWifiCredentialsv+0x140>
            }else{
                Serial.println("okay, no problem\n\r");
 8082e42:	f009 fb71 	bl	808c528 <_Z16_fetch_usbserialv>
 8082e46:	491c      	ldr	r1, [pc, #112]	; (8082eb8 <_Z24serialGetWifiCredentialsv+0x1ac>)
 8082e48:	f008 fac7 	bl	808b3da <_ZN5Print7printlnEPKc>
            ssid = tempSsid;
            Serial.println("Enter new password");
            String tempPassword = Serial.readStringUntil('\r');
            Serial.print("Your new password will be: ");
            Serial.println(tempPassword);
            String ok = Serial.readStringUntil('\r');
 8082e4c:	a810      	add	r0, sp, #64	; 0x40
 8082e4e:	f008 f851 	bl	808aef4 <_ZN6StringD1Ev>
        String ok = Serial.readStringUntil('\r');
        if(ok.equals("y")){
            Serial.println("Saving new ssid");
            ssid = tempSsid;
            Serial.println("Enter new password");
            String tempPassword = Serial.readStringUntil('\r');
 8082e52:	a80c      	add	r0, sp, #48	; 0x30
 8082e54:	f008 f84e 	bl	808aef4 <_ZN6StringD1Ev>
 8082e58:	e004      	b.n	8082e64 <_Z24serialGetWifiCredentialsv+0x158>
                sendWifiInfo();
            }else{
                Serial.println("okay, no problem\n\r");
            }
        }else{
            Serial.println("okay, no problem\n\r");
 8082e5a:	f009 fb65 	bl	808c528 <_Z16_fetch_usbserialv>
 8082e5e:	4916      	ldr	r1, [pc, #88]	; (8082eb8 <_Z24serialGetWifiCredentialsv+0x1ac>)
 8082e60:	f008 fabb 	bl	808b3da <_ZN5Print7printlnEPKc>
            return;
 8082e64:	a808      	add	r0, sp, #32
 8082e66:	f008 f845 	bl	808aef4 <_ZN6StringD1Ev>
 8082e6a:	a804      	add	r0, sp, #16
 8082e6c:	f008 f842 	bl	808aef4 <_ZN6StringD1Ev>
    Serial.println(ssid);
    Serial.print("Current stored password: ");
    Serial.println(password);
    Serial.println("Please enter password in order to make changes.\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082e70:	4668      	mov	r0, sp
 8082e72:	f008 f83f 	bl	808aef4 <_ZN6StringD1Ev>
        }else{
            Serial.println("okay, no problem\n\r");
            return;
        }
    }
}
 8082e76:	b015      	add	sp, #84	; 0x54
 8082e78:	bd30      	pop	{r4, r5, pc}
 8082e7a:	bf00      	nop
 8082e7c:	2000020c 	.word	0x2000020c
 8082e80:	08091de7 	.word	0x08091de7
 8082e84:	200001d8 	.word	0x200001d8
 8082e88:	08091dfd 	.word	0x08091dfd
 8082e8c:	08091e17 	.word	0x08091e17
 8082e90:	08091e49 	.word	0x08091e49
 8082e94:	08091e4f 	.word	0x08091e4f
 8082e98:	08091e61 	.word	0x08091e61
 8082e9c:	08091e71 	.word	0x08091e71
 8082ea0:	08091e89 	.word	0x08091e89
 8082ea4:	0809476e 	.word	0x0809476e
 8082ea8:	08091e9f 	.word	0x08091e9f
 8082eac:	08091eaf 	.word	0x08091eaf
 8082eb0:	08091ec2 	.word	0x08091ec2
 8082eb4:	08091ede 	.word	0x08091ede
 8082eb8:	08091ef2 	.word	0x08091ef2

08082ebc <_Z26serialSetSensibleIotEnablev>:
void serialSetSensibleIotEnable(void){
 8082ebc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    Serial.println("Please enter password in order to enable data push to Sensible Iot");
 8082ebe:	f009 fb33 	bl	808c528 <_Z16_fetch_usbserialv>
 8082ec2:	4919      	ldr	r1, [pc, #100]	; (8082f28 <_Z26serialSetSensibleIotEnablev+0x6c>)
 8082ec4:	f008 fa89 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082ec8:	f009 fb2e 	bl	808c528 <_Z16_fetch_usbserialv>
 8082ecc:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082ed0:	f008 fc07 	bl	808b6e2 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082ed4:	f009 fb28 	bl	808c528 <_Z16_fetch_usbserialv>
 8082ed8:	220d      	movs	r2, #13
 8082eda:	4601      	mov	r1, r0
 8082edc:	4668      	mov	r0, sp
 8082ede:	f008 fc6d 	bl	808b7bc <_ZN6Stream15readStringUntilEc>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8082ee2:	4912      	ldr	r1, [pc, #72]	; (8082f2c <_Z26serialSetSensibleIotEnablev+0x70>)
 8082ee4:	4668      	mov	r0, sp
 8082ee6:	f008 f9a1 	bl	808b22c <_ZNK6String6equalsEPKc>
    if(tempString == "imsensible"){
 8082eea:	b198      	cbz	r0, 8082f14 <_Z26serialSetSensibleIotEnablev+0x58>
        Serial.println("Password correct!");
 8082eec:	f009 fb1c 	bl	808c528 <_Z16_fetch_usbserialv>
 8082ef0:	490f      	ldr	r1, [pc, #60]	; (8082f30 <_Z26serialSetSensibleIotEnablev+0x74>)
 8082ef2:	f008 fa72 	bl	808b3da <_ZN5Print7printlnEPKc>
        Serial.println("Enabling sensible iot data push.");
        sensible_iot_en = 1;
 8082ef6:	4c0f      	ldr	r4, [pc, #60]	; (8082f34 <_Z26serialSetSensibleIotEnablev+0x78>)
    Serial.println("Please enter password in order to enable data push to Sensible Iot");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    if(tempString == "imsensible"){
        Serial.println("Password correct!");
        Serial.println("Enabling sensible iot data push.");
 8082ef8:	f009 fb16 	bl	808c528 <_Z16_fetch_usbserialv>
 8082efc:	490e      	ldr	r1, [pc, #56]	; (8082f38 <_Z26serialSetSensibleIotEnablev+0x7c>)
 8082efe:	f008 fa6c 	bl	808b3da <_ZN5Print7printlnEPKc>
        sensible_iot_en = 1;
 8082f02:	2301      	movs	r3, #1
 8082f04:	6023      	str	r3, [r4, #0]
        EEPROM.put(SENSIBLEIOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 8082f06:	f009 fec9 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8082f0a:	4621      	mov	r1, r4
 8082f0c:	208c      	movs	r0, #140	; 0x8c
 8082f0e:	f7fd fefb 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 8082f12:	e004      	b.n	8082f1e <_Z26serialSetSensibleIotEnablev+0x62>
    }else{
        Serial.println("\n\rIncorrect password!");
 8082f14:	f009 fb08 	bl	808c528 <_Z16_fetch_usbserialv>
 8082f18:	4908      	ldr	r1, [pc, #32]	; (8082f3c <_Z26serialSetSensibleIotEnablev+0x80>)
 8082f1a:	f008 fa5e 	bl	808b3da <_ZN5Print7printlnEPKc>
    }
}
void serialSetSensibleIotEnable(void){
    Serial.println("Please enter password in order to enable data push to Sensible Iot");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082f1e:	4668      	mov	r0, sp
 8082f20:	f007 ffe8 	bl	808aef4 <_ZN6StringD1Ev>
        sensible_iot_en = 1;
        EEPROM.put(SENSIBLEIOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
 8082f24:	b004      	add	sp, #16
 8082f26:	bd10      	pop	{r4, pc}
 8082f28:	08091f05 	.word	0x08091f05
 8082f2c:	08091f48 	.word	0x08091f48
 8082f30:	08091e4f 	.word	0x08091e4f
 8082f34:	2000085c 	.word	0x2000085c
 8082f38:	08091f53 	.word	0x08091f53
 8082f3c:	08091f74 	.word	0x08091f74

08082f40 <_Z17serialGetDeviceIdv>:

void serialGetDeviceId(void){
 8082f40:	b530      	push	{r4, r5, lr}
 8082f42:	b089      	sub	sp, #36	; 0x24

    Serial.println();
 8082f44:	f009 faf0 	bl	808c528 <_Z16_fetch_usbserialv>
    Serial.print("Current Device ID:");
    Serial.println(DEVICE_id);
 8082f48:	4c35      	ldr	r4, [pc, #212]	; (8083020 <_Z17serialGetDeviceIdv+0xe0>)
    }
}

void serialGetDeviceId(void){

    Serial.println();
 8082f4a:	f008 fa3a 	bl	808b3c2 <_ZN5Print7printlnEv>
    Serial.print("Current Device ID:");
 8082f4e:	f009 faeb 	bl	808c528 <_Z16_fetch_usbserialv>
 8082f52:	4934      	ldr	r1, [pc, #208]	; (8083024 <_Z17serialGetDeviceIdv+0xe4>)
 8082f54:	f008 fa2e 	bl	808b3b4 <_ZN5Print5printEPKc>
    Serial.println(DEVICE_id);
 8082f58:	f009 fae6 	bl	808c528 <_Z16_fetch_usbserialv>
 8082f5c:	220a      	movs	r2, #10
 8082f5e:	6821      	ldr	r1, [r4, #0]
 8082f60:	f008 faa9 	bl	808b4b6 <_ZN5Print7printlnEii>
    Serial.println("Please enter password in order to change the ID");
 8082f64:	f009 fae0 	bl	808c528 <_Z16_fetch_usbserialv>
 8082f68:	492f      	ldr	r1, [pc, #188]	; (8083028 <_Z17serialGetDeviceIdv+0xe8>)
 8082f6a:	f008 fa36 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082f6e:	f009 fadb 	bl	808c528 <_Z16_fetch_usbserialv>
 8082f72:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082f76:	f008 fbb4 	bl	808b6e2 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082f7a:	f009 fad5 	bl	808c528 <_Z16_fetch_usbserialv>
 8082f7e:	220d      	movs	r2, #13
 8082f80:	4601      	mov	r1, r0
 8082f82:	4668      	mov	r0, sp
 8082f84:	f008 fc1a 	bl	808b7bc <_ZN6Stream15readStringUntilEc>
 8082f88:	4928      	ldr	r1, [pc, #160]	; (808302c <_Z17serialGetDeviceIdv+0xec>)
 8082f8a:	4668      	mov	r0, sp
 8082f8c:	f008 f94e 	bl	808b22c <_ZNK6String6equalsEPKc>


    if(tempString == "bould"){
 8082f90:	2800      	cmp	r0, #0
 8082f92:	d03a      	beq.n	808300a <_Z17serialGetDeviceIdv+0xca>
        Serial.println("Password correct!");
 8082f94:	f009 fac8 	bl	808c528 <_Z16_fetch_usbserialv>
 8082f98:	4925      	ldr	r1, [pc, #148]	; (8083030 <_Z17serialGetDeviceIdv+0xf0>)
 8082f9a:	f008 fa1e 	bl	808b3da <_ZN5Print7printlnEPKc>
        Serial.println("Enter new Device ID:");
 8082f9e:	f009 fac3 	bl	808c528 <_Z16_fetch_usbserialv>
 8082fa2:	4924      	ldr	r1, [pc, #144]	; (8083034 <_Z17serialGetDeviceIdv+0xf4>)
 8082fa4:	f008 fa19 	bl	808b3da <_ZN5Print7printlnEPKc>
        String tempString = Serial.readStringUntil('\r');
 8082fa8:	f009 fabe 	bl	808c528 <_Z16_fetch_usbserialv>
 8082fac:	220d      	movs	r2, #13
 8082fae:	4601      	mov	r1, r0
 8082fb0:	a804      	add	r0, sp, #16
 8082fb2:	f008 fc03 	bl	808b7bc <_ZN6Stream15readStringUntilEc>
        int tempValue = tempString.toInt();
 8082fb6:	a804      	add	r0, sp, #16
 8082fb8:	f008 f9ae 	bl	808b318 <_ZNK6String5toIntEv>
 8082fbc:	4605      	mov	r5, r0
        Serial.println("");
 8082fbe:	f009 fab3 	bl	808c528 <_Z16_fetch_usbserialv>
 8082fc2:	491d      	ldr	r1, [pc, #116]	; (8083038 <_Z17serialGetDeviceIdv+0xf8>)
 8082fc4:	f008 fa09 	bl	808b3da <_ZN5Print7printlnEPKc>
        if(tempValue > MIN_DEVICE_ID_NUMBER && tempValue < MAX_DEVICE_ID_NUMBER){
 8082fc8:	f242 730c 	movw	r3, #9996	; 0x270c
 8082fcc:	1eaa      	subs	r2, r5, #2
 8082fce:	429a      	cmp	r2, r3
 8082fd0:	d812      	bhi.n	8082ff8 <_Z17serialGetDeviceIdv+0xb8>
            Serial.print("\n\rNew Device ID:");
 8082fd2:	f009 faa9 	bl	808c528 <_Z16_fetch_usbserialv>
 8082fd6:	4919      	ldr	r1, [pc, #100]	; (808303c <_Z17serialGetDeviceIdv+0xfc>)
 8082fd8:	f008 f9ec 	bl	808b3b4 <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 8082fdc:	f009 faa4 	bl	808c528 <_Z16_fetch_usbserialv>
 8082fe0:	4629      	mov	r1, r5
 8082fe2:	220a      	movs	r2, #10
 8082fe4:	f008 fa67 	bl	808b4b6 <_ZN5Print7printlnEii>
            DEVICE_id = tempValue;
 8082fe8:	6025      	str	r5, [r4, #0]
            EEPROM.put(DEVICE_ID_MEM_ADDRESS, DEVICE_id);
 8082fea:	f009 fe57 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8082fee:	4621      	mov	r1, r4
 8082ff0:	2000      	movs	r0, #0
 8082ff2:	f7fd fe89 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 8082ff6:	e004      	b.n	8083002 <_Z17serialGetDeviceIdv+0xc2>
        }else{
            Serial.println("\n\rInvalid value!");
 8082ff8:	f009 fa96 	bl	808c528 <_Z16_fetch_usbserialv>
 8082ffc:	4910      	ldr	r1, [pc, #64]	; (8083040 <_Z17serialGetDeviceIdv+0x100>)
 8082ffe:	f008 f9ec 	bl	808b3da <_ZN5Print7printlnEPKc>


    if(tempString == "bould"){
        Serial.println("Password correct!");
        Serial.println("Enter new Device ID:");
        String tempString = Serial.readStringUntil('\r');
 8083002:	a804      	add	r0, sp, #16
 8083004:	f007 ff76 	bl	808aef4 <_ZN6StringD1Ev>
 8083008:	e004      	b.n	8083014 <_Z17serialGetDeviceIdv+0xd4>
            EEPROM.put(DEVICE_ID_MEM_ADDRESS, DEVICE_id);
        }else{
            Serial.println("\n\rInvalid value!");
        }
    }else{
        Serial.println("\n\rIncorrect password!");
 808300a:	f009 fa8d 	bl	808c528 <_Z16_fetch_usbserialv>
 808300e:	490d      	ldr	r1, [pc, #52]	; (8083044 <_Z17serialGetDeviceIdv+0x104>)
 8083010:	f008 f9e3 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println();
    Serial.print("Current Device ID:");
    Serial.println(DEVICE_id);
    Serial.println("Please enter password in order to change the ID");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083014:	4668      	mov	r0, sp
 8083016:	f007 ff6d 	bl	808aef4 <_ZN6StringD1Ev>
            Serial.println("\n\rInvalid value!");
        }
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
 808301a:	b009      	add	sp, #36	; 0x24
 808301c:	bd30      	pop	{r4, r5, pc}
 808301e:	bf00      	nop
 8083020:	20000088 	.word	0x20000088
 8083024:	08091f8a 	.word	0x08091f8a
 8083028:	08091f9d 	.word	0x08091f9d
 808302c:	08091e49 	.word	0x08091e49
 8083030:	08091e4f 	.word	0x08091e4f
 8083034:	08091fcd 	.word	0x08091fcd
 8083038:	08094100 	.word	0x08094100
 808303c:	08091fe2 	.word	0x08091fe2
 8083040:	08091ff3 	.word	0x08091ff3
 8083044:	08091f74 	.word	0x08091f74

08083048 <_Z19serialResetSettingsv>:

void serialResetSettings(void){
 8083048:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    Serial.println();
 808304a:	f009 fa6d 	bl	808c528 <_Z16_fetch_usbserialv>
 808304e:	f008 f9b8 	bl	808b3c2 <_ZN5Print7printlnEv>
    Serial.println("Please enter password in order to apply default settings");
 8083052:	f009 fa69 	bl	808c528 <_Z16_fetch_usbserialv>
 8083056:	4914      	ldr	r1, [pc, #80]	; (80830a8 <_Z19serialResetSettingsv+0x60>)
 8083058:	f008 f9bf 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 808305c:	f009 fa64 	bl	808c528 <_Z16_fetch_usbserialv>
 8083060:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083064:	f008 fb3d 	bl	808b6e2 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083068:	f009 fa5e 	bl	808c528 <_Z16_fetch_usbserialv>
 808306c:	220d      	movs	r2, #13
 808306e:	4601      	mov	r1, r0
 8083070:	4668      	mov	r0, sp
 8083072:	f008 fba3 	bl	808b7bc <_ZN6Stream15readStringUntilEc>
 8083076:	490d      	ldr	r1, [pc, #52]	; (80830ac <_Z19serialResetSettingsv+0x64>)
 8083078:	4668      	mov	r0, sp
 808307a:	f008 f8d7 	bl	808b22c <_ZNK6String6equalsEPKc>


    if(tempString == "bould"){
 808307e:	b138      	cbz	r0, 8083090 <_Z19serialResetSettingsv+0x48>
        Serial.println("Password correct, resetting all settings to default!  Please reset your ID to the one shown on your enclosure.");
 8083080:	f009 fa52 	bl	808c528 <_Z16_fetch_usbserialv>
 8083084:	490a      	ldr	r1, [pc, #40]	; (80830b0 <_Z19serialResetSettingsv+0x68>)
 8083086:	f008 f9a8 	bl	808b3da <_ZN5Print7printlnEPKc>
        writeDefaultSettings();
 808308a:	f7fd ff5f 	bl	8080f4c <_Z20writeDefaultSettingsv>
 808308e:	e004      	b.n	808309a <_Z19serialResetSettingsv+0x52>
    }else{
        Serial.println("\n\rIncorrect password!");
 8083090:	f009 fa4a 	bl	808c528 <_Z16_fetch_usbserialv>
 8083094:	4907      	ldr	r1, [pc, #28]	; (80830b4 <_Z19serialResetSettingsv+0x6c>)
 8083096:	f008 f9a0 	bl	808b3da <_ZN5Print7printlnEPKc>
void serialResetSettings(void){

    Serial.println();
    Serial.println("Please enter password in order to apply default settings");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 808309a:	4668      	mov	r0, sp
 808309c:	f007 ff2a 	bl	808aef4 <_ZN6StringD1Ev>
        Serial.println("Password correct, resetting all settings to default!  Please reset your ID to the one shown on your enclosure.");
        writeDefaultSettings();
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
 80830a0:	b005      	add	sp, #20
 80830a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80830a6:	bf00      	nop
 80830a8:	08092004 	.word	0x08092004
 80830ac:	08091e49 	.word	0x08091e49
 80830b0:	0809203d 	.word	0x0809203d
 80830b4:	08091f74 	.word	0x08091f74

080830b8 <_Z17serialGetTimeDatev>:

void serialGetTimeDate(void){
 80830b8:	b510      	push	{r4, lr}
 80830ba:	b088      	sub	sp, #32
    Serial.println("Enter new Device time and date (10 digit epoch timestamp):");
 80830bc:	f009 fa34 	bl	808c528 <_Z16_fetch_usbserialv>
 80830c0:	491f      	ldr	r1, [pc, #124]	; (8083140 <_Z17serialGetTimeDatev+0x88>)
 80830c2:	f008 f98a 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 80830c6:	f009 fa2f 	bl	808c528 <_Z16_fetch_usbserialv>
 80830ca:	f24c 3150 	movw	r1, #50000	; 0xc350
 80830ce:	f008 fb08 	bl	808b6e2 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80830d2:	f009 fa29 	bl	808c528 <_Z16_fetch_usbserialv>
 80830d6:	220d      	movs	r2, #13
 80830d8:	4601      	mov	r1, r0
 80830da:	4668      	mov	r0, sp
 80830dc:	f008 fb6e 	bl	808b7bc <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 80830e0:	4668      	mov	r0, sp
 80830e2:	f008 f919 	bl	808b318 <_ZNK6String5toIntEv>
 80830e6:	4604      	mov	r4, r0
    Serial.println("");
 80830e8:	f009 fa1e 	bl	808c528 <_Z16_fetch_usbserialv>
 80830ec:	4915      	ldr	r1, [pc, #84]	; (8083144 <_Z17serialGetTimeDatev+0x8c>)
 80830ee:	f008 f974 	bl	808b3da <_ZN5Print7printlnEPKc>
    if(tempValue > 966012661 && tempValue < 4121686261){       //min is the year 2000, max is the year 2100
 80830f2:	4b15      	ldr	r3, [pc, #84]	; (8083148 <_Z17serialGetTimeDatev+0x90>)
 80830f4:	429c      	cmp	r4, r3
 80830f6:	dd18      	ble.n	808312a <_Z17serialGetTimeDatev+0x72>
        Time.setTime(tempValue);
 80830f8:	4620      	mov	r0, r4
 80830fa:	f008 fbed 	bl	808b8d8 <_ZN9TimeClass7setTimeEl>
        Serial.print("\n\rNew Device Time:");
 80830fe:	f009 fa13 	bl	808c528 <_Z16_fetch_usbserialv>
 8083102:	4912      	ldr	r1, [pc, #72]	; (808314c <_Z17serialGetTimeDatev+0x94>)
 8083104:	f008 f956 	bl	808b3b4 <_ZN5Print5printEPKc>
        Serial.println(Time.timeStr());
 8083108:	f009 fa0e 	bl	808c528 <_Z16_fetch_usbserialv>
 808310c:	4604      	mov	r4, r0
 808310e:	f008 fcc0 	bl	808ba92 <_ZN9TimeClass3nowEv>
 8083112:	4601      	mov	r1, r0
 8083114:	a804      	add	r0, sp, #16
 8083116:	f008 fbe9 	bl	808b8ec <_ZN9TimeClass7timeStrEl>
 808311a:	9904      	ldr	r1, [sp, #16]
 808311c:	4620      	mov	r0, r4
 808311e:	f008 f95c 	bl	808b3da <_ZN5Print7printlnEPKc>
 8083122:	a804      	add	r0, sp, #16
 8083124:	f007 fee6 	bl	808aef4 <_ZN6StringD1Ev>
 8083128:	e004      	b.n	8083134 <_Z17serialGetTimeDatev+0x7c>
    }else{
        Serial.println("\n\rInvalid value!");
 808312a:	f009 f9fd 	bl	808c528 <_Z16_fetch_usbserialv>
 808312e:	4908      	ldr	r1, [pc, #32]	; (8083150 <_Z17serialGetTimeDatev+0x98>)
 8083130:	f008 f953 	bl	808b3da <_ZN5Print7printlnEPKc>
}

void serialGetTimeDate(void){
    Serial.println("Enter new Device time and date (10 digit epoch timestamp):");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083134:	4668      	mov	r0, sp
 8083136:	f007 fedd 	bl	808aef4 <_ZN6StringD1Ev>
        Serial.print("\n\rNew Device Time:");
        Serial.println(Time.timeStr());
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 808313a:	b008      	add	sp, #32
 808313c:	bd10      	pop	{r4, pc}
 808313e:	bf00      	nop
 8083140:	080920ac 	.word	0x080920ac
 8083144:	08094100 	.word	0x08094100
 8083148:	39942ef5 	.word	0x39942ef5
 808314c:	080920e7 	.word	0x080920e7
 8083150:	08091ff3 	.word	0x08091ff3

08083154 <_Z13serialGetZonev>:

void serialGetZone(void){
 8083154:	b510      	push	{r4, lr}
 8083156:	b086      	sub	sp, #24
    Serial.println("Enter new Device time zone (-12.0 to 14.0)");
 8083158:	f009 f9e6 	bl	808c528 <_Z16_fetch_usbserialv>
 808315c:	491f      	ldr	r1, [pc, #124]	; (80831dc <_Z13serialGetZonev+0x88>)
 808315e:	f008 f93c 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8083162:	f009 f9e1 	bl	808c528 <_Z16_fetch_usbserialv>
 8083166:	f24c 3150 	movw	r1, #50000	; 0xc350
 808316a:	f008 faba 	bl	808b6e2 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 808316e:	f009 f9db 	bl	808c528 <_Z16_fetch_usbserialv>
 8083172:	220d      	movs	r2, #13
 8083174:	4601      	mov	r1, r0
 8083176:	a802      	add	r0, sp, #8
 8083178:	f008 fb20 	bl	808b7bc <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 808317c:	a802      	add	r0, sp, #8
 808317e:	f008 f8cb 	bl	808b318 <_ZNK6String5toIntEv>
 8083182:	9001      	str	r0, [sp, #4]
    Serial.println("");
 8083184:	f009 f9d0 	bl	808c528 <_Z16_fetch_usbserialv>
 8083188:	4915      	ldr	r1, [pc, #84]	; (80831e0 <_Z13serialGetZonev+0x8c>)
 808318a:	f008 f926 	bl	808b3da <_ZN5Print7printlnEPKc>
    if(tempValue >= -12 && tempValue <= 14){       //min is the year 2000, max is the year 2100
 808318e:	9801      	ldr	r0, [sp, #4]
 8083190:	f100 030c 	add.w	r3, r0, #12
 8083194:	2b1a      	cmp	r3, #26
 8083196:	d817      	bhi.n	80831c8 <_Z13serialGetZonev+0x74>
        Time.zone(tempValue);
 8083198:	f00a fcf8 	bl	808db8c <__aeabi_i2f>
 808319c:	f008 fb80 	bl	808b8a0 <_ZN9TimeClass4zoneEf>
        Serial.print("\n\rNew Device time zone:");
        Serial.println(tempValue);
 80831a0:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();
    Serial.println("");
    if(tempValue >= -12 && tempValue <= 14){       //min is the year 2000, max is the year 2100
        Time.zone(tempValue);
        Serial.print("\n\rNew Device time zone:");
 80831a2:	f009 f9c1 	bl	808c528 <_Z16_fetch_usbserialv>
 80831a6:	490f      	ldr	r1, [pc, #60]	; (80831e4 <_Z13serialGetZonev+0x90>)
 80831a8:	f008 f904 	bl	808b3b4 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 80831ac:	f009 f9bc 	bl	808c528 <_Z16_fetch_usbserialv>
 80831b0:	f854 1d14 	ldr.w	r1, [r4, #-20]!
 80831b4:	220a      	movs	r2, #10
 80831b6:	f008 f97e 	bl	808b4b6 <_ZN5Print7printlnEii>
        EEPROM.put(TIME_ZONE_MEM_ADDRESS, tempValue);
 80831ba:	f009 fd6f 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 80831be:	4621      	mov	r1, r4
 80831c0:	2054      	movs	r0, #84	; 0x54
 80831c2:	f7fd fda1 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 80831c6:	e004      	b.n	80831d2 <_Z13serialGetZonev+0x7e>
    }else{
        Serial.println("\n\rInvalid value!");
 80831c8:	f009 f9ae 	bl	808c528 <_Z16_fetch_usbserialv>
 80831cc:	4906      	ldr	r1, [pc, #24]	; (80831e8 <_Z13serialGetZonev+0x94>)
 80831ce:	f008 f904 	bl	808b3da <_ZN5Print7printlnEPKc>
}

void serialGetZone(void){
    Serial.println("Enter new Device time zone (-12.0 to 14.0)");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 80831d2:	a802      	add	r0, sp, #8
 80831d4:	f007 fe8e 	bl	808aef4 <_ZN6StringD1Ev>
        Serial.println(tempValue);
        EEPROM.put(TIME_ZONE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 80831d8:	b006      	add	sp, #24
 80831da:	bd10      	pop	{r4, pc}
 80831dc:	080920fa 	.word	0x080920fa
 80831e0:	08094100 	.word	0x08094100
 80831e4:	08092125 	.word	0x08092125
 80831e8:	08091ff3 	.word	0x08091ff3

080831ec <_Z20serialGetAverageTimev>:

void serialGetAverageTime(void){
 80831ec:	b530      	push	{r4, r5, lr}
 80831ee:	b087      	sub	sp, #28
    Serial.println();
 80831f0:	f009 f99a 	bl	808c528 <_Z16_fetch_usbserialv>
    Serial.print("Current Frequency: ");
    Serial.print(measurements_to_average);
 80831f4:	4d29      	ldr	r5, [pc, #164]	; (808329c <_Z20serialGetAverageTimev+0xb0>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetAverageTime(void){
    Serial.println();
 80831f6:	f008 f8e4 	bl	808b3c2 <_ZN5Print7printlnEv>
    Serial.print("Current Frequency: ");
 80831fa:	f009 f995 	bl	808c528 <_Z16_fetch_usbserialv>
 80831fe:	4928      	ldr	r1, [pc, #160]	; (80832a0 <_Z20serialGetAverageTimev+0xb4>)
 8083200:	f008 f8d8 	bl	808b3b4 <_ZN5Print5printEPKc>
    Serial.print(measurements_to_average);
 8083204:	f009 f990 	bl	808c528 <_Z16_fetch_usbserialv>
 8083208:	220a      	movs	r2, #10
 808320a:	6829      	ldr	r1, [r5, #0]
 808320c:	f008 f951 	bl	808b4b2 <_ZN5Print5printEii>
    Serial.println("(~2 second) measurements");
 8083210:	f009 f98a 	bl	808c528 <_Z16_fetch_usbserialv>
 8083214:	4923      	ldr	r1, [pc, #140]	; (80832a4 <_Z20serialGetAverageTimev+0xb8>)
 8083216:	f008 f8e0 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.print("Enter new amount\n\r");
 808321a:	f009 f985 	bl	808c528 <_Z16_fetch_usbserialv>
 808321e:	4922      	ldr	r1, [pc, #136]	; (80832a8 <_Z20serialGetAverageTimev+0xbc>)
 8083220:	f008 f8c8 	bl	808b3b4 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083224:	f009 f980 	bl	808c528 <_Z16_fetch_usbserialv>
 8083228:	f24c 3150 	movw	r1, #50000	; 0xc350
 808322c:	f008 fa59 	bl	808b6e2 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083230:	f009 f97a 	bl	808c528 <_Z16_fetch_usbserialv>
 8083234:	220d      	movs	r2, #13
 8083236:	4601      	mov	r1, r0
 8083238:	a802      	add	r0, sp, #8
 808323a:	f008 fabf 	bl	808b7bc <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 808323e:	a802      	add	r0, sp, #8
 8083240:	f008 f86a 	bl	808b318 <_ZNK6String5toIntEv>

    if(tempValue >= 1 && tempValue < 10000){
 8083244:	f242 730e 	movw	r3, #9998	; 0x270e
    Serial.print(measurements_to_average);
    Serial.println("(~2 second) measurements");
    Serial.print("Enter new amount\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();
 8083248:	9001      	str	r0, [sp, #4]

    if(tempValue >= 1 && tempValue < 10000){
 808324a:	3801      	subs	r0, #1
 808324c:	4298      	cmp	r0, r3
 808324e:	d81a      	bhi.n	8083286 <_Z20serialGetAverageTimev+0x9a>
        Serial.print("\n\rNew Frequency: ");
 8083250:	f009 f96a 	bl	808c528 <_Z16_fetch_usbserialv>
 8083254:	4915      	ldr	r1, [pc, #84]	; (80832ac <_Z20serialGetAverageTimev+0xc0>)
 8083256:	f008 f8ad 	bl	808b3b4 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 808325a:	f009 f965 	bl	808c528 <_Z16_fetch_usbserialv>
 808325e:	220a      	movs	r2, #10
 8083260:	9901      	ldr	r1, [sp, #4]
 8083262:	f008 f928 	bl	808b4b6 <_ZN5Print7printlnEii>
        Serial.println("(~2 second) measurements");
        measurements_to_average = tempValue;
 8083266:	ac06      	add	r4, sp, #24
    int tempValue = tempString.toInt();

    if(tempValue >= 1 && tempValue < 10000){
        Serial.print("\n\rNew Frequency: ");
        Serial.println(tempValue);
        Serial.println("(~2 second) measurements");
 8083268:	f009 f95e 	bl	808c528 <_Z16_fetch_usbserialv>
 808326c:	490d      	ldr	r1, [pc, #52]	; (80832a4 <_Z20serialGetAverageTimev+0xb8>)
 808326e:	f008 f8b4 	bl	808b3da <_ZN5Print7printlnEPKc>
        measurements_to_average = tempValue;
 8083272:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8083276:	602b      	str	r3, [r5, #0]
        EEPROM.put(MEASUREMENTS_TO_AVG_MEM_ADDRESS, tempValue);
 8083278:	f009 fd10 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 808327c:	4621      	mov	r1, r4
 808327e:	2074      	movs	r0, #116	; 0x74
 8083280:	f7fd fd42 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 8083284:	e004      	b.n	8083290 <_Z20serialGetAverageTimev+0xa4>
    }else{
        Serial.println("\n\rInvalid value!");
 8083286:	f009 f94f 	bl	808c528 <_Z16_fetch_usbserialv>
 808328a:	4909      	ldr	r1, [pc, #36]	; (80832b0 <_Z20serialGetAverageTimev+0xc4>)
 808328c:	f008 f8a5 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.print("Current Frequency: ");
    Serial.print(measurements_to_average);
    Serial.println("(~2 second) measurements");
    Serial.print("Enter new amount\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083290:	a802      	add	r0, sp, #8
 8083292:	f007 fe2f 	bl	808aef4 <_ZN6StringD1Ev>
        measurements_to_average = tempValue;
        EEPROM.put(MEASUREMENTS_TO_AVG_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083296:	b007      	add	sp, #28
 8083298:	bd30      	pop	{r4, r5, pc}
 808329a:	bf00      	nop
 808329c:	20000b04 	.word	0x20000b04
 80832a0:	0809213d 	.word	0x0809213d
 80832a4:	08092151 	.word	0x08092151
 80832a8:	0809216a 	.word	0x0809216a
 80832ac:	0809217d 	.word	0x0809217d
 80832b0:	08091ff3 	.word	0x08091ff3

080832b4 <_Z17serialGetCo2Slopev>:

void serialGetCo2Slope(void){
 80832b4:	b530      	push	{r4, r5, lr}
 80832b6:	b08b      	sub	sp, #44	; 0x2c

    Serial.println();
 80832b8:	f009 f936 	bl	808c528 <_Z16_fetch_usbserialv>
 80832bc:	f008 f881 	bl	808b3c2 <_ZN5Print7printlnEv>
    Serial.print("Current CO2 slope:");
 80832c0:	f009 f932 	bl	808c528 <_Z16_fetch_usbserialv>
 80832c4:	4932      	ldr	r1, [pc, #200]	; (8083390 <_Z17serialGetCo2Slopev+0xdc>)
 80832c6:	f008 f875 	bl	808b3b4 <_ZN5Print5printEPKc>
    Serial.print(String(CO2_slope, 2));
 80832ca:	f009 f92d 	bl	808c528 <_Z16_fetch_usbserialv>
 80832ce:	4605      	mov	r5, r0
 80832d0:	4c30      	ldr	r4, [pc, #192]	; (8083394 <_Z17serialGetCo2Slopev+0xe0>)
 80832d2:	2202      	movs	r2, #2
 80832d4:	6821      	ldr	r1, [r4, #0]
 80832d6:	a806      	add	r0, sp, #24
 80832d8:	f007 feed 	bl	808b0b6 <_ZN6StringC1Efi>
 80832dc:	9906      	ldr	r1, [sp, #24]
 80832de:	4628      	mov	r0, r5
 80832e0:	f008 f868 	bl	808b3b4 <_ZN5Print5printEPKc>
 80832e4:	a806      	add	r0, sp, #24
 80832e6:	f007 fe05 	bl	808aef4 <_ZN6StringD1Ev>
    Serial.println(" ppm");
 80832ea:	f009 f91d 	bl	808c528 <_Z16_fetch_usbserialv>
 80832ee:	492a      	ldr	r1, [pc, #168]	; (8083398 <_Z17serialGetCo2Slopev+0xe4>)
 80832f0:	f008 f873 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO2 slope\n\r");
 80832f4:	f009 f918 	bl	808c528 <_Z16_fetch_usbserialv>
 80832f8:	4928      	ldr	r1, [pc, #160]	; (808339c <_Z17serialGetCo2Slopev+0xe8>)
 80832fa:	f008 f85b 	bl	808b3b4 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 80832fe:	f009 f913 	bl	808c528 <_Z16_fetch_usbserialv>
 8083302:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083306:	f008 f9ec 	bl	808b6e2 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 808330a:	f009 f90d 	bl	808c528 <_Z16_fetch_usbserialv>
 808330e:	220d      	movs	r2, #13
 8083310:	4601      	mov	r1, r0
 8083312:	a802      	add	r0, sp, #8
 8083314:	f008 fa52 	bl	808b7bc <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083318:	a802      	add	r0, sp, #8
 808331a:	f008 f802 	bl	808b322 <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 10.0){
 808331e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(CO2_slope, 2));
    Serial.println(" ppm");
    Serial.print("Enter new CO2 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 8083322:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 10.0){
 8083324:	f00a fe38 	bl	808df98 <__aeabi_fcmpge>
 8083328:	b338      	cbz	r0, 808337a <_Z17serialGetCo2Slopev+0xc6>
 808332a:	491d      	ldr	r1, [pc, #116]	; (80833a0 <_Z17serialGetCo2Slopev+0xec>)
 808332c:	4628      	mov	r0, r5
 808332e:	f00a fe1f 	bl	808df70 <__aeabi_fcmplt>
 8083332:	b310      	cbz	r0, 808337a <_Z17serialGetCo2Slopev+0xc6>
        CO2_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 8083334:	491b      	ldr	r1, [pc, #108]	; (80833a4 <_Z17serialGetCo2Slopev+0xf0>)
 8083336:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 10.0){
        CO2_slope = tempfloat;
 8083338:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 808333a:	f00a fc7b 	bl	808dc34 <__aeabi_fmul>
 808333e:	f00a fe3f 	bl	808dfc0 <__aeabi_f2iz>
 8083342:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew CO2 slope: ");
 8083344:	f009 f8f0 	bl	808c528 <_Z16_fetch_usbserialv>
 8083348:	4917      	ldr	r1, [pc, #92]	; (80833a8 <_Z17serialGetCo2Slopev+0xf4>)
 808334a:	f008 f833 	bl	808b3b4 <_ZN5Print5printEPKc>
        Serial.println(String(CO2_slope,2));
 808334e:	f009 f8eb 	bl	808c528 <_Z16_fetch_usbserialv>
 8083352:	4605      	mov	r5, r0
 8083354:	2202      	movs	r2, #2
 8083356:	6821      	ldr	r1, [r4, #0]
 8083358:	a806      	add	r0, sp, #24
 808335a:	f007 feac 	bl	808b0b6 <_ZN6StringC1Efi>
 808335e:	9906      	ldr	r1, [sp, #24]
 8083360:	4628      	mov	r0, r5
 8083362:	f008 f83a 	bl	808b3da <_ZN5Print7printlnEPKc>
 8083366:	a806      	add	r0, sp, #24
 8083368:	f007 fdc4 	bl	808aef4 <_ZN6StringD1Ev>

        EEPROM.put(CO2_SLOPE_MEM_ADDRESS, tempValue);
 808336c:	f009 fc96 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8083370:	a901      	add	r1, sp, #4
 8083372:	2008      	movs	r0, #8
 8083374:	f7fd fcc8 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 8083378:	e004      	b.n	8083384 <_Z17serialGetCo2Slopev+0xd0>
    }else{
        Serial.println("\n\rInvalid value!");
 808337a:	f009 f8d5 	bl	808c528 <_Z16_fetch_usbserialv>
 808337e:	490b      	ldr	r1, [pc, #44]	; (80833ac <_Z17serialGetCo2Slopev+0xf8>)
 8083380:	f008 f82b 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.print("Current CO2 slope:");
    Serial.print(String(CO2_slope, 2));
    Serial.println(" ppm");
    Serial.print("Enter new CO2 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083384:	a802      	add	r0, sp, #8
 8083386:	f007 fdb5 	bl	808aef4 <_ZN6StringD1Ev>

        EEPROM.put(CO2_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 808338a:	b00b      	add	sp, #44	; 0x2c
 808338c:	bd30      	pop	{r4, r5, pc}
 808338e:	bf00      	nop
 8083390:	0809218f 	.word	0x0809218f
 8083394:	20000a50 	.word	0x20000a50
 8083398:	080921a2 	.word	0x080921a2
 808339c:	080921a7 	.word	0x080921a7
 80833a0:	41200000 	.word	0x41200000
 80833a4:	42c80000 	.word	0x42c80000
 80833a8:	080921bd 	.word	0x080921bd
 80833ac:	08091ff3 	.word	0x08091ff3

080833b0 <_Z16serialGetCo2Zerov>:

void serialGetCo2Zero(void){
 80833b0:	b530      	push	{r4, r5, lr}
 80833b2:	b087      	sub	sp, #28
    Serial.println();
 80833b4:	f009 f8b8 	bl	808c528 <_Z16_fetch_usbserialv>
    Serial.print("Current CO2 zero:");
    Serial.print(CO2_zero);
 80833b8:	4d26      	ldr	r5, [pc, #152]	; (8083454 <_Z16serialGetCo2Zerov+0xa4>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetCo2Zero(void){
    Serial.println();
 80833ba:	f008 f802 	bl	808b3c2 <_ZN5Print7printlnEv>
    Serial.print("Current CO2 zero:");
 80833be:	f009 f8b3 	bl	808c528 <_Z16_fetch_usbserialv>
 80833c2:	4925      	ldr	r1, [pc, #148]	; (8083458 <_Z16serialGetCo2Zerov+0xa8>)
 80833c4:	f007 fff6 	bl	808b3b4 <_ZN5Print5printEPKc>
    Serial.print(CO2_zero);
 80833c8:	f009 f8ae 	bl	808c528 <_Z16_fetch_usbserialv>
 80833cc:	220a      	movs	r2, #10
 80833ce:	6829      	ldr	r1, [r5, #0]
 80833d0:	f008 f86f 	bl	808b4b2 <_ZN5Print5printEii>
    Serial.println(" ppm");
 80833d4:	f009 f8a8 	bl	808c528 <_Z16_fetch_usbserialv>
 80833d8:	4920      	ldr	r1, [pc, #128]	; (808345c <_Z16serialGetCo2Zerov+0xac>)
 80833da:	f007 fffe 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO2 Zero\n\r");
 80833de:	f009 f8a3 	bl	808c528 <_Z16_fetch_usbserialv>
 80833e2:	491f      	ldr	r1, [pc, #124]	; (8083460 <_Z16serialGetCo2Zerov+0xb0>)
 80833e4:	f007 ffe6 	bl	808b3b4 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 80833e8:	f009 f89e 	bl	808c528 <_Z16_fetch_usbserialv>
 80833ec:	f24c 3150 	movw	r1, #50000	; 0xc350
 80833f0:	f008 f977 	bl	808b6e2 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80833f4:	f009 f898 	bl	808c528 <_Z16_fetch_usbserialv>
 80833f8:	220d      	movs	r2, #13
 80833fa:	4601      	mov	r1, r0
 80833fc:	a802      	add	r0, sp, #8
 80833fe:	f008 f9dd 	bl	808b7bc <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8083402:	a802      	add	r0, sp, #8
 8083404:	f007 ff88 	bl	808b318 <_ZNK6String5toIntEv>
 8083408:	9001      	str	r0, [sp, #4]

    if(tempValue >= -1000 && tempValue < 1000){
 808340a:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 808340e:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8083412:	d215      	bcs.n	8083440 <_Z16serialGetCo2Zerov+0x90>
        Serial.print("\n\rNew CO2 zero: ");
 8083414:	f009 f888 	bl	808c528 <_Z16_fetch_usbserialv>
 8083418:	4912      	ldr	r1, [pc, #72]	; (8083464 <_Z16serialGetCo2Zerov+0xb4>)
 808341a:	f007 ffcb 	bl	808b3b4 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        CO2_zero = tempValue;
 808341e:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -1000 && tempValue < 1000){
        Serial.print("\n\rNew CO2 zero: ");
        Serial.println(tempValue);
 8083420:	f009 f882 	bl	808c528 <_Z16_fetch_usbserialv>
 8083424:	9901      	ldr	r1, [sp, #4]
 8083426:	220a      	movs	r2, #10
 8083428:	f008 f845 	bl	808b4b6 <_ZN5Print7printlnEii>
        CO2_zero = tempValue;
 808342c:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8083430:	602b      	str	r3, [r5, #0]
        EEPROM.put(CO2_ZERO_MEM_ADDRESS, tempValue);
 8083432:	f009 fc33 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8083436:	4621      	mov	r1, r4
 8083438:	2004      	movs	r0, #4
 808343a:	f7fd fc65 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 808343e:	e004      	b.n	808344a <_Z16serialGetCo2Zerov+0x9a>
    }else{
        Serial.println("\n\rInvalid value!");
 8083440:	f009 f872 	bl	808c528 <_Z16_fetch_usbserialv>
 8083444:	4908      	ldr	r1, [pc, #32]	; (8083468 <_Z16serialGetCo2Zerov+0xb8>)
 8083446:	f007 ffc8 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.print("Current CO2 zero:");
    Serial.print(CO2_zero);
    Serial.println(" ppm");
    Serial.print("Enter new CO2 Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 808344a:	a802      	add	r0, sp, #8
 808344c:	f007 fd52 	bl	808aef4 <_ZN6StringD1Ev>
        CO2_zero = tempValue;
        EEPROM.put(CO2_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083450:	b007      	add	sp, #28
 8083452:	bd30      	pop	{r4, r5, pc}
 8083454:	20000234 	.word	0x20000234
 8083458:	080921cf 	.word	0x080921cf
 808345c:	080921a2 	.word	0x080921a2
 8083460:	080921e1 	.word	0x080921e1
 8083464:	080921f6 	.word	0x080921f6
 8083468:	08091ff3 	.word	0x08091ff3
 808346c:	00000000 	.word	0x00000000

08083470 <_Z16serialGetCoSlopev>:

void serialGetCoSlope(void){
 8083470:	b530      	push	{r4, r5, lr}
 8083472:	b08b      	sub	sp, #44	; 0x2c

    Serial.println();
 8083474:	f009 f858 	bl	808c528 <_Z16_fetch_usbserialv>
 8083478:	f007 ffa3 	bl	808b3c2 <_ZN5Print7printlnEv>
    Serial.print("Current CO slope:");
 808347c:	f009 f854 	bl	808c528 <_Z16_fetch_usbserialv>
 8083480:	4937      	ldr	r1, [pc, #220]	; (8083560 <_Z16serialGetCoSlopev+0xf0>)
 8083482:	f007 ff97 	bl	808b3b4 <_ZN5Print5printEPKc>
    Serial.print(String(CO_slope, 2));
 8083486:	f009 f84f 	bl	808c528 <_Z16_fetch_usbserialv>
 808348a:	4605      	mov	r5, r0
 808348c:	4c35      	ldr	r4, [pc, #212]	; (8083564 <_Z16serialGetCoSlopev+0xf4>)
 808348e:	2202      	movs	r2, #2
 8083490:	6821      	ldr	r1, [r4, #0]
 8083492:	a806      	add	r0, sp, #24
 8083494:	f007 fe0f 	bl	808b0b6 <_ZN6StringC1Efi>
 8083498:	9906      	ldr	r1, [sp, #24]
 808349a:	4628      	mov	r0, r5
 808349c:	f007 ff8a 	bl	808b3b4 <_ZN5Print5printEPKc>
 80834a0:	a806      	add	r0, sp, #24
 80834a2:	f007 fd27 	bl	808aef4 <_ZN6StringD1Ev>
    Serial.println(" ppm");
 80834a6:	f009 f83f 	bl	808c528 <_Z16_fetch_usbserialv>
 80834aa:	492f      	ldr	r1, [pc, #188]	; (8083568 <_Z16serialGetCoSlopev+0xf8>)
 80834ac:	f007 ff95 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO slope\n\r");
 80834b0:	f009 f83a 	bl	808c528 <_Z16_fetch_usbserialv>
 80834b4:	492d      	ldr	r1, [pc, #180]	; (808356c <_Z16serialGetCoSlopev+0xfc>)
 80834b6:	f007 ff7d 	bl	808b3b4 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 80834ba:	f009 f835 	bl	808c528 <_Z16_fetch_usbserialv>
 80834be:	f24c 3150 	movw	r1, #50000	; 0xc350
 80834c2:	f008 f90e 	bl	808b6e2 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80834c6:	f009 f82f 	bl	808c528 <_Z16_fetch_usbserialv>
 80834ca:	220d      	movs	r2, #13
 80834cc:	4601      	mov	r1, r0
 80834ce:	a802      	add	r0, sp, #8
 80834d0:	f008 f974 	bl	808b7bc <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 80834d4:	a802      	add	r0, sp, #8
 80834d6:	f007 ff24 	bl	808b322 <_ZNK6String7toFloatEv>
 80834da:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.1 && tempfloat < 2.0){
 80834dc:	f009 ff00 	bl	808d2e0 <__aeabi_f2d>
 80834e0:	a31d      	add	r3, pc, #116	; (adr r3, 8083558 <_Z16serialGetCoSlopev+0xe8>)
 80834e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80834e6:	f00a f9d5 	bl	808d894 <__aeabi_dcmpge>
 80834ea:	b340      	cbz	r0, 808353e <_Z16serialGetCoSlopev+0xce>
 80834ec:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80834f0:	4628      	mov	r0, r5
 80834f2:	f00a fd3d 	bl	808df70 <__aeabi_fcmplt>
 80834f6:	b310      	cbz	r0, 808353e <_Z16serialGetCoSlopev+0xce>
        CO_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 80834f8:	491d      	ldr	r1, [pc, #116]	; (8083570 <_Z16serialGetCoSlopev+0x100>)
 80834fa:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.1 && tempfloat < 2.0){
        CO_slope = tempfloat;
 80834fc:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 80834fe:	f00a fb99 	bl	808dc34 <__aeabi_fmul>
 8083502:	f00a fd5d 	bl	808dfc0 <__aeabi_f2iz>
 8083506:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew CO slope: ");
 8083508:	f009 f80e 	bl	808c528 <_Z16_fetch_usbserialv>
 808350c:	4919      	ldr	r1, [pc, #100]	; (8083574 <_Z16serialGetCoSlopev+0x104>)
 808350e:	f007 ff51 	bl	808b3b4 <_ZN5Print5printEPKc>
        Serial.println(String(CO_slope,2));
 8083512:	f009 f809 	bl	808c528 <_Z16_fetch_usbserialv>
 8083516:	4605      	mov	r5, r0
 8083518:	2202      	movs	r2, #2
 808351a:	6821      	ldr	r1, [r4, #0]
 808351c:	a806      	add	r0, sp, #24
 808351e:	f007 fdca 	bl	808b0b6 <_ZN6StringC1Efi>
 8083522:	9906      	ldr	r1, [sp, #24]
 8083524:	4628      	mov	r0, r5
 8083526:	f007 ff58 	bl	808b3da <_ZN5Print7printlnEPKc>
 808352a:	a806      	add	r0, sp, #24
 808352c:	f007 fce2 	bl	808aef4 <_ZN6StringD1Ev>

        EEPROM.put(CO_SLOPE_MEM_ADDRESS, tempValue);
 8083530:	f009 fbb4 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8083534:	a901      	add	r1, sp, #4
 8083536:	2010      	movs	r0, #16
 8083538:	f7fd fbe6 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 808353c:	e004      	b.n	8083548 <_Z16serialGetCoSlopev+0xd8>
    }else{
        Serial.println("\n\rInvalid value!");
 808353e:	f008 fff3 	bl	808c528 <_Z16_fetch_usbserialv>
 8083542:	490d      	ldr	r1, [pc, #52]	; (8083578 <_Z16serialGetCoSlopev+0x108>)
 8083544:	f007 ff49 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.print("Current CO slope:");
    Serial.print(String(CO_slope, 2));
    Serial.println(" ppm");
    Serial.print("Enter new CO slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083548:	a802      	add	r0, sp, #8
 808354a:	f007 fcd3 	bl	808aef4 <_ZN6StringD1Ev>

        EEPROM.put(CO_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 808354e:	b00b      	add	sp, #44	; 0x2c
 8083550:	bd30      	pop	{r4, r5, pc}
 8083552:	bf00      	nop
 8083554:	f3af 8000 	nop.w
 8083558:	9999999a 	.word	0x9999999a
 808355c:	3fb99999 	.word	0x3fb99999
 8083560:	08092207 	.word	0x08092207
 8083564:	200001e8 	.word	0x200001e8
 8083568:	080921a2 	.word	0x080921a2
 808356c:	08092219 	.word	0x08092219
 8083570:	42c80000 	.word	0x42c80000
 8083574:	0809222e 	.word	0x0809222e
 8083578:	08091ff3 	.word	0x08091ff3

0808357c <_Z15serialGetCoZerov>:

void serialGetCoZero(void){
 808357c:	b530      	push	{r4, r5, lr}
 808357e:	b087      	sub	sp, #28
    Serial.println();
 8083580:	f008 ffd2 	bl	808c528 <_Z16_fetch_usbserialv>
    Serial.print("Current CO zero:");
    Serial.print(CO_zero);
 8083584:	4d27      	ldr	r5, [pc, #156]	; (8083624 <_Z15serialGetCoZerov+0xa8>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetCoZero(void){
    Serial.println();
 8083586:	f007 ff1c 	bl	808b3c2 <_ZN5Print7printlnEv>
    Serial.print("Current CO zero:");
 808358a:	f008 ffcd 	bl	808c528 <_Z16_fetch_usbserialv>
 808358e:	4926      	ldr	r1, [pc, #152]	; (8083628 <_Z15serialGetCoZerov+0xac>)
 8083590:	f007 ff10 	bl	808b3b4 <_ZN5Print5printEPKc>
    Serial.print(CO_zero);
 8083594:	f008 ffc8 	bl	808c528 <_Z16_fetch_usbserialv>
 8083598:	220a      	movs	r2, #10
 808359a:	6829      	ldr	r1, [r5, #0]
 808359c:	f007 ff89 	bl	808b4b2 <_ZN5Print5printEii>
    Serial.println(" ppb");
 80835a0:	f008 ffc2 	bl	808c528 <_Z16_fetch_usbserialv>
 80835a4:	4921      	ldr	r1, [pc, #132]	; (808362c <_Z15serialGetCoZerov+0xb0>)
 80835a6:	f007 ff18 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO Zero\n\r");
 80835aa:	f008 ffbd 	bl	808c528 <_Z16_fetch_usbserialv>
 80835ae:	4920      	ldr	r1, [pc, #128]	; (8083630 <_Z15serialGetCoZerov+0xb4>)
 80835b0:	f007 ff00 	bl	808b3b4 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 80835b4:	f008 ffb8 	bl	808c528 <_Z16_fetch_usbserialv>
 80835b8:	f24c 3150 	movw	r1, #50000	; 0xc350
 80835bc:	f008 f891 	bl	808b6e2 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80835c0:	f008 ffb2 	bl	808c528 <_Z16_fetch_usbserialv>
 80835c4:	220d      	movs	r2, #13
 80835c6:	4601      	mov	r1, r0
 80835c8:	a802      	add	r0, sp, #8
 80835ca:	f008 f8f7 	bl	808b7bc <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 80835ce:	a802      	add	r0, sp, #8
 80835d0:	f007 fea2 	bl	808b318 <_ZNK6String5toIntEv>

    if(tempValue >= -5000 && tempValue < 5000){
 80835d4:	f242 730f 	movw	r3, #9999	; 0x270f
    Serial.print(CO_zero);
    Serial.println(" ppb");
    Serial.print("Enter new CO Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();
 80835d8:	9001      	str	r0, [sp, #4]

    if(tempValue >= -5000 && tempValue < 5000){
 80835da:	f500 509c 	add.w	r0, r0, #4992	; 0x1380
 80835de:	3008      	adds	r0, #8
 80835e0:	4298      	cmp	r0, r3
 80835e2:	d815      	bhi.n	8083610 <_Z15serialGetCoZerov+0x94>
        Serial.print("\n\rNew CO zero: ");
 80835e4:	f008 ffa0 	bl	808c528 <_Z16_fetch_usbserialv>
 80835e8:	4912      	ldr	r1, [pc, #72]	; (8083634 <_Z15serialGetCoZerov+0xb8>)
 80835ea:	f007 fee3 	bl	808b3b4 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        CO_zero = tempValue;
 80835ee:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -5000 && tempValue < 5000){
        Serial.print("\n\rNew CO zero: ");
        Serial.println(tempValue);
 80835f0:	f008 ff9a 	bl	808c528 <_Z16_fetch_usbserialv>
 80835f4:	9901      	ldr	r1, [sp, #4]
 80835f6:	220a      	movs	r2, #10
 80835f8:	f007 ff5d 	bl	808b4b6 <_ZN5Print7printlnEii>
        CO_zero = tempValue;
 80835fc:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8083600:	602b      	str	r3, [r5, #0]
        EEPROM.put(CO_ZERO_MEM_ADDRESS, tempValue);
 8083602:	f009 fb4b 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8083606:	4621      	mov	r1, r4
 8083608:	200c      	movs	r0, #12
 808360a:	f7fd fb7d 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 808360e:	e004      	b.n	808361a <_Z15serialGetCoZerov+0x9e>
    }else{
        Serial.println("\n\rInvalid value!");
 8083610:	f008 ff8a 	bl	808c528 <_Z16_fetch_usbserialv>
 8083614:	4908      	ldr	r1, [pc, #32]	; (8083638 <_Z15serialGetCoZerov+0xbc>)
 8083616:	f007 fee0 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.print("Current CO zero:");
    Serial.print(CO_zero);
    Serial.println(" ppb");
    Serial.print("Enter new CO Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 808361a:	a802      	add	r0, sp, #8
 808361c:	f007 fc6a 	bl	808aef4 <_ZN6StringD1Ev>
        CO_zero = tempValue;
        EEPROM.put(CO_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083620:	b007      	add	sp, #28
 8083622:	bd30      	pop	{r4, r5, pc}
 8083624:	200007f8 	.word	0x200007f8
 8083628:	0809223f 	.word	0x0809223f
 808362c:	08092250 	.word	0x08092250
 8083630:	08092255 	.word	0x08092255
 8083634:	08092269 	.word	0x08092269
 8083638:	08091ff3 	.word	0x08091ff3

0808363c <_Z17serialGetPm1Slopev>:

void serialGetPm1Slope(void){
 808363c:	b530      	push	{r4, r5, lr}
 808363e:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8083640:	f008 ff72 	bl	808c528 <_Z16_fetch_usbserialv>
 8083644:	f007 febd 	bl	808b3c2 <_ZN5Print7printlnEv>
    Serial.print("Current PM1 slope:");
 8083648:	f008 ff6e 	bl	808c528 <_Z16_fetch_usbserialv>
 808364c:	4932      	ldr	r1, [pc, #200]	; (8083718 <_Z17serialGetPm1Slopev+0xdc>)
 808364e:	f007 feb1 	bl	808b3b4 <_ZN5Print5printEPKc>
    Serial.print(String(PM_1_slope, 2));
 8083652:	f008 ff69 	bl	808c528 <_Z16_fetch_usbserialv>
 8083656:	4605      	mov	r5, r0
 8083658:	4c30      	ldr	r4, [pc, #192]	; (808371c <_Z17serialGetPm1Slopev+0xe0>)
 808365a:	2202      	movs	r2, #2
 808365c:	6821      	ldr	r1, [r4, #0]
 808365e:	a806      	add	r0, sp, #24
 8083660:	f007 fd29 	bl	808b0b6 <_ZN6StringC1Efi>
 8083664:	9906      	ldr	r1, [sp, #24]
 8083666:	4628      	mov	r0, r5
 8083668:	f007 fea4 	bl	808b3b4 <_ZN5Print5printEPKc>
 808366c:	a806      	add	r0, sp, #24
 808366e:	f007 fc41 	bl	808aef4 <_ZN6StringD1Ev>
    Serial.println(" ");
 8083672:	f008 ff59 	bl	808c528 <_Z16_fetch_usbserialv>
 8083676:	492a      	ldr	r1, [pc, #168]	; (8083720 <_Z17serialGetPm1Slopev+0xe4>)
 8083678:	f007 feaf 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM1 slope\n\r");
 808367c:	f008 ff54 	bl	808c528 <_Z16_fetch_usbserialv>
 8083680:	4928      	ldr	r1, [pc, #160]	; (8083724 <_Z17serialGetPm1Slopev+0xe8>)
 8083682:	f007 fe97 	bl	808b3b4 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083686:	f008 ff4f 	bl	808c528 <_Z16_fetch_usbserialv>
 808368a:	f24c 3150 	movw	r1, #50000	; 0xc350
 808368e:	f008 f828 	bl	808b6e2 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083692:	f008 ff49 	bl	808c528 <_Z16_fetch_usbserialv>
 8083696:	220d      	movs	r2, #13
 8083698:	4601      	mov	r1, r0
 808369a:	a802      	add	r0, sp, #8
 808369c:	f008 f88e 	bl	808b7bc <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 80836a0:	a802      	add	r0, sp, #8
 80836a2:	f007 fe3e 	bl	808b322 <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 80836a6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(PM_1_slope, 2));
    Serial.println(" ");
    Serial.print("Enter new PM1 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 80836aa:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 80836ac:	f00a fc74 	bl	808df98 <__aeabi_fcmpge>
 80836b0:	b340      	cbz	r0, 8083704 <_Z17serialGetPm1Slopev+0xc8>
 80836b2:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80836b6:	4628      	mov	r0, r5
 80836b8:	f00a fc5a 	bl	808df70 <__aeabi_fcmplt>
 80836bc:	b310      	cbz	r0, 8083704 <_Z17serialGetPm1Slopev+0xc8>
        PM_1_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 80836be:	491a      	ldr	r1, [pc, #104]	; (8083728 <_Z17serialGetPm1Slopev+0xec>)
 80836c0:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
        PM_1_slope = tempfloat;
 80836c2:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 80836c4:	f00a fab6 	bl	808dc34 <__aeabi_fmul>
 80836c8:	f00a fc7a 	bl	808dfc0 <__aeabi_f2iz>
 80836cc:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew PM1 slope: ");
 80836ce:	f008 ff2b 	bl	808c528 <_Z16_fetch_usbserialv>
 80836d2:	4916      	ldr	r1, [pc, #88]	; (808372c <_Z17serialGetPm1Slopev+0xf0>)
 80836d4:	f007 fe6e 	bl	808b3b4 <_ZN5Print5printEPKc>
        Serial.println(String(PM_1_slope, 2));
 80836d8:	f008 ff26 	bl	808c528 <_Z16_fetch_usbserialv>
 80836dc:	4605      	mov	r5, r0
 80836de:	2202      	movs	r2, #2
 80836e0:	6821      	ldr	r1, [r4, #0]
 80836e2:	a806      	add	r0, sp, #24
 80836e4:	f007 fce7 	bl	808b0b6 <_ZN6StringC1Efi>
 80836e8:	9906      	ldr	r1, [sp, #24]
 80836ea:	4628      	mov	r0, r5
 80836ec:	f007 fe75 	bl	808b3da <_ZN5Print7printlnEPKc>
 80836f0:	a806      	add	r0, sp, #24
 80836f2:	f007 fbff 	bl	808aef4 <_ZN6StringD1Ev>

        EEPROM.put(PM_1_SLOPE_MEM_ADDRESS, tempValue);
 80836f6:	f009 fad1 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 80836fa:	a901      	add	r1, sp, #4
 80836fc:	2018      	movs	r0, #24
 80836fe:	f7fd fb03 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 8083702:	e004      	b.n	808370e <_Z17serialGetPm1Slopev+0xd2>
    }else{
        Serial.println("\n\rInvalid value!");
 8083704:	f008 ff10 	bl	808c528 <_Z16_fetch_usbserialv>
 8083708:	4909      	ldr	r1, [pc, #36]	; (8083730 <_Z17serialGetPm1Slopev+0xf4>)
 808370a:	f007 fe66 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.print("Current PM1 slope:");
    Serial.print(String(PM_1_slope, 2));
    Serial.println(" ");
    Serial.print("Enter new PM1 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 808370e:	a802      	add	r0, sp, #8
 8083710:	f007 fbf0 	bl	808aef4 <_ZN6StringD1Ev>

        EEPROM.put(PM_1_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083714:	b00b      	add	sp, #44	; 0x2c
 8083716:	bd30      	pop	{r4, r5, pc}
 8083718:	08092279 	.word	0x08092279
 808371c:	20000230 	.word	0x20000230
 8083720:	08091756 	.word	0x08091756
 8083724:	0809228c 	.word	0x0809228c
 8083728:	42c80000 	.word	0x42c80000
 808372c:	080922a2 	.word	0x080922a2
 8083730:	08091ff3 	.word	0x08091ff3

08083734 <_Z16serialGetPm1Zerov>:

void serialGetPm1Zero(void){
 8083734:	b530      	push	{r4, r5, lr}
 8083736:	b087      	sub	sp, #28
    Serial.println();
 8083738:	f008 fef6 	bl	808c528 <_Z16_fetch_usbserialv>
    Serial.print("Current PM1 zero:");
    Serial.print(PM_1_zero);
 808373c:	4d26      	ldr	r5, [pc, #152]	; (80837d8 <_Z16serialGetPm1Zerov+0xa4>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetPm1Zero(void){
    Serial.println();
 808373e:	f007 fe40 	bl	808b3c2 <_ZN5Print7printlnEv>
    Serial.print("Current PM1 zero:");
 8083742:	f008 fef1 	bl	808c528 <_Z16_fetch_usbserialv>
 8083746:	4925      	ldr	r1, [pc, #148]	; (80837dc <_Z16serialGetPm1Zerov+0xa8>)
 8083748:	f007 fe34 	bl	808b3b4 <_ZN5Print5printEPKc>
    Serial.print(PM_1_zero);
 808374c:	f008 feec 	bl	808c528 <_Z16_fetch_usbserialv>
 8083750:	220a      	movs	r2, #10
 8083752:	6829      	ldr	r1, [r5, #0]
 8083754:	f007 fead 	bl	808b4b2 <_ZN5Print5printEii>
    Serial.println(" ug/m3");
 8083758:	f008 fee6 	bl	808c528 <_Z16_fetch_usbserialv>
 808375c:	4920      	ldr	r1, [pc, #128]	; (80837e0 <_Z16serialGetPm1Zerov+0xac>)
 808375e:	f007 fe3c 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM1 Zero\n\r");
 8083762:	f008 fee1 	bl	808c528 <_Z16_fetch_usbserialv>
 8083766:	491f      	ldr	r1, [pc, #124]	; (80837e4 <_Z16serialGetPm1Zerov+0xb0>)
 8083768:	f007 fe24 	bl	808b3b4 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 808376c:	f008 fedc 	bl	808c528 <_Z16_fetch_usbserialv>
 8083770:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083774:	f007 ffb5 	bl	808b6e2 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083778:	f008 fed6 	bl	808c528 <_Z16_fetch_usbserialv>
 808377c:	220d      	movs	r2, #13
 808377e:	4601      	mov	r1, r0
 8083780:	a802      	add	r0, sp, #8
 8083782:	f008 f81b 	bl	808b7bc <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8083786:	a802      	add	r0, sp, #8
 8083788:	f007 fdc6 	bl	808b318 <_ZNK6String5toIntEv>
 808378c:	9001      	str	r0, [sp, #4]

    if(tempValue >= -1000 && tempValue < 1000){
 808378e:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8083792:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8083796:	d215      	bcs.n	80837c4 <_Z16serialGetPm1Zerov+0x90>
        Serial.print("\n\rNew PM1 zero: ");
 8083798:	f008 fec6 	bl	808c528 <_Z16_fetch_usbserialv>
 808379c:	4912      	ldr	r1, [pc, #72]	; (80837e8 <_Z16serialGetPm1Zerov+0xb4>)
 808379e:	f007 fe09 	bl	808b3b4 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        PM_1_zero = tempValue;
 80837a2:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -1000 && tempValue < 1000){
        Serial.print("\n\rNew PM1 zero: ");
        Serial.println(tempValue);
 80837a4:	f008 fec0 	bl	808c528 <_Z16_fetch_usbserialv>
 80837a8:	9901      	ldr	r1, [sp, #4]
 80837aa:	220a      	movs	r2, #10
 80837ac:	f007 fe83 	bl	808b4b6 <_ZN5Print7printlnEii>
        PM_1_zero = tempValue;
 80837b0:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 80837b4:	602b      	str	r3, [r5, #0]
        EEPROM.put(PM_1_ZERO_MEM_ADDRESS, tempValue);
 80837b6:	f009 fa71 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 80837ba:	4621      	mov	r1, r4
 80837bc:	2014      	movs	r0, #20
 80837be:	f7fd faa3 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 80837c2:	e004      	b.n	80837ce <_Z16serialGetPm1Zerov+0x9a>
    }else{
        Serial.println("\n\rInvalid value!");
 80837c4:	f008 feb0 	bl	808c528 <_Z16_fetch_usbserialv>
 80837c8:	4908      	ldr	r1, [pc, #32]	; (80837ec <_Z16serialGetPm1Zerov+0xb8>)
 80837ca:	f007 fe06 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.print("Current PM1 zero:");
    Serial.print(PM_1_zero);
    Serial.println(" ug/m3");
    Serial.print("Enter new PM1 Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 80837ce:	a802      	add	r0, sp, #8
 80837d0:	f007 fb90 	bl	808aef4 <_ZN6StringD1Ev>
        PM_1_zero = tempValue;
        EEPROM.put(PM_1_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 80837d4:	b007      	add	sp, #28
 80837d6:	bd30      	pop	{r4, r5, pc}
 80837d8:	20000ae4 	.word	0x20000ae4
 80837dc:	080922b4 	.word	0x080922b4
 80837e0:	080922c6 	.word	0x080922c6
 80837e4:	080922cd 	.word	0x080922cd
 80837e8:	080922e2 	.word	0x080922e2
 80837ec:	08091ff3 	.word	0x08091ff3

080837f0 <_Z18serialGetPm25Slopev>:

void serialGetPm25Slope(void){
 80837f0:	b530      	push	{r4, r5, lr}
 80837f2:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 80837f4:	f008 fe98 	bl	808c528 <_Z16_fetch_usbserialv>
 80837f8:	f007 fde3 	bl	808b3c2 <_ZN5Print7printlnEv>
    Serial.print("Current PM2.5 slope:");
 80837fc:	f008 fe94 	bl	808c528 <_Z16_fetch_usbserialv>
 8083800:	4932      	ldr	r1, [pc, #200]	; (80838cc <_Z18serialGetPm25Slopev+0xdc>)
 8083802:	f007 fdd7 	bl	808b3b4 <_ZN5Print5printEPKc>
    Serial.print(String(PM_25_slope, 2));
 8083806:	f008 fe8f 	bl	808c528 <_Z16_fetch_usbserialv>
 808380a:	4605      	mov	r5, r0
 808380c:	4c30      	ldr	r4, [pc, #192]	; (80838d0 <_Z18serialGetPm25Slopev+0xe0>)
 808380e:	2202      	movs	r2, #2
 8083810:	6821      	ldr	r1, [r4, #0]
 8083812:	a806      	add	r0, sp, #24
 8083814:	f007 fc4f 	bl	808b0b6 <_ZN6StringC1Efi>
 8083818:	9906      	ldr	r1, [sp, #24]
 808381a:	4628      	mov	r0, r5
 808381c:	f007 fdca 	bl	808b3b4 <_ZN5Print5printEPKc>
 8083820:	a806      	add	r0, sp, #24
 8083822:	f007 fb67 	bl	808aef4 <_ZN6StringD1Ev>
    Serial.println(" ");
 8083826:	f008 fe7f 	bl	808c528 <_Z16_fetch_usbserialv>
 808382a:	492a      	ldr	r1, [pc, #168]	; (80838d4 <_Z18serialGetPm25Slopev+0xe4>)
 808382c:	f007 fdd5 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM2.5 slope\n\r");
 8083830:	f008 fe7a 	bl	808c528 <_Z16_fetch_usbserialv>
 8083834:	4928      	ldr	r1, [pc, #160]	; (80838d8 <_Z18serialGetPm25Slopev+0xe8>)
 8083836:	f007 fdbd 	bl	808b3b4 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 808383a:	f008 fe75 	bl	808c528 <_Z16_fetch_usbserialv>
 808383e:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083842:	f007 ff4e 	bl	808b6e2 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083846:	f008 fe6f 	bl	808c528 <_Z16_fetch_usbserialv>
 808384a:	220d      	movs	r2, #13
 808384c:	4601      	mov	r1, r0
 808384e:	a802      	add	r0, sp, #8
 8083850:	f007 ffb4 	bl	808b7bc <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083854:	a802      	add	r0, sp, #8
 8083856:	f007 fd64 	bl	808b322 <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 808385a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(PM_25_slope, 2));
    Serial.println(" ");
    Serial.print("Enter new PM2.5 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 808385e:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8083860:	f00a fb9a 	bl	808df98 <__aeabi_fcmpge>
 8083864:	b340      	cbz	r0, 80838b8 <_Z18serialGetPm25Slopev+0xc8>
 8083866:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 808386a:	4628      	mov	r0, r5
 808386c:	f00a fb80 	bl	808df70 <__aeabi_fcmplt>
 8083870:	b310      	cbz	r0, 80838b8 <_Z18serialGetPm25Slopev+0xc8>
        PM_25_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 8083872:	491a      	ldr	r1, [pc, #104]	; (80838dc <_Z18serialGetPm25Slopev+0xec>)
 8083874:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
        PM_25_slope = tempfloat;
 8083876:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 8083878:	f00a f9dc 	bl	808dc34 <__aeabi_fmul>
 808387c:	f00a fba0 	bl	808dfc0 <__aeabi_f2iz>
 8083880:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew PM2.5 slope: ");
 8083882:	f008 fe51 	bl	808c528 <_Z16_fetch_usbserialv>
 8083886:	4916      	ldr	r1, [pc, #88]	; (80838e0 <_Z18serialGetPm25Slopev+0xf0>)
 8083888:	f007 fd94 	bl	808b3b4 <_ZN5Print5printEPKc>
        Serial.println(String(PM_25_slope,2));
 808388c:	f008 fe4c 	bl	808c528 <_Z16_fetch_usbserialv>
 8083890:	4605      	mov	r5, r0
 8083892:	2202      	movs	r2, #2
 8083894:	6821      	ldr	r1, [r4, #0]
 8083896:	a806      	add	r0, sp, #24
 8083898:	f007 fc0d 	bl	808b0b6 <_ZN6StringC1Efi>
 808389c:	9906      	ldr	r1, [sp, #24]
 808389e:	4628      	mov	r0, r5
 80838a0:	f007 fd9b 	bl	808b3da <_ZN5Print7printlnEPKc>
 80838a4:	a806      	add	r0, sp, #24
 80838a6:	f007 fb25 	bl	808aef4 <_ZN6StringD1Ev>

        EEPROM.put(PM_25_SLOPE_MEM_ADDRESS, tempValue);
 80838aa:	f009 f9f7 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 80838ae:	a901      	add	r1, sp, #4
 80838b0:	2020      	movs	r0, #32
 80838b2:	f7fd fa29 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 80838b6:	e004      	b.n	80838c2 <_Z18serialGetPm25Slopev+0xd2>
    }else{
        Serial.println("\n\rInvalid value!");
 80838b8:	f008 fe36 	bl	808c528 <_Z16_fetch_usbserialv>
 80838bc:	4909      	ldr	r1, [pc, #36]	; (80838e4 <_Z18serialGetPm25Slopev+0xf4>)
 80838be:	f007 fd8c 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.print("Current PM2.5 slope:");
    Serial.print(String(PM_25_slope, 2));
    Serial.println(" ");
    Serial.print("Enter new PM2.5 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 80838c2:	a802      	add	r0, sp, #8
 80838c4:	f007 fb16 	bl	808aef4 <_ZN6StringD1Ev>

        EEPROM.put(PM_25_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 80838c8:	b00b      	add	sp, #44	; 0x2c
 80838ca:	bd30      	pop	{r4, r5, pc}
 80838cc:	080922f3 	.word	0x080922f3
 80838d0:	200007ec 	.word	0x200007ec
 80838d4:	08091756 	.word	0x08091756
 80838d8:	08092308 	.word	0x08092308
 80838dc:	42c80000 	.word	0x42c80000
 80838e0:	08092320 	.word	0x08092320
 80838e4:	08091ff3 	.word	0x08091ff3

080838e8 <_Z17serialGetPm25Zerov>:

void serialGetPm25Zero(void){
 80838e8:	b530      	push	{r4, r5, lr}
 80838ea:	b087      	sub	sp, #28
    Serial.println();
 80838ec:	f008 fe1c 	bl	808c528 <_Z16_fetch_usbserialv>
    Serial.print("Current PM2.5 zero:");
    Serial.print(PM_25_zero);
 80838f0:	4d26      	ldr	r5, [pc, #152]	; (808398c <_Z17serialGetPm25Zerov+0xa4>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetPm25Zero(void){
    Serial.println();
 80838f2:	f007 fd66 	bl	808b3c2 <_ZN5Print7printlnEv>
    Serial.print("Current PM2.5 zero:");
 80838f6:	f008 fe17 	bl	808c528 <_Z16_fetch_usbserialv>
 80838fa:	4925      	ldr	r1, [pc, #148]	; (8083990 <_Z17serialGetPm25Zerov+0xa8>)
 80838fc:	f007 fd5a 	bl	808b3b4 <_ZN5Print5printEPKc>
    Serial.print(PM_25_zero);
 8083900:	f008 fe12 	bl	808c528 <_Z16_fetch_usbserialv>
 8083904:	220a      	movs	r2, #10
 8083906:	6829      	ldr	r1, [r5, #0]
 8083908:	f007 fdd3 	bl	808b4b2 <_ZN5Print5printEii>
    Serial.println(" ug/m3");
 808390c:	f008 fe0c 	bl	808c528 <_Z16_fetch_usbserialv>
 8083910:	4920      	ldr	r1, [pc, #128]	; (8083994 <_Z17serialGetPm25Zerov+0xac>)
 8083912:	f007 fd62 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM2.5 Zero\n\r");
 8083916:	f008 fe07 	bl	808c528 <_Z16_fetch_usbserialv>
 808391a:	491f      	ldr	r1, [pc, #124]	; (8083998 <_Z17serialGetPm25Zerov+0xb0>)
 808391c:	f007 fd4a 	bl	808b3b4 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083920:	f008 fe02 	bl	808c528 <_Z16_fetch_usbserialv>
 8083924:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083928:	f007 fedb 	bl	808b6e2 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 808392c:	f008 fdfc 	bl	808c528 <_Z16_fetch_usbserialv>
 8083930:	220d      	movs	r2, #13
 8083932:	4601      	mov	r1, r0
 8083934:	a802      	add	r0, sp, #8
 8083936:	f007 ff41 	bl	808b7bc <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 808393a:	a802      	add	r0, sp, #8
 808393c:	f007 fcec 	bl	808b318 <_ZNK6String5toIntEv>
 8083940:	9001      	str	r0, [sp, #4]

    if(tempValue >= -1000 && tempValue < 1000){
 8083942:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8083946:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 808394a:	d215      	bcs.n	8083978 <_Z17serialGetPm25Zerov+0x90>
        Serial.print("\n\rNew PM2.5 zero: ");
 808394c:	f008 fdec 	bl	808c528 <_Z16_fetch_usbserialv>
 8083950:	4912      	ldr	r1, [pc, #72]	; (808399c <_Z17serialGetPm25Zerov+0xb4>)
 8083952:	f007 fd2f 	bl	808b3b4 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        PM_25_zero = tempValue;
 8083956:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -1000 && tempValue < 1000){
        Serial.print("\n\rNew PM2.5 zero: ");
        Serial.println(tempValue);
 8083958:	f008 fde6 	bl	808c528 <_Z16_fetch_usbserialv>
 808395c:	9901      	ldr	r1, [sp, #4]
 808395e:	220a      	movs	r2, #10
 8083960:	f007 fda9 	bl	808b4b6 <_ZN5Print7printlnEii>
        PM_25_zero = tempValue;
 8083964:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8083968:	602b      	str	r3, [r5, #0]
        EEPROM.put(PM_25_ZERO_MEM_ADDRESS, tempValue);
 808396a:	f009 f997 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 808396e:	4621      	mov	r1, r4
 8083970:	201c      	movs	r0, #28
 8083972:	f7fd f9c9 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 8083976:	e004      	b.n	8083982 <_Z17serialGetPm25Zerov+0x9a>
    }else{
        Serial.println("\n\rInvalid value!");
 8083978:	f008 fdd6 	bl	808c528 <_Z16_fetch_usbserialv>
 808397c:	4908      	ldr	r1, [pc, #32]	; (80839a0 <_Z17serialGetPm25Zerov+0xb8>)
 808397e:	f007 fd2c 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.print("Current PM2.5 zero:");
    Serial.print(PM_25_zero);
    Serial.println(" ug/m3");
    Serial.print("Enter new PM2.5 Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083982:	a802      	add	r0, sp, #8
 8083984:	f007 fab6 	bl	808aef4 <_ZN6StringD1Ev>
        PM_25_zero = tempValue;
        EEPROM.put(PM_25_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083988:	b007      	add	sp, #28
 808398a:	bd30      	pop	{r4, r5, pc}
 808398c:	20000788 	.word	0x20000788
 8083990:	08092334 	.word	0x08092334
 8083994:	080922c6 	.word	0x080922c6
 8083998:	08092348 	.word	0x08092348
 808399c:	0809235f 	.word	0x0809235f
 80839a0:	08091ff3 	.word	0x08091ff3

080839a4 <_Z18serialGetPm10Slopev>:

void serialGetPm10Slope(void){
 80839a4:	b530      	push	{r4, r5, lr}
 80839a6:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 80839a8:	f008 fdbe 	bl	808c528 <_Z16_fetch_usbserialv>
 80839ac:	f007 fd09 	bl	808b3c2 <_ZN5Print7printlnEv>
    Serial.print("Current PM10 slope:");
 80839b0:	f008 fdba 	bl	808c528 <_Z16_fetch_usbserialv>
 80839b4:	4932      	ldr	r1, [pc, #200]	; (8083a80 <_Z18serialGetPm10Slopev+0xdc>)
 80839b6:	f007 fcfd 	bl	808b3b4 <_ZN5Print5printEPKc>
    Serial.print(String(PM_10_slope, 2));
 80839ba:	f008 fdb5 	bl	808c528 <_Z16_fetch_usbserialv>
 80839be:	4605      	mov	r5, r0
 80839c0:	4c30      	ldr	r4, [pc, #192]	; (8083a84 <_Z18serialGetPm10Slopev+0xe0>)
 80839c2:	2202      	movs	r2, #2
 80839c4:	6821      	ldr	r1, [r4, #0]
 80839c6:	a806      	add	r0, sp, #24
 80839c8:	f007 fb75 	bl	808b0b6 <_ZN6StringC1Efi>
 80839cc:	9906      	ldr	r1, [sp, #24]
 80839ce:	4628      	mov	r0, r5
 80839d0:	f007 fcf0 	bl	808b3b4 <_ZN5Print5printEPKc>
 80839d4:	a806      	add	r0, sp, #24
 80839d6:	f007 fa8d 	bl	808aef4 <_ZN6StringD1Ev>
    Serial.println(" ");
 80839da:	f008 fda5 	bl	808c528 <_Z16_fetch_usbserialv>
 80839de:	492a      	ldr	r1, [pc, #168]	; (8083a88 <_Z18serialGetPm10Slopev+0xe4>)
 80839e0:	f007 fcfb 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM10 slope\n\r");
 80839e4:	f008 fda0 	bl	808c528 <_Z16_fetch_usbserialv>
 80839e8:	4928      	ldr	r1, [pc, #160]	; (8083a8c <_Z18serialGetPm10Slopev+0xe8>)
 80839ea:	f007 fce3 	bl	808b3b4 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 80839ee:	f008 fd9b 	bl	808c528 <_Z16_fetch_usbserialv>
 80839f2:	f24c 3150 	movw	r1, #50000	; 0xc350
 80839f6:	f007 fe74 	bl	808b6e2 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80839fa:	f008 fd95 	bl	808c528 <_Z16_fetch_usbserialv>
 80839fe:	220d      	movs	r2, #13
 8083a00:	4601      	mov	r1, r0
 8083a02:	a802      	add	r0, sp, #8
 8083a04:	f007 feda 	bl	808b7bc <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083a08:	a802      	add	r0, sp, #8
 8083a0a:	f007 fc8a 	bl	808b322 <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8083a0e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(PM_10_slope, 2));
    Serial.println(" ");
    Serial.print("Enter new PM10 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 8083a12:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8083a14:	f00a fac0 	bl	808df98 <__aeabi_fcmpge>
 8083a18:	b340      	cbz	r0, 8083a6c <_Z18serialGetPm10Slopev+0xc8>
 8083a1a:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8083a1e:	4628      	mov	r0, r5
 8083a20:	f00a faa6 	bl	808df70 <__aeabi_fcmplt>
 8083a24:	b310      	cbz	r0, 8083a6c <_Z18serialGetPm10Slopev+0xc8>
        PM_10_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 8083a26:	491a      	ldr	r1, [pc, #104]	; (8083a90 <_Z18serialGetPm10Slopev+0xec>)
 8083a28:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
        PM_10_slope = tempfloat;
 8083a2a:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 8083a2c:	f00a f902 	bl	808dc34 <__aeabi_fmul>
 8083a30:	f00a fac6 	bl	808dfc0 <__aeabi_f2iz>
 8083a34:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew PM10 slope: ");
 8083a36:	f008 fd77 	bl	808c528 <_Z16_fetch_usbserialv>
 8083a3a:	4916      	ldr	r1, [pc, #88]	; (8083a94 <_Z18serialGetPm10Slopev+0xf0>)
 8083a3c:	f007 fcba 	bl	808b3b4 <_ZN5Print5printEPKc>
        Serial.println(String(PM_10_slope,2));
 8083a40:	f008 fd72 	bl	808c528 <_Z16_fetch_usbserialv>
 8083a44:	4605      	mov	r5, r0
 8083a46:	2202      	movs	r2, #2
 8083a48:	6821      	ldr	r1, [r4, #0]
 8083a4a:	a806      	add	r0, sp, #24
 8083a4c:	f007 fb33 	bl	808b0b6 <_ZN6StringC1Efi>
 8083a50:	9906      	ldr	r1, [sp, #24]
 8083a52:	4628      	mov	r0, r5
 8083a54:	f007 fcc1 	bl	808b3da <_ZN5Print7printlnEPKc>
 8083a58:	a806      	add	r0, sp, #24
 8083a5a:	f007 fa4b 	bl	808aef4 <_ZN6StringD1Ev>

        EEPROM.put(PM_10_SLOPE_MEM_ADDRESS, tempValue);
 8083a5e:	f009 f91d 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8083a62:	a901      	add	r1, sp, #4
 8083a64:	2028      	movs	r0, #40	; 0x28
 8083a66:	f7fd f94f 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 8083a6a:	e004      	b.n	8083a76 <_Z18serialGetPm10Slopev+0xd2>
    }else{
        Serial.println("\n\rInvalid value!");
 8083a6c:	f008 fd5c 	bl	808c528 <_Z16_fetch_usbserialv>
 8083a70:	4909      	ldr	r1, [pc, #36]	; (8083a98 <_Z18serialGetPm10Slopev+0xf4>)
 8083a72:	f007 fcb2 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.print("Current PM10 slope:");
    Serial.print(String(PM_10_slope, 2));
    Serial.println(" ");
    Serial.print("Enter new PM10 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083a76:	a802      	add	r0, sp, #8
 8083a78:	f007 fa3c 	bl	808aef4 <_ZN6StringD1Ev>

        EEPROM.put(PM_10_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083a7c:	b00b      	add	sp, #44	; 0x2c
 8083a7e:	bd30      	pop	{r4, r5, pc}
 8083a80:	08092372 	.word	0x08092372
 8083a84:	20000b30 	.word	0x20000b30
 8083a88:	08091756 	.word	0x08091756
 8083a8c:	08092386 	.word	0x08092386
 8083a90:	42c80000 	.word	0x42c80000
 8083a94:	0809239d 	.word	0x0809239d
 8083a98:	08091ff3 	.word	0x08091ff3

08083a9c <_Z17serialGetPm10Zerov>:

void serialGetPm10Zero(void){
 8083a9c:	b530      	push	{r4, r5, lr}
 8083a9e:	b087      	sub	sp, #28
    Serial.println();
 8083aa0:	f008 fd42 	bl	808c528 <_Z16_fetch_usbserialv>
    Serial.print("Current PM10 zero:");
    Serial.print(PM_10_zero);
 8083aa4:	4d26      	ldr	r5, [pc, #152]	; (8083b40 <_Z17serialGetPm10Zerov+0xa4>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetPm10Zero(void){
    Serial.println();
 8083aa6:	f007 fc8c 	bl	808b3c2 <_ZN5Print7printlnEv>
    Serial.print("Current PM10 zero:");
 8083aaa:	f008 fd3d 	bl	808c528 <_Z16_fetch_usbserialv>
 8083aae:	4925      	ldr	r1, [pc, #148]	; (8083b44 <_Z17serialGetPm10Zerov+0xa8>)
 8083ab0:	f007 fc80 	bl	808b3b4 <_ZN5Print5printEPKc>
    Serial.print(PM_10_zero);
 8083ab4:	f008 fd38 	bl	808c528 <_Z16_fetch_usbserialv>
 8083ab8:	220a      	movs	r2, #10
 8083aba:	6829      	ldr	r1, [r5, #0]
 8083abc:	f007 fcf9 	bl	808b4b2 <_ZN5Print5printEii>
    Serial.println(" um/m3");
 8083ac0:	f008 fd32 	bl	808c528 <_Z16_fetch_usbserialv>
 8083ac4:	4920      	ldr	r1, [pc, #128]	; (8083b48 <_Z17serialGetPm10Zerov+0xac>)
 8083ac6:	f007 fc88 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM10 Zero\n\r");
 8083aca:	f008 fd2d 	bl	808c528 <_Z16_fetch_usbserialv>
 8083ace:	491f      	ldr	r1, [pc, #124]	; (8083b4c <_Z17serialGetPm10Zerov+0xb0>)
 8083ad0:	f007 fc70 	bl	808b3b4 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083ad4:	f008 fd28 	bl	808c528 <_Z16_fetch_usbserialv>
 8083ad8:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083adc:	f007 fe01 	bl	808b6e2 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083ae0:	f008 fd22 	bl	808c528 <_Z16_fetch_usbserialv>
 8083ae4:	220d      	movs	r2, #13
 8083ae6:	4601      	mov	r1, r0
 8083ae8:	a802      	add	r0, sp, #8
 8083aea:	f007 fe67 	bl	808b7bc <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8083aee:	a802      	add	r0, sp, #8
 8083af0:	f007 fc12 	bl	808b318 <_ZNK6String5toIntEv>
 8083af4:	9001      	str	r0, [sp, #4]

    if(tempValue >= -1000 && tempValue < 1000){
 8083af6:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8083afa:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8083afe:	d215      	bcs.n	8083b2c <_Z17serialGetPm10Zerov+0x90>
        Serial.print("\n\rNew PM10 zero: ");
 8083b00:	f008 fd12 	bl	808c528 <_Z16_fetch_usbserialv>
 8083b04:	4912      	ldr	r1, [pc, #72]	; (8083b50 <_Z17serialGetPm10Zerov+0xb4>)
 8083b06:	f007 fc55 	bl	808b3b4 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        PM_10_zero = tempValue;
 8083b0a:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -1000 && tempValue < 1000){
        Serial.print("\n\rNew PM10 zero: ");
        Serial.println(tempValue);
 8083b0c:	f008 fd0c 	bl	808c528 <_Z16_fetch_usbserialv>
 8083b10:	9901      	ldr	r1, [sp, #4]
 8083b12:	220a      	movs	r2, #10
 8083b14:	f007 fccf 	bl	808b4b6 <_ZN5Print7printlnEii>
        PM_10_zero = tempValue;
 8083b18:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8083b1c:	602b      	str	r3, [r5, #0]
        EEPROM.put(PM_10_ZERO_MEM_ADDRESS, tempValue);
 8083b1e:	f009 f8bd 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8083b22:	4621      	mov	r1, r4
 8083b24:	2024      	movs	r0, #36	; 0x24
 8083b26:	f7fd f8ef 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 8083b2a:	e004      	b.n	8083b36 <_Z17serialGetPm10Zerov+0x9a>
    }else{
        Serial.println("\n\rInvalid value!");
 8083b2c:	f008 fcfc 	bl	808c528 <_Z16_fetch_usbserialv>
 8083b30:	4908      	ldr	r1, [pc, #32]	; (8083b54 <_Z17serialGetPm10Zerov+0xb8>)
 8083b32:	f007 fc52 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.print("Current PM10 zero:");
    Serial.print(PM_10_zero);
    Serial.println(" um/m3");
    Serial.print("Enter new PM10 Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083b36:	a802      	add	r0, sp, #8
 8083b38:	f007 f9dc 	bl	808aef4 <_ZN6StringD1Ev>
        PM_10_zero = tempValue;
        EEPROM.put(PM_10_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083b3c:	b007      	add	sp, #28
 8083b3e:	bd30      	pop	{r4, r5, pc}
 8083b40:	20000784 	.word	0x20000784
 8083b44:	080923b0 	.word	0x080923b0
 8083b48:	080923c3 	.word	0x080923c3
 8083b4c:	080923ca 	.word	0x080923ca
 8083b50:	080923e0 	.word	0x080923e0
 8083b54:	08091ff3 	.word	0x08091ff3

08083b58 <_Z25serialGetTemperatureSlopev>:

void serialGetTemperatureSlope(void){
 8083b58:	b530      	push	{r4, r5, lr}
 8083b5a:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8083b5c:	f008 fce4 	bl	808c528 <_Z16_fetch_usbserialv>
 8083b60:	f007 fc2f 	bl	808b3c2 <_ZN5Print7printlnEv>
    Serial.print("Current Temperature slope:");
 8083b64:	f008 fce0 	bl	808c528 <_Z16_fetch_usbserialv>
 8083b68:	4932      	ldr	r1, [pc, #200]	; (8083c34 <_Z25serialGetTemperatureSlopev+0xdc>)
 8083b6a:	f007 fc23 	bl	808b3b4 <_ZN5Print5printEPKc>
    Serial.print(String(temp_slope, 2));
 8083b6e:	f008 fcdb 	bl	808c528 <_Z16_fetch_usbserialv>
 8083b72:	4605      	mov	r5, r0
 8083b74:	4c30      	ldr	r4, [pc, #192]	; (8083c38 <_Z25serialGetTemperatureSlopev+0xe0>)
 8083b76:	2202      	movs	r2, #2
 8083b78:	6821      	ldr	r1, [r4, #0]
 8083b7a:	a806      	add	r0, sp, #24
 8083b7c:	f007 fa9b 	bl	808b0b6 <_ZN6StringC1Efi>
 8083b80:	9906      	ldr	r1, [sp, #24]
 8083b82:	4628      	mov	r0, r5
 8083b84:	f007 fc16 	bl	808b3b4 <_ZN5Print5printEPKc>
 8083b88:	a806      	add	r0, sp, #24
 8083b8a:	f007 f9b3 	bl	808aef4 <_ZN6StringD1Ev>
    Serial.println(" Degrees C");
 8083b8e:	f008 fccb 	bl	808c528 <_Z16_fetch_usbserialv>
 8083b92:	492a      	ldr	r1, [pc, #168]	; (8083c3c <_Z25serialGetTemperatureSlopev+0xe4>)
 8083b94:	f007 fc21 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Temperature slope\n\r");
 8083b98:	f008 fcc6 	bl	808c528 <_Z16_fetch_usbserialv>
 8083b9c:	4928      	ldr	r1, [pc, #160]	; (8083c40 <_Z25serialGetTemperatureSlopev+0xe8>)
 8083b9e:	f007 fc09 	bl	808b3b4 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083ba2:	f008 fcc1 	bl	808c528 <_Z16_fetch_usbserialv>
 8083ba6:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083baa:	f007 fd9a 	bl	808b6e2 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083bae:	f008 fcbb 	bl	808c528 <_Z16_fetch_usbserialv>
 8083bb2:	220d      	movs	r2, #13
 8083bb4:	4601      	mov	r1, r0
 8083bb6:	a802      	add	r0, sp, #8
 8083bb8:	f007 fe00 	bl	808b7bc <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083bbc:	a802      	add	r0, sp, #8
 8083bbe:	f007 fbb0 	bl	808b322 <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8083bc2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(temp_slope, 2));
    Serial.println(" Degrees C");
    Serial.print("Enter new Temperature slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 8083bc6:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8083bc8:	f00a f9e6 	bl	808df98 <__aeabi_fcmpge>
 8083bcc:	b340      	cbz	r0, 8083c20 <_Z25serialGetTemperatureSlopev+0xc8>
 8083bce:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8083bd2:	4628      	mov	r0, r5
 8083bd4:	f00a f9cc 	bl	808df70 <__aeabi_fcmplt>
 8083bd8:	b310      	cbz	r0, 8083c20 <_Z25serialGetTemperatureSlopev+0xc8>
        temp_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 8083bda:	491a      	ldr	r1, [pc, #104]	; (8083c44 <_Z25serialGetTemperatureSlopev+0xec>)
 8083bdc:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
        temp_slope = tempfloat;
 8083bde:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 8083be0:	f00a f828 	bl	808dc34 <__aeabi_fmul>
 8083be4:	f00a f9ec 	bl	808dfc0 <__aeabi_f2iz>
 8083be8:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew Temperature slope: ");
 8083bea:	f008 fc9d 	bl	808c528 <_Z16_fetch_usbserialv>
 8083bee:	4916      	ldr	r1, [pc, #88]	; (8083c48 <_Z25serialGetTemperatureSlopev+0xf0>)
 8083bf0:	f007 fbe0 	bl	808b3b4 <_ZN5Print5printEPKc>
        Serial.println(String(temp_slope,2));
 8083bf4:	f008 fc98 	bl	808c528 <_Z16_fetch_usbserialv>
 8083bf8:	4605      	mov	r5, r0
 8083bfa:	2202      	movs	r2, #2
 8083bfc:	6821      	ldr	r1, [r4, #0]
 8083bfe:	a806      	add	r0, sp, #24
 8083c00:	f007 fa59 	bl	808b0b6 <_ZN6StringC1Efi>
 8083c04:	9906      	ldr	r1, [sp, #24]
 8083c06:	4628      	mov	r0, r5
 8083c08:	f007 fbe7 	bl	808b3da <_ZN5Print7printlnEPKc>
 8083c0c:	a806      	add	r0, sp, #24
 8083c0e:	f007 f971 	bl	808aef4 <_ZN6StringD1Ev>

        EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, tempValue);
 8083c12:	f009 f843 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8083c16:	a901      	add	r1, sp, #4
 8083c18:	2030      	movs	r0, #48	; 0x30
 8083c1a:	f7fd f875 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 8083c1e:	e004      	b.n	8083c2a <_Z25serialGetTemperatureSlopev+0xd2>
    }else{
        Serial.println("\n\rInvalid value!");
 8083c20:	f008 fc82 	bl	808c528 <_Z16_fetch_usbserialv>
 8083c24:	4909      	ldr	r1, [pc, #36]	; (8083c4c <_Z25serialGetTemperatureSlopev+0xf4>)
 8083c26:	f007 fbd8 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.print("Current Temperature slope:");
    Serial.print(String(temp_slope, 2));
    Serial.println(" Degrees C");
    Serial.print("Enter new Temperature slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083c2a:	a802      	add	r0, sp, #8
 8083c2c:	f007 f962 	bl	808aef4 <_ZN6StringD1Ev>

        EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083c30:	b00b      	add	sp, #44	; 0x2c
 8083c32:	bd30      	pop	{r4, r5, pc}
 8083c34:	080923f2 	.word	0x080923f2
 8083c38:	200007f4 	.word	0x200007f4
 8083c3c:	0809240d 	.word	0x0809240d
 8083c40:	08092418 	.word	0x08092418
 8083c44:	42c80000 	.word	0x42c80000
 8083c48:	08092436 	.word	0x08092436
 8083c4c:	08091ff3 	.word	0x08091ff3

08083c50 <_Z24serialGetTemperatureZerov>:

void serialGetTemperatureZero(void){
 8083c50:	b530      	push	{r4, r5, lr}
 8083c52:	b087      	sub	sp, #28
    Serial.println();
 8083c54:	f008 fc68 	bl	808c528 <_Z16_fetch_usbserialv>
    Serial.print("Current Temperature zero:");
    Serial.print(temp_zero);
 8083c58:	4d25      	ldr	r5, [pc, #148]	; (8083cf0 <_Z24serialGetTemperatureZerov+0xa0>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetTemperatureZero(void){
    Serial.println();
 8083c5a:	f007 fbb2 	bl	808b3c2 <_ZN5Print7printlnEv>
    Serial.print("Current Temperature zero:");
 8083c5e:	f008 fc63 	bl	808c528 <_Z16_fetch_usbserialv>
 8083c62:	4924      	ldr	r1, [pc, #144]	; (8083cf4 <_Z24serialGetTemperatureZerov+0xa4>)
 8083c64:	f007 fba6 	bl	808b3b4 <_ZN5Print5printEPKc>
    Serial.print(temp_zero);
 8083c68:	f008 fc5e 	bl	808c528 <_Z16_fetch_usbserialv>
 8083c6c:	220a      	movs	r2, #10
 8083c6e:	6829      	ldr	r1, [r5, #0]
 8083c70:	f007 fc1f 	bl	808b4b2 <_ZN5Print5printEii>
    Serial.println(" Degrees C");
 8083c74:	f008 fc58 	bl	808c528 <_Z16_fetch_usbserialv>
 8083c78:	491f      	ldr	r1, [pc, #124]	; (8083cf8 <_Z24serialGetTemperatureZerov+0xa8>)
 8083c7a:	f007 fbae 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Temperature Zero\n\r");
 8083c7e:	f008 fc53 	bl	808c528 <_Z16_fetch_usbserialv>
 8083c82:	491e      	ldr	r1, [pc, #120]	; (8083cfc <_Z24serialGetTemperatureZerov+0xac>)
 8083c84:	f007 fb96 	bl	808b3b4 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083c88:	f008 fc4e 	bl	808c528 <_Z16_fetch_usbserialv>
 8083c8c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083c90:	f007 fd27 	bl	808b6e2 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083c94:	f008 fc48 	bl	808c528 <_Z16_fetch_usbserialv>
 8083c98:	220d      	movs	r2, #13
 8083c9a:	4601      	mov	r1, r0
 8083c9c:	a802      	add	r0, sp, #8
 8083c9e:	f007 fd8d 	bl	808b7bc <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8083ca2:	a802      	add	r0, sp, #8
 8083ca4:	f007 fb38 	bl	808b318 <_ZNK6String5toIntEv>
 8083ca8:	9001      	str	r0, [sp, #4]

    if(tempValue >= -30 && tempValue < 30){
 8083caa:	301e      	adds	r0, #30
 8083cac:	283b      	cmp	r0, #59	; 0x3b
 8083cae:	d815      	bhi.n	8083cdc <_Z24serialGetTemperatureZerov+0x8c>
        Serial.print("\n\rNew Temperature zero: ");
 8083cb0:	f008 fc3a 	bl	808c528 <_Z16_fetch_usbserialv>
 8083cb4:	4912      	ldr	r1, [pc, #72]	; (8083d00 <_Z24serialGetTemperatureZerov+0xb0>)
 8083cb6:	f007 fb7d 	bl	808b3b4 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        temp_zero = tempValue;
 8083cba:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -30 && tempValue < 30){
        Serial.print("\n\rNew Temperature zero: ");
        Serial.println(tempValue);
 8083cbc:	f008 fc34 	bl	808c528 <_Z16_fetch_usbserialv>
 8083cc0:	9901      	ldr	r1, [sp, #4]
 8083cc2:	220a      	movs	r2, #10
 8083cc4:	f007 fbf7 	bl	808b4b6 <_ZN5Print7printlnEii>
        temp_zero = tempValue;
 8083cc8:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8083ccc:	602b      	str	r3, [r5, #0]
        EEPROM.put(TEMP_ZERO_MEM_ADDRESS, tempValue);
 8083cce:	f008 ffe5 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8083cd2:	4621      	mov	r1, r4
 8083cd4:	202c      	movs	r0, #44	; 0x2c
 8083cd6:	f7fd f817 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 8083cda:	e004      	b.n	8083ce6 <_Z24serialGetTemperatureZerov+0x96>
    }else{
        Serial.println("\n\rInvalid value!");
 8083cdc:	f008 fc24 	bl	808c528 <_Z16_fetch_usbserialv>
 8083ce0:	4908      	ldr	r1, [pc, #32]	; (8083d04 <_Z24serialGetTemperatureZerov+0xb4>)
 8083ce2:	f007 fb7a 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.print("Current Temperature zero:");
    Serial.print(temp_zero);
    Serial.println(" Degrees C");
    Serial.print("Enter new Temperature Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083ce6:	a802      	add	r0, sp, #8
 8083ce8:	f007 f904 	bl	808aef4 <_ZN6StringD1Ev>
        temp_zero = tempValue;
        EEPROM.put(TEMP_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083cec:	b007      	add	sp, #28
 8083cee:	bd30      	pop	{r4, r5, pc}
 8083cf0:	20000af0 	.word	0x20000af0
 8083cf4:	08092450 	.word	0x08092450
 8083cf8:	0809240d 	.word	0x0809240d
 8083cfc:	0809246a 	.word	0x0809246a
 8083d00:	08092487 	.word	0x08092487
 8083d04:	08091ff3 	.word	0x08091ff3

08083d08 <_Z22serialGetPressureSlopev>:

void serialGetPressureSlope(void){
 8083d08:	b530      	push	{r4, r5, lr}
 8083d0a:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8083d0c:	f008 fc0c 	bl	808c528 <_Z16_fetch_usbserialv>
 8083d10:	f007 fb57 	bl	808b3c2 <_ZN5Print7printlnEv>
    Serial.print("Current Pressure slope:");
 8083d14:	f008 fc08 	bl	808c528 <_Z16_fetch_usbserialv>
 8083d18:	4932      	ldr	r1, [pc, #200]	; (8083de4 <_Z22serialGetPressureSlopev+0xdc>)
 8083d1a:	f007 fb4b 	bl	808b3b4 <_ZN5Print5printEPKc>
    Serial.print(String(pressure_slope, 2));
 8083d1e:	f008 fc03 	bl	808c528 <_Z16_fetch_usbserialv>
 8083d22:	4605      	mov	r5, r0
 8083d24:	4c30      	ldr	r4, [pc, #192]	; (8083de8 <_Z22serialGetPressureSlopev+0xe0>)
 8083d26:	2202      	movs	r2, #2
 8083d28:	6821      	ldr	r1, [r4, #0]
 8083d2a:	a806      	add	r0, sp, #24
 8083d2c:	f007 f9c3 	bl	808b0b6 <_ZN6StringC1Efi>
 8083d30:	9906      	ldr	r1, [sp, #24]
 8083d32:	4628      	mov	r0, r5
 8083d34:	f007 fb3e 	bl	808b3b4 <_ZN5Print5printEPKc>
 8083d38:	a806      	add	r0, sp, #24
 8083d3a:	f007 f8db 	bl	808aef4 <_ZN6StringD1Ev>
    Serial.println(" torr");
 8083d3e:	f008 fbf3 	bl	808c528 <_Z16_fetch_usbserialv>
 8083d42:	492a      	ldr	r1, [pc, #168]	; (8083dec <_Z22serialGetPressureSlopev+0xe4>)
 8083d44:	f007 fb49 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Pressure slope\n\r");
 8083d48:	f008 fbee 	bl	808c528 <_Z16_fetch_usbserialv>
 8083d4c:	4928      	ldr	r1, [pc, #160]	; (8083df0 <_Z22serialGetPressureSlopev+0xe8>)
 8083d4e:	f007 fb31 	bl	808b3b4 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083d52:	f008 fbe9 	bl	808c528 <_Z16_fetch_usbserialv>
 8083d56:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083d5a:	f007 fcc2 	bl	808b6e2 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083d5e:	f008 fbe3 	bl	808c528 <_Z16_fetch_usbserialv>
 8083d62:	220d      	movs	r2, #13
 8083d64:	4601      	mov	r1, r0
 8083d66:	a802      	add	r0, sp, #8
 8083d68:	f007 fd28 	bl	808b7bc <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083d6c:	a802      	add	r0, sp, #8
 8083d6e:	f007 fad8 	bl	808b322 <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8083d72:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(pressure_slope, 2));
    Serial.println(" torr");
    Serial.print("Enter new Pressure slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 8083d76:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8083d78:	f00a f90e 	bl	808df98 <__aeabi_fcmpge>
 8083d7c:	b340      	cbz	r0, 8083dd0 <_Z22serialGetPressureSlopev+0xc8>
 8083d7e:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8083d82:	4628      	mov	r0, r5
 8083d84:	f00a f8f4 	bl	808df70 <__aeabi_fcmplt>
 8083d88:	b310      	cbz	r0, 8083dd0 <_Z22serialGetPressureSlopev+0xc8>
        pressure_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 8083d8a:	491a      	ldr	r1, [pc, #104]	; (8083df4 <_Z22serialGetPressureSlopev+0xec>)
 8083d8c:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
        pressure_slope = tempfloat;
 8083d8e:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 8083d90:	f009 ff50 	bl	808dc34 <__aeabi_fmul>
 8083d94:	f00a f914 	bl	808dfc0 <__aeabi_f2iz>
 8083d98:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew Pressure slope: ");
 8083d9a:	f008 fbc5 	bl	808c528 <_Z16_fetch_usbserialv>
 8083d9e:	4916      	ldr	r1, [pc, #88]	; (8083df8 <_Z22serialGetPressureSlopev+0xf0>)
 8083da0:	f007 fb08 	bl	808b3b4 <_ZN5Print5printEPKc>
        Serial.println(String(pressure_slope,2));
 8083da4:	f008 fbc0 	bl	808c528 <_Z16_fetch_usbserialv>
 8083da8:	4605      	mov	r5, r0
 8083daa:	2202      	movs	r2, #2
 8083dac:	6821      	ldr	r1, [r4, #0]
 8083dae:	a806      	add	r0, sp, #24
 8083db0:	f007 f981 	bl	808b0b6 <_ZN6StringC1Efi>
 8083db4:	9906      	ldr	r1, [sp, #24]
 8083db6:	4628      	mov	r0, r5
 8083db8:	f007 fb0f 	bl	808b3da <_ZN5Print7printlnEPKc>
 8083dbc:	a806      	add	r0, sp, #24
 8083dbe:	f007 f899 	bl	808aef4 <_ZN6StringD1Ev>

        EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, tempValue);
 8083dc2:	f008 ff6b 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8083dc6:	a901      	add	r1, sp, #4
 8083dc8:	2038      	movs	r0, #56	; 0x38
 8083dca:	f7fc ff9d 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 8083dce:	e004      	b.n	8083dda <_Z22serialGetPressureSlopev+0xd2>
    }else{
        Serial.println("\n\rInvalid value!");
 8083dd0:	f008 fbaa 	bl	808c528 <_Z16_fetch_usbserialv>
 8083dd4:	4909      	ldr	r1, [pc, #36]	; (8083dfc <_Z22serialGetPressureSlopev+0xf4>)
 8083dd6:	f007 fb00 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.print("Current Pressure slope:");
    Serial.print(String(pressure_slope, 2));
    Serial.println(" torr");
    Serial.print("Enter new Pressure slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083dda:	a802      	add	r0, sp, #8
 8083ddc:	f007 f88a 	bl	808aef4 <_ZN6StringD1Ev>

        EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083de0:	b00b      	add	sp, #44	; 0x2c
 8083de2:	bd30      	pop	{r4, r5, pc}
 8083de4:	080924a0 	.word	0x080924a0
 8083de8:	200001f0 	.word	0x200001f0
 8083dec:	080924b8 	.word	0x080924b8
 8083df0:	080924be 	.word	0x080924be
 8083df4:	42c80000 	.word	0x42c80000
 8083df8:	080924d9 	.word	0x080924d9
 8083dfc:	08091ff3 	.word	0x08091ff3

08083e00 <_Z21serialGetPressureZerov>:

void serialGetPressureZero(void){
 8083e00:	b530      	push	{r4, r5, lr}
 8083e02:	b087      	sub	sp, #28
    Serial.println();
 8083e04:	f008 fb90 	bl	808c528 <_Z16_fetch_usbserialv>
    Serial.print("Current Pressure zero:");
    Serial.print(pressure_zero);
 8083e08:	4d26      	ldr	r5, [pc, #152]	; (8083ea4 <_Z21serialGetPressureZerov+0xa4>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetPressureZero(void){
    Serial.println();
 8083e0a:	f007 fada 	bl	808b3c2 <_ZN5Print7printlnEv>
    Serial.print("Current Pressure zero:");
 8083e0e:	f008 fb8b 	bl	808c528 <_Z16_fetch_usbserialv>
 8083e12:	4925      	ldr	r1, [pc, #148]	; (8083ea8 <_Z21serialGetPressureZerov+0xa8>)
 8083e14:	f007 face 	bl	808b3b4 <_ZN5Print5printEPKc>
    Serial.print(pressure_zero);
 8083e18:	f008 fb86 	bl	808c528 <_Z16_fetch_usbserialv>
 8083e1c:	220a      	movs	r2, #10
 8083e1e:	6829      	ldr	r1, [r5, #0]
 8083e20:	f007 fb47 	bl	808b4b2 <_ZN5Print5printEii>
    Serial.println(" ppm");
 8083e24:	f008 fb80 	bl	808c528 <_Z16_fetch_usbserialv>
 8083e28:	4920      	ldr	r1, [pc, #128]	; (8083eac <_Z21serialGetPressureZerov+0xac>)
 8083e2a:	f007 fad6 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Pressure Zero\n\r");
 8083e2e:	f008 fb7b 	bl	808c528 <_Z16_fetch_usbserialv>
 8083e32:	491f      	ldr	r1, [pc, #124]	; (8083eb0 <_Z21serialGetPressureZerov+0xb0>)
 8083e34:	f007 fabe 	bl	808b3b4 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083e38:	f008 fb76 	bl	808c528 <_Z16_fetch_usbserialv>
 8083e3c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083e40:	f007 fc4f 	bl	808b6e2 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083e44:	f008 fb70 	bl	808c528 <_Z16_fetch_usbserialv>
 8083e48:	220d      	movs	r2, #13
 8083e4a:	4601      	mov	r1, r0
 8083e4c:	a802      	add	r0, sp, #8
 8083e4e:	f007 fcb5 	bl	808b7bc <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8083e52:	a802      	add	r0, sp, #8
 8083e54:	f007 fa60 	bl	808b318 <_ZNK6String5toIntEv>
 8083e58:	9001      	str	r0, [sp, #4]

    if(tempValue >= -1000 && tempValue < 1000){
 8083e5a:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8083e5e:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8083e62:	d215      	bcs.n	8083e90 <_Z21serialGetPressureZerov+0x90>
        Serial.print("\n\rNew Pressure zero: ");
 8083e64:	f008 fb60 	bl	808c528 <_Z16_fetch_usbserialv>
 8083e68:	4912      	ldr	r1, [pc, #72]	; (8083eb4 <_Z21serialGetPressureZerov+0xb4>)
 8083e6a:	f007 faa3 	bl	808b3b4 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        pressure_zero = tempValue;
 8083e6e:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -1000 && tempValue < 1000){
        Serial.print("\n\rNew Pressure zero: ");
        Serial.println(tempValue);
 8083e70:	f008 fb5a 	bl	808c528 <_Z16_fetch_usbserialv>
 8083e74:	9901      	ldr	r1, [sp, #4]
 8083e76:	220a      	movs	r2, #10
 8083e78:	f007 fb1d 	bl	808b4b6 <_ZN5Print7printlnEii>
        pressure_zero = tempValue;
 8083e7c:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8083e80:	602b      	str	r3, [r5, #0]
        EEPROM.put(PRESSURE_ZERO_MEM_ADDRESS, tempValue);
 8083e82:	f008 ff0b 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8083e86:	4621      	mov	r1, r4
 8083e88:	2034      	movs	r0, #52	; 0x34
 8083e8a:	f7fc ff3d 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 8083e8e:	e004      	b.n	8083e9a <_Z21serialGetPressureZerov+0x9a>
    }else{
        Serial.println("\n\rInvalid value!");
 8083e90:	f008 fb4a 	bl	808c528 <_Z16_fetch_usbserialv>
 8083e94:	4908      	ldr	r1, [pc, #32]	; (8083eb8 <_Z21serialGetPressureZerov+0xb8>)
 8083e96:	f007 faa0 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.print("Current Pressure zero:");
    Serial.print(pressure_zero);
    Serial.println(" ppm");
    Serial.print("Enter new Pressure Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083e9a:	a802      	add	r0, sp, #8
 8083e9c:	f007 f82a 	bl	808aef4 <_ZN6StringD1Ev>
        pressure_zero = tempValue;
        EEPROM.put(PRESSURE_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083ea0:	b007      	add	sp, #28
 8083ea2:	bd30      	pop	{r4, r5, pc}
 8083ea4:	200009c4 	.word	0x200009c4
 8083ea8:	080924f0 	.word	0x080924f0
 8083eac:	080921a2 	.word	0x080921a2
 8083eb0:	08092507 	.word	0x08092507
 8083eb4:	08092521 	.word	0x08092521
 8083eb8:	08091ff3 	.word	0x08091ff3

08083ebc <_Z22serialGetHumiditySlopev>:

void serialGetHumiditySlope(void){
 8083ebc:	b530      	push	{r4, r5, lr}
 8083ebe:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8083ec0:	f008 fb32 	bl	808c528 <_Z16_fetch_usbserialv>
 8083ec4:	f007 fa7d 	bl	808b3c2 <_ZN5Print7printlnEv>
    Serial.print("Current RH slope:");
 8083ec8:	f008 fb2e 	bl	808c528 <_Z16_fetch_usbserialv>
 8083ecc:	4932      	ldr	r1, [pc, #200]	; (8083f98 <_Z22serialGetHumiditySlopev+0xdc>)
 8083ece:	f007 fa71 	bl	808b3b4 <_ZN5Print5printEPKc>
    Serial.print(String(rh_slope, 2));
 8083ed2:	f008 fb29 	bl	808c528 <_Z16_fetch_usbserialv>
 8083ed6:	4605      	mov	r5, r0
 8083ed8:	4c30      	ldr	r4, [pc, #192]	; (8083f9c <_Z22serialGetHumiditySlopev+0xe0>)
 8083eda:	2202      	movs	r2, #2
 8083edc:	6821      	ldr	r1, [r4, #0]
 8083ede:	a806      	add	r0, sp, #24
 8083ee0:	f007 f8e9 	bl	808b0b6 <_ZN6StringC1Efi>
 8083ee4:	9906      	ldr	r1, [sp, #24]
 8083ee6:	4628      	mov	r0, r5
 8083ee8:	f007 fa64 	bl	808b3b4 <_ZN5Print5printEPKc>
 8083eec:	a806      	add	r0, sp, #24
 8083eee:	f007 f801 	bl	808aef4 <_ZN6StringD1Ev>
    Serial.println(" %");
 8083ef2:	f008 fb19 	bl	808c528 <_Z16_fetch_usbserialv>
 8083ef6:	492a      	ldr	r1, [pc, #168]	; (8083fa0 <_Z22serialGetHumiditySlopev+0xe4>)
 8083ef8:	f007 fa6f 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.print("Enter new RH slope\n\r");
 8083efc:	f008 fb14 	bl	808c528 <_Z16_fetch_usbserialv>
 8083f00:	4928      	ldr	r1, [pc, #160]	; (8083fa4 <_Z22serialGetHumiditySlopev+0xe8>)
 8083f02:	f007 fa57 	bl	808b3b4 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083f06:	f008 fb0f 	bl	808c528 <_Z16_fetch_usbserialv>
 8083f0a:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083f0e:	f007 fbe8 	bl	808b6e2 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083f12:	f008 fb09 	bl	808c528 <_Z16_fetch_usbserialv>
 8083f16:	220d      	movs	r2, #13
 8083f18:	4601      	mov	r1, r0
 8083f1a:	a802      	add	r0, sp, #8
 8083f1c:	f007 fc4e 	bl	808b7bc <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083f20:	a802      	add	r0, sp, #8
 8083f22:	f007 f9fe 	bl	808b322 <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 10){
 8083f26:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(rh_slope, 2));
    Serial.println(" %");
    Serial.print("Enter new RH slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 8083f2a:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 10){
 8083f2c:	f00a f834 	bl	808df98 <__aeabi_fcmpge>
 8083f30:	b338      	cbz	r0, 8083f82 <_Z22serialGetHumiditySlopev+0xc6>
 8083f32:	491d      	ldr	r1, [pc, #116]	; (8083fa8 <_Z22serialGetHumiditySlopev+0xec>)
 8083f34:	4628      	mov	r0, r5
 8083f36:	f00a f81b 	bl	808df70 <__aeabi_fcmplt>
 8083f3a:	b310      	cbz	r0, 8083f82 <_Z22serialGetHumiditySlopev+0xc6>
        rh_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 8083f3c:	491b      	ldr	r1, [pc, #108]	; (8083fac <_Z22serialGetHumiditySlopev+0xf0>)
 8083f3e:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 10){
        rh_slope = tempfloat;
 8083f40:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 8083f42:	f009 fe77 	bl	808dc34 <__aeabi_fmul>
 8083f46:	f00a f83b 	bl	808dfc0 <__aeabi_f2iz>
 8083f4a:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew RH slope: ");
 8083f4c:	f008 faec 	bl	808c528 <_Z16_fetch_usbserialv>
 8083f50:	4917      	ldr	r1, [pc, #92]	; (8083fb0 <_Z22serialGetHumiditySlopev+0xf4>)
 8083f52:	f007 fa2f 	bl	808b3b4 <_ZN5Print5printEPKc>
        Serial.println(String(rh_slope,2));
 8083f56:	f008 fae7 	bl	808c528 <_Z16_fetch_usbserialv>
 8083f5a:	4605      	mov	r5, r0
 8083f5c:	2202      	movs	r2, #2
 8083f5e:	6821      	ldr	r1, [r4, #0]
 8083f60:	a806      	add	r0, sp, #24
 8083f62:	f007 f8a8 	bl	808b0b6 <_ZN6StringC1Efi>
 8083f66:	9906      	ldr	r1, [sp, #24]
 8083f68:	4628      	mov	r0, r5
 8083f6a:	f007 fa36 	bl	808b3da <_ZN5Print7printlnEPKc>
 8083f6e:	a806      	add	r0, sp, #24
 8083f70:	f006 ffc0 	bl	808aef4 <_ZN6StringD1Ev>

        EEPROM.put(RH_SLOPE_MEM_ADDRESS, tempValue);
 8083f74:	f008 fe92 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8083f78:	a901      	add	r1, sp, #4
 8083f7a:	2040      	movs	r0, #64	; 0x40
 8083f7c:	f7fc fec4 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 8083f80:	e004      	b.n	8083f8c <_Z22serialGetHumiditySlopev+0xd0>
    }else{
        Serial.println("\n\rInvalid value!");
 8083f82:	f008 fad1 	bl	808c528 <_Z16_fetch_usbserialv>
 8083f86:	490b      	ldr	r1, [pc, #44]	; (8083fb4 <_Z22serialGetHumiditySlopev+0xf8>)
 8083f88:	f007 fa27 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.print("Current RH slope:");
    Serial.print(String(rh_slope, 2));
    Serial.println(" %");
    Serial.print("Enter new RH slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083f8c:	a802      	add	r0, sp, #8
 8083f8e:	f006 ffb1 	bl	808aef4 <_ZN6StringD1Ev>

        EEPROM.put(RH_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083f92:	b00b      	add	sp, #44	; 0x2c
 8083f94:	bd30      	pop	{r4, r5, pc}
 8083f96:	bf00      	nop
 8083f98:	08092537 	.word	0x08092537
 8083f9c:	200006f0 	.word	0x200006f0
 8083fa0:	08092549 	.word	0x08092549
 8083fa4:	0809254c 	.word	0x0809254c
 8083fa8:	41200000 	.word	0x41200000
 8083fac:	42c80000 	.word	0x42c80000
 8083fb0:	08092561 	.word	0x08092561
 8083fb4:	08091ff3 	.word	0x08091ff3

08083fb8 <_Z21serialGetHumidityZerov>:

void serialGetHumidityZero(void){
 8083fb8:	b530      	push	{r4, r5, lr}
 8083fba:	b087      	sub	sp, #28
    Serial.println();
 8083fbc:	f008 fab4 	bl	808c528 <_Z16_fetch_usbserialv>
    Serial.print("Current RH zero:");
    Serial.print(rh_zero);
 8083fc0:	4d25      	ldr	r5, [pc, #148]	; (8084058 <_Z21serialGetHumidityZerov+0xa0>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetHumidityZero(void){
    Serial.println();
 8083fc2:	f007 f9fe 	bl	808b3c2 <_ZN5Print7printlnEv>
    Serial.print("Current RH zero:");
 8083fc6:	f008 faaf 	bl	808c528 <_Z16_fetch_usbserialv>
 8083fca:	4924      	ldr	r1, [pc, #144]	; (808405c <_Z21serialGetHumidityZerov+0xa4>)
 8083fcc:	f007 f9f2 	bl	808b3b4 <_ZN5Print5printEPKc>
    Serial.print(rh_zero);
 8083fd0:	f008 faaa 	bl	808c528 <_Z16_fetch_usbserialv>
 8083fd4:	220a      	movs	r2, #10
 8083fd6:	6829      	ldr	r1, [r5, #0]
 8083fd8:	f007 fa6b 	bl	808b4b2 <_ZN5Print5printEii>
    Serial.println(" %");
 8083fdc:	f008 faa4 	bl	808c528 <_Z16_fetch_usbserialv>
 8083fe0:	491f      	ldr	r1, [pc, #124]	; (8084060 <_Z21serialGetHumidityZerov+0xa8>)
 8083fe2:	f007 f9fa 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.print("Enter new RH Zero\n\r");
 8083fe6:	f008 fa9f 	bl	808c528 <_Z16_fetch_usbserialv>
 8083fea:	491e      	ldr	r1, [pc, #120]	; (8084064 <_Z21serialGetHumidityZerov+0xac>)
 8083fec:	f007 f9e2 	bl	808b3b4 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083ff0:	f008 fa9a 	bl	808c528 <_Z16_fetch_usbserialv>
 8083ff4:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083ff8:	f007 fb73 	bl	808b6e2 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083ffc:	f008 fa94 	bl	808c528 <_Z16_fetch_usbserialv>
 8084000:	220d      	movs	r2, #13
 8084002:	4601      	mov	r1, r0
 8084004:	a802      	add	r0, sp, #8
 8084006:	f007 fbd9 	bl	808b7bc <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 808400a:	a802      	add	r0, sp, #8
 808400c:	f007 f984 	bl	808b318 <_ZNK6String5toIntEv>
 8084010:	9001      	str	r0, [sp, #4]

    if(tempValue >= -50 && tempValue < 50){
 8084012:	3032      	adds	r0, #50	; 0x32
 8084014:	2863      	cmp	r0, #99	; 0x63
 8084016:	d815      	bhi.n	8084044 <_Z21serialGetHumidityZerov+0x8c>
        Serial.print("\n\rNew RH zero: ");
 8084018:	f008 fa86 	bl	808c528 <_Z16_fetch_usbserialv>
 808401c:	4912      	ldr	r1, [pc, #72]	; (8084068 <_Z21serialGetHumidityZerov+0xb0>)
 808401e:	f007 f9c9 	bl	808b3b4 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        rh_zero = tempValue;
 8084022:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -50 && tempValue < 50){
        Serial.print("\n\rNew RH zero: ");
        Serial.println(tempValue);
 8084024:	f008 fa80 	bl	808c528 <_Z16_fetch_usbserialv>
 8084028:	9901      	ldr	r1, [sp, #4]
 808402a:	220a      	movs	r2, #10
 808402c:	f007 fa43 	bl	808b4b6 <_ZN5Print7printlnEii>
        rh_zero = tempValue;
 8084030:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8084034:	602b      	str	r3, [r5, #0]
        EEPROM.put(RH_ZERO_MEM_ADDRESS, tempValue);
 8084036:	f008 fe31 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 808403a:	4621      	mov	r1, r4
 808403c:	203c      	movs	r0, #60	; 0x3c
 808403e:	f7fc fe63 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 8084042:	e004      	b.n	808404e <_Z21serialGetHumidityZerov+0x96>
    }else{
        Serial.println("\n\rInvalid value!");
 8084044:	f008 fa70 	bl	808c528 <_Z16_fetch_usbserialv>
 8084048:	4908      	ldr	r1, [pc, #32]	; (808406c <_Z21serialGetHumidityZerov+0xb4>)
 808404a:	f007 f9c6 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.print("Current RH zero:");
    Serial.print(rh_zero);
    Serial.println(" %");
    Serial.print("Enter new RH Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 808404e:	a802      	add	r0, sp, #8
 8084050:	f006 ff50 	bl	808aef4 <_ZN6StringD1Ev>
        rh_zero = tempValue;
        EEPROM.put(RH_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8084054:	b007      	add	sp, #28
 8084056:	bd30      	pop	{r4, r5, pc}
 8084058:	20000778 	.word	0x20000778
 808405c:	08092572 	.word	0x08092572
 8084060:	08092549 	.word	0x08092549
 8084064:	08092583 	.word	0x08092583
 8084068:	08092597 	.word	0x08092597
 808406c:	08091ff3 	.word	0x08091ff3

08084070 <_Z19serialGetLowerLimitv>:
    }else{
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetLowerLimit(void){
 8084070:	b530      	push	{r4, r5, lr}
 8084072:	b089      	sub	sp, #36	; 0x24
    Serial.println();
 8084074:	f008 fa58 	bl	808c528 <_Z16_fetch_usbserialv>
    Serial.print("Current lower limit:");
    Serial.println(gas_lower_limit);
 8084078:	4c35      	ldr	r4, [pc, #212]	; (8084150 <_Z19serialGetLowerLimitv+0xe0>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetLowerLimit(void){
    Serial.println();
 808407a:	f007 f9a2 	bl	808b3c2 <_ZN5Print7printlnEv>
    Serial.print("Current lower limit:");
 808407e:	f008 fa53 	bl	808c528 <_Z16_fetch_usbserialv>
 8084082:	4934      	ldr	r1, [pc, #208]	; (8084154 <_Z19serialGetLowerLimitv+0xe4>)
 8084084:	f007 f996 	bl	808b3b4 <_ZN5Print5printEPKc>
    Serial.println(gas_lower_limit);
 8084088:	f008 fa4e 	bl	808c528 <_Z16_fetch_usbserialv>
 808408c:	220a      	movs	r2, #10
 808408e:	6821      	ldr	r1, [r4, #0]
 8084090:	f007 fa11 	bl	808b4b6 <_ZN5Print7printlnEii>
    Serial.println("Please enter password in order to change the lower limit");
 8084094:	f008 fa48 	bl	808c528 <_Z16_fetch_usbserialv>
 8084098:	492f      	ldr	r1, [pc, #188]	; (8084158 <_Z19serialGetLowerLimitv+0xe8>)
 808409a:	f007 f99e 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 808409e:	f008 fa43 	bl	808c528 <_Z16_fetch_usbserialv>
 80840a2:	f24c 3150 	movw	r1, #50000	; 0xc350
 80840a6:	f007 fb1c 	bl	808b6e2 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80840aa:	f008 fa3d 	bl	808c528 <_Z16_fetch_usbserialv>
 80840ae:	220d      	movs	r2, #13
 80840b0:	4601      	mov	r1, r0
 80840b2:	4668      	mov	r0, sp
 80840b4:	f007 fb82 	bl	808b7bc <_ZN6Stream15readStringUntilEc>
 80840b8:	4928      	ldr	r1, [pc, #160]	; (808415c <_Z19serialGetLowerLimitv+0xec>)
 80840ba:	4668      	mov	r0, sp
 80840bc:	f007 f8b6 	bl	808b22c <_ZNK6String6equalsEPKc>


    if(tempString == "bould"){
 80840c0:	2800      	cmp	r0, #0
 80840c2:	d03a      	beq.n	808413a <_Z19serialGetLowerLimitv+0xca>
        Serial.println("Password correct!");
 80840c4:	f008 fa30 	bl	808c528 <_Z16_fetch_usbserialv>
 80840c8:	4925      	ldr	r1, [pc, #148]	; (8084160 <_Z19serialGetLowerLimitv+0xf0>)
 80840ca:	f007 f986 	bl	808b3da <_ZN5Print7printlnEPKc>
        Serial.println("Enter new lower limit:\n\r");
 80840ce:	f008 fa2b 	bl	808c528 <_Z16_fetch_usbserialv>
 80840d2:	4924      	ldr	r1, [pc, #144]	; (8084164 <_Z19serialGetLowerLimitv+0xf4>)
 80840d4:	f007 f981 	bl	808b3da <_ZN5Print7printlnEPKc>
        String tempString = Serial.readStringUntil('\r');
 80840d8:	f008 fa26 	bl	808c528 <_Z16_fetch_usbserialv>
 80840dc:	220d      	movs	r2, #13
 80840de:	4601      	mov	r1, r0
 80840e0:	a804      	add	r0, sp, #16
 80840e2:	f007 fb6b 	bl	808b7bc <_ZN6Stream15readStringUntilEc>
        int tempValue = tempString.toInt();
 80840e6:	a804      	add	r0, sp, #16
 80840e8:	f007 f916 	bl	808b318 <_ZNK6String5toIntEv>
 80840ec:	4605      	mov	r5, r0
        Serial.println("");
 80840ee:	f008 fa1b 	bl	808c528 <_Z16_fetch_usbserialv>
 80840f2:	491d      	ldr	r1, [pc, #116]	; (8084168 <_Z19serialGetLowerLimitv+0xf8>)
 80840f4:	f007 f971 	bl	808b3da <_ZN5Print7printlnEPKc>
        if(tempValue > 0 && tempValue < 20000){
 80840f8:	f644 631e 	movw	r3, #19998	; 0x4e1e
 80840fc:	1e6a      	subs	r2, r5, #1
 80840fe:	429a      	cmp	r2, r3
 8084100:	d812      	bhi.n	8084128 <_Z19serialGetLowerLimitv+0xb8>
            Serial.print("\n\rNew lower limit:");
 8084102:	f008 fa11 	bl	808c528 <_Z16_fetch_usbserialv>
 8084106:	4919      	ldr	r1, [pc, #100]	; (808416c <_Z19serialGetLowerLimitv+0xfc>)
 8084108:	f007 f954 	bl	808b3b4 <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 808410c:	f008 fa0c 	bl	808c528 <_Z16_fetch_usbserialv>
 8084110:	4629      	mov	r1, r5
 8084112:	220a      	movs	r2, #10
 8084114:	f007 f9cf 	bl	808b4b6 <_ZN5Print7printlnEii>
            gas_lower_limit = tempValue;
 8084118:	6025      	str	r5, [r4, #0]
            EEPROM.put(GAS_LOWER_LIMIT_MEM_ADDRESS, gas_lower_limit);
 808411a:	f008 fdbf 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 808411e:	4621      	mov	r1, r4
 8084120:	204c      	movs	r0, #76	; 0x4c
 8084122:	f7fc fdf1 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 8084126:	e004      	b.n	8084132 <_Z19serialGetLowerLimitv+0xc2>
        }else{
            Serial.println("\n\rInvalid value!");
 8084128:	f008 f9fe 	bl	808c528 <_Z16_fetch_usbserialv>
 808412c:	4910      	ldr	r1, [pc, #64]	; (8084170 <_Z19serialGetLowerLimitv+0x100>)
 808412e:	f007 f954 	bl	808b3da <_ZN5Print7printlnEPKc>


    if(tempString == "bould"){
        Serial.println("Password correct!");
        Serial.println("Enter new lower limit:\n\r");
        String tempString = Serial.readStringUntil('\r');
 8084132:	a804      	add	r0, sp, #16
 8084134:	f006 fede 	bl	808aef4 <_ZN6StringD1Ev>
 8084138:	e004      	b.n	8084144 <_Z19serialGetLowerLimitv+0xd4>
            EEPROM.put(GAS_LOWER_LIMIT_MEM_ADDRESS, gas_lower_limit);
        }else{
            Serial.println("\n\rInvalid value!");
        }
    }else{
        Serial.println("\n\rIncorrect password!");
 808413a:	f008 f9f5 	bl	808c528 <_Z16_fetch_usbserialv>
 808413e:	490d      	ldr	r1, [pc, #52]	; (8084174 <_Z19serialGetLowerLimitv+0x104>)
 8084140:	f007 f94b 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println();
    Serial.print("Current lower limit:");
    Serial.println(gas_lower_limit);
    Serial.println("Please enter password in order to change the lower limit");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8084144:	4668      	mov	r0, sp
 8084146:	f006 fed5 	bl	808aef4 <_ZN6StringD1Ev>
            Serial.println("\n\rInvalid value!");
        }
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
 808414a:	b009      	add	sp, #36	; 0x24
 808414c:	bd30      	pop	{r4, r5, pc}
 808414e:	bf00      	nop
 8084150:	2000009c 	.word	0x2000009c
 8084154:	080925ef 	.word	0x080925ef
 8084158:	08092604 	.word	0x08092604
 808415c:	08091e49 	.word	0x08091e49
 8084160:	08091e4f 	.word	0x08091e4f
 8084164:	0809263d 	.word	0x0809263d
 8084168:	08094100 	.word	0x08094100
 808416c:	08092656 	.word	0x08092656
 8084170:	08091ff3 	.word	0x08091ff3
 8084174:	08091f74 	.word	0x08091f74

08084178 <_Z19serialGetUpperLimitv>:
void serialGetUpperLimit(void){
 8084178:	b530      	push	{r4, r5, lr}
 808417a:	b089      	sub	sp, #36	; 0x24
    Serial.println();
 808417c:	f008 f9d4 	bl	808c528 <_Z16_fetch_usbserialv>
    Serial.print("Current upper limit:");
    Serial.println(gas_upper_limit);
 8084180:	4c35      	ldr	r4, [pc, #212]	; (8084258 <_Z19serialGetUpperLimitv+0xe0>)
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
void serialGetUpperLimit(void){
    Serial.println();
 8084182:	f007 f91e 	bl	808b3c2 <_ZN5Print7printlnEv>
    Serial.print("Current upper limit:");
 8084186:	f008 f9cf 	bl	808c528 <_Z16_fetch_usbserialv>
 808418a:	4934      	ldr	r1, [pc, #208]	; (808425c <_Z19serialGetUpperLimitv+0xe4>)
 808418c:	f007 f912 	bl	808b3b4 <_ZN5Print5printEPKc>
    Serial.println(gas_upper_limit);
 8084190:	f008 f9ca 	bl	808c528 <_Z16_fetch_usbserialv>
 8084194:	220a      	movs	r2, #10
 8084196:	6821      	ldr	r1, [r4, #0]
 8084198:	f007 f98d 	bl	808b4b6 <_ZN5Print7printlnEii>
    Serial.println("Please enter password in order to change the upper limit");
 808419c:	f008 f9c4 	bl	808c528 <_Z16_fetch_usbserialv>
 80841a0:	492f      	ldr	r1, [pc, #188]	; (8084260 <_Z19serialGetUpperLimitv+0xe8>)
 80841a2:	f007 f91a 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 80841a6:	f008 f9bf 	bl	808c528 <_Z16_fetch_usbserialv>
 80841aa:	f24c 3150 	movw	r1, #50000	; 0xc350
 80841ae:	f007 fa98 	bl	808b6e2 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80841b2:	f008 f9b9 	bl	808c528 <_Z16_fetch_usbserialv>
 80841b6:	220d      	movs	r2, #13
 80841b8:	4601      	mov	r1, r0
 80841ba:	4668      	mov	r0, sp
 80841bc:	f007 fafe 	bl	808b7bc <_ZN6Stream15readStringUntilEc>
 80841c0:	4928      	ldr	r1, [pc, #160]	; (8084264 <_Z19serialGetUpperLimitv+0xec>)
 80841c2:	4668      	mov	r0, sp
 80841c4:	f007 f832 	bl	808b22c <_ZNK6String6equalsEPKc>


    if(tempString == "bould"){
 80841c8:	2800      	cmp	r0, #0
 80841ca:	d03a      	beq.n	8084242 <_Z19serialGetUpperLimitv+0xca>
        Serial.println("Password correct!");
 80841cc:	f008 f9ac 	bl	808c528 <_Z16_fetch_usbserialv>
 80841d0:	4925      	ldr	r1, [pc, #148]	; (8084268 <_Z19serialGetUpperLimitv+0xf0>)
 80841d2:	f007 f902 	bl	808b3da <_ZN5Print7printlnEPKc>
        Serial.println("Enter new upper limit:\n\r");
 80841d6:	f008 f9a7 	bl	808c528 <_Z16_fetch_usbserialv>
 80841da:	4924      	ldr	r1, [pc, #144]	; (808426c <_Z19serialGetUpperLimitv+0xf4>)
 80841dc:	f007 f8fd 	bl	808b3da <_ZN5Print7printlnEPKc>
        String tempString = Serial.readStringUntil('\r');
 80841e0:	f008 f9a2 	bl	808c528 <_Z16_fetch_usbserialv>
 80841e4:	220d      	movs	r2, #13
 80841e6:	4601      	mov	r1, r0
 80841e8:	a804      	add	r0, sp, #16
 80841ea:	f007 fae7 	bl	808b7bc <_ZN6Stream15readStringUntilEc>
        int tempValue = tempString.toInt();
 80841ee:	a804      	add	r0, sp, #16
 80841f0:	f007 f892 	bl	808b318 <_ZNK6String5toIntEv>
 80841f4:	4605      	mov	r5, r0
        Serial.println("");
 80841f6:	f008 f997 	bl	808c528 <_Z16_fetch_usbserialv>
 80841fa:	491d      	ldr	r1, [pc, #116]	; (8084270 <_Z19serialGetUpperLimitv+0xf8>)
 80841fc:	f007 f8ed 	bl	808b3da <_ZN5Print7printlnEPKc>
        if(tempValue > 0 && tempValue < 50000){
 8084200:	f24c 334e 	movw	r3, #49998	; 0xc34e
 8084204:	1e6a      	subs	r2, r5, #1
 8084206:	429a      	cmp	r2, r3
 8084208:	d812      	bhi.n	8084230 <_Z19serialGetUpperLimitv+0xb8>
            Serial.print("\n\rNew upper limit:");
 808420a:	f008 f98d 	bl	808c528 <_Z16_fetch_usbserialv>
 808420e:	4919      	ldr	r1, [pc, #100]	; (8084274 <_Z19serialGetUpperLimitv+0xfc>)
 8084210:	f007 f8d0 	bl	808b3b4 <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 8084214:	f008 f988 	bl	808c528 <_Z16_fetch_usbserialv>
 8084218:	4629      	mov	r1, r5
 808421a:	220a      	movs	r2, #10
 808421c:	f007 f94b 	bl	808b4b6 <_ZN5Print7printlnEii>
            gas_upper_limit = tempValue;
 8084220:	6025      	str	r5, [r4, #0]
            EEPROM.put(GAS_UPPER_LIMIT_MEM_ADDRESS, gas_upper_limit);
 8084222:	f008 fd3b 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8084226:	4621      	mov	r1, r4
 8084228:	2050      	movs	r0, #80	; 0x50
 808422a:	f7fc fd6d 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 808422e:	e004      	b.n	808423a <_Z19serialGetUpperLimitv+0xc2>
        }else{
            Serial.println("\n\rInvalid value!");
 8084230:	f008 f97a 	bl	808c528 <_Z16_fetch_usbserialv>
 8084234:	4910      	ldr	r1, [pc, #64]	; (8084278 <_Z19serialGetUpperLimitv+0x100>)
 8084236:	f007 f8d0 	bl	808b3da <_ZN5Print7printlnEPKc>


    if(tempString == "bould"){
        Serial.println("Password correct!");
        Serial.println("Enter new upper limit:\n\r");
        String tempString = Serial.readStringUntil('\r');
 808423a:	a804      	add	r0, sp, #16
 808423c:	f006 fe5a 	bl	808aef4 <_ZN6StringD1Ev>
 8084240:	e004      	b.n	808424c <_Z19serialGetUpperLimitv+0xd4>
            EEPROM.put(GAS_UPPER_LIMIT_MEM_ADDRESS, gas_upper_limit);
        }else{
            Serial.println("\n\rInvalid value!");
        }
    }else{
        Serial.println("\n\rIncorrect password!");
 8084242:	f008 f971 	bl	808c528 <_Z16_fetch_usbserialv>
 8084246:	490d      	ldr	r1, [pc, #52]	; (808427c <_Z19serialGetUpperLimitv+0x104>)
 8084248:	f007 f8c7 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println();
    Serial.print("Current upper limit:");
    Serial.println(gas_upper_limit);
    Serial.println("Please enter password in order to change the upper limit");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 808424c:	4668      	mov	r0, sp
 808424e:	f006 fe51 	bl	808aef4 <_ZN6StringD1Ev>
            Serial.println("\n\rInvalid value!");
        }
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
 8084252:	b009      	add	sp, #36	; 0x24
 8084254:	bd30      	pop	{r4, r5, pc}
 8084256:	bf00      	nop
 8084258:	20000090 	.word	0x20000090
 808425c:	08092669 	.word	0x08092669
 8084260:	0809267e 	.word	0x0809267e
 8084264:	08091e49 	.word	0x08091e49
 8084268:	08091e4f 	.word	0x08091e4f
 808426c:	080926b7 	.word	0x080926b7
 8084270:	08094100 	.word	0x08094100
 8084274:	080926d0 	.word	0x080926d0
 8084278:	08091ff3 	.word	0x08091ff3
 808427c:	08091f74 	.word	0x08091f74

08084280 <_Z23outputSerialMenuOptionsv>:
    while(!Serial.available()){
        CO_float = readCO();
        Serial.printf("CO: %1.3f ppm\n\r", CO_float);
    }
}
void outputSerialMenuOptions(void){
 8084280:	b508      	push	{r3, lr}
    Serial.println("Command:  Description");
 8084282:	f008 f951 	bl	808c528 <_Z16_fetch_usbserialv>
 8084286:	49a5      	ldr	r1, [pc, #660]	; (808451c <_Z23outputSerialMenuOptionsv+0x29c>)
 8084288:	f007 f8a7 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("a:  Adjust CO2 slope");
 808428c:	f008 f94c 	bl	808c528 <_Z16_fetch_usbserialv>
 8084290:	49a3      	ldr	r1, [pc, #652]	; (8084520 <_Z23outputSerialMenuOptionsv+0x2a0>)
 8084292:	f007 f8a2 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("b:  Adjust CO2 zero");
 8084296:	f008 f947 	bl	808c528 <_Z16_fetch_usbserialv>
 808429a:	49a2      	ldr	r1, [pc, #648]	; (8084524 <_Z23outputSerialMenuOptionsv+0x2a4>)
 808429c:	f007 f89d 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("c:  Adjust CO slope");
 80842a0:	f008 f942 	bl	808c528 <_Z16_fetch_usbserialv>
 80842a4:	49a0      	ldr	r1, [pc, #640]	; (8084528 <_Z23outputSerialMenuOptionsv+0x2a8>)
 80842a6:	f007 f898 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("d:  Adjust CO zero");
 80842aa:	f008 f93d 	bl	808c528 <_Z16_fetch_usbserialv>
 80842ae:	499f      	ldr	r1, [pc, #636]	; (808452c <_Z23outputSerialMenuOptionsv+0x2ac>)
 80842b0:	f007 f893 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("e:  Adjust PM1 slope");
 80842b4:	f008 f938 	bl	808c528 <_Z16_fetch_usbserialv>
 80842b8:	499d      	ldr	r1, [pc, #628]	; (8084530 <_Z23outputSerialMenuOptionsv+0x2b0>)
 80842ba:	f007 f88e 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("f:  Adjust PM1 zero");
 80842be:	f008 f933 	bl	808c528 <_Z16_fetch_usbserialv>
 80842c2:	499c      	ldr	r1, [pc, #624]	; (8084534 <_Z23outputSerialMenuOptionsv+0x2b4>)
 80842c4:	f007 f889 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("g:  Adjust PM2.5 slope");
 80842c8:	f008 f92e 	bl	808c528 <_Z16_fetch_usbserialv>
 80842cc:	499a      	ldr	r1, [pc, #616]	; (8084538 <_Z23outputSerialMenuOptionsv+0x2b8>)
 80842ce:	f007 f884 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("h:  Adjust PM2.5 zero");
 80842d2:	f008 f929 	bl	808c528 <_Z16_fetch_usbserialv>
 80842d6:	4999      	ldr	r1, [pc, #612]	; (808453c <_Z23outputSerialMenuOptionsv+0x2bc>)
 80842d8:	f007 f87f 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("i:  Adjust PM10 slope");
 80842dc:	f008 f924 	bl	808c528 <_Z16_fetch_usbserialv>
 80842e0:	4997      	ldr	r1, [pc, #604]	; (8084540 <_Z23outputSerialMenuOptionsv+0x2c0>)
 80842e2:	f007 f87a 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("j:  Adjust PM10 zero");
 80842e6:	f008 f91f 	bl	808c528 <_Z16_fetch_usbserialv>
 80842ea:	4996      	ldr	r1, [pc, #600]	; (8084544 <_Z23outputSerialMenuOptionsv+0x2c4>)
 80842ec:	f007 f875 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("k:  Adjust Temperature slope");
 80842f0:	f008 f91a 	bl	808c528 <_Z16_fetch_usbserialv>
 80842f4:	4994      	ldr	r1, [pc, #592]	; (8084548 <_Z23outputSerialMenuOptionsv+0x2c8>)
 80842f6:	f007 f870 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("l:  Adjust Temperature zero");
 80842fa:	f008 f915 	bl	808c528 <_Z16_fetch_usbserialv>
 80842fe:	4993      	ldr	r1, [pc, #588]	; (808454c <_Z23outputSerialMenuOptionsv+0x2cc>)
 8084300:	f007 f86b 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("m:  Adjust Pressure slope");
 8084304:	f008 f910 	bl	808c528 <_Z16_fetch_usbserialv>
 8084308:	4991      	ldr	r1, [pc, #580]	; (8084550 <_Z23outputSerialMenuOptionsv+0x2d0>)
 808430a:	f007 f866 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("n:  Adjust Pressure zero");
 808430e:	f008 f90b 	bl	808c528 <_Z16_fetch_usbserialv>
 8084312:	4990      	ldr	r1, [pc, #576]	; (8084554 <_Z23outputSerialMenuOptionsv+0x2d4>)
 8084314:	f007 f861 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("o:  Adjust Humidity slope");
 8084318:	f008 f906 	bl	808c528 <_Z16_fetch_usbserialv>
 808431c:	498e      	ldr	r1, [pc, #568]	; (8084558 <_Z23outputSerialMenuOptionsv+0x2d8>)
 808431e:	f007 f85c 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("p:  Adjust Humidity zero");
 8084322:	f008 f901 	bl	808c528 <_Z16_fetch_usbserialv>
 8084326:	498d      	ldr	r1, [pc, #564]	; (808455c <_Z23outputSerialMenuOptionsv+0x2dc>)
 8084328:	f007 f857 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("q:  Enable serial debugging");
 808432c:	f008 f8fc 	bl	808c528 <_Z16_fetch_usbserialv>
 8084330:	498b      	ldr	r1, [pc, #556]	; (8084560 <_Z23outputSerialMenuOptionsv+0x2e0>)
 8084332:	f007 f852 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("r:  Disable serial debugging");
 8084336:	f008 f8f7 	bl	808c528 <_Z16_fetch_usbserialv>
 808433a:	498a      	ldr	r1, [pc, #552]	; (8084564 <_Z23outputSerialMenuOptionsv+0x2e4>)
 808433c:	f007 f84d 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("s:  Output header string");
 8084340:	f008 f8f2 	bl	808c528 <_Z16_fetch_usbserialv>
 8084344:	4988      	ldr	r1, [pc, #544]	; (8084568 <_Z23outputSerialMenuOptionsv+0x2e8>)
 8084346:	f007 f848 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("t:  Enter new time and date");
 808434a:	f008 f8ed 	bl	808c528 <_Z16_fetch_usbserialv>
 808434e:	4987      	ldr	r1, [pc, #540]	; (808456c <_Z23outputSerialMenuOptionsv+0x2ec>)
 8084350:	f007 f843 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("u:  Enter new time zone");
 8084354:	f008 f8e8 	bl	808c528 <_Z16_fetch_usbserialv>
 8084358:	4985      	ldr	r1, [pc, #532]	; (8084570 <_Z23outputSerialMenuOptionsv+0x2f0>)
 808435a:	f007 f83e 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("v:  Adjust the Device ID");
 808435e:	f008 f8e3 	bl	808c528 <_Z16_fetch_usbserialv>
 8084362:	4984      	ldr	r1, [pc, #528]	; (8084574 <_Z23outputSerialMenuOptionsv+0x2f4>)
 8084364:	f007 f839 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("w:  Get wifi credentials");
 8084368:	f008 f8de 	bl	808c528 <_Z16_fetch_usbserialv>
 808436c:	4982      	ldr	r1, [pc, #520]	; (8084578 <_Z23outputSerialMenuOptionsv+0x2f8>)
 808436e:	f007 f834 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("y:  Enable cellular");
 8084372:	f008 f8d9 	bl	808c528 <_Z16_fetch_usbserialv>
 8084376:	4981      	ldr	r1, [pc, #516]	; (808457c <_Z23outputSerialMenuOptionsv+0x2fc>)
 8084378:	f007 f82f 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("z:  Disable cellular");
 808437c:	f008 f8d4 	bl	808c528 <_Z16_fetch_usbserialv>
 8084380:	497f      	ldr	r1, [pc, #508]	; (8084580 <_Z23outputSerialMenuOptionsv+0x300>)
 8084382:	f007 f82a 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("1:  Adjust gas lower limit");
 8084386:	f008 f8cf 	bl	808c528 <_Z16_fetch_usbserialv>
 808438a:	497e      	ldr	r1, [pc, #504]	; (8084584 <_Z23outputSerialMenuOptionsv+0x304>)
 808438c:	f007 f825 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("2:  Adjust gas upper limit");
 8084390:	f008 f8ca 	bl	808c528 <_Z16_fetch_usbserialv>
 8084394:	497c      	ldr	r1, [pc, #496]	; (8084588 <_Z23outputSerialMenuOptionsv+0x308>)
 8084396:	f007 f820 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("3:  Get build version");
 808439a:	f008 f8c5 	bl	808c528 <_Z16_fetch_usbserialv>
 808439e:	497b      	ldr	r1, [pc, #492]	; (808458c <_Z23outputSerialMenuOptionsv+0x30c>)
 80843a0:	f007 f81b 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("4:  Enable Ozone");
 80843a4:	f008 f8c0 	bl	808c528 <_Z16_fetch_usbserialv>
 80843a8:	4979      	ldr	r1, [pc, #484]	; (8084590 <_Z23outputSerialMenuOptionsv+0x310>)
 80843aa:	f007 f816 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("5:  Disable Ozone");
 80843ae:	f008 f8bb 	bl	808c528 <_Z16_fetch_usbserialv>
 80843b2:	4978      	ldr	r1, [pc, #480]	; (8084594 <_Z23outputSerialMenuOptionsv+0x314>)
 80843b4:	f007 f811 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("6:  Enable VOC's");
 80843b8:	f008 f8b6 	bl	808c528 <_Z16_fetch_usbserialv>
 80843bc:	4976      	ldr	r1, [pc, #472]	; (8084598 <_Z23outputSerialMenuOptionsv+0x318>)
 80843be:	f007 f80c 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("7:  Disable VOC's");
 80843c2:	f008 f8b1 	bl	808c528 <_Z16_fetch_usbserialv>
 80843c6:	4975      	ldr	r1, [pc, #468]	; (808459c <_Z23outputSerialMenuOptionsv+0x31c>)
 80843c8:	f007 f807 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("8:  Output the PMIC system configuration");
 80843cc:	f008 f8ac 	bl	808c528 <_Z16_fetch_usbserialv>
 80843d0:	4973      	ldr	r1, [pc, #460]	; (80845a0 <_Z23outputSerialMenuOptionsv+0x320>)
 80843d2:	f007 f802 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("9:  Increase the charge current by 64 mA");
 80843d6:	f008 f8a7 	bl	808c528 <_Z16_fetch_usbserialv>
 80843da:	4972      	ldr	r1, [pc, #456]	; (80845a4 <_Z23outputSerialMenuOptionsv+0x324>)
 80843dc:	f006 fffd 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("0:  Increase the current input limit by 100 mA");
 80843e0:	f008 f8a2 	bl	808c528 <_Z16_fetch_usbserialv>
 80843e4:	4970      	ldr	r1, [pc, #448]	; (80845a8 <_Z23outputSerialMenuOptionsv+0x328>)
 80843e6:	f006 fff8 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("A:  Ouptput CO constantly and rapidly");
 80843ea:	f008 f89d 	bl	808c528 <_Z16_fetch_usbserialv>
 80843ee:	496f      	ldr	r1, [pc, #444]	; (80845ac <_Z23outputSerialMenuOptionsv+0x32c>)
 80843f0:	f006 fff3 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("B:  Output PM constantly and rapidly");
 80843f4:	f008 f898 	bl	808c528 <_Z16_fetch_usbserialv>
 80843f8:	496d      	ldr	r1, [pc, #436]	; (80845b0 <_Z23outputSerialMenuOptionsv+0x330>)
 80843fa:	f006 ffee 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("C:  Change temperature units to Celcius");
 80843fe:	f008 f893 	bl	808c528 <_Z16_fetch_usbserialv>
 8084402:	496c      	ldr	r1, [pc, #432]	; (80845b4 <_Z23outputSerialMenuOptionsv+0x334>)
 8084404:	f006 ffe9 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("D:  Disable TMP36 temperature sensor and use BME680 temperature");
 8084408:	f008 f88e 	bl	808c528 <_Z16_fetch_usbserialv>
 808440c:	496a      	ldr	r1, [pc, #424]	; (80845b8 <_Z23outputSerialMenuOptionsv+0x338>)
 808440e:	f006 ffe4 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("E:  Enable TMP36 temperature sensor and disable BME680 temperature");
 8084412:	f008 f889 	bl	808c528 <_Z16_fetch_usbserialv>
 8084416:	4969      	ldr	r1, [pc, #420]	; (80845bc <_Z23outputSerialMenuOptionsv+0x33c>)
 8084418:	f006 ffdf 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("F:  Change temperature units to Farenheit");
 808441c:	f008 f884 	bl	808c528 <_Z16_fetch_usbserialv>
 8084420:	4967      	ldr	r1, [pc, #412]	; (80845c0 <_Z23outputSerialMenuOptionsv+0x340>)
 8084422:	f006 ffda 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("G:  Read ozone from analog input (not digitally - board dependent)");
 8084426:	f008 f87f 	bl	808c528 <_Z16_fetch_usbserialv>
 808442a:	4966      	ldr	r1, [pc, #408]	; (80845c4 <_Z23outputSerialMenuOptionsv+0x344>)
 808442c:	f006 ffd5 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("H:  Read ozone digitally (not through analog input - board dependent)");
 8084430:	f008 f87a 	bl	808c528 <_Z16_fetch_usbserialv>
 8084434:	4964      	ldr	r1, [pc, #400]	; (80845c8 <_Z23outputSerialMenuOptionsv+0x348>)
 8084436:	f006 ffd0 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("I:  Adjust frequency for uploading through cellular");
 808443a:	f008 f875 	bl	808c528 <_Z16_fetch_usbserialv>
 808443e:	4963      	ldr	r1, [pc, #396]	; (80845cc <_Z23outputSerialMenuOptionsv+0x34c>)
 8084440:	f006 ffcb 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("J:  Reset ESP, CO2, Plantower");
 8084444:	f008 f870 	bl	808c528 <_Z16_fetch_usbserialv>
 8084448:	4961      	ldr	r1, [pc, #388]	; (80845d0 <_Z23outputSerialMenuOptionsv+0x350>)
 808444a:	f006 ffc6 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("K:  Continuous serial output of GPS");
 808444e:	f008 f86b 	bl	808c528 <_Z16_fetch_usbserialv>
 8084452:	4960      	ldr	r1, [pc, #384]	; (80845d4 <_Z23outputSerialMenuOptionsv+0x354>)
 8084454:	f006 ffc1 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("L:  Write default settings");
 8084458:	f008 f866 	bl	808c528 <_Z16_fetch_usbserialv>
 808445c:	495e      	ldr	r1, [pc, #376]	; (80845d8 <_Z23outputSerialMenuOptionsv+0x358>)
 808445e:	f006 ffbc 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("M:  Enable 20% battery threshold limiting");
 8084462:	f008 f861 	bl	808c528 <_Z16_fetch_usbserialv>
 8084466:	495d      	ldr	r1, [pc, #372]	; (80845dc <_Z23outputSerialMenuOptionsv+0x35c>)
 8084468:	f006 ffb7 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("N:  Disable 20% battery threshold limiting WARNING!!");
 808446c:	f008 f85c 	bl	808c528 <_Z16_fetch_usbserialv>
 8084470:	495b      	ldr	r1, [pc, #364]	; (80845e0 <_Z23outputSerialMenuOptionsv+0x360>)
 8084472:	f006 ffb2 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("O:  Enable low power for GPS module");
 8084476:	f008 f857 	bl	808c528 <_Z16_fetch_usbserialv>
 808447a:	495a      	ldr	r1, [pc, #360]	; (80845e4 <_Z23outputSerialMenuOptionsv+0x364>)
 808447c:	f006 ffad 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("P:  Turn off BATFET");
 8084480:	f008 f852 	bl	808c528 <_Z16_fetch_usbserialv>
 8084484:	4958      	ldr	r1, [pc, #352]	; (80845e8 <_Z23outputSerialMenuOptionsv+0x368>)
 8084486:	f006 ffa8 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("Q:  Allow BATFET to turn on");
 808448a:	f008 f84d 	bl	808c528 <_Z16_fetch_usbserialv>
 808448e:	4957      	ldr	r1, [pc, #348]	; (80845ec <_Z23outputSerialMenuOptionsv+0x36c>)
 8084490:	f006 ffa3 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("R:  Disable ABC logic for CO2 sensor");
 8084494:	f008 f848 	bl	808c528 <_Z16_fetch_usbserialv>
 8084498:	4955      	ldr	r1, [pc, #340]	; (80845f0 <_Z23outputSerialMenuOptionsv+0x370>)
 808449a:	f006 ff9e 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("S:  Enable ABC logic for CO2 sensor");
 808449e:	f008 f843 	bl	808c528 <_Z16_fetch_usbserialv>
 80844a2:	4954      	ldr	r1, [pc, #336]	; (80845f4 <_Z23outputSerialMenuOptionsv+0x374>)
 80844a4:	f006 ff99 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("T:  Enable/disable HIH8120 RH sensor");
 80844a8:	f008 f83e 	bl	808c528 <_Z16_fetch_usbserialv>
 80844ac:	4952      	ldr	r1, [pc, #328]	; (80845f8 <_Z23outputSerialMenuOptionsv+0x378>)
 80844ae:	f006 ff94 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("U:  Switch socket where CO is read from");
 80844b2:	f008 f839 	bl	808c528 <_Z16_fetch_usbserialv>
 80844b6:	4951      	ldr	r1, [pc, #324]	; (80845fc <_Z23outputSerialMenuOptionsv+0x37c>)
 80844b8:	f006 ff8f 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("V:  Calibrate CO2 sensor - must supply ambient level (go outside!)");
 80844bc:	f008 f834 	bl	808c528 <_Z16_fetch_usbserialv>
 80844c0:	494f      	ldr	r1, [pc, #316]	; (8084600 <_Z23outputSerialMenuOptionsv+0x380>)
 80844c2:	f006 ff8a 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("W:  Enable/Disable google location services");
 80844c6:	f008 f82f 	bl	808c528 <_Z16_fetch_usbserialv>
 80844ca:	494e      	ldr	r1, [pc, #312]	; (8084604 <_Z23outputSerialMenuOptionsv+0x384>)
 80844cc:	f006 ff85 	bl	808b3da <_ZN5Print7printlnEPKc>

    Serial.println("Y:  Go to 108_L serial menu");
 80844d0:	f008 f82a 	bl	808c528 <_Z16_fetch_usbserialv>
 80844d4:	494c      	ldr	r1, [pc, #304]	; (8084608 <_Z23outputSerialMenuOptionsv+0x388>)
 80844d6:	f006 ff80 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("Z:  Output cellular information (CCID, IMEI, etc)");
 80844da:	f008 f825 	bl	808c528 <_Z16_fetch_usbserialv>
 80844de:	494b      	ldr	r1, [pc, #300]	; (808460c <_Z23outputSerialMenuOptionsv+0x38c>)
 80844e0:	f006 ff7b 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("!:  Continuous serial output of VOC's");
 80844e4:	f008 f820 	bl	808c528 <_Z16_fetch_usbserialv>
 80844e8:	4949      	ldr	r1, [pc, #292]	; (8084610 <_Z23outputSerialMenuOptionsv+0x390>)
 80844ea:	f006 ff76 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("@   Enable/Disable Sensible-iot data push.  If enabled, time zone will be ignored - UTC will be used.");
 80844ee:	f008 f81b 	bl	808c528 <_Z16_fetch_usbserialv>
 80844f2:	4948      	ldr	r1, [pc, #288]	; (8084614 <_Z23outputSerialMenuOptionsv+0x394>)
 80844f4:	f006 ff71 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("#   Enable/Disable cartopper power mode.  If enabled, absense of external power will stop cellular.");
 80844f8:	f008 f816 	bl	808c528 <_Z16_fetch_usbserialv>
 80844fc:	4946      	ldr	r1, [pc, #280]	; (8084618 <_Z23outputSerialMenuOptionsv+0x398>)
 80844fe:	f006 ff6c 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("?:  Output this menu");
 8084502:	f008 f811 	bl	808c528 <_Z16_fetch_usbserialv>
 8084506:	4945      	ldr	r1, [pc, #276]	; (808461c <_Z23outputSerialMenuOptionsv+0x39c>)
 8084508:	f006 ff67 	bl	808b3da <_ZN5Print7printlnEPKc>
    Serial.println("x:  Exits this menu");
 808450c:	f008 f80c 	bl	808c528 <_Z16_fetch_usbserialv>
  }
 8084510:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.println("Z:  Output cellular information (CCID, IMEI, etc)");
    Serial.println("!:  Continuous serial output of VOC's");
    Serial.println("@   Enable/Disable Sensible-iot data push.  If enabled, time zone will be ignored - UTC will be used.");
    Serial.println("#   Enable/Disable cartopper power mode.  If enabled, absense of external power will stop cellular.");
    Serial.println("?:  Output this menu");
    Serial.println("x:  Exits this menu");
 8084514:	4942      	ldr	r1, [pc, #264]	; (8084620 <_Z23outputSerialMenuOptionsv+0x3a0>)
 8084516:	f006 bf60 	b.w	808b3da <_ZN5Print7printlnEPKc>
 808451a:	bf00      	nop
 808451c:	080926e3 	.word	0x080926e3
 8084520:	080926f9 	.word	0x080926f9
 8084524:	0809270e 	.word	0x0809270e
 8084528:	08092722 	.word	0x08092722
 808452c:	08092736 	.word	0x08092736
 8084530:	08092749 	.word	0x08092749
 8084534:	0809275e 	.word	0x0809275e
 8084538:	08092772 	.word	0x08092772
 808453c:	08092789 	.word	0x08092789
 8084540:	0809279f 	.word	0x0809279f
 8084544:	080927b5 	.word	0x080927b5
 8084548:	080927ca 	.word	0x080927ca
 808454c:	080927e7 	.word	0x080927e7
 8084550:	08092803 	.word	0x08092803
 8084554:	0809281d 	.word	0x0809281d
 8084558:	08092836 	.word	0x08092836
 808455c:	08092850 	.word	0x08092850
 8084560:	08092869 	.word	0x08092869
 8084564:	08092885 	.word	0x08092885
 8084568:	080928a2 	.word	0x080928a2
 808456c:	080928bb 	.word	0x080928bb
 8084570:	080928d7 	.word	0x080928d7
 8084574:	080928ef 	.word	0x080928ef
 8084578:	08092908 	.word	0x08092908
 808457c:	08092921 	.word	0x08092921
 8084580:	08092935 	.word	0x08092935
 8084584:	0809294a 	.word	0x0809294a
 8084588:	08092965 	.word	0x08092965
 808458c:	08092980 	.word	0x08092980
 8084590:	08092996 	.word	0x08092996
 8084594:	080929a7 	.word	0x080929a7
 8084598:	080929b9 	.word	0x080929b9
 808459c:	080929ca 	.word	0x080929ca
 80845a0:	080929dc 	.word	0x080929dc
 80845a4:	08092a05 	.word	0x08092a05
 80845a8:	08092a2e 	.word	0x08092a2e
 80845ac:	08092a5d 	.word	0x08092a5d
 80845b0:	08092a83 	.word	0x08092a83
 80845b4:	08092aa8 	.word	0x08092aa8
 80845b8:	08092ad0 	.word	0x08092ad0
 80845bc:	08092b10 	.word	0x08092b10
 80845c0:	08092b53 	.word	0x08092b53
 80845c4:	08092b7d 	.word	0x08092b7d
 80845c8:	08092bc0 	.word	0x08092bc0
 80845cc:	08092c06 	.word	0x08092c06
 80845d0:	08092c3a 	.word	0x08092c3a
 80845d4:	08092c58 	.word	0x08092c58
 80845d8:	08092c7c 	.word	0x08092c7c
 80845dc:	08092c97 	.word	0x08092c97
 80845e0:	08092cc1 	.word	0x08092cc1
 80845e4:	08092cf6 	.word	0x08092cf6
 80845e8:	08092d1a 	.word	0x08092d1a
 80845ec:	08092d2e 	.word	0x08092d2e
 80845f0:	08092d4a 	.word	0x08092d4a
 80845f4:	08092d6f 	.word	0x08092d6f
 80845f8:	08092d93 	.word	0x08092d93
 80845fc:	08092db8 	.word	0x08092db8
 8084600:	08092de0 	.word	0x08092de0
 8084604:	08092e23 	.word	0x08092e23
 8084608:	08092e4f 	.word	0x08092e4f
 808460c:	08092e6b 	.word	0x08092e6b
 8084610:	08092e9d 	.word	0x08092e9d
 8084614:	08092ec3 	.word	0x08092ec3
 8084618:	08092f29 	.word	0x08092f29
 808461c:	08092f8d 	.word	0x08092f8d
 8084620:	08092fa2 	.word	0x08092fa2

08084624 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8084624:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 8084626:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8084628:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 808462a:	b17c      	cbz	r4, 808464c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 808462c:	6863      	ldr	r3, [r4, #4]
 808462e:	3b01      	subs	r3, #1
 8084630:	6063      	str	r3, [r4, #4]
 8084632:	b95b      	cbnz	r3, 808464c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 8084634:	6823      	ldr	r3, [r4, #0]
 8084636:	4620      	mov	r0, r4
 8084638:	689b      	ldr	r3, [r3, #8]
 808463a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 808463c:	68a3      	ldr	r3, [r4, #8]
 808463e:	3b01      	subs	r3, #1
 8084640:	60a3      	str	r3, [r4, #8]
 8084642:	b91b      	cbnz	r3, 808464c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8084644:	6823      	ldr	r3, [r4, #0]
 8084646:	4620      	mov	r0, r4
 8084648:	68db      	ldr	r3, [r3, #12]
 808464a:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 808464c:	4628      	mov	r0, r5
 808464e:	bd38      	pop	{r3, r4, r5, pc}

08084650 <_Z13outputToCloud6StringS_>:
    snprintf(data, sizeof(data), "{\"lat\":%f, \"lng\":%f}", lat, lng);

    Particle.publish("testJson", data, PRIVATE);
}*/
//todo: average everything except ozone
void outputToCloud(String data, String sensible_data){
 8084650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084654:	b09d      	sub	sp, #116	; 0x74
 8084656:	4680      	mov	r8, r0
 8084658:	460e      	mov	r6, r1
    String webhook_data = " ";
 808465a:	a804      	add	r0, sp, #16
 808465c:	49af      	ldr	r1, [pc, #700]	; (808491c <_Z13outputToCloud6StringS_+0x2cc>)
 808465e:	f006 fc90 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
    CO_sum += CO_float;
 8084662:	4faf      	ldr	r7, [pc, #700]	; (8084920 <_Z13outputToCloud6StringS_+0x2d0>)
 8084664:	4baf      	ldr	r3, [pc, #700]	; (8084924 <_Z13outputToCloud6StringS_+0x2d4>)
 8084666:	6838      	ldr	r0, [r7, #0]
 8084668:	6819      	ldr	r1, [r3, #0]
 808466a:	f009 f9db 	bl	808da24 <__addsf3>
    CO2_sum += CO2_float;
 808466e:	4dae      	ldr	r5, [pc, #696]	; (8084928 <_Z13outputToCloud6StringS_+0x2d8>)
 8084670:	4bae      	ldr	r3, [pc, #696]	; (808492c <_Z13outputToCloud6StringS_+0x2dc>)
    Particle.publish("testJson", data, PRIVATE);
}*/
//todo: average everything except ozone
void outputToCloud(String data, String sensible_data){
    String webhook_data = " ";
    CO_sum += CO_float;
 8084672:	6038      	str	r0, [r7, #0]
    CO2_sum += CO2_float;
 8084674:	6819      	ldr	r1, [r3, #0]
    Particle.publish("testJson", data, PRIVATE);
}*/
//todo: average everything except ozone
void outputToCloud(String data, String sensible_data){
    String webhook_data = " ";
    CO_sum += CO_float;
 8084676:	4604      	mov	r4, r0
    CO2_sum += CO2_float;
 8084678:	6828      	ldr	r0, [r5, #0]
 808467a:	f009 f9d3 	bl	808da24 <__addsf3>
    O3_sum = O3_float;      //do not average ozone because it is averaged on the ozone monitor
 808467e:	4bac      	ldr	r3, [pc, #688]	; (8084930 <_Z13outputToCloud6StringS_+0x2e0>)
 8084680:	f8df 9320 	ldr.w	r9, [pc, #800]	; 80849a4 <_Z13outputToCloud6StringS_+0x354>
 8084684:	681b      	ldr	r3, [r3, #0]
    measurement_count++;
 8084686:	f8df a32c 	ldr.w	sl, [pc, #812]	; 80849b4 <_Z13outputToCloud6StringS_+0x364>
//todo: average everything except ozone
void outputToCloud(String data, String sensible_data){
    String webhook_data = " ";
    CO_sum += CO_float;
    CO2_sum += CO2_float;
    O3_sum = O3_float;      //do not average ozone because it is averaged on the ozone monitor
 808468a:	f8c9 3000 	str.w	r3, [r9]
    measurement_count++;

    if(measurement_count == measurements_to_average){
 808468e:	4ba9      	ldr	r3, [pc, #676]	; (8084934 <_Z13outputToCloud6StringS_+0x2e4>)
}*/
//todo: average everything except ozone
void outputToCloud(String data, String sensible_data){
    String webhook_data = " ";
    CO_sum += CO_float;
    CO2_sum += CO2_float;
 8084690:	4683      	mov	fp, r0
 8084692:	6028      	str	r0, [r5, #0]
    O3_sum = O3_float;      //do not average ozone because it is averaged on the ozone monitor
    measurement_count++;
 8084694:	f8da 0000 	ldr.w	r0, [sl]

    if(measurement_count == measurements_to_average){
 8084698:	681b      	ldr	r3, [r3, #0]
void outputToCloud(String data, String sensible_data){
    String webhook_data = " ";
    CO_sum += CO_float;
    CO2_sum += CO2_float;
    O3_sum = O3_float;      //do not average ozone because it is averaged on the ozone monitor
    measurement_count++;
 808469a:	3001      	adds	r0, #1

    if(measurement_count == measurements_to_average){
 808469c:	4298      	cmp	r0, r3
void outputToCloud(String data, String sensible_data){
    String webhook_data = " ";
    CO_sum += CO_float;
    CO2_sum += CO2_float;
    O3_sum = O3_float;      //do not average ozone because it is averaged on the ozone monitor
    measurement_count++;
 808469e:	f8ca 0000 	str.w	r0, [sl]

    if(measurement_count == measurements_to_average){
 80846a2:	f040 8103 	bne.w	80848ac <_Z13outputToCloud6StringS_+0x25c>
        CO_sum /= measurements_to_average;
 80846a6:	f009 fa71 	bl	808db8c <__aeabi_i2f>
 80846aa:	4601      	mov	r1, r0
 80846ac:	9003      	str	r0, [sp, #12]
 80846ae:	4620      	mov	r0, r4
 80846b0:	f009 fb74 	bl	808dd9c <__aeabi_fdiv>
        CO2_sum /= measurements_to_average;
 80846b4:	9b03      	ldr	r3, [sp, #12]
    CO2_sum += CO2_float;
    O3_sum = O3_float;      //do not average ozone because it is averaged on the ozone monitor
    measurement_count++;

    if(measurement_count == measurements_to_average){
        CO_sum /= measurements_to_average;
 80846b6:	6038      	str	r0, [r7, #0]
        CO2_sum /= measurements_to_average;
 80846b8:	4619      	mov	r1, r3
 80846ba:	4658      	mov	r0, fp
 80846bc:	f009 fb6e 	bl	808dd9c <__aeabi_fdiv>
        //O3_sum /= measurements_to_average;

        measurement_count = 0;
 80846c0:	2300      	movs	r3, #0
 80846c2:	f8ca 3000 	str.w	r3, [sl]
        String webhook_data = String(DEVICE_id) + ",VOC: " + String(bme.gas_resistance / 1000.0, 1) + ", CO: " + CO_sum + ", CO2: " + CO2_sum + ", PM1: " + PM01Value + ",PM2.5: " + corrected_PM_25 + ", PM10: " + PM10Value + ",Temp: " + String(readTemperature(), 1) + ",Press: ";
 80846c6:	4b9c      	ldr	r3, [pc, #624]	; (8084938 <_Z13outputToCloud6StringS_+0x2e8>)
 80846c8:	220a      	movs	r2, #10
 80846ca:	6819      	ldr	r1, [r3, #0]
    O3_sum = O3_float;      //do not average ozone because it is averaged on the ozone monitor
    measurement_count++;

    if(measurement_count == measurements_to_average){
        CO_sum /= measurements_to_average;
        CO2_sum /= measurements_to_average;
 80846cc:	6028      	str	r0, [r5, #0]
        //O3_sum /= measurements_to_average;

        measurement_count = 0;
        String webhook_data = String(DEVICE_id) + ",VOC: " + String(bme.gas_resistance / 1000.0, 1) + ", CO: " + CO_sum + ", CO2: " + CO2_sum + ", PM1: " + PM01Value + ",PM2.5: " + corrected_PM_25 + ", PM10: " + PM10Value + ",Temp: " + String(readTemperature(), 1) + ",Press: ";
 80846ce:	a80c      	add	r0, sp, #48	; 0x30
 80846d0:	f006 fccb 	bl	808b06a <_ZN6StringC1Eih>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80846d4:	a90c      	add	r1, sp, #48	; 0x30
 80846d6:	a810      	add	r0, sp, #64	; 0x40
 80846d8:	f006 fc92 	bl	808b000 <_ZN6StringC1ERKS_>
 80846dc:	4997      	ldr	r1, [pc, #604]	; (808493c <_Z13outputToCloud6StringS_+0x2ec>)
 80846de:	a810      	add	r0, sp, #64	; 0x40
 80846e0:	f006 fd7e 	bl	808b1e0 <_ZplRK15StringSumHelperPKc>
 80846e4:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 80849b8 <_Z13outputToCloud6StringS_+0x368>
 80846e8:	4683      	mov	fp, r0
 80846ea:	f8da 000c 	ldr.w	r0, [sl, #12]
 80846ee:	f008 fdf7 	bl	808d2e0 <__aeabi_f2d>
 80846f2:	2200      	movs	r2, #0
 80846f4:	4b92      	ldr	r3, [pc, #584]	; (8084940 <_Z13outputToCloud6StringS_+0x2f0>)
 80846f6:	f008 ff71 	bl	808d5dc <__aeabi_ddiv>
 80846fa:	2401      	movs	r4, #1
 80846fc:	4602      	mov	r2, r0
 80846fe:	460b      	mov	r3, r1
 8084700:	9400      	str	r4, [sp, #0]
 8084702:	a814      	add	r0, sp, #80	; 0x50
 8084704:	f006 fcee 	bl	808b0e4 <_ZN6StringC1Edi>
 8084708:	a914      	add	r1, sp, #80	; 0x50
 808470a:	4658      	mov	r0, fp
 808470c:	f006 fd5c 	bl	808b1c8 <_ZplRK15StringSumHelperRK6String>
 8084710:	498c      	ldr	r1, [pc, #560]	; (8084944 <_Z13outputToCloud6StringS_+0x2f4>)
 8084712:	f006 fd65 	bl	808b1e0 <_ZplRK15StringSumHelperPKc>
 8084716:	6839      	ldr	r1, [r7, #0]
 8084718:	f006 fd7e 	bl	808b218 <_ZplRK15StringSumHelperf>
 808471c:	498a      	ldr	r1, [pc, #552]	; (8084948 <_Z13outputToCloud6StringS_+0x2f8>)
 808471e:	f006 fd5f 	bl	808b1e0 <_ZplRK15StringSumHelperPKc>
 8084722:	6829      	ldr	r1, [r5, #0]
 8084724:	f006 fd78 	bl	808b218 <_ZplRK15StringSumHelperf>
 8084728:	4988      	ldr	r1, [pc, #544]	; (808494c <_Z13outputToCloud6StringS_+0x2fc>)
 808472a:	f006 fd59 	bl	808b1e0 <_ZplRK15StringSumHelperPKc>
 808472e:	4b88      	ldr	r3, [pc, #544]	; (8084950 <_Z13outputToCloud6StringS_+0x300>)
 8084730:	6819      	ldr	r1, [r3, #0]
 8084732:	f006 fd67 	bl	808b204 <_ZplRK15StringSumHelperi>
 8084736:	4987      	ldr	r1, [pc, #540]	; (8084954 <_Z13outputToCloud6StringS_+0x304>)
 8084738:	f006 fd52 	bl	808b1e0 <_ZplRK15StringSumHelperPKc>
 808473c:	4b86      	ldr	r3, [pc, #536]	; (8084958 <_Z13outputToCloud6StringS_+0x308>)
 808473e:	6819      	ldr	r1, [r3, #0]
 8084740:	f006 fd6a 	bl	808b218 <_ZplRK15StringSumHelperf>
 8084744:	4985      	ldr	r1, [pc, #532]	; (808495c <_Z13outputToCloud6StringS_+0x30c>)
 8084746:	f006 fd4b 	bl	808b1e0 <_ZplRK15StringSumHelperPKc>
 808474a:	4b85      	ldr	r3, [pc, #532]	; (8084960 <_Z13outputToCloud6StringS_+0x310>)
 808474c:	6819      	ldr	r1, [r3, #0]
 808474e:	f006 fd59 	bl	808b204 <_ZplRK15StringSumHelperi>
 8084752:	4984      	ldr	r1, [pc, #528]	; (8084964 <_Z13outputToCloud6StringS_+0x314>)
 8084754:	f006 fd44 	bl	808b1e0 <_ZplRK15StringSumHelperPKc>
 8084758:	4605      	mov	r5, r0
 808475a:	f7fc ff49 	bl	80815f0 <_Z15readTemperaturev>
 808475e:	4622      	mov	r2, r4
 8084760:	4601      	mov	r1, r0
 8084762:	a818      	add	r0, sp, #96	; 0x60
 8084764:	f006 fca7 	bl	808b0b6 <_ZN6StringC1Efi>
 8084768:	a918      	add	r1, sp, #96	; 0x60
 808476a:	4628      	mov	r0, r5
 808476c:	f006 fd2c 	bl	808b1c8 <_ZplRK15StringSumHelperRK6String>
 8084770:	497d      	ldr	r1, [pc, #500]	; (8084968 <_Z13outputToCloud6StringS_+0x318>)
 8084772:	f006 fd35 	bl	808b1e0 <_ZplRK15StringSumHelperPKc>
 8084776:	4601      	mov	r1, r0
 8084778:	a808      	add	r0, sp, #32
 808477a:	f006 fc41 	bl	808b000 <_ZN6StringC1ERKS_>
 808477e:	a818      	add	r0, sp, #96	; 0x60
 8084780:	f006 fbb8 	bl	808aef4 <_ZN6StringD1Ev>
 8084784:	a814      	add	r0, sp, #80	; 0x50
 8084786:	f006 fbb5 	bl	808aef4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808478a:	a810      	add	r0, sp, #64	; 0x40
 808478c:	f006 fbb2 	bl	808aef4 <_ZN6StringD1Ev>
 8084790:	a80c      	add	r0, sp, #48	; 0x30
 8084792:	f006 fbaf 	bl	808aef4 <_ZN6StringD1Ev>
        webhook_data += String(bme.pressure / 100.0, 1) + ",HUM: " + String(bme.humidity, 1) + ",Snd: " + String(sound_average) + ",O3: " + O3_sum + "\n\r";
 8084796:	f8da 0004 	ldr.w	r0, [sl, #4]
 808479a:	f008 fda1 	bl	808d2e0 <__aeabi_f2d>
 808479e:	2200      	movs	r2, #0
 80847a0:	4b72      	ldr	r3, [pc, #456]	; (808496c <_Z13outputToCloud6StringS_+0x31c>)
 80847a2:	f008 ff1b 	bl	808d5dc <__aeabi_ddiv>
 80847a6:	9400      	str	r4, [sp, #0]
 80847a8:	460b      	mov	r3, r1
 80847aa:	4602      	mov	r2, r0
 80847ac:	a80c      	add	r0, sp, #48	; 0x30
 80847ae:	f006 fc99 	bl	808b0e4 <_ZN6StringC1Edi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80847b2:	a90c      	add	r1, sp, #48	; 0x30
 80847b4:	a810      	add	r0, sp, #64	; 0x40
 80847b6:	f006 fc23 	bl	808b000 <_ZN6StringC1ERKS_>
 80847ba:	496d      	ldr	r1, [pc, #436]	; (8084970 <_Z13outputToCloud6StringS_+0x320>)
 80847bc:	a810      	add	r0, sp, #64	; 0x40
 80847be:	f006 fd0f 	bl	808b1e0 <_ZplRK15StringSumHelperPKc>
 80847c2:	4605      	mov	r5, r0
 80847c4:	4622      	mov	r2, r4
 80847c6:	f8da 1008 	ldr.w	r1, [sl, #8]
 80847ca:	a814      	add	r0, sp, #80	; 0x50
 80847cc:	f006 fc73 	bl	808b0b6 <_ZN6StringC1Efi>
 80847d0:	a914      	add	r1, sp, #80	; 0x50
 80847d2:	4628      	mov	r0, r5
 80847d4:	f006 fcf8 	bl	808b1c8 <_ZplRK15StringSumHelperRK6String>
 80847d8:	4966      	ldr	r1, [pc, #408]	; (8084974 <_Z13outputToCloud6StringS_+0x324>)
 80847da:	f006 fd01 	bl	808b1e0 <_ZplRK15StringSumHelperPKc>
 80847de:	4604      	mov	r4, r0
 80847e0:	2306      	movs	r3, #6
 80847e2:	9300      	str	r3, [sp, #0]
 80847e4:	4b64      	ldr	r3, [pc, #400]	; (8084978 <_Z13outputToCloud6StringS_+0x328>)
 80847e6:	a818      	add	r0, sp, #96	; 0x60
 80847e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80847ec:	f006 fc7a 	bl	808b0e4 <_ZN6StringC1Edi>
 80847f0:	a918      	add	r1, sp, #96	; 0x60
 80847f2:	4620      	mov	r0, r4
 80847f4:	f006 fce8 	bl	808b1c8 <_ZplRK15StringSumHelperRK6String>
 80847f8:	4960      	ldr	r1, [pc, #384]	; (808497c <_Z13outputToCloud6StringS_+0x32c>)
 80847fa:	f006 fcf1 	bl	808b1e0 <_ZplRK15StringSumHelperPKc>
 80847fe:	f8d9 1000 	ldr.w	r1, [r9]
 8084802:	f006 fd09 	bl	808b218 <_ZplRK15StringSumHelperf>
 8084806:	495e      	ldr	r1, [pc, #376]	; (8084980 <_Z13outputToCloud6StringS_+0x330>)
 8084808:	f006 fcea 	bl	808b1e0 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808480c:	4601      	mov	r1, r0
 808480e:	a808      	add	r0, sp, #32
 8084810:	f006 fc95 	bl	808b13e <_ZN6String6concatERKS_>
 8084814:	a818      	add	r0, sp, #96	; 0x60
 8084816:	f006 fb6d 	bl	808aef4 <_ZN6StringD1Ev>
 808481a:	a814      	add	r0, sp, #80	; 0x50
 808481c:	f006 fb6a 	bl	808aef4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084820:	a810      	add	r0, sp, #64	; 0x40
 8084822:	f006 fb67 	bl	808aef4 <_ZN6StringD1Ev>
 8084826:	a80c      	add	r0, sp, #48	; 0x30
 8084828:	f006 fb64 	bl	808aef4 <_ZN6StringD1Ev>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808482c:	f005 ffdc 	bl	808a7e8 <spark_cloud_flag_connected>
 8084830:	4c54      	ldr	r4, [pc, #336]	; (8084984 <_Z13outputToCloud6StringS_+0x334>)
 8084832:	4b55      	ldr	r3, [pc, #340]	; (8084988 <_Z13outputToCloud6StringS_+0x338>)

        if(Particle.connected() && serial_cellular_enabled){
 8084834:	2800      	cmp	r0, #0
 8084836:	d05a      	beq.n	80848ee <_Z13outputToCloud6StringS_+0x29e>
 8084838:	681a      	ldr	r2, [r3, #0]
 808483a:	2a00      	cmp	r2, #0
 808483c:	d057      	beq.n	80848ee <_Z13outputToCloud6StringS_+0x29e>
            status_word.status_int |= 0x0002;
 808483e:	4a53      	ldr	r2, [pc, #332]	; (808498c <_Z13outputToCloud6StringS_+0x33c>)
 8084840:	4d53      	ldr	r5, [pc, #332]	; (8084990 <_Z13outputToCloud6StringS_+0x340>)
 8084842:	8813      	ldrh	r3, [r2, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8084844:	4953      	ldr	r1, [pc, #332]	; (8084994 <_Z13outputToCloud6StringS_+0x344>)
 8084846:	f043 0302 	orr.w	r3, r3, #2
 808484a:	8013      	strh	r3, [r2, #0]
 808484c:	782b      	ldrb	r3, [r5, #0]
 808484e:	f8d8 2000 	ldr.w	r2, [r8]
 8084852:	f88d 3000 	strb.w	r3, [sp]
 8084856:	a818      	add	r0, sp, #96	; 0x60
 8084858:	233c      	movs	r3, #60	; 0x3c
 808485a:	f007 fc23 	bl	808c0a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808485e:	a819      	add	r0, sp, #100	; 0x64
 8084860:	f7ff fee0 	bl	8084624 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8084864:	f005 fdbc 	bl	808a3e0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8084868:	4f4b      	ldr	r7, [pc, #300]	; (8084998 <_Z13outputToCloud6StringS_+0x348>)
 808486a:	6038      	str	r0, [r7, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 808486c:	f005 ffac 	bl	808a7c8 <spark_process>
            Particle.publish("pamup", data, PRIVATE);
            Particle.process(); //attempt at ensuring the publish is complete before sleeping
            if(debugging_enabled){
 8084870:	6823      	ldr	r3, [r4, #0]
 8084872:	b173      	cbz	r3, 8084892 <_Z13outputToCloud6StringS_+0x242>
              Serial.println("Published pamup data!");
 8084874:	f007 fe58 	bl	808c528 <_Z16_fetch_usbserialv>
 8084878:	4948      	ldr	r1, [pc, #288]	; (808499c <_Z13outputToCloud6StringS_+0x34c>)
 808487a:	f006 fdae 	bl	808b3da <_ZN5Print7printlnEPKc>
              writeLogFile("Published pamup data!");
 808487e:	4947      	ldr	r1, [pc, #284]	; (808499c <_Z13outputToCloud6StringS_+0x34c>)
 8084880:	a818      	add	r0, sp, #96	; 0x60
 8084882:	f006 fb7e 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
 8084886:	a818      	add	r0, sp, #96	; 0x60
 8084888:	f7fd fa42 	bl	8081d10 <_Z12writeLogFile6String>
 808488c:	a818      	add	r0, sp, #96	; 0x60
 808488e:	f006 fb31 	bl	808aef4 <_ZN6StringD1Ev>
            }
            if(sensible_iot_en){
 8084892:	4b43      	ldr	r3, [pc, #268]	; (80849a0 <_Z13outputToCloud6StringS_+0x350>)
 8084894:	681b      	ldr	r3, [r3, #0]
 8084896:	b97b      	cbnz	r3, 80848b8 <_Z13outputToCloud6StringS_+0x268>
                    Serial.println("Couldn't connect to particle.");
                    writeLogFile("Couldn't connect to particle.");
                  }
            }
        }
        CO_sum = 0;
 8084898:	4a21      	ldr	r2, [pc, #132]	; (8084920 <_Z13outputToCloud6StringS_+0x2d0>)
 808489a:	2300      	movs	r3, #0
 808489c:	6013      	str	r3, [r2, #0]
        CO2_sum = 0;
 808489e:	4a22      	ldr	r2, [pc, #136]	; (8084928 <_Z13outputToCloud6StringS_+0x2d8>)
        CO_sum /= measurements_to_average;
        CO2_sum /= measurements_to_average;
        //O3_sum /= measurements_to_average;

        measurement_count = 0;
        String webhook_data = String(DEVICE_id) + ",VOC: " + String(bme.gas_resistance / 1000.0, 1) + ", CO: " + CO_sum + ", CO2: " + CO2_sum + ", PM1: " + PM01Value + ",PM2.5: " + corrected_PM_25 + ", PM10: " + PM10Value + ",Temp: " + String(readTemperature(), 1) + ",Press: ";
 80848a0:	a808      	add	r0, sp, #32
                    writeLogFile("Couldn't connect to particle.");
                  }
            }
        }
        CO_sum = 0;
        CO2_sum = 0;
 80848a2:	6013      	str	r3, [r2, #0]
        O3_sum = 0;
 80848a4:	4a3f      	ldr	r2, [pc, #252]	; (80849a4 <_Z13outputToCloud6StringS_+0x354>)
 80848a6:	6013      	str	r3, [r2, #0]
        CO_sum /= measurements_to_average;
        CO2_sum /= measurements_to_average;
        //O3_sum /= measurements_to_average;

        measurement_count = 0;
        String webhook_data = String(DEVICE_id) + ",VOC: " + String(bme.gas_resistance / 1000.0, 1) + ", CO: " + CO_sum + ", CO2: " + CO2_sum + ", PM1: " + PM01Value + ",PM2.5: " + corrected_PM_25 + ", PM10: " + PM10Value + ",Temp: " + String(readTemperature(), 1) + ",Press: ";
 80848a8:	f006 fb24 	bl	808aef4 <_ZN6StringD1Ev>

    Particle.publish("testJson", data, PRIVATE);
}*/
//todo: average everything except ozone
void outputToCloud(String data, String sensible_data){
    String webhook_data = " ";
 80848ac:	a804      	add	r0, sp, #16
 80848ae:	f006 fb21 	bl	808aef4 <_ZN6StringD1Ev>
        }
        CO_sum = 0;
        CO2_sum = 0;
        O3_sum = 0;
    }
}
 80848b2:	b01d      	add	sp, #116	; 0x74
 80848b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80848b8:	782b      	ldrb	r3, [r5, #0]
 80848ba:	6832      	ldr	r2, [r6, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80848bc:	493a      	ldr	r1, [pc, #232]	; (80849a8 <_Z13outputToCloud6StringS_+0x358>)
 80848be:	f88d 3000 	strb.w	r3, [sp]
 80848c2:	a818      	add	r0, sp, #96	; 0x60
 80848c4:	233c      	movs	r3, #60	; 0x3c
 80848c6:	f007 fbed 	bl	808c0a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80848ca:	a819      	add	r0, sp, #100	; 0x64
 80848cc:	f7ff feaa 	bl	8084624 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80848d0:	f005 fd86 	bl	808a3e0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80848d4:	6038      	str	r0, [r7, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80848d6:	f005 ff77 	bl	808a7c8 <spark_process>
            }
            if(sensible_iot_en){
                Particle.publish("sensiblePamUp", sensible_data, PRIVATE);
                //testsensible();
                Particle.process();
                if(debugging_enabled){
 80848da:	6823      	ldr	r3, [r4, #0]
 80848dc:	2b00      	cmp	r3, #0
 80848de:	d0db      	beq.n	8084898 <_Z13outputToCloud6StringS_+0x248>
                    Serial.println("Published sensible data!");
 80848e0:	f007 fe22 	bl	808c528 <_Z16_fetch_usbserialv>
 80848e4:	4931      	ldr	r1, [pc, #196]	; (80849ac <_Z13outputToCloud6StringS_+0x35c>)
 80848e6:	f006 fd78 	bl	808b3da <_ZN5Print7printlnEPKc>
                    writeLogFile("Published sensible data!");
 80848ea:	4930      	ldr	r1, [pc, #192]	; (80849ac <_Z13outputToCloud6StringS_+0x35c>)
 80848ec:	e00b      	b.n	8084906 <_Z13outputToCloud6StringS_+0x2b6>
                }
            }
        }else{
            if(serial_cellular_enabled == 0){
 80848ee:	681b      	ldr	r3, [r3, #0]
 80848f0:	2b00      	cmp	r3, #0
 80848f2:	d163      	bne.n	80849bc <_Z13outputToCloud6StringS_+0x36c>
                if(debugging_enabled){
 80848f4:	6823      	ldr	r3, [r4, #0]
 80848f6:	2b00      	cmp	r3, #0
 80848f8:	d0ce      	beq.n	8084898 <_Z13outputToCloud6StringS_+0x248>
                    Serial.println("Cellular is disabled.");
 80848fa:	f007 fe15 	bl	808c528 <_Z16_fetch_usbserialv>
 80848fe:	492c      	ldr	r1, [pc, #176]	; (80849b0 <_Z13outputToCloud6StringS_+0x360>)
 8084900:	f006 fd6b 	bl	808b3da <_ZN5Print7printlnEPKc>
                    writeLogFile("Cellular is disabled.");
 8084904:	492a      	ldr	r1, [pc, #168]	; (80849b0 <_Z13outputToCloud6StringS_+0x360>)
                  }
            }else{
                status_word.status_int &= 0xFFFD;   //clear the connected bit
                if(debugging_enabled){
                    Serial.println("Couldn't connect to particle.");
                    writeLogFile("Couldn't connect to particle.");
 8084906:	a818      	add	r0, sp, #96	; 0x60
 8084908:	f006 fb3b 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
 808490c:	a818      	add	r0, sp, #96	; 0x60
 808490e:	f7fd f9ff 	bl	8081d10 <_Z12writeLogFile6String>
 8084912:	a818      	add	r0, sp, #96	; 0x60
 8084914:	f006 faee 	bl	808aef4 <_ZN6StringD1Ev>
 8084918:	e7be      	b.n	8084898 <_Z13outputToCloud6StringS_+0x248>
 808491a:	bf00      	nop
 808491c:	08091756 	.word	0x08091756
 8084920:	20000b80 	.word	0x20000b80
 8084924:	20000b1c 	.word	0x20000b1c
 8084928:	20000794 	.word	0x20000794
 808492c:	20000228 	.word	0x20000228
 8084930:	200007fc 	.word	0x200007fc
 8084934:	20000b04 	.word	0x20000b04
 8084938:	20000088 	.word	0x20000088
 808493c:	08092fb6 	.word	0x08092fb6
 8084940:	408f4000 	.word	0x408f4000
 8084944:	08092fbd 	.word	0x08092fbd
 8084948:	08092fc4 	.word	0x08092fc4
 808494c:	08092fcc 	.word	0x08092fcc
 8084950:	20000b18 	.word	0x20000b18
 8084954:	08092fd4 	.word	0x08092fd4
 8084958:	20000930 	.word	0x20000930
 808495c:	08092fdd 	.word	0x08092fdd
 8084960:	20000b34 	.word	0x20000b34
 8084964:	08092fe6 	.word	0x08092fe6
 8084968:	08092fee 	.word	0x08092fee
 808496c:	40590000 	.word	0x40590000
 8084970:	08092ff7 	.word	0x08092ff7
 8084974:	08092ffe 	.word	0x08092ffe
 8084978:	20000b28 	.word	0x20000b28
 808497c:	08093005 	.word	0x08093005
 8084980:	0809332c 	.word	0x0809332c
 8084984:	20000b10 	.word	0x20000b10
 8084988:	20000224 	.word	0x20000224
 808498c:	20000b88 	.word	0x20000b88
 8084990:	200006f4 	.word	0x200006f4
 8084994:	0809307c 	.word	0x0809307c
 8084998:	20001210 	.word	0x20001210
 808499c:	0809300b 	.word	0x0809300b
 80849a0:	2000085c 	.word	0x2000085c
 80849a4:	200001d4 	.word	0x200001d4
 80849a8:	08093021 	.word	0x08093021
 80849ac:	0809302f 	.word	0x0809302f
 80849b0:	08093048 	.word	0x08093048
 80849b4:	20000220 	.word	0x20000220
 80849b8:	20000700 	.word	0x20000700
                    Serial.println("Cellular is disabled.");
                    writeLogFile("Cellular is disabled.");

                  }
            }else{
                status_word.status_int &= 0xFFFD;   //clear the connected bit
 80849bc:	4a07      	ldr	r2, [pc, #28]	; (80849dc <_Z13outputToCloud6StringS_+0x38c>)
 80849be:	8813      	ldrh	r3, [r2, #0]
 80849c0:	f023 0302 	bic.w	r3, r3, #2
 80849c4:	8013      	strh	r3, [r2, #0]
                if(debugging_enabled){
 80849c6:	6823      	ldr	r3, [r4, #0]
 80849c8:	2b00      	cmp	r3, #0
 80849ca:	f43f af65 	beq.w	8084898 <_Z13outputToCloud6StringS_+0x248>
                    Serial.println("Couldn't connect to particle.");
 80849ce:	f007 fdab 	bl	808c528 <_Z16_fetch_usbserialv>
 80849d2:	4903      	ldr	r1, [pc, #12]	; (80849e0 <_Z13outputToCloud6StringS_+0x390>)
 80849d4:	f006 fd01 	bl	808b3da <_ZN5Print7printlnEPKc>
                    writeLogFile("Couldn't connect to particle.");
 80849d8:	4901      	ldr	r1, [pc, #4]	; (80849e0 <_Z13outputToCloud6StringS_+0x390>)
 80849da:	e794      	b.n	8084906 <_Z13outputToCloud6StringS_+0x2b6>
 80849dc:	20000b88 	.word	0x20000b88
 80849e0:	0809305e 	.word	0x0809305e

080849e4 <_Z15outputDataToESPv>:
  }else{
    Serial.println("Unable to write to log file");
  }
}

void outputDataToESP(void){
 80849e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80849e8:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
        unsigned char bytes[2];
    }wordBytes;


    //get a current time string
    time_t time = Time.now();
 80849ec:	f007 f851 	bl	808ba92 <_ZN9TimeClass3nowEv>
    Time.setFormat(TIME_FORMAT_ISO8601_FULL);
 80849f0:	4ba9      	ldr	r3, [pc, #676]	; (8084c98 <_Z15outputDataToESPv+0x2b4>)
        unsigned char bytes[2];
    }wordBytes;


    //get a current time string
    time_t time = Time.now();
 80849f2:	4607      	mov	r7, r0
            return format(now(), format_spec);
        }

        void setFormat(const char* format)
        {
            this->format_spec = format;
 80849f4:	681a      	ldr	r2, [r3, #0]
 80849f6:	4ba9      	ldr	r3, [pc, #676]	; (8084c9c <_Z15outputDataToESPv+0x2b8>)
    }*/

    //************Fill the cloud output array and file output array for row in csv file on usd card*****************************/
    //This is different than the ble packet in that we are putting all of the data that we have in one packet
    //"$1:D555g47.7M-22.050533C550.866638r1R1q2T45.8P844.9h17.2s1842.700000&"
    String cloud_output_string = "";    //create a clean string
 80849f8:	49a9      	ldr	r1, [pc, #676]	; (8084ca0 <_Z15outputDataToESPv+0x2bc>)
 80849fa:	a802      	add	r0, sp, #8
 80849fc:	601a      	str	r2, [r3, #0]
 80849fe:	f006 fac0 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
    String csv_output_string = "";
 8084a02:	49a7      	ldr	r1, [pc, #668]	; (8084ca0 <_Z15outputDataToESPv+0x2bc>)
 8084a04:	a806      	add	r0, sp, #24
 8084a06:	f006 fabc 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
    String sensible_string = "";
 8084a0a:	49a5      	ldr	r1, [pc, #660]	; (8084ca0 <_Z15outputDataToESPv+0x2bc>)
 8084a0c:	a80a      	add	r0, sp, #40	; 0x28
 8084a0e:	f006 fab8 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
    String latitude_string = "";
 8084a12:	49a3      	ldr	r1, [pc, #652]	; (8084ca0 <_Z15outputDataToESPv+0x2bc>)
 8084a14:	a80e      	add	r0, sp, #56	; 0x38
 8084a16:	f006 fab4 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
    String longitude_string = "";
 8084a1a:	49a1      	ldr	r1, [pc, #644]	; (8084ca0 <_Z15outputDataToESPv+0x2bc>)
 8084a1c:	a812      	add	r0, sp, #72	; 0x48
 8084a1e:	f006 fab0 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
 8084a22:	215e      	movs	r1, #94	; 0x5e
 8084a24:	a802      	add	r0, sp, #8
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084a26:	ac64      	add	r4, sp, #400	; 0x190

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
 8084a28:	f006 fb9c 	bl	808b164 <_ZN6String6concatEc>

    char sensible_buf[256];
    cloud_output_string += '^';         //start delimeter
    cloud_output_string += String(1) + ";";           //header
 8084a2c:	220a      	movs	r2, #10
 8084a2e:	2101      	movs	r1, #1
 8084a30:	a827      	add	r0, sp, #156	; 0x9c
 8084a32:	f006 fb1a 	bl	808b06a <_ZN6StringC1Eih>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084a36:	a927      	add	r1, sp, #156	; 0x9c
 8084a38:	4620      	mov	r0, r4
 8084a3a:	f006 fae1 	bl	808b000 <_ZN6StringC1ERKS_>
 8084a3e:	4999      	ldr	r1, [pc, #612]	; (8084ca4 <_Z15outputDataToESPv+0x2c0>)
 8084a40:	4620      	mov	r0, r4
 8084a42:	f006 fbcd 	bl	808b1e0 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084a46:	4601      	mov	r1, r0
 8084a48:	a802      	add	r0, sp, #8
 8084a4a:	f006 fb78 	bl	808b13e <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084a4e:	4620      	mov	r0, r4
 8084a50:	f006 fa50 	bl	808aef4 <_ZN6StringD1Ev>
 8084a54:	a827      	add	r0, sp, #156	; 0x9c
 8084a56:	f006 fa4d 	bl	808aef4 <_ZN6StringD1Ev>
    cloud_output_string += String(DEVICE_ID_PACKET_CONSTANT) + String(DEVICE_id);   //device id
 8084a5a:	4e93      	ldr	r6, [pc, #588]	; (8084ca8 <_Z15outputDataToESPv+0x2c4>)
 8084a5c:	215a      	movs	r1, #90	; 0x5a
 8084a5e:	a822      	add	r0, sp, #136	; 0x88
 8084a60:	f006 faf2 	bl	808b048 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084a64:	a922      	add	r1, sp, #136	; 0x88
 8084a66:	4620      	mov	r0, r4
 8084a68:	f006 faca 	bl	808b000 <_ZN6StringC1ERKS_>
 8084a6c:	220a      	movs	r2, #10
 8084a6e:	6831      	ldr	r1, [r6, #0]
 8084a70:	a827      	add	r0, sp, #156	; 0x9c
 8084a72:	f006 fafa 	bl	808b06a <_ZN6StringC1Eih>
 8084a76:	a927      	add	r1, sp, #156	; 0x9c
 8084a78:	4620      	mov	r0, r4
 8084a7a:	f006 fba5 	bl	808b1c8 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084a7e:	4601      	mov	r1, r0
 8084a80:	a802      	add	r0, sp, #8
 8084a82:	f006 fb5c 	bl	808b13e <_ZN6String6concatERKS_>
 8084a86:	a827      	add	r0, sp, #156	; 0x9c
 8084a88:	f006 fa34 	bl	808aef4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084a8c:	4620      	mov	r0, r4
 8084a8e:	f006 fa31 	bl	808aef4 <_ZN6StringD1Ev>
 8084a92:	a822      	add	r0, sp, #136	; 0x88
 8084a94:	f006 fa2e 	bl	808aef4 <_ZN6StringD1Ev>
    csv_output_string += String(DEVICE_id) + ",";
 8084a98:	220a      	movs	r2, #10
 8084a9a:	6831      	ldr	r1, [r6, #0]
 8084a9c:	a827      	add	r0, sp, #156	; 0x9c
 8084a9e:	f006 fae4 	bl	808b06a <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084aa2:	a927      	add	r1, sp, #156	; 0x9c
 8084aa4:	4620      	mov	r0, r4
 8084aa6:	f006 faab 	bl	808b000 <_ZN6StringC1ERKS_>
 8084aaa:	4980      	ldr	r1, [pc, #512]	; (8084cac <_Z15outputDataToESPv+0x2c8>)
 8084aac:	4620      	mov	r0, r4
 8084aae:	f006 fb97 	bl	808b1e0 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084ab2:	4601      	mov	r1, r0
 8084ab4:	a806      	add	r0, sp, #24
 8084ab6:	f006 fb42 	bl	808b13e <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084aba:	4620      	mov	r0, r4
 8084abc:	f006 fa1a 	bl	808aef4 <_ZN6StringD1Ev>
 8084ac0:	a827      	add	r0, sp, #156	; 0x9c
 8084ac2:	f006 fa17 	bl	808aef4 <_ZN6StringD1Ev>

// spark::JSONBufferWriter
inline spark::JSONBufferWriter::JSONBufferWriter(char *buf, size_t size) :
        buf_(buf),
        bufSize_(size),
        n_(0) {
 8084ac6:	4b7a      	ldr	r3, [pc, #488]	; (8084cb0 <_Z15outputDataToESPv+0x2cc>)
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
 8084ac8:	2500      	movs	r5, #0

// spark::JSONBufferWriter
inline spark::JSONBufferWriter::JSONBufferWriter(char *buf, size_t size) :
        buf_(buf),
        bufSize_(size),
        n_(0) {
 8084aca:	9322      	str	r3, [sp, #136]	; 0x88




    JSONBufferWriter writer(sensible_buf, sizeof(sensible_buf) - 1);
    writer.beginObject();
 8084acc:	a822      	add	r0, sp, #136	; 0x88
 8084ace:	23ff      	movs	r3, #255	; 0xff
 8084ad0:	9325      	str	r3, [sp, #148]	; 0x94
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
 8084ad2:	f88d 508c 	strb.w	r5, [sp, #140]	; 0x8c

// spark::JSONBufferWriter
inline spark::JSONBufferWriter::JSONBufferWriter(char *buf, size_t size) :
        buf_(buf),
        bufSize_(size),
        n_(0) {
 8084ad6:	9424      	str	r4, [sp, #144]	; 0x90
 8084ad8:	9526      	str	r5, [sp, #152]	; 0x98
 8084ada:	f007 ffbb 	bl	808ca54 <_ZN5spark10JSONWriter11beginObjectEv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 8084ade:	4975      	ldr	r1, [pc, #468]	; (8084cb4 <_Z15outputDataToESPv+0x2d0>)
 8084ae0:	a827      	add	r0, sp, #156	; 0x9c
 8084ae2:	f006 fa4e 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
    String device_string = "PAM-" + String(DEVICE_id);
 8084ae6:	220a      	movs	r2, #10
 8084ae8:	6831      	ldr	r1, [r6, #0]
 8084aea:	a81e      	add	r0, sp, #120	; 0x78
 8084aec:	f006 fabd 	bl	808b06a <_ZN6StringC1Eih>
 8084af0:	a91e      	add	r1, sp, #120	; 0x78
 8084af2:	a827      	add	r0, sp, #156	; 0x9c
 8084af4:	f006 fb68 	bl	808b1c8 <_ZplRK15StringSumHelperRK6String>
 8084af8:	4601      	mov	r1, r0
 8084afa:	a816      	add	r0, sp, #88	; 0x58
 8084afc:	f006 fa80 	bl	808b000 <_ZN6StringC1ERKS_>
 8084b00:	a81e      	add	r0, sp, #120	; 0x78
 8084b02:	f006 f9f7 	bl	808aef4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084b06:	a827      	add	r0, sp, #156	; 0x9c
 8084b08:	f006 f9f4 	bl	808aef4 <_ZN6StringD1Ev>
    //String device_time = String(Time.format(time, "%Y/%m/%dT%H:%M:%SZ"));
    //String co2_string = String(CO2_float, 0);
    //String co_string = String(CO_float, 3);
    writer.name("instrumentKey").value(device_string);
 8084b0c:	496a      	ldr	r1, [pc, #424]	; (8084cb8 <_Z15outputDataToESPv+0x2d4>)
 8084b0e:	a822      	add	r0, sp, #136	; 0x88
 8084b10:	f7fc f939 	bl	8080d86 <_ZN5spark10JSONWriter4nameEPKc>
 8084b14:	a916      	add	r1, sp, #88	; 0x58
 8084b16:	f7fc f943 	bl	8080da0 <_ZN5spark10JSONWriter5valueERK6String>
    writer.name("datetime").value(String(Time.format(time, "%Y-%m-%dT%H:%M:%SZ")));
 8084b1a:	4968      	ldr	r1, [pc, #416]	; (8084cbc <_Z15outputDataToESPv+0x2d8>)
 8084b1c:	a822      	add	r0, sp, #136	; 0x88
 8084b1e:	f7fc f932 	bl	8080d86 <_ZN5spark10JSONWriter4nameEPKc>
 8084b22:	4604      	mov	r4, r0
 8084b24:	4b66      	ldr	r3, [pc, #408]	; (8084cc0 <_Z15outputDataToESPv+0x2dc>)
 8084b26:	463a      	mov	r2, r7
 8084b28:	4966      	ldr	r1, [pc, #408]	; (8084cc4 <_Z15outputDataToESPv+0x2e0>)
 8084b2a:	a827      	add	r0, sp, #156	; 0x9c
 8084b2c:	f006 ff5e 	bl	808b9ec <_ZN9TimeClass6formatElPKc>
 8084b30:	a927      	add	r1, sp, #156	; 0x9c
 8084b32:	4620      	mov	r0, r4
 8084b34:	f7fc f934 	bl	8080da0 <_ZN5spark10JSONWriter5valueERK6String>
 8084b38:	a827      	add	r0, sp, #156	; 0x9c
 8084b3a:	f006 f9db 	bl	808aef4 <_ZN6StringD1Ev>
    writer.name("CO2").value(String(CO2_float, 0));
 8084b3e:	4962      	ldr	r1, [pc, #392]	; (8084cc8 <_Z15outputDataToESPv+0x2e4>)
 8084b40:	a822      	add	r0, sp, #136	; 0x88
 8084b42:	f7fc f920 	bl	8080d86 <_ZN5spark10JSONWriter4nameEPKc>
 8084b46:	4604      	mov	r4, r0
 8084b48:	4b60      	ldr	r3, [pc, #384]	; (8084ccc <_Z15outputDataToESPv+0x2e8>)
 8084b4a:	462a      	mov	r2, r5
 8084b4c:	6819      	ldr	r1, [r3, #0]
 8084b4e:	a827      	add	r0, sp, #156	; 0x9c
 8084b50:	f006 fab1 	bl	808b0b6 <_ZN6StringC1Efi>
 8084b54:	a927      	add	r1, sp, #156	; 0x9c
 8084b56:	4620      	mov	r0, r4
 8084b58:	f7fc f922 	bl	8080da0 <_ZN5spark10JSONWriter5valueERK6String>
 8084b5c:	a827      	add	r0, sp, #156	; 0x9c
 8084b5e:	f006 f9c9 	bl	808aef4 <_ZN6StringD1Ev>
    writer.name("CO").value(String(CO_float, 3));
 8084b62:	495b      	ldr	r1, [pc, #364]	; (8084cd0 <_Z15outputDataToESPv+0x2ec>)
 8084b64:	a822      	add	r0, sp, #136	; 0x88
 8084b66:	f7fc f90e 	bl	8080d86 <_ZN5spark10JSONWriter4nameEPKc>
 8084b6a:	4604      	mov	r4, r0
 8084b6c:	4b59      	ldr	r3, [pc, #356]	; (8084cd4 <_Z15outputDataToESPv+0x2f0>)
 8084b6e:	2203      	movs	r2, #3
 8084b70:	6819      	ldr	r1, [r3, #0]
 8084b72:	a827      	add	r0, sp, #156	; 0x9c
 8084b74:	f006 fa9f 	bl	808b0b6 <_ZN6StringC1Efi>
 8084b78:	a927      	add	r1, sp, #156	; 0x9c
 8084b7a:	4620      	mov	r0, r4
 8084b7c:	f7fc f910 	bl	8080da0 <_ZN5spark10JSONWriter5valueERK6String>
 8084b80:	a827      	add	r0, sp, #156	; 0x9c
 8084b82:	f006 f9b7 	bl	808aef4 <_ZN6StringD1Ev>
    writer.name("PM1_0").value(String(PM01Value));
 8084b86:	4954      	ldr	r1, [pc, #336]	; (8084cd8 <_Z15outputDataToESPv+0x2f4>)
 8084b88:	a822      	add	r0, sp, #136	; 0x88
 8084b8a:	f7fc f8fc 	bl	8080d86 <_ZN5spark10JSONWriter4nameEPKc>
 8084b8e:	4604      	mov	r4, r0
 8084b90:	4b52      	ldr	r3, [pc, #328]	; (8084cdc <_Z15outputDataToESPv+0x2f8>)
 8084b92:	220a      	movs	r2, #10
 8084b94:	6819      	ldr	r1, [r3, #0]
 8084b96:	a827      	add	r0, sp, #156	; 0x9c
 8084b98:	f006 fa67 	bl	808b06a <_ZN6StringC1Eih>
 8084b9c:	a927      	add	r1, sp, #156	; 0x9c
 8084b9e:	4620      	mov	r0, r4
 8084ba0:	f7fc f8fe 	bl	8080da0 <_ZN5spark10JSONWriter5valueERK6String>
 8084ba4:	a827      	add	r0, sp, #156	; 0x9c
 8084ba6:	f006 f9a5 	bl	808aef4 <_ZN6StringD1Ev>
    writer.name("PM2_5").value(String(corrected_PM_25, 0)); 
 8084baa:	494d      	ldr	r1, [pc, #308]	; (8084ce0 <_Z15outputDataToESPv+0x2fc>)
 8084bac:	a822      	add	r0, sp, #136	; 0x88
 8084bae:	f7fc f8ea 	bl	8080d86 <_ZN5spark10JSONWriter4nameEPKc>
 8084bb2:	4604      	mov	r4, r0
 8084bb4:	4b4b      	ldr	r3, [pc, #300]	; (8084ce4 <_Z15outputDataToESPv+0x300>)
 8084bb6:	462a      	mov	r2, r5
 8084bb8:	6819      	ldr	r1, [r3, #0]
 8084bba:	a827      	add	r0, sp, #156	; 0x9c
 8084bbc:	f006 fa7b 	bl	808b0b6 <_ZN6StringC1Efi>
 8084bc0:	a927      	add	r1, sp, #156	; 0x9c
 8084bc2:	4620      	mov	r0, r4
 8084bc4:	f7fc f8ec 	bl	8080da0 <_ZN5spark10JSONWriter5valueERK6String>
 8084bc8:	a827      	add	r0, sp, #156	; 0x9c
 8084bca:	f006 f993 	bl	808aef4 <_ZN6StringD1Ev>
    writer.name("Temp").value(String(readTemperature(), 1));
 8084bce:	4946      	ldr	r1, [pc, #280]	; (8084ce8 <_Z15outputDataToESPv+0x304>)
 8084bd0:	a822      	add	r0, sp, #136	; 0x88
 8084bd2:	f7fc f8d8 	bl	8080d86 <_ZN5spark10JSONWriter4nameEPKc>
 8084bd6:	4604      	mov	r4, r0
 8084bd8:	f7fc fd0a 	bl	80815f0 <_Z15readTemperaturev>
 8084bdc:	2201      	movs	r2, #1
 8084bde:	4601      	mov	r1, r0
 8084be0:	a827      	add	r0, sp, #156	; 0x9c
 8084be2:	f006 fa68 	bl	808b0b6 <_ZN6StringC1Efi>
 8084be6:	a927      	add	r1, sp, #156	; 0x9c
 8084be8:	4620      	mov	r0, r4
 8084bea:	f7fc f8d9 	bl	8080da0 <_ZN5spark10JSONWriter5valueERK6String>
 8084bee:	a827      	add	r0, sp, #156	; 0x9c
 8084bf0:	f006 f980 	bl	808aef4 <_ZN6StringD1Ev>
    writer.name("Press").value(String(bme.pressure / 100.0, 1));
 8084bf4:	493d      	ldr	r1, [pc, #244]	; (8084cec <_Z15outputDataToESPv+0x308>)
 8084bf6:	a822      	add	r0, sp, #136	; 0x88
 8084bf8:	f7fc f8c5 	bl	8080d86 <_ZN5spark10JSONWriter4nameEPKc>
 8084bfc:	4b3c      	ldr	r3, [pc, #240]	; (8084cf0 <_Z15outputDataToESPv+0x30c>)
 8084bfe:	4605      	mov	r5, r0
 8084c00:	6858      	ldr	r0, [r3, #4]
 8084c02:	f008 fb6d 	bl	808d2e0 <__aeabi_f2d>
 8084c06:	2200      	movs	r2, #0
 8084c08:	4b3a      	ldr	r3, [pc, #232]	; (8084cf4 <_Z15outputDataToESPv+0x310>)
 8084c0a:	f008 fce7 	bl	808d5dc <__aeabi_ddiv>
 8084c0e:	2401      	movs	r4, #1
 8084c10:	460b      	mov	r3, r1
 8084c12:	4602      	mov	r2, r0
 8084c14:	9400      	str	r4, [sp, #0]
 8084c16:	a827      	add	r0, sp, #156	; 0x9c
 8084c18:	f006 fa64 	bl	808b0e4 <_ZN6StringC1Edi>
 8084c1c:	a927      	add	r1, sp, #156	; 0x9c
 8084c1e:	4628      	mov	r0, r5
 8084c20:	f7fc f8be 	bl	8080da0 <_ZN5spark10JSONWriter5valueERK6String>
 8084c24:	a827      	add	r0, sp, #156	; 0x9c
 8084c26:	f006 f965 	bl	808aef4 <_ZN6StringD1Ev>
    writer.name("Hmdty").value(String(readHumidity(), 1));
 8084c2a:	4933      	ldr	r1, [pc, #204]	; (8084cf8 <_Z15outputDataToESPv+0x314>)
 8084c2c:	a822      	add	r0, sp, #136	; 0x88
 8084c2e:	f7fc f8aa 	bl	8080d86 <_ZN5spark10JSONWriter4nameEPKc>
 8084c32:	4605      	mov	r5, r0
 8084c34:	f7fc fd5a 	bl	80816ec <_Z12readHumidityv>
 8084c38:	4622      	mov	r2, r4
 8084c3a:	4601      	mov	r1, r0
 8084c3c:	a827      	add	r0, sp, #156	; 0x9c
 8084c3e:	f006 fa3a 	bl	808b0b6 <_ZN6StringC1Efi>
 8084c42:	a927      	add	r1, sp, #156	; 0x9c
 8084c44:	4628      	mov	r0, r5
 8084c46:	f7fc f8ab 	bl	8080da0 <_ZN5spark10JSONWriter5valueERK6String>
 8084c4a:	a827      	add	r0, sp, #156	; 0x9c
 8084c4c:	f006 f952 	bl	808aef4 <_ZN6StringD1Ev>
    //add gps coordinates to json:
    if(gps.get_latitude() != 0){
 8084c50:	482a      	ldr	r0, [pc, #168]	; (8084cfc <_Z15outputDataToESPv+0x318>)
 8084c52:	f002 facf 	bl	80871f4 <_ZN3GPS12get_latitudeEv>
 8084c56:	2200      	movs	r2, #0
 8084c58:	2300      	movs	r3, #0
 8084c5a:	f008 fdfd 	bl	808d858 <__aeabi_dcmpeq>
 8084c5e:	2800      	cmp	r0, #0
 8084c60:	d150      	bne.n	8084d04 <_Z15outputDataToESPv+0x320>
        if(gps.get_nsIndicator() == 0){
 8084c62:	4826      	ldr	r0, [pc, #152]	; (8084cfc <_Z15outputDataToESPv+0x318>)
 8084c64:	f002 fae1 	bl	808722a <_ZN3GPS15get_nsIndicatorEv>
 8084c68:	b918      	cbnz	r0, 8084c72 <_Z15outputDataToESPv+0x28e>
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8084c6a:	4925      	ldr	r1, [pc, #148]	; (8084d00 <_Z15outputDataToESPv+0x31c>)
 8084c6c:	a80e      	add	r0, sp, #56	; 0x38
 8084c6e:	f006 fa6a 	bl	808b146 <_ZN6String6concatEPKc>
            latitude_string += "-";
        }
    
        latitude_string += String(gps.get_latitude());
 8084c72:	4822      	ldr	r0, [pc, #136]	; (8084cfc <_Z15outputDataToESPv+0x318>)
 8084c74:	f002 fabe 	bl	80871f4 <_ZN3GPS12get_latitudeEv>
 8084c78:	2306      	movs	r3, #6
 8084c7a:	4602      	mov	r2, r0
 8084c7c:	9300      	str	r3, [sp, #0]
 8084c7e:	a827      	add	r0, sp, #156	; 0x9c
 8084c80:	460b      	mov	r3, r1
 8084c82:	f006 fa2f 	bl	808b0e4 <_ZN6StringC1Edi>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084c86:	a927      	add	r1, sp, #156	; 0x9c
 8084c88:	a80e      	add	r0, sp, #56	; 0x38
 8084c8a:	f006 fa58 	bl	808b13e <_ZN6String6concatERKS_>
 8084c8e:	a827      	add	r0, sp, #156	; 0x9c
 8084c90:	f006 f930 	bl	808aef4 <_ZN6StringD1Ev>
 8084c94:	e03a      	b.n	8084d0c <_Z15outputDataToESPv+0x328>
 8084c96:	bf00      	nop
 8084c98:	200000dc 	.word	0x200000dc
 8084c9c:	20000d24 	.word	0x20000d24
 8084ca0:	08094100 	.word	0x08094100
 8084ca4:	08093082 	.word	0x08093082
 8084ca8:	20000088 	.word	0x20000088
 8084cac:	08093cd2 	.word	0x08093cd2
 8084cb0:	08094388 	.word	0x08094388
 8084cb4:	08093084 	.word	0x08093084
 8084cb8:	08093089 	.word	0x08093089
 8084cbc:	08093097 	.word	0x08093097
 8084cc0:	080930a0 	.word	0x080930a0
 8084cc4:	20000d20 	.word	0x20000d20
 8084cc8:	08093c33 	.word	0x08093c33
 8084ccc:	20000228 	.word	0x20000228
 8084cd0:	08091c13 	.word	0x08091c13
 8084cd4:	20000b1c 	.word	0x20000b1c
 8084cd8:	080930b3 	.word	0x080930b3
 8084cdc:	20000b18 	.word	0x20000b18
 8084ce0:	080930b9 	.word	0x080930b9
 8084ce4:	20000930 	.word	0x20000930
 8084ce8:	080930bf 	.word	0x080930bf
 8084cec:	080930c4 	.word	0x080930c4
 8084cf0:	20000700 	.word	0x20000700
 8084cf4:	40590000 	.word	0x40590000
 8084cf8:	080930ca 	.word	0x080930ca
 8084cfc:	200008f8 	.word	0x200008f8
 8084d00:	08093087 	.word	0x08093087
    }else{
        latitude_string = "";
 8084d04:	49b5      	ldr	r1, [pc, #724]	; (8084fdc <_Z15outputDataToESPv+0x5f8>)
 8084d06:	a80e      	add	r0, sp, #56	; 0x38
 8084d08:	f006 f98d 	bl	808b026 <_ZN6StringaSEPKc>
    }
    writer.name("Lat").value(latitude_string);
 8084d0c:	49b4      	ldr	r1, [pc, #720]	; (8084fe0 <_Z15outputDataToESPv+0x5fc>)
 8084d0e:	a822      	add	r0, sp, #136	; 0x88
 8084d10:	f7fc f839 	bl	8080d86 <_ZN5spark10JSONWriter4nameEPKc>
 8084d14:	a90e      	add	r1, sp, #56	; 0x38
 8084d16:	f7fc f843 	bl	8080da0 <_ZN5spark10JSONWriter5valueERK6String>

    if(gps.get_longitude() != 0){
 8084d1a:	48b2      	ldr	r0, [pc, #712]	; (8084fe4 <_Z15outputDataToESPv+0x600>)
 8084d1c:	f002 fa6f 	bl	80871fe <_ZN3GPS13get_longitudeEv>
 8084d20:	2200      	movs	r2, #0
 8084d22:	2300      	movs	r3, #0
 8084d24:	f008 fd98 	bl	808d858 <__aeabi_dcmpeq>
 8084d28:	b9c8      	cbnz	r0, 8084d5e <_Z15outputDataToESPv+0x37a>
        if(gps.get_ewIndicator() == 0x01){
 8084d2a:	48ae      	ldr	r0, [pc, #696]	; (8084fe4 <_Z15outputDataToESPv+0x600>)
 8084d2c:	f002 fa80 	bl	8087230 <_ZN3GPS15get_ewIndicatorEv>
 8084d30:	2801      	cmp	r0, #1
 8084d32:	d103      	bne.n	8084d3c <_Z15outputDataToESPv+0x358>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8084d34:	49ac      	ldr	r1, [pc, #688]	; (8084fe8 <_Z15outputDataToESPv+0x604>)
 8084d36:	a812      	add	r0, sp, #72	; 0x48
 8084d38:	f006 fa05 	bl	808b146 <_ZN6String6concatEPKc>
            longitude_string += "-";
            
        }
        longitude_string += String(gps.get_longitude());
 8084d3c:	48a9      	ldr	r0, [pc, #676]	; (8084fe4 <_Z15outputDataToESPv+0x600>)
 8084d3e:	f002 fa5e 	bl	80871fe <_ZN3GPS13get_longitudeEv>
 8084d42:	2306      	movs	r3, #6
 8084d44:	4602      	mov	r2, r0
 8084d46:	9300      	str	r3, [sp, #0]
 8084d48:	a827      	add	r0, sp, #156	; 0x9c
 8084d4a:	460b      	mov	r3, r1
 8084d4c:	f006 f9ca 	bl	808b0e4 <_ZN6StringC1Edi>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084d50:	a927      	add	r1, sp, #156	; 0x9c
 8084d52:	a812      	add	r0, sp, #72	; 0x48
 8084d54:	f006 f9f3 	bl	808b13e <_ZN6String6concatERKS_>
 8084d58:	a827      	add	r0, sp, #156	; 0x9c
 8084d5a:	f006 f8cb 	bl	808aef4 <_ZN6StringD1Ev>
    }  
      
    writer.name("Long").value(longitude_string);
 8084d5e:	49a3      	ldr	r1, [pc, #652]	; (8084fec <_Z15outputDataToESPv+0x608>)
 8084d60:	a822      	add	r0, sp, #136	; 0x88
 8084d62:	f7fc f810 	bl	8080d86 <_ZN5spark10JSONWriter4nameEPKc>
 8084d66:	a912      	add	r1, sp, #72	; 0x48
 8084d68:	f7fc f81a 	bl	8080da0 <_ZN5spark10JSONWriter5valueERK6String>
    
    
    writer.endObject();
 8084d6c:	a822      	add	r0, sp, #136	; 0x88
 8084d6e:	f007 fe5b 	bl	808ca28 <_ZN5spark10JSONWriter9endObjectEv>
    writer.buffer()[std::min(writer.bufferSize(), writer.dataSize())] = 0;
 8084d72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8084d74:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8084d76:	2400      	movs	r4, #0
 8084d78:	4293      	cmp	r3, r2
 8084d7a:	bf28      	it	cs
 8084d7c:	4613      	movcs	r3, r2
 8084d7e:	9a24      	ldr	r2, [sp, #144]	; 0x90

    cloud_output_string += String(CARBON_MONOXIDE_PACKET_CONSTANT) + String(CO_float, 3);
 8084d80:	4d9b      	ldr	r5, [pc, #620]	; (8084ff0 <_Z15outputDataToESPv+0x60c>)
      
    writer.name("Long").value(longitude_string);
    
    
    writer.endObject();
    writer.buffer()[std::min(writer.bufferSize(), writer.dataSize())] = 0;
 8084d82:	54d4      	strb	r4, [r2, r3]

    cloud_output_string += String(CARBON_MONOXIDE_PACKET_CONSTANT) + String(CO_float, 3);
 8084d84:	214d      	movs	r1, #77	; 0x4d
 8084d86:	a81a      	add	r0, sp, #104	; 0x68
 8084d88:	f006 f95e 	bl	808b048 <_ZN6StringC1Ec>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084d8c:	a91a      	add	r1, sp, #104	; 0x68
 8084d8e:	a827      	add	r0, sp, #156	; 0x9c
 8084d90:	f006 f936 	bl	808b000 <_ZN6StringC1ERKS_>
 8084d94:	2203      	movs	r2, #3
 8084d96:	6829      	ldr	r1, [r5, #0]
 8084d98:	a81e      	add	r0, sp, #120	; 0x78
 8084d9a:	f006 f98c 	bl	808b0b6 <_ZN6StringC1Efi>
 8084d9e:	a91e      	add	r1, sp, #120	; 0x78
 8084da0:	a827      	add	r0, sp, #156	; 0x9c
 8084da2:	f006 fa11 	bl	808b1c8 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084da6:	4601      	mov	r1, r0
 8084da8:	a802      	add	r0, sp, #8
 8084daa:	f006 f9c8 	bl	808b13e <_ZN6String6concatERKS_>
 8084dae:	a81e      	add	r0, sp, #120	; 0x78
 8084db0:	f006 f8a0 	bl	808aef4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084db4:	a827      	add	r0, sp, #156	; 0x9c
 8084db6:	f006 f89d 	bl	808aef4 <_ZN6StringD1Ev>
 8084dba:	a81a      	add	r0, sp, #104	; 0x68
 8084dbc:	f006 f89a 	bl	808aef4 <_ZN6StringD1Ev>
    csv_output_string += String(CO_float, 3) + ",";
 8084dc0:	2203      	movs	r2, #3
 8084dc2:	6829      	ldr	r1, [r5, #0]
 8084dc4:	a81e      	add	r0, sp, #120	; 0x78
 8084dc6:	f006 f976 	bl	808b0b6 <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084dca:	a91e      	add	r1, sp, #120	; 0x78
 8084dcc:	a827      	add	r0, sp, #156	; 0x9c
 8084dce:	f006 f917 	bl	808b000 <_ZN6StringC1ERKS_>
 8084dd2:	4988      	ldr	r1, [pc, #544]	; (8084ff4 <_Z15outputDataToESPv+0x610>)
 8084dd4:	a827      	add	r0, sp, #156	; 0x9c
 8084dd6:	f006 fa03 	bl	808b1e0 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084dda:	4601      	mov	r1, r0
 8084ddc:	a806      	add	r0, sp, #24
 8084dde:	f006 f9ae 	bl	808b13e <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084de2:	a827      	add	r0, sp, #156	; 0x9c
 8084de4:	f006 f886 	bl	808aef4 <_ZN6StringD1Ev>
 8084de8:	a81e      	add	r0, sp, #120	; 0x78
 8084dea:	f006 f883 	bl	808aef4 <_ZN6StringD1Ev>
    #if AFE2_en
    cloud_output_string += String(CARBON_MONOXIDE_PACKET_CONSTANT) + String(CO_float_2, 3);
    csv_output_string += String(CO_float_2, 3) + ",";
    #endif
    cloud_output_string += String(CARBON_DIOXIDE_PACKET_CONSTANT) + String(CO2_float, 0);
 8084dee:	4d82      	ldr	r5, [pc, #520]	; (8084ff8 <_Z15outputDataToESPv+0x614>)
 8084df0:	2143      	movs	r1, #67	; 0x43
 8084df2:	a81a      	add	r0, sp, #104	; 0x68
 8084df4:	f006 f928 	bl	808b048 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084df8:	a91a      	add	r1, sp, #104	; 0x68
 8084dfa:	a827      	add	r0, sp, #156	; 0x9c
 8084dfc:	f006 f900 	bl	808b000 <_ZN6StringC1ERKS_>
 8084e00:	4622      	mov	r2, r4
 8084e02:	6829      	ldr	r1, [r5, #0]
 8084e04:	a81e      	add	r0, sp, #120	; 0x78
 8084e06:	f006 f956 	bl	808b0b6 <_ZN6StringC1Efi>
 8084e0a:	a91e      	add	r1, sp, #120	; 0x78
 8084e0c:	a827      	add	r0, sp, #156	; 0x9c
 8084e0e:	f006 f9db 	bl	808b1c8 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084e12:	4601      	mov	r1, r0
 8084e14:	a802      	add	r0, sp, #8
 8084e16:	f006 f992 	bl	808b13e <_ZN6String6concatERKS_>
 8084e1a:	a81e      	add	r0, sp, #120	; 0x78
 8084e1c:	f006 f86a 	bl	808aef4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084e20:	a827      	add	r0, sp, #156	; 0x9c
 8084e22:	f006 f867 	bl	808aef4 <_ZN6StringD1Ev>
 8084e26:	a81a      	add	r0, sp, #104	; 0x68
 8084e28:	f006 f864 	bl	808aef4 <_ZN6StringD1Ev>
    csv_output_string += String(CO2_float, 0) + ",";
 8084e2c:	4622      	mov	r2, r4
 8084e2e:	6829      	ldr	r1, [r5, #0]
 8084e30:	a81e      	add	r0, sp, #120	; 0x78
 8084e32:	f006 f940 	bl	808b0b6 <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084e36:	a91e      	add	r1, sp, #120	; 0x78
 8084e38:	a827      	add	r0, sp, #156	; 0x9c
 8084e3a:	f006 f8e1 	bl	808b000 <_ZN6StringC1ERKS_>
 8084e3e:	496d      	ldr	r1, [pc, #436]	; (8084ff4 <_Z15outputDataToESPv+0x610>)
 8084e40:	a827      	add	r0, sp, #156	; 0x9c
 8084e42:	f006 f9cd 	bl	808b1e0 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084e46:	4601      	mov	r1, r0
 8084e48:	a806      	add	r0, sp, #24
 8084e4a:	f006 f978 	bl	808b13e <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084e4e:	a827      	add	r0, sp, #156	; 0x9c
 8084e50:	f006 f850 	bl	808aef4 <_ZN6StringD1Ev>
 8084e54:	a81e      	add	r0, sp, #120	; 0x78
 8084e56:	f006 f84d 	bl	808aef4 <_ZN6StringD1Ev>

    if(voc_enabled){
 8084e5a:	4b68      	ldr	r3, [pc, #416]	; (8084ffc <_Z15outputDataToESPv+0x618>)
 8084e5c:	681b      	ldr	r3, [r3, #0]
 8084e5e:	2b00      	cmp	r3, #0
 8084e60:	d035      	beq.n	8084ece <_Z15outputDataToESPv+0x4ea>
        cloud_output_string += String(VOC_PACKET_CONSTANT) + String(air_quality_score, 1);
 8084e62:	2167      	movs	r1, #103	; 0x67
 8084e64:	4c66      	ldr	r4, [pc, #408]	; (8085000 <_Z15outputDataToESPv+0x61c>)
 8084e66:	a81a      	add	r0, sp, #104	; 0x68
 8084e68:	f006 f8ee 	bl	808b048 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084e6c:	a91a      	add	r1, sp, #104	; 0x68
 8084e6e:	a827      	add	r0, sp, #156	; 0x9c
 8084e70:	f006 f8c6 	bl	808b000 <_ZN6StringC1ERKS_>
 8084e74:	2201      	movs	r2, #1
 8084e76:	6821      	ldr	r1, [r4, #0]
 8084e78:	a81e      	add	r0, sp, #120	; 0x78
 8084e7a:	f006 f91c 	bl	808b0b6 <_ZN6StringC1Efi>
 8084e7e:	a91e      	add	r1, sp, #120	; 0x78
 8084e80:	a827      	add	r0, sp, #156	; 0x9c
 8084e82:	f006 f9a1 	bl	808b1c8 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084e86:	4601      	mov	r1, r0
 8084e88:	a802      	add	r0, sp, #8
 8084e8a:	f006 f958 	bl	808b13e <_ZN6String6concatERKS_>
 8084e8e:	a81e      	add	r0, sp, #120	; 0x78
 8084e90:	f006 f830 	bl	808aef4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084e94:	a827      	add	r0, sp, #156	; 0x9c
 8084e96:	f006 f82d 	bl	808aef4 <_ZN6StringD1Ev>
 8084e9a:	a81a      	add	r0, sp, #104	; 0x68
 8084e9c:	f006 f82a 	bl	808aef4 <_ZN6StringD1Ev>
        csv_output_string += String(air_quality_score, 1) + ",";
 8084ea0:	2201      	movs	r2, #1
 8084ea2:	6821      	ldr	r1, [r4, #0]
 8084ea4:	a81e      	add	r0, sp, #120	; 0x78
 8084ea6:	f006 f906 	bl	808b0b6 <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084eaa:	a91e      	add	r1, sp, #120	; 0x78
 8084eac:	a827      	add	r0, sp, #156	; 0x9c
 8084eae:	f006 f8a7 	bl	808b000 <_ZN6StringC1ERKS_>
 8084eb2:	4950      	ldr	r1, [pc, #320]	; (8084ff4 <_Z15outputDataToESPv+0x610>)
 8084eb4:	a827      	add	r0, sp, #156	; 0x9c
 8084eb6:	f006 f993 	bl	808b1e0 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084eba:	4601      	mov	r1, r0
 8084ebc:	a806      	add	r0, sp, #24
 8084ebe:	f006 f93e 	bl	808b13e <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084ec2:	a827      	add	r0, sp, #156	; 0x9c
 8084ec4:	f006 f816 	bl	808aef4 <_ZN6StringD1Ev>
 8084ec8:	a81e      	add	r0, sp, #120	; 0x78
 8084eca:	f006 f813 	bl	808aef4 <_ZN6StringD1Ev>
    }
    cloud_output_string += String(PM1_PACKET_CONSTANT) + String(PM01Value);
 8084ece:	4c4d      	ldr	r4, [pc, #308]	; (8085004 <_Z15outputDataToESPv+0x620>)
 8084ed0:	2172      	movs	r1, #114	; 0x72
 8084ed2:	a81a      	add	r0, sp, #104	; 0x68
 8084ed4:	f006 f8b8 	bl	808b048 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084ed8:	a91a      	add	r1, sp, #104	; 0x68
 8084eda:	a827      	add	r0, sp, #156	; 0x9c
 8084edc:	f006 f890 	bl	808b000 <_ZN6StringC1ERKS_>
 8084ee0:	220a      	movs	r2, #10
 8084ee2:	6821      	ldr	r1, [r4, #0]
 8084ee4:	a81e      	add	r0, sp, #120	; 0x78
 8084ee6:	f006 f8c0 	bl	808b06a <_ZN6StringC1Eih>
 8084eea:	a91e      	add	r1, sp, #120	; 0x78
 8084eec:	a827      	add	r0, sp, #156	; 0x9c
 8084eee:	f006 f96b 	bl	808b1c8 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084ef2:	4601      	mov	r1, r0
 8084ef4:	a802      	add	r0, sp, #8
 8084ef6:	f006 f922 	bl	808b13e <_ZN6String6concatERKS_>
 8084efa:	a81e      	add	r0, sp, #120	; 0x78
 8084efc:	f005 fffa 	bl	808aef4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084f00:	a827      	add	r0, sp, #156	; 0x9c
 8084f02:	f005 fff7 	bl	808aef4 <_ZN6StringD1Ev>
 8084f06:	a81a      	add	r0, sp, #104	; 0x68
 8084f08:	f005 fff4 	bl	808aef4 <_ZN6StringD1Ev>
    csv_output_string += String(PM01Value) + ",";
 8084f0c:	220a      	movs	r2, #10
 8084f0e:	6821      	ldr	r1, [r4, #0]
 8084f10:	a81e      	add	r0, sp, #120	; 0x78
 8084f12:	f006 f8aa 	bl	808b06a <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084f16:	a91e      	add	r1, sp, #120	; 0x78
 8084f18:	a827      	add	r0, sp, #156	; 0x9c
 8084f1a:	f006 f871 	bl	808b000 <_ZN6StringC1ERKS_>
 8084f1e:	4935      	ldr	r1, [pc, #212]	; (8084ff4 <_Z15outputDataToESPv+0x610>)
 8084f20:	a827      	add	r0, sp, #156	; 0x9c
 8084f22:	f006 f95d 	bl	808b1e0 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084f26:	4601      	mov	r1, r0
 8084f28:	a806      	add	r0, sp, #24
 8084f2a:	f006 f908 	bl	808b13e <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084f2e:	a827      	add	r0, sp, #156	; 0x9c
 8084f30:	f005 ffe0 	bl	808aef4 <_ZN6StringD1Ev>
 8084f34:	a81e      	add	r0, sp, #120	; 0x78
 8084f36:	f005 ffdd 	bl	808aef4 <_ZN6StringD1Ev>
    cloud_output_string += String(PM2PT5_PACKET_CONSTANT) + String(corrected_PM_25, 0);
 8084f3a:	4c33      	ldr	r4, [pc, #204]	; (8085008 <_Z15outputDataToESPv+0x624>)
 8084f3c:	2152      	movs	r1, #82	; 0x52
 8084f3e:	a81a      	add	r0, sp, #104	; 0x68
 8084f40:	f006 f882 	bl	808b048 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084f44:	a91a      	add	r1, sp, #104	; 0x68
 8084f46:	a827      	add	r0, sp, #156	; 0x9c
 8084f48:	f006 f85a 	bl	808b000 <_ZN6StringC1ERKS_>
 8084f4c:	2200      	movs	r2, #0
 8084f4e:	6821      	ldr	r1, [r4, #0]
 8084f50:	a81e      	add	r0, sp, #120	; 0x78
 8084f52:	f006 f8b0 	bl	808b0b6 <_ZN6StringC1Efi>
 8084f56:	a91e      	add	r1, sp, #120	; 0x78
 8084f58:	a827      	add	r0, sp, #156	; 0x9c
 8084f5a:	f006 f935 	bl	808b1c8 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084f5e:	4601      	mov	r1, r0
 8084f60:	a802      	add	r0, sp, #8
 8084f62:	f006 f8ec 	bl	808b13e <_ZN6String6concatERKS_>
 8084f66:	a81e      	add	r0, sp, #120	; 0x78
 8084f68:	f005 ffc4 	bl	808aef4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084f6c:	a827      	add	r0, sp, #156	; 0x9c
 8084f6e:	f005 ffc1 	bl	808aef4 <_ZN6StringD1Ev>
 8084f72:	a81a      	add	r0, sp, #104	; 0x68
 8084f74:	f005 ffbe 	bl	808aef4 <_ZN6StringD1Ev>
    csv_output_string += String(corrected_PM_25, 0) + ",";
 8084f78:	2200      	movs	r2, #0
 8084f7a:	6821      	ldr	r1, [r4, #0]
 8084f7c:	a81e      	add	r0, sp, #120	; 0x78
 8084f7e:	f006 f89a 	bl	808b0b6 <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084f82:	a91e      	add	r1, sp, #120	; 0x78
 8084f84:	a827      	add	r0, sp, #156	; 0x9c
 8084f86:	f006 f83b 	bl	808b000 <_ZN6StringC1ERKS_>
 8084f8a:	491a      	ldr	r1, [pc, #104]	; (8084ff4 <_Z15outputDataToESPv+0x610>)
 8084f8c:	a827      	add	r0, sp, #156	; 0x9c
 8084f8e:	f006 f927 	bl	808b1e0 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084f92:	4601      	mov	r1, r0
 8084f94:	a806      	add	r0, sp, #24
 8084f96:	f006 f8d2 	bl	808b13e <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084f9a:	a827      	add	r0, sp, #156	; 0x9c
 8084f9c:	f005 ffaa 	bl	808aef4 <_ZN6StringD1Ev>
 8084fa0:	a81e      	add	r0, sp, #120	; 0x78
 8084fa2:	f005 ffa7 	bl	808aef4 <_ZN6StringD1Ev>
    cloud_output_string += String(PM10_PACKET_CONSTANT) + String(PM10Value);
 8084fa6:	4c19      	ldr	r4, [pc, #100]	; (808500c <_Z15outputDataToESPv+0x628>)
 8084fa8:	2171      	movs	r1, #113	; 0x71
 8084faa:	a81a      	add	r0, sp, #104	; 0x68
 8084fac:	f006 f84c 	bl	808b048 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084fb0:	a91a      	add	r1, sp, #104	; 0x68
 8084fb2:	a827      	add	r0, sp, #156	; 0x9c
 8084fb4:	f006 f824 	bl	808b000 <_ZN6StringC1ERKS_>
 8084fb8:	220a      	movs	r2, #10
 8084fba:	6821      	ldr	r1, [r4, #0]
 8084fbc:	a81e      	add	r0, sp, #120	; 0x78
 8084fbe:	f006 f854 	bl	808b06a <_ZN6StringC1Eih>
 8084fc2:	a91e      	add	r1, sp, #120	; 0x78
 8084fc4:	a827      	add	r0, sp, #156	; 0x9c
 8084fc6:	f006 f8ff 	bl	808b1c8 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084fca:	4601      	mov	r1, r0
 8084fcc:	a802      	add	r0, sp, #8
 8084fce:	f006 f8b6 	bl	808b13e <_ZN6String6concatERKS_>
 8084fd2:	a81e      	add	r0, sp, #120	; 0x78
 8084fd4:	f005 ff8e 	bl	808aef4 <_ZN6StringD1Ev>
 8084fd8:	e01a      	b.n	8085010 <_Z15outputDataToESPv+0x62c>
 8084fda:	bf00      	nop
 8084fdc:	08094100 	.word	0x08094100
 8084fe0:	080930d0 	.word	0x080930d0
 8084fe4:	200008f8 	.word	0x200008f8
 8084fe8:	08093087 	.word	0x08093087
 8084fec:	080930d4 	.word	0x080930d4
 8084ff0:	20000b1c 	.word	0x20000b1c
 8084ff4:	08093cd2 	.word	0x08093cd2
 8084ff8:	20000228 	.word	0x20000228
 8084ffc:	20000b9c 	.word	0x20000b9c
 8085000:	20000b20 	.word	0x20000b20
 8085004:	20000b18 	.word	0x20000b18
 8085008:	20000930 	.word	0x20000930
 808500c:	20000b34 	.word	0x20000b34

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8085010:	a827      	add	r0, sp, #156	; 0x9c
 8085012:	f005 ff6f 	bl	808aef4 <_ZN6StringD1Ev>
 8085016:	a81a      	add	r0, sp, #104	; 0x68
 8085018:	f005 ff6c 	bl	808aef4 <_ZN6StringD1Ev>
    csv_output_string += String(PM10Value) + ",";
 808501c:	220a      	movs	r2, #10
 808501e:	6821      	ldr	r1, [r4, #0]
 8085020:	a81e      	add	r0, sp, #120	; 0x78
 8085022:	f006 f822 	bl	808b06a <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8085026:	a91e      	add	r1, sp, #120	; 0x78
 8085028:	a827      	add	r0, sp, #156	; 0x9c
 808502a:	f005 ffe9 	bl	808b000 <_ZN6StringC1ERKS_>
 808502e:	49b8      	ldr	r1, [pc, #736]	; (8085310 <_Z15outputDataToESPv+0x92c>)
 8085030:	a827      	add	r0, sp, #156	; 0x9c
 8085032:	f006 f8d5 	bl	808b1e0 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8085036:	4601      	mov	r1, r0
 8085038:	a806      	add	r0, sp, #24
 808503a:	f006 f880 	bl	808b13e <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808503e:	a827      	add	r0, sp, #156	; 0x9c
 8085040:	f005 ff58 	bl	808aef4 <_ZN6StringD1Ev>
 8085044:	a81e      	add	r0, sp, #120	; 0x78
 8085046:	f005 ff55 	bl	808aef4 <_ZN6StringD1Ev>
    cloud_output_string += String(TEMPERATURE_PACKET_CONSTANT) + String(readTemperature(), 1);
 808504a:	2174      	movs	r1, #116	; 0x74
 808504c:	a81a      	add	r0, sp, #104	; 0x68
 808504e:	f005 fffb 	bl	808b048 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8085052:	a91a      	add	r1, sp, #104	; 0x68
 8085054:	a827      	add	r0, sp, #156	; 0x9c
 8085056:	f005 ffd3 	bl	808b000 <_ZN6StringC1ERKS_>
 808505a:	f7fc fac9 	bl	80815f0 <_Z15readTemperaturev>
 808505e:	2201      	movs	r2, #1
 8085060:	4601      	mov	r1, r0
 8085062:	a81e      	add	r0, sp, #120	; 0x78
 8085064:	f006 f827 	bl	808b0b6 <_ZN6StringC1Efi>
 8085068:	a91e      	add	r1, sp, #120	; 0x78
 808506a:	a827      	add	r0, sp, #156	; 0x9c
 808506c:	f006 f8ac 	bl	808b1c8 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8085070:	4601      	mov	r1, r0
 8085072:	a802      	add	r0, sp, #8
 8085074:	f006 f863 	bl	808b13e <_ZN6String6concatERKS_>
 8085078:	a81e      	add	r0, sp, #120	; 0x78
 808507a:	f005 ff3b 	bl	808aef4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808507e:	a827      	add	r0, sp, #156	; 0x9c
 8085080:	f005 ff38 	bl	808aef4 <_ZN6StringD1Ev>
 8085084:	a81a      	add	r0, sp, #104	; 0x68
 8085086:	f005 ff35 	bl	808aef4 <_ZN6StringD1Ev>
    csv_output_string += String(readTemperature(), 1) + ",";
 808508a:	f7fc fab1 	bl	80815f0 <_Z15readTemperaturev>
 808508e:	2201      	movs	r2, #1
 8085090:	4601      	mov	r1, r0
 8085092:	a81e      	add	r0, sp, #120	; 0x78
 8085094:	f006 f80f 	bl	808b0b6 <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8085098:	a91e      	add	r1, sp, #120	; 0x78
 808509a:	a827      	add	r0, sp, #156	; 0x9c
 808509c:	f005 ffb0 	bl	808b000 <_ZN6StringC1ERKS_>
 80850a0:	499b      	ldr	r1, [pc, #620]	; (8085310 <_Z15outputDataToESPv+0x92c>)
 80850a2:	a827      	add	r0, sp, #156	; 0x9c
 80850a4:	f006 f89c 	bl	808b1e0 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80850a8:	4601      	mov	r1, r0
 80850aa:	a806      	add	r0, sp, #24
 80850ac:	f006 f847 	bl	808b13e <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80850b0:	a827      	add	r0, sp, #156	; 0x9c
 80850b2:	f005 ff1f 	bl	808aef4 <_ZN6StringD1Ev>
 80850b6:	a81e      	add	r0, sp, #120	; 0x78
 80850b8:	f005 ff1c 	bl	808aef4 <_ZN6StringD1Ev>
    cloud_output_string += String(PRESSURE_PACKET_CONSTANT) + String(bme.pressure / 100.0, 1);
 80850bc:	4d95      	ldr	r5, [pc, #596]	; (8085314 <_Z15outputDataToESPv+0x930>)
 80850be:	2150      	movs	r1, #80	; 0x50
 80850c0:	a81a      	add	r0, sp, #104	; 0x68
 80850c2:	f005 ffc1 	bl	808b048 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80850c6:	a91a      	add	r1, sp, #104	; 0x68
 80850c8:	a827      	add	r0, sp, #156	; 0x9c
 80850ca:	f005 ff99 	bl	808b000 <_ZN6StringC1ERKS_>
 80850ce:	6868      	ldr	r0, [r5, #4]
 80850d0:	f008 f906 	bl	808d2e0 <__aeabi_f2d>
 80850d4:	2200      	movs	r2, #0
 80850d6:	4b90      	ldr	r3, [pc, #576]	; (8085318 <_Z15outputDataToESPv+0x934>)
 80850d8:	f008 fa80 	bl	808d5dc <__aeabi_ddiv>
 80850dc:	2401      	movs	r4, #1
 80850de:	4602      	mov	r2, r0
 80850e0:	460b      	mov	r3, r1
 80850e2:	9400      	str	r4, [sp, #0]
 80850e4:	a81e      	add	r0, sp, #120	; 0x78
 80850e6:	f005 fffd 	bl	808b0e4 <_ZN6StringC1Edi>
 80850ea:	a91e      	add	r1, sp, #120	; 0x78
 80850ec:	a827      	add	r0, sp, #156	; 0x9c
 80850ee:	f006 f86b 	bl	808b1c8 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80850f2:	4601      	mov	r1, r0
 80850f4:	a802      	add	r0, sp, #8
 80850f6:	f006 f822 	bl	808b13e <_ZN6String6concatERKS_>
 80850fa:	a81e      	add	r0, sp, #120	; 0x78
 80850fc:	f005 fefa 	bl	808aef4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8085100:	a827      	add	r0, sp, #156	; 0x9c
 8085102:	f005 fef7 	bl	808aef4 <_ZN6StringD1Ev>
 8085106:	a81a      	add	r0, sp, #104	; 0x68
 8085108:	f005 fef4 	bl	808aef4 <_ZN6StringD1Ev>
    csv_output_string += String(bme.pressure / 100.0, 1) + ",";
 808510c:	6868      	ldr	r0, [r5, #4]
 808510e:	f008 f8e7 	bl	808d2e0 <__aeabi_f2d>
 8085112:	2200      	movs	r2, #0
 8085114:	4b80      	ldr	r3, [pc, #512]	; (8085318 <_Z15outputDataToESPv+0x934>)
 8085116:	f008 fa61 	bl	808d5dc <__aeabi_ddiv>
 808511a:	9400      	str	r4, [sp, #0]
 808511c:	460b      	mov	r3, r1
 808511e:	4602      	mov	r2, r0
 8085120:	a81e      	add	r0, sp, #120	; 0x78
 8085122:	f005 ffdf 	bl	808b0e4 <_ZN6StringC1Edi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8085126:	a91e      	add	r1, sp, #120	; 0x78
 8085128:	a827      	add	r0, sp, #156	; 0x9c
 808512a:	f005 ff69 	bl	808b000 <_ZN6StringC1ERKS_>
 808512e:	4978      	ldr	r1, [pc, #480]	; (8085310 <_Z15outputDataToESPv+0x92c>)
 8085130:	a827      	add	r0, sp, #156	; 0x9c
 8085132:	f006 f855 	bl	808b1e0 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8085136:	4601      	mov	r1, r0
 8085138:	a806      	add	r0, sp, #24
 808513a:	f006 f800 	bl	808b13e <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808513e:	a827      	add	r0, sp, #156	; 0x9c
 8085140:	f005 fed8 	bl	808aef4 <_ZN6StringD1Ev>
 8085144:	a81e      	add	r0, sp, #120	; 0x78
 8085146:	f005 fed5 	bl	808aef4 <_ZN6StringD1Ev>
    cloud_output_string += String(HUMIDITY_PACKET_CONSTANT) + String(readHumidity(), 1);
 808514a:	2168      	movs	r1, #104	; 0x68
 808514c:	eb0d 0001 	add.w	r0, sp, r1
 8085150:	f005 ff7a 	bl	808b048 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8085154:	a91a      	add	r1, sp, #104	; 0x68
 8085156:	a827      	add	r0, sp, #156	; 0x9c
 8085158:	f005 ff52 	bl	808b000 <_ZN6StringC1ERKS_>
 808515c:	f7fc fac6 	bl	80816ec <_Z12readHumidityv>
 8085160:	4622      	mov	r2, r4
 8085162:	4601      	mov	r1, r0
 8085164:	a81e      	add	r0, sp, #120	; 0x78
 8085166:	f005 ffa6 	bl	808b0b6 <_ZN6StringC1Efi>
 808516a:	a91e      	add	r1, sp, #120	; 0x78
 808516c:	a827      	add	r0, sp, #156	; 0x9c
 808516e:	f006 f82b 	bl	808b1c8 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8085172:	4601      	mov	r1, r0
 8085174:	a802      	add	r0, sp, #8
 8085176:	f005 ffe2 	bl	808b13e <_ZN6String6concatERKS_>
 808517a:	a81e      	add	r0, sp, #120	; 0x78
 808517c:	f005 feba 	bl	808aef4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8085180:	a827      	add	r0, sp, #156	; 0x9c
 8085182:	f005 feb7 	bl	808aef4 <_ZN6StringD1Ev>
 8085186:	a81a      	add	r0, sp, #104	; 0x68
 8085188:	f005 feb4 	bl	808aef4 <_ZN6StringD1Ev>
    csv_output_string += String(readHumidity(), 1) + ",";
 808518c:	f7fc faae 	bl	80816ec <_Z12readHumidityv>
 8085190:	4622      	mov	r2, r4
 8085192:	4601      	mov	r1, r0
 8085194:	a81e      	add	r0, sp, #120	; 0x78
 8085196:	f005 ff8e 	bl	808b0b6 <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 808519a:	a91e      	add	r1, sp, #120	; 0x78
 808519c:	a827      	add	r0, sp, #156	; 0x9c
 808519e:	f005 ff2f 	bl	808b000 <_ZN6StringC1ERKS_>
 80851a2:	495b      	ldr	r1, [pc, #364]	; (8085310 <_Z15outputDataToESPv+0x92c>)
 80851a4:	a827      	add	r0, sp, #156	; 0x9c
 80851a6:	f006 f81b 	bl	808b1e0 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80851aa:	4601      	mov	r1, r0
 80851ac:	a806      	add	r0, sp, #24
 80851ae:	f005 ffc6 	bl	808b13e <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80851b2:	a827      	add	r0, sp, #156	; 0x9c
 80851b4:	f005 fe9e 	bl	808aef4 <_ZN6StringD1Ev>
 80851b8:	a81e      	add	r0, sp, #120	; 0x78
 80851ba:	f005 fe9b 	bl	808aef4 <_ZN6StringD1Ev>
    if(ozone_enabled){
 80851be:	4b57      	ldr	r3, [pc, #348]	; (808531c <_Z15outputDataToESPv+0x938>)
 80851c0:	681b      	ldr	r3, [r3, #0]
 80851c2:	2b00      	cmp	r3, #0
 80851c4:	d035      	beq.n	8085232 <_Z15outputDataToESPv+0x84e>
        cloud_output_string += String(OZONE_PACKET_CONSTANT) + String(O3_float, 1);
 80851c6:	214f      	movs	r1, #79	; 0x4f
 80851c8:	4d55      	ldr	r5, [pc, #340]	; (8085320 <_Z15outputDataToESPv+0x93c>)
 80851ca:	a81a      	add	r0, sp, #104	; 0x68
 80851cc:	f005 ff3c 	bl	808b048 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80851d0:	a91a      	add	r1, sp, #104	; 0x68
 80851d2:	a827      	add	r0, sp, #156	; 0x9c
 80851d4:	f005 ff14 	bl	808b000 <_ZN6StringC1ERKS_>
 80851d8:	4622      	mov	r2, r4
 80851da:	6829      	ldr	r1, [r5, #0]
 80851dc:	a81e      	add	r0, sp, #120	; 0x78
 80851de:	f005 ff6a 	bl	808b0b6 <_ZN6StringC1Efi>
 80851e2:	a91e      	add	r1, sp, #120	; 0x78
 80851e4:	a827      	add	r0, sp, #156	; 0x9c
 80851e6:	f005 ffef 	bl	808b1c8 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80851ea:	4601      	mov	r1, r0
 80851ec:	a802      	add	r0, sp, #8
 80851ee:	f005 ffa6 	bl	808b13e <_ZN6String6concatERKS_>
 80851f2:	a81e      	add	r0, sp, #120	; 0x78
 80851f4:	f005 fe7e 	bl	808aef4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80851f8:	a827      	add	r0, sp, #156	; 0x9c
 80851fa:	f005 fe7b 	bl	808aef4 <_ZN6StringD1Ev>
 80851fe:	a81a      	add	r0, sp, #104	; 0x68
 8085200:	f005 fe78 	bl	808aef4 <_ZN6StringD1Ev>
        csv_output_string += String(O3_float, 1) + ",";
 8085204:	4622      	mov	r2, r4
 8085206:	6829      	ldr	r1, [r5, #0]
 8085208:	a81e      	add	r0, sp, #120	; 0x78
 808520a:	f005 ff54 	bl	808b0b6 <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 808520e:	a91e      	add	r1, sp, #120	; 0x78
 8085210:	a827      	add	r0, sp, #156	; 0x9c
 8085212:	f005 fef5 	bl	808b000 <_ZN6StringC1ERKS_>
 8085216:	493e      	ldr	r1, [pc, #248]	; (8085310 <_Z15outputDataToESPv+0x92c>)
 8085218:	a827      	add	r0, sp, #156	; 0x9c
 808521a:	f005 ffe1 	bl	808b1e0 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808521e:	4601      	mov	r1, r0
 8085220:	a806      	add	r0, sp, #24
 8085222:	f005 ff8c 	bl	808b13e <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8085226:	a827      	add	r0, sp, #156	; 0x9c
 8085228:	f005 fe64 	bl	808aef4 <_ZN6StringD1Ev>
 808522c:	a81e      	add	r0, sp, #120	; 0x78
 808522e:	f005 fe61 	bl	808aef4 <_ZN6StringD1Ev>
    }
    cloud_output_string += String(BATTERY_PACKET_CONSTANT) + String(fuel.getSoC(), 1);
 8085232:	2178      	movs	r1, #120	; 0x78
 8085234:	a81a      	add	r0, sp, #104	; 0x68
 8085236:	f005 ff07 	bl	808b048 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 808523a:	a91a      	add	r1, sp, #104	; 0x68
 808523c:	a827      	add	r0, sp, #156	; 0x9c
 808523e:	f005 fedf 	bl	808b000 <_ZN6StringC1ERKS_>
 8085242:	4838      	ldr	r0, [pc, #224]	; (8085324 <_Z15outputDataToESPv+0x940>)
 8085244:	f006 fce6 	bl	808bc14 <_ZN9FuelGauge6getSoCEv>
 8085248:	2201      	movs	r2, #1
 808524a:	4601      	mov	r1, r0
 808524c:	a81e      	add	r0, sp, #120	; 0x78
 808524e:	f005 ff32 	bl	808b0b6 <_ZN6StringC1Efi>
 8085252:	a91e      	add	r1, sp, #120	; 0x78
 8085254:	a827      	add	r0, sp, #156	; 0x9c
 8085256:	f005 ffb7 	bl	808b1c8 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808525a:	4601      	mov	r1, r0
 808525c:	a802      	add	r0, sp, #8
 808525e:	f005 ff6e 	bl	808b13e <_ZN6String6concatERKS_>
 8085262:	a81e      	add	r0, sp, #120	; 0x78
 8085264:	f005 fe46 	bl	808aef4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8085268:	a827      	add	r0, sp, #156	; 0x9c
 808526a:	f005 fe43 	bl	808aef4 <_ZN6StringD1Ev>
 808526e:	a81a      	add	r0, sp, #104	; 0x68
 8085270:	f005 fe40 	bl	808aef4 <_ZN6StringD1Ev>
    csv_output_string += String(fuel.getSoC(), 1) + ",";
 8085274:	482b      	ldr	r0, [pc, #172]	; (8085324 <_Z15outputDataToESPv+0x940>)
 8085276:	f006 fccd 	bl	808bc14 <_ZN9FuelGauge6getSoCEv>
 808527a:	2201      	movs	r2, #1
 808527c:	4601      	mov	r1, r0
 808527e:	a81e      	add	r0, sp, #120	; 0x78
 8085280:	f005 ff19 	bl	808b0b6 <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8085284:	a91e      	add	r1, sp, #120	; 0x78
 8085286:	a827      	add	r0, sp, #156	; 0x9c
 8085288:	f005 feba 	bl	808b000 <_ZN6StringC1ERKS_>
 808528c:	4920      	ldr	r1, [pc, #128]	; (8085310 <_Z15outputDataToESPv+0x92c>)
 808528e:	a827      	add	r0, sp, #156	; 0x9c
 8085290:	f005 ffa6 	bl	808b1e0 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8085294:	4601      	mov	r1, r0
 8085296:	a806      	add	r0, sp, #24
 8085298:	f005 ff51 	bl	808b13e <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808529c:	a827      	add	r0, sp, #156	; 0x9c
 808529e:	f005 fe29 	bl	808aef4 <_ZN6StringD1Ev>
 80852a2:	a81e      	add	r0, sp, #120	; 0x78
 80852a4:	f005 fe26 	bl	808aef4 <_ZN6StringD1Ev>
    cloud_output_string += String(SOUND_PACKET_CONSTANT) + String(sound_average, 0);
 80852a8:	2173      	movs	r1, #115	; 0x73
 80852aa:	a81a      	add	r0, sp, #104	; 0x68
 80852ac:	f005 fecc 	bl	808b048 <_ZN6StringC1Ec>
 80852b0:	4c1d      	ldr	r4, [pc, #116]	; (8085328 <_Z15outputDataToESPv+0x944>)
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80852b2:	a91a      	add	r1, sp, #104	; 0x68
 80852b4:	2500      	movs	r5, #0
 80852b6:	a827      	add	r0, sp, #156	; 0x9c
 80852b8:	f005 fea2 	bl	808b000 <_ZN6StringC1ERKS_>
 80852bc:	9500      	str	r5, [sp, #0]
 80852be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80852c2:	a81e      	add	r0, sp, #120	; 0x78
 80852c4:	f005 ff0e 	bl	808b0e4 <_ZN6StringC1Edi>
 80852c8:	a91e      	add	r1, sp, #120	; 0x78
 80852ca:	a827      	add	r0, sp, #156	; 0x9c
 80852cc:	f005 ff7c 	bl	808b1c8 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80852d0:	4601      	mov	r1, r0
 80852d2:	a802      	add	r0, sp, #8
 80852d4:	f005 ff33 	bl	808b13e <_ZN6String6concatERKS_>
 80852d8:	a81e      	add	r0, sp, #120	; 0x78
 80852da:	f005 fe0b 	bl	808aef4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80852de:	a827      	add	r0, sp, #156	; 0x9c
 80852e0:	f005 fe08 	bl	808aef4 <_ZN6StringD1Ev>
 80852e4:	a81a      	add	r0, sp, #104	; 0x68
 80852e6:	f005 fe05 	bl	808aef4 <_ZN6StringD1Ev>

    csv_output_string += String(sound_average, 0) + ",";
 80852ea:	9500      	str	r5, [sp, #0]
 80852ec:	e9d4 2300 	ldrd	r2, r3, [r4]
 80852f0:	a81e      	add	r0, sp, #120	; 0x78
 80852f2:	f005 fef7 	bl	808b0e4 <_ZN6StringC1Edi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80852f6:	a91e      	add	r1, sp, #120	; 0x78
 80852f8:	a827      	add	r0, sp, #156	; 0x9c
 80852fa:	f005 fe81 	bl	808b000 <_ZN6StringC1ERKS_>
 80852fe:	4904      	ldr	r1, [pc, #16]	; (8085310 <_Z15outputDataToESPv+0x92c>)
 8085300:	a827      	add	r0, sp, #156	; 0x9c
 8085302:	f005 ff6d 	bl	808b1e0 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8085306:	4601      	mov	r1, r0
 8085308:	a806      	add	r0, sp, #24
 808530a:	f005 ff18 	bl	808b13e <_ZN6String6concatERKS_>
 808530e:	e00d      	b.n	808532c <_Z15outputDataToESPv+0x948>
 8085310:	08093cd2 	.word	0x08093cd2
 8085314:	20000700 	.word	0x20000700
 8085318:	40590000 	.word	0x40590000
 808531c:	20000a4c 	.word	0x20000a4c
 8085320:	200007fc 	.word	0x200007fc
 8085324:	20000848 	.word	0x20000848
 8085328:	20000b28 	.word	0x20000b28

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808532c:	a827      	add	r0, sp, #156	; 0x9c
 808532e:	f005 fde1 	bl	808aef4 <_ZN6StringD1Ev>
 8085332:	a81e      	add	r0, sp, #120	; 0x78
 8085334:	f005 fdde 	bl	808aef4 <_ZN6StringD1Ev>
    cloud_output_string += String(LATITUDE_PACKET_CONSTANT);
 8085338:	2161      	movs	r1, #97	; 0x61
 808533a:	a827      	add	r0, sp, #156	; 0x9c
 808533c:	f005 fe84 	bl	808b048 <_ZN6StringC1Ec>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8085340:	a927      	add	r1, sp, #156	; 0x9c
 8085342:	a802      	add	r0, sp, #8
 8085344:	f005 fefb 	bl	808b13e <_ZN6String6concatERKS_>
 8085348:	a827      	add	r0, sp, #156	; 0x9c
 808534a:	f005 fdd3 	bl	808aef4 <_ZN6StringD1Ev>

    if(gps.get_latitude() != 0){
 808534e:	4885      	ldr	r0, [pc, #532]	; (8085564 <_Z15outputDataToESPv+0xb80>)
 8085350:	f001 ff50 	bl	80871f4 <_ZN3GPS12get_latitudeEv>
 8085354:	2200      	movs	r2, #0
 8085356:	2300      	movs	r3, #0
 8085358:	f008 fa7e 	bl	808d858 <__aeabi_dcmpeq>
 808535c:	2800      	cmp	r0, #0
 808535e:	d131      	bne.n	80853c4 <_Z15outputDataToESPv+0x9e0>
        if(gps.get_nsIndicator() == 0){
 8085360:	4880      	ldr	r0, [pc, #512]	; (8085564 <_Z15outputDataToESPv+0xb80>)
 8085362:	f001 ff62 	bl	808722a <_ZN3GPS15get_nsIndicatorEv>
 8085366:	b938      	cbnz	r0, 8085378 <_Z15outputDataToESPv+0x994>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8085368:	497f      	ldr	r1, [pc, #508]	; (8085568 <_Z15outputDataToESPv+0xb84>)
 808536a:	a806      	add	r0, sp, #24
 808536c:	f005 feeb 	bl	808b146 <_ZN6String6concatEPKc>
 8085370:	497d      	ldr	r1, [pc, #500]	; (8085568 <_Z15outputDataToESPv+0xb84>)
 8085372:	a802      	add	r0, sp, #8
 8085374:	f005 fee7 	bl	808b146 <_ZN6String6concatEPKc>
            csv_output_string += "-";
            cloud_output_string += "-";
        }
        csv_output_string += String(gps.get_latitude()) + ",";
 8085378:	487a      	ldr	r0, [pc, #488]	; (8085564 <_Z15outputDataToESPv+0xb80>)
 808537a:	f001 ff3b 	bl	80871f4 <_ZN3GPS12get_latitudeEv>
 808537e:	2406      	movs	r4, #6
 8085380:	4602      	mov	r2, r0
 8085382:	460b      	mov	r3, r1
 8085384:	9400      	str	r4, [sp, #0]
 8085386:	a81e      	add	r0, sp, #120	; 0x78
 8085388:	f005 feac 	bl	808b0e4 <_ZN6StringC1Edi>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 808538c:	a91e      	add	r1, sp, #120	; 0x78
 808538e:	a827      	add	r0, sp, #156	; 0x9c
 8085390:	f005 fe36 	bl	808b000 <_ZN6StringC1ERKS_>
 8085394:	4975      	ldr	r1, [pc, #468]	; (808556c <_Z15outputDataToESPv+0xb88>)
 8085396:	a827      	add	r0, sp, #156	; 0x9c
 8085398:	f005 ff22 	bl	808b1e0 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808539c:	4601      	mov	r1, r0
 808539e:	a806      	add	r0, sp, #24
 80853a0:	f005 fecd 	bl	808b13e <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80853a4:	a827      	add	r0, sp, #156	; 0x9c
 80853a6:	f005 fda5 	bl	808aef4 <_ZN6StringD1Ev>
 80853aa:	a81e      	add	r0, sp, #120	; 0x78
 80853ac:	f005 fda2 	bl	808aef4 <_ZN6StringD1Ev>
        cloud_output_string += String(gps.get_latitude());
 80853b0:	486c      	ldr	r0, [pc, #432]	; (8085564 <_Z15outputDataToESPv+0xb80>)
 80853b2:	f001 ff1f 	bl	80871f4 <_ZN3GPS12get_latitudeEv>
 80853b6:	9400      	str	r4, [sp, #0]
 80853b8:	4602      	mov	r2, r0
 80853ba:	460b      	mov	r3, r1
 80853bc:	a827      	add	r0, sp, #156	; 0x9c
 80853be:	f005 fe91 	bl	808b0e4 <_ZN6StringC1Edi>
 80853c2:	e019      	b.n	80853f8 <_Z15outputDataToESPv+0xa14>
    }else{
        csv_output_string += String(geolocation_latitude)+ ",";
 80853c4:	496a      	ldr	r1, [pc, #424]	; (8085570 <_Z15outputDataToESPv+0xb8c>)
 80853c6:	a81e      	add	r0, sp, #120	; 0x78
 80853c8:	f005 fddb 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80853cc:	a91e      	add	r1, sp, #120	; 0x78
 80853ce:	a827      	add	r0, sp, #156	; 0x9c
 80853d0:	f005 fe16 	bl	808b000 <_ZN6StringC1ERKS_>
 80853d4:	4965      	ldr	r1, [pc, #404]	; (808556c <_Z15outputDataToESPv+0xb88>)
 80853d6:	a827      	add	r0, sp, #156	; 0x9c
 80853d8:	f005 ff02 	bl	808b1e0 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80853dc:	4601      	mov	r1, r0
 80853de:	a806      	add	r0, sp, #24
 80853e0:	f005 fead 	bl	808b13e <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80853e4:	a827      	add	r0, sp, #156	; 0x9c
 80853e6:	f005 fd85 	bl	808aef4 <_ZN6StringD1Ev>
 80853ea:	a81e      	add	r0, sp, #120	; 0x78
 80853ec:	f005 fd82 	bl	808aef4 <_ZN6StringD1Ev>
        cloud_output_string += String(geolocation_latitude);
 80853f0:	495f      	ldr	r1, [pc, #380]	; (8085570 <_Z15outputDataToESPv+0xb8c>)
 80853f2:	a827      	add	r0, sp, #156	; 0x9c
 80853f4:	f005 fdc5 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80853f8:	a927      	add	r1, sp, #156	; 0x9c
 80853fa:	a802      	add	r0, sp, #8
 80853fc:	f005 fe9f 	bl	808b13e <_ZN6String6concatERKS_>
 8085400:	a827      	add	r0, sp, #156	; 0x9c
 8085402:	f005 fd77 	bl	808aef4 <_ZN6StringD1Ev>
    }

    cloud_output_string += String(LONGITUDE_PACKET_CONSTANT);
 8085406:	216f      	movs	r1, #111	; 0x6f
 8085408:	a827      	add	r0, sp, #156	; 0x9c
 808540a:	f005 fe1d 	bl	808b048 <_ZN6StringC1Ec>
 808540e:	a927      	add	r1, sp, #156	; 0x9c
 8085410:	a802      	add	r0, sp, #8
 8085412:	f005 fe94 	bl	808b13e <_ZN6String6concatERKS_>
 8085416:	a827      	add	r0, sp, #156	; 0x9c
 8085418:	f005 fd6c 	bl	808aef4 <_ZN6StringD1Ev>

    if(gps.get_longitude() != 0){
 808541c:	4851      	ldr	r0, [pc, #324]	; (8085564 <_Z15outputDataToESPv+0xb80>)
 808541e:	f001 feee 	bl	80871fe <_ZN3GPS13get_longitudeEv>
 8085422:	2200      	movs	r2, #0
 8085424:	2300      	movs	r3, #0
 8085426:	f008 fa17 	bl	808d858 <__aeabi_dcmpeq>
 808542a:	2800      	cmp	r0, #0
 808542c:	d132      	bne.n	8085494 <_Z15outputDataToESPv+0xab0>
        if(gps.get_ewIndicator() == 0x01){
 808542e:	484d      	ldr	r0, [pc, #308]	; (8085564 <_Z15outputDataToESPv+0xb80>)
 8085430:	f001 fefe 	bl	8087230 <_ZN3GPS15get_ewIndicatorEv>
 8085434:	2801      	cmp	r0, #1
 8085436:	d107      	bne.n	8085448 <_Z15outputDataToESPv+0xa64>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8085438:	494b      	ldr	r1, [pc, #300]	; (8085568 <_Z15outputDataToESPv+0xb84>)
 808543a:	a806      	add	r0, sp, #24
 808543c:	f005 fe83 	bl	808b146 <_ZN6String6concatEPKc>
 8085440:	4949      	ldr	r1, [pc, #292]	; (8085568 <_Z15outputDataToESPv+0xb84>)
 8085442:	a802      	add	r0, sp, #8
 8085444:	f005 fe7f 	bl	808b146 <_ZN6String6concatEPKc>
            csv_output_string += "-";
            cloud_output_string += "-";
        }
        csv_output_string += String(gps.get_longitude()) + ",";
 8085448:	4846      	ldr	r0, [pc, #280]	; (8085564 <_Z15outputDataToESPv+0xb80>)
 808544a:	f001 fed8 	bl	80871fe <_ZN3GPS13get_longitudeEv>
 808544e:	2406      	movs	r4, #6
 8085450:	4602      	mov	r2, r0
 8085452:	460b      	mov	r3, r1
 8085454:	9400      	str	r4, [sp, #0]
 8085456:	a81e      	add	r0, sp, #120	; 0x78
 8085458:	f005 fe44 	bl	808b0e4 <_ZN6StringC1Edi>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 808545c:	a91e      	add	r1, sp, #120	; 0x78
 808545e:	a827      	add	r0, sp, #156	; 0x9c
 8085460:	f005 fdce 	bl	808b000 <_ZN6StringC1ERKS_>
 8085464:	4941      	ldr	r1, [pc, #260]	; (808556c <_Z15outputDataToESPv+0xb88>)
 8085466:	a827      	add	r0, sp, #156	; 0x9c
 8085468:	f005 feba 	bl	808b1e0 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808546c:	4601      	mov	r1, r0
 808546e:	a806      	add	r0, sp, #24
 8085470:	f005 fe65 	bl	808b13e <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8085474:	a827      	add	r0, sp, #156	; 0x9c
 8085476:	f005 fd3d 	bl	808aef4 <_ZN6StringD1Ev>
 808547a:	a81e      	add	r0, sp, #120	; 0x78
 808547c:	f005 fd3a 	bl	808aef4 <_ZN6StringD1Ev>
        cloud_output_string += String(gps.get_longitude());
 8085480:	4838      	ldr	r0, [pc, #224]	; (8085564 <_Z15outputDataToESPv+0xb80>)
 8085482:	f001 febc 	bl	80871fe <_ZN3GPS13get_longitudeEv>
 8085486:	9400      	str	r4, [sp, #0]
 8085488:	4602      	mov	r2, r0
 808548a:	460b      	mov	r3, r1
 808548c:	a827      	add	r0, sp, #156	; 0x9c
 808548e:	f005 fe29 	bl	808b0e4 <_ZN6StringC1Edi>
 8085492:	e019      	b.n	80854c8 <_Z15outputDataToESPv+0xae4>
    }else{
        csv_output_string += String(geolocation_longitude) + ",";
 8085494:	4937      	ldr	r1, [pc, #220]	; (8085574 <_Z15outputDataToESPv+0xb90>)
 8085496:	a81e      	add	r0, sp, #120	; 0x78
 8085498:	f005 fd73 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 808549c:	a91e      	add	r1, sp, #120	; 0x78
 808549e:	a827      	add	r0, sp, #156	; 0x9c
 80854a0:	f005 fdae 	bl	808b000 <_ZN6StringC1ERKS_>
 80854a4:	4931      	ldr	r1, [pc, #196]	; (808556c <_Z15outputDataToESPv+0xb88>)
 80854a6:	a827      	add	r0, sp, #156	; 0x9c
 80854a8:	f005 fe9a 	bl	808b1e0 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80854ac:	4601      	mov	r1, r0
 80854ae:	a806      	add	r0, sp, #24
 80854b0:	f005 fe45 	bl	808b13e <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80854b4:	a827      	add	r0, sp, #156	; 0x9c
 80854b6:	f005 fd1d 	bl	808aef4 <_ZN6StringD1Ev>
 80854ba:	a81e      	add	r0, sp, #120	; 0x78
 80854bc:	f005 fd1a 	bl	808aef4 <_ZN6StringD1Ev>
        cloud_output_string += String(geolocation_longitude);
 80854c0:	492c      	ldr	r1, [pc, #176]	; (8085574 <_Z15outputDataToESPv+0xb90>)
 80854c2:	a827      	add	r0, sp, #156	; 0x9c
 80854c4:	f005 fd5d 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80854c8:	a927      	add	r1, sp, #156	; 0x9c
 80854ca:	a802      	add	r0, sp, #8
 80854cc:	f005 fe37 	bl	808b13e <_ZN6String6concatERKS_>
 80854d0:	a827      	add	r0, sp, #156	; 0x9c
 80854d2:	f005 fd0f 	bl	808aef4 <_ZN6StringD1Ev>
    }

    cloud_output_string += String(ACCURACY_PACKET_CONSTANT);
 80854d6:	2163      	movs	r1, #99	; 0x63
 80854d8:	a827      	add	r0, sp, #156	; 0x9c
 80854da:	f005 fdb5 	bl	808b048 <_ZN6StringC1Ec>
 80854de:	a927      	add	r1, sp, #156	; 0x9c
 80854e0:	a802      	add	r0, sp, #8
 80854e2:	f005 fe2c 	bl	808b13e <_ZN6String6concatERKS_>
 80854e6:	a827      	add	r0, sp, #156	; 0x9c
 80854e8:	f005 fd04 	bl	808aef4 <_ZN6StringD1Ev>
    if (gps.get_longitude() != 0) {
 80854ec:	481d      	ldr	r0, [pc, #116]	; (8085564 <_Z15outputDataToESPv+0xb80>)
 80854ee:	f001 fe86 	bl	80871fe <_ZN3GPS13get_longitudeEv>
 80854f2:	2200      	movs	r2, #0
 80854f4:	2300      	movs	r3, #0
 80854f6:	f008 f9af 	bl	808d858 <__aeabi_dcmpeq>
 80854fa:	2800      	cmp	r0, #0
 80854fc:	d13e      	bne.n	808557c <_Z15outputDataToESPv+0xb98>
        csv_output_string += String(gps.get_horizontalDillution() / 10.0) + ",";
 80854fe:	4819      	ldr	r0, [pc, #100]	; (8085564 <_Z15outputDataToESPv+0xb80>)
 8085500:	f001 fe82 	bl	8087208 <_ZN3GPS23get_horizontalDillutionEv>
 8085504:	f007 feda 	bl	808d2bc <__aeabi_i2d>
 8085508:	2200      	movs	r2, #0
 808550a:	4b1b      	ldr	r3, [pc, #108]	; (8085578 <_Z15outputDataToESPv+0xb94>)
 808550c:	f008 f866 	bl	808d5dc <__aeabi_ddiv>
 8085510:	2406      	movs	r4, #6
 8085512:	4602      	mov	r2, r0
 8085514:	460b      	mov	r3, r1
 8085516:	9400      	str	r4, [sp, #0]
 8085518:	a81e      	add	r0, sp, #120	; 0x78
 808551a:	f005 fde3 	bl	808b0e4 <_ZN6StringC1Edi>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 808551e:	a91e      	add	r1, sp, #120	; 0x78
 8085520:	a827      	add	r0, sp, #156	; 0x9c
 8085522:	f005 fd6d 	bl	808b000 <_ZN6StringC1ERKS_>
 8085526:	4911      	ldr	r1, [pc, #68]	; (808556c <_Z15outputDataToESPv+0xb88>)
 8085528:	a827      	add	r0, sp, #156	; 0x9c
 808552a:	f005 fe59 	bl	808b1e0 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808552e:	4601      	mov	r1, r0
 8085530:	a806      	add	r0, sp, #24
 8085532:	f005 fe04 	bl	808b13e <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8085536:	a827      	add	r0, sp, #156	; 0x9c
 8085538:	f005 fcdc 	bl	808aef4 <_ZN6StringD1Ev>
 808553c:	a81e      	add	r0, sp, #120	; 0x78
 808553e:	f005 fcd9 	bl	808aef4 <_ZN6StringD1Ev>
        cloud_output_string += String(gps.get_horizontalDillution() / 10.0);
 8085542:	4808      	ldr	r0, [pc, #32]	; (8085564 <_Z15outputDataToESPv+0xb80>)
 8085544:	f001 fe60 	bl	8087208 <_ZN3GPS23get_horizontalDillutionEv>
 8085548:	f007 feb8 	bl	808d2bc <__aeabi_i2d>
 808554c:	2200      	movs	r2, #0
 808554e:	4b0a      	ldr	r3, [pc, #40]	; (8085578 <_Z15outputDataToESPv+0xb94>)
 8085550:	f008 f844 	bl	808d5dc <__aeabi_ddiv>
 8085554:	9400      	str	r4, [sp, #0]
 8085556:	4602      	mov	r2, r0
 8085558:	460b      	mov	r3, r1
 808555a:	a827      	add	r0, sp, #156	; 0x9c
 808555c:	f005 fdc2 	bl	808b0e4 <_ZN6StringC1Edi>
 8085560:	e026      	b.n	80855b0 <_Z15outputDataToESPv+0xbcc>
 8085562:	bf00      	nop
 8085564:	200008f8 	.word	0x200008f8
 8085568:	08093087 	.word	0x08093087
 808556c:	08093cd2 	.word	0x08093cd2
 8085570:	200000b4 	.word	0x200000b4
 8085574:	200000c0 	.word	0x200000c0
 8085578:	40240000 	.word	0x40240000
    } else {
        csv_output_string += String(geolocation_accuracy) + ",";
 808557c:	499f      	ldr	r1, [pc, #636]	; (80857fc <_Z15outputDataToESPv+0xe18>)
 808557e:	a81e      	add	r0, sp, #120	; 0x78
 8085580:	f005 fcff 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8085584:	a91e      	add	r1, sp, #120	; 0x78
 8085586:	a827      	add	r0, sp, #156	; 0x9c
 8085588:	f005 fd3a 	bl	808b000 <_ZN6StringC1ERKS_>
 808558c:	499c      	ldr	r1, [pc, #624]	; (8085800 <_Z15outputDataToESPv+0xe1c>)
 808558e:	a827      	add	r0, sp, #156	; 0x9c
 8085590:	f005 fe26 	bl	808b1e0 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8085594:	4601      	mov	r1, r0
 8085596:	a806      	add	r0, sp, #24
 8085598:	f005 fdd1 	bl	808b13e <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808559c:	a827      	add	r0, sp, #156	; 0x9c
 808559e:	f005 fca9 	bl	808aef4 <_ZN6StringD1Ev>
 80855a2:	a81e      	add	r0, sp, #120	; 0x78
 80855a4:	f005 fca6 	bl	808aef4 <_ZN6StringD1Ev>
        cloud_output_string += String(geolocation_accuracy);
 80855a8:	4994      	ldr	r1, [pc, #592]	; (80857fc <_Z15outputDataToESPv+0xe18>)
 80855aa:	a827      	add	r0, sp, #156	; 0x9c
 80855ac:	f005 fce9 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80855b0:	a927      	add	r1, sp, #156	; 0x9c
 80855b2:	a802      	add	r0, sp, #8
    }

    csv_output_string += String(status_word.status_int) + ",";
 80855b4:	4e93      	ldr	r6, [pc, #588]	; (8085804 <_Z15outputDataToESPv+0xe20>)
 80855b6:	f005 fdc2 	bl	808b13e <_ZN6String6concatERKS_>
    if (gps.get_longitude() != 0) {
        csv_output_string += String(gps.get_horizontalDillution() / 10.0) + ",";
        cloud_output_string += String(gps.get_horizontalDillution() / 10.0);
    } else {
        csv_output_string += String(geolocation_accuracy) + ",";
        cloud_output_string += String(geolocation_accuracy);
 80855ba:	a827      	add	r0, sp, #156	; 0x9c
 80855bc:	f005 fc9a 	bl	808aef4 <_ZN6StringD1Ev>
    }

    csv_output_string += String(status_word.status_int) + ",";
 80855c0:	220a      	movs	r2, #10
 80855c2:	8831      	ldrh	r1, [r6, #0]
 80855c4:	a81e      	add	r0, sp, #120	; 0x78
 80855c6:	f005 fd50 	bl	808b06a <_ZN6StringC1Eih>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80855ca:	a91e      	add	r1, sp, #120	; 0x78
 80855cc:	a827      	add	r0, sp, #156	; 0x9c
 80855ce:	f005 fd17 	bl	808b000 <_ZN6StringC1ERKS_>
 80855d2:	498b      	ldr	r1, [pc, #556]	; (8085800 <_Z15outputDataToESPv+0xe1c>)
 80855d4:	a827      	add	r0, sp, #156	; 0x9c
 80855d6:	f005 fe03 	bl	808b1e0 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80855da:	4601      	mov	r1, r0
 80855dc:	a806      	add	r0, sp, #24
 80855de:	f005 fdae 	bl	808b13e <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80855e2:	a827      	add	r0, sp, #156	; 0x9c
 80855e4:	f005 fc86 	bl	808aef4 <_ZN6StringD1Ev>
 80855e8:	a81e      	add	r0, sp, #120	; 0x78
 80855ea:	f005 fc83 	bl	808aef4 <_ZN6StringD1Ev>
    csv_output_string += String(Time.format(time, "%d/%m/%y,%H:%M:%S"));
 80855ee:	4b86      	ldr	r3, [pc, #536]	; (8085808 <_Z15outputDataToESPv+0xe24>)
 80855f0:	463a      	mov	r2, r7
 80855f2:	4986      	ldr	r1, [pc, #536]	; (808580c <_Z15outputDataToESPv+0xe28>)
 80855f4:	a827      	add	r0, sp, #156	; 0x9c
 80855f6:	f006 f9f9 	bl	808b9ec <_ZN9TimeClass6formatElPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80855fa:	a927      	add	r1, sp, #156	; 0x9c
 80855fc:	a806      	add	r0, sp, #24
 80855fe:	f005 fd9e 	bl	808b13e <_ZN6String6concatERKS_>
 8085602:	a827      	add	r0, sp, #156	; 0x9c
 8085604:	f005 fc76 	bl	808aef4 <_ZN6StringD1Ev>
    cloud_output_string += String(PARTICLE_TIME_PACKET_CONSTANT) + String(Time.now());
 8085608:	2159      	movs	r1, #89	; 0x59
 808560a:	a81a      	add	r0, sp, #104	; 0x68
 808560c:	f005 fd1c 	bl	808b048 <_ZN6StringC1Ec>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8085610:	a91a      	add	r1, sp, #104	; 0x68
 8085612:	a827      	add	r0, sp, #156	; 0x9c
 8085614:	f005 fcf4 	bl	808b000 <_ZN6StringC1ERKS_>
 8085618:	f006 fa3b 	bl	808ba92 <_ZN9TimeClass3nowEv>
 808561c:	220a      	movs	r2, #10
 808561e:	4601      	mov	r1, r0
 8085620:	a81e      	add	r0, sp, #120	; 0x78
 8085622:	f005 fd35 	bl	808b090 <_ZN6StringC1Elh>
 8085626:	a91e      	add	r1, sp, #120	; 0x78
 8085628:	a827      	add	r0, sp, #156	; 0x9c
 808562a:	f005 fdcd 	bl	808b1c8 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808562e:	4601      	mov	r1, r0
 8085630:	a802      	add	r0, sp, #8
 8085632:	f005 fd84 	bl	808b13e <_ZN6String6concatERKS_>
 8085636:	a81e      	add	r0, sp, #120	; 0x78
 8085638:	f005 fc5c 	bl	808aef4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808563c:	a827      	add	r0, sp, #156	; 0x9c
 808563e:	f005 fc59 	bl	808aef4 <_ZN6StringD1Ev>
    cloud_output_string += '&';
    if(debugging_enabled){
 8085642:	4c73      	ldr	r4, [pc, #460]	; (8085810 <_Z15outputDataToESPv+0xe2c>)
        cloud_output_string += String(geolocation_accuracy);
    }

    csv_output_string += String(status_word.status_int) + ",";
    csv_output_string += String(Time.format(time, "%d/%m/%y,%H:%M:%S"));
    cloud_output_string += String(PARTICLE_TIME_PACKET_CONSTANT) + String(Time.now());
 8085644:	a81a      	add	r0, sp, #104	; 0x68
 8085646:	f005 fc55 	bl	808aef4 <_ZN6StringD1Ev>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
 808564a:	2126      	movs	r1, #38	; 0x26
 808564c:	a802      	add	r0, sp, #8
 808564e:	f005 fd89 	bl	808b164 <_ZN6String6concatEc>
    cloud_output_string += '&';
    if(debugging_enabled){
 8085652:	6823      	ldr	r3, [r4, #0]
 8085654:	b14b      	cbz	r3, 808566a <_Z15outputDataToESPv+0xc86>
        Serial.println("Line to write to cloud:");
 8085656:	f006 ff67 	bl	808c528 <_Z16_fetch_usbserialv>
 808565a:	496e      	ldr	r1, [pc, #440]	; (8085814 <_Z15outputDataToESPv+0xe30>)
 808565c:	f005 febd 	bl	808b3da <_ZN5Print7printlnEPKc>
        Serial.println(cloud_output_string);
 8085660:	f006 ff62 	bl	808c528 <_Z16_fetch_usbserialv>
 8085664:	9902      	ldr	r1, [sp, #8]
 8085666:	f005 feb8 	bl	808b3da <_ZN5Print7printlnEPKc>
    }
    
    outputToCloud(cloud_output_string, sensible_buf);
 808566a:	a902      	add	r1, sp, #8
 808566c:	a81e      	add	r0, sp, #120	; 0x78
 808566e:	f005 fcc7 	bl	808b000 <_ZN6StringC1ERKS_>
 8085672:	a964      	add	r1, sp, #400	; 0x190
 8085674:	a827      	add	r0, sp, #156	; 0x9c
 8085676:	f005 fc84 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
 808567a:	a927      	add	r1, sp, #156	; 0x9c
 808567c:	a81e      	add	r0, sp, #120	; 0x78
 808567e:	f7fe ffe7 	bl	8084650 <_Z13outputToCloud6StringS_>
 8085682:	a827      	add	r0, sp, #156	; 0x9c
 8085684:	f005 fc36 	bl	808aef4 <_ZN6StringD1Ev>
 8085688:	a81e      	add	r0, sp, #120	; 0x78
 808568a:	f005 fc33 	bl	808aef4 <_ZN6StringD1Ev>
    
    if(esp_wifi_connection_status){
 808568e:	4b62      	ldr	r3, [pc, #392]	; (8085818 <_Z15outputDataToESPv+0xe34>)
 8085690:	681b      	ldr	r3, [r3, #0]
 8085692:	b1ab      	cbz	r3, 80856c0 <_Z15outputDataToESPv+0xcdc>
        if(debugging_enabled){
 8085694:	6823      	ldr	r3, [r4, #0]
 8085696:	b173      	cbz	r3, 80856b6 <_Z15outputDataToESPv+0xcd2>
            Serial.println("Sending data to esp to upload via wifi...");
 8085698:	f006 ff46 	bl	808c528 <_Z16_fetch_usbserialv>
 808569c:	495f      	ldr	r1, [pc, #380]	; (808581c <_Z15outputDataToESPv+0xe38>)
 808569e:	f005 fe9c 	bl	808b3da <_ZN5Print7printlnEPKc>
            writeLogFile("Sending data to esp to upload via wifi");
 80856a2:	495f      	ldr	r1, [pc, #380]	; (8085820 <_Z15outputDataToESPv+0xe3c>)
 80856a4:	a827      	add	r0, sp, #156	; 0x9c
 80856a6:	f005 fc6c 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
 80856aa:	a827      	add	r0, sp, #156	; 0x9c
 80856ac:	f7fc fb30 	bl	8081d10 <_Z12writeLogFile6String>
 80856b0:	a827      	add	r0, sp, #156	; 0x9c
 80856b2:	f005 fc1f 	bl	808aef4 <_ZN6StringD1Ev>
          }
        Serial1.println(cloud_output_string);
 80856b6:	f007 f85b 	bl	808c770 <_Z22__fetch_global_Serial1v>
 80856ba:	9902      	ldr	r1, [sp, #8]
 80856bc:	f005 fe8d 	bl	808b3da <_ZN5Print7printlnEPKc>
    }
    Serial.println(csv_output_string);
 80856c0:	f006 ff32 	bl	808c528 <_Z16_fetch_usbserialv>
 80856c4:	9906      	ldr	r1, [sp, #24]
 80856c6:	f005 fe88 	bl	808b3da <_ZN5Print7printlnEPKc>
 80856ca:	4956      	ldr	r1, [pc, #344]	; (8085824 <_Z15outputDataToESPv+0xe40>)
 80856cc:	2302      	movs	r3, #2
 80856ce:	220c      	movs	r2, #12
 80856d0:	f5a1 608e 	sub.w	r0, r1, #1136	; 0x470
 80856d4:	f7fb fbf4 	bl	8080ec0 <_ZN9SdFatBase5beginEP9SdSpiBasehh>

    //write data to file
    if (sd.begin(CS)){
 80856d8:	2800      	cmp	r0, #0
 80856da:	d036      	beq.n	808574a <_Z15outputDataToESPv+0xd66>
        if(debugging_enabled)
 80856dc:	6823      	ldr	r3, [r4, #0]
 80856de:	b123      	cbz	r3, 80856ea <_Z15outputDataToESPv+0xd06>
            Serial.println("Writing row to file.");
 80856e0:	f006 ff22 	bl	808c528 <_Z16_fetch_usbserialv>
 80856e4:	4950      	ldr	r1, [pc, #320]	; (8085828 <_Z15outputDataToESPv+0xe44>)
 80856e6:	f005 fe78 	bl	808b3da <_ZN5Print7printlnEPKc>
 80856ea:	4a50      	ldr	r2, [pc, #320]	; (808582c <_Z15outputDataToESPv+0xe48>)
 80856ec:	4950      	ldr	r1, [pc, #320]	; (8085830 <_Z15outputDataToESPv+0xe4c>)
        file.open(fileName, O_CREAT | O_APPEND | O_WRITE);
        if(file_started == 0){
 80856ee:	4c51      	ldr	r4, [pc, #324]	; (8085834 <_Z15outputDataToESPv+0xe50>)
 80856f0:	2346      	movs	r3, #70	; 0x46
 80856f2:	6812      	ldr	r2, [r2, #0]
 80856f4:	6809      	ldr	r1, [r1, #0]
 80856f6:	4850      	ldr	r0, [pc, #320]	; (8085838 <_Z15outputDataToESPv+0xe54>)
 80856f8:	f002 ffc5 	bl	8088686 <_ZN7FatFile4openEPS_PKch>
 80856fc:	6823      	ldr	r3, [r4, #0]
 80856fe:	b9eb      	cbnz	r3, 808573c <_Z15outputDataToESPv+0xd58>
            file.println("File Start timestamp: ");
 8085700:	494e      	ldr	r1, [pc, #312]	; (808583c <_Z15outputDataToESPv+0xe58>)
 8085702:	484f      	ldr	r0, [pc, #316]	; (8085840 <_Z15outputDataToESPv+0xe5c>)
 8085704:	f005 fe69 	bl	808b3da <_ZN5Print7printlnEPKc>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
 8085708:	f006 f9c3 	bl	808ba92 <_ZN9TimeClass3nowEv>
 808570c:	4601      	mov	r1, r0
 808570e:	a827      	add	r0, sp, #156	; 0x9c
 8085710:	f006 f8ec 	bl	808b8ec <_ZN9TimeClass7timeStrEl>
            file.println(Time.timeStr());
 8085714:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8085716:	484a      	ldr	r0, [pc, #296]	; (8085840 <_Z15outputDataToESPv+0xe5c>)
 8085718:	f005 fe5f 	bl	808b3da <_ZN5Print7printlnEPKc>
 808571c:	a827      	add	r0, sp, #156	; 0x9c
 808571e:	f005 fbe9 	bl	808aef4 <_ZN6StringD1Ev>
            file.println(String(HEADER_STRING));
 8085722:	4948      	ldr	r1, [pc, #288]	; (8085844 <_Z15outputDataToESPv+0xe60>)
 8085724:	a827      	add	r0, sp, #156	; 0x9c
 8085726:	f005 fc2c 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
 808572a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 808572c:	4844      	ldr	r0, [pc, #272]	; (8085840 <_Z15outputDataToESPv+0xe5c>)
 808572e:	f005 fe54 	bl	808b3da <_ZN5Print7printlnEPKc>
 8085732:	a827      	add	r0, sp, #156	; 0x9c
 8085734:	f005 fbde 	bl	808aef4 <_ZN6StringD1Ev>
            file_started = 1;
 8085738:	2301      	movs	r3, #1
 808573a:	6023      	str	r3, [r4, #0]
        }
        file.println(csv_output_string);
 808573c:	9906      	ldr	r1, [sp, #24]
 808573e:	4840      	ldr	r0, [pc, #256]	; (8085840 <_Z15outputDataToESPv+0xe5c>)
 8085740:	f005 fe4b 	bl	808b3da <_ZN5Print7printlnEPKc>

        file.close();
 8085744:	483c      	ldr	r0, [pc, #240]	; (8085838 <_Z15outputDataToESPv+0xe54>)
 8085746:	f002 ff97 	bl	8088678 <_ZN7FatFile5closeEv>
        //byte 0 - version
        ble_output_array[0 + i*(BLE_PAYLOAD_SIZE)] = 1;

        //bytes 1,2 - Device ID
        //DEVICE_id = 555;
        wordBytes.myWord = DEVICE_id;
 808574a:	4f3f      	ldr	r7, [pc, #252]	; (8085848 <_Z15outputDataToESPv+0xe64>)
 808574c:	f10d 049d 	add.w	r4, sp, #157	; 0x9d
  }else{
    Serial.println("Unable to write to log file");
  }
}

void outputDataToESP(void){
 8085750:	2500      	movs	r5, #0
    for(int i=0; i<NUMBER_OF_SPECIES; i++){

        //************Fill the ble output array**********************//
        //Serial.printf("making array[%d]\n", i);
        //byte 0 - version
        ble_output_array[0 + i*(BLE_PAYLOAD_SIZE)] = 1;
 8085752:	2301      	movs	r3, #1
 8085754:	f804 3c01 	strb.w	r3, [r4, #-1]

        //bytes 1,2 - Device ID
        //DEVICE_id = 555;
        wordBytes.myWord = DEVICE_id;
 8085758:	683b      	ldr	r3, [r7, #0]
        ble_output_array[1 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 808575a:	7023      	strb	r3, [r4, #0]
        ble_output_array[2 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 808575c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8085760:	7063      	strb	r3, [r4, #1]

        //byte 3 - Measurement number
        ble_output_array[3 + i*(BLE_PAYLOAD_SIZE)] = sample_counter;
 8085762:	4b3a      	ldr	r3, [pc, #232]	; (808584c <_Z15outputDataToESPv+0xe68>)
 8085764:	681b      	ldr	r3, [r3, #0]
 8085766:	70a3      	strb	r3, [r4, #2]
        11-sound_average



        */
        if(i == 0){
 8085768:	b91d      	cbnz	r5, 8085772 <_Z15outputDataToESPv+0xd8e>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = CARBON_MONOXIDE_PACKET_CONSTANT;
 808576a:	234d      	movs	r3, #77	; 0x4d
 808576c:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = CO_float;
 808576e:	4b38      	ldr	r3, [pc, #224]	; (8085850 <_Z15outputDataToESPv+0xe6c>)
 8085770:	e083      	b.n	808587a <_Z15outputDataToESPv+0xe96>
        }else if(i == 1){
 8085772:	2d01      	cmp	r5, #1
 8085774:	d103      	bne.n	808577e <_Z15outputDataToESPv+0xd9a>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = CARBON_DIOXIDE_PACKET_CONSTANT;
 8085776:	2343      	movs	r3, #67	; 0x43
 8085778:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = CO2_float;
 808577a:	4b36      	ldr	r3, [pc, #216]	; (8085854 <_Z15outputDataToESPv+0xe70>)
 808577c:	e07d      	b.n	808587a <_Z15outputDataToESPv+0xe96>
        }else if(i == 2){
 808577e:	2d02      	cmp	r5, #2
 8085780:	d105      	bne.n	808578e <_Z15outputDataToESPv+0xdaa>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = BATTERY_PACKET_CONSTANT;
 8085782:	2378      	movs	r3, #120	; 0x78
 8085784:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = fuel.getSoC();
 8085786:	4834      	ldr	r0, [pc, #208]	; (8085858 <_Z15outputDataToESPv+0xe74>)
 8085788:	f006 fa44 	bl	808bc14 <_ZN9FuelGauge6getSoCEv>
 808578c:	e076      	b.n	808587c <_Z15outputDataToESPv+0xe98>
        }else if(i == 3){
 808578e:	2d03      	cmp	r5, #3
 8085790:	d103      	bne.n	808579a <_Z15outputDataToESPv+0xdb6>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM1_PACKET_CONSTANT;
 8085792:	2372      	movs	r3, #114	; 0x72
 8085794:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = PM01Value;
 8085796:	4b31      	ldr	r3, [pc, #196]	; (808585c <_Z15outputDataToESPv+0xe78>)
 8085798:	e00a      	b.n	80857b0 <_Z15outputDataToESPv+0xdcc>
        }else if(i == 4){
 808579a:	2d04      	cmp	r5, #4
 808579c:	d103      	bne.n	80857a6 <_Z15outputDataToESPv+0xdc2>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM2PT5_PACKET_CONSTANT;
 808579e:	2352      	movs	r3, #82	; 0x52
 80857a0:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = corrected_PM_25;
 80857a2:	4b2f      	ldr	r3, [pc, #188]	; (8085860 <_Z15outputDataToESPv+0xe7c>)
 80857a4:	e069      	b.n	808587a <_Z15outputDataToESPv+0xe96>
        }else if(i == 5){
 80857a6:	2d05      	cmp	r5, #5
 80857a8:	d106      	bne.n	80857b8 <_Z15outputDataToESPv+0xdd4>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM10_PACKET_CONSTANT;
 80857aa:	2371      	movs	r3, #113	; 0x71
 80857ac:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = PM10Value;
 80857ae:	4b2d      	ldr	r3, [pc, #180]	; (8085864 <_Z15outputDataToESPv+0xe80>)
 80857b0:	6818      	ldr	r0, [r3, #0]
 80857b2:	f008 f9eb 	bl	808db8c <__aeabi_i2f>
 80857b6:	e061      	b.n	808587c <_Z15outputDataToESPv+0xe98>
        }else if(i == 6){
 80857b8:	2d06      	cmp	r5, #6
 80857ba:	d104      	bne.n	80857c6 <_Z15outputDataToESPv+0xde2>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = TEMPERATURE_PACKET_CONSTANT;
 80857bc:	2374      	movs	r3, #116	; 0x74
 80857be:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = readTemperature();
 80857c0:	f7fb ff16 	bl	80815f0 <_Z15readTemperaturev>
 80857c4:	e05a      	b.n	808587c <_Z15outputDataToESPv+0xe98>
        }else if(i == 7){
 80857c6:	2d07      	cmp	r5, #7
 80857c8:	d107      	bne.n	80857da <_Z15outputDataToESPv+0xdf6>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PRESSURE_PACKET_CONSTANT;
 80857ca:	2350      	movs	r3, #80	; 0x50
 80857cc:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = bme.pressure / 100.0;
 80857ce:	4b26      	ldr	r3, [pc, #152]	; (8085868 <_Z15outputDataToESPv+0xe84>)
 80857d0:	4926      	ldr	r1, [pc, #152]	; (808586c <_Z15outputDataToESPv+0xe88>)
 80857d2:	6858      	ldr	r0, [r3, #4]
 80857d4:	f008 fae2 	bl	808dd9c <__aeabi_fdiv>
 80857d8:	e050      	b.n	808587c <_Z15outputDataToESPv+0xe98>
        }else if(i == 8){
 80857da:	2d08      	cmp	r5, #8
 80857dc:	d104      	bne.n	80857e8 <_Z15outputDataToESPv+0xe04>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = HUMIDITY_PACKET_CONSTANT;
 80857de:	2368      	movs	r3, #104	; 0x68
 80857e0:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = readHumidity();
 80857e2:	f7fb ff83 	bl	80816ec <_Z12readHumidityv>
 80857e6:	e049      	b.n	808587c <_Z15outputDataToESPv+0xe98>
        }else if(i == 9){
 80857e8:	2d09      	cmp	r5, #9
 80857ea:	d143      	bne.n	8085874 <_Z15outputDataToESPv+0xe90>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = SOUND_PACKET_CONSTANT;
 80857ec:	2373      	movs	r3, #115	; 0x73
 80857ee:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = sound_average;
 80857f0:	4b1f      	ldr	r3, [pc, #124]	; (8085870 <_Z15outputDataToESPv+0xe8c>)
 80857f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80857f6:	f008 f8bf 	bl	808d978 <__aeabi_d2f>
 80857fa:	e03f      	b.n	808587c <_Z15outputDataToESPv+0xe98>
 80857fc:	20000080 	.word	0x20000080
 8085800:	08093cd2 	.word	0x08093cd2
 8085804:	20000b88 	.word	0x20000b88
 8085808:	080930d9 	.word	0x080930d9
 808580c:	20000d20 	.word	0x20000d20
 8085810:	20000b10 	.word	0x20000b10
 8085814:	080930eb 	.word	0x080930eb
 8085818:	20000238 	.word	0x20000238
 808581c:	08093103 	.word	0x08093103
 8085820:	0809312d 	.word	0x0809312d
 8085824:	200006ac 	.word	0x200006ac
 8085828:	08093154 	.word	0x08093154
 808582c:	20000af4 	.word	0x20000af4
 8085830:	20000bdc 	.word	0x20000bdc
 8085834:	20000b94 	.word	0x20000b94
 8085838:	200006c8 	.word	0x200006c8
 808583c:	08091923 	.word	0x08091923
 8085840:	200006c0 	.word	0x200006c0
 8085844:	08093169 	.word	0x08093169
 8085848:	20000088 	.word	0x20000088
 808584c:	2000077c 	.word	0x2000077c
 8085850:	20000b1c 	.word	0x20000b1c
 8085854:	20000228 	.word	0x20000228
 8085858:	20000848 	.word	0x20000848
 808585c:	20000b18 	.word	0x20000b18
 8085860:	20000930 	.word	0x20000930
 8085864:	20000b34 	.word	0x20000b34
 8085868:	20000700 	.word	0x20000700
 808586c:	42c80000 	.word	0x42c80000
 8085870:	20000b28 	.word	0x20000b28
        }else if(i == 10){
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = VOC_PACKET_CONSTANT;
 8085874:	2367      	movs	r3, #103	; 0x67
 8085876:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = air_quality_score;
 8085878:	4b34      	ldr	r3, [pc, #208]	; (808594c <_Z15outputDataToESPv+0xf68>)
 808587a:	6818      	ldr	r0, [r3, #0]
            floatBytes.myFloat = O3_float;
        }*/

        //bytes 5,6,7,8 - Measurement Value
        ble_output_array[5 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[0];
        ble_output_array[6 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
 808587c:	f3c0 2307 	ubfx	r3, r0, #8, #8
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = OZONE_PACKET_CONSTANT;
            floatBytes.myFloat = O3_float;
        }*/

        //bytes 5,6,7,8 - Measurement Value
        ble_output_array[5 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[0];
 8085880:	7120      	strb	r0, [r4, #4]
        ble_output_array[6 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
 8085882:	7163      	strb	r3, [r4, #5]
        ble_output_array[7 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[2];
 8085884:	f3c0 4307 	ubfx	r3, r0, #16, #8
        ble_output_array[8 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[3];
 8085888:	f3c0 6007 	ubfx	r0, r0, #24, #8
        }*/

        //bytes 5,6,7,8 - Measurement Value
        ble_output_array[5 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[0];
        ble_output_array[6 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
        ble_output_array[7 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[2];
 808588c:	71a3      	strb	r3, [r4, #6]
        ble_output_array[8 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[3];
 808588e:	71e0      	strb	r0, [r4, #7]


        //bytes 9-12 - latitude
        wordBytes.myWord = gps.get_latitudeWhole();
 8085890:	482f      	ldr	r0, [pc, #188]	; (8085950 <_Z15outputDataToESPv+0xf6c>)
 8085892:	f001 fcbe 	bl	8087212 <_ZN3GPS17get_latitudeWholeEv>
        ble_output_array[9 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8085896:	7220      	strb	r0, [r4, #8]
        ble_output_array[10 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8085898:	f3c0 2007 	ubfx	r0, r0, #8, #8
 808589c:	7260      	strb	r0, [r4, #9]

        wordBytes.myWord = gps.get_latitudeFrac();
 808589e:	482c      	ldr	r0, [pc, #176]	; (8085950 <_Z15outputDataToESPv+0xf6c>)
 80858a0:	f001 fcba 	bl	8087218 <_ZN3GPS16get_latitudeFracEv>
        ble_output_array[11 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 80858a4:	72a0      	strb	r0, [r4, #10]
        ble_output_array[12 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 80858a6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80858aa:	72e0      	strb	r0, [r4, #11]

        //bytes 14-17 - longitude
        wordBytes.myWord = gps.get_longitudeWhole();
 80858ac:	4828      	ldr	r0, [pc, #160]	; (8085950 <_Z15outputDataToESPv+0xf6c>)
 80858ae:	f001 fcb6 	bl	808721e <_ZN3GPS18get_longitudeWholeEv>
        ble_output_array[13 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 80858b2:	7320      	strb	r0, [r4, #12]
        ble_output_array[14 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 80858b4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80858b8:	7360      	strb	r0, [r4, #13]

        wordBytes.myWord = gps.get_longitudeFrac();
 80858ba:	4825      	ldr	r0, [pc, #148]	; (8085950 <_Z15outputDataToESPv+0xf6c>)
 80858bc:	f001 fcb2 	bl	8087224 <_ZN3GPS17get_longitudeFracEv>
        ble_output_array[15 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 80858c0:	73a0      	strb	r0, [r4, #14]
        ble_output_array[16 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 80858c2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80858c6:	73e0      	strb	r0, [r4, #15]


        //byte 18 - east west and north south indicator
        //  LSB 0 = East, LSB 1 = West
        //  MSB 0 = South, MSB 1 = North
        int northSouth = gps.get_nsIndicator();
 80858c8:	4821      	ldr	r0, [pc, #132]	; (8085950 <_Z15outputDataToESPv+0xf6c>)
 80858ca:	f001 fcae 	bl	808722a <_ZN3GPS15get_nsIndicatorEv>
 80858ce:	4680      	mov	r8, r0
        int eastWest = gps.get_ewIndicator();
 80858d0:	481f      	ldr	r0, [pc, #124]	; (8085950 <_Z15outputDataToESPv+0xf6c>)
 80858d2:	f001 fcad 	bl	8087230 <_ZN3GPS15get_ewIndicatorEv>

        ble_output_array[17 + i*(BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
 80858d6:	ea48 0000 	orr.w	r0, r8, r0
 80858da:	7420      	strb	r0, [r4, #16]
        ble_output_array[18 + i*(BLE_PAYLOAD_SIZE)] = gps.get_horizontalDillution();
 80858dc:	481c      	ldr	r0, [pc, #112]	; (8085950 <_Z15outputDataToESPv+0xf6c>)
 80858de:	f001 fc93 	bl	8087208 <_ZN3GPS23get_horizontalDillutionEv>
        ble_output_array[19 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[1];
 80858e2:	7873      	ldrb	r3, [r6, #1]
    //we are using binary for the ble packets so we can compress the data into 19 bytes for the small payload

    byte ble_output_array[NUMBER_OF_SPECIES*BLE_PAYLOAD_SIZE];     //19 bytes per data line and 12 species to output


    for(int i=0; i<NUMBER_OF_SPECIES; i++){
 80858e4:	3501      	adds	r5, #1
        int northSouth = gps.get_nsIndicator();
        int eastWest = gps.get_ewIndicator();

        ble_output_array[17 + i*(BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
        ble_output_array[18 + i*(BLE_PAYLOAD_SIZE)] = gps.get_horizontalDillution();
        ble_output_array[19 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[1];
 80858e6:	74a3      	strb	r3, [r4, #18]
        ble_output_array[20 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[0];
 80858e8:	7833      	ldrb	r3, [r6, #0]
    //we are using binary for the ble packets so we can compress the data into 19 bytes for the small payload

    byte ble_output_array[NUMBER_OF_SPECIES*BLE_PAYLOAD_SIZE];     //19 bytes per data line and 12 species to output


    for(int i=0; i<NUMBER_OF_SPECIES; i++){
 80858ea:	2d0b      	cmp	r5, #11
        int eastWest = gps.get_ewIndicator();

        ble_output_array[17 + i*(BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
        ble_output_array[18 + i*(BLE_PAYLOAD_SIZE)] = gps.get_horizontalDillution();
        ble_output_array[19 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[1];
        ble_output_array[20 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[0];
 80858ec:	74e3      	strb	r3, [r4, #19]

        ble_output_array[21 + i*(BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species
 80858ee:	f04f 0323 	mov.w	r3, #35	; 0x23
        //  MSB 0 = South, MSB 1 = North
        int northSouth = gps.get_nsIndicator();
        int eastWest = gps.get_ewIndicator();

        ble_output_array[17 + i*(BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
        ble_output_array[18 + i*(BLE_PAYLOAD_SIZE)] = gps.get_horizontalDillution();
 80858f2:	7460      	strb	r0, [r4, #17]
        ble_output_array[19 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[1];
        ble_output_array[20 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[0];

        ble_output_array[21 + i*(BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species
 80858f4:	7523      	strb	r3, [r4, #20]
 80858f6:	f104 0416 	add.w	r4, r4, #22
    //we are using binary for the ble packets so we can compress the data into 19 bytes for the small payload

    byte ble_output_array[NUMBER_OF_SPECIES*BLE_PAYLOAD_SIZE];     //19 bytes per data line and 12 species to output


    for(int i=0; i<NUMBER_OF_SPECIES; i++){
 80858fa:	f47f af2a 	bne.w	8085752 <_Z15outputDataToESPv+0xd6e>
        ble_output_array[21 + i*(BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species

    }

    //send start delimeter to ESP
    Serial1.print("$");
 80858fe:	f006 ff37 	bl	808c770 <_Z22__fetch_global_Serial1v>
 8085902:	4914      	ldr	r1, [pc, #80]	; (8085954 <_Z15outputDataToESPv+0xf70>)
 8085904:	f005 fd56 	bl	808b3b4 <_ZN5Print5printEPKc>
    //send the packaged data with # delimeters in between packets
    Serial1.write(ble_output_array, NUMBER_OF_SPECIES*BLE_PAYLOAD_SIZE);
 8085908:	f006 ff32 	bl	808c770 <_Z22__fetch_global_Serial1v>
 808590c:	6803      	ldr	r3, [r0, #0]
 808590e:	22f2      	movs	r2, #242	; 0xf2
 8085910:	68db      	ldr	r3, [r3, #12]
 8085912:	a927      	add	r1, sp, #156	; 0x9c
 8085914:	4798      	blx	r3

    //send ending delimeter
    Serial1.print("&");
 8085916:	f006 ff2b 	bl	808c770 <_Z22__fetch_global_Serial1v>
 808591a:	490f      	ldr	r1, [pc, #60]	; (8085958 <_Z15outputDataToESPv+0xf74>)
 808591c:	f005 fd4a 	bl	808b3b4 <_ZN5Print5printEPKc>



    JSONBufferWriter writer(sensible_buf, sizeof(sensible_buf) - 1);
    writer.beginObject();
    String device_string = "PAM-" + String(DEVICE_id);
 8085920:	a816      	add	r0, sp, #88	; 0x58
 8085922:	f005 fae7 	bl	808aef4 <_ZN6StringD1Ev>
    //"$1:D555g47.7M-22.050533C550.866638r1R1q2T45.8P844.9h17.2s1842.700000&"
    String cloud_output_string = "";    //create a clean string
    String csv_output_string = "";
    String sensible_string = "";
    String latitude_string = "";
    String longitude_string = "";
 8085926:	a812      	add	r0, sp, #72	; 0x48
 8085928:	f005 fae4 	bl	808aef4 <_ZN6StringD1Ev>
    //This is different than the ble packet in that we are putting all of the data that we have in one packet
    //"$1:D555g47.7M-22.050533C550.866638r1R1q2T45.8P844.9h17.2s1842.700000&"
    String cloud_output_string = "";    //create a clean string
    String csv_output_string = "";
    String sensible_string = "";
    String latitude_string = "";
 808592c:	a80e      	add	r0, sp, #56	; 0x38
 808592e:	f005 fae1 	bl	808aef4 <_ZN6StringD1Ev>
    //************Fill the cloud output array and file output array for row in csv file on usd card*****************************/
    //This is different than the ble packet in that we are putting all of the data that we have in one packet
    //"$1:D555g47.7M-22.050533C550.866638r1R1q2T45.8P844.9h17.2s1842.700000&"
    String cloud_output_string = "";    //create a clean string
    String csv_output_string = "";
    String sensible_string = "";
 8085932:	a80a      	add	r0, sp, #40	; 0x28
 8085934:	f005 fade 	bl	808aef4 <_ZN6StringD1Ev>

    //************Fill the cloud output array and file output array for row in csv file on usd card*****************************/
    //This is different than the ble packet in that we are putting all of the data that we have in one packet
    //"$1:D555g47.7M-22.050533C550.866638r1R1q2T45.8P844.9h17.2s1842.700000&"
    String cloud_output_string = "";    //create a clean string
    String csv_output_string = "";
 8085938:	a806      	add	r0, sp, #24
 808593a:	f005 fadb 	bl	808aef4 <_ZN6StringD1Ev>
    }*/

    //************Fill the cloud output array and file output array for row in csv file on usd card*****************************/
    //This is different than the ble packet in that we are putting all of the data that we have in one packet
    //"$1:D555g47.7M-22.050533C550.866638r1R1q2T45.8P844.9h17.2s1842.700000&"
    String cloud_output_string = "";    //create a clean string
 808593e:	a802      	add	r0, sp, #8
 8085940:	f005 fad8 	bl	808aef4 <_ZN6StringD1Ev>
        if(ble_output_array[i]=='#')
            Serial.printf("\n\r");
    }
    Serial.println("End of array");*/

}
 8085944:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8085948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808594c:	20000b20 	.word	0x20000b20
 8085950:	200008f8 	.word	0x200008f8
 8085954:	08091b2a 	.word	0x08091b2a
 8085958:	080919be 	.word	0x080919be

0808595c <_ZN5Print6printfIIfEEEjPKcDpT_>:
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
 808595c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808595e:	4604      	mov	r4, r0
    {
        return this->printf_impl(false, format, args...);
 8085960:	4610      	mov	r0, r2
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
 8085962:	460d      	mov	r5, r1
    {
        return this->printf_impl(false, format, args...);
 8085964:	f007 fcbc 	bl	808d2e0 <__aeabi_f2d>
 8085968:	462a      	mov	r2, r5
 808596a:	e9cd 0100 	strd	r0, r1, [sp]
 808596e:	2100      	movs	r1, #0
 8085970:	4620      	mov	r0, r4
 8085972:	f005 fe67 	bl	808b644 <_ZN5Print11printf_implEbPKcz>
    }
 8085976:	b003      	add	sp, #12
 8085978:	bd30      	pop	{r4, r5, pc}

0808597a <_ZN5Print6printfIIiEEEjPKcDpT_>:
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 808597a:	4613      	mov	r3, r2
 808597c:	460a      	mov	r2, r1
 808597e:	2100      	movs	r1, #0
 8085980:	f005 be60 	b.w	808b644 <_ZN5Print11printf_implEbPKcz>

08085984 <_Z26serialIncreaseInputCurrentv>:
    Serial.println("failed writing string");
  }

}

void serialIncreaseInputCurrent(void){
 8085984:	b538      	push	{r3, r4, r5, lr}
    int inputCurrent = pmic.getInputCurrentLimit();
 8085986:	481d      	ldr	r0, [pc, #116]	; (80859fc <_Z26serialIncreaseInputCurrentv+0x78>)
 8085988:	f005 f820 	bl	808a9cc <_ZN4PMIC20getInputCurrentLimitEv>
 808598c:	4605      	mov	r5, r0
    Serial.printf("Old input current limit: %d\n\r", inputCurrent);
 808598e:	f006 fdcb 	bl	808c528 <_Z16_fetch_usbserialv>
 8085992:	462a      	mov	r2, r5
 8085994:	491a      	ldr	r1, [pc, #104]	; (8085a00 <_Z26serialIncreaseInputCurrentv+0x7c>)
 8085996:	f7ff fff0 	bl	808597a <_ZN5Print6printfIIiEEEjPKcDpT_>

    if(inputCurrent == 100){
        inputCurrent = 150;
    }else if(inputCurrent == 100){
 808599a:	2d64      	cmp	r5, #100	; 0x64
 808599c:	d016      	beq.n	80859cc <_Z26serialIncreaseInputCurrentv+0x48>
        inputCurrent = 150;
    }else if(inputCurrent == 150){
 808599e:	2d96      	cmp	r5, #150	; 0x96
 80859a0:	d016      	beq.n	80859d0 <_Z26serialIncreaseInputCurrentv+0x4c>
        inputCurrent = 500;
    }else if(inputCurrent == 500){
 80859a2:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 80859a6:	d016      	beq.n	80859d6 <_Z26serialIncreaseInputCurrentv+0x52>
        inputCurrent = 900;
    }else if(inputCurrent == 900){
 80859a8:	f5b5 7f61 	cmp.w	r5, #900	; 0x384
 80859ac:	d016      	beq.n	80859dc <_Z26serialIncreaseInputCurrentv+0x58>
        inputCurrent = 1200;
    }else if(inputCurrent == 1200){
 80859ae:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 80859b2:	f240 54dc 	movw	r4, #1500	; 0x5dc
 80859b6:	d016      	beq.n	80859e6 <_Z26serialIncreaseInputCurrentv+0x62>
        inputCurrent = 1500;
    }else if(inputCurrent == 1500){
 80859b8:	42a5      	cmp	r5, r4
 80859ba:	d012      	beq.n	80859e2 <_Z26serialIncreaseInputCurrentv+0x5e>
        inputCurrent = 2000;
    }else if(inputCurrent == 2000){
        inputCurrent = 3000;
 80859bc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80859c0:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 80859c4:	bf14      	ite	ne
 80859c6:	462c      	movne	r4, r5
 80859c8:	4614      	moveq	r4, r2
 80859ca:	e00c      	b.n	80859e6 <_Z26serialIncreaseInputCurrentv+0x62>
    Serial.printf("Old input current limit: %d\n\r", inputCurrent);

    if(inputCurrent == 100){
        inputCurrent = 150;
    }else if(inputCurrent == 100){
        inputCurrent = 150;
 80859cc:	2496      	movs	r4, #150	; 0x96
 80859ce:	e00a      	b.n	80859e6 <_Z26serialIncreaseInputCurrentv+0x62>
    }else if(inputCurrent == 150){
        inputCurrent = 500;
 80859d0:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
 80859d4:	e007      	b.n	80859e6 <_Z26serialIncreaseInputCurrentv+0x62>
    }else if(inputCurrent == 500){
        inputCurrent = 900;
 80859d6:	f44f 7461 	mov.w	r4, #900	; 0x384
 80859da:	e004      	b.n	80859e6 <_Z26serialIncreaseInputCurrentv+0x62>
    }else if(inputCurrent == 900){
        inputCurrent = 1200;
 80859dc:	f44f 6496 	mov.w	r4, #1200	; 0x4b0
 80859e0:	e001      	b.n	80859e6 <_Z26serialIncreaseInputCurrentv+0x62>
    }else if(inputCurrent == 1200){
        inputCurrent = 1500;
    }else if(inputCurrent == 1500){
        inputCurrent = 2000;
 80859e2:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
    }else if(inputCurrent == 2000){
        inputCurrent = 3000;
    }
    //delay(2000);
    pmic.setInputCurrentLimit(inputCurrent);
 80859e6:	b2a1      	uxth	r1, r4
 80859e8:	4804      	ldr	r0, [pc, #16]	; (80859fc <_Z26serialIncreaseInputCurrentv+0x78>)
 80859ea:	f005 f827 	bl	808aa3c <_ZN4PMIC20setInputCurrentLimitEt>
    Serial.printf("New input current limit: %d\n\r", inputCurrent);
 80859ee:	f006 fd9b 	bl	808c528 <_Z16_fetch_usbserialv>
 80859f2:	4622      	mov	r2, r4
 80859f4:	4903      	ldr	r1, [pc, #12]	; (8085a04 <_Z26serialIncreaseInputCurrentv+0x80>)
 80859f6:	f7ff ffc0 	bl	808597a <_ZN5Print6printfIIiEEEjPKcDpT_>
 80859fa:	bd38      	pop	{r3, r4, r5, pc}
 80859fc:	20000aec 	.word	0x20000aec
 8085a00:	080931fe 	.word	0x080931fe
 8085a04:	0809321c 	.word	0x0809321c

08085a08 <_Z27serialIncreaseChargeCurrentv>:
}

void serialIncreaseChargeCurrent(void){
 8085a08:	b5f0      	push	{r4, r5, r6, r7, lr}
    bool bit5 = 0;
    bool bit4 = 0;
    bool bit3 = 0;
    bool bit2 = 0;

    byte chargeCurrent = pmic.getChargeCurrent();
 8085a0a:	4833      	ldr	r0, [pc, #204]	; (8085ad8 <_Z27serialIncreaseChargeCurrentv+0xd0>)
    //delay(2000);
    pmic.setInputCurrentLimit(inputCurrent);
    Serial.printf("New input current limit: %d\n\r", inputCurrent);
}

void serialIncreaseChargeCurrent(void){
 8085a0c:	b085      	sub	sp, #20
    bool bit5 = 0;
    bool bit4 = 0;
    bool bit3 = 0;
    bool bit2 = 0;

    byte chargeCurrent = pmic.getChargeCurrent();
 8085a0e:	f004 ffe9 	bl	808a9e4 <_ZN4PMIC16getChargeCurrentEv>
 8085a12:	4605      	mov	r5, r0
    //bit 7
    if(chargeCurrent & 0x80){
        total_current += 2048;
 8085a14:	f010 0f80 	tst.w	r0, #128	; 0x80
 8085a18:	bf0c      	ite	eq
 8085a1a:	2400      	moveq	r4, #0
 8085a1c:	f44f 6400 	movne.w	r4, #2048	; 0x800
    }
    //bit 6
    if(chargeCurrent & 0x40){
 8085a20:	0647      	lsls	r7, r0, #25
        total_current += 1024;
 8085a22:	bf48      	it	mi
 8085a24:	f504 6480 	addmi.w	r4, r4, #1024	; 0x400
    }
    //bit 5
    if(chargeCurrent & 0x20){
 8085a28:	0686      	lsls	r6, r0, #26
        total_current += 512;
 8085a2a:	bf48      	it	mi
 8085a2c:	f504 7400 	addmi.w	r4, r4, #512	; 0x200
    }
    //bit 4
    if(chargeCurrent & 0x10){
 8085a30:	06e8      	lsls	r0, r5, #27
        total_current += 256;
 8085a32:	bf48      	it	mi
 8085a34:	f504 7480 	addmi.w	r4, r4, #256	; 0x100
    }
    //bit 3
    if(chargeCurrent & 0x08){
 8085a38:	0729      	lsls	r1, r5, #28
        total_current += 128;
 8085a3a:	bf48      	it	mi
 8085a3c:	3480      	addmi	r4, #128	; 0x80
    }
    //bit 2
    if(chargeCurrent & 0x04){
 8085a3e:	076a      	lsls	r2, r5, #29
        total_current += 64;
 8085a40:	bf48      	it	mi
 8085a42:	3440      	addmi	r4, #64	; 0x40
    }
    Serial.printf("Increasing Charge current from %d mA to ", total_current);
 8085a44:	f006 fd70 	bl	808c528 <_Z16_fetch_usbserialv>
 8085a48:	4622      	mov	r2, r4
 8085a4a:	4924      	ldr	r1, [pc, #144]	; (8085adc <_Z27serialIncreaseChargeCurrentv+0xd4>)
 8085a4c:	f7ff ff95 	bl	808597a <_ZN5Print6printfIIiEEEjPKcDpT_>
    chargeCurrent += 4;
 8085a50:	1d28      	adds	r0, r5, #4
 8085a52:	b2c0      	uxtb	r0, r0
    total_current = 0;

    if(chargeCurrent & 0x80){
 8085a54:	0603      	lsls	r3, r0, #24
    Serial.printf("New input current limit: %d\n\r", inputCurrent);
}

void serialIncreaseChargeCurrent(void){
    int total_current = 0;
    bool bit7 = 0;
 8085a56:	bf58      	it	pl
 8085a58:	2100      	movpl	r1, #0
    if(chargeCurrent & 0x80){
        total_current += 2048;
        bit7 = 1;
    }
    //bit 6
    if(chargeCurrent & 0x40){
 8085a5a:	f000 0340 	and.w	r3, r0, #64	; 0x40
    chargeCurrent += 4;
    total_current = 0;

    if(chargeCurrent & 0x80){
        total_current += 2048;
        bit7 = 1;
 8085a5e:	bf46      	itte	mi
 8085a60:	2101      	movmi	r1, #1
    Serial.printf("Increasing Charge current from %d mA to ", total_current);
    chargeCurrent += 4;
    total_current = 0;

    if(chargeCurrent & 0x80){
        total_current += 2048;
 8085a62:	f44f 6400 	movmi.w	r4, #2048	; 0x800
    if(chargeCurrent & 0x04){
        total_current += 64;
    }
    Serial.printf("Increasing Charge current from %d mA to ", total_current);
    chargeCurrent += 4;
    total_current = 0;
 8085a66:	460c      	movpl	r4, r1
    if(chargeCurrent & 0x80){
        total_current += 2048;
        bit7 = 1;
    }
    //bit 6
    if(chargeCurrent & 0x40){
 8085a68:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8085a6c:	b113      	cbz	r3, 8085a74 <_Z27serialIncreaseChargeCurrentv+0x6c>
        total_current += 1024;
 8085a6e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
        bit6 = 1;
 8085a72:	2201      	movs	r2, #1
    }
    //bit 5
    if(chargeCurrent & 0x20){
 8085a74:	f000 0520 	and.w	r5, r0, #32
 8085a78:	f005 03ff 	and.w	r3, r5, #255	; 0xff
 8085a7c:	b115      	cbz	r5, 8085a84 <_Z27serialIncreaseChargeCurrentv+0x7c>
        total_current += 512;
 8085a7e:	f504 7400 	add.w	r4, r4, #512	; 0x200
        bit5 = 1;
 8085a82:	2301      	movs	r3, #1
    }
    //bit 4
    if(chargeCurrent & 0x10){
 8085a84:	f000 0610 	and.w	r6, r0, #16
 8085a88:	f006 05ff 	and.w	r5, r6, #255	; 0xff
 8085a8c:	b116      	cbz	r6, 8085a94 <_Z27serialIncreaseChargeCurrentv+0x8c>
        total_current += 256;
 8085a8e:	f504 7480 	add.w	r4, r4, #256	; 0x100
        bit4 = 1;
 8085a92:	2501      	movs	r5, #1
    }
    //bit 3
    if(chargeCurrent & 0x08){
 8085a94:	f000 0708 	and.w	r7, r0, #8
 8085a98:	f007 06ff 	and.w	r6, r7, #255	; 0xff
 8085a9c:	b10f      	cbz	r7, 8085aa2 <_Z27serialIncreaseChargeCurrentv+0x9a>
        total_current += 128;
 8085a9e:	3480      	adds	r4, #128	; 0x80
        bit3 = 1;
 8085aa0:	2601      	movs	r6, #1
    }
    //bit 2
    if(chargeCurrent & 0x04){
 8085aa2:	f000 0004 	and.w	r0, r0, #4
 8085aa6:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 8085aaa:	b110      	cbz	r0, 8085ab2 <_Z27serialIncreaseChargeCurrentv+0xaa>
        total_current += 64;
 8085aac:	3440      	adds	r4, #64	; 0x40
        bit2 = 1;
 8085aae:	2001      	movs	r0, #1
 8085ab0:	e000      	b.n	8085ab4 <_Z27serialIncreaseChargeCurrentv+0xac>
    bool bit7 = 0;
    bool bit6 = 0;
    bool bit5 = 0;
    bool bit4 = 0;
    bool bit3 = 0;
    bool bit2 = 0;
 8085ab2:	4638      	mov	r0, r7
    if(chargeCurrent & 0x04){
        total_current += 64;
        bit2 = 1;
    }

    pmic.setChargeCurrent(bit7, bit6, bit5, bit4, bit3, bit2);
 8085ab4:	9002      	str	r0, [sp, #8]
 8085ab6:	e88d 0060 	stmia.w	sp, {r5, r6}
 8085aba:	4807      	ldr	r0, [pc, #28]	; (8085ad8 <_Z27serialIncreaseChargeCurrentv+0xd0>)
 8085abc:	f005 f821 	bl	808ab02 <_ZN4PMIC16setChargeCurrentEbbbbbb>
    chargeCurrent = pmic.getChargeCurrent();
 8085ac0:	4805      	ldr	r0, [pc, #20]	; (8085ad8 <_Z27serialIncreaseChargeCurrentv+0xd0>)
 8085ac2:	f004 ff8f 	bl	808a9e4 <_ZN4PMIC16getChargeCurrentEv>
    Serial.printf("new charge current of %d mA\n\r", total_current);
 8085ac6:	f006 fd2f 	bl	808c528 <_Z16_fetch_usbserialv>
 8085aca:	4622      	mov	r2, r4
 8085acc:	4904      	ldr	r1, [pc, #16]	; (8085ae0 <_Z27serialIncreaseChargeCurrentv+0xd8>)
 8085ace:	f7ff ff54 	bl	808597a <_ZN5Print6printfIIiEEEjPKcDpT_>
}
 8085ad2:	b005      	add	sp, #20
 8085ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8085ad6:	bf00      	nop
 8085ad8:	20000aec 	.word	0x20000aec
 8085adc:	0809323a 	.word	0x0809323a
 8085ae0:	08093263 	.word	0x08093263
 8085ae4:	00000000 	.word	0x00000000

08085ae8 <_Z10readAlpha1v>:
    CO2_float *= CO2_slope;
    CO2_float += CO2_zero;
    
    return CO2_float;
}
float readAlpha1(void){
 8085ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    float sensorCurrent; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent;
    float correctedCurrent;
    float alpha1_ppmraw;
    String alpha1_ppmRounded;
    if(debugging_enabled){
 8085aec:	4da2      	ldr	r5, [pc, #648]	; (8085d78 <_Z10readAlpha1v+0x290>)
    CO2_float *= CO2_slope;
    CO2_float += CO2_zero;
    
    return CO2_float;
}
float readAlpha1(void){
 8085aee:	b08b      	sub	sp, #44	; 0x2c
    float volt_half_Vref;
    float sensorCurrent; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent;
    float correctedCurrent;
    float alpha1_ppmraw;
    String alpha1_ppmRounded;
 8085af0:	49a2      	ldr	r1, [pc, #648]	; (8085d7c <_Z10readAlpha1v+0x294>)
 8085af2:	a802      	add	r0, sp, #8
 8085af4:	f005 fa45 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
    if(debugging_enabled){
 8085af8:	682b      	ldr	r3, [r5, #0]
 8085afa:	b123      	cbz	r3, 8085b06 <_Z10readAlpha1v+0x1e>
        Serial.println("Start of alpha read");
 8085afc:	f006 fd14 	bl	808c528 <_Z16_fetch_usbserialv>
 8085b00:	499f      	ldr	r1, [pc, #636]	; (8085d80 <_Z10readAlpha1v+0x298>)
 8085b02:	f005 fc6a 	bl	808b3da <_ZN5Print7printlnEPKc>
    }
    digitalWrite(lmp91000_1_en, LOW);   //enable
 8085b06:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8085dd8 <_Z10readAlpha1v+0x2f0>
 8085b0a:	2100      	movs	r1, #0
 8085b0c:	f8b9 0000 	ldrh.w	r0, [r9]
 8085b10:	f007 f853 	bl	808cbba <digitalWrite>

    if(Wire.requestFrom(0x49,1) == 0){
 8085b14:	f007 f8ee 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8085b18:	2201      	movs	r2, #1
 8085b1a:	2149      	movs	r1, #73	; 0x49
 8085b1c:	f006 feb2 	bl	808c884 <_ZN7TwoWire11requestFromEii>
 8085b20:	f8cd 9004 	str.w	r9, [sp, #4]
 8085b24:	b948      	cbnz	r0, 8085b3a <_Z10readAlpha1v+0x52>
      if(debugging_enabled){
 8085b26:	682b      	ldr	r3, [r5, #0]
 8085b28:	2b00      	cmp	r3, #0
 8085b2a:	d039      	beq.n	8085ba0 <_Z10readAlpha1v+0xb8>
        Serial.println("Couldn't communicate with LMP91000");
 8085b2c:	f006 fcfc 	bl	808c528 <_Z16_fetch_usbserialv>
 8085b30:	4994      	ldr	r1, [pc, #592]	; (8085d84 <_Z10readAlpha1v+0x29c>)
 8085b32:	f005 fc52 	bl	808b3da <_ZN5Print7printlnEPKc>
        writeLogFile("Couldn't communicate with LMP91000");
 8085b36:	4993      	ldr	r1, [pc, #588]	; (8085d84 <_Z10readAlpha1v+0x29c>)
 8085b38:	e029      	b.n	8085b8e <_Z10readAlpha1v+0xa6>
        //digitalWrite(red_status_led, HIGH);
        //delay(200);
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }else{
        half_Vref = ads1.readADC_SingleEnded(3); //half of Vref
 8085b3a:	2103      	movs	r1, #3
 8085b3c:	4892      	ldr	r0, [pc, #584]	; (8085d88 <_Z10readAlpha1v+0x2a0>)
 8085b3e:	f001 fa8e 	bl	808705e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
 8085b42:	4604      	mov	r4, r0
        volt_half_Vref = half_Vref * ads_bitmv;
        if(abs((volt_half_Vref)/1000 - 1.25) > 0.5){
 8085b44:	f008 f822 	bl	808db8c <__aeabi_i2f>
        //delay(200);
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }else{
        half_Vref = ads1.readADC_SingleEnded(3); //half of Vref
        volt_half_Vref = half_Vref * ads_bitmv;
 8085b48:	4b90      	ldr	r3, [pc, #576]	; (8085d8c <_Z10readAlpha1v+0x2a4>)
        if(abs((volt_half_Vref)/1000 - 1.25) > 0.5){
 8085b4a:	6819      	ldr	r1, [r3, #0]
 8085b4c:	f008 f872 	bl	808dc34 <__aeabi_fmul>
 8085b50:	498f      	ldr	r1, [pc, #572]	; (8085d90 <_Z10readAlpha1v+0x2a8>)
 8085b52:	f008 f923 	bl	808dd9c <__aeabi_fdiv>
 8085b56:	4681      	mov	r9, r0
 8085b58:	f007 fbc2 	bl	808d2e0 <__aeabi_f2d>
 8085b5c:	2200      	movs	r2, #0
 8085b5e:	4b8d      	ldr	r3, [pc, #564]	; (8085d94 <_Z10readAlpha1v+0x2ac>)
 8085b60:	f007 fa5e 	bl	808d020 <__aeabi_dsub>
 8085b64:	f007 fec0 	bl	808d8e8 <__aeabi_d2iz>
 8085b68:	2800      	cmp	r0, #0
 8085b6a:	bfb8      	it	lt
 8085b6c:	4240      	neglt	r0, r0
 8085b6e:	f007 fba5 	bl	808d2bc <__aeabi_i2d>
 8085b72:	2200      	movs	r2, #0
 8085b74:	4b88      	ldr	r3, [pc, #544]	; (8085d98 <_Z10readAlpha1v+0x2b0>)
 8085b76:	f007 fe97 	bl	808d8a8 <__aeabi_dcmpgt>
 8085b7a:	b188      	cbz	r0, 8085ba0 <_Z10readAlpha1v+0xb8>
          if(debugging_enabled){
 8085b7c:	682b      	ldr	r3, [r5, #0]
 8085b7e:	b17b      	cbz	r3, 8085ba0 <_Z10readAlpha1v+0xb8>
            Serial.printf("Halfvolt: %1.2f\n\r", volt_half_Vref/1000);
 8085b80:	f006 fcd2 	bl	808c528 <_Z16_fetch_usbserialv>
 8085b84:	4985      	ldr	r1, [pc, #532]	; (8085d9c <_Z10readAlpha1v+0x2b4>)
 8085b86:	464a      	mov	r2, r9
 8085b88:	f7ff fee8 	bl	808595c <_ZN5Print6printfIIfEEEjPKcDpT_>
            writeLogFile("Halfvolt higher than 0.5");
 8085b8c:	4984      	ldr	r1, [pc, #528]	; (8085da0 <_Z10readAlpha1v+0x2b8>)
 8085b8e:	a806      	add	r0, sp, #24
 8085b90:	f005 f9f7 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
 8085b94:	a806      	add	r0, sp, #24
 8085b96:	f7fc f8bb 	bl	8081d10 <_Z12writeLogFile6String>
 8085b9a:	a806      	add	r0, sp, #24
 8085b9c:	f005 f9aa 	bl	808aef4 <_ZN6StringD1Ev>
          }
        }
    }

    if(lmp91000.read(LMP91000_STATUS_REG) == 0){
 8085ba0:	2100      	movs	r1, #0
 8085ba2:	4880      	ldr	r0, [pc, #512]	; (8085da4 <_Z10readAlpha1v+0x2bc>)
 8085ba4:	f001 f905 	bl	8086db2 <_ZN8LMP910004readEh>
 8085ba8:	b980      	cbnz	r0, 8085bcc <_Z10readAlpha1v+0xe4>
        if(debugging_enabled){
 8085baa:	682b      	ldr	r3, [r5, #0]
 8085bac:	b173      	cbz	r3, 8085bcc <_Z10readAlpha1v+0xe4>
            Serial.println("Status = 0 from LMP91000 status reg");
 8085bae:	f006 fcbb 	bl	808c528 <_Z16_fetch_usbserialv>
 8085bb2:	497d      	ldr	r1, [pc, #500]	; (8085da8 <_Z10readAlpha1v+0x2c0>)
 8085bb4:	f005 fc11 	bl	808b3da <_ZN5Print7printlnEPKc>
            writeLogFile("LMP1000 status = 0");
 8085bb8:	497c      	ldr	r1, [pc, #496]	; (8085dac <_Z10readAlpha1v+0x2c4>)
 8085bba:	a806      	add	r0, sp, #24
 8085bbc:	f005 f9e1 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
 8085bc0:	a806      	add	r0, sp, #24
 8085bc2:	f7fc f8a5 	bl	8081d10 <_Z12writeLogFile6String>
 8085bc6:	a806      	add	r0, sp, #24
 8085bc8:	f005 f994 	bl	808aef4 <_ZN6StringD1Ev>
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }

    //if(Wire.requestFrom(0x49,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref)/1000 - 1.25) > 0.5)){
    if(Wire.requestFrom(0x49,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0){
 8085bcc:	f007 f892 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8085bd0:	2201      	movs	r2, #1
 8085bd2:	2149      	movs	r1, #73	; 0x49
 8085bd4:	f006 fe56 	bl	808c884 <_ZN7TwoWire11requestFromEii>
 8085bd8:	2800      	cmp	r0, #0
 8085bda:	f000 80b9 	beq.w	8085d50 <_Z10readAlpha1v+0x268>
 8085bde:	2100      	movs	r1, #0
 8085be0:	4870      	ldr	r0, [pc, #448]	; (8085da4 <_Z10readAlpha1v+0x2bc>)
 8085be2:	f001 f8e6 	bl	8086db2 <_ZN8LMP910004readEh>
 8085be6:	2800      	cmp	r0, #0
 8085be8:	f000 80b2 	beq.w	8085d50 <_Z10readAlpha1v+0x268>
 8085bec:	2400      	movs	r4, #0
 8085bee:	46a2      	mov	sl, r4
 8085bf0:	4627      	mov	r7, r4
 8085bf2:	4626      	mov	r6, r4
 8085bf4:	f04f 080a 	mov.w	r8, #10
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
          A0_gas += ads1.readADC_SingleEnded(0); //gas
 8085bf8:	2100      	movs	r1, #0
 8085bfa:	4863      	ldr	r0, [pc, #396]	; (8085d88 <_Z10readAlpha1v+0x2a0>)
 8085bfc:	f001 fa2f 	bl	808705e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
 8085c00:	2101      	movs	r1, #1
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
          A0_gas += ads1.readADC_SingleEnded(0); //gas
 8085c02:	4406      	add	r6, r0
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
 8085c04:	4860      	ldr	r0, [pc, #384]	; (8085d88 <_Z10readAlpha1v+0x2a0>)
 8085c06:	f001 fa2a 	bl	808705e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
 8085c0a:	2102      	movs	r1, #2
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
          A0_gas += ads1.readADC_SingleEnded(0); //gas
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
 8085c0c:	4407      	add	r7, r0
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
 8085c0e:	485e      	ldr	r0, [pc, #376]	; (8085d88 <_Z10readAlpha1v+0x2a0>)
 8085c10:	f001 fa25 	bl	808705e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
 8085c14:	2103      	movs	r1, #3
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
          A0_gas += ads1.readADC_SingleEnded(0); //gas
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
 8085c16:	4482      	add	sl, r0
          half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
 8085c18:	485b      	ldr	r0, [pc, #364]	; (8085d88 <_Z10readAlpha1v+0x2a0>)
 8085c1a:	f001 fa20 	bl	808705e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
    }else{
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
 8085c1e:	f1b8 0801 	subs.w	r8, r8, #1
          A0_gas += ads1.readADC_SingleEnded(0); //gas
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
          half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
 8085c22:	4404      	add	r4, r0
    }else{
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
 8085c24:	d1e8      	bne.n	8085bf8 <_Z10readAlpha1v+0x110>
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
          half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
        }

        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
 8085c26:	230a      	movs	r3, #10
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;
 8085c28:	fb94 f4f3 	sdiv	r4, r4, r3
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
          half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
        }

        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
 8085c2c:	fb96 f6f3 	sdiv	r6, r6, r3
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
 8085c30:	fb97 f7f3 	sdiv	r7, r7, r3
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
 8085c34:	fb9a faf3 	sdiv	sl, sl, r3
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;

        volt0_gas = A0_gas * ads_bitmv;
 8085c38:	4b54      	ldr	r3, [pc, #336]	; (8085d8c <_Z10readAlpha1v+0x2a4>)
        volt1_aux = A1_aux * ads_bitmv;
        volt2_temperature = A2_temperature * ads_bitmv;
        volt_half_Vref = half_Vref * ads_bitmv;
 8085c3a:	4620      	mov	r0, r4
        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;

        volt0_gas = A0_gas * ads_bitmv;
 8085c3c:	f8d3 8000 	ldr.w	r8, [r3]
        volt1_aux = A1_aux * ads_bitmv;
        volt2_temperature = A2_temperature * ads_bitmv;
        volt_half_Vref = half_Vref * ads_bitmv;
 8085c40:	f007 ffa4 	bl	808db8c <__aeabi_i2f>
 8085c44:	4641      	mov	r1, r8
 8085c46:	f007 fff5 	bl	808dc34 <__aeabi_fmul>
 8085c4a:	4681      	mov	r9, r0

        sensorCurrent = (volt_half_Vref - volt0_gas) / (-1*120); // Working Electrode current in microamps (millivolts / Kohms)
 8085c4c:	4630      	mov	r0, r6
 8085c4e:	f007 ff9d 	bl	808db8c <__aeabi_i2f>
 8085c52:	4641      	mov	r1, r8
 8085c54:	f007 ffee 	bl	808dc34 <__aeabi_fmul>
 8085c58:	4601      	mov	r1, r0
 8085c5a:	4648      	mov	r0, r9
 8085c5c:	f007 fee0 	bl	808da20 <__aeabi_fsub>
 8085c60:	4953      	ldr	r1, [pc, #332]	; (8085db0 <_Z10readAlpha1v+0x2c8>)
 8085c62:	f008 f89b 	bl	808dd9c <__aeabi_fdiv>
 8085c66:	4683      	mov	fp, r0
        auxCurrent = (volt_half_Vref - volt1_aux) / (-1*150);
 8085c68:	4638      	mov	r0, r7
 8085c6a:	f007 ff8f 	bl	808db8c <__aeabi_i2f>
 8085c6e:	4641      	mov	r1, r8
 8085c70:	f007 ffe0 	bl	808dc34 <__aeabi_fmul>
 8085c74:	4601      	mov	r1, r0
 8085c76:	4648      	mov	r0, r9
 8085c78:	f007 fed2 	bl	808da20 <__aeabi_fsub>
 8085c7c:	494d      	ldr	r1, [pc, #308]	; (8085db4 <_Z10readAlpha1v+0x2cc>)
 8085c7e:	f008 f88d 	bl	808dd9c <__aeabi_fdiv>
 8085c82:	4680      	mov	r8, r0
        //{1, -1, -0.76}, //CO-A4 (<=10C, 20C, >=30C)
        if(readTemperature() <= 15){
 8085c84:	f7fb fcb4 	bl	80815f0 <_Z15readTemperaturev>
 8085c88:	494b      	ldr	r1, [pc, #300]	; (8085db8 <_Z10readAlpha1v+0x2d0>)
 8085c8a:	f008 f97b 	bl	808df84 <__aeabi_fcmple>
 8085c8e:	b120      	cbz	r0, 8085c9a <_Z10readAlpha1v+0x1b2>
          correctedCurrent = ((sensorCurrent) - (auxCurrent));
 8085c90:	4641      	mov	r1, r8
 8085c92:	4658      	mov	r0, fp
 8085c94:	f007 fec4 	bl	808da20 <__aeabi_fsub>
 8085c98:	e01f      	b.n	8085cda <_Z10readAlpha1v+0x1f2>
        }
        else if(readTemperature() <= 25){
 8085c9a:	f7fb fca9 	bl	80815f0 <_Z15readTemperaturev>
 8085c9e:	4947      	ldr	r1, [pc, #284]	; (8085dbc <_Z10readAlpha1v+0x2d4>)
 8085ca0:	f008 f970 	bl	808df84 <__aeabi_fcmple>
 8085ca4:	b120      	cbz	r0, 8085cb0 <_Z10readAlpha1v+0x1c8>
          correctedCurrent = ((sensorCurrent) - (-1)*(auxCurrent));
 8085ca6:	4641      	mov	r1, r8
 8085ca8:	4658      	mov	r0, fp
 8085caa:	f007 febb 	bl	808da24 <__addsf3>
 8085cae:	e014      	b.n	8085cda <_Z10readAlpha1v+0x1f2>
        }
        else{
          correctedCurrent = ((sensorCurrent) - (-0.76)*(auxCurrent));
 8085cb0:	4640      	mov	r0, r8
 8085cb2:	f007 fb15 	bl	808d2e0 <__aeabi_f2d>
 8085cb6:	a32c      	add	r3, pc, #176	; (adr r3, 8085d68 <_Z10readAlpha1v+0x280>)
 8085cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8085cbc:	f007 fb64 	bl	808d388 <__aeabi_dmul>
 8085cc0:	4680      	mov	r8, r0
 8085cc2:	4658      	mov	r0, fp
 8085cc4:	4689      	mov	r9, r1
 8085cc6:	f007 fb0b 	bl	808d2e0 <__aeabi_f2d>
 8085cca:	4602      	mov	r2, r0
 8085ccc:	460b      	mov	r3, r1
 8085cce:	4640      	mov	r0, r8
 8085cd0:	4649      	mov	r1, r9
 8085cd2:	f007 f9a7 	bl	808d024 <__adddf3>
 8085cd6:	f007 fe4f 	bl	808d978 <__aeabi_d2f>
        }
        alpha1_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 8085cda:	f007 fb01 	bl	808d2e0 <__aeabi_f2d>
 8085cde:	a324      	add	r3, pc, #144	; (adr r3, 8085d70 <_Z10readAlpha1v+0x288>)
 8085ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8085ce4:	f007 fc7a 	bl	808d5dc <__aeabi_ddiv>
 8085ce8:	f007 fe46 	bl	808d978 <__aeabi_d2f>
        alpha1_ppmRounded = String(alpha1_ppmraw, 2);
 8085cec:	2202      	movs	r2, #2
 8085cee:	4601      	mov	r1, r0
          correctedCurrent = ((sensorCurrent) - (-1)*(auxCurrent));
        }
        else{
          correctedCurrent = ((sensorCurrent) - (-0.76)*(auxCurrent));
        }
        alpha1_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 8085cf0:	4680      	mov	r8, r0
        alpha1_ppmRounded = String(alpha1_ppmraw, 2);
 8085cf2:	a806      	add	r0, sp, #24
 8085cf4:	f005 f9df 	bl	808b0b6 <_ZN6StringC1Efi>
 8085cf8:	a906      	add	r1, sp, #24
 8085cfa:	a802      	add	r0, sp, #8
 8085cfc:	f005 f98b 	bl	808b016 <_ZN6StringaSEOS_>
 8085d00:	a806      	add	r0, sp, #24
 8085d02:	f005 f8f7 	bl	808aef4 <_ZN6StringD1Ev>
      }

      digitalWrite(lmp91000_1_en, HIGH);  //disable
 8085d06:	9b01      	ldr	r3, [sp, #4]
 8085d08:	2101      	movs	r1, #1
 8085d0a:	8818      	ldrh	r0, [r3, #0]
 8085d0c:	f006 ff55 	bl	808cbba <digitalWrite>

      if(debugging_enabled){
 8085d10:	682b      	ldr	r3, [r5, #0]
 8085d12:	b313      	cbz	r3, 8085d5a <_Z10readAlpha1v+0x272>
          Serial.print("CO measurements:  \n\r");
 8085d14:	f006 fc08 	bl	808c528 <_Z16_fetch_usbserialv>
 8085d18:	4929      	ldr	r1, [pc, #164]	; (8085dc0 <_Z10readAlpha1v+0x2d8>)
 8085d1a:	f005 fb4b 	bl	808b3b4 <_ZN5Print5printEPKc>
          Serial.printf("A0_gas: %d\n\r", A0_gas);
 8085d1e:	f006 fc03 	bl	808c528 <_Z16_fetch_usbserialv>
 8085d22:	4632      	mov	r2, r6
 8085d24:	4927      	ldr	r1, [pc, #156]	; (8085dc4 <_Z10readAlpha1v+0x2dc>)
 8085d26:	f7ff fe28 	bl	808597a <_ZN5Print6printfIIiEEEjPKcDpT_>
          Serial.printf("A1_aux: %d\n\r", A1_aux);
 8085d2a:	f006 fbfd 	bl	808c528 <_Z16_fetch_usbserialv>
 8085d2e:	463a      	mov	r2, r7
 8085d30:	4925      	ldr	r1, [pc, #148]	; (8085dc8 <_Z10readAlpha1v+0x2e0>)
 8085d32:	f7ff fe22 	bl	808597a <_ZN5Print6printfIIiEEEjPKcDpT_>
          Serial.printf("A2_temp: %d\n\r", A2_temperature);
 8085d36:	f006 fbf7 	bl	808c528 <_Z16_fetch_usbserialv>
 8085d3a:	4652      	mov	r2, sl
 8085d3c:	4923      	ldr	r1, [pc, #140]	; (8085dcc <_Z10readAlpha1v+0x2e4>)
 8085d3e:	f7ff fe1c 	bl	808597a <_ZN5Print6printfIIiEEEjPKcDpT_>
          Serial.printf("half_vref: %d\n\r", half_Vref);
 8085d42:	f006 fbf1 	bl	808c528 <_Z16_fetch_usbserialv>
 8085d46:	4622      	mov	r2, r4
 8085d48:	4921      	ldr	r1, [pc, #132]	; (8085dd0 <_Z10readAlpha1v+0x2e8>)
 8085d4a:	f7ff fe16 	bl	808597a <_ZN5Print6printfIIiEEEjPKcDpT_>
 8085d4e:	e004      	b.n	8085d5a <_Z10readAlpha1v+0x272>
        //delay(200);
    }

    //if(Wire.requestFrom(0x49,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref)/1000 - 1.25) > 0.5)){
    if(Wire.requestFrom(0x49,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0){
        alpha1_ppmRounded = "-99";
 8085d50:	4920      	ldr	r1, [pc, #128]	; (8085dd4 <_Z10readAlpha1v+0x2ec>)
 8085d52:	a802      	add	r0, sp, #8
 8085d54:	f005 f967 	bl	808b026 <_ZN6StringaSEPKc>
 8085d58:	e7d5      	b.n	8085d06 <_Z10readAlpha1v+0x21e>
    float volt_half_Vref;
    float sensorCurrent; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent;
    float correctedCurrent;
    float alpha1_ppmraw;
    String alpha1_ppmRounded;
 8085d5a:	a802      	add	r0, sp, #8
 8085d5c:	f005 f8ca 	bl	808aef4 <_ZN6StringD1Ev>
          Serial.printf("A2_temp: %d\n\r", A2_temperature);
          Serial.printf("half_vref: %d\n\r", half_Vref);

      }
      return alpha1_ppmraw;
}
 8085d60:	4640      	mov	r0, r8
 8085d62:	b00b      	add	sp, #44	; 0x2c
 8085d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8085d68:	851eb852 	.word	0x851eb852
 8085d6c:	3fe851eb 	.word	0x3fe851eb
 8085d70:	d4fdf3b6 	.word	0xd4fdf3b6
 8085d74:	3fd6e978 	.word	0x3fd6e978
 8085d78:	20000b10 	.word	0x20000b10
 8085d7c:	08094100 	.word	0x08094100
 8085d80:	08093281 	.word	0x08093281
 8085d84:	08093295 	.word	0x08093295
 8085d88:	20000a54 	.word	0x20000a54
 8085d8c:	200000ac 	.word	0x200000ac
 8085d90:	447a0000 	.word	0x447a0000
 8085d94:	3ff40000 	.word	0x3ff40000
 8085d98:	3fe00000 	.word	0x3fe00000
 8085d9c:	080932b8 	.word	0x080932b8
 8085da0:	080932ca 	.word	0x080932ca
 8085da4:	2000022c 	.word	0x2000022c
 8085da8:	080932e3 	.word	0x080932e3
 8085dac:	08093307 	.word	0x08093307
 8085db0:	c2f00000 	.word	0xc2f00000
 8085db4:	c3160000 	.word	0xc3160000
 8085db8:	41700000 	.word	0x41700000
 8085dbc:	41c80000 	.word	0x41c80000
 8085dc0:	0809331a 	.word	0x0809331a
 8085dc4:	0809332f 	.word	0x0809332f
 8085dc8:	0809333c 	.word	0x0809333c
 8085dcc:	08093349 	.word	0x08093349
 8085dd0:	08093357 	.word	0x08093357
 8085dd4:	08091905 	.word	0x08091905
 8085dd8:	200000a4 	.word	0x200000a4

08085ddc <_Z6readCOv>:
    sum /= 4095;
    sum *= 100;
    return sum;
}
//read Carbon monoxide alphasense sensor
float readCO(void){
 8085ddc:	b570      	push	{r4, r5, r6, lr}
    float float_offset;

    if(CO_socket == 0){
 8085dde:	4b0f      	ldr	r3, [pc, #60]	; (8085e1c <_Z6readCOv+0x40>)
 8085de0:	4c0f      	ldr	r4, [pc, #60]	; (8085e20 <_Z6readCOv+0x44>)
 8085de2:	681b      	ldr	r3, [r3, #0]
 8085de4:	b913      	cbnz	r3, 8085dec <_Z6readCOv+0x10>
        CO_float = readAlpha1();
 8085de6:	f7ff fe7f 	bl	8085ae8 <_Z10readAlpha1v>
 8085dea:	e001      	b.n	8085df0 <_Z6readCOv+0x14>
    }else{
        CO_float = readAlpha2();
 8085dec:	f7fb fe40 	bl	8081a70 <_Z10readAlpha2v>
    }

    float_offset = CO_zero;
 8085df0:	4b0c      	ldr	r3, [pc, #48]	; (8085e24 <_Z6readCOv+0x48>)
    float float_offset;

    if(CO_socket == 0){
        CO_float = readAlpha1();
    }else{
        CO_float = readAlpha2();
 8085df2:	6020      	str	r0, [r4, #0]
    }

    float_offset = CO_zero;
 8085df4:	6818      	ldr	r0, [r3, #0]
 8085df6:	f007 fec9 	bl	808db8c <__aeabi_i2f>
    float_offset /= 1000;

    CO_float *= CO_slope;
 8085dfa:	4b0b      	ldr	r3, [pc, #44]	; (8085e28 <_Z6readCOv+0x4c>)
        CO_float = readAlpha1();
    }else{
        CO_float = readAlpha2();
    }

    float_offset = CO_zero;
 8085dfc:	4606      	mov	r6, r0
    float_offset /= 1000;

    CO_float *= CO_slope;
    CO_float += float_offset;
 8085dfe:	6819      	ldr	r1, [r3, #0]
 8085e00:	6820      	ldr	r0, [r4, #0]
 8085e02:	f007 ff17 	bl	808dc34 <__aeabi_fmul>
 8085e06:	4909      	ldr	r1, [pc, #36]	; (8085e2c <_Z6readCOv+0x50>)
 8085e08:	4605      	mov	r5, r0
 8085e0a:	4630      	mov	r0, r6
 8085e0c:	f007 ffc6 	bl	808dd9c <__aeabi_fdiv>
 8085e10:	4601      	mov	r1, r0
 8085e12:	4628      	mov	r0, r5
 8085e14:	f007 fe06 	bl	808da24 <__addsf3>
 8085e18:	6020      	str	r0, [r4, #0]

    return CO_float;
}
 8085e1a:	bd70      	pop	{r4, r5, r6, pc}
 8085e1c:	200006fc 	.word	0x200006fc
 8085e20:	20000b1c 	.word	0x20000b1c
 8085e24:	200007f8 	.word	0x200007f8
 8085e28:	200001e8 	.word	0x200001e8
 8085e2c:	447a0000 	.word	0x447a0000

08085e30 <_Z20readAlpha1Constantlyv>:
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}

void readAlpha1Constantly(void){
 8085e30:	b510      	push	{r4, lr}
    while(!Serial.available()){
        CO_float = readCO();
 8085e32:	4c09      	ldr	r4, [pc, #36]	; (8085e58 <_Z20readAlpha1Constantlyv+0x28>)
        Serial.println("\n\rIncorrect password!");
    }
}

void readAlpha1Constantly(void){
    while(!Serial.available()){
 8085e34:	f006 fb78 	bl	808c528 <_Z16_fetch_usbserialv>
 8085e38:	6803      	ldr	r3, [r0, #0]
 8085e3a:	691b      	ldr	r3, [r3, #16]
 8085e3c:	4798      	blx	r3
 8085e3e:	b948      	cbnz	r0, 8085e54 <_Z20readAlpha1Constantlyv+0x24>
        CO_float = readCO();
 8085e40:	f7ff ffcc 	bl	8085ddc <_Z6readCOv>
 8085e44:	6020      	str	r0, [r4, #0]
        Serial.printf("CO: %1.3f ppm\n\r", CO_float);
 8085e46:	f006 fb6f 	bl	808c528 <_Z16_fetch_usbserialv>
 8085e4a:	6822      	ldr	r2, [r4, #0]
 8085e4c:	4903      	ldr	r1, [pc, #12]	; (8085e5c <_Z20readAlpha1Constantlyv+0x2c>)
 8085e4e:	f7ff fd85 	bl	808595c <_ZN5Print6printfIIfEEEjPKcDpT_>
        Serial.println("\n\rIncorrect password!");
    }
}

void readAlpha1Constantly(void){
    while(!Serial.available()){
 8085e52:	e7ef      	b.n	8085e34 <_Z20readAlpha1Constantlyv+0x4>
 8085e54:	bd10      	pop	{r4, pc}
 8085e56:	bf00      	nop
 8085e58:	20000b1c 	.word	0x20000b1c
 8085e5c:	08093367 	.word	0x08093367

08085e60 <_Z10serialMenuv>:
  delay(1000);
}

/************************Serial menu stuff******************/

void serialMenu(){
 8085e60:	b5f0      	push	{r4, r5, r6, r7, lr}
  incomingByte = '0';
 8085e62:	4cac      	ldr	r4, [pc, #688]	; (8086114 <_Z10serialMenuv+0x2b4>)
 8085e64:	2330      	movs	r3, #48	; 0x30

    }else if(incomingByte == '!'){

        Serial.println("Outputting VOCs continuously!  Press any button to exit...");
        while(!Serial.available()){
            if (! bme.performReading()) {
 8085e66:	4eac      	ldr	r6, [pc, #688]	; (8086118 <_Z10serialMenuv+0x2b8>)
  delay(1000);
}

/************************Serial menu stuff******************/

void serialMenu(){
 8085e68:	b091      	sub	sp, #68	; 0x44
  incomingByte = '0';
 8085e6a:	7023      	strb	r3, [r4, #0]
  while(incomingByte!= 'x')
 8085e6c:	7823      	ldrb	r3, [r4, #0]
 8085e6e:	2b78      	cmp	r3, #120	; 0x78
 8085e70:	f000 8425 	beq.w	80866be <_Z10serialMenuv+0x85e>
  {
    Serial.print("Menu>");
 8085e74:	f006 fb58 	bl	808c528 <_Z16_fetch_usbserialv>
 8085e78:	49a8      	ldr	r1, [pc, #672]	; (808611c <_Z10serialMenuv+0x2bc>)
 8085e7a:	f005 fa9b 	bl	808b3b4 <_ZN5Print5printEPKc>
    Serial.flush();
 8085e7e:	f006 fb53 	bl	808c528 <_Z16_fetch_usbserialv>
 8085e82:	6803      	ldr	r3, [r0, #0]
 8085e84:	69db      	ldr	r3, [r3, #28]
 8085e86:	4798      	blx	r3
    while(!Serial.available());
 8085e88:	f006 fb4e 	bl	808c528 <_Z16_fetch_usbserialv>
 8085e8c:	6803      	ldr	r3, [r0, #0]
 8085e8e:	691b      	ldr	r3, [r3, #16]
 8085e90:	4798      	blx	r3
 8085e92:	2800      	cmp	r0, #0
 8085e94:	d0f8      	beq.n	8085e88 <_Z10serialMenuv+0x28>
    incomingByte = Serial.read();
 8085e96:	f006 fb47 	bl	808c528 <_Z16_fetch_usbserialv>
 8085e9a:	6803      	ldr	r3, [r0, #0]
 8085e9c:	695b      	ldr	r3, [r3, #20]
 8085e9e:	4798      	blx	r3
 8085ea0:	b2c0      	uxtb	r0, r0
    if(incomingByte == 'a'){
 8085ea2:	2861      	cmp	r0, #97	; 0x61
  while(incomingByte!= 'x')
  {
    Serial.print("Menu>");
    Serial.flush();
    while(!Serial.available());
    incomingByte = Serial.read();
 8085ea4:	7020      	strb	r0, [r4, #0]
    if(incomingByte == 'a'){
 8085ea6:	d102      	bne.n	8085eae <_Z10serialMenuv+0x4e>
        serialGetCo2Slope();
 8085ea8:	f7fd fa04 	bl	80832b4 <_Z17serialGetCo2Slopev>
 8085eac:	e7de      	b.n	8085e6c <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'b'){
 8085eae:	2862      	cmp	r0, #98	; 0x62
 8085eb0:	d102      	bne.n	8085eb8 <_Z10serialMenuv+0x58>
        serialGetCo2Zero();
 8085eb2:	f7fd fa7d 	bl	80833b0 <_Z16serialGetCo2Zerov>
 8085eb6:	e7d9      	b.n	8085e6c <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'c'){
 8085eb8:	2863      	cmp	r0, #99	; 0x63
 8085eba:	d102      	bne.n	8085ec2 <_Z10serialMenuv+0x62>
        serialGetCoSlope();
 8085ebc:	f7fd fad8 	bl	8083470 <_Z16serialGetCoSlopev>
 8085ec0:	e7d4      	b.n	8085e6c <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'd'){
 8085ec2:	2864      	cmp	r0, #100	; 0x64
 8085ec4:	d102      	bne.n	8085ecc <_Z10serialMenuv+0x6c>
        serialGetCoZero();
 8085ec6:	f7fd fb59 	bl	808357c <_Z15serialGetCoZerov>
 8085eca:	e7cf      	b.n	8085e6c <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'e'){
 8085ecc:	2865      	cmp	r0, #101	; 0x65
 8085ece:	d102      	bne.n	8085ed6 <_Z10serialMenuv+0x76>
        serialGetPm1Slope();
 8085ed0:	f7fd fbb4 	bl	808363c <_Z17serialGetPm1Slopev>
 8085ed4:	e7ca      	b.n	8085e6c <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'f'){
 8085ed6:	2866      	cmp	r0, #102	; 0x66
 8085ed8:	d102      	bne.n	8085ee0 <_Z10serialMenuv+0x80>
         serialGetPm1Zero();
 8085eda:	f7fd fc2b 	bl	8083734 <_Z16serialGetPm1Zerov>
 8085ede:	e7c5      	b.n	8085e6c <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'g'){
 8085ee0:	2867      	cmp	r0, #103	; 0x67
 8085ee2:	d102      	bne.n	8085eea <_Z10serialMenuv+0x8a>
        serialGetPm25Slope();
 8085ee4:	f7fd fc84 	bl	80837f0 <_Z18serialGetPm25Slopev>
 8085ee8:	e7c0      	b.n	8085e6c <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'h'){
 8085eea:	2868      	cmp	r0, #104	; 0x68
 8085eec:	d102      	bne.n	8085ef4 <_Z10serialMenuv+0x94>
        serialGetPm25Zero();
 8085eee:	f7fd fcfb 	bl	80838e8 <_Z17serialGetPm25Zerov>
 8085ef2:	e7bb      	b.n	8085e6c <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'i'){
 8085ef4:	2869      	cmp	r0, #105	; 0x69
 8085ef6:	d102      	bne.n	8085efe <_Z10serialMenuv+0x9e>
        serialGetPm10Slope();
 8085ef8:	f7fd fd54 	bl	80839a4 <_Z18serialGetPm10Slopev>
 8085efc:	e7b6      	b.n	8085e6c <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'j'){
 8085efe:	286a      	cmp	r0, #106	; 0x6a
 8085f00:	d102      	bne.n	8085f08 <_Z10serialMenuv+0xa8>
        serialGetPm10Zero();
 8085f02:	f7fd fdcb 	bl	8083a9c <_Z17serialGetPm10Zerov>
 8085f06:	e7b1      	b.n	8085e6c <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'k'){
 8085f08:	286b      	cmp	r0, #107	; 0x6b
 8085f0a:	d102      	bne.n	8085f12 <_Z10serialMenuv+0xb2>
        serialGetTemperatureSlope();
 8085f0c:	f7fd fe24 	bl	8083b58 <_Z25serialGetTemperatureSlopev>
 8085f10:	e7ac      	b.n	8085e6c <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'l'){
 8085f12:	286c      	cmp	r0, #108	; 0x6c
 8085f14:	d102      	bne.n	8085f1c <_Z10serialMenuv+0xbc>
        serialGetTemperatureZero();
 8085f16:	f7fd fe9b 	bl	8083c50 <_Z24serialGetTemperatureZerov>
 8085f1a:	e7a7      	b.n	8085e6c <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'm'){
 8085f1c:	286d      	cmp	r0, #109	; 0x6d
 8085f1e:	d102      	bne.n	8085f26 <_Z10serialMenuv+0xc6>
        serialGetPressureSlope();
 8085f20:	f7fd fef2 	bl	8083d08 <_Z22serialGetPressureSlopev>
 8085f24:	e7a2      	b.n	8085e6c <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'n'){
 8085f26:	286e      	cmp	r0, #110	; 0x6e
 8085f28:	d102      	bne.n	8085f30 <_Z10serialMenuv+0xd0>
        serialGetPressureZero();
 8085f2a:	f7fd ff69 	bl	8083e00 <_Z21serialGetPressureZerov>
 8085f2e:	e79d      	b.n	8085e6c <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'o'){
 8085f30:	286f      	cmp	r0, #111	; 0x6f
 8085f32:	d102      	bne.n	8085f3a <_Z10serialMenuv+0xda>
        serialGetHumiditySlope();
 8085f34:	f7fd ffc2 	bl	8083ebc <_Z22serialGetHumiditySlopev>
 8085f38:	e798      	b.n	8085e6c <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'p'){
 8085f3a:	2870      	cmp	r0, #112	; 0x70
 8085f3c:	d102      	bne.n	8085f44 <_Z10serialMenuv+0xe4>
        serialGetHumidityZero();
 8085f3e:	f7fe f83b 	bl	8083fb8 <_Z21serialGetHumidityZerov>
 8085f42:	e793      	b.n	8085e6c <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'q'){
 8085f44:	2871      	cmp	r0, #113	; 0x71
 8085f46:	d107      	bne.n	8085f58 <_Z10serialMenuv+0xf8>
        Serial.println("Serial debugging enabled.");
 8085f48:	f006 faee 	bl	808c528 <_Z16_fetch_usbserialv>
 8085f4c:	4974      	ldr	r1, [pc, #464]	; (8086120 <_Z10serialMenuv+0x2c0>)
 8085f4e:	f005 fa44 	bl	808b3da <_ZN5Print7printlnEPKc>
        debugging_enabled = 1;
 8085f52:	4d74      	ldr	r5, [pc, #464]	; (8086124 <_Z10serialMenuv+0x2c4>)
 8085f54:	2301      	movs	r3, #1
 8085f56:	e008      	b.n	8085f6a <_Z10serialMenuv+0x10a>
        EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
    }else if(incomingByte == 'r'){
 8085f58:	2872      	cmp	r0, #114	; 0x72
 8085f5a:	d10e      	bne.n	8085f7a <_Z10serialMenuv+0x11a>
        Serial.println("Serial debugging disabled.");
 8085f5c:	f006 fae4 	bl	808c528 <_Z16_fetch_usbserialv>
        debugging_enabled = 0;
 8085f60:	4d70      	ldr	r5, [pc, #448]	; (8086124 <_Z10serialMenuv+0x2c4>)
    }else if(incomingByte == 'q'){
        Serial.println("Serial debugging enabled.");
        debugging_enabled = 1;
        EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
    }else if(incomingByte == 'r'){
        Serial.println("Serial debugging disabled.");
 8085f62:	4971      	ldr	r1, [pc, #452]	; (8086128 <_Z10serialMenuv+0x2c8>)
 8085f64:	f005 fa39 	bl	808b3da <_ZN5Print7printlnEPKc>
        debugging_enabled = 0;
 8085f68:	2300      	movs	r3, #0
 8085f6a:	602b      	str	r3, [r5, #0]
        EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
 8085f6c:	f006 fe96 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8085f70:	4629      	mov	r1, r5
 8085f72:	2048      	movs	r0, #72	; 0x48
 8085f74:	f7fa fec8 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
 8085f78:	e778      	b.n	8085e6c <_Z10serialMenuv+0xc>
    }else if(incomingByte == 's'){
 8085f7a:	2873      	cmp	r0, #115	; 0x73
 8085f7c:	d10b      	bne.n	8085f96 <_Z10serialMenuv+0x136>
        Serial.println(String(HEADER_STRING));
 8085f7e:	f006 fad3 	bl	808c528 <_Z16_fetch_usbserialv>
 8085f82:	4605      	mov	r5, r0
 8085f84:	4969      	ldr	r1, [pc, #420]	; (808612c <_Z10serialMenuv+0x2cc>)
 8085f86:	a80c      	add	r0, sp, #48	; 0x30
 8085f88:	f004 fffb 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
 8085f8c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8085f8e:	4628      	mov	r0, r5
 8085f90:	f005 fa23 	bl	808b3da <_ZN5Print7printlnEPKc>
 8085f94:	e387      	b.n	80866a6 <_Z10serialMenuv+0x846>
    }else if(incomingByte == 't'){
 8085f96:	2874      	cmp	r0, #116	; 0x74
 8085f98:	d102      	bne.n	8085fa0 <_Z10serialMenuv+0x140>
        serialGetTimeDate();
 8085f9a:	f7fd f88d 	bl	80830b8 <_Z17serialGetTimeDatev>
 8085f9e:	e765      	b.n	8085e6c <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'u'){
 8085fa0:	2875      	cmp	r0, #117	; 0x75
 8085fa2:	d102      	bne.n	8085faa <_Z10serialMenuv+0x14a>
        serialGetZone();
 8085fa4:	f7fd f8d6 	bl	8083154 <_Z13serialGetZonev>
 8085fa8:	e760      	b.n	8085e6c <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'v'){
 8085faa:	2876      	cmp	r0, #118	; 0x76
 8085fac:	d102      	bne.n	8085fb4 <_Z10serialMenuv+0x154>
        serialGetDeviceId();
 8085fae:	f7fc ffc7 	bl	8082f40 <_Z17serialGetDeviceIdv>
 8085fb2:	e75b      	b.n	8085e6c <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'w'){
 8085fb4:	2877      	cmp	r0, #119	; 0x77
 8085fb6:	d102      	bne.n	8085fbe <_Z10serialMenuv+0x15e>
        serialGetWifiCredentials();
 8085fb8:	f7fc fea8 	bl	8082d0c <_Z24serialGetWifiCredentialsv>
 8085fbc:	e756      	b.n	8085e6c <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'y'){
 8085fbe:	2879      	cmp	r0, #121	; 0x79
 8085fc0:	d10d      	bne.n	8085fde <_Z10serialMenuv+0x17e>
        if(serial_cellular_enabled == 0){
 8085fc2:	4d5b      	ldr	r5, [pc, #364]	; (8086130 <_Z10serialMenuv+0x2d0>)
 8085fc4:	682b      	ldr	r3, [r5, #0]
 8085fc6:	b91b      	cbnz	r3, 8085fd0 <_Z10serialMenuv+0x170>
            Serial.println("Enabling Cellular.");
 8085fc8:	f006 faae 	bl	808c528 <_Z16_fetch_usbserialv>
 8085fcc:	4959      	ldr	r1, [pc, #356]	; (8086134 <_Z10serialMenuv+0x2d4>)
 8085fce:	e002      	b.n	8085fd6 <_Z10serialMenuv+0x176>
        }else{
            Serial.println("Cellular already enabled.");
 8085fd0:	f006 faaa 	bl	808c528 <_Z16_fetch_usbserialv>
 8085fd4:	4958      	ldr	r1, [pc, #352]	; (8086138 <_Z10serialMenuv+0x2d8>)
 8085fd6:	f005 fa00 	bl	808b3da <_ZN5Print7printlnEPKc>
        }
        serial_cellular_enabled = 1;
 8085fda:	2301      	movs	r3, #1
 8085fdc:	e014      	b.n	8086008 <_Z10serialMenuv+0x1a8>
        EEPROM.put(SERIAL_CELLULAR_EN_MEM_ADDRESS, serial_cellular_enabled);
    }else if(incomingByte == 'z'){
 8085fde:	287a      	cmp	r0, #122	; 0x7a
 8085fe0:	d118      	bne.n	8086014 <_Z10serialMenuv+0x1b4>
        if(serial_cellular_enabled == 1){
 8085fe2:	4d53      	ldr	r5, [pc, #332]	; (8086130 <_Z10serialMenuv+0x2d0>)
 8085fe4:	682b      	ldr	r3, [r5, #0]
 8085fe6:	2b01      	cmp	r3, #1
 8085fe8:	d108      	bne.n	8085ffc <_Z10serialMenuv+0x19c>
            Serial.println("Disabling Cellular");
 8085fea:	f006 fa9d 	bl	808c528 <_Z16_fetch_usbserialv>
 8085fee:	4953      	ldr	r1, [pc, #332]	; (808613c <_Z10serialMenuv+0x2dc>)
 8085ff0:	f005 f9f3 	bl	808b3da <_ZN5Print7printlnEPKc>
            Cellular.off();
 8085ff4:	4852      	ldr	r0, [pc, #328]	; (8086140 <_Z10serialMenuv+0x2e0>)
 8085ff6:	f7fa feb9 	bl	8080d6c <_ZN5spark13CellularClass3offEv>
 8085ffa:	e004      	b.n	8086006 <_Z10serialMenuv+0x1a6>
        }else{
            Serial.println("Cellular already disabled.");
 8085ffc:	f006 fa94 	bl	808c528 <_Z16_fetch_usbserialv>
 8086000:	4950      	ldr	r1, [pc, #320]	; (8086144 <_Z10serialMenuv+0x2e4>)
 8086002:	f005 f9ea 	bl	808b3da <_ZN5Print7printlnEPKc>
        }
        serial_cellular_enabled = 0;
 8086006:	2300      	movs	r3, #0
 8086008:	602b      	str	r3, [r5, #0]
        EEPROM.put(SERIAL_CELLULAR_EN_MEM_ADDRESS, serial_cellular_enabled);
 808600a:	f006 fe47 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 808600e:	4948      	ldr	r1, [pc, #288]	; (8086130 <_Z10serialMenuv+0x2d0>)
 8086010:	2044      	movs	r0, #68	; 0x44
 8086012:	e7af      	b.n	8085f74 <_Z10serialMenuv+0x114>
    }else if(incomingByte == 'F'){
 8086014:	2846      	cmp	r0, #70	; 0x46
 8086016:	d10f      	bne.n	8086038 <_Z10serialMenuv+0x1d8>
        if(temperature_units == CELCIUS){
 8086018:	4b4b      	ldr	r3, [pc, #300]	; (8086148 <_Z10serialMenuv+0x2e8>)
 808601a:	681a      	ldr	r2, [r3, #0]
 808601c:	2a01      	cmp	r2, #1
 808601e:	d101      	bne.n	8086024 <_Z10serialMenuv+0x1c4>
            temperature_units = FARENHEIT;
 8086020:	2200      	movs	r2, #0
 8086022:	e00f      	b.n	8086044 <_Z10serialMenuv+0x1e4>

        }else{
            Serial.println("Temperature units already set to Fareneit.");
 8086024:	f006 fa80 	bl	808c528 <_Z16_fetch_usbserialv>
 8086028:	4948      	ldr	r1, [pc, #288]	; (808614c <_Z10serialMenuv+0x2ec>)
 808602a:	f005 f9d6 	bl	808b3da <_ZN5Print7printlnEPKc>
        }

        EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, temperature_units);
 808602e:	f006 fe35 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8086032:	4945      	ldr	r1, [pc, #276]	; (8086148 <_Z10serialMenuv+0x2e8>)
 8086034:	2060      	movs	r0, #96	; 0x60
 8086036:	e79d      	b.n	8085f74 <_Z10serialMenuv+0x114>

    }else if(incomingByte == 'C'){
 8086038:	2843      	cmp	r0, #67	; 0x43
 808603a:	d109      	bne.n	8086050 <_Z10serialMenuv+0x1f0>
        if(temperature_units == FARENHEIT){
 808603c:	4b42      	ldr	r3, [pc, #264]	; (8086148 <_Z10serialMenuv+0x2e8>)
 808603e:	681a      	ldr	r2, [r3, #0]
 8086040:	b912      	cbnz	r2, 8086048 <_Z10serialMenuv+0x1e8>
            temperature_units = CELCIUS;
 8086042:	2201      	movs	r2, #1
 8086044:	601a      	str	r2, [r3, #0]
 8086046:	e7f2      	b.n	808602e <_Z10serialMenuv+0x1ce>

        }else{
            Serial.println("Temperature units already set to Celcius.");
 8086048:	f006 fa6e 	bl	808c528 <_Z16_fetch_usbserialv>
 808604c:	4940      	ldr	r1, [pc, #256]	; (8086150 <_Z10serialMenuv+0x2f0>)
 808604e:	e7ec      	b.n	808602a <_Z10serialMenuv+0x1ca>
        }

        EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, temperature_units);
    }else if(incomingByte == 'D'){
 8086050:	2844      	cmp	r0, #68	; 0x44
 8086052:	d113      	bne.n	808607c <_Z10serialMenuv+0x21c>
        if(new_temperature_sensor_enabled == 1){
 8086054:	4b3f      	ldr	r3, [pc, #252]	; (8086154 <_Z10serialMenuv+0x2f4>)
 8086056:	681a      	ldr	r2, [r3, #0]
 8086058:	2a01      	cmp	r2, #1
 808605a:	d105      	bne.n	8086068 <_Z10serialMenuv+0x208>
            new_temperature_sensor_enabled = 0;
 808605c:	2200      	movs	r2, #0
 808605e:	601a      	str	r2, [r3, #0]
            Serial.println("Disabling new temperature sensor");
 8086060:	f006 fa62 	bl	808c528 <_Z16_fetch_usbserialv>
 8086064:	493c      	ldr	r1, [pc, #240]	; (8086158 <_Z10serialMenuv+0x2f8>)
 8086066:	e002      	b.n	808606e <_Z10serialMenuv+0x20e>
        }else{

            Serial.println("Temperature sensor already disabled");
 8086068:	f006 fa5e 	bl	808c528 <_Z16_fetch_usbserialv>
 808606c:	493b      	ldr	r1, [pc, #236]	; (808615c <_Z10serialMenuv+0x2fc>)
 808606e:	f005 f9b4 	bl	808b3da <_ZN5Print7printlnEPKc>
        }
        EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, new_temperature_sensor_enabled);
 8086072:	f006 fe13 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8086076:	4937      	ldr	r1, [pc, #220]	; (8086154 <_Z10serialMenuv+0x2f4>)
 8086078:	2068      	movs	r0, #104	; 0x68
 808607a:	e77b      	b.n	8085f74 <_Z10serialMenuv+0x114>

    }else if(incomingByte == 'E'){
 808607c:	2845      	cmp	r0, #69	; 0x45
 808607e:	d10d      	bne.n	808609c <_Z10serialMenuv+0x23c>
        if(new_temperature_sensor_enabled == 1){
 8086080:	4b34      	ldr	r3, [pc, #208]	; (8086154 <_Z10serialMenuv+0x2f4>)
 8086082:	681a      	ldr	r2, [r3, #0]
 8086084:	2a01      	cmp	r2, #1
 8086086:	d103      	bne.n	8086090 <_Z10serialMenuv+0x230>
            Serial.println("Temperature sensor already enabled");
 8086088:	f006 fa4e 	bl	808c528 <_Z16_fetch_usbserialv>
 808608c:	4934      	ldr	r1, [pc, #208]	; (8086160 <_Z10serialMenuv+0x300>)
 808608e:	e7ee      	b.n	808606e <_Z10serialMenuv+0x20e>
        }else{
            new_temperature_sensor_enabled = 1;
 8086090:	2201      	movs	r2, #1
 8086092:	601a      	str	r2, [r3, #0]
            Serial.println("Temperatue sensor now enabled");
 8086094:	f006 fa48 	bl	808c528 <_Z16_fetch_usbserialv>
 8086098:	4932      	ldr	r1, [pc, #200]	; (8086164 <_Z10serialMenuv+0x304>)
 808609a:	e7e8      	b.n	808606e <_Z10serialMenuv+0x20e>
        }
        EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, new_temperature_sensor_enabled );

    }else if(incomingByte == 'G'){      //enable analog reading of ozone and disable esp reading of ozone
 808609c:	2847      	cmp	r0, #71	; 0x47
 808609e:	d113      	bne.n	80860c8 <_Z10serialMenuv+0x268>
        if(ozone_analog_enabled == 1){
 80860a0:	4b31      	ldr	r3, [pc, #196]	; (8086168 <_Z10serialMenuv+0x308>)
 80860a2:	681a      	ldr	r2, [r3, #0]
 80860a4:	2a01      	cmp	r2, #1
 80860a6:	d103      	bne.n	80860b0 <_Z10serialMenuv+0x250>
            Serial.println("Analog reading of ozone already enabled");
 80860a8:	f006 fa3e 	bl	808c528 <_Z16_fetch_usbserialv>
 80860ac:	492f      	ldr	r1, [pc, #188]	; (808616c <_Z10serialMenuv+0x30c>)
 80860ae:	e004      	b.n	80860ba <_Z10serialMenuv+0x25a>
        }else{
            ozone_analog_enabled = 1;
 80860b0:	2201      	movs	r2, #1
 80860b2:	601a      	str	r2, [r3, #0]
            Serial.println("Analog reading of ozone now enabled");
 80860b4:	f006 fa38 	bl	808c528 <_Z16_fetch_usbserialv>
 80860b8:	492d      	ldr	r1, [pc, #180]	; (8086170 <_Z10serialMenuv+0x310>)
 80860ba:	f005 f98e 	bl	808b3da <_ZN5Print7printlnEPKc>
        }
        EEPROM.put(OZONE_A_OR_D_MEM_ADDRESS, ozone_analog_enabled);
 80860be:	f006 fded 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 80860c2:	4929      	ldr	r1, [pc, #164]	; (8086168 <_Z10serialMenuv+0x308>)
 80860c4:	206c      	movs	r0, #108	; 0x6c
 80860c6:	e755      	b.n	8085f74 <_Z10serialMenuv+0x114>

    }else if(incomingByte == 'H'){      //disable analog reading of ozone and read from esp
 80860c8:	2848      	cmp	r0, #72	; 0x48
 80860ca:	d10c      	bne.n	80860e6 <_Z10serialMenuv+0x286>
        if(ozone_analog_enabled == 0){
 80860cc:	4b26      	ldr	r3, [pc, #152]	; (8086168 <_Z10serialMenuv+0x308>)
 80860ce:	681a      	ldr	r2, [r3, #0]
 80860d0:	b91a      	cbnz	r2, 80860da <_Z10serialMenuv+0x27a>
            Serial.println("Digital reading of ozone already enabled");
 80860d2:	f006 fa29 	bl	808c528 <_Z16_fetch_usbserialv>
 80860d6:	4927      	ldr	r1, [pc, #156]	; (8086174 <_Z10serialMenuv+0x314>)
 80860d8:	e7ef      	b.n	80860ba <_Z10serialMenuv+0x25a>
        }else{
            ozone_analog_enabled = 0;
 80860da:	2200      	movs	r2, #0
 80860dc:	601a      	str	r2, [r3, #0]
            Serial.println("Digital reading of ozone now enabled");
 80860de:	f006 fa23 	bl	808c528 <_Z16_fetch_usbserialv>
 80860e2:	4925      	ldr	r1, [pc, #148]	; (8086178 <_Z10serialMenuv+0x318>)
 80860e4:	e7e9      	b.n	80860ba <_Z10serialMenuv+0x25a>
        }
        EEPROM.put(OZONE_A_OR_D_MEM_ADDRESS, ozone_analog_enabled);

    }else if(incomingByte == 'I'){      //disable analog reading of ozone and read from esp
 80860e6:	2849      	cmp	r0, #73	; 0x49
 80860e8:	d102      	bne.n	80860f0 <_Z10serialMenuv+0x290>
        serialGetAverageTime();
 80860ea:	f7fd f87f 	bl	80831ec <_Z20serialGetAverageTimev>
 80860ee:	e6bd      	b.n	8085e6c <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'J'){
 80860f0:	284a      	cmp	r0, #74	; 0x4a
 80860f2:	d105      	bne.n	8086100 <_Z10serialMenuv+0x2a0>
        resetESP();
 80860f4:	f7fc fad4 	bl	80826a0 <_Z8resetESPv>
        Serial.println("ESP reset!");
 80860f8:	f006 fa16 	bl	808c528 <_Z16_fetch_usbserialv>
 80860fc:	491f      	ldr	r1, [pc, #124]	; (808617c <_Z10serialMenuv+0x31c>)
 80860fe:	e04f      	b.n	80861a0 <_Z10serialMenuv+0x340>
    }else if(incomingByte == 'K'){
 8086100:	284b      	cmp	r0, #75	; 0x4b
 8086102:	d13f      	bne.n	8086184 <_Z10serialMenuv+0x324>
      Serial.println("Outputting GPS continuously");
 8086104:	f006 fa10 	bl	808c528 <_Z16_fetch_usbserialv>
 8086108:	491d      	ldr	r1, [pc, #116]	; (8086180 <_Z10serialMenuv+0x320>)
 808610a:	f005 f966 	bl	808b3da <_ZN5Print7printlnEPKc>
      echoGps();
 808610e:	f7fb f9f5 	bl	80814fc <_Z7echoGpsv>
 8086112:	e6ab      	b.n	8085e6c <_Z10serialMenuv+0xc>
 8086114:	20000790 	.word	0x20000790
 8086118:	20000700 	.word	0x20000700
 808611c:	08093377 	.word	0x08093377
 8086120:	0809337d 	.word	0x0809337d
 8086124:	20000b10 	.word	0x20000b10
 8086128:	08093397 	.word	0x08093397
 808612c:	08093169 	.word	0x08093169
 8086130:	20000224 	.word	0x20000224
 8086134:	080933b2 	.word	0x080933b2
 8086138:	080933c5 	.word	0x080933c5
 808613c:	080933df 	.word	0x080933df
 8086140:	20001088 	.word	0x20001088
 8086144:	080933f2 	.word	0x080933f2
 8086148:	200006b8 	.word	0x200006b8
 808614c:	0809340d 	.word	0x0809340d
 8086150:	08093438 	.word	0x08093438
 8086154:	20000780 	.word	0x20000780
 8086158:	08093462 	.word	0x08093462
 808615c:	08093483 	.word	0x08093483
 8086160:	080934a7 	.word	0x080934a7
 8086164:	080934ca 	.word	0x080934ca
 8086168:	20000b7c 	.word	0x20000b7c
 808616c:	080934e8 	.word	0x080934e8
 8086170:	08093510 	.word	0x08093510
 8086174:	08093534 	.word	0x08093534
 8086178:	0809355d 	.word	0x0809355d
 808617c:	08091d4b 	.word	0x08091d4b
 8086180:	08093582 	.word	0x08093582
    }else if(incomingByte == 'L'){
 8086184:	284c      	cmp	r0, #76	; 0x4c
 8086186:	d102      	bne.n	808618e <_Z10serialMenuv+0x32e>
      serialResetSettings();
 8086188:	f7fc ff5e 	bl	8083048 <_Z19serialResetSettingsv>
 808618c:	e66e      	b.n	8085e6c <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'M'){
 808618e:	284d      	cmp	r0, #77	; 0x4d
 8086190:	d110      	bne.n	80861b4 <_Z10serialMenuv+0x354>
      //serialTestRemoteFunction();
      if(battery_threshold_enable == 1){
 8086192:	4daf      	ldr	r5, [pc, #700]	; (8086450 <_Z10serialMenuv+0x5f0>)
 8086194:	682b      	ldr	r3, [r5, #0]
 8086196:	2b01      	cmp	r3, #1
 8086198:	d105      	bne.n	80861a6 <_Z10serialMenuv+0x346>
          Serial.println("Battery threshold already enabled");
 808619a:	f006 f9c5 	bl	808c528 <_Z16_fetch_usbserialv>
 808619e:	49ad      	ldr	r1, [pc, #692]	; (8086454 <_Z10serialMenuv+0x5f4>)
 80861a0:	f005 f91b 	bl	808b3da <_ZN5Print7printlnEPKc>
 80861a4:	e662      	b.n	8085e6c <_Z10serialMenuv+0xc>
      }else{
          Serial.println("Enabling battery threshold limiting");
 80861a6:	f006 f9bf 	bl	808c528 <_Z16_fetch_usbserialv>
 80861aa:	49ab      	ldr	r1, [pc, #684]	; (8086458 <_Z10serialMenuv+0x5f8>)
 80861ac:	f005 f915 	bl	808b3da <_ZN5Print7printlnEPKc>
          battery_threshold_enable = 1;
 80861b0:	2301      	movs	r3, #1
 80861b2:	e00e      	b.n	80861d2 <_Z10serialMenuv+0x372>
          EEPROM.put(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
      }

    }else if(incomingByte == 'N'){
 80861b4:	284e      	cmp	r0, #78	; 0x4e
 80861b6:	d112      	bne.n	80861de <_Z10serialMenuv+0x37e>
      //serialTestRemoteFunction();
      if(battery_threshold_enable == 0){
 80861b8:	4da5      	ldr	r5, [pc, #660]	; (8086450 <_Z10serialMenuv+0x5f0>)
 80861ba:	682b      	ldr	r3, [r5, #0]
 80861bc:	b91b      	cbnz	r3, 80861c6 <_Z10serialMenuv+0x366>
          Serial.println("Battery threshold already disabled");
 80861be:	f006 f9b3 	bl	808c528 <_Z16_fetch_usbserialv>
 80861c2:	49a6      	ldr	r1, [pc, #664]	; (808645c <_Z10serialMenuv+0x5fc>)
 80861c4:	e7ec      	b.n	80861a0 <_Z10serialMenuv+0x340>
      }else{
          Serial.println("Disabling battery threshold limiting");
 80861c6:	f006 f9af 	bl	808c528 <_Z16_fetch_usbserialv>
 80861ca:	49a5      	ldr	r1, [pc, #660]	; (8086460 <_Z10serialMenuv+0x600>)
 80861cc:	f005 f905 	bl	808b3da <_ZN5Print7printlnEPKc>
          battery_threshold_enable = 0;
 80861d0:	2300      	movs	r3, #0
 80861d2:	602b      	str	r3, [r5, #0]
          EEPROM.put(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
 80861d4:	f006 fd62 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 80861d8:	4629      	mov	r1, r5
 80861da:	2078      	movs	r0, #120	; 0x78
 80861dc:	e6ca      	b.n	8085f74 <_Z10serialMenuv+0x114>
      }

    }else if(incomingByte == 'O'){
 80861de:	284f      	cmp	r0, #79	; 0x4f
 80861e0:	d107      	bne.n	80861f2 <_Z10serialMenuv+0x392>
        //Serial.println("Changing frequency for gps");
        //changeFrequency();
        Serial.println("Enabling low power for gps");
 80861e2:	f006 f9a1 	bl	808c528 <_Z16_fetch_usbserialv>
 80861e6:	499f      	ldr	r1, [pc, #636]	; (8086464 <_Z10serialMenuv+0x604>)
 80861e8:	f005 f8f7 	bl	808b3da <_ZN5Print7printlnEPKc>
        enableLowPowerGPS();
 80861ec:	f7fb f9ec 	bl	80815c8 <_Z17enableLowPowerGPSv>
 80861f0:	e63c      	b.n	8085e6c <_Z10serialMenuv+0xc>
    }else if(incomingByte  == 'P'){
 80861f2:	2850      	cmp	r0, #80	; 0x50
 80861f4:	d106      	bne.n	8086204 <_Z10serialMenuv+0x3a4>
        Serial.println("Turning off batfet");
 80861f6:	f006 f997 	bl	808c528 <_Z16_fetch_usbserialv>
 80861fa:	499b      	ldr	r1, [pc, #620]	; (8086468 <_Z10serialMenuv+0x608>)
 80861fc:	f005 f8ed 	bl	808b3da <_ZN5Print7printlnEPKc>
        writeRegister(7, 0b01101011);   //turn off batfet
 8086200:	216b      	movs	r1, #107	; 0x6b
 8086202:	e007      	b.n	8086214 <_Z10serialMenuv+0x3b4>
    }else if(incomingByte == 'Q'){
 8086204:	2851      	cmp	r0, #81	; 0x51
 8086206:	d109      	bne.n	808621c <_Z10serialMenuv+0x3bc>

        Serial.println("Allowing batfet to turn on");
 8086208:	f006 f98e 	bl	808c528 <_Z16_fetch_usbserialv>
 808620c:	4997      	ldr	r1, [pc, #604]	; (808646c <_Z10serialMenuv+0x60c>)
 808620e:	f005 f8e4 	bl	808b3da <_ZN5Print7printlnEPKc>
        writeRegister(7, 0b01001011);   //allow batfet to turn on
 8086212:	214b      	movs	r1, #75	; 0x4b
 8086214:	2007      	movs	r0, #7
 8086216:	f7fa fe7d 	bl	8080f14 <_Z13writeRegisterhh>
 808621a:	e627      	b.n	8085e6c <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'R'){
 808621c:	2852      	cmp	r0, #82	; 0x52
 808621e:	d117      	bne.n	8086250 <_Z10serialMenuv+0x3f0>
        if(abc_logic_enabled){
 8086220:	4d93      	ldr	r5, [pc, #588]	; (8086470 <_Z10serialMenuv+0x610>)
 8086222:	682b      	ldr	r3, [r5, #0]
 8086224:	b183      	cbz	r3, 8086248 <_Z10serialMenuv+0x3e8>
            Serial.println("Disabling ABC logic for CO2 sensor");
 8086226:	f006 f97f 	bl	808c528 <_Z16_fetch_usbserialv>
 808622a:	4992      	ldr	r1, [pc, #584]	; (8086474 <_Z10serialMenuv+0x614>)
 808622c:	f005 f8d5 	bl	808b3da <_ZN5Print7printlnEPKc>
            abc_logic_enabled = 0;
 8086230:	2300      	movs	r3, #0
 8086232:	602b      	str	r3, [r5, #0]
            EEPROM.put(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 8086234:	f006 fd32 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8086238:	4629      	mov	r1, r5
 808623a:	207c      	movs	r0, #124	; 0x7c
 808623c:	f7fa fd64 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
            t6713.disableABCLogic();
 8086240:	488d      	ldr	r0, [pc, #564]	; (8086478 <_Z10serialMenuv+0x618>)
 8086242:	f001 f950 	bl	80874e6 <_ZN13Telaire_T671315disableABCLogicEv>
 8086246:	e611      	b.n	8085e6c <_Z10serialMenuv+0xc>
        }else{
            Serial.println("ABC logic already disabled");
 8086248:	f006 f96e 	bl	808c528 <_Z16_fetch_usbserialv>
 808624c:	498b      	ldr	r1, [pc, #556]	; (808647c <_Z10serialMenuv+0x61c>)
 808624e:	e7a7      	b.n	80861a0 <_Z10serialMenuv+0x340>
        }

    }else if(incomingByte == 'S'){
 8086250:	2853      	cmp	r0, #83	; 0x53
 8086252:	d117      	bne.n	8086284 <_Z10serialMenuv+0x424>
        if(!abc_logic_enabled){
 8086254:	4d86      	ldr	r5, [pc, #536]	; (8086470 <_Z10serialMenuv+0x610>)
 8086256:	682b      	ldr	r3, [r5, #0]
 8086258:	b983      	cbnz	r3, 808627c <_Z10serialMenuv+0x41c>
            Serial.println("Enabling abc logic for CO2 sensor");
 808625a:	f006 f965 	bl	808c528 <_Z16_fetch_usbserialv>
 808625e:	4988      	ldr	r1, [pc, #544]	; (8086480 <_Z10serialMenuv+0x620>)
 8086260:	f005 f8bb 	bl	808b3da <_ZN5Print7printlnEPKc>
            abc_logic_enabled = 1;
 8086264:	2301      	movs	r3, #1
 8086266:	602b      	str	r3, [r5, #0]
            EEPROM.put(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 8086268:	f006 fd18 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 808626c:	4629      	mov	r1, r5
 808626e:	207c      	movs	r0, #124	; 0x7c
 8086270:	f7fa fd4a 	bl	8080d08 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.23>
            t6713.enableABCLogic();
 8086274:	4880      	ldr	r0, [pc, #512]	; (8086478 <_Z10serialMenuv+0x618>)
 8086276:	f001 f95b 	bl	8087530 <_ZN13Telaire_T671314enableABCLogicEv>
 808627a:	e5f7      	b.n	8085e6c <_Z10serialMenuv+0xc>
        }else{
            Serial.println("ABC logic already enabled");
 808627c:	f006 f954 	bl	808c528 <_Z16_fetch_usbserialv>
 8086280:	4980      	ldr	r1, [pc, #512]	; (8086484 <_Z10serialMenuv+0x624>)
 8086282:	e78d      	b.n	80861a0 <_Z10serialMenuv+0x340>
        }
    }else if(incomingByte == 'T'){
 8086284:	2854      	cmp	r0, #84	; 0x54
 8086286:	d115      	bne.n	80862b4 <_Z10serialMenuv+0x454>
        if(!hih8120_enabled){
 8086288:	4d7f      	ldr	r5, [pc, #508]	; (8086488 <_Z10serialMenuv+0x628>)
 808628a:	682b      	ldr	r3, [r5, #0]
 808628c:	b933      	cbnz	r3, 808629c <_Z10serialMenuv+0x43c>
            Serial.println("Enabling HIH8120 RH sensor");
 808628e:	f006 f94b 	bl	808c528 <_Z16_fetch_usbserialv>
 8086292:	497e      	ldr	r1, [pc, #504]	; (808648c <_Z10serialMenuv+0x62c>)
 8086294:	f005 f8a1 	bl	808b3da <_ZN5Print7printlnEPKc>
            hih8120_enabled = 1;
 8086298:	2301      	movs	r3, #1
 808629a:	e005      	b.n	80862a8 <_Z10serialMenuv+0x448>
            EEPROM.put(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);

        }else{
            Serial.println("Disabling HIH8120 RH sensor");
 808629c:	f006 f944 	bl	808c528 <_Z16_fetch_usbserialv>
 80862a0:	497b      	ldr	r1, [pc, #492]	; (8086490 <_Z10serialMenuv+0x630>)
 80862a2:	f005 f89a 	bl	808b3da <_ZN5Print7printlnEPKc>
            hih8120_enabled = 0;
 80862a6:	2300      	movs	r3, #0
 80862a8:	602b      	str	r3, [r5, #0]
            EEPROM.put(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);
 80862aa:	f006 fcf7 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 80862ae:	4629      	mov	r1, r5
 80862b0:	2080      	movs	r0, #128	; 0x80
 80862b2:	e65f      	b.n	8085f74 <_Z10serialMenuv+0x114>
        }

    }else if(incomingByte == 'U'){
 80862b4:	2855      	cmp	r0, #85	; 0x55
 80862b6:	d115      	bne.n	80862e4 <_Z10serialMenuv+0x484>
        if(!CO_socket){
 80862b8:	4d76      	ldr	r5, [pc, #472]	; (8086494 <_Z10serialMenuv+0x634>)
 80862ba:	682b      	ldr	r3, [r5, #0]
 80862bc:	b933      	cbnz	r3, 80862cc <_Z10serialMenuv+0x46c>
            Serial.println("Now reading CO from U20-Alpha2");
 80862be:	f006 f933 	bl	808c528 <_Z16_fetch_usbserialv>
 80862c2:	4975      	ldr	r1, [pc, #468]	; (8086498 <_Z10serialMenuv+0x638>)
 80862c4:	f005 f889 	bl	808b3da <_ZN5Print7printlnEPKc>
            CO_socket = 1;
 80862c8:	2301      	movs	r3, #1
 80862ca:	e005      	b.n	80862d8 <_Z10serialMenuv+0x478>
            EEPROM.put(CO_SOCKET_MEM_ADDRESS, CO_socket);

        }else{
            Serial.println("Now reading CO from U19-Alpha1");
 80862cc:	f006 f92c 	bl	808c528 <_Z16_fetch_usbserialv>
 80862d0:	4972      	ldr	r1, [pc, #456]	; (808649c <_Z10serialMenuv+0x63c>)
 80862d2:	f005 f882 	bl	808b3da <_ZN5Print7printlnEPKc>
            CO_socket = 0;
 80862d6:	2300      	movs	r3, #0
 80862d8:	602b      	str	r3, [r5, #0]
            EEPROM.put(CO_SOCKET_MEM_ADDRESS, CO_socket);
 80862da:	f006 fcdf 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 80862de:	4629      	mov	r1, r5
 80862e0:	2084      	movs	r0, #132	; 0x84
 80862e2:	e647      	b.n	8085f74 <_Z10serialMenuv+0x114>
        }
    }else if(incomingByte == 'V'){
 80862e4:	2856      	cmp	r0, #86	; 0x56
 80862e6:	d108      	bne.n	80862fa <_Z10serialMenuv+0x49a>
        Serial.println("Reseting the CO2 sensor");
 80862e8:	f006 f91e 	bl	808c528 <_Z16_fetch_usbserialv>
 80862ec:	496c      	ldr	r1, [pc, #432]	; (80864a0 <_Z10serialMenuv+0x640>)
 80862ee:	f005 f874 	bl	808b3da <_ZN5Print7printlnEPKc>
        t6713.resetSensor();
 80862f2:	4861      	ldr	r0, [pc, #388]	; (8086478 <_Z10serialMenuv+0x618>)
 80862f4:	f001 f8d2 	bl	808749c <_ZN13Telaire_T671311resetSensorEv>
 80862f8:	e5b8      	b.n	8085e6c <_Z10serialMenuv+0xc>

    }else if(incomingByte == '1'){
 80862fa:	2831      	cmp	r0, #49	; 0x31
 80862fc:	d102      	bne.n	8086304 <_Z10serialMenuv+0x4a4>
        serialGetLowerLimit();
 80862fe:	f7fd feb7 	bl	8084070 <_Z19serialGetLowerLimitv>
 8086302:	e5b3      	b.n	8085e6c <_Z10serialMenuv+0xc>
    }else if(incomingByte == '2'){
 8086304:	2832      	cmp	r0, #50	; 0x32
 8086306:	d102      	bne.n	808630e <_Z10serialMenuv+0x4ae>
        serialGetUpperLimit();
 8086308:	f7fd ff36 	bl	8084178 <_Z19serialGetUpperLimitv>
 808630c:	e5ae      	b.n	8085e6c <_Z10serialMenuv+0xc>
    }else if(incomingByte == '3'){
 808630e:	2833      	cmp	r0, #51	; 0x33
 8086310:	d116      	bne.n	8086340 <_Z10serialMenuv+0x4e0>
        Serial.print("APP Version: ");
 8086312:	f006 f909 	bl	808c528 <_Z16_fetch_usbserialv>
 8086316:	4963      	ldr	r1, [pc, #396]	; (80864a4 <_Z10serialMenuv+0x644>)
 8086318:	f005 f84c 	bl	808b3b4 <_ZN5Print5printEPKc>
        Serial.println(APP_VERSION);
 808631c:	f006 f904 	bl	808c528 <_Z16_fetch_usbserialv>
 8086320:	220a      	movs	r2, #10
 8086322:	2107      	movs	r1, #7
 8086324:	f005 f8c7 	bl	808b4b6 <_ZN5Print7printlnEii>
        Serial.print("Build: ");
 8086328:	f006 f8fe 	bl	808c528 <_Z16_fetch_usbserialv>
 808632c:	495e      	ldr	r1, [pc, #376]	; (80864a8 <_Z10serialMenuv+0x648>)
 808632e:	f005 f841 	bl	808b3b4 <_ZN5Print5printEPKc>
        Serial.println(BUILD_VERSION);
 8086332:	f006 f8f9 	bl	808c528 <_Z16_fetch_usbserialv>
 8086336:	220a      	movs	r2, #10
 8086338:	210d      	movs	r1, #13
 808633a:	f005 f8bc 	bl	808b4b6 <_ZN5Print7printlnEii>
 808633e:	e595      	b.n	8085e6c <_Z10serialMenuv+0xc>
    }else if(incomingByte == '4'){
 8086340:	2834      	cmp	r0, #52	; 0x34
 8086342:	d10d      	bne.n	8086360 <_Z10serialMenuv+0x500>
        if(ozone_enabled == 0){
 8086344:	4d59      	ldr	r5, [pc, #356]	; (80864ac <_Z10serialMenuv+0x64c>)
 8086346:	682b      	ldr	r3, [r5, #0]
 8086348:	b91b      	cbnz	r3, 8086352 <_Z10serialMenuv+0x4f2>
            Serial.println("Enabling Ozone");
 808634a:	f006 f8ed 	bl	808c528 <_Z16_fetch_usbserialv>
 808634e:	4958      	ldr	r1, [pc, #352]	; (80864b0 <_Z10serialMenuv+0x650>)
 8086350:	e002      	b.n	8086358 <_Z10serialMenuv+0x4f8>
        }else{
            Serial.println("Ozone already enabled");
 8086352:	f006 f8e9 	bl	808c528 <_Z16_fetch_usbserialv>
 8086356:	4957      	ldr	r1, [pc, #348]	; (80864b4 <_Z10serialMenuv+0x654>)
 8086358:	f005 f83f 	bl	808b3da <_ZN5Print7printlnEPKc>
        }
        ozone_enabled = 1;
 808635c:	2301      	movs	r3, #1
 808635e:	e00f      	b.n	8086380 <_Z10serialMenuv+0x520>
        EEPROM.put(OZONE_EN_MEM_ADDRESS, ozone_enabled);
    }else if(incomingByte == '5'){
 8086360:	2835      	cmp	r0, #53	; 0x35
 8086362:	d113      	bne.n	808638c <_Z10serialMenuv+0x52c>
        if(ozone_enabled == 1){
 8086364:	4d51      	ldr	r5, [pc, #324]	; (80864ac <_Z10serialMenuv+0x64c>)
 8086366:	682b      	ldr	r3, [r5, #0]
 8086368:	2b01      	cmp	r3, #1
 808636a:	d103      	bne.n	8086374 <_Z10serialMenuv+0x514>
            Serial.println("Disabling Ozone");
 808636c:	f006 f8dc 	bl	808c528 <_Z16_fetch_usbserialv>
 8086370:	4951      	ldr	r1, [pc, #324]	; (80864b8 <_Z10serialMenuv+0x658>)
 8086372:	e002      	b.n	808637a <_Z10serialMenuv+0x51a>
        }else{
            Serial.println("Ozone already disabled");
 8086374:	f006 f8d8 	bl	808c528 <_Z16_fetch_usbserialv>
 8086378:	4950      	ldr	r1, [pc, #320]	; (80864bc <_Z10serialMenuv+0x65c>)
 808637a:	f005 f82e 	bl	808b3da <_ZN5Print7printlnEPKc>
        }
        ozone_enabled = 0;
 808637e:	2300      	movs	r3, #0
 8086380:	602b      	str	r3, [r5, #0]
        EEPROM.put(OZONE_EN_MEM_ADDRESS, ozone_enabled);
 8086382:	f006 fc8b 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 8086386:	4949      	ldr	r1, [pc, #292]	; (80864ac <_Z10serialMenuv+0x64c>)
 8086388:	2058      	movs	r0, #88	; 0x58
 808638a:	e5f3      	b.n	8085f74 <_Z10serialMenuv+0x114>
    }else if(incomingByte == '6'){
 808638c:	2836      	cmp	r0, #54	; 0x36
 808638e:	d10d      	bne.n	80863ac <_Z10serialMenuv+0x54c>
        if(voc_enabled == 0){
 8086390:	4d4b      	ldr	r5, [pc, #300]	; (80864c0 <_Z10serialMenuv+0x660>)
 8086392:	682b      	ldr	r3, [r5, #0]
 8086394:	b91b      	cbnz	r3, 808639e <_Z10serialMenuv+0x53e>
            Serial.println("Enabling VOC's");
 8086396:	f006 f8c7 	bl	808c528 <_Z16_fetch_usbserialv>
 808639a:	494a      	ldr	r1, [pc, #296]	; (80864c4 <_Z10serialMenuv+0x664>)
 808639c:	e002      	b.n	80863a4 <_Z10serialMenuv+0x544>
        }else{
            Serial.println("VOC's already enabled");
 808639e:	f006 f8c3 	bl	808c528 <_Z16_fetch_usbserialv>
 80863a2:	4949      	ldr	r1, [pc, #292]	; (80864c8 <_Z10serialMenuv+0x668>)
 80863a4:	f005 f819 	bl	808b3da <_ZN5Print7printlnEPKc>
        }
        voc_enabled = 1;
 80863a8:	2301      	movs	r3, #1
 80863aa:	e00f      	b.n	80863cc <_Z10serialMenuv+0x56c>
        EEPROM.put(VOC_EN_MEM_ADDRESS, voc_enabled);
    }else if(incomingByte == '7'){
 80863ac:	2837      	cmp	r0, #55	; 0x37
 80863ae:	d113      	bne.n	80863d8 <_Z10serialMenuv+0x578>
        if(voc_enabled == 1){
 80863b0:	4d43      	ldr	r5, [pc, #268]	; (80864c0 <_Z10serialMenuv+0x660>)
 80863b2:	682b      	ldr	r3, [r5, #0]
 80863b4:	2b01      	cmp	r3, #1
 80863b6:	d103      	bne.n	80863c0 <_Z10serialMenuv+0x560>
            Serial.println("Disabling VOC's");
 80863b8:	f006 f8b6 	bl	808c528 <_Z16_fetch_usbserialv>
 80863bc:	4943      	ldr	r1, [pc, #268]	; (80864cc <_Z10serialMenuv+0x66c>)
 80863be:	e002      	b.n	80863c6 <_Z10serialMenuv+0x566>
        }else{
            Serial.println("VOC's already disabled");
 80863c0:	f006 f8b2 	bl	808c528 <_Z16_fetch_usbserialv>
 80863c4:	4942      	ldr	r1, [pc, #264]	; (80864d0 <_Z10serialMenuv+0x670>)
 80863c6:	f005 f808 	bl	808b3da <_ZN5Print7printlnEPKc>
        }
        voc_enabled = 0;
 80863ca:	2300      	movs	r3, #0
 80863cc:	602b      	str	r3, [r5, #0]
        EEPROM.put(VOC_EN_MEM_ADDRESS, voc_enabled);
 80863ce:	f006 fc65 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 80863d2:	493b      	ldr	r1, [pc, #236]	; (80864c0 <_Z10serialMenuv+0x660>)
 80863d4:	205c      	movs	r0, #92	; 0x5c
 80863d6:	e5cd      	b.n	8085f74 <_Z10serialMenuv+0x114>
    }else if(incomingByte == '8'){
 80863d8:	2838      	cmp	r0, #56	; 0x38
 80863da:	d11e      	bne.n	808641a <_Z10serialMenuv+0x5ba>
        Serial.print("Fault: ");
 80863dc:	f006 f8a4 	bl	808c528 <_Z16_fetch_usbserialv>
 80863e0:	493c      	ldr	r1, [pc, #240]	; (80864d4 <_Z10serialMenuv+0x674>)
 80863e2:	f004 ffe7 	bl	808b3b4 <_ZN5Print5printEPKc>
        byte fault = pmic.getFault();
 80863e6:	483c      	ldr	r0, [pc, #240]	; (80864d8 <_Z10serialMenuv+0x678>)
 80863e8:	f004 fb02 	bl	808a9f0 <_ZN4PMIC8getFaultEv>
 80863ec:	4605      	mov	r5, r0
        Serial.println(fault);
 80863ee:	f006 f89b 	bl	808c528 <_Z16_fetch_usbserialv>
 80863f2:	220a      	movs	r2, #10
 80863f4:	4629      	mov	r1, r5
 80863f6:	f005 f830 	bl	808b45a <_ZN5Print7printlnEhi>
        Serial.print("System status: ");
 80863fa:	f006 f895 	bl	808c528 <_Z16_fetch_usbserialv>
 80863fe:	4937      	ldr	r1, [pc, #220]	; (80864dc <_Z10serialMenuv+0x67c>)
 8086400:	f004 ffd8 	bl	808b3b4 <_ZN5Print5printEPKc>
        byte systemStatus = pmic.getSystemStatus();
 8086404:	4834      	ldr	r0, [pc, #208]	; (80864d8 <_Z10serialMenuv+0x678>)
 8086406:	f004 faf0 	bl	808a9ea <_ZN4PMIC15getSystemStatusEv>
 808640a:	4605      	mov	r5, r0
        Serial.println(systemStatus);
 808640c:	f006 f88c 	bl	808c528 <_Z16_fetch_usbserialv>
 8086410:	220a      	movs	r2, #10
 8086412:	4629      	mov	r1, r5
 8086414:	f005 f821 	bl	808b45a <_ZN5Print7printlnEhi>
 8086418:	e528      	b.n	8085e6c <_Z10serialMenuv+0xc>

    }else if(incomingByte == '9'){
 808641a:	2839      	cmp	r0, #57	; 0x39
 808641c:	d102      	bne.n	8086424 <_Z10serialMenuv+0x5c4>
        serialIncreaseChargeCurrent();
 808641e:	f7ff faf3 	bl	8085a08 <_Z27serialIncreaseChargeCurrentv>
 8086422:	e523      	b.n	8085e6c <_Z10serialMenuv+0xc>
    }else if(incomingByte == '0'){
 8086424:	2830      	cmp	r0, #48	; 0x30
 8086426:	d102      	bne.n	808642e <_Z10serialMenuv+0x5ce>
        serialIncreaseInputCurrent();
 8086428:	f7ff faac 	bl	8085984 <_Z26serialIncreaseInputCurrentv>
 808642c:	e51e      	b.n	8085e6c <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'A'){
 808642e:	2841      	cmp	r0, #65	; 0x41
 8086430:	d102      	bne.n	8086438 <_Z10serialMenuv+0x5d8>
        readAlpha1Constantly();
 8086432:	f7ff fcfd 	bl	8085e30 <_Z20readAlpha1Constantlyv>
 8086436:	e519      	b.n	8085e6c <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'B'){
 8086438:	2842      	cmp	r0, #66	; 0x42
 808643a:	d161      	bne.n	8086500 <_Z10serialMenuv+0x6a0>
        if(output_only_particles == 1){
 808643c:	4b28      	ldr	r3, [pc, #160]	; (80864e0 <_Z10serialMenuv+0x680>)
 808643e:	681a      	ldr	r2, [r3, #0]
 8086440:	2a01      	cmp	r2, #1
 8086442:	d151      	bne.n	80864e8 <_Z10serialMenuv+0x688>
            output_only_particles = 0;
 8086444:	2200      	movs	r2, #0
 8086446:	601a      	str	r2, [r3, #0]
            Serial.println("Outputting normally");
 8086448:	f006 f86e 	bl	808c528 <_Z16_fetch_usbserialv>
 808644c:	4925      	ldr	r1, [pc, #148]	; (80864e4 <_Z10serialMenuv+0x684>)
 808644e:	e050      	b.n	80864f2 <_Z10serialMenuv+0x692>
 8086450:	20000b8c 	.word	0x20000b8c
 8086454:	0809359e 	.word	0x0809359e
 8086458:	080935c0 	.word	0x080935c0
 808645c:	080935e4 	.word	0x080935e4
 8086460:	08093607 	.word	0x08093607
 8086464:	0809362c 	.word	0x0809362c
 8086468:	08093647 	.word	0x08093647
 808646c:	0809365a 	.word	0x0809365a
 8086470:	20000850 	.word	0x20000850
 8086474:	08093675 	.word	0x08093675
 8086478:	20000b90 	.word	0x20000b90
 808647c:	08093698 	.word	0x08093698
 8086480:	080936b3 	.word	0x080936b3
 8086484:	080936d5 	.word	0x080936d5
 8086488:	200001f4 	.word	0x200001f4
 808648c:	080936ef 	.word	0x080936ef
 8086490:	0809370a 	.word	0x0809370a
 8086494:	200006fc 	.word	0x200006fc
 8086498:	08093726 	.word	0x08093726
 808649c:	08093745 	.word	0x08093745
 80864a0:	08093764 	.word	0x08093764
 80864a4:	0809377c 	.word	0x0809377c
 80864a8:	08091d63 	.word	0x08091d63
 80864ac:	20000a4c 	.word	0x20000a4c
 80864b0:	0809378a 	.word	0x0809378a
 80864b4:	08093799 	.word	0x08093799
 80864b8:	080937af 	.word	0x080937af
 80864bc:	080937bf 	.word	0x080937bf
 80864c0:	20000b9c 	.word	0x20000b9c
 80864c4:	080937d6 	.word	0x080937d6
 80864c8:	080937e5 	.word	0x080937e5
 80864cc:	080937fb 	.word	0x080937fb
 80864d0:	0809380b 	.word	0x0809380b
 80864d4:	08093822 	.word	0x08093822
 80864d8:	20000aec 	.word	0x20000aec
 80864dc:	0809382a 	.word	0x0809382a
 80864e0:	200007f0 	.word	0x200007f0
 80864e4:	0809383a 	.word	0x0809383a
        }else{
            output_only_particles = 1;
 80864e8:	2201      	movs	r2, #1
 80864ea:	601a      	str	r2, [r3, #0]
            Serial.println("Outputting only PM");
 80864ec:	f006 f81c 	bl	808c528 <_Z16_fetch_usbserialv>
 80864f0:	4976      	ldr	r1, [pc, #472]	; (80866cc <_Z10serialMenuv+0x86c>)
 80864f2:	f004 ff72 	bl	808b3da <_ZN5Print7printlnEPKc>
        }
        EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, output_only_particles);
 80864f6:	f006 fbd1 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 80864fa:	4975      	ldr	r1, [pc, #468]	; (80866d0 <_Z10serialMenuv+0x870>)
 80864fc:	2064      	movs	r0, #100	; 0x64
 80864fe:	e539      	b.n	8085f74 <_Z10serialMenuv+0x114>

    }else if(incomingByte == '!'){
 8086500:	2821      	cmp	r0, #33	; 0x21
 8086502:	d135      	bne.n	8086570 <_Z10serialMenuv+0x710>

        Serial.println("Outputting VOCs continuously!  Press any button to exit...");
 8086504:	f006 f810 	bl	808c528 <_Z16_fetch_usbserialv>
 8086508:	4972      	ldr	r1, [pc, #456]	; (80866d4 <_Z10serialMenuv+0x874>)
 808650a:	f004 ff66 	bl	808b3da <_ZN5Print7printlnEPKc>
        while(!Serial.available()){
 808650e:	f006 f80b 	bl	808c528 <_Z16_fetch_usbserialv>
 8086512:	6803      	ldr	r3, [r0, #0]
 8086514:	691b      	ldr	r3, [r3, #16]
 8086516:	4798      	blx	r3
 8086518:	4605      	mov	r5, r0
 808651a:	2800      	cmp	r0, #0
 808651c:	f47f aca6 	bne.w	8085e6c <_Z10serialMenuv+0xc>
            if (! bme.performReading()) {
 8086520:	486d      	ldr	r0, [pc, #436]	; (80866d8 <_Z10serialMenuv+0x878>)
 8086522:	f002 fcfb 	bl	8088f1c <_ZN15Adafruit_BME68014performReadingEv>
 8086526:	b918      	cbnz	r0, 8086530 <_Z10serialMenuv+0x6d0>
              Serial.println("Failed to read BME680");
 8086528:	f005 fffe 	bl	808c528 <_Z16_fetch_usbserialv>
 808652c:	496b      	ldr	r1, [pc, #428]	; (80866dc <_Z10serialMenuv+0x87c>)
 808652e:	e0c9      	b.n	80866c4 <_Z10serialMenuv+0x864>
              return;
            }else{
                Serial.printf("TVocs=%1.0f, Temp=%1.1f, press=%1.1f, rh=%1.1f\n\r", bme.gas_resistance/100, bme.temperature, bme.pressure, bme.humidity);
 8086530:	f005 fffa 	bl	808c528 <_Z16_fetch_usbserialv>
 8086534:	4607      	mov	r7, r0
 8086536:	68b0      	ldr	r0, [r6, #8]
 8086538:	f006 fed2 	bl	808d2e0 <__aeabi_f2d>
 808653c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8086540:	6870      	ldr	r0, [r6, #4]
 8086542:	f006 fecd 	bl	808d2e0 <__aeabi_f2d>
 8086546:	e9cd 0104 	strd	r0, r1, [sp, #16]
 808654a:	6830      	ldr	r0, [r6, #0]
 808654c:	f006 fec8 	bl	808d2e0 <__aeabi_f2d>
 8086550:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8086554:	4962      	ldr	r1, [pc, #392]	; (80866e0 <_Z10serialMenuv+0x880>)
 8086556:	68f0      	ldr	r0, [r6, #12]
 8086558:	f007 fc20 	bl	808dd9c <__aeabi_fdiv>
 808655c:	f006 fec0 	bl	808d2e0 <__aeabi_f2d>
 8086560:	4a60      	ldr	r2, [pc, #384]	; (80866e4 <_Z10serialMenuv+0x884>)
 8086562:	e9cd 0100 	strd	r0, r1, [sp]
 8086566:	4629      	mov	r1, r5
 8086568:	4638      	mov	r0, r7
 808656a:	f005 f86b 	bl	808b644 <_ZN5Print11printf_implEbPKcz>
 808656e:	e7ce      	b.n	808650e <_Z10serialMenuv+0x6ae>
            }
        }
    }else if(incomingByte == '@'){
 8086570:	2840      	cmp	r0, #64	; 0x40
 8086572:	d112      	bne.n	808659a <_Z10serialMenuv+0x73a>
        if(sensible_iot_en == 1){
 8086574:	4d5c      	ldr	r5, [pc, #368]	; (80866e8 <_Z10serialMenuv+0x888>)
 8086576:	682b      	ldr	r3, [r5, #0]
 8086578:	2b01      	cmp	r3, #1
 808657a:	d10b      	bne.n	8086594 <_Z10serialMenuv+0x734>
            Serial.println("Disabling sensible iot data push.");
 808657c:	f005 ffd4 	bl	808c528 <_Z16_fetch_usbserialv>
 8086580:	495a      	ldr	r1, [pc, #360]	; (80866ec <_Z10serialMenuv+0x88c>)
 8086582:	f004 ff2a 	bl	808b3da <_ZN5Print7printlnEPKc>
            sensible_iot_en = 0;
 8086586:	2300      	movs	r3, #0
 8086588:	602b      	str	r3, [r5, #0]
            EEPROM.put(SENSIBLEIOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 808658a:	f006 fb87 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 808658e:	4629      	mov	r1, r5
 8086590:	208c      	movs	r0, #140	; 0x8c
 8086592:	e4ef      	b.n	8085f74 <_Z10serialMenuv+0x114>
        }else{
            serialSetSensibleIotEnable();
 8086594:	f7fc fc92 	bl	8082ebc <_Z26serialSetSensibleIotEnablev>
 8086598:	e468      	b.n	8085e6c <_Z10serialMenuv+0xc>
            
        }
    }else if(incomingByte == '#'){
 808659a:	2823      	cmp	r0, #35	; 0x23
 808659c:	d115      	bne.n	80865ca <_Z10serialMenuv+0x76a>
        if(car_topper_power_en == 1){
 808659e:	4d54      	ldr	r5, [pc, #336]	; (80866f0 <_Z10serialMenuv+0x890>)
 80865a0:	682b      	ldr	r3, [r5, #0]
 80865a2:	2b01      	cmp	r3, #1
 80865a4:	d105      	bne.n	80865b2 <_Z10serialMenuv+0x752>
            car_topper_power_en = 0;
 80865a6:	2300      	movs	r3, #0
 80865a8:	602b      	str	r3, [r5, #0]
            Serial.println("Disabling car topper power.  ");
 80865aa:	f005 ffbd 	bl	808c528 <_Z16_fetch_usbserialv>
 80865ae:	4951      	ldr	r1, [pc, #324]	; (80866f4 <_Z10serialMenuv+0x894>)
 80865b0:	e004      	b.n	80865bc <_Z10serialMenuv+0x75c>
            EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, car_topper_power_en);
        }else{
            car_topper_power_en = 1;
 80865b2:	2301      	movs	r3, #1
 80865b4:	602b      	str	r3, [r5, #0]
            Serial.println("Enabling car topper power.  If no external power, system will turn off.");
 80865b6:	f005 ffb7 	bl	808c528 <_Z16_fetch_usbserialv>
 80865ba:	494f      	ldr	r1, [pc, #316]	; (80866f8 <_Z10serialMenuv+0x898>)
 80865bc:	f004 ff0d 	bl	808b3da <_ZN5Print7printlnEPKc>
            EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, car_topper_power_en);
 80865c0:	f006 fb6c 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 80865c4:	4629      	mov	r1, r5
 80865c6:	2090      	movs	r0, #144	; 0x90
 80865c8:	e4d4      	b.n	8085f74 <_Z10serialMenuv+0x114>
        }
    
    }else if(incomingByte == 'W'){
 80865ca:	2857      	cmp	r0, #87	; 0x57
 80865cc:	d116      	bne.n	80865fc <_Z10serialMenuv+0x79c>
        if(google_location_en == 1){
 80865ce:	4d4b      	ldr	r5, [pc, #300]	; (80866fc <_Z10serialMenuv+0x89c>)
 80865d0:	682b      	ldr	r3, [r5, #0]
 80865d2:	2b01      	cmp	r3, #1
 80865d4:	d106      	bne.n	80865e4 <_Z10serialMenuv+0x784>
            Serial.println("Disabling google location services.");
 80865d6:	f005 ffa7 	bl	808c528 <_Z16_fetch_usbserialv>
 80865da:	4949      	ldr	r1, [pc, #292]	; (8086700 <_Z10serialMenuv+0x8a0>)
 80865dc:	f004 fefd 	bl	808b3da <_ZN5Print7printlnEPKc>
            google_location_en = 0;
 80865e0:	2300      	movs	r3, #0
 80865e2:	e005      	b.n	80865f0 <_Z10serialMenuv+0x790>
            EEPROM.put(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
        }else{
            Serial.println("Enabling google location services.");
 80865e4:	f005 ffa0 	bl	808c528 <_Z16_fetch_usbserialv>
 80865e8:	4946      	ldr	r1, [pc, #280]	; (8086704 <_Z10serialMenuv+0x8a4>)
 80865ea:	f004 fef6 	bl	808b3da <_ZN5Print7printlnEPKc>
            google_location_en = 1;
 80865ee:	2301      	movs	r3, #1
 80865f0:	602b      	str	r3, [r5, #0]
            EEPROM.put(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
 80865f2:	f006 fb53 	bl	808cc9c <_Z21__fetch_global_EEPROMv>
 80865f6:	4629      	mov	r1, r5
 80865f8:	2088      	movs	r0, #136	; 0x88
 80865fa:	e4bb      	b.n	8085f74 <_Z10serialMenuv+0x114>
        }
        
    }else if(incomingByte == 'X'){
 80865fc:	2858      	cmp	r0, #88	; 0x58
 80865fe:	d107      	bne.n	8086610 <_Z10serialMenuv+0x7b0>
        //calibrate CO2 sensor
        //if(debugging_enabled){
            t6713.calibrate(1);
 8086600:	2101      	movs	r1, #1
 8086602:	4841      	ldr	r0, [pc, #260]	; (8086708 <_Z10serialMenuv+0x8a8>)
 8086604:	f000 ffba 	bl	808757c <_ZN13Telaire_T67139calibrateEi>
        //}else{
         //   t6713.calibrate(0);
        //}
        
        co2_calibration_timer = 180;        //6 minutes if measurement cycle is 2 seconds
 8086608:	4b40      	ldr	r3, [pc, #256]	; (808670c <_Z10serialMenuv+0x8ac>)
 808660a:	22b4      	movs	r2, #180	; 0xb4
 808660c:	601a      	str	r2, [r3, #0]
 808660e:	e42d      	b.n	8085e6c <_Z10serialMenuv+0xc>
        
    
    }
    else if(incomingByte == 'Y')
 8086610:	2859      	cmp	r0, #89	; 0x59
 8086612:	d120      	bne.n	8086656 <_Z10serialMenuv+0x7f6>
    {
        String getMenu = "M&";
 8086614:	493e      	ldr	r1, [pc, #248]	; (8086710 <_Z10serialMenuv+0x8b0>)
 8086616:	a808      	add	r0, sp, #32
 8086618:	f004 fcb3 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
        Serial.println("Going into the 108_L menu");
 808661c:	f005 ff84 	bl	808c528 <_Z16_fetch_usbserialv>
 8086620:	493c      	ldr	r1, [pc, #240]	; (8086714 <_Z10serialMenuv+0x8b4>)
 8086622:	f004 feda 	bl	808b3da <_ZN5Print7printlnEPKc>
        Serial1.print(getMenu);
 8086626:	f006 f8a3 	bl	808c770 <_Z22__fetch_global_Serial1v>
 808662a:	9908      	ldr	r1, [sp, #32]
 808662c:	f004 fec2 	bl	808b3b4 <_ZN5Print5printEPKc>
        delay(100);
 8086630:	2064      	movs	r0, #100	; 0x64
 8086632:	f005 fa7b 	bl	808bb2c <delay>
        String Menu = Serial1.readString();
 8086636:	f006 f89b 	bl	808c770 <_Z22__fetch_global_Serial1v>
 808663a:	4601      	mov	r1, r0
 808663c:	a80c      	add	r0, sp, #48	; 0x30
 808663e:	f005 f8a9 	bl	808b794 <_ZN6Stream10readStringEv>
        Serial.println(Menu);
 8086642:	f005 ff71 	bl	808c528 <_Z16_fetch_usbserialv>
 8086646:	990c      	ldr	r1, [sp, #48]	; 0x30
 8086648:	f004 fec7 	bl	808b3da <_ZN5Print7printlnEPKc>
    {
        String getMenu = "M&";
        Serial.println("Going into the 108_L menu");
        Serial1.print(getMenu);
        delay(100);
        String Menu = Serial1.readString();
 808664c:	a80c      	add	r0, sp, #48	; 0x30
 808664e:	f004 fc51 	bl	808aef4 <_ZN6StringD1Ev>
        
    
    }
    else if(incomingByte == 'Y')
    {
        String getMenu = "M&";
 8086652:	a808      	add	r0, sp, #32
 8086654:	e028      	b.n	80866a8 <_Z10serialMenuv+0x848>
        Serial1.print(getMenu);
        delay(100);
        String Menu = Serial1.readString();
        Serial.println(Menu);
    }
    else if(incomingByte == 'Z'){
 8086656:	285a      	cmp	r0, #90	; 0x5a
 8086658:	d12a      	bne.n	80866b0 <_Z10serialMenuv+0x850>
        Serial.println("Getting cellular information, this may take a while...");
 808665a:	f005 ff65 	bl	808c528 <_Z16_fetch_usbserialv>
 808665e:	492e      	ldr	r1, [pc, #184]	; (8086718 <_Z10serialMenuv+0x8b8>)
 8086660:	f004 febb 	bl	808b3da <_ZN5Print7printlnEPKc>

        Log.info("IMEI=%s", CellularHelper.getIMEI().c_str());
 8086664:	492d      	ldr	r1, [pc, #180]	; (808671c <_Z10serialMenuv+0x8bc>)
 8086666:	a80c      	add	r0, sp, #48	; 0x30
 8086668:	f003 fc76 	bl	8089f58 <_ZNK19CellularHelperClass7getIMEIEv>
 808666c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 808666e:	492c      	ldr	r1, [pc, #176]	; (8086720 <_Z10serialMenuv+0x8c0>)
 8086670:	482c      	ldr	r0, [pc, #176]	; (8086724 <_Z10serialMenuv+0x8c4>)
 8086672:	f7fa fb99 	bl	8080da8 <_ZNK5spark6Logger4infoEPKcz>
 8086676:	a80c      	add	r0, sp, #48	; 0x30
 8086678:	f004 fc3c 	bl	808aef4 <_ZN6StringD1Ev>

        Log.info("IMSI=%s", CellularHelper.getIMSI().c_str());
 808667c:	4927      	ldr	r1, [pc, #156]	; (808671c <_Z10serialMenuv+0x8bc>)
 808667e:	a80c      	add	r0, sp, #48	; 0x30
 8086680:	f003 fc86 	bl	8089f90 <_ZNK19CellularHelperClass7getIMSIEv>
 8086684:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8086686:	4928      	ldr	r1, [pc, #160]	; (8086728 <_Z10serialMenuv+0x8c8>)
 8086688:	4826      	ldr	r0, [pc, #152]	; (8086724 <_Z10serialMenuv+0x8c4>)
 808668a:	f7fa fb8d 	bl	8080da8 <_ZNK5spark6Logger4infoEPKcz>
 808668e:	a80c      	add	r0, sp, #48	; 0x30
 8086690:	f004 fc30 	bl	808aef4 <_ZN6StringD1Ev>

        Log.info("ICCID=%s", CellularHelper.getICCID().c_str());
 8086694:	4921      	ldr	r1, [pc, #132]	; (808671c <_Z10serialMenuv+0x8bc>)
 8086696:	a80c      	add	r0, sp, #48	; 0x30
 8086698:	f003 fc96 	bl	8089fc8 <_ZNK19CellularHelperClass8getICCIDEv>
 808669c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 808669e:	4923      	ldr	r1, [pc, #140]	; (808672c <_Z10serialMenuv+0x8cc>)
 80866a0:	4820      	ldr	r0, [pc, #128]	; (8086724 <_Z10serialMenuv+0x8c4>)
 80866a2:	f7fa fb81 	bl	8080da8 <_ZNK5spark6Logger4infoEPKcz>
 80866a6:	a80c      	add	r0, sp, #48	; 0x30
 80866a8:	f004 fc24 	bl	808aef4 <_ZN6StringD1Ev>
 80866ac:	f7ff bbde 	b.w	8085e6c <_Z10serialMenuv+0xc>
        //if(serial_cellular_enabled){

        //}else{
        //    Serial.println("Cellular not enabled.  Please enable cellular first!");
        //}
    }else if(incomingByte == '?'){
 80866b0:	283f      	cmp	r0, #63	; 0x3f
 80866b2:	f47f abdb 	bne.w	8085e6c <_Z10serialMenuv+0xc>
        outputSerialMenuOptions();
 80866b6:	f7fd fde3 	bl	8084280 <_Z23outputSerialMenuOptionsv>
 80866ba:	f7ff bbd7 	b.w	8085e6c <_Z10serialMenuv+0xc>
    }
  }
  Serial.println("Exiting serial menu...");
 80866be:	f005 ff33 	bl	808c528 <_Z16_fetch_usbserialv>
 80866c2:	491b      	ldr	r1, [pc, #108]	; (8086730 <_Z10serialMenuv+0x8d0>)
 80866c4:	f004 fe89 	bl	808b3da <_ZN5Print7printlnEPKc>

}
 80866c8:	b011      	add	sp, #68	; 0x44
 80866ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80866cc:	0809384e 	.word	0x0809384e
 80866d0:	200007f0 	.word	0x200007f0
 80866d4:	08093861 	.word	0x08093861
 80866d8:	20000700 	.word	0x20000700
 80866dc:	08091b14 	.word	0x08091b14
 80866e0:	42c80000 	.word	0x42c80000
 80866e4:	0809389c 	.word	0x0809389c
 80866e8:	2000085c 	.word	0x2000085c
 80866ec:	080938cd 	.word	0x080938cd
 80866f0:	2000021c 	.word	0x2000021c
 80866f4:	080938ef 	.word	0x080938ef
 80866f8:	0809390d 	.word	0x0809390d
 80866fc:	20000b84 	.word	0x20000b84
 8086700:	08093955 	.word	0x08093955
 8086704:	08093979 	.word	0x08093979
 8086708:	20000b90 	.word	0x20000b90
 808670c:	200006bc 	.word	0x200006bc
 8086710:	0809399c 	.word	0x0809399c
 8086714:	0809399f 	.word	0x0809399f
 8086718:	080939b9 	.word	0x080939b9
 808671c:	20000cf0 	.word	0x20000cf0
 8086720:	080939f0 	.word	0x080939f0
 8086724:	20000cf8 	.word	0x20000cf8
 8086728:	080939f8 	.word	0x080939f8
 808672c:	08093a00 	.word	0x08093a00
 8086730:	08093a09 	.word	0x08093a09

08086734 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v>:
    Serial.println("!:  Continuous serial output of VOC's");
    Serial.println("@   Enable/Disable Sensible-iot data push.  If enabled, time zone will be ignored - UTC will be used.");
    Serial.println("#   Enable/Disable cartopper power mode.  If enabled, absense of external power will stop cellular.");
    Serial.println("?:  Output this menu");
    Serial.println("x:  Exits this menu");
  }
 8086734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8086736:	4b5a      	ldr	r3, [pc, #360]	; (80868a0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x16c>)
 8086738:	2400      	movs	r4, #0
 808673a:	601c      	str	r4, [r3, #0]
#include "SdFat.h"
#include "HIH61XX.h"
#include "google-maps-device-locator.h"
#include "CellularHelper.h"

GoogleMapsDeviceLocator locator;
 808673c:	4f59      	ldr	r7, [pc, #356]	; (80868a4 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x170>)
 808673e:	4b5a      	ldr	r3, [pc, #360]	; (80868a8 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x174>)
 8086740:	4d5a      	ldr	r5, [pc, #360]	; (80868ac <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x178>)
 8086742:	2601      	movs	r6, #1
 8086744:	701e      	strb	r6, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 8086746:	f003 fdab 	bl	808a2a0 <HAL_Pin_Map>
 808674a:	4638      	mov	r0, r7
 808674c:	f002 fedc 	bl	8089508 <_ZN23GoogleMapsDeviceLocatorC1Ev>
 8086750:	462a      	mov	r2, r5
 8086752:	4957      	ldr	r1, [pc, #348]	; (80868b0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x17c>)
 8086754:	4638      	mov	r0, r7
 8086756:	f006 fb0d 	bl	808cd74 <__aeabi_atexit>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 808675a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 808675e:	4b55      	ldr	r3, [pc, #340]	; (80868b4 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x180>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8086760:	2003      	movs	r0, #3
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8086762:	701c      	strb	r4, [r3, #0]
 8086764:	805c      	strh	r4, [r3, #2]
 8086766:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8086768:	f003 ff82 	bl	808a670 <set_system_mode>



//manually control connection to cellular network
SYSTEM_MODE(MANUAL);
SYSTEM_THREAD(ENABLED);
 808676c:	4621      	mov	r1, r4
 808676e:	4630      	mov	r0, r6
 8086770:	f003 ff8e 	bl	808a690 <system_thread_set_state>

//global objects
Adafruit_BME680 bme; // I2C
 8086774:	f04f 31ff 	mov.w	r1, #4294967295
 8086778:	484f      	ldr	r0, [pc, #316]	; (80868b8 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x184>)
 808677a:	f002 fb3d 	bl	8088df8 <_ZN15Adafruit_BME680C1Ea>
Telaire_T6713 t6713;  //CO2 sensor
 808677e:	484f      	ldr	r0, [pc, #316]	; (80868bc <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x188>)
 8086780:	f000 fd5f 	bl	8087242 <_ZN13Telaire_T6713C1Ev>
LMP91000 lmp91000;
 8086784:	484e      	ldr	r0, [pc, #312]	; (80868c0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x18c>)
 8086786:	f000 fb13 	bl	8086db0 <_ZN8LMP91000C1Ev>
Adafruit_ADS1115 ads1(0x49); //Set I2C address of ADC1
Adafruit_ADS1115 ads2(0x4A); //Set I2C address of ADC2
FuelGauge fuel;
 808678a:	4e4e      	ldr	r6, [pc, #312]	; (80868c4 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x190>)

//global objects
Adafruit_BME680 bme; // I2C
Telaire_T6713 t6713;  //CO2 sensor
LMP91000 lmp91000;
Adafruit_ADS1115 ads1(0x49); //Set I2C address of ADC1
 808678c:	2149      	movs	r1, #73	; 0x49
 808678e:	484e      	ldr	r0, [pc, #312]	; (80868c8 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x194>)
 8086790:	f000 fc55 	bl	808703e <_ZN16Adafruit_ADS1115C1Eh>
Adafruit_ADS1115 ads2(0x4A); //Set I2C address of ADC2
 8086794:	214a      	movs	r1, #74	; 0x4a
 8086796:	484d      	ldr	r0, [pc, #308]	; (80868cc <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x198>)
 8086798:	f000 fc51 	bl	808703e <_ZN16Adafruit_ADS1115C1Eh>
FuelGauge fuel;
 808679c:	4621      	mov	r1, r4
 808679e:	4630      	mov	r0, r6
 80867a0:	f005 f9f8 	bl	808bb94 <_ZN9FuelGaugeC1Eb>
 80867a4:	4630      	mov	r0, r6
GPS gps;
PMIC pmic;
 80867a6:	4e4a      	ldr	r6, [pc, #296]	; (80868d0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x19c>)
Adafruit_BME680 bme; // I2C
Telaire_T6713 t6713;  //CO2 sensor
LMP91000 lmp91000;
Adafruit_ADS1115 ads1(0x49); //Set I2C address of ADC1
Adafruit_ADS1115 ads2(0x4A); //Set I2C address of ADC2
FuelGauge fuel;
 80867a8:	462a      	mov	r2, r5
 80867aa:	494a      	ldr	r1, [pc, #296]	; (80868d4 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1a0>)
 80867ac:	f006 fae2 	bl	808cd74 <__aeabi_atexit>
GPS gps;
PMIC pmic;
 80867b0:	4621      	mov	r1, r4
 80867b2:	4630      	mov	r0, r6
 80867b4:	f004 f8bf 	bl	808a936 <_ZN4PMICC1Eb>
 80867b8:	4630      	mov	r0, r6
PowerCheck powerCheck;
 80867ba:	4e47      	ldr	r6, [pc, #284]	; (80868d8 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1a4>)
LMP91000 lmp91000;
Adafruit_ADS1115 ads1(0x49); //Set I2C address of ADC1
Adafruit_ADS1115 ads2(0x4A); //Set I2C address of ADC2
FuelGauge fuel;
GPS gps;
PMIC pmic;
 80867bc:	462a      	mov	r2, r5
 80867be:	4947      	ldr	r1, [pc, #284]	; (80868dc <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1a8>)
 80867c0:	f006 fad8 	bl	808cd74 <__aeabi_atexit>
PowerCheck powerCheck;
 80867c4:	4630      	mov	r0, r6
 80867c6:	f000 fb83 	bl	8086ed0 <_ZN10PowerCheckC1Ev>
 80867ca:	462a      	mov	r2, r5
 80867cc:	4944      	ldr	r1, [pc, #272]	; (80868e0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1ac>)
 80867ce:	4630      	mov	r0, r6
 80867d0:	f006 fad0 	bl	808cd74 <__aeabi_atexit>
//SerialLogHandler logHandler;
HIH61XX hih(0x27);
 80867d4:	2127      	movs	r1, #39	; 0x27
 80867d6:	4843      	ldr	r0, [pc, #268]	; (80868e4 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1b0>)
 80867d8:	f002 fc66 	bl	80890a8 <_ZN7HIH61XXC1Eh>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
 80867dc:	4b42      	ldr	r3, [pc, #264]	; (80868e8 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1b4>)
#else  // SD_SPI_CONFIGURATION < 3
  typedef SdSpiBase m_spi_t;
#endif  // SD_SPI_CONFIGURATION < 3
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_selected(false),
                m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
 80867de:	2219      	movs	r2, #25
 80867e0:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
 * \brief Main file system class for %SdFat library.
 */
class SdFat : public SdFatBase {
 public:
#if IMPLEMENT_SPI_INTERFACE_SELECTION
  SdFat() {
 80867e4:	4a41      	ldr	r2, [pc, #260]	; (80868ec <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1b8>)
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 80867e6:	4842      	ldr	r0, [pc, #264]	; (80868f0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1bc>)
 80867e8:	601a      	str	r2, [r3, #0]
unsigned long lastCheck = 0;
char lastStatus[256];

//sdcard
SdFat sd;
SdFile file;
 80867ea:	4e42      	ldr	r6, [pc, #264]	; (80868f4 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1c0>)
/**
 * \class SdSpi
 * \brief SPI class for access to SD and SDHC flash memory cards.
 */
#if SD_SPI_CONFIGURATION >= 3
class SdSpi : public SdSpiBase {
 80867ec:	4a42      	ldr	r2, [pc, #264]	; (80868f8 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1c4>)
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 public:
  SdFile() {}
 80867ee:	4f43      	ldr	r7, [pc, #268]	; (80868fc <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1c8>)
 80867f0:	71dc      	strb	r4, [r3, #7]
 80867f2:	f883 4440 	strb.w	r4, [r3, #1088]	; 0x440
 80867f6:	f883 4441 	strb.w	r4, [r3, #1089]	; 0x441
 80867fa:	f883 4468 	strb.w	r4, [r3, #1128]	; 0x468
 80867fe:	f883 446d 	strb.w	r4, [r3, #1133]	; 0x46d
 8086802:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   */
  void send(const uint8_t* buf, size_t n);
  /** \return true - uses SPI transactions */
#if IMPLEMENT_SPI_INTERFACE_SELECTION
  void setSpiIf(uint8_t spiIf) {
    m_spiIf = spiIf;
 8086806:	f883 4474 	strb.w	r4, [r3, #1140]	; 0x474
 808680a:	462a      	mov	r2, r5
 808680c:	4631      	mov	r1, r6
 808680e:	7204      	strb	r4, [r0, #8]
 8086810:	7244      	strb	r4, [r0, #9]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8086812:	6044      	str	r4, [r0, #4]
 8086814:	6007      	str	r7, [r0, #0]
 8086816:	f006 faad 	bl	808cd74 <__aeabi_atexit>
 808681a:	4839      	ldr	r0, [pc, #228]	; (8086900 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1cc>)
SdFile log_file;
 808681c:	462a      	mov	r2, r5
 808681e:	4631      	mov	r1, r6
 8086820:	7204      	strb	r4, [r0, #8]
 8086822:	7244      	strb	r4, [r0, #9]
 8086824:	6044      	str	r4, [r0, #4]
 8086826:	6007      	str	r7, [r0, #0]
 8086828:	f006 faa4 	bl	808cd74 <__aeabi_atexit>
 808682c:	4835      	ldr	r0, [pc, #212]	; (8086904 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1d0>)
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 808682e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
File file1;
String fileName;
 8086832:	4e35      	ldr	r6, [pc, #212]	; (8086908 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1d4>)
 8086834:	4f35      	ldr	r7, [pc, #212]	; (808690c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1d8>)
 8086836:	6083      	str	r3, [r0, #8]
class File : public FatFile, public Stream {
#else  // ARDUINO_FILE_USES_STREAM
class File : public FatFile, public Print {
#endif  // ARDUINO_FILE_USES_STREAM
 public:
  File() {}
 8086838:	4b35      	ldr	r3, [pc, #212]	; (8086910 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1dc>)

//sdcard
SdFat sd;
SdFile file;
SdFile log_file;
File file1;
 808683a:	462a      	mov	r2, r5
 808683c:	7404      	strb	r4, [r0, #16]
 808683e:	7444      	strb	r4, [r0, #17]
 8086840:	6044      	str	r4, [r0, #4]
 8086842:	4934      	ldr	r1, [pc, #208]	; (8086914 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1e0>)
 8086844:	6003      	str	r3, [r0, #0]
String fileName;
 8086846:	4c34      	ldr	r4, [pc, #208]	; (8086918 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1e4>)

//sdcard
SdFat sd;
SdFile file;
SdFile log_file;
File file1;
 8086848:	f006 fa94 	bl	808cd74 <__aeabi_atexit>
String fileName;
 808684c:	4631      	mov	r1, r6
 808684e:	4638      	mov	r0, r7
 8086850:	f004 fb97 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
 8086854:	4638      	mov	r0, r7
String logFileName;
 8086856:	4f31      	ldr	r7, [pc, #196]	; (808691c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1e8>)
//sdcard
SdFat sd;
SdFile file;
SdFile log_file;
File file1;
String fileName;
 8086858:	462a      	mov	r2, r5
 808685a:	4621      	mov	r1, r4
 808685c:	f006 fa8a 	bl	808cd74 <__aeabi_atexit>
String logFileName;
 8086860:	4631      	mov	r1, r6
 8086862:	4638      	mov	r0, r7
 8086864:	f004 fb8d 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
 8086868:	4638      	mov	r0, r7
int file_started = 0;
int log_file_started = 0;

//wifi
String ssid; //wifi network name
 808686a:	4f2d      	ldr	r7, [pc, #180]	; (8086920 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1ec>)
SdFat sd;
SdFile file;
SdFile log_file;
File file1;
String fileName;
String logFileName;
 808686c:	462a      	mov	r2, r5
 808686e:	4621      	mov	r1, r4
 8086870:	f006 fa80 	bl	808cd74 <__aeabi_atexit>
int file_started = 0;
int log_file_started = 0;

//wifi
String ssid; //wifi network name
 8086874:	4631      	mov	r1, r6
 8086876:	4638      	mov	r0, r7
 8086878:	f004 fb83 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
 808687c:	4638      	mov	r0, r7
String password; //wifi network password
 808687e:	4f29      	ldr	r7, [pc, #164]	; (8086924 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1f0>)
String logFileName;
int file_started = 0;
int log_file_started = 0;

//wifi
String ssid; //wifi network name
 8086880:	462a      	mov	r2, r5
 8086882:	4621      	mov	r1, r4
 8086884:	f006 fa76 	bl	808cd74 <__aeabi_atexit>
String password; //wifi network password
 8086888:	4631      	mov	r1, r6
 808688a:	4638      	mov	r0, r7
 808688c:	f004 fb79 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
 8086890:	462a      	mov	r2, r5
 8086892:	4621      	mov	r1, r4
 8086894:	4638      	mov	r0, r7
    Serial.println("!:  Continuous serial output of VOC's");
    Serial.println("@   Enable/Disable Sensible-iot data push.  If enabled, time zone will be ignored - UTC will be used.");
    Serial.println("#   Enable/Disable cartopper power mode.  If enabled, absense of external power will stop cellular.");
    Serial.println("?:  Output this menu");
    Serial.println("x:  Exits this menu");
  }
 8086896:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
int file_started = 0;
int log_file_started = 0;

//wifi
String ssid; //wifi network name
String password; //wifi network password
 808689a:	f006 ba6b 	b.w	808cd74 <__aeabi_atexit>
 808689e:	bf00      	nop
 80868a0:	20000854 	.word	0x20000854
 80868a4:	20000b38 	.word	0x20000b38
 80868a8:	200006f4 	.word	0x200006f4
 80868ac:	200001d0 	.word	0x200001d0
 80868b0:	080892a1 	.word	0x080892a1
 80868b4:	20000b08 	.word	0x20000b08
 80868b8:	20000700 	.word	0x20000700
 80868bc:	20000b90 	.word	0x20000b90
 80868c0:	2000022c 	.word	0x2000022c
 80868c4:	20000848 	.word	0x20000848
 80868c8:	20000a54 	.word	0x20000a54
 80868cc:	20000a5a 	.word	0x20000a5a
 80868d0:	20000aec 	.word	0x20000aec
 80868d4:	0808bbb3 	.word	0x0808bbb3
 80868d8:	20000798 	.word	0x20000798
 80868dc:	0808a955 	.word	0x0808a955
 80868e0:	08086ea5 	.word	0x08086ea5
 80868e4:	20000860 	.word	0x20000860
 80868e8:	2000023c 	.word	0x2000023c
 80868ec:	08091684 	.word	0x08091684
 80868f0:	200006c0 	.word	0x200006c0
 80868f4:	08080b7f 	.word	0x08080b7f
 80868f8:	08093c4c 	.word	0x08093c4c
 80868fc:	0809166c 	.word	0x0809166c
 8086900:	20000ba0 	.word	0x20000ba0
 8086904:	20000800 	.word	0x20000800
 8086908:	08094100 	.word	0x08094100
 808690c:	20000af4 	.word	0x20000af4
 8086910:	08091644 	.word	0x08091644
 8086914:	08080b81 	.word	0x08080b81
 8086918:	0808aef5 	.word	0x0808aef5
 808691c:	200007bc 	.word	0x200007bc
 8086920:	2000020c 	.word	0x2000020c
 8086924:	200001d8 	.word	0x200001d8

08086928 <_Z11readHIH8120v>:
        Serial1.print("&");
        sample_counter += 1;
    }
}

void readHIH8120(void){
 8086928:	b510      	push	{r4, lr}
    hih.start();
 808692a:	4c04      	ldr	r4, [pc, #16]	; (808693c <_Z11readHIH8120v+0x14>)
 808692c:	4620      	mov	r0, r4
 808692e:	f002 fbad 	bl	808908c <_ZN7HIH61XX5startEv>

    //  request an update of the humidity and temperature
    hih.update();
 8086932:	4620      	mov	r0, r4
    Serial.print("Temperature: ");
    Serial.print(hih.temperature(), 5);
    Serial.println(" C (");
    Serial.print(hih.temperature_Raw());
    Serial.println(")");*/
}
 8086934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void readHIH8120(void){
    hih.start();

    //  request an update of the humidity and temperature
    hih.update();
 8086938:	f002 bbc0 	b.w	80890bc <_ZN7HIH61XX6updateEv>
 808693c:	20000860 	.word	0x20000860

08086940 <loop>:
          status_word.status_int |= 0x0004;
      }
  }
}

void loop() {
 8086940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    if(car_topper_power_en && powerCheck.getHasPower() == 0){
 8086944:	4ba0      	ldr	r3, [pc, #640]	; (8086bc8 <loop+0x288>)
          status_word.status_int |= 0x0004;
      }
  }
}

void loop() {
 8086946:	b08a      	sub	sp, #40	; 0x28

    if(car_topper_power_en && powerCheck.getHasPower() == 0){
 8086948:	681b      	ldr	r3, [r3, #0]
 808694a:	b12b      	cbz	r3, 8086958 <loop+0x18>
 808694c:	4b9f      	ldr	r3, [pc, #636]	; (8086bcc <loop+0x28c>)
 808694e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8086952:	2b00      	cmp	r3, #0
 8086954:	f000 81b0 	beq.w	8086cb8 <loop+0x378>
        
        goToSleepBattery();
    }
    //Serial.println("locator loop");
    locator.loop();
 8086958:	489d      	ldr	r0, [pc, #628]	; (8086bd0 <loop+0x290>)
 808695a:	f002 fedf 	bl	808971c <_ZN23GoogleMapsDeviceLocator4loopEv>
    

    if(output_only_particles == 1){
 808695e:	4b9d      	ldr	r3, [pc, #628]	; (8086bd4 <loop+0x294>)
 8086960:	681b      	ldr	r3, [r3, #0]
 8086962:	2b01      	cmp	r3, #1
 8086964:	d101      	bne.n	808696a <loop+0x2a>
        outputParticles();
 8086966:	f7fb fd0b 	bl	8082380 <_Z15outputParticlesv>
    }
    //read temp, press, humidity, and TVOCs
    if(debugging_enabled){
 808696a:	4c9b      	ldr	r4, [pc, #620]	; (8086bd8 <loop+0x298>)
 808696c:	6823      	ldr	r3, [r4, #0]
 808696e:	b173      	cbz	r3, 808698e <loop+0x4e>
      Serial.println("Before reading bme");
 8086970:	f005 fdda 	bl	808c528 <_Z16_fetch_usbserialv>
 8086974:	4999      	ldr	r1, [pc, #612]	; (8086bdc <loop+0x29c>)
 8086976:	f004 fd30 	bl	808b3da <_ZN5Print7printlnEPKc>
      writeLogFile("before reading bme");
 808697a:	4999      	ldr	r1, [pc, #612]	; (8086be0 <loop+0x2a0>)
 808697c:	a806      	add	r0, sp, #24
 808697e:	f004 fb00 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
 8086982:	a806      	add	r0, sp, #24
 8086984:	f7fb f9c4 	bl	8081d10 <_Z12writeLogFile6String>
 8086988:	a806      	add	r0, sp, #24
 808698a:	f004 fab3 	bl	808aef4 <_ZN6StringD1Ev>
    }
    if (! bme.performReading()) {
 808698e:	4d95      	ldr	r5, [pc, #596]	; (8086be4 <loop+0x2a4>)
 8086990:	4628      	mov	r0, r5
 8086992:	f002 fac3 	bl	8088f1c <_ZN15Adafruit_BME68014performReadingEv>
 8086996:	b978      	cbnz	r0, 80869b8 <loop+0x78>
      Serial.println("Failed to read BME680");
 8086998:	f005 fdc6 	bl	808c528 <_Z16_fetch_usbserialv>
 808699c:	4992      	ldr	r1, [pc, #584]	; (8086be8 <loop+0x2a8>)
 808699e:	f004 fd1c 	bl	808b3da <_ZN5Print7printlnEPKc>
      writeLogFile("Failed to read BME680");
 80869a2:	4991      	ldr	r1, [pc, #580]	; (8086be8 <loop+0x2a8>)
 80869a4:	a806      	add	r0, sp, #24
 80869a6:	f004 faec 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
 80869aa:	a806      	add	r0, sp, #24
 80869ac:	f7fb f9b0 	bl	8081d10 <_Z12writeLogFile6String>
 80869b0:	a806      	add	r0, sp, #24
 80869b2:	f004 fa9f 	bl	808aef4 <_ZN6StringD1Ev>
      return;
 80869b6:	e1d9      	b.n	8086d6c <loop+0x42c>
    }else{
      if(debugging_enabled){
 80869b8:	6823      	ldr	r3, [r4, #0]
 80869ba:	b1cb      	cbz	r3, 80869f0 <loop+0xb0>
        Serial.printf("Temp=%1.1f, press=%1.1f, rh=%1.1f\n\r", bme.temperature, bme.pressure/100, bme.humidity);
 80869bc:	f005 fdb4 	bl	808c528 <_Z16_fetch_usbserialv>
 80869c0:	4606      	mov	r6, r0
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 80869c2:	68a8      	ldr	r0, [r5, #8]
 80869c4:	f006 fc8c 	bl	808d2e0 <__aeabi_f2d>
 80869c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80869cc:	4987      	ldr	r1, [pc, #540]	; (8086bec <loop+0x2ac>)
 80869ce:	6868      	ldr	r0, [r5, #4]
 80869d0:	f007 f9e4 	bl	808dd9c <__aeabi_fdiv>
 80869d4:	f006 fc84 	bl	808d2e0 <__aeabi_f2d>
 80869d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80869dc:	6828      	ldr	r0, [r5, #0]
 80869de:	f006 fc7f 	bl	808d2e0 <__aeabi_f2d>
 80869e2:	4a83      	ldr	r2, [pc, #524]	; (8086bf0 <loop+0x2b0>)
 80869e4:	e9cd 0100 	strd	r0, r1, [sp]
 80869e8:	2100      	movs	r1, #0
 80869ea:	4630      	mov	r0, r6
 80869ec:	f004 fe2a 	bl	808b644 <_ZN5Print11printf_implEbPKcz>
      }
    }
    if(hih8120_enabled){
 80869f0:	4b80      	ldr	r3, [pc, #512]	; (8086bf4 <loop+0x2b4>)
 80869f2:	681b      	ldr	r3, [r3, #0]
 80869f4:	b10b      	cbz	r3, 80869fa <loop+0xba>
        readHIH8120();
 80869f6:	f7ff ff97 	bl	8086928 <_Z11readHIH8120v>
    }
    readGpsStream();
 80869fa:	f7fb f9d9 	bl	8081db0 <_Z13readGpsStreamv>


    //read CO values and apply calibration factors
    CO_float = readCO();
 80869fe:	f7ff f9ed 	bl	8085ddc <_Z6readCOv>
 8086a02:	4b7d      	ldr	r3, [pc, #500]	; (8086bf8 <loop+0x2b8>)


    //CO_float_2 += CO_zero_2;
    //CO_float_2 *= CO_slope_2;

    CO2_float = readCO2();
 8086a04:	4e7d      	ldr	r6, [pc, #500]	; (8086bfc <loop+0x2bc>)
    }
    readGpsStream();


    //read CO values and apply calibration factors
    CO_float = readCO();
 8086a06:	6018      	str	r0, [r3, #0]


    //CO_float_2 += CO_zero_2;
    //CO_float_2 *= CO_slope_2;

    CO2_float = readCO2();
 8086a08:	f7fa fffc 	bl	8081a04 <_Z7readCO2v>


    //correct for altitude
    float pressure_correction = bme.pressure/100;
 8086a0c:	4977      	ldr	r1, [pc, #476]	; (8086bec <loop+0x2ac>)


    //CO_float_2 += CO_zero_2;
    //CO_float_2 *= CO_slope_2;

    CO2_float = readCO2();
 8086a0e:	6030      	str	r0, [r6, #0]


    //correct for altitude
    float pressure_correction = bme.pressure/100;
 8086a10:	6868      	ldr	r0, [r5, #4]
 8086a12:	f007 f9c3 	bl	808dd9c <__aeabi_fdiv>
    if(pressure_correction > LOW_PRESSURE_LIMIT && pressure_correction < HIGH_PRESSURE_LIMIT){
 8086a16:	4975      	ldr	r1, [pc, #468]	; (8086bec <loop+0x2ac>)

    CO2_float = readCO2();


    //correct for altitude
    float pressure_correction = bme.pressure/100;
 8086a18:	4607      	mov	r7, r0
    if(pressure_correction > LOW_PRESSURE_LIMIT && pressure_correction < HIGH_PRESSURE_LIMIT){
 8086a1a:	f007 fac7 	bl	808dfac <__aeabi_fcmpgt>
 8086a1e:	4635      	mov	r5, r6
 8086a20:	b1b8      	cbz	r0, 8086a52 <loop+0x112>
 8086a22:	4977      	ldr	r1, [pc, #476]	; (8086c00 <loop+0x2c0>)
 8086a24:	4638      	mov	r0, r7
 8086a26:	f007 faa3 	bl	808df70 <__aeabi_fcmplt>
 8086a2a:	b190      	cbz	r0, 8086a52 <loop+0x112>
        pressure_correction /= SEALEVELPRESSURE_HPA;
 8086a2c:	4975      	ldr	r1, [pc, #468]	; (8086c04 <loop+0x2c4>)
 8086a2e:	4638      	mov	r0, r7
 8086a30:	f007 f9b4 	bl	808dd9c <__aeabi_fdiv>
        if(debugging_enabled){
 8086a34:	6823      	ldr	r3, [r4, #0]


    //correct for altitude
    float pressure_correction = bme.pressure/100;
    if(pressure_correction > LOW_PRESSURE_LIMIT && pressure_correction < HIGH_PRESSURE_LIMIT){
        pressure_correction /= SEALEVELPRESSURE_HPA;
 8086a36:	4606      	mov	r6, r0
        if(debugging_enabled){
 8086a38:	b12b      	cbz	r3, 8086a46 <loop+0x106>
            Serial.printf("pressure correction factor for CO2:%1.2f\n\r", pressure_correction);
 8086a3a:	f005 fd75 	bl	808c528 <_Z16_fetch_usbserialv>
 8086a3e:	4632      	mov	r2, r6
 8086a40:	4971      	ldr	r1, [pc, #452]	; (8086c08 <loop+0x2c8>)
 8086a42:	f7fe ff8b 	bl	808595c <_ZN5Print6printfIIfEEEjPKcDpT_>

        }
        CO2_float *= pressure_correction;
 8086a46:	6828      	ldr	r0, [r5, #0]
 8086a48:	4631      	mov	r1, r6
 8086a4a:	f007 f8f3 	bl	808dc34 <__aeabi_fmul>
 8086a4e:	6028      	str	r0, [r5, #0]
 8086a50:	e00a      	b.n	8086a68 <loop+0x128>
    }else{
        Serial.println("Error: Pressure out of range, not using pressure correction for CO2.");
 8086a52:	f005 fd69 	bl	808c528 <_Z16_fetch_usbserialv>
 8086a56:	496d      	ldr	r1, [pc, #436]	; (8086c0c <loop+0x2cc>)
 8086a58:	f004 fcbf 	bl	808b3da <_ZN5Print7printlnEPKc>
        Serial.printf("Pressure=%1.2f\n\r", pressure_correction);
 8086a5c:	f005 fd64 	bl	808c528 <_Z16_fetch_usbserialv>
 8086a60:	463a      	mov	r2, r7
 8086a62:	496b      	ldr	r1, [pc, #428]	; (8086c10 <loop+0x2d0>)
 8086a64:	f7fe ff7a 	bl	808595c <_ZN5Print6printfIIfEEEjPKcDpT_>

    }
    // This line will always grab the Ozone data from the 108. I am doing this because this is for the AQLite, which will always have a 108.
    getEspOzoneData();
 8086a68:	f7fb fb2a 	bl	80820c0 <_Z15getEspOzoneDatav>


    //sound_average = 0;
    calculateAQI();
 8086a6c:	f7fa fe88 	bl	8081780 <_Z12calculateAQIv>
    sound_average = readSound();
 8086a70:	f7fa ff9a 	bl	80819a8 <_Z9readSoundv>
 8086a74:	4b67      	ldr	r3, [pc, #412]	; (8086c14 <loop+0x2d4>)
    //read PM values and apply calibration factors
    readPlantower();

    pm_25_correction_factor = PM_25_CONSTANT_A + (PM_25_CONSTANT_B*(readHumidity()/100))/(1 - (readHumidity()/100));
 8086a76:	4d68      	ldr	r5, [pc, #416]	; (8086c18 <loop+0x2d8>)
    getEspOzoneData();


    //sound_average = 0;
    calculateAQI();
    sound_average = readSound();
 8086a78:	e9c3 0100 	strd	r0, r1, [r3]
    //read PM values and apply calibration factors
    readPlantower();
 8086a7c:	f7fb fc3c 	bl	80822f8 <_Z13readPlantowerv>

    pm_25_correction_factor = PM_25_CONSTANT_A + (PM_25_CONSTANT_B*(readHumidity()/100))/(1 - (readHumidity()/100));
 8086a80:	f7fa fe34 	bl	80816ec <_Z12readHumidityv>
 8086a84:	4606      	mov	r6, r0
 8086a86:	f7fa fe31 	bl	80816ec <_Z12readHumidityv>
 8086a8a:	4958      	ldr	r1, [pc, #352]	; (8086bec <loop+0x2ac>)
 8086a8c:	4680      	mov	r8, r0
 8086a8e:	4630      	mov	r0, r6
 8086a90:	f007 f984 	bl	808dd9c <__aeabi_fdiv>
 8086a94:	f006 fc24 	bl	808d2e0 <__aeabi_f2d>
 8086a98:	a347      	add	r3, pc, #284	; (adr r3, 8086bb8 <loop+0x278>)
 8086a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8086a9e:	f006 fc73 	bl	808d388 <__aeabi_dmul>
 8086aa2:	4606      	mov	r6, r0
 8086aa4:	460f      	mov	r7, r1
 8086aa6:	4640      	mov	r0, r8
 8086aa8:	4950      	ldr	r1, [pc, #320]	; (8086bec <loop+0x2ac>)
 8086aaa:	f007 f977 	bl	808dd9c <__aeabi_fdiv>
 8086aae:	4601      	mov	r1, r0
 8086ab0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8086ab4:	f006 ffb4 	bl	808da20 <__aeabi_fsub>
 8086ab8:	f006 fc12 	bl	808d2e0 <__aeabi_f2d>
 8086abc:	4602      	mov	r2, r0
 8086abe:	460b      	mov	r3, r1
 8086ac0:	4630      	mov	r0, r6
 8086ac2:	4639      	mov	r1, r7
 8086ac4:	f006 fd8a 	bl	808d5dc <__aeabi_ddiv>
 8086ac8:	a33d      	add	r3, pc, #244	; (adr r3, 8086bc0 <loop+0x280>)
 8086aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8086ace:	f006 faa9 	bl	808d024 <__adddf3>
 8086ad2:	f006 ff51 	bl	808d978 <__aeabi_d2f>
    if(debugging_enabled){
 8086ad6:	6823      	ldr	r3, [r4, #0]
    calculateAQI();
    sound_average = readSound();
    //read PM values and apply calibration factors
    readPlantower();

    pm_25_correction_factor = PM_25_CONSTANT_A + (PM_25_CONSTANT_B*(readHumidity()/100))/(1 - (readHumidity()/100));
 8086ad8:	6028      	str	r0, [r5, #0]
    if(debugging_enabled){
 8086ada:	b1b3      	cbz	r3, 8086b0a <loop+0x1ca>
        Serial.printf("pm2.5 correction factor: %1.2f, %1.2f\n\r", pm_25_correction_factor, readHumidity()/100);
 8086adc:	f005 fd24 	bl	808c528 <_Z16_fetch_usbserialv>
 8086ae0:	682f      	ldr	r7, [r5, #0]
 8086ae2:	4606      	mov	r6, r0
 8086ae4:	f7fa fe02 	bl	80816ec <_Z12readHumidityv>
 8086ae8:	4940      	ldr	r1, [pc, #256]	; (8086bec <loop+0x2ac>)
 8086aea:	f007 f957 	bl	808dd9c <__aeabi_fdiv>
 8086aee:	f006 fbf7 	bl	808d2e0 <__aeabi_f2d>
 8086af2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8086af6:	4638      	mov	r0, r7
 8086af8:	f006 fbf2 	bl	808d2e0 <__aeabi_f2d>
 8086afc:	4a47      	ldr	r2, [pc, #284]	; (8086c1c <loop+0x2dc>)
 8086afe:	e9cd 0100 	strd	r0, r1, [sp]
 8086b02:	2100      	movs	r1, #0
 8086b04:	4630      	mov	r0, r6
 8086b06:	f004 fd9d 	bl	808b644 <_ZN5Print11printf_implEbPKcz>
    }
    corrected_PM_25 = PM2_5Value / pm_25_correction_factor;
 8086b0a:	4b45      	ldr	r3, [pc, #276]	; (8086c20 <loop+0x2e0>)
    corrected_PM_25 = corrected_PM_25 + PM_25_zero;
    corrected_PM_25 = corrected_PM_25 * PM_25_slope;
 8086b0c:	6818      	ldr	r0, [r3, #0]
 8086b0e:	f007 f83d 	bl	808db8c <__aeabi_i2f>
 8086b12:	6829      	ldr	r1, [r5, #0]
 8086b14:	f007 f942 	bl	808dd9c <__aeabi_fdiv>
    pm_25_correction_factor = PM_25_CONSTANT_A + (PM_25_CONSTANT_B*(readHumidity()/100))/(1 - (readHumidity()/100));
    if(debugging_enabled){
        Serial.printf("pm2.5 correction factor: %1.2f, %1.2f\n\r", pm_25_correction_factor, readHumidity()/100);
    }
    corrected_PM_25 = PM2_5Value / pm_25_correction_factor;
    corrected_PM_25 = corrected_PM_25 + PM_25_zero;
 8086b18:	4b42      	ldr	r3, [pc, #264]	; (8086c24 <loop+0x2e4>)
    corrected_PM_25 = corrected_PM_25 * PM_25_slope;
 8086b1a:	4605      	mov	r5, r0
 8086b1c:	6818      	ldr	r0, [r3, #0]
 8086b1e:	f007 f835 	bl	808db8c <__aeabi_i2f>
 8086b22:	4601      	mov	r1, r0
 8086b24:	4628      	mov	r0, r5
 8086b26:	f006 ff7d 	bl	808da24 <__addsf3>
 8086b2a:	4b3f      	ldr	r3, [pc, #252]	; (8086c28 <loop+0x2e8>)
 8086b2c:	6819      	ldr	r1, [r3, #0]
 8086b2e:	f007 f881 	bl	808dc34 <__aeabi_fmul>
 8086b32:	4b3e      	ldr	r3, [pc, #248]	; (8086c2c <loop+0x2ec>)
 8086b34:	6018      	str	r0, [r3, #0]

    //getEspWifiStatus();
    outputDataToESP();
 8086b36:	f7fd ff55 	bl	80849e4 <_Z15outputDataToESPv>

    sample_counter = ++sample_counter;
 8086b3a:	4a3d      	ldr	r2, [pc, #244]	; (8086c30 <loop+0x2f0>)
 8086b3c:	6813      	ldr	r3, [r2, #0]
 8086b3e:	3301      	adds	r3, #1
    if(sample_counter == 99)    {
 8086b40:	2b63      	cmp	r3, #99	; 0x63
          sample_counter = 0;
 8086b42:	bf08      	it	eq
 8086b44:	2300      	moveq	r3, #0
 8086b46:	6013      	str	r3, [r2, #0]
    }

    if (Serial.available() > 0) {
 8086b48:	f005 fcee 	bl	808c528 <_Z16_fetch_usbserialv>
 8086b4c:	6803      	ldr	r3, [r0, #0]
 8086b4e:	691b      	ldr	r3, [r3, #16]
 8086b50:	4798      	blx	r3
 8086b52:	2800      	cmp	r0, #0
 8086b54:	dd1c      	ble.n	8086b90 <loop+0x250>
        // read the incoming byte:
        incomingByte = Serial.read();
 8086b56:	f005 fce7 	bl	808c528 <_Z16_fetch_usbserialv>
 8086b5a:	6803      	ldr	r3, [r0, #0]
 8086b5c:	4d35      	ldr	r5, [pc, #212]	; (8086c34 <loop+0x2f4>)
 8086b5e:	695b      	ldr	r3, [r3, #20]
 8086b60:	4798      	blx	r3
        if(debugging_enabled){
 8086b62:	6823      	ldr	r3, [r4, #0]
          sample_counter = 0;
    }

    if (Serial.available() > 0) {
        // read the incoming byte:
        incomingByte = Serial.read();
 8086b64:	7028      	strb	r0, [r5, #0]
        if(debugging_enabled){
 8086b66:	b14b      	cbz	r3, 8086b7c <loop+0x23c>
            Serial.print("incomming byte:");
 8086b68:	f005 fcde 	bl	808c528 <_Z16_fetch_usbserialv>
 8086b6c:	4932      	ldr	r1, [pc, #200]	; (8086c38 <loop+0x2f8>)
 8086b6e:	f004 fc21 	bl	808b3b4 <_ZN5Print5printEPKc>
            Serial.println(incomingByte);
 8086b72:	f005 fcd9 	bl	808c528 <_Z16_fetch_usbserialv>
 8086b76:	7829      	ldrb	r1, [r5, #0]
 8086b78:	f004 fc39 	bl	808b3ee <_ZN5Print7printlnEc>

        }
        Serial.println(incomingByte);
 8086b7c:	f005 fcd4 	bl	808c528 <_Z16_fetch_usbserialv>
 8086b80:	7829      	ldrb	r1, [r5, #0]
 8086b82:	f004 fc34 	bl	808b3ee <_ZN5Print7printlnEc>
        if(incomingByte == 'm'){
 8086b86:	782b      	ldrb	r3, [r5, #0]
 8086b88:	2b6d      	cmp	r3, #109	; 0x6d
 8086b8a:	d101      	bne.n	8086b90 <loop+0x250>
          serialMenu();
 8086b8c:	f7ff f968 	bl	8085e60 <_Z10serialMenuv>
        }
    }

    if(serial_cellular_enabled){
 8086b90:	4b2a      	ldr	r3, [pc, #168]	; (8086c3c <loop+0x2fc>)
 8086b92:	681b      	ldr	r3, [r3, #0]
 8086b94:	2b00      	cmp	r3, #0
 8086b96:	d057      	beq.n	8086c48 <loop+0x308>
        status_word.status_int |= 0x01;
 8086b98:	4a29      	ldr	r2, [pc, #164]	; (8086c40 <loop+0x300>)
 8086b9a:	8813      	ldrh	r3, [r2, #0]
 8086b9c:	f043 0301 	orr.w	r3, r3, #1
 8086ba0:	8013      	strh	r3, [r2, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8086ba2:	f003 fe21 	bl	808a7e8 <spark_cloud_flag_connected>
        //Serial.println("Cellular is enabled.");
      if (Particle.connected() == false && tried_cellular_connect == false) {
 8086ba6:	2800      	cmp	r0, #0
 8086ba8:	f040 8089 	bne.w	8086cbe <loop+0x37e>
 8086bac:	4b25      	ldr	r3, [pc, #148]	; (8086c44 <loop+0x304>)
 8086bae:	781a      	ldrb	r2, [r3, #0]
 8086bb0:	2a00      	cmp	r2, #0
 8086bb2:	f040 8084 	bne.w	8086cbe <loop+0x37e>
 8086bb6:	e091      	b.n	8086cdc <loop+0x39c>
 8086bb8:	b4395810 	.word	0xb4395810
 8086bbc:	3fbe76c8 	.word	0x3fbe76c8
 8086bc0:	70a3d70a 	.word	0x70a3d70a
 8086bc4:	3ff30a3d 	.word	0x3ff30a3d
 8086bc8:	2000021c 	.word	0x2000021c
 8086bcc:	20000798 	.word	0x20000798
 8086bd0:	20000b38 	.word	0x20000b38
 8086bd4:	200007f0 	.word	0x200007f0
 8086bd8:	20000b10 	.word	0x20000b10
 8086bdc:	08093a20 	.word	0x08093a20
 8086be0:	08093a33 	.word	0x08093a33
 8086be4:	20000700 	.word	0x20000700
 8086be8:	08091b14 	.word	0x08091b14
 8086bec:	42c80000 	.word	0x42c80000
 8086bf0:	080938a9 	.word	0x080938a9
 8086bf4:	200001f4 	.word	0x200001f4
 8086bf8:	20000b1c 	.word	0x20000b1c
 8086bfc:	20000228 	.word	0x20000228
 8086c00:	44bb8000 	.word	0x44bb8000
 8086c04:	447d5000 	.word	0x447d5000
 8086c08:	08093a46 	.word	0x08093a46
 8086c0c:	08093a71 	.word	0x08093a71
 8086c10:	08093ab6 	.word	0x08093ab6
 8086c14:	20000b28 	.word	0x20000b28
 8086c18:	200008f0 	.word	0x200008f0
 8086c1c:	08093ac7 	.word	0x08093ac7
 8086c20:	200009b8 	.word	0x200009b8
 8086c24:	20000788 	.word	0x20000788
 8086c28:	200007ec 	.word	0x200007ec
 8086c2c:	20000930 	.word	0x20000930
 8086c30:	2000077c 	.word	0x2000077c
 8086c34:	20000790 	.word	0x20000790
 8086c38:	08093aef 	.word	0x08093aef
 8086c3c:	20000224 	.word	0x20000224
 8086c40:	20000b88 	.word	0x20000b88
 8086c44:	20000b14 	.word	0x20000b14
 8086c48:	f003 fdce 	bl	808a7e8 <spark_cloud_flag_connected>
        }
        tried_cellular_connect = false;
      }
    }else{
        //Serial.println("Cellular is disabled.");
      if (Particle.connected() == true) {
 8086c4c:	b198      	cbz	r0, 8086c76 <loop+0x336>
          if(debugging_enabled){
 8086c4e:	6823      	ldr	r3, [r4, #0]
 8086c50:	b173      	cbz	r3, 8086c70 <loop+0x330>
            Serial.println("Disconnecting from cellular network");
 8086c52:	f005 fc69 	bl	808c528 <_Z16_fetch_usbserialv>
 8086c56:	4947      	ldr	r1, [pc, #284]	; (8086d74 <loop+0x434>)
 8086c58:	f004 fbbf 	bl	808b3da <_ZN5Print7printlnEPKc>
            writeLogFile("Disconnecting from cellular network");
 8086c5c:	4945      	ldr	r1, [pc, #276]	; (8086d74 <loop+0x434>)
 8086c5e:	a806      	add	r0, sp, #24
 8086c60:	f004 f98f 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
 8086c64:	a806      	add	r0, sp, #24
 8086c66:	f7fb f853 	bl	8081d10 <_Z12writeLogFile6String>
 8086c6a:	a806      	add	r0, sp, #24
 8086c6c:	f004 f942 	bl	808aef4 <_ZN6StringD1Ev>
          }
          Cellular.off();
 8086c70:	4841      	ldr	r0, [pc, #260]	; (8086d78 <loop+0x438>)
 8086c72:	f7fa f87b 	bl	8080d6c <_ZN5spark13CellularClass3offEv>
      }
    }

    //check power
    powerCheck.loop();
 8086c76:	4d41      	ldr	r5, [pc, #260]	; (8086d7c <loop+0x43c>)
 8086c78:	4628      	mov	r0, r5
 8086c7a:	f000 f949 	bl	8086f10 <_ZN10PowerCheck4loopEv>

	//Serial.printf("hasPower=%d hasBattery=%d isCharging=%d\n\r", powerCheck.getHasPower(), powerCheck.getHasBattery(), powerCheck.getIsCharging());
    if((battery_threshold_enable == 1) && (fuel.getSoC() < BATTERY_THRESHOLD) && (powerCheck.getHasPower() == 0)){
 8086c7e:	4b40      	ldr	r3, [pc, #256]	; (8086d80 <loop+0x440>)
 8086c80:	681b      	ldr	r3, [r3, #0]
 8086c82:	2b01      	cmp	r3, #1
 8086c84:	d10a      	bne.n	8086c9c <loop+0x35c>
 8086c86:	483f      	ldr	r0, [pc, #252]	; (8086d84 <loop+0x444>)
 8086c88:	f004 ffc4 	bl	808bc14 <_ZN9FuelGauge6getSoCEv>
 8086c8c:	493e      	ldr	r1, [pc, #248]	; (8086d88 <loop+0x448>)
 8086c8e:	f007 f96f 	bl	808df70 <__aeabi_fcmplt>
 8086c92:	b118      	cbz	r0, 8086c9c <loop+0x35c>
 8086c94:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8086c98:	2b00      	cmp	r3, #0
 8086c9a:	d05f      	beq.n	8086d5c <loop+0x41c>
        Serial.println("Going to sleep because battery is below 20% charge");
        goToSleepBattery();
    }

    if(co2_calibration_timer){
 8086c9c:	4a3b      	ldr	r2, [pc, #236]	; (8086d8c <loop+0x44c>)
 8086c9e:	6813      	ldr	r3, [r2, #0]
 8086ca0:	2b00      	cmp	r3, #0
 8086ca2:	d063      	beq.n	8086d6c <loop+0x42c>
        co2_calibration_timer--;
 8086ca4:	3b01      	subs	r3, #1
 8086ca6:	6013      	str	r3, [r2, #0]
        if(debugging_enabled){
 8086ca8:	6823      	ldr	r3, [r4, #0]
 8086caa:	2b00      	cmp	r3, #0
 8086cac:	d05e      	beq.n	8086d6c <loop+0x42c>
            t6713.readStatus(1);
 8086cae:	2101      	movs	r1, #1
 8086cb0:	4837      	ldr	r0, [pc, #220]	; (8086d90 <loop+0x450>)
 8086cb2:	f000 fb67 	bl	8087384 <_ZN13Telaire_T671310readStatusEi>
 8086cb6:	e059      	b.n	8086d6c <loop+0x42c>

void loop() {

    if(car_topper_power_en && powerCheck.getHasPower() == 0){
        
        goToSleepBattery();
 8086cb8:	f7fb fc96 	bl	80825e8 <_Z16goToSleepBatteryv>
 8086cbc:	e64c      	b.n	8086958 <loop+0x18>
 8086cbe:	f003 fd93 	bl	808a7e8 <spark_cloud_flag_connected>
          Particle.connect();
          if(debugging_enabled){
            Serial.println("After particle connect");
            writeLogFile("After particle connect");
          }
      }else if(Particle.connected() == true){  //this means that it is already connected
 8086cc2:	2800      	cmp	r0, #0
 8086cc4:	d0d7      	beq.n	8086c76 <loop+0x336>
        if(debugging_enabled){
 8086cc6:	6823      	ldr	r3, [r4, #0]
 8086cc8:	b123      	cbz	r3, 8086cd4 <loop+0x394>
          Serial.println("setting tried_cellular_connect to false");
 8086cca:	f005 fc2d 	bl	808c528 <_Z16_fetch_usbserialv>
 8086cce:	4931      	ldr	r1, [pc, #196]	; (8086d94 <loop+0x454>)
 8086cd0:	f004 fb83 	bl	808b3da <_ZN5Print7printlnEPKc>
        }
        tried_cellular_connect = false;
 8086cd4:	4b30      	ldr	r3, [pc, #192]	; (8086d98 <loop+0x458>)
 8086cd6:	2200      	movs	r2, #0
 8086cd8:	701a      	strb	r2, [r3, #0]
 8086cda:	e7cc      	b.n	8086c76 <loop+0x336>

    if(serial_cellular_enabled){
        status_word.status_int |= 0x01;
        //Serial.println("Cellular is enabled.");
      if (Particle.connected() == false && tried_cellular_connect == false) {
        tried_cellular_connect = true;
 8086cdc:	2201      	movs	r2, #1
 8086cde:	701a      	strb	r2, [r3, #0]
          if(debugging_enabled){
 8086ce0:	6823      	ldr	r3, [r4, #0]
 8086ce2:	b173      	cbz	r3, 8086d02 <loop+0x3c2>
            Serial.println("Connecting to cellular network");
 8086ce4:	f005 fc20 	bl	808c528 <_Z16_fetch_usbserialv>
 8086ce8:	492c      	ldr	r1, [pc, #176]	; (8086d9c <loop+0x45c>)
 8086cea:	f004 fb76 	bl	808b3da <_ZN5Print7printlnEPKc>
            writeLogFile("Connecting to cellular network");
 8086cee:	492b      	ldr	r1, [pc, #172]	; (8086d9c <loop+0x45c>)
 8086cf0:	a806      	add	r0, sp, #24
 8086cf2:	f004 f946 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
 8086cf6:	a806      	add	r0, sp, #24
 8086cf8:	f7fb f80a 	bl	8081d10 <_Z12writeLogFile6String>
 8086cfc:	a806      	add	r0, sp, #24
 8086cfe:	f004 f8f9 	bl	808aef4 <_ZN6StringD1Ev>

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 8086d02:	481d      	ldr	r0, [pc, #116]	; (8086d78 <loop+0x438>)
 8086d04:	2300      	movs	r3, #0
 8086d06:	461a      	mov	r2, r3
 8086d08:	4619      	mov	r1, r3
 8086d0a:	6840      	ldr	r0, [r0, #4]
 8086d0c:	f003 fd24 	bl	808a758 <network_on>
          }
          Cellular.on();
          if(debugging_enabled){
 8086d10:	6823      	ldr	r3, [r4, #0]
 8086d12:	b173      	cbz	r3, 8086d32 <loop+0x3f2>
            Serial.println("after cellularOn");
 8086d14:	f005 fc08 	bl	808c528 <_Z16_fetch_usbserialv>
 8086d18:	4921      	ldr	r1, [pc, #132]	; (8086da0 <loop+0x460>)
 8086d1a:	f004 fb5e 	bl	808b3da <_ZN5Print7printlnEPKc>
            writeLogFile("After cellularOn");
 8086d1e:	4921      	ldr	r1, [pc, #132]	; (8086da4 <loop+0x464>)
 8086d20:	a806      	add	r0, sp, #24
 8086d22:	f004 f92e 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
 8086d26:	a806      	add	r0, sp, #24
 8086d28:	f7fa fff2 	bl	8081d10 <_Z12writeLogFile6String>
 8086d2c:	a806      	add	r0, sp, #24
 8086d2e:	f004 f8e1 	bl	808aef4 <_ZN6StringD1Ev>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 8086d32:	f003 fd51 	bl	808a7d8 <spark_cloud_flag_connect>
          }
          Particle.connect();
          if(debugging_enabled){
 8086d36:	6823      	ldr	r3, [r4, #0]
 8086d38:	2b00      	cmp	r3, #0
 8086d3a:	d09c      	beq.n	8086c76 <loop+0x336>
            Serial.println("After particle connect");
 8086d3c:	f005 fbf4 	bl	808c528 <_Z16_fetch_usbserialv>
 8086d40:	4919      	ldr	r1, [pc, #100]	; (8086da8 <loop+0x468>)
 8086d42:	f004 fb4a 	bl	808b3da <_ZN5Print7printlnEPKc>
            writeLogFile("After particle connect");
 8086d46:	4918      	ldr	r1, [pc, #96]	; (8086da8 <loop+0x468>)
 8086d48:	a806      	add	r0, sp, #24
 8086d4a:	f004 f91a 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
 8086d4e:	a806      	add	r0, sp, #24
 8086d50:	f7fa ffde 	bl	8081d10 <_Z12writeLogFile6String>
 8086d54:	a806      	add	r0, sp, #24
 8086d56:	f004 f8cd 	bl	808aef4 <_ZN6StringD1Ev>
 8086d5a:	e78c      	b.n	8086c76 <loop+0x336>
    //check power
    powerCheck.loop();

	//Serial.printf("hasPower=%d hasBattery=%d isCharging=%d\n\r", powerCheck.getHasPower(), powerCheck.getHasBattery(), powerCheck.getIsCharging());
    if((battery_threshold_enable == 1) && (fuel.getSoC() < BATTERY_THRESHOLD) && (powerCheck.getHasPower() == 0)){
        Serial.println("Going to sleep because battery is below 20% charge");
 8086d5c:	f005 fbe4 	bl	808c528 <_Z16_fetch_usbserialv>
 8086d60:	4912      	ldr	r1, [pc, #72]	; (8086dac <loop+0x46c>)
 8086d62:	f004 fb3a 	bl	808b3da <_ZN5Print7printlnEPKc>
        goToSleepBattery();
 8086d66:	f7fb fc3f 	bl	80825e8 <_Z16goToSleepBatteryv>
 8086d6a:	e797      	b.n	8086c9c <loop+0x35c>
        if(debugging_enabled){
            t6713.readStatus(1);
        }
    }

}
 8086d6c:	b00a      	add	sp, #40	; 0x28
 8086d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8086d72:	bf00      	nop
 8086d74:	08093b7f 	.word	0x08093b7f
 8086d78:	20001088 	.word	0x20001088
 8086d7c:	20000798 	.word	0x20000798
 8086d80:	20000b8c 	.word	0x20000b8c
 8086d84:	20000848 	.word	0x20000848
 8086d88:	41a00000 	.word	0x41a00000
 8086d8c:	200006bc 	.word	0x200006bc
 8086d90:	20000b90 	.word	0x20000b90
 8086d94:	08093b57 	.word	0x08093b57
 8086d98:	20000b14 	.word	0x20000b14
 8086d9c:	08093aff 	.word	0x08093aff
 8086da0:	08093b1e 	.word	0x08093b1e
 8086da4:	08093b2f 	.word	0x08093b2f
 8086da8:	08093b40 	.word	0x08093b40
 8086dac:	08093ba3 	.word	0x08093ba3

08086db0 <_ZN8LMP91000C1Ev>:
#include "LMP91000.h"

LMP91000::LMP91000() {

}
 8086db0:	4770      	bx	lr

08086db2 <_ZN8LMP910004readEh>:

      // read back the value of the register
      return read(reg);
}

uint8_t LMP91000::read(uint8_t reg){
 8086db2:	b510      	push	{r4, lr}
 8086db4:	460c      	mov	r4, r1
      //Serial.println("In read func");
      uint8_t chr = 0;
      Wire.beginTransmission(LMP91000_I2C_ADDRESS);           // START+SLA+W
 8086db6:	f005 ff9d 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8086dba:	2148      	movs	r1, #72	; 0x48
 8086dbc:	f005 fd70 	bl	808c8a0 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(reg);                                        // REG
 8086dc0:	f005 ff98 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8086dc4:	6803      	ldr	r3, [r0, #0]
 8086dc6:	4621      	mov	r1, r4
 8086dc8:	689b      	ldr	r3, [r3, #8]
 8086dca:	4798      	blx	r3
      //delay(200);
      Wire.endTransmission(false);                            // REP START
 8086dcc:	f005 ff92 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8086dd0:	2100      	movs	r1, #0
 8086dd2:	f005 fd68 	bl	808c8a6 <_ZN7TwoWire15endTransmissionEh>
      //Serial.println("after end transmission");
      Wire.requestFrom(LMP91000_I2C_ADDRESS, 1, true);        // SLA+R
 8086dd6:	f005 ff8d 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8086dda:	2301      	movs	r3, #1
 8086ddc:	461a      	mov	r2, r3
 8086dde:	2148      	movs	r1, #72	; 0x48
 8086de0:	f005 fd55 	bl	808c88e <_ZN7TwoWire11requestFromEiii>
      if(Wire.available()){
 8086de4:	f005 ff86 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8086de8:	6803      	ldr	r3, [r0, #0]
 8086dea:	691b      	ldr	r3, [r3, #16]
 8086dec:	4798      	blx	r3
 8086dee:	b128      	cbz	r0, 8086dfc <_ZN8LMP910004readEh+0x4a>
            chr = Wire.read();                                // DATA
 8086df0:	f005 ff80 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8086df4:	6803      	ldr	r3, [r0, #0]
 8086df6:	695b      	ldr	r3, [r3, #20]
 8086df8:	4798      	blx	r3
 8086dfa:	b2c0      	uxtb	r0, r0
      }

      return chr;
}
 8086dfc:	bd10      	pop	{r4, pc}

08086dfe <_ZN8LMP910005writeEhh>:

LMP91000::LMP91000() {

}

uint8_t LMP91000::write(uint8_t reg, uint8_t data) {
 8086dfe:	b570      	push	{r4, r5, r6, lr}
 8086e00:	4616      	mov	r6, r2
 8086e02:	460c      	mov	r4, r1
 8086e04:	4605      	mov	r5, r0

      Wire.beginTransmission(LMP91000_I2C_ADDRESS);           // START+SLA+W
 8086e06:	f005 ff75 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8086e0a:	2148      	movs	r1, #72	; 0x48
 8086e0c:	f005 fd48 	bl	808c8a0 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(reg);                                        // REG
 8086e10:	f005 ff70 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8086e14:	6803      	ldr	r3, [r0, #0]
 8086e16:	4621      	mov	r1, r4
 8086e18:	689b      	ldr	r3, [r3, #8]
 8086e1a:	4798      	blx	r3
      Wire.write(data);                                       // DATA
 8086e1c:	f005 ff6a 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8086e20:	6803      	ldr	r3, [r0, #0]
 8086e22:	4631      	mov	r1, r6
 8086e24:	689b      	ldr	r3, [r3, #8]
 8086e26:	4798      	blx	r3
      Wire.endTransmission(true); // generate stop condition  // STOP
 8086e28:	f005 ff64 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8086e2c:	2101      	movs	r1, #1
 8086e2e:	f005 fd3a 	bl	808c8a6 <_ZN7TwoWire15endTransmissionEh>

      // read back the value of the register
      return read(reg);
 8086e32:	4621      	mov	r1, r4
 8086e34:	4628      	mov	r0, r5
}
 8086e36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      Wire.write(reg);                                        // REG
      Wire.write(data);                                       // DATA
      Wire.endTransmission(true); // generate stop condition  // STOP

      // read back the value of the register
      return read(reg);
 8086e3a:	f7ff bfba 	b.w	8086db2 <_ZN8LMP910004readEh>

08086e3e <_ZN8LMP910006statusEv>:

      return chr;
}

uint8_t LMP91000::status(void) {
      return read(LMP91000_STATUS_REG);
 8086e3e:	2100      	movs	r1, #0
 8086e40:	f7ff bfb7 	b.w	8086db2 <_ZN8LMP910004readEh>

08086e44 <_ZN8LMP910004lockEv>:
}

uint8_t LMP91000::lock(){ // this is the default state
      return write(LMP91000_LOCK_REG, LMP91000_WRITE_LOCK);
 8086e44:	2201      	movs	r2, #1
 8086e46:	4611      	mov	r1, r2
 8086e48:	f7ff bfd9 	b.w	8086dfe <_ZN8LMP910005writeEhh>

08086e4c <_ZN8LMP910006unlockEv>:
}

uint8_t LMP91000::unlock(){
      return write(LMP91000_LOCK_REG, LMP91000_WRITE_UNLOCK);
 8086e4c:	2200      	movs	r2, #0
 8086e4e:	2101      	movs	r1, #1
 8086e50:	f7ff bfd5 	b.w	8086dfe <_ZN8LMP910005writeEhh>

08086e54 <_ZN8LMP910009configureEhhh>:
}

uint8_t LMP91000::configure(uint8_t _tiacn, uint8_t _refcn, uint8_t _modecn){
 8086e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8086e58:	4604      	mov	r4, r0
 8086e5a:	4688      	mov	r8, r1
 8086e5c:	4617      	mov	r7, r2
 8086e5e:	461e      	mov	r6, r3

      if(status() == LMP91000_READY){
 8086e60:	f7ff ffed 	bl	8086e3e <_ZN8LMP910006statusEv>
 8086e64:	2801      	cmp	r0, #1
 8086e66:	4605      	mov	r5, r0
 8086e68:	d115      	bne.n	8086e96 <_ZN8LMP910009configureEhhh+0x42>
            unlock();
 8086e6a:	4620      	mov	r0, r4
 8086e6c:	f7ff ffee 	bl	8086e4c <_ZN8LMP910006unlockEv>
            write(LMP91000_TIACN_REG, _tiacn);
 8086e70:	4642      	mov	r2, r8
 8086e72:	2110      	movs	r1, #16
 8086e74:	4620      	mov	r0, r4
 8086e76:	f7ff ffc2 	bl	8086dfe <_ZN8LMP910005writeEhh>
            write(LMP91000_REFCN_REG, _refcn);
 8086e7a:	463a      	mov	r2, r7
 8086e7c:	2111      	movs	r1, #17
 8086e7e:	4620      	mov	r0, r4
 8086e80:	f7ff ffbd 	bl	8086dfe <_ZN8LMP910005writeEhh>
            write(LMP91000_MODECN_REG, _modecn);
 8086e84:	4632      	mov	r2, r6
 8086e86:	2112      	movs	r1, #18
 8086e88:	4620      	mov	r0, r4
 8086e8a:	f7ff ffb8 	bl	8086dfe <_ZN8LMP910005writeEhh>
            lock();
 8086e8e:	4620      	mov	r0, r4
 8086e90:	f7ff ffd8 	bl	8086e44 <_ZN8LMP910004lockEv>
            return 1;
 8086e94:	e000      	b.n	8086e98 <_ZN8LMP910009configureEhhh+0x44>
      }
      return 0;
 8086e96:	2500      	movs	r5, #0
}
 8086e98:	4628      	mov	r0, r5
 8086e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08086e9e <_GLOBAL__sub_I__ZN8LMP91000C2Ev>:
 8086e9e:	f003 b9ff 	b.w	808a2a0 <HAL_Pin_Map>
	...

08086ea4 <_ZN10PowerCheckD1Ev>:
#include "PowerCheck.h"

PowerCheck::PowerCheck() {
}

PowerCheck::~PowerCheck() {
 8086ea4:	b510      	push	{r4, lr}
 8086ea6:	4604      	mov	r4, r0
 8086ea8:	4b03      	ldr	r3, [pc, #12]	; (8086eb8 <_ZN10PowerCheckD1Ev+0x14>)
 8086eaa:	f840 3b14 	str.w	r3, [r0], #20
 8086eae:	f003 fd51 	bl	808a954 <_ZN4PMICD1Ev>
}
 8086eb2:	4620      	mov	r0, r4
 8086eb4:	bd10      	pop	{r4, pc}
 8086eb6:	bf00      	nop
 8086eb8:	08093be0 	.word	0x08093be0

08086ebc <_ZN10PowerCheckD0Ev>:
#include "PowerCheck.h"

PowerCheck::PowerCheck() {
}

PowerCheck::~PowerCheck() {
 8086ebc:	b510      	push	{r4, lr}
 8086ebe:	4604      	mov	r4, r0
}
 8086ec0:	f7ff fff0 	bl	8086ea4 <_ZN10PowerCheckD1Ev>
 8086ec4:	4620      	mov	r0, r4
 8086ec6:	2124      	movs	r1, #36	; 0x24
 8086ec8:	f005 ff59 	bl	808cd7e <_ZdlPvj>
 8086ecc:	4620      	mov	r0, r4
 8086ece:	bd10      	pop	{r4, pc}

08086ed0 <_ZN10PowerCheckC1Ev>:
#include "PowerCheck.h"

PowerCheck::PowerCheck() {
 8086ed0:	b538      	push	{r3, r4, r5, lr}
 8086ed2:	4604      	mov	r4, r0
 8086ed4:	4b0d      	ldr	r3, [pc, #52]	; (8086f0c <_ZN10PowerCheckC1Ev+0x3c>)
 8086ed6:	2500      	movs	r5, #0
 8086ed8:	6003      	str	r3, [r0, #0]
 8086eda:	2332      	movs	r3, #50	; 0x32
 8086edc:	6043      	str	r3, [r0, #4]
 8086ede:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8086ee2:	6083      	str	r3, [r0, #8]
 8086ee4:	60c5      	str	r5, [r0, #12]
 8086ee6:	6105      	str	r5, [r0, #16]
 8086ee8:	4629      	mov	r1, r5
 8086eea:	3014      	adds	r0, #20
 8086eec:	f003 fd23 	bl	808a936 <_ZN4PMICC1Eb>
 8086ef0:	2301      	movs	r3, #1
 8086ef2:	61a5      	str	r5, [r4, #24]
 8086ef4:	61e5      	str	r5, [r4, #28]
 8086ef6:	f884 5020 	strb.w	r5, [r4, #32]
 8086efa:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
 8086efe:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8086f02:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
}
 8086f06:	4620      	mov	r0, r4
 8086f08:	bd38      	pop	{r3, r4, r5, pc}
 8086f0a:	bf00      	nop
 8086f0c:	08093be0 	.word	0x08093be0

08086f10 <_ZN10PowerCheck4loopEv>:

PowerCheck::~PowerCheck() {
}

void PowerCheck::loop() {
 8086f10:	b510      	push	{r4, lr}
 8086f12:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8086f14:	f003 fa64 	bl	808a3e0 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastFastCheck >= FAST_CHECK_INTERVAL_MS) {
 8086f18:	68e3      	ldr	r3, [r4, #12]
 8086f1a:	1ac0      	subs	r0, r0, r3
 8086f1c:	6863      	ldr	r3, [r4, #4]
 8086f1e:	4298      	cmp	r0, r3
 8086f20:	d31f      	bcc.n	8086f62 <_ZN10PowerCheck4loopEv+0x52>
 8086f22:	f003 fa5d 	bl	808a3e0 <HAL_Timer_Get_Milli_Seconds>
		// For reasons explained in greater detail we need to check the system status register frequently.
		// But not too frequently, because it does use some system resources to communicate over I2C.
		// An interval of 50 milliseconds, or 20 times per second, seems about right.
		// Setting the interval to 100 milliseconds causes it to miss the condition looked for below sometimes.

		lastFastCheck = millis();
 8086f26:	60e0      	str	r0, [r4, #12]

		byte systemStatus = pmic.getSystemStatus();
 8086f28:	f104 0014 	add.w	r0, r4, #20
 8086f2c:	f003 fd5d 	bl	808a9ea <_ZN4PMIC15getSystemStatusEv>
		if ((systemStatus & 0x04) != 0) {
 8086f30:	f000 0304 	and.w	r3, r0, #4
 8086f34:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8086f38:	b173      	cbz	r3, 8086f58 <_ZN10PowerCheck4loopEv+0x48>
			// Bit 5 CHRG_STAT[1] R
			// Bit 4 CHRG_STAT[0] R
			// 00 – Not Charging, 01 – Pre-charge (<VBATLOWV), 10 – Fast Charging, 11 – Charge Termination Done
			byte chrgStat = (systemStatus >> 4) & 0x3;

			if (chrgStat != lastChrgStat) {
 8086f3a:	f894 3020 	ldrb.w	r3, [r4, #32]
			// (It works similarly for a USB charger, except it's 0x24 and 0x34).

			// Bit 5 CHRG_STAT[1] R
			// Bit 4 CHRG_STAT[0] R
			// 00 – Not Charging, 01 – Pre-charge (<VBATLOWV), 10 – Fast Charging, 11 – Charge Termination Done
			byte chrgStat = (systemStatus >> 4) & 0x3;
 8086f3e:	f3c0 1001 	ubfx	r0, r0, #4, #2

			if (chrgStat != lastChrgStat) {
 8086f42:	4283      	cmp	r3, r0
				// Here's where we check to see if the charging status changes. When there's no battery present
				// it changes a lot between fast charging and charge termination done, but since we're polling
				// here instead of using interrupts, we have to poll frequently enough to see states.
				// (The BQ24195 power manager controller is connected to BATT_INT_PC13, but accessing that
				// interrupt from user code is a pain, so I just poll here.)
				changeCount++;
 8086f44:	bf1f      	itttt	ne
 8086f46:	69e3      	ldrne	r3, [r4, #28]
				lastChrgStat = chrgStat;
 8086f48:	f884 0020 	strbne.w	r0, [r4, #32]
				// Here's where we check to see if the charging status changes. When there's no battery present
				// it changes a lot between fast charging and charge termination done, but since we're polling
				// here instead of using interrupts, we have to poll frequently enough to see states.
				// (The BQ24195 power manager controller is connected to BATT_INT_PC13, but accessing that
				// interrupt from user code is a pain, so I just poll here.)
				changeCount++;
 8086f4c:	3301      	addne	r3, #1
 8086f4e:	61e3      	strne	r3, [r4, #28]
				lastChrgStat = chrgStat;
			}

			// We have power (USB or VIN)
			hasPower = true;
 8086f50:	2301      	movs	r3, #1
 8086f52:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 8086f56:	e001      	b.n	8086f5c <_ZN10PowerCheck4loopEv+0x4c>
			// 0x34 (Charge Termination Done, Power Good)
			// It does not seem to be possible to tell the difference between VIN and a USB charger
		}
		else {
			// Power good is false, so that means we must be running off battery
			hasPower = false;
 8086f58:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
		}

		checkCount++;
 8086f5c:	69a3      	ldr	r3, [r4, #24]
 8086f5e:	3301      	adds	r3, #1
 8086f60:	61a3      	str	r3, [r4, #24]
 8086f62:	f003 fa3d 	bl	808a3e0 <HAL_Timer_Get_Milli_Seconds>
	}
	if (millis() - lastSlowCheck > SLOW_CHECK_INTERVAL_MS) {
 8086f66:	6923      	ldr	r3, [r4, #16]
 8086f68:	1ac0      	subs	r0, r0, r3
 8086f6a:	68a3      	ldr	r3, [r4, #8]
 8086f6c:	4298      	cmp	r0, r3
 8086f6e:	d91c      	bls.n	8086faa <_ZN10PowerCheck4loopEv+0x9a>
 8086f70:	f003 fa36 	bl	808a3e0 <HAL_Timer_Get_Milli_Seconds>
		lastSlowCheck = millis();

		// Normally we get a checkCount of 36 or so, and a changeCount of 18 when there's no battery
		hasBattery = ! ((checkCount > 10) && (changeCount > (checkCount / 4)));
 8086f74:	69a3      	ldr	r3, [r4, #24]
		}

		checkCount++;
	}
	if (millis() - lastSlowCheck > SLOW_CHECK_INTERVAL_MS) {
		lastSlowCheck = millis();
 8086f76:	6120      	str	r0, [r4, #16]

		// Normally we get a checkCount of 36 or so, and a changeCount of 18 when there's no battery
		hasBattery = ! ((checkCount > 10) && (changeCount > (checkCount / 4)));
 8086f78:	2b0a      	cmp	r3, #10
 8086f7a:	dd06      	ble.n	8086f8a <_ZN10PowerCheck4loopEv+0x7a>
 8086f7c:	69e2      	ldr	r2, [r4, #28]
 8086f7e:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 8086f82:	bfd4      	ite	le
 8086f84:	2301      	movle	r3, #1
 8086f86:	2300      	movgt	r3, #0
 8086f88:	e000      	b.n	8086f8c <_ZN10PowerCheck4loopEv+0x7c>
 8086f8a:	2301      	movs	r3, #1
 8086f8c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22

		// The battery is charging if in pre-charge or fast charge mode
		isCharging = hasBattery && (lastChrgStat == 1 || lastChrgStat == 2);
 8086f90:	b133      	cbz	r3, 8086fa0 <_ZN10PowerCheck4loopEv+0x90>
 8086f92:	f894 3020 	ldrb.w	r3, [r4, #32]
 8086f96:	3b01      	subs	r3, #1
 8086f98:	2b01      	cmp	r3, #1
 8086f9a:	bf8c      	ite	hi
 8086f9c:	2300      	movhi	r3, #0
 8086f9e:	2301      	movls	r3, #1
 8086fa0:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23

		checkCount = 0;
 8086fa4:	2300      	movs	r3, #0
 8086fa6:	61a3      	str	r3, [r4, #24]
		changeCount = 0;
 8086fa8:	61e3      	str	r3, [r4, #28]
 8086faa:	bd10      	pop	{r4, pc}

08086fac <_GLOBAL__sub_I__ZN10PowerCheckC2Ev>:
 8086fac:	f003 b978 	b.w	808a2a0 <HAL_Pin_Map>

08086fb0 <_ZL8i2cwriteh>:
/**************************************************************************/
/*!
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static void i2cwrite(uint8_t x) {
 8086fb0:	b510      	push	{r4, lr}
 8086fb2:	4604      	mov	r4, r0
  #else
  Wire.send(x);
  #endif
  */
  
  Wire.write((uint8_t)x);
 8086fb4:	f005 fe9e 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8086fb8:	6803      	ldr	r3, [r0, #0]
 8086fba:	4621      	mov	r1, r4
}
 8086fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  #else
  Wire.send(x);
  #endif
  */
  
  Wire.write((uint8_t)x);
 8086fc0:	689b      	ldr	r3, [r3, #8]
 8086fc2:	4718      	bx	r3

08086fc4 <_ZL7i2creadv>:
/**************************************************************************/
/*!
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static uint8_t i2cread(void) {
 8086fc4:	b508      	push	{r3, lr}
  #else
  return Wire.receive();
  #endif
  */
  
  return Wire.read();
 8086fc6:	f005 fe95 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8086fca:	6803      	ldr	r3, [r0, #0]
 8086fcc:	695b      	ldr	r3, [r3, #20]
 8086fce:	4798      	blx	r3
}
 8086fd0:	b2c0      	uxtb	r0, r0
 8086fd2:	bd08      	pop	{r3, pc}

08086fd4 <_ZL13writeRegisterhht>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static void writeRegister(uint8_t i2cAddress, uint8_t reg, uint16_t value) {
 8086fd4:	b570      	push	{r4, r5, r6, lr}
 8086fd6:	4606      	mov	r6, r0
 8086fd8:	460d      	mov	r5, r1
 8086fda:	4614      	mov	r4, r2
  Wire.beginTransmission(i2cAddress);
 8086fdc:	f005 fe8a 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8086fe0:	4631      	mov	r1, r6
 8086fe2:	f005 fc59 	bl	808c898 <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite((uint8_t)reg);
 8086fe6:	4628      	mov	r0, r5
 8086fe8:	f7ff ffe2 	bl	8086fb0 <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value>>8));
 8086fec:	0a20      	lsrs	r0, r4, #8
 8086fee:	f7ff ffdf 	bl	8086fb0 <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value & 0xFF));
 8086ff2:	b2e0      	uxtb	r0, r4
 8086ff4:	f7ff ffdc 	bl	8086fb0 <_ZL8i2cwriteh>
  Wire.endTransmission();
 8086ff8:	f005 fe7c 	bl	808ccf4 <_Z19__fetch_global_Wirev>
}
 8086ffc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
static void writeRegister(uint8_t i2cAddress, uint8_t reg, uint16_t value) {
  Wire.beginTransmission(i2cAddress);
  i2cwrite((uint8_t)reg);
  i2cwrite((uint8_t)(value>>8));
  i2cwrite((uint8_t)(value & 0xFF));
  Wire.endTransmission();
 8087000:	f005 bc55 	b.w	808c8ae <_ZN7TwoWire15endTransmissionEv>

08087004 <_ZL12readRegisterhh.isra.0>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
 8087004:	b510      	push	{r4, lr}
 8087006:	4604      	mov	r4, r0
  Wire.beginTransmission(i2cAddress);
 8087008:	f005 fe74 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 808700c:	4621      	mov	r1, r4
 808700e:	f005 fc43 	bl	808c898 <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite(ADS1015_REG_POINTER_CONVERT);
 8087012:	2000      	movs	r0, #0
 8087014:	f7ff ffcc 	bl	8086fb0 <_ZL8i2cwriteh>
  Wire.endTransmission();
 8087018:	f005 fe6c 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 808701c:	f005 fc47 	bl	808c8ae <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(i2cAddress, (uint8_t)2);
 8087020:	f005 fe68 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8087024:	4621      	mov	r1, r4
 8087026:	2202      	movs	r2, #2
 8087028:	f005 fc29 	bl	808c87e <_ZN7TwoWire11requestFromEhh>
  return ((i2cread() << 8) | i2cread());  
 808702c:	f7ff ffca 	bl	8086fc4 <_ZL7i2creadv>
 8087030:	4604      	mov	r4, r0
 8087032:	f7ff ffc7 	bl	8086fc4 <_ZL7i2creadv>
 8087036:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
}
 808703a:	b280      	uxth	r0, r0
 808703c:	bd10      	pop	{r4, pc}

0808703e <_ZN16Adafruit_ADS1115C1Eh>:
Adafruit_ADS1015::Adafruit_ADS1015(uint8_t i2cAddress) 
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1015_CONVERSIONDELAY;
   m_bitShift = 4;
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
 808703e:	2200      	movs	r2, #0
    @brief  Instantiates a new ADS1115 class w/appropriate properties
*/
/**************************************************************************/
Adafruit_ADS1115::Adafruit_ADS1115(uint8_t i2cAddress)
{
   m_i2cAddress = i2cAddress;
 8087040:	7001      	strb	r1, [r0, #0]
   m_conversionDelay = ADS1115_CONVERSIONDELAY;
 8087042:	2108      	movs	r1, #8
Adafruit_ADS1015::Adafruit_ADS1015(uint8_t i2cAddress) 
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1015_CONVERSIONDELAY;
   m_bitShift = 4;
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
 8087044:	8082      	strh	r2, [r0, #4]
*/
/**************************************************************************/
Adafruit_ADS1115::Adafruit_ADS1115(uint8_t i2cAddress)
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1115_CONVERSIONDELAY;
 8087046:	7041      	strb	r1, [r0, #1]
   m_bitShift = 0;
 8087048:	7082      	strb	r2, [r0, #2]
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
}
 808704a:	4770      	bx	lr

0808704c <_ZN16Adafruit_ADS10155beginEv>:
/**************************************************************************/
/*!
    @brief  Sets up the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
void Adafruit_ADS1015::begin() {
 808704c:	b508      	push	{r3, lr}
  Wire.begin();
 808704e:	f005 fe51 	bl	808ccf4 <_Z19__fetch_global_Wirev>
}
 8087052:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/*!
    @brief  Sets up the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
void Adafruit_ADS1015::begin() {
  Wire.begin();
 8087056:	f005 bc03 	b.w	808c860 <_ZN7TwoWire5beginEv>

0808705a <_ZN16Adafruit_ADS10157setGainE9adsGain_t>:
    @brief  Sets the gain and input voltage range
*/
/**************************************************************************/
void Adafruit_ADS1015::setGain(adsGain_t gain)
{
  m_gain = gain;
 808705a:	8081      	strh	r1, [r0, #4]
 808705c:	4770      	bx	lr

0808705e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>:
/*!
    @brief  Gets a single-ended ADC reading from the specified channel
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
  if (channel > 3)
 808705e:	2903      	cmp	r1, #3
/**************************************************************************/
/*!
    @brief  Gets a single-ended ADC reading from the specified channel
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
 8087060:	b510      	push	{r4, lr}
 8087062:	4604      	mov	r4, r0
  if (channel > 3)
 8087064:	d822      	bhi.n	80870ac <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x4e>

  // Set PGA/voltage range
  config |= m_gain;

  // Set single-ended input channel
  switch (channel)
 8087066:	2902      	cmp	r1, #2
                    ADS1015_REG_CONFIG_CMODE_TRAD   | // Traditional comparator (default val)
                    ADS1015_REG_CONFIG_DR_1600SPS   | // 1600 samples per second (default)
                    ADS1015_REG_CONFIG_MODE_SINGLE;   // Single-shot mode (default)

  // Set PGA/voltage range
  config |= m_gain;
 8087068:	8882      	ldrh	r2, [r0, #4]

  // Set single-ended input channel
  switch (channel)
 808706a:	d008      	beq.n	808707e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x20>
 808706c:	2903      	cmp	r1, #3
 808706e:	d009      	beq.n	8087084 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x26>
 8087070:	2901      	cmp	r1, #1
  {
    case (0):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_0;
 8087072:	bf14      	ite	ne
 8087074:	f442 4283 	orrne.w	r2, r2, #16768	; 0x4180
      break;
    case (1):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
 8087078:	f442 42a3 	orreq.w	r2, r2, #20864	; 0x5180
 808707c:	e004      	b.n	8087088 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x2a>
      break;
    case (2):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
 808707e:	f442 42c3 	orr.w	r2, r2, #24960	; 0x6180
 8087082:	e001      	b.n	8087088 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x2a>
      break;
    case (3):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
 8087084:	f442 42e3 	orr.w	r2, r2, #29056	; 0x7180
 8087088:	f042 0203 	orr.w	r2, r2, #3

  // Set 'start single-conversion' bit
  config |= ADS1015_REG_CONFIG_OS_SINGLE;

  // Write config register to the ADC
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
 808708c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8087090:	2101      	movs	r1, #1
 8087092:	7820      	ldrb	r0, [r4, #0]
 8087094:	f7ff ff9e 	bl	8086fd4 <_ZL13writeRegisterhht>

  // Wait for the conversion to complete
  delay(m_conversionDelay);
 8087098:	7860      	ldrb	r0, [r4, #1]
 808709a:	f004 fd47 	bl	808bb2c <delay>

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
 808709e:	7820      	ldrb	r0, [r4, #0]
 80870a0:	f7ff ffb0 	bl	8087004 <_ZL12readRegisterhh.isra.0>
 80870a4:	78a3      	ldrb	r3, [r4, #2]
 80870a6:	4118      	asrs	r0, r3
 80870a8:	b280      	uxth	r0, r0
 80870aa:	bd10      	pop	{r4, pc}
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
  if (channel > 3)
  {
    return 0;
 80870ac:	2000      	movs	r0, #0
  delay(m_conversionDelay);

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
}
 80870ae:	bd10      	pop	{r4, pc}

080870b0 <_GLOBAL__sub_I__ZN16Adafruit_ADS1015C2Eh>:
 80870b0:	f003 b8f6 	b.w	808a2a0 <HAL_Pin_Map>

080870b4 <_ZN3GPS15set_lat_decimalE6Stringc>:
#include "gps.h"



//set decimal value of latitude from NMEA string
void GPS::set_lat_decimal(String latString, char nsString){
 80870b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80870b8:	460e      	mov	r6, r1
 80870ba:	b088      	sub	sp, #32
 80870bc:	4604      	mov	r4, r0
 80870be:	4615      	mov	r5, r2
    String whole_str = latString.substring(0,2);
 80870c0:	4668      	mov	r0, sp
 80870c2:	2302      	movs	r3, #2
 80870c4:	2200      	movs	r2, #0
 80870c6:	f004 f8ff 	bl	808b2c8 <_ZNK6String9substringEjj>
    String frac_str = latString.substring(2,10);
 80870ca:	230a      	movs	r3, #10
 80870cc:	2202      	movs	r2, #2
 80870ce:	4631      	mov	r1, r6
 80870d0:	a804      	add	r0, sp, #16
 80870d2:	f004 f8f9 	bl	808b2c8 <_ZNK6String9substringEjj>
    latWhole = whole_str.toInt();
 80870d6:	4668      	mov	r0, sp
 80870d8:	f004 f91e 	bl	808b318 <_ZNK6String5toIntEv>
 80870dc:	83a0      	strh	r0, [r4, #28]
    latFrac = frac_str.toInt();
 80870de:	a804      	add	r0, sp, #16
 80870e0:	f004 f91a 	bl	808b318 <_ZNK6String5toIntEv>
 80870e4:	83e0      	strh	r0, [r4, #30]

    int whole_part = whole_str.toInt();
 80870e6:	4668      	mov	r0, sp
 80870e8:	f004 f916 	bl	808b318 <_ZNK6String5toIntEv>
 80870ec:	4606      	mov	r6, r0
    //Serial.print("Whole part:");
    //Serial.println(whole_part);

    double frac_part = frac_str.toFloat();
 80870ee:	a804      	add	r0, sp, #16
 80870f0:	f004 f917 	bl	808b322 <_ZNK6String7toFloatEv>
 80870f4:	4680      	mov	r8, r0
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    latitude = whole_part;
    latitude += (frac_part)/60;
 80870f6:	4630      	mov	r0, r6
 80870f8:	f006 f8e0 	bl	808d2bc <__aeabi_i2d>
 80870fc:	4606      	mov	r6, r0
 80870fe:	4640      	mov	r0, r8
 8087100:	460f      	mov	r7, r1
 8087102:	f006 f8ed 	bl	808d2e0 <__aeabi_f2d>
 8087106:	2200      	movs	r2, #0
 8087108:	4b0c      	ldr	r3, [pc, #48]	; (808713c <_ZN3GPS15set_lat_decimalE6Stringc+0x88>)
 808710a:	f006 fa67 	bl	808d5dc <__aeabi_ddiv>
 808710e:	460b      	mov	r3, r1
 8087110:	4602      	mov	r2, r0
 8087112:	4639      	mov	r1, r7
 8087114:	4630      	mov	r0, r6
 8087116:	f005 ff85 	bl	808d024 <__adddf3>
    if(nsString == 'S'){
 808711a:	2d53      	cmp	r5, #83	; 0x53
        ns_indicator = 0;
 808711c:	bf0c      	ite	eq
 808711e:	2300      	moveq	r3, #0
    }else{
        ns_indicator = 0x80;
 8087120:	2380      	movne	r3, #128	; 0x80
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    latitude = whole_part;
    latitude += (frac_part)/60;
 8087122:	e9c4 0102 	strd	r0, r1, [r4, #8]
    if(nsString == 'S'){
        ns_indicator = 0;
    }else{
        ns_indicator = 0x80;
 8087126:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24


//set decimal value of latitude from NMEA string
void GPS::set_lat_decimal(String latString, char nsString){
    String whole_str = latString.substring(0,2);
    String frac_str = latString.substring(2,10);
 808712a:	a804      	add	r0, sp, #16
 808712c:	f003 fee2 	bl	808aef4 <_ZN6StringD1Ev>



//set decimal value of latitude from NMEA string
void GPS::set_lat_decimal(String latString, char nsString){
    String whole_str = latString.substring(0,2);
 8087130:	4668      	mov	r0, sp
 8087132:	f003 fedf 	bl	808aef4 <_ZN6StringD1Ev>
    if(nsString == 'S'){
        ns_indicator = 0;
    }else{
        ns_indicator = 0x80;
    }
}
 8087136:	b008      	add	sp, #32
 8087138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808713c:	404e0000 	.word	0x404e0000

08087140 <_ZN3GPS16set_long_decimalE6Stringc>:

void GPS::set_long_decimal(String longString, char ewString){
 8087140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8087144:	460e      	mov	r6, r1
 8087146:	b088      	sub	sp, #32
 8087148:	4604      	mov	r4, r0
 808714a:	4615      	mov	r5, r2
    String whole_str = longString.substring(0,3);
 808714c:	4668      	mov	r0, sp
 808714e:	2303      	movs	r3, #3
 8087150:	2200      	movs	r2, #0
 8087152:	f004 f8b9 	bl	808b2c8 <_ZNK6String9substringEjj>
    String frac_str = longString.substring(3,10);
 8087156:	230a      	movs	r3, #10
 8087158:	2203      	movs	r2, #3
 808715a:	4631      	mov	r1, r6
 808715c:	a804      	add	r0, sp, #16
 808715e:	f004 f8b3 	bl	808b2c8 <_ZNK6String9substringEjj>

    longWhole = whole_str.toInt();
 8087162:	4668      	mov	r0, sp
 8087164:	f004 f8d8 	bl	808b318 <_ZNK6String5toIntEv>
 8087168:	8420      	strh	r0, [r4, #32]
    longFrac = frac_str.toInt();
 808716a:	a804      	add	r0, sp, #16
 808716c:	f004 f8d4 	bl	808b318 <_ZNK6String5toIntEv>
 8087170:	8460      	strh	r0, [r4, #34]	; 0x22
    int whole_part = whole_str.toInt();
 8087172:	4668      	mov	r0, sp
 8087174:	f004 f8d0 	bl	808b318 <_ZNK6String5toIntEv>
 8087178:	4606      	mov	r6, r0
    //Serial.print("Whole string: ");
    //Serial.println(whole_str);
    //Serial.print("Whole part:");
    //Serial.println(whole_part);

    double frac_part = frac_str.toFloat();
 808717a:	a804      	add	r0, sp, #16
 808717c:	f004 f8d1 	bl	808b322 <_ZNK6String7toFloatEv>
 8087180:	4680      	mov	r8, r0
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    longitude = whole_part;
    longitude += (frac_part)/60;
 8087182:	4630      	mov	r0, r6
 8087184:	f006 f89a 	bl	808d2bc <__aeabi_i2d>
 8087188:	4606      	mov	r6, r0
 808718a:	4640      	mov	r0, r8
 808718c:	460f      	mov	r7, r1
 808718e:	f006 f8a7 	bl	808d2e0 <__aeabi_f2d>
 8087192:	2200      	movs	r2, #0
 8087194:	4b0c      	ldr	r3, [pc, #48]	; (80871c8 <_ZN3GPS16set_long_decimalE6Stringc+0x88>)
 8087196:	f006 fa21 	bl	808d5dc <__aeabi_ddiv>
 808719a:	460b      	mov	r3, r1
 808719c:	4602      	mov	r2, r0
 808719e:	4639      	mov	r1, r7
 80871a0:	4630      	mov	r0, r6
 80871a2:	f005 ff3f 	bl	808d024 <__adddf3>
    if(ewString == 'E'){
 80871a6:	2d45      	cmp	r5, #69	; 0x45
      ew_indicator = 0;
 80871a8:	bf0c      	ite	eq
 80871aa:	2300      	moveq	r3, #0
    }else{
      ew_indicator = 0x01;
 80871ac:	2301      	movne	r3, #1
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    longitude = whole_part;
    longitude += (frac_part)/60;
 80871ae:	e9c4 0104 	strd	r0, r1, [r4, #16]
    if(ewString == 'E'){
      ew_indicator = 0;
    }else{
      ew_indicator = 0x01;
 80871b2:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    }
}

void GPS::set_long_decimal(String longString, char ewString){
    String whole_str = longString.substring(0,3);
    String frac_str = longString.substring(3,10);
 80871b6:	a804      	add	r0, sp, #16
 80871b8:	f003 fe9c 	bl	808aef4 <_ZN6StringD1Ev>
        ns_indicator = 0x80;
    }
}

void GPS::set_long_decimal(String longString, char ewString){
    String whole_str = longString.substring(0,3);
 80871bc:	4668      	mov	r0, sp
 80871be:	f003 fe99 	bl	808aef4 <_ZN6StringD1Ev>
    if(ewString == 'E'){
      ew_indicator = 0;
    }else{
      ew_indicator = 0x01;
    }
}
 80871c2:	b008      	add	sp, #32
 80871c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80871c8:	404e0000 	.word	0x404e0000

080871cc <_ZN3GPS14set_satellitesE6String>:

void GPS::set_satellites(String satString){
 80871cc:	b510      	push	{r4, lr}
 80871ce:	4604      	mov	r4, r0
    satellites_used = satString.toInt();
 80871d0:	4608      	mov	r0, r1
 80871d2:	f004 f8a1 	bl	808b318 <_ZNK6String5toIntEv>
 80871d6:	62e0      	str	r0, [r4, #44]	; 0x2c
 80871d8:	bd10      	pop	{r4, pc}
	...

080871dc <_ZN3GPS23set_horizontalDillutionE6String>:
}

void GPS::set_horizontalDillution(String hdString){
 80871dc:	b510      	push	{r4, lr}
 80871de:	4604      	mov	r4, r0
    float temp_float = hdString.toFloat();
 80871e0:	4608      	mov	r0, r1
 80871e2:	f004 f89e 	bl	808b322 <_ZNK6String7toFloatEv>
    temp_float *= 10;

    horizontal_dillution = temp_float;
 80871e6:	4902      	ldr	r1, [pc, #8]	; (80871f0 <_ZN3GPS23set_horizontalDillutionE6String+0x14>)
 80871e8:	f006 fd24 	bl	808dc34 <__aeabi_fmul>
 80871ec:	6320      	str	r0, [r4, #48]	; 0x30
 80871ee:	bd10      	pop	{r4, pc}
 80871f0:	41200000 	.word	0x41200000

080871f4 <_ZN3GPS12get_latitudeEv>:
}

double GPS::get_latitude(void){
    return latitude;
}
 80871f4:	f100 0108 	add.w	r1, r0, #8
 80871f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80871fc:	4770      	bx	lr

080871fe <_ZN3GPS13get_longitudeEv>:

double GPS::get_longitude(void){
    return longitude;
}
 80871fe:	f100 0110 	add.w	r1, r0, #16
 8087202:	e9d1 0100 	ldrd	r0, r1, [r1]
 8087206:	4770      	bx	lr

08087208 <_ZN3GPS23get_horizontalDillutionEv>:

int GPS::get_satellites(void){
    return satellites_used;
}

int GPS::get_horizontalDillution(void){
 8087208:	b508      	push	{r3, lr}
    return horizontal_dillution;
 808720a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 808720c:	f006 fed8 	bl	808dfc0 <__aeabi_f2iz>
}
 8087210:	bd08      	pop	{r3, pc}

08087212 <_ZN3GPS17get_latitudeWholeEv>:

int16_t GPS::get_latitudeWhole(void){
    return latWhole;
}
 8087212:	f9b0 001c 	ldrsh.w	r0, [r0, #28]
 8087216:	4770      	bx	lr

08087218 <_ZN3GPS16get_latitudeFracEv>:
int16_t GPS::get_latitudeFrac(void){
    return latFrac;
}
 8087218:	f9b0 001e 	ldrsh.w	r0, [r0, #30]
 808721c:	4770      	bx	lr

0808721e <_ZN3GPS18get_longitudeWholeEv>:
int16_t GPS::get_longitudeWhole(void){
    return longWhole;
}
 808721e:	f9b0 0020 	ldrsh.w	r0, [r0, #32]
 8087222:	4770      	bx	lr

08087224 <_ZN3GPS17get_longitudeFracEv>:
int16_t GPS::get_longitudeFrac(void){
    return longFrac;
}
 8087224:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8087228:	4770      	bx	lr

0808722a <_ZN3GPS15get_nsIndicatorEv>:

int8_t GPS::get_nsIndicator(void){
    return ns_indicator;
}
 808722a:	f990 0024 	ldrsb.w	r0, [r0, #36]	; 0x24
 808722e:	4770      	bx	lr

08087230 <_ZN3GPS15get_ewIndicatorEv>:

int8_t GPS::get_ewIndicator(void){
    return ew_indicator;
}
 8087230:	f990 0025 	ldrsb.w	r0, [r0, #37]	; 0x25
 8087234:	4770      	bx	lr

08087236 <_GLOBAL__sub_I__ZN3GPS15set_lat_decimalE6Stringc>:
 8087236:	f003 b833 	b.w	808a2a0 <HAL_Pin_Map>

0808723a <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 808723a:	6803      	ldr	r3, [r0, #0]
 808723c:	b2c9      	uxtb	r1, r1
 808723e:	689b      	ldr	r3, [r3, #8]
 8087240:	4718      	bx	r3

08087242 <_ZN13Telaire_T6713C1Ev>:
#define ADDR_6713  0x15 // default I2C slave address

Telaire_T6713::Telaire_T6713()
{
  //perform initialization
}
 8087242:	4770      	bx	lr

08087244 <_ZN13Telaire_T67135beginEv>:

bool Telaire_T6713::begin()
{
 8087244:	b510      	push	{r4, lr}
  LSB = 0;
  #ifdef T6713_DEBUG
  Serial.println("Begin Telaire_T6713");
  #endif
  // start I2C
  Wire.beginTransmission(ADDR_6713);
 8087246:	f005 fd55 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 808724a:	2115      	movs	r1, #21
 808724c:	f005 fb28 	bl	808c8a0 <_ZN7TwoWire17beginTransmissionEi>

  // Function code = 0x04
  Wire.write(0x04);
 8087250:	f005 fd50 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8087254:	2104      	movs	r1, #4
 8087256:	f7ff fff0 	bl	808723a <_ZN7TwoWire5writeEi>
  // Starting address (MSB) = 0x13
  Wire.write(0x13);
 808725a:	f005 fd4b 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 808725e:	2113      	movs	r1, #19
 8087260:	f7ff ffeb 	bl	808723a <_ZN7TwoWire5writeEi>
  // Starting address (LSB) = 0x8B
  Wire.write(0x8B);
 8087264:	f005 fd46 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8087268:	218b      	movs	r1, #139	; 0x8b
 808726a:	f7ff ffe6 	bl	808723a <_ZN7TwoWire5writeEi>
  // Input registers to read (MSB) = 0x00
  Wire.write(0x00);
 808726e:	f005 fd41 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8087272:	2100      	movs	r1, #0
 8087274:	f7ff ffe1 	bl	808723a <_ZN7TwoWire5writeEi>
  // Input registers to read (LSB) = 0x01
  Wire.write(0x01);
 8087278:	f005 fd3c 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 808727c:	2101      	movs	r1, #1
 808727e:	f7ff ffdc 	bl	808723a <_ZN7TwoWire5writeEi>

  // end transmission
  Wire.endTransmission();
 8087282:	f005 fd37 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8087286:	f005 fb12 	bl	808c8ae <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(ADDR_6713, 4);    // request 6 bytes from slave device
 808728a:	f005 fd33 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 808728e:	2204      	movs	r2, #4
 8087290:	2115      	movs	r1, #21
 8087292:	f005 faf7 	bl	808c884 <_ZN7TwoWire11requestFromEii>
  while(Wire.available() == 0);
 8087296:	f005 fd2d 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 808729a:	6803      	ldr	r3, [r0, #0]
 808729c:	691b      	ldr	r3, [r3, #16]
 808729e:	4798      	blx	r3
 80872a0:	2800      	cmp	r0, #0
 80872a2:	d0f8      	beq.n	8087296 <_ZN13Telaire_T67135beginEv+0x52>
  func_code = Wire.read();
 80872a4:	f005 fd26 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 80872a8:	6803      	ldr	r3, [r0, #0]
 80872aa:	695b      	ldr	r3, [r3, #20]
 80872ac:	4798      	blx	r3
  byte_count = Wire.read();
 80872ae:	f005 fd21 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 80872b2:	6803      	ldr	r3, [r0, #0]
 80872b4:	695b      	ldr	r3, [r3, #20]
 80872b6:	4798      	blx	r3
  MSB = Wire.read();
 80872b8:	f005 fd1c 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 80872bc:	6803      	ldr	r3, [r0, #0]
 80872be:	695b      	ldr	r3, [r3, #20]
 80872c0:	4798      	blx	r3
 80872c2:	4604      	mov	r4, r0
  LSB = Wire.read();
 80872c4:	f005 fd16 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 80872c8:	6803      	ldr	r3, [r0, #0]
 80872ca:	b2e4      	uxtb	r4, r4
 80872cc:	695b      	ldr	r3, [r3, #20]
 80872ce:	4798      	blx	r3
 80872d0:	b2c0      	uxtb	r0, r0
 80872d2:	eb00 2004 	add.w	r0, r0, r4, lsl #8
  {
    return false;
  }

  return true;
}
 80872d6:	3000      	adds	r0, #0
 80872d8:	bf18      	it	ne
 80872da:	2001      	movne	r0, #1
 80872dc:	bd10      	pop	{r4, pc}

080872de <_ZN13Telaire_T67138queryPPMEv>:
// send request to read current gas measurement in ppm
// return status: 0 success
void Telaire_T6713::queryPPM()
{
 80872de:	b508      	push	{r3, lr}
  byte_count = 0;
  MSB = 0;
  LSB = 0;

  // start I2C
  Wire.beginTransmission(ADDR_6713);
 80872e0:	f005 fd08 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 80872e4:	2115      	movs	r1, #21
 80872e6:	f005 fadb 	bl	808c8a0 <_ZN7TwoWire17beginTransmissionEi>

  // Function code = 0x04
  Wire.write(0x04);
 80872ea:	f005 fd03 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 80872ee:	2104      	movs	r1, #4
 80872f0:	f7ff ffa3 	bl	808723a <_ZN7TwoWire5writeEi>
  // Starting address (MSB) = 0x13
  Wire.write(0x13);
 80872f4:	f005 fcfe 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 80872f8:	2113      	movs	r1, #19
 80872fa:	f7ff ff9e 	bl	808723a <_ZN7TwoWire5writeEi>
  // Starting address (LSB) = 0x8B
  Wire.write(0x8B);
 80872fe:	f005 fcf9 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8087302:	218b      	movs	r1, #139	; 0x8b
 8087304:	f7ff ff99 	bl	808723a <_ZN7TwoWire5writeEi>
  // Input registers to read (MSB) = 0x00
  Wire.write(0x00);
 8087308:	f005 fcf4 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 808730c:	2100      	movs	r1, #0
 808730e:	f7ff ff94 	bl	808723a <_ZN7TwoWire5writeEi>
  // Input registers to read (LSB) = 0x01
  Wire.write(0x01);
 8087312:	f005 fcef 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8087316:	2101      	movs	r1, #1
 8087318:	f7ff ff8f 	bl	808723a <_ZN7TwoWire5writeEi>

  // end transmission
  Wire.endTransmission();
 808731c:	f005 fcea 	bl	808ccf4 <_Z19__fetch_global_Wirev>
  Serial.println(LSB);
  int ppm = MSB*256 + LSB;
  Serial.println(ppm);*/


}
 8087320:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Wire.write(0x00);
  // Input registers to read (LSB) = 0x01
  Wire.write(0x01);

  // end transmission
  Wire.endTransmission();
 8087324:	f005 bac3 	b.w	808c8ae <_ZN7TwoWire15endTransmissionEv>

08087328 <_ZN13Telaire_T67137readPPMEv>:

}

// read report of current gas measurement in ppm
int Telaire_T6713::readPPM()
{
 8087328:	b510      	push	{r4, lr}
  LSB = 0;
  #ifdef T6713_DEBUG
  Serial.println("reading gas ppm");
  #endif

  queryPPM();
 808732a:	f7ff ffd8 	bl	80872de <_ZN13Telaire_T67138queryPPMEv>
  delay(10);    //test delay
 808732e:	200a      	movs	r0, #10
 8087330:	f004 fbfc 	bl	808bb2c <delay>
  Wire.requestFrom(ADDR_6713, 4);    // request 6 bytes from slave device
 8087334:	f005 fcde 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8087338:	2204      	movs	r2, #4
 808733a:	2115      	movs	r1, #21
 808733c:	f005 faa2 	bl	808c884 <_ZN7TwoWire11requestFromEii>

   while(Wire.available() == 0);
 8087340:	f005 fcd8 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8087344:	6803      	ldr	r3, [r0, #0]
 8087346:	691b      	ldr	r3, [r3, #16]
 8087348:	4798      	blx	r3
 808734a:	2800      	cmp	r0, #0
 808734c:	d0f8      	beq.n	8087340 <_ZN13Telaire_T67137readPPMEv+0x18>
   func_code = Wire.read();
 808734e:	f005 fcd1 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8087352:	6803      	ldr	r3, [r0, #0]
 8087354:	695b      	ldr	r3, [r3, #20]
 8087356:	4798      	blx	r3
   byte_count = Wire.read();
 8087358:	f005 fccc 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 808735c:	6803      	ldr	r3, [r0, #0]
 808735e:	695b      	ldr	r3, [r3, #20]
 8087360:	4798      	blx	r3
   MSB = Wire.read();
 8087362:	f005 fcc7 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8087366:	6803      	ldr	r3, [r0, #0]
 8087368:	695b      	ldr	r3, [r3, #20]
 808736a:	4798      	blx	r3
 808736c:	4604      	mov	r4, r0
   LSB = Wire.read();
 808736e:	f005 fcc1 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8087372:	6803      	ldr	r3, [r0, #0]
   Serial.print("LSB: ");
   Serial.println(LSB);
   #endif

   // ppm = MSB*256 + LSB
   return ((MSB<<8)|LSB);
 8087374:	0224      	lsls	r4, r4, #8

   while(Wire.available() == 0);
   func_code = Wire.read();
   byte_count = Wire.read();
   MSB = Wire.read();
   LSB = Wire.read();
 8087376:	695b      	ldr	r3, [r3, #20]
 8087378:	4798      	blx	r3
   Serial.print("LSB: ");
   Serial.println(LSB);
   #endif

   // ppm = MSB*256 + LSB
   return ((MSB<<8)|LSB);
 808737a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 808737e:	b2c0      	uxtb	r0, r0
}
 8087380:	4320      	orrs	r0, r4
 8087382:	bd10      	pop	{r4, pc}

08087384 <_ZN13Telaire_T671310readStatusEi>:

void Telaire_T6713::readStatus(int debugging)
{
 8087384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8087388:	460c      	mov	r4, r1
  byte func_code, byte_count, MSB, LSB;
  func_code = 0;
  byte_count = 0;
  MSB = 0;
  LSB = 0;
  Wire.beginTransmission(ADDR_6713);
 808738a:	f005 fcb3 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 808738e:	2115      	movs	r1, #21
 8087390:	f005 fa86 	bl	808c8a0 <_ZN7TwoWire17beginTransmissionEi>
  //Wire.write(0x00);
  // Input registers to read (LSB) = 0x01
  //Wire.write(0x01);

  // Function code = 0x04
  Wire.write(0x04);
 8087394:	f005 fcae 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8087398:	2104      	movs	r1, #4
 808739a:	f7ff ff4e 	bl	808723a <_ZN7TwoWire5writeEi>
  // Starting address (MSB) = 0x13
  Wire.write(0x13);
 808739e:	f005 fca9 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 80873a2:	2113      	movs	r1, #19
 80873a4:	f7ff ff49 	bl	808723a <_ZN7TwoWire5writeEi>
  // Starting address (LSB) = 0x8B
  Wire.write(0x8A);
 80873a8:	f005 fca4 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 80873ac:	218a      	movs	r1, #138	; 0x8a
 80873ae:	f7ff ff44 	bl	808723a <_ZN7TwoWire5writeEi>
  // Input registers to read (MSB) = 0x00
  Wire.write(0x00);
 80873b2:	f005 fc9f 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 80873b6:	2100      	movs	r1, #0
 80873b8:	f7ff ff3f 	bl	808723a <_ZN7TwoWire5writeEi>
  // Input registers to read (LSB) = 0x01
  Wire.write(0x01);
 80873bc:	f005 fc9a 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 80873c0:	2101      	movs	r1, #1
 80873c2:	f7ff ff3a 	bl	808723a <_ZN7TwoWire5writeEi>

  // end transmission
   Wire.endTransmission();
 80873c6:	f005 fc95 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 80873ca:	f005 fa70 	bl	808c8ae <_ZN7TwoWire15endTransmissionEv>
   if(debugging){
 80873ce:	b124      	cbz	r4, 80873da <_ZN13Telaire_T671310readStatusEi+0x56>
       Serial.println("reading CO2 sensor status");
 80873d0:	f005 f8aa 	bl	808c528 <_Z16_fetch_usbserialv>
 80873d4:	492c      	ldr	r1, [pc, #176]	; (8087488 <_ZN13Telaire_T671310readStatusEi+0x104>)
 80873d6:	f004 f800 	bl	808b3da <_ZN5Print7printlnEPKc>
   }
   Wire.requestFrom(ADDR_6713, 4);    // request 6 bytes from slave device
 80873da:	f005 fc8b 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 80873de:	2204      	movs	r2, #4
 80873e0:	2115      	movs	r1, #21
 80873e2:	f005 fa4f 	bl	808c884 <_ZN7TwoWire11requestFromEii>

   while(Wire.available() == 0);
 80873e6:	f005 fc85 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 80873ea:	6803      	ldr	r3, [r0, #0]
 80873ec:	691b      	ldr	r3, [r3, #16]
 80873ee:	4798      	blx	r3
 80873f0:	2800      	cmp	r0, #0
 80873f2:	d0f8      	beq.n	80873e6 <_ZN13Telaire_T671310readStatusEi+0x62>
   func_code = Wire.read();
 80873f4:	f005 fc7e 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 80873f8:	6803      	ldr	r3, [r0, #0]
 80873fa:	695b      	ldr	r3, [r3, #20]
 80873fc:	4798      	blx	r3
 80873fe:	4680      	mov	r8, r0
   byte_count = Wire.read();
 8087400:	f005 fc78 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8087404:	6803      	ldr	r3, [r0, #0]
 8087406:	695b      	ldr	r3, [r3, #20]
 8087408:	4798      	blx	r3
 808740a:	4607      	mov	r7, r0
   MSB = Wire.read();
 808740c:	f005 fc72 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8087410:	6803      	ldr	r3, [r0, #0]
 8087412:	695b      	ldr	r3, [r3, #20]
 8087414:	4798      	blx	r3
 8087416:	4606      	mov	r6, r0
   LSB = Wire.read();
 8087418:	f005 fc6c 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 808741c:	6803      	ldr	r3, [r0, #0]
 808741e:	695b      	ldr	r3, [r3, #20]
 8087420:	4798      	blx	r3
 8087422:	4605      	mov	r5, r0
   if(debugging){
 8087424:	b374      	cbz	r4, 8087484 <_ZN13Telaire_T671310readStatusEi+0x100>
       Serial.print("Func code: ");
 8087426:	f005 f87f 	bl	808c528 <_Z16_fetch_usbserialv>
 808742a:	4918      	ldr	r1, [pc, #96]	; (808748c <_ZN13Telaire_T671310readStatusEi+0x108>)
 808742c:	f003 ffc2 	bl	808b3b4 <_ZN5Print5printEPKc>
       Serial.println(func_code, HEX);
 8087430:	f005 f87a 	bl	808c528 <_Z16_fetch_usbserialv>
 8087434:	2210      	movs	r2, #16
 8087436:	fa5f f188 	uxtb.w	r1, r8
 808743a:	f004 f80e 	bl	808b45a <_ZN5Print7printlnEhi>
       Serial.print("byte count: ");
 808743e:	f005 f873 	bl	808c528 <_Z16_fetch_usbserialv>
 8087442:	4913      	ldr	r1, [pc, #76]	; (8087490 <_ZN13Telaire_T671310readStatusEi+0x10c>)
 8087444:	f003 ffb6 	bl	808b3b4 <_ZN5Print5printEPKc>
       Serial.println(byte_count, HEX);
 8087448:	f005 f86e 	bl	808c528 <_Z16_fetch_usbserialv>
 808744c:	2210      	movs	r2, #16
 808744e:	b2f9      	uxtb	r1, r7
 8087450:	f004 f803 	bl	808b45a <_ZN5Print7printlnEhi>
       Serial.print("MSB: ");
 8087454:	f005 f868 	bl	808c528 <_Z16_fetch_usbserialv>
 8087458:	490e      	ldr	r1, [pc, #56]	; (8087494 <_ZN13Telaire_T671310readStatusEi+0x110>)
 808745a:	f003 ffab 	bl	808b3b4 <_ZN5Print5printEPKc>
       Serial.println(MSB, BIN);
 808745e:	f005 f863 	bl	808c528 <_Z16_fetch_usbserialv>
 8087462:	2202      	movs	r2, #2
 8087464:	b2f1      	uxtb	r1, r6
 8087466:	f003 fff8 	bl	808b45a <_ZN5Print7printlnEhi>
       Serial.print("LSB: ");
 808746a:	f005 f85d 	bl	808c528 <_Z16_fetch_usbserialv>
 808746e:	490a      	ldr	r1, [pc, #40]	; (8087498 <_ZN13Telaire_T671310readStatusEi+0x114>)
 8087470:	f003 ffa0 	bl	808b3b4 <_ZN5Print5printEPKc>
       Serial.println(LSB, BIN);
 8087474:	f005 f858 	bl	808c528 <_Z16_fetch_usbserialv>
 8087478:	b2e9      	uxtb	r1, r5
 808747a:	2202      	movs	r2, #2
   }

}
 808747c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
       Serial.print("byte count: ");
       Serial.println(byte_count, HEX);
       Serial.print("MSB: ");
       Serial.println(MSB, BIN);
       Serial.print("LSB: ");
       Serial.println(LSB, BIN);
 8087480:	f003 bfeb 	b.w	808b45a <_ZN5Print7printlnEhi>
 8087484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8087488:	08093be8 	.word	0x08093be8
 808748c:	08093c02 	.word	0x08093c02
 8087490:	08093c0e 	.word	0x08093c0e
 8087494:	08093c1b 	.word	0x08093c1b
 8087498:	08093c21 	.word	0x08093c21

0808749c <_ZN13Telaire_T671311resetSensorEv>:
   }

}

void Telaire_T6713::resetSensor()
{
 808749c:	b508      	push	{r3, lr}
  Wire.beginTransmission(ADDR_6713);
 808749e:	f005 fc29 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 80874a2:	2115      	movs	r1, #21
 80874a4:	f005 f9fc 	bl	808c8a0 <_ZN7TwoWire17beginTransmissionEi>

  // Function code = 0x04
  Wire.write(0x05);
 80874a8:	f005 fc24 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 80874ac:	2105      	movs	r1, #5
 80874ae:	f7ff fec4 	bl	808723a <_ZN7TwoWire5writeEi>
  // Starting address (MSB) = 0x13
  Wire.write(0x03);
 80874b2:	f005 fc1f 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 80874b6:	2103      	movs	r1, #3
 80874b8:	f7ff febf 	bl	808723a <_ZN7TwoWire5writeEi>
  // Starting address (LSB) = 0x8B
  Wire.write(0xE8);
 80874bc:	f005 fc1a 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 80874c0:	21e8      	movs	r1, #232	; 0xe8
 80874c2:	f7ff feba 	bl	808723a <_ZN7TwoWire5writeEi>
  // Input registers to read (MSB) = 0x00
  Wire.write(0xFF);
 80874c6:	f005 fc15 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 80874ca:	21ff      	movs	r1, #255	; 0xff
 80874cc:	f7ff feb5 	bl	808723a <_ZN7TwoWire5writeEi>
  // Input registers to read (LSB) = 0x01
  Wire.write(0x00);
 80874d0:	f005 fc10 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 80874d4:	2100      	movs	r1, #0
 80874d6:	f7ff feb0 	bl	808723a <_ZN7TwoWire5writeEi>

  // end transmission
   Wire.endTransmission();
 80874da:	f005 fc0b 	bl	808ccf4 <_Z19__fetch_global_Wirev>
}
 80874de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Wire.write(0xFF);
  // Input registers to read (LSB) = 0x01
  Wire.write(0x00);

  // end transmission
   Wire.endTransmission();
 80874e2:	f005 b9e4 	b.w	808c8ae <_ZN7TwoWire15endTransmissionEv>

080874e6 <_ZN13Telaire_T671315disableABCLogicEv>:
}

void Telaire_T6713::disableABCLogic()
{
 80874e6:	b508      	push	{r3, lr}
    Wire.beginTransmission(ADDR_6713);
 80874e8:	f005 fc04 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 80874ec:	2115      	movs	r1, #21
 80874ee:	f005 f9d7 	bl	808c8a0 <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 80874f2:	f005 fbff 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 80874f6:	2105      	movs	r1, #5
 80874f8:	f7ff fe9f 	bl	808723a <_ZN7TwoWire5writeEi>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 80874fc:	f005 fbfa 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8087500:	2103      	movs	r1, #3
 8087502:	f7ff fe9a 	bl	808723a <_ZN7TwoWire5writeEi>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEE);
 8087506:	f005 fbf5 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 808750a:	21ee      	movs	r1, #238	; 0xee
 808750c:	f7ff fe95 	bl	808723a <_ZN7TwoWire5writeEi>
    // Input registers to read (MSB) = 0x00
    Wire.write(0x00);
 8087510:	f005 fbf0 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8087514:	2100      	movs	r1, #0
 8087516:	f7ff fe90 	bl	808723a <_ZN7TwoWire5writeEi>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 808751a:	f005 fbeb 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 808751e:	2100      	movs	r1, #0
 8087520:	f7ff fe8b 	bl	808723a <_ZN7TwoWire5writeEi>

    // end transmission
    Wire.endTransmission();
 8087524:	f005 fbe6 	bl	808ccf4 <_Z19__fetch_global_Wirev>
}
 8087528:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.write(0x00);
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);

    // end transmission
    Wire.endTransmission();
 808752c:	f005 b9bf 	b.w	808c8ae <_ZN7TwoWire15endTransmissionEv>

08087530 <_ZN13Telaire_T671314enableABCLogicEv>:
}

void Telaire_T6713::enableABCLogic()
{
 8087530:	b508      	push	{r3, lr}
    Wire.beginTransmission(ADDR_6713);
 8087532:	f005 fbdf 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8087536:	2115      	movs	r1, #21
 8087538:	f005 f9b2 	bl	808c8a0 <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 808753c:	f005 fbda 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8087540:	2105      	movs	r1, #5
 8087542:	f7ff fe7a 	bl	808723a <_ZN7TwoWire5writeEi>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 8087546:	f005 fbd5 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 808754a:	2103      	movs	r1, #3
 808754c:	f7ff fe75 	bl	808723a <_ZN7TwoWire5writeEi>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEE);
 8087550:	f005 fbd0 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8087554:	21ee      	movs	r1, #238	; 0xee
 8087556:	f7ff fe70 	bl	808723a <_ZN7TwoWire5writeEi>
    // Input registers to read (MSB) = 0x00
    Wire.write(0xFF);
 808755a:	f005 fbcb 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 808755e:	21ff      	movs	r1, #255	; 0xff
 8087560:	f7ff fe6b 	bl	808723a <_ZN7TwoWire5writeEi>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 8087564:	f005 fbc6 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8087568:	2100      	movs	r1, #0
 808756a:	f7ff fe66 	bl	808723a <_ZN7TwoWire5writeEi>

    // end transmission
    Wire.endTransmission();
 808756e:	f005 fbc1 	bl	808ccf4 <_Z19__fetch_global_Wirev>
}
 8087572:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.write(0xFF);
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);

    // end transmission
    Wire.endTransmission();
 8087576:	f005 b99a 	b.w	808c8ae <_ZN7TwoWire15endTransmissionEv>
	...

0808757c <_ZN13Telaire_T67139calibrateEi>:
}


//start a 1 point calibration - this lasts 6 minutes so check the status bit
void Telaire_T6713::calibrate(int debugging)
{
 808757c:	b508      	push	{r3, lr}
    if(debugging){
 808757e:	b121      	cbz	r1, 808758a <_ZN13Telaire_T67139calibrateEi+0xe>
      Serial.println("Calibrating CO2");
 8087580:	f004 ffd2 	bl	808c528 <_Z16_fetch_usbserialv>
 8087584:	4913      	ldr	r1, [pc, #76]	; (80875d4 <_ZN13Telaire_T67139calibrateEi+0x58>)
 8087586:	f003 ff28 	bl	808b3da <_ZN5Print7printlnEPKc>
    }
    //[0x05, 0x03, 0xec, 0xff, 0x00]
    Wire.beginTransmission(ADDR_6713);
 808758a:	f005 fbb3 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 808758e:	2115      	movs	r1, #21
 8087590:	f005 f986 	bl	808c8a0 <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 8087594:	f005 fbae 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8087598:	2105      	movs	r1, #5
 808759a:	f7ff fe4e 	bl	808723a <_ZN7TwoWire5writeEi>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 808759e:	f005 fba9 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 80875a2:	2103      	movs	r1, #3
 80875a4:	f7ff fe49 	bl	808723a <_ZN7TwoWire5writeEi>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEC);
 80875a8:	f005 fba4 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 80875ac:	21ec      	movs	r1, #236	; 0xec
 80875ae:	f7ff fe44 	bl	808723a <_ZN7TwoWire5writeEi>
    // Input registers to read (MSB) = 0x00
    Wire.write(0xFF);
 80875b2:	f005 fb9f 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 80875b6:	21ff      	movs	r1, #255	; 0xff
 80875b8:	f7ff fe3f 	bl	808723a <_ZN7TwoWire5writeEi>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 80875bc:	f005 fb9a 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 80875c0:	2100      	movs	r1, #0
 80875c2:	f7ff fe3a 	bl	808723a <_ZN7TwoWire5writeEi>

    // end transmission
    Wire.endTransmission();
 80875c6:	f005 fb95 	bl	808ccf4 <_Z19__fetch_global_Wirev>
}
 80875ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.write(0xFF);
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);

    // end transmission
    Wire.endTransmission();
 80875ce:	f005 b96e 	b.w	808c8ae <_ZN7TwoWire15endTransmissionEv>
 80875d2:	bf00      	nop
 80875d4:	08093c27 	.word	0x08093c27

080875d8 <_GLOBAL__sub_I__ZN13Telaire_T6713C2Ev>:
 80875d8:	f002 be62 	b.w	808a2a0 <HAL_Pin_Map>

080875dc <_GLOBAL__sub_I__ZN7istream3getEv>:
 80875dc:	f002 be60 	b.w	808a2a0 <HAL_Pin_Map>

080875e0 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
 80875e0:	b510      	push	{r4, lr}
 80875e2:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync();
 80875e4:	3028      	adds	r0, #40	; 0x28
 80875e6:	f001 f97f 	bl	80888e8 <_ZN8FatCache4syncEv>
 80875ea:	b128      	cbz	r0, 80875f8 <_ZN9FatVolume9cacheSyncEv+0x18>
 80875ec:	f504 700d 	add.w	r0, r4, #564	; 0x234
  }
 80875f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync();
 80875f4:	f001 b978 	b.w	80888e8 <_ZN8FatCache4syncEv>
  }
 80875f8:	bd10      	pop	{r4, pc}

080875fa <_ZN7FatFile11lfnChecksumEPh>:
 * <http://www.gnu.org/licenses/>.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
 80875fa:	1e41      	subs	r1, r0, #1
 80875fc:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
 8087600:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 8087602:	0843      	lsrs	r3, r0, #1
 8087604:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
 8087608:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 808760c:	4418      	add	r0, r3
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 808760e:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 8087610:	f000 00ff 	and.w	r0, r0, #255	; 0xff
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 8087614:	d1f5      	bne.n	8087602 <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
 8087616:	4770      	bx	lr

08087618 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
 8087618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
 808761c:	7803      	ldrb	r3, [r0, #0]
 808761e:	1c44      	adds	r4, r0, #1
 8087620:	2b20      	cmp	r3, #32
 8087622:	d101      	bne.n	8087628 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x10>
 8087624:	4620      	mov	r0, r4
 8087626:	e7f9      	b.n	808761c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
    path++;
  }
  fname->lfn = path;
 8087628:	4605      	mov	r5, r0
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 808762a:	4f70      	ldr	r7, [pc, #448]	; (80877ec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
 808762c:	6088      	str	r0, [r1, #8]
 808762e:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
 8087630:	462e      	mov	r6, r5
 8087632:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
 8087636:	b30b      	cbz	r3, 808767c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x64>
 8087638:	2b2f      	cmp	r3, #47	; 0x2f
 808763a:	d101      	bne.n	8087640 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x28>
 808763c:	1903      	adds	r3, r0, r4
 808763e:	e017      	b.n	8087670 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x58>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 8087640:	2b5c      	cmp	r3, #92	; 0x5c
 8087642:	d102      	bne.n	808764a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x32>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
 8087644:	2000      	movs	r0, #0
 8087646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 808764a:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
 808764e:	b2e4      	uxtb	r4, r4
 8087650:	2c1d      	cmp	r4, #29
 8087652:	d803      	bhi.n	808765c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x44>
 8087654:	fa27 f404 	lsr.w	r4, r7, r4
 8087658:	07e4      	lsls	r4, r4, #31
 808765a:	d4f3      	bmi.n	8087644 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
 808765c:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
 8087660:	2c3c      	cmp	r4, #60	; 0x3c
 8087662:	d0ef      	beq.n	8087644 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
 8087664:	3b20      	subs	r3, #32
 8087666:	2b5e      	cmp	r3, #94	; 0x5e
 8087668:	d9e1      	bls.n	808762e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x16>
 808766a:	e7eb      	b.n	8087644 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
 808766c:	2d2f      	cmp	r5, #47	; 0x2f
 808766e:	d105      	bne.n	808767c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x64>
 8087670:	461e      	mov	r6, r3
 8087672:	f813 5b01 	ldrb.w	r5, [r3], #1
 8087676:	2d20      	cmp	r5, #32
 8087678:	d1f8      	bne.n	808766c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x54>
 808767a:	e7f9      	b.n	8087670 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x58>
  *ptr = &path[end];
 808767c:	6016      	str	r6, [r2, #0]
 808767e:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
 8087680:	4298      	cmp	r0, r3
 8087682:	ebc0 0803 	rsb	r8, r0, r3
 8087686:	d009      	beq.n	808769c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x84>
    c = path[len - 1];
 8087688:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
 808768c:	2a2e      	cmp	r2, #46	; 0x2e
 808768e:	d0f7      	beq.n	8087680 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x68>
 8087690:	2a20      	cmp	r2, #32
 8087692:	d0f5      	beq.n	8087680 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x68>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
 8087694:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8087698:	dcd4      	bgt.n	8087644 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
 808769a:	e001      	b.n	80876a0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
 808769c:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
 80876a0:	f8c1 8004 	str.w	r8, [r1, #4]
 80876a4:	f101 030c 	add.w	r3, r1, #12
 80876a8:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
 80876ac:	2420      	movs	r4, #32
 80876ae:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
 80876b2:	4293      	cmp	r3, r2
 80876b4:	d1fb      	bne.n	80876ae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x96>
 80876b6:	4603      	mov	r3, r0
 80876b8:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 80876ba:	f813 4b01 	ldrb.w	r4, [r3], #1
 80876be:	2c2e      	cmp	r4, #46	; 0x2e
 80876c0:	d0fa      	beq.n	80876b8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa0>
 80876c2:	2c20      	cmp	r4, #32
 80876c4:	d0f8      	beq.n	80876b8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa0>
  // Not 8.3 if leading dot or space.
  is83 = !si;
 80876c6:	fab2 f482 	clz	r4, r2

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 80876ca:	f108 36ff 	add.w	r6, r8, #4294967295
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
  // Not 8.3 if leading dot or space.
  is83 = !si;
 80876ce:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 80876d0:	1c73      	adds	r3, r6, #1
 80876d2:	d107      	bne.n	80876e4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xcc>
 80876d4:	2700      	movs	r7, #0
 80876d6:	f04f 0e07 	mov.w	lr, #7
 80876da:	463d      	mov	r5, r7
 80876dc:	46ba      	mov	sl, r7
 80876de:	f04f 0908 	mov.w	r9, #8
 80876e2:	e009      	b.n	80876f8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
 80876e4:	5d83      	ldrb	r3, [r0, r6]
 80876e6:	2b2e      	cmp	r3, #46	; 0x2e
 80876e8:	d0f4      	beq.n	80876d4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbc>
 80876ea:	3e01      	subs	r6, #1
 80876ec:	e7f0      	b.n	80876d0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xb8>
  for (; si < len; si++) {
    c = path[si];
 80876ee:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
 80876f0:	2b20      	cmp	r3, #32
 80876f2:	d104      	bne.n	80876fe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe6>
      is83 = false;
 80876f4:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
 80876f6:	3201      	adds	r2, #1
 80876f8:	4542      	cmp	r2, r8
 80876fa:	dbf8      	blt.n	80876ee <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
 80876fc:	e04b      	b.n	8087796 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
 80876fe:	2b2e      	cmp	r3, #46	; 0x2e
 8087700:	d102      	bne.n	8087708 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
 8087702:	42b2      	cmp	r2, r6
 8087704:	d1f6      	bne.n	80876f4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xdc>
 8087706:	e003      	b.n	8087710 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
 8087708:	2b22      	cmp	r3, #34	; 0x22
 808770a:	d017      	beq.n	808773c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
 808770c:	2b7c      	cmp	r3, #124	; 0x7c
 808770e:	d015      	beq.n	808773c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
 8087710:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
 8087714:	f1bc 0f05 	cmp.w	ip, #5
 8087718:	d801      	bhi.n	808771e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x106>
 808771a:	2b2d      	cmp	r3, #45	; 0x2d
 808771c:	d10e      	bne.n	808773c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
 808771e:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
 8087722:	f1bc 0f05 	cmp.w	ip, #5
 8087726:	d909      	bls.n	808773c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
 8087728:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
 808772c:	f1bc 0f02 	cmp.w	ip, #2
 8087730:	d904      	bls.n	808773c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
 8087732:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
 8087736:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
 808773a:	d902      	bls.n	8087742 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12a>
 808773c:	42b2      	cmp	r2, r6
 808773e:	d10e      	bne.n	808775e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x146>
 8087740:	e049      	b.n	80877d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1be>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
 8087742:	42b2      	cmp	r2, r6
 8087744:	d047      	beq.n	80877d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1be>
 8087746:	4575      	cmp	r5, lr
 8087748:	d821      	bhi.n	808778e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x176>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
 808774a:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 808774e:	f1bc 0f19 	cmp.w	ip, #25
 8087752:	d808      	bhi.n	8087766 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14e>
        c += 'A' - 'a';
 8087754:	3b20      	subs	r3, #32
 8087756:	b2db      	uxtb	r3, r3
        lc |= bit;
 8087758:	ea49 0707 	orr.w	r7, r9, r7
 808775c:	e00a      	b.n	8087774 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15c>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
 808775e:	4575      	cmp	r5, lr
 8087760:	d815      	bhi.n	808778e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x176>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
 8087762:	2400      	movs	r4, #0
      c = '_';
 8087764:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
 8087766:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 808776a:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
 808776e:	bf98      	it	ls
 8087770:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
 8087774:	f105 0c01 	add.w	ip, r5, #1
 8087778:	fa5f fc8c 	uxtb.w	ip, ip
 808777c:	440d      	add	r5, r1
      if (i < 7) {
 808777e:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
 8087782:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
 8087784:	d801      	bhi.n	808778a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x172>
        fname->seqPos = i;
 8087786:	f881 c00c 	strb.w	ip, [r1, #12]
 808778a:	4665      	mov	r5, ip
 808778c:	e7b3      	b.n	80876f6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
 808778e:	f1be 0f0a 	cmp.w	lr, #10
 8087792:	d117      	bne.n	80877c4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
 8087794:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
 8087796:	7b4b      	ldrb	r3, [r1, #13]
 8087798:	2b20      	cmp	r3, #32
 808779a:	f43f af53 	beq.w	8087644 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
    return false;
  }

  if (is83) {
 808779e:	b13c      	cbz	r4, 80877b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x198>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
 80877a0:	ea1a 0f07 	tst.w	sl, r7
 80877a4:	bf18      	it	ne
 80877a6:	2702      	movne	r7, #2
 80877a8:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
 80877aa:	2001      	movs	r0, #1
 80877ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
 80877b0:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
 80877b2:	2001      	movs	r0, #1
 80877b4:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
 80877b6:	4419      	add	r1, r3
 80877b8:	237e      	movs	r3, #126	; 0x7e
 80877ba:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
 80877bc:	2331      	movs	r3, #49	; 0x31
 80877be:	738b      	strb	r3, [r1, #14]
 80877c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
 80877c4:	42b2      	cmp	r2, r6
 80877c6:	dce5      	bgt.n	8087794 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17c>
 80877c8:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
 80877ca:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
 80877ce:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 80877d0:	f04f 0910 	mov.w	r9, #16
 80877d4:	e78e      	b.n	80876f4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xdc>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
 80877d6:	f1be 0f0a 	cmp.w	lr, #10
 80877da:	d0db      	beq.n	8087794 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17c>
 80877dc:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
 80877de:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
 80877e2:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 80877e4:	f04f 0910 	mov.w	r9, #16
 80877e8:	e785      	b.n	80876f6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
 80877ea:	bf00      	nop
 80877ec:	31000101 	.word	0x31000101

080877f0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
 80877f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80877f4:	4606      	mov	r6, r0
 80877f6:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
 80877f8:	f891 900c 	ldrb.w	r9, [r1, #12]
 80877fc:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 80877fe:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 8087800:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
 8087804:	6869      	ldr	r1, [r5, #4]
 8087806:	68aa      	ldr	r2, [r5, #8]
 8087808:	1863      	adds	r3, r4, r1
 808780a:	b29b      	uxth	r3, r3
 808780c:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
 808780e:	4291      	cmp	r1, r2
 8087810:	d006      	beq.n	8087820 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
 8087812:	f812 0b01 	ldrb.w	r0, [r2], #1
 8087816:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 808781a:	4043      	eors	r3, r0
 808781c:	b29b      	uxth	r3, r3
 808781e:	e7f6      	b.n	808780e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
 8087820:	f1b9 0f03 	cmp.w	r9, #3
 8087824:	bf28      	it	cs
 8087826:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 808782a:	f109 0204 	add.w	r2, r9, #4
 808782e:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
 8087830:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8087834:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8087836:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8087838:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 808783a:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 808783c:	bf94      	ite	ls
 808783e:	3130      	addls	r1, #48	; 0x30
 8087840:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8087842:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8087844:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
 8087846:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 808784a:	d3f1      	bcc.n	8087830 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 808784c:	eb05 0309 	add.w	r3, r5, r9
 8087850:	735f      	strb	r7, [r3, #13]
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
 8087852:	2100      	movs	r1, #0
 8087854:	4630      	mov	r0, r6
 8087856:	f000 fe38 	bl	80884ca <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
 808785a:	2101      	movs	r1, #1
 808785c:	4630      	mov	r0, r6
 808785e:	f000 fe17 	bl	8088490 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
 8087862:	4601      	mov	r1, r0
 8087864:	b928      	cbnz	r0, 8087872 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
 8087866:	7870      	ldrb	r0, [r6, #1]
 8087868:	fab0 f080 	clz	r0, r0
 808786c:	0940      	lsrs	r0, r0, #5
 808786e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
 8087872:	7803      	ldrb	r3, [r0, #0]
 8087874:	b14b      	cbz	r3, 808788a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 8087876:	7ac3      	ldrb	r3, [r0, #11]
 8087878:	071b      	lsls	r3, r3, #28
 808787a:	d4ee      	bmi.n	808785a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 808787c:	220b      	movs	r2, #11
 808787e:	4640      	mov	r0, r8
 8087880:	f006 ff2e 	bl	808e6e0 <memcmp>
 8087884:	2800      	cmp	r0, #0
 8087886:	d1e8      	bne.n	808785a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 8087888:	e002      	b.n	8087890 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
 808788a:	2001      	movs	r0, #1
 808788c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8087890:	3401      	adds	r4, #1
 8087892:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
 8087894:	2c64      	cmp	r4, #100	; 0x64
 8087896:	d1b5      	bne.n	8087804 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
 8087898:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0808789c <_ZN7FatFile4openEPS_P7fname_th>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 808789c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80878a0:	b089      	sub	sp, #36	; 0x24
 80878a2:	9303      	str	r3, [sp, #12]
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 80878a4:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 80878a6:	9005      	str	r0, [sp, #20]
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 80878a8:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 80878ac:	460e      	mov	r6, r1
 80878ae:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 80878b0:	d101      	bne.n	80878b6 <_ZN7FatFile4openEPS_P7fname_th+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
 80878b2:	2000      	movs	r0, #0
 80878b4:	e199      	b.n	8087bea <_ZN7FatFile4openEPS_P7fname_th+0x34e>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 80878b6:	9b05      	ldr	r3, [sp, #20]
 80878b8:	781b      	ldrb	r3, [r3, #0]
 80878ba:	2b00      	cmp	r3, #0
 80878bc:	d1f9      	bne.n	80878b2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 80878be:	7813      	ldrb	r3, [r2, #0]
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
 80878c0:	f8d2 b004 	ldr.w	fp, [r2, #4]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 80878c4:	079b      	lsls	r3, r3, #30
 80878c6:	f000 8186 	beq.w	8087bd6 <_ZN7FatFile4openEPS_P7fname_th+0x33a>
 80878ca:	f10b 030c 	add.w	r3, fp, #12
 80878ce:	270d      	movs	r7, #13
 80878d0:	fbb3 f7f7 	udiv	r7, r3, r7
 80878d4:	3701      	adds	r7, #1
 80878d6:	b2ff      	uxtb	r7, r7
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
 80878d8:	f04f 0800 	mov.w	r8, #0
 80878dc:	2100      	movs	r1, #0
 80878de:	4630      	mov	r0, r6
 80878e0:	f000 fdf3 	bl	80884ca <_ZN7FatFile7seekSetEm>
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
 80878e4:	4645      	mov	r5, r8
  uint8_t ord = 0;
 80878e6:	4643      	mov	r3, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
 80878e8:	4644      	mov	r4, r8
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 80878ea:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
 80878ee:	f8cd 8008 	str.w	r8, [sp, #8]
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
  bool fnameFound = false;
 80878f2:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 80878f6:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 80878f8:	6972      	ldr	r2, [r6, #20]
    dir = dirFile->readDirCache(true);
 80878fa:	2101      	movs	r1, #1
 80878fc:	4630      	mov	r0, r6
 80878fe:	9307      	str	r3, [sp, #28]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 8087900:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
 8087904:	f000 fdc4 	bl	8088490 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 8087908:	9b07      	ldr	r3, [sp, #28]
 808790a:	b920      	cbnz	r0, 8087916 <_ZN7FatFile4openEPS_P7fname_th+0x7a>
      if (dirFile->getError()) {
 808790c:	7873      	ldrb	r3, [r6, #1]
 808790e:	2b00      	cmp	r3, #0
 8087910:	f000 808e 	beq.w	8087a30 <_ZN7FatFile4openEPS_P7fname_th+0x194>
 8087914:	e7cd      	b.n	80878b2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
 8087916:	7802      	ldrb	r2, [r0, #0]
 8087918:	2ae5      	cmp	r2, #229	; 0xe5
 808791a:	d000      	beq.n	808791e <_ZN7FatFile4openEPS_P7fname_th+0x82>
 808791c:	b942      	cbnz	r2, 8087930 <_ZN7FatFile4openEPS_P7fname_th+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 808791e:	2d00      	cmp	r5, #0
 8087920:	bf08      	it	eq
 8087922:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
 8087924:	42bd      	cmp	r5, r7
        freeFound++;
 8087926:	bf3c      	itt	cc
 8087928:	3501      	addcc	r5, #1
 808792a:	b2ed      	uxtbcc	r5, r5
      }
      if (dir->name[0] == DIR_NAME_FREE) {
 808792c:	b922      	cbnz	r2, 8087938 <_ZN7FatFile4openEPS_P7fname_th+0x9c>
 808792e:	e07f      	b.n	8087a30 <_ZN7FatFile4openEPS_P7fname_th+0x194>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
 8087930:	42bd      	cmp	r5, r7
 8087932:	bf38      	it	cc
 8087934:	2500      	movcc	r5, #0
 8087936:	e003      	b.n	8087940 <_ZN7FatFile4openEPS_P7fname_th+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 8087938:	2ae5      	cmp	r2, #229	; 0xe5
 808793a:	d101      	bne.n	8087940 <_ZN7FatFile4openEPS_P7fname_th+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
 808793c:	2400      	movs	r4, #0
 808793e:	e7db      	b.n	80878f8 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 8087940:	2a2e      	cmp	r2, #46	; 0x2e
 8087942:	d0fb      	beq.n	808793c <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 8087944:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
 8087946:	290f      	cmp	r1, #15
 8087948:	d150      	bne.n	80879ec <_ZN7FatFile4openEPS_P7fname_th+0x150>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
 808794a:	b93c      	cbnz	r4, 808795c <_ZN7FatFile4openEPS_P7fname_th+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
 808794c:	0651      	lsls	r1, r2, #25
 808794e:	d5d3      	bpl.n	80878f8 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
 8087950:	7b43      	ldrb	r3, [r0, #13]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
 8087952:	f002 041f 	and.w	r4, r2, #31
        chksum = ldir->chksum;
 8087956:	9302      	str	r3, [sp, #8]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
 8087958:	4623      	mov	r3, r4
 808795a:	e007      	b.n	808796c <_ZN7FatFile4openEPS_P7fname_th+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
 808795c:	3b01      	subs	r3, #1
 808795e:	b2db      	uxtb	r3, r3
 8087960:	429a      	cmp	r2, r3
 8087962:	d1eb      	bne.n	808793c <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 8087964:	7b42      	ldrb	r2, [r0, #13]
 8087966:	9902      	ldr	r1, [sp, #8]
 8087968:	4291      	cmp	r1, r2
 808796a:	d1e7      	bne.n	808793c <_ZN7FatFile4openEPS_P7fname_th+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
 808796c:	1e5a      	subs	r2, r3, #1
 808796e:	f04f 0c0d 	mov.w	ip, #13
 8087972:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
 8087976:	45e3      	cmp	fp, ip
 8087978:	d9e0      	bls.n	808793c <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 808797a:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
 808797e:	f1be 0f04 	cmp.w	lr, #4
 8087982:	fa5f f28e 	uxtb.w	r2, lr
 8087986:	d804      	bhi.n	8087992 <_ZN7FatFile4openEPS_P7fname_th+0xf6>
    return ldir->name1[i];
 8087988:	eb00 024e 	add.w	r2, r0, lr, lsl #1
 808798c:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 8087990:	e00c      	b.n	80879ac <_ZN7FatFile4openEPS_P7fname_th+0x110>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 8087992:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
 8087994:	bf95      	itete	ls
 8087996:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 808799a:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 808799e:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 80879a2:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 80879a6:	bf94      	ite	ls
 80879a8:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 80879aa:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
 80879ac:	45e3      	cmp	fp, ip
 80879ae:	d103      	bne.n	80879b8 <_ZN7FatFile4openEPS_P7fname_th+0x11c>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
 80879b0:	2a00      	cmp	r2, #0
 80879b2:	bf18      	it	ne
 80879b4:	2400      	movne	r4, #0
 80879b6:	e79f      	b.n	80878f8 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 80879b8:	2aff      	cmp	r2, #255	; 0xff
 80879ba:	d8bf      	bhi.n	808793c <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 80879bc:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 80879be:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 80879c2:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 80879c4:	f8d9 1008 	ldr.w	r1, [r9, #8]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 80879c8:	bf98      	it	ls
 80879ca:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 80879cc:	f811 100c 	ldrb.w	r1, [r1, ip]
 80879d0:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 80879d4:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
 80879d8:	bf98      	it	ls
 80879da:	b2d2      	uxtbls	r2, r2
 80879dc:	f1bc 0f19 	cmp.w	ip, #25
 80879e0:	bf9c      	itt	ls
 80879e2:	3120      	addls	r1, #32
 80879e4:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 80879e6:	4291      	cmp	r1, r2
 80879e8:	d1a8      	bne.n	808793c <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 80879ea:	e0f6      	b.n	8087bda <_ZN7FatFile4openEPS_P7fname_th+0x33e>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
 80879ec:	070a      	lsls	r2, r1, #28
 80879ee:	d4a5      	bmi.n	808793c <_ZN7FatFile4openEPS_P7fname_th+0xa0>
      if (lfnOrd) {
 80879f0:	b14c      	cbz	r4, 8087a06 <_ZN7FatFile4openEPS_P7fname_th+0x16a>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
 80879f2:	2b01      	cmp	r3, #1
 80879f4:	f47f af5d 	bne.w	80878b2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
 80879f8:	f7ff fdff 	bl	80875fa <_ZN7FatFile11lfnChecksumEPh>
 80879fc:	9b02      	ldr	r3, [sp, #8]
 80879fe:	4283      	cmp	r3, r0
 8087a00:	f47f af57 	bne.w	80878b2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
 8087a04:	e00f      	b.n	8087a26 <_ZN7FatFile4openEPS_P7fname_th+0x18a>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8087a06:	220b      	movs	r2, #11
 8087a08:	9906      	ldr	r1, [sp, #24]
 8087a0a:	9307      	str	r3, [sp, #28]
 8087a0c:	f006 fe68 	bl	808e6e0 <memcmp>
 8087a10:	9b07      	ldr	r3, [sp, #28]
 8087a12:	2800      	cmp	r0, #0
 8087a14:	f47f af70 	bne.w	80878f8 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
 8087a18:	f899 2000 	ldrb.w	r2, [r9]
 8087a1c:	07d1      	lsls	r1, r2, #31
 8087a1e:	d502      	bpl.n	8087a26 <_ZN7FatFile4openEPS_P7fname_th+0x18a>
          goto found;
        }
        fnameFound = true;
 8087a20:	2201      	movs	r2, #1
 8087a22:	9204      	str	r2, [sp, #16]
 8087a24:	e768      	b.n	80878f8 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
 8087a26:	9b03      	ldr	r3, [sp, #12]
 8087a28:	061a      	lsls	r2, r3, #24
 8087a2a:	f140 80cc 	bpl.w	8087bc6 <_ZN7FatFile4openEPS_P7fname_th+0x32a>
 8087a2e:	e740      	b.n	80878b2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and O_WRITE
  if (!(oflag & O_CREAT) || !(oflag & O_WRITE)) {
 8087a30:	9b03      	ldr	r3, [sp, #12]
 8087a32:	f003 0342 	and.w	r3, r3, #66	; 0x42
 8087a36:	2b42      	cmp	r3, #66	; 0x42
 8087a38:	f47f af3b 	bne.w	80878b2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
 8087a3c:	2d00      	cmp	r5, #0
 8087a3e:	bf08      	it	eq
 8087a40:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
 8087a42:	42bd      	cmp	r5, r7
 8087a44:	d302      	bcc.n	8087a4c <_ZN7FatFile4openEPS_P7fname_th+0x1b0>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
 8087a46:	9b04      	ldr	r3, [sp, #16]
 8087a48:	b9cb      	cbnz	r3, 8087a7e <_ZN7FatFile4openEPS_P7fname_th+0x1e2>
 8087a4a:	e01f      	b.n	8087a8c <_ZN7FatFile4openEPS_P7fname_th+0x1f0>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
 8087a4c:	2100      	movs	r1, #0
 8087a4e:	4630      	mov	r0, r6
 8087a50:	f000 fd1e 	bl	8088490 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 8087a54:	b910      	cbnz	r0, 8087a5c <_ZN7FatFile4openEPS_P7fname_th+0x1c0>
      if (dirFile->getError()) {
 8087a56:	7873      	ldrb	r3, [r6, #1]
 8087a58:	b15b      	cbz	r3, 8087a72 <_ZN7FatFile4openEPS_P7fname_th+0x1d6>
 8087a5a:	e72a      	b.n	80878b2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
 8087a5c:	3501      	adds	r5, #1
 8087a5e:	b2ed      	uxtb	r5, r5
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
 8087a60:	e7ef      	b.n	8087a42 <_ZN7FatFile4openEPS_P7fname_th+0x1a6>
 8087a62:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
 8087a64:	791b      	ldrb	r3, [r3, #4]
 8087a66:	2b01      	cmp	r3, #1
 8087a68:	d8ed      	bhi.n	8087a46 <_ZN7FatFile4openEPS_P7fname_th+0x1aa>
      break;
    }
    freeFound += 16;
 8087a6a:	3510      	adds	r5, #16
 8087a6c:	b2ed      	uxtb	r5, r5
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
 8087a6e:	42af      	cmp	r7, r5
 8087a70:	d9e9      	bls.n	8087a46 <_ZN7FatFile4openEPS_P7fname_th+0x1aa>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
 8087a72:	4630      	mov	r0, r6
 8087a74:	f000 fbde 	bl	8088234 <_ZN7FatFile13addDirClusterEv>
 8087a78:	2800      	cmp	r0, #0
 8087a7a:	d1f2      	bne.n	8087a62 <_ZN7FatFile4openEPS_P7fname_th+0x1c6>
 8087a7c:	e719      	b.n	80878b2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
 8087a7e:	4649      	mov	r1, r9
 8087a80:	4630      	mov	r0, r6
 8087a82:	f7ff feb5 	bl	80877f0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
 8087a86:	2800      	cmp	r0, #0
 8087a88:	f43f af13 	beq.w	80878b2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
 8087a8c:	ea4f 1148 	mov.w	r1, r8, lsl #5
 8087a90:	4630      	mov	r0, r6
 8087a92:	f000 fd1a 	bl	80884ca <_ZN7FatFile7seekSetEm>
 8087a96:	2800      	cmp	r0, #0
 8087a98:	f43f af0b 	beq.w	80878b2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
 8087a9c:	1e7c      	subs	r4, r7, #1
 8087a9e:	b2e4      	uxtb	r4, r4
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 8087aa0:	4625      	mov	r5, r4
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 8087aa2:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
 8087aa6:	f04f 080f 	mov.w	r8, #15
 8087aaa:	e040      	b.n	8087b2e <_ZN7FatFile4openEPS_P7fname_th+0x292>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 8087aac:	2100      	movs	r1, #0
 8087aae:	4630      	mov	r0, r6
 8087ab0:	f000 fcee 	bl	8088490 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
 8087ab4:	4607      	mov	r7, r0
 8087ab6:	2800      	cmp	r0, #0
 8087ab8:	f43f aefb 	beq.w	80878b2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
 8087abc:	68b2      	ldr	r2, [r6, #8]
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 8087abe:	42a5      	cmp	r5, r4
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
 8087ac0:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8087ac4:	f043 0301 	orr.w	r3, r3, #1
 8087ac8:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8087acc:	bf14      	ite	ne
 8087ace:	462a      	movne	r2, r5
 8087ad0:	f045 0240 	orreq.w	r2, r5, #64	; 0x40
 8087ad4:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
 8087ad6:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
 8087ada:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
 8087ade:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 8087ae2:	9202      	str	r2, [sp, #8]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
 8087ae4:	f7ff fd89 	bl	80875fa <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8087ae8:	9a02      	ldr	r2, [sp, #8]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
 8087aea:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
 8087aec:	f887 a01a 	strb.w	sl, [r7, #26]
 8087af0:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8087af4:	f002 021f 	and.w	r2, r2, #31
 8087af8:	230d      	movs	r3, #13
 8087afa:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
 8087afc:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8087b00:	435a      	muls	r2, r3
 8087b02:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 8087b04:	4593      	cmp	fp, r2
 8087b06:	d915      	bls.n	8087b34 <_ZN7FatFile4openEPS_P7fname_th+0x298>
 8087b08:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
 8087b0c:	2b04      	cmp	r3, #4
 8087b0e:	fa5f fc83 	uxtb.w	ip, r3
 8087b12:	f103 0001 	add.w	r0, r3, #1
 8087b16:	d813      	bhi.n	8087b40 <_ZN7FatFile4openEPS_P7fname_th+0x2a4>
    ldir->name1[i] = c;
 8087b18:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8087b1c:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
 8087b20:	280d      	cmp	r0, #13
 8087b22:	f102 0201 	add.w	r2, r2, #1
 8087b26:	4603      	mov	r3, r0
 8087b28:	d1ec      	bne.n	8087b04 <_ZN7FatFile4openEPS_P7fname_th+0x268>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 8087b2a:	3d01      	subs	r5, #1
 8087b2c:	b2ed      	uxtb	r5, r5
 8087b2e:	2d00      	cmp	r5, #0
 8087b30:	d1bc      	bne.n	8087aac <_ZN7FatFile4openEPS_P7fname_th+0x210>
 8087b32:	e00e      	b.n	8087b52 <_ZN7FatFile4openEPS_P7fname_th+0x2b6>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 8087b34:	bf14      	ite	ne
 8087b36:	f04f 31ff 	movne.w	r1, #4294967295
 8087b3a:	2100      	moveq	r1, #0
 8087b3c:	b289      	uxth	r1, r1
 8087b3e:	e7e5      	b.n	8087b0c <_ZN7FatFile4openEPS_P7fname_th+0x270>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 8087b40:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
 8087b44:	bf94      	ite	ls
 8087b46:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
 8087b4a:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
 8087b4e:	8099      	strh	r1, [r3, #4]
 8087b50:	e7e6      	b.n	8087b20 <_ZN7FatFile4openEPS_P7fname_th+0x284>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
 8087b52:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
 8087b54:	4629      	mov	r1, r5
 8087b56:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
 8087b58:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
 8087b5c:	f000 fc98 	bl	8088490 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
 8087b60:	4607      	mov	r7, r0
 8087b62:	2800      	cmp	r0, #0
 8087b64:	f43f aea5 	beq.w	80878b2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
 8087b68:	2220      	movs	r2, #32
 8087b6a:	4629      	mov	r1, r5
 8087b6c:	f006 fdd2 	bl	808e714 <memset>
  memcpy(dir->name, fname->sfn, 11);
 8087b70:	464b      	mov	r3, r9
 8087b72:	f853 2f0d 	ldr.w	r2, [r3, #13]!
 8087b76:	603a      	str	r2, [r7, #0]
 8087b78:	685a      	ldr	r2, [r3, #4]
 8087b7a:	607a      	str	r2, [r7, #4]
 8087b7c:	891a      	ldrh	r2, [r3, #8]
 8087b7e:	813a      	strh	r2, [r7, #8]
 8087b80:	7a9b      	ldrb	r3, [r3, #10]
 8087b82:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
 8087b84:	f899 3000 	ldrb.w	r3, [r9]
 8087b88:	f003 0318 	and.w	r3, r3, #24
 8087b8c:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
 8087b8e:	4b18      	ldr	r3, [pc, #96]	; (8087bf0 <_ZN7FatFile4openEPS_P7fname_th+0x354>)
 8087b90:	681b      	ldr	r3, [r3, #0]
 8087b92:	b12b      	cbz	r3, 8087ba0 <_ZN7FatFile4openEPS_P7fname_th+0x304>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
 8087b94:	f107 010e 	add.w	r1, r7, #14
 8087b98:	f107 0010 	add.w	r0, r7, #16
 8087b9c:	4798      	blx	r3
 8087b9e:	e006      	b.n	8087bae <_ZN7FatFile4openEPS_P7fname_th+0x312>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
 8087ba0:	2321      	movs	r3, #33	; 0x21
 8087ba2:	743b      	strb	r3, [r7, #16]
 8087ba4:	2328      	movs	r3, #40	; 0x28
 8087ba6:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
 8087ba8:	2308      	movs	r3, #8
 8087baa:	73bd      	strb	r5, [r7, #14]
 8087bac:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
 8087bae:	8a3b      	ldrh	r3, [r7, #16]
 8087bb0:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
 8087bb2:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
 8087bb4:	89fb      	ldrh	r3, [r7, #14]
 8087bb6:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
 8087bb8:	68b2      	ldr	r2, [r6, #8]
 8087bba:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8087bbe:	f043 0301 	orr.w	r3, r3, #1
 8087bc2:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
 8087bc6:	9400      	str	r4, [sp, #0]
 8087bc8:	9b03      	ldr	r3, [sp, #12]
 8087bca:	4652      	mov	r2, sl
 8087bcc:	4631      	mov	r1, r6
 8087bce:	9805      	ldr	r0, [sp, #20]
 8087bd0:	f000 fcc4 	bl	808855c <_ZN7FatFile15openCachedEntryEPS_thh>
 8087bd4:	e009      	b.n	8087bea <_ZN7FatFile4openEPS_P7fname_th+0x34e>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 8087bd6:	2701      	movs	r7, #1
 8087bd8:	e67e      	b.n	80878d8 <_ZN7FatFile4openEPS_P7fname_th+0x3c>
 8087bda:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
 8087bde:	f1be 0f0d 	cmp.w	lr, #13
 8087be2:	f43f ae89 	beq.w	80878f8 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8087be6:	46d4      	mov	ip, sl
 8087be8:	e6c9      	b.n	808797e <_ZN7FatFile4openEPS_P7fname_th+0xe2>
  }
  return true;

fail:
  return false;
}
 8087bea:	b009      	add	sp, #36	; 0x24
 8087bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8087bf0:	20000bd8 	.word	0x20000bd8

08087bf4 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
 8087bf4:	f002 bb54 	b.w	808a2a0 <HAL_Pin_Map>

08087bf8 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
 8087bf8:	f002 bb52 	b.w	808a2a0 <HAL_Pin_Map>

08087bfc <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
 8087bfc:	f002 bb50 	b.w	808a2a0 <HAL_Pin_Map>

08087c00 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
 8087c00:	f002 bb4e 	b.w	808a2a0 <HAL_Pin_Map>

08087c04 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spi->receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spi->send(data);
 8087c04:	6803      	ldr	r3, [r0, #0]
 8087c06:	695b      	ldr	r3, [r3, #20]
 8087c08:	4718      	bx	r3

08087c0a <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>:
  }
  void spiEndTransaction() {
    m_spi->endTransaction();
  }
  uint8_t spiReceive() {
    return m_spi->receive();
 8087c0a:	6803      	ldr	r3, [r0, #0]
 8087c0c:	68db      	ldr	r3, [r3, #12]
 8087c0e:	4718      	bx	r3

08087c10 <_ZN9SdSpiCard14chipSelectHighEv>:
    error(SD_CARD_ERROR_BAD_CSD);
    return 0;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectHigh() {
 8087c10:	b510      	push	{r4, lr}
  if (!m_selected) {
 8087c12:	7903      	ldrb	r3, [r0, #4]
    error(SD_CARD_ERROR_BAD_CSD);
    return 0;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectHigh() {
 8087c14:	4604      	mov	r4, r0
  if (!m_selected) {
 8087c16:	b16b      	cbz	r3, 8087c34 <_ZN9SdSpiCard14chipSelectHighEv+0x24>
    SD_CS_DBG("chipSelectHigh error");
    return;
  }
  digitalWrite(m_chipSelectPin, HIGH);
 8087c18:	2101      	movs	r1, #1
 8087c1a:	7940      	ldrb	r0, [r0, #5]
 8087c1c:	f004 ffcd 	bl	808cbba <digitalWrite>
  // insure MISO goes high impedance
  spiSend(0XFF);
 8087c20:	21ff      	movs	r1, #255	; 0xff
 8087c22:	6820      	ldr	r0, [r4, #0]
 8087c24:	f7ff ffee 	bl	8087c04 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
 8087c28:	6820      	ldr	r0, [r4, #0]
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
  }
  void spiEndTransaction() {
    m_spi->endTransaction();
 8087c2a:	6803      	ldr	r3, [r0, #0]
 8087c2c:	689b      	ldr	r3, [r3, #8]
 8087c2e:	4798      	blx	r3
  spiEndTransaction();
  m_selected = false;
 8087c30:	2300      	movs	r3, #0
 8087c32:	7123      	strb	r3, [r4, #4]
 8087c34:	bd10      	pop	{r4, pc}

08087c36 <_ZN9SdSpiCard13chipSelectLowEv>:
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectLow() {
 8087c36:	b538      	push	{r3, r4, r5, lr}
  if (m_selected) {
 8087c38:	7905      	ldrb	r5, [r0, #4]
  spiSend(0XFF);
  spiEndTransaction();
  m_selected = false;
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectLow() {
 8087c3a:	4604      	mov	r4, r0
  if (m_selected) {
 8087c3c:	b955      	cbnz	r5, 8087c54 <_ZN9SdSpiCard13chipSelectLowEv+0x1e>
 8087c3e:	6800      	ldr	r0, [r0, #0]
  bool writeData(uint8_t token, const uint8_t* src);
  void spiBegin(uint8_t chipSelectPin) {
    m_spi->begin(chipSelectPin);
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
 8087c40:	79e1      	ldrb	r1, [r4, #7]
 8087c42:	6803      	ldr	r3, [r0, #0]
 8087c44:	685b      	ldr	r3, [r3, #4]
 8087c46:	4798      	blx	r3
    SD_CS_DBG("chipSelectLow error");
    return;
  }
  spiBeginTransaction(m_sckDivisor);
  digitalWrite(m_chipSelectPin, LOW);
 8087c48:	4629      	mov	r1, r5
 8087c4a:	7960      	ldrb	r0, [r4, #5]
 8087c4c:	f004 ffb5 	bl	808cbba <digitalWrite>
  m_selected = true;
 8087c50:	2301      	movs	r3, #1
 8087c52:	7123      	strb	r3, [r4, #4]
 8087c54:	bd38      	pop	{r3, r4, r5, pc}

08087c56 <_ZN9SdSpiCard8readDataEPhj>:
    chipSelectHigh();
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
 8087c56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8087c58:	4604      	mov	r4, r0
 8087c5a:	460d      	mov	r5, r1
 8087c5c:	4616      	mov	r6, r2
 8087c5e:	f002 fbbf 	bl	808a3e0 <HAL_Timer_Get_Milli_Seconds>
 8087c62:	4607      	mov	r7, r0
#if USE_SD_CRC
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start block token
  unsigned t0 = millis();
  while ((m_status = spiReceive()) == 0XFF) {
 8087c64:	6820      	ldr	r0, [r4, #0]
 8087c66:	f7ff ffd0 	bl	8087c0a <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8087c6a:	28ff      	cmp	r0, #255	; 0xff
 8087c6c:	7220      	strb	r0, [r4, #8]
 8087c6e:	d107      	bne.n	8087c80 <_ZN9SdSpiCard8readDataEPhj+0x2a>
 8087c70:	f002 fbb6 	bl	808a3e0 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_READ_TIMEOUT) {
 8087c74:	1bc0      	subs	r0, r0, r7
 8087c76:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
 8087c7a:	d9f3      	bls.n	8087c64 <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8087c7c:	2311      	movs	r3, #17
 8087c7e:	e00c      	b.n	8087c9a <_ZN9SdSpiCard8readDataEPhj+0x44>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (m_status != DATA_START_BLOCK) {
 8087c80:	28fe      	cmp	r0, #254	; 0xfe
 8087c82:	d001      	beq.n	8087c88 <_ZN9SdSpiCard8readDataEPhj+0x32>
 8087c84:	230f      	movs	r3, #15
 8087c86:	e008      	b.n	8087c9a <_ZN9SdSpiCard8readDataEPhj+0x44>
 8087c88:	6820      	ldr	r0, [r4, #0]
  }
  uint8_t spiReceive() {
    return m_spi->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spi->receive(buf, n);
 8087c8a:	4632      	mov	r2, r6
 8087c8c:	6803      	ldr	r3, [r0, #0]
 8087c8e:	4629      	mov	r1, r5
 8087c90:	691b      	ldr	r3, [r3, #16]
 8087c92:	4798      	blx	r3
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
 8087c94:	7220      	strb	r0, [r4, #8]
 8087c96:	b130      	cbz	r0, 8087ca6 <_ZN9SdSpiCard8readDataEPhj+0x50>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8087c98:	231c      	movs	r3, #28
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  chipSelectHigh();
 8087c9a:	4620      	mov	r0, r4
 8087c9c:	71a3      	strb	r3, [r4, #6]
 8087c9e:	f7ff ffb7 	bl	8087c10 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8087ca2:	2000      	movs	r0, #0
}
 8087ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    error(SD_CARD_ERROR_READ_CRC);
    goto fail;
  }
#else
  // discard crc
  spiReceive();
 8087ca6:	6820      	ldr	r0, [r4, #0]
 8087ca8:	f7ff ffaf 	bl	8087c0a <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
  spiReceive();
 8087cac:	6820      	ldr	r0, [r4, #0]
 8087cae:	f7ff ffac 	bl	8087c0a <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8087cb2:	2001      	movs	r0, #1
 8087cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08087cb6 <_ZN9SdSpiCard11waitNotBusyEt>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMillis) {
 8087cb6:	b570      	push	{r4, r5, r6, lr}
 8087cb8:	4606      	mov	r6, r0
 8087cba:	460c      	mov	r4, r1
 8087cbc:	f002 fb90 	bl	808a3e0 <HAL_Timer_Get_Milli_Seconds>
 8087cc0:	4605      	mov	r5, r0
  unsigned t0 = millis();
  while (spiReceive() != 0XFF) {
 8087cc2:	6830      	ldr	r0, [r6, #0]
 8087cc4:	f7ff ffa1 	bl	8087c0a <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8087cc8:	28ff      	cmp	r0, #255	; 0xff
 8087cca:	d006      	beq.n	8087cda <_ZN9SdSpiCard11waitNotBusyEt+0x24>
 8087ccc:	f002 fb88 	bl	808a3e0 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) >= timeoutMillis) {
 8087cd0:	1b40      	subs	r0, r0, r5
 8087cd2:	42a0      	cmp	r0, r4
 8087cd4:	d3f5      	bcc.n	8087cc2 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
    }
  }
  return true;

fail:
  return false;
 8087cd6:	2000      	movs	r0, #0
 8087cd8:	bd70      	pop	{r4, r5, r6, pc}
  while (spiReceive() != 0XFF) {
    if (((unsigned)millis() - t0) >= timeoutMillis) {
      goto fail;
    }
  }
  return true;
 8087cda:	2001      	movs	r0, #1

fail:
  return false;
}
 8087cdc:	bd70      	pop	{r4, r5, r6, pc}

08087cde <_ZN9SdSpiCard11cardCommandEhm>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 8087cde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_selected) {
 8087ce0:	7903      	ldrb	r3, [r0, #4]
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 8087ce2:	4604      	mov	r4, r0
 8087ce4:	460d      	mov	r5, r1
 8087ce6:	9201      	str	r2, [sp, #4]
  // select card
  if (!m_selected) {
 8087ce8:	b90b      	cbnz	r3, 8087cee <_ZN9SdSpiCard11cardCommandEhm+0x10>
    chipSelectLow();
 8087cea:	f7ff ffa4 	bl	8087c36 <_ZN9SdSpiCard13chipSelectLowEv>
  }
  // wait if busy
  waitNotBusy(SD_WRITE_TIMEOUT);
 8087cee:	f44f 7116 	mov.w	r1, #600	; 0x258
 8087cf2:	4620      	mov	r0, r4
 8087cf4:	f7ff ffdf 	bl	8087cb6 <_ZN9SdSpiCard11waitNotBusyEt>
  for (uint8_t k = 0; k < 6; k++) {
    spiSend(d[k]);
  }
#else  // USE_SD_CRC
  // send command
  spiSend(cmd | 0x40);
 8087cf8:	f045 0140 	orr.w	r1, r5, #64	; 0x40
 8087cfc:	6820      	ldr	r0, [r4, #0]
 8087cfe:	f7ff ff81 	bl	8087c04 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
 8087d02:	f10d 0607 	add.w	r6, sp, #7
 8087d06:	f10d 0703 	add.w	r7, sp, #3

  // send argument
  for (int8_t i = 3; i >= 0; i--) {
    spiSend(pa[i]);
 8087d0a:	f816 1901 	ldrb.w	r1, [r6], #-1
 8087d0e:	6820      	ldr	r0, [r4, #0]
 8087d10:	f7ff ff78 	bl	8087c04 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
#else  // USE_SD_CRC
  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t i = 3; i >= 0; i--) {
 8087d14:	42be      	cmp	r6, r7
 8087d16:	d1f8      	bne.n	8087d0a <_ZN9SdSpiCard11cardCommandEhm+0x2c>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 8087d18:	2d00      	cmp	r5, #0
 8087d1a:	bf0c      	ite	eq
 8087d1c:	2195      	moveq	r1, #149	; 0x95
 8087d1e:	2187      	movne	r1, #135	; 0x87
 8087d20:	6820      	ldr	r0, [r4, #0]
 8087d22:	f7ff ff6f 	bl	8087c04 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
#endif  // USE_SD_CRC

  // skip stuff byte for stop read
  if (cmd == CMD12) {
 8087d26:	2d0c      	cmp	r5, #12
 8087d28:	d102      	bne.n	8087d30 <_ZN9SdSpiCard11cardCommandEhm+0x52>
    spiReceive();
 8087d2a:	6820      	ldr	r0, [r4, #0]
 8087d2c:	f7ff ff6d 	bl	8087c0a <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
  for (int8_t i = 3; i >= 0; i--) {
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 8087d30:	2500      	movs	r5, #0
  if (cmd == CMD12) {
    spiReceive();
  }

  // wait for response
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i != 0XFF; i++) {
 8087d32:	6820      	ldr	r0, [r4, #0]
 8087d34:	f7ff ff69 	bl	8087c0a <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8087d38:	0603      	lsls	r3, r0, #24
 8087d3a:	7220      	strb	r0, [r4, #8]
 8087d3c:	d503      	bpl.n	8087d46 <_ZN9SdSpiCard11cardCommandEhm+0x68>
 8087d3e:	3501      	adds	r5, #1
 8087d40:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8087d44:	d1f5      	bne.n	8087d32 <_ZN9SdSpiCard11cardCommandEhm+0x54>
  }
  return m_status;
}
 8087d46:	b003      	add	sp, #12
 8087d48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08087d4a <_ZN9SdSpiCard5beginEP9SdSpiBasehh>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
 8087d4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8087d4c:	461f      	mov	r7, r3
  m_errorCode = m_type = 0;
 8087d4e:	2300      	movs	r3, #0
  m_spi = spi;
  m_chipSelectPin = chipSelectPin;
 8087d50:	7142      	strb	r2, [r0, #5]
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
  m_errorCode = m_type = 0;
 8087d52:	7243      	strb	r3, [r0, #9]
 8087d54:	7183      	strb	r3, [r0, #6]
  m_spi = spi;
 8087d56:	6001      	str	r1, [r0, #0]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
 8087d58:	4604      	mov	r4, r0
 8087d5a:	f002 fb41 	bl	808a3e0 <HAL_Timer_Get_Milli_Seconds>
 8087d5e:	4606      	mov	r6, r0
 8087d60:	6820      	ldr	r0, [r4, #0]
    m_type = value;
  }
  bool waitNotBusy(uint16_t timeoutMillis);
  bool writeData(uint8_t token, const uint8_t* src);
  void spiBegin(uint8_t chipSelectPin) {
    m_spi->begin(chipSelectPin);
 8087d62:	7961      	ldrb	r1, [r4, #5]
 8087d64:	6803      	ldr	r3, [r0, #0]
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
 8087d66:	250a      	movs	r5, #10
    m_type = value;
  }
  bool waitNotBusy(uint16_t timeoutMillis);
  bool writeData(uint8_t token, const uint8_t* src);
  void spiBegin(uint8_t chipSelectPin) {
    m_spi->begin(chipSelectPin);
 8087d68:	681b      	ldr	r3, [r3, #0]
 8087d6a:	4798      	blx	r3

  // initialize SPI bus and chip select pin.
  spiBegin(m_chipSelectPin);

  // set SCK rate for initialization commands.
  m_sckDivisor = SPI_SCK_INIT_DIVISOR;
 8087d6c:	2180      	movs	r1, #128	; 0x80
 8087d6e:	6820      	ldr	r0, [r4, #0]
 8087d70:	71e1      	strb	r1, [r4, #7]
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
 8087d72:	6803      	ldr	r3, [r0, #0]
 8087d74:	685b      	ldr	r3, [r3, #4]
 8087d76:	4798      	blx	r3
  spiBeginTransaction(m_sckDivisor);

  // must supply min of 74 clock cycles with CS high.
  for (uint8_t i = 0; i < 10; i++) {
    spiSend(0XFF);
 8087d78:	21ff      	movs	r1, #255	; 0xff
 8087d7a:	6820      	ldr	r0, [r4, #0]
 8087d7c:	3d01      	subs	r5, #1
 8087d7e:	f7ff ff41 	bl	8087c04 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
  // set SCK rate for initialization commands.
  m_sckDivisor = SPI_SCK_INIT_DIVISOR;
  spiBeginTransaction(m_sckDivisor);

  // must supply min of 74 clock cycles with CS high.
  for (uint8_t i = 0; i < 10; i++) {
 8087d82:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8087d86:	d1f7      	bne.n	8087d78 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x2e>
 8087d88:	6820      	ldr	r0, [r4, #0]
  }
  void spiEndTransaction() {
    m_spi->endTransaction();
 8087d8a:	6803      	ldr	r3, [r0, #0]
 8087d8c:	689b      	ldr	r3, [r3, #8]
 8087d8e:	4798      	blx	r3
    spiSend(0XFF);
  }
  spiEndTransaction();
  // command to go idle in SPI mode
  while (cardCommand(CMD0, 0) != R1_IDLE_STATE) {
 8087d90:	2200      	movs	r2, #0
 8087d92:	4611      	mov	r1, r2
 8087d94:	4620      	mov	r0, r4
 8087d96:	f7ff ffa2 	bl	8087cde <_ZN9SdSpiCard11cardCommandEhm>
 8087d9a:	2801      	cmp	r0, #1
 8087d9c:	d007      	beq.n	8087dae <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x64>
 8087d9e:	f002 fb1f 	bl	808a3e0 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 8087da2:	1b80      	subs	r0, r0, r6
 8087da4:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8087da8:	d9f2      	bls.n	8087d90 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8087daa:	2301      	movs	r3, #1
 8087dac:	e048      	b.n	8087e40 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xf6>
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  while (1) {
    if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
 8087dae:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8087db2:	2108      	movs	r1, #8
 8087db4:	4620      	mov	r0, r4
 8087db6:	f7ff ff92 	bl	8087cde <_ZN9SdSpiCard11cardCommandEhm>
 8087dba:	2805      	cmp	r0, #5
 8087dbc:	d101      	bne.n	8087dc2 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x78>
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void type(uint8_t value) {
    m_type = value;
 8087dbe:	2301      	movs	r3, #1
 8087dc0:	e00b      	b.n	8087dda <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x90>
 8087dc2:	2504      	movs	r5, #4
      type(SD_CARD_TYPE_SD1);
      break;
    }
    for (uint8_t i = 0; i < 4; i++) {
      m_status = spiReceive();
 8087dc4:	6820      	ldr	r0, [r4, #0]
 8087dc6:	f7ff ff20 	bl	8087c0a <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8087dca:	3d01      	subs	r5, #1
  while (1) {
    if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
      type(SD_CARD_TYPE_SD1);
      break;
    }
    for (uint8_t i = 0; i < 4; i++) {
 8087dcc:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
 8087dd0:	7220      	strb	r0, [r4, #8]
  while (1) {
    if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
      type(SD_CARD_TYPE_SD1);
      break;
    }
    for (uint8_t i = 0; i < 4; i++) {
 8087dd2:	d1f7      	bne.n	8087dc4 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x7a>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
 8087dd4:	28aa      	cmp	r0, #170	; 0xaa
 8087dd6:	d108      	bne.n	8087dea <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xa0>
 8087dd8:	2302      	movs	r3, #2
 8087dda:	7263      	strb	r3, [r4, #9]
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 8087ddc:	7a63      	ldrb	r3, [r4, #9]
 8087dde:	2b02      	cmp	r3, #2
 8087de0:	bf0c      	ite	eq
 8087de2:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
 8087de6:	2500      	movne	r5, #0
 8087de8:	e007      	b.n	8087dfa <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xb0>
 8087dea:	f002 faf9 	bl	808a3e0 <HAL_Timer_Get_Milli_Seconds>
    }
    if (m_status == 0XAA) {
      type(SD_CARD_TYPE_SD2);
      break;
    }
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 8087dee:	1b80      	subs	r0, r0, r6
 8087df0:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8087df4:	d9db      	bls.n	8087dae <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8087df6:	2302      	movs	r3, #2
 8087df8:	e022      	b.n	8087e40 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xf6>
  bool writeStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
 8087dfa:	2200      	movs	r2, #0
 8087dfc:	2137      	movs	r1, #55	; 0x37
 8087dfe:	4620      	mov	r0, r4
 8087e00:	f7ff ff6d 	bl	8087cde <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 8087e04:	462a      	mov	r2, r5
 8087e06:	2129      	movs	r1, #41	; 0x29
 8087e08:	4620      	mov	r0, r4
 8087e0a:	f7ff ff68 	bl	8087cde <_ZN9SdSpiCard11cardCommandEhm>
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;

  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
 8087e0e:	4602      	mov	r2, r0
 8087e10:	b138      	cbz	r0, 8087e22 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xd8>
 8087e12:	f002 fae5 	bl	808a3e0 <HAL_Timer_Get_Milli_Seconds>
    // check for timeout
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 8087e16:	1b80      	subs	r0, r0, r6
 8087e18:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8087e1c:	d9ed      	bls.n	8087dfa <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xb0>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8087e1e:	230a      	movs	r3, #10
 8087e20:	e00e      	b.n	8087e40 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xf6>
      error(SD_CARD_ERROR_ACMD41);
      goto fail;
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
 8087e22:	7a63      	ldrb	r3, [r4, #9]
 8087e24:	2b02      	cmp	r3, #2
 8087e26:	d005      	beq.n	8087e34 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xea>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  chipSelectHigh();
 8087e28:	4620      	mov	r0, r4
 8087e2a:	f7ff fef1 	bl	8087c10 <_ZN9SdSpiCard14chipSelectHighEv>
  m_sckDivisor = sckDivisor;
 8087e2e:	71e7      	strb	r7, [r4, #7]
  return true;
 8087e30:	2001      	movs	r0, #1
 8087e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      goto fail;
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
 8087e34:	213a      	movs	r1, #58	; 0x3a
 8087e36:	4620      	mov	r0, r4
 8087e38:	f7ff ff51 	bl	8087cde <_ZN9SdSpiCard11cardCommandEhm>
 8087e3c:	b130      	cbz	r0, 8087e4c <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x102>
 8087e3e:	2308      	movs	r3, #8
  chipSelectHigh();
  m_sckDivisor = sckDivisor;
  return true;

fail:
  chipSelectHigh();
 8087e40:	4620      	mov	r0, r4
 8087e42:	71a3      	strb	r3, [r4, #6]
 8087e44:	f7ff fee4 	bl	8087c10 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8087e48:	2000      	movs	r0, #0
}
 8087e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
 8087e4c:	6820      	ldr	r0, [r4, #0]
 8087e4e:	f7ff fedc 	bl	8087c0a <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8087e52:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8087e56:	28c0      	cmp	r0, #192	; 0xc0
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void type(uint8_t value) {
    m_type = value;
 8087e58:	bf04      	itt	eq
 8087e5a:	2303      	moveq	r3, #3
 8087e5c:	7263      	strbeq	r3, [r4, #9]
      type(SD_CARD_TYPE_SDHC);
    }
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
 8087e5e:	6820      	ldr	r0, [r4, #0]
 8087e60:	f7ff fed3 	bl	8087c0a <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8087e64:	6820      	ldr	r0, [r4, #0]
 8087e66:	f7ff fed0 	bl	8087c0a <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8087e6a:	6820      	ldr	r0, [r4, #0]
 8087e6c:	f7ff fecd 	bl	8087c0a <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8087e70:	e7da      	b.n	8087e28 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xde>

08087e72 <_ZN9SdSpiCard9readBlockEmPh>:
    chipSelectHigh();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8087e72:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8087e74:	7a43      	ldrb	r3, [r0, #9]
    chipSelectHigh();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8087e76:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8087e78:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8087e7a:	bf18      	it	ne
 8087e7c:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD17, blockNumber)) {
 8087e7e:	460a      	mov	r2, r1
 8087e80:	2111      	movs	r1, #17
    chipSelectHigh();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8087e82:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
 8087e84:	f7ff ff2b 	bl	8087cde <_ZN9SdSpiCard11cardCommandEhm>
 8087e88:	b110      	cbz	r0, 8087e90 <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8087e8a:	2304      	movs	r3, #4
 8087e8c:	71a3      	strb	r3, [r4, #6]
 8087e8e:	e00b      	b.n	8087ea8 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
 8087e90:	4629      	mov	r1, r5
 8087e92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8087e96:	4620      	mov	r0, r4
 8087e98:	f7ff fedd 	bl	8087c56 <_ZN9SdSpiCard8readDataEPhj>
 8087e9c:	4605      	mov	r5, r0
 8087e9e:	b118      	cbz	r0, 8087ea8 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  chipSelectHigh();
 8087ea0:	4620      	mov	r0, r4
 8087ea2:	f7ff feb5 	bl	8087c10 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8087ea6:	e003      	b.n	8087eb0 <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  chipSelectHigh();
 8087ea8:	4620      	mov	r0, r4
 8087eaa:	f7ff feb1 	bl	8087c10 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8087eae:	2500      	movs	r5, #0
}
 8087eb0:	4628      	mov	r0, r5
 8087eb2:	bd38      	pop	{r3, r4, r5, pc}

08087eb4 <_ZN9SdSpiCard9readStartEm>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8087eb4:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 8087eb6:	7a43      	ldrb	r3, [r0, #9]
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8087eb8:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 8087eba:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8087ebc:	bf18      	it	ne
 8087ebe:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
 8087ec0:	2112      	movs	r1, #18
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8087ec2:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
 8087ec4:	f7ff ff0b 	bl	8087cde <_ZN9SdSpiCard11cardCommandEhm>
 8087ec8:	b130      	cbz	r0, 8087ed8 <_ZN9SdSpiCard9readStartEm+0x24>
 8087eca:	2305      	movs	r3, #5
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 8087ecc:	4620      	mov	r0, r4
 8087ece:	71a3      	strb	r3, [r4, #6]
 8087ed0:	f7ff fe9e 	bl	8087c10 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8087ed4:	2000      	movs	r0, #0
 8087ed6:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
  return true;
 8087ed8:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 8087eda:	bd10      	pop	{r4, pc}

08087edc <_ZN9SdSpiCard8readStopEv>:
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 8087edc:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
 8087ede:	2200      	movs	r2, #0
 8087ee0:	210c      	movs	r1, #12
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 8087ee2:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
 8087ee4:	f7ff fefb 	bl	8087cde <_ZN9SdSpiCard11cardCommandEhm>
 8087ee8:	b130      	cbz	r0, 8087ef8 <_ZN9SdSpiCard8readStopEv+0x1c>
 8087eea:	2303      	movs	r3, #3
  }
  chipSelectHigh();
  return true;

fail:
  chipSelectHigh();
 8087eec:	4620      	mov	r0, r4
 8087eee:	71a3      	strb	r3, [r4, #6]
 8087ef0:	f7ff fe8e 	bl	8087c10 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8087ef4:	2000      	movs	r0, #0
 8087ef6:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  chipSelectHigh();
 8087ef8:	4620      	mov	r0, r4
 8087efa:	f7ff fe89 	bl	8087c10 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8087efe:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 8087f00:	bd10      	pop	{r4, pc}

08087f02 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
 8087f02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8087f04:	4605      	mov	r5, r0
 8087f06:	4616      	mov	r6, r2
 8087f08:	461f      	mov	r7, r3
  if (!readStart(block)) {
 8087f0a:	f7ff ffd3 	bl	8087eb4 <_ZN9SdSpiCard9readStartEm>
 8087f0e:	b198      	cbz	r0, 8087f38 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
 8087f10:	2400      	movs	r4, #0
 8087f12:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
 8087f14:	429f      	cmp	r7, r3
 8087f16:	eb06 2144 	add.w	r1, r6, r4, lsl #9
 8087f1a:	d908      	bls.n	8087f2e <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
 8087f1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8087f20:	4628      	mov	r0, r5
 8087f22:	f7ff fe98 	bl	8087c56 <_ZN9SdSpiCard8readDataEPhj>
 8087f26:	3401      	adds	r4, #1
 8087f28:	2800      	cmp	r0, #0
 8087f2a:	d1f2      	bne.n	8087f12 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
 8087f2c:	e004      	b.n	8087f38 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
 8087f2e:	4628      	mov	r0, r5
}
 8087f30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
 8087f34:	f7ff bfd2 	b.w	8087edc <_ZN9SdSpiCard8readStopEv>
}
 8087f38:	2000      	movs	r0, #0
 8087f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08087f3c <_ZN9SdSpiCard9writeDataEhPKh>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
 8087f3c:	b538      	push	{r3, r4, r5, lr}
 8087f3e:	4604      	mov	r4, r0
 8087f40:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
 8087f42:	6800      	ldr	r0, [r0, #0]
 8087f44:	f7ff fe5e 	bl	8087c04 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
 8087f48:	6820      	ldr	r0, [r4, #0]
  }
  void spiSend(uint8_t data) {
    m_spi->send(data);
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spi->send(buf, n);
 8087f4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8087f4e:	6803      	ldr	r3, [r0, #0]
 8087f50:	4629      	mov	r1, r5
 8087f52:	699b      	ldr	r3, [r3, #24]
 8087f54:	4798      	blx	r3
  spiSend(src, 512);
  spiSend(crc >> 8);
 8087f56:	21ff      	movs	r1, #255	; 0xff
 8087f58:	6820      	ldr	r0, [r4, #0]
 8087f5a:	f7ff fe53 	bl	8087c04 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
  spiSend(crc & 0XFF);
 8087f5e:	21ff      	movs	r1, #255	; 0xff
 8087f60:	6820      	ldr	r0, [r4, #0]
 8087f62:	f7ff fe4f 	bl	8087c04 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>

  m_status = spiReceive();
 8087f66:	6820      	ldr	r0, [r4, #0]
 8087f68:	f7ff fe4f 	bl	8087c0a <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8087f6c:	7220      	strb	r0, [r4, #8]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
 8087f6e:	f000 001f 	and.w	r0, r0, #31
 8087f72:	2805      	cmp	r0, #5
 8087f74:	d006      	beq.n	8087f84 <_ZN9SdSpiCard9writeDataEhPKh+0x48>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8087f76:	2313      	movs	r3, #19
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 8087f78:	4620      	mov	r0, r4
 8087f7a:	71a3      	strb	r3, [r4, #6]
 8087f7c:	f7ff fe48 	bl	8087c10 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8087f80:	2000      	movs	r0, #0
 8087f82:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
 8087f84:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 8087f86:	bd38      	pop	{r3, r4, r5, pc}

08087f88 <_ZN9SdSpiCard10writeBlockEmPKh>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8087f88:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8087f8a:	7a43      	ldrb	r3, [r0, #9]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8087f8c:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8087f8e:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8087f90:	bf18      	it	ne
 8087f92:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD24, blockNumber)) {
 8087f94:	460a      	mov	r2, r1
 8087f96:	2118      	movs	r1, #24

fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8087f98:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
 8087f9a:	f7ff fea0 	bl	8087cde <_ZN9SdSpiCard11cardCommandEhm>
 8087f9e:	b110      	cbz	r0, 8087fa6 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
 8087fa0:	2306      	movs	r3, #6
 8087fa2:	71a3      	strb	r3, [r4, #6]
 8087fa4:	e00a      	b.n	8087fbc <_ZN9SdSpiCard10writeBlockEmPKh+0x34>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
 8087fa6:	462a      	mov	r2, r5
 8087fa8:	21fe      	movs	r1, #254	; 0xfe
 8087faa:	4620      	mov	r0, r4
 8087fac:	f7ff ffc6 	bl	8087f3c <_ZN9SdSpiCard9writeDataEhPKh>
 8087fb0:	4605      	mov	r5, r0
 8087fb2:	b118      	cbz	r0, 8087fbc <_ZN9SdSpiCard10writeBlockEmPKh+0x34>
    error(SD_CARD_ERROR_WRITE_PROGRAMMING);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  chipSelectHigh();
 8087fb4:	4620      	mov	r0, r4
 8087fb6:	f7ff fe2b 	bl	8087c10 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8087fba:	e003      	b.n	8087fc4 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>

fail:
  chipSelectHigh();
 8087fbc:	4620      	mov	r0, r4
 8087fbe:	f7ff fe27 	bl	8087c10 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8087fc2:	2500      	movs	r5, #0
}
 8087fc4:	4628      	mov	r0, r5
 8087fc6:	bd38      	pop	{r3, r4, r5, pc}

08087fc8 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
 8087fc8:	b570      	push	{r4, r5, r6, lr}
 8087fca:	4604      	mov	r4, r0
 8087fcc:	460d      	mov	r5, r1
  bool selected = m_selected;
 8087fce:	7906      	ldrb	r6, [r0, #4]
  chipSelectLow();
 8087fd0:	f7ff fe31 	bl	8087c36 <_ZN9SdSpiCard13chipSelectLowEv>
  // wait for previous write to finish
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8087fd4:	f44f 7116 	mov.w	r1, #600	; 0x258
 8087fd8:	4620      	mov	r0, r4
 8087fda:	f7ff fe6c 	bl	8087cb6 <_ZN9SdSpiCard11waitNotBusyEt>
 8087fde:	b910      	cbnz	r0, 8087fe6 <_ZN9SdSpiCard9writeDataEPKh+0x1e>
 8087fe0:	2317      	movs	r3, #23
 8087fe2:	71a3      	strb	r3, [r4, #6]
 8087fe4:	e00b      	b.n	8087ffe <_ZN9SdSpiCard9writeDataEPKh+0x36>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
 8087fe6:	462a      	mov	r2, r5
 8087fe8:	21fc      	movs	r1, #252	; 0xfc
 8087fea:	4620      	mov	r0, r4
 8087fec:	f7ff ffa6 	bl	8087f3c <_ZN9SdSpiCard9writeDataEhPKh>
 8087ff0:	4605      	mov	r5, r0
 8087ff2:	b120      	cbz	r0, 8087ffe <_ZN9SdSpiCard9writeDataEPKh+0x36>
    goto fail;
  }
  if (!selected) {
 8087ff4:	b93e      	cbnz	r6, 8088006 <_ZN9SdSpiCard9writeDataEPKh+0x3e>
    chipSelectHigh();
 8087ff6:	4620      	mov	r0, r4
 8087ff8:	f7ff fe0a 	bl	8087c10 <_ZN9SdSpiCard14chipSelectHighEv>
 8087ffc:	e003      	b.n	8088006 <_ZN9SdSpiCard9writeDataEPKh+0x3e>
  }
  return true;

fail:
  chipSelectHigh();
 8087ffe:	4620      	mov	r0, r4
 8088000:	f7ff fe06 	bl	8087c10 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8088004:	2500      	movs	r5, #0
}
 8088006:	4628      	mov	r0, r5
 8088008:	bd70      	pop	{r4, r5, r6, pc}

0808800a <_ZN9SdSpiCard10writeStartEmm>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber, uint32_t eraseCount) {
 808800a:	b570      	push	{r4, r5, r6, lr}
 808800c:	4604      	mov	r4, r0
 808800e:	4616      	mov	r6, r2
 8088010:	460d      	mov	r5, r1
  bool writeStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
 8088012:	2200      	movs	r2, #0
 8088014:	2137      	movs	r1, #55	; 0x37
 8088016:	f7ff fe62 	bl	8087cde <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 808801a:	4632      	mov	r2, r6
 808801c:	2117      	movs	r1, #23
 808801e:	4620      	mov	r0, r4
 8088020:	f7ff fe5d 	bl	8087cde <_ZN9SdSpiCard11cardCommandEhm>
  SD_TRACE("WS", blockNumber);
  // send pre-erase count
  if (cardAcmd(ACMD23, eraseCount)) {
 8088024:	b108      	cbz	r0, 808802a <_ZN9SdSpiCard10writeStartEmm+0x20>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8088026:	2309      	movs	r3, #9
 8088028:	e00a      	b.n	8088040 <_ZN9SdSpiCard10writeStartEmm+0x36>
    error(SD_CARD_ERROR_ACMD23);
    goto fail;
  }
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 808802a:	7a63      	ldrb	r3, [r4, #9]
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
 808802c:	2119      	movs	r1, #25
  if (cardAcmd(ACMD23, eraseCount)) {
    error(SD_CARD_ERROR_ACMD23);
    goto fail;
  }
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 808802e:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8088030:	bf18      	it	ne
 8088032:	026d      	lslne	r5, r5, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
 8088034:	462a      	mov	r2, r5
 8088036:	4620      	mov	r0, r4
 8088038:	f7ff fe51 	bl	8087cde <_ZN9SdSpiCard11cardCommandEhm>
 808803c:	b130      	cbz	r0, 808804c <_ZN9SdSpiCard10writeStartEmm+0x42>
 808803e:	2307      	movs	r3, #7
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 8088040:	4620      	mov	r0, r4
 8088042:	71a3      	strb	r3, [r4, #6]
 8088044:	f7ff fde4 	bl	8087c10 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8088048:	2000      	movs	r0, #0
 808804a:	bd70      	pop	{r4, r5, r6, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
 808804c:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 808804e:	bd70      	pop	{r4, r5, r6, pc}

08088050 <_ZN9SdSpiCard9writeStopEv>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 8088050:	b538      	push	{r3, r4, r5, lr}
 8088052:	4604      	mov	r4, r0
  chipSelectLow();
 8088054:	f7ff fdef 	bl	8087c36 <_ZN9SdSpiCard13chipSelectLowEv>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8088058:	f44f 7116 	mov.w	r1, #600	; 0x258
 808805c:	4620      	mov	r0, r4
 808805e:	f7ff fe2a 	bl	8087cb6 <_ZN9SdSpiCard11waitNotBusyEt>
 8088062:	b170      	cbz	r0, 8088082 <_ZN9SdSpiCard9writeStopEv+0x32>
    goto fail;
  }
  spiSend(STOP_TRAN_TOKEN);
 8088064:	21fd      	movs	r1, #253	; 0xfd
 8088066:	6820      	ldr	r0, [r4, #0]
 8088068:	f7ff fdcc 	bl	8087c04 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 808806c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8088070:	4620      	mov	r0, r4
 8088072:	f7ff fe20 	bl	8087cb6 <_ZN9SdSpiCard11waitNotBusyEt>
 8088076:	4605      	mov	r5, r0
 8088078:	b118      	cbz	r0, 8088082 <_ZN9SdSpiCard9writeStopEv+0x32>
    goto fail;
  }
  chipSelectHigh();
 808807a:	4620      	mov	r0, r4
 808807c:	f7ff fdc8 	bl	8087c10 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8088080:	e005      	b.n	808808e <_ZN9SdSpiCard9writeStopEv+0x3e>
 8088082:	2312      	movs	r3, #18
 8088084:	71a3      	strb	r3, [r4, #6]

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
 8088086:	4620      	mov	r0, r4
 8088088:	f7ff fdc2 	bl	8087c10 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 808808c:	2500      	movs	r5, #0
}
 808808e:	4628      	mov	r0, r5
 8088090:	bd38      	pop	{r3, r4, r5, pc}

08088092 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 8088092:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8088094:	4617      	mov	r7, r2
  if (!writeStart(block, count)) {
 8088096:	461a      	mov	r2, r3
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 8088098:	4605      	mov	r5, r0
 808809a:	461e      	mov	r6, r3
  if (!writeStart(block, count)) {
 808809c:	f7ff ffb5 	bl	808800a <_ZN9SdSpiCard10writeStartEmm>
 80880a0:	b170      	cbz	r0, 80880c0 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2e>
 80880a2:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 80880a4:	42b4      	cmp	r4, r6
 80880a6:	eb07 2144 	add.w	r1, r7, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 80880aa:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block, count)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 80880ac:	d004      	beq.n	80880b8 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x26>
    if (!writeData(src)) {
 80880ae:	f7ff ff8b 	bl	8087fc8 <_ZN9SdSpiCard9writeDataEPKh>
 80880b2:	b128      	cbz	r0, 80880c0 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2e>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block, count)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 80880b4:	3401      	adds	r4, #1
 80880b6:	e7f5      	b.n	80880a4 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x12>
  return writeStop();

 fail:
  chipSelectHigh();
  return false;
}
 80880b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 80880bc:	f7ff bfc8 	b.w	8088050 <_ZN9SdSpiCard9writeStopEv>

 fail:
  chipSelectHigh();
 80880c0:	4628      	mov	r0, r5
 80880c2:	f7ff fda5 	bl	8087c10 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
}
 80880c6:	2000      	movs	r0, #0
 80880c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080880ca <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP9SdSpiBasehh>:
 80880ca:	f002 b8e9 	b.w	808a2a0 <HAL_Pin_Map>
	...

080880d0 <_Z36SD_SPI_DMA_TransferComplete_Callbackv>:
#if SPI_INTERFACE_COUNT == 1
const uint8_t m_spiIf = 0;
#endif
//-----------------------------------------------------------------------------
void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
 80880d0:	4b01      	ldr	r3, [pc, #4]	; (80880d8 <_Z36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
 80880d2:	2201      	movs	r2, #1
 80880d4:	701a      	strb	r2, [r3, #0]
 80880d6:	4770      	bx	lr
 80880d8:	20000bd0 	.word	0x20000bd0

080880dc <_ZN5SdSpi14endTransactionEv>:
#endif  // SPI_CLOCK_DIV128
  // delay for SPI transfer done callback too soon bug.
  bugDelay = 24*divisor*(1 + m_spiIf)/60;
}
//-----------------------------------------------------------------------------
void SdSpi::endTransaction() {
 80880dc:	4770      	bx	lr
	...

080880e0 <_ZN5SdSpi5beginEh>:
void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
}
//------------------------------------------------------------------------------
void SdSpi::begin(uint8_t chipSelectPin) {
  spiPtr[m_spiIf]->begin(chipSelectPin);
 80880e0:	7902      	ldrb	r2, [r0, #4]
 80880e2:	4b02      	ldr	r3, [pc, #8]	; (80880ec <_ZN5SdSpi5beginEh+0xc>)
 80880e4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80880e8:	f002 bd85 	b.w	808abf6 <_ZN8SPIClass5beginEt>
 80880ec:	08093c38 	.word	0x08093c38

080880f0 <_ZN5SdSpi16beginTransactionEh>:
}
//------------------------------------------------------------------------------
void SdSpi::beginTransaction(uint8_t divisor) {
 80880f0:	b570      	push	{r4, r5, r6, lr}
 80880f2:	4606      	mov	r6, r0
 80880f4:	460c      	mov	r4, r1
  spiPtr[m_spiIf]->setBitOrder(MSBFIRST);
 80880f6:	7903      	ldrb	r3, [r0, #4]
 80880f8:	4d1a      	ldr	r5, [pc, #104]	; (8088164 <_ZN5SdSpi16beginTransactionEh+0x74>)
 80880fa:	2101      	movs	r1, #1
 80880fc:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8088100:	f002 fd7f 	bl	808ac02 <_ZN8SPIClass11setBitOrderEh>
  spiPtr[m_spiIf]->setDataMode(SPI_MODE0);
 8088104:	7933      	ldrb	r3, [r6, #4]
 8088106:	2100      	movs	r1, #0
 8088108:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 808810c:	f002 fd7c 	bl	808ac08 <_ZN8SPIClass11setDataModeEh>
#ifndef SPI_CLOCK_DIV128
  spiPtr[m_spiIf]->setClockDivider(divisor);
#else  // SPI_CLOCK_DIV128
  int v;
  if (divisor <= 2) {
 8088110:	2c02      	cmp	r4, #2
 8088112:	d90c      	bls.n	808812e <_ZN5SdSpi16beginTransactionEh+0x3e>
    v = SPI_CLOCK_DIV2;
  } else  if (divisor <= 4) {
 8088114:	2c04      	cmp	r4, #4
 8088116:	d90c      	bls.n	8088132 <_ZN5SdSpi16beginTransactionEh+0x42>
    v = SPI_CLOCK_DIV4;
  } else  if (divisor <= 8) {
 8088118:	2c08      	cmp	r4, #8
 808811a:	d90c      	bls.n	8088136 <_ZN5SdSpi16beginTransactionEh+0x46>
    v = SPI_CLOCK_DIV8;
  } else  if (divisor <= 16) {
 808811c:	2c10      	cmp	r4, #16
 808811e:	d90c      	bls.n	808813a <_ZN5SdSpi16beginTransactionEh+0x4a>
    v = SPI_CLOCK_DIV16;
  } else  if (divisor <= 32) {
 8088120:	2c20      	cmp	r4, #32
 8088122:	d90c      	bls.n	808813e <_ZN5SdSpi16beginTransactionEh+0x4e>
    v = SPI_CLOCK_DIV32;
  } else  if (divisor <= 64) {
    v = SPI_CLOCK_DIV64;
  } else {
    v = SPI_CLOCK_DIV128;
 8088124:	2c41      	cmp	r4, #65	; 0x41
 8088126:	bf34      	ite	cc
 8088128:	2128      	movcc	r1, #40	; 0x28
 808812a:	2130      	movcs	r1, #48	; 0x30
 808812c:	e008      	b.n	8088140 <_ZN5SdSpi16beginTransactionEh+0x50>
#ifndef SPI_CLOCK_DIV128
  spiPtr[m_spiIf]->setClockDivider(divisor);
#else  // SPI_CLOCK_DIV128
  int v;
  if (divisor <= 2) {
    v = SPI_CLOCK_DIV2;
 808812e:	2100      	movs	r1, #0
 8088130:	e006      	b.n	8088140 <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 4) {
    v = SPI_CLOCK_DIV4;
 8088132:	2108      	movs	r1, #8
 8088134:	e004      	b.n	8088140 <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 8) {
    v = SPI_CLOCK_DIV8;
 8088136:	2110      	movs	r1, #16
 8088138:	e002      	b.n	8088140 <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 16) {
    v = SPI_CLOCK_DIV16;
 808813a:	2118      	movs	r1, #24
 808813c:	e000      	b.n	8088140 <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 32) {
    v = SPI_CLOCK_DIV32;
 808813e:	2120      	movs	r1, #32
  } else  if (divisor <= 64) {
    v = SPI_CLOCK_DIV64;
  } else {
    v = SPI_CLOCK_DIV128;
  }
  spiPtr[m_spiIf]->setClockDivider(v);
 8088140:	7933      	ldrb	r3, [r6, #4]
 8088142:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8088146:	f002 fda9 	bl	808ac9c <_ZN8SPIClass15setClockDividerEh>
#endif  // SPI_CLOCK_DIV128
  // delay for SPI transfer done callback too soon bug.
  bugDelay = 24*divisor*(1 + m_spiIf)/60;
 808814a:	2318      	movs	r3, #24
 808814c:	fb03 f104 	mul.w	r1, r3, r4
 8088150:	7932      	ldrb	r2, [r6, #4]
 8088152:	233c      	movs	r3, #60	; 0x3c
 8088154:	fb02 1101 	mla	r1, r2, r1, r1
 8088158:	fb91 f1f3 	sdiv	r1, r1, r3
 808815c:	4b02      	ldr	r3, [pc, #8]	; (8088168 <_ZN5SdSpi16beginTransactionEh+0x78>)
 808815e:	6019      	str	r1, [r3, #0]
 8088160:	bd70      	pop	{r4, r5, r6, pc}
 8088162:	bf00      	nop
 8088164:	08093c38 	.word	0x08093c38
 8088168:	20000bd4 	.word	0x20000bd4

0808816c <_ZN5SdSpi7receiveEv>:
void SdSpi::endTransaction() {
}
//-----------------------------------------------------------------------------
/** SPI receive a byte */
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
 808816c:	7902      	ldrb	r2, [r0, #4]
 808816e:	4b03      	ldr	r3, [pc, #12]	; (808817c <_ZN5SdSpi7receiveEv+0x10>)
 8088170:	21ff      	movs	r1, #255	; 0xff
 8088172:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8088176:	f002 bda5 	b.w	808acc4 <_ZN8SPIClass8transferEh>
 808817a:	bf00      	nop
 808817c:	08093c38 	.word	0x08093c38

08088180 <_ZN5SdSpi4sendEh>:
  return 0;
}
//-----------------------------------------------------------------------------
/** SPI send a byte */
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
 8088180:	7902      	ldrb	r2, [r0, #4]
 8088182:	4b02      	ldr	r3, [pc, #8]	; (808818c <_ZN5SdSpi4sendEh+0xc>)
 8088184:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8088188:	f002 bd9c 	b.w	808acc4 <_ZN8SPIClass8transferEh>
 808818c:	08093c38 	.word	0x08093c38

08088190 <_ZN5SdSpi7receiveEPhj>:
/** SPI receive a byte */
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
}
//-----------------------------------------------------------------------------
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
 8088190:	b573      	push	{r0, r1, r4, r5, r6, lr}
  SPI_DMA_TransferCompleted = false;
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8088192:	4b0c      	ldr	r3, [pc, #48]	; (80881c4 <_ZN5SdSpi7receiveEPhj+0x34>)
 8088194:	7906      	ldrb	r6, [r0, #4]
 8088196:	480c      	ldr	r0, [pc, #48]	; (80881c8 <_ZN5SdSpi7receiveEPhj+0x38>)
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
}
//-----------------------------------------------------------------------------
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 8088198:	2500      	movs	r5, #0
 808819a:	4c0c      	ldr	r4, [pc, #48]	; (80881cc <_ZN5SdSpi7receiveEPhj+0x3c>)
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 808819c:	9300      	str	r3, [sp, #0]
 808819e:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 80881a2:	4613      	mov	r3, r2
 80881a4:	460a      	mov	r2, r1
 80881a6:	4629      	mov	r1, r5
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
}
//-----------------------------------------------------------------------------
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 80881a8:	7025      	strb	r5, [r4, #0]
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 80881aa:	f002 fd91 	bl	808acd0 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
 80881ae:	7823      	ldrb	r3, [r4, #0]
 80881b0:	2b00      	cmp	r3, #0
 80881b2:	d0fc      	beq.n	80881ae <_ZN5SdSpi7receiveEPhj+0x1e>
  if (bugDelay) {
 80881b4:	4b06      	ldr	r3, [pc, #24]	; (80881d0 <_ZN5SdSpi7receiveEPhj+0x40>)
 80881b6:	6818      	ldr	r0, [r3, #0]
 80881b8:	b108      	cbz	r0, 80881be <_ZN5SdSpi7receiveEPhj+0x2e>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80881ba:	f002 f909 	bl	808a3d0 <HAL_Delay_Microseconds>
    delayMicroseconds(bugDelay);
  }
  return 0;
}
 80881be:	2000      	movs	r0, #0
 80881c0:	b002      	add	sp, #8
 80881c2:	bd70      	pop	{r4, r5, r6, pc}
 80881c4:	080880d1 	.word	0x080880d1
 80881c8:	08093c38 	.word	0x08093c38
 80881cc:	20000bd0 	.word	0x20000bd0
 80881d0:	20000bd4 	.word	0x20000bd4

080881d4 <_ZN5SdSpi4sendEPKhj>:
/** SPI send a byte */
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
 80881d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  SPI_DMA_TransferCompleted = false;

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 80881d6:	4b0d      	ldr	r3, [pc, #52]	; (808820c <_ZN5SdSpi4sendEPKhj+0x38>)
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
 80881d8:	7906      	ldrb	r6, [r0, #4]
                            SD_SPI_DMA_TransferComplete_Callback);
 80881da:	480d      	ldr	r0, [pc, #52]	; (8088210 <_ZN5SdSpi4sendEPKhj+0x3c>)
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 80881dc:	2500      	movs	r5, #0
 80881de:	4c0d      	ldr	r4, [pc, #52]	; (8088214 <_ZN5SdSpi4sendEPKhj+0x40>)

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 80881e0:	9300      	str	r3, [sp, #0]
 80881e2:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 80881e6:	4613      	mov	r3, r2
 80881e8:	462a      	mov	r2, r5
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 80881ea:	7025      	strb	r5, [r4, #0]

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 80881ec:	f002 fd70 	bl	808acd0 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
 80881f0:	7823      	ldrb	r3, [r4, #0]
 80881f2:	2b00      	cmp	r3, #0
 80881f4:	d0fc      	beq.n	80881f0 <_ZN5SdSpi4sendEPKhj+0x1c>
  if (bugDelay) {
 80881f6:	4b08      	ldr	r3, [pc, #32]	; (8088218 <_ZN5SdSpi4sendEPKhj+0x44>)
 80881f8:	6818      	ldr	r0, [r3, #0]
 80881fa:	b120      	cbz	r0, 8088206 <_ZN5SdSpi4sendEPKhj+0x32>
    delayMicroseconds(bugDelay);
  }
}
 80881fc:	b002      	add	sp, #8
 80881fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8088202:	f002 b8e5 	b.w	808a3d0 <HAL_Delay_Microseconds>
 8088206:	b002      	add	sp, #8
 8088208:	bd70      	pop	{r4, r5, r6, pc}
 808820a:	bf00      	nop
 808820c:	080880d1 	.word	0x080880d1
 8088210:	08093c38 	.word	0x08093c38
 8088214:	20000bd0 	.word	0x20000bd0
 8088218:	20000bd4 	.word	0x20000bd4

0808821c <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv>:
 808821c:	f002 b840 	b.w	808a2a0 <HAL_Pin_Map>

08088220 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 8088220:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 8088222:	f100 0210 	add.w	r2, r0, #16
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 8088226:	f063 037f 	orn	r3, r3, #127	; 0x7f
 808822a:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 808822c:	6901      	ldr	r1, [r0, #16]
 808822e:	6880      	ldr	r0, [r0, #8]
 8088230:	f000 bc04 	b.w	8088a3c <_ZN9FatVolume15allocateClusterEmPm>

08088234 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 8088234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 8088238:	7803      	ldrb	r3, [r0, #0]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 808823a:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 808823c:	f003 0320 	and.w	r3, r3, #32
 8088240:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8088244:	b10b      	cbz	r3, 808824a <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
 8088246:	2600      	movs	r6, #0
 8088248:	e02e      	b.n	80882a8 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
 808824a:	6942      	ldr	r2, [r0, #20]
 808824c:	4b18      	ldr	r3, [pc, #96]	; (80882b0 <_ZN7FatFile13addDirClusterEv+0x7c>)
 808824e:	429a      	cmp	r2, r3
 8088250:	d8f9      	bhi.n	8088246 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
 8088252:	f7ff ffe5 	bl	8088220 <_ZN7FatFile10addClusterEv>
 8088256:	4606      	mov	r6, r0
 8088258:	2800      	cmp	r0, #0
 808825a:	d0f4      	beq.n	8088246 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterStartBlock(m_curCluster);
 808825c:	6921      	ldr	r1, [r4, #16]
 808825e:	68a0      	ldr	r0, [r4, #8]
 8088260:	f000 fb8d 	bl	808897e <_ZNK9FatVolume17clusterStartBlockEm>
 8088264:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8088266:	68a0      	ldr	r0, [r4, #8]
 8088268:	2205      	movs	r2, #5
 808826a:	4639      	mov	r1, r7
 808826c:	3028      	adds	r0, #40	; 0x28
 808826e:	f000 fb62 	bl	8088936 <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
 8088272:	4680      	mov	r8, r0
 8088274:	2800      	cmp	r0, #0
 8088276:	d0e6      	beq.n	8088246 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
 8088278:	4629      	mov	r1, r5
 808827a:	f44f 7200 	mov.w	r2, #512	; 0x200
 808827e:	f006 fa49 	bl	808e714 <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 8088282:	2501      	movs	r5, #1
 8088284:	68a0      	ldr	r0, [r4, #8]
 8088286:	7902      	ldrb	r2, [r0, #4]
 8088288:	42aa      	cmp	r2, r5
 808828a:	d909      	bls.n	80882a0 <_ZN7FatFile13addDirClusterEv+0x6c>
    if (!m_vol->writeBlock(block + i, pc->data)) {
 808828c:	6803      	ldr	r3, [r0, #0]
 808828e:	4642      	mov	r2, r8
 8088290:	685b      	ldr	r3, [r3, #4]
 8088292:	19e9      	adds	r1, r5, r7
 8088294:	4798      	blx	r3
 8088296:	2800      	cmp	r0, #0
 8088298:	d0d5      	beq.n	8088246 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 808829a:	3501      	adds	r5, #1
 808829c:	b2ed      	uxtb	r5, r5
 808829e:	e7f1      	b.n	8088284 <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
 80882a0:	6963      	ldr	r3, [r4, #20]
 80882a2:	eb03 2342 	add.w	r3, r3, r2, lsl #9
 80882a6:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
 80882a8:	4630      	mov	r0, r6
 80882aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80882ae:	bf00      	nop
 80882b0:	001ffdff 	.word	0x001ffdff

080882b4 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
 80882b4:	b510      	push	{r4, lr}
 80882b6:	4604      	mov	r4, r0
 80882b8:	6880      	ldr	r0, [r0, #8]
 80882ba:	460a      	mov	r2, r1
 80882bc:	3028      	adds	r0, #40	; 0x28
 80882be:	69a1      	ldr	r1, [r4, #24]
 80882c0:	f000 fb39 	bl	8088936 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
 80882c4:	b120      	cbz	r0, 80882d0 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
 80882c6:	88a3      	ldrh	r3, [r4, #4]
 80882c8:	f003 030f 	and.w	r3, r3, #15
 80882cc:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
 80882d0:	bd10      	pop	{r4, pc}

080882d2 <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 80882d2:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
 80882d4:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 80882d6:	4605      	mov	r5, r0
 80882d8:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
 80882da:	b984      	cbnz	r4, 80882fe <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
 80882dc:	2224      	movs	r2, #36	; 0x24
 80882de:	4621      	mov	r1, r4
 80882e0:	f006 fa18 	bl	808e714 <memset>

  m_vol = vol;
 80882e4:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
 80882e6:	79f3      	ldrb	r3, [r6, #7]
 80882e8:	2b10      	cmp	r3, #16
 80882ea:	d003      	beq.n	80882f4 <_ZN7FatFile8openRootEP9FatVolume+0x22>
 80882ec:	2b20      	cmp	r3, #32
 80882ee:	d106      	bne.n	80882fe <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
 80882f0:	2340      	movs	r3, #64	; 0x40
 80882f2:	e000      	b.n	80882f6 <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
 80882f4:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = O_READ;
 80882f6:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
 80882f8:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = O_READ;
 80882fa:	70a8      	strb	r0, [r5, #2]
 80882fc:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
 80882fe:	2000      	movs	r0, #0
 8088300:	bd70      	pop	{r4, r5, r6, pc}

08088302 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
 8088302:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8088306:	7803      	ldrb	r3, [r0, #0]
 8088308:	4604      	mov	r4, r0
 808830a:	4689      	mov	r9, r1
 808830c:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & O_READ)) {
 808830e:	b14b      	cbz	r3, 8088324 <_ZN7FatFile4readEPvj+0x22>
 8088310:	7882      	ldrb	r2, [r0, #2]
 8088312:	07d1      	lsls	r1, r2, #31
 8088314:	d506      	bpl.n	8088324 <_ZN7FatFile4readEPvj+0x22>
 8088316:	e00c      	b.n	8088332 <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8088318:	465a      	mov	r2, fp
 808831a:	6921      	ldr	r1, [r4, #16]
 808831c:	f000 fb35 	bl	808898a <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
 8088320:	2800      	cmp	r0, #0
 8088322:	da3d      	bge.n	80883a0 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 8088324:	7863      	ldrb	r3, [r4, #1]
  return -1;
 8088326:	f04f 30ff 	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 808832a:	f043 0302 	orr.w	r3, r3, #2
 808832e:	7063      	strb	r3, [r4, #1]
  return -1;
 8088330:	e098      	b.n	8088464 <_ZN7FatFile4readEPvj+0x162>
  if (!isOpen() || !(m_flags & O_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
 8088332:	071a      	lsls	r2, r3, #28
 8088334:	d503      	bpl.n	808833e <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
 8088336:	69e3      	ldr	r3, [r4, #28]
 8088338:	6962      	ldr	r2, [r4, #20]
 808833a:	1a9b      	subs	r3, r3, r2
 808833c:	e007      	b.n	808834e <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
 808833e:	069a      	lsls	r2, r3, #26
 8088340:	d508      	bpl.n	8088354 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
 8088342:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
 8088344:	891a      	ldrh	r2, [r3, #8]
 8088346:	6963      	ldr	r3, [r4, #20]
 8088348:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
 808834c:	b29b      	uxth	r3, r3
 808834e:	429d      	cmp	r5, r3
 8088350:	bf28      	it	cs
 8088352:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
 8088354:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
 8088356:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 808835a:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 808835e:	2e00      	cmp	r6, #0
 8088360:	d035      	beq.n	80883ce <_ZN7FatFile4readEPvj+0xcc>
 8088362:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 8088364:	6963      	ldr	r3, [r4, #20]
    if (isRootFixed()) {
 8088366:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 808836a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 808836e:	68a0      	ldr	r0, [r4, #8]
 8088370:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
 8088374:	d002      	beq.n	808837c <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
 8088376:	6a03      	ldr	r3, [r0, #32]
 8088378:	4419      	add	r1, r3
 808837a:	e01d      	b.n	80883b8 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 808837c:	f890 8005 	ldrb.w	r8, [r0, #5]
 8088380:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
 8088384:	f1ba 0f00 	cmp.w	sl, #0
 8088388:	d110      	bne.n	80883ac <_ZN7FatFile4readEPvj+0xaa>
 808838a:	f1b8 0f00 	cmp.w	r8, #0
 808838e:	d10d      	bne.n	80883ac <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
 8088390:	2b00      	cmp	r3, #0
 8088392:	d1c1      	bne.n	8088318 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 8088394:	0653      	lsls	r3, r2, #25
 8088396:	bf4c      	ite	mi
 8088398:	6a03      	ldrmi	r3, [r0, #32]
 808839a:	6a23      	ldrpl	r3, [r4, #32]
 808839c:	6123      	str	r3, [r4, #16]
 808839e:	e005      	b.n	80883ac <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
 80883a0:	d104      	bne.n	80883ac <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
 80883a2:	7823      	ldrb	r3, [r4, #0]
 80883a4:	f013 0f70 	tst.w	r3, #112	; 0x70
 80883a8:	d111      	bne.n	80883ce <_ZN7FatFile4readEPvj+0xcc>
 80883aa:	e7bb      	b.n	8088324 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 80883ac:	6921      	ldr	r1, [r4, #16]
 80883ae:	68a0      	ldr	r0, [r4, #8]
 80883b0:	f000 fae5 	bl	808897e <_ZNK9FatVolume17clusterStartBlockEm>
 80883b4:	eb08 0100 	add.w	r1, r8, r0
 80883b8:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
 80883ba:	f1ba 0f00 	cmp.w	sl, #0
 80883be:	d135      	bne.n	808842c <_ZN7FatFile4readEPvj+0x12a>
 80883c0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80883c4:	d332      	bcc.n	808842c <_ZN7FatFile4readEPvj+0x12a>
 80883c6:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80883c8:	4291      	cmp	r1, r2
 80883ca:	d102      	bne.n	80883d2 <_ZN7FatFile4readEPvj+0xd0>
 80883cc:	e02e      	b.n	808842c <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
 80883ce:	1ba8      	subs	r0, r5, r6
 80883d0:	e048      	b.n	8088464 <_ZN7FatFile4readEPvj+0x162>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
 80883d2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80883d6:	d31b      	bcc.n	8088410 <_ZN7FatFile4readEPvj+0x10e>
      uint8_t nb = toRead >> 9;
      if (!isRootFixed()) {
 80883d8:	7827      	ldrb	r7, [r4, #0]
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      uint8_t nb = toRead >> 9;
 80883da:	f3c6 2347 	ubfx	r3, r6, #9, #8
      if (!isRootFixed()) {
 80883de:	06bf      	lsls	r7, r7, #26
 80883e0:	d406      	bmi.n	80883f0 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
 80883e2:	7907      	ldrb	r7, [r0, #4]
 80883e4:	ebc8 0707 	rsb	r7, r8, r7
 80883e8:	b2ff      	uxtb	r7, r7
 80883ea:	42bb      	cmp	r3, r7
 80883ec:	bf28      	it	cs
 80883ee:	463b      	movcs	r3, r7
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 80883f0:	4291      	cmp	r1, r2
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
 80883f2:	ea4f 2743 	mov.w	r7, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 80883f6:	d207      	bcs.n	8088408 <_ZN7FatFile4readEPvj+0x106>
        if (!m_vol->cacheSync()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
 80883f8:	68a0      	ldr	r0, [r4, #8]
 80883fa:	6802      	ldr	r2, [r0, #0]
 80883fc:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8088400:	464a      	mov	r2, r9
 8088402:	47d0      	blx	sl
 8088404:	b960      	cbnz	r0, 8088420 <_ZN7FatFile4readEPvj+0x11e>
 8088406:	e78d      	b.n	8088324 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8088408:	441a      	add	r2, r3
 808840a:	4291      	cmp	r1, r2
 808840c:	d321      	bcc.n	8088452 <_ZN7FatFile4readEPvj+0x150>
 808840e:	e7f3      	b.n	80883f8 <_ZN7FatFile4readEPvj+0xf6>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
 8088410:	6803      	ldr	r3, [r0, #0]
 8088412:	464a      	mov	r2, r9
 8088414:	681b      	ldr	r3, [r3, #0]
 8088416:	4798      	blx	r3
 8088418:	2800      	cmp	r0, #0
 808841a:	d083      	beq.n	8088324 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
 808841c:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
 8088420:	6963      	ldr	r3, [r4, #20]
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
 8088422:	44b9      	add	r9, r7
    m_curPosition += n;
 8088424:	443b      	add	r3, r7
 8088426:	6163      	str	r3, [r4, #20]
    toRead -= n;
 8088428:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 808842a:	e798      	b.n	808835e <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 808842c:	2200      	movs	r2, #0
 808842e:	3028      	adds	r0, #40	; 0x28
 8088430:	f000 fa81 	bl	8088936 <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
 8088434:	2800      	cmp	r0, #0
 8088436:	f43f af75 	beq.w	8088324 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
 808843a:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
 808843e:	42b7      	cmp	r7, r6
 8088440:	bf28      	it	cs
 8088442:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
 8088444:	eb00 010a 	add.w	r1, r0, sl
 8088448:	463a      	mov	r2, r7
 808844a:	4648      	mov	r0, r9
 808844c:	f006 f957 	bl	808e6fe <memcpy>
 8088450:	e7e6      	b.n	8088420 <_ZN7FatFile4readEPvj+0x11e>
 8088452:	e88d 000a 	stmia.w	sp, {r1, r3}
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSync()) {
 8088456:	f7ff f8c3 	bl	80875e0 <_ZN9FatVolume9cacheSyncEv>
 808845a:	e89d 000a 	ldmia.w	sp, {r1, r3}
 808845e:	2800      	cmp	r0, #0
 8088460:	d1ca      	bne.n	80883f8 <_ZN7FatFile4readEPvj+0xf6>
 8088462:	e75f      	b.n	8088324 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
 8088464:	b003      	add	sp, #12
 8088466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808846a <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
 808846a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 808846c:	2201      	movs	r2, #1
 808846e:	f10d 0107 	add.w	r1, sp, #7
 8088472:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
 8088474:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
 8088476:	6905      	ldr	r5, [r0, #16]
 8088478:	f7ff ff43 	bl	8088302 <_ZN7FatFile4readEPvj>
 808847c:	2801      	cmp	r0, #1
 808847e:	bf09      	itett	eq
 8088480:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
 8088484:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
 8088488:	6166      	streq	r6, [r4, #20]
  m_curCluster = pos->cluster;
 808848a:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
 808848c:	b002      	add	sp, #8
 808848e:	bd70      	pop	{r4, r5, r6, pc}

08088490 <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
 8088490:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
 8088492:	6943      	ldr	r3, [r0, #20]
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
 8088494:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
 8088496:	f3c3 1543 	ubfx	r5, r3, #5, #4

  if (i == 0 || !skipReadOk) {
 808849a:	b105      	cbz	r5, 808849e <_ZN7FatFile12readDirCacheEb+0xe>
 808849c:	b969      	cbnz	r1, 80884ba <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
 808849e:	2201      	movs	r2, #1
 80884a0:	f10d 0107 	add.w	r1, sp, #7
 80884a4:	4620      	mov	r0, r4
 80884a6:	f7ff ff2c 	bl	8088302 <_ZN7FatFile4readEPvj>
 80884aa:	b240      	sxtb	r0, r0
    if  (n != 1) {
 80884ac:	2801      	cmp	r0, #1
 80884ae:	d001      	beq.n	80884b4 <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
 80884b0:	2000      	movs	r0, #0
 80884b2:	e008      	b.n	80884c6 <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
 80884b4:	6963      	ldr	r3, [r4, #20]
 80884b6:	331f      	adds	r3, #31
 80884b8:	e000      	b.n	80884bc <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
 80884ba:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
 80884bc:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
 80884be:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
 80884c0:	3034      	adds	r0, #52	; 0x34
 80884c2:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
 80884c6:	b003      	add	sp, #12
 80884c8:	bd30      	pop	{r4, r5, pc}

080884ca <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
 80884ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80884ce:	460e      	mov	r6, r1
 80884d0:	7801      	ldrb	r1, [r0, #0]
 80884d2:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
 80884d4:	6907      	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
 80884d6:	2900      	cmp	r1, #0
 80884d8:	d039      	beq.n	808854e <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
 80884da:	6945      	ldr	r5, [r0, #20]
 80884dc:	42b5      	cmp	r5, r6
 80884de:	d03a      	beq.n	8088556 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
 80884e0:	b90e      	cbnz	r6, 80884e6 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
 80884e2:	6106      	str	r6, [r0, #16]
    goto done;
 80884e4:	e031      	b.n	808854a <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
 80884e6:	070b      	lsls	r3, r1, #28
 80884e8:	d503      	bpl.n	80884f2 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
 80884ea:	69c3      	ldr	r3, [r0, #28]
 80884ec:	429e      	cmp	r6, r3
 80884ee:	d82e      	bhi.n	808854e <_ZN7FatFile7seekSetEm+0x84>
 80884f0:	e007      	b.n	8088502 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
 80884f2:	0688      	lsls	r0, r1, #26
 80884f4:	d505      	bpl.n	8088502 <_ZN7FatFile7seekSetEm+0x38>
 80884f6:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
 80884f8:	891b      	ldrh	r3, [r3, #8]
 80884fa:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
 80884fe:	d826      	bhi.n	808854e <_ZN7FatFile7seekSetEm+0x84>
 8088500:	e023      	b.n	808854a <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 8088502:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8088506:	1e6a      	subs	r2, r5, #1
 8088508:	f89e 3006 	ldrb.w	r3, [lr, #6]
 808850c:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 8088510:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 8088512:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 8088514:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
 8088516:	429a      	cmp	r2, r3
 8088518:	d800      	bhi.n	808851c <_ZN7FatFile7seekSetEm+0x52>
 808851a:	b94d      	cbnz	r5, 8088530 <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 808851c:	064a      	lsls	r2, r1, #25
 808851e:	bf4c      	ite	mi
 8088520:	f8de 2020 	ldrmi.w	r2, [lr, #32]
 8088524:	6a22      	ldrpl	r2, [r4, #32]
 8088526:	6122      	str	r2, [r4, #16]
 8088528:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 808852a:	f104 0810 	add.w	r8, r4, #16
 808852e:	e00a      	b.n	8088546 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
 8088530:	1a9b      	subs	r3, r3, r2
 8088532:	e7f9      	b.n	8088528 <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 8088534:	4642      	mov	r2, r8
 8088536:	6921      	ldr	r1, [r4, #16]
 8088538:	68a0      	ldr	r0, [r4, #8]
 808853a:	f000 fa26 	bl	808898a <_ZN9FatVolume6fatGetEmPm>
 808853e:	2800      	cmp	r0, #0
 8088540:	f105 35ff 	add.w	r5, r5, #4294967295
 8088544:	dd03      	ble.n	808854e <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
 8088546:	2d00      	cmp	r5, #0
 8088548:	d1f4      	bne.n	8088534 <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
 808854a:	6166      	str	r6, [r4, #20]
 808854c:	e003      	b.n	8088556 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
 808854e:	6127      	str	r7, [r4, #16]
  return false;
 8088550:	2000      	movs	r0, #0
 8088552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
 8088556:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
 8088558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808855c <_ZN7FatFile15openCachedEntryEPS_thh>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              uint8_t oflag, uint8_t lfnOrd) {
 808855c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808855e:	460f      	mov	r7, r1
 8088560:	4604      	mov	r4, r0
 8088562:	4616      	mov	r6, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
 8088564:	2100      	movs	r1, #0
 8088566:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              uint8_t oflag, uint8_t lfnOrd) {
 8088568:	461d      	mov	r5, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
 808856a:	f006 f8d3 	bl	808e714 <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
 808856e:	68b8      	ldr	r0, [r7, #8]
  m_dirIndex = dirIndex;
 8088570:	80a6      	strh	r6, [r4, #4]
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              uint8_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
 8088572:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
 8088574:	6a3b      	ldr	r3, [r7, #32]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 8088576:	f006 020f 	and.w	r2, r6, #15
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
 808857a:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 808857c:	0152      	lsls	r2, r2, #5
 808857e:	f100 0334 	add.w	r3, r0, #52	; 0x34
 8088582:	4413      	add	r3, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
 8088584:	7ad9      	ldrb	r1, [r3, #11]
 8088586:	070f      	lsls	r7, r1, #28
 8088588:	d502      	bpl.n	8088590 <_ZN7FatFile15openCachedEntryEPS_thh+0x34>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
 808858a:	2000      	movs	r0, #0
 808858c:	7020      	strb	r0, [r4, #0]
  return false;
 808858e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
 8088590:	1881      	adds	r1, r0, r2
 8088592:	f891 103f 	ldrb.w	r1, [r1, #63]	; 0x3f
 8088596:	f001 0117 	and.w	r1, r1, #23
 808859a:	7021      	strb	r1, [r4, #0]
  if (DIR_IS_FILE(dir)) {
 808859c:	7adb      	ldrb	r3, [r3, #11]
 808859e:	f013 0f18 	tst.w	r3, #24
    m_attr |= FILE_ATTR_FILE;
 80885a2:	bf08      	it	eq
 80885a4:	f041 0108 	orreq.w	r1, r1, #8
  }
  m_lfnOrd = lfnOrd;
 80885a8:	f89d 3018 	ldrb.w	r3, [sp, #24]
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
  if (DIR_IS_FILE(dir)) {
    m_attr |= FILE_ATTR_FILE;
 80885ac:	bf08      	it	eq
 80885ae:	7021      	strbeq	r1, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
  // Write, truncate, or at end is an error for a directory or read-only file.
  if (oflag & (O_WRITE | O_TRUNC | O_AT_END)) {
 80885b0:	f015 0f32 	tst.w	r5, #50	; 0x32
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
  if (DIR_IS_FILE(dir)) {
    m_attr |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
 80885b4:	70e3      	strb	r3, [r4, #3]
  // Write, truncate, or at end is an error for a directory or read-only file.
  if (oflag & (O_WRITE | O_TRUNC | O_AT_END)) {
 80885b6:	d003      	beq.n	80885c0 <_ZN7FatFile15openCachedEntryEPS_thh+0x64>
    if (isSubDir() || isReadOnly()) {
 80885b8:	7823      	ldrb	r3, [r4, #0]
 80885ba:	f013 0f11 	tst.w	r3, #17
 80885be:	d1e4      	bne.n	808858a <_ZN7FatFile15openCachedEntryEPS_thh+0x2e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // save open flags for read/write
  m_flags = oflag & F_OFLAG;
 80885c0:	f005 030f 	and.w	r3, r5, #15
 80885c4:	70a3      	strb	r3, [r4, #2]
 80885c6:	6b03      	ldr	r3, [r0, #48]	; 0x30

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 80885c8:	4402      	add	r2, r0
    }
  }
  // save open flags for read/write
  m_flags = oflag & F_OFLAG;

  m_dirBlock = m_vol->cacheBlockNumber();
 80885ca:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
 80885cc:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
 80885d0:	f8b2 104e 	ldrh.w	r1, [r2, #78]	; 0x4e

  if (oflag & O_TRUNC) {
 80885d4:	06ee      	lsls	r6, r5, #27

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
 80885d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16

  if (oflag & O_TRUNC) {
 80885da:	d504      	bpl.n	80885e6 <_ZN7FatFile15openCachedEntryEPS_thh+0x8a>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 80885dc:	b171      	cbz	r1, 80885fc <_ZN7FatFile15openCachedEntryEPS_thh+0xa0>
 80885de:	f000 fa68 	bl	8088ab2 <_ZN9FatVolume9freeChainEm>
 80885e2:	b958      	cbnz	r0, 80885fc <_ZN7FatFile15openCachedEntryEPS_thh+0xa0>
 80885e4:	e7d1      	b.n	808858a <_ZN7FatFile15openCachedEntryEPS_thh+0x2e>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
 80885e6:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
 80885e8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80885ea:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 80885ec:	06ab      	lsls	r3, r5, #26
 80885ee:	d50a      	bpl.n	8088606 <_ZN7FatFile15openCachedEntryEPS_thh+0xaa>
 80885f0:	69e1      	ldr	r1, [r4, #28]
 80885f2:	4620      	mov	r0, r4
 80885f4:	f7ff ff69 	bl	80884ca <_ZN7FatFile7seekSetEm>
 80885f8:	b928      	cbnz	r0, 8088606 <_ZN7FatFile15openCachedEntryEPS_thh+0xaa>
 80885fa:	e7c6      	b.n	808858a <_ZN7FatFile15openCachedEntryEPS_thh+0x2e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
 80885fc:	78a3      	ldrb	r3, [r4, #2]
 80885fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8088602:	70a3      	strb	r3, [r4, #2]
 8088604:	e7f2      	b.n	80885ec <_ZN7FatFile15openCachedEntryEPS_thh+0x90>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
 8088606:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
 8088608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0808860c <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 808860c:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
 808860e:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 8088610:	4604      	mov	r4, r0
  if (!isOpen()) {
 8088612:	b90b      	cbnz	r3, 8088618 <_ZN7FatFile4syncEv+0xc>
    return true;
 8088614:	2001      	movs	r0, #1
 8088616:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (m_flags & F_FILE_DIR_DIRTY) {
 8088618:	f990 3002 	ldrsb.w	r3, [r0, #2]
 808861c:	2b00      	cmp	r3, #0
 808861e:	da23      	bge.n	8088668 <_ZN7FatFile4syncEv+0x5c>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
 8088620:	2101      	movs	r1, #1
 8088622:	f7ff fe47 	bl	80882b4 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 8088626:	4605      	mov	r5, r0
 8088628:	b928      	cbnz	r0, 8088636 <_ZN7FatFile4syncEv+0x2a>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 808862a:	7863      	ldrb	r3, [r4, #1]
  return false;
 808862c:	2000      	movs	r0, #0
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 808862e:	f043 0301 	orr.w	r3, r3, #1
 8088632:	7063      	strb	r3, [r4, #1]
 8088634:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 8088636:	7803      	ldrb	r3, [r0, #0]
 8088638:	2be5      	cmp	r3, #229	; 0xe5
 808863a:	d0f6      	beq.n	808862a <_ZN7FatFile4syncEv+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
 808863c:	7823      	ldrb	r3, [r4, #0]
 808863e:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
 8088640:	bf44      	itt	mi
 8088642:	69e3      	ldrmi	r3, [r4, #28]
 8088644:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
 8088646:	8c23      	ldrh	r3, [r4, #32]
 8088648:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
 808864a:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 808864c:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
 808864e:	4b09      	ldr	r3, [pc, #36]	; (8088674 <_ZN7FatFile4syncEv+0x68>)
 8088650:	681b      	ldr	r3, [r3, #0]
 8088652:	b12b      	cbz	r3, 8088660 <_ZN7FatFile4syncEv+0x54>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
 8088654:	f100 0116 	add.w	r1, r0, #22
 8088658:	3018      	adds	r0, #24
 808865a:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
 808865c:	8b2b      	ldrh	r3, [r5, #24]
 808865e:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
 8088660:	78a3      	ldrb	r3, [r4, #2]
 8088662:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8088666:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
 8088668:	68a0      	ldr	r0, [r4, #8]
 808866a:	f7fe ffb9 	bl	80875e0 <_ZN9FatVolume9cacheSyncEv>
 808866e:	2800      	cmp	r0, #0
 8088670:	d0db      	beq.n	808862a <_ZN7FatFile4syncEv+0x1e>
 8088672:	e7cf      	b.n	8088614 <_ZN7FatFile4syncEv+0x8>
 8088674:	20000bd8 	.word	0x20000bd8

08088678 <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
 8088678:	b510      	push	{r4, lr}
 808867a:	4604      	mov	r4, r0
  bool rtn = sync();
 808867c:	f7ff ffc6 	bl	808860c <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
 8088680:	2300      	movs	r3, #0
 8088682:	7023      	strb	r3, [r4, #0]
  return rtn;
}
 8088684:	bd10      	pop	{r4, pc}

08088686 <_ZN7FatFile4openEPS_PKch>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, uint8_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
 8088686:	b5f0      	push	{r4, r5, r6, r7, lr}
 8088688:	461f      	mov	r7, r3
 808868a:	b093      	sub	sp, #76	; 0x4c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 808868c:	2300      	movs	r3, #0
 808868e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8088692:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 8088696:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, uint8_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
 8088698:	4606      	mov	r6, r0
 808869a:	460c      	mov	r4, r1
 808869c:	9201      	str	r2, [sp, #4]
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 808869e:	b10b      	cbz	r3, 80886a4 <_ZN7FatFile4openEPS_PKch+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
 80886a0:	2000      	movs	r0, #0
 80886a2:	e03d      	b.n	8088720 <_ZN7FatFile4openEPS_PKch+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 80886a4:	780b      	ldrb	r3, [r1, #0]
 80886a6:	f013 0f70 	tst.w	r3, #112	; 0x70
 80886aa:	d0f9      	beq.n	80886a0 <_ZN7FatFile4openEPS_PKch+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
 80886ac:	7813      	ldrb	r3, [r2, #0]
 80886ae:	2b2f      	cmp	r3, #47	; 0x2f
 80886b0:	d112      	bne.n	80886d8 <_ZN7FatFile4openEPS_PKch+0x52>
    while (isDirSeparator(*path)) {
 80886b2:	9b01      	ldr	r3, [sp, #4]
 80886b4:	781a      	ldrb	r2, [r3, #0]
 80886b6:	2a2f      	cmp	r2, #47	; 0x2f
 80886b8:	d102      	bne.n	80886c0 <_ZN7FatFile4openEPS_PKch+0x3a>
      path++;
 80886ba:	3301      	adds	r3, #1
 80886bc:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
 80886be:	e7f8      	b.n	80886b2 <_ZN7FatFile4openEPS_PKch+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
 80886c0:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
 80886c2:	b91a      	cbnz	r2, 80886cc <_ZN7FatFile4openEPS_PKch+0x46>
      return openRoot(dirFile->m_vol);
 80886c4:	4630      	mov	r0, r6
 80886c6:	f7ff fe04 	bl	80882d2 <_ZN7FatFile8openRootEP9FatVolume>
 80886ca:	e029      	b.n	8088720 <_ZN7FatFile4openEPS_PKch+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
 80886cc:	a809      	add	r0, sp, #36	; 0x24
 80886ce:	f7ff fe00 	bl	80882d2 <_ZN7FatFile8openRootEP9FatVolume>
 80886d2:	2800      	cmp	r0, #0
 80886d4:	d0e4      	beq.n	80886a0 <_ZN7FatFile4openEPS_PKch+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
 80886d6:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
 80886d8:	aa01      	add	r2, sp, #4
 80886da:	a903      	add	r1, sp, #12
 80886dc:	9801      	ldr	r0, [sp, #4]
 80886de:	f7fe ff9b 	bl	8087618 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
 80886e2:	2800      	cmp	r0, #0
 80886e4:	d0dc      	beq.n	80886a0 <_ZN7FatFile4openEPS_PKch+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
 80886e6:	9b01      	ldr	r3, [sp, #4]
 80886e8:	781b      	ldrb	r3, [r3, #0]
 80886ea:	b19b      	cbz	r3, 8088714 <_ZN7FatFile4openEPS_PKch+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_READ)) {
 80886ec:	2301      	movs	r3, #1
 80886ee:	aa03      	add	r2, sp, #12
 80886f0:	4621      	mov	r1, r4
 80886f2:	4630      	mov	r0, r6
 80886f4:	f7ff f8d2 	bl	808789c <_ZN7FatFile4openEPS_P7fname_th>
 80886f8:	2800      	cmp	r0, #0
 80886fa:	d0d1      	beq.n	80886a0 <_ZN7FatFile4openEPS_PKch+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
 80886fc:	4635      	mov	r5, r6
 80886fe:	ac09      	add	r4, sp, #36	; 0x24
 8088700:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8088702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8088704:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8088706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8088708:	682b      	ldr	r3, [r5, #0]
    dirFile = &tmpDir;
    close();
 808870a:	4630      	mov	r0, r6
    }
    if (!open(dirFile, &fname, O_READ)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
 808870c:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
 808870e:	f7ff ffb3 	bl	8088678 <_ZN7FatFile5closeEv>
 8088712:	e7e0      	b.n	80886d6 <_ZN7FatFile4openEPS_PKch+0x50>
  }
  return open(dirFile, &fname, oflag);
 8088714:	463b      	mov	r3, r7
 8088716:	aa03      	add	r2, sp, #12
 8088718:	4621      	mov	r1, r4
 808871a:	4630      	mov	r0, r6
 808871c:	f7ff f8be 	bl	808789c <_ZN7FatFile4openEPS_P7fname_th>

fail:
  return false;
}
 8088720:	b013      	add	sp, #76	; 0x4c
 8088722:	bdf0      	pop	{r4, r5, r6, r7, pc}

08088724 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 8088724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 8088728:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 808872a:	4604      	mov	r4, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 808872c:	071d      	lsls	r5, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 808872e:	4689      	mov	r9, r1
 8088730:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 8088732:	d508      	bpl.n	8088746 <_ZN7FatFile5writeEPKvj+0x22>
 8088734:	7883      	ldrb	r3, [r0, #2]
 8088736:	0799      	lsls	r1, r3, #30
 8088738:	d505      	bpl.n	8088746 <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & O_APPEND)) {
 808873a:	075b      	lsls	r3, r3, #29
 808873c:	d50b      	bpl.n	8088756 <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
 808873e:	69e1      	ldr	r1, [r4, #28]
 8088740:	f7ff fec3 	bl	80884ca <_ZN7FatFile7seekSetEm>
 8088744:	b938      	cbnz	r0, 8088756 <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 8088746:	7863      	ldrb	r3, [r4, #1]
  return -1;
 8088748:	f04f 30ff 	mov.w	r0, #4294967295
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 808874c:	f043 0301 	orr.w	r3, r3, #1
 8088750:	7063      	strb	r3, [r4, #1]
  return -1;
 8088752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
 8088756:	6963      	ldr	r3, [r4, #20]
 8088758:	43db      	mvns	r3, r3
 808875a:	4598      	cmp	r8, r3
 808875c:	d8f3      	bhi.n	8088746 <_ZN7FatFile5writeEPKvj+0x22>
 808875e:	4647      	mov	r7, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8088760:	f04f 0a00 	mov.w	sl, #0
 8088764:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 8088766:	2f00      	cmp	r7, #0
 8088768:	f000 8082 	beq.w	8088870 <_ZN7FatFile5writeEPKvj+0x14c>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
 808876c:	68a0      	ldr	r0, [r4, #8]
    uint16_t blockOffset = m_curPosition & 0X1FF;
 808876e:	f3c3 0608 	ubfx	r6, r3, #0, #9
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 8088772:	7945      	ldrb	r5, [r0, #5]
    if (blockOfCluster == 0 && blockOffset == 0) {
 8088774:	ea15 2553 	ands.w	r5, r5, r3, lsr #9
 8088778:	d11c      	bne.n	80887b4 <_ZN7FatFile5writeEPKvj+0x90>
 808877a:	b9de      	cbnz	r6, 80887b4 <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
 808877c:	6921      	ldr	r1, [r4, #16]
 808877e:	b171      	cbz	r1, 808879e <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8088780:	f104 0210 	add.w	r2, r4, #16
 8088784:	f000 f901 	bl	808898a <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
 8088788:	2800      	cmp	r0, #0
 808878a:	dbdc      	blt.n	8088746 <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
 808878c:	f040 808e 	bne.w	80888ac <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
 8088790:	4620      	mov	r0, r4
 8088792:	f7ff fd45 	bl	8088220 <_ZN7FatFile10addClusterEv>
 8088796:	2800      	cmp	r0, #0
 8088798:	f040 8088 	bne.w	80888ac <_ZN7FatFile5writeEPKvj+0x188>
 808879c:	e7d3      	b.n	8088746 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
 808879e:	6a23      	ldr	r3, [r4, #32]
 80887a0:	b93b      	cbnz	r3, 80887b2 <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
 80887a2:	4620      	mov	r0, r4
 80887a4:	f7ff fd3c 	bl	8088220 <_ZN7FatFile10addClusterEv>
 80887a8:	2800      	cmp	r0, #0
 80887aa:	d0cc      	beq.n	8088746 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
 80887ac:	6923      	ldr	r3, [r4, #16]
 80887ae:	6223      	str	r3, [r4, #32]
 80887b0:	e000      	b.n	80887b4 <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
 80887b2:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 80887b4:	6921      	ldr	r1, [r4, #16]
 80887b6:	68a0      	ldr	r0, [r4, #8]
 80887b8:	f000 f8e1 	bl	808897e <_ZNK9FatVolume17clusterStartBlockEm>
 80887bc:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
 80887be:	b916      	cbnz	r6, 80887c6 <_ZN7FatFile5writeEPKvj+0xa2>
 80887c0:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 80887c4:	d221      	bcs.n	808880a <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
 80887c6:	f5c6 7500 	rsb	r5, r6, #512	; 0x200
 80887ca:	42bd      	cmp	r5, r7
 80887cc:	bf28      	it	cs
 80887ce:	463d      	movcs	r5, r7
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
 80887d0:	b936      	cbnz	r6, 80887e0 <_ZN7FatFile5writeEPKvj+0xbc>
 80887d2:	6963      	ldr	r3, [r4, #20]
 80887d4:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
 80887d6:	4293      	cmp	r3, r2
 80887d8:	bf34      	ite	cc
 80887da:	2201      	movcc	r2, #1
 80887dc:	2205      	movcs	r2, #5
 80887de:	e000      	b.n	80887e2 <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
 80887e0:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 80887e2:	68a0      	ldr	r0, [r4, #8]
 80887e4:	3028      	adds	r0, #40	; 0x28
 80887e6:	f000 f8a6 	bl	8088936 <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
 80887ea:	2800      	cmp	r0, #0
 80887ec:	d0ab      	beq.n	8088746 <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 80887ee:	4430      	add	r0, r6
 80887f0:	462a      	mov	r2, r5
 80887f2:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
 80887f4:	442e      	add	r6, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 80887f6:	f005 ff82 	bl	808e6fe <memcpy>
      if (512 == (n + blockOffset)) {
 80887fa:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80887fe:	d131      	bne.n	8088864 <_ZN7FatFile5writeEPKvj+0x140>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
 8088800:	68a0      	ldr	r0, [r4, #8]
 8088802:	3028      	adds	r0, #40	; 0x28
 8088804:	f000 f870 	bl	80888e8 <_ZN8FatCache4syncEv>
 8088808:	e018      	b.n	808883c <_ZN7FatFile5writeEPKvj+0x118>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
 808880a:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 808880e:	68a2      	ldr	r2, [r4, #8]
 8088810:	d316      	bcc.n	8088840 <_ZN7FatFile5writeEPKvj+0x11c>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
 8088812:	7913      	ldrb	r3, [r2, #4]
 8088814:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8088816:	1b5d      	subs	r5, r3, r5
 8088818:	b2ed      	uxtb	r5, r5
      uint8_t nBlock = nToWrite >> 9;
 808881a:	f3c7 2347 	ubfx	r3, r7, #9, #8
 808881e:	42ab      	cmp	r3, r5
 8088820:	bf28      	it	cs
 8088822:	462b      	movcs	r3, r5
      if (nBlock > maxBlocks) {
        nBlock = maxBlocks;
      }
      n = 512*nBlock;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
 8088824:	4281      	cmp	r1, r0
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      uint8_t nBlock = nToWrite >> 9;
      if (nBlock > maxBlocks) {
        nBlock = maxBlocks;
      }
      n = 512*nBlock;
 8088826:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
 808882a:	d302      	bcc.n	8088832 <_ZN7FatFile5writeEPKvj+0x10e>
 808882c:	4418      	add	r0, r3
 808882e:	4281      	cmp	r1, r0
 8088830:	d336      	bcc.n	80888a0 <_ZN7FatFile5writeEPKvj+0x17c>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nBlock)) {
 8088832:	68a0      	ldr	r0, [r4, #8]
 8088834:	6802      	ldr	r2, [r0, #0]
 8088836:	68d6      	ldr	r6, [r2, #12]
 8088838:	464a      	mov	r2, r9
 808883a:	47b0      	blx	r6
 808883c:	b990      	cbnz	r0, 8088864 <_ZN7FatFile5writeEPKvj+0x140>
 808883e:	e782      	b.n	8088746 <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
 8088840:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8088842:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 8088844:	bf02      	ittt	eq
 8088846:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 808884a:	f882 a028 	strbeq.w	sl, [r2, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 808884e:	6313      	streq	r3, [r2, #48]	; 0x30
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
 8088850:	68a0      	ldr	r0, [r4, #8]
 8088852:	464a      	mov	r2, r9
 8088854:	6803      	ldr	r3, [r0, #0]
 8088856:	685b      	ldr	r3, [r3, #4]
 8088858:	4798      	blx	r3
 808885a:	2800      	cmp	r0, #0
 808885c:	f43f af73 	beq.w	8088746 <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
 8088860:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 8088864:	6963      	ldr	r3, [r4, #20]
    src += n;
 8088866:	44a9      	add	r9, r5
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 8088868:	442b      	add	r3, r5
 808886a:	6163      	str	r3, [r4, #20]
    src += n;
    nToWrite -= n;
 808886c:	1b7f      	subs	r7, r7, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 808886e:	e779      	b.n	8088764 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
 8088870:	69e2      	ldr	r2, [r4, #28]
 8088872:	4293      	cmp	r3, r2
 8088874:	78a2      	ldrb	r2, [r4, #2]
 8088876:	d901      	bls.n	808887c <_ZN7FatFile5writeEPKvj+0x158>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
 8088878:	61e3      	str	r3, [r4, #28]
 808887a:	e002      	b.n	8088882 <_ZN7FatFile5writeEPKvj+0x15e>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
 808887c:	4b0e      	ldr	r3, [pc, #56]	; (80888b8 <_ZN7FatFile5writeEPKvj+0x194>)
 808887e:	681b      	ldr	r3, [r3, #0]
 8088880:	b113      	cbz	r3, 8088888 <_ZN7FatFile5writeEPKvj+0x164>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
 8088882:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8088886:	70a2      	strb	r2, [r4, #2]
  }

  if (m_flags & O_SYNC) {
 8088888:	78a3      	ldrb	r3, [r4, #2]
 808888a:	071a      	lsls	r2, r3, #28
 808888c:	d402      	bmi.n	8088894 <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
 808888e:	4640      	mov	r0, r8
 8088890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & O_SYNC) {
    if (!sync()) {
 8088894:	4620      	mov	r0, r4
 8088896:	f7ff feb9 	bl	808860c <_ZN7FatFile4syncEv>
 808889a:	2800      	cmp	r0, #0
 808889c:	d1f7      	bne.n	808888e <_ZN7FatFile5writeEPKvj+0x16a>
 808889e:	e752      	b.n	8088746 <_ZN7FatFile5writeEPKvj+0x22>
 80888a0:	f04f 30ff 	mov.w	r0, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 80888a4:	f882 a028 	strb.w	sl, [r2, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 80888a8:	6310      	str	r0, [r2, #48]	; 0x30
 80888aa:	e7c2      	b.n	8088832 <_ZN7FatFile5writeEPKvj+0x10e>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 80888ac:	6921      	ldr	r1, [r4, #16]
 80888ae:	68a0      	ldr	r0, [r4, #8]
 80888b0:	f000 f865 	bl	808897e <_ZNK9FatVolume17clusterStartBlockEm>
 80888b4:	4601      	mov	r1, r0
 80888b6:	e783      	b.n	80887c0 <_ZN7FatFile5writeEPKvj+0x9c>
 80888b8:	20000bd8 	.word	0x20000bd8

080888bc <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
 80888bc:	f001 bcf0 	b.w	808a2a0 <HAL_Pin_Map>

080888c0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80888c0:	b570      	push	{r4, r5, r6, lr}
 80888c2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80888c4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80888c6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80888c8:	b149      	cbz	r1, 80888de <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80888ca:	f006 fca3 	bl	808f214 <strlen>
 80888ce:	682b      	ldr	r3, [r5, #0]
 80888d0:	4602      	mov	r2, r0
 80888d2:	4621      	mov	r1, r4
 80888d4:	4628      	mov	r0, r5
    }
 80888d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80888da:	68db      	ldr	r3, [r3, #12]
 80888dc:	4718      	bx	r3
    }
 80888de:	bd70      	pop	{r4, r5, r6, pc}

080888e0 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
 80888e0:	f001 bcde 	b.w	808a2a0 <HAL_Pin_Map>

080888e4 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
 80888e4:	f001 bcdc 	b.w	808a2a0 <HAL_Pin_Map>

080888e8 <_ZN8FatCache4syncEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 80888e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
 80888ea:	7803      	ldrb	r3, [r0, #0]

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 80888ec:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
 80888ee:	07da      	lsls	r2, r3, #31
 80888f0:	d51e      	bpl.n	8088930 <_ZN8FatCache4syncEv+0x48>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
 80888f2:	6840      	ldr	r0, [r0, #4]
 80888f4:	f104 060c 	add.w	r6, r4, #12
 80888f8:	6803      	ldr	r3, [r0, #0]
 80888fa:	4632      	mov	r2, r6
 80888fc:	685b      	ldr	r3, [r3, #4]
 80888fe:	68a1      	ldr	r1, [r4, #8]
 8088900:	4798      	blx	r3
 8088902:	4605      	mov	r5, r0
 8088904:	b908      	cbnz	r0, 808890a <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
 8088906:	2500      	movs	r5, #0
 8088908:	e013      	b.n	8088932 <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
 808890a:	7823      	ldrb	r3, [r4, #0]
 808890c:	079b      	lsls	r3, r3, #30
 808890e:	d404      	bmi.n	808891a <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
 8088910:	7823      	ldrb	r3, [r4, #0]
 8088912:	f023 0301 	bic.w	r3, r3, #1
 8088916:	7023      	strb	r3, [r4, #0]
 8088918:	e00b      	b.n	8088932 <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
 808891a:	6860      	ldr	r0, [r4, #4]
      if (!m_vol->writeBlock(lbn, m_block.data)) {
 808891c:	68a7      	ldr	r7, [r4, #8]
 808891e:	6901      	ldr	r1, [r0, #16]
 8088920:	6803      	ldr	r3, [r0, #0]
 8088922:	4632      	mov	r2, r6
 8088924:	685b      	ldr	r3, [r3, #4]
 8088926:	4439      	add	r1, r7
 8088928:	4798      	blx	r3
 808892a:	2800      	cmp	r0, #0
 808892c:	d1f0      	bne.n	8088910 <_ZN8FatCache4syncEv+0x28>
 808892e:	e7ea      	b.n	8088906 <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
 8088930:	2501      	movs	r5, #1

fail:
  return false;
}
 8088932:	4628      	mov	r0, r5
 8088934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08088936 <_ZN8FatCache4readEmh>:
 * <http://www.gnu.org/licenses/>.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8088936:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
 8088938:	6883      	ldr	r3, [r0, #8]
 * <http://www.gnu.org/licenses/>.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 808893a:	4604      	mov	r4, r0
  if (m_lbn != lbn) {
 808893c:	428b      	cmp	r3, r1
 * <http://www.gnu.org/licenses/>.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 808893e:	460e      	mov	r6, r1
 8088940:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
 8088942:	d014      	beq.n	808896e <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
 8088944:	f7ff ffd0 	bl	80888e8 <_ZN8FatCache4syncEv>
 8088948:	b908      	cbnz	r0, 808894e <_ZN8FatCache4readEmh+0x18>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:
  return 0;
 808894a:	2000      	movs	r0, #0
 808894c:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
 808894e:	076b      	lsls	r3, r5, #29
 8088950:	d503      	bpl.n	808895a <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
 8088952:	2300      	movs	r3, #0
 8088954:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
 8088956:	60a6      	str	r6, [r4, #8]
 8088958:	e009      	b.n	808896e <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
 808895a:	6860      	ldr	r0, [r4, #4]
 808895c:	f104 020c 	add.w	r2, r4, #12
 8088960:	6803      	ldr	r3, [r0, #0]
 8088962:	4631      	mov	r1, r6
 8088964:	681b      	ldr	r3, [r3, #0]
 8088966:	4798      	blx	r3
 8088968:	2800      	cmp	r0, #0
 808896a:	d1f2      	bne.n	8088952 <_ZN8FatCache4readEmh+0x1c>
 808896c:	e7ed      	b.n	808894a <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
 808896e:	4620      	mov	r0, r4
 8088970:	7823      	ldrb	r3, [r4, #0]
 8088972:	f005 0503 	and.w	r5, r5, #3
 8088976:	431d      	orrs	r5, r3
 8088978:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:
  return 0;
}
 808897c:	bd70      	pop	{r4, r5, r6, pc}

0808897e <_ZNK9FatVolume17clusterStartBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
 808897e:	7983      	ldrb	r3, [r0, #6]
 8088980:	3902      	subs	r1, #2
 8088982:	6940      	ldr	r0, [r0, #20]
 8088984:	4099      	lsls	r1, r3
}
 8088986:	4408      	add	r0, r1
 8088988:	4770      	bx	lr

0808898a <_ZN9FatVolume6fatGetEmPm>:
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 808898a:	b570      	push	{r4, r5, r6, lr}
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 808898c:	79c3      	ldrb	r3, [r0, #7]
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 808898e:	4605      	mov	r5, r0
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8088990:	2b20      	cmp	r3, #32
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 8088992:	460c      	mov	r4, r1
 8088994:	4616      	mov	r6, r2
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8088996:	d112      	bne.n	80889be <_ZN9FatVolume6fatGetEmPm+0x34>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
 8088998:	6981      	ldr	r1, [r0, #24]
 808899a:	2202      	movs	r2, #2
 808899c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80889a0:	f500 700d 	add.w	r0, r0, #564	; 0x234
 80889a4:	f7ff ffc7 	bl	8088936 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 80889a8:	b910      	cbnz	r0, 80889b0 <_ZN9FatVolume6fatGetEmPm+0x26>
  }
  *value = next;
  return 1;

fail:
  return -1;
 80889aa:	f04f 30ff 	mov.w	r0, #4294967295
 80889ae:	bd70      	pop	{r4, r5, r6, pc}
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
 80889b0:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 80889b4:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 80889b8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
 80889bc:	e00f      	b.n	80889de <_ZN9FatVolume6fatGetEmPm+0x54>
  }

  if (m_fatType == 16) {
 80889be:	2b10      	cmp	r3, #16
 80889c0:	d1f3      	bne.n	80889aa <_ZN9FatVolume6fatGetEmPm+0x20>
 80889c2:	6983      	ldr	r3, [r0, #24]
 80889c4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80889c8:	2202      	movs	r2, #2
 80889ca:	4419      	add	r1, r3
 80889cc:	f500 700d 	add.w	r0, r0, #564	; 0x234
 80889d0:	f7ff ffb1 	bl	8088936 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 80889d4:	2800      	cmp	r0, #0
 80889d6:	d0e8      	beq.n	80889aa <_ZN9FatVolume6fatGetEmPm+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
 80889d8:	b2e4      	uxtb	r4, r4
 80889da:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
 80889de:	69ea      	ldr	r2, [r5, #28]
 80889e0:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
 80889e2:	bf9a      	itte	ls
 80889e4:	6033      	strls	r3, [r6, #0]
  return 1;
 80889e6:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
 80889e8:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
 80889ea:	bd70      	pop	{r4, r5, r6, pc}

080889ec <_ZN9FatVolume6fatPutEmm>:
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 80889ec:	b538      	push	{r3, r4, r5, lr}
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 80889ee:	79c3      	ldrb	r3, [r0, #7]
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 80889f0:	460c      	mov	r4, r1
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 80889f2:	2b20      	cmp	r3, #32
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 80889f4:	4615      	mov	r5, r2
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 80889f6:	d10f      	bne.n	8088a18 <_ZN9FatVolume6fatPutEmm+0x2c>
 80889f8:	6981      	ldr	r1, [r0, #24]
 80889fa:	2203      	movs	r2, #3
 80889fc:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8088a00:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8088a04:	f7ff ff97 	bl	8088936 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 8088a08:	b908      	cbnz	r0, 8088a0e <_ZN9FatVolume6fatPutEmm+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
 8088a0a:	2000      	movs	r0, #0
 8088a0c:	bd38      	pop	{r3, r4, r5, pc}
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
 8088a0e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8088a12:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
 8088a16:	e00f      	b.n	8088a38 <_ZN9FatVolume6fatPutEmm+0x4c>
    return true;
  }

  if (m_fatType == 16) {
 8088a18:	2b10      	cmp	r3, #16
 8088a1a:	d1f6      	bne.n	8088a0a <_ZN9FatVolume6fatPutEmm+0x1e>
 8088a1c:	6983      	ldr	r3, [r0, #24]
 8088a1e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8088a22:	2203      	movs	r2, #3
 8088a24:	4419      	add	r1, r3
 8088a26:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8088a2a:	f7ff ff84 	bl	8088936 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 8088a2e:	2800      	cmp	r0, #0
 8088a30:	d0eb      	beq.n	8088a0a <_ZN9FatVolume6fatPutEmm+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
 8088a32:	b2e4      	uxtb	r4, r4
 8088a34:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
 8088a38:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
 8088a3a:	bd38      	pop	{r3, r4, r5, pc}

08088a3c <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 8088a3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8088a40:	4605      	mov	r5, r0
 8088a42:	4690      	mov	r8, r2
  uint32_t find = current ? current : m_allocSearchStart;
 8088a44:	460f      	mov	r7, r1
 8088a46:	b909      	cbnz	r1, 8088a4c <_ZN9FatVolume15allocateClusterEmPm+0x10>
 8088a48:	68c6      	ldr	r6, [r0, #12]
 8088a4a:	e000      	b.n	8088a4e <_ZN9FatVolume15allocateClusterEmPm+0x12>
 8088a4c:	460e      	mov	r6, r1
 8088a4e:	4634      	mov	r4, r6
  uint32_t start = find;
  while (1) {
    find++;
    // If at end of FAT go to beginning of FAT.
    if (find > m_lastCluster) {
 8088a50:	69eb      	ldr	r3, [r5, #28]
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
  uint32_t find = current ? current : m_allocSearchStart;
  uint32_t start = find;
  while (1) {
    find++;
 8088a52:	3401      	adds	r4, #1
    // If at end of FAT go to beginning of FAT.
    if (find > m_lastCluster) {
      find = 2;
 8088a54:	429c      	cmp	r4, r3
 8088a56:	bf88      	it	hi
 8088a58:	2402      	movhi	r4, #2
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
 8088a5a:	aa01      	add	r2, sp, #4
 8088a5c:	4621      	mov	r1, r4
 8088a5e:	4628      	mov	r0, r5
 8088a60:	f7ff ff93 	bl	808898a <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 8088a64:	2800      	cmp	r0, #0
 8088a66:	db0d      	blt.n	8088a84 <_ZN9FatVolume15allocateClusterEmPm+0x48>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
 8088a68:	d001      	beq.n	8088a6e <_ZN9FatVolume15allocateClusterEmPm+0x32>
 8088a6a:	9b01      	ldr	r3, [sp, #4]
 8088a6c:	b113      	cbz	r3, 8088a74 <_ZN9FatVolume15allocateClusterEmPm+0x38>
      break;
    }
    if (find == start) {
 8088a6e:	42b4      	cmp	r4, r6
 8088a70:	d1ee      	bne.n	8088a50 <_ZN9FatVolume15allocateClusterEmPm+0x14>
 8088a72:	e007      	b.n	8088a84 <_ZN9FatVolume15allocateClusterEmPm+0x48>
  }
  uint32_t clusterStartBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
 8088a74:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8088a78:	4621      	mov	r1, r4
 8088a7a:	4628      	mov	r0, r5
 8088a7c:	f7ff ffb6 	bl	80889ec <_ZN9FatVolume6fatPutEmm>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // mark end of chain
  if (!fatPutEOC(find)) {
 8088a80:	4606      	mov	r6, r0
 8088a82:	b908      	cbnz	r0, 8088a88 <_ZN9FatVolume15allocateClusterEmPm+0x4c>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
 8088a84:	2600      	movs	r6, #0
 8088a86:	e010      	b.n	8088aaa <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // mark end of chain
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
 8088a88:	b137      	cbz	r7, 8088a98 <_ZN9FatVolume15allocateClusterEmPm+0x5c>
    // link clusters
    if (!fatPut(current, find)) {
 8088a8a:	4622      	mov	r2, r4
 8088a8c:	4639      	mov	r1, r7
 8088a8e:	4628      	mov	r0, r5
 8088a90:	f7ff ffac 	bl	80889ec <_ZN9FatVolume6fatPutEmm>
 8088a94:	b908      	cbnz	r0, 8088a9a <_ZN9FatVolume15allocateClusterEmPm+0x5e>
 8088a96:	e7f5      	b.n	8088a84 <_ZN9FatVolume15allocateClusterEmPm+0x48>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // Remember place for search start.
    m_allocSearchStart = find;
 8088a98:	60ec      	str	r4, [r5, #12]
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
 8088a9a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8088a9c:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
 8088a9e:	bfa4      	itt	ge
 8088aa0:	f103 33ff 	addge.w	r3, r3, #4294967295
 8088aa4:	626b      	strge	r3, [r5, #36]	; 0x24
  }
  updateFreeClusterCount(-1);
  *next = find;
 8088aa6:	f8c8 4000 	str.w	r4, [r8]
  return true;

fail:
  return false;
}
 8088aaa:	4630      	mov	r0, r6
 8088aac:	b002      	add	sp, #8
 8088aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08088ab2 <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
 8088ab2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8088ab4:	4604      	mov	r4, r0
 8088ab6:	460d      	mov	r5, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
 8088ab8:	aa01      	add	r2, sp, #4
 8088aba:	4629      	mov	r1, r5
 8088abc:	4620      	mov	r0, r4
 8088abe:	f7ff ff64 	bl	808898a <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 8088ac2:	1e06      	subs	r6, r0, #0
 8088ac4:	da01      	bge.n	8088aca <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
 8088ac6:	2000      	movs	r0, #0
 8088ac8:	e012      	b.n	8088af0 <_ZN9FatVolume9freeChainEm+0x3e>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
 8088aca:	2200      	movs	r2, #0
 8088acc:	4629      	mov	r1, r5
 8088ace:	4620      	mov	r0, r4
 8088ad0:	f7ff ff8c 	bl	80889ec <_ZN9FatVolume6fatPutEmm>
 8088ad4:	2800      	cmp	r0, #0
 8088ad6:	d0f6      	beq.n	8088ac6 <_ZN9FatVolume9freeChainEm+0x14>
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
 8088ad8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8088ada:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
 8088adc:	bfa4      	itt	ge
 8088ade:	3301      	addge	r3, #1
 8088ae0:	6263      	strge	r3, [r4, #36]	; 0x24
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster < m_allocSearchStart) {
 8088ae2:	68e3      	ldr	r3, [r4, #12]
 8088ae4:	429d      	cmp	r5, r3
      m_allocSearchStart = cluster;
 8088ae6:	bf38      	it	cc
 8088ae8:	60e5      	strcc	r5, [r4, #12]
    }
    cluster = next;
 8088aea:	9d01      	ldr	r5, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
 8088aec:	2e00      	cmp	r6, #0
 8088aee:	d1e3      	bne.n	8088ab8 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
 8088af0:	b002      	add	sp, #8
 8088af2:	bd70      	pop	{r4, r5, r6, pc}

08088af4 <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
 8088af4:	b570      	push	{r4, r5, r6, lr}
 8088af6:	4604      	mov	r4, r0
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
 8088af8:	2301      	movs	r3, #1
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
 8088afa:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
 8088afc:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 8088afe:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
 8088b02:	71c2      	strb	r2, [r0, #7]
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE

  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
 8088b04:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
 8088b06:	62e0      	str	r0, [r4, #44]	; 0x2c
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8088b08:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 8088b0c:	6303      	str	r3, [r0, #48]	; 0x30
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
 8088b0e:	f8c4 0238 	str.w	r0, [r4, #568]	; 0x238
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8088b12:	f880 2234 	strb.w	r2, [r0, #564]	; 0x234
    m_lbn = 0XFFFFFFFF;
 8088b16:	f8c0 323c 	str.w	r3, [r0, #572]	; 0x23c
 8088b1a:	b1a1      	cbz	r1, 8088b46 <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
 8088b1c:	2904      	cmp	r1, #4
 8088b1e:	d860      	bhi.n	8088be2 <_ZN9FatVolume4initEh+0xee>
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8088b20:	4611      	mov	r1, r2
 8088b22:	3028      	adds	r0, #40	; 0x28
 8088b24:	f7ff ff07 	bl	8088936 <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8088b28:	2800      	cmp	r0, #0
 8088b2a:	d05a      	beq.n	8088be2 <_ZN9FatVolume4initEh+0xee>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
 8088b2c:	eb00 1305 	add.w	r3, r0, r5, lsl #4
 8088b30:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 8088b34:	065b      	lsls	r3, r3, #25
 8088b36:	d154      	bne.n	8088be2 <_ZN9FatVolume4initEh+0xee>
 8088b38:	351b      	adds	r5, #27
 8088b3a:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 8088b3e:	f8d5 5006 	ldr.w	r5, [r5, #6]
 8088b42:	2d00      	cmp	r5, #0
 8088b44:	d04d      	beq.n	8088be2 <_ZN9FatVolume4initEh+0xee>
 8088b46:	2200      	movs	r2, #0
 8088b48:	4629      	mov	r1, r5
 8088b4a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8088b4e:	f7ff fef2 	bl	8088936 <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
 8088b52:	2800      	cmp	r0, #0
 8088b54:	d045      	beq.n	8088be2 <_ZN9FatVolume4initEh+0xee>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
 8088b56:	f8b0 300b 	ldrh.w	r3, [r0, #11]
 8088b5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8088b5e:	d140      	bne.n	8088be2 <_ZN9FatVolume4initEh+0xee>
 8088b60:	7c03      	ldrb	r3, [r0, #16]
 8088b62:	2b02      	cmp	r3, #2
 8088b64:	d13d      	bne.n	8088be2 <_ZN9FatVolume4initEh+0xee>
      fbs->fatCount != 2 ||
 8088b66:	89c3      	ldrh	r3, [r0, #14]
 8088b68:	2b00      	cmp	r3, #0
 8088b6a:	d03a      	beq.n	8088be2 <_ZN9FatVolume4initEh+0xee>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
 8088b6c:	7b41      	ldrb	r1, [r0, #13]
  m_clusterBlockMask = m_blocksPerCluster - 1;

  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
 8088b6e:	2609      	movs	r6, #9
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
 8088b70:	1e4b      	subs	r3, r1, #1
 8088b72:	7163      	strb	r3, [r4, #5]

  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
 8088b74:	2300      	movs	r3, #0
 8088b76:	71a3      	strb	r3, [r4, #6]
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
 8088b78:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;

  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8088b7a:	2301      	movs	r3, #1
 8088b7c:	428b      	cmp	r3, r1
 8088b7e:	d007      	beq.n	8088b90 <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
 8088b80:	3e01      	subs	r6, #1
 8088b82:	d02e      	beq.n	8088be2 <_ZN9FatVolume4initEh+0xee>
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;

  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8088b84:	79a2      	ldrb	r2, [r4, #6]
 8088b86:	005b      	lsls	r3, r3, #1
 8088b88:	3201      	adds	r2, #1
 8088b8a:	b2db      	uxtb	r3, r3
 8088b8c:	71a2      	strb	r2, [r4, #6]
 8088b8e:	e7f5      	b.n	8088b7c <_ZN9FatVolume4initEh+0x88>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_blocksPerFat = fbs->sectorsPerFat16 ?
 8088b90:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
 8088b92:	b902      	cbnz	r2, 8088b96 <_ZN9FatVolume4initEh+0xa2>
 8088b94:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8088b96:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
 8088b98:	89c6      	ldrh	r6, [r0, #14]
 8088b9a:	442e      	add	r6, r5
 8088b9c:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 8088b9e:	f8b0 3011 	ldrh.w	r3, [r0, #17]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 8088ba2:	eb06 0142 	add.w	r1, r6, r2, lsl #1
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 8088ba6:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 8088ba8:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
 8088baa:	f8b0 2011 	ldrh.w	r2, [r0, #17]
 8088bae:	0152      	lsls	r2, r2, #5
 8088bb0:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
 8088bb4:	eb01 2262 	add.w	r2, r1, r2, asr #9
 8088bb8:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
 8088bba:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
 8088bbe:	b903      	cbnz	r3, 8088bc2 <_ZN9FatVolume4initEh+0xce>
 8088bc0:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
 8088bc2:	1aad      	subs	r5, r5, r2
 8088bc4:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
 8088bc6:	79a5      	ldrb	r5, [r4, #6]
 8088bc8:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
 8088bcc:	1c6b      	adds	r3, r5, #1
 8088bce:	61e3      	str	r3, [r4, #28]
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
#if MAINTAIN_FREE_CLUSTER_COUNT
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
 8088bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8088bd4:	6263      	str	r3, [r4, #36]	; 0x24

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);

  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
 8088bd6:	f640 73f4 	movw	r3, #4084	; 0xff4
 8088bda:	429d      	cmp	r5, r3
 8088bdc:	d803      	bhi.n	8088be6 <_ZN9FatVolume4initEh+0xf2>
    m_fatType = 12;
 8088bde:	230c      	movs	r3, #12
 8088be0:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
 8088be2:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
 8088be4:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
 8088be6:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8088bea:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
 8088bec:	bf89      	itett	hi
 8088bee:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
 8088bf0:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
 8088bf2:	6223      	strhi	r3, [r4, #32]
    m_fatType = 32;
 8088bf4:	2320      	movhi	r3, #32
 8088bf6:	71e3      	strb	r3, [r4, #7]
  }
  return true;
 8088bf8:	2001      	movs	r0, #1

fail:
  return false;
}
 8088bfa:	bd70      	pop	{r4, r5, r6, pc}

08088bfc <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
 8088bfc:	f001 bb50 	b.w	808a2a0 <HAL_Pin_Map>

08088c00 <_GLOBAL__sub_I__ZN9SdFatBase9errorHaltEP5Print>:
 8088c00:	f001 bb4e 	b.w	808a2a0 <HAL_Pin_Map>

08088c04 <_ZL10delay_msecm>:
  return reply;
}


static void delay_msec(uint32_t ms){
  delay(ms);
 8088c04:	f002 bf92 	b.w	808bb2c <delay>

08088c08 <_ZL9i2c_writehhPht>:
/**************************************************************************/
/*!
    @brief  Writes 8 bit values over I2C
*/
/**************************************************************************/
int8_t i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8088c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8088c0a:	4607      	mov	r7, r0
 8088c0c:	4614      	mov	r4, r2
 8088c0e:	461d      	mov	r5, r3
 8088c10:	460e      	mov	r6, r1
#ifdef BME680_DEBUG
  Serial.print("\tI2C $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif
  Wire.beginTransmission((uint8_t)dev_id);
 8088c12:	f004 f86f 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8088c16:	4639      	mov	r1, r7
 8088c18:	f003 fe3e 	bl	808c898 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((uint8_t)reg_addr);
 8088c1c:	f004 f86a 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8088c20:	6803      	ldr	r3, [r0, #0]
 8088c22:	4631      	mov	r1, r6
 8088c24:	689b      	ldr	r3, [r3, #8]
 8088c26:	4798      	blx	r3
 8088c28:	4425      	add	r5, r4
  while (len--) {
 8088c2a:	42ac      	cmp	r4, r5
 8088c2c:	d007      	beq.n	8088c3e <_ZL9i2c_writehhPht+0x36>
    Wire.write(*reg_data);
 8088c2e:	f004 f861 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8088c32:	6803      	ldr	r3, [r0, #0]
 8088c34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8088c38:	689b      	ldr	r3, [r3, #8]
 8088c3a:	4798      	blx	r3
#ifdef BME680_DEBUG
  Serial.print("\tI2C $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif
  Wire.beginTransmission((uint8_t)dev_id);
  Wire.write((uint8_t)reg_addr);
  while (len--) {
 8088c3c:	e7f5      	b.n	8088c2a <_ZL9i2c_writehhPht+0x22>
#ifdef BME680_DEBUG
    Serial.print("0x"); Serial.print(*reg_data, HEX); Serial.print(", ");
#endif
    reg_data++;
  }
  Wire.endTransmission();
 8088c3e:	f004 f859 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8088c42:	f003 fe34 	bl	808c8ae <_ZN7TwoWire15endTransmissionEv>
#ifdef BME680_DEBUG
  Serial.println("");
#endif
  return 0;
}
 8088c46:	2000      	movs	r0, #0
 8088c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08088c4c <_ZL12spi_transferh>:
#endif
  return 0;
}


static uint8_t spi_transfer(uint8_t x) {
 8088c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (_BME680_SoftwareSPI_SCK == -1)
 8088c50:	4d1b      	ldr	r5, [pc, #108]	; (8088cc0 <_ZL12spi_transferh+0x74>)
#endif
  return 0;
}


static uint8_t spi_transfer(uint8_t x) {
 8088c52:	4680      	mov	r8, r0
  if (_BME680_SoftwareSPI_SCK == -1)
 8088c54:	f995 3000 	ldrsb.w	r3, [r5]
 8088c58:	3301      	adds	r3, #1
 8088c5a:	d105      	bne.n	8088c68 <_ZL12spi_transferh+0x1c>
    return SPI.transfer(x);
 8088c5c:	4601      	mov	r1, r0
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
      reply |= 1;
  }
  return reply;
}
 8088c5e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
}


static uint8_t spi_transfer(uint8_t x) {
  if (_BME680_SoftwareSPI_SCK == -1)
    return SPI.transfer(x);
 8088c62:	4818      	ldr	r0, [pc, #96]	; (8088cc4 <_ZL12spi_transferh+0x78>)
 8088c64:	f002 b82e 	b.w	808acc4 <_ZN8SPIClass8transferEh>
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
 8088c68:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8088cc8 <_ZL12spi_transferh+0x7c>
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
 8088c6c:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8088ccc <_ZL12spi_transferh+0x80>
 8088c70:	2607      	movs	r6, #7
 8088c72:	2400      	movs	r4, #0
  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
 8088c74:	f995 0000 	ldrsb.w	r0, [r5]
 8088c78:	2100      	movs	r1, #0
 8088c7a:	b280      	uxth	r0, r0
 8088c7c:	f003 ff9d 	bl	808cbba <digitalWrite>
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
 8088c80:	2701      	movs	r7, #1
 8088c82:	f999 0000 	ldrsb.w	r0, [r9]
 8088c86:	fa07 f106 	lsl.w	r1, r7, r6
 8088c8a:	ea01 0108 	and.w	r1, r1, r8
 8088c8e:	b280      	uxth	r0, r0
 8088c90:	f003 ff93 	bl	808cbba <digitalWrite>
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
 8088c94:	f995 0000 	ldrsb.w	r0, [r5]
 8088c98:	4639      	mov	r1, r7
 8088c9a:	b280      	uxth	r0, r0
 8088c9c:	f003 ff8d 	bl	808cbba <digitalWrite>
    if (digitalRead(_BME680_SoftwareSPI_MISO))
 8088ca0:	f99a 0000 	ldrsb.w	r0, [sl]

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
 8088ca4:	0064      	lsls	r4, r4, #1
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
 8088ca6:	b280      	uxth	r0, r0

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
 8088ca8:	b2e4      	uxtb	r4, r4
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
 8088caa:	f003 ff9f 	bl	808cbec <digitalRead>
 8088cae:	b100      	cbz	r0, 8088cb2 <_ZL12spi_transferh+0x66>
      reply |= 1;
 8088cb0:	433c      	orrs	r4, r7
    return SPI.transfer(x);

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
 8088cb2:	f116 36ff 	adds.w	r6, r6, #4294967295
 8088cb6:	d2dd      	bcs.n	8088c74 <_ZL12spi_transferh+0x28>
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
      reply |= 1;
  }
  return reply;
}
 8088cb8:	4620      	mov	r0, r4
 8088cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8088cbe:	bf00      	nop
 8088cc0:	20000be1 	.word	0x20000be1
 8088cc4:	200011e0 	.word	0x200011e0
 8088cc8:	20000be2 	.word	0x20000be2
 8088ccc:	20000be0 	.word	0x20000be0

08088cd0 <_ZL9spi_writehhPht>:
/**************************************************************************/
/*!
    @brief  Writes 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_write(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8088cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8088cd2:	460f      	mov	r7, r1
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif

  digitalWrite(cspin, LOW);
 8088cd4:	2100      	movs	r1, #0
/**************************************************************************/
/*!
    @brief  Writes 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_write(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8088cd6:	461d      	mov	r5, r3
 8088cd8:	4614      	mov	r4, r2
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif

  digitalWrite(cspin, LOW);
 8088cda:	4606      	mov	r6, r0
 8088cdc:	f003 ff6d 	bl	808cbba <digitalWrite>

  // If hardware SPI we should use transactions!
  if (_BME680_SoftwareSPI_SCK == -1) {
 8088ce0:	4b12      	ldr	r3, [pc, #72]	; (8088d2c <_ZL9spi_writehhPht+0x5c>)
 8088ce2:	f993 3000 	ldrsb.w	r3, [r3]
 8088ce6:	3301      	adds	r3, #1
 8088ce8:	d10e      	bne.n	8088d08 <_ZL9spi_writehhPht+0x38>
    SPI.begin();
 8088cea:	4811      	ldr	r0, [pc, #68]	; (8088d30 <_ZL9spi_writehhPht+0x60>)
 8088cec:	f001 ff7e 	bl	808abec <_ZN8SPIClass5beginEv>
    SPI.setClockDivider(BME680_DEFAULT_SPIFREQ);
 8088cf0:	2140      	movs	r1, #64	; 0x40
 8088cf2:	480f      	ldr	r0, [pc, #60]	; (8088d30 <_ZL9spi_writehhPht+0x60>)
 8088cf4:	f001 ffd2 	bl	808ac9c <_ZN8SPIClass15setClockDividerEh>
    SPI.setBitOrder(MSBFIRST);
 8088cf8:	2101      	movs	r1, #1
 8088cfa:	480d      	ldr	r0, [pc, #52]	; (8088d30 <_ZL9spi_writehhPht+0x60>)
 8088cfc:	f001 ff81 	bl	808ac02 <_ZN8SPIClass11setBitOrderEh>
    SPI.setDataMode(SPI_MODE0);
 8088d00:	2100      	movs	r1, #0
 8088d02:	480b      	ldr	r0, [pc, #44]	; (8088d30 <_ZL9spi_writehhPht+0x60>)
 8088d04:	f001 ff80 	bl	808ac08 <_ZN8SPIClass11setDataModeEh>
    // SPI.beginTransaction(SPISettings(BME680_DEFAULT_SPIFREQ, MSBFIRST, SPI_MODE0));
  }

  spi_transfer(reg_addr);
 8088d08:	4638      	mov	r0, r7
 8088d0a:	f7ff ff9f 	bl	8088c4c <_ZL12spi_transferh>
 8088d0e:	4425      	add	r5, r4
  while (len--) {
 8088d10:	42ac      	cmp	r4, r5
 8088d12:	d004      	beq.n	8088d1e <_ZL9spi_writehhPht+0x4e>
    spi_transfer(*reg_data);
 8088d14:	f814 0b01 	ldrb.w	r0, [r4], #1
 8088d18:	f7ff ff98 	bl	8088c4c <_ZL12spi_transferh>
    SPI.setDataMode(SPI_MODE0);
    // SPI.beginTransaction(SPISettings(BME680_DEFAULT_SPIFREQ, MSBFIRST, SPI_MODE0));
  }

  spi_transfer(reg_addr);
  while (len--) {
 8088d1c:	e7f8      	b.n	8088d10 <_ZL9spi_writehhPht+0x40>

  if (_BME680_SoftwareSPI_SCK == -1) {
    //SPI.endTransaction();
  }

  digitalWrite(cspin, HIGH);
 8088d1e:	4630      	mov	r0, r6
 8088d20:	2101      	movs	r1, #1
 8088d22:	f003 ff4a 	bl	808cbba <digitalWrite>

#ifdef BME680_DEBUG
  Serial.println("");
#endif
  return 0;
}
 8088d26:	2000      	movs	r0, #0
 8088d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8088d2a:	bf00      	nop
 8088d2c:	20000be1 	.word	0x20000be1
 8088d30:	200011e0 	.word	0x200011e0

08088d34 <_ZL8spi_readhhPht>:
/**************************************************************************/
/*!
    @brief  Reads 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_read(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8088d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8088d36:	460f      	mov	r7, r1
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" => ");
#endif

  digitalWrite(cspin, LOW);
 8088d38:	2100      	movs	r1, #0
/**************************************************************************/
/*!
    @brief  Reads 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_read(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8088d3a:	461d      	mov	r5, r3
 8088d3c:	4614      	mov	r4, r2
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" => ");
#endif

  digitalWrite(cspin, LOW);
 8088d3e:	4606      	mov	r6, r0
 8088d40:	f003 ff3b 	bl	808cbba <digitalWrite>

  // If hardware SPI we should use transactions!
  if (_BME680_SoftwareSPI_SCK == -1) {
 8088d44:	4b12      	ldr	r3, [pc, #72]	; (8088d90 <_ZL8spi_readhhPht+0x5c>)
 8088d46:	f993 3000 	ldrsb.w	r3, [r3]
 8088d4a:	3301      	adds	r3, #1
 8088d4c:	d10e      	bne.n	8088d6c <_ZL8spi_readhhPht+0x38>
    SPI.begin();
 8088d4e:	4811      	ldr	r0, [pc, #68]	; (8088d94 <_ZL8spi_readhhPht+0x60>)
 8088d50:	f001 ff4c 	bl	808abec <_ZN8SPIClass5beginEv>
    SPI.setClockDivider(BME680_DEFAULT_SPIFREQ);
 8088d54:	2140      	movs	r1, #64	; 0x40
 8088d56:	480f      	ldr	r0, [pc, #60]	; (8088d94 <_ZL8spi_readhhPht+0x60>)
 8088d58:	f001 ffa0 	bl	808ac9c <_ZN8SPIClass15setClockDividerEh>
    SPI.setBitOrder(MSBFIRST);
 8088d5c:	2101      	movs	r1, #1
 8088d5e:	480d      	ldr	r0, [pc, #52]	; (8088d94 <_ZL8spi_readhhPht+0x60>)
 8088d60:	f001 ff4f 	bl	808ac02 <_ZN8SPIClass11setBitOrderEh>
    SPI.setDataMode(SPI_MODE0);
 8088d64:	2100      	movs	r1, #0
 8088d66:	480b      	ldr	r0, [pc, #44]	; (8088d94 <_ZL8spi_readhhPht+0x60>)
 8088d68:	f001 ff4e 	bl	808ac08 <_ZN8SPIClass11setDataModeEh>
    // SPI.beginTransaction(SPISettings(BME680_DEFAULT_SPIFREQ, MSBFIRST, SPI_MODE0));
  }

  spi_transfer(reg_addr);
 8088d6c:	4638      	mov	r0, r7
 8088d6e:	f7ff ff6d 	bl	8088c4c <_ZL12spi_transferh>
 8088d72:	4425      	add	r5, r4

  while (len--) {
 8088d74:	42ac      	cmp	r4, r5
 8088d76:	d005      	beq.n	8088d84 <_ZL8spi_readhhPht+0x50>
    *reg_data = spi_transfer(0x00);
 8088d78:	2000      	movs	r0, #0
 8088d7a:	f7ff ff67 	bl	8088c4c <_ZL12spi_transferh>
 8088d7e:	f804 0b01 	strb.w	r0, [r4], #1
    // SPI.beginTransaction(SPISettings(BME680_DEFAULT_SPIFREQ, MSBFIRST, SPI_MODE0));
  }

  spi_transfer(reg_addr);

  while (len--) {
 8088d82:	e7f7      	b.n	8088d74 <_ZL8spi_readhhPht+0x40>

  if (_BME680_SoftwareSPI_SCK == -1) {
    //SPI.endTransaction();
  }

  digitalWrite(cspin, HIGH);
 8088d84:	4630      	mov	r0, r6
 8088d86:	2101      	movs	r1, #1
 8088d88:	f003 ff17 	bl	808cbba <digitalWrite>

#ifdef BME680_DEBUG
  Serial.println("");
#endif
  return 0;
}
 8088d8c:	2000      	movs	r0, #0
 8088d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8088d90:	20000be1 	.word	0x20000be1
 8088d94:	200011e0 	.word	0x200011e0

08088d98 <_ZL8i2c_readhhPht>:
/**************************************************************************/
/*!
    @brief  Reads 8 bit values over I2C
*/
/**************************************************************************/
int8_t i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8088d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8088d9a:	4604      	mov	r4, r0
 8088d9c:	4615      	mov	r5, r2
 8088d9e:	461e      	mov	r6, r3
 8088da0:	460f      	mov	r7, r1
#ifdef BME680_DEBUG
  Serial.print("\tI2C $"); Serial.print(reg_addr, HEX); Serial.print(" => ");
#endif

  Wire.beginTransmission((uint8_t)dev_id);
 8088da2:	f003 ffa7 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8088da6:	4621      	mov	r1, r4
 8088da8:	f003 fd76 	bl	808c898 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((uint8_t)reg_addr);
 8088dac:	f003 ffa2 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8088db0:	6803      	ldr	r3, [r0, #0]
 8088db2:	4639      	mov	r1, r7
 8088db4:	689b      	ldr	r3, [r3, #8]
 8088db6:	4798      	blx	r3
  Wire.endTransmission();
 8088db8:	f003 ff9c 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8088dbc:	f003 fd77 	bl	808c8ae <_ZN7TwoWire15endTransmissionEv>
  if (len != Wire.requestFrom((uint8_t)dev_id, (byte)len)) {
 8088dc0:	f003 ff98 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8088dc4:	4621      	mov	r1, r4
 8088dc6:	b2f2      	uxtb	r2, r6
 8088dc8:	f003 fd59 	bl	808c87e <_ZN7TwoWire11requestFromEhh>
 8088dcc:	b284      	uxth	r4, r0
 8088dce:	42a6      	cmp	r6, r4
 8088dd0:	d10d      	bne.n	8088dee <_ZL8i2c_readhhPht+0x56>
#ifdef BME680_DEBUG
    Serial.print("Failed to read "); Serial.print(len); Serial.print(" bytes from "); Serial.println(dev_id, HEX);
#endif
    return 1;
  }
  while (len--) {
 8088dd2:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8088dd6:	3c01      	subs	r4, #1
 8088dd8:	b2a4      	uxth	r4, r4
 8088dda:	42b4      	cmp	r4, r6
 8088ddc:	d009      	beq.n	8088df2 <_ZL8i2c_readhhPht+0x5a>
    *reg_data = (uint8_t)Wire.read();
 8088dde:	f003 ff89 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8088de2:	6803      	ldr	r3, [r0, #0]
 8088de4:	695b      	ldr	r3, [r3, #20]
 8088de6:	4798      	blx	r3
 8088de8:	f805 0b01 	strb.w	r0, [r5], #1
 8088dec:	e7f3      	b.n	8088dd6 <_ZL8i2c_readhhPht+0x3e>
  Wire.endTransmission();
  if (len != Wire.requestFrom((uint8_t)dev_id, (byte)len)) {
#ifdef BME680_DEBUG
    Serial.print("Failed to read "); Serial.print(len); Serial.print(" bytes from "); Serial.println(dev_id, HEX);
#endif
    return 1;
 8088dee:	2001      	movs	r0, #1
 8088df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  while (len--) {
 8088df2:	2000      	movs	r0, #0
  }
#ifdef BME680_DEBUG
  Serial.println("");
#endif
  return 0;
}
 8088df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08088df8 <_ZN15Adafruit_BME680C1Ea>:
    @brief  Instantiates sensor with Hardware SPI or I2C.
    @param  cspin SPI chip select. If not passed in, I2C will be used
*/
/**************************************************************************/
Adafruit_BME680::Adafruit_BME680(int8_t cspin)
  : _cs(cspin)
 8088df8:	7701      	strb	r1, [r0, #28]
{
  _BME680_SoftwareSPI_MOSI = -1;
 8088dfa:	4907      	ldr	r1, [pc, #28]	; (8088e18 <_ZN15Adafruit_BME680C1Ea+0x20>)
 8088dfc:	22ff      	movs	r2, #255	; 0xff
 8088dfe:	700a      	strb	r2, [r1, #0]
  _BME680_SoftwareSPI_MISO = -1;
 8088e00:	4906      	ldr	r1, [pc, #24]	; (8088e1c <_ZN15Adafruit_BME680C1Ea+0x24>)
 8088e02:	700a      	strb	r2, [r1, #0]
  _BME680_SoftwareSPI_SCK = -1;
 8088e04:	4906      	ldr	r1, [pc, #24]	; (8088e20 <_ZN15Adafruit_BME680C1Ea+0x28>)
 8088e06:	700a      	strb	r2, [r1, #0]
  _filterEnabled = _tempEnabled = _humEnabled = _presEnabled = _gasEnabled = false;
 8088e08:	2200      	movs	r2, #0
 8088e0a:	7502      	strb	r2, [r0, #20]
 8088e0c:	74c2      	strb	r2, [r0, #19]
 8088e0e:	7482      	strb	r2, [r0, #18]
 8088e10:	7442      	strb	r2, [r0, #17]
 8088e12:	7402      	strb	r2, [r0, #16]
}
 8088e14:	4770      	bx	lr
 8088e16:	bf00      	nop
 8088e18:	20000be2 	.word	0x20000be2
 8088e1c:	20000be0 	.word	0x20000be0
 8088e20:	20000be1 	.word	0x20000be1

08088e24 <_ZN15Adafruit_BME6805beginEh>:

    @param  addr Optional parameter for the I2C address of BME680. Default is 0x77
    @return True on sensor initialization success. False on failure.
*/
/**************************************************************************/
bool Adafruit_BME680::begin(uint8_t addr) {
 8088e24:	b538      	push	{r3, r4, r5, lr}
 8088e26:	4604      	mov	r4, r0
  _i2caddr = addr;
 8088e28:	7561      	strb	r1, [r4, #21]

  if (_cs == -1) {
 8088e2a:	f990 001c 	ldrsb.w	r0, [r0, #28]

    @param  addr Optional parameter for the I2C address of BME680. Default is 0x77
    @return True on sensor initialization success. False on failure.
*/
/**************************************************************************/
bool Adafruit_BME680::begin(uint8_t addr) {
 8088e2e:	460d      	mov	r5, r1
  _i2caddr = addr;

  if (_cs == -1) {
 8088e30:	1c42      	adds	r2, r0, #1
 8088e32:	d10c      	bne.n	8088e4e <_ZN15Adafruit_BME6805beginEh+0x2a>
    // i2c
    Wire.begin();
 8088e34:	f003 ff5e 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8088e38:	f003 fd12 	bl	808c860 <_ZN7TwoWire5beginEv>

    gas_sensor.dev_id = addr;
    gas_sensor.intf = BME680_I2C_INTF;
 8088e3c:	2301      	movs	r3, #1
 8088e3e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    gas_sensor.read = &i2c_read;
 8088e42:	4b2d      	ldr	r3, [pc, #180]	; (8088ef8 <_ZN15Adafruit_BME6805beginEh+0xd4>)

  if (_cs == -1) {
    // i2c
    Wire.begin();

    gas_sensor.dev_id = addr;
 8088e44:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
    gas_sensor.intf = BME680_I2C_INTF;
    gas_sensor.read = &i2c_read;
 8088e48:	66a3      	str	r3, [r4, #104]	; 0x68
    gas_sensor.write = &i2c_write;
 8088e4a:	4b2c      	ldr	r3, [pc, #176]	; (8088efc <_ZN15Adafruit_BME6805beginEh+0xd8>)
 8088e4c:	e02d      	b.n	8088eaa <_ZN15Adafruit_BME6805beginEh+0x86>
  } else {
    digitalWrite(_cs, HIGH);
 8088e4e:	2101      	movs	r1, #1
 8088e50:	b280      	uxth	r0, r0
 8088e52:	f003 feb2 	bl	808cbba <digitalWrite>
    pinMode(_cs, OUTPUT);
 8088e56:	f994 001c 	ldrsb.w	r0, [r4, #28]
 8088e5a:	2101      	movs	r1, #1
 8088e5c:	b280      	uxth	r0, r0
 8088e5e:	f003 fe9b 	bl	808cb98 <pinMode>

    if (_BME680_SoftwareSPI_SCK == -1) {
 8088e62:	4b27      	ldr	r3, [pc, #156]	; (8088f00 <_ZN15Adafruit_BME6805beginEh+0xdc>)
 8088e64:	f993 0000 	ldrsb.w	r0, [r3]
 8088e68:	1c43      	adds	r3, r0, #1
 8088e6a:	d103      	bne.n	8088e74 <_ZN15Adafruit_BME6805beginEh+0x50>
      // hardware SPI
      SPI.begin();
 8088e6c:	4825      	ldr	r0, [pc, #148]	; (8088f04 <_ZN15Adafruit_BME6805beginEh+0xe0>)
 8088e6e:	f001 febd 	bl	808abec <_ZN8SPIClass5beginEv>
 8088e72:	e011      	b.n	8088e98 <_ZN15Adafruit_BME6805beginEh+0x74>
    } else {
      // software SPI
      pinMode(_BME680_SoftwareSPI_SCK, OUTPUT);
 8088e74:	2101      	movs	r1, #1
 8088e76:	b280      	uxth	r0, r0
 8088e78:	f003 fe8e 	bl	808cb98 <pinMode>
      pinMode(_BME680_SoftwareSPI_MOSI, OUTPUT);
 8088e7c:	4b22      	ldr	r3, [pc, #136]	; (8088f08 <_ZN15Adafruit_BME6805beginEh+0xe4>)
 8088e7e:	2101      	movs	r1, #1
 8088e80:	f993 0000 	ldrsb.w	r0, [r3]
 8088e84:	b280      	uxth	r0, r0
 8088e86:	f003 fe87 	bl	808cb98 <pinMode>
      pinMode(_BME680_SoftwareSPI_MISO, INPUT);
 8088e8a:	4b20      	ldr	r3, [pc, #128]	; (8088f0c <_ZN15Adafruit_BME6805beginEh+0xe8>)
 8088e8c:	2100      	movs	r1, #0
 8088e8e:	f993 0000 	ldrsb.w	r0, [r3]
 8088e92:	b280      	uxth	r0, r0
 8088e94:	f003 fe80 	bl	808cb98 <pinMode>
    }

    gas_sensor.dev_id = _cs;
 8088e98:	7f23      	ldrb	r3, [r4, #28]
 8088e9a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    gas_sensor.intf = BME680_SPI_INTF;
 8088e9e:	2300      	movs	r3, #0
 8088ea0:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    gas_sensor.read = &spi_read;
 8088ea4:	4b1a      	ldr	r3, [pc, #104]	; (8088f10 <_ZN15Adafruit_BME6805beginEh+0xec>)
 8088ea6:	66a3      	str	r3, [r4, #104]	; 0x68
    gas_sensor.write = &spi_write;
 8088ea8:	4b1a      	ldr	r3, [pc, #104]	; (8088f14 <_ZN15Adafruit_BME6805beginEh+0xf0>)
 8088eaa:	66e3      	str	r3, [r4, #108]	; 0x6c
  }

  gas_sensor.delay_ms = delay_msec;
 8088eac:	4b1a      	ldr	r3, [pc, #104]	; (8088f18 <_ZN15Adafruit_BME6805beginEh+0xf4>)

  int8_t rslt = BME680_OK;
  rslt = bme680_init(&gas_sensor);
 8088eae:	f104 0020 	add.w	r0, r4, #32
    gas_sensor.intf = BME680_SPI_INTF;
    gas_sensor.read = &spi_read;
    gas_sensor.write = &spi_write;
  }

  gas_sensor.delay_ms = delay_msec;
 8088eb2:	6723      	str	r3, [r4, #112]	; 0x70

  int8_t rslt = BME680_OK;
  rslt = bme680_init(&gas_sensor);
 8088eb4:	f7f7 fa07 	bl	80802c6 <bme680_init>
#ifdef BME680_DEBUG
  Serial.print("Result: "); Serial.println(rslt);
#endif

  if (rslt != BME680_OK)
 8088eb8:	b9e0      	cbnz	r0, 8088ef4 <_ZN15Adafruit_BME6805beginEh+0xd0>
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_temp = oversample;
 8088eba:	2304      	movs	r3, #4
 8088ebc:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_hum = oversample;
 8088ec0:	2302      	movs	r3, #2
 8088ec2:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
*/
/**************************************************************************/
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
  if (filtersize > BME680_FILTER_SIZE_127) return false;

  gas_sensor.tph_sett.filter = filtersize;
 8088ec6:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
    @param  heaterTime Time to keep heater on in milliseconds
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
 8088eca:	f44f 73a0 	mov.w	r3, #320	; 0x140
  gas_sensor.tph_sett.os_temp = oversample;

  if (oversample == BME680_OS_NONE)
    _tempEnabled = false;
  else
    _tempEnabled = true;
 8088ece:	2001      	movs	r0, #1
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_pres = oversample;
 8088ed0:	2203      	movs	r2, #3
    @param  heaterTime Time to keep heater on in milliseconds
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
 8088ed2:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  gas_sensor.gas_sett.heatr_dur = heaterTime;
 8088ed6:	2396      	movs	r3, #150	; 0x96
  gas_sensor.tph_sett.os_temp = oversample;

  if (oversample == BME680_OS_NONE)
    _tempEnabled = false;
  else
    _tempEnabled = true;
 8088ed8:	7460      	strb	r0, [r4, #17]
  gas_sensor.tph_sett.os_hum = oversample;

  if (oversample == BME680_OS_NONE)
    _humEnabled = false;
  else
    _humEnabled = true;
 8088eda:	74a0      	strb	r0, [r4, #18]
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_pres = oversample;
 8088edc:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a

  if (oversample == BME680_OS_NONE)
    _presEnabled = false;
  else
    _presEnabled = true;
 8088ee0:	74e0      	strb	r0, [r4, #19]
  gas_sensor.tph_sett.filter = filtersize;

  if (filtersize == BME680_FILTER_SIZE_0)
    _filterEnabled = false;
  else
    _filterEnabled = true;
 8088ee2:	7420      	strb	r0, [r4, #16]
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
  gas_sensor.gas_sett.heatr_dur = heaterTime;
 8088ee4:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  if ( (heaterTemp == 0) || (heaterTime == 0) ) {
    // disabled!
    gas_sensor.gas_sett.run_gas = BME680_DISABLE_GAS_MEAS;
    _gasEnabled = false;
  } else {
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 8088ee8:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    _gasEnabled = true;
 8088eec:	7520      	strb	r0, [r4, #20]
  setPressureOversampling(BME680_OS_4X);
  setIIRFilterSize(BME680_FILTER_SIZE_3);
  setGasHeater(320, 150); // 320*C for 150 ms

  // don't do anything till we request a reading
  gas_sensor.power_mode = BME680_FORCED_MODE;
 8088eee:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64

  return true;
 8088ef2:	bd38      	pop	{r3, r4, r5, pc}
#ifdef BME680_DEBUG
  Serial.print("Result: "); Serial.println(rslt);
#endif

  if (rslt != BME680_OK)
    return false;
 8088ef4:	2000      	movs	r0, #0

  // don't do anything till we request a reading
  gas_sensor.power_mode = BME680_FORCED_MODE;

  return true;
}
 8088ef6:	bd38      	pop	{r3, r4, r5, pc}
 8088ef8:	08088d99 	.word	0x08088d99
 8088efc:	08088c09 	.word	0x08088c09
 8088f00:	20000be1 	.word	0x20000be1
 8088f04:	200011e0 	.word	0x200011e0
 8088f08:	20000be2 	.word	0x20000be2
 8088f0c:	20000be0 	.word	0x20000be0
 8088f10:	08088d35 	.word	0x08088d35
 8088f14:	08088cd1 	.word	0x08088cd1
 8088f18:	08088c05 	.word	0x08088c05

08088f1c <_ZN15Adafruit_BME68014performReadingEv>:
    and Adafruit_BME680#gas_resistance member variables

    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::performReading(void) {
 8088f1c:	b530      	push	{r4, r5, lr}
 8088f1e:	4604      	mov	r4, r0
  struct bme680_field_data data;
  int8_t rslt;

  /* Select the power mode */
  /* Must be set before writing the sensor configuration */
  gas_sensor.power_mode = BME680_FORCED_MODE;
 8088f20:	2301      	movs	r3, #1
 8088f22:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64

  /* Set the required sensor settings needed */
  if (_tempEnabled)
    set_required_settings |= BME680_OST_SEL;
  if (_humEnabled)
 8088f26:	7ca3      	ldrb	r3, [r4, #18]
    and Adafruit_BME680#gas_resistance member variables

    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::performReading(void) {
 8088f28:	b087      	sub	sp, #28
  uint8_t set_required_settings = 0;
 8088f2a:	7c40      	ldrb	r0, [r0, #17]
  gas_sensor.power_mode = BME680_FORCED_MODE;

  /* Set the required sensor settings needed */
  if (_tempEnabled)
    set_required_settings |= BME680_OST_SEL;
  if (_humEnabled)
 8088f2c:	b10b      	cbz	r3, 8088f32 <_ZN15Adafruit_BME68014performReadingEv+0x16>
    set_required_settings |= BME680_OSH_SEL;
 8088f2e:	f040 0004 	orr.w	r0, r0, #4
  if (_presEnabled)
 8088f32:	7ce3      	ldrb	r3, [r4, #19]
 8088f34:	b10b      	cbz	r3, 8088f3a <_ZN15Adafruit_BME68014performReadingEv+0x1e>
    set_required_settings |= BME680_OSP_SEL;
 8088f36:	f040 0002 	orr.w	r0, r0, #2
  if (_filterEnabled)
 8088f3a:	7c23      	ldrb	r3, [r4, #16]
 8088f3c:	b10b      	cbz	r3, 8088f42 <_ZN15Adafruit_BME68014performReadingEv+0x26>
    set_required_settings |= BME680_FILTER_SEL;
 8088f3e:	f040 0010 	orr.w	r0, r0, #16
  if (_gasEnabled)
 8088f42:	7d23      	ldrb	r3, [r4, #20]
 8088f44:	b10b      	cbz	r3, 8088f4a <_ZN15Adafruit_BME68014performReadingEv+0x2e>
    set_required_settings |= BME680_GAS_SENSOR_SEL;
 8088f46:	f040 00c8 	orr.w	r0, r0, #200	; 0xc8

  /* Set the desired sensor configuration */
  //Serial.println("Setting sensor settings");
  rslt = bme680_set_sensor_settings(set_required_settings, &gas_sensor);
 8088f4a:	f104 0520 	add.w	r5, r4, #32
 8088f4e:	4629      	mov	r1, r5
 8088f50:	f7f7 fad9 	bl	8080506 <bme680_set_sensor_settings>
  if (rslt != BME680_OK)
 8088f54:	b108      	cbz	r0, 8088f5a <_ZN15Adafruit_BME68014performReadingEv+0x3e>
    return false;
 8088f56:	2500      	movs	r5, #0
 8088f58:	e04b      	b.n	8088ff2 <_ZN15Adafruit_BME68014performReadingEv+0xd6>

  /* Set the power mode */
  //Serial.println("Setting power mode");
  rslt = bme680_set_sensor_mode(&gas_sensor);
 8088f5a:	4628      	mov	r0, r5
 8088f5c:	f7f7 fa94 	bl	8080488 <bme680_set_sensor_mode>
  if (rslt != BME680_OK)
 8088f60:	2800      	cmp	r0, #0
 8088f62:	d1f8      	bne.n	8088f56 <_ZN15Adafruit_BME68014performReadingEv+0x3a>
    return false;

  /* Get the total measurement duration so as to sleep or wait till the
   * measurement is complete */
  uint16_t meas_period;
  bme680_get_profile_dur(&meas_period, &gas_sensor);
 8088f64:	4629      	mov	r1, r5
 8088f66:	f10d 0002 	add.w	r0, sp, #2
 8088f6a:	f7f7 fc47 	bl	80807fc <bme680_get_profile_dur>
  //Serial.print("Waiting (ms) "); Serial.println(meas_period);
  delay(meas_period * 2); /* Delay till the measurement is ready */
 8088f6e:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8088f72:	0040      	lsls	r0, r0, #1
 8088f74:	f002 fdda 	bl	808bb2c <delay>

  //Serial.print("t_fine = "); Serial.println(gas_sensor.calib.t_fine);

  //Serial.println("Getting sensor data");
  rslt = bme680_get_sensor_data(&data, &gas_sensor);
 8088f78:	4629      	mov	r1, r5
 8088f7a:	a801      	add	r0, sp, #4
 8088f7c:	f7f7 fc72 	bl	8080864 <bme680_get_sensor_data>
  if (rslt != BME680_OK)
 8088f80:	2800      	cmp	r0, #0
 8088f82:	d1e8      	bne.n	8088f56 <_ZN15Adafruit_BME68014performReadingEv+0x3a>
    return false;

  if (_tempEnabled) {
 8088f84:	7c63      	ldrb	r3, [r4, #17]
 8088f86:	b15b      	cbz	r3, 8088fa0 <_ZN15Adafruit_BME68014performReadingEv+0x84>
    //Serial.print("Temp: "); Serial.println(data.temperature / 100.0, 2);
    temperature = data.temperature / 100.0;
 8088f88:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8088f8c:	f004 f996 	bl	808d2bc <__aeabi_i2d>
 8088f90:	2200      	movs	r2, #0
 8088f92:	4b19      	ldr	r3, [pc, #100]	; (8088ff8 <_ZN15Adafruit_BME68014performReadingEv+0xdc>)
 8088f94:	f004 fb22 	bl	808d5dc <__aeabi_ddiv>
 8088f98:	f004 fcee 	bl	808d978 <__aeabi_d2f>
 8088f9c:	6020      	str	r0, [r4, #0]
 8088f9e:	e001      	b.n	8088fa4 <_ZN15Adafruit_BME68014performReadingEv+0x88>
  } else {
    temperature = NAN;
 8088fa0:	4b16      	ldr	r3, [pc, #88]	; (8088ffc <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 8088fa2:	6023      	str	r3, [r4, #0]
  }

  if (_humEnabled) {
 8088fa4:	7ca3      	ldrb	r3, [r4, #18]
 8088fa6:	b153      	cbz	r3, 8088fbe <_ZN15Adafruit_BME68014performReadingEv+0xa2>
    //Serial.print("Hum:  "); Serial.println(data.humidity / 1000.0, 2);
    humidity = data.humidity / 1000.0;
 8088fa8:	9804      	ldr	r0, [sp, #16]
 8088faa:	f004 f977 	bl	808d29c <__aeabi_ui2d>
 8088fae:	2200      	movs	r2, #0
 8088fb0:	4b13      	ldr	r3, [pc, #76]	; (8089000 <_ZN15Adafruit_BME68014performReadingEv+0xe4>)
 8088fb2:	f004 fb13 	bl	808d5dc <__aeabi_ddiv>
 8088fb6:	f004 fcdf 	bl	808d978 <__aeabi_d2f>
 8088fba:	60a0      	str	r0, [r4, #8]
 8088fbc:	e001      	b.n	8088fc2 <_ZN15Adafruit_BME68014performReadingEv+0xa6>
  } else {
    humidity = NAN;
 8088fbe:	4b0f      	ldr	r3, [pc, #60]	; (8088ffc <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 8088fc0:	60a3      	str	r3, [r4, #8]
  }

  if (_presEnabled) {
 8088fc2:	7ce3      	ldrb	r3, [r4, #19]
 8088fc4:	b123      	cbz	r3, 8088fd0 <_ZN15Adafruit_BME68014performReadingEv+0xb4>
    //Serial.print("Pres: "); Serial.println(data.pressure / 100.0, 2);
    pressure = data.pressure;
 8088fc6:	9803      	ldr	r0, [sp, #12]
 8088fc8:	f004 fddc 	bl	808db84 <__aeabi_ui2f>
 8088fcc:	6060      	str	r0, [r4, #4]
 8088fce:	e001      	b.n	8088fd4 <_ZN15Adafruit_BME68014performReadingEv+0xb8>
  } else {
    pressure = NAN;
 8088fd0:	4b0a      	ldr	r3, [pc, #40]	; (8088ffc <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 8088fd2:	6063      	str	r3, [r4, #4]
  }

  /* Avoid using measurements from an unstable heating setup */
  if (_gasEnabled) {
 8088fd4:	7d25      	ldrb	r5, [r4, #20]
 8088fd6:	b15d      	cbz	r5, 8088ff0 <_ZN15Adafruit_BME68014performReadingEv+0xd4>
    if (data.status & BME680_HEAT_STAB_MSK) {
 8088fd8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8088fdc:	06db      	lsls	r3, r3, #27
 8088fde:	d504      	bpl.n	8088fea <_ZN15Adafruit_BME68014performReadingEv+0xce>
      //Serial.print("Gas resistance: "); Serial.println(data.gas_resistance);
      gas_resistance = data.gas_resistance;
 8088fe0:	9805      	ldr	r0, [sp, #20]
 8088fe2:	f004 fdcf 	bl	808db84 <__aeabi_ui2f>
 8088fe6:	60e0      	str	r0, [r4, #12]
 8088fe8:	e003      	b.n	8088ff2 <_ZN15Adafruit_BME68014performReadingEv+0xd6>
    } else {
      gas_resistance = 0;
 8088fea:	2300      	movs	r3, #0
 8088fec:	60e3      	str	r3, [r4, #12]
 8088fee:	e000      	b.n	8088ff2 <_ZN15Adafruit_BME68014performReadingEv+0xd6>
      //Serial.println("Gas reading unstable!");
    }
  }

  return true;
 8088ff0:	2501      	movs	r5, #1
}
 8088ff2:	4628      	mov	r0, r5
 8088ff4:	b007      	add	sp, #28
 8088ff6:	bd30      	pop	{r4, r5, pc}
 8088ff8:	40590000 	.word	0x40590000
 8088ffc:	7fc00000 	.word	0x7fc00000
 8089000:	408f4000 	.word	0x408f4000

08089004 <_ZN15Adafruit_BME68012setGasHeaterEtt>:
    @param  heaterTime Time to keep heater on in milliseconds
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
 8089004:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
  gas_sensor.gas_sett.heatr_dur = heaterTime;
 8089008:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62

  if ( (heaterTemp == 0) || (heaterTime == 0) ) {
 808900c:	b101      	cbz	r1, 8089010 <_ZN15Adafruit_BME68012setGasHeaterEtt+0xc>
 808900e:	b90a      	cbnz	r2, 8089014 <_ZN15Adafruit_BME68012setGasHeaterEtt+0x10>
    // disabled!
    gas_sensor.gas_sett.run_gas = BME680_DISABLE_GAS_MEAS;
 8089010:	2300      	movs	r3, #0
 8089012:	e000      	b.n	8089016 <_ZN15Adafruit_BME68012setGasHeaterEtt+0x12>
    _gasEnabled = false;
  } else {
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 8089014:	2301      	movs	r3, #1
 8089016:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
    _gasEnabled = true;
 808901a:	7503      	strb	r3, [r0, #20]
  }
  return true;
}
 808901c:	2001      	movs	r0, #1
 808901e:	4770      	bx	lr

08089020 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh>:
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
 8089020:	2905      	cmp	r1, #5
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
 8089022:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
 8089024:	d807      	bhi.n	8089036 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh+0x16>

  gas_sensor.tph_sett.os_temp = oversample;
 8089026:	f880 1059 	strb.w	r1, [r0, #89]	; 0x59
 808902a:	2001      	movs	r0, #1

  if (oversample == BME680_OS_NONE)
 808902c:	b909      	cbnz	r1, 8089032 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh+0x12>
    _tempEnabled = false;
 808902e:	7459      	strb	r1, [r3, #17]
 8089030:	4770      	bx	lr
  else
    _tempEnabled = true;
 8089032:	7458      	strb	r0, [r3, #17]
 8089034:	4770      	bx	lr
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
 8089036:	2000      	movs	r0, #0
    _tempEnabled = false;
  else
    _tempEnabled = true;

  return true;
}
 8089038:	4770      	bx	lr

0808903a <_ZN15Adafruit_BME68023setHumidityOversamplingEh>:
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
 808903a:	2905      	cmp	r1, #5
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
 808903c:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
 808903e:	d807      	bhi.n	8089050 <_ZN15Adafruit_BME68023setHumidityOversamplingEh+0x16>

  gas_sensor.tph_sett.os_hum = oversample;
 8089040:	f880 1058 	strb.w	r1, [r0, #88]	; 0x58
 8089044:	2001      	movs	r0, #1

  if (oversample == BME680_OS_NONE)
 8089046:	b909      	cbnz	r1, 808904c <_ZN15Adafruit_BME68023setHumidityOversamplingEh+0x12>
    _humEnabled = false;
 8089048:	7499      	strb	r1, [r3, #18]
 808904a:	4770      	bx	lr
  else
    _humEnabled = true;
 808904c:	7498      	strb	r0, [r3, #18]
 808904e:	4770      	bx	lr
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
 8089050:	2000      	movs	r0, #0
    _humEnabled = false;
  else
    _humEnabled = true;

  return true;
}
 8089052:	4770      	bx	lr

08089054 <_ZN15Adafruit_BME68023setPressureOversamplingEh>:
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
 8089054:	2905      	cmp	r1, #5
    @param  oversample Oversampling setting, can be BME680_OS_NONE (turn off Pressure reading),
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
 8089056:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
 8089058:	d807      	bhi.n	808906a <_ZN15Adafruit_BME68023setPressureOversamplingEh+0x16>

  gas_sensor.tph_sett.os_pres = oversample;
 808905a:	f880 105a 	strb.w	r1, [r0, #90]	; 0x5a
 808905e:	2001      	movs	r0, #1

  if (oversample == BME680_OS_NONE)
 8089060:	b909      	cbnz	r1, 8089066 <_ZN15Adafruit_BME68023setPressureOversamplingEh+0x12>
    _presEnabled = false;
 8089062:	74d9      	strb	r1, [r3, #19]
 8089064:	4770      	bx	lr
  else
    _presEnabled = true;
 8089066:	74d8      	strb	r0, [r3, #19]
 8089068:	4770      	bx	lr
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
 808906a:	2000      	movs	r0, #0
    _presEnabled = false;
  else
    _presEnabled = true;

  return true;
}
 808906c:	4770      	bx	lr

0808906e <_ZN15Adafruit_BME68016setIIRFilterSizeEh>:
    @return True on success, False on failure

*/
/**************************************************************************/
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
  if (filtersize > BME680_FILTER_SIZE_127) return false;
 808906e:	2907      	cmp	r1, #7
    @param filtersize Size of the filter (in samples). Can be BME680_FILTER_SIZE_0 (no filtering), BME680_FILTER_SIZE_1, BME680_FILTER_SIZE_3, BME680_FILTER_SIZE_7, BME680_FILTER_SIZE_15, BME680_FILTER_SIZE_31, BME680_FILTER_SIZE_63, BME680_FILTER_SIZE_127
    @return True on success, False on failure

*/
/**************************************************************************/
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
 8089070:	4603      	mov	r3, r0
  if (filtersize > BME680_FILTER_SIZE_127) return false;
 8089072:	d807      	bhi.n	8089084 <_ZN15Adafruit_BME68016setIIRFilterSizeEh+0x16>

  gas_sensor.tph_sett.filter = filtersize;
 8089074:	f880 105b 	strb.w	r1, [r0, #91]	; 0x5b
 8089078:	2001      	movs	r0, #1

  if (filtersize == BME680_FILTER_SIZE_0)
 808907a:	b909      	cbnz	r1, 8089080 <_ZN15Adafruit_BME68016setIIRFilterSizeEh+0x12>
    _filterEnabled = false;
 808907c:	7419      	strb	r1, [r3, #16]
 808907e:	4770      	bx	lr
  else
    _filterEnabled = true;
 8089080:	7418      	strb	r0, [r3, #16]
 8089082:	4770      	bx	lr
    @return True on success, False on failure

*/
/**************************************************************************/
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
  if (filtersize > BME680_FILTER_SIZE_127) return false;
 8089084:	2000      	movs	r0, #0
    _filterEnabled = false;
  else
    _filterEnabled = true;

  return true;
}
 8089086:	4770      	bx	lr

08089088 <_GLOBAL__sub_I__BME680_SoftwareSPI_MOSI>:
 8089088:	f001 b90a 	b.w	808a2a0 <HAL_Pin_Map>

0808908c <_ZN7HIH61XX5startEv>:

        //  use a stream to control the sensor
        uint8_t commandRequest(Stream & stream);
    protected:
        uint8_t setError(uint8_t error) {
            f = (f & ~ErrorMask) | error;
 808908c:	7983      	ldrb	r3, [r0, #6]
 808908e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8089092:	f023 030f 	bic.w	r3, r3, #15
 8089096:	7183      	strb	r3, [r0, #6]
    /*if (p < 255) {
        digitalWrite(p, HIGH);
    }*/
    f |= RunningFlag;
    return setError(0);
}
 8089098:	2000      	movs	r0, #0
 808909a:	4770      	bx	lr

0808909c <_ZN7HIH61XX4stopEv>:
 808909c:	7983      	ldrb	r3, [r0, #6]
 808909e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80890a2:	7183      	strb	r3, [r0, #6]
    /*if (p < 255) {
        digitalWrite(p, LOW);
    }*/
    f &= ~RunningFlag;
    return setError(0);
}
 80890a4:	2000      	movs	r0, #0
 80890a6:	4770      	bx	lr

080890a8 <_ZN7HIH61XXC1Eh>:
#include "HIH61XX.h"

HIH61XX::HIH61XX(uint8_t address): a(address), f(0), h(0), t(0) {
 80890a8:	4a03      	ldr	r2, [pc, #12]	; (80890b8 <_ZN7HIH61XXC1Eh+0x10>)
 80890aa:	7101      	strb	r1, [r0, #4]
 80890ac:	6002      	str	r2, [r0, #0]
 80890ae:	2200      	movs	r2, #0
 80890b0:	7182      	strb	r2, [r0, #6]
 80890b2:	8102      	strh	r2, [r0, #8]
 80890b4:	8142      	strh	r2, [r0, #10]
    /*if (p < 255) {
        digitalWrite(p, LOW);
        pinMode(p, OUTPUT);
    }*/
}
 80890b6:	4770      	bx	lr
 80890b8:	08093c70 	.word	0x08093c70

080890bc <_ZN7HIH61XX6updateEv>:
    }*/
    f &= ~RunningFlag;
    return setError(0);
}

uint8_t HIH61XX::update() {
 80890bc:	b570      	push	{r4, r5, r6, lr}
        uint8_t error() const {
            return f & ErrorMask;
        }

        bool isRunning() const {
            return f & RunningFlag;
 80890be:	f990 3006 	ldrsb.w	r3, [r0, #6]
 80890c2:	4604      	mov	r4, r0
    if (!isRunning()) {
 80890c4:	2b00      	cmp	r3, #0
 80890c6:	db06      	blt.n	80890d6 <_ZN7HIH61XX6updateEv+0x1a>

        //  use a stream to control the sensor
        uint8_t commandRequest(Stream & stream);
    protected:
        uint8_t setError(uint8_t error) {
            f = (f & ~ErrorMask) | error;
 80890c8:	f023 030f 	bic.w	r3, r3, #15
 80890cc:	f043 0303 	orr.w	r3, r3, #3
 80890d0:	7183      	strb	r3, [r0, #6]
        return setError(NotRunningError);
 80890d2:	2003      	movs	r0, #3
 80890d4:	bd70      	pop	{r4, r5, r6, pc}
    }

    uint8_t x, y, s;

    Wire.beginTransmission(a);
 80890d6:	f003 fe0d 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 80890da:	7921      	ldrb	r1, [r4, #4]
 80890dc:	f003 fbdc 	bl	808c898 <_ZN7TwoWire17beginTransmissionEh>
    int azer = Wire.endTransmission();
 80890e0:	f003 fe08 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 80890e4:	f003 fbe3 	bl	808c8ae <_ZN7TwoWire15endTransmissionEv>
    if (azer == 0) {
 80890e8:	4605      	mov	r5, r0
 80890ea:	2800      	cmp	r0, #0
 80890ec:	d15d      	bne.n	80891aa <_ZN7HIH61XX6updateEv+0xee>
        while (true) {
            delay(10);
 80890ee:	200a      	movs	r0, #10
 80890f0:	f002 fd1c 	bl	808bb2c <delay>

            Wire.requestFrom(a, (uint8_t) 4);
 80890f4:	f003 fdfe 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 80890f8:	2204      	movs	r2, #4
 80890fa:	7921      	ldrb	r1, [r4, #4]
 80890fc:	f003 fbbf 	bl	808c87e <_ZN7TwoWire11requestFromEhh>
            if (Wire.available()) {
 8089100:	f003 fdf8 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8089104:	6803      	ldr	r3, [r0, #0]
 8089106:	691b      	ldr	r3, [r3, #16]
 8089108:	4798      	blx	r3
 808910a:	2800      	cmp	r0, #0
 808910c:	d045      	beq.n	808919a <_ZN7HIH61XX6updateEv+0xde>
                x = Wire.read();
 808910e:	f003 fdf1 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8089112:	6803      	ldr	r3, [r0, #0]
 8089114:	695b      	ldr	r3, [r3, #20]
 8089116:	4798      	blx	r3
 8089118:	4606      	mov	r6, r0
                y = Wire.read();
 808911a:	f003 fdeb 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 808911e:	6803      	ldr	r3, [r0, #0]
                s = x >> 6;

                switch (s) {
 8089120:	f3c6 1581 	ubfx	r5, r6, #6, #2
            delay(10);

            Wire.requestFrom(a, (uint8_t) 4);
            if (Wire.available()) {
                x = Wire.read();
                y = Wire.read();
 8089124:	695b      	ldr	r3, [r3, #20]
 8089126:	4798      	blx	r3
                s = x >> 6;

                switch (s) {
 8089128:	2d01      	cmp	r5, #1
 808912a:	d025      	beq.n	8089178 <_ZN7HIH61XX6updateEv+0xbc>
 808912c:	2d02      	cmp	r5, #2
 808912e:	d028      	beq.n	8089182 <_ZN7HIH61XX6updateEv+0xc6>
 8089130:	2d00      	cmp	r5, #0
 8089132:	d1dc      	bne.n	80890ee <_ZN7HIH61XX6updateEv+0x32>
                    case 0:
                        h = (((uint16_t)(x & 0x3f)) << 8) | y;
 8089134:	0236      	lsls	r6, r6, #8
 8089136:	f406 567c 	and.w	r6, r6, #16128	; 0x3f00
 808913a:	b2c0      	uxtb	r0, r0
 808913c:	4330      	orrs	r0, r6
 808913e:	8120      	strh	r0, [r4, #8]
                        x = Wire.read();
 8089140:	f003 fdd8 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8089144:	6803      	ldr	r3, [r0, #0]
 8089146:	695b      	ldr	r3, [r3, #20]
 8089148:	4798      	blx	r3
 808914a:	4606      	mov	r6, r0
                        y = Wire.read();
 808914c:	f003 fdd2 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8089150:	6803      	ldr	r3, [r0, #0]
                        t = ((((uint16_t) x) << 8) | y) >> 2;
 8089152:	0236      	lsls	r6, r6, #8

                switch (s) {
                    case 0:
                        h = (((uint16_t)(x & 0x3f)) << 8) | y;
                        x = Wire.read();
                        y = Wire.read();
 8089154:	695b      	ldr	r3, [r3, #20]
 8089156:	4798      	blx	r3
                        t = ((((uint16_t) x) << 8) | y) >> 2;
 8089158:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 808915c:	b2c0      	uxtb	r0, r0
 808915e:	4330      	orrs	r0, r6
 8089160:	1080      	asrs	r0, r0, #2
 8089162:	8160      	strh	r0, [r4, #10]
                        Wire.endTransmission();
 8089164:	f003 fdc6 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8089168:	f003 fba1 	bl	808c8ae <_ZN7TwoWire15endTransmissionEv>
 808916c:	79a3      	ldrb	r3, [r4, #6]
                        return setError(0);
 808916e:	4628      	mov	r0, r5
 8089170:	f023 030f 	bic.w	r3, r3, #15
 8089174:	71a3      	strb	r3, [r4, #6]
 8089176:	bd70      	pop	{r4, r5, r6, pc}

                    case 1:
                        Wire.endTransmission();
 8089178:	f003 fdbc 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 808917c:	f003 fb97 	bl	808c8ae <_ZN7TwoWire15endTransmissionEv>
 8089180:	e7b5      	b.n	80890ee <_ZN7HIH61XX6updateEv+0x32>
                        break;

                    case 2:
                        Wire.endTransmission();
 8089182:	f003 fdb7 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 8089186:	f003 fb92 	bl	808c8ae <_ZN7TwoWire15endTransmissionEv>
 808918a:	79a3      	ldrb	r3, [r4, #6]
                        return setError(CommandModeError);
 808918c:	2004      	movs	r0, #4
 808918e:	f023 030f 	bic.w	r3, r3, #15
 8089192:	f043 0304 	orr.w	r3, r3, #4
 8089196:	71a3      	strb	r3, [r4, #6]
 8089198:	bd70      	pop	{r4, r5, r6, pc}
 808919a:	79a3      	ldrb	r3, [r4, #6]
                }
            } else {
                return setError(CommunicationError);
 808919c:	2002      	movs	r0, #2
 808919e:	f023 030f 	bic.w	r3, r3, #15
 80891a2:	f043 0302 	orr.w	r3, r3, #2
 80891a6:	71a3      	strb	r3, [r4, #6]
 80891a8:	bd70      	pop	{r4, r5, r6, pc}
            }
        }
    } else {
        Serial.print("...");
 80891aa:	f003 f9bd 	bl	808c528 <_Z16_fetch_usbserialv>
 80891ae:	4908      	ldr	r1, [pc, #32]	; (80891d0 <_ZN7HIH61XX6updateEv+0x114>)
 80891b0:	f002 f900 	bl	808b3b4 <_ZN5Print5printEPKc>
        Serial.println(azer);
 80891b4:	f003 f9b8 	bl	808c528 <_Z16_fetch_usbserialv>
 80891b8:	220a      	movs	r2, #10
 80891ba:	4629      	mov	r1, r5
 80891bc:	f002 f97b 	bl	808b4b6 <_ZN5Print7printlnEii>
 80891c0:	79a3      	ldrb	r3, [r4, #6]
        return setError(ConnectionError);
 80891c2:	2001      	movs	r0, #1
 80891c4:	f023 030f 	bic.w	r3, r3, #15
 80891c8:	f043 0301 	orr.w	r3, r3, #1
 80891cc:	71a3      	strb	r3, [r4, #6]
    }
}
 80891ce:	bd70      	pop	{r4, r5, r6, pc}
 80891d0:	080939ec 	.word	0x080939ec

080891d4 <_ZN7HIH61XX14commandProcessER6Streamh>:
    }
    return commandReply(stream, 255);
}

uint8_t HIH61XX::commandProcess(Stream & stream, uint8_t command) {
    switch (command) {
 80891d4:	2a61      	cmp	r2, #97	; 0x61
        return commandProcess(stream, stream.read());
    }
    return commandReply(stream, 255);
}

uint8_t HIH61XX::commandProcess(Stream & stream, uint8_t command) {
 80891d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80891d8:	460d      	mov	r5, r1
    switch (command) {
 80891da:	d02b      	beq.n	8089234 <_ZN7HIH61XX14commandProcessER6Streamh+0x60>
 80891dc:	d806      	bhi.n	80891ec <_ZN7HIH61XX14commandProcessER6Streamh+0x18>
 80891de:	2a30      	cmp	r2, #48	; 0x30
 80891e0:	d031      	beq.n	8089246 <_ZN7HIH61XX14commandProcessER6Streamh+0x72>
 80891e2:	2a31      	cmp	r2, #49	; 0x31
 80891e4:	d139      	bne.n	808925a <_ZN7HIH61XX14commandProcessER6Streamh+0x86>
        case 'u':
            return commandReply(stream, update());

            //  start
        case '1':
            return commandReply(stream, start());
 80891e6:	6803      	ldr	r3, [r0, #0]
 80891e8:	681b      	ldr	r3, [r3, #0]
 80891ea:	e02e      	b.n	808924a <_ZN7HIH61XX14commandProcessER6Streamh+0x76>
    }
    return commandReply(stream, 255);
}

uint8_t HIH61XX::commandProcess(Stream & stream, uint8_t command) {
    switch (command) {
 80891ec:	2a74      	cmp	r2, #116	; 0x74
 80891ee:	d00a      	beq.n	8089206 <_ZN7HIH61XX14commandProcessER6Streamh+0x32>
 80891f0:	2a75      	cmp	r2, #117	; 0x75
 80891f2:	d025      	beq.n	8089240 <_ZN7HIH61XX14commandProcessER6Streamh+0x6c>
 80891f4:	2a68      	cmp	r2, #104	; 0x68
 80891f6:	d130      	bne.n	808925a <_ZN7HIH61XX14commandProcessER6Streamh+0x86>
            stream.println(result);
            return result;
        }
        template < typename T > uint8_t commandReply(Stream & stream, uint8_t result,
            const T & data) {
            stream.println(data);
 80891f8:	8900      	ldrh	r0, [r0, #8]
 80891fa:	f004 fcc3 	bl	808db84 <__aeabi_ui2f>
 80891fe:	491b      	ldr	r1, [pc, #108]	; (808926c <_ZN7HIH61XX14commandProcessER6Streamh+0x98>)
 8089200:	f004 fdcc 	bl	808dd9c <__aeabi_fdiv>
 8089204:	e00b      	b.n	808921e <_ZN7HIH61XX14commandProcessER6Streamh+0x4a>
 8089206:	8940      	ldrh	r0, [r0, #10]
 8089208:	f004 fcbc 	bl	808db84 <__aeabi_ui2f>
 808920c:	4917      	ldr	r1, [pc, #92]	; (808926c <_ZN7HIH61XX14commandProcessER6Streamh+0x98>)
 808920e:	f004 fdc5 	bl	808dd9c <__aeabi_fdiv>
 8089212:	4917      	ldr	r1, [pc, #92]	; (8089270 <_ZN7HIH61XX14commandProcessER6Streamh+0x9c>)
 8089214:	f004 fd0e 	bl	808dc34 <__aeabi_fmul>
 8089218:	4916      	ldr	r1, [pc, #88]	; (8089274 <_ZN7HIH61XX14commandProcessER6Streamh+0xa0>)
 808921a:	f004 fc01 	bl	808da20 <__aeabi_fsub>
 808921e:	f004 f85f 	bl	808d2e0 <__aeabi_f2d>
 8089222:	2302      	movs	r3, #2
 8089224:	9300      	str	r3, [sp, #0]
 8089226:	4602      	mov	r2, r0
 8089228:	460b      	mov	r3, r1
 808922a:	4628      	mov	r0, r5
 808922c:	f002 f9fc 	bl	808b628 <_ZN5Print7printlnEdi>
        case 'h':
            return commandReply(stream, 0, humidity());

            //  get temperature
        case 't':
            return commandReply(stream, 0, temperature());
 8089230:	2400      	movs	r4, #0
 8089232:	e018      	b.n	8089266 <_ZN7HIH61XX14commandProcessER6Streamh+0x92>
 8089234:	7901      	ldrb	r1, [r0, #4]
 8089236:	220a      	movs	r2, #10
 8089238:	4628      	mov	r0, r5
 808923a:	f002 f90e 	bl	808b45a <_ZN5Print7printlnEhi>
 808923e:	e7f7      	b.n	8089230 <_ZN7HIH61XX14commandProcessER6Streamh+0x5c>

            //  get power pin
        
            //  update
        case 'u':
            return commandReply(stream, update());
 8089240:	f7ff ff3c 	bl	80890bc <_ZN7HIH61XX6updateEv>
 8089244:	e002      	b.n	808924c <_ZN7HIH61XX14commandProcessER6Streamh+0x78>
        case '1':
            return commandReply(stream, start());

            //  stop
        case '0':
            return commandReply(stream, stop());
 8089246:	6803      	ldr	r3, [r0, #0]
 8089248:	685b      	ldr	r3, [r3, #4]
 808924a:	4798      	blx	r3
 808924c:	4604      	mov	r4, r0
            return error;
        }

        virtual uint8_t commandProcess(Stream & stream, uint8_t command);
        uint8_t commandReply(Stream & stream, uint8_t result) {
            stream.println(result);
 808924e:	4601      	mov	r1, r0
 8089250:	220a      	movs	r2, #10
 8089252:	4628      	mov	r0, r5
 8089254:	f002 f901 	bl	808b45a <_ZN5Print7printlnEhi>
 8089258:	e005      	b.n	8089266 <_ZN7HIH61XX14commandProcessER6Streamh+0x92>
 808925a:	220a      	movs	r2, #10
 808925c:	21fe      	movs	r1, #254	; 0xfe
 808925e:	4628      	mov	r0, r5
 8089260:	f002 f8fb 	bl	808b45a <_ZN5Print7printlnEhi>
    }

    return commandReply(stream, 254);
 8089264:	24fe      	movs	r4, #254	; 0xfe
}
 8089266:	4620      	mov	r0, r4
 8089268:	b003      	add	sp, #12
 808926a:	bd30      	pop	{r4, r5, pc}
 808926c:	467ff800 	.word	0x467ff800
 8089270:	43250000 	.word	0x43250000
 8089274:	42200000 	.word	0x42200000

08089278 <_GLOBAL__sub_I__ZN7HIH61XXC2Eh>:
 8089278:	f001 b812 	b.w	808a2a0 <HAL_Pin_Map>

0808927c <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvS1_S1_EEPS5_St12_PlaceholderILi1EESA_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS1_SJ_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 808927c:	b430      	push	{r4, r5}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 808927e:	6803      	ldr	r3, [r0, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
 8089280:	6812      	ldr	r2, [r2, #0]
 8089282:	6858      	ldr	r0, [r3, #4]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8089284:	689c      	ldr	r4, [r3, #8]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
 8089286:	f010 0f01 	tst.w	r0, #1
 808928a:	ea4f 0060 	mov.w	r0, r0, asr #1
 808928e:	bf18      	it	ne
 8089290:	5825      	ldrne	r5, [r4, r0]
 8089292:	681b      	ldr	r3, [r3, #0]
 8089294:	4420      	add	r0, r4
 8089296:	bf18      	it	ne
 8089298:	58eb      	ldrne	r3, [r5, r3]
 808929a:	6809      	ldr	r1, [r1, #0]
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
 808929c:	bc30      	pop	{r4, r5}
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
 808929e:	4718      	bx	r3

080892a0 <_ZN23GoogleMapsDeviceLocatorD1Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {

}

GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
 80892a0:	b510      	push	{r4, lr}
 80892a2:	4604      	mov	r4, r0
 80892a4:	4b05      	ldr	r3, [pc, #20]	; (80892bc <_ZN23GoogleMapsDeviceLocatorD1Ev+0x1c>)
 80892a6:	f840 3b2c 	str.w	r3, [r0], #44
 80892aa:	f001 fe23 	bl	808aef4 <_ZN6StringD1Ev>
 80892ae:	f104 000c 	add.w	r0, r4, #12
 80892b2:	f001 fe1f 	bl	808aef4 <_ZN6StringD1Ev>

}
 80892b6:	4620      	mov	r0, r4
 80892b8:	bd10      	pop	{r4, pc}
 80892ba:	bf00      	nop
 80892bc:	08093c9c 	.word	0x08093c9c

080892c0 <_ZN23GoogleMapsDeviceLocatorD0Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {

}

GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
 80892c0:	b510      	push	{r4, lr}
 80892c2:	4604      	mov	r4, r0

}
 80892c4:	f7ff ffec 	bl	80892a0 <_ZN23GoogleMapsDeviceLocatorD1Ev>
 80892c8:	4620      	mov	r0, r4
 80892ca:	2144      	movs	r1, #68	; 0x44
 80892cc:	f003 fd57 	bl	808cd7e <_ZdlPvj>
 80892d0:	4620      	mov	r0, r4
 80892d2:	bd10      	pop	{r4, pc}

080892d4 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData>:
#endif /* Wiring_WiFi */


#if Wiring_Cellular

static void cellularAddTower(const CellularHelperEnvironmentCellData *cellData) {
 80892d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80892d6:	4604      	mov	r4, r0
	// The - 4 factor here to leave room for the closing JSON array ], object }}, and the trailing null
	size_t spaceLeft = &requestBuf[sizeof(requestBuf) - 4] - requestCur;
 80892d8:	4e16      	ldr	r6, [pc, #88]	; (8089334 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x60>)

	size_t sizeNeeded = snprintf(requestCur, spaceLeft,
 80892da:	6863      	ldr	r3, [r4, #4]

#if Wiring_Cellular

static void cellularAddTower(const CellularHelperEnvironmentCellData *cellData) {
	// The - 4 factor here to leave room for the closing JSON array ], object }}, and the trailing null
	size_t spaceLeft = &requestBuf[sizeof(requestBuf) - 4] - requestCur;
 80892dc:	6830      	ldr	r0, [r6, #0]
 80892de:	4d16      	ldr	r5, [pc, #88]	; (8089338 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x64>)

	size_t sizeNeeded = snprintf(requestCur, spaceLeft,
 80892e0:	f810 1c01 	ldrb.w	r1, [r0, #-1]
 80892e4:	9303      	str	r3, [sp, #12]
 80892e6:	6823      	ldr	r3, [r4, #0]
 80892e8:	4a14      	ldr	r2, [pc, #80]	; (808933c <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x68>)
 80892ea:	9302      	str	r3, [sp, #8]
 80892ec:	68a3      	ldr	r3, [r4, #8]

#if Wiring_Cellular

static void cellularAddTower(const CellularHelperEnvironmentCellData *cellData) {
	// The - 4 factor here to leave room for the closing JSON array ], object }}, and the trailing null
	size_t spaceLeft = &requestBuf[sizeof(requestBuf) - 4] - requestCur;
 80892ee:	1a2d      	subs	r5, r5, r0

	size_t sizeNeeded = snprintf(requestCur, spaceLeft,
 80892f0:	9301      	str	r3, [sp, #4]
 80892f2:	68e3      	ldr	r3, [r4, #12]
 80892f4:	9300      	str	r3, [sp, #0]
 80892f6:	4b12      	ldr	r3, [pc, #72]	; (8089340 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x6c>)
 80892f8:	295b      	cmp	r1, #91	; 0x5b
 80892fa:	bf18      	it	ne
 80892fc:	4613      	movne	r3, r2
 80892fe:	4a11      	ldr	r2, [pc, #68]	; (8089344 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x70>)
 8089300:	4629      	mov	r1, r5
 8089302:	f001 fad9 	bl	808a8b8 <snprintf>
			"%s{\"i\":%d,\"l\":%u,\"c\":%d,\"n\":%d}",
			(requestCur[-1] == '[' ? "" : ","),
			cellData->ci, cellData->lac, cellData->mcc, cellData->mnc);

	if (sizeNeeded <= spaceLeft && cellData->lac != 0 && cellData->lac != 65535 && cellData->mcc != 65535 && cellData->mnc != 65535) {
 8089306:	4285      	cmp	r5, r0
 8089308:	d312      	bcc.n	8089330 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x5c>
 808930a:	68a2      	ldr	r2, [r4, #8]
 808930c:	b182      	cbz	r2, 8089330 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x5c>
 808930e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8089312:	429a      	cmp	r2, r3
 8089314:	d00c      	beq.n	8089330 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x5c>
 8089316:	6822      	ldr	r2, [r4, #0]
 8089318:	429a      	cmp	r2, r3
 808931a:	d009      	beq.n	8089330 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x5c>
 808931c:	6862      	ldr	r2, [r4, #4]
 808931e:	429a      	cmp	r2, r3
 8089320:	d006      	beq.n	8089330 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x5c>
		// There is enough space to store the whole entry, so save it
		requestCur += sizeNeeded;
 8089322:	6833      	ldr	r3, [r6, #0]
		numAdded++;
 8089324:	4a08      	ldr	r2, [pc, #32]	; (8089348 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x74>)
			(requestCur[-1] == '[' ? "" : ","),
			cellData->ci, cellData->lac, cellData->mcc, cellData->mnc);

	if (sizeNeeded <= spaceLeft && cellData->lac != 0 && cellData->lac != 65535 && cellData->mcc != 65535 && cellData->mnc != 65535) {
		// There is enough space to store the whole entry, so save it
		requestCur += sizeNeeded;
 8089326:	4418      	add	r0, r3
		numAdded++;
 8089328:	6813      	ldr	r3, [r2, #0]
			(requestCur[-1] == '[' ? "" : ","),
			cellData->ci, cellData->lac, cellData->mcc, cellData->mnc);

	if (sizeNeeded <= spaceLeft && cellData->lac != 0 && cellData->lac != 65535 && cellData->mcc != 65535 && cellData->mnc != 65535) {
		// There is enough space to store the whole entry, so save it
		requestCur += sizeNeeded;
 808932a:	6030      	str	r0, [r6, #0]
		numAdded++;
 808932c:	3301      	adds	r3, #1
 808932e:	6013      	str	r3, [r2, #0]
	}

}
 8089330:	b004      	add	sp, #16
 8089332:	bd70      	pop	{r4, r5, r6, pc}
 8089334:	20000cec 	.word	0x20000cec
 8089338:	20000ce5 	.word	0x20000ce5
 808933c:	08093cd2 	.word	0x08093cd2
 8089340:	08094100 	.word	0x08094100
 8089344:	08093ca4 	.word	0x08093ca4
 8089348:	20000be4 	.word	0x20000be4

0808934c <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_>:
			Particle.publish(eventName, scanData, PRIVATE);
		}
	}
}

void GoogleMapsDeviceLocator::subscriptionHandler(const char *event, const char *data) {
 808934c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	// event: hook-response/deviceLocator/<deviceid>/0

	if (callback) {
 8089350:	6a43      	ldr	r3, [r0, #36]	; 0x24
			Particle.publish(eventName, scanData, PRIVATE);
		}
	}
}

void GoogleMapsDeviceLocator::subscriptionHandler(const char *event, const char *data) {
 8089352:	4604      	mov	r4, r0
	// event: hook-response/deviceLocator/<deviceid>/0

	if (callback) {
 8089354:	b38b      	cbz	r3, 80893ba <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x6e>
		// float lat, float lon, float accuracy
		char *mutableCopy = strdup(data);
 8089356:	4610      	mov	r0, r2
 8089358:	f005 fa2c 	bl	808e7b4 <strdup>
		char *part, *end;
		float lat, lon, accuracy;

		part = strtok_r(mutableCopy, ",", &end);
 808935c:	aa01      	add	r2, sp, #4
 808935e:	4918      	ldr	r1, [pc, #96]	; (80893c0 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x74>)
void GoogleMapsDeviceLocator::subscriptionHandler(const char *event, const char *data) {
	// event: hook-response/deviceLocator/<deviceid>/0

	if (callback) {
		// float lat, float lon, float accuracy
		char *mutableCopy = strdup(data);
 8089360:	4605      	mov	r5, r0
		char *part, *end;
		float lat, lon, accuracy;

		part = strtok_r(mutableCopy, ",", &end);
 8089362:	f006 fdf8 	bl	808ff56 <strtok_r>
		if (part) {
 8089366:	b328      	cbz	r0, 80893b4 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x68>
			lat = atof(part);
 8089368:	f005 f890 	bl	808e48c <atof>
			part = strtok_r(NULL, ",", &end);
 808936c:	aa01      	add	r2, sp, #4
		char *part, *end;
		float lat, lon, accuracy;

		part = strtok_r(mutableCopy, ",", &end);
		if (part) {
			lat = atof(part);
 808936e:	4606      	mov	r6, r0
 8089370:	460f      	mov	r7, r1
			part = strtok_r(NULL, ",", &end);
 8089372:	2000      	movs	r0, #0
 8089374:	4912      	ldr	r1, [pc, #72]	; (80893c0 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x74>)
 8089376:	f006 fdee 	bl	808ff56 <strtok_r>
			if (part) {
 808937a:	b1d8      	cbz	r0, 80893b4 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x68>
				lon = atof(part);
 808937c:	f005 f886 	bl	808e48c <atof>
				part = strtok_r(NULL, ",", &end);
 8089380:	aa01      	add	r2, sp, #4
		part = strtok_r(mutableCopy, ",", &end);
		if (part) {
			lat = atof(part);
			part = strtok_r(NULL, ",", &end);
			if (part) {
				lon = atof(part);
 8089382:	4680      	mov	r8, r0
 8089384:	4689      	mov	r9, r1
				part = strtok_r(NULL, ",", &end);
 8089386:	2000      	movs	r0, #0
 8089388:	490d      	ldr	r1, [pc, #52]	; (80893c0 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x74>)
 808938a:	f006 fde4 	bl	808ff56 <strtok_r>
				if (part) {
 808938e:	b188      	cbz	r0, 80893b4 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x68>
					accuracy = atof(part);
 8089390:	f005 f87c 	bl	808e48c <atof>

					(*callback)(lat, lon, accuracy);
 8089394:	f004 faf0 	bl	808d978 <__aeabi_d2f>
 8089398:	4649      	mov	r1, r9
 808939a:	4682      	mov	sl, r0
 808939c:	4640      	mov	r0, r8
 808939e:	f004 faeb 	bl	808d978 <__aeabi_d2f>
 80893a2:	4680      	mov	r8, r0
 80893a4:	4639      	mov	r1, r7
 80893a6:	4630      	mov	r0, r6
 80893a8:	f004 fae6 	bl	808d978 <__aeabi_d2f>
 80893ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80893ae:	4652      	mov	r2, sl
 80893b0:	4641      	mov	r1, r8
 80893b2:	4798      	blx	r3
				}
			}
		}

		free(mutableCopy);
 80893b4:	4628      	mov	r0, r5
 80893b6:	f001 fa4f 	bl	808a858 <free>
	}
}
 80893ba:	b002      	add	sp, #8
 80893bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80893c0:	08093cd2 	.word	0x08093cd2

080893c4 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5>:

	return requestBuf;
}


const char *GoogleMapsDeviceLocator::cellularScan() {
 80893c4:	b570      	push	{r4, r5, r6, lr}
};

/**
 * Used to hold the results for one cell (service or neighbor) from the AT+CGED command
 */
class CellularHelperEnvironmentCellData { // 44 bytes
 80893c6:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80893ca:	b0ca      	sub	sp, #296	; 0x128
};

template <size_t MAX_NEIGHBOR_CELLS>
class CellularHelperEnvironmentResponseStatic : public CellularHelperEnvironmentResponse {
public:
	explicit CellularHelperEnvironmentResponseStatic() : CellularHelperEnvironmentResponse(staticNeighbors, MAX_NEIGHBOR_CELLS) {
 80893cc:	2204      	movs	r2, #4
 80893ce:	a91e      	add	r1, sp, #120	; 0x78
 80893d0:	a805      	add	r0, sp, #20
 80893d2:	f000 fb6d 	bl	8089ab0 <_ZN33CellularHelperEnvironmentResponseC1EP33CellularHelperEnvironmentCellDataj>
 80893d6:	4b31      	ldr	r3, [pc, #196]	; (808949c <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0xd8>)
 80893d8:	a955      	add	r1, sp, #340	; 0x154
 80893da:	9305      	str	r3, [sp, #20]
};

/**
 * Used to hold the results for one cell (service or neighbor) from the AT+CGED command
 */
class CellularHelperEnvironmentCellData { // 44 bytes
 80893dc:	22ff      	movs	r2, #255	; 0xff
 80893de:	ab29      	add	r3, sp, #164	; 0xa4
 80893e0:	2000      	movs	r0, #0
 80893e2:	f843 4c2c 	str.w	r4, [r3, #-44]
 80893e6:	f843 2c28 	str.w	r2, [r3, #-40]
 80893ea:	f803 0c10 	strb.w	r0, [r3, #-16]
 80893ee:	f843 2c04 	str.w	r2, [r3, #-4]
 80893f2:	332c      	adds	r3, #44	; 0x2c
};

template <size_t MAX_NEIGHBOR_CELLS>
class CellularHelperEnvironmentResponseStatic : public CellularHelperEnvironmentResponse {
public:
	explicit CellularHelperEnvironmentResponseStatic() : CellularHelperEnvironmentResponse(staticNeighbors, MAX_NEIGHBOR_CELLS) {
 80893f4:	428b      	cmp	r3, r1
 80893f6:	d1f4      	bne.n	80893e2 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0x1e>
	}

	// First try to get info on neighboring cells. This doesn't work for me using the U260
	CellularHelperEnvironmentResponseStatic<4> envResp;

	CellularHelper.getEnvironment(5, envResp);
 80893f8:	aa05      	add	r2, sp, #20
 80893fa:	2105      	movs	r1, #5
 80893fc:	4828      	ldr	r0, [pc, #160]	; (80894a0 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0xdc>)
 80893fe:	f000 fe53 	bl	808a0a8 <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse>

	if (envResp.resp != RESP_OK) {
 8089402:	9b06      	ldr	r3, [sp, #24]
 8089404:	3302      	adds	r3, #2
 8089406:	d004      	beq.n	8089412 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0x4e>
		// We couldn't get neighboring cells, so try just the receiving cell
		CellularHelper.getEnvironment(3, envResp);
 8089408:	aa05      	add	r2, sp, #20
 808940a:	2103      	movs	r1, #3
 808940c:	4824      	ldr	r0, [pc, #144]	; (80894a0 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0xdc>)
 808940e:	f000 fe4b 	bl	808a0a8 <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse>
	}
	// envResp.serialDebug();


	// We know these things fit, so just using sprintf instead of snprintf here
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",",
 8089412:	4c24      	ldr	r4, [pc, #144]	; (80894a4 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0xe0>)
			CellularHelper.getOperatorName().c_str());
 8089414:	2209      	movs	r2, #9
	}
	// envResp.serialDebug();


	// We know these things fit, so just using sprintf instead of snprintf here
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",",
 8089416:	6825      	ldr	r5, [r4, #0]
			CellularHelper.getOperatorName().c_str());
 8089418:	4921      	ldr	r1, [pc, #132]	; (80894a0 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0xdc>)
 808941a:	a801      	add	r0, sp, #4
 808941c:	f000 fe12 	bl	808a044 <_ZNK19CellularHelperClass15getOperatorNameEi>
 8089420:	9a01      	ldr	r2, [sp, #4]
 8089422:	4921      	ldr	r1, [pc, #132]	; (80894a8 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0xe4>)
 8089424:	4628      	mov	r0, r5
 8089426:	f001 fa27 	bl	808a878 <sprintf>
 808942a:	6823      	ldr	r3, [r4, #0]

	requestCur += sprintf(requestCur, "\"a\":[");

	cellularAddTower(&envResp.service);

	for(size_t ii = 0; ii < envResp.getNumNeighbors(); ii++) {
 808942c:	2500      	movs	r5, #0
	// envResp.serialDebug();


	// We know these things fit, so just using sprintf instead of snprintf here
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",",
			CellularHelper.getOperatorName().c_str());
 808942e:	4418      	add	r0, r3
 8089430:	6020      	str	r0, [r4, #0]
 8089432:	a801      	add	r0, sp, #4
 8089434:	f001 fd5e 	bl	808aef4 <_ZN6StringD1Ev>

	requestCur += sprintf(requestCur, "\"a\":[");
 8089438:	6823      	ldr	r3, [r4, #0]
 808943a:	491c      	ldr	r1, [pc, #112]	; (80894ac <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0xe8>)
 808943c:	4618      	mov	r0, r3
 808943e:	f005 f9b1 	bl	808e7a4 <strcpy>
 8089442:	4603      	mov	r3, r0

	cellularAddTower(&envResp.service);
 8089444:	a810      	add	r0, sp, #64	; 0x40

	// We know these things fit, so just using sprintf instead of snprintf here
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",",
			CellularHelper.getOperatorName().c_str());

	requestCur += sprintf(requestCur, "\"a\":[");
 8089446:	3305      	adds	r3, #5
 8089448:	6023      	str	r3, [r4, #0]

	cellularAddTower(&envResp.service);
 808944a:	f7ff ff43 	bl	80892d4 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData>

	for(size_t ii = 0; ii < envResp.getNumNeighbors(); ii++) {
		cellularAddTower(&envResp.neighbors[ii]);
 808944e:	262c      	movs	r6, #44	; 0x2c

	requestCur += sprintf(requestCur, "\"a\":[");

	cellularAddTower(&envResp.service);

	for(size_t ii = 0; ii < envResp.getNumNeighbors(); ii++) {
 8089450:	a805      	add	r0, sp, #20
 8089452:	f000 fce7 	bl	8089e24 <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv>
 8089456:	42a8      	cmp	r0, r5
 8089458:	d906      	bls.n	8089468 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0xa4>
		cellularAddTower(&envResp.neighbors[ii]);
 808945a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 808945c:	fb06 0005 	mla	r0, r6, r5, r0
 8089460:	f7ff ff38 	bl	80892d4 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData>

	requestCur += sprintf(requestCur, "\"a\":[");

	cellularAddTower(&envResp.service);

	for(size_t ii = 0; ii < envResp.getNumNeighbors(); ii++) {
 8089464:	3501      	adds	r5, #1
 8089466:	e7f3      	b.n	8089450 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0x8c>
		cellularAddTower(&envResp.neighbors[ii]);
	}

	*requestCur++ = ']';
 8089468:	6823      	ldr	r3, [r4, #0]
 808946a:	225d      	movs	r2, #93	; 0x5d
 808946c:	701a      	strb	r2, [r3, #0]
	*requestCur++ = '}';
 808946e:	227d      	movs	r2, #125	; 0x7d
 8089470:	705a      	strb	r2, [r3, #1]
	*requestCur++ = '}';
 8089472:	709a      	strb	r2, [r3, #2]
	*requestCur++ = 0;
 8089474:	1d1a      	adds	r2, r3, #4
 8089476:	6022      	str	r2, [r4, #0]
 8089478:	2200      	movs	r2, #0
 808947a:	70da      	strb	r2, [r3, #3]

	if (numAdded == 0) {
 808947c:	4b0c      	ldr	r3, [pc, #48]	; (80894b0 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0xec>)
 808947e:	681b      	ldr	r3, [r3, #0]
 8089480:	b90b      	cbnz	r3, 8089486 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0xc2>
		requestBuf[0] = 0;
 8089482:	4a0c      	ldr	r2, [pc, #48]	; (80894b4 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0xf0>)
 8089484:	7013      	strb	r3, [r2, #0]
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 8089486:	4b0c      	ldr	r3, [pc, #48]	; (80894b8 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0xf4>)
 8089488:	a80c      	add	r0, sp, #48	; 0x30
 808948a:	9305      	str	r3, [sp, #20]
 808948c:	f001 fd32 	bl	808aef4 <_ZN6StringD1Ev>
 8089490:	a808      	add	r0, sp, #32
 8089492:	f001 fd2f 	bl	808aef4 <_ZN6StringD1Ev>
	}

	return requestBuf;
}
 8089496:	4807      	ldr	r0, [pc, #28]	; (80894b4 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0xf0>)
 8089498:	b04a      	add	sp, #296	; 0x128
 808949a:	bd70      	pop	{r4, r5, r6, pc}
 808949c:	08093c90 	.word	0x08093c90
 80894a0:	20000cf0 	.word	0x20000cf0
 80894a4:	20000cec 	.word	0x20000cec
 80894a8:	08093cc4 	.word	0x08093cc4
 80894ac:	08093cd4 	.word	0x08093cd4
 80894b0:	20000be4 	.word	0x20000be4
 80894b4:	20000be9 	.word	0x20000be9
 80894b8:	08094128 	.word	0x08094128

080894bc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80894bc:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80894be:	b538      	push	{r3, r4, r5, lr}
 80894c0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80894c2:	d005      	beq.n	80894d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x14>
 80894c4:	2a03      	cmp	r2, #3
 80894c6:	d00f      	beq.n	80894e8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x2c>
 80894c8:	2a01      	cmp	r2, #1
 80894ca:	d111      	bne.n	80894f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x34>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80894cc:	680b      	ldr	r3, [r1, #0]
 80894ce:	e009      	b.n	80894e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x28>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80894d0:	200c      	movs	r0, #12
 80894d2:	680d      	ldr	r5, [r1, #0]
 80894d4:	f7f6 fde3 	bl	808009e <_Znwj>
 80894d8:	4603      	mov	r3, r0
 80894da:	b118      	cbz	r0, 80894e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x28>
 80894dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80894e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80894e4:	6023      	str	r3, [r4, #0]
 80894e6:	e003      	b.n	80894f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x34>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80894e8:	210c      	movs	r1, #12
 80894ea:	6800      	ldr	r0, [r0, #0]
 80894ec:	f003 fc47 	bl	808cd7e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80894f0:	2000      	movs	r0, #0
 80894f2:	bd38      	pop	{r3, r4, r5, pc}

080894f4 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80894f4:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80894f6:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80894f8:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80894fa:	b113      	cbz	r3, 8089502 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80894fc:	2203      	movs	r2, #3
 80894fe:	4601      	mov	r1, r0
 8089500:	4798      	blx	r3
    }
 8089502:	4620      	mov	r0, r4
 8089504:	bd10      	pop	{r4, pc}
	...

08089508 <_ZN23GoogleMapsDeviceLocatorC1Ev>:

static char requestBuf[256];
static char *requestCur;
static int numAdded = 0;

GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
 8089508:	b538      	push	{r3, r4, r5, lr}
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
 808950a:	4b0f      	ldr	r3, [pc, #60]	; (8089548 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x40>)

static char requestBuf[256];
static char *requestCur;
static int numAdded = 0;

GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
 808950c:	4604      	mov	r4, r0
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
 808950e:	6003      	str	r3, [r0, #0]
 8089510:	f242 7310 	movw	r3, #10000	; 0x2710
 8089514:	2500      	movs	r5, #0
 8089516:	6045      	str	r5, [r0, #4]
 8089518:	6083      	str	r3, [r0, #8]
 808951a:	490c      	ldr	r1, [pc, #48]	; (808954c <_ZN23GoogleMapsDeviceLocatorC1Ev+0x44>)
 808951c:	300c      	adds	r0, #12
 808951e:	f001 fd30 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
 8089522:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8089526:	62a3      	str	r3, [r4, #40]	; 0x28
 8089528:	61e5      	str	r5, [r4, #28]
 808952a:	6225      	str	r5, [r4, #32]
 808952c:	6265      	str	r5, [r4, #36]	; 0x24
 808952e:	4908      	ldr	r1, [pc, #32]	; (8089550 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x48>)
 8089530:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8089534:	f001 fd25 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
 8089538:	f44f 739b 	mov.w	r3, #310	; 0x136
 808953c:	63e3      	str	r3, [r4, #60]	; 0x3c
 808953e:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 8089542:	6423      	str	r3, [r4, #64]	; 0x40

}
 8089544:	4620      	mov	r0, r4
 8089546:	bd38      	pop	{r3, r4, r5, pc}
 8089548:	08093c9c 	.word	0x08093c9c
 808954c:	08093cda 	.word	0x08093cda
 8089550:	08093ce8 	.word	0x08093ce8

08089554 <_ZN23GoogleMapsDeviceLocator18withLocatePeriodicEm>:
}

GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withLocatePeriodic(unsigned long secondsPeriodic) {
	locatorMode = LOCATOR_MODE_PERIODIC;
	if (secondsPeriodic < 5) {
		secondsPeriodic = 5;
 8089554:	2904      	cmp	r1, #4
 8089556:	bf98      	it	ls
 8089558:	2105      	movls	r1, #5
	locatorMode = LOCATOR_MODE_ONCE;
	return *this;
}

GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withLocatePeriodic(unsigned long secondsPeriodic) {
	locatorMode = LOCATOR_MODE_PERIODIC;
 808955a:	2302      	movs	r3, #2
 808955c:	6043      	str	r3, [r0, #4]
	if (secondsPeriodic < 5) {
		secondsPeriodic = 5;
	}
	periodMs = secondsPeriodic * 1000;
 808955e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8089562:	4359      	muls	r1, r3
 8089564:	6081      	str	r1, [r0, #8]
	return *this;
}
 8089566:	4770      	bx	lr

08089568 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv>:
		numAdded++;
	}

}

const char *GoogleMapsDeviceLocator::cellularScanLTE() {
 8089568:	b5f0      	push	{r4, r5, r6, r7, lr}
 808956a:	4d35      	ldr	r5, [pc, #212]	; (8089640 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xd8>)
 808956c:	b097      	sub	sp, #92	; 0x5c
 808956e:	ac16      	add	r4, sp, #88	; 0x58

/**
 * All response objects inherit from this, so the parse() method can be called
 * in the subclass, and also the resp and enableDebug members are always available.
 */
class CellularHelperCommonResponse {
 8089570:	2600      	movs	r6, #0
 8089572:	f06f 0302 	mvn.w	r3, #2
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 8089576:	f844 5d40 	str.w	r5, [r4, #-64]!
 808957a:	4607      	mov	r7, r0
 808957c:	4931      	ldr	r1, [pc, #196]	; (8089644 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xdc>)
 808957e:	a809      	add	r0, sp, #36	; 0x24

/**
 * All response objects inherit from this, so the parse() method can be called
 * in the subclass, and also the resp and enableDebug members are always available.
 */
class CellularHelperCommonResponse {
 8089580:	9307      	str	r3, [sp, #28]
 8089582:	f88d 6020 	strb.w	r6, [sp, #32]
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 8089586:	f001 fcfc 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
 808958a:	492e      	ldr	r1, [pc, #184]	; (8089644 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xdc>)
 808958c:	a80d      	add	r0, sp, #52	; 0x34
 808958e:	f001 fcf8 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>

	void postProcess();
	String toString() const;
};

class CellularHelperCREGResponse :  public CellularHelperPlusStringResponse {
 8089592:	4b2d      	ldr	r3, [pc, #180]	; (8089648 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xe0>)

	CellularHelperCREGResponse resp;
	CellularHelper.getCREG(resp);
 8089594:	4621      	mov	r1, r4
 8089596:	9306      	str	r3, [sp, #24]
 8089598:	f64f 73ff 	movw	r3, #65535	; 0xffff
 808959c:	482b      	ldr	r0, [pc, #172]	; (808964c <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xe4>)
 808959e:	9313      	str	r3, [sp, #76]	; 0x4c
 80895a0:	f04f 33ff 	mov.w	r3, #4294967295
 80895a4:	9314      	str	r3, [sp, #80]	; 0x50
 80895a6:	f88d 6044 	strb.w	r6, [sp, #68]	; 0x44
 80895aa:	9612      	str	r6, [sp, #72]	; 0x48
 80895ac:	9615      	str	r6, [sp, #84]	; 0x54
 80895ae:	f000 fd95 	bl	808a0dc <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse>

	Serial.println(resp.toString().c_str());
 80895b2:	f002 ffb9 	bl	808c528 <_Z16_fetch_usbserialv>
 80895b6:	4606      	mov	r6, r0
 80895b8:	4621      	mov	r1, r4
 80895ba:	a802      	add	r0, sp, #8
 80895bc:	f000 fc76 	bl	8089eac <_ZNK26CellularHelperCREGResponse8toStringEv>

	// We know these things fit, so just using sprintf instead of snprintf here
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",", oper.c_str());
 80895c0:	4c23      	ldr	r4, [pc, #140]	; (8089650 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xe8>)
const char *GoogleMapsDeviceLocator::cellularScanLTE() {

	CellularHelperCREGResponse resp;
	CellularHelper.getCREG(resp);

	Serial.println(resp.toString().c_str());
 80895c2:	9902      	ldr	r1, [sp, #8]
 80895c4:	4630      	mov	r0, r6
 80895c6:	f001 ff08 	bl	808b3da <_ZN5Print7printlnEPKc>
 80895ca:	a802      	add	r0, sp, #8
 80895cc:	f001 fc92 	bl	808aef4 <_ZN6StringD1Ev>

	// We know these things fit, so just using sprintf instead of snprintf here
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",", oper.c_str());
 80895d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80895d2:	4920      	ldr	r1, [pc, #128]	; (8089654 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xec>)
 80895d4:	6820      	ldr	r0, [r4, #0]
 80895d6:	f001 f94f 	bl	808a878 <sprintf>
 80895da:	6823      	ldr	r3, [r4, #0]

	requestCur += sprintf(requestCur, "\"a\":[");
 80895dc:	491e      	ldr	r1, [pc, #120]	; (8089658 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xf0>)
	CellularHelper.getCREG(resp);

	Serial.println(resp.toString().c_str());

	// We know these things fit, so just using sprintf instead of snprintf here
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",", oper.c_str());
 80895de:	4403      	add	r3, r0

	requestCur += sprintf(requestCur, "\"a\":[");
 80895e0:	4618      	mov	r0, r3
 80895e2:	f005 f8df 	bl	808e7a4 <strcpy>

	if (resp.valid) {
 80895e6:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
	Serial.println(resp.toString().c_str());

	// We know these things fit, so just using sprintf instead of snprintf here
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",", oper.c_str());

	requestCur += sprintf(requestCur, "\"a\":[");
 80895ea:	3005      	adds	r0, #5
 80895ec:	6020      	str	r0, [r4, #0]
 80895ee:	4e1b      	ldr	r6, [pc, #108]	; (808965c <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xf4>)

	if (resp.valid) {
 80895f0:	b173      	cbz	r3, 8089610 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xa8>
		requestCur += sprintf(requestCur,
					"{\"i\":%d,\"l\":%u,\"c\":%d,\"n\":%d}",
					resp.ci, resp.lac, mcc, mnc);
 80895f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80895f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80895f6:	9301      	str	r3, [sp, #4]
 80895f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80895fa:	4919      	ldr	r1, [pc, #100]	; (8089660 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xf8>)
 80895fc:	9300      	str	r3, [sp, #0]
 80895fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8089600:	f001 f93a 	bl	808a878 <sprintf>
 8089604:	6823      	ldr	r3, [r4, #0]
 8089606:	4418      	add	r0, r3

		numAdded++;
 8089608:	6833      	ldr	r3, [r6, #0]
	requestCur += sprintf(requestCur, "\"a\":[");

	if (resp.valid) {
		requestCur += sprintf(requestCur,
					"{\"i\":%d,\"l\":%u,\"c\":%d,\"n\":%d}",
					resp.ci, resp.lac, mcc, mnc);
 808960a:	6020      	str	r0, [r4, #0]

		numAdded++;
 808960c:	3301      	adds	r3, #1
 808960e:	6033      	str	r3, [r6, #0]
	}

	*requestCur++ = ']';
 8089610:	6823      	ldr	r3, [r4, #0]
 8089612:	225d      	movs	r2, #93	; 0x5d
 8089614:	701a      	strb	r2, [r3, #0]
	*requestCur++ = '}';
 8089616:	227d      	movs	r2, #125	; 0x7d
 8089618:	705a      	strb	r2, [r3, #1]
	*requestCur++ = '}';
 808961a:	709a      	strb	r2, [r3, #2]
	*requestCur++ = 0;
 808961c:	1d1a      	adds	r2, r3, #4
 808961e:	6022      	str	r2, [r4, #0]
 8089620:	2200      	movs	r2, #0
 8089622:	70da      	strb	r2, [r3, #3]



	if (numAdded == 0) {
 8089624:	6833      	ldr	r3, [r6, #0]
 8089626:	b90b      	cbnz	r3, 808962c <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xc4>
		requestBuf[0] = 0;
 8089628:	4a0e      	ldr	r2, [pc, #56]	; (8089664 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xfc>)
 808962a:	7013      	strb	r3, [r2, #0]
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 808962c:	a80d      	add	r0, sp, #52	; 0x34
 808962e:	9506      	str	r5, [sp, #24]
 8089630:	f001 fc60 	bl	808aef4 <_ZN6StringD1Ev>
 8089634:	a809      	add	r0, sp, #36	; 0x24
 8089636:	f001 fc5d 	bl	808aef4 <_ZN6StringD1Ev>
	}

	return requestBuf;
}
 808963a:	480a      	ldr	r0, [pc, #40]	; (8089664 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xfc>)
 808963c:	b017      	add	sp, #92	; 0x5c
 808963e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8089640:	08094128 	.word	0x08094128
 8089644:	08094100 	.word	0x08094100
 8089648:	08093c84 	.word	0x08093c84
 808964c:	20000cf0 	.word	0x20000cf0
 8089650:	20000cec 	.word	0x20000cec
 8089654:	08093cc4 	.word	0x08093cc4
 8089658:	08093cd4 	.word	0x08093cd4
 808965c:	20000be4 	.word	0x20000be4
 8089660:	08093ca6 	.word	0x08093ca6
 8089664:	20000be9 	.word	0x20000be9

08089668 <_ZN23GoogleMapsDeviceLocator12cellularScanEv>:


const char *GoogleMapsDeviceLocator::cellularScan() {

	requestCur = requestBuf;
 8089668:	4a0a      	ldr	r2, [pc, #40]	; (8089694 <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x2c>)
 808966a:	4b0b      	ldr	r3, [pc, #44]	; (8089698 <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x30>)

	return requestBuf;
}


const char *GoogleMapsDeviceLocator::cellularScan() {
 808966c:	b510      	push	{r4, lr}

	requestCur = requestBuf;
 808966e:	601a      	str	r2, [r3, #0]
	numAdded = 0;
 8089670:	4b0a      	ldr	r3, [pc, #40]	; (808969c <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x34>)

	return requestBuf;
}


const char *GoogleMapsDeviceLocator::cellularScan() {
 8089672:	4604      	mov	r4, r0

	requestCur = requestBuf;
	numAdded = 0;
 8089674:	2200      	movs	r2, #0

	if (CellularHelper.isLTE()) {
 8089676:	480a      	ldr	r0, [pc, #40]	; (80896a0 <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x38>)


const char *GoogleMapsDeviceLocator::cellularScan() {

	requestCur = requestBuf;
	numAdded = 0;
 8089678:	601a      	str	r2, [r3, #0]

	if (CellularHelper.isLTE()) {
 808967a:	f000 fcc7 	bl	808a00c <_ZNK19CellularHelperClass5isLTEEv>
 808967e:	b120      	cbz	r0, 808968a <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x22>
		return cellularScanLTE();
 8089680:	4620      	mov	r0, r4
	if (numAdded == 0) {
		requestBuf[0] = 0;
	}

	return requestBuf;
}
 8089682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

	requestCur = requestBuf;
	numAdded = 0;

	if (CellularHelper.isLTE()) {
		return cellularScanLTE();
 8089686:	f7ff bf6f 	b.w	8089568 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv>
	if (numAdded == 0) {
		requestBuf[0] = 0;
	}

	return requestBuf;
}
 808968a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808968e:	f7ff be99 	b.w	80893c4 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5>
 8089692:	bf00      	nop
 8089694:	20000be9 	.word	0x20000be9
 8089698:	20000cec 	.word	0x20000cec
 808969c:	20000be4 	.word	0x20000be4
 80896a0:	20000cf0 	.word	0x20000cf0

080896a4 <_ZN23GoogleMapsDeviceLocator15publishLocationEv>:
	return cellularScan();
#endif
}


void GoogleMapsDeviceLocator::publishLocation() {
 80896a4:	b530      	push	{r4, r5, lr}
 80896a6:	4605      	mov	r5, r0
 80896a8:	b085      	sub	sp, #20

	Serial.println("publishLocation");
 80896aa:	f002 ff3d 	bl	808c528 <_Z16_fetch_usbserialv>
 80896ae:	4918      	ldr	r1, [pc, #96]	; (8089710 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x6c>)
 80896b0:	f001 fe93 	bl	808b3da <_ZN5Print7printlnEPKc>
const char *GoogleMapsDeviceLocator::scan() {
#if Wiring_WiFi
	return wifiScan();
#endif
#if Wiring_Cellular
	return cellularScan();
 80896b4:	4628      	mov	r0, r5
 80896b6:	f7ff ffd7 	bl	8089668 <_ZN23GoogleMapsDeviceLocator12cellularScanEv>
 80896ba:	4604      	mov	r4, r0

	Serial.println("publishLocation");

	const char *scanData = scan();

	Serial.printlnf("scanData=%s", scanData);
 80896bc:	f002 ff34 	bl	808c528 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
 80896c0:	4623      	mov	r3, r4
 80896c2:	4a14      	ldr	r2, [pc, #80]	; (8089714 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x70>)
 80896c4:	2101      	movs	r1, #1
 80896c6:	f001 ffbd 	bl	808b644 <_ZN5Print11printf_implEbPKcz>

	if (scanData[0]) {
 80896ca:	7823      	ldrb	r3, [r4, #0]
 80896cc:	b1f3      	cbz	r3, 808970c <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80896ce:	f001 f88b 	bl	808a7e8 <spark_cloud_flag_connected>

		if (Particle.connected()) {
 80896d2:	b1d8      	cbz	r0, 808970c <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>
 80896d4:	4b10      	ldr	r3, [pc, #64]	; (8089718 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x74>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80896d6:	4622      	mov	r2, r4
 80896d8:	781b      	ldrb	r3, [r3, #0]
 80896da:	68e9      	ldr	r1, [r5, #12]
 80896dc:	f88d 3000 	strb.w	r3, [sp]
 80896e0:	a802      	add	r0, sp, #8
 80896e2:	233c      	movs	r3, #60	; 0x3c
 80896e4:	f002 fcde 	bl	808c0a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80896e8:	9c03      	ldr	r4, [sp, #12]
 80896ea:	b17c      	cbz	r4, 808970c <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80896ec:	6863      	ldr	r3, [r4, #4]
 80896ee:	3b01      	subs	r3, #1
 80896f0:	6063      	str	r3, [r4, #4]
 80896f2:	b95b      	cbnz	r3, 808970c <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>
        {
          _M_dispose();
 80896f4:	6823      	ldr	r3, [r4, #0]
 80896f6:	4620      	mov	r0, r4
 80896f8:	689b      	ldr	r3, [r3, #8]
 80896fa:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80896fc:	68a3      	ldr	r3, [r4, #8]
 80896fe:	3b01      	subs	r3, #1
 8089700:	60a3      	str	r3, [r4, #8]
 8089702:	b91b      	cbnz	r3, 808970c <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>
            _M_destroy();
 8089704:	6823      	ldr	r3, [r4, #0]
 8089706:	4620      	mov	r0, r4
 8089708:	68db      	ldr	r3, [r3, #12]
 808970a:	4798      	blx	r3
			Particle.publish(eventName, scanData, PRIVATE);
		}
	}
}
 808970c:	b005      	add	sp, #20
 808970e:	bd30      	pop	{r4, r5, pc}
 8089710:	08093ced 	.word	0x08093ced
 8089714:	08093cfd 	.word	0x08093cfd
 8089718:	20000be8 	.word	0x20000be8

0808971c <_ZN23GoogleMapsDeviceLocator4loopEv>:
	return *this;
}



void GoogleMapsDeviceLocator::loop() {
 808971c:	b510      	push	{r4, lr}
	switch(state) {
 808971e:	6a03      	ldr	r3, [r0, #32]
	return *this;
}



void GoogleMapsDeviceLocator::loop() {
 8089720:	4604      	mov	r4, r0
	switch(state) {
 8089722:	2b02      	cmp	r3, #2
 8089724:	d00b      	beq.n	808973e <_ZN23GoogleMapsDeviceLocator4loopEv+0x22>
 8089726:	2b03      	cmp	r3, #3
 8089728:	d023      	beq.n	8089772 <_ZN23GoogleMapsDeviceLocator4loopEv+0x56>
 808972a:	2b00      	cmp	r3, #0
 808972c:	d134      	bne.n	8089798 <_ZN23GoogleMapsDeviceLocator4loopEv+0x7c>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808972e:	f001 f85b 	bl	808a7e8 <spark_cloud_flag_connected>
	case CONNECT_WAIT_STATE:
		if (Particle.connected()) {
 8089732:	b388      	cbz	r0, 8089798 <_ZN23GoogleMapsDeviceLocator4loopEv+0x7c>
			state = CONNECTED_WAIT_STATE;
 8089734:	2302      	movs	r3, #2
 8089736:	6223      	str	r3, [r4, #32]
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8089738:	f000 fe52 	bl	808a3e0 <HAL_Timer_Get_Milli_Seconds>
 808973c:	e017      	b.n	808976e <_ZN23GoogleMapsDeviceLocator4loopEv+0x52>
 808973e:	f000 fe4f 	bl	808a3e0 <HAL_Timer_Get_Milli_Seconds>
			stateTime = millis();
		}
		break;

	case CONNECTED_WAIT_STATE:
		if (millis() - stateTime >= waitAfterConnect) {
 8089742:	69e3      	ldr	r3, [r4, #28]
 8089744:	1ac0      	subs	r0, r0, r3
 8089746:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8089748:	4298      	cmp	r0, r3
 808974a:	d325      	bcc.n	8089798 <_ZN23GoogleMapsDeviceLocator4loopEv+0x7c>
			// Wait several seconds after connecting before doing the location
			if (locatorMode == LOCATOR_MODE_ONCE) {
 808974c:	6863      	ldr	r3, [r4, #4]
 808974e:	2b01      	cmp	r3, #1
 8089750:	d103      	bne.n	808975a <_ZN23GoogleMapsDeviceLocator4loopEv+0x3e>
				publishLocation();
 8089752:	4620      	mov	r0, r4
 8089754:	f7ff ffa6 	bl	80896a4 <_ZN23GoogleMapsDeviceLocator15publishLocationEv>
 8089758:	e000      	b.n	808975c <_ZN23GoogleMapsDeviceLocator4loopEv+0x40>

				state = IDLE_STATE;
			}
			else
			if (locatorMode == LOCATOR_MODE_MANUAL) {
 808975a:	b913      	cbnz	r3, 8089762 <_ZN23GoogleMapsDeviceLocator4loopEv+0x46>
				state = IDLE_STATE;
 808975c:	2304      	movs	r3, #4
 808975e:	6223      	str	r3, [r4, #32]
 8089760:	bd10      	pop	{r4, pc}
			}
			else {
				state = CONNECTED_STATE;
 8089762:	2303      	movs	r3, #3
 8089764:	6223      	str	r3, [r4, #32]
 8089766:	f000 fe3b 	bl	808a3e0 <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis() - periodMs;
 808976a:	68a3      	ldr	r3, [r4, #8]
 808976c:	1ac0      	subs	r0, r0, r3
 808976e:	61e0      	str	r0, [r4, #28]
 8089770:	bd10      	pop	{r4, pc}
 8089772:	f001 f839 	bl	808a7e8 <spark_cloud_flag_connected>
			}
		}
		break;

	case CONNECTED_STATE:
		if (Particle.connected()) {
 8089776:	b170      	cbz	r0, 8089796 <_ZN23GoogleMapsDeviceLocator4loopEv+0x7a>
 8089778:	f000 fe32 	bl	808a3e0 <HAL_Timer_Get_Milli_Seconds>
			if (millis() - stateTime >= periodMs) {
 808977c:	69e3      	ldr	r3, [r4, #28]
 808977e:	1ac0      	subs	r0, r0, r3
 8089780:	68a3      	ldr	r3, [r4, #8]
 8089782:	4298      	cmp	r0, r3
 8089784:	d308      	bcc.n	8089798 <_ZN23GoogleMapsDeviceLocator4loopEv+0x7c>
 8089786:	f000 fe2b 	bl	808a3e0 <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis();
 808978a:	61e0      	str	r0, [r4, #28]
				publishLocation();
 808978c:	4620      	mov	r0, r4
	case IDLE_STATE:
		// Just hang out here forever (entered only on LOCATOR_MODE_ONCE)
		break;
	}

}
 808978e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

	case CONNECTED_STATE:
		if (Particle.connected()) {
			if (millis() - stateTime >= periodMs) {
				stateTime = millis();
				publishLocation();
 8089792:	f7ff bf87 	b.w	80896a4 <_ZN23GoogleMapsDeviceLocator15publishLocationEv>
			}
		}
		else {
			// We have disconnected, rec
			state = CONNECT_WAIT_STATE;
 8089796:	6220      	str	r0, [r4, #32]
 8089798:	bd10      	pop	{r4, pc}

0808979a <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 808979a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808979c:	2300      	movs	r3, #0
 808979e:	6083      	str	r3, [r0, #8]
 80897a0:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80897a2:	4604      	mov	r4, r0
 80897a4:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80897a6:	b12b      	cbz	r3, 80897b4 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80897a8:	2202      	movs	r2, #2
 80897aa:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80897ac:	68eb      	ldr	r3, [r5, #12]
 80897ae:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80897b0:	68ab      	ldr	r3, [r5, #8]
 80897b2:	60a3      	str	r3, [r4, #8]
	}
    }
 80897b4:	4620      	mov	r0, r4
 80897b6:	bd38      	pop	{r3, r4, r5, pc}

080897b8 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE>:
GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withEventName(const char *name) {
	this->eventName = name;
	return *this;
}

GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withSubscribe(GoogleMapsDeviceLocatorSubscriptionCallback callback) {
 80897b8:	b530      	push	{r4, r5, lr}
 80897ba:	b08b      	sub	sp, #44	; 0x2c
 80897bc:	68c5      	ldr	r5, [r0, #12]
	this->callback = callback;
 80897be:	6241      	str	r1, [r0, #36]	; 0x24
GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withEventName(const char *name) {
	this->eventName = name;
	return *this;
}

GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withSubscribe(GoogleMapsDeviceLocatorSubscriptionCallback callback) {
 80897c0:	4604      	mov	r4, r0
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
 80897c2:	a806      	add	r0, sp, #24
 80897c4:	f001 f818 	bl	808a7f8 <spark_deviceID>
	this->callback = callback;

	snprintf(requestBuf, sizeof(requestBuf), "hook-response/%s/%s", eventName.c_str(), System.deviceID().c_str());
 80897c8:	9b06      	ldr	r3, [sp, #24]
 80897ca:	4a1c      	ldr	r2, [pc, #112]	; (808983c <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x84>)
 80897cc:	9300      	str	r3, [sp, #0]
 80897ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80897d2:	462b      	mov	r3, r5
 80897d4:	481a      	ldr	r0, [pc, #104]	; (8089840 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x88>)
 80897d6:	f001 f86f 	bl	808a8b8 <snprintf>
 80897da:	a806      	add	r0, sp, #24
 80897dc:	f001 fb8a 	bl	808aef4 <_ZN6StringD1Ev>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80897e0:	2500      	movs	r5, #0
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80897e2:	200c      	movs	r0, #12
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80897e4:	9504      	str	r5, [sp, #16]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80897e6:	f7f6 fc5a 	bl	808009e <_Znwj>
 80897ea:	b118      	cbz	r0, 80897f4 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x3c>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
 80897ec:	4b15      	ldr	r3, [pc, #84]	; (8089844 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x8c>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80897ee:	6084      	str	r4, [r0, #8]
 80897f0:	e880 0028 	stmia.w	r0, {r3, r5}
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80897f4:	4b14      	ldr	r3, [pc, #80]	; (8089848 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x90>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80897f6:	9002      	str	r0, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80897f8:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 80897fa:	4b14      	ldr	r3, [pc, #80]	; (808984c <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x94>)
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, MY_DEVICES, deviceID, NULL), false);
    }

    bool subscribe(const char *eventName, wiring_event_handler_t handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return subscribe_wiring(eventName, handler, scope);
 80897fc:	a902      	add	r1, sp, #8
 80897fe:	a806      	add	r0, sp, #24
 8089800:	9304      	str	r3, [sp, #16]
 8089802:	f7ff ffca 	bl	808979a <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
    {
#ifdef SPARK_NO_CLOUD
        return false;
#else
        bool success = false;
        if (handler) // if the call-wrapper has wrapped a callable object
 8089806:	9b08      	ldr	r3, [sp, #32]
 8089808:	b17b      	cbz	r3, 808982a <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x72>
        {
            auto wrapper = new wiring_event_handler_t(handler);
 808980a:	2010      	movs	r0, #16
 808980c:	f7f6 fc47 	bl	808009e <_Znwj>
 8089810:	4605      	mov	r5, r0
 8089812:	b150      	cbz	r0, 808982a <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x72>
 8089814:	a906      	add	r1, sp, #24
 8089816:	f7ff ffc0 	bl	808979a <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
            if (wrapper) {
                success = spark_subscribe(eventName, (EventHandler)call_wiring_event_handler, wrapper, scope, deviceID, NULL);
 808981a:	2300      	movs	r3, #0
 808981c:	9301      	str	r3, [sp, #4]
 808981e:	9300      	str	r3, [sp, #0]
 8089820:	462a      	mov	r2, r5
 8089822:	490b      	ldr	r1, [pc, #44]	; (8089850 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x98>)
 8089824:	4806      	ldr	r0, [pc, #24]	; (8089840 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x88>)
 8089826:	f000 fff7 	bl	808a818 <spark_subscribe>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808982a:	a806      	add	r0, sp, #24
 808982c:	f7ff fe62 	bl	80894f4 <_ZNSt14_Function_baseD1Ev>
 8089830:	a802      	add	r0, sp, #8
 8089832:	f7ff fe5f 	bl	80894f4 <_ZNSt14_Function_baseD1Ev>

	Particle.subscribe(requestBuf, &GoogleMapsDeviceLocator::subscriptionHandler, this, MY_DEVICES);

	return *this;
}
 8089836:	4620      	mov	r0, r4
 8089838:	b00b      	add	sp, #44	; 0x2c
 808983a:	bd30      	pop	{r4, r5, pc}
 808983c:	08093d09 	.word	0x08093d09
 8089840:	20000be9 	.word	0x20000be9
 8089844:	0808934d 	.word	0x0808934d
 8089848:	0808927d 	.word	0x0808927d
 808984c:	080894bd 	.word	0x080894bd
 8089850:	0808be69 	.word	0x0808be69

08089854 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev>:
 8089854:	4b02      	ldr	r3, [pc, #8]	; (8089860 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev+0xc>)
 8089856:	2201      	movs	r2, #1
 8089858:	701a      	strb	r2, [r3, #0]
 808985a:	f000 bd21 	b.w	808a2a0 <HAL_Pin_Map>
 808985e:	bf00      	nop
 8089860:	20000be8 	.word	0x20000be8

08089864 <_ZN19CellularHelperClass16responseCallbackEiPKciPv>:
	}
	return bars;
}

// static
int CellularHelperClass::responseCallback(int type, const char* buf, int len, void *param) {
 8089864:	b430      	push	{r4, r5}
 8089866:	461c      	mov	r4, r3
	CellularHelperCommonResponse *presp = (CellularHelperCommonResponse *)param;

	return presp->parse(type, buf, len);
 8089868:	681b      	ldr	r3, [r3, #0]
 808986a:	681d      	ldr	r5, [r3, #0]
 808986c:	4613      	mov	r3, r2
 808986e:	46ac      	mov	ip, r5
 8089870:	460a      	mov	r2, r1
 8089872:	4601      	mov	r1, r0
 8089874:	4620      	mov	r0, r4
}
 8089876:	bc30      	pop	{r4, r5}

// static
int CellularHelperClass::responseCallback(int type, const char* buf, int len, void *param) {
	CellularHelperCommonResponse *presp = (CellularHelperCommonResponse *)param;

	return presp->parse(type, buf, len);
 8089878:	4760      	bx	ip
	...

0808987c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>:
static LogClass Log;
#endif

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
 808987c:	b570      	push	{r4, r5, r6, lr}
 808987e:	460c      	mov	r4, r1
 8089880:	b08c      	sub	sp, #48	; 0x30
	String typeStr;
 8089882:	494c      	ldr	r1, [pc, #304]	; (80899b4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x138>)
 8089884:	a804      	add	r0, sp, #16
static LogClass Log;
#endif

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
 8089886:	4615      	mov	r5, r2
 8089888:	461e      	mov	r6, r3
	String typeStr;
 808988a:	f001 fb7a 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
	switch(type) {
 808988e:	f5b4 1f10 	cmp.w	r4, #2359296	; 0x240000
 8089892:	d035      	beq.n	8089900 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x84>
 8089894:	dc13      	bgt.n	80898be <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x42>
 8089896:	f5b4 1f90 	cmp.w	r4, #1179648	; 0x120000
 808989a:	d028      	beq.n	80898ee <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x72>
 808989c:	dc05      	bgt.n	80898aa <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x2e>
 808989e:	b324      	cbz	r4, 80898ea <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x6e>
 80898a0:	f5b4 1f88 	cmp.w	r4, #1114112	; 0x110000
 80898a4:	d136      	bne.n	8089914 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
	case TYPE_UNKNOWN:
		typeStr = "TYPE_UNKNOWN";
		break;

	case TYPE_OK:
		typeStr = "TYPE_OK";
 80898a6:	4944      	ldr	r1, [pc, #272]	; (80899b8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x13c>)
 80898a8:	e022      	b.n	80898f0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
	String typeStr;
	switch(type) {
 80898aa:	f5b4 1f08 	cmp.w	r4, #2228224	; 0x220000
 80898ae:	d023      	beq.n	80898f8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x7c>
 80898b0:	f5b4 1f0c 	cmp.w	r4, #2293760	; 0x230000
 80898b4:	d022      	beq.n	80898fc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x80>
 80898b6:	f5b4 1f04 	cmp.w	r4, #2162688	; 0x210000
 80898ba:	d12b      	bne.n	8089914 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
 80898bc:	e017      	b.n	80898ee <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x72>
 80898be:	f5b4 1f40 	cmp.w	r4, #3145728	; 0x300000
 80898c2:	d021      	beq.n	8089908 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
 80898c4:	dc07      	bgt.n	80898d6 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x5a>
 80898c6:	f5b4 1f14 	cmp.w	r4, #2424832	; 0x250000
 80898ca:	d01b      	beq.n	8089904 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x88>
 80898cc:	f5b4 1f18 	cmp.w	r4, #2490368	; 0x260000
 80898d0:	d120      	bne.n	8089914 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
	case TYPE_BUSY:
		typeStr = "TYPE_BUSY";
		break;

	case TYPE_NOANSWER:
		typeStr = "TYPE_NOANSWER";
 80898d2:	493a      	ldr	r1, [pc, #232]	; (80899bc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x140>)
 80898d4:	e00c      	b.n	80898f0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
	String typeStr;
	switch(type) {
 80898d6:	f5b4 0fa0 	cmp.w	r4, #5242880	; 0x500000
 80898da:	d017      	beq.n	808990c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x90>
 80898dc:	f5b4 0fc0 	cmp.w	r4, #6291456	; 0x600000
 80898e0:	d016      	beq.n	8089910 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x94>
 80898e2:	f5b4 0f80 	cmp.w	r4, #4194304	; 0x400000
 80898e6:	d115      	bne.n	8089914 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
 80898e8:	e010      	b.n	808990c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x90>
	case TYPE_UNKNOWN:
		typeStr = "TYPE_UNKNOWN";
 80898ea:	4935      	ldr	r1, [pc, #212]	; (80899c0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x144>)
 80898ec:	e000      	b.n	80898f0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
	case TYPE_ERROR:
		typeStr = "TYPE_ERROR";
		break;

	case TYPE_RING:
		typeStr = "TYPE_ERROR";
 80898ee:	4935      	ldr	r1, [pc, #212]	; (80899c4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x148>)
	case TYPE_UNKNOWN:
		typeStr = "TYPE_UNKNOWN";
		break;

	case TYPE_OK:
		typeStr = "TYPE_OK";
 80898f0:	a804      	add	r0, sp, #16
 80898f2:	f001 fb98 	bl	808b026 <_ZN6StringaSEPKc>
		break;
 80898f6:	e019      	b.n	808992c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xb0>
	case TYPE_RING:
		typeStr = "TYPE_ERROR";
		break;

	case TYPE_CONNECT:
		typeStr = "TYPE_CONNECT";
 80898f8:	4933      	ldr	r1, [pc, #204]	; (80899c8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x14c>)
 80898fa:	e7f9      	b.n	80898f0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	case TYPE_NOCARRIER:
		typeStr = "TYPE_NOCARRIER";
 80898fc:	4933      	ldr	r1, [pc, #204]	; (80899cc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x150>)
 80898fe:	e7f7      	b.n	80898f0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	case TYPE_NODIALTONE:
		typeStr = "TYPE_NODIALTONE";
 8089900:	4933      	ldr	r1, [pc, #204]	; (80899d0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x154>)
 8089902:	e7f5      	b.n	80898f0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	case TYPE_BUSY:
		typeStr = "TYPE_BUSY";
 8089904:	4933      	ldr	r1, [pc, #204]	; (80899d4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x158>)
 8089906:	e7f3      	b.n	80898f0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
	case TYPE_NOANSWER:
		typeStr = "TYPE_NOANSWER";
		break;

	case TYPE_PROMPT:
		typeStr = "TYPE_PROMPT";
 8089908:	4933      	ldr	r1, [pc, #204]	; (80899d8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x15c>)
 808990a:	e7f1      	b.n	80898f0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
	case TYPE_PLUS:
		typeStr = "TYPE_PLUS";
		break;

	case TYPE_TEXT:
		typeStr = "TYPE_PLUS";
 808990c:	4933      	ldr	r1, [pc, #204]	; (80899dc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x160>)
 808990e:	e7ef      	b.n	80898f0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	case TYPE_ABORTED:
		typeStr = "TYPE_ABORTED";
 8089910:	4933      	ldr	r1, [pc, #204]	; (80899e0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x164>)
 8089912:	e7ed      	b.n	80898f0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	default:
		typeStr = String::format("type=0x%x", type);
 8089914:	4622      	mov	r2, r4
 8089916:	4933      	ldr	r1, [pc, #204]	; (80899e4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x168>)
 8089918:	a808      	add	r0, sp, #32
 808991a:	f001 fd0d 	bl	808b338 <_ZN6String6formatEPKcz>
 808991e:	a908      	add	r1, sp, #32
 8089920:	a804      	add	r0, sp, #16
 8089922:	f001 fb78 	bl	808b016 <_ZN6StringaSEOS_>
 8089926:	a808      	add	r0, sp, #32
 8089928:	f001 fae4 	bl	808aef4 <_ZN6StringD1Ev>
		break;
	}

	Log.info("cellular response type=%s len=%d", typeStr.c_str(), len);
 808992c:	4633      	mov	r3, r6
 808992e:	9a04      	ldr	r2, [sp, #16]
 8089930:	492d      	ldr	r1, [pc, #180]	; (80899e8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x16c>)
 8089932:	482e      	ldr	r0, [pc, #184]	; (80899ec <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
 8089934:	f7f7 fa38 	bl	8080da8 <_ZNK5spark6Logger4infoEPKcz>
	String out;
 8089938:	491e      	ldr	r1, [pc, #120]	; (80899b4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x138>)
 808993a:	a808      	add	r0, sp, #32
 808993c:	f001 fb21 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
 8089940:	462c      	mov	r4, r5
	for(int ii = 0; ii < len; ii++) {
 8089942:	1b63      	subs	r3, r4, r5
 8089944:	429e      	cmp	r6, r3
 8089946:	dd27      	ble.n	8089998 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x11c>
		if (buf[ii] == '\n') {
 8089948:	f814 3b01 	ldrb.w	r3, [r4], #1
 808994c:	2b0a      	cmp	r3, #10
 808994e:	d10c      	bne.n	808996a <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xee>
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8089950:	4927      	ldr	r1, [pc, #156]	; (80899f0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x174>)
 8089952:	a808      	add	r0, sp, #32
 8089954:	f001 fbf7 	bl	808b146 <_ZN6String6concatEPKc>
			out += "\\n";
			Log.info(out);
 8089958:	9908      	ldr	r1, [sp, #32]
 808995a:	4824      	ldr	r0, [pc, #144]	; (80899ec <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
 808995c:	f7f7 fa24 	bl	8080da8 <_ZNK5spark6Logger4infoEPKcz>
			out = "";
 8089960:	4914      	ldr	r1, [pc, #80]	; (80899b4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x138>)
 8089962:	a808      	add	r0, sp, #32
 8089964:	f001 fb5f 	bl	808b026 <_ZN6StringaSEPKc>
 8089968:	e7eb      	b.n	8089942 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xc6>
		}
		else
		if (buf[ii] == '\r') {
 808996a:	2b0d      	cmp	r3, #13
 808996c:	d101      	bne.n	8089972 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xf6>
 808996e:	4921      	ldr	r1, [pc, #132]	; (80899f4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x178>)
 8089970:	e009      	b.n	8089986 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x10a>
			out += "\\r";
		}
		else
		if (buf[ii] < ' ' || buf[ii] >= 127) {
 8089972:	f1a3 0220 	sub.w	r2, r3, #32
 8089976:	2a5e      	cmp	r2, #94	; 0x5e
 8089978:	d909      	bls.n	808998e <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x112>
			char hex[10];
			snprintf(hex, sizeof(hex), "0x%02x", buf[ii]);
 808997a:	210a      	movs	r1, #10
 808997c:	4a1e      	ldr	r2, [pc, #120]	; (80899f8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x17c>)
 808997e:	a801      	add	r0, sp, #4
 8089980:	f000 ff9a 	bl	808a8b8 <snprintf>
			out.concat(hex);
 8089984:	a901      	add	r1, sp, #4
 8089986:	a808      	add	r0, sp, #32
 8089988:	f001 fbdd 	bl	808b146 <_ZN6String6concatEPKc>
 808998c:	e7d9      	b.n	8089942 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xc6>
		}
		else {
			out.concat(buf[ii]);
 808998e:	4619      	mov	r1, r3
 8089990:	a808      	add	r0, sp, #32
 8089992:	f001 fbe7 	bl	808b164 <_ZN6String6concatEc>
		break;
	}

	Log.info("cellular response type=%s len=%d", typeStr.c_str(), len);
	String out;
	for(int ii = 0; ii < len; ii++) {
 8089996:	e7d4      	b.n	8089942 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xc6>
		}
		else {
			out.concat(buf[ii]);
		}
	}
	if (out.length() > 0) {
 8089998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808999a:	b11b      	cbz	r3, 80899a4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x128>
		Log.info(out);
 808999c:	9908      	ldr	r1, [sp, #32]
 808999e:	4813      	ldr	r0, [pc, #76]	; (80899ec <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
 80899a0:	f7f7 fa02 	bl	8080da8 <_ZNK5spark6Logger4infoEPKcz>
		typeStr = String::format("type=0x%x", type);
		break;
	}

	Log.info("cellular response type=%s len=%d", typeStr.c_str(), len);
	String out;
 80899a4:	a808      	add	r0, sp, #32
 80899a6:	f001 faa5 	bl	808aef4 <_ZN6StringD1Ev>
#endif

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
	String typeStr;
 80899aa:	a804      	add	r0, sp, #16
 80899ac:	f001 faa2 	bl	808aef4 <_ZN6StringD1Ev>
		}
	}
	if (out.length() > 0) {
		Log.info(out);
	}
}
 80899b0:	b00c      	add	sp, #48	; 0x30
 80899b2:	bd70      	pop	{r4, r5, r6, pc}
 80899b4:	08094100 	.word	0x08094100
 80899b8:	08093d39 	.word	0x08093d39
 80899bc:	08093d82 	.word	0x08093d82
 80899c0:	08093d2c 	.word	0x08093d2c
 80899c4:	08093d41 	.word	0x08093d41
 80899c8:	08093d4c 	.word	0x08093d4c
 80899cc:	08093d59 	.word	0x08093d59
 80899d0:	08093d68 	.word	0x08093d68
 80899d4:	08093d78 	.word	0x08093d78
 80899d8:	08093d90 	.word	0x08093d90
 80899dc:	08093d9c 	.word	0x08093d9c
 80899e0:	08093da6 	.word	0x08093da6
 80899e4:	08093db3 	.word	0x08093db3
 80899e8:	08093dbd 	.word	0x08093dbd
 80899ec:	20000cf8 	.word	0x20000cf8
 80899f0:	08093dde 	.word	0x08093dde
 80899f4:	08093de1 	.word	0x08093de1
 80899f8:	08093de4 	.word	0x08093de4

080899fc <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb>:
		}
	}
	return WAIT;
}

String CellularHelperPlusStringResponse::getDoubleQuotedPart(bool onlyFirst) const {
 80899fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8089a00:	460f      	mov	r7, r1
 8089a02:	4606      	mov	r6, r0
	String result;
 8089a04:	4914      	ldr	r1, [pc, #80]	; (8089a58 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x5c>)
		}
	}
	return WAIT;
}

String CellularHelperPlusStringResponse::getDoubleQuotedPart(bool onlyFirst) const {
 8089a06:	4690      	mov	r8, r2
	String result;
	bool inQuoted = false;

	result.reserve(string.length());

	for(size_t ii = 0; ii < string.length(); ii++) {
 8089a08:	2500      	movs	r5, #0
	}
	return WAIT;
}

String CellularHelperPlusStringResponse::getDoubleQuotedPart(bool onlyFirst) const {
	String result;
 8089a0a:	f001 faba 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
	bool inQuoted = false;

	result.reserve(string.length());
 8089a0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8089a10:	4630      	mov	r0, r6
 8089a12:	f001 fa8d 	bl	808af30 <_ZN6String7reserveEj>
	return WAIT;
}

String CellularHelperPlusStringResponse::getDoubleQuotedPart(bool onlyFirst) const {
	String result;
	bool inQuoted = false;
 8089a16:	462c      	mov	r4, r5

	result.reserve(string.length());

	for(size_t ii = 0; ii < string.length(); ii++) {
		char ch = string.charAt(ii);
 8089a18:	f107 091c 	add.w	r9, r7, #28
	String result;
	bool inQuoted = false;

	result.reserve(string.length());

	for(size_t ii = 0; ii < string.length(); ii++) {
 8089a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8089a1e:	429d      	cmp	r5, r3
 8089a20:	d216      	bcs.n	8089a50 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x54>
		char ch = string.charAt(ii);
 8089a22:	4629      	mov	r1, r5
 8089a24:	4648      	mov	r0, r9
 8089a26:	f001 fc3b 	bl	808b2a0 <_ZNK6String6charAtEj>
		if (ch == '"') {
 8089a2a:	2822      	cmp	r0, #34	; 0x22
	bool inQuoted = false;

	result.reserve(string.length());

	for(size_t ii = 0; ii < string.length(); ii++) {
		char ch = string.charAt(ii);
 8089a2c:	4601      	mov	r1, r0
		if (ch == '"') {
 8089a2e:	d107      	bne.n	8089a40 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x44>
			inQuoted = !inQuoted;
 8089a30:	f084 0301 	eor.w	r3, r4, #1
 8089a34:	b2db      	uxtb	r3, r3
			if (!inQuoted && onlyFirst) {
 8089a36:	b144      	cbz	r4, 8089a4a <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x4e>
 8089a38:	f1b8 0f00 	cmp.w	r8, #0
 8089a3c:	d005      	beq.n	8089a4a <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x4e>
 8089a3e:	e007      	b.n	8089a50 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x54>
				break;
			}
		}
		else {
			if (inQuoted) {
 8089a40:	b114      	cbz	r4, 8089a48 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x4c>
				result.concat(ch);
 8089a42:	4630      	mov	r0, r6
 8089a44:	f001 fb8e 	bl	808b164 <_ZN6String6concatEc>
 8089a48:	4623      	mov	r3, r4
	String result;
	bool inQuoted = false;

	result.reserve(string.length());

	for(size_t ii = 0; ii < string.length(); ii++) {
 8089a4a:	3501      	adds	r5, #1
 8089a4c:	461c      	mov	r4, r3
 8089a4e:	e7e5      	b.n	8089a1c <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x20>
			}
		}
	}

	return result;
}
 8089a50:	4630      	mov	r0, r6
 8089a52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8089a56:	bf00      	nop
 8089a58:	08094100 	.word	0x08094100

08089a5c <_ZN32CellularHelperPlusStringResponseC1Ev>:
 8089a5c:	b538      	push	{r3, r4, r5, lr}
 8089a5e:	4604      	mov	r4, r0

/**
 * All response objects inherit from this, so the parse() method can be called
 * in the subclass, and also the resp and enableDebug members are always available.
 */
class CellularHelperCommonResponse {
 8089a60:	f06f 0302 	mvn.w	r3, #2
 8089a64:	6043      	str	r3, [r0, #4]
 8089a66:	2300      	movs	r3, #0
 8089a68:	7203      	strb	r3, [r0, #8]
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 8089a6a:	4d07      	ldr	r5, [pc, #28]	; (8089a88 <_ZN32CellularHelperPlusStringResponseC1Ev+0x2c>)
 8089a6c:	4b07      	ldr	r3, [pc, #28]	; (8089a8c <_ZN32CellularHelperPlusStringResponseC1Ev+0x30>)
 8089a6e:	4629      	mov	r1, r5
 8089a70:	f840 3b0c 	str.w	r3, [r0], #12
 8089a74:	f001 fa85 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
 8089a78:	4629      	mov	r1, r5
 8089a7a:	f104 001c 	add.w	r0, r4, #28
 8089a7e:	f001 fa80 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
 8089a82:	4620      	mov	r0, r4
 8089a84:	bd38      	pop	{r3, r4, r5, pc}
 8089a86:	bf00      	nop
 8089a88:	08094100 	.word	0x08094100
 8089a8c:	08094128 	.word	0x08094128

08089a90 <_ZN32CellularHelperPlusStringResponseD1Ev>:
 8089a90:	b510      	push	{r4, lr}
 8089a92:	4604      	mov	r4, r0
 8089a94:	4b05      	ldr	r3, [pc, #20]	; (8089aac <_ZN32CellularHelperPlusStringResponseD1Ev+0x1c>)
 8089a96:	f840 3b1c 	str.w	r3, [r0], #28
 8089a9a:	f001 fa2b 	bl	808aef4 <_ZN6StringD1Ev>
 8089a9e:	f104 000c 	add.w	r0, r4, #12
 8089aa2:	f001 fa27 	bl	808aef4 <_ZN6StringD1Ev>
 8089aa6:	4620      	mov	r0, r4
 8089aa8:	bd10      	pop	{r4, pc}
 8089aaa:	bf00      	nop
 8089aac:	08094128 	.word	0x08094128

08089ab0 <_ZN33CellularHelperEnvironmentResponseC1EP33CellularHelperEnvironmentCellDataj>:
		resp = RESP_ERROR;
	}
}


CellularHelperEnvironmentResponse::CellularHelperEnvironmentResponse(CellularHelperEnvironmentCellData *neighbors, size_t numNeighbors) :
 8089ab0:	b570      	push	{r4, r5, r6, lr}
 8089ab2:	4604      	mov	r4, r0
 8089ab4:	4615      	mov	r5, r2
 8089ab6:	460e      	mov	r6, r1
	neighbors(neighbors), numNeighbors(numNeighbors) {
 8089ab8:	f7ff ffd0 	bl	8089a5c <_ZN32CellularHelperPlusStringResponseC1Ev>
 8089abc:	4b08      	ldr	r3, [pc, #32]	; (8089ae0 <_ZN33CellularHelperEnvironmentResponseC1EP33CellularHelperEnvironmentCellDataj+0x30>)
};

/**
 * Used to hold the results for one cell (service or neighbor) from the AT+CGED command
 */
class CellularHelperEnvironmentCellData { // 44 bytes
 8089abe:	2200      	movs	r2, #0
 8089ac0:	6023      	str	r3, [r4, #0]
 8089ac2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8089ac6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8089ac8:	23ff      	movs	r3, #255	; 0xff
 8089aca:	6323      	str	r3, [r4, #48]	; 0x30
 8089acc:	6563      	str	r3, [r4, #84]	; 0x54
 8089ace:	f04f 33ff 	mov.w	r3, #4294967295
 8089ad2:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 8089ad6:	65a6      	str	r6, [r4, #88]	; 0x58
 8089ad8:	65e5      	str	r5, [r4, #92]	; 0x5c
 8089ada:	6623      	str	r3, [r4, #96]	; 0x60


}
 8089adc:	4620      	mov	r0, r4
 8089ade:	bd70      	pop	{r4, r5, r6, pc}
 8089ae0:	0809411c 	.word	0x0809411c

08089ae4 <_ZNK33CellularHelperEnvironmentCellData7isValidEb>:
	free(mutableCopy);
}

bool CellularHelperEnvironmentCellData::isValid(bool ignoreCI) const {

	if (mcc > 999) {
 8089ae4:	6803      	ldr	r3, [r0, #0]
 8089ae6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8089aea:	da0c      	bge.n	8089b06 <_ZNK33CellularHelperEnvironmentCellData7isValidEb+0x22>
		return false;
	}

	if (!ignoreCI) {
 8089aec:	b969      	cbnz	r1, 8089b0a <_ZNK33CellularHelperEnvironmentCellData7isValidEb+0x26>
		if (isUMTS) {
 8089aee:	7f03      	ldrb	r3, [r0, #28]
 8089af0:	68c0      	ldr	r0, [r0, #12]
 8089af2:	b10b      	cbz	r3, 8089af8 <_ZNK33CellularHelperEnvironmentCellData7isValidEb+0x14>
			if (ci >= 0xfffffff) {
 8089af4:	4b06      	ldr	r3, [pc, #24]	; (8089b10 <_ZNK33CellularHelperEnvironmentCellData7isValidEb+0x2c>)
 8089af6:	e001      	b.n	8089afc <_ZNK33CellularHelperEnvironmentCellData7isValidEb+0x18>
				return false;
			}
		}
		else {
			if (ci >= 0xffff) {
 8089af8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8089afc:	4298      	cmp	r0, r3
 8089afe:	bfcc      	ite	gt
 8089b00:	2000      	movgt	r0, #0
 8089b02:	2001      	movle	r0, #1
 8089b04:	4770      	bx	lr
}

bool CellularHelperEnvironmentCellData::isValid(bool ignoreCI) const {

	if (mcc > 999) {
		return false;
 8089b06:	2000      	movs	r0, #0
 8089b08:	4770      	bx	lr
			if (ci >= 0xffff) {
				return false;
			}
		}
	}
	return true;
 8089b0a:	2001      	movs	r0, #1
}
 8089b0c:	4770      	bx	lr
 8089b0e:	bf00      	nop
 8089b10:	0ffffffe 	.word	0x0ffffffe

08089b14 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_>:


void CellularHelperEnvironmentCellData::addKeyValue(const char *key, const char *value) {
 8089b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8089b16:	4605      	mov	r5, r0
 8089b18:	b085      	sub	sp, #20
	char ucCopy[16];
	if (strlen(key) > (sizeof(ucCopy) - 1)) {
 8089b1a:	4608      	mov	r0, r1
	}
	return true;
}


void CellularHelperEnvironmentCellData::addKeyValue(const char *key, const char *value) {
 8089b1c:	460f      	mov	r7, r1
 8089b1e:	4614      	mov	r4, r2
	char ucCopy[16];
	if (strlen(key) > (sizeof(ucCopy) - 1)) {
 8089b20:	f005 fb78 	bl	808f214 <strlen>
 8089b24:	280f      	cmp	r0, #15
 8089b26:	d801      	bhi.n	8089b2c <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x18>
 8089b28:	2600      	movs	r6, #0
 8089b2a:	e003      	b.n	8089b34 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x20>
		Log.info("key too long key=%s value=%s", key, value);
 8089b2c:	4623      	mov	r3, r4
 8089b2e:	463a      	mov	r2, r7
 8089b30:	4959      	ldr	r1, [pc, #356]	; (8089c98 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x184>)
 8089b32:	e0ab      	b.n	8089c8c <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x178>
		return;
	}
	size_t ii = 0;
	for(; key[ii]; ii++) {
 8089b34:	5db8      	ldrb	r0, [r7, r6]
 8089b36:	b128      	cbz	r0, 8089b44 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x30>
		ucCopy[ii] = toupper(key[ii]);
 8089b38:	f006 fb38 	bl	80901ac <toupper>
 8089b3c:	f80d 0006 	strb.w	r0, [sp, r6]
	if (strlen(key) > (sizeof(ucCopy) - 1)) {
		Log.info("key too long key=%s value=%s", key, value);
		return;
	}
	size_t ii = 0;
	for(; key[ii]; ii++) {
 8089b40:	3601      	adds	r6, #1
 8089b42:	e7f7      	b.n	8089b34 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x20>
		ucCopy[ii] = toupper(key[ii]);
	}
	ucCopy[ii] = 0;
 8089b44:	ab04      	add	r3, sp, #16
 8089b46:	441e      	add	r6, r3
 8089b48:	f806 0c10 	strb.w	r0, [r6, #-16]

	if (strcmp(ucCopy, "RAT") == 0) {
 8089b4c:	4953      	ldr	r1, [pc, #332]	; (8089c9c <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x188>)
 8089b4e:	4668      	mov	r0, sp
 8089b50:	f004 fe1e 	bl	808e790 <strcmp>
 8089b54:	b940      	cbnz	r0, 8089b68 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x54>
		isUMTS = (strstr(value, "UMTS") != NULL);
 8089b56:	4952      	ldr	r1, [pc, #328]	; (8089ca0 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x18c>)
 8089b58:	4620      	mov	r0, r4
 8089b5a:	f005 fb8b 	bl	808f274 <strstr>
 8089b5e:	3000      	adds	r0, #0
 8089b60:	bf18      	it	ne
 8089b62:	2001      	movne	r0, #1
 8089b64:	7728      	strb	r0, [r5, #28]
 8089b66:	e094      	b.n	8089c92 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
	}
	else
	if (strcmp(ucCopy, "MCC") == 0) {
 8089b68:	494e      	ldr	r1, [pc, #312]	; (8089ca4 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x190>)
 8089b6a:	4668      	mov	r0, sp
 8089b6c:	f004 fe10 	bl	808e790 <strcmp>
 8089b70:	b920      	cbnz	r0, 8089b7c <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x68>
		mcc = atoi(value);
 8089b72:	4620      	mov	r0, r4
 8089b74:	f004 fc8d 	bl	808e492 <atoi>
 8089b78:	6028      	str	r0, [r5, #0]
 8089b7a:	e08a      	b.n	8089c92 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
	}
	else
	if (strcmp(ucCopy, "MNC") == 0) {
 8089b7c:	494a      	ldr	r1, [pc, #296]	; (8089ca8 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x194>)
 8089b7e:	4668      	mov	r0, sp
 8089b80:	f004 fe06 	bl	808e790 <strcmp>
 8089b84:	b920      	cbnz	r0, 8089b90 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x7c>
		mnc = atoi(value);
 8089b86:	4620      	mov	r0, r4
 8089b88:	f004 fc83 	bl	808e492 <atoi>
 8089b8c:	6068      	str	r0, [r5, #4]
 8089b8e:	e080      	b.n	8089c92 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
	}
	else
	if (strcmp(ucCopy, "LAC") == 0) {
 8089b90:	4946      	ldr	r1, [pc, #280]	; (8089cac <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x198>)
 8089b92:	4668      	mov	r0, sp
 8089b94:	f004 fdfc 	bl	808e790 <strcmp>
 8089b98:	4601      	mov	r1, r0
 8089b9a:	b928      	cbnz	r0, 8089ba8 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x94>
		lac = (int) strtol(value, NULL, 16); // hex
 8089b9c:	2210      	movs	r2, #16
 8089b9e:	4620      	mov	r0, r4
 8089ba0:	f006 fa62 	bl	8090068 <strtol>
 8089ba4:	60a8      	str	r0, [r5, #8]
 8089ba6:	e074      	b.n	8089c92 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
	}
	else
	if (strcmp(ucCopy, "CI") == 0) {
 8089ba8:	4941      	ldr	r1, [pc, #260]	; (8089cb0 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x19c>)
 8089baa:	4668      	mov	r0, sp
 8089bac:	f004 fdf0 	bl	808e790 <strcmp>
 8089bb0:	4601      	mov	r1, r0
 8089bb2:	b928      	cbnz	r0, 8089bc0 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0xac>
		ci = (int) strtol(value, NULL, 16); // hex
 8089bb4:	2210      	movs	r2, #16
 8089bb6:	4620      	mov	r0, r4
 8089bb8:	f006 fa56 	bl	8090068 <strtol>
 8089bbc:	60e8      	str	r0, [r5, #12]
 8089bbe:	e068      	b.n	8089c92 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
	}
	else
	if (strcmp(ucCopy, "BSIC") == 0) {
 8089bc0:	493c      	ldr	r1, [pc, #240]	; (8089cb4 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1a0>)
 8089bc2:	4668      	mov	r0, sp
 8089bc4:	f004 fde4 	bl	808e790 <strcmp>
 8089bc8:	4601      	mov	r1, r0
 8089bca:	b928      	cbnz	r0, 8089bd8 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0xc4>
		bsic = (int) strtol(value, NULL, 16); // hex
 8089bcc:	2210      	movs	r2, #16
 8089bce:	4620      	mov	r0, r4
 8089bd0:	f006 fa4a 	bl	8090068 <strtol>
 8089bd4:	6128      	str	r0, [r5, #16]
 8089bd6:	e05c      	b.n	8089c92 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
	}
	else
	if (strcmp(ucCopy, "ARFCN") == 0) { // Usually "Arfcn"
 8089bd8:	4937      	ldr	r1, [pc, #220]	; (8089cb8 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1a4>)
 8089bda:	4668      	mov	r0, sp
 8089bdc:	f004 fdd8 	bl	808e790 <strcmp>
 8089be0:	b920      	cbnz	r0, 8089bec <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0xd8>
		// Documentation says this is hex, but this does not appear to be the case!
		// arfcn = (int) strtol(value, NULL, 16); // hex
		arfcn = atoi(value);
 8089be2:	4620      	mov	r0, r4
 8089be4:	f004 fc55 	bl	808e492 <atoi>
 8089be8:	6168      	str	r0, [r5, #20]
 8089bea:	e052      	b.n	8089c92 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
	}
	else
	if (strcmp(ucCopy, "ARFCN_DED") == 0 || strcmp(ucCopy, "RXLEVSUB") == 0 || strcmp(ucCopy, "T_ADV") == 0) {
 8089bec:	4933      	ldr	r1, [pc, #204]	; (8089cbc <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1a8>)
 8089bee:	4668      	mov	r0, sp
 8089bf0:	f004 fdce 	bl	808e790 <strcmp>
 8089bf4:	2800      	cmp	r0, #0
 8089bf6:	d04c      	beq.n	8089c92 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
 8089bf8:	4931      	ldr	r1, [pc, #196]	; (8089cc0 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1ac>)
 8089bfa:	4668      	mov	r0, sp
 8089bfc:	f004 fdc8 	bl	808e790 <strcmp>
 8089c00:	2800      	cmp	r0, #0
 8089c02:	d046      	beq.n	8089c92 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
 8089c04:	492f      	ldr	r1, [pc, #188]	; (8089cc4 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1b0>)
 8089c06:	4668      	mov	r0, sp
 8089c08:	f004 fdc2 	bl	808e790 <strcmp>
 8089c0c:	2800      	cmp	r0, #0
 8089c0e:	d040      	beq.n	8089c92 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
		// Ignored 2G fields: Arfcn_ded, RxLevSub, t_adv
	}
	else
	if (strcmp(ucCopy, "RXLEV") == 0) { // Sometimes RxLev
 8089c10:	492d      	ldr	r1, [pc, #180]	; (8089cc8 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1b4>)
 8089c12:	4668      	mov	r0, sp
 8089c14:	f004 fdbc 	bl	808e790 <strcmp>
 8089c18:	4601      	mov	r1, r0
 8089c1a:	b928      	cbnz	r0, 8089c28 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x114>
		rxlev = (int) strtol(value, NULL, 16); // hex
 8089c1c:	2210      	movs	r2, #16
 8089c1e:	4620      	mov	r0, r4
 8089c20:	f006 fa22 	bl	8090068 <strtol>
 8089c24:	61a8      	str	r0, [r5, #24]
 8089c26:	e034      	b.n	8089c92 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
	}
	else
	if (strcmp(ucCopy, "DLF") == 0) {
 8089c28:	4928      	ldr	r1, [pc, #160]	; (8089ccc <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1b8>)
 8089c2a:	4668      	mov	r0, sp
 8089c2c:	f004 fdb0 	bl	808e790 <strcmp>
 8089c30:	b920      	cbnz	r0, 8089c3c <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x128>
		dlf = atoi(value);
 8089c32:	4620      	mov	r0, r4
 8089c34:	f004 fc2d 	bl	808e492 <atoi>
 8089c38:	6228      	str	r0, [r5, #32]
 8089c3a:	e02a      	b.n	8089c92 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
	}
	else
	if (strcmp(ucCopy, "ULF") == 0) {
 8089c3c:	4924      	ldr	r1, [pc, #144]	; (8089cd0 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1bc>)
 8089c3e:	4668      	mov	r0, sp
 8089c40:	f004 fda6 	bl	808e790 <strcmp>
 8089c44:	b930      	cbnz	r0, 8089c54 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x140>
		ulf = atoi(value);
 8089c46:	4620      	mov	r0, r4
 8089c48:	f004 fc23 	bl	808e492 <atoi>

		// For AT+COPS=5, we don't get a RAT, but if ULF is present it's 3G
		isUMTS = true;
 8089c4c:	2301      	movs	r3, #1
	if (strcmp(ucCopy, "DLF") == 0) {
		dlf = atoi(value);
	}
	else
	if (strcmp(ucCopy, "ULF") == 0) {
		ulf = atoi(value);
 8089c4e:	6268      	str	r0, [r5, #36]	; 0x24

		// For AT+COPS=5, we don't get a RAT, but if ULF is present it's 3G
		isUMTS = true;
 8089c50:	772b      	strb	r3, [r5, #28]
 8089c52:	e01e      	b.n	8089c92 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
	}
	else
	if (strcmp(ucCopy, "RSCP LEV") == 0) {
 8089c54:	491f      	ldr	r1, [pc, #124]	; (8089cd4 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1c0>)
 8089c56:	4668      	mov	r0, sp
 8089c58:	f004 fd9a 	bl	808e790 <strcmp>
 8089c5c:	b920      	cbnz	r0, 8089c68 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x154>
		rscpLev = atoi(value);
 8089c5e:	4620      	mov	r0, r4
 8089c60:	f004 fc17 	bl	808e492 <atoi>
 8089c64:	62a8      	str	r0, [r5, #40]	; 0x28
 8089c66:	e014      	b.n	8089c92 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
	}
	else
	if (strcmp(ucCopy, "RAC") == 0 || strcmp(ucCopy, "SC") == 0 || strcmp(ucCopy, "ECN0 LEV") == 0) {
 8089c68:	491b      	ldr	r1, [pc, #108]	; (8089cd8 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1c4>)
 8089c6a:	4668      	mov	r0, sp
 8089c6c:	f004 fd90 	bl	808e790 <strcmp>
 8089c70:	b178      	cbz	r0, 8089c92 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
 8089c72:	491a      	ldr	r1, [pc, #104]	; (8089cdc <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1c8>)
 8089c74:	4668      	mov	r0, sp
 8089c76:	f004 fd8b 	bl	808e790 <strcmp>
 8089c7a:	b150      	cbz	r0, 8089c92 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
 8089c7c:	4918      	ldr	r1, [pc, #96]	; (8089ce0 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1cc>)
 8089c7e:	4668      	mov	r0, sp
 8089c80:	f004 fd86 	bl	808e790 <strcmp>
 8089c84:	b128      	cbz	r0, 8089c92 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
		// We get these with AT+COPS=5, but we don't need the values
	}
	else {
		Log.info("unknown key=%s value=%s", key, value);
 8089c86:	4623      	mov	r3, r4
 8089c88:	463a      	mov	r2, r7
 8089c8a:	4916      	ldr	r1, [pc, #88]	; (8089ce4 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1d0>)
 8089c8c:	4816      	ldr	r0, [pc, #88]	; (8089ce8 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1d4>)
 8089c8e:	f7f7 f88b 	bl	8080da8 <_ZNK5spark6Logger4infoEPKcz>
	}

}
 8089c92:	b005      	add	sp, #20
 8089c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8089c96:	bf00      	nop
 8089c98:	08093df1 	.word	0x08093df1
 8089c9c:	08093e0e 	.word	0x08093e0e
 8089ca0:	08093e12 	.word	0x08093e12
 8089ca4:	08093e17 	.word	0x08093e17
 8089ca8:	08093e1b 	.word	0x08093e1b
 8089cac:	08093e1f 	.word	0x08093e1f
 8089cb0:	08093e23 	.word	0x08093e23
 8089cb4:	08093e26 	.word	0x08093e26
 8089cb8:	08093e2b 	.word	0x08093e2b
 8089cbc:	08093e31 	.word	0x08093e31
 8089cc0:	08093e3b 	.word	0x08093e3b
 8089cc4:	08093e44 	.word	0x08093e44
 8089cc8:	08093e4a 	.word	0x08093e4a
 8089ccc:	08093e50 	.word	0x08093e50
 8089cd0:	08093e54 	.word	0x08093e54
 8089cd4:	08093e58 	.word	0x08093e58
 8089cd8:	08093e61 	.word	0x08093e61
 8089cdc:	08093e65 	.word	0x08093e65
 8089ce0:	08093e68 	.word	0x08093e68
 8089ce4:	08093e71 	.word	0x08093e71
 8089ce8:	20000cf8 	.word	0x20000cf8

08089cec <_ZN33CellularHelperEnvironmentCellData5parseEPKc>:
		}
	}
	return WAIT;
}

void CellularHelperEnvironmentCellData::parse(const char *str) {
 8089cec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8089cee:	4606      	mov	r6, r0
	char *mutableCopy = strdup(str);
 8089cf0:	4608      	mov	r0, r1
 8089cf2:	f004 fd5f 	bl	808e7b4 <strdup>

	char *endStr;

	char *pair = strtok_r(mutableCopy, ",", &endStr);
 8089cf6:	aa01      	add	r2, sp, #4
 8089cf8:	4910      	ldr	r1, [pc, #64]	; (8089d3c <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x50>)
	}
	return WAIT;
}

void CellularHelperEnvironmentCellData::parse(const char *str) {
	char *mutableCopy = strdup(str);
 8089cfa:	4605      	mov	r5, r0

	char *endStr;

	char *pair = strtok_r(mutableCopy, ",", &endStr);
 8089cfc:	f006 f92b 	bl	808ff56 <strtok_r>
			pair++;
		}

		char *colon = strchr(pair, ':');
		if (colon != NULL) {
			*colon = 0;
 8089d00:	2700      	movs	r7, #0
	char *mutableCopy = strdup(str);

	char *endStr;

	char *pair = strtok_r(mutableCopy, ",", &endStr);
	while(pair) {
 8089d02:	b1b0      	cbz	r0, 8089d32 <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x46>
 8089d04:	4604      	mov	r4, r0
		// Remove leading spaces caused by ", " combination
		while(*pair == ' ') {
 8089d06:	7823      	ldrb	r3, [r4, #0]
 8089d08:	3001      	adds	r0, #1
 8089d0a:	2b20      	cmp	r3, #32
 8089d0c:	d0fa      	beq.n	8089d04 <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x18>
			pair++;
		}

		char *colon = strchr(pair, ':');
 8089d0e:	213a      	movs	r1, #58	; 0x3a
 8089d10:	4620      	mov	r0, r4
 8089d12:	f004 fd2f 	bl	808e774 <strchr>
		if (colon != NULL) {
 8089d16:	b130      	cbz	r0, 8089d26 <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x3a>
			*colon = 0;
 8089d18:	4602      	mov	r2, r0
			const char *key = pair;
			const char *value = ++colon;

			addKeyValue(key, value);
 8089d1a:	4621      	mov	r1, r4
			pair++;
		}

		char *colon = strchr(pair, ':');
		if (colon != NULL) {
			*colon = 0;
 8089d1c:	f802 7b01 	strb.w	r7, [r2], #1
			const char *key = pair;
			const char *value = ++colon;

			addKeyValue(key, value);
 8089d20:	4630      	mov	r0, r6
 8089d22:	f7ff fef7 	bl	8089b14 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_>
		}

		pair = strtok_r(NULL, ",", &endStr);
 8089d26:	aa01      	add	r2, sp, #4
 8089d28:	4904      	ldr	r1, [pc, #16]	; (8089d3c <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x50>)
 8089d2a:	2000      	movs	r0, #0
 8089d2c:	f006 f913 	bl	808ff56 <strtok_r>
	char *mutableCopy = strdup(str);

	char *endStr;

	char *pair = strtok_r(mutableCopy, ",", &endStr);
	while(pair) {
 8089d30:	e7e7      	b.n	8089d02 <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x16>

		pair = strtok_r(NULL, ",", &endStr);
	}


	free(mutableCopy);
 8089d32:	4628      	mov	r0, r5
 8089d34:	f000 fd90 	bl	808a858 <free>
}
 8089d38:	b003      	add	sp, #12
 8089d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8089d3c:	08093cd2 	.word	0x08093cd2

08089d40 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci>:
	neighbors(neighbors), numNeighbors(numNeighbors) {


}

int CellularHelperEnvironmentResponse::parse(int type, const char *buf, int len) {
 8089d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (enableDebug) {
 8089d44:	7a06      	ldrb	r6, [r0, #8]
	neighbors(neighbors), numNeighbors(numNeighbors) {


}

int CellularHelperEnvironmentResponse::parse(int type, const char *buf, int len) {
 8089d46:	b08b      	sub	sp, #44	; 0x2c
 8089d48:	4605      	mov	r5, r0
 8089d4a:	460f      	mov	r7, r1
 8089d4c:	4691      	mov	r9, r2
 8089d4e:	461c      	mov	r4, r3
	if (enableDebug) {
 8089d50:	b10e      	cbz	r6, 8089d56 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x16>
		logCellularDebug(type, buf, len);
 8089d52:	f7ff fd93 	bl	808987c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	}

	if (type == TYPE_UNKNOWN || type == TYPE_PLUS) {
 8089d56:	f437 0880 	bics.w	r8, r7, #4194304	; 0x400000
 8089d5a:	d155      	bne.n	8089e08 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xc8>
		// We get this for AT+CGED=5
		// Copy to temporary string to make processing easier
		char *copy = (char *) malloc(len + 1);
 8089d5c:	1c60      	adds	r0, r4, #1
 8089d5e:	f000 fd73 	bl	808a848 <malloc>
		if (copy) {
 8089d62:	4606      	mov	r6, r0
 8089d64:	2800      	cmp	r0, #0
 8089d66:	d04f      	beq.n	8089e08 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xc8>
			strncpy(copy, buf, len);
 8089d68:	4622      	mov	r2, r4
 8089d6a:	4649      	mov	r1, r9
 8089d6c:	f005 fa6f 	bl	808f24e <strncpy>
			copy[len] = 0;
 8089d70:	f806 8004 	strb.w	r8, [r6, r4]

			// This is used for skipping over the +CGED: part of the response
			char searchFor[32];
			size_t searchForLen = snprintf(searchFor, sizeof(searchFor), "+%s: ", command.c_str());
 8089d74:	4a27      	ldr	r2, [pc, #156]	; (8089e14 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xd4>)
 8089d76:	2120      	movs	r1, #32
 8089d78:	68eb      	ldr	r3, [r5, #12]
 8089d7a:	a802      	add	r0, sp, #8
 8089d7c:	f000 fd9c 	bl	808a8b8 <snprintf>
 8089d80:	4680      	mov	r8, r0

			char *endStr;

			char *line = strtok_r(copy, "\r\n", &endStr);
 8089d82:	4630      	mov	r0, r6
 8089d84:	4924      	ldr	r1, [pc, #144]	; (8089e18 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xd8>)
 8089d86:	aa01      	add	r2, sp, #4
 8089d88:	f006 f8e5 	bl	808ff56 <strtok_r>
 8089d8c:	4604      	mov	r4, r0
			while(line) {
 8089d8e:	2800      	cmp	r0, #0
 8089d90:	d037      	beq.n	8089e02 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xc2>
				if (line[0]) {
 8089d92:	7803      	ldrb	r3, [r0, #0]
 8089d94:	b38b      	cbz	r3, 8089dfa <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xba>
					// Not an empty line

					if (type == TYPE_PLUS && strncmp(line, searchFor, searchForLen) == 0) {
 8089d96:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
 8089d9a:	d105      	bne.n	8089da8 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x68>
 8089d9c:	4642      	mov	r2, r8
 8089d9e:	a902      	add	r1, sp, #8
 8089da0:	f005 fa40 	bl	808f224 <strncmp>
 8089da4:	b900      	cbnz	r0, 8089da8 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x68>
						line += searchForLen;
 8089da6:	4444      	add	r4, r8
					}

					if (strncmp(line, "MCC:", 4) == 0) {
 8089da8:	2204      	movs	r2, #4
 8089daa:	491c      	ldr	r1, [pc, #112]	; (8089e1c <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xdc>)
 8089dac:	4620      	mov	r0, r4
 8089dae:	f005 fa39 	bl	808f224 <strncmp>
 8089db2:	b9b8      	cbnz	r0, 8089de4 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xa4>
						// Line begins with MCC:
						// This happens for 2G and 3G
						if (curDataIndex < 0) {
 8089db4:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8089db6:	2b00      	cmp	r3, #0
 8089db8:	da08      	bge.n	8089dcc <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x8c>
							service.parse(line);
 8089dba:	4621      	mov	r1, r4
 8089dbc:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 8089dc0:	f7ff ff94 	bl	8089cec <_ZN33CellularHelperEnvironmentCellData5parseEPKc>
							curDataIndex++;
 8089dc4:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8089dc6:	3301      	adds	r3, #1
 8089dc8:	662b      	str	r3, [r5, #96]	; 0x60
 8089dca:	e016      	b.n	8089dfa <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xba>
						}
						else
						if (neighbors && (size_t)curDataIndex < numNeighbors) {
 8089dcc:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8089dce:	b1a2      	cbz	r2, 8089dfa <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xba>
 8089dd0:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8089dd2:	428b      	cmp	r3, r1
 8089dd4:	d211      	bcs.n	8089dfa <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xba>
							neighbors[curDataIndex++].parse(line);
 8089dd6:	1c59      	adds	r1, r3, #1
 8089dd8:	202c      	movs	r0, #44	; 0x2c
 8089dda:	6629      	str	r1, [r5, #96]	; 0x60
 8089ddc:	fb00 2003 	mla	r0, r0, r3, r2
 8089de0:	4621      	mov	r1, r4
 8089de2:	e008      	b.n	8089df6 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xb6>
						}
					}
					else
					if (strncmp(line, "RAT:", 4) == 0) {
 8089de4:	2204      	movs	r2, #4
 8089de6:	490e      	ldr	r1, [pc, #56]	; (8089e20 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xe0>)
 8089de8:	4620      	mov	r0, r4
 8089dea:	f005 fa1b 	bl	808f224 <strncmp>
 8089dee:	b920      	cbnz	r0, 8089dfa <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xba>
						// Line begins with RAT:
						// This happens for 3G in the + response so you know whether
						// the response is for a 2G or 3G tower
						service.parse(line);
 8089df0:	4621      	mov	r1, r4
 8089df2:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 8089df6:	f7ff ff79 	bl	8089cec <_ZN33CellularHelperEnvironmentCellData5parseEPKc>
					}
				}
				line = strtok_r(NULL, "\r\n", &endStr);
 8089dfa:	aa01      	add	r2, sp, #4
 8089dfc:	4906      	ldr	r1, [pc, #24]	; (8089e18 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xd8>)
 8089dfe:	2000      	movs	r0, #0
 8089e00:	e7c2      	b.n	8089d88 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x48>
			}

			free(copy);
 8089e02:	4630      	mov	r0, r6
 8089e04:	f000 fd28 	bl	808a858 <free>
		}
	}
	return WAIT;
}
 8089e08:	f04f 30ff 	mov.w	r0, #4294967295
 8089e0c:	b00b      	add	sp, #44	; 0x2c
 8089e0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8089e12:	bf00      	nop
 8089e14:	0809410e 	.word	0x0809410e
 8089e18:	080940fe 	.word	0x080940fe
 8089e1c:	08093e89 	.word	0x08093e89
 8089e20:	08093e8e 	.word	0x08093e8e

08089e24 <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv>:
			}
		}
	}
}

size_t CellularHelperEnvironmentResponse::getNumNeighbors() const {
 8089e24:	b570      	push	{r4, r5, r6, lr}
	if (curDataIndex < 0) {
 8089e26:	6e04      	ldr	r4, [r0, #96]	; 0x60
 8089e28:	2c00      	cmp	r4, #0
 8089e2a:	db0f      	blt.n	8089e4c <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv+0x28>
		return 0;
	}
	else {
		if (neighbors) {
 8089e2c:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8089e2e:	b15d      	cbz	r5, 8089e48 <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv+0x24>
 8089e30:	2200      	movs	r2, #0
			for(size_t ii = 0; ii < (size_t)curDataIndex; ii++) {
				if (!neighbors[ii].isValid()) {
 8089e32:	262c      	movs	r6, #44	; 0x2c
	if (curDataIndex < 0) {
		return 0;
	}
	else {
		if (neighbors) {
			for(size_t ii = 0; ii < (size_t)curDataIndex; ii++) {
 8089e34:	42a2      	cmp	r2, r4
 8089e36:	d007      	beq.n	8089e48 <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv+0x24>
				if (!neighbors[ii].isValid()) {
 8089e38:	2100      	movs	r1, #0
 8089e3a:	fb06 5002 	mla	r0, r6, r2, r5
 8089e3e:	f7ff fe51 	bl	8089ae4 <_ZNK33CellularHelperEnvironmentCellData7isValidEb>
 8089e42:	b128      	cbz	r0, 8089e50 <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv+0x2c>
	if (curDataIndex < 0) {
		return 0;
	}
	else {
		if (neighbors) {
			for(size_t ii = 0; ii < (size_t)curDataIndex; ii++) {
 8089e44:	3201      	adds	r2, #1
 8089e46:	e7f5      	b.n	8089e34 <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv+0x10>
				if (!neighbors[ii].isValid()) {
					return ii;
				}
			}
		}
		return curDataIndex;
 8089e48:	4620      	mov	r0, r4
 8089e4a:	bd70      	pop	{r4, r5, r6, pc}
	}
}

size_t CellularHelperEnvironmentResponse::getNumNeighbors() const {
	if (curDataIndex < 0) {
		return 0;
 8089e4c:	2000      	movs	r0, #0
 8089e4e:	bd70      	pop	{r4, r5, r6, pc}
 8089e50:	4610      	mov	r0, r2
				}
			}
		}
		return curDataIndex;
	}
}
 8089e52:	bd70      	pop	{r4, r5, r6, pc}

08089e54 <_ZN26CellularHelperCREGResponse11postProcessEv>:
	else {
		return "valid=false";
	}
}

void CellularHelperCREGResponse::postProcess() {
 8089e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// "\r\n+CREG: 2,1,\"FFFE\",\"C45C010\",8\r\n"
	int n;

	if (sscanf(string.c_str(), "%d,%d,\"%x\",\"%x\",%d", &n, &stat, &lac, &ci, &rat) == 5) {
 8089e58:	f100 0634 	add.w	r6, r0, #52	; 0x34
	else {
		return "valid=false";
	}
}

void CellularHelperCREGResponse::postProcess() {
 8089e5c:	b086      	sub	sp, #24
	// "\r\n+CREG: 2,1,\"FFFE\",\"C45C010\",8\r\n"
	int n;

	if (sscanf(string.c_str(), "%d,%d,\"%x\",\"%x\",%d", &n, &stat, &lac, &ci, &rat) == 5) {
 8089e5e:	f100 0738 	add.w	r7, r0, #56	; 0x38
 8089e62:	f100 083c 	add.w	r8, r0, #60	; 0x3c
 8089e66:	e88d 01c0 	stmia.w	sp, {r6, r7, r8}
 8089e6a:	f100 0530 	add.w	r5, r0, #48	; 0x30
	else {
		return "valid=false";
	}
}

void CellularHelperCREGResponse::postProcess() {
 8089e6e:	4604      	mov	r4, r0
	// "\r\n+CREG: 2,1,\"FFFE\",\"C45C010\",8\r\n"
	int n;

	if (sscanf(string.c_str(), "%d,%d,\"%x\",\"%x\",%d", &n, &stat, &lac, &ci, &rat) == 5) {
 8089e70:	462b      	mov	r3, r5
 8089e72:	aa05      	add	r2, sp, #20
 8089e74:	490b      	ldr	r1, [pc, #44]	; (8089ea4 <_ZN26CellularHelperCREGResponse11postProcessEv+0x50>)
 8089e76:	69c0      	ldr	r0, [r0, #28]
 8089e78:	f000 fd0e 	bl	808a898 <sscanf>
 8089e7c:	2805      	cmp	r0, #5
 8089e7e:	d103      	bne.n	8089e88 <_ZN26CellularHelperCREGResponse11postProcessEv+0x34>
		// SARA-R4 does include the n (5 parameters)
		valid = true;
 8089e80:	2301      	movs	r3, #1
 8089e82:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8089e86:	e009      	b.n	8089e9c <_ZN26CellularHelperCREGResponse11postProcessEv+0x48>
	}
	else
	if (sscanf(string.c_str(), "%d,\"%x\",\"%x\",%d", &stat, &lac, &ci, &rat) == 4) {
 8089e88:	e88d 0180 	stmia.w	sp, {r7, r8}
 8089e8c:	4633      	mov	r3, r6
 8089e8e:	462a      	mov	r2, r5
 8089e90:	4905      	ldr	r1, [pc, #20]	; (8089ea8 <_ZN26CellularHelperCREGResponse11postProcessEv+0x54>)
 8089e92:	69e0      	ldr	r0, [r4, #28]
 8089e94:	f000 fd00 	bl	808a898 <sscanf>
 8089e98:	2804      	cmp	r0, #4
 8089e9a:	d0f1      	beq.n	8089e80 <_ZN26CellularHelperCREGResponse11postProcessEv+0x2c>
		// SARA-U and SARA-G don't include the n (4 parameters)
		valid = true;
	}

}
 8089e9c:	b006      	add	sp, #24
 8089e9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8089ea2:	bf00      	nop
 8089ea4:	08093f96 	.word	0x08093f96
 8089ea8:	08093f99 	.word	0x08093f99

08089eac <_ZNK26CellularHelperCREGResponse8toStringEv>:

String CellularHelperCREGResponse::toString() const {
 8089eac:	b513      	push	{r0, r1, r4, lr}
	if (valid) {
 8089eae:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
		valid = true;
	}

}

String CellularHelperCREGResponse::toString() const {
 8089eb2:	4604      	mov	r4, r0
	if (valid) {
 8089eb4:	b14b      	cbz	r3, 8089eca <_ZNK26CellularHelperCREGResponse8toStringEv+0x1e>
		return String::format("stat=%d lac=0x%x ci=0x%x rat=%d", stat, lac, ci, rat);
 8089eb6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8089eb8:	9301      	str	r3, [sp, #4]
 8089eba:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8089ebc:	9300      	str	r3, [sp, #0]
 8089ebe:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8089ec0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8089ec2:	4905      	ldr	r1, [pc, #20]	; (8089ed8 <_ZNK26CellularHelperCREGResponse8toStringEv+0x2c>)
 8089ec4:	f001 fa38 	bl	808b338 <_ZN6String6formatEPKcz>
 8089ec8:	e002      	b.n	8089ed0 <_ZNK26CellularHelperCREGResponse8toStringEv+0x24>
	}
	else {
		return "valid=false";
 8089eca:	4904      	ldr	r1, [pc, #16]	; (8089edc <_ZNK26CellularHelperCREGResponse8toStringEv+0x30>)
 8089ecc:	f001 f859 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
	}
}
 8089ed0:	4620      	mov	r0, r4
 8089ed2:	b002      	add	sp, #8
 8089ed4:	bd10      	pop	{r4, pc}
 8089ed6:	bf00      	nop
 8089ed8:	08093fa9 	.word	0x08093fa9
 8089edc:	08093f8a 	.word	0x08093f8a

08089ee0 <_ZN28CellularHelperStringResponseC1Ev>:
 * Things that return a simple string, like the manufacturer string, use this
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperStringResponse : public CellularHelperCommonResponse {
 8089ee0:	b510      	push	{r4, lr}
 8089ee2:	4604      	mov	r4, r0

/**
 * All response objects inherit from this, so the parse() method can be called
 * in the subclass, and also the resp and enableDebug members are always available.
 */
class CellularHelperCommonResponse {
 8089ee4:	f06f 0302 	mvn.w	r3, #2
 8089ee8:	6043      	str	r3, [r0, #4]
 8089eea:	2300      	movs	r3, #0
 8089eec:	7203      	strb	r3, [r0, #8]
 * Things that return a simple string, like the manufacturer string, use this
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperStringResponse : public CellularHelperCommonResponse {
 8089eee:	4b04      	ldr	r3, [pc, #16]	; (8089f00 <_ZN28CellularHelperStringResponseC1Ev+0x20>)
 8089ef0:	4904      	ldr	r1, [pc, #16]	; (8089f04 <_ZN28CellularHelperStringResponseC1Ev+0x24>)
 8089ef2:	f840 3b0c 	str.w	r3, [r0], #12
 8089ef6:	f001 f844 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
 8089efa:	4620      	mov	r0, r4
 8089efc:	bd10      	pop	{r4, pc}
 8089efe:	bf00      	nop
 8089f00:	08093d28 	.word	0x08093d28
 8089f04:	08094100 	.word	0x08094100

08089f08 <_ZN28CellularHelperStringResponseD1Ev>:
 8089f08:	b510      	push	{r4, lr}
 8089f0a:	4604      	mov	r4, r0
 8089f0c:	4b03      	ldr	r3, [pc, #12]	; (8089f1c <_ZN28CellularHelperStringResponseD1Ev+0x14>)
 8089f0e:	f840 3b0c 	str.w	r3, [r0], #12
 8089f12:	f000 ffef 	bl	808aef4 <_ZN6StringD1Ev>
 8089f16:	4620      	mov	r0, r4
 8089f18:	bd10      	pop	{r4, pc}
 8089f1a:	bf00      	nop
 8089f1c:	08093d28 	.word	0x08093d28

08089f20 <_ZNK19CellularHelperClass8getModelEv>:
	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGMI\r\n");

	return resp.string;
}

String CellularHelperClass::getModel() const {
 8089f20:	b510      	push	{r4, lr}
 8089f22:	4604      	mov	r4, r0
 8089f24:	b088      	sub	sp, #32
	CellularHelperStringResponse resp;
 8089f26:	a801      	add	r0, sp, #4
 8089f28:	f7ff ffda 	bl	8089ee0 <_ZN28CellularHelperStringResponseC1Ev>

    template<typename T, typename... Targs>
    inline int command(int (*cb)(int type, const char* buf, int len, T* param),
            T* param, system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
 8089f2c:	4b08      	ldr	r3, [pc, #32]	; (8089f50 <_ZNK19CellularHelperClass8getModelEv+0x30>)
 8089f2e:	f242 7210 	movw	r2, #10000	; 0x2710
 8089f32:	a901      	add	r1, sp, #4
 8089f34:	4807      	ldr	r0, [pc, #28]	; (8089f54 <_ZNK19CellularHelperClass8getModelEv+0x34>)
 8089f36:	f000 fb4b 	bl	808a5d0 <cellular_command>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGMM\r\n");

	return resp.string;
 8089f3a:	a904      	add	r1, sp, #16
 8089f3c:	4620      	mov	r0, r4
 8089f3e:	f001 f85f 	bl	808b000 <_ZN6StringC1ERKS_>

	return resp.string;
}

String CellularHelperClass::getModel() const {
	CellularHelperStringResponse resp;
 8089f42:	a801      	add	r0, sp, #4
 8089f44:	f7ff ffe0 	bl	8089f08 <_ZN28CellularHelperStringResponseD1Ev>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGMM\r\n");

	return resp.string;
}
 8089f48:	4620      	mov	r0, r4
 8089f4a:	b008      	add	sp, #32
 8089f4c:	bd10      	pop	{r4, pc}
 8089f4e:	bf00      	nop
 8089f50:	08093fc9 	.word	0x08093fc9
 8089f54:	08089865 	.word	0x08089865

08089f58 <_ZNK19CellularHelperClass7getIMEIEv>:
	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGMR\r\n");

	return resp.string;
}

String CellularHelperClass::getIMEI() const {
 8089f58:	b510      	push	{r4, lr}
 8089f5a:	4604      	mov	r4, r0
 8089f5c:	b088      	sub	sp, #32
	CellularHelperStringResponse resp;
 8089f5e:	a801      	add	r0, sp, #4
 8089f60:	f7ff ffbe 	bl	8089ee0 <_ZN28CellularHelperStringResponseC1Ev>
 8089f64:	4b08      	ldr	r3, [pc, #32]	; (8089f88 <_ZNK19CellularHelperClass7getIMEIEv+0x30>)
 8089f66:	f242 7210 	movw	r2, #10000	; 0x2710
 8089f6a:	a901      	add	r1, sp, #4
 8089f6c:	4807      	ldr	r0, [pc, #28]	; (8089f8c <_ZNK19CellularHelperClass7getIMEIEv+0x34>)
 8089f6e:	f000 fb2f 	bl	808a5d0 <cellular_command>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGSN\r\n");

	return resp.string;
 8089f72:	a904      	add	r1, sp, #16
 8089f74:	4620      	mov	r0, r4
 8089f76:	f001 f843 	bl	808b000 <_ZN6StringC1ERKS_>

	return resp.string;
}

String CellularHelperClass::getIMEI() const {
	CellularHelperStringResponse resp;
 8089f7a:	a801      	add	r0, sp, #4
 8089f7c:	f7ff ffc4 	bl	8089f08 <_ZN28CellularHelperStringResponseD1Ev>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGSN\r\n");

	return resp.string;
}
 8089f80:	4620      	mov	r0, r4
 8089f82:	b008      	add	sp, #32
 8089f84:	bd10      	pop	{r4, pc}
 8089f86:	bf00      	nop
 8089f88:	08093fe4 	.word	0x08093fe4
 8089f8c:	08089865 	.word	0x08089865

08089f90 <_ZNK19CellularHelperClass7getIMSIEv>:

String CellularHelperClass::getIMSI() const {
 8089f90:	b510      	push	{r4, lr}
 8089f92:	4604      	mov	r4, r0
 8089f94:	b088      	sub	sp, #32
	CellularHelperStringResponse resp;
 8089f96:	a801      	add	r0, sp, #4
 8089f98:	f7ff ffa2 	bl	8089ee0 <_ZN28CellularHelperStringResponseC1Ev>
 8089f9c:	4b08      	ldr	r3, [pc, #32]	; (8089fc0 <_ZNK19CellularHelperClass7getIMSIEv+0x30>)
 8089f9e:	f242 7210 	movw	r2, #10000	; 0x2710
 8089fa2:	a901      	add	r1, sp, #4
 8089fa4:	4807      	ldr	r0, [pc, #28]	; (8089fc4 <_ZNK19CellularHelperClass7getIMSIEv+0x34>)
 8089fa6:	f000 fb13 	bl	808a5d0 <cellular_command>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGMI\r\n");

	return resp.string;
 8089faa:	a904      	add	r1, sp, #16
 8089fac:	4620      	mov	r0, r4
 8089fae:	f001 f827 	bl	808b000 <_ZN6StringC1ERKS_>

	return resp.string;
}

String CellularHelperClass::getIMSI() const {
	CellularHelperStringResponse resp;
 8089fb2:	a801      	add	r0, sp, #4
 8089fb4:	f7ff ffa8 	bl	8089f08 <_ZN28CellularHelperStringResponseD1Ev>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGMI\r\n");

	return resp.string;
}
 8089fb8:	4620      	mov	r0, r4
 8089fba:	b008      	add	sp, #32
 8089fbc:	bd10      	pop	{r4, pc}
 8089fbe:	bf00      	nop
 8089fc0:	08093fee 	.word	0x08093fee
 8089fc4:	08089865 	.word	0x08089865

08089fc8 <_ZNK19CellularHelperClass8getICCIDEv>:

String CellularHelperClass::getICCID() const {
 8089fc8:	b510      	push	{r4, lr}
 8089fca:	4604      	mov	r4, r0
 8089fcc:	b08c      	sub	sp, #48	; 0x30
	CellularHelperPlusStringResponse resp;
 8089fce:	a801      	add	r0, sp, #4
 8089fd0:	f7ff fd44 	bl	8089a5c <_ZN32CellularHelperPlusStringResponseC1Ev>
	resp.command = "CCID";
 8089fd4:	490a      	ldr	r1, [pc, #40]	; (808a000 <_ZNK19CellularHelperClass8getICCIDEv+0x38>)
 8089fd6:	a804      	add	r0, sp, #16
 8089fd8:	f001 f825 	bl	808b026 <_ZN6StringaSEPKc>
 8089fdc:	4b09      	ldr	r3, [pc, #36]	; (808a004 <_ZNK19CellularHelperClass8getICCIDEv+0x3c>)
 8089fde:	f242 7210 	movw	r2, #10000	; 0x2710
 8089fe2:	a901      	add	r1, sp, #4
 8089fe4:	4808      	ldr	r0, [pc, #32]	; (808a008 <_ZNK19CellularHelperClass8getICCIDEv+0x40>)
 8089fe6:	f000 faf3 	bl	808a5d0 <cellular_command>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CCID\r\n");

	return resp.string;
 8089fea:	a908      	add	r1, sp, #32
 8089fec:	4620      	mov	r0, r4
 8089fee:	f001 f807 	bl	808b000 <_ZN6StringC1ERKS_>

	return resp.string;
}

String CellularHelperClass::getICCID() const {
	CellularHelperPlusStringResponse resp;
 8089ff2:	a801      	add	r0, sp, #4
 8089ff4:	f7ff fd4c 	bl	8089a90 <_ZN32CellularHelperPlusStringResponseD1Ev>
	resp.command = "CCID";

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CCID\r\n");

	return resp.string;
}
 8089ff8:	4620      	mov	r0, r4
 8089ffa:	b00c      	add	sp, #48	; 0x30
 8089ffc:	bd10      	pop	{r4, pc}
 8089ffe:	bf00      	nop
 808a000:	08093ff8 	.word	0x08093ff8
 808a004:	08093ffd 	.word	0x08093ffd
 808a008:	08089865 	.word	0x08089865

0808a00c <_ZNK19CellularHelperClass5isLTEEv>:

bool CellularHelperClass::isLTE() const {
 808a00c:	b510      	push	{r4, lr}
 808a00e:	b088      	sub	sp, #32
	return getModel().startsWith("SARA-R4");
 808a010:	4601      	mov	r1, r0
 808a012:	4668      	mov	r0, sp
 808a014:	f7ff ff84 	bl	8089f20 <_ZNK19CellularHelperClass8getModelEv>
 808a018:	4909      	ldr	r1, [pc, #36]	; (808a040 <_ZNK19CellularHelperClass5isLTEEv+0x34>)
 808a01a:	a804      	add	r0, sp, #16
 808a01c:	f000 ffb1 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
 808a020:	a904      	add	r1, sp, #16
 808a022:	4668      	mov	r0, sp
 808a024:	f001 f92a 	bl	808b27c <_ZNK6String10startsWithERKS_>
 808a028:	4604      	mov	r4, r0
 808a02a:	a804      	add	r0, sp, #16
 808a02c:	f000 ff62 	bl	808aef4 <_ZN6StringD1Ev>
 808a030:	4668      	mov	r0, sp
 808a032:	f000 ff5f 	bl	808aef4 <_ZN6StringD1Ev>
}
 808a036:	1c20      	adds	r0, r4, #0
 808a038:	bf18      	it	ne
 808a03a:	2001      	movne	r0, #1
 808a03c:	b008      	add	sp, #32
 808a03e:	bd10      	pop	{r4, pc}
 808a040:	08094007 	.word	0x08094007

0808a044 <_ZNK19CellularHelperClass15getOperatorNameEi>:


String CellularHelperClass::getOperatorName(int operatorNameType) const {
 808a044:	b530      	push	{r4, r5, lr}
 808a046:	4615      	mov	r5, r2
 808a048:	b093      	sub	sp, #76	; 0x4c
	String result;
 808a04a:	4913      	ldr	r1, [pc, #76]	; (808a098 <_ZNK19CellularHelperClass15getOperatorNameEi+0x54>)
bool CellularHelperClass::isLTE() const {
	return getModel().startsWith("SARA-R4");
}


String CellularHelperClass::getOperatorName(int operatorNameType) const {
 808a04c:	4604      	mov	r4, r0
	String result;
 808a04e:	f000 ff98 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
	// The default is OPERATOR_NAME_LONG_EONS (9).
	// If the EONS name is not available, then the other things tried in order are:
	// NITZ, CPHS, ROM
	// So basically, something will be returned

	CellularHelperPlusStringResponse resp;
 808a052:	a807      	add	r0, sp, #28
 808a054:	f7ff fd02 	bl	8089a5c <_ZN32CellularHelperPlusStringResponseC1Ev>
	resp.command = "UDOPN";
 808a058:	4910      	ldr	r1, [pc, #64]	; (808a09c <_ZNK19CellularHelperClass15getOperatorNameEi+0x58>)
 808a05a:	a80a      	add	r0, sp, #40	; 0x28
 808a05c:	f000 ffe3 	bl	808b026 <_ZN6StringaSEPKc>
 808a060:	9500      	str	r5, [sp, #0]
 808a062:	4b0f      	ldr	r3, [pc, #60]	; (808a0a0 <_ZNK19CellularHelperClass15getOperatorNameEi+0x5c>)
 808a064:	f242 7210 	movw	r2, #10000	; 0x2710
 808a068:	a907      	add	r1, sp, #28
 808a06a:	480e      	ldr	r0, [pc, #56]	; (808a0a4 <_ZNK19CellularHelperClass15getOperatorNameEi+0x60>)
 808a06c:	f000 fab0 	bl	808a5d0 <cellular_command>

	int respCode = Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+UDOPN=%d\r\n", operatorNameType);

	if (respCode == RESP_OK) {
 808a070:	3002      	adds	r0, #2
 808a072:	d10b      	bne.n	808a08c <_ZNK19CellularHelperClass15getOperatorNameEi+0x48>
		result = resp.getDoubleQuotedPart();
 808a074:	2201      	movs	r2, #1
 808a076:	a907      	add	r1, sp, #28
 808a078:	a803      	add	r0, sp, #12
 808a07a:	f7ff fcbf 	bl	80899fc <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb>
 808a07e:	a903      	add	r1, sp, #12
 808a080:	4620      	mov	r0, r4
 808a082:	f000 ffc8 	bl	808b016 <_ZN6StringaSEOS_>
 808a086:	a803      	add	r0, sp, #12
 808a088:	f000 ff34 	bl	808aef4 <_ZN6StringD1Ev>
	// The default is OPERATOR_NAME_LONG_EONS (9).
	// If the EONS name is not available, then the other things tried in order are:
	// NITZ, CPHS, ROM
	// So basically, something will be returned

	CellularHelperPlusStringResponse resp;
 808a08c:	a807      	add	r0, sp, #28
 808a08e:	f7ff fcff 	bl	8089a90 <_ZN32CellularHelperPlusStringResponseD1Ev>
	if (respCode == RESP_OK) {
		result = resp.getDoubleQuotedPart();
	}

	return result;
}
 808a092:	4620      	mov	r0, r4
 808a094:	b013      	add	sp, #76	; 0x4c
 808a096:	bd30      	pop	{r4, r5, pc}
 808a098:	08094100 	.word	0x08094100
 808a09c:	0809400f 	.word	0x0809400f
 808a0a0:	08094015 	.word	0x08094015
 808a0a4:	08089865 	.word	0x08089865

0808a0a8 <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse>:

	return (respCode == RESP_OK);
}


void CellularHelperClass::getEnvironment(int mode, CellularHelperEnvironmentResponse &resp) const {
 808a0a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808a0aa:	4614      	mov	r4, r2
 808a0ac:	460d      	mov	r5, r1
	resp.command = "CGED";
 808a0ae:	f102 000c 	add.w	r0, r2, #12
 808a0b2:	4907      	ldr	r1, [pc, #28]	; (808a0d0 <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse+0x28>)
 808a0b4:	f000 ffb7 	bl	808b026 <_ZN6StringaSEPKc>
 808a0b8:	9500      	str	r5, [sp, #0]
 808a0ba:	4b06      	ldr	r3, [pc, #24]	; (808a0d4 <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse+0x2c>)
 808a0bc:	f242 7210 	movw	r2, #10000	; 0x2710
 808a0c0:	4621      	mov	r1, r4
 808a0c2:	4805      	ldr	r0, [pc, #20]	; (808a0d8 <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse+0x30>)
 808a0c4:	f000 fa84 	bl	808a5d0 <cellular_command>
	// resp.enableDebug = true;

	resp.resp = Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGED=%d\r\n", mode);
 808a0c8:	6060      	str	r0, [r4, #4]
	if (resp.resp == RESP_OK) {
		resp.postProcess();
	}
}
 808a0ca:	b003      	add	sp, #12
 808a0cc:	bd30      	pop	{r4, r5, pc}
 808a0ce:	bf00      	nop
 808a0d0:	0809406f 	.word	0x0809406f
 808a0d4:	08094074 	.word	0x08094074
 808a0d8:	08089865 	.word	0x08089865

0808a0dc <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse>:
	}

	return resp;
}

void CellularHelperClass::getCREG(CellularHelperCREGResponse &resp) const {
 808a0dc:	b510      	push	{r4, lr}
 808a0de:	460c      	mov	r4, r1
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
 808a0e0:	2100      	movs	r1, #0
 808a0e2:	4b12      	ldr	r3, [pc, #72]	; (808a12c <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x50>)
 808a0e4:	f242 7210 	movw	r2, #10000	; 0x2710
 808a0e8:	4608      	mov	r0, r1
 808a0ea:	f000 fa71 	bl	808a5d0 <cellular_command>
	int tempResp;

	tempResp = Cellular.command(DEFAULT_TIMEOUT, "AT+CREG=2\r\n");
	if (tempResp == RESP_OK) {
 808a0ee:	3002      	adds	r0, #2
 808a0f0:	d11a      	bne.n	808a128 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x4c>
		resp.command = "CREG";
 808a0f2:	490f      	ldr	r1, [pc, #60]	; (808a130 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x54>)
 808a0f4:	f104 000c 	add.w	r0, r4, #12
 808a0f8:	f000 ff95 	bl	808b026 <_ZN6StringaSEPKc>

    template<typename T, typename... Targs>
    inline int command(int (*cb)(int type, const char* buf, int len, T* param),
            T* param, system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
 808a0fc:	4b0d      	ldr	r3, [pc, #52]	; (808a134 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x58>)
 808a0fe:	f242 7210 	movw	r2, #10000	; 0x2710
 808a102:	4621      	mov	r1, r4
 808a104:	480c      	ldr	r0, [pc, #48]	; (808a138 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x5c>)
 808a106:	f000 fa63 	bl	808a5d0 <cellular_command>
		resp.resp = Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CREG?\r\n");
 808a10a:	6060      	str	r0, [r4, #4]
		if (resp.resp == RESP_OK) {
 808a10c:	3002      	adds	r0, #2
 808a10e:	d10b      	bne.n	808a128 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x4c>
			resp.postProcess();
 808a110:	4620      	mov	r0, r4
 808a112:	f7ff fe9f 	bl	8089e54 <_ZN26CellularHelperCREGResponse11postProcessEv>

			// Set back to default
			tempResp = Cellular.command(DEFAULT_TIMEOUT, "AT+CREG=0\r\n");
		}
	}
}
 808a116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
 808a11a:	2100      	movs	r1, #0
 808a11c:	4b07      	ldr	r3, [pc, #28]	; (808a13c <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x60>)
 808a11e:	f242 7210 	movw	r2, #10000	; 0x2710
 808a122:	4608      	mov	r0, r1
 808a124:	f000 ba54 	b.w	808a5d0 <cellular_command>
 808a128:	bd10      	pop	{r4, pc}
 808a12a:	bf00      	nop
 808a12c:	080940af 	.word	0x080940af
 808a130:	080940bb 	.word	0x080940bb
 808a134:	080940c0 	.word	0x080940c0
 808a138:	08089865 	.word	0x08089865
 808a13c:	080940cb 	.word	0x080940cb

0808a140 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>:



// There isn't an overload of String that takes a buffer and length, but that's what comes back from
// the Cellular.command callback, so that's why this method exists.
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 808a140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808a144:	460d      	mov	r5, r1
 808a146:	4616      	mov	r6, r2
	str.reserve(str.length() + (size_t)len + 1);
 808a148:	1c59      	adds	r1, r3, #1



// There isn't an overload of String that takes a buffer and length, but that's what comes back from
// the Cellular.command callback, so that's why this method exists.
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 808a14a:	461f      	mov	r7, r3
	str.reserve(str.length() + (size_t)len + 1);
 808a14c:	68ab      	ldr	r3, [r5, #8]
 808a14e:	4628      	mov	r0, r5
 808a150:	4419      	add	r1, r3



// There isn't an overload of String that takes a buffer and length, but that's what comes back from
// the Cellular.command callback, so that's why this method exists.
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 808a152:	f89d 8018 	ldrb.w	r8, [sp, #24]
	str.reserve(str.length() + (size_t)len + 1);
 808a156:	4634      	mov	r4, r6
 808a158:	f000 feea 	bl	808af30 <_ZN6String7reserveEj>
	for(int ii = 0; ii < len; ii++) {
 808a15c:	1ba3      	subs	r3, r4, r6
 808a15e:	429f      	cmp	r7, r3
 808a160:	dd0d      	ble.n	808a17e <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3e>
		if (!noEOL || (buf[ii] != '\r' && buf[ii] != '\n')) {
 808a162:	f1b8 0f00 	cmp.w	r8, #0
 808a166:	d004      	beq.n	808a172 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x32>
 808a168:	7823      	ldrb	r3, [r4, #0]
 808a16a:	2b0d      	cmp	r3, #13
 808a16c:	d005      	beq.n	808a17a <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3a>
 808a16e:	2b0a      	cmp	r3, #10
 808a170:	d003      	beq.n	808a17a <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3a>
			str.concat(buf[ii]);
 808a172:	7821      	ldrb	r1, [r4, #0]
 808a174:	4628      	mov	r0, r5
 808a176:	f000 fff5 	bl	808b164 <_ZN6String6concatEc>
 808a17a:	3401      	adds	r4, #1

// There isn't an overload of String that takes a buffer and length, but that's what comes back from
// the Cellular.command callback, so that's why this method exists.
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
	str.reserve(str.length() + (size_t)len + 1);
	for(int ii = 0; ii < len; ii++) {
 808a17c:	e7ee      	b.n	808a15c <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x1c>
 808a17e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0808a184 <_ZN28CellularHelperStringResponse5parseEiPKci>:
}




int CellularHelperStringResponse::parse(int type, const char *buf, int len) {
 808a184:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (enableDebug) {
 808a186:	f890 e008 	ldrb.w	lr, [r0, #8]
}




int CellularHelperStringResponse::parse(int type, const char *buf, int len) {
 808a18a:	4604      	mov	r4, r0
 808a18c:	460f      	mov	r7, r1
 808a18e:	4615      	mov	r5, r2
 808a190:	461e      	mov	r6, r3
	if (enableDebug) {
 808a192:	f1be 0f00 	cmp.w	lr, #0
 808a196:	d001      	beq.n	808a19c <_ZN28CellularHelperStringResponse5parseEiPKci+0x18>
		logCellularDebug(type, buf, len);
 808a198:	f7ff fb70 	bl	808987c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	}
	if (type == TYPE_UNKNOWN) {
 808a19c:	b947      	cbnz	r7, 808a1b0 <_ZN28CellularHelperStringResponse5parseEiPKci+0x2c>
		CellularHelper.appendBufferToString(string, buf, len, true);
 808a19e:	2301      	movs	r3, #1
 808a1a0:	9300      	str	r3, [sp, #0]
 808a1a2:	462a      	mov	r2, r5
 808a1a4:	4633      	mov	r3, r6
 808a1a6:	f104 010c 	add.w	r1, r4, #12
 808a1aa:	4803      	ldr	r0, [pc, #12]	; (808a1b8 <_ZN28CellularHelperStringResponse5parseEiPKci+0x34>)
 808a1ac:	f7ff ffc8 	bl	808a140 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>
	}
	return WAIT;
}
 808a1b0:	f04f 30ff 	mov.w	r0, #4294967295
 808a1b4:	b003      	add	sp, #12
 808a1b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808a1b8:	20000cf0 	.word	0x20000cf0

0808a1bc <_ZN32CellularHelperPlusStringResponse5parseEiPKci>:


int CellularHelperPlusStringResponse::parse(int type, const char *buf, int len) {
 808a1bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (enableDebug) {
 808a1be:	f890 e008 	ldrb.w	lr, [r0, #8]
	}
	return WAIT;
}


int CellularHelperPlusStringResponse::parse(int type, const char *buf, int len) {
 808a1c2:	b08b      	sub	sp, #44	; 0x2c
 808a1c4:	4606      	mov	r6, r0
 808a1c6:	460d      	mov	r5, r1
 808a1c8:	4617      	mov	r7, r2
 808a1ca:	461c      	mov	r4, r3
	if (enableDebug) {
 808a1cc:	f1be 0f00 	cmp.w	lr, #0
 808a1d0:	d001      	beq.n	808a1d6 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x1a>
		logCellularDebug(type, buf, len);
 808a1d2:	f7ff fb53 	bl	808987c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	}
	if (type == TYPE_PLUS) {
 808a1d6:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
 808a1da:	d12a      	bne.n	808a232 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x76>
		// Copy to temporary string to make processing easier
		char *copy = (char *) malloc(len + 1);
 808a1dc:	1c60      	adds	r0, r4, #1
 808a1de:	f000 fb33 	bl	808a848 <malloc>
		if (copy) {
 808a1e2:	4605      	mov	r5, r0
 808a1e4:	b328      	cbz	r0, 808a232 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x76>
			strncpy(copy, buf, len);
 808a1e6:	4622      	mov	r2, r4
 808a1e8:	4639      	mov	r1, r7
 808a1ea:	f005 f830 	bl	808f24e <strncpy>
			copy[len] = 0;
 808a1ee:	2300      	movs	r3, #0
 808a1f0:	552b      	strb	r3, [r5, r4]

			// We return the parts of the + response corresponding to the command we requested
			char searchFor[32];
			snprintf(searchFor, sizeof(searchFor), "\n+%s: ", command.c_str());
 808a1f2:	68f3      	ldr	r3, [r6, #12]
 808a1f4:	4a11      	ldr	r2, [pc, #68]	; (808a23c <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x80>)
 808a1f6:	2120      	movs	r1, #32
 808a1f8:	a802      	add	r0, sp, #8
 808a1fa:	f000 fb5d 	bl	808a8b8 <snprintf>

			//Log.info("searching for: +%s:", command.c_str());

			char *start = strstr(copy, searchFor);
 808a1fe:	a902      	add	r1, sp, #8
 808a200:	4628      	mov	r0, r5
 808a202:	f005 f837 	bl	808f274 <strstr>
			if (start) {
 808a206:	4604      	mov	r4, r0
 808a208:	b180      	cbz	r0, 808a22c <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x70>
				start += strlen(searchFor);
 808a20a:	a802      	add	r0, sp, #8
 808a20c:	f005 f802 	bl	808f214 <strlen>
 808a210:	4404      	add	r4, r0

				char *end = strchr(start, '\r');
 808a212:	210d      	movs	r1, #13
 808a214:	4620      	mov	r0, r4
 808a216:	f004 faad 	bl	808e774 <strchr>
				CellularHelper.appendBufferToString(string, start, end - start);
 808a21a:	2301      	movs	r3, #1
 808a21c:	9300      	str	r3, [sp, #0]
 808a21e:	4622      	mov	r2, r4
 808a220:	1b03      	subs	r3, r0, r4
 808a222:	f106 011c 	add.w	r1, r6, #28
 808a226:	4806      	ldr	r0, [pc, #24]	; (808a240 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x84>)
 808a228:	f7ff ff8a 	bl	808a140 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>
			}
			else {
				//Log.info("not found");
			}

			free(copy);
 808a22c:	4628      	mov	r0, r5
 808a22e:	f000 fb13 	bl	808a858 <free>
		}
	}
	return WAIT;
}
 808a232:	f04f 30ff 	mov.w	r0, #4294967295
 808a236:	b00b      	add	sp, #44	; 0x2c
 808a238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808a23a:	bf00      	nop
 808a23c:	0809410d 	.word	0x0809410d
 808a240:	20000cf0 	.word	0x20000cf0

0808a244 <_GLOBAL__sub_I_CellularHelper>:
 808a244:	f000 b82c 	b.w	808a2a0 <HAL_Pin_Map>

0808a248 <_GLOBAL__sub_I__ZN16SerialBufferBaseC2EPhjR11USARTSerial>:
 808a248:	f000 b82a 	b.w	808a2a0 <HAL_Pin_Map>

0808a24c <_GLOBAL__sub_I__ZN9PAMSensorC2Ev>:
 808a24c:	f000 b828 	b.w	808a2a0 <HAL_Pin_Map>

0808a250 <_GLOBAL__sub_I__ZN13PAMSensorFeedC2EP9PAMSensor>:
 808a250:	f000 b826 	b.w	808a2a0 <HAL_Pin_Map>

0808a254 <_GLOBAL__sub_I__ZN9PAMSpecieC2Ettff>:
 808a254:	f000 b824 	b.w	808a2a0 <HAL_Pin_Map>

0808a258 <_GLOBAL__sub_I__ZN7HIH8120C2Eh>:
 808a258:	f000 b822 	b.w	808a2a0 <HAL_Pin_Map>

0808a25c <_GLOBAL__sub_I__ZN9PlantowerC2ER11USARTSerial>:
 808a25c:	f000 b820 	b.w	808a2a0 <HAL_Pin_Map>

0808a260 <_GLOBAL__sub_I__ZN5T6713C2Ev>:
 808a260:	f000 b81e 	b.w	808a2a0 <HAL_Pin_Map>

0808a264 <_GLOBAL__sub_I__ZN9TPHFusion16becomesResponderEtb>:
 808a264:	f000 b81c 	b.w	808a2a0 <HAL_Pin_Map>

0808a268 <_GLOBAL__sub_I__ZN9TPHFusionC2Ehb>:
 808a268:	f000 b81a 	b.w	808a2a0 <HAL_Pin_Map>

0808a26c <_GLOBAL__sub_I__ZN6BME680C2Ev>:
 808a26c:	f000 b818 	b.w	808a2a0 <HAL_Pin_Map>

0808a270 <_GLOBAL__sub_I__ZN5PAMCOC2Ehhhh>:
 808a270:	f000 b816 	b.w	808a2a0 <HAL_Pin_Map>

0808a274 <_GLOBAL__sub_I_PAMEEPROM.cpp>:
 808a274:	f000 b814 	b.w	808a2a0 <HAL_Pin_Map>

0808a278 <_GLOBAL__sub_I__Z22__fetch_pam_usb_serialv>:
 808a278:	f000 b812 	b.w	808a2a0 <HAL_Pin_Map>

0808a27c <_GLOBAL__sub_I__ZN16PAMSerialManagerC2ER6Stream>:
 808a27c:	f000 b810 	b.w	808a2a0 <HAL_Pin_Map>

0808a280 <_GLOBAL__sub_I__ZN13PAMSerialMenuC2Ev>:
 808a280:	f000 b80e 	b.w	808a2a0 <HAL_Pin_Map>

0808a284 <_GLOBAL__sub_I__ZN18PAMSerialEditValueIfE16becomesResponderEtb>:
 808a284:	f000 b80c 	b.w	808a2a0 <HAL_Pin_Map>

0808a288 <_GLOBAL__sub_I__ZN16PAMSensorManager8instanceE>:
 808a288:	f000 b80a 	b.w	808a2a0 <HAL_Pin_Map>

0808a28c <_GLOBAL__sub_I_MinimumSerial.cpp>:
 808a28c:	f000 b808 	b.w	808a2a0 <HAL_Pin_Map>

0808a290 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
 808a290:	f000 b806 	b.w	808a2a0 <HAL_Pin_Map>

0808a294 <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
 808a294:	f000 b804 	b.w	808a2a0 <HAL_Pin_Map>

0808a298 <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
 808a298:	f000 b802 	b.w	808a2a0 <HAL_Pin_Map>

0808a29c <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
 808a29c:	f000 b800 	b.w	808a2a0 <HAL_Pin_Map>

0808a2a0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 808a2a0:	b508      	push	{r3, lr}
 808a2a2:	4b02      	ldr	r3, [pc, #8]	; (808a2ac <HAL_Pin_Map+0xc>)
 808a2a4:	681b      	ldr	r3, [r3, #0]
 808a2a6:	681b      	ldr	r3, [r3, #0]
 808a2a8:	9301      	str	r3, [sp, #4]
 808a2aa:	bd08      	pop	{r3, pc}
 808a2ac:	080401b0 	.word	0x080401b0

0808a2b0 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 808a2b0:	b508      	push	{r3, lr}
 808a2b2:	4b02      	ldr	r3, [pc, #8]	; (808a2bc <HAL_Validate_Pin_Function+0xc>)
 808a2b4:	681b      	ldr	r3, [r3, #0]
 808a2b6:	685b      	ldr	r3, [r3, #4]
 808a2b8:	9301      	str	r3, [sp, #4]
 808a2ba:	bd08      	pop	{r3, pc}
 808a2bc:	080401b0 	.word	0x080401b0

0808a2c0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 808a2c0:	b508      	push	{r3, lr}
 808a2c2:	4b02      	ldr	r3, [pc, #8]	; (808a2cc <HAL_Pin_Mode+0xc>)
 808a2c4:	681b      	ldr	r3, [r3, #0]
 808a2c6:	689b      	ldr	r3, [r3, #8]
 808a2c8:	9301      	str	r3, [sp, #4]
 808a2ca:	bd08      	pop	{r3, pc}
 808a2cc:	080401b0 	.word	0x080401b0

0808a2d0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 808a2d0:	b508      	push	{r3, lr}
 808a2d2:	4b02      	ldr	r3, [pc, #8]	; (808a2dc <HAL_Get_Pin_Mode+0xc>)
 808a2d4:	681b      	ldr	r3, [r3, #0]
 808a2d6:	68db      	ldr	r3, [r3, #12]
 808a2d8:	9301      	str	r3, [sp, #4]
 808a2da:	bd08      	pop	{r3, pc}
 808a2dc:	080401b0 	.word	0x080401b0

0808a2e0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 808a2e0:	b508      	push	{r3, lr}
 808a2e2:	4b02      	ldr	r3, [pc, #8]	; (808a2ec <HAL_GPIO_Write+0xc>)
 808a2e4:	681b      	ldr	r3, [r3, #0]
 808a2e6:	691b      	ldr	r3, [r3, #16]
 808a2e8:	9301      	str	r3, [sp, #4]
 808a2ea:	bd08      	pop	{r3, pc}
 808a2ec:	080401b0 	.word	0x080401b0

0808a2f0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 808a2f0:	b508      	push	{r3, lr}
 808a2f2:	4b02      	ldr	r3, [pc, #8]	; (808a2fc <HAL_GPIO_Read+0xc>)
 808a2f4:	681b      	ldr	r3, [r3, #0]
 808a2f6:	695b      	ldr	r3, [r3, #20]
 808a2f8:	9301      	str	r3, [sp, #4]
 808a2fa:	bd08      	pop	{r3, pc}
 808a2fc:	080401b0 	.word	0x080401b0

0808a300 <HAL_ADC_Set_Sample_Time>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
 808a300:	b508      	push	{r3, lr}
 808a302:	4b02      	ldr	r3, [pc, #8]	; (808a30c <HAL_ADC_Set_Sample_Time+0xc>)
 808a304:	681b      	ldr	r3, [r3, #0]
 808a306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808a308:	9301      	str	r3, [sp, #4]
 808a30a:	bd08      	pop	{r3, pc}
 808a30c:	080401b0 	.word	0x080401b0

0808a310 <HAL_ADC_Read>:
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 808a310:	b508      	push	{r3, lr}
 808a312:	4b02      	ldr	r3, [pc, #8]	; (808a31c <HAL_ADC_Read+0xc>)
 808a314:	681b      	ldr	r3, [r3, #0]
 808a316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808a318:	9301      	str	r3, [sp, #4]
 808a31a:	bd08      	pop	{r3, pc}
 808a31c:	080401b0 	.word	0x080401b0

0808a320 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 808a320:	b508      	push	{r3, lr}
 808a322:	4b02      	ldr	r3, [pc, #8]	; (808a32c <HAL_SPI_Begin+0xc>)
 808a324:	681b      	ldr	r3, [r3, #0]
 808a326:	681b      	ldr	r3, [r3, #0]
 808a328:	9301      	str	r3, [sp, #4]
 808a32a:	bd08      	pop	{r3, pc}
 808a32c:	080401b4 	.word	0x080401b4

0808a330 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 808a330:	b508      	push	{r3, lr}
 808a332:	4b02      	ldr	r3, [pc, #8]	; (808a33c <HAL_SPI_Set_Bit_Order+0xc>)
 808a334:	681b      	ldr	r3, [r3, #0]
 808a336:	689b      	ldr	r3, [r3, #8]
 808a338:	9301      	str	r3, [sp, #4]
 808a33a:	bd08      	pop	{r3, pc}
 808a33c:	080401b4 	.word	0x080401b4

0808a340 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 808a340:	b508      	push	{r3, lr}
 808a342:	4b02      	ldr	r3, [pc, #8]	; (808a34c <HAL_SPI_Set_Data_Mode+0xc>)
 808a344:	681b      	ldr	r3, [r3, #0]
 808a346:	68db      	ldr	r3, [r3, #12]
 808a348:	9301      	str	r3, [sp, #4]
 808a34a:	bd08      	pop	{r3, pc}
 808a34c:	080401b4 	.word	0x080401b4

0808a350 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 808a350:	b508      	push	{r3, lr}
 808a352:	4b02      	ldr	r3, [pc, #8]	; (808a35c <HAL_SPI_Set_Clock_Divider+0xc>)
 808a354:	681b      	ldr	r3, [r3, #0]
 808a356:	691b      	ldr	r3, [r3, #16]
 808a358:	9301      	str	r3, [sp, #4]
 808a35a:	bd08      	pop	{r3, pc}
 808a35c:	080401b4 	.word	0x080401b4

0808a360 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 808a360:	b508      	push	{r3, lr}
 808a362:	4b02      	ldr	r3, [pc, #8]	; (808a36c <HAL_SPI_Send_Receive_Data+0xc>)
 808a364:	681b      	ldr	r3, [r3, #0]
 808a366:	695b      	ldr	r3, [r3, #20]
 808a368:	9301      	str	r3, [sp, #4]
 808a36a:	bd08      	pop	{r3, pc}
 808a36c:	080401b4 	.word	0x080401b4

0808a370 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 808a370:	b508      	push	{r3, lr}
 808a372:	4b02      	ldr	r3, [pc, #8]	; (808a37c <HAL_SPI_Init+0xc>)
 808a374:	681b      	ldr	r3, [r3, #0]
 808a376:	69db      	ldr	r3, [r3, #28]
 808a378:	9301      	str	r3, [sp, #4]
 808a37a:	bd08      	pop	{r3, pc}
 808a37c:	080401b4 	.word	0x080401b4

0808a380 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 808a380:	b508      	push	{r3, lr}
 808a382:	4b02      	ldr	r3, [pc, #8]	; (808a38c <HAL_SPI_Is_Enabled+0xc>)
 808a384:	681b      	ldr	r3, [r3, #0]
 808a386:	6a1b      	ldr	r3, [r3, #32]
 808a388:	9301      	str	r3, [sp, #4]
 808a38a:	bd08      	pop	{r3, pc}
 808a38c:	080401b4 	.word	0x080401b4

0808a390 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 808a390:	b508      	push	{r3, lr}
 808a392:	4b02      	ldr	r3, [pc, #8]	; (808a39c <HAL_SPI_Info+0xc>)
 808a394:	681b      	ldr	r3, [r3, #0]
 808a396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808a398:	9301      	str	r3, [sp, #4]
 808a39a:	bd08      	pop	{r3, pc}
 808a39c:	080401b4 	.word	0x080401b4

0808a3a0 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
 808a3a0:	b508      	push	{r3, lr}
 808a3a2:	4b02      	ldr	r3, [pc, #8]	; (808a3ac <HAL_SPI_DMA_Transfer+0xc>)
 808a3a4:	681b      	ldr	r3, [r3, #0]
 808a3a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808a3a8:	9301      	str	r3, [sp, #4]
 808a3aa:	bd08      	pop	{r3, pc}
 808a3ac:	080401b4 	.word	0x080401b4

0808a3b0 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
 808a3b0:	b508      	push	{r3, lr}
 808a3b2:	4b02      	ldr	r3, [pc, #8]	; (808a3bc <HAL_SPI_DMA_Transfer_Status+0xc>)
 808a3b4:	681b      	ldr	r3, [r3, #0]
 808a3b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808a3b8:	9301      	str	r3, [sp, #4]
 808a3ba:	bd08      	pop	{r3, pc}
 808a3bc:	080401b4 	.word	0x080401b4

0808a3c0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 808a3c0:	b508      	push	{r3, lr}
 808a3c2:	4b02      	ldr	r3, [pc, #8]	; (808a3cc <HAL_RNG_GetRandomNumber+0xc>)
 808a3c4:	681b      	ldr	r3, [r3, #0]
 808a3c6:	685b      	ldr	r3, [r3, #4]
 808a3c8:	9301      	str	r3, [sp, #4]
 808a3ca:	bd08      	pop	{r3, pc}
 808a3cc:	0804019c 	.word	0x0804019c

0808a3d0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 808a3d0:	b508      	push	{r3, lr}
 808a3d2:	4b02      	ldr	r3, [pc, #8]	; (808a3dc <HAL_Delay_Microseconds+0xc>)
 808a3d4:	681b      	ldr	r3, [r3, #0]
 808a3d6:	68db      	ldr	r3, [r3, #12]
 808a3d8:	9301      	str	r3, [sp, #4]
 808a3da:	bd08      	pop	{r3, pc}
 808a3dc:	0804019c 	.word	0x0804019c

0808a3e0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 808a3e0:	b508      	push	{r3, lr}
 808a3e2:	4b02      	ldr	r3, [pc, #8]	; (808a3ec <HAL_Timer_Get_Milli_Seconds+0xc>)
 808a3e4:	681b      	ldr	r3, [r3, #0]
 808a3e6:	695b      	ldr	r3, [r3, #20]
 808a3e8:	9301      	str	r3, [sp, #4]
 808a3ea:	bd08      	pop	{r3, pc}
 808a3ec:	0804019c 	.word	0x0804019c

0808a3f0 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 808a3f0:	b508      	push	{r3, lr}
 808a3f2:	4b02      	ldr	r3, [pc, #8]	; (808a3fc <HAL_RTC_Get_UnixTime+0xc>)
 808a3f4:	681b      	ldr	r3, [r3, #0]
 808a3f6:	69db      	ldr	r3, [r3, #28]
 808a3f8:	9301      	str	r3, [sp, #4]
 808a3fa:	bd08      	pop	{r3, pc}
 808a3fc:	0804019c 	.word	0x0804019c

0808a400 <HAL_RTC_Set_UnixTime>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
 808a400:	b508      	push	{r3, lr}
 808a402:	4b02      	ldr	r3, [pc, #8]	; (808a40c <HAL_RTC_Set_UnixTime+0xc>)
 808a404:	681b      	ldr	r3, [r3, #0]
 808a406:	6a1b      	ldr	r3, [r3, #32]
 808a408:	9301      	str	r3, [sp, #4]
 808a40a:	bd08      	pop	{r3, pc}
 808a40c:	0804019c 	.word	0x0804019c

0808a410 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 808a410:	b508      	push	{r3, lr}
 808a412:	4b02      	ldr	r3, [pc, #8]	; (808a41c <HAL_EEPROM_Init+0xc>)
 808a414:	681b      	ldr	r3, [r3, #0]
 808a416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808a418:	9301      	str	r3, [sp, #4]
 808a41a:	bd08      	pop	{r3, pc}
 808a41c:	0804019c 	.word	0x0804019c

0808a420 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
 808a420:	b508      	push	{r3, lr}
 808a422:	4b02      	ldr	r3, [pc, #8]	; (808a42c <HAL_EEPROM_Get+0xc>)
 808a424:	681b      	ldr	r3, [r3, #0]
 808a426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808a428:	9301      	str	r3, [sp, #4]
 808a42a:	bd08      	pop	{r3, pc}
 808a42c:	0804019c 	.word	0x0804019c

0808a430 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 808a430:	b508      	push	{r3, lr}
 808a432:	4b02      	ldr	r3, [pc, #8]	; (808a43c <HAL_EEPROM_Put+0xc>)
 808a434:	681b      	ldr	r3, [r3, #0]
 808a436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808a438:	9301      	str	r3, [sp, #4]
 808a43a:	bd08      	pop	{r3, pc}
 808a43c:	0804019c 	.word	0x0804019c

0808a440 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 808a440:	b508      	push	{r3, lr}
 808a442:	4b02      	ldr	r3, [pc, #8]	; (808a44c <HAL_RTC_Time_Is_Valid+0xc>)
 808a444:	681b      	ldr	r3, [r3, #0]
 808a446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 808a448:	9301      	str	r3, [sp, #4]
 808a44a:	bd08      	pop	{r3, pc}
 808a44c:	0804019c 	.word	0x0804019c

0808a450 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 808a450:	b508      	push	{r3, lr}
 808a452:	4b02      	ldr	r3, [pc, #8]	; (808a45c <os_mutex_create+0xc>)
 808a454:	681b      	ldr	r3, [r3, #0]
 808a456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808a458:	9301      	str	r3, [sp, #4]
 808a45a:	bd08      	pop	{r3, pc}
 808a45c:	080401d0 	.word	0x080401d0

0808a460 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 808a460:	b508      	push	{r3, lr}
 808a462:	4b02      	ldr	r3, [pc, #8]	; (808a46c <HAL_USART_Init+0xc>)
 808a464:	681b      	ldr	r3, [r3, #0]
 808a466:	699b      	ldr	r3, [r3, #24]
 808a468:	9301      	str	r3, [sp, #4]
 808a46a:	bd08      	pop	{r3, pc}
 808a46c:	080401c4 	.word	0x080401c4

0808a470 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 808a470:	b508      	push	{r3, lr}
 808a472:	4b02      	ldr	r3, [pc, #8]	; (808a47c <HAL_USART_Write_Data+0xc>)
 808a474:	681b      	ldr	r3, [r3, #0]
 808a476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808a478:	9301      	str	r3, [sp, #4]
 808a47a:	bd08      	pop	{r3, pc}
 808a47c:	080401c4 	.word	0x080401c4

0808a480 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 808a480:	b508      	push	{r3, lr}
 808a482:	4b02      	ldr	r3, [pc, #8]	; (808a48c <HAL_USART_Available_Data+0xc>)
 808a484:	681b      	ldr	r3, [r3, #0]
 808a486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808a488:	9301      	str	r3, [sp, #4]
 808a48a:	bd08      	pop	{r3, pc}
 808a48c:	080401c4 	.word	0x080401c4

0808a490 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 808a490:	b508      	push	{r3, lr}
 808a492:	4b02      	ldr	r3, [pc, #8]	; (808a49c <HAL_USART_Read_Data+0xc>)
 808a494:	681b      	ldr	r3, [r3, #0]
 808a496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808a498:	9301      	str	r3, [sp, #4]
 808a49a:	bd08      	pop	{r3, pc}
 808a49c:	080401c4 	.word	0x080401c4

0808a4a0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 808a4a0:	b508      	push	{r3, lr}
 808a4a2:	4b02      	ldr	r3, [pc, #8]	; (808a4ac <HAL_USART_Peek_Data+0xc>)
 808a4a4:	681b      	ldr	r3, [r3, #0]
 808a4a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808a4a8:	9301      	str	r3, [sp, #4]
 808a4aa:	bd08      	pop	{r3, pc}
 808a4ac:	080401c4 	.word	0x080401c4

0808a4b0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 808a4b0:	b508      	push	{r3, lr}
 808a4b2:	4b02      	ldr	r3, [pc, #8]	; (808a4bc <HAL_USART_Flush_Data+0xc>)
 808a4b4:	681b      	ldr	r3, [r3, #0]
 808a4b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808a4b8:	9301      	str	r3, [sp, #4]
 808a4ba:	bd08      	pop	{r3, pc}
 808a4bc:	080401c4 	.word	0x080401c4

0808a4c0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 808a4c0:	b508      	push	{r3, lr}
 808a4c2:	4b02      	ldr	r3, [pc, #8]	; (808a4cc <HAL_USART_Is_Enabled+0xc>)
 808a4c4:	681b      	ldr	r3, [r3, #0]
 808a4c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808a4c8:	9301      	str	r3, [sp, #4]
 808a4ca:	bd08      	pop	{r3, pc}
 808a4cc:	080401c4 	.word	0x080401c4

0808a4d0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 808a4d0:	b508      	push	{r3, lr}
 808a4d2:	4b02      	ldr	r3, [pc, #8]	; (808a4dc <HAL_USART_Available_Data_For_Write+0xc>)
 808a4d4:	681b      	ldr	r3, [r3, #0]
 808a4d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808a4d8:	9301      	str	r3, [sp, #4]
 808a4da:	bd08      	pop	{r3, pc}
 808a4dc:	080401c4 	.word	0x080401c4

0808a4e0 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 808a4e0:	b508      	push	{r3, lr}
 808a4e2:	4b02      	ldr	r3, [pc, #8]	; (808a4ec <HAL_USART_BeginConfig+0xc>)
 808a4e4:	681b      	ldr	r3, [r3, #0]
 808a4e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808a4e8:	9301      	str	r3, [sp, #4]
 808a4ea:	bd08      	pop	{r3, pc}
 808a4ec:	080401c4 	.word	0x080401c4

0808a4f0 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 808a4f0:	b508      	push	{r3, lr}
 808a4f2:	4b02      	ldr	r3, [pc, #8]	; (808a4fc <HAL_I2C_Begin+0xc>)
 808a4f4:	681b      	ldr	r3, [r3, #0]
 808a4f6:	68db      	ldr	r3, [r3, #12]
 808a4f8:	9301      	str	r3, [sp, #4]
 808a4fa:	bd08      	pop	{r3, pc}
 808a4fc:	080401ac 	.word	0x080401ac

0808a500 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 808a500:	b508      	push	{r3, lr}
 808a502:	4b02      	ldr	r3, [pc, #8]	; (808a50c <HAL_I2C_Request_Data+0xc>)
 808a504:	681b      	ldr	r3, [r3, #0]
 808a506:	695b      	ldr	r3, [r3, #20]
 808a508:	9301      	str	r3, [sp, #4]
 808a50a:	bd08      	pop	{r3, pc}
 808a50c:	080401ac 	.word	0x080401ac

0808a510 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 808a510:	b508      	push	{r3, lr}
 808a512:	4b02      	ldr	r3, [pc, #8]	; (808a51c <HAL_I2C_Begin_Transmission+0xc>)
 808a514:	681b      	ldr	r3, [r3, #0]
 808a516:	699b      	ldr	r3, [r3, #24]
 808a518:	9301      	str	r3, [sp, #4]
 808a51a:	bd08      	pop	{r3, pc}
 808a51c:	080401ac 	.word	0x080401ac

0808a520 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 808a520:	b508      	push	{r3, lr}
 808a522:	4b02      	ldr	r3, [pc, #8]	; (808a52c <HAL_I2C_End_Transmission+0xc>)
 808a524:	681b      	ldr	r3, [r3, #0]
 808a526:	69db      	ldr	r3, [r3, #28]
 808a528:	9301      	str	r3, [sp, #4]
 808a52a:	bd08      	pop	{r3, pc}
 808a52c:	080401ac 	.word	0x080401ac

0808a530 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 808a530:	b508      	push	{r3, lr}
 808a532:	4b02      	ldr	r3, [pc, #8]	; (808a53c <HAL_I2C_Write_Data+0xc>)
 808a534:	681b      	ldr	r3, [r3, #0]
 808a536:	6a1b      	ldr	r3, [r3, #32]
 808a538:	9301      	str	r3, [sp, #4]
 808a53a:	bd08      	pop	{r3, pc}
 808a53c:	080401ac 	.word	0x080401ac

0808a540 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 808a540:	b508      	push	{r3, lr}
 808a542:	4b02      	ldr	r3, [pc, #8]	; (808a54c <HAL_I2C_Available_Data+0xc>)
 808a544:	681b      	ldr	r3, [r3, #0]
 808a546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808a548:	9301      	str	r3, [sp, #4]
 808a54a:	bd08      	pop	{r3, pc}
 808a54c:	080401ac 	.word	0x080401ac

0808a550 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 808a550:	b508      	push	{r3, lr}
 808a552:	4b02      	ldr	r3, [pc, #8]	; (808a55c <HAL_I2C_Read_Data+0xc>)
 808a554:	681b      	ldr	r3, [r3, #0]
 808a556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808a558:	9301      	str	r3, [sp, #4]
 808a55a:	bd08      	pop	{r3, pc}
 808a55c:	080401ac 	.word	0x080401ac

0808a560 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 808a560:	b508      	push	{r3, lr}
 808a562:	4b02      	ldr	r3, [pc, #8]	; (808a56c <HAL_I2C_Peek_Data+0xc>)
 808a564:	681b      	ldr	r3, [r3, #0]
 808a566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808a568:	9301      	str	r3, [sp, #4]
 808a56a:	bd08      	pop	{r3, pc}
 808a56c:	080401ac 	.word	0x080401ac

0808a570 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 808a570:	b508      	push	{r3, lr}
 808a572:	4b02      	ldr	r3, [pc, #8]	; (808a57c <HAL_I2C_Flush_Data+0xc>)
 808a574:	681b      	ldr	r3, [r3, #0]
 808a576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808a578:	9301      	str	r3, [sp, #4]
 808a57a:	bd08      	pop	{r3, pc}
 808a57c:	080401ac 	.word	0x080401ac

0808a580 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 808a580:	b508      	push	{r3, lr}
 808a582:	4b02      	ldr	r3, [pc, #8]	; (808a58c <HAL_I2C_Is_Enabled+0xc>)
 808a584:	681b      	ldr	r3, [r3, #0]
 808a586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808a588:	9301      	str	r3, [sp, #4]
 808a58a:	bd08      	pop	{r3, pc}
 808a58c:	080401ac 	.word	0x080401ac

0808a590 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 808a590:	b508      	push	{r3, lr}
 808a592:	4b02      	ldr	r3, [pc, #8]	; (808a59c <HAL_I2C_Init+0xc>)
 808a594:	681b      	ldr	r3, [r3, #0]
 808a596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808a598:	9301      	str	r3, [sp, #4]
 808a59a:	bd08      	pop	{r3, pc}
 808a59c:	080401ac 	.word	0x080401ac

0808a5a0 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
 808a5a0:	b508      	push	{r3, lr}
 808a5a2:	4b02      	ldr	r3, [pc, #8]	; (808a5ac <HAL_I2C_Acquire+0xc>)
 808a5a4:	681b      	ldr	r3, [r3, #0]
 808a5a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808a5a8:	9301      	str	r3, [sp, #4]
 808a5aa:	bd08      	pop	{r3, pc}
 808a5ac:	080401ac 	.word	0x080401ac

0808a5b0 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
 808a5b0:	b508      	push	{r3, lr}
 808a5b2:	4b02      	ldr	r3, [pc, #8]	; (808a5bc <HAL_I2C_Release+0xc>)
 808a5b4:	681b      	ldr	r3, [r3, #0]
 808a5b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808a5b8:	9301      	str	r3, [sp, #4]
 808a5ba:	bd08      	pop	{r3, pc}
 808a5bc:	080401ac 	.word	0x080401ac

0808a5c0 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 808a5c0:	b508      	push	{r3, lr}
 808a5c2:	4b02      	ldr	r3, [pc, #8]	; (808a5cc <inet_gethostbyname+0xc>)
 808a5c4:	681b      	ldr	r3, [r3, #0]
 808a5c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808a5c8:	9301      	str	r3, [sp, #4]
 808a5ca:	bd08      	pop	{r3, pc}
 808a5cc:	08060020 	.word	0x08060020

0808a5d0 <cellular_command>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 808a5d0:	b508      	push	{r3, lr}
 808a5d2:	4b02      	ldr	r3, [pc, #8]	; (808a5dc <cellular_command+0xc>)
 808a5d4:	681b      	ldr	r3, [r3, #0]
 808a5d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808a5d8:	9301      	str	r3, [sp, #4]
 808a5da:	bd08      	pop	{r3, pc}
 808a5dc:	08060020 	.word	0x08060020

0808a5e0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 808a5e0:	b508      	push	{r3, lr}
 808a5e2:	4b02      	ldr	r3, [pc, #8]	; (808a5ec <HAL_USB_USART_Init+0xc>)
 808a5e4:	681b      	ldr	r3, [r3, #0]
 808a5e6:	681b      	ldr	r3, [r3, #0]
 808a5e8:	9301      	str	r3, [sp, #4]
 808a5ea:	bd08      	pop	{r3, pc}
 808a5ec:	0806001c 	.word	0x0806001c

0808a5f0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 808a5f0:	b508      	push	{r3, lr}
 808a5f2:	4b02      	ldr	r3, [pc, #8]	; (808a5fc <HAL_USB_USART_Begin+0xc>)
 808a5f4:	681b      	ldr	r3, [r3, #0]
 808a5f6:	685b      	ldr	r3, [r3, #4]
 808a5f8:	9301      	str	r3, [sp, #4]
 808a5fa:	bd08      	pop	{r3, pc}
 808a5fc:	0806001c 	.word	0x0806001c

0808a600 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 808a600:	b508      	push	{r3, lr}
 808a602:	4b02      	ldr	r3, [pc, #8]	; (808a60c <HAL_USB_USART_Available_Data+0xc>)
 808a604:	681b      	ldr	r3, [r3, #0]
 808a606:	691b      	ldr	r3, [r3, #16]
 808a608:	9301      	str	r3, [sp, #4]
 808a60a:	bd08      	pop	{r3, pc}
 808a60c:	0806001c 	.word	0x0806001c

0808a610 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 808a610:	b508      	push	{r3, lr}
 808a612:	4b02      	ldr	r3, [pc, #8]	; (808a61c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 808a614:	681b      	ldr	r3, [r3, #0]
 808a616:	695b      	ldr	r3, [r3, #20]
 808a618:	9301      	str	r3, [sp, #4]
 808a61a:	bd08      	pop	{r3, pc}
 808a61c:	0806001c 	.word	0x0806001c

0808a620 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 808a620:	b508      	push	{r3, lr}
 808a622:	4b02      	ldr	r3, [pc, #8]	; (808a62c <HAL_USB_USART_Receive_Data+0xc>)
 808a624:	681b      	ldr	r3, [r3, #0]
 808a626:	699b      	ldr	r3, [r3, #24]
 808a628:	9301      	str	r3, [sp, #4]
 808a62a:	bd08      	pop	{r3, pc}
 808a62c:	0806001c 	.word	0x0806001c

0808a630 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 808a630:	b508      	push	{r3, lr}
 808a632:	4b02      	ldr	r3, [pc, #8]	; (808a63c <HAL_USB_USART_Send_Data+0xc>)
 808a634:	681b      	ldr	r3, [r3, #0]
 808a636:	69db      	ldr	r3, [r3, #28]
 808a638:	9301      	str	r3, [sp, #4]
 808a63a:	bd08      	pop	{r3, pc}
 808a63c:	0806001c 	.word	0x0806001c

0808a640 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 808a640:	b508      	push	{r3, lr}
 808a642:	4b02      	ldr	r3, [pc, #8]	; (808a64c <HAL_USB_USART_Flush_Data+0xc>)
 808a644:	681b      	ldr	r3, [r3, #0]
 808a646:	6a1b      	ldr	r3, [r3, #32]
 808a648:	9301      	str	r3, [sp, #4]
 808a64a:	bd08      	pop	{r3, pc}
 808a64c:	0806001c 	.word	0x0806001c

0808a650 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 808a650:	b508      	push	{r3, lr}
 808a652:	4b02      	ldr	r3, [pc, #8]	; (808a65c <log_message_v+0xc>)
 808a654:	681b      	ldr	r3, [r3, #0]
 808a656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808a658:	9301      	str	r3, [sp, #4]
 808a65a:	bd08      	pop	{r3, pc}
 808a65c:	080201a0 	.word	0x080201a0

0808a660 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 808a660:	b508      	push	{r3, lr}
 808a662:	4b02      	ldr	r3, [pc, #8]	; (808a66c <system_mode+0xc>)
 808a664:	681b      	ldr	r3, [r3, #0]
 808a666:	681b      	ldr	r3, [r3, #0]
 808a668:	9301      	str	r3, [sp, #4]
 808a66a:	bd08      	pop	{r3, pc}
 808a66c:	080401a4 	.word	0x080401a4

0808a670 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 808a670:	b508      	push	{r3, lr}
 808a672:	4b02      	ldr	r3, [pc, #8]	; (808a67c <set_system_mode+0xc>)
 808a674:	681b      	ldr	r3, [r3, #0]
 808a676:	685b      	ldr	r3, [r3, #4]
 808a678:	9301      	str	r3, [sp, #4]
 808a67a:	bd08      	pop	{r3, pc}
 808a67c:	080401a4 	.word	0x080401a4

0808a680 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 808a680:	b508      	push	{r3, lr}
 808a682:	4b02      	ldr	r3, [pc, #8]	; (808a68c <system_delay_ms+0xc>)
 808a684:	681b      	ldr	r3, [r3, #0]
 808a686:	695b      	ldr	r3, [r3, #20]
 808a688:	9301      	str	r3, [sp, #4]
 808a68a:	bd08      	pop	{r3, pc}
 808a68c:	080401a4 	.word	0x080401a4

0808a690 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 808a690:	b508      	push	{r3, lr}
 808a692:	4b02      	ldr	r3, [pc, #8]	; (808a69c <system_thread_set_state+0xc>)
 808a694:	681b      	ldr	r3, [r3, #0]
 808a696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808a698:	9301      	str	r3, [sp, #4]
 808a69a:	bd08      	pop	{r3, pc}
 808a69c:	080401a4 	.word	0x080401a4

0808a6a0 <system_version_info>:
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
 808a6a0:	b508      	push	{r3, lr}
 808a6a2:	4b02      	ldr	r3, [pc, #8]	; (808a6ac <system_version_info+0xc>)
 808a6a4:	681b      	ldr	r3, [r3, #0]
 808a6a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808a6a8:	9301      	str	r3, [sp, #4]
 808a6aa:	bd08      	pop	{r3, pc}
 808a6ac:	080401a4 	.word	0x080401a4

0808a6b0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 808a6b0:	b508      	push	{r3, lr}
 808a6b2:	4b02      	ldr	r3, [pc, #8]	; (808a6bc <application_thread_current+0xc>)
 808a6b4:	681b      	ldr	r3, [r3, #0]
 808a6b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808a6b8:	9301      	str	r3, [sp, #4]
 808a6ba:	bd08      	pop	{r3, pc}
 808a6bc:	080401a4 	.word	0x080401a4

0808a6c0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 808a6c0:	b508      	push	{r3, lr}
 808a6c2:	4b02      	ldr	r3, [pc, #8]	; (808a6cc <application_thread_invoke+0xc>)
 808a6c4:	681b      	ldr	r3, [r3, #0]
 808a6c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808a6c8:	9301      	str	r3, [sp, #4]
 808a6ca:	bd08      	pop	{r3, pc}
 808a6cc:	080401a4 	.word	0x080401a4

0808a6d0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 808a6d0:	b508      	push	{r3, lr}
 808a6d2:	4b02      	ldr	r3, [pc, #8]	; (808a6dc <system_thread_get_state+0xc>)
 808a6d4:	681b      	ldr	r3, [r3, #0]
 808a6d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 808a6d8:	9301      	str	r3, [sp, #4]
 808a6da:	bd08      	pop	{r3, pc}
 808a6dc:	080401a4 	.word	0x080401a4

0808a6e0 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
 808a6e0:	b508      	push	{r3, lr}
 808a6e2:	4b02      	ldr	r3, [pc, #8]	; (808a6ec <system_notify_time_changed+0xc>)
 808a6e4:	681b      	ldr	r3, [r3, #0]
 808a6e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 808a6e8:	9301      	str	r3, [sp, #4]
 808a6ea:	bd08      	pop	{r3, pc}
 808a6ec:	080401a4 	.word	0x080401a4

0808a6f0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 808a6f0:	b508      	push	{r3, lr}
 808a6f2:	4b03      	ldr	r3, [pc, #12]	; (808a700 <system_ctrl_set_app_request_handler+0x10>)
 808a6f4:	681b      	ldr	r3, [r3, #0]
 808a6f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808a6fa:	9301      	str	r3, [sp, #4]
 808a6fc:	bd08      	pop	{r3, pc}
 808a6fe:	0000      	.short	0x0000
 808a700:	080401a4 	.word	0x080401a4

0808a704 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 808a704:	b508      	push	{r3, lr}
 808a706:	4b03      	ldr	r3, [pc, #12]	; (808a714 <system_ctrl_set_result+0x10>)
 808a708:	681b      	ldr	r3, [r3, #0]
 808a70a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 808a70e:	9301      	str	r3, [sp, #4]
 808a710:	bd08      	pop	{r3, pc}
 808a712:	0000      	.short	0x0000
 808a714:	080401a4 	.word	0x080401a4

0808a718 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 808a718:	b508      	push	{r3, lr}
 808a71a:	4b02      	ldr	r3, [pc, #8]	; (808a724 <network_connect+0xc>)
 808a71c:	681b      	ldr	r3, [r3, #0]
 808a71e:	685b      	ldr	r3, [r3, #4]
 808a720:	9301      	str	r3, [sp, #4]
 808a722:	bd08      	pop	{r3, pc}
 808a724:	080401c8 	.word	0x080401c8

0808a728 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 808a728:	b508      	push	{r3, lr}
 808a72a:	4b02      	ldr	r3, [pc, #8]	; (808a734 <network_connecting+0xc>)
 808a72c:	681b      	ldr	r3, [r3, #0]
 808a72e:	689b      	ldr	r3, [r3, #8]
 808a730:	9301      	str	r3, [sp, #4]
 808a732:	bd08      	pop	{r3, pc}
 808a734:	080401c8 	.word	0x080401c8

0808a738 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 808a738:	b508      	push	{r3, lr}
 808a73a:	4b02      	ldr	r3, [pc, #8]	; (808a744 <network_disconnect+0xc>)
 808a73c:	681b      	ldr	r3, [r3, #0]
 808a73e:	68db      	ldr	r3, [r3, #12]
 808a740:	9301      	str	r3, [sp, #4]
 808a742:	bd08      	pop	{r3, pc}
 808a744:	080401c8 	.word	0x080401c8

0808a748 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 808a748:	b508      	push	{r3, lr}
 808a74a:	4b02      	ldr	r3, [pc, #8]	; (808a754 <network_ready+0xc>)
 808a74c:	681b      	ldr	r3, [r3, #0]
 808a74e:	691b      	ldr	r3, [r3, #16]
 808a750:	9301      	str	r3, [sp, #4]
 808a752:	bd08      	pop	{r3, pc}
 808a754:	080401c8 	.word	0x080401c8

0808a758 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 808a758:	b508      	push	{r3, lr}
 808a75a:	4b02      	ldr	r3, [pc, #8]	; (808a764 <network_on+0xc>)
 808a75c:	681b      	ldr	r3, [r3, #0]
 808a75e:	695b      	ldr	r3, [r3, #20]
 808a760:	9301      	str	r3, [sp, #4]
 808a762:	bd08      	pop	{r3, pc}
 808a764:	080401c8 	.word	0x080401c8

0808a768 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 808a768:	b508      	push	{r3, lr}
 808a76a:	4b02      	ldr	r3, [pc, #8]	; (808a774 <network_off+0xc>)
 808a76c:	681b      	ldr	r3, [r3, #0]
 808a76e:	699b      	ldr	r3, [r3, #24]
 808a770:	9301      	str	r3, [sp, #4]
 808a772:	bd08      	pop	{r3, pc}
 808a774:	080401c8 	.word	0x080401c8

0808a778 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 808a778:	b508      	push	{r3, lr}
 808a77a:	4b02      	ldr	r3, [pc, #8]	; (808a784 <network_listen+0xc>)
 808a77c:	681b      	ldr	r3, [r3, #0]
 808a77e:	69db      	ldr	r3, [r3, #28]
 808a780:	9301      	str	r3, [sp, #4]
 808a782:	bd08      	pop	{r3, pc}
 808a784:	080401c8 	.word	0x080401c8

0808a788 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 808a788:	b508      	push	{r3, lr}
 808a78a:	4b02      	ldr	r3, [pc, #8]	; (808a794 <network_listening+0xc>)
 808a78c:	681b      	ldr	r3, [r3, #0]
 808a78e:	6a1b      	ldr	r3, [r3, #32]
 808a790:	9301      	str	r3, [sp, #4]
 808a792:	bd08      	pop	{r3, pc}
 808a794:	080401c8 	.word	0x080401c8

0808a798 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 808a798:	b508      	push	{r3, lr}
 808a79a:	4b02      	ldr	r3, [pc, #8]	; (808a7a4 <network_set_listen_timeout+0xc>)
 808a79c:	681b      	ldr	r3, [r3, #0]
 808a79e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808a7a0:	9301      	str	r3, [sp, #4]
 808a7a2:	bd08      	pop	{r3, pc}
 808a7a4:	080401c8 	.word	0x080401c8

0808a7a8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 808a7a8:	b508      	push	{r3, lr}
 808a7aa:	4b02      	ldr	r3, [pc, #8]	; (808a7b4 <network_get_listen_timeout+0xc>)
 808a7ac:	681b      	ldr	r3, [r3, #0]
 808a7ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808a7b0:	9301      	str	r3, [sp, #4]
 808a7b2:	bd08      	pop	{r3, pc}
 808a7b4:	080401c8 	.word	0x080401c8

0808a7b8 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 808a7b8:	b508      	push	{r3, lr}
 808a7ba:	4b02      	ldr	r3, [pc, #8]	; (808a7c4 <spark_function+0xc>)
 808a7bc:	681b      	ldr	r3, [r3, #0]
 808a7be:	685b      	ldr	r3, [r3, #4]
 808a7c0:	9301      	str	r3, [sp, #4]
 808a7c2:	bd08      	pop	{r3, pc}
 808a7c4:	080401cc 	.word	0x080401cc

0808a7c8 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 808a7c8:	b508      	push	{r3, lr}
 808a7ca:	4b02      	ldr	r3, [pc, #8]	; (808a7d4 <spark_process+0xc>)
 808a7cc:	681b      	ldr	r3, [r3, #0]
 808a7ce:	689b      	ldr	r3, [r3, #8]
 808a7d0:	9301      	str	r3, [sp, #4]
 808a7d2:	bd08      	pop	{r3, pc}
 808a7d4:	080401cc 	.word	0x080401cc

0808a7d8 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 808a7d8:	b508      	push	{r3, lr}
 808a7da:	4b02      	ldr	r3, [pc, #8]	; (808a7e4 <spark_cloud_flag_connect+0xc>)
 808a7dc:	681b      	ldr	r3, [r3, #0]
 808a7de:	68db      	ldr	r3, [r3, #12]
 808a7e0:	9301      	str	r3, [sp, #4]
 808a7e2:	bd08      	pop	{r3, pc}
 808a7e4:	080401cc 	.word	0x080401cc

0808a7e8 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 808a7e8:	b508      	push	{r3, lr}
 808a7ea:	4b02      	ldr	r3, [pc, #8]	; (808a7f4 <spark_cloud_flag_connected+0xc>)
 808a7ec:	681b      	ldr	r3, [r3, #0]
 808a7ee:	695b      	ldr	r3, [r3, #20]
 808a7f0:	9301      	str	r3, [sp, #4]
 808a7f2:	bd08      	pop	{r3, pc}
 808a7f4:	080401cc 	.word	0x080401cc

0808a7f8 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 808a7f8:	b508      	push	{r3, lr}
 808a7fa:	4b02      	ldr	r3, [pc, #8]	; (808a804 <spark_deviceID+0xc>)
 808a7fc:	681b      	ldr	r3, [r3, #0]
 808a7fe:	69db      	ldr	r3, [r3, #28]
 808a800:	9301      	str	r3, [sp, #4]
 808a802:	bd08      	pop	{r3, pc}
 808a804:	080401cc 	.word	0x080401cc

0808a808 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 808a808:	b508      	push	{r3, lr}
 808a80a:	4b02      	ldr	r3, [pc, #8]	; (808a814 <spark_send_event+0xc>)
 808a80c:	681b      	ldr	r3, [r3, #0]
 808a80e:	6a1b      	ldr	r3, [r3, #32]
 808a810:	9301      	str	r3, [sp, #4]
 808a812:	bd08      	pop	{r3, pc}
 808a814:	080401cc 	.word	0x080401cc

0808a818 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 808a818:	b508      	push	{r3, lr}
 808a81a:	4b02      	ldr	r3, [pc, #8]	; (808a824 <spark_subscribe+0xc>)
 808a81c:	681b      	ldr	r3, [r3, #0]
 808a81e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808a820:	9301      	str	r3, [sp, #4]
 808a822:	bd08      	pop	{r3, pc}
 808a824:	080401cc 	.word	0x080401cc

0808a828 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 808a828:	b508      	push	{r3, lr}
 808a82a:	4b02      	ldr	r3, [pc, #8]	; (808a834 <spark_sync_time_pending+0xc>)
 808a82c:	681b      	ldr	r3, [r3, #0]
 808a82e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808a830:	9301      	str	r3, [sp, #4]
 808a832:	bd08      	pop	{r3, pc}
 808a834:	080401cc 	.word	0x080401cc

0808a838 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 808a838:	b508      	push	{r3, lr}
 808a83a:	4b02      	ldr	r3, [pc, #8]	; (808a844 <spark_set_random_seed_from_cloud_handler+0xc>)
 808a83c:	681b      	ldr	r3, [r3, #0]
 808a83e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808a840:	9301      	str	r3, [sp, #4]
 808a842:	bd08      	pop	{r3, pc}
 808a844:	080401cc 	.word	0x080401cc

0808a848 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 808a848:	b508      	push	{r3, lr}
 808a84a:	4b02      	ldr	r3, [pc, #8]	; (808a854 <malloc+0xc>)
 808a84c:	681b      	ldr	r3, [r3, #0]
 808a84e:	681b      	ldr	r3, [r3, #0]
 808a850:	9301      	str	r3, [sp, #4]
 808a852:	bd08      	pop	{r3, pc}
 808a854:	080401a0 	.word	0x080401a0

0808a858 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 808a858:	b508      	push	{r3, lr}
 808a85a:	4b02      	ldr	r3, [pc, #8]	; (808a864 <free+0xc>)
 808a85c:	681b      	ldr	r3, [r3, #0]
 808a85e:	685b      	ldr	r3, [r3, #4]
 808a860:	9301      	str	r3, [sp, #4]
 808a862:	bd08      	pop	{r3, pc}
 808a864:	080401a0 	.word	0x080401a0

0808a868 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 808a868:	b508      	push	{r3, lr}
 808a86a:	4b02      	ldr	r3, [pc, #8]	; (808a874 <realloc+0xc>)
 808a86c:	681b      	ldr	r3, [r3, #0]
 808a86e:	689b      	ldr	r3, [r3, #8]
 808a870:	9301      	str	r3, [sp, #4]
 808a872:	bd08      	pop	{r3, pc}
 808a874:	080401a0 	.word	0x080401a0

0808a878 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 808a878:	b508      	push	{r3, lr}
 808a87a:	4b02      	ldr	r3, [pc, #8]	; (808a884 <sprintf+0xc>)
 808a87c:	681b      	ldr	r3, [r3, #0]
 808a87e:	68db      	ldr	r3, [r3, #12]
 808a880:	9301      	str	r3, [sp, #4]
 808a882:	bd08      	pop	{r3, pc}
 808a884:	080401a0 	.word	0x080401a0

0808a888 <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 808a888:	b508      	push	{r3, lr}
 808a88a:	4b02      	ldr	r3, [pc, #8]	; (808a894 <siprintf+0xc>)
 808a88c:	681b      	ldr	r3, [r3, #0]
 808a88e:	691b      	ldr	r3, [r3, #16]
 808a890:	9301      	str	r3, [sp, #4]
 808a892:	bd08      	pop	{r3, pc}
 808a894:	080401a0 	.word	0x080401a0

0808a898 <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
 808a898:	b508      	push	{r3, lr}
 808a89a:	4b02      	ldr	r3, [pc, #8]	; (808a8a4 <sscanf+0xc>)
 808a89c:	681b      	ldr	r3, [r3, #0]
 808a89e:	695b      	ldr	r3, [r3, #20]
 808a8a0:	9301      	str	r3, [sp, #4]
 808a8a2:	bd08      	pop	{r3, pc}
 808a8a4:	080401a0 	.word	0x080401a0

0808a8a8 <siscanf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 808a8a8:	b508      	push	{r3, lr}
 808a8aa:	4b02      	ldr	r3, [pc, #8]	; (808a8b4 <siscanf+0xc>)
 808a8ac:	681b      	ldr	r3, [r3, #0]
 808a8ae:	699b      	ldr	r3, [r3, #24]
 808a8b0:	9301      	str	r3, [sp, #4]
 808a8b2:	bd08      	pop	{r3, pc}
 808a8b4:	080401a0 	.word	0x080401a0

0808a8b8 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 808a8b8:	b508      	push	{r3, lr}
 808a8ba:	4b02      	ldr	r3, [pc, #8]	; (808a8c4 <snprintf+0xc>)
 808a8bc:	681b      	ldr	r3, [r3, #0]
 808a8be:	69db      	ldr	r3, [r3, #28]
 808a8c0:	9301      	str	r3, [sp, #4]
 808a8c2:	bd08      	pop	{r3, pc}
 808a8c4:	080401a0 	.word	0x080401a0

0808a8c8 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
 808a8c8:	b508      	push	{r3, lr}
 808a8ca:	4b02      	ldr	r3, [pc, #8]	; (808a8d4 <sniprintf+0xc>)
 808a8cc:	681b      	ldr	r3, [r3, #0]
 808a8ce:	6a1b      	ldr	r3, [r3, #32]
 808a8d0:	9301      	str	r3, [sp, #4]
 808a8d2:	bd08      	pop	{r3, pc}
 808a8d4:	080401a0 	.word	0x080401a0

0808a8d8 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 808a8d8:	b508      	push	{r3, lr}
 808a8da:	4b02      	ldr	r3, [pc, #8]	; (808a8e4 <vsnprintf+0xc>)
 808a8dc:	681b      	ldr	r3, [r3, #0]
 808a8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808a8e0:	9301      	str	r3, [sp, #4]
 808a8e2:	bd08      	pop	{r3, pc}
 808a8e4:	080401a0 	.word	0x080401a0

0808a8e8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 808a8e8:	b508      	push	{r3, lr}
 808a8ea:	4b02      	ldr	r3, [pc, #8]	; (808a8f4 <abort+0xc>)
 808a8ec:	681b      	ldr	r3, [r3, #0]
 808a8ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808a8f0:	9301      	str	r3, [sp, #4]
 808a8f2:	bd08      	pop	{r3, pc}
 808a8f4:	080401a0 	.word	0x080401a0

0808a8f8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 808a8f8:	b508      	push	{r3, lr}
 808a8fa:	4b02      	ldr	r3, [pc, #8]	; (808a904 <_malloc_r+0xc>)
 808a8fc:	681b      	ldr	r3, [r3, #0]
 808a8fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808a900:	9301      	str	r3, [sp, #4]
 808a902:	bd08      	pop	{r3, pc}
 808a904:	080401a0 	.word	0x080401a0

0808a908 <_ZN4PMIC5beginEv>:
 * Description    : Initializes the I2C for the PMIC module
 * Input          : NONE
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
 808a908:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808a90a:	f002 fa13 	bl	808cd34 <_Z20__fetch_global_Wire3v>
 * Input          : NONE
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
 808a90e:	f001 ffd1 	bl	808c8b4 <_ZN7TwoWire9isEnabledEv>
 808a912:	b918      	cbnz	r0, 808a91c <_ZN4PMIC5beginEv+0x14>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808a914:	f002 fa0e 	bl	808cd34 <_Z20__fetch_global_Wire3v>
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
 808a918:	f001 ffa2 	bl	808c860 <_ZN7TwoWire5beginEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808a91c:	f002 fa0a 	bl	808cd34 <_Z20__fetch_global_Wire3v>
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
    }
    return pmicWireInstance()->isEnabled();
}
 808a920:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
    }
    return pmicWireInstance()->isEnabled();
 808a924:	f001 bfc6 	b.w	808c8b4 <_ZN7TwoWire9isEnabledEv>

0808a928 <_ZN4PMIC4lockEv>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
 808a928:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808a92a:	f002 fa03 	bl	808cd34 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}
 808a92e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
 808a932:	f001 bfc3 	b.w	808c8bc <_ZN7TwoWire4lockEv>

0808a936 <_ZN4PMICC1Eb>:

} // anonymous

#include <mutex>

PMIC::PMIC(bool _lock) :
 808a936:	b510      	push	{r4, lr}
 808a938:	4604      	mov	r4, r0
    lock_(_lock)
 808a93a:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
 808a93c:	b109      	cbz	r1, 808a942 <_ZN4PMICC1Eb+0xc>
        lock();
 808a93e:	f7ff fff3 	bl	808a928 <_ZN4PMIC4lockEv>
    }
}
 808a942:	4620      	mov	r0, r4
 808a944:	bd10      	pop	{r4, pc}

0808a946 <_ZN4PMIC6unlockEv>:

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
 808a946:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808a948:	f002 f9f4 	bl	808cd34 <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
}
 808a94c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
 808a950:	f001 bfbd 	b.w	808c8ce <_ZN7TwoWire6unlockEv>

0808a954 <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 808a954:	b510      	push	{r4, lr}
{
    if (lock_) {
 808a956:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 808a958:	4604      	mov	r4, r0
{
    if (lock_) {
 808a95a:	b10b      	cbz	r3, 808a960 <_ZN4PMICD1Ev+0xc>
        unlock();
 808a95c:	f7ff fff3 	bl	808a946 <_ZN4PMIC6unlockEv>
    }
}
 808a960:	4620      	mov	r0, r4
 808a962:	bd10      	pop	{r4, pc}

0808a964 <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 808a964:	b510      	push	{r4, lr}
 808a966:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 808a968:	6800      	ldr	r0, [r0, #0]
 808a96a:	f7ff ffec 	bl	808a946 <_ZN4PMIC6unlockEv>
 808a96e:	4620      	mov	r0, r4
 808a970:	bd10      	pop	{r4, pc}

0808a972 <_ZN4PMIC12readRegisterEh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
 808a972:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808a974:	ac02      	add	r4, sp, #8
 808a976:	460d      	mov	r5, r1
 808a978:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 808a97c:	f7ff ffd4 	bl	808a928 <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808a980:	f002 f9d8 	bl	808cd34 <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 808a984:	216b      	movs	r1, #107	; 0x6b
 808a986:	f001 ff8b 	bl	808c8a0 <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808a98a:	f002 f9d3 	bl	808cd34 <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
 808a98e:	6803      	ldr	r3, [r0, #0]
 808a990:	4629      	mov	r1, r5
 808a992:	689b      	ldr	r3, [r3, #8]
 808a994:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808a996:	f002 f9cd 	bl	808cd34 <_Z20__fetch_global_Wire3v>
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);
 808a99a:	2101      	movs	r1, #1
 808a99c:	f001 ff83 	bl	808c8a6 <_ZN7TwoWire15endTransmissionEh>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808a9a0:	f002 f9c8 	bl	808cd34 <_Z20__fetch_global_Wire3v>
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
 808a9a4:	2301      	movs	r3, #1
 808a9a6:	461a      	mov	r2, r3
 808a9a8:	216b      	movs	r1, #107	; 0x6b
 808a9aa:	f001 ff70 	bl	808c88e <_ZN7TwoWire11requestFromEiii>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808a9ae:	f002 f9c1 	bl	808cd34 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
 808a9b2:	6803      	ldr	r3, [r0, #0]
 808a9b4:	695b      	ldr	r3, [r3, #20]
 808a9b6:	4798      	blx	r3
 808a9b8:	4605      	mov	r5, r0
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
 808a9ba:	4620      	mov	r0, r4
 808a9bc:	f7ff ffd2 	bl	808a964 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
    return DATA;
}
 808a9c0:	b2e8      	uxtb	r0, r5
 808a9c2:	b003      	add	sp, #12
 808a9c4:	bd30      	pop	{r4, r5, pc}

0808a9c6 <_ZN4PMIC23readInputSourceRegisterEv>:
 * Input          : NONE
 * Return         :
 *******************************************************************************/
byte PMIC::readInputSourceRegister(void) {

    return readRegister(INPUT_SOURCE_REGISTER);
 808a9c6:	2100      	movs	r1, #0
 808a9c8:	f7ff bfd3 	b.w	808a972 <_ZN4PMIC12readRegisterEh>

0808a9cc <_ZN4PMIC20getInputCurrentLimitEv>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
uint16_t PMIC::getInputCurrentLimit(void) {
 808a9cc:	b508      	push	{r3, lr}
        1200,
        1500,
        2000,
        3000
    };
    byte raw = readInputSourceRegister();
 808a9ce:	f7ff fffa 	bl	808a9c6 <_ZN4PMIC23readInputSourceRegisterEv>
    raw &= 0x07;
    return mapping[raw];
}
 808a9d2:	4b03      	ldr	r3, [pc, #12]	; (808a9e0 <_ZN4PMIC20getInputCurrentLimitEv+0x14>)
        2000,
        3000
    };
    byte raw = readInputSourceRegister();
    raw &= 0x07;
    return mapping[raw];
 808a9d4:	f000 0007 	and.w	r0, r0, #7
}
 808a9d8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 808a9dc:	bd08      	pop	{r3, pc}
 808a9de:	bf00      	nop
 808a9e0:	0809412c 	.word	0x0809412c

0808a9e4 <_ZN4PMIC16getChargeCurrentEv>:
 * Return         :
 *******************************************************************************/
//TO DO: Return more meaningful value
byte PMIC::getChargeCurrent(void) {

    return readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 808a9e4:	2102      	movs	r1, #2
 808a9e6:	f7ff bfc4 	b.w	808a972 <_ZN4PMIC12readRegisterEh>

0808a9ea <_ZN4PMIC15getSystemStatusEv>:
 * Return         :
 *******************************************************************************/
byte PMIC::getSystemStatus() {

    byte DATA = 0;
    DATA = readRegister(SYSTEM_STATUS_REGISTER);
 808a9ea:	2108      	movs	r1, #8
 808a9ec:	f7ff bfc1 	b.w	808a972 <_ZN4PMIC12readRegisterEh>

0808a9f0 <_ZN4PMIC8getFaultEv>:
 * Return         :
 *******************************************************************************/
byte PMIC::getFault() {

    byte DATA = 0;
    DATA = readRegister(FAULT_REGISTER);
 808a9f0:	2109      	movs	r1, #9
 808a9f2:	f7ff bfbe 	b.w	808a972 <_ZN4PMIC12readRegisterEh>

0808a9f6 <_ZN4PMIC13writeRegisterEhh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
 808a9f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808a9f8:	ac02      	add	r4, sp, #8
 808a9fa:	4615      	mov	r5, r2
 808a9fc:	460e      	mov	r6, r1
 808a9fe:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 808aa02:	f7ff ff91 	bl	808a928 <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808aa06:	f002 f995 	bl	808cd34 <_Z20__fetch_global_Wire3v>
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 808aa0a:	216b      	movs	r1, #107	; 0x6b
 808aa0c:	f001 ff48 	bl	808c8a0 <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808aa10:	f002 f990 	bl	808cd34 <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
 808aa14:	6803      	ldr	r3, [r0, #0]
 808aa16:	4631      	mov	r1, r6
 808aa18:	689b      	ldr	r3, [r3, #8]
 808aa1a:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808aa1c:	f002 f98a 	bl	808cd34 <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
 808aa20:	6803      	ldr	r3, [r0, #0]
 808aa22:	4629      	mov	r1, r5
 808aa24:	689b      	ldr	r3, [r3, #8]
 808aa26:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808aa28:	f002 f984 	bl	808cd34 <_Z20__fetch_global_Wire3v>
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
 808aa2c:	2101      	movs	r1, #1
 808aa2e:	f001 ff3a 	bl	808c8a6 <_ZN7TwoWire15endTransmissionEh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
 808aa32:	4620      	mov	r0, r4
 808aa34:	f7ff ff96 	bl	808a964 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}
 808aa38:	b002      	add	sp, #8
 808aa3a:	bd70      	pop	{r4, r5, r6, pc}

0808aa3c <_ZN4PMIC20setInputCurrentLimitEt>:
 * Function Name  : setInputCurrentLimit
 * Description    : Sets the input current limit for the PMIC
 * Input          : 100,150,500,900,1200,1500,2000,3000 (mAmp)
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
 808aa3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808aa3e:	4604      	mov	r4, r0
 808aa40:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808aa42:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808aa44:	f7ff ff70 	bl	808a928 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
 808aa48:	2100      	movs	r1, #0
 808aa4a:	4620      	mov	r0, r4
 808aa4c:	f7ff ff91 	bl	808a972 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b11111000;

    switch (current) {
 808aa50:	f5b5 7f61 	cmp.w	r5, #900	; 0x384
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b11111000;
 808aa54:	f000 02f8 	and.w	r2, r0, #248	; 0xf8

    switch (current) {
 808aa58:	d023      	beq.n	808aaa2 <_ZN4PMIC20setInputCurrentLimitEt+0x66>
 808aa5a:	d807      	bhi.n	808aa6c <_ZN4PMIC20setInputCurrentLimitEt+0x30>
 808aa5c:	2d96      	cmp	r5, #150	; 0x96
 808aa5e:	d01a      	beq.n	808aa96 <_ZN4PMIC20setInputCurrentLimitEt+0x5a>
 808aa60:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 808aa64:	d01a      	beq.n	808aa9c <_ZN4PMIC20setInputCurrentLimitEt+0x60>
 808aa66:	2d64      	cmp	r5, #100	; 0x64
 808aa68:	d129      	bne.n	808aabe <_ZN4PMIC20setInputCurrentLimitEt+0x82>
 808aa6a:	e022      	b.n	808aab2 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
 808aa6c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 808aa70:	429d      	cmp	r5, r3
 808aa72:	d019      	beq.n	808aaa8 <_ZN4PMIC20setInputCurrentLimitEt+0x6c>
 808aa74:	d805      	bhi.n	808aa82 <_ZN4PMIC20setInputCurrentLimitEt+0x46>
 808aa76:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 808aa7a:	d120      	bne.n	808aabe <_ZN4PMIC20setInputCurrentLimitEt+0x82>
        case 900:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
        break;

        case 1200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
 808aa7c:	f042 0204 	orr.w	r2, r2, #4
 808aa80:	e017      	b.n	808aab2 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b11111000;

    switch (current) {
 808aa82:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 808aa86:	d012      	beq.n	808aaae <_ZN4PMIC20setInputCurrentLimitEt+0x72>
 808aa88:	f640 33b8 	movw	r3, #3000	; 0xbb8
 808aa8c:	429d      	cmp	r5, r3
 808aa8e:	d116      	bne.n	808aabe <_ZN4PMIC20setInputCurrentLimitEt+0x82>
        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
        break;

        case 3000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
 808aa90:	f042 0207 	orr.w	r2, r2, #7
 808aa94:	e00d      	b.n	808aab2 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        case 100:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000000));
        break;

        case 150:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000001));
 808aa96:	f042 0201 	orr.w	r2, r2, #1
 808aa9a:	e00a      	b.n	808aab2 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 500:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000010));
 808aa9c:	f042 0202 	orr.w	r2, r2, #2
 808aaa0:	e007      	b.n	808aab2 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 900:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
 808aaa2:	f042 0203 	orr.w	r2, r2, #3
 808aaa6:	e004      	b.n	808aab2 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        case 1200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
        break;

        case 1500:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
 808aaa8:	f042 0205 	orr.w	r2, r2, #5
 808aaac:	e001      	b.n	808aab2 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
 808aaae:	f042 0206 	orr.w	r2, r2, #6
 808aab2:	4620      	mov	r0, r4
 808aab4:	2100      	movs	r1, #0
 808aab6:	f7ff ff9e 	bl	808a9f6 <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 808aaba:	2401      	movs	r4, #1
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
        break;

        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
        break;
 808aabc:	e000      	b.n	808aac0 <_ZN4PMIC20setInputCurrentLimitEt+0x84>
        case 3000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
        break;

        default:
        return 0; // return error since the value passed didn't match
 808aabe:	2400      	movs	r4, #0
 * Description    : Sets the input current limit for the PMIC
 * Input          : 100,150,500,900,1200,1500,2000,3000 (mAmp)
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
    std::lock_guard<PMIC> l(*this);
 808aac0:	a801      	add	r0, sp, #4
 808aac2:	f7ff ff4f 	bl	808a964 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 808aac6:	4620      	mov	r0, r4
 808aac8:	b003      	add	sp, #12
 808aaca:	bd30      	pop	{r4, r5, pc}

0808aacc <_ZN4PMIC10disableOTGEv>:
 * Function Name  : disableOTG
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableOTG(void) {
 808aacc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808aace:	4605      	mov	r5, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808aad0:	ac02      	add	r4, sp, #8
 808aad2:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 808aad6:	f7ff ff27 	bl	808a928 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
 808aada:	2101      	movs	r1, #1
 808aadc:	4628      	mov	r0, r5
 808aade:	f7ff ff48 	bl	808a972 <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
 808aae2:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
    DATA = DATA | 0b00010000;
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
 808aae6:	f042 0210 	orr.w	r2, r2, #16
 808aaea:	2101      	movs	r1, #1
 808aaec:	4628      	mov	r0, r5
 808aaee:	f7ff ff82 	bl	808a9f6 <_ZN4PMIC13writeRegisterEhh>
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableOTG(void) {
    std::lock_guard<PMIC> l(*this);
 808aaf2:	4620      	mov	r0, r4
 808aaf4:	f7ff ff36 	bl	808a964 <_ZNSt10lock_guardI4PMICED1Ev>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
    DATA = DATA & 0b11001111;
    DATA = DATA | 0b00010000;
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
    return 1;
}
 808aaf8:	2001      	movs	r0, #1
 808aafa:	b003      	add	sp, #12
 808aafc:	bd30      	pop	{r4, r5, pc}

0808aafe <_ZN4PMIC14enableChargingEv>:
 808aafe:	f7ff bfe5 	b.w	808aacc <_ZN4PMIC10disableOTGEv>

0808ab02 <_ZN4PMIC16setChargeCurrentEbbbbbb>:
                    For example,
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
 808ab02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 808ab04:	460c      	mov	r4, r1
 808ab06:	4617      	mov	r7, r2
 808ab08:	4605      	mov	r5, r0
 808ab0a:	461e      	mov	r6, r3
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808ab0c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808ab0e:	f7ff ff0b 	bl	808a928 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte current = 0;
    if (bit7) current = current | 0b10000000;
 808ab12:	2c00      	cmp	r4, #0
 808ab14:	bf0c      	ite	eq
 808ab16:	2400      	moveq	r4, #0
 808ab18:	2480      	movne	r4, #128	; 0x80
    if (bit6) current = current | 0b01000000;
 808ab1a:	b117      	cbz	r7, 808ab22 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x20>
 808ab1c:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 808ab20:	b2e4      	uxtb	r4, r4
    if (bit5) current = current | 0b00100000;
 808ab22:	b10e      	cbz	r6, 808ab28 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x26>
 808ab24:	f044 0420 	orr.w	r4, r4, #32
    if (bit4) current = current | 0b00010000;
 808ab28:	f89d 3020 	ldrb.w	r3, [sp, #32]
 808ab2c:	b10b      	cbz	r3, 808ab32 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x30>
 808ab2e:	f044 0410 	orr.w	r4, r4, #16
    if (bit3) current = current | 0b00001000;
 808ab32:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 808ab36:	b10b      	cbz	r3, 808ab3c <_ZN4PMIC16setChargeCurrentEbbbbbb+0x3a>
 808ab38:	f044 0408 	orr.w	r4, r4, #8
    if (bit2) current = current | 0b00000100;
 808ab3c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 808ab40:	b10b      	cbz	r3, 808ab46 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x44>
 808ab42:	f044 0404 	orr.w	r4, r4, #4

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 808ab46:	2102      	movs	r1, #2
 808ab48:	4628      	mov	r0, r5
 808ab4a:	f7ff ff12 	bl	808a972 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
 808ab4e:	f000 0201 	and.w	r2, r0, #1
 808ab52:	4322      	orrs	r2, r4
 808ab54:	2102      	movs	r1, #2
 808ab56:	4628      	mov	r0, r5
 808ab58:	f7ff ff4d 	bl	808a9f6 <_ZN4PMIC13writeRegisterEhh>
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
    std::lock_guard<PMIC> l(*this);
 808ab5c:	a801      	add	r0, sp, #4
 808ab5e:	f7ff ff01 	bl	808a964 <_ZNSt10lock_guardI4PMICED1Ev>

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
    return 1;
}
 808ab62:	2001      	movs	r0, #1
 808ab64:	b003      	add	sp, #12
 808ab66:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808ab68 <_ZN4PMIC16setChargeVoltageEt>:
                    4208 is the default
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
 808ab68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808ab6a:	4604      	mov	r4, r0
 808ab6c:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808ab6e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808ab70:	f7ff feda 	bl	808a928 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
 808ab74:	2104      	movs	r1, #4
 808ab76:	4620      	mov	r0, r4
 808ab78:	f7ff fefb 	bl	808a972 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b000000011;

    switch (voltage) {
 808ab7c:	f241 0310 	movw	r3, #4112	; 0x1010
 808ab80:	429d      	cmp	r5, r3
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
    byte mask = DATA & 0b000000011;
 808ab82:	f000 0203 	and.w	r2, r0, #3

    switch (voltage) {
 808ab86:	d006      	beq.n	808ab96 <_ZN4PMIC16setChargeVoltageEt+0x2e>
 808ab88:	f241 0370 	movw	r3, #4208	; 0x1070
 808ab8c:	429d      	cmp	r5, r3
 808ab8e:	d10a      	bne.n	808aba6 <_ZN4PMIC16setChargeVoltageEt+0x3e>
        case 4112:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
 808ab90:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
 808ab94:	e001      	b.n	808ab9a <_ZN4PMIC16setChargeVoltageEt+0x32>
    byte mask = DATA & 0b000000011;

    switch (voltage) {

        case 4112:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
 808ab96:	f042 0298 	orr.w	r2, r2, #152	; 0x98
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
 808ab9a:	4620      	mov	r0, r4
 808ab9c:	2104      	movs	r1, #4
 808ab9e:	f7ff ff2a 	bl	808a9f6 <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 808aba2:	2401      	movs	r4, #1
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
        break;
 808aba4:	e000      	b.n	808aba8 <_ZN4PMIC16setChargeVoltageEt+0x40>

        default:
        return 0; // return error since the value passed didn't match
 808aba6:	2400      	movs	r4, #0
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
 808aba8:	a801      	add	r0, sp, #4
 808abaa:	f7ff fedb 	bl	808a964 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 808abae:	4620      	mov	r0, r4
 808abb0:	b003      	add	sp, #12
 808abb2:	bd30      	pop	{r4, r5, pc}

0808abb4 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 808abb4:	4770      	bx	lr

0808abb6 <_ZN8SPIClassD0Ev>:
 808abb6:	b510      	push	{r4, lr}
 808abb8:	4604      	mov	r4, r0
 808abba:	2110      	movs	r1, #16
 808abbc:	f002 f8df 	bl	808cd7e <_ZdlPvj>
 808abc0:	4620      	mov	r0, r4
 808abc2:	bd10      	pop	{r4, pc}

0808abc4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 808abc4:	b570      	push	{r4, r5, r6, lr}
 808abc6:	4604      	mov	r4, r0
 808abc8:	460e      	mov	r6, r1
 808abca:	4b07      	ldr	r3, [pc, #28]	; (808abe8 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 808abcc:	2500      	movs	r5, #0
 808abce:	6003      	str	r3, [r0, #0]
 808abd0:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 808abd4:	f7ff fc3c 	bl	808a450 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 808abd8:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 808abda:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 808abdc:	f7ff fbc8 	bl	808a370 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 808abe0:	60a5      	str	r5, [r4, #8]
}
 808abe2:	4620      	mov	r0, r4
 808abe4:	bd70      	pop	{r4, r5, r6, pc}
 808abe6:	bf00      	nop
 808abe8:	08094144 	.word	0x08094144

0808abec <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 808abec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 808abf0:	7900      	ldrb	r0, [r0, #4]
 808abf2:	f7ff bb95 	b.w	808a320 <HAL_SPI_Begin>

0808abf6 <_ZN8SPIClass5beginEt>:
}

void SPIClass::begin(uint16_t ss_pin)
{
  if (ss_pin >= TOTAL_PINS)
 808abf6:	292e      	cmp	r1, #46	; 0x2e
 808abf8:	d802      	bhi.n	808ac00 <_ZN8SPIClass5beginEt+0xa>
  {
    return;
  }

  HAL_SPI_Begin(_spi, ss_pin);
 808abfa:	7900      	ldrb	r0, [r0, #4]
 808abfc:	f7ff bb90 	b.w	808a320 <HAL_SPI_Begin>
 808ac00:	4770      	bx	lr

0808ac02 <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 808ac02:	7900      	ldrb	r0, [r0, #4]
 808ac04:	f7ff bb94 	b.w	808a330 <HAL_SPI_Set_Bit_Order>

0808ac08 <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
 808ac08:	7900      	ldrb	r0, [r0, #4]
 808ac0a:	f7ff bb99 	b.w	808a340 <HAL_SPI_Set_Data_Mode>
	...

0808ac10 <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 808ac10:	4a05      	ldr	r2, [pc, #20]	; (808ac28 <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
 808ac12:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 808ac14:	5c99      	ldrb	r1, [r3, r2]
 808ac16:	4281      	cmp	r1, r0
 808ac18:	d002      	beq.n	808ac20 <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
 808ac1a:	3301      	adds	r3, #1
 808ac1c:	2b08      	cmp	r3, #8
 808ac1e:	d1f9      	bne.n	808ac14 <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
 808ac20:	1c58      	adds	r0, r3, #1
}
 808ac22:	b2c0      	uxtb	r0, r0
 808ac24:	4770      	bx	lr
 808ac26:	bf00      	nop
 808ac28:	0809414c 	.word	0x0809414c

0808ac2c <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 808ac2c:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 808ac2e:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 808ac30:	6018      	str	r0, [r3, #0]
 808ac32:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 808ac34:	6818      	ldr	r0, [r3, #0]
 808ac36:	b2e5      	uxtb	r5, r4
 808ac38:	4288      	cmp	r0, r1
 808ac3a:	d906      	bls.n	808ac4a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 808ac3c:	3401      	adds	r4, #1
 808ac3e:	2c08      	cmp	r4, #8
 808ac40:	d002      	beq.n	808ac48 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 808ac42:	0840      	lsrs	r0, r0, #1
 808ac44:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 808ac46:	e7f5      	b.n	808ac34 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 808ac48:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 808ac4a:	4b02      	ldr	r3, [pc, #8]	; (808ac54 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 808ac4c:	5d5b      	ldrb	r3, [r3, r5]
 808ac4e:	7013      	strb	r3, [r2, #0]
 808ac50:	bd30      	pop	{r4, r5, pc}
 808ac52:	bf00      	nop
 808ac54:	0809414c 	.word	0x0809414c

0808ac58 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 808ac58:	b570      	push	{r4, r5, r6, lr}
 808ac5a:	4604      	mov	r4, r0
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
 808ac5c:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 808ac60:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
 808ac62:	7906      	ldrb	r6, [r0, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 808ac64:	2214      	movs	r2, #20
 808ac66:	2100      	movs	r1, #0
 808ac68:	a803      	add	r0, sp, #12
 808ac6a:	f003 fd53 	bl	808e714 <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 808ac6e:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 808ac70:	a903      	add	r1, sp, #12
 808ac72:	4630      	mov	r0, r6
 808ac74:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 808ac76:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
 808ac7a:	f7ff fb89 	bl	808a390 <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
 808ac7e:	ab02      	add	r3, sp, #8
 808ac80:	f10d 0207 	add.w	r2, sp, #7
 808ac84:	4629      	mov	r1, r5
 808ac86:	9804      	ldr	r0, [sp, #16]
 808ac88:	f7ff ffd0 	bl	808ac2c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
 808ac8c:	7920      	ldrb	r0, [r4, #4]
 808ac8e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 808ac92:	f7ff fb5d 	bl	808a350 <HAL_SPI_Set_Clock_Divider>
    return clock;
}
 808ac96:	9802      	ldr	r0, [sp, #8]
 808ac98:	b008      	add	sp, #32
 808ac9a:	bd70      	pop	{r4, r5, r6, pc}

0808ac9c <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 808ac9c:	b538      	push	{r3, r4, r5, lr}
 808ac9e:	4604      	mov	r4, r0
    if (dividerReference)
 808aca0:	68a5      	ldr	r5, [r4, #8]
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 808aca2:	4608      	mov	r0, r1
    if (dividerReference)
 808aca4:	b14d      	cbz	r5, 808acba <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
 808aca6:	f7ff ffb3 	bl	808ac10 <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 808acaa:	2201      	movs	r2, #1
 808acac:	fa25 f100 	lsr.w	r1, r5, r0
 808acb0:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
 808acb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 808acb6:	f7ff bfcf 	b.w	808ac58 <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 808acba:	7920      	ldrb	r0, [r4, #4]
    }
}
 808acbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 808acc0:	f7ff bb46 	b.w	808a350 <HAL_SPI_Set_Clock_Divider>

0808acc4 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 808acc4:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 808acc6:	7900      	ldrb	r0, [r0, #4]
 808acc8:	f7ff fb4a 	bl	808a360 <HAL_SPI_Send_Receive_Data>
}
 808accc:	b2c0      	uxtb	r0, r0
 808acce:	bd08      	pop	{r3, pc}

0808acd0 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 808acd0:	b530      	push	{r4, r5, lr}
 808acd2:	b087      	sub	sp, #28
 808acd4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808acd6:	4604      	mov	r4, r0
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
 808acd8:	7900      	ldrb	r0, [r0, #4]
 808acda:	9500      	str	r5, [sp, #0]
 808acdc:	f7ff fb60 	bl	808a3a0 <HAL_SPI_DMA_Transfer>
  if (user_callback == NULL) {
 808ace0:	b93d      	cbnz	r5, 808acf2 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    HAL_SPI_TransferStatus st;
    do {
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
 808ace2:	a902      	add	r1, sp, #8
 808ace4:	7920      	ldrb	r0, [r4, #4]
 808ace6:	f7ff fb63 	bl	808a3b0 <HAL_SPI_DMA_Transfer_Status>
void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
  if (user_callback == NULL) {
    HAL_SPI_TransferStatus st;
    do {
 808acea:	f89d 3014 	ldrb.w	r3, [sp, #20]
 808acee:	07db      	lsls	r3, r3, #31
 808acf0:	d4f7      	bmi.n	808ace2 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
    } while(st.transfer_ongoing);
  }
}
 808acf2:	b007      	add	sp, #28
 808acf4:	bd30      	pop	{r4, r5, pc}

0808acf6 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 808acf6:	7900      	ldrb	r0, [r0, #4]
 808acf8:	f7ff bb42 	b.w	808a380 <HAL_SPI_Is_Enabled>

0808acfc <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 808acfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 808ad00:	4b03      	ldr	r3, [pc, #12]	; (808ad10 <_GLOBAL__sub_I_System+0x14>)
 808ad02:	2000      	movs	r0, #0
 808ad04:	7018      	strb	r0, [r3, #0]
 808ad06:	8058      	strh	r0, [r3, #2]
 808ad08:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 808ad0a:	f7ff bcb1 	b.w	808a670 <set_system_mode>
 808ad0e:	bf00      	nop
 808ad10:	20000cf2 	.word	0x20000cf2

0808ad14 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 808ad14:	b510      	push	{r4, lr}
 808ad16:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 808ad18:	f004 fa7c 	bl	808f214 <strlen>
 808ad1c:	3801      	subs	r0, #1
 808ad1e:	1823      	adds	r3, r4, r0
 808ad20:	4620      	mov	r0, r4
	while(i<j){
 808ad22:	4298      	cmp	r0, r3
 808ad24:	d206      	bcs.n	808ad34 <_Z11str_reversePc+0x20>
		c = *i;
 808ad26:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 808ad28:	7819      	ldrb	r1, [r3, #0]
 808ad2a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 808ad2e:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 808ad32:	e7f6      	b.n	808ad22 <_Z11str_reversePc+0xe>
 808ad34:	bd10      	pop	{r4, pc}

0808ad36 <ltoa>:
{
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
 808ad36:	1e93      	subs	r3, r2, #2
            base = 10;                    /* can only use 0-9, A-Z        */
 808ad38:	2b23      	cmp	r3, #35	; 0x23



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
 808ad3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808ad3e:	4615      	mov	r5, r2
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
 808ad40:	bf34      	ite	cc
 808ad42:	4615      	movcc	r5, r2
 808ad44:	250a      	movcs	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
 808ad46:	b08c      	sub	sp, #48	; 0x30
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
 808ad48:	2300      	movs	r3, #0

      if (10 == base && N < 0L)
 808ad4a:	2d0a      	cmp	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
 808ad4c:	460c      	mov	r4, r1
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
 808ad4e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c

      if (10 == base && N < 0L)
 808ad52:	d107      	bne.n	808ad64 <ltoa+0x2e>
 808ad54:	4298      	cmp	r0, r3
 808ad56:	da05      	bge.n	808ad64 <ltoa+0x2e>
      {
            *head++ = '-';
 808ad58:	232d      	movs	r3, #45	; 0x2d
 808ad5a:	f101 0801 	add.w	r8, r1, #1
 808ad5e:	700b      	strb	r3, [r1, #0]
            uarg    = -N;
 808ad60:	4240      	negs	r0, r0
 808ad62:	e001      	b.n	808ad68 <ltoa+0x32>
      }
      else  uarg = N;

      if (uarg)
 808ad64:	b1a8      	cbz	r0, 808ad92 <ltoa+0x5c>
 808ad66:	46a0      	mov	r8, r4
 808ad68:	f10d 062b 	add.w	r6, sp, #43	; 0x2b
 808ad6c:	2701      	movs	r7, #1
      {
            for (i = 1; uarg; ++i)
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
 808ad6e:	462a      	mov	r2, r5
 808ad70:	4601      	mov	r1, r0
 808ad72:	a801      	add	r0, sp, #4
 808ad74:	f003 fc9c 	bl	808e6b0 <ldiv>
 808ad78:	9a02      	ldr	r2, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
 808ad7a:	9801      	ldr	r0, [sp, #4]
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
 808ad7c:	2a09      	cmp	r2, #9
 808ad7e:	bfcc      	ite	gt
 808ad80:	2337      	movgt	r3, #55	; 0x37
 808ad82:	2330      	movle	r3, #48	; 0x30
 808ad84:	4413      	add	r3, r2
 808ad86:	f806 3901 	strb.w	r3, [r6], #-1
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
 808ad8a:	3701      	adds	r7, #1
 808ad8c:	2800      	cmp	r0, #0
 808ad8e:	d1ee      	bne.n	808ad6e <ltoa+0x38>
 808ad90:	e006      	b.n	808ada0 <ltoa+0x6a>
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';
 808ad92:	46a0      	mov	r8, r4
 808ad94:	2330      	movs	r3, #48	; 0x30
 808ad96:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 808ad9a:	f10d 062a 	add.w	r6, sp, #42	; 0x2a


//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
      int i = 2;
 808ad9e:	2702      	movs	r7, #2
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
 808ada0:	463a      	mov	r2, r7
 808ada2:	1c71      	adds	r1, r6, #1
 808ada4:	4640      	mov	r0, r8
 808ada6:	f003 fcaa 	bl	808e6fe <memcpy>
      return str;
}
 808adaa:	4620      	mov	r0, r4
 808adac:	b00c      	add	sp, #48	; 0x30
 808adae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808adb2 <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 808adb2:	b570      	push	{r4, r5, r6, lr}
 808adb4:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 808adb6:	1e91      	subs	r1, r2, #2
 808adb8:	2922      	cmp	r1, #34	; 0x22
 808adba:	d820      	bhi.n	808adfe <ultoa+0x4c>
 808adbc:	4625      	mov	r5, r4
 808adbe:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 808adc0:	b910      	cbnz	r0, 808adc8 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 808adc2:	4423      	add	r3, r4
            *ptr++ = '0';
 808adc4:	2230      	movs	r2, #48	; 0x30
 808adc6:	e00e      	b.n	808ade6 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 808adc8:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 808adcc:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 808add0:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 808add2:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 808add4:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 808add8:	bf94      	ite	ls
 808adda:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 808addc:	3157      	addhi	r1, #87	; 0x57
 808adde:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 808ade2:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 808ade4:	e7eb      	b.n	808adbe <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 808ade6:	4299      	cmp	r1, r3
 808ade8:	d202      	bcs.n	808adf0 <ultoa+0x3e>
            *ptr++ = '0';
 808adea:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 808adee:	e7fa      	b.n	808ade6 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 808adf0:	2300      	movs	r3, #0
	str_reverse(buffer);
 808adf2:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 808adf4:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 808adf6:	f7ff ff8d 	bl	808ad14 <_Z11str_reversePc>
	return buffer;
 808adfa:	4620      	mov	r0, r4
 808adfc:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 808adfe:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 808ae00:	bd70      	pop	{r4, r5, r6, pc}

0808ae02 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 808ae02:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 808ae04:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 808ae06:	460c      	mov	r4, r1
 808ae08:	4615      	mov	r5, r2
	if(a<0){
 808ae0a:	da0b      	bge.n	808ae24 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 808ae0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 808ae10:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 808ae14:	bf14      	ite	ne
 808ae16:	4258      	negne	r0, r3
 808ae18:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 808ae1a:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 808ae1c:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
 808ae1e:	462a      	mov	r2, r5
 808ae20:	4419      	add	r1, r3
 808ae22:	e000      	b.n	808ae26 <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
 808ae24:	2301      	movs	r3, #1
 808ae26:	f7ff ffc4 	bl	808adb2 <ultoa>
	}
	return buffer;
}
 808ae2a:	4620      	mov	r0, r4
 808ae2c:	bd38      	pop	{r3, r4, r5, pc}
	...

0808ae30 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 808ae30:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808ae34:	4680      	mov	r8, r0
 808ae36:	460d      	mov	r5, r1
 808ae38:	4617      	mov	r7, r2
 808ae3a:	461e      	mov	r6, r3
    bool negative = val<0;
    if (negative) {
 808ae3c:	2200      	movs	r2, #0
 808ae3e:	2300      	movs	r3, #0
 808ae40:	4640      	mov	r0, r8
 808ae42:	4629      	mov	r1, r5
 808ae44:	f002 fd12 	bl	808d86c <__aeabi_dcmplt>
 808ae48:	b120      	cbz	r0, 808ae54 <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 808ae4a:	232d      	movs	r3, #45	; 0x2d
 808ae4c:	7033      	strb	r3, [r6, #0]
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
    bool negative = val<0;
    if (negative) {
        val = -val;
 808ae4e:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 808ae52:	3601      	adds	r6, #1
 808ae54:	2300      	movs	r3, #0
    }
    long scale = 1;
 808ae56:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 808ae58:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 808ae5a:	b2d9      	uxtb	r1, r3
 808ae5c:	428f      	cmp	r7, r1
 808ae5e:	d902      	bls.n	808ae66 <_Z4dtoadhPc+0x36>
        scale *= 10;
 808ae60:	4354      	muls	r4, r2
 808ae62:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 808ae64:	e7f9      	b.n	808ae5a <_Z4dtoadhPc+0x2a>
        scale *= 10;
    val *= scale;   // capture all the significant digits
 808ae66:	4620      	mov	r0, r4
 808ae68:	f002 fa28 	bl	808d2bc <__aeabi_i2d>
 808ae6c:	4642      	mov	r2, r8
 808ae6e:	462b      	mov	r3, r5
 808ae70:	f002 fa8a 	bl	808d388 <__aeabi_dmul>
 808ae74:	4682      	mov	sl, r0
 808ae76:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
 808ae78:	f003 f930 	bl	808e0dc <__aeabi_d2ulz>
 808ae7c:	4680      	mov	r8, r0
 808ae7e:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
 808ae80:	f002 fa4c 	bl	808d31c <__aeabi_ul2d>
 808ae84:	4602      	mov	r2, r0
 808ae86:	460b      	mov	r3, r1
 808ae88:	4650      	mov	r0, sl
 808ae8a:	4659      	mov	r1, fp
 808ae8c:	f002 f8c8 	bl	808d020 <__aeabi_dsub>
 808ae90:	2200      	movs	r2, #0
 808ae92:	4b17      	ldr	r3, [pc, #92]	; (808aef0 <_Z4dtoadhPc+0xc0>)
 808ae94:	f002 fcfe 	bl	808d894 <__aeabi_dcmpge>
 808ae98:	b118      	cbz	r0, 808aea2 <_Z4dtoadhPc+0x72>
        fixed++;
 808ae9a:	f118 0801 	adds.w	r8, r8, #1
 808ae9e:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
 808aea2:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 808aea4:	4622      	mov	r2, r4
 808aea6:	462b      	mov	r3, r5
 808aea8:	4640      	mov	r0, r8
 808aeaa:	4649      	mov	r1, r9
 808aeac:	f003 f8fe 	bl	808e0ac <__aeabi_uldivmod>
 808aeb0:	2301      	movs	r3, #1
 808aeb2:	220a      	movs	r2, #10
 808aeb4:	4631      	mov	r1, r6
 808aeb6:	f7ff ff7c 	bl	808adb2 <ultoa>
    if (prec) {
 808aeba:	b1af      	cbz	r7, 808aee8 <_Z4dtoadhPc+0xb8>
        sout += strlen(sout);
 808aebc:	4630      	mov	r0, r6
 808aebe:	f004 f9a9 	bl	808f214 <strlen>
        *sout++ = '.';
 808aec2:	232e      	movs	r3, #46	; 0x2e
 808aec4:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
 808aec6:	3001      	adds	r0, #1
 808aec8:	4406      	add	r6, r0
 808aeca:	4622      	mov	r2, r4
 808aecc:	462b      	mov	r3, r5
 808aece:	4640      	mov	r0, r8
 808aed0:	4649      	mov	r1, r9
 808aed2:	f003 f8eb 	bl	808e0ac <__aeabi_uldivmod>
 808aed6:	463b      	mov	r3, r7
 808aed8:	4610      	mov	r0, r2
 808aeda:	4631      	mov	r1, r6
 808aedc:	220a      	movs	r2, #10
    }
}
 808aede:	b001      	add	sp, #4
 808aee0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
 808aee4:	f7ff bf65 	b.w	808adb2 <ultoa>
    }
}
 808aee8:	b001      	add	sp, #4
 808aeea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808aeee:	bf00      	nop
 808aef0:	3fe00000 	.word	0x3fe00000

0808aef4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 808aef4:	b510      	push	{r4, lr}
 808aef6:	4604      	mov	r4, r0
{
	free(buffer);
 808aef8:	6800      	ldr	r0, [r0, #0]
 808aefa:	f7ff fcad 	bl	808a858 <free>
}
 808aefe:	4620      	mov	r0, r4
 808af00:	bd10      	pop	{r4, pc}

0808af02 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 808af02:	b510      	push	{r4, lr}
 808af04:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 808af06:	6800      	ldr	r0, [r0, #0]
 808af08:	b108      	cbz	r0, 808af0e <_ZN6String10invalidateEv+0xc>
 808af0a:	f7ff fca5 	bl	808a858 <free>
	buffer = NULL;
 808af0e:	2300      	movs	r3, #0
 808af10:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 808af12:	60a3      	str	r3, [r4, #8]
 808af14:	6063      	str	r3, [r4, #4]
 808af16:	bd10      	pop	{r4, pc}

0808af18 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 808af18:	b538      	push	{r3, r4, r5, lr}
 808af1a:	4604      	mov	r4, r0
 808af1c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 808af1e:	6800      	ldr	r0, [r0, #0]
 808af20:	3101      	adds	r1, #1
 808af22:	f7ff fca1 	bl	808a868 <realloc>
	if (newbuffer) {
 808af26:	b110      	cbz	r0, 808af2e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 808af28:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 808af2c:	2001      	movs	r0, #1
	}
	return 0;
}
 808af2e:	bd38      	pop	{r3, r4, r5, pc}

0808af30 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 808af30:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 808af32:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 808af34:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 808af36:	b113      	cbz	r3, 808af3e <_ZN6String7reserveEj+0xe>
 808af38:	6843      	ldr	r3, [r0, #4]
 808af3a:	428b      	cmp	r3, r1
 808af3c:	d207      	bcs.n	808af4e <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 808af3e:	4620      	mov	r0, r4
 808af40:	f7ff ffea 	bl	808af18 <_ZN6String12changeBufferEj>
 808af44:	b120      	cbz	r0, 808af50 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 808af46:	68a3      	ldr	r3, [r4, #8]
 808af48:	b90b      	cbnz	r3, 808af4e <_ZN6String7reserveEj+0x1e>
 808af4a:	6822      	ldr	r2, [r4, #0]
 808af4c:	7013      	strb	r3, [r2, #0]
 808af4e:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 808af50:	bd10      	pop	{r4, pc}

0808af52 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 808af52:	b570      	push	{r4, r5, r6, lr}
 808af54:	460e      	mov	r6, r1
	if (!reserve(length)) {
 808af56:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 808af58:	4604      	mov	r4, r0
 808af5a:	4615      	mov	r5, r2
	if (!reserve(length)) {
 808af5c:	f7ff ffe8 	bl	808af30 <_ZN6String7reserveEj>
 808af60:	b918      	cbnz	r0, 808af6a <_ZN6String4copyEPKcj+0x18>
		invalidate();
 808af62:	4620      	mov	r0, r4
 808af64:	f7ff ffcd 	bl	808af02 <_ZN6String10invalidateEv>
		return *this;
 808af68:	e009      	b.n	808af7e <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 808af6a:	462a      	mov	r2, r5
 808af6c:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 808af6e:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 808af70:	6820      	ldr	r0, [r4, #0]
 808af72:	f003 fbc4 	bl	808e6fe <memcpy>
	buffer[len] = 0;
 808af76:	6822      	ldr	r2, [r4, #0]
 808af78:	68a3      	ldr	r3, [r4, #8]
 808af7a:	2100      	movs	r1, #0
 808af7c:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 808af7e:	4620      	mov	r0, r4
 808af80:	bd70      	pop	{r4, r5, r6, pc}

0808af82 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 808af82:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808af84:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 808af86:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808af88:	6003      	str	r3, [r0, #0]
	capacity = 0;
 808af8a:	6043      	str	r3, [r0, #4]
	len = 0;
 808af8c:	6083      	str	r3, [r0, #8]
	flags = 0;
 808af8e:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 808af90:	460d      	mov	r5, r1
 808af92:	b139      	cbz	r1, 808afa4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 808af94:	4608      	mov	r0, r1
 808af96:	f004 f93d 	bl	808f214 <strlen>
 808af9a:	4629      	mov	r1, r5
 808af9c:	4602      	mov	r2, r0
 808af9e:	4620      	mov	r0, r4
 808afa0:	f7ff ffd7 	bl	808af52 <_ZN6String4copyEPKcj>
}
 808afa4:	4620      	mov	r0, r4
 808afa6:	bd38      	pop	{r3, r4, r5, pc}

0808afa8 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 808afa8:	b538      	push	{r3, r4, r5, lr}
 808afaa:	4605      	mov	r5, r0
	if (buffer) {
 808afac:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 808afae:	460c      	mov	r4, r1
	if (buffer) {
 808afb0:	b160      	cbz	r0, 808afcc <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
 808afb2:	686a      	ldr	r2, [r5, #4]
 808afb4:	688b      	ldr	r3, [r1, #8]
 808afb6:	429a      	cmp	r2, r3
 808afb8:	d306      	bcc.n	808afc8 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
 808afba:	6809      	ldr	r1, [r1, #0]
 808afbc:	f003 fbf2 	bl	808e7a4 <strcpy>
			len = rhs.len;
 808afc0:	68a3      	ldr	r3, [r4, #8]
 808afc2:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 808afc4:	2300      	movs	r3, #0
 808afc6:	e00a      	b.n	808afde <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
 808afc8:	f7ff fc46 	bl	808a858 <free>
		}
	}
	buffer = rhs.buffer;
 808afcc:	6823      	ldr	r3, [r4, #0]
 808afce:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 808afd0:	6863      	ldr	r3, [r4, #4]
 808afd2:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 808afd4:	68a3      	ldr	r3, [r4, #8]
 808afd6:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 808afd8:	2300      	movs	r3, #0
 808afda:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
 808afdc:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
 808afde:	60a3      	str	r3, [r4, #8]
 808afe0:	bd38      	pop	{r3, r4, r5, pc}

0808afe2 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 808afe2:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 808afe4:	b510      	push	{r4, lr}
 808afe6:	460b      	mov	r3, r1
 808afe8:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 808afea:	d007      	beq.n	808affc <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 808afec:	6809      	ldr	r1, [r1, #0]
 808afee:	b119      	cbz	r1, 808aff8 <_ZN6StringaSERKS_+0x16>
 808aff0:	689a      	ldr	r2, [r3, #8]
 808aff2:	f7ff ffae 	bl	808af52 <_ZN6String4copyEPKcj>
 808aff6:	e001      	b.n	808affc <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 808aff8:	f7ff ff83 	bl	808af02 <_ZN6String10invalidateEv>

	return *this;
}
 808affc:	4620      	mov	r0, r4
 808affe:	bd10      	pop	{r4, pc}

0808b000 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 808b000:	b510      	push	{r4, lr}
 808b002:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808b004:	2300      	movs	r3, #0
 808b006:	6003      	str	r3, [r0, #0]
	capacity = 0;
 808b008:	6043      	str	r3, [r0, #4]
	len = 0;
 808b00a:	6083      	str	r3, [r0, #8]
	flags = 0;
 808b00c:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 808b00e:	f7ff ffe8 	bl	808afe2 <_ZN6StringaSERKS_>
}
 808b012:	4620      	mov	r0, r4
 808b014:	bd10      	pop	{r4, pc}

0808b016 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 808b016:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
 808b018:	b510      	push	{r4, lr}
 808b01a:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 808b01c:	d001      	beq.n	808b022 <_ZN6StringaSEOS_+0xc>
 808b01e:	f7ff ffc3 	bl	808afa8 <_ZN6String4moveERS_>
	return *this;
}
 808b022:	4620      	mov	r0, r4
 808b024:	bd10      	pop	{r4, pc}

0808b026 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 808b026:	b538      	push	{r3, r4, r5, lr}
 808b028:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 808b02a:	460c      	mov	r4, r1
 808b02c:	b141      	cbz	r1, 808b040 <_ZN6StringaSEPKc+0x1a>
 808b02e:	4608      	mov	r0, r1
 808b030:	f004 f8f0 	bl	808f214 <strlen>
 808b034:	4621      	mov	r1, r4
 808b036:	4602      	mov	r2, r0
 808b038:	4628      	mov	r0, r5
 808b03a:	f7ff ff8a 	bl	808af52 <_ZN6String4copyEPKcj>
 808b03e:	e001      	b.n	808b044 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 808b040:	f7ff ff5f 	bl	808af02 <_ZN6String10invalidateEv>

	return *this;
}
 808b044:	4628      	mov	r0, r5
 808b046:	bd38      	pop	{r3, r4, r5, pc}

0808b048 <_ZN6StringC1Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
 808b048:	b513      	push	{r0, r1, r4, lr}
 808b04a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808b04c:	2300      	movs	r3, #0

String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
 808b04e:	f88d 1004 	strb.w	r1, [sp, #4]
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808b052:	6003      	str	r3, [r0, #0]
	capacity = 0;
 808b054:	6043      	str	r3, [r0, #4]
	len = 0;
 808b056:	6083      	str	r3, [r0, #8]
	flags = 0;
 808b058:	7303      	strb	r3, [r0, #12]
{
	init();
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
 808b05a:	a901      	add	r1, sp, #4
String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 808b05c:	f88d 3005 	strb.w	r3, [sp, #5]
	*this = buf;
 808b060:	f7ff ffe1 	bl	808b026 <_ZN6StringaSEPKc>
}
 808b064:	4620      	mov	r0, r4
 808b066:	b002      	add	sp, #8
 808b068:	bd10      	pop	{r4, pc}

0808b06a <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 808b06a:	b510      	push	{r4, lr}
 808b06c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808b06e:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 808b070:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808b072:	6023      	str	r3, [r4, #0]
	capacity = 0;
 808b074:	6063      	str	r3, [r4, #4]
	len = 0;
 808b076:	60a3      	str	r3, [r4, #8]
	flags = 0;
 808b078:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 808b07a:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
 808b07c:	a901      	add	r1, sp, #4
 808b07e:	f7ff fec0 	bl	808ae02 <itoa>
	*this = buf;
 808b082:	a901      	add	r1, sp, #4
 808b084:	4620      	mov	r0, r4
 808b086:	f7ff ffce 	bl	808b026 <_ZN6StringaSEPKc>
}
 808b08a:	4620      	mov	r0, r4
 808b08c:	b00a      	add	sp, #40	; 0x28
 808b08e:	bd10      	pop	{r4, pc}

0808b090 <_ZN6StringC1Elh>:
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
 808b090:	b510      	push	{r4, lr}
 808b092:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808b094:	2300      	movs	r3, #0
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
 808b096:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808b098:	6023      	str	r3, [r4, #0]
	capacity = 0;
 808b09a:	6063      	str	r3, [r4, #4]
	len = 0;
 808b09c:	60a3      	str	r3, [r4, #8]
	flags = 0;
 808b09e:	7323      	strb	r3, [r4, #12]
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
 808b0a0:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	ltoa(value, buf, base);
 808b0a2:	a901      	add	r1, sp, #4
 808b0a4:	f7ff fe47 	bl	808ad36 <ltoa>
	*this = buf;
 808b0a8:	a901      	add	r1, sp, #4
 808b0aa:	4620      	mov	r0, r4
 808b0ac:	f7ff ffbb 	bl	808b026 <_ZN6StringaSEPKc>
}
 808b0b0:	4620      	mov	r0, r4
 808b0b2:	b00a      	add	sp, #40	; 0x28
 808b0b4:	bd10      	pop	{r4, pc}

0808b0b6 <_ZN6StringC1Efi>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
 808b0b6:	b530      	push	{r4, r5, lr}
 808b0b8:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808b0ba:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
 808b0bc:	b08b      	sub	sp, #44	; 0x2c
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808b0be:	6003      	str	r3, [r0, #0]
	capacity = 0;
 808b0c0:	6043      	str	r3, [r0, #4]
	len = 0;
 808b0c2:	6083      	str	r3, [r0, #8]
	flags = 0;
 808b0c4:	7303      	strb	r3, [r0, #12]

String::String(float value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
 808b0c6:	b2d5      	uxtb	r5, r2
 808b0c8:	4608      	mov	r0, r1
 808b0ca:	f002 f909 	bl	808d2e0 <__aeabi_f2d>
 808b0ce:	ab01      	add	r3, sp, #4
 808b0d0:	462a      	mov	r2, r5
 808b0d2:	f7ff fead 	bl	808ae30 <_Z4dtoadhPc>
        *this = buf;
 808b0d6:	a901      	add	r1, sp, #4
 808b0d8:	4620      	mov	r0, r4
 808b0da:	f7ff ffa4 	bl	808b026 <_ZN6StringaSEPKc>
}
 808b0de:	4620      	mov	r0, r4
 808b0e0:	b00b      	add	sp, #44	; 0x2c
 808b0e2:	bd30      	pop	{r4, r5, pc}

0808b0e4 <_ZN6StringC1Edi>:

String::String(double value, int decimalPlaces)
 808b0e4:	b510      	push	{r4, lr}
 808b0e6:	4604      	mov	r4, r0
 808b0e8:	b08a      	sub	sp, #40	; 0x28
 808b0ea:	4619      	mov	r1, r3
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808b0ec:	2300      	movs	r3, #0
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
 808b0ee:	4610      	mov	r0, r2
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808b0f0:	6023      	str	r3, [r4, #0]
	capacity = 0;
 808b0f2:	6063      	str	r3, [r4, #4]
	len = 0;
 808b0f4:	60a3      	str	r3, [r4, #8]
	flags = 0;
 808b0f6:	7323      	strb	r3, [r4, #12]

String::String(double value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
 808b0f8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 808b0fc:	ab01      	add	r3, sp, #4
 808b0fe:	f7ff fe97 	bl	808ae30 <_Z4dtoadhPc>
        *this = buf;
 808b102:	a901      	add	r1, sp, #4
 808b104:	4620      	mov	r0, r4
 808b106:	f7ff ff8e 	bl	808b026 <_ZN6StringaSEPKc>
}
 808b10a:	4620      	mov	r0, r4
 808b10c:	b00a      	add	sp, #40	; 0x28
 808b10e:	bd10      	pop	{r4, pc}

0808b110 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 808b110:	b570      	push	{r4, r5, r6, lr}
 808b112:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 808b114:	460e      	mov	r6, r1
 808b116:	b909      	cbnz	r1, 808b11c <_ZN6String6concatEPKcj+0xc>
 808b118:	2000      	movs	r0, #0
 808b11a:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 808b11c:	b16a      	cbz	r2, 808b13a <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 808b11e:	6883      	ldr	r3, [r0, #8]
 808b120:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 808b122:	4629      	mov	r1, r5
 808b124:	f7ff ff04 	bl	808af30 <_ZN6String7reserveEj>
 808b128:	2800      	cmp	r0, #0
 808b12a:	d0f5      	beq.n	808b118 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 808b12c:	6820      	ldr	r0, [r4, #0]
 808b12e:	68a3      	ldr	r3, [r4, #8]
 808b130:	4631      	mov	r1, r6
 808b132:	4418      	add	r0, r3
 808b134:	f003 fb36 	bl	808e7a4 <strcpy>
	len = newlen;
 808b138:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 808b13a:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 808b13c:	bd70      	pop	{r4, r5, r6, pc}

0808b13e <_ZN6String6concatERKS_>:
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
 808b13e:	688a      	ldr	r2, [r1, #8]
 808b140:	6809      	ldr	r1, [r1, #0]
 808b142:	f7ff bfe5 	b.w	808b110 <_ZN6String6concatEPKcj>

0808b146 <_ZN6String6concatEPKc>:
	len = newlen;
	return 1;
}

unsigned char String::concat(const char *cstr)
{
 808b146:	b538      	push	{r3, r4, r5, lr}
 808b148:	4605      	mov	r5, r0
	if (!cstr) return 0;
 808b14a:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
 808b14c:	4608      	mov	r0, r1
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
 808b14e:	b141      	cbz	r1, 808b162 <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
 808b150:	f004 f860 	bl	808f214 <strlen>
 808b154:	4621      	mov	r1, r4
 808b156:	4602      	mov	r2, r0
 808b158:	4628      	mov	r0, r5
}
 808b15a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
 808b15e:	f7ff bfd7 	b.w	808b110 <_ZN6String6concatEPKcj>
}
 808b162:	bd38      	pop	{r3, r4, r5, pc}

0808b164 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
 808b164:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 808b166:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
 808b168:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
 808b16c:	2201      	movs	r2, #1
 808b16e:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 808b170:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 808b174:	f7ff ffcc 	bl	808b110 <_ZN6String6concatEPKcj>
}
 808b178:	b003      	add	sp, #12
 808b17a:	f85d fb04 	ldr.w	pc, [sp], #4

0808b17e <_ZN6String6concatEi>:
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
{
 808b17e:	b513      	push	{r0, r1, r4, lr}
	char buf[7];
	itoa(num, buf, 10);
 808b180:	220a      	movs	r2, #10
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
{
 808b182:	4604      	mov	r4, r0
 808b184:	4608      	mov	r0, r1
	char buf[7];
	itoa(num, buf, 10);
 808b186:	4669      	mov	r1, sp
 808b188:	f7ff fe3b 	bl	808ae02 <itoa>
	return concat(buf, strlen(buf));
 808b18c:	4668      	mov	r0, sp
 808b18e:	f004 f841 	bl	808f214 <strlen>
 808b192:	4669      	mov	r1, sp
 808b194:	4602      	mov	r2, r0
 808b196:	4620      	mov	r0, r4
 808b198:	f7ff ffba 	bl	808b110 <_ZN6String6concatEPKcj>
}
 808b19c:	b002      	add	sp, #8
 808b19e:	bd10      	pop	{r4, pc}

0808b1a0 <_ZN6String6concatEf>:
	ultoa(num, buf, DEC);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(float num)
{
 808b1a0:	b510      	push	{r4, lr}
 808b1a2:	4604      	mov	r4, r0
 808b1a4:	b086      	sub	sp, #24
	char buf[20];
	dtoa(num, 6, buf);
 808b1a6:	4608      	mov	r0, r1
 808b1a8:	f002 f89a 	bl	808d2e0 <__aeabi_f2d>
 808b1ac:	ab01      	add	r3, sp, #4
 808b1ae:	2206      	movs	r2, #6
 808b1b0:	f7ff fe3e 	bl	808ae30 <_Z4dtoadhPc>
	return concat(buf, strlen(buf));
 808b1b4:	a801      	add	r0, sp, #4
 808b1b6:	f004 f82d 	bl	808f214 <strlen>
 808b1ba:	a901      	add	r1, sp, #4
 808b1bc:	4602      	mov	r2, r0
 808b1be:	4620      	mov	r0, r4
 808b1c0:	f7ff ffa6 	bl	808b110 <_ZN6String6concatEPKcj>
}
 808b1c4:	b006      	add	sp, #24
 808b1c6:	bd10      	pop	{r4, pc}

0808b1c8 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 808b1c8:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 808b1ca:	688a      	ldr	r2, [r1, #8]
 808b1cc:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 808b1ce:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 808b1d0:	f7ff ff9e 	bl	808b110 <_ZN6String6concatEPKcj>
 808b1d4:	b910      	cbnz	r0, 808b1dc <_ZplRK15StringSumHelperRK6String+0x14>
 808b1d6:	4620      	mov	r0, r4
 808b1d8:	f7ff fe93 	bl	808af02 <_ZN6String10invalidateEv>
	return a;
}
 808b1dc:	4620      	mov	r0, r4
 808b1de:	bd10      	pop	{r4, pc}

0808b1e0 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 808b1e0:	b538      	push	{r3, r4, r5, lr}
 808b1e2:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 808b1e4:	460d      	mov	r5, r1
 808b1e6:	b141      	cbz	r1, 808b1fa <_ZplRK15StringSumHelperPKc+0x1a>
 808b1e8:	4608      	mov	r0, r1
 808b1ea:	f004 f813 	bl	808f214 <strlen>
 808b1ee:	4629      	mov	r1, r5
 808b1f0:	4602      	mov	r2, r0
 808b1f2:	4620      	mov	r0, r4
 808b1f4:	f7ff ff8c 	bl	808b110 <_ZN6String6concatEPKcj>
 808b1f8:	b910      	cbnz	r0, 808b200 <_ZplRK15StringSumHelperPKc+0x20>
 808b1fa:	4620      	mov	r0, r4
 808b1fc:	f7ff fe81 	bl	808af02 <_ZN6String10invalidateEv>
	return a;
}
 808b200:	4620      	mov	r0, r4
 808b202:	bd38      	pop	{r3, r4, r5, pc}

0808b204 <_ZplRK15StringSumHelperi>:
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, int num)
{
 808b204:	b510      	push	{r4, lr}
 808b206:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
 808b208:	f7ff ffb9 	bl	808b17e <_ZN6String6concatEi>
 808b20c:	b910      	cbnz	r0, 808b214 <_ZplRK15StringSumHelperi+0x10>
 808b20e:	4620      	mov	r0, r4
 808b210:	f7ff fe77 	bl	808af02 <_ZN6String10invalidateEv>
	return a;
}
 808b214:	4620      	mov	r0, r4
 808b216:	bd10      	pop	{r4, pc}

0808b218 <_ZplRK15StringSumHelperf>:
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, float num)
{
 808b218:	b510      	push	{r4, lr}
 808b21a:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
 808b21c:	f7ff ffc0 	bl	808b1a0 <_ZN6String6concatEf>
 808b220:	b910      	cbnz	r0, 808b228 <_ZplRK15StringSumHelperf+0x10>
 808b222:	4620      	mov	r0, r4
 808b224:	f7ff fe6d 	bl	808af02 <_ZN6String10invalidateEv>
	return a;
}
 808b228:	4620      	mov	r0, r4
 808b22a:	bd10      	pop	{r4, pc}

0808b22c <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 808b22c:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 808b22e:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 808b230:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 808b232:	b912      	cbnz	r2, 808b23a <_ZNK6String6equalsEPKc+0xe>
 808b234:	b919      	cbnz	r1, 808b23e <_ZNK6String6equalsEPKc+0x12>
 808b236:	2001      	movs	r0, #1
 808b238:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 808b23a:	b911      	cbnz	r1, 808b242 <_ZNK6String6equalsEPKc+0x16>
 808b23c:	6803      	ldr	r3, [r0, #0]
 808b23e:	7818      	ldrb	r0, [r3, #0]
 808b240:	e002      	b.n	808b248 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 808b242:	6800      	ldr	r0, [r0, #0]
 808b244:	f003 faa4 	bl	808e790 <strcmp>
 808b248:	fab0 f080 	clz	r0, r0
 808b24c:	0940      	lsrs	r0, r0, #5
}
 808b24e:	bd08      	pop	{r3, pc}

0808b250 <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
 808b250:	b510      	push	{r4, lr}
 808b252:	4614      	mov	r4, r2
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 808b254:	6883      	ldr	r3, [r0, #8]
 808b256:	688a      	ldr	r2, [r1, #8]
 808b258:	1a9b      	subs	r3, r3, r2
 808b25a:	42a3      	cmp	r3, r4
 808b25c:	d30a      	bcc.n	808b274 <_ZNK6String10startsWithERKS_j+0x24>
 808b25e:	6800      	ldr	r0, [r0, #0]
 808b260:	b158      	cbz	r0, 808b27a <_ZNK6String10startsWithERKS_j+0x2a>
 808b262:	6809      	ldr	r1, [r1, #0]
 808b264:	b141      	cbz	r1, 808b278 <_ZNK6String10startsWithERKS_j+0x28>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
 808b266:	4420      	add	r0, r4
 808b268:	f003 ffdc 	bl	808f224 <strncmp>
 808b26c:	fab0 f080 	clz	r0, r0
 808b270:	0940      	lsrs	r0, r0, #5
 808b272:	bd10      	pop	{r4, pc}
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 808b274:	2000      	movs	r0, #0
 808b276:	bd10      	pop	{r4, pc}
 808b278:	4608      	mov	r0, r1
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}
 808b27a:	bd10      	pop	{r4, pc}

0808b27c <_ZNK6String10startsWithERKS_>:
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
 808b27c:	6882      	ldr	r2, [r0, #8]
 808b27e:	688b      	ldr	r3, [r1, #8]
 808b280:	429a      	cmp	r2, r3
 808b282:	d302      	bcc.n	808b28a <_ZNK6String10startsWithERKS_+0xe>
	return startsWith(s2, 0);
 808b284:	2200      	movs	r2, #0
 808b286:	f7ff bfe3 	b.w	808b250 <_ZNK6String10startsWithERKS_j>
}
 808b28a:	2000      	movs	r0, #0
 808b28c:	4770      	bx	lr

0808b28e <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 808b28e:	6883      	ldr	r3, [r0, #8]
 808b290:	428b      	cmp	r3, r1
 808b292:	d903      	bls.n	808b29c <_ZNK6StringixEj+0xe>
 808b294:	6800      	ldr	r0, [r0, #0]
 808b296:	b110      	cbz	r0, 808b29e <_ZNK6StringixEj+0x10>
	return buffer[index];
 808b298:	5c40      	ldrb	r0, [r0, r1]
 808b29a:	4770      	bx	lr
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 808b29c:	2000      	movs	r0, #0
	return buffer[index];
}
 808b29e:	4770      	bx	lr

0808b2a0 <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
 808b2a0:	f7ff bff5 	b.w	808b28e <_ZNK6StringixEj>

0808b2a4 <_ZNK6String7indexOfEcj>:
{
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
 808b2a4:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
 808b2a6:	6883      	ldr	r3, [r0, #8]
 808b2a8:	4293      	cmp	r3, r2
 808b2aa:	d906      	bls.n	808b2ba <_ZNK6String7indexOfEcj+0x16>
	const char* temp = strchr(buffer + fromIndex, ch);
 808b2ac:	6804      	ldr	r4, [r0, #0]
 808b2ae:	18a0      	adds	r0, r4, r2
 808b2b0:	f003 fa60 	bl	808e774 <strchr>
	if (temp == NULL) return -1;
 808b2b4:	b108      	cbz	r0, 808b2ba <_ZNK6String7indexOfEcj+0x16>
	return temp - buffer;
 808b2b6:	1b00      	subs	r0, r0, r4
 808b2b8:	bd10      	pop	{r4, pc}
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
	if (fromIndex >= len) return -1;
 808b2ba:	f04f 30ff 	mov.w	r0, #4294967295
	const char* temp = strchr(buffer + fromIndex, ch);
	if (temp == NULL) return -1;
	return temp - buffer;
}
 808b2be:	bd10      	pop	{r4, pc}

0808b2c0 <_ZNK6String7indexOfEc>:
/*  Search                                   */
/*********************************************/

int String::indexOf(char c) const
{
	return indexOf(c, 0);
 808b2c0:	2200      	movs	r2, #0
 808b2c2:	f7ff bfef 	b.w	808b2a4 <_ZNK6String7indexOfEcj>
	...

0808b2c8 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 808b2c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808b2cc:	461c      	mov	r4, r3
	if (left > right) {
 808b2ce:	429a      	cmp	r2, r3
 808b2d0:	bf88      	it	hi
 808b2d2:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 808b2d4:	460e      	mov	r6, r1
 808b2d6:	4615      	mov	r5, r2
	if (left > right) {
 808b2d8:	bf88      	it	hi
 808b2da:	4625      	movhi	r5, r4
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 808b2dc:	490d      	ldr	r1, [pc, #52]	; (808b314 <_ZNK6String9substringEjj+0x4c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
 808b2de:	bf88      	it	hi
 808b2e0:	461c      	movhi	r4, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 808b2e2:	4607      	mov	r7, r0
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 808b2e4:	f7ff fe4d 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
 808b2e8:	68b1      	ldr	r1, [r6, #8]
 808b2ea:	428d      	cmp	r5, r1
 808b2ec:	d80f      	bhi.n	808b30e <_ZNK6String9substringEjj+0x46>
 808b2ee:	428c      	cmp	r4, r1
 808b2f0:	bf28      	it	cs
 808b2f2:	460c      	movcs	r4, r1
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
 808b2f4:	6833      	ldr	r3, [r6, #0]
	buffer[right] = '\0';
 808b2f6:	2200      	movs	r2, #0
		left = temp;
	}
	String out;
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
 808b2f8:	f813 8004 	ldrb.w	r8, [r3, r4]
	buffer[right] = '\0';
 808b2fc:	551a      	strb	r2, [r3, r4]
	out = buffer + left;  // pointer arithmetic
 808b2fe:	6831      	ldr	r1, [r6, #0]
 808b300:	4638      	mov	r0, r7
 808b302:	4429      	add	r1, r5
 808b304:	f7ff fe8f 	bl	808b026 <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
 808b308:	6833      	ldr	r3, [r6, #0]
 808b30a:	f803 8004 	strb.w	r8, [r3, r4]
	return out;
}
 808b30e:	4638      	mov	r0, r7
 808b310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808b314:	08094100 	.word	0x08094100

0808b318 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 808b318:	6800      	ldr	r0, [r0, #0]
 808b31a:	b108      	cbz	r0, 808b320 <_ZNK6String5toIntEv+0x8>
 808b31c:	f003 b8bd 	b.w	808e49a <atol>
	return 0;
}
 808b320:	4770      	bx	lr

0808b322 <_ZNK6String7toFloatEv>:


float String::toFloat(void) const
{
 808b322:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
 808b324:	6800      	ldr	r0, [r0, #0]
 808b326:	b120      	cbz	r0, 808b332 <_ZNK6String7toFloatEv+0x10>
 808b328:	f003 f8b0 	bl	808e48c <atof>
 808b32c:	f002 fb24 	bl	808d978 <__aeabi_d2f>
 808b330:	bd08      	pop	{r3, pc}
	return 0;
 808b332:	2000      	movs	r0, #0
}
 808b334:	bd08      	pop	{r3, pc}
	...

0808b338 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
 808b338:	b40e      	push	{r1, r2, r3}
 808b33a:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 808b33c:	ac09      	add	r4, sp, #36	; 0x24
 808b33e:	f854 7b04 	ldr.w	r7, [r4], #4
 808b342:	4605      	mov	r5, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 808b344:	4623      	mov	r3, r4
 808b346:	463a      	mov	r2, r7
 808b348:	2105      	movs	r1, #5
 808b34a:	a802      	add	r0, sp, #8
}

String String::format(const char* fmt, ...)
{
    va_list marker;
    va_start(marker, fmt);
 808b34c:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 808b34e:	f7ff fac3 	bl	808a8d8 <vsnprintf>
 808b352:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 808b354:	490b      	ldr	r1, [pc, #44]	; (808b384 <_ZN6String6formatEPKcz+0x4c>)
 808b356:	4628      	mov	r0, r5
 808b358:	f7ff fe13 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
 808b35c:	4631      	mov	r1, r6
 808b35e:	4628      	mov	r0, r5
 808b360:	f7ff fde6 	bl	808af30 <_ZN6String7reserveEj>
    if (result.buffer) {
 808b364:	6828      	ldr	r0, [r5, #0]
 808b366:	b130      	cbz	r0, 808b376 <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 808b368:	4623      	mov	r3, r4
 808b36a:	463a      	mov	r2, r7
 808b36c:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
 808b36e:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 808b370:	f7ff fab2 	bl	808a8d8 <vsnprintf>
        va_end(marker);
        result.len = n;
 808b374:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
 808b376:	4628      	mov	r0, r5
 808b378:	b004      	add	sp, #16
 808b37a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 808b37e:	b003      	add	sp, #12
 808b380:	4770      	bx	lr
 808b382:	bf00      	nop
 808b384:	08094100 	.word	0x08094100

0808b388 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 808b388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808b38a:	4606      	mov	r6, r0
 808b38c:	460d      	mov	r5, r1
 808b38e:	188f      	adds	r7, r1, r2
  size_t n = 0;
 808b390:	2400      	movs	r4, #0
  while (size--) {
 808b392:	42bd      	cmp	r5, r7
 808b394:	d00c      	beq.n	808b3b0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 808b396:	6833      	ldr	r3, [r6, #0]
 808b398:	f815 1b01 	ldrb.w	r1, [r5], #1
 808b39c:	689b      	ldr	r3, [r3, #8]
 808b39e:	4630      	mov	r0, r6
 808b3a0:	4798      	blx	r3
     if (chunk>=0)
 808b3a2:	2800      	cmp	r0, #0
 808b3a4:	db01      	blt.n	808b3aa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 808b3a6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 808b3a8:	e7f3      	b.n	808b392 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 808b3aa:	2c00      	cmp	r4, #0
 808b3ac:	bf08      	it	eq
 808b3ae:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 808b3b0:	4620      	mov	r0, r4
 808b3b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808b3b4 <_ZN5Print5printEPKc>:
 808b3b4:	b508      	push	{r3, lr}
 808b3b6:	f7fd fa83 	bl	80888c0 <_ZN5Print5writeEPKc>
 808b3ba:	bd08      	pop	{r3, pc}

0808b3bc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 808b3bc:	6803      	ldr	r3, [r0, #0]
 808b3be:	689b      	ldr	r3, [r3, #8]
 808b3c0:	4718      	bx	r3

0808b3c2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 808b3c2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 808b3c4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 808b3c6:	4605      	mov	r5, r0
  size_t n = print('\r');
 808b3c8:	f7ff fff8 	bl	808b3bc <_ZN5Print5printEc>
  n += print('\n');
 808b3cc:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 808b3ce:	4604      	mov	r4, r0
  n += print('\n');
 808b3d0:	4628      	mov	r0, r5
 808b3d2:	f7ff fff3 	bl	808b3bc <_ZN5Print5printEc>
  return n;
}
 808b3d6:	4420      	add	r0, r4
 808b3d8:	bd38      	pop	{r3, r4, r5, pc}

0808b3da <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 808b3da:	b538      	push	{r3, r4, r5, lr}
 808b3dc:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808b3de:	f7fd fa6f 	bl	80888c0 <_ZN5Print5writeEPKc>
 808b3e2:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 808b3e4:	4628      	mov	r0, r5
 808b3e6:	f7ff ffec 	bl	808b3c2 <_ZN5Print7printlnEv>
  return n;
}
 808b3ea:	4420      	add	r0, r4
 808b3ec:	bd38      	pop	{r3, r4, r5, pc}

0808b3ee <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
 808b3ee:	b538      	push	{r3, r4, r5, lr}
 808b3f0:	4605      	mov	r5, r0
  size_t n = print(c);
 808b3f2:	f7ff ffe3 	bl	808b3bc <_ZN5Print5printEc>
 808b3f6:	4604      	mov	r4, r0
  n += println();
 808b3f8:	4628      	mov	r0, r5
 808b3fa:	f7ff ffe2 	bl	808b3c2 <_ZN5Print7printlnEv>
  return n;
}
 808b3fe:	4420      	add	r0, r4
 808b400:	bd38      	pop	{r3, r4, r5, pc}

0808b402 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 808b402:	2a01      	cmp	r2, #1
 808b404:	bf98      	it	ls
 808b406:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 808b408:	b530      	push	{r4, r5, lr}
 808b40a:	460b      	mov	r3, r1
 808b40c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 808b40e:	2100      	movs	r1, #0
 808b410:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 808b414:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 808b418:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 808b41c:	fb05 3312 	mls	r3, r5, r2, r3
 808b420:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 808b422:	2b09      	cmp	r3, #9
 808b424:	bf94      	ite	ls
 808b426:	3330      	addls	r3, #48	; 0x30
 808b428:	3337      	addhi	r3, #55	; 0x37
 808b42a:	b2db      	uxtb	r3, r3
 808b42c:	4621      	mov	r1, r4
 808b42e:	f804 3901 	strb.w	r3, [r4], #-1
 808b432:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 808b434:	2d00      	cmp	r5, #0
 808b436:	d1ef      	bne.n	808b418 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 808b438:	f7fd fa42 	bl	80888c0 <_ZN5Print5writeEPKc>
}
 808b43c:	b00b      	add	sp, #44	; 0x2c
 808b43e:	bd30      	pop	{r4, r5, pc}

0808b440 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 808b440:	b410      	push	{r4}
  if (base == 0) return write(n);
 808b442:	b922      	cbnz	r2, 808b44e <_ZN5Print5printEmi+0xe>
 808b444:	6803      	ldr	r3, [r0, #0]
 808b446:	b2c9      	uxtb	r1, r1
 808b448:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 808b44a:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 808b44c:	4718      	bx	r3
  else return printNumber(n, base);
 808b44e:	b2d2      	uxtb	r2, r2
}
 808b450:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 808b452:	f7ff bfd6 	b.w	808b402 <_ZN5Print11printNumberEmh>

0808b456 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 808b456:	f7ff bff3 	b.w	808b440 <_ZN5Print5printEmi>

0808b45a <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
 808b45a:	b538      	push	{r3, r4, r5, lr}
 808b45c:	4605      	mov	r5, r0
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 808b45e:	f7ff ffef 	bl	808b440 <_ZN5Print5printEmi>
 808b462:	4604      	mov	r4, r0
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
 808b464:	4628      	mov	r0, r5
 808b466:	f7ff ffac 	bl	808b3c2 <_ZN5Print7printlnEv>
  return n;
}
 808b46a:	4420      	add	r0, r4
 808b46c:	bd38      	pop	{r3, r4, r5, pc}

0808b46e <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 808b46e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808b472:	4607      	mov	r7, r0
 808b474:	460e      	mov	r6, r1
  if (base == 0) {
 808b476:	4615      	mov	r5, r2
 808b478:	b92a      	cbnz	r2, 808b486 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 808b47a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 808b47e:	6803      	ldr	r3, [r0, #0]
 808b480:	b2c9      	uxtb	r1, r1
 808b482:	689b      	ldr	r3, [r3, #8]
 808b484:	4718      	bx	r3
  } else if (base == 10) {
 808b486:	2a0a      	cmp	r2, #10
 808b488:	d102      	bne.n	808b490 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 808b48a:	2900      	cmp	r1, #0
 808b48c:	da01      	bge.n	808b492 <_ZN5Print5printEli+0x24>
 808b48e:	e004      	b.n	808b49a <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 808b490:	b2d2      	uxtb	r2, r2
  }
}
 808b492:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 808b496:	f7ff bfb4 	b.w	808b402 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 808b49a:	212d      	movs	r1, #45	; 0x2d
 808b49c:	f7ff ff8e 	bl	808b3bc <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 808b4a0:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 808b4a2:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 808b4a4:	4271      	negs	r1, r6
 808b4a6:	4638      	mov	r0, r7
 808b4a8:	f7ff ffab 	bl	808b402 <_ZN5Print11printNumberEmh>
 808b4ac:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 808b4ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808b4b2 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 808b4b2:	f7ff bfdc 	b.w	808b46e <_ZN5Print5printEli>

0808b4b6 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 808b4b6:	b538      	push	{r3, r4, r5, lr}
 808b4b8:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 808b4ba:	f7ff ffd8 	bl	808b46e <_ZN5Print5printEli>
 808b4be:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 808b4c0:	4628      	mov	r0, r5
 808b4c2:	f7ff ff7e 	bl	808b3c2 <_ZN5Print7printlnEv>
  return n;
}
 808b4c6:	4420      	add	r0, r4
 808b4c8:	bd38      	pop	{r3, r4, r5, pc}
	...

0808b4cc <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 808b4cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 808b4d0:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 808b4d2:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 808b4d4:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 808b4d6:	4617      	mov	r7, r2
 808b4d8:	461e      	mov	r6, r3
 808b4da:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 808b4de:	f002 f9ed 	bl	808d8bc <__aeabi_dcmpun>
 808b4e2:	b108      	cbz	r0, 808b4e8 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808b4e4:	4947      	ldr	r1, [pc, #284]	; (808b604 <_ZN5Print10printFloatEdh+0x138>)
 808b4e6:	e012      	b.n	808b50e <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 808b4e8:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 808b4ec:	f04f 32ff 	mov.w	r2, #4294967295
 808b4f0:	4b45      	ldr	r3, [pc, #276]	; (808b608 <_ZN5Print10printFloatEdh+0x13c>)
 808b4f2:	4638      	mov	r0, r7
 808b4f4:	4621      	mov	r1, r4
 808b4f6:	f002 f9e1 	bl	808d8bc <__aeabi_dcmpun>
 808b4fa:	b968      	cbnz	r0, 808b518 <_ZN5Print10printFloatEdh+0x4c>
 808b4fc:	f04f 32ff 	mov.w	r2, #4294967295
 808b500:	4b41      	ldr	r3, [pc, #260]	; (808b608 <_ZN5Print10printFloatEdh+0x13c>)
 808b502:	4638      	mov	r0, r7
 808b504:	4621      	mov	r1, r4
 808b506:	f002 f9bb 	bl	808d880 <__aeabi_dcmple>
 808b50a:	b928      	cbnz	r0, 808b518 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808b50c:	493f      	ldr	r1, [pc, #252]	; (808b60c <_ZN5Print10printFloatEdh+0x140>)
 808b50e:	4640      	mov	r0, r8
 808b510:	f7fd f9d6 	bl	80888c0 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 808b514:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 808b518:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 808b51c:	4b3c      	ldr	r3, [pc, #240]	; (808b610 <_ZN5Print10printFloatEdh+0x144>)
 808b51e:	4638      	mov	r0, r7
 808b520:	4631      	mov	r1, r6
 808b522:	f002 f9c1 	bl	808d8a8 <__aeabi_dcmpgt>
 808b526:	b108      	cbz	r0, 808b52c <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808b528:	493a      	ldr	r1, [pc, #232]	; (808b614 <_ZN5Print10printFloatEdh+0x148>)
 808b52a:	e7f0      	b.n	808b50e <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 808b52c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 808b530:	4b39      	ldr	r3, [pc, #228]	; (808b618 <_ZN5Print10printFloatEdh+0x14c>)
 808b532:	4638      	mov	r0, r7
 808b534:	4631      	mov	r1, r6
 808b536:	f002 f999 	bl	808d86c <__aeabi_dcmplt>
 808b53a:	2800      	cmp	r0, #0
 808b53c:	d1f4      	bne.n	808b528 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 808b53e:	2200      	movs	r2, #0
 808b540:	2300      	movs	r3, #0
 808b542:	4638      	mov	r0, r7
 808b544:	4631      	mov	r1, r6
 808b546:	f002 f991 	bl	808d86c <__aeabi_dcmplt>
 808b54a:	b138      	cbz	r0, 808b55c <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 808b54c:	212d      	movs	r1, #45	; 0x2d
 808b54e:	4640      	mov	r0, r8
 808b550:	f7ff ff34 	bl	808b3bc <_ZN5Print5printEc>
     number = -number;
 808b554:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 808b558:	4604      	mov	r4, r0
 808b55a:	e000      	b.n	808b55e <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 808b55c:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 808b55e:	492f      	ldr	r1, [pc, #188]	; (808b61c <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 808b560:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 808b564:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 808b566:	fa5f f389 	uxtb.w	r3, r9
 808b56a:	429d      	cmp	r5, r3
 808b56c:	d906      	bls.n	808b57c <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 808b56e:	2200      	movs	r2, #0
 808b570:	4b2b      	ldr	r3, [pc, #172]	; (808b620 <_ZN5Print10printFloatEdh+0x154>)
 808b572:	f002 f833 	bl	808d5dc <__aeabi_ddiv>
 808b576:	f109 0901 	add.w	r9, r9, #1
 808b57a:	e7f4      	b.n	808b566 <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 808b57c:	463a      	mov	r2, r7
 808b57e:	4633      	mov	r3, r6
 808b580:	f001 fd50 	bl	808d024 <__adddf3>
 808b584:	460f      	mov	r7, r1
 808b586:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 808b588:	f002 f9d6 	bl	808d938 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 808b58c:	220a      	movs	r2, #10
 808b58e:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 808b590:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 808b592:	4640      	mov	r0, r8
 808b594:	f7ff ff35 	bl	808b402 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 808b598:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 808b59a:	b37d      	cbz	r5, 808b5fc <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 808b59c:	4648      	mov	r0, r9
 808b59e:	f001 fe7d 	bl	808d29c <__aeabi_ui2d>
 808b5a2:	4602      	mov	r2, r0
 808b5a4:	460b      	mov	r3, r1
 808b5a6:	4630      	mov	r0, r6
 808b5a8:	4639      	mov	r1, r7
 808b5aa:	f001 fd39 	bl	808d020 <__aeabi_dsub>
 808b5ae:	4606      	mov	r6, r0
 808b5b0:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808b5b2:	4640      	mov	r0, r8
 808b5b4:	491b      	ldr	r1, [pc, #108]	; (808b624 <_ZN5Print10printFloatEdh+0x158>)
 808b5b6:	f7fd f983 	bl	80888c0 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 808b5ba:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 808b5bc:	4b18      	ldr	r3, [pc, #96]	; (808b620 <_ZN5Print10printFloatEdh+0x154>)
 808b5be:	2200      	movs	r2, #0
 808b5c0:	4630      	mov	r0, r6
 808b5c2:	4639      	mov	r1, r7
 808b5c4:	f001 fee0 	bl	808d388 <__aeabi_dmul>
 808b5c8:	460f      	mov	r7, r1
 808b5ca:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 808b5cc:	f002 f98c 	bl	808d8e8 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 808b5d0:	220a      	movs	r2, #10
 808b5d2:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 808b5d4:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 808b5d6:	4640      	mov	r0, r8
 808b5d8:	f7ff ff49 	bl	808b46e <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 808b5dc:	4404      	add	r4, r0
    remainder -= toPrint;
 808b5de:	4648      	mov	r0, r9
 808b5e0:	f001 fe6c 	bl	808d2bc <__aeabi_i2d>
 808b5e4:	4602      	mov	r2, r0
 808b5e6:	460b      	mov	r3, r1
 808b5e8:	4630      	mov	r0, r6
 808b5ea:	4639      	mov	r1, r7
 808b5ec:	f001 fd18 	bl	808d020 <__aeabi_dsub>
 808b5f0:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 808b5f2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 808b5f6:	4606      	mov	r6, r0
 808b5f8:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 808b5fa:	d1df      	bne.n	808b5bc <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 808b5fc:	4620      	mov	r0, r4
 808b5fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808b602:	bf00      	nop
 808b604:	08094154 	.word	0x08094154
 808b608:	7fefffff 	.word	0x7fefffff
 808b60c:	0809415c 	.word	0x0809415c
 808b610:	41efffff 	.word	0x41efffff
 808b614:	08094158 	.word	0x08094158
 808b618:	c1efffff 	.word	0xc1efffff
 808b61c:	3fe00000 	.word	0x3fe00000
 808b620:	40240000 	.word	0x40240000
 808b624:	080939ee 	.word	0x080939ee

0808b628 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 808b628:	b537      	push	{r0, r1, r2, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 808b62a:	f89d 1018 	ldrb.w	r1, [sp, #24]
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 808b62e:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 808b630:	9100      	str	r1, [sp, #0]
 808b632:	f7ff ff4b 	bl	808b4cc <_ZN5Print10printFloatEdh>
 808b636:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
 808b638:	4628      	mov	r0, r5
 808b63a:	f7ff fec2 	bl	808b3c2 <_ZN5Print7printlnEv>
  return n;
}
 808b63e:	4420      	add	r0, r4
 808b640:	b003      	add	sp, #12
 808b642:	bd30      	pop	{r4, r5, pc}

0808b644 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 808b644:	b40c      	push	{r2, r3}
 808b646:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808b64a:	b087      	sub	sp, #28
 808b64c:	af00      	add	r7, sp, #0
 808b64e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 808b652:	f854 9b04 	ldr.w	r9, [r4], #4
 808b656:	4605      	mov	r5, r0
 808b658:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 808b65a:	4623      	mov	r3, r4
 808b65c:	464a      	mov	r2, r9
 808b65e:	2114      	movs	r1, #20
 808b660:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 808b662:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 808b664:	f7ff f938 	bl	808a8d8 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 808b668:	2813      	cmp	r0, #19
 808b66a:	d805      	bhi.n	808b678 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808b66c:	1d39      	adds	r1, r7, #4
 808b66e:	4628      	mov	r0, r5
 808b670:	f7fd f926 	bl	80888c0 <_ZN5Print5writeEPKc>
 808b674:	4604      	mov	r4, r0
 808b676:	e013      	b.n	808b6a0 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 808b678:	f100 0308 	add.w	r3, r0, #8
 808b67c:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 808b680:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 808b682:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 808b686:	1c41      	adds	r1, r0, #1
 808b688:	4623      	mov	r3, r4
 808b68a:	464a      	mov	r2, r9
 808b68c:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 808b68e:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 808b690:	f7ff f922 	bl	808a8d8 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808b694:	4669      	mov	r1, sp
 808b696:	4628      	mov	r0, r5
 808b698:	f7fd f912 	bl	80888c0 <_ZN5Print5writeEPKc>
 808b69c:	4604      	mov	r4, r0
 808b69e:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 808b6a0:	b11e      	cbz	r6, 808b6aa <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 808b6a2:	4628      	mov	r0, r5
 808b6a4:	f7ff fe8d 	bl	808b3c2 <_ZN5Print7printlnEv>
 808b6a8:	4404      	add	r4, r0
    return n;
}
 808b6aa:	4620      	mov	r0, r4
 808b6ac:	371c      	adds	r7, #28
 808b6ae:	46bd      	mov	sp, r7
 808b6b0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808b6b4:	b002      	add	sp, #8
 808b6b6:	4770      	bx	lr

0808b6b8 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
 808b6b8:	b510      	push	{r4, lr}
 808b6ba:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 808b6bc:	f7fe fe90 	bl	808a3e0 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
 808b6c0:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 808b6c2:	6823      	ldr	r3, [r4, #0]
 808b6c4:	4620      	mov	r0, r4
 808b6c6:	695b      	ldr	r3, [r3, #20]
 808b6c8:	4798      	blx	r3
    if (c >= 0) return c;
 808b6ca:	2800      	cmp	r0, #0
 808b6cc:	da08      	bge.n	808b6e0 <_ZN6Stream9timedReadEv+0x28>
 808b6ce:	f7fe fe87 	bl	808a3e0 <HAL_Timer_Get_Milli_Seconds>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
 808b6d2:	68e3      	ldr	r3, [r4, #12]
 808b6d4:	1ac0      	subs	r0, r0, r3
 808b6d6:	68a3      	ldr	r3, [r4, #8]
 808b6d8:	4298      	cmp	r0, r3
 808b6da:	d3f2      	bcc.n	808b6c2 <_ZN6Stream9timedReadEv+0xa>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
 808b6dc:	f04f 30ff 	mov.w	r0, #4294967295
}
 808b6e0:	bd10      	pop	{r4, pc}

0808b6e2 <_ZN6Stream10setTimeoutEm>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(system_tick_t timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
 808b6e2:	6081      	str	r1, [r0, #8]
 808b6e4:	4770      	bx	lr

0808b6e6 <_ZN6Stream9findUntilEPcjS0_j>:

// reads data from the stream until the target string of the given length is found
// search terminated if the terminator string is found
// returns true if target string is found, false if terminated or timed out
bool Stream::findUntil(char *target, size_t targetLen, char *terminator, size_t termLen)
{
 808b6e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808b6ea:	469a      	mov	sl, r3
  size_t index = 0;  // maximum target string length is 64k bytes!
  size_t termIndex = 0;
  int c;

  if( *target == 0)
 808b6ec:	780b      	ldrb	r3, [r1, #0]

// reads data from the stream until the target string of the given length is found
// search terminated if the terminator string is found
// returns true if target string is found, false if terminated or timed out
bool Stream::findUntil(char *target, size_t targetLen, char *terminator, size_t termLen)
{
 808b6ee:	4680      	mov	r8, r0
 808b6f0:	460f      	mov	r7, r1
 808b6f2:	4691      	mov	r9, r2
 808b6f4:	9e08      	ldr	r6, [sp, #32]
  size_t index = 0;  // maximum target string length is 64k bytes!
  size_t termIndex = 0;
  int c;

  if( *target == 0)
 808b6f6:	b19b      	cbz	r3, 808b720 <_ZN6Stream9findUntilEPcjS0_j+0x3a>
 808b6f8:	2400      	movs	r4, #0
 808b6fa:	4625      	mov	r5, r4
 808b6fc:	e001      	b.n	808b702 <_ZN6Stream9findUntilEPcjS0_j+0x1c>
      if(++index >= targetLen){ // return true if all chars in the target match
        return true;
      }
    }

    if(termLen > 0 && c == terminator[termIndex]){
 808b6fe:	b996      	cbnz	r6, 808b726 <_ZN6Stream9findUntilEPcjS0_j+0x40>
      if(++termIndex >= termLen)
        return false;       // return false if terminate string found before target string
    }
    else
      termIndex = 0;
 808b700:	2400      	movs	r4, #0
  size_t termIndex = 0;
  int c;

  if( *target == 0)
    return true;   // return true if target is a null string
  while( (c = timedRead()) > 0){
 808b702:	4640      	mov	r0, r8
 808b704:	f7ff ffd8 	bl	808b6b8 <_ZN6Stream9timedReadEv>
 808b708:	2800      	cmp	r0, #0
 808b70a:	dd13      	ble.n	808b734 <_ZN6Stream9findUntilEPcjS0_j+0x4e>

    if(c != target[index])
 808b70c:	5d7b      	ldrb	r3, [r7, r5]
      index = 0; // reset index if any char does not match
 808b70e:	4298      	cmp	r0, r3
 808b710:	bf18      	it	ne
 808b712:	2500      	movne	r5, #0

    if( c == target[index]){
 808b714:	5d7b      	ldrb	r3, [r7, r5]
 808b716:	4298      	cmp	r0, r3
 808b718:	d1f1      	bne.n	808b6fe <_ZN6Stream9findUntilEPcjS0_j+0x18>
      //////Serial.print("found "); Serial.write(c); Serial.print("index now"); Serial.println(index+1);
      if(++index >= targetLen){ // return true if all chars in the target match
 808b71a:	3501      	adds	r5, #1
 808b71c:	45a9      	cmp	r9, r5
 808b71e:	d8ee      	bhi.n	808b6fe <_ZN6Stream9findUntilEPcjS0_j+0x18>
  size_t index = 0;  // maximum target string length is 64k bytes!
  size_t termIndex = 0;
  int c;

  if( *target == 0)
    return true;   // return true if target is a null string
 808b720:	2001      	movs	r0, #1
 808b722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(++index >= targetLen){ // return true if all chars in the target match
        return true;
      }
    }

    if(termLen > 0 && c == terminator[termIndex]){
 808b726:	f81a 3004 	ldrb.w	r3, [sl, r4]
 808b72a:	4298      	cmp	r0, r3
 808b72c:	d1e8      	bne.n	808b700 <_ZN6Stream9findUntilEPcjS0_j+0x1a>
      if(++termIndex >= termLen)
 808b72e:	3401      	adds	r4, #1
 808b730:	42a6      	cmp	r6, r4
 808b732:	d8e6      	bhi.n	808b702 <_ZN6Stream9findUntilEPcjS0_j+0x1c>
        return false;       // return false if terminate string found before target string
    }
    else
      termIndex = 0;
  }
  return false;
 808b734:	2000      	movs	r0, #0
}
 808b736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0808b73a <_ZN6Stream9findUntilEPcS0_>:
  return findUntil(target, length, NULL, 0);
}

// as find but search ends if the terminator string is found
bool  Stream::findUntil(char *target, char *terminator)
{
 808b73a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 808b73c:	4606      	mov	r6, r0
  return findUntil(target, strlen(target), terminator, strlen(terminator));
 808b73e:	4608      	mov	r0, r1
  return findUntil(target, length, NULL, 0);
}

// as find but search ends if the terminator string is found
bool  Stream::findUntil(char *target, char *terminator)
{
 808b740:	4615      	mov	r5, r2
 808b742:	460c      	mov	r4, r1
  return findUntil(target, strlen(target), terminator, strlen(terminator));
 808b744:	f003 fd66 	bl	808f214 <strlen>
 808b748:	4607      	mov	r7, r0
 808b74a:	4628      	mov	r0, r5
 808b74c:	f003 fd62 	bl	808f214 <strlen>
 808b750:	462b      	mov	r3, r5
 808b752:	9000      	str	r0, [sp, #0]
 808b754:	463a      	mov	r2, r7
 808b756:	4621      	mov	r1, r4
 808b758:	4630      	mov	r0, r6
 808b75a:	f7ff ffc4 	bl	808b6e6 <_ZN6Stream9findUntilEPcjS0_j>
}
 808b75e:	b003      	add	sp, #12
 808b760:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808b762 <_ZN6Stream4findEPc>:
}

 // find returns true if the target string is found
bool  Stream::find(char *target)
{
  return findUntil(target, NULL);
 808b762:	2200      	movs	r2, #0
 808b764:	f7ff bfe9 	b.w	808b73a <_ZN6Stream9findUntilEPcS0_>

0808b768 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
 808b768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808b76c:	4680      	mov	r8, r0
 808b76e:	460d      	mov	r5, r1
 808b770:	460c      	mov	r4, r1
 808b772:	188f      	adds	r7, r1, r2
  size_t count = 0;
  while (count < length) {
 808b774:	42bc      	cmp	r4, r7
 808b776:	eba4 0605 	sub.w	r6, r4, r5
 808b77a:	d007      	beq.n	808b78c <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
 808b77c:	4640      	mov	r0, r8
 808b77e:	f7ff ff9b 	bl	808b6b8 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
 808b782:	2800      	cmp	r0, #0
 808b784:	db02      	blt.n	808b78c <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
 808b786:	f804 0b01 	strb.w	r0, [r4], #1
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
  size_t count = 0;
  while (count < length) {
 808b78a:	e7f3      	b.n	808b774 <_ZN6Stream9readBytesEPcj+0xc>
    if (c < 0) break;
    *buffer++ = (char)c;
    count++;
  }
  return count;
}
 808b78c:	4630      	mov	r0, r6
 808b78e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0808b794 <_ZN6Stream10readStringEv>:
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
 808b794:	b538      	push	{r3, r4, r5, lr}
 808b796:	460d      	mov	r5, r1
  String ret;
 808b798:	4907      	ldr	r1, [pc, #28]	; (808b7b8 <_ZN6Stream10readStringEv+0x24>)
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
 808b79a:	4604      	mov	r4, r0
  String ret;
 808b79c:	f7ff fbf1 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
 808b7a0:	4628      	mov	r0, r5
 808b7a2:	f7ff ff89 	bl	808b6b8 <_ZN6Stream9timedReadEv>
  while (c >= 0)
 808b7a6:	2800      	cmp	r0, #0
 808b7a8:	db04      	blt.n	808b7b4 <_ZN6Stream10readStringEv+0x20>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
 808b7aa:	b2c1      	uxtb	r1, r0
 808b7ac:	4620      	mov	r0, r4
 808b7ae:	f7ff fcd9 	bl	808b164 <_ZN6String6concatEc>
 808b7b2:	e7f5      	b.n	808b7a0 <_ZN6Stream10readStringEv+0xc>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
 808b7b4:	4620      	mov	r0, r4
 808b7b6:	bd38      	pop	{r3, r4, r5, pc}
 808b7b8:	08094100 	.word	0x08094100

0808b7bc <_ZN6Stream15readStringUntilEc>:

String Stream::readStringUntil(char terminator)
{
 808b7bc:	b570      	push	{r4, r5, r6, lr}
 808b7be:	460d      	mov	r5, r1
  String ret;
 808b7c0:	4909      	ldr	r1, [pc, #36]	; (808b7e8 <_ZN6Stream15readStringUntilEc+0x2c>)
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
 808b7c2:	4604      	mov	r4, r0
 808b7c4:	4616      	mov	r6, r2
  String ret;
 808b7c6:	f7ff fbdc 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
 808b7ca:	4628      	mov	r0, r5
 808b7cc:	f7ff ff74 	bl	808b6b8 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
 808b7d0:	2800      	cmp	r0, #0
 808b7d2:	db06      	blt.n	808b7e2 <_ZN6Stream15readStringUntilEc+0x26>
 808b7d4:	42b0      	cmp	r0, r6
 808b7d6:	d004      	beq.n	808b7e2 <_ZN6Stream15readStringUntilEc+0x26>
 808b7d8:	b2c1      	uxtb	r1, r0
 808b7da:	4620      	mov	r0, r4
 808b7dc:	f7ff fcc2 	bl	808b164 <_ZN6String6concatEc>
 808b7e0:	e7f3      	b.n	808b7ca <_ZN6Stream15readStringUntilEc+0xe>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
 808b7e2:	4620      	mov	r0, r4
 808b7e4:	bd70      	pop	{r4, r5, r6, pc}
 808b7e6:	bf00      	nop
 808b7e8:	08094100 	.word	0x08094100

0808b7ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 808b7ec:	680b      	ldr	r3, [r1, #0]
 808b7ee:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 808b7f0:	b113      	cbz	r3, 808b7f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 808b7f2:	685a      	ldr	r2, [r3, #4]
 808b7f4:	3201      	adds	r2, #1
 808b7f6:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 808b7f8:	4770      	bx	lr
	...

0808b7fc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 808b7fc:	4a01      	ldr	r2, [pc, #4]	; (808b804 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 808b7fe:	4b02      	ldr	r3, [pc, #8]	; (808b808 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 808b800:	601a      	str	r2, [r3, #0]
 808b802:	4770      	bx	lr
 808b804:	080941d3 	.word	0x080941d3
 808b808:	20000cf8 	.word	0x20000cf8

0808b80c <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 808b80c:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 808b80e:	4b14      	ldr	r3, [pc, #80]	; (808b860 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 808b810:	4f14      	ldr	r7, [pc, #80]	; (808b864 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 808b812:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 808b814:	4b14      	ldr	r3, [pc, #80]	; (808b868 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 808b816:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 808b818:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 808b81a:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 808b81c:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 808b81e:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 808b820:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 808b822:	d01b      	beq.n	808b85c <_ZL22Refresh_UnixTime_Cachel+0x50>
 808b824:	a80a      	add	r0, sp, #40	; 0x28
 808b826:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 808b82a:	f002 fe49 	bl	808e4c0 <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 808b82e:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 808b830:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 808b832:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 808b834:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 808b838:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 808b83a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 808b83c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 808b83e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 808b840:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 808b842:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 808b846:	4c09      	ldr	r4, [pc, #36]	; (808b86c <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 808b848:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 808b84c:	ad01      	add	r5, sp, #4
 808b84e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 808b850:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 808b852:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 808b854:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 808b856:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 808b858:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 808b85c:	b00b      	add	sp, #44	; 0x2c
 808b85e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808b860:	20000d30 	.word	0x20000d30
 808b864:	20000d2c 	.word	0x20000d2c
 808b868:	20000d28 	.word	0x20000d28
 808b86c:	20000cfc 	.word	0x20000cfc

0808b870 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 808b870:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 808b872:	2000      	movs	r0, #0
 808b874:	f7fe ffd8 	bl	808a828 <spark_sync_time_pending>
 808b878:	b128      	cbz	r0, 808b886 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808b87a:	f7fe ffb5 	bl	808a7e8 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 808b87e:	f080 0001 	eor.w	r0, r0, #1
 808b882:	b2c0      	uxtb	r0, r0
 808b884:	bd08      	pop	{r3, pc}
 808b886:	2001      	movs	r0, #1
    }
 808b888:	bd08      	pop	{r3, pc}
	...

0808b88c <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 808b88c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 808b88e:	f7ff ffbd 	bl	808b80c <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 808b892:	4b02      	ldr	r3, [pc, #8]	; (808b89c <_ZN9TimeClass5monthEl+0x10>)
 808b894:	6918      	ldr	r0, [r3, #16]
}
 808b896:	3001      	adds	r0, #1
 808b898:	bd08      	pop	{r3, pc}
 808b89a:	bf00      	nop
 808b89c:	20000cfc 	.word	0x20000cfc

0808b8a0 <_ZN9TimeClass4zoneEf>:
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 808b8a0:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 808b8a2:	4909      	ldr	r1, [pc, #36]	; (808b8c8 <_ZN9TimeClass4zoneEf+0x28>)
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 808b8a4:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 808b8a6:	f002 fb63 	bl	808df70 <__aeabi_fcmplt>
 808b8aa:	b960      	cbnz	r0, 808b8c6 <_ZN9TimeClass4zoneEf+0x26>
 808b8ac:	4907      	ldr	r1, [pc, #28]	; (808b8cc <_ZN9TimeClass4zoneEf+0x2c>)
 808b8ae:	4620      	mov	r0, r4
 808b8b0:	f002 fb7c 	bl	808dfac <__aeabi_fcmpgt>
 808b8b4:	b938      	cbnz	r0, 808b8c6 <_ZN9TimeClass4zoneEf+0x26>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 808b8b6:	4906      	ldr	r1, [pc, #24]	; (808b8d0 <_ZN9TimeClass4zoneEf+0x30>)
 808b8b8:	4620      	mov	r0, r4
 808b8ba:	f002 f9bb 	bl	808dc34 <__aeabi_fmul>
 808b8be:	f002 fb7f 	bl	808dfc0 <__aeabi_f2iz>
 808b8c2:	4b04      	ldr	r3, [pc, #16]	; (808b8d4 <_ZN9TimeClass4zoneEf+0x34>)
 808b8c4:	6018      	str	r0, [r3, #0]
 808b8c6:	bd10      	pop	{r4, pc}
 808b8c8:	c1400000 	.word	0xc1400000
 808b8cc:	41600000 	.word	0x41600000
 808b8d0:	45610000 	.word	0x45610000
 808b8d4:	20000d30 	.word	0x20000d30

0808b8d8 <_ZN9TimeClass7setTimeEl>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
 808b8d8:	b508      	push	{r3, lr}
    HAL_RTC_Set_UnixTime(t);
 808b8da:	f7fe fd91 	bl	808a400 <HAL_RTC_Set_UnixTime>
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}
 808b8de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
    HAL_RTC_Set_UnixTime(t);
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
 808b8e2:	2200      	movs	r2, #0
 808b8e4:	4611      	mov	r1, r2
 808b8e6:	4610      	mov	r0, r2
 808b8e8:	f7fe befa 	b.w	808a6e0 <system_notify_time_changed>

0808b8ec <_ZN9TimeClass7timeStrEl>:
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 808b8ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 808b8ee:	4b0e      	ldr	r3, [pc, #56]	; (808b928 <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 808b8f0:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 808b8f2:	681b      	ldr	r3, [r3, #0]
 808b8f4:	a802      	add	r0, sp, #8
 808b8f6:	4419      	add	r1, r3
 808b8f8:	4b0c      	ldr	r3, [pc, #48]	; (808b92c <_ZN9TimeClass7timeStrEl+0x40>)
 808b8fa:	681b      	ldr	r3, [r3, #0]
 808b8fc:	4419      	add	r1, r3
 808b8fe:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 808b902:	f002 fddd 	bl	808e4c0 <localtime>
        char* ascstr = asctime(calendar_time);
 808b906:	f002 fd85 	bl	808e414 <asctime>
 808b90a:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 808b90c:	f003 fc82 	bl	808f214 <strlen>
        ascstr[len-1] = 0; // remove final newline
 808b910:	2300      	movs	r3, #0
 808b912:	4428      	add	r0, r5
 808b914:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 808b918:	4629      	mov	r1, r5
 808b91a:	4620      	mov	r0, r4
 808b91c:	f7ff fb31 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
}
 808b920:	4620      	mov	r0, r4
 808b922:	b003      	add	sp, #12
 808b924:	bd30      	pop	{r4, r5, pc}
 808b926:	bf00      	nop
 808b928:	20000d30 	.word	0x20000d30
 808b92c:	20000d28 	.word	0x20000d28

0808b930 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 808b930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808b934:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    strcpy(format_str, format);
 808b936:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 808b938:	4607      	mov	r7, r0
 808b93a:	4689      	mov	r9, r1
    char format_str[64];
    strcpy(format_str, format);
 808b93c:	4620      	mov	r0, r4
 808b93e:	4611      	mov	r1, r2
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 808b940:	461d      	mov	r5, r3
    char format_str[64];
    strcpy(format_str, format);
 808b942:	f002 ff2f 	bl	808e7a4 <strcpy>
    size_t len = strlen(format_str);
 808b946:	4620      	mov	r0, r4
 808b948:	f003 fc64 	bl	808f214 <strlen>
 808b94c:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 808b94e:	b925      	cbnz	r5, 808b95a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2a>
        strcpy(time_zone_str, "Z");
 808b950:	4924      	ldr	r1, [pc, #144]	; (808b9e4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb4>)
 808b952:	a803      	add	r0, sp, #12
 808b954:	f002 ff26 	bl	808e7a4 <strcpy>
 808b958:	e013      	b.n	808b982 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x52>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 808b95a:	213c      	movs	r1, #60	; 0x3c
 808b95c:	fb95 f2f1 	sdiv	r2, r5, r1
 808b960:	2a00      	cmp	r2, #0
 808b962:	bfb8      	it	lt
 808b964:	4252      	neglt	r2, r2
 808b966:	fb92 f3f1 	sdiv	r3, r2, r1
 808b96a:	fb01 2213 	mls	r2, r1, r3, r2
 808b96e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808b972:	9200      	str	r2, [sp, #0]
 808b974:	fb95 f3f3 	sdiv	r3, r5, r3
 808b978:	4a1b      	ldr	r2, [pc, #108]	; (808b9e8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb8>)
 808b97a:	2110      	movs	r1, #16
 808b97c:	a803      	add	r0, sp, #12
 808b97e:	f7fe ff9b 	bl	808a8b8 <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 808b982:	4625      	mov	r5, r4
 808b984:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 808b986:	f108 3aff 	add.w	sl, r8, #4294967295
 808b98a:	45b2      	cmp	sl, r6
 808b98c:	d91b      	bls.n	808b9c6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x96>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 808b98e:	782b      	ldrb	r3, [r5, #0]
 808b990:	2b25      	cmp	r3, #37	; 0x25
 808b992:	d116      	bne.n	808b9c2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
 808b994:	786b      	ldrb	r3, [r5, #1]
 808b996:	2b7a      	cmp	r3, #122	; 0x7a
 808b998:	d113      	bne.n	808b9c2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
        {
            size_t tzlen = strlen(time_zone_str);
 808b99a:	a803      	add	r0, sp, #12
 808b99c:	f003 fc3a 	bl	808f214 <strlen>
 808b9a0:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 808b9a2:	4430      	add	r0, r6
 808b9a4:	ebc6 020a 	rsb	r2, r6, sl
 808b9a8:	1ca9      	adds	r1, r5, #2
 808b9aa:	4420      	add	r0, r4
 808b9ac:	f002 fea7 	bl	808e6fe <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 808b9b0:	4642      	mov	r2, r8
 808b9b2:	a903      	add	r1, sp, #12
 808b9b4:	4628      	mov	r0, r5
 808b9b6:	f002 fea2 	bl	808e6fe <memcpy>
            len = strlen(format_str);
 808b9ba:	4620      	mov	r0, r4
 808b9bc:	f003 fc2a 	bl	808f214 <strlen>
 808b9c0:	4680      	mov	r8, r0
 808b9c2:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 808b9c4:	e7de      	b.n	808b984 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x54>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
 808b9c6:	464b      	mov	r3, r9
 808b9c8:	4622      	mov	r2, r4
 808b9ca:	2132      	movs	r1, #50	; 0x32
 808b9cc:	a807      	add	r0, sp, #28
 808b9ce:	f002 ff6d 	bl	808e8ac <strftime>
    return String(buf);
 808b9d2:	a907      	add	r1, sp, #28
 808b9d4:	4638      	mov	r0, r7
 808b9d6:	f7ff fad4 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
}
 808b9da:	4638      	mov	r0, r7
 808b9dc:	b024      	add	sp, #144	; 0x90
 808b9de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808b9e2:	bf00      	nop
 808b9e4:	080930b1 	.word	0x080930b1
 808b9e8:	08094239 	.word	0x08094239

0808b9ec <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
 808b9ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 808b9ee:	4605      	mov	r5, r0
 808b9f0:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
 808b9f2:	461c      	mov	r4, r3
 808b9f4:	b913      	cbnz	r3, 808b9fc <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
 808b9f6:	4b12      	ldr	r3, [pc, #72]	; (808ba40 <_ZN9TimeClass6formatElPKc+0x54>)
 808b9f8:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
 808b9fa:	b12c      	cbz	r4, 808ba08 <_ZN9TimeClass6formatElPKc+0x1c>
 808b9fc:	4b11      	ldr	r3, [pc, #68]	; (808ba44 <_ZN9TimeClass6formatElPKc+0x58>)
 808b9fe:	4620      	mov	r0, r4
 808ba00:	6819      	ldr	r1, [r3, #0]
 808ba02:	f002 fec5 	bl	808e790 <strcmp>
 808ba06:	b920      	cbnz	r0, 808ba12 <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
 808ba08:	9901      	ldr	r1, [sp, #4]
 808ba0a:	4628      	mov	r0, r5
 808ba0c:	f7ff ff6e 	bl	808b8ec <_ZN9TimeClass7timeStrEl>
 808ba10:	e013      	b.n	808ba3a <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
 808ba12:	4f0d      	ldr	r7, [pc, #52]	; (808ba48 <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
 808ba14:	9a01      	ldr	r2, [sp, #4]
 808ba16:	683b      	ldr	r3, [r7, #0]
 808ba18:	4e0c      	ldr	r6, [pc, #48]	; (808ba4c <_ZN9TimeClass6formatElPKc+0x60>)
 808ba1a:	441a      	add	r2, r3
 808ba1c:	6833      	ldr	r3, [r6, #0]
 808ba1e:	a802      	add	r0, sp, #8
 808ba20:	4413      	add	r3, r2
 808ba22:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
 808ba26:	f002 fd4b 	bl	808e4c0 <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
 808ba2a:	683a      	ldr	r2, [r7, #0]
 808ba2c:	6833      	ldr	r3, [r6, #0]
 808ba2e:	4601      	mov	r1, r0
 808ba30:	4413      	add	r3, r2
 808ba32:	4628      	mov	r0, r5
 808ba34:	4622      	mov	r2, r4
 808ba36:	f7ff ff7b 	bl	808b930 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
 808ba3a:	4628      	mov	r0, r5
 808ba3c:	b003      	add	sp, #12
 808ba3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808ba40:	20000d24 	.word	0x20000d24
 808ba44:	200000e0 	.word	0x200000e0
 808ba48:	20000d30 	.word	0x20000d30
 808ba4c:	20000d28 	.word	0x20000d28

0808ba50 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 808ba50:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 808ba52:	2000      	movs	r0, #0
 808ba54:	f7fe fcf4 	bl	808a440 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 808ba58:	4604      	mov	r4, r0
 808ba5a:	b968      	cbnz	r0, 808ba78 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 808ba5c:	f7fe fe00 	bl	808a660 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 808ba60:	2801      	cmp	r0, #1
 808ba62:	d10b      	bne.n	808ba7c <_ZN9TimeClass7isValidEv+0x2c>
 808ba64:	4620      	mov	r0, r4
 808ba66:	f7fe fe33 	bl	808a6d0 <system_thread_get_state>
 808ba6a:	b938      	cbnz	r0, 808ba7c <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 808ba6c:	f7ff ff00 	bl	808b870 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 808ba70:	b930      	cbnz	r0, 808ba80 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 808ba72:	f7fe fea9 	bl	808a7c8 <spark_process>
 808ba76:	e7f9      	b.n	808ba6c <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 808ba78:	2001      	movs	r0, #1
 808ba7a:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 808ba7c:	2000      	movs	r0, #0
 808ba7e:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 808ba80:	f7ff fef6 	bl	808b870 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 808ba84:	2000      	movs	r0, #0
 808ba86:	f7fe fcdb 	bl	808a440 <HAL_RTC_Time_Is_Valid>
 808ba8a:	3000      	adds	r0, #0
 808ba8c:	bf18      	it	ne
 808ba8e:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 808ba90:	bd10      	pop	{r4, pc}

0808ba92 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 808ba92:	b508      	push	{r3, lr}
    (void)isValid();
 808ba94:	f7ff ffdc 	bl	808ba50 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 808ba98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 808ba9c:	f7fe bca8 	b.w	808a3f0 <HAL_RTC_Get_UnixTime>

0808baa0 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
 808baa0:	b508      	push	{r3, lr}
	return hour(now());
 808baa2:	f7ff fff6 	bl	808ba92 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
 808baa6:	f7ff feb1 	bl	808b80c <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
 808baaa:	4b01      	ldr	r3, [pc, #4]	; (808bab0 <_ZN9TimeClass4hourEv+0x10>)
 808baac:	6898      	ldr	r0, [r3, #8]
 808baae:	bd08      	pop	{r3, pc}
 808bab0:	20000cfc 	.word	0x20000cfc

0808bab4 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
 808bab4:	b508      	push	{r3, lr}
	return minute(now());
 808bab6:	f7ff ffec 	bl	808ba92 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
 808baba:	f7ff fea7 	bl	808b80c <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
 808babe:	4b01      	ldr	r3, [pc, #4]	; (808bac4 <_ZN9TimeClass6minuteEv+0x10>)
 808bac0:	6858      	ldr	r0, [r3, #4]
 808bac2:	bd08      	pop	{r3, pc}
 808bac4:	20000cfc 	.word	0x20000cfc

0808bac8 <_ZN9TimeClass6secondEv>:
	return calendar_time_cache.tm_min;
}

/* current seconds */
int TimeClass::second()
{
 808bac8:	b508      	push	{r3, lr}
	return second(now());
 808baca:	f7ff ffe2 	bl	808ba92 <_ZN9TimeClass3nowEv>
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
	Refresh_UnixTime_Cache(t);
 808bace:	f7ff fe9d 	bl	808b80c <_ZL22Refresh_UnixTime_Cachel>

/* current seconds */
int TimeClass::second()
{
	return second(now());
}
 808bad2:	4b01      	ldr	r3, [pc, #4]	; (808bad8 <_ZN9TimeClass6secondEv+0x10>)
 808bad4:	6818      	ldr	r0, [r3, #0]
 808bad6:	bd08      	pop	{r3, pc}
 808bad8:	20000cfc 	.word	0x20000cfc

0808badc <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
 808badc:	b508      	push	{r3, lr}
	return day(now());
 808bade:	f7ff ffd8 	bl	808ba92 <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
 808bae2:	f7ff fe93 	bl	808b80c <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
 808bae6:	4b01      	ldr	r3, [pc, #4]	; (808baec <_ZN9TimeClass3dayEv+0x10>)
 808bae8:	68d8      	ldr	r0, [r3, #12]
 808baea:	bd08      	pop	{r3, pc}
 808baec:	20000cfc 	.word	0x20000cfc

0808baf0 <_ZN9TimeClass5monthEv>:
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
}

/* current month */
int TimeClass::month()
{
 808baf0:	b508      	push	{r3, lr}
	return month(now());
 808baf2:	f7ff ffce 	bl	808ba92 <_ZN9TimeClass3nowEv>
}
 808baf6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current month */
int TimeClass::month()
{
	return month(now());
 808bafa:	f7ff bec7 	b.w	808b88c <_ZN9TimeClass5monthEl>
	...

0808bb00 <_ZN9TimeClass4yearEv>:
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
}

/* current four digit year */
int TimeClass::year()
{
 808bb00:	b508      	push	{r3, lr}
	return year(now());
 808bb02:	f7ff ffc6 	bl	808ba92 <_ZN9TimeClass3nowEv>
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
	Refresh_UnixTime_Cache(t);
 808bb06:	f7ff fe81 	bl	808b80c <_ZL22Refresh_UnixTime_Cachel>

/* current four digit year */
int TimeClass::year()
{
	return year(now());
}
 808bb0a:	4b01      	ldr	r3, [pc, #4]	; (808bb10 <_ZN9TimeClass4yearEv+0x10>)
 808bb0c:	6958      	ldr	r0, [r3, #20]
 808bb0e:	bd08      	pop	{r3, pc}
 808bb10:	20000cfc 	.word	0x20000cfc

0808bb14 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 808bb14:	4b02      	ldr	r3, [pc, #8]	; (808bb20 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 808bb16:	681a      	ldr	r2, [r3, #0]
 808bb18:	4b02      	ldr	r3, [pc, #8]	; (808bb24 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 808bb1a:	601a      	str	r2, [r3, #0]
 808bb1c:	4770      	bx	lr
 808bb1e:	bf00      	nop
 808bb20:	200000e0 	.word	0x200000e0
 808bb24:	20000d24 	.word	0x20000d24

0808bb28 <setADCSampleTime>:
 *
 * @retval None
 */
void setADCSampleTime(uint8_t ADC_SampleTime)
{
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
 808bb28:	f7fe bbea 	b.w	808a300 <HAL_ADC_Set_Sample_Time>

0808bb2c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 808bb2c:	2100      	movs	r1, #0
 808bb2e:	f7fe bda7 	b.w	808a680 <system_delay_ms>

0808bb32 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 808bb32:	b510      	push	{r4, lr}
 808bb34:	4604      	mov	r4, r0
 808bb36:	f7fd fcdd 	bl	80894f4 <_ZNSt14_Function_baseD1Ev>
 808bb3a:	4620      	mov	r0, r4
 808bb3c:	bd10      	pop	{r4, pc}

0808bb3e <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 808bb3e:	b513      	push	{r0, r1, r4, lr}
 808bb40:	460b      	mov	r3, r1
 808bb42:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808bb44:	c803      	ldmia	r0, {r0, r1}
 808bb46:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 808bb4a:	e893 0003 	ldmia.w	r3, {r0, r1}
 808bb4e:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 808bb52:	e89d 0003 	ldmia.w	sp, {r0, r1}
 808bb56:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 808bb5a:	b002      	add	sp, #8
 808bb5c:	bd10      	pop	{r4, pc}
	...

0808bb60 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808bb60:	4803      	ldr	r0, [pc, #12]	; (808bb70 <_GLOBAL__sub_I_RGB+0x10>)
 808bb62:	2300      	movs	r3, #0
 808bb64:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 808bb66:	4a03      	ldr	r2, [pc, #12]	; (808bb74 <_GLOBAL__sub_I_RGB+0x14>)
 808bb68:	4903      	ldr	r1, [pc, #12]	; (808bb78 <_GLOBAL__sub_I_RGB+0x18>)
 808bb6a:	f001 b903 	b.w	808cd74 <__aeabi_atexit>
 808bb6e:	bf00      	nop
 808bb70:	20000d34 	.word	0x20000d34
 808bb74:	200001d0 	.word	0x200001d0
 808bb78:	0808bb33 	.word	0x0808bb33

0808bb7c <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
 808bb7c:	6800      	ldr	r0, [r0, #0]
 808bb7e:	f000 be9d 	b.w	808c8bc <_ZN7TwoWire4lockEv>

0808bb82 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 808bb82:	b510      	push	{r4, lr}
 808bb84:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
 808bb86:	6001      	str	r1, [r0, #0]
 808bb88:	7102      	strb	r2, [r0, #4]

    if (lock_) {
 808bb8a:	b10a      	cbz	r2, 808bb90 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 808bb8c:	f7ff fff6 	bl	808bb7c <_ZN9FuelGauge4lockEv>
    }
}
 808bb90:	4620      	mov	r0, r4
 808bb92:	bd10      	pop	{r4, pc}

0808bb94 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
 808bb94:	b538      	push	{r3, r4, r5, lr}
 808bb96:	4604      	mov	r4, r0
 808bb98:	460d      	mov	r5, r1
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808bb9a:	f001 f8cb 	bl	808cd34 <_Z20__fetch_global_Wire3v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
 808bb9e:	462a      	mov	r2, r5
 808bba0:	4601      	mov	r1, r0
 808bba2:	4620      	mov	r0, r4
 808bba4:	f7ff ffed 	bl	808bb82 <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
 808bba8:	4620      	mov	r0, r4
 808bbaa:	bd38      	pop	{r3, r4, r5, pc}

0808bbac <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
 808bbac:	6800      	ldr	r0, [r0, #0]
 808bbae:	f000 be8e 	b.w	808c8ce <_ZN7TwoWire6unlockEv>

0808bbb2 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 808bbb2:	b510      	push	{r4, lr}
{
    if (lock_) {
 808bbb4:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 808bbb6:	4604      	mov	r4, r0
{
    if (lock_) {
 808bbb8:	b10b      	cbz	r3, 808bbbe <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 808bbba:	f7ff fff7 	bl	808bbac <_ZN9FuelGauge6unlockEv>
    }
}
 808bbbe:	4620      	mov	r0, r4
 808bbc0:	bd10      	pop	{r4, pc}

0808bbc2 <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 808bbc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808bbc4:	4604      	mov	r4, r0
 808bbc6:	460f      	mov	r7, r1
 808bbc8:	4616      	mov	r6, r2
 808bbca:	461d      	mov	r5, r3
 808bbcc:	f7ff ffd6 	bl	808bb7c <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
 808bbd0:	6820      	ldr	r0, [r4, #0]
 808bbd2:	2136      	movs	r1, #54	; 0x36
 808bbd4:	f000 fe64 	bl	808c8a0 <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
 808bbd8:	6820      	ldr	r0, [r4, #0]
 808bbda:	4639      	mov	r1, r7
 808bbdc:	6803      	ldr	r3, [r0, #0]
 808bbde:	689b      	ldr	r3, [r3, #8]
 808bbe0:	4798      	blx	r3
    i2c_.endTransmission(true);
 808bbe2:	2101      	movs	r1, #1
 808bbe4:	6820      	ldr	r0, [r4, #0]
 808bbe6:	f000 fe5e 	bl	808c8a6 <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
 808bbea:	2202      	movs	r2, #2
 808bbec:	2136      	movs	r1, #54	; 0x36
 808bbee:	2301      	movs	r3, #1
 808bbf0:	6820      	ldr	r0, [r4, #0]
 808bbf2:	f000 fe4c 	bl	808c88e <_ZN7TwoWire11requestFromEiii>
    MSB = i2c_.read();
 808bbf6:	6820      	ldr	r0, [r4, #0]
 808bbf8:	6803      	ldr	r3, [r0, #0]
 808bbfa:	695b      	ldr	r3, [r3, #20]
 808bbfc:	4798      	blx	r3
 808bbfe:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
 808bc00:	6820      	ldr	r0, [r4, #0]
 808bc02:	6803      	ldr	r3, [r0, #0]
 808bc04:	695b      	ldr	r3, [r3, #20]
 808bc06:	4798      	blx	r3
 808bc08:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
 808bc0a:	4620      	mov	r0, r4
}
 808bc0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 808bc10:	f7ff bfcc 	b.w	808bbac <_ZN9FuelGauge6unlockEv>

0808bc14 <_ZN9FuelGauge6getSoCEv>:
	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
 808bc14:	b513      	push	{r0, r1, r4, lr}

	byte MSB = 0;
 808bc16:	2200      	movs	r2, #0
	byte LSB = 0;
 808bc18:	ab02      	add	r3, sp, #8
 808bc1a:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
 808bc1e:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
 808bc22:	2104      	movs	r1, #4
 808bc24:	f10d 0206 	add.w	r2, sp, #6
 808bc28:	f7ff ffcb 	bl	808bbc2 <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
 808bc2c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 808bc30:	f001 fb44 	bl	808d2bc <__aeabi_i2d>
 808bc34:	2200      	movs	r2, #0
 808bc36:	4b08      	ldr	r3, [pc, #32]	; (808bc58 <_ZN9FuelGauge6getSoCEv+0x44>)
 808bc38:	f001 fba6 	bl	808d388 <__aeabi_dmul>
 808bc3c:	f001 fe9c 	bl	808d978 <__aeabi_d2f>
 808bc40:	4604      	mov	r4, r0
 808bc42:	f89d 0006 	ldrb.w	r0, [sp, #6]
 808bc46:	f001 ffa1 	bl	808db8c <__aeabi_i2f>
 808bc4a:	4601      	mov	r1, r0
 808bc4c:	4620      	mov	r0, r4
 808bc4e:	f001 fee9 	bl	808da24 <__addsf3>
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
 808bc52:	b002      	add	sp, #8
 808bc54:	bd10      	pop	{r4, pc}
 808bc56:	bf00      	nop
 808bc58:	3f700000 	.word	0x3f700000

0808bc5c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 808bc5c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 808bc5e:	4b18      	ldr	r3, [pc, #96]	; (808bcc0 <serialEventRun+0x64>)
 808bc60:	b133      	cbz	r3, 808bc70 <serialEventRun+0x14>
 808bc62:	f000 fc61 	bl	808c528 <_Z16_fetch_usbserialv>
 808bc66:	6803      	ldr	r3, [r0, #0]
 808bc68:	691b      	ldr	r3, [r3, #16]
 808bc6a:	4798      	blx	r3
 808bc6c:	2800      	cmp	r0, #0
 808bc6e:	dc1e      	bgt.n	808bcae <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 808bc70:	4b14      	ldr	r3, [pc, #80]	; (808bcc4 <serialEventRun+0x68>)
 808bc72:	b133      	cbz	r3, 808bc82 <serialEventRun+0x26>
 808bc74:	f000 fd7c 	bl	808c770 <_Z22__fetch_global_Serial1v>
 808bc78:	6803      	ldr	r3, [r0, #0]
 808bc7a:	691b      	ldr	r3, [r3, #16]
 808bc7c:	4798      	blx	r3
 808bc7e:	2800      	cmp	r0, #0
 808bc80:	dc18      	bgt.n	808bcb4 <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 808bc82:	4b11      	ldr	r3, [pc, #68]	; (808bcc8 <serialEventRun+0x6c>)
 808bc84:	b10b      	cbz	r3, 808bc8a <serialEventRun+0x2e>
 808bc86:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 808bc8a:	4b10      	ldr	r3, [pc, #64]	; (808bccc <serialEventRun+0x70>)
 808bc8c:	b10b      	cbz	r3, 808bc92 <serialEventRun+0x36>
 808bc8e:	f7f5 f8c9 	bl	8080e24 <_Z15serialEventRun4v>
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 808bc92:	4b0f      	ldr	r3, [pc, #60]	; (808bcd0 <serialEventRun+0x74>)
 808bc94:	b10b      	cbz	r3, 808bc9a <serialEventRun+0x3e>
 808bc96:	f7f5 f8ff 	bl	8080e98 <_Z15serialEventRun5v>
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 808bc9a:	4b0e      	ldr	r3, [pc, #56]	; (808bcd4 <serialEventRun+0x78>)
 808bc9c:	b17b      	cbz	r3, 808bcbe <serialEventRun+0x62>
 808bc9e:	f000 fc7f 	bl	808c5a0 <_Z17_fetch_usbserial1v>
 808bca2:	6803      	ldr	r3, [r0, #0]
 808bca4:	691b      	ldr	r3, [r3, #16]
 808bca6:	4798      	blx	r3
 808bca8:	2800      	cmp	r0, #0
 808bcaa:	dc06      	bgt.n	808bcba <serialEventRun+0x5e>
 808bcac:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 808bcae:	f3af 8000 	nop.w
 808bcb2:	e7dd      	b.n	808bc70 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 808bcb4:	f3af 8000 	nop.w
 808bcb8:	e7e3      	b.n	808bc82 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 808bcba:	f3af 8000 	nop.w
 808bcbe:	bd08      	pop	{r3, pc}
	...
 808bccc:	08080e25 	.word	0x08080e25
 808bcd0:	08080e99 	.word	0x08080e99
 808bcd4:	00000000 	.word	0x00000000

0808bcd8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 808bcd8:	b508      	push	{r3, lr}
	serialEventRun();
 808bcda:	f7ff ffbf 	bl	808bc5c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 808bcde:	f7fe fb7f 	bl	808a3e0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 808bce2:	4b01      	ldr	r3, [pc, #4]	; (808bce8 <_post_loop+0x10>)
 808bce4:	6018      	str	r0, [r3, #0]
 808bce6:	bd08      	pop	{r3, pc}
 808bce8:	20001210 	.word	0x20001210

0808bcec <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 808bcec:	4802      	ldr	r0, [pc, #8]	; (808bcf8 <_Z33system_initialize_user_backup_ramv+0xc>)
 808bcee:	4a03      	ldr	r2, [pc, #12]	; (808bcfc <_Z33system_initialize_user_backup_ramv+0x10>)
 808bcf0:	4903      	ldr	r1, [pc, #12]	; (808bd00 <_Z33system_initialize_user_backup_ramv+0x14>)
 808bcf2:	1a12      	subs	r2, r2, r0
 808bcf4:	f002 bd03 	b.w	808e6fe <memcpy>
 808bcf8:	40024000 	.word	0x40024000
 808bcfc:	40024004 	.word	0x40024004
 808bd00:	08094ad8 	.word	0x08094ad8

0808bd04 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 808bd04:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 808bd06:	2300      	movs	r3, #0
 808bd08:	9300      	str	r3, [sp, #0]
 808bd0a:	461a      	mov	r2, r3
 808bd0c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 808bd10:	f7fe fcf8 	bl	808a704 <system_ctrl_set_result>
}
 808bd14:	b003      	add	sp, #12
 808bd16:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0808bd1c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 808bd1c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 808bd1e:	8843      	ldrh	r3, [r0, #2]
 808bd20:	2b0a      	cmp	r3, #10
 808bd22:	d008      	beq.n	808bd36 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 808bd24:	2b50      	cmp	r3, #80	; 0x50
 808bd26:	d109      	bne.n	808bd3c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 808bd28:	4b09      	ldr	r3, [pc, #36]	; (808bd50 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 808bd2a:	681b      	ldr	r3, [r3, #0]
 808bd2c:	b13b      	cbz	r3, 808bd3e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 808bd2e:	b003      	add	sp, #12
 808bd30:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 808bd34:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 808bd36:	f7ff ffe5 	bl	808bd04 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 808bd3a:	e006      	b.n	808bd4a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 808bd3c:	2300      	movs	r3, #0
 808bd3e:	9300      	str	r3, [sp, #0]
 808bd40:	461a      	mov	r2, r3
 808bd42:	f06f 0177 	mvn.w	r1, #119	; 0x77
 808bd46:	f7fe fcdd 	bl	808a704 <system_ctrl_set_result>
        break;
    }
}
 808bd4a:	b003      	add	sp, #12
 808bd4c:	f85d fb04 	ldr.w	pc, [sp], #4
 808bd50:	20000d44 	.word	0x20000d44

0808bd54 <module_user_init_hook>:

void module_user_init_hook()
{
 808bd54:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 808bd56:	4c10      	ldr	r4, [pc, #64]	; (808bd98 <module_user_init_hook+0x44>)
 808bd58:	4d10      	ldr	r5, [pc, #64]	; (808bd9c <module_user_init_hook+0x48>)
 808bd5a:	6823      	ldr	r3, [r4, #0]
 808bd5c:	42ab      	cmp	r3, r5
 808bd5e:	4b10      	ldr	r3, [pc, #64]	; (808bda0 <module_user_init_hook+0x4c>)
 808bd60:	bf0c      	ite	eq
 808bd62:	2201      	moveq	r2, #1
 808bd64:	2200      	movne	r2, #0
 808bd66:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 808bd68:	d002      	beq.n	808bd70 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 808bd6a:	f7ff ffbf 	bl	808bcec <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 808bd6e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 808bd70:	f7fe fb26 	bl	808a3c0 <HAL_RNG_GetRandomNumber>
 808bd74:	4604      	mov	r4, r0
    srand(seed);
 808bd76:	f002 fcd5 	bl	808e724 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 808bd7a:	4b0a      	ldr	r3, [pc, #40]	; (808bda4 <module_user_init_hook+0x50>)
 808bd7c:	b113      	cbz	r3, 808bd84 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 808bd7e:	4620      	mov	r0, r4
 808bd80:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 808bd84:	2100      	movs	r1, #0
 808bd86:	4807      	ldr	r0, [pc, #28]	; (808bda4 <module_user_init_hook+0x50>)
 808bd88:	f7fe fd56 	bl	808a838 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 808bd8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 808bd90:	2100      	movs	r1, #0
 808bd92:	4805      	ldr	r0, [pc, #20]	; (808bda8 <module_user_init_hook+0x54>)
 808bd94:	f7fe bcac 	b.w	808a6f0 <system_ctrl_set_app_request_handler>
 808bd98:	40024000 	.word	0x40024000
 808bd9c:	9a271c1e 	.word	0x9a271c1e
 808bda0:	20000d48 	.word	0x20000d48
 808bda4:	00000000 	.word	0x00000000
 808bda8:	0808bd1d 	.word	0x0808bd1d

0808bdac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 808bdac:	4770      	bx	lr

0808bdae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 808bdae:	2000      	movs	r0, #0
 808bdb0:	4770      	bx	lr

0808bdb2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 808bdb2:	b510      	push	{r4, lr}
 808bdb4:	4604      	mov	r4, r0
 808bdb6:	2110      	movs	r1, #16
 808bdb8:	f000 ffe1 	bl	808cd7e <_ZdlPvj>
 808bdbc:	4620      	mov	r0, r4
 808bdbe:	bd10      	pop	{r4, pc}

0808bdc0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 808bdc0:	b508      	push	{r3, lr}
      { delete this; }
 808bdc2:	b108      	cbz	r0, 808bdc8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 808bdc4:	f7ff fff5 	bl	808bdb2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 808bdc8:	bd08      	pop	{r3, pc}

0808bdca <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 808bdca:	2200      	movs	r2, #0
 808bdcc:	6002      	str	r2, [r0, #0]
 808bdce:	f64f 729c 	movw	r2, #65436	; 0xff9c
 808bdd2:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 808bdd4:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808bdd6:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 808bdda:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 808bddc:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808bdde:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 808bde0:	680c      	ldr	r4, [r1, #0]
 808bde2:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 808bde4:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 808bde6:	bd10      	pop	{r4, pc}

0808bde8 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 808bde8:	b510      	push	{r4, lr}
 808bdea:	4604      	mov	r4, r0
    free((void*)msg_);
 808bdec:	6800      	ldr	r0, [r0, #0]
 808bdee:	f7fe fd33 	bl	808a858 <free>
}
 808bdf2:	4620      	mov	r0, r4
 808bdf4:	bd10      	pop	{r4, pc}

0808bdf6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 808bdf6:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 808bdf8:	68c4      	ldr	r4, [r0, #12]
 808bdfa:	b1f4      	cbz	r4, 808be3a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 808bdfc:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 808bdfe:	2b02      	cmp	r3, #2
 808be00:	d103      	bne.n	808be0a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 808be02:	f104 000c 	add.w	r0, r4, #12
 808be06:	f7ff ffef 	bl	808bde8 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 808be0a:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 808be0c:	b135      	cbz	r5, 808be1c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808be0e:	4628      	mov	r0, r5
 808be10:	f7fd fb70 	bl	80894f4 <_ZNSt14_Function_baseD1Ev>
 808be14:	2110      	movs	r1, #16
 808be16:	4628      	mov	r0, r5
 808be18:	f000 ffb1 	bl	808cd7e <_ZdlPvj>
 808be1c:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 808be1e:	b135      	cbz	r5, 808be2e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 808be20:	4628      	mov	r0, r5
 808be22:	f7fd fb67 	bl	80894f4 <_ZNSt14_Function_baseD1Ev>
 808be26:	2110      	movs	r1, #16
 808be28:	4628      	mov	r0, r5
 808be2a:	f000 ffa8 	bl	808cd7e <_ZdlPvj>
 808be2e:	4620      	mov	r0, r4
 808be30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808be34:	2114      	movs	r1, #20
 808be36:	f000 bfa2 	b.w	808cd7e <_ZdlPvj>
 808be3a:	bd38      	pop	{r3, r4, r5, pc}

0808be3c <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 808be3c:	b510      	push	{r4, lr}
 808be3e:	b088      	sub	sp, #32
 808be40:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 808be42:	4668      	mov	r0, sp
 808be44:	f7ff f89d 	bl	808af82 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 808be48:	4669      	mov	r1, sp
 808be4a:	a804      	add	r0, sp, #16
 808be4c:	f7ff f8d8 	bl	808b000 <_ZN6StringC1ERKS_>
 808be50:	a804      	add	r0, sp, #16
 808be52:	47a0      	blx	r4
 808be54:	4604      	mov	r4, r0
 808be56:	a804      	add	r0, sp, #16
 808be58:	f7ff f84c 	bl	808aef4 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 808be5c:	4668      	mov	r0, sp
 808be5e:	f7ff f849 	bl	808aef4 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 808be62:	4620      	mov	r0, r4
 808be64:	b008      	add	sp, #32
 808be66:	bd10      	pop	{r4, pc}

0808be68 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_>:
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
}

void CloudClass::call_wiring_event_handler(const void* handler_data, const char *event_name, const char *data)
{
 808be68:	b507      	push	{r0, r1, r2, lr}
 808be6a:	e88d 0006 	stmia.w	sp, {r1, r2}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808be6e:	6882      	ldr	r2, [r0, #8]
 808be70:	b90a      	cbnz	r2, 808be76 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_+0xe>
	__throw_bad_function_call();
 808be72:	f000 ff86 	bl	808cd82 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808be76:	68c3      	ldr	r3, [r0, #12]
 808be78:	aa01      	add	r2, sp, #4
 808be7a:	4669      	mov	r1, sp
 808be7c:	4798      	blx	r3
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}
 808be7e:	b003      	add	sp, #12
 808be80:	f85d fb04 	ldr.w	pc, [sp], #4

0808be84 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 808be84:	b5f0      	push	{r4, r5, r6, r7, lr}
 808be86:	4607      	mov	r7, r0
 808be88:	460e      	mov	r6, r1
 808be8a:	4615      	mov	r5, r2
 808be8c:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 808be8e:	2410      	movs	r4, #16
 808be90:	4622      	mov	r2, r4
 808be92:	2100      	movs	r1, #0
 808be94:	4668      	mov	r0, sp
 808be96:	f002 fc3d 	bl	808e714 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 808be9a:	2200      	movs	r2, #0
 808be9c:	4669      	mov	r1, sp
 808be9e:	4610      	mov	r0, r2
         size = sizeof(*this);
 808bea0:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
 808bea4:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 808bea6:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 808bea8:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 808beaa:	f7fe fc85 	bl	808a7b8 <spark_function>
}
 808beae:	b005      	add	sp, #20
 808beb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808beb2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 808beb2:	b513      	push	{r0, r1, r4, lr}
 808beb4:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 808beb6:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 808beba:	2300      	movs	r3, #0
 808bebc:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 808bebe:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 808bec0:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 808bec2:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808bec4:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 808bec6:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 808bec8:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808beca:	f7f8 fbab 	bl	8084624 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808bece:	4620      	mov	r0, r4
 808bed0:	b002      	add	sp, #8
 808bed2:	bd10      	pop	{r4, pc}

0808bed4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 808bed4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 808bed6:	460c      	mov	r4, r1
 808bed8:	4606      	mov	r6, r0
 808beda:	460f      	mov	r7, r1
 808bedc:	f854 3b04 	ldr.w	r3, [r4], #4
 808bee0:	ad02      	add	r5, sp, #8
 808bee2:	f845 3d08 	str.w	r3, [r5, #-8]!
 808bee6:	4621      	mov	r1, r4
 808bee8:	a801      	add	r0, sp, #4
 808beea:	f7ff fc7f 	bl	808b7ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 808beee:	4629      	mov	r1, r5
 808bef0:	4630      	mov	r0, r6
 808bef2:	f7ff ffde 	bl	808beb2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808bef6:	a801      	add	r0, sp, #4
 808bef8:	f7f8 fb94 	bl	8084624 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808befc:	4620      	mov	r0, r4
 808befe:	f7f8 fb91 	bl	8084624 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 808bf02:	4638      	mov	r0, r7
 808bf04:	2108      	movs	r1, #8
 808bf06:	f000 ff3a 	bl	808cd7e <_ZdlPvj>
        return p;
    }
 808bf0a:	4630      	mov	r0, r6
 808bf0c:	b003      	add	sp, #12
 808bf0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808bf10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 808bf10:	b538      	push	{r3, r4, r5, lr}
 808bf12:	2300      	movs	r3, #0
 808bf14:	4604      	mov	r4, r0
 808bf16:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808bf18:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 808bf1a:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808bf1c:	f7f4 f8bf 	bl	808009e <_Znwj>
 808bf20:	b128      	cbz	r0, 808bf2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 808bf22:	2301      	movs	r3, #1
 808bf24:	6043      	str	r3, [r0, #4]
 808bf26:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 808bf28:	4b02      	ldr	r3, [pc, #8]	; (808bf34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 808bf2a:	60c5      	str	r5, [r0, #12]
 808bf2c:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808bf2e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 808bf30:	4620      	mov	r0, r4
 808bf32:	bd38      	pop	{r3, r4, r5, pc}
 808bf34:	08094268 	.word	0x08094268

0808bf38 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808bf38:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 808bf3a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808bf3c:	b90a      	cbnz	r2, 808bf42 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 808bf3e:	f000 ff20 	bl	808cd82 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808bf42:	68c3      	ldr	r3, [r0, #12]
    }
 808bf44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808bf48:	4718      	bx	r3

0808bf4a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 808bf4a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 808bf4c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 808bf4e:	f100 0110 	add.w	r1, r0, #16
 808bf52:	f7ff fff1 	bl	808bf38 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 808bf56:	bd08      	pop	{r3, pc}

0808bf58 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808bf58:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 808bf5a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808bf5c:	b90a      	cbnz	r2, 808bf62 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 808bf5e:	f000 ff10 	bl	808cd82 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808bf62:	68c3      	ldr	r3, [r0, #12]
    }
 808bf64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808bf68:	4718      	bx	r3

0808bf6a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 808bf6a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 808bf6c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 808bf6e:	f100 0110 	add.w	r1, r0, #16
 808bf72:	f7ff fff1 	bl	808bf58 <_ZNKSt8functionIFvRKbEEclES1_>
 808bf76:	bd08      	pop	{r3, pc}

0808bf78 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 808bf78:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808bf7a:	2300      	movs	r3, #0
 808bf7c:	6083      	str	r3, [r0, #8]
 808bf7e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 808bf80:	4604      	mov	r4, r0
 808bf82:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 808bf84:	b12b      	cbz	r3, 808bf92 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808bf86:	2202      	movs	r2, #2
 808bf88:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 808bf8a:	68eb      	ldr	r3, [r5, #12]
 808bf8c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 808bf8e:	68ab      	ldr	r3, [r5, #8]
 808bf90:	60a3      	str	r3, [r4, #8]
	}
    }
 808bf92:	4620      	mov	r0, r4
 808bf94:	bd38      	pop	{r3, r4, r5, pc}
	...

0808bf98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 808bf98:	b5f0      	push	{r4, r5, r6, r7, lr}
 808bf9a:	b089      	sub	sp, #36	; 0x24
 808bf9c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 808bf9e:	4668      	mov	r0, sp
 808bfa0:	f7ff ff13 	bl	808bdca <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 808bfa4:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 808bfa8:	2300      	movs	r3, #0
 808bfaa:	f88d 3008 	strb.w	r3, [sp, #8]
 808bfae:	e8d4 3f4f 	ldrexb	r3, [r4]
 808bfb2:	2b00      	cmp	r3, #0
 808bfb4:	d103      	bne.n	808bfbe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 808bfb6:	e8c4 2f41 	strexb	r1, r2, [r4]
 808bfba:	2900      	cmp	r1, #0
 808bfbc:	d1f7      	bne.n	808bfae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 808bfbe:	d002      	beq.n	808bfc6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 808bfc0:	f88d 3008 	strb.w	r3, [sp, #8]
 808bfc4:	e063      	b.n	808c08e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 808bfc6:	f114 050c 	adds.w	r5, r4, #12
 808bfca:	d003      	beq.n	808bfd4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 808bfcc:	4669      	mov	r1, sp
 808bfce:	4628      	mov	r0, r5
 808bfd0:	f7ff fefb 	bl	808bdca <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 808bfd4:	f3bf 8f5f 	dmb	sy
 808bfd8:	2301      	movs	r3, #1
 808bfda:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 808bfdc:	f3bf 8f5f 	dmb	sy
 808bfe0:	f104 0308 	add.w	r3, r4, #8
 808bfe4:	2000      	movs	r0, #0
 808bfe6:	e853 6f00 	ldrex	r6, [r3]
 808bfea:	e843 0200 	strex	r2, r0, [r3]
 808bfee:	2a00      	cmp	r2, #0
 808bff0:	d1f9      	bne.n	808bfe6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 808bff2:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 808bff6:	2e00      	cmp	r6, #0
 808bff8:	d049      	beq.n	808c08e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 808bffa:	f7fe fb59 	bl	808a6b0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 808bffe:	b120      	cbz	r0, 808c00a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 808c000:	4629      	mov	r1, r5
 808c002:	4630      	mov	r0, r6
 808c004:	f7ff ff98 	bl	808bf38 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 808c008:	e03a      	b.n	808c080 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 808c00a:	4631      	mov	r1, r6
 808c00c:	a802      	add	r0, sp, #8
 808c00e:	f7ff ffb3 	bl	808bf78 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 808c012:	68e0      	ldr	r0, [r4, #12]
 808c014:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 808c018:	b108      	cbz	r0, 808c01e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 808c01a:	f002 fbcb 	bl	808e7b4 <strdup>
 808c01e:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 808c020:	2010      	movs	r0, #16
 808c022:	f8ad 501c 	strh.w	r5, [sp, #28]
 808c026:	f7f4 f83a 	bl	808009e <_Znwj>
 808c02a:	4605      	mov	r5, r0
 808c02c:	b1e8      	cbz	r0, 808c06a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808c02e:	2700      	movs	r7, #0
 808c030:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808c032:	2018      	movs	r0, #24
 808c034:	f7f4 f833 	bl	808009e <_Znwj>
 808c038:	4604      	mov	r4, r0
 808c03a:	b188      	cbz	r0, 808c060 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 808c03c:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808c03e:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 808c040:	a802      	add	r0, sp, #8
 808c042:	f7ff fd7c 	bl	808bb3e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808c046:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 808c048:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808c04a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808c04c:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 808c04e:	9204      	str	r2, [sp, #16]
 808c050:	68e2      	ldr	r2, [r4, #12]
 808c052:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 808c054:	60e3      	str	r3, [r4, #12]
 808c056:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808c05a:	9205      	str	r2, [sp, #20]
 808c05c:	f7ff feb5 	bl	808bdca <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 808c060:	4b0d      	ldr	r3, [pc, #52]	; (808c098 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808c062:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 808c064:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 808c066:	4b0d      	ldr	r3, [pc, #52]	; (808c09c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 808c068:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 808c06a:	a806      	add	r0, sp, #24
 808c06c:	f7ff febc 	bl	808bde8 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808c070:	a802      	add	r0, sp, #8
 808c072:	f7fd fa3f 	bl	80894f4 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 808c076:	2200      	movs	r2, #0
 808c078:	4629      	mov	r1, r5
 808c07a:	4809      	ldr	r0, [pc, #36]	; (808c0a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 808c07c:	f7fe fb20 	bl	808a6c0 <application_thread_invoke>
 808c080:	4630      	mov	r0, r6
 808c082:	f7fd fa37 	bl	80894f4 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 808c086:	2110      	movs	r1, #16
 808c088:	4630      	mov	r0, r6
 808c08a:	f000 fe78 	bl	808cd7e <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 808c08e:	4668      	mov	r0, sp
 808c090:	f7ff feaa 	bl	808bde8 <_ZN8particle5ErrorD1Ev>
    }
 808c094:	b009      	add	sp, #36	; 0x24
 808c096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808c098:	0808bf4b 	.word	0x0808bf4b
 808c09c:	0808c1c1 	.word	0x0808c1c1
 808c0a0:	0808c7bd 	.word	0x0808c7bd

0808c0a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 808c0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808c0a8:	b08b      	sub	sp, #44	; 0x2c
 808c0aa:	4606      	mov	r6, r0
 808c0ac:	460f      	mov	r7, r1
 808c0ae:	4690      	mov	r8, r2
 808c0b0:	4699      	mov	r9, r3
 808c0b2:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808c0b6:	f7fe fb97 	bl	808a7e8 <spark_cloud_flag_connected>
 808c0ba:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
 808c0bc:	4683      	mov	fp, r0
 808c0be:	bb30      	cbnz	r0, 808c10e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 808c0c0:	f64f 732e 	movw	r3, #65326	; 0xff2e
 808c0c4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 808c0c6:	a905      	add	r1, sp, #20
 808c0c8:	4628      	mov	r0, r5
 808c0ca:	f8ad 3018 	strh.w	r3, [sp, #24]
 808c0ce:	f7ff fe7c 	bl	808bdca <_ZN8particle5ErrorC1EOS0_>
 808c0d2:	2014      	movs	r0, #20
 808c0d4:	f7f3 ffe3 	bl	808009e <_Znwj>
 808c0d8:	4604      	mov	r4, r0
 808c0da:	b158      	cbz	r0, 808c0f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 808c0dc:	2302      	movs	r3, #2
 808c0de:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 808c0e0:	2301      	movs	r3, #1
 808c0e2:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 808c0e4:	f8c0 b004 	str.w	fp, [r0, #4]
 808c0e8:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 808c0ec:	4629      	mov	r1, r5
 808c0ee:	300c      	adds	r0, #12
 808c0f0:	f7ff fe6b 	bl	808bdca <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 808c0f4:	4630      	mov	r0, r6
 808c0f6:	4621      	mov	r1, r4
 808c0f8:	f840 4b04 	str.w	r4, [r0], #4
 808c0fc:	f7ff ff08 	bl	808bf10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 808c100:	4628      	mov	r0, r5
 808c102:	f7ff fe71 	bl	808bde8 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 808c106:	a805      	add	r0, sp, #20
 808c108:	f7ff fe6e 	bl	808bde8 <_ZN8particle5ErrorD1Ev>
 808c10c:	e052      	b.n	808c1b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 808c10e:	2400      	movs	r4, #0
 808c110:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 808c112:	2014      	movs	r0, #20
 808c114:	606c      	str	r4, [r5, #4]
 808c116:	60ac      	str	r4, [r5, #8]
 808c118:	9307      	str	r3, [sp, #28]
 808c11a:	f7f3 ffc0 	bl	808009e <_Znwj>
 808c11e:	4601      	mov	r1, r0
 808c120:	b118      	cbz	r0, 808c12a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 808c122:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 808c124:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 808c126:	6044      	str	r4, [r0, #4]
 808c128:	6084      	str	r4, [r0, #8]
 808c12a:	a804      	add	r0, sp, #16
 808c12c:	9103      	str	r1, [sp, #12]
 808c12e:	f7ff feef 	bl	808bf10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 808c132:	4b22      	ldr	r3, [pc, #136]	; (808c1bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 808c134:	2008      	movs	r0, #8
 808c136:	9308      	str	r3, [sp, #32]
 808c138:	f7f3 ffb1 	bl	808009e <_Znwj>
 808c13c:	4604      	mov	r4, r0
 808c13e:	b128      	cbz	r0, 808c14c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 808c140:	9b03      	ldr	r3, [sp, #12]
 808c142:	a904      	add	r1, sp, #16
 808c144:	f840 3b04 	str.w	r3, [r0], #4
 808c148:	f7ff fb50 	bl	808b7ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 808c14c:	9500      	str	r5, [sp, #0]
 808c14e:	fa5f f38a 	uxtb.w	r3, sl
 808c152:	464a      	mov	r2, r9
 808c154:	4641      	mov	r1, r8
 808c156:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 808c158:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 808c15a:	f7fe fb55 	bl	808a808 <spark_send_event>
 808c15e:	b920      	cbnz	r0, 808c16a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 808c160:	9b03      	ldr	r3, [sp, #12]
 808c162:	785b      	ldrb	r3, [r3, #1]
 808c164:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 808c168:	b183      	cbz	r3, 808c18c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 808c16a:	9b03      	ldr	r3, [sp, #12]
 808c16c:	a904      	add	r1, sp, #16
 808c16e:	a806      	add	r0, sp, #24
 808c170:	9305      	str	r3, [sp, #20]
 808c172:	f7ff fb3b 	bl	808b7ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 808c176:	a905      	add	r1, sp, #20
 808c178:	4630      	mov	r0, r6
 808c17a:	f7ff fe9a 	bl	808beb2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808c17e:	a806      	add	r0, sp, #24
 808c180:	f7f8 fa50 	bl	8084624 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808c184:	a804      	add	r0, sp, #16
 808c186:	f7f8 fa4d 	bl	8084624 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808c18a:	e013      	b.n	808c1b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 808c18c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 808c190:	a905      	add	r1, sp, #20
 808c192:	a803      	add	r0, sp, #12
 808c194:	9205      	str	r2, [sp, #20]
 808c196:	f8ad 3018 	strh.w	r3, [sp, #24]
 808c19a:	f7ff fefd 	bl	808bf98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 808c19e:	a805      	add	r0, sp, #20
 808c1a0:	f7ff fe22 	bl	808bde8 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 808c1a4:	a805      	add	r0, sp, #20
 808c1a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 808c1a8:	f7ff fe94 	bl	808bed4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 808c1ac:	a806      	add	r0, sp, #24
 808c1ae:	f7f8 fa39 	bl	8084624 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808c1b2:	e7da      	b.n	808c16a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 808c1b4:	4630      	mov	r0, r6
 808c1b6:	b00b      	add	sp, #44	; 0x2c
 808c1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808c1bc:	0808c331 	.word	0x0808c331

0808c1c0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 808c1c0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 808c1c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808c1c4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 808c1c6:	d006      	beq.n	808c1d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 808c1c8:	2a03      	cmp	r2, #3
 808c1ca:	d017      	beq.n	808c1fc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 808c1cc:	2a01      	cmp	r2, #1
 808c1ce:	d122      	bne.n	808c216 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 808c1d0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 808c1d2:	6003      	str	r3, [r0, #0]
	      break;
 808c1d4:	e01f      	b.n	808c216 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 808c1d6:	2018      	movs	r0, #24
 808c1d8:	680e      	ldr	r6, [r1, #0]
 808c1da:	f7f3 ff60 	bl	808009e <_Znwj>
 808c1de:	4605      	mov	r5, r0
 808c1e0:	b150      	cbz	r0, 808c1f8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 808c1e2:	4631      	mov	r1, r6
 808c1e4:	f7ff fec8 	bl	808bf78 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 808c1e8:	6930      	ldr	r0, [r6, #16]
 808c1ea:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 808c1ee:	b108      	cbz	r0, 808c1f4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 808c1f0:	f002 fae0 	bl	808e7b4 <strdup>
 808c1f4:	6128      	str	r0, [r5, #16]
 808c1f6:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 808c1f8:	6025      	str	r5, [r4, #0]
 808c1fa:	e00c      	b.n	808c216 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 808c1fc:	6804      	ldr	r4, [r0, #0]
 808c1fe:	b154      	cbz	r4, 808c216 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 808c200:	f104 0010 	add.w	r0, r4, #16
 808c204:	f7ff fdf0 	bl	808bde8 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808c208:	4620      	mov	r0, r4
 808c20a:	f7fd f973 	bl	80894f4 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 808c20e:	2118      	movs	r1, #24
 808c210:	4620      	mov	r0, r4
 808c212:	f000 fdb4 	bl	808cd7e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 808c216:	2000      	movs	r0, #0
 808c218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808c21a <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 808c21a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808c21c:	2300      	movs	r3, #0
 808c21e:	6083      	str	r3, [r0, #8]
 808c220:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 808c222:	4604      	mov	r4, r0
 808c224:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 808c226:	b12b      	cbz	r3, 808c234 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808c228:	2202      	movs	r2, #2
 808c22a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 808c22c:	68eb      	ldr	r3, [r5, #12]
 808c22e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 808c230:	68ab      	ldr	r3, [r5, #8]
 808c232:	60a3      	str	r3, [r4, #8]
	}
    }
 808c234:	4620      	mov	r0, r4
 808c236:	bd38      	pop	{r3, r4, r5, pc}

0808c238 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 808c238:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 808c23a:	b570      	push	{r4, r5, r6, lr}
 808c23c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 808c23e:	d006      	beq.n	808c24e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 808c240:	2a03      	cmp	r2, #3
 808c242:	d011      	beq.n	808c268 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 808c244:	2a01      	cmp	r2, #1
 808c246:	d118      	bne.n	808c27a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 808c248:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 808c24a:	6003      	str	r3, [r0, #0]
	      break;
 808c24c:	e015      	b.n	808c27a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 808c24e:	2014      	movs	r0, #20
 808c250:	680e      	ldr	r6, [r1, #0]
 808c252:	f7f3 ff24 	bl	808009e <_Znwj>
 808c256:	4605      	mov	r5, r0
 808c258:	b120      	cbz	r0, 808c264 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 808c25a:	4631      	mov	r1, r6
 808c25c:	f7ff ffdd 	bl	808c21a <_ZNSt8functionIFvRKbEEC1ERKS3_>
 808c260:	7c33      	ldrb	r3, [r6, #16]
 808c262:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 808c264:	6025      	str	r5, [r4, #0]
 808c266:	e008      	b.n	808c27a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 808c268:	6804      	ldr	r4, [r0, #0]
 808c26a:	b134      	cbz	r4, 808c27a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808c26c:	4620      	mov	r0, r4
 808c26e:	f7fd f941 	bl	80894f4 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 808c272:	2114      	movs	r1, #20
 808c274:	4620      	mov	r0, r4
 808c276:	f000 fd82 	bl	808cd7e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 808c27a:	2000      	movs	r0, #0
 808c27c:	bd70      	pop	{r4, r5, r6, pc}
	...

0808c280 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 808c280:	b5f0      	push	{r4, r5, r6, r7, lr}
 808c282:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 808c284:	f3bf 8f5f 	dmb	sy
 808c288:	b087      	sub	sp, #28
 808c28a:	2300      	movs	r3, #0
 808c28c:	e850 6f00 	ldrex	r6, [r0]
 808c290:	e840 3200 	strex	r2, r3, [r0]
 808c294:	2a00      	cmp	r2, #0
 808c296:	d1f9      	bne.n	808c28c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 808c298:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 808c29c:	2e00      	cmp	r6, #0
 808c29e:	d03f      	beq.n	808c320 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 808c2a0:	4618      	mov	r0, r3
 808c2a2:	f7fe fa05 	bl	808a6b0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 808c2a6:	4607      	mov	r7, r0
 808c2a8:	b120      	cbz	r0, 808c2b4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 808c2aa:	4621      	mov	r1, r4
 808c2ac:	4630      	mov	r0, r6
 808c2ae:	f7ff fe53 	bl	808bf58 <_ZNKSt8functionIFvRKbEEclES1_>
 808c2b2:	e02e      	b.n	808c312 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 808c2b4:	4631      	mov	r1, r6
 808c2b6:	a801      	add	r0, sp, #4
 808c2b8:	f7ff ffaf 	bl	808c21a <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 808c2bc:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 808c2be:	2010      	movs	r0, #16
 808c2c0:	f88d 3014 	strb.w	r3, [sp, #20]
 808c2c4:	f7f3 feeb 	bl	808009e <_Znwj>
 808c2c8:	4605      	mov	r5, r0
 808c2ca:	b1d0      	cbz	r0, 808c302 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808c2cc:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808c2ce:	2014      	movs	r0, #20
 808c2d0:	f7f3 fee5 	bl	808009e <_Znwj>
 808c2d4:	4604      	mov	r4, r0
 808c2d6:	b178      	cbz	r0, 808c2f8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808c2d8:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 808c2da:	4601      	mov	r1, r0
 808c2dc:	a801      	add	r0, sp, #4
 808c2de:	f7ff fc2e 	bl	808bb3e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808c2e2:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 808c2e4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808c2e6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808c2e8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 808c2ea:	9203      	str	r2, [sp, #12]
 808c2ec:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 808c2ee:	60e3      	str	r3, [r4, #12]
 808c2f0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808c2f4:	9204      	str	r2, [sp, #16]
 808c2f6:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 808c2f8:	4b0a      	ldr	r3, [pc, #40]	; (808c324 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808c2fa:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 808c2fc:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 808c2fe:	4b0a      	ldr	r3, [pc, #40]	; (808c328 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 808c300:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808c302:	a801      	add	r0, sp, #4
 808c304:	f7fd f8f6 	bl	80894f4 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 808c308:	2200      	movs	r2, #0
 808c30a:	4629      	mov	r1, r5
 808c30c:	4807      	ldr	r0, [pc, #28]	; (808c32c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 808c30e:	f7fe f9d7 	bl	808a6c0 <application_thread_invoke>
 808c312:	4630      	mov	r0, r6
 808c314:	f7fd f8ee 	bl	80894f4 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 808c318:	2110      	movs	r1, #16
 808c31a:	4630      	mov	r0, r6
 808c31c:	f000 fd2f 	bl	808cd7e <_ZdlPvj>
        }
    }
 808c320:	b007      	add	sp, #28
 808c322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808c324:	0808bf6b 	.word	0x0808bf6b
 808c328:	0808c239 	.word	0x0808c239
 808c32c:	0808c7bd 	.word	0x0808c7bd

0808c330 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 808c330:	b530      	push	{r4, r5, lr}
 808c332:	4604      	mov	r4, r0
 808c334:	b085      	sub	sp, #20
 808c336:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 808c338:	4668      	mov	r0, sp
 808c33a:	4611      	mov	r1, r2
 808c33c:	f7ff fdca 	bl	808bed4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 808c340:	b17c      	cbz	r4, 808c362 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 808c342:	b224      	sxth	r4, r4
 808c344:	4628      	mov	r0, r5
 808c346:	b10d      	cbz	r5, 808c34c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 808c348:	f002 fa34 	bl	808e7b4 <strdup>
 808c34c:	9002      	str	r0, [sp, #8]
 808c34e:	a902      	add	r1, sp, #8
 808c350:	4668      	mov	r0, sp
 808c352:	f8ad 400c 	strh.w	r4, [sp, #12]
 808c356:	f7ff fe1f 	bl	808bf98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 808c35a:	a802      	add	r0, sp, #8
 808c35c:	f7ff fd44 	bl	808bde8 <_ZN8particle5ErrorD1Ev>
 808c360:	e01d      	b.n	808c39e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 808c362:	f04f 0201 	mov.w	r2, #1
 808c366:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 808c368:	f88d 4008 	strb.w	r4, [sp, #8]
 808c36c:	e8d0 3f4f 	ldrexb	r3, [r0]
 808c370:	42a3      	cmp	r3, r4
 808c372:	d103      	bne.n	808c37c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 808c374:	e8c0 2f41 	strexb	r1, r2, [r0]
 808c378:	2900      	cmp	r1, #0
 808c37a:	d1f7      	bne.n	808c36c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 808c37c:	d002      	beq.n	808c384 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 808c37e:	f88d 3008 	strb.w	r3, [sp, #8]
 808c382:	e00c      	b.n	808c39e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 808c384:	f110 010c 	adds.w	r1, r0, #12
 808c388:	f04f 0301 	mov.w	r3, #1
 808c38c:	bf18      	it	ne
 808c38e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 808c390:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 808c394:	3004      	adds	r0, #4
 808c396:	f800 3c03 	strb.w	r3, [r0, #-3]
 808c39a:	f7ff ff71 	bl	808c280 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 808c39e:	a801      	add	r0, sp, #4
 808c3a0:	f7f8 f940 	bl	8084624 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 808c3a4:	b005      	add	sp, #20
 808c3a6:	bd30      	pop	{r4, r5, pc}

0808c3a8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 808c3a8:	4770      	bx	lr

0808c3aa <_ZN9IPAddressD0Ev>:
 808c3aa:	b510      	push	{r4, lr}
 808c3ac:	4604      	mov	r4, r0
 808c3ae:	2108      	movs	r1, #8
 808c3b0:	f000 fce5 	bl	808cd7e <_ZdlPvj>
 808c3b4:	4620      	mov	r0, r4
 808c3b6:	bd10      	pop	{r4, pc}

0808c3b8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 808c3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808c3ba:	460f      	mov	r7, r1
 808c3bc:	f100 0608 	add.w	r6, r0, #8
 808c3c0:	1d05      	adds	r5, r0, #4
 808c3c2:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 808c3c4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 808c3c8:	220a      	movs	r2, #10
 808c3ca:	4638      	mov	r0, r7
 808c3cc:	f7ff f843 	bl	808b456 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 808c3d0:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 808c3d2:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 808c3d4:	d007      	beq.n	808c3e6 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 808c3d6:	2c00      	cmp	r4, #0
 808c3d8:	d0f4      	beq.n	808c3c4 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 808c3da:	212e      	movs	r1, #46	; 0x2e
 808c3dc:	4638      	mov	r0, r7
 808c3de:	f7fe ffed 	bl	808b3bc <_ZN5Print5printEc>
 808c3e2:	4404      	add	r4, r0
 808c3e4:	e7ee      	b.n	808c3c4 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 808c3e6:	4620      	mov	r0, r4
 808c3e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0808c3ec <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 808c3ec:	4a02      	ldr	r2, [pc, #8]	; (808c3f8 <_ZN9IPAddressC1Ev+0xc>)
 808c3ee:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 808c3f0:	2200      	movs	r2, #0
 808c3f2:	6042      	str	r2, [r0, #4]
{
    clear();
}
 808c3f4:	4770      	bx	lr
 808c3f6:	bf00      	nop
 808c3f8:	08094284 	.word	0x08094284

0808c3fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 808c3fc:	4a02      	ldr	r2, [pc, #8]	; (808c408 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 808c3fe:	6002      	str	r2, [r0, #0]
{
    memcpy(&this->address, &address, sizeof(address));
 808c400:	680a      	ldr	r2, [r1, #0]
 808c402:	6042      	str	r2, [r0, #4]
}
 808c404:	4770      	bx	lr
 808c406:	bf00      	nop
 808c408:	08094284 	.word	0x08094284

0808c40c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 808c40c:	4a01      	ldr	r2, [pc, #4]	; (808c414 <_ZN9IPAddressC1Em+0x8>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 808c40e:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 808c410:	6002      	str	r2, [r0, #0]
{
    *this = address;
}
 808c412:	4770      	bx	lr
 808c414:	08094284 	.word	0x08094284

0808c418 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 808c418:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 808c41a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 808c41e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 808c422:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 808c426:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 808c42a:	6041      	str	r1, [r0, #4]
 808c42c:	bd10      	pop	{r4, pc}
	...

0808c430 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 808c430:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808c432:	4d04      	ldr	r5, [pc, #16]	; (808c444 <_ZN9IPAddressC1Ehhhh+0x14>)
 808c434:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 808c436:	f89d 5018 	ldrb.w	r5, [sp, #24]
 808c43a:	9500      	str	r5, [sp, #0]
 808c43c:	f7ff ffec 	bl	808c418 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 808c440:	b003      	add	sp, #12
 808c442:	bd30      	pop	{r4, r5, pc}
 808c444:	08094284 	.word	0x08094284

0808c448 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 808c448:	7441      	strb	r1, [r0, #17]
 808c44a:	4770      	bx	lr

0808c44c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 808c44c:	4770      	bx	lr

0808c44e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 808c44e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 808c450:	2100      	movs	r1, #0
 808c452:	7c00      	ldrb	r0, [r0, #16]
 808c454:	f7fe f8e4 	bl	808a620 <HAL_USB_USART_Receive_Data>
}
 808c458:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 808c45c:	bf28      	it	cs
 808c45e:	f04f 30ff 	movcs.w	r0, #4294967295
 808c462:	bd08      	pop	{r3, pc}

0808c464 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 808c464:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 808c466:	2101      	movs	r1, #1
 808c468:	7c00      	ldrb	r0, [r0, #16]
 808c46a:	f7fe f8d9 	bl	808a620 <HAL_USB_USART_Receive_Data>
}
 808c46e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 808c472:	bf28      	it	cs
 808c474:	f04f 30ff 	movcs.w	r0, #4294967295
 808c478:	bd08      	pop	{r3, pc}

0808c47a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 808c47a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 808c47c:	7c00      	ldrb	r0, [r0, #16]
 808c47e:	f7fe f8c7 	bl	808a610 <HAL_USB_USART_Available_Data_For_Write>
}
 808c482:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808c486:	bd08      	pop	{r3, pc}

0808c488 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 808c488:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 808c48a:	7c00      	ldrb	r0, [r0, #16]
 808c48c:	f7fe f8b8 	bl	808a600 <HAL_USB_USART_Available_Data>
}
 808c490:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808c494:	bd08      	pop	{r3, pc}

0808c496 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 808c496:	7c00      	ldrb	r0, [r0, #16]
 808c498:	f7fe b8d2 	b.w	808a640 <HAL_USB_USART_Flush_Data>

0808c49c <_ZN9USBSerialD0Ev>:
 808c49c:	b510      	push	{r4, lr}
 808c49e:	4604      	mov	r4, r0
 808c4a0:	2114      	movs	r1, #20
 808c4a2:	f000 fc6c 	bl	808cd7e <_ZdlPvj>
 808c4a6:	4620      	mov	r0, r4
 808c4a8:	bd10      	pop	{r4, pc}

0808c4aa <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 808c4aa:	b538      	push	{r3, r4, r5, lr}
 808c4ac:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808c4ae:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 808c4b0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808c4b2:	f7fe f8ad 	bl	808a610 <HAL_USB_USART_Available_Data_For_Write>
 808c4b6:	2800      	cmp	r0, #0
 808c4b8:	dc01      	bgt.n	808c4be <_ZN9USBSerial5writeEh+0x14>
 808c4ba:	7c60      	ldrb	r0, [r4, #17]
 808c4bc:	b128      	cbz	r0, 808c4ca <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 808c4be:	4629      	mov	r1, r5
 808c4c0:	7c20      	ldrb	r0, [r4, #16]
 808c4c2:	f7fe f8b5 	bl	808a630 <HAL_USB_USART_Send_Data>
 808c4c6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 808c4ca:	bd38      	pop	{r3, r4, r5, pc}

0808c4cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 808c4cc:	b510      	push	{r4, lr}
 808c4ce:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 808c4d0:	2300      	movs	r3, #0
 808c4d2:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 808c4d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808c4d8:	60a3      	str	r3, [r4, #8]
 808c4da:	4b05      	ldr	r3, [pc, #20]	; (808c4f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 808c4dc:	4608      	mov	r0, r1
 808c4de:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 808c4e0:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 808c4e2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 808c4e4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 808c4e6:	4611      	mov	r1, r2
 808c4e8:	f7fe f87a 	bl	808a5e0 <HAL_USB_USART_Init>
}
 808c4ec:	4620      	mov	r0, r4
 808c4ee:	bd10      	pop	{r4, pc}
 808c4f0:	08094298 	.word	0x08094298

0808c4f4 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 808c4f4:	2200      	movs	r2, #0
 808c4f6:	7c00      	ldrb	r0, [r0, #16]
 808c4f8:	f7fe b87a 	b.w	808a5f0 <HAL_USB_USART_Begin>

0808c4fc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 808c4fc:	b510      	push	{r4, lr}
 808c4fe:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 808c500:	2214      	movs	r2, #20
 808c502:	2100      	movs	r1, #0
 808c504:	f002 f906 	bl	808e714 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 808c508:	4b05      	ldr	r3, [pc, #20]	; (808c520 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 808c50a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 808c50c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 808c50e:	4b05      	ldr	r3, [pc, #20]	; (808c524 <_Z19acquireSerialBufferv+0x28>)
 808c510:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808c512:	f240 1301 	movw	r3, #257	; 0x101
 808c516:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 808c518:	2381      	movs	r3, #129	; 0x81
 808c51a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 808c51c:	bd10      	pop	{r4, pc}
 808c51e:	bf00      	nop
 808c520:	20000dd1 	.word	0x20000dd1
 808c524:	20000d50 	.word	0x20000d50

0808c528 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 808c528:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 808c52a:	4d0e      	ldr	r5, [pc, #56]	; (808c564 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 808c52c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 808c52e:	a801      	add	r0, sp, #4
 808c530:	f7ff ffe4 	bl	808c4fc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 808c534:	6829      	ldr	r1, [r5, #0]
 808c536:	f011 0401 	ands.w	r4, r1, #1
 808c53a:	d110      	bne.n	808c55e <_Z16_fetch_usbserialv+0x36>
 808c53c:	4628      	mov	r0, r5
 808c53e:	f7f3 fdb2 	bl	80800a6 <__cxa_guard_acquire>
 808c542:	b160      	cbz	r0, 808c55e <_Z16_fetch_usbserialv+0x36>
 808c544:	aa01      	add	r2, sp, #4
 808c546:	4621      	mov	r1, r4
 808c548:	4807      	ldr	r0, [pc, #28]	; (808c568 <_Z16_fetch_usbserialv+0x40>)
 808c54a:	f7ff ffbf 	bl	808c4cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 808c54e:	4628      	mov	r0, r5
 808c550:	f7f3 fdae 	bl	80800b0 <__cxa_guard_release>
 808c554:	4a05      	ldr	r2, [pc, #20]	; (808c56c <_Z16_fetch_usbserialv+0x44>)
 808c556:	4906      	ldr	r1, [pc, #24]	; (808c570 <_Z16_fetch_usbserialv+0x48>)
 808c558:	4803      	ldr	r0, [pc, #12]	; (808c568 <_Z16_fetch_usbserialv+0x40>)
 808c55a:	f000 fc0b 	bl	808cd74 <__aeabi_atexit>
	return _usbserial;
}
 808c55e:	4802      	ldr	r0, [pc, #8]	; (808c568 <_Z16_fetch_usbserialv+0x40>)
 808c560:	b007      	add	sp, #28
 808c562:	bd30      	pop	{r4, r5, pc}
 808c564:	20000d4c 	.word	0x20000d4c
 808c568:	20000ed4 	.word	0x20000ed4
 808c56c:	200001d0 	.word	0x200001d0
 808c570:	0808c44d 	.word	0x0808c44d

0808c574 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 808c574:	b510      	push	{r4, lr}
 808c576:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 808c578:	2214      	movs	r2, #20
 808c57a:	2100      	movs	r1, #0
 808c57c:	f002 f8ca 	bl	808e714 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 808c580:	4b05      	ldr	r3, [pc, #20]	; (808c598 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 808c582:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 808c584:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 808c586:	4b05      	ldr	r3, [pc, #20]	; (808c59c <_Z23acquireUSBSerial1Bufferv+0x28>)
 808c588:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808c58a:	f240 1301 	movw	r3, #257	; 0x101
 808c58e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 808c590:	2381      	movs	r3, #129	; 0x81
 808c592:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 808c594:	bd10      	pop	{r4, pc}
 808c596:	bf00      	nop
 808c598:	20000f84 	.word	0x20000f84
 808c59c:	20000eec 	.word	0x20000eec

0808c5a0 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 808c5a0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808c5a2:	4c0e      	ldr	r4, [pc, #56]	; (808c5dc <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 808c5a4:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 808c5a6:	a801      	add	r0, sp, #4
 808c5a8:	f7ff ffe4 	bl	808c574 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808c5ac:	6823      	ldr	r3, [r4, #0]
 808c5ae:	07db      	lsls	r3, r3, #31
 808c5b0:	d410      	bmi.n	808c5d4 <_Z17_fetch_usbserial1v+0x34>
 808c5b2:	4620      	mov	r0, r4
 808c5b4:	f7f3 fd77 	bl	80800a6 <__cxa_guard_acquire>
 808c5b8:	b160      	cbz	r0, 808c5d4 <_Z17_fetch_usbserial1v+0x34>
 808c5ba:	aa01      	add	r2, sp, #4
 808c5bc:	2101      	movs	r1, #1
 808c5be:	4808      	ldr	r0, [pc, #32]	; (808c5e0 <_Z17_fetch_usbserial1v+0x40>)
 808c5c0:	f7ff ff84 	bl	808c4cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 808c5c4:	4620      	mov	r0, r4
 808c5c6:	f7f3 fd73 	bl	80800b0 <__cxa_guard_release>
 808c5ca:	4a06      	ldr	r2, [pc, #24]	; (808c5e4 <_Z17_fetch_usbserial1v+0x44>)
 808c5cc:	4906      	ldr	r1, [pc, #24]	; (808c5e8 <_Z17_fetch_usbserial1v+0x48>)
 808c5ce:	4804      	ldr	r0, [pc, #16]	; (808c5e0 <_Z17_fetch_usbserial1v+0x40>)
 808c5d0:	f000 fbd0 	bl	808cd74 <__aeabi_atexit>
  return _usbserial1;
}
 808c5d4:	4802      	ldr	r0, [pc, #8]	; (808c5e0 <_Z17_fetch_usbserial1v+0x40>)
 808c5d6:	b006      	add	sp, #24
 808c5d8:	bd10      	pop	{r4, pc}
 808c5da:	bf00      	nop
 808c5dc:	20000ee8 	.word	0x20000ee8
 808c5e0:	20000f70 	.word	0x20000f70
 808c5e4:	200001d0 	.word	0x200001d0
 808c5e8:	0808c44d 	.word	0x0808c44d

0808c5ec <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 808c5ec:	2200      	movs	r2, #0
 808c5ee:	4611      	mov	r1, r2
 808c5f0:	6840      	ldr	r0, [r0, #4]
 808c5f2:	f7fe b8a9 	b.w	808a748 <network_ready>

0808c5f6 <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 808c5f6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
        HAL_IPAddress ip = {0};
 808c5fa:	2600      	movs	r6, #0
 808c5fc:	ac04      	add	r4, sp, #16
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 808c5fe:	4605      	mov	r5, r0
    {
        HAL_IPAddress ip = {0};
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808c600:	4610      	mov	r0, r2
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 808c602:	4688      	mov	r8, r1
 808c604:	4617      	mov	r7, r2
    {
        HAL_IPAddress ip = {0};
 808c606:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808c60a:	f002 fe03 	bl	808f214 <strlen>
 808c60e:	9600      	str	r6, [sp, #0]
 808c610:	b281      	uxth	r1, r0
 808c612:	f8d8 3004 	ldr.w	r3, [r8, #4]
 808c616:	4622      	mov	r2, r4
 808c618:	4638      	mov	r0, r7
 808c61a:	f7fd ffd1 	bl	808a5c0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 808c61e:	b120      	cbz	r0, 808c62a <_ZN5spark13CellularClass7resolveEPKc+0x34>
 808c620:	4631      	mov	r1, r6
 808c622:	4628      	mov	r0, r5
 808c624:	f7ff fef2 	bl	808c40c <_ZN9IPAddressC1Em>
 808c628:	e003      	b.n	808c632 <_ZN5spark13CellularClass7resolveEPKc+0x3c>
 808c62a:	4621      	mov	r1, r4
 808c62c:	4628      	mov	r0, r5
 808c62e:	f7ff fee5 	bl	808c3fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 808c632:	4628      	mov	r0, r5
 808c634:	b004      	add	sp, #16
 808c636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808c63a <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 808c63a:	2200      	movs	r2, #0
 808c63c:	4611      	mov	r1, r2
 808c63e:	6840      	ldr	r0, [r0, #4]
 808c640:	f7fe b8a2 	b.w	808a788 <network_listening>

0808c644 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 808c644:	2200      	movs	r2, #0
 808c646:	4611      	mov	r1, r2
 808c648:	6840      	ldr	r0, [r0, #4]
 808c64a:	f7fe b8ad 	b.w	808a7a8 <network_get_listen_timeout>

0808c64e <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 808c64e:	2200      	movs	r2, #0
 808c650:	6840      	ldr	r0, [r0, #4]
 808c652:	f7fe b8a1 	b.w	808a798 <network_set_listen_timeout>

0808c656 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 808c656:	2200      	movs	r2, #0
 808c658:	f081 0101 	eor.w	r1, r1, #1
 808c65c:	6840      	ldr	r0, [r0, #4]
 808c65e:	f7fe b88b 	b.w	808a778 <network_listen>

0808c662 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 808c662:	2300      	movs	r3, #0
 808c664:	461a      	mov	r2, r3
 808c666:	4619      	mov	r1, r3
 808c668:	6840      	ldr	r0, [r0, #4]
 808c66a:	f7fe b875 	b.w	808a758 <network_on>

0808c66e <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 808c66e:	2200      	movs	r2, #0
 808c670:	4611      	mov	r1, r2
 808c672:	6840      	ldr	r0, [r0, #4]
 808c674:	f7fe b858 	b.w	808a728 <network_connecting>

0808c678 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 808c678:	2200      	movs	r2, #0
 808c67a:	2102      	movs	r1, #2
 808c67c:	6840      	ldr	r0, [r0, #4]
 808c67e:	f7fe b85b 	b.w	808a738 <network_disconnect>

0808c682 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 808c682:	2300      	movs	r3, #0
 808c684:	461a      	mov	r2, r3
 808c686:	6840      	ldr	r0, [r0, #4]
 808c688:	f7fe b846 	b.w	808a718 <network_connect>

0808c68c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 808c68c:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 808c68e:	4c08      	ldr	r4, [pc, #32]	; (808c6b0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 808c690:	2528      	movs	r5, #40	; 0x28
 808c692:	462a      	mov	r2, r5
 808c694:	2100      	movs	r1, #0
 808c696:	4620      	mov	r0, r4
 808c698:	f002 f83c 	bl	808e714 <memset>
        cid = -1;
 808c69c:	f04f 33ff 	mov.w	r3, #4294967295
 808c6a0:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 808c6a2:	4b04      	ldr	r3, [pc, #16]	; (808c6b4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
 808c6a4:	2204      	movs	r2, #4
 808c6a6:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 808c6a8:	4a03      	ldr	r2, [pc, #12]	; (808c6b8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
        size = sizeof(*this);
 808c6aa:	8025      	strh	r5, [r4, #0]
 808c6ac:	601a      	str	r2, [r3, #0]
 808c6ae:	bd38      	pop	{r3, r4, r5, pc}
 808c6b0:	20001090 	.word	0x20001090
 808c6b4:	20001088 	.word	0x20001088
 808c6b8:	080942c8 	.word	0x080942c8

0808c6bc <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 808c6bc:	7441      	strb	r1, [r0, #17]
 808c6be:	4770      	bx	lr

0808c6c0 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 808c6c0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 808c6c2:	7c00      	ldrb	r0, [r0, #16]
 808c6c4:	f7fd ff04 	bl	808a4d0 <HAL_USART_Available_Data_For_Write>
}
 808c6c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808c6cc:	bd08      	pop	{r3, pc}

0808c6ce <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 808c6ce:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 808c6d0:	7c00      	ldrb	r0, [r0, #16]
 808c6d2:	f7fd fed5 	bl	808a480 <HAL_USART_Available_Data>
}
 808c6d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808c6da:	bd08      	pop	{r3, pc}

0808c6dc <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 808c6dc:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 808c6de:	7c00      	ldrb	r0, [r0, #16]
 808c6e0:	f7fd fede 	bl	808a4a0 <HAL_USART_Peek_Data>
}
 808c6e4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 808c6e8:	bf28      	it	cs
 808c6ea:	f04f 30ff 	movcs.w	r0, #4294967295
 808c6ee:	bd08      	pop	{r3, pc}

0808c6f0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 808c6f0:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 808c6f2:	7c00      	ldrb	r0, [r0, #16]
 808c6f4:	f7fd fecc 	bl	808a490 <HAL_USART_Read_Data>
}
 808c6f8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 808c6fc:	bf28      	it	cs
 808c6fe:	f04f 30ff 	movcs.w	r0, #4294967295
 808c702:	bd08      	pop	{r3, pc}

0808c704 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 808c704:	7c00      	ldrb	r0, [r0, #16]
 808c706:	f7fd bed3 	b.w	808a4b0 <HAL_USART_Flush_Data>

0808c70a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 808c70a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 808c70c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 808c70e:	4604      	mov	r4, r0
 808c710:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 808c712:	b925      	cbnz	r5, 808c71e <_ZN11USARTSerial5writeEh+0x14>
 808c714:	7c00      	ldrb	r0, [r0, #16]
 808c716:	f7fd fedb 	bl	808a4d0 <HAL_USART_Available_Data_For_Write>
 808c71a:	2800      	cmp	r0, #0
 808c71c:	dd05      	ble.n	808c72a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 808c71e:	4631      	mov	r1, r6
 808c720:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 808c722:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 808c726:	f7fd bea3 	b.w	808a470 <HAL_USART_Write_Data>
  }
  return 0;
}
 808c72a:	4628      	mov	r0, r5
 808c72c:	bd70      	pop	{r4, r5, r6, pc}
	...

0808c730 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 808c730:	b510      	push	{r4, lr}
 808c732:	4604      	mov	r4, r0
 808c734:	4608      	mov	r0, r1
 808c736:	4611      	mov	r1, r2
 808c738:	2200      	movs	r2, #0
 808c73a:	6062      	str	r2, [r4, #4]
 808c73c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 808c740:	60a2      	str	r2, [r4, #8]
 808c742:	4a05      	ldr	r2, [pc, #20]	; (808c758 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 808c744:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 808c746:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 808c748:	2201      	movs	r2, #1
 808c74a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 808c74c:	461a      	mov	r2, r3
 808c74e:	f7fd fe87 	bl	808a460 <HAL_USART_Init>
}
 808c752:	4620      	mov	r0, r4
 808c754:	bd10      	pop	{r4, pc}
 808c756:	bf00      	nop
 808c758:	080942fc 	.word	0x080942fc

0808c75c <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 808c75c:	2300      	movs	r3, #0
 808c75e:	7c00      	ldrb	r0, [r0, #16]
 808c760:	f7fd bebe 	b.w	808a4e0 <HAL_USART_BeginConfig>

0808c764 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 808c764:	2200      	movs	r2, #0
 808c766:	f7ff bff9 	b.w	808c75c <_ZN11USARTSerial5beginEmm>

0808c76a <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 808c76a:	7c00      	ldrb	r0, [r0, #16]
 808c76c:	f7fd bea8 	b.w	808a4c0 <HAL_USART_Is_Enabled>

0808c770 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 808c770:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 808c772:	4d0c      	ldr	r5, [pc, #48]	; (808c7a4 <_Z22__fetch_global_Serial1v+0x34>)
 808c774:	6829      	ldr	r1, [r5, #0]
 808c776:	f011 0401 	ands.w	r4, r1, #1
 808c77a:	d111      	bne.n	808c7a0 <_Z22__fetch_global_Serial1v+0x30>
 808c77c:	4628      	mov	r0, r5
 808c77e:	f7f3 fc92 	bl	80800a6 <__cxa_guard_acquire>
 808c782:	b168      	cbz	r0, 808c7a0 <_Z22__fetch_global_Serial1v+0x30>
 808c784:	4a08      	ldr	r2, [pc, #32]	; (808c7a8 <_Z22__fetch_global_Serial1v+0x38>)
 808c786:	4621      	mov	r1, r4
 808c788:	4b08      	ldr	r3, [pc, #32]	; (808c7ac <_Z22__fetch_global_Serial1v+0x3c>)
 808c78a:	4809      	ldr	r0, [pc, #36]	; (808c7b0 <_Z22__fetch_global_Serial1v+0x40>)
 808c78c:	f7ff ffd0 	bl	808c730 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 808c790:	4628      	mov	r0, r5
 808c792:	f7f3 fc8d 	bl	80800b0 <__cxa_guard_release>
 808c796:	4a07      	ldr	r2, [pc, #28]	; (808c7b4 <_Z22__fetch_global_Serial1v+0x44>)
 808c798:	4907      	ldr	r1, [pc, #28]	; (808c7b8 <_Z22__fetch_global_Serial1v+0x48>)
 808c79a:	4805      	ldr	r0, [pc, #20]	; (808c7b0 <_Z22__fetch_global_Serial1v+0x40>)
 808c79c:	f000 faea 	bl	808cd74 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 808c7a0:	4803      	ldr	r0, [pc, #12]	; (808c7b0 <_Z22__fetch_global_Serial1v+0x40>)
 808c7a2:	bd38      	pop	{r3, r4, r5, pc}
 808c7a4:	20001150 	.word	0x20001150
 808c7a8:	20001154 	.word	0x20001154
 808c7ac:	200010cc 	.word	0x200010cc
 808c7b0:	200010b8 	.word	0x200010b8
 808c7b4:	200001d0 	.word	0x200001d0
 808c7b8:	08080b61 	.word	0x08080b61

0808c7bc <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 808c7bc:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808c7be:	6883      	ldr	r3, [r0, #8]
 808c7c0:	4604      	mov	r4, r0
 808c7c2:	b90b      	cbnz	r3, 808c7c8 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 808c7c4:	f000 fadd 	bl	808cd82 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808c7c8:	68c3      	ldr	r3, [r0, #12]
 808c7ca:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 808c7cc:	68a3      	ldr	r3, [r4, #8]
 808c7ce:	b11b      	cbz	r3, 808c7d8 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 808c7d0:	2203      	movs	r2, #3
 808c7d2:	4621      	mov	r1, r4
 808c7d4:	4620      	mov	r0, r4
 808c7d6:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 808c7d8:	4620      	mov	r0, r4
}
 808c7da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 808c7de:	2110      	movs	r1, #16
 808c7e0:	f000 bacd 	b.w	808cd7e <_ZdlPvj>

0808c7e4 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 808c7e4:	4770      	bx	lr

0808c7e6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 808c7e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808c7e8:	4606      	mov	r6, r0
 808c7ea:	4615      	mov	r5, r2
 808c7ec:	460c      	mov	r4, r1
 808c7ee:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 808c7f0:	42bc      	cmp	r4, r7
 808c7f2:	d006      	beq.n	808c802 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 808c7f4:	6833      	ldr	r3, [r6, #0]
 808c7f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 808c7fa:	689b      	ldr	r3, [r3, #8]
 808c7fc:	4630      	mov	r0, r6
 808c7fe:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 808c800:	e7f6      	b.n	808c7f0 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 808c802:	4628      	mov	r0, r5
 808c804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808c806 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 808c806:	2200      	movs	r2, #0
 808c808:	7c00      	ldrb	r0, [r0, #16]
 808c80a:	f7fd be91 	b.w	808a530 <HAL_I2C_Write_Data>

0808c80e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 808c80e:	2100      	movs	r1, #0
 808c810:	7c00      	ldrb	r0, [r0, #16]
 808c812:	f7fd be95 	b.w	808a540 <HAL_I2C_Available_Data>

0808c816 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 808c816:	2100      	movs	r1, #0
 808c818:	7c00      	ldrb	r0, [r0, #16]
 808c81a:	f7fd be99 	b.w	808a550 <HAL_I2C_Read_Data>

0808c81e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 808c81e:	2100      	movs	r1, #0
 808c820:	7c00      	ldrb	r0, [r0, #16]
 808c822:	f7fd be9d 	b.w	808a560 <HAL_I2C_Peek_Data>

0808c826 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 808c826:	2100      	movs	r1, #0
 808c828:	7c00      	ldrb	r0, [r0, #16]
 808c82a:	f7fd bea1 	b.w	808a570 <HAL_I2C_Flush_Data>

0808c82e <_ZN7TwoWireD0Ev>:
 808c82e:	b510      	push	{r4, lr}
 808c830:	4604      	mov	r4, r0
 808c832:	2114      	movs	r1, #20
 808c834:	f000 faa3 	bl	808cd7e <_ZdlPvj>
 808c838:	4620      	mov	r0, r4
 808c83a:	bd10      	pop	{r4, pc}

0808c83c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 808c83c:	b510      	push	{r4, lr}
 808c83e:	4604      	mov	r4, r0
 808c840:	4608      	mov	r0, r1
 808c842:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808c846:	60a3      	str	r3, [r4, #8]
 808c848:	4b04      	ldr	r3, [pc, #16]	; (808c85c <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 808c84a:	2100      	movs	r1, #0
{
  _i2c = i2c;
 808c84c:	7420      	strb	r0, [r4, #16]
 808c84e:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 808c850:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 808c852:	f7fd fe9d 	bl	808a590 <HAL_I2C_Init>

}
 808c856:	4620      	mov	r0, r4
 808c858:	bd10      	pop	{r4, pc}
 808c85a:	bf00      	nop
 808c85c:	0809432c 	.word	0x0809432c

0808c860 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 808c860:	2300      	movs	r3, #0
 808c862:	461a      	mov	r2, r3
 808c864:	4619      	mov	r1, r3
 808c866:	7c00      	ldrb	r0, [r0, #16]
 808c868:	f7fd be42 	b.w	808a4f0 <HAL_I2C_Begin>

0808c86c <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 808c86c:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 808c86e:	2400      	movs	r4, #0
 808c870:	7c00      	ldrb	r0, [r0, #16]
 808c872:	9400      	str	r4, [sp, #0]
 808c874:	f7fd fe44 	bl	808a500 <HAL_I2C_Request_Data>
  return result;
}
 808c878:	b2c0      	uxtb	r0, r0
 808c87a:	b002      	add	sp, #8
 808c87c:	bd10      	pop	{r4, pc}

0808c87e <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 808c87e:	2301      	movs	r3, #1
 808c880:	f7ff bff4 	b.w	808c86c <_ZN7TwoWire11requestFromEhhh>

0808c884 <_ZN7TwoWire11requestFromEii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 808c884:	2301      	movs	r3, #1
 808c886:	b2d2      	uxtb	r2, r2
 808c888:	b2c9      	uxtb	r1, r1
 808c88a:	f7ff bfef 	b.w	808c86c <_ZN7TwoWire11requestFromEhhh>

0808c88e <_ZN7TwoWire11requestFromEiii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
 808c88e:	b2db      	uxtb	r3, r3
 808c890:	b2d2      	uxtb	r2, r2
 808c892:	b2c9      	uxtb	r1, r1
 808c894:	f7ff bfea 	b.w	808c86c <_ZN7TwoWire11requestFromEhhh>

0808c898 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 808c898:	2200      	movs	r2, #0
 808c89a:	7c00      	ldrb	r0, [r0, #16]
 808c89c:	f7fd be38 	b.w	808a510 <HAL_I2C_Begin_Transmission>

0808c8a0 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 808c8a0:	b2c9      	uxtb	r1, r1
 808c8a2:	f7ff bff9 	b.w	808c898 <_ZN7TwoWire17beginTransmissionEh>

0808c8a6 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 808c8a6:	2200      	movs	r2, #0
 808c8a8:	7c00      	ldrb	r0, [r0, #16]
 808c8aa:	f7fd be39 	b.w	808a520 <HAL_I2C_End_Transmission>

0808c8ae <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 808c8ae:	2101      	movs	r1, #1
 808c8b0:	f7ff bff9 	b.w	808c8a6 <_ZN7TwoWire15endTransmissionEh>

0808c8b4 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 808c8b4:	2100      	movs	r1, #0
 808c8b6:	7c00      	ldrb	r0, [r0, #16]
 808c8b8:	f7fd be62 	b.w	808a580 <HAL_I2C_Is_Enabled>

0808c8bc <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 808c8bc:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
 808c8be:	2100      	movs	r1, #0
 808c8c0:	7c00      	ldrb	r0, [r0, #16]
 808c8c2:	f7fd fe6d 	bl	808a5a0 <HAL_I2C_Acquire>
}
 808c8c6:	fab0 f080 	clz	r0, r0
 808c8ca:	0940      	lsrs	r0, r0, #5
 808c8cc:	bd08      	pop	{r3, pc}

0808c8ce <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 808c8ce:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
 808c8d0:	2100      	movs	r1, #0
 808c8d2:	7c00      	ldrb	r0, [r0, #16]
 808c8d4:	f7fd fe6c 	bl	808a5b0 <HAL_I2C_Release>
}
 808c8d8:	fab0 f080 	clz	r0, r0
 808c8dc:	0940      	lsrs	r0, r0, #5
 808c8de:	bd08      	pop	{r3, pc}

0808c8e0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 808c8e0:	2300      	movs	r3, #0
 808c8e2:	461a      	mov	r2, r3
 808c8e4:	6840      	ldr	r0, [r0, #4]
 808c8e6:	f7fd bf17 	b.w	808a718 <network_connect>

0808c8ea <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 808c8ea:	2200      	movs	r2, #0
 808c8ec:	2102      	movs	r1, #2
 808c8ee:	6840      	ldr	r0, [r0, #4]
 808c8f0:	f7fd bf22 	b.w	808a738 <network_disconnect>

0808c8f4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 808c8f4:	2200      	movs	r2, #0
 808c8f6:	4611      	mov	r1, r2
 808c8f8:	6840      	ldr	r0, [r0, #4]
 808c8fa:	f7fd bf15 	b.w	808a728 <network_connecting>

0808c8fe <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 808c8fe:	2200      	movs	r2, #0
 808c900:	4611      	mov	r1, r2
 808c902:	6840      	ldr	r0, [r0, #4]
 808c904:	f7fd bf20 	b.w	808a748 <network_ready>

0808c908 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 808c908:	2300      	movs	r3, #0
 808c90a:	461a      	mov	r2, r3
 808c90c:	4619      	mov	r1, r3
 808c90e:	6840      	ldr	r0, [r0, #4]
 808c910:	f7fd bf22 	b.w	808a758 <network_on>

0808c914 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 808c914:	2300      	movs	r3, #0
 808c916:	461a      	mov	r2, r3
 808c918:	4619      	mov	r1, r3
 808c91a:	6840      	ldr	r0, [r0, #4]
 808c91c:	f7fd bf24 	b.w	808a768 <network_off>

0808c920 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 808c920:	2200      	movs	r2, #0
 808c922:	f081 0101 	eor.w	r1, r1, #1
 808c926:	6840      	ldr	r0, [r0, #4]
 808c928:	f7fd bf26 	b.w	808a778 <network_listen>

0808c92c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 808c92c:	2200      	movs	r2, #0
 808c92e:	6840      	ldr	r0, [r0, #4]
 808c930:	f7fd bf32 	b.w	808a798 <network_set_listen_timeout>

0808c934 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 808c934:	2200      	movs	r2, #0
 808c936:	4611      	mov	r1, r2
 808c938:	6840      	ldr	r0, [r0, #4]
 808c93a:	f7fd bf35 	b.w	808a7a8 <network_get_listen_timeout>

0808c93e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 808c93e:	2200      	movs	r2, #0
 808c940:	4611      	mov	r1, r2
 808c942:	6840      	ldr	r0, [r0, #4]
 808c944:	f7fd bf20 	b.w	808a788 <network_listening>

0808c948 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 808c948:	b5f0      	push	{r4, r5, r6, r7, lr}
 808c94a:	4617      	mov	r7, r2
 808c94c:	b087      	sub	sp, #28
 808c94e:	4605      	mov	r5, r0
    IPAddress addr;
 808c950:	a804      	add	r0, sp, #16
 808c952:	f7ff fd4b 	bl	808c3ec <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 808c956:	2600      	movs	r6, #0
 808c958:	ac06      	add	r4, sp, #24
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808c95a:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 808c95c:	f844 6d0c 	str.w	r6, [r4, #-12]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808c960:	f002 fc58 	bl	808f214 <strlen>
 808c964:	4b0a      	ldr	r3, [pc, #40]	; (808c990 <_ZN5spark12NetworkClass7resolveEPKc+0x48>)
 808c966:	9600      	str	r6, [sp, #0]
 808c968:	b281      	uxth	r1, r0
 808c96a:	685b      	ldr	r3, [r3, #4]
 808c96c:	4622      	mov	r2, r4
 808c96e:	4638      	mov	r0, r7
 808c970:	f7fd fe26 	bl	808a5c0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 808c974:	b120      	cbz	r0, 808c980 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 808c976:	4631      	mov	r1, r6
 808c978:	4628      	mov	r0, r5
 808c97a:	f7ff fd47 	bl	808c40c <_ZN9IPAddressC1Em>
 808c97e:	e003      	b.n	808c988 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 808c980:	4621      	mov	r1, r4
 808c982:	4628      	mov	r0, r5
 808c984:	f7ff fd3a 	bl	808c3fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 808c988:	4628      	mov	r0, r5
 808c98a:	b007      	add	sp, #28
 808c98c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808c98e:	bf00      	nop
 808c990:	20001088 	.word	0x20001088

0808c994 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 808c994:	4b02      	ldr	r3, [pc, #8]	; (808c9a0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 808c996:	4a03      	ldr	r2, [pc, #12]	; (808c9a4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 808c998:	601a      	str	r2, [r3, #0]
 808c99a:	2200      	movs	r2, #0
 808c99c:	605a      	str	r2, [r3, #4]
 808c99e:	4770      	bx	lr
 808c9a0:	200011d8 	.word	0x200011d8
 808c9a4:	08094354 	.word	0x08094354

0808c9a8 <_ZN5spark16JSONBufferWriterD1Ev>:

private:
    Print &strm_;
};

class JSONBufferWriter: public JSONWriter {
 808c9a8:	4770      	bx	lr

0808c9aa <_ZN5spark16JSONBufferWriterD0Ev>:
 808c9aa:	b510      	push	{r4, lr}
 808c9ac:	4604      	mov	r4, r0
 808c9ae:	2114      	movs	r1, #20
 808c9b0:	f000 f9e5 	bl	808cd7e <_ZdlPvj>
 808c9b4:	4620      	mov	r0, r4
 808c9b6:	bd10      	pop	{r4, pc}

0808c9b8 <_ZN5spark16JSONBufferWriter5writeEPKcj>:
    }
    write('"');
}

// spark::JSONBufferWriter
void spark::JSONBufferWriter::write(const char *data, size_t size) {
 808c9b8:	b538      	push	{r3, r4, r5, lr}
 808c9ba:	4615      	mov	r5, r2
    if (n_ < bufSize_) {
 808c9bc:	6903      	ldr	r3, [r0, #16]
 808c9be:	68c2      	ldr	r2, [r0, #12]
    }
    write('"');
}

// spark::JSONBufferWriter
void spark::JSONBufferWriter::write(const char *data, size_t size) {
 808c9c0:	4604      	mov	r4, r0
    if (n_ < bufSize_) {
 808c9c2:	4293      	cmp	r3, r2
 808c9c4:	d207      	bcs.n	808c9d6 <_ZN5spark16JSONBufferWriter5writeEPKcj+0x1e>
        memcpy(buf_ + n_, data, std::min(size, bufSize_ - n_));
 808c9c6:	1ad2      	subs	r2, r2, r3
 808c9c8:	6880      	ldr	r0, [r0, #8]
 808c9ca:	42aa      	cmp	r2, r5
 808c9cc:	bf28      	it	cs
 808c9ce:	462a      	movcs	r2, r5
 808c9d0:	4418      	add	r0, r3
 808c9d2:	f001 fe94 	bl	808e6fe <memcpy>
    }
    n_ += size;
 808c9d6:	6923      	ldr	r3, [r4, #16]
 808c9d8:	441d      	add	r5, r3
 808c9da:	6125      	str	r5, [r4, #16]
 808c9dc:	bd38      	pop	{r3, r4, r5, pc}

0808c9de <_ZN5spark16JSONBufferWriter6printfEPKcz>:
}

void spark::JSONBufferWriter::printf(const char *fmt, ...) {
 808c9de:	b40e      	push	{r1, r2, r3}
 808c9e0:	b517      	push	{r0, r1, r2, r4, lr}
 808c9e2:	4604      	mov	r4, r0
 808c9e4:	ab05      	add	r3, sp, #20
 808c9e6:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, fmt);
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
 808c9ea:	6901      	ldr	r1, [r0, #16]
    n_ += size;
}

void spark::JSONBufferWriter::printf(const char *fmt, ...) {
    va_list args;
    va_start(args, fmt);
 808c9ec:	9301      	str	r3, [sp, #4]
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
 808c9ee:	68e3      	ldr	r3, [r4, #12]
 808c9f0:	6880      	ldr	r0, [r0, #8]
 808c9f2:	4299      	cmp	r1, r3
 808c9f4:	4408      	add	r0, r1
 808c9f6:	bf34      	ite	cc
 808c9f8:	1a59      	subcc	r1, r3, r1
 808c9fa:	2100      	movcs	r1, #0
 808c9fc:	9b01      	ldr	r3, [sp, #4]
 808c9fe:	f7fd ff6b 	bl	808a8d8 <vsnprintf>
    va_end(args);
    n_ += n;
 808ca02:	6923      	ldr	r3, [r4, #16]
 808ca04:	4418      	add	r0, r3
 808ca06:	6120      	str	r0, [r4, #16]
}
 808ca08:	b003      	add	sp, #12
 808ca0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808ca0e:	b003      	add	sp, #12
 808ca10:	4770      	bx	lr

0808ca12 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 808ca12:	b513      	push	{r0, r1, r4, lr}
    write(&c, 1);
 808ca14:	6802      	ldr	r2, [r0, #0]

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 808ca16:	ab02      	add	r3, sp, #8
 808ca18:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
 808ca1c:	6894      	ldr	r4, [r2, #8]
 808ca1e:	4619      	mov	r1, r3
 808ca20:	2201      	movs	r2, #1
 808ca22:	47a0      	blx	r4
}
 808ca24:	b002      	add	sp, #8
 808ca26:	bd10      	pop	{r4, pc}

0808ca28 <_ZN5spark10JSONWriter9endObjectEv>:
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
 808ca28:	b510      	push	{r4, lr}
 808ca2a:	4604      	mov	r4, r0
    write('}');
 808ca2c:	217d      	movs	r1, #125	; 0x7d
 808ca2e:	f7ff fff0 	bl	808ca12 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 808ca32:	2301      	movs	r3, #1
 808ca34:	7123      	strb	r3, [r4, #4]
    return *this;
}
 808ca36:	4620      	mov	r0, r4
 808ca38:	bd10      	pop	{r4, pc}

0808ca3a <_ZN5spark10JSONWriter14writeSeparatorEv>:
    } else if (n > 0) {
        write(buf, n);
    }
}

void spark::JSONWriter::writeSeparator() {
 808ca3a:	b508      	push	{r3, lr}
    switch (state_) {
 808ca3c:	7903      	ldrb	r3, [r0, #4]
 808ca3e:	2b01      	cmp	r3, #1
 808ca40:	d002      	beq.n	808ca48 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 808ca42:	2b02      	cmp	r3, #2
 808ca44:	d002      	beq.n	808ca4c <_ZN5spark10JSONWriter14writeSeparatorEv+0x12>
 808ca46:	bd08      	pop	{r3, pc}
    case NEXT:
        write(',');
 808ca48:	212c      	movs	r1, #44	; 0x2c
 808ca4a:	e000      	b.n	808ca4e <_ZN5spark10JSONWriter14writeSeparatorEv+0x14>
        break;
    case VALUE:
        write(':');
 808ca4c:	213a      	movs	r1, #58	; 0x3a
 808ca4e:	f7ff ffe0 	bl	808ca12 <_ZN5spark10JSONWriter5writeEc>
 808ca52:	bd08      	pop	{r3, pc}

0808ca54 <_ZN5spark10JSONWriter11beginObjectEv>:
    write(']');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::beginObject() {
 808ca54:	b510      	push	{r4, lr}
 808ca56:	4604      	mov	r4, r0
    writeSeparator();
 808ca58:	f7ff ffef 	bl	808ca3a <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 808ca5c:	4620      	mov	r0, r4
 808ca5e:	217b      	movs	r1, #123	; 0x7b
 808ca60:	f7ff ffd7 	bl	808ca12 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 808ca64:	2300      	movs	r3, #0
 808ca66:	7123      	strb	r3, [r4, #4]
    return *this;
}
 808ca68:	4620      	mov	r0, r4
 808ca6a:	bd10      	pop	{r4, pc}

0808ca6c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 808ca6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808ca6e:	460d      	mov	r5, r1
 808ca70:	4617      	mov	r7, r2
    write('"');
 808ca72:	2122      	movs	r1, #34	; 0x22
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 808ca74:	4604      	mov	r4, r0
    write('"');
 808ca76:	f7ff ffcc 	bl	808ca12 <_ZN5spark10JSONWriter5writeEc>
 808ca7a:	462a      	mov	r2, r5
    const char* const end = str + size;
 808ca7c:	4629      	mov	r1, r5
 808ca7e:	442f      	add	r7, r5
    const char *s = str;
    while (s != end) {
 808ca80:	42ba      	cmp	r2, r7
 808ca82:	d038      	beq.n	808caf6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8a>
        const char c = *s;
 808ca84:	4616      	mov	r6, r2
 808ca86:	f816 5b01 	ldrb.w	r5, [r6], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
 808ca8a:	2d22      	cmp	r5, #34	; 0x22
 808ca8c:	d003      	beq.n	808ca96 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
 808ca8e:	2d5c      	cmp	r5, #92	; 0x5c
 808ca90:	d001      	beq.n	808ca96 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
 808ca92:	2d1f      	cmp	r5, #31
 808ca94:	d82d      	bhi.n	808caf2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x86>
            write(str, s - str); // Write preceeding characters
 808ca96:	6823      	ldr	r3, [r4, #0]
 808ca98:	1a52      	subs	r2, r2, r1
 808ca9a:	689b      	ldr	r3, [r3, #8]
 808ca9c:	4620      	mov	r0, r4
 808ca9e:	4798      	blx	r3
            write('\\');
 808caa0:	215c      	movs	r1, #92	; 0x5c
 808caa2:	4620      	mov	r0, r4
 808caa4:	f7ff ffb5 	bl	808ca12 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 808caa8:	2d0c      	cmp	r5, #12
 808caaa:	d019      	beq.n	808cae0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
 808caac:	d807      	bhi.n	808cabe <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x52>
 808caae:	2d09      	cmp	r5, #9
 808cab0:	d00f      	beq.n	808cad2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
 808cab2:	2d0a      	cmp	r5, #10
 808cab4:	d012      	beq.n	808cadc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x70>
 808cab6:	2d08      	cmp	r5, #8
 808cab8:	d114      	bne.n	808cae4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
 808caba:	2162      	movs	r1, #98	; 0x62
 808cabc:	e00a      	b.n	808cad4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
    while (s != end) {
        const char c = *s;
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
 808cabe:	2d22      	cmp	r5, #34	; 0x22
 808cac0:	d005      	beq.n	808cace <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
 808cac2:	2d5c      	cmp	r5, #92	; 0x5c
 808cac4:	d003      	beq.n	808cace <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
 808cac6:	2d0d      	cmp	r5, #13
 808cac8:	d10c      	bne.n	808cae4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
                break;
            case 0x0c: // Form feed
                write('f');
                break;
            case 0x0d: // Carriage return
                write('r');
 808caca:	2172      	movs	r1, #114	; 0x72
 808cacc:	e002      	b.n	808cad4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
            case '"':
            case '\\':
                write(c);
 808cace:	4629      	mov	r1, r5
 808cad0:	e000      	b.n	808cad4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x08: // Backspace
                write('b');
                break;
            case 0x09: // Tab
                write('t');
 808cad2:	2174      	movs	r1, #116	; 0x74
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
 808cad4:	4620      	mov	r0, r4
 808cad6:	f7ff ff9c 	bl	808ca12 <_ZN5spark10JSONWriter5writeEc>
                break;
 808cada:	e009      	b.n	808caf0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
            case 0x09: // Tab
                write('t');
                break;
            case 0x0a: // Line feed
                write('n');
 808cadc:	216e      	movs	r1, #110	; 0x6e
 808cade:	e7f9      	b.n	808cad4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x0c: // Form feed
                write('f');
 808cae0:	2166      	movs	r1, #102	; 0x66
 808cae2:	e7f7      	b.n	808cad4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 808cae4:	6823      	ldr	r3, [r4, #0]
 808cae6:	462a      	mov	r2, r5
 808cae8:	68db      	ldr	r3, [r3, #12]
 808caea:	4909      	ldr	r1, [pc, #36]	; (808cb10 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa4>)
 808caec:	4620      	mov	r0, r4
 808caee:	4798      	blx	r3
                break;
            }
            str = s + 1;
 808caf0:	4631      	mov	r1, r6

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
    write('"');
    const char* const end = str + size;
    const char *s = str;
    while (s != end) {
 808caf2:	4632      	mov	r2, r6
 808caf4:	e7c4      	b.n	808ca80 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x14>
            }
            str = s + 1;
        }
        ++s;
    }
    if (s != str) {
 808caf6:	4291      	cmp	r1, r2
 808caf8:	d004      	beq.n	808cb04 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x98>
        write(str, s - str); // Write remaining characters
 808cafa:	6823      	ldr	r3, [r4, #0]
 808cafc:	1a52      	subs	r2, r2, r1
 808cafe:	689d      	ldr	r5, [r3, #8]
 808cb00:	4620      	mov	r0, r4
 808cb02:	47a8      	blx	r5
    }
    write('"');
 808cb04:	2122      	movs	r1, #34	; 0x22
 808cb06:	4620      	mov	r0, r4
 808cb08:	f7ff ff83 	bl	808ca12 <_ZN5spark10JSONWriter5writeEc>
 808cb0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808cb0e:	bf00      	nop
 808cb10:	080943a9 	.word	0x080943a9

0808cb14 <_ZN5spark10JSONWriter4nameEPKcj>:
    write('}');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 808cb14:	b570      	push	{r4, r5, r6, lr}
 808cb16:	4604      	mov	r4, r0
 808cb18:	460d      	mov	r5, r1
 808cb1a:	4616      	mov	r6, r2
    writeSeparator();
 808cb1c:	f7ff ff8d 	bl	808ca3a <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 808cb20:	4620      	mov	r0, r4
 808cb22:	4632      	mov	r2, r6
 808cb24:	4629      	mov	r1, r5
 808cb26:	f7ff ffa1 	bl	808ca6c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 808cb2a:	2302      	movs	r3, #2
 808cb2c:	7123      	strb	r3, [r4, #4]
    return *this;
}
 808cb2e:	4620      	mov	r0, r4
 808cb30:	bd70      	pop	{r4, r5, r6, pc}

0808cb32 <_ZN5spark10JSONWriter5valueEPKcj>:
    printf("%g", val);
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 808cb32:	b570      	push	{r4, r5, r6, lr}
 808cb34:	4604      	mov	r4, r0
 808cb36:	460d      	mov	r5, r1
 808cb38:	4616      	mov	r6, r2
    writeSeparator();
 808cb3a:	f7ff ff7e 	bl	808ca3a <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 808cb3e:	4620      	mov	r0, r4
 808cb40:	4632      	mov	r2, r6
 808cb42:	4629      	mov	r1, r5
 808cb44:	f7ff ff92 	bl	808ca6c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 808cb48:	2301      	movs	r3, #1
 808cb4a:	7123      	strb	r3, [r4, #4]
    return *this;
}
 808cb4c:	4620      	mov	r0, r4
 808cb4e:	bd70      	pop	{r4, r5, r6, pc}

0808cb50 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 808cb50:	b510      	push	{r4, lr}
 808cb52:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 808cb54:	480f      	ldr	r0, [pc, #60]	; (808cb94 <pinAvailable+0x44>)
 808cb56:	f7fe f8ce 	bl	808acf6 <_ZN8SPIClass9isEnabledEv>
 808cb5a:	b128      	cbz	r0, 808cb68 <pinAvailable+0x18>
 808cb5c:	f1a4 030d 	sub.w	r3, r4, #13
 808cb60:	2b02      	cmp	r3, #2
 808cb62:	d801      	bhi.n	808cb68 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 808cb64:	2000      	movs	r0, #0
 808cb66:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 808cb68:	f000 f8c4 	bl	808ccf4 <_Z19__fetch_global_Wirev>
 808cb6c:	f7ff fea2 	bl	808c8b4 <_ZN7TwoWire9isEnabledEv>
 808cb70:	b108      	cbz	r0, 808cb76 <pinAvailable+0x26>
 808cb72:	2c01      	cmp	r4, #1
 808cb74:	d9f6      	bls.n	808cb64 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 808cb76:	f7ff fdfb 	bl	808c770 <_Z22__fetch_global_Serial1v>
 808cb7a:	f7ff fdf6 	bl	808c76a <_ZN11USARTSerial9isEnabledEv>
 808cb7e:	b118      	cbz	r0, 808cb88 <pinAvailable+0x38>
 808cb80:	f1a4 0312 	sub.w	r3, r4, #18
 808cb84:	2b01      	cmp	r3, #1
 808cb86:	d9ed      	bls.n	808cb64 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 808cb88:	2c2e      	cmp	r4, #46	; 0x2e
 808cb8a:	bf8c      	ite	hi
 808cb8c:	2000      	movhi	r0, #0
 808cb8e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 808cb90:	bd10      	pop	{r4, pc}
 808cb92:	bf00      	nop
 808cb94:	200011e0 	.word	0x200011e0

0808cb98 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 808cb98:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 808cb9a:	b538      	push	{r3, r4, r5, lr}
 808cb9c:	4604      	mov	r4, r0
 808cb9e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 808cba0:	d80a      	bhi.n	808cbb8 <pinMode+0x20>
 808cba2:	29ff      	cmp	r1, #255	; 0xff
 808cba4:	d008      	beq.n	808cbb8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 808cba6:	f7ff ffd3 	bl	808cb50 <pinAvailable>
 808cbaa:	b128      	cbz	r0, 808cbb8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 808cbac:	4629      	mov	r1, r5
 808cbae:	4620      	mov	r0, r4
}
 808cbb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 808cbb4:	f7fd bb84 	b.w	808a2c0 <HAL_Pin_Mode>
 808cbb8:	bd38      	pop	{r3, r4, r5, pc}

0808cbba <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 808cbba:	b538      	push	{r3, r4, r5, lr}
 808cbbc:	4604      	mov	r4, r0
 808cbbe:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 808cbc0:	f7fd fb86 	bl	808a2d0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 808cbc4:	28ff      	cmp	r0, #255	; 0xff
 808cbc6:	d010      	beq.n	808cbea <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 808cbc8:	2806      	cmp	r0, #6
 808cbca:	d804      	bhi.n	808cbd6 <digitalWrite+0x1c>
 808cbcc:	234d      	movs	r3, #77	; 0x4d
 808cbce:	fa23 f000 	lsr.w	r0, r3, r0
 808cbd2:	07c3      	lsls	r3, r0, #31
 808cbd4:	d409      	bmi.n	808cbea <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 808cbd6:	4620      	mov	r0, r4
 808cbd8:	f7ff ffba 	bl	808cb50 <pinAvailable>
 808cbdc:	b128      	cbz	r0, 808cbea <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 808cbde:	4629      	mov	r1, r5
 808cbe0:	4620      	mov	r0, r4
}
 808cbe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 808cbe6:	f7fd bb7b 	b.w	808a2e0 <HAL_GPIO_Write>
 808cbea:	bd38      	pop	{r3, r4, r5, pc}

0808cbec <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 808cbec:	b510      	push	{r4, lr}
 808cbee:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 808cbf0:	f7fd fb6e 	bl	808a2d0 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 808cbf4:	3804      	subs	r0, #4
 808cbf6:	b2c0      	uxtb	r0, r0
 808cbf8:	2801      	cmp	r0, #1
 808cbfa:	d908      	bls.n	808cc0e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 808cbfc:	4620      	mov	r0, r4
 808cbfe:	f7ff ffa7 	bl	808cb50 <pinAvailable>
 808cc02:	b120      	cbz	r0, 808cc0e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 808cc04:	4620      	mov	r0, r4
}
 808cc06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 808cc0a:	f7fd bb71 	b.w	808a2f0 <HAL_GPIO_Read>
}
 808cc0e:	2000      	movs	r0, #0
 808cc10:	bd10      	pop	{r4, pc}

0808cc12 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 808cc12:	b510      	push	{r4, lr}
 808cc14:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 808cc16:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 808cc18:	bf9c      	itt	ls
 808cc1a:	340a      	addls	r4, #10
 808cc1c:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 808cc1e:	4620      	mov	r0, r4
 808cc20:	f7ff ff96 	bl	808cb50 <pinAvailable>
 808cc24:	b150      	cbz	r0, 808cc3c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 808cc26:	2103      	movs	r1, #3
 808cc28:	4620      	mov	r0, r4
 808cc2a:	f7fd fb41 	bl	808a2b0 <HAL_Validate_Pin_Function>
 808cc2e:	2803      	cmp	r0, #3
 808cc30:	d104      	bne.n	808cc3c <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 808cc32:	4620      	mov	r0, r4
}
 808cc34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 808cc38:	f7fd bb6a 	b.w	808a310 <HAL_ADC_Read>
}
 808cc3c:	2000      	movs	r0, #0
 808cc3e:	bd10      	pop	{r4, pc}

0808cc40 <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 808cc40:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 808cc42:	4e11      	ldr	r6, [pc, #68]	; (808cc88 <_GLOBAL__sub_I_SPI+0x48>)
 808cc44:	4d11      	ldr	r5, [pc, #68]	; (808cc8c <_GLOBAL__sub_I_SPI+0x4c>)
 808cc46:	4c12      	ldr	r4, [pc, #72]	; (808cc90 <_GLOBAL__sub_I_SPI+0x50>)
 808cc48:	2100      	movs	r1, #0
 808cc4a:	4630      	mov	r0, r6
 808cc4c:	f7fd ffba 	bl	808abc4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 808cc50:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 808cc52:	4e10      	ldr	r6, [pc, #64]	; (808cc94 <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 808cc54:	462a      	mov	r2, r5
 808cc56:	4621      	mov	r1, r4
 808cc58:	f000 f88c 	bl	808cd74 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 808cc5c:	2101      	movs	r1, #1
 808cc5e:	4630      	mov	r0, r6
 808cc60:	f7fd ffb0 	bl	808abc4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 808cc64:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 808cc66:	4e0c      	ldr	r6, [pc, #48]	; (808cc98 <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 808cc68:	462a      	mov	r2, r5
 808cc6a:	4621      	mov	r1, r4
 808cc6c:	f000 f882 	bl	808cd74 <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 808cc70:	2102      	movs	r1, #2
 808cc72:	4630      	mov	r0, r6
 808cc74:	f7fd ffa6 	bl	808abc4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 808cc78:	462a      	mov	r2, r5
 808cc7a:	4621      	mov	r1, r4
 808cc7c:	4630      	mov	r0, r6
 808cc7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 808cc82:	f000 b877 	b.w	808cd74 <__aeabi_atexit>
 808cc86:	bf00      	nop
 808cc88:	200011e0 	.word	0x200011e0
 808cc8c:	200001d0 	.word	0x200001d0
 808cc90:	0808abb5 	.word	0x0808abb5
 808cc94:	200011f0 	.word	0x200011f0
 808cc98:	20001200 	.word	0x20001200

0808cc9c <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 808cc9c:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 808cc9e:	4c07      	ldr	r4, [pc, #28]	; (808ccbc <_Z21__fetch_global_EEPROMv+0x20>)
 808cca0:	6823      	ldr	r3, [r4, #0]
 808cca2:	07db      	lsls	r3, r3, #31
 808cca4:	d408      	bmi.n	808ccb8 <_Z21__fetch_global_EEPROMv+0x1c>
 808cca6:	4620      	mov	r0, r4
 808cca8:	f7f3 f9fd 	bl	80800a6 <__cxa_guard_acquire>
 808ccac:	b120      	cbz	r0, 808ccb8 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 808ccae:	f7fd fbaf 	bl	808a410 <HAL_EEPROM_Init>
 808ccb2:	4620      	mov	r0, r4
 808ccb4:	f7f3 f9fc 	bl	80800b0 <__cxa_guard_release>
	return eeprom;
}
 808ccb8:	4801      	ldr	r0, [pc, #4]	; (808ccc0 <_Z21__fetch_global_EEPROMv+0x24>)
 808ccba:	bd10      	pop	{r4, pc}
 808ccbc:	20001214 	.word	0x20001214
 808ccc0:	20001218 	.word	0x20001218

0808ccc4 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 808ccc4:	b513      	push	{r0, r1, r4, lr}
 808ccc6:	4c08      	ldr	r4, [pc, #32]	; (808cce8 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 808ccc8:	2300      	movs	r3, #0
 808ccca:	461a      	mov	r2, r3
 808cccc:	4619      	mov	r1, r3
 808ccce:	9300      	str	r3, [sp, #0]
 808ccd0:	4620      	mov	r0, r4
 808ccd2:	f7ff fbad 	bl	808c430 <_ZN9IPAddressC1Ehhhh>
 808ccd6:	4620      	mov	r0, r4
 808ccd8:	4a04      	ldr	r2, [pc, #16]	; (808ccec <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 808ccda:	4905      	ldr	r1, [pc, #20]	; (808ccf0 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 808ccdc:	b002      	add	sp, #8
 808ccde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808cce2:	f000 b847 	b.w	808cd74 <__aeabi_atexit>
 808cce6:	bf00      	nop
 808cce8:	2000121c 	.word	0x2000121c
 808ccec:	200001d0 	.word	0x200001d0
 808ccf0:	0808c3a9 	.word	0x0808c3a9

0808ccf4 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 808ccf4:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 808ccf6:	4d0b      	ldr	r5, [pc, #44]	; (808cd24 <_Z19__fetch_global_Wirev+0x30>)
 808ccf8:	6829      	ldr	r1, [r5, #0]
 808ccfa:	f011 0401 	ands.w	r4, r1, #1
 808ccfe:	d10f      	bne.n	808cd20 <_Z19__fetch_global_Wirev+0x2c>
 808cd00:	4628      	mov	r0, r5
 808cd02:	f7f3 f9d0 	bl	80800a6 <__cxa_guard_acquire>
 808cd06:	b158      	cbz	r0, 808cd20 <_Z19__fetch_global_Wirev+0x2c>
 808cd08:	4621      	mov	r1, r4
 808cd0a:	4807      	ldr	r0, [pc, #28]	; (808cd28 <_Z19__fetch_global_Wirev+0x34>)
 808cd0c:	f7ff fd96 	bl	808c83c <_ZN7TwoWireC1E17HAL_I2C_Interface>
 808cd10:	4628      	mov	r0, r5
 808cd12:	f7f3 f9cd 	bl	80800b0 <__cxa_guard_release>
 808cd16:	4a05      	ldr	r2, [pc, #20]	; (808cd2c <_Z19__fetch_global_Wirev+0x38>)
 808cd18:	4905      	ldr	r1, [pc, #20]	; (808cd30 <_Z19__fetch_global_Wirev+0x3c>)
 808cd1a:	4803      	ldr	r0, [pc, #12]	; (808cd28 <_Z19__fetch_global_Wirev+0x34>)
 808cd1c:	f000 f82a 	bl	808cd74 <__aeabi_atexit>
	return wire;
}
 808cd20:	4801      	ldr	r0, [pc, #4]	; (808cd28 <_Z19__fetch_global_Wirev+0x34>)
 808cd22:	bd38      	pop	{r3, r4, r5, pc}
 808cd24:	20001224 	.word	0x20001224
 808cd28:	2000123c 	.word	0x2000123c
 808cd2c:	200001d0 	.word	0x200001d0
 808cd30:	0808c7e5 	.word	0x0808c7e5

0808cd34 <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 808cd34:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3);
 808cd36:	4c0b      	ldr	r4, [pc, #44]	; (808cd64 <_Z20__fetch_global_Wire3v+0x30>)
 808cd38:	6823      	ldr	r3, [r4, #0]
 808cd3a:	07db      	lsls	r3, r3, #31
 808cd3c:	d40f      	bmi.n	808cd5e <_Z20__fetch_global_Wire3v+0x2a>
 808cd3e:	4620      	mov	r0, r4
 808cd40:	f7f3 f9b1 	bl	80800a6 <__cxa_guard_acquire>
 808cd44:	b158      	cbz	r0, 808cd5e <_Z20__fetch_global_Wire3v+0x2a>
 808cd46:	2102      	movs	r1, #2
 808cd48:	4807      	ldr	r0, [pc, #28]	; (808cd68 <_Z20__fetch_global_Wire3v+0x34>)
 808cd4a:	f7ff fd77 	bl	808c83c <_ZN7TwoWireC1E17HAL_I2C_Interface>
 808cd4e:	4620      	mov	r0, r4
 808cd50:	f7f3 f9ae 	bl	80800b0 <__cxa_guard_release>
 808cd54:	4a05      	ldr	r2, [pc, #20]	; (808cd6c <_Z20__fetch_global_Wire3v+0x38>)
 808cd56:	4906      	ldr	r1, [pc, #24]	; (808cd70 <_Z20__fetch_global_Wire3v+0x3c>)
 808cd58:	4803      	ldr	r0, [pc, #12]	; (808cd68 <_Z20__fetch_global_Wire3v+0x34>)
 808cd5a:	f000 f80b 	bl	808cd74 <__aeabi_atexit>
	return wire;
}
 808cd5e:	4802      	ldr	r0, [pc, #8]	; (808cd68 <_Z20__fetch_global_Wire3v+0x34>)
 808cd60:	bd10      	pop	{r4, pc}
 808cd62:	bf00      	nop
 808cd64:	20001250 	.word	0x20001250
 808cd68:	20001228 	.word	0x20001228
 808cd6c:	200001d0 	.word	0x200001d0
 808cd70:	0808c7e5 	.word	0x0808c7e5

0808cd74 <__aeabi_atexit>:
 808cd74:	460b      	mov	r3, r1
 808cd76:	4601      	mov	r1, r0
 808cd78:	4618      	mov	r0, r3
 808cd7a:	f001 bb93 	b.w	808e4a4 <__cxa_atexit>

0808cd7e <_ZdlPvj>:
 808cd7e:	f7f3 b990 	b.w	80800a2 <_ZdlPv>

0808cd82 <_ZSt25__throw_bad_function_callv>:
 808cd82:	b508      	push	{r3, lr}
 808cd84:	f7fd fdb0 	bl	808a8e8 <abort>

0808cd88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 808cd88:	4b18      	ldr	r3, [pc, #96]	; (808cdec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 808cd8a:	681a      	ldr	r2, [r3, #0]
 808cd8c:	07d1      	lsls	r1, r2, #31
 808cd8e:	bf5c      	itt	pl
 808cd90:	2201      	movpl	r2, #1
 808cd92:	601a      	strpl	r2, [r3, #0]
 808cd94:	4b16      	ldr	r3, [pc, #88]	; (808cdf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 808cd96:	681a      	ldr	r2, [r3, #0]
 808cd98:	07d2      	lsls	r2, r2, #31
 808cd9a:	bf5c      	itt	pl
 808cd9c:	2201      	movpl	r2, #1
 808cd9e:	601a      	strpl	r2, [r3, #0]
 808cda0:	4b14      	ldr	r3, [pc, #80]	; (808cdf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 808cda2:	681a      	ldr	r2, [r3, #0]
 808cda4:	07d0      	lsls	r0, r2, #31
 808cda6:	bf5c      	itt	pl
 808cda8:	2201      	movpl	r2, #1
 808cdaa:	601a      	strpl	r2, [r3, #0]
 808cdac:	4b12      	ldr	r3, [pc, #72]	; (808cdf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 808cdae:	681a      	ldr	r2, [r3, #0]
 808cdb0:	07d1      	lsls	r1, r2, #31
 808cdb2:	bf5c      	itt	pl
 808cdb4:	2201      	movpl	r2, #1
 808cdb6:	601a      	strpl	r2, [r3, #0]
 808cdb8:	4b10      	ldr	r3, [pc, #64]	; (808cdfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 808cdba:	681a      	ldr	r2, [r3, #0]
 808cdbc:	07d2      	lsls	r2, r2, #31
 808cdbe:	bf5c      	itt	pl
 808cdc0:	2201      	movpl	r2, #1
 808cdc2:	601a      	strpl	r2, [r3, #0]
 808cdc4:	4b0e      	ldr	r3, [pc, #56]	; (808ce00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 808cdc6:	681a      	ldr	r2, [r3, #0]
 808cdc8:	07d0      	lsls	r0, r2, #31
 808cdca:	bf5c      	itt	pl
 808cdcc:	2201      	movpl	r2, #1
 808cdce:	601a      	strpl	r2, [r3, #0]
 808cdd0:	4b0c      	ldr	r3, [pc, #48]	; (808ce04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 808cdd2:	681a      	ldr	r2, [r3, #0]
 808cdd4:	07d1      	lsls	r1, r2, #31
 808cdd6:	bf5c      	itt	pl
 808cdd8:	2201      	movpl	r2, #1
 808cdda:	601a      	strpl	r2, [r3, #0]
 808cddc:	4b0a      	ldr	r3, [pc, #40]	; (808ce08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 808cdde:	681a      	ldr	r2, [r3, #0]
 808cde0:	07d2      	lsls	r2, r2, #31
 808cde2:	bf5c      	itt	pl
 808cde4:	2201      	movpl	r2, #1
 808cde6:	601a      	strpl	r2, [r3, #0]
 808cde8:	4770      	bx	lr
 808cdea:	bf00      	nop
 808cdec:	20001270 	.word	0x20001270
 808cdf0:	2000126c 	.word	0x2000126c
 808cdf4:	20001268 	.word	0x20001268
 808cdf8:	20001264 	.word	0x20001264
 808cdfc:	20001260 	.word	0x20001260
 808ce00:	2000125c 	.word	0x2000125c
 808ce04:	20001258 	.word	0x20001258
 808ce08:	20001254 	.word	0x20001254

0808ce0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 808ce0c:	4b24      	ldr	r3, [pc, #144]	; (808cea0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 808ce0e:	681a      	ldr	r2, [r3, #0]
 808ce10:	07d0      	lsls	r0, r2, #31
 808ce12:	bf5c      	itt	pl
 808ce14:	2201      	movpl	r2, #1
 808ce16:	601a      	strpl	r2, [r3, #0]
 808ce18:	4b22      	ldr	r3, [pc, #136]	; (808cea4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 808ce1a:	681a      	ldr	r2, [r3, #0]
 808ce1c:	07d1      	lsls	r1, r2, #31
 808ce1e:	bf5c      	itt	pl
 808ce20:	2201      	movpl	r2, #1
 808ce22:	601a      	strpl	r2, [r3, #0]
 808ce24:	4b20      	ldr	r3, [pc, #128]	; (808cea8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 808ce26:	681a      	ldr	r2, [r3, #0]
 808ce28:	07d2      	lsls	r2, r2, #31
 808ce2a:	bf5c      	itt	pl
 808ce2c:	2201      	movpl	r2, #1
 808ce2e:	601a      	strpl	r2, [r3, #0]
 808ce30:	4b1e      	ldr	r3, [pc, #120]	; (808ceac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 808ce32:	681a      	ldr	r2, [r3, #0]
 808ce34:	07d0      	lsls	r0, r2, #31
 808ce36:	bf5c      	itt	pl
 808ce38:	2201      	movpl	r2, #1
 808ce3a:	601a      	strpl	r2, [r3, #0]
 808ce3c:	4b1c      	ldr	r3, [pc, #112]	; (808ceb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 808ce3e:	681a      	ldr	r2, [r3, #0]
 808ce40:	07d1      	lsls	r1, r2, #31
 808ce42:	bf5c      	itt	pl
 808ce44:	2201      	movpl	r2, #1
 808ce46:	601a      	strpl	r2, [r3, #0]
 808ce48:	4b1a      	ldr	r3, [pc, #104]	; (808ceb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 808ce4a:	681a      	ldr	r2, [r3, #0]
 808ce4c:	07d2      	lsls	r2, r2, #31
 808ce4e:	bf5c      	itt	pl
 808ce50:	2201      	movpl	r2, #1
 808ce52:	601a      	strpl	r2, [r3, #0]
 808ce54:	4b18      	ldr	r3, [pc, #96]	; (808ceb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 808ce56:	681a      	ldr	r2, [r3, #0]
 808ce58:	07d0      	lsls	r0, r2, #31
 808ce5a:	bf5c      	itt	pl
 808ce5c:	2201      	movpl	r2, #1
 808ce5e:	601a      	strpl	r2, [r3, #0]
 808ce60:	4b16      	ldr	r3, [pc, #88]	; (808cebc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 808ce62:	681a      	ldr	r2, [r3, #0]
 808ce64:	07d1      	lsls	r1, r2, #31
 808ce66:	bf5c      	itt	pl
 808ce68:	2201      	movpl	r2, #1
 808ce6a:	601a      	strpl	r2, [r3, #0]
 808ce6c:	4b14      	ldr	r3, [pc, #80]	; (808cec0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 808ce6e:	681a      	ldr	r2, [r3, #0]
 808ce70:	07d2      	lsls	r2, r2, #31
 808ce72:	bf5c      	itt	pl
 808ce74:	2201      	movpl	r2, #1
 808ce76:	601a      	strpl	r2, [r3, #0]
 808ce78:	4b12      	ldr	r3, [pc, #72]	; (808cec4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 808ce7a:	681a      	ldr	r2, [r3, #0]
 808ce7c:	07d0      	lsls	r0, r2, #31
 808ce7e:	bf5c      	itt	pl
 808ce80:	2201      	movpl	r2, #1
 808ce82:	601a      	strpl	r2, [r3, #0]
 808ce84:	4b10      	ldr	r3, [pc, #64]	; (808cec8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 808ce86:	681a      	ldr	r2, [r3, #0]
 808ce88:	07d1      	lsls	r1, r2, #31
 808ce8a:	bf5c      	itt	pl
 808ce8c:	2201      	movpl	r2, #1
 808ce8e:	601a      	strpl	r2, [r3, #0]
 808ce90:	4b0e      	ldr	r3, [pc, #56]	; (808cecc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 808ce92:	681a      	ldr	r2, [r3, #0]
 808ce94:	07d2      	lsls	r2, r2, #31
 808ce96:	bf5c      	itt	pl
 808ce98:	2201      	movpl	r2, #1
 808ce9a:	601a      	strpl	r2, [r3, #0]
 808ce9c:	4770      	bx	lr
 808ce9e:	bf00      	nop
 808cea0:	200012a0 	.word	0x200012a0
 808cea4:	2000129c 	.word	0x2000129c
 808cea8:	20001298 	.word	0x20001298
 808ceac:	20001294 	.word	0x20001294
 808ceb0:	20001290 	.word	0x20001290
 808ceb4:	2000128c 	.word	0x2000128c
 808ceb8:	20001288 	.word	0x20001288
 808cebc:	20001284 	.word	0x20001284
 808cec0:	20001280 	.word	0x20001280
 808cec4:	2000127c 	.word	0x2000127c
 808cec8:	20001278 	.word	0x20001278
 808cecc:	20001274 	.word	0x20001274

0808ced0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 808ced0:	4b24      	ldr	r3, [pc, #144]	; (808cf64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 808ced2:	681a      	ldr	r2, [r3, #0]
 808ced4:	07d0      	lsls	r0, r2, #31
 808ced6:	bf5c      	itt	pl
 808ced8:	2201      	movpl	r2, #1
 808ceda:	601a      	strpl	r2, [r3, #0]
 808cedc:	4b22      	ldr	r3, [pc, #136]	; (808cf68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 808cede:	681a      	ldr	r2, [r3, #0]
 808cee0:	07d1      	lsls	r1, r2, #31
 808cee2:	bf5c      	itt	pl
 808cee4:	2201      	movpl	r2, #1
 808cee6:	601a      	strpl	r2, [r3, #0]
 808cee8:	4b20      	ldr	r3, [pc, #128]	; (808cf6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 808ceea:	681a      	ldr	r2, [r3, #0]
 808ceec:	07d2      	lsls	r2, r2, #31
 808ceee:	bf5c      	itt	pl
 808cef0:	2201      	movpl	r2, #1
 808cef2:	601a      	strpl	r2, [r3, #0]
 808cef4:	4b1e      	ldr	r3, [pc, #120]	; (808cf70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 808cef6:	681a      	ldr	r2, [r3, #0]
 808cef8:	07d0      	lsls	r0, r2, #31
 808cefa:	bf5c      	itt	pl
 808cefc:	2201      	movpl	r2, #1
 808cefe:	601a      	strpl	r2, [r3, #0]
 808cf00:	4b1c      	ldr	r3, [pc, #112]	; (808cf74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 808cf02:	681a      	ldr	r2, [r3, #0]
 808cf04:	07d1      	lsls	r1, r2, #31
 808cf06:	bf5c      	itt	pl
 808cf08:	2201      	movpl	r2, #1
 808cf0a:	601a      	strpl	r2, [r3, #0]
 808cf0c:	4b1a      	ldr	r3, [pc, #104]	; (808cf78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 808cf0e:	681a      	ldr	r2, [r3, #0]
 808cf10:	07d2      	lsls	r2, r2, #31
 808cf12:	bf5c      	itt	pl
 808cf14:	2201      	movpl	r2, #1
 808cf16:	601a      	strpl	r2, [r3, #0]
 808cf18:	4b18      	ldr	r3, [pc, #96]	; (808cf7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 808cf1a:	681a      	ldr	r2, [r3, #0]
 808cf1c:	07d0      	lsls	r0, r2, #31
 808cf1e:	bf5c      	itt	pl
 808cf20:	2201      	movpl	r2, #1
 808cf22:	601a      	strpl	r2, [r3, #0]
 808cf24:	4b16      	ldr	r3, [pc, #88]	; (808cf80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 808cf26:	681a      	ldr	r2, [r3, #0]
 808cf28:	07d1      	lsls	r1, r2, #31
 808cf2a:	bf5c      	itt	pl
 808cf2c:	2201      	movpl	r2, #1
 808cf2e:	601a      	strpl	r2, [r3, #0]
 808cf30:	4b14      	ldr	r3, [pc, #80]	; (808cf84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 808cf32:	681a      	ldr	r2, [r3, #0]
 808cf34:	07d2      	lsls	r2, r2, #31
 808cf36:	bf5c      	itt	pl
 808cf38:	2201      	movpl	r2, #1
 808cf3a:	601a      	strpl	r2, [r3, #0]
 808cf3c:	4b12      	ldr	r3, [pc, #72]	; (808cf88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 808cf3e:	681a      	ldr	r2, [r3, #0]
 808cf40:	07d0      	lsls	r0, r2, #31
 808cf42:	bf5c      	itt	pl
 808cf44:	2201      	movpl	r2, #1
 808cf46:	601a      	strpl	r2, [r3, #0]
 808cf48:	4b10      	ldr	r3, [pc, #64]	; (808cf8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 808cf4a:	681a      	ldr	r2, [r3, #0]
 808cf4c:	07d1      	lsls	r1, r2, #31
 808cf4e:	bf5c      	itt	pl
 808cf50:	2201      	movpl	r2, #1
 808cf52:	601a      	strpl	r2, [r3, #0]
 808cf54:	4b0e      	ldr	r3, [pc, #56]	; (808cf90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 808cf56:	681a      	ldr	r2, [r3, #0]
 808cf58:	07d2      	lsls	r2, r2, #31
 808cf5a:	bf5c      	itt	pl
 808cf5c:	2201      	movpl	r2, #1
 808cf5e:	601a      	strpl	r2, [r3, #0]
 808cf60:	4770      	bx	lr
 808cf62:	bf00      	nop
 808cf64:	200012d0 	.word	0x200012d0
 808cf68:	200012cc 	.word	0x200012cc
 808cf6c:	200012c8 	.word	0x200012c8
 808cf70:	200012c4 	.word	0x200012c4
 808cf74:	200012c0 	.word	0x200012c0
 808cf78:	200012bc 	.word	0x200012bc
 808cf7c:	200012b8 	.word	0x200012b8
 808cf80:	200012b4 	.word	0x200012b4
 808cf84:	200012b0 	.word	0x200012b0
 808cf88:	200012ac 	.word	0x200012ac
 808cf8c:	200012a8 	.word	0x200012a8
 808cf90:	200012a4 	.word	0x200012a4

0808cf94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 808cf94:	4b18      	ldr	r3, [pc, #96]	; (808cff8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 808cf96:	681a      	ldr	r2, [r3, #0]
 808cf98:	07d1      	lsls	r1, r2, #31
 808cf9a:	bf5c      	itt	pl
 808cf9c:	2201      	movpl	r2, #1
 808cf9e:	601a      	strpl	r2, [r3, #0]
 808cfa0:	4b16      	ldr	r3, [pc, #88]	; (808cffc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 808cfa2:	681a      	ldr	r2, [r3, #0]
 808cfa4:	07d2      	lsls	r2, r2, #31
 808cfa6:	bf5c      	itt	pl
 808cfa8:	2201      	movpl	r2, #1
 808cfaa:	601a      	strpl	r2, [r3, #0]
 808cfac:	4b14      	ldr	r3, [pc, #80]	; (808d000 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 808cfae:	681a      	ldr	r2, [r3, #0]
 808cfb0:	07d0      	lsls	r0, r2, #31
 808cfb2:	bf5c      	itt	pl
 808cfb4:	2201      	movpl	r2, #1
 808cfb6:	601a      	strpl	r2, [r3, #0]
 808cfb8:	4b12      	ldr	r3, [pc, #72]	; (808d004 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 808cfba:	681a      	ldr	r2, [r3, #0]
 808cfbc:	07d1      	lsls	r1, r2, #31
 808cfbe:	bf5c      	itt	pl
 808cfc0:	2201      	movpl	r2, #1
 808cfc2:	601a      	strpl	r2, [r3, #0]
 808cfc4:	4b10      	ldr	r3, [pc, #64]	; (808d008 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 808cfc6:	681a      	ldr	r2, [r3, #0]
 808cfc8:	07d2      	lsls	r2, r2, #31
 808cfca:	bf5c      	itt	pl
 808cfcc:	2201      	movpl	r2, #1
 808cfce:	601a      	strpl	r2, [r3, #0]
 808cfd0:	4b0e      	ldr	r3, [pc, #56]	; (808d00c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 808cfd2:	681a      	ldr	r2, [r3, #0]
 808cfd4:	07d0      	lsls	r0, r2, #31
 808cfd6:	bf5c      	itt	pl
 808cfd8:	2201      	movpl	r2, #1
 808cfda:	601a      	strpl	r2, [r3, #0]
 808cfdc:	4b0c      	ldr	r3, [pc, #48]	; (808d010 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 808cfde:	681a      	ldr	r2, [r3, #0]
 808cfe0:	07d1      	lsls	r1, r2, #31
 808cfe2:	bf5c      	itt	pl
 808cfe4:	2201      	movpl	r2, #1
 808cfe6:	601a      	strpl	r2, [r3, #0]
 808cfe8:	4b0a      	ldr	r3, [pc, #40]	; (808d014 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 808cfea:	681a      	ldr	r2, [r3, #0]
 808cfec:	07d2      	lsls	r2, r2, #31
 808cfee:	bf5c      	itt	pl
 808cff0:	2201      	movpl	r2, #1
 808cff2:	601a      	strpl	r2, [r3, #0]
 808cff4:	4770      	bx	lr
 808cff6:	bf00      	nop
 808cff8:	200012f0 	.word	0x200012f0
 808cffc:	200012ec 	.word	0x200012ec
 808d000:	200012e8 	.word	0x200012e8
 808d004:	200012e4 	.word	0x200012e4
 808d008:	200012e0 	.word	0x200012e0
 808d00c:	200012dc 	.word	0x200012dc
 808d010:	200012d8 	.word	0x200012d8
 808d014:	200012d4 	.word	0x200012d4

0808d018 <__aeabi_drsub>:
 808d018:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 808d01c:	e002      	b.n	808d024 <__adddf3>
 808d01e:	bf00      	nop

0808d020 <__aeabi_dsub>:
 808d020:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0808d024 <__adddf3>:
 808d024:	b530      	push	{r4, r5, lr}
 808d026:	ea4f 0441 	mov.w	r4, r1, lsl #1
 808d02a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 808d02e:	ea94 0f05 	teq	r4, r5
 808d032:	bf08      	it	eq
 808d034:	ea90 0f02 	teqeq	r0, r2
 808d038:	bf1f      	itttt	ne
 808d03a:	ea54 0c00 	orrsne.w	ip, r4, r0
 808d03e:	ea55 0c02 	orrsne.w	ip, r5, r2
 808d042:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 808d046:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 808d04a:	f000 80e2 	beq.w	808d212 <__adddf3+0x1ee>
 808d04e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 808d052:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 808d056:	bfb8      	it	lt
 808d058:	426d      	neglt	r5, r5
 808d05a:	dd0c      	ble.n	808d076 <__adddf3+0x52>
 808d05c:	442c      	add	r4, r5
 808d05e:	ea80 0202 	eor.w	r2, r0, r2
 808d062:	ea81 0303 	eor.w	r3, r1, r3
 808d066:	ea82 0000 	eor.w	r0, r2, r0
 808d06a:	ea83 0101 	eor.w	r1, r3, r1
 808d06e:	ea80 0202 	eor.w	r2, r0, r2
 808d072:	ea81 0303 	eor.w	r3, r1, r3
 808d076:	2d36      	cmp	r5, #54	; 0x36
 808d078:	bf88      	it	hi
 808d07a:	bd30      	pophi	{r4, r5, pc}
 808d07c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808d080:	ea4f 3101 	mov.w	r1, r1, lsl #12
 808d084:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 808d088:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 808d08c:	d002      	beq.n	808d094 <__adddf3+0x70>
 808d08e:	4240      	negs	r0, r0
 808d090:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808d094:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 808d098:	ea4f 3303 	mov.w	r3, r3, lsl #12
 808d09c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 808d0a0:	d002      	beq.n	808d0a8 <__adddf3+0x84>
 808d0a2:	4252      	negs	r2, r2
 808d0a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808d0a8:	ea94 0f05 	teq	r4, r5
 808d0ac:	f000 80a7 	beq.w	808d1fe <__adddf3+0x1da>
 808d0b0:	f1a4 0401 	sub.w	r4, r4, #1
 808d0b4:	f1d5 0e20 	rsbs	lr, r5, #32
 808d0b8:	db0d      	blt.n	808d0d6 <__adddf3+0xb2>
 808d0ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 808d0be:	fa22 f205 	lsr.w	r2, r2, r5
 808d0c2:	1880      	adds	r0, r0, r2
 808d0c4:	f141 0100 	adc.w	r1, r1, #0
 808d0c8:	fa03 f20e 	lsl.w	r2, r3, lr
 808d0cc:	1880      	adds	r0, r0, r2
 808d0ce:	fa43 f305 	asr.w	r3, r3, r5
 808d0d2:	4159      	adcs	r1, r3
 808d0d4:	e00e      	b.n	808d0f4 <__adddf3+0xd0>
 808d0d6:	f1a5 0520 	sub.w	r5, r5, #32
 808d0da:	f10e 0e20 	add.w	lr, lr, #32
 808d0de:	2a01      	cmp	r2, #1
 808d0e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 808d0e4:	bf28      	it	cs
 808d0e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 808d0ea:	fa43 f305 	asr.w	r3, r3, r5
 808d0ee:	18c0      	adds	r0, r0, r3
 808d0f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 808d0f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808d0f8:	d507      	bpl.n	808d10a <__adddf3+0xe6>
 808d0fa:	f04f 0e00 	mov.w	lr, #0
 808d0fe:	f1dc 0c00 	rsbs	ip, ip, #0
 808d102:	eb7e 0000 	sbcs.w	r0, lr, r0
 808d106:	eb6e 0101 	sbc.w	r1, lr, r1
 808d10a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 808d10e:	d31b      	bcc.n	808d148 <__adddf3+0x124>
 808d110:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 808d114:	d30c      	bcc.n	808d130 <__adddf3+0x10c>
 808d116:	0849      	lsrs	r1, r1, #1
 808d118:	ea5f 0030 	movs.w	r0, r0, rrx
 808d11c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 808d120:	f104 0401 	add.w	r4, r4, #1
 808d124:	ea4f 5244 	mov.w	r2, r4, lsl #21
 808d128:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 808d12c:	f080 809a 	bcs.w	808d264 <__adddf3+0x240>
 808d130:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 808d134:	bf08      	it	eq
 808d136:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808d13a:	f150 0000 	adcs.w	r0, r0, #0
 808d13e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808d142:	ea41 0105 	orr.w	r1, r1, r5
 808d146:	bd30      	pop	{r4, r5, pc}
 808d148:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 808d14c:	4140      	adcs	r0, r0
 808d14e:	eb41 0101 	adc.w	r1, r1, r1
 808d152:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808d156:	f1a4 0401 	sub.w	r4, r4, #1
 808d15a:	d1e9      	bne.n	808d130 <__adddf3+0x10c>
 808d15c:	f091 0f00 	teq	r1, #0
 808d160:	bf04      	itt	eq
 808d162:	4601      	moveq	r1, r0
 808d164:	2000      	moveq	r0, #0
 808d166:	fab1 f381 	clz	r3, r1
 808d16a:	bf08      	it	eq
 808d16c:	3320      	addeq	r3, #32
 808d16e:	f1a3 030b 	sub.w	r3, r3, #11
 808d172:	f1b3 0220 	subs.w	r2, r3, #32
 808d176:	da0c      	bge.n	808d192 <__adddf3+0x16e>
 808d178:	320c      	adds	r2, #12
 808d17a:	dd08      	ble.n	808d18e <__adddf3+0x16a>
 808d17c:	f102 0c14 	add.w	ip, r2, #20
 808d180:	f1c2 020c 	rsb	r2, r2, #12
 808d184:	fa01 f00c 	lsl.w	r0, r1, ip
 808d188:	fa21 f102 	lsr.w	r1, r1, r2
 808d18c:	e00c      	b.n	808d1a8 <__adddf3+0x184>
 808d18e:	f102 0214 	add.w	r2, r2, #20
 808d192:	bfd8      	it	le
 808d194:	f1c2 0c20 	rsble	ip, r2, #32
 808d198:	fa01 f102 	lsl.w	r1, r1, r2
 808d19c:	fa20 fc0c 	lsr.w	ip, r0, ip
 808d1a0:	bfdc      	itt	le
 808d1a2:	ea41 010c 	orrle.w	r1, r1, ip
 808d1a6:	4090      	lslle	r0, r2
 808d1a8:	1ae4      	subs	r4, r4, r3
 808d1aa:	bfa2      	ittt	ge
 808d1ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 808d1b0:	4329      	orrge	r1, r5
 808d1b2:	bd30      	popge	{r4, r5, pc}
 808d1b4:	ea6f 0404 	mvn.w	r4, r4
 808d1b8:	3c1f      	subs	r4, #31
 808d1ba:	da1c      	bge.n	808d1f6 <__adddf3+0x1d2>
 808d1bc:	340c      	adds	r4, #12
 808d1be:	dc0e      	bgt.n	808d1de <__adddf3+0x1ba>
 808d1c0:	f104 0414 	add.w	r4, r4, #20
 808d1c4:	f1c4 0220 	rsb	r2, r4, #32
 808d1c8:	fa20 f004 	lsr.w	r0, r0, r4
 808d1cc:	fa01 f302 	lsl.w	r3, r1, r2
 808d1d0:	ea40 0003 	orr.w	r0, r0, r3
 808d1d4:	fa21 f304 	lsr.w	r3, r1, r4
 808d1d8:	ea45 0103 	orr.w	r1, r5, r3
 808d1dc:	bd30      	pop	{r4, r5, pc}
 808d1de:	f1c4 040c 	rsb	r4, r4, #12
 808d1e2:	f1c4 0220 	rsb	r2, r4, #32
 808d1e6:	fa20 f002 	lsr.w	r0, r0, r2
 808d1ea:	fa01 f304 	lsl.w	r3, r1, r4
 808d1ee:	ea40 0003 	orr.w	r0, r0, r3
 808d1f2:	4629      	mov	r1, r5
 808d1f4:	bd30      	pop	{r4, r5, pc}
 808d1f6:	fa21 f004 	lsr.w	r0, r1, r4
 808d1fa:	4629      	mov	r1, r5
 808d1fc:	bd30      	pop	{r4, r5, pc}
 808d1fe:	f094 0f00 	teq	r4, #0
 808d202:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 808d206:	bf06      	itte	eq
 808d208:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 808d20c:	3401      	addeq	r4, #1
 808d20e:	3d01      	subne	r5, #1
 808d210:	e74e      	b.n	808d0b0 <__adddf3+0x8c>
 808d212:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 808d216:	bf18      	it	ne
 808d218:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 808d21c:	d029      	beq.n	808d272 <__adddf3+0x24e>
 808d21e:	ea94 0f05 	teq	r4, r5
 808d222:	bf08      	it	eq
 808d224:	ea90 0f02 	teqeq	r0, r2
 808d228:	d005      	beq.n	808d236 <__adddf3+0x212>
 808d22a:	ea54 0c00 	orrs.w	ip, r4, r0
 808d22e:	bf04      	itt	eq
 808d230:	4619      	moveq	r1, r3
 808d232:	4610      	moveq	r0, r2
 808d234:	bd30      	pop	{r4, r5, pc}
 808d236:	ea91 0f03 	teq	r1, r3
 808d23a:	bf1e      	ittt	ne
 808d23c:	2100      	movne	r1, #0
 808d23e:	2000      	movne	r0, #0
 808d240:	bd30      	popne	{r4, r5, pc}
 808d242:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 808d246:	d105      	bne.n	808d254 <__adddf3+0x230>
 808d248:	0040      	lsls	r0, r0, #1
 808d24a:	4149      	adcs	r1, r1
 808d24c:	bf28      	it	cs
 808d24e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 808d252:	bd30      	pop	{r4, r5, pc}
 808d254:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 808d258:	bf3c      	itt	cc
 808d25a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 808d25e:	bd30      	popcc	{r4, r5, pc}
 808d260:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808d264:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 808d268:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 808d26c:	f04f 0000 	mov.w	r0, #0
 808d270:	bd30      	pop	{r4, r5, pc}
 808d272:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 808d276:	bf1a      	itte	ne
 808d278:	4619      	movne	r1, r3
 808d27a:	4610      	movne	r0, r2
 808d27c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 808d280:	bf1c      	itt	ne
 808d282:	460b      	movne	r3, r1
 808d284:	4602      	movne	r2, r0
 808d286:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808d28a:	bf06      	itte	eq
 808d28c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 808d290:	ea91 0f03 	teqeq	r1, r3
 808d294:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 808d298:	bd30      	pop	{r4, r5, pc}
 808d29a:	bf00      	nop

0808d29c <__aeabi_ui2d>:
 808d29c:	f090 0f00 	teq	r0, #0
 808d2a0:	bf04      	itt	eq
 808d2a2:	2100      	moveq	r1, #0
 808d2a4:	4770      	bxeq	lr
 808d2a6:	b530      	push	{r4, r5, lr}
 808d2a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808d2ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808d2b0:	f04f 0500 	mov.w	r5, #0
 808d2b4:	f04f 0100 	mov.w	r1, #0
 808d2b8:	e750      	b.n	808d15c <__adddf3+0x138>
 808d2ba:	bf00      	nop

0808d2bc <__aeabi_i2d>:
 808d2bc:	f090 0f00 	teq	r0, #0
 808d2c0:	bf04      	itt	eq
 808d2c2:	2100      	moveq	r1, #0
 808d2c4:	4770      	bxeq	lr
 808d2c6:	b530      	push	{r4, r5, lr}
 808d2c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808d2cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808d2d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 808d2d4:	bf48      	it	mi
 808d2d6:	4240      	negmi	r0, r0
 808d2d8:	f04f 0100 	mov.w	r1, #0
 808d2dc:	e73e      	b.n	808d15c <__adddf3+0x138>
 808d2de:	bf00      	nop

0808d2e0 <__aeabi_f2d>:
 808d2e0:	0042      	lsls	r2, r0, #1
 808d2e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 808d2e6:	ea4f 0131 	mov.w	r1, r1, rrx
 808d2ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 808d2ee:	bf1f      	itttt	ne
 808d2f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 808d2f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 808d2f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 808d2fc:	4770      	bxne	lr
 808d2fe:	f092 0f00 	teq	r2, #0
 808d302:	bf14      	ite	ne
 808d304:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 808d308:	4770      	bxeq	lr
 808d30a:	b530      	push	{r4, r5, lr}
 808d30c:	f44f 7460 	mov.w	r4, #896	; 0x380
 808d310:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808d314:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 808d318:	e720      	b.n	808d15c <__adddf3+0x138>
 808d31a:	bf00      	nop

0808d31c <__aeabi_ul2d>:
 808d31c:	ea50 0201 	orrs.w	r2, r0, r1
 808d320:	bf08      	it	eq
 808d322:	4770      	bxeq	lr
 808d324:	b530      	push	{r4, r5, lr}
 808d326:	f04f 0500 	mov.w	r5, #0
 808d32a:	e00a      	b.n	808d342 <__aeabi_l2d+0x16>

0808d32c <__aeabi_l2d>:
 808d32c:	ea50 0201 	orrs.w	r2, r0, r1
 808d330:	bf08      	it	eq
 808d332:	4770      	bxeq	lr
 808d334:	b530      	push	{r4, r5, lr}
 808d336:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 808d33a:	d502      	bpl.n	808d342 <__aeabi_l2d+0x16>
 808d33c:	4240      	negs	r0, r0
 808d33e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808d342:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808d346:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808d34a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 808d34e:	f43f aedc 	beq.w	808d10a <__adddf3+0xe6>
 808d352:	f04f 0203 	mov.w	r2, #3
 808d356:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808d35a:	bf18      	it	ne
 808d35c:	3203      	addne	r2, #3
 808d35e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808d362:	bf18      	it	ne
 808d364:	3203      	addne	r2, #3
 808d366:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 808d36a:	f1c2 0320 	rsb	r3, r2, #32
 808d36e:	fa00 fc03 	lsl.w	ip, r0, r3
 808d372:	fa20 f002 	lsr.w	r0, r0, r2
 808d376:	fa01 fe03 	lsl.w	lr, r1, r3
 808d37a:	ea40 000e 	orr.w	r0, r0, lr
 808d37e:	fa21 f102 	lsr.w	r1, r1, r2
 808d382:	4414      	add	r4, r2
 808d384:	e6c1      	b.n	808d10a <__adddf3+0xe6>
 808d386:	bf00      	nop

0808d388 <__aeabi_dmul>:
 808d388:	b570      	push	{r4, r5, r6, lr}
 808d38a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808d38e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808d392:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808d396:	bf1d      	ittte	ne
 808d398:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 808d39c:	ea94 0f0c 	teqne	r4, ip
 808d3a0:	ea95 0f0c 	teqne	r5, ip
 808d3a4:	f000 f8de 	bleq	808d564 <__aeabi_dmul+0x1dc>
 808d3a8:	442c      	add	r4, r5
 808d3aa:	ea81 0603 	eor.w	r6, r1, r3
 808d3ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 808d3b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 808d3b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 808d3ba:	bf18      	it	ne
 808d3bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 808d3c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808d3c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 808d3c8:	d038      	beq.n	808d43c <__aeabi_dmul+0xb4>
 808d3ca:	fba0 ce02 	umull	ip, lr, r0, r2
 808d3ce:	f04f 0500 	mov.w	r5, #0
 808d3d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 808d3d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 808d3da:	fbe0 e503 	umlal	lr, r5, r0, r3
 808d3de:	f04f 0600 	mov.w	r6, #0
 808d3e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 808d3e6:	f09c 0f00 	teq	ip, #0
 808d3ea:	bf18      	it	ne
 808d3ec:	f04e 0e01 	orrne.w	lr, lr, #1
 808d3f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 808d3f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 808d3f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 808d3fc:	d204      	bcs.n	808d408 <__aeabi_dmul+0x80>
 808d3fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 808d402:	416d      	adcs	r5, r5
 808d404:	eb46 0606 	adc.w	r6, r6, r6
 808d408:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 808d40c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 808d410:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 808d414:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 808d418:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 808d41c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808d420:	bf88      	it	hi
 808d422:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 808d426:	d81e      	bhi.n	808d466 <__aeabi_dmul+0xde>
 808d428:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 808d42c:	bf08      	it	eq
 808d42e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 808d432:	f150 0000 	adcs.w	r0, r0, #0
 808d436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808d43a:	bd70      	pop	{r4, r5, r6, pc}
 808d43c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 808d440:	ea46 0101 	orr.w	r1, r6, r1
 808d444:	ea40 0002 	orr.w	r0, r0, r2
 808d448:	ea81 0103 	eor.w	r1, r1, r3
 808d44c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 808d450:	bfc2      	ittt	gt
 808d452:	ebd4 050c 	rsbsgt	r5, r4, ip
 808d456:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808d45a:	bd70      	popgt	{r4, r5, r6, pc}
 808d45c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808d460:	f04f 0e00 	mov.w	lr, #0
 808d464:	3c01      	subs	r4, #1
 808d466:	f300 80ab 	bgt.w	808d5c0 <__aeabi_dmul+0x238>
 808d46a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 808d46e:	bfde      	ittt	le
 808d470:	2000      	movle	r0, #0
 808d472:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 808d476:	bd70      	pople	{r4, r5, r6, pc}
 808d478:	f1c4 0400 	rsb	r4, r4, #0
 808d47c:	3c20      	subs	r4, #32
 808d47e:	da35      	bge.n	808d4ec <__aeabi_dmul+0x164>
 808d480:	340c      	adds	r4, #12
 808d482:	dc1b      	bgt.n	808d4bc <__aeabi_dmul+0x134>
 808d484:	f104 0414 	add.w	r4, r4, #20
 808d488:	f1c4 0520 	rsb	r5, r4, #32
 808d48c:	fa00 f305 	lsl.w	r3, r0, r5
 808d490:	fa20 f004 	lsr.w	r0, r0, r4
 808d494:	fa01 f205 	lsl.w	r2, r1, r5
 808d498:	ea40 0002 	orr.w	r0, r0, r2
 808d49c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 808d4a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 808d4a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 808d4a8:	fa21 f604 	lsr.w	r6, r1, r4
 808d4ac:	eb42 0106 	adc.w	r1, r2, r6
 808d4b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808d4b4:	bf08      	it	eq
 808d4b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808d4ba:	bd70      	pop	{r4, r5, r6, pc}
 808d4bc:	f1c4 040c 	rsb	r4, r4, #12
 808d4c0:	f1c4 0520 	rsb	r5, r4, #32
 808d4c4:	fa00 f304 	lsl.w	r3, r0, r4
 808d4c8:	fa20 f005 	lsr.w	r0, r0, r5
 808d4cc:	fa01 f204 	lsl.w	r2, r1, r4
 808d4d0:	ea40 0002 	orr.w	r0, r0, r2
 808d4d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808d4d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 808d4dc:	f141 0100 	adc.w	r1, r1, #0
 808d4e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808d4e4:	bf08      	it	eq
 808d4e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808d4ea:	bd70      	pop	{r4, r5, r6, pc}
 808d4ec:	f1c4 0520 	rsb	r5, r4, #32
 808d4f0:	fa00 f205 	lsl.w	r2, r0, r5
 808d4f4:	ea4e 0e02 	orr.w	lr, lr, r2
 808d4f8:	fa20 f304 	lsr.w	r3, r0, r4
 808d4fc:	fa01 f205 	lsl.w	r2, r1, r5
 808d500:	ea43 0302 	orr.w	r3, r3, r2
 808d504:	fa21 f004 	lsr.w	r0, r1, r4
 808d508:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808d50c:	fa21 f204 	lsr.w	r2, r1, r4
 808d510:	ea20 0002 	bic.w	r0, r0, r2
 808d514:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 808d518:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808d51c:	bf08      	it	eq
 808d51e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808d522:	bd70      	pop	{r4, r5, r6, pc}
 808d524:	f094 0f00 	teq	r4, #0
 808d528:	d10f      	bne.n	808d54a <__aeabi_dmul+0x1c2>
 808d52a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 808d52e:	0040      	lsls	r0, r0, #1
 808d530:	eb41 0101 	adc.w	r1, r1, r1
 808d534:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808d538:	bf08      	it	eq
 808d53a:	3c01      	subeq	r4, #1
 808d53c:	d0f7      	beq.n	808d52e <__aeabi_dmul+0x1a6>
 808d53e:	ea41 0106 	orr.w	r1, r1, r6
 808d542:	f095 0f00 	teq	r5, #0
 808d546:	bf18      	it	ne
 808d548:	4770      	bxne	lr
 808d54a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 808d54e:	0052      	lsls	r2, r2, #1
 808d550:	eb43 0303 	adc.w	r3, r3, r3
 808d554:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 808d558:	bf08      	it	eq
 808d55a:	3d01      	subeq	r5, #1
 808d55c:	d0f7      	beq.n	808d54e <__aeabi_dmul+0x1c6>
 808d55e:	ea43 0306 	orr.w	r3, r3, r6
 808d562:	4770      	bx	lr
 808d564:	ea94 0f0c 	teq	r4, ip
 808d568:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808d56c:	bf18      	it	ne
 808d56e:	ea95 0f0c 	teqne	r5, ip
 808d572:	d00c      	beq.n	808d58e <__aeabi_dmul+0x206>
 808d574:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808d578:	bf18      	it	ne
 808d57a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808d57e:	d1d1      	bne.n	808d524 <__aeabi_dmul+0x19c>
 808d580:	ea81 0103 	eor.w	r1, r1, r3
 808d584:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808d588:	f04f 0000 	mov.w	r0, #0
 808d58c:	bd70      	pop	{r4, r5, r6, pc}
 808d58e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808d592:	bf06      	itte	eq
 808d594:	4610      	moveq	r0, r2
 808d596:	4619      	moveq	r1, r3
 808d598:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808d59c:	d019      	beq.n	808d5d2 <__aeabi_dmul+0x24a>
 808d59e:	ea94 0f0c 	teq	r4, ip
 808d5a2:	d102      	bne.n	808d5aa <__aeabi_dmul+0x222>
 808d5a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 808d5a8:	d113      	bne.n	808d5d2 <__aeabi_dmul+0x24a>
 808d5aa:	ea95 0f0c 	teq	r5, ip
 808d5ae:	d105      	bne.n	808d5bc <__aeabi_dmul+0x234>
 808d5b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 808d5b4:	bf1c      	itt	ne
 808d5b6:	4610      	movne	r0, r2
 808d5b8:	4619      	movne	r1, r3
 808d5ba:	d10a      	bne.n	808d5d2 <__aeabi_dmul+0x24a>
 808d5bc:	ea81 0103 	eor.w	r1, r1, r3
 808d5c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808d5c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808d5c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 808d5cc:	f04f 0000 	mov.w	r0, #0
 808d5d0:	bd70      	pop	{r4, r5, r6, pc}
 808d5d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808d5d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 808d5da:	bd70      	pop	{r4, r5, r6, pc}

0808d5dc <__aeabi_ddiv>:
 808d5dc:	b570      	push	{r4, r5, r6, lr}
 808d5de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808d5e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808d5e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808d5ea:	bf1d      	ittte	ne
 808d5ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 808d5f0:	ea94 0f0c 	teqne	r4, ip
 808d5f4:	ea95 0f0c 	teqne	r5, ip
 808d5f8:	f000 f8a7 	bleq	808d74a <__aeabi_ddiv+0x16e>
 808d5fc:	eba4 0405 	sub.w	r4, r4, r5
 808d600:	ea81 0e03 	eor.w	lr, r1, r3
 808d604:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808d608:	ea4f 3101 	mov.w	r1, r1, lsl #12
 808d60c:	f000 8088 	beq.w	808d720 <__aeabi_ddiv+0x144>
 808d610:	ea4f 3303 	mov.w	r3, r3, lsl #12
 808d614:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 808d618:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 808d61c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 808d620:	ea4f 2202 	mov.w	r2, r2, lsl #8
 808d624:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 808d628:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 808d62c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 808d630:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 808d634:	429d      	cmp	r5, r3
 808d636:	bf08      	it	eq
 808d638:	4296      	cmpeq	r6, r2
 808d63a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 808d63e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 808d642:	d202      	bcs.n	808d64a <__aeabi_ddiv+0x6e>
 808d644:	085b      	lsrs	r3, r3, #1
 808d646:	ea4f 0232 	mov.w	r2, r2, rrx
 808d64a:	1ab6      	subs	r6, r6, r2
 808d64c:	eb65 0503 	sbc.w	r5, r5, r3
 808d650:	085b      	lsrs	r3, r3, #1
 808d652:	ea4f 0232 	mov.w	r2, r2, rrx
 808d656:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 808d65a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 808d65e:	ebb6 0e02 	subs.w	lr, r6, r2
 808d662:	eb75 0e03 	sbcs.w	lr, r5, r3
 808d666:	bf22      	ittt	cs
 808d668:	1ab6      	subcs	r6, r6, r2
 808d66a:	4675      	movcs	r5, lr
 808d66c:	ea40 000c 	orrcs.w	r0, r0, ip
 808d670:	085b      	lsrs	r3, r3, #1
 808d672:	ea4f 0232 	mov.w	r2, r2, rrx
 808d676:	ebb6 0e02 	subs.w	lr, r6, r2
 808d67a:	eb75 0e03 	sbcs.w	lr, r5, r3
 808d67e:	bf22      	ittt	cs
 808d680:	1ab6      	subcs	r6, r6, r2
 808d682:	4675      	movcs	r5, lr
 808d684:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808d688:	085b      	lsrs	r3, r3, #1
 808d68a:	ea4f 0232 	mov.w	r2, r2, rrx
 808d68e:	ebb6 0e02 	subs.w	lr, r6, r2
 808d692:	eb75 0e03 	sbcs.w	lr, r5, r3
 808d696:	bf22      	ittt	cs
 808d698:	1ab6      	subcs	r6, r6, r2
 808d69a:	4675      	movcs	r5, lr
 808d69c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808d6a0:	085b      	lsrs	r3, r3, #1
 808d6a2:	ea4f 0232 	mov.w	r2, r2, rrx
 808d6a6:	ebb6 0e02 	subs.w	lr, r6, r2
 808d6aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 808d6ae:	bf22      	ittt	cs
 808d6b0:	1ab6      	subcs	r6, r6, r2
 808d6b2:	4675      	movcs	r5, lr
 808d6b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808d6b8:	ea55 0e06 	orrs.w	lr, r5, r6
 808d6bc:	d018      	beq.n	808d6f0 <__aeabi_ddiv+0x114>
 808d6be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 808d6c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 808d6c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 808d6ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 808d6ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 808d6d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 808d6d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 808d6da:	d1c0      	bne.n	808d65e <__aeabi_ddiv+0x82>
 808d6dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808d6e0:	d10b      	bne.n	808d6fa <__aeabi_ddiv+0x11e>
 808d6e2:	ea41 0100 	orr.w	r1, r1, r0
 808d6e6:	f04f 0000 	mov.w	r0, #0
 808d6ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 808d6ee:	e7b6      	b.n	808d65e <__aeabi_ddiv+0x82>
 808d6f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808d6f4:	bf04      	itt	eq
 808d6f6:	4301      	orreq	r1, r0
 808d6f8:	2000      	moveq	r0, #0
 808d6fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808d6fe:	bf88      	it	hi
 808d700:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 808d704:	f63f aeaf 	bhi.w	808d466 <__aeabi_dmul+0xde>
 808d708:	ebb5 0c03 	subs.w	ip, r5, r3
 808d70c:	bf04      	itt	eq
 808d70e:	ebb6 0c02 	subseq.w	ip, r6, r2
 808d712:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808d716:	f150 0000 	adcs.w	r0, r0, #0
 808d71a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808d71e:	bd70      	pop	{r4, r5, r6, pc}
 808d720:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 808d724:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 808d728:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 808d72c:	bfc2      	ittt	gt
 808d72e:	ebd4 050c 	rsbsgt	r5, r4, ip
 808d732:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808d736:	bd70      	popgt	{r4, r5, r6, pc}
 808d738:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808d73c:	f04f 0e00 	mov.w	lr, #0
 808d740:	3c01      	subs	r4, #1
 808d742:	e690      	b.n	808d466 <__aeabi_dmul+0xde>
 808d744:	ea45 0e06 	orr.w	lr, r5, r6
 808d748:	e68d      	b.n	808d466 <__aeabi_dmul+0xde>
 808d74a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808d74e:	ea94 0f0c 	teq	r4, ip
 808d752:	bf08      	it	eq
 808d754:	ea95 0f0c 	teqeq	r5, ip
 808d758:	f43f af3b 	beq.w	808d5d2 <__aeabi_dmul+0x24a>
 808d75c:	ea94 0f0c 	teq	r4, ip
 808d760:	d10a      	bne.n	808d778 <__aeabi_ddiv+0x19c>
 808d762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808d766:	f47f af34 	bne.w	808d5d2 <__aeabi_dmul+0x24a>
 808d76a:	ea95 0f0c 	teq	r5, ip
 808d76e:	f47f af25 	bne.w	808d5bc <__aeabi_dmul+0x234>
 808d772:	4610      	mov	r0, r2
 808d774:	4619      	mov	r1, r3
 808d776:	e72c      	b.n	808d5d2 <__aeabi_dmul+0x24a>
 808d778:	ea95 0f0c 	teq	r5, ip
 808d77c:	d106      	bne.n	808d78c <__aeabi_ddiv+0x1b0>
 808d77e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808d782:	f43f aefd 	beq.w	808d580 <__aeabi_dmul+0x1f8>
 808d786:	4610      	mov	r0, r2
 808d788:	4619      	mov	r1, r3
 808d78a:	e722      	b.n	808d5d2 <__aeabi_dmul+0x24a>
 808d78c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808d790:	bf18      	it	ne
 808d792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808d796:	f47f aec5 	bne.w	808d524 <__aeabi_dmul+0x19c>
 808d79a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 808d79e:	f47f af0d 	bne.w	808d5bc <__aeabi_dmul+0x234>
 808d7a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 808d7a6:	f47f aeeb 	bne.w	808d580 <__aeabi_dmul+0x1f8>
 808d7aa:	e712      	b.n	808d5d2 <__aeabi_dmul+0x24a>

0808d7ac <__gedf2>:
 808d7ac:	f04f 3cff 	mov.w	ip, #4294967295
 808d7b0:	e006      	b.n	808d7c0 <__cmpdf2+0x4>
 808d7b2:	bf00      	nop

0808d7b4 <__ledf2>:
 808d7b4:	f04f 0c01 	mov.w	ip, #1
 808d7b8:	e002      	b.n	808d7c0 <__cmpdf2+0x4>
 808d7ba:	bf00      	nop

0808d7bc <__cmpdf2>:
 808d7bc:	f04f 0c01 	mov.w	ip, #1
 808d7c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 808d7c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808d7c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808d7cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808d7d0:	bf18      	it	ne
 808d7d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 808d7d6:	d01b      	beq.n	808d810 <__cmpdf2+0x54>
 808d7d8:	b001      	add	sp, #4
 808d7da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 808d7de:	bf0c      	ite	eq
 808d7e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 808d7e4:	ea91 0f03 	teqne	r1, r3
 808d7e8:	bf02      	ittt	eq
 808d7ea:	ea90 0f02 	teqeq	r0, r2
 808d7ee:	2000      	moveq	r0, #0
 808d7f0:	4770      	bxeq	lr
 808d7f2:	f110 0f00 	cmn.w	r0, #0
 808d7f6:	ea91 0f03 	teq	r1, r3
 808d7fa:	bf58      	it	pl
 808d7fc:	4299      	cmppl	r1, r3
 808d7fe:	bf08      	it	eq
 808d800:	4290      	cmpeq	r0, r2
 808d802:	bf2c      	ite	cs
 808d804:	17d8      	asrcs	r0, r3, #31
 808d806:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 808d80a:	f040 0001 	orr.w	r0, r0, #1
 808d80e:	4770      	bx	lr
 808d810:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808d814:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808d818:	d102      	bne.n	808d820 <__cmpdf2+0x64>
 808d81a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808d81e:	d107      	bne.n	808d830 <__cmpdf2+0x74>
 808d820:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808d824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808d828:	d1d6      	bne.n	808d7d8 <__cmpdf2+0x1c>
 808d82a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808d82e:	d0d3      	beq.n	808d7d8 <__cmpdf2+0x1c>
 808d830:	f85d 0b04 	ldr.w	r0, [sp], #4
 808d834:	4770      	bx	lr
 808d836:	bf00      	nop

0808d838 <__aeabi_cdrcmple>:
 808d838:	4684      	mov	ip, r0
 808d83a:	4610      	mov	r0, r2
 808d83c:	4662      	mov	r2, ip
 808d83e:	468c      	mov	ip, r1
 808d840:	4619      	mov	r1, r3
 808d842:	4663      	mov	r3, ip
 808d844:	e000      	b.n	808d848 <__aeabi_cdcmpeq>
 808d846:	bf00      	nop

0808d848 <__aeabi_cdcmpeq>:
 808d848:	b501      	push	{r0, lr}
 808d84a:	f7ff ffb7 	bl	808d7bc <__cmpdf2>
 808d84e:	2800      	cmp	r0, #0
 808d850:	bf48      	it	mi
 808d852:	f110 0f00 	cmnmi.w	r0, #0
 808d856:	bd01      	pop	{r0, pc}

0808d858 <__aeabi_dcmpeq>:
 808d858:	f84d ed08 	str.w	lr, [sp, #-8]!
 808d85c:	f7ff fff4 	bl	808d848 <__aeabi_cdcmpeq>
 808d860:	bf0c      	ite	eq
 808d862:	2001      	moveq	r0, #1
 808d864:	2000      	movne	r0, #0
 808d866:	f85d fb08 	ldr.w	pc, [sp], #8
 808d86a:	bf00      	nop

0808d86c <__aeabi_dcmplt>:
 808d86c:	f84d ed08 	str.w	lr, [sp, #-8]!
 808d870:	f7ff ffea 	bl	808d848 <__aeabi_cdcmpeq>
 808d874:	bf34      	ite	cc
 808d876:	2001      	movcc	r0, #1
 808d878:	2000      	movcs	r0, #0
 808d87a:	f85d fb08 	ldr.w	pc, [sp], #8
 808d87e:	bf00      	nop

0808d880 <__aeabi_dcmple>:
 808d880:	f84d ed08 	str.w	lr, [sp, #-8]!
 808d884:	f7ff ffe0 	bl	808d848 <__aeabi_cdcmpeq>
 808d888:	bf94      	ite	ls
 808d88a:	2001      	movls	r0, #1
 808d88c:	2000      	movhi	r0, #0
 808d88e:	f85d fb08 	ldr.w	pc, [sp], #8
 808d892:	bf00      	nop

0808d894 <__aeabi_dcmpge>:
 808d894:	f84d ed08 	str.w	lr, [sp, #-8]!
 808d898:	f7ff ffce 	bl	808d838 <__aeabi_cdrcmple>
 808d89c:	bf94      	ite	ls
 808d89e:	2001      	movls	r0, #1
 808d8a0:	2000      	movhi	r0, #0
 808d8a2:	f85d fb08 	ldr.w	pc, [sp], #8
 808d8a6:	bf00      	nop

0808d8a8 <__aeabi_dcmpgt>:
 808d8a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 808d8ac:	f7ff ffc4 	bl	808d838 <__aeabi_cdrcmple>
 808d8b0:	bf34      	ite	cc
 808d8b2:	2001      	movcc	r0, #1
 808d8b4:	2000      	movcs	r0, #0
 808d8b6:	f85d fb08 	ldr.w	pc, [sp], #8
 808d8ba:	bf00      	nop

0808d8bc <__aeabi_dcmpun>:
 808d8bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808d8c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808d8c4:	d102      	bne.n	808d8cc <__aeabi_dcmpun+0x10>
 808d8c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808d8ca:	d10a      	bne.n	808d8e2 <__aeabi_dcmpun+0x26>
 808d8cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808d8d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808d8d4:	d102      	bne.n	808d8dc <__aeabi_dcmpun+0x20>
 808d8d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808d8da:	d102      	bne.n	808d8e2 <__aeabi_dcmpun+0x26>
 808d8dc:	f04f 0000 	mov.w	r0, #0
 808d8e0:	4770      	bx	lr
 808d8e2:	f04f 0001 	mov.w	r0, #1
 808d8e6:	4770      	bx	lr

0808d8e8 <__aeabi_d2iz>:
 808d8e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808d8ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 808d8f0:	d215      	bcs.n	808d91e <__aeabi_d2iz+0x36>
 808d8f2:	d511      	bpl.n	808d918 <__aeabi_d2iz+0x30>
 808d8f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 808d8f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 808d8fc:	d912      	bls.n	808d924 <__aeabi_d2iz+0x3c>
 808d8fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808d902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808d906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808d90a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808d90e:	fa23 f002 	lsr.w	r0, r3, r2
 808d912:	bf18      	it	ne
 808d914:	4240      	negne	r0, r0
 808d916:	4770      	bx	lr
 808d918:	f04f 0000 	mov.w	r0, #0
 808d91c:	4770      	bx	lr
 808d91e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808d922:	d105      	bne.n	808d930 <__aeabi_d2iz+0x48>
 808d924:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 808d928:	bf08      	it	eq
 808d92a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808d92e:	4770      	bx	lr
 808d930:	f04f 0000 	mov.w	r0, #0
 808d934:	4770      	bx	lr
 808d936:	bf00      	nop

0808d938 <__aeabi_d2uiz>:
 808d938:	004a      	lsls	r2, r1, #1
 808d93a:	d211      	bcs.n	808d960 <__aeabi_d2uiz+0x28>
 808d93c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 808d940:	d211      	bcs.n	808d966 <__aeabi_d2uiz+0x2e>
 808d942:	d50d      	bpl.n	808d960 <__aeabi_d2uiz+0x28>
 808d944:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 808d948:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 808d94c:	d40e      	bmi.n	808d96c <__aeabi_d2uiz+0x34>
 808d94e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808d952:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808d956:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808d95a:	fa23 f002 	lsr.w	r0, r3, r2
 808d95e:	4770      	bx	lr
 808d960:	f04f 0000 	mov.w	r0, #0
 808d964:	4770      	bx	lr
 808d966:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808d96a:	d102      	bne.n	808d972 <__aeabi_d2uiz+0x3a>
 808d96c:	f04f 30ff 	mov.w	r0, #4294967295
 808d970:	4770      	bx	lr
 808d972:	f04f 0000 	mov.w	r0, #0
 808d976:	4770      	bx	lr

0808d978 <__aeabi_d2f>:
 808d978:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808d97c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 808d980:	bf24      	itt	cs
 808d982:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 808d986:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 808d98a:	d90d      	bls.n	808d9a8 <__aeabi_d2f+0x30>
 808d98c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808d990:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 808d994:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 808d998:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 808d99c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 808d9a0:	bf08      	it	eq
 808d9a2:	f020 0001 	biceq.w	r0, r0, #1
 808d9a6:	4770      	bx	lr
 808d9a8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 808d9ac:	d121      	bne.n	808d9f2 <__aeabi_d2f+0x7a>
 808d9ae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 808d9b2:	bfbc      	itt	lt
 808d9b4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 808d9b8:	4770      	bxlt	lr
 808d9ba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808d9be:	ea4f 5252 	mov.w	r2, r2, lsr #21
 808d9c2:	f1c2 0218 	rsb	r2, r2, #24
 808d9c6:	f1c2 0c20 	rsb	ip, r2, #32
 808d9ca:	fa10 f30c 	lsls.w	r3, r0, ip
 808d9ce:	fa20 f002 	lsr.w	r0, r0, r2
 808d9d2:	bf18      	it	ne
 808d9d4:	f040 0001 	orrne.w	r0, r0, #1
 808d9d8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808d9dc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 808d9e0:	fa03 fc0c 	lsl.w	ip, r3, ip
 808d9e4:	ea40 000c 	orr.w	r0, r0, ip
 808d9e8:	fa23 f302 	lsr.w	r3, r3, r2
 808d9ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 808d9f0:	e7cc      	b.n	808d98c <__aeabi_d2f+0x14>
 808d9f2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 808d9f6:	d107      	bne.n	808da08 <__aeabi_d2f+0x90>
 808d9f8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 808d9fc:	bf1e      	ittt	ne
 808d9fe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 808da02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 808da06:	4770      	bxne	lr
 808da08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 808da0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808da10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808da14:	4770      	bx	lr
 808da16:	bf00      	nop

0808da18 <__aeabi_frsub>:
 808da18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 808da1c:	e002      	b.n	808da24 <__addsf3>
 808da1e:	bf00      	nop

0808da20 <__aeabi_fsub>:
 808da20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0808da24 <__addsf3>:
 808da24:	0042      	lsls	r2, r0, #1
 808da26:	bf1f      	itttt	ne
 808da28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 808da2c:	ea92 0f03 	teqne	r2, r3
 808da30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 808da34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808da38:	d06a      	beq.n	808db10 <__addsf3+0xec>
 808da3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 808da3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 808da42:	bfc1      	itttt	gt
 808da44:	18d2      	addgt	r2, r2, r3
 808da46:	4041      	eorgt	r1, r0
 808da48:	4048      	eorgt	r0, r1
 808da4a:	4041      	eorgt	r1, r0
 808da4c:	bfb8      	it	lt
 808da4e:	425b      	neglt	r3, r3
 808da50:	2b19      	cmp	r3, #25
 808da52:	bf88      	it	hi
 808da54:	4770      	bxhi	lr
 808da56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808da5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808da5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 808da62:	bf18      	it	ne
 808da64:	4240      	negne	r0, r0
 808da66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808da6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 808da6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 808da72:	bf18      	it	ne
 808da74:	4249      	negne	r1, r1
 808da76:	ea92 0f03 	teq	r2, r3
 808da7a:	d03f      	beq.n	808dafc <__addsf3+0xd8>
 808da7c:	f1a2 0201 	sub.w	r2, r2, #1
 808da80:	fa41 fc03 	asr.w	ip, r1, r3
 808da84:	eb10 000c 	adds.w	r0, r0, ip
 808da88:	f1c3 0320 	rsb	r3, r3, #32
 808da8c:	fa01 f103 	lsl.w	r1, r1, r3
 808da90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808da94:	d502      	bpl.n	808da9c <__addsf3+0x78>
 808da96:	4249      	negs	r1, r1
 808da98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 808da9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 808daa0:	d313      	bcc.n	808daca <__addsf3+0xa6>
 808daa2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 808daa6:	d306      	bcc.n	808dab6 <__addsf3+0x92>
 808daa8:	0840      	lsrs	r0, r0, #1
 808daaa:	ea4f 0131 	mov.w	r1, r1, rrx
 808daae:	f102 0201 	add.w	r2, r2, #1
 808dab2:	2afe      	cmp	r2, #254	; 0xfe
 808dab4:	d251      	bcs.n	808db5a <__addsf3+0x136>
 808dab6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 808daba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808dabe:	bf08      	it	eq
 808dac0:	f020 0001 	biceq.w	r0, r0, #1
 808dac4:	ea40 0003 	orr.w	r0, r0, r3
 808dac8:	4770      	bx	lr
 808daca:	0049      	lsls	r1, r1, #1
 808dacc:	eb40 0000 	adc.w	r0, r0, r0
 808dad0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 808dad4:	f1a2 0201 	sub.w	r2, r2, #1
 808dad8:	d1ed      	bne.n	808dab6 <__addsf3+0x92>
 808dada:	fab0 fc80 	clz	ip, r0
 808dade:	f1ac 0c08 	sub.w	ip, ip, #8
 808dae2:	ebb2 020c 	subs.w	r2, r2, ip
 808dae6:	fa00 f00c 	lsl.w	r0, r0, ip
 808daea:	bfaa      	itet	ge
 808daec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 808daf0:	4252      	neglt	r2, r2
 808daf2:	4318      	orrge	r0, r3
 808daf4:	bfbc      	itt	lt
 808daf6:	40d0      	lsrlt	r0, r2
 808daf8:	4318      	orrlt	r0, r3
 808dafa:	4770      	bx	lr
 808dafc:	f092 0f00 	teq	r2, #0
 808db00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 808db04:	bf06      	itte	eq
 808db06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 808db0a:	3201      	addeq	r2, #1
 808db0c:	3b01      	subne	r3, #1
 808db0e:	e7b5      	b.n	808da7c <__addsf3+0x58>
 808db10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808db14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808db18:	bf18      	it	ne
 808db1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808db1e:	d021      	beq.n	808db64 <__addsf3+0x140>
 808db20:	ea92 0f03 	teq	r2, r3
 808db24:	d004      	beq.n	808db30 <__addsf3+0x10c>
 808db26:	f092 0f00 	teq	r2, #0
 808db2a:	bf08      	it	eq
 808db2c:	4608      	moveq	r0, r1
 808db2e:	4770      	bx	lr
 808db30:	ea90 0f01 	teq	r0, r1
 808db34:	bf1c      	itt	ne
 808db36:	2000      	movne	r0, #0
 808db38:	4770      	bxne	lr
 808db3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 808db3e:	d104      	bne.n	808db4a <__addsf3+0x126>
 808db40:	0040      	lsls	r0, r0, #1
 808db42:	bf28      	it	cs
 808db44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 808db48:	4770      	bx	lr
 808db4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 808db4e:	bf3c      	itt	cc
 808db50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 808db54:	4770      	bxcc	lr
 808db56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808db5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 808db5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808db62:	4770      	bx	lr
 808db64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 808db68:	bf16      	itet	ne
 808db6a:	4608      	movne	r0, r1
 808db6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 808db70:	4601      	movne	r1, r0
 808db72:	0242      	lsls	r2, r0, #9
 808db74:	bf06      	itte	eq
 808db76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 808db7a:	ea90 0f01 	teqeq	r0, r1
 808db7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 808db82:	4770      	bx	lr

0808db84 <__aeabi_ui2f>:
 808db84:	f04f 0300 	mov.w	r3, #0
 808db88:	e004      	b.n	808db94 <__aeabi_i2f+0x8>
 808db8a:	bf00      	nop

0808db8c <__aeabi_i2f>:
 808db8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 808db90:	bf48      	it	mi
 808db92:	4240      	negmi	r0, r0
 808db94:	ea5f 0c00 	movs.w	ip, r0
 808db98:	bf08      	it	eq
 808db9a:	4770      	bxeq	lr
 808db9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 808dba0:	4601      	mov	r1, r0
 808dba2:	f04f 0000 	mov.w	r0, #0
 808dba6:	e01c      	b.n	808dbe2 <__aeabi_l2f+0x2a>

0808dba8 <__aeabi_ul2f>:
 808dba8:	ea50 0201 	orrs.w	r2, r0, r1
 808dbac:	bf08      	it	eq
 808dbae:	4770      	bxeq	lr
 808dbb0:	f04f 0300 	mov.w	r3, #0
 808dbb4:	e00a      	b.n	808dbcc <__aeabi_l2f+0x14>
 808dbb6:	bf00      	nop

0808dbb8 <__aeabi_l2f>:
 808dbb8:	ea50 0201 	orrs.w	r2, r0, r1
 808dbbc:	bf08      	it	eq
 808dbbe:	4770      	bxeq	lr
 808dbc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 808dbc4:	d502      	bpl.n	808dbcc <__aeabi_l2f+0x14>
 808dbc6:	4240      	negs	r0, r0
 808dbc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808dbcc:	ea5f 0c01 	movs.w	ip, r1
 808dbd0:	bf02      	ittt	eq
 808dbd2:	4684      	moveq	ip, r0
 808dbd4:	4601      	moveq	r1, r0
 808dbd6:	2000      	moveq	r0, #0
 808dbd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 808dbdc:	bf08      	it	eq
 808dbde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 808dbe2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 808dbe6:	fabc f28c 	clz	r2, ip
 808dbea:	3a08      	subs	r2, #8
 808dbec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 808dbf0:	db10      	blt.n	808dc14 <__aeabi_l2f+0x5c>
 808dbf2:	fa01 fc02 	lsl.w	ip, r1, r2
 808dbf6:	4463      	add	r3, ip
 808dbf8:	fa00 fc02 	lsl.w	ip, r0, r2
 808dbfc:	f1c2 0220 	rsb	r2, r2, #32
 808dc00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 808dc04:	fa20 f202 	lsr.w	r2, r0, r2
 808dc08:	eb43 0002 	adc.w	r0, r3, r2
 808dc0c:	bf08      	it	eq
 808dc0e:	f020 0001 	biceq.w	r0, r0, #1
 808dc12:	4770      	bx	lr
 808dc14:	f102 0220 	add.w	r2, r2, #32
 808dc18:	fa01 fc02 	lsl.w	ip, r1, r2
 808dc1c:	f1c2 0220 	rsb	r2, r2, #32
 808dc20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 808dc24:	fa21 f202 	lsr.w	r2, r1, r2
 808dc28:	eb43 0002 	adc.w	r0, r3, r2
 808dc2c:	bf08      	it	eq
 808dc2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808dc32:	4770      	bx	lr

0808dc34 <__aeabi_fmul>:
 808dc34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808dc38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808dc3c:	bf1e      	ittt	ne
 808dc3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808dc42:	ea92 0f0c 	teqne	r2, ip
 808dc46:	ea93 0f0c 	teqne	r3, ip
 808dc4a:	d06f      	beq.n	808dd2c <__aeabi_fmul+0xf8>
 808dc4c:	441a      	add	r2, r3
 808dc4e:	ea80 0c01 	eor.w	ip, r0, r1
 808dc52:	0240      	lsls	r0, r0, #9
 808dc54:	bf18      	it	ne
 808dc56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 808dc5a:	d01e      	beq.n	808dc9a <__aeabi_fmul+0x66>
 808dc5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 808dc60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 808dc64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 808dc68:	fba0 3101 	umull	r3, r1, r0, r1
 808dc6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808dc70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 808dc74:	bf3e      	ittt	cc
 808dc76:	0049      	lslcc	r1, r1, #1
 808dc78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 808dc7c:	005b      	lslcc	r3, r3, #1
 808dc7e:	ea40 0001 	orr.w	r0, r0, r1
 808dc82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 808dc86:	2afd      	cmp	r2, #253	; 0xfd
 808dc88:	d81d      	bhi.n	808dcc6 <__aeabi_fmul+0x92>
 808dc8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 808dc8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808dc92:	bf08      	it	eq
 808dc94:	f020 0001 	biceq.w	r0, r0, #1
 808dc98:	4770      	bx	lr
 808dc9a:	f090 0f00 	teq	r0, #0
 808dc9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808dca2:	bf08      	it	eq
 808dca4:	0249      	lsleq	r1, r1, #9
 808dca6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808dcaa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 808dcae:	3a7f      	subs	r2, #127	; 0x7f
 808dcb0:	bfc2      	ittt	gt
 808dcb2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808dcb6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808dcba:	4770      	bxgt	lr
 808dcbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808dcc0:	f04f 0300 	mov.w	r3, #0
 808dcc4:	3a01      	subs	r2, #1
 808dcc6:	dc5d      	bgt.n	808dd84 <__aeabi_fmul+0x150>
 808dcc8:	f112 0f19 	cmn.w	r2, #25
 808dccc:	bfdc      	itt	le
 808dcce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 808dcd2:	4770      	bxle	lr
 808dcd4:	f1c2 0200 	rsb	r2, r2, #0
 808dcd8:	0041      	lsls	r1, r0, #1
 808dcda:	fa21 f102 	lsr.w	r1, r1, r2
 808dcde:	f1c2 0220 	rsb	r2, r2, #32
 808dce2:	fa00 fc02 	lsl.w	ip, r0, r2
 808dce6:	ea5f 0031 	movs.w	r0, r1, rrx
 808dcea:	f140 0000 	adc.w	r0, r0, #0
 808dcee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 808dcf2:	bf08      	it	eq
 808dcf4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808dcf8:	4770      	bx	lr
 808dcfa:	f092 0f00 	teq	r2, #0
 808dcfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808dd02:	bf02      	ittt	eq
 808dd04:	0040      	lsleq	r0, r0, #1
 808dd06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808dd0a:	3a01      	subeq	r2, #1
 808dd0c:	d0f9      	beq.n	808dd02 <__aeabi_fmul+0xce>
 808dd0e:	ea40 000c 	orr.w	r0, r0, ip
 808dd12:	f093 0f00 	teq	r3, #0
 808dd16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808dd1a:	bf02      	ittt	eq
 808dd1c:	0049      	lsleq	r1, r1, #1
 808dd1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808dd22:	3b01      	subeq	r3, #1
 808dd24:	d0f9      	beq.n	808dd1a <__aeabi_fmul+0xe6>
 808dd26:	ea41 010c 	orr.w	r1, r1, ip
 808dd2a:	e78f      	b.n	808dc4c <__aeabi_fmul+0x18>
 808dd2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 808dd30:	ea92 0f0c 	teq	r2, ip
 808dd34:	bf18      	it	ne
 808dd36:	ea93 0f0c 	teqne	r3, ip
 808dd3a:	d00a      	beq.n	808dd52 <__aeabi_fmul+0x11e>
 808dd3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808dd40:	bf18      	it	ne
 808dd42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808dd46:	d1d8      	bne.n	808dcfa <__aeabi_fmul+0xc6>
 808dd48:	ea80 0001 	eor.w	r0, r0, r1
 808dd4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808dd50:	4770      	bx	lr
 808dd52:	f090 0f00 	teq	r0, #0
 808dd56:	bf17      	itett	ne
 808dd58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 808dd5c:	4608      	moveq	r0, r1
 808dd5e:	f091 0f00 	teqne	r1, #0
 808dd62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 808dd66:	d014      	beq.n	808dd92 <__aeabi_fmul+0x15e>
 808dd68:	ea92 0f0c 	teq	r2, ip
 808dd6c:	d101      	bne.n	808dd72 <__aeabi_fmul+0x13e>
 808dd6e:	0242      	lsls	r2, r0, #9
 808dd70:	d10f      	bne.n	808dd92 <__aeabi_fmul+0x15e>
 808dd72:	ea93 0f0c 	teq	r3, ip
 808dd76:	d103      	bne.n	808dd80 <__aeabi_fmul+0x14c>
 808dd78:	024b      	lsls	r3, r1, #9
 808dd7a:	bf18      	it	ne
 808dd7c:	4608      	movne	r0, r1
 808dd7e:	d108      	bne.n	808dd92 <__aeabi_fmul+0x15e>
 808dd80:	ea80 0001 	eor.w	r0, r0, r1
 808dd84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808dd88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808dd8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808dd90:	4770      	bx	lr
 808dd92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808dd96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 808dd9a:	4770      	bx	lr

0808dd9c <__aeabi_fdiv>:
 808dd9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808dda0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808dda4:	bf1e      	ittt	ne
 808dda6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808ddaa:	ea92 0f0c 	teqne	r2, ip
 808ddae:	ea93 0f0c 	teqne	r3, ip
 808ddb2:	d069      	beq.n	808de88 <__aeabi_fdiv+0xec>
 808ddb4:	eba2 0203 	sub.w	r2, r2, r3
 808ddb8:	ea80 0c01 	eor.w	ip, r0, r1
 808ddbc:	0249      	lsls	r1, r1, #9
 808ddbe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 808ddc2:	d037      	beq.n	808de34 <__aeabi_fdiv+0x98>
 808ddc4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 808ddc8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 808ddcc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 808ddd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808ddd4:	428b      	cmp	r3, r1
 808ddd6:	bf38      	it	cc
 808ddd8:	005b      	lslcc	r3, r3, #1
 808ddda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 808ddde:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 808dde2:	428b      	cmp	r3, r1
 808dde4:	bf24      	itt	cs
 808dde6:	1a5b      	subcs	r3, r3, r1
 808dde8:	ea40 000c 	orrcs.w	r0, r0, ip
 808ddec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 808ddf0:	bf24      	itt	cs
 808ddf2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 808ddf6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808ddfa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 808ddfe:	bf24      	itt	cs
 808de00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 808de04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808de08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 808de0c:	bf24      	itt	cs
 808de0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 808de12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808de16:	011b      	lsls	r3, r3, #4
 808de18:	bf18      	it	ne
 808de1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 808de1e:	d1e0      	bne.n	808dde2 <__aeabi_fdiv+0x46>
 808de20:	2afd      	cmp	r2, #253	; 0xfd
 808de22:	f63f af50 	bhi.w	808dcc6 <__aeabi_fmul+0x92>
 808de26:	428b      	cmp	r3, r1
 808de28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808de2c:	bf08      	it	eq
 808de2e:	f020 0001 	biceq.w	r0, r0, #1
 808de32:	4770      	bx	lr
 808de34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808de38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808de3c:	327f      	adds	r2, #127	; 0x7f
 808de3e:	bfc2      	ittt	gt
 808de40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808de44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808de48:	4770      	bxgt	lr
 808de4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808de4e:	f04f 0300 	mov.w	r3, #0
 808de52:	3a01      	subs	r2, #1
 808de54:	e737      	b.n	808dcc6 <__aeabi_fmul+0x92>
 808de56:	f092 0f00 	teq	r2, #0
 808de5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808de5e:	bf02      	ittt	eq
 808de60:	0040      	lsleq	r0, r0, #1
 808de62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808de66:	3a01      	subeq	r2, #1
 808de68:	d0f9      	beq.n	808de5e <__aeabi_fdiv+0xc2>
 808de6a:	ea40 000c 	orr.w	r0, r0, ip
 808de6e:	f093 0f00 	teq	r3, #0
 808de72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808de76:	bf02      	ittt	eq
 808de78:	0049      	lsleq	r1, r1, #1
 808de7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808de7e:	3b01      	subeq	r3, #1
 808de80:	d0f9      	beq.n	808de76 <__aeabi_fdiv+0xda>
 808de82:	ea41 010c 	orr.w	r1, r1, ip
 808de86:	e795      	b.n	808ddb4 <__aeabi_fdiv+0x18>
 808de88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 808de8c:	ea92 0f0c 	teq	r2, ip
 808de90:	d108      	bne.n	808dea4 <__aeabi_fdiv+0x108>
 808de92:	0242      	lsls	r2, r0, #9
 808de94:	f47f af7d 	bne.w	808dd92 <__aeabi_fmul+0x15e>
 808de98:	ea93 0f0c 	teq	r3, ip
 808de9c:	f47f af70 	bne.w	808dd80 <__aeabi_fmul+0x14c>
 808dea0:	4608      	mov	r0, r1
 808dea2:	e776      	b.n	808dd92 <__aeabi_fmul+0x15e>
 808dea4:	ea93 0f0c 	teq	r3, ip
 808dea8:	d104      	bne.n	808deb4 <__aeabi_fdiv+0x118>
 808deaa:	024b      	lsls	r3, r1, #9
 808deac:	f43f af4c 	beq.w	808dd48 <__aeabi_fmul+0x114>
 808deb0:	4608      	mov	r0, r1
 808deb2:	e76e      	b.n	808dd92 <__aeabi_fmul+0x15e>
 808deb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808deb8:	bf18      	it	ne
 808deba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808debe:	d1ca      	bne.n	808de56 <__aeabi_fdiv+0xba>
 808dec0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 808dec4:	f47f af5c 	bne.w	808dd80 <__aeabi_fmul+0x14c>
 808dec8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 808decc:	f47f af3c 	bne.w	808dd48 <__aeabi_fmul+0x114>
 808ded0:	e75f      	b.n	808dd92 <__aeabi_fmul+0x15e>
 808ded2:	bf00      	nop

0808ded4 <__gesf2>:
 808ded4:	f04f 3cff 	mov.w	ip, #4294967295
 808ded8:	e006      	b.n	808dee8 <__cmpsf2+0x4>
 808deda:	bf00      	nop

0808dedc <__lesf2>:
 808dedc:	f04f 0c01 	mov.w	ip, #1
 808dee0:	e002      	b.n	808dee8 <__cmpsf2+0x4>
 808dee2:	bf00      	nop

0808dee4 <__cmpsf2>:
 808dee4:	f04f 0c01 	mov.w	ip, #1
 808dee8:	f84d cd04 	str.w	ip, [sp, #-4]!
 808deec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808def0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808def4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808def8:	bf18      	it	ne
 808defa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808defe:	d011      	beq.n	808df24 <__cmpsf2+0x40>
 808df00:	b001      	add	sp, #4
 808df02:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 808df06:	bf18      	it	ne
 808df08:	ea90 0f01 	teqne	r0, r1
 808df0c:	bf58      	it	pl
 808df0e:	ebb2 0003 	subspl.w	r0, r2, r3
 808df12:	bf88      	it	hi
 808df14:	17c8      	asrhi	r0, r1, #31
 808df16:	bf38      	it	cc
 808df18:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 808df1c:	bf18      	it	ne
 808df1e:	f040 0001 	orrne.w	r0, r0, #1
 808df22:	4770      	bx	lr
 808df24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808df28:	d102      	bne.n	808df30 <__cmpsf2+0x4c>
 808df2a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 808df2e:	d105      	bne.n	808df3c <__cmpsf2+0x58>
 808df30:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 808df34:	d1e4      	bne.n	808df00 <__cmpsf2+0x1c>
 808df36:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 808df3a:	d0e1      	beq.n	808df00 <__cmpsf2+0x1c>
 808df3c:	f85d 0b04 	ldr.w	r0, [sp], #4
 808df40:	4770      	bx	lr
 808df42:	bf00      	nop

0808df44 <__aeabi_cfrcmple>:
 808df44:	4684      	mov	ip, r0
 808df46:	4608      	mov	r0, r1
 808df48:	4661      	mov	r1, ip
 808df4a:	e7ff      	b.n	808df4c <__aeabi_cfcmpeq>

0808df4c <__aeabi_cfcmpeq>:
 808df4c:	b50f      	push	{r0, r1, r2, r3, lr}
 808df4e:	f7ff ffc9 	bl	808dee4 <__cmpsf2>
 808df52:	2800      	cmp	r0, #0
 808df54:	bf48      	it	mi
 808df56:	f110 0f00 	cmnmi.w	r0, #0
 808df5a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0808df5c <__aeabi_fcmpeq>:
 808df5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 808df60:	f7ff fff4 	bl	808df4c <__aeabi_cfcmpeq>
 808df64:	bf0c      	ite	eq
 808df66:	2001      	moveq	r0, #1
 808df68:	2000      	movne	r0, #0
 808df6a:	f85d fb08 	ldr.w	pc, [sp], #8
 808df6e:	bf00      	nop

0808df70 <__aeabi_fcmplt>:
 808df70:	f84d ed08 	str.w	lr, [sp, #-8]!
 808df74:	f7ff ffea 	bl	808df4c <__aeabi_cfcmpeq>
 808df78:	bf34      	ite	cc
 808df7a:	2001      	movcc	r0, #1
 808df7c:	2000      	movcs	r0, #0
 808df7e:	f85d fb08 	ldr.w	pc, [sp], #8
 808df82:	bf00      	nop

0808df84 <__aeabi_fcmple>:
 808df84:	f84d ed08 	str.w	lr, [sp, #-8]!
 808df88:	f7ff ffe0 	bl	808df4c <__aeabi_cfcmpeq>
 808df8c:	bf94      	ite	ls
 808df8e:	2001      	movls	r0, #1
 808df90:	2000      	movhi	r0, #0
 808df92:	f85d fb08 	ldr.w	pc, [sp], #8
 808df96:	bf00      	nop

0808df98 <__aeabi_fcmpge>:
 808df98:	f84d ed08 	str.w	lr, [sp, #-8]!
 808df9c:	f7ff ffd2 	bl	808df44 <__aeabi_cfrcmple>
 808dfa0:	bf94      	ite	ls
 808dfa2:	2001      	movls	r0, #1
 808dfa4:	2000      	movhi	r0, #0
 808dfa6:	f85d fb08 	ldr.w	pc, [sp], #8
 808dfaa:	bf00      	nop

0808dfac <__aeabi_fcmpgt>:
 808dfac:	f84d ed08 	str.w	lr, [sp, #-8]!
 808dfb0:	f7ff ffc8 	bl	808df44 <__aeabi_cfrcmple>
 808dfb4:	bf34      	ite	cc
 808dfb6:	2001      	movcc	r0, #1
 808dfb8:	2000      	movcs	r0, #0
 808dfba:	f85d fb08 	ldr.w	pc, [sp], #8
 808dfbe:	bf00      	nop

0808dfc0 <__aeabi_f2iz>:
 808dfc0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808dfc4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 808dfc8:	d30f      	bcc.n	808dfea <__aeabi_f2iz+0x2a>
 808dfca:	f04f 039e 	mov.w	r3, #158	; 0x9e
 808dfce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 808dfd2:	d90d      	bls.n	808dff0 <__aeabi_f2iz+0x30>
 808dfd4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 808dfd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808dfdc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808dfe0:	fa23 f002 	lsr.w	r0, r3, r2
 808dfe4:	bf18      	it	ne
 808dfe6:	4240      	negne	r0, r0
 808dfe8:	4770      	bx	lr
 808dfea:	f04f 0000 	mov.w	r0, #0
 808dfee:	4770      	bx	lr
 808dff0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 808dff4:	d101      	bne.n	808dffa <__aeabi_f2iz+0x3a>
 808dff6:	0242      	lsls	r2, r0, #9
 808dff8:	d105      	bne.n	808e006 <__aeabi_f2iz+0x46>
 808dffa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 808dffe:	bf08      	it	eq
 808e000:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808e004:	4770      	bx	lr
 808e006:	f04f 0000 	mov.w	r0, #0
 808e00a:	4770      	bx	lr

0808e00c <__aeabi_ldivmod>:
 808e00c:	b97b      	cbnz	r3, 808e02e <__aeabi_ldivmod+0x22>
 808e00e:	b972      	cbnz	r2, 808e02e <__aeabi_ldivmod+0x22>
 808e010:	2900      	cmp	r1, #0
 808e012:	bfbe      	ittt	lt
 808e014:	2000      	movlt	r0, #0
 808e016:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 808e01a:	e006      	blt.n	808e02a <__aeabi_ldivmod+0x1e>
 808e01c:	bf08      	it	eq
 808e01e:	2800      	cmpeq	r0, #0
 808e020:	bf1c      	itt	ne
 808e022:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 808e026:	f04f 30ff 	movne.w	r0, #4294967295
 808e02a:	f000 b9f1 	b.w	808e410 <__aeabi_idiv0>
 808e02e:	f1ad 0c08 	sub.w	ip, sp, #8
 808e032:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 808e036:	2900      	cmp	r1, #0
 808e038:	db09      	blt.n	808e04e <__aeabi_ldivmod+0x42>
 808e03a:	2b00      	cmp	r3, #0
 808e03c:	db1a      	blt.n	808e074 <__aeabi_ldivmod+0x68>
 808e03e:	f000 f871 	bl	808e124 <__udivmoddi4>
 808e042:	f8dd e004 	ldr.w	lr, [sp, #4]
 808e046:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808e04a:	b004      	add	sp, #16
 808e04c:	4770      	bx	lr
 808e04e:	4240      	negs	r0, r0
 808e050:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808e054:	2b00      	cmp	r3, #0
 808e056:	db1b      	blt.n	808e090 <__aeabi_ldivmod+0x84>
 808e058:	f000 f864 	bl	808e124 <__udivmoddi4>
 808e05c:	f8dd e004 	ldr.w	lr, [sp, #4]
 808e060:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808e064:	b004      	add	sp, #16
 808e066:	4240      	negs	r0, r0
 808e068:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808e06c:	4252      	negs	r2, r2
 808e06e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808e072:	4770      	bx	lr
 808e074:	4252      	negs	r2, r2
 808e076:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808e07a:	f000 f853 	bl	808e124 <__udivmoddi4>
 808e07e:	f8dd e004 	ldr.w	lr, [sp, #4]
 808e082:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808e086:	b004      	add	sp, #16
 808e088:	4240      	negs	r0, r0
 808e08a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808e08e:	4770      	bx	lr
 808e090:	4252      	negs	r2, r2
 808e092:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808e096:	f000 f845 	bl	808e124 <__udivmoddi4>
 808e09a:	f8dd e004 	ldr.w	lr, [sp, #4]
 808e09e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808e0a2:	b004      	add	sp, #16
 808e0a4:	4252      	negs	r2, r2
 808e0a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808e0aa:	4770      	bx	lr

0808e0ac <__aeabi_uldivmod>:
 808e0ac:	b953      	cbnz	r3, 808e0c4 <__aeabi_uldivmod+0x18>
 808e0ae:	b94a      	cbnz	r2, 808e0c4 <__aeabi_uldivmod+0x18>
 808e0b0:	2900      	cmp	r1, #0
 808e0b2:	bf08      	it	eq
 808e0b4:	2800      	cmpeq	r0, #0
 808e0b6:	bf1c      	itt	ne
 808e0b8:	f04f 31ff 	movne.w	r1, #4294967295
 808e0bc:	f04f 30ff 	movne.w	r0, #4294967295
 808e0c0:	f000 b9a6 	b.w	808e410 <__aeabi_idiv0>
 808e0c4:	f1ad 0c08 	sub.w	ip, sp, #8
 808e0c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 808e0cc:	f000 f82a 	bl	808e124 <__udivmoddi4>
 808e0d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 808e0d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808e0d8:	b004      	add	sp, #16
 808e0da:	4770      	bx	lr

0808e0dc <__aeabi_d2ulz>:
 808e0dc:	b5d0      	push	{r4, r6, r7, lr}
 808e0de:	2200      	movs	r2, #0
 808e0e0:	4b0e      	ldr	r3, [pc, #56]	; (808e11c <__aeabi_d2ulz+0x40>)
 808e0e2:	4606      	mov	r6, r0
 808e0e4:	460f      	mov	r7, r1
 808e0e6:	f7ff f94f 	bl	808d388 <__aeabi_dmul>
 808e0ea:	f7ff fc25 	bl	808d938 <__aeabi_d2uiz>
 808e0ee:	4604      	mov	r4, r0
 808e0f0:	f7ff f8d4 	bl	808d29c <__aeabi_ui2d>
 808e0f4:	2200      	movs	r2, #0
 808e0f6:	4b0a      	ldr	r3, [pc, #40]	; (808e120 <__aeabi_d2ulz+0x44>)
 808e0f8:	f7ff f946 	bl	808d388 <__aeabi_dmul>
 808e0fc:	4602      	mov	r2, r0
 808e0fe:	460b      	mov	r3, r1
 808e100:	4630      	mov	r0, r6
 808e102:	4639      	mov	r1, r7
 808e104:	f7fe ff8c 	bl	808d020 <__aeabi_dsub>
 808e108:	f7ff fc16 	bl	808d938 <__aeabi_d2uiz>
 808e10c:	4623      	mov	r3, r4
 808e10e:	2200      	movs	r2, #0
 808e110:	ea42 0200 	orr.w	r2, r2, r0
 808e114:	4610      	mov	r0, r2
 808e116:	4619      	mov	r1, r3
 808e118:	bdd0      	pop	{r4, r6, r7, pc}
 808e11a:	bf00      	nop
 808e11c:	3df00000 	.word	0x3df00000
 808e120:	41f00000 	.word	0x41f00000

0808e124 <__udivmoddi4>:
 808e124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808e128:	468c      	mov	ip, r1
 808e12a:	460c      	mov	r4, r1
 808e12c:	4605      	mov	r5, r0
 808e12e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 808e130:	2b00      	cmp	r3, #0
 808e132:	d14f      	bne.n	808e1d4 <__udivmoddi4+0xb0>
 808e134:	428a      	cmp	r2, r1
 808e136:	4617      	mov	r7, r2
 808e138:	d96b      	bls.n	808e212 <__udivmoddi4+0xee>
 808e13a:	fab2 fe82 	clz	lr, r2
 808e13e:	f1be 0f00 	cmp.w	lr, #0
 808e142:	d00b      	beq.n	808e15c <__udivmoddi4+0x38>
 808e144:	f1ce 0520 	rsb	r5, lr, #32
 808e148:	fa20 f505 	lsr.w	r5, r0, r5
 808e14c:	fa01 f30e 	lsl.w	r3, r1, lr
 808e150:	ea45 0c03 	orr.w	ip, r5, r3
 808e154:	fa02 f70e 	lsl.w	r7, r2, lr
 808e158:	fa00 f50e 	lsl.w	r5, r0, lr
 808e15c:	0c39      	lsrs	r1, r7, #16
 808e15e:	fbbc f0f1 	udiv	r0, ip, r1
 808e162:	b2ba      	uxth	r2, r7
 808e164:	fb01 c310 	mls	r3, r1, r0, ip
 808e168:	fb00 f802 	mul.w	r8, r0, r2
 808e16c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 808e170:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 808e174:	45a0      	cmp	r8, r4
 808e176:	d909      	bls.n	808e18c <__udivmoddi4+0x68>
 808e178:	19e4      	adds	r4, r4, r7
 808e17a:	f100 33ff 	add.w	r3, r0, #4294967295
 808e17e:	f080 8128 	bcs.w	808e3d2 <__udivmoddi4+0x2ae>
 808e182:	45a0      	cmp	r8, r4
 808e184:	f240 8125 	bls.w	808e3d2 <__udivmoddi4+0x2ae>
 808e188:	3802      	subs	r0, #2
 808e18a:	443c      	add	r4, r7
 808e18c:	ebc8 0404 	rsb	r4, r8, r4
 808e190:	fbb4 f3f1 	udiv	r3, r4, r1
 808e194:	fb01 4c13 	mls	ip, r1, r3, r4
 808e198:	fb03 f202 	mul.w	r2, r3, r2
 808e19c:	b2ac      	uxth	r4, r5
 808e19e:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 808e1a2:	428a      	cmp	r2, r1
 808e1a4:	d909      	bls.n	808e1ba <__udivmoddi4+0x96>
 808e1a6:	19c9      	adds	r1, r1, r7
 808e1a8:	f103 34ff 	add.w	r4, r3, #4294967295
 808e1ac:	f080 810f 	bcs.w	808e3ce <__udivmoddi4+0x2aa>
 808e1b0:	428a      	cmp	r2, r1
 808e1b2:	f240 810c 	bls.w	808e3ce <__udivmoddi4+0x2aa>
 808e1b6:	3b02      	subs	r3, #2
 808e1b8:	4439      	add	r1, r7
 808e1ba:	1a8a      	subs	r2, r1, r2
 808e1bc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 808e1c0:	2100      	movs	r1, #0
 808e1c2:	2e00      	cmp	r6, #0
 808e1c4:	d063      	beq.n	808e28e <__udivmoddi4+0x16a>
 808e1c6:	fa22 f20e 	lsr.w	r2, r2, lr
 808e1ca:	2300      	movs	r3, #0
 808e1cc:	e886 000c 	stmia.w	r6, {r2, r3}
 808e1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808e1d4:	428b      	cmp	r3, r1
 808e1d6:	d907      	bls.n	808e1e8 <__udivmoddi4+0xc4>
 808e1d8:	2e00      	cmp	r6, #0
 808e1da:	d056      	beq.n	808e28a <__udivmoddi4+0x166>
 808e1dc:	2100      	movs	r1, #0
 808e1de:	e886 0011 	stmia.w	r6, {r0, r4}
 808e1e2:	4608      	mov	r0, r1
 808e1e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808e1e8:	fab3 f183 	clz	r1, r3
 808e1ec:	2900      	cmp	r1, #0
 808e1ee:	f040 8093 	bne.w	808e318 <__udivmoddi4+0x1f4>
 808e1f2:	42a3      	cmp	r3, r4
 808e1f4:	d302      	bcc.n	808e1fc <__udivmoddi4+0xd8>
 808e1f6:	4282      	cmp	r2, r0
 808e1f8:	f200 80fe 	bhi.w	808e3f8 <__udivmoddi4+0x2d4>
 808e1fc:	1a85      	subs	r5, r0, r2
 808e1fe:	eb64 0303 	sbc.w	r3, r4, r3
 808e202:	469c      	mov	ip, r3
 808e204:	2001      	movs	r0, #1
 808e206:	2e00      	cmp	r6, #0
 808e208:	d041      	beq.n	808e28e <__udivmoddi4+0x16a>
 808e20a:	e886 1020 	stmia.w	r6, {r5, ip}
 808e20e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808e212:	b912      	cbnz	r2, 808e21a <__udivmoddi4+0xf6>
 808e214:	2701      	movs	r7, #1
 808e216:	fbb7 f7f2 	udiv	r7, r7, r2
 808e21a:	fab7 fe87 	clz	lr, r7
 808e21e:	f1be 0f00 	cmp.w	lr, #0
 808e222:	d136      	bne.n	808e292 <__udivmoddi4+0x16e>
 808e224:	1be4      	subs	r4, r4, r7
 808e226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 808e22a:	fa1f f987 	uxth.w	r9, r7
 808e22e:	2101      	movs	r1, #1
 808e230:	fbb4 f3f8 	udiv	r3, r4, r8
 808e234:	fb08 4413 	mls	r4, r8, r3, r4
 808e238:	fb09 f203 	mul.w	r2, r9, r3
 808e23c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 808e240:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 808e244:	42a2      	cmp	r2, r4
 808e246:	d907      	bls.n	808e258 <__udivmoddi4+0x134>
 808e248:	19e4      	adds	r4, r4, r7
 808e24a:	f103 30ff 	add.w	r0, r3, #4294967295
 808e24e:	d202      	bcs.n	808e256 <__udivmoddi4+0x132>
 808e250:	42a2      	cmp	r2, r4
 808e252:	f200 80d3 	bhi.w	808e3fc <__udivmoddi4+0x2d8>
 808e256:	4603      	mov	r3, r0
 808e258:	1aa4      	subs	r4, r4, r2
 808e25a:	fbb4 f0f8 	udiv	r0, r4, r8
 808e25e:	fb08 4810 	mls	r8, r8, r0, r4
 808e262:	fb09 f900 	mul.w	r9, r9, r0
 808e266:	b2ac      	uxth	r4, r5
 808e268:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 808e26c:	4591      	cmp	r9, r2
 808e26e:	d907      	bls.n	808e280 <__udivmoddi4+0x15c>
 808e270:	19d2      	adds	r2, r2, r7
 808e272:	f100 34ff 	add.w	r4, r0, #4294967295
 808e276:	d202      	bcs.n	808e27e <__udivmoddi4+0x15a>
 808e278:	4591      	cmp	r9, r2
 808e27a:	f200 80ba 	bhi.w	808e3f2 <__udivmoddi4+0x2ce>
 808e27e:	4620      	mov	r0, r4
 808e280:	ebc9 0202 	rsb	r2, r9, r2
 808e284:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 808e288:	e79b      	b.n	808e1c2 <__udivmoddi4+0x9e>
 808e28a:	4631      	mov	r1, r6
 808e28c:	4630      	mov	r0, r6
 808e28e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808e292:	fa07 f70e 	lsl.w	r7, r7, lr
 808e296:	f1ce 0c20 	rsb	ip, lr, #32
 808e29a:	fa24 f30c 	lsr.w	r3, r4, ip
 808e29e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 808e2a2:	fbb3 faf8 	udiv	sl, r3, r8
 808e2a6:	fa1f f987 	uxth.w	r9, r7
 808e2aa:	fb08 351a 	mls	r5, r8, sl, r3
 808e2ae:	fa20 fc0c 	lsr.w	ip, r0, ip
 808e2b2:	fa04 f40e 	lsl.w	r4, r4, lr
 808e2b6:	fb0a fb09 	mul.w	fp, sl, r9
 808e2ba:	ea4c 0c04 	orr.w	ip, ip, r4
 808e2be:	ea4f 421c 	mov.w	r2, ip, lsr #16
 808e2c2:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 808e2c6:	459b      	cmp	fp, r3
 808e2c8:	fa00 f50e 	lsl.w	r5, r0, lr
 808e2cc:	d90a      	bls.n	808e2e4 <__udivmoddi4+0x1c0>
 808e2ce:	19db      	adds	r3, r3, r7
 808e2d0:	f10a 32ff 	add.w	r2, sl, #4294967295
 808e2d4:	f080 808b 	bcs.w	808e3ee <__udivmoddi4+0x2ca>
 808e2d8:	459b      	cmp	fp, r3
 808e2da:	f240 8088 	bls.w	808e3ee <__udivmoddi4+0x2ca>
 808e2de:	f1aa 0a02 	sub.w	sl, sl, #2
 808e2e2:	443b      	add	r3, r7
 808e2e4:	ebcb 0303 	rsb	r3, fp, r3
 808e2e8:	fbb3 f0f8 	udiv	r0, r3, r8
 808e2ec:	fb08 3310 	mls	r3, r8, r0, r3
 808e2f0:	fb00 f409 	mul.w	r4, r0, r9
 808e2f4:	fa1f fc8c 	uxth.w	ip, ip
 808e2f8:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 808e2fc:	429c      	cmp	r4, r3
 808e2fe:	d907      	bls.n	808e310 <__udivmoddi4+0x1ec>
 808e300:	19db      	adds	r3, r3, r7
 808e302:	f100 32ff 	add.w	r2, r0, #4294967295
 808e306:	d26e      	bcs.n	808e3e6 <__udivmoddi4+0x2c2>
 808e308:	429c      	cmp	r4, r3
 808e30a:	d96c      	bls.n	808e3e6 <__udivmoddi4+0x2c2>
 808e30c:	3802      	subs	r0, #2
 808e30e:	443b      	add	r3, r7
 808e310:	1b1c      	subs	r4, r3, r4
 808e312:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 808e316:	e78b      	b.n	808e230 <__udivmoddi4+0x10c>
 808e318:	f1c1 0e20 	rsb	lr, r1, #32
 808e31c:	408b      	lsls	r3, r1
 808e31e:	fa22 fc0e 	lsr.w	ip, r2, lr
 808e322:	ea4c 0c03 	orr.w	ip, ip, r3
 808e326:	fa24 f70e 	lsr.w	r7, r4, lr
 808e32a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 808e32e:	fbb7 faf9 	udiv	sl, r7, r9
 808e332:	fa1f f38c 	uxth.w	r3, ip
 808e336:	fb09 771a 	mls	r7, r9, sl, r7
 808e33a:	fa20 f80e 	lsr.w	r8, r0, lr
 808e33e:	408c      	lsls	r4, r1
 808e340:	fb0a f503 	mul.w	r5, sl, r3
 808e344:	ea48 0404 	orr.w	r4, r8, r4
 808e348:	ea4f 4814 	mov.w	r8, r4, lsr #16
 808e34c:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 808e350:	42bd      	cmp	r5, r7
 808e352:	fa02 f201 	lsl.w	r2, r2, r1
 808e356:	fa00 fb01 	lsl.w	fp, r0, r1
 808e35a:	d909      	bls.n	808e370 <__udivmoddi4+0x24c>
 808e35c:	eb17 070c 	adds.w	r7, r7, ip
 808e360:	f10a 30ff 	add.w	r0, sl, #4294967295
 808e364:	d241      	bcs.n	808e3ea <__udivmoddi4+0x2c6>
 808e366:	42bd      	cmp	r5, r7
 808e368:	d93f      	bls.n	808e3ea <__udivmoddi4+0x2c6>
 808e36a:	f1aa 0a02 	sub.w	sl, sl, #2
 808e36e:	4467      	add	r7, ip
 808e370:	1b7f      	subs	r7, r7, r5
 808e372:	fbb7 f5f9 	udiv	r5, r7, r9
 808e376:	fb09 7715 	mls	r7, r9, r5, r7
 808e37a:	fb05 f303 	mul.w	r3, r5, r3
 808e37e:	b2a4      	uxth	r4, r4
 808e380:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 808e384:	42bb      	cmp	r3, r7
 808e386:	d908      	bls.n	808e39a <__udivmoddi4+0x276>
 808e388:	eb17 070c 	adds.w	r7, r7, ip
 808e38c:	f105 30ff 	add.w	r0, r5, #4294967295
 808e390:	d227      	bcs.n	808e3e2 <__udivmoddi4+0x2be>
 808e392:	42bb      	cmp	r3, r7
 808e394:	d925      	bls.n	808e3e2 <__udivmoddi4+0x2be>
 808e396:	3d02      	subs	r5, #2
 808e398:	4467      	add	r7, ip
 808e39a:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 808e39e:	fba0 8902 	umull	r8, r9, r0, r2
 808e3a2:	1aff      	subs	r7, r7, r3
 808e3a4:	454f      	cmp	r7, r9
 808e3a6:	4645      	mov	r5, r8
 808e3a8:	464c      	mov	r4, r9
 808e3aa:	d314      	bcc.n	808e3d6 <__udivmoddi4+0x2b2>
 808e3ac:	d029      	beq.n	808e402 <__udivmoddi4+0x2de>
 808e3ae:	b366      	cbz	r6, 808e40a <__udivmoddi4+0x2e6>
 808e3b0:	ebbb 0305 	subs.w	r3, fp, r5
 808e3b4:	eb67 0704 	sbc.w	r7, r7, r4
 808e3b8:	fa07 fe0e 	lsl.w	lr, r7, lr
 808e3bc:	40cb      	lsrs	r3, r1
 808e3be:	40cf      	lsrs	r7, r1
 808e3c0:	ea4e 0303 	orr.w	r3, lr, r3
 808e3c4:	e886 0088 	stmia.w	r6, {r3, r7}
 808e3c8:	2100      	movs	r1, #0
 808e3ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808e3ce:	4623      	mov	r3, r4
 808e3d0:	e6f3      	b.n	808e1ba <__udivmoddi4+0x96>
 808e3d2:	4618      	mov	r0, r3
 808e3d4:	e6da      	b.n	808e18c <__udivmoddi4+0x68>
 808e3d6:	ebb8 0502 	subs.w	r5, r8, r2
 808e3da:	eb69 040c 	sbc.w	r4, r9, ip
 808e3de:	3801      	subs	r0, #1
 808e3e0:	e7e5      	b.n	808e3ae <__udivmoddi4+0x28a>
 808e3e2:	4605      	mov	r5, r0
 808e3e4:	e7d9      	b.n	808e39a <__udivmoddi4+0x276>
 808e3e6:	4610      	mov	r0, r2
 808e3e8:	e792      	b.n	808e310 <__udivmoddi4+0x1ec>
 808e3ea:	4682      	mov	sl, r0
 808e3ec:	e7c0      	b.n	808e370 <__udivmoddi4+0x24c>
 808e3ee:	4692      	mov	sl, r2
 808e3f0:	e778      	b.n	808e2e4 <__udivmoddi4+0x1c0>
 808e3f2:	3802      	subs	r0, #2
 808e3f4:	443a      	add	r2, r7
 808e3f6:	e743      	b.n	808e280 <__udivmoddi4+0x15c>
 808e3f8:	4608      	mov	r0, r1
 808e3fa:	e704      	b.n	808e206 <__udivmoddi4+0xe2>
 808e3fc:	3b02      	subs	r3, #2
 808e3fe:	443c      	add	r4, r7
 808e400:	e72a      	b.n	808e258 <__udivmoddi4+0x134>
 808e402:	45c3      	cmp	fp, r8
 808e404:	d3e7      	bcc.n	808e3d6 <__udivmoddi4+0x2b2>
 808e406:	463c      	mov	r4, r7
 808e408:	e7d1      	b.n	808e3ae <__udivmoddi4+0x28a>
 808e40a:	4631      	mov	r1, r6
 808e40c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808e410 <__aeabi_idiv0>:
 808e410:	4770      	bx	lr
 808e412:	bf00      	nop

0808e414 <asctime>:
 808e414:	4b09      	ldr	r3, [pc, #36]	; (808e43c <asctime+0x28>)
 808e416:	b570      	push	{r4, r5, r6, lr}
 808e418:	681c      	ldr	r4, [r3, #0]
 808e41a:	4606      	mov	r6, r0
 808e41c:	6c25      	ldr	r5, [r4, #64]	; 0x40
 808e41e:	b93d      	cbnz	r5, 808e430 <asctime+0x1c>
 808e420:	201a      	movs	r0, #26
 808e422:	f7fc fa11 	bl	808a848 <malloc>
 808e426:	221a      	movs	r2, #26
 808e428:	6420      	str	r0, [r4, #64]	; 0x40
 808e42a:	4629      	mov	r1, r5
 808e42c:	f000 f972 	bl	808e714 <memset>
 808e430:	6c21      	ldr	r1, [r4, #64]	; 0x40
 808e432:	4630      	mov	r0, r6
 808e434:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 808e438:	f000 b802 	b.w	808e440 <asctime_r>
 808e43c:	20000148 	.word	0x20000148

0808e440 <asctime_r>:
 808e440:	b510      	push	{r4, lr}
 808e442:	460c      	mov	r4, r1
 808e444:	6941      	ldr	r1, [r0, #20]
 808e446:	b086      	sub	sp, #24
 808e448:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 808e44c:	6903      	ldr	r3, [r0, #16]
 808e44e:	6982      	ldr	r2, [r0, #24]
 808e450:	9104      	str	r1, [sp, #16]
 808e452:	6801      	ldr	r1, [r0, #0]
 808e454:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 808e458:	9103      	str	r1, [sp, #12]
 808e45a:	6841      	ldr	r1, [r0, #4]
 808e45c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 808e460:	9102      	str	r1, [sp, #8]
 808e462:	6881      	ldr	r1, [r0, #8]
 808e464:	9101      	str	r1, [sp, #4]
 808e466:	68c1      	ldr	r1, [r0, #12]
 808e468:	4620      	mov	r0, r4
 808e46a:	9100      	str	r1, [sp, #0]
 808e46c:	4904      	ldr	r1, [pc, #16]	; (808e480 <asctime_r+0x40>)
 808e46e:	440b      	add	r3, r1
 808e470:	4904      	ldr	r1, [pc, #16]	; (808e484 <asctime_r+0x44>)
 808e472:	440a      	add	r2, r1
 808e474:	4904      	ldr	r1, [pc, #16]	; (808e488 <asctime_r+0x48>)
 808e476:	f7fc fa07 	bl	808a888 <siprintf>
 808e47a:	4620      	mov	r0, r4
 808e47c:	b006      	add	sp, #24
 808e47e:	bd10      	pop	{r4, pc}
 808e480:	080943c4 	.word	0x080943c4
 808e484:	080943af 	.word	0x080943af
 808e488:	080943e8 	.word	0x080943e8

0808e48c <atof>:
 808e48c:	2100      	movs	r1, #0
 808e48e:	f001 bd2f 	b.w	808fef0 <strtod>

0808e492 <atoi>:
 808e492:	220a      	movs	r2, #10
 808e494:	2100      	movs	r1, #0
 808e496:	f001 bde7 	b.w	8090068 <strtol>

0808e49a <atol>:
 808e49a:	220a      	movs	r2, #10
 808e49c:	2100      	movs	r1, #0
 808e49e:	f001 bde3 	b.w	8090068 <strtol>
	...

0808e4a4 <__cxa_atexit>:
 808e4a4:	b510      	push	{r4, lr}
 808e4a6:	4c05      	ldr	r4, [pc, #20]	; (808e4bc <__cxa_atexit+0x18>)
 808e4a8:	4613      	mov	r3, r2
 808e4aa:	b12c      	cbz	r4, 808e4b8 <__cxa_atexit+0x14>
 808e4ac:	460a      	mov	r2, r1
 808e4ae:	4601      	mov	r1, r0
 808e4b0:	2002      	movs	r0, #2
 808e4b2:	f3af 8000 	nop.w
 808e4b6:	bd10      	pop	{r4, pc}
 808e4b8:	4620      	mov	r0, r4
 808e4ba:	bd10      	pop	{r4, pc}
 808e4bc:	00000000 	.word	0x00000000

0808e4c0 <localtime>:
 808e4c0:	b538      	push	{r3, r4, r5, lr}
 808e4c2:	4b07      	ldr	r3, [pc, #28]	; (808e4e0 <localtime+0x20>)
 808e4c4:	4605      	mov	r5, r0
 808e4c6:	681c      	ldr	r4, [r3, #0]
 808e4c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 808e4ca:	b91b      	cbnz	r3, 808e4d4 <localtime+0x14>
 808e4cc:	2024      	movs	r0, #36	; 0x24
 808e4ce:	f7fc f9bb 	bl	808a848 <malloc>
 808e4d2:	63e0      	str	r0, [r4, #60]	; 0x3c
 808e4d4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 808e4d6:	4628      	mov	r0, r5
 808e4d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808e4dc:	f000 b802 	b.w	808e4e4 <localtime_r>
 808e4e0:	20000148 	.word	0x20000148

0808e4e4 <localtime_r>:
 808e4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808e4e8:	460c      	mov	r4, r1
 808e4ea:	4680      	mov	r8, r0
 808e4ec:	f002 fc00 	bl	8090cf0 <__gettzinfo>
 808e4f0:	4621      	mov	r1, r4
 808e4f2:	4607      	mov	r7, r0
 808e4f4:	4640      	mov	r0, r8
 808e4f6:	f002 fbff 	bl	8090cf8 <gmtime_r>
 808e4fa:	6946      	ldr	r6, [r0, #20]
 808e4fc:	4604      	mov	r4, r0
 808e4fe:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 808e502:	07b3      	lsls	r3, r6, #30
 808e504:	d105      	bne.n	808e512 <localtime_r+0x2e>
 808e506:	2264      	movs	r2, #100	; 0x64
 808e508:	fb96 f3f2 	sdiv	r3, r6, r2
 808e50c:	fb02 6313 	mls	r3, r2, r3, r6
 808e510:	b94b      	cbnz	r3, 808e526 <localtime_r+0x42>
 808e512:	f44f 75c8 	mov.w	r5, #400	; 0x190
 808e516:	fb96 f3f5 	sdiv	r3, r6, r5
 808e51a:	fb05 6513 	mls	r5, r5, r3, r6
 808e51e:	fab5 f385 	clz	r3, r5
 808e522:	095b      	lsrs	r3, r3, #5
 808e524:	e000      	b.n	808e528 <localtime_r+0x44>
 808e526:	2301      	movs	r3, #1
 808e528:	4a5f      	ldr	r2, [pc, #380]	; (808e6a8 <localtime_r+0x1c4>)
 808e52a:	2530      	movs	r5, #48	; 0x30
 808e52c:	fb05 2503 	mla	r5, r5, r3, r2
 808e530:	f001 fef0 	bl	8090314 <__tz_lock>
 808e534:	f001 fef0 	bl	8090318 <_tzset_unlocked>
 808e538:	4b5c      	ldr	r3, [pc, #368]	; (808e6ac <localtime_r+0x1c8>)
 808e53a:	681b      	ldr	r3, [r3, #0]
 808e53c:	b1f3      	cbz	r3, 808e57c <localtime_r+0x98>
 808e53e:	687b      	ldr	r3, [r7, #4]
 808e540:	429e      	cmp	r6, r3
 808e542:	d105      	bne.n	808e550 <localtime_r+0x6c>
 808e544:	6839      	ldr	r1, [r7, #0]
 808e546:	f8d8 3000 	ldr.w	r3, [r8]
 808e54a:	69fa      	ldr	r2, [r7, #28]
 808e54c:	b941      	cbnz	r1, 808e560 <localtime_r+0x7c>
 808e54e:	e00a      	b.n	808e566 <localtime_r+0x82>
 808e550:	4630      	mov	r0, r6
 808e552:	f001 fe37 	bl	80901c4 <__tzcalc_limits>
 808e556:	2800      	cmp	r0, #0
 808e558:	d1f4      	bne.n	808e544 <localtime_r+0x60>
 808e55a:	f04f 33ff 	mov.w	r3, #4294967295
 808e55e:	e00d      	b.n	808e57c <localtime_r+0x98>
 808e560:	4293      	cmp	r3, r2
 808e562:	db08      	blt.n	808e576 <localtime_r+0x92>
 808e564:	e001      	b.n	808e56a <localtime_r+0x86>
 808e566:	4293      	cmp	r3, r2
 808e568:	da07      	bge.n	808e57a <localtime_r+0x96>
 808e56a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 808e56c:	4293      	cmp	r3, r2
 808e56e:	bfac      	ite	ge
 808e570:	2300      	movge	r3, #0
 808e572:	2301      	movlt	r3, #1
 808e574:	e002      	b.n	808e57c <localtime_r+0x98>
 808e576:	2300      	movs	r3, #0
 808e578:	e000      	b.n	808e57c <localtime_r+0x98>
 808e57a:	2301      	movs	r3, #1
 808e57c:	6223      	str	r3, [r4, #32]
 808e57e:	6a23      	ldr	r3, [r4, #32]
 808e580:	203c      	movs	r0, #60	; 0x3c
 808e582:	2b01      	cmp	r3, #1
 808e584:	bf0c      	ite	eq
 808e586:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 808e588:	6a39      	ldrne	r1, [r7, #32]
 808e58a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808e58e:	fb91 f6f3 	sdiv	r6, r1, r3
 808e592:	fb03 1316 	mls	r3, r3, r6, r1
 808e596:	fb93 f2f0 	sdiv	r2, r3, r0
 808e59a:	fb00 3012 	mls	r0, r0, r2, r3
 808e59e:	6861      	ldr	r1, [r4, #4]
 808e5a0:	6823      	ldr	r3, [r4, #0]
 808e5a2:	1a89      	subs	r1, r1, r2
 808e5a4:	68a2      	ldr	r2, [r4, #8]
 808e5a6:	1a1b      	subs	r3, r3, r0
 808e5a8:	1b92      	subs	r2, r2, r6
 808e5aa:	2b3b      	cmp	r3, #59	; 0x3b
 808e5ac:	6023      	str	r3, [r4, #0]
 808e5ae:	6061      	str	r1, [r4, #4]
 808e5b0:	60a2      	str	r2, [r4, #8]
 808e5b2:	dd03      	ble.n	808e5bc <localtime_r+0xd8>
 808e5b4:	3101      	adds	r1, #1
 808e5b6:	6061      	str	r1, [r4, #4]
 808e5b8:	3b3c      	subs	r3, #60	; 0x3c
 808e5ba:	e004      	b.n	808e5c6 <localtime_r+0xe2>
 808e5bc:	2b00      	cmp	r3, #0
 808e5be:	da03      	bge.n	808e5c8 <localtime_r+0xe4>
 808e5c0:	3901      	subs	r1, #1
 808e5c2:	6061      	str	r1, [r4, #4]
 808e5c4:	333c      	adds	r3, #60	; 0x3c
 808e5c6:	6023      	str	r3, [r4, #0]
 808e5c8:	6863      	ldr	r3, [r4, #4]
 808e5ca:	2b3b      	cmp	r3, #59	; 0x3b
 808e5cc:	dd03      	ble.n	808e5d6 <localtime_r+0xf2>
 808e5ce:	3201      	adds	r2, #1
 808e5d0:	60a2      	str	r2, [r4, #8]
 808e5d2:	3b3c      	subs	r3, #60	; 0x3c
 808e5d4:	e004      	b.n	808e5e0 <localtime_r+0xfc>
 808e5d6:	2b00      	cmp	r3, #0
 808e5d8:	da03      	bge.n	808e5e2 <localtime_r+0xfe>
 808e5da:	3a01      	subs	r2, #1
 808e5dc:	60a2      	str	r2, [r4, #8]
 808e5de:	333c      	adds	r3, #60	; 0x3c
 808e5e0:	6063      	str	r3, [r4, #4]
 808e5e2:	68a3      	ldr	r3, [r4, #8]
 808e5e4:	2b17      	cmp	r3, #23
 808e5e6:	dd22      	ble.n	808e62e <localtime_r+0x14a>
 808e5e8:	69e2      	ldr	r2, [r4, #28]
 808e5ea:	3b18      	subs	r3, #24
 808e5ec:	3201      	adds	r2, #1
 808e5ee:	61e2      	str	r2, [r4, #28]
 808e5f0:	69a2      	ldr	r2, [r4, #24]
 808e5f2:	60a3      	str	r3, [r4, #8]
 808e5f4:	3201      	adds	r2, #1
 808e5f6:	2a06      	cmp	r2, #6
 808e5f8:	bfc8      	it	gt
 808e5fa:	2200      	movgt	r2, #0
 808e5fc:	61a2      	str	r2, [r4, #24]
 808e5fe:	68e2      	ldr	r2, [r4, #12]
 808e600:	6923      	ldr	r3, [r4, #16]
 808e602:	3201      	adds	r2, #1
 808e604:	60e2      	str	r2, [r4, #12]
 808e606:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 808e60a:	428a      	cmp	r2, r1
 808e60c:	dd46      	ble.n	808e69c <localtime_r+0x1b8>
 808e60e:	3301      	adds	r3, #1
 808e610:	2b0c      	cmp	r3, #12
 808e612:	bf08      	it	eq
 808e614:	6963      	ldreq	r3, [r4, #20]
 808e616:	eba2 0201 	sub.w	r2, r2, r1
 808e61a:	60e2      	str	r2, [r4, #12]
 808e61c:	bf05      	ittet	eq
 808e61e:	3301      	addeq	r3, #1
 808e620:	2200      	moveq	r2, #0
 808e622:	6123      	strne	r3, [r4, #16]
 808e624:	6122      	streq	r2, [r4, #16]
 808e626:	bf04      	itt	eq
 808e628:	6163      	streq	r3, [r4, #20]
 808e62a:	61e2      	streq	r2, [r4, #28]
 808e62c:	e036      	b.n	808e69c <localtime_r+0x1b8>
 808e62e:	2b00      	cmp	r3, #0
 808e630:	da34      	bge.n	808e69c <localtime_r+0x1b8>
 808e632:	69e2      	ldr	r2, [r4, #28]
 808e634:	3318      	adds	r3, #24
 808e636:	3a01      	subs	r2, #1
 808e638:	61e2      	str	r2, [r4, #28]
 808e63a:	69a2      	ldr	r2, [r4, #24]
 808e63c:	60a3      	str	r3, [r4, #8]
 808e63e:	3a01      	subs	r2, #1
 808e640:	bf48      	it	mi
 808e642:	2206      	movmi	r2, #6
 808e644:	61a2      	str	r2, [r4, #24]
 808e646:	68e2      	ldr	r2, [r4, #12]
 808e648:	3a01      	subs	r2, #1
 808e64a:	60e2      	str	r2, [r4, #12]
 808e64c:	bb32      	cbnz	r2, 808e69c <localtime_r+0x1b8>
 808e64e:	6923      	ldr	r3, [r4, #16]
 808e650:	3b01      	subs	r3, #1
 808e652:	d401      	bmi.n	808e658 <localtime_r+0x174>
 808e654:	6123      	str	r3, [r4, #16]
 808e656:	e01d      	b.n	808e694 <localtime_r+0x1b0>
 808e658:	230b      	movs	r3, #11
 808e65a:	6123      	str	r3, [r4, #16]
 808e65c:	6963      	ldr	r3, [r4, #20]
 808e65e:	1e5a      	subs	r2, r3, #1
 808e660:	f012 0f03 	tst.w	r2, #3
 808e664:	6162      	str	r2, [r4, #20]
 808e666:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 808e66a:	d105      	bne.n	808e678 <localtime_r+0x194>
 808e66c:	2164      	movs	r1, #100	; 0x64
 808e66e:	fb93 f2f1 	sdiv	r2, r3, r1
 808e672:	fb01 3212 	mls	r2, r1, r2, r3
 808e676:	b94a      	cbnz	r2, 808e68c <localtime_r+0x1a8>
 808e678:	f44f 71c8 	mov.w	r1, #400	; 0x190
 808e67c:	fb93 f2f1 	sdiv	r2, r3, r1
 808e680:	fb01 3312 	mls	r3, r1, r2, r3
 808e684:	fab3 f383 	clz	r3, r3
 808e688:	095b      	lsrs	r3, r3, #5
 808e68a:	e000      	b.n	808e68e <localtime_r+0x1aa>
 808e68c:	2301      	movs	r3, #1
 808e68e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 808e692:	61e3      	str	r3, [r4, #28]
 808e694:	6923      	ldr	r3, [r4, #16]
 808e696:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 808e69a:	60e3      	str	r3, [r4, #12]
 808e69c:	f001 fe3b 	bl	8090316 <__tz_unlock>
 808e6a0:	4620      	mov	r0, r4
 808e6a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808e6a6:	bf00      	nop
 808e6a8:	08094574 	.word	0x08094574
 808e6ac:	20001410 	.word	0x20001410

0808e6b0 <ldiv>:
 808e6b0:	b510      	push	{r4, lr}
 808e6b2:	fb91 f4f2 	sdiv	r4, r1, r2
 808e6b6:	2900      	cmp	r1, #0
 808e6b8:	fb02 1314 	mls	r3, r2, r4, r1
 808e6bc:	db04      	blt.n	808e6c8 <ldiv+0x18>
 808e6be:	2b00      	cmp	r3, #0
 808e6c0:	da07      	bge.n	808e6d2 <ldiv+0x22>
 808e6c2:	3401      	adds	r4, #1
 808e6c4:	1a9b      	subs	r3, r3, r2
 808e6c6:	e004      	b.n	808e6d2 <ldiv+0x22>
 808e6c8:	2b00      	cmp	r3, #0
 808e6ca:	bfc4      	itt	gt
 808e6cc:	f104 34ff 	addgt.w	r4, r4, #4294967295
 808e6d0:	189b      	addgt	r3, r3, r2
 808e6d2:	6004      	str	r4, [r0, #0]
 808e6d4:	6043      	str	r3, [r0, #4]
 808e6d6:	bd10      	pop	{r4, pc}

0808e6d8 <_localeconv_r>:
 808e6d8:	4800      	ldr	r0, [pc, #0]	; (808e6dc <_localeconv_r+0x4>)
 808e6da:	4770      	bx	lr
 808e6dc:	2000014c 	.word	0x2000014c

0808e6e0 <memcmp>:
 808e6e0:	b510      	push	{r4, lr}
 808e6e2:	3901      	subs	r1, #1
 808e6e4:	4402      	add	r2, r0
 808e6e6:	4290      	cmp	r0, r2
 808e6e8:	d007      	beq.n	808e6fa <memcmp+0x1a>
 808e6ea:	f810 3b01 	ldrb.w	r3, [r0], #1
 808e6ee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808e6f2:	42a3      	cmp	r3, r4
 808e6f4:	d0f7      	beq.n	808e6e6 <memcmp+0x6>
 808e6f6:	1b18      	subs	r0, r3, r4
 808e6f8:	bd10      	pop	{r4, pc}
 808e6fa:	2000      	movs	r0, #0
 808e6fc:	bd10      	pop	{r4, pc}

0808e6fe <memcpy>:
 808e6fe:	b510      	push	{r4, lr}
 808e700:	1e43      	subs	r3, r0, #1
 808e702:	440a      	add	r2, r1
 808e704:	4291      	cmp	r1, r2
 808e706:	d004      	beq.n	808e712 <memcpy+0x14>
 808e708:	f811 4b01 	ldrb.w	r4, [r1], #1
 808e70c:	f803 4f01 	strb.w	r4, [r3, #1]!
 808e710:	e7f8      	b.n	808e704 <memcpy+0x6>
 808e712:	bd10      	pop	{r4, pc}

0808e714 <memset>:
 808e714:	4603      	mov	r3, r0
 808e716:	4402      	add	r2, r0
 808e718:	4293      	cmp	r3, r2
 808e71a:	d002      	beq.n	808e722 <memset+0xe>
 808e71c:	f803 1b01 	strb.w	r1, [r3], #1
 808e720:	e7fa      	b.n	808e718 <memset+0x4>
 808e722:	4770      	bx	lr

0808e724 <srand>:
 808e724:	b538      	push	{r3, r4, r5, lr}
 808e726:	4b12      	ldr	r3, [pc, #72]	; (808e770 <srand+0x4c>)
 808e728:	4605      	mov	r5, r0
 808e72a:	681c      	ldr	r4, [r3, #0]
 808e72c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 808e72e:	b9d3      	cbnz	r3, 808e766 <srand+0x42>
 808e730:	2018      	movs	r0, #24
 808e732:	f7fc f889 	bl	808a848 <malloc>
 808e736:	f243 330e 	movw	r3, #13070	; 0x330e
 808e73a:	63a0      	str	r0, [r4, #56]	; 0x38
 808e73c:	8003      	strh	r3, [r0, #0]
 808e73e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 808e742:	8043      	strh	r3, [r0, #2]
 808e744:	f241 2334 	movw	r3, #4660	; 0x1234
 808e748:	8083      	strh	r3, [r0, #4]
 808e74a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 808e74e:	80c3      	strh	r3, [r0, #6]
 808e750:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 808e754:	8103      	strh	r3, [r0, #8]
 808e756:	2305      	movs	r3, #5
 808e758:	8143      	strh	r3, [r0, #10]
 808e75a:	230b      	movs	r3, #11
 808e75c:	8183      	strh	r3, [r0, #12]
 808e75e:	2201      	movs	r2, #1
 808e760:	2300      	movs	r3, #0
 808e762:	e9c0 2304 	strd	r2, r3, [r0, #16]
 808e766:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 808e768:	2200      	movs	r2, #0
 808e76a:	611d      	str	r5, [r3, #16]
 808e76c:	615a      	str	r2, [r3, #20]
 808e76e:	bd38      	pop	{r3, r4, r5, pc}
 808e770:	20000148 	.word	0x20000148

0808e774 <strchr>:
 808e774:	b2c9      	uxtb	r1, r1
 808e776:	4603      	mov	r3, r0
 808e778:	f810 2b01 	ldrb.w	r2, [r0], #1
 808e77c:	b11a      	cbz	r2, 808e786 <strchr+0x12>
 808e77e:	4291      	cmp	r1, r2
 808e780:	d1f9      	bne.n	808e776 <strchr+0x2>
 808e782:	4618      	mov	r0, r3
 808e784:	4770      	bx	lr
 808e786:	2900      	cmp	r1, #0
 808e788:	bf0c      	ite	eq
 808e78a:	4618      	moveq	r0, r3
 808e78c:	2000      	movne	r0, #0
 808e78e:	4770      	bx	lr

0808e790 <strcmp>:
 808e790:	f810 2b01 	ldrb.w	r2, [r0], #1
 808e794:	f811 3b01 	ldrb.w	r3, [r1], #1
 808e798:	2a01      	cmp	r2, #1
 808e79a:	bf28      	it	cs
 808e79c:	429a      	cmpcs	r2, r3
 808e79e:	d0f7      	beq.n	808e790 <strcmp>
 808e7a0:	1ad0      	subs	r0, r2, r3
 808e7a2:	4770      	bx	lr

0808e7a4 <strcpy>:
 808e7a4:	4603      	mov	r3, r0
 808e7a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 808e7aa:	f803 2b01 	strb.w	r2, [r3], #1
 808e7ae:	2a00      	cmp	r2, #0
 808e7b0:	d1f9      	bne.n	808e7a6 <strcpy+0x2>
 808e7b2:	4770      	bx	lr

0808e7b4 <strdup>:
 808e7b4:	4b02      	ldr	r3, [pc, #8]	; (808e7c0 <strdup+0xc>)
 808e7b6:	4601      	mov	r1, r0
 808e7b8:	6818      	ldr	r0, [r3, #0]
 808e7ba:	f000 b803 	b.w	808e7c4 <_strdup_r>
 808e7be:	bf00      	nop
 808e7c0:	20000148 	.word	0x20000148

0808e7c4 <_strdup_r>:
 808e7c4:	b570      	push	{r4, r5, r6, lr}
 808e7c6:	4606      	mov	r6, r0
 808e7c8:	4608      	mov	r0, r1
 808e7ca:	460c      	mov	r4, r1
 808e7cc:	f000 fd22 	bl	808f214 <strlen>
 808e7d0:	1c45      	adds	r5, r0, #1
 808e7d2:	4629      	mov	r1, r5
 808e7d4:	4630      	mov	r0, r6
 808e7d6:	f7fc f88f 	bl	808a8f8 <_malloc_r>
 808e7da:	4606      	mov	r6, r0
 808e7dc:	b118      	cbz	r0, 808e7e6 <_strdup_r+0x22>
 808e7de:	462a      	mov	r2, r5
 808e7e0:	4621      	mov	r1, r4
 808e7e2:	f7ff ff8c 	bl	808e6fe <memcpy>
 808e7e6:	4630      	mov	r0, r6
 808e7e8:	bd70      	pop	{r4, r5, r6, pc}

0808e7ea <iso_year_adjust>:
 808e7ea:	6941      	ldr	r1, [r0, #20]
 808e7ec:	b510      	push	{r4, lr}
 808e7ee:	078b      	lsls	r3, r1, #30
 808e7f0:	d10c      	bne.n	808e80c <iso_year_adjust+0x22>
 808e7f2:	f240 736c 	movw	r3, #1900	; 0x76c
 808e7f6:	2900      	cmp	r1, #0
 808e7f8:	bfa8      	it	ge
 808e7fa:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 808e7fe:	440b      	add	r3, r1
 808e800:	2464      	movs	r4, #100	; 0x64
 808e802:	fb93 f2f4 	sdiv	r2, r3, r4
 808e806:	fb04 3312 	mls	r3, r4, r2, r3
 808e80a:	b983      	cbnz	r3, 808e82e <iso_year_adjust+0x44>
 808e80c:	f240 736c 	movw	r3, #1900	; 0x76c
 808e810:	2900      	cmp	r1, #0
 808e812:	bfa8      	it	ge
 808e814:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 808e818:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808e81c:	440b      	add	r3, r1
 808e81e:	fb93 f1f2 	sdiv	r1, r3, r2
 808e822:	fb02 3311 	mls	r3, r2, r1, r3
 808e826:	fab3 f283 	clz	r2, r3
 808e82a:	0952      	lsrs	r2, r2, #5
 808e82c:	e000      	b.n	808e830 <iso_year_adjust+0x46>
 808e82e:	2201      	movs	r2, #1
 808e830:	6983      	ldr	r3, [r0, #24]
 808e832:	69c1      	ldr	r1, [r0, #28]
 808e834:	005b      	lsls	r3, r3, #1
 808e836:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 808e83a:	4413      	add	r3, r2
 808e83c:	2b21      	cmp	r3, #33	; 0x21
 808e83e:	dc0e      	bgt.n	808e85e <iso_year_adjust+0x74>
 808e840:	2b20      	cmp	r3, #32
 808e842:	da2f      	bge.n	808e8a4 <iso_year_adjust+0xba>
 808e844:	2b0d      	cmp	r3, #13
 808e846:	dc02      	bgt.n	808e84e <iso_year_adjust+0x64>
 808e848:	2b0a      	cmp	r3, #10
 808e84a:	db05      	blt.n	808e858 <iso_year_adjust+0x6e>
 808e84c:	e02a      	b.n	808e8a4 <iso_year_adjust+0xba>
 808e84e:	2b10      	cmp	r3, #16
 808e850:	db26      	blt.n	808e8a0 <iso_year_adjust+0xb6>
 808e852:	2b11      	cmp	r3, #17
 808e854:	dd26      	ble.n	808e8a4 <iso_year_adjust+0xba>
 808e856:	3b1c      	subs	r3, #28
 808e858:	2b01      	cmp	r3, #1
 808e85a:	d923      	bls.n	808e8a4 <iso_year_adjust+0xba>
 808e85c:	e020      	b.n	808e8a0 <iso_year_adjust+0xb6>
 808e85e:	f241 62c6 	movw	r2, #5830	; 0x16c6
 808e862:	4293      	cmp	r3, r2
 808e864:	dc0e      	bgt.n	808e884 <iso_year_adjust+0x9a>
 808e866:	f241 62c2 	movw	r2, #5826	; 0x16c2
 808e86a:	4293      	cmp	r3, r2
 808e86c:	da16      	bge.n	808e89c <iso_year_adjust+0xb2>
 808e86e:	f241 62a2 	movw	r2, #5794	; 0x16a2
 808e872:	4293      	cmp	r3, r2
 808e874:	d012      	beq.n	808e89c <iso_year_adjust+0xb2>
 808e876:	db13      	blt.n	808e8a0 <iso_year_adjust+0xb6>
 808e878:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
 808e87c:	3b12      	subs	r3, #18
 808e87e:	2b02      	cmp	r3, #2
 808e880:	d90c      	bls.n	808e89c <iso_year_adjust+0xb2>
 808e882:	e00d      	b.n	808e8a0 <iso_year_adjust+0xb6>
 808e884:	f241 62d5 	movw	r2, #5845	; 0x16d5
 808e888:	4293      	cmp	r3, r2
 808e88a:	d007      	beq.n	808e89c <iso_year_adjust+0xb2>
 808e88c:	f241 62d7 	movw	r2, #5847	; 0x16d7
 808e890:	4293      	cmp	r3, r2
 808e892:	d003      	beq.n	808e89c <iso_year_adjust+0xb2>
 808e894:	f241 62d3 	movw	r2, #5843	; 0x16d3
 808e898:	4293      	cmp	r3, r2
 808e89a:	d101      	bne.n	808e8a0 <iso_year_adjust+0xb6>
 808e89c:	2001      	movs	r0, #1
 808e89e:	bd10      	pop	{r4, pc}
 808e8a0:	2000      	movs	r0, #0
 808e8a2:	bd10      	pop	{r4, pc}
 808e8a4:	f04f 30ff 	mov.w	r0, #4294967295
 808e8a8:	bd10      	pop	{r4, pc}
	...

0808e8ac <strftime>:
 808e8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808e8b0:	460e      	mov	r6, r1
 808e8b2:	b093      	sub	sp, #76	; 0x4c
 808e8b4:	461d      	mov	r5, r3
 808e8b6:	4607      	mov	r7, r0
 808e8b8:	4691      	mov	r9, r2
 808e8ba:	f001 fc67 	bl	809018c <__get_current_time_locale>
 808e8be:	2300      	movs	r3, #0
 808e8c0:	9306      	str	r3, [sp, #24]
 808e8c2:	461c      	mov	r4, r3
 808e8c4:	1e73      	subs	r3, r6, #1
 808e8c6:	9003      	str	r0, [sp, #12]
 808e8c8:	9302      	str	r3, [sp, #8]
 808e8ca:	f899 3000 	ldrb.w	r3, [r9]
 808e8ce:	2b00      	cmp	r3, #0
 808e8d0:	f000 8492 	beq.w	808f1f8 <strftime+0x94c>
 808e8d4:	2b25      	cmp	r3, #37	; 0x25
 808e8d6:	d008      	beq.n	808e8ea <strftime+0x3e>
 808e8d8:	9a02      	ldr	r2, [sp, #8]
 808e8da:	4294      	cmp	r4, r2
 808e8dc:	f080 8490 	bcs.w	808f200 <strftime+0x954>
 808e8e0:	553b      	strb	r3, [r7, r4]
 808e8e2:	f109 0901 	add.w	r9, r9, #1
 808e8e6:	3401      	adds	r4, #1
 808e8e8:	e7ef      	b.n	808e8ca <strftime+0x1e>
 808e8ea:	f899 a001 	ldrb.w	sl, [r9, #1]
 808e8ee:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 808e8f2:	d007      	beq.n	808e904 <strftime+0x58>
 808e8f4:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808e8f8:	d004      	beq.n	808e904 <strftime+0x58>
 808e8fa:	f109 0901 	add.w	r9, r9, #1
 808e8fe:	f04f 0a00 	mov.w	sl, #0
 808e902:	e001      	b.n	808e908 <strftime+0x5c>
 808e904:	f109 0902 	add.w	r9, r9, #2
 808e908:	f899 3000 	ldrb.w	r3, [r9]
 808e90c:	3b31      	subs	r3, #49	; 0x31
 808e90e:	2b08      	cmp	r3, #8
 808e910:	d808      	bhi.n	808e924 <strftime+0x78>
 808e912:	4648      	mov	r0, r9
 808e914:	220a      	movs	r2, #10
 808e916:	a90a      	add	r1, sp, #40	; 0x28
 808e918:	f001 fc2e 	bl	8090178 <strtoul>
 808e91c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 808e920:	4680      	mov	r8, r0
 808e922:	e001      	b.n	808e928 <strftime+0x7c>
 808e924:	f04f 0800 	mov.w	r8, #0
 808e928:	f899 3000 	ldrb.w	r3, [r9]
 808e92c:	2b45      	cmp	r3, #69	; 0x45
 808e92e:	d001      	beq.n	808e934 <strftime+0x88>
 808e930:	2b4f      	cmp	r3, #79	; 0x4f
 808e932:	d101      	bne.n	808e938 <strftime+0x8c>
 808e934:	f109 0901 	add.w	r9, r9, #1
 808e938:	f899 0000 	ldrb.w	r0, [r9]
 808e93c:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 808e940:	2b55      	cmp	r3, #85	; 0x55
 808e942:	f200 845d 	bhi.w	808f200 <strftime+0x954>
 808e946:	e8df f013 	tbh	[pc, r3, lsl #1]
 808e94a:	044a      	.short	0x044a
 808e94c:	045b045b 	.word	0x045b045b
 808e950:	045b045b 	.word	0x045b045b
 808e954:	045b045b 	.word	0x045b045b
 808e958:	045b045b 	.word	0x045b045b
 808e95c:	045b045b 	.word	0x045b045b
 808e960:	045b045b 	.word	0x045b045b
 808e964:	045b045b 	.word	0x045b045b
 808e968:	045b045b 	.word	0x045b045b
 808e96c:	045b045b 	.word	0x045b045b
 808e970:	045b045b 	.word	0x045b045b
 808e974:	045b045b 	.word	0x045b045b
 808e978:	045b045b 	.word	0x045b045b
 808e97c:	045b045b 	.word	0x045b045b
 808e980:	006f045b 	.word	0x006f045b
 808e984:	00d400a1 	.word	0x00d400a1
 808e988:	045b011a 	.word	0x045b011a
 808e98c:	01a0013f 	.word	0x01a0013f
 808e990:	022d0226 	.word	0x022d0226
 808e994:	045b045b 	.word	0x045b045b
 808e998:	0260045b 	.word	0x0260045b
 808e99c:	045b045b 	.word	0x045b045b
 808e9a0:	045b0268 	.word	0x045b0268
 808e9a4:	031c0296 	.word	0x031c0296
 808e9a8:	033a0324 	.word	0x033a0324
 808e9ac:	03850342 	.word	0x03850342
 808e9b0:	039f00c6 	.word	0x039f00c6
 808e9b4:	045b041f 	.word	0x045b041f
 808e9b8:	045b045b 	.word	0x045b045b
 808e9bc:	045b045b 	.word	0x045b045b
 808e9c0:	0056045b 	.word	0x0056045b
 808e9c4:	00ba0089 	.word	0x00ba0089
 808e9c8:	010c010c 	.word	0x010c010c
 808e9cc:	0171045b 	.word	0x0171045b
 808e9d0:	045b0089 	.word	0x045b0089
 808e9d4:	0226023d 	.word	0x0226023d
 808e9d8:	025d022d 	.word	0x025d022d
 808e9dc:	045b0262 	.word	0x045b0262
 808e9e0:	045b0268 	.word	0x045b0268
 808e9e4:	029b00be 	.word	0x029b00be
 808e9e8:	032d031e 	.word	0x032d031e
 808e9ec:	037e045b 	.word	0x037e045b
 808e9f0:	039100c2 	.word	0x039100c2
 808e9f4:	03e7      	.short	0x03e7
 808e9f6:	69ab      	ldr	r3, [r5, #24]
 808e9f8:	9a03      	ldr	r2, [sp, #12]
 808e9fa:	3318      	adds	r3, #24
 808e9fc:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808ea00:	4640      	mov	r0, r8
 808ea02:	f000 fc07 	bl	808f214 <strlen>
 808ea06:	f108 38ff 	add.w	r8, r8, #4294967295
 808ea0a:	193b      	adds	r3, r7, r4
 808ea0c:	4420      	add	r0, r4
 808ea0e:	4284      	cmp	r4, r0
 808ea10:	f000 83eb 	beq.w	808f1ea <strftime+0x93e>
 808ea14:	9a02      	ldr	r2, [sp, #8]
 808ea16:	4294      	cmp	r4, r2
 808ea18:	f080 83f2 	bcs.w	808f200 <strftime+0x954>
 808ea1c:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808ea20:	3401      	adds	r4, #1
 808ea22:	f803 2b01 	strb.w	r2, [r3], #1
 808ea26:	e7f2      	b.n	808ea0e <strftime+0x162>
 808ea28:	69ab      	ldr	r3, [r5, #24]
 808ea2a:	9a03      	ldr	r2, [sp, #12]
 808ea2c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 808ea30:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
 808ea34:	4640      	mov	r0, r8
 808ea36:	f000 fbed 	bl	808f214 <strlen>
 808ea3a:	f108 38ff 	add.w	r8, r8, #4294967295
 808ea3e:	193b      	adds	r3, r7, r4
 808ea40:	4420      	add	r0, r4
 808ea42:	4284      	cmp	r4, r0
 808ea44:	f000 83d1 	beq.w	808f1ea <strftime+0x93e>
 808ea48:	9a02      	ldr	r2, [sp, #8]
 808ea4a:	4294      	cmp	r4, r2
 808ea4c:	f080 83d8 	bcs.w	808f200 <strftime+0x954>
 808ea50:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808ea54:	3401      	adds	r4, #1
 808ea56:	f803 2b01 	strb.w	r2, [r3], #1
 808ea5a:	e7f2      	b.n	808ea42 <strftime+0x196>
 808ea5c:	692b      	ldr	r3, [r5, #16]
 808ea5e:	9a03      	ldr	r2, [sp, #12]
 808ea60:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808ea64:	4640      	mov	r0, r8
 808ea66:	f000 fbd5 	bl	808f214 <strlen>
 808ea6a:	f108 38ff 	add.w	r8, r8, #4294967295
 808ea6e:	193b      	adds	r3, r7, r4
 808ea70:	4420      	add	r0, r4
 808ea72:	4284      	cmp	r4, r0
 808ea74:	f000 83b9 	beq.w	808f1ea <strftime+0x93e>
 808ea78:	9a02      	ldr	r2, [sp, #8]
 808ea7a:	4294      	cmp	r4, r2
 808ea7c:	f080 83c0 	bcs.w	808f200 <strftime+0x954>
 808ea80:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808ea84:	3401      	adds	r4, #1
 808ea86:	f803 2b01 	strb.w	r2, [r3], #1
 808ea8a:	e7f2      	b.n	808ea72 <strftime+0x1c6>
 808ea8c:	692b      	ldr	r3, [r5, #16]
 808ea8e:	9a03      	ldr	r2, [sp, #12]
 808ea90:	330c      	adds	r3, #12
 808ea92:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808ea96:	4640      	mov	r0, r8
 808ea98:	f000 fbbc 	bl	808f214 <strlen>
 808ea9c:	f108 38ff 	add.w	r8, r8, #4294967295
 808eaa0:	193b      	adds	r3, r7, r4
 808eaa2:	4420      	add	r0, r4
 808eaa4:	4284      	cmp	r4, r0
 808eaa6:	f000 83a0 	beq.w	808f1ea <strftime+0x93e>
 808eaaa:	9a02      	ldr	r2, [sp, #8]
 808eaac:	4294      	cmp	r4, r2
 808eaae:	f080 83a7 	bcs.w	808f200 <strftime+0x954>
 808eab2:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808eab6:	3401      	adds	r4, #1
 808eab8:	f803 2b01 	strb.w	r2, [r3], #1
 808eabc:	e7f2      	b.n	808eaa4 <strftime+0x1f8>
 808eabe:	9b03      	ldr	r3, [sp, #12]
 808eac0:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
 808eac4:	e00a      	b.n	808eadc <strftime+0x230>
 808eac6:	9b03      	ldr	r3, [sp, #12]
 808eac8:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
 808eacc:	e006      	b.n	808eadc <strftime+0x230>
 808eace:	9b03      	ldr	r3, [sp, #12]
 808ead0:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
 808ead4:	e002      	b.n	808eadc <strftime+0x230>
 808ead6:	9b03      	ldr	r3, [sp, #12]
 808ead8:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
 808eadc:	4640      	mov	r0, r8
 808eade:	f000 fb99 	bl	808f214 <strlen>
 808eae2:	f898 3000 	ldrb.w	r3, [r8]
 808eae6:	2b00      	cmp	r3, #0
 808eae8:	f000 837f 	beq.w	808f1ea <strftime+0x93e>
 808eaec:	462b      	mov	r3, r5
 808eaee:	4642      	mov	r2, r8
 808eaf0:	e093      	b.n	808ec1a <strftime+0x36e>
 808eaf2:	49b6      	ldr	r1, [pc, #728]	; (808edcc <strftime+0x520>)
 808eaf4:	f8d5 b014 	ldr.w	fp, [r5, #20]
 808eaf8:	458b      	cmp	fp, r1
 808eafa:	bfac      	ite	ge
 808eafc:	2100      	movge	r1, #0
 808eafe:	2101      	movlt	r1, #1
 808eb00:	f1bb 0f00 	cmp.w	fp, #0
 808eb04:	db04      	blt.n	808eb10 <strftime+0x264>
 808eb06:	2064      	movs	r0, #100	; 0x64
 808eb08:	fb9b f0f0 	sdiv	r0, fp, r0
 808eb0c:	3013      	adds	r0, #19
 808eb0e:	e008      	b.n	808eb22 <strftime+0x276>
 808eb10:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
 808eb14:	9107      	str	r1, [sp, #28]
 808eb16:	f001 fd85 	bl	8090624 <abs>
 808eb1a:	2364      	movs	r3, #100	; 0x64
 808eb1c:	fb90 f0f3 	sdiv	r0, r0, r3
 808eb20:	9907      	ldr	r1, [sp, #28]
 808eb22:	f1ba 0f00 	cmp.w	sl, #0
 808eb26:	d008      	beq.n	808eb3a <strftime+0x28e>
 808eb28:	2863      	cmp	r0, #99	; 0x63
 808eb2a:	dd09      	ble.n	808eb40 <strftime+0x294>
 808eb2c:	4ba8      	ldr	r3, [pc, #672]	; (808edd0 <strftime+0x524>)
 808eb2e:	4aa9      	ldr	r2, [pc, #676]	; (808edd4 <strftime+0x528>)
 808eb30:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808eb34:	bf18      	it	ne
 808eb36:	4613      	movne	r3, r2
 808eb38:	e003      	b.n	808eb42 <strftime+0x296>
 808eb3a:	4ba6      	ldr	r3, [pc, #664]	; (808edd4 <strftime+0x528>)
 808eb3c:	4aa6      	ldr	r2, [pc, #664]	; (808edd8 <strftime+0x52c>)
 808eb3e:	e001      	b.n	808eb44 <strftime+0x298>
 808eb40:	4ba4      	ldr	r3, [pc, #656]	; (808edd4 <strftime+0x528>)
 808eb42:	4aa6      	ldr	r2, [pc, #664]	; (808eddc <strftime+0x530>)
 808eb44:	f1b8 0f01 	cmp.w	r8, #1
 808eb48:	bf98      	it	ls
 808eb4a:	f04f 0802 	movls.w	r8, #2
 808eb4e:	ebc1 0108 	rsb	r1, r1, r8
 808eb52:	9001      	str	r0, [sp, #4]
 808eb54:	9100      	str	r1, [sp, #0]
 808eb56:	489d      	ldr	r0, [pc, #628]	; (808edcc <strftime+0x520>)
 808eb58:	49a1      	ldr	r1, [pc, #644]	; (808ede0 <strftime+0x534>)
 808eb5a:	4583      	cmp	fp, r0
 808eb5c:	bfb8      	it	lt
 808eb5e:	460b      	movlt	r3, r1
 808eb60:	e21d      	b.n	808ef9e <strftime+0x6f2>
 808eb62:	4aa0      	ldr	r2, [pc, #640]	; (808ede4 <strftime+0x538>)
 808eb64:	49a0      	ldr	r1, [pc, #640]	; (808ede8 <strftime+0x53c>)
 808eb66:	68eb      	ldr	r3, [r5, #12]
 808eb68:	2864      	cmp	r0, #100	; 0x64
 808eb6a:	bf08      	it	eq
 808eb6c:	460a      	moveq	r2, r1
 808eb6e:	1b31      	subs	r1, r6, r4
 808eb70:	1938      	adds	r0, r7, r4
 808eb72:	f7fb fea9 	bl	808a8c8 <sniprintf>
 808eb76:	2800      	cmp	r0, #0
 808eb78:	f280 8302 	bge.w	808f180 <strftime+0x8d4>
 808eb7c:	e340      	b.n	808f200 <strftime+0x954>
 808eb7e:	6968      	ldr	r0, [r5, #20]
 808eb80:	692b      	ldr	r3, [r5, #16]
 808eb82:	2800      	cmp	r0, #0
 808eb84:	f103 0b01 	add.w	fp, r3, #1
 808eb88:	eb07 0804 	add.w	r8, r7, r4
 808eb8c:	ebc4 0a06 	rsb	sl, r4, r6
 808eb90:	68eb      	ldr	r3, [r5, #12]
 808eb92:	db05      	blt.n	808eba0 <strftime+0x2f4>
 808eb94:	2264      	movs	r2, #100	; 0x64
 808eb96:	fb90 f1f2 	sdiv	r1, r0, r2
 808eb9a:	fb02 0011 	mls	r0, r2, r1, r0
 808eb9e:	e00a      	b.n	808ebb6 <strftime+0x30a>
 808eba0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808eba4:	9307      	str	r3, [sp, #28]
 808eba6:	f001 fd3d 	bl	8090624 <abs>
 808ebaa:	2264      	movs	r2, #100	; 0x64
 808ebac:	fb90 f1f2 	sdiv	r1, r0, r2
 808ebb0:	fb01 0012 	mls	r0, r1, r2, r0
 808ebb4:	9b07      	ldr	r3, [sp, #28]
 808ebb6:	9001      	str	r0, [sp, #4]
 808ebb8:	9300      	str	r3, [sp, #0]
 808ebba:	4651      	mov	r1, sl
 808ebbc:	465b      	mov	r3, fp
 808ebbe:	4640      	mov	r0, r8
 808ebc0:	4a8a      	ldr	r2, [pc, #552]	; (808edec <strftime+0x540>)
 808ebc2:	f7fb fe81 	bl	808a8c8 <sniprintf>
 808ebc6:	e7d6      	b.n	808eb76 <strftime+0x2ca>
 808ebc8:	2325      	movs	r3, #37	; 0x25
 808ebca:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 808ebce:	f1ba 0f00 	cmp.w	sl, #0
 808ebd2:	d007      	beq.n	808ebe4 <strftime+0x338>
 808ebd4:	f1b8 0f05 	cmp.w	r8, #5
 808ebd8:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
 808ebdc:	bf98      	it	ls
 808ebde:	f04f 0806 	movls.w	r8, #6
 808ebe2:	e004      	b.n	808ebee <strftime+0x342>
 808ebe4:	232b      	movs	r3, #43	; 0x2b
 808ebe6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 808ebea:	f04f 080a 	mov.w	r8, #10
 808ebee:	f1b8 0306 	subs.w	r3, r8, #6
 808ebf2:	d102      	bne.n	808ebfa <strftime+0x34e>
 808ebf4:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 808ebf8:	e00a      	b.n	808ec10 <strftime+0x364>
 808ebfa:	4a7d      	ldr	r2, [pc, #500]	; (808edf0 <strftime+0x544>)
 808ebfc:	211e      	movs	r1, #30
 808ebfe:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 808ec02:	f7fb fe61 	bl	808a8c8 <sniprintf>
 808ec06:	2800      	cmp	r0, #0
 808ec08:	ddf4      	ble.n	808ebf4 <strftime+0x348>
 808ec0a:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 808ec0e:	4418      	add	r0, r3
 808ec10:	4978      	ldr	r1, [pc, #480]	; (808edf4 <strftime+0x548>)
 808ec12:	f7ff fdc7 	bl	808e7a4 <strcpy>
 808ec16:	462b      	mov	r3, r5
 808ec18:	aa0a      	add	r2, sp, #40	; 0x28
 808ec1a:	1b31      	subs	r1, r6, r4
 808ec1c:	1938      	adds	r0, r7, r4
 808ec1e:	f7ff fe45 	bl	808e8ac <strftime>
 808ec22:	2800      	cmp	r0, #0
 808ec24:	f340 82ec 	ble.w	808f200 <strftime+0x954>
 808ec28:	4404      	add	r4, r0
 808ec2a:	e2de      	b.n	808f1ea <strftime+0x93e>
 808ec2c:	4628      	mov	r0, r5
 808ec2e:	f7ff fddc 	bl	808e7ea <iso_year_adjust>
 808ec32:	4680      	mov	r8, r0
 808ec34:	6968      	ldr	r0, [r5, #20]
 808ec36:	2800      	cmp	r0, #0
 808ec38:	db05      	blt.n	808ec46 <strftime+0x39a>
 808ec3a:	2264      	movs	r2, #100	; 0x64
 808ec3c:	fb90 f1f2 	sdiv	r1, r0, r2
 808ec40:	fb02 0011 	mls	r0, r2, r1, r0
 808ec44:	e008      	b.n	808ec58 <strftime+0x3ac>
 808ec46:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808ec4a:	f001 fceb 	bl	8090624 <abs>
 808ec4e:	2264      	movs	r2, #100	; 0x64
 808ec50:	fb90 f3f2 	sdiv	r3, r0, r2
 808ec54:	fb03 0012 	mls	r0, r3, r2, r0
 808ec58:	f1b8 0f00 	cmp.w	r8, #0
 808ec5c:	da06      	bge.n	808ec6c <strftime+0x3c0>
 808ec5e:	696a      	ldr	r2, [r5, #20]
 808ec60:	4b65      	ldr	r3, [pc, #404]	; (808edf8 <strftime+0x54c>)
 808ec62:	429a      	cmp	r2, r3
 808ec64:	bfb8      	it	lt
 808ec66:	f04f 0801 	movlt.w	r8, #1
 808ec6a:	e006      	b.n	808ec7a <strftime+0x3ce>
 808ec6c:	d005      	beq.n	808ec7a <strftime+0x3ce>
 808ec6e:	696a      	ldr	r2, [r5, #20]
 808ec70:	4b56      	ldr	r3, [pc, #344]	; (808edcc <strftime+0x520>)
 808ec72:	429a      	cmp	r2, r3
 808ec74:	bfb8      	it	lt
 808ec76:	f04f 38ff 	movlt.w	r8, #4294967295
 808ec7a:	2364      	movs	r3, #100	; 0x64
 808ec7c:	4440      	add	r0, r8
 808ec7e:	fb90 f2f3 	sdiv	r2, r0, r3
 808ec82:	fb03 0012 	mls	r0, r3, r2, r0
 808ec86:	4418      	add	r0, r3
 808ec88:	e1f8      	b.n	808f07c <strftime+0x7d0>
 808ec8a:	4b50      	ldr	r3, [pc, #320]	; (808edcc <strftime+0x520>)
 808ec8c:	6969      	ldr	r1, [r5, #20]
 808ec8e:	4628      	mov	r0, r5
 808ec90:	4299      	cmp	r1, r3
 808ec92:	bfac      	ite	ge
 808ec94:	2300      	movge	r3, #0
 808ec96:	2301      	movlt	r3, #1
 808ec98:	9108      	str	r1, [sp, #32]
 808ec9a:	9307      	str	r3, [sp, #28]
 808ec9c:	f7ff fda5 	bl	808e7ea <iso_year_adjust>
 808eca0:	9908      	ldr	r1, [sp, #32]
 808eca2:	4683      	mov	fp, r0
 808eca4:	2900      	cmp	r1, #0
 808eca6:	db04      	blt.n	808ecb2 <strftime+0x406>
 808eca8:	2364      	movs	r3, #100	; 0x64
 808ecaa:	fb91 f3f3 	sdiv	r3, r1, r3
 808ecae:	3313      	adds	r3, #19
 808ecb0:	e008      	b.n	808ecc4 <strftime+0x418>
 808ecb2:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 808ecb6:	9108      	str	r1, [sp, #32]
 808ecb8:	f001 fcb4 	bl	8090624 <abs>
 808ecbc:	2364      	movs	r3, #100	; 0x64
 808ecbe:	fb90 f3f3 	sdiv	r3, r0, r3
 808ecc2:	9908      	ldr	r1, [sp, #32]
 808ecc4:	6968      	ldr	r0, [r5, #20]
 808ecc6:	2800      	cmp	r0, #0
 808ecc8:	db06      	blt.n	808ecd8 <strftime+0x42c>
 808ecca:	f04f 0e64 	mov.w	lr, #100	; 0x64
 808ecce:	fb90 fcfe 	sdiv	ip, r0, lr
 808ecd2:	fb0e 001c 	mls	r0, lr, ip, r0
 808ecd6:	e00d      	b.n	808ecf4 <strftime+0x448>
 808ecd8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808ecdc:	9109      	str	r1, [sp, #36]	; 0x24
 808ecde:	9308      	str	r3, [sp, #32]
 808ece0:	f001 fca0 	bl	8090624 <abs>
 808ece4:	f04f 0e64 	mov.w	lr, #100	; 0x64
 808ece8:	fb90 fcfe 	sdiv	ip, r0, lr
 808ecec:	fb0c 001e 	mls	r0, ip, lr, r0
 808ecf0:	9909      	ldr	r1, [sp, #36]	; 0x24
 808ecf2:	9b08      	ldr	r3, [sp, #32]
 808ecf4:	f1bb 0f00 	cmp.w	fp, #0
 808ecf8:	da08      	bge.n	808ed0c <strftime+0x460>
 808ecfa:	6969      	ldr	r1, [r5, #20]
 808ecfc:	4a3e      	ldr	r2, [pc, #248]	; (808edf8 <strftime+0x54c>)
 808ecfe:	4291      	cmp	r1, r2
 808ed00:	da0a      	bge.n	808ed18 <strftime+0x46c>
 808ed02:	f04f 0b01 	mov.w	fp, #1
 808ed06:	f8cd b01c 	str.w	fp, [sp, #28]
 808ed0a:	e005      	b.n	808ed18 <strftime+0x46c>
 808ed0c:	d004      	beq.n	808ed18 <strftime+0x46c>
 808ed0e:	4a2f      	ldr	r2, [pc, #188]	; (808edcc <strftime+0x520>)
 808ed10:	4291      	cmp	r1, r2
 808ed12:	bfb8      	it	lt
 808ed14:	f04f 3bff 	movlt.w	fp, #4294967295
 808ed18:	eb0b 0200 	add.w	r2, fp, r0
 808ed1c:	1c50      	adds	r0, r2, #1
 808ed1e:	d102      	bne.n	808ed26 <strftime+0x47a>
 808ed20:	3b01      	subs	r3, #1
 808ed22:	2263      	movs	r2, #99	; 0x63
 808ed24:	e003      	b.n	808ed2e <strftime+0x482>
 808ed26:	2a64      	cmp	r2, #100	; 0x64
 808ed28:	bf04      	itt	eq
 808ed2a:	3301      	addeq	r3, #1
 808ed2c:	2200      	moveq	r2, #0
 808ed2e:	2064      	movs	r0, #100	; 0x64
 808ed30:	fb00 2303 	mla	r3, r0, r3, r2
 808ed34:	9a07      	ldr	r2, [sp, #28]
 808ed36:	b142      	cbz	r2, 808ed4a <strftime+0x49e>
 808ed38:	222d      	movs	r2, #45	; 0x2d
 808ed3a:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
 808ed3e:	f1b8 0f00 	cmp.w	r8, #0
 808ed42:	d013      	beq.n	808ed6c <strftime+0x4c0>
 808ed44:	f108 38ff 	add.w	r8, r8, #4294967295
 808ed48:	e010      	b.n	808ed6c <strftime+0x4c0>
 808ed4a:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808ed4e:	d110      	bne.n	808ed72 <strftime+0x4c6>
 808ed50:	f242 720f 	movw	r2, #9999	; 0x270f
 808ed54:	4293      	cmp	r3, r2
 808ed56:	d90c      	bls.n	808ed72 <strftime+0x4c6>
 808ed58:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 808ed5c:	f1b8 0f00 	cmp.w	r8, #0
 808ed60:	d1f0      	bne.n	808ed44 <strftime+0x498>
 808ed62:	aa12      	add	r2, sp, #72	; 0x48
 808ed64:	2125      	movs	r1, #37	; 0x25
 808ed66:	f802 1d1f 	strb.w	r1, [r2, #-31]!
 808ed6a:	e00a      	b.n	808ed82 <strftime+0x4d6>
 808ed6c:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 808ed70:	e000      	b.n	808ed74 <strftime+0x4c8>
 808ed72:	aa0a      	add	r2, sp, #40	; 0x28
 808ed74:	2125      	movs	r1, #37	; 0x25
 808ed76:	7011      	strb	r1, [r2, #0]
 808ed78:	f1ba 0f00 	cmp.w	sl, #0
 808ed7c:	d101      	bne.n	808ed82 <strftime+0x4d6>
 808ed7e:	1c50      	adds	r0, r2, #1
 808ed80:	e002      	b.n	808ed88 <strftime+0x4dc>
 808ed82:	2130      	movs	r1, #48	; 0x30
 808ed84:	1c90      	adds	r0, r2, #2
 808ed86:	7051      	strb	r1, [r2, #1]
 808ed88:	491c      	ldr	r1, [pc, #112]	; (808edfc <strftime+0x550>)
 808ed8a:	9307      	str	r3, [sp, #28]
 808ed8c:	f7ff fd0a 	bl	808e7a4 <strcpy>
 808ed90:	9b07      	ldr	r3, [sp, #28]
 808ed92:	9300      	str	r3, [sp, #0]
 808ed94:	e1ac      	b.n	808f0f0 <strftime+0x844>
 808ed96:	4a14      	ldr	r2, [pc, #80]	; (808ede8 <strftime+0x53c>)
 808ed98:	4912      	ldr	r1, [pc, #72]	; (808ede4 <strftime+0x538>)
 808ed9a:	68ab      	ldr	r3, [r5, #8]
 808ed9c:	286b      	cmp	r0, #107	; 0x6b
 808ed9e:	bf08      	it	eq
 808eda0:	460a      	moveq	r2, r1
 808eda2:	e6e4      	b.n	808eb6e <strftime+0x2c2>
 808eda4:	68a9      	ldr	r1, [r5, #8]
 808eda6:	230c      	movs	r3, #12
 808eda8:	b131      	cbz	r1, 808edb8 <strftime+0x50c>
 808edaa:	4299      	cmp	r1, r3
 808edac:	bf16      	itet	ne
 808edae:	fb91 f2f3 	sdivne	r2, r1, r3
 808edb2:	460b      	moveq	r3, r1
 808edb4:	fb03 1312 	mlsne	r3, r3, r2, r1
 808edb8:	4a0a      	ldr	r2, [pc, #40]	; (808ede4 <strftime+0x538>)
 808edba:	490b      	ldr	r1, [pc, #44]	; (808ede8 <strftime+0x53c>)
 808edbc:	2849      	cmp	r0, #73	; 0x49
 808edbe:	bf08      	it	eq
 808edc0:	460a      	moveq	r2, r1
 808edc2:	e6d4      	b.n	808eb6e <strftime+0x2c2>
 808edc4:	69eb      	ldr	r3, [r5, #28]
 808edc6:	4a0e      	ldr	r2, [pc, #56]	; (808ee00 <strftime+0x554>)
 808edc8:	3301      	adds	r3, #1
 808edca:	e6d0      	b.n	808eb6e <strftime+0x2c2>
 808edcc:	fffff894 	.word	0xfffff894
 808edd0:	080945e3 	.word	0x080945e3
 808edd4:	08094100 	.word	0x08094100
 808edd8:	080945d4 	.word	0x080945d4
 808eddc:	080945db 	.word	0x080945db
 808ede0:	08093087 	.word	0x08093087
 808ede4:	080945e5 	.word	0x080945e5
 808ede8:	080945f3 	.word	0x080945f3
 808edec:	080945e9 	.word	0x080945e9
 808edf0:	080945f8 	.word	0x080945f8
 808edf4:	080945fc 	.word	0x080945fc
 808edf8:	fffff895 	.word	0xfffff895
 808edfc:	08094604 	.word	0x08094604
 808ee00:	08094608 	.word	0x08094608
 808ee04:	692b      	ldr	r3, [r5, #16]
 808ee06:	3301      	adds	r3, #1
 808ee08:	e13c      	b.n	808f084 <strftime+0x7d8>
 808ee0a:	686b      	ldr	r3, [r5, #4]
 808ee0c:	e13a      	b.n	808f084 <strftime+0x7d8>
 808ee0e:	9b02      	ldr	r3, [sp, #8]
 808ee10:	429c      	cmp	r4, r3
 808ee12:	f080 81f5 	bcs.w	808f200 <strftime+0x954>
 808ee16:	230a      	movs	r3, #10
 808ee18:	e1e5      	b.n	808f1e6 <strftime+0x93a>
 808ee1a:	68ab      	ldr	r3, [r5, #8]
 808ee1c:	9a03      	ldr	r2, [sp, #12]
 808ee1e:	2b0b      	cmp	r3, #11
 808ee20:	bfcc      	ite	gt
 808ee22:	23a4      	movgt	r3, #164	; 0xa4
 808ee24:	23a0      	movle	r3, #160	; 0xa0
 808ee26:	4413      	add	r3, r2
 808ee28:	f8d3 8004 	ldr.w	r8, [r3, #4]
 808ee2c:	4640      	mov	r0, r8
 808ee2e:	f000 f9f1 	bl	808f214 <strlen>
 808ee32:	4642      	mov	r2, r8
 808ee34:	4bb1      	ldr	r3, [pc, #708]	; (808f0fc <strftime+0x850>)
 808ee36:	1939      	adds	r1, r7, r4
 808ee38:	f8d3 e000 	ldr.w	lr, [r3]
 808ee3c:	4420      	add	r0, r4
 808ee3e:	4284      	cmp	r4, r0
 808ee40:	f000 81d3 	beq.w	808f1ea <strftime+0x93e>
 808ee44:	9b02      	ldr	r3, [sp, #8]
 808ee46:	429c      	cmp	r4, r3
 808ee48:	f080 81da 	bcs.w	808f200 <strftime+0x954>
 808ee4c:	f899 3000 	ldrb.w	r3, [r9]
 808ee50:	3401      	adds	r4, #1
 808ee52:	2b50      	cmp	r3, #80	; 0x50
 808ee54:	7813      	ldrb	r3, [r2, #0]
 808ee56:	d10a      	bne.n	808ee6e <strftime+0x5c2>
 808ee58:	eb0e 0c03 	add.w	ip, lr, r3
 808ee5c:	f89c c001 	ldrb.w	ip, [ip, #1]
 808ee60:	f00c 0c03 	and.w	ip, ip, #3
 808ee64:	f1bc 0f01 	cmp.w	ip, #1
 808ee68:	bf08      	it	eq
 808ee6a:	3320      	addeq	r3, #32
 808ee6c:	b2db      	uxtb	r3, r3
 808ee6e:	f801 3b01 	strb.w	r3, [r1], #1
 808ee72:	3201      	adds	r2, #1
 808ee74:	e7e3      	b.n	808ee3e <strftime+0x592>
 808ee76:	686b      	ldr	r3, [r5, #4]
 808ee78:	4aa1      	ldr	r2, [pc, #644]	; (808f100 <strftime+0x854>)
 808ee7a:	9300      	str	r3, [sp, #0]
 808ee7c:	68ab      	ldr	r3, [r5, #8]
 808ee7e:	e139      	b.n	808f0f4 <strftime+0x848>
 808ee80:	6a2b      	ldr	r3, [r5, #32]
 808ee82:	2b00      	cmp	r3, #0
 808ee84:	db17      	blt.n	808eeb6 <strftime+0x60a>
 808ee86:	f001 fa45 	bl	8090314 <__tz_lock>
 808ee8a:	9b06      	ldr	r3, [sp, #24]
 808ee8c:	b91b      	cbnz	r3, 808ee96 <strftime+0x5ea>
 808ee8e:	f001 fa43 	bl	8090318 <_tzset_unlocked>
 808ee92:	2301      	movs	r3, #1
 808ee94:	9306      	str	r3, [sp, #24]
 808ee96:	f001 ff2b 	bl	8090cf0 <__gettzinfo>
 808ee9a:	6a2b      	ldr	r3, [r5, #32]
 808ee9c:	221c      	movs	r2, #28
 808ee9e:	2b00      	cmp	r3, #0
 808eea0:	bfd4      	ite	le
 808eea2:	2300      	movle	r3, #0
 808eea4:	2301      	movgt	r3, #1
 808eea6:	fb02 0003 	mla	r0, r2, r3, r0
 808eeaa:	6a03      	ldr	r3, [r0, #32]
 808eeac:	f1c3 0800 	rsb	r8, r3, #0
 808eeb0:	f001 fa31 	bl	8090316 <__tz_unlock>
 808eeb4:	e001      	b.n	808eeba <strftime+0x60e>
 808eeb6:	f04f 0800 	mov.w	r8, #0
 808eeba:	f8d5 e014 	ldr.w	lr, [r5, #20]
 808eebe:	ebc4 0c06 	rsb	ip, r4, r6
 808eec2:	4670      	mov	r0, lr
 808eec4:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
 808eec8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 808eecc:	f141 33ff 	adc.w	r3, r1, #4294967295
 808eed0:	2a00      	cmp	r2, #0
 808eed2:	f173 0b00 	sbcs.w	fp, r3, #0
 808eed6:	eb07 0a04 	add.w	sl, r7, r4
 808eeda:	da03      	bge.n	808eee4 <strftime+0x638>
 808eedc:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
 808eee0:	f141 33ff 	adc.w	r3, r1, #4294967295
 808eee4:	0891      	lsrs	r1, r2, #2
 808eee6:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
 808eeea:	109b      	asrs	r3, r3, #2
 808eeec:	9104      	str	r1, [sp, #16]
 808eeee:	9305      	str	r3, [sp, #20]
 808eef0:	f10e 31ff 	add.w	r1, lr, #4294967295
 808eef4:	2364      	movs	r3, #100	; 0x64
 808eef6:	fb91 f1f3 	sdiv	r1, r1, r3
 808eefa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 808eefe:	1a52      	subs	r2, r2, r1
 808ef00:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
 808ef04:	f20e 102b 	addw	r0, lr, #299	; 0x12b
 808ef08:	f44f 71c8 	mov.w	r1, #400	; 0x190
 808ef0c:	fb90 f1f1 	sdiv	r1, r0, r1
 808ef10:	1852      	adds	r2, r2, r1
 808ef12:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 808ef16:	f240 116d 	movw	r1, #365	; 0x16d
 808ef1a:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
 808ef1e:	fb01 fe0e 	mul.w	lr, r1, lr
 808ef22:	69e9      	ldr	r1, [r5, #28]
 808ef24:	eb12 020e 	adds.w	r2, r2, lr
 808ef28:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
 808ef2c:	1852      	adds	r2, r2, r1
 808ef2e:	f04f 0e18 	mov.w	lr, #24
 808ef32:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 808ef36:	fba2 010e 	umull	r0, r1, r2, lr
 808ef3a:	fb0e 1103 	mla	r1, lr, r3, r1
 808ef3e:	68ab      	ldr	r3, [r5, #8]
 808ef40:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
 808ef44:	18c0      	adds	r0, r0, r3
 808ef46:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 808ef4a:	fba0 230e 	umull	r2, r3, r0, lr
 808ef4e:	fb0e 3301 	mla	r3, lr, r1, r3
 808ef52:	6869      	ldr	r1, [r5, #4]
 808ef54:	1852      	adds	r2, r2, r1
 808ef56:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 808ef5a:	fba2 010e 	umull	r0, r1, r2, lr
 808ef5e:	fb0e 1103 	mla	r1, lr, r3, r1
 808ef62:	682b      	ldr	r3, [r5, #0]
 808ef64:	4a67      	ldr	r2, [pc, #412]	; (808f104 <strftime+0x858>)
 808ef66:	18c0      	adds	r0, r0, r3
 808ef68:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 808ef6c:	ebb0 0008 	subs.w	r0, r0, r8
 808ef70:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
 808ef74:	e9cd 0100 	strd	r0, r1, [sp]
 808ef78:	4661      	mov	r1, ip
 808ef7a:	4650      	mov	r0, sl
 808ef7c:	f7fb fca4 	bl	808a8c8 <sniprintf>
 808ef80:	e5f9      	b.n	808eb76 <strftime+0x2ca>
 808ef82:	682b      	ldr	r3, [r5, #0]
 808ef84:	e07e      	b.n	808f084 <strftime+0x7d8>
 808ef86:	9b02      	ldr	r3, [sp, #8]
 808ef88:	429c      	cmp	r4, r3
 808ef8a:	f080 8139 	bcs.w	808f200 <strftime+0x954>
 808ef8e:	2309      	movs	r3, #9
 808ef90:	e129      	b.n	808f1e6 <strftime+0x93a>
 808ef92:	682b      	ldr	r3, [r5, #0]
 808ef94:	4a5c      	ldr	r2, [pc, #368]	; (808f108 <strftime+0x85c>)
 808ef96:	9301      	str	r3, [sp, #4]
 808ef98:	686b      	ldr	r3, [r5, #4]
 808ef9a:	9300      	str	r3, [sp, #0]
 808ef9c:	68ab      	ldr	r3, [r5, #8]
 808ef9e:	1b31      	subs	r1, r6, r4
 808efa0:	1938      	adds	r0, r7, r4
 808efa2:	e60e      	b.n	808ebc2 <strftime+0x316>
 808efa4:	9b02      	ldr	r3, [sp, #8]
 808efa6:	429c      	cmp	r4, r3
 808efa8:	f080 812a 	bcs.w	808f200 <strftime+0x954>
 808efac:	69ab      	ldr	r3, [r5, #24]
 808efae:	1c62      	adds	r2, r4, #1
 808efb0:	b90b      	cbnz	r3, 808efb6 <strftime+0x70a>
 808efb2:	2337      	movs	r3, #55	; 0x37
 808efb4:	e000      	b.n	808efb8 <strftime+0x70c>
 808efb6:	3330      	adds	r3, #48	; 0x30
 808efb8:	553b      	strb	r3, [r7, r4]
 808efba:	4614      	mov	r4, r2
 808efbc:	e115      	b.n	808f1ea <strftime+0x93e>
 808efbe:	69eb      	ldr	r3, [r5, #28]
 808efc0:	69aa      	ldr	r2, [r5, #24]
 808efc2:	3307      	adds	r3, #7
 808efc4:	1a9b      	subs	r3, r3, r2
 808efc6:	2207      	movs	r2, #7
 808efc8:	fb93 f3f2 	sdiv	r3, r3, r2
 808efcc:	e05a      	b.n	808f084 <strftime+0x7d8>
 808efce:	4628      	mov	r0, r5
 808efd0:	f7ff fc0b 	bl	808e7ea <iso_year_adjust>
 808efd4:	69aa      	ldr	r2, [r5, #24]
 808efd6:	b10a      	cbz	r2, 808efdc <strftime+0x730>
 808efd8:	1e53      	subs	r3, r2, #1
 808efda:	e000      	b.n	808efde <strftime+0x732>
 808efdc:	2306      	movs	r3, #6
 808efde:	2800      	cmp	r0, #0
 808efe0:	dc2f      	bgt.n	808f042 <strftime+0x796>
 808efe2:	69ea      	ldr	r2, [r5, #28]
 808efe4:	d101      	bne.n	808efea <strftime+0x73e>
 808efe6:	320a      	adds	r2, #10
 808efe8:	e03b      	b.n	808f062 <strftime+0x7b6>
 808efea:	f240 716b 	movw	r1, #1899	; 0x76b
 808efee:	1a9a      	subs	r2, r3, r2
 808eff0:	696b      	ldr	r3, [r5, #20]
 808eff2:	2b00      	cmp	r3, #0
 808eff4:	bfb4      	ite	lt
 808eff6:	4608      	movlt	r0, r1
 808eff8:	f06f 0064 	mvnge.w	r0, #100	; 0x64
 808effc:	4418      	add	r0, r3
 808effe:	0781      	lsls	r1, r0, #30
 808f000:	d107      	bne.n	808f012 <strftime+0x766>
 808f002:	f04f 0e64 	mov.w	lr, #100	; 0x64
 808f006:	4601      	mov	r1, r0
 808f008:	fb90 f0fe 	sdiv	r0, r0, lr
 808f00c:	fb0e 1110 	mls	r1, lr, r0, r1
 808f010:	b981      	cbnz	r1, 808f034 <strftime+0x788>
 808f012:	f240 716b 	movw	r1, #1899	; 0x76b
 808f016:	2b00      	cmp	r3, #0
 808f018:	bfa8      	it	ge
 808f01a:	f06f 0164 	mvnge.w	r1, #100	; 0x64
 808f01e:	4419      	add	r1, r3
 808f020:	f44f 73c8 	mov.w	r3, #400	; 0x190
 808f024:	fb91 f0f3 	sdiv	r0, r1, r3
 808f028:	fb03 1110 	mls	r1, r3, r0, r1
 808f02c:	fab1 f181 	clz	r1, r1
 808f030:	0949      	lsrs	r1, r1, #5
 808f032:	e000      	b.n	808f036 <strftime+0x78a>
 808f034:	2101      	movs	r1, #1
 808f036:	1a52      	subs	r2, r2, r1
 808f038:	2a05      	cmp	r2, #5
 808f03a:	bfb4      	ite	lt
 808f03c:	2335      	movlt	r3, #53	; 0x35
 808f03e:	2334      	movge	r3, #52	; 0x34
 808f040:	e020      	b.n	808f084 <strftime+0x7d8>
 808f042:	2301      	movs	r3, #1
 808f044:	e01e      	b.n	808f084 <strftime+0x7d8>
 808f046:	9b02      	ldr	r3, [sp, #8]
 808f048:	429c      	cmp	r4, r3
 808f04a:	f080 80d9 	bcs.w	808f200 <strftime+0x954>
 808f04e:	69ab      	ldr	r3, [r5, #24]
 808f050:	3330      	adds	r3, #48	; 0x30
 808f052:	e0c8      	b.n	808f1e6 <strftime+0x93a>
 808f054:	69aa      	ldr	r2, [r5, #24]
 808f056:	b10a      	cbz	r2, 808f05c <strftime+0x7b0>
 808f058:	1e53      	subs	r3, r2, #1
 808f05a:	e000      	b.n	808f05e <strftime+0x7b2>
 808f05c:	2306      	movs	r3, #6
 808f05e:	69ea      	ldr	r2, [r5, #28]
 808f060:	3207      	adds	r2, #7
 808f062:	1ad2      	subs	r2, r2, r3
 808f064:	2307      	movs	r3, #7
 808f066:	fb92 f3f3 	sdiv	r3, r2, r3
 808f06a:	e00b      	b.n	808f084 <strftime+0x7d8>
 808f06c:	6968      	ldr	r0, [r5, #20]
 808f06e:	2800      	cmp	r0, #0
 808f070:	da03      	bge.n	808f07a <strftime+0x7ce>
 808f072:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808f076:	f001 fad5 	bl	8090624 <abs>
 808f07a:	2364      	movs	r3, #100	; 0x64
 808f07c:	fb90 f2f3 	sdiv	r2, r0, r3
 808f080:	fb02 0313 	mls	r3, r2, r3, r0
 808f084:	4a21      	ldr	r2, [pc, #132]	; (808f10c <strftime+0x860>)
 808f086:	e572      	b.n	808eb6e <strftime+0x2c2>
 808f088:	696b      	ldr	r3, [r5, #20]
 808f08a:	4a21      	ldr	r2, [pc, #132]	; (808f110 <strftime+0x864>)
 808f08c:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
 808f090:	4293      	cmp	r3, r2
 808f092:	da05      	bge.n	808f0a0 <strftime+0x7f4>
 808f094:	232d      	movs	r3, #45	; 0x2d
 808f096:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 808f09a:	f1cb 0b00 	rsb	fp, fp, #0
 808f09e:	e008      	b.n	808f0b2 <strftime+0x806>
 808f0a0:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808f0a4:	d10d      	bne.n	808f0c2 <strftime+0x816>
 808f0a6:	f242 730f 	movw	r3, #9999	; 0x270f
 808f0aa:	459b      	cmp	fp, r3
 808f0ac:	d911      	bls.n	808f0d2 <strftime+0x826>
 808f0ae:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 808f0b2:	f1b8 0f00 	cmp.w	r8, #0
 808f0b6:	d001      	beq.n	808f0bc <strftime+0x810>
 808f0b8:	f108 38ff 	add.w	r8, r8, #4294967295
 808f0bc:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 808f0c0:	e000      	b.n	808f0c4 <strftime+0x818>
 808f0c2:	ab0a      	add	r3, sp, #40	; 0x28
 808f0c4:	2225      	movs	r2, #37	; 0x25
 808f0c6:	701a      	strb	r2, [r3, #0]
 808f0c8:	f1ba 0f00 	cmp.w	sl, #0
 808f0cc:	d108      	bne.n	808f0e0 <strftime+0x834>
 808f0ce:	1c58      	adds	r0, r3, #1
 808f0d0:	e009      	b.n	808f0e6 <strftime+0x83a>
 808f0d2:	f1b8 0f00 	cmp.w	r8, #0
 808f0d6:	d1f4      	bne.n	808f0c2 <strftime+0x816>
 808f0d8:	2325      	movs	r3, #37	; 0x25
 808f0da:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 808f0de:	ab0a      	add	r3, sp, #40	; 0x28
 808f0e0:	2230      	movs	r2, #48	; 0x30
 808f0e2:	1c98      	adds	r0, r3, #2
 808f0e4:	705a      	strb	r2, [r3, #1]
 808f0e6:	490b      	ldr	r1, [pc, #44]	; (808f114 <strftime+0x868>)
 808f0e8:	f7ff fb5c 	bl	808e7a4 <strcpy>
 808f0ec:	f8cd b000 	str.w	fp, [sp]
 808f0f0:	4643      	mov	r3, r8
 808f0f2:	aa0a      	add	r2, sp, #40	; 0x28
 808f0f4:	1b31      	subs	r1, r6, r4
 808f0f6:	1938      	adds	r0, r7, r4
 808f0f8:	e03f      	b.n	808f17a <strftime+0x8ce>
 808f0fa:	bf00      	nop
 808f0fc:	200000e4 	.word	0x200000e4
 808f100:	08094617 	.word	0x08094617
 808f104:	0809460d 	.word	0x0809460d
 808f108:	08094612 	.word	0x08094612
 808f10c:	080945f3 	.word	0x080945f3
 808f110:	fffff894 	.word	0xfffff894
 808f114:	08094604 	.word	0x08094604
 808f118:	6a2b      	ldr	r3, [r5, #32]
 808f11a:	2b00      	cmp	r3, #0
 808f11c:	db65      	blt.n	808f1ea <strftime+0x93e>
 808f11e:	f001 f8f9 	bl	8090314 <__tz_lock>
 808f122:	9b06      	ldr	r3, [sp, #24]
 808f124:	b91b      	cbnz	r3, 808f12e <strftime+0x882>
 808f126:	f001 f8f7 	bl	8090318 <_tzset_unlocked>
 808f12a:	2301      	movs	r3, #1
 808f12c:	9306      	str	r3, [sp, #24]
 808f12e:	f001 fddf 	bl	8090cf0 <__gettzinfo>
 808f132:	6a2b      	ldr	r3, [r5, #32]
 808f134:	221c      	movs	r2, #28
 808f136:	2b00      	cmp	r3, #0
 808f138:	bfd4      	ite	le
 808f13a:	2300      	movle	r3, #0
 808f13c:	2301      	movgt	r3, #1
 808f13e:	fb02 0003 	mla	r0, r2, r3, r0
 808f142:	6a03      	ldr	r3, [r0, #32]
 808f144:	eb07 0a04 	add.w	sl, r7, r4
 808f148:	f1c3 0800 	rsb	r8, r3, #0
 808f14c:	f001 f8e3 	bl	8090316 <__tz_unlock>
 808f150:	233c      	movs	r3, #60	; 0x3c
 808f152:	fb98 f0f3 	sdiv	r0, r8, r3
 808f156:	9307      	str	r3, [sp, #28]
 808f158:	f001 fe64 	bl	8090e24 <labs>
 808f15c:	9b07      	ldr	r3, [sp, #28]
 808f15e:	ebc4 0b06 	rsb	fp, r4, r6
 808f162:	fb90 f2f3 	sdiv	r2, r0, r3
 808f166:	fb02 0013 	mls	r0, r2, r3, r0
 808f16a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808f16e:	9000      	str	r0, [sp, #0]
 808f170:	fb98 f3f3 	sdiv	r3, r8, r3
 808f174:	4659      	mov	r1, fp
 808f176:	4650      	mov	r0, sl
 808f178:	4a24      	ldr	r2, [pc, #144]	; (808f20c <strftime+0x960>)
 808f17a:	f7fb fba5 	bl	808a8c8 <sniprintf>
 808f17e:	e4fa      	b.n	808eb76 <strftime+0x2ca>
 808f180:	4404      	add	r4, r0
 808f182:	42a6      	cmp	r6, r4
 808f184:	d831      	bhi.n	808f1ea <strftime+0x93e>
 808f186:	e03b      	b.n	808f200 <strftime+0x954>
 808f188:	6a2b      	ldr	r3, [r5, #32]
 808f18a:	2b00      	cmp	r3, #0
 808f18c:	db2d      	blt.n	808f1ea <strftime+0x93e>
 808f18e:	f001 f8c1 	bl	8090314 <__tz_lock>
 808f192:	9b06      	ldr	r3, [sp, #24]
 808f194:	b91b      	cbnz	r3, 808f19e <strftime+0x8f2>
 808f196:	f001 f8bf 	bl	8090318 <_tzset_unlocked>
 808f19a:	2301      	movs	r3, #1
 808f19c:	9306      	str	r3, [sp, #24]
 808f19e:	6a2b      	ldr	r3, [r5, #32]
 808f1a0:	4a1b      	ldr	r2, [pc, #108]	; (808f210 <strftime+0x964>)
 808f1a2:	2b00      	cmp	r3, #0
 808f1a4:	bfd4      	ite	le
 808f1a6:	2300      	movle	r3, #0
 808f1a8:	2301      	movgt	r3, #1
 808f1aa:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808f1ae:	4640      	mov	r0, r8
 808f1b0:	f000 f830 	bl	808f214 <strlen>
 808f1b4:	f108 38ff 	add.w	r8, r8, #4294967295
 808f1b8:	193b      	adds	r3, r7, r4
 808f1ba:	4420      	add	r0, r4
 808f1bc:	4284      	cmp	r4, r0
 808f1be:	d00b      	beq.n	808f1d8 <strftime+0x92c>
 808f1c0:	9a02      	ldr	r2, [sp, #8]
 808f1c2:	4294      	cmp	r4, r2
 808f1c4:	d205      	bcs.n	808f1d2 <strftime+0x926>
 808f1c6:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808f1ca:	3401      	adds	r4, #1
 808f1cc:	f803 2b01 	strb.w	r2, [r3], #1
 808f1d0:	e7f4      	b.n	808f1bc <strftime+0x910>
 808f1d2:	f001 f8a0 	bl	8090316 <__tz_unlock>
 808f1d6:	e013      	b.n	808f200 <strftime+0x954>
 808f1d8:	f001 f89d 	bl	8090316 <__tz_unlock>
 808f1dc:	e005      	b.n	808f1ea <strftime+0x93e>
 808f1de:	9b02      	ldr	r3, [sp, #8]
 808f1e0:	429c      	cmp	r4, r3
 808f1e2:	d20d      	bcs.n	808f200 <strftime+0x954>
 808f1e4:	2325      	movs	r3, #37	; 0x25
 808f1e6:	553b      	strb	r3, [r7, r4]
 808f1e8:	3401      	adds	r4, #1
 808f1ea:	f899 3000 	ldrb.w	r3, [r9]
 808f1ee:	b11b      	cbz	r3, 808f1f8 <strftime+0x94c>
 808f1f0:	f109 0901 	add.w	r9, r9, #1
 808f1f4:	f7ff bb69 	b.w	808e8ca <strftime+0x1e>
 808f1f8:	b126      	cbz	r6, 808f204 <strftime+0x958>
 808f1fa:	2300      	movs	r3, #0
 808f1fc:	553b      	strb	r3, [r7, r4]
 808f1fe:	e001      	b.n	808f204 <strftime+0x958>
 808f200:	2000      	movs	r0, #0
 808f202:	e000      	b.n	808f206 <strftime+0x95a>
 808f204:	4620      	mov	r0, r4
 808f206:	b013      	add	sp, #76	; 0x4c
 808f208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808f20c:	08094621 	.word	0x08094621
 808f210:	20000184 	.word	0x20000184

0808f214 <strlen>:
 808f214:	4603      	mov	r3, r0
 808f216:	f813 2b01 	ldrb.w	r2, [r3], #1
 808f21a:	2a00      	cmp	r2, #0
 808f21c:	d1fb      	bne.n	808f216 <strlen+0x2>
 808f21e:	1a18      	subs	r0, r3, r0
 808f220:	3801      	subs	r0, #1
 808f222:	4770      	bx	lr

0808f224 <strncmp>:
 808f224:	b530      	push	{r4, r5, lr}
 808f226:	b182      	cbz	r2, 808f24a <strncmp+0x26>
 808f228:	1e45      	subs	r5, r0, #1
 808f22a:	3901      	subs	r1, #1
 808f22c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 808f230:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808f234:	42a3      	cmp	r3, r4
 808f236:	d106      	bne.n	808f246 <strncmp+0x22>
 808f238:	43ec      	mvns	r4, r5
 808f23a:	4414      	add	r4, r2
 808f23c:	42e0      	cmn	r0, r4
 808f23e:	d001      	beq.n	808f244 <strncmp+0x20>
 808f240:	2b00      	cmp	r3, #0
 808f242:	d1f3      	bne.n	808f22c <strncmp+0x8>
 808f244:	461c      	mov	r4, r3
 808f246:	1b18      	subs	r0, r3, r4
 808f248:	bd30      	pop	{r4, r5, pc}
 808f24a:	4610      	mov	r0, r2
 808f24c:	bd30      	pop	{r4, r5, pc}

0808f24e <strncpy>:
 808f24e:	4603      	mov	r3, r0
 808f250:	b510      	push	{r4, lr}
 808f252:	b142      	cbz	r2, 808f266 <strncpy+0x18>
 808f254:	f811 4b01 	ldrb.w	r4, [r1], #1
 808f258:	3a01      	subs	r2, #1
 808f25a:	f803 4b01 	strb.w	r4, [r3], #1
 808f25e:	2c00      	cmp	r4, #0
 808f260:	d1f7      	bne.n	808f252 <strncpy+0x4>
 808f262:	441a      	add	r2, r3
 808f264:	e000      	b.n	808f268 <strncpy+0x1a>
 808f266:	bd10      	pop	{r4, pc}
 808f268:	4293      	cmp	r3, r2
 808f26a:	d002      	beq.n	808f272 <strncpy+0x24>
 808f26c:	f803 4b01 	strb.w	r4, [r3], #1
 808f270:	e7fa      	b.n	808f268 <strncpy+0x1a>
 808f272:	bd10      	pop	{r4, pc}

0808f274 <strstr>:
 808f274:	b5f0      	push	{r4, r5, r6, r7, lr}
 808f276:	7803      	ldrb	r3, [r0, #0]
 808f278:	b963      	cbnz	r3, 808f294 <strstr+0x20>
 808f27a:	780b      	ldrb	r3, [r1, #0]
 808f27c:	2b00      	cmp	r3, #0
 808f27e:	bf18      	it	ne
 808f280:	2000      	movne	r0, #0
 808f282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808f284:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 808f288:	b162      	cbz	r2, 808f2a4 <strstr+0x30>
 808f28a:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 808f28e:	4630      	mov	r0, r6
 808f290:	4297      	cmp	r7, r2
 808f292:	d0f7      	beq.n	808f284 <strstr+0x10>
 808f294:	4603      	mov	r3, r0
 808f296:	1c46      	adds	r6, r0, #1
 808f298:	7800      	ldrb	r0, [r0, #0]
 808f29a:	b110      	cbz	r0, 808f2a2 <strstr+0x2e>
 808f29c:	1e4d      	subs	r5, r1, #1
 808f29e:	1e5c      	subs	r4, r3, #1
 808f2a0:	e7f0      	b.n	808f284 <strstr+0x10>
 808f2a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808f2a4:	4618      	mov	r0, r3
 808f2a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808f2a8 <sulp>:
 808f2a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808f2ac:	460f      	mov	r7, r1
 808f2ae:	4690      	mov	r8, r2
 808f2b0:	f002 f882 	bl	80913b8 <__ulp>
 808f2b4:	4604      	mov	r4, r0
 808f2b6:	460d      	mov	r5, r1
 808f2b8:	f1b8 0f00 	cmp.w	r8, #0
 808f2bc:	d011      	beq.n	808f2e2 <sulp+0x3a>
 808f2be:	f3c7 530a 	ubfx	r3, r7, #20, #11
 808f2c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808f2c6:	2b00      	cmp	r3, #0
 808f2c8:	dd0b      	ble.n	808f2e2 <sulp+0x3a>
 808f2ca:	051b      	lsls	r3, r3, #20
 808f2cc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 808f2d0:	2400      	movs	r4, #0
 808f2d2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 808f2d6:	4622      	mov	r2, r4
 808f2d8:	462b      	mov	r3, r5
 808f2da:	f7fe f855 	bl	808d388 <__aeabi_dmul>
 808f2de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808f2e2:	4620      	mov	r0, r4
 808f2e4:	4629      	mov	r1, r5
 808f2e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808f2ea:	0000      	movs	r0, r0
 808f2ec:	0000      	movs	r0, r0
	...

0808f2f0 <_strtod_r>:
 808f2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808f2f4:	4682      	mov	sl, r0
 808f2f6:	460c      	mov	r4, r1
 808f2f8:	b09d      	sub	sp, #116	; 0x74
 808f2fa:	2300      	movs	r3, #0
 808f2fc:	9213      	str	r2, [sp, #76]	; 0x4c
 808f2fe:	9318      	str	r3, [sp, #96]	; 0x60
 808f300:	f04f 0800 	mov.w	r8, #0
 808f304:	f04f 0900 	mov.w	r9, #0
 808f308:	9117      	str	r1, [sp, #92]	; 0x5c
 808f30a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808f30c:	781a      	ldrb	r2, [r3, #0]
 808f30e:	2a0d      	cmp	r2, #13
 808f310:	d805      	bhi.n	808f31e <_strtod_r+0x2e>
 808f312:	2a09      	cmp	r2, #9
 808f314:	d213      	bcs.n	808f33e <_strtod_r+0x4e>
 808f316:	2a00      	cmp	r2, #0
 808f318:	f000 81ad 	beq.w	808f676 <_strtod_r+0x386>
 808f31c:	e012      	b.n	808f344 <_strtod_r+0x54>
 808f31e:	2a2b      	cmp	r2, #43	; 0x2b
 808f320:	d004      	beq.n	808f32c <_strtod_r+0x3c>
 808f322:	2a2d      	cmp	r2, #45	; 0x2d
 808f324:	d004      	beq.n	808f330 <_strtod_r+0x40>
 808f326:	2a20      	cmp	r2, #32
 808f328:	d10c      	bne.n	808f344 <_strtod_r+0x54>
 808f32a:	e008      	b.n	808f33e <_strtod_r+0x4e>
 808f32c:	2200      	movs	r2, #0
 808f32e:	e000      	b.n	808f332 <_strtod_r+0x42>
 808f330:	2201      	movs	r2, #1
 808f332:	920c      	str	r2, [sp, #48]	; 0x30
 808f334:	1c5a      	adds	r2, r3, #1
 808f336:	9217      	str	r2, [sp, #92]	; 0x5c
 808f338:	785b      	ldrb	r3, [r3, #1]
 808f33a:	b92b      	cbnz	r3, 808f348 <_strtod_r+0x58>
 808f33c:	e19b      	b.n	808f676 <_strtod_r+0x386>
 808f33e:	3301      	adds	r3, #1
 808f340:	9317      	str	r3, [sp, #92]	; 0x5c
 808f342:	e7e2      	b.n	808f30a <_strtod_r+0x1a>
 808f344:	2300      	movs	r3, #0
 808f346:	930c      	str	r3, [sp, #48]	; 0x30
 808f348:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 808f34a:	782b      	ldrb	r3, [r5, #0]
 808f34c:	2b30      	cmp	r3, #48	; 0x30
 808f34e:	d15c      	bne.n	808f40a <_strtod_r+0x11a>
 808f350:	786b      	ldrb	r3, [r5, #1]
 808f352:	2b58      	cmp	r3, #88	; 0x58
 808f354:	d001      	beq.n	808f35a <_strtod_r+0x6a>
 808f356:	2b78      	cmp	r3, #120	; 0x78
 808f358:	d14c      	bne.n	808f3f4 <_strtod_r+0x104>
 808f35a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808f35c:	4aa8      	ldr	r2, [pc, #672]	; (808f600 <_strtod_r+0x310>)
 808f35e:	9301      	str	r3, [sp, #4]
 808f360:	ab18      	add	r3, sp, #96	; 0x60
 808f362:	9300      	str	r3, [sp, #0]
 808f364:	a917      	add	r1, sp, #92	; 0x5c
 808f366:	ab19      	add	r3, sp, #100	; 0x64
 808f368:	4650      	mov	r0, sl
 808f36a:	f001 f9aa 	bl	80906c2 <__gethex>
 808f36e:	f010 0607 	ands.w	r6, r0, #7
 808f372:	4604      	mov	r4, r0
 808f374:	f000 8585 	beq.w	808fe82 <_strtod_r+0xb92>
 808f378:	2e06      	cmp	r6, #6
 808f37a:	d105      	bne.n	808f388 <_strtod_r+0x98>
 808f37c:	3501      	adds	r5, #1
 808f37e:	2300      	movs	r3, #0
 808f380:	9517      	str	r5, [sp, #92]	; 0x5c
 808f382:	930c      	str	r3, [sp, #48]	; 0x30
 808f384:	f000 bd7d 	b.w	808fe82 <_strtod_r+0xb92>
 808f388:	9a18      	ldr	r2, [sp, #96]	; 0x60
 808f38a:	b13a      	cbz	r2, 808f39c <_strtod_r+0xac>
 808f38c:	2135      	movs	r1, #53	; 0x35
 808f38e:	a81a      	add	r0, sp, #104	; 0x68
 808f390:	f002 f8f9 	bl	8091586 <__copybits>
 808f394:	9918      	ldr	r1, [sp, #96]	; 0x60
 808f396:	4650      	mov	r0, sl
 808f398:	f001 fd7d 	bl	8090e96 <_Bfree>
 808f39c:	2e06      	cmp	r6, #6
 808f39e:	d822      	bhi.n	808f3e6 <_strtod_r+0xf6>
 808f3a0:	e8df f006 	tbb	[pc, r6]
 808f3a4:	18080d04 	.word	0x18080d04
 808f3a8:	0d1d      	.short	0x0d1d
 808f3aa:	04          	.byte	0x04
 808f3ab:	00          	.byte	0x00
 808f3ac:	f04f 0900 	mov.w	r9, #0
 808f3b0:	46c8      	mov	r8, r9
 808f3b2:	e018      	b.n	808f3e6 <_strtod_r+0xf6>
 808f3b4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 808f3b8:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 808f3bc:	e013      	b.n	808f3e6 <_strtod_r+0xf6>
 808f3be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808f3c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 808f3c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 808f3c6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 808f3ca:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 808f3ce:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 808f3d2:	e008      	b.n	808f3e6 <_strtod_r+0xf6>
 808f3d4:	f8df 922c 	ldr.w	r9, [pc, #556]	; 808f604 <_strtod_r+0x314>
 808f3d8:	f04f 0800 	mov.w	r8, #0
 808f3dc:	e003      	b.n	808f3e6 <_strtod_r+0xf6>
 808f3de:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 808f3e2:	f04f 38ff 	mov.w	r8, #4294967295
 808f3e6:	0721      	lsls	r1, r4, #28
 808f3e8:	f140 854b 	bpl.w	808fe82 <_strtod_r+0xb92>
 808f3ec:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 808f3f0:	f000 bd47 	b.w	808fe82 <_strtod_r+0xb92>
 808f3f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808f3f6:	1c5a      	adds	r2, r3, #1
 808f3f8:	9217      	str	r2, [sp, #92]	; 0x5c
 808f3fa:	785b      	ldrb	r3, [r3, #1]
 808f3fc:	2b30      	cmp	r3, #48	; 0x30
 808f3fe:	d0f9      	beq.n	808f3f4 <_strtod_r+0x104>
 808f400:	2b00      	cmp	r3, #0
 808f402:	f000 853e 	beq.w	808fe82 <_strtod_r+0xb92>
 808f406:	2301      	movs	r3, #1
 808f408:	e000      	b.n	808f40c <_strtod_r+0x11c>
 808f40a:	2300      	movs	r3, #0
 808f40c:	9305      	str	r3, [sp, #20]
 808f40e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808f410:	220a      	movs	r2, #10
 808f412:	9306      	str	r3, [sp, #24]
 808f414:	2300      	movs	r3, #0
 808f416:	469b      	mov	fp, r3
 808f418:	9302      	str	r3, [sp, #8]
 808f41a:	9304      	str	r3, [sp, #16]
 808f41c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 808f41e:	782e      	ldrb	r6, [r5, #0]
 808f420:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 808f424:	b2d9      	uxtb	r1, r3
 808f426:	2909      	cmp	r1, #9
 808f428:	d811      	bhi.n	808f44e <_strtod_r+0x15e>
 808f42a:	f1bb 0f08 	cmp.w	fp, #8
 808f42e:	bfd5      	itete	le
 808f430:	9904      	ldrle	r1, [sp, #16]
 808f432:	9902      	ldrgt	r1, [sp, #8]
 808f434:	fb02 3301 	mlale	r3, r2, r1, r3
 808f438:	fb02 3301 	mlagt	r3, r2, r1, r3
 808f43c:	f105 0501 	add.w	r5, r5, #1
 808f440:	bfd4      	ite	le
 808f442:	9304      	strle	r3, [sp, #16]
 808f444:	9302      	strgt	r3, [sp, #8]
 808f446:	f10b 0b01 	add.w	fp, fp, #1
 808f44a:	9517      	str	r5, [sp, #92]	; 0x5c
 808f44c:	e7e6      	b.n	808f41c <_strtod_r+0x12c>
 808f44e:	4650      	mov	r0, sl
 808f450:	f7ff f942 	bl	808e6d8 <_localeconv_r>
 808f454:	6807      	ldr	r7, [r0, #0]
 808f456:	4650      	mov	r0, sl
 808f458:	f7ff f93e 	bl	808e6d8 <_localeconv_r>
 808f45c:	6800      	ldr	r0, [r0, #0]
 808f45e:	f7ff fed9 	bl	808f214 <strlen>
 808f462:	4639      	mov	r1, r7
 808f464:	4602      	mov	r2, r0
 808f466:	4628      	mov	r0, r5
 808f468:	f7ff fedc 	bl	808f224 <strncmp>
 808f46c:	4607      	mov	r7, r0
 808f46e:	b128      	cbz	r0, 808f47c <_strtod_r+0x18c>
 808f470:	2000      	movs	r0, #0
 808f472:	4633      	mov	r3, r6
 808f474:	465d      	mov	r5, fp
 808f476:	4602      	mov	r2, r0
 808f478:	4601      	mov	r1, r0
 808f47a:	e05a      	b.n	808f532 <_strtod_r+0x242>
 808f47c:	4650      	mov	r0, sl
 808f47e:	f7ff f92b 	bl	808e6d8 <_localeconv_r>
 808f482:	6800      	ldr	r0, [r0, #0]
 808f484:	f7ff fec6 	bl	808f214 <strlen>
 808f488:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808f48a:	181a      	adds	r2, r3, r0
 808f48c:	9217      	str	r2, [sp, #92]	; 0x5c
 808f48e:	5c1b      	ldrb	r3, [r3, r0]
 808f490:	f1bb 0f00 	cmp.w	fp, #0
 808f494:	d145      	bne.n	808f522 <_strtod_r+0x232>
 808f496:	4658      	mov	r0, fp
 808f498:	2b30      	cmp	r3, #48	; 0x30
 808f49a:	d105      	bne.n	808f4a8 <_strtod_r+0x1b8>
 808f49c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808f49e:	3001      	adds	r0, #1
 808f4a0:	1c5a      	adds	r2, r3, #1
 808f4a2:	9217      	str	r2, [sp, #92]	; 0x5c
 808f4a4:	785b      	ldrb	r3, [r3, #1]
 808f4a6:	e7f7      	b.n	808f498 <_strtod_r+0x1a8>
 808f4a8:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 808f4ac:	2a08      	cmp	r2, #8
 808f4ae:	d846      	bhi.n	808f53e <_strtod_r+0x24e>
 808f4b0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 808f4b2:	9206      	str	r2, [sp, #24]
 808f4b4:	4602      	mov	r2, r0
 808f4b6:	2000      	movs	r0, #0
 808f4b8:	4605      	mov	r5, r0
 808f4ba:	3b30      	subs	r3, #48	; 0x30
 808f4bc:	f100 0101 	add.w	r1, r0, #1
 808f4c0:	d029      	beq.n	808f516 <_strtod_r+0x226>
 808f4c2:	440a      	add	r2, r1
 808f4c4:	4629      	mov	r1, r5
 808f4c6:	eb05 0c00 	add.w	ip, r5, r0
 808f4ca:	260a      	movs	r6, #10
 808f4cc:	4561      	cmp	r1, ip
 808f4ce:	d00f      	beq.n	808f4f0 <_strtod_r+0x200>
 808f4d0:	3101      	adds	r1, #1
 808f4d2:	f101 3eff 	add.w	lr, r1, #4294967295
 808f4d6:	f1be 0f08 	cmp.w	lr, #8
 808f4da:	dc03      	bgt.n	808f4e4 <_strtod_r+0x1f4>
 808f4dc:	9f04      	ldr	r7, [sp, #16]
 808f4de:	4377      	muls	r7, r6
 808f4e0:	9704      	str	r7, [sp, #16]
 808f4e2:	e7f3      	b.n	808f4cc <_strtod_r+0x1dc>
 808f4e4:	2910      	cmp	r1, #16
 808f4e6:	bfde      	ittt	le
 808f4e8:	9f02      	ldrle	r7, [sp, #8]
 808f4ea:	4377      	mulle	r7, r6
 808f4ec:	9702      	strle	r7, [sp, #8]
 808f4ee:	e7ed      	b.n	808f4cc <_strtod_r+0x1dc>
 808f4f0:	4428      	add	r0, r5
 808f4f2:	2808      	cmp	r0, #8
 808f4f4:	f100 0501 	add.w	r5, r0, #1
 808f4f8:	dc05      	bgt.n	808f506 <_strtod_r+0x216>
 808f4fa:	9804      	ldr	r0, [sp, #16]
 808f4fc:	210a      	movs	r1, #10
 808f4fe:	fb01 3300 	mla	r3, r1, r0, r3
 808f502:	9304      	str	r3, [sp, #16]
 808f504:	e006      	b.n	808f514 <_strtod_r+0x224>
 808f506:	2d10      	cmp	r5, #16
 808f508:	bfdf      	itttt	le
 808f50a:	9802      	ldrle	r0, [sp, #8]
 808f50c:	210a      	movle	r1, #10
 808f50e:	fb01 3300 	mlale	r3, r1, r0, r3
 808f512:	9302      	strle	r3, [sp, #8]
 808f514:	2100      	movs	r1, #0
 808f516:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808f518:	1c58      	adds	r0, r3, #1
 808f51a:	9017      	str	r0, [sp, #92]	; 0x5c
 808f51c:	785b      	ldrb	r3, [r3, #1]
 808f51e:	4608      	mov	r0, r1
 808f520:	e002      	b.n	808f528 <_strtod_r+0x238>
 808f522:	465d      	mov	r5, fp
 808f524:	4638      	mov	r0, r7
 808f526:	463a      	mov	r2, r7
 808f528:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 808f52c:	2909      	cmp	r1, #9
 808f52e:	d9c4      	bls.n	808f4ba <_strtod_r+0x1ca>
 808f530:	2101      	movs	r1, #1
 808f532:	2b65      	cmp	r3, #101	; 0x65
 808f534:	d001      	beq.n	808f53a <_strtod_r+0x24a>
 808f536:	2b45      	cmp	r3, #69	; 0x45
 808f538:	d14f      	bne.n	808f5da <_strtod_r+0x2ea>
 808f53a:	b96d      	cbnz	r5, 808f558 <_strtod_r+0x268>
 808f53c:	e004      	b.n	808f548 <_strtod_r+0x258>
 808f53e:	2b65      	cmp	r3, #101	; 0x65
 808f540:	f040 84ad 	bne.w	808fe9e <_strtod_r+0xbae>
 808f544:	2200      	movs	r2, #0
 808f546:	2101      	movs	r1, #1
 808f548:	b928      	cbnz	r0, 808f556 <_strtod_r+0x266>
 808f54a:	9b05      	ldr	r3, [sp, #20]
 808f54c:	2b00      	cmp	r3, #0
 808f54e:	f000 8092 	beq.w	808f676 <_strtod_r+0x386>
 808f552:	4605      	mov	r5, r0
 808f554:	e000      	b.n	808f558 <_strtod_r+0x268>
 808f556:	2500      	movs	r5, #0
 808f558:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 808f55a:	1c63      	adds	r3, r4, #1
 808f55c:	9317      	str	r3, [sp, #92]	; 0x5c
 808f55e:	7863      	ldrb	r3, [r4, #1]
 808f560:	2b2b      	cmp	r3, #43	; 0x2b
 808f562:	d006      	beq.n	808f572 <_strtod_r+0x282>
 808f564:	2b2d      	cmp	r3, #45	; 0x2d
 808f566:	d002      	beq.n	808f56e <_strtod_r+0x27e>
 808f568:	2600      	movs	r6, #0
 808f56a:	9603      	str	r6, [sp, #12]
 808f56c:	e006      	b.n	808f57c <_strtod_r+0x28c>
 808f56e:	2301      	movs	r3, #1
 808f570:	e000      	b.n	808f574 <_strtod_r+0x284>
 808f572:	2300      	movs	r3, #0
 808f574:	9303      	str	r3, [sp, #12]
 808f576:	1ca3      	adds	r3, r4, #2
 808f578:	9317      	str	r3, [sp, #92]	; 0x5c
 808f57a:	78a3      	ldrb	r3, [r4, #2]
 808f57c:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 808f580:	2e09      	cmp	r6, #9
 808f582:	d829      	bhi.n	808f5d8 <_strtod_r+0x2e8>
 808f584:	2b30      	cmp	r3, #48	; 0x30
 808f586:	d104      	bne.n	808f592 <_strtod_r+0x2a2>
 808f588:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808f58a:	1c5e      	adds	r6, r3, #1
 808f58c:	9617      	str	r6, [sp, #92]	; 0x5c
 808f58e:	785b      	ldrb	r3, [r3, #1]
 808f590:	e7f8      	b.n	808f584 <_strtod_r+0x294>
 808f592:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 808f596:	2e08      	cmp	r6, #8
 808f598:	d81f      	bhi.n	808f5da <_strtod_r+0x2ea>
 808f59a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 808f59e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808f5a0:	461f      	mov	r7, r3
 808f5a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808f5a4:	1c5e      	adds	r6, r3, #1
 808f5a6:	9617      	str	r6, [sp, #92]	; 0x5c
 808f5a8:	785b      	ldrb	r3, [r3, #1]
 808f5aa:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 808f5ae:	f1bc 0f09 	cmp.w	ip, #9
 808f5b2:	d805      	bhi.n	808f5c0 <_strtod_r+0x2d0>
 808f5b4:	260a      	movs	r6, #10
 808f5b6:	fb06 3e0e 	mla	lr, r6, lr, r3
 808f5ba:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 808f5be:	e7f0      	b.n	808f5a2 <_strtod_r+0x2b2>
 808f5c0:	1bf6      	subs	r6, r6, r7
 808f5c2:	2e08      	cmp	r6, #8
 808f5c4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 808f5c8:	dc02      	bgt.n	808f5d0 <_strtod_r+0x2e0>
 808f5ca:	4576      	cmp	r6, lr
 808f5cc:	bfa8      	it	ge
 808f5ce:	4676      	movge	r6, lr
 808f5d0:	9f03      	ldr	r7, [sp, #12]
 808f5d2:	b11f      	cbz	r7, 808f5dc <_strtod_r+0x2ec>
 808f5d4:	4276      	negs	r6, r6
 808f5d6:	e001      	b.n	808f5dc <_strtod_r+0x2ec>
 808f5d8:	9417      	str	r4, [sp, #92]	; 0x5c
 808f5da:	2600      	movs	r6, #0
 808f5dc:	2d00      	cmp	r5, #0
 808f5de:	d152      	bne.n	808f686 <_strtod_r+0x396>
 808f5e0:	2800      	cmp	r0, #0
 808f5e2:	f040 844e 	bne.w	808fe82 <_strtod_r+0xb92>
 808f5e6:	9a05      	ldr	r2, [sp, #20]
 808f5e8:	2a00      	cmp	r2, #0
 808f5ea:	f040 844a 	bne.w	808fe82 <_strtod_r+0xb92>
 808f5ee:	2900      	cmp	r1, #0
 808f5f0:	d141      	bne.n	808f676 <_strtod_r+0x386>
 808f5f2:	2b4e      	cmp	r3, #78	; 0x4e
 808f5f4:	d020      	beq.n	808f638 <_strtod_r+0x348>
 808f5f6:	dc07      	bgt.n	808f608 <_strtod_r+0x318>
 808f5f8:	2b49      	cmp	r3, #73	; 0x49
 808f5fa:	d00a      	beq.n	808f612 <_strtod_r+0x322>
 808f5fc:	e03b      	b.n	808f676 <_strtod_r+0x386>
 808f5fe:	bf00      	nop
 808f600:	08094630 	.word	0x08094630
 808f604:	7ff00000 	.word	0x7ff00000
 808f608:	2b69      	cmp	r3, #105	; 0x69
 808f60a:	d002      	beq.n	808f612 <_strtod_r+0x322>
 808f60c:	2b6e      	cmp	r3, #110	; 0x6e
 808f60e:	d013      	beq.n	808f638 <_strtod_r+0x348>
 808f610:	e031      	b.n	808f676 <_strtod_r+0x386>
 808f612:	49aa      	ldr	r1, [pc, #680]	; (808f8bc <_strtod_r+0x5cc>)
 808f614:	a817      	add	r0, sp, #92	; 0x5c
 808f616:	f001 fa85 	bl	8090b24 <__match>
 808f61a:	b360      	cbz	r0, 808f676 <_strtod_r+0x386>
 808f61c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808f61e:	49a8      	ldr	r1, [pc, #672]	; (808f8c0 <_strtod_r+0x5d0>)
 808f620:	3b01      	subs	r3, #1
 808f622:	a817      	add	r0, sp, #92	; 0x5c
 808f624:	9317      	str	r3, [sp, #92]	; 0x5c
 808f626:	f001 fa7d 	bl	8090b24 <__match>
 808f62a:	b910      	cbnz	r0, 808f632 <_strtod_r+0x342>
 808f62c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808f62e:	3301      	adds	r3, #1
 808f630:	9317      	str	r3, [sp, #92]	; 0x5c
 808f632:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 808f8dc <_strtod_r+0x5ec>
 808f636:	e01a      	b.n	808f66e <_strtod_r+0x37e>
 808f638:	49a2      	ldr	r1, [pc, #648]	; (808f8c4 <_strtod_r+0x5d4>)
 808f63a:	a817      	add	r0, sp, #92	; 0x5c
 808f63c:	f001 fa72 	bl	8090b24 <__match>
 808f640:	b1c8      	cbz	r0, 808f676 <_strtod_r+0x386>
 808f642:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808f644:	781b      	ldrb	r3, [r3, #0]
 808f646:	2b28      	cmp	r3, #40	; 0x28
 808f648:	d10f      	bne.n	808f66a <_strtod_r+0x37a>
 808f64a:	aa1a      	add	r2, sp, #104	; 0x68
 808f64c:	499e      	ldr	r1, [pc, #632]	; (808f8c8 <_strtod_r+0x5d8>)
 808f64e:	a817      	add	r0, sp, #92	; 0x5c
 808f650:	f001 fa7b 	bl	8090b4a <__hexnan>
 808f654:	2805      	cmp	r0, #5
 808f656:	d108      	bne.n	808f66a <_strtod_r+0x37a>
 808f658:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808f65a:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 808f65e:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 808f662:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 808f666:	f000 bc0c 	b.w	808fe82 <_strtod_r+0xb92>
 808f66a:	f8df 9274 	ldr.w	r9, [pc, #628]	; 808f8e0 <_strtod_r+0x5f0>
 808f66e:	f04f 0800 	mov.w	r8, #0
 808f672:	f000 bc06 	b.w	808fe82 <_strtod_r+0xb92>
 808f676:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 808f678:	9417      	str	r4, [sp, #92]	; 0x5c
 808f67a:	2b00      	cmp	r3, #0
 808f67c:	f000 840c 	beq.w	808fe98 <_strtod_r+0xba8>
 808f680:	2300      	movs	r3, #0
 808f682:	930c      	str	r3, [sp, #48]	; 0x30
 808f684:	e3ff      	b.n	808fe86 <_strtod_r+0xb96>
 808f686:	462c      	mov	r4, r5
 808f688:	f1bb 0f00 	cmp.w	fp, #0
 808f68c:	bf08      	it	eq
 808f68e:	46ab      	moveq	fp, r5
 808f690:	9804      	ldr	r0, [sp, #16]
 808f692:	2d10      	cmp	r5, #16
 808f694:	bfa8      	it	ge
 808f696:	2410      	movge	r4, #16
 808f698:	1ab7      	subs	r7, r6, r2
 808f69a:	f7fd fdff 	bl	808d29c <__aeabi_ui2d>
 808f69e:	2c09      	cmp	r4, #9
 808f6a0:	4680      	mov	r8, r0
 808f6a2:	4689      	mov	r9, r1
 808f6a4:	dd13      	ble.n	808f6ce <_strtod_r+0x3de>
 808f6a6:	4b89      	ldr	r3, [pc, #548]	; (808f8cc <_strtod_r+0x5dc>)
 808f6a8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 808f6ac:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 808f6b0:	f7fd fe6a 	bl	808d388 <__aeabi_dmul>
 808f6b4:	4680      	mov	r8, r0
 808f6b6:	9802      	ldr	r0, [sp, #8]
 808f6b8:	4689      	mov	r9, r1
 808f6ba:	f7fd fdef 	bl	808d29c <__aeabi_ui2d>
 808f6be:	4602      	mov	r2, r0
 808f6c0:	460b      	mov	r3, r1
 808f6c2:	4640      	mov	r0, r8
 808f6c4:	4649      	mov	r1, r9
 808f6c6:	f7fd fcad 	bl	808d024 <__adddf3>
 808f6ca:	4680      	mov	r8, r0
 808f6cc:	4689      	mov	r9, r1
 808f6ce:	2d0f      	cmp	r5, #15
 808f6d0:	dc33      	bgt.n	808f73a <_strtod_r+0x44a>
 808f6d2:	2f00      	cmp	r7, #0
 808f6d4:	f000 83d5 	beq.w	808fe82 <_strtod_r+0xb92>
 808f6d8:	dd22      	ble.n	808f720 <_strtod_r+0x430>
 808f6da:	2f16      	cmp	r7, #22
 808f6dc:	dc07      	bgt.n	808f6ee <_strtod_r+0x3fe>
 808f6de:	4d7b      	ldr	r5, [pc, #492]	; (808f8cc <_strtod_r+0x5dc>)
 808f6e0:	4642      	mov	r2, r8
 808f6e2:	eb05 01c7 	add.w	r1, r5, r7, lsl #3
 808f6e6:	464b      	mov	r3, r9
 808f6e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 808f6ec:	e013      	b.n	808f716 <_strtod_r+0x426>
 808f6ee:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 808f6f2:	429f      	cmp	r7, r3
 808f6f4:	dc21      	bgt.n	808f73a <_strtod_r+0x44a>
 808f6f6:	4c75      	ldr	r4, [pc, #468]	; (808f8cc <_strtod_r+0x5dc>)
 808f6f8:	f1c5 050f 	rsb	r5, r5, #15
 808f6fc:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 808f700:	1b7d      	subs	r5, r7, r5
 808f702:	4642      	mov	r2, r8
 808f704:	e9d1 0100 	ldrd	r0, r1, [r1]
 808f708:	464b      	mov	r3, r9
 808f70a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 808f70e:	f7fd fe3b 	bl	808d388 <__aeabi_dmul>
 808f712:	e9d4 2300 	ldrd	r2, r3, [r4]
 808f716:	f7fd fe37 	bl	808d388 <__aeabi_dmul>
 808f71a:	4680      	mov	r8, r0
 808f71c:	4689      	mov	r9, r1
 808f71e:	e3b0      	b.n	808fe82 <_strtod_r+0xb92>
 808f720:	f117 0f16 	cmn.w	r7, #22
 808f724:	db09      	blt.n	808f73a <_strtod_r+0x44a>
 808f726:	4d69      	ldr	r5, [pc, #420]	; (808f8cc <_strtod_r+0x5dc>)
 808f728:	4640      	mov	r0, r8
 808f72a:	eba5 03c7 	sub.w	r3, r5, r7, lsl #3
 808f72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 808f732:	4649      	mov	r1, r9
 808f734:	f7fd ff52 	bl	808d5dc <__aeabi_ddiv>
 808f738:	e7ef      	b.n	808f71a <_strtod_r+0x42a>
 808f73a:	1b2c      	subs	r4, r5, r4
 808f73c:	443c      	add	r4, r7
 808f73e:	2c00      	cmp	r4, #0
 808f740:	dd5d      	ble.n	808f7fe <_strtod_r+0x50e>
 808f742:	f014 010f 	ands.w	r1, r4, #15
 808f746:	d00a      	beq.n	808f75e <_strtod_r+0x46e>
 808f748:	4b60      	ldr	r3, [pc, #384]	; (808f8cc <_strtod_r+0x5dc>)
 808f74a:	4642      	mov	r2, r8
 808f74c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 808f750:	e9d1 0100 	ldrd	r0, r1, [r1]
 808f754:	464b      	mov	r3, r9
 808f756:	f7fd fe17 	bl	808d388 <__aeabi_dmul>
 808f75a:	4680      	mov	r8, r0
 808f75c:	4689      	mov	r9, r1
 808f75e:	f034 040f 	bics.w	r4, r4, #15
 808f762:	f000 80c1 	beq.w	808f8e8 <_strtod_r+0x5f8>
 808f766:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 808f76a:	dd0f      	ble.n	808f78c <_strtod_r+0x49c>
 808f76c:	f04f 0b00 	mov.w	fp, #0
 808f770:	f8cd b008 	str.w	fp, [sp, #8]
 808f774:	f8cd b014 	str.w	fp, [sp, #20]
 808f778:	f8cd b010 	str.w	fp, [sp, #16]
 808f77c:	2322      	movs	r3, #34	; 0x22
 808f77e:	f8ca 3000 	str.w	r3, [sl]
 808f782:	f8df 9158 	ldr.w	r9, [pc, #344]	; 808f8dc <_strtod_r+0x5ec>
 808f786:	f04f 0800 	mov.w	r8, #0
 808f78a:	e189      	b.n	808faa0 <_strtod_r+0x7b0>
 808f78c:	4640      	mov	r0, r8
 808f78e:	4649      	mov	r1, r9
 808f790:	2300      	movs	r3, #0
 808f792:	4e4f      	ldr	r6, [pc, #316]	; (808f8d0 <_strtod_r+0x5e0>)
 808f794:	1124      	asrs	r4, r4, #4
 808f796:	9302      	str	r3, [sp, #8]
 808f798:	2c01      	cmp	r4, #1
 808f79a:	dd0c      	ble.n	808f7b6 <_strtod_r+0x4c6>
 808f79c:	07e2      	lsls	r2, r4, #31
 808f79e:	d504      	bpl.n	808f7aa <_strtod_r+0x4ba>
 808f7a0:	e9d6 2300 	ldrd	r2, r3, [r6]
 808f7a4:	f7fd fdf0 	bl	808d388 <__aeabi_dmul>
 808f7a8:	2301      	movs	r3, #1
 808f7aa:	9a02      	ldr	r2, [sp, #8]
 808f7ac:	1064      	asrs	r4, r4, #1
 808f7ae:	3201      	adds	r2, #1
 808f7b0:	9202      	str	r2, [sp, #8]
 808f7b2:	3608      	adds	r6, #8
 808f7b4:	e7f0      	b.n	808f798 <_strtod_r+0x4a8>
 808f7b6:	b10b      	cbz	r3, 808f7bc <_strtod_r+0x4cc>
 808f7b8:	4680      	mov	r8, r0
 808f7ba:	4689      	mov	r9, r1
 808f7bc:	4b44      	ldr	r3, [pc, #272]	; (808f8d0 <_strtod_r+0x5e0>)
 808f7be:	9a02      	ldr	r2, [sp, #8]
 808f7c0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 808f7c4:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 808f7c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 808f7cc:	4642      	mov	r2, r8
 808f7ce:	464b      	mov	r3, r9
 808f7d0:	f7fd fdda 	bl	808d388 <__aeabi_dmul>
 808f7d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 808f7d8:	4689      	mov	r9, r1
 808f7da:	460a      	mov	r2, r1
 808f7dc:	0d1b      	lsrs	r3, r3, #20
 808f7de:	493d      	ldr	r1, [pc, #244]	; (808f8d4 <_strtod_r+0x5e4>)
 808f7e0:	051b      	lsls	r3, r3, #20
 808f7e2:	428b      	cmp	r3, r1
 808f7e4:	4680      	mov	r8, r0
 808f7e6:	d8c1      	bhi.n	808f76c <_strtod_r+0x47c>
 808f7e8:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 808f7ec:	428b      	cmp	r3, r1
 808f7ee:	bf86      	itte	hi
 808f7f0:	f8df 90f0 	ldrhi.w	r9, [pc, #240]	; 808f8e4 <_strtod_r+0x5f4>
 808f7f4:	f04f 38ff 	movhi.w	r8, #4294967295
 808f7f8:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 808f7fc:	e074      	b.n	808f8e8 <_strtod_r+0x5f8>
 808f7fe:	d073      	beq.n	808f8e8 <_strtod_r+0x5f8>
 808f800:	4264      	negs	r4, r4
 808f802:	f014 020f 	ands.w	r2, r4, #15
 808f806:	d00a      	beq.n	808f81e <_strtod_r+0x52e>
 808f808:	4b30      	ldr	r3, [pc, #192]	; (808f8cc <_strtod_r+0x5dc>)
 808f80a:	4640      	mov	r0, r8
 808f80c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 808f810:	4649      	mov	r1, r9
 808f812:	e9d3 2300 	ldrd	r2, r3, [r3]
 808f816:	f7fd fee1 	bl	808d5dc <__aeabi_ddiv>
 808f81a:	4680      	mov	r8, r0
 808f81c:	4689      	mov	r9, r1
 808f81e:	1124      	asrs	r4, r4, #4
 808f820:	d062      	beq.n	808f8e8 <_strtod_r+0x5f8>
 808f822:	2c1f      	cmp	r4, #31
 808f824:	dd08      	ble.n	808f838 <_strtod_r+0x548>
 808f826:	f04f 0b00 	mov.w	fp, #0
 808f82a:	f8cd b008 	str.w	fp, [sp, #8]
 808f82e:	f8cd b014 	str.w	fp, [sp, #20]
 808f832:	f8cd b010 	str.w	fp, [sp, #16]
 808f836:	e12c      	b.n	808fa92 <_strtod_r+0x7a2>
 808f838:	4640      	mov	r0, r8
 808f83a:	4649      	mov	r1, r9
 808f83c:	f014 0f10 	tst.w	r4, #16
 808f840:	bf0c      	ite	eq
 808f842:	2300      	moveq	r3, #0
 808f844:	236a      	movne	r3, #106	; 0x6a
 808f846:	4e24      	ldr	r6, [pc, #144]	; (808f8d8 <_strtod_r+0x5e8>)
 808f848:	9303      	str	r3, [sp, #12]
 808f84a:	2300      	movs	r3, #0
 808f84c:	2c00      	cmp	r4, #0
 808f84e:	dd09      	ble.n	808f864 <_strtod_r+0x574>
 808f850:	07e2      	lsls	r2, r4, #31
 808f852:	d504      	bpl.n	808f85e <_strtod_r+0x56e>
 808f854:	e9d6 2300 	ldrd	r2, r3, [r6]
 808f858:	f7fd fd96 	bl	808d388 <__aeabi_dmul>
 808f85c:	2301      	movs	r3, #1
 808f85e:	1064      	asrs	r4, r4, #1
 808f860:	3608      	adds	r6, #8
 808f862:	e7f3      	b.n	808f84c <_strtod_r+0x55c>
 808f864:	b10b      	cbz	r3, 808f86a <_strtod_r+0x57a>
 808f866:	4680      	mov	r8, r0
 808f868:	4689      	mov	r9, r1
 808f86a:	9b03      	ldr	r3, [sp, #12]
 808f86c:	b1eb      	cbz	r3, 808f8aa <_strtod_r+0x5ba>
 808f86e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 808f872:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808f876:	2b00      	cmp	r3, #0
 808f878:	4649      	mov	r1, r9
 808f87a:	dd16      	ble.n	808f8aa <_strtod_r+0x5ba>
 808f87c:	2b1f      	cmp	r3, #31
 808f87e:	dd0e      	ble.n	808f89e <_strtod_r+0x5ae>
 808f880:	2b34      	cmp	r3, #52	; 0x34
 808f882:	bfde      	ittt	le
 808f884:	3b20      	suble	r3, #32
 808f886:	f04f 32ff 	movle.w	r2, #4294967295
 808f88a:	fa02 f303 	lslle.w	r3, r2, r3
 808f88e:	f04f 0800 	mov.w	r8, #0
 808f892:	bfcc      	ite	gt
 808f894:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 808f898:	ea03 0901 	andle.w	r9, r3, r1
 808f89c:	e005      	b.n	808f8aa <_strtod_r+0x5ba>
 808f89e:	f04f 32ff 	mov.w	r2, #4294967295
 808f8a2:	fa02 f303 	lsl.w	r3, r2, r3
 808f8a6:	ea03 0808 	and.w	r8, r3, r8
 808f8aa:	2200      	movs	r2, #0
 808f8ac:	2300      	movs	r3, #0
 808f8ae:	4640      	mov	r0, r8
 808f8b0:	4649      	mov	r1, r9
 808f8b2:	f7fd ffd1 	bl	808d858 <__aeabi_dcmpeq>
 808f8b6:	2800      	cmp	r0, #0
 808f8b8:	d1b5      	bne.n	808f826 <_strtod_r+0x536>
 808f8ba:	e017      	b.n	808f8ec <_strtod_r+0x5fc>
 808f8bc:	0809415d 	.word	0x0809415d
 808f8c0:	08094644 	.word	0x08094644
 808f8c4:	08094691 	.word	0x08094691
 808f8c8:	0809464c 	.word	0x0809464c
 808f8cc:	080948e8 	.word	0x080948e8
 808f8d0:	080949b0 	.word	0x080949b0
 808f8d4:	7ca00000 	.word	0x7ca00000
 808f8d8:	08094660 	.word	0x08094660
 808f8dc:	7ff00000 	.word	0x7ff00000
 808f8e0:	fff80000 	.word	0xfff80000
 808f8e4:	7fefffff 	.word	0x7fefffff
 808f8e8:	2300      	movs	r3, #0
 808f8ea:	9303      	str	r3, [sp, #12]
 808f8ec:	9b04      	ldr	r3, [sp, #16]
 808f8ee:	465a      	mov	r2, fp
 808f8f0:	9300      	str	r3, [sp, #0]
 808f8f2:	9906      	ldr	r1, [sp, #24]
 808f8f4:	462b      	mov	r3, r5
 808f8f6:	4650      	mov	r0, sl
 808f8f8:	f001 fb1f 	bl	8090f3a <__s2b>
 808f8fc:	9005      	str	r0, [sp, #20]
 808f8fe:	2800      	cmp	r0, #0
 808f900:	f43f af34 	beq.w	808f76c <_strtod_r+0x47c>
 808f904:	2f00      	cmp	r7, #0
 808f906:	f1c7 0300 	rsb	r3, r7, #0
 808f90a:	bfa8      	it	ge
 808f90c:	2300      	movge	r3, #0
 808f90e:	930d      	str	r3, [sp, #52]	; 0x34
 808f910:	f04f 0b00 	mov.w	fp, #0
 808f914:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 808f918:	9312      	str	r3, [sp, #72]	; 0x48
 808f91a:	f8cd b008 	str.w	fp, [sp, #8]
 808f91e:	9b05      	ldr	r3, [sp, #20]
 808f920:	4650      	mov	r0, sl
 808f922:	6859      	ldr	r1, [r3, #4]
 808f924:	f001 fa82 	bl	8090e2c <_Balloc>
 808f928:	9004      	str	r0, [sp, #16]
 808f92a:	2800      	cmp	r0, #0
 808f92c:	f43f af26 	beq.w	808f77c <_strtod_r+0x48c>
 808f930:	9b05      	ldr	r3, [sp, #20]
 808f932:	300c      	adds	r0, #12
 808f934:	691a      	ldr	r2, [r3, #16]
 808f936:	f103 010c 	add.w	r1, r3, #12
 808f93a:	3202      	adds	r2, #2
 808f93c:	0092      	lsls	r2, r2, #2
 808f93e:	f7fe fede 	bl	808e6fe <memcpy>
 808f942:	ab1a      	add	r3, sp, #104	; 0x68
 808f944:	9301      	str	r3, [sp, #4]
 808f946:	ab19      	add	r3, sp, #100	; 0x64
 808f948:	9300      	str	r3, [sp, #0]
 808f94a:	4642      	mov	r2, r8
 808f94c:	464b      	mov	r3, r9
 808f94e:	4650      	mov	r0, sl
 808f950:	e9cd 8908 	strd	r8, r9, [sp, #32]
 808f954:	f001 fda1 	bl	809149a <__d2b>
 808f958:	9018      	str	r0, [sp, #96]	; 0x60
 808f95a:	2800      	cmp	r0, #0
 808f95c:	f43f af0e 	beq.w	808f77c <_strtod_r+0x48c>
 808f960:	2101      	movs	r1, #1
 808f962:	4650      	mov	r0, sl
 808f964:	f001 fb74 	bl	8091050 <__i2b>
 808f968:	9002      	str	r0, [sp, #8]
 808f96a:	2800      	cmp	r0, #0
 808f96c:	f43f af06 	beq.w	808f77c <_strtod_r+0x48c>
 808f970:	9b19      	ldr	r3, [sp, #100]	; 0x64
 808f972:	9903      	ldr	r1, [sp, #12]
 808f974:	2b00      	cmp	r3, #0
 808f976:	bfac      	ite	ge
 808f978:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
 808f97a:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 808f97c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 808f97e:	bfac      	ite	ge
 808f980:	18d6      	addge	r6, r2, r3
 808f982:	1ad2      	sublt	r2, r2, r3
 808f984:	eba3 0301 	sub.w	r3, r3, r1
 808f988:	4423      	add	r3, r4
 808f98a:	49b1      	ldr	r1, [pc, #708]	; (808fc50 <_strtod_r+0x960>)
 808f98c:	f103 33ff 	add.w	r3, r3, #4294967295
 808f990:	bfac      	ite	ge
 808f992:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 808f994:	9e0d      	ldrlt	r6, [sp, #52]	; 0x34
 808f996:	428b      	cmp	r3, r1
 808f998:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
 808f99c:	f280 8085 	bge.w	808faaa <_strtod_r+0x7ba>
 808f9a0:	1ac9      	subs	r1, r1, r3
 808f9a2:	291f      	cmp	r1, #31
 808f9a4:	bfc8      	it	gt
 808f9a6:	4dab      	ldrgt	r5, [pc, #684]	; (808fc54 <_strtod_r+0x964>)
 808f9a8:	f04f 0701 	mov.w	r7, #1
 808f9ac:	bfd4      	ite	le
 808f9ae:	fa07 f301 	lslle.w	r3, r7, r1
 808f9b2:	1aed      	subgt	r5, r5, r3
 808f9b4:	eba4 0401 	sub.w	r4, r4, r1
 808f9b8:	bfd9      	ittee	le
 808f9ba:	9307      	strle	r3, [sp, #28]
 808f9bc:	2500      	movle	r5, #0
 808f9be:	fa07 f505 	lslgt.w	r5, r7, r5
 808f9c2:	9707      	strgt	r7, [sp, #28]
 808f9c4:	1937      	adds	r7, r6, r4
 808f9c6:	9b03      	ldr	r3, [sp, #12]
 808f9c8:	42be      	cmp	r6, r7
 808f9ca:	4414      	add	r4, r2
 808f9cc:	441c      	add	r4, r3
 808f9ce:	4633      	mov	r3, r6
 808f9d0:	bfa8      	it	ge
 808f9d2:	463b      	movge	r3, r7
 808f9d4:	42a3      	cmp	r3, r4
 808f9d6:	bfa8      	it	ge
 808f9d8:	4623      	movge	r3, r4
 808f9da:	2b00      	cmp	r3, #0
 808f9dc:	bfc2      	ittt	gt
 808f9de:	1aff      	subgt	r7, r7, r3
 808f9e0:	1ae4      	subgt	r4, r4, r3
 808f9e2:	1af6      	subgt	r6, r6, r3
 808f9e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808f9e6:	2b00      	cmp	r3, #0
 808f9e8:	d163      	bne.n	808fab2 <_strtod_r+0x7c2>
 808f9ea:	2f00      	cmp	r7, #0
 808f9ec:	dc7a      	bgt.n	808fae4 <_strtod_r+0x7f4>
 808f9ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 808f9f0:	2b00      	cmp	r3, #0
 808f9f2:	f040 8081 	bne.w	808faf8 <_strtod_r+0x808>
 808f9f6:	2c00      	cmp	r4, #0
 808f9f8:	f300 8088 	bgt.w	808fb0c <_strtod_r+0x81c>
 808f9fc:	2e00      	cmp	r6, #0
 808f9fe:	f300 808f 	bgt.w	808fb20 <_strtod_r+0x830>
 808fa02:	9a04      	ldr	r2, [sp, #16]
 808fa04:	9918      	ldr	r1, [sp, #96]	; 0x60
 808fa06:	4650      	mov	r0, sl
 808fa08:	f001 fc77 	bl	80912fa <__mdiff>
 808fa0c:	4683      	mov	fp, r0
 808fa0e:	2800      	cmp	r0, #0
 808fa10:	f43f aeb4 	beq.w	808f77c <_strtod_r+0x48c>
 808fa14:	68c3      	ldr	r3, [r0, #12]
 808fa16:	2400      	movs	r4, #0
 808fa18:	60c4      	str	r4, [r0, #12]
 808fa1a:	9902      	ldr	r1, [sp, #8]
 808fa1c:	9306      	str	r3, [sp, #24]
 808fa1e:	f001 fc50 	bl	80912c2 <__mcmp>
 808fa22:	42a0      	cmp	r0, r4
 808fa24:	f280 808b 	bge.w	808fb3e <_strtod_r+0x84e>
 808fa28:	9b06      	ldr	r3, [sp, #24]
 808fa2a:	2b00      	cmp	r3, #0
 808fa2c:	f040 8202 	bne.w	808fe34 <_strtod_r+0xb44>
 808fa30:	f1b8 0f00 	cmp.w	r8, #0
 808fa34:	f040 81fe 	bne.w	808fe34 <_strtod_r+0xb44>
 808fa38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808fa3c:	2b00      	cmp	r3, #0
 808fa3e:	f040 81f9 	bne.w	808fe34 <_strtod_r+0xb44>
 808fa42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808fa46:	0d1b      	lsrs	r3, r3, #20
 808fa48:	051b      	lsls	r3, r3, #20
 808fa4a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 808fa4e:	f240 81f1 	bls.w	808fe34 <_strtod_r+0xb44>
 808fa52:	f8db 3014 	ldr.w	r3, [fp, #20]
 808fa56:	2b00      	cmp	r3, #0
 808fa58:	d06c      	beq.n	808fb34 <_strtod_r+0x844>
 808fa5a:	4659      	mov	r1, fp
 808fa5c:	2201      	movs	r2, #1
 808fa5e:	4650      	mov	r0, sl
 808fa60:	f001 fbde 	bl	8091220 <__lshift>
 808fa64:	9902      	ldr	r1, [sp, #8]
 808fa66:	4683      	mov	fp, r0
 808fa68:	f001 fc2b 	bl	80912c2 <__mcmp>
 808fa6c:	2800      	cmp	r0, #0
 808fa6e:	f340 81e1 	ble.w	808fe34 <_strtod_r+0xb44>
 808fa72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808fa76:	9a03      	ldr	r2, [sp, #12]
 808fa78:	0d1b      	lsrs	r3, r3, #20
 808fa7a:	051b      	lsls	r3, r3, #20
 808fa7c:	2a00      	cmp	r2, #0
 808fa7e:	f000 808d 	beq.w	808fb9c <_strtod_r+0x8ac>
 808fa82:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 808fa86:	f300 8089 	bgt.w	808fb9c <_strtod_r+0x8ac>
 808fa8a:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 808fa8e:	f300 81d3 	bgt.w	808fe38 <_strtod_r+0xb48>
 808fa92:	2322      	movs	r3, #34	; 0x22
 808fa94:	f04f 0800 	mov.w	r8, #0
 808fa98:	f04f 0900 	mov.w	r9, #0
 808fa9c:	f8ca 3000 	str.w	r3, [sl]
 808faa0:	9b05      	ldr	r3, [sp, #20]
 808faa2:	2b00      	cmp	r3, #0
 808faa4:	f040 81d9 	bne.w	808fe5a <_strtod_r+0xb6a>
 808faa8:	e1eb      	b.n	808fe82 <_strtod_r+0xb92>
 808faaa:	2301      	movs	r3, #1
 808faac:	2500      	movs	r5, #0
 808faae:	9307      	str	r3, [sp, #28]
 808fab0:	e788      	b.n	808f9c4 <_strtod_r+0x6d4>
 808fab2:	461a      	mov	r2, r3
 808fab4:	9902      	ldr	r1, [sp, #8]
 808fab6:	4650      	mov	r0, sl
 808fab8:	f001 fb64 	bl	8091184 <__pow5mult>
 808fabc:	9002      	str	r0, [sp, #8]
 808fabe:	2800      	cmp	r0, #0
 808fac0:	f43f ae5c 	beq.w	808f77c <_strtod_r+0x48c>
 808fac4:	4601      	mov	r1, r0
 808fac6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 808fac8:	4650      	mov	r0, sl
 808faca:	f001 faca 	bl	8091062 <__multiply>
 808face:	9006      	str	r0, [sp, #24]
 808fad0:	2800      	cmp	r0, #0
 808fad2:	f43f ae53 	beq.w	808f77c <_strtod_r+0x48c>
 808fad6:	9918      	ldr	r1, [sp, #96]	; 0x60
 808fad8:	4650      	mov	r0, sl
 808fada:	f001 f9dc 	bl	8090e96 <_Bfree>
 808fade:	9b06      	ldr	r3, [sp, #24]
 808fae0:	9318      	str	r3, [sp, #96]	; 0x60
 808fae2:	e782      	b.n	808f9ea <_strtod_r+0x6fa>
 808fae4:	463a      	mov	r2, r7
 808fae6:	9918      	ldr	r1, [sp, #96]	; 0x60
 808fae8:	4650      	mov	r0, sl
 808faea:	f001 fb99 	bl	8091220 <__lshift>
 808faee:	9018      	str	r0, [sp, #96]	; 0x60
 808faf0:	2800      	cmp	r0, #0
 808faf2:	f47f af7c 	bne.w	808f9ee <_strtod_r+0x6fe>
 808faf6:	e641      	b.n	808f77c <_strtod_r+0x48c>
 808faf8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 808fafa:	9904      	ldr	r1, [sp, #16]
 808fafc:	4650      	mov	r0, sl
 808fafe:	f001 fb41 	bl	8091184 <__pow5mult>
 808fb02:	9004      	str	r0, [sp, #16]
 808fb04:	2800      	cmp	r0, #0
 808fb06:	f47f af76 	bne.w	808f9f6 <_strtod_r+0x706>
 808fb0a:	e637      	b.n	808f77c <_strtod_r+0x48c>
 808fb0c:	4622      	mov	r2, r4
 808fb0e:	9904      	ldr	r1, [sp, #16]
 808fb10:	4650      	mov	r0, sl
 808fb12:	f001 fb85 	bl	8091220 <__lshift>
 808fb16:	9004      	str	r0, [sp, #16]
 808fb18:	2800      	cmp	r0, #0
 808fb1a:	f47f af6f 	bne.w	808f9fc <_strtod_r+0x70c>
 808fb1e:	e62d      	b.n	808f77c <_strtod_r+0x48c>
 808fb20:	4632      	mov	r2, r6
 808fb22:	9902      	ldr	r1, [sp, #8]
 808fb24:	4650      	mov	r0, sl
 808fb26:	f001 fb7b 	bl	8091220 <__lshift>
 808fb2a:	9002      	str	r0, [sp, #8]
 808fb2c:	2800      	cmp	r0, #0
 808fb2e:	f47f af68 	bne.w	808fa02 <_strtod_r+0x712>
 808fb32:	e623      	b.n	808f77c <_strtod_r+0x48c>
 808fb34:	f8db 3010 	ldr.w	r3, [fp, #16]
 808fb38:	2b01      	cmp	r3, #1
 808fb3a:	dc8e      	bgt.n	808fa5a <_strtod_r+0x76a>
 808fb3c:	e17a      	b.n	808fe34 <_strtod_r+0xb44>
 808fb3e:	d161      	bne.n	808fc04 <_strtod_r+0x914>
 808fb40:	9a06      	ldr	r2, [sp, #24]
 808fb42:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808fb46:	b322      	cbz	r2, 808fb92 <_strtod_r+0x8a2>
 808fb48:	4943      	ldr	r1, [pc, #268]	; (808fc58 <_strtod_r+0x968>)
 808fb4a:	464a      	mov	r2, r9
 808fb4c:	428b      	cmp	r3, r1
 808fb4e:	d12e      	bne.n	808fbae <_strtod_r+0x8be>
 808fb50:	9b03      	ldr	r3, [sp, #12]
 808fb52:	4641      	mov	r1, r8
 808fb54:	b163      	cbz	r3, 808fb70 <_strtod_r+0x880>
 808fb56:	4b41      	ldr	r3, [pc, #260]	; (808fc5c <_strtod_r+0x96c>)
 808fb58:	4013      	ands	r3, r2
 808fb5a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 808fb5e:	d807      	bhi.n	808fb70 <_strtod_r+0x880>
 808fb60:	0d1b      	lsrs	r3, r3, #20
 808fb62:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808fb66:	f04f 30ff 	mov.w	r0, #4294967295
 808fb6a:	fa00 f303 	lsl.w	r3, r0, r3
 808fb6e:	e001      	b.n	808fb74 <_strtod_r+0x884>
 808fb70:	f04f 33ff 	mov.w	r3, #4294967295
 808fb74:	428b      	cmp	r3, r1
 808fb76:	d11a      	bne.n	808fbae <_strtod_r+0x8be>
 808fb78:	4939      	ldr	r1, [pc, #228]	; (808fc60 <_strtod_r+0x970>)
 808fb7a:	428a      	cmp	r2, r1
 808fb7c:	d102      	bne.n	808fb84 <_strtod_r+0x894>
 808fb7e:	3301      	adds	r3, #1
 808fb80:	f43f adfc 	beq.w	808f77c <_strtod_r+0x48c>
 808fb84:	4b35      	ldr	r3, [pc, #212]	; (808fc5c <_strtod_r+0x96c>)
 808fb86:	f04f 0800 	mov.w	r8, #0
 808fb8a:	4013      	ands	r3, r2
 808fb8c:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 808fb90:	e150      	b.n	808fe34 <_strtod_r+0xb44>
 808fb92:	b963      	cbnz	r3, 808fbae <_strtod_r+0x8be>
 808fb94:	f1b8 0f00 	cmp.w	r8, #0
 808fb98:	d109      	bne.n	808fbae <_strtod_r+0x8be>
 808fb9a:	e76a      	b.n	808fa72 <_strtod_r+0x782>
 808fb9c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 808fba0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 808fba4:	f04f 38ff 	mov.w	r8, #4294967295
 808fba8:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 808fbac:	e142      	b.n	808fe34 <_strtod_r+0xb44>
 808fbae:	b115      	cbz	r5, 808fbb6 <_strtod_r+0x8c6>
 808fbb0:	ea15 0f09 	tst.w	r5, r9
 808fbb4:	e002      	b.n	808fbbc <_strtod_r+0x8cc>
 808fbb6:	9b07      	ldr	r3, [sp, #28]
 808fbb8:	ea13 0f08 	tst.w	r3, r8
 808fbbc:	f000 813a 	beq.w	808fe34 <_strtod_r+0xb44>
 808fbc0:	9b06      	ldr	r3, [sp, #24]
 808fbc2:	9a03      	ldr	r2, [sp, #12]
 808fbc4:	4640      	mov	r0, r8
 808fbc6:	4649      	mov	r1, r9
 808fbc8:	b153      	cbz	r3, 808fbe0 <_strtod_r+0x8f0>
 808fbca:	f7ff fb6d 	bl	808f2a8 <sulp>
 808fbce:	4602      	mov	r2, r0
 808fbd0:	460b      	mov	r3, r1
 808fbd2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808fbd6:	f7fd fa25 	bl	808d024 <__adddf3>
 808fbda:	4680      	mov	r8, r0
 808fbdc:	4689      	mov	r9, r1
 808fbde:	e129      	b.n	808fe34 <_strtod_r+0xb44>
 808fbe0:	f7ff fb62 	bl	808f2a8 <sulp>
 808fbe4:	4602      	mov	r2, r0
 808fbe6:	460b      	mov	r3, r1
 808fbe8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808fbec:	f7fd fa18 	bl	808d020 <__aeabi_dsub>
 808fbf0:	2200      	movs	r2, #0
 808fbf2:	2300      	movs	r3, #0
 808fbf4:	4680      	mov	r8, r0
 808fbf6:	4689      	mov	r9, r1
 808fbf8:	f7fd fe2e 	bl	808d858 <__aeabi_dcmpeq>
 808fbfc:	2800      	cmp	r0, #0
 808fbfe:	f47f af48 	bne.w	808fa92 <_strtod_r+0x7a2>
 808fc02:	e117      	b.n	808fe34 <_strtod_r+0xb44>
 808fc04:	9902      	ldr	r1, [sp, #8]
 808fc06:	4658      	mov	r0, fp
 808fc08:	f001 fc95 	bl	8091536 <__ratio>
 808fc0c:	2200      	movs	r2, #0
 808fc0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 808fc12:	4606      	mov	r6, r0
 808fc14:	460f      	mov	r7, r1
 808fc16:	f7fd fe33 	bl	808d880 <__aeabi_dcmple>
 808fc1a:	2800      	cmp	r0, #0
 808fc1c:	d03f      	beq.n	808fc9e <_strtod_r+0x9ae>
 808fc1e:	9b06      	ldr	r3, [sp, #24]
 808fc20:	b113      	cbz	r3, 808fc28 <_strtod_r+0x938>
 808fc22:	2600      	movs	r6, #0
 808fc24:	4f0f      	ldr	r7, [pc, #60]	; (808fc64 <_strtod_r+0x974>)
 808fc26:	e010      	b.n	808fc4a <_strtod_r+0x95a>
 808fc28:	f1b8 0f00 	cmp.w	r8, #0
 808fc2c:	d103      	bne.n	808fc36 <_strtod_r+0x946>
 808fc2e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808fc32:	b93b      	cbnz	r3, 808fc44 <_strtod_r+0x954>
 808fc34:	e01a      	b.n	808fc6c <_strtod_r+0x97c>
 808fc36:	f1b8 0f01 	cmp.w	r8, #1
 808fc3a:	d103      	bne.n	808fc44 <_strtod_r+0x954>
 808fc3c:	f1b9 0f00 	cmp.w	r9, #0
 808fc40:	f43f af27 	beq.w	808fa92 <_strtod_r+0x7a2>
 808fc44:	4f08      	ldr	r7, [pc, #32]	; (808fc68 <_strtod_r+0x978>)
 808fc46:	2600      	movs	r6, #0
 808fc48:	2400      	movs	r4, #0
 808fc4a:	4d06      	ldr	r5, [pc, #24]	; (808fc64 <_strtod_r+0x974>)
 808fc4c:	e03c      	b.n	808fcc8 <_strtod_r+0x9d8>
 808fc4e:	bf00      	nop
 808fc50:	fffffc02 	.word	0xfffffc02
 808fc54:	fffffbe2 	.word	0xfffffbe2
 808fc58:	000fffff 	.word	0x000fffff
 808fc5c:	7ff00000 	.word	0x7ff00000
 808fc60:	7fefffff 	.word	0x7fefffff
 808fc64:	3ff00000 	.word	0x3ff00000
 808fc68:	bff00000 	.word	0xbff00000
 808fc6c:	2200      	movs	r2, #0
 808fc6e:	4b9a      	ldr	r3, [pc, #616]	; (808fed8 <_strtod_r+0xbe8>)
 808fc70:	4630      	mov	r0, r6
 808fc72:	4639      	mov	r1, r7
 808fc74:	f7fd fdfa 	bl	808d86c <__aeabi_dcmplt>
 808fc78:	b940      	cbnz	r0, 808fc8c <_strtod_r+0x99c>
 808fc7a:	2200      	movs	r2, #0
 808fc7c:	4b97      	ldr	r3, [pc, #604]	; (808fedc <_strtod_r+0xbec>)
 808fc7e:	4630      	mov	r0, r6
 808fc80:	4639      	mov	r1, r7
 808fc82:	f7fd fb81 	bl	808d388 <__aeabi_dmul>
 808fc86:	4604      	mov	r4, r0
 808fc88:	460d      	mov	r5, r1
 808fc8a:	e001      	b.n	808fc90 <_strtod_r+0x9a0>
 808fc8c:	9c06      	ldr	r4, [sp, #24]
 808fc8e:	4d93      	ldr	r5, [pc, #588]	; (808fedc <_strtod_r+0xbec>)
 808fc90:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 808fc94:	9414      	str	r4, [sp, #80]	; 0x50
 808fc96:	9315      	str	r3, [sp, #84]	; 0x54
 808fc98:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 808fc9c:	e014      	b.n	808fcc8 <_strtod_r+0x9d8>
 808fc9e:	4b8f      	ldr	r3, [pc, #572]	; (808fedc <_strtod_r+0xbec>)
 808fca0:	2200      	movs	r2, #0
 808fca2:	4630      	mov	r0, r6
 808fca4:	4639      	mov	r1, r7
 808fca6:	f7fd fb6f 	bl	808d388 <__aeabi_dmul>
 808fcaa:	9b06      	ldr	r3, [sp, #24]
 808fcac:	4604      	mov	r4, r0
 808fcae:	460d      	mov	r5, r1
 808fcb0:	b923      	cbnz	r3, 808fcbc <_strtod_r+0x9cc>
 808fcb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 808fcb6:	900e      	str	r0, [sp, #56]	; 0x38
 808fcb8:	930f      	str	r3, [sp, #60]	; 0x3c
 808fcba:	e003      	b.n	808fcc4 <_strtod_r+0x9d4>
 808fcbc:	4602      	mov	r2, r0
 808fcbe:	460b      	mov	r3, r1
 808fcc0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 808fcc4:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 808fcc8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808fccc:	0d1b      	lsrs	r3, r3, #20
 808fcce:	051b      	lsls	r3, r3, #20
 808fcd0:	9307      	str	r3, [sp, #28]
 808fcd2:	9a07      	ldr	r2, [sp, #28]
 808fcd4:	4b82      	ldr	r3, [pc, #520]	; (808fee0 <_strtod_r+0xbf0>)
 808fcd6:	429a      	cmp	r2, r3
 808fcd8:	d12b      	bne.n	808fd32 <_strtod_r+0xa42>
 808fcda:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 808fcde:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 808fce2:	4640      	mov	r0, r8
 808fce4:	4649      	mov	r1, r9
 808fce6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 808fcea:	f001 fb65 	bl	80913b8 <__ulp>
 808fcee:	4602      	mov	r2, r0
 808fcf0:	460b      	mov	r3, r1
 808fcf2:	4630      	mov	r0, r6
 808fcf4:	4639      	mov	r1, r7
 808fcf6:	f7fd fb47 	bl	808d388 <__aeabi_dmul>
 808fcfa:	4642      	mov	r2, r8
 808fcfc:	464b      	mov	r3, r9
 808fcfe:	f7fd f991 	bl	808d024 <__adddf3>
 808fd02:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 808fd06:	0d1b      	lsrs	r3, r3, #20
 808fd08:	4a76      	ldr	r2, [pc, #472]	; (808fee4 <_strtod_r+0xbf4>)
 808fd0a:	051b      	lsls	r3, r3, #20
 808fd0c:	4293      	cmp	r3, r2
 808fd0e:	4680      	mov	r8, r0
 808fd10:	d90c      	bls.n	808fd2c <_strtod_r+0xa3c>
 808fd12:	4b75      	ldr	r3, [pc, #468]	; (808fee8 <_strtod_r+0xbf8>)
 808fd14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 808fd16:	429a      	cmp	r2, r3
 808fd18:	d103      	bne.n	808fd22 <_strtod_r+0xa32>
 808fd1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808fd1c:	3301      	adds	r3, #1
 808fd1e:	f43f ad2d 	beq.w	808f77c <_strtod_r+0x48c>
 808fd22:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 808fee8 <_strtod_r+0xbf8>
 808fd26:	f04f 38ff 	mov.w	r8, #4294967295
 808fd2a:	e072      	b.n	808fe12 <_strtod_r+0xb22>
 808fd2c:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 808fd30:	e039      	b.n	808fda6 <_strtod_r+0xab6>
 808fd32:	9b03      	ldr	r3, [sp, #12]
 808fd34:	b33b      	cbz	r3, 808fd86 <_strtod_r+0xa96>
 808fd36:	9b07      	ldr	r3, [sp, #28]
 808fd38:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 808fd3c:	d823      	bhi.n	808fd86 <_strtod_r+0xa96>
 808fd3e:	a35e      	add	r3, pc, #376	; (adr r3, 808feb8 <_strtod_r+0xbc8>)
 808fd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 808fd44:	4620      	mov	r0, r4
 808fd46:	4629      	mov	r1, r5
 808fd48:	f7fd fd9a 	bl	808d880 <__aeabi_dcmple>
 808fd4c:	b1b8      	cbz	r0, 808fd7e <_strtod_r+0xa8e>
 808fd4e:	4629      	mov	r1, r5
 808fd50:	4620      	mov	r0, r4
 808fd52:	f7fd fdf1 	bl	808d938 <__aeabi_d2uiz>
 808fd56:	2800      	cmp	r0, #0
 808fd58:	bf08      	it	eq
 808fd5a:	2001      	moveq	r0, #1
 808fd5c:	f7fd fa9e 	bl	808d29c <__aeabi_ui2d>
 808fd60:	9b06      	ldr	r3, [sp, #24]
 808fd62:	4604      	mov	r4, r0
 808fd64:	460d      	mov	r5, r1
 808fd66:	b923      	cbnz	r3, 808fd72 <_strtod_r+0xa82>
 808fd68:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 808fd6c:	9010      	str	r0, [sp, #64]	; 0x40
 808fd6e:	9311      	str	r3, [sp, #68]	; 0x44
 808fd70:	e003      	b.n	808fd7a <_strtod_r+0xa8a>
 808fd72:	4602      	mov	r2, r0
 808fd74:	460b      	mov	r3, r1
 808fd76:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 808fd7a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 808fd7e:	9a07      	ldr	r2, [sp, #28]
 808fd80:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 808fd84:	1a9f      	subs	r7, r3, r2
 808fd86:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808fd8a:	f001 fb15 	bl	80913b8 <__ulp>
 808fd8e:	4602      	mov	r2, r0
 808fd90:	460b      	mov	r3, r1
 808fd92:	4630      	mov	r0, r6
 808fd94:	4639      	mov	r1, r7
 808fd96:	f7fd faf7 	bl	808d388 <__aeabi_dmul>
 808fd9a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 808fd9e:	f7fd f941 	bl	808d024 <__adddf3>
 808fda2:	4680      	mov	r8, r0
 808fda4:	4689      	mov	r9, r1
 808fda6:	9b03      	ldr	r3, [sp, #12]
 808fda8:	bb9b      	cbnz	r3, 808fe12 <_strtod_r+0xb22>
 808fdaa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808fdae:	0d1b      	lsrs	r3, r3, #20
 808fdb0:	9a07      	ldr	r2, [sp, #28]
 808fdb2:	051b      	lsls	r3, r3, #20
 808fdb4:	429a      	cmp	r2, r3
 808fdb6:	464e      	mov	r6, r9
 808fdb8:	d12b      	bne.n	808fe12 <_strtod_r+0xb22>
 808fdba:	4629      	mov	r1, r5
 808fdbc:	4620      	mov	r0, r4
 808fdbe:	f7fd fd93 	bl	808d8e8 <__aeabi_d2iz>
 808fdc2:	f7fd fa7b 	bl	808d2bc <__aeabi_i2d>
 808fdc6:	460b      	mov	r3, r1
 808fdc8:	4602      	mov	r2, r0
 808fdca:	4629      	mov	r1, r5
 808fdcc:	4620      	mov	r0, r4
 808fdce:	f7fd f927 	bl	808d020 <__aeabi_dsub>
 808fdd2:	9b06      	ldr	r3, [sp, #24]
 808fdd4:	4604      	mov	r4, r0
 808fdd6:	460d      	mov	r5, r1
 808fdd8:	b92b      	cbnz	r3, 808fde6 <_strtod_r+0xaf6>
 808fdda:	f1b8 0f00 	cmp.w	r8, #0
 808fdde:	d102      	bne.n	808fde6 <_strtod_r+0xaf6>
 808fde0:	f3c9 0613 	ubfx	r6, r9, #0, #20
 808fde4:	b17e      	cbz	r6, 808fe06 <_strtod_r+0xb16>
 808fde6:	a336      	add	r3, pc, #216	; (adr r3, 808fec0 <_strtod_r+0xbd0>)
 808fde8:	e9d3 2300 	ldrd	r2, r3, [r3]
 808fdec:	4620      	mov	r0, r4
 808fdee:	4629      	mov	r1, r5
 808fdf0:	f7fd fd3c 	bl	808d86c <__aeabi_dcmplt>
 808fdf4:	bb88      	cbnz	r0, 808fe5a <_strtod_r+0xb6a>
 808fdf6:	a334      	add	r3, pc, #208	; (adr r3, 808fec8 <_strtod_r+0xbd8>)
 808fdf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 808fdfc:	4620      	mov	r0, r4
 808fdfe:	4629      	mov	r1, r5
 808fe00:	f7fd fd52 	bl	808d8a8 <__aeabi_dcmpgt>
 808fe04:	e004      	b.n	808fe10 <_strtod_r+0xb20>
 808fe06:	a332      	add	r3, pc, #200	; (adr r3, 808fed0 <_strtod_r+0xbe0>)
 808fe08:	e9d3 2300 	ldrd	r2, r3, [r3]
 808fe0c:	f7fd fd2e 	bl	808d86c <__aeabi_dcmplt>
 808fe10:	bb18      	cbnz	r0, 808fe5a <_strtod_r+0xb6a>
 808fe12:	9918      	ldr	r1, [sp, #96]	; 0x60
 808fe14:	4650      	mov	r0, sl
 808fe16:	f001 f83e 	bl	8090e96 <_Bfree>
 808fe1a:	9904      	ldr	r1, [sp, #16]
 808fe1c:	4650      	mov	r0, sl
 808fe1e:	f001 f83a 	bl	8090e96 <_Bfree>
 808fe22:	9902      	ldr	r1, [sp, #8]
 808fe24:	4650      	mov	r0, sl
 808fe26:	f001 f836 	bl	8090e96 <_Bfree>
 808fe2a:	4659      	mov	r1, fp
 808fe2c:	4650      	mov	r0, sl
 808fe2e:	f001 f832 	bl	8090e96 <_Bfree>
 808fe32:	e574      	b.n	808f91e <_strtod_r+0x62e>
 808fe34:	9b03      	ldr	r3, [sp, #12]
 808fe36:	b183      	cbz	r3, 808fe5a <_strtod_r+0xb6a>
 808fe38:	4b2c      	ldr	r3, [pc, #176]	; (808feec <_strtod_r+0xbfc>)
 808fe3a:	4640      	mov	r0, r8
 808fe3c:	930b      	str	r3, [sp, #44]	; 0x2c
 808fe3e:	2300      	movs	r3, #0
 808fe40:	930a      	str	r3, [sp, #40]	; 0x28
 808fe42:	4649      	mov	r1, r9
 808fe44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 808fe48:	f7fd fa9e 	bl	808d388 <__aeabi_dmul>
 808fe4c:	4680      	mov	r8, r0
 808fe4e:	4689      	mov	r9, r1
 808fe50:	b919      	cbnz	r1, 808fe5a <_strtod_r+0xb6a>
 808fe52:	b910      	cbnz	r0, 808fe5a <_strtod_r+0xb6a>
 808fe54:	2322      	movs	r3, #34	; 0x22
 808fe56:	f8ca 3000 	str.w	r3, [sl]
 808fe5a:	9918      	ldr	r1, [sp, #96]	; 0x60
 808fe5c:	4650      	mov	r0, sl
 808fe5e:	f001 f81a 	bl	8090e96 <_Bfree>
 808fe62:	9904      	ldr	r1, [sp, #16]
 808fe64:	4650      	mov	r0, sl
 808fe66:	f001 f816 	bl	8090e96 <_Bfree>
 808fe6a:	9902      	ldr	r1, [sp, #8]
 808fe6c:	4650      	mov	r0, sl
 808fe6e:	f001 f812 	bl	8090e96 <_Bfree>
 808fe72:	9905      	ldr	r1, [sp, #20]
 808fe74:	4650      	mov	r0, sl
 808fe76:	f001 f80e 	bl	8090e96 <_Bfree>
 808fe7a:	4659      	mov	r1, fp
 808fe7c:	4650      	mov	r0, sl
 808fe7e:	f001 f80a 	bl	8090e96 <_Bfree>
 808fe82:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 808fe84:	b113      	cbz	r3, 808fe8c <_strtod_r+0xb9c>
 808fe86:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808fe88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 808fe8a:	6013      	str	r3, [r2, #0]
 808fe8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808fe8e:	b11b      	cbz	r3, 808fe98 <_strtod_r+0xba8>
 808fe90:	4642      	mov	r2, r8
 808fe92:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 808fe96:	e007      	b.n	808fea8 <_strtod_r+0xbb8>
 808fe98:	4642      	mov	r2, r8
 808fe9a:	464b      	mov	r3, r9
 808fe9c:	e004      	b.n	808fea8 <_strtod_r+0xbb8>
 808fe9e:	2500      	movs	r5, #0
 808fea0:	462a      	mov	r2, r5
 808fea2:	2101      	movs	r1, #1
 808fea4:	f7ff bb47 	b.w	808f536 <_strtod_r+0x246>
 808fea8:	4610      	mov	r0, r2
 808feaa:	4619      	mov	r1, r3
 808feac:	b01d      	add	sp, #116	; 0x74
 808feae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808feb2:	bf00      	nop
 808feb4:	f3af 8000 	nop.w
 808feb8:	ffc00000 	.word	0xffc00000
 808febc:	41dfffff 	.word	0x41dfffff
 808fec0:	94a03595 	.word	0x94a03595
 808fec4:	3fdfffff 	.word	0x3fdfffff
 808fec8:	35afe535 	.word	0x35afe535
 808fecc:	3fe00000 	.word	0x3fe00000
 808fed0:	94a03595 	.word	0x94a03595
 808fed4:	3fcfffff 	.word	0x3fcfffff
 808fed8:	3ff00000 	.word	0x3ff00000
 808fedc:	3fe00000 	.word	0x3fe00000
 808fee0:	7fe00000 	.word	0x7fe00000
 808fee4:	7c9fffff 	.word	0x7c9fffff
 808fee8:	7fefffff 	.word	0x7fefffff
 808feec:	39500000 	.word	0x39500000

0808fef0 <strtod>:
 808fef0:	4b02      	ldr	r3, [pc, #8]	; (808fefc <strtod+0xc>)
 808fef2:	460a      	mov	r2, r1
 808fef4:	4601      	mov	r1, r0
 808fef6:	6818      	ldr	r0, [r3, #0]
 808fef8:	f7ff b9fa 	b.w	808f2f0 <_strtod_r>
 808fefc:	20000148 	.word	0x20000148

0808ff00 <__strtok_r>:
 808ff00:	b5f0      	push	{r4, r5, r6, r7, lr}
 808ff02:	b948      	cbnz	r0, 808ff18 <__strtok_r+0x18>
 808ff04:	6810      	ldr	r0, [r2, #0]
 808ff06:	b938      	cbnz	r0, 808ff18 <__strtok_r+0x18>
 808ff08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808ff0a:	f817 6b01 	ldrb.w	r6, [r7], #1
 808ff0e:	b15e      	cbz	r6, 808ff28 <__strtok_r+0x28>
 808ff10:	42b5      	cmp	r5, r6
 808ff12:	d1fa      	bne.n	808ff0a <__strtok_r+0xa>
 808ff14:	b12b      	cbz	r3, 808ff22 <__strtok_r+0x22>
 808ff16:	4620      	mov	r0, r4
 808ff18:	4604      	mov	r4, r0
 808ff1a:	460f      	mov	r7, r1
 808ff1c:	f814 5b01 	ldrb.w	r5, [r4], #1
 808ff20:	e7f3      	b.n	808ff0a <__strtok_r+0xa>
 808ff22:	6014      	str	r4, [r2, #0]
 808ff24:	7003      	strb	r3, [r0, #0]
 808ff26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808ff28:	b94d      	cbnz	r5, 808ff3e <__strtok_r+0x3e>
 808ff2a:	6015      	str	r5, [r2, #0]
 808ff2c:	4628      	mov	r0, r5
 808ff2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808ff30:	f817 6b01 	ldrb.w	r6, [r7], #1
 808ff34:	42b5      	cmp	r5, r6
 808ff36:	d007      	beq.n	808ff48 <__strtok_r+0x48>
 808ff38:	2e00      	cmp	r6, #0
 808ff3a:	d1f9      	bne.n	808ff30 <__strtok_r+0x30>
 808ff3c:	461c      	mov	r4, r3
 808ff3e:	4623      	mov	r3, r4
 808ff40:	460f      	mov	r7, r1
 808ff42:	f813 5b01 	ldrb.w	r5, [r3], #1
 808ff46:	e7f3      	b.n	808ff30 <__strtok_r+0x30>
 808ff48:	b115      	cbz	r5, 808ff50 <__strtok_r+0x50>
 808ff4a:	2100      	movs	r1, #0
 808ff4c:	7021      	strb	r1, [r4, #0]
 808ff4e:	e000      	b.n	808ff52 <__strtok_r+0x52>
 808ff50:	462b      	mov	r3, r5
 808ff52:	6013      	str	r3, [r2, #0]
 808ff54:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808ff56 <strtok_r>:
 808ff56:	2301      	movs	r3, #1
 808ff58:	f7ff bfd2 	b.w	808ff00 <__strtok_r>

0808ff5c <_strtol_r>:
 808ff5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808ff60:	460f      	mov	r7, r1
 808ff62:	4680      	mov	r8, r0
 808ff64:	483f      	ldr	r0, [pc, #252]	; (8090064 <_strtol_r+0x108>)
 808ff66:	f8d0 9000 	ldr.w	r9, [r0]
 808ff6a:	463d      	mov	r5, r7
 808ff6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 808ff70:	eb09 0004 	add.w	r0, r9, r4
 808ff74:	7840      	ldrb	r0, [r0, #1]
 808ff76:	f000 0008 	and.w	r0, r0, #8
 808ff7a:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 808ff7e:	b108      	cbz	r0, 808ff84 <_strtol_r+0x28>
 808ff80:	462f      	mov	r7, r5
 808ff82:	e7f2      	b.n	808ff6a <_strtol_r+0xe>
 808ff84:	2c2d      	cmp	r4, #45	; 0x2d
 808ff86:	d103      	bne.n	808ff90 <_strtol_r+0x34>
 808ff88:	1cbd      	adds	r5, r7, #2
 808ff8a:	787c      	ldrb	r4, [r7, #1]
 808ff8c:	2601      	movs	r6, #1
 808ff8e:	e003      	b.n	808ff98 <_strtol_r+0x3c>
 808ff90:	2c2b      	cmp	r4, #43	; 0x2b
 808ff92:	bf04      	itt	eq
 808ff94:	787c      	ldrbeq	r4, [r7, #1]
 808ff96:	1cbd      	addeq	r5, r7, #2
 808ff98:	b113      	cbz	r3, 808ffa0 <_strtol_r+0x44>
 808ff9a:	2b10      	cmp	r3, #16
 808ff9c:	d10a      	bne.n	808ffb4 <_strtol_r+0x58>
 808ff9e:	e05b      	b.n	8090058 <_strtol_r+0xfc>
 808ffa0:	2c30      	cmp	r4, #48	; 0x30
 808ffa2:	d157      	bne.n	8090054 <_strtol_r+0xf8>
 808ffa4:	7828      	ldrb	r0, [r5, #0]
 808ffa6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 808ffaa:	2858      	cmp	r0, #88	; 0x58
 808ffac:	d14d      	bne.n	809004a <_strtol_r+0xee>
 808ffae:	786c      	ldrb	r4, [r5, #1]
 808ffb0:	2310      	movs	r3, #16
 808ffb2:	3502      	adds	r5, #2
 808ffb4:	2e00      	cmp	r6, #0
 808ffb6:	bf14      	ite	ne
 808ffb8:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 808ffbc:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 808ffc0:	fbbc faf3 	udiv	sl, ip, r3
 808ffc4:	2700      	movs	r7, #0
 808ffc6:	4638      	mov	r0, r7
 808ffc8:	fb03 cc1a 	mls	ip, r3, sl, ip
 808ffcc:	eb09 0e04 	add.w	lr, r9, r4
 808ffd0:	f89e e001 	ldrb.w	lr, [lr, #1]
 808ffd4:	f01e 0f04 	tst.w	lr, #4
 808ffd8:	d001      	beq.n	808ffde <_strtol_r+0x82>
 808ffda:	3c30      	subs	r4, #48	; 0x30
 808ffdc:	e00b      	b.n	808fff6 <_strtol_r+0x9a>
 808ffde:	f01e 0e03 	ands.w	lr, lr, #3
 808ffe2:	d01b      	beq.n	809001c <_strtol_r+0xc0>
 808ffe4:	f1be 0f01 	cmp.w	lr, #1
 808ffe8:	bf0c      	ite	eq
 808ffea:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 808ffee:	f04f 0e57 	movne.w	lr, #87	; 0x57
 808fff2:	ebce 0404 	rsb	r4, lr, r4
 808fff6:	42a3      	cmp	r3, r4
 808fff8:	dd10      	ble.n	809001c <_strtol_r+0xc0>
 808fffa:	f1b7 3fff 	cmp.w	r7, #4294967295
 808fffe:	d00a      	beq.n	8090016 <_strtol_r+0xba>
 8090000:	4550      	cmp	r0, sl
 8090002:	d806      	bhi.n	8090012 <_strtol_r+0xb6>
 8090004:	d101      	bne.n	809000a <_strtol_r+0xae>
 8090006:	4564      	cmp	r4, ip
 8090008:	dc03      	bgt.n	8090012 <_strtol_r+0xb6>
 809000a:	fb03 4000 	mla	r0, r3, r0, r4
 809000e:	2701      	movs	r7, #1
 8090010:	e001      	b.n	8090016 <_strtol_r+0xba>
 8090012:	f04f 37ff 	mov.w	r7, #4294967295
 8090016:	f815 4b01 	ldrb.w	r4, [r5], #1
 809001a:	e7d7      	b.n	808ffcc <_strtol_r+0x70>
 809001c:	1c7b      	adds	r3, r7, #1
 809001e:	d10c      	bne.n	809003a <_strtol_r+0xde>
 8090020:	2e00      	cmp	r6, #0
 8090022:	f04f 0322 	mov.w	r3, #34	; 0x22
 8090026:	bf14      	ite	ne
 8090028:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 809002c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8090030:	f8c8 3000 	str.w	r3, [r8]
 8090034:	b92a      	cbnz	r2, 8090042 <_strtol_r+0xe6>
 8090036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 809003a:	b106      	cbz	r6, 809003e <_strtol_r+0xe2>
 809003c:	4240      	negs	r0, r0
 809003e:	b172      	cbz	r2, 809005e <_strtol_r+0x102>
 8090040:	b107      	cbz	r7, 8090044 <_strtol_r+0xe8>
 8090042:	1e69      	subs	r1, r5, #1
 8090044:	6011      	str	r1, [r2, #0]
 8090046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 809004a:	2430      	movs	r4, #48	; 0x30
 809004c:	2b00      	cmp	r3, #0
 809004e:	d1b1      	bne.n	808ffb4 <_strtol_r+0x58>
 8090050:	2308      	movs	r3, #8
 8090052:	e7af      	b.n	808ffb4 <_strtol_r+0x58>
 8090054:	230a      	movs	r3, #10
 8090056:	e7ad      	b.n	808ffb4 <_strtol_r+0x58>
 8090058:	2c30      	cmp	r4, #48	; 0x30
 809005a:	d0a3      	beq.n	808ffa4 <_strtol_r+0x48>
 809005c:	e7aa      	b.n	808ffb4 <_strtol_r+0x58>
 809005e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8090062:	bf00      	nop
 8090064:	200000e4 	.word	0x200000e4

08090068 <strtol>:
 8090068:	4613      	mov	r3, r2
 809006a:	460a      	mov	r2, r1
 809006c:	4601      	mov	r1, r0
 809006e:	4802      	ldr	r0, [pc, #8]	; (8090078 <strtol+0x10>)
 8090070:	6800      	ldr	r0, [r0, #0]
 8090072:	f7ff bf73 	b.w	808ff5c <_strtol_r>
 8090076:	bf00      	nop
 8090078:	20000148 	.word	0x20000148

0809007c <_strtoul_r>:
 809007c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8090080:	460e      	mov	r6, r1
 8090082:	4680      	mov	r8, r0
 8090084:	483b      	ldr	r0, [pc, #236]	; (8090174 <_strtoul_r+0xf8>)
 8090086:	f8d0 9000 	ldr.w	r9, [r0]
 809008a:	4635      	mov	r5, r6
 809008c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8090090:	eb09 0004 	add.w	r0, r9, r4
 8090094:	7840      	ldrb	r0, [r0, #1]
 8090096:	f000 0008 	and.w	r0, r0, #8
 809009a:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 809009e:	b108      	cbz	r0, 80900a4 <_strtoul_r+0x28>
 80900a0:	462e      	mov	r6, r5
 80900a2:	e7f2      	b.n	809008a <_strtoul_r+0xe>
 80900a4:	2c2d      	cmp	r4, #45	; 0x2d
 80900a6:	d103      	bne.n	80900b0 <_strtoul_r+0x34>
 80900a8:	1cb5      	adds	r5, r6, #2
 80900aa:	7874      	ldrb	r4, [r6, #1]
 80900ac:	2701      	movs	r7, #1
 80900ae:	e003      	b.n	80900b8 <_strtoul_r+0x3c>
 80900b0:	2c2b      	cmp	r4, #43	; 0x2b
 80900b2:	bf04      	itt	eq
 80900b4:	7874      	ldrbeq	r4, [r6, #1]
 80900b6:	1cb5      	addeq	r5, r6, #2
 80900b8:	b113      	cbz	r3, 80900c0 <_strtoul_r+0x44>
 80900ba:	2b10      	cmp	r3, #16
 80900bc:	d10a      	bne.n	80900d4 <_strtoul_r+0x58>
 80900be:	e053      	b.n	8090168 <_strtoul_r+0xec>
 80900c0:	2c30      	cmp	r4, #48	; 0x30
 80900c2:	d14f      	bne.n	8090164 <_strtoul_r+0xe8>
 80900c4:	7828      	ldrb	r0, [r5, #0]
 80900c6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80900ca:	2858      	cmp	r0, #88	; 0x58
 80900cc:	d145      	bne.n	809015a <_strtoul_r+0xde>
 80900ce:	786c      	ldrb	r4, [r5, #1]
 80900d0:	2310      	movs	r3, #16
 80900d2:	3502      	adds	r5, #2
 80900d4:	f04f 3cff 	mov.w	ip, #4294967295
 80900d8:	fbbc fcf3 	udiv	ip, ip, r3
 80900dc:	fb03 fa0c 	mul.w	sl, r3, ip
 80900e0:	2600      	movs	r6, #0
 80900e2:	ea6f 0a0a 	mvn.w	sl, sl
 80900e6:	4630      	mov	r0, r6
 80900e8:	eb09 0e04 	add.w	lr, r9, r4
 80900ec:	f89e e001 	ldrb.w	lr, [lr, #1]
 80900f0:	f01e 0f04 	tst.w	lr, #4
 80900f4:	d001      	beq.n	80900fa <_strtoul_r+0x7e>
 80900f6:	3c30      	subs	r4, #48	; 0x30
 80900f8:	e00b      	b.n	8090112 <_strtoul_r+0x96>
 80900fa:	f01e 0e03 	ands.w	lr, lr, #3
 80900fe:	d01a      	beq.n	8090136 <_strtoul_r+0xba>
 8090100:	f1be 0f01 	cmp.w	lr, #1
 8090104:	bf0c      	ite	eq
 8090106:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 809010a:	f04f 0e57 	movne.w	lr, #87	; 0x57
 809010e:	ebce 0404 	rsb	r4, lr, r4
 8090112:	42a3      	cmp	r3, r4
 8090114:	dd0f      	ble.n	8090136 <_strtoul_r+0xba>
 8090116:	2e00      	cmp	r6, #0
 8090118:	db08      	blt.n	809012c <_strtoul_r+0xb0>
 809011a:	4560      	cmp	r0, ip
 809011c:	d806      	bhi.n	809012c <_strtoul_r+0xb0>
 809011e:	d101      	bne.n	8090124 <_strtoul_r+0xa8>
 8090120:	4554      	cmp	r4, sl
 8090122:	dc03      	bgt.n	809012c <_strtoul_r+0xb0>
 8090124:	fb03 4000 	mla	r0, r3, r0, r4
 8090128:	2601      	movs	r6, #1
 809012a:	e001      	b.n	8090130 <_strtoul_r+0xb4>
 809012c:	f04f 36ff 	mov.w	r6, #4294967295
 8090130:	f815 4b01 	ldrb.w	r4, [r5], #1
 8090134:	e7d8      	b.n	80900e8 <_strtoul_r+0x6c>
 8090136:	2e00      	cmp	r6, #0
 8090138:	da07      	bge.n	809014a <_strtoul_r+0xce>
 809013a:	2322      	movs	r3, #34	; 0x22
 809013c:	f8c8 3000 	str.w	r3, [r8]
 8090140:	f04f 30ff 	mov.w	r0, #4294967295
 8090144:	b92a      	cbnz	r2, 8090152 <_strtoul_r+0xd6>
 8090146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 809014a:	b107      	cbz	r7, 809014e <_strtoul_r+0xd2>
 809014c:	4240      	negs	r0, r0
 809014e:	b172      	cbz	r2, 809016e <_strtoul_r+0xf2>
 8090150:	b106      	cbz	r6, 8090154 <_strtoul_r+0xd8>
 8090152:	1e69      	subs	r1, r5, #1
 8090154:	6011      	str	r1, [r2, #0]
 8090156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 809015a:	2430      	movs	r4, #48	; 0x30
 809015c:	2b00      	cmp	r3, #0
 809015e:	d1b9      	bne.n	80900d4 <_strtoul_r+0x58>
 8090160:	2308      	movs	r3, #8
 8090162:	e7b7      	b.n	80900d4 <_strtoul_r+0x58>
 8090164:	230a      	movs	r3, #10
 8090166:	e7b5      	b.n	80900d4 <_strtoul_r+0x58>
 8090168:	2c30      	cmp	r4, #48	; 0x30
 809016a:	d0ab      	beq.n	80900c4 <_strtoul_r+0x48>
 809016c:	e7b2      	b.n	80900d4 <_strtoul_r+0x58>
 809016e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8090172:	bf00      	nop
 8090174:	200000e4 	.word	0x200000e4

08090178 <strtoul>:
 8090178:	4613      	mov	r3, r2
 809017a:	460a      	mov	r2, r1
 809017c:	4601      	mov	r1, r0
 809017e:	4802      	ldr	r0, [pc, #8]	; (8090188 <strtoul+0x10>)
 8090180:	6800      	ldr	r0, [r0, #0]
 8090182:	f7ff bf7b 	b.w	809007c <_strtoul_r>
 8090186:	bf00      	nop
 8090188:	20000148 	.word	0x20000148

0809018c <__get_current_time_locale>:
 809018c:	4b04      	ldr	r3, [pc, #16]	; (80901a0 <__get_current_time_locale+0x14>)
 809018e:	4a05      	ldr	r2, [pc, #20]	; (80901a4 <__get_current_time_locale+0x18>)
 8090190:	6818      	ldr	r0, [r3, #0]
 8090192:	4b05      	ldr	r3, [pc, #20]	; (80901a8 <__get_current_time_locale+0x1c>)
 8090194:	2800      	cmp	r0, #0
 8090196:	bf14      	ite	ne
 8090198:	4610      	movne	r0, r2
 809019a:	4618      	moveq	r0, r3
 809019c:	4770      	bx	lr
 809019e:	bf00      	nop
 80901a0:	200012f4 	.word	0x200012f4
 80901a4:	200012f8 	.word	0x200012f8
 80901a8:	080947ac 	.word	0x080947ac

080901ac <toupper>:
 80901ac:	4b04      	ldr	r3, [pc, #16]	; (80901c0 <toupper+0x14>)
 80901ae:	681b      	ldr	r3, [r3, #0]
 80901b0:	4403      	add	r3, r0
 80901b2:	785b      	ldrb	r3, [r3, #1]
 80901b4:	f003 0303 	and.w	r3, r3, #3
 80901b8:	2b02      	cmp	r3, #2
 80901ba:	bf08      	it	eq
 80901bc:	3820      	subeq	r0, #32
 80901be:	4770      	bx	lr
 80901c0:	200000e4 	.word	0x200000e4

080901c4 <__tzcalc_limits>:
 80901c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80901c8:	4604      	mov	r4, r0
 80901ca:	f000 fd91 	bl	8090cf0 <__gettzinfo>
 80901ce:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80901d2:	429c      	cmp	r4, r3
 80901d4:	f340 8096 	ble.w	8090304 <__tzcalc_limits+0x140>
 80901d8:	f240 156d 	movw	r5, #365	; 0x16d
 80901dc:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80901e0:	18e3      	adds	r3, r4, r3
 80901e2:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 80901e6:	109b      	asrs	r3, r3, #2
 80901e8:	fb05 3502 	mla	r5, r5, r2, r3
 80901ec:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 80901f0:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80901f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80901f8:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80901fc:	442b      	add	r3, r5
 80901fe:	18a5      	adds	r5, r4, r2
 8090200:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8090204:	fb94 f7f2 	sdiv	r7, r4, r2
 8090208:	fb95 f5f2 	sdiv	r5, r5, r2
 809020c:	fb02 4717 	mls	r7, r2, r7, r4
 8090210:	441d      	add	r5, r3
 8090212:	2364      	movs	r3, #100	; 0x64
 8090214:	fb94 f6f3 	sdiv	r6, r4, r3
 8090218:	fab7 fe87 	clz	lr, r7
 809021c:	4601      	mov	r1, r0
 809021e:	fb03 4616 	mls	r6, r3, r6, r4
 8090222:	f100 0338 	add.w	r3, r0, #56	; 0x38
 8090226:	9301      	str	r3, [sp, #4]
 8090228:	f004 0303 	and.w	r3, r4, #3
 809022c:	6044      	str	r4, [r0, #4]
 809022e:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8090232:	9300      	str	r3, [sp, #0]
 8090234:	f04f 0c07 	mov.w	ip, #7
 8090238:	7a0b      	ldrb	r3, [r1, #8]
 809023a:	2b4a      	cmp	r3, #74	; 0x4a
 809023c:	d10e      	bne.n	809025c <__tzcalc_limits+0x98>
 809023e:	694b      	ldr	r3, [r1, #20]
 8090240:	9a00      	ldr	r2, [sp, #0]
 8090242:	18ec      	adds	r4, r5, r3
 8090244:	b902      	cbnz	r2, 8090248 <__tzcalc_limits+0x84>
 8090246:	b906      	cbnz	r6, 809024a <__tzcalc_limits+0x86>
 8090248:	b927      	cbnz	r7, 8090254 <__tzcalc_limits+0x90>
 809024a:	2b3b      	cmp	r3, #59	; 0x3b
 809024c:	bfd4      	ite	le
 809024e:	2300      	movle	r3, #0
 8090250:	2301      	movgt	r3, #1
 8090252:	e000      	b.n	8090256 <__tzcalc_limits+0x92>
 8090254:	2300      	movs	r3, #0
 8090256:	4423      	add	r3, r4
 8090258:	3b01      	subs	r3, #1
 809025a:	e03f      	b.n	80902dc <__tzcalc_limits+0x118>
 809025c:	2b44      	cmp	r3, #68	; 0x44
 809025e:	d102      	bne.n	8090266 <__tzcalc_limits+0xa2>
 8090260:	694b      	ldr	r3, [r1, #20]
 8090262:	442b      	add	r3, r5
 8090264:	e03a      	b.n	80902dc <__tzcalc_limits+0x118>
 8090266:	9b00      	ldr	r3, [sp, #0]
 8090268:	b92b      	cbnz	r3, 8090276 <__tzcalc_limits+0xb2>
 809026a:	2e00      	cmp	r6, #0
 809026c:	bf0c      	ite	eq
 809026e:	46f0      	moveq	r8, lr
 8090270:	f04f 0801 	movne.w	r8, #1
 8090274:	e000      	b.n	8090278 <__tzcalc_limits+0xb4>
 8090276:	46f0      	mov	r8, lr
 8090278:	46a9      	mov	r9, r5
 809027a:	4b24      	ldr	r3, [pc, #144]	; (809030c <__tzcalc_limits+0x148>)
 809027c:	2230      	movs	r2, #48	; 0x30
 809027e:	fb02 3808 	mla	r8, r2, r8, r3
 8090282:	68cc      	ldr	r4, [r1, #12]
 8090284:	f1a8 0a04 	sub.w	sl, r8, #4
 8090288:	2301      	movs	r3, #1
 809028a:	42a3      	cmp	r3, r4
 809028c:	da04      	bge.n	8090298 <__tzcalc_limits+0xd4>
 809028e:	f85a bf04 	ldr.w	fp, [sl, #4]!
 8090292:	3301      	adds	r3, #1
 8090294:	44d9      	add	r9, fp
 8090296:	e7f8      	b.n	809028a <__tzcalc_limits+0xc6>
 8090298:	f109 0304 	add.w	r3, r9, #4
 809029c:	fb93 fbfc 	sdiv	fp, r3, ip
 80902a0:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 80902a4:	ebca 0a03 	rsb	sl, sl, r3
 80902a8:	694b      	ldr	r3, [r1, #20]
 80902aa:	2c01      	cmp	r4, #1
 80902ac:	bfb8      	it	lt
 80902ae:	2401      	movlt	r4, #1
 80902b0:	ebb3 0a0a 	subs.w	sl, r3, sl
 80902b4:	690b      	ldr	r3, [r1, #16]
 80902b6:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80902ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80902be:	f104 34ff 	add.w	r4, r4, #4294967295
 80902c2:	bf48      	it	mi
 80902c4:	f10a 0a07 	addmi.w	sl, sl, #7
 80902c8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80902cc:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80902d0:	4453      	add	r3, sl
 80902d2:	42a3      	cmp	r3, r4
 80902d4:	db01      	blt.n	80902da <__tzcalc_limits+0x116>
 80902d6:	3b07      	subs	r3, #7
 80902d8:	e7fb      	b.n	80902d2 <__tzcalc_limits+0x10e>
 80902da:	444b      	add	r3, r9
 80902dc:	698c      	ldr	r4, [r1, #24]
 80902de:	4a0c      	ldr	r2, [pc, #48]	; (8090310 <__tzcalc_limits+0x14c>)
 80902e0:	fb02 4303 	mla	r3, r2, r3, r4
 80902e4:	6a0c      	ldr	r4, [r1, #32]
 80902e6:	4423      	add	r3, r4
 80902e8:	f841 3f1c 	str.w	r3, [r1, #28]!
 80902ec:	9b01      	ldr	r3, [sp, #4]
 80902ee:	4299      	cmp	r1, r3
 80902f0:	d1a2      	bne.n	8090238 <__tzcalc_limits+0x74>
 80902f2:	69c3      	ldr	r3, [r0, #28]
 80902f4:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80902f6:	4293      	cmp	r3, r2
 80902f8:	bfac      	ite	ge
 80902fa:	2300      	movge	r3, #0
 80902fc:	2301      	movlt	r3, #1
 80902fe:	6003      	str	r3, [r0, #0]
 8090300:	2001      	movs	r0, #1
 8090302:	e000      	b.n	8090306 <__tzcalc_limits+0x142>
 8090304:	2000      	movs	r0, #0
 8090306:	b003      	add	sp, #12
 8090308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 809030c:	08094574 	.word	0x08094574
 8090310:	00015180 	.word	0x00015180

08090314 <__tz_lock>:
 8090314:	4770      	bx	lr

08090316 <__tz_unlock>:
 8090316:	4770      	bx	lr

08090318 <_tzset_unlocked>:
 8090318:	4b01      	ldr	r3, [pc, #4]	; (8090320 <_tzset_unlocked+0x8>)
 809031a:	6818      	ldr	r0, [r3, #0]
 809031c:	f000 b802 	b.w	8090324 <_tzset_unlocked_r>
 8090320:	20000148 	.word	0x20000148

08090324 <_tzset_unlocked_r>:
 8090324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8090328:	b08d      	sub	sp, #52	; 0x34
 809032a:	4607      	mov	r7, r0
 809032c:	f000 fce0 	bl	8090cf0 <__gettzinfo>
 8090330:	49b0      	ldr	r1, [pc, #704]	; (80905f4 <_tzset_unlocked_r+0x2d0>)
 8090332:	4604      	mov	r4, r0
 8090334:	4638      	mov	r0, r7
 8090336:	f000 fcd3 	bl	8090ce0 <_getenv_r>
 809033a:	4eaf      	ldr	r6, [pc, #700]	; (80905f8 <_tzset_unlocked_r+0x2d4>)
 809033c:	4605      	mov	r5, r0
 809033e:	b960      	cbnz	r0, 809035a <_tzset_unlocked_r+0x36>
 8090340:	4bae      	ldr	r3, [pc, #696]	; (80905fc <_tzset_unlocked_r+0x2d8>)
 8090342:	4aaf      	ldr	r2, [pc, #700]	; (8090600 <_tzset_unlocked_r+0x2dc>)
 8090344:	6018      	str	r0, [r3, #0]
 8090346:	4baf      	ldr	r3, [pc, #700]	; (8090604 <_tzset_unlocked_r+0x2e0>)
 8090348:	6018      	str	r0, [r3, #0]
 809034a:	4baf      	ldr	r3, [pc, #700]	; (8090608 <_tzset_unlocked_r+0x2e4>)
 809034c:	6830      	ldr	r0, [r6, #0]
 809034e:	601a      	str	r2, [r3, #0]
 8090350:	605a      	str	r2, [r3, #4]
 8090352:	f7fa fa81 	bl	808a858 <free>
 8090356:	6035      	str	r5, [r6, #0]
 8090358:	e148      	b.n	80905ec <_tzset_unlocked_r+0x2c8>
 809035a:	6831      	ldr	r1, [r6, #0]
 809035c:	b979      	cbnz	r1, 809037e <_tzset_unlocked_r+0x5a>
 809035e:	6830      	ldr	r0, [r6, #0]
 8090360:	f7fa fa7a 	bl	808a858 <free>
 8090364:	4628      	mov	r0, r5
 8090366:	f7fe ff55 	bl	808f214 <strlen>
 809036a:	1c41      	adds	r1, r0, #1
 809036c:	4638      	mov	r0, r7
 809036e:	f7fa fac3 	bl	808a8f8 <_malloc_r>
 8090372:	6030      	str	r0, [r6, #0]
 8090374:	b148      	cbz	r0, 809038a <_tzset_unlocked_r+0x66>
 8090376:	4629      	mov	r1, r5
 8090378:	f7fe fa14 	bl	808e7a4 <strcpy>
 809037c:	e005      	b.n	809038a <_tzset_unlocked_r+0x66>
 809037e:	f7fe fa07 	bl	808e790 <strcmp>
 8090382:	2800      	cmp	r0, #0
 8090384:	f000 8132 	beq.w	80905ec <_tzset_unlocked_r+0x2c8>
 8090388:	e7e9      	b.n	809035e <_tzset_unlocked_r+0x3a>
 809038a:	782b      	ldrb	r3, [r5, #0]
 809038c:	ae0a      	add	r6, sp, #40	; 0x28
 809038e:	2b3a      	cmp	r3, #58	; 0x3a
 8090390:	bf08      	it	eq
 8090392:	3501      	addeq	r5, #1
 8090394:	4633      	mov	r3, r6
 8090396:	4a9d      	ldr	r2, [pc, #628]	; (809060c <_tzset_unlocked_r+0x2e8>)
 8090398:	499d      	ldr	r1, [pc, #628]	; (8090610 <_tzset_unlocked_r+0x2ec>)
 809039a:	4628      	mov	r0, r5
 809039c:	f7fa fa84 	bl	808a8a8 <siscanf>
 80903a0:	2800      	cmp	r0, #0
 80903a2:	f340 8123 	ble.w	80905ec <_tzset_unlocked_r+0x2c8>
 80903a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80903a8:	18ef      	adds	r7, r5, r3
 80903aa:	5ceb      	ldrb	r3, [r5, r3]
 80903ac:	2b2d      	cmp	r3, #45	; 0x2d
 80903ae:	d103      	bne.n	80903b8 <_tzset_unlocked_r+0x94>
 80903b0:	3701      	adds	r7, #1
 80903b2:	f04f 35ff 	mov.w	r5, #4294967295
 80903b6:	e003      	b.n	80903c0 <_tzset_unlocked_r+0x9c>
 80903b8:	2b2b      	cmp	r3, #43	; 0x2b
 80903ba:	bf08      	it	eq
 80903bc:	3701      	addeq	r7, #1
 80903be:	2501      	movs	r5, #1
 80903c0:	f10d 0a20 	add.w	sl, sp, #32
 80903c4:	f10d 0b1e 	add.w	fp, sp, #30
 80903c8:	f04f 0800 	mov.w	r8, #0
 80903cc:	9603      	str	r6, [sp, #12]
 80903ce:	f8cd a008 	str.w	sl, [sp, #8]
 80903d2:	9601      	str	r6, [sp, #4]
 80903d4:	f8cd b000 	str.w	fp, [sp]
 80903d8:	4633      	mov	r3, r6
 80903da:	aa07      	add	r2, sp, #28
 80903dc:	498d      	ldr	r1, [pc, #564]	; (8090614 <_tzset_unlocked_r+0x2f0>)
 80903de:	4638      	mov	r0, r7
 80903e0:	f8ad 801e 	strh.w	r8, [sp, #30]
 80903e4:	f8ad 8020 	strh.w	r8, [sp, #32]
 80903e8:	f7fa fa5e 	bl	808a8a8 <siscanf>
 80903ec:	4540      	cmp	r0, r8
 80903ee:	f340 80fd 	ble.w	80905ec <_tzset_unlocked_r+0x2c8>
 80903f2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80903f6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80903fa:	213c      	movs	r1, #60	; 0x3c
 80903fc:	fb01 3302 	mla	r3, r1, r2, r3
 8090400:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8090404:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8090408:	fb01 3302 	mla	r3, r1, r2, r3
 809040c:	435d      	muls	r5, r3
 809040e:	4b7f      	ldr	r3, [pc, #508]	; (809060c <_tzset_unlocked_r+0x2e8>)
 8090410:	6225      	str	r5, [r4, #32]
 8090412:	4d7d      	ldr	r5, [pc, #500]	; (8090608 <_tzset_unlocked_r+0x2e4>)
 8090414:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8090620 <_tzset_unlocked_r+0x2fc>
 8090418:	602b      	str	r3, [r5, #0]
 809041a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 809041c:	464a      	mov	r2, r9
 809041e:	441f      	add	r7, r3
 8090420:	497b      	ldr	r1, [pc, #492]	; (8090610 <_tzset_unlocked_r+0x2ec>)
 8090422:	4633      	mov	r3, r6
 8090424:	4638      	mov	r0, r7
 8090426:	f7fa fa3f 	bl	808a8a8 <siscanf>
 809042a:	4540      	cmp	r0, r8
 809042c:	dc08      	bgt.n	8090440 <_tzset_unlocked_r+0x11c>
 809042e:	682b      	ldr	r3, [r5, #0]
 8090430:	6a22      	ldr	r2, [r4, #32]
 8090432:	606b      	str	r3, [r5, #4]
 8090434:	4b71      	ldr	r3, [pc, #452]	; (80905fc <_tzset_unlocked_r+0x2d8>)
 8090436:	601a      	str	r2, [r3, #0]
 8090438:	4b72      	ldr	r3, [pc, #456]	; (8090604 <_tzset_unlocked_r+0x2e0>)
 809043a:	f8c3 8000 	str.w	r8, [r3]
 809043e:	e0d5      	b.n	80905ec <_tzset_unlocked_r+0x2c8>
 8090440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8090442:	f8c5 9004 	str.w	r9, [r5, #4]
 8090446:	18fd      	adds	r5, r7, r3
 8090448:	5cfb      	ldrb	r3, [r7, r3]
 809044a:	2b2d      	cmp	r3, #45	; 0x2d
 809044c:	d103      	bne.n	8090456 <_tzset_unlocked_r+0x132>
 809044e:	3501      	adds	r5, #1
 8090450:	f04f 37ff 	mov.w	r7, #4294967295
 8090454:	e003      	b.n	809045e <_tzset_unlocked_r+0x13a>
 8090456:	2b2b      	cmp	r3, #43	; 0x2b
 8090458:	bf08      	it	eq
 809045a:	3501      	addeq	r5, #1
 809045c:	2701      	movs	r7, #1
 809045e:	2300      	movs	r3, #0
 8090460:	f8ad 301c 	strh.w	r3, [sp, #28]
 8090464:	f8ad 301e 	strh.w	r3, [sp, #30]
 8090468:	f8ad 3020 	strh.w	r3, [sp, #32]
 809046c:	930a      	str	r3, [sp, #40]	; 0x28
 809046e:	9603      	str	r6, [sp, #12]
 8090470:	f8cd a008 	str.w	sl, [sp, #8]
 8090474:	9601      	str	r6, [sp, #4]
 8090476:	f8cd b000 	str.w	fp, [sp]
 809047a:	4633      	mov	r3, r6
 809047c:	aa07      	add	r2, sp, #28
 809047e:	4965      	ldr	r1, [pc, #404]	; (8090614 <_tzset_unlocked_r+0x2f0>)
 8090480:	4628      	mov	r0, r5
 8090482:	f7fa fa11 	bl	808a8a8 <siscanf>
 8090486:	2800      	cmp	r0, #0
 8090488:	dc04      	bgt.n	8090494 <_tzset_unlocked_r+0x170>
 809048a:	6a23      	ldr	r3, [r4, #32]
 809048c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8090490:	63e3      	str	r3, [r4, #60]	; 0x3c
 8090492:	e00e      	b.n	80904b2 <_tzset_unlocked_r+0x18e>
 8090494:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8090498:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 809049c:	213c      	movs	r1, #60	; 0x3c
 809049e:	fb01 3302 	mla	r3, r1, r2, r3
 80904a2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80904a6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80904aa:	fb01 3302 	mla	r3, r1, r2, r3
 80904ae:	435f      	muls	r7, r3
 80904b0:	63e7      	str	r7, [r4, #60]	; 0x3c
 80904b2:	4627      	mov	r7, r4
 80904b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80904b6:	f04f 0900 	mov.w	r9, #0
 80904ba:	441d      	add	r5, r3
 80904bc:	782b      	ldrb	r3, [r5, #0]
 80904be:	2b2c      	cmp	r3, #44	; 0x2c
 80904c0:	bf08      	it	eq
 80904c2:	3501      	addeq	r5, #1
 80904c4:	f895 8000 	ldrb.w	r8, [r5]
 80904c8:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80904cc:	d126      	bne.n	809051c <_tzset_unlocked_r+0x1f8>
 80904ce:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80904d2:	9302      	str	r3, [sp, #8]
 80904d4:	ab09      	add	r3, sp, #36	; 0x24
 80904d6:	9300      	str	r3, [sp, #0]
 80904d8:	9603      	str	r6, [sp, #12]
 80904da:	9601      	str	r6, [sp, #4]
 80904dc:	4633      	mov	r3, r6
 80904de:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80904e2:	494d      	ldr	r1, [pc, #308]	; (8090618 <_tzset_unlocked_r+0x2f4>)
 80904e4:	4628      	mov	r0, r5
 80904e6:	f7fa f9df 	bl	808a8a8 <siscanf>
 80904ea:	2803      	cmp	r0, #3
 80904ec:	d17e      	bne.n	80905ec <_tzset_unlocked_r+0x2c8>
 80904ee:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80904f2:	1e4b      	subs	r3, r1, #1
 80904f4:	2b0b      	cmp	r3, #11
 80904f6:	d879      	bhi.n	80905ec <_tzset_unlocked_r+0x2c8>
 80904f8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80904fc:	1e53      	subs	r3, r2, #1
 80904fe:	2b04      	cmp	r3, #4
 8090500:	d874      	bhi.n	80905ec <_tzset_unlocked_r+0x2c8>
 8090502:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8090506:	2b06      	cmp	r3, #6
 8090508:	d870      	bhi.n	80905ec <_tzset_unlocked_r+0x2c8>
 809050a:	f887 8008 	strb.w	r8, [r7, #8]
 809050e:	60f9      	str	r1, [r7, #12]
 8090510:	613a      	str	r2, [r7, #16]
 8090512:	617b      	str	r3, [r7, #20]
 8090514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8090516:	eb05 0803 	add.w	r8, r5, r3
 809051a:	e02a      	b.n	8090572 <_tzset_unlocked_r+0x24e>
 809051c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8090520:	bf06      	itte	eq
 8090522:	4643      	moveq	r3, r8
 8090524:	3501      	addeq	r5, #1
 8090526:	2344      	movne	r3, #68	; 0x44
 8090528:	220a      	movs	r2, #10
 809052a:	a90b      	add	r1, sp, #44	; 0x2c
 809052c:	4628      	mov	r0, r5
 809052e:	9305      	str	r3, [sp, #20]
 8090530:	f7ff fe22 	bl	8090178 <strtoul>
 8090534:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8090538:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 809053c:	4545      	cmp	r5, r8
 809053e:	9b05      	ldr	r3, [sp, #20]
 8090540:	d114      	bne.n	809056c <_tzset_unlocked_r+0x248>
 8090542:	234d      	movs	r3, #77	; 0x4d
 8090544:	f1b9 0f00 	cmp.w	r9, #0
 8090548:	d107      	bne.n	809055a <_tzset_unlocked_r+0x236>
 809054a:	7223      	strb	r3, [r4, #8]
 809054c:	2303      	movs	r3, #3
 809054e:	60e3      	str	r3, [r4, #12]
 8090550:	2302      	movs	r3, #2
 8090552:	6123      	str	r3, [r4, #16]
 8090554:	f8c4 9014 	str.w	r9, [r4, #20]
 8090558:	e00b      	b.n	8090572 <_tzset_unlocked_r+0x24e>
 809055a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 809055e:	230b      	movs	r3, #11
 8090560:	62a3      	str	r3, [r4, #40]	; 0x28
 8090562:	2301      	movs	r3, #1
 8090564:	62e3      	str	r3, [r4, #44]	; 0x2c
 8090566:	2300      	movs	r3, #0
 8090568:	6323      	str	r3, [r4, #48]	; 0x30
 809056a:	e002      	b.n	8090572 <_tzset_unlocked_r+0x24e>
 809056c:	b280      	uxth	r0, r0
 809056e:	723b      	strb	r3, [r7, #8]
 8090570:	6178      	str	r0, [r7, #20]
 8090572:	2302      	movs	r3, #2
 8090574:	f8ad 301c 	strh.w	r3, [sp, #28]
 8090578:	2300      	movs	r3, #0
 809057a:	f8ad 301e 	strh.w	r3, [sp, #30]
 809057e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8090582:	930a      	str	r3, [sp, #40]	; 0x28
 8090584:	f898 3000 	ldrb.w	r3, [r8]
 8090588:	2b2f      	cmp	r3, #47	; 0x2f
 809058a:	d10b      	bne.n	80905a4 <_tzset_unlocked_r+0x280>
 809058c:	9603      	str	r6, [sp, #12]
 809058e:	f8cd a008 	str.w	sl, [sp, #8]
 8090592:	9601      	str	r6, [sp, #4]
 8090594:	f8cd b000 	str.w	fp, [sp]
 8090598:	4633      	mov	r3, r6
 809059a:	aa07      	add	r2, sp, #28
 809059c:	491f      	ldr	r1, [pc, #124]	; (809061c <_tzset_unlocked_r+0x2f8>)
 809059e:	4640      	mov	r0, r8
 80905a0:	f7fa f982 	bl	808a8a8 <siscanf>
 80905a4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80905a8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80905ac:	213c      	movs	r1, #60	; 0x3c
 80905ae:	fb01 3302 	mla	r3, r1, r2, r3
 80905b2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80905b6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80905ba:	fb01 3302 	mla	r3, r1, r2, r3
 80905be:	61bb      	str	r3, [r7, #24]
 80905c0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80905c2:	f109 0901 	add.w	r9, r9, #1
 80905c6:	f1b9 0f02 	cmp.w	r9, #2
 80905ca:	4445      	add	r5, r8
 80905cc:	f107 071c 	add.w	r7, r7, #28
 80905d0:	f47f af74 	bne.w	80904bc <_tzset_unlocked_r+0x198>
 80905d4:	6860      	ldr	r0, [r4, #4]
 80905d6:	f7ff fdf5 	bl	80901c4 <__tzcalc_limits>
 80905da:	6a22      	ldr	r2, [r4, #32]
 80905dc:	4b07      	ldr	r3, [pc, #28]	; (80905fc <_tzset_unlocked_r+0x2d8>)
 80905de:	601a      	str	r2, [r3, #0]
 80905e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80905e2:	1a9b      	subs	r3, r3, r2
 80905e4:	4a07      	ldr	r2, [pc, #28]	; (8090604 <_tzset_unlocked_r+0x2e0>)
 80905e6:	bf18      	it	ne
 80905e8:	2301      	movne	r3, #1
 80905ea:	6013      	str	r3, [r2, #0]
 80905ec:	b00d      	add	sp, #52	; 0x34
 80905ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80905f2:	bf00      	nop
 80905f4:	080948a8 	.word	0x080948a8
 80905f8:	2000140c 	.word	0x2000140c
 80905fc:	20001414 	.word	0x20001414
 8090600:	080948ab 	.word	0x080948ab
 8090604:	20001410 	.word	0x20001410
 8090608:	20000184 	.word	0x20000184
 809060c:	200013ff 	.word	0x200013ff
 8090610:	080948af 	.word	0x080948af
 8090614:	080948d2 	.word	0x080948d2
 8090618:	080948be 	.word	0x080948be
 809061c:	080948d1 	.word	0x080948d1
 8090620:	200013f4 	.word	0x200013f4

08090624 <abs>:
 8090624:	2800      	cmp	r0, #0
 8090626:	bfb8      	it	lt
 8090628:	4240      	neglt	r0, r0
 809062a:	4770      	bx	lr

0809062c <rshift>:
 809062c:	b5f0      	push	{r4, r5, r6, r7, lr}
 809062e:	6906      	ldr	r6, [r0, #16]
 8090630:	114b      	asrs	r3, r1, #5
 8090632:	42b3      	cmp	r3, r6
 8090634:	f100 0514 	add.w	r5, r0, #20
 8090638:	da27      	bge.n	809068a <rshift+0x5e>
 809063a:	f011 011f 	ands.w	r1, r1, #31
 809063e:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8090642:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8090646:	d101      	bne.n	809064c <rshift+0x20>
 8090648:	4629      	mov	r1, r5
 809064a:	e016      	b.n	809067a <rshift+0x4e>
 809064c:	1d14      	adds	r4, r2, #4
 809064e:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8090652:	462b      	mov	r3, r5
 8090654:	f1c1 0e20 	rsb	lr, r1, #32
 8090658:	40ca      	lsrs	r2, r1
 809065a:	42b4      	cmp	r4, r6
 809065c:	d209      	bcs.n	8090672 <rshift+0x46>
 809065e:	6827      	ldr	r7, [r4, #0]
 8090660:	fa07 f70e 	lsl.w	r7, r7, lr
 8090664:	433a      	orrs	r2, r7
 8090666:	f843 2b04 	str.w	r2, [r3], #4
 809066a:	f854 2b04 	ldr.w	r2, [r4], #4
 809066e:	40ca      	lsrs	r2, r1
 8090670:	e7f3      	b.n	809065a <rshift+0x2e>
 8090672:	601a      	str	r2, [r3, #0]
 8090674:	b152      	cbz	r2, 809068c <rshift+0x60>
 8090676:	3304      	adds	r3, #4
 8090678:	e008      	b.n	809068c <rshift+0x60>
 809067a:	42b2      	cmp	r2, r6
 809067c:	460b      	mov	r3, r1
 809067e:	d205      	bcs.n	809068c <rshift+0x60>
 8090680:	f852 3b04 	ldr.w	r3, [r2], #4
 8090684:	f841 3b04 	str.w	r3, [r1], #4
 8090688:	e7f7      	b.n	809067a <rshift+0x4e>
 809068a:	462b      	mov	r3, r5
 809068c:	1b5b      	subs	r3, r3, r5
 809068e:	109b      	asrs	r3, r3, #2
 8090690:	6103      	str	r3, [r0, #16]
 8090692:	b903      	cbnz	r3, 8090696 <rshift+0x6a>
 8090694:	6143      	str	r3, [r0, #20]
 8090696:	bdf0      	pop	{r4, r5, r6, r7, pc}

08090698 <__hexdig_fun>:
 8090698:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 809069c:	2b09      	cmp	r3, #9
 809069e:	d801      	bhi.n	80906a4 <__hexdig_fun+0xc>
 80906a0:	3820      	subs	r0, #32
 80906a2:	e00a      	b.n	80906ba <__hexdig_fun+0x22>
 80906a4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80906a8:	2b05      	cmp	r3, #5
 80906aa:	d801      	bhi.n	80906b0 <__hexdig_fun+0x18>
 80906ac:	3847      	subs	r0, #71	; 0x47
 80906ae:	e004      	b.n	80906ba <__hexdig_fun+0x22>
 80906b0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80906b4:	2b05      	cmp	r3, #5
 80906b6:	d802      	bhi.n	80906be <__hexdig_fun+0x26>
 80906b8:	3827      	subs	r0, #39	; 0x27
 80906ba:	b2c0      	uxtb	r0, r0
 80906bc:	4770      	bx	lr
 80906be:	2000      	movs	r0, #0
 80906c0:	4770      	bx	lr

080906c2 <__gethex>:
 80906c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80906c6:	b08b      	sub	sp, #44	; 0x2c
 80906c8:	468a      	mov	sl, r1
 80906ca:	4690      	mov	r8, r2
 80906cc:	9306      	str	r3, [sp, #24]
 80906ce:	9002      	str	r0, [sp, #8]
 80906d0:	f7fe f802 	bl	808e6d8 <_localeconv_r>
 80906d4:	6803      	ldr	r3, [r0, #0]
 80906d6:	f04f 0b00 	mov.w	fp, #0
 80906da:	4618      	mov	r0, r3
 80906dc:	9303      	str	r3, [sp, #12]
 80906de:	f7fe fd99 	bl	808f214 <strlen>
 80906e2:	9b03      	ldr	r3, [sp, #12]
 80906e4:	9001      	str	r0, [sp, #4]
 80906e6:	4403      	add	r3, r0
 80906e8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80906ec:	9307      	str	r3, [sp, #28]
 80906ee:	f8da 3000 	ldr.w	r3, [sl]
 80906f2:	3302      	adds	r3, #2
 80906f4:	461f      	mov	r7, r3
 80906f6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80906fa:	2830      	cmp	r0, #48	; 0x30
 80906fc:	d102      	bne.n	8090704 <__gethex+0x42>
 80906fe:	f10b 0b01 	add.w	fp, fp, #1
 8090702:	e7f7      	b.n	80906f4 <__gethex+0x32>
 8090704:	f7ff ffc8 	bl	8090698 <__hexdig_fun>
 8090708:	4604      	mov	r4, r0
 809070a:	b9e0      	cbnz	r0, 8090746 <__gethex+0x84>
 809070c:	9a01      	ldr	r2, [sp, #4]
 809070e:	9903      	ldr	r1, [sp, #12]
 8090710:	4638      	mov	r0, r7
 8090712:	f7fe fd87 	bl	808f224 <strncmp>
 8090716:	2800      	cmp	r0, #0
 8090718:	d134      	bne.n	8090784 <__gethex+0xc2>
 809071a:	9b01      	ldr	r3, [sp, #4]
 809071c:	5cf8      	ldrb	r0, [r7, r3]
 809071e:	18fe      	adds	r6, r7, r3
 8090720:	f7ff ffba 	bl	8090698 <__hexdig_fun>
 8090724:	b380      	cbz	r0, 8090788 <__gethex+0xc6>
 8090726:	4633      	mov	r3, r6
 8090728:	7818      	ldrb	r0, [r3, #0]
 809072a:	461f      	mov	r7, r3
 809072c:	2830      	cmp	r0, #48	; 0x30
 809072e:	f103 0301 	add.w	r3, r3, #1
 8090732:	d0f9      	beq.n	8090728 <__gethex+0x66>
 8090734:	f7ff ffb0 	bl	8090698 <__hexdig_fun>
 8090738:	fab0 f580 	clz	r5, r0
 809073c:	4634      	mov	r4, r6
 809073e:	096d      	lsrs	r5, r5, #5
 8090740:	f04f 0b01 	mov.w	fp, #1
 8090744:	e001      	b.n	809074a <__gethex+0x88>
 8090746:	2500      	movs	r5, #0
 8090748:	462c      	mov	r4, r5
 809074a:	463a      	mov	r2, r7
 809074c:	4616      	mov	r6, r2
 809074e:	7830      	ldrb	r0, [r6, #0]
 8090750:	3201      	adds	r2, #1
 8090752:	f7ff ffa1 	bl	8090698 <__hexdig_fun>
 8090756:	2800      	cmp	r0, #0
 8090758:	d1f8      	bne.n	809074c <__gethex+0x8a>
 809075a:	9a01      	ldr	r2, [sp, #4]
 809075c:	9903      	ldr	r1, [sp, #12]
 809075e:	4630      	mov	r0, r6
 8090760:	f7fe fd60 	bl	808f224 <strncmp>
 8090764:	b950      	cbnz	r0, 809077c <__gethex+0xba>
 8090766:	b954      	cbnz	r4, 809077e <__gethex+0xbc>
 8090768:	9b01      	ldr	r3, [sp, #4]
 809076a:	18f4      	adds	r4, r6, r3
 809076c:	4622      	mov	r2, r4
 809076e:	4616      	mov	r6, r2
 8090770:	7830      	ldrb	r0, [r6, #0]
 8090772:	3201      	adds	r2, #1
 8090774:	f7ff ff90 	bl	8090698 <__hexdig_fun>
 8090778:	2800      	cmp	r0, #0
 809077a:	d1f8      	bne.n	809076e <__gethex+0xac>
 809077c:	b134      	cbz	r4, 809078c <__gethex+0xca>
 809077e:	1ba4      	subs	r4, r4, r6
 8090780:	00a4      	lsls	r4, r4, #2
 8090782:	e003      	b.n	809078c <__gethex+0xca>
 8090784:	463e      	mov	r6, r7
 8090786:	e000      	b.n	809078a <__gethex+0xc8>
 8090788:	4604      	mov	r4, r0
 809078a:	2501      	movs	r5, #1
 809078c:	7833      	ldrb	r3, [r6, #0]
 809078e:	2b50      	cmp	r3, #80	; 0x50
 8090790:	d001      	beq.n	8090796 <__gethex+0xd4>
 8090792:	2b70      	cmp	r3, #112	; 0x70
 8090794:	d12a      	bne.n	80907ec <__gethex+0x12a>
 8090796:	7873      	ldrb	r3, [r6, #1]
 8090798:	2b2b      	cmp	r3, #43	; 0x2b
 809079a:	d008      	beq.n	80907ae <__gethex+0xec>
 809079c:	2b2d      	cmp	r3, #45	; 0x2d
 809079e:	d003      	beq.n	80907a8 <__gethex+0xe6>
 80907a0:	1c71      	adds	r1, r6, #1
 80907a2:	f04f 0900 	mov.w	r9, #0
 80907a6:	e005      	b.n	80907b4 <__gethex+0xf2>
 80907a8:	f04f 0901 	mov.w	r9, #1
 80907ac:	e001      	b.n	80907b2 <__gethex+0xf0>
 80907ae:	f04f 0900 	mov.w	r9, #0
 80907b2:	1cb1      	adds	r1, r6, #2
 80907b4:	7808      	ldrb	r0, [r1, #0]
 80907b6:	f7ff ff6f 	bl	8090698 <__hexdig_fun>
 80907ba:	1e43      	subs	r3, r0, #1
 80907bc:	b2db      	uxtb	r3, r3
 80907be:	2b18      	cmp	r3, #24
 80907c0:	d814      	bhi.n	80907ec <__gethex+0x12a>
 80907c2:	f1a0 0210 	sub.w	r2, r0, #16
 80907c6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80907ca:	f7ff ff65 	bl	8090698 <__hexdig_fun>
 80907ce:	1e43      	subs	r3, r0, #1
 80907d0:	b2db      	uxtb	r3, r3
 80907d2:	2b18      	cmp	r3, #24
 80907d4:	d804      	bhi.n	80907e0 <__gethex+0x11e>
 80907d6:	230a      	movs	r3, #10
 80907d8:	fb03 0202 	mla	r2, r3, r2, r0
 80907dc:	3a10      	subs	r2, #16
 80907de:	e7f2      	b.n	80907c6 <__gethex+0x104>
 80907e0:	f1b9 0f00 	cmp.w	r9, #0
 80907e4:	d000      	beq.n	80907e8 <__gethex+0x126>
 80907e6:	4252      	negs	r2, r2
 80907e8:	4414      	add	r4, r2
 80907ea:	e000      	b.n	80907ee <__gethex+0x12c>
 80907ec:	4631      	mov	r1, r6
 80907ee:	f8ca 1000 	str.w	r1, [sl]
 80907f2:	b12d      	cbz	r5, 8090800 <__gethex+0x13e>
 80907f4:	f1bb 0f00 	cmp.w	fp, #0
 80907f8:	bf14      	ite	ne
 80907fa:	2000      	movne	r0, #0
 80907fc:	2006      	moveq	r0, #6
 80907fe:	e17c      	b.n	8090afa <__gethex+0x438>
 8090800:	4629      	mov	r1, r5
 8090802:	1bf3      	subs	r3, r6, r7
 8090804:	3b01      	subs	r3, #1
 8090806:	2b07      	cmp	r3, #7
 8090808:	dd02      	ble.n	8090810 <__gethex+0x14e>
 809080a:	3101      	adds	r1, #1
 809080c:	105b      	asrs	r3, r3, #1
 809080e:	e7fa      	b.n	8090806 <__gethex+0x144>
 8090810:	9802      	ldr	r0, [sp, #8]
 8090812:	f000 fb0b 	bl	8090e2c <_Balloc>
 8090816:	f04f 0900 	mov.w	r9, #0
 809081a:	4605      	mov	r5, r0
 809081c:	46cb      	mov	fp, r9
 809081e:	9b01      	ldr	r3, [sp, #4]
 8090820:	f100 0a14 	add.w	sl, r0, #20
 8090824:	f1c3 0301 	rsb	r3, r3, #1
 8090828:	f8cd a010 	str.w	sl, [sp, #16]
 809082c:	9308      	str	r3, [sp, #32]
 809082e:	42b7      	cmp	r7, r6
 8090830:	d22f      	bcs.n	8090892 <__gethex+0x1d0>
 8090832:	1e73      	subs	r3, r6, #1
 8090834:	9305      	str	r3, [sp, #20]
 8090836:	9a07      	ldr	r2, [sp, #28]
 8090838:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 809083c:	4293      	cmp	r3, r2
 809083e:	d00b      	beq.n	8090858 <__gethex+0x196>
 8090840:	f1bb 0f20 	cmp.w	fp, #32
 8090844:	d116      	bne.n	8090874 <__gethex+0x1b2>
 8090846:	9b04      	ldr	r3, [sp, #16]
 8090848:	f8c3 9000 	str.w	r9, [r3]
 809084c:	3304      	adds	r3, #4
 809084e:	f04f 0900 	mov.w	r9, #0
 8090852:	9304      	str	r3, [sp, #16]
 8090854:	46cb      	mov	fp, r9
 8090856:	e00d      	b.n	8090874 <__gethex+0x1b2>
 8090858:	9b05      	ldr	r3, [sp, #20]
 809085a:	9a08      	ldr	r2, [sp, #32]
 809085c:	4413      	add	r3, r2
 809085e:	429f      	cmp	r7, r3
 8090860:	d8ee      	bhi.n	8090840 <__gethex+0x17e>
 8090862:	4618      	mov	r0, r3
 8090864:	9a01      	ldr	r2, [sp, #4]
 8090866:	9903      	ldr	r1, [sp, #12]
 8090868:	9309      	str	r3, [sp, #36]	; 0x24
 809086a:	f7fe fcdb 	bl	808f224 <strncmp>
 809086e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8090870:	b168      	cbz	r0, 809088e <__gethex+0x1cc>
 8090872:	e7e5      	b.n	8090840 <__gethex+0x17e>
 8090874:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8090878:	f7ff ff0e 	bl	8090698 <__hexdig_fun>
 809087c:	f000 000f 	and.w	r0, r0, #15
 8090880:	fa00 f00b 	lsl.w	r0, r0, fp
 8090884:	9b05      	ldr	r3, [sp, #20]
 8090886:	ea49 0900 	orr.w	r9, r9, r0
 809088a:	f10b 0b04 	add.w	fp, fp, #4
 809088e:	461e      	mov	r6, r3
 8090890:	e7cd      	b.n	809082e <__gethex+0x16c>
 8090892:	9804      	ldr	r0, [sp, #16]
 8090894:	f840 9b04 	str.w	r9, [r0], #4
 8090898:	ebca 0000 	rsb	r0, sl, r0
 809089c:	1080      	asrs	r0, r0, #2
 809089e:	6128      	str	r0, [r5, #16]
 80908a0:	0147      	lsls	r7, r0, #5
 80908a2:	4648      	mov	r0, r9
 80908a4:	f000 fb87 	bl	8090fb6 <__hi0bits>
 80908a8:	f8d8 6000 	ldr.w	r6, [r8]
 80908ac:	1a38      	subs	r0, r7, r0
 80908ae:	42b0      	cmp	r0, r6
 80908b0:	dd26      	ble.n	8090900 <__gethex+0x23e>
 80908b2:	1b87      	subs	r7, r0, r6
 80908b4:	4639      	mov	r1, r7
 80908b6:	4628      	mov	r0, r5
 80908b8:	f000 fe7f 	bl	80915ba <__any_on>
 80908bc:	b1c8      	cbz	r0, 80908f2 <__gethex+0x230>
 80908be:	1e7b      	subs	r3, r7, #1
 80908c0:	1159      	asrs	r1, r3, #5
 80908c2:	f003 021f 	and.w	r2, r3, #31
 80908c6:	f04f 0901 	mov.w	r9, #1
 80908ca:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80908ce:	fa09 f202 	lsl.w	r2, r9, r2
 80908d2:	420a      	tst	r2, r1
 80908d4:	d00e      	beq.n	80908f4 <__gethex+0x232>
 80908d6:	454b      	cmp	r3, r9
 80908d8:	dc02      	bgt.n	80908e0 <__gethex+0x21e>
 80908da:	f04f 0902 	mov.w	r9, #2
 80908de:	e009      	b.n	80908f4 <__gethex+0x232>
 80908e0:	1eb9      	subs	r1, r7, #2
 80908e2:	4628      	mov	r0, r5
 80908e4:	f000 fe69 	bl	80915ba <__any_on>
 80908e8:	2800      	cmp	r0, #0
 80908ea:	d0f6      	beq.n	80908da <__gethex+0x218>
 80908ec:	f04f 0903 	mov.w	r9, #3
 80908f0:	e000      	b.n	80908f4 <__gethex+0x232>
 80908f2:	4681      	mov	r9, r0
 80908f4:	4639      	mov	r1, r7
 80908f6:	4628      	mov	r0, r5
 80908f8:	f7ff fe98 	bl	809062c <rshift>
 80908fc:	443c      	add	r4, r7
 80908fe:	e00c      	b.n	809091a <__gethex+0x258>
 8090900:	da09      	bge.n	8090916 <__gethex+0x254>
 8090902:	1a37      	subs	r7, r6, r0
 8090904:	4629      	mov	r1, r5
 8090906:	463a      	mov	r2, r7
 8090908:	9802      	ldr	r0, [sp, #8]
 809090a:	f000 fc89 	bl	8091220 <__lshift>
 809090e:	4605      	mov	r5, r0
 8090910:	1be4      	subs	r4, r4, r7
 8090912:	f100 0a14 	add.w	sl, r0, #20
 8090916:	f04f 0900 	mov.w	r9, #0
 809091a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 809091e:	429c      	cmp	r4, r3
 8090920:	dd08      	ble.n	8090934 <__gethex+0x272>
 8090922:	9802      	ldr	r0, [sp, #8]
 8090924:	4629      	mov	r1, r5
 8090926:	f000 fab6 	bl	8090e96 <_Bfree>
 809092a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 809092c:	2300      	movs	r3, #0
 809092e:	6013      	str	r3, [r2, #0]
 8090930:	20a3      	movs	r0, #163	; 0xa3
 8090932:	e0e2      	b.n	8090afa <__gethex+0x438>
 8090934:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8090938:	4284      	cmp	r4, r0
 809093a:	da53      	bge.n	80909e4 <__gethex+0x322>
 809093c:	1b04      	subs	r4, r0, r4
 809093e:	42a6      	cmp	r6, r4
 8090940:	dc2e      	bgt.n	80909a0 <__gethex+0x2de>
 8090942:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8090946:	2b02      	cmp	r3, #2
 8090948:	d01a      	beq.n	8090980 <__gethex+0x2be>
 809094a:	2b03      	cmp	r3, #3
 809094c:	d01c      	beq.n	8090988 <__gethex+0x2c6>
 809094e:	2b01      	cmp	r3, #1
 8090950:	d11d      	bne.n	809098e <__gethex+0x2cc>
 8090952:	42a6      	cmp	r6, r4
 8090954:	d11b      	bne.n	809098e <__gethex+0x2cc>
 8090956:	2e01      	cmp	r6, #1
 8090958:	dc0b      	bgt.n	8090972 <__gethex+0x2b0>
 809095a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 809095e:	9a06      	ldr	r2, [sp, #24]
 8090960:	2062      	movs	r0, #98	; 0x62
 8090962:	6013      	str	r3, [r2, #0]
 8090964:	2301      	movs	r3, #1
 8090966:	612b      	str	r3, [r5, #16]
 8090968:	f8ca 3000 	str.w	r3, [sl]
 809096c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 809096e:	601d      	str	r5, [r3, #0]
 8090970:	e0c3      	b.n	8090afa <__gethex+0x438>
 8090972:	1e71      	subs	r1, r6, #1
 8090974:	4628      	mov	r0, r5
 8090976:	f000 fe20 	bl	80915ba <__any_on>
 809097a:	2800      	cmp	r0, #0
 809097c:	d1ed      	bne.n	809095a <__gethex+0x298>
 809097e:	e006      	b.n	809098e <__gethex+0x2cc>
 8090980:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8090982:	2b00      	cmp	r3, #0
 8090984:	d0e9      	beq.n	809095a <__gethex+0x298>
 8090986:	e002      	b.n	809098e <__gethex+0x2cc>
 8090988:	9b15      	ldr	r3, [sp, #84]	; 0x54
 809098a:	2b00      	cmp	r3, #0
 809098c:	d1e5      	bne.n	809095a <__gethex+0x298>
 809098e:	9802      	ldr	r0, [sp, #8]
 8090990:	4629      	mov	r1, r5
 8090992:	f000 fa80 	bl	8090e96 <_Bfree>
 8090996:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8090998:	2300      	movs	r3, #0
 809099a:	6013      	str	r3, [r2, #0]
 809099c:	2050      	movs	r0, #80	; 0x50
 809099e:	e0ac      	b.n	8090afa <__gethex+0x438>
 80909a0:	1e67      	subs	r7, r4, #1
 80909a2:	f1b9 0f00 	cmp.w	r9, #0
 80909a6:	d106      	bne.n	80909b6 <__gethex+0x2f4>
 80909a8:	b13f      	cbz	r7, 80909ba <__gethex+0x2f8>
 80909aa:	4639      	mov	r1, r7
 80909ac:	4628      	mov	r0, r5
 80909ae:	f000 fe04 	bl	80915ba <__any_on>
 80909b2:	4681      	mov	r9, r0
 80909b4:	e001      	b.n	80909ba <__gethex+0x2f8>
 80909b6:	f04f 0901 	mov.w	r9, #1
 80909ba:	117a      	asrs	r2, r7, #5
 80909bc:	2301      	movs	r3, #1
 80909be:	f007 071f 	and.w	r7, r7, #31
 80909c2:	fa03 f707 	lsl.w	r7, r3, r7
 80909c6:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 80909ca:	4621      	mov	r1, r4
 80909cc:	421f      	tst	r7, r3
 80909ce:	4628      	mov	r0, r5
 80909d0:	bf18      	it	ne
 80909d2:	f049 0902 	orrne.w	r9, r9, #2
 80909d6:	1b36      	subs	r6, r6, r4
 80909d8:	f7ff fe28 	bl	809062c <rshift>
 80909dc:	2702      	movs	r7, #2
 80909de:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80909e2:	e000      	b.n	80909e6 <__gethex+0x324>
 80909e4:	2701      	movs	r7, #1
 80909e6:	f1b9 0f00 	cmp.w	r9, #0
 80909ea:	f000 8081 	beq.w	8090af0 <__gethex+0x42e>
 80909ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80909f2:	2b02      	cmp	r3, #2
 80909f4:	d00e      	beq.n	8090a14 <__gethex+0x352>
 80909f6:	2b03      	cmp	r3, #3
 80909f8:	d010      	beq.n	8090a1c <__gethex+0x35a>
 80909fa:	2b01      	cmp	r3, #1
 80909fc:	d176      	bne.n	8090aec <__gethex+0x42a>
 80909fe:	f019 0f02 	tst.w	r9, #2
 8090a02:	d073      	beq.n	8090aec <__gethex+0x42a>
 8090a04:	f8da 0000 	ldr.w	r0, [sl]
 8090a08:	ea49 0900 	orr.w	r9, r9, r0
 8090a0c:	f019 0f01 	tst.w	r9, #1
 8090a10:	d107      	bne.n	8090a22 <__gethex+0x360>
 8090a12:	e06b      	b.n	8090aec <__gethex+0x42a>
 8090a14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8090a16:	f1c3 0301 	rsb	r3, r3, #1
 8090a1a:	9315      	str	r3, [sp, #84]	; 0x54
 8090a1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8090a1e:	2b00      	cmp	r3, #0
 8090a20:	d064      	beq.n	8090aec <__gethex+0x42a>
 8090a22:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8090a26:	f105 0314 	add.w	r3, r5, #20
 8090a2a:	ea4f 098a 	mov.w	r9, sl, lsl #2
 8090a2e:	eb03 0109 	add.w	r1, r3, r9
 8090a32:	2000      	movs	r0, #0
 8090a34:	681a      	ldr	r2, [r3, #0]
 8090a36:	f1b2 3fff 	cmp.w	r2, #4294967295
 8090a3a:	d002      	beq.n	8090a42 <__gethex+0x380>
 8090a3c:	3201      	adds	r2, #1
 8090a3e:	601a      	str	r2, [r3, #0]
 8090a40:	e020      	b.n	8090a84 <__gethex+0x3c2>
 8090a42:	f843 0b04 	str.w	r0, [r3], #4
 8090a46:	4299      	cmp	r1, r3
 8090a48:	d8f4      	bhi.n	8090a34 <__gethex+0x372>
 8090a4a:	68ab      	ldr	r3, [r5, #8]
 8090a4c:	459a      	cmp	sl, r3
 8090a4e:	db12      	blt.n	8090a76 <__gethex+0x3b4>
 8090a50:	6869      	ldr	r1, [r5, #4]
 8090a52:	9802      	ldr	r0, [sp, #8]
 8090a54:	3101      	adds	r1, #1
 8090a56:	f000 f9e9 	bl	8090e2c <_Balloc>
 8090a5a:	4683      	mov	fp, r0
 8090a5c:	692a      	ldr	r2, [r5, #16]
 8090a5e:	f105 010c 	add.w	r1, r5, #12
 8090a62:	3202      	adds	r2, #2
 8090a64:	0092      	lsls	r2, r2, #2
 8090a66:	300c      	adds	r0, #12
 8090a68:	f7fd fe49 	bl	808e6fe <memcpy>
 8090a6c:	4629      	mov	r1, r5
 8090a6e:	9802      	ldr	r0, [sp, #8]
 8090a70:	f000 fa11 	bl	8090e96 <_Bfree>
 8090a74:	465d      	mov	r5, fp
 8090a76:	692b      	ldr	r3, [r5, #16]
 8090a78:	1c5a      	adds	r2, r3, #1
 8090a7a:	612a      	str	r2, [r5, #16]
 8090a7c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8090a80:	2201      	movs	r2, #1
 8090a82:	615a      	str	r2, [r3, #20]
 8090a84:	2f02      	cmp	r7, #2
 8090a86:	f105 0214 	add.w	r2, r5, #20
 8090a8a:	d111      	bne.n	8090ab0 <__gethex+0x3ee>
 8090a8c:	f8d8 3000 	ldr.w	r3, [r8]
 8090a90:	3b01      	subs	r3, #1
 8090a92:	429e      	cmp	r6, r3
 8090a94:	d127      	bne.n	8090ae6 <__gethex+0x424>
 8090a96:	1171      	asrs	r1, r6, #5
 8090a98:	2301      	movs	r3, #1
 8090a9a:	f006 061f 	and.w	r6, r6, #31
 8090a9e:	fa03 f606 	lsl.w	r6, r3, r6
 8090aa2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8090aa6:	421e      	tst	r6, r3
 8090aa8:	bf0c      	ite	eq
 8090aaa:	2702      	moveq	r7, #2
 8090aac:	2701      	movne	r7, #1
 8090aae:	e01a      	b.n	8090ae6 <__gethex+0x424>
 8090ab0:	692b      	ldr	r3, [r5, #16]
 8090ab2:	459a      	cmp	sl, r3
 8090ab4:	da0a      	bge.n	8090acc <__gethex+0x40a>
 8090ab6:	2101      	movs	r1, #1
 8090ab8:	4628      	mov	r0, r5
 8090aba:	f7ff fdb7 	bl	809062c <rshift>
 8090abe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8090ac2:	3401      	adds	r4, #1
 8090ac4:	429c      	cmp	r4, r3
 8090ac6:	f73f af2c 	bgt.w	8090922 <__gethex+0x260>
 8090aca:	e00b      	b.n	8090ae4 <__gethex+0x422>
 8090acc:	f016 061f 	ands.w	r6, r6, #31
 8090ad0:	d008      	beq.n	8090ae4 <__gethex+0x422>
 8090ad2:	4491      	add	r9, r2
 8090ad4:	f859 0c04 	ldr.w	r0, [r9, #-4]
 8090ad8:	f000 fa6d 	bl	8090fb6 <__hi0bits>
 8090adc:	f1c6 0620 	rsb	r6, r6, #32
 8090ae0:	42b0      	cmp	r0, r6
 8090ae2:	dbe8      	blt.n	8090ab6 <__gethex+0x3f4>
 8090ae4:	2701      	movs	r7, #1
 8090ae6:	f047 0720 	orr.w	r7, r7, #32
 8090aea:	e001      	b.n	8090af0 <__gethex+0x42e>
 8090aec:	f047 0710 	orr.w	r7, r7, #16
 8090af0:	4638      	mov	r0, r7
 8090af2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8090af4:	601d      	str	r5, [r3, #0]
 8090af6:	9b06      	ldr	r3, [sp, #24]
 8090af8:	601c      	str	r4, [r3, #0]
 8090afa:	b00b      	add	sp, #44	; 0x2c
 8090afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08090b00 <L_shift>:
 8090b00:	f1c2 0208 	rsb	r2, r2, #8
 8090b04:	0092      	lsls	r2, r2, #2
 8090b06:	b570      	push	{r4, r5, r6, lr}
 8090b08:	f1c2 0620 	rsb	r6, r2, #32
 8090b0c:	6843      	ldr	r3, [r0, #4]
 8090b0e:	6805      	ldr	r5, [r0, #0]
 8090b10:	fa03 f406 	lsl.w	r4, r3, r6
 8090b14:	432c      	orrs	r4, r5
 8090b16:	40d3      	lsrs	r3, r2
 8090b18:	6004      	str	r4, [r0, #0]
 8090b1a:	f840 3f04 	str.w	r3, [r0, #4]!
 8090b1e:	4288      	cmp	r0, r1
 8090b20:	d3f4      	bcc.n	8090b0c <L_shift+0xc>
 8090b22:	bd70      	pop	{r4, r5, r6, pc}

08090b24 <__match>:
 8090b24:	b530      	push	{r4, r5, lr}
 8090b26:	6803      	ldr	r3, [r0, #0]
 8090b28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8090b2c:	3301      	adds	r3, #1
 8090b2e:	b14c      	cbz	r4, 8090b44 <__match+0x20>
 8090b30:	781a      	ldrb	r2, [r3, #0]
 8090b32:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8090b36:	2d19      	cmp	r5, #25
 8090b38:	bf98      	it	ls
 8090b3a:	3220      	addls	r2, #32
 8090b3c:	42a2      	cmp	r2, r4
 8090b3e:	d0f3      	beq.n	8090b28 <__match+0x4>
 8090b40:	2000      	movs	r0, #0
 8090b42:	bd30      	pop	{r4, r5, pc}
 8090b44:	6003      	str	r3, [r0, #0]
 8090b46:	2001      	movs	r0, #1
 8090b48:	bd30      	pop	{r4, r5, pc}

08090b4a <__hexnan>:
 8090b4a:	680b      	ldr	r3, [r1, #0]
 8090b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8090b50:	115e      	asrs	r6, r3, #5
 8090b52:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8090b56:	f013 031f 	ands.w	r3, r3, #31
 8090b5a:	bf18      	it	ne
 8090b5c:	3604      	addne	r6, #4
 8090b5e:	1f35      	subs	r5, r6, #4
 8090b60:	4617      	mov	r7, r2
 8090b62:	2200      	movs	r2, #0
 8090b64:	4682      	mov	sl, r0
 8090b66:	46a8      	mov	r8, r5
 8090b68:	462c      	mov	r4, r5
 8090b6a:	4691      	mov	r9, r2
 8090b6c:	b085      	sub	sp, #20
 8090b6e:	f8d0 b000 	ldr.w	fp, [r0]
 8090b72:	9301      	str	r3, [sp, #4]
 8090b74:	f846 2c04 	str.w	r2, [r6, #-4]
 8090b78:	9200      	str	r2, [sp, #0]
 8090b7a:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 8090b7e:	2900      	cmp	r1, #0
 8090b80:	d03c      	beq.n	8090bfc <__hexnan+0xb2>
 8090b82:	4608      	mov	r0, r1
 8090b84:	9203      	str	r2, [sp, #12]
 8090b86:	9102      	str	r1, [sp, #8]
 8090b88:	f7ff fd86 	bl	8090698 <__hexdig_fun>
 8090b8c:	9a03      	ldr	r2, [sp, #12]
 8090b8e:	bb00      	cbnz	r0, 8090bd2 <__hexnan+0x88>
 8090b90:	9902      	ldr	r1, [sp, #8]
 8090b92:	2920      	cmp	r1, #32
 8090b94:	d816      	bhi.n	8090bc4 <__hexnan+0x7a>
 8090b96:	9b00      	ldr	r3, [sp, #0]
 8090b98:	4599      	cmp	r9, r3
 8090b9a:	ddee      	ble.n	8090b7a <__hexnan+0x30>
 8090b9c:	4544      	cmp	r4, r8
 8090b9e:	d205      	bcs.n	8090bac <__hexnan+0x62>
 8090ba0:	2a07      	cmp	r2, #7
 8090ba2:	dc03      	bgt.n	8090bac <__hexnan+0x62>
 8090ba4:	4641      	mov	r1, r8
 8090ba6:	4620      	mov	r0, r4
 8090ba8:	f7ff ffaa 	bl	8090b00 <L_shift>
 8090bac:	42bc      	cmp	r4, r7
 8090bae:	d923      	bls.n	8090bf8 <__hexnan+0xae>
 8090bb0:	2300      	movs	r3, #0
 8090bb2:	f1a4 0804 	sub.w	r8, r4, #4
 8090bb6:	f844 3c04 	str.w	r3, [r4, #-4]
 8090bba:	f8cd 9000 	str.w	r9, [sp]
 8090bbe:	4644      	mov	r4, r8
 8090bc0:	461a      	mov	r2, r3
 8090bc2:	e7da      	b.n	8090b7a <__hexnan+0x30>
 8090bc4:	2929      	cmp	r1, #41	; 0x29
 8090bc6:	d148      	bne.n	8090c5a <__hexnan+0x110>
 8090bc8:	f10b 0301 	add.w	r3, fp, #1
 8090bcc:	f8ca 3000 	str.w	r3, [sl]
 8090bd0:	e014      	b.n	8090bfc <__hexnan+0xb2>
 8090bd2:	3201      	adds	r2, #1
 8090bd4:	2a08      	cmp	r2, #8
 8090bd6:	f109 0901 	add.w	r9, r9, #1
 8090bda:	dd06      	ble.n	8090bea <__hexnan+0xa0>
 8090bdc:	42bc      	cmp	r4, r7
 8090bde:	d9cc      	bls.n	8090b7a <__hexnan+0x30>
 8090be0:	2300      	movs	r3, #0
 8090be2:	f844 3c04 	str.w	r3, [r4, #-4]
 8090be6:	2201      	movs	r2, #1
 8090be8:	3c04      	subs	r4, #4
 8090bea:	6821      	ldr	r1, [r4, #0]
 8090bec:	f000 000f 	and.w	r0, r0, #15
 8090bf0:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 8090bf4:	6020      	str	r0, [r4, #0]
 8090bf6:	e7c0      	b.n	8090b7a <__hexnan+0x30>
 8090bf8:	2208      	movs	r2, #8
 8090bfa:	e7be      	b.n	8090b7a <__hexnan+0x30>
 8090bfc:	f1b9 0f00 	cmp.w	r9, #0
 8090c00:	d02b      	beq.n	8090c5a <__hexnan+0x110>
 8090c02:	4544      	cmp	r4, r8
 8090c04:	d205      	bcs.n	8090c12 <__hexnan+0xc8>
 8090c06:	2a07      	cmp	r2, #7
 8090c08:	dc03      	bgt.n	8090c12 <__hexnan+0xc8>
 8090c0a:	4641      	mov	r1, r8
 8090c0c:	4620      	mov	r0, r4
 8090c0e:	f7ff ff77 	bl	8090b00 <L_shift>
 8090c12:	42bc      	cmp	r4, r7
 8090c14:	d90c      	bls.n	8090c30 <__hexnan+0xe6>
 8090c16:	463b      	mov	r3, r7
 8090c18:	f854 2b04 	ldr.w	r2, [r4], #4
 8090c1c:	42a5      	cmp	r5, r4
 8090c1e:	f843 2b04 	str.w	r2, [r3], #4
 8090c22:	d2f9      	bcs.n	8090c18 <__hexnan+0xce>
 8090c24:	2200      	movs	r2, #0
 8090c26:	f843 2b04 	str.w	r2, [r3], #4
 8090c2a:	429d      	cmp	r5, r3
 8090c2c:	d2fb      	bcs.n	8090c26 <__hexnan+0xdc>
 8090c2e:	e00b      	b.n	8090c48 <__hexnan+0xfe>
 8090c30:	9b01      	ldr	r3, [sp, #4]
 8090c32:	b14b      	cbz	r3, 8090c48 <__hexnan+0xfe>
 8090c34:	f1c3 0220 	rsb	r2, r3, #32
 8090c38:	f04f 33ff 	mov.w	r3, #4294967295
 8090c3c:	40d3      	lsrs	r3, r2
 8090c3e:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8090c42:	4013      	ands	r3, r2
 8090c44:	f846 3c04 	str.w	r3, [r6, #-4]
 8090c48:	682b      	ldr	r3, [r5, #0]
 8090c4a:	b943      	cbnz	r3, 8090c5e <__hexnan+0x114>
 8090c4c:	42bd      	cmp	r5, r7
 8090c4e:	d102      	bne.n	8090c56 <__hexnan+0x10c>
 8090c50:	2301      	movs	r3, #1
 8090c52:	602b      	str	r3, [r5, #0]
 8090c54:	e003      	b.n	8090c5e <__hexnan+0x114>
 8090c56:	3d04      	subs	r5, #4
 8090c58:	e7f6      	b.n	8090c48 <__hexnan+0xfe>
 8090c5a:	2004      	movs	r0, #4
 8090c5c:	e000      	b.n	8090c60 <__hexnan+0x116>
 8090c5e:	2005      	movs	r0, #5
 8090c60:	b005      	add	sp, #20
 8090c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08090c68 <_findenv_r>:
 8090c68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8090c6c:	4607      	mov	r7, r0
 8090c6e:	468b      	mov	fp, r1
 8090c70:	4690      	mov	r8, r2
 8090c72:	f000 fcd2 	bl	809161a <__env_lock>
 8090c76:	4b19      	ldr	r3, [pc, #100]	; (8090cdc <_findenv_r+0x74>)
 8090c78:	681d      	ldr	r5, [r3, #0]
 8090c7a:	469a      	mov	sl, r3
 8090c7c:	b13d      	cbz	r5, 8090c8e <_findenv_r+0x26>
 8090c7e:	465c      	mov	r4, fp
 8090c80:	4623      	mov	r3, r4
 8090c82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8090c86:	b142      	cbz	r2, 8090c9a <_findenv_r+0x32>
 8090c88:	2a3d      	cmp	r2, #61	; 0x3d
 8090c8a:	461c      	mov	r4, r3
 8090c8c:	d1f8      	bne.n	8090c80 <_findenv_r+0x18>
 8090c8e:	4638      	mov	r0, r7
 8090c90:	f000 fcc4 	bl	809161c <__env_unlock>
 8090c94:	2000      	movs	r0, #0
 8090c96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8090c9a:	ebcb 0404 	rsb	r4, fp, r4
 8090c9e:	46a9      	mov	r9, r5
 8090ca0:	f859 0b04 	ldr.w	r0, [r9], #4
 8090ca4:	2800      	cmp	r0, #0
 8090ca6:	d0f2      	beq.n	8090c8e <_findenv_r+0x26>
 8090ca8:	4622      	mov	r2, r4
 8090caa:	4659      	mov	r1, fp
 8090cac:	f7fe faba 	bl	808f224 <strncmp>
 8090cb0:	b988      	cbnz	r0, 8090cd6 <_findenv_r+0x6e>
 8090cb2:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8090cb6:	191e      	adds	r6, r3, r4
 8090cb8:	5d1b      	ldrb	r3, [r3, r4]
 8090cba:	2b3d      	cmp	r3, #61	; 0x3d
 8090cbc:	d10b      	bne.n	8090cd6 <_findenv_r+0x6e>
 8090cbe:	f8da 3000 	ldr.w	r3, [sl]
 8090cc2:	4638      	mov	r0, r7
 8090cc4:	1aed      	subs	r5, r5, r3
 8090cc6:	10ad      	asrs	r5, r5, #2
 8090cc8:	f8c8 5000 	str.w	r5, [r8]
 8090ccc:	f000 fca6 	bl	809161c <__env_unlock>
 8090cd0:	1c70      	adds	r0, r6, #1
 8090cd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8090cd6:	464d      	mov	r5, r9
 8090cd8:	e7e1      	b.n	8090c9e <_findenv_r+0x36>
 8090cda:	bf00      	nop
 8090cdc:	200001cc 	.word	0x200001cc

08090ce0 <_getenv_r>:
 8090ce0:	b507      	push	{r0, r1, r2, lr}
 8090ce2:	aa01      	add	r2, sp, #4
 8090ce4:	f7ff ffc0 	bl	8090c68 <_findenv_r>
 8090ce8:	b003      	add	sp, #12
 8090cea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08090cf0 <__gettzinfo>:
 8090cf0:	4800      	ldr	r0, [pc, #0]	; (8090cf4 <__gettzinfo+0x4>)
 8090cf2:	4770      	bx	lr
 8090cf4:	2000018c 	.word	0x2000018c

08090cf8 <gmtime_r>:
 8090cf8:	6802      	ldr	r2, [r0, #0]
 8090cfa:	4b46      	ldr	r3, [pc, #280]	; (8090e14 <gmtime_r+0x11c>)
 8090cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8090cfe:	fb92 f4f3 	sdiv	r4, r2, r3
 8090d02:	fb03 2214 	mls	r2, r3, r4, r2
 8090d06:	2a00      	cmp	r2, #0
 8090d08:	bfbc      	itt	lt
 8090d0a:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8090d0e:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8090d12:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8090d16:	fb92 f3f0 	sdiv	r3, r2, r0
 8090d1a:	fb00 2213 	mls	r2, r0, r3, r2
 8090d1e:	f04f 003c 	mov.w	r0, #60	; 0x3c
 8090d22:	608b      	str	r3, [r1, #8]
 8090d24:	fb92 f3f0 	sdiv	r3, r2, r0
 8090d28:	fb00 2213 	mls	r2, r0, r3, r2
 8090d2c:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 8090d30:	bfac      	ite	ge
 8090d32:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 8090d36:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 8090d3a:	604b      	str	r3, [r1, #4]
 8090d3c:	600a      	str	r2, [r1, #0]
 8090d3e:	2307      	movs	r3, #7
 8090d40:	1ce2      	adds	r2, r4, #3
 8090d42:	fb92 f3f3 	sdiv	r3, r2, r3
 8090d46:	4d34      	ldr	r5, [pc, #208]	; (8090e18 <gmtime_r+0x120>)
 8090d48:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8090d4c:	fb94 f5f5 	sdiv	r5, r4, r5
 8090d50:	1ad3      	subs	r3, r2, r3
 8090d52:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8090d56:	f240 57b4 	movw	r7, #1460	; 0x5b4
 8090d5a:	618b      	str	r3, [r1, #24]
 8090d5c:	4b2f      	ldr	r3, [pc, #188]	; (8090e1c <gmtime_r+0x124>)
 8090d5e:	4830      	ldr	r0, [pc, #192]	; (8090e20 <gmtime_r+0x128>)
 8090d60:	fb03 4405 	mla	r4, r3, r5, r4
 8090d64:	fbb4 f2f2 	udiv	r2, r4, r2
 8090d68:	fbb4 f3f7 	udiv	r3, r4, r7
 8090d6c:	fbb4 f0f0 	udiv	r0, r4, r0
 8090d70:	4422      	add	r2, r4
 8090d72:	1ad2      	subs	r2, r2, r3
 8090d74:	f648 6694 	movw	r6, #36500	; 0x8e94
 8090d78:	1a13      	subs	r3, r2, r0
 8090d7a:	f240 126d 	movw	r2, #365	; 0x16d
 8090d7e:	fbb3 f6f6 	udiv	r6, r3, r6
 8090d82:	fbb3 f0f2 	udiv	r0, r3, r2
 8090d86:	fbb3 f3f7 	udiv	r3, r3, r7
 8090d8a:	4434      	add	r4, r6
 8090d8c:	1ae3      	subs	r3, r4, r3
 8090d8e:	fb02 3310 	mls	r3, r2, r0, r3
 8090d92:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8090d96:	2499      	movs	r4, #153	; 0x99
 8090d98:	3202      	adds	r2, #2
 8090d9a:	fbb2 f2f4 	udiv	r2, r2, r4
 8090d9e:	4354      	muls	r4, r2
 8090da0:	1ca6      	adds	r6, r4, #2
 8090da2:	2405      	movs	r4, #5
 8090da4:	fbb6 f4f4 	udiv	r4, r6, r4
 8090da8:	2a0a      	cmp	r2, #10
 8090daa:	bf34      	ite	cc
 8090dac:	2602      	movcc	r6, #2
 8090dae:	f06f 0609 	mvncs.w	r6, #9
 8090db2:	4416      	add	r6, r2
 8090db4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8090db8:	fb02 0505 	mla	r5, r2, r5, r0
 8090dbc:	1c5f      	adds	r7, r3, #1
 8090dbe:	2e01      	cmp	r6, #1
 8090dc0:	bf98      	it	ls
 8090dc2:	3501      	addls	r5, #1
 8090dc4:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8090dc8:	eba7 0704 	sub.w	r7, r7, r4
 8090dcc:	d302      	bcc.n	8090dd4 <gmtime_r+0xdc>
 8090dce:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 8090dd2:	e014      	b.n	8090dfe <gmtime_r+0x106>
 8090dd4:	0782      	lsls	r2, r0, #30
 8090dd6:	d105      	bne.n	8090de4 <gmtime_r+0xec>
 8090dd8:	2464      	movs	r4, #100	; 0x64
 8090dda:	fbb0 f2f4 	udiv	r2, r0, r4
 8090dde:	fb04 0212 	mls	r2, r4, r2, r0
 8090de2:	b94a      	cbnz	r2, 8090df8 <gmtime_r+0x100>
 8090de4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8090de8:	fbb0 f4f2 	udiv	r4, r0, r2
 8090dec:	fb02 0014 	mls	r0, r2, r4, r0
 8090df0:	fab0 f280 	clz	r2, r0
 8090df4:	0952      	lsrs	r2, r2, #5
 8090df6:	e000      	b.n	8090dfa <gmtime_r+0x102>
 8090df8:	2201      	movs	r2, #1
 8090dfa:	333b      	adds	r3, #59	; 0x3b
 8090dfc:	441a      	add	r2, r3
 8090dfe:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8090e02:	2300      	movs	r3, #0
 8090e04:	61ca      	str	r2, [r1, #28]
 8090e06:	614d      	str	r5, [r1, #20]
 8090e08:	610e      	str	r6, [r1, #16]
 8090e0a:	60cf      	str	r7, [r1, #12]
 8090e0c:	620b      	str	r3, [r1, #32]
 8090e0e:	4608      	mov	r0, r1
 8090e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8090e12:	bf00      	nop
 8090e14:	00015180 	.word	0x00015180
 8090e18:	00023ab1 	.word	0x00023ab1
 8090e1c:	fffdc54f 	.word	0xfffdc54f
 8090e20:	00023ab0 	.word	0x00023ab0

08090e24 <labs>:
 8090e24:	2800      	cmp	r0, #0
 8090e26:	bfb8      	it	lt
 8090e28:	4240      	neglt	r0, r0
 8090e2a:	4770      	bx	lr

08090e2c <_Balloc>:
 8090e2c:	b570      	push	{r4, r5, r6, lr}
 8090e2e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8090e30:	4604      	mov	r4, r0
 8090e32:	460e      	mov	r6, r1
 8090e34:	b93d      	cbnz	r5, 8090e46 <_Balloc+0x1a>
 8090e36:	2010      	movs	r0, #16
 8090e38:	f7f9 fd06 	bl	808a848 <malloc>
 8090e3c:	6260      	str	r0, [r4, #36]	; 0x24
 8090e3e:	6045      	str	r5, [r0, #4]
 8090e40:	6085      	str	r5, [r0, #8]
 8090e42:	6005      	str	r5, [r0, #0]
 8090e44:	60c5      	str	r5, [r0, #12]
 8090e46:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8090e48:	68eb      	ldr	r3, [r5, #12]
 8090e4a:	b143      	cbz	r3, 8090e5e <_Balloc+0x32>
 8090e4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8090e4e:	68db      	ldr	r3, [r3, #12]
 8090e50:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8090e54:	b178      	cbz	r0, 8090e76 <_Balloc+0x4a>
 8090e56:	6802      	ldr	r2, [r0, #0]
 8090e58:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8090e5c:	e017      	b.n	8090e8e <_Balloc+0x62>
 8090e5e:	2221      	movs	r2, #33	; 0x21
 8090e60:	2104      	movs	r1, #4
 8090e62:	4620      	mov	r0, r4
 8090e64:	f000 fbcb 	bl	80915fe <_calloc_r>
 8090e68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8090e6a:	60e8      	str	r0, [r5, #12]
 8090e6c:	68db      	ldr	r3, [r3, #12]
 8090e6e:	2b00      	cmp	r3, #0
 8090e70:	d1ec      	bne.n	8090e4c <_Balloc+0x20>
 8090e72:	2000      	movs	r0, #0
 8090e74:	bd70      	pop	{r4, r5, r6, pc}
 8090e76:	2101      	movs	r1, #1
 8090e78:	fa01 f506 	lsl.w	r5, r1, r6
 8090e7c:	1d6a      	adds	r2, r5, #5
 8090e7e:	0092      	lsls	r2, r2, #2
 8090e80:	4620      	mov	r0, r4
 8090e82:	f000 fbbc 	bl	80915fe <_calloc_r>
 8090e86:	2800      	cmp	r0, #0
 8090e88:	d0f3      	beq.n	8090e72 <_Balloc+0x46>
 8090e8a:	6046      	str	r6, [r0, #4]
 8090e8c:	6085      	str	r5, [r0, #8]
 8090e8e:	2300      	movs	r3, #0
 8090e90:	6103      	str	r3, [r0, #16]
 8090e92:	60c3      	str	r3, [r0, #12]
 8090e94:	bd70      	pop	{r4, r5, r6, pc}

08090e96 <_Bfree>:
 8090e96:	b570      	push	{r4, r5, r6, lr}
 8090e98:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8090e9a:	4606      	mov	r6, r0
 8090e9c:	460d      	mov	r5, r1
 8090e9e:	b93c      	cbnz	r4, 8090eb0 <_Bfree+0x1a>
 8090ea0:	2010      	movs	r0, #16
 8090ea2:	f7f9 fcd1 	bl	808a848 <malloc>
 8090ea6:	6270      	str	r0, [r6, #36]	; 0x24
 8090ea8:	6044      	str	r4, [r0, #4]
 8090eaa:	6084      	str	r4, [r0, #8]
 8090eac:	6004      	str	r4, [r0, #0]
 8090eae:	60c4      	str	r4, [r0, #12]
 8090eb0:	b13d      	cbz	r5, 8090ec2 <_Bfree+0x2c>
 8090eb2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8090eb4:	686a      	ldr	r2, [r5, #4]
 8090eb6:	68db      	ldr	r3, [r3, #12]
 8090eb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8090ebc:	6029      	str	r1, [r5, #0]
 8090ebe:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8090ec2:	bd70      	pop	{r4, r5, r6, pc}

08090ec4 <__multadd>:
 8090ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8090ec8:	4606      	mov	r6, r0
 8090eca:	460c      	mov	r4, r1
 8090ecc:	690d      	ldr	r5, [r1, #16]
 8090ece:	461f      	mov	r7, r3
 8090ed0:	f101 0e14 	add.w	lr, r1, #20
 8090ed4:	2300      	movs	r3, #0
 8090ed6:	f8de 0000 	ldr.w	r0, [lr]
 8090eda:	3301      	adds	r3, #1
 8090edc:	b281      	uxth	r1, r0
 8090ede:	fb02 7101 	mla	r1, r2, r1, r7
 8090ee2:	0c00      	lsrs	r0, r0, #16
 8090ee4:	0c0f      	lsrs	r7, r1, #16
 8090ee6:	fb02 7000 	mla	r0, r2, r0, r7
 8090eea:	b289      	uxth	r1, r1
 8090eec:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8090ef0:	429d      	cmp	r5, r3
 8090ef2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8090ef6:	f84e 1b04 	str.w	r1, [lr], #4
 8090efa:	dcec      	bgt.n	8090ed6 <__multadd+0x12>
 8090efc:	b1d7      	cbz	r7, 8090f34 <__multadd+0x70>
 8090efe:	68a3      	ldr	r3, [r4, #8]
 8090f00:	429d      	cmp	r5, r3
 8090f02:	db12      	blt.n	8090f2a <__multadd+0x66>
 8090f04:	6861      	ldr	r1, [r4, #4]
 8090f06:	4630      	mov	r0, r6
 8090f08:	3101      	adds	r1, #1
 8090f0a:	f7ff ff8f 	bl	8090e2c <_Balloc>
 8090f0e:	4680      	mov	r8, r0
 8090f10:	6922      	ldr	r2, [r4, #16]
 8090f12:	f104 010c 	add.w	r1, r4, #12
 8090f16:	3202      	adds	r2, #2
 8090f18:	0092      	lsls	r2, r2, #2
 8090f1a:	300c      	adds	r0, #12
 8090f1c:	f7fd fbef 	bl	808e6fe <memcpy>
 8090f20:	4621      	mov	r1, r4
 8090f22:	4630      	mov	r0, r6
 8090f24:	f7ff ffb7 	bl	8090e96 <_Bfree>
 8090f28:	4644      	mov	r4, r8
 8090f2a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8090f2e:	3501      	adds	r5, #1
 8090f30:	615f      	str	r7, [r3, #20]
 8090f32:	6125      	str	r5, [r4, #16]
 8090f34:	4620      	mov	r0, r4
 8090f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08090f3a <__s2b>:
 8090f3a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8090f3e:	4606      	mov	r6, r0
 8090f40:	4615      	mov	r5, r2
 8090f42:	461f      	mov	r7, r3
 8090f44:	2209      	movs	r2, #9
 8090f46:	3308      	adds	r3, #8
 8090f48:	460c      	mov	r4, r1
 8090f4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8090f4e:	2100      	movs	r1, #0
 8090f50:	2201      	movs	r2, #1
 8090f52:	429a      	cmp	r2, r3
 8090f54:	da02      	bge.n	8090f5c <__s2b+0x22>
 8090f56:	0052      	lsls	r2, r2, #1
 8090f58:	3101      	adds	r1, #1
 8090f5a:	e7fa      	b.n	8090f52 <__s2b+0x18>
 8090f5c:	4630      	mov	r0, r6
 8090f5e:	f7ff ff65 	bl	8090e2c <_Balloc>
 8090f62:	9b08      	ldr	r3, [sp, #32]
 8090f64:	2d09      	cmp	r5, #9
 8090f66:	6143      	str	r3, [r0, #20]
 8090f68:	f04f 0301 	mov.w	r3, #1
 8090f6c:	6103      	str	r3, [r0, #16]
 8090f6e:	dd11      	ble.n	8090f94 <__s2b+0x5a>
 8090f70:	f104 0809 	add.w	r8, r4, #9
 8090f74:	46c1      	mov	r9, r8
 8090f76:	442c      	add	r4, r5
 8090f78:	f819 3b01 	ldrb.w	r3, [r9], #1
 8090f7c:	4601      	mov	r1, r0
 8090f7e:	3b30      	subs	r3, #48	; 0x30
 8090f80:	220a      	movs	r2, #10
 8090f82:	4630      	mov	r0, r6
 8090f84:	f7ff ff9e 	bl	8090ec4 <__multadd>
 8090f88:	45a1      	cmp	r9, r4
 8090f8a:	d1f5      	bne.n	8090f78 <__s2b+0x3e>
 8090f8c:	eb08 0405 	add.w	r4, r8, r5
 8090f90:	3c08      	subs	r4, #8
 8090f92:	e001      	b.n	8090f98 <__s2b+0x5e>
 8090f94:	340a      	adds	r4, #10
 8090f96:	2509      	movs	r5, #9
 8090f98:	1b2d      	subs	r5, r5, r4
 8090f9a:	1963      	adds	r3, r4, r5
 8090f9c:	429f      	cmp	r7, r3
 8090f9e:	dd08      	ble.n	8090fb2 <__s2b+0x78>
 8090fa0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8090fa4:	4601      	mov	r1, r0
 8090fa6:	3b30      	subs	r3, #48	; 0x30
 8090fa8:	220a      	movs	r2, #10
 8090faa:	4630      	mov	r0, r6
 8090fac:	f7ff ff8a 	bl	8090ec4 <__multadd>
 8090fb0:	e7f3      	b.n	8090f9a <__s2b+0x60>
 8090fb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08090fb6 <__hi0bits>:
 8090fb6:	0c03      	lsrs	r3, r0, #16
 8090fb8:	041b      	lsls	r3, r3, #16
 8090fba:	b913      	cbnz	r3, 8090fc2 <__hi0bits+0xc>
 8090fbc:	0400      	lsls	r0, r0, #16
 8090fbe:	2310      	movs	r3, #16
 8090fc0:	e000      	b.n	8090fc4 <__hi0bits+0xe>
 8090fc2:	2300      	movs	r3, #0
 8090fc4:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8090fc8:	bf04      	itt	eq
 8090fca:	0200      	lsleq	r0, r0, #8
 8090fcc:	3308      	addeq	r3, #8
 8090fce:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8090fd2:	bf04      	itt	eq
 8090fd4:	0100      	lsleq	r0, r0, #4
 8090fd6:	3304      	addeq	r3, #4
 8090fd8:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8090fdc:	bf04      	itt	eq
 8090fde:	0080      	lsleq	r0, r0, #2
 8090fe0:	3302      	addeq	r3, #2
 8090fe2:	2800      	cmp	r0, #0
 8090fe4:	db03      	blt.n	8090fee <__hi0bits+0x38>
 8090fe6:	0042      	lsls	r2, r0, #1
 8090fe8:	d503      	bpl.n	8090ff2 <__hi0bits+0x3c>
 8090fea:	1c58      	adds	r0, r3, #1
 8090fec:	4770      	bx	lr
 8090fee:	4618      	mov	r0, r3
 8090ff0:	4770      	bx	lr
 8090ff2:	2020      	movs	r0, #32
 8090ff4:	4770      	bx	lr

08090ff6 <__lo0bits>:
 8090ff6:	6803      	ldr	r3, [r0, #0]
 8090ff8:	f013 0207 	ands.w	r2, r3, #7
 8090ffc:	d00b      	beq.n	8091016 <__lo0bits+0x20>
 8090ffe:	07d9      	lsls	r1, r3, #31
 8091000:	d422      	bmi.n	8091048 <__lo0bits+0x52>
 8091002:	079a      	lsls	r2, r3, #30
 8091004:	bf4b      	itete	mi
 8091006:	085b      	lsrmi	r3, r3, #1
 8091008:	089b      	lsrpl	r3, r3, #2
 809100a:	6003      	strmi	r3, [r0, #0]
 809100c:	6003      	strpl	r3, [r0, #0]
 809100e:	bf4c      	ite	mi
 8091010:	2001      	movmi	r0, #1
 8091012:	2002      	movpl	r0, #2
 8091014:	4770      	bx	lr
 8091016:	b299      	uxth	r1, r3
 8091018:	b909      	cbnz	r1, 809101e <__lo0bits+0x28>
 809101a:	0c1b      	lsrs	r3, r3, #16
 809101c:	2210      	movs	r2, #16
 809101e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8091022:	bf04      	itt	eq
 8091024:	0a1b      	lsreq	r3, r3, #8
 8091026:	3208      	addeq	r2, #8
 8091028:	0719      	lsls	r1, r3, #28
 809102a:	bf04      	itt	eq
 809102c:	091b      	lsreq	r3, r3, #4
 809102e:	3204      	addeq	r2, #4
 8091030:	0799      	lsls	r1, r3, #30
 8091032:	bf04      	itt	eq
 8091034:	089b      	lsreq	r3, r3, #2
 8091036:	3202      	addeq	r2, #2
 8091038:	07d9      	lsls	r1, r3, #31
 809103a:	d402      	bmi.n	8091042 <__lo0bits+0x4c>
 809103c:	085b      	lsrs	r3, r3, #1
 809103e:	d005      	beq.n	809104c <__lo0bits+0x56>
 8091040:	3201      	adds	r2, #1
 8091042:	6003      	str	r3, [r0, #0]
 8091044:	4610      	mov	r0, r2
 8091046:	4770      	bx	lr
 8091048:	2000      	movs	r0, #0
 809104a:	4770      	bx	lr
 809104c:	2020      	movs	r0, #32
 809104e:	4770      	bx	lr

08091050 <__i2b>:
 8091050:	b510      	push	{r4, lr}
 8091052:	460c      	mov	r4, r1
 8091054:	2101      	movs	r1, #1
 8091056:	f7ff fee9 	bl	8090e2c <_Balloc>
 809105a:	2201      	movs	r2, #1
 809105c:	6144      	str	r4, [r0, #20]
 809105e:	6102      	str	r2, [r0, #16]
 8091060:	bd10      	pop	{r4, pc}

08091062 <__multiply>:
 8091062:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8091066:	4614      	mov	r4, r2
 8091068:	690a      	ldr	r2, [r1, #16]
 809106a:	6923      	ldr	r3, [r4, #16]
 809106c:	4688      	mov	r8, r1
 809106e:	429a      	cmp	r2, r3
 8091070:	bfbe      	ittt	lt
 8091072:	460b      	movlt	r3, r1
 8091074:	46a0      	movlt	r8, r4
 8091076:	461c      	movlt	r4, r3
 8091078:	f8d8 7010 	ldr.w	r7, [r8, #16]
 809107c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8091080:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8091084:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8091088:	eb07 0609 	add.w	r6, r7, r9
 809108c:	429e      	cmp	r6, r3
 809108e:	bfc8      	it	gt
 8091090:	3101      	addgt	r1, #1
 8091092:	f7ff fecb 	bl	8090e2c <_Balloc>
 8091096:	f100 0514 	add.w	r5, r0, #20
 809109a:	462b      	mov	r3, r5
 809109c:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 80910a0:	2200      	movs	r2, #0
 80910a2:	4563      	cmp	r3, ip
 80910a4:	d202      	bcs.n	80910ac <__multiply+0x4a>
 80910a6:	f843 2b04 	str.w	r2, [r3], #4
 80910aa:	e7fa      	b.n	80910a2 <__multiply+0x40>
 80910ac:	f104 0214 	add.w	r2, r4, #20
 80910b0:	f108 0114 	add.w	r1, r8, #20
 80910b4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80910b8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80910bc:	9300      	str	r3, [sp, #0]
 80910be:	9b00      	ldr	r3, [sp, #0]
 80910c0:	9201      	str	r2, [sp, #4]
 80910c2:	4293      	cmp	r3, r2
 80910c4:	d957      	bls.n	8091176 <__multiply+0x114>
 80910c6:	f8b2 b000 	ldrh.w	fp, [r2]
 80910ca:	f1bb 0f00 	cmp.w	fp, #0
 80910ce:	d023      	beq.n	8091118 <__multiply+0xb6>
 80910d0:	4689      	mov	r9, r1
 80910d2:	46ae      	mov	lr, r5
 80910d4:	f04f 0800 	mov.w	r8, #0
 80910d8:	f859 4b04 	ldr.w	r4, [r9], #4
 80910dc:	f8be a000 	ldrh.w	sl, [lr]
 80910e0:	b2a3      	uxth	r3, r4
 80910e2:	fb0b a303 	mla	r3, fp, r3, sl
 80910e6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80910ea:	f8de 4000 	ldr.w	r4, [lr]
 80910ee:	4443      	add	r3, r8
 80910f0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80910f4:	fb0b 840a 	mla	r4, fp, sl, r8
 80910f8:	46f2      	mov	sl, lr
 80910fa:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80910fe:	b29b      	uxth	r3, r3
 8091100:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8091104:	454f      	cmp	r7, r9
 8091106:	ea4f 4814 	mov.w	r8, r4, lsr #16
 809110a:	f84a 3b04 	str.w	r3, [sl], #4
 809110e:	d901      	bls.n	8091114 <__multiply+0xb2>
 8091110:	46d6      	mov	lr, sl
 8091112:	e7e1      	b.n	80910d8 <__multiply+0x76>
 8091114:	f8ce 8004 	str.w	r8, [lr, #4]
 8091118:	9b01      	ldr	r3, [sp, #4]
 809111a:	3204      	adds	r2, #4
 809111c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8091120:	f1ba 0f00 	cmp.w	sl, #0
 8091124:	d021      	beq.n	809116a <__multiply+0x108>
 8091126:	462c      	mov	r4, r5
 8091128:	4689      	mov	r9, r1
 809112a:	682b      	ldr	r3, [r5, #0]
 809112c:	f04f 0800 	mov.w	r8, #0
 8091130:	f8b9 e000 	ldrh.w	lr, [r9]
 8091134:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 8091138:	b29b      	uxth	r3, r3
 809113a:	fb0a be0e 	mla	lr, sl, lr, fp
 809113e:	46a3      	mov	fp, r4
 8091140:	44f0      	add	r8, lr
 8091142:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8091146:	f84b 3b04 	str.w	r3, [fp], #4
 809114a:	f859 3b04 	ldr.w	r3, [r9], #4
 809114e:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 8091152:	0c1b      	lsrs	r3, r3, #16
 8091154:	fb0a e303 	mla	r3, sl, r3, lr
 8091158:	454f      	cmp	r7, r9
 809115a:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 809115e:	ea4f 4813 	mov.w	r8, r3, lsr #16
 8091162:	d901      	bls.n	8091168 <__multiply+0x106>
 8091164:	465c      	mov	r4, fp
 8091166:	e7e3      	b.n	8091130 <__multiply+0xce>
 8091168:	6063      	str	r3, [r4, #4]
 809116a:	3504      	adds	r5, #4
 809116c:	e7a7      	b.n	80910be <__multiply+0x5c>
 809116e:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 8091172:	b913      	cbnz	r3, 809117a <__multiply+0x118>
 8091174:	3e01      	subs	r6, #1
 8091176:	2e00      	cmp	r6, #0
 8091178:	dcf9      	bgt.n	809116e <__multiply+0x10c>
 809117a:	6106      	str	r6, [r0, #16]
 809117c:	b003      	add	sp, #12
 809117e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08091184 <__pow5mult>:
 8091184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8091188:	4615      	mov	r5, r2
 809118a:	f012 0203 	ands.w	r2, r2, #3
 809118e:	4606      	mov	r6, r0
 8091190:	460f      	mov	r7, r1
 8091192:	d007      	beq.n	80911a4 <__pow5mult+0x20>
 8091194:	4c21      	ldr	r4, [pc, #132]	; (809121c <__pow5mult+0x98>)
 8091196:	3a01      	subs	r2, #1
 8091198:	2300      	movs	r3, #0
 809119a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 809119e:	f7ff fe91 	bl	8090ec4 <__multadd>
 80911a2:	4607      	mov	r7, r0
 80911a4:	10ad      	asrs	r5, r5, #2
 80911a6:	d036      	beq.n	8091216 <__pow5mult+0x92>
 80911a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80911aa:	b93c      	cbnz	r4, 80911bc <__pow5mult+0x38>
 80911ac:	2010      	movs	r0, #16
 80911ae:	f7f9 fb4b 	bl	808a848 <malloc>
 80911b2:	6270      	str	r0, [r6, #36]	; 0x24
 80911b4:	6044      	str	r4, [r0, #4]
 80911b6:	6084      	str	r4, [r0, #8]
 80911b8:	6004      	str	r4, [r0, #0]
 80911ba:	60c4      	str	r4, [r0, #12]
 80911bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80911c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80911c4:	b94c      	cbnz	r4, 80911da <__pow5mult+0x56>
 80911c6:	f240 2171 	movw	r1, #625	; 0x271
 80911ca:	4630      	mov	r0, r6
 80911cc:	f7ff ff40 	bl	8091050 <__i2b>
 80911d0:	4604      	mov	r4, r0
 80911d2:	2300      	movs	r3, #0
 80911d4:	f8c8 0008 	str.w	r0, [r8, #8]
 80911d8:	6003      	str	r3, [r0, #0]
 80911da:	f04f 0800 	mov.w	r8, #0
 80911de:	07eb      	lsls	r3, r5, #31
 80911e0:	d50a      	bpl.n	80911f8 <__pow5mult+0x74>
 80911e2:	4639      	mov	r1, r7
 80911e4:	4622      	mov	r2, r4
 80911e6:	4630      	mov	r0, r6
 80911e8:	f7ff ff3b 	bl	8091062 <__multiply>
 80911ec:	4681      	mov	r9, r0
 80911ee:	4639      	mov	r1, r7
 80911f0:	4630      	mov	r0, r6
 80911f2:	f7ff fe50 	bl	8090e96 <_Bfree>
 80911f6:	464f      	mov	r7, r9
 80911f8:	106d      	asrs	r5, r5, #1
 80911fa:	d00c      	beq.n	8091216 <__pow5mult+0x92>
 80911fc:	6820      	ldr	r0, [r4, #0]
 80911fe:	b108      	cbz	r0, 8091204 <__pow5mult+0x80>
 8091200:	4604      	mov	r4, r0
 8091202:	e7ec      	b.n	80911de <__pow5mult+0x5a>
 8091204:	4622      	mov	r2, r4
 8091206:	4621      	mov	r1, r4
 8091208:	4630      	mov	r0, r6
 809120a:	f7ff ff2a 	bl	8091062 <__multiply>
 809120e:	6020      	str	r0, [r4, #0]
 8091210:	f8c0 8000 	str.w	r8, [r0]
 8091214:	e7f4      	b.n	8091200 <__pow5mult+0x7c>
 8091216:	4638      	mov	r0, r7
 8091218:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 809121c:	080949d8 	.word	0x080949d8

08091220 <__lshift>:
 8091220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8091224:	460c      	mov	r4, r1
 8091226:	4607      	mov	r7, r0
 8091228:	4691      	mov	r9, r2
 809122a:	6926      	ldr	r6, [r4, #16]
 809122c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8091230:	4456      	add	r6, sl
 8091232:	6849      	ldr	r1, [r1, #4]
 8091234:	68a3      	ldr	r3, [r4, #8]
 8091236:	1c75      	adds	r5, r6, #1
 8091238:	42ab      	cmp	r3, r5
 809123a:	da02      	bge.n	8091242 <__lshift+0x22>
 809123c:	3101      	adds	r1, #1
 809123e:	005b      	lsls	r3, r3, #1
 8091240:	e7fa      	b.n	8091238 <__lshift+0x18>
 8091242:	4638      	mov	r0, r7
 8091244:	f7ff fdf2 	bl	8090e2c <_Balloc>
 8091248:	2300      	movs	r3, #0
 809124a:	4680      	mov	r8, r0
 809124c:	461a      	mov	r2, r3
 809124e:	f100 0114 	add.w	r1, r0, #20
 8091252:	4553      	cmp	r3, sl
 8091254:	da03      	bge.n	809125e <__lshift+0x3e>
 8091256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 809125a:	3301      	adds	r3, #1
 809125c:	e7f9      	b.n	8091252 <__lshift+0x32>
 809125e:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8091262:	6920      	ldr	r0, [r4, #16]
 8091264:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8091268:	f019 091f 	ands.w	r9, r9, #31
 809126c:	f104 0114 	add.w	r1, r4, #20
 8091270:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8091274:	d014      	beq.n	80912a0 <__lshift+0x80>
 8091276:	f1c9 0c20 	rsb	ip, r9, #32
 809127a:	2200      	movs	r2, #0
 809127c:	6808      	ldr	r0, [r1, #0]
 809127e:	469a      	mov	sl, r3
 8091280:	fa00 f009 	lsl.w	r0, r0, r9
 8091284:	4302      	orrs	r2, r0
 8091286:	f843 2b04 	str.w	r2, [r3], #4
 809128a:	f851 2b04 	ldr.w	r2, [r1], #4
 809128e:	458e      	cmp	lr, r1
 8091290:	fa22 f20c 	lsr.w	r2, r2, ip
 8091294:	d8f2      	bhi.n	809127c <__lshift+0x5c>
 8091296:	f8ca 2004 	str.w	r2, [sl, #4]
 809129a:	b142      	cbz	r2, 80912ae <__lshift+0x8e>
 809129c:	1cb5      	adds	r5, r6, #2
 809129e:	e006      	b.n	80912ae <__lshift+0x8e>
 80912a0:	3b04      	subs	r3, #4
 80912a2:	f851 2b04 	ldr.w	r2, [r1], #4
 80912a6:	458e      	cmp	lr, r1
 80912a8:	f843 2f04 	str.w	r2, [r3, #4]!
 80912ac:	d8f9      	bhi.n	80912a2 <__lshift+0x82>
 80912ae:	3d01      	subs	r5, #1
 80912b0:	4638      	mov	r0, r7
 80912b2:	f8c8 5010 	str.w	r5, [r8, #16]
 80912b6:	4621      	mov	r1, r4
 80912b8:	f7ff fded 	bl	8090e96 <_Bfree>
 80912bc:	4640      	mov	r0, r8
 80912be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080912c2 <__mcmp>:
 80912c2:	6903      	ldr	r3, [r0, #16]
 80912c4:	690a      	ldr	r2, [r1, #16]
 80912c6:	b510      	push	{r4, lr}
 80912c8:	1a9b      	subs	r3, r3, r2
 80912ca:	d111      	bne.n	80912f0 <__mcmp+0x2e>
 80912cc:	0092      	lsls	r2, r2, #2
 80912ce:	3014      	adds	r0, #20
 80912d0:	3114      	adds	r1, #20
 80912d2:	1883      	adds	r3, r0, r2
 80912d4:	440a      	add	r2, r1
 80912d6:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 80912da:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80912de:	428c      	cmp	r4, r1
 80912e0:	d002      	beq.n	80912e8 <__mcmp+0x26>
 80912e2:	d307      	bcc.n	80912f4 <__mcmp+0x32>
 80912e4:	2001      	movs	r0, #1
 80912e6:	bd10      	pop	{r4, pc}
 80912e8:	4298      	cmp	r0, r3
 80912ea:	d3f4      	bcc.n	80912d6 <__mcmp+0x14>
 80912ec:	2000      	movs	r0, #0
 80912ee:	bd10      	pop	{r4, pc}
 80912f0:	4618      	mov	r0, r3
 80912f2:	bd10      	pop	{r4, pc}
 80912f4:	f04f 30ff 	mov.w	r0, #4294967295
 80912f8:	bd10      	pop	{r4, pc}

080912fa <__mdiff>:
 80912fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80912fe:	460c      	mov	r4, r1
 8091300:	4607      	mov	r7, r0
 8091302:	4611      	mov	r1, r2
 8091304:	4620      	mov	r0, r4
 8091306:	4615      	mov	r5, r2
 8091308:	f7ff ffdb 	bl	80912c2 <__mcmp>
 809130c:	1e06      	subs	r6, r0, #0
 809130e:	d108      	bne.n	8091322 <__mdiff+0x28>
 8091310:	4631      	mov	r1, r6
 8091312:	4638      	mov	r0, r7
 8091314:	f7ff fd8a 	bl	8090e2c <_Balloc>
 8091318:	2301      	movs	r3, #1
 809131a:	6103      	str	r3, [r0, #16]
 809131c:	6146      	str	r6, [r0, #20]
 809131e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8091322:	bfbc      	itt	lt
 8091324:	4623      	movlt	r3, r4
 8091326:	462c      	movlt	r4, r5
 8091328:	4638      	mov	r0, r7
 809132a:	6861      	ldr	r1, [r4, #4]
 809132c:	bfba      	itte	lt
 809132e:	461d      	movlt	r5, r3
 8091330:	2601      	movlt	r6, #1
 8091332:	2600      	movge	r6, #0
 8091334:	f7ff fd7a 	bl	8090e2c <_Balloc>
 8091338:	692b      	ldr	r3, [r5, #16]
 809133a:	60c6      	str	r6, [r0, #12]
 809133c:	6926      	ldr	r6, [r4, #16]
 809133e:	f105 0914 	add.w	r9, r5, #20
 8091342:	f104 0114 	add.w	r1, r4, #20
 8091346:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 809134a:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 809134e:	f100 0514 	add.w	r5, r0, #20
 8091352:	f04f 0c00 	mov.w	ip, #0
 8091356:	f851 2b04 	ldr.w	r2, [r1], #4
 809135a:	f859 4b04 	ldr.w	r4, [r9], #4
 809135e:	b293      	uxth	r3, r2
 8091360:	449c      	add	ip, r3
 8091362:	b2a3      	uxth	r3, r4
 8091364:	0c24      	lsrs	r4, r4, #16
 8091366:	ebc3 030c 	rsb	r3, r3, ip
 809136a:	ebc4 4212 	rsb	r2, r4, r2, lsr #16
 809136e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8091372:	b29b      	uxth	r3, r3
 8091374:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8091378:	45c8      	cmp	r8, r9
 809137a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 809137e:	468e      	mov	lr, r1
 8091380:	f845 2b04 	str.w	r2, [r5], #4
 8091384:	d8e7      	bhi.n	8091356 <__mdiff+0x5c>
 8091386:	45be      	cmp	lr, r7
 8091388:	d20e      	bcs.n	80913a8 <__mdiff+0xae>
 809138a:	f85e 1b04 	ldr.w	r1, [lr], #4
 809138e:	b28a      	uxth	r2, r1
 8091390:	4462      	add	r2, ip
 8091392:	1413      	asrs	r3, r2, #16
 8091394:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 8091398:	b292      	uxth	r2, r2
 809139a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 809139e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80913a2:	f845 2b04 	str.w	r2, [r5], #4
 80913a6:	e7ee      	b.n	8091386 <__mdiff+0x8c>
 80913a8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80913ac:	b90b      	cbnz	r3, 80913b2 <__mdiff+0xb8>
 80913ae:	3e01      	subs	r6, #1
 80913b0:	e7fa      	b.n	80913a8 <__mdiff+0xae>
 80913b2:	6106      	str	r6, [r0, #16]
 80913b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080913b8 <__ulp>:
 80913b8:	4b10      	ldr	r3, [pc, #64]	; (80913fc <__ulp+0x44>)
 80913ba:	400b      	ands	r3, r1
 80913bc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80913c0:	2b00      	cmp	r3, #0
 80913c2:	dd02      	ble.n	80913ca <__ulp+0x12>
 80913c4:	2000      	movs	r0, #0
 80913c6:	4619      	mov	r1, r3
 80913c8:	4770      	bx	lr
 80913ca:	425b      	negs	r3, r3
 80913cc:	151b      	asrs	r3, r3, #20
 80913ce:	2b13      	cmp	r3, #19
 80913d0:	f04f 0000 	mov.w	r0, #0
 80913d4:	f04f 0100 	mov.w	r1, #0
 80913d8:	dc04      	bgt.n	80913e4 <__ulp+0x2c>
 80913da:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80913de:	fa42 f103 	asr.w	r1, r2, r3
 80913e2:	4770      	bx	lr
 80913e4:	3b14      	subs	r3, #20
 80913e6:	2b1e      	cmp	r3, #30
 80913e8:	f04f 0201 	mov.w	r2, #1
 80913ec:	bfce      	itee	gt
 80913ee:	4613      	movgt	r3, r2
 80913f0:	f1c3 031f 	rsble	r3, r3, #31
 80913f4:	fa02 f303 	lslle.w	r3, r2, r3
 80913f8:	4618      	mov	r0, r3
 80913fa:	4770      	bx	lr
 80913fc:	7ff00000 	.word	0x7ff00000

08091400 <__b2d>:
 8091400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8091402:	6905      	ldr	r5, [r0, #16]
 8091404:	f100 0614 	add.w	r6, r0, #20
 8091408:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 809140c:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8091410:	1f2f      	subs	r7, r5, #4
 8091412:	4620      	mov	r0, r4
 8091414:	f7ff fdcf 	bl	8090fb6 <__hi0bits>
 8091418:	f1c0 0320 	rsb	r3, r0, #32
 809141c:	280a      	cmp	r0, #10
 809141e:	600b      	str	r3, [r1, #0]
 8091420:	dc14      	bgt.n	809144c <__b2d+0x4c>
 8091422:	f1c0 0e0b 	rsb	lr, r0, #11
 8091426:	fa24 f10e 	lsr.w	r1, r4, lr
 809142a:	42be      	cmp	r6, r7
 809142c:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 8091430:	bf34      	ite	cc
 8091432:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8091436:	2100      	movcs	r1, #0
 8091438:	3015      	adds	r0, #21
 809143a:	fa04 f000 	lsl.w	r0, r4, r0
 809143e:	fa21 f10e 	lsr.w	r1, r1, lr
 8091442:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8091446:	ea40 0201 	orr.w	r2, r0, r1
 809144a:	e023      	b.n	8091494 <__b2d+0x94>
 809144c:	42be      	cmp	r6, r7
 809144e:	bf3a      	itte	cc
 8091450:	f1a5 0708 	subcc.w	r7, r5, #8
 8091454:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8091458:	2100      	movcs	r1, #0
 809145a:	380b      	subs	r0, #11
 809145c:	d015      	beq.n	809148a <__b2d+0x8a>
 809145e:	4084      	lsls	r4, r0
 8091460:	f1c0 0520 	rsb	r5, r0, #32
 8091464:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8091468:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 809146c:	42b7      	cmp	r7, r6
 809146e:	fa21 fe05 	lsr.w	lr, r1, r5
 8091472:	ea44 030e 	orr.w	r3, r4, lr
 8091476:	bf8c      	ite	hi
 8091478:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
 809147c:	2400      	movls	r4, #0
 809147e:	fa01 f000 	lsl.w	r0, r1, r0
 8091482:	40ec      	lsrs	r4, r5
 8091484:	ea40 0204 	orr.w	r2, r0, r4
 8091488:	e004      	b.n	8091494 <__b2d+0x94>
 809148a:	460a      	mov	r2, r1
 809148c:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8091490:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8091494:	4610      	mov	r0, r2
 8091496:	4619      	mov	r1, r3
 8091498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0809149a <__d2b>:
 809149a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 809149e:	461c      	mov	r4, r3
 80914a0:	2101      	movs	r1, #1
 80914a2:	4690      	mov	r8, r2
 80914a4:	9e08      	ldr	r6, [sp, #32]
 80914a6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80914a8:	f7ff fcc0 	bl	8090e2c <_Balloc>
 80914ac:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80914b0:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80914b4:	4607      	mov	r7, r0
 80914b6:	b10c      	cbz	r4, 80914bc <__d2b+0x22>
 80914b8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80914bc:	9201      	str	r2, [sp, #4]
 80914be:	f1b8 0f00 	cmp.w	r8, #0
 80914c2:	d019      	beq.n	80914f8 <__d2b+0x5e>
 80914c4:	a802      	add	r0, sp, #8
 80914c6:	f840 8d08 	str.w	r8, [r0, #-8]!
 80914ca:	f7ff fd94 	bl	8090ff6 <__lo0bits>
 80914ce:	9b00      	ldr	r3, [sp, #0]
 80914d0:	b148      	cbz	r0, 80914e6 <__d2b+0x4c>
 80914d2:	9a01      	ldr	r2, [sp, #4]
 80914d4:	f1c0 0120 	rsb	r1, r0, #32
 80914d8:	fa02 f101 	lsl.w	r1, r2, r1
 80914dc:	430b      	orrs	r3, r1
 80914de:	40c2      	lsrs	r2, r0
 80914e0:	617b      	str	r3, [r7, #20]
 80914e2:	9201      	str	r2, [sp, #4]
 80914e4:	e000      	b.n	80914e8 <__d2b+0x4e>
 80914e6:	617b      	str	r3, [r7, #20]
 80914e8:	9b01      	ldr	r3, [sp, #4]
 80914ea:	2b00      	cmp	r3, #0
 80914ec:	bf14      	ite	ne
 80914ee:	2102      	movne	r1, #2
 80914f0:	2101      	moveq	r1, #1
 80914f2:	61bb      	str	r3, [r7, #24]
 80914f4:	6139      	str	r1, [r7, #16]
 80914f6:	e007      	b.n	8091508 <__d2b+0x6e>
 80914f8:	a801      	add	r0, sp, #4
 80914fa:	f7ff fd7c 	bl	8090ff6 <__lo0bits>
 80914fe:	9b01      	ldr	r3, [sp, #4]
 8091500:	2101      	movs	r1, #1
 8091502:	617b      	str	r3, [r7, #20]
 8091504:	6139      	str	r1, [r7, #16]
 8091506:	3020      	adds	r0, #32
 8091508:	b134      	cbz	r4, 8091518 <__d2b+0x7e>
 809150a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 809150e:	4404      	add	r4, r0
 8091510:	6034      	str	r4, [r6, #0]
 8091512:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8091516:	e009      	b.n	809152c <__d2b+0x92>
 8091518:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 809151c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8091520:	6030      	str	r0, [r6, #0]
 8091522:	6918      	ldr	r0, [r3, #16]
 8091524:	f7ff fd47 	bl	8090fb6 <__hi0bits>
 8091528:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 809152c:	6028      	str	r0, [r5, #0]
 809152e:	4638      	mov	r0, r7
 8091530:	b002      	add	sp, #8
 8091532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08091536 <__ratio>:
 8091536:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 809153a:	4688      	mov	r8, r1
 809153c:	4669      	mov	r1, sp
 809153e:	4681      	mov	r9, r0
 8091540:	f7ff ff5e 	bl	8091400 <__b2d>
 8091544:	460d      	mov	r5, r1
 8091546:	4604      	mov	r4, r0
 8091548:	a901      	add	r1, sp, #4
 809154a:	4640      	mov	r0, r8
 809154c:	f7ff ff58 	bl	8091400 <__b2d>
 8091550:	460f      	mov	r7, r1
 8091552:	4606      	mov	r6, r0
 8091554:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8091558:	f8d8 2010 	ldr.w	r2, [r8, #16]
 809155c:	4620      	mov	r0, r4
 809155e:	1a9a      	subs	r2, r3, r2
 8091560:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8091564:	1ac9      	subs	r1, r1, r3
 8091566:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 809156a:	2b00      	cmp	r3, #0
 809156c:	bfcc      	ite	gt
 809156e:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 8091572:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
 8091576:	4632      	mov	r2, r6
 8091578:	463b      	mov	r3, r7
 809157a:	4629      	mov	r1, r5
 809157c:	f7fc f82e 	bl	808d5dc <__aeabi_ddiv>
 8091580:	b003      	add	sp, #12
 8091582:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08091586 <__copybits>:
 8091586:	3901      	subs	r1, #1
 8091588:	b510      	push	{r4, lr}
 809158a:	1149      	asrs	r1, r1, #5
 809158c:	6914      	ldr	r4, [r2, #16]
 809158e:	3101      	adds	r1, #1
 8091590:	f102 0314 	add.w	r3, r2, #20
 8091594:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8091598:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 809159c:	42a3      	cmp	r3, r4
 809159e:	4602      	mov	r2, r0
 80915a0:	d204      	bcs.n	80915ac <__copybits+0x26>
 80915a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80915a6:	f840 2b04 	str.w	r2, [r0], #4
 80915aa:	e7f7      	b.n	809159c <__copybits+0x16>
 80915ac:	2300      	movs	r3, #0
 80915ae:	428a      	cmp	r2, r1
 80915b0:	d202      	bcs.n	80915b8 <__copybits+0x32>
 80915b2:	f842 3b04 	str.w	r3, [r2], #4
 80915b6:	e7fa      	b.n	80915ae <__copybits+0x28>
 80915b8:	bd10      	pop	{r4, pc}

080915ba <__any_on>:
 80915ba:	f100 0214 	add.w	r2, r0, #20
 80915be:	6900      	ldr	r0, [r0, #16]
 80915c0:	114b      	asrs	r3, r1, #5
 80915c2:	4298      	cmp	r0, r3
 80915c4:	b510      	push	{r4, lr}
 80915c6:	db0c      	blt.n	80915e2 <__any_on+0x28>
 80915c8:	dd0c      	ble.n	80915e4 <__any_on+0x2a>
 80915ca:	f011 011f 	ands.w	r1, r1, #31
 80915ce:	d009      	beq.n	80915e4 <__any_on+0x2a>
 80915d0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80915d4:	fa24 f001 	lsr.w	r0, r4, r1
 80915d8:	fa00 f101 	lsl.w	r1, r0, r1
 80915dc:	428c      	cmp	r4, r1
 80915de:	d10c      	bne.n	80915fa <__any_on+0x40>
 80915e0:	e000      	b.n	80915e4 <__any_on+0x2a>
 80915e2:	4603      	mov	r3, r0
 80915e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80915e8:	4293      	cmp	r3, r2
 80915ea:	d904      	bls.n	80915f6 <__any_on+0x3c>
 80915ec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80915f0:	2900      	cmp	r1, #0
 80915f2:	d0f9      	beq.n	80915e8 <__any_on+0x2e>
 80915f4:	e001      	b.n	80915fa <__any_on+0x40>
 80915f6:	2000      	movs	r0, #0
 80915f8:	bd10      	pop	{r4, pc}
 80915fa:	2001      	movs	r0, #1
 80915fc:	bd10      	pop	{r4, pc}

080915fe <_calloc_r>:
 80915fe:	b538      	push	{r3, r4, r5, lr}
 8091600:	fb02 f401 	mul.w	r4, r2, r1
 8091604:	4621      	mov	r1, r4
 8091606:	f7f9 f977 	bl	808a8f8 <_malloc_r>
 809160a:	4605      	mov	r5, r0
 809160c:	b118      	cbz	r0, 8091616 <_calloc_r+0x18>
 809160e:	4622      	mov	r2, r4
 8091610:	2100      	movs	r1, #0
 8091612:	f7fd f87f 	bl	808e714 <memset>
 8091616:	4628      	mov	r0, r5
 8091618:	bd38      	pop	{r3, r4, r5, pc}

0809161a <__env_lock>:
 809161a:	4770      	bx	lr

0809161c <__env_unlock>:
 809161c:	4770      	bx	lr

0809161e <link_code_end>:
	...

08091620 <dynalib_user>:
 8091620:	0021 0808 0061 0808 008d 0808 0091 0808     !...a...........
 8091630:	0000 0000 0100 0402 1008 0000               ............

0809163c <_ZTV4File>:
	...
 8091644:	0b81 0808 0b91 0808 0bd7 0808 0bcb 0808     ................
 8091654:	0b63 0808 0b9f 0808 0bc5 0808 0bbf 0808     c...............

08091664 <_ZTV6SdFile>:
	...
 809166c:	0b7f 0808 0b83 0808 0d55 0808 0bd1 0808     ........U.......

0809167c <_ZTV5SdFat>:
	...
 8091684:	0d01 0808 0cf9 0808 0cf1 0808 0ce9 0808     ................
 8091694:	62b5 0806 0006 0064 0001 0001 127a 62b5     .b....d.....z..b
 80916a4:	1106 0002 0000 831a 62b5 1106 0002 0001     .........b......
 80916b4:	831a 6f67 676f 656c 6720 6f65 6f6c 6163     ..google geoloca
 80916c4:	6974 6e6f 003a 614c 6974 7574 6564 253a     tion:.Latitude:%
 80916d4:	2c66 6c20 6e6f 6967 7574 6564 253a 2c66     f, longitude:%f,
 80916e4:	6120 6363 253a 0066 2e25 6636 2500 2e33      acc:%f.%.6f.%3.
 80916f4:	6632 4600 6c75 206c 6461 7264 7365 2073     2f.Full address 
 8091704:	6e61 2064 6176 756c 2065 7573 7362 7274     and value substr
 8091714:	6e69 3a67 0020 6461 7264 7365 2073 7573     ing: .address su
 8091724:	7362 7274 6e69 3a67 2520 0a73 000d 6156     bstring: %s...Va
 8091734:	756c 2065 7573 7362 7274 6e69 3a67 2520     lue substring: %
 8091744:	0a73 000d 7265 6f72 3a72 0020 6f65 3a66     s...error: .eof:
 8091754:	2020 0020 6977 6966 742e 7478 4300 6e6f        .wifi.txt.Con
 8091764:	6574 746e 2073 666f 7720 6669 2069 6966     tents of wifi fi
 8091774:	656c 6c20 6e69 2065 7962 6c20 6e69 3a65     le line by line:
 8091784:	2c00 000a 6f46 6e75 2064 5353 4449 003a     .,..Found SSID:.
 8091794:	6f46 6e75 2064 6170 7373 6f77 6472 003a     Found password:.
 80917a4:	2e25 5832 5400 6d65 6570 6172 7574 6572     %.2X.Temperature
 80917b4:	7220 6165 6964 676e 6620 6f72 206d 4948      reading from HI
 80917c4:	3848 3231 0030 6554 706d 7265 7461 7275     H8120.Temperatur
 80917d4:	2065 6572 6461 6e69 2067 7266 6d6f 5420     e reading from T
 80917e4:	504d 3633 5400 6d65 6570 6172 7574 6572     MP36.Temperature
 80917f4:	7220 6165 6964 676e 6620 6f72 206d 4d42      reading from BM
 8091804:	2045 6f66 2072 6c41 6870 7361 6e65 6573     E for Alphasense
 8091814:	4800 6d75 6469 7469 2079 6572 6461 6e69     .Humidity readin
 8091824:	2067 7266 6d6f 4820 4849 3138 3032 4800     g from HIH8120.H
 8091834:	6d75 6469 7469 2079 6572 6461 6e69 2067     umidity reading 
 8091844:	7266 6d6f 4220 454d 6700 7361 7220 7365     from BME.gas res
 8091854:	7369 6174 636e 3a65 2520 2e31 6630 202c     istance: %1.0f, 
 8091864:	7568 696d 6964 7974 203a 3125 322e 0a66     humidity: %1.2f.
 8091874:	000d 6147 2073 6373 726f 3a65 0020 7548     ..Gas score: .Hu
 8091884:	696d 6964 7974 7320 6f63 6572 203a 5300     midity score: .S
 8091894:	6174 7472 6f20 2066 6c61 6870 2061 2032     tart of alpha 2 
 80918a4:	6572 6461 4300 756f 646c 276e 2074 6f63     read.Couldn't co
 80918b4:	6d6d 6e75 6369 7461 2065 6977 6874 4c20     mmunicate with L
 80918c4:	504d 3139 3030 2030 0032 6168 666c 7620     MP91000 2.half v
 80918d4:	6572 3266 6120 7364 0031 7453 7461 7375     ref2 ads1.Status
 80918e4:	3d20 203d 2030 7266 6d6f 4c20 504d 3139      == 0 from LMP91
 80918f4:	3030 2030 2032 7473 7461 7375 7220 6765     000 2 status reg
 8091904:	2d00 3939 5700 6972 6974 676e 6420 7461     .-99.Writing dat
 8091914:	2061 6f74 6c20 676f 6620 6c69 2e65 4600     a to log file..F
 8091924:	6c69 2065 7453 7261 2074 6974 656d 7473     ile Start timest
 8091934:	6d61 3a70 0020 6e55 6261 656c 7420 206f     amp: .Unable to 
 8091944:	7277 7469 2065 6f74 6c20 676f 6620 6c69     write to log fil
 8091954:	0065 6e69 7469 4700 4147 4500 7272 726f     e.init.GGA.Error
 8091964:	7220 6165 6964 676e 4720 5350 4700 5350      reading GPS.GPS
 8091974:	7520 6374 7320 7274 6e69 3a67 0020 614c      utc string: .La
 8091984:	6974 7574 6564 7320 7274 6e69 3a67 0020     titude string: .
 8091994:	6f6c 676e 7469 6475 2065 7473 6972 676e     longitude string
 80919a4:	203a 4500 7272 726f 7220 6165 6964 676e     : .Error reading
 80919b4:	4720 5350 5220 434d 2100 0026 5345 2050      GPS RMC.!&.ESP 
 80919c4:	6957 6966 6320 6e6f 656e 7463 6f69 206e     Wifi connection 
 80919d4:	7473 7461 7375 6920 3a73 0020 6f43 6e6e     status is: .Conn
 80919e4:	6365 6574 2164 4500 5053 7720 6669 2069     ected!.ESP wifi 
 80919f4:	6f63 6e6e 6365 6574 0064 6f4e 4320 6e6f     connected.No Con
 8091a04:	656e 7463 6f69 006e 5345 2050 6977 6966     nection.ESP wifi
 8091a14:	6e20 746f 6320 6e6f 656e 7463 6465 4000      not connected.@
 8091a24:	0021 6553 646e 6e69 2067 656e 2077 6977     !.Sending new wi
 8091a34:	6966 6320 6572 6564 746e 6169 736c 7420     fi credentials t
 8091a44:	206f 5345 0050 7553 6363 7365 2173 5a00     o ESP.Success!.Z
 8091a54:	0026 6547 7474 6e69 2067 7a6f 6e6f 2065     &.Getting ozone 
 8091a64:	6164 6174 6620 6f72 206d 7365 0070 6553     data from esp.Se
 8091a74:	646e 6e69 2067 6874 2065 6f63 6d6d 6e61     nding the comman
 8091a84:	2064 6f74 6720 7465 6420 7461 2061 7266     d to get data fr
 8091a94:	6d6f 6520 7073 002e 6e55 6261 656c 7420     om esp..Unable t
 8091aa4:	206f 6567 2074 7a6f 6e6f 2065 6164 6174     o get ozone data
 8091ab4:	6620 6f72 206d 5345 2c50 6320 756f 746e      from ESP, count
 8091ac4:	7265 6920 646e 7865 203a 3125 312e 0a66     er index: %1.1f.
 8091ad4:	000d 4552 4943 5645 4445 4420 5441 2041     ..RECIEVED DATA 
 8091ae4:	5246 4d4f 4520 5053 203a 5200 6365 6569     FROM ESP: .Recie
 8091af4:	6576 2064 6164 6174 6620 6f72 206d 5345     ved data from ES
 8091b04:	0050 6f6e 2074 7661 6961 616c 6c62 0065     P.not available.
 8091b14:	6146 6c69 6465 7420 206f 6572 6461 4220     Failed to read B
 8091b24:	454d 3836 0030 0024 7453 7261 6974 676e     ME680.$.Starting
 8091b34:	7420 6568 6920 696e 6974 6c61 7a69 7461      the initializat
 8091b44:	6f69 006e 6567 6574 7065 6f72 646d 7461     ion.geteepromdat
 8091b54:	0061 6843 6365 696b 676e 6620 726f 7320     a.Checking for s
 8091b64:	2064 6163 6472 6c00 676f 005f 7243 6165     d card.log_.Crea
 8091b74:	6574 2064 656e 2077 6966 656c 7420 206f     ted new file to 
 8091b84:	6f6c 2067 6f74 7520 4453 6320 7261 3a64     log to uSD card:
 8091b94:	0020 6f4e 7520 4453 6320 7261 2064 6564      .No uSD card de
 8091ba4:	6574 7463 6465 002e 7453 7261 6974 676e     tected..Starting
 8091bb4:	4c20 504d 3139 3030 2030 4f43 6920 696e      LMP91000 CO ini
 8091bc4:	6974 6c61 7a69 7461 6f69 006e 6f43 6c75     tialization.Coul
 8091bd4:	6e64 7427 6320 6d6f 756d 696e 6163 6574     dn't communicate
 8091be4:	7720 7469 2068 4d4c 3950 3031 3030 6620      with LMP91000 f
 8091bf4:	726f 4320 004f 6e49 7469 6169 696c 657a     or CO.Initialize
 8091c04:	2064 4d4c 3950 3031 3030 6620 726f 4320     d LMP91000 for C
 8091c14:	004f 6f43 6c75 2064 6f6e 2074 6f63 6d6d     O.Could not comm
 8091c24:	6e75 6369 7461 2065 6977 6874 4120 6164     unicate with Ada
 8091c34:	7266 6975 5f74 4441 3153 3131 2035 6f66     fruit_ADS1115 fo
 8091c44:	2072 4f43 5300 6174 7472 6e69 2067 4d4c     r CO.Starting LM
 8091c54:	3950 3031 3030 3220 6920 696e 6974 6c61     P91000 2 initial
 8091c64:	7a69 7461 6f69 006e 6f43 6c75 6e64 7427     ization.Couldn't
 8091c74:	6320 6d6f 756d 696e 6163 6574 7720 7469      communicate wit
 8091c84:	2068 4d4c 3950 3031 3030 6620 726f 3220     h LMP91000 for 2
 8091c94:	4900 696e 6974 6c61 7a69 6465 4c20 504d     .Initialized LMP
 8091ca4:	3139 3030 2030 6f66 2072 0032 6f43 6c75     91000 for 2.Coul
 8091cb4:	2064 6f6e 2074 6966 646e 6120 7620 6c61     d not find a val
 8091cc4:	6469 4220 454d 3836 2030 6573 736e 726f     id BME680 sensor
 8091cd4:	202c 6863 6365 206b 6977 6972 676e 0021     , check wiring!.
 8091ce4:	6e49 7469 6169 696c 657a 2064 4d42 2045     Initialized BME 
 8091cf4:	6553 736e 726f 4300 756f 646c 6e20 746f     Sensor.Could not
 8091d04:	6620 6e69 2064 2061 6176 696c 2064 3654      find a valid T6
 8091d14:	3137 2033 6573 736e 726f 202c 6863 6365     713 sensor, chec
 8091d24:	206b 6977 6972 676e 0021 6f43 6c75 2064     k wiring!.Could 
 8091d34:	6f6e 2074 6966 646e 6120 7620 6c61 6469     not find a valid
 8091d44:	5420 3736 3331 4500 5053 7220 7365 7465      T6713.ESP reset
 8091d54:	0021 5746 5620 7265 6973 6e6f 203a 4200     !.FW Version: .B
 8091d64:	6975 646c 203a 5300 7465 6974 676e 7520     uild: .Setting u
 8091d74:	2070 6f67 676f 656c 6d20 7061 2073 6567     p google maps ge
 8091d84:	6c6f 636f 7461 6f69 2e6e 5300 7379 6574     olocation..Syste
 8091d94:	206d 6576 7372 6f69 3a6e 2520 0073 6e45     m version: %s.En
 8091da4:	6574 2072 7473 6972 676e 2820 6461 7264     ter string (addr
 8091db4:	7365 2c73 6176 756c 2965 7300 6375 7365     ess,value).suces
 8091dc4:	2073 6e69 7720 6972 6974 676e 6600 6961     s in writing.fai
 8091dd4:	656c 2064 7277 7469 6e69 2067 7473 6972     led writing stri
 8091de4:	676e 4300 7275 6572 746e 7320 6f74 6572     ng.Current store
 8091df4:	2064 7373 6469 203a 4300 7275 6572 746e     d ssid: .Current
 8091e04:	7320 6f74 6572 2064 6170 7373 6f77 6472      stored password
 8091e14:	203a 5000 656c 7361 2065 6e65 6574 2072     : .Please enter 
 8091e24:	6170 7373 6f77 6472 6920 206e 726f 6564     password in orde
 8091e34:	2072 6f74 6d20 6b61 2065 6863 6e61 6567     r to make change
 8091e44:	2e73 0d0a 6200 756f 646c 5000 7361 7773     s....bould.Passw
 8091e54:	726f 2064 6f63 7272 6365 2174 4500 746e     ord correct!.Ent
 8091e64:	7265 6e20 7765 7320 6973 3a64 5900 756f     er new ssid:.You
 8091e74:	2072 656e 2077 7373 6469 7720 6c69 206c     r new ssid will 
 8091e84:	6562 203a 4900 2073 6874 7369 6f20 616b     be: .Is this oka
 8091e94:	3f79 7928 6f20 2072 296e 5300 7661 6e69     y?(y or n).Savin
 8091ea4:	2067 656e 2077 7373 6469 4500 746e 7265     g new ssid.Enter
 8091eb4:	6e20 7765 7020 7361 7773 726f 0064 6f59      new password.Yo
 8091ec4:	7275 6e20 7765 7020 7361 7773 726f 2064     ur new password 
 8091ed4:	6977 6c6c 6220 3a65 0020 6153 6976 676e     will be: .Saving
 8091ee4:	6e20 7765 7020 7361 7773 726f 0064 6b6f      new password.ok
 8091ef4:	7961 202c 6f6e 7020 6f72 6c62 6d65 0d0a     ay, no problem..
 8091f04:	5000 656c 7361 2065 6e65 6574 2072 6170     .Please enter pa
 8091f14:	7373 6f77 6472 6920 206e 726f 6564 2072     ssword in order 
 8091f24:	6f74 6520 616e 6c62 2065 6164 6174 7020     to enable data p
 8091f34:	7375 2068 6f74 5320 6e65 6973 6c62 2065     ush to Sensible 
 8091f44:	6f49 0074 6d69 6573 736e 6269 656c 4500     Iot.imsensible.E
 8091f54:	616e 6c62 6e69 2067 6573 736e 6269 656c     nabling sensible
 8091f64:	6920 746f 6420 7461 2061 7570 6873 002e      iot data push..
 8091f74:	0d0a 6e49 6f63 7272 6365 2074 6170 7373     ..Incorrect pass
 8091f84:	6f77 6472 0021 7543 7272 6e65 2074 6544     word!.Current De
 8091f94:	6976 6563 4920 3a44 5000 656c 7361 2065     vice ID:.Please 
 8091fa4:	6e65 6574 2072 6170 7373 6f77 6472 6920     enter password i
 8091fb4:	206e 726f 6564 2072 6f74 6320 6168 676e     n order to chang
 8091fc4:	2065 6874 2065 4449 4500 746e 7265 6e20     e the ID.Enter n
 8091fd4:	7765 4420 7665 6369 2065 4449 003a 0d0a     ew Device ID:...
 8091fe4:	654e 2077 6544 6976 6563 4920 3a44 0a00     New Device ID:..
 8091ff4:	490d 766e 6c61 6469 7620 6c61 6575 0021     .Invalid value!.
 8092004:	6c50 6165 6573 6520 746e 7265 7020 7361     Please enter pas
 8092014:	7773 726f 2064 6e69 6f20 6472 7265 7420     sword in order t
 8092024:	206f 7061 6c70 2079 6564 6166 6c75 2074     o apply default 
 8092034:	6573 7474 6e69 7367 5000 7361 7773 726f     settings.Passwor
 8092044:	2064 6f63 7272 6365 2c74 7220 7365 7465     d correct, reset
 8092054:	6974 676e 6120 6c6c 7320 7465 6974 676e     ting all setting
 8092064:	2073 6f74 6420 6665 7561 746c 2021 5020     s to default!  P
 8092074:	656c 7361 2065 6572 6573 2074 6f79 7275     lease reset your
 8092084:	4920 2044 6f74 7420 6568 6f20 656e 7320      ID to the one s
 8092094:	6f68 6e77 6f20 206e 6f79 7275 6520 636e     hown on your enc
 80920a4:	6f6c 7573 6572 002e 6e45 6574 2072 656e     losure..Enter ne
 80920b4:	2077 6544 6976 6563 7420 6d69 2065 6e61     w Device time an
 80920c4:	2064 6164 6574 2820 3031 6420 6769 7469     d date (10 digit
 80920d4:	6520 6f70 6863 7420 6d69 7365 6174 706d      epoch timestamp
 80920e4:	3a29 0a00 4e0d 7765 4420 7665 6369 2065     ):...New Device 
 80920f4:	6954 656d 003a 6e45 6574 2072 656e 2077     Time:.Enter new 
 8092104:	6544 6976 6563 7420 6d69 2065 6f7a 656e     Device time zone
 8092114:	2820 312d 2e32 2030 6f74 3120 2e34 2930      (-12.0 to 14.0)
 8092124:	0a00 4e0d 7765 4420 7665 6369 2065 6974     ...New Device ti
 8092134:	656d 7a20 6e6f 3a65 4300 7275 6572 746e     me zone:.Current
 8092144:	4620 6572 7571 6e65 7963 203a 2800 327e      Frequency: .(~2
 8092154:	7320 6365 6e6f 2964 6d20 6165 7573 6572      second) measure
 8092164:	656d 746e 0073 6e45 6574 2072 656e 2077     ments.Enter new 
 8092174:	6d61 756f 746e 0d0a 0a00 4e0d 7765 4620     amount.....New F
 8092184:	6572 7571 6e65 7963 203a 4300 7275 6572     requency: .Curre
 8092194:	746e 4320 324f 7320 6f6c 6570 003a 7020     nt CO2 slope:. p
 80921a4:	6d70 4500 746e 7265 6e20 7765 4320 324f     pm.Enter new CO2
 80921b4:	7320 6f6c 6570 0d0a 0a00 4e0d 7765 4320      slope.....New C
 80921c4:	324f 7320 6f6c 6570 203a 4300 7275 6572     O2 slope: .Curre
 80921d4:	746e 4320 324f 7a20 7265 3a6f 4500 746e     nt CO2 zero:.Ent
 80921e4:	7265 6e20 7765 4320 324f 5a20 7265 0a6f     er new CO2 Zero.
 80921f4:	000d 0d0a 654e 2077 4f43 2032 657a 6f72     ....New CO2 zero
 8092204:	203a 4300 7275 6572 746e 4320 204f 6c73     : .Current CO sl
 8092214:	706f 3a65 4500 746e 7265 6e20 7765 4320     ope:.Enter new C
 8092224:	204f 6c73 706f 0a65 000d 0d0a 654e 2077     O slope.....New 
 8092234:	4f43 7320 6f6c 6570 203a 4300 7275 6572     CO slope: .Curre
 8092244:	746e 4320 204f 657a 6f72 003a 7020 6270     nt CO zero:. ppb
 8092254:	4500 746e 7265 6e20 7765 4320 204f 655a     .Enter new CO Ze
 8092264:	6f72 0d0a 0a00 4e0d 7765 4320 204f 657a     ro.....New CO ze
 8092274:	6f72 203a 4300 7275 6572 746e 5020 314d     ro: .Current PM1
 8092284:	7320 6f6c 6570 003a 6e45 6574 2072 656e      slope:.Enter ne
 8092294:	2077 4d50 2031 6c73 706f 0a65 000d 0d0a     w PM1 slope.....
 80922a4:	654e 2077 4d50 2031 6c73 706f 3a65 0020     New PM1 slope: .
 80922b4:	7543 7272 6e65 2074 4d50 2031 657a 6f72     Current PM1 zero
 80922c4:	003a 7520 2f67 336d 4500 746e 7265 6e20     :. ug/m3.Enter n
 80922d4:	7765 5020 314d 5a20 7265 0a6f 000d 0d0a     ew PM1 Zero.....
 80922e4:	654e 2077 4d50 2031 657a 6f72 203a 4300     New PM1 zero: .C
 80922f4:	7275 6572 746e 5020 324d 352e 7320 6f6c     urrent PM2.5 slo
 8092304:	6570 003a 6e45 6574 2072 656e 2077 4d50     pe:.Enter new PM
 8092314:	2e32 2035 6c73 706f 0a65 000d 0d0a 654e     2.5 slope.....Ne
 8092324:	2077 4d50 2e32 2035 6c73 706f 3a65 0020     w PM2.5 slope: .
 8092334:	7543 7272 6e65 2074 4d50 2e32 2035 657a     Current PM2.5 ze
 8092344:	6f72 003a 6e45 6574 2072 656e 2077 4d50     ro:.Enter new PM
 8092354:	2e32 2035 655a 6f72 0d0a 0a00 4e0d 7765     2.5 Zero.....New
 8092364:	5020 324d 352e 7a20 7265 3a6f 0020 7543      PM2.5 zero: .Cu
 8092374:	7272 6e65 2074 4d50 3031 7320 6f6c 6570     rrent PM10 slope
 8092384:	003a 6e45 6574 2072 656e 2077 4d50 3031     :.Enter new PM10
 8092394:	7320 6f6c 6570 0d0a 0a00 4e0d 7765 5020      slope.....New P
 80923a4:	314d 2030 6c73 706f 3a65 0020 7543 7272     M10 slope: .Curr
 80923b4:	6e65 2074 4d50 3031 7a20 7265 3a6f 2000     ent PM10 zero:. 
 80923c4:	6d75 6d2f 0033 6e45 6574 2072 656e 2077     um/m3.Enter new 
 80923d4:	4d50 3031 5a20 7265 0a6f 000d 0d0a 654e     PM10 Zero.....Ne
 80923e4:	2077 4d50 3031 7a20 7265 3a6f 0020 7543     w PM10 zero: .Cu
 80923f4:	7272 6e65 2074 6554 706d 7265 7461 7275     rrent Temperatur
 8092404:	2065 6c73 706f 3a65 2000 6544 7267 6565     e slope:. Degree
 8092414:	2073 0043 6e45 6574 2072 656e 2077 6554     s C.Enter new Te
 8092424:	706d 7265 7461 7275 2065 6c73 706f 0a65     mperature slope.
 8092434:	000d 0d0a 654e 2077 6554 706d 7265 7461     ....New Temperat
 8092444:	7275 2065 6c73 706f 3a65 0020 7543 7272     ure slope: .Curr
 8092454:	6e65 2074 6554 706d 7265 7461 7275 2065     ent Temperature 
 8092464:	657a 6f72 003a 6e45 6574 2072 656e 2077     zero:.Enter new 
 8092474:	6554 706d 7265 7461 7275 2065 655a 6f72     Temperature Zero
 8092484:	0d0a 0a00 4e0d 7765 5420 6d65 6570 6172     .....New Tempera
 8092494:	7574 6572 7a20 7265 3a6f 0020 7543 7272     ture zero: .Curr
 80924a4:	6e65 2074 7250 7365 7573 6572 7320 6f6c     ent Pressure slo
 80924b4:	6570 003a 7420 726f 0072 6e45 6574 2072     pe:. torr.Enter 
 80924c4:	656e 2077 7250 7365 7573 6572 7320 6f6c     new Pressure slo
 80924d4:	6570 0d0a 0a00 4e0d 7765 5020 6572 7373     pe.....New Press
 80924e4:	7275 2065 6c73 706f 3a65 0020 7543 7272     ure slope: .Curr
 80924f4:	6e65 2074 7250 7365 7573 6572 7a20 7265     ent Pressure zer
 8092504:	3a6f 4500 746e 7265 6e20 7765 5020 6572     o:.Enter new Pre
 8092514:	7373 7275 2065 655a 6f72 0d0a 0a00 4e0d     ssure Zero.....N
 8092524:	7765 5020 6572 7373 7275 2065 657a 6f72     ew Pressure zero
 8092534:	203a 4300 7275 6572 746e 5220 2048 6c73     : .Current RH sl
 8092544:	706f 3a65 2000 0025 6e45 6574 2072 656e     ope:. %.Enter ne
 8092554:	2077 4852 7320 6f6c 6570 0d0a 0a00 4e0d     w RH slope.....N
 8092564:	7765 5220 2048 6c73 706f 3a65 0020 7543     ew RH slope: .Cu
 8092574:	7272 6e65 2074 4852 7a20 7265 3a6f 4500     rrent RH zero:.E
 8092584:	746e 7265 6e20 7765 5220 2048 655a 6f72     nter new RH Zero
 8092594:	0d0a 0a00 4e0d 7765 5220 2048 657a 6f72     .....New RH zero
 80925a4:	203a 4300 7275 6572 746e 4f20 2033 6e61     : .Current O3 an
 80925b4:	6c61 676f 6f20 6666 6573 3a74 4500 746e     alog offset:.Ent
 80925c4:	7265 6e20 7765 6f20 6f7a 656e 6f20 6666     er new ozone off
 80925d4:	6573 0a74 000d 0d0a 654e 2077 7a6f 6e6f     set.....New ozon
 80925e4:	2065 666f 7366 7465 203a 4300 7275 6572     e offset: .Curre
 80925f4:	746e 6c20 776f 7265 6c20 6d69 7469 003a     nt lower limit:.
 8092604:	6c50 6165 6573 6520 746e 7265 7020 7361     Please enter pas
 8092614:	7773 726f 2064 6e69 6f20 6472 7265 7420     sword in order t
 8092624:	206f 6863 6e61 6567 7420 6568 6c20 776f     o change the low
 8092634:	7265 6c20 6d69 7469 4500 746e 7265 6e20     er limit.Enter n
 8092644:	7765 6c20 776f 7265 6c20 6d69 7469 0a3a     ew lower limit:.
 8092654:	000d 0d0a 654e 2077 6f6c 6577 2072 696c     ....New lower li
 8092664:	696d 3a74 4300 7275 6572 746e 7520 7070     mit:.Current upp
 8092674:	7265 6c20 6d69 7469 003a 6c50 6165 6573     er limit:.Please
 8092684:	6520 746e 7265 7020 7361 7773 726f 2064      enter password 
 8092694:	6e69 6f20 6472 7265 7420 206f 6863 6e61     in order to chan
 80926a4:	6567 7420 6568 7520 7070 7265 6c20 6d69     ge the upper lim
 80926b4:	7469 4500 746e 7265 6e20 7765 7520 7070     it.Enter new upp
 80926c4:	7265 6c20 6d69 7469 0a3a 000d 0d0a 654e     er limit:.....Ne
 80926d4:	2077 7075 6570 2072 696c 696d 3a74 4300     w upper limit:.C
 80926e4:	6d6f 616d 646e 203a 4420 7365 7263 7069     ommand:  Descrip
 80926f4:	6974 6e6f 6100 203a 4120 6a64 7375 2074     tion.a:  Adjust 
 8092704:	4f43 2032 6c73 706f 0065 3a62 2020 6441     CO2 slope.b:  Ad
 8092714:	756a 7473 4320 324f 7a20 7265 006f 3a63     just CO2 zero.c:
 8092724:	2020 6441 756a 7473 4320 204f 6c73 706f       Adjust CO slop
 8092734:	0065 3a64 2020 6441 756a 7473 4320 204f     e.d:  Adjust CO 
 8092744:	657a 6f72 6500 203a 4120 6a64 7375 2074     zero.e:  Adjust 
 8092754:	4d50 2031 6c73 706f 0065 3a66 2020 6441     PM1 slope.f:  Ad
 8092764:	756a 7473 5020 314d 7a20 7265 006f 3a67     just PM1 zero.g:
 8092774:	2020 6441 756a 7473 5020 324d 352e 7320       Adjust PM2.5 s
 8092784:	6f6c 6570 6800 203a 4120 6a64 7375 2074     lope.h:  Adjust 
 8092794:	4d50 2e32 2035 657a 6f72 6900 203a 4120     PM2.5 zero.i:  A
 80927a4:	6a64 7375 2074 4d50 3031 7320 6f6c 6570     djust PM10 slope
 80927b4:	6a00 203a 4120 6a64 7375 2074 4d50 3031     .j:  Adjust PM10
 80927c4:	7a20 7265 006f 3a6b 2020 6441 756a 7473      zero.k:  Adjust
 80927d4:	5420 6d65 6570 6172 7574 6572 7320 6f6c      Temperature slo
 80927e4:	6570 6c00 203a 4120 6a64 7375 2074 6554     pe.l:  Adjust Te
 80927f4:	706d 7265 7461 7275 2065 657a 6f72 6d00     mperature zero.m
 8092804:	203a 4120 6a64 7375 2074 7250 7365 7573     :  Adjust Pressu
 8092814:	6572 7320 6f6c 6570 6e00 203a 4120 6a64     re slope.n:  Adj
 8092824:	7375 2074 7250 7365 7573 6572 7a20 7265     ust Pressure zer
 8092834:	006f 3a6f 2020 6441 756a 7473 4820 6d75     o.o:  Adjust Hum
 8092844:	6469 7469 2079 6c73 706f 0065 3a70 2020     idity slope.p:  
 8092854:	6441 756a 7473 4820 6d75 6469 7469 2079     Adjust Humidity 
 8092864:	657a 6f72 7100 203a 4520 616e 6c62 2065     zero.q:  Enable 
 8092874:	6573 6972 6c61 6420 6265 6775 6967 676e     serial debugging
 8092884:	7200 203a 4420 7369 6261 656c 7320 7265     .r:  Disable ser
 8092894:	6169 206c 6564 7562 6767 6e69 0067 3a73     ial debugging.s:
 80928a4:	2020 754f 7074 7475 6820 6165 6564 2072       Output header 
 80928b4:	7473 6972 676e 7400 203a 4520 746e 7265     string.t:  Enter
 80928c4:	6e20 7765 7420 6d69 2065 6e61 2064 6164      new time and da
 80928d4:	6574 7500 203a 4520 746e 7265 6e20 7765     te.u:  Enter new
 80928e4:	7420 6d69 2065 6f7a 656e 7600 203a 4120      time zone.v:  A
 80928f4:	6a64 7375 2074 6874 2065 6544 6976 6563     djust the Device
 8092904:	4920 0044 3a77 2020 6547 2074 6977 6966      ID.w:  Get wifi
 8092914:	6320 6572 6564 746e 6169 736c 7900 203a      credentials.y: 
 8092924:	4520 616e 6c62 2065 6563 6c6c 6c75 7261      Enable cellular
 8092934:	7a00 203a 4420 7369 6261 656c 6320 6c65     .z:  Disable cel
 8092944:	756c 616c 0072 3a31 2020 6441 756a 7473     lular.1:  Adjust
 8092954:	6720 7361 6c20 776f 7265 6c20 6d69 7469      gas lower limit
 8092964:	3200 203a 4120 6a64 7375 2074 6167 2073     .2:  Adjust gas 
 8092974:	7075 6570 2072 696c 696d 0074 3a33 2020     upper limit.3:  
 8092984:	6547 2074 7562 6c69 2064 6576 7372 6f69     Get build versio
 8092994:	006e 3a34 2020 6e45 6261 656c 4f20 6f7a     n.4:  Enable Ozo
 80929a4:	656e 3500 203a 4420 7369 6261 656c 4f20     ne.5:  Disable O
 80929b4:	6f7a 656e 3600 203a 4520 616e 6c62 2065     zone.6:  Enable 
 80929c4:	4f56 2743 0073 3a37 2020 6944 6173 6c62     VOC's.7:  Disabl
 80929d4:	2065 4f56 2743 0073 3a38 2020 754f 7074     e VOC's.8:  Outp
 80929e4:	7475 7420 6568 5020 494d 2043 7973 7473     ut the PMIC syst
 80929f4:	6d65 6320 6e6f 6966 7567 6172 6974 6e6f     em configuration
 8092a04:	3900 203a 4920 636e 6572 7361 2065 6874     .9:  Increase th
 8092a14:	2065 6863 7261 6567 6320 7275 6572 746e     e charge current
 8092a24:	6220 2079 3436 6d20 0041 3a30 2020 6e49      by 64 mA.0:  In
 8092a34:	7263 6165 6573 7420 6568 6320 7275 6572     crease the curre
 8092a44:	746e 6920 706e 7475 6c20 6d69 7469 6220     nt input limit b
 8092a54:	2079 3031 2030 416d 4100 203a 4f20 7075     y 100 mA.A:  Oup
 8092a64:	7074 7475 4320 204f 6f63 736e 6174 746e     tput CO constant
 8092a74:	796c 6120 646e 7220 7061 6469 796c 4200     ly and rapidly.B
 8092a84:	203a 4f20 7475 7570 2074 4d50 6320 6e6f     :  Output PM con
 8092a94:	7473 6e61 6c74 2079 6e61 2064 6172 6970     stantly and rapi
 8092aa4:	6c64 0079 3a43 2020 6843 6e61 6567 7420     dly.C:  Change t
 8092ab4:	6d65 6570 6172 7574 6572 7520 696e 7374     emperature units
 8092ac4:	7420 206f 6543 636c 7569 0073 3a44 2020      to Celcius.D:  
 8092ad4:	6944 6173 6c62 2065 4d54 3350 2036 6574     Disable TMP36 te
 8092ae4:	706d 7265 7461 7275 2065 6573 736e 726f     mperature sensor
 8092af4:	6120 646e 7520 6573 4220 454d 3836 2030      and use BME680 
 8092b04:	6574 706d 7265 7461 7275 0065 3a45 2020     temperature.E:  
 8092b14:	6e45 6261 656c 5420 504d 3633 7420 6d65     Enable TMP36 tem
 8092b24:	6570 6172 7574 6572 7320 6e65 6f73 2072     perature sensor 
 8092b34:	6e61 2064 6964 6173 6c62 2065 4d42 3645     and disable BME6
 8092b44:	3038 7420 6d65 6570 6172 7574 6572 4600     80 temperature.F
 8092b54:	203a 4320 6168 676e 2065 6574 706d 7265     :  Change temper
 8092b64:	7461 7275 2065 6e75 7469 2073 6f74 4620     ature units to F
 8092b74:	7261 6e65 6568 7469 4700 203a 5220 6165     arenheit.G:  Rea
 8092b84:	2064 7a6f 6e6f 2065 7266 6d6f 6120 616e     d ozone from ana
 8092b94:	6f6c 2067 6e69 7570 2074 6e28 746f 6420     log input (not d
 8092ba4:	6769 7469 6c61 796c 2d20 6220 616f 6472     igitally - board
 8092bb4:	6420 7065 6e65 6564 746e 0029 3a48 2020      dependent).H:  
 8092bc4:	6552 6461 6f20 6f7a 656e 6420 6769 7469     Read ozone digit
 8092bd4:	6c61 796c 2820 6f6e 2074 6874 6f72 6775     ally (not throug
 8092be4:	2068 6e61 6c61 676f 6920 706e 7475 2d20     h analog input -
 8092bf4:	6220 616f 6472 6420 7065 6e65 6564 746e      board dependent
 8092c04:	0029 3a49 2020 6441 756a 7473 6620 6572     ).I:  Adjust fre
 8092c14:	7571 6e65 7963 6620 726f 7520 6c70 616f     quency for uploa
 8092c24:	6964 676e 7420 7268 756f 6867 6320 6c65     ding through cel
 8092c34:	756c 616c 0072 3a4a 2020 6552 6573 2074     lular.J:  Reset 
 8092c44:	5345 2c50 4320 324f 202c 6c50 6e61 6f74     ESP, CO2, Planto
 8092c54:	6577 0072 3a4b 2020 6f43 746e 6e69 6f75     wer.K:  Continuo
 8092c64:	7375 7320 7265 6169 206c 756f 7074 7475     us serial output
 8092c74:	6f20 2066 5047 0053 3a4c 2020 7257 7469      of GPS.L:  Writ
 8092c84:	2065 6564 6166 6c75 2074 6573 7474 6e69     e default settin
 8092c94:	7367 4d00 203a 4520 616e 6c62 2065 3032     gs.M:  Enable 20
 8092ca4:	2025 6162 7474 7265 2079 6874 6572 6873     % battery thresh
 8092cb4:	6c6f 2064 696c 696d 6974 676e 4e00 203a     old limiting.N: 
 8092cc4:	4420 7369 6261 656c 3220 2530 6220 7461      Disable 20% bat
 8092cd4:	6574 7972 7420 7268 7365 6f68 646c 6c20     tery threshold l
 8092ce4:	6d69 7469 6e69 2067 4157 4e52 4e49 2147     imiting WARNING!
 8092cf4:	0021 3a4f 2020 6e45 6261 656c 6c20 776f     !.O:  Enable low
 8092d04:	7020 776f 7265 6620 726f 4720 5350 6d20      power for GPS m
 8092d14:	646f 6c75 0065 3a50 2020 7554 6e72 6f20     odule.P:  Turn o
 8092d24:	6666 4220 5441 4546 0054 3a51 2020 6c41     ff BATFET.Q:  Al
 8092d34:	6f6c 2077 4142 4654 5445 7420 206f 7574     low BATFET to tu
 8092d44:	6e72 6f20 006e 3a52 2020 6944 6173 6c62     rn on.R:  Disabl
 8092d54:	2065 4241 2043 6f6c 6967 2063 6f66 2072     e ABC logic for 
 8092d64:	4f43 2032 6573 736e 726f 5300 203a 4520     CO2 sensor.S:  E
 8092d74:	616e 6c62 2065 4241 2043 6f6c 6967 2063     nable ABC logic 
 8092d84:	6f66 2072 4f43 2032 6573 736e 726f 5400     for CO2 sensor.T
 8092d94:	203a 4520 616e 6c62 2f65 6964 6173 6c62     :  Enable/disabl
 8092da4:	2065 4948 3848 3231 2030 4852 7320 6e65     e HIH8120 RH sen
 8092db4:	6f73 0072 3a55 2020 7753 7469 6863 7320     sor.U:  Switch s
 8092dc4:	636f 656b 2074 6877 7265 2065 4f43 6920     ocket where CO i
 8092dd4:	2073 6572 6461 6620 6f72 006d 3a56 2020     s read from.V:  
 8092de4:	6143 696c 7262 7461 2065 4f43 2032 6573     Calibrate CO2 se
 8092df4:	736e 726f 2d20 6d20 7375 2074 7573 7070     nsor - must supp
 8092e04:	796c 6120 626d 6569 746e 6c20 7665 6c65     ly ambient level
 8092e14:	2820 6f67 6f20 7475 6973 6564 2921 5700      (go outside!).W
 8092e24:	203a 4520 616e 6c62 2f65 6944 6173 6c62     :  Enable/Disabl
 8092e34:	2065 6f67 676f 656c 6c20 636f 7461 6f69     e google locatio
 8092e44:	206e 6573 7672 6369 7365 5900 203a 4720     n services.Y:  G
 8092e54:	206f 6f74 3120 3830 4c5f 7320 7265 6169     o to 108_L seria
 8092e64:	206c 656d 756e 5a00 203a 4f20 7475 7570     l menu.Z:  Outpu
 8092e74:	2074 6563 6c6c 6c75 7261 6920 666e 726f     t cellular infor
 8092e84:	616d 6974 6e6f 2820 4343 4449 202c 4d49     mation (CCID, IM
 8092e94:	4945 202c 7465 2963 2100 203a 4320 6e6f     EI, etc).!:  Con
 8092ea4:	6974 756e 756f 2073 6573 6972 6c61 6f20     tinuous serial o
 8092eb4:	7475 7570 2074 666f 5620 434f 7327 4000     utput of VOC's.@
 8092ec4:	2020 4520 616e 6c62 2f65 6944 6173 6c62        Enable/Disabl
 8092ed4:	2065 6553 736e 6269 656c 692d 746f 6420     e Sensible-iot d
 8092ee4:	7461 2061 7570 6873 202e 4920 2066 6e65     ata push.  If en
 8092ef4:	6261 656c 2c64 7420 6d69 2065 6f7a 656e     abled, time zone
 8092f04:	7720 6c69 206c 6562 6920 6e67 726f 6465      will be ignored
 8092f14:	2d20 5520 4354 7720 6c69 206c 6562 7520      - UTC will be u
 8092f24:	6573 2e64 2300 2020 4520 616e 6c62 2f65     sed..#   Enable/
 8092f34:	6944 6173 6c62 2065 6163 7472 706f 6570     Disable cartoppe
 8092f44:	2072 6f70 6577 2072 6f6d 6564 202e 4920     r power mode.  I
 8092f54:	2066 6e65 6261 656c 2c64 6120 7362 6e65     f enabled, absen
 8092f64:	6573 6f20 2066 7865 6574 6e72 6c61 7020     se of external p
 8092f74:	776f 7265 7720 6c69 206c 7473 706f 6320     ower will stop c
 8092f84:	6c65 756c 616c 2e72 3f00 203a 4f20 7475     ellular..?:  Out
 8092f94:	7570 2074 6874 7369 6d20 6e65 0075 3a78     put this menu.x:
 8092fa4:	2020 7845 7469 2073 6874 7369 6d20 6e65       Exits this men
 8092fb4:	0075 562c 434f 203a 2c00 4320 3a4f 0020     u.,VOC: ., CO: .
 8092fc4:	202c 4f43 3a32 0020 202c 4d50 3a31 0020     , CO2: ., PM1: .
 8092fd4:	502c 324d 352e 203a 2c00 5020 314d 3a30     ,PM2.5: ., PM10:
 8092fe4:	0020 542c 6d65 3a70 0020 502c 6572 7373      .,Temp: .,Press
 8092ff4:	203a 2c00 5548 3a4d 0020 532c 646e 203a     : .,HUM: .,Snd: 
 8093004:	2c00 334f 203a 5000 6275 696c 6873 6465     .,O3: .Published
 8093014:	7020 6d61 7075 6420 7461 2161 7300 6e65      pamup data!.sen
 8093024:	6973 6c62 5065 6d61 7055 5000 6275 696c     siblePamUp.Publi
 8093034:	6873 6465 7320 6e65 6973 6c62 2065 6164     shed sensible da
 8093044:	6174 0021 6543 6c6c 6c75 7261 6920 2073     ta!.Cellular is 
 8093054:	6964 6173 6c62 6465 002e 6f43 6c75 6e64     disabled..Couldn
 8093064:	7427 6320 6e6f 656e 7463 7420 206f 6170     't connect to pa
 8093074:	7472 6369 656c 002e 6170 756d 0070 003b     rticle..pamup.;.
 8093084:	4150 2d4d 6900 736e 7274 6d75 6e65 4b74     PAM-.instrumentK
 8093094:	7965 6400 7461 7465 6d69 0065 5925 252d     ey.datetime.%Y-%
 80930a4:	2d6d 6425 2554 3a48 4d25 253a 5a53 5000     m-%dT%H:%M:%SZ.P
 80930b4:	314d 305f 5000 324d 355f 5400 6d65 0070     M1_0.PM2_5.Temp.
 80930c4:	7250 7365 0073 6d48 7464 0079 614c 0074     Press.Hmdty.Lat.
 80930d4:	6f4c 676e 2500 2f64 6d25 252f 2c79 4825     Long.%d/%m/%y,%H
 80930e4:	253a 3a4d 5325 4c00 6e69 2065 6f74 7720     :%M:%S.Line to w
 80930f4:	6972 6574 7420 206f 6c63 756f 3a64 5300     rite to cloud:.S
 8093104:	6e65 6964 676e 6420 7461 2061 6f74 6520     ending data to e
 8093114:	7073 7420 206f 7075 6f6c 6461 7620 6169     sp to upload via
 8093124:	7720 6669 2e69 2e2e 5300 6e65 6964 676e      wifi....Sending
 8093134:	6420 7461 2061 6f74 6520 7073 7420 206f      data to esp to 
 8093144:	7075 6f6c 6461 7620 6169 7720 6669 0069     upload via wifi.
 8093154:	7257 7469 6e69 2067 6f72 2077 6f74 6620     Writing row to f
 8093164:	6c69 2e65 4400 5645 432c 284f 7070 296d     ile..DEV,CO(ppm)
 8093174:	432c 324f 7028 6d70 2c29 4f56 7343 4928     ,CO2(ppm),VOCs(I
 8093184:	5141 2c29 4d50 2c31 4d50 5f32 2c35 4d50     AQ),PM1,PM2_5,PM
 8093194:	3031 542c 4328 2c29 7250 7365 2873 426d     10,T(C),Press(mB
 80931a4:	7261 2c29 4852 2528 2c29 334f 7028 6270     ar),RH(%),O3(ppb
 80931b4:	2c29 6142 7474 2528 2c29 6e53 2864 6264     ),Batt(%),Snd(db
 80931c4:	2c29 614c 6974 7574 6564 4c2c 6e6f 6967     ),Latitude,Longi
 80931d4:	7574 6564 482c 726f 7a69 6e6f 6174 446c     tude,HorizontalD
 80931e4:	6c69 756c 6974 6e6f 532c 6174 7574 2c73     illution,Status,
 80931f4:	6144 6574 542f 6d69 0065 6c4f 2064 6e69     Date/Time.Old in
 8093204:	7570 2074 7563 7272 6e65 2074 696c 696d     put current limi
 8093214:	3a74 2520 0a64 000d 654e 2077 6e69 7570     t: %d...New inpu
 8093224:	2074 7563 7272 6e65 2074 696c 696d 3a74     t current limit:
 8093234:	2520 0a64 000d 6e49 7263 6165 6973 676e      %d...Increasing
 8093244:	4320 6168 6772 2065 7563 7272 6e65 2074      Charge current 
 8093254:	7266 6d6f 2520 2064 416d 7420 206f 6e00     from %d mA to .n
 8093264:	7765 6320 6168 6772 2065 7563 7272 6e65     ew charge curren
 8093274:	2074 666f 2520 2064 416d 0d0a 5300 6174     t of %d mA...Sta
 8093284:	7472 6f20 2066 6c61 6870 2061 6572 6461     rt of alpha read
 8093294:	4300 756f 646c 276e 2074 6f63 6d6d 6e75     .Couldn't commun
 80932a4:	6369 7461 2065 6977 6874 4c20 504d 3139     icate with LMP91
 80932b4:	3030 0030 6148 666c 6f76 746c 203a 3125     000.Halfvolt: %1
 80932c4:	322e 0a66 000d 6148 666c 6f76 746c 6820     .2f...Halfvolt h
 80932d4:	6769 6568 2072 6874 6e61 3020 352e 5300     igher than 0.5.S
 80932e4:	6174 7574 2073 203d 2030 7266 6d6f 4c20     tatus = 0 from L
 80932f4:	504d 3139 3030 2030 7473 7461 7375 7220     MP91000 status r
 8093304:	6765 4c00 504d 3031 3030 7320 6174 7574     eg.LMP1000 statu
 8093314:	2073 203d 0030 4f43 6d20 6165 7573 6572     s = 0.CO measure
 8093324:	656d 746e 3a73 2020 0d0a 4100 5f30 6167     ments:  ...A0_ga
 8093334:	3a73 2520 0a64 000d 3141 615f 7875 203a     s: %d...A1_aux: 
 8093344:	6425 0d0a 4100 5f32 6574 706d 203a 6425     %d...A2_temp: %d
 8093354:	0d0a 6800 6c61 5f66 7276 6665 203a 6425     ...half_vref: %d
 8093364:	0d0a 4300 3a4f 2520 2e31 6633 7020 6d70     ...CO: %1.3f ppm
 8093374:	0d0a 4d00 6e65 3e75 5300 7265 6169 206c     ...Menu>.Serial 
 8093384:	6564 7562 6767 6e69 2067 6e65 6261 656c     debugging enable
 8093394:	2e64 5300 7265 6169 206c 6564 7562 6767     d..Serial debugg
 80933a4:	6e69 2067 6964 6173 6c62 6465 002e 6e45     ing disabled..En
 80933b4:	6261 696c 676e 4320 6c65 756c 616c 2e72     abling Cellular.
 80933c4:	4300 6c65 756c 616c 2072 6c61 6572 6461     .Cellular alread
 80933d4:	2079 6e65 6261 656c 2e64 4400 7369 6261     y enabled..Disab
 80933e4:	696c 676e 4320 6c65 756c 616c 0072 6543     ling Cellular.Ce
 80933f4:	6c6c 6c75 7261 6120 726c 6165 7964 6420     llular already d
 8093404:	7369 6261 656c 2e64 5400 6d65 6570 6172     isabled..Tempera
 8093414:	7574 6572 7520 696e 7374 6120 726c 6165     ture units alrea
 8093424:	7964 7320 7465 7420 206f 6146 6572 656e     dy set to Farene
 8093434:	7469 002e 6554 706d 7265 7461 7275 2065     it..Temperature 
 8093444:	6e75 7469 2073 6c61 6572 6461 2079 6573     units already se
 8093454:	2074 6f74 4320 6c65 6963 7375 002e 6944     t to Celcius..Di
 8093464:	6173 6c62 6e69 2067 656e 2077 6574 706d     sabling new temp
 8093474:	7265 7461 7275 2065 6573 736e 726f 5400     erature sensor.T
 8093484:	6d65 6570 6172 7574 6572 7320 6e65 6f73     emperature senso
 8093494:	2072 6c61 6572 6461 2079 6964 6173 6c62     r already disabl
 80934a4:	6465 5400 6d65 6570 6172 7574 6572 7320     ed.Temperature s
 80934b4:	6e65 6f73 2072 6c61 6572 6461 2079 6e65     ensor already en
 80934c4:	6261 656c 0064 6554 706d 7265 7461 6575     abled.Temperatue
 80934d4:	7320 6e65 6f73 2072 6f6e 2077 6e65 6261      sensor now enab
 80934e4:	656c 0064 6e41 6c61 676f 7220 6165 6964     led.Analog readi
 80934f4:	676e 6f20 2066 7a6f 6e6f 2065 6c61 6572     ng of ozone alre
 8093504:	6461 2079 6e65 6261 656c 0064 6e41 6c61     ady enabled.Anal
 8093514:	676f 7220 6165 6964 676e 6f20 2066 7a6f     og reading of oz
 8093524:	6e6f 2065 6f6e 2077 6e65 6261 656c 0064     one now enabled.
 8093534:	6944 6967 6174 206c 6572 6461 6e69 2067     Digital reading 
 8093544:	666f 6f20 6f7a 656e 6120 726c 6165 7964     of ozone already
 8093554:	6520 616e 6c62 6465 4400 6769 7469 6c61      enabled.Digital
 8093564:	7220 6165 6964 676e 6f20 2066 7a6f 6e6f      reading of ozon
 8093574:	2065 6f6e 2077 6e65 6261 656c 0064 754f     e now enabled.Ou
 8093584:	7074 7475 6974 676e 4720 5350 6320 6e6f     tputting GPS con
 8093594:	6974 756e 756f 6c73 0079 6142 7474 7265     tinuously.Batter
 80935a4:	2079 6874 6572 6873 6c6f 2064 6c61 6572     y threshold alre
 80935b4:	6461 2079 6e65 6261 656c 0064 6e45 6261     ady enabled.Enab
 80935c4:	696c 676e 6220 7461 6574 7972 7420 7268     ling battery thr
 80935d4:	7365 6f68 646c 6c20 6d69 7469 6e69 0067     eshold limiting.
 80935e4:	6142 7474 7265 2079 6874 6572 6873 6c6f     Battery threshol
 80935f4:	2064 6c61 6572 6461 2079 6964 6173 6c62     d already disabl
 8093604:	6465 4400 7369 6261 696c 676e 6220 7461     ed.Disabling bat
 8093614:	6574 7972 7420 7268 7365 6f68 646c 6c20     tery threshold l
 8093624:	6d69 7469 6e69 0067 6e45 6261 696c 676e     imiting.Enabling
 8093634:	6c20 776f 7020 776f 7265 6620 726f 6720      low power for g
 8093644:	7370 5400 7275 696e 676e 6f20 6666 6220     ps.Turning off b
 8093654:	7461 6566 0074 6c41 6f6c 6977 676e 6220     atfet.Allowing b
 8093664:	7461 6566 2074 6f74 7420 7275 206e 6e6f     atfet to turn on
 8093674:	4400 7369 6261 696c 676e 4120 4342 6c20     .Disabling ABC l
 8093684:	676f 6369 6620 726f 4320 324f 7320 6e65     ogic for CO2 sen
 8093694:	6f73 0072 4241 2043 6f6c 6967 2063 6c61     sor.ABC logic al
 80936a4:	6572 6461 2079 6964 6173 6c62 6465 4500     ready disabled.E
 80936b4:	616e 6c62 6e69 2067 6261 2063 6f6c 6967     nabling abc logi
 80936c4:	2063 6f66 2072 4f43 2032 6573 736e 726f     c for CO2 sensor
 80936d4:	4100 4342 6c20 676f 6369 6120 726c 6165     .ABC logic alrea
 80936e4:	7964 6520 616e 6c62 6465 4500 616e 6c62     dy enabled.Enabl
 80936f4:	6e69 2067 4948 3848 3231 2030 4852 7320     ing HIH8120 RH s
 8093704:	6e65 6f73 0072 6944 6173 6c62 6e69 2067     ensor.Disabling 
 8093714:	4948 3848 3231 2030 4852 7320 6e65 6f73     HIH8120 RH senso
 8093724:	0072 6f4e 2077 6572 6461 6e69 2067 4f43     r.Now reading CO
 8093734:	6620 6f72 206d 3255 2d30 6c41 6870 3261      from U20-Alpha2
 8093744:	4e00 776f 7220 6165 6964 676e 4320 204f     .Now reading CO 
 8093754:	7266 6d6f 5520 3931 412d 706c 6168 0031     from U19-Alpha1.
 8093764:	6552 6573 6974 676e 7420 6568 4320 324f     Reseting the CO2
 8093774:	7320 6e65 6f73 0072 5041 2050 6556 7372      sensor.APP Vers
 8093784:	6f69 3a6e 0020 6e45 6261 696c 676e 4f20     ion: .Enabling O
 8093794:	6f7a 656e 4f00 6f7a 656e 6120 726c 6165     zone.Ozone alrea
 80937a4:	7964 6520 616e 6c62 6465 4400 7369 6261     dy enabled.Disab
 80937b4:	696c 676e 4f20 6f7a 656e 4f00 6f7a 656e     ling Ozone.Ozone
 80937c4:	6120 726c 6165 7964 6420 7369 6261 656c      already disable
 80937d4:	0064 6e45 6261 696c 676e 5620 434f 7327     d.Enabling VOC's
 80937e4:	5600 434f 7327 6120 726c 6165 7964 6520     .VOC's already e
 80937f4:	616e 6c62 6465 4400 7369 6261 696c 676e     nabled.Disabling
 8093804:	5620 434f 7327 5600 434f 7327 6120 726c      VOC's.VOC's alr
 8093814:	6165 7964 6420 7369 6261 656c 0064 6146     eady disabled.Fa
 8093824:	6c75 3a74 0020 7953 7473 6d65 7320 6174     ult: .System sta
 8093834:	7574 3a73 0020 754f 7074 7475 6974 676e     tus: .Outputting
 8093844:	6e20 726f 616d 6c6c 0079 754f 7074 7475      normally.Output
 8093854:	6974 676e 6f20 6c6e 2079 4d50 4f00 7475     ting only PM.Out
 8093864:	7570 7474 6e69 2067 4f56 7343 6320 6e6f     putting VOCs con
 8093874:	6974 756e 756f 6c73 2179 2020 7250 7365     tinuously!  Pres
 8093884:	2073 6e61 2079 7562 7474 6e6f 7420 206f     s any button to 
 8093894:	7865 7469 2e2e 002e 5654 636f 3d73 3125     exit....TVocs=%1
 80938a4:	302e 2c66 5420 6d65 3d70 3125 312e 2c66     .0f, Temp=%1.1f,
 80938b4:	7020 6572 7373 253d 2e31 6631 202c 6872      press=%1.1f, rh
 80938c4:	253d 2e31 6631 0d0a 4400 7369 6261 696c     =%1.1f...Disabli
 80938d4:	676e 7320 6e65 6973 6c62 2065 6f69 2074     ng sensible iot 
 80938e4:	6164 6174 7020 7375 2e68 4400 7369 6261     data push..Disab
 80938f4:	696c 676e 6320 7261 7420 706f 6570 2072     ling car topper 
 8093904:	6f70 6577 2e72 2020 4500 616e 6c62 6e69     power.  .Enablin
 8093914:	2067 6163 2072 6f74 7070 7265 7020 776f     g car topper pow
 8093924:	7265 202e 4920 2066 6f6e 6520 7478 7265     er.  If no exter
 8093934:	616e 206c 6f70 6577 2c72 7320 7379 6574     nal power, syste
 8093944:	206d 6977 6c6c 7420 7275 206e 666f 2e66     m will turn off.
 8093954:	4400 7369 6261 696c 676e 6720 6f6f 6c67     .Disabling googl
 8093964:	2065 6f6c 6163 6974 6e6f 7320 7265 6976     e location servi
 8093974:	6563 2e73 4500 616e 6c62 6e69 2067 6f67     ces..Enabling go
 8093984:	676f 656c 6c20 636f 7461 6f69 206e 6573     ogle location se
 8093994:	7672 6369 7365 002e 264d 4700 696f 676e     rvices..M&.Going
 80939a4:	6920 746e 206f 6874 2065 3031 5f38 204c      into the 108_L 
 80939b4:	656d 756e 4700 7465 6974 676e 6320 6c65     menu.Getting cel
 80939c4:	756c 616c 2072 6e69 6f66 6d72 7461 6f69     lular informatio
 80939d4:	2c6e 7420 6968 2073 616d 2079 6174 656b     n, this may take
 80939e4:	6120 7720 6968 656c 2e2e 002e 4d49 4945      a while....IMEI
 80939f4:	253d 0073 4d49 4953 253d 0073 4349 4943     =%s.IMSI=%s.ICCI
 8093a04:	3d44 7325 4500 6978 6974 676e 7320 7265     D=%s.Exiting ser
 8093a14:	6169 206c 656d 756e 2e2e 002e 6542 6f66     ial menu....Befo
 8093a24:	6572 7220 6165 6964 676e 6220 656d 6200     re reading bme.b
 8093a34:	6665 726f 2065 6572 6461 6e69 2067 6d62     efore reading bm
 8093a44:	0065 7270 7365 7573 6572 6320 726f 6572     e.pressure corre
 8093a54:	7463 6f69 206e 6166 7463 726f 6620 726f     ction factor for
 8093a64:	4320 324f 253a 2e31 6632 0d0a 4500 7272      CO2:%1.2f...Err
 8093a74:	726f 203a 7250 7365 7573 6572 6f20 7475     or: Pressure out
 8093a84:	6f20 2066 6172 676e 2c65 6e20 746f 7520      of range, not u
 8093a94:	6973 676e 7020 6572 7373 7275 2065 6f63     sing pressure co
 8093aa4:	7272 6365 6974 6e6f 6620 726f 4320 324f     rrection for CO2
 8093ab4:	002e 7250 7365 7573 6572 253d 2e31 6632     ..Pressure=%1.2f
 8093ac4:	0d0a 7000 326d 352e 6320 726f 6572 7463     ...pm2.5 correct
 8093ad4:	6f69 206e 6166 7463 726f 203a 3125 322e     ion factor: %1.2
 8093ae4:	2c66 2520 2e31 6632 0d0a 6900 636e 6d6f     f, %1.2f...incom
 8093af4:	696d 676e 6220 7479 3a65 4300 6e6f 656e     ming byte:.Conne
 8093b04:	7463 6e69 2067 6f74 6320 6c65 756c 616c     cting to cellula
 8093b14:	2072 656e 7774 726f 006b 6661 6574 2072     r network.after 
 8093b24:	6563 6c6c 6c75 7261 6e4f 4100 7466 7265     cellularOn.After
 8093b34:	6320 6c65 756c 616c 4f72 006e 6641 6574      cellularOn.Afte
 8093b44:	2072 6170 7472 6369 656c 6320 6e6f 656e     r particle conne
 8093b54:	7463 7300 7465 6974 676e 7420 6972 6465     ct.setting tried
 8093b64:	635f 6c65 756c 616c 5f72 6f63 6e6e 6365     _cellular_connec
 8093b74:	2074 6f74 6620 6c61 6573 4400 7369 6f63     t to false.Disco
 8093b84:	6e6e 6365 6974 676e 6620 6f72 206d 6563     nnecting from ce
 8093b94:	6c6c 6c75 7261 6e20 7465 6f77 6b72 4700     llular network.G
 8093ba4:	696f 676e 7420 206f 6c73 6565 2070 6562     oing to sleep be
 8093bb4:	6163 7375 2065 6162 7474 7265 2079 7369     cause battery is
 8093bc4:	6220 6c65 776f 3220 2530 6320 6168 6772      below 20% charg
 8093bd4:	0065 0000                                   e...

08093bd8 <_ZTV10PowerCheck>:
	...
 8093be0:	6ea5 0808 6ebd 0808 6572 6461 6e69 2067     .n...n..reading 
 8093bf0:	4f43 2032 6573 736e 726f 7320 6174 7574     CO2 sensor statu
 8093c00:	0073 7546 636e 6320 646f 3a65 0020 7962     s.Func code: .by
 8093c10:	6574 6320 756f 746e 203a 4d00 4253 203a     te count: .MSB: 
 8093c20:	4c00 4253 203a 4300 6c61 6269 6172 6974     .LSB: .Calibrati
 8093c30:	676e 4320 324f 0000                         ng CO2..

08093c38 <_ZL6spiPtr>:
 8093c38:	11e0 2000 11f0 2000 1200 2000               ... ... ... 

08093c44 <_ZTV5SdSpi>:
	...
 8093c4c:	80e1 0808 80f1 0808 80dd 0808 816d 0808     ............m...
 8093c5c:	8191 0808 8181 0808 81d5 0808               ............

08093c68 <_ZTV7HIH61XX>:
	...
 8093c70:	908d 0808 909d 0808 91d5 0808               ............

08093c7c <_ZTV26CellularHelperCREGResponse>:
	...
 8093c84:	a1bd 0808                                   ....

08093c88 <_ZTV39CellularHelperEnvironmentResponseStaticILj4EE>:
	...
 8093c90:	9d41 0808                                   A...

08093c94 <_ZTV23GoogleMapsDeviceLocator>:
	...
 8093c9c:	92a1 0808 92c1 0808 7325 227b 2269 253a     ........%s{"i":%
 8093cac:	2c64 6c22 3a22 7525 222c 2263 253a 2c64     d,"l":%u,"c":%d,
 8093cbc:	6e22 3a22 6425 007d 227b 2263 7b3a 6f22     "n":%d}.{"c":{"o
 8093ccc:	3a22 2522 2273 002c 6122 3a22 005b 6564     ":"%s",."a":[.de
 8093cdc:	6976 6563 6f4c 6163 6f74 0072 5441 5426     viceLocator.AT&T
 8093cec:	7000 6275 696c 6873 6f4c 6163 6974 6e6f     .publishLocation
 8093cfc:	7300 6163 446e 7461 3d61 7325 6800 6f6f     .scanData=%s.hoo
 8093d0c:	2d6b 6572 7073 6e6f 6573 252f 2f73 7325     k-response/%s/%s
 8093d1c:	0000 0000                                   ....

08093d20 <_ZTV28CellularHelperStringResponse>:
	...
 8093d28:	a185 0808 5954 4550 555f 4b4e 4f4e 4e57     ....TYPE_UNKNOWN
 8093d38:	5400 5059 5f45 4b4f 5400 5059 5f45 5245     .TYPE_OK.TYPE_ER
 8093d48:	4f52 0052 5954 4550 435f 4e4f 454e 5443     ROR.TYPE_CONNECT
 8093d58:	5400 5059 5f45 4f4e 4143 5252 4549 0052     .TYPE_NOCARRIER.
 8093d68:	5954 4550 4e5f 444f 4149 544c 4e4f 0045     TYPE_NODIALTONE.
 8093d78:	5954 4550 425f 5355 0059 5954 4550 4e5f     TYPE_BUSY.TYPE_N
 8093d88:	414f 534e 4557 0052 5954 4550 505f 4f52     OANSWER.TYPE_PRO
 8093d98:	504d 0054 5954 4550 505f 554c 0053 5954     MPT.TYPE_PLUS.TY
 8093da8:	4550 415f 4f42 5452 4445 7400 7079 3d65     PE_ABORTED.type=
 8093db8:	7830 7825 6300 6c65 756c 616c 2072 6572     0x%x.cellular re
 8093dc8:	7073 6e6f 6573 7420 7079 3d65 7325 6c20     sponse type=%s l
 8093dd8:	6e65 253d 0064 6e5c 5c00 0072 7830 3025     en=%d.\n.\r.0x%0
 8093de8:	7832 2500 2c64 6425 6b00 7965 7420 6f6f     2x.%d,%d.key too
 8093df8:	6c20 6e6f 2067 656b 3d79 7325 7620 6c61      long key=%s val
 8093e08:	6575 253d 0073 4152 0054 4d55 5354 4d00     ue=%s.RAT.UMTS.M
 8093e18:	4343 4d00 434e 4c00 4341 4300 0049 5342     CC.MNC.LAC.CI.BS
 8093e28:	4349 4100 4652 4e43 4100 4652 4e43 445f     IC.ARFCN.ARFCN_D
 8093e38:	4445 5200 4c58 5645 5553 0042 5f54 4441     ED.RXLEVSUB.T_AD
 8093e48:	0056 5852 454c 0056 4c44 0046 4c55 0046     V.RXLEV.DLF.ULF.
 8093e58:	5352 5043 4c20 5645 5200 4341 5300 0043     RSCP LEV.RAC.SC.
 8093e68:	4345 304e 4c20 5645 7500 6b6e 6f6e 6e77     ECN0 LEV.unknown
 8093e78:	6b20 7965 253d 2073 6176 756c 3d65 7325      key=%s value=%s
 8093e88:	4d00 4343 003a 4152 3a54 4700 4d53 0020     .MCC:.RAT:.GSM .
 8093e98:	4344 2053 3831 3030 4500 4753 204d 3039     DCS 1800.ESGM 90
 8093ea8:	0030 4d55 5354 0020 4733 7520 6b6e 6f6e     0.UMTS .3G unkno
 8093eb8:	6e77 4400 5343 3120 3038 2030 726f 3120     wn.DCS 1800 or 1
 8093ec8:	3039 0030 4745 4d53 3920 3030 3200 2047     900.EGSM 900.2G 
 8093ed8:	6e75 6e6b 776f 006e 636d 3d63 6425 202c     unknown.mcc=%d, 
 8093ee8:	6e6d 3d63 6425 202c 616c 3d63 7825 6320     mnc=%d, lac=%x c
 8093ef8:	3d69 7825 6220 6e61 3d64 7325 7220 7373     i=%x band=%s rss
 8093f08:	3d69 6425 7200 7461 553d 544d 2053 7325     i=%d.rat=UMTS %s
 8093f18:	6420 666c 253d 2064 6c75 3d66 6425 7200      dlf=%d ulf=%d.r
 8093f28:	7461 473d 4d53 2520 2073 7362 6369 253d     at=GSM %s bsic=%
 8093f38:	2078 7261 6366 3d6e 6425 7220 6c78 7665     x arfcn=%d rxlev
 8093f48:	253d 0064 6573 7672 6369 2065 7325 6e00     =%d.service %s.n
 8093f58:	6965 6867 6f62 2072 6425 2520 0073 616c     eighbor %d %s.la
 8093f68:	3d74 6625 6c20 6e6f 253d 2066 6c61 3d74     t=%f lon=%f alt=
 8093f78:	6425 7520 636e 7265 6174 6e69 7974 253d     %d uncertainty=%
 8093f88:	0064 6176 696c 3d64 6166 736c 0065 6425     d.valid=false.%d
 8093f98:	252c 2c64 2522 2278 222c 7825 2c22 6425     ,%d,"%x","%x",%d
 8093fa8:	7300 6174 3d74 6425 6c20 6361 303d 2578     .stat=%d lac=0x%
 8093fb8:	2078 6963 303d 2578 2078 6172 3d74 6425     x ci=0x%x rat=%d
 8093fc8:	4100 2b54 4743 4d4d 0a0d 4100 4954 0d30     .AT+CGMM...ATI0.
 8093fd8:	000a 5441 432b 4d47 0d52 000a 5441 432b     ..AT+CGMR...AT+C
 8093fe8:	5347 0d4e 000a 5441 432b 4d47 0d49 000a     GSN...AT+CGMI...
 8093ff8:	4343 4449 4100 2b54 4343 4449 0a0d 5300     CCID.AT+CCID...S
 8094008:	5241 2d41 3452 5500 4f44 4e50 4100 2b54     ARA-R4.UDOPN.AT+
 8094018:	4455 504f 3d4e 6425 0a0d 4300 5153 4100     UDOPN=%d...CSQ.A
 8094028:	2b54 5343 0d51 000a 5441 432b 504f 3d53     T+CSQ...AT+COPS=
 8094038:	0d30 000a 706f 7265 7461 726f 6120 726c     0...operator alr
 8094048:	6165 7964 2520 0073 5441 432b 504f 3d53     eady %s.AT+COPS=
 8094058:	0d32 000a 5441 432b 504f 3d53 2c34 2c32     2...AT+COPS=4,2,
 8094068:	2522 2273 0a0d 4300 4547 0044 5441 432b     "%s"...CGED.AT+C
 8094078:	4547 3d44 6425 0a0d 5500 4c55 434f 4100     GED=%d...UULOC.A
 8094088:	2b54 4c55 434f 4543 4c4c 303d 0a0d 4100     T+ULOCCELL=0...A
 8094098:	2b54 4c55 434f 323d 322c 302c 252c 2c64     T+ULOC=2,2,0,%d,
 80940a8:	3035 3030 0a0d 4100 2b54 5243 4745 323d     5000...AT+CREG=2
 80940b8:	0a0d 4300 4552 0047 5441 432b 4552 3f47     ...CREG.AT+CREG?
 80940c8:	0a0d 4100 2b54 5243 4745 303d 0a0d 4100     ...AT+CREG=0...A
 80940d8:	2b54 5055 4e49 3d47 2522 2273 0a0d 5500     T+UPING="%s"...U
 80940e8:	4e44 5253 004e 5441 552b 4e44 5253 3d4e     DNSRN.AT+UDNSRN=
 80940f8:	2c30 2522 2273 0a0d 2500 2e75 7525 252e     0,"%s"...%u.%u.%
 8094108:	2e75 7525 0a00 252b 3a73 0020               u.%u..+%s: .

08094114 <_ZTV33CellularHelperEnvironmentResponse>:
	...
 809411c:	9d41 0808                                   A...

08094120 <_ZTV32CellularHelperPlusStringResponse>:
	...
 8094128:	a1bd 0808                                   ....

0809412c <_ZZN4PMIC20getInputCurrentLimitEvE7mapping>:
 809412c:	0064 0096 01f4 0384 04b0 05dc 07d0 0bb8     d...............

0809413c <_ZTV8SPIClass>:
	...
 8094144:	abb5 0808 abb7 0808                         ........

0809414c <_ZL14clock_divisors>:
 809414c:	0800 1810 2820 3830 616e 006e 766f 0066     .... (08nan.ovf.
 809415c:	6e69 0066 6162 6475 5300 7265 6169 006c     inf.baud.Serial.
 809416c:	5355 5342 7265 6169 316c 7400 7079 0065     USBSerial1.type.
 809417c:	6170 6172 006d 6d63 0064 6e68 0064 7473     param.cmd.hnd.st
 809418c:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
 809419c:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
 80941ac:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
 80941bc:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
 80941cc:	6e61 6c64 7265 6100 7070 2500 3130 7530     andler.app.%010u
 80941dc:	0020 205d 2c00 0020 2928 203a 2000 005b      .] ., .(): . [.
 80941ec:	6f63 6564 3d20 0020 6925 6400 7465 6961     code = .%i.detai
 80941fc:	736c 3d20 0020 6e6c 6600 006e 6f63 6564     ls = .ln.fn.code
 809420c:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
 809421c:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
 809422c:	726f 7000 6e61 6369 6100 6c6c 2500 302b     or.panic.all.%+0
 809423c:	6433 253a 3230 0075 5925 252d 2d6d 6425     3d:%02u.%Y-%m-%d
 809424c:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
 809425c:	6d69 0065                                   ime.

08094260 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8094268:	bdad 0808 bdb3 0808 bdf7 0808 bdc1 0808     ................
 8094278:	bdaf 0808                                   ....

0809427c <_ZTV9IPAddress>:
	...
 8094284:	c3b9 0808 c3a9 0808 c3ab 0808               ............

08094290 <_ZTV9USBSerial>:
	...
 8094298:	c44d 0808 c49d 0808 c4ab 0808 b389 0808     M...............
 80942a8:	c489 0808 c44f 0808 c465 0808 c497 0808     ....O...e.......
 80942b8:	c47b 0808 c449 0808                         {...I...

080942c0 <_ZTVN5spark13CellularClassE>:
	...
 80942c8:	c683 0808 c679 0808 c66f 0808 c5ed 0808     ....y...o.......
 80942d8:	c663 0808 0d6d 0808 c657 0808 c64f 0808     c...m...W...O...
 80942e8:	c645 0808 c63b 0808 c5f7 0808               E...;.......

080942f4 <_ZTV11USARTSerial>:
	...
 80942fc:	0b61 0808 0d79 0808 c70b 0808 b389 0808     a...y...........
 809430c:	c6cf 0808 c6f1 0808 c6dd 0808 c705 0808     ................
 809431c:	c6bd 0808 c6c1 0808                         ........

08094324 <_ZTV7TwoWire>:
	...
 809432c:	c7e5 0808 c82f 0808 c807 0808 c7e7 0808     ..../...........
 809433c:	c80f 0808 c817 0808 c81f 0808 c827 0808     ............'...

0809434c <_ZTVN5spark12NetworkClassE>:
	...
 8094354:	c8e1 0808 c8eb 0808 c8f5 0808 c8ff 0808     ................
 8094364:	c909 0808 c915 0808 c921 0808 c92d 0808     ........!...-...
 8094374:	c935 0808 c93f 0808 c949 0808               5...?...I...

08094380 <_ZTVN5spark16JSONBufferWriterE>:
	...
 8094388:	c9a9 0808 c9ab 0808 c9b9 0808 c9df 0808     ................
 8094398:	2e30 0030 7274 6575 2500 0067 756e 6c6c     0.0.true.%g.null
 80943a8:	7500 3025 7834 5300                              .u%04x.

080943af <day_name.4723>:
 80943af:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 80943bf:	6972 6153 4a74                                   riSat

080943c4 <mon_name.4724>:
 80943c4:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 80943d4:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 80943e4:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 80943f4:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 8094404:	6425 000a                                   %d..

08094408 <_ctype_>:
 8094408:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 8094418:	2020 2020 2020 2020 2020 2020 2020 2020                     
 8094428:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 8094438:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 8094448:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 8094458:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 8094468:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 8094478:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 8094488:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0809450c <__sf_fake_stdin>:
	...

0809452c <__sf_fake_stdout>:
	...

0809454c <__sf_fake_stderr>:
	...
 809456c:	4f50 4953 0058 0000                         POSIX...

08094574 <__month_lengths>:
 8094574:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 8094584:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 8094594:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80945a4:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80945b4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80945c4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80945d4:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
 80945e4:	2500 6432 2500 322e 2f64 2e25 6432 252f     .%2d.%.2d/%.2d/%
 80945f4:	322e 0064 6c25 0075 2d59 6d25 252d 0064     .2d.%lu.Y-%m-%d.
 8094604:	2a2e 0075 2e25 6433 2500 6c6c 0064 2e25     .*u.%.3d.%lld.%.
 8094614:	6432 253a 322e 3a64 2e25 6432 2500 302b     2d:%.2d:%.2d.%+0
 8094624:	6c33 2564 322e 646c 0000 0000               3ld%.2ld....

08094630 <fpi.5342>:
 8094630:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 8094640:	0000 0000 6e69 7469 0079 0000               ....inity...

0809464c <fpinan.5378>:
 809464c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
 809465c:	0000 0000                                   ....

08094660 <tinytens>:
 8094660:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 8094670:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 8094680:	6f43 64ac 0628 1168 434c 545f 4d49 0045     Co.d(.h.LC_TIME.
 8094690:	614a 006e 6546 0062 614d 0072 7041 0072     Jan.Feb.Mar.Apr.
 80946a0:	614d 0079 754a 006e 754a 006c 7541 0067     May.Jun.Jul.Aug.
 80946b0:	6553 0070 634f 0074 6f4e 0076 6544 0063     Sep.Oct.Nov.Dec.
 80946c0:	614a 756e 7261 0079 6546 7262 6175 7972     January.February
 80946d0:	4d00 7261 6863 4100 7270 6c69 4a00 6e75     .March.April.Jun
 80946e0:	0065 754a 796c 4100 6775 7375 0074 6553     e.July.August.Se
 80946f0:	7470 6d65 6562 0072 634f 6f74 6562 0072     ptember.October.
 8094700:	6f4e 6576 626d 7265 4400 6365 6d65 6562     November.Decembe
 8094710:	0072 7553 006e 6f4d 006e 7554 0065 6557     r.Sun.Mon.Tue.We
 8094720:	0064 6854 0075 7246 0069 6153 0074 7553     d.Thu.Fri.Sat.Su
 8094730:	646e 7961 4d00 6e6f 6164 0079 7554 7365     nday.Monday.Tues
 8094740:	6164 0079 6557 6e64 7365 6164 0079 6854     day.Wednesday.Th
 8094750:	7275 6473 7961 4600 6972 6164 0079 6153     ursday.Friday.Sa
 8094760:	7574 6472 7961 2500 2f6d 6425 252f 0079     turday.%m/%d/%y.
 8094770:	6125 2520 2062 6525 2520 3a48 4d25 253a     %a %b %e %H:%M:%
 8094780:	2053 5925 4100 004d 6125 2520 2062 6525     S %Y.AM.%a %b %e
 8094790:	2520 3a48 4d25 253a 2053 5a25 2520 0059      %H:%M:%S %Z %Y.
 80947a0:	4925 253a 3a4d 5325 2520 0070               %I:%M:%S %p.

080947ac <_C_time_locale>:
 80947ac:	4690 0809 4694 0809 4698 0809 469c 0809     .F...F...F...F..
 80947bc:	46a0 0809 46a4 0809 46a8 0809 46ac 0809     .F...F...F...F..
 80947cc:	46b0 0809 46b4 0809 46b8 0809 46bc 0809     .F...F...F...F..
 80947dc:	46c0 0809 46c8 0809 46d1 0809 46d7 0809     .F...F...F...F..
 80947ec:	46a0 0809 46dd 0809 46e2 0809 46e7 0809     .F...F...F...F..
 80947fc:	46ee 0809 46f8 0809 4700 0809 4709 0809     .F...F...G...G..
 809480c:	4712 0809 4716 0809 471a 0809 471e 0809     .G...G...G...G..
 809481c:	4722 0809 4726 0809 472a 0809 472e 0809     "G..&G..*G...G..
 809482c:	4735 0809 473c 0809 4744 0809 474e 0809     5G..<G..DG..NG..
 809483c:	4757 0809 475e 0809 30e2 0809 4767 0809     WG..^G...0..gG..
 809484c:	4770 0809 4785 0809 385e 0809 4788 0809     pG...G..^8...G..
 809485c:	46c0 0809 46c8 0809 46d1 0809 46d7 0809     .F...F...F...F..
 809486c:	46a0 0809 46dd 0809 46e2 0809 46e7 0809     .F...F...F...F..
 809487c:	46ee 0809 46f8 0809 4700 0809 4709 0809     .F...F...G...G..
 809488c:	4183 0809 47a0 0809 4100 0809 4100 0809     .A...G...A...A..
 809489c:	4100 0809 4100 0809 4100 0809 5a54 4700     .A...A...A..TZ.G
 80948ac:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
 80948bc:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
 80948cc:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
 80948dc:	3a6e 6825 2575 006e 0000 0000               n:%hu%n.....

080948e8 <__mprec_tens>:
 80948e8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 80948f8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 8094908:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 8094918:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 8094928:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 8094938:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 8094948:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 8094958:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 8094968:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 8094978:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 8094988:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 8094998:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 80949a8:	9db4 79d9 7843 44ea                         ...yCx.D

080949b0 <__mprec_bigtens>:
 80949b0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 80949c0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 80949d0:	bf3c 7f73 4fdd 7515                         <.s..O.u

080949d8 <p05.5385>:
 80949d8:	0005 0000 0019 0000 007d 0000               ........}...

080949e4 <link_const_variable_data_end>:
 80949e4:	08086735 	.word	0x08086735
 80949e8:	08086e9f 	.word	0x08086e9f
 80949ec:	08086fad 	.word	0x08086fad
 80949f0:	080870b1 	.word	0x080870b1
 80949f4:	08087237 	.word	0x08087237
 80949f8:	080875d9 	.word	0x080875d9
 80949fc:	080875dd 	.word	0x080875dd
 8094a00:	08087bf5 	.word	0x08087bf5
 8094a04:	08087bf9 	.word	0x08087bf9
 8094a08:	08087bfd 	.word	0x08087bfd
 8094a0c:	08087c01 	.word	0x08087c01
 8094a10:	080880cb 	.word	0x080880cb
 8094a14:	0808821d 	.word	0x0808821d
 8094a18:	080888bd 	.word	0x080888bd
 8094a1c:	080888e1 	.word	0x080888e1
 8094a20:	080888e5 	.word	0x080888e5
 8094a24:	08088bfd 	.word	0x08088bfd
 8094a28:	08088c01 	.word	0x08088c01
 8094a2c:	08089089 	.word	0x08089089
 8094a30:	08089279 	.word	0x08089279
 8094a34:	08089855 	.word	0x08089855
 8094a38:	0808a245 	.word	0x0808a245
 8094a3c:	0808a249 	.word	0x0808a249
 8094a40:	0808a24d 	.word	0x0808a24d
 8094a44:	0808a251 	.word	0x0808a251
 8094a48:	0808a255 	.word	0x0808a255
 8094a4c:	0808a259 	.word	0x0808a259
 8094a50:	0808a25d 	.word	0x0808a25d
 8094a54:	0808a261 	.word	0x0808a261
 8094a58:	0808a265 	.word	0x0808a265
 8094a5c:	0808a269 	.word	0x0808a269
 8094a60:	0808a26d 	.word	0x0808a26d
 8094a64:	0808a271 	.word	0x0808a271
 8094a68:	0808a275 	.word	0x0808a275
 8094a6c:	0808a279 	.word	0x0808a279
 8094a70:	0808a27d 	.word	0x0808a27d
 8094a74:	0808a281 	.word	0x0808a281
 8094a78:	0808a285 	.word	0x0808a285
 8094a7c:	0808a289 	.word	0x0808a289
 8094a80:	0808a28d 	.word	0x0808a28d
 8094a84:	0808a291 	.word	0x0808a291
 8094a88:	0808a295 	.word	0x0808a295
 8094a8c:	0808a299 	.word	0x0808a299
 8094a90:	0808a29d 	.word	0x0808a29d
 8094a94:	0808acfd 	.word	0x0808acfd
 8094a98:	0808b7fd 	.word	0x0808b7fd
 8094a9c:	0808bb15 	.word	0x0808bb15
 8094aa0:	0808bb61 	.word	0x0808bb61
 8094aa4:	0808c68d 	.word	0x0808c68d
 8094aa8:	0808c995 	.word	0x0808c995
 8094aac:	0808cc41 	.word	0x0808cc41
 8094ab0:	0808ccc5 	.word	0x0808ccc5
 8094ab4:	0808cd89 	.word	0x0808cd89
 8094ab8:	0808ce0d 	.word	0x0808ce0d
 8094abc:	0808ced1 	.word	0x0808ced1
 8094ac0:	0808cf95 	.word	0x0808cf95

08094ac4 <link_constructors_end>:
	...
